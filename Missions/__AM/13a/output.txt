// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitVariables ;
   8: CALL 120 0 0
// InitMacro ;
  12: CALL 36467 0 0
// PrepareNature ( 4 , 3 , 11 , 6 , 3 , 1 , 0 , nature_area , 0 ) ;
  16: LD_INT 4
  18: PPUSH
  19: LD_INT 3
  21: PPUSH
  22: LD_INT 11
  24: PPUSH
  25: LD_INT 6
  27: PPUSH
  28: LD_INT 3
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: LD_INT 5
  39: PPUSH
  40: LD_INT 0
  42: PPUSH
  43: CALL 32349 0 9
// PrepareRussian ;
  47: CALL 136 0 0
// Skirmish_Start ;
  51: CALL 36666 0 0
// if debug then
  55: LD_EXP 1
  59: IFFALSE 68
// FogOff ( 1 ) ;
  61: LD_INT 1
  63: PPUSH
  64: CALL_OW 344
// end ;
  68: END
// export function CustomInitMacro ; var i ; begin
  69: LD_INT 0
  71: PPUSH
  72: PPUSH
// mc_parking := [ parking_arabian , parking_russian ] ;
  73: LD_ADDR_EXP 28
  77: PUSH
  78: LD_INT 1
  80: PUSH
  81: LD_INT 2
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: ST_TO_ADDR
// mc_scan_area := [ area_base_arabian , area_base_russian ] ;
  88: LD_ADDR_EXP 29
  92: PUSH
  93: LD_INT 3
  95: PUSH
  96: LD_INT 4
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: ST_TO_ADDR
// MC_SetDefenderList ( 2 , russian_guard ) ;
 103: LD_INT 2
 105: PPUSH
 106: LD_EXP 3
 110: PPUSH
 111: CALL 46361 0 2
// end ;
 115: LD_VAR 0 1
 119: RET
// export debug ; function InitVariables ; begin
 120: LD_INT 0
 122: PPUSH
// debug := true ;
 123: LD_ADDR_EXP 1
 127: PUSH
 128: LD_INT 1
 130: ST_TO_ADDR
// end ; end_of_file end_of_file
 131: LD_VAR 0 1
 135: RET
// export russian_force , russian_guard ; export function PrepareRussian ; var i , veh , tmp ; begin
 136: LD_INT 0
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
// uc_side := 3 ;
 142: LD_ADDR_OWVAR 20
 146: PUSH
 147: LD_INT 3
 149: ST_TO_ADDR
// uc_nation := 3 ;
 150: LD_ADDR_OWVAR 21
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// russian_force := PrepareBase ( ru_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 5000 , 1000 , 300 ] , [ 9 , 6 , 6 , 4 ] ) ;
 158: LD_ADDR_EXP 2
 162: PUSH
 163: LD_INT 47
 165: PPUSH
 166: LD_STRING 
 168: PPUSH
 169: LD_INT 7
 171: PUSH
 172: LD_INT 8
 174: PUSH
 175: LD_INT 9
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: PPUSH
 189: LD_INT 5000
 191: PUSH
 192: LD_INT 1000
 194: PUSH
 195: LD_INT 300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: PPUSH
 203: LD_INT 9
 205: PUSH
 206: LD_INT 6
 208: PUSH
 209: LD_INT 6
 211: PUSH
 212: LD_INT 4
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: LIST
 219: LIST
 220: PPUSH
 221: CALL 9120 0 5
 225: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , russian_force ) ;
 226: LD_ADDR_EXP 5
 230: PUSH
 231: LD_EXP 5
 235: PPUSH
 236: LD_INT 2
 238: PPUSH
 239: LD_EXP 2
 243: PPUSH
 244: CALL_OW 1
 248: ST_TO_ADDR
// tmp := [ ] ;
 249: LD_ADDR_VAR 0 4
 253: PUSH
 254: EMPTY
 255: ST_TO_ADDR
// for i = 1 to 4 do
 256: LD_ADDR_VAR 0 2
 260: PUSH
 261: DOUBLE
 262: LD_INT 1
 264: DEC
 265: ST_TO_ADDR
 266: LD_INT 4
 268: PUSH
 269: FOR_TO
 270: IFFALSE 363
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun ] [ i mod 4 + 1 ] , 100 ) ;
 272: LD_INT 22
 274: PPUSH
 275: LD_INT 3
 277: PPUSH
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 43
 283: PUSH
 284: LD_INT 45
 286: PUSH
 287: LD_INT 45
 289: PUSH
 290: LD_INT 44
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: LIST
 297: LIST
 298: PUSH
 299: LD_VAR 0 2
 303: PUSH
 304: LD_INT 4
 306: MOD
 307: PUSH
 308: LD_INT 1
 310: PLUS
 311: ARRAY
 312: PPUSH
 313: LD_INT 100
 315: PPUSH
 316: CALL 5721 0 5
// veh := CreateVehicle ;
 320: LD_ADDR_VAR 0 3
 324: PUSH
 325: CALL_OW 45
 329: ST_TO_ADDR
// tmp := tmp ^ veh ;
 330: LD_ADDR_VAR 0 4
 334: PUSH
 335: LD_VAR 0 4
 339: PUSH
 340: LD_VAR 0 3
 344: ADD
 345: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_russian , false ) ;
 346: LD_VAR 0 3
 350: PPUSH
 351: LD_INT 2
 353: PPUSH
 354: LD_INT 0
 356: PPUSH
 357: CALL_OW 49
// end ;
 361: GO 269
 363: POP
 364: POP
// russian_guard := tmp ;
 365: LD_ADDR_EXP 3
 369: PUSH
 370: LD_VAR 0 4
 374: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
 375: LD_VAR 0 1
 379: RET
// on UnitDestroyed ( un ) do var i , side ;
 380: LD_INT 0
 382: PPUSH
 383: PPUSH
// begin side := GetSide ( un ) ;
 384: LD_ADDR_VAR 0 3
 388: PUSH
 389: LD_VAR 0 1
 393: PPUSH
 394: CALL_OW 255
 398: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
 399: LD_VAR 0 1
 403: PPUSH
 404: CALL 47828 0 1
// end ;
 408: PPOPN 3
 410: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
 411: LD_VAR 0 1
 415: PPUSH
 416: LD_VAR 0 2
 420: PPUSH
 421: CALL 48920 0 2
// end ;
 425: PPOPN 2
 427: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
 428: LD_VAR 0 1
 432: PPUSH
 433: CALL 48666 0 1
// end ;
 437: PPOPN 1
 439: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
 440: LD_VAR 0 1
 444: PPUSH
 445: LD_VAR 0 2
 449: PPUSH
 450: CALL 47745 0 2
// end ;
 454: PPOPN 2
 456: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
 457: LD_VAR 0 1
 461: PPUSH
 462: LD_VAR 0 2
 466: PPUSH
 467: LD_VAR 0 3
 471: PPUSH
 472: LD_VAR 0 4
 476: PPUSH
 477: LD_VAR 0 5
 481: PPUSH
 482: CALL 47511 0 5
// end ;
 486: PPOPN 5
 488: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
 489: LD_VAR 0 1
 493: PPUSH
 494: LD_VAR 0 2
 498: PPUSH
 499: CALL 47199 0 2
// end ;
 503: PPOPN 2
 505: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
 506: LD_VAR 0 1
 510: PPUSH
 511: LD_VAR 0 2
 515: PPUSH
 516: LD_VAR 0 3
 520: PPUSH
 521: LD_VAR 0 4
 525: PPUSH
 526: CALL 47044 0 4
// end ;
 530: PPOPN 4
 532: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
 533: LD_VAR 0 1
 537: PPUSH
 538: LD_VAR 0 2
 542: PPUSH
 543: LD_VAR 0 3
 547: PPUSH
 548: CALL 46826 0 3
// end ;
 552: PPOPN 3
 554: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
 555: LD_VAR 0 1
 559: PPUSH
 560: LD_VAR 0 2
 564: PPUSH
 565: CALL 46718 0 2
// end ;
 569: PPOPN 2
 571: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
 572: LD_VAR 0 1
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL 49174 0 2
// end ;
 586: PPOPN 2
 588: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
 589: LD_VAR 0 1
 593: PPUSH
 594: LD_VAR 0 2
 598: PPUSH
 599: LD_VAR 0 3
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL 49383 0 4
// end ; end_of_file
 613: PPOPN 4
 615: END
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 616: LD_INT 0
 618: PPUSH
 619: PPUSH
// if not side or not nation then
 620: LD_VAR 0 1
 624: NOT
 625: PUSH
 626: LD_VAR 0 2
 630: NOT
 631: OR
 632: IFFALSE 636
// exit ;
 634: GO 1248
// case nation of nation_american :
 636: LD_VAR 0 2
 640: PUSH
 641: LD_INT 1
 643: DOUBLE
 644: EQUAL
 645: IFTRUE 649
 647: GO 807
 649: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
 650: LD_ADDR_VAR 0 4
 654: PUSH
 655: LD_INT 35
 657: PUSH
 658: LD_INT 45
 660: PUSH
 661: LD_INT 46
 663: PUSH
 664: LD_INT 47
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: LD_INT 2
 672: PUSH
 673: LD_INT 6
 675: PUSH
 676: LD_INT 15
 678: PUSH
 679: LD_INT 16
 681: PUSH
 682: LD_INT 7
 684: PUSH
 685: LD_INT 12
 687: PUSH
 688: LD_INT 13
 690: PUSH
 691: LD_INT 10
 693: PUSH
 694: LD_INT 14
 696: PUSH
 697: LD_INT 20
 699: PUSH
 700: LD_INT 25
 702: PUSH
 703: LD_INT 36
 705: PUSH
 706: LD_INT 69
 708: PUSH
 709: LD_INT 39
 711: PUSH
 712: LD_INT 34
 714: PUSH
 715: LD_INT 40
 717: PUSH
 718: LD_INT 48
 720: PUSH
 721: LD_INT 49
 723: PUSH
 724: LD_INT 50
 726: PUSH
 727: LD_INT 51
 729: PUSH
 730: LD_INT 52
 732: PUSH
 733: LD_INT 53
 735: PUSH
 736: LD_INT 54
 738: PUSH
 739: LD_INT 55
 741: PUSH
 742: LD_INT 56
 744: PUSH
 745: LD_INT 57
 747: PUSH
 748: LD_INT 58
 750: PUSH
 751: LD_INT 59
 753: PUSH
 754: LD_INT 60
 756: PUSH
 757: LD_INT 61
 759: PUSH
 760: LD_INT 62
 762: PUSH
 763: LD_INT 80
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: LIST
 804: ST_TO_ADDR
 805: GO 1172
 807: LD_INT 2
 809: DOUBLE
 810: EQUAL
 811: IFTRUE 815
 813: GO 985
 815: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
 816: LD_ADDR_VAR 0 4
 820: PUSH
 821: LD_INT 35
 823: PUSH
 824: LD_INT 45
 826: PUSH
 827: LD_INT 46
 829: PUSH
 830: LD_INT 47
 832: PUSH
 833: LD_INT 70
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 11
 841: PUSH
 842: LD_INT 3
 844: PUSH
 845: LD_INT 4
 847: PUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 6
 853: PUSH
 854: LD_INT 15
 856: PUSH
 857: LD_INT 18
 859: PUSH
 860: LD_INT 7
 862: PUSH
 863: LD_INT 17
 865: PUSH
 866: LD_INT 8
 868: PUSH
 869: LD_INT 20
 871: PUSH
 872: LD_INT 72
 874: PUSH
 875: LD_INT 26
 877: PUSH
 878: LD_INT 69
 880: PUSH
 881: LD_INT 39
 883: PUSH
 884: LD_INT 40
 886: PUSH
 887: LD_INT 41
 889: PUSH
 890: LD_INT 42
 892: PUSH
 893: LD_INT 43
 895: PUSH
 896: LD_INT 48
 898: PUSH
 899: LD_INT 49
 901: PUSH
 902: LD_INT 50
 904: PUSH
 905: LD_INT 51
 907: PUSH
 908: LD_INT 52
 910: PUSH
 911: LD_INT 53
 913: PUSH
 914: LD_INT 54
 916: PUSH
 917: LD_INT 55
 919: PUSH
 920: LD_INT 56
 922: PUSH
 923: LD_INT 60
 925: PUSH
 926: LD_INT 61
 928: PUSH
 929: LD_INT 62
 931: PUSH
 932: LD_INT 66
 934: PUSH
 935: LD_INT 67
 937: PUSH
 938: LD_INT 68
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: LIST
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: ST_TO_ADDR
 983: GO 1172
 985: LD_INT 3
 987: DOUBLE
 988: EQUAL
 989: IFTRUE 993
 991: GO 1171
 993: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
 994: LD_ADDR_VAR 0 4
 998: PUSH
 999: LD_INT 46
1001: PUSH
1002: LD_INT 47
1004: PUSH
1005: LD_INT 1
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 11
1013: PUSH
1014: LD_INT 9
1016: PUSH
1017: LD_INT 20
1019: PUSH
1020: LD_INT 19
1022: PUSH
1023: LD_INT 21
1025: PUSH
1026: LD_INT 24
1028: PUSH
1029: LD_INT 22
1031: PUSH
1032: LD_INT 25
1034: PUSH
1035: LD_INT 28
1037: PUSH
1038: LD_INT 29
1040: PUSH
1041: LD_INT 31
1043: PUSH
1044: LD_INT 37
1046: PUSH
1047: LD_INT 38
1049: PUSH
1050: LD_INT 32
1052: PUSH
1053: LD_INT 27
1055: PUSH
1056: LD_INT 33
1058: PUSH
1059: LD_INT 69
1061: PUSH
1062: LD_INT 39
1064: PUSH
1065: LD_INT 34
1067: PUSH
1068: LD_INT 40
1070: PUSH
1071: LD_INT 71
1073: PUSH
1074: LD_INT 23
1076: PUSH
1077: LD_INT 44
1079: PUSH
1080: LD_INT 48
1082: PUSH
1083: LD_INT 49
1085: PUSH
1086: LD_INT 50
1088: PUSH
1089: LD_INT 51
1091: PUSH
1092: LD_INT 52
1094: PUSH
1095: LD_INT 53
1097: PUSH
1098: LD_INT 54
1100: PUSH
1101: LD_INT 55
1103: PUSH
1104: LD_INT 56
1106: PUSH
1107: LD_INT 57
1109: PUSH
1110: LD_INT 58
1112: PUSH
1113: LD_INT 59
1115: PUSH
1116: LD_INT 63
1118: PUSH
1119: LD_INT 64
1121: PUSH
1122: LD_INT 65
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: ST_TO_ADDR
1169: GO 1172
1171: POP
// if state > - 1 and state < 3 then
1172: LD_VAR 0 3
1176: PUSH
1177: LD_INT 1
1179: NEG
1180: GREATER
1181: PUSH
1182: LD_VAR 0 3
1186: PUSH
1187: LD_INT 3
1189: LESS
1190: AND
1191: IFFALSE 1248
// for i in result do
1193: LD_ADDR_VAR 0 5
1197: PUSH
1198: LD_VAR 0 4
1202: PUSH
1203: FOR_IN
1204: IFFALSE 1246
// if GetTech ( i , side ) <> state then
1206: LD_VAR 0 5
1210: PPUSH
1211: LD_VAR 0 1
1215: PPUSH
1216: CALL_OW 321
1220: PUSH
1221: LD_VAR 0 3
1225: NONEQUAL
1226: IFFALSE 1244
// result := result diff i ;
1228: LD_ADDR_VAR 0 4
1232: PUSH
1233: LD_VAR 0 4
1237: PUSH
1238: LD_VAR 0 5
1242: DIFF
1243: ST_TO_ADDR
1244: GO 1203
1246: POP
1247: POP
// end ;
1248: LD_VAR 0 4
1252: RET
// export function ScanBase ( side , base_area ) ; begin
1253: LD_INT 0
1255: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
1256: LD_ADDR_VAR 0 3
1260: PUSH
1261: LD_VAR 0 2
1265: PPUSH
1266: LD_INT 81
1268: PUSH
1269: LD_VAR 0 1
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: PPUSH
1278: CALL_OW 70
1282: ST_TO_ADDR
// end ;
1283: LD_VAR 0 3
1287: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
1288: LD_INT 0
1290: PPUSH
1291: PPUSH
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
1297: PPUSH
1298: PPUSH
1299: PPUSH
1300: PPUSH
1301: PPUSH
1302: PPUSH
1303: PPUSH
1304: PPUSH
1305: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
1306: LD_ADDR_VAR 0 12
1310: PUSH
1311: LD_EXP 5
1315: PUSH
1316: LD_VAR 0 1
1320: ARRAY
1321: PPUSH
1322: LD_INT 25
1324: PUSH
1325: LD_INT 3
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PPUSH
1332: CALL_OW 72
1336: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
1337: LD_ADDR_VAR 0 8
1341: PUSH
1342: LD_EXP 5
1346: PUSH
1347: LD_VAR 0 1
1351: ARRAY
1352: PPUSH
1353: LD_INT 2
1355: PUSH
1356: LD_INT 25
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 25
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 25
1378: PUSH
1379: LD_INT 8
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: PUSH
1386: LD_INT 25
1388: PUSH
1389: LD_INT 9
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: PPUSH
1403: CALL_OW 72
1407: ST_TO_ADDR
// if not defenders and not solds then
1408: LD_VAR 0 2
1412: NOT
1413: PUSH
1414: LD_VAR 0 8
1418: NOT
1419: AND
1420: IFFALSE 1424
// exit ;
1422: GO 2799
// depot_under_attack := false ;
1424: LD_ADDR_VAR 0 16
1428: PUSH
1429: LD_INT 0
1431: ST_TO_ADDR
// sold_defenders := [ ] ;
1432: LD_ADDR_VAR 0 17
1436: PUSH
1437: EMPTY
1438: ST_TO_ADDR
// if mechs then
1439: LD_VAR 0 12
1443: IFFALSE 1572
// for i in defenders do
1445: LD_ADDR_VAR 0 5
1449: PUSH
1450: LD_VAR 0 2
1454: PUSH
1455: FOR_IN
1456: IFFALSE 1570
// begin SetTag ( i , 20 ) ;
1458: LD_VAR 0 5
1462: PPUSH
1463: LD_INT 20
1465: PPUSH
1466: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
1470: LD_VAR 0 5
1474: PPUSH
1475: CALL_OW 263
1479: PUSH
1480: LD_INT 1
1482: EQUAL
1483: PUSH
1484: LD_VAR 0 5
1488: PPUSH
1489: CALL_OW 311
1493: NOT
1494: AND
1495: PUSH
1496: LD_VAR 0 12
1500: AND
1501: IFFALSE 1568
// begin un := mechs [ 1 ] ;
1503: LD_ADDR_VAR 0 10
1507: PUSH
1508: LD_VAR 0 12
1512: PUSH
1513: LD_INT 1
1515: ARRAY
1516: ST_TO_ADDR
// ComExitBuilding ( un ) ;
1517: LD_VAR 0 10
1521: PPUSH
1522: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
1526: LD_VAR 0 10
1530: PPUSH
1531: LD_VAR 0 5
1535: PPUSH
1536: CALL_OW 180
// SetTag ( un , 19 ) ;
1540: LD_VAR 0 10
1544: PPUSH
1545: LD_INT 19
1547: PPUSH
1548: CALL_OW 109
// mechs := mechs diff un ;
1552: LD_ADDR_VAR 0 12
1556: PUSH
1557: LD_VAR 0 12
1561: PUSH
1562: LD_VAR 0 10
1566: DIFF
1567: ST_TO_ADDR
// end ; end ;
1568: GO 1455
1570: POP
1571: POP
// if solds then
1572: LD_VAR 0 8
1576: IFFALSE 1635
// for i in solds do
1578: LD_ADDR_VAR 0 5
1582: PUSH
1583: LD_VAR 0 8
1587: PUSH
1588: FOR_IN
1589: IFFALSE 1633
// if not GetTag ( i ) then
1591: LD_VAR 0 5
1595: PPUSH
1596: CALL_OW 110
1600: NOT
1601: IFFALSE 1631
// begin defenders := defenders union i ;
1603: LD_ADDR_VAR 0 2
1607: PUSH
1608: LD_VAR 0 2
1612: PUSH
1613: LD_VAR 0 5
1617: UNION
1618: ST_TO_ADDR
// SetTag ( i , 18 ) ;
1619: LD_VAR 0 5
1623: PPUSH
1624: LD_INT 18
1626: PPUSH
1627: CALL_OW 109
// end ;
1631: GO 1588
1633: POP
1634: POP
// repeat wait ( 0 0$1 ) ;
1635: LD_INT 35
1637: PPUSH
1638: CALL_OW 67
// enemy := mc_scan [ base ] ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: LD_EXP 27
1651: PUSH
1652: LD_VAR 0 1
1656: ARRAY
1657: ST_TO_ADDR
// for i in defenders do
1658: LD_ADDR_VAR 0 5
1662: PUSH
1663: LD_VAR 0 2
1667: PUSH
1668: FOR_IN
1669: IFFALSE 2354
// begin e := NearestUnitToUnit ( enemy , i ) ;
1671: LD_ADDR_VAR 0 13
1675: PUSH
1676: LD_VAR 0 3
1680: PPUSH
1681: LD_VAR 0 5
1685: PPUSH
1686: CALL_OW 74
1690: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
1691: LD_ADDR_VAR 0 16
1695: PUSH
1696: LD_EXP 5
1700: PUSH
1701: LD_VAR 0 1
1705: ARRAY
1706: PPUSH
1707: LD_INT 2
1709: PUSH
1710: LD_INT 30
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 30
1722: PUSH
1723: LD_INT 1
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: PPUSH
1735: CALL_OW 72
1739: NOT
1740: PUSH
1741: LD_EXP 5
1745: PUSH
1746: LD_VAR 0 1
1750: ARRAY
1751: PPUSH
1752: LD_INT 2
1754: PUSH
1755: LD_INT 30
1757: PUSH
1758: LD_INT 0
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: PUSH
1765: LD_INT 30
1767: PUSH
1768: LD_INT 1
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: PPUSH
1780: CALL_OW 72
1784: PPUSH
1785: CALL_OW 256
1789: PUSH
1790: LD_INT 600
1792: LESS
1793: OR
1794: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
1795: LD_VAR 0 5
1799: PPUSH
1800: CALL_OW 247
1804: PUSH
1805: LD_INT 2
1807: DOUBLE
1808: EQUAL
1809: IFTRUE 1813
1811: GO 2060
1813: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
1814: LD_VAR 0 5
1818: PPUSH
1819: CALL_OW 256
1823: PUSH
1824: LD_INT 650
1826: GREATER
1827: PUSH
1828: LD_VAR 0 5
1832: PPUSH
1833: LD_VAR 0 13
1837: PPUSH
1838: CALL_OW 296
1842: PUSH
1843: LD_INT 40
1845: LESS
1846: AND
1847: IFFALSE 1865
// ComAttackUnit ( i , e ) else
1849: LD_VAR 0 5
1853: PPUSH
1854: LD_VAR 0 13
1858: PPUSH
1859: CALL_OW 115
1863: GO 1943
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
1865: LD_VAR 0 5
1869: PPUSH
1870: LD_VAR 0 13
1874: PPUSH
1875: CALL_OW 296
1879: PUSH
1880: LD_INT 30
1882: GREATEREQUAL
1883: PUSH
1884: LD_VAR 0 5
1888: PPUSH
1889: CALL_OW 256
1893: PUSH
1894: LD_INT 650
1896: LESSEQUAL
1897: OR
1898: PUSH
1899: LD_VAR 0 5
1903: PPUSH
1904: LD_EXP 28
1908: PUSH
1909: LD_VAR 0 1
1913: ARRAY
1914: PPUSH
1915: CALL_OW 308
1919: NOT
1920: AND
1921: IFFALSE 1943
// ComMoveToArea ( i , mc_parking [ base ] ) ;
1923: LD_VAR 0 5
1927: PPUSH
1928: LD_EXP 28
1932: PUSH
1933: LD_VAR 0 1
1937: ARRAY
1938: PPUSH
1939: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
1943: LD_VAR 0 5
1947: PPUSH
1948: CALL_OW 256
1952: PUSH
1953: LD_INT 998
1955: LESS
1956: PUSH
1957: LD_VAR 0 5
1961: PPUSH
1962: CALL_OW 263
1966: PUSH
1967: LD_INT 1
1969: EQUAL
1970: AND
1971: PUSH
1972: LD_VAR 0 5
1976: PPUSH
1977: CALL_OW 311
1981: AND
1982: PUSH
1983: LD_VAR 0 5
1987: PPUSH
1988: LD_EXP 28
1992: PUSH
1993: LD_VAR 0 1
1997: ARRAY
1998: PPUSH
1999: CALL_OW 308
2003: AND
2004: IFFALSE 2058
// begin mech := IsDrivenBy ( i ) ;
2006: LD_ADDR_VAR 0 9
2010: PUSH
2011: LD_VAR 0 5
2015: PPUSH
2016: CALL_OW 311
2020: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
2021: LD_VAR 0 9
2025: PPUSH
2026: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
2030: LD_VAR 0 9
2034: PPUSH
2035: LD_VAR 0 5
2039: PPUSH
2040: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
2044: LD_VAR 0 9
2048: PPUSH
2049: LD_VAR 0 5
2053: PPUSH
2054: CALL_OW 180
// end ; end ; unit_human :
2058: GO 2325
2060: LD_INT 1
2062: DOUBLE
2063: EQUAL
2064: IFTRUE 2068
2066: GO 2324
2068: POP
// begin b := IsInUnit ( i ) ;
2069: LD_ADDR_VAR 0 18
2073: PUSH
2074: LD_VAR 0 5
2078: PPUSH
2079: CALL_OW 310
2083: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
2084: LD_ADDR_VAR 0 19
2088: PUSH
2089: LD_VAR 0 18
2093: NOT
2094: PUSH
2095: LD_VAR 0 18
2099: PPUSH
2100: CALL_OW 266
2104: PUSH
2105: LD_INT 32
2107: PUSH
2108: LD_INT 31
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: IN
2115: OR
2116: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
2117: LD_VAR 0 16
2121: PUSH
2122: LD_VAR 0 2
2126: PPUSH
2127: LD_INT 21
2129: PUSH
2130: LD_INT 2
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 72
2141: PUSH
2142: LD_INT 1
2144: LESSEQUAL
2145: OR
2146: PUSH
2147: LD_VAR 0 19
2151: AND
2152: PUSH
2153: LD_VAR 0 5
2157: PUSH
2158: LD_VAR 0 17
2162: IN
2163: NOT
2164: AND
2165: IFFALSE 2258
// begin if b then
2167: LD_VAR 0 18
2171: IFFALSE 2220
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
2173: LD_VAR 0 18
2177: PPUSH
2178: LD_VAR 0 3
2182: PPUSH
2183: LD_VAR 0 18
2187: PPUSH
2188: CALL_OW 74
2192: PPUSH
2193: CALL_OW 296
2197: PUSH
2198: LD_INT 10
2200: LESS
2201: PUSH
2202: LD_VAR 0 18
2206: PPUSH
2207: CALL_OW 461
2211: PUSH
2212: LD_INT 7
2214: NONEQUAL
2215: AND
2216: IFFALSE 2220
// continue ;
2218: GO 1668
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
2220: LD_ADDR_VAR 0 17
2224: PUSH
2225: LD_VAR 0 17
2229: PPUSH
2230: LD_VAR 0 17
2234: PUSH
2235: LD_INT 1
2237: PLUS
2238: PPUSH
2239: LD_VAR 0 5
2243: PPUSH
2244: CALL_OW 1
2248: ST_TO_ADDR
// ComExitBuilding ( i ) ;
2249: LD_VAR 0 5
2253: PPUSH
2254: CALL_OW 122
// end ; if sold_defenders then
2258: LD_VAR 0 17
2262: IFFALSE 2322
// if i in sold_defenders then
2264: LD_VAR 0 5
2268: PUSH
2269: LD_VAR 0 17
2273: IN
2274: IFFALSE 2322
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
2276: LD_VAR 0 5
2280: PPUSH
2281: CALL_OW 314
2285: NOT
2286: PUSH
2287: LD_VAR 0 5
2291: PPUSH
2292: LD_VAR 0 13
2296: PPUSH
2297: CALL_OW 296
2301: PUSH
2302: LD_INT 30
2304: LESS
2305: AND
2306: IFFALSE 2322
// ComAttackUnit ( i , e ) ;
2308: LD_VAR 0 5
2312: PPUSH
2313: LD_VAR 0 13
2317: PPUSH
2318: CALL_OW 115
// end ; end ; end ;
2322: GO 2325
2324: POP
// if IsDead ( i ) then
2325: LD_VAR 0 5
2329: PPUSH
2330: CALL_OW 301
2334: IFFALSE 2352
// defenders := defenders diff i ;
2336: LD_ADDR_VAR 0 2
2340: PUSH
2341: LD_VAR 0 2
2345: PUSH
2346: LD_VAR 0 5
2350: DIFF
2351: ST_TO_ADDR
// end ;
2352: GO 1668
2354: POP
2355: POP
// until not enemy or not defenders ;
2356: LD_VAR 0 3
2360: NOT
2361: PUSH
2362: LD_VAR 0 2
2366: NOT
2367: OR
2368: IFFALSE 1635
// MC_Reset ( base , 18 ) ;
2370: LD_VAR 0 1
2374: PPUSH
2375: LD_INT 18
2377: PPUSH
2378: CALL 37879 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: LD_VAR 0 2
2391: PUSH
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 2
2399: PUSH
2400: LD_INT 25
2402: PUSH
2403: LD_INT 1
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: PUSH
2410: LD_INT 25
2412: PUSH
2413: LD_INT 5
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 25
2422: PUSH
2423: LD_INT 8
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: LD_INT 25
2432: PUSH
2433: LD_INT 9
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: LIST
2444: LIST
2445: LIST
2446: PPUSH
2447: CALL_OW 72
2451: DIFF
2452: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
2453: LD_VAR 0 3
2457: NOT
2458: PUSH
2459: LD_VAR 0 2
2463: PPUSH
2464: LD_INT 21
2466: PUSH
2467: LD_INT 2
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PPUSH
2474: CALL_OW 72
2478: AND
2479: IFFALSE 2750
// begin tmp := GetByTag ( GetSide ( defenders [ 1 ] ) , 19 ) ;
2481: LD_ADDR_VAR 0 11
2485: PUSH
2486: LD_VAR 0 2
2490: PUSH
2491: LD_INT 1
2493: ARRAY
2494: PPUSH
2495: CALL_OW 255
2499: PPUSH
2500: LD_INT 19
2502: PPUSH
2503: CALL 36356 0 2
2507: ST_TO_ADDR
// if tmp then
2508: LD_VAR 0 11
2512: IFFALSE 2582
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
2514: LD_ADDR_VAR 0 11
2518: PUSH
2519: LD_VAR 0 11
2523: PPUSH
2524: LD_INT 25
2526: PUSH
2527: LD_INT 3
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: PPUSH
2534: CALL_OW 72
2538: ST_TO_ADDR
// if tmp then
2539: LD_VAR 0 11
2543: IFFALSE 2582
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
2545: LD_ADDR_EXP 17
2549: PUSH
2550: LD_EXP 17
2554: PPUSH
2555: LD_VAR 0 1
2559: PPUSH
2560: LD_EXP 17
2564: PUSH
2565: LD_VAR 0 1
2569: ARRAY
2570: PUSH
2571: LD_VAR 0 11
2575: UNION
2576: PPUSH
2577: CALL_OW 1
2581: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
2582: LD_VAR 0 1
2586: PPUSH
2587: LD_INT 19
2589: PPUSH
2590: CALL 37879 0 2
// repeat wait ( 0 0$1 ) ;
2594: LD_INT 35
2596: PPUSH
2597: CALL_OW 67
// for i in defenders do
2601: LD_ADDR_VAR 0 5
2605: PUSH
2606: LD_VAR 0 2
2610: PUSH
2611: FOR_IN
2612: IFFALSE 2701
// begin if not IsInArea ( i , mc_parking [ base ] ) then
2614: LD_VAR 0 5
2618: PPUSH
2619: LD_EXP 28
2623: PUSH
2624: LD_VAR 0 1
2628: ARRAY
2629: PPUSH
2630: CALL_OW 308
2634: NOT
2635: IFFALSE 2659
// ComMoveToArea ( i , mc_parking [ base ] ) else
2637: LD_VAR 0 5
2641: PPUSH
2642: LD_EXP 28
2646: PUSH
2647: LD_VAR 0 1
2651: ARRAY
2652: PPUSH
2653: CALL_OW 113
2657: GO 2699
// if GetControl ( i ) = control_manual then
2659: LD_VAR 0 5
2663: PPUSH
2664: CALL_OW 263
2668: PUSH
2669: LD_INT 1
2671: EQUAL
2672: IFFALSE 2699
// if IsDrivenBy ( i ) then
2674: LD_VAR 0 5
2678: PPUSH
2679: CALL_OW 311
2683: IFFALSE 2699
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
2685: LD_VAR 0 5
2689: PPUSH
2690: CALL_OW 311
2694: PPUSH
2695: CALL_OW 121
// end ;
2699: GO 2611
2701: POP
2702: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
2703: LD_VAR 0 2
2707: PPUSH
2708: LD_INT 95
2710: PUSH
2711: LD_EXP 28
2715: PUSH
2716: LD_VAR 0 1
2720: ARRAY
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PPUSH
2726: CALL_OW 72
2730: PUSH
2731: LD_VAR 0 2
2735: EQUAL
2736: PUSH
2737: LD_EXP 27
2741: PUSH
2742: LD_VAR 0 1
2746: ARRAY
2747: OR
2748: IFFALSE 2594
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
2750: LD_ADDR_EXP 26
2754: PUSH
2755: LD_EXP 26
2759: PPUSH
2760: LD_VAR 0 1
2764: PPUSH
2765: LD_EXP 26
2769: PUSH
2770: LD_VAR 0 1
2774: ARRAY
2775: PUSH
2776: LD_VAR 0 2
2780: UNION
2781: PPUSH
2782: CALL_OW 1
2786: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
2787: LD_VAR 0 1
2791: PPUSH
2792: LD_INT 20
2794: PPUSH
2795: CALL 37879 0 2
// end ;
2799: LD_VAR 0 4
2803: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2804: LD_INT 0
2806: PPUSH
2807: PPUSH
2808: PPUSH
2809: PPUSH
// result := false ;
2810: LD_ADDR_VAR 0 2
2814: PUSH
2815: LD_INT 0
2817: ST_TO_ADDR
// side := GetSide ( unit ) ;
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_VAR 0 1
2827: PPUSH
2828: CALL_OW 255
2832: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2833: LD_ADDR_VAR 0 4
2837: PUSH
2838: LD_VAR 0 1
2842: PPUSH
2843: CALL_OW 248
2847: ST_TO_ADDR
// case nat of 1 :
2848: LD_VAR 0 4
2852: PUSH
2853: LD_INT 1
2855: DOUBLE
2856: EQUAL
2857: IFTRUE 2861
2859: GO 2872
2861: POP
// tech := tech_lassight ; 2 :
2862: LD_ADDR_VAR 0 5
2866: PUSH
2867: LD_INT 12
2869: ST_TO_ADDR
2870: GO 2911
2872: LD_INT 2
2874: DOUBLE
2875: EQUAL
2876: IFTRUE 2880
2878: GO 2891
2880: POP
// tech := tech_mortar ; 3 :
2881: LD_ADDR_VAR 0 5
2885: PUSH
2886: LD_INT 41
2888: ST_TO_ADDR
2889: GO 2911
2891: LD_INT 3
2893: DOUBLE
2894: EQUAL
2895: IFTRUE 2899
2897: GO 2910
2899: POP
// tech := tech_bazooka ; end ;
2900: LD_ADDR_VAR 0 5
2904: PUSH
2905: LD_INT 44
2907: ST_TO_ADDR
2908: GO 2911
2910: POP
// if Researched ( side , tech ) then
2911: LD_VAR 0 3
2915: PPUSH
2916: LD_VAR 0 5
2920: PPUSH
2921: CALL_OW 325
2925: IFFALSE 2952
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2927: LD_ADDR_VAR 0 2
2931: PUSH
2932: LD_INT 5
2934: PUSH
2935: LD_INT 8
2937: PUSH
2938: LD_INT 9
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: LIST
2945: PUSH
2946: LD_VAR 0 4
2950: ARRAY
2951: ST_TO_ADDR
// end ;
2952: LD_VAR 0 2
2956: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2957: LD_INT 0
2959: PPUSH
2960: PPUSH
2961: PPUSH
// if not mines then
2962: LD_VAR 0 2
2966: NOT
2967: IFFALSE 2971
// exit ;
2969: GO 3115
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2971: LD_ADDR_VAR 0 5
2975: PUSH
2976: LD_INT 81
2978: PUSH
2979: LD_VAR 0 1
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: PUSH
2988: LD_INT 3
2990: PUSH
2991: LD_INT 21
2993: PUSH
2994: LD_INT 3
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PPUSH
3009: CALL_OW 69
3013: ST_TO_ADDR
// for i in mines do
3014: LD_ADDR_VAR 0 4
3018: PUSH
3019: LD_VAR 0 2
3023: PUSH
3024: FOR_IN
3025: IFFALSE 3113
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3027: LD_VAR 0 4
3031: PUSH
3032: LD_INT 1
3034: ARRAY
3035: PPUSH
3036: LD_VAR 0 4
3040: PUSH
3041: LD_INT 2
3043: ARRAY
3044: PPUSH
3045: CALL_OW 458
3049: NOT
3050: IFFALSE 3054
// continue ;
3052: GO 3024
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3054: LD_VAR 0 4
3058: PUSH
3059: LD_INT 1
3061: ARRAY
3062: PPUSH
3063: LD_VAR 0 4
3067: PUSH
3068: LD_INT 2
3070: ARRAY
3071: PPUSH
3072: CALL_OW 428
3076: PUSH
3077: LD_VAR 0 5
3081: IN
3082: IFFALSE 3111
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3084: LD_VAR 0 4
3088: PUSH
3089: LD_INT 1
3091: ARRAY
3092: PPUSH
3093: LD_VAR 0 4
3097: PUSH
3098: LD_INT 2
3100: ARRAY
3101: PPUSH
3102: LD_VAR 0 1
3106: PPUSH
3107: CALL_OW 456
// end ;
3111: GO 3024
3113: POP
3114: POP
// end ;
3115: LD_VAR 0 3
3119: RET
// export function Count ( array ) ; var i ; begin
3120: LD_INT 0
3122: PPUSH
3123: PPUSH
// result := 0 ;
3124: LD_ADDR_VAR 0 2
3128: PUSH
3129: LD_INT 0
3131: ST_TO_ADDR
// for i in array do
3132: LD_ADDR_VAR 0 3
3136: PUSH
3137: LD_VAR 0 1
3141: PUSH
3142: FOR_IN
3143: IFFALSE 3167
// if i then
3145: LD_VAR 0 3
3149: IFFALSE 3165
// result := result + 1 ;
3151: LD_ADDR_VAR 0 2
3155: PUSH
3156: LD_VAR 0 2
3160: PUSH
3161: LD_INT 1
3163: PLUS
3164: ST_TO_ADDR
3165: GO 3142
3167: POP
3168: POP
// end ;
3169: LD_VAR 0 2
3173: RET
// export function IsEmpty ( building ) ; begin
3174: LD_INT 0
3176: PPUSH
// if not building then
3177: LD_VAR 0 1
3181: NOT
3182: IFFALSE 3186
// exit ;
3184: GO 3208
// result := building in FilterAllUnits ( [ f_empty ] ) ;
3186: LD_ADDR_VAR 0 2
3190: PUSH
3191: LD_VAR 0 1
3195: PUSH
3196: LD_INT 58
3198: PUSH
3199: EMPTY
3200: LIST
3201: PPUSH
3202: CALL_OW 69
3206: IN
3207: ST_TO_ADDR
// end ;
3208: LD_VAR 0 2
3212: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3213: LD_INT 0
3215: PPUSH
3216: PPUSH
3217: PPUSH
3218: PPUSH
// tmp := [ ] ;
3219: LD_ADDR_VAR 0 3
3223: PUSH
3224: EMPTY
3225: ST_TO_ADDR
// list := [ ] ;
3226: LD_ADDR_VAR 0 5
3230: PUSH
3231: EMPTY
3232: ST_TO_ADDR
// for i = 16 to 25 do
3233: LD_ADDR_VAR 0 4
3237: PUSH
3238: DOUBLE
3239: LD_INT 16
3241: DEC
3242: ST_TO_ADDR
3243: LD_INT 25
3245: PUSH
3246: FOR_TO
3247: IFFALSE 3320
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3249: LD_ADDR_VAR 0 3
3253: PUSH
3254: LD_VAR 0 3
3258: PUSH
3259: LD_INT 22
3261: PUSH
3262: LD_VAR 0 1
3266: PPUSH
3267: CALL_OW 255
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: PUSH
3276: LD_INT 91
3278: PUSH
3279: LD_VAR 0 1
3283: PUSH
3284: LD_INT 6
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: LIST
3291: PUSH
3292: LD_INT 30
3294: PUSH
3295: LD_VAR 0 4
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: PPUSH
3312: CALL_OW 69
3316: ADD
3317: ST_TO_ADDR
3318: GO 3246
3320: POP
3321: POP
// for i = 1 to tmp do
3322: LD_ADDR_VAR 0 4
3326: PUSH
3327: DOUBLE
3328: LD_INT 1
3330: DEC
3331: ST_TO_ADDR
3332: LD_VAR 0 3
3336: PUSH
3337: FOR_TO
3338: IFFALSE 3426
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3340: LD_ADDR_VAR 0 5
3344: PUSH
3345: LD_VAR 0 5
3349: PUSH
3350: LD_VAR 0 3
3354: PUSH
3355: LD_VAR 0 4
3359: ARRAY
3360: PPUSH
3361: CALL_OW 266
3365: PUSH
3366: LD_VAR 0 3
3370: PUSH
3371: LD_VAR 0 4
3375: ARRAY
3376: PPUSH
3377: CALL_OW 250
3381: PUSH
3382: LD_VAR 0 3
3386: PUSH
3387: LD_VAR 0 4
3391: ARRAY
3392: PPUSH
3393: CALL_OW 251
3397: PUSH
3398: LD_VAR 0 3
3402: PUSH
3403: LD_VAR 0 4
3407: ARRAY
3408: PPUSH
3409: CALL_OW 254
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: PUSH
3420: EMPTY
3421: LIST
3422: ADD
3423: ST_TO_ADDR
3424: GO 3337
3426: POP
3427: POP
// result := list ;
3428: LD_ADDR_VAR 0 2
3432: PUSH
3433: LD_VAR 0 5
3437: ST_TO_ADDR
// end ;
3438: LD_VAR 0 2
3442: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3443: LD_INT 0
3445: PPUSH
3446: PPUSH
3447: PPUSH
3448: PPUSH
3449: PPUSH
3450: PPUSH
3451: PPUSH
// if not factory then
3452: LD_VAR 0 1
3456: NOT
3457: IFFALSE 3461
// exit ;
3459: GO 3986
// if control = control_apeman then
3461: LD_VAR 0 4
3465: PUSH
3466: LD_INT 5
3468: EQUAL
3469: IFFALSE 3578
// begin tmp := UnitsInside ( factory ) ;
3471: LD_ADDR_VAR 0 8
3475: PUSH
3476: LD_VAR 0 1
3480: PPUSH
3481: CALL_OW 313
3485: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3486: LD_VAR 0 8
3490: PPUSH
3491: LD_INT 25
3493: PUSH
3494: LD_INT 12
3496: PUSH
3497: EMPTY
3498: LIST
3499: LIST
3500: PPUSH
3501: CALL_OW 72
3505: NOT
3506: IFFALSE 3516
// control := control_manual ;
3508: LD_ADDR_VAR 0 4
3512: PUSH
3513: LD_INT 1
3515: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3516: LD_ADDR_VAR 0 8
3520: PUSH
3521: LD_VAR 0 1
3525: PPUSH
3526: CALL 3213 0 1
3530: ST_TO_ADDR
// if tmp then
3531: LD_VAR 0 8
3535: IFFALSE 3578
// begin for i in tmp do
3537: LD_ADDR_VAR 0 7
3541: PUSH
3542: LD_VAR 0 8
3546: PUSH
3547: FOR_IN
3548: IFFALSE 3576
// if i [ 1 ] = b_ext_radar then
3550: LD_VAR 0 7
3554: PUSH
3555: LD_INT 1
3557: ARRAY
3558: PUSH
3559: LD_INT 20
3561: EQUAL
3562: IFFALSE 3574
// begin control := control_remote ;
3564: LD_ADDR_VAR 0 4
3568: PUSH
3569: LD_INT 2
3571: ST_TO_ADDR
// break ;
3572: GO 3576
// end ;
3574: GO 3547
3576: POP
3577: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3578: LD_VAR 0 1
3582: PPUSH
3583: LD_VAR 0 2
3587: PPUSH
3588: LD_VAR 0 3
3592: PPUSH
3593: LD_VAR 0 4
3597: PPUSH
3598: LD_VAR 0 5
3602: PPUSH
3603: CALL_OW 448
3607: IFFALSE 3642
// begin result := [ chassis , engine , control , weapon ] ;
3609: LD_ADDR_VAR 0 6
3613: PUSH
3614: LD_VAR 0 2
3618: PUSH
3619: LD_VAR 0 3
3623: PUSH
3624: LD_VAR 0 4
3628: PUSH
3629: LD_VAR 0 5
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: ST_TO_ADDR
// exit ;
3640: GO 3986
// end ; _chassis := AvailableChassisList ( factory ) ;
3642: LD_ADDR_VAR 0 9
3646: PUSH
3647: LD_VAR 0 1
3651: PPUSH
3652: CALL_OW 475
3656: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3657: LD_ADDR_VAR 0 11
3661: PUSH
3662: LD_VAR 0 1
3666: PPUSH
3667: CALL_OW 476
3671: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3672: LD_ADDR_VAR 0 12
3676: PUSH
3677: LD_VAR 0 1
3681: PPUSH
3682: CALL_OW 477
3686: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3687: LD_ADDR_VAR 0 10
3691: PUSH
3692: LD_VAR 0 1
3696: PPUSH
3697: CALL_OW 478
3701: ST_TO_ADDR
// if not chassis in _chassis then
3702: LD_VAR 0 2
3706: PUSH
3707: LD_VAR 0 9
3711: IN
3712: NOT
3713: IFFALSE 3739
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3715: LD_ADDR_VAR 0 2
3719: PUSH
3720: LD_VAR 0 9
3724: PUSH
3725: LD_INT 1
3727: PPUSH
3728: LD_VAR 0 9
3732: PPUSH
3733: CALL_OW 12
3737: ARRAY
3738: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3739: LD_VAR 0 2
3743: PPUSH
3744: LD_VAR 0 3
3748: PPUSH
3749: CALL 3991 0 2
3753: NOT
3754: IFFALSE 3813
// repeat engine := _engine [ 1 ] ;
3756: LD_ADDR_VAR 0 3
3760: PUSH
3761: LD_VAR 0 11
3765: PUSH
3766: LD_INT 1
3768: ARRAY
3769: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3770: LD_ADDR_VAR 0 11
3774: PUSH
3775: LD_VAR 0 11
3779: PPUSH
3780: LD_INT 1
3782: PPUSH
3783: CALL_OW 3
3787: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3788: LD_VAR 0 2
3792: PPUSH
3793: LD_VAR 0 3
3797: PPUSH
3798: CALL 3991 0 2
3802: PUSH
3803: LD_VAR 0 11
3807: PUSH
3808: EMPTY
3809: EQUAL
3810: OR
3811: IFFALSE 3756
// if not control in _control then
3813: LD_VAR 0 4
3817: PUSH
3818: LD_VAR 0 12
3822: IN
3823: NOT
3824: IFFALSE 3850
// control := _control [ rand ( 1 , _control ) ] ;
3826: LD_ADDR_VAR 0 4
3830: PUSH
3831: LD_VAR 0 12
3835: PUSH
3836: LD_INT 1
3838: PPUSH
3839: LD_VAR 0 12
3843: PPUSH
3844: CALL_OW 12
3848: ARRAY
3849: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3850: LD_VAR 0 2
3854: PPUSH
3855: LD_VAR 0 5
3859: PPUSH
3860: CALL 4211 0 2
3864: NOT
3865: IFFALSE 3924
// repeat weapon := _weapon [ 1 ] ;
3867: LD_ADDR_VAR 0 5
3871: PUSH
3872: LD_VAR 0 10
3876: PUSH
3877: LD_INT 1
3879: ARRAY
3880: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3881: LD_ADDR_VAR 0 10
3885: PUSH
3886: LD_VAR 0 10
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: CALL_OW 3
3898: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3899: LD_VAR 0 2
3903: PPUSH
3904: LD_VAR 0 5
3908: PPUSH
3909: CALL 4211 0 2
3913: PUSH
3914: LD_VAR 0 10
3918: PUSH
3919: EMPTY
3920: EQUAL
3921: OR
3922: IFFALSE 3867
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3924: LD_VAR 0 1
3928: PPUSH
3929: LD_VAR 0 2
3933: PPUSH
3934: LD_VAR 0 3
3938: PPUSH
3939: LD_VAR 0 4
3943: PPUSH
3944: LD_VAR 0 5
3948: PPUSH
3949: CALL_OW 448
3953: IFFALSE 3986
// result := [ chassis , engine , control , weapon ] ;
3955: LD_ADDR_VAR 0 6
3959: PUSH
3960: LD_VAR 0 2
3964: PUSH
3965: LD_VAR 0 3
3969: PUSH
3970: LD_VAR 0 4
3974: PUSH
3975: LD_VAR 0 5
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: ST_TO_ADDR
// end ;
3986: LD_VAR 0 6
3990: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3991: LD_INT 0
3993: PPUSH
// if not chassis or not engine then
3994: LD_VAR 0 1
3998: NOT
3999: PUSH
4000: LD_VAR 0 2
4004: NOT
4005: OR
4006: IFFALSE 4010
// exit ;
4008: GO 4206
// case engine of engine_solar :
4010: LD_VAR 0 2
4014: PUSH
4015: LD_INT 2
4017: DOUBLE
4018: EQUAL
4019: IFTRUE 4023
4021: GO 4061
4023: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4024: LD_ADDR_VAR 0 3
4028: PUSH
4029: LD_INT 11
4031: PUSH
4032: LD_INT 12
4034: PUSH
4035: LD_INT 13
4037: PUSH
4038: LD_INT 14
4040: PUSH
4041: LD_INT 1
4043: PUSH
4044: LD_INT 2
4046: PUSH
4047: LD_INT 3
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: ST_TO_ADDR
4059: GO 4190
4061: LD_INT 1
4063: DOUBLE
4064: EQUAL
4065: IFTRUE 4069
4067: GO 4131
4069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4070: LD_ADDR_VAR 0 3
4074: PUSH
4075: LD_INT 11
4077: PUSH
4078: LD_INT 12
4080: PUSH
4081: LD_INT 13
4083: PUSH
4084: LD_INT 14
4086: PUSH
4087: LD_INT 1
4089: PUSH
4090: LD_INT 2
4092: PUSH
4093: LD_INT 3
4095: PUSH
4096: LD_INT 4
4098: PUSH
4099: LD_INT 5
4101: PUSH
4102: LD_INT 21
4104: PUSH
4105: LD_INT 23
4107: PUSH
4108: LD_INT 22
4110: PUSH
4111: LD_INT 24
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: ST_TO_ADDR
4129: GO 4190
4131: LD_INT 3
4133: DOUBLE
4134: EQUAL
4135: IFTRUE 4139
4137: GO 4189
4139: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4140: LD_ADDR_VAR 0 3
4144: PUSH
4145: LD_INT 13
4147: PUSH
4148: LD_INT 14
4150: PUSH
4151: LD_INT 2
4153: PUSH
4154: LD_INT 3
4156: PUSH
4157: LD_INT 4
4159: PUSH
4160: LD_INT 5
4162: PUSH
4163: LD_INT 21
4165: PUSH
4166: LD_INT 22
4168: PUSH
4169: LD_INT 23
4171: PUSH
4172: LD_INT 24
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: ST_TO_ADDR
4187: GO 4190
4189: POP
// result := ( chassis in result ) ;
4190: LD_ADDR_VAR 0 3
4194: PUSH
4195: LD_VAR 0 1
4199: PUSH
4200: LD_VAR 0 3
4204: IN
4205: ST_TO_ADDR
// end ;
4206: LD_VAR 0 3
4210: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4211: LD_INT 0
4213: PPUSH
// if not chassis or not weapon then
4214: LD_VAR 0 1
4218: NOT
4219: PUSH
4220: LD_VAR 0 2
4224: NOT
4225: OR
4226: IFFALSE 4230
// exit ;
4228: GO 5256
// case weapon of us_machine_gun :
4230: LD_VAR 0 2
4234: PUSH
4235: LD_INT 2
4237: DOUBLE
4238: EQUAL
4239: IFTRUE 4243
4241: GO 4273
4243: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4244: LD_ADDR_VAR 0 3
4248: PUSH
4249: LD_INT 1
4251: PUSH
4252: LD_INT 2
4254: PUSH
4255: LD_INT 3
4257: PUSH
4258: LD_INT 4
4260: PUSH
4261: LD_INT 5
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: ST_TO_ADDR
4271: GO 5240
4273: LD_INT 3
4275: DOUBLE
4276: EQUAL
4277: IFTRUE 4281
4279: GO 4311
4281: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: LD_INT 1
4289: PUSH
4290: LD_INT 2
4292: PUSH
4293: LD_INT 3
4295: PUSH
4296: LD_INT 4
4298: PUSH
4299: LD_INT 5
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: ST_TO_ADDR
4309: GO 5240
4311: LD_INT 11
4313: DOUBLE
4314: EQUAL
4315: IFTRUE 4319
4317: GO 4349
4319: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4320: LD_ADDR_VAR 0 3
4324: PUSH
4325: LD_INT 1
4327: PUSH
4328: LD_INT 2
4330: PUSH
4331: LD_INT 3
4333: PUSH
4334: LD_INT 4
4336: PUSH
4337: LD_INT 5
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: ST_TO_ADDR
4347: GO 5240
4349: LD_INT 4
4351: DOUBLE
4352: EQUAL
4353: IFTRUE 4357
4355: GO 4383
4357: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4358: LD_ADDR_VAR 0 3
4362: PUSH
4363: LD_INT 2
4365: PUSH
4366: LD_INT 3
4368: PUSH
4369: LD_INT 4
4371: PUSH
4372: LD_INT 5
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: ST_TO_ADDR
4381: GO 5240
4383: LD_INT 5
4385: DOUBLE
4386: EQUAL
4387: IFTRUE 4391
4389: GO 4417
4391: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4392: LD_ADDR_VAR 0 3
4396: PUSH
4397: LD_INT 2
4399: PUSH
4400: LD_INT 3
4402: PUSH
4403: LD_INT 4
4405: PUSH
4406: LD_INT 5
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: ST_TO_ADDR
4415: GO 5240
4417: LD_INT 9
4419: DOUBLE
4420: EQUAL
4421: IFTRUE 4425
4423: GO 4451
4425: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4426: LD_ADDR_VAR 0 3
4430: PUSH
4431: LD_INT 2
4433: PUSH
4434: LD_INT 3
4436: PUSH
4437: LD_INT 4
4439: PUSH
4440: LD_INT 5
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: ST_TO_ADDR
4449: GO 5240
4451: LD_INT 7
4453: DOUBLE
4454: EQUAL
4455: IFTRUE 4459
4457: GO 4485
4459: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4460: LD_ADDR_VAR 0 3
4464: PUSH
4465: LD_INT 2
4467: PUSH
4468: LD_INT 3
4470: PUSH
4471: LD_INT 4
4473: PUSH
4474: LD_INT 5
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: ST_TO_ADDR
4483: GO 5240
4485: LD_INT 12
4487: DOUBLE
4488: EQUAL
4489: IFTRUE 4493
4491: GO 4519
4493: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4494: LD_ADDR_VAR 0 3
4498: PUSH
4499: LD_INT 2
4501: PUSH
4502: LD_INT 3
4504: PUSH
4505: LD_INT 4
4507: PUSH
4508: LD_INT 5
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: ST_TO_ADDR
4517: GO 5240
4519: LD_INT 13
4521: DOUBLE
4522: EQUAL
4523: IFTRUE 4527
4525: GO 4553
4527: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4528: LD_ADDR_VAR 0 3
4532: PUSH
4533: LD_INT 2
4535: PUSH
4536: LD_INT 3
4538: PUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 5
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: ST_TO_ADDR
4551: GO 5240
4553: LD_INT 14
4555: DOUBLE
4556: EQUAL
4557: IFTRUE 4561
4559: GO 4579
4561: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4562: LD_ADDR_VAR 0 3
4566: PUSH
4567: LD_INT 4
4569: PUSH
4570: LD_INT 5
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: ST_TO_ADDR
4577: GO 5240
4579: LD_INT 6
4581: DOUBLE
4582: EQUAL
4583: IFTRUE 4587
4585: GO 4605
4587: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_INT 4
4595: PUSH
4596: LD_INT 5
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: ST_TO_ADDR
4603: GO 5240
4605: LD_INT 10
4607: DOUBLE
4608: EQUAL
4609: IFTRUE 4613
4611: GO 4631
4613: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4614: LD_ADDR_VAR 0 3
4618: PUSH
4619: LD_INT 4
4621: PUSH
4622: LD_INT 5
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: ST_TO_ADDR
4629: GO 5240
4631: LD_INT 22
4633: DOUBLE
4634: EQUAL
4635: IFTRUE 4639
4637: GO 4665
4639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4640: LD_ADDR_VAR 0 3
4644: PUSH
4645: LD_INT 11
4647: PUSH
4648: LD_INT 12
4650: PUSH
4651: LD_INT 13
4653: PUSH
4654: LD_INT 14
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: ST_TO_ADDR
4663: GO 5240
4665: LD_INT 23
4667: DOUBLE
4668: EQUAL
4669: IFTRUE 4673
4671: GO 4699
4673: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4674: LD_ADDR_VAR 0 3
4678: PUSH
4679: LD_INT 11
4681: PUSH
4682: LD_INT 12
4684: PUSH
4685: LD_INT 13
4687: PUSH
4688: LD_INT 14
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: ST_TO_ADDR
4697: GO 5240
4699: LD_INT 24
4701: DOUBLE
4702: EQUAL
4703: IFTRUE 4707
4705: GO 4733
4707: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4708: LD_ADDR_VAR 0 3
4712: PUSH
4713: LD_INT 11
4715: PUSH
4716: LD_INT 12
4718: PUSH
4719: LD_INT 13
4721: PUSH
4722: LD_INT 14
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: ST_TO_ADDR
4731: GO 5240
4733: LD_INT 30
4735: DOUBLE
4736: EQUAL
4737: IFTRUE 4741
4739: GO 4767
4741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4742: LD_ADDR_VAR 0 3
4746: PUSH
4747: LD_INT 11
4749: PUSH
4750: LD_INT 12
4752: PUSH
4753: LD_INT 13
4755: PUSH
4756: LD_INT 14
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: ST_TO_ADDR
4765: GO 5240
4767: LD_INT 25
4769: DOUBLE
4770: EQUAL
4771: IFTRUE 4775
4773: GO 4793
4775: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: LD_INT 13
4783: PUSH
4784: LD_INT 14
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: ST_TO_ADDR
4791: GO 5240
4793: LD_INT 27
4795: DOUBLE
4796: EQUAL
4797: IFTRUE 4801
4799: GO 4819
4801: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4802: LD_ADDR_VAR 0 3
4806: PUSH
4807: LD_INT 13
4809: PUSH
4810: LD_INT 14
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: ST_TO_ADDR
4817: GO 5240
4819: LD_INT 28
4821: DOUBLE
4822: EQUAL
4823: IFTRUE 4827
4825: GO 4845
4827: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4828: LD_ADDR_VAR 0 3
4832: PUSH
4833: LD_INT 13
4835: PUSH
4836: LD_INT 14
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: ST_TO_ADDR
4843: GO 5240
4845: LD_INT 29
4847: DOUBLE
4848: EQUAL
4849: IFTRUE 4853
4851: GO 4871
4853: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4854: LD_ADDR_VAR 0 3
4858: PUSH
4859: LD_INT 13
4861: PUSH
4862: LD_INT 14
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: ST_TO_ADDR
4869: GO 5240
4871: LD_INT 31
4873: DOUBLE
4874: EQUAL
4875: IFTRUE 4879
4877: GO 4897
4879: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4880: LD_ADDR_VAR 0 3
4884: PUSH
4885: LD_INT 13
4887: PUSH
4888: LD_INT 14
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: ST_TO_ADDR
4895: GO 5240
4897: LD_INT 26
4899: DOUBLE
4900: EQUAL
4901: IFTRUE 4905
4903: GO 4923
4905: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4906: LD_ADDR_VAR 0 3
4910: PUSH
4911: LD_INT 13
4913: PUSH
4914: LD_INT 14
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: ST_TO_ADDR
4921: GO 5240
4923: LD_INT 42
4925: DOUBLE
4926: EQUAL
4927: IFTRUE 4931
4929: GO 4957
4931: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4932: LD_ADDR_VAR 0 3
4936: PUSH
4937: LD_INT 21
4939: PUSH
4940: LD_INT 22
4942: PUSH
4943: LD_INT 23
4945: PUSH
4946: LD_INT 24
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: ST_TO_ADDR
4955: GO 5240
4957: LD_INT 43
4959: DOUBLE
4960: EQUAL
4961: IFTRUE 4965
4963: GO 4991
4965: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4966: LD_ADDR_VAR 0 3
4970: PUSH
4971: LD_INT 21
4973: PUSH
4974: LD_INT 22
4976: PUSH
4977: LD_INT 23
4979: PUSH
4980: LD_INT 24
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: ST_TO_ADDR
4989: GO 5240
4991: LD_INT 44
4993: DOUBLE
4994: EQUAL
4995: IFTRUE 4999
4997: GO 5025
4999: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5000: LD_ADDR_VAR 0 3
5004: PUSH
5005: LD_INT 21
5007: PUSH
5008: LD_INT 22
5010: PUSH
5011: LD_INT 23
5013: PUSH
5014: LD_INT 24
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: ST_TO_ADDR
5023: GO 5240
5025: LD_INT 45
5027: DOUBLE
5028: EQUAL
5029: IFTRUE 5033
5031: GO 5059
5033: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5034: LD_ADDR_VAR 0 3
5038: PUSH
5039: LD_INT 21
5041: PUSH
5042: LD_INT 22
5044: PUSH
5045: LD_INT 23
5047: PUSH
5048: LD_INT 24
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: ST_TO_ADDR
5057: GO 5240
5059: LD_INT 49
5061: DOUBLE
5062: EQUAL
5063: IFTRUE 5067
5065: GO 5093
5067: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5068: LD_ADDR_VAR 0 3
5072: PUSH
5073: LD_INT 21
5075: PUSH
5076: LD_INT 22
5078: PUSH
5079: LD_INT 23
5081: PUSH
5082: LD_INT 24
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: ST_TO_ADDR
5091: GO 5240
5093: LD_INT 51
5095: DOUBLE
5096: EQUAL
5097: IFTRUE 5101
5099: GO 5127
5101: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5102: LD_ADDR_VAR 0 3
5106: PUSH
5107: LD_INT 21
5109: PUSH
5110: LD_INT 22
5112: PUSH
5113: LD_INT 23
5115: PUSH
5116: LD_INT 24
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: ST_TO_ADDR
5125: GO 5240
5127: LD_INT 52
5129: DOUBLE
5130: EQUAL
5131: IFTRUE 5135
5133: GO 5161
5135: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5136: LD_ADDR_VAR 0 3
5140: PUSH
5141: LD_INT 21
5143: PUSH
5144: LD_INT 22
5146: PUSH
5147: LD_INT 23
5149: PUSH
5150: LD_INT 24
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: ST_TO_ADDR
5159: GO 5240
5161: LD_INT 53
5163: DOUBLE
5164: EQUAL
5165: IFTRUE 5169
5167: GO 5187
5169: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5170: LD_ADDR_VAR 0 3
5174: PUSH
5175: LD_INT 23
5177: PUSH
5178: LD_INT 24
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: ST_TO_ADDR
5185: GO 5240
5187: LD_INT 46
5189: DOUBLE
5190: EQUAL
5191: IFTRUE 5195
5193: GO 5213
5195: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5196: LD_ADDR_VAR 0 3
5200: PUSH
5201: LD_INT 23
5203: PUSH
5204: LD_INT 24
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: ST_TO_ADDR
5211: GO 5240
5213: LD_INT 47
5215: DOUBLE
5216: EQUAL
5217: IFTRUE 5221
5219: GO 5239
5221: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5222: LD_ADDR_VAR 0 3
5226: PUSH
5227: LD_INT 23
5229: PUSH
5230: LD_INT 24
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: ST_TO_ADDR
5237: GO 5240
5239: POP
// result := ( chassis in result ) ;
5240: LD_ADDR_VAR 0 3
5244: PUSH
5245: LD_VAR 0 1
5249: PUSH
5250: LD_VAR 0 3
5254: IN
5255: ST_TO_ADDR
// end ;
5256: LD_VAR 0 3
5260: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5261: LD_INT 0
5263: PPUSH
5264: PPUSH
5265: PPUSH
5266: PPUSH
5267: PPUSH
5268: PPUSH
5269: PPUSH
// result := array ;
5270: LD_ADDR_VAR 0 5
5274: PUSH
5275: LD_VAR 0 1
5279: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5280: LD_VAR 0 1
5284: NOT
5285: PUSH
5286: LD_VAR 0 2
5290: NOT
5291: OR
5292: PUSH
5293: LD_VAR 0 3
5297: NOT
5298: OR
5299: PUSH
5300: LD_VAR 0 2
5304: PUSH
5305: LD_VAR 0 1
5309: GREATER
5310: OR
5311: PUSH
5312: LD_VAR 0 3
5316: PUSH
5317: LD_VAR 0 1
5321: GREATER
5322: OR
5323: IFFALSE 5327
// exit ;
5325: GO 5623
// if direction then
5327: LD_VAR 0 4
5331: IFFALSE 5395
// begin d := 1 ;
5333: LD_ADDR_VAR 0 9
5337: PUSH
5338: LD_INT 1
5340: ST_TO_ADDR
// if i_from > i_to then
5341: LD_VAR 0 2
5345: PUSH
5346: LD_VAR 0 3
5350: GREATER
5351: IFFALSE 5377
// length := ( array - i_from ) + i_to else
5353: LD_ADDR_VAR 0 11
5357: PUSH
5358: LD_VAR 0 1
5362: PUSH
5363: LD_VAR 0 2
5367: MINUS
5368: PUSH
5369: LD_VAR 0 3
5373: PLUS
5374: ST_TO_ADDR
5375: GO 5393
// length := i_to - i_from ;
5377: LD_ADDR_VAR 0 11
5381: PUSH
5382: LD_VAR 0 3
5386: PUSH
5387: LD_VAR 0 2
5391: MINUS
5392: ST_TO_ADDR
// end else
5393: GO 5456
// begin d := - 1 ;
5395: LD_ADDR_VAR 0 9
5399: PUSH
5400: LD_INT 1
5402: NEG
5403: ST_TO_ADDR
// if i_from > i_to then
5404: LD_VAR 0 2
5408: PUSH
5409: LD_VAR 0 3
5413: GREATER
5414: IFFALSE 5434
// length := i_from - i_to else
5416: LD_ADDR_VAR 0 11
5420: PUSH
5421: LD_VAR 0 2
5425: PUSH
5426: LD_VAR 0 3
5430: MINUS
5431: ST_TO_ADDR
5432: GO 5456
// length := ( array - i_to ) + i_from ;
5434: LD_ADDR_VAR 0 11
5438: PUSH
5439: LD_VAR 0 1
5443: PUSH
5444: LD_VAR 0 3
5448: MINUS
5449: PUSH
5450: LD_VAR 0 2
5454: PLUS
5455: ST_TO_ADDR
// end ; if not length then
5456: LD_VAR 0 11
5460: NOT
5461: IFFALSE 5465
// exit ;
5463: GO 5623
// tmp := array ;
5465: LD_ADDR_VAR 0 10
5469: PUSH
5470: LD_VAR 0 1
5474: ST_TO_ADDR
// for i = 1 to length do
5475: LD_ADDR_VAR 0 6
5479: PUSH
5480: DOUBLE
5481: LD_INT 1
5483: DEC
5484: ST_TO_ADDR
5485: LD_VAR 0 11
5489: PUSH
5490: FOR_TO
5491: IFFALSE 5611
// begin for j = 1 to array do
5493: LD_ADDR_VAR 0 7
5497: PUSH
5498: DOUBLE
5499: LD_INT 1
5501: DEC
5502: ST_TO_ADDR
5503: LD_VAR 0 1
5507: PUSH
5508: FOR_TO
5509: IFFALSE 5597
// begin k := j + d ;
5511: LD_ADDR_VAR 0 8
5515: PUSH
5516: LD_VAR 0 7
5520: PUSH
5521: LD_VAR 0 9
5525: PLUS
5526: ST_TO_ADDR
// if k > array then
5527: LD_VAR 0 8
5531: PUSH
5532: LD_VAR 0 1
5536: GREATER
5537: IFFALSE 5547
// k := 1 ;
5539: LD_ADDR_VAR 0 8
5543: PUSH
5544: LD_INT 1
5546: ST_TO_ADDR
// if not k then
5547: LD_VAR 0 8
5551: NOT
5552: IFFALSE 5564
// k := array ;
5554: LD_ADDR_VAR 0 8
5558: PUSH
5559: LD_VAR 0 1
5563: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5564: LD_ADDR_VAR 0 10
5568: PUSH
5569: LD_VAR 0 10
5573: PPUSH
5574: LD_VAR 0 8
5578: PPUSH
5579: LD_VAR 0 1
5583: PUSH
5584: LD_VAR 0 7
5588: ARRAY
5589: PPUSH
5590: CALL_OW 1
5594: ST_TO_ADDR
// end ;
5595: GO 5508
5597: POP
5598: POP
// array := tmp ;
5599: LD_ADDR_VAR 0 1
5603: PUSH
5604: LD_VAR 0 10
5608: ST_TO_ADDR
// end ;
5609: GO 5490
5611: POP
5612: POP
// result := array ;
5613: LD_ADDR_VAR 0 5
5617: PUSH
5618: LD_VAR 0 1
5622: ST_TO_ADDR
// end ;
5623: LD_VAR 0 5
5627: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5628: LD_INT 0
5630: PPUSH
5631: PPUSH
// result := 0 ;
5632: LD_ADDR_VAR 0 3
5636: PUSH
5637: LD_INT 0
5639: ST_TO_ADDR
// if not array or not value in array then
5640: LD_VAR 0 1
5644: NOT
5645: PUSH
5646: LD_VAR 0 2
5650: PUSH
5651: LD_VAR 0 1
5655: IN
5656: NOT
5657: OR
5658: IFFALSE 5662
// exit ;
5660: GO 5716
// for i = 1 to array do
5662: LD_ADDR_VAR 0 4
5666: PUSH
5667: DOUBLE
5668: LD_INT 1
5670: DEC
5671: ST_TO_ADDR
5672: LD_VAR 0 1
5676: PUSH
5677: FOR_TO
5678: IFFALSE 5714
// if value = array [ i ] then
5680: LD_VAR 0 2
5684: PUSH
5685: LD_VAR 0 1
5689: PUSH
5690: LD_VAR 0 4
5694: ARRAY
5695: EQUAL
5696: IFFALSE 5712
// begin result := i ;
5698: LD_ADDR_VAR 0 3
5702: PUSH
5703: LD_VAR 0 4
5707: ST_TO_ADDR
// exit ;
5708: POP
5709: POP
5710: GO 5716
// end ;
5712: GO 5677
5714: POP
5715: POP
// end ;
5716: LD_VAR 0 3
5720: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5721: LD_INT 0
5723: PPUSH
// vc_chassis := chassis ;
5724: LD_ADDR_OWVAR 37
5728: PUSH
5729: LD_VAR 0 1
5733: ST_TO_ADDR
// vc_engine := engine ;
5734: LD_ADDR_OWVAR 39
5738: PUSH
5739: LD_VAR 0 2
5743: ST_TO_ADDR
// vc_control := control ;
5744: LD_ADDR_OWVAR 38
5748: PUSH
5749: LD_VAR 0 3
5753: ST_TO_ADDR
// vc_weapon := weapon ;
5754: LD_ADDR_OWVAR 40
5758: PUSH
5759: LD_VAR 0 4
5763: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5764: LD_ADDR_OWVAR 41
5768: PUSH
5769: LD_VAR 0 5
5773: ST_TO_ADDR
// end ;
5774: LD_VAR 0 6
5778: RET
// export function WantPlant ( unit ) ; var task ; begin
5779: LD_INT 0
5781: PPUSH
5782: PPUSH
// result := false ;
5783: LD_ADDR_VAR 0 2
5787: PUSH
5788: LD_INT 0
5790: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5791: LD_ADDR_VAR 0 3
5795: PUSH
5796: LD_VAR 0 1
5800: PPUSH
5801: CALL_OW 437
5805: ST_TO_ADDR
// if task then
5806: LD_VAR 0 3
5810: IFFALSE 5838
// if task [ 1 ] [ 1 ] = p then
5812: LD_VAR 0 3
5816: PUSH
5817: LD_INT 1
5819: ARRAY
5820: PUSH
5821: LD_INT 1
5823: ARRAY
5824: PUSH
5825: LD_STRING p
5827: EQUAL
5828: IFFALSE 5838
// result := true ;
5830: LD_ADDR_VAR 0 2
5834: PUSH
5835: LD_INT 1
5837: ST_TO_ADDR
// end ;
5838: LD_VAR 0 2
5842: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5843: LD_INT 0
5845: PPUSH
5846: PPUSH
5847: PPUSH
5848: PPUSH
// if pos < 1 then
5849: LD_VAR 0 2
5853: PUSH
5854: LD_INT 1
5856: LESS
5857: IFFALSE 5861
// exit ;
5859: GO 6164
// if pos = 1 then
5861: LD_VAR 0 2
5865: PUSH
5866: LD_INT 1
5868: EQUAL
5869: IFFALSE 5902
// result := Replace ( arr , pos [ 1 ] , value ) else
5871: LD_ADDR_VAR 0 4
5875: PUSH
5876: LD_VAR 0 1
5880: PPUSH
5881: LD_VAR 0 2
5885: PUSH
5886: LD_INT 1
5888: ARRAY
5889: PPUSH
5890: LD_VAR 0 3
5894: PPUSH
5895: CALL_OW 1
5899: ST_TO_ADDR
5900: GO 6164
// begin tmp := arr ;
5902: LD_ADDR_VAR 0 6
5906: PUSH
5907: LD_VAR 0 1
5911: ST_TO_ADDR
// s_arr := [ tmp ] ;
5912: LD_ADDR_VAR 0 7
5916: PUSH
5917: LD_VAR 0 6
5921: PUSH
5922: EMPTY
5923: LIST
5924: ST_TO_ADDR
// for i = 1 to pos - 1 do
5925: LD_ADDR_VAR 0 5
5929: PUSH
5930: DOUBLE
5931: LD_INT 1
5933: DEC
5934: ST_TO_ADDR
5935: LD_VAR 0 2
5939: PUSH
5940: LD_INT 1
5942: MINUS
5943: PUSH
5944: FOR_TO
5945: IFFALSE 5990
// begin tmp := tmp [ pos [ i ] ] ;
5947: LD_ADDR_VAR 0 6
5951: PUSH
5952: LD_VAR 0 6
5956: PUSH
5957: LD_VAR 0 2
5961: PUSH
5962: LD_VAR 0 5
5966: ARRAY
5967: ARRAY
5968: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5969: LD_ADDR_VAR 0 7
5973: PUSH
5974: LD_VAR 0 7
5978: PUSH
5979: LD_VAR 0 6
5983: PUSH
5984: EMPTY
5985: LIST
5986: ADD
5987: ST_TO_ADDR
// end ;
5988: GO 5944
5990: POP
5991: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5992: LD_ADDR_VAR 0 6
5996: PUSH
5997: LD_VAR 0 6
6001: PPUSH
6002: LD_VAR 0 2
6006: PUSH
6007: LD_VAR 0 2
6011: ARRAY
6012: PPUSH
6013: LD_VAR 0 3
6017: PPUSH
6018: CALL_OW 1
6022: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6023: LD_ADDR_VAR 0 7
6027: PUSH
6028: LD_VAR 0 7
6032: PPUSH
6033: LD_VAR 0 7
6037: PPUSH
6038: LD_VAR 0 6
6042: PPUSH
6043: CALL_OW 1
6047: ST_TO_ADDR
// for i = s_arr downto 2 do
6048: LD_ADDR_VAR 0 5
6052: PUSH
6053: DOUBLE
6054: LD_VAR 0 7
6058: INC
6059: ST_TO_ADDR
6060: LD_INT 2
6062: PUSH
6063: FOR_DOWNTO
6064: IFFALSE 6148
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6066: LD_ADDR_VAR 0 6
6070: PUSH
6071: LD_VAR 0 7
6075: PUSH
6076: LD_VAR 0 5
6080: PUSH
6081: LD_INT 1
6083: MINUS
6084: ARRAY
6085: PPUSH
6086: LD_VAR 0 2
6090: PUSH
6091: LD_VAR 0 5
6095: PUSH
6096: LD_INT 1
6098: MINUS
6099: ARRAY
6100: PPUSH
6101: LD_VAR 0 7
6105: PUSH
6106: LD_VAR 0 5
6110: ARRAY
6111: PPUSH
6112: CALL_OW 1
6116: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6117: LD_ADDR_VAR 0 7
6121: PUSH
6122: LD_VAR 0 7
6126: PPUSH
6127: LD_VAR 0 5
6131: PUSH
6132: LD_INT 1
6134: MINUS
6135: PPUSH
6136: LD_VAR 0 6
6140: PPUSH
6141: CALL_OW 1
6145: ST_TO_ADDR
// end ;
6146: GO 6063
6148: POP
6149: POP
// result := s_arr [ 1 ] ;
6150: LD_ADDR_VAR 0 4
6154: PUSH
6155: LD_VAR 0 7
6159: PUSH
6160: LD_INT 1
6162: ARRAY
6163: ST_TO_ADDR
// end ; end ;
6164: LD_VAR 0 4
6168: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6169: LD_INT 0
6171: PPUSH
6172: PPUSH
// if not list then
6173: LD_VAR 0 1
6177: NOT
6178: IFFALSE 6182
// exit ;
6180: GO 6273
// i := list [ pos1 ] ;
6182: LD_ADDR_VAR 0 5
6186: PUSH
6187: LD_VAR 0 1
6191: PUSH
6192: LD_VAR 0 2
6196: ARRAY
6197: ST_TO_ADDR
// if not i then
6198: LD_VAR 0 5
6202: NOT
6203: IFFALSE 6207
// exit ;
6205: GO 6273
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6207: LD_ADDR_VAR 0 1
6211: PUSH
6212: LD_VAR 0 1
6216: PPUSH
6217: LD_VAR 0 2
6221: PPUSH
6222: LD_VAR 0 1
6226: PUSH
6227: LD_VAR 0 3
6231: ARRAY
6232: PPUSH
6233: CALL_OW 1
6237: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6238: LD_ADDR_VAR 0 1
6242: PUSH
6243: LD_VAR 0 1
6247: PPUSH
6248: LD_VAR 0 3
6252: PPUSH
6253: LD_VAR 0 5
6257: PPUSH
6258: CALL_OW 1
6262: ST_TO_ADDR
// result := list ;
6263: LD_ADDR_VAR 0 4
6267: PUSH
6268: LD_VAR 0 1
6272: ST_TO_ADDR
// end ;
6273: LD_VAR 0 4
6277: RET
// export function Add ( list , pos , val ) ; begin
6278: LD_INT 0
6280: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
6281: LD_ADDR_VAR 0 4
6285: PUSH
6286: LD_VAR 0 1
6290: PPUSH
6291: LD_VAR 0 2
6295: PPUSH
6296: LD_VAR 0 3
6300: PPUSH
6301: CALL 5843 0 3
6305: ST_TO_ADDR
6306: LD_VAR 0 4
6310: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6311: LD_INT 0
6313: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6314: LD_ADDR_VAR 0 5
6318: PUSH
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 250
6328: PPUSH
6329: LD_VAR 0 1
6333: PPUSH
6334: CALL_OW 251
6338: PPUSH
6339: LD_VAR 0 2
6343: PPUSH
6344: LD_VAR 0 3
6348: PPUSH
6349: LD_VAR 0 4
6353: PPUSH
6354: CALL 6364 0 5
6358: ST_TO_ADDR
// end ;
6359: LD_VAR 0 5
6363: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6364: LD_INT 0
6366: PPUSH
6367: PPUSH
6368: PPUSH
6369: PPUSH
// if not list then
6370: LD_VAR 0 3
6374: NOT
6375: IFFALSE 6379
// exit ;
6377: GO 6767
// result := [ ] ;
6379: LD_ADDR_VAR 0 6
6383: PUSH
6384: EMPTY
6385: ST_TO_ADDR
// for i in list do
6386: LD_ADDR_VAR 0 7
6390: PUSH
6391: LD_VAR 0 3
6395: PUSH
6396: FOR_IN
6397: IFFALSE 6599
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6399: LD_ADDR_VAR 0 9
6403: PUSH
6404: LD_VAR 0 7
6408: PPUSH
6409: LD_VAR 0 1
6413: PPUSH
6414: LD_VAR 0 2
6418: PPUSH
6419: CALL_OW 297
6423: ST_TO_ADDR
// if not result then
6424: LD_VAR 0 6
6428: NOT
6429: IFFALSE 6455
// result := [ [ i , tmp ] ] else
6431: LD_ADDR_VAR 0 6
6435: PUSH
6436: LD_VAR 0 7
6440: PUSH
6441: LD_VAR 0 9
6445: PUSH
6446: EMPTY
6447: LIST
6448: LIST
6449: PUSH
6450: EMPTY
6451: LIST
6452: ST_TO_ADDR
6453: GO 6597
// begin if result [ result ] [ 2 ] < tmp then
6455: LD_VAR 0 6
6459: PUSH
6460: LD_VAR 0 6
6464: ARRAY
6465: PUSH
6466: LD_INT 2
6468: ARRAY
6469: PUSH
6470: LD_VAR 0 9
6474: LESS
6475: IFFALSE 6517
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6477: LD_ADDR_VAR 0 6
6481: PUSH
6482: LD_VAR 0 6
6486: PPUSH
6487: LD_VAR 0 6
6491: PUSH
6492: LD_INT 1
6494: PLUS
6495: PPUSH
6496: LD_VAR 0 7
6500: PUSH
6501: LD_VAR 0 9
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PPUSH
6510: CALL_OW 2
6514: ST_TO_ADDR
6515: GO 6597
// for j = 1 to result do
6517: LD_ADDR_VAR 0 8
6521: PUSH
6522: DOUBLE
6523: LD_INT 1
6525: DEC
6526: ST_TO_ADDR
6527: LD_VAR 0 6
6531: PUSH
6532: FOR_TO
6533: IFFALSE 6595
// begin if tmp < result [ j ] [ 2 ] then
6535: LD_VAR 0 9
6539: PUSH
6540: LD_VAR 0 6
6544: PUSH
6545: LD_VAR 0 8
6549: ARRAY
6550: PUSH
6551: LD_INT 2
6553: ARRAY
6554: LESS
6555: IFFALSE 6593
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6557: LD_ADDR_VAR 0 6
6561: PUSH
6562: LD_VAR 0 6
6566: PPUSH
6567: LD_VAR 0 8
6571: PPUSH
6572: LD_VAR 0 7
6576: PUSH
6577: LD_VAR 0 9
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PPUSH
6586: CALL_OW 2
6590: ST_TO_ADDR
// break ;
6591: GO 6595
// end ; end ;
6593: GO 6532
6595: POP
6596: POP
// end ; end ;
6597: GO 6396
6599: POP
6600: POP
// if result and not asc then
6601: LD_VAR 0 6
6605: PUSH
6606: LD_VAR 0 4
6610: NOT
6611: AND
6612: IFFALSE 6687
// begin tmp := result ;
6614: LD_ADDR_VAR 0 9
6618: PUSH
6619: LD_VAR 0 6
6623: ST_TO_ADDR
// for i = tmp downto 1 do
6624: LD_ADDR_VAR 0 7
6628: PUSH
6629: DOUBLE
6630: LD_VAR 0 9
6634: INC
6635: ST_TO_ADDR
6636: LD_INT 1
6638: PUSH
6639: FOR_DOWNTO
6640: IFFALSE 6685
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6642: LD_ADDR_VAR 0 6
6646: PUSH
6647: LD_VAR 0 6
6651: PPUSH
6652: LD_VAR 0 9
6656: PUSH
6657: LD_VAR 0 7
6661: MINUS
6662: PUSH
6663: LD_INT 1
6665: PLUS
6666: PPUSH
6667: LD_VAR 0 9
6671: PUSH
6672: LD_VAR 0 7
6676: ARRAY
6677: PPUSH
6678: CALL_OW 1
6682: ST_TO_ADDR
6683: GO 6639
6685: POP
6686: POP
// end ; tmp := [ ] ;
6687: LD_ADDR_VAR 0 9
6691: PUSH
6692: EMPTY
6693: ST_TO_ADDR
// if mode then
6694: LD_VAR 0 5
6698: IFFALSE 6767
// begin for i = 1 to result do
6700: LD_ADDR_VAR 0 7
6704: PUSH
6705: DOUBLE
6706: LD_INT 1
6708: DEC
6709: ST_TO_ADDR
6710: LD_VAR 0 6
6714: PUSH
6715: FOR_TO
6716: IFFALSE 6755
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6718: LD_ADDR_VAR 0 9
6722: PUSH
6723: LD_VAR 0 9
6727: PPUSH
6728: LD_VAR 0 7
6732: PPUSH
6733: LD_VAR 0 6
6737: PUSH
6738: LD_VAR 0 7
6742: ARRAY
6743: PUSH
6744: LD_INT 1
6746: ARRAY
6747: PPUSH
6748: CALL_OW 1
6752: ST_TO_ADDR
6753: GO 6715
6755: POP
6756: POP
// result := tmp ;
6757: LD_ADDR_VAR 0 6
6761: PUSH
6762: LD_VAR 0 9
6766: ST_TO_ADDR
// end ; end ;
6767: LD_VAR 0 6
6771: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6772: LD_INT 0
6774: PPUSH
6775: PPUSH
6776: PPUSH
6777: PPUSH
6778: PPUSH
6779: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6780: LD_ADDR_VAR 0 5
6784: PUSH
6785: LD_INT 0
6787: PUSH
6788: LD_INT 0
6790: PUSH
6791: LD_INT 0
6793: PUSH
6794: EMPTY
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: ST_TO_ADDR
// if not x or not y then
6802: LD_VAR 0 2
6806: NOT
6807: PUSH
6808: LD_VAR 0 3
6812: NOT
6813: OR
6814: IFFALSE 6818
// exit ;
6816: GO 8464
// if not range then
6818: LD_VAR 0 4
6822: NOT
6823: IFFALSE 6833
// range := 10 ;
6825: LD_ADDR_VAR 0 4
6829: PUSH
6830: LD_INT 10
6832: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6833: LD_ADDR_VAR 0 8
6837: PUSH
6838: LD_INT 81
6840: PUSH
6841: LD_VAR 0 1
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: LD_INT 92
6852: PUSH
6853: LD_VAR 0 2
6857: PUSH
6858: LD_VAR 0 3
6862: PUSH
6863: LD_VAR 0 4
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 3
6876: PUSH
6877: LD_INT 21
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: PPUSH
6896: CALL_OW 69
6900: ST_TO_ADDR
// if not tmp then
6901: LD_VAR 0 8
6905: NOT
6906: IFFALSE 6910
// exit ;
6908: GO 8464
// for i in tmp do
6910: LD_ADDR_VAR 0 6
6914: PUSH
6915: LD_VAR 0 8
6919: PUSH
6920: FOR_IN
6921: IFFALSE 8439
// begin points := [ 0 , 0 , 0 ] ;
6923: LD_ADDR_VAR 0 9
6927: PUSH
6928: LD_INT 0
6930: PUSH
6931: LD_INT 0
6933: PUSH
6934: LD_INT 0
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: ST_TO_ADDR
// bpoints := 1 ;
6942: LD_ADDR_VAR 0 10
6946: PUSH
6947: LD_INT 1
6949: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6950: LD_VAR 0 6
6954: PPUSH
6955: CALL_OW 247
6959: PUSH
6960: LD_INT 1
6962: DOUBLE
6963: EQUAL
6964: IFTRUE 6968
6966: GO 7546
6968: POP
// begin if GetClass ( i ) = 1 then
6969: LD_VAR 0 6
6973: PPUSH
6974: CALL_OW 257
6978: PUSH
6979: LD_INT 1
6981: EQUAL
6982: IFFALSE 7003
// points := [ 10 , 5 , 3 ] ;
6984: LD_ADDR_VAR 0 9
6988: PUSH
6989: LD_INT 10
6991: PUSH
6992: LD_INT 5
6994: PUSH
6995: LD_INT 3
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: LIST
7002: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7003: LD_VAR 0 6
7007: PPUSH
7008: CALL_OW 257
7012: PUSH
7013: LD_INT 2
7015: PUSH
7016: LD_INT 3
7018: PUSH
7019: LD_INT 4
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: IN
7027: IFFALSE 7048
// points := [ 3 , 2 , 1 ] ;
7029: LD_ADDR_VAR 0 9
7033: PUSH
7034: LD_INT 3
7036: PUSH
7037: LD_INT 2
7039: PUSH
7040: LD_INT 1
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7048: LD_VAR 0 6
7052: PPUSH
7053: CALL_OW 257
7057: PUSH
7058: LD_INT 5
7060: EQUAL
7061: IFFALSE 7082
// points := [ 130 , 5 , 2 ] ;
7063: LD_ADDR_VAR 0 9
7067: PUSH
7068: LD_INT 130
7070: PUSH
7071: LD_INT 5
7073: PUSH
7074: LD_INT 2
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: LIST
7081: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7082: LD_VAR 0 6
7086: PPUSH
7087: CALL_OW 257
7091: PUSH
7092: LD_INT 8
7094: EQUAL
7095: IFFALSE 7116
// points := [ 35 , 35 , 30 ] ;
7097: LD_ADDR_VAR 0 9
7101: PUSH
7102: LD_INT 35
7104: PUSH
7105: LD_INT 35
7107: PUSH
7108: LD_INT 30
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7116: LD_VAR 0 6
7120: PPUSH
7121: CALL_OW 257
7125: PUSH
7126: LD_INT 9
7128: EQUAL
7129: IFFALSE 7150
// points := [ 20 , 55 , 40 ] ;
7131: LD_ADDR_VAR 0 9
7135: PUSH
7136: LD_INT 20
7138: PUSH
7139: LD_INT 55
7141: PUSH
7142: LD_INT 40
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: LIST
7149: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7150: LD_VAR 0 6
7154: PPUSH
7155: CALL_OW 257
7159: PUSH
7160: LD_INT 12
7162: PUSH
7163: LD_INT 16
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: IN
7170: IFFALSE 7191
// points := [ 5 , 3 , 2 ] ;
7172: LD_ADDR_VAR 0 9
7176: PUSH
7177: LD_INT 5
7179: PUSH
7180: LD_INT 3
7182: PUSH
7183: LD_INT 2
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: LIST
7190: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7191: LD_VAR 0 6
7195: PPUSH
7196: CALL_OW 257
7200: PUSH
7201: LD_INT 17
7203: EQUAL
7204: IFFALSE 7225
// points := [ 100 , 50 , 75 ] ;
7206: LD_ADDR_VAR 0 9
7210: PUSH
7211: LD_INT 100
7213: PUSH
7214: LD_INT 50
7216: PUSH
7217: LD_INT 75
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: LIST
7224: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7225: LD_VAR 0 6
7229: PPUSH
7230: CALL_OW 257
7234: PUSH
7235: LD_INT 15
7237: EQUAL
7238: IFFALSE 7259
// points := [ 10 , 5 , 3 ] ;
7240: LD_ADDR_VAR 0 9
7244: PUSH
7245: LD_INT 10
7247: PUSH
7248: LD_INT 5
7250: PUSH
7251: LD_INT 3
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: LIST
7258: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7259: LD_VAR 0 6
7263: PPUSH
7264: CALL_OW 257
7268: PUSH
7269: LD_INT 14
7271: EQUAL
7272: IFFALSE 7293
// points := [ 10 , 0 , 0 ] ;
7274: LD_ADDR_VAR 0 9
7278: PUSH
7279: LD_INT 10
7281: PUSH
7282: LD_INT 0
7284: PUSH
7285: LD_INT 0
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: LIST
7292: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7293: LD_VAR 0 6
7297: PPUSH
7298: CALL_OW 257
7302: PUSH
7303: LD_INT 11
7305: EQUAL
7306: IFFALSE 7327
// points := [ 30 , 10 , 5 ] ;
7308: LD_ADDR_VAR 0 9
7312: PUSH
7313: LD_INT 30
7315: PUSH
7316: LD_INT 10
7318: PUSH
7319: LD_INT 5
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7327: LD_VAR 0 1
7331: PPUSH
7332: LD_INT 5
7334: PPUSH
7335: CALL_OW 321
7339: PUSH
7340: LD_INT 2
7342: EQUAL
7343: IFFALSE 7360
// bpoints := bpoints * 1.8 ;
7345: LD_ADDR_VAR 0 10
7349: PUSH
7350: LD_VAR 0 10
7354: PUSH
7355: LD_REAL  1.80000000000000E+0000
7358: MUL
7359: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7360: LD_VAR 0 6
7364: PPUSH
7365: CALL_OW 257
7369: PUSH
7370: LD_INT 1
7372: PUSH
7373: LD_INT 2
7375: PUSH
7376: LD_INT 3
7378: PUSH
7379: LD_INT 4
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: IN
7388: PUSH
7389: LD_VAR 0 1
7393: PPUSH
7394: LD_INT 51
7396: PPUSH
7397: CALL_OW 321
7401: PUSH
7402: LD_INT 2
7404: EQUAL
7405: AND
7406: IFFALSE 7423
// bpoints := bpoints * 1.2 ;
7408: LD_ADDR_VAR 0 10
7412: PUSH
7413: LD_VAR 0 10
7417: PUSH
7418: LD_REAL  1.20000000000000E+0000
7421: MUL
7422: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7423: LD_VAR 0 6
7427: PPUSH
7428: CALL_OW 257
7432: PUSH
7433: LD_INT 5
7435: PUSH
7436: LD_INT 7
7438: PUSH
7439: LD_INT 9
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: IN
7447: PUSH
7448: LD_VAR 0 1
7452: PPUSH
7453: LD_INT 52
7455: PPUSH
7456: CALL_OW 321
7460: PUSH
7461: LD_INT 2
7463: EQUAL
7464: AND
7465: IFFALSE 7482
// bpoints := bpoints * 1.5 ;
7467: LD_ADDR_VAR 0 10
7471: PUSH
7472: LD_VAR 0 10
7476: PUSH
7477: LD_REAL  1.50000000000000E+0000
7480: MUL
7481: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7482: LD_VAR 0 1
7486: PPUSH
7487: LD_INT 66
7489: PPUSH
7490: CALL_OW 321
7494: PUSH
7495: LD_INT 2
7497: EQUAL
7498: IFFALSE 7515
// bpoints := bpoints * 1.1 ;
7500: LD_ADDR_VAR 0 10
7504: PUSH
7505: LD_VAR 0 10
7509: PUSH
7510: LD_REAL  1.10000000000000E+0000
7513: MUL
7514: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7515: LD_ADDR_VAR 0 10
7519: PUSH
7520: LD_VAR 0 10
7524: PUSH
7525: LD_VAR 0 6
7529: PPUSH
7530: LD_INT 1
7532: PPUSH
7533: CALL_OW 259
7537: PUSH
7538: LD_REAL  1.15000000000000E+0000
7541: MUL
7542: MUL
7543: ST_TO_ADDR
// end ; unit_vehicle :
7544: GO 8368
7546: LD_INT 2
7548: DOUBLE
7549: EQUAL
7550: IFTRUE 7554
7552: GO 8356
7554: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7555: LD_VAR 0 6
7559: PPUSH
7560: CALL_OW 264
7564: PUSH
7565: LD_INT 2
7567: PUSH
7568: LD_INT 42
7570: PUSH
7571: LD_INT 24
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: LIST
7578: IN
7579: IFFALSE 7600
// points := [ 25 , 5 , 3 ] ;
7581: LD_ADDR_VAR 0 9
7585: PUSH
7586: LD_INT 25
7588: PUSH
7589: LD_INT 5
7591: PUSH
7592: LD_INT 3
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7600: LD_VAR 0 6
7604: PPUSH
7605: CALL_OW 264
7609: PUSH
7610: LD_INT 4
7612: PUSH
7613: LD_INT 43
7615: PUSH
7616: LD_INT 25
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: IN
7624: IFFALSE 7645
// points := [ 40 , 15 , 5 ] ;
7626: LD_ADDR_VAR 0 9
7630: PUSH
7631: LD_INT 40
7633: PUSH
7634: LD_INT 15
7636: PUSH
7637: LD_INT 5
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7645: LD_VAR 0 6
7649: PPUSH
7650: CALL_OW 264
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 23
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: IN
7665: IFFALSE 7686
// points := [ 7 , 25 , 8 ] ;
7667: LD_ADDR_VAR 0 9
7671: PUSH
7672: LD_INT 7
7674: PUSH
7675: LD_INT 25
7677: PUSH
7678: LD_INT 8
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: LIST
7685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7686: LD_VAR 0 6
7690: PPUSH
7691: CALL_OW 264
7695: PUSH
7696: LD_INT 5
7698: PUSH
7699: LD_INT 27
7701: PUSH
7702: LD_INT 44
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: LIST
7709: IN
7710: IFFALSE 7731
// points := [ 14 , 50 , 16 ] ;
7712: LD_ADDR_VAR 0 9
7716: PUSH
7717: LD_INT 14
7719: PUSH
7720: LD_INT 50
7722: PUSH
7723: LD_INT 16
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: LIST
7730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7731: LD_VAR 0 6
7735: PPUSH
7736: CALL_OW 264
7740: PUSH
7741: LD_INT 6
7743: PUSH
7744: LD_INT 46
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: IN
7751: IFFALSE 7772
// points := [ 32 , 120 , 70 ] ;
7753: LD_ADDR_VAR 0 9
7757: PUSH
7758: LD_INT 32
7760: PUSH
7761: LD_INT 120
7763: PUSH
7764: LD_INT 70
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
7772: LD_VAR 0 6
7776: PPUSH
7777: CALL_OW 264
7781: PUSH
7782: LD_INT 7
7784: PUSH
7785: LD_INT 28
7787: PUSH
7788: LD_INT 45
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: IN
7796: IFFALSE 7817
// points := [ 35 , 20 , 45 ] ;
7798: LD_ADDR_VAR 0 9
7802: PUSH
7803: LD_INT 35
7805: PUSH
7806: LD_INT 20
7808: PUSH
7809: LD_INT 45
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7817: LD_VAR 0 6
7821: PPUSH
7822: CALL_OW 264
7826: PUSH
7827: LD_INT 47
7829: PUSH
7830: EMPTY
7831: LIST
7832: IN
7833: IFFALSE 7854
// points := [ 67 , 45 , 75 ] ;
7835: LD_ADDR_VAR 0 9
7839: PUSH
7840: LD_INT 67
7842: PUSH
7843: LD_INT 45
7845: PUSH
7846: LD_INT 75
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7854: LD_VAR 0 6
7858: PPUSH
7859: CALL_OW 264
7863: PUSH
7864: LD_INT 26
7866: PUSH
7867: EMPTY
7868: LIST
7869: IN
7870: IFFALSE 7891
// points := [ 120 , 30 , 80 ] ;
7872: LD_ADDR_VAR 0 9
7876: PUSH
7877: LD_INT 120
7879: PUSH
7880: LD_INT 30
7882: PUSH
7883: LD_INT 80
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: LIST
7890: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7891: LD_VAR 0 6
7895: PPUSH
7896: CALL_OW 264
7900: PUSH
7901: LD_INT 22
7903: PUSH
7904: EMPTY
7905: LIST
7906: IN
7907: IFFALSE 7928
// points := [ 40 , 1 , 1 ] ;
7909: LD_ADDR_VAR 0 9
7913: PUSH
7914: LD_INT 40
7916: PUSH
7917: LD_INT 1
7919: PUSH
7920: LD_INT 1
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: LIST
7927: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7928: LD_VAR 0 6
7932: PPUSH
7933: CALL_OW 264
7937: PUSH
7938: LD_INT 29
7940: PUSH
7941: EMPTY
7942: LIST
7943: IN
7944: IFFALSE 7965
// points := [ 70 , 200 , 400 ] ;
7946: LD_ADDR_VAR 0 9
7950: PUSH
7951: LD_INT 70
7953: PUSH
7954: LD_INT 200
7956: PUSH
7957: LD_INT 400
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: LIST
7964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7965: LD_VAR 0 6
7969: PPUSH
7970: CALL_OW 264
7974: PUSH
7975: LD_INT 14
7977: PUSH
7978: LD_INT 53
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: IN
7985: IFFALSE 8006
// points := [ 40 , 10 , 20 ] ;
7987: LD_ADDR_VAR 0 9
7991: PUSH
7992: LD_INT 40
7994: PUSH
7995: LD_INT 10
7997: PUSH
7998: LD_INT 20
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: LIST
8005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8006: LD_VAR 0 6
8010: PPUSH
8011: CALL_OW 264
8015: PUSH
8016: LD_INT 9
8018: PUSH
8019: EMPTY
8020: LIST
8021: IN
8022: IFFALSE 8043
// points := [ 5 , 70 , 20 ] ;
8024: LD_ADDR_VAR 0 9
8028: PUSH
8029: LD_INT 5
8031: PUSH
8032: LD_INT 70
8034: PUSH
8035: LD_INT 20
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: LIST
8042: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8043: LD_VAR 0 6
8047: PPUSH
8048: CALL_OW 264
8052: PUSH
8053: LD_INT 10
8055: PUSH
8056: EMPTY
8057: LIST
8058: IN
8059: IFFALSE 8080
// points := [ 35 , 110 , 70 ] ;
8061: LD_ADDR_VAR 0 9
8065: PUSH
8066: LD_INT 35
8068: PUSH
8069: LD_INT 110
8071: PUSH
8072: LD_INT 70
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8080: LD_VAR 0 6
8084: PPUSH
8085: CALL_OW 265
8089: PUSH
8090: LD_INT 25
8092: EQUAL
8093: IFFALSE 8114
// points := [ 80 , 65 , 100 ] ;
8095: LD_ADDR_VAR 0 9
8099: PUSH
8100: LD_INT 80
8102: PUSH
8103: LD_INT 65
8105: PUSH
8106: LD_INT 100
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: LIST
8113: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8114: LD_VAR 0 6
8118: PPUSH
8119: CALL_OW 263
8123: PUSH
8124: LD_INT 1
8126: EQUAL
8127: IFFALSE 8162
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8129: LD_ADDR_VAR 0 10
8133: PUSH
8134: LD_VAR 0 10
8138: PUSH
8139: LD_VAR 0 6
8143: PPUSH
8144: CALL_OW 311
8148: PPUSH
8149: LD_INT 3
8151: PPUSH
8152: CALL_OW 259
8156: PUSH
8157: LD_INT 4
8159: MUL
8160: MUL
8161: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8162: LD_VAR 0 6
8166: PPUSH
8167: CALL_OW 263
8171: PUSH
8172: LD_INT 2
8174: EQUAL
8175: IFFALSE 8226
// begin j := IsControledBy ( i ) ;
8177: LD_ADDR_VAR 0 7
8181: PUSH
8182: LD_VAR 0 6
8186: PPUSH
8187: CALL_OW 312
8191: ST_TO_ADDR
// if j then
8192: LD_VAR 0 7
8196: IFFALSE 8226
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8198: LD_ADDR_VAR 0 10
8202: PUSH
8203: LD_VAR 0 10
8207: PUSH
8208: LD_VAR 0 7
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: CALL_OW 259
8220: PUSH
8221: LD_INT 3
8223: MUL
8224: MUL
8225: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8226: LD_VAR 0 6
8230: PPUSH
8231: CALL_OW 264
8235: PUSH
8236: LD_INT 5
8238: PUSH
8239: LD_INT 6
8241: PUSH
8242: LD_INT 46
8244: PUSH
8245: LD_INT 44
8247: PUSH
8248: LD_INT 47
8250: PUSH
8251: LD_INT 45
8253: PUSH
8254: LD_INT 28
8256: PUSH
8257: LD_INT 7
8259: PUSH
8260: LD_INT 27
8262: PUSH
8263: LD_INT 29
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: IN
8278: PUSH
8279: LD_VAR 0 1
8283: PPUSH
8284: LD_INT 52
8286: PPUSH
8287: CALL_OW 321
8291: PUSH
8292: LD_INT 2
8294: EQUAL
8295: AND
8296: IFFALSE 8313
// bpoints := bpoints * 1.2 ;
8298: LD_ADDR_VAR 0 10
8302: PUSH
8303: LD_VAR 0 10
8307: PUSH
8308: LD_REAL  1.20000000000000E+0000
8311: MUL
8312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8313: LD_VAR 0 6
8317: PPUSH
8318: CALL_OW 264
8322: PUSH
8323: LD_INT 6
8325: PUSH
8326: LD_INT 46
8328: PUSH
8329: LD_INT 47
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: LIST
8336: IN
8337: IFFALSE 8354
// bpoints := bpoints * 1.2 ;
8339: LD_ADDR_VAR 0 10
8343: PUSH
8344: LD_VAR 0 10
8348: PUSH
8349: LD_REAL  1.20000000000000E+0000
8352: MUL
8353: ST_TO_ADDR
// end ; unit_building :
8354: GO 8368
8356: LD_INT 3
8358: DOUBLE
8359: EQUAL
8360: IFTRUE 8364
8362: GO 8367
8364: POP
// ; end ;
8365: GO 8368
8367: POP
// for j = 1 to 3 do
8368: LD_ADDR_VAR 0 7
8372: PUSH
8373: DOUBLE
8374: LD_INT 1
8376: DEC
8377: ST_TO_ADDR
8378: LD_INT 3
8380: PUSH
8381: FOR_TO
8382: IFFALSE 8435
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8384: LD_ADDR_VAR 0 5
8388: PUSH
8389: LD_VAR 0 5
8393: PPUSH
8394: LD_VAR 0 7
8398: PPUSH
8399: LD_VAR 0 5
8403: PUSH
8404: LD_VAR 0 7
8408: ARRAY
8409: PUSH
8410: LD_VAR 0 9
8414: PUSH
8415: LD_VAR 0 7
8419: ARRAY
8420: PUSH
8421: LD_VAR 0 10
8425: MUL
8426: PLUS
8427: PPUSH
8428: CALL_OW 1
8432: ST_TO_ADDR
8433: GO 8381
8435: POP
8436: POP
// end ;
8437: GO 6920
8439: POP
8440: POP
// result := Replace ( result , 4 , tmp ) ;
8441: LD_ADDR_VAR 0 5
8445: PUSH
8446: LD_VAR 0 5
8450: PPUSH
8451: LD_INT 4
8453: PPUSH
8454: LD_VAR 0 8
8458: PPUSH
8459: CALL_OW 1
8463: ST_TO_ADDR
// end ;
8464: LD_VAR 0 5
8468: RET
// export function DangerAtRange ( unit , range ) ; begin
8469: LD_INT 0
8471: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8472: LD_ADDR_VAR 0 3
8476: PUSH
8477: LD_VAR 0 1
8481: PPUSH
8482: CALL_OW 255
8486: PPUSH
8487: LD_VAR 0 1
8491: PPUSH
8492: CALL_OW 250
8496: PPUSH
8497: LD_VAR 0 1
8501: PPUSH
8502: CALL_OW 251
8506: PPUSH
8507: LD_VAR 0 2
8511: PPUSH
8512: CALL 6772 0 4
8516: ST_TO_ADDR
// end ;
8517: LD_VAR 0 3
8521: RET
// export function IsExtension ( b ) ; begin
8522: LD_INT 0
8524: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8525: LD_ADDR_VAR 0 2
8529: PUSH
8530: LD_VAR 0 1
8534: PPUSH
8535: CALL_OW 266
8539: PUSH
8540: LD_INT 23
8542: PUSH
8543: LD_INT 20
8545: PUSH
8546: LD_INT 22
8548: PUSH
8549: LD_INT 17
8551: PUSH
8552: LD_INT 24
8554: PUSH
8555: LD_INT 21
8557: PUSH
8558: LD_INT 19
8560: PUSH
8561: LD_INT 16
8563: PUSH
8564: LD_INT 25
8566: PUSH
8567: LD_INT 18
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: IN
8582: ST_TO_ADDR
// end ;
8583: LD_VAR 0 2
8587: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
8588: LD_INT 0
8590: PPUSH
8591: PPUSH
8592: PPUSH
// result := [ ] ;
8593: LD_ADDR_VAR 0 2
8597: PUSH
8598: EMPTY
8599: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
8600: LD_ADDR_VAR 0 3
8604: PUSH
8605: LD_INT 21
8607: PUSH
8608: LD_INT 3
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PPUSH
8615: CALL_OW 69
8619: ST_TO_ADDR
// if not tmp then
8620: LD_VAR 0 3
8624: NOT
8625: IFFALSE 8629
// exit ;
8627: GO 8679
// for i in tmp do
8629: LD_ADDR_VAR 0 4
8633: PUSH
8634: LD_VAR 0 3
8638: PUSH
8639: FOR_IN
8640: IFFALSE 8677
// if GetBase ( i ) = base then
8642: LD_VAR 0 4
8646: PPUSH
8647: CALL_OW 274
8651: PUSH
8652: LD_VAR 0 1
8656: EQUAL
8657: IFFALSE 8675
// result := result ^ i ;
8659: LD_ADDR_VAR 0 2
8663: PUSH
8664: LD_VAR 0 2
8668: PUSH
8669: LD_VAR 0 4
8673: ADD
8674: ST_TO_ADDR
8675: GO 8639
8677: POP
8678: POP
// end ;
8679: LD_VAR 0 2
8683: RET
// export function ComComplete ( unit , b ) ; var i ; begin
8684: LD_INT 0
8686: PPUSH
8687: PPUSH
// if BuildingStatus ( b ) = bs_build then
8688: LD_VAR 0 2
8692: PPUSH
8693: CALL_OW 461
8697: PUSH
8698: LD_INT 1
8700: EQUAL
8701: IFFALSE 8761
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8703: LD_VAR 0 1
8707: PPUSH
8708: LD_STRING h
8710: PUSH
8711: LD_VAR 0 2
8715: PPUSH
8716: CALL_OW 250
8720: PUSH
8721: LD_VAR 0 2
8725: PPUSH
8726: CALL_OW 251
8730: PUSH
8731: LD_VAR 0 2
8735: PUSH
8736: LD_INT 0
8738: PUSH
8739: LD_INT 0
8741: PUSH
8742: LD_INT 0
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: PPUSH
8757: CALL_OW 446
// end ;
8761: LD_VAR 0 3
8765: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8766: LD_INT 0
8768: PPUSH
8769: PPUSH
8770: PPUSH
8771: PPUSH
8772: PPUSH
8773: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
8774: LD_VAR 0 1
8778: NOT
8779: PUSH
8780: LD_VAR 0 1
8784: PPUSH
8785: CALL_OW 263
8789: PUSH
8790: LD_INT 2
8792: EQUAL
8793: NOT
8794: OR
8795: IFFALSE 8799
// exit ;
8797: GO 9115
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8799: LD_ADDR_VAR 0 6
8803: PUSH
8804: LD_INT 22
8806: PUSH
8807: LD_VAR 0 1
8811: PPUSH
8812: CALL_OW 255
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: PUSH
8821: LD_INT 2
8823: PUSH
8824: LD_INT 30
8826: PUSH
8827: LD_INT 36
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 34
8836: PUSH
8837: LD_INT 31
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: LIST
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 69
8857: ST_TO_ADDR
// if not tmp then
8858: LD_VAR 0 6
8862: NOT
8863: IFFALSE 8867
// exit ;
8865: GO 9115
// result := [ ] ;
8867: LD_ADDR_VAR 0 2
8871: PUSH
8872: EMPTY
8873: ST_TO_ADDR
// for i in tmp do
8874: LD_ADDR_VAR 0 3
8878: PUSH
8879: LD_VAR 0 6
8883: PUSH
8884: FOR_IN
8885: IFFALSE 8956
// begin t := UnitsInside ( i ) ;
8887: LD_ADDR_VAR 0 4
8891: PUSH
8892: LD_VAR 0 3
8896: PPUSH
8897: CALL_OW 313
8901: ST_TO_ADDR
// if t then
8902: LD_VAR 0 4
8906: IFFALSE 8954
// for j in t do
8908: LD_ADDR_VAR 0 7
8912: PUSH
8913: LD_VAR 0 4
8917: PUSH
8918: FOR_IN
8919: IFFALSE 8952
// result := Insert ( result , result + 1 , j ) ;
8921: LD_ADDR_VAR 0 2
8925: PUSH
8926: LD_VAR 0 2
8930: PPUSH
8931: LD_VAR 0 2
8935: PUSH
8936: LD_INT 1
8938: PLUS
8939: PPUSH
8940: LD_VAR 0 7
8944: PPUSH
8945: CALL_OW 2
8949: ST_TO_ADDR
8950: GO 8918
8952: POP
8953: POP
// end ;
8954: GO 8884
8956: POP
8957: POP
// if not result then
8958: LD_VAR 0 2
8962: NOT
8963: IFFALSE 8967
// exit ;
8965: GO 9115
// mech := result [ 1 ] ;
8967: LD_ADDR_VAR 0 5
8971: PUSH
8972: LD_VAR 0 2
8976: PUSH
8977: LD_INT 1
8979: ARRAY
8980: ST_TO_ADDR
// if result > 1 then
8981: LD_VAR 0 2
8985: PUSH
8986: LD_INT 1
8988: GREATER
8989: IFFALSE 9101
// for i = 2 to result do
8991: LD_ADDR_VAR 0 3
8995: PUSH
8996: DOUBLE
8997: LD_INT 2
8999: DEC
9000: ST_TO_ADDR
9001: LD_VAR 0 2
9005: PUSH
9006: FOR_TO
9007: IFFALSE 9099
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9009: LD_ADDR_VAR 0 4
9013: PUSH
9014: LD_VAR 0 2
9018: PUSH
9019: LD_VAR 0 3
9023: ARRAY
9024: PPUSH
9025: LD_INT 3
9027: PPUSH
9028: CALL_OW 259
9032: PUSH
9033: LD_VAR 0 2
9037: PUSH
9038: LD_VAR 0 3
9042: ARRAY
9043: PPUSH
9044: CALL_OW 432
9048: MINUS
9049: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9050: LD_VAR 0 4
9054: PUSH
9055: LD_VAR 0 5
9059: PPUSH
9060: LD_INT 3
9062: PPUSH
9063: CALL_OW 259
9067: PUSH
9068: LD_VAR 0 5
9072: PPUSH
9073: CALL_OW 432
9077: MINUS
9078: GREATEREQUAL
9079: IFFALSE 9097
// mech := result [ i ] ;
9081: LD_ADDR_VAR 0 5
9085: PUSH
9086: LD_VAR 0 2
9090: PUSH
9091: LD_VAR 0 3
9095: ARRAY
9096: ST_TO_ADDR
// end ;
9097: GO 9006
9099: POP
9100: POP
// ComLinkTo ( vehicle , mech ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: LD_VAR 0 5
9110: PPUSH
9111: CALL_OW 135
// end ;
9115: LD_VAR 0 2
9119: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
9120: LD_INT 0
9122: PPUSH
9123: PPUSH
9124: PPUSH
9125: PPUSH
9126: PPUSH
9127: PPUSH
9128: PPUSH
9129: PPUSH
9130: PPUSH
9131: PPUSH
9132: PPUSH
9133: PPUSH
// result := [ ] ;
9134: LD_ADDR_VAR 0 6
9138: PUSH
9139: EMPTY
9140: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9141: LD_VAR 0 1
9145: PPUSH
9146: CALL_OW 266
9150: PUSH
9151: LD_INT 0
9153: PUSH
9154: LD_INT 1
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: IN
9161: NOT
9162: IFFALSE 9166
// exit ;
9164: GO 10575
// if name then
9166: LD_VAR 0 2
9170: IFFALSE 9186
// SetBName ( base_dep , name ) ;
9172: LD_VAR 0 1
9176: PPUSH
9177: LD_VAR 0 2
9181: PPUSH
9182: CALL_OW 500
// base := GetBase ( base_dep ) ;
9186: LD_ADDR_VAR 0 14
9190: PUSH
9191: LD_VAR 0 1
9195: PPUSH
9196: CALL_OW 274
9200: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9201: LD_ADDR_VAR 0 15
9205: PUSH
9206: LD_VAR 0 1
9210: PPUSH
9211: CALL_OW 255
9215: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9216: LD_ADDR_VAR 0 16
9220: PUSH
9221: LD_VAR 0 1
9225: PPUSH
9226: CALL_OW 248
9230: ST_TO_ADDR
// if sources then
9231: LD_VAR 0 4
9235: IFFALSE 9282
// for i = 1 to 3 do
9237: LD_ADDR_VAR 0 7
9241: PUSH
9242: DOUBLE
9243: LD_INT 1
9245: DEC
9246: ST_TO_ADDR
9247: LD_INT 3
9249: PUSH
9250: FOR_TO
9251: IFFALSE 9280
// AddResourceType ( base , i , sources [ i ] ) ;
9253: LD_VAR 0 14
9257: PPUSH
9258: LD_VAR 0 7
9262: PPUSH
9263: LD_VAR 0 4
9267: PUSH
9268: LD_VAR 0 7
9272: ARRAY
9273: PPUSH
9274: CALL_OW 276
9278: GO 9250
9280: POP
9281: POP
// buildings := GetBaseBuildings ( base ) ;
9282: LD_ADDR_VAR 0 17
9286: PUSH
9287: LD_VAR 0 14
9291: PPUSH
9292: CALL 8588 0 1
9296: ST_TO_ADDR
// InitHc ;
9297: CALL_OW 19
// InitUc ;
9301: CALL_OW 18
// uc_side := side ;
9305: LD_ADDR_OWVAR 20
9309: PUSH
9310: LD_VAR 0 15
9314: ST_TO_ADDR
// uc_nation := nation ;
9315: LD_ADDR_OWVAR 21
9319: PUSH
9320: LD_VAR 0 16
9324: ST_TO_ADDR
// if buildings then
9325: LD_VAR 0 17
9329: IFFALSE 10434
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9331: LD_VAR 0 17
9335: PPUSH
9336: LD_INT 2
9338: PUSH
9339: LD_INT 30
9341: PUSH
9342: LD_INT 32
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: LD_INT 30
9351: PUSH
9352: LD_INT 33
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 72
9368: IFFALSE 9451
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9370: LD_ADDR_VAR 0 7
9374: PUSH
9375: LD_VAR 0 17
9379: PPUSH
9380: LD_INT 2
9382: PUSH
9383: LD_INT 30
9385: PUSH
9386: LD_INT 32
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: PUSH
9393: LD_INT 30
9395: PUSH
9396: LD_INT 33
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: LIST
9407: PPUSH
9408: CALL_OW 72
9412: PUSH
9413: FOR_IN
9414: IFFALSE 9449
// begin if not GetBWeapon ( i ) then
9416: LD_VAR 0 7
9420: PPUSH
9421: CALL_OW 269
9425: NOT
9426: IFFALSE 9447
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
9428: LD_VAR 0 7
9432: PPUSH
9433: LD_VAR 0 7
9437: PPUSH
9438: CALL 10580 0 1
9442: PPUSH
9443: CALL_OW 431
// end ;
9447: GO 9413
9449: POP
9450: POP
// end ; for i = 1 to personel do
9451: LD_ADDR_VAR 0 7
9455: PUSH
9456: DOUBLE
9457: LD_INT 1
9459: DEC
9460: ST_TO_ADDR
9461: LD_VAR 0 5
9465: PUSH
9466: FOR_TO
9467: IFFALSE 10414
// begin if i > 4 then
9469: LD_VAR 0 7
9473: PUSH
9474: LD_INT 4
9476: GREATER
9477: IFFALSE 9481
// break ;
9479: GO 10414
// case i of 1 :
9481: LD_VAR 0 7
9485: PUSH
9486: LD_INT 1
9488: DOUBLE
9489: EQUAL
9490: IFTRUE 9494
9492: GO 9567
9494: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9495: LD_ADDR_VAR 0 11
9499: PUSH
9500: LD_VAR 0 17
9504: PPUSH
9505: LD_INT 22
9507: PUSH
9508: LD_VAR 0 15
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: PUSH
9517: LD_INT 2
9519: PUSH
9520: LD_INT 30
9522: PUSH
9523: LD_INT 32
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 30
9532: PUSH
9533: LD_INT 4
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 30
9542: PUSH
9543: LD_INT 5
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PPUSH
9560: CALL_OW 72
9564: ST_TO_ADDR
9565: GO 9789
9567: LD_INT 2
9569: DOUBLE
9570: EQUAL
9571: IFTRUE 9575
9573: GO 9637
9575: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9576: LD_ADDR_VAR 0 11
9580: PUSH
9581: LD_VAR 0 17
9585: PPUSH
9586: LD_INT 22
9588: PUSH
9589: LD_VAR 0 15
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 2
9600: PUSH
9601: LD_INT 30
9603: PUSH
9604: LD_INT 0
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 30
9613: PUSH
9614: LD_INT 1
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: LIST
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PPUSH
9630: CALL_OW 72
9634: ST_TO_ADDR
9635: GO 9789
9637: LD_INT 3
9639: DOUBLE
9640: EQUAL
9641: IFTRUE 9645
9643: GO 9707
9645: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9646: LD_ADDR_VAR 0 11
9650: PUSH
9651: LD_VAR 0 17
9655: PPUSH
9656: LD_INT 22
9658: PUSH
9659: LD_VAR 0 15
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PUSH
9668: LD_INT 2
9670: PUSH
9671: LD_INT 30
9673: PUSH
9674: LD_INT 2
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 30
9683: PUSH
9684: LD_INT 3
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: LIST
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PPUSH
9700: CALL_OW 72
9704: ST_TO_ADDR
9705: GO 9789
9707: LD_INT 4
9709: DOUBLE
9710: EQUAL
9711: IFTRUE 9715
9713: GO 9788
9715: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9716: LD_ADDR_VAR 0 11
9720: PUSH
9721: LD_VAR 0 17
9725: PPUSH
9726: LD_INT 22
9728: PUSH
9729: LD_VAR 0 15
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: LD_INT 2
9740: PUSH
9741: LD_INT 30
9743: PUSH
9744: LD_INT 6
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: PUSH
9751: LD_INT 30
9753: PUSH
9754: LD_INT 7
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PUSH
9761: LD_INT 30
9763: PUSH
9764: LD_INT 8
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PPUSH
9781: CALL_OW 72
9785: ST_TO_ADDR
9786: GO 9789
9788: POP
// if not f then
9789: LD_VAR 0 11
9793: NOT
9794: IFFALSE 9798
// continue ;
9796: GO 9466
// x := personel [ i ] ;
9798: LD_ADDR_VAR 0 12
9802: PUSH
9803: LD_VAR 0 5
9807: PUSH
9808: LD_VAR 0 7
9812: ARRAY
9813: ST_TO_ADDR
// if x = - 1 then
9814: LD_VAR 0 12
9818: PUSH
9819: LD_INT 1
9821: NEG
9822: EQUAL
9823: IFFALSE 10032
// begin for j in f do
9825: LD_ADDR_VAR 0 8
9829: PUSH
9830: LD_VAR 0 11
9834: PUSH
9835: FOR_IN
9836: IFFALSE 10028
// repeat InitHc ;
9838: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9842: LD_VAR 0 8
9846: PPUSH
9847: CALL_OW 266
9851: PUSH
9852: LD_INT 5
9854: EQUAL
9855: IFFALSE 9925
// begin if UnitsInside ( j ) < 3 then
9857: LD_VAR 0 8
9861: PPUSH
9862: CALL_OW 313
9866: PUSH
9867: LD_INT 3
9869: LESS
9870: IFFALSE 9906
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9872: LD_INT 0
9874: PPUSH
9875: LD_INT 5
9877: PUSH
9878: LD_INT 8
9880: PUSH
9881: LD_INT 9
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: PUSH
9889: LD_VAR 0 16
9893: ARRAY
9894: PPUSH
9895: LD_VAR 0 3
9899: PPUSH
9900: CALL_OW 380
9904: GO 9923
// PrepareHuman ( false , i , skill ) ;
9906: LD_INT 0
9908: PPUSH
9909: LD_VAR 0 7
9913: PPUSH
9914: LD_VAR 0 3
9918: PPUSH
9919: CALL_OW 380
// end else
9923: GO 9942
// PrepareHuman ( false , i , skill ) ;
9925: LD_INT 0
9927: PPUSH
9928: LD_VAR 0 7
9932: PPUSH
9933: LD_VAR 0 3
9937: PPUSH
9938: CALL_OW 380
// un := CreateHuman ;
9942: LD_ADDR_VAR 0 13
9946: PUSH
9947: CALL_OW 44
9951: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9952: LD_ADDR_VAR 0 6
9956: PUSH
9957: LD_VAR 0 6
9961: PPUSH
9962: LD_INT 1
9964: PPUSH
9965: LD_VAR 0 13
9969: PPUSH
9970: CALL_OW 2
9974: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9975: LD_VAR 0 13
9979: PPUSH
9980: LD_VAR 0 8
9984: PPUSH
9985: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9989: LD_VAR 0 8
9993: PPUSH
9994: CALL_OW 313
9998: PUSH
9999: LD_INT 6
10001: EQUAL
10002: PUSH
10003: LD_VAR 0 8
10007: PPUSH
10008: CALL_OW 266
10012: PUSH
10013: LD_INT 32
10015: PUSH
10016: LD_INT 31
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: IN
10023: OR
10024: IFFALSE 9838
10026: GO 9835
10028: POP
10029: POP
// end else
10030: GO 10412
// for j = 1 to x do
10032: LD_ADDR_VAR 0 8
10036: PUSH
10037: DOUBLE
10038: LD_INT 1
10040: DEC
10041: ST_TO_ADDR
10042: LD_VAR 0 12
10046: PUSH
10047: FOR_TO
10048: IFFALSE 10410
// begin InitHc ;
10050: CALL_OW 19
// if not f then
10054: LD_VAR 0 11
10058: NOT
10059: IFFALSE 10148
// begin PrepareHuman ( false , i , skill ) ;
10061: LD_INT 0
10063: PPUSH
10064: LD_VAR 0 7
10068: PPUSH
10069: LD_VAR 0 3
10073: PPUSH
10074: CALL_OW 380
// un := CreateHuman ;
10078: LD_ADDR_VAR 0 13
10082: PUSH
10083: CALL_OW 44
10087: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10088: LD_ADDR_VAR 0 6
10092: PUSH
10093: LD_VAR 0 6
10097: PPUSH
10098: LD_INT 1
10100: PPUSH
10101: LD_VAR 0 13
10105: PPUSH
10106: CALL_OW 2
10110: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10111: LD_VAR 0 13
10115: PPUSH
10116: LD_VAR 0 1
10120: PPUSH
10121: CALL_OW 250
10125: PPUSH
10126: LD_VAR 0 1
10130: PPUSH
10131: CALL_OW 251
10135: PPUSH
10136: LD_INT 10
10138: PPUSH
10139: LD_INT 0
10141: PPUSH
10142: CALL_OW 50
// continue ;
10146: GO 10047
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10148: LD_VAR 0 11
10152: PUSH
10153: LD_INT 1
10155: ARRAY
10156: PPUSH
10157: CALL_OW 313
10161: PUSH
10162: LD_VAR 0 11
10166: PUSH
10167: LD_INT 1
10169: ARRAY
10170: PPUSH
10171: CALL_OW 266
10175: PUSH
10176: LD_INT 32
10178: PUSH
10179: LD_INT 31
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: IN
10186: AND
10187: PUSH
10188: LD_VAR 0 11
10192: PUSH
10193: LD_INT 1
10195: ARRAY
10196: PPUSH
10197: CALL_OW 313
10201: PUSH
10202: LD_INT 6
10204: EQUAL
10205: OR
10206: IFFALSE 10226
// f := Delete ( f , 1 ) ;
10208: LD_ADDR_VAR 0 11
10212: PUSH
10213: LD_VAR 0 11
10217: PPUSH
10218: LD_INT 1
10220: PPUSH
10221: CALL_OW 3
10225: ST_TO_ADDR
// if not f then
10226: LD_VAR 0 11
10230: NOT
10231: IFFALSE 10249
// begin x := x + 2 ;
10233: LD_ADDR_VAR 0 12
10237: PUSH
10238: LD_VAR 0 12
10242: PUSH
10243: LD_INT 2
10245: PLUS
10246: ST_TO_ADDR
// continue ;
10247: GO 10047
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10249: LD_VAR 0 11
10253: PUSH
10254: LD_INT 1
10256: ARRAY
10257: PPUSH
10258: CALL_OW 266
10262: PUSH
10263: LD_INT 5
10265: EQUAL
10266: IFFALSE 10340
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10268: LD_VAR 0 11
10272: PUSH
10273: LD_INT 1
10275: ARRAY
10276: PPUSH
10277: CALL_OW 313
10281: PUSH
10282: LD_INT 3
10284: LESS
10285: IFFALSE 10321
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10287: LD_INT 0
10289: PPUSH
10290: LD_INT 5
10292: PUSH
10293: LD_INT 8
10295: PUSH
10296: LD_INT 9
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: LIST
10303: PUSH
10304: LD_VAR 0 16
10308: ARRAY
10309: PPUSH
10310: LD_VAR 0 3
10314: PPUSH
10315: CALL_OW 380
10319: GO 10338
// PrepareHuman ( false , i , skill ) ;
10321: LD_INT 0
10323: PPUSH
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_VAR 0 3
10333: PPUSH
10334: CALL_OW 380
// end else
10338: GO 10357
// PrepareHuman ( false , i , skill ) ;
10340: LD_INT 0
10342: PPUSH
10343: LD_VAR 0 7
10347: PPUSH
10348: LD_VAR 0 3
10352: PPUSH
10353: CALL_OW 380
// un := CreateHuman ;
10357: LD_ADDR_VAR 0 13
10361: PUSH
10362: CALL_OW 44
10366: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10367: LD_ADDR_VAR 0 6
10371: PUSH
10372: LD_VAR 0 6
10376: PPUSH
10377: LD_INT 1
10379: PPUSH
10380: LD_VAR 0 13
10384: PPUSH
10385: CALL_OW 2
10389: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10390: LD_VAR 0 13
10394: PPUSH
10395: LD_VAR 0 11
10399: PUSH
10400: LD_INT 1
10402: ARRAY
10403: PPUSH
10404: CALL_OW 52
// end ;
10408: GO 10047
10410: POP
10411: POP
// end ;
10412: GO 9466
10414: POP
10415: POP
// result := result ^ buildings ;
10416: LD_ADDR_VAR 0 6
10420: PUSH
10421: LD_VAR 0 6
10425: PUSH
10426: LD_VAR 0 17
10430: ADD
10431: ST_TO_ADDR
// end else
10432: GO 10575
// begin for i = 1 to personel do
10434: LD_ADDR_VAR 0 7
10438: PUSH
10439: DOUBLE
10440: LD_INT 1
10442: DEC
10443: ST_TO_ADDR
10444: LD_VAR 0 5
10448: PUSH
10449: FOR_TO
10450: IFFALSE 10573
// begin if i > 4 then
10452: LD_VAR 0 7
10456: PUSH
10457: LD_INT 4
10459: GREATER
10460: IFFALSE 10464
// break ;
10462: GO 10573
// x := personel [ i ] ;
10464: LD_ADDR_VAR 0 12
10468: PUSH
10469: LD_VAR 0 5
10473: PUSH
10474: LD_VAR 0 7
10478: ARRAY
10479: ST_TO_ADDR
// if x = - 1 then
10480: LD_VAR 0 12
10484: PUSH
10485: LD_INT 1
10487: NEG
10488: EQUAL
10489: IFFALSE 10493
// continue ;
10491: GO 10449
// PrepareHuman ( false , i , skill ) ;
10493: LD_INT 0
10495: PPUSH
10496: LD_VAR 0 7
10500: PPUSH
10501: LD_VAR 0 3
10505: PPUSH
10506: CALL_OW 380
// un := CreateHuman ;
10510: LD_ADDR_VAR 0 13
10514: PUSH
10515: CALL_OW 44
10519: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10520: LD_VAR 0 13
10524: PPUSH
10525: LD_VAR 0 1
10529: PPUSH
10530: CALL_OW 250
10534: PPUSH
10535: LD_VAR 0 1
10539: PPUSH
10540: CALL_OW 251
10544: PPUSH
10545: LD_INT 10
10547: PPUSH
10548: LD_INT 0
10550: PPUSH
10551: CALL_OW 50
// result := result ^ un ;
10555: LD_ADDR_VAR 0 6
10559: PUSH
10560: LD_VAR 0 6
10564: PUSH
10565: LD_VAR 0 13
10569: ADD
10570: ST_TO_ADDR
// end ;
10571: GO 10449
10573: POP
10574: POP
// end ; end ;
10575: LD_VAR 0 6
10579: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10580: LD_INT 0
10582: PPUSH
10583: PPUSH
10584: PPUSH
10585: PPUSH
10586: PPUSH
10587: PPUSH
10588: PPUSH
10589: PPUSH
10590: PPUSH
10591: PPUSH
10592: PPUSH
10593: PPUSH
10594: PPUSH
10595: PPUSH
10596: PPUSH
10597: PPUSH
// result := false ;
10598: LD_ADDR_VAR 0 2
10602: PUSH
10603: LD_INT 0
10605: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10606: LD_VAR 0 1
10610: NOT
10611: PUSH
10612: LD_VAR 0 1
10616: PPUSH
10617: CALL_OW 266
10621: PUSH
10622: LD_INT 32
10624: PUSH
10625: LD_INT 33
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: IN
10632: NOT
10633: OR
10634: IFFALSE 10638
// exit ;
10636: GO 11871
// nat := GetNation ( tower ) ;
10638: LD_ADDR_VAR 0 11
10642: PUSH
10643: LD_VAR 0 1
10647: PPUSH
10648: CALL_OW 248
10652: ST_TO_ADDR
// side := GetSide ( tower ) ;
10653: LD_ADDR_VAR 0 15
10657: PUSH
10658: LD_VAR 0 1
10662: PPUSH
10663: CALL_OW 255
10667: ST_TO_ADDR
// x := GetX ( tower ) ;
10668: LD_ADDR_VAR 0 9
10672: PUSH
10673: LD_VAR 0 1
10677: PPUSH
10678: CALL_OW 250
10682: ST_TO_ADDR
// y := GetY ( tower ) ;
10683: LD_ADDR_VAR 0 10
10687: PUSH
10688: LD_VAR 0 1
10692: PPUSH
10693: CALL_OW 251
10697: ST_TO_ADDR
// if not x or not y then
10698: LD_VAR 0 9
10702: NOT
10703: PUSH
10704: LD_VAR 0 10
10708: NOT
10709: OR
10710: IFFALSE 10714
// exit ;
10712: GO 11871
// weapon := 0 ;
10714: LD_ADDR_VAR 0 17
10718: PUSH
10719: LD_INT 0
10721: ST_TO_ADDR
// fac_list := [ ] ;
10722: LD_ADDR_VAR 0 16
10726: PUSH
10727: EMPTY
10728: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
10729: LD_ADDR_VAR 0 5
10733: PUSH
10734: LD_VAR 0 1
10738: PPUSH
10739: CALL_OW 274
10743: PPUSH
10744: CALL 8588 0 1
10748: PPUSH
10749: LD_INT 30
10751: PUSH
10752: LD_INT 3
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PPUSH
10759: CALL_OW 72
10763: ST_TO_ADDR
// if not factories then
10764: LD_VAR 0 5
10768: NOT
10769: IFFALSE 10773
// exit ;
10771: GO 11871
// for i in factories do
10773: LD_ADDR_VAR 0 7
10777: PUSH
10778: LD_VAR 0 5
10782: PUSH
10783: FOR_IN
10784: IFFALSE 10809
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10786: LD_ADDR_VAR 0 16
10790: PUSH
10791: LD_VAR 0 16
10795: PUSH
10796: LD_VAR 0 7
10800: PPUSH
10801: CALL_OW 478
10805: UNION
10806: ST_TO_ADDR
10807: GO 10783
10809: POP
10810: POP
// if not fac_list then
10811: LD_VAR 0 16
10815: NOT
10816: IFFALSE 10820
// exit ;
10818: GO 11871
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10820: LD_ADDR_VAR 0 4
10824: PUSH
10825: LD_INT 4
10827: PUSH
10828: LD_INT 5
10830: PUSH
10831: LD_INT 9
10833: PUSH
10834: LD_INT 10
10836: PUSH
10837: LD_INT 6
10839: PUSH
10840: LD_INT 7
10842: PUSH
10843: LD_INT 11
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 27
10857: PUSH
10858: LD_INT 28
10860: PUSH
10861: LD_INT 26
10863: PUSH
10864: LD_INT 30
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: PUSH
10873: LD_INT 43
10875: PUSH
10876: LD_INT 44
10878: PUSH
10879: LD_INT 46
10881: PUSH
10882: LD_INT 45
10884: PUSH
10885: LD_INT 47
10887: PUSH
10888: LD_INT 49
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: LIST
10903: PUSH
10904: LD_VAR 0 11
10908: ARRAY
10909: ST_TO_ADDR
// for i in list do
10910: LD_ADDR_VAR 0 7
10914: PUSH
10915: LD_VAR 0 4
10919: PUSH
10920: FOR_IN
10921: IFFALSE 10954
// if not i in fac_list then
10923: LD_VAR 0 7
10927: PUSH
10928: LD_VAR 0 16
10932: IN
10933: NOT
10934: IFFALSE 10952
// list := list diff i ;
10936: LD_ADDR_VAR 0 4
10940: PUSH
10941: LD_VAR 0 4
10945: PUSH
10946: LD_VAR 0 7
10950: DIFF
10951: ST_TO_ADDR
10952: GO 10920
10954: POP
10955: POP
// if not list then
10956: LD_VAR 0 4
10960: NOT
10961: IFFALSE 10965
// exit ;
10963: GO 11871
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10965: LD_VAR 0 11
10969: PUSH
10970: LD_INT 3
10972: EQUAL
10973: PUSH
10974: LD_INT 49
10976: PUSH
10977: LD_VAR 0 4
10981: IN
10982: AND
10983: PUSH
10984: LD_INT 31
10986: PPUSH
10987: LD_VAR 0 15
10991: PPUSH
10992: CALL_OW 321
10996: PUSH
10997: LD_INT 2
10999: EQUAL
11000: AND
11001: IFFALSE 11061
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11003: LD_INT 22
11005: PUSH
11006: LD_VAR 0 15
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: LD_INT 35
11017: PUSH
11018: LD_INT 49
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 91
11027: PUSH
11028: LD_VAR 0 1
11032: PUSH
11033: LD_INT 10
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: PPUSH
11046: CALL_OW 69
11050: NOT
11051: IFFALSE 11061
// weapon := ru_time_lapser ;
11053: LD_ADDR_VAR 0 17
11057: PUSH
11058: LD_INT 49
11060: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11061: LD_VAR 0 11
11065: PUSH
11066: LD_INT 1
11068: PUSH
11069: LD_INT 2
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: IN
11076: PUSH
11077: LD_INT 11
11079: PUSH
11080: LD_VAR 0 4
11084: IN
11085: PUSH
11086: LD_INT 30
11088: PUSH
11089: LD_VAR 0 4
11093: IN
11094: OR
11095: AND
11096: PUSH
11097: LD_INT 6
11099: PPUSH
11100: LD_VAR 0 15
11104: PPUSH
11105: CALL_OW 321
11109: PUSH
11110: LD_INT 2
11112: EQUAL
11113: AND
11114: IFFALSE 11279
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11116: LD_INT 22
11118: PUSH
11119: LD_VAR 0 15
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 2
11130: PUSH
11131: LD_INT 35
11133: PUSH
11134: LD_INT 11
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 35
11143: PUSH
11144: LD_INT 30
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: PUSH
11156: LD_INT 91
11158: PUSH
11159: LD_VAR 0 1
11163: PUSH
11164: LD_INT 18
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: LIST
11176: PPUSH
11177: CALL_OW 69
11181: NOT
11182: PUSH
11183: LD_INT 22
11185: PUSH
11186: LD_VAR 0 15
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 2
11197: PUSH
11198: LD_INT 30
11200: PUSH
11201: LD_INT 32
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: LD_INT 30
11210: PUSH
11211: LD_INT 33
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 91
11225: PUSH
11226: LD_VAR 0 1
11230: PUSH
11231: LD_INT 12
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: LIST
11243: PUSH
11244: EMPTY
11245: LIST
11246: PPUSH
11247: CALL_OW 69
11251: PUSH
11252: LD_INT 2
11254: GREATER
11255: AND
11256: IFFALSE 11279
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11258: LD_ADDR_VAR 0 17
11262: PUSH
11263: LD_INT 11
11265: PUSH
11266: LD_INT 30
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PUSH
11273: LD_VAR 0 11
11277: ARRAY
11278: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11279: LD_VAR 0 17
11283: NOT
11284: PUSH
11285: LD_INT 40
11287: PPUSH
11288: LD_VAR 0 15
11292: PPUSH
11293: CALL_OW 321
11297: PUSH
11298: LD_INT 2
11300: EQUAL
11301: AND
11302: PUSH
11303: LD_INT 7
11305: PUSH
11306: LD_VAR 0 4
11310: IN
11311: PUSH
11312: LD_INT 28
11314: PUSH
11315: LD_VAR 0 4
11319: IN
11320: OR
11321: PUSH
11322: LD_INT 45
11324: PUSH
11325: LD_VAR 0 4
11329: IN
11330: OR
11331: AND
11332: IFFALSE 11586
// begin hex := GetHexInfo ( x , y ) ;
11334: LD_ADDR_VAR 0 3
11338: PUSH
11339: LD_VAR 0 9
11343: PPUSH
11344: LD_VAR 0 10
11348: PPUSH
11349: CALL_OW 546
11353: ST_TO_ADDR
// if hex [ 1 ] then
11354: LD_VAR 0 3
11358: PUSH
11359: LD_INT 1
11361: ARRAY
11362: IFFALSE 11366
// exit ;
11364: GO 11871
// height := hex [ 2 ] ;
11366: LD_ADDR_VAR 0 14
11370: PUSH
11371: LD_VAR 0 3
11375: PUSH
11376: LD_INT 2
11378: ARRAY
11379: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11380: LD_ADDR_VAR 0 13
11384: PUSH
11385: LD_INT 0
11387: PUSH
11388: LD_INT 2
11390: PUSH
11391: LD_INT 3
11393: PUSH
11394: LD_INT 5
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: ST_TO_ADDR
// for i in tmp do
11403: LD_ADDR_VAR 0 7
11407: PUSH
11408: LD_VAR 0 13
11412: PUSH
11413: FOR_IN
11414: IFFALSE 11584
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11416: LD_ADDR_VAR 0 8
11420: PUSH
11421: LD_VAR 0 9
11425: PPUSH
11426: LD_VAR 0 7
11430: PPUSH
11431: LD_INT 5
11433: PPUSH
11434: CALL_OW 272
11438: PUSH
11439: LD_VAR 0 10
11443: PPUSH
11444: LD_VAR 0 7
11448: PPUSH
11449: LD_INT 5
11451: PPUSH
11452: CALL_OW 273
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11461: LD_VAR 0 8
11465: PUSH
11466: LD_INT 1
11468: ARRAY
11469: PPUSH
11470: LD_VAR 0 8
11474: PUSH
11475: LD_INT 2
11477: ARRAY
11478: PPUSH
11479: CALL_OW 488
11483: IFFALSE 11582
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11485: LD_ADDR_VAR 0 3
11489: PUSH
11490: LD_VAR 0 8
11494: PUSH
11495: LD_INT 1
11497: ARRAY
11498: PPUSH
11499: LD_VAR 0 8
11503: PUSH
11504: LD_INT 2
11506: ARRAY
11507: PPUSH
11508: CALL_OW 546
11512: ST_TO_ADDR
// if hex [ 1 ] then
11513: LD_VAR 0 3
11517: PUSH
11518: LD_INT 1
11520: ARRAY
11521: IFFALSE 11525
// continue ;
11523: GO 11413
// h := hex [ 2 ] ;
11525: LD_ADDR_VAR 0 12
11529: PUSH
11530: LD_VAR 0 3
11534: PUSH
11535: LD_INT 2
11537: ARRAY
11538: ST_TO_ADDR
// if h + 7 < height then
11539: LD_VAR 0 12
11543: PUSH
11544: LD_INT 7
11546: PLUS
11547: PUSH
11548: LD_VAR 0 14
11552: LESS
11553: IFFALSE 11582
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11555: LD_ADDR_VAR 0 17
11559: PUSH
11560: LD_INT 7
11562: PUSH
11563: LD_INT 28
11565: PUSH
11566: LD_INT 45
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: LIST
11573: PUSH
11574: LD_VAR 0 11
11578: ARRAY
11579: ST_TO_ADDR
// break ;
11580: GO 11584
// end ; end ; end ;
11582: GO 11413
11584: POP
11585: POP
// end ; if not weapon then
11586: LD_VAR 0 17
11590: NOT
11591: IFFALSE 11753
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11593: LD_ADDR_VAR 0 4
11597: PUSH
11598: LD_VAR 0 4
11602: PUSH
11603: LD_INT 11
11605: PUSH
11606: LD_INT 30
11608: PUSH
11609: LD_INT 49
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: DIFF
11617: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
11618: LD_ADDR_VAR 0 17
11622: PUSH
11623: LD_VAR 0 4
11627: PUSH
11628: LD_INT 1
11630: PPUSH
11631: LD_VAR 0 4
11635: PPUSH
11636: CALL_OW 12
11640: ARRAY
11641: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
11642: LD_ADDR_VAR 0 13
11646: PUSH
11647: LD_INT 22
11649: PUSH
11650: LD_VAR 0 15
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: LD_INT 3
11661: PUSH
11662: LD_INT 35
11664: PUSH
11665: LD_INT 0
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PPUSH
11680: CALL_OW 69
11684: ST_TO_ADDR
// for i in tmp do
11685: LD_ADDR_VAR 0 7
11689: PUSH
11690: LD_VAR 0 13
11694: PUSH
11695: FOR_IN
11696: IFFALSE 11721
// list := list diff GetBWeapon ( i ) ;
11698: LD_ADDR_VAR 0 4
11702: PUSH
11703: LD_VAR 0 4
11707: PUSH
11708: LD_VAR 0 7
11712: PPUSH
11713: CALL_OW 269
11717: DIFF
11718: ST_TO_ADDR
11719: GO 11695
11721: POP
11722: POP
// if list then
11723: LD_VAR 0 4
11727: IFFALSE 11753
// weapon := list [ rand ( 1 , list ) ] ;
11729: LD_ADDR_VAR 0 17
11733: PUSH
11734: LD_VAR 0 4
11738: PUSH
11739: LD_INT 1
11741: PPUSH
11742: LD_VAR 0 4
11746: PPUSH
11747: CALL_OW 12
11751: ARRAY
11752: ST_TO_ADDR
// end ; if weapon then
11753: LD_VAR 0 17
11757: IFFALSE 11871
// begin tmp := CostOfWeapon ( weapon ) ;
11759: LD_ADDR_VAR 0 13
11763: PUSH
11764: LD_VAR 0 17
11768: PPUSH
11769: CALL_OW 451
11773: ST_TO_ADDR
// j := GetBase ( tower ) ;
11774: LD_ADDR_VAR 0 8
11778: PUSH
11779: LD_VAR 0 1
11783: PPUSH
11784: CALL_OW 274
11788: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11789: LD_VAR 0 8
11793: PPUSH
11794: LD_INT 1
11796: PPUSH
11797: CALL_OW 275
11801: PUSH
11802: LD_VAR 0 13
11806: PUSH
11807: LD_INT 1
11809: ARRAY
11810: GREATEREQUAL
11811: PUSH
11812: LD_VAR 0 8
11816: PPUSH
11817: LD_INT 2
11819: PPUSH
11820: CALL_OW 275
11824: PUSH
11825: LD_VAR 0 13
11829: PUSH
11830: LD_INT 2
11832: ARRAY
11833: GREATEREQUAL
11834: AND
11835: PUSH
11836: LD_VAR 0 8
11840: PPUSH
11841: LD_INT 3
11843: PPUSH
11844: CALL_OW 275
11848: PUSH
11849: LD_VAR 0 13
11853: PUSH
11854: LD_INT 3
11856: ARRAY
11857: GREATEREQUAL
11858: AND
11859: IFFALSE 11871
// result := weapon ;
11861: LD_ADDR_VAR 0 2
11865: PUSH
11866: LD_VAR 0 17
11870: ST_TO_ADDR
// end ; end ;
11871: LD_VAR 0 2
11875: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11876: LD_INT 0
11878: PPUSH
11879: PPUSH
// result := true ;
11880: LD_ADDR_VAR 0 3
11884: PUSH
11885: LD_INT 1
11887: ST_TO_ADDR
// if array1 = array2 then
11888: LD_VAR 0 1
11892: PUSH
11893: LD_VAR 0 2
11897: EQUAL
11898: IFFALSE 11958
// begin for i = 1 to array1 do
11900: LD_ADDR_VAR 0 4
11904: PUSH
11905: DOUBLE
11906: LD_INT 1
11908: DEC
11909: ST_TO_ADDR
11910: LD_VAR 0 1
11914: PUSH
11915: FOR_TO
11916: IFFALSE 11954
// if array1 [ i ] <> array2 [ i ] then
11918: LD_VAR 0 1
11922: PUSH
11923: LD_VAR 0 4
11927: ARRAY
11928: PUSH
11929: LD_VAR 0 2
11933: PUSH
11934: LD_VAR 0 4
11938: ARRAY
11939: NONEQUAL
11940: IFFALSE 11952
// begin result := false ;
11942: LD_ADDR_VAR 0 3
11946: PUSH
11947: LD_INT 0
11949: ST_TO_ADDR
// break ;
11950: GO 11954
// end ;
11952: GO 11915
11954: POP
11955: POP
// end else
11956: GO 11966
// result := false ;
11958: LD_ADDR_VAR 0 3
11962: PUSH
11963: LD_INT 0
11965: ST_TO_ADDR
// end ;
11966: LD_VAR 0 3
11970: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11971: LD_INT 0
11973: PPUSH
11974: PPUSH
11975: PPUSH
// pom := GetBase ( fac ) ;
11976: LD_ADDR_VAR 0 5
11980: PUSH
11981: LD_VAR 0 1
11985: PPUSH
11986: CALL_OW 274
11990: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11991: LD_ADDR_VAR 0 4
11995: PUSH
11996: LD_VAR 0 2
12000: PUSH
12001: LD_INT 1
12003: ARRAY
12004: PPUSH
12005: LD_VAR 0 2
12009: PUSH
12010: LD_INT 2
12012: ARRAY
12013: PPUSH
12014: LD_VAR 0 2
12018: PUSH
12019: LD_INT 3
12021: ARRAY
12022: PPUSH
12023: LD_VAR 0 2
12027: PUSH
12028: LD_INT 4
12030: ARRAY
12031: PPUSH
12032: CALL_OW 449
12036: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
12037: LD_VAR 0 5
12041: PPUSH
12042: LD_INT 1
12044: PPUSH
12045: CALL_OW 275
12049: PUSH
12050: LD_VAR 0 4
12054: PUSH
12055: LD_INT 1
12057: ARRAY
12058: GREATEREQUAL
12059: PUSH
12060: LD_VAR 0 5
12064: PPUSH
12065: LD_INT 2
12067: PPUSH
12068: CALL_OW 275
12072: PUSH
12073: LD_VAR 0 4
12077: PUSH
12078: LD_INT 2
12080: ARRAY
12081: GREATEREQUAL
12082: AND
12083: PUSH
12084: LD_VAR 0 5
12088: PPUSH
12089: LD_INT 3
12091: PPUSH
12092: CALL_OW 275
12096: PUSH
12097: LD_VAR 0 4
12101: PUSH
12102: LD_INT 3
12104: ARRAY
12105: GREATEREQUAL
12106: AND
12107: IFFALSE 12119
// result := true else
12109: LD_ADDR_VAR 0 3
12113: PUSH
12114: LD_INT 1
12116: ST_TO_ADDR
12117: GO 12127
// result := false ;
12119: LD_ADDR_VAR 0 3
12123: PUSH
12124: LD_INT 0
12126: ST_TO_ADDR
// end ;
12127: LD_VAR 0 3
12131: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
12132: LD_INT 0
12134: PPUSH
12135: PPUSH
12136: PPUSH
12137: PPUSH
12138: PPUSH
12139: PPUSH
12140: PPUSH
12141: PPUSH
12142: PPUSH
// result := false ;
12143: LD_ADDR_VAR 0 6
12147: PUSH
12148: LD_INT 0
12150: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
12151: LD_VAR 0 1
12155: NOT
12156: PUSH
12157: LD_VAR 0 1
12161: PPUSH
12162: CALL_OW 266
12166: PUSH
12167: LD_INT 0
12169: PUSH
12170: LD_INT 1
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: IN
12177: NOT
12178: OR
12179: PUSH
12180: LD_VAR 0 2
12184: NOT
12185: OR
12186: PUSH
12187: LD_VAR 0 5
12191: PUSH
12192: LD_INT 0
12194: PUSH
12195: LD_INT 1
12197: PUSH
12198: LD_INT 2
12200: PUSH
12201: LD_INT 3
12203: PUSH
12204: LD_INT 4
12206: PUSH
12207: LD_INT 5
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: IN
12218: NOT
12219: OR
12220: PUSH
12221: LD_VAR 0 3
12225: PPUSH
12226: LD_VAR 0 4
12230: PPUSH
12231: CALL_OW 488
12235: NOT
12236: OR
12237: IFFALSE 12241
// exit ;
12239: GO 12905
// pom := GetBase ( bdepot ) ;
12241: LD_ADDR_VAR 0 9
12245: PUSH
12246: LD_VAR 0 1
12250: PPUSH
12251: CALL_OW 274
12255: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
12256: LD_ADDR_VAR 0 10
12260: PUSH
12261: LD_VAR 0 2
12265: PPUSH
12266: LD_VAR 0 1
12270: PPUSH
12271: CALL_OW 248
12275: PPUSH
12276: CALL_OW 450
12280: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
12281: LD_VAR 0 9
12285: PPUSH
12286: LD_INT 1
12288: PPUSH
12289: CALL_OW 275
12293: PUSH
12294: LD_VAR 0 10
12298: PUSH
12299: LD_INT 1
12301: ARRAY
12302: GREATEREQUAL
12303: PUSH
12304: LD_VAR 0 9
12308: PPUSH
12309: LD_INT 2
12311: PPUSH
12312: CALL_OW 275
12316: PUSH
12317: LD_VAR 0 10
12321: PUSH
12322: LD_INT 2
12324: ARRAY
12325: GREATEREQUAL
12326: AND
12327: PUSH
12328: LD_VAR 0 9
12332: PPUSH
12333: LD_INT 3
12335: PPUSH
12336: CALL_OW 275
12340: PUSH
12341: LD_VAR 0 10
12345: PUSH
12346: LD_INT 3
12348: ARRAY
12349: GREATEREQUAL
12350: AND
12351: NOT
12352: IFFALSE 12356
// exit ;
12354: GO 12905
// if GetBType ( bdepot ) = b_depot then
12356: LD_VAR 0 1
12360: PPUSH
12361: CALL_OW 266
12365: PUSH
12366: LD_INT 0
12368: EQUAL
12369: IFFALSE 12381
// dist := 28 else
12371: LD_ADDR_VAR 0 13
12375: PUSH
12376: LD_INT 28
12378: ST_TO_ADDR
12379: GO 12389
// dist := 36 ;
12381: LD_ADDR_VAR 0 13
12385: PUSH
12386: LD_INT 36
12388: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
12389: LD_VAR 0 1
12393: PPUSH
12394: LD_VAR 0 3
12398: PPUSH
12399: LD_VAR 0 4
12403: PPUSH
12404: CALL_OW 297
12408: PUSH
12409: LD_VAR 0 13
12413: GREATER
12414: IFFALSE 12418
// exit ;
12416: GO 12905
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
12418: LD_ADDR_VAR 0 11
12422: PUSH
12423: LD_VAR 0 2
12427: PPUSH
12428: LD_VAR 0 3
12432: PPUSH
12433: LD_VAR 0 4
12437: PPUSH
12438: LD_VAR 0 5
12442: PPUSH
12443: LD_VAR 0 1
12447: PPUSH
12448: CALL_OW 248
12452: PPUSH
12453: LD_INT 0
12455: PPUSH
12456: CALL 12910 0 6
12460: ST_TO_ADDR
// if not hexes then
12461: LD_VAR 0 11
12465: NOT
12466: IFFALSE 12470
// exit ;
12468: GO 12905
// hex := GetHexInfo ( x , y ) ;
12470: LD_ADDR_VAR 0 14
12474: PUSH
12475: LD_VAR 0 3
12479: PPUSH
12480: LD_VAR 0 4
12484: PPUSH
12485: CALL_OW 546
12489: ST_TO_ADDR
// if hex [ 1 ] then
12490: LD_VAR 0 14
12494: PUSH
12495: LD_INT 1
12497: ARRAY
12498: IFFALSE 12502
// exit ;
12500: GO 12905
// height := hex [ 2 ] ;
12502: LD_ADDR_VAR 0 12
12506: PUSH
12507: LD_VAR 0 14
12511: PUSH
12512: LD_INT 2
12514: ARRAY
12515: ST_TO_ADDR
// for i = 1 to hexes do
12516: LD_ADDR_VAR 0 7
12520: PUSH
12521: DOUBLE
12522: LD_INT 1
12524: DEC
12525: ST_TO_ADDR
12526: LD_VAR 0 11
12530: PUSH
12531: FOR_TO
12532: IFFALSE 12860
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
12534: LD_VAR 0 11
12538: PUSH
12539: LD_VAR 0 7
12543: ARRAY
12544: PUSH
12545: LD_INT 1
12547: ARRAY
12548: PPUSH
12549: LD_VAR 0 11
12553: PUSH
12554: LD_VAR 0 7
12558: ARRAY
12559: PUSH
12560: LD_INT 2
12562: ARRAY
12563: PPUSH
12564: CALL_OW 488
12568: NOT
12569: IFFALSE 12573
// continue ;
12571: GO 12531
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12573: LD_ADDR_VAR 0 8
12577: PUSH
12578: LD_VAR 0 11
12582: PUSH
12583: LD_VAR 0 7
12587: ARRAY
12588: PUSH
12589: LD_INT 1
12591: ARRAY
12592: PPUSH
12593: LD_VAR 0 11
12597: PUSH
12598: LD_VAR 0 7
12602: ARRAY
12603: PUSH
12604: LD_INT 2
12606: ARRAY
12607: PPUSH
12608: CALL_OW 546
12612: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
12613: LD_VAR 0 8
12617: PUSH
12618: LD_INT 1
12620: ARRAY
12621: PUSH
12622: LD_VAR 0 8
12626: PUSH
12627: LD_INT 2
12629: ARRAY
12630: PUSH
12631: LD_VAR 0 12
12635: PUSH
12636: LD_INT 2
12638: PLUS
12639: GREATER
12640: OR
12641: PUSH
12642: LD_VAR 0 8
12646: PUSH
12647: LD_INT 2
12649: ARRAY
12650: PUSH
12651: LD_VAR 0 12
12655: PUSH
12656: LD_INT 2
12658: MINUS
12659: LESS
12660: OR
12661: PUSH
12662: LD_VAR 0 8
12666: PUSH
12667: LD_INT 3
12669: ARRAY
12670: PUSH
12671: LD_INT 0
12673: PUSH
12674: LD_INT 8
12676: PUSH
12677: LD_INT 9
12679: PUSH
12680: LD_INT 10
12682: PUSH
12683: LD_INT 11
12685: PUSH
12686: LD_INT 12
12688: PUSH
12689: LD_INT 13
12691: PUSH
12692: LD_INT 16
12694: PUSH
12695: LD_INT 17
12697: PUSH
12698: LD_INT 18
12700: PUSH
12701: LD_INT 19
12703: PUSH
12704: LD_INT 20
12706: PUSH
12707: LD_INT 21
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: IN
12725: NOT
12726: OR
12727: PUSH
12728: LD_VAR 0 8
12732: PUSH
12733: LD_INT 5
12735: ARRAY
12736: NOT
12737: OR
12738: PUSH
12739: LD_VAR 0 8
12743: PUSH
12744: LD_INT 6
12746: ARRAY
12747: PUSH
12748: LD_INT 1
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: LD_INT 7
12756: PUSH
12757: LD_INT 9
12759: PUSH
12760: LD_INT 10
12762: PUSH
12763: LD_INT 11
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: IN
12774: NOT
12775: OR
12776: PUSH
12777: LD_VAR 0 11
12781: PUSH
12782: LD_VAR 0 7
12786: ARRAY
12787: PUSH
12788: LD_INT 1
12790: ARRAY
12791: PPUSH
12792: LD_VAR 0 11
12796: PUSH
12797: LD_VAR 0 7
12801: ARRAY
12802: PUSH
12803: LD_INT 2
12805: ARRAY
12806: PPUSH
12807: CALL_OW 428
12811: PUSH
12812: LD_INT 0
12814: GREATER
12815: OR
12816: PUSH
12817: LD_VAR 0 11
12821: PUSH
12822: LD_VAR 0 7
12826: ARRAY
12827: PUSH
12828: LD_INT 1
12830: ARRAY
12831: PPUSH
12832: LD_VAR 0 11
12836: PUSH
12837: LD_VAR 0 7
12841: ARRAY
12842: PUSH
12843: LD_INT 2
12845: ARRAY
12846: PPUSH
12847: CALL_OW 351
12851: OR
12852: IFFALSE 12858
// exit ;
12854: POP
12855: POP
12856: GO 12905
// end ;
12858: GO 12531
12860: POP
12861: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
12862: LD_VAR 0 1
12866: PPUSH
12867: CALL_OW 255
12871: PPUSH
12872: LD_VAR 0 3
12876: PPUSH
12877: LD_VAR 0 4
12881: PPUSH
12882: LD_INT 20
12884: PPUSH
12885: CALL 6772 0 4
12889: PUSH
12890: LD_INT 4
12892: ARRAY
12893: IFFALSE 12897
// exit ;
12895: GO 12905
// result := true ;
12897: LD_ADDR_VAR 0 6
12901: PUSH
12902: LD_INT 1
12904: ST_TO_ADDR
// end ;
12905: LD_VAR 0 6
12909: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
12910: LD_INT 0
12912: PPUSH
12913: PPUSH
12914: PPUSH
12915: PPUSH
12916: PPUSH
12917: PPUSH
12918: PPUSH
12919: PPUSH
12920: PPUSH
12921: PPUSH
12922: PPUSH
12923: PPUSH
12924: PPUSH
12925: PPUSH
12926: PPUSH
12927: PPUSH
12928: PPUSH
12929: PPUSH
12930: PPUSH
12931: PPUSH
12932: PPUSH
12933: PPUSH
12934: PPUSH
12935: PPUSH
12936: PPUSH
12937: PPUSH
12938: PPUSH
12939: PPUSH
12940: PPUSH
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
12945: PPUSH
12946: PPUSH
12947: PPUSH
12948: PPUSH
12949: PPUSH
12950: PPUSH
12951: PPUSH
12952: PPUSH
12953: PPUSH
12954: PPUSH
12955: PPUSH
12956: PPUSH
12957: PPUSH
12958: PPUSH
12959: PPUSH
12960: PPUSH
12961: PPUSH
12962: PPUSH
12963: PPUSH
12964: PPUSH
12965: PPUSH
12966: PPUSH
12967: PPUSH
12968: PPUSH
12969: PPUSH
// result = [ ] ;
12970: LD_ADDR_VAR 0 7
12974: PUSH
12975: EMPTY
12976: ST_TO_ADDR
// temp_list = [ ] ;
12977: LD_ADDR_VAR 0 9
12981: PUSH
12982: EMPTY
12983: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
12984: LD_VAR 0 4
12988: PUSH
12989: LD_INT 0
12991: PUSH
12992: LD_INT 1
12994: PUSH
12995: LD_INT 2
12997: PUSH
12998: LD_INT 3
13000: PUSH
13001: LD_INT 4
13003: PUSH
13004: LD_INT 5
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: IN
13015: NOT
13016: PUSH
13017: LD_VAR 0 1
13021: PUSH
13022: LD_INT 0
13024: PUSH
13025: LD_INT 1
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: IN
13032: PUSH
13033: LD_VAR 0 5
13037: PUSH
13038: LD_INT 1
13040: PUSH
13041: LD_INT 2
13043: PUSH
13044: LD_INT 3
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: LIST
13051: IN
13052: NOT
13053: AND
13054: OR
13055: IFFALSE 13059
// exit ;
13057: GO 31444
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
13059: LD_VAR 0 1
13063: PUSH
13064: LD_INT 6
13066: PUSH
13067: LD_INT 7
13069: PUSH
13070: LD_INT 8
13072: PUSH
13073: LD_INT 13
13075: PUSH
13076: LD_INT 12
13078: PUSH
13079: LD_INT 15
13081: PUSH
13082: LD_INT 11
13084: PUSH
13085: LD_INT 14
13087: PUSH
13088: LD_INT 10
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: IN
13102: IFFALSE 13112
// btype = b_lab ;
13104: LD_ADDR_VAR 0 1
13108: PUSH
13109: LD_INT 6
13111: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
13112: LD_VAR 0 6
13116: PUSH
13117: LD_INT 0
13119: PUSH
13120: LD_INT 1
13122: PUSH
13123: LD_INT 2
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: IN
13131: NOT
13132: PUSH
13133: LD_VAR 0 1
13137: PUSH
13138: LD_INT 0
13140: PUSH
13141: LD_INT 1
13143: PUSH
13144: LD_INT 2
13146: PUSH
13147: LD_INT 3
13149: PUSH
13150: LD_INT 6
13152: PUSH
13153: LD_INT 36
13155: PUSH
13156: LD_INT 4
13158: PUSH
13159: LD_INT 5
13161: PUSH
13162: LD_INT 31
13164: PUSH
13165: LD_INT 32
13167: PUSH
13168: LD_INT 33
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: IN
13184: NOT
13185: PUSH
13186: LD_VAR 0 6
13190: PUSH
13191: LD_INT 1
13193: EQUAL
13194: AND
13195: OR
13196: PUSH
13197: LD_VAR 0 1
13201: PUSH
13202: LD_INT 2
13204: PUSH
13205: LD_INT 3
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: IN
13212: NOT
13213: PUSH
13214: LD_VAR 0 6
13218: PUSH
13219: LD_INT 2
13221: EQUAL
13222: AND
13223: OR
13224: IFFALSE 13234
// mode = 0 ;
13226: LD_ADDR_VAR 0 6
13230: PUSH
13231: LD_INT 0
13233: ST_TO_ADDR
// case mode of 0 :
13234: LD_VAR 0 6
13238: PUSH
13239: LD_INT 0
13241: DOUBLE
13242: EQUAL
13243: IFTRUE 13247
13245: GO 24700
13247: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
13248: LD_ADDR_VAR 0 11
13252: PUSH
13253: LD_INT 0
13255: PUSH
13256: LD_INT 0
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 0
13265: PUSH
13266: LD_INT 1
13268: NEG
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 1
13276: PUSH
13277: LD_INT 0
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: LD_INT 1
13286: PUSH
13287: LD_INT 1
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PUSH
13294: LD_INT 0
13296: PUSH
13297: LD_INT 1
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 1
13306: NEG
13307: PUSH
13308: LD_INT 0
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PUSH
13315: LD_INT 1
13317: NEG
13318: PUSH
13319: LD_INT 1
13321: NEG
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: LD_INT 1
13329: NEG
13330: PUSH
13331: LD_INT 2
13333: NEG
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: LD_INT 0
13341: PUSH
13342: LD_INT 2
13344: NEG
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PUSH
13350: LD_INT 1
13352: PUSH
13353: LD_INT 1
13355: NEG
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 1
13363: PUSH
13364: LD_INT 2
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 0
13373: PUSH
13374: LD_INT 2
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: LD_INT 1
13383: NEG
13384: PUSH
13385: LD_INT 1
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 1
13394: PUSH
13395: LD_INT 3
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: LD_INT 0
13404: PUSH
13405: LD_INT 3
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 1
13414: NEG
13415: PUSH
13416: LD_INT 2
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
13441: LD_ADDR_VAR 0 12
13445: PUSH
13446: LD_INT 0
13448: PUSH
13449: LD_INT 0
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 0
13458: PUSH
13459: LD_INT 1
13461: NEG
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 1
13469: PUSH
13470: LD_INT 0
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 1
13479: PUSH
13480: LD_INT 1
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 0
13489: PUSH
13490: LD_INT 1
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 1
13499: NEG
13500: PUSH
13501: LD_INT 0
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 1
13510: NEG
13511: PUSH
13512: LD_INT 1
13514: NEG
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 1
13522: PUSH
13523: LD_INT 1
13525: NEG
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 2
13533: PUSH
13534: LD_INT 0
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: LD_INT 2
13543: PUSH
13544: LD_INT 1
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: PUSH
13551: LD_INT 1
13553: NEG
13554: PUSH
13555: LD_INT 1
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PUSH
13562: LD_INT 2
13564: NEG
13565: PUSH
13566: LD_INT 0
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: LD_INT 2
13575: NEG
13576: PUSH
13577: LD_INT 1
13579: NEG
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 2
13587: NEG
13588: PUSH
13589: LD_INT 1
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: LD_INT 3
13598: NEG
13599: PUSH
13600: LD_INT 0
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 3
13609: NEG
13610: PUSH
13611: LD_INT 1
13613: NEG
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
13637: LD_ADDR_VAR 0 13
13641: PUSH
13642: LD_INT 0
13644: PUSH
13645: LD_INT 0
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 0
13654: PUSH
13655: LD_INT 1
13657: NEG
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: LD_INT 1
13665: PUSH
13666: LD_INT 0
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 1
13675: PUSH
13676: LD_INT 1
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 0
13685: PUSH
13686: LD_INT 1
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: LD_INT 1
13695: NEG
13696: PUSH
13697: LD_INT 0
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PUSH
13704: LD_INT 1
13706: NEG
13707: PUSH
13708: LD_INT 1
13710: NEG
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 1
13718: NEG
13719: PUSH
13720: LD_INT 2
13722: NEG
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 2
13730: PUSH
13731: LD_INT 1
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 2
13740: PUSH
13741: LD_INT 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: LD_INT 1
13750: PUSH
13751: LD_INT 2
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: LD_INT 2
13760: NEG
13761: PUSH
13762: LD_INT 1
13764: NEG
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 2
13772: NEG
13773: PUSH
13774: LD_INT 2
13776: NEG
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PUSH
13782: LD_INT 2
13784: NEG
13785: PUSH
13786: LD_INT 3
13788: NEG
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 3
13796: NEG
13797: PUSH
13798: LD_INT 2
13800: NEG
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: LD_INT 3
13808: NEG
13809: PUSH
13810: LD_INT 3
13812: NEG
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
13836: LD_ADDR_VAR 0 14
13840: PUSH
13841: LD_INT 0
13843: PUSH
13844: LD_INT 0
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 0
13853: PUSH
13854: LD_INT 1
13856: NEG
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: LD_INT 1
13864: PUSH
13865: LD_INT 0
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: LD_INT 1
13874: PUSH
13875: LD_INT 1
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 0
13884: PUSH
13885: LD_INT 1
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 1
13894: NEG
13895: PUSH
13896: LD_INT 0
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 1
13905: NEG
13906: PUSH
13907: LD_INT 1
13909: NEG
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: LD_INT 1
13917: NEG
13918: PUSH
13919: LD_INT 2
13921: NEG
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 0
13929: PUSH
13930: LD_INT 2
13932: NEG
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: LD_INT 1
13940: PUSH
13941: LD_INT 1
13943: NEG
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: LD_INT 1
13951: PUSH
13952: LD_INT 2
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 0
13961: PUSH
13962: LD_INT 2
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 1
13971: NEG
13972: PUSH
13973: LD_INT 1
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PUSH
13980: LD_INT 1
13982: NEG
13983: PUSH
13984: LD_INT 3
13986: NEG
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: LD_INT 0
13994: PUSH
13995: LD_INT 3
13997: NEG
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 1
14005: PUSH
14006: LD_INT 2
14008: NEG
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
14032: LD_ADDR_VAR 0 15
14036: PUSH
14037: LD_INT 0
14039: PUSH
14040: LD_INT 0
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: LD_INT 0
14049: PUSH
14050: LD_INT 1
14052: NEG
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PUSH
14058: LD_INT 1
14060: PUSH
14061: LD_INT 0
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 1
14070: PUSH
14071: LD_INT 1
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: LD_INT 0
14080: PUSH
14081: LD_INT 1
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 1
14090: NEG
14091: PUSH
14092: LD_INT 0
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 1
14101: NEG
14102: PUSH
14103: LD_INT 1
14105: NEG
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 1
14113: PUSH
14114: LD_INT 1
14116: NEG
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: LD_INT 2
14124: PUSH
14125: LD_INT 0
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: LD_INT 2
14134: PUSH
14135: LD_INT 1
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PUSH
14142: LD_INT 1
14144: NEG
14145: PUSH
14146: LD_INT 1
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PUSH
14153: LD_INT 2
14155: NEG
14156: PUSH
14157: LD_INT 0
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: LD_INT 2
14166: NEG
14167: PUSH
14168: LD_INT 1
14170: NEG
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: LD_INT 2
14178: PUSH
14179: LD_INT 1
14181: NEG
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 3
14189: PUSH
14190: LD_INT 0
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 3
14199: PUSH
14200: LD_INT 1
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
14225: LD_ADDR_VAR 0 16
14229: PUSH
14230: LD_INT 0
14232: PUSH
14233: LD_INT 0
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: LD_INT 0
14242: PUSH
14243: LD_INT 1
14245: NEG
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 1
14253: PUSH
14254: LD_INT 0
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PUSH
14261: LD_INT 1
14263: PUSH
14264: LD_INT 1
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: PUSH
14271: LD_INT 0
14273: PUSH
14274: LD_INT 1
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PUSH
14281: LD_INT 1
14283: NEG
14284: PUSH
14285: LD_INT 0
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 1
14294: NEG
14295: PUSH
14296: LD_INT 1
14298: NEG
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: PUSH
14304: LD_INT 1
14306: NEG
14307: PUSH
14308: LD_INT 2
14310: NEG
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 2
14318: PUSH
14319: LD_INT 1
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 2
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: LD_INT 2
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: LD_INT 2
14348: NEG
14349: PUSH
14350: LD_INT 1
14352: NEG
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 2
14360: NEG
14361: PUSH
14362: LD_INT 2
14364: NEG
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 3
14372: PUSH
14373: LD_INT 2
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 3
14382: PUSH
14383: LD_INT 3
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 2
14392: PUSH
14393: LD_INT 3
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
14418: LD_ADDR_VAR 0 17
14422: PUSH
14423: LD_INT 0
14425: PUSH
14426: LD_INT 0
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 0
14435: PUSH
14436: LD_INT 1
14438: NEG
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: LD_INT 1
14446: PUSH
14447: LD_INT 0
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 1
14456: PUSH
14457: LD_INT 1
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 0
14466: PUSH
14467: LD_INT 1
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 1
14476: NEG
14477: PUSH
14478: LD_INT 0
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: LD_INT 1
14487: NEG
14488: PUSH
14489: LD_INT 1
14491: NEG
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 1
14499: NEG
14500: PUSH
14501: LD_INT 2
14503: NEG
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 0
14511: PUSH
14512: LD_INT 2
14514: NEG
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 1
14522: PUSH
14523: LD_INT 1
14525: NEG
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 2
14533: PUSH
14534: LD_INT 0
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 2
14543: PUSH
14544: LD_INT 1
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 2
14553: PUSH
14554: LD_INT 2
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 1
14563: PUSH
14564: LD_INT 2
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 0
14573: PUSH
14574: LD_INT 2
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: LD_INT 1
14583: NEG
14584: PUSH
14585: LD_INT 1
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 2
14594: NEG
14595: PUSH
14596: LD_INT 0
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PUSH
14603: LD_INT 2
14605: NEG
14606: PUSH
14607: LD_INT 1
14609: NEG
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PUSH
14615: LD_INT 2
14617: NEG
14618: PUSH
14619: LD_INT 2
14621: NEG
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
14648: LD_ADDR_VAR 0 18
14652: PUSH
14653: LD_INT 0
14655: PUSH
14656: LD_INT 0
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 0
14665: PUSH
14666: LD_INT 1
14668: NEG
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: LD_INT 1
14676: PUSH
14677: LD_INT 0
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 1
14686: PUSH
14687: LD_INT 1
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 0
14696: PUSH
14697: LD_INT 1
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 1
14706: NEG
14707: PUSH
14708: LD_INT 0
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 1
14717: NEG
14718: PUSH
14719: LD_INT 1
14721: NEG
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: LD_INT 1
14729: NEG
14730: PUSH
14731: LD_INT 2
14733: NEG
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 0
14741: PUSH
14742: LD_INT 2
14744: NEG
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: LD_INT 1
14752: PUSH
14753: LD_INT 1
14755: NEG
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 2
14763: PUSH
14764: LD_INT 0
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: LD_INT 2
14773: PUSH
14774: LD_INT 1
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 2
14783: PUSH
14784: LD_INT 2
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: LD_INT 1
14793: PUSH
14794: LD_INT 2
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: LD_INT 0
14803: PUSH
14804: LD_INT 2
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: LD_INT 1
14813: NEG
14814: PUSH
14815: LD_INT 1
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 2
14824: NEG
14825: PUSH
14826: LD_INT 0
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 2
14835: NEG
14836: PUSH
14837: LD_INT 1
14839: NEG
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 2
14847: NEG
14848: PUSH
14849: LD_INT 2
14851: NEG
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
14878: LD_ADDR_VAR 0 19
14882: PUSH
14883: LD_INT 0
14885: PUSH
14886: LD_INT 0
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: LD_INT 0
14895: PUSH
14896: LD_INT 1
14898: NEG
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: LD_INT 1
14906: PUSH
14907: LD_INT 0
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 1
14916: PUSH
14917: LD_INT 1
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 0
14926: PUSH
14927: LD_INT 1
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: LD_INT 1
14936: NEG
14937: PUSH
14938: LD_INT 0
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 1
14947: NEG
14948: PUSH
14949: LD_INT 1
14951: NEG
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 1
14959: NEG
14960: PUSH
14961: LD_INT 2
14963: NEG
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: LD_INT 0
14971: PUSH
14972: LD_INT 2
14974: NEG
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: LD_INT 1
14982: PUSH
14983: LD_INT 1
14985: NEG
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: LD_INT 2
14993: PUSH
14994: LD_INT 0
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 2
15003: PUSH
15004: LD_INT 1
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: LD_INT 2
15013: PUSH
15014: LD_INT 2
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 1
15023: PUSH
15024: LD_INT 2
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 0
15033: PUSH
15034: LD_INT 2
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 1
15043: NEG
15044: PUSH
15045: LD_INT 1
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: LD_INT 2
15054: NEG
15055: PUSH
15056: LD_INT 0
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 2
15065: NEG
15066: PUSH
15067: LD_INT 1
15069: NEG
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: LD_INT 2
15077: NEG
15078: PUSH
15079: LD_INT 2
15081: NEG
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15108: LD_ADDR_VAR 0 20
15112: PUSH
15113: LD_INT 0
15115: PUSH
15116: LD_INT 0
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: LD_INT 0
15125: PUSH
15126: LD_INT 1
15128: NEG
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PUSH
15134: LD_INT 1
15136: PUSH
15137: LD_INT 0
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: LD_INT 1
15146: PUSH
15147: LD_INT 1
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 0
15156: PUSH
15157: LD_INT 1
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 1
15166: NEG
15167: PUSH
15168: LD_INT 0
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: LD_INT 1
15177: NEG
15178: PUSH
15179: LD_INT 1
15181: NEG
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 1
15189: NEG
15190: PUSH
15191: LD_INT 2
15193: NEG
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: LD_INT 0
15201: PUSH
15202: LD_INT 2
15204: NEG
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: LD_INT 1
15212: PUSH
15213: LD_INT 1
15215: NEG
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: LD_INT 2
15223: PUSH
15224: LD_INT 0
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 2
15233: PUSH
15234: LD_INT 1
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 2
15243: PUSH
15244: LD_INT 2
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 1
15253: PUSH
15254: LD_INT 2
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: LD_INT 0
15263: PUSH
15264: LD_INT 2
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PUSH
15271: LD_INT 1
15273: NEG
15274: PUSH
15275: LD_INT 1
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: LD_INT 2
15284: NEG
15285: PUSH
15286: LD_INT 0
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: LD_INT 2
15295: NEG
15296: PUSH
15297: LD_INT 1
15299: NEG
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: LD_INT 2
15307: NEG
15308: PUSH
15309: LD_INT 2
15311: NEG
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15338: LD_ADDR_VAR 0 21
15342: PUSH
15343: LD_INT 0
15345: PUSH
15346: LD_INT 0
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 0
15355: PUSH
15356: LD_INT 1
15358: NEG
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: LD_INT 1
15366: PUSH
15367: LD_INT 0
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: LD_INT 1
15376: PUSH
15377: LD_INT 1
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 0
15386: PUSH
15387: LD_INT 1
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 1
15396: NEG
15397: PUSH
15398: LD_INT 0
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 1
15407: NEG
15408: PUSH
15409: LD_INT 1
15411: NEG
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 1
15419: NEG
15420: PUSH
15421: LD_INT 2
15423: NEG
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PUSH
15429: LD_INT 0
15431: PUSH
15432: LD_INT 2
15434: NEG
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PUSH
15440: LD_INT 1
15442: PUSH
15443: LD_INT 1
15445: NEG
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 2
15453: PUSH
15454: LD_INT 0
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: LD_INT 2
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 2
15473: PUSH
15474: LD_INT 2
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 1
15483: PUSH
15484: LD_INT 2
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 0
15493: PUSH
15494: LD_INT 2
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 1
15503: NEG
15504: PUSH
15505: LD_INT 1
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 2
15514: NEG
15515: PUSH
15516: LD_INT 0
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 2
15525: NEG
15526: PUSH
15527: LD_INT 1
15529: NEG
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: LD_INT 2
15537: NEG
15538: PUSH
15539: LD_INT 2
15541: NEG
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15568: LD_ADDR_VAR 0 22
15572: PUSH
15573: LD_INT 0
15575: PUSH
15576: LD_INT 0
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 0
15585: PUSH
15586: LD_INT 1
15588: NEG
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 1
15596: PUSH
15597: LD_INT 0
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 1
15606: PUSH
15607: LD_INT 1
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 0
15616: PUSH
15617: LD_INT 1
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: LD_INT 1
15626: NEG
15627: PUSH
15628: LD_INT 0
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: LD_INT 1
15637: NEG
15638: PUSH
15639: LD_INT 1
15641: NEG
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 1
15649: NEG
15650: PUSH
15651: LD_INT 2
15653: NEG
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 0
15661: PUSH
15662: LD_INT 2
15664: NEG
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 1
15672: PUSH
15673: LD_INT 1
15675: NEG
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 2
15683: PUSH
15684: LD_INT 0
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 2
15693: PUSH
15694: LD_INT 1
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 2
15703: PUSH
15704: LD_INT 2
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 1
15713: PUSH
15714: LD_INT 2
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: LD_INT 0
15723: PUSH
15724: LD_INT 2
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 1
15733: NEG
15734: PUSH
15735: LD_INT 1
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 2
15744: NEG
15745: PUSH
15746: LD_INT 0
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: LD_INT 2
15755: NEG
15756: PUSH
15757: LD_INT 1
15759: NEG
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 2
15767: NEG
15768: PUSH
15769: LD_INT 2
15771: NEG
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
15798: LD_ADDR_VAR 0 23
15802: PUSH
15803: LD_INT 0
15805: PUSH
15806: LD_INT 0
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 0
15815: PUSH
15816: LD_INT 1
15818: NEG
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 1
15826: PUSH
15827: LD_INT 0
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 1
15836: PUSH
15837: LD_INT 1
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 0
15846: PUSH
15847: LD_INT 1
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 1
15856: NEG
15857: PUSH
15858: LD_INT 0
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PUSH
15865: LD_INT 1
15867: NEG
15868: PUSH
15869: LD_INT 1
15871: NEG
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: LD_INT 1
15879: NEG
15880: PUSH
15881: LD_INT 2
15883: NEG
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 0
15891: PUSH
15892: LD_INT 2
15894: NEG
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 1
15902: PUSH
15903: LD_INT 1
15905: NEG
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: LD_INT 0
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PUSH
15921: LD_INT 2
15923: PUSH
15924: LD_INT 1
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: LD_INT 2
15933: PUSH
15934: LD_INT 2
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 1
15943: PUSH
15944: LD_INT 2
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: LD_INT 0
15953: PUSH
15954: LD_INT 2
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 1
15963: NEG
15964: PUSH
15965: LD_INT 1
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 2
15974: NEG
15975: PUSH
15976: LD_INT 0
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 2
15985: NEG
15986: PUSH
15987: LD_INT 1
15989: NEG
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 2
15997: NEG
15998: PUSH
15999: LD_INT 2
16001: NEG
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 2
16009: NEG
16010: PUSH
16011: LD_INT 3
16013: NEG
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: LD_INT 1
16021: NEG
16022: PUSH
16023: LD_INT 3
16025: NEG
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: LD_INT 1
16033: PUSH
16034: LD_INT 2
16036: NEG
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 2
16044: PUSH
16045: LD_INT 1
16047: NEG
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
16078: LD_ADDR_VAR 0 24
16082: PUSH
16083: LD_INT 0
16085: PUSH
16086: LD_INT 0
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 0
16095: PUSH
16096: LD_INT 1
16098: NEG
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 1
16106: PUSH
16107: LD_INT 0
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 1
16116: PUSH
16117: LD_INT 1
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 0
16126: PUSH
16127: LD_INT 1
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 1
16136: NEG
16137: PUSH
16138: LD_INT 0
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 1
16147: NEG
16148: PUSH
16149: LD_INT 1
16151: NEG
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 1
16159: NEG
16160: PUSH
16161: LD_INT 2
16163: NEG
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 0
16171: PUSH
16172: LD_INT 2
16174: NEG
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: LD_INT 1
16182: PUSH
16183: LD_INT 1
16185: NEG
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 2
16193: PUSH
16194: LD_INT 0
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 2
16203: PUSH
16204: LD_INT 1
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 2
16213: PUSH
16214: LD_INT 2
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 1
16223: PUSH
16224: LD_INT 2
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 0
16233: PUSH
16234: LD_INT 2
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PUSH
16241: LD_INT 1
16243: NEG
16244: PUSH
16245: LD_INT 1
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 2
16254: NEG
16255: PUSH
16256: LD_INT 0
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: LD_INT 2
16265: NEG
16266: PUSH
16267: LD_INT 1
16269: NEG
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: LD_INT 2
16277: NEG
16278: PUSH
16279: LD_INT 2
16281: NEG
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 1
16289: PUSH
16290: LD_INT 2
16292: NEG
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 2
16300: PUSH
16301: LD_INT 1
16303: NEG
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PUSH
16309: LD_INT 3
16311: PUSH
16312: LD_INT 1
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 3
16321: PUSH
16322: LD_INT 2
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
16354: LD_ADDR_VAR 0 25
16358: PUSH
16359: LD_INT 0
16361: PUSH
16362: LD_INT 0
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 0
16371: PUSH
16372: LD_INT 1
16374: NEG
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 1
16382: PUSH
16383: LD_INT 0
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 1
16392: PUSH
16393: LD_INT 1
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 0
16402: PUSH
16403: LD_INT 1
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: LD_INT 1
16412: NEG
16413: PUSH
16414: LD_INT 0
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 1
16423: NEG
16424: PUSH
16425: LD_INT 1
16427: NEG
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 1
16435: NEG
16436: PUSH
16437: LD_INT 2
16439: NEG
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 0
16447: PUSH
16448: LD_INT 2
16450: NEG
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 1
16458: PUSH
16459: LD_INT 1
16461: NEG
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 2
16469: PUSH
16470: LD_INT 0
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 2
16479: PUSH
16480: LD_INT 1
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 2
16489: PUSH
16490: LD_INT 2
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 1
16499: PUSH
16500: LD_INT 2
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 0
16509: PUSH
16510: LD_INT 2
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 1
16519: NEG
16520: PUSH
16521: LD_INT 1
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: LD_INT 2
16530: NEG
16531: PUSH
16532: LD_INT 0
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: LD_INT 2
16541: NEG
16542: PUSH
16543: LD_INT 1
16545: NEG
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: LD_INT 2
16553: NEG
16554: PUSH
16555: LD_INT 2
16557: NEG
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 3
16565: PUSH
16566: LD_INT 1
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 3
16575: PUSH
16576: LD_INT 2
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 2
16585: PUSH
16586: LD_INT 3
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 1
16595: PUSH
16596: LD_INT 3
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
16628: LD_ADDR_VAR 0 26
16632: PUSH
16633: LD_INT 0
16635: PUSH
16636: LD_INT 0
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 0
16645: PUSH
16646: LD_INT 1
16648: NEG
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 1
16656: PUSH
16657: LD_INT 0
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 1
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 0
16676: PUSH
16677: LD_INT 1
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 1
16686: NEG
16687: PUSH
16688: LD_INT 0
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 1
16697: NEG
16698: PUSH
16699: LD_INT 1
16701: NEG
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 1
16709: NEG
16710: PUSH
16711: LD_INT 2
16713: NEG
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 0
16721: PUSH
16722: LD_INT 2
16724: NEG
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 1
16732: PUSH
16733: LD_INT 1
16735: NEG
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: LD_INT 2
16743: PUSH
16744: LD_INT 0
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 2
16753: PUSH
16754: LD_INT 1
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: LD_INT 2
16763: PUSH
16764: LD_INT 2
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 1
16773: PUSH
16774: LD_INT 2
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 0
16783: PUSH
16784: LD_INT 2
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 1
16793: NEG
16794: PUSH
16795: LD_INT 1
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 2
16804: NEG
16805: PUSH
16806: LD_INT 0
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 2
16815: NEG
16816: PUSH
16817: LD_INT 1
16819: NEG
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 2
16827: NEG
16828: PUSH
16829: LD_INT 2
16831: NEG
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 2
16839: PUSH
16840: LD_INT 3
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 1
16849: PUSH
16850: LD_INT 3
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 1
16859: NEG
16860: PUSH
16861: LD_INT 2
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 2
16870: NEG
16871: PUSH
16872: LD_INT 1
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
16904: LD_ADDR_VAR 0 27
16908: PUSH
16909: LD_INT 0
16911: PUSH
16912: LD_INT 0
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 0
16921: PUSH
16922: LD_INT 1
16924: NEG
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 1
16932: PUSH
16933: LD_INT 0
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: LD_INT 1
16942: PUSH
16943: LD_INT 1
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 0
16952: PUSH
16953: LD_INT 1
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: LD_INT 1
16962: NEG
16963: PUSH
16964: LD_INT 0
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 1
16973: NEG
16974: PUSH
16975: LD_INT 1
16977: NEG
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: PUSH
16983: LD_INT 1
16985: NEG
16986: PUSH
16987: LD_INT 2
16989: NEG
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PUSH
16995: LD_INT 0
16997: PUSH
16998: LD_INT 2
17000: NEG
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 1
17008: PUSH
17009: LD_INT 1
17011: NEG
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 2
17019: PUSH
17020: LD_INT 0
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 2
17029: PUSH
17030: LD_INT 1
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 2
17039: PUSH
17040: LD_INT 2
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 1
17049: PUSH
17050: LD_INT 2
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 0
17059: PUSH
17060: LD_INT 2
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 1
17069: NEG
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 2
17080: NEG
17081: PUSH
17082: LD_INT 0
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 2
17091: NEG
17092: PUSH
17093: LD_INT 1
17095: NEG
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 2
17103: NEG
17104: PUSH
17105: LD_INT 2
17107: NEG
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 1
17115: NEG
17116: PUSH
17117: LD_INT 2
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 2
17126: NEG
17127: PUSH
17128: LD_INT 1
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 3
17137: NEG
17138: PUSH
17139: LD_INT 1
17141: NEG
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 3
17149: NEG
17150: PUSH
17151: LD_INT 2
17153: NEG
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
17184: LD_ADDR_VAR 0 28
17188: PUSH
17189: LD_INT 0
17191: PUSH
17192: LD_INT 0
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 0
17201: PUSH
17202: LD_INT 1
17204: NEG
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 1
17212: PUSH
17213: LD_INT 0
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: LD_INT 1
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 0
17232: PUSH
17233: LD_INT 1
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 1
17242: NEG
17243: PUSH
17244: LD_INT 0
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 1
17253: NEG
17254: PUSH
17255: LD_INT 1
17257: NEG
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: LD_INT 1
17265: NEG
17266: PUSH
17267: LD_INT 2
17269: NEG
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 0
17277: PUSH
17278: LD_INT 2
17280: NEG
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: LD_INT 1
17291: NEG
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 2
17299: PUSH
17300: LD_INT 0
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 2
17309: PUSH
17310: LD_INT 1
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 2
17319: PUSH
17320: LD_INT 2
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 1
17329: PUSH
17330: LD_INT 2
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 0
17339: PUSH
17340: LD_INT 2
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 1
17349: NEG
17350: PUSH
17351: LD_INT 1
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 2
17360: NEG
17361: PUSH
17362: LD_INT 0
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PUSH
17369: LD_INT 2
17371: NEG
17372: PUSH
17373: LD_INT 1
17375: NEG
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 2
17383: NEG
17384: PUSH
17385: LD_INT 2
17387: NEG
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 2
17395: NEG
17396: PUSH
17397: LD_INT 3
17399: NEG
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 1
17407: NEG
17408: PUSH
17409: LD_INT 3
17411: NEG
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 3
17419: NEG
17420: PUSH
17421: LD_INT 1
17423: NEG
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 3
17431: NEG
17432: PUSH
17433: LD_INT 2
17435: NEG
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
17466: LD_ADDR_VAR 0 29
17470: PUSH
17471: LD_INT 0
17473: PUSH
17474: LD_INT 0
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 0
17483: PUSH
17484: LD_INT 1
17486: NEG
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: LD_INT 1
17494: PUSH
17495: LD_INT 0
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: LD_INT 1
17504: PUSH
17505: LD_INT 1
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 0
17514: PUSH
17515: LD_INT 1
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 1
17524: NEG
17525: PUSH
17526: LD_INT 0
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 1
17535: NEG
17536: PUSH
17537: LD_INT 1
17539: NEG
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 1
17547: NEG
17548: PUSH
17549: LD_INT 2
17551: NEG
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 0
17559: PUSH
17560: LD_INT 2
17562: NEG
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 1
17570: PUSH
17571: LD_INT 1
17573: NEG
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 2
17581: PUSH
17582: LD_INT 0
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: LD_INT 2
17591: PUSH
17592: LD_INT 1
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PUSH
17599: LD_INT 1
17601: PUSH
17602: LD_INT 2
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 0
17611: PUSH
17612: LD_INT 2
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 1
17621: NEG
17622: PUSH
17623: LD_INT 1
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 2
17632: NEG
17633: PUSH
17634: LD_INT 1
17636: NEG
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 2
17644: NEG
17645: PUSH
17646: LD_INT 2
17648: NEG
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 2
17656: NEG
17657: PUSH
17658: LD_INT 3
17660: NEG
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 2
17668: PUSH
17669: LD_INT 1
17671: NEG
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 3
17679: PUSH
17680: LD_INT 1
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 1
17689: PUSH
17690: LD_INT 3
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 1
17699: NEG
17700: PUSH
17701: LD_INT 2
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 3
17710: NEG
17711: PUSH
17712: LD_INT 2
17714: NEG
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
17745: LD_ADDR_VAR 0 30
17749: PUSH
17750: LD_INT 0
17752: PUSH
17753: LD_INT 0
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 0
17762: PUSH
17763: LD_INT 1
17765: NEG
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 1
17773: PUSH
17774: LD_INT 0
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 1
17783: PUSH
17784: LD_INT 1
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 0
17793: PUSH
17794: LD_INT 1
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 1
17803: NEG
17804: PUSH
17805: LD_INT 0
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 1
17814: NEG
17815: PUSH
17816: LD_INT 1
17818: NEG
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 1
17826: NEG
17827: PUSH
17828: LD_INT 2
17830: NEG
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 0
17838: PUSH
17839: LD_INT 2
17841: NEG
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 1
17849: PUSH
17850: LD_INT 1
17852: NEG
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: LD_INT 0
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: LD_INT 1
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 2
17880: PUSH
17881: LD_INT 2
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 1
17890: PUSH
17891: LD_INT 2
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 1
17900: NEG
17901: PUSH
17902: LD_INT 1
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 2
17911: NEG
17912: PUSH
17913: LD_INT 0
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 2
17922: NEG
17923: PUSH
17924: LD_INT 1
17926: NEG
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 1
17934: NEG
17935: PUSH
17936: LD_INT 3
17938: NEG
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 1
17946: PUSH
17947: LD_INT 2
17949: NEG
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 3
17957: PUSH
17958: LD_INT 2
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 2
17967: PUSH
17968: LD_INT 3
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 2
17977: NEG
17978: PUSH
17979: LD_INT 1
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 3
17988: NEG
17989: PUSH
17990: LD_INT 1
17992: NEG
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18023: LD_ADDR_VAR 0 31
18027: PUSH
18028: LD_INT 0
18030: PUSH
18031: LD_INT 0
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 0
18040: PUSH
18041: LD_INT 1
18043: NEG
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 1
18051: PUSH
18052: LD_INT 0
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 1
18061: PUSH
18062: LD_INT 1
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 0
18071: PUSH
18072: LD_INT 1
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: LD_INT 1
18081: NEG
18082: PUSH
18083: LD_INT 0
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 1
18092: NEG
18093: PUSH
18094: LD_INT 1
18096: NEG
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 1
18104: NEG
18105: PUSH
18106: LD_INT 2
18108: NEG
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 1
18116: PUSH
18117: LD_INT 1
18119: NEG
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 2
18127: PUSH
18128: LD_INT 0
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 2
18137: PUSH
18138: LD_INT 1
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 2
18147: PUSH
18148: LD_INT 2
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 1
18157: PUSH
18158: LD_INT 2
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: LD_INT 2
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 1
18177: NEG
18178: PUSH
18179: LD_INT 1
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 2
18188: NEG
18189: PUSH
18190: LD_INT 1
18192: NEG
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 2
18200: NEG
18201: PUSH
18202: LD_INT 2
18204: NEG
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 2
18212: NEG
18213: PUSH
18214: LD_INT 3
18216: NEG
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 2
18224: PUSH
18225: LD_INT 1
18227: NEG
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 3
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 1
18245: PUSH
18246: LD_INT 3
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 1
18255: NEG
18256: PUSH
18257: LD_INT 2
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 3
18266: NEG
18267: PUSH
18268: LD_INT 2
18270: NEG
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
18301: LD_ADDR_VAR 0 32
18305: PUSH
18306: LD_INT 0
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 0
18318: PUSH
18319: LD_INT 1
18321: NEG
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 1
18329: PUSH
18330: LD_INT 0
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: LD_INT 1
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 0
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 1
18359: NEG
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 1
18370: NEG
18371: PUSH
18372: LD_INT 1
18374: NEG
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 1
18382: NEG
18383: PUSH
18384: LD_INT 2
18386: NEG
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 0
18394: PUSH
18395: LD_INT 2
18397: NEG
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 1
18405: PUSH
18406: LD_INT 1
18408: NEG
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 2
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 2
18426: PUSH
18427: LD_INT 2
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 1
18436: PUSH
18437: LD_INT 2
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 0
18446: PUSH
18447: LD_INT 2
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 1
18456: NEG
18457: PUSH
18458: LD_INT 1
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 2
18467: NEG
18468: PUSH
18469: LD_INT 0
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 2
18478: NEG
18479: PUSH
18480: LD_INT 1
18482: NEG
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 1
18490: NEG
18491: PUSH
18492: LD_INT 3
18494: NEG
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 1
18502: PUSH
18503: LD_INT 2
18505: NEG
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 3
18513: PUSH
18514: LD_INT 2
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 2
18523: PUSH
18524: LD_INT 3
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 2
18533: NEG
18534: PUSH
18535: LD_INT 1
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 3
18544: NEG
18545: PUSH
18546: LD_INT 1
18548: NEG
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18579: LD_ADDR_VAR 0 33
18583: PUSH
18584: LD_INT 0
18586: PUSH
18587: LD_INT 0
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 0
18596: PUSH
18597: LD_INT 1
18599: NEG
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 1
18607: PUSH
18608: LD_INT 0
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 1
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 0
18627: PUSH
18628: LD_INT 1
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 1
18637: NEG
18638: PUSH
18639: LD_INT 0
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 1
18648: NEG
18649: PUSH
18650: LD_INT 1
18652: NEG
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 1
18660: NEG
18661: PUSH
18662: LD_INT 2
18664: NEG
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 1
18672: PUSH
18673: LD_INT 1
18675: NEG
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 2
18683: PUSH
18684: LD_INT 0
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 2
18693: PUSH
18694: LD_INT 1
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: LD_INT 2
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 0
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 1
18723: NEG
18724: PUSH
18725: LD_INT 1
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 2
18734: NEG
18735: PUSH
18736: LD_INT 0
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 2
18745: NEG
18746: PUSH
18747: LD_INT 1
18749: NEG
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 2
18757: NEG
18758: PUSH
18759: LD_INT 2
18761: NEG
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 2
18769: NEG
18770: PUSH
18771: LD_INT 3
18773: NEG
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 2
18781: PUSH
18782: LD_INT 1
18784: NEG
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 3
18792: PUSH
18793: LD_INT 1
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: LD_INT 3
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 1
18812: NEG
18813: PUSH
18814: LD_INT 2
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 3
18823: NEG
18824: PUSH
18825: LD_INT 2
18827: NEG
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
18858: LD_ADDR_VAR 0 34
18862: PUSH
18863: LD_INT 0
18865: PUSH
18866: LD_INT 0
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: LD_INT 1
18878: NEG
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 1
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 1
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 0
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 1
18916: NEG
18917: PUSH
18918: LD_INT 0
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 1
18927: NEG
18928: PUSH
18929: LD_INT 1
18931: NEG
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 1
18939: NEG
18940: PUSH
18941: LD_INT 2
18943: NEG
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 0
18951: PUSH
18952: LD_INT 2
18954: NEG
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 1
18962: PUSH
18963: LD_INT 1
18965: NEG
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 2
18973: PUSH
18974: LD_INT 1
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: LD_INT 2
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 1
18993: PUSH
18994: LD_INT 2
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 1
19003: NEG
19004: PUSH
19005: LD_INT 1
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 2
19014: NEG
19015: PUSH
19016: LD_INT 0
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 2
19025: NEG
19026: PUSH
19027: LD_INT 1
19029: NEG
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 2
19037: NEG
19038: PUSH
19039: LD_INT 2
19041: NEG
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 1
19049: NEG
19050: PUSH
19051: LD_INT 3
19053: NEG
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: LD_INT 2
19064: NEG
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 3
19072: PUSH
19073: LD_INT 2
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 2
19082: PUSH
19083: LD_INT 3
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 2
19092: NEG
19093: PUSH
19094: LD_INT 1
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 3
19103: NEG
19104: PUSH
19105: LD_INT 1
19107: NEG
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
19138: LD_ADDR_VAR 0 35
19142: PUSH
19143: LD_INT 0
19145: PUSH
19146: LD_INT 0
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 0
19155: PUSH
19156: LD_INT 1
19158: NEG
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 1
19166: PUSH
19167: LD_INT 0
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 1
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 0
19186: PUSH
19187: LD_INT 1
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 1
19196: NEG
19197: PUSH
19198: LD_INT 0
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: NEG
19208: PUSH
19209: LD_INT 1
19211: NEG
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 2
19219: PUSH
19220: LD_INT 1
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 2
19229: NEG
19230: PUSH
19231: LD_INT 1
19233: NEG
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
19250: LD_ADDR_VAR 0 36
19254: PUSH
19255: LD_INT 0
19257: PUSH
19258: LD_INT 0
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 0
19267: PUSH
19268: LD_INT 1
19270: NEG
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 1
19278: PUSH
19279: LD_INT 0
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 1
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 0
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 1
19308: NEG
19309: PUSH
19310: LD_INT 0
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 1
19319: NEG
19320: PUSH
19321: LD_INT 1
19323: NEG
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 1
19331: NEG
19332: PUSH
19333: LD_INT 2
19335: NEG
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 1
19343: PUSH
19344: LD_INT 2
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
19362: LD_ADDR_VAR 0 37
19366: PUSH
19367: LD_INT 0
19369: PUSH
19370: LD_INT 0
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 0
19379: PUSH
19380: LD_INT 1
19382: NEG
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 1
19390: PUSH
19391: LD_INT 0
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 1
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 0
19410: PUSH
19411: LD_INT 1
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 1
19420: NEG
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 1
19431: NEG
19432: PUSH
19433: LD_INT 1
19435: NEG
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 1
19443: PUSH
19444: LD_INT 1
19446: NEG
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 1
19454: NEG
19455: PUSH
19456: LD_INT 1
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
19474: LD_ADDR_VAR 0 38
19478: PUSH
19479: LD_INT 0
19481: PUSH
19482: LD_INT 0
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 0
19491: PUSH
19492: LD_INT 1
19494: NEG
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: LD_INT 0
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 1
19512: PUSH
19513: LD_INT 1
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 0
19522: PUSH
19523: LD_INT 1
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 1
19532: NEG
19533: PUSH
19534: LD_INT 0
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 1
19543: NEG
19544: PUSH
19545: LD_INT 1
19547: NEG
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 2
19555: PUSH
19556: LD_INT 1
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 2
19565: NEG
19566: PUSH
19567: LD_INT 1
19569: NEG
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
19586: LD_ADDR_VAR 0 39
19590: PUSH
19591: LD_INT 0
19593: PUSH
19594: LD_INT 0
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 0
19603: PUSH
19604: LD_INT 1
19606: NEG
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 1
19614: PUSH
19615: LD_INT 0
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 1
19624: PUSH
19625: LD_INT 1
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 0
19634: PUSH
19635: LD_INT 1
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 1
19644: NEG
19645: PUSH
19646: LD_INT 0
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 1
19655: NEG
19656: PUSH
19657: LD_INT 1
19659: NEG
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 1
19667: NEG
19668: PUSH
19669: LD_INT 2
19671: NEG
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 1
19679: PUSH
19680: LD_INT 2
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
19698: LD_ADDR_VAR 0 40
19702: PUSH
19703: LD_INT 0
19705: PUSH
19706: LD_INT 0
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 0
19715: PUSH
19716: LD_INT 1
19718: NEG
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 1
19726: PUSH
19727: LD_INT 0
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 1
19736: PUSH
19737: LD_INT 1
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 0
19746: PUSH
19747: LD_INT 1
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 1
19756: NEG
19757: PUSH
19758: LD_INT 0
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 1
19767: NEG
19768: PUSH
19769: LD_INT 1
19771: NEG
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: LD_INT 1
19782: NEG
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 1
19790: NEG
19791: PUSH
19792: LD_INT 1
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19810: LD_ADDR_VAR 0 41
19814: PUSH
19815: LD_INT 0
19817: PUSH
19818: LD_INT 0
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 0
19827: PUSH
19828: LD_INT 1
19830: NEG
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 1
19838: PUSH
19839: LD_INT 0
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 1
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: LD_INT 1
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 1
19868: NEG
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 1
19879: NEG
19880: PUSH
19881: LD_INT 1
19883: NEG
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 1
19891: NEG
19892: PUSH
19893: LD_INT 2
19895: NEG
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 1
19903: PUSH
19904: LD_INT 1
19906: NEG
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 2
19914: PUSH
19915: LD_INT 0
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 2
19924: PUSH
19925: LD_INT 1
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 2
19934: PUSH
19935: LD_INT 2
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 1
19944: PUSH
19945: LD_INT 2
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 1
19954: NEG
19955: PUSH
19956: LD_INT 1
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 2
19965: NEG
19966: PUSH
19967: LD_INT 0
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 2
19976: NEG
19977: PUSH
19978: LD_INT 1
19980: NEG
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: LD_INT 2
19988: NEG
19989: PUSH
19990: LD_INT 2
19992: NEG
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 2
20000: NEG
20001: PUSH
20002: LD_INT 3
20004: NEG
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 2
20012: PUSH
20013: LD_INT 1
20015: NEG
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 3
20023: PUSH
20024: LD_INT 0
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 3
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 3
20043: PUSH
20044: LD_INT 2
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 3
20053: PUSH
20054: LD_INT 3
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 2
20063: PUSH
20064: LD_INT 3
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 2
20073: NEG
20074: PUSH
20075: LD_INT 1
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 3
20084: NEG
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 3
20095: NEG
20096: PUSH
20097: LD_INT 1
20099: NEG
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 3
20107: NEG
20108: PUSH
20109: LD_INT 2
20111: NEG
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 3
20119: NEG
20120: PUSH
20121: LD_INT 3
20123: NEG
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20160: LD_ADDR_VAR 0 42
20164: PUSH
20165: LD_INT 0
20167: PUSH
20168: LD_INT 0
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 0
20177: PUSH
20178: LD_INT 1
20180: NEG
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: LD_INT 0
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 1
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 1
20218: NEG
20219: PUSH
20220: LD_INT 0
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: LD_INT 1
20233: NEG
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 1
20241: NEG
20242: PUSH
20243: LD_INT 2
20245: NEG
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: LD_INT 2
20256: NEG
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: PUSH
20265: LD_INT 1
20267: NEG
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 2
20275: PUSH
20276: LD_INT 1
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 2
20285: PUSH
20286: LD_INT 2
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 1
20295: PUSH
20296: LD_INT 2
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 0
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 1
20315: NEG
20316: PUSH
20317: LD_INT 1
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 2
20326: NEG
20327: PUSH
20328: LD_INT 1
20330: NEG
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 2
20338: NEG
20339: PUSH
20340: LD_INT 2
20342: NEG
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 2
20350: NEG
20351: PUSH
20352: LD_INT 3
20354: NEG
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 1
20362: NEG
20363: PUSH
20364: LD_INT 3
20366: NEG
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 0
20374: PUSH
20375: LD_INT 3
20377: NEG
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 1
20385: PUSH
20386: LD_INT 2
20388: NEG
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 3
20396: PUSH
20397: LD_INT 2
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 3
20406: PUSH
20407: LD_INT 3
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: LD_INT 3
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 1
20426: PUSH
20427: LD_INT 3
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 0
20436: PUSH
20437: LD_INT 3
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 1
20446: NEG
20447: PUSH
20448: LD_INT 2
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 3
20457: NEG
20458: PUSH
20459: LD_INT 2
20461: NEG
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 3
20469: NEG
20470: PUSH
20471: LD_INT 3
20473: NEG
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
20510: LD_ADDR_VAR 0 43
20514: PUSH
20515: LD_INT 0
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 0
20527: PUSH
20528: LD_INT 1
20530: NEG
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 1
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 0
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 1
20568: NEG
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 1
20579: NEG
20580: PUSH
20581: LD_INT 1
20583: NEG
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 1
20591: NEG
20592: PUSH
20593: LD_INT 2
20595: NEG
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 0
20603: PUSH
20604: LD_INT 2
20606: NEG
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 1
20614: PUSH
20615: LD_INT 1
20617: NEG
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 2
20625: PUSH
20626: LD_INT 0
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 2
20635: PUSH
20636: LD_INT 1
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 1
20645: PUSH
20646: LD_INT 2
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: LD_INT 2
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 1
20665: NEG
20666: PUSH
20667: LD_INT 1
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 2
20676: NEG
20677: PUSH
20678: LD_INT 0
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 2
20687: NEG
20688: PUSH
20689: LD_INT 1
20691: NEG
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 1
20699: NEG
20700: PUSH
20701: LD_INT 3
20703: NEG
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 0
20711: PUSH
20712: LD_INT 3
20714: NEG
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: LD_INT 2
20725: NEG
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 2
20733: PUSH
20734: LD_INT 1
20736: NEG
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 3
20744: PUSH
20745: LD_INT 0
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 3
20754: PUSH
20755: LD_INT 1
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 1
20764: PUSH
20765: LD_INT 3
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 0
20774: PUSH
20775: LD_INT 3
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 1
20784: NEG
20785: PUSH
20786: LD_INT 2
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 2
20795: NEG
20796: PUSH
20797: LD_INT 1
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 3
20806: NEG
20807: PUSH
20808: LD_INT 0
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 3
20817: NEG
20818: PUSH
20819: LD_INT 1
20821: NEG
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20858: LD_ADDR_VAR 0 44
20862: PUSH
20863: LD_INT 0
20865: PUSH
20866: LD_INT 0
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 0
20875: PUSH
20876: LD_INT 1
20878: NEG
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 1
20886: PUSH
20887: LD_INT 0
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 1
20896: PUSH
20897: LD_INT 1
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 0
20906: PUSH
20907: LD_INT 1
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 1
20916: NEG
20917: PUSH
20918: LD_INT 0
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 1
20927: NEG
20928: PUSH
20929: LD_INT 1
20931: NEG
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 1
20939: NEG
20940: PUSH
20941: LD_INT 2
20943: NEG
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 1
20951: PUSH
20952: LD_INT 1
20954: NEG
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 2
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 2
20972: PUSH
20973: LD_INT 1
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 2
20982: PUSH
20983: LD_INT 2
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: LD_INT 2
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 1
21002: NEG
21003: PUSH
21004: LD_INT 1
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 2
21013: NEG
21014: PUSH
21015: LD_INT 0
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 2
21024: NEG
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 2
21036: NEG
21037: PUSH
21038: LD_INT 2
21040: NEG
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 2
21048: NEG
21049: PUSH
21050: LD_INT 3
21052: NEG
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 2
21060: PUSH
21061: LD_INT 1
21063: NEG
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 3
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 3
21081: PUSH
21082: LD_INT 1
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 3
21091: PUSH
21092: LD_INT 2
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 3
21101: PUSH
21102: LD_INT 3
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 2
21111: PUSH
21112: LD_INT 3
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 2
21121: NEG
21122: PUSH
21123: LD_INT 1
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 3
21132: NEG
21133: PUSH
21134: LD_INT 0
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 3
21143: NEG
21144: PUSH
21145: LD_INT 1
21147: NEG
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 3
21155: NEG
21156: PUSH
21157: LD_INT 2
21159: NEG
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 3
21167: NEG
21168: PUSH
21169: LD_INT 3
21171: NEG
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21208: LD_ADDR_VAR 0 45
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: LD_INT 0
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 0
21225: PUSH
21226: LD_INT 1
21228: NEG
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 1
21236: PUSH
21237: LD_INT 0
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 1
21246: PUSH
21247: LD_INT 1
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 0
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 1
21266: NEG
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 1
21277: NEG
21278: PUSH
21279: LD_INT 1
21281: NEG
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 1
21289: NEG
21290: PUSH
21291: LD_INT 2
21293: NEG
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 0
21301: PUSH
21302: LD_INT 2
21304: NEG
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 1
21312: PUSH
21313: LD_INT 1
21315: NEG
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 2
21323: PUSH
21324: LD_INT 1
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 2
21333: PUSH
21334: LD_INT 2
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 1
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 0
21353: PUSH
21354: LD_INT 2
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 1
21363: NEG
21364: PUSH
21365: LD_INT 1
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 2
21374: NEG
21375: PUSH
21376: LD_INT 1
21378: NEG
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 2
21386: NEG
21387: PUSH
21388: LD_INT 2
21390: NEG
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 2
21398: NEG
21399: PUSH
21400: LD_INT 3
21402: NEG
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 1
21410: NEG
21411: PUSH
21412: LD_INT 3
21414: NEG
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 0
21422: PUSH
21423: LD_INT 3
21425: NEG
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: PUSH
21434: LD_INT 2
21436: NEG
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 3
21444: PUSH
21445: LD_INT 2
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 3
21454: PUSH
21455: LD_INT 3
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 2
21464: PUSH
21465: LD_INT 3
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 1
21474: PUSH
21475: LD_INT 3
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 0
21484: PUSH
21485: LD_INT 3
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 1
21494: NEG
21495: PUSH
21496: LD_INT 2
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 3
21505: NEG
21506: PUSH
21507: LD_INT 2
21509: NEG
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 3
21517: NEG
21518: PUSH
21519: LD_INT 3
21521: NEG
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21558: LD_ADDR_VAR 0 46
21562: PUSH
21563: LD_INT 0
21565: PUSH
21566: LD_INT 0
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 0
21575: PUSH
21576: LD_INT 1
21578: NEG
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 1
21586: PUSH
21587: LD_INT 0
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 1
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: LD_INT 1
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 1
21616: NEG
21617: PUSH
21618: LD_INT 0
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 1
21627: NEG
21628: PUSH
21629: LD_INT 1
21631: NEG
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 1
21639: NEG
21640: PUSH
21641: LD_INT 2
21643: NEG
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: LD_INT 2
21654: NEG
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: LD_INT 1
21665: NEG
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 2
21673: PUSH
21674: LD_INT 0
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: LD_INT 1
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 1
21693: PUSH
21694: LD_INT 2
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: LD_INT 2
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 1
21713: NEG
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 2
21724: NEG
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 2
21735: NEG
21736: PUSH
21737: LD_INT 1
21739: NEG
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 1
21747: NEG
21748: PUSH
21749: LD_INT 3
21751: NEG
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 0
21759: PUSH
21760: LD_INT 3
21762: NEG
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 1
21770: PUSH
21771: LD_INT 2
21773: NEG
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 2
21781: PUSH
21782: LD_INT 1
21784: NEG
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 3
21792: PUSH
21793: LD_INT 0
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 3
21802: PUSH
21803: LD_INT 1
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: LD_INT 3
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 0
21822: PUSH
21823: LD_INT 3
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 1
21832: NEG
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 2
21843: NEG
21844: PUSH
21845: LD_INT 1
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 3
21854: NEG
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 3
21865: NEG
21866: PUSH
21867: LD_INT 1
21869: NEG
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21906: LD_ADDR_VAR 0 47
21910: PUSH
21911: LD_INT 0
21913: PUSH
21914: LD_INT 0
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 0
21923: PUSH
21924: LD_INT 1
21926: NEG
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 1
21934: PUSH
21935: LD_INT 0
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 1
21944: PUSH
21945: LD_INT 1
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 0
21954: PUSH
21955: LD_INT 1
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 1
21964: NEG
21965: PUSH
21966: LD_INT 0
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 1
21975: NEG
21976: PUSH
21977: LD_INT 1
21979: NEG
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 1
21987: NEG
21988: PUSH
21989: LD_INT 2
21991: NEG
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 0
21999: PUSH
22000: LD_INT 2
22002: NEG
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 1
22010: PUSH
22011: LD_INT 1
22013: NEG
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 2
22021: NEG
22022: PUSH
22023: LD_INT 1
22025: NEG
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 2
22033: NEG
22034: PUSH
22035: LD_INT 2
22037: NEG
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
22057: LD_ADDR_VAR 0 48
22061: PUSH
22062: LD_INT 0
22064: PUSH
22065: LD_INT 0
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 0
22074: PUSH
22075: LD_INT 1
22077: NEG
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 1
22085: PUSH
22086: LD_INT 0
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: LD_INT 1
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: LD_INT 1
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: LD_INT 0
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 1
22126: NEG
22127: PUSH
22128: LD_INT 1
22130: NEG
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 1
22138: NEG
22139: PUSH
22140: LD_INT 2
22142: NEG
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 0
22150: PUSH
22151: LD_INT 2
22153: NEG
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 1
22161: PUSH
22162: LD_INT 1
22164: NEG
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 2
22172: PUSH
22173: LD_INT 0
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 2
22182: PUSH
22183: LD_INT 1
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
22204: LD_ADDR_VAR 0 49
22208: PUSH
22209: LD_INT 0
22211: PUSH
22212: LD_INT 0
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 0
22221: PUSH
22222: LD_INT 1
22224: NEG
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 1
22232: PUSH
22233: LD_INT 0
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 1
22242: PUSH
22243: LD_INT 1
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 0
22252: PUSH
22253: LD_INT 1
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 1
22262: NEG
22263: PUSH
22264: LD_INT 0
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 1
22273: NEG
22274: PUSH
22275: LD_INT 1
22277: NEG
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: LD_INT 1
22288: NEG
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 2
22296: PUSH
22297: LD_INT 0
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 2
22306: PUSH
22307: LD_INT 1
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 2
22316: PUSH
22317: LD_INT 2
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 1
22326: PUSH
22327: LD_INT 2
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
22348: LD_ADDR_VAR 0 50
22352: PUSH
22353: LD_INT 0
22355: PUSH
22356: LD_INT 0
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: LD_INT 1
22368: NEG
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: PUSH
22377: LD_INT 0
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 1
22386: PUSH
22387: LD_INT 1
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 0
22396: PUSH
22397: LD_INT 1
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 1
22406: NEG
22407: PUSH
22408: LD_INT 0
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 1
22417: NEG
22418: PUSH
22419: LD_INT 1
22421: NEG
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 2
22429: PUSH
22430: LD_INT 1
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 2
22439: PUSH
22440: LD_INT 2
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 1
22449: PUSH
22450: LD_INT 2
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 0
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 1
22469: NEG
22470: PUSH
22471: LD_INT 1
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
22492: LD_ADDR_VAR 0 51
22496: PUSH
22497: LD_INT 0
22499: PUSH
22500: LD_INT 0
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: LD_INT 1
22512: NEG
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: LD_INT 0
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 1
22530: PUSH
22531: LD_INT 1
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 0
22540: PUSH
22541: LD_INT 1
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 1
22550: NEG
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 1
22561: NEG
22562: PUSH
22563: LD_INT 1
22565: NEG
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: LD_INT 2
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 0
22583: PUSH
22584: LD_INT 2
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 1
22593: NEG
22594: PUSH
22595: LD_INT 1
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 2
22604: NEG
22605: PUSH
22606: LD_INT 0
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 2
22615: NEG
22616: PUSH
22617: LD_INT 1
22619: NEG
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22639: LD_ADDR_VAR 0 52
22643: PUSH
22644: LD_INT 0
22646: PUSH
22647: LD_INT 0
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: LD_INT 1
22659: NEG
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 1
22667: PUSH
22668: LD_INT 0
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: LD_INT 1
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: LD_INT 1
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 1
22697: NEG
22698: PUSH
22699: LD_INT 0
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 1
22708: NEG
22709: PUSH
22710: LD_INT 1
22712: NEG
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 1
22720: NEG
22721: PUSH
22722: LD_INT 2
22724: NEG
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 1
22732: NEG
22733: PUSH
22734: LD_INT 1
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 2
22743: NEG
22744: PUSH
22745: LD_INT 0
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 2
22754: NEG
22755: PUSH
22756: LD_INT 1
22758: NEG
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 2
22766: NEG
22767: PUSH
22768: LD_INT 2
22770: NEG
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22790: LD_ADDR_VAR 0 53
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: LD_INT 0
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 0
22807: PUSH
22808: LD_INT 1
22810: NEG
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 1
22818: PUSH
22819: LD_INT 0
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 1
22828: PUSH
22829: LD_INT 1
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 0
22838: PUSH
22839: LD_INT 1
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 1
22848: NEG
22849: PUSH
22850: LD_INT 0
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 1
22859: NEG
22860: PUSH
22861: LD_INT 1
22863: NEG
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 1
22871: NEG
22872: PUSH
22873: LD_INT 2
22875: NEG
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 0
22883: PUSH
22884: LD_INT 2
22886: NEG
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 1
22894: PUSH
22895: LD_INT 1
22897: NEG
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 2
22905: PUSH
22906: LD_INT 0
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 2
22915: PUSH
22916: LD_INT 1
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: LD_INT 2
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 1
22935: PUSH
22936: LD_INT 2
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 0
22945: PUSH
22946: LD_INT 2
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 1
22955: NEG
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 2
22966: NEG
22967: PUSH
22968: LD_INT 0
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 2
22977: NEG
22978: PUSH
22979: LD_INT 1
22981: NEG
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 2
22989: NEG
22990: PUSH
22991: LD_INT 2
22993: NEG
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23020: LD_ADDR_VAR 0 54
23024: PUSH
23025: LD_INT 0
23027: PUSH
23028: LD_INT 0
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 0
23037: PUSH
23038: LD_INT 1
23040: NEG
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 1
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 1
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 0
23068: PUSH
23069: LD_INT 1
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 1
23078: NEG
23079: PUSH
23080: LD_INT 0
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 1
23089: NEG
23090: PUSH
23091: LD_INT 1
23093: NEG
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 1
23101: NEG
23102: PUSH
23103: LD_INT 2
23105: NEG
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: LD_INT 2
23116: NEG
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 1
23124: PUSH
23125: LD_INT 1
23127: NEG
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 2
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 2
23145: PUSH
23146: LD_INT 1
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 2
23155: PUSH
23156: LD_INT 2
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 1
23165: PUSH
23166: LD_INT 2
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 0
23175: PUSH
23176: LD_INT 2
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 1
23185: NEG
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 2
23196: NEG
23197: PUSH
23198: LD_INT 0
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 2
23207: NEG
23208: PUSH
23209: LD_INT 1
23211: NEG
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 2
23219: NEG
23220: PUSH
23221: LD_INT 2
23223: NEG
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23250: LD_ADDR_VAR 0 55
23254: PUSH
23255: LD_INT 0
23257: PUSH
23258: LD_INT 0
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 0
23267: PUSH
23268: LD_INT 1
23270: NEG
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 1
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: LD_INT 1
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 0
23298: PUSH
23299: LD_INT 1
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 1
23308: NEG
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 1
23319: NEG
23320: PUSH
23321: LD_INT 1
23323: NEG
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 1
23331: NEG
23332: PUSH
23333: LD_INT 2
23335: NEG
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 0
23343: PUSH
23344: LD_INT 2
23346: NEG
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 1
23354: PUSH
23355: LD_INT 1
23357: NEG
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 2
23365: PUSH
23366: LD_INT 0
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 2
23375: PUSH
23376: LD_INT 1
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 2
23385: PUSH
23386: LD_INT 2
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: LD_INT 2
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 0
23405: PUSH
23406: LD_INT 2
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 1
23415: NEG
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 2
23426: NEG
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 2
23437: NEG
23438: PUSH
23439: LD_INT 1
23441: NEG
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 2
23449: NEG
23450: PUSH
23451: LD_INT 2
23453: NEG
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23480: LD_ADDR_VAR 0 56
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: LD_INT 0
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 0
23497: PUSH
23498: LD_INT 1
23500: NEG
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 1
23508: PUSH
23509: LD_INT 0
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 1
23518: PUSH
23519: LD_INT 1
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 0
23528: PUSH
23529: LD_INT 1
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 1
23538: NEG
23539: PUSH
23540: LD_INT 0
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 1
23549: NEG
23550: PUSH
23551: LD_INT 1
23553: NEG
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 1
23561: NEG
23562: PUSH
23563: LD_INT 2
23565: NEG
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: LD_INT 2
23576: NEG
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 1
23584: PUSH
23585: LD_INT 1
23587: NEG
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 2
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 2
23605: PUSH
23606: LD_INT 1
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 2
23615: PUSH
23616: LD_INT 2
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 1
23625: PUSH
23626: LD_INT 2
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 0
23635: PUSH
23636: LD_INT 2
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 1
23645: NEG
23646: PUSH
23647: LD_INT 1
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 2
23656: NEG
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 2
23667: NEG
23668: PUSH
23669: LD_INT 1
23671: NEG
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 2
23679: NEG
23680: PUSH
23681: LD_INT 2
23683: NEG
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23710: LD_ADDR_VAR 0 57
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: LD_INT 1
23730: NEG
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: LD_INT 0
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 1
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 0
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 1
23768: NEG
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 1
23779: NEG
23780: PUSH
23781: LD_INT 1
23783: NEG
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 1
23791: NEG
23792: PUSH
23793: LD_INT 2
23795: NEG
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 0
23803: PUSH
23804: LD_INT 2
23806: NEG
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: LD_INT 1
23817: NEG
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 2
23825: PUSH
23826: LD_INT 0
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 2
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: LD_INT 2
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: LD_INT 2
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 0
23865: PUSH
23866: LD_INT 2
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 1
23875: NEG
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 2
23886: NEG
23887: PUSH
23888: LD_INT 0
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 2
23897: NEG
23898: PUSH
23899: LD_INT 1
23901: NEG
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 2
23909: NEG
23910: PUSH
23911: LD_INT 2
23913: NEG
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23940: LD_ADDR_VAR 0 58
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: LD_INT 0
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 0
23957: PUSH
23958: LD_INT 1
23960: NEG
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: PUSH
23969: LD_INT 0
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: LD_INT 1
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: LD_INT 1
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: LD_INT 0
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 1
24009: NEG
24010: PUSH
24011: LD_INT 1
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: NEG
24022: PUSH
24023: LD_INT 2
24025: NEG
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: LD_INT 2
24036: NEG
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: LD_INT 1
24047: NEG
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 2
24065: PUSH
24066: LD_INT 1
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 2
24075: PUSH
24076: LD_INT 2
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 1
24085: PUSH
24086: LD_INT 2
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 0
24095: PUSH
24096: LD_INT 2
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 1
24105: NEG
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 2
24116: NEG
24117: PUSH
24118: LD_INT 0
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 2
24127: NEG
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 2
24139: NEG
24140: PUSH
24141: LD_INT 2
24143: NEG
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24170: LD_ADDR_VAR 0 59
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: LD_INT 0
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: LD_INT 1
24190: NEG
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: LD_INT 0
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 0
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 1
24228: NEG
24229: PUSH
24230: LD_INT 0
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 1
24239: NEG
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24258: LD_ADDR_VAR 0 60
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: LD_INT 0
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: LD_INT 1
24278: NEG
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 1
24296: PUSH
24297: LD_INT 1
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 0
24306: PUSH
24307: LD_INT 1
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 1
24316: NEG
24317: PUSH
24318: LD_INT 0
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 1
24327: NEG
24328: PUSH
24329: LD_INT 1
24331: NEG
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24346: LD_ADDR_VAR 0 61
24350: PUSH
24351: LD_INT 0
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 0
24363: PUSH
24364: LD_INT 1
24366: NEG
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 1
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 0
24394: PUSH
24395: LD_INT 1
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 1
24404: NEG
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 1
24415: NEG
24416: PUSH
24417: LD_INT 1
24419: NEG
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24434: LD_ADDR_VAR 0 62
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: LD_INT 0
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 0
24451: PUSH
24452: LD_INT 1
24454: NEG
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 1
24462: PUSH
24463: LD_INT 0
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 1
24472: PUSH
24473: LD_INT 1
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 0
24482: PUSH
24483: LD_INT 1
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 1
24492: NEG
24493: PUSH
24494: LD_INT 0
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 1
24503: NEG
24504: PUSH
24505: LD_INT 1
24507: NEG
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24522: LD_ADDR_VAR 0 63
24526: PUSH
24527: LD_INT 0
24529: PUSH
24530: LD_INT 0
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 1
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 1
24580: NEG
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: NEG
24592: PUSH
24593: LD_INT 1
24595: NEG
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24610: LD_ADDR_VAR 0 64
24614: PUSH
24615: LD_INT 0
24617: PUSH
24618: LD_INT 0
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 0
24627: PUSH
24628: LD_INT 1
24630: NEG
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: LD_INT 0
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 1
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 0
24658: PUSH
24659: LD_INT 1
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 1
24668: NEG
24669: PUSH
24670: LD_INT 0
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 1
24679: NEG
24680: PUSH
24681: LD_INT 1
24683: NEG
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: ST_TO_ADDR
// end ; 1 :
24698: GO 30595
24700: LD_INT 1
24702: DOUBLE
24703: EQUAL
24704: IFTRUE 24708
24706: GO 27331
24708: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24709: LD_ADDR_VAR 0 11
24713: PUSH
24714: LD_INT 1
24716: NEG
24717: PUSH
24718: LD_INT 3
24720: NEG
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 0
24728: PUSH
24729: LD_INT 3
24731: NEG
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 1
24739: PUSH
24740: LD_INT 2
24742: NEG
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: LIST
24752: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24753: LD_ADDR_VAR 0 12
24757: PUSH
24758: LD_INT 2
24760: PUSH
24761: LD_INT 1
24763: NEG
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 3
24771: PUSH
24772: LD_INT 0
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 3
24781: PUSH
24782: LD_INT 1
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: LIST
24793: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24794: LD_ADDR_VAR 0 13
24798: PUSH
24799: LD_INT 3
24801: PUSH
24802: LD_INT 2
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 3
24811: PUSH
24812: LD_INT 3
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 2
24821: PUSH
24822: LD_INT 3
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: LIST
24833: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24834: LD_ADDR_VAR 0 14
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: LD_INT 3
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 0
24851: PUSH
24852: LD_INT 3
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 1
24861: NEG
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: LIST
24874: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24875: LD_ADDR_VAR 0 15
24879: PUSH
24880: LD_INT 2
24882: NEG
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 3
24893: NEG
24894: PUSH
24895: LD_INT 0
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 3
24904: NEG
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: LIST
24918: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24919: LD_ADDR_VAR 0 16
24923: PUSH
24924: LD_INT 2
24926: NEG
24927: PUSH
24928: LD_INT 3
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 3
24938: NEG
24939: PUSH
24940: LD_INT 2
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 3
24950: NEG
24951: PUSH
24952: LD_INT 3
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: LIST
24964: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24965: LD_ADDR_VAR 0 17
24969: PUSH
24970: LD_INT 1
24972: NEG
24973: PUSH
24974: LD_INT 3
24976: NEG
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: LD_INT 3
24987: NEG
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 1
24995: PUSH
24996: LD_INT 2
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: LIST
25008: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25009: LD_ADDR_VAR 0 18
25013: PUSH
25014: LD_INT 2
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 3
25027: PUSH
25028: LD_INT 0
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 3
25037: PUSH
25038: LD_INT 1
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: LIST
25049: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25050: LD_ADDR_VAR 0 19
25054: PUSH
25055: LD_INT 3
25057: PUSH
25058: LD_INT 2
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 3
25067: PUSH
25068: LD_INT 3
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 2
25077: PUSH
25078: LD_INT 3
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: LIST
25089: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25090: LD_ADDR_VAR 0 20
25094: PUSH
25095: LD_INT 1
25097: PUSH
25098: LD_INT 3
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 0
25107: PUSH
25108: LD_INT 3
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 1
25117: NEG
25118: PUSH
25119: LD_INT 2
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: LIST
25130: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25131: LD_ADDR_VAR 0 21
25135: PUSH
25136: LD_INT 2
25138: NEG
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 3
25149: NEG
25150: PUSH
25151: LD_INT 0
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 3
25160: NEG
25161: PUSH
25162: LD_INT 1
25164: NEG
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: LIST
25174: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25175: LD_ADDR_VAR 0 22
25179: PUSH
25180: LD_INT 2
25182: NEG
25183: PUSH
25184: LD_INT 3
25186: NEG
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 3
25194: NEG
25195: PUSH
25196: LD_INT 2
25198: NEG
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 3
25206: NEG
25207: PUSH
25208: LD_INT 3
25210: NEG
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: LIST
25220: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
25221: LD_ADDR_VAR 0 23
25225: PUSH
25226: LD_INT 0
25228: PUSH
25229: LD_INT 3
25231: NEG
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 1
25239: NEG
25240: PUSH
25241: LD_INT 4
25243: NEG
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: LD_INT 3
25254: NEG
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: LIST
25264: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
25265: LD_ADDR_VAR 0 24
25269: PUSH
25270: LD_INT 3
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 3
25282: PUSH
25283: LD_INT 1
25285: NEG
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 4
25293: PUSH
25294: LD_INT 1
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: LIST
25305: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
25306: LD_ADDR_VAR 0 25
25310: PUSH
25311: LD_INT 3
25313: PUSH
25314: LD_INT 3
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 4
25323: PUSH
25324: LD_INT 3
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 3
25333: PUSH
25334: LD_INT 4
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: LIST
25345: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
25346: LD_ADDR_VAR 0 26
25350: PUSH
25351: LD_INT 0
25353: PUSH
25354: LD_INT 3
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: LD_INT 4
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 1
25373: NEG
25374: PUSH
25375: LD_INT 3
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: LIST
25386: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
25387: LD_ADDR_VAR 0 27
25391: PUSH
25392: LD_INT 3
25394: NEG
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 3
25405: NEG
25406: PUSH
25407: LD_INT 1
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 4
25416: NEG
25417: PUSH
25418: LD_INT 1
25420: NEG
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: LIST
25430: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
25431: LD_ADDR_VAR 0 28
25435: PUSH
25436: LD_INT 3
25438: NEG
25439: PUSH
25440: LD_INT 3
25442: NEG
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 3
25450: NEG
25451: PUSH
25452: LD_INT 4
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 4
25462: NEG
25463: PUSH
25464: LD_INT 3
25466: NEG
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: LIST
25476: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
25477: LD_ADDR_VAR 0 29
25481: PUSH
25482: LD_INT 1
25484: NEG
25485: PUSH
25486: LD_INT 3
25488: NEG
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 0
25496: PUSH
25497: LD_INT 3
25499: NEG
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 1
25507: PUSH
25508: LD_INT 2
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 1
25518: NEG
25519: PUSH
25520: LD_INT 4
25522: NEG
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 0
25530: PUSH
25531: LD_INT 4
25533: NEG
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 1
25541: PUSH
25542: LD_INT 3
25544: NEG
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 1
25552: NEG
25553: PUSH
25554: LD_INT 5
25556: NEG
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 0
25564: PUSH
25565: LD_INT 5
25567: NEG
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: LD_INT 4
25578: NEG
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: NEG
25587: PUSH
25588: LD_INT 6
25590: NEG
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 0
25598: PUSH
25599: LD_INT 6
25601: NEG
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 1
25609: PUSH
25610: LD_INT 5
25612: NEG
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
25632: LD_ADDR_VAR 0 30
25636: PUSH
25637: LD_INT 2
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 3
25650: PUSH
25651: LD_INT 0
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 3
25660: PUSH
25661: LD_INT 1
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 3
25670: PUSH
25671: LD_INT 1
25673: NEG
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 4
25681: PUSH
25682: LD_INT 0
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 4
25691: PUSH
25692: LD_INT 1
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 4
25701: PUSH
25702: LD_INT 1
25704: NEG
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 5
25712: PUSH
25713: LD_INT 0
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 5
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 5
25732: PUSH
25733: LD_INT 1
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 6
25743: PUSH
25744: LD_INT 0
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 6
25753: PUSH
25754: LD_INT 1
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
25775: LD_ADDR_VAR 0 31
25779: PUSH
25780: LD_INT 3
25782: PUSH
25783: LD_INT 2
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 3
25792: PUSH
25793: LD_INT 3
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 2
25802: PUSH
25803: LD_INT 3
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 4
25812: PUSH
25813: LD_INT 3
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 4
25822: PUSH
25823: LD_INT 4
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 3
25832: PUSH
25833: LD_INT 4
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 5
25842: PUSH
25843: LD_INT 4
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 5
25852: PUSH
25853: LD_INT 5
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 4
25862: PUSH
25863: LD_INT 5
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 6
25872: PUSH
25873: LD_INT 5
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 6
25882: PUSH
25883: LD_INT 6
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 5
25892: PUSH
25893: LD_INT 6
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
25914: LD_ADDR_VAR 0 32
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: LD_INT 3
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: LD_INT 3
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: NEG
25942: PUSH
25943: LD_INT 2
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: PUSH
25953: LD_INT 4
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 0
25962: PUSH
25963: LD_INT 4
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 1
25972: NEG
25973: PUSH
25974: LD_INT 3
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: LD_INT 5
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 0
25993: PUSH
25994: LD_INT 5
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 1
26003: NEG
26004: PUSH
26005: LD_INT 4
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 1
26014: PUSH
26015: LD_INT 6
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 0
26024: PUSH
26025: LD_INT 6
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 1
26034: NEG
26035: PUSH
26036: LD_INT 5
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
26057: LD_ADDR_VAR 0 33
26061: PUSH
26062: LD_INT 2
26064: NEG
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 3
26075: NEG
26076: PUSH
26077: LD_INT 0
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 3
26086: NEG
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 3
26098: NEG
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 4
26109: NEG
26110: PUSH
26111: LD_INT 0
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 4
26120: NEG
26121: PUSH
26122: LD_INT 1
26124: NEG
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 4
26132: NEG
26133: PUSH
26134: LD_INT 1
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 5
26143: NEG
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 5
26154: NEG
26155: PUSH
26156: LD_INT 1
26158: NEG
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 5
26166: NEG
26167: PUSH
26168: LD_INT 1
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 6
26177: NEG
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 6
26188: NEG
26189: PUSH
26190: LD_INT 1
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
26212: LD_ADDR_VAR 0 34
26216: PUSH
26217: LD_INT 2
26219: NEG
26220: PUSH
26221: LD_INT 3
26223: NEG
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 3
26231: NEG
26232: PUSH
26233: LD_INT 2
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 3
26243: NEG
26244: PUSH
26245: LD_INT 3
26247: NEG
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 3
26255: NEG
26256: PUSH
26257: LD_INT 4
26259: NEG
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 4
26267: NEG
26268: PUSH
26269: LD_INT 3
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 4
26279: NEG
26280: PUSH
26281: LD_INT 4
26283: NEG
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 4
26291: NEG
26292: PUSH
26293: LD_INT 5
26295: NEG
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 5
26303: NEG
26304: PUSH
26305: LD_INT 4
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 5
26315: NEG
26316: PUSH
26317: LD_INT 5
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 5
26327: NEG
26328: PUSH
26329: LD_INT 6
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 6
26339: NEG
26340: PUSH
26341: LD_INT 5
26343: NEG
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 6
26351: NEG
26352: PUSH
26353: LD_INT 6
26355: NEG
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
26375: LD_ADDR_VAR 0 41
26379: PUSH
26380: LD_INT 0
26382: PUSH
26383: LD_INT 2
26385: NEG
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: LD_INT 3
26397: NEG
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: LD_INT 2
26408: NEG
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: LIST
26418: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
26419: LD_ADDR_VAR 0 42
26423: PUSH
26424: LD_INT 2
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 2
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 3
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: LIST
26459: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
26460: LD_ADDR_VAR 0 43
26464: PUSH
26465: LD_INT 2
26467: PUSH
26468: LD_INT 2
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 3
26477: PUSH
26478: LD_INT 2
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: LD_INT 3
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: LIST
26499: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
26500: LD_ADDR_VAR 0 44
26504: PUSH
26505: LD_INT 0
26507: PUSH
26508: LD_INT 2
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: LD_INT 3
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 1
26527: NEG
26528: PUSH
26529: LD_INT 2
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: LIST
26540: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26541: LD_ADDR_VAR 0 45
26545: PUSH
26546: LD_INT 2
26548: NEG
26549: PUSH
26550: LD_INT 0
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 2
26559: NEG
26560: PUSH
26561: LD_INT 1
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 3
26570: NEG
26571: PUSH
26572: LD_INT 1
26574: NEG
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: LIST
26584: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
26585: LD_ADDR_VAR 0 46
26589: PUSH
26590: LD_INT 2
26592: NEG
26593: PUSH
26594: LD_INT 2
26596: NEG
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 2
26604: NEG
26605: PUSH
26606: LD_INT 3
26608: NEG
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 3
26616: NEG
26617: PUSH
26618: LD_INT 2
26620: NEG
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: LIST
26630: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
26631: LD_ADDR_VAR 0 47
26635: PUSH
26636: LD_INT 2
26638: NEG
26639: PUSH
26640: LD_INT 3
26642: NEG
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 1
26650: NEG
26651: PUSH
26652: LD_INT 3
26654: NEG
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26664: LD_ADDR_VAR 0 48
26668: PUSH
26669: LD_INT 1
26671: PUSH
26672: LD_INT 2
26674: NEG
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 2
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
26695: LD_ADDR_VAR 0 49
26699: PUSH
26700: LD_INT 3
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 3
26712: PUSH
26713: LD_INT 2
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
26724: LD_ADDR_VAR 0 50
26728: PUSH
26729: LD_INT 2
26731: PUSH
26732: LD_INT 3
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: LD_INT 3
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26753: LD_ADDR_VAR 0 51
26757: PUSH
26758: LD_INT 1
26760: NEG
26761: PUSH
26762: LD_INT 2
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 2
26771: NEG
26772: PUSH
26773: LD_INT 1
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26784: LD_ADDR_VAR 0 52
26788: PUSH
26789: LD_INT 3
26791: NEG
26792: PUSH
26793: LD_INT 1
26795: NEG
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 3
26803: NEG
26804: PUSH
26805: LD_INT 2
26807: NEG
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26817: LD_ADDR_VAR 0 53
26821: PUSH
26822: LD_INT 1
26824: NEG
26825: PUSH
26826: LD_INT 3
26828: NEG
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: LD_INT 3
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: LD_INT 2
26850: NEG
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: LIST
26860: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26861: LD_ADDR_VAR 0 54
26865: PUSH
26866: LD_INT 2
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 3
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 3
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: LIST
26901: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26902: LD_ADDR_VAR 0 55
26906: PUSH
26907: LD_INT 3
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 3
26919: PUSH
26920: LD_INT 3
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 2
26929: PUSH
26930: LD_INT 3
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: LIST
26941: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26942: LD_ADDR_VAR 0 56
26946: PUSH
26947: LD_INT 1
26949: PUSH
26950: LD_INT 3
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 0
26959: PUSH
26960: LD_INT 3
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 1
26969: NEG
26970: PUSH
26971: LD_INT 2
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: LIST
26982: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26983: LD_ADDR_VAR 0 57
26987: PUSH
26988: LD_INT 2
26990: NEG
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 3
27001: NEG
27002: PUSH
27003: LD_INT 0
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 3
27012: NEG
27013: PUSH
27014: LD_INT 1
27016: NEG
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: LIST
27026: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27027: LD_ADDR_VAR 0 58
27031: PUSH
27032: LD_INT 2
27034: NEG
27035: PUSH
27036: LD_INT 3
27038: NEG
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 3
27046: NEG
27047: PUSH
27048: LD_INT 2
27050: NEG
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 3
27058: NEG
27059: PUSH
27060: LD_INT 3
27062: NEG
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: LIST
27072: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
27073: LD_ADDR_VAR 0 59
27077: PUSH
27078: LD_INT 1
27080: NEG
27081: PUSH
27082: LD_INT 2
27084: NEG
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 0
27092: PUSH
27093: LD_INT 2
27095: NEG
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: LIST
27116: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27117: LD_ADDR_VAR 0 60
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: LD_INT 1
27127: NEG
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 2
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 2
27145: PUSH
27146: LD_INT 1
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: LIST
27157: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27158: LD_ADDR_VAR 0 61
27162: PUSH
27163: LD_INT 2
27165: PUSH
27166: LD_INT 1
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 2
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 1
27185: PUSH
27186: LD_INT 2
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: LIST
27197: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27198: LD_ADDR_VAR 0 62
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: LD_INT 2
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 0
27215: PUSH
27216: LD_INT 2
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: LIST
27238: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27239: LD_ADDR_VAR 0 63
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 2
27257: NEG
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 2
27268: NEG
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: LIST
27282: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27283: LD_ADDR_VAR 0 64
27287: PUSH
27288: LD_INT 1
27290: NEG
27291: PUSH
27292: LD_INT 2
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 2
27302: NEG
27303: PUSH
27304: LD_INT 1
27306: NEG
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 2
27314: NEG
27315: PUSH
27316: LD_INT 2
27318: NEG
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: LIST
27328: ST_TO_ADDR
// end ; 2 :
27329: GO 30595
27331: LD_INT 2
27333: DOUBLE
27334: EQUAL
27335: IFTRUE 27339
27337: GO 30594
27339: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
27340: LD_ADDR_VAR 0 29
27344: PUSH
27345: LD_INT 4
27347: PUSH
27348: LD_INT 0
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 4
27357: PUSH
27358: LD_INT 1
27360: NEG
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 5
27368: PUSH
27369: LD_INT 0
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 5
27378: PUSH
27379: LD_INT 1
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 4
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 3
27398: PUSH
27399: LD_INT 0
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 3
27408: PUSH
27409: LD_INT 1
27411: NEG
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 3
27419: PUSH
27420: LD_INT 2
27422: NEG
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 5
27430: PUSH
27431: LD_INT 2
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 3
27440: PUSH
27441: LD_INT 3
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 3
27450: PUSH
27451: LD_INT 2
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 4
27460: PUSH
27461: LD_INT 3
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 4
27470: PUSH
27471: LD_INT 4
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 3
27480: PUSH
27481: LD_INT 4
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: LD_INT 3
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 2
27500: PUSH
27501: LD_INT 2
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 4
27510: PUSH
27511: LD_INT 2
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 2
27520: PUSH
27521: LD_INT 4
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: LD_INT 4
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: LD_INT 3
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: LD_INT 4
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 1
27560: PUSH
27561: LD_INT 5
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: LD_INT 5
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: NEG
27581: PUSH
27582: LD_INT 4
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 1
27591: NEG
27592: PUSH
27593: LD_INT 3
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 2
27602: PUSH
27603: LD_INT 5
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 2
27612: NEG
27613: PUSH
27614: LD_INT 3
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 3
27623: NEG
27624: PUSH
27625: LD_INT 0
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 3
27634: NEG
27635: PUSH
27636: LD_INT 1
27638: NEG
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 2
27646: NEG
27647: PUSH
27648: LD_INT 0
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 2
27657: NEG
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 3
27668: NEG
27669: PUSH
27670: LD_INT 1
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 4
27679: NEG
27680: PUSH
27681: LD_INT 0
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 4
27690: NEG
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 4
27702: NEG
27703: PUSH
27704: LD_INT 2
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 2
27714: NEG
27715: PUSH
27716: LD_INT 2
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 4
27725: NEG
27726: PUSH
27727: LD_INT 4
27729: NEG
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 4
27737: NEG
27738: PUSH
27739: LD_INT 5
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 3
27749: NEG
27750: PUSH
27751: LD_INT 4
27753: NEG
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 3
27761: NEG
27762: PUSH
27763: LD_INT 3
27765: NEG
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 4
27773: NEG
27774: PUSH
27775: LD_INT 3
27777: NEG
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 5
27785: NEG
27786: PUSH
27787: LD_INT 4
27789: NEG
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 5
27797: NEG
27798: PUSH
27799: LD_INT 5
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 3
27809: NEG
27810: PUSH
27811: LD_INT 5
27813: NEG
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 5
27821: NEG
27822: PUSH
27823: LD_INT 3
27825: NEG
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
27878: LD_ADDR_VAR 0 30
27882: PUSH
27883: LD_INT 4
27885: PUSH
27886: LD_INT 4
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 4
27895: PUSH
27896: LD_INT 3
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 5
27905: PUSH
27906: LD_INT 4
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 5
27915: PUSH
27916: LD_INT 5
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 4
27925: PUSH
27926: LD_INT 5
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 3
27935: PUSH
27936: LD_INT 4
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 3
27945: PUSH
27946: LD_INT 3
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 5
27955: PUSH
27956: LD_INT 3
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 3
27965: PUSH
27966: LD_INT 5
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 0
27975: PUSH
27976: LD_INT 3
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: LD_INT 2
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 1
27995: PUSH
27996: LD_INT 3
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 1
28005: PUSH
28006: LD_INT 4
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 0
28015: PUSH
28016: LD_INT 4
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 1
28025: NEG
28026: PUSH
28027: LD_INT 3
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 1
28036: NEG
28037: PUSH
28038: LD_INT 2
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 2
28047: PUSH
28048: LD_INT 4
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 2
28057: NEG
28058: PUSH
28059: LD_INT 2
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 4
28068: NEG
28069: PUSH
28070: LD_INT 0
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 4
28079: NEG
28080: PUSH
28081: LD_INT 1
28083: NEG
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 3
28091: NEG
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 3
28102: NEG
28103: PUSH
28104: LD_INT 1
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 4
28113: NEG
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 5
28124: NEG
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 5
28135: NEG
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 5
28147: NEG
28148: PUSH
28149: LD_INT 2
28151: NEG
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 3
28159: NEG
28160: PUSH
28161: LD_INT 2
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 3
28170: NEG
28171: PUSH
28172: LD_INT 3
28174: NEG
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 3
28182: NEG
28183: PUSH
28184: LD_INT 4
28186: NEG
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 2
28194: NEG
28195: PUSH
28196: LD_INT 3
28198: NEG
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 2
28206: NEG
28207: PUSH
28208: LD_INT 2
28210: NEG
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 3
28218: NEG
28219: PUSH
28220: LD_INT 2
28222: NEG
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 4
28230: NEG
28231: PUSH
28232: LD_INT 3
28234: NEG
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 4
28242: NEG
28243: PUSH
28244: LD_INT 4
28246: NEG
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 2
28254: NEG
28255: PUSH
28256: LD_INT 4
28258: NEG
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 4
28266: NEG
28267: PUSH
28268: LD_INT 2
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: LD_INT 4
28281: NEG
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: LD_INT 5
28292: NEG
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 1
28300: PUSH
28301: LD_INT 4
28303: NEG
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 1
28311: PUSH
28312: LD_INT 3
28314: NEG
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: LD_INT 3
28325: NEG
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: NEG
28334: PUSH
28335: LD_INT 4
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: LD_INT 5
28349: NEG
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 2
28357: PUSH
28358: LD_INT 3
28360: NEG
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 2
28368: NEG
28369: PUSH
28370: LD_INT 5
28372: NEG
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
28425: LD_ADDR_VAR 0 31
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: LD_INT 4
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 0
28442: PUSH
28443: LD_INT 3
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: LD_INT 4
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 1
28462: PUSH
28463: LD_INT 5
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 0
28472: PUSH
28473: LD_INT 5
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 1
28482: NEG
28483: PUSH
28484: LD_INT 4
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 1
28493: NEG
28494: PUSH
28495: LD_INT 3
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 2
28504: PUSH
28505: LD_INT 5
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 2
28514: NEG
28515: PUSH
28516: LD_INT 3
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 3
28525: NEG
28526: PUSH
28527: LD_INT 0
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 3
28536: NEG
28537: PUSH
28538: LD_INT 1
28540: NEG
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 2
28548: NEG
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 2
28559: NEG
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 3
28570: NEG
28571: PUSH
28572: LD_INT 1
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 4
28581: NEG
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 4
28592: NEG
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 4
28604: NEG
28605: PUSH
28606: LD_INT 2
28608: NEG
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 2
28616: NEG
28617: PUSH
28618: LD_INT 2
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 4
28627: NEG
28628: PUSH
28629: LD_INT 4
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 4
28639: NEG
28640: PUSH
28641: LD_INT 5
28643: NEG
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 3
28651: NEG
28652: PUSH
28653: LD_INT 4
28655: NEG
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 3
28663: NEG
28664: PUSH
28665: LD_INT 3
28667: NEG
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 4
28675: NEG
28676: PUSH
28677: LD_INT 3
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 5
28687: NEG
28688: PUSH
28689: LD_INT 4
28691: NEG
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 5
28699: NEG
28700: PUSH
28701: LD_INT 5
28703: NEG
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 3
28711: NEG
28712: PUSH
28713: LD_INT 5
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 5
28723: NEG
28724: PUSH
28725: LD_INT 3
28727: NEG
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: LD_INT 3
28738: NEG
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 0
28746: PUSH
28747: LD_INT 4
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 1
28757: PUSH
28758: LD_INT 3
28760: NEG
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: LD_INT 2
28771: NEG
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 0
28779: PUSH
28780: LD_INT 2
28782: NEG
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 1
28790: NEG
28791: PUSH
28792: LD_INT 3
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 1
28802: NEG
28803: PUSH
28804: LD_INT 4
28806: NEG
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 2
28814: PUSH
28815: LD_INT 2
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 2
28825: NEG
28826: PUSH
28827: LD_INT 4
28829: NEG
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 4
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 4
28847: PUSH
28848: LD_INT 1
28850: NEG
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 5
28858: PUSH
28859: LD_INT 0
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 5
28868: PUSH
28869: LD_INT 1
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 4
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 3
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 3
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 3
28909: PUSH
28910: LD_INT 2
28912: NEG
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 5
28920: PUSH
28921: LD_INT 2
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
28975: LD_ADDR_VAR 0 32
28979: PUSH
28980: LD_INT 4
28982: NEG
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 4
28993: NEG
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 3
29005: NEG
29006: PUSH
29007: LD_INT 0
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 3
29016: NEG
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 4
29027: NEG
29028: PUSH
29029: LD_INT 1
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 5
29038: NEG
29039: PUSH
29040: LD_INT 0
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 5
29049: NEG
29050: PUSH
29051: LD_INT 1
29053: NEG
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 5
29061: NEG
29062: PUSH
29063: LD_INT 2
29065: NEG
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 3
29073: NEG
29074: PUSH
29075: LD_INT 2
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 3
29084: NEG
29085: PUSH
29086: LD_INT 3
29088: NEG
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 3
29096: NEG
29097: PUSH
29098: LD_INT 4
29100: NEG
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 2
29108: NEG
29109: PUSH
29110: LD_INT 3
29112: NEG
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 2
29120: NEG
29121: PUSH
29122: LD_INT 2
29124: NEG
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 3
29132: NEG
29133: PUSH
29134: LD_INT 2
29136: NEG
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 4
29144: NEG
29145: PUSH
29146: LD_INT 3
29148: NEG
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 4
29156: NEG
29157: PUSH
29158: LD_INT 4
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 2
29168: NEG
29169: PUSH
29170: LD_INT 4
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 4
29180: NEG
29181: PUSH
29182: LD_INT 2
29184: NEG
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: LD_INT 4
29195: NEG
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 0
29203: PUSH
29204: LD_INT 5
29206: NEG
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: LD_INT 4
29217: NEG
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 1
29225: PUSH
29226: LD_INT 3
29228: NEG
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: LD_INT 3
29239: NEG
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 1
29247: NEG
29248: PUSH
29249: LD_INT 4
29251: NEG
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: NEG
29260: PUSH
29261: LD_INT 5
29263: NEG
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 2
29271: PUSH
29272: LD_INT 3
29274: NEG
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 2
29282: NEG
29283: PUSH
29284: LD_INT 5
29286: NEG
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 3
29294: PUSH
29295: LD_INT 0
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: LD_INT 1
29307: NEG
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 4
29315: PUSH
29316: LD_INT 0
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 4
29325: PUSH
29326: LD_INT 1
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 3
29335: PUSH
29336: LD_INT 1
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 2
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 2
29355: PUSH
29356: LD_INT 1
29358: NEG
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 2
29366: PUSH
29367: LD_INT 2
29369: NEG
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 4
29377: PUSH
29378: LD_INT 2
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 4
29387: PUSH
29388: LD_INT 4
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 4
29397: PUSH
29398: LD_INT 3
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 5
29407: PUSH
29408: LD_INT 4
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 5
29417: PUSH
29418: LD_INT 5
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 4
29427: PUSH
29428: LD_INT 5
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 3
29437: PUSH
29438: LD_INT 4
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 3
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 5
29457: PUSH
29458: LD_INT 3
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 3
29467: PUSH
29468: LD_INT 5
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
29522: LD_ADDR_VAR 0 33
29526: PUSH
29527: LD_INT 4
29529: NEG
29530: PUSH
29531: LD_INT 4
29533: NEG
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 4
29541: NEG
29542: PUSH
29543: LD_INT 5
29545: NEG
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 3
29553: NEG
29554: PUSH
29555: LD_INT 4
29557: NEG
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 3
29565: NEG
29566: PUSH
29567: LD_INT 3
29569: NEG
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 4
29577: NEG
29578: PUSH
29579: LD_INT 3
29581: NEG
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 5
29589: NEG
29590: PUSH
29591: LD_INT 4
29593: NEG
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 5
29601: NEG
29602: PUSH
29603: LD_INT 5
29605: NEG
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 3
29613: NEG
29614: PUSH
29615: LD_INT 5
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 5
29625: NEG
29626: PUSH
29627: LD_INT 3
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 0
29637: PUSH
29638: LD_INT 3
29640: NEG
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: LD_INT 4
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: LD_INT 3
29662: NEG
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 1
29670: PUSH
29671: LD_INT 2
29673: NEG
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 0
29681: PUSH
29682: LD_INT 2
29684: NEG
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 1
29692: NEG
29693: PUSH
29694: LD_INT 3
29696: NEG
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 1
29704: NEG
29705: PUSH
29706: LD_INT 4
29708: NEG
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 2
29716: PUSH
29717: LD_INT 2
29719: NEG
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 2
29727: NEG
29728: PUSH
29729: LD_INT 4
29731: NEG
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 4
29739: PUSH
29740: LD_INT 0
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 4
29749: PUSH
29750: LD_INT 1
29752: NEG
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 5
29760: PUSH
29761: LD_INT 0
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 5
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 4
29780: PUSH
29781: LD_INT 1
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 3
29790: PUSH
29791: LD_INT 0
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 3
29800: PUSH
29801: LD_INT 1
29803: NEG
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 3
29811: PUSH
29812: LD_INT 2
29814: NEG
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 5
29822: PUSH
29823: LD_INT 2
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 3
29832: PUSH
29833: LD_INT 3
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 3
29842: PUSH
29843: LD_INT 2
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 4
29852: PUSH
29853: LD_INT 3
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 4
29862: PUSH
29863: LD_INT 4
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 3
29872: PUSH
29873: LD_INT 4
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 2
29882: PUSH
29883: LD_INT 3
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 2
29892: PUSH
29893: LD_INT 2
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 4
29902: PUSH
29903: LD_INT 2
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 2
29912: PUSH
29913: LD_INT 4
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: LD_INT 4
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 0
29932: PUSH
29933: LD_INT 3
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 1
29942: PUSH
29943: LD_INT 4
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: LD_INT 5
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: LD_INT 5
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: NEG
29973: PUSH
29974: LD_INT 4
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: NEG
29984: PUSH
29985: LD_INT 3
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 2
29994: PUSH
29995: LD_INT 5
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 2
30004: NEG
30005: PUSH
30006: LD_INT 3
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
30060: LD_ADDR_VAR 0 34
30064: PUSH
30065: LD_INT 0
30067: PUSH
30068: LD_INT 4
30070: NEG
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: LD_INT 5
30081: NEG
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: LD_INT 4
30092: NEG
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 1
30100: PUSH
30101: LD_INT 3
30103: NEG
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 0
30111: PUSH
30112: LD_INT 3
30114: NEG
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 1
30122: NEG
30123: PUSH
30124: LD_INT 4
30126: NEG
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 1
30134: NEG
30135: PUSH
30136: LD_INT 5
30138: NEG
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 2
30146: PUSH
30147: LD_INT 3
30149: NEG
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 2
30157: NEG
30158: PUSH
30159: LD_INT 5
30161: NEG
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 3
30169: PUSH
30170: LD_INT 0
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 3
30179: PUSH
30180: LD_INT 1
30182: NEG
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 4
30190: PUSH
30191: LD_INT 0
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 4
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 3
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 2
30220: PUSH
30221: LD_INT 0
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 2
30230: PUSH
30231: LD_INT 1
30233: NEG
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 2
30241: PUSH
30242: LD_INT 2
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 4
30252: PUSH
30253: LD_INT 2
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 4
30262: PUSH
30263: LD_INT 4
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 4
30272: PUSH
30273: LD_INT 3
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 5
30282: PUSH
30283: LD_INT 4
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 5
30292: PUSH
30293: LD_INT 5
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 4
30302: PUSH
30303: LD_INT 5
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 3
30312: PUSH
30313: LD_INT 4
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 3
30322: PUSH
30323: LD_INT 3
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 5
30332: PUSH
30333: LD_INT 3
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 3
30342: PUSH
30343: LD_INT 5
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 0
30352: PUSH
30353: LD_INT 3
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: LD_INT 2
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 1
30372: PUSH
30373: LD_INT 3
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: LD_INT 4
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: LD_INT 4
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 1
30402: NEG
30403: PUSH
30404: LD_INT 3
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: LD_INT 2
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 2
30424: PUSH
30425: LD_INT 4
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 2
30434: NEG
30435: PUSH
30436: LD_INT 2
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 4
30445: NEG
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 4
30456: NEG
30457: PUSH
30458: LD_INT 1
30460: NEG
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 3
30468: NEG
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 3
30479: NEG
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 4
30490: NEG
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 5
30501: NEG
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 5
30512: NEG
30513: PUSH
30514: LD_INT 1
30516: NEG
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 5
30524: NEG
30525: PUSH
30526: LD_INT 2
30528: NEG
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 3
30536: NEG
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: ST_TO_ADDR
// end ; end ;
30592: GO 30595
30594: POP
// case btype of b_depot , b_warehouse :
30595: LD_VAR 0 1
30599: PUSH
30600: LD_INT 0
30602: DOUBLE
30603: EQUAL
30604: IFTRUE 30614
30606: LD_INT 1
30608: DOUBLE
30609: EQUAL
30610: IFTRUE 30614
30612: GO 30815
30614: POP
// case nation of nation_american :
30615: LD_VAR 0 5
30619: PUSH
30620: LD_INT 1
30622: DOUBLE
30623: EQUAL
30624: IFTRUE 30628
30626: GO 30684
30628: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
30629: LD_ADDR_VAR 0 9
30633: PUSH
30634: LD_VAR 0 11
30638: PUSH
30639: LD_VAR 0 12
30643: PUSH
30644: LD_VAR 0 13
30648: PUSH
30649: LD_VAR 0 14
30653: PUSH
30654: LD_VAR 0 15
30658: PUSH
30659: LD_VAR 0 16
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: PUSH
30672: LD_VAR 0 4
30676: PUSH
30677: LD_INT 1
30679: PLUS
30680: ARRAY
30681: ST_TO_ADDR
30682: GO 30813
30684: LD_INT 2
30686: DOUBLE
30687: EQUAL
30688: IFTRUE 30692
30690: GO 30748
30692: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
30693: LD_ADDR_VAR 0 9
30697: PUSH
30698: LD_VAR 0 17
30702: PUSH
30703: LD_VAR 0 18
30707: PUSH
30708: LD_VAR 0 19
30712: PUSH
30713: LD_VAR 0 20
30717: PUSH
30718: LD_VAR 0 21
30722: PUSH
30723: LD_VAR 0 22
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: PUSH
30736: LD_VAR 0 4
30740: PUSH
30741: LD_INT 1
30743: PLUS
30744: ARRAY
30745: ST_TO_ADDR
30746: GO 30813
30748: LD_INT 3
30750: DOUBLE
30751: EQUAL
30752: IFTRUE 30756
30754: GO 30812
30756: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
30757: LD_ADDR_VAR 0 9
30761: PUSH
30762: LD_VAR 0 23
30766: PUSH
30767: LD_VAR 0 24
30771: PUSH
30772: LD_VAR 0 25
30776: PUSH
30777: LD_VAR 0 26
30781: PUSH
30782: LD_VAR 0 27
30786: PUSH
30787: LD_VAR 0 28
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: PUSH
30800: LD_VAR 0 4
30804: PUSH
30805: LD_INT 1
30807: PLUS
30808: ARRAY
30809: ST_TO_ADDR
30810: GO 30813
30812: POP
30813: GO 31362
30815: LD_INT 2
30817: DOUBLE
30818: EQUAL
30819: IFTRUE 30829
30821: LD_INT 3
30823: DOUBLE
30824: EQUAL
30825: IFTRUE 30829
30827: GO 30885
30829: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
30830: LD_ADDR_VAR 0 9
30834: PUSH
30835: LD_VAR 0 29
30839: PUSH
30840: LD_VAR 0 30
30844: PUSH
30845: LD_VAR 0 31
30849: PUSH
30850: LD_VAR 0 32
30854: PUSH
30855: LD_VAR 0 33
30859: PUSH
30860: LD_VAR 0 34
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: PUSH
30873: LD_VAR 0 4
30877: PUSH
30878: LD_INT 1
30880: PLUS
30881: ARRAY
30882: ST_TO_ADDR
30883: GO 31362
30885: LD_INT 16
30887: DOUBLE
30888: EQUAL
30889: IFTRUE 30941
30891: LD_INT 17
30893: DOUBLE
30894: EQUAL
30895: IFTRUE 30941
30897: LD_INT 18
30899: DOUBLE
30900: EQUAL
30901: IFTRUE 30941
30903: LD_INT 19
30905: DOUBLE
30906: EQUAL
30907: IFTRUE 30941
30909: LD_INT 20
30911: DOUBLE
30912: EQUAL
30913: IFTRUE 30941
30915: LD_INT 21
30917: DOUBLE
30918: EQUAL
30919: IFTRUE 30941
30921: LD_INT 23
30923: DOUBLE
30924: EQUAL
30925: IFTRUE 30941
30927: LD_INT 24
30929: DOUBLE
30930: EQUAL
30931: IFTRUE 30941
30933: LD_INT 25
30935: DOUBLE
30936: EQUAL
30937: IFTRUE 30941
30939: GO 30997
30941: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
30942: LD_ADDR_VAR 0 9
30946: PUSH
30947: LD_VAR 0 35
30951: PUSH
30952: LD_VAR 0 36
30956: PUSH
30957: LD_VAR 0 37
30961: PUSH
30962: LD_VAR 0 38
30966: PUSH
30967: LD_VAR 0 39
30971: PUSH
30972: LD_VAR 0 40
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: PUSH
30985: LD_VAR 0 4
30989: PUSH
30990: LD_INT 1
30992: PLUS
30993: ARRAY
30994: ST_TO_ADDR
30995: GO 31362
30997: LD_INT 6
30999: DOUBLE
31000: EQUAL
31001: IFTRUE 31053
31003: LD_INT 7
31005: DOUBLE
31006: EQUAL
31007: IFTRUE 31053
31009: LD_INT 8
31011: DOUBLE
31012: EQUAL
31013: IFTRUE 31053
31015: LD_INT 13
31017: DOUBLE
31018: EQUAL
31019: IFTRUE 31053
31021: LD_INT 12
31023: DOUBLE
31024: EQUAL
31025: IFTRUE 31053
31027: LD_INT 15
31029: DOUBLE
31030: EQUAL
31031: IFTRUE 31053
31033: LD_INT 11
31035: DOUBLE
31036: EQUAL
31037: IFTRUE 31053
31039: LD_INT 14
31041: DOUBLE
31042: EQUAL
31043: IFTRUE 31053
31045: LD_INT 10
31047: DOUBLE
31048: EQUAL
31049: IFTRUE 31053
31051: GO 31109
31053: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
31054: LD_ADDR_VAR 0 9
31058: PUSH
31059: LD_VAR 0 41
31063: PUSH
31064: LD_VAR 0 42
31068: PUSH
31069: LD_VAR 0 43
31073: PUSH
31074: LD_VAR 0 44
31078: PUSH
31079: LD_VAR 0 45
31083: PUSH
31084: LD_VAR 0 46
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: PUSH
31097: LD_VAR 0 4
31101: PUSH
31102: LD_INT 1
31104: PLUS
31105: ARRAY
31106: ST_TO_ADDR
31107: GO 31362
31109: LD_INT 36
31111: DOUBLE
31112: EQUAL
31113: IFTRUE 31117
31115: GO 31173
31117: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
31118: LD_ADDR_VAR 0 9
31122: PUSH
31123: LD_VAR 0 47
31127: PUSH
31128: LD_VAR 0 48
31132: PUSH
31133: LD_VAR 0 49
31137: PUSH
31138: LD_VAR 0 50
31142: PUSH
31143: LD_VAR 0 51
31147: PUSH
31148: LD_VAR 0 52
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: PUSH
31161: LD_VAR 0 4
31165: PUSH
31166: LD_INT 1
31168: PLUS
31169: ARRAY
31170: ST_TO_ADDR
31171: GO 31362
31173: LD_INT 4
31175: DOUBLE
31176: EQUAL
31177: IFTRUE 31199
31179: LD_INT 5
31181: DOUBLE
31182: EQUAL
31183: IFTRUE 31199
31185: LD_INT 34
31187: DOUBLE
31188: EQUAL
31189: IFTRUE 31199
31191: LD_INT 37
31193: DOUBLE
31194: EQUAL
31195: IFTRUE 31199
31197: GO 31255
31199: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
31200: LD_ADDR_VAR 0 9
31204: PUSH
31205: LD_VAR 0 53
31209: PUSH
31210: LD_VAR 0 54
31214: PUSH
31215: LD_VAR 0 55
31219: PUSH
31220: LD_VAR 0 56
31224: PUSH
31225: LD_VAR 0 57
31229: PUSH
31230: LD_VAR 0 58
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: PUSH
31243: LD_VAR 0 4
31247: PUSH
31248: LD_INT 1
31250: PLUS
31251: ARRAY
31252: ST_TO_ADDR
31253: GO 31362
31255: LD_INT 31
31257: DOUBLE
31258: EQUAL
31259: IFTRUE 31305
31261: LD_INT 32
31263: DOUBLE
31264: EQUAL
31265: IFTRUE 31305
31267: LD_INT 33
31269: DOUBLE
31270: EQUAL
31271: IFTRUE 31305
31273: LD_INT 27
31275: DOUBLE
31276: EQUAL
31277: IFTRUE 31305
31279: LD_INT 26
31281: DOUBLE
31282: EQUAL
31283: IFTRUE 31305
31285: LD_INT 28
31287: DOUBLE
31288: EQUAL
31289: IFTRUE 31305
31291: LD_INT 29
31293: DOUBLE
31294: EQUAL
31295: IFTRUE 31305
31297: LD_INT 30
31299: DOUBLE
31300: EQUAL
31301: IFTRUE 31305
31303: GO 31361
31305: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
31306: LD_ADDR_VAR 0 9
31310: PUSH
31311: LD_VAR 0 59
31315: PUSH
31316: LD_VAR 0 60
31320: PUSH
31321: LD_VAR 0 61
31325: PUSH
31326: LD_VAR 0 62
31330: PUSH
31331: LD_VAR 0 63
31335: PUSH
31336: LD_VAR 0 64
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: PUSH
31349: LD_VAR 0 4
31353: PUSH
31354: LD_INT 1
31356: PLUS
31357: ARRAY
31358: ST_TO_ADDR
31359: GO 31362
31361: POP
// temp_list2 = [ ] ;
31362: LD_ADDR_VAR 0 10
31366: PUSH
31367: EMPTY
31368: ST_TO_ADDR
// for i in temp_list do
31369: LD_ADDR_VAR 0 8
31373: PUSH
31374: LD_VAR 0 9
31378: PUSH
31379: FOR_IN
31380: IFFALSE 31432
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
31382: LD_ADDR_VAR 0 10
31386: PUSH
31387: LD_VAR 0 10
31391: PUSH
31392: LD_VAR 0 8
31396: PUSH
31397: LD_INT 1
31399: ARRAY
31400: PUSH
31401: LD_VAR 0 2
31405: PLUS
31406: PUSH
31407: LD_VAR 0 8
31411: PUSH
31412: LD_INT 2
31414: ARRAY
31415: PUSH
31416: LD_VAR 0 3
31420: PLUS
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: EMPTY
31427: LIST
31428: ADD
31429: ST_TO_ADDR
31430: GO 31379
31432: POP
31433: POP
// result = temp_list2 ;
31434: LD_ADDR_VAR 0 7
31438: PUSH
31439: LD_VAR 0 10
31443: ST_TO_ADDR
// end ;
31444: LD_VAR 0 7
31448: RET
// export function EnemyInRange ( unit , dist ) ; begin
31449: LD_INT 0
31451: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
31452: LD_ADDR_VAR 0 3
31456: PUSH
31457: LD_VAR 0 1
31461: PPUSH
31462: CALL_OW 255
31466: PPUSH
31467: LD_VAR 0 1
31471: PPUSH
31472: CALL_OW 250
31476: PPUSH
31477: LD_VAR 0 1
31481: PPUSH
31482: CALL_OW 251
31486: PPUSH
31487: LD_VAR 0 2
31491: PPUSH
31492: CALL 6772 0 4
31496: PUSH
31497: LD_INT 4
31499: ARRAY
31500: ST_TO_ADDR
// end ;
31501: LD_VAR 0 3
31505: RET
// export function PlayerSeeMe ( unit ) ; begin
31506: LD_INT 0
31508: PPUSH
// result := See ( your_side , unit ) ;
31509: LD_ADDR_VAR 0 2
31513: PUSH
31514: LD_OWVAR 2
31518: PPUSH
31519: LD_VAR 0 1
31523: PPUSH
31524: CALL_OW 292
31528: ST_TO_ADDR
// end ;
31529: LD_VAR 0 2
31533: RET
// export function ReverseDir ( unit ) ; begin
31534: LD_INT 0
31536: PPUSH
// if not unit then
31537: LD_VAR 0 1
31541: NOT
31542: IFFALSE 31546
// exit ;
31544: GO 31592
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
31546: LD_ADDR_VAR 0 2
31550: PUSH
31551: LD_INT 3
31553: PUSH
31554: LD_INT 4
31556: PUSH
31557: LD_INT 5
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: LD_INT 2
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: PUSH
31577: LD_VAR 0 1
31581: PPUSH
31582: CALL_OW 254
31586: PUSH
31587: LD_INT 1
31589: PLUS
31590: ARRAY
31591: ST_TO_ADDR
// end ;
31592: LD_VAR 0 2
31596: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
31597: LD_INT 0
31599: PPUSH
31600: PPUSH
31601: PPUSH
31602: PPUSH
31603: PPUSH
// if not hexes then
31604: LD_VAR 0 2
31608: NOT
31609: IFFALSE 31613
// exit ;
31611: GO 31761
// dist := 9999 ;
31613: LD_ADDR_VAR 0 5
31617: PUSH
31618: LD_INT 9999
31620: ST_TO_ADDR
// for i = 1 to hexes do
31621: LD_ADDR_VAR 0 4
31625: PUSH
31626: DOUBLE
31627: LD_INT 1
31629: DEC
31630: ST_TO_ADDR
31631: LD_VAR 0 2
31635: PUSH
31636: FOR_TO
31637: IFFALSE 31749
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
31639: LD_VAR 0 1
31643: PPUSH
31644: LD_VAR 0 2
31648: PUSH
31649: LD_VAR 0 4
31653: ARRAY
31654: PUSH
31655: LD_INT 1
31657: ARRAY
31658: PPUSH
31659: LD_VAR 0 2
31663: PUSH
31664: LD_VAR 0 4
31668: ARRAY
31669: PUSH
31670: LD_INT 2
31672: ARRAY
31673: PPUSH
31674: CALL_OW 297
31678: PUSH
31679: LD_VAR 0 5
31683: LESS
31684: IFFALSE 31747
// begin hex := hexes [ i ] ;
31686: LD_ADDR_VAR 0 7
31690: PUSH
31691: LD_VAR 0 2
31695: PUSH
31696: LD_VAR 0 4
31700: ARRAY
31701: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31702: LD_ADDR_VAR 0 5
31706: PUSH
31707: LD_VAR 0 1
31711: PPUSH
31712: LD_VAR 0 2
31716: PUSH
31717: LD_VAR 0 4
31721: ARRAY
31722: PUSH
31723: LD_INT 1
31725: ARRAY
31726: PPUSH
31727: LD_VAR 0 2
31731: PUSH
31732: LD_VAR 0 4
31736: ARRAY
31737: PUSH
31738: LD_INT 2
31740: ARRAY
31741: PPUSH
31742: CALL_OW 297
31746: ST_TO_ADDR
// end ; end ;
31747: GO 31636
31749: POP
31750: POP
// result := hex ;
31751: LD_ADDR_VAR 0 3
31755: PUSH
31756: LD_VAR 0 7
31760: ST_TO_ADDR
// end ;
31761: LD_VAR 0 3
31765: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
31766: LD_INT 0
31768: PPUSH
31769: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
31770: LD_VAR 0 1
31774: NOT
31775: PUSH
31776: LD_VAR 0 1
31780: PUSH
31781: LD_INT 21
31783: PUSH
31784: LD_INT 2
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 23
31793: PUSH
31794: LD_INT 2
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PPUSH
31805: CALL_OW 69
31809: IN
31810: NOT
31811: OR
31812: IFFALSE 31816
// exit ;
31814: GO 31863
// for i = 1 to 3 do
31816: LD_ADDR_VAR 0 3
31820: PUSH
31821: DOUBLE
31822: LD_INT 1
31824: DEC
31825: ST_TO_ADDR
31826: LD_INT 3
31828: PUSH
31829: FOR_TO
31830: IFFALSE 31861
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
31832: LD_VAR 0 1
31836: PPUSH
31837: CALL_OW 250
31841: PPUSH
31842: LD_VAR 0 1
31846: PPUSH
31847: CALL_OW 251
31851: PPUSH
31852: LD_INT 1
31854: PPUSH
31855: CALL_OW 453
31859: GO 31829
31861: POP
31862: POP
// end ;
31863: LD_VAR 0 2
31867: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
31868: LD_INT 0
31870: PPUSH
31871: PPUSH
31872: PPUSH
31873: PPUSH
31874: PPUSH
31875: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
31876: LD_VAR 0 1
31880: NOT
31881: PUSH
31882: LD_VAR 0 2
31886: NOT
31887: OR
31888: PUSH
31889: LD_VAR 0 1
31893: PPUSH
31894: CALL_OW 314
31898: OR
31899: IFFALSE 31903
// exit ;
31901: GO 32344
// x := GetX ( enemy_unit ) ;
31903: LD_ADDR_VAR 0 7
31907: PUSH
31908: LD_VAR 0 2
31912: PPUSH
31913: CALL_OW 250
31917: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
31918: LD_ADDR_VAR 0 8
31922: PUSH
31923: LD_VAR 0 2
31927: PPUSH
31928: CALL_OW 251
31932: ST_TO_ADDR
// if not x or not y then
31933: LD_VAR 0 7
31937: NOT
31938: PUSH
31939: LD_VAR 0 8
31943: NOT
31944: OR
31945: IFFALSE 31949
// exit ;
31947: GO 32344
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
31949: LD_ADDR_VAR 0 6
31953: PUSH
31954: LD_VAR 0 7
31958: PPUSH
31959: LD_INT 0
31961: PPUSH
31962: LD_INT 4
31964: PPUSH
31965: CALL_OW 272
31969: PUSH
31970: LD_VAR 0 8
31974: PPUSH
31975: LD_INT 0
31977: PPUSH
31978: LD_INT 4
31980: PPUSH
31981: CALL_OW 273
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_VAR 0 7
31994: PPUSH
31995: LD_INT 1
31997: PPUSH
31998: LD_INT 4
32000: PPUSH
32001: CALL_OW 272
32005: PUSH
32006: LD_VAR 0 8
32010: PPUSH
32011: LD_INT 1
32013: PPUSH
32014: LD_INT 4
32016: PPUSH
32017: CALL_OW 273
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_VAR 0 7
32030: PPUSH
32031: LD_INT 2
32033: PPUSH
32034: LD_INT 4
32036: PPUSH
32037: CALL_OW 272
32041: PUSH
32042: LD_VAR 0 8
32046: PPUSH
32047: LD_INT 2
32049: PPUSH
32050: LD_INT 4
32052: PPUSH
32053: CALL_OW 273
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_VAR 0 7
32066: PPUSH
32067: LD_INT 3
32069: PPUSH
32070: LD_INT 4
32072: PPUSH
32073: CALL_OW 272
32077: PUSH
32078: LD_VAR 0 8
32082: PPUSH
32083: LD_INT 3
32085: PPUSH
32086: LD_INT 4
32088: PPUSH
32089: CALL_OW 273
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_VAR 0 7
32102: PPUSH
32103: LD_INT 4
32105: PPUSH
32106: LD_INT 4
32108: PPUSH
32109: CALL_OW 272
32113: PUSH
32114: LD_VAR 0 8
32118: PPUSH
32119: LD_INT 4
32121: PPUSH
32122: LD_INT 4
32124: PPUSH
32125: CALL_OW 273
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_VAR 0 7
32138: PPUSH
32139: LD_INT 5
32141: PPUSH
32142: LD_INT 4
32144: PPUSH
32145: CALL_OW 272
32149: PUSH
32150: LD_VAR 0 8
32154: PPUSH
32155: LD_INT 5
32157: PPUSH
32158: LD_INT 4
32160: PPUSH
32161: CALL_OW 273
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: ST_TO_ADDR
// for i = tmp downto 1 do
32178: LD_ADDR_VAR 0 4
32182: PUSH
32183: DOUBLE
32184: LD_VAR 0 6
32188: INC
32189: ST_TO_ADDR
32190: LD_INT 1
32192: PUSH
32193: FOR_DOWNTO
32194: IFFALSE 32295
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
32196: LD_VAR 0 6
32200: PUSH
32201: LD_VAR 0 4
32205: ARRAY
32206: PUSH
32207: LD_INT 1
32209: ARRAY
32210: PPUSH
32211: LD_VAR 0 6
32215: PUSH
32216: LD_VAR 0 4
32220: ARRAY
32221: PUSH
32222: LD_INT 2
32224: ARRAY
32225: PPUSH
32226: CALL_OW 488
32230: NOT
32231: PUSH
32232: LD_VAR 0 6
32236: PUSH
32237: LD_VAR 0 4
32241: ARRAY
32242: PUSH
32243: LD_INT 1
32245: ARRAY
32246: PPUSH
32247: LD_VAR 0 6
32251: PUSH
32252: LD_VAR 0 4
32256: ARRAY
32257: PUSH
32258: LD_INT 2
32260: ARRAY
32261: PPUSH
32262: CALL_OW 428
32266: PUSH
32267: LD_INT 0
32269: NONEQUAL
32270: OR
32271: IFFALSE 32293
// tmp := Delete ( tmp , i ) ;
32273: LD_ADDR_VAR 0 6
32277: PUSH
32278: LD_VAR 0 6
32282: PPUSH
32283: LD_VAR 0 4
32287: PPUSH
32288: CALL_OW 3
32292: ST_TO_ADDR
32293: GO 32193
32295: POP
32296: POP
// j := GetClosestHex ( unit , tmp ) ;
32297: LD_ADDR_VAR 0 5
32301: PUSH
32302: LD_VAR 0 1
32306: PPUSH
32307: LD_VAR 0 6
32311: PPUSH
32312: CALL 31597 0 2
32316: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
32317: LD_VAR 0 1
32321: PPUSH
32322: LD_VAR 0 5
32326: PUSH
32327: LD_INT 1
32329: ARRAY
32330: PPUSH
32331: LD_VAR 0 5
32335: PUSH
32336: LD_INT 2
32338: ARRAY
32339: PPUSH
32340: CALL_OW 111
// end ;
32344: LD_VAR 0 3
32348: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
32349: LD_INT 0
32351: PPUSH
32352: PPUSH
32353: PPUSH
// uc_side = 0 ;
32354: LD_ADDR_OWVAR 20
32358: PUSH
32359: LD_INT 0
32361: ST_TO_ADDR
// uc_nation = 0 ;
32362: LD_ADDR_OWVAR 21
32366: PUSH
32367: LD_INT 0
32369: ST_TO_ADDR
// InitHc ;
32370: CALL_OW 19
// InitVc ;
32374: CALL_OW 20
// if mastodonts then
32378: LD_VAR 0 6
32382: IFFALSE 32449
// for i = 1 to mastodonts do
32384: LD_ADDR_VAR 0 11
32388: PUSH
32389: DOUBLE
32390: LD_INT 1
32392: DEC
32393: ST_TO_ADDR
32394: LD_VAR 0 6
32398: PUSH
32399: FOR_TO
32400: IFFALSE 32447
// begin vc_chassis := 31 ;
32402: LD_ADDR_OWVAR 37
32406: PUSH
32407: LD_INT 31
32409: ST_TO_ADDR
// vc_control := control_rider ;
32410: LD_ADDR_OWVAR 38
32414: PUSH
32415: LD_INT 4
32417: ST_TO_ADDR
// animal := CreateVehicle ;
32418: LD_ADDR_VAR 0 12
32422: PUSH
32423: CALL_OW 45
32427: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
32428: LD_VAR 0 12
32432: PPUSH
32433: LD_VAR 0 8
32437: PPUSH
32438: LD_INT 0
32440: PPUSH
32441: CALL_OW 49
// end ;
32445: GO 32399
32447: POP
32448: POP
// if horses then
32449: LD_VAR 0 5
32453: IFFALSE 32520
// for i = 1 to horses do
32455: LD_ADDR_VAR 0 11
32459: PUSH
32460: DOUBLE
32461: LD_INT 1
32463: DEC
32464: ST_TO_ADDR
32465: LD_VAR 0 5
32469: PUSH
32470: FOR_TO
32471: IFFALSE 32518
// begin hc_class := 21 ;
32473: LD_ADDR_OWVAR 28
32477: PUSH
32478: LD_INT 21
32480: ST_TO_ADDR
// hc_gallery :=  ;
32481: LD_ADDR_OWVAR 33
32485: PUSH
32486: LD_STRING 
32488: ST_TO_ADDR
// animal := CreateHuman ;
32489: LD_ADDR_VAR 0 12
32493: PUSH
32494: CALL_OW 44
32498: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
32499: LD_VAR 0 12
32503: PPUSH
32504: LD_VAR 0 8
32508: PPUSH
32509: LD_INT 0
32511: PPUSH
32512: CALL_OW 49
// end ;
32516: GO 32470
32518: POP
32519: POP
// if birds then
32520: LD_VAR 0 1
32524: IFFALSE 32591
// for i = 1 to birds do
32526: LD_ADDR_VAR 0 11
32530: PUSH
32531: DOUBLE
32532: LD_INT 1
32534: DEC
32535: ST_TO_ADDR
32536: LD_VAR 0 1
32540: PUSH
32541: FOR_TO
32542: IFFALSE 32589
// begin hc_class = 18 ;
32544: LD_ADDR_OWVAR 28
32548: PUSH
32549: LD_INT 18
32551: ST_TO_ADDR
// hc_gallery =  ;
32552: LD_ADDR_OWVAR 33
32556: PUSH
32557: LD_STRING 
32559: ST_TO_ADDR
// animal := CreateHuman ;
32560: LD_ADDR_VAR 0 12
32564: PUSH
32565: CALL_OW 44
32569: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
32570: LD_VAR 0 12
32574: PPUSH
32575: LD_VAR 0 8
32579: PPUSH
32580: LD_INT 0
32582: PPUSH
32583: CALL_OW 49
// end ;
32587: GO 32541
32589: POP
32590: POP
// if tigers then
32591: LD_VAR 0 2
32595: IFFALSE 32679
// for i = 1 to tigers do
32597: LD_ADDR_VAR 0 11
32601: PUSH
32602: DOUBLE
32603: LD_INT 1
32605: DEC
32606: ST_TO_ADDR
32607: LD_VAR 0 2
32611: PUSH
32612: FOR_TO
32613: IFFALSE 32677
// begin hc_class = class_tiger ;
32615: LD_ADDR_OWVAR 28
32619: PUSH
32620: LD_INT 14
32622: ST_TO_ADDR
// hc_gallery =  ;
32623: LD_ADDR_OWVAR 33
32627: PUSH
32628: LD_STRING 
32630: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
32631: LD_ADDR_OWVAR 35
32635: PUSH
32636: LD_INT 7
32638: NEG
32639: PPUSH
32640: LD_INT 7
32642: PPUSH
32643: CALL_OW 12
32647: ST_TO_ADDR
// animal := CreateHuman ;
32648: LD_ADDR_VAR 0 12
32652: PUSH
32653: CALL_OW 44
32657: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
32658: LD_VAR 0 12
32662: PPUSH
32663: LD_VAR 0 8
32667: PPUSH
32668: LD_INT 0
32670: PPUSH
32671: CALL_OW 49
// end ;
32675: GO 32612
32677: POP
32678: POP
// if apemans then
32679: LD_VAR 0 3
32683: IFFALSE 32806
// for i = 1 to apemans do
32685: LD_ADDR_VAR 0 11
32689: PUSH
32690: DOUBLE
32691: LD_INT 1
32693: DEC
32694: ST_TO_ADDR
32695: LD_VAR 0 3
32699: PUSH
32700: FOR_TO
32701: IFFALSE 32804
// begin hc_class = class_apeman ;
32703: LD_ADDR_OWVAR 28
32707: PUSH
32708: LD_INT 12
32710: ST_TO_ADDR
// hc_gallery =  ;
32711: LD_ADDR_OWVAR 33
32715: PUSH
32716: LD_STRING 
32718: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
32719: LD_ADDR_OWVAR 35
32723: PUSH
32724: LD_INT 5
32726: NEG
32727: PPUSH
32728: LD_INT 5
32730: PPUSH
32731: CALL_OW 12
32735: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
32736: LD_ADDR_OWVAR 31
32740: PUSH
32741: LD_INT 1
32743: PPUSH
32744: LD_INT 3
32746: PPUSH
32747: CALL_OW 12
32751: PUSH
32752: LD_INT 1
32754: PPUSH
32755: LD_INT 3
32757: PPUSH
32758: CALL_OW 12
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: LD_INT 0
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: ST_TO_ADDR
// animal := CreateHuman ;
32775: LD_ADDR_VAR 0 12
32779: PUSH
32780: CALL_OW 44
32784: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
32785: LD_VAR 0 12
32789: PPUSH
32790: LD_VAR 0 8
32794: PPUSH
32795: LD_INT 0
32797: PPUSH
32798: CALL_OW 49
// end ;
32802: GO 32700
32804: POP
32805: POP
// if enchidnas then
32806: LD_VAR 0 4
32810: IFFALSE 32877
// for i = 1 to enchidnas do
32812: LD_ADDR_VAR 0 11
32816: PUSH
32817: DOUBLE
32818: LD_INT 1
32820: DEC
32821: ST_TO_ADDR
32822: LD_VAR 0 4
32826: PUSH
32827: FOR_TO
32828: IFFALSE 32875
// begin hc_class = 13 ;
32830: LD_ADDR_OWVAR 28
32834: PUSH
32835: LD_INT 13
32837: ST_TO_ADDR
// hc_gallery =  ;
32838: LD_ADDR_OWVAR 33
32842: PUSH
32843: LD_STRING 
32845: ST_TO_ADDR
// animal := CreateHuman ;
32846: LD_ADDR_VAR 0 12
32850: PUSH
32851: CALL_OW 44
32855: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
32856: LD_VAR 0 12
32860: PPUSH
32861: LD_VAR 0 8
32865: PPUSH
32866: LD_INT 0
32868: PPUSH
32869: CALL_OW 49
// end ;
32873: GO 32827
32875: POP
32876: POP
// if not wat_area then
32877: LD_VAR 0 9
32881: NOT
32882: IFFALSE 32886
// exit ;
32884: GO 32957
// if fishes then
32886: LD_VAR 0 7
32890: IFFALSE 32957
// for i = 1 to fishes do
32892: LD_ADDR_VAR 0 11
32896: PUSH
32897: DOUBLE
32898: LD_INT 1
32900: DEC
32901: ST_TO_ADDR
32902: LD_VAR 0 7
32906: PUSH
32907: FOR_TO
32908: IFFALSE 32955
// begin hc_class = 20 ;
32910: LD_ADDR_OWVAR 28
32914: PUSH
32915: LD_INT 20
32917: ST_TO_ADDR
// hc_gallery =  ;
32918: LD_ADDR_OWVAR 33
32922: PUSH
32923: LD_STRING 
32925: ST_TO_ADDR
// animal := CreateHuman ;
32926: LD_ADDR_VAR 0 12
32930: PUSH
32931: CALL_OW 44
32935: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
32936: LD_VAR 0 12
32940: PPUSH
32941: LD_VAR 0 9
32945: PPUSH
32946: LD_INT 0
32948: PPUSH
32949: CALL_OW 49
// end ;
32953: GO 32907
32955: POP
32956: POP
// end ;
32957: LD_VAR 0 10
32961: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
32962: LD_INT 0
32964: PPUSH
32965: PPUSH
32966: PPUSH
32967: PPUSH
32968: PPUSH
32969: PPUSH
32970: PPUSH
32971: PPUSH
32972: PPUSH
32973: PPUSH
32974: PPUSH
32975: PPUSH
32976: PPUSH
32977: PPUSH
32978: PPUSH
32979: PPUSH
32980: PPUSH
32981: PPUSH
32982: PPUSH
32983: PPUSH
32984: PPUSH
32985: PPUSH
32986: PPUSH
32987: PPUSH
32988: PPUSH
32989: PPUSH
32990: PPUSH
32991: PPUSH
// if not list then
32992: LD_VAR 0 1
32996: NOT
32997: IFFALSE 33001
// exit ;
32999: GO 36244
// base := list [ 1 ] ;
33001: LD_ADDR_VAR 0 3
33005: PUSH
33006: LD_VAR 0 1
33010: PUSH
33011: LD_INT 1
33013: ARRAY
33014: ST_TO_ADDR
// group := list [ 2 ] ;
33015: LD_ADDR_VAR 0 4
33019: PUSH
33020: LD_VAR 0 1
33024: PUSH
33025: LD_INT 2
33027: ARRAY
33028: ST_TO_ADDR
// path := list [ 3 ] ;
33029: LD_ADDR_VAR 0 5
33033: PUSH
33034: LD_VAR 0 1
33038: PUSH
33039: LD_INT 3
33041: ARRAY
33042: ST_TO_ADDR
// flags := list [ 4 ] ;
33043: LD_ADDR_VAR 0 6
33047: PUSH
33048: LD_VAR 0 1
33052: PUSH
33053: LD_INT 4
33055: ARRAY
33056: ST_TO_ADDR
// mined := [ ] ;
33057: LD_ADDR_VAR 0 27
33061: PUSH
33062: EMPTY
33063: ST_TO_ADDR
// bombed := [ ] ;
33064: LD_ADDR_VAR 0 28
33068: PUSH
33069: EMPTY
33070: ST_TO_ADDR
// if not group or not path then
33071: LD_VAR 0 4
33075: NOT
33076: PUSH
33077: LD_VAR 0 5
33081: NOT
33082: OR
33083: IFFALSE 33087
// exit ;
33085: GO 36244
// if flags then
33087: LD_VAR 0 6
33091: IFFALSE 33235
// begin f_ignore_area := flags [ 1 ] ;
33093: LD_ADDR_VAR 0 17
33097: PUSH
33098: LD_VAR 0 6
33102: PUSH
33103: LD_INT 1
33105: ARRAY
33106: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
33107: LD_ADDR_VAR 0 18
33111: PUSH
33112: LD_VAR 0 6
33116: PUSH
33117: LD_INT 2
33119: ARRAY
33120: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
33121: LD_ADDR_VAR 0 19
33125: PUSH
33126: LD_VAR 0 6
33130: PUSH
33131: LD_INT 3
33133: ARRAY
33134: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
33135: LD_ADDR_VAR 0 20
33139: PUSH
33140: LD_VAR 0 6
33144: PUSH
33145: LD_INT 4
33147: ARRAY
33148: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
33149: LD_ADDR_VAR 0 21
33153: PUSH
33154: LD_VAR 0 6
33158: PUSH
33159: LD_INT 5
33161: ARRAY
33162: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
33163: LD_ADDR_VAR 0 22
33167: PUSH
33168: LD_VAR 0 6
33172: PUSH
33173: LD_INT 6
33175: ARRAY
33176: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
33177: LD_ADDR_VAR 0 23
33181: PUSH
33182: LD_VAR 0 6
33186: PUSH
33187: LD_INT 7
33189: ARRAY
33190: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
33191: LD_ADDR_VAR 0 24
33195: PUSH
33196: LD_VAR 0 6
33200: PUSH
33201: LD_INT 8
33203: ARRAY
33204: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
33205: LD_ADDR_VAR 0 25
33209: PUSH
33210: LD_VAR 0 6
33214: PUSH
33215: LD_INT 9
33217: ARRAY
33218: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
33219: LD_ADDR_VAR 0 26
33223: PUSH
33224: LD_VAR 0 6
33228: PUSH
33229: LD_INT 10
33231: ARRAY
33232: ST_TO_ADDR
// end else
33233: GO 33315
// begin f_ignore_area := false ;
33235: LD_ADDR_VAR 0 17
33239: PUSH
33240: LD_INT 0
33242: ST_TO_ADDR
// f_capture := false ;
33243: LD_ADDR_VAR 0 18
33247: PUSH
33248: LD_INT 0
33250: ST_TO_ADDR
// f_ignore_civ := false ;
33251: LD_ADDR_VAR 0 19
33255: PUSH
33256: LD_INT 0
33258: ST_TO_ADDR
// f_murder := false ;
33259: LD_ADDR_VAR 0 20
33263: PUSH
33264: LD_INT 0
33266: ST_TO_ADDR
// f_mines := false ;
33267: LD_ADDR_VAR 0 21
33271: PUSH
33272: LD_INT 0
33274: ST_TO_ADDR
// f_repair := false ;
33275: LD_ADDR_VAR 0 22
33279: PUSH
33280: LD_INT 0
33282: ST_TO_ADDR
// f_heal := false ;
33283: LD_ADDR_VAR 0 23
33287: PUSH
33288: LD_INT 0
33290: ST_TO_ADDR
// f_spacetime := false ;
33291: LD_ADDR_VAR 0 24
33295: PUSH
33296: LD_INT 0
33298: ST_TO_ADDR
// f_attack_depot := false ;
33299: LD_ADDR_VAR 0 25
33303: PUSH
33304: LD_INT 0
33306: ST_TO_ADDR
// f_crawl := false ;
33307: LD_ADDR_VAR 0 26
33311: PUSH
33312: LD_INT 0
33314: ST_TO_ADDR
// end ; units_path := [ ] ;
33315: LD_ADDR_VAR 0 16
33319: PUSH
33320: EMPTY
33321: ST_TO_ADDR
// for i = 1 to group do
33322: LD_ADDR_VAR 0 7
33326: PUSH
33327: DOUBLE
33328: LD_INT 1
33330: DEC
33331: ST_TO_ADDR
33332: LD_VAR 0 4
33336: PUSH
33337: FOR_TO
33338: IFFALSE 33367
// begin units_path := Replace ( units_path , i , path ) ;
33340: LD_ADDR_VAR 0 16
33344: PUSH
33345: LD_VAR 0 16
33349: PPUSH
33350: LD_VAR 0 7
33354: PPUSH
33355: LD_VAR 0 5
33359: PPUSH
33360: CALL_OW 1
33364: ST_TO_ADDR
// end ;
33365: GO 33337
33367: POP
33368: POP
// repeat for i = group downto 1 do
33369: LD_ADDR_VAR 0 7
33373: PUSH
33374: DOUBLE
33375: LD_VAR 0 4
33379: INC
33380: ST_TO_ADDR
33381: LD_INT 1
33383: PUSH
33384: FOR_DOWNTO
33385: IFFALSE 36226
// begin wait ( 0 0$1 ) ;
33387: LD_INT 35
33389: PPUSH
33390: CALL_OW 67
// tmp := [ ] ;
33394: LD_ADDR_VAR 0 14
33398: PUSH
33399: EMPTY
33400: ST_TO_ADDR
// attacking := false ;
33401: LD_ADDR_VAR 0 29
33405: PUSH
33406: LD_INT 0
33408: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
33409: LD_VAR 0 4
33413: PUSH
33414: LD_VAR 0 7
33418: ARRAY
33419: PPUSH
33420: CALL_OW 301
33424: PUSH
33425: LD_VAR 0 4
33429: PUSH
33430: LD_VAR 0 7
33434: ARRAY
33435: NOT
33436: OR
33437: IFFALSE 33481
// begin group := Delete ( group , i ) ;
33439: LD_ADDR_VAR 0 4
33443: PUSH
33444: LD_VAR 0 4
33448: PPUSH
33449: LD_VAR 0 7
33453: PPUSH
33454: CALL_OW 3
33458: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
33459: LD_ADDR_VAR 0 16
33463: PUSH
33464: LD_VAR 0 16
33468: PPUSH
33469: LD_VAR 0 7
33473: PPUSH
33474: CALL_OW 3
33478: ST_TO_ADDR
// continue ;
33479: GO 33384
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
33481: LD_VAR 0 4
33485: PUSH
33486: LD_VAR 0 7
33490: ARRAY
33491: PPUSH
33492: LD_INT 10
33494: PPUSH
33495: CALL 31449 0 2
33499: NOT
33500: PUSH
33501: LD_VAR 0 16
33505: PUSH
33506: LD_VAR 0 7
33510: ARRAY
33511: PUSH
33512: EMPTY
33513: EQUAL
33514: NOT
33515: AND
33516: IFFALSE 33782
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
33518: LD_VAR 0 4
33522: PUSH
33523: LD_VAR 0 7
33527: ARRAY
33528: PPUSH
33529: CALL_OW 262
33533: PUSH
33534: LD_INT 1
33536: PUSH
33537: LD_INT 2
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: IN
33544: IFFALSE 33585
// if GetFuel ( group [ i ] ) < 10 then
33546: LD_VAR 0 4
33550: PUSH
33551: LD_VAR 0 7
33555: ARRAY
33556: PPUSH
33557: CALL_OW 261
33561: PUSH
33562: LD_INT 10
33564: LESS
33565: IFFALSE 33585
// SetFuel ( group [ i ] , 12 ) ;
33567: LD_VAR 0 4
33571: PUSH
33572: LD_VAR 0 7
33576: ARRAY
33577: PPUSH
33578: LD_INT 12
33580: PPUSH
33581: CALL_OW 240
// if units_path [ i ] then
33585: LD_VAR 0 16
33589: PUSH
33590: LD_VAR 0 7
33594: ARRAY
33595: IFFALSE 33780
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
33597: LD_VAR 0 4
33601: PUSH
33602: LD_VAR 0 7
33606: ARRAY
33607: PPUSH
33608: LD_VAR 0 16
33612: PUSH
33613: LD_VAR 0 7
33617: ARRAY
33618: PUSH
33619: LD_INT 1
33621: ARRAY
33622: PUSH
33623: LD_INT 1
33625: ARRAY
33626: PPUSH
33627: LD_VAR 0 16
33631: PUSH
33632: LD_VAR 0 7
33636: ARRAY
33637: PUSH
33638: LD_INT 1
33640: ARRAY
33641: PUSH
33642: LD_INT 2
33644: ARRAY
33645: PPUSH
33646: CALL_OW 297
33650: PUSH
33651: LD_INT 6
33653: GREATER
33654: IFFALSE 33729
// begin if not HasTask ( group [ i ] ) then
33656: LD_VAR 0 4
33660: PUSH
33661: LD_VAR 0 7
33665: ARRAY
33666: PPUSH
33667: CALL_OW 314
33671: NOT
33672: IFFALSE 33727
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
33674: LD_VAR 0 4
33678: PUSH
33679: LD_VAR 0 7
33683: ARRAY
33684: PPUSH
33685: LD_VAR 0 16
33689: PUSH
33690: LD_VAR 0 7
33694: ARRAY
33695: PUSH
33696: LD_INT 1
33698: ARRAY
33699: PUSH
33700: LD_INT 1
33702: ARRAY
33703: PPUSH
33704: LD_VAR 0 16
33708: PUSH
33709: LD_VAR 0 7
33713: ARRAY
33714: PUSH
33715: LD_INT 1
33717: ARRAY
33718: PUSH
33719: LD_INT 2
33721: ARRAY
33722: PPUSH
33723: CALL_OW 114
// end else
33727: GO 33780
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
33729: LD_ADDR_VAR 0 15
33733: PUSH
33734: LD_VAR 0 16
33738: PUSH
33739: LD_VAR 0 7
33743: ARRAY
33744: PPUSH
33745: LD_INT 1
33747: PPUSH
33748: CALL_OW 3
33752: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
33753: LD_ADDR_VAR 0 16
33757: PUSH
33758: LD_VAR 0 16
33762: PPUSH
33763: LD_VAR 0 7
33767: PPUSH
33768: LD_VAR 0 15
33772: PPUSH
33773: CALL_OW 1
33777: ST_TO_ADDR
// continue ;
33778: GO 33384
// end ; end ; end else
33780: GO 36224
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
33782: LD_ADDR_VAR 0 14
33786: PUSH
33787: LD_INT 81
33789: PUSH
33790: LD_VAR 0 4
33794: PUSH
33795: LD_VAR 0 7
33799: ARRAY
33800: PPUSH
33801: CALL_OW 255
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PPUSH
33810: CALL_OW 69
33814: ST_TO_ADDR
// if not tmp then
33815: LD_VAR 0 14
33819: NOT
33820: IFFALSE 33824
// continue ;
33822: GO 33384
// if f_ignore_area then
33824: LD_VAR 0 17
33828: IFFALSE 33916
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
33830: LD_ADDR_VAR 0 15
33834: PUSH
33835: LD_VAR 0 14
33839: PPUSH
33840: LD_INT 3
33842: PUSH
33843: LD_INT 92
33845: PUSH
33846: LD_VAR 0 17
33850: PUSH
33851: LD_INT 1
33853: ARRAY
33854: PUSH
33855: LD_VAR 0 17
33859: PUSH
33860: LD_INT 2
33862: ARRAY
33863: PUSH
33864: LD_VAR 0 17
33868: PUSH
33869: LD_INT 3
33871: ARRAY
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PPUSH
33883: CALL_OW 72
33887: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
33888: LD_VAR 0 14
33892: PUSH
33893: LD_VAR 0 15
33897: DIFF
33898: IFFALSE 33916
// tmp := tmp diff tmp2 ;
33900: LD_ADDR_VAR 0 14
33904: PUSH
33905: LD_VAR 0 14
33909: PUSH
33910: LD_VAR 0 15
33914: DIFF
33915: ST_TO_ADDR
// end ; if not f_murder then
33916: LD_VAR 0 20
33920: NOT
33921: IFFALSE 33979
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
33923: LD_ADDR_VAR 0 15
33927: PUSH
33928: LD_VAR 0 14
33932: PPUSH
33933: LD_INT 3
33935: PUSH
33936: LD_INT 50
33938: PUSH
33939: EMPTY
33940: LIST
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PPUSH
33946: CALL_OW 72
33950: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
33951: LD_VAR 0 14
33955: PUSH
33956: LD_VAR 0 15
33960: DIFF
33961: IFFALSE 33979
// tmp := tmp diff tmp2 ;
33963: LD_ADDR_VAR 0 14
33967: PUSH
33968: LD_VAR 0 14
33972: PUSH
33973: LD_VAR 0 15
33977: DIFF
33978: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
33979: LD_ADDR_VAR 0 14
33983: PUSH
33984: LD_VAR 0 4
33988: PUSH
33989: LD_VAR 0 7
33993: ARRAY
33994: PPUSH
33995: LD_VAR 0 14
33999: PPUSH
34000: LD_INT 1
34002: PPUSH
34003: LD_INT 1
34005: PPUSH
34006: CALL 6311 0 4
34010: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
34011: LD_VAR 0 4
34015: PUSH
34016: LD_VAR 0 7
34020: ARRAY
34021: PPUSH
34022: CALL_OW 257
34026: PUSH
34027: LD_INT 1
34029: EQUAL
34030: IFFALSE 34478
// begin if WantPlant ( group [ i ] ) then
34032: LD_VAR 0 4
34036: PUSH
34037: LD_VAR 0 7
34041: ARRAY
34042: PPUSH
34043: CALL 5779 0 1
34047: IFFALSE 34051
// continue ;
34049: GO 33384
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
34051: LD_VAR 0 18
34055: PUSH
34056: LD_VAR 0 4
34060: PUSH
34061: LD_VAR 0 7
34065: ARRAY
34066: PPUSH
34067: CALL_OW 310
34071: NOT
34072: AND
34073: PUSH
34074: LD_VAR 0 14
34078: PUSH
34079: LD_INT 1
34081: ARRAY
34082: PUSH
34083: LD_VAR 0 14
34087: PPUSH
34088: LD_INT 21
34090: PUSH
34091: LD_INT 2
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 58
34100: PUSH
34101: EMPTY
34102: LIST
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PPUSH
34108: CALL_OW 72
34112: IN
34113: AND
34114: IFFALSE 34150
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
34116: LD_VAR 0 4
34120: PUSH
34121: LD_VAR 0 7
34125: ARRAY
34126: PPUSH
34127: LD_VAR 0 14
34131: PUSH
34132: LD_INT 1
34134: ARRAY
34135: PPUSH
34136: CALL_OW 120
// attacking := true ;
34140: LD_ADDR_VAR 0 29
34144: PUSH
34145: LD_INT 1
34147: ST_TO_ADDR
// continue ;
34148: GO 33384
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
34150: LD_VAR 0 26
34154: PUSH
34155: LD_VAR 0 4
34159: PUSH
34160: LD_VAR 0 7
34164: ARRAY
34165: PPUSH
34166: CALL_OW 257
34170: PUSH
34171: LD_INT 1
34173: EQUAL
34174: AND
34175: PUSH
34176: LD_VAR 0 4
34180: PUSH
34181: LD_VAR 0 7
34185: ARRAY
34186: PPUSH
34187: CALL_OW 256
34191: PUSH
34192: LD_INT 800
34194: LESS
34195: AND
34196: PUSH
34197: LD_VAR 0 4
34201: PUSH
34202: LD_VAR 0 7
34206: ARRAY
34207: PPUSH
34208: CALL_OW 318
34212: NOT
34213: AND
34214: IFFALSE 34231
// ComCrawl ( group [ i ] ) ;
34216: LD_VAR 0 4
34220: PUSH
34221: LD_VAR 0 7
34225: ARRAY
34226: PPUSH
34227: CALL_OW 137
// if f_mines then
34231: LD_VAR 0 21
34235: IFFALSE 34478
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
34237: LD_VAR 0 14
34241: PUSH
34242: LD_INT 1
34244: ARRAY
34245: PPUSH
34246: CALL_OW 247
34250: PUSH
34251: LD_INT 3
34253: EQUAL
34254: PUSH
34255: LD_VAR 0 14
34259: PUSH
34260: LD_INT 1
34262: ARRAY
34263: PUSH
34264: LD_VAR 0 27
34268: IN
34269: NOT
34270: AND
34271: IFFALSE 34478
// begin x := GetX ( tmp [ 1 ] ) ;
34273: LD_ADDR_VAR 0 10
34277: PUSH
34278: LD_VAR 0 14
34282: PUSH
34283: LD_INT 1
34285: ARRAY
34286: PPUSH
34287: CALL_OW 250
34291: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
34292: LD_ADDR_VAR 0 11
34296: PUSH
34297: LD_VAR 0 14
34301: PUSH
34302: LD_INT 1
34304: ARRAY
34305: PPUSH
34306: CALL_OW 251
34310: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
34311: LD_ADDR_VAR 0 12
34315: PUSH
34316: LD_VAR 0 4
34320: PUSH
34321: LD_VAR 0 7
34325: ARRAY
34326: PPUSH
34327: CALL 31534 0 1
34331: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
34332: LD_VAR 0 4
34336: PUSH
34337: LD_VAR 0 7
34341: ARRAY
34342: PPUSH
34343: LD_VAR 0 10
34347: PPUSH
34348: LD_VAR 0 11
34352: PPUSH
34353: LD_VAR 0 14
34357: PUSH
34358: LD_INT 1
34360: ARRAY
34361: PPUSH
34362: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
34366: LD_VAR 0 4
34370: PUSH
34371: LD_VAR 0 7
34375: ARRAY
34376: PPUSH
34377: LD_VAR 0 10
34381: PPUSH
34382: LD_VAR 0 12
34386: PPUSH
34387: LD_INT 7
34389: PPUSH
34390: CALL_OW 272
34394: PPUSH
34395: LD_VAR 0 11
34399: PPUSH
34400: LD_VAR 0 12
34404: PPUSH
34405: LD_INT 7
34407: PPUSH
34408: CALL_OW 273
34412: PPUSH
34413: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
34417: LD_VAR 0 4
34421: PUSH
34422: LD_VAR 0 7
34426: ARRAY
34427: PPUSH
34428: LD_INT 71
34430: PPUSH
34431: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
34435: LD_ADDR_VAR 0 27
34439: PUSH
34440: LD_VAR 0 27
34444: PPUSH
34445: LD_VAR 0 27
34449: PUSH
34450: LD_INT 1
34452: PLUS
34453: PPUSH
34454: LD_VAR 0 14
34458: PUSH
34459: LD_INT 1
34461: ARRAY
34462: PPUSH
34463: CALL_OW 1
34467: ST_TO_ADDR
// attacking := true ;
34468: LD_ADDR_VAR 0 29
34472: PUSH
34473: LD_INT 1
34475: ST_TO_ADDR
// continue ;
34476: GO 33384
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
34478: LD_VAR 0 4
34482: PUSH
34483: LD_VAR 0 7
34487: ARRAY
34488: PPUSH
34489: CALL_OW 257
34493: PUSH
34494: LD_INT 17
34496: EQUAL
34497: PUSH
34498: LD_VAR 0 4
34502: PUSH
34503: LD_VAR 0 7
34507: ARRAY
34508: PPUSH
34509: CALL_OW 110
34513: PUSH
34514: LD_INT 71
34516: EQUAL
34517: NOT
34518: AND
34519: IFFALSE 34665
// begin attacking := false ;
34521: LD_ADDR_VAR 0 29
34525: PUSH
34526: LD_INT 0
34528: ST_TO_ADDR
// k := 5 ;
34529: LD_ADDR_VAR 0 9
34533: PUSH
34534: LD_INT 5
34536: ST_TO_ADDR
// if tmp < k then
34537: LD_VAR 0 14
34541: PUSH
34542: LD_VAR 0 9
34546: LESS
34547: IFFALSE 34559
// k := tmp ;
34549: LD_ADDR_VAR 0 9
34553: PUSH
34554: LD_VAR 0 14
34558: ST_TO_ADDR
// for j = 1 to k do
34559: LD_ADDR_VAR 0 8
34563: PUSH
34564: DOUBLE
34565: LD_INT 1
34567: DEC
34568: ST_TO_ADDR
34569: LD_VAR 0 9
34573: PUSH
34574: FOR_TO
34575: IFFALSE 34663
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
34577: LD_VAR 0 14
34581: PUSH
34582: LD_VAR 0 8
34586: ARRAY
34587: PUSH
34588: LD_VAR 0 14
34592: PPUSH
34593: LD_INT 58
34595: PUSH
34596: EMPTY
34597: LIST
34598: PPUSH
34599: CALL_OW 72
34603: IN
34604: NOT
34605: IFFALSE 34661
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
34607: LD_VAR 0 4
34611: PUSH
34612: LD_VAR 0 7
34616: ARRAY
34617: PPUSH
34618: LD_VAR 0 14
34622: PUSH
34623: LD_VAR 0 8
34627: ARRAY
34628: PPUSH
34629: CALL_OW 115
// attacking := true ;
34633: LD_ADDR_VAR 0 29
34637: PUSH
34638: LD_INT 1
34640: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
34641: LD_VAR 0 4
34645: PUSH
34646: LD_VAR 0 7
34650: ARRAY
34651: PPUSH
34652: LD_INT 71
34654: PPUSH
34655: CALL_OW 109
// continue ;
34659: GO 34574
// end ; end ;
34661: GO 34574
34663: POP
34664: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
34665: LD_VAR 0 4
34669: PUSH
34670: LD_VAR 0 7
34674: ARRAY
34675: PPUSH
34676: CALL_OW 257
34680: PUSH
34681: LD_INT 8
34683: EQUAL
34684: PUSH
34685: LD_VAR 0 4
34689: PUSH
34690: LD_VAR 0 7
34694: ARRAY
34695: PPUSH
34696: CALL_OW 264
34700: PUSH
34701: LD_INT 28
34703: PUSH
34704: LD_INT 45
34706: PUSH
34707: LD_INT 7
34709: PUSH
34710: LD_INT 47
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: IN
34719: OR
34720: IFFALSE 34950
// begin attacking := false ;
34722: LD_ADDR_VAR 0 29
34726: PUSH
34727: LD_INT 0
34729: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
34730: LD_VAR 0 14
34734: PUSH
34735: LD_INT 1
34737: ARRAY
34738: PPUSH
34739: CALL_OW 266
34743: PUSH
34744: LD_INT 32
34746: PUSH
34747: LD_INT 31
34749: PUSH
34750: LD_INT 33
34752: PUSH
34753: LD_INT 4
34755: PUSH
34756: LD_INT 5
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: IN
34766: IFFALSE 34950
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
34768: LD_ADDR_VAR 0 9
34772: PUSH
34773: LD_VAR 0 14
34777: PUSH
34778: LD_INT 1
34780: ARRAY
34781: PPUSH
34782: CALL_OW 266
34786: PPUSH
34787: LD_VAR 0 14
34791: PUSH
34792: LD_INT 1
34794: ARRAY
34795: PPUSH
34796: CALL_OW 250
34800: PPUSH
34801: LD_VAR 0 14
34805: PUSH
34806: LD_INT 1
34808: ARRAY
34809: PPUSH
34810: CALL_OW 251
34814: PPUSH
34815: LD_VAR 0 14
34819: PUSH
34820: LD_INT 1
34822: ARRAY
34823: PPUSH
34824: CALL_OW 254
34828: PPUSH
34829: LD_VAR 0 14
34833: PUSH
34834: LD_INT 1
34836: ARRAY
34837: PPUSH
34838: CALL_OW 248
34842: PPUSH
34843: LD_INT 0
34845: PPUSH
34846: CALL 12910 0 6
34850: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
34851: LD_ADDR_VAR 0 8
34855: PUSH
34856: LD_VAR 0 4
34860: PUSH
34861: LD_VAR 0 7
34865: ARRAY
34866: PPUSH
34867: LD_VAR 0 9
34871: PPUSH
34872: CALL 31597 0 2
34876: ST_TO_ADDR
// if j then
34877: LD_VAR 0 8
34881: IFFALSE 34950
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34883: LD_VAR 0 8
34887: PUSH
34888: LD_INT 1
34890: ARRAY
34891: PPUSH
34892: LD_VAR 0 8
34896: PUSH
34897: LD_INT 2
34899: ARRAY
34900: PPUSH
34901: CALL_OW 488
34905: IFFALSE 34950
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
34907: LD_VAR 0 4
34911: PUSH
34912: LD_VAR 0 7
34916: ARRAY
34917: PPUSH
34918: LD_VAR 0 8
34922: PUSH
34923: LD_INT 1
34925: ARRAY
34926: PPUSH
34927: LD_VAR 0 8
34931: PUSH
34932: LD_INT 2
34934: ARRAY
34935: PPUSH
34936: CALL_OW 116
// attacking := true ;
34940: LD_ADDR_VAR 0 29
34944: PUSH
34945: LD_INT 1
34947: ST_TO_ADDR
// continue ;
34948: GO 33384
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
34950: LD_VAR 0 4
34954: PUSH
34955: LD_VAR 0 7
34959: ARRAY
34960: PPUSH
34961: CALL_OW 265
34965: PUSH
34966: LD_INT 11
34968: EQUAL
34969: IFFALSE 35247
// begin k := 10 ;
34971: LD_ADDR_VAR 0 9
34975: PUSH
34976: LD_INT 10
34978: ST_TO_ADDR
// x := 0 ;
34979: LD_ADDR_VAR 0 10
34983: PUSH
34984: LD_INT 0
34986: ST_TO_ADDR
// if tmp < k then
34987: LD_VAR 0 14
34991: PUSH
34992: LD_VAR 0 9
34996: LESS
34997: IFFALSE 35009
// k := tmp ;
34999: LD_ADDR_VAR 0 9
35003: PUSH
35004: LD_VAR 0 14
35008: ST_TO_ADDR
// for j = k downto 1 do
35009: LD_ADDR_VAR 0 8
35013: PUSH
35014: DOUBLE
35015: LD_VAR 0 9
35019: INC
35020: ST_TO_ADDR
35021: LD_INT 1
35023: PUSH
35024: FOR_DOWNTO
35025: IFFALSE 35100
// begin if GetType ( tmp [ j ] ) = unit_human then
35027: LD_VAR 0 14
35031: PUSH
35032: LD_VAR 0 8
35036: ARRAY
35037: PPUSH
35038: CALL_OW 247
35042: PUSH
35043: LD_INT 1
35045: EQUAL
35046: IFFALSE 35098
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
35048: LD_VAR 0 4
35052: PUSH
35053: LD_VAR 0 7
35057: ARRAY
35058: PPUSH
35059: LD_VAR 0 14
35063: PUSH
35064: LD_VAR 0 8
35068: ARRAY
35069: PPUSH
35070: CALL 31868 0 2
// x := tmp [ j ] ;
35074: LD_ADDR_VAR 0 10
35078: PUSH
35079: LD_VAR 0 14
35083: PUSH
35084: LD_VAR 0 8
35088: ARRAY
35089: ST_TO_ADDR
// attacking := true ;
35090: LD_ADDR_VAR 0 29
35094: PUSH
35095: LD_INT 1
35097: ST_TO_ADDR
// end ; end ;
35098: GO 35024
35100: POP
35101: POP
// if not x then
35102: LD_VAR 0 10
35106: NOT
35107: IFFALSE 35247
// begin attacking := true ;
35109: LD_ADDR_VAR 0 29
35113: PUSH
35114: LD_INT 1
35116: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
35117: LD_VAR 0 4
35121: PUSH
35122: LD_VAR 0 7
35126: ARRAY
35127: PPUSH
35128: CALL_OW 250
35132: PPUSH
35133: LD_VAR 0 4
35137: PUSH
35138: LD_VAR 0 7
35142: ARRAY
35143: PPUSH
35144: CALL_OW 251
35148: PPUSH
35149: CALL_OW 546
35153: PUSH
35154: LD_INT 2
35156: ARRAY
35157: PUSH
35158: LD_VAR 0 14
35162: PUSH
35163: LD_INT 1
35165: ARRAY
35166: PPUSH
35167: CALL_OW 250
35171: PPUSH
35172: LD_VAR 0 14
35176: PUSH
35177: LD_INT 1
35179: ARRAY
35180: PPUSH
35181: CALL_OW 251
35185: PPUSH
35186: CALL_OW 546
35190: PUSH
35191: LD_INT 2
35193: ARRAY
35194: EQUAL
35195: IFFALSE 35223
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
35197: LD_VAR 0 4
35201: PUSH
35202: LD_VAR 0 7
35206: ARRAY
35207: PPUSH
35208: LD_VAR 0 14
35212: PUSH
35213: LD_INT 1
35215: ARRAY
35216: PPUSH
35217: CALL 31868 0 2
35221: GO 35247
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
35223: LD_VAR 0 4
35227: PUSH
35228: LD_VAR 0 7
35232: ARRAY
35233: PPUSH
35234: LD_VAR 0 14
35238: PUSH
35239: LD_INT 1
35241: ARRAY
35242: PPUSH
35243: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
35247: LD_VAR 0 4
35251: PUSH
35252: LD_VAR 0 7
35256: ARRAY
35257: PPUSH
35258: CALL_OW 264
35262: PUSH
35263: LD_INT 29
35265: EQUAL
35266: IFFALSE 35632
// begin if WantsToAttack ( group [ i ] ) in bombed then
35268: LD_VAR 0 4
35272: PUSH
35273: LD_VAR 0 7
35277: ARRAY
35278: PPUSH
35279: CALL_OW 319
35283: PUSH
35284: LD_VAR 0 28
35288: IN
35289: IFFALSE 35293
// continue ;
35291: GO 33384
// k := 8 ;
35293: LD_ADDR_VAR 0 9
35297: PUSH
35298: LD_INT 8
35300: ST_TO_ADDR
// x := 0 ;
35301: LD_ADDR_VAR 0 10
35305: PUSH
35306: LD_INT 0
35308: ST_TO_ADDR
// if tmp < k then
35309: LD_VAR 0 14
35313: PUSH
35314: LD_VAR 0 9
35318: LESS
35319: IFFALSE 35331
// k := tmp ;
35321: LD_ADDR_VAR 0 9
35325: PUSH
35326: LD_VAR 0 14
35330: ST_TO_ADDR
// for j = 1 to k do
35331: LD_ADDR_VAR 0 8
35335: PUSH
35336: DOUBLE
35337: LD_INT 1
35339: DEC
35340: ST_TO_ADDR
35341: LD_VAR 0 9
35345: PUSH
35346: FOR_TO
35347: IFFALSE 35479
// begin if GetType ( tmp [ j ] ) = unit_building then
35349: LD_VAR 0 14
35353: PUSH
35354: LD_VAR 0 8
35358: ARRAY
35359: PPUSH
35360: CALL_OW 247
35364: PUSH
35365: LD_INT 3
35367: EQUAL
35368: IFFALSE 35477
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
35370: LD_VAR 0 14
35374: PUSH
35375: LD_VAR 0 8
35379: ARRAY
35380: PUSH
35381: LD_VAR 0 28
35385: IN
35386: NOT
35387: PUSH
35388: LD_VAR 0 14
35392: PUSH
35393: LD_VAR 0 8
35397: ARRAY
35398: PPUSH
35399: CALL_OW 313
35403: AND
35404: IFFALSE 35477
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
35406: LD_VAR 0 4
35410: PUSH
35411: LD_VAR 0 7
35415: ARRAY
35416: PPUSH
35417: LD_VAR 0 14
35421: PUSH
35422: LD_VAR 0 8
35426: ARRAY
35427: PPUSH
35428: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
35432: LD_ADDR_VAR 0 28
35436: PUSH
35437: LD_VAR 0 28
35441: PPUSH
35442: LD_VAR 0 28
35446: PUSH
35447: LD_INT 1
35449: PLUS
35450: PPUSH
35451: LD_VAR 0 14
35455: PUSH
35456: LD_VAR 0 8
35460: ARRAY
35461: PPUSH
35462: CALL_OW 1
35466: ST_TO_ADDR
// attacking := true ;
35467: LD_ADDR_VAR 0 29
35471: PUSH
35472: LD_INT 1
35474: ST_TO_ADDR
// break ;
35475: GO 35479
// end ; end ;
35477: GO 35346
35479: POP
35480: POP
// if not attacking and f_attack_depot then
35481: LD_VAR 0 29
35485: NOT
35486: PUSH
35487: LD_VAR 0 25
35491: AND
35492: IFFALSE 35587
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35494: LD_ADDR_VAR 0 13
35498: PUSH
35499: LD_VAR 0 14
35503: PPUSH
35504: LD_INT 2
35506: PUSH
35507: LD_INT 30
35509: PUSH
35510: LD_INT 0
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 30
35519: PUSH
35520: LD_INT 1
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: LIST
35531: PPUSH
35532: CALL_OW 72
35536: ST_TO_ADDR
// if z then
35537: LD_VAR 0 13
35541: IFFALSE 35587
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
35543: LD_VAR 0 4
35547: PUSH
35548: LD_VAR 0 7
35552: ARRAY
35553: PPUSH
35554: LD_VAR 0 13
35558: PPUSH
35559: LD_VAR 0 4
35563: PUSH
35564: LD_VAR 0 7
35568: ARRAY
35569: PPUSH
35570: CALL_OW 74
35574: PPUSH
35575: CALL_OW 115
// attacking := true ;
35579: LD_ADDR_VAR 0 29
35583: PUSH
35584: LD_INT 1
35586: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
35587: LD_VAR 0 4
35591: PUSH
35592: LD_VAR 0 7
35596: ARRAY
35597: PPUSH
35598: CALL_OW 256
35602: PUSH
35603: LD_INT 500
35605: LESS
35606: IFFALSE 35632
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
35608: LD_VAR 0 4
35612: PUSH
35613: LD_VAR 0 7
35617: ARRAY
35618: PPUSH
35619: LD_VAR 0 14
35623: PUSH
35624: LD_INT 1
35626: ARRAY
35627: PPUSH
35628: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35632: LD_VAR 0 4
35636: PUSH
35637: LD_VAR 0 7
35641: ARRAY
35642: PPUSH
35643: CALL_OW 256
35647: PUSH
35648: LD_INT 250
35650: LESS
35651: PUSH
35652: LD_VAR 0 4
35656: PUSH
35657: LD_VAR 0 7
35661: ARRAY
35662: PUSH
35663: LD_INT 21
35665: PUSH
35666: LD_INT 2
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 23
35675: PUSH
35676: LD_INT 2
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PPUSH
35687: CALL_OW 69
35691: IN
35692: AND
35693: IFFALSE 35818
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
35695: LD_ADDR_VAR 0 9
35699: PUSH
35700: LD_OWVAR 3
35704: PUSH
35705: LD_VAR 0 4
35709: PUSH
35710: LD_VAR 0 7
35714: ARRAY
35715: DIFF
35716: PPUSH
35717: LD_VAR 0 4
35721: PUSH
35722: LD_VAR 0 7
35726: ARRAY
35727: PPUSH
35728: CALL_OW 74
35732: ST_TO_ADDR
// if not k then
35733: LD_VAR 0 9
35737: NOT
35738: IFFALSE 35742
// continue ;
35740: GO 33384
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
35742: LD_VAR 0 9
35746: PUSH
35747: LD_INT 81
35749: PUSH
35750: LD_VAR 0 4
35754: PUSH
35755: LD_VAR 0 7
35759: ARRAY
35760: PPUSH
35761: CALL_OW 255
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PPUSH
35770: CALL_OW 69
35774: IN
35775: PUSH
35776: LD_VAR 0 9
35780: PPUSH
35781: LD_VAR 0 4
35785: PUSH
35786: LD_VAR 0 7
35790: ARRAY
35791: PPUSH
35792: CALL_OW 296
35796: PUSH
35797: LD_INT 5
35799: LESS
35800: AND
35801: IFFALSE 35818
// ComAutodestruct ( group [ i ] ) ;
35803: LD_VAR 0 4
35807: PUSH
35808: LD_VAR 0 7
35812: ARRAY
35813: PPUSH
35814: CALL 31766 0 1
// end ; if f_attack_depot then
35818: LD_VAR 0 25
35822: IFFALSE 35934
// begin k := 6 ;
35824: LD_ADDR_VAR 0 9
35828: PUSH
35829: LD_INT 6
35831: ST_TO_ADDR
// if tmp < k then
35832: LD_VAR 0 14
35836: PUSH
35837: LD_VAR 0 9
35841: LESS
35842: IFFALSE 35854
// k := tmp ;
35844: LD_ADDR_VAR 0 9
35848: PUSH
35849: LD_VAR 0 14
35853: ST_TO_ADDR
// for j = 1 to k do
35854: LD_ADDR_VAR 0 8
35858: PUSH
35859: DOUBLE
35860: LD_INT 1
35862: DEC
35863: ST_TO_ADDR
35864: LD_VAR 0 9
35868: PUSH
35869: FOR_TO
35870: IFFALSE 35932
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
35872: LD_VAR 0 8
35876: PPUSH
35877: CALL_OW 266
35881: PUSH
35882: LD_INT 0
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: IN
35892: IFFALSE 35930
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
35894: LD_VAR 0 4
35898: PUSH
35899: LD_VAR 0 7
35903: ARRAY
35904: PPUSH
35905: LD_VAR 0 14
35909: PUSH
35910: LD_VAR 0 8
35914: ARRAY
35915: PPUSH
35916: CALL_OW 115
// attacking := true ;
35920: LD_ADDR_VAR 0 29
35924: PUSH
35925: LD_INT 1
35927: ST_TO_ADDR
// break ;
35928: GO 35932
// end ;
35930: GO 35869
35932: POP
35933: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
35934: LD_VAR 0 4
35938: PUSH
35939: LD_VAR 0 7
35943: ARRAY
35944: PPUSH
35945: CALL_OW 302
35949: PUSH
35950: LD_VAR 0 29
35954: NOT
35955: AND
35956: IFFALSE 36224
// begin if GetTag ( group [ i ] ) = 71 then
35958: LD_VAR 0 4
35962: PUSH
35963: LD_VAR 0 7
35967: ARRAY
35968: PPUSH
35969: CALL_OW 110
35973: PUSH
35974: LD_INT 71
35976: EQUAL
35977: IFFALSE 36018
// begin if HasTask ( group [ i ] ) then
35979: LD_VAR 0 4
35983: PUSH
35984: LD_VAR 0 7
35988: ARRAY
35989: PPUSH
35990: CALL_OW 314
35994: IFFALSE 36000
// continue else
35996: GO 33384
35998: GO 36018
// SetTag ( group [ i ] , 0 ) ;
36000: LD_VAR 0 4
36004: PUSH
36005: LD_VAR 0 7
36009: ARRAY
36010: PPUSH
36011: LD_INT 0
36013: PPUSH
36014: CALL_OW 109
// end ; k := 8 ;
36018: LD_ADDR_VAR 0 9
36022: PUSH
36023: LD_INT 8
36025: ST_TO_ADDR
// x := 0 ;
36026: LD_ADDR_VAR 0 10
36030: PUSH
36031: LD_INT 0
36033: ST_TO_ADDR
// if tmp < k then
36034: LD_VAR 0 14
36038: PUSH
36039: LD_VAR 0 9
36043: LESS
36044: IFFALSE 36056
// k := tmp ;
36046: LD_ADDR_VAR 0 9
36050: PUSH
36051: LD_VAR 0 14
36055: ST_TO_ADDR
// for j = 1 to k do
36056: LD_ADDR_VAR 0 8
36060: PUSH
36061: DOUBLE
36062: LD_INT 1
36064: DEC
36065: ST_TO_ADDR
36066: LD_VAR 0 9
36070: PUSH
36071: FOR_TO
36072: IFFALSE 36170
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
36074: LD_VAR 0 14
36078: PUSH
36079: LD_VAR 0 8
36083: ARRAY
36084: PPUSH
36085: CALL_OW 247
36089: PUSH
36090: LD_INT 1
36092: EQUAL
36093: PUSH
36094: LD_VAR 0 14
36098: PUSH
36099: LD_VAR 0 8
36103: ARRAY
36104: PPUSH
36105: CALL_OW 256
36109: PUSH
36110: LD_INT 250
36112: LESS
36113: PUSH
36114: LD_VAR 0 20
36118: AND
36119: PUSH
36120: LD_VAR 0 20
36124: NOT
36125: PUSH
36126: LD_VAR 0 14
36130: PUSH
36131: LD_VAR 0 8
36135: ARRAY
36136: PPUSH
36137: CALL_OW 256
36141: PUSH
36142: LD_INT 250
36144: GREATEREQUAL
36145: AND
36146: OR
36147: AND
36148: IFFALSE 36168
// begin x := tmp [ j ] ;
36150: LD_ADDR_VAR 0 10
36154: PUSH
36155: LD_VAR 0 14
36159: PUSH
36160: LD_VAR 0 8
36164: ARRAY
36165: ST_TO_ADDR
// break ;
36166: GO 36170
// end ;
36168: GO 36071
36170: POP
36171: POP
// if x then
36172: LD_VAR 0 10
36176: IFFALSE 36200
// ComAttackUnit ( group [ i ] , x ) else
36178: LD_VAR 0 4
36182: PUSH
36183: LD_VAR 0 7
36187: ARRAY
36188: PPUSH
36189: LD_VAR 0 10
36193: PPUSH
36194: CALL_OW 115
36198: GO 36224
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
36200: LD_VAR 0 4
36204: PUSH
36205: LD_VAR 0 7
36209: ARRAY
36210: PPUSH
36211: LD_VAR 0 14
36215: PUSH
36216: LD_INT 1
36218: ARRAY
36219: PPUSH
36220: CALL_OW 115
// end ; end ; end ;
36224: GO 33384
36226: POP
36227: POP
// wait ( 0 0$1 ) ;
36228: LD_INT 35
36230: PPUSH
36231: CALL_OW 67
// until group = [ ] ;
36235: LD_VAR 0 4
36239: PUSH
36240: EMPTY
36241: EQUAL
36242: IFFALSE 33369
// end ;
36244: LD_VAR 0 2
36248: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36249: LD_INT 0
36251: PPUSH
36252: PPUSH
36253: PPUSH
36254: PPUSH
// if not base_units then
36255: LD_VAR 0 1
36259: NOT
36260: IFFALSE 36264
// exit ;
36262: GO 36351
// result := false ;
36264: LD_ADDR_VAR 0 2
36268: PUSH
36269: LD_INT 0
36271: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36272: LD_ADDR_VAR 0 5
36276: PUSH
36277: LD_VAR 0 1
36281: PPUSH
36282: LD_INT 21
36284: PUSH
36285: LD_INT 3
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PPUSH
36292: CALL_OW 72
36296: ST_TO_ADDR
// if not tmp then
36297: LD_VAR 0 5
36301: NOT
36302: IFFALSE 36306
// exit ;
36304: GO 36351
// for i in tmp do
36306: LD_ADDR_VAR 0 3
36310: PUSH
36311: LD_VAR 0 5
36315: PUSH
36316: FOR_IN
36317: IFFALSE 36349
// begin result := EnemyInRange ( i , 22 ) ;
36319: LD_ADDR_VAR 0 2
36323: PUSH
36324: LD_VAR 0 3
36328: PPUSH
36329: LD_INT 22
36331: PPUSH
36332: CALL 31449 0 2
36336: ST_TO_ADDR
// if result then
36337: LD_VAR 0 2
36341: IFFALSE 36347
// exit ;
36343: POP
36344: POP
36345: GO 36351
// end ;
36347: GO 36316
36349: POP
36350: POP
// end ;
36351: LD_VAR 0 2
36355: RET
// export function GetByTag ( side , tag ) ; var i ; begin
36356: LD_INT 0
36358: PPUSH
36359: PPUSH
// result := FilterAllUnits ( [ f_side , side ] ) ;
36360: LD_ADDR_VAR 0 3
36364: PUSH
36365: LD_INT 22
36367: PUSH
36368: LD_VAR 0 1
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PPUSH
36377: CALL_OW 69
36381: ST_TO_ADDR
// for i in result do
36382: LD_ADDR_VAR 0 4
36386: PUSH
36387: LD_VAR 0 3
36391: PUSH
36392: FOR_IN
36393: IFFALSE 36430
// if GetTag ( i ) <> tag then
36395: LD_VAR 0 4
36399: PPUSH
36400: CALL_OW 110
36404: PUSH
36405: LD_VAR 0 2
36409: NONEQUAL
36410: IFFALSE 36428
// result := result diff i ;
36412: LD_ADDR_VAR 0 3
36416: PUSH
36417: LD_VAR 0 3
36421: PUSH
36422: LD_VAR 0 4
36426: DIFF
36427: ST_TO_ADDR
36428: GO 36392
36430: POP
36431: POP
// end ;
36432: LD_VAR 0 3
36436: RET
// export function IsDriver ( un ) ; begin
36437: LD_INT 0
36439: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36440: LD_ADDR_VAR 0 2
36444: PUSH
36445: LD_VAR 0 1
36449: PUSH
36450: LD_INT 55
36452: PUSH
36453: EMPTY
36454: LIST
36455: PPUSH
36456: CALL_OW 69
36460: IN
36461: ST_TO_ADDR
// end ; end_of_file
36462: LD_VAR 0 2
36466: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape ; export function InitMacro ; var i ; begin
36467: LD_INT 0
36469: PPUSH
36470: PPUSH
// skirmish := false ;
36471: LD_ADDR_EXP 4
36475: PUSH
36476: LD_INT 0
36478: ST_TO_ADDR
// mc_bases := [ ] ;
36479: LD_ADDR_EXP 5
36483: PUSH
36484: EMPTY
36485: ST_TO_ADDR
// mc_sides := [ ] ;
36486: LD_ADDR_EXP 30
36490: PUSH
36491: EMPTY
36492: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
36493: LD_ADDR_EXP 6
36497: PUSH
36498: EMPTY
36499: ST_TO_ADDR
// mc_building_repairs := [ ] ;
36500: LD_ADDR_EXP 7
36504: PUSH
36505: EMPTY
36506: ST_TO_ADDR
// mc_need_heal := [ ] ;
36507: LD_ADDR_EXP 8
36511: PUSH
36512: EMPTY
36513: ST_TO_ADDR
// mc_healers := [ ] ;
36514: LD_ADDR_EXP 9
36518: PUSH
36519: EMPTY
36520: ST_TO_ADDR
// mc_build_list := [ ] ;
36521: LD_ADDR_EXP 10
36525: PUSH
36526: EMPTY
36527: ST_TO_ADDR
// mc_builders := [ ] ;
36528: LD_ADDR_EXP 11
36532: PUSH
36533: EMPTY
36534: ST_TO_ADDR
// mc_construct_list := [ ] ;
36535: LD_ADDR_EXP 12
36539: PUSH
36540: EMPTY
36541: ST_TO_ADDR
// mc_turret_list := [ ] ;
36542: LD_ADDR_EXP 13
36546: PUSH
36547: EMPTY
36548: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
36549: LD_ADDR_EXP 14
36553: PUSH
36554: EMPTY
36555: ST_TO_ADDR
// mc_miners := [ ] ;
36556: LD_ADDR_EXP 19
36560: PUSH
36561: EMPTY
36562: ST_TO_ADDR
// mc_mines := [ ] ;
36563: LD_ADDR_EXP 18
36567: PUSH
36568: EMPTY
36569: ST_TO_ADDR
// mc_minefields := [ ] ;
36570: LD_ADDR_EXP 20
36574: PUSH
36575: EMPTY
36576: ST_TO_ADDR
// mc_crates := [ ] ;
36577: LD_ADDR_EXP 21
36581: PUSH
36582: EMPTY
36583: ST_TO_ADDR
// mc_crates_collector := [ ] ;
36584: LD_ADDR_EXP 22
36588: PUSH
36589: EMPTY
36590: ST_TO_ADDR
// mc_vehicles := [ ] ;
36591: LD_ADDR_EXP 23
36595: PUSH
36596: EMPTY
36597: ST_TO_ADDR
// mc_attack := [ ] ;
36598: LD_ADDR_EXP 24
36602: PUSH
36603: EMPTY
36604: ST_TO_ADDR
// mc_produce := [ ] ;
36605: LD_ADDR_EXP 25
36609: PUSH
36610: EMPTY
36611: ST_TO_ADDR
// mc_defender := [ ] ;
36612: LD_ADDR_EXP 26
36616: PUSH
36617: EMPTY
36618: ST_TO_ADDR
// mc_parking := [ ] ;
36619: LD_ADDR_EXP 28
36623: PUSH
36624: EMPTY
36625: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
36626: LD_ADDR_EXP 15
36630: PUSH
36631: EMPTY
36632: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
36633: LD_ADDR_EXP 17
36637: PUSH
36638: EMPTY
36639: ST_TO_ADDR
// mc_scan := [ ] ;
36640: LD_ADDR_EXP 27
36644: PUSH
36645: EMPTY
36646: ST_TO_ADDR
// mc_scan_area := [ ] ;
36647: LD_ADDR_EXP 29
36651: PUSH
36652: EMPTY
36653: ST_TO_ADDR
// mc_tech := [ ] ;
36654: LD_ADDR_EXP 31
36658: PUSH
36659: EMPTY
36660: ST_TO_ADDR
// end ;
36661: LD_VAR 0 1
36665: RET
// export function Skirmish_Start ; var i ; begin
36666: LD_INT 0
36668: PPUSH
36669: PPUSH
// for i = 1 to mc_bases do
36670: LD_ADDR_VAR 0 2
36674: PUSH
36675: DOUBLE
36676: LD_INT 1
36678: DEC
36679: ST_TO_ADDR
36680: LD_EXP 5
36684: PUSH
36685: FOR_TO
36686: IFFALSE 37324
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
36688: LD_ADDR_EXP 6
36692: PUSH
36693: LD_EXP 6
36697: PPUSH
36698: LD_VAR 0 2
36702: PPUSH
36703: EMPTY
36704: PPUSH
36705: CALL_OW 1
36709: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
36710: LD_ADDR_EXP 7
36714: PUSH
36715: LD_EXP 7
36719: PPUSH
36720: LD_VAR 0 2
36724: PPUSH
36725: EMPTY
36726: PPUSH
36727: CALL_OW 1
36731: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
36732: LD_ADDR_EXP 8
36736: PUSH
36737: LD_EXP 8
36741: PPUSH
36742: LD_VAR 0 2
36746: PPUSH
36747: EMPTY
36748: PPUSH
36749: CALL_OW 1
36753: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
36754: LD_ADDR_EXP 9
36758: PUSH
36759: LD_EXP 9
36763: PPUSH
36764: LD_VAR 0 2
36768: PPUSH
36769: EMPTY
36770: PUSH
36771: EMPTY
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PPUSH
36777: CALL_OW 1
36781: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
36782: LD_ADDR_EXP 10
36786: PUSH
36787: LD_EXP 10
36791: PPUSH
36792: LD_VAR 0 2
36796: PPUSH
36797: EMPTY
36798: PPUSH
36799: CALL_OW 1
36803: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
36804: LD_ADDR_EXP 11
36808: PUSH
36809: LD_EXP 11
36813: PPUSH
36814: LD_VAR 0 2
36818: PPUSH
36819: EMPTY
36820: PPUSH
36821: CALL_OW 1
36825: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
36826: LD_ADDR_EXP 12
36830: PUSH
36831: LD_EXP 12
36835: PPUSH
36836: LD_VAR 0 2
36840: PPUSH
36841: EMPTY
36842: PPUSH
36843: CALL_OW 1
36847: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
36848: LD_ADDR_EXP 13
36852: PUSH
36853: LD_EXP 13
36857: PPUSH
36858: LD_VAR 0 2
36862: PPUSH
36863: EMPTY
36864: PPUSH
36865: CALL_OW 1
36869: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
36870: LD_ADDR_EXP 14
36874: PUSH
36875: LD_EXP 14
36879: PPUSH
36880: LD_VAR 0 2
36884: PPUSH
36885: LD_EXP 5
36889: PUSH
36890: LD_VAR 0 2
36894: ARRAY
36895: PPUSH
36896: LD_INT 2
36898: PUSH
36899: LD_INT 30
36901: PUSH
36902: LD_INT 32
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 30
36911: PUSH
36912: LD_INT 31
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 58
36926: PUSH
36927: EMPTY
36928: LIST
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PPUSH
36934: CALL_OW 72
36938: PPUSH
36939: CALL_OW 1
36943: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
36944: LD_ADDR_EXP 15
36948: PUSH
36949: LD_EXP 15
36953: PPUSH
36954: LD_VAR 0 2
36958: PPUSH
36959: EMPTY
36960: PPUSH
36961: CALL_OW 1
36965: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
36966: LD_ADDR_EXP 19
36970: PUSH
36971: LD_EXP 19
36975: PPUSH
36976: LD_VAR 0 2
36980: PPUSH
36981: EMPTY
36982: PPUSH
36983: CALL_OW 1
36987: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
36988: LD_ADDR_EXP 18
36992: PUSH
36993: LD_EXP 18
36997: PPUSH
36998: LD_VAR 0 2
37002: PPUSH
37003: EMPTY
37004: PPUSH
37005: CALL_OW 1
37009: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
37010: LD_ADDR_EXP 20
37014: PUSH
37015: LD_EXP 20
37019: PPUSH
37020: LD_VAR 0 2
37024: PPUSH
37025: EMPTY
37026: PPUSH
37027: CALL_OW 1
37031: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
37032: LD_ADDR_EXP 21
37036: PUSH
37037: LD_EXP 21
37041: PPUSH
37042: LD_VAR 0 2
37046: PPUSH
37047: EMPTY
37048: PPUSH
37049: CALL_OW 1
37053: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
37054: LD_ADDR_EXP 22
37058: PUSH
37059: LD_EXP 22
37063: PPUSH
37064: LD_VAR 0 2
37068: PPUSH
37069: EMPTY
37070: PPUSH
37071: CALL_OW 1
37075: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
37076: LD_ADDR_EXP 23
37080: PUSH
37081: LD_EXP 23
37085: PPUSH
37086: LD_VAR 0 2
37090: PPUSH
37091: EMPTY
37092: PPUSH
37093: CALL_OW 1
37097: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
37098: LD_ADDR_EXP 24
37102: PUSH
37103: LD_EXP 24
37107: PPUSH
37108: LD_VAR 0 2
37112: PPUSH
37113: EMPTY
37114: PPUSH
37115: CALL_OW 1
37119: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
37120: LD_ADDR_EXP 25
37124: PUSH
37125: LD_EXP 25
37129: PPUSH
37130: LD_VAR 0 2
37134: PPUSH
37135: EMPTY
37136: PPUSH
37137: CALL_OW 1
37141: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
37142: LD_ADDR_EXP 26
37146: PUSH
37147: LD_EXP 26
37151: PPUSH
37152: LD_VAR 0 2
37156: PPUSH
37157: EMPTY
37158: PPUSH
37159: CALL_OW 1
37163: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
37164: LD_ADDR_EXP 16
37168: PUSH
37169: LD_EXP 16
37173: PPUSH
37174: LD_VAR 0 2
37178: PPUSH
37179: LD_INT 0
37181: PPUSH
37182: CALL_OW 1
37186: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
37187: LD_ADDR_EXP 28
37191: PUSH
37192: LD_EXP 28
37196: PPUSH
37197: LD_VAR 0 2
37201: PPUSH
37202: LD_INT 0
37204: PPUSH
37205: CALL_OW 1
37209: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
37210: LD_ADDR_EXP 17
37214: PUSH
37215: LD_EXP 17
37219: PPUSH
37220: LD_VAR 0 2
37224: PPUSH
37225: EMPTY
37226: PPUSH
37227: CALL_OW 1
37231: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
37232: LD_ADDR_EXP 27
37236: PUSH
37237: LD_EXP 27
37241: PPUSH
37242: LD_VAR 0 2
37246: PPUSH
37247: LD_INT 0
37249: PPUSH
37250: CALL_OW 1
37254: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
37255: LD_ADDR_EXP 29
37259: PUSH
37260: LD_EXP 29
37264: PPUSH
37265: LD_VAR 0 2
37269: PPUSH
37270: EMPTY
37271: PPUSH
37272: CALL_OW 1
37276: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
37277: LD_ADDR_EXP 32
37281: PUSH
37282: LD_EXP 32
37286: PPUSH
37287: LD_VAR 0 2
37291: PPUSH
37292: LD_INT 0
37294: PPUSH
37295: CALL_OW 1
37299: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
37300: LD_ADDR_EXP 33
37304: PUSH
37305: LD_EXP 33
37309: PPUSH
37310: LD_VAR 0 2
37314: PPUSH
37315: EMPTY
37316: PPUSH
37317: CALL_OW 1
37321: ST_TO_ADDR
// end ;
37322: GO 36685
37324: POP
37325: POP
// MC_InitSides ( ) ;
37326: CALL 37553 0 0
// MC_InitResearch ( ) ;
37330: CALL 43874 0 0
// CustomInitMacro ( ) ;
37334: CALL 69 0 0
// skirmish := true ;
37338: LD_ADDR_EXP 4
37342: PUSH
37343: LD_INT 1
37345: ST_TO_ADDR
// end ;
37346: LD_VAR 0 1
37350: RET
// every 0 0$01 trigger skirmish do
37351: LD_EXP 4
37355: IFFALSE 37446
37357: GO 37359
37359: DISABLE
// begin enable ;
37360: ENABLE
// MC_CheckBuildings ( ) ;
37361: CALL 37962 0 0
// MC_CheckPeopleLife ( ) ;
37365: CALL 38087 0 0
// RaiseSailEvent ( 103 ) ;
37369: LD_INT 103
37371: PPUSH
37372: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
37376: LD_INT 104
37378: PPUSH
37379: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
37383: LD_INT 106
37385: PPUSH
37386: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
37390: LD_INT 107
37392: PPUSH
37393: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
37397: LD_INT 108
37399: PPUSH
37400: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
37404: LD_INT 109
37406: PPUSH
37407: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
37411: LD_INT 110
37413: PPUSH
37414: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
37418: LD_INT 111
37420: PPUSH
37421: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
37425: LD_INT 112
37427: PPUSH
37428: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
37432: LD_INT 120
37434: PPUSH
37435: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
37439: LD_INT 200
37441: PPUSH
37442: CALL_OW 427
// end ;
37446: END
// every 10 trigger skirmish do var i ;
37447: LD_EXP 4
37451: IFFALSE 37550
37453: GO 37455
37455: DISABLE
37456: LD_INT 0
37458: PPUSH
// begin enable ;
37459: ENABLE
// if not mc_bases then
37460: LD_EXP 5
37464: NOT
37465: IFFALSE 37469
// exit ;
37467: GO 37550
// for i = 1 to mc_bases do
37469: LD_ADDR_VAR 0 1
37473: PUSH
37474: DOUBLE
37475: LD_INT 1
37477: DEC
37478: ST_TO_ADDR
37479: LD_EXP 5
37483: PUSH
37484: FOR_TO
37485: IFFALSE 37548
// if mc_mines [ i ] and mc_miners [ i ] then
37487: LD_EXP 18
37491: PUSH
37492: LD_VAR 0 1
37496: ARRAY
37497: PUSH
37498: LD_EXP 19
37502: PUSH
37503: LD_VAR 0 1
37507: ARRAY
37508: AND
37509: IFFALSE 37546
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
37511: LD_EXP 19
37515: PUSH
37516: LD_VAR 0 1
37520: ARRAY
37521: PUSH
37522: LD_INT 1
37524: ARRAY
37525: PPUSH
37526: CALL_OW 255
37530: PPUSH
37531: LD_EXP 18
37535: PUSH
37536: LD_VAR 0 1
37540: ARRAY
37541: PPUSH
37542: CALL 2957 0 2
37546: GO 37484
37548: POP
37549: POP
// end ;
37550: PPOPN 1
37552: END
// export function MC_InitSides ( ) ; var i ; begin
37553: LD_INT 0
37555: PPUSH
37556: PPUSH
// if not mc_bases then
37557: LD_EXP 5
37561: NOT
37562: IFFALSE 37566
// exit ;
37564: GO 37640
// for i = 1 to mc_bases do
37566: LD_ADDR_VAR 0 2
37570: PUSH
37571: DOUBLE
37572: LD_INT 1
37574: DEC
37575: ST_TO_ADDR
37576: LD_EXP 5
37580: PUSH
37581: FOR_TO
37582: IFFALSE 37638
// if mc_bases [ i ] then
37584: LD_EXP 5
37588: PUSH
37589: LD_VAR 0 2
37593: ARRAY
37594: IFFALSE 37636
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
37596: LD_ADDR_EXP 30
37600: PUSH
37601: LD_EXP 30
37605: PPUSH
37606: LD_VAR 0 2
37610: PPUSH
37611: LD_EXP 5
37615: PUSH
37616: LD_VAR 0 2
37620: ARRAY
37621: PUSH
37622: LD_INT 1
37624: ARRAY
37625: PPUSH
37626: CALL_OW 255
37630: PPUSH
37631: CALL_OW 1
37635: ST_TO_ADDR
37636: GO 37581
37638: POP
37639: POP
// end ;
37640: LD_VAR 0 1
37644: RET
// export function MC_Tame ( base , area ) ; begin
37645: LD_INT 0
37647: PPUSH
// if not mc_bases or not base then
37648: LD_EXP 5
37652: NOT
37653: PUSH
37654: LD_VAR 0 1
37658: NOT
37659: OR
37660: IFFALSE 37664
// exit ;
37662: GO 37689
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
37664: LD_ADDR_EXP 32
37668: PUSH
37669: LD_EXP 32
37673: PPUSH
37674: LD_VAR 0 1
37678: PPUSH
37679: LD_VAR 0 2
37683: PPUSH
37684: CALL_OW 1
37688: ST_TO_ADDR
// end ;
37689: LD_VAR 0 3
37693: RET
// on SailEvent ( event ) do begin if event = 101 then
37694: LD_VAR 0 1
37698: PUSH
37699: LD_INT 101
37701: EQUAL
37702: IFFALSE 37708
// MC_RepairBuildings ( ) ;
37704: CALL 38633 0 0
// if event = 102 then
37708: LD_VAR 0 1
37712: PUSH
37713: LD_INT 102
37715: EQUAL
37716: IFFALSE 37722
// MC_Heal ( ) ;
37718: CALL 39027 0 0
// if event = 103 then
37722: LD_VAR 0 1
37726: PUSH
37727: LD_INT 103
37729: EQUAL
37730: IFFALSE 37736
// MC_Build ( ) ;
37732: CALL 39412 0 0
// if event = 104 then
37736: LD_VAR 0 1
37740: PUSH
37741: LD_INT 104
37743: EQUAL
37744: IFFALSE 37750
// MC_TurretWeapon ( ) ;
37746: CALL 40206 0 0
// if event = 106 then
37750: LD_VAR 0 1
37754: PUSH
37755: LD_INT 106
37757: EQUAL
37758: IFFALSE 37764
// MC_PlantMines ( ) ;
37760: CALL 40525 0 0
// if event = 107 then
37764: LD_VAR 0 1
37768: PUSH
37769: LD_INT 107
37771: EQUAL
37772: IFFALSE 37778
// MC_CollectCrates ( ) ;
37774: CALL 41532 0 0
// if event = 108 then
37778: LD_VAR 0 1
37782: PUSH
37783: LD_INT 108
37785: EQUAL
37786: IFFALSE 37792
// MC_LinkRemoteControl ( ) ;
37788: CALL 42341 0 0
// if event = 109 then
37792: LD_VAR 0 1
37796: PUSH
37797: LD_INT 109
37799: EQUAL
37800: IFFALSE 37806
// MC_ProduceVehicle ( ) ;
37802: CALL 42522 0 0
// if event = 110 then
37806: LD_VAR 0 1
37810: PUSH
37811: LD_INT 110
37813: EQUAL
37814: IFFALSE 37820
// MC_SendAttack ( ) ;
37816: CALL 43003 0 0
// if event = 111 then
37820: LD_VAR 0 1
37824: PUSH
37825: LD_INT 111
37827: EQUAL
37828: IFFALSE 37834
// MC_Defend ( ) ;
37830: CALL 43111 0 0
// if event = 112 then
37834: LD_VAR 0 1
37838: PUSH
37839: LD_INT 112
37841: EQUAL
37842: IFFALSE 37848
// MC_Research ( ) ;
37844: CALL 43479 0 0
// if event = 120 then
37848: LD_VAR 0 1
37852: PUSH
37853: LD_INT 120
37855: EQUAL
37856: IFFALSE 37862
// MC_RepairVehicle ( ) ;
37858: CALL 44135 0 0
// if event = 200 then
37862: LD_VAR 0 1
37866: PUSH
37867: LD_INT 200
37869: EQUAL
37870: IFFALSE 37876
// MC_Idle ( ) ;
37872: CALL 45788 0 0
// end ;
37876: PPOPN 1
37878: END
// export function MC_Reset ( base , tag ) ; var i ; begin
37879: LD_INT 0
37881: PPUSH
37882: PPUSH
// if not mc_bases [ base ] or not tag then
37883: LD_EXP 5
37887: PUSH
37888: LD_VAR 0 1
37892: ARRAY
37893: NOT
37894: PUSH
37895: LD_VAR 0 2
37899: NOT
37900: OR
37901: IFFALSE 37905
// exit ;
37903: GO 37957
// for i in mc_bases [ base ] do
37905: LD_ADDR_VAR 0 4
37909: PUSH
37910: LD_EXP 5
37914: PUSH
37915: LD_VAR 0 1
37919: ARRAY
37920: PUSH
37921: FOR_IN
37922: IFFALSE 37955
// if GetTag ( i ) = tag then
37924: LD_VAR 0 4
37928: PPUSH
37929: CALL_OW 110
37933: PUSH
37934: LD_VAR 0 2
37938: EQUAL
37939: IFFALSE 37953
// SetTag ( i , 0 ) ;
37941: LD_VAR 0 4
37945: PPUSH
37946: LD_INT 0
37948: PPUSH
37949: CALL_OW 109
37953: GO 37921
37955: POP
37956: POP
// end ;
37957: LD_VAR 0 3
37961: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
37962: LD_INT 0
37964: PPUSH
37965: PPUSH
37966: PPUSH
// if not mc_bases then
37967: LD_EXP 5
37971: NOT
37972: IFFALSE 37976
// exit ;
37974: GO 38082
// for i = 1 to mc_bases do
37976: LD_ADDR_VAR 0 2
37980: PUSH
37981: DOUBLE
37982: LD_INT 1
37984: DEC
37985: ST_TO_ADDR
37986: LD_EXP 5
37990: PUSH
37991: FOR_TO
37992: IFFALSE 38073
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
37994: LD_ADDR_VAR 0 3
37998: PUSH
37999: LD_EXP 5
38003: PUSH
38004: LD_VAR 0 2
38008: ARRAY
38009: PPUSH
38010: LD_INT 21
38012: PUSH
38013: LD_INT 3
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 3
38022: PUSH
38023: LD_INT 24
38025: PUSH
38026: LD_INT 1000
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PPUSH
38041: CALL_OW 72
38045: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
38046: LD_ADDR_EXP 6
38050: PUSH
38051: LD_EXP 6
38055: PPUSH
38056: LD_VAR 0 2
38060: PPUSH
38061: LD_VAR 0 3
38065: PPUSH
38066: CALL_OW 1
38070: ST_TO_ADDR
// end ;
38071: GO 37991
38073: POP
38074: POP
// RaiseSailEvent ( 101 ) ;
38075: LD_INT 101
38077: PPUSH
38078: CALL_OW 427
// end ;
38082: LD_VAR 0 1
38086: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
38087: LD_INT 0
38089: PPUSH
38090: PPUSH
38091: PPUSH
38092: PPUSH
38093: PPUSH
38094: PPUSH
38095: PPUSH
// if not mc_bases then
38096: LD_EXP 5
38100: NOT
38101: IFFALSE 38105
// exit ;
38103: GO 38628
// for i = 1 to mc_bases do
38105: LD_ADDR_VAR 0 2
38109: PUSH
38110: DOUBLE
38111: LD_INT 1
38113: DEC
38114: ST_TO_ADDR
38115: LD_EXP 5
38119: PUSH
38120: FOR_TO
38121: IFFALSE 38619
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
38123: LD_ADDR_VAR 0 5
38127: PUSH
38128: LD_EXP 5
38132: PUSH
38133: LD_VAR 0 2
38137: ARRAY
38138: PPUSH
38139: LD_INT 21
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: LD_INT 3
38154: PUSH
38155: LD_INT 54
38157: PUSH
38158: EMPTY
38159: LIST
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 3
38167: PUSH
38168: LD_INT 24
38170: PUSH
38171: LD_INT 700
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: LIST
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PPUSH
38191: CALL_OW 72
38195: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
38196: LD_ADDR_VAR 0 6
38200: PUSH
38201: LD_EXP 5
38205: PUSH
38206: LD_VAR 0 2
38210: ARRAY
38211: PPUSH
38212: LD_INT 21
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: LD_INT 3
38227: PUSH
38228: LD_INT 54
38230: PUSH
38231: EMPTY
38232: LIST
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 3
38240: PUSH
38241: LD_INT 24
38243: PUSH
38244: LD_INT 250
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: LIST
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PPUSH
38264: CALL_OW 72
38268: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
38269: LD_ADDR_VAR 0 7
38273: PUSH
38274: LD_VAR 0 5
38278: PUSH
38279: LD_VAR 0 6
38283: DIFF
38284: ST_TO_ADDR
// if not need_heal_1 then
38285: LD_VAR 0 6
38289: NOT
38290: IFFALSE 38323
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
38292: LD_ADDR_EXP 8
38296: PUSH
38297: LD_EXP 8
38301: PPUSH
38302: LD_VAR 0 2
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PPUSH
38314: EMPTY
38315: PPUSH
38316: CALL 6278 0 3
38320: ST_TO_ADDR
38321: GO 38355
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
38323: LD_ADDR_EXP 8
38327: PUSH
38328: LD_EXP 8
38332: PPUSH
38333: LD_VAR 0 2
38337: PUSH
38338: LD_INT 1
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PPUSH
38345: LD_VAR 0 6
38349: PPUSH
38350: CALL 6278 0 3
38354: ST_TO_ADDR
// if not need_heal_2 then
38355: LD_VAR 0 7
38359: NOT
38360: IFFALSE 38393
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
38362: LD_ADDR_EXP 8
38366: PUSH
38367: LD_EXP 8
38371: PPUSH
38372: LD_VAR 0 2
38376: PUSH
38377: LD_INT 2
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PPUSH
38384: EMPTY
38385: PPUSH
38386: CALL 6278 0 3
38390: ST_TO_ADDR
38391: GO 38425
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
38393: LD_ADDR_EXP 8
38397: PUSH
38398: LD_EXP 8
38402: PPUSH
38403: LD_VAR 0 2
38407: PUSH
38408: LD_INT 2
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PPUSH
38415: LD_VAR 0 7
38419: PPUSH
38420: CALL 6278 0 3
38424: ST_TO_ADDR
// if need_heal_2 then
38425: LD_VAR 0 7
38429: IFFALSE 38601
// for j in need_heal_2 do
38431: LD_ADDR_VAR 0 3
38435: PUSH
38436: LD_VAR 0 7
38440: PUSH
38441: FOR_IN
38442: IFFALSE 38599
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
38444: LD_ADDR_VAR 0 5
38448: PUSH
38449: LD_EXP 5
38453: PUSH
38454: LD_VAR 0 2
38458: ARRAY
38459: PPUSH
38460: LD_INT 2
38462: PUSH
38463: LD_INT 30
38465: PUSH
38466: LD_INT 6
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 30
38475: PUSH
38476: LD_INT 7
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 30
38485: PUSH
38486: LD_INT 8
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 30
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 30
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 25
38515: PUSH
38516: LD_INT 4
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: PPUSH
38532: CALL_OW 72
38536: ST_TO_ADDR
// if tmp then
38537: LD_VAR 0 5
38541: IFFALSE 38597
// begin k := NearestUnitToUnit ( tmp , j ) ;
38543: LD_ADDR_VAR 0 4
38547: PUSH
38548: LD_VAR 0 5
38552: PPUSH
38553: LD_VAR 0 3
38557: PPUSH
38558: CALL_OW 74
38562: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
38563: LD_VAR 0 3
38567: PPUSH
38568: LD_VAR 0 4
38572: PPUSH
38573: CALL_OW 296
38577: PUSH
38578: LD_INT 7
38580: GREATER
38581: IFFALSE 38597
// ComMoveUnit ( j , k ) ;
38583: LD_VAR 0 3
38587: PPUSH
38588: LD_VAR 0 4
38592: PPUSH
38593: CALL_OW 112
// end ; end ;
38597: GO 38441
38599: POP
38600: POP
// if not need_heal_1 and not need_heal_2 then
38601: LD_VAR 0 6
38605: NOT
38606: PUSH
38607: LD_VAR 0 7
38611: NOT
38612: AND
38613: IFFALSE 38617
// continue ;
38615: GO 38120
// end ;
38617: GO 38120
38619: POP
38620: POP
// RaiseSailEvent ( 102 ) ;
38621: LD_INT 102
38623: PPUSH
38624: CALL_OW 427
// end ;
38628: LD_VAR 0 1
38632: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
38633: LD_INT 0
38635: PPUSH
38636: PPUSH
38637: PPUSH
38638: PPUSH
38639: PPUSH
// if not mc_bases then
38640: LD_EXP 5
38644: NOT
38645: IFFALSE 38649
// exit ;
38647: GO 39022
// for i = 1 to mc_bases do
38649: LD_ADDR_VAR 0 2
38653: PUSH
38654: DOUBLE
38655: LD_INT 1
38657: DEC
38658: ST_TO_ADDR
38659: LD_EXP 5
38663: PUSH
38664: FOR_TO
38665: IFFALSE 39020
// begin if not mc_building_need_repair [ i ] then
38667: LD_EXP 6
38671: PUSH
38672: LD_VAR 0 2
38676: ARRAY
38677: NOT
38678: IFFALSE 38716
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
38680: LD_ADDR_EXP 7
38684: PUSH
38685: LD_EXP 7
38689: PPUSH
38690: LD_VAR 0 2
38694: PPUSH
38695: EMPTY
38696: PPUSH
38697: CALL_OW 1
38701: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
38702: LD_VAR 0 2
38706: PPUSH
38707: LD_INT 101
38709: PPUSH
38710: CALL 37879 0 2
// continue ;
38714: GO 38664
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
38716: LD_ADDR_EXP 11
38720: PUSH
38721: LD_EXP 11
38725: PPUSH
38726: LD_VAR 0 2
38730: PPUSH
38731: EMPTY
38732: PPUSH
38733: CALL_OW 1
38737: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
38738: LD_VAR 0 2
38742: PPUSH
38743: LD_INT 103
38745: PPUSH
38746: CALL 37879 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
38750: LD_ADDR_VAR 0 5
38754: PUSH
38755: LD_EXP 5
38759: PUSH
38760: LD_VAR 0 2
38764: ARRAY
38765: PPUSH
38766: LD_INT 2
38768: PUSH
38769: LD_INT 25
38771: PUSH
38772: LD_INT 2
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 25
38781: PUSH
38782: LD_INT 16
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: PUSH
38794: EMPTY
38795: LIST
38796: PPUSH
38797: CALL_OW 72
38801: ST_TO_ADDR
// if not tmp then
38802: LD_VAR 0 5
38806: NOT
38807: IFFALSE 38811
// continue ;
38809: GO 38664
// for j in tmp do
38811: LD_ADDR_VAR 0 3
38815: PUSH
38816: LD_VAR 0 5
38820: PUSH
38821: FOR_IN
38822: IFFALSE 39016
// begin if mc_need_heal [ i ] then
38824: LD_EXP 8
38828: PUSH
38829: LD_VAR 0 2
38833: ARRAY
38834: IFFALSE 38882
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
38836: LD_VAR 0 3
38840: PUSH
38841: LD_EXP 8
38845: PUSH
38846: LD_VAR 0 2
38850: ARRAY
38851: PUSH
38852: LD_INT 1
38854: ARRAY
38855: IN
38856: PUSH
38857: LD_VAR 0 3
38861: PUSH
38862: LD_EXP 8
38866: PUSH
38867: LD_VAR 0 2
38871: ARRAY
38872: PUSH
38873: LD_INT 2
38875: ARRAY
38876: IN
38877: OR
38878: IFFALSE 38882
// continue ;
38880: GO 38821
// if IsInUnit ( j ) then
38882: LD_VAR 0 3
38886: PPUSH
38887: CALL_OW 310
38891: IFFALSE 38902
// ComExitBuilding ( j ) ;
38893: LD_VAR 0 3
38897: PPUSH
38898: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
38902: LD_VAR 0 3
38906: PUSH
38907: LD_EXP 7
38911: PUSH
38912: LD_VAR 0 2
38916: ARRAY
38917: IN
38918: NOT
38919: IFFALSE 38977
// begin SetTag ( j , 101 ) ;
38921: LD_VAR 0 3
38925: PPUSH
38926: LD_INT 101
38928: PPUSH
38929: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
38933: LD_ADDR_EXP 7
38937: PUSH
38938: LD_EXP 7
38942: PPUSH
38943: LD_VAR 0 2
38947: PUSH
38948: LD_EXP 7
38952: PUSH
38953: LD_VAR 0 2
38957: ARRAY
38958: PUSH
38959: LD_INT 1
38961: PLUS
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PPUSH
38967: LD_VAR 0 3
38971: PPUSH
38972: CALL 6278 0 3
38976: ST_TO_ADDR
// end ; Wait ( 3 ) ;
38977: LD_INT 3
38979: PPUSH
38980: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
38984: LD_VAR 0 3
38988: PPUSH
38989: LD_EXP 6
38993: PUSH
38994: LD_VAR 0 2
38998: ARRAY
38999: PPUSH
39000: LD_VAR 0 3
39004: PPUSH
39005: CALL_OW 74
39009: PPUSH
39010: CALL_OW 130
// end ;
39014: GO 38821
39016: POP
39017: POP
// end ;
39018: GO 38664
39020: POP
39021: POP
// end ;
39022: LD_VAR 0 1
39026: RET
// export function MC_Heal ; var i , j , tmp ; begin
39027: LD_INT 0
39029: PPUSH
39030: PPUSH
39031: PPUSH
39032: PPUSH
// if not mc_bases then
39033: LD_EXP 5
39037: NOT
39038: IFFALSE 39042
// exit ;
39040: GO 39407
// for i = 1 to mc_bases do
39042: LD_ADDR_VAR 0 2
39046: PUSH
39047: DOUBLE
39048: LD_INT 1
39050: DEC
39051: ST_TO_ADDR
39052: LD_EXP 5
39056: PUSH
39057: FOR_TO
39058: IFFALSE 39405
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
39060: LD_EXP 8
39064: PUSH
39065: LD_VAR 0 2
39069: ARRAY
39070: PUSH
39071: LD_INT 1
39073: ARRAY
39074: NOT
39075: PUSH
39076: LD_EXP 8
39080: PUSH
39081: LD_VAR 0 2
39085: ARRAY
39086: PUSH
39087: LD_INT 2
39089: ARRAY
39090: NOT
39091: AND
39092: IFFALSE 39130
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
39094: LD_ADDR_EXP 9
39098: PUSH
39099: LD_EXP 9
39103: PPUSH
39104: LD_VAR 0 2
39108: PPUSH
39109: EMPTY
39110: PPUSH
39111: CALL_OW 1
39115: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
39116: LD_VAR 0 2
39120: PPUSH
39121: LD_INT 102
39123: PPUSH
39124: CALL 37879 0 2
// continue ;
39128: GO 39057
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
39130: LD_ADDR_VAR 0 4
39134: PUSH
39135: LD_EXP 5
39139: PUSH
39140: LD_VAR 0 2
39144: ARRAY
39145: PPUSH
39146: LD_INT 25
39148: PUSH
39149: LD_INT 4
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PPUSH
39156: CALL_OW 72
39160: ST_TO_ADDR
// if not tmp then
39161: LD_VAR 0 4
39165: NOT
39166: IFFALSE 39170
// continue ;
39168: GO 39057
// for j in tmp do
39170: LD_ADDR_VAR 0 3
39174: PUSH
39175: LD_VAR 0 4
39179: PUSH
39180: FOR_IN
39181: IFFALSE 39401
// begin if IsInUnit ( j ) then
39183: LD_VAR 0 3
39187: PPUSH
39188: CALL_OW 310
39192: IFFALSE 39203
// ComExitBuilding ( j ) ;
39194: LD_VAR 0 3
39198: PPUSH
39199: CALL_OW 122
// if not j in mc_healers [ i ] then
39203: LD_VAR 0 3
39207: PUSH
39208: LD_EXP 9
39212: PUSH
39213: LD_VAR 0 2
39217: ARRAY
39218: IN
39219: NOT
39220: IFFALSE 39266
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
39222: LD_ADDR_EXP 9
39226: PUSH
39227: LD_EXP 9
39231: PPUSH
39232: LD_VAR 0 2
39236: PUSH
39237: LD_EXP 9
39241: PUSH
39242: LD_VAR 0 2
39246: ARRAY
39247: PUSH
39248: LD_INT 1
39250: PLUS
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PPUSH
39256: LD_VAR 0 3
39260: PPUSH
39261: CALL 6278 0 3
39265: ST_TO_ADDR
// if not GetTag ( j ) then
39266: LD_VAR 0 3
39270: PPUSH
39271: CALL_OW 110
39275: NOT
39276: IFFALSE 39290
// SetTag ( j , 102 ) ;
39278: LD_VAR 0 3
39282: PPUSH
39283: LD_INT 102
39285: PPUSH
39286: CALL_OW 109
// Wait ( 3 ) ;
39290: LD_INT 3
39292: PPUSH
39293: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
39297: LD_EXP 8
39301: PUSH
39302: LD_VAR 0 2
39306: ARRAY
39307: PUSH
39308: LD_INT 1
39310: ARRAY
39311: IFFALSE 39343
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
39313: LD_VAR 0 3
39317: PPUSH
39318: LD_EXP 8
39322: PUSH
39323: LD_VAR 0 2
39327: ARRAY
39328: PUSH
39329: LD_INT 1
39331: ARRAY
39332: PUSH
39333: LD_INT 1
39335: ARRAY
39336: PPUSH
39337: CALL_OW 128
39341: GO 39399
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
39343: LD_VAR 0 3
39347: PPUSH
39348: CALL_OW 314
39352: NOT
39353: PUSH
39354: LD_EXP 8
39358: PUSH
39359: LD_VAR 0 2
39363: ARRAY
39364: PUSH
39365: LD_INT 2
39367: ARRAY
39368: AND
39369: IFFALSE 39399
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
39371: LD_VAR 0 3
39375: PPUSH
39376: LD_EXP 8
39380: PUSH
39381: LD_VAR 0 2
39385: ARRAY
39386: PUSH
39387: LD_INT 2
39389: ARRAY
39390: PUSH
39391: LD_INT 1
39393: ARRAY
39394: PPUSH
39395: CALL_OW 128
// end ;
39399: GO 39180
39401: POP
39402: POP
// end ;
39403: GO 39057
39405: POP
39406: POP
// end ;
39407: LD_VAR 0 1
39411: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
39412: LD_INT 0
39414: PPUSH
39415: PPUSH
39416: PPUSH
39417: PPUSH
// if not mc_bases then
39418: LD_EXP 5
39422: NOT
39423: IFFALSE 39427
// exit ;
39425: GO 40201
// for i = 1 to mc_bases do
39427: LD_ADDR_VAR 0 2
39431: PUSH
39432: DOUBLE
39433: LD_INT 1
39435: DEC
39436: ST_TO_ADDR
39437: LD_EXP 5
39441: PUSH
39442: FOR_TO
39443: IFFALSE 40199
// begin if mc_scan [ i ] then
39445: LD_EXP 27
39449: PUSH
39450: LD_VAR 0 2
39454: ARRAY
39455: IFFALSE 39459
// continue ;
39457: GO 39442
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
39459: LD_EXP 10
39463: PUSH
39464: LD_VAR 0 2
39468: ARRAY
39469: NOT
39470: PUSH
39471: LD_EXP 12
39475: PUSH
39476: LD_VAR 0 2
39480: ARRAY
39481: NOT
39482: AND
39483: PUSH
39484: LD_EXP 11
39488: PUSH
39489: LD_VAR 0 2
39493: ARRAY
39494: AND
39495: IFFALSE 39533
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
39497: LD_ADDR_EXP 11
39501: PUSH
39502: LD_EXP 11
39506: PPUSH
39507: LD_VAR 0 2
39511: PPUSH
39512: EMPTY
39513: PPUSH
39514: CALL_OW 1
39518: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
39519: LD_VAR 0 2
39523: PPUSH
39524: LD_INT 103
39526: PPUSH
39527: CALL 37879 0 2
// continue ;
39531: GO 39442
// end ; if mc_construct_list [ i ] then
39533: LD_EXP 12
39537: PUSH
39538: LD_VAR 0 2
39542: ARRAY
39543: IFFALSE 39748
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
39545: LD_ADDR_VAR 0 4
39549: PUSH
39550: LD_EXP 5
39554: PUSH
39555: LD_VAR 0 2
39559: ARRAY
39560: PPUSH
39561: LD_INT 25
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PPUSH
39571: CALL_OW 72
39575: PUSH
39576: LD_EXP 7
39580: PUSH
39581: LD_VAR 0 2
39585: ARRAY
39586: DIFF
39587: ST_TO_ADDR
// if not tmp then
39588: LD_VAR 0 4
39592: NOT
39593: IFFALSE 39597
// continue ;
39595: GO 39442
// for j in tmp do
39597: LD_ADDR_VAR 0 3
39601: PUSH
39602: LD_VAR 0 4
39606: PUSH
39607: FOR_IN
39608: IFFALSE 39744
// begin if not mc_builders [ i ] then
39610: LD_EXP 11
39614: PUSH
39615: LD_VAR 0 2
39619: ARRAY
39620: NOT
39621: IFFALSE 39679
// begin SetTag ( j , 103 ) ;
39623: LD_VAR 0 3
39627: PPUSH
39628: LD_INT 103
39630: PPUSH
39631: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
39635: LD_ADDR_EXP 11
39639: PUSH
39640: LD_EXP 11
39644: PPUSH
39645: LD_VAR 0 2
39649: PUSH
39650: LD_EXP 11
39654: PUSH
39655: LD_VAR 0 2
39659: ARRAY
39660: PUSH
39661: LD_INT 1
39663: PLUS
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PPUSH
39669: LD_VAR 0 3
39673: PPUSH
39674: CALL 6278 0 3
39678: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
39679: LD_VAR 0 3
39683: PPUSH
39684: CALL_OW 310
39688: IFFALSE 39699
// ComExitBuilding ( j ) ;
39690: LD_VAR 0 3
39694: PPUSH
39695: CALL_OW 122
// wait ( 3 ) ;
39699: LD_INT 3
39701: PPUSH
39702: CALL_OW 67
// if not HasTask ( j ) then
39706: LD_VAR 0 3
39710: PPUSH
39711: CALL_OW 314
39715: NOT
39716: IFFALSE 39742
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
39718: LD_VAR 0 3
39722: PPUSH
39723: LD_EXP 12
39727: PUSH
39728: LD_VAR 0 2
39732: ARRAY
39733: PUSH
39734: LD_INT 1
39736: ARRAY
39737: PPUSH
39738: CALL 8684 0 2
// end ;
39742: GO 39607
39744: POP
39745: POP
// end else
39746: GO 40197
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
39748: LD_EXP 10
39752: PUSH
39753: LD_VAR 0 2
39757: ARRAY
39758: PUSH
39759: LD_EXP 5
39763: PUSH
39764: LD_VAR 0 2
39768: ARRAY
39769: PPUSH
39770: LD_INT 2
39772: PUSH
39773: LD_INT 30
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 30
39785: PUSH
39786: LD_INT 1
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: LIST
39797: PPUSH
39798: CALL_OW 72
39802: AND
39803: IFFALSE 40197
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
39805: LD_EXP 5
39809: PUSH
39810: LD_VAR 0 2
39814: ARRAY
39815: PPUSH
39816: LD_INT 2
39818: PUSH
39819: LD_INT 30
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 30
39831: PUSH
39832: LD_INT 1
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: LIST
39843: PPUSH
39844: CALL_OW 72
39848: PUSH
39849: LD_INT 1
39851: ARRAY
39852: PPUSH
39853: LD_EXP 10
39857: PUSH
39858: LD_VAR 0 2
39862: ARRAY
39863: PUSH
39864: LD_INT 1
39866: ARRAY
39867: PUSH
39868: LD_INT 1
39870: ARRAY
39871: PPUSH
39872: LD_EXP 10
39876: PUSH
39877: LD_VAR 0 2
39881: ARRAY
39882: PUSH
39883: LD_INT 1
39885: ARRAY
39886: PUSH
39887: LD_INT 2
39889: ARRAY
39890: PPUSH
39891: LD_EXP 10
39895: PUSH
39896: LD_VAR 0 2
39900: ARRAY
39901: PUSH
39902: LD_INT 1
39904: ARRAY
39905: PUSH
39906: LD_INT 3
39908: ARRAY
39909: PPUSH
39910: LD_EXP 10
39914: PUSH
39915: LD_VAR 0 2
39919: ARRAY
39920: PUSH
39921: LD_INT 1
39923: ARRAY
39924: PUSH
39925: LD_INT 4
39927: ARRAY
39928: PPUSH
39929: CALL 12132 0 5
39933: IFFALSE 40197
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
39935: LD_ADDR_VAR 0 4
39939: PUSH
39940: LD_EXP 5
39944: PUSH
39945: LD_VAR 0 2
39949: ARRAY
39950: PPUSH
39951: LD_INT 25
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PPUSH
39961: CALL_OW 72
39965: PUSH
39966: LD_EXP 7
39970: PUSH
39971: LD_VAR 0 2
39975: ARRAY
39976: DIFF
39977: ST_TO_ADDR
// if not tmp then
39978: LD_VAR 0 4
39982: NOT
39983: IFFALSE 39987
// continue ;
39985: GO 39442
// for j in tmp do
39987: LD_ADDR_VAR 0 3
39991: PUSH
39992: LD_VAR 0 4
39996: PUSH
39997: FOR_IN
39998: IFFALSE 40195
// begin if not mc_builders [ i ] then
40000: LD_EXP 11
40004: PUSH
40005: LD_VAR 0 2
40009: ARRAY
40010: NOT
40011: IFFALSE 40069
// begin SetTag ( j , 103 ) ;
40013: LD_VAR 0 3
40017: PPUSH
40018: LD_INT 103
40020: PPUSH
40021: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
40025: LD_ADDR_EXP 11
40029: PUSH
40030: LD_EXP 11
40034: PPUSH
40035: LD_VAR 0 2
40039: PUSH
40040: LD_EXP 11
40044: PUSH
40045: LD_VAR 0 2
40049: ARRAY
40050: PUSH
40051: LD_INT 1
40053: PLUS
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PPUSH
40059: LD_VAR 0 3
40063: PPUSH
40064: CALL 6278 0 3
40068: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
40069: LD_VAR 0 3
40073: PPUSH
40074: CALL_OW 310
40078: IFFALSE 40089
// ComExitBuilding ( j ) ;
40080: LD_VAR 0 3
40084: PPUSH
40085: CALL_OW 122
// wait ( 3 ) ;
40089: LD_INT 3
40091: PPUSH
40092: CALL_OW 67
// if not HasTask ( j ) then
40096: LD_VAR 0 3
40100: PPUSH
40101: CALL_OW 314
40105: NOT
40106: IFFALSE 40193
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
40108: LD_VAR 0 3
40112: PPUSH
40113: LD_EXP 10
40117: PUSH
40118: LD_VAR 0 2
40122: ARRAY
40123: PUSH
40124: LD_INT 1
40126: ARRAY
40127: PUSH
40128: LD_INT 1
40130: ARRAY
40131: PPUSH
40132: LD_EXP 10
40136: PUSH
40137: LD_VAR 0 2
40141: ARRAY
40142: PUSH
40143: LD_INT 1
40145: ARRAY
40146: PUSH
40147: LD_INT 2
40149: ARRAY
40150: PPUSH
40151: LD_EXP 10
40155: PUSH
40156: LD_VAR 0 2
40160: ARRAY
40161: PUSH
40162: LD_INT 1
40164: ARRAY
40165: PUSH
40166: LD_INT 3
40168: ARRAY
40169: PPUSH
40170: LD_EXP 10
40174: PUSH
40175: LD_VAR 0 2
40179: ARRAY
40180: PUSH
40181: LD_INT 1
40183: ARRAY
40184: PUSH
40185: LD_INT 4
40187: ARRAY
40188: PPUSH
40189: CALL_OW 145
// end ;
40193: GO 39997
40195: POP
40196: POP
// end ; end ;
40197: GO 39442
40199: POP
40200: POP
// end ;
40201: LD_VAR 0 1
40205: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
40206: LD_INT 0
40208: PPUSH
40209: PPUSH
40210: PPUSH
40211: PPUSH
40212: PPUSH
40213: PPUSH
40214: PPUSH
// if not mc_bases then
40215: LD_EXP 5
40219: NOT
40220: IFFALSE 40224
// exit ;
40222: GO 40520
// for i = 1 to mc_bases do
40224: LD_ADDR_VAR 0 2
40228: PUSH
40229: DOUBLE
40230: LD_INT 1
40232: DEC
40233: ST_TO_ADDR
40234: LD_EXP 5
40238: PUSH
40239: FOR_TO
40240: IFFALSE 40518
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
40242: LD_EXP 13
40246: PUSH
40247: LD_VAR 0 2
40251: ARRAY
40252: NOT
40253: PUSH
40254: LD_EXP 5
40258: PUSH
40259: LD_VAR 0 2
40263: ARRAY
40264: PPUSH
40265: LD_INT 30
40267: PUSH
40268: LD_INT 3
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PPUSH
40275: CALL_OW 72
40279: NOT
40280: OR
40281: IFFALSE 40285
// continue ;
40283: GO 40239
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
40285: LD_EXP 13
40289: PUSH
40290: LD_VAR 0 2
40294: ARRAY
40295: PUSH
40296: LD_INT 1
40298: ARRAY
40299: PPUSH
40300: CALL_OW 269
40304: IFFALSE 40370
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
40306: LD_ADDR_VAR 0 4
40310: PUSH
40311: LD_EXP 13
40315: PUSH
40316: LD_VAR 0 2
40320: ARRAY
40321: PPUSH
40322: LD_INT 1
40324: PPUSH
40325: CALL_OW 3
40329: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
40330: LD_ADDR_EXP 13
40334: PUSH
40335: LD_EXP 13
40339: PPUSH
40340: LD_VAR 0 2
40344: PPUSH
40345: LD_VAR 0 4
40349: PPUSH
40350: CALL_OW 1
40354: ST_TO_ADDR
// if not mc_turret_list [ i ] then
40355: LD_EXP 13
40359: PUSH
40360: LD_VAR 0 2
40364: ARRAY
40365: NOT
40366: IFFALSE 40370
// continue ;
40368: GO 40239
// end ; busy := false ;
40370: LD_ADDR_VAR 0 6
40374: PUSH
40375: LD_INT 0
40377: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
40378: LD_ADDR_VAR 0 4
40382: PUSH
40383: LD_EXP 5
40387: PUSH
40388: LD_VAR 0 2
40392: ARRAY
40393: PPUSH
40394: LD_INT 30
40396: PUSH
40397: LD_INT 3
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PPUSH
40404: CALL_OW 72
40408: ST_TO_ADDR
// for j in tmp do
40409: LD_ADDR_VAR 0 3
40413: PUSH
40414: LD_VAR 0 4
40418: PUSH
40419: FOR_IN
40420: IFFALSE 40448
// if not BuildingStatus ( j ) = bs_idle then
40422: LD_VAR 0 3
40426: PPUSH
40427: CALL_OW 461
40431: PUSH
40432: LD_INT 2
40434: EQUAL
40435: NOT
40436: IFFALSE 40446
// busy := true ;
40438: LD_ADDR_VAR 0 6
40442: PUSH
40443: LD_INT 1
40445: ST_TO_ADDR
40446: GO 40419
40448: POP
40449: POP
// if busy then
40450: LD_VAR 0 6
40454: IFFALSE 40458
// continue ;
40456: GO 40239
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
40458: LD_ADDR_VAR 0 7
40462: PUSH
40463: LD_EXP 13
40467: PUSH
40468: LD_VAR 0 2
40472: ARRAY
40473: PUSH
40474: LD_INT 1
40476: ARRAY
40477: PPUSH
40478: CALL 10580 0 1
40482: ST_TO_ADDR
// if not weapon then
40483: LD_VAR 0 7
40487: NOT
40488: IFFALSE 40492
// continue ;
40490: GO 40239
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
40492: LD_EXP 13
40496: PUSH
40497: LD_VAR 0 2
40501: ARRAY
40502: PUSH
40503: LD_INT 1
40505: ARRAY
40506: PPUSH
40507: LD_VAR 0 7
40511: PPUSH
40512: CALL_OW 148
// end ;
40516: GO 40239
40518: POP
40519: POP
// end ;
40520: LD_VAR 0 1
40524: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
40525: LD_INT 0
40527: PPUSH
40528: PPUSH
40529: PPUSH
40530: PPUSH
40531: PPUSH
40532: PPUSH
// if not mc_bases then
40533: LD_EXP 5
40537: NOT
40538: IFFALSE 40542
// exit ;
40540: GO 41527
// for i = 1 to mc_bases do
40542: LD_ADDR_VAR 0 2
40546: PUSH
40547: DOUBLE
40548: LD_INT 1
40550: DEC
40551: ST_TO_ADDR
40552: LD_EXP 5
40556: PUSH
40557: FOR_TO
40558: IFFALSE 41525
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
40560: LD_EXP 18
40564: PUSH
40565: LD_VAR 0 2
40569: ARRAY
40570: NOT
40571: PUSH
40572: LD_EXP 18
40576: PUSH
40577: LD_VAR 0 2
40581: ARRAY
40582: PUSH
40583: LD_EXP 19
40587: PUSH
40588: LD_VAR 0 2
40592: ARRAY
40593: EQUAL
40594: OR
40595: IFFALSE 40599
// continue ;
40597: GO 40557
// if mc_miners [ i ] then
40599: LD_EXP 19
40603: PUSH
40604: LD_VAR 0 2
40608: ARRAY
40609: IFFALSE 41212
// begin k := 1 ;
40611: LD_ADDR_VAR 0 4
40615: PUSH
40616: LD_INT 1
40618: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
40619: LD_ADDR_VAR 0 3
40623: PUSH
40624: DOUBLE
40625: LD_EXP 19
40629: PUSH
40630: LD_VAR 0 2
40634: ARRAY
40635: INC
40636: ST_TO_ADDR
40637: LD_INT 1
40639: PUSH
40640: FOR_DOWNTO
40641: IFFALSE 41210
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
40643: LD_EXP 19
40647: PUSH
40648: LD_VAR 0 2
40652: ARRAY
40653: PUSH
40654: LD_VAR 0 3
40658: ARRAY
40659: PPUSH
40660: CALL_OW 301
40664: IFFALSE 40727
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
40666: LD_ADDR_VAR 0 5
40670: PUSH
40671: LD_EXP 19
40675: PUSH
40676: LD_VAR 0 2
40680: ARRAY
40681: PUSH
40682: LD_EXP 19
40686: PUSH
40687: LD_VAR 0 2
40691: ARRAY
40692: PUSH
40693: LD_VAR 0 3
40697: ARRAY
40698: DIFF
40699: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
40700: LD_ADDR_EXP 19
40704: PUSH
40705: LD_EXP 19
40709: PPUSH
40710: LD_VAR 0 2
40714: PPUSH
40715: LD_VAR 0 5
40719: PPUSH
40720: CALL_OW 1
40724: ST_TO_ADDR
// continue ;
40725: GO 40640
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
40727: LD_EXP 19
40731: PUSH
40732: LD_VAR 0 2
40736: ARRAY
40737: PUSH
40738: LD_VAR 0 3
40742: ARRAY
40743: PPUSH
40744: CALL 5779 0 1
40748: PUSH
40749: LD_EXP 19
40753: PUSH
40754: LD_VAR 0 2
40758: ARRAY
40759: PUSH
40760: LD_VAR 0 3
40764: ARRAY
40765: PPUSH
40766: CALL_OW 255
40770: PPUSH
40771: LD_EXP 18
40775: PUSH
40776: LD_VAR 0 2
40780: ARRAY
40781: PUSH
40782: LD_VAR 0 4
40786: ARRAY
40787: PUSH
40788: LD_INT 1
40790: ARRAY
40791: PPUSH
40792: LD_EXP 18
40796: PUSH
40797: LD_VAR 0 2
40801: ARRAY
40802: PUSH
40803: LD_VAR 0 4
40807: ARRAY
40808: PUSH
40809: LD_INT 2
40811: ARRAY
40812: PPUSH
40813: LD_INT 15
40815: PPUSH
40816: CALL 6772 0 4
40820: PUSH
40821: LD_INT 4
40823: ARRAY
40824: PUSH
40825: LD_EXP 19
40829: PUSH
40830: LD_VAR 0 2
40834: ARRAY
40835: PUSH
40836: LD_VAR 0 3
40840: ARRAY
40841: PPUSH
40842: LD_INT 10
40844: PPUSH
40845: CALL 8469 0 2
40849: PUSH
40850: LD_INT 4
40852: ARRAY
40853: OR
40854: AND
40855: IFFALSE 40878
// ComStop ( mc_miners [ i ] [ j ] ) ;
40857: LD_EXP 19
40861: PUSH
40862: LD_VAR 0 2
40866: ARRAY
40867: PUSH
40868: LD_VAR 0 3
40872: ARRAY
40873: PPUSH
40874: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
40878: LD_EXP 19
40882: PUSH
40883: LD_VAR 0 2
40887: ARRAY
40888: PUSH
40889: LD_VAR 0 3
40893: ARRAY
40894: PPUSH
40895: CALL_OW 257
40899: PUSH
40900: LD_INT 1
40902: EQUAL
40903: PUSH
40904: LD_EXP 19
40908: PUSH
40909: LD_VAR 0 2
40913: ARRAY
40914: PUSH
40915: LD_VAR 0 3
40919: ARRAY
40920: PPUSH
40921: CALL_OW 459
40925: NOT
40926: AND
40927: PUSH
40928: LD_EXP 19
40932: PUSH
40933: LD_VAR 0 2
40937: ARRAY
40938: PUSH
40939: LD_VAR 0 3
40943: ARRAY
40944: PPUSH
40945: CALL_OW 255
40949: PPUSH
40950: LD_EXP 18
40954: PUSH
40955: LD_VAR 0 2
40959: ARRAY
40960: PUSH
40961: LD_VAR 0 4
40965: ARRAY
40966: PUSH
40967: LD_INT 1
40969: ARRAY
40970: PPUSH
40971: LD_EXP 18
40975: PUSH
40976: LD_VAR 0 2
40980: ARRAY
40981: PUSH
40982: LD_VAR 0 4
40986: ARRAY
40987: PUSH
40988: LD_INT 2
40990: ARRAY
40991: PPUSH
40992: LD_INT 15
40994: PPUSH
40995: CALL 6772 0 4
40999: PUSH
41000: LD_INT 4
41002: ARRAY
41003: PUSH
41004: LD_INT 0
41006: EQUAL
41007: AND
41008: PUSH
41009: LD_EXP 19
41013: PUSH
41014: LD_VAR 0 2
41018: ARRAY
41019: PUSH
41020: LD_VAR 0 3
41024: ARRAY
41025: PPUSH
41026: CALL_OW 314
41030: NOT
41031: AND
41032: IFFALSE 41208
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
41034: LD_EXP 19
41038: PUSH
41039: LD_VAR 0 2
41043: ARRAY
41044: PUSH
41045: LD_VAR 0 3
41049: ARRAY
41050: PPUSH
41051: CALL_OW 310
41055: IFFALSE 41078
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
41057: LD_EXP 19
41061: PUSH
41062: LD_VAR 0 2
41066: ARRAY
41067: PUSH
41068: LD_VAR 0 3
41072: ARRAY
41073: PPUSH
41074: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
41078: LD_EXP 19
41082: PUSH
41083: LD_VAR 0 2
41087: ARRAY
41088: PUSH
41089: LD_VAR 0 3
41093: ARRAY
41094: PPUSH
41095: CALL_OW 314
41099: NOT
41100: IFFALSE 41168
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
41102: LD_EXP 19
41106: PUSH
41107: LD_VAR 0 2
41111: ARRAY
41112: PUSH
41113: LD_VAR 0 3
41117: ARRAY
41118: PPUSH
41119: LD_EXP 18
41123: PUSH
41124: LD_VAR 0 2
41128: ARRAY
41129: PUSH
41130: LD_VAR 0 4
41134: ARRAY
41135: PUSH
41136: LD_INT 1
41138: ARRAY
41139: PPUSH
41140: LD_EXP 18
41144: PUSH
41145: LD_VAR 0 2
41149: ARRAY
41150: PUSH
41151: LD_VAR 0 4
41155: ARRAY
41156: PUSH
41157: LD_INT 2
41159: ARRAY
41160: PPUSH
41161: LD_INT 0
41163: PPUSH
41164: CALL_OW 193
// k := k + 1 ;
41168: LD_ADDR_VAR 0 4
41172: PUSH
41173: LD_VAR 0 4
41177: PUSH
41178: LD_INT 1
41180: PLUS
41181: ST_TO_ADDR
// if k > mc_mines [ i ] then
41182: LD_VAR 0 4
41186: PUSH
41187: LD_EXP 18
41191: PUSH
41192: LD_VAR 0 2
41196: ARRAY
41197: GREATER
41198: IFFALSE 41208
// k := 1 ;
41200: LD_ADDR_VAR 0 4
41204: PUSH
41205: LD_INT 1
41207: ST_TO_ADDR
// end ; end ;
41208: GO 40640
41210: POP
41211: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
41212: LD_ADDR_VAR 0 5
41216: PUSH
41217: LD_EXP 5
41221: PUSH
41222: LD_VAR 0 2
41226: ARRAY
41227: PPUSH
41228: LD_INT 2
41230: PUSH
41231: LD_INT 30
41233: PUSH
41234: LD_INT 4
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 30
41243: PUSH
41244: LD_INT 5
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 30
41253: PUSH
41254: LD_INT 32
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: PPUSH
41267: CALL_OW 72
41271: ST_TO_ADDR
// if not tmp then
41272: LD_VAR 0 5
41276: NOT
41277: IFFALSE 41281
// continue ;
41279: GO 40557
// list := [ ] ;
41281: LD_ADDR_VAR 0 6
41285: PUSH
41286: EMPTY
41287: ST_TO_ADDR
// for j in tmp do
41288: LD_ADDR_VAR 0 3
41292: PUSH
41293: LD_VAR 0 5
41297: PUSH
41298: FOR_IN
41299: IFFALSE 41368
// begin for k in UnitsInside ( j ) do
41301: LD_ADDR_VAR 0 4
41305: PUSH
41306: LD_VAR 0 3
41310: PPUSH
41311: CALL_OW 313
41315: PUSH
41316: FOR_IN
41317: IFFALSE 41364
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
41319: LD_VAR 0 4
41323: PPUSH
41324: CALL_OW 257
41328: PUSH
41329: LD_INT 1
41331: EQUAL
41332: PUSH
41333: LD_VAR 0 4
41337: PPUSH
41338: CALL_OW 459
41342: NOT
41343: AND
41344: IFFALSE 41362
// list := list ^ k ;
41346: LD_ADDR_VAR 0 6
41350: PUSH
41351: LD_VAR 0 6
41355: PUSH
41356: LD_VAR 0 4
41360: ADD
41361: ST_TO_ADDR
41362: GO 41316
41364: POP
41365: POP
// end ;
41366: GO 41298
41368: POP
41369: POP
// list := list diff mc_miners [ i ] ;
41370: LD_ADDR_VAR 0 6
41374: PUSH
41375: LD_VAR 0 6
41379: PUSH
41380: LD_EXP 19
41384: PUSH
41385: LD_VAR 0 2
41389: ARRAY
41390: DIFF
41391: ST_TO_ADDR
// if not list then
41392: LD_VAR 0 6
41396: NOT
41397: IFFALSE 41401
// continue ;
41399: GO 40557
// k := mc_mines [ i ] - mc_miners [ i ] ;
41401: LD_ADDR_VAR 0 4
41405: PUSH
41406: LD_EXP 18
41410: PUSH
41411: LD_VAR 0 2
41415: ARRAY
41416: PUSH
41417: LD_EXP 19
41421: PUSH
41422: LD_VAR 0 2
41426: ARRAY
41427: MINUS
41428: ST_TO_ADDR
// if k > list then
41429: LD_VAR 0 4
41433: PUSH
41434: LD_VAR 0 6
41438: GREATER
41439: IFFALSE 41451
// k := list ;
41441: LD_ADDR_VAR 0 4
41445: PUSH
41446: LD_VAR 0 6
41450: ST_TO_ADDR
// for j = 1 to k do
41451: LD_ADDR_VAR 0 3
41455: PUSH
41456: DOUBLE
41457: LD_INT 1
41459: DEC
41460: ST_TO_ADDR
41461: LD_VAR 0 4
41465: PUSH
41466: FOR_TO
41467: IFFALSE 41521
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
41469: LD_ADDR_EXP 19
41473: PUSH
41474: LD_EXP 19
41478: PPUSH
41479: LD_VAR 0 2
41483: PUSH
41484: LD_EXP 19
41488: PUSH
41489: LD_VAR 0 2
41493: ARRAY
41494: PUSH
41495: LD_INT 1
41497: PLUS
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PPUSH
41503: LD_VAR 0 6
41507: PUSH
41508: LD_VAR 0 3
41512: ARRAY
41513: PPUSH
41514: CALL 6278 0 3
41518: ST_TO_ADDR
41519: GO 41466
41521: POP
41522: POP
// end ;
41523: GO 40557
41525: POP
41526: POP
// end ;
41527: LD_VAR 0 1
41531: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
41532: LD_INT 0
41534: PPUSH
41535: PPUSH
41536: PPUSH
41537: PPUSH
41538: PPUSH
// if not mc_bases then
41539: LD_EXP 5
41543: NOT
41544: IFFALSE 41548
// exit ;
41546: GO 42336
// for i = 1 to mc_bases do
41548: LD_ADDR_VAR 0 2
41552: PUSH
41553: DOUBLE
41554: LD_INT 1
41556: DEC
41557: ST_TO_ADDR
41558: LD_EXP 5
41562: PUSH
41563: FOR_TO
41564: IFFALSE 42334
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
41566: LD_EXP 5
41570: PUSH
41571: LD_VAR 0 2
41575: ARRAY
41576: NOT
41577: PUSH
41578: LD_EXP 12
41582: PUSH
41583: LD_VAR 0 2
41587: ARRAY
41588: OR
41589: IFFALSE 41593
// continue ;
41591: GO 41563
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
41593: LD_EXP 21
41597: PUSH
41598: LD_VAR 0 2
41602: ARRAY
41603: NOT
41604: PUSH
41605: LD_EXP 22
41609: PUSH
41610: LD_VAR 0 2
41614: ARRAY
41615: AND
41616: IFFALSE 41654
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
41618: LD_ADDR_EXP 22
41622: PUSH
41623: LD_EXP 22
41627: PPUSH
41628: LD_VAR 0 2
41632: PPUSH
41633: EMPTY
41634: PPUSH
41635: CALL_OW 1
41639: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
41640: LD_VAR 0 2
41644: PPUSH
41645: LD_INT 107
41647: PPUSH
41648: CALL 37879 0 2
// continue ;
41652: GO 41563
// end ; target := [ ] ;
41654: LD_ADDR_VAR 0 5
41658: PUSH
41659: EMPTY
41660: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
41661: LD_ADDR_VAR 0 3
41665: PUSH
41666: DOUBLE
41667: LD_EXP 21
41671: PUSH
41672: LD_VAR 0 2
41676: ARRAY
41677: INC
41678: ST_TO_ADDR
41679: LD_INT 1
41681: PUSH
41682: FOR_DOWNTO
41683: IFFALSE 41943
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
41685: LD_EXP 21
41689: PUSH
41690: LD_VAR 0 2
41694: ARRAY
41695: PUSH
41696: LD_VAR 0 3
41700: ARRAY
41701: PUSH
41702: LD_INT 2
41704: ARRAY
41705: PPUSH
41706: LD_EXP 21
41710: PUSH
41711: LD_VAR 0 2
41715: ARRAY
41716: PUSH
41717: LD_VAR 0 3
41721: ARRAY
41722: PUSH
41723: LD_INT 3
41725: ARRAY
41726: PPUSH
41727: CALL_OW 488
41731: PUSH
41732: LD_EXP 21
41736: PUSH
41737: LD_VAR 0 2
41741: ARRAY
41742: PUSH
41743: LD_VAR 0 3
41747: ARRAY
41748: PUSH
41749: LD_INT 2
41751: ARRAY
41752: PPUSH
41753: LD_EXP 21
41757: PUSH
41758: LD_VAR 0 2
41762: ARRAY
41763: PUSH
41764: LD_VAR 0 3
41768: ARRAY
41769: PUSH
41770: LD_INT 3
41772: ARRAY
41773: PPUSH
41774: CALL_OW 284
41778: PUSH
41779: LD_INT 0
41781: EQUAL
41782: AND
41783: IFFALSE 41838
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
41785: LD_ADDR_VAR 0 4
41789: PUSH
41790: LD_EXP 21
41794: PUSH
41795: LD_VAR 0 2
41799: ARRAY
41800: PPUSH
41801: LD_VAR 0 3
41805: PPUSH
41806: CALL_OW 3
41810: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
41811: LD_ADDR_EXP 21
41815: PUSH
41816: LD_EXP 21
41820: PPUSH
41821: LD_VAR 0 2
41825: PPUSH
41826: LD_VAR 0 4
41830: PPUSH
41831: CALL_OW 1
41835: ST_TO_ADDR
// continue ;
41836: GO 41682
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
41838: LD_EXP 5
41842: PUSH
41843: LD_VAR 0 2
41847: ARRAY
41848: PUSH
41849: LD_INT 1
41851: ARRAY
41852: PPUSH
41853: CALL_OW 255
41857: PPUSH
41858: LD_EXP 21
41862: PUSH
41863: LD_VAR 0 2
41867: ARRAY
41868: PUSH
41869: LD_VAR 0 3
41873: ARRAY
41874: PUSH
41875: LD_INT 2
41877: ARRAY
41878: PPUSH
41879: LD_EXP 21
41883: PUSH
41884: LD_VAR 0 2
41888: ARRAY
41889: PUSH
41890: LD_VAR 0 3
41894: ARRAY
41895: PUSH
41896: LD_INT 3
41898: ARRAY
41899: PPUSH
41900: LD_INT 20
41902: PPUSH
41903: CALL 6772 0 4
41907: PUSH
41908: LD_INT 4
41910: ARRAY
41911: PUSH
41912: LD_INT 0
41914: EQUAL
41915: IFFALSE 41941
// begin target := mc_crates [ i ] [ j ] ;
41917: LD_ADDR_VAR 0 5
41921: PUSH
41922: LD_EXP 21
41926: PUSH
41927: LD_VAR 0 2
41931: ARRAY
41932: PUSH
41933: LD_VAR 0 3
41937: ARRAY
41938: ST_TO_ADDR
// break ;
41939: GO 41943
// end ; end ;
41941: GO 41682
41943: POP
41944: POP
// if not target then
41945: LD_VAR 0 5
41949: NOT
41950: IFFALSE 41954
// continue ;
41952: GO 41563
// if mc_crates_collector [ i ] < 5 then
41954: LD_EXP 22
41958: PUSH
41959: LD_VAR 0 2
41963: ARRAY
41964: PUSH
41965: LD_INT 5
41967: LESS
41968: IFFALSE 42148
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
41970: LD_ADDR_VAR 0 4
41974: PUSH
41975: LD_EXP 5
41979: PUSH
41980: LD_VAR 0 2
41984: ARRAY
41985: PPUSH
41986: LD_INT 2
41988: PUSH
41989: LD_INT 25
41991: PUSH
41992: LD_INT 2
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 25
42001: PUSH
42002: LD_INT 16
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 24
42016: PUSH
42017: LD_INT 750
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PPUSH
42028: CALL_OW 72
42032: ST_TO_ADDR
// if not tmp then
42033: LD_VAR 0 4
42037: NOT
42038: IFFALSE 42042
// continue ;
42040: GO 41563
// for j in tmp do
42042: LD_ADDR_VAR 0 3
42046: PUSH
42047: LD_VAR 0 4
42051: PUSH
42052: FOR_IN
42053: IFFALSE 42146
// if GetTag ( j ) = 0 then
42055: LD_VAR 0 3
42059: PPUSH
42060: CALL_OW 110
42064: PUSH
42065: LD_INT 0
42067: EQUAL
42068: IFFALSE 42144
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
42070: LD_ADDR_EXP 22
42074: PUSH
42075: LD_EXP 22
42079: PPUSH
42080: LD_VAR 0 2
42084: PUSH
42085: LD_EXP 22
42089: PUSH
42090: LD_VAR 0 2
42094: ARRAY
42095: PUSH
42096: LD_INT 1
42098: PLUS
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PPUSH
42104: LD_VAR 0 3
42108: PPUSH
42109: CALL 6278 0 3
42113: ST_TO_ADDR
// SetTag ( j , 107 ) ;
42114: LD_VAR 0 3
42118: PPUSH
42119: LD_INT 107
42121: PPUSH
42122: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
42126: LD_EXP 22
42130: PUSH
42131: LD_VAR 0 2
42135: ARRAY
42136: PUSH
42137: LD_INT 5
42139: GREATER
42140: IFFALSE 42144
// break ;
42142: GO 42146
// end ;
42144: GO 42052
42146: POP
42147: POP
// end ; if mc_crates_collector [ i ] and target then
42148: LD_EXP 22
42152: PUSH
42153: LD_VAR 0 2
42157: ARRAY
42158: PUSH
42159: LD_VAR 0 5
42163: AND
42164: IFFALSE 42332
// begin if mc_crates_collector [ i ] < target [ 1 ] then
42166: LD_EXP 22
42170: PUSH
42171: LD_VAR 0 2
42175: ARRAY
42176: PUSH
42177: LD_VAR 0 5
42181: PUSH
42182: LD_INT 1
42184: ARRAY
42185: LESS
42186: IFFALSE 42206
// tmp := mc_crates_collector [ i ] else
42188: LD_ADDR_VAR 0 4
42192: PUSH
42193: LD_EXP 22
42197: PUSH
42198: LD_VAR 0 2
42202: ARRAY
42203: ST_TO_ADDR
42204: GO 42220
// tmp := target [ 1 ] ;
42206: LD_ADDR_VAR 0 4
42210: PUSH
42211: LD_VAR 0 5
42215: PUSH
42216: LD_INT 1
42218: ARRAY
42219: ST_TO_ADDR
// for j = 1 to tmp do
42220: LD_ADDR_VAR 0 3
42224: PUSH
42225: DOUBLE
42226: LD_INT 1
42228: DEC
42229: ST_TO_ADDR
42230: LD_VAR 0 4
42234: PUSH
42235: FOR_TO
42236: IFFALSE 42330
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
42238: LD_EXP 22
42242: PUSH
42243: LD_VAR 0 2
42247: ARRAY
42248: PUSH
42249: LD_VAR 0 3
42253: ARRAY
42254: PPUSH
42255: CALL_OW 310
42259: IFFALSE 42282
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
42261: LD_EXP 22
42265: PUSH
42266: LD_VAR 0 2
42270: ARRAY
42271: PUSH
42272: LD_VAR 0 3
42276: ARRAY
42277: PPUSH
42278: CALL_OW 122
// wait ( 3 ) ;
42282: LD_INT 3
42284: PPUSH
42285: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
42289: LD_EXP 22
42293: PUSH
42294: LD_VAR 0 2
42298: ARRAY
42299: PUSH
42300: LD_VAR 0 3
42304: ARRAY
42305: PPUSH
42306: LD_VAR 0 5
42310: PUSH
42311: LD_INT 2
42313: ARRAY
42314: PPUSH
42315: LD_VAR 0 5
42319: PUSH
42320: LD_INT 3
42322: ARRAY
42323: PPUSH
42324: CALL_OW 117
// end ;
42328: GO 42235
42330: POP
42331: POP
// end ; end ;
42332: GO 41563
42334: POP
42335: POP
// end ;
42336: LD_VAR 0 1
42340: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
42341: LD_INT 0
42343: PPUSH
42344: PPUSH
42345: PPUSH
42346: PPUSH
// if not mc_bases then
42347: LD_EXP 5
42351: NOT
42352: IFFALSE 42356
// exit ;
42354: GO 42517
// for i = 1 to mc_bases do
42356: LD_ADDR_VAR 0 2
42360: PUSH
42361: DOUBLE
42362: LD_INT 1
42364: DEC
42365: ST_TO_ADDR
42366: LD_EXP 5
42370: PUSH
42371: FOR_TO
42372: IFFALSE 42515
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
42374: LD_ADDR_VAR 0 4
42378: PUSH
42379: LD_EXP 23
42383: PUSH
42384: LD_VAR 0 2
42388: ARRAY
42389: PUSH
42390: LD_EXP 26
42394: PUSH
42395: LD_VAR 0 2
42399: ARRAY
42400: ADD
42401: PPUSH
42402: LD_INT 33
42404: PUSH
42405: LD_INT 2
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PPUSH
42412: CALL_OW 72
42416: ST_TO_ADDR
// if tmp then
42417: LD_VAR 0 4
42421: IFFALSE 42513
// for j in tmp do
42423: LD_ADDR_VAR 0 3
42427: PUSH
42428: LD_VAR 0 4
42432: PUSH
42433: FOR_IN
42434: IFFALSE 42511
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
42436: LD_VAR 0 3
42440: PPUSH
42441: CALL_OW 312
42445: NOT
42446: PUSH
42447: LD_VAR 0 3
42451: PPUSH
42452: CALL_OW 256
42456: PUSH
42457: LD_INT 250
42459: GREATEREQUAL
42460: AND
42461: IFFALSE 42474
// Connect ( j ) else
42463: LD_VAR 0 3
42467: PPUSH
42468: CALL 8766 0 1
42472: GO 42509
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
42474: LD_VAR 0 3
42478: PPUSH
42479: CALL_OW 256
42483: PUSH
42484: LD_INT 250
42486: LESS
42487: PUSH
42488: LD_VAR 0 3
42492: PPUSH
42493: CALL_OW 312
42497: AND
42498: IFFALSE 42509
// ComUnlink ( j ) ;
42500: LD_VAR 0 3
42504: PPUSH
42505: CALL_OW 136
42509: GO 42433
42511: POP
42512: POP
// end ;
42513: GO 42371
42515: POP
42516: POP
// end ;
42517: LD_VAR 0 1
42521: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
42522: LD_INT 0
42524: PPUSH
42525: PPUSH
42526: PPUSH
42527: PPUSH
42528: PPUSH
// if not mc_bases then
42529: LD_EXP 5
42533: NOT
42534: IFFALSE 42538
// exit ;
42536: GO 42998
// for i = 1 to mc_bases do
42538: LD_ADDR_VAR 0 2
42542: PUSH
42543: DOUBLE
42544: LD_INT 1
42546: DEC
42547: ST_TO_ADDR
42548: LD_EXP 5
42552: PUSH
42553: FOR_TO
42554: IFFALSE 42996
// begin if not mc_produce [ i ] then
42556: LD_EXP 25
42560: PUSH
42561: LD_VAR 0 2
42565: ARRAY
42566: NOT
42567: IFFALSE 42571
// continue ;
42569: GO 42553
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
42571: LD_ADDR_VAR 0 5
42575: PUSH
42576: LD_EXP 5
42580: PUSH
42581: LD_VAR 0 2
42585: ARRAY
42586: PPUSH
42587: LD_INT 30
42589: PUSH
42590: LD_INT 3
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PPUSH
42597: CALL_OW 72
42601: ST_TO_ADDR
// if not fac then
42602: LD_VAR 0 5
42606: NOT
42607: IFFALSE 42611
// continue ;
42609: GO 42553
// for j in fac do
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: LD_VAR 0 5
42620: PUSH
42621: FOR_IN
42622: IFFALSE 42992
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
42624: LD_VAR 0 3
42628: PPUSH
42629: CALL_OW 461
42633: PUSH
42634: LD_INT 2
42636: NONEQUAL
42637: PUSH
42638: LD_VAR 0 3
42642: PPUSH
42643: LD_INT 20
42645: PPUSH
42646: CALL 8469 0 2
42650: PUSH
42651: LD_INT 4
42653: ARRAY
42654: OR
42655: PUSH
42656: LD_VAR 0 3
42660: PPUSH
42661: CALL_OW 313
42665: PUSH
42666: LD_INT 0
42668: EQUAL
42669: OR
42670: IFFALSE 42674
// continue ;
42672: GO 42621
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
42674: LD_VAR 0 3
42678: PPUSH
42679: LD_EXP 25
42683: PUSH
42684: LD_VAR 0 2
42688: ARRAY
42689: PUSH
42690: LD_INT 1
42692: ARRAY
42693: PUSH
42694: LD_INT 1
42696: ARRAY
42697: PPUSH
42698: LD_EXP 25
42702: PUSH
42703: LD_VAR 0 2
42707: ARRAY
42708: PUSH
42709: LD_INT 1
42711: ARRAY
42712: PUSH
42713: LD_INT 2
42715: ARRAY
42716: PPUSH
42717: LD_EXP 25
42721: PUSH
42722: LD_VAR 0 2
42726: ARRAY
42727: PUSH
42728: LD_INT 1
42730: ARRAY
42731: PUSH
42732: LD_INT 3
42734: ARRAY
42735: PPUSH
42736: LD_EXP 25
42740: PUSH
42741: LD_VAR 0 2
42745: ARRAY
42746: PUSH
42747: LD_INT 1
42749: ARRAY
42750: PUSH
42751: LD_INT 4
42753: ARRAY
42754: PPUSH
42755: CALL_OW 448
42759: PUSH
42760: LD_VAR 0 3
42764: PPUSH
42765: LD_EXP 25
42769: PUSH
42770: LD_VAR 0 2
42774: ARRAY
42775: PUSH
42776: LD_INT 1
42778: ARRAY
42779: PUSH
42780: LD_INT 1
42782: ARRAY
42783: PUSH
42784: LD_EXP 25
42788: PUSH
42789: LD_VAR 0 2
42793: ARRAY
42794: PUSH
42795: LD_INT 1
42797: ARRAY
42798: PUSH
42799: LD_INT 2
42801: ARRAY
42802: PUSH
42803: LD_EXP 25
42807: PUSH
42808: LD_VAR 0 2
42812: ARRAY
42813: PUSH
42814: LD_INT 1
42816: ARRAY
42817: PUSH
42818: LD_INT 3
42820: ARRAY
42821: PUSH
42822: LD_EXP 25
42826: PUSH
42827: LD_VAR 0 2
42831: ARRAY
42832: PUSH
42833: LD_INT 1
42835: ARRAY
42836: PUSH
42837: LD_INT 4
42839: ARRAY
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: PPUSH
42847: CALL 11971 0 2
42851: AND
42852: IFFALSE 42990
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
42854: LD_VAR 0 3
42858: PPUSH
42859: LD_EXP 25
42863: PUSH
42864: LD_VAR 0 2
42868: ARRAY
42869: PUSH
42870: LD_INT 1
42872: ARRAY
42873: PUSH
42874: LD_INT 1
42876: ARRAY
42877: PPUSH
42878: LD_EXP 25
42882: PUSH
42883: LD_VAR 0 2
42887: ARRAY
42888: PUSH
42889: LD_INT 1
42891: ARRAY
42892: PUSH
42893: LD_INT 2
42895: ARRAY
42896: PPUSH
42897: LD_EXP 25
42901: PUSH
42902: LD_VAR 0 2
42906: ARRAY
42907: PUSH
42908: LD_INT 1
42910: ARRAY
42911: PUSH
42912: LD_INT 3
42914: ARRAY
42915: PPUSH
42916: LD_EXP 25
42920: PUSH
42921: LD_VAR 0 2
42925: ARRAY
42926: PUSH
42927: LD_INT 1
42929: ARRAY
42930: PUSH
42931: LD_INT 4
42933: ARRAY
42934: PPUSH
42935: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
42939: LD_ADDR_VAR 0 4
42943: PUSH
42944: LD_EXP 25
42948: PUSH
42949: LD_VAR 0 2
42953: ARRAY
42954: PPUSH
42955: LD_INT 1
42957: PPUSH
42958: CALL_OW 3
42962: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
42963: LD_ADDR_EXP 25
42967: PUSH
42968: LD_EXP 25
42972: PPUSH
42973: LD_VAR 0 2
42977: PPUSH
42978: LD_VAR 0 4
42982: PPUSH
42983: CALL_OW 1
42987: ST_TO_ADDR
// break ;
42988: GO 42992
// end ; end ;
42990: GO 42621
42992: POP
42993: POP
// end ;
42994: GO 42553
42996: POP
42997: POP
// end ;
42998: LD_VAR 0 1
43002: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
43003: LD_INT 0
43005: PPUSH
43006: PPUSH
43007: PPUSH
// if not mc_bases then
43008: LD_EXP 5
43012: NOT
43013: IFFALSE 43017
// exit ;
43015: GO 43106
// for i = 1 to mc_bases do
43017: LD_ADDR_VAR 0 2
43021: PUSH
43022: DOUBLE
43023: LD_INT 1
43025: DEC
43026: ST_TO_ADDR
43027: LD_EXP 5
43031: PUSH
43032: FOR_TO
43033: IFFALSE 43104
// begin if mc_attack [ i ] then
43035: LD_EXP 24
43039: PUSH
43040: LD_VAR 0 2
43044: ARRAY
43045: IFFALSE 43102
// begin tmp := mc_attack [ i ] [ 1 ] ;
43047: LD_ADDR_VAR 0 3
43051: PUSH
43052: LD_EXP 24
43056: PUSH
43057: LD_VAR 0 2
43061: ARRAY
43062: PUSH
43063: LD_INT 1
43065: ARRAY
43066: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
43067: LD_ADDR_EXP 24
43071: PUSH
43072: LD_EXP 24
43076: PPUSH
43077: LD_VAR 0 2
43081: PPUSH
43082: EMPTY
43083: PPUSH
43084: CALL_OW 1
43088: ST_TO_ADDR
// Attack ( tmp ) ;
43089: LD_VAR 0 3
43093: PPUSH
43094: CALL 32962 0 1
// exit ;
43098: POP
43099: POP
43100: GO 43106
// end ; end ;
43102: GO 43032
43104: POP
43105: POP
// end ;
43106: LD_VAR 0 1
43110: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
43111: LD_INT 0
43113: PPUSH
43114: PPUSH
43115: PPUSH
43116: PPUSH
43117: PPUSH
43118: PPUSH
43119: PPUSH
// if not mc_bases then
43120: LD_EXP 5
43124: NOT
43125: IFFALSE 43129
// exit ;
43127: GO 43474
// class := AllowSpecClass ( mc_defender [ 1 ] ) ;
43129: LD_ADDR_VAR 0 7
43133: PUSH
43134: LD_EXP 26
43138: PUSH
43139: LD_INT 1
43141: ARRAY
43142: PPUSH
43143: CALL 2804 0 1
43147: ST_TO_ADDR
// for i = 1 to mc_bases do
43148: LD_ADDR_VAR 0 2
43152: PUSH
43153: DOUBLE
43154: LD_INT 1
43156: DEC
43157: ST_TO_ADDR
43158: LD_EXP 5
43162: PUSH
43163: FOR_TO
43164: IFFALSE 43472
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ 1 ] ) , mc_scan_area [ i ] ) ) ;
43166: LD_ADDR_EXP 27
43170: PUSH
43171: LD_EXP 27
43175: PPUSH
43176: LD_VAR 0 2
43180: PPUSH
43181: LD_EXP 5
43185: PUSH
43186: LD_INT 1
43188: ARRAY
43189: PPUSH
43190: CALL_OW 255
43194: PPUSH
43195: LD_EXP 29
43199: PUSH
43200: LD_VAR 0 2
43204: ARRAY
43205: PPUSH
43206: CALL 1253 0 2
43210: PPUSH
43211: CALL_OW 1
43215: ST_TO_ADDR
// if not mc_scan [ i ] then
43216: LD_EXP 27
43220: PUSH
43221: LD_VAR 0 2
43225: ARRAY
43226: NOT
43227: IFFALSE 43379
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
43229: LD_ADDR_VAR 0 4
43233: PUSH
43234: LD_EXP 5
43238: PUSH
43239: LD_VAR 0 2
43243: ARRAY
43244: PPUSH
43245: LD_INT 2
43247: PUSH
43248: LD_INT 25
43250: PUSH
43251: LD_INT 5
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 25
43260: PUSH
43261: LD_INT 8
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 25
43270: PUSH
43271: LD_INT 9
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: PPUSH
43284: CALL_OW 72
43288: ST_TO_ADDR
// if not tmp then
43289: LD_VAR 0 4
43293: NOT
43294: IFFALSE 43298
// continue ;
43296: GO 43163
// for j in tmp do
43298: LD_ADDR_VAR 0 3
43302: PUSH
43303: LD_VAR 0 4
43307: PUSH
43308: FOR_IN
43309: IFFALSE 43377
// if GetBType ( IsInUnit ( j ) ) in [ b_barracks ] and GetClass ( j ) = 1 and not MineOfUnit ( j ) then
43311: LD_VAR 0 3
43315: PPUSH
43316: CALL_OW 310
43320: PPUSH
43321: CALL_OW 266
43325: PUSH
43326: LD_INT 5
43328: PUSH
43329: EMPTY
43330: LIST
43331: IN
43332: PUSH
43333: LD_VAR 0 3
43337: PPUSH
43338: CALL_OW 257
43342: PUSH
43343: LD_INT 1
43345: EQUAL
43346: AND
43347: PUSH
43348: LD_VAR 0 3
43352: PPUSH
43353: CALL_OW 459
43357: NOT
43358: AND
43359: IFFALSE 43375
// ComChangeProfession ( j , class ) ;
43361: LD_VAR 0 3
43365: PPUSH
43366: LD_VAR 0 7
43370: PPUSH
43371: CALL_OW 123
43375: GO 43308
43377: POP
43378: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
43379: LD_EXP 27
43383: PUSH
43384: LD_VAR 0 2
43388: ARRAY
43389: PUSH
43390: LD_EXP 26
43394: PUSH
43395: LD_VAR 0 2
43399: ARRAY
43400: AND
43401: IFFALSE 43470
// begin tmp := mc_defender [ i ] ;
43403: LD_ADDR_VAR 0 4
43407: PUSH
43408: LD_EXP 26
43412: PUSH
43413: LD_VAR 0 2
43417: ARRAY
43418: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
43419: LD_ADDR_EXP 26
43423: PUSH
43424: LD_EXP 26
43428: PPUSH
43429: LD_VAR 0 2
43433: PPUSH
43434: EMPTY
43435: PPUSH
43436: CALL_OW 1
43440: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
43441: LD_VAR 0 2
43445: PPUSH
43446: LD_VAR 0 4
43450: PPUSH
43451: LD_EXP 27
43455: PUSH
43456: LD_VAR 0 2
43460: ARRAY
43461: PPUSH
43462: CALL 1288 0 3
// exit ;
43466: POP
43467: POP
43468: GO 43474
// end ; end ;
43470: GO 43163
43472: POP
43473: POP
// end ;
43474: LD_VAR 0 1
43478: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci ; begin
43479: LD_INT 0
43481: PPUSH
43482: PPUSH
43483: PPUSH
43484: PPUSH
43485: PPUSH
43486: PPUSH
43487: PPUSH
43488: PPUSH
// if not mc_bases then
43489: LD_EXP 5
43493: NOT
43494: IFFALSE 43498
// exit ;
43496: GO 43869
// for i = 1 to mc_bases do
43498: LD_ADDR_VAR 0 2
43502: PUSH
43503: DOUBLE
43504: LD_INT 1
43506: DEC
43507: ST_TO_ADDR
43508: LD_EXP 5
43512: PUSH
43513: FOR_TO
43514: IFFALSE 43867
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
43516: LD_ADDR_VAR 0 6
43520: PUSH
43521: LD_EXP 5
43525: PUSH
43526: LD_VAR 0 2
43530: ARRAY
43531: PPUSH
43532: LD_INT 2
43534: PUSH
43535: LD_INT 30
43537: PUSH
43538: LD_INT 6
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 30
43547: PUSH
43548: LD_INT 7
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 30
43557: PUSH
43558: LD_INT 8
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: PPUSH
43571: CALL_OW 72
43575: ST_TO_ADDR
// if not tmp then
43576: LD_VAR 0 6
43580: NOT
43581: IFFALSE 43585
// continue ;
43583: GO 43513
// for j in tmp do
43585: LD_ADDR_VAR 0 3
43589: PUSH
43590: LD_VAR 0 6
43594: PUSH
43595: FOR_IN
43596: IFFALSE 43863
// begin side := GetSide ( j ) ;
43598: LD_ADDR_VAR 0 4
43602: PUSH
43603: LD_VAR 0 3
43607: PPUSH
43608: CALL_OW 255
43612: ST_TO_ADDR
// if not mc_tech [ side ] then
43613: LD_EXP 31
43617: PUSH
43618: LD_VAR 0 4
43622: ARRAY
43623: NOT
43624: IFFALSE 43628
// continue ;
43626: GO 43595
// if BuildingStatus ( j ) = bs_idle then
43628: LD_VAR 0 3
43632: PPUSH
43633: CALL_OW 461
43637: PUSH
43638: LD_INT 2
43640: EQUAL
43641: IFFALSE 43698
// for t in mc_tech [ side ] do
43643: LD_ADDR_VAR 0 5
43647: PUSH
43648: LD_EXP 31
43652: PUSH
43653: LD_VAR 0 4
43657: ARRAY
43658: PUSH
43659: FOR_IN
43660: IFFALSE 43696
// if CanBeResearched ( j , t ) then
43662: LD_VAR 0 3
43666: PPUSH
43667: LD_VAR 0 5
43671: PPUSH
43672: CALL_OW 430
43676: IFFALSE 43694
// begin ComResearch ( j , t ) ;
43678: LD_VAR 0 3
43682: PPUSH
43683: LD_VAR 0 5
43687: PPUSH
43688: CALL_OW 124
// break ;
43692: GO 43696
// end ;
43694: GO 43659
43696: POP
43697: POP
// if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
43698: LD_VAR 0 3
43702: PPUSH
43703: CALL_OW 461
43707: PUSH
43708: LD_INT 6
43710: EQUAL
43711: PUSH
43712: LD_VAR 0 6
43716: PUSH
43717: LD_INT 1
43719: GREATER
43720: AND
43721: IFFALSE 43861
// begin sci := [ ] ;
43723: LD_ADDR_VAR 0 8
43727: PUSH
43728: EMPTY
43729: ST_TO_ADDR
// for x in tmp diff j do
43730: LD_ADDR_VAR 0 7
43734: PUSH
43735: LD_VAR 0 6
43739: PUSH
43740: LD_VAR 0 3
43744: DIFF
43745: PUSH
43746: FOR_IN
43747: IFFALSE 43787
// begin if BuildingStatus ( x ) = bs_idle then
43749: LD_VAR 0 7
43753: PPUSH
43754: CALL_OW 461
43758: PUSH
43759: LD_INT 2
43761: EQUAL
43762: IFFALSE 43785
// sci := sci ^ UnitsInside ( x ) ;
43764: LD_ADDR_VAR 0 8
43768: PUSH
43769: LD_VAR 0 8
43773: PUSH
43774: LD_VAR 0 7
43778: PPUSH
43779: CALL_OW 313
43783: ADD
43784: ST_TO_ADDR
// end ;
43785: GO 43746
43787: POP
43788: POP
// if not sci then
43789: LD_VAR 0 8
43793: NOT
43794: IFFALSE 43798
// continue ;
43796: GO 43595
// for x in sci do
43798: LD_ADDR_VAR 0 7
43802: PUSH
43803: LD_VAR 0 8
43807: PUSH
43808: FOR_IN
43809: IFFALSE 43859
// if IsInUnit ( x ) and not HasTask ( x ) then
43811: LD_VAR 0 7
43815: PPUSH
43816: CALL_OW 310
43820: PUSH
43821: LD_VAR 0 7
43825: PPUSH
43826: CALL_OW 314
43830: NOT
43831: AND
43832: IFFALSE 43857
// begin ComExitBuilding ( x ) ;
43834: LD_VAR 0 7
43838: PPUSH
43839: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
43843: LD_VAR 0 7
43847: PPUSH
43848: LD_VAR 0 3
43852: PPUSH
43853: CALL_OW 180
// end ;
43857: GO 43808
43859: POP
43860: POP
// end ; end ;
43861: GO 43595
43863: POP
43864: POP
// end ;
43865: GO 43513
43867: POP
43868: POP
// end ;
43869: LD_VAR 0 1
43873: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
43874: LD_INT 0
43876: PPUSH
43877: PPUSH
43878: PPUSH
43879: PPUSH
43880: PPUSH
43881: PPUSH
// if not mc_bases then
43882: LD_EXP 5
43886: NOT
43887: IFFALSE 43891
// exit ;
43889: GO 44130
// for i = 1 to 8 do
43891: LD_ADDR_VAR 0 2
43895: PUSH
43896: DOUBLE
43897: LD_INT 1
43899: DEC
43900: ST_TO_ADDR
43901: LD_INT 8
43903: PUSH
43904: FOR_TO
43905: IFFALSE 43931
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
43907: LD_ADDR_EXP 31
43911: PUSH
43912: LD_EXP 31
43916: PPUSH
43917: LD_VAR 0 2
43921: PPUSH
43922: EMPTY
43923: PPUSH
43924: CALL_OW 1
43928: ST_TO_ADDR
43929: GO 43904
43931: POP
43932: POP
// tmp := [ ] ;
43933: LD_ADDR_VAR 0 5
43937: PUSH
43938: EMPTY
43939: ST_TO_ADDR
// for i = 1 to mc_sides do
43940: LD_ADDR_VAR 0 2
43944: PUSH
43945: DOUBLE
43946: LD_INT 1
43948: DEC
43949: ST_TO_ADDR
43950: LD_EXP 30
43954: PUSH
43955: FOR_TO
43956: IFFALSE 44014
// if not mc_sides [ i ] in tmp then
43958: LD_EXP 30
43962: PUSH
43963: LD_VAR 0 2
43967: ARRAY
43968: PUSH
43969: LD_VAR 0 5
43973: IN
43974: NOT
43975: IFFALSE 44012
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
43977: LD_ADDR_VAR 0 5
43981: PUSH
43982: LD_VAR 0 5
43986: PPUSH
43987: LD_VAR 0 5
43991: PUSH
43992: LD_INT 1
43994: PLUS
43995: PPUSH
43996: LD_EXP 30
44000: PUSH
44001: LD_VAR 0 2
44005: ARRAY
44006: PPUSH
44007: CALL_OW 2
44011: ST_TO_ADDR
44012: GO 43955
44014: POP
44015: POP
// if not tmp then
44016: LD_VAR 0 5
44020: NOT
44021: IFFALSE 44025
// exit ;
44023: GO 44130
// for j in tmp do
44025: LD_ADDR_VAR 0 3
44029: PUSH
44030: LD_VAR 0 5
44034: PUSH
44035: FOR_IN
44036: IFFALSE 44128
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
44038: LD_ADDR_VAR 0 6
44042: PUSH
44043: LD_INT 22
44045: PUSH
44046: LD_VAR 0 3
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PPUSH
44055: CALL_OW 69
44059: ST_TO_ADDR
// if not un then
44060: LD_VAR 0 6
44064: NOT
44065: IFFALSE 44069
// continue ;
44067: GO 44035
// nation := GetNation ( un [ 1 ] ) ;
44069: LD_ADDR_VAR 0 4
44073: PUSH
44074: LD_VAR 0 6
44078: PUSH
44079: LD_INT 1
44081: ARRAY
44082: PPUSH
44083: CALL_OW 248
44087: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
44088: LD_ADDR_EXP 31
44092: PUSH
44093: LD_EXP 31
44097: PPUSH
44098: LD_VAR 0 3
44102: PPUSH
44103: LD_VAR 0 3
44107: PPUSH
44108: LD_VAR 0 4
44112: PPUSH
44113: LD_INT 1
44115: PPUSH
44116: CALL 616 0 3
44120: PPUSH
44121: CALL_OW 1
44125: ST_TO_ADDR
// end ;
44126: GO 44035
44128: POP
44129: POP
// end ;
44130: LD_VAR 0 1
44134: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
44135: LD_INT 0
44137: PPUSH
44138: PPUSH
44139: PPUSH
44140: PPUSH
44141: PPUSH
44142: PPUSH
44143: PPUSH
44144: PPUSH
// if not mc_bases then
44145: LD_EXP 5
44149: NOT
44150: IFFALSE 44154
// exit ;
44152: GO 44799
// for i = 1 to mc_bases do
44154: LD_ADDR_VAR 0 2
44158: PUSH
44159: DOUBLE
44160: LD_INT 1
44162: DEC
44163: ST_TO_ADDR
44164: LD_EXP 5
44168: PUSH
44169: FOR_TO
44170: IFFALSE 44797
// begin if not mc_bases [ i ] then
44172: LD_EXP 5
44176: PUSH
44177: LD_VAR 0 2
44181: ARRAY
44182: NOT
44183: IFFALSE 44187
// continue ;
44185: GO 44169
// if mc_scan [ i ] then
44187: LD_EXP 27
44191: PUSH
44192: LD_VAR 0 2
44196: ARRAY
44197: IFFALSE 44223
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
44199: LD_ADDR_EXP 17
44203: PUSH
44204: LD_EXP 17
44208: PPUSH
44209: LD_VAR 0 2
44213: PPUSH
44214: EMPTY
44215: PPUSH
44216: CALL_OW 1
44220: ST_TO_ADDR
// continue ;
44221: GO 44169
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
44223: LD_ADDR_VAR 0 5
44227: PUSH
44228: LD_EXP 5
44232: PUSH
44233: LD_VAR 0 2
44237: ARRAY
44238: PUSH
44239: LD_INT 1
44241: ARRAY
44242: PPUSH
44243: CALL_OW 255
44247: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
44248: LD_ADDR_VAR 0 6
44252: PUSH
44253: LD_EXP 5
44257: PUSH
44258: LD_VAR 0 2
44262: ARRAY
44263: PPUSH
44264: LD_INT 30
44266: PUSH
44267: LD_INT 3
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PPUSH
44274: CALL_OW 72
44278: ST_TO_ADDR
// if not fac then
44279: LD_VAR 0 6
44283: NOT
44284: IFFALSE 44335
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
44286: LD_ADDR_VAR 0 6
44290: PUSH
44291: LD_EXP 5
44295: PUSH
44296: LD_VAR 0 2
44300: ARRAY
44301: PPUSH
44302: LD_INT 2
44304: PUSH
44305: LD_INT 30
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 30
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: LIST
44329: PPUSH
44330: CALL_OW 72
44334: ST_TO_ADDR
// if not fac then
44335: LD_VAR 0 6
44339: NOT
44340: IFFALSE 44344
// continue ;
44342: GO 44169
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
44344: LD_ADDR_VAR 0 7
44348: PUSH
44349: LD_EXP 28
44353: PUSH
44354: LD_VAR 0 2
44358: ARRAY
44359: PPUSH
44360: LD_INT 22
44362: PUSH
44363: LD_VAR 0 5
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 21
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 3
44384: PUSH
44385: LD_INT 24
44387: PUSH
44388: LD_INT 1000
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: LIST
44403: PPUSH
44404: CALL_OW 70
44408: PUSH
44409: LD_INT 22
44411: PUSH
44412: LD_VAR 0 5
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 91
44423: PUSH
44424: LD_VAR 0 6
44428: PUSH
44429: LD_INT 1
44431: ARRAY
44432: PUSH
44433: LD_INT 25
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 21
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 3
44453: PUSH
44454: LD_INT 24
44456: PUSH
44457: LD_INT 1000
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: PPUSH
44474: CALL_OW 69
44478: UNION
44479: ST_TO_ADDR
// if not vehs then
44480: LD_VAR 0 7
44484: NOT
44485: IFFALSE 44511
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
44487: LD_ADDR_EXP 17
44491: PUSH
44492: LD_EXP 17
44496: PPUSH
44497: LD_VAR 0 2
44501: PPUSH
44502: EMPTY
44503: PPUSH
44504: CALL_OW 1
44508: ST_TO_ADDR
// continue ;
44509: GO 44169
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
44511: LD_ADDR_VAR 0 8
44515: PUSH
44516: LD_EXP 5
44520: PUSH
44521: LD_VAR 0 2
44525: ARRAY
44526: PPUSH
44527: LD_INT 30
44529: PUSH
44530: LD_INT 3
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PPUSH
44537: CALL_OW 72
44541: ST_TO_ADDR
// if tmp then
44542: LD_VAR 0 8
44546: IFFALSE 44649
// begin for j in tmp do
44548: LD_ADDR_VAR 0 3
44552: PUSH
44553: LD_VAR 0 8
44557: PUSH
44558: FOR_IN
44559: IFFALSE 44647
// for k in UnitsInside ( j ) do
44561: LD_ADDR_VAR 0 4
44565: PUSH
44566: LD_VAR 0 3
44570: PPUSH
44571: CALL_OW 313
44575: PUSH
44576: FOR_IN
44577: IFFALSE 44643
// if k then
44579: LD_VAR 0 4
44583: IFFALSE 44641
// if not k in mc_repair_vehicle [ i ] then
44585: LD_VAR 0 4
44589: PUSH
44590: LD_EXP 17
44594: PUSH
44595: LD_VAR 0 2
44599: ARRAY
44600: IN
44601: NOT
44602: IFFALSE 44641
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
44604: LD_ADDR_EXP 17
44608: PUSH
44609: LD_EXP 17
44613: PPUSH
44614: LD_VAR 0 2
44618: PPUSH
44619: LD_EXP 17
44623: PUSH
44624: LD_VAR 0 2
44628: ARRAY
44629: PUSH
44630: LD_VAR 0 4
44634: UNION
44635: PPUSH
44636: CALL_OW 1
44640: ST_TO_ADDR
44641: GO 44576
44643: POP
44644: POP
44645: GO 44558
44647: POP
44648: POP
// end ; if not mc_repair_vehicle [ i ] then
44649: LD_EXP 17
44653: PUSH
44654: LD_VAR 0 2
44658: ARRAY
44659: NOT
44660: IFFALSE 44664
// continue ;
44662: GO 44169
// for j in mc_repair_vehicle [ i ] do
44664: LD_ADDR_VAR 0 3
44668: PUSH
44669: LD_EXP 17
44673: PUSH
44674: LD_VAR 0 2
44678: ARRAY
44679: PUSH
44680: FOR_IN
44681: IFFALSE 44793
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
44683: LD_VAR 0 3
44687: PPUSH
44688: CALL_OW 311
44692: NOT
44693: PUSH
44694: LD_VAR 0 3
44698: PUSH
44699: LD_EXP 8
44703: PUSH
44704: LD_VAR 0 2
44708: ARRAY
44709: PUSH
44710: LD_INT 1
44712: ARRAY
44713: IN
44714: NOT
44715: AND
44716: PUSH
44717: LD_VAR 0 3
44721: PUSH
44722: LD_EXP 8
44726: PUSH
44727: LD_VAR 0 2
44731: ARRAY
44732: PUSH
44733: LD_INT 2
44735: ARRAY
44736: IN
44737: NOT
44738: AND
44739: IFFALSE 44791
// begin if IsInUnit ( j ) then
44741: LD_VAR 0 3
44745: PPUSH
44746: CALL_OW 310
44750: IFFALSE 44761
// ComExitBuilding ( j ) ;
44752: LD_VAR 0 3
44756: PPUSH
44757: CALL_OW 122
// if not HasTask ( j ) then
44761: LD_VAR 0 3
44765: PPUSH
44766: CALL_OW 314
44770: NOT
44771: IFFALSE 44791
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
44773: LD_VAR 0 3
44777: PPUSH
44778: LD_VAR 0 7
44782: PUSH
44783: LD_INT 1
44785: ARRAY
44786: PPUSH
44787: CALL_OW 189
// end ; end ;
44791: GO 44680
44793: POP
44794: POP
// end ;
44795: GO 44169
44797: POP
44798: POP
// end ;
44799: LD_VAR 0 1
44803: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
44804: LD_INT 0
44806: PPUSH
44807: PPUSH
44808: PPUSH
44809: PPUSH
44810: PPUSH
44811: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] then
44812: LD_VAR 0 1
44816: NOT
44817: PUSH
44818: LD_VAR 0 2
44822: NOT
44823: OR
44824: PUSH
44825: LD_VAR 0 3
44829: NOT
44830: OR
44831: PUSH
44832: LD_VAR 0 4
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: LD_INT 3
44845: PUSH
44846: LD_INT 4
44848: PUSH
44849: LD_INT 5
44851: PUSH
44852: LD_INT 8
44854: PUSH
44855: LD_INT 9
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: IN
44867: NOT
44868: OR
44869: IFFALSE 44873
// exit ;
44871: GO 45783
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
44873: LD_ADDR_VAR 0 2
44877: PUSH
44878: LD_VAR 0 2
44882: PPUSH
44883: LD_INT 21
44885: PUSH
44886: LD_INT 3
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 24
44895: PUSH
44896: LD_INT 250
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PPUSH
44907: CALL_OW 72
44911: ST_TO_ADDR
// case class of 1 :
44912: LD_VAR 0 4
44916: PUSH
44917: LD_INT 1
44919: DOUBLE
44920: EQUAL
44921: IFTRUE 44925
44923: GO 45010
44925: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
44926: LD_ADDR_VAR 0 8
44930: PUSH
44931: LD_VAR 0 2
44935: PPUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 30
44941: PUSH
44942: LD_INT 32
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 30
44951: PUSH
44952: LD_INT 31
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: LIST
44963: PPUSH
44964: CALL_OW 72
44968: PUSH
44969: LD_VAR 0 2
44973: PPUSH
44974: LD_INT 2
44976: PUSH
44977: LD_INT 30
44979: PUSH
44980: LD_INT 4
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 30
44989: PUSH
44990: LD_INT 5
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: LIST
45001: PPUSH
45002: CALL_OW 72
45006: ADD
45007: ST_TO_ADDR
45008: GO 45250
45010: LD_INT 2
45012: DOUBLE
45013: EQUAL
45014: IFTRUE 45018
45016: GO 45064
45018: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
45019: LD_ADDR_VAR 0 8
45023: PUSH
45024: LD_VAR 0 2
45028: PPUSH
45029: LD_INT 2
45031: PUSH
45032: LD_INT 30
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 30
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: PPUSH
45057: CALL_OW 72
45061: ST_TO_ADDR
45062: GO 45250
45064: LD_INT 3
45066: DOUBLE
45067: EQUAL
45068: IFTRUE 45072
45070: GO 45118
45072: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
45073: LD_ADDR_VAR 0 8
45077: PUSH
45078: LD_VAR 0 2
45082: PPUSH
45083: LD_INT 2
45085: PUSH
45086: LD_INT 30
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 30
45098: PUSH
45099: LD_INT 3
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: LIST
45110: PPUSH
45111: CALL_OW 72
45115: ST_TO_ADDR
45116: GO 45250
45118: LD_INT 4
45120: DOUBLE
45121: EQUAL
45122: IFTRUE 45126
45124: GO 45183
45126: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
45127: LD_ADDR_VAR 0 8
45131: PUSH
45132: LD_VAR 0 2
45136: PPUSH
45137: LD_INT 2
45139: PUSH
45140: LD_INT 30
45142: PUSH
45143: LD_INT 6
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 30
45152: PUSH
45153: LD_INT 7
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 30
45162: PUSH
45163: LD_INT 8
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: PPUSH
45176: CALL_OW 72
45180: ST_TO_ADDR
45181: GO 45250
45183: LD_INT 5
45185: DOUBLE
45186: EQUAL
45187: IFTRUE 45203
45189: LD_INT 8
45191: DOUBLE
45192: EQUAL
45193: IFTRUE 45203
45195: LD_INT 9
45197: DOUBLE
45198: EQUAL
45199: IFTRUE 45203
45201: GO 45249
45203: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
45204: LD_ADDR_VAR 0 8
45208: PUSH
45209: LD_VAR 0 2
45213: PPUSH
45214: LD_INT 2
45216: PUSH
45217: LD_INT 30
45219: PUSH
45220: LD_INT 4
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 30
45229: PUSH
45230: LD_INT 5
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: LIST
45241: PPUSH
45242: CALL_OW 72
45246: ST_TO_ADDR
45247: GO 45250
45249: POP
// if not tmp then
45250: LD_VAR 0 8
45254: NOT
45255: IFFALSE 45259
// exit ;
45257: GO 45783
// if class = 1 and mc_empty_turret_list [ base ] then
45259: LD_VAR 0 4
45263: PUSH
45264: LD_INT 1
45266: EQUAL
45267: PUSH
45268: LD_EXP 14
45272: PUSH
45273: LD_VAR 0 1
45277: ARRAY
45278: AND
45279: IFFALSE 45435
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
45281: LD_ADDR_VAR 0 9
45285: PUSH
45286: LD_EXP 14
45290: PUSH
45291: LD_VAR 0 1
45295: ARRAY
45296: PUSH
45297: LD_INT 1
45299: ARRAY
45300: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
45301: LD_VAR 0 9
45305: PUSH
45306: LD_EXP 15
45310: PUSH
45311: LD_VAR 0 1
45315: ARRAY
45316: IN
45317: NOT
45318: IFFALSE 45433
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
45320: LD_ADDR_EXP 15
45324: PUSH
45325: LD_EXP 15
45329: PPUSH
45330: LD_VAR 0 1
45334: PUSH
45335: LD_EXP 15
45339: PUSH
45340: LD_VAR 0 1
45344: ARRAY
45345: PUSH
45346: LD_INT 1
45348: PLUS
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PPUSH
45354: LD_VAR 0 9
45358: PPUSH
45359: CALL 6278 0 3
45363: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
45364: LD_ADDR_EXP 14
45368: PUSH
45369: LD_EXP 14
45373: PPUSH
45374: LD_VAR 0 1
45378: PPUSH
45379: LD_EXP 14
45383: PUSH
45384: LD_VAR 0 1
45388: ARRAY
45389: PUSH
45390: LD_VAR 0 9
45394: DIFF
45395: PPUSH
45396: CALL_OW 1
45400: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
45401: LD_VAR 0 3
45405: PPUSH
45406: LD_EXP 15
45410: PUSH
45411: LD_VAR 0 1
45415: ARRAY
45416: PUSH
45417: LD_EXP 15
45421: PUSH
45422: LD_VAR 0 1
45426: ARRAY
45427: ARRAY
45428: PPUSH
45429: CALL_OW 120
// end ; exit ;
45433: GO 45783
// end ; if tmp > 1 then
45435: LD_VAR 0 8
45439: PUSH
45440: LD_INT 1
45442: GREATER
45443: IFFALSE 45547
// for i = 2 to tmp do
45445: LD_ADDR_VAR 0 6
45449: PUSH
45450: DOUBLE
45451: LD_INT 2
45453: DEC
45454: ST_TO_ADDR
45455: LD_VAR 0 8
45459: PUSH
45460: FOR_TO
45461: IFFALSE 45545
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
45463: LD_VAR 0 8
45467: PUSH
45468: LD_VAR 0 6
45472: ARRAY
45473: PPUSH
45474: CALL_OW 461
45478: PUSH
45479: LD_INT 6
45481: EQUAL
45482: IFFALSE 45543
// begin x := tmp [ i ] ;
45484: LD_ADDR_VAR 0 9
45488: PUSH
45489: LD_VAR 0 8
45493: PUSH
45494: LD_VAR 0 6
45498: ARRAY
45499: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
45500: LD_ADDR_VAR 0 8
45504: PUSH
45505: LD_VAR 0 8
45509: PPUSH
45510: LD_VAR 0 6
45514: PPUSH
45515: CALL_OW 3
45519: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
45520: LD_ADDR_VAR 0 8
45524: PUSH
45525: LD_VAR 0 8
45529: PPUSH
45530: LD_INT 1
45532: PPUSH
45533: LD_VAR 0 9
45537: PPUSH
45538: CALL_OW 2
45542: ST_TO_ADDR
// end ;
45543: GO 45460
45545: POP
45546: POP
// for i in tmp do
45547: LD_ADDR_VAR 0 6
45551: PUSH
45552: LD_VAR 0 8
45556: PUSH
45557: FOR_IN
45558: IFFALSE 45627
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
45560: LD_VAR 0 6
45564: PPUSH
45565: CALL_OW 313
45569: PUSH
45570: LD_INT 6
45572: LESS
45573: PUSH
45574: LD_VAR 0 6
45578: PPUSH
45579: CALL_OW 266
45583: PUSH
45584: LD_INT 31
45586: PUSH
45587: LD_INT 32
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: IN
45594: NOT
45595: AND
45596: PUSH
45597: LD_VAR 0 6
45601: PPUSH
45602: CALL_OW 313
45606: PUSH
45607: LD_INT 0
45609: EQUAL
45610: OR
45611: IFFALSE 45625
// begin j := i ;
45613: LD_ADDR_VAR 0 7
45617: PUSH
45618: LD_VAR 0 6
45622: ST_TO_ADDR
// break ;
45623: GO 45627
// end ; end ;
45625: GO 45557
45627: POP
45628: POP
// if j then
45629: LD_VAR 0 7
45633: IFFALSE 45651
// ComEnterUnit ( unit , j ) else
45635: LD_VAR 0 3
45639: PPUSH
45640: LD_VAR 0 7
45644: PPUSH
45645: CALL_OW 120
45649: GO 45783
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
45651: LD_ADDR_VAR 0 10
45655: PUSH
45656: LD_VAR 0 2
45660: PPUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 30
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 30
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: LIST
45688: PPUSH
45689: CALL_OW 72
45693: ST_TO_ADDR
// if depot then
45694: LD_VAR 0 10
45698: IFFALSE 45783
// begin if GetDistUnits ( unit , depot [ 1 ] ) > 10 then
45700: LD_VAR 0 3
45704: PPUSH
45705: LD_VAR 0 10
45709: PUSH
45710: LD_INT 1
45712: ARRAY
45713: PPUSH
45714: CALL_OW 296
45718: PUSH
45719: LD_INT 10
45721: GREATER
45722: IFFALSE 45783
// ComMoveXY ( unit , ShiftX ( GetX ( depot [ 1 ] ) , 3 , 3 ) , ShiftY ( GetY ( depot [ 1 ] ) , 3 , 3 ) ) ;
45724: LD_VAR 0 3
45728: PPUSH
45729: LD_VAR 0 10
45733: PUSH
45734: LD_INT 1
45736: ARRAY
45737: PPUSH
45738: CALL_OW 250
45742: PPUSH
45743: LD_INT 3
45745: PPUSH
45746: LD_INT 3
45748: PPUSH
45749: CALL_OW 272
45753: PPUSH
45754: LD_VAR 0 10
45758: PUSH
45759: LD_INT 1
45761: ARRAY
45762: PPUSH
45763: CALL_OW 251
45767: PPUSH
45768: LD_INT 3
45770: PPUSH
45771: LD_INT 3
45773: PPUSH
45774: CALL_OW 273
45778: PPUSH
45779: CALL_OW 111
// end ; end ; end ;
45783: LD_VAR 0 5
45787: RET
// export function MC_Idle ( ) ; var i , j , x , tmp , tmp2 , tower ; begin
45788: LD_INT 0
45790: PPUSH
45791: PPUSH
45792: PPUSH
45793: PPUSH
45794: PPUSH
45795: PPUSH
45796: PPUSH
// if not mc_bases then
45797: LD_EXP 5
45801: NOT
45802: IFFALSE 45806
// exit ;
45804: GO 46035
// for i = 1 to mc_bases do
45806: LD_ADDR_VAR 0 2
45810: PUSH
45811: DOUBLE
45812: LD_INT 1
45814: DEC
45815: ST_TO_ADDR
45816: LD_EXP 5
45820: PUSH
45821: FOR_TO
45822: IFFALSE 46033
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
45824: LD_ADDR_VAR 0 5
45828: PUSH
45829: LD_EXP 5
45833: PUSH
45834: LD_VAR 0 2
45838: ARRAY
45839: PPUSH
45840: LD_INT 21
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PPUSH
45850: CALL_OW 72
45854: ST_TO_ADDR
// if not tmp then
45855: LD_VAR 0 5
45859: NOT
45860: IFFALSE 45866
// exit ;
45862: POP
45863: POP
45864: GO 46035
// for j in tmp do
45866: LD_ADDR_VAR 0 3
45870: PUSH
45871: LD_VAR 0 5
45875: PUSH
45876: FOR_IN
45877: IFFALSE 46029
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
45879: LD_VAR 0 3
45883: PPUSH
45884: CALL_OW 110
45888: NOT
45889: PUSH
45890: LD_VAR 0 3
45894: PPUSH
45895: CALL_OW 314
45899: NOT
45900: AND
45901: PUSH
45902: LD_VAR 0 3
45906: PPUSH
45907: CALL_OW 311
45911: NOT
45912: AND
45913: PUSH
45914: LD_VAR 0 3
45918: PPUSH
45919: CALL_OW 310
45923: NOT
45924: AND
45925: PUSH
45926: LD_VAR 0 3
45930: PUSH
45931: LD_EXP 8
45935: PUSH
45936: LD_VAR 0 2
45940: ARRAY
45941: PUSH
45942: LD_INT 1
45944: ARRAY
45945: IN
45946: NOT
45947: AND
45948: PUSH
45949: LD_VAR 0 3
45953: PUSH
45954: LD_EXP 8
45958: PUSH
45959: LD_VAR 0 2
45963: ARRAY
45964: PUSH
45965: LD_INT 2
45967: ARRAY
45968: IN
45969: NOT
45970: AND
45971: PUSH
45972: LD_VAR 0 3
45976: PUSH
45977: LD_EXP 17
45981: PUSH
45982: LD_VAR 0 2
45986: ARRAY
45987: IN
45988: NOT
45989: AND
45990: IFFALSE 46027
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
45992: LD_VAR 0 2
45996: PPUSH
45997: LD_EXP 5
46001: PUSH
46002: LD_VAR 0 2
46006: ARRAY
46007: PPUSH
46008: LD_VAR 0 3
46012: PPUSH
46013: LD_VAR 0 3
46017: PPUSH
46018: CALL_OW 257
46022: PPUSH
46023: CALL 44804 0 4
// end ;
46027: GO 45876
46029: POP
46030: POP
// end ;
46031: GO 45821
46033: POP
46034: POP
// end ;
46035: LD_VAR 0 1
46039: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
46040: LD_INT 0
46042: PPUSH
46043: PPUSH
46044: PPUSH
46045: PPUSH
46046: PPUSH
46047: PPUSH
// if not mc_bases [ base ] then
46048: LD_EXP 5
46052: PUSH
46053: LD_VAR 0 1
46057: ARRAY
46058: NOT
46059: IFFALSE 46063
// exit ;
46061: GO 46245
// tmp := [ ] ;
46063: LD_ADDR_VAR 0 6
46067: PUSH
46068: EMPTY
46069: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
46070: LD_ADDR_VAR 0 7
46074: PUSH
46075: LD_VAR 0 3
46079: PPUSH
46080: LD_INT 0
46082: PPUSH
46083: CALL_OW 517
46087: ST_TO_ADDR
// if not list then
46088: LD_VAR 0 7
46092: NOT
46093: IFFALSE 46097
// exit ;
46095: GO 46245
// for i = 1 to amount do
46097: LD_ADDR_VAR 0 5
46101: PUSH
46102: DOUBLE
46103: LD_INT 1
46105: DEC
46106: ST_TO_ADDR
46107: LD_VAR 0 2
46111: PUSH
46112: FOR_TO
46113: IFFALSE 46193
// begin x := rand ( 1 , list [ 1 ] ) ;
46115: LD_ADDR_VAR 0 8
46119: PUSH
46120: LD_INT 1
46122: PPUSH
46123: LD_VAR 0 7
46127: PUSH
46128: LD_INT 1
46130: ARRAY
46131: PPUSH
46132: CALL_OW 12
46136: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
46137: LD_ADDR_VAR 0 6
46141: PUSH
46142: LD_VAR 0 6
46146: PPUSH
46147: LD_VAR 0 5
46151: PPUSH
46152: LD_VAR 0 7
46156: PUSH
46157: LD_INT 1
46159: ARRAY
46160: PUSH
46161: LD_VAR 0 8
46165: ARRAY
46166: PUSH
46167: LD_VAR 0 7
46171: PUSH
46172: LD_INT 2
46174: ARRAY
46175: PUSH
46176: LD_VAR 0 8
46180: ARRAY
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PPUSH
46186: CALL_OW 1
46190: ST_TO_ADDR
// end ;
46191: GO 46112
46193: POP
46194: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
46195: LD_ADDR_EXP 18
46199: PUSH
46200: LD_EXP 18
46204: PPUSH
46205: LD_VAR 0 1
46209: PPUSH
46210: LD_VAR 0 6
46214: PPUSH
46215: CALL_OW 1
46219: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
46220: LD_ADDR_EXP 20
46224: PUSH
46225: LD_EXP 20
46229: PPUSH
46230: LD_VAR 0 1
46234: PPUSH
46235: LD_VAR 0 3
46239: PPUSH
46240: CALL_OW 1
46244: ST_TO_ADDR
// end ;
46245: LD_VAR 0 4
46249: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
46250: LD_INT 0
46252: PPUSH
// if not mc_bases [ base ] then
46253: LD_EXP 5
46257: PUSH
46258: LD_VAR 0 1
46262: ARRAY
46263: NOT
46264: IFFALSE 46268
// exit ;
46266: GO 46293
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
46268: LD_ADDR_EXP 25
46272: PUSH
46273: LD_EXP 25
46277: PPUSH
46278: LD_VAR 0 1
46282: PPUSH
46283: LD_VAR 0 2
46287: PPUSH
46288: CALL_OW 1
46292: ST_TO_ADDR
// end ;
46293: LD_VAR 0 3
46297: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
46298: LD_INT 0
46300: PPUSH
// if not mc_bases [ base ] then
46301: LD_EXP 5
46305: PUSH
46306: LD_VAR 0 1
46310: ARRAY
46311: NOT
46312: IFFALSE 46316
// exit ;
46314: GO 46356
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
46316: LD_ADDR_EXP 25
46320: PUSH
46321: LD_EXP 25
46325: PPUSH
46326: LD_VAR 0 1
46330: PPUSH
46331: LD_EXP 25
46335: PUSH
46336: LD_VAR 0 1
46340: ARRAY
46341: PUSH
46342: LD_VAR 0 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: ADD
46350: PPUSH
46351: CALL_OW 1
46355: ST_TO_ADDR
// end ;
46356: LD_VAR 0 3
46360: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
46361: LD_INT 0
46363: PPUSH
// if not mc_bases [ base ] then
46364: LD_EXP 5
46368: PUSH
46369: LD_VAR 0 1
46373: ARRAY
46374: NOT
46375: IFFALSE 46379
// exit ;
46377: GO 46491
// mc_defender := Replace ( mc_defender , base , deflist ) ;
46379: LD_ADDR_EXP 26
46383: PUSH
46384: LD_EXP 26
46388: PPUSH
46389: LD_VAR 0 1
46393: PPUSH
46394: LD_VAR 0 2
46398: PPUSH
46399: CALL_OW 1
46403: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
46404: LD_ADDR_EXP 16
46408: PUSH
46409: LD_EXP 16
46413: PPUSH
46414: LD_VAR 0 1
46418: PPUSH
46419: LD_VAR 0 2
46423: PUSH
46424: LD_INT 0
46426: PLUS
46427: PPUSH
46428: CALL_OW 1
46432: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
46433: LD_ADDR_EXP 23
46437: PUSH
46438: LD_EXP 23
46442: PPUSH
46443: LD_VAR 0 1
46447: PPUSH
46448: LD_EXP 23
46452: PUSH
46453: LD_VAR 0 1
46457: ARRAY
46458: PUSH
46459: LD_EXP 26
46463: PUSH
46464: LD_VAR 0 1
46468: ARRAY
46469: PPUSH
46470: LD_INT 21
46472: PUSH
46473: LD_INT 2
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PPUSH
46480: CALL_OW 72
46484: UNION
46485: PPUSH
46486: CALL_OW 1
46490: ST_TO_ADDR
// end ;
46491: LD_VAR 0 3
46495: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
46496: LD_INT 0
46498: PPUSH
46499: PPUSH
46500: PPUSH
46501: PPUSH
// if not mc_bases [ base ] then
46502: LD_EXP 5
46506: PUSH
46507: LD_VAR 0 1
46511: ARRAY
46512: NOT
46513: IFFALSE 46517
// exit ;
46515: GO 46582
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
46517: LD_ADDR_EXP 24
46521: PUSH
46522: LD_EXP 24
46526: PPUSH
46527: LD_VAR 0 1
46531: PUSH
46532: LD_EXP 24
46536: PUSH
46537: LD_VAR 0 1
46541: ARRAY
46542: PUSH
46543: LD_INT 1
46545: PLUS
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PPUSH
46551: LD_VAR 0 1
46555: PUSH
46556: LD_VAR 0 2
46560: PUSH
46561: LD_VAR 0 3
46565: PUSH
46566: LD_VAR 0 4
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: PPUSH
46577: CALL 6278 0 3
46581: ST_TO_ADDR
// end ;
46582: LD_VAR 0 5
46586: RET
// export function MC_GetMinesField ( base ) ; begin
46587: LD_INT 0
46589: PPUSH
// result := mc_mines [ base ] ;
46590: LD_ADDR_VAR 0 2
46594: PUSH
46595: LD_EXP 18
46599: PUSH
46600: LD_VAR 0 1
46604: ARRAY
46605: ST_TO_ADDR
// end ;
46606: LD_VAR 0 2
46610: RET
// export function MC_GetProduceList ( base ) ; begin
46611: LD_INT 0
46613: PPUSH
// result := mc_produce [ base ] ;
46614: LD_ADDR_VAR 0 2
46618: PUSH
46619: LD_EXP 25
46623: PUSH
46624: LD_VAR 0 1
46628: ARRAY
46629: ST_TO_ADDR
// end ;
46630: LD_VAR 0 2
46634: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
46635: LD_INT 0
46637: PPUSH
46638: PPUSH
// if not mc_bases then
46639: LD_EXP 5
46643: NOT
46644: IFFALSE 46648
// exit ;
46646: GO 46713
// if mc_bases [ base ] then
46648: LD_EXP 5
46652: PUSH
46653: LD_VAR 0 1
46657: ARRAY
46658: IFFALSE 46713
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
46660: LD_ADDR_VAR 0 3
46664: PUSH
46665: LD_EXP 5
46669: PUSH
46670: LD_VAR 0 1
46674: ARRAY
46675: PPUSH
46676: LD_INT 30
46678: PUSH
46679: LD_VAR 0 2
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PPUSH
46688: CALL_OW 72
46692: ST_TO_ADDR
// if result then
46693: LD_VAR 0 3
46697: IFFALSE 46713
// result := result [ 1 ] ;
46699: LD_ADDR_VAR 0 3
46703: PUSH
46704: LD_VAR 0 3
46708: PUSH
46709: LD_INT 1
46711: ARRAY
46712: ST_TO_ADDR
// end ; end ; end_of_file
46713: LD_VAR 0 3
46717: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
46718: LD_INT 0
46720: PPUSH
46721: PPUSH
46722: PPUSH
// if not mc_bases then
46723: LD_EXP 5
46727: NOT
46728: IFFALSE 46732
// exit ;
46730: GO 46821
// for i = 1 to mc_bases do
46732: LD_ADDR_VAR 0 4
46736: PUSH
46737: DOUBLE
46738: LD_INT 1
46740: DEC
46741: ST_TO_ADDR
46742: LD_EXP 5
46746: PUSH
46747: FOR_TO
46748: IFFALSE 46819
// begin if building in mc_busy_turret_list [ i ] then
46750: LD_VAR 0 1
46754: PUSH
46755: LD_EXP 15
46759: PUSH
46760: LD_VAR 0 4
46764: ARRAY
46765: IN
46766: IFFALSE 46817
// begin tmp := mc_busy_turret_list [ i ] diff building ;
46768: LD_ADDR_VAR 0 5
46772: PUSH
46773: LD_EXP 15
46777: PUSH
46778: LD_VAR 0 4
46782: ARRAY
46783: PUSH
46784: LD_VAR 0 1
46788: DIFF
46789: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
46790: LD_ADDR_EXP 15
46794: PUSH
46795: LD_EXP 15
46799: PPUSH
46800: LD_VAR 0 4
46804: PPUSH
46805: LD_VAR 0 5
46809: PPUSH
46810: CALL_OW 1
46814: ST_TO_ADDR
// break ;
46815: GO 46819
// end ; end ;
46817: GO 46747
46819: POP
46820: POP
// end ;
46821: LD_VAR 0 3
46825: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
46826: LD_INT 0
46828: PPUSH
46829: PPUSH
46830: PPUSH
// if not mc_bases then
46831: LD_EXP 5
46835: NOT
46836: IFFALSE 46840
// exit ;
46838: GO 47039
// for i = 1 to mc_bases do
46840: LD_ADDR_VAR 0 5
46844: PUSH
46845: DOUBLE
46846: LD_INT 1
46848: DEC
46849: ST_TO_ADDR
46850: LD_EXP 5
46854: PUSH
46855: FOR_TO
46856: IFFALSE 47037
// if building in mc_bases [ i ] then
46858: LD_VAR 0 1
46862: PUSH
46863: LD_EXP 5
46867: PUSH
46868: LD_VAR 0 5
46872: ARRAY
46873: IN
46874: IFFALSE 47035
// begin tmp := mc_bases [ i ] diff building ;
46876: LD_ADDR_VAR 0 6
46880: PUSH
46881: LD_EXP 5
46885: PUSH
46886: LD_VAR 0 5
46890: ARRAY
46891: PUSH
46892: LD_VAR 0 1
46896: DIFF
46897: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
46898: LD_ADDR_EXP 5
46902: PUSH
46903: LD_EXP 5
46907: PPUSH
46908: LD_VAR 0 5
46912: PPUSH
46913: LD_VAR 0 6
46917: PPUSH
46918: CALL_OW 1
46922: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
46923: LD_VAR 0 1
46927: PUSH
46928: LD_EXP 13
46932: PUSH
46933: LD_VAR 0 5
46937: ARRAY
46938: IN
46939: IFFALSE 46978
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
46941: LD_ADDR_EXP 13
46945: PUSH
46946: LD_EXP 13
46950: PPUSH
46951: LD_VAR 0 5
46955: PPUSH
46956: LD_EXP 13
46960: PUSH
46961: LD_VAR 0 5
46965: ARRAY
46966: PUSH
46967: LD_VAR 0 1
46971: DIFF
46972: PPUSH
46973: CALL_OW 1
46977: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
46978: LD_VAR 0 1
46982: PUSH
46983: LD_EXP 14
46987: PUSH
46988: LD_VAR 0 5
46992: ARRAY
46993: IN
46994: IFFALSE 47033
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
46996: LD_ADDR_EXP 14
47000: PUSH
47001: LD_EXP 14
47005: PPUSH
47006: LD_VAR 0 5
47010: PPUSH
47011: LD_EXP 14
47015: PUSH
47016: LD_VAR 0 5
47020: ARRAY
47021: PUSH
47022: LD_VAR 0 1
47026: DIFF
47027: PPUSH
47028: CALL_OW 1
47032: ST_TO_ADDR
// break ;
47033: GO 47037
// end ;
47035: GO 46855
47037: POP
47038: POP
// end ;
47039: LD_VAR 0 4
47043: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
47044: LD_INT 0
47046: PPUSH
47047: PPUSH
47048: PPUSH
// if not mc_bases or not side in mc_sides then
47049: LD_EXP 5
47053: NOT
47054: PUSH
47055: LD_VAR 0 3
47059: PUSH
47060: LD_EXP 30
47064: IN
47065: NOT
47066: OR
47067: IFFALSE 47071
// exit ;
47069: GO 47194
// for i = 1 to mc_vehicles do
47071: LD_ADDR_VAR 0 6
47075: PUSH
47076: DOUBLE
47077: LD_INT 1
47079: DEC
47080: ST_TO_ADDR
47081: LD_EXP 23
47085: PUSH
47086: FOR_TO
47087: IFFALSE 47192
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
47089: LD_VAR 0 2
47093: PUSH
47094: LD_EXP 23
47098: PUSH
47099: LD_VAR 0 6
47103: ARRAY
47104: IN
47105: PUSH
47106: LD_VAR 0 1
47110: PUSH
47111: LD_EXP 23
47115: PUSH
47116: LD_VAR 0 6
47120: ARRAY
47121: IN
47122: OR
47123: IFFALSE 47190
// begin tmp := mc_vehicles [ i ] diff old ;
47125: LD_ADDR_VAR 0 7
47129: PUSH
47130: LD_EXP 23
47134: PUSH
47135: LD_VAR 0 6
47139: ARRAY
47140: PUSH
47141: LD_VAR 0 2
47145: DIFF
47146: ST_TO_ADDR
// tmp := tmp diff new ;
47147: LD_ADDR_VAR 0 7
47151: PUSH
47152: LD_VAR 0 7
47156: PUSH
47157: LD_VAR 0 1
47161: DIFF
47162: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
47163: LD_ADDR_EXP 23
47167: PUSH
47168: LD_EXP 23
47172: PPUSH
47173: LD_VAR 0 6
47177: PPUSH
47178: LD_VAR 0 7
47182: PPUSH
47183: CALL_OW 1
47187: ST_TO_ADDR
// break ;
47188: GO 47192
// end ;
47190: GO 47086
47192: POP
47193: POP
// end ;
47194: LD_VAR 0 5
47198: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
47199: LD_INT 0
47201: PPUSH
47202: PPUSH
47203: PPUSH
47204: PPUSH
// if not mc_bases then
47205: LD_EXP 5
47209: NOT
47210: IFFALSE 47214
// exit ;
47212: GO 47506
// side := GetSide ( vehicle ) ;
47214: LD_ADDR_VAR 0 5
47218: PUSH
47219: LD_VAR 0 1
47223: PPUSH
47224: CALL_OW 255
47228: ST_TO_ADDR
// for i = 1 to mc_bases do
47229: LD_ADDR_VAR 0 4
47233: PUSH
47234: DOUBLE
47235: LD_INT 1
47237: DEC
47238: ST_TO_ADDR
47239: LD_EXP 5
47243: PUSH
47244: FOR_TO
47245: IFFALSE 47504
// begin if factory in mc_bases [ i ] then
47247: LD_VAR 0 2
47251: PUSH
47252: LD_EXP 5
47256: PUSH
47257: LD_VAR 0 4
47261: ARRAY
47262: IN
47263: IFFALSE 47502
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
47265: LD_EXP 26
47269: PUSH
47270: LD_VAR 0 4
47274: ARRAY
47275: PUSH
47276: LD_EXP 16
47280: PUSH
47281: LD_VAR 0 4
47285: ARRAY
47286: LESS
47287: IFFALSE 47458
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
47289: LD_ADDR_EXP 26
47293: PUSH
47294: LD_EXP 26
47298: PPUSH
47299: LD_VAR 0 4
47303: PPUSH
47304: LD_EXP 26
47308: PUSH
47309: LD_VAR 0 4
47313: ARRAY
47314: PUSH
47315: LD_VAR 0 1
47319: ADD
47320: PPUSH
47321: CALL_OW 1
47325: ST_TO_ADDR
// if not mc_scan [ i ] then
47326: LD_EXP 27
47330: PUSH
47331: LD_VAR 0 4
47335: ARRAY
47336: NOT
47337: IFFALSE 47456
// begin if GetControl ( vehicle ) = control_remote then
47339: LD_VAR 0 1
47343: PPUSH
47344: CALL_OW 263
47348: PUSH
47349: LD_INT 2
47351: EQUAL
47352: IFFALSE 47372
// repeat wait ( 0 0$1 ) ;
47354: LD_INT 35
47356: PPUSH
47357: CALL_OW 67
// until IsControledBy ( vehicle ) ;
47361: LD_VAR 0 1
47365: PPUSH
47366: CALL_OW 312
47370: IFFALSE 47354
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
47372: LD_VAR 0 1
47376: PPUSH
47377: LD_EXP 28
47381: PUSH
47382: LD_VAR 0 4
47386: ARRAY
47387: PPUSH
47388: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
47392: LD_VAR 0 1
47396: PPUSH
47397: CALL_OW 263
47401: PUSH
47402: LD_INT 1
47404: NONEQUAL
47405: IFFALSE 47409
// break ;
47407: GO 47504
// repeat wait ( 0 0$1 ) ;
47409: LD_INT 35
47411: PPUSH
47412: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
47416: LD_VAR 0 1
47420: PPUSH
47421: LD_EXP 28
47425: PUSH
47426: LD_VAR 0 4
47430: ARRAY
47431: PPUSH
47432: CALL_OW 308
47436: IFFALSE 47409
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
47438: LD_VAR 0 1
47442: PPUSH
47443: CALL_OW 311
47447: PPUSH
47448: CALL_OW 121
// exit ;
47452: POP
47453: POP
47454: GO 47506
// end ; end else
47456: GO 47502
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
47458: LD_ADDR_EXP 23
47462: PUSH
47463: LD_EXP 23
47467: PPUSH
47468: LD_VAR 0 4
47472: PUSH
47473: LD_EXP 23
47477: PUSH
47478: LD_VAR 0 4
47482: ARRAY
47483: PUSH
47484: LD_INT 1
47486: PLUS
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PPUSH
47492: LD_VAR 0 1
47496: PPUSH
47497: CALL 6278 0 3
47501: ST_TO_ADDR
// end ; end ;
47502: GO 47244
47504: POP
47505: POP
// end ;
47506: LD_VAR 0 3
47510: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , depot ; begin
47511: LD_INT 0
47513: PPUSH
47514: PPUSH
47515: PPUSH
// if not mc_bases then
47516: LD_EXP 5
47520: NOT
47521: IFFALSE 47525
// exit ;
47523: GO 47740
// repeat wait ( 0 0$1 ) ;
47525: LD_INT 35
47527: PPUSH
47528: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
47532: LD_VAR 0 2
47536: PPUSH
47537: LD_VAR 0 3
47541: PPUSH
47542: CALL_OW 284
47546: IFFALSE 47525
// if GetResourceTypeXY ( x , y ) = mat_artefact then
47548: LD_VAR 0 2
47552: PPUSH
47553: LD_VAR 0 3
47557: PPUSH
47558: CALL_OW 283
47562: PUSH
47563: LD_INT 4
47565: EQUAL
47566: IFFALSE 47570
// exit ;
47568: GO 47740
// for i = 1 to mc_bases do
47570: LD_ADDR_VAR 0 7
47574: PUSH
47575: DOUBLE
47576: LD_INT 1
47578: DEC
47579: ST_TO_ADDR
47580: LD_EXP 5
47584: PUSH
47585: FOR_TO
47586: IFFALSE 47738
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
47588: LD_ADDR_VAR 0 8
47592: PUSH
47593: LD_EXP 5
47597: PUSH
47598: LD_VAR 0 7
47602: ARRAY
47603: PPUSH
47604: LD_INT 2
47606: PUSH
47607: LD_INT 30
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 30
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: PPUSH
47632: CALL_OW 72
47636: ST_TO_ADDR
// if not depot then
47637: LD_VAR 0 8
47641: NOT
47642: IFFALSE 47646
// continue ;
47644: GO 47585
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
47646: LD_VAR 0 8
47650: PUSH
47651: LD_INT 1
47653: ARRAY
47654: PPUSH
47655: LD_VAR 0 2
47659: PPUSH
47660: LD_VAR 0 3
47664: PPUSH
47665: CALL_OW 297
47669: PUSH
47670: LD_INT 30
47672: LESS
47673: IFFALSE 47736
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
47675: LD_ADDR_EXP 21
47679: PUSH
47680: LD_EXP 21
47684: PPUSH
47685: LD_VAR 0 7
47689: PUSH
47690: LD_EXP 21
47694: PUSH
47695: LD_VAR 0 7
47699: ARRAY
47700: PUSH
47701: LD_INT 1
47703: PLUS
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PPUSH
47709: LD_VAR 0 4
47713: PUSH
47714: LD_VAR 0 2
47718: PUSH
47719: LD_VAR 0 3
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: LIST
47728: PPUSH
47729: CALL 6278 0 3
47733: ST_TO_ADDR
// break ;
47734: GO 47738
// end ; end ;
47736: GO 47585
47738: POP
47739: POP
// end ;
47740: LD_VAR 0 6
47744: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side ; begin
47745: LD_INT 0
47747: PPUSH
47748: PPUSH
// side := GetSide ( lab ) ;
47749: LD_ADDR_VAR 0 4
47753: PUSH
47754: LD_VAR 0 2
47758: PPUSH
47759: CALL_OW 255
47763: ST_TO_ADDR
// if not side in mc_sides or not mc_tech then
47764: LD_VAR 0 4
47768: PUSH
47769: LD_EXP 30
47773: IN
47774: NOT
47775: PUSH
47776: LD_EXP 31
47780: NOT
47781: OR
47782: IFFALSE 47786
// exit ;
47784: GO 47823
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
47786: LD_ADDR_EXP 31
47790: PUSH
47791: LD_EXP 31
47795: PPUSH
47796: LD_VAR 0 4
47800: PPUSH
47801: LD_EXP 31
47805: PUSH
47806: LD_VAR 0 4
47810: ARRAY
47811: PUSH
47812: LD_VAR 0 1
47816: DIFF
47817: PPUSH
47818: CALL_OW 1
47822: ST_TO_ADDR
// end ;
47823: LD_VAR 0 3
47827: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
47828: LD_INT 0
47830: PPUSH
47831: PPUSH
47832: PPUSH
47833: PPUSH
47834: PPUSH
47835: PPUSH
47836: PPUSH
47837: PPUSH
// if not mc_bases then
47838: LD_EXP 5
47842: NOT
47843: IFFALSE 47847
// exit ;
47845: GO 48661
// for i = 1 to mc_bases do
47847: LD_ADDR_VAR 0 3
47851: PUSH
47852: DOUBLE
47853: LD_INT 1
47855: DEC
47856: ST_TO_ADDR
47857: LD_EXP 5
47861: PUSH
47862: FOR_TO
47863: IFFALSE 48659
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] then
47865: LD_VAR 0 1
47869: PUSH
47870: LD_EXP 5
47874: PUSH
47875: LD_VAR 0 3
47879: ARRAY
47880: IN
47881: PUSH
47882: LD_VAR 0 1
47886: PUSH
47887: LD_EXP 12
47891: PUSH
47892: LD_VAR 0 3
47896: ARRAY
47897: IN
47898: OR
47899: PUSH
47900: LD_VAR 0 1
47904: PUSH
47905: LD_EXP 23
47909: PUSH
47910: LD_VAR 0 3
47914: ARRAY
47915: IN
47916: OR
47917: IFFALSE 48657
// begin if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
47919: LD_VAR 0 1
47923: PPUSH
47924: CALL_OW 247
47928: PUSH
47929: LD_INT 2
47931: EQUAL
47932: PUSH
47933: LD_VAR 0 1
47937: PPUSH
47938: CALL_OW 110
47942: PUSH
47943: LD_INT 20
47945: EQUAL
47946: AND
47947: IFFALSE 48050
// begin fac := MC_GetBuilding ( i , b_factory ) ;
47949: LD_ADDR_VAR 0 8
47953: PUSH
47954: LD_VAR 0 3
47958: PPUSH
47959: LD_INT 3
47961: PPUSH
47962: CALL 46635 0 2
47966: ST_TO_ADDR
// if fac then
47967: LD_VAR 0 8
47971: IFFALSE 48050
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
47973: LD_ADDR_VAR 0 9
47977: PUSH
47978: LD_VAR 0 8
47982: PPUSH
47983: LD_VAR 0 1
47987: PPUSH
47988: CALL_OW 265
47992: PPUSH
47993: LD_VAR 0 1
47997: PPUSH
47998: CALL_OW 262
48002: PPUSH
48003: LD_VAR 0 1
48007: PPUSH
48008: CALL_OW 263
48012: PPUSH
48013: LD_VAR 0 1
48017: PPUSH
48018: CALL_OW 264
48022: PPUSH
48023: CALL 3443 0 5
48027: ST_TO_ADDR
// if components then
48028: LD_VAR 0 9
48032: IFFALSE 48048
// MC_InsertProduceList ( i , components ) ;
48034: LD_VAR 0 3
48038: PPUSH
48039: LD_VAR 0 9
48043: PPUSH
48044: CALL 46298 0 2
// break ;
48048: GO 48659
// end ; end ; if GetType ( un ) = unit_building then
48050: LD_VAR 0 1
48054: PPUSH
48055: CALL_OW 247
48059: PUSH
48060: LD_INT 3
48062: EQUAL
48063: IFFALSE 48360
// begin btype := GetBType ( un ) ;
48065: LD_ADDR_VAR 0 5
48069: PUSH
48070: LD_VAR 0 1
48074: PPUSH
48075: CALL_OW 266
48079: ST_TO_ADDR
// if btype = b_warehouse then
48080: LD_VAR 0 5
48084: PUSH
48085: LD_INT 1
48087: EQUAL
48088: IFFALSE 48106
// begin btype := b_depot ;
48090: LD_ADDR_VAR 0 5
48094: PUSH
48095: LD_INT 0
48097: ST_TO_ADDR
// pos := 1 ;
48098: LD_ADDR_VAR 0 6
48102: PUSH
48103: LD_INT 1
48105: ST_TO_ADDR
// end ; if btype = b_factory then
48106: LD_VAR 0 5
48110: PUSH
48111: LD_INT 3
48113: EQUAL
48114: IFFALSE 48132
// begin btype := b_workshop ;
48116: LD_ADDR_VAR 0 5
48120: PUSH
48121: LD_INT 2
48123: ST_TO_ADDR
// pos := 1 ;
48124: LD_ADDR_VAR 0 6
48128: PUSH
48129: LD_INT 1
48131: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
48132: LD_VAR 0 5
48136: PUSH
48137: LD_INT 7
48139: PUSH
48140: LD_INT 8
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: IN
48147: IFFALSE 48157
// btype := b_lab ;
48149: LD_ADDR_VAR 0 5
48153: PUSH
48154: LD_INT 6
48156: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
48157: LD_ADDR_EXP 10
48161: PUSH
48162: LD_EXP 10
48166: PPUSH
48167: LD_VAR 0 3
48171: PUSH
48172: LD_EXP 10
48176: PUSH
48177: LD_VAR 0 3
48181: ARRAY
48182: PUSH
48183: LD_INT 1
48185: PLUS
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PPUSH
48191: LD_VAR 0 5
48195: PUSH
48196: LD_VAR 0 1
48200: PPUSH
48201: CALL_OW 250
48205: PUSH
48206: LD_VAR 0 1
48210: PPUSH
48211: CALL_OW 251
48215: PUSH
48216: LD_VAR 0 1
48220: PPUSH
48221: CALL_OW 254
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: PPUSH
48232: CALL 6278 0 3
48236: ST_TO_ADDR
// if pos = 1 then
48237: LD_VAR 0 6
48241: PUSH
48242: LD_INT 1
48244: EQUAL
48245: IFFALSE 48360
// begin tmp := mc_build_list [ i ] ;
48247: LD_ADDR_VAR 0 7
48251: PUSH
48252: LD_EXP 10
48256: PUSH
48257: LD_VAR 0 3
48261: ARRAY
48262: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
48263: LD_VAR 0 7
48267: PPUSH
48268: LD_INT 2
48270: PUSH
48271: LD_INT 30
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 30
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: LIST
48295: PPUSH
48296: CALL_OW 72
48300: IFFALSE 48310
// pos := 2 ;
48302: LD_ADDR_VAR 0 6
48306: PUSH
48307: LD_INT 2
48309: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
48310: LD_ADDR_VAR 0 7
48314: PUSH
48315: LD_VAR 0 7
48319: PPUSH
48320: LD_VAR 0 6
48324: PPUSH
48325: LD_VAR 0 7
48329: PPUSH
48330: CALL 6169 0 3
48334: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
48335: LD_ADDR_EXP 10
48339: PUSH
48340: LD_EXP 10
48344: PPUSH
48345: LD_VAR 0 3
48349: PPUSH
48350: LD_VAR 0 7
48354: PPUSH
48355: CALL_OW 1
48359: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
48360: LD_VAR 0 1
48364: PUSH
48365: LD_EXP 5
48369: PUSH
48370: LD_VAR 0 3
48374: ARRAY
48375: IN
48376: IFFALSE 48425
// begin tmp := mc_bases [ i ] diff un ;
48378: LD_ADDR_VAR 0 7
48382: PUSH
48383: LD_EXP 5
48387: PUSH
48388: LD_VAR 0 3
48392: ARRAY
48393: PUSH
48394: LD_VAR 0 1
48398: DIFF
48399: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
48400: LD_ADDR_EXP 5
48404: PUSH
48405: LD_EXP 5
48409: PPUSH
48410: LD_VAR 0 3
48414: PPUSH
48415: LD_VAR 0 7
48419: PPUSH
48420: CALL_OW 1
48424: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
48425: LD_VAR 0 1
48429: PUSH
48430: LD_EXP 12
48434: PUSH
48435: LD_VAR 0 3
48439: ARRAY
48440: IN
48441: IFFALSE 48490
// begin tmp := mc_construct_list [ i ] diff un ;
48443: LD_ADDR_VAR 0 7
48447: PUSH
48448: LD_EXP 12
48452: PUSH
48453: LD_VAR 0 3
48457: ARRAY
48458: PUSH
48459: LD_VAR 0 1
48463: DIFF
48464: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
48465: LD_ADDR_EXP 12
48469: PUSH
48470: LD_EXP 12
48474: PPUSH
48475: LD_VAR 0 3
48479: PPUSH
48480: LD_VAR 0 7
48484: PPUSH
48485: CALL_OW 1
48489: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
48490: LD_VAR 0 1
48494: PUSH
48495: LD_EXP 23
48499: PUSH
48500: LD_VAR 0 3
48504: ARRAY
48505: IN
48506: IFFALSE 48545
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
48508: LD_ADDR_EXP 23
48512: PUSH
48513: LD_EXP 23
48517: PPUSH
48518: LD_VAR 0 3
48522: PPUSH
48523: LD_EXP 23
48527: PUSH
48528: LD_VAR 0 3
48532: ARRAY
48533: PUSH
48534: LD_VAR 0 1
48538: DIFF
48539: PPUSH
48540: CALL_OW 1
48544: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
48545: LD_VAR 0 1
48549: PUSH
48550: LD_EXP 14
48554: PUSH
48555: LD_VAR 0 3
48559: ARRAY
48560: IN
48561: IFFALSE 48600
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
48563: LD_ADDR_EXP 14
48567: PUSH
48568: LD_EXP 14
48572: PPUSH
48573: LD_VAR 0 3
48577: PPUSH
48578: LD_EXP 14
48582: PUSH
48583: LD_VAR 0 3
48587: ARRAY
48588: PUSH
48589: LD_VAR 0 1
48593: DIFF
48594: PPUSH
48595: CALL_OW 1
48599: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
48600: LD_VAR 0 1
48604: PUSH
48605: LD_EXP 13
48609: PUSH
48610: LD_VAR 0 3
48614: ARRAY
48615: IN
48616: IFFALSE 48655
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
48618: LD_ADDR_EXP 13
48622: PUSH
48623: LD_EXP 13
48627: PPUSH
48628: LD_VAR 0 3
48632: PPUSH
48633: LD_EXP 13
48637: PUSH
48638: LD_VAR 0 3
48642: ARRAY
48643: PUSH
48644: LD_VAR 0 1
48648: DIFF
48649: PPUSH
48650: CALL_OW 1
48654: ST_TO_ADDR
// end ; break ;
48655: GO 48659
// end ;
48657: GO 47862
48659: POP
48660: POP
// end ;
48661: LD_VAR 0 2
48665: RET
// export function MCE_BuildingComplete ( building ) ; var i , j ; begin
48666: LD_INT 0
48668: PPUSH
48669: PPUSH
48670: PPUSH
// if not mc_bases then
48671: LD_EXP 5
48675: NOT
48676: IFFALSE 48680
// exit ;
48678: GO 48915
// for i = 1 to mc_bases do
48680: LD_ADDR_VAR 0 3
48684: PUSH
48685: DOUBLE
48686: LD_INT 1
48688: DEC
48689: ST_TO_ADDR
48690: LD_EXP 5
48694: PUSH
48695: FOR_TO
48696: IFFALSE 48913
// begin if building in mc_construct_list [ i ] then
48698: LD_VAR 0 1
48702: PUSH
48703: LD_EXP 12
48707: PUSH
48708: LD_VAR 0 3
48712: ARRAY
48713: IN
48714: IFFALSE 48911
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
48716: LD_ADDR_EXP 12
48720: PUSH
48721: LD_EXP 12
48725: PPUSH
48726: LD_VAR 0 3
48730: PPUSH
48731: LD_EXP 12
48735: PUSH
48736: LD_VAR 0 3
48740: ARRAY
48741: PUSH
48742: LD_VAR 0 1
48746: DIFF
48747: PPUSH
48748: CALL_OW 1
48752: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
48753: LD_ADDR_EXP 5
48757: PUSH
48758: LD_EXP 5
48762: PPUSH
48763: LD_VAR 0 3
48767: PUSH
48768: LD_EXP 5
48772: PUSH
48773: LD_VAR 0 3
48777: ARRAY
48778: PUSH
48779: LD_INT 1
48781: PLUS
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PPUSH
48787: LD_VAR 0 1
48791: PPUSH
48792: CALL 6278 0 3
48796: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
48797: LD_VAR 0 1
48801: PPUSH
48802: CALL_OW 266
48806: PUSH
48807: LD_INT 32
48809: PUSH
48810: LD_INT 33
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: IN
48817: IFFALSE 48907
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
48819: LD_ADDR_EXP 13
48823: PUSH
48824: LD_EXP 13
48828: PPUSH
48829: LD_VAR 0 3
48833: PUSH
48834: LD_EXP 13
48838: PUSH
48839: LD_VAR 0 3
48843: ARRAY
48844: PUSH
48845: LD_INT 1
48847: PLUS
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PPUSH
48853: LD_VAR 0 1
48857: PPUSH
48858: CALL 6278 0 3
48862: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
48863: LD_ADDR_EXP 14
48867: PUSH
48868: LD_EXP 14
48872: PPUSH
48873: LD_VAR 0 3
48877: PUSH
48878: LD_EXP 14
48882: PUSH
48883: LD_VAR 0 3
48887: ARRAY
48888: PUSH
48889: LD_INT 1
48891: PLUS
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PPUSH
48897: LD_VAR 0 1
48901: PPUSH
48902: CALL 6278 0 3
48906: ST_TO_ADDR
// end ; exit ;
48907: POP
48908: POP
48909: GO 48915
// end ; end ;
48911: GO 48695
48913: POP
48914: POP
// end ;
48915: LD_VAR 0 2
48919: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
48920: LD_INT 0
48922: PPUSH
48923: PPUSH
48924: PPUSH
48925: PPUSH
48926: PPUSH
48927: PPUSH
48928: PPUSH
// if not mc_bases then
48929: LD_EXP 5
48933: NOT
48934: IFFALSE 48938
// exit ;
48936: GO 49169
// btype := GetBType ( building ) ;
48938: LD_ADDR_VAR 0 6
48942: PUSH
48943: LD_VAR 0 1
48947: PPUSH
48948: CALL_OW 266
48952: ST_TO_ADDR
// x := GetX ( building ) ;
48953: LD_ADDR_VAR 0 7
48957: PUSH
48958: LD_VAR 0 1
48962: PPUSH
48963: CALL_OW 250
48967: ST_TO_ADDR
// y := GetY ( building ) ;
48968: LD_ADDR_VAR 0 8
48972: PUSH
48973: LD_VAR 0 1
48977: PPUSH
48978: CALL_OW 251
48982: ST_TO_ADDR
// d := GetDir ( building ) ;
48983: LD_ADDR_VAR 0 9
48987: PUSH
48988: LD_VAR 0 1
48992: PPUSH
48993: CALL_OW 254
48997: ST_TO_ADDR
// for i = 1 to mc_bases do
48998: LD_ADDR_VAR 0 4
49002: PUSH
49003: DOUBLE
49004: LD_INT 1
49006: DEC
49007: ST_TO_ADDR
49008: LD_EXP 5
49012: PUSH
49013: FOR_TO
49014: IFFALSE 49167
// begin if not mc_build_list [ i ] then
49016: LD_EXP 10
49020: PUSH
49021: LD_VAR 0 4
49025: ARRAY
49026: NOT
49027: IFFALSE 49031
// continue ;
49029: GO 49013
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
49031: LD_VAR 0 6
49035: PUSH
49036: LD_VAR 0 7
49040: PUSH
49041: LD_VAR 0 8
49045: PUSH
49046: LD_VAR 0 9
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: PPUSH
49057: LD_EXP 10
49061: PUSH
49062: LD_VAR 0 4
49066: ARRAY
49067: PUSH
49068: LD_INT 1
49070: ARRAY
49071: PPUSH
49072: CALL 11876 0 2
49076: IFFALSE 49165
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
49078: LD_ADDR_EXP 10
49082: PUSH
49083: LD_EXP 10
49087: PPUSH
49088: LD_VAR 0 4
49092: PPUSH
49093: LD_EXP 10
49097: PUSH
49098: LD_VAR 0 4
49102: ARRAY
49103: PPUSH
49104: LD_INT 1
49106: PPUSH
49107: CALL_OW 3
49111: PPUSH
49112: CALL_OW 1
49116: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
49117: LD_ADDR_EXP 12
49121: PUSH
49122: LD_EXP 12
49126: PPUSH
49127: LD_VAR 0 4
49131: PUSH
49132: LD_EXP 12
49136: PUSH
49137: LD_VAR 0 4
49141: ARRAY
49142: PUSH
49143: LD_INT 1
49145: PLUS
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PPUSH
49151: LD_VAR 0 1
49155: PPUSH
49156: CALL 6278 0 3
49160: ST_TO_ADDR
// exit ;
49161: POP
49162: POP
49163: GO 49169
// end ; end ;
49165: GO 49013
49167: POP
49168: POP
// end ;
49169: LD_VAR 0 3
49173: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
49174: LD_INT 0
49176: PPUSH
49177: PPUSH
49178: PPUSH
// if not mc_bases then
49179: LD_EXP 5
49183: NOT
49184: IFFALSE 49188
// exit ;
49186: GO 49378
// for i = 1 to mc_bases do
49188: LD_ADDR_VAR 0 4
49192: PUSH
49193: DOUBLE
49194: LD_INT 1
49196: DEC
49197: ST_TO_ADDR
49198: LD_EXP 5
49202: PUSH
49203: FOR_TO
49204: IFFALSE 49291
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
49206: LD_VAR 0 1
49210: PUSH
49211: LD_EXP 13
49215: PUSH
49216: LD_VAR 0 4
49220: ARRAY
49221: IN
49222: PUSH
49223: LD_VAR 0 1
49227: PUSH
49228: LD_EXP 14
49232: PUSH
49233: LD_VAR 0 4
49237: ARRAY
49238: IN
49239: NOT
49240: AND
49241: IFFALSE 49289
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
49243: LD_ADDR_EXP 14
49247: PUSH
49248: LD_EXP 14
49252: PPUSH
49253: LD_VAR 0 4
49257: PUSH
49258: LD_EXP 14
49262: PUSH
49263: LD_VAR 0 4
49267: ARRAY
49268: PUSH
49269: LD_INT 1
49271: PLUS
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PPUSH
49277: LD_VAR 0 1
49281: PPUSH
49282: CALL 6278 0 3
49286: ST_TO_ADDR
// break ;
49287: GO 49291
// end ; end ;
49289: GO 49203
49291: POP
49292: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
49293: LD_VAR 0 1
49297: PPUSH
49298: CALL_OW 257
49302: PUSH
49303: LD_EXP 30
49307: IN
49308: PUSH
49309: LD_VAR 0 1
49313: PPUSH
49314: CALL_OW 266
49318: PUSH
49319: LD_INT 5
49321: EQUAL
49322: AND
49323: PUSH
49324: LD_VAR 0 2
49328: PPUSH
49329: CALL_OW 110
49333: PUSH
49334: LD_INT 18
49336: NONEQUAL
49337: AND
49338: IFFALSE 49378
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
49340: LD_VAR 0 2
49344: PPUSH
49345: CALL_OW 257
49349: PUSH
49350: LD_INT 5
49352: PUSH
49353: LD_INT 8
49355: PUSH
49356: LD_INT 9
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: LIST
49363: IN
49364: IFFALSE 49378
// SetClass ( unit , 1 ) ;
49366: LD_VAR 0 2
49370: PPUSH
49371: LD_INT 1
49373: PPUSH
49374: CALL_OW 336
// end ;
49378: LD_VAR 0 3
49382: RET
// export function MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
49383: LD_INT 0
49385: PPUSH
49386: PPUSH
// if not mc_bases then
49387: LD_EXP 5
49391: NOT
49392: IFFALSE 49396
// exit ;
49394: GO 49512
// if GetLives ( abandoned_vehicle ) > 250 then
49396: LD_VAR 0 2
49400: PPUSH
49401: CALL_OW 256
49405: PUSH
49406: LD_INT 250
49408: GREATER
49409: IFFALSE 49413
// exit ;
49411: GO 49512
// for i = 1 to mc_bases do
49413: LD_ADDR_VAR 0 6
49417: PUSH
49418: DOUBLE
49419: LD_INT 1
49421: DEC
49422: ST_TO_ADDR
49423: LD_EXP 5
49427: PUSH
49428: FOR_TO
49429: IFFALSE 49510
// begin if driver in mc_bases [ i ] then
49431: LD_VAR 0 1
49435: PUSH
49436: LD_EXP 5
49440: PUSH
49441: LD_VAR 0 6
49445: ARRAY
49446: IN
49447: IFFALSE 49508
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
49449: LD_VAR 0 1
49453: PPUSH
49454: LD_EXP 5
49458: PUSH
49459: LD_VAR 0 6
49463: ARRAY
49464: PPUSH
49465: LD_INT 2
49467: PUSH
49468: LD_INT 30
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 30
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: LIST
49492: PPUSH
49493: CALL_OW 72
49497: PUSH
49498: LD_INT 1
49500: ARRAY
49501: PPUSH
49502: CALL_OW 112
// break ;
49506: GO 49510
// end ; end ;
49508: GO 49428
49510: POP
49511: POP
// end ;
49512: LD_VAR 0 5
49516: RET
