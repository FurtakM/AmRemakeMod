// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitVariables ;
   8: CALL 161 0 0
// InitMacro ;
  12: CALL 36544 0 0
// PrepareNature ( 4 , 3 , 11 , 6 , 3 , 1 , 0 , nature_area , 0 ) ;
  16: LD_INT 4
  18: PPUSH
  19: LD_INT 3
  21: PPUSH
  22: LD_INT 11
  24: PPUSH
  25: LD_INT 6
  27: PPUSH
  28: LD_INT 3
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: LD_INT 5
  39: PPUSH
  40: LD_INT 0
  42: PPUSH
  43: CALL 32419 0 9
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , area_base_russian , 0 ) ;
  47: LD_INT 0
  49: PPUSH
  50: LD_INT 0
  52: PPUSH
  53: LD_INT 4
  55: PPUSH
  56: LD_INT 0
  58: PPUSH
  59: LD_INT 0
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: LD_INT 0
  67: PPUSH
  68: LD_INT 4
  70: PPUSH
  71: LD_INT 0
  73: PPUSH
  74: CALL 32419 0 9
// PrepareRussian ;
  78: CALL 177 0 0
// Skirmish_Start ;
  82: CALL 36743 0 0
// if debug then
  86: LD_EXP 1
  90: IFFALSE 99
// FogOff ( 1 ) ;
  92: LD_INT 1
  94: PPUSH
  95: CALL_OW 344
// end ;
  99: END
// export function CustomInitMacro ; var i ; begin
 100: LD_INT 0
 102: PPUSH
 103: PPUSH
// mc_parking := [ parking_arabian , parking_russian ] ;
 104: LD_ADDR_EXP 28
 108: PUSH
 109: LD_INT 1
 111: PUSH
 112: LD_INT 2
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: ST_TO_ADDR
// mc_scan_area := [ area_base_arabian , area_base_russian ] ;
 119: LD_ADDR_EXP 29
 123: PUSH
 124: LD_INT 3
 126: PUSH
 127: LD_INT 4
 129: PUSH
 130: EMPTY
 131: LIST
 132: LIST
 133: ST_TO_ADDR
// MC_SetDefenderList ( 2 , russian_guard ) ;
 134: LD_INT 2
 136: PPUSH
 137: LD_EXP 3
 141: PPUSH
 142: CALL 46912 0 2
// MC_SetTame ( 2 , area_base_russian ) ;
 146: LD_INT 2
 148: PPUSH
 149: LD_INT 4
 151: PPUSH
 152: CALL 37729 0 2
// end ;
 156: LD_VAR 0 1
 160: RET
// export debug ; function InitVariables ; begin
 161: LD_INT 0
 163: PPUSH
// debug := true ;
 164: LD_ADDR_EXP 1
 168: PUSH
 169: LD_INT 1
 171: ST_TO_ADDR
// end ; end_of_file end_of_file
 172: LD_VAR 0 1
 176: RET
// export russian_force , russian_guard ; export function PrepareRussian ; var i , veh , tmp ; begin
 177: LD_INT 0
 179: PPUSH
 180: PPUSH
 181: PPUSH
 182: PPUSH
// uc_side := 3 ;
 183: LD_ADDR_OWVAR 20
 187: PUSH
 188: LD_INT 3
 190: ST_TO_ADDR
// uc_nation := 3 ;
 191: LD_ADDR_OWVAR 21
 195: PUSH
 196: LD_INT 3
 198: ST_TO_ADDR
// russian_force := PrepareBase ( ru_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 5000 , 1000 , 300 ] , [ 9 , 6 , 6 , 4 ] ) ;
 199: LD_ADDR_EXP 2
 203: PUSH
 204: LD_INT 47
 206: PPUSH
 207: LD_STRING 
 209: PPUSH
 210: LD_INT 7
 212: PUSH
 213: LD_INT 8
 215: PUSH
 216: LD_INT 9
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_OWVAR 67
 228: ARRAY
 229: PPUSH
 230: LD_INT 5000
 232: PUSH
 233: LD_INT 1000
 235: PUSH
 236: LD_INT 300
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: PPUSH
 244: LD_INT 9
 246: PUSH
 247: LD_INT 6
 249: PUSH
 250: LD_INT 6
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL 9190 0 5
 266: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , russian_force ) ;
 267: LD_ADDR_EXP 5
 271: PUSH
 272: LD_EXP 5
 276: PPUSH
 277: LD_INT 2
 279: PPUSH
 280: LD_EXP 2
 284: PPUSH
 285: CALL_OW 1
 289: ST_TO_ADDR
// tmp := [ ] ;
 290: LD_ADDR_VAR 0 4
 294: PUSH
 295: EMPTY
 296: ST_TO_ADDR
// for i = 1 to 4 do
 297: LD_ADDR_VAR 0 2
 301: PUSH
 302: DOUBLE
 303: LD_INT 1
 305: DEC
 306: ST_TO_ADDR
 307: LD_INT 4
 309: PUSH
 310: FOR_TO
 311: IFFALSE 404
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun ] [ i mod 4 + 1 ] , 100 ) ;
 313: LD_INT 22
 315: PPUSH
 316: LD_INT 3
 318: PPUSH
 319: LD_INT 3
 321: PPUSH
 322: LD_INT 43
 324: PUSH
 325: LD_INT 45
 327: PUSH
 328: LD_INT 45
 330: PUSH
 331: LD_INT 44
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: PUSH
 340: LD_VAR 0 2
 344: PUSH
 345: LD_INT 4
 347: MOD
 348: PUSH
 349: LD_INT 1
 351: PLUS
 352: ARRAY
 353: PPUSH
 354: LD_INT 100
 356: PPUSH
 357: CALL 5791 0 5
// veh := CreateVehicle ;
 361: LD_ADDR_VAR 0 3
 365: PUSH
 366: CALL_OW 45
 370: ST_TO_ADDR
// tmp := tmp ^ veh ;
 371: LD_ADDR_VAR 0 4
 375: PUSH
 376: LD_VAR 0 4
 380: PUSH
 381: LD_VAR 0 3
 385: ADD
 386: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_russian , false ) ;
 387: LD_VAR 0 3
 391: PPUSH
 392: LD_INT 2
 394: PPUSH
 395: LD_INT 0
 397: PPUSH
 398: CALL_OW 49
// end ;
 402: GO 310
 404: POP
 405: POP
// russian_guard := tmp ;
 406: LD_ADDR_EXP 3
 410: PUSH
 411: LD_VAR 0 4
 415: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
 416: LD_VAR 0 1
 420: RET
// on UnitDestroyed ( un ) do var i , side ;
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// begin side := GetSide ( un ) ;
 425: LD_ADDR_VAR 0 3
 429: PUSH
 430: LD_VAR 0 1
 434: PPUSH
 435: CALL_OW 255
 439: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
 440: LD_VAR 0 1
 444: PPUSH
 445: CALL 48484 0 1
// end ;
 449: PPOPN 3
 451: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
 452: LD_VAR 0 1
 456: PPUSH
 457: LD_VAR 0 2
 461: PPUSH
 462: CALL 49576 0 2
// end ;
 466: PPOPN 2
 468: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
 469: LD_VAR 0 1
 473: PPUSH
 474: CALL 49322 0 1
// end ;
 478: PPOPN 1
 480: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
 481: LD_VAR 0 1
 485: PPUSH
 486: LD_VAR 0 2
 490: PPUSH
 491: CALL 48401 0 2
// end ;
 495: PPOPN 2
 497: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
 498: LD_VAR 0 1
 502: PPUSH
 503: LD_VAR 0 2
 507: PPUSH
 508: LD_VAR 0 3
 512: PPUSH
 513: LD_VAR 0 4
 517: PPUSH
 518: LD_VAR 0 5
 522: PPUSH
 523: CALL 48167 0 5
// end ;
 527: PPOPN 5
 529: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
 530: LD_VAR 0 1
 534: PPUSH
 535: LD_VAR 0 2
 539: PPUSH
 540: CALL 47855 0 2
// end ;
 544: PPOPN 2
 546: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
 547: LD_VAR 0 1
 551: PPUSH
 552: LD_VAR 0 2
 556: PPUSH
 557: LD_VAR 0 3
 561: PPUSH
 562: LD_VAR 0 4
 566: PPUSH
 567: CALL 47700 0 4
// end ;
 571: PPOPN 4
 573: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
 574: LD_VAR 0 1
 578: PPUSH
 579: LD_VAR 0 2
 583: PPUSH
 584: LD_VAR 0 3
 588: PPUSH
 589: CALL 47482 0 3
// end ;
 593: PPOPN 3
 595: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
 596: LD_VAR 0 1
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: CALL 47374 0 2
// end ;
 610: PPOPN 2
 612: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
 613: LD_VAR 0 1
 617: PPUSH
 618: LD_VAR 0 2
 622: PPUSH
 623: CALL 49830 0 2
// end ;
 627: PPOPN 2
 629: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
 630: LD_VAR 0 1
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: LD_VAR 0 3
 644: PPUSH
 645: LD_VAR 0 4
 649: PPUSH
 650: CALL 50039 0 4
// end ;
 654: PPOPN 4
 656: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
 657: LD_VAR 0 1
 661: PPUSH
 662: LD_VAR 0 2
 666: PPUSH
 667: CALL 47269 0 2
// end ; end_of_file
 671: PPOPN 2
 673: END
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 674: LD_INT 0
 676: PPUSH
 677: PPUSH
// if not side or not nation then
 678: LD_VAR 0 1
 682: NOT
 683: PUSH
 684: LD_VAR 0 2
 688: NOT
 689: OR
 690: IFFALSE 694
// exit ;
 692: GO 1306
// case nation of nation_american :
 694: LD_VAR 0 2
 698: PUSH
 699: LD_INT 1
 701: DOUBLE
 702: EQUAL
 703: IFTRUE 707
 705: GO 865
 707: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
 708: LD_ADDR_VAR 0 4
 712: PUSH
 713: LD_INT 35
 715: PUSH
 716: LD_INT 45
 718: PUSH
 719: LD_INT 46
 721: PUSH
 722: LD_INT 47
 724: PUSH
 725: LD_INT 1
 727: PUSH
 728: LD_INT 2
 730: PUSH
 731: LD_INT 6
 733: PUSH
 734: LD_INT 15
 736: PUSH
 737: LD_INT 16
 739: PUSH
 740: LD_INT 7
 742: PUSH
 743: LD_INT 12
 745: PUSH
 746: LD_INT 13
 748: PUSH
 749: LD_INT 10
 751: PUSH
 752: LD_INT 14
 754: PUSH
 755: LD_INT 20
 757: PUSH
 758: LD_INT 25
 760: PUSH
 761: LD_INT 36
 763: PUSH
 764: LD_INT 69
 766: PUSH
 767: LD_INT 39
 769: PUSH
 770: LD_INT 34
 772: PUSH
 773: LD_INT 40
 775: PUSH
 776: LD_INT 48
 778: PUSH
 779: LD_INT 49
 781: PUSH
 782: LD_INT 50
 784: PUSH
 785: LD_INT 51
 787: PUSH
 788: LD_INT 52
 790: PUSH
 791: LD_INT 53
 793: PUSH
 794: LD_INT 54
 796: PUSH
 797: LD_INT 55
 799: PUSH
 800: LD_INT 56
 802: PUSH
 803: LD_INT 57
 805: PUSH
 806: LD_INT 58
 808: PUSH
 809: LD_INT 59
 811: PUSH
 812: LD_INT 60
 814: PUSH
 815: LD_INT 61
 817: PUSH
 818: LD_INT 62
 820: PUSH
 821: LD_INT 80
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: LIST
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: ST_TO_ADDR
 863: GO 1230
 865: LD_INT 2
 867: DOUBLE
 868: EQUAL
 869: IFTRUE 873
 871: GO 1043
 873: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
 874: LD_ADDR_VAR 0 4
 878: PUSH
 879: LD_INT 35
 881: PUSH
 882: LD_INT 45
 884: PUSH
 885: LD_INT 46
 887: PUSH
 888: LD_INT 47
 890: PUSH
 891: LD_INT 70
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 11
 899: PUSH
 900: LD_INT 3
 902: PUSH
 903: LD_INT 4
 905: PUSH
 906: LD_INT 5
 908: PUSH
 909: LD_INT 6
 911: PUSH
 912: LD_INT 15
 914: PUSH
 915: LD_INT 18
 917: PUSH
 918: LD_INT 7
 920: PUSH
 921: LD_INT 17
 923: PUSH
 924: LD_INT 8
 926: PUSH
 927: LD_INT 20
 929: PUSH
 930: LD_INT 72
 932: PUSH
 933: LD_INT 26
 935: PUSH
 936: LD_INT 69
 938: PUSH
 939: LD_INT 39
 941: PUSH
 942: LD_INT 40
 944: PUSH
 945: LD_INT 41
 947: PUSH
 948: LD_INT 42
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 48
 956: PUSH
 957: LD_INT 49
 959: PUSH
 960: LD_INT 50
 962: PUSH
 963: LD_INT 51
 965: PUSH
 966: LD_INT 52
 968: PUSH
 969: LD_INT 53
 971: PUSH
 972: LD_INT 54
 974: PUSH
 975: LD_INT 55
 977: PUSH
 978: LD_INT 56
 980: PUSH
 981: LD_INT 60
 983: PUSH
 984: LD_INT 61
 986: PUSH
 987: LD_INT 62
 989: PUSH
 990: LD_INT 66
 992: PUSH
 993: LD_INT 67
 995: PUSH
 996: LD_INT 68
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: ST_TO_ADDR
1041: GO 1230
1043: LD_INT 3
1045: DOUBLE
1046: EQUAL
1047: IFTRUE 1051
1049: GO 1229
1051: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
1052: LD_ADDR_VAR 0 4
1056: PUSH
1057: LD_INT 46
1059: PUSH
1060: LD_INT 47
1062: PUSH
1063: LD_INT 1
1065: PUSH
1066: LD_INT 2
1068: PUSH
1069: LD_INT 11
1071: PUSH
1072: LD_INT 9
1074: PUSH
1075: LD_INT 20
1077: PUSH
1078: LD_INT 19
1080: PUSH
1081: LD_INT 21
1083: PUSH
1084: LD_INT 24
1086: PUSH
1087: LD_INT 22
1089: PUSH
1090: LD_INT 25
1092: PUSH
1093: LD_INT 28
1095: PUSH
1096: LD_INT 29
1098: PUSH
1099: LD_INT 31
1101: PUSH
1102: LD_INT 37
1104: PUSH
1105: LD_INT 38
1107: PUSH
1108: LD_INT 32
1110: PUSH
1111: LD_INT 27
1113: PUSH
1114: LD_INT 33
1116: PUSH
1117: LD_INT 69
1119: PUSH
1120: LD_INT 39
1122: PUSH
1123: LD_INT 34
1125: PUSH
1126: LD_INT 40
1128: PUSH
1129: LD_INT 71
1131: PUSH
1132: LD_INT 23
1134: PUSH
1135: LD_INT 44
1137: PUSH
1138: LD_INT 48
1140: PUSH
1141: LD_INT 49
1143: PUSH
1144: LD_INT 50
1146: PUSH
1147: LD_INT 51
1149: PUSH
1150: LD_INT 52
1152: PUSH
1153: LD_INT 53
1155: PUSH
1156: LD_INT 54
1158: PUSH
1159: LD_INT 55
1161: PUSH
1162: LD_INT 56
1164: PUSH
1165: LD_INT 57
1167: PUSH
1168: LD_INT 58
1170: PUSH
1171: LD_INT 59
1173: PUSH
1174: LD_INT 63
1176: PUSH
1177: LD_INT 64
1179: PUSH
1180: LD_INT 65
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: ST_TO_ADDR
1227: GO 1230
1229: POP
// if state > - 1 and state < 3 then
1230: LD_VAR 0 3
1234: PUSH
1235: LD_INT 1
1237: NEG
1238: GREATER
1239: PUSH
1240: LD_VAR 0 3
1244: PUSH
1245: LD_INT 3
1247: LESS
1248: AND
1249: IFFALSE 1306
// for i in result do
1251: LD_ADDR_VAR 0 5
1255: PUSH
1256: LD_VAR 0 4
1260: PUSH
1261: FOR_IN
1262: IFFALSE 1304
// if GetTech ( i , side ) <> state then
1264: LD_VAR 0 5
1268: PPUSH
1269: LD_VAR 0 1
1273: PPUSH
1274: CALL_OW 321
1278: PUSH
1279: LD_VAR 0 3
1283: NONEQUAL
1284: IFFALSE 1302
// result := result diff i ;
1286: LD_ADDR_VAR 0 4
1290: PUSH
1291: LD_VAR 0 4
1295: PUSH
1296: LD_VAR 0 5
1300: DIFF
1301: ST_TO_ADDR
1302: GO 1261
1304: POP
1305: POP
// end ;
1306: LD_VAR 0 4
1310: RET
// export function ScanBase ( side , base_area ) ; begin
1311: LD_INT 0
1313: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
1314: LD_ADDR_VAR 0 3
1318: PUSH
1319: LD_VAR 0 2
1323: PPUSH
1324: LD_INT 81
1326: PUSH
1327: LD_VAR 0 1
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 70
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 3
1345: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
1346: LD_INT 0
1348: PPUSH
1349: PPUSH
1350: PPUSH
1351: PPUSH
1352: PPUSH
1353: PPUSH
1354: PPUSH
1355: PPUSH
1356: PPUSH
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
1361: PPUSH
1362: PPUSH
1363: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
1364: LD_ADDR_VAR 0 12
1368: PUSH
1369: LD_EXP 5
1373: PUSH
1374: LD_VAR 0 1
1378: ARRAY
1379: PPUSH
1380: LD_INT 25
1382: PUSH
1383: LD_INT 3
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PPUSH
1390: CALL_OW 72
1394: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
1395: LD_ADDR_VAR 0 8
1399: PUSH
1400: LD_EXP 5
1404: PUSH
1405: LD_VAR 0 1
1409: ARRAY
1410: PPUSH
1411: LD_INT 2
1413: PUSH
1414: LD_INT 25
1416: PUSH
1417: LD_INT 1
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: LD_INT 25
1426: PUSH
1427: LD_INT 5
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 25
1436: PUSH
1437: LD_INT 8
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: LD_INT 25
1446: PUSH
1447: LD_INT 9
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: PPUSH
1461: CALL_OW 72
1465: ST_TO_ADDR
// if not defenders and not solds then
1466: LD_VAR 0 2
1470: NOT
1471: PUSH
1472: LD_VAR 0 8
1476: NOT
1477: AND
1478: IFFALSE 1482
// exit ;
1480: GO 2848
// depot_under_attack := false ;
1482: LD_ADDR_VAR 0 16
1486: PUSH
1487: LD_INT 0
1489: ST_TO_ADDR
// sold_defenders := [ ] ;
1490: LD_ADDR_VAR 0 17
1494: PUSH
1495: EMPTY
1496: ST_TO_ADDR
// if mechs then
1497: LD_VAR 0 12
1501: IFFALSE 1630
// for i in defenders do
1503: LD_ADDR_VAR 0 5
1507: PUSH
1508: LD_VAR 0 2
1512: PUSH
1513: FOR_IN
1514: IFFALSE 1628
// begin SetTag ( i , 20 ) ;
1516: LD_VAR 0 5
1520: PPUSH
1521: LD_INT 20
1523: PPUSH
1524: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
1528: LD_VAR 0 5
1532: PPUSH
1533: CALL_OW 263
1537: PUSH
1538: LD_INT 1
1540: EQUAL
1541: PUSH
1542: LD_VAR 0 5
1546: PPUSH
1547: CALL_OW 311
1551: NOT
1552: AND
1553: PUSH
1554: LD_VAR 0 12
1558: AND
1559: IFFALSE 1626
// begin un := mechs [ 1 ] ;
1561: LD_ADDR_VAR 0 10
1565: PUSH
1566: LD_VAR 0 12
1570: PUSH
1571: LD_INT 1
1573: ARRAY
1574: ST_TO_ADDR
// ComExitBuilding ( un ) ;
1575: LD_VAR 0 10
1579: PPUSH
1580: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
1584: LD_VAR 0 10
1588: PPUSH
1589: LD_VAR 0 5
1593: PPUSH
1594: CALL_OW 180
// SetTag ( un , 19 ) ;
1598: LD_VAR 0 10
1602: PPUSH
1603: LD_INT 19
1605: PPUSH
1606: CALL_OW 109
// mechs := mechs diff un ;
1610: LD_ADDR_VAR 0 12
1614: PUSH
1615: LD_VAR 0 12
1619: PUSH
1620: LD_VAR 0 10
1624: DIFF
1625: ST_TO_ADDR
// end ; end ;
1626: GO 1513
1628: POP
1629: POP
// if solds then
1630: LD_VAR 0 8
1634: IFFALSE 1693
// for i in solds do
1636: LD_ADDR_VAR 0 5
1640: PUSH
1641: LD_VAR 0 8
1645: PUSH
1646: FOR_IN
1647: IFFALSE 1691
// if not GetTag ( i ) then
1649: LD_VAR 0 5
1653: PPUSH
1654: CALL_OW 110
1658: NOT
1659: IFFALSE 1689
// begin defenders := defenders union i ;
1661: LD_ADDR_VAR 0 2
1665: PUSH
1666: LD_VAR 0 2
1670: PUSH
1671: LD_VAR 0 5
1675: UNION
1676: ST_TO_ADDR
// SetTag ( i , 18 ) ;
1677: LD_VAR 0 5
1681: PPUSH
1682: LD_INT 18
1684: PPUSH
1685: CALL_OW 109
// end ;
1689: GO 1646
1691: POP
1692: POP
// repeat wait ( 0 0$1 ) ;
1693: LD_INT 35
1695: PPUSH
1696: CALL_OW 67
// enemy := mc_scan [ base ] ;
1700: LD_ADDR_VAR 0 3
1704: PUSH
1705: LD_EXP 27
1709: PUSH
1710: LD_VAR 0 1
1714: ARRAY
1715: ST_TO_ADDR
// for i in defenders do
1716: LD_ADDR_VAR 0 5
1720: PUSH
1721: LD_VAR 0 2
1725: PUSH
1726: FOR_IN
1727: IFFALSE 2412
// begin e := NearestUnitToUnit ( enemy , i ) ;
1729: LD_ADDR_VAR 0 13
1733: PUSH
1734: LD_VAR 0 3
1738: PPUSH
1739: LD_VAR 0 5
1743: PPUSH
1744: CALL_OW 74
1748: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
1749: LD_ADDR_VAR 0 16
1753: PUSH
1754: LD_EXP 5
1758: PUSH
1759: LD_VAR 0 1
1763: ARRAY
1764: PPUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 30
1770: PUSH
1771: LD_INT 0
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 30
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PPUSH
1793: CALL_OW 72
1797: NOT
1798: PUSH
1799: LD_EXP 5
1803: PUSH
1804: LD_VAR 0 1
1808: ARRAY
1809: PPUSH
1810: LD_INT 2
1812: PUSH
1813: LD_INT 30
1815: PUSH
1816: LD_INT 0
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 30
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PPUSH
1838: CALL_OW 72
1842: PPUSH
1843: CALL_OW 256
1847: PUSH
1848: LD_INT 600
1850: LESS
1851: OR
1852: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
1853: LD_VAR 0 5
1857: PPUSH
1858: CALL_OW 247
1862: PUSH
1863: LD_INT 2
1865: DOUBLE
1866: EQUAL
1867: IFTRUE 1871
1869: GO 2118
1871: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
1872: LD_VAR 0 5
1876: PPUSH
1877: CALL_OW 256
1881: PUSH
1882: LD_INT 650
1884: GREATER
1885: PUSH
1886: LD_VAR 0 5
1890: PPUSH
1891: LD_VAR 0 13
1895: PPUSH
1896: CALL_OW 296
1900: PUSH
1901: LD_INT 40
1903: LESS
1904: AND
1905: IFFALSE 1923
// ComAttackUnit ( i , e ) else
1907: LD_VAR 0 5
1911: PPUSH
1912: LD_VAR 0 13
1916: PPUSH
1917: CALL_OW 115
1921: GO 2001
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
1923: LD_VAR 0 5
1927: PPUSH
1928: LD_VAR 0 13
1932: PPUSH
1933: CALL_OW 296
1937: PUSH
1938: LD_INT 30
1940: GREATEREQUAL
1941: PUSH
1942: LD_VAR 0 5
1946: PPUSH
1947: CALL_OW 256
1951: PUSH
1952: LD_INT 650
1954: LESSEQUAL
1955: OR
1956: PUSH
1957: LD_VAR 0 5
1961: PPUSH
1962: LD_EXP 28
1966: PUSH
1967: LD_VAR 0 1
1971: ARRAY
1972: PPUSH
1973: CALL_OW 308
1977: NOT
1978: AND
1979: IFFALSE 2001
// ComMoveToArea ( i , mc_parking [ base ] ) ;
1981: LD_VAR 0 5
1985: PPUSH
1986: LD_EXP 28
1990: PUSH
1991: LD_VAR 0 1
1995: ARRAY
1996: PPUSH
1997: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
2001: LD_VAR 0 5
2005: PPUSH
2006: CALL_OW 256
2010: PUSH
2011: LD_INT 998
2013: LESS
2014: PUSH
2015: LD_VAR 0 5
2019: PPUSH
2020: CALL_OW 263
2024: PUSH
2025: LD_INT 1
2027: EQUAL
2028: AND
2029: PUSH
2030: LD_VAR 0 5
2034: PPUSH
2035: CALL_OW 311
2039: AND
2040: PUSH
2041: LD_VAR 0 5
2045: PPUSH
2046: LD_EXP 28
2050: PUSH
2051: LD_VAR 0 1
2055: ARRAY
2056: PPUSH
2057: CALL_OW 308
2061: AND
2062: IFFALSE 2116
// begin mech := IsDrivenBy ( i ) ;
2064: LD_ADDR_VAR 0 9
2068: PUSH
2069: LD_VAR 0 5
2073: PPUSH
2074: CALL_OW 311
2078: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
2079: LD_VAR 0 9
2083: PPUSH
2084: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
2088: LD_VAR 0 9
2092: PPUSH
2093: LD_VAR 0 5
2097: PPUSH
2098: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
2102: LD_VAR 0 9
2106: PPUSH
2107: LD_VAR 0 5
2111: PPUSH
2112: CALL_OW 180
// end ; end ; unit_human :
2116: GO 2383
2118: LD_INT 1
2120: DOUBLE
2121: EQUAL
2122: IFTRUE 2126
2124: GO 2382
2126: POP
// begin b := IsInUnit ( i ) ;
2127: LD_ADDR_VAR 0 18
2131: PUSH
2132: LD_VAR 0 5
2136: PPUSH
2137: CALL_OW 310
2141: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
2142: LD_ADDR_VAR 0 19
2146: PUSH
2147: LD_VAR 0 18
2151: NOT
2152: PUSH
2153: LD_VAR 0 18
2157: PPUSH
2158: CALL_OW 266
2162: PUSH
2163: LD_INT 32
2165: PUSH
2166: LD_INT 31
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: IN
2173: OR
2174: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
2175: LD_VAR 0 16
2179: PUSH
2180: LD_VAR 0 2
2184: PPUSH
2185: LD_INT 21
2187: PUSH
2188: LD_INT 2
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PPUSH
2195: CALL_OW 72
2199: PUSH
2200: LD_INT 1
2202: LESSEQUAL
2203: OR
2204: PUSH
2205: LD_VAR 0 19
2209: AND
2210: PUSH
2211: LD_VAR 0 5
2215: PUSH
2216: LD_VAR 0 17
2220: IN
2221: NOT
2222: AND
2223: IFFALSE 2316
// begin if b then
2225: LD_VAR 0 18
2229: IFFALSE 2278
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
2231: LD_VAR 0 18
2235: PPUSH
2236: LD_VAR 0 3
2240: PPUSH
2241: LD_VAR 0 18
2245: PPUSH
2246: CALL_OW 74
2250: PPUSH
2251: CALL_OW 296
2255: PUSH
2256: LD_INT 10
2258: LESS
2259: PUSH
2260: LD_VAR 0 18
2264: PPUSH
2265: CALL_OW 461
2269: PUSH
2270: LD_INT 7
2272: NONEQUAL
2273: AND
2274: IFFALSE 2278
// continue ;
2276: GO 1726
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
2278: LD_ADDR_VAR 0 17
2282: PUSH
2283: LD_VAR 0 17
2287: PPUSH
2288: LD_VAR 0 17
2292: PUSH
2293: LD_INT 1
2295: PLUS
2296: PPUSH
2297: LD_VAR 0 5
2301: PPUSH
2302: CALL_OW 1
2306: ST_TO_ADDR
// ComExitBuilding ( i ) ;
2307: LD_VAR 0 5
2311: PPUSH
2312: CALL_OW 122
// end ; if sold_defenders then
2316: LD_VAR 0 17
2320: IFFALSE 2380
// if i in sold_defenders then
2322: LD_VAR 0 5
2326: PUSH
2327: LD_VAR 0 17
2331: IN
2332: IFFALSE 2380
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
2334: LD_VAR 0 5
2338: PPUSH
2339: CALL_OW 314
2343: NOT
2344: PUSH
2345: LD_VAR 0 5
2349: PPUSH
2350: LD_VAR 0 13
2354: PPUSH
2355: CALL_OW 296
2359: PUSH
2360: LD_INT 30
2362: LESS
2363: AND
2364: IFFALSE 2380
// ComAttackUnit ( i , e ) ;
2366: LD_VAR 0 5
2370: PPUSH
2371: LD_VAR 0 13
2375: PPUSH
2376: CALL_OW 115
// end ; end ; end ;
2380: GO 2383
2382: POP
// if IsDead ( i ) then
2383: LD_VAR 0 5
2387: PPUSH
2388: CALL_OW 301
2392: IFFALSE 2410
// defenders := defenders diff i ;
2394: LD_ADDR_VAR 0 2
2398: PUSH
2399: LD_VAR 0 2
2403: PUSH
2404: LD_VAR 0 5
2408: DIFF
2409: ST_TO_ADDR
// end ;
2410: GO 1726
2412: POP
2413: POP
// until not enemy or not defenders ;
2414: LD_VAR 0 3
2418: NOT
2419: PUSH
2420: LD_VAR 0 2
2424: NOT
2425: OR
2426: IFFALSE 1693
// MC_Reset ( base , 18 ) ;
2428: LD_VAR 0 1
2432: PPUSH
2433: LD_INT 18
2435: PPUSH
2436: CALL 37977 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
2440: LD_ADDR_VAR 0 2
2444: PUSH
2445: LD_VAR 0 2
2449: PUSH
2450: LD_VAR 0 2
2454: PPUSH
2455: LD_INT 2
2457: PUSH
2458: LD_INT 25
2460: PUSH
2461: LD_INT 1
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: LD_INT 25
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PUSH
2478: LD_INT 25
2480: PUSH
2481: LD_INT 8
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: PUSH
2488: LD_INT 25
2490: PUSH
2491: LD_INT 9
2493: PUSH
2494: EMPTY
2495: LIST
2496: LIST
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: PPUSH
2505: CALL_OW 72
2509: DIFF
2510: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
2511: LD_VAR 0 3
2515: NOT
2516: PUSH
2517: LD_VAR 0 2
2521: PPUSH
2522: LD_INT 21
2524: PUSH
2525: LD_INT 2
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PPUSH
2532: CALL_OW 72
2536: AND
2537: IFFALSE 2799
// begin tmp := FilterByTag ( defenders , 19 ) ;
2539: LD_ADDR_VAR 0 11
2543: PUSH
2544: LD_VAR 0 2
2548: PPUSH
2549: LD_INT 19
2551: PPUSH
2552: CALL 36426 0 2
2556: ST_TO_ADDR
// if tmp then
2557: LD_VAR 0 11
2561: IFFALSE 2631
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
2563: LD_ADDR_VAR 0 11
2567: PUSH
2568: LD_VAR 0 11
2572: PPUSH
2573: LD_INT 25
2575: PUSH
2576: LD_INT 3
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PPUSH
2583: CALL_OW 72
2587: ST_TO_ADDR
// if tmp then
2588: LD_VAR 0 11
2592: IFFALSE 2631
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
2594: LD_ADDR_EXP 17
2598: PUSH
2599: LD_EXP 17
2603: PPUSH
2604: LD_VAR 0 1
2608: PPUSH
2609: LD_EXP 17
2613: PUSH
2614: LD_VAR 0 1
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 11
2624: UNION
2625: PPUSH
2626: CALL_OW 1
2630: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
2631: LD_VAR 0 1
2635: PPUSH
2636: LD_INT 19
2638: PPUSH
2639: CALL 37977 0 2
// repeat wait ( 0 0$1 ) ;
2643: LD_INT 35
2645: PPUSH
2646: CALL_OW 67
// for i in defenders do
2650: LD_ADDR_VAR 0 5
2654: PUSH
2655: LD_VAR 0 2
2659: PUSH
2660: FOR_IN
2661: IFFALSE 2750
// begin if not IsInArea ( i , mc_parking [ base ] ) then
2663: LD_VAR 0 5
2667: PPUSH
2668: LD_EXP 28
2672: PUSH
2673: LD_VAR 0 1
2677: ARRAY
2678: PPUSH
2679: CALL_OW 308
2683: NOT
2684: IFFALSE 2708
// ComMoveToArea ( i , mc_parking [ base ] ) else
2686: LD_VAR 0 5
2690: PPUSH
2691: LD_EXP 28
2695: PUSH
2696: LD_VAR 0 1
2700: ARRAY
2701: PPUSH
2702: CALL_OW 113
2706: GO 2748
// if GetControl ( i ) = control_manual then
2708: LD_VAR 0 5
2712: PPUSH
2713: CALL_OW 263
2717: PUSH
2718: LD_INT 1
2720: EQUAL
2721: IFFALSE 2748
// if IsDrivenBy ( i ) then
2723: LD_VAR 0 5
2727: PPUSH
2728: CALL_OW 311
2732: IFFALSE 2748
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
2734: LD_VAR 0 5
2738: PPUSH
2739: CALL_OW 311
2743: PPUSH
2744: CALL_OW 121
// end ;
2748: GO 2660
2750: POP
2751: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
2752: LD_VAR 0 2
2756: PPUSH
2757: LD_INT 95
2759: PUSH
2760: LD_EXP 28
2764: PUSH
2765: LD_VAR 0 1
2769: ARRAY
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: PPUSH
2775: CALL_OW 72
2779: PUSH
2780: LD_VAR 0 2
2784: EQUAL
2785: PUSH
2786: LD_EXP 27
2790: PUSH
2791: LD_VAR 0 1
2795: ARRAY
2796: OR
2797: IFFALSE 2643
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
2799: LD_ADDR_EXP 26
2803: PUSH
2804: LD_EXP 26
2808: PPUSH
2809: LD_VAR 0 1
2813: PPUSH
2814: LD_EXP 26
2818: PUSH
2819: LD_VAR 0 1
2823: ARRAY
2824: PUSH
2825: LD_VAR 0 2
2829: UNION
2830: PPUSH
2831: CALL_OW 1
2835: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
2836: LD_VAR 0 1
2840: PPUSH
2841: LD_INT 20
2843: PPUSH
2844: CALL 37977 0 2
// end ;
2848: LD_VAR 0 4
2852: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2853: LD_INT 0
2855: PPUSH
2856: PPUSH
2857: PPUSH
2858: PPUSH
// result := false ;
2859: LD_ADDR_VAR 0 2
2863: PUSH
2864: LD_INT 0
2866: ST_TO_ADDR
// side := GetSide ( unit ) ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: LD_VAR 0 1
2876: PPUSH
2877: CALL_OW 255
2881: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2882: LD_ADDR_VAR 0 4
2886: PUSH
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 248
2896: ST_TO_ADDR
// case nat of 1 :
2897: LD_VAR 0 4
2901: PUSH
2902: LD_INT 1
2904: DOUBLE
2905: EQUAL
2906: IFTRUE 2910
2908: GO 2921
2910: POP
// tech := tech_lassight ; 2 :
2911: LD_ADDR_VAR 0 5
2915: PUSH
2916: LD_INT 12
2918: ST_TO_ADDR
2919: GO 2960
2921: LD_INT 2
2923: DOUBLE
2924: EQUAL
2925: IFTRUE 2929
2927: GO 2940
2929: POP
// tech := tech_mortar ; 3 :
2930: LD_ADDR_VAR 0 5
2934: PUSH
2935: LD_INT 41
2937: ST_TO_ADDR
2938: GO 2960
2940: LD_INT 3
2942: DOUBLE
2943: EQUAL
2944: IFTRUE 2948
2946: GO 2959
2948: POP
// tech := tech_bazooka ; end ;
2949: LD_ADDR_VAR 0 5
2953: PUSH
2954: LD_INT 44
2956: ST_TO_ADDR
2957: GO 2960
2959: POP
// if Researched ( side , tech ) then
2960: LD_VAR 0 3
2964: PPUSH
2965: LD_VAR 0 5
2969: PPUSH
2970: CALL_OW 325
2974: IFFALSE 3001
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2976: LD_ADDR_VAR 0 2
2980: PUSH
2981: LD_INT 5
2983: PUSH
2984: LD_INT 8
2986: PUSH
2987: LD_INT 9
2989: PUSH
2990: EMPTY
2991: LIST
2992: LIST
2993: LIST
2994: PUSH
2995: LD_VAR 0 4
2999: ARRAY
3000: ST_TO_ADDR
// end ;
3001: LD_VAR 0 2
3005: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3006: LD_INT 0
3008: PPUSH
3009: PPUSH
3010: PPUSH
// if not mines then
3011: LD_VAR 0 2
3015: NOT
3016: IFFALSE 3020
// exit ;
3018: GO 3164
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3020: LD_ADDR_VAR 0 5
3024: PUSH
3025: LD_INT 81
3027: PUSH
3028: LD_VAR 0 1
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 3
3039: PUSH
3040: LD_INT 21
3042: PUSH
3043: LD_INT 3
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PPUSH
3058: CALL_OW 69
3062: ST_TO_ADDR
// for i in mines do
3063: LD_ADDR_VAR 0 4
3067: PUSH
3068: LD_VAR 0 2
3072: PUSH
3073: FOR_IN
3074: IFFALSE 3162
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3076: LD_VAR 0 4
3080: PUSH
3081: LD_INT 1
3083: ARRAY
3084: PPUSH
3085: LD_VAR 0 4
3089: PUSH
3090: LD_INT 2
3092: ARRAY
3093: PPUSH
3094: CALL_OW 458
3098: NOT
3099: IFFALSE 3103
// continue ;
3101: GO 3073
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3103: LD_VAR 0 4
3107: PUSH
3108: LD_INT 1
3110: ARRAY
3111: PPUSH
3112: LD_VAR 0 4
3116: PUSH
3117: LD_INT 2
3119: ARRAY
3120: PPUSH
3121: CALL_OW 428
3125: PUSH
3126: LD_VAR 0 5
3130: IN
3131: IFFALSE 3160
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3133: LD_VAR 0 4
3137: PUSH
3138: LD_INT 1
3140: ARRAY
3141: PPUSH
3142: LD_VAR 0 4
3146: PUSH
3147: LD_INT 2
3149: ARRAY
3150: PPUSH
3151: LD_VAR 0 1
3155: PPUSH
3156: CALL_OW 456
// end ;
3160: GO 3073
3162: POP
3163: POP
// end ;
3164: LD_VAR 0 3
3168: RET
// export function Count ( array ) ; var i ; begin
3169: LD_INT 0
3171: PPUSH
3172: PPUSH
// result := 0 ;
3173: LD_ADDR_VAR 0 2
3177: PUSH
3178: LD_INT 0
3180: ST_TO_ADDR
// for i in array do
3181: LD_ADDR_VAR 0 3
3185: PUSH
3186: LD_VAR 0 1
3190: PUSH
3191: FOR_IN
3192: IFFALSE 3216
// if i then
3194: LD_VAR 0 3
3198: IFFALSE 3214
// result := result + 1 ;
3200: LD_ADDR_VAR 0 2
3204: PUSH
3205: LD_VAR 0 2
3209: PUSH
3210: LD_INT 1
3212: PLUS
3213: ST_TO_ADDR
3214: GO 3191
3216: POP
3217: POP
// end ;
3218: LD_VAR 0 2
3222: RET
// export function IsEmpty ( building ) ; begin
3223: LD_INT 0
3225: PPUSH
// if not building then
3226: LD_VAR 0 1
3230: NOT
3231: IFFALSE 3235
// exit ;
3233: GO 3278
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3235: LD_ADDR_VAR 0 2
3239: PUSH
3240: LD_VAR 0 1
3244: PUSH
3245: LD_INT 22
3247: PUSH
3248: LD_VAR 0 1
3252: PPUSH
3253: CALL_OW 255
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: PUSH
3262: LD_INT 58
3264: PUSH
3265: EMPTY
3266: LIST
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 69
3276: IN
3277: ST_TO_ADDR
// end ;
3278: LD_VAR 0 2
3282: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3283: LD_INT 0
3285: PPUSH
3286: PPUSH
3287: PPUSH
3288: PPUSH
// tmp := [ ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: EMPTY
3295: ST_TO_ADDR
// list := [ ] ;
3296: LD_ADDR_VAR 0 5
3300: PUSH
3301: EMPTY
3302: ST_TO_ADDR
// for i = 16 to 25 do
3303: LD_ADDR_VAR 0 4
3307: PUSH
3308: DOUBLE
3309: LD_INT 16
3311: DEC
3312: ST_TO_ADDR
3313: LD_INT 25
3315: PUSH
3316: FOR_TO
3317: IFFALSE 3390
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3319: LD_ADDR_VAR 0 3
3323: PUSH
3324: LD_VAR 0 3
3328: PUSH
3329: LD_INT 22
3331: PUSH
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL_OW 255
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PUSH
3346: LD_INT 91
3348: PUSH
3349: LD_VAR 0 1
3353: PUSH
3354: LD_INT 6
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 30
3364: PUSH
3365: LD_VAR 0 4
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: LIST
3378: PUSH
3379: EMPTY
3380: LIST
3381: PPUSH
3382: CALL_OW 69
3386: ADD
3387: ST_TO_ADDR
3388: GO 3316
3390: POP
3391: POP
// for i = 1 to tmp do
3392: LD_ADDR_VAR 0 4
3396: PUSH
3397: DOUBLE
3398: LD_INT 1
3400: DEC
3401: ST_TO_ADDR
3402: LD_VAR 0 3
3406: PUSH
3407: FOR_TO
3408: IFFALSE 3496
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3410: LD_ADDR_VAR 0 5
3414: PUSH
3415: LD_VAR 0 5
3419: PUSH
3420: LD_VAR 0 3
3424: PUSH
3425: LD_VAR 0 4
3429: ARRAY
3430: PPUSH
3431: CALL_OW 266
3435: PUSH
3436: LD_VAR 0 3
3440: PUSH
3441: LD_VAR 0 4
3445: ARRAY
3446: PPUSH
3447: CALL_OW 250
3451: PUSH
3452: LD_VAR 0 3
3456: PUSH
3457: LD_VAR 0 4
3461: ARRAY
3462: PPUSH
3463: CALL_OW 251
3467: PUSH
3468: LD_VAR 0 3
3472: PUSH
3473: LD_VAR 0 4
3477: ARRAY
3478: PPUSH
3479: CALL_OW 254
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: PUSH
3490: EMPTY
3491: LIST
3492: ADD
3493: ST_TO_ADDR
3494: GO 3407
3496: POP
3497: POP
// result := list ;
3498: LD_ADDR_VAR 0 2
3502: PUSH
3503: LD_VAR 0 5
3507: ST_TO_ADDR
// end ;
3508: LD_VAR 0 2
3512: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3513: LD_INT 0
3515: PPUSH
3516: PPUSH
3517: PPUSH
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
// if not factory then
3522: LD_VAR 0 1
3526: NOT
3527: IFFALSE 3531
// exit ;
3529: GO 4056
// if control = control_apeman then
3531: LD_VAR 0 4
3535: PUSH
3536: LD_INT 5
3538: EQUAL
3539: IFFALSE 3648
// begin tmp := UnitsInside ( factory ) ;
3541: LD_ADDR_VAR 0 8
3545: PUSH
3546: LD_VAR 0 1
3550: PPUSH
3551: CALL_OW 313
3555: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3556: LD_VAR 0 8
3560: PPUSH
3561: LD_INT 25
3563: PUSH
3564: LD_INT 12
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PPUSH
3571: CALL_OW 72
3575: NOT
3576: IFFALSE 3586
// control := control_manual ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_INT 1
3585: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3586: LD_ADDR_VAR 0 8
3590: PUSH
3591: LD_VAR 0 1
3595: PPUSH
3596: CALL 3283 0 1
3600: ST_TO_ADDR
// if tmp then
3601: LD_VAR 0 8
3605: IFFALSE 3648
// begin for i in tmp do
3607: LD_ADDR_VAR 0 7
3611: PUSH
3612: LD_VAR 0 8
3616: PUSH
3617: FOR_IN
3618: IFFALSE 3646
// if i [ 1 ] = b_ext_radar then
3620: LD_VAR 0 7
3624: PUSH
3625: LD_INT 1
3627: ARRAY
3628: PUSH
3629: LD_INT 20
3631: EQUAL
3632: IFFALSE 3644
// begin control := control_remote ;
3634: LD_ADDR_VAR 0 4
3638: PUSH
3639: LD_INT 2
3641: ST_TO_ADDR
// break ;
3642: GO 3646
// end ;
3644: GO 3617
3646: POP
3647: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3648: LD_VAR 0 1
3652: PPUSH
3653: LD_VAR 0 2
3657: PPUSH
3658: LD_VAR 0 3
3662: PPUSH
3663: LD_VAR 0 4
3667: PPUSH
3668: LD_VAR 0 5
3672: PPUSH
3673: CALL_OW 448
3677: IFFALSE 3712
// begin result := [ chassis , engine , control , weapon ] ;
3679: LD_ADDR_VAR 0 6
3683: PUSH
3684: LD_VAR 0 2
3688: PUSH
3689: LD_VAR 0 3
3693: PUSH
3694: LD_VAR 0 4
3698: PUSH
3699: LD_VAR 0 5
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: ST_TO_ADDR
// exit ;
3710: GO 4056
// end ; _chassis := AvailableChassisList ( factory ) ;
3712: LD_ADDR_VAR 0 9
3716: PUSH
3717: LD_VAR 0 1
3721: PPUSH
3722: CALL_OW 475
3726: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3727: LD_ADDR_VAR 0 11
3731: PUSH
3732: LD_VAR 0 1
3736: PPUSH
3737: CALL_OW 476
3741: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3742: LD_ADDR_VAR 0 12
3746: PUSH
3747: LD_VAR 0 1
3751: PPUSH
3752: CALL_OW 477
3756: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3757: LD_ADDR_VAR 0 10
3761: PUSH
3762: LD_VAR 0 1
3766: PPUSH
3767: CALL_OW 478
3771: ST_TO_ADDR
// if not chassis in _chassis then
3772: LD_VAR 0 2
3776: PUSH
3777: LD_VAR 0 9
3781: IN
3782: NOT
3783: IFFALSE 3809
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3785: LD_ADDR_VAR 0 2
3789: PUSH
3790: LD_VAR 0 9
3794: PUSH
3795: LD_INT 1
3797: PPUSH
3798: LD_VAR 0 9
3802: PPUSH
3803: CALL_OW 12
3807: ARRAY
3808: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3809: LD_VAR 0 2
3813: PPUSH
3814: LD_VAR 0 3
3818: PPUSH
3819: CALL 4061 0 2
3823: NOT
3824: IFFALSE 3883
// repeat engine := _engine [ 1 ] ;
3826: LD_ADDR_VAR 0 3
3830: PUSH
3831: LD_VAR 0 11
3835: PUSH
3836: LD_INT 1
3838: ARRAY
3839: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3840: LD_ADDR_VAR 0 11
3844: PUSH
3845: LD_VAR 0 11
3849: PPUSH
3850: LD_INT 1
3852: PPUSH
3853: CALL_OW 3
3857: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3858: LD_VAR 0 2
3862: PPUSH
3863: LD_VAR 0 3
3867: PPUSH
3868: CALL 4061 0 2
3872: PUSH
3873: LD_VAR 0 11
3877: PUSH
3878: EMPTY
3879: EQUAL
3880: OR
3881: IFFALSE 3826
// if not control in _control then
3883: LD_VAR 0 4
3887: PUSH
3888: LD_VAR 0 12
3892: IN
3893: NOT
3894: IFFALSE 3920
// control := _control [ rand ( 1 , _control ) ] ;
3896: LD_ADDR_VAR 0 4
3900: PUSH
3901: LD_VAR 0 12
3905: PUSH
3906: LD_INT 1
3908: PPUSH
3909: LD_VAR 0 12
3913: PPUSH
3914: CALL_OW 12
3918: ARRAY
3919: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3920: LD_VAR 0 2
3924: PPUSH
3925: LD_VAR 0 5
3929: PPUSH
3930: CALL 4281 0 2
3934: NOT
3935: IFFALSE 3994
// repeat weapon := _weapon [ 1 ] ;
3937: LD_ADDR_VAR 0 5
3941: PUSH
3942: LD_VAR 0 10
3946: PUSH
3947: LD_INT 1
3949: ARRAY
3950: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3951: LD_ADDR_VAR 0 10
3955: PUSH
3956: LD_VAR 0 10
3960: PPUSH
3961: LD_INT 1
3963: PPUSH
3964: CALL_OW 3
3968: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3969: LD_VAR 0 2
3973: PPUSH
3974: LD_VAR 0 5
3978: PPUSH
3979: CALL 4281 0 2
3983: PUSH
3984: LD_VAR 0 10
3988: PUSH
3989: EMPTY
3990: EQUAL
3991: OR
3992: IFFALSE 3937
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3994: LD_VAR 0 1
3998: PPUSH
3999: LD_VAR 0 2
4003: PPUSH
4004: LD_VAR 0 3
4008: PPUSH
4009: LD_VAR 0 4
4013: PPUSH
4014: LD_VAR 0 5
4018: PPUSH
4019: CALL_OW 448
4023: IFFALSE 4056
// result := [ chassis , engine , control , weapon ] ;
4025: LD_ADDR_VAR 0 6
4029: PUSH
4030: LD_VAR 0 2
4034: PUSH
4035: LD_VAR 0 3
4039: PUSH
4040: LD_VAR 0 4
4044: PUSH
4045: LD_VAR 0 5
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: ST_TO_ADDR
// end ;
4056: LD_VAR 0 6
4060: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4061: LD_INT 0
4063: PPUSH
// if not chassis or not engine then
4064: LD_VAR 0 1
4068: NOT
4069: PUSH
4070: LD_VAR 0 2
4074: NOT
4075: OR
4076: IFFALSE 4080
// exit ;
4078: GO 4276
// case engine of engine_solar :
4080: LD_VAR 0 2
4084: PUSH
4085: LD_INT 2
4087: DOUBLE
4088: EQUAL
4089: IFTRUE 4093
4091: GO 4131
4093: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4094: LD_ADDR_VAR 0 3
4098: PUSH
4099: LD_INT 11
4101: PUSH
4102: LD_INT 12
4104: PUSH
4105: LD_INT 13
4107: PUSH
4108: LD_INT 14
4110: PUSH
4111: LD_INT 1
4113: PUSH
4114: LD_INT 2
4116: PUSH
4117: LD_INT 3
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: ST_TO_ADDR
4129: GO 4260
4131: LD_INT 1
4133: DOUBLE
4134: EQUAL
4135: IFTRUE 4139
4137: GO 4201
4139: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4140: LD_ADDR_VAR 0 3
4144: PUSH
4145: LD_INT 11
4147: PUSH
4148: LD_INT 12
4150: PUSH
4151: LD_INT 13
4153: PUSH
4154: LD_INT 14
4156: PUSH
4157: LD_INT 1
4159: PUSH
4160: LD_INT 2
4162: PUSH
4163: LD_INT 3
4165: PUSH
4166: LD_INT 4
4168: PUSH
4169: LD_INT 5
4171: PUSH
4172: LD_INT 21
4174: PUSH
4175: LD_INT 23
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 24
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: ST_TO_ADDR
4199: GO 4260
4201: LD_INT 3
4203: DOUBLE
4204: EQUAL
4205: IFTRUE 4209
4207: GO 4259
4209: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4210: LD_ADDR_VAR 0 3
4214: PUSH
4215: LD_INT 13
4217: PUSH
4218: LD_INT 14
4220: PUSH
4221: LD_INT 2
4223: PUSH
4224: LD_INT 3
4226: PUSH
4227: LD_INT 4
4229: PUSH
4230: LD_INT 5
4232: PUSH
4233: LD_INT 21
4235: PUSH
4236: LD_INT 22
4238: PUSH
4239: LD_INT 23
4241: PUSH
4242: LD_INT 24
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: ST_TO_ADDR
4257: GO 4260
4259: POP
// result := ( chassis in result ) ;
4260: LD_ADDR_VAR 0 3
4264: PUSH
4265: LD_VAR 0 1
4269: PUSH
4270: LD_VAR 0 3
4274: IN
4275: ST_TO_ADDR
// end ;
4276: LD_VAR 0 3
4280: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4281: LD_INT 0
4283: PPUSH
// if not chassis or not weapon then
4284: LD_VAR 0 1
4288: NOT
4289: PUSH
4290: LD_VAR 0 2
4294: NOT
4295: OR
4296: IFFALSE 4300
// exit ;
4298: GO 5326
// case weapon of us_machine_gun :
4300: LD_VAR 0 2
4304: PUSH
4305: LD_INT 2
4307: DOUBLE
4308: EQUAL
4309: IFTRUE 4313
4311: GO 4343
4313: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4314: LD_ADDR_VAR 0 3
4318: PUSH
4319: LD_INT 1
4321: PUSH
4322: LD_INT 2
4324: PUSH
4325: LD_INT 3
4327: PUSH
4328: LD_INT 4
4330: PUSH
4331: LD_INT 5
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: ST_TO_ADDR
4341: GO 5310
4343: LD_INT 3
4345: DOUBLE
4346: EQUAL
4347: IFTRUE 4351
4349: GO 4381
4351: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4352: LD_ADDR_VAR 0 3
4356: PUSH
4357: LD_INT 1
4359: PUSH
4360: LD_INT 2
4362: PUSH
4363: LD_INT 3
4365: PUSH
4366: LD_INT 4
4368: PUSH
4369: LD_INT 5
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: ST_TO_ADDR
4379: GO 5310
4381: LD_INT 11
4383: DOUBLE
4384: EQUAL
4385: IFTRUE 4389
4387: GO 4419
4389: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4390: LD_ADDR_VAR 0 3
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: LD_INT 2
4400: PUSH
4401: LD_INT 3
4403: PUSH
4404: LD_INT 4
4406: PUSH
4407: LD_INT 5
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: ST_TO_ADDR
4417: GO 5310
4419: LD_INT 4
4421: DOUBLE
4422: EQUAL
4423: IFTRUE 4427
4425: GO 4453
4427: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4428: LD_ADDR_VAR 0 3
4432: PUSH
4433: LD_INT 2
4435: PUSH
4436: LD_INT 3
4438: PUSH
4439: LD_INT 4
4441: PUSH
4442: LD_INT 5
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: ST_TO_ADDR
4451: GO 5310
4453: LD_INT 5
4455: DOUBLE
4456: EQUAL
4457: IFTRUE 4461
4459: GO 4487
4461: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4462: LD_ADDR_VAR 0 3
4466: PUSH
4467: LD_INT 2
4469: PUSH
4470: LD_INT 3
4472: PUSH
4473: LD_INT 4
4475: PUSH
4476: LD_INT 5
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: ST_TO_ADDR
4485: GO 5310
4487: LD_INT 9
4489: DOUBLE
4490: EQUAL
4491: IFTRUE 4495
4493: GO 4521
4495: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4496: LD_ADDR_VAR 0 3
4500: PUSH
4501: LD_INT 2
4503: PUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 4
4509: PUSH
4510: LD_INT 5
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: ST_TO_ADDR
4519: GO 5310
4521: LD_INT 7
4523: DOUBLE
4524: EQUAL
4525: IFTRUE 4529
4527: GO 4555
4529: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4530: LD_ADDR_VAR 0 3
4534: PUSH
4535: LD_INT 2
4537: PUSH
4538: LD_INT 3
4540: PUSH
4541: LD_INT 4
4543: PUSH
4544: LD_INT 5
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: ST_TO_ADDR
4553: GO 5310
4555: LD_INT 12
4557: DOUBLE
4558: EQUAL
4559: IFTRUE 4563
4561: GO 4589
4563: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4564: LD_ADDR_VAR 0 3
4568: PUSH
4569: LD_INT 2
4571: PUSH
4572: LD_INT 3
4574: PUSH
4575: LD_INT 4
4577: PUSH
4578: LD_INT 5
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: ST_TO_ADDR
4587: GO 5310
4589: LD_INT 13
4591: DOUBLE
4592: EQUAL
4593: IFTRUE 4597
4595: GO 4623
4597: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4598: LD_ADDR_VAR 0 3
4602: PUSH
4603: LD_INT 2
4605: PUSH
4606: LD_INT 3
4608: PUSH
4609: LD_INT 4
4611: PUSH
4612: LD_INT 5
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: ST_TO_ADDR
4621: GO 5310
4623: LD_INT 14
4625: DOUBLE
4626: EQUAL
4627: IFTRUE 4631
4629: GO 4649
4631: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4632: LD_ADDR_VAR 0 3
4636: PUSH
4637: LD_INT 4
4639: PUSH
4640: LD_INT 5
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: ST_TO_ADDR
4647: GO 5310
4649: LD_INT 6
4651: DOUBLE
4652: EQUAL
4653: IFTRUE 4657
4655: GO 4675
4657: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4658: LD_ADDR_VAR 0 3
4662: PUSH
4663: LD_INT 4
4665: PUSH
4666: LD_INT 5
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: ST_TO_ADDR
4673: GO 5310
4675: LD_INT 10
4677: DOUBLE
4678: EQUAL
4679: IFTRUE 4683
4681: GO 4701
4683: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4684: LD_ADDR_VAR 0 3
4688: PUSH
4689: LD_INT 4
4691: PUSH
4692: LD_INT 5
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: ST_TO_ADDR
4699: GO 5310
4701: LD_INT 22
4703: DOUBLE
4704: EQUAL
4705: IFTRUE 4709
4707: GO 4735
4709: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4710: LD_ADDR_VAR 0 3
4714: PUSH
4715: LD_INT 11
4717: PUSH
4718: LD_INT 12
4720: PUSH
4721: LD_INT 13
4723: PUSH
4724: LD_INT 14
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: ST_TO_ADDR
4733: GO 5310
4735: LD_INT 23
4737: DOUBLE
4738: EQUAL
4739: IFTRUE 4743
4741: GO 4769
4743: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4744: LD_ADDR_VAR 0 3
4748: PUSH
4749: LD_INT 11
4751: PUSH
4752: LD_INT 12
4754: PUSH
4755: LD_INT 13
4757: PUSH
4758: LD_INT 14
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: ST_TO_ADDR
4767: GO 5310
4769: LD_INT 24
4771: DOUBLE
4772: EQUAL
4773: IFTRUE 4777
4775: GO 4803
4777: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4778: LD_ADDR_VAR 0 3
4782: PUSH
4783: LD_INT 11
4785: PUSH
4786: LD_INT 12
4788: PUSH
4789: LD_INT 13
4791: PUSH
4792: LD_INT 14
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: ST_TO_ADDR
4801: GO 5310
4803: LD_INT 30
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4811
4809: GO 4837
4811: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: LD_INT 11
4819: PUSH
4820: LD_INT 12
4822: PUSH
4823: LD_INT 13
4825: PUSH
4826: LD_INT 14
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: ST_TO_ADDR
4835: GO 5310
4837: LD_INT 25
4839: DOUBLE
4840: EQUAL
4841: IFTRUE 4845
4843: GO 4863
4845: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4846: LD_ADDR_VAR 0 3
4850: PUSH
4851: LD_INT 13
4853: PUSH
4854: LD_INT 14
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: ST_TO_ADDR
4861: GO 5310
4863: LD_INT 27
4865: DOUBLE
4866: EQUAL
4867: IFTRUE 4871
4869: GO 4889
4871: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4872: LD_ADDR_VAR 0 3
4876: PUSH
4877: LD_INT 13
4879: PUSH
4880: LD_INT 14
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: ST_TO_ADDR
4887: GO 5310
4889: LD_INT 28
4891: DOUBLE
4892: EQUAL
4893: IFTRUE 4897
4895: GO 4915
4897: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4898: LD_ADDR_VAR 0 3
4902: PUSH
4903: LD_INT 13
4905: PUSH
4906: LD_INT 14
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: ST_TO_ADDR
4913: GO 5310
4915: LD_INT 29
4917: DOUBLE
4918: EQUAL
4919: IFTRUE 4923
4921: GO 4941
4923: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4924: LD_ADDR_VAR 0 3
4928: PUSH
4929: LD_INT 13
4931: PUSH
4932: LD_INT 14
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: ST_TO_ADDR
4939: GO 5310
4941: LD_INT 31
4943: DOUBLE
4944: EQUAL
4945: IFTRUE 4949
4947: GO 4967
4949: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4950: LD_ADDR_VAR 0 3
4954: PUSH
4955: LD_INT 13
4957: PUSH
4958: LD_INT 14
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: ST_TO_ADDR
4965: GO 5310
4967: LD_INT 26
4969: DOUBLE
4970: EQUAL
4971: IFTRUE 4975
4973: GO 4993
4975: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4976: LD_ADDR_VAR 0 3
4980: PUSH
4981: LD_INT 13
4983: PUSH
4984: LD_INT 14
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: ST_TO_ADDR
4991: GO 5310
4993: LD_INT 42
4995: DOUBLE
4996: EQUAL
4997: IFTRUE 5001
4999: GO 5027
5001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5002: LD_ADDR_VAR 0 3
5006: PUSH
5007: LD_INT 21
5009: PUSH
5010: LD_INT 22
5012: PUSH
5013: LD_INT 23
5015: PUSH
5016: LD_INT 24
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: ST_TO_ADDR
5025: GO 5310
5027: LD_INT 43
5029: DOUBLE
5030: EQUAL
5031: IFTRUE 5035
5033: GO 5061
5035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5036: LD_ADDR_VAR 0 3
5040: PUSH
5041: LD_INT 21
5043: PUSH
5044: LD_INT 22
5046: PUSH
5047: LD_INT 23
5049: PUSH
5050: LD_INT 24
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: ST_TO_ADDR
5059: GO 5310
5061: LD_INT 44
5063: DOUBLE
5064: EQUAL
5065: IFTRUE 5069
5067: GO 5095
5069: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5070: LD_ADDR_VAR 0 3
5074: PUSH
5075: LD_INT 21
5077: PUSH
5078: LD_INT 22
5080: PUSH
5081: LD_INT 23
5083: PUSH
5084: LD_INT 24
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: ST_TO_ADDR
5093: GO 5310
5095: LD_INT 45
5097: DOUBLE
5098: EQUAL
5099: IFTRUE 5103
5101: GO 5129
5103: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5104: LD_ADDR_VAR 0 3
5108: PUSH
5109: LD_INT 21
5111: PUSH
5112: LD_INT 22
5114: PUSH
5115: LD_INT 23
5117: PUSH
5118: LD_INT 24
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: ST_TO_ADDR
5127: GO 5310
5129: LD_INT 49
5131: DOUBLE
5132: EQUAL
5133: IFTRUE 5137
5135: GO 5163
5137: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5138: LD_ADDR_VAR 0 3
5142: PUSH
5143: LD_INT 21
5145: PUSH
5146: LD_INT 22
5148: PUSH
5149: LD_INT 23
5151: PUSH
5152: LD_INT 24
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: ST_TO_ADDR
5161: GO 5310
5163: LD_INT 51
5165: DOUBLE
5166: EQUAL
5167: IFTRUE 5171
5169: GO 5197
5171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5172: LD_ADDR_VAR 0 3
5176: PUSH
5177: LD_INT 21
5179: PUSH
5180: LD_INT 22
5182: PUSH
5183: LD_INT 23
5185: PUSH
5186: LD_INT 24
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: ST_TO_ADDR
5195: GO 5310
5197: LD_INT 52
5199: DOUBLE
5200: EQUAL
5201: IFTRUE 5205
5203: GO 5231
5205: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5206: LD_ADDR_VAR 0 3
5210: PUSH
5211: LD_INT 21
5213: PUSH
5214: LD_INT 22
5216: PUSH
5217: LD_INT 23
5219: PUSH
5220: LD_INT 24
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: ST_TO_ADDR
5229: GO 5310
5231: LD_INT 53
5233: DOUBLE
5234: EQUAL
5235: IFTRUE 5239
5237: GO 5257
5239: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5240: LD_ADDR_VAR 0 3
5244: PUSH
5245: LD_INT 23
5247: PUSH
5248: LD_INT 24
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: ST_TO_ADDR
5255: GO 5310
5257: LD_INT 46
5259: DOUBLE
5260: EQUAL
5261: IFTRUE 5265
5263: GO 5283
5265: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_INT 23
5273: PUSH
5274: LD_INT 24
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: ST_TO_ADDR
5281: GO 5310
5283: LD_INT 47
5285: DOUBLE
5286: EQUAL
5287: IFTRUE 5291
5289: GO 5309
5291: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5292: LD_ADDR_VAR 0 3
5296: PUSH
5297: LD_INT 23
5299: PUSH
5300: LD_INT 24
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: ST_TO_ADDR
5307: GO 5310
5309: POP
// result := ( chassis in result ) ;
5310: LD_ADDR_VAR 0 3
5314: PUSH
5315: LD_VAR 0 1
5319: PUSH
5320: LD_VAR 0 3
5324: IN
5325: ST_TO_ADDR
// end ;
5326: LD_VAR 0 3
5330: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5331: LD_INT 0
5333: PPUSH
5334: PPUSH
5335: PPUSH
5336: PPUSH
5337: PPUSH
5338: PPUSH
5339: PPUSH
// result := array ;
5340: LD_ADDR_VAR 0 5
5344: PUSH
5345: LD_VAR 0 1
5349: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5350: LD_VAR 0 1
5354: NOT
5355: PUSH
5356: LD_VAR 0 2
5360: NOT
5361: OR
5362: PUSH
5363: LD_VAR 0 3
5367: NOT
5368: OR
5369: PUSH
5370: LD_VAR 0 2
5374: PUSH
5375: LD_VAR 0 1
5379: GREATER
5380: OR
5381: PUSH
5382: LD_VAR 0 3
5386: PUSH
5387: LD_VAR 0 1
5391: GREATER
5392: OR
5393: IFFALSE 5397
// exit ;
5395: GO 5693
// if direction then
5397: LD_VAR 0 4
5401: IFFALSE 5465
// begin d := 1 ;
5403: LD_ADDR_VAR 0 9
5407: PUSH
5408: LD_INT 1
5410: ST_TO_ADDR
// if i_from > i_to then
5411: LD_VAR 0 2
5415: PUSH
5416: LD_VAR 0 3
5420: GREATER
5421: IFFALSE 5447
// length := ( array - i_from ) + i_to else
5423: LD_ADDR_VAR 0 11
5427: PUSH
5428: LD_VAR 0 1
5432: PUSH
5433: LD_VAR 0 2
5437: MINUS
5438: PUSH
5439: LD_VAR 0 3
5443: PLUS
5444: ST_TO_ADDR
5445: GO 5463
// length := i_to - i_from ;
5447: LD_ADDR_VAR 0 11
5451: PUSH
5452: LD_VAR 0 3
5456: PUSH
5457: LD_VAR 0 2
5461: MINUS
5462: ST_TO_ADDR
// end else
5463: GO 5526
// begin d := - 1 ;
5465: LD_ADDR_VAR 0 9
5469: PUSH
5470: LD_INT 1
5472: NEG
5473: ST_TO_ADDR
// if i_from > i_to then
5474: LD_VAR 0 2
5478: PUSH
5479: LD_VAR 0 3
5483: GREATER
5484: IFFALSE 5504
// length := i_from - i_to else
5486: LD_ADDR_VAR 0 11
5490: PUSH
5491: LD_VAR 0 2
5495: PUSH
5496: LD_VAR 0 3
5500: MINUS
5501: ST_TO_ADDR
5502: GO 5526
// length := ( array - i_to ) + i_from ;
5504: LD_ADDR_VAR 0 11
5508: PUSH
5509: LD_VAR 0 1
5513: PUSH
5514: LD_VAR 0 3
5518: MINUS
5519: PUSH
5520: LD_VAR 0 2
5524: PLUS
5525: ST_TO_ADDR
// end ; if not length then
5526: LD_VAR 0 11
5530: NOT
5531: IFFALSE 5535
// exit ;
5533: GO 5693
// tmp := array ;
5535: LD_ADDR_VAR 0 10
5539: PUSH
5540: LD_VAR 0 1
5544: ST_TO_ADDR
// for i = 1 to length do
5545: LD_ADDR_VAR 0 6
5549: PUSH
5550: DOUBLE
5551: LD_INT 1
5553: DEC
5554: ST_TO_ADDR
5555: LD_VAR 0 11
5559: PUSH
5560: FOR_TO
5561: IFFALSE 5681
// begin for j = 1 to array do
5563: LD_ADDR_VAR 0 7
5567: PUSH
5568: DOUBLE
5569: LD_INT 1
5571: DEC
5572: ST_TO_ADDR
5573: LD_VAR 0 1
5577: PUSH
5578: FOR_TO
5579: IFFALSE 5667
// begin k := j + d ;
5581: LD_ADDR_VAR 0 8
5585: PUSH
5586: LD_VAR 0 7
5590: PUSH
5591: LD_VAR 0 9
5595: PLUS
5596: ST_TO_ADDR
// if k > array then
5597: LD_VAR 0 8
5601: PUSH
5602: LD_VAR 0 1
5606: GREATER
5607: IFFALSE 5617
// k := 1 ;
5609: LD_ADDR_VAR 0 8
5613: PUSH
5614: LD_INT 1
5616: ST_TO_ADDR
// if not k then
5617: LD_VAR 0 8
5621: NOT
5622: IFFALSE 5634
// k := array ;
5624: LD_ADDR_VAR 0 8
5628: PUSH
5629: LD_VAR 0 1
5633: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5634: LD_ADDR_VAR 0 10
5638: PUSH
5639: LD_VAR 0 10
5643: PPUSH
5644: LD_VAR 0 8
5648: PPUSH
5649: LD_VAR 0 1
5653: PUSH
5654: LD_VAR 0 7
5658: ARRAY
5659: PPUSH
5660: CALL_OW 1
5664: ST_TO_ADDR
// end ;
5665: GO 5578
5667: POP
5668: POP
// array := tmp ;
5669: LD_ADDR_VAR 0 1
5673: PUSH
5674: LD_VAR 0 10
5678: ST_TO_ADDR
// end ;
5679: GO 5560
5681: POP
5682: POP
// result := array ;
5683: LD_ADDR_VAR 0 5
5687: PUSH
5688: LD_VAR 0 1
5692: ST_TO_ADDR
// end ;
5693: LD_VAR 0 5
5697: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5698: LD_INT 0
5700: PPUSH
5701: PPUSH
// result := 0 ;
5702: LD_ADDR_VAR 0 3
5706: PUSH
5707: LD_INT 0
5709: ST_TO_ADDR
// if not array or not value in array then
5710: LD_VAR 0 1
5714: NOT
5715: PUSH
5716: LD_VAR 0 2
5720: PUSH
5721: LD_VAR 0 1
5725: IN
5726: NOT
5727: OR
5728: IFFALSE 5732
// exit ;
5730: GO 5786
// for i = 1 to array do
5732: LD_ADDR_VAR 0 4
5736: PUSH
5737: DOUBLE
5738: LD_INT 1
5740: DEC
5741: ST_TO_ADDR
5742: LD_VAR 0 1
5746: PUSH
5747: FOR_TO
5748: IFFALSE 5784
// if value = array [ i ] then
5750: LD_VAR 0 2
5754: PUSH
5755: LD_VAR 0 1
5759: PUSH
5760: LD_VAR 0 4
5764: ARRAY
5765: EQUAL
5766: IFFALSE 5782
// begin result := i ;
5768: LD_ADDR_VAR 0 3
5772: PUSH
5773: LD_VAR 0 4
5777: ST_TO_ADDR
// exit ;
5778: POP
5779: POP
5780: GO 5786
// end ;
5782: GO 5747
5784: POP
5785: POP
// end ;
5786: LD_VAR 0 3
5790: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5791: LD_INT 0
5793: PPUSH
// vc_chassis := chassis ;
5794: LD_ADDR_OWVAR 37
5798: PUSH
5799: LD_VAR 0 1
5803: ST_TO_ADDR
// vc_engine := engine ;
5804: LD_ADDR_OWVAR 39
5808: PUSH
5809: LD_VAR 0 2
5813: ST_TO_ADDR
// vc_control := control ;
5814: LD_ADDR_OWVAR 38
5818: PUSH
5819: LD_VAR 0 3
5823: ST_TO_ADDR
// vc_weapon := weapon ;
5824: LD_ADDR_OWVAR 40
5828: PUSH
5829: LD_VAR 0 4
5833: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5834: LD_ADDR_OWVAR 41
5838: PUSH
5839: LD_VAR 0 5
5843: ST_TO_ADDR
// end ;
5844: LD_VAR 0 6
5848: RET
// export function WantPlant ( unit ) ; var task ; begin
5849: LD_INT 0
5851: PPUSH
5852: PPUSH
// result := false ;
5853: LD_ADDR_VAR 0 2
5857: PUSH
5858: LD_INT 0
5860: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5861: LD_ADDR_VAR 0 3
5865: PUSH
5866: LD_VAR 0 1
5870: PPUSH
5871: CALL_OW 437
5875: ST_TO_ADDR
// if task then
5876: LD_VAR 0 3
5880: IFFALSE 5908
// if task [ 1 ] [ 1 ] = p then
5882: LD_VAR 0 3
5886: PUSH
5887: LD_INT 1
5889: ARRAY
5890: PUSH
5891: LD_INT 1
5893: ARRAY
5894: PUSH
5895: LD_STRING p
5897: EQUAL
5898: IFFALSE 5908
// result := true ;
5900: LD_ADDR_VAR 0 2
5904: PUSH
5905: LD_INT 1
5907: ST_TO_ADDR
// end ;
5908: LD_VAR 0 2
5912: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5913: LD_INT 0
5915: PPUSH
5916: PPUSH
5917: PPUSH
5918: PPUSH
// if pos < 1 then
5919: LD_VAR 0 2
5923: PUSH
5924: LD_INT 1
5926: LESS
5927: IFFALSE 5931
// exit ;
5929: GO 6234
// if pos = 1 then
5931: LD_VAR 0 2
5935: PUSH
5936: LD_INT 1
5938: EQUAL
5939: IFFALSE 5972
// result := Replace ( arr , pos [ 1 ] , value ) else
5941: LD_ADDR_VAR 0 4
5945: PUSH
5946: LD_VAR 0 1
5950: PPUSH
5951: LD_VAR 0 2
5955: PUSH
5956: LD_INT 1
5958: ARRAY
5959: PPUSH
5960: LD_VAR 0 3
5964: PPUSH
5965: CALL_OW 1
5969: ST_TO_ADDR
5970: GO 6234
// begin tmp := arr ;
5972: LD_ADDR_VAR 0 6
5976: PUSH
5977: LD_VAR 0 1
5981: ST_TO_ADDR
// s_arr := [ tmp ] ;
5982: LD_ADDR_VAR 0 7
5986: PUSH
5987: LD_VAR 0 6
5991: PUSH
5992: EMPTY
5993: LIST
5994: ST_TO_ADDR
// for i = 1 to pos - 1 do
5995: LD_ADDR_VAR 0 5
5999: PUSH
6000: DOUBLE
6001: LD_INT 1
6003: DEC
6004: ST_TO_ADDR
6005: LD_VAR 0 2
6009: PUSH
6010: LD_INT 1
6012: MINUS
6013: PUSH
6014: FOR_TO
6015: IFFALSE 6060
// begin tmp := tmp [ pos [ i ] ] ;
6017: LD_ADDR_VAR 0 6
6021: PUSH
6022: LD_VAR 0 6
6026: PUSH
6027: LD_VAR 0 2
6031: PUSH
6032: LD_VAR 0 5
6036: ARRAY
6037: ARRAY
6038: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6039: LD_ADDR_VAR 0 7
6043: PUSH
6044: LD_VAR 0 7
6048: PUSH
6049: LD_VAR 0 6
6053: PUSH
6054: EMPTY
6055: LIST
6056: ADD
6057: ST_TO_ADDR
// end ;
6058: GO 6014
6060: POP
6061: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6062: LD_ADDR_VAR 0 6
6066: PUSH
6067: LD_VAR 0 6
6071: PPUSH
6072: LD_VAR 0 2
6076: PUSH
6077: LD_VAR 0 2
6081: ARRAY
6082: PPUSH
6083: LD_VAR 0 3
6087: PPUSH
6088: CALL_OW 1
6092: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6093: LD_ADDR_VAR 0 7
6097: PUSH
6098: LD_VAR 0 7
6102: PPUSH
6103: LD_VAR 0 7
6107: PPUSH
6108: LD_VAR 0 6
6112: PPUSH
6113: CALL_OW 1
6117: ST_TO_ADDR
// for i = s_arr downto 2 do
6118: LD_ADDR_VAR 0 5
6122: PUSH
6123: DOUBLE
6124: LD_VAR 0 7
6128: INC
6129: ST_TO_ADDR
6130: LD_INT 2
6132: PUSH
6133: FOR_DOWNTO
6134: IFFALSE 6218
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6136: LD_ADDR_VAR 0 6
6140: PUSH
6141: LD_VAR 0 7
6145: PUSH
6146: LD_VAR 0 5
6150: PUSH
6151: LD_INT 1
6153: MINUS
6154: ARRAY
6155: PPUSH
6156: LD_VAR 0 2
6160: PUSH
6161: LD_VAR 0 5
6165: PUSH
6166: LD_INT 1
6168: MINUS
6169: ARRAY
6170: PPUSH
6171: LD_VAR 0 7
6175: PUSH
6176: LD_VAR 0 5
6180: ARRAY
6181: PPUSH
6182: CALL_OW 1
6186: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6187: LD_ADDR_VAR 0 7
6191: PUSH
6192: LD_VAR 0 7
6196: PPUSH
6197: LD_VAR 0 5
6201: PUSH
6202: LD_INT 1
6204: MINUS
6205: PPUSH
6206: LD_VAR 0 6
6210: PPUSH
6211: CALL_OW 1
6215: ST_TO_ADDR
// end ;
6216: GO 6133
6218: POP
6219: POP
// result := s_arr [ 1 ] ;
6220: LD_ADDR_VAR 0 4
6224: PUSH
6225: LD_VAR 0 7
6229: PUSH
6230: LD_INT 1
6232: ARRAY
6233: ST_TO_ADDR
// end ; end ;
6234: LD_VAR 0 4
6238: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6239: LD_INT 0
6241: PPUSH
6242: PPUSH
// if not list then
6243: LD_VAR 0 1
6247: NOT
6248: IFFALSE 6252
// exit ;
6250: GO 6343
// i := list [ pos1 ] ;
6252: LD_ADDR_VAR 0 5
6256: PUSH
6257: LD_VAR 0 1
6261: PUSH
6262: LD_VAR 0 2
6266: ARRAY
6267: ST_TO_ADDR
// if not i then
6268: LD_VAR 0 5
6272: NOT
6273: IFFALSE 6277
// exit ;
6275: GO 6343
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6277: LD_ADDR_VAR 0 1
6281: PUSH
6282: LD_VAR 0 1
6286: PPUSH
6287: LD_VAR 0 2
6291: PPUSH
6292: LD_VAR 0 1
6296: PUSH
6297: LD_VAR 0 3
6301: ARRAY
6302: PPUSH
6303: CALL_OW 1
6307: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6308: LD_ADDR_VAR 0 1
6312: PUSH
6313: LD_VAR 0 1
6317: PPUSH
6318: LD_VAR 0 3
6322: PPUSH
6323: LD_VAR 0 5
6327: PPUSH
6328: CALL_OW 1
6332: ST_TO_ADDR
// result := list ;
6333: LD_ADDR_VAR 0 4
6337: PUSH
6338: LD_VAR 0 1
6342: ST_TO_ADDR
// end ;
6343: LD_VAR 0 4
6347: RET
// export function Add ( list , pos , val ) ; begin
6348: LD_INT 0
6350: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
6351: LD_ADDR_VAR 0 4
6355: PUSH
6356: LD_VAR 0 1
6360: PPUSH
6361: LD_VAR 0 2
6365: PPUSH
6366: LD_VAR 0 3
6370: PPUSH
6371: CALL 5913 0 3
6375: ST_TO_ADDR
6376: LD_VAR 0 4
6380: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6381: LD_INT 0
6383: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6384: LD_ADDR_VAR 0 5
6388: PUSH
6389: LD_VAR 0 1
6393: PPUSH
6394: CALL_OW 250
6398: PPUSH
6399: LD_VAR 0 1
6403: PPUSH
6404: CALL_OW 251
6408: PPUSH
6409: LD_VAR 0 2
6413: PPUSH
6414: LD_VAR 0 3
6418: PPUSH
6419: LD_VAR 0 4
6423: PPUSH
6424: CALL 6434 0 5
6428: ST_TO_ADDR
// end ;
6429: LD_VAR 0 5
6433: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6434: LD_INT 0
6436: PPUSH
6437: PPUSH
6438: PPUSH
6439: PPUSH
// if not list then
6440: LD_VAR 0 3
6444: NOT
6445: IFFALSE 6449
// exit ;
6447: GO 6837
// result := [ ] ;
6449: LD_ADDR_VAR 0 6
6453: PUSH
6454: EMPTY
6455: ST_TO_ADDR
// for i in list do
6456: LD_ADDR_VAR 0 7
6460: PUSH
6461: LD_VAR 0 3
6465: PUSH
6466: FOR_IN
6467: IFFALSE 6669
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6469: LD_ADDR_VAR 0 9
6473: PUSH
6474: LD_VAR 0 7
6478: PPUSH
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_VAR 0 2
6488: PPUSH
6489: CALL_OW 297
6493: ST_TO_ADDR
// if not result then
6494: LD_VAR 0 6
6498: NOT
6499: IFFALSE 6525
// result := [ [ i , tmp ] ] else
6501: LD_ADDR_VAR 0 6
6505: PUSH
6506: LD_VAR 0 7
6510: PUSH
6511: LD_VAR 0 9
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: PUSH
6520: EMPTY
6521: LIST
6522: ST_TO_ADDR
6523: GO 6667
// begin if result [ result ] [ 2 ] < tmp then
6525: LD_VAR 0 6
6529: PUSH
6530: LD_VAR 0 6
6534: ARRAY
6535: PUSH
6536: LD_INT 2
6538: ARRAY
6539: PUSH
6540: LD_VAR 0 9
6544: LESS
6545: IFFALSE 6587
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6547: LD_ADDR_VAR 0 6
6551: PUSH
6552: LD_VAR 0 6
6556: PPUSH
6557: LD_VAR 0 6
6561: PUSH
6562: LD_INT 1
6564: PLUS
6565: PPUSH
6566: LD_VAR 0 7
6570: PUSH
6571: LD_VAR 0 9
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PPUSH
6580: CALL_OW 2
6584: ST_TO_ADDR
6585: GO 6667
// for j = 1 to result do
6587: LD_ADDR_VAR 0 8
6591: PUSH
6592: DOUBLE
6593: LD_INT 1
6595: DEC
6596: ST_TO_ADDR
6597: LD_VAR 0 6
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6665
// begin if tmp < result [ j ] [ 2 ] then
6605: LD_VAR 0 9
6609: PUSH
6610: LD_VAR 0 6
6614: PUSH
6615: LD_VAR 0 8
6619: ARRAY
6620: PUSH
6621: LD_INT 2
6623: ARRAY
6624: LESS
6625: IFFALSE 6663
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6627: LD_ADDR_VAR 0 6
6631: PUSH
6632: LD_VAR 0 6
6636: PPUSH
6637: LD_VAR 0 8
6641: PPUSH
6642: LD_VAR 0 7
6646: PUSH
6647: LD_VAR 0 9
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: PPUSH
6656: CALL_OW 2
6660: ST_TO_ADDR
// break ;
6661: GO 6665
// end ; end ;
6663: GO 6602
6665: POP
6666: POP
// end ; end ;
6667: GO 6466
6669: POP
6670: POP
// if result and not asc then
6671: LD_VAR 0 6
6675: PUSH
6676: LD_VAR 0 4
6680: NOT
6681: AND
6682: IFFALSE 6757
// begin tmp := result ;
6684: LD_ADDR_VAR 0 9
6688: PUSH
6689: LD_VAR 0 6
6693: ST_TO_ADDR
// for i = tmp downto 1 do
6694: LD_ADDR_VAR 0 7
6698: PUSH
6699: DOUBLE
6700: LD_VAR 0 9
6704: INC
6705: ST_TO_ADDR
6706: LD_INT 1
6708: PUSH
6709: FOR_DOWNTO
6710: IFFALSE 6755
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6712: LD_ADDR_VAR 0 6
6716: PUSH
6717: LD_VAR 0 6
6721: PPUSH
6722: LD_VAR 0 9
6726: PUSH
6727: LD_VAR 0 7
6731: MINUS
6732: PUSH
6733: LD_INT 1
6735: PLUS
6736: PPUSH
6737: LD_VAR 0 9
6741: PUSH
6742: LD_VAR 0 7
6746: ARRAY
6747: PPUSH
6748: CALL_OW 1
6752: ST_TO_ADDR
6753: GO 6709
6755: POP
6756: POP
// end ; tmp := [ ] ;
6757: LD_ADDR_VAR 0 9
6761: PUSH
6762: EMPTY
6763: ST_TO_ADDR
// if mode then
6764: LD_VAR 0 5
6768: IFFALSE 6837
// begin for i = 1 to result do
6770: LD_ADDR_VAR 0 7
6774: PUSH
6775: DOUBLE
6776: LD_INT 1
6778: DEC
6779: ST_TO_ADDR
6780: LD_VAR 0 6
6784: PUSH
6785: FOR_TO
6786: IFFALSE 6825
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6788: LD_ADDR_VAR 0 9
6792: PUSH
6793: LD_VAR 0 9
6797: PPUSH
6798: LD_VAR 0 7
6802: PPUSH
6803: LD_VAR 0 6
6807: PUSH
6808: LD_VAR 0 7
6812: ARRAY
6813: PUSH
6814: LD_INT 1
6816: ARRAY
6817: PPUSH
6818: CALL_OW 1
6822: ST_TO_ADDR
6823: GO 6785
6825: POP
6826: POP
// result := tmp ;
6827: LD_ADDR_VAR 0 6
6831: PUSH
6832: LD_VAR 0 9
6836: ST_TO_ADDR
// end ; end ;
6837: LD_VAR 0 6
6841: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6842: LD_INT 0
6844: PPUSH
6845: PPUSH
6846: PPUSH
6847: PPUSH
6848: PPUSH
6849: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6850: LD_ADDR_VAR 0 5
6854: PUSH
6855: LD_INT 0
6857: PUSH
6858: LD_INT 0
6860: PUSH
6861: LD_INT 0
6863: PUSH
6864: EMPTY
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: ST_TO_ADDR
// if not x or not y then
6872: LD_VAR 0 2
6876: NOT
6877: PUSH
6878: LD_VAR 0 3
6882: NOT
6883: OR
6884: IFFALSE 6888
// exit ;
6886: GO 8534
// if not range then
6888: LD_VAR 0 4
6892: NOT
6893: IFFALSE 6903
// range := 10 ;
6895: LD_ADDR_VAR 0 4
6899: PUSH
6900: LD_INT 10
6902: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6903: LD_ADDR_VAR 0 8
6907: PUSH
6908: LD_INT 81
6910: PUSH
6911: LD_VAR 0 1
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: LD_INT 92
6922: PUSH
6923: LD_VAR 0 2
6927: PUSH
6928: LD_VAR 0 3
6932: PUSH
6933: LD_VAR 0 4
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: PUSH
6944: LD_INT 3
6946: PUSH
6947: LD_INT 21
6949: PUSH
6950: LD_INT 3
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: PPUSH
6966: CALL_OW 69
6970: ST_TO_ADDR
// if not tmp then
6971: LD_VAR 0 8
6975: NOT
6976: IFFALSE 6980
// exit ;
6978: GO 8534
// for i in tmp do
6980: LD_ADDR_VAR 0 6
6984: PUSH
6985: LD_VAR 0 8
6989: PUSH
6990: FOR_IN
6991: IFFALSE 8509
// begin points := [ 0 , 0 , 0 ] ;
6993: LD_ADDR_VAR 0 9
6997: PUSH
6998: LD_INT 0
7000: PUSH
7001: LD_INT 0
7003: PUSH
7004: LD_INT 0
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: ST_TO_ADDR
// bpoints := 1 ;
7012: LD_ADDR_VAR 0 10
7016: PUSH
7017: LD_INT 1
7019: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7020: LD_VAR 0 6
7024: PPUSH
7025: CALL_OW 247
7029: PUSH
7030: LD_INT 1
7032: DOUBLE
7033: EQUAL
7034: IFTRUE 7038
7036: GO 7616
7038: POP
// begin if GetClass ( i ) = 1 then
7039: LD_VAR 0 6
7043: PPUSH
7044: CALL_OW 257
7048: PUSH
7049: LD_INT 1
7051: EQUAL
7052: IFFALSE 7073
// points := [ 10 , 5 , 3 ] ;
7054: LD_ADDR_VAR 0 9
7058: PUSH
7059: LD_INT 10
7061: PUSH
7062: LD_INT 5
7064: PUSH
7065: LD_INT 3
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7073: LD_VAR 0 6
7077: PPUSH
7078: CALL_OW 257
7082: PUSH
7083: LD_INT 2
7085: PUSH
7086: LD_INT 3
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: IN
7097: IFFALSE 7118
// points := [ 3 , 2 , 1 ] ;
7099: LD_ADDR_VAR 0 9
7103: PUSH
7104: LD_INT 3
7106: PUSH
7107: LD_INT 2
7109: PUSH
7110: LD_INT 1
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: LIST
7117: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7118: LD_VAR 0 6
7122: PPUSH
7123: CALL_OW 257
7127: PUSH
7128: LD_INT 5
7130: EQUAL
7131: IFFALSE 7152
// points := [ 130 , 5 , 2 ] ;
7133: LD_ADDR_VAR 0 9
7137: PUSH
7138: LD_INT 130
7140: PUSH
7141: LD_INT 5
7143: PUSH
7144: LD_INT 2
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: LIST
7151: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7152: LD_VAR 0 6
7156: PPUSH
7157: CALL_OW 257
7161: PUSH
7162: LD_INT 8
7164: EQUAL
7165: IFFALSE 7186
// points := [ 35 , 35 , 30 ] ;
7167: LD_ADDR_VAR 0 9
7171: PUSH
7172: LD_INT 35
7174: PUSH
7175: LD_INT 35
7177: PUSH
7178: LD_INT 30
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: LIST
7185: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7186: LD_VAR 0 6
7190: PPUSH
7191: CALL_OW 257
7195: PUSH
7196: LD_INT 9
7198: EQUAL
7199: IFFALSE 7220
// points := [ 20 , 55 , 40 ] ;
7201: LD_ADDR_VAR 0 9
7205: PUSH
7206: LD_INT 20
7208: PUSH
7209: LD_INT 55
7211: PUSH
7212: LD_INT 40
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: LIST
7219: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7220: LD_VAR 0 6
7224: PPUSH
7225: CALL_OW 257
7229: PUSH
7230: LD_INT 12
7232: PUSH
7233: LD_INT 16
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: IN
7240: IFFALSE 7261
// points := [ 5 , 3 , 2 ] ;
7242: LD_ADDR_VAR 0 9
7246: PUSH
7247: LD_INT 5
7249: PUSH
7250: LD_INT 3
7252: PUSH
7253: LD_INT 2
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7261: LD_VAR 0 6
7265: PPUSH
7266: CALL_OW 257
7270: PUSH
7271: LD_INT 17
7273: EQUAL
7274: IFFALSE 7295
// points := [ 100 , 50 , 75 ] ;
7276: LD_ADDR_VAR 0 9
7280: PUSH
7281: LD_INT 100
7283: PUSH
7284: LD_INT 50
7286: PUSH
7287: LD_INT 75
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: LIST
7294: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7295: LD_VAR 0 6
7299: PPUSH
7300: CALL_OW 257
7304: PUSH
7305: LD_INT 15
7307: EQUAL
7308: IFFALSE 7329
// points := [ 10 , 5 , 3 ] ;
7310: LD_ADDR_VAR 0 9
7314: PUSH
7315: LD_INT 10
7317: PUSH
7318: LD_INT 5
7320: PUSH
7321: LD_INT 3
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: LIST
7328: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7329: LD_VAR 0 6
7333: PPUSH
7334: CALL_OW 257
7338: PUSH
7339: LD_INT 14
7341: EQUAL
7342: IFFALSE 7363
// points := [ 10 , 0 , 0 ] ;
7344: LD_ADDR_VAR 0 9
7348: PUSH
7349: LD_INT 10
7351: PUSH
7352: LD_INT 0
7354: PUSH
7355: LD_INT 0
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: LIST
7362: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7363: LD_VAR 0 6
7367: PPUSH
7368: CALL_OW 257
7372: PUSH
7373: LD_INT 11
7375: EQUAL
7376: IFFALSE 7397
// points := [ 30 , 10 , 5 ] ;
7378: LD_ADDR_VAR 0 9
7382: PUSH
7383: LD_INT 30
7385: PUSH
7386: LD_INT 10
7388: PUSH
7389: LD_INT 5
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: LIST
7396: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7397: LD_VAR 0 1
7401: PPUSH
7402: LD_INT 5
7404: PPUSH
7405: CALL_OW 321
7409: PUSH
7410: LD_INT 2
7412: EQUAL
7413: IFFALSE 7430
// bpoints := bpoints * 1.8 ;
7415: LD_ADDR_VAR 0 10
7419: PUSH
7420: LD_VAR 0 10
7424: PUSH
7425: LD_REAL  1.80000000000000E+0000
7428: MUL
7429: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7430: LD_VAR 0 6
7434: PPUSH
7435: CALL_OW 257
7439: PUSH
7440: LD_INT 1
7442: PUSH
7443: LD_INT 2
7445: PUSH
7446: LD_INT 3
7448: PUSH
7449: LD_INT 4
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: IN
7458: PUSH
7459: LD_VAR 0 1
7463: PPUSH
7464: LD_INT 51
7466: PPUSH
7467: CALL_OW 321
7471: PUSH
7472: LD_INT 2
7474: EQUAL
7475: AND
7476: IFFALSE 7493
// bpoints := bpoints * 1.2 ;
7478: LD_ADDR_VAR 0 10
7482: PUSH
7483: LD_VAR 0 10
7487: PUSH
7488: LD_REAL  1.20000000000000E+0000
7491: MUL
7492: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7493: LD_VAR 0 6
7497: PPUSH
7498: CALL_OW 257
7502: PUSH
7503: LD_INT 5
7505: PUSH
7506: LD_INT 7
7508: PUSH
7509: LD_INT 9
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: IN
7517: PUSH
7518: LD_VAR 0 1
7522: PPUSH
7523: LD_INT 52
7525: PPUSH
7526: CALL_OW 321
7530: PUSH
7531: LD_INT 2
7533: EQUAL
7534: AND
7535: IFFALSE 7552
// bpoints := bpoints * 1.5 ;
7537: LD_ADDR_VAR 0 10
7541: PUSH
7542: LD_VAR 0 10
7546: PUSH
7547: LD_REAL  1.50000000000000E+0000
7550: MUL
7551: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7552: LD_VAR 0 1
7556: PPUSH
7557: LD_INT 66
7559: PPUSH
7560: CALL_OW 321
7564: PUSH
7565: LD_INT 2
7567: EQUAL
7568: IFFALSE 7585
// bpoints := bpoints * 1.1 ;
7570: LD_ADDR_VAR 0 10
7574: PUSH
7575: LD_VAR 0 10
7579: PUSH
7580: LD_REAL  1.10000000000000E+0000
7583: MUL
7584: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7585: LD_ADDR_VAR 0 10
7589: PUSH
7590: LD_VAR 0 10
7594: PUSH
7595: LD_VAR 0 6
7599: PPUSH
7600: LD_INT 1
7602: PPUSH
7603: CALL_OW 259
7607: PUSH
7608: LD_REAL  1.15000000000000E+0000
7611: MUL
7612: MUL
7613: ST_TO_ADDR
// end ; unit_vehicle :
7614: GO 8438
7616: LD_INT 2
7618: DOUBLE
7619: EQUAL
7620: IFTRUE 7624
7622: GO 8426
7624: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7625: LD_VAR 0 6
7629: PPUSH
7630: CALL_OW 264
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: LD_INT 42
7640: PUSH
7641: LD_INT 24
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: LIST
7648: IN
7649: IFFALSE 7670
// points := [ 25 , 5 , 3 ] ;
7651: LD_ADDR_VAR 0 9
7655: PUSH
7656: LD_INT 25
7658: PUSH
7659: LD_INT 5
7661: PUSH
7662: LD_INT 3
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: LIST
7669: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7670: LD_VAR 0 6
7674: PPUSH
7675: CALL_OW 264
7679: PUSH
7680: LD_INT 4
7682: PUSH
7683: LD_INT 43
7685: PUSH
7686: LD_INT 25
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: LIST
7693: IN
7694: IFFALSE 7715
// points := [ 40 , 15 , 5 ] ;
7696: LD_ADDR_VAR 0 9
7700: PUSH
7701: LD_INT 40
7703: PUSH
7704: LD_INT 15
7706: PUSH
7707: LD_INT 5
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: LIST
7714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7715: LD_VAR 0 6
7719: PPUSH
7720: CALL_OW 264
7724: PUSH
7725: LD_INT 3
7727: PUSH
7728: LD_INT 23
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: IN
7735: IFFALSE 7756
// points := [ 7 , 25 , 8 ] ;
7737: LD_ADDR_VAR 0 9
7741: PUSH
7742: LD_INT 7
7744: PUSH
7745: LD_INT 25
7747: PUSH
7748: LD_INT 8
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: LIST
7755: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7756: LD_VAR 0 6
7760: PPUSH
7761: CALL_OW 264
7765: PUSH
7766: LD_INT 5
7768: PUSH
7769: LD_INT 27
7771: PUSH
7772: LD_INT 44
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: LIST
7779: IN
7780: IFFALSE 7801
// points := [ 14 , 50 , 16 ] ;
7782: LD_ADDR_VAR 0 9
7786: PUSH
7787: LD_INT 14
7789: PUSH
7790: LD_INT 50
7792: PUSH
7793: LD_INT 16
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: LIST
7800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7801: LD_VAR 0 6
7805: PPUSH
7806: CALL_OW 264
7810: PUSH
7811: LD_INT 6
7813: PUSH
7814: LD_INT 46
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: IN
7821: IFFALSE 7842
// points := [ 32 , 120 , 70 ] ;
7823: LD_ADDR_VAR 0 9
7827: PUSH
7828: LD_INT 32
7830: PUSH
7831: LD_INT 120
7833: PUSH
7834: LD_INT 70
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
7842: LD_VAR 0 6
7846: PPUSH
7847: CALL_OW 264
7851: PUSH
7852: LD_INT 7
7854: PUSH
7855: LD_INT 28
7857: PUSH
7858: LD_INT 45
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: IN
7866: IFFALSE 7887
// points := [ 35 , 20 , 45 ] ;
7868: LD_ADDR_VAR 0 9
7872: PUSH
7873: LD_INT 35
7875: PUSH
7876: LD_INT 20
7878: PUSH
7879: LD_INT 45
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7887: LD_VAR 0 6
7891: PPUSH
7892: CALL_OW 264
7896: PUSH
7897: LD_INT 47
7899: PUSH
7900: EMPTY
7901: LIST
7902: IN
7903: IFFALSE 7924
// points := [ 67 , 45 , 75 ] ;
7905: LD_ADDR_VAR 0 9
7909: PUSH
7910: LD_INT 67
7912: PUSH
7913: LD_INT 45
7915: PUSH
7916: LD_INT 75
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7924: LD_VAR 0 6
7928: PPUSH
7929: CALL_OW 264
7933: PUSH
7934: LD_INT 26
7936: PUSH
7937: EMPTY
7938: LIST
7939: IN
7940: IFFALSE 7961
// points := [ 120 , 30 , 80 ] ;
7942: LD_ADDR_VAR 0 9
7946: PUSH
7947: LD_INT 120
7949: PUSH
7950: LD_INT 30
7952: PUSH
7953: LD_INT 80
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: LIST
7960: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7961: LD_VAR 0 6
7965: PPUSH
7966: CALL_OW 264
7970: PUSH
7971: LD_INT 22
7973: PUSH
7974: EMPTY
7975: LIST
7976: IN
7977: IFFALSE 7998
// points := [ 40 , 1 , 1 ] ;
7979: LD_ADDR_VAR 0 9
7983: PUSH
7984: LD_INT 40
7986: PUSH
7987: LD_INT 1
7989: PUSH
7990: LD_INT 1
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7998: LD_VAR 0 6
8002: PPUSH
8003: CALL_OW 264
8007: PUSH
8008: LD_INT 29
8010: PUSH
8011: EMPTY
8012: LIST
8013: IN
8014: IFFALSE 8035
// points := [ 70 , 200 , 400 ] ;
8016: LD_ADDR_VAR 0 9
8020: PUSH
8021: LD_INT 70
8023: PUSH
8024: LD_INT 200
8026: PUSH
8027: LD_INT 400
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: LIST
8034: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8035: LD_VAR 0 6
8039: PPUSH
8040: CALL_OW 264
8044: PUSH
8045: LD_INT 14
8047: PUSH
8048: LD_INT 53
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: IN
8055: IFFALSE 8076
// points := [ 40 , 10 , 20 ] ;
8057: LD_ADDR_VAR 0 9
8061: PUSH
8062: LD_INT 40
8064: PUSH
8065: LD_INT 10
8067: PUSH
8068: LD_INT 20
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: LIST
8075: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8076: LD_VAR 0 6
8080: PPUSH
8081: CALL_OW 264
8085: PUSH
8086: LD_INT 9
8088: PUSH
8089: EMPTY
8090: LIST
8091: IN
8092: IFFALSE 8113
// points := [ 5 , 70 , 20 ] ;
8094: LD_ADDR_VAR 0 9
8098: PUSH
8099: LD_INT 5
8101: PUSH
8102: LD_INT 70
8104: PUSH
8105: LD_INT 20
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: LIST
8112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8113: LD_VAR 0 6
8117: PPUSH
8118: CALL_OW 264
8122: PUSH
8123: LD_INT 10
8125: PUSH
8126: EMPTY
8127: LIST
8128: IN
8129: IFFALSE 8150
// points := [ 35 , 110 , 70 ] ;
8131: LD_ADDR_VAR 0 9
8135: PUSH
8136: LD_INT 35
8138: PUSH
8139: LD_INT 110
8141: PUSH
8142: LD_INT 70
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: LIST
8149: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8150: LD_VAR 0 6
8154: PPUSH
8155: CALL_OW 265
8159: PUSH
8160: LD_INT 25
8162: EQUAL
8163: IFFALSE 8184
// points := [ 80 , 65 , 100 ] ;
8165: LD_ADDR_VAR 0 9
8169: PUSH
8170: LD_INT 80
8172: PUSH
8173: LD_INT 65
8175: PUSH
8176: LD_INT 100
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: LIST
8183: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8184: LD_VAR 0 6
8188: PPUSH
8189: CALL_OW 263
8193: PUSH
8194: LD_INT 1
8196: EQUAL
8197: IFFALSE 8232
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8199: LD_ADDR_VAR 0 10
8203: PUSH
8204: LD_VAR 0 10
8208: PUSH
8209: LD_VAR 0 6
8213: PPUSH
8214: CALL_OW 311
8218: PPUSH
8219: LD_INT 3
8221: PPUSH
8222: CALL_OW 259
8226: PUSH
8227: LD_INT 4
8229: MUL
8230: MUL
8231: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8232: LD_VAR 0 6
8236: PPUSH
8237: CALL_OW 263
8241: PUSH
8242: LD_INT 2
8244: EQUAL
8245: IFFALSE 8296
// begin j := IsControledBy ( i ) ;
8247: LD_ADDR_VAR 0 7
8251: PUSH
8252: LD_VAR 0 6
8256: PPUSH
8257: CALL_OW 312
8261: ST_TO_ADDR
// if j then
8262: LD_VAR 0 7
8266: IFFALSE 8296
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8268: LD_ADDR_VAR 0 10
8272: PUSH
8273: LD_VAR 0 10
8277: PUSH
8278: LD_VAR 0 7
8282: PPUSH
8283: LD_INT 3
8285: PPUSH
8286: CALL_OW 259
8290: PUSH
8291: LD_INT 3
8293: MUL
8294: MUL
8295: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8296: LD_VAR 0 6
8300: PPUSH
8301: CALL_OW 264
8305: PUSH
8306: LD_INT 5
8308: PUSH
8309: LD_INT 6
8311: PUSH
8312: LD_INT 46
8314: PUSH
8315: LD_INT 44
8317: PUSH
8318: LD_INT 47
8320: PUSH
8321: LD_INT 45
8323: PUSH
8324: LD_INT 28
8326: PUSH
8327: LD_INT 7
8329: PUSH
8330: LD_INT 27
8332: PUSH
8333: LD_INT 29
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: IN
8348: PUSH
8349: LD_VAR 0 1
8353: PPUSH
8354: LD_INT 52
8356: PPUSH
8357: CALL_OW 321
8361: PUSH
8362: LD_INT 2
8364: EQUAL
8365: AND
8366: IFFALSE 8383
// bpoints := bpoints * 1.2 ;
8368: LD_ADDR_VAR 0 10
8372: PUSH
8373: LD_VAR 0 10
8377: PUSH
8378: LD_REAL  1.20000000000000E+0000
8381: MUL
8382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8383: LD_VAR 0 6
8387: PPUSH
8388: CALL_OW 264
8392: PUSH
8393: LD_INT 6
8395: PUSH
8396: LD_INT 46
8398: PUSH
8399: LD_INT 47
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: LIST
8406: IN
8407: IFFALSE 8424
// bpoints := bpoints * 1.2 ;
8409: LD_ADDR_VAR 0 10
8413: PUSH
8414: LD_VAR 0 10
8418: PUSH
8419: LD_REAL  1.20000000000000E+0000
8422: MUL
8423: ST_TO_ADDR
// end ; unit_building :
8424: GO 8438
8426: LD_INT 3
8428: DOUBLE
8429: EQUAL
8430: IFTRUE 8434
8432: GO 8437
8434: POP
// ; end ;
8435: GO 8438
8437: POP
// for j = 1 to 3 do
8438: LD_ADDR_VAR 0 7
8442: PUSH
8443: DOUBLE
8444: LD_INT 1
8446: DEC
8447: ST_TO_ADDR
8448: LD_INT 3
8450: PUSH
8451: FOR_TO
8452: IFFALSE 8505
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8454: LD_ADDR_VAR 0 5
8458: PUSH
8459: LD_VAR 0 5
8463: PPUSH
8464: LD_VAR 0 7
8468: PPUSH
8469: LD_VAR 0 5
8473: PUSH
8474: LD_VAR 0 7
8478: ARRAY
8479: PUSH
8480: LD_VAR 0 9
8484: PUSH
8485: LD_VAR 0 7
8489: ARRAY
8490: PUSH
8491: LD_VAR 0 10
8495: MUL
8496: PLUS
8497: PPUSH
8498: CALL_OW 1
8502: ST_TO_ADDR
8503: GO 8451
8505: POP
8506: POP
// end ;
8507: GO 6990
8509: POP
8510: POP
// result := Replace ( result , 4 , tmp ) ;
8511: LD_ADDR_VAR 0 5
8515: PUSH
8516: LD_VAR 0 5
8520: PPUSH
8521: LD_INT 4
8523: PPUSH
8524: LD_VAR 0 8
8528: PPUSH
8529: CALL_OW 1
8533: ST_TO_ADDR
// end ;
8534: LD_VAR 0 5
8538: RET
// export function DangerAtRange ( unit , range ) ; begin
8539: LD_INT 0
8541: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8542: LD_ADDR_VAR 0 3
8546: PUSH
8547: LD_VAR 0 1
8551: PPUSH
8552: CALL_OW 255
8556: PPUSH
8557: LD_VAR 0 1
8561: PPUSH
8562: CALL_OW 250
8566: PPUSH
8567: LD_VAR 0 1
8571: PPUSH
8572: CALL_OW 251
8576: PPUSH
8577: LD_VAR 0 2
8581: PPUSH
8582: CALL 6842 0 4
8586: ST_TO_ADDR
// end ;
8587: LD_VAR 0 3
8591: RET
// export function IsExtension ( b ) ; begin
8592: LD_INT 0
8594: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8595: LD_ADDR_VAR 0 2
8599: PUSH
8600: LD_VAR 0 1
8604: PPUSH
8605: CALL_OW 266
8609: PUSH
8610: LD_INT 23
8612: PUSH
8613: LD_INT 20
8615: PUSH
8616: LD_INT 22
8618: PUSH
8619: LD_INT 17
8621: PUSH
8622: LD_INT 24
8624: PUSH
8625: LD_INT 21
8627: PUSH
8628: LD_INT 19
8630: PUSH
8631: LD_INT 16
8633: PUSH
8634: LD_INT 25
8636: PUSH
8637: LD_INT 18
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: IN
8652: ST_TO_ADDR
// end ;
8653: LD_VAR 0 2
8657: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
8658: LD_INT 0
8660: PPUSH
8661: PPUSH
8662: PPUSH
// result := [ ] ;
8663: LD_ADDR_VAR 0 2
8667: PUSH
8668: EMPTY
8669: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
8670: LD_ADDR_VAR 0 3
8674: PUSH
8675: LD_INT 21
8677: PUSH
8678: LD_INT 3
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PPUSH
8685: CALL_OW 69
8689: ST_TO_ADDR
// if not tmp then
8690: LD_VAR 0 3
8694: NOT
8695: IFFALSE 8699
// exit ;
8697: GO 8749
// for i in tmp do
8699: LD_ADDR_VAR 0 4
8703: PUSH
8704: LD_VAR 0 3
8708: PUSH
8709: FOR_IN
8710: IFFALSE 8747
// if GetBase ( i ) = base then
8712: LD_VAR 0 4
8716: PPUSH
8717: CALL_OW 274
8721: PUSH
8722: LD_VAR 0 1
8726: EQUAL
8727: IFFALSE 8745
// result := result ^ i ;
8729: LD_ADDR_VAR 0 2
8733: PUSH
8734: LD_VAR 0 2
8738: PUSH
8739: LD_VAR 0 4
8743: ADD
8744: ST_TO_ADDR
8745: GO 8709
8747: POP
8748: POP
// end ;
8749: LD_VAR 0 2
8753: RET
// export function ComComplete ( unit , b ) ; var i ; begin
8754: LD_INT 0
8756: PPUSH
8757: PPUSH
// if BuildingStatus ( b ) = bs_build then
8758: LD_VAR 0 2
8762: PPUSH
8763: CALL_OW 461
8767: PUSH
8768: LD_INT 1
8770: EQUAL
8771: IFFALSE 8831
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8773: LD_VAR 0 1
8777: PPUSH
8778: LD_STRING h
8780: PUSH
8781: LD_VAR 0 2
8785: PPUSH
8786: CALL_OW 250
8790: PUSH
8791: LD_VAR 0 2
8795: PPUSH
8796: CALL_OW 251
8800: PUSH
8801: LD_VAR 0 2
8805: PUSH
8806: LD_INT 0
8808: PUSH
8809: LD_INT 0
8811: PUSH
8812: LD_INT 0
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: PUSH
8824: EMPTY
8825: LIST
8826: PPUSH
8827: CALL_OW 446
// end ;
8831: LD_VAR 0 3
8835: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8836: LD_INT 0
8838: PPUSH
8839: PPUSH
8840: PPUSH
8841: PPUSH
8842: PPUSH
8843: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
8844: LD_VAR 0 1
8848: NOT
8849: PUSH
8850: LD_VAR 0 1
8854: PPUSH
8855: CALL_OW 263
8859: PUSH
8860: LD_INT 2
8862: EQUAL
8863: NOT
8864: OR
8865: IFFALSE 8869
// exit ;
8867: GO 9185
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8869: LD_ADDR_VAR 0 6
8873: PUSH
8874: LD_INT 22
8876: PUSH
8877: LD_VAR 0 1
8881: PPUSH
8882: CALL_OW 255
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: LD_INT 2
8893: PUSH
8894: LD_INT 30
8896: PUSH
8897: LD_INT 36
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: PUSH
8904: LD_INT 34
8906: PUSH
8907: LD_INT 31
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PPUSH
8923: CALL_OW 69
8927: ST_TO_ADDR
// if not tmp then
8928: LD_VAR 0 6
8932: NOT
8933: IFFALSE 8937
// exit ;
8935: GO 9185
// result := [ ] ;
8937: LD_ADDR_VAR 0 2
8941: PUSH
8942: EMPTY
8943: ST_TO_ADDR
// for i in tmp do
8944: LD_ADDR_VAR 0 3
8948: PUSH
8949: LD_VAR 0 6
8953: PUSH
8954: FOR_IN
8955: IFFALSE 9026
// begin t := UnitsInside ( i ) ;
8957: LD_ADDR_VAR 0 4
8961: PUSH
8962: LD_VAR 0 3
8966: PPUSH
8967: CALL_OW 313
8971: ST_TO_ADDR
// if t then
8972: LD_VAR 0 4
8976: IFFALSE 9024
// for j in t do
8978: LD_ADDR_VAR 0 7
8982: PUSH
8983: LD_VAR 0 4
8987: PUSH
8988: FOR_IN
8989: IFFALSE 9022
// result := Insert ( result , result + 1 , j ) ;
8991: LD_ADDR_VAR 0 2
8995: PUSH
8996: LD_VAR 0 2
9000: PPUSH
9001: LD_VAR 0 2
9005: PUSH
9006: LD_INT 1
9008: PLUS
9009: PPUSH
9010: LD_VAR 0 7
9014: PPUSH
9015: CALL_OW 2
9019: ST_TO_ADDR
9020: GO 8988
9022: POP
9023: POP
// end ;
9024: GO 8954
9026: POP
9027: POP
// if not result then
9028: LD_VAR 0 2
9032: NOT
9033: IFFALSE 9037
// exit ;
9035: GO 9185
// mech := result [ 1 ] ;
9037: LD_ADDR_VAR 0 5
9041: PUSH
9042: LD_VAR 0 2
9046: PUSH
9047: LD_INT 1
9049: ARRAY
9050: ST_TO_ADDR
// if result > 1 then
9051: LD_VAR 0 2
9055: PUSH
9056: LD_INT 1
9058: GREATER
9059: IFFALSE 9171
// for i = 2 to result do
9061: LD_ADDR_VAR 0 3
9065: PUSH
9066: DOUBLE
9067: LD_INT 2
9069: DEC
9070: ST_TO_ADDR
9071: LD_VAR 0 2
9075: PUSH
9076: FOR_TO
9077: IFFALSE 9169
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9079: LD_ADDR_VAR 0 4
9083: PUSH
9084: LD_VAR 0 2
9088: PUSH
9089: LD_VAR 0 3
9093: ARRAY
9094: PPUSH
9095: LD_INT 3
9097: PPUSH
9098: CALL_OW 259
9102: PUSH
9103: LD_VAR 0 2
9107: PUSH
9108: LD_VAR 0 3
9112: ARRAY
9113: PPUSH
9114: CALL_OW 432
9118: MINUS
9119: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9120: LD_VAR 0 4
9124: PUSH
9125: LD_VAR 0 5
9129: PPUSH
9130: LD_INT 3
9132: PPUSH
9133: CALL_OW 259
9137: PUSH
9138: LD_VAR 0 5
9142: PPUSH
9143: CALL_OW 432
9147: MINUS
9148: GREATEREQUAL
9149: IFFALSE 9167
// mech := result [ i ] ;
9151: LD_ADDR_VAR 0 5
9155: PUSH
9156: LD_VAR 0 2
9160: PUSH
9161: LD_VAR 0 3
9165: ARRAY
9166: ST_TO_ADDR
// end ;
9167: GO 9076
9169: POP
9170: POP
// ComLinkTo ( vehicle , mech ) ;
9171: LD_VAR 0 1
9175: PPUSH
9176: LD_VAR 0 5
9180: PPUSH
9181: CALL_OW 135
// end ;
9185: LD_VAR 0 2
9189: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
9190: LD_INT 0
9192: PPUSH
9193: PPUSH
9194: PPUSH
9195: PPUSH
9196: PPUSH
9197: PPUSH
9198: PPUSH
9199: PPUSH
9200: PPUSH
9201: PPUSH
9202: PPUSH
9203: PPUSH
// result := [ ] ;
9204: LD_ADDR_VAR 0 6
9208: PUSH
9209: EMPTY
9210: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9211: LD_VAR 0 1
9215: PPUSH
9216: CALL_OW 266
9220: PUSH
9221: LD_INT 0
9223: PUSH
9224: LD_INT 1
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: IN
9231: NOT
9232: IFFALSE 9236
// exit ;
9234: GO 10645
// if name then
9236: LD_VAR 0 2
9240: IFFALSE 9256
// SetBName ( base_dep , name ) ;
9242: LD_VAR 0 1
9246: PPUSH
9247: LD_VAR 0 2
9251: PPUSH
9252: CALL_OW 500
// base := GetBase ( base_dep ) ;
9256: LD_ADDR_VAR 0 14
9260: PUSH
9261: LD_VAR 0 1
9265: PPUSH
9266: CALL_OW 274
9270: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9271: LD_ADDR_VAR 0 15
9275: PUSH
9276: LD_VAR 0 1
9280: PPUSH
9281: CALL_OW 255
9285: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9286: LD_ADDR_VAR 0 16
9290: PUSH
9291: LD_VAR 0 1
9295: PPUSH
9296: CALL_OW 248
9300: ST_TO_ADDR
// if sources then
9301: LD_VAR 0 4
9305: IFFALSE 9352
// for i = 1 to 3 do
9307: LD_ADDR_VAR 0 7
9311: PUSH
9312: DOUBLE
9313: LD_INT 1
9315: DEC
9316: ST_TO_ADDR
9317: LD_INT 3
9319: PUSH
9320: FOR_TO
9321: IFFALSE 9350
// AddResourceType ( base , i , sources [ i ] ) ;
9323: LD_VAR 0 14
9327: PPUSH
9328: LD_VAR 0 7
9332: PPUSH
9333: LD_VAR 0 4
9337: PUSH
9338: LD_VAR 0 7
9342: ARRAY
9343: PPUSH
9344: CALL_OW 276
9348: GO 9320
9350: POP
9351: POP
// buildings := GetBaseBuildings ( base ) ;
9352: LD_ADDR_VAR 0 17
9356: PUSH
9357: LD_VAR 0 14
9361: PPUSH
9362: CALL 8658 0 1
9366: ST_TO_ADDR
// InitHc ;
9367: CALL_OW 19
// InitUc ;
9371: CALL_OW 18
// uc_side := side ;
9375: LD_ADDR_OWVAR 20
9379: PUSH
9380: LD_VAR 0 15
9384: ST_TO_ADDR
// uc_nation := nation ;
9385: LD_ADDR_OWVAR 21
9389: PUSH
9390: LD_VAR 0 16
9394: ST_TO_ADDR
// if buildings then
9395: LD_VAR 0 17
9399: IFFALSE 10504
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9401: LD_VAR 0 17
9405: PPUSH
9406: LD_INT 2
9408: PUSH
9409: LD_INT 30
9411: PUSH
9412: LD_INT 32
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PUSH
9419: LD_INT 30
9421: PUSH
9422: LD_INT 33
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: LIST
9433: PPUSH
9434: CALL_OW 72
9438: IFFALSE 9521
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9440: LD_ADDR_VAR 0 7
9444: PUSH
9445: LD_VAR 0 17
9449: PPUSH
9450: LD_INT 2
9452: PUSH
9453: LD_INT 30
9455: PUSH
9456: LD_INT 32
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: LD_INT 30
9465: PUSH
9466: LD_INT 33
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: LIST
9477: PPUSH
9478: CALL_OW 72
9482: PUSH
9483: FOR_IN
9484: IFFALSE 9519
// begin if not GetBWeapon ( i ) then
9486: LD_VAR 0 7
9490: PPUSH
9491: CALL_OW 269
9495: NOT
9496: IFFALSE 9517
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
9498: LD_VAR 0 7
9502: PPUSH
9503: LD_VAR 0 7
9507: PPUSH
9508: CALL 10650 0 1
9512: PPUSH
9513: CALL_OW 431
// end ;
9517: GO 9483
9519: POP
9520: POP
// end ; for i = 1 to personel do
9521: LD_ADDR_VAR 0 7
9525: PUSH
9526: DOUBLE
9527: LD_INT 1
9529: DEC
9530: ST_TO_ADDR
9531: LD_VAR 0 5
9535: PUSH
9536: FOR_TO
9537: IFFALSE 10484
// begin if i > 4 then
9539: LD_VAR 0 7
9543: PUSH
9544: LD_INT 4
9546: GREATER
9547: IFFALSE 9551
// break ;
9549: GO 10484
// case i of 1 :
9551: LD_VAR 0 7
9555: PUSH
9556: LD_INT 1
9558: DOUBLE
9559: EQUAL
9560: IFTRUE 9564
9562: GO 9637
9564: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9565: LD_ADDR_VAR 0 11
9569: PUSH
9570: LD_VAR 0 17
9574: PPUSH
9575: LD_INT 22
9577: PUSH
9578: LD_VAR 0 15
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 2
9589: PUSH
9590: LD_INT 30
9592: PUSH
9593: LD_INT 32
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 30
9602: PUSH
9603: LD_INT 4
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 30
9612: PUSH
9613: LD_INT 5
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PPUSH
9630: CALL_OW 72
9634: ST_TO_ADDR
9635: GO 9859
9637: LD_INT 2
9639: DOUBLE
9640: EQUAL
9641: IFTRUE 9645
9643: GO 9707
9645: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9646: LD_ADDR_VAR 0 11
9650: PUSH
9651: LD_VAR 0 17
9655: PPUSH
9656: LD_INT 22
9658: PUSH
9659: LD_VAR 0 15
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PUSH
9668: LD_INT 2
9670: PUSH
9671: LD_INT 30
9673: PUSH
9674: LD_INT 0
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 30
9683: PUSH
9684: LD_INT 1
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: LIST
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PPUSH
9700: CALL_OW 72
9704: ST_TO_ADDR
9705: GO 9859
9707: LD_INT 3
9709: DOUBLE
9710: EQUAL
9711: IFTRUE 9715
9713: GO 9777
9715: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9716: LD_ADDR_VAR 0 11
9720: PUSH
9721: LD_VAR 0 17
9725: PPUSH
9726: LD_INT 22
9728: PUSH
9729: LD_VAR 0 15
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: LD_INT 2
9740: PUSH
9741: LD_INT 30
9743: PUSH
9744: LD_INT 2
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: PUSH
9751: LD_INT 30
9753: PUSH
9754: LD_INT 3
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PPUSH
9770: CALL_OW 72
9774: ST_TO_ADDR
9775: GO 9859
9777: LD_INT 4
9779: DOUBLE
9780: EQUAL
9781: IFTRUE 9785
9783: GO 9858
9785: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9786: LD_ADDR_VAR 0 11
9790: PUSH
9791: LD_VAR 0 17
9795: PPUSH
9796: LD_INT 22
9798: PUSH
9799: LD_VAR 0 15
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 2
9810: PUSH
9811: LD_INT 30
9813: PUSH
9814: LD_INT 6
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 30
9823: PUSH
9824: LD_INT 7
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 30
9833: PUSH
9834: LD_INT 8
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PPUSH
9851: CALL_OW 72
9855: ST_TO_ADDR
9856: GO 9859
9858: POP
// if not f then
9859: LD_VAR 0 11
9863: NOT
9864: IFFALSE 9868
// continue ;
9866: GO 9536
// x := personel [ i ] ;
9868: LD_ADDR_VAR 0 12
9872: PUSH
9873: LD_VAR 0 5
9877: PUSH
9878: LD_VAR 0 7
9882: ARRAY
9883: ST_TO_ADDR
// if x = - 1 then
9884: LD_VAR 0 12
9888: PUSH
9889: LD_INT 1
9891: NEG
9892: EQUAL
9893: IFFALSE 10102
// begin for j in f do
9895: LD_ADDR_VAR 0 8
9899: PUSH
9900: LD_VAR 0 11
9904: PUSH
9905: FOR_IN
9906: IFFALSE 10098
// repeat InitHc ;
9908: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9912: LD_VAR 0 8
9916: PPUSH
9917: CALL_OW 266
9921: PUSH
9922: LD_INT 5
9924: EQUAL
9925: IFFALSE 9995
// begin if UnitsInside ( j ) < 3 then
9927: LD_VAR 0 8
9931: PPUSH
9932: CALL_OW 313
9936: PUSH
9937: LD_INT 3
9939: LESS
9940: IFFALSE 9976
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9942: LD_INT 0
9944: PPUSH
9945: LD_INT 5
9947: PUSH
9948: LD_INT 8
9950: PUSH
9951: LD_INT 9
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: LIST
9958: PUSH
9959: LD_VAR 0 16
9963: ARRAY
9964: PPUSH
9965: LD_VAR 0 3
9969: PPUSH
9970: CALL_OW 380
9974: GO 9993
// PrepareHuman ( false , i , skill ) ;
9976: LD_INT 0
9978: PPUSH
9979: LD_VAR 0 7
9983: PPUSH
9984: LD_VAR 0 3
9988: PPUSH
9989: CALL_OW 380
// end else
9993: GO 10012
// PrepareHuman ( false , i , skill ) ;
9995: LD_INT 0
9997: PPUSH
9998: LD_VAR 0 7
10002: PPUSH
10003: LD_VAR 0 3
10007: PPUSH
10008: CALL_OW 380
// un := CreateHuman ;
10012: LD_ADDR_VAR 0 13
10016: PUSH
10017: CALL_OW 44
10021: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10022: LD_ADDR_VAR 0 6
10026: PUSH
10027: LD_VAR 0 6
10031: PPUSH
10032: LD_INT 1
10034: PPUSH
10035: LD_VAR 0 13
10039: PPUSH
10040: CALL_OW 2
10044: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10045: LD_VAR 0 13
10049: PPUSH
10050: LD_VAR 0 8
10054: PPUSH
10055: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10059: LD_VAR 0 8
10063: PPUSH
10064: CALL_OW 313
10068: PUSH
10069: LD_INT 6
10071: EQUAL
10072: PUSH
10073: LD_VAR 0 8
10077: PPUSH
10078: CALL_OW 266
10082: PUSH
10083: LD_INT 32
10085: PUSH
10086: LD_INT 31
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: IN
10093: OR
10094: IFFALSE 9908
10096: GO 9905
10098: POP
10099: POP
// end else
10100: GO 10482
// for j = 1 to x do
10102: LD_ADDR_VAR 0 8
10106: PUSH
10107: DOUBLE
10108: LD_INT 1
10110: DEC
10111: ST_TO_ADDR
10112: LD_VAR 0 12
10116: PUSH
10117: FOR_TO
10118: IFFALSE 10480
// begin InitHc ;
10120: CALL_OW 19
// if not f then
10124: LD_VAR 0 11
10128: NOT
10129: IFFALSE 10218
// begin PrepareHuman ( false , i , skill ) ;
10131: LD_INT 0
10133: PPUSH
10134: LD_VAR 0 7
10138: PPUSH
10139: LD_VAR 0 3
10143: PPUSH
10144: CALL_OW 380
// un := CreateHuman ;
10148: LD_ADDR_VAR 0 13
10152: PUSH
10153: CALL_OW 44
10157: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10158: LD_ADDR_VAR 0 6
10162: PUSH
10163: LD_VAR 0 6
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: LD_VAR 0 13
10175: PPUSH
10176: CALL_OW 2
10180: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10181: LD_VAR 0 13
10185: PPUSH
10186: LD_VAR 0 1
10190: PPUSH
10191: CALL_OW 250
10195: PPUSH
10196: LD_VAR 0 1
10200: PPUSH
10201: CALL_OW 251
10205: PPUSH
10206: LD_INT 10
10208: PPUSH
10209: LD_INT 0
10211: PPUSH
10212: CALL_OW 50
// continue ;
10216: GO 10117
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10218: LD_VAR 0 11
10222: PUSH
10223: LD_INT 1
10225: ARRAY
10226: PPUSH
10227: CALL_OW 313
10231: PUSH
10232: LD_VAR 0 11
10236: PUSH
10237: LD_INT 1
10239: ARRAY
10240: PPUSH
10241: CALL_OW 266
10245: PUSH
10246: LD_INT 32
10248: PUSH
10249: LD_INT 31
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: IN
10256: AND
10257: PUSH
10258: LD_VAR 0 11
10262: PUSH
10263: LD_INT 1
10265: ARRAY
10266: PPUSH
10267: CALL_OW 313
10271: PUSH
10272: LD_INT 6
10274: EQUAL
10275: OR
10276: IFFALSE 10296
// f := Delete ( f , 1 ) ;
10278: LD_ADDR_VAR 0 11
10282: PUSH
10283: LD_VAR 0 11
10287: PPUSH
10288: LD_INT 1
10290: PPUSH
10291: CALL_OW 3
10295: ST_TO_ADDR
// if not f then
10296: LD_VAR 0 11
10300: NOT
10301: IFFALSE 10319
// begin x := x + 2 ;
10303: LD_ADDR_VAR 0 12
10307: PUSH
10308: LD_VAR 0 12
10312: PUSH
10313: LD_INT 2
10315: PLUS
10316: ST_TO_ADDR
// continue ;
10317: GO 10117
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10319: LD_VAR 0 11
10323: PUSH
10324: LD_INT 1
10326: ARRAY
10327: PPUSH
10328: CALL_OW 266
10332: PUSH
10333: LD_INT 5
10335: EQUAL
10336: IFFALSE 10410
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10338: LD_VAR 0 11
10342: PUSH
10343: LD_INT 1
10345: ARRAY
10346: PPUSH
10347: CALL_OW 313
10351: PUSH
10352: LD_INT 3
10354: LESS
10355: IFFALSE 10391
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10357: LD_INT 0
10359: PPUSH
10360: LD_INT 5
10362: PUSH
10363: LD_INT 8
10365: PUSH
10366: LD_INT 9
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: LIST
10373: PUSH
10374: LD_VAR 0 16
10378: ARRAY
10379: PPUSH
10380: LD_VAR 0 3
10384: PPUSH
10385: CALL_OW 380
10389: GO 10408
// PrepareHuman ( false , i , skill ) ;
10391: LD_INT 0
10393: PPUSH
10394: LD_VAR 0 7
10398: PPUSH
10399: LD_VAR 0 3
10403: PPUSH
10404: CALL_OW 380
// end else
10408: GO 10427
// PrepareHuman ( false , i , skill ) ;
10410: LD_INT 0
10412: PPUSH
10413: LD_VAR 0 7
10417: PPUSH
10418: LD_VAR 0 3
10422: PPUSH
10423: CALL_OW 380
// un := CreateHuman ;
10427: LD_ADDR_VAR 0 13
10431: PUSH
10432: CALL_OW 44
10436: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10437: LD_ADDR_VAR 0 6
10441: PUSH
10442: LD_VAR 0 6
10446: PPUSH
10447: LD_INT 1
10449: PPUSH
10450: LD_VAR 0 13
10454: PPUSH
10455: CALL_OW 2
10459: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10460: LD_VAR 0 13
10464: PPUSH
10465: LD_VAR 0 11
10469: PUSH
10470: LD_INT 1
10472: ARRAY
10473: PPUSH
10474: CALL_OW 52
// end ;
10478: GO 10117
10480: POP
10481: POP
// end ;
10482: GO 9536
10484: POP
10485: POP
// result := result ^ buildings ;
10486: LD_ADDR_VAR 0 6
10490: PUSH
10491: LD_VAR 0 6
10495: PUSH
10496: LD_VAR 0 17
10500: ADD
10501: ST_TO_ADDR
// end else
10502: GO 10645
// begin for i = 1 to personel do
10504: LD_ADDR_VAR 0 7
10508: PUSH
10509: DOUBLE
10510: LD_INT 1
10512: DEC
10513: ST_TO_ADDR
10514: LD_VAR 0 5
10518: PUSH
10519: FOR_TO
10520: IFFALSE 10643
// begin if i > 4 then
10522: LD_VAR 0 7
10526: PUSH
10527: LD_INT 4
10529: GREATER
10530: IFFALSE 10534
// break ;
10532: GO 10643
// x := personel [ i ] ;
10534: LD_ADDR_VAR 0 12
10538: PUSH
10539: LD_VAR 0 5
10543: PUSH
10544: LD_VAR 0 7
10548: ARRAY
10549: ST_TO_ADDR
// if x = - 1 then
10550: LD_VAR 0 12
10554: PUSH
10555: LD_INT 1
10557: NEG
10558: EQUAL
10559: IFFALSE 10563
// continue ;
10561: GO 10519
// PrepareHuman ( false , i , skill ) ;
10563: LD_INT 0
10565: PPUSH
10566: LD_VAR 0 7
10570: PPUSH
10571: LD_VAR 0 3
10575: PPUSH
10576: CALL_OW 380
// un := CreateHuman ;
10580: LD_ADDR_VAR 0 13
10584: PUSH
10585: CALL_OW 44
10589: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10590: LD_VAR 0 13
10594: PPUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: CALL_OW 250
10604: PPUSH
10605: LD_VAR 0 1
10609: PPUSH
10610: CALL_OW 251
10614: PPUSH
10615: LD_INT 10
10617: PPUSH
10618: LD_INT 0
10620: PPUSH
10621: CALL_OW 50
// result := result ^ un ;
10625: LD_ADDR_VAR 0 6
10629: PUSH
10630: LD_VAR 0 6
10634: PUSH
10635: LD_VAR 0 13
10639: ADD
10640: ST_TO_ADDR
// end ;
10641: GO 10519
10643: POP
10644: POP
// end ; end ;
10645: LD_VAR 0 6
10649: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10650: LD_INT 0
10652: PPUSH
10653: PPUSH
10654: PPUSH
10655: PPUSH
10656: PPUSH
10657: PPUSH
10658: PPUSH
10659: PPUSH
10660: PPUSH
10661: PPUSH
10662: PPUSH
10663: PPUSH
10664: PPUSH
10665: PPUSH
10666: PPUSH
10667: PPUSH
// result := false ;
10668: LD_ADDR_VAR 0 2
10672: PUSH
10673: LD_INT 0
10675: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10676: LD_VAR 0 1
10680: NOT
10681: PUSH
10682: LD_VAR 0 1
10686: PPUSH
10687: CALL_OW 266
10691: PUSH
10692: LD_INT 32
10694: PUSH
10695: LD_INT 33
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: IN
10702: NOT
10703: OR
10704: IFFALSE 10708
// exit ;
10706: GO 11941
// nat := GetNation ( tower ) ;
10708: LD_ADDR_VAR 0 11
10712: PUSH
10713: LD_VAR 0 1
10717: PPUSH
10718: CALL_OW 248
10722: ST_TO_ADDR
// side := GetSide ( tower ) ;
10723: LD_ADDR_VAR 0 15
10727: PUSH
10728: LD_VAR 0 1
10732: PPUSH
10733: CALL_OW 255
10737: ST_TO_ADDR
// x := GetX ( tower ) ;
10738: LD_ADDR_VAR 0 9
10742: PUSH
10743: LD_VAR 0 1
10747: PPUSH
10748: CALL_OW 250
10752: ST_TO_ADDR
// y := GetY ( tower ) ;
10753: LD_ADDR_VAR 0 10
10757: PUSH
10758: LD_VAR 0 1
10762: PPUSH
10763: CALL_OW 251
10767: ST_TO_ADDR
// if not x or not y then
10768: LD_VAR 0 9
10772: NOT
10773: PUSH
10774: LD_VAR 0 10
10778: NOT
10779: OR
10780: IFFALSE 10784
// exit ;
10782: GO 11941
// weapon := 0 ;
10784: LD_ADDR_VAR 0 17
10788: PUSH
10789: LD_INT 0
10791: ST_TO_ADDR
// fac_list := [ ] ;
10792: LD_ADDR_VAR 0 16
10796: PUSH
10797: EMPTY
10798: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
10799: LD_ADDR_VAR 0 5
10803: PUSH
10804: LD_VAR 0 1
10808: PPUSH
10809: CALL_OW 274
10813: PPUSH
10814: CALL 8658 0 1
10818: PPUSH
10819: LD_INT 30
10821: PUSH
10822: LD_INT 3
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PPUSH
10829: CALL_OW 72
10833: ST_TO_ADDR
// if not factories then
10834: LD_VAR 0 5
10838: NOT
10839: IFFALSE 10843
// exit ;
10841: GO 11941
// for i in factories do
10843: LD_ADDR_VAR 0 7
10847: PUSH
10848: LD_VAR 0 5
10852: PUSH
10853: FOR_IN
10854: IFFALSE 10879
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10856: LD_ADDR_VAR 0 16
10860: PUSH
10861: LD_VAR 0 16
10865: PUSH
10866: LD_VAR 0 7
10870: PPUSH
10871: CALL_OW 478
10875: UNION
10876: ST_TO_ADDR
10877: GO 10853
10879: POP
10880: POP
// if not fac_list then
10881: LD_VAR 0 16
10885: NOT
10886: IFFALSE 10890
// exit ;
10888: GO 11941
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10890: LD_ADDR_VAR 0 4
10894: PUSH
10895: LD_INT 4
10897: PUSH
10898: LD_INT 5
10900: PUSH
10901: LD_INT 9
10903: PUSH
10904: LD_INT 10
10906: PUSH
10907: LD_INT 6
10909: PUSH
10910: LD_INT 7
10912: PUSH
10913: LD_INT 11
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 27
10927: PUSH
10928: LD_INT 28
10930: PUSH
10931: LD_INT 26
10933: PUSH
10934: LD_INT 30
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 43
10945: PUSH
10946: LD_INT 44
10948: PUSH
10949: LD_INT 46
10951: PUSH
10952: LD_INT 45
10954: PUSH
10955: LD_INT 47
10957: PUSH
10958: LD_INT 49
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: LIST
10973: PUSH
10974: LD_VAR 0 11
10978: ARRAY
10979: ST_TO_ADDR
// for i in list do
10980: LD_ADDR_VAR 0 7
10984: PUSH
10985: LD_VAR 0 4
10989: PUSH
10990: FOR_IN
10991: IFFALSE 11024
// if not i in fac_list then
10993: LD_VAR 0 7
10997: PUSH
10998: LD_VAR 0 16
11002: IN
11003: NOT
11004: IFFALSE 11022
// list := list diff i ;
11006: LD_ADDR_VAR 0 4
11010: PUSH
11011: LD_VAR 0 4
11015: PUSH
11016: LD_VAR 0 7
11020: DIFF
11021: ST_TO_ADDR
11022: GO 10990
11024: POP
11025: POP
// if not list then
11026: LD_VAR 0 4
11030: NOT
11031: IFFALSE 11035
// exit ;
11033: GO 11941
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11035: LD_VAR 0 11
11039: PUSH
11040: LD_INT 3
11042: EQUAL
11043: PUSH
11044: LD_INT 49
11046: PUSH
11047: LD_VAR 0 4
11051: IN
11052: AND
11053: PUSH
11054: LD_INT 31
11056: PPUSH
11057: LD_VAR 0 15
11061: PPUSH
11062: CALL_OW 321
11066: PUSH
11067: LD_INT 2
11069: EQUAL
11070: AND
11071: IFFALSE 11131
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11073: LD_INT 22
11075: PUSH
11076: LD_VAR 0 15
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PUSH
11085: LD_INT 35
11087: PUSH
11088: LD_INT 49
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: LD_INT 91
11097: PUSH
11098: LD_VAR 0 1
11102: PUSH
11103: LD_INT 10
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: LIST
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: LIST
11115: PPUSH
11116: CALL_OW 69
11120: NOT
11121: IFFALSE 11131
// weapon := ru_time_lapser ;
11123: LD_ADDR_VAR 0 17
11127: PUSH
11128: LD_INT 49
11130: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11131: LD_VAR 0 11
11135: PUSH
11136: LD_INT 1
11138: PUSH
11139: LD_INT 2
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: IN
11146: PUSH
11147: LD_INT 11
11149: PUSH
11150: LD_VAR 0 4
11154: IN
11155: PUSH
11156: LD_INT 30
11158: PUSH
11159: LD_VAR 0 4
11163: IN
11164: OR
11165: AND
11166: PUSH
11167: LD_INT 6
11169: PPUSH
11170: LD_VAR 0 15
11174: PPUSH
11175: CALL_OW 321
11179: PUSH
11180: LD_INT 2
11182: EQUAL
11183: AND
11184: IFFALSE 11349
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11186: LD_INT 22
11188: PUSH
11189: LD_VAR 0 15
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PUSH
11198: LD_INT 2
11200: PUSH
11201: LD_INT 35
11203: PUSH
11204: LD_INT 11
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PUSH
11211: LD_INT 35
11213: PUSH
11214: LD_INT 30
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 91
11228: PUSH
11229: LD_VAR 0 1
11233: PUSH
11234: LD_INT 18
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: LIST
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: LIST
11246: PPUSH
11247: CALL_OW 69
11251: NOT
11252: PUSH
11253: LD_INT 22
11255: PUSH
11256: LD_VAR 0 15
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 2
11267: PUSH
11268: LD_INT 30
11270: PUSH
11271: LD_INT 32
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 30
11280: PUSH
11281: LD_INT 33
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 91
11295: PUSH
11296: LD_VAR 0 1
11300: PUSH
11301: LD_INT 12
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: LIST
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: LIST
11313: PUSH
11314: EMPTY
11315: LIST
11316: PPUSH
11317: CALL_OW 69
11321: PUSH
11322: LD_INT 2
11324: GREATER
11325: AND
11326: IFFALSE 11349
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11328: LD_ADDR_VAR 0 17
11332: PUSH
11333: LD_INT 11
11335: PUSH
11336: LD_INT 30
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: LD_VAR 0 11
11347: ARRAY
11348: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11349: LD_VAR 0 17
11353: NOT
11354: PUSH
11355: LD_INT 40
11357: PPUSH
11358: LD_VAR 0 15
11362: PPUSH
11363: CALL_OW 321
11367: PUSH
11368: LD_INT 2
11370: EQUAL
11371: AND
11372: PUSH
11373: LD_INT 7
11375: PUSH
11376: LD_VAR 0 4
11380: IN
11381: PUSH
11382: LD_INT 28
11384: PUSH
11385: LD_VAR 0 4
11389: IN
11390: OR
11391: PUSH
11392: LD_INT 45
11394: PUSH
11395: LD_VAR 0 4
11399: IN
11400: OR
11401: AND
11402: IFFALSE 11656
// begin hex := GetHexInfo ( x , y ) ;
11404: LD_ADDR_VAR 0 3
11408: PUSH
11409: LD_VAR 0 9
11413: PPUSH
11414: LD_VAR 0 10
11418: PPUSH
11419: CALL_OW 546
11423: ST_TO_ADDR
// if hex [ 1 ] then
11424: LD_VAR 0 3
11428: PUSH
11429: LD_INT 1
11431: ARRAY
11432: IFFALSE 11436
// exit ;
11434: GO 11941
// height := hex [ 2 ] ;
11436: LD_ADDR_VAR 0 14
11440: PUSH
11441: LD_VAR 0 3
11445: PUSH
11446: LD_INT 2
11448: ARRAY
11449: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11450: LD_ADDR_VAR 0 13
11454: PUSH
11455: LD_INT 0
11457: PUSH
11458: LD_INT 2
11460: PUSH
11461: LD_INT 3
11463: PUSH
11464: LD_INT 5
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: ST_TO_ADDR
// for i in tmp do
11473: LD_ADDR_VAR 0 7
11477: PUSH
11478: LD_VAR 0 13
11482: PUSH
11483: FOR_IN
11484: IFFALSE 11654
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11486: LD_ADDR_VAR 0 8
11490: PUSH
11491: LD_VAR 0 9
11495: PPUSH
11496: LD_VAR 0 7
11500: PPUSH
11501: LD_INT 5
11503: PPUSH
11504: CALL_OW 272
11508: PUSH
11509: LD_VAR 0 10
11513: PPUSH
11514: LD_VAR 0 7
11518: PPUSH
11519: LD_INT 5
11521: PPUSH
11522: CALL_OW 273
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11531: LD_VAR 0 8
11535: PUSH
11536: LD_INT 1
11538: ARRAY
11539: PPUSH
11540: LD_VAR 0 8
11544: PUSH
11545: LD_INT 2
11547: ARRAY
11548: PPUSH
11549: CALL_OW 488
11553: IFFALSE 11652
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11555: LD_ADDR_VAR 0 3
11559: PUSH
11560: LD_VAR 0 8
11564: PUSH
11565: LD_INT 1
11567: ARRAY
11568: PPUSH
11569: LD_VAR 0 8
11573: PUSH
11574: LD_INT 2
11576: ARRAY
11577: PPUSH
11578: CALL_OW 546
11582: ST_TO_ADDR
// if hex [ 1 ] then
11583: LD_VAR 0 3
11587: PUSH
11588: LD_INT 1
11590: ARRAY
11591: IFFALSE 11595
// continue ;
11593: GO 11483
// h := hex [ 2 ] ;
11595: LD_ADDR_VAR 0 12
11599: PUSH
11600: LD_VAR 0 3
11604: PUSH
11605: LD_INT 2
11607: ARRAY
11608: ST_TO_ADDR
// if h + 7 < height then
11609: LD_VAR 0 12
11613: PUSH
11614: LD_INT 7
11616: PLUS
11617: PUSH
11618: LD_VAR 0 14
11622: LESS
11623: IFFALSE 11652
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11625: LD_ADDR_VAR 0 17
11629: PUSH
11630: LD_INT 7
11632: PUSH
11633: LD_INT 28
11635: PUSH
11636: LD_INT 45
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: PUSH
11644: LD_VAR 0 11
11648: ARRAY
11649: ST_TO_ADDR
// break ;
11650: GO 11654
// end ; end ; end ;
11652: GO 11483
11654: POP
11655: POP
// end ; if not weapon then
11656: LD_VAR 0 17
11660: NOT
11661: IFFALSE 11823
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11663: LD_ADDR_VAR 0 4
11667: PUSH
11668: LD_VAR 0 4
11672: PUSH
11673: LD_INT 11
11675: PUSH
11676: LD_INT 30
11678: PUSH
11679: LD_INT 49
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: LIST
11686: DIFF
11687: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
11688: LD_ADDR_VAR 0 17
11692: PUSH
11693: LD_VAR 0 4
11697: PUSH
11698: LD_INT 1
11700: PPUSH
11701: LD_VAR 0 4
11705: PPUSH
11706: CALL_OW 12
11710: ARRAY
11711: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
11712: LD_ADDR_VAR 0 13
11716: PUSH
11717: LD_INT 22
11719: PUSH
11720: LD_VAR 0 15
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 3
11731: PUSH
11732: LD_INT 35
11734: PUSH
11735: LD_INT 0
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PPUSH
11750: CALL_OW 69
11754: ST_TO_ADDR
// for i in tmp do
11755: LD_ADDR_VAR 0 7
11759: PUSH
11760: LD_VAR 0 13
11764: PUSH
11765: FOR_IN
11766: IFFALSE 11791
// list := list diff GetBWeapon ( i ) ;
11768: LD_ADDR_VAR 0 4
11772: PUSH
11773: LD_VAR 0 4
11777: PUSH
11778: LD_VAR 0 7
11782: PPUSH
11783: CALL_OW 269
11787: DIFF
11788: ST_TO_ADDR
11789: GO 11765
11791: POP
11792: POP
// if list then
11793: LD_VAR 0 4
11797: IFFALSE 11823
// weapon := list [ rand ( 1 , list ) ] ;
11799: LD_ADDR_VAR 0 17
11803: PUSH
11804: LD_VAR 0 4
11808: PUSH
11809: LD_INT 1
11811: PPUSH
11812: LD_VAR 0 4
11816: PPUSH
11817: CALL_OW 12
11821: ARRAY
11822: ST_TO_ADDR
// end ; if weapon then
11823: LD_VAR 0 17
11827: IFFALSE 11941
// begin tmp := CostOfWeapon ( weapon ) ;
11829: LD_ADDR_VAR 0 13
11833: PUSH
11834: LD_VAR 0 17
11838: PPUSH
11839: CALL_OW 451
11843: ST_TO_ADDR
// j := GetBase ( tower ) ;
11844: LD_ADDR_VAR 0 8
11848: PUSH
11849: LD_VAR 0 1
11853: PPUSH
11854: CALL_OW 274
11858: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11859: LD_VAR 0 8
11863: PPUSH
11864: LD_INT 1
11866: PPUSH
11867: CALL_OW 275
11871: PUSH
11872: LD_VAR 0 13
11876: PUSH
11877: LD_INT 1
11879: ARRAY
11880: GREATEREQUAL
11881: PUSH
11882: LD_VAR 0 8
11886: PPUSH
11887: LD_INT 2
11889: PPUSH
11890: CALL_OW 275
11894: PUSH
11895: LD_VAR 0 13
11899: PUSH
11900: LD_INT 2
11902: ARRAY
11903: GREATEREQUAL
11904: AND
11905: PUSH
11906: LD_VAR 0 8
11910: PPUSH
11911: LD_INT 3
11913: PPUSH
11914: CALL_OW 275
11918: PUSH
11919: LD_VAR 0 13
11923: PUSH
11924: LD_INT 3
11926: ARRAY
11927: GREATEREQUAL
11928: AND
11929: IFFALSE 11941
// result := weapon ;
11931: LD_ADDR_VAR 0 2
11935: PUSH
11936: LD_VAR 0 17
11940: ST_TO_ADDR
// end ; end ;
11941: LD_VAR 0 2
11945: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11946: LD_INT 0
11948: PPUSH
11949: PPUSH
// result := true ;
11950: LD_ADDR_VAR 0 3
11954: PUSH
11955: LD_INT 1
11957: ST_TO_ADDR
// if array1 = array2 then
11958: LD_VAR 0 1
11962: PUSH
11963: LD_VAR 0 2
11967: EQUAL
11968: IFFALSE 12028
// begin for i = 1 to array1 do
11970: LD_ADDR_VAR 0 4
11974: PUSH
11975: DOUBLE
11976: LD_INT 1
11978: DEC
11979: ST_TO_ADDR
11980: LD_VAR 0 1
11984: PUSH
11985: FOR_TO
11986: IFFALSE 12024
// if array1 [ i ] <> array2 [ i ] then
11988: LD_VAR 0 1
11992: PUSH
11993: LD_VAR 0 4
11997: ARRAY
11998: PUSH
11999: LD_VAR 0 2
12003: PUSH
12004: LD_VAR 0 4
12008: ARRAY
12009: NONEQUAL
12010: IFFALSE 12022
// begin result := false ;
12012: LD_ADDR_VAR 0 3
12016: PUSH
12017: LD_INT 0
12019: ST_TO_ADDR
// break ;
12020: GO 12024
// end ;
12022: GO 11985
12024: POP
12025: POP
// end else
12026: GO 12036
// result := false ;
12028: LD_ADDR_VAR 0 3
12032: PUSH
12033: LD_INT 0
12035: ST_TO_ADDR
// end ;
12036: LD_VAR 0 3
12040: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12041: LD_INT 0
12043: PPUSH
12044: PPUSH
12045: PPUSH
// pom := GetBase ( fac ) ;
12046: LD_ADDR_VAR 0 5
12050: PUSH
12051: LD_VAR 0 1
12055: PPUSH
12056: CALL_OW 274
12060: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12061: LD_ADDR_VAR 0 4
12065: PUSH
12066: LD_VAR 0 2
12070: PUSH
12071: LD_INT 1
12073: ARRAY
12074: PPUSH
12075: LD_VAR 0 2
12079: PUSH
12080: LD_INT 2
12082: ARRAY
12083: PPUSH
12084: LD_VAR 0 2
12088: PUSH
12089: LD_INT 3
12091: ARRAY
12092: PPUSH
12093: LD_VAR 0 2
12097: PUSH
12098: LD_INT 4
12100: ARRAY
12101: PPUSH
12102: CALL_OW 449
12106: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
12107: LD_VAR 0 5
12111: PPUSH
12112: LD_INT 1
12114: PPUSH
12115: CALL_OW 275
12119: PUSH
12120: LD_VAR 0 4
12124: PUSH
12125: LD_INT 1
12127: ARRAY
12128: GREATEREQUAL
12129: PUSH
12130: LD_VAR 0 5
12134: PPUSH
12135: LD_INT 2
12137: PPUSH
12138: CALL_OW 275
12142: PUSH
12143: LD_VAR 0 4
12147: PUSH
12148: LD_INT 2
12150: ARRAY
12151: GREATEREQUAL
12152: AND
12153: PUSH
12154: LD_VAR 0 5
12158: PPUSH
12159: LD_INT 3
12161: PPUSH
12162: CALL_OW 275
12166: PUSH
12167: LD_VAR 0 4
12171: PUSH
12172: LD_INT 3
12174: ARRAY
12175: GREATEREQUAL
12176: AND
12177: IFFALSE 12189
// result := true else
12179: LD_ADDR_VAR 0 3
12183: PUSH
12184: LD_INT 1
12186: ST_TO_ADDR
12187: GO 12197
// result := false ;
12189: LD_ADDR_VAR 0 3
12193: PUSH
12194: LD_INT 0
12196: ST_TO_ADDR
// end ;
12197: LD_VAR 0 3
12201: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
12202: LD_INT 0
12204: PPUSH
12205: PPUSH
12206: PPUSH
12207: PPUSH
12208: PPUSH
12209: PPUSH
12210: PPUSH
12211: PPUSH
12212: PPUSH
// result := false ;
12213: LD_ADDR_VAR 0 6
12217: PUSH
12218: LD_INT 0
12220: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
12221: LD_VAR 0 1
12225: NOT
12226: PUSH
12227: LD_VAR 0 1
12231: PPUSH
12232: CALL_OW 266
12236: PUSH
12237: LD_INT 0
12239: PUSH
12240: LD_INT 1
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: IN
12247: NOT
12248: OR
12249: PUSH
12250: LD_VAR 0 2
12254: NOT
12255: OR
12256: PUSH
12257: LD_VAR 0 5
12261: PUSH
12262: LD_INT 0
12264: PUSH
12265: LD_INT 1
12267: PUSH
12268: LD_INT 2
12270: PUSH
12271: LD_INT 3
12273: PUSH
12274: LD_INT 4
12276: PUSH
12277: LD_INT 5
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: IN
12288: NOT
12289: OR
12290: PUSH
12291: LD_VAR 0 3
12295: PPUSH
12296: LD_VAR 0 4
12300: PPUSH
12301: CALL_OW 488
12305: NOT
12306: OR
12307: IFFALSE 12311
// exit ;
12309: GO 12975
// pom := GetBase ( bdepot ) ;
12311: LD_ADDR_VAR 0 9
12315: PUSH
12316: LD_VAR 0 1
12320: PPUSH
12321: CALL_OW 274
12325: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
12326: LD_ADDR_VAR 0 10
12330: PUSH
12331: LD_VAR 0 2
12335: PPUSH
12336: LD_VAR 0 1
12340: PPUSH
12341: CALL_OW 248
12345: PPUSH
12346: CALL_OW 450
12350: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
12351: LD_VAR 0 9
12355: PPUSH
12356: LD_INT 1
12358: PPUSH
12359: CALL_OW 275
12363: PUSH
12364: LD_VAR 0 10
12368: PUSH
12369: LD_INT 1
12371: ARRAY
12372: GREATEREQUAL
12373: PUSH
12374: LD_VAR 0 9
12378: PPUSH
12379: LD_INT 2
12381: PPUSH
12382: CALL_OW 275
12386: PUSH
12387: LD_VAR 0 10
12391: PUSH
12392: LD_INT 2
12394: ARRAY
12395: GREATEREQUAL
12396: AND
12397: PUSH
12398: LD_VAR 0 9
12402: PPUSH
12403: LD_INT 3
12405: PPUSH
12406: CALL_OW 275
12410: PUSH
12411: LD_VAR 0 10
12415: PUSH
12416: LD_INT 3
12418: ARRAY
12419: GREATEREQUAL
12420: AND
12421: NOT
12422: IFFALSE 12426
// exit ;
12424: GO 12975
// if GetBType ( bdepot ) = b_depot then
12426: LD_VAR 0 1
12430: PPUSH
12431: CALL_OW 266
12435: PUSH
12436: LD_INT 0
12438: EQUAL
12439: IFFALSE 12451
// dist := 28 else
12441: LD_ADDR_VAR 0 13
12445: PUSH
12446: LD_INT 28
12448: ST_TO_ADDR
12449: GO 12459
// dist := 36 ;
12451: LD_ADDR_VAR 0 13
12455: PUSH
12456: LD_INT 36
12458: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
12459: LD_VAR 0 1
12463: PPUSH
12464: LD_VAR 0 3
12468: PPUSH
12469: LD_VAR 0 4
12473: PPUSH
12474: CALL_OW 297
12478: PUSH
12479: LD_VAR 0 13
12483: GREATER
12484: IFFALSE 12488
// exit ;
12486: GO 12975
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
12488: LD_ADDR_VAR 0 11
12492: PUSH
12493: LD_VAR 0 2
12497: PPUSH
12498: LD_VAR 0 3
12502: PPUSH
12503: LD_VAR 0 4
12507: PPUSH
12508: LD_VAR 0 5
12512: PPUSH
12513: LD_VAR 0 1
12517: PPUSH
12518: CALL_OW 248
12522: PPUSH
12523: LD_INT 0
12525: PPUSH
12526: CALL 12980 0 6
12530: ST_TO_ADDR
// if not hexes then
12531: LD_VAR 0 11
12535: NOT
12536: IFFALSE 12540
// exit ;
12538: GO 12975
// hex := GetHexInfo ( x , y ) ;
12540: LD_ADDR_VAR 0 14
12544: PUSH
12545: LD_VAR 0 3
12549: PPUSH
12550: LD_VAR 0 4
12554: PPUSH
12555: CALL_OW 546
12559: ST_TO_ADDR
// if hex [ 1 ] then
12560: LD_VAR 0 14
12564: PUSH
12565: LD_INT 1
12567: ARRAY
12568: IFFALSE 12572
// exit ;
12570: GO 12975
// height := hex [ 2 ] ;
12572: LD_ADDR_VAR 0 12
12576: PUSH
12577: LD_VAR 0 14
12581: PUSH
12582: LD_INT 2
12584: ARRAY
12585: ST_TO_ADDR
// for i = 1 to hexes do
12586: LD_ADDR_VAR 0 7
12590: PUSH
12591: DOUBLE
12592: LD_INT 1
12594: DEC
12595: ST_TO_ADDR
12596: LD_VAR 0 11
12600: PUSH
12601: FOR_TO
12602: IFFALSE 12930
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
12604: LD_VAR 0 11
12608: PUSH
12609: LD_VAR 0 7
12613: ARRAY
12614: PUSH
12615: LD_INT 1
12617: ARRAY
12618: PPUSH
12619: LD_VAR 0 11
12623: PUSH
12624: LD_VAR 0 7
12628: ARRAY
12629: PUSH
12630: LD_INT 2
12632: ARRAY
12633: PPUSH
12634: CALL_OW 488
12638: NOT
12639: IFFALSE 12643
// continue ;
12641: GO 12601
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12643: LD_ADDR_VAR 0 8
12647: PUSH
12648: LD_VAR 0 11
12652: PUSH
12653: LD_VAR 0 7
12657: ARRAY
12658: PUSH
12659: LD_INT 1
12661: ARRAY
12662: PPUSH
12663: LD_VAR 0 11
12667: PUSH
12668: LD_VAR 0 7
12672: ARRAY
12673: PUSH
12674: LD_INT 2
12676: ARRAY
12677: PPUSH
12678: CALL_OW 546
12682: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
12683: LD_VAR 0 8
12687: PUSH
12688: LD_INT 1
12690: ARRAY
12691: PUSH
12692: LD_VAR 0 8
12696: PUSH
12697: LD_INT 2
12699: ARRAY
12700: PUSH
12701: LD_VAR 0 12
12705: PUSH
12706: LD_INT 2
12708: PLUS
12709: GREATER
12710: OR
12711: PUSH
12712: LD_VAR 0 8
12716: PUSH
12717: LD_INT 2
12719: ARRAY
12720: PUSH
12721: LD_VAR 0 12
12725: PUSH
12726: LD_INT 2
12728: MINUS
12729: LESS
12730: OR
12731: PUSH
12732: LD_VAR 0 8
12736: PUSH
12737: LD_INT 3
12739: ARRAY
12740: PUSH
12741: LD_INT 0
12743: PUSH
12744: LD_INT 8
12746: PUSH
12747: LD_INT 9
12749: PUSH
12750: LD_INT 10
12752: PUSH
12753: LD_INT 11
12755: PUSH
12756: LD_INT 12
12758: PUSH
12759: LD_INT 13
12761: PUSH
12762: LD_INT 16
12764: PUSH
12765: LD_INT 17
12767: PUSH
12768: LD_INT 18
12770: PUSH
12771: LD_INT 19
12773: PUSH
12774: LD_INT 20
12776: PUSH
12777: LD_INT 21
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: IN
12795: NOT
12796: OR
12797: PUSH
12798: LD_VAR 0 8
12802: PUSH
12803: LD_INT 5
12805: ARRAY
12806: NOT
12807: OR
12808: PUSH
12809: LD_VAR 0 8
12813: PUSH
12814: LD_INT 6
12816: ARRAY
12817: PUSH
12818: LD_INT 1
12820: PUSH
12821: LD_INT 2
12823: PUSH
12824: LD_INT 7
12826: PUSH
12827: LD_INT 9
12829: PUSH
12830: LD_INT 10
12832: PUSH
12833: LD_INT 11
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: IN
12844: NOT
12845: OR
12846: PUSH
12847: LD_VAR 0 11
12851: PUSH
12852: LD_VAR 0 7
12856: ARRAY
12857: PUSH
12858: LD_INT 1
12860: ARRAY
12861: PPUSH
12862: LD_VAR 0 11
12866: PUSH
12867: LD_VAR 0 7
12871: ARRAY
12872: PUSH
12873: LD_INT 2
12875: ARRAY
12876: PPUSH
12877: CALL_OW 428
12881: PUSH
12882: LD_INT 0
12884: GREATER
12885: OR
12886: PUSH
12887: LD_VAR 0 11
12891: PUSH
12892: LD_VAR 0 7
12896: ARRAY
12897: PUSH
12898: LD_INT 1
12900: ARRAY
12901: PPUSH
12902: LD_VAR 0 11
12906: PUSH
12907: LD_VAR 0 7
12911: ARRAY
12912: PUSH
12913: LD_INT 2
12915: ARRAY
12916: PPUSH
12917: CALL_OW 351
12921: OR
12922: IFFALSE 12928
// exit ;
12924: POP
12925: POP
12926: GO 12975
// end ;
12928: GO 12601
12930: POP
12931: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
12932: LD_VAR 0 1
12936: PPUSH
12937: CALL_OW 255
12941: PPUSH
12942: LD_VAR 0 3
12946: PPUSH
12947: LD_VAR 0 4
12951: PPUSH
12952: LD_INT 20
12954: PPUSH
12955: CALL 6842 0 4
12959: PUSH
12960: LD_INT 4
12962: ARRAY
12963: IFFALSE 12967
// exit ;
12965: GO 12975
// result := true ;
12967: LD_ADDR_VAR 0 6
12971: PUSH
12972: LD_INT 1
12974: ST_TO_ADDR
// end ;
12975: LD_VAR 0 6
12979: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
12980: LD_INT 0
12982: PPUSH
12983: PPUSH
12984: PPUSH
12985: PPUSH
12986: PPUSH
12987: PPUSH
12988: PPUSH
12989: PPUSH
12990: PPUSH
12991: PPUSH
12992: PPUSH
12993: PPUSH
12994: PPUSH
12995: PPUSH
12996: PPUSH
12997: PPUSH
12998: PPUSH
12999: PPUSH
13000: PPUSH
13001: PPUSH
13002: PPUSH
13003: PPUSH
13004: PPUSH
13005: PPUSH
13006: PPUSH
13007: PPUSH
13008: PPUSH
13009: PPUSH
13010: PPUSH
13011: PPUSH
13012: PPUSH
13013: PPUSH
13014: PPUSH
13015: PPUSH
13016: PPUSH
13017: PPUSH
13018: PPUSH
13019: PPUSH
13020: PPUSH
13021: PPUSH
13022: PPUSH
13023: PPUSH
13024: PPUSH
13025: PPUSH
13026: PPUSH
13027: PPUSH
13028: PPUSH
13029: PPUSH
13030: PPUSH
13031: PPUSH
13032: PPUSH
13033: PPUSH
13034: PPUSH
13035: PPUSH
13036: PPUSH
13037: PPUSH
13038: PPUSH
13039: PPUSH
// result = [ ] ;
13040: LD_ADDR_VAR 0 7
13044: PUSH
13045: EMPTY
13046: ST_TO_ADDR
// temp_list = [ ] ;
13047: LD_ADDR_VAR 0 9
13051: PUSH
13052: EMPTY
13053: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
13054: LD_VAR 0 4
13058: PUSH
13059: LD_INT 0
13061: PUSH
13062: LD_INT 1
13064: PUSH
13065: LD_INT 2
13067: PUSH
13068: LD_INT 3
13070: PUSH
13071: LD_INT 4
13073: PUSH
13074: LD_INT 5
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: IN
13085: NOT
13086: PUSH
13087: LD_VAR 0 1
13091: PUSH
13092: LD_INT 0
13094: PUSH
13095: LD_INT 1
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: IN
13102: PUSH
13103: LD_VAR 0 5
13107: PUSH
13108: LD_INT 1
13110: PUSH
13111: LD_INT 2
13113: PUSH
13114: LD_INT 3
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: LIST
13121: IN
13122: NOT
13123: AND
13124: OR
13125: IFFALSE 13129
// exit ;
13127: GO 31514
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
13129: LD_VAR 0 1
13133: PUSH
13134: LD_INT 6
13136: PUSH
13137: LD_INT 7
13139: PUSH
13140: LD_INT 8
13142: PUSH
13143: LD_INT 13
13145: PUSH
13146: LD_INT 12
13148: PUSH
13149: LD_INT 15
13151: PUSH
13152: LD_INT 11
13154: PUSH
13155: LD_INT 14
13157: PUSH
13158: LD_INT 10
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: IN
13172: IFFALSE 13182
// btype = b_lab ;
13174: LD_ADDR_VAR 0 1
13178: PUSH
13179: LD_INT 6
13181: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
13182: LD_VAR 0 6
13186: PUSH
13187: LD_INT 0
13189: PUSH
13190: LD_INT 1
13192: PUSH
13193: LD_INT 2
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: LIST
13200: IN
13201: NOT
13202: PUSH
13203: LD_VAR 0 1
13207: PUSH
13208: LD_INT 0
13210: PUSH
13211: LD_INT 1
13213: PUSH
13214: LD_INT 2
13216: PUSH
13217: LD_INT 3
13219: PUSH
13220: LD_INT 6
13222: PUSH
13223: LD_INT 36
13225: PUSH
13226: LD_INT 4
13228: PUSH
13229: LD_INT 5
13231: PUSH
13232: LD_INT 31
13234: PUSH
13235: LD_INT 32
13237: PUSH
13238: LD_INT 33
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: IN
13254: NOT
13255: PUSH
13256: LD_VAR 0 6
13260: PUSH
13261: LD_INT 1
13263: EQUAL
13264: AND
13265: OR
13266: PUSH
13267: LD_VAR 0 1
13271: PUSH
13272: LD_INT 2
13274: PUSH
13275: LD_INT 3
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: IN
13282: NOT
13283: PUSH
13284: LD_VAR 0 6
13288: PUSH
13289: LD_INT 2
13291: EQUAL
13292: AND
13293: OR
13294: IFFALSE 13304
// mode = 0 ;
13296: LD_ADDR_VAR 0 6
13300: PUSH
13301: LD_INT 0
13303: ST_TO_ADDR
// case mode of 0 :
13304: LD_VAR 0 6
13308: PUSH
13309: LD_INT 0
13311: DOUBLE
13312: EQUAL
13313: IFTRUE 13317
13315: GO 24770
13317: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
13318: LD_ADDR_VAR 0 11
13322: PUSH
13323: LD_INT 0
13325: PUSH
13326: LD_INT 0
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PUSH
13333: LD_INT 0
13335: PUSH
13336: LD_INT 1
13338: NEG
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 1
13346: PUSH
13347: LD_INT 0
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: LD_INT 1
13356: PUSH
13357: LD_INT 1
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: PUSH
13364: LD_INT 0
13366: PUSH
13367: LD_INT 1
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 1
13376: NEG
13377: PUSH
13378: LD_INT 0
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 1
13387: NEG
13388: PUSH
13389: LD_INT 1
13391: NEG
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: LD_INT 1
13399: NEG
13400: PUSH
13401: LD_INT 2
13403: NEG
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 0
13411: PUSH
13412: LD_INT 2
13414: NEG
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 1
13422: PUSH
13423: LD_INT 1
13425: NEG
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 1
13433: PUSH
13434: LD_INT 2
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 0
13443: PUSH
13444: LD_INT 2
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: LD_INT 1
13453: NEG
13454: PUSH
13455: LD_INT 1
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: LD_INT 1
13464: PUSH
13465: LD_INT 3
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: LD_INT 0
13474: PUSH
13475: LD_INT 3
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 1
13484: NEG
13485: PUSH
13486: LD_INT 2
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
13511: LD_ADDR_VAR 0 12
13515: PUSH
13516: LD_INT 0
13518: PUSH
13519: LD_INT 0
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: LD_INT 0
13528: PUSH
13529: LD_INT 1
13531: NEG
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 1
13539: PUSH
13540: LD_INT 0
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 1
13549: PUSH
13550: LD_INT 1
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 0
13559: PUSH
13560: LD_INT 1
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 1
13569: NEG
13570: PUSH
13571: LD_INT 0
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 1
13580: NEG
13581: PUSH
13582: LD_INT 1
13584: NEG
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 1
13592: PUSH
13593: LD_INT 1
13595: NEG
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: LD_INT 2
13603: PUSH
13604: LD_INT 0
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 2
13613: PUSH
13614: LD_INT 1
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 1
13623: NEG
13624: PUSH
13625: LD_INT 1
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PUSH
13632: LD_INT 2
13634: NEG
13635: PUSH
13636: LD_INT 0
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 2
13645: NEG
13646: PUSH
13647: LD_INT 1
13649: NEG
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 2
13657: NEG
13658: PUSH
13659: LD_INT 1
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: LD_INT 3
13668: NEG
13669: PUSH
13670: LD_INT 0
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 3
13679: NEG
13680: PUSH
13681: LD_INT 1
13683: NEG
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
13707: LD_ADDR_VAR 0 13
13711: PUSH
13712: LD_INT 0
13714: PUSH
13715: LD_INT 0
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 0
13724: PUSH
13725: LD_INT 1
13727: NEG
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 1
13735: PUSH
13736: LD_INT 0
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 1
13745: PUSH
13746: LD_INT 1
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: LD_INT 0
13755: PUSH
13756: LD_INT 1
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 1
13765: NEG
13766: PUSH
13767: LD_INT 0
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PUSH
13774: LD_INT 1
13776: NEG
13777: PUSH
13778: LD_INT 1
13780: NEG
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 1
13788: NEG
13789: PUSH
13790: LD_INT 2
13792: NEG
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: LD_INT 2
13800: PUSH
13801: LD_INT 1
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 2
13810: PUSH
13811: LD_INT 2
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: LD_INT 1
13820: PUSH
13821: LD_INT 2
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: PUSH
13828: LD_INT 2
13830: NEG
13831: PUSH
13832: LD_INT 1
13834: NEG
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: LD_INT 2
13842: NEG
13843: PUSH
13844: LD_INT 2
13846: NEG
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 2
13854: NEG
13855: PUSH
13856: LD_INT 3
13858: NEG
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: LD_INT 3
13866: NEG
13867: PUSH
13868: LD_INT 2
13870: NEG
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: LD_INT 3
13878: NEG
13879: PUSH
13880: LD_INT 3
13882: NEG
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
13906: LD_ADDR_VAR 0 14
13910: PUSH
13911: LD_INT 0
13913: PUSH
13914: LD_INT 0
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 0
13923: PUSH
13924: LD_INT 1
13926: NEG
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PUSH
13932: LD_INT 1
13934: PUSH
13935: LD_INT 0
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: PUSH
13942: LD_INT 1
13944: PUSH
13945: LD_INT 1
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: PUSH
13952: LD_INT 0
13954: PUSH
13955: LD_INT 1
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PUSH
13962: LD_INT 1
13964: NEG
13965: PUSH
13966: LD_INT 0
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 1
13975: NEG
13976: PUSH
13977: LD_INT 1
13979: NEG
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PUSH
13985: LD_INT 1
13987: NEG
13988: PUSH
13989: LD_INT 2
13991: NEG
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 0
13999: PUSH
14000: LD_INT 2
14002: NEG
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: LD_INT 1
14010: PUSH
14011: LD_INT 1
14013: NEG
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: LD_INT 1
14021: PUSH
14022: LD_INT 2
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 0
14031: PUSH
14032: LD_INT 2
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 1
14041: NEG
14042: PUSH
14043: LD_INT 1
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: LD_INT 1
14052: NEG
14053: PUSH
14054: LD_INT 3
14056: NEG
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 0
14064: PUSH
14065: LD_INT 3
14067: NEG
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: LD_INT 2
14078: NEG
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
14102: LD_ADDR_VAR 0 15
14106: PUSH
14107: LD_INT 0
14109: PUSH
14110: LD_INT 0
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: LD_INT 0
14119: PUSH
14120: LD_INT 1
14122: NEG
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 1
14130: PUSH
14131: LD_INT 0
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PUSH
14138: LD_INT 1
14140: PUSH
14141: LD_INT 1
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 0
14150: PUSH
14151: LD_INT 1
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: LD_INT 1
14160: NEG
14161: PUSH
14162: LD_INT 0
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 1
14171: NEG
14172: PUSH
14173: LD_INT 1
14175: NEG
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: PUSH
14181: LD_INT 1
14183: PUSH
14184: LD_INT 1
14186: NEG
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 2
14194: PUSH
14195: LD_INT 0
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PUSH
14202: LD_INT 2
14204: PUSH
14205: LD_INT 1
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PUSH
14212: LD_INT 1
14214: NEG
14215: PUSH
14216: LD_INT 1
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: LD_INT 2
14225: NEG
14226: PUSH
14227: LD_INT 0
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: LD_INT 2
14236: NEG
14237: PUSH
14238: LD_INT 1
14240: NEG
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PUSH
14246: LD_INT 2
14248: PUSH
14249: LD_INT 1
14251: NEG
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 3
14259: PUSH
14260: LD_INT 0
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: LD_INT 3
14269: PUSH
14270: LD_INT 1
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
14295: LD_ADDR_VAR 0 16
14299: PUSH
14300: LD_INT 0
14302: PUSH
14303: LD_INT 0
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 0
14312: PUSH
14313: LD_INT 1
14315: NEG
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: LD_INT 1
14323: PUSH
14324: LD_INT 0
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 1
14333: PUSH
14334: LD_INT 1
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 0
14343: PUSH
14344: LD_INT 1
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 1
14353: NEG
14354: PUSH
14355: LD_INT 0
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 1
14364: NEG
14365: PUSH
14366: LD_INT 1
14368: NEG
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: LD_INT 1
14376: NEG
14377: PUSH
14378: LD_INT 2
14380: NEG
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: PUSH
14386: LD_INT 2
14388: PUSH
14389: LD_INT 1
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PUSH
14396: LD_INT 2
14398: PUSH
14399: LD_INT 2
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 1
14408: PUSH
14409: LD_INT 2
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 2
14418: NEG
14419: PUSH
14420: LD_INT 1
14422: NEG
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: LD_INT 2
14430: NEG
14431: PUSH
14432: LD_INT 2
14434: NEG
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 3
14442: PUSH
14443: LD_INT 2
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: LD_INT 3
14452: PUSH
14453: LD_INT 3
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PUSH
14460: LD_INT 2
14462: PUSH
14463: LD_INT 3
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
14488: LD_ADDR_VAR 0 17
14492: PUSH
14493: LD_INT 0
14495: PUSH
14496: LD_INT 0
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: LD_INT 0
14505: PUSH
14506: LD_INT 1
14508: NEG
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: LD_INT 1
14516: PUSH
14517: LD_INT 0
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 1
14526: PUSH
14527: LD_INT 1
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 0
14536: PUSH
14537: LD_INT 1
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: LD_INT 1
14546: NEG
14547: PUSH
14548: LD_INT 0
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: LD_INT 1
14557: NEG
14558: PUSH
14559: LD_INT 1
14561: NEG
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: LD_INT 1
14569: NEG
14570: PUSH
14571: LD_INT 2
14573: NEG
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: LD_INT 0
14581: PUSH
14582: LD_INT 2
14584: NEG
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PUSH
14590: LD_INT 1
14592: PUSH
14593: LD_INT 1
14595: NEG
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PUSH
14601: LD_INT 2
14603: PUSH
14604: LD_INT 0
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PUSH
14611: LD_INT 2
14613: PUSH
14614: LD_INT 1
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 2
14623: PUSH
14624: LD_INT 2
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 1
14633: PUSH
14634: LD_INT 2
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 0
14643: PUSH
14644: LD_INT 2
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 1
14653: NEG
14654: PUSH
14655: LD_INT 1
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: PUSH
14662: LD_INT 2
14664: NEG
14665: PUSH
14666: LD_INT 0
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 2
14675: NEG
14676: PUSH
14677: LD_INT 1
14679: NEG
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 2
14687: NEG
14688: PUSH
14689: LD_INT 2
14691: NEG
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
14718: LD_ADDR_VAR 0 18
14722: PUSH
14723: LD_INT 0
14725: PUSH
14726: LD_INT 0
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: LD_INT 0
14735: PUSH
14736: LD_INT 1
14738: NEG
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: LD_INT 1
14746: PUSH
14747: LD_INT 0
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: LD_INT 1
14756: PUSH
14757: LD_INT 1
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: LD_INT 0
14766: PUSH
14767: LD_INT 1
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 1
14776: NEG
14777: PUSH
14778: LD_INT 0
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 1
14787: NEG
14788: PUSH
14789: LD_INT 1
14791: NEG
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 1
14799: NEG
14800: PUSH
14801: LD_INT 2
14803: NEG
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: PUSH
14809: LD_INT 0
14811: PUSH
14812: LD_INT 2
14814: NEG
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: LD_INT 1
14822: PUSH
14823: LD_INT 1
14825: NEG
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: LD_INT 2
14833: PUSH
14834: LD_INT 0
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 2
14843: PUSH
14844: LD_INT 1
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: LD_INT 2
14853: PUSH
14854: LD_INT 2
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: LD_INT 1
14863: PUSH
14864: LD_INT 2
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 0
14873: PUSH
14874: LD_INT 2
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 1
14883: NEG
14884: PUSH
14885: LD_INT 1
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: LD_INT 2
14894: NEG
14895: PUSH
14896: LD_INT 0
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PUSH
14903: LD_INT 2
14905: NEG
14906: PUSH
14907: LD_INT 1
14909: NEG
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 2
14917: NEG
14918: PUSH
14919: LD_INT 2
14921: NEG
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
14948: LD_ADDR_VAR 0 19
14952: PUSH
14953: LD_INT 0
14955: PUSH
14956: LD_INT 0
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 0
14965: PUSH
14966: LD_INT 1
14968: NEG
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 1
14976: PUSH
14977: LD_INT 0
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 1
14986: PUSH
14987: LD_INT 1
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 0
14996: PUSH
14997: LD_INT 1
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 1
15006: NEG
15007: PUSH
15008: LD_INT 0
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 1
15017: NEG
15018: PUSH
15019: LD_INT 1
15021: NEG
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 1
15029: NEG
15030: PUSH
15031: LD_INT 2
15033: NEG
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: LD_INT 0
15041: PUSH
15042: LD_INT 2
15044: NEG
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: LD_INT 1
15052: PUSH
15053: LD_INT 1
15055: NEG
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 2
15063: PUSH
15064: LD_INT 0
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 2
15073: PUSH
15074: LD_INT 1
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 2
15083: PUSH
15084: LD_INT 2
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 1
15093: PUSH
15094: LD_INT 2
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 0
15103: PUSH
15104: LD_INT 2
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 1
15113: NEG
15114: PUSH
15115: LD_INT 1
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PUSH
15122: LD_INT 2
15124: NEG
15125: PUSH
15126: LD_INT 0
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 2
15135: NEG
15136: PUSH
15137: LD_INT 1
15139: NEG
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: LD_INT 2
15147: NEG
15148: PUSH
15149: LD_INT 2
15151: NEG
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15178: LD_ADDR_VAR 0 20
15182: PUSH
15183: LD_INT 0
15185: PUSH
15186: LD_INT 0
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: PUSH
15193: LD_INT 0
15195: PUSH
15196: LD_INT 1
15198: NEG
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 1
15206: PUSH
15207: LD_INT 0
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: LD_INT 1
15216: PUSH
15217: LD_INT 1
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: LD_INT 0
15226: PUSH
15227: LD_INT 1
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: LD_INT 1
15236: NEG
15237: PUSH
15238: LD_INT 0
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PUSH
15245: LD_INT 1
15247: NEG
15248: PUSH
15249: LD_INT 1
15251: NEG
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PUSH
15257: LD_INT 1
15259: NEG
15260: PUSH
15261: LD_INT 2
15263: NEG
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PUSH
15269: LD_INT 0
15271: PUSH
15272: LD_INT 2
15274: NEG
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: LD_INT 1
15282: PUSH
15283: LD_INT 1
15285: NEG
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 2
15293: PUSH
15294: LD_INT 0
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 2
15303: PUSH
15304: LD_INT 1
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 2
15313: PUSH
15314: LD_INT 2
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: LD_INT 1
15323: PUSH
15324: LD_INT 2
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 0
15333: PUSH
15334: LD_INT 2
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 1
15343: NEG
15344: PUSH
15345: LD_INT 1
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: LD_INT 2
15354: NEG
15355: PUSH
15356: LD_INT 0
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 2
15365: NEG
15366: PUSH
15367: LD_INT 1
15369: NEG
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: LD_INT 2
15377: NEG
15378: PUSH
15379: LD_INT 2
15381: NEG
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15408: LD_ADDR_VAR 0 21
15412: PUSH
15413: LD_INT 0
15415: PUSH
15416: LD_INT 0
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 0
15425: PUSH
15426: LD_INT 1
15428: NEG
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 1
15436: PUSH
15437: LD_INT 0
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 1
15446: PUSH
15447: LD_INT 1
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 0
15456: PUSH
15457: LD_INT 1
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 1
15466: NEG
15467: PUSH
15468: LD_INT 0
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 1
15477: NEG
15478: PUSH
15479: LD_INT 1
15481: NEG
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 1
15489: NEG
15490: PUSH
15491: LD_INT 2
15493: NEG
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 0
15501: PUSH
15502: LD_INT 2
15504: NEG
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 1
15512: PUSH
15513: LD_INT 1
15515: NEG
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 2
15523: PUSH
15524: LD_INT 0
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 2
15533: PUSH
15534: LD_INT 1
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 2
15543: PUSH
15544: LD_INT 2
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: PUSH
15551: LD_INT 1
15553: PUSH
15554: LD_INT 2
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 0
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 1
15573: NEG
15574: PUSH
15575: LD_INT 1
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: LD_INT 2
15584: NEG
15585: PUSH
15586: LD_INT 0
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 2
15595: NEG
15596: PUSH
15597: LD_INT 1
15599: NEG
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 2
15607: NEG
15608: PUSH
15609: LD_INT 2
15611: NEG
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15638: LD_ADDR_VAR 0 22
15642: PUSH
15643: LD_INT 0
15645: PUSH
15646: LD_INT 0
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: LD_INT 0
15655: PUSH
15656: LD_INT 1
15658: NEG
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 1
15666: PUSH
15667: LD_INT 0
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 1
15676: PUSH
15677: LD_INT 1
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 0
15686: PUSH
15687: LD_INT 1
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 1
15696: NEG
15697: PUSH
15698: LD_INT 0
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 1
15707: NEG
15708: PUSH
15709: LD_INT 1
15711: NEG
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 1
15719: NEG
15720: PUSH
15721: LD_INT 2
15723: NEG
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 0
15731: PUSH
15732: LD_INT 2
15734: NEG
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: LD_INT 1
15742: PUSH
15743: LD_INT 1
15745: NEG
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 2
15753: PUSH
15754: LD_INT 0
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 2
15763: PUSH
15764: LD_INT 1
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: LD_INT 2
15773: PUSH
15774: LD_INT 2
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 1
15783: PUSH
15784: LD_INT 2
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 0
15793: PUSH
15794: LD_INT 2
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 1
15803: NEG
15804: PUSH
15805: LD_INT 1
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 2
15814: NEG
15815: PUSH
15816: LD_INT 0
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: LD_INT 2
15825: NEG
15826: PUSH
15827: LD_INT 1
15829: NEG
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: LD_INT 2
15837: NEG
15838: PUSH
15839: LD_INT 2
15841: NEG
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
15868: LD_ADDR_VAR 0 23
15872: PUSH
15873: LD_INT 0
15875: PUSH
15876: LD_INT 0
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 0
15885: PUSH
15886: LD_INT 1
15888: NEG
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 1
15896: PUSH
15897: LD_INT 0
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 1
15906: PUSH
15907: LD_INT 1
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 0
15916: PUSH
15917: LD_INT 1
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 1
15926: NEG
15927: PUSH
15928: LD_INT 0
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: LD_INT 1
15937: NEG
15938: PUSH
15939: LD_INT 1
15941: NEG
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: LD_INT 1
15949: NEG
15950: PUSH
15951: LD_INT 2
15953: NEG
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 0
15961: PUSH
15962: LD_INT 2
15964: NEG
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: LD_INT 1
15975: NEG
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 2
15983: PUSH
15984: LD_INT 0
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: LD_INT 2
15993: PUSH
15994: LD_INT 1
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: LD_INT 2
16003: PUSH
16004: LD_INT 2
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 1
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 0
16023: PUSH
16024: LD_INT 2
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: LD_INT 1
16033: NEG
16034: PUSH
16035: LD_INT 1
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 2
16044: NEG
16045: PUSH
16046: LD_INT 0
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 2
16055: NEG
16056: PUSH
16057: LD_INT 1
16059: NEG
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 2
16067: NEG
16068: PUSH
16069: LD_INT 2
16071: NEG
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 2
16079: NEG
16080: PUSH
16081: LD_INT 3
16083: NEG
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 1
16091: NEG
16092: PUSH
16093: LD_INT 3
16095: NEG
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 1
16103: PUSH
16104: LD_INT 2
16106: NEG
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 2
16114: PUSH
16115: LD_INT 1
16117: NEG
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
16148: LD_ADDR_VAR 0 24
16152: PUSH
16153: LD_INT 0
16155: PUSH
16156: LD_INT 0
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: LD_INT 0
16165: PUSH
16166: LD_INT 1
16168: NEG
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: LD_INT 1
16176: PUSH
16177: LD_INT 0
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 1
16186: PUSH
16187: LD_INT 1
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 0
16196: PUSH
16197: LD_INT 1
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: LD_INT 1
16206: NEG
16207: PUSH
16208: LD_INT 0
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PUSH
16215: LD_INT 1
16217: NEG
16218: PUSH
16219: LD_INT 1
16221: NEG
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: LD_INT 1
16229: NEG
16230: PUSH
16231: LD_INT 2
16233: NEG
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 0
16241: PUSH
16242: LD_INT 2
16244: NEG
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 1
16252: PUSH
16253: LD_INT 1
16255: NEG
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: PUSH
16261: LD_INT 2
16263: PUSH
16264: LD_INT 0
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 2
16273: PUSH
16274: LD_INT 1
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 2
16283: PUSH
16284: LD_INT 2
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 1
16293: PUSH
16294: LD_INT 2
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 0
16303: PUSH
16304: LD_INT 2
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 1
16313: NEG
16314: PUSH
16315: LD_INT 1
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 2
16324: NEG
16325: PUSH
16326: LD_INT 0
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 2
16335: NEG
16336: PUSH
16337: LD_INT 1
16339: NEG
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 2
16347: NEG
16348: PUSH
16349: LD_INT 2
16351: NEG
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 1
16359: PUSH
16360: LD_INT 2
16362: NEG
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 2
16370: PUSH
16371: LD_INT 1
16373: NEG
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 3
16381: PUSH
16382: LD_INT 1
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 3
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
16424: LD_ADDR_VAR 0 25
16428: PUSH
16429: LD_INT 0
16431: PUSH
16432: LD_INT 0
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 0
16441: PUSH
16442: LD_INT 1
16444: NEG
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PUSH
16450: LD_INT 1
16452: PUSH
16453: LD_INT 0
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 1
16462: PUSH
16463: LD_INT 1
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 0
16472: PUSH
16473: LD_INT 1
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 1
16482: NEG
16483: PUSH
16484: LD_INT 0
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 1
16493: NEG
16494: PUSH
16495: LD_INT 1
16497: NEG
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 1
16505: NEG
16506: PUSH
16507: LD_INT 2
16509: NEG
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 0
16517: PUSH
16518: LD_INT 2
16520: NEG
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 1
16528: PUSH
16529: LD_INT 1
16531: NEG
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 2
16539: PUSH
16540: LD_INT 0
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 2
16549: PUSH
16550: LD_INT 1
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 2
16559: PUSH
16560: LD_INT 2
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 1
16569: PUSH
16570: LD_INT 2
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 0
16579: PUSH
16580: LD_INT 2
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 1
16589: NEG
16590: PUSH
16591: LD_INT 1
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 2
16600: NEG
16601: PUSH
16602: LD_INT 0
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 2
16611: NEG
16612: PUSH
16613: LD_INT 1
16615: NEG
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 2
16623: NEG
16624: PUSH
16625: LD_INT 2
16627: NEG
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 3
16635: PUSH
16636: LD_INT 1
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 3
16645: PUSH
16646: LD_INT 2
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 2
16655: PUSH
16656: LD_INT 3
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 1
16665: PUSH
16666: LD_INT 3
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
16698: LD_ADDR_VAR 0 26
16702: PUSH
16703: LD_INT 0
16705: PUSH
16706: LD_INT 0
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 0
16715: PUSH
16716: LD_INT 1
16718: NEG
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 1
16726: PUSH
16727: LD_INT 0
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: LD_INT 1
16736: PUSH
16737: LD_INT 1
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 0
16746: PUSH
16747: LD_INT 1
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 1
16756: NEG
16757: PUSH
16758: LD_INT 0
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 1
16767: NEG
16768: PUSH
16769: LD_INT 1
16771: NEG
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: LD_INT 1
16779: NEG
16780: PUSH
16781: LD_INT 2
16783: NEG
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 0
16791: PUSH
16792: LD_INT 2
16794: NEG
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: LD_INT 1
16802: PUSH
16803: LD_INT 1
16805: NEG
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 2
16813: PUSH
16814: LD_INT 0
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 2
16823: PUSH
16824: LD_INT 1
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 2
16833: PUSH
16834: LD_INT 2
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 1
16843: PUSH
16844: LD_INT 2
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 0
16853: PUSH
16854: LD_INT 2
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 1
16863: NEG
16864: PUSH
16865: LD_INT 1
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 2
16874: NEG
16875: PUSH
16876: LD_INT 0
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 2
16885: NEG
16886: PUSH
16887: LD_INT 1
16889: NEG
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: PUSH
16895: LD_INT 2
16897: NEG
16898: PUSH
16899: LD_INT 2
16901: NEG
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 2
16909: PUSH
16910: LD_INT 3
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 1
16919: PUSH
16920: LD_INT 3
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 1
16929: NEG
16930: PUSH
16931: LD_INT 2
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 2
16940: NEG
16941: PUSH
16942: LD_INT 1
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
16974: LD_ADDR_VAR 0 27
16978: PUSH
16979: LD_INT 0
16981: PUSH
16982: LD_INT 0
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 0
16991: PUSH
16992: LD_INT 1
16994: NEG
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 1
17002: PUSH
17003: LD_INT 0
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: LD_INT 1
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 0
17022: PUSH
17023: LD_INT 1
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 1
17032: NEG
17033: PUSH
17034: LD_INT 0
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 1
17043: NEG
17044: PUSH
17045: LD_INT 1
17047: NEG
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 1
17055: NEG
17056: PUSH
17057: LD_INT 2
17059: NEG
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 0
17067: PUSH
17068: LD_INT 2
17070: NEG
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 1
17078: PUSH
17079: LD_INT 1
17081: NEG
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 2
17089: PUSH
17090: LD_INT 0
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 2
17099: PUSH
17100: LD_INT 1
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 2
17109: PUSH
17110: LD_INT 2
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 1
17119: PUSH
17120: LD_INT 2
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 0
17129: PUSH
17130: LD_INT 2
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 1
17139: NEG
17140: PUSH
17141: LD_INT 1
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 2
17150: NEG
17151: PUSH
17152: LD_INT 0
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 2
17161: NEG
17162: PUSH
17163: LD_INT 1
17165: NEG
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 2
17173: NEG
17174: PUSH
17175: LD_INT 2
17177: NEG
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 1
17185: NEG
17186: PUSH
17187: LD_INT 2
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 2
17196: NEG
17197: PUSH
17198: LD_INT 1
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 3
17207: NEG
17208: PUSH
17209: LD_INT 1
17211: NEG
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 3
17219: NEG
17220: PUSH
17221: LD_INT 2
17223: NEG
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
17254: LD_ADDR_VAR 0 28
17258: PUSH
17259: LD_INT 0
17261: PUSH
17262: LD_INT 0
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: LD_INT 0
17271: PUSH
17272: LD_INT 1
17274: NEG
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: LD_INT 0
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 1
17292: PUSH
17293: LD_INT 1
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: LD_INT 0
17302: PUSH
17303: LD_INT 1
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 1
17312: NEG
17313: PUSH
17314: LD_INT 0
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 1
17323: NEG
17324: PUSH
17325: LD_INT 1
17327: NEG
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 1
17335: NEG
17336: PUSH
17337: LD_INT 2
17339: NEG
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 0
17347: PUSH
17348: LD_INT 2
17350: NEG
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 1
17358: PUSH
17359: LD_INT 1
17361: NEG
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 2
17369: PUSH
17370: LD_INT 0
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 2
17379: PUSH
17380: LD_INT 1
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 2
17389: PUSH
17390: LD_INT 2
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 1
17399: PUSH
17400: LD_INT 2
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 0
17409: PUSH
17410: LD_INT 2
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 1
17419: NEG
17420: PUSH
17421: LD_INT 1
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 2
17430: NEG
17431: PUSH
17432: LD_INT 0
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 2
17441: NEG
17442: PUSH
17443: LD_INT 1
17445: NEG
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 2
17453: NEG
17454: PUSH
17455: LD_INT 2
17457: NEG
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 2
17465: NEG
17466: PUSH
17467: LD_INT 3
17469: NEG
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 1
17477: NEG
17478: PUSH
17479: LD_INT 3
17481: NEG
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 3
17489: NEG
17490: PUSH
17491: LD_INT 1
17493: NEG
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 3
17501: NEG
17502: PUSH
17503: LD_INT 2
17505: NEG
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
17536: LD_ADDR_VAR 0 29
17540: PUSH
17541: LD_INT 0
17543: PUSH
17544: LD_INT 0
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 0
17553: PUSH
17554: LD_INT 1
17556: NEG
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: LD_INT 0
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 1
17574: PUSH
17575: LD_INT 1
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 0
17584: PUSH
17585: LD_INT 1
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 1
17594: NEG
17595: PUSH
17596: LD_INT 0
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 1
17605: NEG
17606: PUSH
17607: LD_INT 1
17609: NEG
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 1
17617: NEG
17618: PUSH
17619: LD_INT 2
17621: NEG
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 0
17629: PUSH
17630: LD_INT 2
17632: NEG
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 1
17640: PUSH
17641: LD_INT 1
17643: NEG
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 2
17651: PUSH
17652: LD_INT 0
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 2
17661: PUSH
17662: LD_INT 1
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 1
17671: PUSH
17672: LD_INT 2
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 0
17681: PUSH
17682: LD_INT 2
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 1
17691: NEG
17692: PUSH
17693: LD_INT 1
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 2
17702: NEG
17703: PUSH
17704: LD_INT 1
17706: NEG
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 2
17714: NEG
17715: PUSH
17716: LD_INT 2
17718: NEG
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 2
17726: NEG
17727: PUSH
17728: LD_INT 3
17730: NEG
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 2
17738: PUSH
17739: LD_INT 1
17741: NEG
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 3
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: LD_INT 3
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 1
17769: NEG
17770: PUSH
17771: LD_INT 2
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 3
17780: NEG
17781: PUSH
17782: LD_INT 2
17784: NEG
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
17815: LD_ADDR_VAR 0 30
17819: PUSH
17820: LD_INT 0
17822: PUSH
17823: LD_INT 0
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 0
17832: PUSH
17833: LD_INT 1
17835: NEG
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: LD_INT 0
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 1
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 0
17863: PUSH
17864: LD_INT 1
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 1
17873: NEG
17874: PUSH
17875: LD_INT 0
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 1
17884: NEG
17885: PUSH
17886: LD_INT 1
17888: NEG
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 1
17896: NEG
17897: PUSH
17898: LD_INT 2
17900: NEG
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 0
17908: PUSH
17909: LD_INT 2
17911: NEG
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 1
17919: PUSH
17920: LD_INT 1
17922: NEG
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 2
17930: PUSH
17931: LD_INT 0
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 2
17940: PUSH
17941: LD_INT 1
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 2
17950: PUSH
17951: LD_INT 2
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 1
17960: PUSH
17961: LD_INT 2
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 1
17970: NEG
17971: PUSH
17972: LD_INT 1
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 2
17981: NEG
17982: PUSH
17983: LD_INT 0
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 2
17992: NEG
17993: PUSH
17994: LD_INT 1
17996: NEG
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 1
18004: NEG
18005: PUSH
18006: LD_INT 3
18008: NEG
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 1
18016: PUSH
18017: LD_INT 2
18019: NEG
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 3
18027: PUSH
18028: LD_INT 2
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 2
18037: PUSH
18038: LD_INT 3
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 2
18047: NEG
18048: PUSH
18049: LD_INT 1
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 3
18058: NEG
18059: PUSH
18060: LD_INT 1
18062: NEG
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18093: LD_ADDR_VAR 0 31
18097: PUSH
18098: LD_INT 0
18100: PUSH
18101: LD_INT 0
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 0
18110: PUSH
18111: LD_INT 1
18113: NEG
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 1
18121: PUSH
18122: LD_INT 0
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 1
18131: PUSH
18132: LD_INT 1
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 0
18141: PUSH
18142: LD_INT 1
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 1
18151: NEG
18152: PUSH
18153: LD_INT 0
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 1
18162: NEG
18163: PUSH
18164: LD_INT 1
18166: NEG
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 1
18174: NEG
18175: PUSH
18176: LD_INT 2
18178: NEG
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 1
18186: PUSH
18187: LD_INT 1
18189: NEG
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 2
18197: PUSH
18198: LD_INT 0
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 2
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 2
18217: PUSH
18218: LD_INT 2
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: LD_INT 2
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 0
18237: PUSH
18238: LD_INT 2
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 1
18247: NEG
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 2
18258: NEG
18259: PUSH
18260: LD_INT 1
18262: NEG
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 2
18270: NEG
18271: PUSH
18272: LD_INT 2
18274: NEG
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 2
18282: NEG
18283: PUSH
18284: LD_INT 3
18286: NEG
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 2
18294: PUSH
18295: LD_INT 1
18297: NEG
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 3
18305: PUSH
18306: LD_INT 1
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: LD_INT 3
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 1
18325: NEG
18326: PUSH
18327: LD_INT 2
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 3
18336: NEG
18337: PUSH
18338: LD_INT 2
18340: NEG
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
18371: LD_ADDR_VAR 0 32
18375: PUSH
18376: LD_INT 0
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 0
18388: PUSH
18389: LD_INT 1
18391: NEG
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 1
18399: PUSH
18400: LD_INT 0
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 1
18409: PUSH
18410: LD_INT 1
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 0
18419: PUSH
18420: LD_INT 1
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 1
18429: NEG
18430: PUSH
18431: LD_INT 0
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 1
18440: NEG
18441: PUSH
18442: LD_INT 1
18444: NEG
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 1
18452: NEG
18453: PUSH
18454: LD_INT 2
18456: NEG
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 0
18464: PUSH
18465: LD_INT 2
18467: NEG
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 1
18475: PUSH
18476: LD_INT 1
18478: NEG
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 2
18486: PUSH
18487: LD_INT 1
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 2
18496: PUSH
18497: LD_INT 2
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 1
18506: PUSH
18507: LD_INT 2
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 0
18516: PUSH
18517: LD_INT 2
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 1
18526: NEG
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 2
18537: NEG
18538: PUSH
18539: LD_INT 0
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 2
18548: NEG
18549: PUSH
18550: LD_INT 1
18552: NEG
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 1
18560: NEG
18561: PUSH
18562: LD_INT 3
18564: NEG
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: LD_INT 2
18575: NEG
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 3
18583: PUSH
18584: LD_INT 2
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 2
18593: PUSH
18594: LD_INT 3
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 2
18603: NEG
18604: PUSH
18605: LD_INT 1
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 3
18614: NEG
18615: PUSH
18616: LD_INT 1
18618: NEG
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18649: LD_ADDR_VAR 0 33
18653: PUSH
18654: LD_INT 0
18656: PUSH
18657: LD_INT 0
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 0
18666: PUSH
18667: LD_INT 1
18669: NEG
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 1
18677: PUSH
18678: LD_INT 0
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 1
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: LD_INT 1
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 1
18707: NEG
18708: PUSH
18709: LD_INT 0
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 1
18718: NEG
18719: PUSH
18720: LD_INT 1
18722: NEG
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 1
18730: NEG
18731: PUSH
18732: LD_INT 2
18734: NEG
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 1
18742: PUSH
18743: LD_INT 1
18745: NEG
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: LD_INT 0
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 2
18763: PUSH
18764: LD_INT 1
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 1
18773: PUSH
18774: LD_INT 2
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 0
18783: PUSH
18784: LD_INT 2
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 1
18793: NEG
18794: PUSH
18795: LD_INT 1
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PUSH
18802: LD_INT 2
18804: NEG
18805: PUSH
18806: LD_INT 0
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 2
18815: NEG
18816: PUSH
18817: LD_INT 1
18819: NEG
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 2
18827: NEG
18828: PUSH
18829: LD_INT 2
18831: NEG
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 2
18839: NEG
18840: PUSH
18841: LD_INT 3
18843: NEG
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 2
18851: PUSH
18852: LD_INT 1
18854: NEG
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 3
18862: PUSH
18863: LD_INT 1
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: LD_INT 3
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 1
18882: NEG
18883: PUSH
18884: LD_INT 2
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 3
18893: NEG
18894: PUSH
18895: LD_INT 2
18897: NEG
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
18928: LD_ADDR_VAR 0 34
18932: PUSH
18933: LD_INT 0
18935: PUSH
18936: LD_INT 0
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: LD_INT 1
18948: NEG
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 1
18956: PUSH
18957: LD_INT 0
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 1
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 0
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 1
18986: NEG
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 1
18997: NEG
18998: PUSH
18999: LD_INT 1
19001: NEG
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: LD_INT 2
19013: NEG
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 0
19021: PUSH
19022: LD_INT 2
19024: NEG
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 1
19032: PUSH
19033: LD_INT 1
19035: NEG
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 2
19043: PUSH
19044: LD_INT 1
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 2
19053: PUSH
19054: LD_INT 2
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 1
19063: PUSH
19064: LD_INT 2
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 1
19073: NEG
19074: PUSH
19075: LD_INT 1
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 2
19084: NEG
19085: PUSH
19086: LD_INT 0
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 2
19095: NEG
19096: PUSH
19097: LD_INT 1
19099: NEG
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 2
19107: NEG
19108: PUSH
19109: LD_INT 2
19111: NEG
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 1
19119: NEG
19120: PUSH
19121: LD_INT 3
19123: NEG
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 1
19131: PUSH
19132: LD_INT 2
19134: NEG
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 3
19142: PUSH
19143: LD_INT 2
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 2
19152: PUSH
19153: LD_INT 3
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 2
19162: NEG
19163: PUSH
19164: LD_INT 1
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 3
19173: NEG
19174: PUSH
19175: LD_INT 1
19177: NEG
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
19208: LD_ADDR_VAR 0 35
19212: PUSH
19213: LD_INT 0
19215: PUSH
19216: LD_INT 0
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 0
19225: PUSH
19226: LD_INT 1
19228: NEG
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 1
19236: PUSH
19237: LD_INT 0
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 1
19246: PUSH
19247: LD_INT 1
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 0
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 1
19266: NEG
19267: PUSH
19268: LD_INT 0
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 1
19277: NEG
19278: PUSH
19279: LD_INT 1
19281: NEG
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 2
19289: PUSH
19290: LD_INT 1
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 2
19299: NEG
19300: PUSH
19301: LD_INT 1
19303: NEG
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
19320: LD_ADDR_VAR 0 36
19324: PUSH
19325: LD_INT 0
19327: PUSH
19328: LD_INT 0
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 0
19337: PUSH
19338: LD_INT 1
19340: NEG
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 1
19348: PUSH
19349: LD_INT 0
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 1
19358: PUSH
19359: LD_INT 1
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 0
19368: PUSH
19369: LD_INT 1
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 1
19378: NEG
19379: PUSH
19380: LD_INT 0
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 1
19389: NEG
19390: PUSH
19391: LD_INT 1
19393: NEG
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 1
19401: NEG
19402: PUSH
19403: LD_INT 2
19405: NEG
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 1
19413: PUSH
19414: LD_INT 2
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
19432: LD_ADDR_VAR 0 37
19436: PUSH
19437: LD_INT 0
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 0
19449: PUSH
19450: LD_INT 1
19452: NEG
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: LD_INT 0
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: PUSH
19492: LD_INT 0
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 1
19501: NEG
19502: PUSH
19503: LD_INT 1
19505: NEG
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: LD_INT 1
19516: NEG
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 1
19524: NEG
19525: PUSH
19526: LD_INT 1
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
19544: LD_ADDR_VAR 0 38
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 0
19561: PUSH
19562: LD_INT 1
19564: NEG
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 1
19582: PUSH
19583: LD_INT 1
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 0
19592: PUSH
19593: LD_INT 1
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 1
19602: NEG
19603: PUSH
19604: LD_INT 0
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 1
19613: NEG
19614: PUSH
19615: LD_INT 1
19617: NEG
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 2
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 2
19635: NEG
19636: PUSH
19637: LD_INT 1
19639: NEG
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
19656: LD_ADDR_VAR 0 39
19660: PUSH
19661: LD_INT 0
19663: PUSH
19664: LD_INT 0
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 0
19673: PUSH
19674: LD_INT 1
19676: NEG
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 1
19684: PUSH
19685: LD_INT 0
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 1
19694: PUSH
19695: LD_INT 1
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 0
19704: PUSH
19705: LD_INT 1
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 1
19714: NEG
19715: PUSH
19716: LD_INT 0
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 1
19725: NEG
19726: PUSH
19727: LD_INT 1
19729: NEG
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 1
19737: NEG
19738: PUSH
19739: LD_INT 2
19741: NEG
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 1
19749: PUSH
19750: LD_INT 2
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
19768: LD_ADDR_VAR 0 40
19772: PUSH
19773: LD_INT 0
19775: PUSH
19776: LD_INT 0
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 0
19785: PUSH
19786: LD_INT 1
19788: NEG
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 1
19796: PUSH
19797: LD_INT 0
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 1
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 0
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 1
19826: NEG
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 1
19837: NEG
19838: PUSH
19839: LD_INT 1
19841: NEG
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 1
19849: PUSH
19850: LD_INT 1
19852: NEG
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 1
19860: NEG
19861: PUSH
19862: LD_INT 1
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19880: LD_ADDR_VAR 0 41
19884: PUSH
19885: LD_INT 0
19887: PUSH
19888: LD_INT 0
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 0
19897: PUSH
19898: LD_INT 1
19900: NEG
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 1
19908: PUSH
19909: LD_INT 0
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 1
19918: PUSH
19919: LD_INT 1
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 0
19928: PUSH
19929: LD_INT 1
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 1
19938: NEG
19939: PUSH
19940: LD_INT 0
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 1
19949: NEG
19950: PUSH
19951: LD_INT 1
19953: NEG
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 1
19961: NEG
19962: PUSH
19963: LD_INT 2
19965: NEG
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: LD_INT 1
19976: NEG
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 2
19984: PUSH
19985: LD_INT 0
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 2
19994: PUSH
19995: LD_INT 1
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 2
20004: PUSH
20005: LD_INT 2
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 1
20014: PUSH
20015: LD_INT 2
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 1
20024: NEG
20025: PUSH
20026: LD_INT 1
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 2
20035: NEG
20036: PUSH
20037: LD_INT 0
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 2
20046: NEG
20047: PUSH
20048: LD_INT 1
20050: NEG
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 2
20058: NEG
20059: PUSH
20060: LD_INT 2
20062: NEG
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 2
20070: NEG
20071: PUSH
20072: LD_INT 3
20074: NEG
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: LD_INT 1
20085: NEG
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 3
20093: PUSH
20094: LD_INT 0
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 3
20103: PUSH
20104: LD_INT 1
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 3
20113: PUSH
20114: LD_INT 2
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 3
20123: PUSH
20124: LD_INT 3
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 2
20133: PUSH
20134: LD_INT 3
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 2
20143: NEG
20144: PUSH
20145: LD_INT 1
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 3
20154: NEG
20155: PUSH
20156: LD_INT 0
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 3
20165: NEG
20166: PUSH
20167: LD_INT 1
20169: NEG
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 3
20177: NEG
20178: PUSH
20179: LD_INT 2
20181: NEG
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 3
20189: NEG
20190: PUSH
20191: LD_INT 3
20193: NEG
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20230: LD_ADDR_VAR 0 42
20234: PUSH
20235: LD_INT 0
20237: PUSH
20238: LD_INT 0
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 0
20247: PUSH
20248: LD_INT 1
20250: NEG
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 1
20258: PUSH
20259: LD_INT 0
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: LD_INT 1
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 0
20278: PUSH
20279: LD_INT 1
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 1
20288: NEG
20289: PUSH
20290: LD_INT 0
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 1
20299: NEG
20300: PUSH
20301: LD_INT 1
20303: NEG
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 1
20311: NEG
20312: PUSH
20313: LD_INT 2
20315: NEG
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 0
20323: PUSH
20324: LD_INT 2
20326: NEG
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: LD_INT 1
20337: NEG
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 2
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 2
20355: PUSH
20356: LD_INT 2
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 1
20365: PUSH
20366: LD_INT 2
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 0
20375: PUSH
20376: LD_INT 2
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 1
20385: NEG
20386: PUSH
20387: LD_INT 1
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 2
20396: NEG
20397: PUSH
20398: LD_INT 1
20400: NEG
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 2
20408: NEG
20409: PUSH
20410: LD_INT 2
20412: NEG
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 2
20420: NEG
20421: PUSH
20422: LD_INT 3
20424: NEG
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 1
20432: NEG
20433: PUSH
20434: LD_INT 3
20436: NEG
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 0
20444: PUSH
20445: LD_INT 3
20447: NEG
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 1
20455: PUSH
20456: LD_INT 2
20458: NEG
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 3
20466: PUSH
20467: LD_INT 2
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 3
20476: PUSH
20477: LD_INT 3
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 2
20486: PUSH
20487: LD_INT 3
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 1
20496: PUSH
20497: LD_INT 3
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 0
20506: PUSH
20507: LD_INT 3
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 1
20516: NEG
20517: PUSH
20518: LD_INT 2
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 3
20527: NEG
20528: PUSH
20529: LD_INT 2
20531: NEG
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 3
20539: NEG
20540: PUSH
20541: LD_INT 3
20543: NEG
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
20580: LD_ADDR_VAR 0 43
20584: PUSH
20585: LD_INT 0
20587: PUSH
20588: LD_INT 0
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 0
20597: PUSH
20598: LD_INT 1
20600: NEG
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 1
20608: PUSH
20609: LD_INT 0
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 1
20618: PUSH
20619: LD_INT 1
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 0
20628: PUSH
20629: LD_INT 1
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 1
20638: NEG
20639: PUSH
20640: LD_INT 0
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 1
20649: NEG
20650: PUSH
20651: LD_INT 1
20653: NEG
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 1
20661: NEG
20662: PUSH
20663: LD_INT 2
20665: NEG
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 0
20673: PUSH
20674: LD_INT 2
20676: NEG
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 1
20684: PUSH
20685: LD_INT 1
20687: NEG
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 2
20695: PUSH
20696: LD_INT 0
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 2
20705: PUSH
20706: LD_INT 1
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: LD_INT 2
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 0
20725: PUSH
20726: LD_INT 2
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 1
20735: NEG
20736: PUSH
20737: LD_INT 1
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 2
20746: NEG
20747: PUSH
20748: LD_INT 0
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 2
20757: NEG
20758: PUSH
20759: LD_INT 1
20761: NEG
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 1
20769: NEG
20770: PUSH
20771: LD_INT 3
20773: NEG
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 0
20781: PUSH
20782: LD_INT 3
20784: NEG
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 1
20792: PUSH
20793: LD_INT 2
20795: NEG
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 2
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 3
20814: PUSH
20815: LD_INT 0
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 3
20824: PUSH
20825: LD_INT 1
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: LD_INT 3
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 0
20844: PUSH
20845: LD_INT 3
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: NEG
20855: PUSH
20856: LD_INT 2
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 2
20865: NEG
20866: PUSH
20867: LD_INT 1
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 3
20876: NEG
20877: PUSH
20878: LD_INT 0
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 3
20887: NEG
20888: PUSH
20889: LD_INT 1
20891: NEG
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20928: LD_ADDR_VAR 0 44
20932: PUSH
20933: LD_INT 0
20935: PUSH
20936: LD_INT 0
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 0
20945: PUSH
20946: LD_INT 1
20948: NEG
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 1
20956: PUSH
20957: LD_INT 0
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: LD_INT 1
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 0
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 1
20986: NEG
20987: PUSH
20988: LD_INT 0
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 1
20997: NEG
20998: PUSH
20999: LD_INT 1
21001: NEG
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 1
21009: NEG
21010: PUSH
21011: LD_INT 2
21013: NEG
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 1
21021: PUSH
21022: LD_INT 1
21024: NEG
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 2
21032: PUSH
21033: LD_INT 0
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 2
21042: PUSH
21043: LD_INT 1
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 2
21052: PUSH
21053: LD_INT 2
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 1
21062: PUSH
21063: LD_INT 2
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 1
21072: NEG
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 2
21083: NEG
21084: PUSH
21085: LD_INT 0
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 2
21094: NEG
21095: PUSH
21096: LD_INT 1
21098: NEG
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 2
21106: NEG
21107: PUSH
21108: LD_INT 2
21110: NEG
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 2
21118: NEG
21119: PUSH
21120: LD_INT 3
21122: NEG
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 2
21130: PUSH
21131: LD_INT 1
21133: NEG
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 3
21141: PUSH
21142: LD_INT 0
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 3
21151: PUSH
21152: LD_INT 1
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 3
21161: PUSH
21162: LD_INT 2
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 3
21171: PUSH
21172: LD_INT 3
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 2
21181: PUSH
21182: LD_INT 3
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 2
21191: NEG
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 3
21202: NEG
21203: PUSH
21204: LD_INT 0
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 3
21213: NEG
21214: PUSH
21215: LD_INT 1
21217: NEG
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 3
21225: NEG
21226: PUSH
21227: LD_INT 2
21229: NEG
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 3
21237: NEG
21238: PUSH
21239: LD_INT 3
21241: NEG
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21278: LD_ADDR_VAR 0 45
21282: PUSH
21283: LD_INT 0
21285: PUSH
21286: LD_INT 0
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 0
21295: PUSH
21296: LD_INT 1
21298: NEG
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 1
21306: PUSH
21307: LD_INT 0
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: LD_INT 1
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 0
21326: PUSH
21327: LD_INT 1
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 1
21336: NEG
21337: PUSH
21338: LD_INT 0
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 1
21347: NEG
21348: PUSH
21349: LD_INT 1
21351: NEG
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 1
21359: NEG
21360: PUSH
21361: LD_INT 2
21363: NEG
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 0
21371: PUSH
21372: LD_INT 2
21374: NEG
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 1
21382: PUSH
21383: LD_INT 1
21385: NEG
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 2
21393: PUSH
21394: LD_INT 1
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 2
21403: PUSH
21404: LD_INT 2
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: LD_INT 2
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: LD_INT 2
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: LD_INT 1
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 2
21444: NEG
21445: PUSH
21446: LD_INT 1
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 2
21456: NEG
21457: PUSH
21458: LD_INT 2
21460: NEG
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 2
21468: NEG
21469: PUSH
21470: LD_INT 3
21472: NEG
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 1
21480: NEG
21481: PUSH
21482: LD_INT 3
21484: NEG
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 0
21492: PUSH
21493: LD_INT 3
21495: NEG
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 1
21503: PUSH
21504: LD_INT 2
21506: NEG
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 3
21514: PUSH
21515: LD_INT 2
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 3
21524: PUSH
21525: LD_INT 3
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 2
21534: PUSH
21535: LD_INT 3
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 1
21544: PUSH
21545: LD_INT 3
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 0
21554: PUSH
21555: LD_INT 3
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 1
21564: NEG
21565: PUSH
21566: LD_INT 2
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 3
21575: NEG
21576: PUSH
21577: LD_INT 2
21579: NEG
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 3
21587: NEG
21588: PUSH
21589: LD_INT 3
21591: NEG
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21628: LD_ADDR_VAR 0 46
21632: PUSH
21633: LD_INT 0
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 0
21645: PUSH
21646: LD_INT 1
21648: NEG
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 1
21656: PUSH
21657: LD_INT 0
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 1
21666: PUSH
21667: LD_INT 1
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 0
21676: PUSH
21677: LD_INT 1
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 1
21686: NEG
21687: PUSH
21688: LD_INT 0
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 1
21697: NEG
21698: PUSH
21699: LD_INT 1
21701: NEG
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 1
21709: NEG
21710: PUSH
21711: LD_INT 2
21713: NEG
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 0
21721: PUSH
21722: LD_INT 2
21724: NEG
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 1
21732: PUSH
21733: LD_INT 1
21735: NEG
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 2
21743: PUSH
21744: LD_INT 0
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 2
21753: PUSH
21754: LD_INT 1
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 1
21763: PUSH
21764: LD_INT 2
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: LD_INT 2
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 1
21783: NEG
21784: PUSH
21785: LD_INT 1
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 2
21794: NEG
21795: PUSH
21796: LD_INT 0
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 2
21805: NEG
21806: PUSH
21807: LD_INT 1
21809: NEG
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: NEG
21818: PUSH
21819: LD_INT 3
21821: NEG
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 0
21829: PUSH
21830: LD_INT 3
21832: NEG
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 1
21840: PUSH
21841: LD_INT 2
21843: NEG
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 2
21851: PUSH
21852: LD_INT 1
21854: NEG
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 3
21862: PUSH
21863: LD_INT 0
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 3
21872: PUSH
21873: LD_INT 1
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 1
21882: PUSH
21883: LD_INT 3
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 0
21892: PUSH
21893: LD_INT 3
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 1
21902: NEG
21903: PUSH
21904: LD_INT 2
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 2
21913: NEG
21914: PUSH
21915: LD_INT 1
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 3
21924: NEG
21925: PUSH
21926: LD_INT 0
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 3
21935: NEG
21936: PUSH
21937: LD_INT 1
21939: NEG
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21976: LD_ADDR_VAR 0 47
21980: PUSH
21981: LD_INT 0
21983: PUSH
21984: LD_INT 0
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: LD_INT 1
21996: NEG
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 1
22004: PUSH
22005: LD_INT 0
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: LD_INT 1
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 0
22024: PUSH
22025: LD_INT 1
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: LD_INT 0
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 1
22045: NEG
22046: PUSH
22047: LD_INT 1
22049: NEG
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 1
22057: NEG
22058: PUSH
22059: LD_INT 2
22061: NEG
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 0
22069: PUSH
22070: LD_INT 2
22072: NEG
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: LD_INT 1
22083: NEG
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 2
22091: NEG
22092: PUSH
22093: LD_INT 1
22095: NEG
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 2
22103: NEG
22104: PUSH
22105: LD_INT 2
22107: NEG
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
22127: LD_ADDR_VAR 0 48
22131: PUSH
22132: LD_INT 0
22134: PUSH
22135: LD_INT 0
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 0
22144: PUSH
22145: LD_INT 1
22147: NEG
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 1
22155: PUSH
22156: LD_INT 0
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 0
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 1
22185: NEG
22186: PUSH
22187: LD_INT 0
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 1
22196: NEG
22197: PUSH
22198: LD_INT 1
22200: NEG
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 1
22208: NEG
22209: PUSH
22210: LD_INT 2
22212: NEG
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: LD_INT 2
22223: NEG
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 1
22231: PUSH
22232: LD_INT 1
22234: NEG
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 2
22242: PUSH
22243: LD_INT 0
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 2
22252: PUSH
22253: LD_INT 1
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
22274: LD_ADDR_VAR 0 49
22278: PUSH
22279: LD_INT 0
22281: PUSH
22282: LD_INT 0
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 0
22291: PUSH
22292: LD_INT 1
22294: NEG
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 1
22302: PUSH
22303: LD_INT 0
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 1
22312: PUSH
22313: LD_INT 1
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 0
22322: PUSH
22323: LD_INT 1
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 1
22332: NEG
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 1
22343: NEG
22344: PUSH
22345: LD_INT 1
22347: NEG
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 1
22355: PUSH
22356: LD_INT 1
22358: NEG
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 2
22366: PUSH
22367: LD_INT 0
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 2
22376: PUSH
22377: LD_INT 1
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: LD_INT 2
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: LD_INT 2
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
22418: LD_ADDR_VAR 0 50
22422: PUSH
22423: LD_INT 0
22425: PUSH
22426: LD_INT 0
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 0
22435: PUSH
22436: LD_INT 1
22438: NEG
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 1
22446: PUSH
22447: LD_INT 0
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 1
22456: PUSH
22457: LD_INT 1
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 0
22466: PUSH
22467: LD_INT 1
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 1
22476: NEG
22477: PUSH
22478: LD_INT 0
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 1
22487: NEG
22488: PUSH
22489: LD_INT 1
22491: NEG
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 2
22499: PUSH
22500: LD_INT 1
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 2
22509: PUSH
22510: LD_INT 2
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: LD_INT 2
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 0
22529: PUSH
22530: LD_INT 2
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 1
22539: NEG
22540: PUSH
22541: LD_INT 1
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
22562: LD_ADDR_VAR 0 51
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 0
22579: PUSH
22580: LD_INT 1
22582: NEG
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: LD_INT 1
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 1
22620: NEG
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: NEG
22632: PUSH
22633: LD_INT 1
22635: NEG
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 1
22643: PUSH
22644: LD_INT 2
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: LD_INT 2
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 1
22663: NEG
22664: PUSH
22665: LD_INT 1
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 2
22674: NEG
22675: PUSH
22676: LD_INT 0
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 2
22685: NEG
22686: PUSH
22687: LD_INT 1
22689: NEG
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22709: LD_ADDR_VAR 0 52
22713: PUSH
22714: LD_INT 0
22716: PUSH
22717: LD_INT 0
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 0
22726: PUSH
22727: LD_INT 1
22729: NEG
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: LD_INT 0
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 1
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 0
22757: PUSH
22758: LD_INT 1
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: LD_INT 0
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 1
22778: NEG
22779: PUSH
22780: LD_INT 1
22782: NEG
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 1
22790: NEG
22791: PUSH
22792: LD_INT 2
22794: NEG
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 1
22802: NEG
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 2
22813: NEG
22814: PUSH
22815: LD_INT 0
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 2
22824: NEG
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 2
22836: NEG
22837: PUSH
22838: LD_INT 2
22840: NEG
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22860: LD_ADDR_VAR 0 53
22864: PUSH
22865: LD_INT 0
22867: PUSH
22868: LD_INT 0
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 0
22877: PUSH
22878: LD_INT 1
22880: NEG
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 1
22888: PUSH
22889: LD_INT 0
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 1
22898: PUSH
22899: LD_INT 1
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 0
22908: PUSH
22909: LD_INT 1
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 1
22918: NEG
22919: PUSH
22920: LD_INT 0
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 1
22929: NEG
22930: PUSH
22931: LD_INT 1
22933: NEG
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 1
22941: NEG
22942: PUSH
22943: LD_INT 2
22945: NEG
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 0
22953: PUSH
22954: LD_INT 2
22956: NEG
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 1
22964: PUSH
22965: LD_INT 1
22967: NEG
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 2
22975: PUSH
22976: LD_INT 0
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 2
22985: PUSH
22986: LD_INT 1
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 2
22995: PUSH
22996: LD_INT 2
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 1
23005: PUSH
23006: LD_INT 2
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 0
23015: PUSH
23016: LD_INT 2
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 1
23025: NEG
23026: PUSH
23027: LD_INT 1
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 2
23036: NEG
23037: PUSH
23038: LD_INT 0
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 2
23047: NEG
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 2
23059: NEG
23060: PUSH
23061: LD_INT 2
23063: NEG
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23090: LD_ADDR_VAR 0 54
23094: PUSH
23095: LD_INT 0
23097: PUSH
23098: LD_INT 0
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 0
23107: PUSH
23108: LD_INT 1
23110: NEG
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 1
23118: PUSH
23119: LD_INT 0
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 1
23128: PUSH
23129: LD_INT 1
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: LD_INT 1
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 1
23148: NEG
23149: PUSH
23150: LD_INT 0
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 1
23159: NEG
23160: PUSH
23161: LD_INT 1
23163: NEG
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 1
23171: NEG
23172: PUSH
23173: LD_INT 2
23175: NEG
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 0
23183: PUSH
23184: LD_INT 2
23186: NEG
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: LD_INT 1
23197: NEG
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 2
23205: PUSH
23206: LD_INT 0
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 2
23215: PUSH
23216: LD_INT 1
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 2
23225: PUSH
23226: LD_INT 2
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: LD_INT 2
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 0
23245: PUSH
23246: LD_INT 2
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: NEG
23256: PUSH
23257: LD_INT 1
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 2
23266: NEG
23267: PUSH
23268: LD_INT 0
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 2
23277: NEG
23278: PUSH
23279: LD_INT 1
23281: NEG
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 2
23289: NEG
23290: PUSH
23291: LD_INT 2
23293: NEG
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23320: LD_ADDR_VAR 0 55
23324: PUSH
23325: LD_INT 0
23327: PUSH
23328: LD_INT 0
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 0
23337: PUSH
23338: LD_INT 1
23340: NEG
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 1
23348: PUSH
23349: LD_INT 0
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 1
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 0
23368: PUSH
23369: LD_INT 1
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 1
23378: NEG
23379: PUSH
23380: LD_INT 0
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 1
23389: NEG
23390: PUSH
23391: LD_INT 1
23393: NEG
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: NEG
23402: PUSH
23403: LD_INT 2
23405: NEG
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 0
23413: PUSH
23414: LD_INT 2
23416: NEG
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: LD_INT 1
23427: NEG
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 2
23435: PUSH
23436: LD_INT 0
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: LD_INT 1
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 2
23455: PUSH
23456: LD_INT 2
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 1
23465: PUSH
23466: LD_INT 2
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 0
23475: PUSH
23476: LD_INT 2
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 1
23485: NEG
23486: PUSH
23487: LD_INT 1
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 2
23496: NEG
23497: PUSH
23498: LD_INT 0
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 2
23507: NEG
23508: PUSH
23509: LD_INT 1
23511: NEG
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 2
23519: NEG
23520: PUSH
23521: LD_INT 2
23523: NEG
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23550: LD_ADDR_VAR 0 56
23554: PUSH
23555: LD_INT 0
23557: PUSH
23558: LD_INT 0
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 0
23567: PUSH
23568: LD_INT 1
23570: NEG
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: LD_INT 0
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 1
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: LD_INT 1
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 1
23608: NEG
23609: PUSH
23610: LD_INT 0
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 1
23619: NEG
23620: PUSH
23621: LD_INT 1
23623: NEG
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 1
23631: NEG
23632: PUSH
23633: LD_INT 2
23635: NEG
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 0
23643: PUSH
23644: LD_INT 2
23646: NEG
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 1
23654: PUSH
23655: LD_INT 1
23657: NEG
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 2
23665: PUSH
23666: LD_INT 0
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 2
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 2
23685: PUSH
23686: LD_INT 2
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 1
23695: PUSH
23696: LD_INT 2
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 0
23705: PUSH
23706: LD_INT 2
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 2
23726: NEG
23727: PUSH
23728: LD_INT 0
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 2
23737: NEG
23738: PUSH
23739: LD_INT 1
23741: NEG
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 2
23749: NEG
23750: PUSH
23751: LD_INT 2
23753: NEG
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23780: LD_ADDR_VAR 0 57
23784: PUSH
23785: LD_INT 0
23787: PUSH
23788: LD_INT 0
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 0
23797: PUSH
23798: LD_INT 1
23800: NEG
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 1
23808: PUSH
23809: LD_INT 0
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 0
23828: PUSH
23829: LD_INT 1
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 1
23838: NEG
23839: PUSH
23840: LD_INT 0
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 1
23849: NEG
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 1
23861: NEG
23862: PUSH
23863: LD_INT 2
23865: NEG
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: LD_INT 2
23876: NEG
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 1
23884: PUSH
23885: LD_INT 1
23887: NEG
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 2
23895: PUSH
23896: LD_INT 0
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 2
23905: PUSH
23906: LD_INT 1
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 2
23915: PUSH
23916: LD_INT 2
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: LD_INT 2
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 1
23945: NEG
23946: PUSH
23947: LD_INT 1
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 2
23956: NEG
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 2
23967: NEG
23968: PUSH
23969: LD_INT 1
23971: NEG
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 2
23979: NEG
23980: PUSH
23981: LD_INT 2
23983: NEG
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24010: LD_ADDR_VAR 0 58
24014: PUSH
24015: LD_INT 0
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: LD_INT 1
24030: NEG
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 1
24038: PUSH
24039: LD_INT 0
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: LD_INT 1
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: LD_INT 1
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 1
24068: NEG
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 1
24079: NEG
24080: PUSH
24081: LD_INT 1
24083: NEG
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: NEG
24092: PUSH
24093: LD_INT 2
24095: NEG
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 0
24103: PUSH
24104: LD_INT 2
24106: NEG
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 1
24114: PUSH
24115: LD_INT 1
24117: NEG
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 2
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 2
24135: PUSH
24136: LD_INT 1
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 2
24145: PUSH
24146: LD_INT 2
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 1
24155: PUSH
24156: LD_INT 2
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 0
24165: PUSH
24166: LD_INT 2
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 1
24175: NEG
24176: PUSH
24177: LD_INT 1
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 2
24186: NEG
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 2
24197: NEG
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 2
24209: NEG
24210: PUSH
24211: LD_INT 2
24213: NEG
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24240: LD_ADDR_VAR 0 59
24244: PUSH
24245: LD_INT 0
24247: PUSH
24248: LD_INT 0
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 0
24257: PUSH
24258: LD_INT 1
24260: NEG
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: LD_INT 0
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 1
24278: PUSH
24279: LD_INT 1
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 0
24288: PUSH
24289: LD_INT 1
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: NEG
24299: PUSH
24300: LD_INT 0
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 1
24309: NEG
24310: PUSH
24311: LD_INT 1
24313: NEG
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24328: LD_ADDR_VAR 0 60
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: LD_INT 0
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: LD_INT 1
24348: NEG
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 1
24356: PUSH
24357: LD_INT 0
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 1
24366: PUSH
24367: LD_INT 1
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 0
24376: PUSH
24377: LD_INT 1
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 1
24386: NEG
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 1
24397: NEG
24398: PUSH
24399: LD_INT 1
24401: NEG
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24416: LD_ADDR_VAR 0 61
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: LD_INT 0
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: LD_INT 1
24436: NEG
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: LD_INT 0
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: LD_INT 1
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: LD_INT 1
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 1
24474: NEG
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 1
24485: NEG
24486: PUSH
24487: LD_INT 1
24489: NEG
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24504: LD_ADDR_VAR 0 62
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: LD_INT 0
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: LD_INT 1
24524: NEG
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 1
24532: PUSH
24533: LD_INT 0
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: LD_INT 1
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 0
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 1
24562: NEG
24563: PUSH
24564: LD_INT 0
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 1
24573: NEG
24574: PUSH
24575: LD_INT 1
24577: NEG
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24592: LD_ADDR_VAR 0 63
24596: PUSH
24597: LD_INT 0
24599: PUSH
24600: LD_INT 0
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 0
24609: PUSH
24610: LD_INT 1
24612: NEG
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: LD_INT 0
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 1
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 0
24640: PUSH
24641: LD_INT 1
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 1
24650: NEG
24651: PUSH
24652: LD_INT 0
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 1
24661: NEG
24662: PUSH
24663: LD_INT 1
24665: NEG
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
24680: LD_ADDR_VAR 0 64
24684: PUSH
24685: LD_INT 0
24687: PUSH
24688: LD_INT 0
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 0
24697: PUSH
24698: LD_INT 1
24700: NEG
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 1
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 1
24718: PUSH
24719: LD_INT 1
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 0
24728: PUSH
24729: LD_INT 1
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 1
24738: NEG
24739: PUSH
24740: LD_INT 0
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 1
24749: NEG
24750: PUSH
24751: LD_INT 1
24753: NEG
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: ST_TO_ADDR
// end ; 1 :
24768: GO 30665
24770: LD_INT 1
24772: DOUBLE
24773: EQUAL
24774: IFTRUE 24778
24776: GO 27401
24778: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24779: LD_ADDR_VAR 0 11
24783: PUSH
24784: LD_INT 1
24786: NEG
24787: PUSH
24788: LD_INT 3
24790: NEG
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 0
24798: PUSH
24799: LD_INT 3
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 1
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: LIST
24822: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24823: LD_ADDR_VAR 0 12
24827: PUSH
24828: LD_INT 2
24830: PUSH
24831: LD_INT 1
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 3
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 3
24851: PUSH
24852: LD_INT 1
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: LIST
24863: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24864: LD_ADDR_VAR 0 13
24868: PUSH
24869: LD_INT 3
24871: PUSH
24872: LD_INT 2
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 3
24881: PUSH
24882: LD_INT 3
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 2
24891: PUSH
24892: LD_INT 3
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: LIST
24903: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24904: LD_ADDR_VAR 0 14
24908: PUSH
24909: LD_INT 1
24911: PUSH
24912: LD_INT 3
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 0
24921: PUSH
24922: LD_INT 3
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 1
24931: NEG
24932: PUSH
24933: LD_INT 2
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: LIST
24944: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24945: LD_ADDR_VAR 0 15
24949: PUSH
24950: LD_INT 2
24952: NEG
24953: PUSH
24954: LD_INT 1
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 3
24963: NEG
24964: PUSH
24965: LD_INT 0
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 3
24974: NEG
24975: PUSH
24976: LD_INT 1
24978: NEG
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: LIST
24988: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24989: LD_ADDR_VAR 0 16
24993: PUSH
24994: LD_INT 2
24996: NEG
24997: PUSH
24998: LD_INT 3
25000: NEG
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 3
25008: NEG
25009: PUSH
25010: LD_INT 2
25012: NEG
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: LD_INT 3
25020: NEG
25021: PUSH
25022: LD_INT 3
25024: NEG
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25035: LD_ADDR_VAR 0 17
25039: PUSH
25040: LD_INT 1
25042: NEG
25043: PUSH
25044: LD_INT 3
25046: NEG
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 3
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: LD_INT 2
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: LIST
25078: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25079: LD_ADDR_VAR 0 18
25083: PUSH
25084: LD_INT 2
25086: PUSH
25087: LD_INT 1
25089: NEG
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 3
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 3
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25120: LD_ADDR_VAR 0 19
25124: PUSH
25125: LD_INT 3
25127: PUSH
25128: LD_INT 2
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 3
25137: PUSH
25138: LD_INT 3
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 2
25147: PUSH
25148: LD_INT 3
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: LIST
25159: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25160: LD_ADDR_VAR 0 20
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: LD_INT 3
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 0
25177: PUSH
25178: LD_INT 3
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: PUSH
25189: LD_INT 2
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: LIST
25200: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25201: LD_ADDR_VAR 0 21
25205: PUSH
25206: LD_INT 2
25208: NEG
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 3
25219: NEG
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 3
25230: NEG
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: LIST
25244: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25245: LD_ADDR_VAR 0 22
25249: PUSH
25250: LD_INT 2
25252: NEG
25253: PUSH
25254: LD_INT 3
25256: NEG
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 3
25264: NEG
25265: PUSH
25266: LD_INT 2
25268: NEG
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 3
25276: NEG
25277: PUSH
25278: LD_INT 3
25280: NEG
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: LIST
25290: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
25291: LD_ADDR_VAR 0 23
25295: PUSH
25296: LD_INT 0
25298: PUSH
25299: LD_INT 3
25301: NEG
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 1
25309: NEG
25310: PUSH
25311: LD_INT 4
25313: NEG
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 1
25321: PUSH
25322: LD_INT 3
25324: NEG
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: LIST
25334: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
25335: LD_ADDR_VAR 0 24
25339: PUSH
25340: LD_INT 3
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 3
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 4
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: LIST
25375: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
25376: LD_ADDR_VAR 0 25
25380: PUSH
25381: LD_INT 3
25383: PUSH
25384: LD_INT 3
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 4
25393: PUSH
25394: LD_INT 3
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 3
25403: PUSH
25404: LD_INT 4
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: LIST
25415: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
25416: LD_ADDR_VAR 0 26
25420: PUSH
25421: LD_INT 0
25423: PUSH
25424: LD_INT 3
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 1
25433: PUSH
25434: LD_INT 4
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 1
25443: NEG
25444: PUSH
25445: LD_INT 3
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: LIST
25456: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
25457: LD_ADDR_VAR 0 27
25461: PUSH
25462: LD_INT 3
25464: NEG
25465: PUSH
25466: LD_INT 0
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 3
25475: NEG
25476: PUSH
25477: LD_INT 1
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 4
25486: NEG
25487: PUSH
25488: LD_INT 1
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: LIST
25500: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
25501: LD_ADDR_VAR 0 28
25505: PUSH
25506: LD_INT 3
25508: NEG
25509: PUSH
25510: LD_INT 3
25512: NEG
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 3
25520: NEG
25521: PUSH
25522: LD_INT 4
25524: NEG
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 4
25532: NEG
25533: PUSH
25534: LD_INT 3
25536: NEG
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: LIST
25546: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
25547: LD_ADDR_VAR 0 29
25551: PUSH
25552: LD_INT 1
25554: NEG
25555: PUSH
25556: LD_INT 3
25558: NEG
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 0
25566: PUSH
25567: LD_INT 3
25569: NEG
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 1
25577: PUSH
25578: LD_INT 2
25580: NEG
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 1
25588: NEG
25589: PUSH
25590: LD_INT 4
25592: NEG
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: LD_INT 4
25603: NEG
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: LD_INT 3
25614: NEG
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 1
25622: NEG
25623: PUSH
25624: LD_INT 5
25626: NEG
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: LD_INT 5
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: LD_INT 4
25648: NEG
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 1
25656: NEG
25657: PUSH
25658: LD_INT 6
25660: NEG
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 0
25668: PUSH
25669: LD_INT 6
25671: NEG
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 1
25679: PUSH
25680: LD_INT 5
25682: NEG
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
25702: LD_ADDR_VAR 0 30
25706: PUSH
25707: LD_INT 2
25709: PUSH
25710: LD_INT 1
25712: NEG
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 3
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 3
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 3
25740: PUSH
25741: LD_INT 1
25743: NEG
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 4
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 4
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 4
25771: PUSH
25772: LD_INT 1
25774: NEG
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 5
25782: PUSH
25783: LD_INT 0
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 5
25792: PUSH
25793: LD_INT 1
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 5
25802: PUSH
25803: LD_INT 1
25805: NEG
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 6
25813: PUSH
25814: LD_INT 0
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 6
25823: PUSH
25824: LD_INT 1
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
25845: LD_ADDR_VAR 0 31
25849: PUSH
25850: LD_INT 3
25852: PUSH
25853: LD_INT 2
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 3
25862: PUSH
25863: LD_INT 3
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 2
25872: PUSH
25873: LD_INT 3
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 4
25882: PUSH
25883: LD_INT 3
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 4
25892: PUSH
25893: LD_INT 4
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 3
25902: PUSH
25903: LD_INT 4
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 5
25912: PUSH
25913: LD_INT 4
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 5
25922: PUSH
25923: LD_INT 5
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 4
25932: PUSH
25933: LD_INT 5
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 6
25942: PUSH
25943: LD_INT 5
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 6
25952: PUSH
25953: LD_INT 6
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 5
25962: PUSH
25963: LD_INT 6
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
25984: LD_ADDR_VAR 0 32
25988: PUSH
25989: LD_INT 1
25991: PUSH
25992: LD_INT 3
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 0
26001: PUSH
26002: LD_INT 3
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 1
26011: NEG
26012: PUSH
26013: LD_INT 2
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: LD_INT 4
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: LD_INT 4
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 1
26042: NEG
26043: PUSH
26044: LD_INT 3
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: LD_INT 5
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: LD_INT 5
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: NEG
26074: PUSH
26075: LD_INT 4
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 1
26084: PUSH
26085: LD_INT 6
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: LD_INT 6
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: LD_INT 5
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
26127: LD_ADDR_VAR 0 33
26131: PUSH
26132: LD_INT 2
26134: NEG
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 3
26145: NEG
26146: PUSH
26147: LD_INT 0
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 3
26156: NEG
26157: PUSH
26158: LD_INT 1
26160: NEG
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 3
26168: NEG
26169: PUSH
26170: LD_INT 1
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 4
26179: NEG
26180: PUSH
26181: LD_INT 0
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 4
26190: NEG
26191: PUSH
26192: LD_INT 1
26194: NEG
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 4
26202: NEG
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 5
26213: NEG
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 5
26224: NEG
26225: PUSH
26226: LD_INT 1
26228: NEG
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 5
26236: NEG
26237: PUSH
26238: LD_INT 1
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 6
26247: NEG
26248: PUSH
26249: LD_INT 0
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 6
26258: NEG
26259: PUSH
26260: LD_INT 1
26262: NEG
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
26282: LD_ADDR_VAR 0 34
26286: PUSH
26287: LD_INT 2
26289: NEG
26290: PUSH
26291: LD_INT 3
26293: NEG
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 3
26301: NEG
26302: PUSH
26303: LD_INT 2
26305: NEG
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 3
26313: NEG
26314: PUSH
26315: LD_INT 3
26317: NEG
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 3
26325: NEG
26326: PUSH
26327: LD_INT 4
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 4
26337: NEG
26338: PUSH
26339: LD_INT 3
26341: NEG
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 4
26349: NEG
26350: PUSH
26351: LD_INT 4
26353: NEG
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 4
26361: NEG
26362: PUSH
26363: LD_INT 5
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 5
26373: NEG
26374: PUSH
26375: LD_INT 4
26377: NEG
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 5
26385: NEG
26386: PUSH
26387: LD_INT 5
26389: NEG
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 5
26397: NEG
26398: PUSH
26399: LD_INT 6
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 6
26409: NEG
26410: PUSH
26411: LD_INT 5
26413: NEG
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 6
26421: NEG
26422: PUSH
26423: LD_INT 6
26425: NEG
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
26445: LD_ADDR_VAR 0 41
26449: PUSH
26450: LD_INT 0
26452: PUSH
26453: LD_INT 2
26455: NEG
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 1
26463: NEG
26464: PUSH
26465: LD_INT 3
26467: NEG
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 1
26475: PUSH
26476: LD_INT 2
26478: NEG
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: LIST
26488: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
26489: LD_ADDR_VAR 0 42
26493: PUSH
26494: LD_INT 2
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: LD_INT 1
26509: NEG
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 3
26517: PUSH
26518: LD_INT 1
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: LIST
26529: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
26530: LD_ADDR_VAR 0 43
26534: PUSH
26535: LD_INT 2
26537: PUSH
26538: LD_INT 2
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 3
26547: PUSH
26548: LD_INT 2
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: PUSH
26558: LD_INT 3
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: LIST
26569: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
26570: LD_ADDR_VAR 0 44
26574: PUSH
26575: LD_INT 0
26577: PUSH
26578: LD_INT 2
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 1
26587: PUSH
26588: LD_INT 3
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: LD_INT 2
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: LIST
26610: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26611: LD_ADDR_VAR 0 45
26615: PUSH
26616: LD_INT 2
26618: NEG
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 2
26629: NEG
26630: PUSH
26631: LD_INT 1
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 3
26640: NEG
26641: PUSH
26642: LD_INT 1
26644: NEG
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: LIST
26654: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
26655: LD_ADDR_VAR 0 46
26659: PUSH
26660: LD_INT 2
26662: NEG
26663: PUSH
26664: LD_INT 2
26666: NEG
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 2
26674: NEG
26675: PUSH
26676: LD_INT 3
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 3
26686: NEG
26687: PUSH
26688: LD_INT 2
26690: NEG
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: LIST
26700: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
26701: LD_ADDR_VAR 0 47
26705: PUSH
26706: LD_INT 2
26708: NEG
26709: PUSH
26710: LD_INT 3
26712: NEG
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 1
26720: NEG
26721: PUSH
26722: LD_INT 3
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26734: LD_ADDR_VAR 0 48
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: LD_INT 2
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 2
26752: PUSH
26753: LD_INT 1
26755: NEG
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
26765: LD_ADDR_VAR 0 49
26769: PUSH
26770: LD_INT 3
26772: PUSH
26773: LD_INT 1
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 3
26782: PUSH
26783: LD_INT 2
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
26794: LD_ADDR_VAR 0 50
26798: PUSH
26799: LD_INT 2
26801: PUSH
26802: LD_INT 3
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: LD_INT 3
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26823: LD_ADDR_VAR 0 51
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: PUSH
26832: LD_INT 2
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 2
26841: NEG
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26854: LD_ADDR_VAR 0 52
26858: PUSH
26859: LD_INT 3
26861: NEG
26862: PUSH
26863: LD_INT 1
26865: NEG
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 3
26873: NEG
26874: PUSH
26875: LD_INT 2
26877: NEG
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26887: LD_ADDR_VAR 0 53
26891: PUSH
26892: LD_INT 1
26894: NEG
26895: PUSH
26896: LD_INT 3
26898: NEG
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 0
26906: PUSH
26907: LD_INT 3
26909: NEG
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: LD_INT 2
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: LIST
26930: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26931: LD_ADDR_VAR 0 54
26935: PUSH
26936: LD_INT 2
26938: PUSH
26939: LD_INT 1
26941: NEG
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 3
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 3
26959: PUSH
26960: LD_INT 1
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: LIST
26971: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26972: LD_ADDR_VAR 0 55
26976: PUSH
26977: LD_INT 3
26979: PUSH
26980: LD_INT 2
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 3
26989: PUSH
26990: LD_INT 3
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 2
26999: PUSH
27000: LD_INT 3
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: LIST
27011: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27012: LD_ADDR_VAR 0 56
27016: PUSH
27017: LD_INT 1
27019: PUSH
27020: LD_INT 3
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 0
27029: PUSH
27030: LD_INT 3
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 1
27039: NEG
27040: PUSH
27041: LD_INT 2
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: LIST
27052: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27053: LD_ADDR_VAR 0 57
27057: PUSH
27058: LD_INT 2
27060: NEG
27061: PUSH
27062: LD_INT 1
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 3
27071: NEG
27072: PUSH
27073: LD_INT 0
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 3
27082: NEG
27083: PUSH
27084: LD_INT 1
27086: NEG
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: LIST
27096: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27097: LD_ADDR_VAR 0 58
27101: PUSH
27102: LD_INT 2
27104: NEG
27105: PUSH
27106: LD_INT 3
27108: NEG
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 3
27116: NEG
27117: PUSH
27118: LD_INT 2
27120: NEG
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 3
27128: NEG
27129: PUSH
27130: LD_INT 3
27132: NEG
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: LIST
27142: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
27143: LD_ADDR_VAR 0 59
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: LD_INT 2
27154: NEG
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: LD_INT 2
27165: NEG
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 1
27173: PUSH
27174: LD_INT 1
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: LIST
27186: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27187: LD_ADDR_VAR 0 60
27191: PUSH
27192: LD_INT 1
27194: PUSH
27195: LD_INT 1
27197: NEG
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 2
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 2
27215: PUSH
27216: LD_INT 1
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: LIST
27227: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27228: LD_ADDR_VAR 0 61
27232: PUSH
27233: LD_INT 2
27235: PUSH
27236: LD_INT 1
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 2
27245: PUSH
27246: LD_INT 2
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 1
27255: PUSH
27256: LD_INT 2
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: LIST
27267: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27268: LD_ADDR_VAR 0 62
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: LD_INT 2
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: LD_INT 1
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: LIST
27308: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27309: LD_ADDR_VAR 0 63
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 2
27327: NEG
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 2
27338: NEG
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: LIST
27352: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27353: LD_ADDR_VAR 0 64
27357: PUSH
27358: LD_INT 1
27360: NEG
27361: PUSH
27362: LD_INT 2
27364: NEG
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 2
27372: NEG
27373: PUSH
27374: LD_INT 1
27376: NEG
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 2
27384: NEG
27385: PUSH
27386: LD_INT 2
27388: NEG
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: LIST
27398: ST_TO_ADDR
// end ; 2 :
27399: GO 30665
27401: LD_INT 2
27403: DOUBLE
27404: EQUAL
27405: IFTRUE 27409
27407: GO 30664
27409: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
27410: LD_ADDR_VAR 0 29
27414: PUSH
27415: LD_INT 4
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 4
27427: PUSH
27428: LD_INT 1
27430: NEG
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 5
27438: PUSH
27439: LD_INT 0
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 5
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 4
27458: PUSH
27459: LD_INT 1
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 3
27468: PUSH
27469: LD_INT 0
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 3
27478: PUSH
27479: LD_INT 1
27481: NEG
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 3
27489: PUSH
27490: LD_INT 2
27492: NEG
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 5
27500: PUSH
27501: LD_INT 2
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 3
27510: PUSH
27511: LD_INT 3
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 3
27520: PUSH
27521: LD_INT 2
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 4
27530: PUSH
27531: LD_INT 3
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 4
27540: PUSH
27541: LD_INT 4
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 3
27550: PUSH
27551: LD_INT 4
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 2
27560: PUSH
27561: LD_INT 3
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 2
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 4
27580: PUSH
27581: LD_INT 2
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 2
27590: PUSH
27591: LD_INT 4
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 0
27600: PUSH
27601: LD_INT 4
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 0
27610: PUSH
27611: LD_INT 3
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: PUSH
27621: LD_INT 4
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 1
27630: PUSH
27631: LD_INT 5
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: LD_INT 5
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 1
27650: NEG
27651: PUSH
27652: LD_INT 4
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 1
27661: NEG
27662: PUSH
27663: LD_INT 3
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 2
27672: PUSH
27673: LD_INT 5
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 2
27682: NEG
27683: PUSH
27684: LD_INT 3
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 3
27693: NEG
27694: PUSH
27695: LD_INT 0
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 3
27704: NEG
27705: PUSH
27706: LD_INT 1
27708: NEG
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 2
27716: NEG
27717: PUSH
27718: LD_INT 0
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 2
27727: NEG
27728: PUSH
27729: LD_INT 1
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 3
27738: NEG
27739: PUSH
27740: LD_INT 1
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 4
27749: NEG
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 4
27760: NEG
27761: PUSH
27762: LD_INT 1
27764: NEG
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 4
27772: NEG
27773: PUSH
27774: LD_INT 2
27776: NEG
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 2
27784: NEG
27785: PUSH
27786: LD_INT 2
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 4
27795: NEG
27796: PUSH
27797: LD_INT 4
27799: NEG
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 4
27807: NEG
27808: PUSH
27809: LD_INT 5
27811: NEG
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 3
27819: NEG
27820: PUSH
27821: LD_INT 4
27823: NEG
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 3
27831: NEG
27832: PUSH
27833: LD_INT 3
27835: NEG
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 4
27843: NEG
27844: PUSH
27845: LD_INT 3
27847: NEG
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 5
27855: NEG
27856: PUSH
27857: LD_INT 4
27859: NEG
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 5
27867: NEG
27868: PUSH
27869: LD_INT 5
27871: NEG
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 3
27879: NEG
27880: PUSH
27881: LD_INT 5
27883: NEG
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 5
27891: NEG
27892: PUSH
27893: LD_INT 3
27895: NEG
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
27948: LD_ADDR_VAR 0 30
27952: PUSH
27953: LD_INT 4
27955: PUSH
27956: LD_INT 4
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 4
27965: PUSH
27966: LD_INT 3
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 5
27975: PUSH
27976: LD_INT 4
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 5
27985: PUSH
27986: LD_INT 5
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 4
27995: PUSH
27996: LD_INT 5
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 3
28005: PUSH
28006: LD_INT 4
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 3
28015: PUSH
28016: LD_INT 3
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 5
28025: PUSH
28026: LD_INT 3
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 3
28035: PUSH
28036: LD_INT 5
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: LD_INT 3
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: LD_INT 2
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: LD_INT 3
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: LD_INT 4
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 0
28085: PUSH
28086: LD_INT 4
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 1
28095: NEG
28096: PUSH
28097: LD_INT 3
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 1
28106: NEG
28107: PUSH
28108: LD_INT 2
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 2
28117: PUSH
28118: LD_INT 4
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 2
28127: NEG
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 4
28138: NEG
28139: PUSH
28140: LD_INT 0
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 4
28149: NEG
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 3
28161: NEG
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 3
28172: NEG
28173: PUSH
28174: LD_INT 1
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 4
28183: NEG
28184: PUSH
28185: LD_INT 1
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 5
28194: NEG
28195: PUSH
28196: LD_INT 0
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 5
28205: NEG
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 5
28217: NEG
28218: PUSH
28219: LD_INT 2
28221: NEG
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 3
28229: NEG
28230: PUSH
28231: LD_INT 2
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 3
28240: NEG
28241: PUSH
28242: LD_INT 3
28244: NEG
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 3
28252: NEG
28253: PUSH
28254: LD_INT 4
28256: NEG
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 2
28264: NEG
28265: PUSH
28266: LD_INT 3
28268: NEG
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 2
28276: NEG
28277: PUSH
28278: LD_INT 2
28280: NEG
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 3
28288: NEG
28289: PUSH
28290: LD_INT 2
28292: NEG
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 4
28300: NEG
28301: PUSH
28302: LD_INT 3
28304: NEG
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 4
28312: NEG
28313: PUSH
28314: LD_INT 4
28316: NEG
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 2
28324: NEG
28325: PUSH
28326: LD_INT 4
28328: NEG
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 4
28336: NEG
28337: PUSH
28338: LD_INT 2
28340: NEG
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: LD_INT 4
28351: NEG
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: LD_INT 5
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: LD_INT 4
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 1
28381: PUSH
28382: LD_INT 3
28384: NEG
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 0
28392: PUSH
28393: LD_INT 3
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 1
28403: NEG
28404: PUSH
28405: LD_INT 4
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 1
28415: NEG
28416: PUSH
28417: LD_INT 5
28419: NEG
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 2
28427: PUSH
28428: LD_INT 3
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 2
28438: NEG
28439: PUSH
28440: LD_INT 5
28442: NEG
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
28495: LD_ADDR_VAR 0 31
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: LD_INT 4
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: LD_INT 3
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: LD_INT 4
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: LD_INT 5
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 0
28542: PUSH
28543: LD_INT 5
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: NEG
28553: PUSH
28554: LD_INT 4
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: NEG
28564: PUSH
28565: LD_INT 3
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 2
28574: PUSH
28575: LD_INT 5
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 2
28584: NEG
28585: PUSH
28586: LD_INT 3
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 3
28595: NEG
28596: PUSH
28597: LD_INT 0
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 3
28606: NEG
28607: PUSH
28608: LD_INT 1
28610: NEG
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 2
28618: NEG
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 2
28629: NEG
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 3
28640: NEG
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 4
28651: NEG
28652: PUSH
28653: LD_INT 0
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 4
28662: NEG
28663: PUSH
28664: LD_INT 1
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 4
28674: NEG
28675: PUSH
28676: LD_INT 2
28678: NEG
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 2
28686: NEG
28687: PUSH
28688: LD_INT 2
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 4
28697: NEG
28698: PUSH
28699: LD_INT 4
28701: NEG
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 4
28709: NEG
28710: PUSH
28711: LD_INT 5
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 3
28721: NEG
28722: PUSH
28723: LD_INT 4
28725: NEG
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 3
28733: NEG
28734: PUSH
28735: LD_INT 3
28737: NEG
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 4
28745: NEG
28746: PUSH
28747: LD_INT 3
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 5
28757: NEG
28758: PUSH
28759: LD_INT 4
28761: NEG
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 5
28769: NEG
28770: PUSH
28771: LD_INT 5
28773: NEG
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 3
28781: NEG
28782: PUSH
28783: LD_INT 5
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 5
28793: NEG
28794: PUSH
28795: LD_INT 3
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: LD_INT 3
28808: NEG
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 0
28816: PUSH
28817: LD_INT 4
28819: NEG
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: LD_INT 3
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: LD_INT 2
28841: NEG
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: LD_INT 2
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 1
28860: NEG
28861: PUSH
28862: LD_INT 3
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 1
28872: NEG
28873: PUSH
28874: LD_INT 4
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 2
28884: PUSH
28885: LD_INT 2
28887: NEG
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 2
28895: NEG
28896: PUSH
28897: LD_INT 4
28899: NEG
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 4
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 4
28917: PUSH
28918: LD_INT 1
28920: NEG
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 5
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 5
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 4
28948: PUSH
28949: LD_INT 1
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 3
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 3
28968: PUSH
28969: LD_INT 1
28971: NEG
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 3
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 5
28990: PUSH
28991: LD_INT 2
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
29045: LD_ADDR_VAR 0 32
29049: PUSH
29050: LD_INT 4
29052: NEG
29053: PUSH
29054: LD_INT 0
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 4
29063: NEG
29064: PUSH
29065: LD_INT 1
29067: NEG
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 3
29075: NEG
29076: PUSH
29077: LD_INT 0
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 3
29086: NEG
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 4
29097: NEG
29098: PUSH
29099: LD_INT 1
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 5
29108: NEG
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 5
29119: NEG
29120: PUSH
29121: LD_INT 1
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 5
29131: NEG
29132: PUSH
29133: LD_INT 2
29135: NEG
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 3
29143: NEG
29144: PUSH
29145: LD_INT 2
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 3
29154: NEG
29155: PUSH
29156: LD_INT 3
29158: NEG
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 3
29166: NEG
29167: PUSH
29168: LD_INT 4
29170: NEG
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 2
29178: NEG
29179: PUSH
29180: LD_INT 3
29182: NEG
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 2
29190: NEG
29191: PUSH
29192: LD_INT 2
29194: NEG
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 3
29202: NEG
29203: PUSH
29204: LD_INT 2
29206: NEG
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 4
29214: NEG
29215: PUSH
29216: LD_INT 3
29218: NEG
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 4
29226: NEG
29227: PUSH
29228: LD_INT 4
29230: NEG
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 2
29238: NEG
29239: PUSH
29240: LD_INT 4
29242: NEG
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 4
29250: NEG
29251: PUSH
29252: LD_INT 2
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: LD_INT 4
29265: NEG
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 0
29273: PUSH
29274: LD_INT 5
29276: NEG
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 1
29284: PUSH
29285: LD_INT 4
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 1
29295: PUSH
29296: LD_INT 3
29298: NEG
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 0
29306: PUSH
29307: LD_INT 3
29309: NEG
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 1
29317: NEG
29318: PUSH
29319: LD_INT 4
29321: NEG
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 1
29329: NEG
29330: PUSH
29331: LD_INT 5
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 2
29341: PUSH
29342: LD_INT 3
29344: NEG
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 2
29352: NEG
29353: PUSH
29354: LD_INT 5
29356: NEG
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 3
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 3
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 4
29385: PUSH
29386: LD_INT 0
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 4
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 3
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 2
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 2
29425: PUSH
29426: LD_INT 1
29428: NEG
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 2
29436: PUSH
29437: LD_INT 2
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 4
29447: PUSH
29448: LD_INT 2
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 4
29457: PUSH
29458: LD_INT 4
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 4
29467: PUSH
29468: LD_INT 3
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 5
29477: PUSH
29478: LD_INT 4
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 5
29487: PUSH
29488: LD_INT 5
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 4
29497: PUSH
29498: LD_INT 5
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 3
29507: PUSH
29508: LD_INT 4
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 3
29517: PUSH
29518: LD_INT 3
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 5
29527: PUSH
29528: LD_INT 3
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 3
29537: PUSH
29538: LD_INT 5
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
29592: LD_ADDR_VAR 0 33
29596: PUSH
29597: LD_INT 4
29599: NEG
29600: PUSH
29601: LD_INT 4
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 4
29611: NEG
29612: PUSH
29613: LD_INT 5
29615: NEG
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 3
29623: NEG
29624: PUSH
29625: LD_INT 4
29627: NEG
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 3
29635: NEG
29636: PUSH
29637: LD_INT 3
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 4
29647: NEG
29648: PUSH
29649: LD_INT 3
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 5
29659: NEG
29660: PUSH
29661: LD_INT 4
29663: NEG
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 5
29671: NEG
29672: PUSH
29673: LD_INT 5
29675: NEG
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 3
29683: NEG
29684: PUSH
29685: LD_INT 5
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 5
29695: NEG
29696: PUSH
29697: LD_INT 3
29699: NEG
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: LD_INT 3
29710: NEG
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 0
29718: PUSH
29719: LD_INT 4
29721: NEG
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 1
29729: PUSH
29730: LD_INT 3
29732: NEG
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 1
29740: PUSH
29741: LD_INT 2
29743: NEG
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: LD_INT 2
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 1
29762: NEG
29763: PUSH
29764: LD_INT 3
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 1
29774: NEG
29775: PUSH
29776: LD_INT 4
29778: NEG
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 2
29786: PUSH
29787: LD_INT 2
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 2
29797: NEG
29798: PUSH
29799: LD_INT 4
29801: NEG
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 4
29809: PUSH
29810: LD_INT 0
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 4
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 5
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 5
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 4
29850: PUSH
29851: LD_INT 1
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 3
29860: PUSH
29861: LD_INT 0
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 3
29870: PUSH
29871: LD_INT 1
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 3
29881: PUSH
29882: LD_INT 2
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 5
29892: PUSH
29893: LD_INT 2
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 3
29902: PUSH
29903: LD_INT 3
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 3
29912: PUSH
29913: LD_INT 2
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 4
29922: PUSH
29923: LD_INT 3
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 4
29932: PUSH
29933: LD_INT 4
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 3
29942: PUSH
29943: LD_INT 4
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 2
29952: PUSH
29953: LD_INT 3
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 2
29962: PUSH
29963: LD_INT 2
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 4
29972: PUSH
29973: LD_INT 2
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 2
29982: PUSH
29983: LD_INT 4
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 0
29992: PUSH
29993: LD_INT 4
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 0
30002: PUSH
30003: LD_INT 3
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 1
30012: PUSH
30013: LD_INT 4
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 1
30022: PUSH
30023: LD_INT 5
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 0
30032: PUSH
30033: LD_INT 5
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 1
30042: NEG
30043: PUSH
30044: LD_INT 4
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 1
30053: NEG
30054: PUSH
30055: LD_INT 3
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 2
30064: PUSH
30065: LD_INT 5
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 2
30074: NEG
30075: PUSH
30076: LD_INT 3
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
30130: LD_ADDR_VAR 0 34
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: LD_INT 4
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: LD_INT 5
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: PUSH
30160: LD_INT 4
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: LD_INT 3
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: LD_INT 3
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 1
30192: NEG
30193: PUSH
30194: LD_INT 4
30196: NEG
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 1
30204: NEG
30205: PUSH
30206: LD_INT 5
30208: NEG
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 2
30216: PUSH
30217: LD_INT 3
30219: NEG
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 2
30227: NEG
30228: PUSH
30229: LD_INT 5
30231: NEG
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 3
30239: PUSH
30240: LD_INT 0
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 3
30249: PUSH
30250: LD_INT 1
30252: NEG
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 4
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 4
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 3
30280: PUSH
30281: LD_INT 1
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 2
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 2
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 2
30311: PUSH
30312: LD_INT 2
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 4
30322: PUSH
30323: LD_INT 2
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 4
30332: PUSH
30333: LD_INT 4
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 4
30342: PUSH
30343: LD_INT 3
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 5
30352: PUSH
30353: LD_INT 4
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 5
30362: PUSH
30363: LD_INT 5
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 4
30372: PUSH
30373: LD_INT 5
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 3
30382: PUSH
30383: LD_INT 4
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 3
30392: PUSH
30393: LD_INT 3
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 5
30402: PUSH
30403: LD_INT 3
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 3
30412: PUSH
30413: LD_INT 5
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: LD_INT 3
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 0
30432: PUSH
30433: LD_INT 2
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 1
30442: PUSH
30443: LD_INT 3
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 1
30452: PUSH
30453: LD_INT 4
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 0
30462: PUSH
30463: LD_INT 4
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 1
30472: NEG
30473: PUSH
30474: LD_INT 3
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 1
30483: NEG
30484: PUSH
30485: LD_INT 2
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: LD_INT 4
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 2
30504: NEG
30505: PUSH
30506: LD_INT 2
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 4
30515: NEG
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 4
30526: NEG
30527: PUSH
30528: LD_INT 1
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 3
30538: NEG
30539: PUSH
30540: LD_INT 0
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 3
30549: NEG
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 4
30560: NEG
30561: PUSH
30562: LD_INT 1
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 5
30571: NEG
30572: PUSH
30573: LD_INT 0
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 5
30582: NEG
30583: PUSH
30584: LD_INT 1
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 5
30594: NEG
30595: PUSH
30596: LD_INT 2
30598: NEG
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 3
30606: NEG
30607: PUSH
30608: LD_INT 2
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: ST_TO_ADDR
// end ; end ;
30662: GO 30665
30664: POP
// case btype of b_depot , b_warehouse :
30665: LD_VAR 0 1
30669: PUSH
30670: LD_INT 0
30672: DOUBLE
30673: EQUAL
30674: IFTRUE 30684
30676: LD_INT 1
30678: DOUBLE
30679: EQUAL
30680: IFTRUE 30684
30682: GO 30885
30684: POP
// case nation of nation_american :
30685: LD_VAR 0 5
30689: PUSH
30690: LD_INT 1
30692: DOUBLE
30693: EQUAL
30694: IFTRUE 30698
30696: GO 30754
30698: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
30699: LD_ADDR_VAR 0 9
30703: PUSH
30704: LD_VAR 0 11
30708: PUSH
30709: LD_VAR 0 12
30713: PUSH
30714: LD_VAR 0 13
30718: PUSH
30719: LD_VAR 0 14
30723: PUSH
30724: LD_VAR 0 15
30728: PUSH
30729: LD_VAR 0 16
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: PUSH
30742: LD_VAR 0 4
30746: PUSH
30747: LD_INT 1
30749: PLUS
30750: ARRAY
30751: ST_TO_ADDR
30752: GO 30883
30754: LD_INT 2
30756: DOUBLE
30757: EQUAL
30758: IFTRUE 30762
30760: GO 30818
30762: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
30763: LD_ADDR_VAR 0 9
30767: PUSH
30768: LD_VAR 0 17
30772: PUSH
30773: LD_VAR 0 18
30777: PUSH
30778: LD_VAR 0 19
30782: PUSH
30783: LD_VAR 0 20
30787: PUSH
30788: LD_VAR 0 21
30792: PUSH
30793: LD_VAR 0 22
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: PUSH
30806: LD_VAR 0 4
30810: PUSH
30811: LD_INT 1
30813: PLUS
30814: ARRAY
30815: ST_TO_ADDR
30816: GO 30883
30818: LD_INT 3
30820: DOUBLE
30821: EQUAL
30822: IFTRUE 30826
30824: GO 30882
30826: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
30827: LD_ADDR_VAR 0 9
30831: PUSH
30832: LD_VAR 0 23
30836: PUSH
30837: LD_VAR 0 24
30841: PUSH
30842: LD_VAR 0 25
30846: PUSH
30847: LD_VAR 0 26
30851: PUSH
30852: LD_VAR 0 27
30856: PUSH
30857: LD_VAR 0 28
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: PUSH
30870: LD_VAR 0 4
30874: PUSH
30875: LD_INT 1
30877: PLUS
30878: ARRAY
30879: ST_TO_ADDR
30880: GO 30883
30882: POP
30883: GO 31432
30885: LD_INT 2
30887: DOUBLE
30888: EQUAL
30889: IFTRUE 30899
30891: LD_INT 3
30893: DOUBLE
30894: EQUAL
30895: IFTRUE 30899
30897: GO 30955
30899: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
30900: LD_ADDR_VAR 0 9
30904: PUSH
30905: LD_VAR 0 29
30909: PUSH
30910: LD_VAR 0 30
30914: PUSH
30915: LD_VAR 0 31
30919: PUSH
30920: LD_VAR 0 32
30924: PUSH
30925: LD_VAR 0 33
30929: PUSH
30930: LD_VAR 0 34
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: PUSH
30943: LD_VAR 0 4
30947: PUSH
30948: LD_INT 1
30950: PLUS
30951: ARRAY
30952: ST_TO_ADDR
30953: GO 31432
30955: LD_INT 16
30957: DOUBLE
30958: EQUAL
30959: IFTRUE 31011
30961: LD_INT 17
30963: DOUBLE
30964: EQUAL
30965: IFTRUE 31011
30967: LD_INT 18
30969: DOUBLE
30970: EQUAL
30971: IFTRUE 31011
30973: LD_INT 19
30975: DOUBLE
30976: EQUAL
30977: IFTRUE 31011
30979: LD_INT 20
30981: DOUBLE
30982: EQUAL
30983: IFTRUE 31011
30985: LD_INT 21
30987: DOUBLE
30988: EQUAL
30989: IFTRUE 31011
30991: LD_INT 23
30993: DOUBLE
30994: EQUAL
30995: IFTRUE 31011
30997: LD_INT 24
30999: DOUBLE
31000: EQUAL
31001: IFTRUE 31011
31003: LD_INT 25
31005: DOUBLE
31006: EQUAL
31007: IFTRUE 31011
31009: GO 31067
31011: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
31012: LD_ADDR_VAR 0 9
31016: PUSH
31017: LD_VAR 0 35
31021: PUSH
31022: LD_VAR 0 36
31026: PUSH
31027: LD_VAR 0 37
31031: PUSH
31032: LD_VAR 0 38
31036: PUSH
31037: LD_VAR 0 39
31041: PUSH
31042: LD_VAR 0 40
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: PUSH
31055: LD_VAR 0 4
31059: PUSH
31060: LD_INT 1
31062: PLUS
31063: ARRAY
31064: ST_TO_ADDR
31065: GO 31432
31067: LD_INT 6
31069: DOUBLE
31070: EQUAL
31071: IFTRUE 31123
31073: LD_INT 7
31075: DOUBLE
31076: EQUAL
31077: IFTRUE 31123
31079: LD_INT 8
31081: DOUBLE
31082: EQUAL
31083: IFTRUE 31123
31085: LD_INT 13
31087: DOUBLE
31088: EQUAL
31089: IFTRUE 31123
31091: LD_INT 12
31093: DOUBLE
31094: EQUAL
31095: IFTRUE 31123
31097: LD_INT 15
31099: DOUBLE
31100: EQUAL
31101: IFTRUE 31123
31103: LD_INT 11
31105: DOUBLE
31106: EQUAL
31107: IFTRUE 31123
31109: LD_INT 14
31111: DOUBLE
31112: EQUAL
31113: IFTRUE 31123
31115: LD_INT 10
31117: DOUBLE
31118: EQUAL
31119: IFTRUE 31123
31121: GO 31179
31123: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
31124: LD_ADDR_VAR 0 9
31128: PUSH
31129: LD_VAR 0 41
31133: PUSH
31134: LD_VAR 0 42
31138: PUSH
31139: LD_VAR 0 43
31143: PUSH
31144: LD_VAR 0 44
31148: PUSH
31149: LD_VAR 0 45
31153: PUSH
31154: LD_VAR 0 46
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: PUSH
31167: LD_VAR 0 4
31171: PUSH
31172: LD_INT 1
31174: PLUS
31175: ARRAY
31176: ST_TO_ADDR
31177: GO 31432
31179: LD_INT 36
31181: DOUBLE
31182: EQUAL
31183: IFTRUE 31187
31185: GO 31243
31187: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
31188: LD_ADDR_VAR 0 9
31192: PUSH
31193: LD_VAR 0 47
31197: PUSH
31198: LD_VAR 0 48
31202: PUSH
31203: LD_VAR 0 49
31207: PUSH
31208: LD_VAR 0 50
31212: PUSH
31213: LD_VAR 0 51
31217: PUSH
31218: LD_VAR 0 52
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: PUSH
31231: LD_VAR 0 4
31235: PUSH
31236: LD_INT 1
31238: PLUS
31239: ARRAY
31240: ST_TO_ADDR
31241: GO 31432
31243: LD_INT 4
31245: DOUBLE
31246: EQUAL
31247: IFTRUE 31269
31249: LD_INT 5
31251: DOUBLE
31252: EQUAL
31253: IFTRUE 31269
31255: LD_INT 34
31257: DOUBLE
31258: EQUAL
31259: IFTRUE 31269
31261: LD_INT 37
31263: DOUBLE
31264: EQUAL
31265: IFTRUE 31269
31267: GO 31325
31269: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
31270: LD_ADDR_VAR 0 9
31274: PUSH
31275: LD_VAR 0 53
31279: PUSH
31280: LD_VAR 0 54
31284: PUSH
31285: LD_VAR 0 55
31289: PUSH
31290: LD_VAR 0 56
31294: PUSH
31295: LD_VAR 0 57
31299: PUSH
31300: LD_VAR 0 58
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: PUSH
31313: LD_VAR 0 4
31317: PUSH
31318: LD_INT 1
31320: PLUS
31321: ARRAY
31322: ST_TO_ADDR
31323: GO 31432
31325: LD_INT 31
31327: DOUBLE
31328: EQUAL
31329: IFTRUE 31375
31331: LD_INT 32
31333: DOUBLE
31334: EQUAL
31335: IFTRUE 31375
31337: LD_INT 33
31339: DOUBLE
31340: EQUAL
31341: IFTRUE 31375
31343: LD_INT 27
31345: DOUBLE
31346: EQUAL
31347: IFTRUE 31375
31349: LD_INT 26
31351: DOUBLE
31352: EQUAL
31353: IFTRUE 31375
31355: LD_INT 28
31357: DOUBLE
31358: EQUAL
31359: IFTRUE 31375
31361: LD_INT 29
31363: DOUBLE
31364: EQUAL
31365: IFTRUE 31375
31367: LD_INT 30
31369: DOUBLE
31370: EQUAL
31371: IFTRUE 31375
31373: GO 31431
31375: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
31376: LD_ADDR_VAR 0 9
31380: PUSH
31381: LD_VAR 0 59
31385: PUSH
31386: LD_VAR 0 60
31390: PUSH
31391: LD_VAR 0 61
31395: PUSH
31396: LD_VAR 0 62
31400: PUSH
31401: LD_VAR 0 63
31405: PUSH
31406: LD_VAR 0 64
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: PUSH
31419: LD_VAR 0 4
31423: PUSH
31424: LD_INT 1
31426: PLUS
31427: ARRAY
31428: ST_TO_ADDR
31429: GO 31432
31431: POP
// temp_list2 = [ ] ;
31432: LD_ADDR_VAR 0 10
31436: PUSH
31437: EMPTY
31438: ST_TO_ADDR
// for i in temp_list do
31439: LD_ADDR_VAR 0 8
31443: PUSH
31444: LD_VAR 0 9
31448: PUSH
31449: FOR_IN
31450: IFFALSE 31502
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
31452: LD_ADDR_VAR 0 10
31456: PUSH
31457: LD_VAR 0 10
31461: PUSH
31462: LD_VAR 0 8
31466: PUSH
31467: LD_INT 1
31469: ARRAY
31470: PUSH
31471: LD_VAR 0 2
31475: PLUS
31476: PUSH
31477: LD_VAR 0 8
31481: PUSH
31482: LD_INT 2
31484: ARRAY
31485: PUSH
31486: LD_VAR 0 3
31490: PLUS
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: EMPTY
31497: LIST
31498: ADD
31499: ST_TO_ADDR
31500: GO 31449
31502: POP
31503: POP
// result = temp_list2 ;
31504: LD_ADDR_VAR 0 7
31508: PUSH
31509: LD_VAR 0 10
31513: ST_TO_ADDR
// end ;
31514: LD_VAR 0 7
31518: RET
// export function EnemyInRange ( unit , dist ) ; begin
31519: LD_INT 0
31521: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
31522: LD_ADDR_VAR 0 3
31526: PUSH
31527: LD_VAR 0 1
31531: PPUSH
31532: CALL_OW 255
31536: PPUSH
31537: LD_VAR 0 1
31541: PPUSH
31542: CALL_OW 250
31546: PPUSH
31547: LD_VAR 0 1
31551: PPUSH
31552: CALL_OW 251
31556: PPUSH
31557: LD_VAR 0 2
31561: PPUSH
31562: CALL 6842 0 4
31566: PUSH
31567: LD_INT 4
31569: ARRAY
31570: ST_TO_ADDR
// end ;
31571: LD_VAR 0 3
31575: RET
// export function PlayerSeeMe ( unit ) ; begin
31576: LD_INT 0
31578: PPUSH
// result := See ( your_side , unit ) ;
31579: LD_ADDR_VAR 0 2
31583: PUSH
31584: LD_OWVAR 2
31588: PPUSH
31589: LD_VAR 0 1
31593: PPUSH
31594: CALL_OW 292
31598: ST_TO_ADDR
// end ;
31599: LD_VAR 0 2
31603: RET
// export function ReverseDir ( unit ) ; begin
31604: LD_INT 0
31606: PPUSH
// if not unit then
31607: LD_VAR 0 1
31611: NOT
31612: IFFALSE 31616
// exit ;
31614: GO 31662
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
31616: LD_ADDR_VAR 0 2
31620: PUSH
31621: LD_INT 3
31623: PUSH
31624: LD_INT 4
31626: PUSH
31627: LD_INT 5
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: LD_INT 2
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: PUSH
31647: LD_VAR 0 1
31651: PPUSH
31652: CALL_OW 254
31656: PUSH
31657: LD_INT 1
31659: PLUS
31660: ARRAY
31661: ST_TO_ADDR
// end ;
31662: LD_VAR 0 2
31666: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
31667: LD_INT 0
31669: PPUSH
31670: PPUSH
31671: PPUSH
31672: PPUSH
31673: PPUSH
// if not hexes then
31674: LD_VAR 0 2
31678: NOT
31679: IFFALSE 31683
// exit ;
31681: GO 31831
// dist := 9999 ;
31683: LD_ADDR_VAR 0 5
31687: PUSH
31688: LD_INT 9999
31690: ST_TO_ADDR
// for i = 1 to hexes do
31691: LD_ADDR_VAR 0 4
31695: PUSH
31696: DOUBLE
31697: LD_INT 1
31699: DEC
31700: ST_TO_ADDR
31701: LD_VAR 0 2
31705: PUSH
31706: FOR_TO
31707: IFFALSE 31819
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
31709: LD_VAR 0 1
31713: PPUSH
31714: LD_VAR 0 2
31718: PUSH
31719: LD_VAR 0 4
31723: ARRAY
31724: PUSH
31725: LD_INT 1
31727: ARRAY
31728: PPUSH
31729: LD_VAR 0 2
31733: PUSH
31734: LD_VAR 0 4
31738: ARRAY
31739: PUSH
31740: LD_INT 2
31742: ARRAY
31743: PPUSH
31744: CALL_OW 297
31748: PUSH
31749: LD_VAR 0 5
31753: LESS
31754: IFFALSE 31817
// begin hex := hexes [ i ] ;
31756: LD_ADDR_VAR 0 7
31760: PUSH
31761: LD_VAR 0 2
31765: PUSH
31766: LD_VAR 0 4
31770: ARRAY
31771: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31772: LD_ADDR_VAR 0 5
31776: PUSH
31777: LD_VAR 0 1
31781: PPUSH
31782: LD_VAR 0 2
31786: PUSH
31787: LD_VAR 0 4
31791: ARRAY
31792: PUSH
31793: LD_INT 1
31795: ARRAY
31796: PPUSH
31797: LD_VAR 0 2
31801: PUSH
31802: LD_VAR 0 4
31806: ARRAY
31807: PUSH
31808: LD_INT 2
31810: ARRAY
31811: PPUSH
31812: CALL_OW 297
31816: ST_TO_ADDR
// end ; end ;
31817: GO 31706
31819: POP
31820: POP
// result := hex ;
31821: LD_ADDR_VAR 0 3
31825: PUSH
31826: LD_VAR 0 7
31830: ST_TO_ADDR
// end ;
31831: LD_VAR 0 3
31835: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
31836: LD_INT 0
31838: PPUSH
31839: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
31840: LD_VAR 0 1
31844: NOT
31845: PUSH
31846: LD_VAR 0 1
31850: PUSH
31851: LD_INT 21
31853: PUSH
31854: LD_INT 2
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 23
31863: PUSH
31864: LD_INT 2
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PPUSH
31875: CALL_OW 69
31879: IN
31880: NOT
31881: OR
31882: IFFALSE 31886
// exit ;
31884: GO 31933
// for i = 1 to 3 do
31886: LD_ADDR_VAR 0 3
31890: PUSH
31891: DOUBLE
31892: LD_INT 1
31894: DEC
31895: ST_TO_ADDR
31896: LD_INT 3
31898: PUSH
31899: FOR_TO
31900: IFFALSE 31931
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
31902: LD_VAR 0 1
31906: PPUSH
31907: CALL_OW 250
31911: PPUSH
31912: LD_VAR 0 1
31916: PPUSH
31917: CALL_OW 251
31921: PPUSH
31922: LD_INT 1
31924: PPUSH
31925: CALL_OW 453
31929: GO 31899
31931: POP
31932: POP
// end ;
31933: LD_VAR 0 2
31937: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
31938: LD_INT 0
31940: PPUSH
31941: PPUSH
31942: PPUSH
31943: PPUSH
31944: PPUSH
31945: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
31946: LD_VAR 0 1
31950: NOT
31951: PUSH
31952: LD_VAR 0 2
31956: NOT
31957: OR
31958: PUSH
31959: LD_VAR 0 1
31963: PPUSH
31964: CALL_OW 314
31968: OR
31969: IFFALSE 31973
// exit ;
31971: GO 32414
// x := GetX ( enemy_unit ) ;
31973: LD_ADDR_VAR 0 7
31977: PUSH
31978: LD_VAR 0 2
31982: PPUSH
31983: CALL_OW 250
31987: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
31988: LD_ADDR_VAR 0 8
31992: PUSH
31993: LD_VAR 0 2
31997: PPUSH
31998: CALL_OW 251
32002: ST_TO_ADDR
// if not x or not y then
32003: LD_VAR 0 7
32007: NOT
32008: PUSH
32009: LD_VAR 0 8
32013: NOT
32014: OR
32015: IFFALSE 32019
// exit ;
32017: GO 32414
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
32019: LD_ADDR_VAR 0 6
32023: PUSH
32024: LD_VAR 0 7
32028: PPUSH
32029: LD_INT 0
32031: PPUSH
32032: LD_INT 4
32034: PPUSH
32035: CALL_OW 272
32039: PUSH
32040: LD_VAR 0 8
32044: PPUSH
32045: LD_INT 0
32047: PPUSH
32048: LD_INT 4
32050: PPUSH
32051: CALL_OW 273
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_VAR 0 7
32064: PPUSH
32065: LD_INT 1
32067: PPUSH
32068: LD_INT 4
32070: PPUSH
32071: CALL_OW 272
32075: PUSH
32076: LD_VAR 0 8
32080: PPUSH
32081: LD_INT 1
32083: PPUSH
32084: LD_INT 4
32086: PPUSH
32087: CALL_OW 273
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_VAR 0 7
32100: PPUSH
32101: LD_INT 2
32103: PPUSH
32104: LD_INT 4
32106: PPUSH
32107: CALL_OW 272
32111: PUSH
32112: LD_VAR 0 8
32116: PPUSH
32117: LD_INT 2
32119: PPUSH
32120: LD_INT 4
32122: PPUSH
32123: CALL_OW 273
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_VAR 0 7
32136: PPUSH
32137: LD_INT 3
32139: PPUSH
32140: LD_INT 4
32142: PPUSH
32143: CALL_OW 272
32147: PUSH
32148: LD_VAR 0 8
32152: PPUSH
32153: LD_INT 3
32155: PPUSH
32156: LD_INT 4
32158: PPUSH
32159: CALL_OW 273
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_VAR 0 7
32172: PPUSH
32173: LD_INT 4
32175: PPUSH
32176: LD_INT 4
32178: PPUSH
32179: CALL_OW 272
32183: PUSH
32184: LD_VAR 0 8
32188: PPUSH
32189: LD_INT 4
32191: PPUSH
32192: LD_INT 4
32194: PPUSH
32195: CALL_OW 273
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_VAR 0 7
32208: PPUSH
32209: LD_INT 5
32211: PPUSH
32212: LD_INT 4
32214: PPUSH
32215: CALL_OW 272
32219: PUSH
32220: LD_VAR 0 8
32224: PPUSH
32225: LD_INT 5
32227: PPUSH
32228: LD_INT 4
32230: PPUSH
32231: CALL_OW 273
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: ST_TO_ADDR
// for i = tmp downto 1 do
32248: LD_ADDR_VAR 0 4
32252: PUSH
32253: DOUBLE
32254: LD_VAR 0 6
32258: INC
32259: ST_TO_ADDR
32260: LD_INT 1
32262: PUSH
32263: FOR_DOWNTO
32264: IFFALSE 32365
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
32266: LD_VAR 0 6
32270: PUSH
32271: LD_VAR 0 4
32275: ARRAY
32276: PUSH
32277: LD_INT 1
32279: ARRAY
32280: PPUSH
32281: LD_VAR 0 6
32285: PUSH
32286: LD_VAR 0 4
32290: ARRAY
32291: PUSH
32292: LD_INT 2
32294: ARRAY
32295: PPUSH
32296: CALL_OW 488
32300: NOT
32301: PUSH
32302: LD_VAR 0 6
32306: PUSH
32307: LD_VAR 0 4
32311: ARRAY
32312: PUSH
32313: LD_INT 1
32315: ARRAY
32316: PPUSH
32317: LD_VAR 0 6
32321: PUSH
32322: LD_VAR 0 4
32326: ARRAY
32327: PUSH
32328: LD_INT 2
32330: ARRAY
32331: PPUSH
32332: CALL_OW 428
32336: PUSH
32337: LD_INT 0
32339: NONEQUAL
32340: OR
32341: IFFALSE 32363
// tmp := Delete ( tmp , i ) ;
32343: LD_ADDR_VAR 0 6
32347: PUSH
32348: LD_VAR 0 6
32352: PPUSH
32353: LD_VAR 0 4
32357: PPUSH
32358: CALL_OW 3
32362: ST_TO_ADDR
32363: GO 32263
32365: POP
32366: POP
// j := GetClosestHex ( unit , tmp ) ;
32367: LD_ADDR_VAR 0 5
32371: PUSH
32372: LD_VAR 0 1
32376: PPUSH
32377: LD_VAR 0 6
32381: PPUSH
32382: CALL 31667 0 2
32386: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
32387: LD_VAR 0 1
32391: PPUSH
32392: LD_VAR 0 5
32396: PUSH
32397: LD_INT 1
32399: ARRAY
32400: PPUSH
32401: LD_VAR 0 5
32405: PUSH
32406: LD_INT 2
32408: ARRAY
32409: PPUSH
32410: CALL_OW 111
// end ;
32414: LD_VAR 0 3
32418: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
32419: LD_INT 0
32421: PPUSH
32422: PPUSH
32423: PPUSH
// uc_side = 0 ;
32424: LD_ADDR_OWVAR 20
32428: PUSH
32429: LD_INT 0
32431: ST_TO_ADDR
// uc_nation = 0 ;
32432: LD_ADDR_OWVAR 21
32436: PUSH
32437: LD_INT 0
32439: ST_TO_ADDR
// InitHc ;
32440: CALL_OW 19
// InitVc ;
32444: CALL_OW 20
// if mastodonts then
32448: LD_VAR 0 6
32452: IFFALSE 32519
// for i = 1 to mastodonts do
32454: LD_ADDR_VAR 0 11
32458: PUSH
32459: DOUBLE
32460: LD_INT 1
32462: DEC
32463: ST_TO_ADDR
32464: LD_VAR 0 6
32468: PUSH
32469: FOR_TO
32470: IFFALSE 32517
// begin vc_chassis := 31 ;
32472: LD_ADDR_OWVAR 37
32476: PUSH
32477: LD_INT 31
32479: ST_TO_ADDR
// vc_control := control_rider ;
32480: LD_ADDR_OWVAR 38
32484: PUSH
32485: LD_INT 4
32487: ST_TO_ADDR
// animal := CreateVehicle ;
32488: LD_ADDR_VAR 0 12
32492: PUSH
32493: CALL_OW 45
32497: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
32498: LD_VAR 0 12
32502: PPUSH
32503: LD_VAR 0 8
32507: PPUSH
32508: LD_INT 0
32510: PPUSH
32511: CALL_OW 49
// end ;
32515: GO 32469
32517: POP
32518: POP
// if horses then
32519: LD_VAR 0 5
32523: IFFALSE 32590
// for i = 1 to horses do
32525: LD_ADDR_VAR 0 11
32529: PUSH
32530: DOUBLE
32531: LD_INT 1
32533: DEC
32534: ST_TO_ADDR
32535: LD_VAR 0 5
32539: PUSH
32540: FOR_TO
32541: IFFALSE 32588
// begin hc_class := 21 ;
32543: LD_ADDR_OWVAR 28
32547: PUSH
32548: LD_INT 21
32550: ST_TO_ADDR
// hc_gallery :=  ;
32551: LD_ADDR_OWVAR 33
32555: PUSH
32556: LD_STRING 
32558: ST_TO_ADDR
// animal := CreateHuman ;
32559: LD_ADDR_VAR 0 12
32563: PUSH
32564: CALL_OW 44
32568: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
32569: LD_VAR 0 12
32573: PPUSH
32574: LD_VAR 0 8
32578: PPUSH
32579: LD_INT 0
32581: PPUSH
32582: CALL_OW 49
// end ;
32586: GO 32540
32588: POP
32589: POP
// if birds then
32590: LD_VAR 0 1
32594: IFFALSE 32661
// for i = 1 to birds do
32596: LD_ADDR_VAR 0 11
32600: PUSH
32601: DOUBLE
32602: LD_INT 1
32604: DEC
32605: ST_TO_ADDR
32606: LD_VAR 0 1
32610: PUSH
32611: FOR_TO
32612: IFFALSE 32659
// begin hc_class = 18 ;
32614: LD_ADDR_OWVAR 28
32618: PUSH
32619: LD_INT 18
32621: ST_TO_ADDR
// hc_gallery =  ;
32622: LD_ADDR_OWVAR 33
32626: PUSH
32627: LD_STRING 
32629: ST_TO_ADDR
// animal := CreateHuman ;
32630: LD_ADDR_VAR 0 12
32634: PUSH
32635: CALL_OW 44
32639: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
32640: LD_VAR 0 12
32644: PPUSH
32645: LD_VAR 0 8
32649: PPUSH
32650: LD_INT 0
32652: PPUSH
32653: CALL_OW 49
// end ;
32657: GO 32611
32659: POP
32660: POP
// if tigers then
32661: LD_VAR 0 2
32665: IFFALSE 32749
// for i = 1 to tigers do
32667: LD_ADDR_VAR 0 11
32671: PUSH
32672: DOUBLE
32673: LD_INT 1
32675: DEC
32676: ST_TO_ADDR
32677: LD_VAR 0 2
32681: PUSH
32682: FOR_TO
32683: IFFALSE 32747
// begin hc_class = class_tiger ;
32685: LD_ADDR_OWVAR 28
32689: PUSH
32690: LD_INT 14
32692: ST_TO_ADDR
// hc_gallery =  ;
32693: LD_ADDR_OWVAR 33
32697: PUSH
32698: LD_STRING 
32700: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
32701: LD_ADDR_OWVAR 35
32705: PUSH
32706: LD_INT 7
32708: NEG
32709: PPUSH
32710: LD_INT 7
32712: PPUSH
32713: CALL_OW 12
32717: ST_TO_ADDR
// animal := CreateHuman ;
32718: LD_ADDR_VAR 0 12
32722: PUSH
32723: CALL_OW 44
32727: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
32728: LD_VAR 0 12
32732: PPUSH
32733: LD_VAR 0 8
32737: PPUSH
32738: LD_INT 0
32740: PPUSH
32741: CALL_OW 49
// end ;
32745: GO 32682
32747: POP
32748: POP
// if apemans then
32749: LD_VAR 0 3
32753: IFFALSE 32876
// for i = 1 to apemans do
32755: LD_ADDR_VAR 0 11
32759: PUSH
32760: DOUBLE
32761: LD_INT 1
32763: DEC
32764: ST_TO_ADDR
32765: LD_VAR 0 3
32769: PUSH
32770: FOR_TO
32771: IFFALSE 32874
// begin hc_class = class_apeman ;
32773: LD_ADDR_OWVAR 28
32777: PUSH
32778: LD_INT 12
32780: ST_TO_ADDR
// hc_gallery =  ;
32781: LD_ADDR_OWVAR 33
32785: PUSH
32786: LD_STRING 
32788: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
32789: LD_ADDR_OWVAR 35
32793: PUSH
32794: LD_INT 5
32796: NEG
32797: PPUSH
32798: LD_INT 5
32800: PPUSH
32801: CALL_OW 12
32805: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
32806: LD_ADDR_OWVAR 31
32810: PUSH
32811: LD_INT 1
32813: PPUSH
32814: LD_INT 3
32816: PPUSH
32817: CALL_OW 12
32821: PUSH
32822: LD_INT 1
32824: PPUSH
32825: LD_INT 3
32827: PPUSH
32828: CALL_OW 12
32832: PUSH
32833: LD_INT 0
32835: PUSH
32836: LD_INT 0
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: ST_TO_ADDR
// animal := CreateHuman ;
32845: LD_ADDR_VAR 0 12
32849: PUSH
32850: CALL_OW 44
32854: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
32855: LD_VAR 0 12
32859: PPUSH
32860: LD_VAR 0 8
32864: PPUSH
32865: LD_INT 0
32867: PPUSH
32868: CALL_OW 49
// end ;
32872: GO 32770
32874: POP
32875: POP
// if enchidnas then
32876: LD_VAR 0 4
32880: IFFALSE 32947
// for i = 1 to enchidnas do
32882: LD_ADDR_VAR 0 11
32886: PUSH
32887: DOUBLE
32888: LD_INT 1
32890: DEC
32891: ST_TO_ADDR
32892: LD_VAR 0 4
32896: PUSH
32897: FOR_TO
32898: IFFALSE 32945
// begin hc_class = 13 ;
32900: LD_ADDR_OWVAR 28
32904: PUSH
32905: LD_INT 13
32907: ST_TO_ADDR
// hc_gallery =  ;
32908: LD_ADDR_OWVAR 33
32912: PUSH
32913: LD_STRING 
32915: ST_TO_ADDR
// animal := CreateHuman ;
32916: LD_ADDR_VAR 0 12
32920: PUSH
32921: CALL_OW 44
32925: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
32926: LD_VAR 0 12
32930: PPUSH
32931: LD_VAR 0 8
32935: PPUSH
32936: LD_INT 0
32938: PPUSH
32939: CALL_OW 49
// end ;
32943: GO 32897
32945: POP
32946: POP
// if not wat_area then
32947: LD_VAR 0 9
32951: NOT
32952: IFFALSE 32956
// exit ;
32954: GO 33027
// if fishes then
32956: LD_VAR 0 7
32960: IFFALSE 33027
// for i = 1 to fishes do
32962: LD_ADDR_VAR 0 11
32966: PUSH
32967: DOUBLE
32968: LD_INT 1
32970: DEC
32971: ST_TO_ADDR
32972: LD_VAR 0 7
32976: PUSH
32977: FOR_TO
32978: IFFALSE 33025
// begin hc_class = 20 ;
32980: LD_ADDR_OWVAR 28
32984: PUSH
32985: LD_INT 20
32987: ST_TO_ADDR
// hc_gallery =  ;
32988: LD_ADDR_OWVAR 33
32992: PUSH
32993: LD_STRING 
32995: ST_TO_ADDR
// animal := CreateHuman ;
32996: LD_ADDR_VAR 0 12
33000: PUSH
33001: CALL_OW 44
33005: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
33006: LD_VAR 0 12
33010: PPUSH
33011: LD_VAR 0 9
33015: PPUSH
33016: LD_INT 0
33018: PPUSH
33019: CALL_OW 49
// end ;
33023: GO 32977
33025: POP
33026: POP
// end ;
33027: LD_VAR 0 10
33031: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
33032: LD_INT 0
33034: PPUSH
33035: PPUSH
33036: PPUSH
33037: PPUSH
33038: PPUSH
33039: PPUSH
33040: PPUSH
33041: PPUSH
33042: PPUSH
33043: PPUSH
33044: PPUSH
33045: PPUSH
33046: PPUSH
33047: PPUSH
33048: PPUSH
33049: PPUSH
33050: PPUSH
33051: PPUSH
33052: PPUSH
33053: PPUSH
33054: PPUSH
33055: PPUSH
33056: PPUSH
33057: PPUSH
33058: PPUSH
33059: PPUSH
33060: PPUSH
33061: PPUSH
// if not list then
33062: LD_VAR 0 1
33066: NOT
33067: IFFALSE 33071
// exit ;
33069: GO 36314
// base := list [ 1 ] ;
33071: LD_ADDR_VAR 0 3
33075: PUSH
33076: LD_VAR 0 1
33080: PUSH
33081: LD_INT 1
33083: ARRAY
33084: ST_TO_ADDR
// group := list [ 2 ] ;
33085: LD_ADDR_VAR 0 4
33089: PUSH
33090: LD_VAR 0 1
33094: PUSH
33095: LD_INT 2
33097: ARRAY
33098: ST_TO_ADDR
// path := list [ 3 ] ;
33099: LD_ADDR_VAR 0 5
33103: PUSH
33104: LD_VAR 0 1
33108: PUSH
33109: LD_INT 3
33111: ARRAY
33112: ST_TO_ADDR
// flags := list [ 4 ] ;
33113: LD_ADDR_VAR 0 6
33117: PUSH
33118: LD_VAR 0 1
33122: PUSH
33123: LD_INT 4
33125: ARRAY
33126: ST_TO_ADDR
// mined := [ ] ;
33127: LD_ADDR_VAR 0 27
33131: PUSH
33132: EMPTY
33133: ST_TO_ADDR
// bombed := [ ] ;
33134: LD_ADDR_VAR 0 28
33138: PUSH
33139: EMPTY
33140: ST_TO_ADDR
// if not group or not path then
33141: LD_VAR 0 4
33145: NOT
33146: PUSH
33147: LD_VAR 0 5
33151: NOT
33152: OR
33153: IFFALSE 33157
// exit ;
33155: GO 36314
// if flags then
33157: LD_VAR 0 6
33161: IFFALSE 33305
// begin f_ignore_area := flags [ 1 ] ;
33163: LD_ADDR_VAR 0 17
33167: PUSH
33168: LD_VAR 0 6
33172: PUSH
33173: LD_INT 1
33175: ARRAY
33176: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
33177: LD_ADDR_VAR 0 18
33181: PUSH
33182: LD_VAR 0 6
33186: PUSH
33187: LD_INT 2
33189: ARRAY
33190: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
33191: LD_ADDR_VAR 0 19
33195: PUSH
33196: LD_VAR 0 6
33200: PUSH
33201: LD_INT 3
33203: ARRAY
33204: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
33205: LD_ADDR_VAR 0 20
33209: PUSH
33210: LD_VAR 0 6
33214: PUSH
33215: LD_INT 4
33217: ARRAY
33218: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
33219: LD_ADDR_VAR 0 21
33223: PUSH
33224: LD_VAR 0 6
33228: PUSH
33229: LD_INT 5
33231: ARRAY
33232: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
33233: LD_ADDR_VAR 0 22
33237: PUSH
33238: LD_VAR 0 6
33242: PUSH
33243: LD_INT 6
33245: ARRAY
33246: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
33247: LD_ADDR_VAR 0 23
33251: PUSH
33252: LD_VAR 0 6
33256: PUSH
33257: LD_INT 7
33259: ARRAY
33260: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
33261: LD_ADDR_VAR 0 24
33265: PUSH
33266: LD_VAR 0 6
33270: PUSH
33271: LD_INT 8
33273: ARRAY
33274: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
33275: LD_ADDR_VAR 0 25
33279: PUSH
33280: LD_VAR 0 6
33284: PUSH
33285: LD_INT 9
33287: ARRAY
33288: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
33289: LD_ADDR_VAR 0 26
33293: PUSH
33294: LD_VAR 0 6
33298: PUSH
33299: LD_INT 10
33301: ARRAY
33302: ST_TO_ADDR
// end else
33303: GO 33385
// begin f_ignore_area := false ;
33305: LD_ADDR_VAR 0 17
33309: PUSH
33310: LD_INT 0
33312: ST_TO_ADDR
// f_capture := false ;
33313: LD_ADDR_VAR 0 18
33317: PUSH
33318: LD_INT 0
33320: ST_TO_ADDR
// f_ignore_civ := false ;
33321: LD_ADDR_VAR 0 19
33325: PUSH
33326: LD_INT 0
33328: ST_TO_ADDR
// f_murder := false ;
33329: LD_ADDR_VAR 0 20
33333: PUSH
33334: LD_INT 0
33336: ST_TO_ADDR
// f_mines := false ;
33337: LD_ADDR_VAR 0 21
33341: PUSH
33342: LD_INT 0
33344: ST_TO_ADDR
// f_repair := false ;
33345: LD_ADDR_VAR 0 22
33349: PUSH
33350: LD_INT 0
33352: ST_TO_ADDR
// f_heal := false ;
33353: LD_ADDR_VAR 0 23
33357: PUSH
33358: LD_INT 0
33360: ST_TO_ADDR
// f_spacetime := false ;
33361: LD_ADDR_VAR 0 24
33365: PUSH
33366: LD_INT 0
33368: ST_TO_ADDR
// f_attack_depot := false ;
33369: LD_ADDR_VAR 0 25
33373: PUSH
33374: LD_INT 0
33376: ST_TO_ADDR
// f_crawl := false ;
33377: LD_ADDR_VAR 0 26
33381: PUSH
33382: LD_INT 0
33384: ST_TO_ADDR
// end ; units_path := [ ] ;
33385: LD_ADDR_VAR 0 16
33389: PUSH
33390: EMPTY
33391: ST_TO_ADDR
// for i = 1 to group do
33392: LD_ADDR_VAR 0 7
33396: PUSH
33397: DOUBLE
33398: LD_INT 1
33400: DEC
33401: ST_TO_ADDR
33402: LD_VAR 0 4
33406: PUSH
33407: FOR_TO
33408: IFFALSE 33437
// begin units_path := Replace ( units_path , i , path ) ;
33410: LD_ADDR_VAR 0 16
33414: PUSH
33415: LD_VAR 0 16
33419: PPUSH
33420: LD_VAR 0 7
33424: PPUSH
33425: LD_VAR 0 5
33429: PPUSH
33430: CALL_OW 1
33434: ST_TO_ADDR
// end ;
33435: GO 33407
33437: POP
33438: POP
// repeat for i = group downto 1 do
33439: LD_ADDR_VAR 0 7
33443: PUSH
33444: DOUBLE
33445: LD_VAR 0 4
33449: INC
33450: ST_TO_ADDR
33451: LD_INT 1
33453: PUSH
33454: FOR_DOWNTO
33455: IFFALSE 36296
// begin wait ( 0 0$1 ) ;
33457: LD_INT 35
33459: PPUSH
33460: CALL_OW 67
// tmp := [ ] ;
33464: LD_ADDR_VAR 0 14
33468: PUSH
33469: EMPTY
33470: ST_TO_ADDR
// attacking := false ;
33471: LD_ADDR_VAR 0 29
33475: PUSH
33476: LD_INT 0
33478: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
33479: LD_VAR 0 4
33483: PUSH
33484: LD_VAR 0 7
33488: ARRAY
33489: PPUSH
33490: CALL_OW 301
33494: PUSH
33495: LD_VAR 0 4
33499: PUSH
33500: LD_VAR 0 7
33504: ARRAY
33505: NOT
33506: OR
33507: IFFALSE 33551
// begin group := Delete ( group , i ) ;
33509: LD_ADDR_VAR 0 4
33513: PUSH
33514: LD_VAR 0 4
33518: PPUSH
33519: LD_VAR 0 7
33523: PPUSH
33524: CALL_OW 3
33528: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
33529: LD_ADDR_VAR 0 16
33533: PUSH
33534: LD_VAR 0 16
33538: PPUSH
33539: LD_VAR 0 7
33543: PPUSH
33544: CALL_OW 3
33548: ST_TO_ADDR
// continue ;
33549: GO 33454
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
33551: LD_VAR 0 4
33555: PUSH
33556: LD_VAR 0 7
33560: ARRAY
33561: PPUSH
33562: LD_INT 10
33564: PPUSH
33565: CALL 31519 0 2
33569: NOT
33570: PUSH
33571: LD_VAR 0 16
33575: PUSH
33576: LD_VAR 0 7
33580: ARRAY
33581: PUSH
33582: EMPTY
33583: EQUAL
33584: NOT
33585: AND
33586: IFFALSE 33852
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
33588: LD_VAR 0 4
33592: PUSH
33593: LD_VAR 0 7
33597: ARRAY
33598: PPUSH
33599: CALL_OW 262
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: LD_INT 2
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: IN
33614: IFFALSE 33655
// if GetFuel ( group [ i ] ) < 10 then
33616: LD_VAR 0 4
33620: PUSH
33621: LD_VAR 0 7
33625: ARRAY
33626: PPUSH
33627: CALL_OW 261
33631: PUSH
33632: LD_INT 10
33634: LESS
33635: IFFALSE 33655
// SetFuel ( group [ i ] , 12 ) ;
33637: LD_VAR 0 4
33641: PUSH
33642: LD_VAR 0 7
33646: ARRAY
33647: PPUSH
33648: LD_INT 12
33650: PPUSH
33651: CALL_OW 240
// if units_path [ i ] then
33655: LD_VAR 0 16
33659: PUSH
33660: LD_VAR 0 7
33664: ARRAY
33665: IFFALSE 33850
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
33667: LD_VAR 0 4
33671: PUSH
33672: LD_VAR 0 7
33676: ARRAY
33677: PPUSH
33678: LD_VAR 0 16
33682: PUSH
33683: LD_VAR 0 7
33687: ARRAY
33688: PUSH
33689: LD_INT 1
33691: ARRAY
33692: PUSH
33693: LD_INT 1
33695: ARRAY
33696: PPUSH
33697: LD_VAR 0 16
33701: PUSH
33702: LD_VAR 0 7
33706: ARRAY
33707: PUSH
33708: LD_INT 1
33710: ARRAY
33711: PUSH
33712: LD_INT 2
33714: ARRAY
33715: PPUSH
33716: CALL_OW 297
33720: PUSH
33721: LD_INT 6
33723: GREATER
33724: IFFALSE 33799
// begin if not HasTask ( group [ i ] ) then
33726: LD_VAR 0 4
33730: PUSH
33731: LD_VAR 0 7
33735: ARRAY
33736: PPUSH
33737: CALL_OW 314
33741: NOT
33742: IFFALSE 33797
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
33744: LD_VAR 0 4
33748: PUSH
33749: LD_VAR 0 7
33753: ARRAY
33754: PPUSH
33755: LD_VAR 0 16
33759: PUSH
33760: LD_VAR 0 7
33764: ARRAY
33765: PUSH
33766: LD_INT 1
33768: ARRAY
33769: PUSH
33770: LD_INT 1
33772: ARRAY
33773: PPUSH
33774: LD_VAR 0 16
33778: PUSH
33779: LD_VAR 0 7
33783: ARRAY
33784: PUSH
33785: LD_INT 1
33787: ARRAY
33788: PUSH
33789: LD_INT 2
33791: ARRAY
33792: PPUSH
33793: CALL_OW 114
// end else
33797: GO 33850
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
33799: LD_ADDR_VAR 0 15
33803: PUSH
33804: LD_VAR 0 16
33808: PUSH
33809: LD_VAR 0 7
33813: ARRAY
33814: PPUSH
33815: LD_INT 1
33817: PPUSH
33818: CALL_OW 3
33822: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
33823: LD_ADDR_VAR 0 16
33827: PUSH
33828: LD_VAR 0 16
33832: PPUSH
33833: LD_VAR 0 7
33837: PPUSH
33838: LD_VAR 0 15
33842: PPUSH
33843: CALL_OW 1
33847: ST_TO_ADDR
// continue ;
33848: GO 33454
// end ; end ; end else
33850: GO 36294
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
33852: LD_ADDR_VAR 0 14
33856: PUSH
33857: LD_INT 81
33859: PUSH
33860: LD_VAR 0 4
33864: PUSH
33865: LD_VAR 0 7
33869: ARRAY
33870: PPUSH
33871: CALL_OW 255
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PPUSH
33880: CALL_OW 69
33884: ST_TO_ADDR
// if not tmp then
33885: LD_VAR 0 14
33889: NOT
33890: IFFALSE 33894
// continue ;
33892: GO 33454
// if f_ignore_area then
33894: LD_VAR 0 17
33898: IFFALSE 33986
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
33900: LD_ADDR_VAR 0 15
33904: PUSH
33905: LD_VAR 0 14
33909: PPUSH
33910: LD_INT 3
33912: PUSH
33913: LD_INT 92
33915: PUSH
33916: LD_VAR 0 17
33920: PUSH
33921: LD_INT 1
33923: ARRAY
33924: PUSH
33925: LD_VAR 0 17
33929: PUSH
33930: LD_INT 2
33932: ARRAY
33933: PUSH
33934: LD_VAR 0 17
33938: PUSH
33939: LD_INT 3
33941: ARRAY
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PPUSH
33953: CALL_OW 72
33957: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
33958: LD_VAR 0 14
33962: PUSH
33963: LD_VAR 0 15
33967: DIFF
33968: IFFALSE 33986
// tmp := tmp diff tmp2 ;
33970: LD_ADDR_VAR 0 14
33974: PUSH
33975: LD_VAR 0 14
33979: PUSH
33980: LD_VAR 0 15
33984: DIFF
33985: ST_TO_ADDR
// end ; if not f_murder then
33986: LD_VAR 0 20
33990: NOT
33991: IFFALSE 34049
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
33993: LD_ADDR_VAR 0 15
33997: PUSH
33998: LD_VAR 0 14
34002: PPUSH
34003: LD_INT 3
34005: PUSH
34006: LD_INT 50
34008: PUSH
34009: EMPTY
34010: LIST
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PPUSH
34016: CALL_OW 72
34020: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
34021: LD_VAR 0 14
34025: PUSH
34026: LD_VAR 0 15
34030: DIFF
34031: IFFALSE 34049
// tmp := tmp diff tmp2 ;
34033: LD_ADDR_VAR 0 14
34037: PUSH
34038: LD_VAR 0 14
34042: PUSH
34043: LD_VAR 0 15
34047: DIFF
34048: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
34049: LD_ADDR_VAR 0 14
34053: PUSH
34054: LD_VAR 0 4
34058: PUSH
34059: LD_VAR 0 7
34063: ARRAY
34064: PPUSH
34065: LD_VAR 0 14
34069: PPUSH
34070: LD_INT 1
34072: PPUSH
34073: LD_INT 1
34075: PPUSH
34076: CALL 6381 0 4
34080: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
34081: LD_VAR 0 4
34085: PUSH
34086: LD_VAR 0 7
34090: ARRAY
34091: PPUSH
34092: CALL_OW 257
34096: PUSH
34097: LD_INT 1
34099: EQUAL
34100: IFFALSE 34548
// begin if WantPlant ( group [ i ] ) then
34102: LD_VAR 0 4
34106: PUSH
34107: LD_VAR 0 7
34111: ARRAY
34112: PPUSH
34113: CALL 5849 0 1
34117: IFFALSE 34121
// continue ;
34119: GO 33454
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
34121: LD_VAR 0 18
34125: PUSH
34126: LD_VAR 0 4
34130: PUSH
34131: LD_VAR 0 7
34135: ARRAY
34136: PPUSH
34137: CALL_OW 310
34141: NOT
34142: AND
34143: PUSH
34144: LD_VAR 0 14
34148: PUSH
34149: LD_INT 1
34151: ARRAY
34152: PUSH
34153: LD_VAR 0 14
34157: PPUSH
34158: LD_INT 21
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 58
34170: PUSH
34171: EMPTY
34172: LIST
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PPUSH
34178: CALL_OW 72
34182: IN
34183: AND
34184: IFFALSE 34220
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
34186: LD_VAR 0 4
34190: PUSH
34191: LD_VAR 0 7
34195: ARRAY
34196: PPUSH
34197: LD_VAR 0 14
34201: PUSH
34202: LD_INT 1
34204: ARRAY
34205: PPUSH
34206: CALL_OW 120
// attacking := true ;
34210: LD_ADDR_VAR 0 29
34214: PUSH
34215: LD_INT 1
34217: ST_TO_ADDR
// continue ;
34218: GO 33454
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
34220: LD_VAR 0 26
34224: PUSH
34225: LD_VAR 0 4
34229: PUSH
34230: LD_VAR 0 7
34234: ARRAY
34235: PPUSH
34236: CALL_OW 257
34240: PUSH
34241: LD_INT 1
34243: EQUAL
34244: AND
34245: PUSH
34246: LD_VAR 0 4
34250: PUSH
34251: LD_VAR 0 7
34255: ARRAY
34256: PPUSH
34257: CALL_OW 256
34261: PUSH
34262: LD_INT 800
34264: LESS
34265: AND
34266: PUSH
34267: LD_VAR 0 4
34271: PUSH
34272: LD_VAR 0 7
34276: ARRAY
34277: PPUSH
34278: CALL_OW 318
34282: NOT
34283: AND
34284: IFFALSE 34301
// ComCrawl ( group [ i ] ) ;
34286: LD_VAR 0 4
34290: PUSH
34291: LD_VAR 0 7
34295: ARRAY
34296: PPUSH
34297: CALL_OW 137
// if f_mines then
34301: LD_VAR 0 21
34305: IFFALSE 34548
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
34307: LD_VAR 0 14
34311: PUSH
34312: LD_INT 1
34314: ARRAY
34315: PPUSH
34316: CALL_OW 247
34320: PUSH
34321: LD_INT 3
34323: EQUAL
34324: PUSH
34325: LD_VAR 0 14
34329: PUSH
34330: LD_INT 1
34332: ARRAY
34333: PUSH
34334: LD_VAR 0 27
34338: IN
34339: NOT
34340: AND
34341: IFFALSE 34548
// begin x := GetX ( tmp [ 1 ] ) ;
34343: LD_ADDR_VAR 0 10
34347: PUSH
34348: LD_VAR 0 14
34352: PUSH
34353: LD_INT 1
34355: ARRAY
34356: PPUSH
34357: CALL_OW 250
34361: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
34362: LD_ADDR_VAR 0 11
34366: PUSH
34367: LD_VAR 0 14
34371: PUSH
34372: LD_INT 1
34374: ARRAY
34375: PPUSH
34376: CALL_OW 251
34380: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
34381: LD_ADDR_VAR 0 12
34385: PUSH
34386: LD_VAR 0 4
34390: PUSH
34391: LD_VAR 0 7
34395: ARRAY
34396: PPUSH
34397: CALL 31604 0 1
34401: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
34402: LD_VAR 0 4
34406: PUSH
34407: LD_VAR 0 7
34411: ARRAY
34412: PPUSH
34413: LD_VAR 0 10
34417: PPUSH
34418: LD_VAR 0 11
34422: PPUSH
34423: LD_VAR 0 14
34427: PUSH
34428: LD_INT 1
34430: ARRAY
34431: PPUSH
34432: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
34436: LD_VAR 0 4
34440: PUSH
34441: LD_VAR 0 7
34445: ARRAY
34446: PPUSH
34447: LD_VAR 0 10
34451: PPUSH
34452: LD_VAR 0 12
34456: PPUSH
34457: LD_INT 7
34459: PPUSH
34460: CALL_OW 272
34464: PPUSH
34465: LD_VAR 0 11
34469: PPUSH
34470: LD_VAR 0 12
34474: PPUSH
34475: LD_INT 7
34477: PPUSH
34478: CALL_OW 273
34482: PPUSH
34483: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
34487: LD_VAR 0 4
34491: PUSH
34492: LD_VAR 0 7
34496: ARRAY
34497: PPUSH
34498: LD_INT 71
34500: PPUSH
34501: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
34505: LD_ADDR_VAR 0 27
34509: PUSH
34510: LD_VAR 0 27
34514: PPUSH
34515: LD_VAR 0 27
34519: PUSH
34520: LD_INT 1
34522: PLUS
34523: PPUSH
34524: LD_VAR 0 14
34528: PUSH
34529: LD_INT 1
34531: ARRAY
34532: PPUSH
34533: CALL_OW 1
34537: ST_TO_ADDR
// attacking := true ;
34538: LD_ADDR_VAR 0 29
34542: PUSH
34543: LD_INT 1
34545: ST_TO_ADDR
// continue ;
34546: GO 33454
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
34548: LD_VAR 0 4
34552: PUSH
34553: LD_VAR 0 7
34557: ARRAY
34558: PPUSH
34559: CALL_OW 257
34563: PUSH
34564: LD_INT 17
34566: EQUAL
34567: PUSH
34568: LD_VAR 0 4
34572: PUSH
34573: LD_VAR 0 7
34577: ARRAY
34578: PPUSH
34579: CALL_OW 110
34583: PUSH
34584: LD_INT 71
34586: EQUAL
34587: NOT
34588: AND
34589: IFFALSE 34735
// begin attacking := false ;
34591: LD_ADDR_VAR 0 29
34595: PUSH
34596: LD_INT 0
34598: ST_TO_ADDR
// k := 5 ;
34599: LD_ADDR_VAR 0 9
34603: PUSH
34604: LD_INT 5
34606: ST_TO_ADDR
// if tmp < k then
34607: LD_VAR 0 14
34611: PUSH
34612: LD_VAR 0 9
34616: LESS
34617: IFFALSE 34629
// k := tmp ;
34619: LD_ADDR_VAR 0 9
34623: PUSH
34624: LD_VAR 0 14
34628: ST_TO_ADDR
// for j = 1 to k do
34629: LD_ADDR_VAR 0 8
34633: PUSH
34634: DOUBLE
34635: LD_INT 1
34637: DEC
34638: ST_TO_ADDR
34639: LD_VAR 0 9
34643: PUSH
34644: FOR_TO
34645: IFFALSE 34733
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
34647: LD_VAR 0 14
34651: PUSH
34652: LD_VAR 0 8
34656: ARRAY
34657: PUSH
34658: LD_VAR 0 14
34662: PPUSH
34663: LD_INT 58
34665: PUSH
34666: EMPTY
34667: LIST
34668: PPUSH
34669: CALL_OW 72
34673: IN
34674: NOT
34675: IFFALSE 34731
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
34677: LD_VAR 0 4
34681: PUSH
34682: LD_VAR 0 7
34686: ARRAY
34687: PPUSH
34688: LD_VAR 0 14
34692: PUSH
34693: LD_VAR 0 8
34697: ARRAY
34698: PPUSH
34699: CALL_OW 115
// attacking := true ;
34703: LD_ADDR_VAR 0 29
34707: PUSH
34708: LD_INT 1
34710: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
34711: LD_VAR 0 4
34715: PUSH
34716: LD_VAR 0 7
34720: ARRAY
34721: PPUSH
34722: LD_INT 71
34724: PPUSH
34725: CALL_OW 109
// continue ;
34729: GO 34644
// end ; end ;
34731: GO 34644
34733: POP
34734: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
34735: LD_VAR 0 4
34739: PUSH
34740: LD_VAR 0 7
34744: ARRAY
34745: PPUSH
34746: CALL_OW 257
34750: PUSH
34751: LD_INT 8
34753: EQUAL
34754: PUSH
34755: LD_VAR 0 4
34759: PUSH
34760: LD_VAR 0 7
34764: ARRAY
34765: PPUSH
34766: CALL_OW 264
34770: PUSH
34771: LD_INT 28
34773: PUSH
34774: LD_INT 45
34776: PUSH
34777: LD_INT 7
34779: PUSH
34780: LD_INT 47
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: IN
34789: OR
34790: IFFALSE 35020
// begin attacking := false ;
34792: LD_ADDR_VAR 0 29
34796: PUSH
34797: LD_INT 0
34799: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
34800: LD_VAR 0 14
34804: PUSH
34805: LD_INT 1
34807: ARRAY
34808: PPUSH
34809: CALL_OW 266
34813: PUSH
34814: LD_INT 32
34816: PUSH
34817: LD_INT 31
34819: PUSH
34820: LD_INT 33
34822: PUSH
34823: LD_INT 4
34825: PUSH
34826: LD_INT 5
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: IN
34836: IFFALSE 35020
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
34838: LD_ADDR_VAR 0 9
34842: PUSH
34843: LD_VAR 0 14
34847: PUSH
34848: LD_INT 1
34850: ARRAY
34851: PPUSH
34852: CALL_OW 266
34856: PPUSH
34857: LD_VAR 0 14
34861: PUSH
34862: LD_INT 1
34864: ARRAY
34865: PPUSH
34866: CALL_OW 250
34870: PPUSH
34871: LD_VAR 0 14
34875: PUSH
34876: LD_INT 1
34878: ARRAY
34879: PPUSH
34880: CALL_OW 251
34884: PPUSH
34885: LD_VAR 0 14
34889: PUSH
34890: LD_INT 1
34892: ARRAY
34893: PPUSH
34894: CALL_OW 254
34898: PPUSH
34899: LD_VAR 0 14
34903: PUSH
34904: LD_INT 1
34906: ARRAY
34907: PPUSH
34908: CALL_OW 248
34912: PPUSH
34913: LD_INT 0
34915: PPUSH
34916: CALL 12980 0 6
34920: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
34921: LD_ADDR_VAR 0 8
34925: PUSH
34926: LD_VAR 0 4
34930: PUSH
34931: LD_VAR 0 7
34935: ARRAY
34936: PPUSH
34937: LD_VAR 0 9
34941: PPUSH
34942: CALL 31667 0 2
34946: ST_TO_ADDR
// if j then
34947: LD_VAR 0 8
34951: IFFALSE 35020
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34953: LD_VAR 0 8
34957: PUSH
34958: LD_INT 1
34960: ARRAY
34961: PPUSH
34962: LD_VAR 0 8
34966: PUSH
34967: LD_INT 2
34969: ARRAY
34970: PPUSH
34971: CALL_OW 488
34975: IFFALSE 35020
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
34977: LD_VAR 0 4
34981: PUSH
34982: LD_VAR 0 7
34986: ARRAY
34987: PPUSH
34988: LD_VAR 0 8
34992: PUSH
34993: LD_INT 1
34995: ARRAY
34996: PPUSH
34997: LD_VAR 0 8
35001: PUSH
35002: LD_INT 2
35004: ARRAY
35005: PPUSH
35006: CALL_OW 116
// attacking := true ;
35010: LD_ADDR_VAR 0 29
35014: PUSH
35015: LD_INT 1
35017: ST_TO_ADDR
// continue ;
35018: GO 33454
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
35020: LD_VAR 0 4
35024: PUSH
35025: LD_VAR 0 7
35029: ARRAY
35030: PPUSH
35031: CALL_OW 265
35035: PUSH
35036: LD_INT 11
35038: EQUAL
35039: IFFALSE 35317
// begin k := 10 ;
35041: LD_ADDR_VAR 0 9
35045: PUSH
35046: LD_INT 10
35048: ST_TO_ADDR
// x := 0 ;
35049: LD_ADDR_VAR 0 10
35053: PUSH
35054: LD_INT 0
35056: ST_TO_ADDR
// if tmp < k then
35057: LD_VAR 0 14
35061: PUSH
35062: LD_VAR 0 9
35066: LESS
35067: IFFALSE 35079
// k := tmp ;
35069: LD_ADDR_VAR 0 9
35073: PUSH
35074: LD_VAR 0 14
35078: ST_TO_ADDR
// for j = k downto 1 do
35079: LD_ADDR_VAR 0 8
35083: PUSH
35084: DOUBLE
35085: LD_VAR 0 9
35089: INC
35090: ST_TO_ADDR
35091: LD_INT 1
35093: PUSH
35094: FOR_DOWNTO
35095: IFFALSE 35170
// begin if GetType ( tmp [ j ] ) = unit_human then
35097: LD_VAR 0 14
35101: PUSH
35102: LD_VAR 0 8
35106: ARRAY
35107: PPUSH
35108: CALL_OW 247
35112: PUSH
35113: LD_INT 1
35115: EQUAL
35116: IFFALSE 35168
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
35118: LD_VAR 0 4
35122: PUSH
35123: LD_VAR 0 7
35127: ARRAY
35128: PPUSH
35129: LD_VAR 0 14
35133: PUSH
35134: LD_VAR 0 8
35138: ARRAY
35139: PPUSH
35140: CALL 31938 0 2
// x := tmp [ j ] ;
35144: LD_ADDR_VAR 0 10
35148: PUSH
35149: LD_VAR 0 14
35153: PUSH
35154: LD_VAR 0 8
35158: ARRAY
35159: ST_TO_ADDR
// attacking := true ;
35160: LD_ADDR_VAR 0 29
35164: PUSH
35165: LD_INT 1
35167: ST_TO_ADDR
// end ; end ;
35168: GO 35094
35170: POP
35171: POP
// if not x then
35172: LD_VAR 0 10
35176: NOT
35177: IFFALSE 35317
// begin attacking := true ;
35179: LD_ADDR_VAR 0 29
35183: PUSH
35184: LD_INT 1
35186: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
35187: LD_VAR 0 4
35191: PUSH
35192: LD_VAR 0 7
35196: ARRAY
35197: PPUSH
35198: CALL_OW 250
35202: PPUSH
35203: LD_VAR 0 4
35207: PUSH
35208: LD_VAR 0 7
35212: ARRAY
35213: PPUSH
35214: CALL_OW 251
35218: PPUSH
35219: CALL_OW 546
35223: PUSH
35224: LD_INT 2
35226: ARRAY
35227: PUSH
35228: LD_VAR 0 14
35232: PUSH
35233: LD_INT 1
35235: ARRAY
35236: PPUSH
35237: CALL_OW 250
35241: PPUSH
35242: LD_VAR 0 14
35246: PUSH
35247: LD_INT 1
35249: ARRAY
35250: PPUSH
35251: CALL_OW 251
35255: PPUSH
35256: CALL_OW 546
35260: PUSH
35261: LD_INT 2
35263: ARRAY
35264: EQUAL
35265: IFFALSE 35293
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
35267: LD_VAR 0 4
35271: PUSH
35272: LD_VAR 0 7
35276: ARRAY
35277: PPUSH
35278: LD_VAR 0 14
35282: PUSH
35283: LD_INT 1
35285: ARRAY
35286: PPUSH
35287: CALL 31938 0 2
35291: GO 35317
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
35293: LD_VAR 0 4
35297: PUSH
35298: LD_VAR 0 7
35302: ARRAY
35303: PPUSH
35304: LD_VAR 0 14
35308: PUSH
35309: LD_INT 1
35311: ARRAY
35312: PPUSH
35313: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
35317: LD_VAR 0 4
35321: PUSH
35322: LD_VAR 0 7
35326: ARRAY
35327: PPUSH
35328: CALL_OW 264
35332: PUSH
35333: LD_INT 29
35335: EQUAL
35336: IFFALSE 35702
// begin if WantsToAttack ( group [ i ] ) in bombed then
35338: LD_VAR 0 4
35342: PUSH
35343: LD_VAR 0 7
35347: ARRAY
35348: PPUSH
35349: CALL_OW 319
35353: PUSH
35354: LD_VAR 0 28
35358: IN
35359: IFFALSE 35363
// continue ;
35361: GO 33454
// k := 8 ;
35363: LD_ADDR_VAR 0 9
35367: PUSH
35368: LD_INT 8
35370: ST_TO_ADDR
// x := 0 ;
35371: LD_ADDR_VAR 0 10
35375: PUSH
35376: LD_INT 0
35378: ST_TO_ADDR
// if tmp < k then
35379: LD_VAR 0 14
35383: PUSH
35384: LD_VAR 0 9
35388: LESS
35389: IFFALSE 35401
// k := tmp ;
35391: LD_ADDR_VAR 0 9
35395: PUSH
35396: LD_VAR 0 14
35400: ST_TO_ADDR
// for j = 1 to k do
35401: LD_ADDR_VAR 0 8
35405: PUSH
35406: DOUBLE
35407: LD_INT 1
35409: DEC
35410: ST_TO_ADDR
35411: LD_VAR 0 9
35415: PUSH
35416: FOR_TO
35417: IFFALSE 35549
// begin if GetType ( tmp [ j ] ) = unit_building then
35419: LD_VAR 0 14
35423: PUSH
35424: LD_VAR 0 8
35428: ARRAY
35429: PPUSH
35430: CALL_OW 247
35434: PUSH
35435: LD_INT 3
35437: EQUAL
35438: IFFALSE 35547
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
35440: LD_VAR 0 14
35444: PUSH
35445: LD_VAR 0 8
35449: ARRAY
35450: PUSH
35451: LD_VAR 0 28
35455: IN
35456: NOT
35457: PUSH
35458: LD_VAR 0 14
35462: PUSH
35463: LD_VAR 0 8
35467: ARRAY
35468: PPUSH
35469: CALL_OW 313
35473: AND
35474: IFFALSE 35547
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
35476: LD_VAR 0 4
35480: PUSH
35481: LD_VAR 0 7
35485: ARRAY
35486: PPUSH
35487: LD_VAR 0 14
35491: PUSH
35492: LD_VAR 0 8
35496: ARRAY
35497: PPUSH
35498: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
35502: LD_ADDR_VAR 0 28
35506: PUSH
35507: LD_VAR 0 28
35511: PPUSH
35512: LD_VAR 0 28
35516: PUSH
35517: LD_INT 1
35519: PLUS
35520: PPUSH
35521: LD_VAR 0 14
35525: PUSH
35526: LD_VAR 0 8
35530: ARRAY
35531: PPUSH
35532: CALL_OW 1
35536: ST_TO_ADDR
// attacking := true ;
35537: LD_ADDR_VAR 0 29
35541: PUSH
35542: LD_INT 1
35544: ST_TO_ADDR
// break ;
35545: GO 35549
// end ; end ;
35547: GO 35416
35549: POP
35550: POP
// if not attacking and f_attack_depot then
35551: LD_VAR 0 29
35555: NOT
35556: PUSH
35557: LD_VAR 0 25
35561: AND
35562: IFFALSE 35657
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35564: LD_ADDR_VAR 0 13
35568: PUSH
35569: LD_VAR 0 14
35573: PPUSH
35574: LD_INT 2
35576: PUSH
35577: LD_INT 30
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 30
35589: PUSH
35590: LD_INT 1
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: LIST
35601: PPUSH
35602: CALL_OW 72
35606: ST_TO_ADDR
// if z then
35607: LD_VAR 0 13
35611: IFFALSE 35657
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
35613: LD_VAR 0 4
35617: PUSH
35618: LD_VAR 0 7
35622: ARRAY
35623: PPUSH
35624: LD_VAR 0 13
35628: PPUSH
35629: LD_VAR 0 4
35633: PUSH
35634: LD_VAR 0 7
35638: ARRAY
35639: PPUSH
35640: CALL_OW 74
35644: PPUSH
35645: CALL_OW 115
// attacking := true ;
35649: LD_ADDR_VAR 0 29
35653: PUSH
35654: LD_INT 1
35656: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
35657: LD_VAR 0 4
35661: PUSH
35662: LD_VAR 0 7
35666: ARRAY
35667: PPUSH
35668: CALL_OW 256
35672: PUSH
35673: LD_INT 500
35675: LESS
35676: IFFALSE 35702
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
35678: LD_VAR 0 4
35682: PUSH
35683: LD_VAR 0 7
35687: ARRAY
35688: PPUSH
35689: LD_VAR 0 14
35693: PUSH
35694: LD_INT 1
35696: ARRAY
35697: PPUSH
35698: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35702: LD_VAR 0 4
35706: PUSH
35707: LD_VAR 0 7
35711: ARRAY
35712: PPUSH
35713: CALL_OW 256
35717: PUSH
35718: LD_INT 250
35720: LESS
35721: PUSH
35722: LD_VAR 0 4
35726: PUSH
35727: LD_VAR 0 7
35731: ARRAY
35732: PUSH
35733: LD_INT 21
35735: PUSH
35736: LD_INT 2
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 23
35745: PUSH
35746: LD_INT 2
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PPUSH
35757: CALL_OW 69
35761: IN
35762: AND
35763: IFFALSE 35888
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
35765: LD_ADDR_VAR 0 9
35769: PUSH
35770: LD_OWVAR 3
35774: PUSH
35775: LD_VAR 0 4
35779: PUSH
35780: LD_VAR 0 7
35784: ARRAY
35785: DIFF
35786: PPUSH
35787: LD_VAR 0 4
35791: PUSH
35792: LD_VAR 0 7
35796: ARRAY
35797: PPUSH
35798: CALL_OW 74
35802: ST_TO_ADDR
// if not k then
35803: LD_VAR 0 9
35807: NOT
35808: IFFALSE 35812
// continue ;
35810: GO 33454
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
35812: LD_VAR 0 9
35816: PUSH
35817: LD_INT 81
35819: PUSH
35820: LD_VAR 0 4
35824: PUSH
35825: LD_VAR 0 7
35829: ARRAY
35830: PPUSH
35831: CALL_OW 255
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PPUSH
35840: CALL_OW 69
35844: IN
35845: PUSH
35846: LD_VAR 0 9
35850: PPUSH
35851: LD_VAR 0 4
35855: PUSH
35856: LD_VAR 0 7
35860: ARRAY
35861: PPUSH
35862: CALL_OW 296
35866: PUSH
35867: LD_INT 5
35869: LESS
35870: AND
35871: IFFALSE 35888
// ComAutodestruct ( group [ i ] ) ;
35873: LD_VAR 0 4
35877: PUSH
35878: LD_VAR 0 7
35882: ARRAY
35883: PPUSH
35884: CALL 31836 0 1
// end ; if f_attack_depot then
35888: LD_VAR 0 25
35892: IFFALSE 36004
// begin k := 6 ;
35894: LD_ADDR_VAR 0 9
35898: PUSH
35899: LD_INT 6
35901: ST_TO_ADDR
// if tmp < k then
35902: LD_VAR 0 14
35906: PUSH
35907: LD_VAR 0 9
35911: LESS
35912: IFFALSE 35924
// k := tmp ;
35914: LD_ADDR_VAR 0 9
35918: PUSH
35919: LD_VAR 0 14
35923: ST_TO_ADDR
// for j = 1 to k do
35924: LD_ADDR_VAR 0 8
35928: PUSH
35929: DOUBLE
35930: LD_INT 1
35932: DEC
35933: ST_TO_ADDR
35934: LD_VAR 0 9
35938: PUSH
35939: FOR_TO
35940: IFFALSE 36002
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
35942: LD_VAR 0 8
35946: PPUSH
35947: CALL_OW 266
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: LD_INT 1
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: IN
35962: IFFALSE 36000
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
35964: LD_VAR 0 4
35968: PUSH
35969: LD_VAR 0 7
35973: ARRAY
35974: PPUSH
35975: LD_VAR 0 14
35979: PUSH
35980: LD_VAR 0 8
35984: ARRAY
35985: PPUSH
35986: CALL_OW 115
// attacking := true ;
35990: LD_ADDR_VAR 0 29
35994: PUSH
35995: LD_INT 1
35997: ST_TO_ADDR
// break ;
35998: GO 36002
// end ;
36000: GO 35939
36002: POP
36003: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
36004: LD_VAR 0 4
36008: PUSH
36009: LD_VAR 0 7
36013: ARRAY
36014: PPUSH
36015: CALL_OW 302
36019: PUSH
36020: LD_VAR 0 29
36024: NOT
36025: AND
36026: IFFALSE 36294
// begin if GetTag ( group [ i ] ) = 71 then
36028: LD_VAR 0 4
36032: PUSH
36033: LD_VAR 0 7
36037: ARRAY
36038: PPUSH
36039: CALL_OW 110
36043: PUSH
36044: LD_INT 71
36046: EQUAL
36047: IFFALSE 36088
// begin if HasTask ( group [ i ] ) then
36049: LD_VAR 0 4
36053: PUSH
36054: LD_VAR 0 7
36058: ARRAY
36059: PPUSH
36060: CALL_OW 314
36064: IFFALSE 36070
// continue else
36066: GO 33454
36068: GO 36088
// SetTag ( group [ i ] , 0 ) ;
36070: LD_VAR 0 4
36074: PUSH
36075: LD_VAR 0 7
36079: ARRAY
36080: PPUSH
36081: LD_INT 0
36083: PPUSH
36084: CALL_OW 109
// end ; k := 8 ;
36088: LD_ADDR_VAR 0 9
36092: PUSH
36093: LD_INT 8
36095: ST_TO_ADDR
// x := 0 ;
36096: LD_ADDR_VAR 0 10
36100: PUSH
36101: LD_INT 0
36103: ST_TO_ADDR
// if tmp < k then
36104: LD_VAR 0 14
36108: PUSH
36109: LD_VAR 0 9
36113: LESS
36114: IFFALSE 36126
// k := tmp ;
36116: LD_ADDR_VAR 0 9
36120: PUSH
36121: LD_VAR 0 14
36125: ST_TO_ADDR
// for j = 1 to k do
36126: LD_ADDR_VAR 0 8
36130: PUSH
36131: DOUBLE
36132: LD_INT 1
36134: DEC
36135: ST_TO_ADDR
36136: LD_VAR 0 9
36140: PUSH
36141: FOR_TO
36142: IFFALSE 36240
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
36144: LD_VAR 0 14
36148: PUSH
36149: LD_VAR 0 8
36153: ARRAY
36154: PPUSH
36155: CALL_OW 247
36159: PUSH
36160: LD_INT 1
36162: EQUAL
36163: PUSH
36164: LD_VAR 0 14
36168: PUSH
36169: LD_VAR 0 8
36173: ARRAY
36174: PPUSH
36175: CALL_OW 256
36179: PUSH
36180: LD_INT 250
36182: LESS
36183: PUSH
36184: LD_VAR 0 20
36188: AND
36189: PUSH
36190: LD_VAR 0 20
36194: NOT
36195: PUSH
36196: LD_VAR 0 14
36200: PUSH
36201: LD_VAR 0 8
36205: ARRAY
36206: PPUSH
36207: CALL_OW 256
36211: PUSH
36212: LD_INT 250
36214: GREATEREQUAL
36215: AND
36216: OR
36217: AND
36218: IFFALSE 36238
// begin x := tmp [ j ] ;
36220: LD_ADDR_VAR 0 10
36224: PUSH
36225: LD_VAR 0 14
36229: PUSH
36230: LD_VAR 0 8
36234: ARRAY
36235: ST_TO_ADDR
// break ;
36236: GO 36240
// end ;
36238: GO 36141
36240: POP
36241: POP
// if x then
36242: LD_VAR 0 10
36246: IFFALSE 36270
// ComAttackUnit ( group [ i ] , x ) else
36248: LD_VAR 0 4
36252: PUSH
36253: LD_VAR 0 7
36257: ARRAY
36258: PPUSH
36259: LD_VAR 0 10
36263: PPUSH
36264: CALL_OW 115
36268: GO 36294
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
36270: LD_VAR 0 4
36274: PUSH
36275: LD_VAR 0 7
36279: ARRAY
36280: PPUSH
36281: LD_VAR 0 14
36285: PUSH
36286: LD_INT 1
36288: ARRAY
36289: PPUSH
36290: CALL_OW 115
// end ; end ; end ;
36294: GO 33454
36296: POP
36297: POP
// wait ( 0 0$1 ) ;
36298: LD_INT 35
36300: PPUSH
36301: CALL_OW 67
// until group = [ ] ;
36305: LD_VAR 0 4
36309: PUSH
36310: EMPTY
36311: EQUAL
36312: IFFALSE 33439
// end ;
36314: LD_VAR 0 2
36318: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36319: LD_INT 0
36321: PPUSH
36322: PPUSH
36323: PPUSH
36324: PPUSH
// if not base_units then
36325: LD_VAR 0 1
36329: NOT
36330: IFFALSE 36334
// exit ;
36332: GO 36421
// result := false ;
36334: LD_ADDR_VAR 0 2
36338: PUSH
36339: LD_INT 0
36341: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36342: LD_ADDR_VAR 0 5
36346: PUSH
36347: LD_VAR 0 1
36351: PPUSH
36352: LD_INT 21
36354: PUSH
36355: LD_INT 3
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PPUSH
36362: CALL_OW 72
36366: ST_TO_ADDR
// if not tmp then
36367: LD_VAR 0 5
36371: NOT
36372: IFFALSE 36376
// exit ;
36374: GO 36421
// for i in tmp do
36376: LD_ADDR_VAR 0 3
36380: PUSH
36381: LD_VAR 0 5
36385: PUSH
36386: FOR_IN
36387: IFFALSE 36419
// begin result := EnemyInRange ( i , 22 ) ;
36389: LD_ADDR_VAR 0 2
36393: PUSH
36394: LD_VAR 0 3
36398: PPUSH
36399: LD_INT 22
36401: PPUSH
36402: CALL 31519 0 2
36406: ST_TO_ADDR
// if result then
36407: LD_VAR 0 2
36411: IFFALSE 36417
// exit ;
36413: POP
36414: POP
36415: GO 36421
// end ;
36417: GO 36386
36419: POP
36420: POP
// end ;
36421: LD_VAR 0 2
36425: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
36426: LD_INT 0
36428: PPUSH
36429: PPUSH
// if not units then
36430: LD_VAR 0 1
36434: NOT
36435: IFFALSE 36439
// exit ;
36437: GO 36509
// result := [ ] ;
36439: LD_ADDR_VAR 0 3
36443: PUSH
36444: EMPTY
36445: ST_TO_ADDR
// for i in units do
36446: LD_ADDR_VAR 0 4
36450: PUSH
36451: LD_VAR 0 1
36455: PUSH
36456: FOR_IN
36457: IFFALSE 36507
// if GetTag ( i ) = tag then
36459: LD_VAR 0 4
36463: PPUSH
36464: CALL_OW 110
36468: PUSH
36469: LD_VAR 0 2
36473: EQUAL
36474: IFFALSE 36505
// result := Insert ( result , result + 1 , i ) ;
36476: LD_ADDR_VAR 0 3
36480: PUSH
36481: LD_VAR 0 3
36485: PPUSH
36486: LD_VAR 0 3
36490: PUSH
36491: LD_INT 1
36493: PLUS
36494: PPUSH
36495: LD_VAR 0 4
36499: PPUSH
36500: CALL_OW 2
36504: ST_TO_ADDR
36505: GO 36456
36507: POP
36508: POP
// end ;
36509: LD_VAR 0 3
36513: RET
// export function IsDriver ( un ) ; begin
36514: LD_INT 0
36516: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36517: LD_ADDR_VAR 0 2
36521: PUSH
36522: LD_VAR 0 1
36526: PUSH
36527: LD_INT 55
36529: PUSH
36530: EMPTY
36531: LIST
36532: PPUSH
36533: CALL_OW 69
36537: IN
36538: ST_TO_ADDR
// end ; end_of_file
36539: LD_VAR 0 2
36543: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape ; export function InitMacro ; var i ; begin
36544: LD_INT 0
36546: PPUSH
36547: PPUSH
// skirmish := false ;
36548: LD_ADDR_EXP 4
36552: PUSH
36553: LD_INT 0
36555: ST_TO_ADDR
// mc_bases := [ ] ;
36556: LD_ADDR_EXP 5
36560: PUSH
36561: EMPTY
36562: ST_TO_ADDR
// mc_sides := [ ] ;
36563: LD_ADDR_EXP 30
36567: PUSH
36568: EMPTY
36569: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
36570: LD_ADDR_EXP 6
36574: PUSH
36575: EMPTY
36576: ST_TO_ADDR
// mc_building_repairs := [ ] ;
36577: LD_ADDR_EXP 7
36581: PUSH
36582: EMPTY
36583: ST_TO_ADDR
// mc_need_heal := [ ] ;
36584: LD_ADDR_EXP 8
36588: PUSH
36589: EMPTY
36590: ST_TO_ADDR
// mc_healers := [ ] ;
36591: LD_ADDR_EXP 9
36595: PUSH
36596: EMPTY
36597: ST_TO_ADDR
// mc_build_list := [ ] ;
36598: LD_ADDR_EXP 10
36602: PUSH
36603: EMPTY
36604: ST_TO_ADDR
// mc_builders := [ ] ;
36605: LD_ADDR_EXP 11
36609: PUSH
36610: EMPTY
36611: ST_TO_ADDR
// mc_construct_list := [ ] ;
36612: LD_ADDR_EXP 12
36616: PUSH
36617: EMPTY
36618: ST_TO_ADDR
// mc_turret_list := [ ] ;
36619: LD_ADDR_EXP 13
36623: PUSH
36624: EMPTY
36625: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
36626: LD_ADDR_EXP 14
36630: PUSH
36631: EMPTY
36632: ST_TO_ADDR
// mc_miners := [ ] ;
36633: LD_ADDR_EXP 19
36637: PUSH
36638: EMPTY
36639: ST_TO_ADDR
// mc_mines := [ ] ;
36640: LD_ADDR_EXP 18
36644: PUSH
36645: EMPTY
36646: ST_TO_ADDR
// mc_minefields := [ ] ;
36647: LD_ADDR_EXP 20
36651: PUSH
36652: EMPTY
36653: ST_TO_ADDR
// mc_crates := [ ] ;
36654: LD_ADDR_EXP 21
36658: PUSH
36659: EMPTY
36660: ST_TO_ADDR
// mc_crates_collector := [ ] ;
36661: LD_ADDR_EXP 22
36665: PUSH
36666: EMPTY
36667: ST_TO_ADDR
// mc_vehicles := [ ] ;
36668: LD_ADDR_EXP 23
36672: PUSH
36673: EMPTY
36674: ST_TO_ADDR
// mc_attack := [ ] ;
36675: LD_ADDR_EXP 24
36679: PUSH
36680: EMPTY
36681: ST_TO_ADDR
// mc_produce := [ ] ;
36682: LD_ADDR_EXP 25
36686: PUSH
36687: EMPTY
36688: ST_TO_ADDR
// mc_defender := [ ] ;
36689: LD_ADDR_EXP 26
36693: PUSH
36694: EMPTY
36695: ST_TO_ADDR
// mc_parking := [ ] ;
36696: LD_ADDR_EXP 28
36700: PUSH
36701: EMPTY
36702: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
36703: LD_ADDR_EXP 15
36707: PUSH
36708: EMPTY
36709: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
36710: LD_ADDR_EXP 17
36714: PUSH
36715: EMPTY
36716: ST_TO_ADDR
// mc_scan := [ ] ;
36717: LD_ADDR_EXP 27
36721: PUSH
36722: EMPTY
36723: ST_TO_ADDR
// mc_scan_area := [ ] ;
36724: LD_ADDR_EXP 29
36728: PUSH
36729: EMPTY
36730: ST_TO_ADDR
// mc_tech := [ ] ;
36731: LD_ADDR_EXP 31
36735: PUSH
36736: EMPTY
36737: ST_TO_ADDR
// end ;
36738: LD_VAR 0 1
36742: RET
// export function Skirmish_Start ; var i ; begin
36743: LD_INT 0
36745: PPUSH
36746: PPUSH
// for i = 1 to mc_bases do
36747: LD_ADDR_VAR 0 2
36751: PUSH
36752: DOUBLE
36753: LD_INT 1
36755: DEC
36756: ST_TO_ADDR
36757: LD_EXP 5
36761: PUSH
36762: FOR_TO
36763: IFFALSE 37401
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
36765: LD_ADDR_EXP 6
36769: PUSH
36770: LD_EXP 6
36774: PPUSH
36775: LD_VAR 0 2
36779: PPUSH
36780: EMPTY
36781: PPUSH
36782: CALL_OW 1
36786: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
36787: LD_ADDR_EXP 7
36791: PUSH
36792: LD_EXP 7
36796: PPUSH
36797: LD_VAR 0 2
36801: PPUSH
36802: EMPTY
36803: PPUSH
36804: CALL_OW 1
36808: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
36809: LD_ADDR_EXP 8
36813: PUSH
36814: LD_EXP 8
36818: PPUSH
36819: LD_VAR 0 2
36823: PPUSH
36824: EMPTY
36825: PPUSH
36826: CALL_OW 1
36830: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
36831: LD_ADDR_EXP 9
36835: PUSH
36836: LD_EXP 9
36840: PPUSH
36841: LD_VAR 0 2
36845: PPUSH
36846: EMPTY
36847: PUSH
36848: EMPTY
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PPUSH
36854: CALL_OW 1
36858: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
36859: LD_ADDR_EXP 10
36863: PUSH
36864: LD_EXP 10
36868: PPUSH
36869: LD_VAR 0 2
36873: PPUSH
36874: EMPTY
36875: PPUSH
36876: CALL_OW 1
36880: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
36881: LD_ADDR_EXP 11
36885: PUSH
36886: LD_EXP 11
36890: PPUSH
36891: LD_VAR 0 2
36895: PPUSH
36896: EMPTY
36897: PPUSH
36898: CALL_OW 1
36902: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
36903: LD_ADDR_EXP 12
36907: PUSH
36908: LD_EXP 12
36912: PPUSH
36913: LD_VAR 0 2
36917: PPUSH
36918: EMPTY
36919: PPUSH
36920: CALL_OW 1
36924: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
36925: LD_ADDR_EXP 13
36929: PUSH
36930: LD_EXP 13
36934: PPUSH
36935: LD_VAR 0 2
36939: PPUSH
36940: EMPTY
36941: PPUSH
36942: CALL_OW 1
36946: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
36947: LD_ADDR_EXP 14
36951: PUSH
36952: LD_EXP 14
36956: PPUSH
36957: LD_VAR 0 2
36961: PPUSH
36962: LD_EXP 5
36966: PUSH
36967: LD_VAR 0 2
36971: ARRAY
36972: PPUSH
36973: LD_INT 2
36975: PUSH
36976: LD_INT 30
36978: PUSH
36979: LD_INT 32
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 30
36988: PUSH
36989: LD_INT 31
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 58
37003: PUSH
37004: EMPTY
37005: LIST
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PPUSH
37011: CALL_OW 72
37015: PPUSH
37016: CALL_OW 1
37020: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
37021: LD_ADDR_EXP 15
37025: PUSH
37026: LD_EXP 15
37030: PPUSH
37031: LD_VAR 0 2
37035: PPUSH
37036: EMPTY
37037: PPUSH
37038: CALL_OW 1
37042: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
37043: LD_ADDR_EXP 19
37047: PUSH
37048: LD_EXP 19
37052: PPUSH
37053: LD_VAR 0 2
37057: PPUSH
37058: EMPTY
37059: PPUSH
37060: CALL_OW 1
37064: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
37065: LD_ADDR_EXP 18
37069: PUSH
37070: LD_EXP 18
37074: PPUSH
37075: LD_VAR 0 2
37079: PPUSH
37080: EMPTY
37081: PPUSH
37082: CALL_OW 1
37086: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
37087: LD_ADDR_EXP 20
37091: PUSH
37092: LD_EXP 20
37096: PPUSH
37097: LD_VAR 0 2
37101: PPUSH
37102: EMPTY
37103: PPUSH
37104: CALL_OW 1
37108: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
37109: LD_ADDR_EXP 21
37113: PUSH
37114: LD_EXP 21
37118: PPUSH
37119: LD_VAR 0 2
37123: PPUSH
37124: EMPTY
37125: PPUSH
37126: CALL_OW 1
37130: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
37131: LD_ADDR_EXP 22
37135: PUSH
37136: LD_EXP 22
37140: PPUSH
37141: LD_VAR 0 2
37145: PPUSH
37146: EMPTY
37147: PPUSH
37148: CALL_OW 1
37152: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
37153: LD_ADDR_EXP 23
37157: PUSH
37158: LD_EXP 23
37162: PPUSH
37163: LD_VAR 0 2
37167: PPUSH
37168: EMPTY
37169: PPUSH
37170: CALL_OW 1
37174: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
37175: LD_ADDR_EXP 24
37179: PUSH
37180: LD_EXP 24
37184: PPUSH
37185: LD_VAR 0 2
37189: PPUSH
37190: EMPTY
37191: PPUSH
37192: CALL_OW 1
37196: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
37197: LD_ADDR_EXP 25
37201: PUSH
37202: LD_EXP 25
37206: PPUSH
37207: LD_VAR 0 2
37211: PPUSH
37212: EMPTY
37213: PPUSH
37214: CALL_OW 1
37218: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
37219: LD_ADDR_EXP 26
37223: PUSH
37224: LD_EXP 26
37228: PPUSH
37229: LD_VAR 0 2
37233: PPUSH
37234: EMPTY
37235: PPUSH
37236: CALL_OW 1
37240: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
37241: LD_ADDR_EXP 16
37245: PUSH
37246: LD_EXP 16
37250: PPUSH
37251: LD_VAR 0 2
37255: PPUSH
37256: LD_INT 0
37258: PPUSH
37259: CALL_OW 1
37263: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
37264: LD_ADDR_EXP 28
37268: PUSH
37269: LD_EXP 28
37273: PPUSH
37274: LD_VAR 0 2
37278: PPUSH
37279: LD_INT 0
37281: PPUSH
37282: CALL_OW 1
37286: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
37287: LD_ADDR_EXP 17
37291: PUSH
37292: LD_EXP 17
37296: PPUSH
37297: LD_VAR 0 2
37301: PPUSH
37302: EMPTY
37303: PPUSH
37304: CALL_OW 1
37308: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
37309: LD_ADDR_EXP 27
37313: PUSH
37314: LD_EXP 27
37318: PPUSH
37319: LD_VAR 0 2
37323: PPUSH
37324: LD_INT 0
37326: PPUSH
37327: CALL_OW 1
37331: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
37332: LD_ADDR_EXP 29
37336: PUSH
37337: LD_EXP 29
37341: PPUSH
37342: LD_VAR 0 2
37346: PPUSH
37347: EMPTY
37348: PPUSH
37349: CALL_OW 1
37353: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
37354: LD_ADDR_EXP 32
37358: PUSH
37359: LD_EXP 32
37363: PPUSH
37364: LD_VAR 0 2
37368: PPUSH
37369: LD_INT 0
37371: PPUSH
37372: CALL_OW 1
37376: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
37377: LD_ADDR_EXP 33
37381: PUSH
37382: LD_EXP 33
37386: PPUSH
37387: LD_VAR 0 2
37391: PPUSH
37392: EMPTY
37393: PPUSH
37394: CALL_OW 1
37398: ST_TO_ADDR
// end ;
37399: GO 36762
37401: POP
37402: POP
// MC_InitSides ( ) ;
37403: CALL 37637 0 0
// MC_InitResearch ( ) ;
37407: CALL 43972 0 0
// CustomInitMacro ( ) ;
37411: CALL 100 0 0
// skirmish := true ;
37415: LD_ADDR_EXP 4
37419: PUSH
37420: LD_INT 1
37422: ST_TO_ADDR
// end ;
37423: LD_VAR 0 1
37427: RET
// every 0 0$01 trigger skirmish do
37428: LD_EXP 4
37432: IFFALSE 37530
37434: GO 37436
37436: DISABLE
// begin enable ;
37437: ENABLE
// MC_CheckBuildings ( ) ;
37438: CALL 38060 0 0
// MC_CheckPeopleLife ( ) ;
37442: CALL 38185 0 0
// RaiseSailEvent ( 103 ) ;
37446: LD_INT 103
37448: PPUSH
37449: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
37453: LD_INT 104
37455: PPUSH
37456: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
37460: LD_INT 106
37462: PPUSH
37463: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
37467: LD_INT 107
37469: PPUSH
37470: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
37474: LD_INT 108
37476: PPUSH
37477: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
37481: LD_INT 109
37483: PPUSH
37484: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
37488: LD_INT 110
37490: PPUSH
37491: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
37495: LD_INT 111
37497: PPUSH
37498: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
37502: LD_INT 112
37504: PPUSH
37505: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
37509: LD_INT 120
37511: PPUSH
37512: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
37516: LD_INT 121
37518: PPUSH
37519: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
37523: LD_INT 200
37525: PPUSH
37526: CALL_OW 427
// end ;
37530: END
// every 10 trigger skirmish do var i ;
37531: LD_EXP 4
37535: IFFALSE 37634
37537: GO 37539
37539: DISABLE
37540: LD_INT 0
37542: PPUSH
// begin enable ;
37543: ENABLE
// if not mc_bases then
37544: LD_EXP 5
37548: NOT
37549: IFFALSE 37553
// exit ;
37551: GO 37634
// for i = 1 to mc_bases do
37553: LD_ADDR_VAR 0 1
37557: PUSH
37558: DOUBLE
37559: LD_INT 1
37561: DEC
37562: ST_TO_ADDR
37563: LD_EXP 5
37567: PUSH
37568: FOR_TO
37569: IFFALSE 37632
// if mc_mines [ i ] and mc_miners [ i ] then
37571: LD_EXP 18
37575: PUSH
37576: LD_VAR 0 1
37580: ARRAY
37581: PUSH
37582: LD_EXP 19
37586: PUSH
37587: LD_VAR 0 1
37591: ARRAY
37592: AND
37593: IFFALSE 37630
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
37595: LD_EXP 19
37599: PUSH
37600: LD_VAR 0 1
37604: ARRAY
37605: PUSH
37606: LD_INT 1
37608: ARRAY
37609: PPUSH
37610: CALL_OW 255
37614: PPUSH
37615: LD_EXP 18
37619: PUSH
37620: LD_VAR 0 1
37624: ARRAY
37625: PPUSH
37626: CALL 3006 0 2
37630: GO 37568
37632: POP
37633: POP
// end ;
37634: PPOPN 1
37636: END
// export function MC_InitSides ( ) ; var i ; begin
37637: LD_INT 0
37639: PPUSH
37640: PPUSH
// if not mc_bases then
37641: LD_EXP 5
37645: NOT
37646: IFFALSE 37650
// exit ;
37648: GO 37724
// for i = 1 to mc_bases do
37650: LD_ADDR_VAR 0 2
37654: PUSH
37655: DOUBLE
37656: LD_INT 1
37658: DEC
37659: ST_TO_ADDR
37660: LD_EXP 5
37664: PUSH
37665: FOR_TO
37666: IFFALSE 37722
// if mc_bases [ i ] then
37668: LD_EXP 5
37672: PUSH
37673: LD_VAR 0 2
37677: ARRAY
37678: IFFALSE 37720
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
37680: LD_ADDR_EXP 30
37684: PUSH
37685: LD_EXP 30
37689: PPUSH
37690: LD_VAR 0 2
37694: PPUSH
37695: LD_EXP 5
37699: PUSH
37700: LD_VAR 0 2
37704: ARRAY
37705: PUSH
37706: LD_INT 1
37708: ARRAY
37709: PPUSH
37710: CALL_OW 255
37714: PPUSH
37715: CALL_OW 1
37719: ST_TO_ADDR
37720: GO 37665
37722: POP
37723: POP
// end ;
37724: LD_VAR 0 1
37728: RET
// export function MC_SetTame ( base , area ) ; begin
37729: LD_INT 0
37731: PPUSH
// if not mc_bases or not base then
37732: LD_EXP 5
37736: NOT
37737: PUSH
37738: LD_VAR 0 1
37742: NOT
37743: OR
37744: IFFALSE 37748
// exit ;
37746: GO 37773
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
37748: LD_ADDR_EXP 32
37752: PUSH
37753: LD_EXP 32
37757: PPUSH
37758: LD_VAR 0 1
37762: PPUSH
37763: LD_VAR 0 2
37767: PPUSH
37768: CALL_OW 1
37772: ST_TO_ADDR
// end ;
37773: LD_VAR 0 3
37777: RET
// on SailEvent ( event ) do begin if event = 101 then
37778: LD_VAR 0 1
37782: PUSH
37783: LD_INT 101
37785: EQUAL
37786: IFFALSE 37792
// MC_RepairBuildings ( ) ;
37788: CALL 38731 0 0
// if event = 102 then
37792: LD_VAR 0 1
37796: PUSH
37797: LD_INT 102
37799: EQUAL
37800: IFFALSE 37806
// MC_Heal ( ) ;
37802: CALL 39125 0 0
// if event = 103 then
37806: LD_VAR 0 1
37810: PUSH
37811: LD_INT 103
37813: EQUAL
37814: IFFALSE 37820
// MC_Build ( ) ;
37816: CALL 39510 0 0
// if event = 104 then
37820: LD_VAR 0 1
37824: PUSH
37825: LD_INT 104
37827: EQUAL
37828: IFFALSE 37834
// MC_TurretWeapon ( ) ;
37830: CALL 40304 0 0
// if event = 106 then
37834: LD_VAR 0 1
37838: PUSH
37839: LD_INT 106
37841: EQUAL
37842: IFFALSE 37848
// MC_PlantMines ( ) ;
37844: CALL 40623 0 0
// if event = 107 then
37848: LD_VAR 0 1
37852: PUSH
37853: LD_INT 107
37855: EQUAL
37856: IFFALSE 37862
// MC_CollectCrates ( ) ;
37858: CALL 41630 0 0
// if event = 108 then
37862: LD_VAR 0 1
37866: PUSH
37867: LD_INT 108
37869: EQUAL
37870: IFFALSE 37876
// MC_LinkRemoteControl ( ) ;
37872: CALL 42439 0 0
// if event = 109 then
37876: LD_VAR 0 1
37880: PUSH
37881: LD_INT 109
37883: EQUAL
37884: IFFALSE 37890
// MC_ProduceVehicle ( ) ;
37886: CALL 42620 0 0
// if event = 110 then
37890: LD_VAR 0 1
37894: PUSH
37895: LD_INT 110
37897: EQUAL
37898: IFFALSE 37904
// MC_SendAttack ( ) ;
37900: CALL 43101 0 0
// if event = 111 then
37904: LD_VAR 0 1
37908: PUSH
37909: LD_INT 111
37911: EQUAL
37912: IFFALSE 37918
// MC_Defend ( ) ;
37914: CALL 43209 0 0
// if event = 112 then
37918: LD_VAR 0 1
37922: PUSH
37923: LD_INT 112
37925: EQUAL
37926: IFFALSE 37932
// MC_Research ( ) ;
37928: CALL 43577 0 0
// if event = 120 then
37932: LD_VAR 0 1
37936: PUSH
37937: LD_INT 120
37939: EQUAL
37940: IFFALSE 37946
// MC_RepairVehicle ( ) ;
37942: CALL 44233 0 0
// if event = 121 then
37946: LD_VAR 0 1
37950: PUSH
37951: LD_INT 121
37953: EQUAL
37954: IFFALSE 37960
// MC_TameApe ( ) ;
37956: CALL 44902 0 0
// if event = 200 then
37960: LD_VAR 0 1
37964: PUSH
37965: LD_INT 200
37967: EQUAL
37968: IFFALSE 37974
// MC_Idle ( ) ;
37970: CALL 46339 0 0
// end ;
37974: PPOPN 1
37976: END
// export function MC_Reset ( base , tag ) ; var i ; begin
37977: LD_INT 0
37979: PPUSH
37980: PPUSH
// if not mc_bases [ base ] or not tag then
37981: LD_EXP 5
37985: PUSH
37986: LD_VAR 0 1
37990: ARRAY
37991: NOT
37992: PUSH
37993: LD_VAR 0 2
37997: NOT
37998: OR
37999: IFFALSE 38003
// exit ;
38001: GO 38055
// for i in mc_bases [ base ] do
38003: LD_ADDR_VAR 0 4
38007: PUSH
38008: LD_EXP 5
38012: PUSH
38013: LD_VAR 0 1
38017: ARRAY
38018: PUSH
38019: FOR_IN
38020: IFFALSE 38053
// if GetTag ( i ) = tag then
38022: LD_VAR 0 4
38026: PPUSH
38027: CALL_OW 110
38031: PUSH
38032: LD_VAR 0 2
38036: EQUAL
38037: IFFALSE 38051
// SetTag ( i , 0 ) ;
38039: LD_VAR 0 4
38043: PPUSH
38044: LD_INT 0
38046: PPUSH
38047: CALL_OW 109
38051: GO 38019
38053: POP
38054: POP
// end ;
38055: LD_VAR 0 3
38059: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
38060: LD_INT 0
38062: PPUSH
38063: PPUSH
38064: PPUSH
// if not mc_bases then
38065: LD_EXP 5
38069: NOT
38070: IFFALSE 38074
// exit ;
38072: GO 38180
// for i = 1 to mc_bases do
38074: LD_ADDR_VAR 0 2
38078: PUSH
38079: DOUBLE
38080: LD_INT 1
38082: DEC
38083: ST_TO_ADDR
38084: LD_EXP 5
38088: PUSH
38089: FOR_TO
38090: IFFALSE 38171
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
38092: LD_ADDR_VAR 0 3
38096: PUSH
38097: LD_EXP 5
38101: PUSH
38102: LD_VAR 0 2
38106: ARRAY
38107: PPUSH
38108: LD_INT 21
38110: PUSH
38111: LD_INT 3
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 3
38120: PUSH
38121: LD_INT 24
38123: PUSH
38124: LD_INT 1000
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PPUSH
38139: CALL_OW 72
38143: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
38144: LD_ADDR_EXP 6
38148: PUSH
38149: LD_EXP 6
38153: PPUSH
38154: LD_VAR 0 2
38158: PPUSH
38159: LD_VAR 0 3
38163: PPUSH
38164: CALL_OW 1
38168: ST_TO_ADDR
// end ;
38169: GO 38089
38171: POP
38172: POP
// RaiseSailEvent ( 101 ) ;
38173: LD_INT 101
38175: PPUSH
38176: CALL_OW 427
// end ;
38180: LD_VAR 0 1
38184: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
38185: LD_INT 0
38187: PPUSH
38188: PPUSH
38189: PPUSH
38190: PPUSH
38191: PPUSH
38192: PPUSH
38193: PPUSH
// if not mc_bases then
38194: LD_EXP 5
38198: NOT
38199: IFFALSE 38203
// exit ;
38201: GO 38726
// for i = 1 to mc_bases do
38203: LD_ADDR_VAR 0 2
38207: PUSH
38208: DOUBLE
38209: LD_INT 1
38211: DEC
38212: ST_TO_ADDR
38213: LD_EXP 5
38217: PUSH
38218: FOR_TO
38219: IFFALSE 38717
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
38221: LD_ADDR_VAR 0 5
38225: PUSH
38226: LD_EXP 5
38230: PUSH
38231: LD_VAR 0 2
38235: ARRAY
38236: PPUSH
38237: LD_INT 21
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: LD_INT 3
38252: PUSH
38253: LD_INT 54
38255: PUSH
38256: EMPTY
38257: LIST
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 3
38265: PUSH
38266: LD_INT 24
38268: PUSH
38269: LD_INT 700
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: LIST
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PPUSH
38289: CALL_OW 72
38293: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
38294: LD_ADDR_VAR 0 6
38298: PUSH
38299: LD_EXP 5
38303: PUSH
38304: LD_VAR 0 2
38308: ARRAY
38309: PPUSH
38310: LD_INT 21
38312: PUSH
38313: LD_INT 1
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: LD_INT 3
38325: PUSH
38326: LD_INT 54
38328: PUSH
38329: EMPTY
38330: LIST
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 3
38338: PUSH
38339: LD_INT 24
38341: PUSH
38342: LD_INT 250
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: LIST
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PPUSH
38362: CALL_OW 72
38366: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
38367: LD_ADDR_VAR 0 7
38371: PUSH
38372: LD_VAR 0 5
38376: PUSH
38377: LD_VAR 0 6
38381: DIFF
38382: ST_TO_ADDR
// if not need_heal_1 then
38383: LD_VAR 0 6
38387: NOT
38388: IFFALSE 38421
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
38390: LD_ADDR_EXP 8
38394: PUSH
38395: LD_EXP 8
38399: PPUSH
38400: LD_VAR 0 2
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PPUSH
38412: EMPTY
38413: PPUSH
38414: CALL 6348 0 3
38418: ST_TO_ADDR
38419: GO 38453
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
38421: LD_ADDR_EXP 8
38425: PUSH
38426: LD_EXP 8
38430: PPUSH
38431: LD_VAR 0 2
38435: PUSH
38436: LD_INT 1
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PPUSH
38443: LD_VAR 0 6
38447: PPUSH
38448: CALL 6348 0 3
38452: ST_TO_ADDR
// if not need_heal_2 then
38453: LD_VAR 0 7
38457: NOT
38458: IFFALSE 38491
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
38460: LD_ADDR_EXP 8
38464: PUSH
38465: LD_EXP 8
38469: PPUSH
38470: LD_VAR 0 2
38474: PUSH
38475: LD_INT 2
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PPUSH
38482: EMPTY
38483: PPUSH
38484: CALL 6348 0 3
38488: ST_TO_ADDR
38489: GO 38523
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
38491: LD_ADDR_EXP 8
38495: PUSH
38496: LD_EXP 8
38500: PPUSH
38501: LD_VAR 0 2
38505: PUSH
38506: LD_INT 2
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PPUSH
38513: LD_VAR 0 7
38517: PPUSH
38518: CALL 6348 0 3
38522: ST_TO_ADDR
// if need_heal_2 then
38523: LD_VAR 0 7
38527: IFFALSE 38699
// for j in need_heal_2 do
38529: LD_ADDR_VAR 0 3
38533: PUSH
38534: LD_VAR 0 7
38538: PUSH
38539: FOR_IN
38540: IFFALSE 38697
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
38542: LD_ADDR_VAR 0 5
38546: PUSH
38547: LD_EXP 5
38551: PUSH
38552: LD_VAR 0 2
38556: ARRAY
38557: PPUSH
38558: LD_INT 2
38560: PUSH
38561: LD_INT 30
38563: PUSH
38564: LD_INT 6
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 30
38573: PUSH
38574: LD_INT 7
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 30
38583: PUSH
38584: LD_INT 8
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 30
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 30
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 25
38613: PUSH
38614: LD_INT 4
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: PPUSH
38630: CALL_OW 72
38634: ST_TO_ADDR
// if tmp then
38635: LD_VAR 0 5
38639: IFFALSE 38695
// begin k := NearestUnitToUnit ( tmp , j ) ;
38641: LD_ADDR_VAR 0 4
38645: PUSH
38646: LD_VAR 0 5
38650: PPUSH
38651: LD_VAR 0 3
38655: PPUSH
38656: CALL_OW 74
38660: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
38661: LD_VAR 0 3
38665: PPUSH
38666: LD_VAR 0 4
38670: PPUSH
38671: CALL_OW 296
38675: PUSH
38676: LD_INT 7
38678: GREATER
38679: IFFALSE 38695
// ComMoveUnit ( j , k ) ;
38681: LD_VAR 0 3
38685: PPUSH
38686: LD_VAR 0 4
38690: PPUSH
38691: CALL_OW 112
// end ; end ;
38695: GO 38539
38697: POP
38698: POP
// if not need_heal_1 and not need_heal_2 then
38699: LD_VAR 0 6
38703: NOT
38704: PUSH
38705: LD_VAR 0 7
38709: NOT
38710: AND
38711: IFFALSE 38715
// continue ;
38713: GO 38218
// end ;
38715: GO 38218
38717: POP
38718: POP
// RaiseSailEvent ( 102 ) ;
38719: LD_INT 102
38721: PPUSH
38722: CALL_OW 427
// end ;
38726: LD_VAR 0 1
38730: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
38731: LD_INT 0
38733: PPUSH
38734: PPUSH
38735: PPUSH
38736: PPUSH
38737: PPUSH
// if not mc_bases then
38738: LD_EXP 5
38742: NOT
38743: IFFALSE 38747
// exit ;
38745: GO 39120
// for i = 1 to mc_bases do
38747: LD_ADDR_VAR 0 2
38751: PUSH
38752: DOUBLE
38753: LD_INT 1
38755: DEC
38756: ST_TO_ADDR
38757: LD_EXP 5
38761: PUSH
38762: FOR_TO
38763: IFFALSE 39118
// begin if not mc_building_need_repair [ i ] then
38765: LD_EXP 6
38769: PUSH
38770: LD_VAR 0 2
38774: ARRAY
38775: NOT
38776: IFFALSE 38814
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
38778: LD_ADDR_EXP 7
38782: PUSH
38783: LD_EXP 7
38787: PPUSH
38788: LD_VAR 0 2
38792: PPUSH
38793: EMPTY
38794: PPUSH
38795: CALL_OW 1
38799: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
38800: LD_VAR 0 2
38804: PPUSH
38805: LD_INT 101
38807: PPUSH
38808: CALL 37977 0 2
// continue ;
38812: GO 38762
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
38814: LD_ADDR_EXP 11
38818: PUSH
38819: LD_EXP 11
38823: PPUSH
38824: LD_VAR 0 2
38828: PPUSH
38829: EMPTY
38830: PPUSH
38831: CALL_OW 1
38835: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
38836: LD_VAR 0 2
38840: PPUSH
38841: LD_INT 103
38843: PPUSH
38844: CALL 37977 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
38848: LD_ADDR_VAR 0 5
38852: PUSH
38853: LD_EXP 5
38857: PUSH
38858: LD_VAR 0 2
38862: ARRAY
38863: PPUSH
38864: LD_INT 2
38866: PUSH
38867: LD_INT 25
38869: PUSH
38870: LD_INT 2
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 25
38879: PUSH
38880: LD_INT 16
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: LIST
38891: PUSH
38892: EMPTY
38893: LIST
38894: PPUSH
38895: CALL_OW 72
38899: ST_TO_ADDR
// if not tmp then
38900: LD_VAR 0 5
38904: NOT
38905: IFFALSE 38909
// continue ;
38907: GO 38762
// for j in tmp do
38909: LD_ADDR_VAR 0 3
38913: PUSH
38914: LD_VAR 0 5
38918: PUSH
38919: FOR_IN
38920: IFFALSE 39114
// begin if mc_need_heal [ i ] then
38922: LD_EXP 8
38926: PUSH
38927: LD_VAR 0 2
38931: ARRAY
38932: IFFALSE 38980
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
38934: LD_VAR 0 3
38938: PUSH
38939: LD_EXP 8
38943: PUSH
38944: LD_VAR 0 2
38948: ARRAY
38949: PUSH
38950: LD_INT 1
38952: ARRAY
38953: IN
38954: PUSH
38955: LD_VAR 0 3
38959: PUSH
38960: LD_EXP 8
38964: PUSH
38965: LD_VAR 0 2
38969: ARRAY
38970: PUSH
38971: LD_INT 2
38973: ARRAY
38974: IN
38975: OR
38976: IFFALSE 38980
// continue ;
38978: GO 38919
// if IsInUnit ( j ) then
38980: LD_VAR 0 3
38984: PPUSH
38985: CALL_OW 310
38989: IFFALSE 39000
// ComExitBuilding ( j ) ;
38991: LD_VAR 0 3
38995: PPUSH
38996: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
39000: LD_VAR 0 3
39004: PUSH
39005: LD_EXP 7
39009: PUSH
39010: LD_VAR 0 2
39014: ARRAY
39015: IN
39016: NOT
39017: IFFALSE 39075
// begin SetTag ( j , 101 ) ;
39019: LD_VAR 0 3
39023: PPUSH
39024: LD_INT 101
39026: PPUSH
39027: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
39031: LD_ADDR_EXP 7
39035: PUSH
39036: LD_EXP 7
39040: PPUSH
39041: LD_VAR 0 2
39045: PUSH
39046: LD_EXP 7
39050: PUSH
39051: LD_VAR 0 2
39055: ARRAY
39056: PUSH
39057: LD_INT 1
39059: PLUS
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PPUSH
39065: LD_VAR 0 3
39069: PPUSH
39070: CALL 6348 0 3
39074: ST_TO_ADDR
// end ; Wait ( 3 ) ;
39075: LD_INT 3
39077: PPUSH
39078: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
39082: LD_VAR 0 3
39086: PPUSH
39087: LD_EXP 6
39091: PUSH
39092: LD_VAR 0 2
39096: ARRAY
39097: PPUSH
39098: LD_VAR 0 3
39102: PPUSH
39103: CALL_OW 74
39107: PPUSH
39108: CALL_OW 130
// end ;
39112: GO 38919
39114: POP
39115: POP
// end ;
39116: GO 38762
39118: POP
39119: POP
// end ;
39120: LD_VAR 0 1
39124: RET
// export function MC_Heal ; var i , j , tmp ; begin
39125: LD_INT 0
39127: PPUSH
39128: PPUSH
39129: PPUSH
39130: PPUSH
// if not mc_bases then
39131: LD_EXP 5
39135: NOT
39136: IFFALSE 39140
// exit ;
39138: GO 39505
// for i = 1 to mc_bases do
39140: LD_ADDR_VAR 0 2
39144: PUSH
39145: DOUBLE
39146: LD_INT 1
39148: DEC
39149: ST_TO_ADDR
39150: LD_EXP 5
39154: PUSH
39155: FOR_TO
39156: IFFALSE 39503
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
39158: LD_EXP 8
39162: PUSH
39163: LD_VAR 0 2
39167: ARRAY
39168: PUSH
39169: LD_INT 1
39171: ARRAY
39172: NOT
39173: PUSH
39174: LD_EXP 8
39178: PUSH
39179: LD_VAR 0 2
39183: ARRAY
39184: PUSH
39185: LD_INT 2
39187: ARRAY
39188: NOT
39189: AND
39190: IFFALSE 39228
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
39192: LD_ADDR_EXP 9
39196: PUSH
39197: LD_EXP 9
39201: PPUSH
39202: LD_VAR 0 2
39206: PPUSH
39207: EMPTY
39208: PPUSH
39209: CALL_OW 1
39213: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
39214: LD_VAR 0 2
39218: PPUSH
39219: LD_INT 102
39221: PPUSH
39222: CALL 37977 0 2
// continue ;
39226: GO 39155
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
39228: LD_ADDR_VAR 0 4
39232: PUSH
39233: LD_EXP 5
39237: PUSH
39238: LD_VAR 0 2
39242: ARRAY
39243: PPUSH
39244: LD_INT 25
39246: PUSH
39247: LD_INT 4
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PPUSH
39254: CALL_OW 72
39258: ST_TO_ADDR
// if not tmp then
39259: LD_VAR 0 4
39263: NOT
39264: IFFALSE 39268
// continue ;
39266: GO 39155
// for j in tmp do
39268: LD_ADDR_VAR 0 3
39272: PUSH
39273: LD_VAR 0 4
39277: PUSH
39278: FOR_IN
39279: IFFALSE 39499
// begin if IsInUnit ( j ) then
39281: LD_VAR 0 3
39285: PPUSH
39286: CALL_OW 310
39290: IFFALSE 39301
// ComExitBuilding ( j ) ;
39292: LD_VAR 0 3
39296: PPUSH
39297: CALL_OW 122
// if not j in mc_healers [ i ] then
39301: LD_VAR 0 3
39305: PUSH
39306: LD_EXP 9
39310: PUSH
39311: LD_VAR 0 2
39315: ARRAY
39316: IN
39317: NOT
39318: IFFALSE 39364
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
39320: LD_ADDR_EXP 9
39324: PUSH
39325: LD_EXP 9
39329: PPUSH
39330: LD_VAR 0 2
39334: PUSH
39335: LD_EXP 9
39339: PUSH
39340: LD_VAR 0 2
39344: ARRAY
39345: PUSH
39346: LD_INT 1
39348: PLUS
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PPUSH
39354: LD_VAR 0 3
39358: PPUSH
39359: CALL 6348 0 3
39363: ST_TO_ADDR
// if not GetTag ( j ) then
39364: LD_VAR 0 3
39368: PPUSH
39369: CALL_OW 110
39373: NOT
39374: IFFALSE 39388
// SetTag ( j , 102 ) ;
39376: LD_VAR 0 3
39380: PPUSH
39381: LD_INT 102
39383: PPUSH
39384: CALL_OW 109
// Wait ( 3 ) ;
39388: LD_INT 3
39390: PPUSH
39391: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
39395: LD_EXP 8
39399: PUSH
39400: LD_VAR 0 2
39404: ARRAY
39405: PUSH
39406: LD_INT 1
39408: ARRAY
39409: IFFALSE 39441
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
39411: LD_VAR 0 3
39415: PPUSH
39416: LD_EXP 8
39420: PUSH
39421: LD_VAR 0 2
39425: ARRAY
39426: PUSH
39427: LD_INT 1
39429: ARRAY
39430: PUSH
39431: LD_INT 1
39433: ARRAY
39434: PPUSH
39435: CALL_OW 128
39439: GO 39497
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
39441: LD_VAR 0 3
39445: PPUSH
39446: CALL_OW 314
39450: NOT
39451: PUSH
39452: LD_EXP 8
39456: PUSH
39457: LD_VAR 0 2
39461: ARRAY
39462: PUSH
39463: LD_INT 2
39465: ARRAY
39466: AND
39467: IFFALSE 39497
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
39469: LD_VAR 0 3
39473: PPUSH
39474: LD_EXP 8
39478: PUSH
39479: LD_VAR 0 2
39483: ARRAY
39484: PUSH
39485: LD_INT 2
39487: ARRAY
39488: PUSH
39489: LD_INT 1
39491: ARRAY
39492: PPUSH
39493: CALL_OW 128
// end ;
39497: GO 39278
39499: POP
39500: POP
// end ;
39501: GO 39155
39503: POP
39504: POP
// end ;
39505: LD_VAR 0 1
39509: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
39510: LD_INT 0
39512: PPUSH
39513: PPUSH
39514: PPUSH
39515: PPUSH
// if not mc_bases then
39516: LD_EXP 5
39520: NOT
39521: IFFALSE 39525
// exit ;
39523: GO 40299
// for i = 1 to mc_bases do
39525: LD_ADDR_VAR 0 2
39529: PUSH
39530: DOUBLE
39531: LD_INT 1
39533: DEC
39534: ST_TO_ADDR
39535: LD_EXP 5
39539: PUSH
39540: FOR_TO
39541: IFFALSE 40297
// begin if mc_scan [ i ] then
39543: LD_EXP 27
39547: PUSH
39548: LD_VAR 0 2
39552: ARRAY
39553: IFFALSE 39557
// continue ;
39555: GO 39540
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
39557: LD_EXP 10
39561: PUSH
39562: LD_VAR 0 2
39566: ARRAY
39567: NOT
39568: PUSH
39569: LD_EXP 12
39573: PUSH
39574: LD_VAR 0 2
39578: ARRAY
39579: NOT
39580: AND
39581: PUSH
39582: LD_EXP 11
39586: PUSH
39587: LD_VAR 0 2
39591: ARRAY
39592: AND
39593: IFFALSE 39631
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
39595: LD_ADDR_EXP 11
39599: PUSH
39600: LD_EXP 11
39604: PPUSH
39605: LD_VAR 0 2
39609: PPUSH
39610: EMPTY
39611: PPUSH
39612: CALL_OW 1
39616: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
39617: LD_VAR 0 2
39621: PPUSH
39622: LD_INT 103
39624: PPUSH
39625: CALL 37977 0 2
// continue ;
39629: GO 39540
// end ; if mc_construct_list [ i ] then
39631: LD_EXP 12
39635: PUSH
39636: LD_VAR 0 2
39640: ARRAY
39641: IFFALSE 39846
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
39643: LD_ADDR_VAR 0 4
39647: PUSH
39648: LD_EXP 5
39652: PUSH
39653: LD_VAR 0 2
39657: ARRAY
39658: PPUSH
39659: LD_INT 25
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PPUSH
39669: CALL_OW 72
39673: PUSH
39674: LD_EXP 7
39678: PUSH
39679: LD_VAR 0 2
39683: ARRAY
39684: DIFF
39685: ST_TO_ADDR
// if not tmp then
39686: LD_VAR 0 4
39690: NOT
39691: IFFALSE 39695
// continue ;
39693: GO 39540
// for j in tmp do
39695: LD_ADDR_VAR 0 3
39699: PUSH
39700: LD_VAR 0 4
39704: PUSH
39705: FOR_IN
39706: IFFALSE 39842
// begin if not mc_builders [ i ] then
39708: LD_EXP 11
39712: PUSH
39713: LD_VAR 0 2
39717: ARRAY
39718: NOT
39719: IFFALSE 39777
// begin SetTag ( j , 103 ) ;
39721: LD_VAR 0 3
39725: PPUSH
39726: LD_INT 103
39728: PPUSH
39729: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
39733: LD_ADDR_EXP 11
39737: PUSH
39738: LD_EXP 11
39742: PPUSH
39743: LD_VAR 0 2
39747: PUSH
39748: LD_EXP 11
39752: PUSH
39753: LD_VAR 0 2
39757: ARRAY
39758: PUSH
39759: LD_INT 1
39761: PLUS
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PPUSH
39767: LD_VAR 0 3
39771: PPUSH
39772: CALL 6348 0 3
39776: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
39777: LD_VAR 0 3
39781: PPUSH
39782: CALL_OW 310
39786: IFFALSE 39797
// ComExitBuilding ( j ) ;
39788: LD_VAR 0 3
39792: PPUSH
39793: CALL_OW 122
// wait ( 3 ) ;
39797: LD_INT 3
39799: PPUSH
39800: CALL_OW 67
// if not HasTask ( j ) then
39804: LD_VAR 0 3
39808: PPUSH
39809: CALL_OW 314
39813: NOT
39814: IFFALSE 39840
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
39816: LD_VAR 0 3
39820: PPUSH
39821: LD_EXP 12
39825: PUSH
39826: LD_VAR 0 2
39830: ARRAY
39831: PUSH
39832: LD_INT 1
39834: ARRAY
39835: PPUSH
39836: CALL 8754 0 2
// end ;
39840: GO 39705
39842: POP
39843: POP
// end else
39844: GO 40295
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
39846: LD_EXP 10
39850: PUSH
39851: LD_VAR 0 2
39855: ARRAY
39856: PUSH
39857: LD_EXP 5
39861: PUSH
39862: LD_VAR 0 2
39866: ARRAY
39867: PPUSH
39868: LD_INT 2
39870: PUSH
39871: LD_INT 30
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 30
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: LIST
39895: PPUSH
39896: CALL_OW 72
39900: AND
39901: IFFALSE 40295
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
39903: LD_EXP 5
39907: PUSH
39908: LD_VAR 0 2
39912: ARRAY
39913: PPUSH
39914: LD_INT 2
39916: PUSH
39917: LD_INT 30
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 30
39929: PUSH
39930: LD_INT 1
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: LIST
39941: PPUSH
39942: CALL_OW 72
39946: PUSH
39947: LD_INT 1
39949: ARRAY
39950: PPUSH
39951: LD_EXP 10
39955: PUSH
39956: LD_VAR 0 2
39960: ARRAY
39961: PUSH
39962: LD_INT 1
39964: ARRAY
39965: PUSH
39966: LD_INT 1
39968: ARRAY
39969: PPUSH
39970: LD_EXP 10
39974: PUSH
39975: LD_VAR 0 2
39979: ARRAY
39980: PUSH
39981: LD_INT 1
39983: ARRAY
39984: PUSH
39985: LD_INT 2
39987: ARRAY
39988: PPUSH
39989: LD_EXP 10
39993: PUSH
39994: LD_VAR 0 2
39998: ARRAY
39999: PUSH
40000: LD_INT 1
40002: ARRAY
40003: PUSH
40004: LD_INT 3
40006: ARRAY
40007: PPUSH
40008: LD_EXP 10
40012: PUSH
40013: LD_VAR 0 2
40017: ARRAY
40018: PUSH
40019: LD_INT 1
40021: ARRAY
40022: PUSH
40023: LD_INT 4
40025: ARRAY
40026: PPUSH
40027: CALL 12202 0 5
40031: IFFALSE 40295
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
40033: LD_ADDR_VAR 0 4
40037: PUSH
40038: LD_EXP 5
40042: PUSH
40043: LD_VAR 0 2
40047: ARRAY
40048: PPUSH
40049: LD_INT 25
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PPUSH
40059: CALL_OW 72
40063: PUSH
40064: LD_EXP 7
40068: PUSH
40069: LD_VAR 0 2
40073: ARRAY
40074: DIFF
40075: ST_TO_ADDR
// if not tmp then
40076: LD_VAR 0 4
40080: NOT
40081: IFFALSE 40085
// continue ;
40083: GO 39540
// for j in tmp do
40085: LD_ADDR_VAR 0 3
40089: PUSH
40090: LD_VAR 0 4
40094: PUSH
40095: FOR_IN
40096: IFFALSE 40293
// begin if not mc_builders [ i ] then
40098: LD_EXP 11
40102: PUSH
40103: LD_VAR 0 2
40107: ARRAY
40108: NOT
40109: IFFALSE 40167
// begin SetTag ( j , 103 ) ;
40111: LD_VAR 0 3
40115: PPUSH
40116: LD_INT 103
40118: PPUSH
40119: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
40123: LD_ADDR_EXP 11
40127: PUSH
40128: LD_EXP 11
40132: PPUSH
40133: LD_VAR 0 2
40137: PUSH
40138: LD_EXP 11
40142: PUSH
40143: LD_VAR 0 2
40147: ARRAY
40148: PUSH
40149: LD_INT 1
40151: PLUS
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PPUSH
40157: LD_VAR 0 3
40161: PPUSH
40162: CALL 6348 0 3
40166: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
40167: LD_VAR 0 3
40171: PPUSH
40172: CALL_OW 310
40176: IFFALSE 40187
// ComExitBuilding ( j ) ;
40178: LD_VAR 0 3
40182: PPUSH
40183: CALL_OW 122
// wait ( 3 ) ;
40187: LD_INT 3
40189: PPUSH
40190: CALL_OW 67
// if not HasTask ( j ) then
40194: LD_VAR 0 3
40198: PPUSH
40199: CALL_OW 314
40203: NOT
40204: IFFALSE 40291
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
40206: LD_VAR 0 3
40210: PPUSH
40211: LD_EXP 10
40215: PUSH
40216: LD_VAR 0 2
40220: ARRAY
40221: PUSH
40222: LD_INT 1
40224: ARRAY
40225: PUSH
40226: LD_INT 1
40228: ARRAY
40229: PPUSH
40230: LD_EXP 10
40234: PUSH
40235: LD_VAR 0 2
40239: ARRAY
40240: PUSH
40241: LD_INT 1
40243: ARRAY
40244: PUSH
40245: LD_INT 2
40247: ARRAY
40248: PPUSH
40249: LD_EXP 10
40253: PUSH
40254: LD_VAR 0 2
40258: ARRAY
40259: PUSH
40260: LD_INT 1
40262: ARRAY
40263: PUSH
40264: LD_INT 3
40266: ARRAY
40267: PPUSH
40268: LD_EXP 10
40272: PUSH
40273: LD_VAR 0 2
40277: ARRAY
40278: PUSH
40279: LD_INT 1
40281: ARRAY
40282: PUSH
40283: LD_INT 4
40285: ARRAY
40286: PPUSH
40287: CALL_OW 145
// end ;
40291: GO 40095
40293: POP
40294: POP
// end ; end ;
40295: GO 39540
40297: POP
40298: POP
// end ;
40299: LD_VAR 0 1
40303: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
40304: LD_INT 0
40306: PPUSH
40307: PPUSH
40308: PPUSH
40309: PPUSH
40310: PPUSH
40311: PPUSH
40312: PPUSH
// if not mc_bases then
40313: LD_EXP 5
40317: NOT
40318: IFFALSE 40322
// exit ;
40320: GO 40618
// for i = 1 to mc_bases do
40322: LD_ADDR_VAR 0 2
40326: PUSH
40327: DOUBLE
40328: LD_INT 1
40330: DEC
40331: ST_TO_ADDR
40332: LD_EXP 5
40336: PUSH
40337: FOR_TO
40338: IFFALSE 40616
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
40340: LD_EXP 13
40344: PUSH
40345: LD_VAR 0 2
40349: ARRAY
40350: NOT
40351: PUSH
40352: LD_EXP 5
40356: PUSH
40357: LD_VAR 0 2
40361: ARRAY
40362: PPUSH
40363: LD_INT 30
40365: PUSH
40366: LD_INT 3
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PPUSH
40373: CALL_OW 72
40377: NOT
40378: OR
40379: IFFALSE 40383
// continue ;
40381: GO 40337
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
40383: LD_EXP 13
40387: PUSH
40388: LD_VAR 0 2
40392: ARRAY
40393: PUSH
40394: LD_INT 1
40396: ARRAY
40397: PPUSH
40398: CALL_OW 269
40402: IFFALSE 40468
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
40404: LD_ADDR_VAR 0 4
40408: PUSH
40409: LD_EXP 13
40413: PUSH
40414: LD_VAR 0 2
40418: ARRAY
40419: PPUSH
40420: LD_INT 1
40422: PPUSH
40423: CALL_OW 3
40427: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
40428: LD_ADDR_EXP 13
40432: PUSH
40433: LD_EXP 13
40437: PPUSH
40438: LD_VAR 0 2
40442: PPUSH
40443: LD_VAR 0 4
40447: PPUSH
40448: CALL_OW 1
40452: ST_TO_ADDR
// if not mc_turret_list [ i ] then
40453: LD_EXP 13
40457: PUSH
40458: LD_VAR 0 2
40462: ARRAY
40463: NOT
40464: IFFALSE 40468
// continue ;
40466: GO 40337
// end ; busy := false ;
40468: LD_ADDR_VAR 0 6
40472: PUSH
40473: LD_INT 0
40475: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
40476: LD_ADDR_VAR 0 4
40480: PUSH
40481: LD_EXP 5
40485: PUSH
40486: LD_VAR 0 2
40490: ARRAY
40491: PPUSH
40492: LD_INT 30
40494: PUSH
40495: LD_INT 3
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PPUSH
40502: CALL_OW 72
40506: ST_TO_ADDR
// for j in tmp do
40507: LD_ADDR_VAR 0 3
40511: PUSH
40512: LD_VAR 0 4
40516: PUSH
40517: FOR_IN
40518: IFFALSE 40546
// if not BuildingStatus ( j ) = bs_idle then
40520: LD_VAR 0 3
40524: PPUSH
40525: CALL_OW 461
40529: PUSH
40530: LD_INT 2
40532: EQUAL
40533: NOT
40534: IFFALSE 40544
// busy := true ;
40536: LD_ADDR_VAR 0 6
40540: PUSH
40541: LD_INT 1
40543: ST_TO_ADDR
40544: GO 40517
40546: POP
40547: POP
// if busy then
40548: LD_VAR 0 6
40552: IFFALSE 40556
// continue ;
40554: GO 40337
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
40556: LD_ADDR_VAR 0 7
40560: PUSH
40561: LD_EXP 13
40565: PUSH
40566: LD_VAR 0 2
40570: ARRAY
40571: PUSH
40572: LD_INT 1
40574: ARRAY
40575: PPUSH
40576: CALL 10650 0 1
40580: ST_TO_ADDR
// if not weapon then
40581: LD_VAR 0 7
40585: NOT
40586: IFFALSE 40590
// continue ;
40588: GO 40337
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
40590: LD_EXP 13
40594: PUSH
40595: LD_VAR 0 2
40599: ARRAY
40600: PUSH
40601: LD_INT 1
40603: ARRAY
40604: PPUSH
40605: LD_VAR 0 7
40609: PPUSH
40610: CALL_OW 148
// end ;
40614: GO 40337
40616: POP
40617: POP
// end ;
40618: LD_VAR 0 1
40622: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
40623: LD_INT 0
40625: PPUSH
40626: PPUSH
40627: PPUSH
40628: PPUSH
40629: PPUSH
40630: PPUSH
// if not mc_bases then
40631: LD_EXP 5
40635: NOT
40636: IFFALSE 40640
// exit ;
40638: GO 41625
// for i = 1 to mc_bases do
40640: LD_ADDR_VAR 0 2
40644: PUSH
40645: DOUBLE
40646: LD_INT 1
40648: DEC
40649: ST_TO_ADDR
40650: LD_EXP 5
40654: PUSH
40655: FOR_TO
40656: IFFALSE 41623
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
40658: LD_EXP 18
40662: PUSH
40663: LD_VAR 0 2
40667: ARRAY
40668: NOT
40669: PUSH
40670: LD_EXP 18
40674: PUSH
40675: LD_VAR 0 2
40679: ARRAY
40680: PUSH
40681: LD_EXP 19
40685: PUSH
40686: LD_VAR 0 2
40690: ARRAY
40691: EQUAL
40692: OR
40693: IFFALSE 40697
// continue ;
40695: GO 40655
// if mc_miners [ i ] then
40697: LD_EXP 19
40701: PUSH
40702: LD_VAR 0 2
40706: ARRAY
40707: IFFALSE 41310
// begin k := 1 ;
40709: LD_ADDR_VAR 0 4
40713: PUSH
40714: LD_INT 1
40716: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
40717: LD_ADDR_VAR 0 3
40721: PUSH
40722: DOUBLE
40723: LD_EXP 19
40727: PUSH
40728: LD_VAR 0 2
40732: ARRAY
40733: INC
40734: ST_TO_ADDR
40735: LD_INT 1
40737: PUSH
40738: FOR_DOWNTO
40739: IFFALSE 41308
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
40741: LD_EXP 19
40745: PUSH
40746: LD_VAR 0 2
40750: ARRAY
40751: PUSH
40752: LD_VAR 0 3
40756: ARRAY
40757: PPUSH
40758: CALL_OW 301
40762: IFFALSE 40825
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
40764: LD_ADDR_VAR 0 5
40768: PUSH
40769: LD_EXP 19
40773: PUSH
40774: LD_VAR 0 2
40778: ARRAY
40779: PUSH
40780: LD_EXP 19
40784: PUSH
40785: LD_VAR 0 2
40789: ARRAY
40790: PUSH
40791: LD_VAR 0 3
40795: ARRAY
40796: DIFF
40797: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
40798: LD_ADDR_EXP 19
40802: PUSH
40803: LD_EXP 19
40807: PPUSH
40808: LD_VAR 0 2
40812: PPUSH
40813: LD_VAR 0 5
40817: PPUSH
40818: CALL_OW 1
40822: ST_TO_ADDR
// continue ;
40823: GO 40738
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
40825: LD_EXP 19
40829: PUSH
40830: LD_VAR 0 2
40834: ARRAY
40835: PUSH
40836: LD_VAR 0 3
40840: ARRAY
40841: PPUSH
40842: CALL 5849 0 1
40846: PUSH
40847: LD_EXP 19
40851: PUSH
40852: LD_VAR 0 2
40856: ARRAY
40857: PUSH
40858: LD_VAR 0 3
40862: ARRAY
40863: PPUSH
40864: CALL_OW 255
40868: PPUSH
40869: LD_EXP 18
40873: PUSH
40874: LD_VAR 0 2
40878: ARRAY
40879: PUSH
40880: LD_VAR 0 4
40884: ARRAY
40885: PUSH
40886: LD_INT 1
40888: ARRAY
40889: PPUSH
40890: LD_EXP 18
40894: PUSH
40895: LD_VAR 0 2
40899: ARRAY
40900: PUSH
40901: LD_VAR 0 4
40905: ARRAY
40906: PUSH
40907: LD_INT 2
40909: ARRAY
40910: PPUSH
40911: LD_INT 15
40913: PPUSH
40914: CALL 6842 0 4
40918: PUSH
40919: LD_INT 4
40921: ARRAY
40922: PUSH
40923: LD_EXP 19
40927: PUSH
40928: LD_VAR 0 2
40932: ARRAY
40933: PUSH
40934: LD_VAR 0 3
40938: ARRAY
40939: PPUSH
40940: LD_INT 10
40942: PPUSH
40943: CALL 8539 0 2
40947: PUSH
40948: LD_INT 4
40950: ARRAY
40951: OR
40952: AND
40953: IFFALSE 40976
// ComStop ( mc_miners [ i ] [ j ] ) ;
40955: LD_EXP 19
40959: PUSH
40960: LD_VAR 0 2
40964: ARRAY
40965: PUSH
40966: LD_VAR 0 3
40970: ARRAY
40971: PPUSH
40972: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
40976: LD_EXP 19
40980: PUSH
40981: LD_VAR 0 2
40985: ARRAY
40986: PUSH
40987: LD_VAR 0 3
40991: ARRAY
40992: PPUSH
40993: CALL_OW 257
40997: PUSH
40998: LD_INT 1
41000: EQUAL
41001: PUSH
41002: LD_EXP 19
41006: PUSH
41007: LD_VAR 0 2
41011: ARRAY
41012: PUSH
41013: LD_VAR 0 3
41017: ARRAY
41018: PPUSH
41019: CALL_OW 459
41023: NOT
41024: AND
41025: PUSH
41026: LD_EXP 19
41030: PUSH
41031: LD_VAR 0 2
41035: ARRAY
41036: PUSH
41037: LD_VAR 0 3
41041: ARRAY
41042: PPUSH
41043: CALL_OW 255
41047: PPUSH
41048: LD_EXP 18
41052: PUSH
41053: LD_VAR 0 2
41057: ARRAY
41058: PUSH
41059: LD_VAR 0 4
41063: ARRAY
41064: PUSH
41065: LD_INT 1
41067: ARRAY
41068: PPUSH
41069: LD_EXP 18
41073: PUSH
41074: LD_VAR 0 2
41078: ARRAY
41079: PUSH
41080: LD_VAR 0 4
41084: ARRAY
41085: PUSH
41086: LD_INT 2
41088: ARRAY
41089: PPUSH
41090: LD_INT 15
41092: PPUSH
41093: CALL 6842 0 4
41097: PUSH
41098: LD_INT 4
41100: ARRAY
41101: PUSH
41102: LD_INT 0
41104: EQUAL
41105: AND
41106: PUSH
41107: LD_EXP 19
41111: PUSH
41112: LD_VAR 0 2
41116: ARRAY
41117: PUSH
41118: LD_VAR 0 3
41122: ARRAY
41123: PPUSH
41124: CALL_OW 314
41128: NOT
41129: AND
41130: IFFALSE 41306
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
41132: LD_EXP 19
41136: PUSH
41137: LD_VAR 0 2
41141: ARRAY
41142: PUSH
41143: LD_VAR 0 3
41147: ARRAY
41148: PPUSH
41149: CALL_OW 310
41153: IFFALSE 41176
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
41155: LD_EXP 19
41159: PUSH
41160: LD_VAR 0 2
41164: ARRAY
41165: PUSH
41166: LD_VAR 0 3
41170: ARRAY
41171: PPUSH
41172: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
41176: LD_EXP 19
41180: PUSH
41181: LD_VAR 0 2
41185: ARRAY
41186: PUSH
41187: LD_VAR 0 3
41191: ARRAY
41192: PPUSH
41193: CALL_OW 314
41197: NOT
41198: IFFALSE 41266
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
41200: LD_EXP 19
41204: PUSH
41205: LD_VAR 0 2
41209: ARRAY
41210: PUSH
41211: LD_VAR 0 3
41215: ARRAY
41216: PPUSH
41217: LD_EXP 18
41221: PUSH
41222: LD_VAR 0 2
41226: ARRAY
41227: PUSH
41228: LD_VAR 0 4
41232: ARRAY
41233: PUSH
41234: LD_INT 1
41236: ARRAY
41237: PPUSH
41238: LD_EXP 18
41242: PUSH
41243: LD_VAR 0 2
41247: ARRAY
41248: PUSH
41249: LD_VAR 0 4
41253: ARRAY
41254: PUSH
41255: LD_INT 2
41257: ARRAY
41258: PPUSH
41259: LD_INT 0
41261: PPUSH
41262: CALL_OW 193
// k := k + 1 ;
41266: LD_ADDR_VAR 0 4
41270: PUSH
41271: LD_VAR 0 4
41275: PUSH
41276: LD_INT 1
41278: PLUS
41279: ST_TO_ADDR
// if k > mc_mines [ i ] then
41280: LD_VAR 0 4
41284: PUSH
41285: LD_EXP 18
41289: PUSH
41290: LD_VAR 0 2
41294: ARRAY
41295: GREATER
41296: IFFALSE 41306
// k := 1 ;
41298: LD_ADDR_VAR 0 4
41302: PUSH
41303: LD_INT 1
41305: ST_TO_ADDR
// end ; end ;
41306: GO 40738
41308: POP
41309: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
41310: LD_ADDR_VAR 0 5
41314: PUSH
41315: LD_EXP 5
41319: PUSH
41320: LD_VAR 0 2
41324: ARRAY
41325: PPUSH
41326: LD_INT 2
41328: PUSH
41329: LD_INT 30
41331: PUSH
41332: LD_INT 4
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 30
41341: PUSH
41342: LD_INT 5
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 30
41351: PUSH
41352: LD_INT 32
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: PPUSH
41365: CALL_OW 72
41369: ST_TO_ADDR
// if not tmp then
41370: LD_VAR 0 5
41374: NOT
41375: IFFALSE 41379
// continue ;
41377: GO 40655
// list := [ ] ;
41379: LD_ADDR_VAR 0 6
41383: PUSH
41384: EMPTY
41385: ST_TO_ADDR
// for j in tmp do
41386: LD_ADDR_VAR 0 3
41390: PUSH
41391: LD_VAR 0 5
41395: PUSH
41396: FOR_IN
41397: IFFALSE 41466
// begin for k in UnitsInside ( j ) do
41399: LD_ADDR_VAR 0 4
41403: PUSH
41404: LD_VAR 0 3
41408: PPUSH
41409: CALL_OW 313
41413: PUSH
41414: FOR_IN
41415: IFFALSE 41462
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
41417: LD_VAR 0 4
41421: PPUSH
41422: CALL_OW 257
41426: PUSH
41427: LD_INT 1
41429: EQUAL
41430: PUSH
41431: LD_VAR 0 4
41435: PPUSH
41436: CALL_OW 459
41440: NOT
41441: AND
41442: IFFALSE 41460
// list := list ^ k ;
41444: LD_ADDR_VAR 0 6
41448: PUSH
41449: LD_VAR 0 6
41453: PUSH
41454: LD_VAR 0 4
41458: ADD
41459: ST_TO_ADDR
41460: GO 41414
41462: POP
41463: POP
// end ;
41464: GO 41396
41466: POP
41467: POP
// list := list diff mc_miners [ i ] ;
41468: LD_ADDR_VAR 0 6
41472: PUSH
41473: LD_VAR 0 6
41477: PUSH
41478: LD_EXP 19
41482: PUSH
41483: LD_VAR 0 2
41487: ARRAY
41488: DIFF
41489: ST_TO_ADDR
// if not list then
41490: LD_VAR 0 6
41494: NOT
41495: IFFALSE 41499
// continue ;
41497: GO 40655
// k := mc_mines [ i ] - mc_miners [ i ] ;
41499: LD_ADDR_VAR 0 4
41503: PUSH
41504: LD_EXP 18
41508: PUSH
41509: LD_VAR 0 2
41513: ARRAY
41514: PUSH
41515: LD_EXP 19
41519: PUSH
41520: LD_VAR 0 2
41524: ARRAY
41525: MINUS
41526: ST_TO_ADDR
// if k > list then
41527: LD_VAR 0 4
41531: PUSH
41532: LD_VAR 0 6
41536: GREATER
41537: IFFALSE 41549
// k := list ;
41539: LD_ADDR_VAR 0 4
41543: PUSH
41544: LD_VAR 0 6
41548: ST_TO_ADDR
// for j = 1 to k do
41549: LD_ADDR_VAR 0 3
41553: PUSH
41554: DOUBLE
41555: LD_INT 1
41557: DEC
41558: ST_TO_ADDR
41559: LD_VAR 0 4
41563: PUSH
41564: FOR_TO
41565: IFFALSE 41619
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
41567: LD_ADDR_EXP 19
41571: PUSH
41572: LD_EXP 19
41576: PPUSH
41577: LD_VAR 0 2
41581: PUSH
41582: LD_EXP 19
41586: PUSH
41587: LD_VAR 0 2
41591: ARRAY
41592: PUSH
41593: LD_INT 1
41595: PLUS
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PPUSH
41601: LD_VAR 0 6
41605: PUSH
41606: LD_VAR 0 3
41610: ARRAY
41611: PPUSH
41612: CALL 6348 0 3
41616: ST_TO_ADDR
41617: GO 41564
41619: POP
41620: POP
// end ;
41621: GO 40655
41623: POP
41624: POP
// end ;
41625: LD_VAR 0 1
41629: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
41630: LD_INT 0
41632: PPUSH
41633: PPUSH
41634: PPUSH
41635: PPUSH
41636: PPUSH
// if not mc_bases then
41637: LD_EXP 5
41641: NOT
41642: IFFALSE 41646
// exit ;
41644: GO 42434
// for i = 1 to mc_bases do
41646: LD_ADDR_VAR 0 2
41650: PUSH
41651: DOUBLE
41652: LD_INT 1
41654: DEC
41655: ST_TO_ADDR
41656: LD_EXP 5
41660: PUSH
41661: FOR_TO
41662: IFFALSE 42432
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
41664: LD_EXP 5
41668: PUSH
41669: LD_VAR 0 2
41673: ARRAY
41674: NOT
41675: PUSH
41676: LD_EXP 12
41680: PUSH
41681: LD_VAR 0 2
41685: ARRAY
41686: OR
41687: IFFALSE 41691
// continue ;
41689: GO 41661
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
41691: LD_EXP 21
41695: PUSH
41696: LD_VAR 0 2
41700: ARRAY
41701: NOT
41702: PUSH
41703: LD_EXP 22
41707: PUSH
41708: LD_VAR 0 2
41712: ARRAY
41713: AND
41714: IFFALSE 41752
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
41716: LD_ADDR_EXP 22
41720: PUSH
41721: LD_EXP 22
41725: PPUSH
41726: LD_VAR 0 2
41730: PPUSH
41731: EMPTY
41732: PPUSH
41733: CALL_OW 1
41737: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
41738: LD_VAR 0 2
41742: PPUSH
41743: LD_INT 107
41745: PPUSH
41746: CALL 37977 0 2
// continue ;
41750: GO 41661
// end ; target := [ ] ;
41752: LD_ADDR_VAR 0 5
41756: PUSH
41757: EMPTY
41758: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
41759: LD_ADDR_VAR 0 3
41763: PUSH
41764: DOUBLE
41765: LD_EXP 21
41769: PUSH
41770: LD_VAR 0 2
41774: ARRAY
41775: INC
41776: ST_TO_ADDR
41777: LD_INT 1
41779: PUSH
41780: FOR_DOWNTO
41781: IFFALSE 42041
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
41783: LD_EXP 21
41787: PUSH
41788: LD_VAR 0 2
41792: ARRAY
41793: PUSH
41794: LD_VAR 0 3
41798: ARRAY
41799: PUSH
41800: LD_INT 2
41802: ARRAY
41803: PPUSH
41804: LD_EXP 21
41808: PUSH
41809: LD_VAR 0 2
41813: ARRAY
41814: PUSH
41815: LD_VAR 0 3
41819: ARRAY
41820: PUSH
41821: LD_INT 3
41823: ARRAY
41824: PPUSH
41825: CALL_OW 488
41829: PUSH
41830: LD_EXP 21
41834: PUSH
41835: LD_VAR 0 2
41839: ARRAY
41840: PUSH
41841: LD_VAR 0 3
41845: ARRAY
41846: PUSH
41847: LD_INT 2
41849: ARRAY
41850: PPUSH
41851: LD_EXP 21
41855: PUSH
41856: LD_VAR 0 2
41860: ARRAY
41861: PUSH
41862: LD_VAR 0 3
41866: ARRAY
41867: PUSH
41868: LD_INT 3
41870: ARRAY
41871: PPUSH
41872: CALL_OW 284
41876: PUSH
41877: LD_INT 0
41879: EQUAL
41880: AND
41881: IFFALSE 41936
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
41883: LD_ADDR_VAR 0 4
41887: PUSH
41888: LD_EXP 21
41892: PUSH
41893: LD_VAR 0 2
41897: ARRAY
41898: PPUSH
41899: LD_VAR 0 3
41903: PPUSH
41904: CALL_OW 3
41908: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
41909: LD_ADDR_EXP 21
41913: PUSH
41914: LD_EXP 21
41918: PPUSH
41919: LD_VAR 0 2
41923: PPUSH
41924: LD_VAR 0 4
41928: PPUSH
41929: CALL_OW 1
41933: ST_TO_ADDR
// continue ;
41934: GO 41780
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
41936: LD_EXP 5
41940: PUSH
41941: LD_VAR 0 2
41945: ARRAY
41946: PUSH
41947: LD_INT 1
41949: ARRAY
41950: PPUSH
41951: CALL_OW 255
41955: PPUSH
41956: LD_EXP 21
41960: PUSH
41961: LD_VAR 0 2
41965: ARRAY
41966: PUSH
41967: LD_VAR 0 3
41971: ARRAY
41972: PUSH
41973: LD_INT 2
41975: ARRAY
41976: PPUSH
41977: LD_EXP 21
41981: PUSH
41982: LD_VAR 0 2
41986: ARRAY
41987: PUSH
41988: LD_VAR 0 3
41992: ARRAY
41993: PUSH
41994: LD_INT 3
41996: ARRAY
41997: PPUSH
41998: LD_INT 20
42000: PPUSH
42001: CALL 6842 0 4
42005: PUSH
42006: LD_INT 4
42008: ARRAY
42009: PUSH
42010: LD_INT 0
42012: EQUAL
42013: IFFALSE 42039
// begin target := mc_crates [ i ] [ j ] ;
42015: LD_ADDR_VAR 0 5
42019: PUSH
42020: LD_EXP 21
42024: PUSH
42025: LD_VAR 0 2
42029: ARRAY
42030: PUSH
42031: LD_VAR 0 3
42035: ARRAY
42036: ST_TO_ADDR
// break ;
42037: GO 42041
// end ; end ;
42039: GO 41780
42041: POP
42042: POP
// if not target then
42043: LD_VAR 0 5
42047: NOT
42048: IFFALSE 42052
// continue ;
42050: GO 41661
// if mc_crates_collector [ i ] < 5 then
42052: LD_EXP 22
42056: PUSH
42057: LD_VAR 0 2
42061: ARRAY
42062: PUSH
42063: LD_INT 5
42065: LESS
42066: IFFALSE 42246
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
42068: LD_ADDR_VAR 0 4
42072: PUSH
42073: LD_EXP 5
42077: PUSH
42078: LD_VAR 0 2
42082: ARRAY
42083: PPUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 25
42089: PUSH
42090: LD_INT 2
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 25
42099: PUSH
42100: LD_INT 16
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 24
42114: PUSH
42115: LD_INT 750
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PPUSH
42126: CALL_OW 72
42130: ST_TO_ADDR
// if not tmp then
42131: LD_VAR 0 4
42135: NOT
42136: IFFALSE 42140
// continue ;
42138: GO 41661
// for j in tmp do
42140: LD_ADDR_VAR 0 3
42144: PUSH
42145: LD_VAR 0 4
42149: PUSH
42150: FOR_IN
42151: IFFALSE 42244
// if GetTag ( j ) = 0 then
42153: LD_VAR 0 3
42157: PPUSH
42158: CALL_OW 110
42162: PUSH
42163: LD_INT 0
42165: EQUAL
42166: IFFALSE 42242
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
42168: LD_ADDR_EXP 22
42172: PUSH
42173: LD_EXP 22
42177: PPUSH
42178: LD_VAR 0 2
42182: PUSH
42183: LD_EXP 22
42187: PUSH
42188: LD_VAR 0 2
42192: ARRAY
42193: PUSH
42194: LD_INT 1
42196: PLUS
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PPUSH
42202: LD_VAR 0 3
42206: PPUSH
42207: CALL 6348 0 3
42211: ST_TO_ADDR
// SetTag ( j , 107 ) ;
42212: LD_VAR 0 3
42216: PPUSH
42217: LD_INT 107
42219: PPUSH
42220: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
42224: LD_EXP 22
42228: PUSH
42229: LD_VAR 0 2
42233: ARRAY
42234: PUSH
42235: LD_INT 5
42237: GREATER
42238: IFFALSE 42242
// break ;
42240: GO 42244
// end ;
42242: GO 42150
42244: POP
42245: POP
// end ; if mc_crates_collector [ i ] and target then
42246: LD_EXP 22
42250: PUSH
42251: LD_VAR 0 2
42255: ARRAY
42256: PUSH
42257: LD_VAR 0 5
42261: AND
42262: IFFALSE 42430
// begin if mc_crates_collector [ i ] < target [ 1 ] then
42264: LD_EXP 22
42268: PUSH
42269: LD_VAR 0 2
42273: ARRAY
42274: PUSH
42275: LD_VAR 0 5
42279: PUSH
42280: LD_INT 1
42282: ARRAY
42283: LESS
42284: IFFALSE 42304
// tmp := mc_crates_collector [ i ] else
42286: LD_ADDR_VAR 0 4
42290: PUSH
42291: LD_EXP 22
42295: PUSH
42296: LD_VAR 0 2
42300: ARRAY
42301: ST_TO_ADDR
42302: GO 42318
// tmp := target [ 1 ] ;
42304: LD_ADDR_VAR 0 4
42308: PUSH
42309: LD_VAR 0 5
42313: PUSH
42314: LD_INT 1
42316: ARRAY
42317: ST_TO_ADDR
// for j = 1 to tmp do
42318: LD_ADDR_VAR 0 3
42322: PUSH
42323: DOUBLE
42324: LD_INT 1
42326: DEC
42327: ST_TO_ADDR
42328: LD_VAR 0 4
42332: PUSH
42333: FOR_TO
42334: IFFALSE 42428
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
42336: LD_EXP 22
42340: PUSH
42341: LD_VAR 0 2
42345: ARRAY
42346: PUSH
42347: LD_VAR 0 3
42351: ARRAY
42352: PPUSH
42353: CALL_OW 310
42357: IFFALSE 42380
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
42359: LD_EXP 22
42363: PUSH
42364: LD_VAR 0 2
42368: ARRAY
42369: PUSH
42370: LD_VAR 0 3
42374: ARRAY
42375: PPUSH
42376: CALL_OW 122
// wait ( 3 ) ;
42380: LD_INT 3
42382: PPUSH
42383: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
42387: LD_EXP 22
42391: PUSH
42392: LD_VAR 0 2
42396: ARRAY
42397: PUSH
42398: LD_VAR 0 3
42402: ARRAY
42403: PPUSH
42404: LD_VAR 0 5
42408: PUSH
42409: LD_INT 2
42411: ARRAY
42412: PPUSH
42413: LD_VAR 0 5
42417: PUSH
42418: LD_INT 3
42420: ARRAY
42421: PPUSH
42422: CALL_OW 117
// end ;
42426: GO 42333
42428: POP
42429: POP
// end ; end ;
42430: GO 41661
42432: POP
42433: POP
// end ;
42434: LD_VAR 0 1
42438: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
42439: LD_INT 0
42441: PPUSH
42442: PPUSH
42443: PPUSH
42444: PPUSH
// if not mc_bases then
42445: LD_EXP 5
42449: NOT
42450: IFFALSE 42454
// exit ;
42452: GO 42615
// for i = 1 to mc_bases do
42454: LD_ADDR_VAR 0 2
42458: PUSH
42459: DOUBLE
42460: LD_INT 1
42462: DEC
42463: ST_TO_ADDR
42464: LD_EXP 5
42468: PUSH
42469: FOR_TO
42470: IFFALSE 42613
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
42472: LD_ADDR_VAR 0 4
42476: PUSH
42477: LD_EXP 23
42481: PUSH
42482: LD_VAR 0 2
42486: ARRAY
42487: PUSH
42488: LD_EXP 26
42492: PUSH
42493: LD_VAR 0 2
42497: ARRAY
42498: ADD
42499: PPUSH
42500: LD_INT 33
42502: PUSH
42503: LD_INT 2
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PPUSH
42510: CALL_OW 72
42514: ST_TO_ADDR
// if tmp then
42515: LD_VAR 0 4
42519: IFFALSE 42611
// for j in tmp do
42521: LD_ADDR_VAR 0 3
42525: PUSH
42526: LD_VAR 0 4
42530: PUSH
42531: FOR_IN
42532: IFFALSE 42609
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
42534: LD_VAR 0 3
42538: PPUSH
42539: CALL_OW 312
42543: NOT
42544: PUSH
42545: LD_VAR 0 3
42549: PPUSH
42550: CALL_OW 256
42554: PUSH
42555: LD_INT 250
42557: GREATEREQUAL
42558: AND
42559: IFFALSE 42572
// Connect ( j ) else
42561: LD_VAR 0 3
42565: PPUSH
42566: CALL 8836 0 1
42570: GO 42607
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
42572: LD_VAR 0 3
42576: PPUSH
42577: CALL_OW 256
42581: PUSH
42582: LD_INT 250
42584: LESS
42585: PUSH
42586: LD_VAR 0 3
42590: PPUSH
42591: CALL_OW 312
42595: AND
42596: IFFALSE 42607
// ComUnlink ( j ) ;
42598: LD_VAR 0 3
42602: PPUSH
42603: CALL_OW 136
42607: GO 42531
42609: POP
42610: POP
// end ;
42611: GO 42469
42613: POP
42614: POP
// end ;
42615: LD_VAR 0 1
42619: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
42620: LD_INT 0
42622: PPUSH
42623: PPUSH
42624: PPUSH
42625: PPUSH
42626: PPUSH
// if not mc_bases then
42627: LD_EXP 5
42631: NOT
42632: IFFALSE 42636
// exit ;
42634: GO 43096
// for i = 1 to mc_bases do
42636: LD_ADDR_VAR 0 2
42640: PUSH
42641: DOUBLE
42642: LD_INT 1
42644: DEC
42645: ST_TO_ADDR
42646: LD_EXP 5
42650: PUSH
42651: FOR_TO
42652: IFFALSE 43094
// begin if not mc_produce [ i ] then
42654: LD_EXP 25
42658: PUSH
42659: LD_VAR 0 2
42663: ARRAY
42664: NOT
42665: IFFALSE 42669
// continue ;
42667: GO 42651
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
42669: LD_ADDR_VAR 0 5
42673: PUSH
42674: LD_EXP 5
42678: PUSH
42679: LD_VAR 0 2
42683: ARRAY
42684: PPUSH
42685: LD_INT 30
42687: PUSH
42688: LD_INT 3
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PPUSH
42695: CALL_OW 72
42699: ST_TO_ADDR
// if not fac then
42700: LD_VAR 0 5
42704: NOT
42705: IFFALSE 42709
// continue ;
42707: GO 42651
// for j in fac do
42709: LD_ADDR_VAR 0 3
42713: PUSH
42714: LD_VAR 0 5
42718: PUSH
42719: FOR_IN
42720: IFFALSE 43090
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
42722: LD_VAR 0 3
42726: PPUSH
42727: CALL_OW 461
42731: PUSH
42732: LD_INT 2
42734: NONEQUAL
42735: PUSH
42736: LD_VAR 0 3
42740: PPUSH
42741: LD_INT 20
42743: PPUSH
42744: CALL 8539 0 2
42748: PUSH
42749: LD_INT 4
42751: ARRAY
42752: OR
42753: PUSH
42754: LD_VAR 0 3
42758: PPUSH
42759: CALL_OW 313
42763: PUSH
42764: LD_INT 0
42766: EQUAL
42767: OR
42768: IFFALSE 42772
// continue ;
42770: GO 42719
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
42772: LD_VAR 0 3
42776: PPUSH
42777: LD_EXP 25
42781: PUSH
42782: LD_VAR 0 2
42786: ARRAY
42787: PUSH
42788: LD_INT 1
42790: ARRAY
42791: PUSH
42792: LD_INT 1
42794: ARRAY
42795: PPUSH
42796: LD_EXP 25
42800: PUSH
42801: LD_VAR 0 2
42805: ARRAY
42806: PUSH
42807: LD_INT 1
42809: ARRAY
42810: PUSH
42811: LD_INT 2
42813: ARRAY
42814: PPUSH
42815: LD_EXP 25
42819: PUSH
42820: LD_VAR 0 2
42824: ARRAY
42825: PUSH
42826: LD_INT 1
42828: ARRAY
42829: PUSH
42830: LD_INT 3
42832: ARRAY
42833: PPUSH
42834: LD_EXP 25
42838: PUSH
42839: LD_VAR 0 2
42843: ARRAY
42844: PUSH
42845: LD_INT 1
42847: ARRAY
42848: PUSH
42849: LD_INT 4
42851: ARRAY
42852: PPUSH
42853: CALL_OW 448
42857: PUSH
42858: LD_VAR 0 3
42862: PPUSH
42863: LD_EXP 25
42867: PUSH
42868: LD_VAR 0 2
42872: ARRAY
42873: PUSH
42874: LD_INT 1
42876: ARRAY
42877: PUSH
42878: LD_INT 1
42880: ARRAY
42881: PUSH
42882: LD_EXP 25
42886: PUSH
42887: LD_VAR 0 2
42891: ARRAY
42892: PUSH
42893: LD_INT 1
42895: ARRAY
42896: PUSH
42897: LD_INT 2
42899: ARRAY
42900: PUSH
42901: LD_EXP 25
42905: PUSH
42906: LD_VAR 0 2
42910: ARRAY
42911: PUSH
42912: LD_INT 1
42914: ARRAY
42915: PUSH
42916: LD_INT 3
42918: ARRAY
42919: PUSH
42920: LD_EXP 25
42924: PUSH
42925: LD_VAR 0 2
42929: ARRAY
42930: PUSH
42931: LD_INT 1
42933: ARRAY
42934: PUSH
42935: LD_INT 4
42937: ARRAY
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: PPUSH
42945: CALL 12041 0 2
42949: AND
42950: IFFALSE 43088
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
42952: LD_VAR 0 3
42956: PPUSH
42957: LD_EXP 25
42961: PUSH
42962: LD_VAR 0 2
42966: ARRAY
42967: PUSH
42968: LD_INT 1
42970: ARRAY
42971: PUSH
42972: LD_INT 1
42974: ARRAY
42975: PPUSH
42976: LD_EXP 25
42980: PUSH
42981: LD_VAR 0 2
42985: ARRAY
42986: PUSH
42987: LD_INT 1
42989: ARRAY
42990: PUSH
42991: LD_INT 2
42993: ARRAY
42994: PPUSH
42995: LD_EXP 25
42999: PUSH
43000: LD_VAR 0 2
43004: ARRAY
43005: PUSH
43006: LD_INT 1
43008: ARRAY
43009: PUSH
43010: LD_INT 3
43012: ARRAY
43013: PPUSH
43014: LD_EXP 25
43018: PUSH
43019: LD_VAR 0 2
43023: ARRAY
43024: PUSH
43025: LD_INT 1
43027: ARRAY
43028: PUSH
43029: LD_INT 4
43031: ARRAY
43032: PPUSH
43033: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
43037: LD_ADDR_VAR 0 4
43041: PUSH
43042: LD_EXP 25
43046: PUSH
43047: LD_VAR 0 2
43051: ARRAY
43052: PPUSH
43053: LD_INT 1
43055: PPUSH
43056: CALL_OW 3
43060: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
43061: LD_ADDR_EXP 25
43065: PUSH
43066: LD_EXP 25
43070: PPUSH
43071: LD_VAR 0 2
43075: PPUSH
43076: LD_VAR 0 4
43080: PPUSH
43081: CALL_OW 1
43085: ST_TO_ADDR
// break ;
43086: GO 43090
// end ; end ;
43088: GO 42719
43090: POP
43091: POP
// end ;
43092: GO 42651
43094: POP
43095: POP
// end ;
43096: LD_VAR 0 1
43100: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
43101: LD_INT 0
43103: PPUSH
43104: PPUSH
43105: PPUSH
// if not mc_bases then
43106: LD_EXP 5
43110: NOT
43111: IFFALSE 43115
// exit ;
43113: GO 43204
// for i = 1 to mc_bases do
43115: LD_ADDR_VAR 0 2
43119: PUSH
43120: DOUBLE
43121: LD_INT 1
43123: DEC
43124: ST_TO_ADDR
43125: LD_EXP 5
43129: PUSH
43130: FOR_TO
43131: IFFALSE 43202
// begin if mc_attack [ i ] then
43133: LD_EXP 24
43137: PUSH
43138: LD_VAR 0 2
43142: ARRAY
43143: IFFALSE 43200
// begin tmp := mc_attack [ i ] [ 1 ] ;
43145: LD_ADDR_VAR 0 3
43149: PUSH
43150: LD_EXP 24
43154: PUSH
43155: LD_VAR 0 2
43159: ARRAY
43160: PUSH
43161: LD_INT 1
43163: ARRAY
43164: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
43165: LD_ADDR_EXP 24
43169: PUSH
43170: LD_EXP 24
43174: PPUSH
43175: LD_VAR 0 2
43179: PPUSH
43180: EMPTY
43181: PPUSH
43182: CALL_OW 1
43186: ST_TO_ADDR
// Attack ( tmp ) ;
43187: LD_VAR 0 3
43191: PPUSH
43192: CALL 33032 0 1
// exit ;
43196: POP
43197: POP
43198: GO 43204
// end ; end ;
43200: GO 43130
43202: POP
43203: POP
// end ;
43204: LD_VAR 0 1
43208: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
43209: LD_INT 0
43211: PPUSH
43212: PPUSH
43213: PPUSH
43214: PPUSH
43215: PPUSH
43216: PPUSH
43217: PPUSH
// if not mc_bases then
43218: LD_EXP 5
43222: NOT
43223: IFFALSE 43227
// exit ;
43225: GO 43572
// class := AllowSpecClass ( mc_defender [ 1 ] ) ;
43227: LD_ADDR_VAR 0 7
43231: PUSH
43232: LD_EXP 26
43236: PUSH
43237: LD_INT 1
43239: ARRAY
43240: PPUSH
43241: CALL 2853 0 1
43245: ST_TO_ADDR
// for i = 1 to mc_bases do
43246: LD_ADDR_VAR 0 2
43250: PUSH
43251: DOUBLE
43252: LD_INT 1
43254: DEC
43255: ST_TO_ADDR
43256: LD_EXP 5
43260: PUSH
43261: FOR_TO
43262: IFFALSE 43570
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ 1 ] ) , mc_scan_area [ i ] ) ) ;
43264: LD_ADDR_EXP 27
43268: PUSH
43269: LD_EXP 27
43273: PPUSH
43274: LD_VAR 0 2
43278: PPUSH
43279: LD_EXP 5
43283: PUSH
43284: LD_INT 1
43286: ARRAY
43287: PPUSH
43288: CALL_OW 255
43292: PPUSH
43293: LD_EXP 29
43297: PUSH
43298: LD_VAR 0 2
43302: ARRAY
43303: PPUSH
43304: CALL 1311 0 2
43308: PPUSH
43309: CALL_OW 1
43313: ST_TO_ADDR
// if not mc_scan [ i ] then
43314: LD_EXP 27
43318: PUSH
43319: LD_VAR 0 2
43323: ARRAY
43324: NOT
43325: IFFALSE 43477
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
43327: LD_ADDR_VAR 0 4
43331: PUSH
43332: LD_EXP 5
43336: PUSH
43337: LD_VAR 0 2
43341: ARRAY
43342: PPUSH
43343: LD_INT 2
43345: PUSH
43346: LD_INT 25
43348: PUSH
43349: LD_INT 5
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 25
43358: PUSH
43359: LD_INT 8
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 25
43368: PUSH
43369: LD_INT 9
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: PPUSH
43382: CALL_OW 72
43386: ST_TO_ADDR
// if not tmp then
43387: LD_VAR 0 4
43391: NOT
43392: IFFALSE 43396
// continue ;
43394: GO 43261
// for j in tmp do
43396: LD_ADDR_VAR 0 3
43400: PUSH
43401: LD_VAR 0 4
43405: PUSH
43406: FOR_IN
43407: IFFALSE 43475
// if GetBType ( IsInUnit ( j ) ) in [ b_barracks ] and GetClass ( j ) = 1 and not MineOfUnit ( j ) then
43409: LD_VAR 0 3
43413: PPUSH
43414: CALL_OW 310
43418: PPUSH
43419: CALL_OW 266
43423: PUSH
43424: LD_INT 5
43426: PUSH
43427: EMPTY
43428: LIST
43429: IN
43430: PUSH
43431: LD_VAR 0 3
43435: PPUSH
43436: CALL_OW 257
43440: PUSH
43441: LD_INT 1
43443: EQUAL
43444: AND
43445: PUSH
43446: LD_VAR 0 3
43450: PPUSH
43451: CALL_OW 459
43455: NOT
43456: AND
43457: IFFALSE 43473
// ComChangeProfession ( j , class ) ;
43459: LD_VAR 0 3
43463: PPUSH
43464: LD_VAR 0 7
43468: PPUSH
43469: CALL_OW 123
43473: GO 43406
43475: POP
43476: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
43477: LD_EXP 27
43481: PUSH
43482: LD_VAR 0 2
43486: ARRAY
43487: PUSH
43488: LD_EXP 26
43492: PUSH
43493: LD_VAR 0 2
43497: ARRAY
43498: AND
43499: IFFALSE 43568
// begin tmp := mc_defender [ i ] ;
43501: LD_ADDR_VAR 0 4
43505: PUSH
43506: LD_EXP 26
43510: PUSH
43511: LD_VAR 0 2
43515: ARRAY
43516: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
43517: LD_ADDR_EXP 26
43521: PUSH
43522: LD_EXP 26
43526: PPUSH
43527: LD_VAR 0 2
43531: PPUSH
43532: EMPTY
43533: PPUSH
43534: CALL_OW 1
43538: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
43539: LD_VAR 0 2
43543: PPUSH
43544: LD_VAR 0 4
43548: PPUSH
43549: LD_EXP 27
43553: PUSH
43554: LD_VAR 0 2
43558: ARRAY
43559: PPUSH
43560: CALL 1346 0 3
// exit ;
43564: POP
43565: POP
43566: GO 43572
// end ; end ;
43568: GO 43261
43570: POP
43571: POP
// end ;
43572: LD_VAR 0 1
43576: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci ; begin
43577: LD_INT 0
43579: PPUSH
43580: PPUSH
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
43585: PPUSH
43586: PPUSH
// if not mc_bases then
43587: LD_EXP 5
43591: NOT
43592: IFFALSE 43596
// exit ;
43594: GO 43967
// for i = 1 to mc_bases do
43596: LD_ADDR_VAR 0 2
43600: PUSH
43601: DOUBLE
43602: LD_INT 1
43604: DEC
43605: ST_TO_ADDR
43606: LD_EXP 5
43610: PUSH
43611: FOR_TO
43612: IFFALSE 43965
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
43614: LD_ADDR_VAR 0 6
43618: PUSH
43619: LD_EXP 5
43623: PUSH
43624: LD_VAR 0 2
43628: ARRAY
43629: PPUSH
43630: LD_INT 2
43632: PUSH
43633: LD_INT 30
43635: PUSH
43636: LD_INT 6
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 30
43645: PUSH
43646: LD_INT 7
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 30
43655: PUSH
43656: LD_INT 8
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: PPUSH
43669: CALL_OW 72
43673: ST_TO_ADDR
// if not tmp then
43674: LD_VAR 0 6
43678: NOT
43679: IFFALSE 43683
// continue ;
43681: GO 43611
// for j in tmp do
43683: LD_ADDR_VAR 0 3
43687: PUSH
43688: LD_VAR 0 6
43692: PUSH
43693: FOR_IN
43694: IFFALSE 43961
// begin side := GetSide ( j ) ;
43696: LD_ADDR_VAR 0 4
43700: PUSH
43701: LD_VAR 0 3
43705: PPUSH
43706: CALL_OW 255
43710: ST_TO_ADDR
// if not mc_tech [ side ] then
43711: LD_EXP 31
43715: PUSH
43716: LD_VAR 0 4
43720: ARRAY
43721: NOT
43722: IFFALSE 43726
// continue ;
43724: GO 43693
// if BuildingStatus ( j ) = bs_idle then
43726: LD_VAR 0 3
43730: PPUSH
43731: CALL_OW 461
43735: PUSH
43736: LD_INT 2
43738: EQUAL
43739: IFFALSE 43796
// for t in mc_tech [ side ] do
43741: LD_ADDR_VAR 0 5
43745: PUSH
43746: LD_EXP 31
43750: PUSH
43751: LD_VAR 0 4
43755: ARRAY
43756: PUSH
43757: FOR_IN
43758: IFFALSE 43794
// if CanBeResearched ( j , t ) then
43760: LD_VAR 0 3
43764: PPUSH
43765: LD_VAR 0 5
43769: PPUSH
43770: CALL_OW 430
43774: IFFALSE 43792
// begin ComResearch ( j , t ) ;
43776: LD_VAR 0 3
43780: PPUSH
43781: LD_VAR 0 5
43785: PPUSH
43786: CALL_OW 124
// break ;
43790: GO 43794
// end ;
43792: GO 43757
43794: POP
43795: POP
// if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
43796: LD_VAR 0 3
43800: PPUSH
43801: CALL_OW 461
43805: PUSH
43806: LD_INT 6
43808: EQUAL
43809: PUSH
43810: LD_VAR 0 6
43814: PUSH
43815: LD_INT 1
43817: GREATER
43818: AND
43819: IFFALSE 43959
// begin sci := [ ] ;
43821: LD_ADDR_VAR 0 8
43825: PUSH
43826: EMPTY
43827: ST_TO_ADDR
// for x in tmp diff j do
43828: LD_ADDR_VAR 0 7
43832: PUSH
43833: LD_VAR 0 6
43837: PUSH
43838: LD_VAR 0 3
43842: DIFF
43843: PUSH
43844: FOR_IN
43845: IFFALSE 43885
// begin if BuildingStatus ( x ) = bs_idle then
43847: LD_VAR 0 7
43851: PPUSH
43852: CALL_OW 461
43856: PUSH
43857: LD_INT 2
43859: EQUAL
43860: IFFALSE 43883
// sci := sci ^ UnitsInside ( x ) ;
43862: LD_ADDR_VAR 0 8
43866: PUSH
43867: LD_VAR 0 8
43871: PUSH
43872: LD_VAR 0 7
43876: PPUSH
43877: CALL_OW 313
43881: ADD
43882: ST_TO_ADDR
// end ;
43883: GO 43844
43885: POP
43886: POP
// if not sci then
43887: LD_VAR 0 8
43891: NOT
43892: IFFALSE 43896
// continue ;
43894: GO 43693
// for x in sci do
43896: LD_ADDR_VAR 0 7
43900: PUSH
43901: LD_VAR 0 8
43905: PUSH
43906: FOR_IN
43907: IFFALSE 43957
// if IsInUnit ( x ) and not HasTask ( x ) then
43909: LD_VAR 0 7
43913: PPUSH
43914: CALL_OW 310
43918: PUSH
43919: LD_VAR 0 7
43923: PPUSH
43924: CALL_OW 314
43928: NOT
43929: AND
43930: IFFALSE 43955
// begin ComExitBuilding ( x ) ;
43932: LD_VAR 0 7
43936: PPUSH
43937: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
43941: LD_VAR 0 7
43945: PPUSH
43946: LD_VAR 0 3
43950: PPUSH
43951: CALL_OW 180
// end ;
43955: GO 43906
43957: POP
43958: POP
// end ; end ;
43959: GO 43693
43961: POP
43962: POP
// end ;
43963: GO 43611
43965: POP
43966: POP
// end ;
43967: LD_VAR 0 1
43971: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
43972: LD_INT 0
43974: PPUSH
43975: PPUSH
43976: PPUSH
43977: PPUSH
43978: PPUSH
43979: PPUSH
// if not mc_bases then
43980: LD_EXP 5
43984: NOT
43985: IFFALSE 43989
// exit ;
43987: GO 44228
// for i = 1 to 8 do
43989: LD_ADDR_VAR 0 2
43993: PUSH
43994: DOUBLE
43995: LD_INT 1
43997: DEC
43998: ST_TO_ADDR
43999: LD_INT 8
44001: PUSH
44002: FOR_TO
44003: IFFALSE 44029
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
44005: LD_ADDR_EXP 31
44009: PUSH
44010: LD_EXP 31
44014: PPUSH
44015: LD_VAR 0 2
44019: PPUSH
44020: EMPTY
44021: PPUSH
44022: CALL_OW 1
44026: ST_TO_ADDR
44027: GO 44002
44029: POP
44030: POP
// tmp := [ ] ;
44031: LD_ADDR_VAR 0 5
44035: PUSH
44036: EMPTY
44037: ST_TO_ADDR
// for i = 1 to mc_sides do
44038: LD_ADDR_VAR 0 2
44042: PUSH
44043: DOUBLE
44044: LD_INT 1
44046: DEC
44047: ST_TO_ADDR
44048: LD_EXP 30
44052: PUSH
44053: FOR_TO
44054: IFFALSE 44112
// if not mc_sides [ i ] in tmp then
44056: LD_EXP 30
44060: PUSH
44061: LD_VAR 0 2
44065: ARRAY
44066: PUSH
44067: LD_VAR 0 5
44071: IN
44072: NOT
44073: IFFALSE 44110
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
44075: LD_ADDR_VAR 0 5
44079: PUSH
44080: LD_VAR 0 5
44084: PPUSH
44085: LD_VAR 0 5
44089: PUSH
44090: LD_INT 1
44092: PLUS
44093: PPUSH
44094: LD_EXP 30
44098: PUSH
44099: LD_VAR 0 2
44103: ARRAY
44104: PPUSH
44105: CALL_OW 2
44109: ST_TO_ADDR
44110: GO 44053
44112: POP
44113: POP
// if not tmp then
44114: LD_VAR 0 5
44118: NOT
44119: IFFALSE 44123
// exit ;
44121: GO 44228
// for j in tmp do
44123: LD_ADDR_VAR 0 3
44127: PUSH
44128: LD_VAR 0 5
44132: PUSH
44133: FOR_IN
44134: IFFALSE 44226
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
44136: LD_ADDR_VAR 0 6
44140: PUSH
44141: LD_INT 22
44143: PUSH
44144: LD_VAR 0 3
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PPUSH
44153: CALL_OW 69
44157: ST_TO_ADDR
// if not un then
44158: LD_VAR 0 6
44162: NOT
44163: IFFALSE 44167
// continue ;
44165: GO 44133
// nation := GetNation ( un [ 1 ] ) ;
44167: LD_ADDR_VAR 0 4
44171: PUSH
44172: LD_VAR 0 6
44176: PUSH
44177: LD_INT 1
44179: ARRAY
44180: PPUSH
44181: CALL_OW 248
44185: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
44186: LD_ADDR_EXP 31
44190: PUSH
44191: LD_EXP 31
44195: PPUSH
44196: LD_VAR 0 3
44200: PPUSH
44201: LD_VAR 0 3
44205: PPUSH
44206: LD_VAR 0 4
44210: PPUSH
44211: LD_INT 1
44213: PPUSH
44214: CALL 674 0 3
44218: PPUSH
44219: CALL_OW 1
44223: ST_TO_ADDR
// end ;
44224: GO 44133
44226: POP
44227: POP
// end ;
44228: LD_VAR 0 1
44232: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
44233: LD_INT 0
44235: PPUSH
44236: PPUSH
44237: PPUSH
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
// if not mc_bases then
44243: LD_EXP 5
44247: NOT
44248: IFFALSE 44252
// exit ;
44250: GO 44897
// for i = 1 to mc_bases do
44252: LD_ADDR_VAR 0 2
44256: PUSH
44257: DOUBLE
44258: LD_INT 1
44260: DEC
44261: ST_TO_ADDR
44262: LD_EXP 5
44266: PUSH
44267: FOR_TO
44268: IFFALSE 44895
// begin if not mc_bases [ i ] then
44270: LD_EXP 5
44274: PUSH
44275: LD_VAR 0 2
44279: ARRAY
44280: NOT
44281: IFFALSE 44285
// continue ;
44283: GO 44267
// if mc_scan [ i ] then
44285: LD_EXP 27
44289: PUSH
44290: LD_VAR 0 2
44294: ARRAY
44295: IFFALSE 44321
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
44297: LD_ADDR_EXP 17
44301: PUSH
44302: LD_EXP 17
44306: PPUSH
44307: LD_VAR 0 2
44311: PPUSH
44312: EMPTY
44313: PPUSH
44314: CALL_OW 1
44318: ST_TO_ADDR
// continue ;
44319: GO 44267
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
44321: LD_ADDR_VAR 0 5
44325: PUSH
44326: LD_EXP 5
44330: PUSH
44331: LD_VAR 0 2
44335: ARRAY
44336: PUSH
44337: LD_INT 1
44339: ARRAY
44340: PPUSH
44341: CALL_OW 255
44345: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
44346: LD_ADDR_VAR 0 6
44350: PUSH
44351: LD_EXP 5
44355: PUSH
44356: LD_VAR 0 2
44360: ARRAY
44361: PPUSH
44362: LD_INT 30
44364: PUSH
44365: LD_INT 3
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PPUSH
44372: CALL_OW 72
44376: ST_TO_ADDR
// if not fac then
44377: LD_VAR 0 6
44381: NOT
44382: IFFALSE 44433
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
44384: LD_ADDR_VAR 0 6
44388: PUSH
44389: LD_EXP 5
44393: PUSH
44394: LD_VAR 0 2
44398: ARRAY
44399: PPUSH
44400: LD_INT 2
44402: PUSH
44403: LD_INT 30
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 30
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: LIST
44427: PPUSH
44428: CALL_OW 72
44432: ST_TO_ADDR
// if not fac then
44433: LD_VAR 0 6
44437: NOT
44438: IFFALSE 44442
// continue ;
44440: GO 44267
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
44442: LD_ADDR_VAR 0 7
44446: PUSH
44447: LD_EXP 28
44451: PUSH
44452: LD_VAR 0 2
44456: ARRAY
44457: PPUSH
44458: LD_INT 22
44460: PUSH
44461: LD_VAR 0 5
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 21
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 3
44482: PUSH
44483: LD_INT 24
44485: PUSH
44486: LD_INT 1000
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: LIST
44501: PPUSH
44502: CALL_OW 70
44506: PUSH
44507: LD_INT 22
44509: PUSH
44510: LD_VAR 0 5
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 91
44521: PUSH
44522: LD_VAR 0 6
44526: PUSH
44527: LD_INT 1
44529: ARRAY
44530: PUSH
44531: LD_INT 25
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 21
44541: PUSH
44542: LD_INT 2
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 3
44551: PUSH
44552: LD_INT 24
44554: PUSH
44555: LD_INT 1000
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: PPUSH
44572: CALL_OW 69
44576: UNION
44577: ST_TO_ADDR
// if not vehs then
44578: LD_VAR 0 7
44582: NOT
44583: IFFALSE 44609
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
44585: LD_ADDR_EXP 17
44589: PUSH
44590: LD_EXP 17
44594: PPUSH
44595: LD_VAR 0 2
44599: PPUSH
44600: EMPTY
44601: PPUSH
44602: CALL_OW 1
44606: ST_TO_ADDR
// continue ;
44607: GO 44267
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
44609: LD_ADDR_VAR 0 8
44613: PUSH
44614: LD_EXP 5
44618: PUSH
44619: LD_VAR 0 2
44623: ARRAY
44624: PPUSH
44625: LD_INT 30
44627: PUSH
44628: LD_INT 3
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PPUSH
44635: CALL_OW 72
44639: ST_TO_ADDR
// if tmp then
44640: LD_VAR 0 8
44644: IFFALSE 44747
// begin for j in tmp do
44646: LD_ADDR_VAR 0 3
44650: PUSH
44651: LD_VAR 0 8
44655: PUSH
44656: FOR_IN
44657: IFFALSE 44745
// for k in UnitsInside ( j ) do
44659: LD_ADDR_VAR 0 4
44663: PUSH
44664: LD_VAR 0 3
44668: PPUSH
44669: CALL_OW 313
44673: PUSH
44674: FOR_IN
44675: IFFALSE 44741
// if k then
44677: LD_VAR 0 4
44681: IFFALSE 44739
// if not k in mc_repair_vehicle [ i ] then
44683: LD_VAR 0 4
44687: PUSH
44688: LD_EXP 17
44692: PUSH
44693: LD_VAR 0 2
44697: ARRAY
44698: IN
44699: NOT
44700: IFFALSE 44739
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
44702: LD_ADDR_EXP 17
44706: PUSH
44707: LD_EXP 17
44711: PPUSH
44712: LD_VAR 0 2
44716: PPUSH
44717: LD_EXP 17
44721: PUSH
44722: LD_VAR 0 2
44726: ARRAY
44727: PUSH
44728: LD_VAR 0 4
44732: UNION
44733: PPUSH
44734: CALL_OW 1
44738: ST_TO_ADDR
44739: GO 44674
44741: POP
44742: POP
44743: GO 44656
44745: POP
44746: POP
// end ; if not mc_repair_vehicle [ i ] then
44747: LD_EXP 17
44751: PUSH
44752: LD_VAR 0 2
44756: ARRAY
44757: NOT
44758: IFFALSE 44762
// continue ;
44760: GO 44267
// for j in mc_repair_vehicle [ i ] do
44762: LD_ADDR_VAR 0 3
44766: PUSH
44767: LD_EXP 17
44771: PUSH
44772: LD_VAR 0 2
44776: ARRAY
44777: PUSH
44778: FOR_IN
44779: IFFALSE 44891
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
44781: LD_VAR 0 3
44785: PPUSH
44786: CALL_OW 311
44790: NOT
44791: PUSH
44792: LD_VAR 0 3
44796: PUSH
44797: LD_EXP 8
44801: PUSH
44802: LD_VAR 0 2
44806: ARRAY
44807: PUSH
44808: LD_INT 1
44810: ARRAY
44811: IN
44812: NOT
44813: AND
44814: PUSH
44815: LD_VAR 0 3
44819: PUSH
44820: LD_EXP 8
44824: PUSH
44825: LD_VAR 0 2
44829: ARRAY
44830: PUSH
44831: LD_INT 2
44833: ARRAY
44834: IN
44835: NOT
44836: AND
44837: IFFALSE 44889
// begin if IsInUnit ( j ) then
44839: LD_VAR 0 3
44843: PPUSH
44844: CALL_OW 310
44848: IFFALSE 44859
// ComExitBuilding ( j ) ;
44850: LD_VAR 0 3
44854: PPUSH
44855: CALL_OW 122
// if not HasTask ( j ) then
44859: LD_VAR 0 3
44863: PPUSH
44864: CALL_OW 314
44868: NOT
44869: IFFALSE 44889
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
44871: LD_VAR 0 3
44875: PPUSH
44876: LD_VAR 0 7
44880: PUSH
44881: LD_INT 1
44883: ARRAY
44884: PPUSH
44885: CALL_OW 189
// end ; end ;
44889: GO 44778
44891: POP
44892: POP
// end ;
44893: GO 44267
44895: POP
44896: POP
// end ;
44897: LD_VAR 0 1
44901: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp ; begin
44902: LD_INT 0
44904: PPUSH
44905: PPUSH
44906: PPUSH
44907: PPUSH
44908: PPUSH
44909: PPUSH
44910: PPUSH
44911: PPUSH
// if not mc_bases then
44912: LD_EXP 5
44916: NOT
44917: IFFALSE 44921
// exit ;
44919: GO 45350
// for i = 1 to mc_bases do
44921: LD_ADDR_VAR 0 2
44925: PUSH
44926: DOUBLE
44927: LD_INT 1
44929: DEC
44930: ST_TO_ADDR
44931: LD_EXP 5
44935: PUSH
44936: FOR_TO
44937: IFFALSE 45348
// begin if not mc_can_tame [ i ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
44939: LD_EXP 32
44943: PUSH
44944: LD_VAR 0 2
44948: ARRAY
44949: NOT
44950: PUSH
44951: LD_EXP 30
44955: PUSH
44956: LD_VAR 0 2
44960: ARRAY
44961: PPUSH
44962: LD_INT 1
44964: PPUSH
44965: CALL_OW 325
44969: NOT
44970: OR
44971: PUSH
44972: LD_EXP 27
44976: PUSH
44977: LD_VAR 0 2
44981: ARRAY
44982: OR
44983: IFFALSE 44987
// continue ;
44985: GO 44936
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) ;
44987: LD_ADDR_VAR 0 8
44991: PUSH
44992: LD_EXP 5
44996: PUSH
44997: LD_VAR 0 2
45001: ARRAY
45002: PPUSH
45003: LD_INT 25
45005: PUSH
45006: LD_INT 4
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 50
45015: PUSH
45016: EMPTY
45017: LIST
45018: PUSH
45019: LD_INT 3
45021: PUSH
45022: LD_INT 60
45024: PUSH
45025: EMPTY
45026: LIST
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: LIST
45036: PPUSH
45037: CALL_OW 72
45041: ST_TO_ADDR
// if not tmp then
45042: LD_VAR 0 8
45046: NOT
45047: IFFALSE 45051
// continue ;
45049: GO 44936
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
45051: LD_ADDR_VAR 0 7
45055: PUSH
45056: LD_EXP 32
45060: PUSH
45061: LD_VAR 0 2
45065: ARRAY
45066: PPUSH
45067: LD_INT 22
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 25
45079: PUSH
45080: LD_INT 12
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PPUSH
45091: CALL_OW 70
45095: ST_TO_ADDR
// if not apes then
45096: LD_VAR 0 7
45100: NOT
45101: IFFALSE 45137
// begin if FilterByTag ( mc_bases [ i ] , 121 ) then
45103: LD_EXP 5
45107: PUSH
45108: LD_VAR 0 2
45112: ARRAY
45113: PPUSH
45114: LD_INT 121
45116: PPUSH
45117: CALL 36426 0 2
45121: IFFALSE 45135
// MC_Reset ( i , 121 ) ;
45123: LD_VAR 0 2
45127: PPUSH
45128: LD_INT 121
45130: PPUSH
45131: CALL 37977 0 2
// continue ;
45135: GO 44936
// end ; for j in tmp do
45137: LD_ADDR_VAR 0 3
45141: PUSH
45142: LD_VAR 0 8
45146: PUSH
45147: FOR_IN
45148: IFFALSE 45344
// begin if not GetTag ( j ) and FilterByTag ( mc_bases [ i ] , 121 ) < 3 then
45150: LD_VAR 0 3
45154: PPUSH
45155: CALL_OW 110
45159: NOT
45160: PUSH
45161: LD_EXP 5
45165: PUSH
45166: LD_VAR 0 2
45170: ARRAY
45171: PPUSH
45172: LD_INT 121
45174: PPUSH
45175: CALL 36426 0 2
45179: PUSH
45180: LD_INT 3
45182: LESS
45183: AND
45184: IFFALSE 45198
// SetTag ( j , 121 ) ;
45186: LD_VAR 0 3
45190: PPUSH
45191: LD_INT 121
45193: PPUSH
45194: CALL_OW 109
// if GetTag ( j ) = 121 then
45198: LD_VAR 0 3
45202: PPUSH
45203: CALL_OW 110
45207: PUSH
45208: LD_INT 121
45210: EQUAL
45211: IFFALSE 45342
// begin if IsInUnit ( j ) then
45213: LD_VAR 0 3
45217: PPUSH
45218: CALL_OW 310
45222: IFFALSE 45233
// ComExitBuilding ( j ) ;
45224: LD_VAR 0 3
45228: PPUSH
45229: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
45233: LD_ADDR_VAR 0 6
45237: PUSH
45238: LD_VAR 0 7
45242: PPUSH
45243: LD_VAR 0 3
45247: PPUSH
45248: CALL_OW 74
45252: ST_TO_ADDR
// if not ape then
45253: LD_VAR 0 6
45257: NOT
45258: IFFALSE 45262
// break ;
45260: GO 45344
// x := GetX ( ape ) ;
45262: LD_ADDR_VAR 0 4
45266: PUSH
45267: LD_VAR 0 6
45271: PPUSH
45272: CALL_OW 250
45276: ST_TO_ADDR
// y := GetY ( ape ) ;
45277: LD_ADDR_VAR 0 5
45281: PUSH
45282: LD_VAR 0 6
45286: PPUSH
45287: CALL_OW 251
45291: ST_TO_ADDR
// if not ValidHex ( x , y ) then
45292: LD_VAR 0 4
45296: PPUSH
45297: LD_VAR 0 5
45301: PPUSH
45302: CALL_OW 488
45306: NOT
45307: IFFALSE 45311
// break ;
45309: GO 45344
// if not HasTask ( j ) then
45311: LD_VAR 0 3
45315: PPUSH
45316: CALL_OW 314
45320: NOT
45321: IFFALSE 45342
// AddComTameXY ( j , x , y ) ;
45323: LD_VAR 0 3
45327: PPUSH
45328: LD_VAR 0 4
45332: PPUSH
45333: LD_VAR 0 5
45337: PPUSH
45338: CALL_OW 191
// end ; end ;
45342: GO 45147
45344: POP
45345: POP
// end ;
45346: GO 44936
45348: POP
45349: POP
// end ;
45350: LD_VAR 0 1
45354: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
45355: LD_INT 0
45357: PPUSH
45358: PPUSH
45359: PPUSH
45360: PPUSH
45361: PPUSH
45362: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] then
45363: LD_VAR 0 1
45367: NOT
45368: PUSH
45369: LD_VAR 0 2
45373: NOT
45374: OR
45375: PUSH
45376: LD_VAR 0 3
45380: NOT
45381: OR
45382: PUSH
45383: LD_VAR 0 4
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: LD_INT 3
45396: PUSH
45397: LD_INT 4
45399: PUSH
45400: LD_INT 5
45402: PUSH
45403: LD_INT 8
45405: PUSH
45406: LD_INT 9
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: IN
45418: NOT
45419: OR
45420: IFFALSE 45424
// exit ;
45422: GO 46334
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
45424: LD_ADDR_VAR 0 2
45428: PUSH
45429: LD_VAR 0 2
45433: PPUSH
45434: LD_INT 21
45436: PUSH
45437: LD_INT 3
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 24
45446: PUSH
45447: LD_INT 250
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PPUSH
45458: CALL_OW 72
45462: ST_TO_ADDR
// case class of 1 :
45463: LD_VAR 0 4
45467: PUSH
45468: LD_INT 1
45470: DOUBLE
45471: EQUAL
45472: IFTRUE 45476
45474: GO 45561
45476: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
45477: LD_ADDR_VAR 0 8
45481: PUSH
45482: LD_VAR 0 2
45486: PPUSH
45487: LD_INT 2
45489: PUSH
45490: LD_INT 30
45492: PUSH
45493: LD_INT 32
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 30
45502: PUSH
45503: LD_INT 31
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: LIST
45514: PPUSH
45515: CALL_OW 72
45519: PUSH
45520: LD_VAR 0 2
45524: PPUSH
45525: LD_INT 2
45527: PUSH
45528: LD_INT 30
45530: PUSH
45531: LD_INT 4
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 30
45540: PUSH
45541: LD_INT 5
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: LIST
45552: PPUSH
45553: CALL_OW 72
45557: ADD
45558: ST_TO_ADDR
45559: GO 45801
45561: LD_INT 2
45563: DOUBLE
45564: EQUAL
45565: IFTRUE 45569
45567: GO 45615
45569: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
45570: LD_ADDR_VAR 0 8
45574: PUSH
45575: LD_VAR 0 2
45579: PPUSH
45580: LD_INT 2
45582: PUSH
45583: LD_INT 30
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 30
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: LIST
45607: PPUSH
45608: CALL_OW 72
45612: ST_TO_ADDR
45613: GO 45801
45615: LD_INT 3
45617: DOUBLE
45618: EQUAL
45619: IFTRUE 45623
45621: GO 45669
45623: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
45624: LD_ADDR_VAR 0 8
45628: PUSH
45629: LD_VAR 0 2
45633: PPUSH
45634: LD_INT 2
45636: PUSH
45637: LD_INT 30
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 30
45649: PUSH
45650: LD_INT 3
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: PPUSH
45662: CALL_OW 72
45666: ST_TO_ADDR
45667: GO 45801
45669: LD_INT 4
45671: DOUBLE
45672: EQUAL
45673: IFTRUE 45677
45675: GO 45734
45677: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
45678: LD_ADDR_VAR 0 8
45682: PUSH
45683: LD_VAR 0 2
45687: PPUSH
45688: LD_INT 2
45690: PUSH
45691: LD_INT 30
45693: PUSH
45694: LD_INT 6
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 30
45703: PUSH
45704: LD_INT 7
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 30
45713: PUSH
45714: LD_INT 8
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: PPUSH
45727: CALL_OW 72
45731: ST_TO_ADDR
45732: GO 45801
45734: LD_INT 5
45736: DOUBLE
45737: EQUAL
45738: IFTRUE 45754
45740: LD_INT 8
45742: DOUBLE
45743: EQUAL
45744: IFTRUE 45754
45746: LD_INT 9
45748: DOUBLE
45749: EQUAL
45750: IFTRUE 45754
45752: GO 45800
45754: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
45755: LD_ADDR_VAR 0 8
45759: PUSH
45760: LD_VAR 0 2
45764: PPUSH
45765: LD_INT 2
45767: PUSH
45768: LD_INT 30
45770: PUSH
45771: LD_INT 4
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 30
45780: PUSH
45781: LD_INT 5
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: PPUSH
45793: CALL_OW 72
45797: ST_TO_ADDR
45798: GO 45801
45800: POP
// if not tmp then
45801: LD_VAR 0 8
45805: NOT
45806: IFFALSE 45810
// exit ;
45808: GO 46334
// if class = 1 and mc_empty_turret_list [ base ] then
45810: LD_VAR 0 4
45814: PUSH
45815: LD_INT 1
45817: EQUAL
45818: PUSH
45819: LD_EXP 14
45823: PUSH
45824: LD_VAR 0 1
45828: ARRAY
45829: AND
45830: IFFALSE 45986
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
45832: LD_ADDR_VAR 0 9
45836: PUSH
45837: LD_EXP 14
45841: PUSH
45842: LD_VAR 0 1
45846: ARRAY
45847: PUSH
45848: LD_INT 1
45850: ARRAY
45851: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
45852: LD_VAR 0 9
45856: PUSH
45857: LD_EXP 15
45861: PUSH
45862: LD_VAR 0 1
45866: ARRAY
45867: IN
45868: NOT
45869: IFFALSE 45984
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
45871: LD_ADDR_EXP 15
45875: PUSH
45876: LD_EXP 15
45880: PPUSH
45881: LD_VAR 0 1
45885: PUSH
45886: LD_EXP 15
45890: PUSH
45891: LD_VAR 0 1
45895: ARRAY
45896: PUSH
45897: LD_INT 1
45899: PLUS
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PPUSH
45905: LD_VAR 0 9
45909: PPUSH
45910: CALL 6348 0 3
45914: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
45915: LD_ADDR_EXP 14
45919: PUSH
45920: LD_EXP 14
45924: PPUSH
45925: LD_VAR 0 1
45929: PPUSH
45930: LD_EXP 14
45934: PUSH
45935: LD_VAR 0 1
45939: ARRAY
45940: PUSH
45941: LD_VAR 0 9
45945: DIFF
45946: PPUSH
45947: CALL_OW 1
45951: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
45952: LD_VAR 0 3
45956: PPUSH
45957: LD_EXP 15
45961: PUSH
45962: LD_VAR 0 1
45966: ARRAY
45967: PUSH
45968: LD_EXP 15
45972: PUSH
45973: LD_VAR 0 1
45977: ARRAY
45978: ARRAY
45979: PPUSH
45980: CALL_OW 120
// end ; exit ;
45984: GO 46334
// end ; if tmp > 1 then
45986: LD_VAR 0 8
45990: PUSH
45991: LD_INT 1
45993: GREATER
45994: IFFALSE 46098
// for i = 2 to tmp do
45996: LD_ADDR_VAR 0 6
46000: PUSH
46001: DOUBLE
46002: LD_INT 2
46004: DEC
46005: ST_TO_ADDR
46006: LD_VAR 0 8
46010: PUSH
46011: FOR_TO
46012: IFFALSE 46096
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
46014: LD_VAR 0 8
46018: PUSH
46019: LD_VAR 0 6
46023: ARRAY
46024: PPUSH
46025: CALL_OW 461
46029: PUSH
46030: LD_INT 6
46032: EQUAL
46033: IFFALSE 46094
// begin x := tmp [ i ] ;
46035: LD_ADDR_VAR 0 9
46039: PUSH
46040: LD_VAR 0 8
46044: PUSH
46045: LD_VAR 0 6
46049: ARRAY
46050: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
46051: LD_ADDR_VAR 0 8
46055: PUSH
46056: LD_VAR 0 8
46060: PPUSH
46061: LD_VAR 0 6
46065: PPUSH
46066: CALL_OW 3
46070: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
46071: LD_ADDR_VAR 0 8
46075: PUSH
46076: LD_VAR 0 8
46080: PPUSH
46081: LD_INT 1
46083: PPUSH
46084: LD_VAR 0 9
46088: PPUSH
46089: CALL_OW 2
46093: ST_TO_ADDR
// end ;
46094: GO 46011
46096: POP
46097: POP
// for i in tmp do
46098: LD_ADDR_VAR 0 6
46102: PUSH
46103: LD_VAR 0 8
46107: PUSH
46108: FOR_IN
46109: IFFALSE 46178
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
46111: LD_VAR 0 6
46115: PPUSH
46116: CALL_OW 313
46120: PUSH
46121: LD_INT 6
46123: LESS
46124: PUSH
46125: LD_VAR 0 6
46129: PPUSH
46130: CALL_OW 266
46134: PUSH
46135: LD_INT 31
46137: PUSH
46138: LD_INT 32
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: IN
46145: NOT
46146: AND
46147: PUSH
46148: LD_VAR 0 6
46152: PPUSH
46153: CALL_OW 313
46157: PUSH
46158: LD_INT 0
46160: EQUAL
46161: OR
46162: IFFALSE 46176
// begin j := i ;
46164: LD_ADDR_VAR 0 7
46168: PUSH
46169: LD_VAR 0 6
46173: ST_TO_ADDR
// break ;
46174: GO 46178
// end ; end ;
46176: GO 46108
46178: POP
46179: POP
// if j then
46180: LD_VAR 0 7
46184: IFFALSE 46202
// ComEnterUnit ( unit , j ) else
46186: LD_VAR 0 3
46190: PPUSH
46191: LD_VAR 0 7
46195: PPUSH
46196: CALL_OW 120
46200: GO 46334
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
46202: LD_ADDR_VAR 0 10
46206: PUSH
46207: LD_VAR 0 2
46211: PPUSH
46212: LD_INT 2
46214: PUSH
46215: LD_INT 30
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 30
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: LIST
46239: PPUSH
46240: CALL_OW 72
46244: ST_TO_ADDR
// if depot then
46245: LD_VAR 0 10
46249: IFFALSE 46334
// begin if GetDistUnits ( unit , depot [ 1 ] ) > 10 then
46251: LD_VAR 0 3
46255: PPUSH
46256: LD_VAR 0 10
46260: PUSH
46261: LD_INT 1
46263: ARRAY
46264: PPUSH
46265: CALL_OW 296
46269: PUSH
46270: LD_INT 10
46272: GREATER
46273: IFFALSE 46334
// ComMoveXY ( unit , ShiftX ( GetX ( depot [ 1 ] ) , 3 , 3 ) , ShiftY ( GetY ( depot [ 1 ] ) , 3 , 3 ) ) ;
46275: LD_VAR 0 3
46279: PPUSH
46280: LD_VAR 0 10
46284: PUSH
46285: LD_INT 1
46287: ARRAY
46288: PPUSH
46289: CALL_OW 250
46293: PPUSH
46294: LD_INT 3
46296: PPUSH
46297: LD_INT 3
46299: PPUSH
46300: CALL_OW 272
46304: PPUSH
46305: LD_VAR 0 10
46309: PUSH
46310: LD_INT 1
46312: ARRAY
46313: PPUSH
46314: CALL_OW 251
46318: PPUSH
46319: LD_INT 3
46321: PPUSH
46322: LD_INT 3
46324: PPUSH
46325: CALL_OW 273
46329: PPUSH
46330: CALL_OW 111
// end ; end ; end ;
46334: LD_VAR 0 5
46338: RET
// export function MC_Idle ( ) ; var i , j , x , tmp , tmp2 , tower ; begin
46339: LD_INT 0
46341: PPUSH
46342: PPUSH
46343: PPUSH
46344: PPUSH
46345: PPUSH
46346: PPUSH
46347: PPUSH
// if not mc_bases then
46348: LD_EXP 5
46352: NOT
46353: IFFALSE 46357
// exit ;
46355: GO 46586
// for i = 1 to mc_bases do
46357: LD_ADDR_VAR 0 2
46361: PUSH
46362: DOUBLE
46363: LD_INT 1
46365: DEC
46366: ST_TO_ADDR
46367: LD_EXP 5
46371: PUSH
46372: FOR_TO
46373: IFFALSE 46584
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
46375: LD_ADDR_VAR 0 5
46379: PUSH
46380: LD_EXP 5
46384: PUSH
46385: LD_VAR 0 2
46389: ARRAY
46390: PPUSH
46391: LD_INT 21
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PPUSH
46401: CALL_OW 72
46405: ST_TO_ADDR
// if not tmp then
46406: LD_VAR 0 5
46410: NOT
46411: IFFALSE 46417
// exit ;
46413: POP
46414: POP
46415: GO 46586
// for j in tmp do
46417: LD_ADDR_VAR 0 3
46421: PUSH
46422: LD_VAR 0 5
46426: PUSH
46427: FOR_IN
46428: IFFALSE 46580
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
46430: LD_VAR 0 3
46434: PPUSH
46435: CALL_OW 110
46439: NOT
46440: PUSH
46441: LD_VAR 0 3
46445: PPUSH
46446: CALL_OW 314
46450: NOT
46451: AND
46452: PUSH
46453: LD_VAR 0 3
46457: PPUSH
46458: CALL_OW 311
46462: NOT
46463: AND
46464: PUSH
46465: LD_VAR 0 3
46469: PPUSH
46470: CALL_OW 310
46474: NOT
46475: AND
46476: PUSH
46477: LD_VAR 0 3
46481: PUSH
46482: LD_EXP 8
46486: PUSH
46487: LD_VAR 0 2
46491: ARRAY
46492: PUSH
46493: LD_INT 1
46495: ARRAY
46496: IN
46497: NOT
46498: AND
46499: PUSH
46500: LD_VAR 0 3
46504: PUSH
46505: LD_EXP 8
46509: PUSH
46510: LD_VAR 0 2
46514: ARRAY
46515: PUSH
46516: LD_INT 2
46518: ARRAY
46519: IN
46520: NOT
46521: AND
46522: PUSH
46523: LD_VAR 0 3
46527: PUSH
46528: LD_EXP 17
46532: PUSH
46533: LD_VAR 0 2
46537: ARRAY
46538: IN
46539: NOT
46540: AND
46541: IFFALSE 46578
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
46543: LD_VAR 0 2
46547: PPUSH
46548: LD_EXP 5
46552: PUSH
46553: LD_VAR 0 2
46557: ARRAY
46558: PPUSH
46559: LD_VAR 0 3
46563: PPUSH
46564: LD_VAR 0 3
46568: PPUSH
46569: CALL_OW 257
46573: PPUSH
46574: CALL 45355 0 4
// end ;
46578: GO 46427
46580: POP
46581: POP
// end ;
46582: GO 46372
46584: POP
46585: POP
// end ;
46586: LD_VAR 0 1
46590: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
46591: LD_INT 0
46593: PPUSH
46594: PPUSH
46595: PPUSH
46596: PPUSH
46597: PPUSH
46598: PPUSH
// if not mc_bases [ base ] then
46599: LD_EXP 5
46603: PUSH
46604: LD_VAR 0 1
46608: ARRAY
46609: NOT
46610: IFFALSE 46614
// exit ;
46612: GO 46796
// tmp := [ ] ;
46614: LD_ADDR_VAR 0 6
46618: PUSH
46619: EMPTY
46620: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
46621: LD_ADDR_VAR 0 7
46625: PUSH
46626: LD_VAR 0 3
46630: PPUSH
46631: LD_INT 0
46633: PPUSH
46634: CALL_OW 517
46638: ST_TO_ADDR
// if not list then
46639: LD_VAR 0 7
46643: NOT
46644: IFFALSE 46648
// exit ;
46646: GO 46796
// for i = 1 to amount do
46648: LD_ADDR_VAR 0 5
46652: PUSH
46653: DOUBLE
46654: LD_INT 1
46656: DEC
46657: ST_TO_ADDR
46658: LD_VAR 0 2
46662: PUSH
46663: FOR_TO
46664: IFFALSE 46744
// begin x := rand ( 1 , list [ 1 ] ) ;
46666: LD_ADDR_VAR 0 8
46670: PUSH
46671: LD_INT 1
46673: PPUSH
46674: LD_VAR 0 7
46678: PUSH
46679: LD_INT 1
46681: ARRAY
46682: PPUSH
46683: CALL_OW 12
46687: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
46688: LD_ADDR_VAR 0 6
46692: PUSH
46693: LD_VAR 0 6
46697: PPUSH
46698: LD_VAR 0 5
46702: PPUSH
46703: LD_VAR 0 7
46707: PUSH
46708: LD_INT 1
46710: ARRAY
46711: PUSH
46712: LD_VAR 0 8
46716: ARRAY
46717: PUSH
46718: LD_VAR 0 7
46722: PUSH
46723: LD_INT 2
46725: ARRAY
46726: PUSH
46727: LD_VAR 0 8
46731: ARRAY
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PPUSH
46737: CALL_OW 1
46741: ST_TO_ADDR
// end ;
46742: GO 46663
46744: POP
46745: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
46746: LD_ADDR_EXP 18
46750: PUSH
46751: LD_EXP 18
46755: PPUSH
46756: LD_VAR 0 1
46760: PPUSH
46761: LD_VAR 0 6
46765: PPUSH
46766: CALL_OW 1
46770: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
46771: LD_ADDR_EXP 20
46775: PUSH
46776: LD_EXP 20
46780: PPUSH
46781: LD_VAR 0 1
46785: PPUSH
46786: LD_VAR 0 3
46790: PPUSH
46791: CALL_OW 1
46795: ST_TO_ADDR
// end ;
46796: LD_VAR 0 4
46800: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
46801: LD_INT 0
46803: PPUSH
// if not mc_bases [ base ] then
46804: LD_EXP 5
46808: PUSH
46809: LD_VAR 0 1
46813: ARRAY
46814: NOT
46815: IFFALSE 46819
// exit ;
46817: GO 46844
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
46819: LD_ADDR_EXP 25
46823: PUSH
46824: LD_EXP 25
46828: PPUSH
46829: LD_VAR 0 1
46833: PPUSH
46834: LD_VAR 0 2
46838: PPUSH
46839: CALL_OW 1
46843: ST_TO_ADDR
// end ;
46844: LD_VAR 0 3
46848: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
46849: LD_INT 0
46851: PPUSH
// if not mc_bases [ base ] then
46852: LD_EXP 5
46856: PUSH
46857: LD_VAR 0 1
46861: ARRAY
46862: NOT
46863: IFFALSE 46867
// exit ;
46865: GO 46907
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
46867: LD_ADDR_EXP 25
46871: PUSH
46872: LD_EXP 25
46876: PPUSH
46877: LD_VAR 0 1
46881: PPUSH
46882: LD_EXP 25
46886: PUSH
46887: LD_VAR 0 1
46891: ARRAY
46892: PUSH
46893: LD_VAR 0 2
46897: PUSH
46898: EMPTY
46899: LIST
46900: ADD
46901: PPUSH
46902: CALL_OW 1
46906: ST_TO_ADDR
// end ;
46907: LD_VAR 0 3
46911: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
46912: LD_INT 0
46914: PPUSH
// if not mc_bases [ base ] then
46915: LD_EXP 5
46919: PUSH
46920: LD_VAR 0 1
46924: ARRAY
46925: NOT
46926: IFFALSE 46930
// exit ;
46928: GO 47042
// mc_defender := Replace ( mc_defender , base , deflist ) ;
46930: LD_ADDR_EXP 26
46934: PUSH
46935: LD_EXP 26
46939: PPUSH
46940: LD_VAR 0 1
46944: PPUSH
46945: LD_VAR 0 2
46949: PPUSH
46950: CALL_OW 1
46954: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
46955: LD_ADDR_EXP 16
46959: PUSH
46960: LD_EXP 16
46964: PPUSH
46965: LD_VAR 0 1
46969: PPUSH
46970: LD_VAR 0 2
46974: PUSH
46975: LD_INT 0
46977: PLUS
46978: PPUSH
46979: CALL_OW 1
46983: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
46984: LD_ADDR_EXP 23
46988: PUSH
46989: LD_EXP 23
46993: PPUSH
46994: LD_VAR 0 1
46998: PPUSH
46999: LD_EXP 23
47003: PUSH
47004: LD_VAR 0 1
47008: ARRAY
47009: PUSH
47010: LD_EXP 26
47014: PUSH
47015: LD_VAR 0 1
47019: ARRAY
47020: PPUSH
47021: LD_INT 21
47023: PUSH
47024: LD_INT 2
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PPUSH
47031: CALL_OW 72
47035: UNION
47036: PPUSH
47037: CALL_OW 1
47041: ST_TO_ADDR
// end ;
47042: LD_VAR 0 3
47046: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
47047: LD_INT 0
47049: PPUSH
47050: PPUSH
47051: PPUSH
47052: PPUSH
// if not mc_bases [ base ] then
47053: LD_EXP 5
47057: PUSH
47058: LD_VAR 0 1
47062: ARRAY
47063: NOT
47064: IFFALSE 47068
// exit ;
47066: GO 47133
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
47068: LD_ADDR_EXP 24
47072: PUSH
47073: LD_EXP 24
47077: PPUSH
47078: LD_VAR 0 1
47082: PUSH
47083: LD_EXP 24
47087: PUSH
47088: LD_VAR 0 1
47092: ARRAY
47093: PUSH
47094: LD_INT 1
47096: PLUS
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PPUSH
47102: LD_VAR 0 1
47106: PUSH
47107: LD_VAR 0 2
47111: PUSH
47112: LD_VAR 0 3
47116: PUSH
47117: LD_VAR 0 4
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: PPUSH
47128: CALL 6348 0 3
47132: ST_TO_ADDR
// end ;
47133: LD_VAR 0 5
47137: RET
// export function MC_GetMinesField ( base ) ; begin
47138: LD_INT 0
47140: PPUSH
// result := mc_mines [ base ] ;
47141: LD_ADDR_VAR 0 2
47145: PUSH
47146: LD_EXP 18
47150: PUSH
47151: LD_VAR 0 1
47155: ARRAY
47156: ST_TO_ADDR
// end ;
47157: LD_VAR 0 2
47161: RET
// export function MC_GetProduceList ( base ) ; begin
47162: LD_INT 0
47164: PPUSH
// result := mc_produce [ base ] ;
47165: LD_ADDR_VAR 0 2
47169: PUSH
47170: LD_EXP 25
47174: PUSH
47175: LD_VAR 0 1
47179: ARRAY
47180: ST_TO_ADDR
// end ;
47181: LD_VAR 0 2
47185: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
47186: LD_INT 0
47188: PPUSH
47189: PPUSH
// if not mc_bases then
47190: LD_EXP 5
47194: NOT
47195: IFFALSE 47199
// exit ;
47197: GO 47264
// if mc_bases [ base ] then
47199: LD_EXP 5
47203: PUSH
47204: LD_VAR 0 1
47208: ARRAY
47209: IFFALSE 47264
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
47211: LD_ADDR_VAR 0 3
47215: PUSH
47216: LD_EXP 5
47220: PUSH
47221: LD_VAR 0 1
47225: ARRAY
47226: PPUSH
47227: LD_INT 30
47229: PUSH
47230: LD_VAR 0 2
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PPUSH
47239: CALL_OW 72
47243: ST_TO_ADDR
// if result then
47244: LD_VAR 0 3
47248: IFFALSE 47264
// result := result [ 1 ] ;
47250: LD_ADDR_VAR 0 3
47254: PUSH
47255: LD_VAR 0 3
47259: PUSH
47260: LD_INT 1
47262: ARRAY
47263: ST_TO_ADDR
// end ; end ; end_of_file
47264: LD_VAR 0 3
47268: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
47269: LD_INT 0
47271: PPUSH
47272: PPUSH
47273: PPUSH
// if not mc_bases then
47274: LD_EXP 5
47278: NOT
47279: IFFALSE 47283
// exit ;
47281: GO 47369
// for i = 1 to mc_bases do
47283: LD_ADDR_VAR 0 4
47287: PUSH
47288: DOUBLE
47289: LD_INT 1
47291: DEC
47292: ST_TO_ADDR
47293: LD_EXP 5
47297: PUSH
47298: FOR_TO
47299: IFFALSE 47367
// begin if sci in mc_bases [ i ] then
47301: LD_VAR 0 2
47305: PUSH
47306: LD_EXP 5
47310: PUSH
47311: LD_VAR 0 4
47315: ARRAY
47316: IN
47317: IFFALSE 47365
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
47319: LD_ADDR_EXP 33
47323: PUSH
47324: LD_EXP 33
47328: PPUSH
47329: LD_VAR 0 4
47333: PUSH
47334: LD_EXP 33
47338: PUSH
47339: LD_VAR 0 4
47343: ARRAY
47344: PUSH
47345: LD_INT 1
47347: PLUS
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PPUSH
47353: LD_VAR 0 1
47357: PPUSH
47358: CALL 6348 0 3
47362: ST_TO_ADDR
// break ;
47363: GO 47367
// end ; end ;
47365: GO 47298
47367: POP
47368: POP
// end ;
47369: LD_VAR 0 3
47373: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
47374: LD_INT 0
47376: PPUSH
47377: PPUSH
47378: PPUSH
// if not mc_bases then
47379: LD_EXP 5
47383: NOT
47384: IFFALSE 47388
// exit ;
47386: GO 47477
// for i = 1 to mc_bases do
47388: LD_ADDR_VAR 0 4
47392: PUSH
47393: DOUBLE
47394: LD_INT 1
47396: DEC
47397: ST_TO_ADDR
47398: LD_EXP 5
47402: PUSH
47403: FOR_TO
47404: IFFALSE 47475
// begin if building in mc_busy_turret_list [ i ] then
47406: LD_VAR 0 1
47410: PUSH
47411: LD_EXP 15
47415: PUSH
47416: LD_VAR 0 4
47420: ARRAY
47421: IN
47422: IFFALSE 47473
// begin tmp := mc_busy_turret_list [ i ] diff building ;
47424: LD_ADDR_VAR 0 5
47428: PUSH
47429: LD_EXP 15
47433: PUSH
47434: LD_VAR 0 4
47438: ARRAY
47439: PUSH
47440: LD_VAR 0 1
47444: DIFF
47445: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
47446: LD_ADDR_EXP 15
47450: PUSH
47451: LD_EXP 15
47455: PPUSH
47456: LD_VAR 0 4
47460: PPUSH
47461: LD_VAR 0 5
47465: PPUSH
47466: CALL_OW 1
47470: ST_TO_ADDR
// break ;
47471: GO 47475
// end ; end ;
47473: GO 47403
47475: POP
47476: POP
// end ;
47477: LD_VAR 0 3
47481: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
47482: LD_INT 0
47484: PPUSH
47485: PPUSH
47486: PPUSH
// if not mc_bases then
47487: LD_EXP 5
47491: NOT
47492: IFFALSE 47496
// exit ;
47494: GO 47695
// for i = 1 to mc_bases do
47496: LD_ADDR_VAR 0 5
47500: PUSH
47501: DOUBLE
47502: LD_INT 1
47504: DEC
47505: ST_TO_ADDR
47506: LD_EXP 5
47510: PUSH
47511: FOR_TO
47512: IFFALSE 47693
// if building in mc_bases [ i ] then
47514: LD_VAR 0 1
47518: PUSH
47519: LD_EXP 5
47523: PUSH
47524: LD_VAR 0 5
47528: ARRAY
47529: IN
47530: IFFALSE 47691
// begin tmp := mc_bases [ i ] diff building ;
47532: LD_ADDR_VAR 0 6
47536: PUSH
47537: LD_EXP 5
47541: PUSH
47542: LD_VAR 0 5
47546: ARRAY
47547: PUSH
47548: LD_VAR 0 1
47552: DIFF
47553: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
47554: LD_ADDR_EXP 5
47558: PUSH
47559: LD_EXP 5
47563: PPUSH
47564: LD_VAR 0 5
47568: PPUSH
47569: LD_VAR 0 6
47573: PPUSH
47574: CALL_OW 1
47578: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
47579: LD_VAR 0 1
47583: PUSH
47584: LD_EXP 13
47588: PUSH
47589: LD_VAR 0 5
47593: ARRAY
47594: IN
47595: IFFALSE 47634
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
47597: LD_ADDR_EXP 13
47601: PUSH
47602: LD_EXP 13
47606: PPUSH
47607: LD_VAR 0 5
47611: PPUSH
47612: LD_EXP 13
47616: PUSH
47617: LD_VAR 0 5
47621: ARRAY
47622: PUSH
47623: LD_VAR 0 1
47627: DIFF
47628: PPUSH
47629: CALL_OW 1
47633: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
47634: LD_VAR 0 1
47638: PUSH
47639: LD_EXP 14
47643: PUSH
47644: LD_VAR 0 5
47648: ARRAY
47649: IN
47650: IFFALSE 47689
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
47652: LD_ADDR_EXP 14
47656: PUSH
47657: LD_EXP 14
47661: PPUSH
47662: LD_VAR 0 5
47666: PPUSH
47667: LD_EXP 14
47671: PUSH
47672: LD_VAR 0 5
47676: ARRAY
47677: PUSH
47678: LD_VAR 0 1
47682: DIFF
47683: PPUSH
47684: CALL_OW 1
47688: ST_TO_ADDR
// break ;
47689: GO 47693
// end ;
47691: GO 47511
47693: POP
47694: POP
// end ;
47695: LD_VAR 0 4
47699: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
47700: LD_INT 0
47702: PPUSH
47703: PPUSH
47704: PPUSH
// if not mc_bases or not side in mc_sides then
47705: LD_EXP 5
47709: NOT
47710: PUSH
47711: LD_VAR 0 3
47715: PUSH
47716: LD_EXP 30
47720: IN
47721: NOT
47722: OR
47723: IFFALSE 47727
// exit ;
47725: GO 47850
// for i = 1 to mc_vehicles do
47727: LD_ADDR_VAR 0 6
47731: PUSH
47732: DOUBLE
47733: LD_INT 1
47735: DEC
47736: ST_TO_ADDR
47737: LD_EXP 23
47741: PUSH
47742: FOR_TO
47743: IFFALSE 47848
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
47745: LD_VAR 0 2
47749: PUSH
47750: LD_EXP 23
47754: PUSH
47755: LD_VAR 0 6
47759: ARRAY
47760: IN
47761: PUSH
47762: LD_VAR 0 1
47766: PUSH
47767: LD_EXP 23
47771: PUSH
47772: LD_VAR 0 6
47776: ARRAY
47777: IN
47778: OR
47779: IFFALSE 47846
// begin tmp := mc_vehicles [ i ] diff old ;
47781: LD_ADDR_VAR 0 7
47785: PUSH
47786: LD_EXP 23
47790: PUSH
47791: LD_VAR 0 6
47795: ARRAY
47796: PUSH
47797: LD_VAR 0 2
47801: DIFF
47802: ST_TO_ADDR
// tmp := tmp diff new ;
47803: LD_ADDR_VAR 0 7
47807: PUSH
47808: LD_VAR 0 7
47812: PUSH
47813: LD_VAR 0 1
47817: DIFF
47818: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
47819: LD_ADDR_EXP 23
47823: PUSH
47824: LD_EXP 23
47828: PPUSH
47829: LD_VAR 0 6
47833: PPUSH
47834: LD_VAR 0 7
47838: PPUSH
47839: CALL_OW 1
47843: ST_TO_ADDR
// break ;
47844: GO 47848
// end ;
47846: GO 47742
47848: POP
47849: POP
// end ;
47850: LD_VAR 0 5
47854: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
47855: LD_INT 0
47857: PPUSH
47858: PPUSH
47859: PPUSH
47860: PPUSH
// if not mc_bases then
47861: LD_EXP 5
47865: NOT
47866: IFFALSE 47870
// exit ;
47868: GO 48162
// side := GetSide ( vehicle ) ;
47870: LD_ADDR_VAR 0 5
47874: PUSH
47875: LD_VAR 0 1
47879: PPUSH
47880: CALL_OW 255
47884: ST_TO_ADDR
// for i = 1 to mc_bases do
47885: LD_ADDR_VAR 0 4
47889: PUSH
47890: DOUBLE
47891: LD_INT 1
47893: DEC
47894: ST_TO_ADDR
47895: LD_EXP 5
47899: PUSH
47900: FOR_TO
47901: IFFALSE 48160
// begin if factory in mc_bases [ i ] then
47903: LD_VAR 0 2
47907: PUSH
47908: LD_EXP 5
47912: PUSH
47913: LD_VAR 0 4
47917: ARRAY
47918: IN
47919: IFFALSE 48158
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
47921: LD_EXP 26
47925: PUSH
47926: LD_VAR 0 4
47930: ARRAY
47931: PUSH
47932: LD_EXP 16
47936: PUSH
47937: LD_VAR 0 4
47941: ARRAY
47942: LESS
47943: IFFALSE 48114
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
47945: LD_ADDR_EXP 26
47949: PUSH
47950: LD_EXP 26
47954: PPUSH
47955: LD_VAR 0 4
47959: PPUSH
47960: LD_EXP 26
47964: PUSH
47965: LD_VAR 0 4
47969: ARRAY
47970: PUSH
47971: LD_VAR 0 1
47975: ADD
47976: PPUSH
47977: CALL_OW 1
47981: ST_TO_ADDR
// if not mc_scan [ i ] then
47982: LD_EXP 27
47986: PUSH
47987: LD_VAR 0 4
47991: ARRAY
47992: NOT
47993: IFFALSE 48112
// begin if GetControl ( vehicle ) = control_remote then
47995: LD_VAR 0 1
47999: PPUSH
48000: CALL_OW 263
48004: PUSH
48005: LD_INT 2
48007: EQUAL
48008: IFFALSE 48028
// repeat wait ( 0 0$1 ) ;
48010: LD_INT 35
48012: PPUSH
48013: CALL_OW 67
// until IsControledBy ( vehicle ) ;
48017: LD_VAR 0 1
48021: PPUSH
48022: CALL_OW 312
48026: IFFALSE 48010
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
48028: LD_VAR 0 1
48032: PPUSH
48033: LD_EXP 28
48037: PUSH
48038: LD_VAR 0 4
48042: ARRAY
48043: PPUSH
48044: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
48048: LD_VAR 0 1
48052: PPUSH
48053: CALL_OW 263
48057: PUSH
48058: LD_INT 1
48060: NONEQUAL
48061: IFFALSE 48065
// break ;
48063: GO 48160
// repeat wait ( 0 0$1 ) ;
48065: LD_INT 35
48067: PPUSH
48068: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
48072: LD_VAR 0 1
48076: PPUSH
48077: LD_EXP 28
48081: PUSH
48082: LD_VAR 0 4
48086: ARRAY
48087: PPUSH
48088: CALL_OW 308
48092: IFFALSE 48065
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
48094: LD_VAR 0 1
48098: PPUSH
48099: CALL_OW 311
48103: PPUSH
48104: CALL_OW 121
// exit ;
48108: POP
48109: POP
48110: GO 48162
// end ; end else
48112: GO 48158
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
48114: LD_ADDR_EXP 23
48118: PUSH
48119: LD_EXP 23
48123: PPUSH
48124: LD_VAR 0 4
48128: PUSH
48129: LD_EXP 23
48133: PUSH
48134: LD_VAR 0 4
48138: ARRAY
48139: PUSH
48140: LD_INT 1
48142: PLUS
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PPUSH
48148: LD_VAR 0 1
48152: PPUSH
48153: CALL 6348 0 3
48157: ST_TO_ADDR
// end ; end ;
48158: GO 47900
48160: POP
48161: POP
// end ;
48162: LD_VAR 0 3
48166: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , depot ; begin
48167: LD_INT 0
48169: PPUSH
48170: PPUSH
48171: PPUSH
// if not mc_bases then
48172: LD_EXP 5
48176: NOT
48177: IFFALSE 48181
// exit ;
48179: GO 48396
// repeat wait ( 0 0$1 ) ;
48181: LD_INT 35
48183: PPUSH
48184: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
48188: LD_VAR 0 2
48192: PPUSH
48193: LD_VAR 0 3
48197: PPUSH
48198: CALL_OW 284
48202: IFFALSE 48181
// if GetResourceTypeXY ( x , y ) = mat_artefact then
48204: LD_VAR 0 2
48208: PPUSH
48209: LD_VAR 0 3
48213: PPUSH
48214: CALL_OW 283
48218: PUSH
48219: LD_INT 4
48221: EQUAL
48222: IFFALSE 48226
// exit ;
48224: GO 48396
// for i = 1 to mc_bases do
48226: LD_ADDR_VAR 0 7
48230: PUSH
48231: DOUBLE
48232: LD_INT 1
48234: DEC
48235: ST_TO_ADDR
48236: LD_EXP 5
48240: PUSH
48241: FOR_TO
48242: IFFALSE 48394
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
48244: LD_ADDR_VAR 0 8
48248: PUSH
48249: LD_EXP 5
48253: PUSH
48254: LD_VAR 0 7
48258: ARRAY
48259: PPUSH
48260: LD_INT 2
48262: PUSH
48263: LD_INT 30
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 30
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: LIST
48287: PPUSH
48288: CALL_OW 72
48292: ST_TO_ADDR
// if not depot then
48293: LD_VAR 0 8
48297: NOT
48298: IFFALSE 48302
// continue ;
48300: GO 48241
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
48302: LD_VAR 0 8
48306: PUSH
48307: LD_INT 1
48309: ARRAY
48310: PPUSH
48311: LD_VAR 0 2
48315: PPUSH
48316: LD_VAR 0 3
48320: PPUSH
48321: CALL_OW 297
48325: PUSH
48326: LD_INT 30
48328: LESS
48329: IFFALSE 48392
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
48331: LD_ADDR_EXP 21
48335: PUSH
48336: LD_EXP 21
48340: PPUSH
48341: LD_VAR 0 7
48345: PUSH
48346: LD_EXP 21
48350: PUSH
48351: LD_VAR 0 7
48355: ARRAY
48356: PUSH
48357: LD_INT 1
48359: PLUS
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PPUSH
48365: LD_VAR 0 4
48369: PUSH
48370: LD_VAR 0 2
48374: PUSH
48375: LD_VAR 0 3
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: LIST
48384: PPUSH
48385: CALL 6348 0 3
48389: ST_TO_ADDR
// break ;
48390: GO 48394
// end ; end ;
48392: GO 48241
48394: POP
48395: POP
// end ;
48396: LD_VAR 0 6
48400: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side ; begin
48401: LD_INT 0
48403: PPUSH
48404: PPUSH
// side := GetSide ( lab ) ;
48405: LD_ADDR_VAR 0 4
48409: PUSH
48410: LD_VAR 0 2
48414: PPUSH
48415: CALL_OW 255
48419: ST_TO_ADDR
// if not side in mc_sides or not mc_tech then
48420: LD_VAR 0 4
48424: PUSH
48425: LD_EXP 30
48429: IN
48430: NOT
48431: PUSH
48432: LD_EXP 31
48436: NOT
48437: OR
48438: IFFALSE 48442
// exit ;
48440: GO 48479
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
48442: LD_ADDR_EXP 31
48446: PUSH
48447: LD_EXP 31
48451: PPUSH
48452: LD_VAR 0 4
48456: PPUSH
48457: LD_EXP 31
48461: PUSH
48462: LD_VAR 0 4
48466: ARRAY
48467: PUSH
48468: LD_VAR 0 1
48472: DIFF
48473: PPUSH
48474: CALL_OW 1
48478: ST_TO_ADDR
// end ;
48479: LD_VAR 0 3
48483: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
48484: LD_INT 0
48486: PPUSH
48487: PPUSH
48488: PPUSH
48489: PPUSH
48490: PPUSH
48491: PPUSH
48492: PPUSH
48493: PPUSH
// if not mc_bases then
48494: LD_EXP 5
48498: NOT
48499: IFFALSE 48503
// exit ;
48501: GO 49317
// for i = 1 to mc_bases do
48503: LD_ADDR_VAR 0 3
48507: PUSH
48508: DOUBLE
48509: LD_INT 1
48511: DEC
48512: ST_TO_ADDR
48513: LD_EXP 5
48517: PUSH
48518: FOR_TO
48519: IFFALSE 49315
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] then
48521: LD_VAR 0 1
48525: PUSH
48526: LD_EXP 5
48530: PUSH
48531: LD_VAR 0 3
48535: ARRAY
48536: IN
48537: PUSH
48538: LD_VAR 0 1
48542: PUSH
48543: LD_EXP 12
48547: PUSH
48548: LD_VAR 0 3
48552: ARRAY
48553: IN
48554: OR
48555: PUSH
48556: LD_VAR 0 1
48560: PUSH
48561: LD_EXP 23
48565: PUSH
48566: LD_VAR 0 3
48570: ARRAY
48571: IN
48572: OR
48573: IFFALSE 49313
// begin if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
48575: LD_VAR 0 1
48579: PPUSH
48580: CALL_OW 247
48584: PUSH
48585: LD_INT 2
48587: EQUAL
48588: PUSH
48589: LD_VAR 0 1
48593: PPUSH
48594: CALL_OW 110
48598: PUSH
48599: LD_INT 20
48601: EQUAL
48602: AND
48603: IFFALSE 48706
// begin fac := MC_GetBuilding ( i , b_factory ) ;
48605: LD_ADDR_VAR 0 8
48609: PUSH
48610: LD_VAR 0 3
48614: PPUSH
48615: LD_INT 3
48617: PPUSH
48618: CALL 47186 0 2
48622: ST_TO_ADDR
// if fac then
48623: LD_VAR 0 8
48627: IFFALSE 48706
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
48629: LD_ADDR_VAR 0 9
48633: PUSH
48634: LD_VAR 0 8
48638: PPUSH
48639: LD_VAR 0 1
48643: PPUSH
48644: CALL_OW 265
48648: PPUSH
48649: LD_VAR 0 1
48653: PPUSH
48654: CALL_OW 262
48658: PPUSH
48659: LD_VAR 0 1
48663: PPUSH
48664: CALL_OW 263
48668: PPUSH
48669: LD_VAR 0 1
48673: PPUSH
48674: CALL_OW 264
48678: PPUSH
48679: CALL 3513 0 5
48683: ST_TO_ADDR
// if components then
48684: LD_VAR 0 9
48688: IFFALSE 48704
// MC_InsertProduceList ( i , components ) ;
48690: LD_VAR 0 3
48694: PPUSH
48695: LD_VAR 0 9
48699: PPUSH
48700: CALL 46849 0 2
// break ;
48704: GO 49315
// end ; end ; if GetType ( un ) = unit_building then
48706: LD_VAR 0 1
48710: PPUSH
48711: CALL_OW 247
48715: PUSH
48716: LD_INT 3
48718: EQUAL
48719: IFFALSE 49016
// begin btype := GetBType ( un ) ;
48721: LD_ADDR_VAR 0 5
48725: PUSH
48726: LD_VAR 0 1
48730: PPUSH
48731: CALL_OW 266
48735: ST_TO_ADDR
// if btype = b_warehouse then
48736: LD_VAR 0 5
48740: PUSH
48741: LD_INT 1
48743: EQUAL
48744: IFFALSE 48762
// begin btype := b_depot ;
48746: LD_ADDR_VAR 0 5
48750: PUSH
48751: LD_INT 0
48753: ST_TO_ADDR
// pos := 1 ;
48754: LD_ADDR_VAR 0 6
48758: PUSH
48759: LD_INT 1
48761: ST_TO_ADDR
// end ; if btype = b_factory then
48762: LD_VAR 0 5
48766: PUSH
48767: LD_INT 3
48769: EQUAL
48770: IFFALSE 48788
// begin btype := b_workshop ;
48772: LD_ADDR_VAR 0 5
48776: PUSH
48777: LD_INT 2
48779: ST_TO_ADDR
// pos := 1 ;
48780: LD_ADDR_VAR 0 6
48784: PUSH
48785: LD_INT 1
48787: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
48788: LD_VAR 0 5
48792: PUSH
48793: LD_INT 7
48795: PUSH
48796: LD_INT 8
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: IN
48803: IFFALSE 48813
// btype := b_lab ;
48805: LD_ADDR_VAR 0 5
48809: PUSH
48810: LD_INT 6
48812: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
48813: LD_ADDR_EXP 10
48817: PUSH
48818: LD_EXP 10
48822: PPUSH
48823: LD_VAR 0 3
48827: PUSH
48828: LD_EXP 10
48832: PUSH
48833: LD_VAR 0 3
48837: ARRAY
48838: PUSH
48839: LD_INT 1
48841: PLUS
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PPUSH
48847: LD_VAR 0 5
48851: PUSH
48852: LD_VAR 0 1
48856: PPUSH
48857: CALL_OW 250
48861: PUSH
48862: LD_VAR 0 1
48866: PPUSH
48867: CALL_OW 251
48871: PUSH
48872: LD_VAR 0 1
48876: PPUSH
48877: CALL_OW 254
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: PPUSH
48888: CALL 6348 0 3
48892: ST_TO_ADDR
// if pos = 1 then
48893: LD_VAR 0 6
48897: PUSH
48898: LD_INT 1
48900: EQUAL
48901: IFFALSE 49016
// begin tmp := mc_build_list [ i ] ;
48903: LD_ADDR_VAR 0 7
48907: PUSH
48908: LD_EXP 10
48912: PUSH
48913: LD_VAR 0 3
48917: ARRAY
48918: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
48919: LD_VAR 0 7
48923: PPUSH
48924: LD_INT 2
48926: PUSH
48927: LD_INT 30
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 30
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: LIST
48951: PPUSH
48952: CALL_OW 72
48956: IFFALSE 48966
// pos := 2 ;
48958: LD_ADDR_VAR 0 6
48962: PUSH
48963: LD_INT 2
48965: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
48966: LD_ADDR_VAR 0 7
48970: PUSH
48971: LD_VAR 0 7
48975: PPUSH
48976: LD_VAR 0 6
48980: PPUSH
48981: LD_VAR 0 7
48985: PPUSH
48986: CALL 6239 0 3
48990: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
48991: LD_ADDR_EXP 10
48995: PUSH
48996: LD_EXP 10
49000: PPUSH
49001: LD_VAR 0 3
49005: PPUSH
49006: LD_VAR 0 7
49010: PPUSH
49011: CALL_OW 1
49015: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
49016: LD_VAR 0 1
49020: PUSH
49021: LD_EXP 5
49025: PUSH
49026: LD_VAR 0 3
49030: ARRAY
49031: IN
49032: IFFALSE 49081
// begin tmp := mc_bases [ i ] diff un ;
49034: LD_ADDR_VAR 0 7
49038: PUSH
49039: LD_EXP 5
49043: PUSH
49044: LD_VAR 0 3
49048: ARRAY
49049: PUSH
49050: LD_VAR 0 1
49054: DIFF
49055: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
49056: LD_ADDR_EXP 5
49060: PUSH
49061: LD_EXP 5
49065: PPUSH
49066: LD_VAR 0 3
49070: PPUSH
49071: LD_VAR 0 7
49075: PPUSH
49076: CALL_OW 1
49080: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
49081: LD_VAR 0 1
49085: PUSH
49086: LD_EXP 12
49090: PUSH
49091: LD_VAR 0 3
49095: ARRAY
49096: IN
49097: IFFALSE 49146
// begin tmp := mc_construct_list [ i ] diff un ;
49099: LD_ADDR_VAR 0 7
49103: PUSH
49104: LD_EXP 12
49108: PUSH
49109: LD_VAR 0 3
49113: ARRAY
49114: PUSH
49115: LD_VAR 0 1
49119: DIFF
49120: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
49121: LD_ADDR_EXP 12
49125: PUSH
49126: LD_EXP 12
49130: PPUSH
49131: LD_VAR 0 3
49135: PPUSH
49136: LD_VAR 0 7
49140: PPUSH
49141: CALL_OW 1
49145: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
49146: LD_VAR 0 1
49150: PUSH
49151: LD_EXP 23
49155: PUSH
49156: LD_VAR 0 3
49160: ARRAY
49161: IN
49162: IFFALSE 49201
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
49164: LD_ADDR_EXP 23
49168: PUSH
49169: LD_EXP 23
49173: PPUSH
49174: LD_VAR 0 3
49178: PPUSH
49179: LD_EXP 23
49183: PUSH
49184: LD_VAR 0 3
49188: ARRAY
49189: PUSH
49190: LD_VAR 0 1
49194: DIFF
49195: PPUSH
49196: CALL_OW 1
49200: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
49201: LD_VAR 0 1
49205: PUSH
49206: LD_EXP 14
49210: PUSH
49211: LD_VAR 0 3
49215: ARRAY
49216: IN
49217: IFFALSE 49256
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
49219: LD_ADDR_EXP 14
49223: PUSH
49224: LD_EXP 14
49228: PPUSH
49229: LD_VAR 0 3
49233: PPUSH
49234: LD_EXP 14
49238: PUSH
49239: LD_VAR 0 3
49243: ARRAY
49244: PUSH
49245: LD_VAR 0 1
49249: DIFF
49250: PPUSH
49251: CALL_OW 1
49255: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
49256: LD_VAR 0 1
49260: PUSH
49261: LD_EXP 13
49265: PUSH
49266: LD_VAR 0 3
49270: ARRAY
49271: IN
49272: IFFALSE 49311
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
49274: LD_ADDR_EXP 13
49278: PUSH
49279: LD_EXP 13
49283: PPUSH
49284: LD_VAR 0 3
49288: PPUSH
49289: LD_EXP 13
49293: PUSH
49294: LD_VAR 0 3
49298: ARRAY
49299: PUSH
49300: LD_VAR 0 1
49304: DIFF
49305: PPUSH
49306: CALL_OW 1
49310: ST_TO_ADDR
// end ; break ;
49311: GO 49315
// end ;
49313: GO 48518
49315: POP
49316: POP
// end ;
49317: LD_VAR 0 2
49321: RET
// export function MCE_BuildingComplete ( building ) ; var i , j ; begin
49322: LD_INT 0
49324: PPUSH
49325: PPUSH
49326: PPUSH
// if not mc_bases then
49327: LD_EXP 5
49331: NOT
49332: IFFALSE 49336
// exit ;
49334: GO 49571
// for i = 1 to mc_bases do
49336: LD_ADDR_VAR 0 3
49340: PUSH
49341: DOUBLE
49342: LD_INT 1
49344: DEC
49345: ST_TO_ADDR
49346: LD_EXP 5
49350: PUSH
49351: FOR_TO
49352: IFFALSE 49569
// begin if building in mc_construct_list [ i ] then
49354: LD_VAR 0 1
49358: PUSH
49359: LD_EXP 12
49363: PUSH
49364: LD_VAR 0 3
49368: ARRAY
49369: IN
49370: IFFALSE 49567
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
49372: LD_ADDR_EXP 12
49376: PUSH
49377: LD_EXP 12
49381: PPUSH
49382: LD_VAR 0 3
49386: PPUSH
49387: LD_EXP 12
49391: PUSH
49392: LD_VAR 0 3
49396: ARRAY
49397: PUSH
49398: LD_VAR 0 1
49402: DIFF
49403: PPUSH
49404: CALL_OW 1
49408: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
49409: LD_ADDR_EXP 5
49413: PUSH
49414: LD_EXP 5
49418: PPUSH
49419: LD_VAR 0 3
49423: PUSH
49424: LD_EXP 5
49428: PUSH
49429: LD_VAR 0 3
49433: ARRAY
49434: PUSH
49435: LD_INT 1
49437: PLUS
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PPUSH
49443: LD_VAR 0 1
49447: PPUSH
49448: CALL 6348 0 3
49452: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
49453: LD_VAR 0 1
49457: PPUSH
49458: CALL_OW 266
49462: PUSH
49463: LD_INT 32
49465: PUSH
49466: LD_INT 33
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: IN
49473: IFFALSE 49563
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
49475: LD_ADDR_EXP 13
49479: PUSH
49480: LD_EXP 13
49484: PPUSH
49485: LD_VAR 0 3
49489: PUSH
49490: LD_EXP 13
49494: PUSH
49495: LD_VAR 0 3
49499: ARRAY
49500: PUSH
49501: LD_INT 1
49503: PLUS
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PPUSH
49509: LD_VAR 0 1
49513: PPUSH
49514: CALL 6348 0 3
49518: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
49519: LD_ADDR_EXP 14
49523: PUSH
49524: LD_EXP 14
49528: PPUSH
49529: LD_VAR 0 3
49533: PUSH
49534: LD_EXP 14
49538: PUSH
49539: LD_VAR 0 3
49543: ARRAY
49544: PUSH
49545: LD_INT 1
49547: PLUS
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PPUSH
49553: LD_VAR 0 1
49557: PPUSH
49558: CALL 6348 0 3
49562: ST_TO_ADDR
// end ; exit ;
49563: POP
49564: POP
49565: GO 49571
// end ; end ;
49567: GO 49351
49569: POP
49570: POP
// end ;
49571: LD_VAR 0 2
49575: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
49576: LD_INT 0
49578: PPUSH
49579: PPUSH
49580: PPUSH
49581: PPUSH
49582: PPUSH
49583: PPUSH
49584: PPUSH
// if not mc_bases then
49585: LD_EXP 5
49589: NOT
49590: IFFALSE 49594
// exit ;
49592: GO 49825
// btype := GetBType ( building ) ;
49594: LD_ADDR_VAR 0 6
49598: PUSH
49599: LD_VAR 0 1
49603: PPUSH
49604: CALL_OW 266
49608: ST_TO_ADDR
// x := GetX ( building ) ;
49609: LD_ADDR_VAR 0 7
49613: PUSH
49614: LD_VAR 0 1
49618: PPUSH
49619: CALL_OW 250
49623: ST_TO_ADDR
// y := GetY ( building ) ;
49624: LD_ADDR_VAR 0 8
49628: PUSH
49629: LD_VAR 0 1
49633: PPUSH
49634: CALL_OW 251
49638: ST_TO_ADDR
// d := GetDir ( building ) ;
49639: LD_ADDR_VAR 0 9
49643: PUSH
49644: LD_VAR 0 1
49648: PPUSH
49649: CALL_OW 254
49653: ST_TO_ADDR
// for i = 1 to mc_bases do
49654: LD_ADDR_VAR 0 4
49658: PUSH
49659: DOUBLE
49660: LD_INT 1
49662: DEC
49663: ST_TO_ADDR
49664: LD_EXP 5
49668: PUSH
49669: FOR_TO
49670: IFFALSE 49823
// begin if not mc_build_list [ i ] then
49672: LD_EXP 10
49676: PUSH
49677: LD_VAR 0 4
49681: ARRAY
49682: NOT
49683: IFFALSE 49687
// continue ;
49685: GO 49669
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
49687: LD_VAR 0 6
49691: PUSH
49692: LD_VAR 0 7
49696: PUSH
49697: LD_VAR 0 8
49701: PUSH
49702: LD_VAR 0 9
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: PPUSH
49713: LD_EXP 10
49717: PUSH
49718: LD_VAR 0 4
49722: ARRAY
49723: PUSH
49724: LD_INT 1
49726: ARRAY
49727: PPUSH
49728: CALL 11946 0 2
49732: IFFALSE 49821
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
49734: LD_ADDR_EXP 10
49738: PUSH
49739: LD_EXP 10
49743: PPUSH
49744: LD_VAR 0 4
49748: PPUSH
49749: LD_EXP 10
49753: PUSH
49754: LD_VAR 0 4
49758: ARRAY
49759: PPUSH
49760: LD_INT 1
49762: PPUSH
49763: CALL_OW 3
49767: PPUSH
49768: CALL_OW 1
49772: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
49773: LD_ADDR_EXP 12
49777: PUSH
49778: LD_EXP 12
49782: PPUSH
49783: LD_VAR 0 4
49787: PUSH
49788: LD_EXP 12
49792: PUSH
49793: LD_VAR 0 4
49797: ARRAY
49798: PUSH
49799: LD_INT 1
49801: PLUS
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PPUSH
49807: LD_VAR 0 1
49811: PPUSH
49812: CALL 6348 0 3
49816: ST_TO_ADDR
// exit ;
49817: POP
49818: POP
49819: GO 49825
// end ; end ;
49821: GO 49669
49823: POP
49824: POP
// end ;
49825: LD_VAR 0 3
49829: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
49830: LD_INT 0
49832: PPUSH
49833: PPUSH
49834: PPUSH
// if not mc_bases then
49835: LD_EXP 5
49839: NOT
49840: IFFALSE 49844
// exit ;
49842: GO 50034
// for i = 1 to mc_bases do
49844: LD_ADDR_VAR 0 4
49848: PUSH
49849: DOUBLE
49850: LD_INT 1
49852: DEC
49853: ST_TO_ADDR
49854: LD_EXP 5
49858: PUSH
49859: FOR_TO
49860: IFFALSE 49947
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
49862: LD_VAR 0 1
49866: PUSH
49867: LD_EXP 13
49871: PUSH
49872: LD_VAR 0 4
49876: ARRAY
49877: IN
49878: PUSH
49879: LD_VAR 0 1
49883: PUSH
49884: LD_EXP 14
49888: PUSH
49889: LD_VAR 0 4
49893: ARRAY
49894: IN
49895: NOT
49896: AND
49897: IFFALSE 49945
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
49899: LD_ADDR_EXP 14
49903: PUSH
49904: LD_EXP 14
49908: PPUSH
49909: LD_VAR 0 4
49913: PUSH
49914: LD_EXP 14
49918: PUSH
49919: LD_VAR 0 4
49923: ARRAY
49924: PUSH
49925: LD_INT 1
49927: PLUS
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PPUSH
49933: LD_VAR 0 1
49937: PPUSH
49938: CALL 6348 0 3
49942: ST_TO_ADDR
// break ;
49943: GO 49947
// end ; end ;
49945: GO 49859
49947: POP
49948: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
49949: LD_VAR 0 1
49953: PPUSH
49954: CALL_OW 257
49958: PUSH
49959: LD_EXP 30
49963: IN
49964: PUSH
49965: LD_VAR 0 1
49969: PPUSH
49970: CALL_OW 266
49974: PUSH
49975: LD_INT 5
49977: EQUAL
49978: AND
49979: PUSH
49980: LD_VAR 0 2
49984: PPUSH
49985: CALL_OW 110
49989: PUSH
49990: LD_INT 18
49992: NONEQUAL
49993: AND
49994: IFFALSE 50034
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
49996: LD_VAR 0 2
50000: PPUSH
50001: CALL_OW 257
50005: PUSH
50006: LD_INT 5
50008: PUSH
50009: LD_INT 8
50011: PUSH
50012: LD_INT 9
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: LIST
50019: IN
50020: IFFALSE 50034
// SetClass ( unit , 1 ) ;
50022: LD_VAR 0 2
50026: PPUSH
50027: LD_INT 1
50029: PPUSH
50030: CALL_OW 336
// end ;
50034: LD_VAR 0 3
50038: RET
// export function MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
50039: LD_INT 0
50041: PPUSH
50042: PPUSH
// if not mc_bases then
50043: LD_EXP 5
50047: NOT
50048: IFFALSE 50052
// exit ;
50050: GO 50168
// if GetLives ( abandoned_vehicle ) > 250 then
50052: LD_VAR 0 2
50056: PPUSH
50057: CALL_OW 256
50061: PUSH
50062: LD_INT 250
50064: GREATER
50065: IFFALSE 50069
// exit ;
50067: GO 50168
// for i = 1 to mc_bases do
50069: LD_ADDR_VAR 0 6
50073: PUSH
50074: DOUBLE
50075: LD_INT 1
50077: DEC
50078: ST_TO_ADDR
50079: LD_EXP 5
50083: PUSH
50084: FOR_TO
50085: IFFALSE 50166
// begin if driver in mc_bases [ i ] then
50087: LD_VAR 0 1
50091: PUSH
50092: LD_EXP 5
50096: PUSH
50097: LD_VAR 0 6
50101: ARRAY
50102: IN
50103: IFFALSE 50164
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
50105: LD_VAR 0 1
50109: PPUSH
50110: LD_EXP 5
50114: PUSH
50115: LD_VAR 0 6
50119: ARRAY
50120: PPUSH
50121: LD_INT 2
50123: PUSH
50124: LD_INT 30
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 30
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: LIST
50148: PPUSH
50149: CALL_OW 72
50153: PUSH
50154: LD_INT 1
50156: ARRAY
50157: PPUSH
50158: CALL_OW 112
// break ;
50162: GO 50166
// end ; end ;
50164: GO 50084
50166: POP
50167: POP
// end ;
50168: LD_VAR 0 5
50172: RET
