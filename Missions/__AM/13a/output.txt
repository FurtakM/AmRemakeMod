// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitVariables ;
   8: CALL 587 0 0
// InitMacro ;
  12: CALL 41728 0 0
// PrepareNature ( 3 , 3 , 3 , 4 , 3 , 0 , 0 , nature_area , 0 ) ;
  16: LD_INT 3
  18: PPUSH
  19: LD_INT 3
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 4
  27: PPUSH
  28: LD_INT 3
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: LD_INT 5
  39: PPUSH
  40: LD_INT 0
  42: PPUSH
  43: CALL 37603 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_russian , 0 ) ;
  47: LD_INT 0
  49: PPUSH
  50: LD_INT 0
  52: PPUSH
  53: LD_INT 5
  55: PPUSH
  56: LD_INT 0
  58: PPUSH
  59: LD_INT 0
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: LD_INT 0
  67: PPUSH
  68: LD_INT 8
  70: PPUSH
  71: LD_INT 0
  73: PPUSH
  74: CALL 37603 0 9
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 1 , 0 , area_apeman_arabian , 0 ) ;
  78: LD_INT 0
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 6
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: LD_INT 0
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: LD_INT 6
 101: PPUSH
 102: LD_INT 0
 104: PPUSH
 105: CALL 37603 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_alliance , 0 ) ;
 109: LD_INT 0
 111: PPUSH
 112: LD_INT 0
 114: PPUSH
 115: LD_INT 5
 117: PPUSH
 118: LD_INT 0
 120: PPUSH
 121: LD_INT 0
 123: PPUSH
 124: LD_INT 0
 126: PPUSH
 127: LD_INT 0
 129: PPUSH
 130: LD_INT 12
 132: PPUSH
 133: LD_INT 0
 135: PPUSH
 136: CALL 37603 0 9
// PrepareArabian ;
 140: CALL 2055 0 0
// PrepareRussian ;
 144: CALL 1811 0 0
// PrepareAlliance ;
 148: CALL 627 0 0
// Skirmish_Start ;
 152: CALL 41941 0 0
// if debug then
 156: LD_EXP 1
 160: IFFALSE 169
// FogOff ( 1 ) ;
 162: LD_INT 1
 164: PPUSH
 165: CALL_OW 344
// Action ;
 169: CALL 2594 0 0
// end ;
 173: END
// export function CustomInitMacro ; var i ; begin
 174: LD_INT 0
 176: PPUSH
 177: PPUSH
// mc_parking := [ parking_arabian , parking_russian ] ;
 178: LD_ADDR_EXP 61
 182: PUSH
 183: LD_INT 1
 185: PUSH
 186: LD_INT 2
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: ST_TO_ADDR
// mc_scan_area := [ area_base_arabian , area_base_russian ] ;
 193: LD_ADDR_EXP 62
 197: PUSH
 198: LD_INT 3
 200: PUSH
 201: LD_INT 4
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 12 , 15 , 18 ] [ Difficulty ] , minefield ) ;
 208: LD_INT 1
 210: PPUSH
 211: LD_INT 12
 213: PUSH
 214: LD_INT 15
 216: PUSH
 217: LD_INT 18
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: PUSH
 225: LD_OWVAR 67
 229: ARRAY
 230: PPUSH
 231: LD_INT 7
 233: PPUSH
 234: CALL 54771 0 3
// MC_SetDefenderList ( 1 , arabian_guard ) ;
 238: LD_INT 1
 240: PPUSH
 241: LD_EXP 35
 245: PPUSH
 246: CALL 55140 0 2
// MC_SetTame ( 1 , area_apeman_arabian ) ;
 250: LD_INT 1
 252: PPUSH
 253: LD_INT 6
 255: PPUSH
 256: CALL 55497 0 2
// MC_SetCratesArea ( 1 , [ area_collect_arabian ] ) ;
 260: LD_INT 1
 262: PPUSH
 263: LD_INT 9
 265: PUSH
 266: EMPTY
 267: LIST
 268: PPUSH
 269: CALL 55639 0 2
// MC_InsertProduceList ( 1 , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 13
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: LD_INT 2
 284: PUSH
 285: LD_INT 32
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL 55077 0 2
// MC_SetLabKind ( 2 , [ b_lab_computer , b_lab_spacetime , b_lab_weapon , b_lab_siberium ] ) ;
 298: LD_INT 2
 300: PPUSH
 301: LD_INT 12
 303: PUSH
 304: LD_INT 14
 306: PUSH
 307: LD_INT 10
 309: PUSH
 310: LD_INT 11
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: PPUSH
 319: CALL 55546 0 2
// MC_SetDefenderList ( 2 , russian_guard ) ;
 323: LD_INT 2
 325: PPUSH
 326: LD_EXP 33
 330: PPUSH
 331: CALL 55140 0 2
// MC_SetTame ( 2 , area_apeman_russian ) ;
 335: LD_INT 2
 337: PPUSH
 338: LD_INT 8
 340: PPUSH
 341: CALL 55497 0 2
// MC_SetCratesArea ( 2 , [ area_collect_russian ] ) ;
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 10
 350: PUSH
 351: EMPTY
 352: LIST
 353: PPUSH
 354: CALL 55639 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 71 , 116 , 4 ] , [ b_armoury , 85 , 116 , 4 ] , [ b_bunker , 83 , 111 , 4 ] , [ b_bunker , 87 , 121 , 4 ] , [ b_turret , 88 , 128 , 4 ] , [ b_bunker , 59 , 89 , 3 ] , [ b_turret , 69 , 98 , 3 ] , [ b_turret , 77 , 103 , 3 ] , [ b_turret , 83 , 105 , 3 ] , [ b_turret , 71 , 125 , 5 ] ] ) ;
 358: LD_INT 2
 360: PPUSH
 361: LD_INT 6
 363: PUSH
 364: LD_INT 71
 366: PUSH
 367: LD_INT 116
 369: PUSH
 370: LD_INT 4
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_INT 4
 381: PUSH
 382: LD_INT 85
 384: PUSH
 385: LD_INT 116
 387: PUSH
 388: LD_INT 4
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 32
 399: PUSH
 400: LD_INT 83
 402: PUSH
 403: LD_INT 111
 405: PUSH
 406: LD_INT 4
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 32
 417: PUSH
 418: LD_INT 87
 420: PUSH
 421: LD_INT 121
 423: PUSH
 424: LD_INT 4
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 33
 435: PUSH
 436: LD_INT 88
 438: PUSH
 439: LD_INT 128
 441: PUSH
 442: LD_INT 4
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 32
 453: PUSH
 454: LD_INT 59
 456: PUSH
 457: LD_INT 89
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 33
 471: PUSH
 472: LD_INT 69
 474: PUSH
 475: LD_INT 98
 477: PUSH
 478: LD_INT 3
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 33
 489: PUSH
 490: LD_INT 77
 492: PUSH
 493: LD_INT 103
 495: PUSH
 496: LD_INT 3
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_INT 33
 507: PUSH
 508: LD_INT 83
 510: PUSH
 511: LD_INT 105
 513: PUSH
 514: LD_INT 3
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 33
 525: PUSH
 526: LD_INT 71
 528: PUSH
 529: LD_INT 125
 531: PUSH
 532: LD_INT 5
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL 54981 0 2
// MC_InsertProduceList ( 2 , [ ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay ] ) ;
 557: LD_INT 2
 559: PPUSH
 560: LD_INT 21
 562: PUSH
 563: LD_INT 3
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 51
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL 55077 0 2
// end ;
 582: LD_VAR 0 1
 586: RET
// export debug , game , freedom , gossudarov_arrive , ru_lab_builded ; function InitVariables ; begin
 587: LD_INT 0
 589: PPUSH
// debug := true ;
 590: LD_ADDR_EXP 1
 594: PUSH
 595: LD_INT 1
 597: ST_TO_ADDR
// game := true ;
 598: LD_ADDR_EXP 2
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// gossudarov_arrive := false ;
 606: LD_ADDR_EXP 4
 610: PUSH
 611: LD_INT 0
 613: ST_TO_ADDR
// ru_lab_builded := false ;
 614: LD_ADDR_EXP 5
 618: PUSH
 619: LD_INT 0
 621: ST_TO_ADDR
// end ; end_of_file
 622: LD_VAR 0 1
 626: RET
// export JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export Gossudarov , Kirilenkova , Titov , Fadeev , Dologov , Petrosyan ; export Burlak , Bielkov , Gnyevko ; export function PrepareAlliance ; var veh ; begin
 627: LD_INT 0
 629: PPUSH
 630: PPUSH
// uc_side := 7 ;
 631: LD_ADDR_OWVAR 20
 635: PUSH
 636: LD_INT 7
 638: ST_TO_ADDR
// uc_nation := 1 ;
 639: LD_ADDR_OWVAR 21
 643: PUSH
 644: LD_INT 1
 646: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 12a_ ) ;
 647: LD_ADDR_EXP 6
 651: PUSH
 652: LD_STRING JMM
 654: PPUSH
 655: LD_EXP 1
 659: NOT
 660: PPUSH
 661: LD_STRING 12a_
 663: PPUSH
 664: CALL 4338 0 3
 668: ST_TO_ADDR
// PlaceUnitXY ( JMM , 71 , 23 , false ) ;
 669: LD_EXP 6
 673: PPUSH
 674: LD_INT 71
 676: PPUSH
 677: LD_INT 23
 679: PPUSH
 680: LD_INT 0
 682: PPUSH
 683: CALL_OW 48
// SetClass ( JMM , 2 ) ;
 687: LD_EXP 6
 691: PPUSH
 692: LD_INT 2
 694: PPUSH
 695: CALL_OW 336
// Roth := PrepareUnit ( Roth , ( not debug ) , 12a_ ) ;
 699: LD_ADDR_EXP 7
 703: PUSH
 704: LD_STRING Roth
 706: PPUSH
 707: LD_EXP 1
 711: NOT
 712: PPUSH
 713: LD_STRING 12a_
 715: PPUSH
 716: CALL 4338 0 3
 720: ST_TO_ADDR
// if Roth then
 721: LD_EXP 7
 725: IFFALSE 745
// PlaceUnitXY ( Roth , 71 , 21 , false ) ;
 727: LD_EXP 7
 731: PPUSH
 732: LD_INT 71
 734: PPUSH
 735: LD_INT 21
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 48
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 12a_ ) ;
 745: LD_ADDR_EXP 8
 749: PUSH
 750: LD_STRING Lisa
 752: PPUSH
 753: LD_EXP 1
 757: NOT
 758: PPUSH
 759: LD_STRING 12a_
 761: PPUSH
 762: CALL 4338 0 3
 766: ST_TO_ADDR
// if Lisa then
 767: LD_EXP 8
 771: IFFALSE 788
// PlaceUnitArea ( Lisa , alliance_start , false ) ;
 773: LD_EXP 8
 777: PPUSH
 778: LD_INT 13
 780: PPUSH
 781: LD_INT 0
 783: PPUSH
 784: CALL_OW 49
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 12a_ ) ;
 788: LD_ADDR_EXP 9
 792: PUSH
 793: LD_STRING Donaldson
 795: PPUSH
 796: LD_EXP 1
 800: NOT
 801: PPUSH
 802: LD_STRING 12a_
 804: PPUSH
 805: CALL 4338 0 3
 809: ST_TO_ADDR
// if Donaldson then
 810: LD_EXP 9
 814: IFFALSE 831
// PlaceUnitArea ( Donaldson , alliance_start , false ) ;
 816: LD_EXP 9
 820: PPUSH
 821: LD_INT 13
 823: PPUSH
 824: LD_INT 0
 826: PPUSH
 827: CALL_OW 49
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 12a_ ) ;
 831: LD_ADDR_EXP 10
 835: PUSH
 836: LD_STRING Bobby
 838: PPUSH
 839: LD_EXP 1
 843: NOT
 844: PPUSH
 845: LD_STRING 12a_
 847: PPUSH
 848: CALL 4338 0 3
 852: ST_TO_ADDR
// if Bobby then
 853: LD_EXP 10
 857: IFFALSE 874
// PlaceUnitArea ( Bobby , alliance_start , false ) ;
 859: LD_EXP 10
 863: PPUSH
 864: LD_INT 13
 866: PPUSH
 867: LD_INT 0
 869: PPUSH
 870: CALL_OW 49
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 12a_ ) ;
 874: LD_ADDR_EXP 11
 878: PUSH
 879: LD_STRING Cyrus
 881: PPUSH
 882: LD_EXP 1
 886: NOT
 887: PPUSH
 888: LD_STRING 12a_
 890: PPUSH
 891: CALL 4338 0 3
 895: ST_TO_ADDR
// if Cyrus then
 896: LD_EXP 11
 900: IFFALSE 917
// PlaceUnitArea ( Cyrus , alliance_start , false ) ;
 902: LD_EXP 11
 906: PPUSH
 907: LD_INT 13
 909: PPUSH
 910: LD_INT 0
 912: PPUSH
 913: CALL_OW 49
// Denis := PrepareUnit ( Denis , ( not debug ) , 12a_ ) ;
 917: LD_ADDR_EXP 12
 921: PUSH
 922: LD_STRING Denis
 924: PPUSH
 925: LD_EXP 1
 929: NOT
 930: PPUSH
 931: LD_STRING 12a_
 933: PPUSH
 934: CALL 4338 0 3
 938: ST_TO_ADDR
// if Denis then
 939: LD_EXP 12
 943: IFFALSE 960
// PlaceUnitArea ( Denis , alliance_start , false ) ;
 945: LD_EXP 12
 949: PPUSH
 950: LD_INT 13
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// Brown := PrepareUnit ( Brown , ( not debug ) , 12a_ ) ;
 960: LD_ADDR_EXP 13
 964: PUSH
 965: LD_STRING Brown
 967: PPUSH
 968: LD_EXP 1
 972: NOT
 973: PPUSH
 974: LD_STRING 12a_
 976: PPUSH
 977: CALL 4338 0 3
 981: ST_TO_ADDR
// if Brown then
 982: LD_EXP 13
 986: IFFALSE 1003
// PlaceUnitArea ( Brown , alliance_start , false ) ;
 988: LD_EXP 13
 992: PPUSH
 993: LD_INT 13
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL_OW 49
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 12a_ ) ;
1003: LD_ADDR_EXP 14
1007: PUSH
1008: LD_STRING Gladstone
1010: PPUSH
1011: LD_EXP 1
1015: NOT
1016: PPUSH
1017: LD_STRING 12a_
1019: PPUSH
1020: CALL 4338 0 3
1024: ST_TO_ADDR
// if Gladstone then
1025: LD_EXP 14
1029: IFFALSE 1046
// PlaceUnitArea ( Gladstone , alliance_start , false ) ;
1031: LD_EXP 14
1035: PPUSH
1036: LD_INT 13
1038: PPUSH
1039: LD_INT 0
1041: PPUSH
1042: CALL_OW 49
// Houten := PrepareUnit ( Houten , ( not debug ) , 12a_ ) ;
1046: LD_ADDR_EXP 15
1050: PUSH
1051: LD_STRING Houten
1053: PPUSH
1054: LD_EXP 1
1058: NOT
1059: PPUSH
1060: LD_STRING 12a_
1062: PPUSH
1063: CALL 4338 0 3
1067: ST_TO_ADDR
// if Houten then
1068: LD_EXP 15
1072: IFFALSE 1089
// PlaceUnitArea ( Houten , alliance_start , false ) ;
1074: LD_EXP 15
1078: PPUSH
1079: LD_INT 13
1081: PPUSH
1082: LD_INT 0
1084: PPUSH
1085: CALL_OW 49
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 12a_ ) ;
1089: LD_ADDR_EXP 16
1093: PUSH
1094: LD_STRING Cornel
1096: PPUSH
1097: LD_EXP 1
1101: NOT
1102: PPUSH
1103: LD_STRING 12a_
1105: PPUSH
1106: CALL 4338 0 3
1110: ST_TO_ADDR
// if Cornel then
1111: LD_EXP 16
1115: IFFALSE 1132
// PlaceUnitArea ( Cornel , alliance_start , false ) ;
1117: LD_EXP 16
1121: PPUSH
1122: LD_INT 13
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL_OW 49
// Gary := PrepareUnit ( Gary , ( not debug ) , 12a_ ) ;
1132: LD_ADDR_EXP 17
1136: PUSH
1137: LD_STRING Gary
1139: PPUSH
1140: LD_EXP 1
1144: NOT
1145: PPUSH
1146: LD_STRING 12a_
1148: PPUSH
1149: CALL 4338 0 3
1153: ST_TO_ADDR
// if Gary then
1154: LD_EXP 17
1158: IFFALSE 1175
// PlaceUnitArea ( Gary , alliance_start , false ) ;
1160: LD_EXP 17
1164: PPUSH
1165: LD_INT 13
1167: PPUSH
1168: LD_INT 0
1170: PPUSH
1171: CALL_OW 49
// Frank := PrepareUnit ( Frank , ( not debug ) , 12a_ ) ;
1175: LD_ADDR_EXP 18
1179: PUSH
1180: LD_STRING Frank
1182: PPUSH
1183: LD_EXP 1
1187: NOT
1188: PPUSH
1189: LD_STRING 12a_
1191: PPUSH
1192: CALL 4338 0 3
1196: ST_TO_ADDR
// if Frank then
1197: LD_EXP 18
1201: IFFALSE 1218
// PlaceUnitArea ( Frank , alliance_start , false ) ;
1203: LD_EXP 18
1207: PPUSH
1208: LD_INT 13
1210: PPUSH
1211: LD_INT 0
1213: PPUSH
1214: CALL_OW 49
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 12a_ ) ;
1218: LD_ADDR_EXP 19
1222: PUSH
1223: LD_STRING Kikuchi
1225: PPUSH
1226: LD_EXP 1
1230: NOT
1231: PPUSH
1232: LD_STRING 12a_
1234: PPUSH
1235: CALL 4338 0 3
1239: ST_TO_ADDR
// if Kikuchi then
1240: LD_EXP 19
1244: IFFALSE 1261
// PlaceUnitArea ( Kikuchi , alliance_start , false ) ;
1246: LD_EXP 19
1250: PPUSH
1251: LD_INT 13
1253: PPUSH
1254: LD_INT 0
1256: PPUSH
1257: CALL_OW 49
// Simms := PrepareUnit ( Simms , ( not debug ) , 12a_ ) ;
1261: LD_ADDR_EXP 20
1265: PUSH
1266: LD_STRING Simms
1268: PPUSH
1269: LD_EXP 1
1273: NOT
1274: PPUSH
1275: LD_STRING 12a_
1277: PPUSH
1278: CALL 4338 0 3
1282: ST_TO_ADDR
// if Simms then
1283: LD_EXP 20
1287: IFFALSE 1304
// PlaceUnitArea ( Simms , alliance_start , false ) ;
1289: LD_EXP 20
1293: PPUSH
1294: LD_INT 13
1296: PPUSH
1297: LD_INT 0
1299: PPUSH
1300: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 12a_ ) ;
1304: LD_ADDR_EXP 21
1308: PUSH
1309: LD_STRING Joan
1311: PPUSH
1312: LD_EXP 1
1316: NOT
1317: PPUSH
1318: LD_STRING 12a_
1320: PPUSH
1321: CALL 4338 0 3
1325: ST_TO_ADDR
// if Joan then
1326: LD_EXP 21
1330: IFFALSE 1347
// PlaceUnitArea ( Joan , alliance_start , false ) ;
1332: LD_EXP 21
1336: PPUSH
1337: LD_INT 13
1339: PPUSH
1340: LD_INT 0
1342: PPUSH
1343: CALL_OW 49
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 12a_ ) ;
1347: LD_ADDR_EXP 22
1351: PUSH
1352: LD_STRING DeltaDoctor
1354: PPUSH
1355: LD_EXP 1
1359: NOT
1360: PPUSH
1361: LD_STRING 12a_
1363: PPUSH
1364: CALL 4338 0 3
1368: ST_TO_ADDR
// if DeltaDoctor then
1369: LD_EXP 22
1373: IFFALSE 1390
// PlaceUnitArea ( DeltaDoctor , alliance_start , false ) ;
1375: LD_EXP 22
1379: PPUSH
1380: LD_INT 13
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL_OW 49
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1390: LD_INT 3
1392: PPUSH
1393: LD_INT 3
1395: PPUSH
1396: LD_INT 3
1398: PPUSH
1399: LD_INT 12
1401: PPUSH
1402: LD_INT 100
1404: PPUSH
1405: CALL 10319 0 5
// veh := CreateVehicle ;
1409: LD_ADDR_VAR 0 2
1413: PUSH
1414: CALL_OW 45
1418: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1419: LD_VAR 0 2
1423: PPUSH
1424: LD_INT 2
1426: PPUSH
1427: CALL_OW 233
// PlaceUnitXY ( veh , 63 , 9 , false ) ;
1431: LD_VAR 0 2
1435: PPUSH
1436: LD_INT 63
1438: PPUSH
1439: LD_INT 9
1441: PPUSH
1442: LD_INT 0
1444: PPUSH
1445: CALL_OW 48
// SetCargo ( veh , mat_artifact , 30 ) ;
1449: LD_VAR 0 2
1453: PPUSH
1454: LD_INT 4
1456: PPUSH
1457: LD_INT 30
1459: PPUSH
1460: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , debug ) then
1464: LD_STRING 11_artifact_captured
1466: PPUSH
1467: LD_EXP 1
1471: PPUSH
1472: CALL_OW 30
1476: IFFALSE 1552
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1478: LD_INT 3
1480: PPUSH
1481: LD_INT 3
1483: PPUSH
1484: LD_INT 3
1486: PPUSH
1487: LD_INT 12
1489: PPUSH
1490: LD_INT 100
1492: PPUSH
1493: CALL 10319 0 5
// veh := CreateVehicle ;
1497: LD_ADDR_VAR 0 2
1501: PUSH
1502: CALL_OW 45
1506: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1507: LD_VAR 0 2
1511: PPUSH
1512: LD_INT 2
1514: PPUSH
1515: CALL_OW 233
// PlaceUnitXY ( veh , 60 , 4 , false ) ;
1519: LD_VAR 0 2
1523: PPUSH
1524: LD_INT 60
1526: PPUSH
1527: LD_INT 4
1529: PPUSH
1530: LD_INT 0
1532: PPUSH
1533: CALL_OW 48
// SetCargo ( veh , mat_artifact , 50 ) ;
1537: LD_VAR 0 2
1541: PPUSH
1542: LD_INT 4
1544: PPUSH
1545: LD_INT 50
1547: PPUSH
1548: CALL_OW 290
// end ; end ;
1552: LD_VAR 0 1
1556: RET
// export function PrepareGossudarov ; var tmp , i , un ; begin
1557: LD_INT 0
1559: PPUSH
1560: PPUSH
1561: PPUSH
1562: PPUSH
// uc_side := 6 ;
1563: LD_ADDR_OWVAR 20
1567: PUSH
1568: LD_INT 6
1570: ST_TO_ADDR
// uc_nation := 3 ;
1571: LD_ADDR_OWVAR 21
1575: PUSH
1576: LD_INT 3
1578: ST_TO_ADDR
// InitHc ;
1579: CALL_OW 19
// Gossudarov := NewCharacter ( Gossudarov ) ;
1583: LD_ADDR_EXP 23
1587: PUSH
1588: LD_STRING Gossudarov
1590: PPUSH
1591: CALL_OW 25
1595: ST_TO_ADDR
// Kirilenkova := NewCharacter ( Kirilenkova ) ;
1596: LD_ADDR_EXP 24
1600: PUSH
1601: LD_STRING Kirilenkova
1603: PPUSH
1604: CALL_OW 25
1608: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
1609: LD_ADDR_EXP 25
1613: PUSH
1614: LD_STRING Titov
1616: PPUSH
1617: CALL_OW 25
1621: ST_TO_ADDR
// Fadeev := NewCharacter ( Fadeev ) ;
1622: LD_ADDR_EXP 26
1626: PUSH
1627: LD_STRING Fadeev
1629: PPUSH
1630: CALL_OW 25
1634: ST_TO_ADDR
// Dologov := NewCharacter ( Dologov ) ;
1635: LD_ADDR_EXP 27
1639: PUSH
1640: LD_STRING Dologov
1642: PPUSH
1643: CALL_OW 25
1647: ST_TO_ADDR
// Petrosyan := NewCharacter ( Petrosyan ) ;
1648: LD_ADDR_EXP 28
1652: PUSH
1653: LD_STRING Petrosyan
1655: PPUSH
1656: CALL_OW 25
1660: ST_TO_ADDR
// PrepareScientist ( sex_male , 8 ) ;
1661: LD_INT 1
1663: PPUSH
1664: LD_INT 8
1666: PPUSH
1667: CALL_OW 384
// un := CreateHuman ;
1671: LD_ADDR_VAR 0 4
1675: PUSH
1676: CALL_OW 44
1680: ST_TO_ADDR
// PlaceUnitArea ( un , gossudarov_spawn , false ) ;
1681: LD_VAR 0 4
1685: PPUSH
1686: LD_INT 14
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// tmp := [ Gossudarov , Kirilenkova , Titov , Fadeev , Dologov , Petrosyan , un ] ;
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: LD_EXP 23
1705: PUSH
1706: LD_EXP 24
1710: PUSH
1711: LD_EXP 25
1715: PUSH
1716: LD_EXP 26
1720: PUSH
1721: LD_EXP 27
1725: PUSH
1726: LD_EXP 28
1730: PUSH
1731: LD_VAR 0 4
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: ST_TO_ADDR
// for i in tmp do
1745: LD_ADDR_VAR 0 3
1749: PUSH
1750: LD_VAR 0 2
1754: PUSH
1755: FOR_IN
1756: IFFALSE 1775
// PlaceUnitArea ( i , gossudarov_spawn , false ) ;
1758: LD_VAR 0 3
1762: PPUSH
1763: LD_INT 14
1765: PPUSH
1766: LD_INT 0
1768: PPUSH
1769: CALL_OW 49
1773: GO 1755
1775: POP
1776: POP
// ComMoveXY ( tmp , GetX ( freedom ) , GetY ( freedom ) ) ;
1777: LD_VAR 0 2
1781: PPUSH
1782: LD_EXP 3
1786: PPUSH
1787: CALL_OW 250
1791: PPUSH
1792: LD_EXP 3
1796: PPUSH
1797: CALL_OW 251
1801: PPUSH
1802: CALL_OW 111
// end ; end_of_file
1806: LD_VAR 0 1
1810: RET
// export russian_force , russian_guard ; export function PrepareRussian ; var i , veh , tmp ; begin
1811: LD_INT 0
1813: PPUSH
1814: PPUSH
1815: PPUSH
1816: PPUSH
// uc_side := 3 ;
1817: LD_ADDR_OWVAR 20
1821: PUSH
1822: LD_INT 3
1824: ST_TO_ADDR
// uc_nation := 3 ;
1825: LD_ADDR_OWVAR 21
1829: PUSH
1830: LD_INT 3
1832: ST_TO_ADDR
// russian_force := PrepareBase ( ru_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 10000 , 3000 , 300 ] , [ 9 , 5 , 6 , 6 ] ) ;
1833: LD_ADDR_EXP 32
1837: PUSH
1838: LD_INT 47
1840: PPUSH
1841: LD_STRING 
1843: PPUSH
1844: LD_INT 7
1846: PUSH
1847: LD_INT 8
1849: PUSH
1850: LD_INT 9
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PUSH
1858: LD_OWVAR 67
1862: ARRAY
1863: PPUSH
1864: LD_INT 10000
1866: PUSH
1867: LD_INT 3000
1869: PUSH
1870: LD_INT 300
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: PPUSH
1878: LD_INT 9
1880: PUSH
1881: LD_INT 5
1883: PUSH
1884: LD_INT 6
1886: PUSH
1887: LD_INT 6
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: PPUSH
1896: CALL 13718 0 5
1900: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , russian_force ) ;
1901: LD_ADDR_EXP 37
1905: PUSH
1906: LD_EXP 37
1910: PPUSH
1911: LD_INT 2
1913: PPUSH
1914: LD_EXP 32
1918: PPUSH
1919: CALL_OW 1
1923: ST_TO_ADDR
// tmp := [ ] ;
1924: LD_ADDR_VAR 0 4
1928: PUSH
1929: EMPTY
1930: ST_TO_ADDR
// for i = 1 to 4 do
1931: LD_ADDR_VAR 0 2
1935: PUSH
1936: DOUBLE
1937: LD_INT 1
1939: DEC
1940: ST_TO_ADDR
1941: LD_INT 4
1943: PUSH
1944: FOR_TO
1945: IFFALSE 2038
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun ] [ i mod 4 + 1 ] , 100 ) ;
1947: LD_INT 22
1949: PPUSH
1950: LD_INT 3
1952: PPUSH
1953: LD_INT 3
1955: PPUSH
1956: LD_INT 43
1958: PUSH
1959: LD_INT 45
1961: PUSH
1962: LD_INT 45
1964: PUSH
1965: LD_INT 44
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: LD_VAR 0 2
1978: PUSH
1979: LD_INT 4
1981: MOD
1982: PUSH
1983: LD_INT 1
1985: PLUS
1986: ARRAY
1987: PPUSH
1988: LD_INT 100
1990: PPUSH
1991: CALL 10319 0 5
// veh := CreateVehicle ;
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: CALL_OW 45
2004: ST_TO_ADDR
// tmp := tmp ^ veh ;
2005: LD_ADDR_VAR 0 4
2009: PUSH
2010: LD_VAR 0 4
2014: PUSH
2015: LD_VAR 0 3
2019: ADD
2020: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_russian , false ) ;
2021: LD_VAR 0 3
2025: PPUSH
2026: LD_INT 2
2028: PPUSH
2029: LD_INT 0
2031: PPUSH
2032: CALL_OW 49
// end ;
2036: GO 1944
2038: POP
2039: POP
// russian_guard := tmp ;
2040: LD_ADDR_EXP 33
2044: PUSH
2045: LD_VAR 0 4
2049: ST_TO_ADDR
// end ; end_of_file
2050: LD_VAR 0 1
2054: RET
// export arabian_force , arabian_guard ; export function PrepareArabian ; var i , veh , tmp , xy , un , un2 ; begin
2055: LD_INT 0
2057: PPUSH
2058: PPUSH
2059: PPUSH
2060: PPUSH
2061: PPUSH
2062: PPUSH
2063: PPUSH
// uc_side := 2 ;
2064: LD_ADDR_OWVAR 20
2068: PUSH
2069: LD_INT 2
2071: ST_TO_ADDR
// uc_nation := 2 ;
2072: LD_ADDR_OWVAR 21
2076: PUSH
2077: LD_INT 2
2079: ST_TO_ADDR
// arabian_force := PrepareBase ( ar_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 5000 , 1000 , 300 ] , [ 22 , 5 , 6 , 9 ] ) ;
2080: LD_ADDR_EXP 34
2084: PUSH
2085: LD_INT 1
2087: PPUSH
2088: LD_STRING 
2090: PPUSH
2091: LD_INT 7
2093: PUSH
2094: LD_INT 8
2096: PUSH
2097: LD_INT 9
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: PUSH
2105: LD_OWVAR 67
2109: ARRAY
2110: PPUSH
2111: LD_INT 5000
2113: PUSH
2114: LD_INT 1000
2116: PUSH
2117: LD_INT 300
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: LIST
2124: PPUSH
2125: LD_INT 22
2127: PUSH
2128: LD_INT 5
2130: PUSH
2131: LD_INT 6
2133: PUSH
2134: LD_INT 9
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL 13718 0 5
2147: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , arabian_force ) ;
2148: LD_ADDR_EXP 37
2152: PUSH
2153: LD_EXP 37
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: LD_EXP 34
2165: PPUSH
2166: CALL_OW 1
2170: ST_TO_ADDR
// tmp := [ ] ;
2171: LD_ADDR_VAR 0 4
2175: PUSH
2176: EMPTY
2177: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2178: LD_ADDR_OWVAR 37
2182: PUSH
2183: LD_INT 14
2185: ST_TO_ADDR
// vc_engine := engine_siberite ;
2186: LD_ADDR_OWVAR 39
2190: PUSH
2191: LD_INT 3
2193: ST_TO_ADDR
// vc_control := control_manual ;
2194: LD_ADDR_OWVAR 38
2198: PUSH
2199: LD_INT 1
2201: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2202: LD_ADDR_OWVAR 40
2206: PUSH
2207: LD_INT 31
2209: ST_TO_ADDR
// for i = 1 to 3 do
2210: LD_ADDR_VAR 0 2
2214: PUSH
2215: DOUBLE
2216: LD_INT 1
2218: DEC
2219: ST_TO_ADDR
2220: LD_INT 3
2222: PUSH
2223: FOR_TO
2224: IFFALSE 2468
// begin xy := [ [ 153 , 71 ] , [ 155 , 81 ] ] [ i mod 2 + 1 ] ;
2226: LD_ADDR_VAR 0 5
2230: PUSH
2231: LD_INT 153
2233: PUSH
2234: LD_INT 71
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: PUSH
2241: LD_INT 155
2243: PUSH
2244: LD_INT 81
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: PUSH
2255: LD_VAR 0 2
2259: PUSH
2260: LD_INT 2
2262: MOD
2263: PUSH
2264: LD_INT 1
2266: PLUS
2267: ARRAY
2268: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
2269: LD_INT 0
2271: PPUSH
2272: LD_INT 3
2274: PPUSH
2275: LD_INT 7
2277: PUSH
2278: LD_INT 8
2280: PUSH
2281: LD_INT 9
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: LD_OWVAR 67
2293: ARRAY
2294: PPUSH
2295: CALL_OW 380
// un := CreateVehicle ;
2299: LD_ADDR_VAR 0 6
2303: PUSH
2304: CALL_OW 45
2308: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2309: LD_VAR 0 6
2313: PPUSH
2314: LD_INT 0
2316: PPUSH
2317: LD_INT 5
2319: PPUSH
2320: CALL_OW 12
2324: PPUSH
2325: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
2329: LD_VAR 0 6
2333: PPUSH
2334: LD_VAR 0 5
2338: PUSH
2339: LD_INT 1
2341: ARRAY
2342: PPUSH
2343: LD_VAR 0 5
2347: PUSH
2348: LD_INT 2
2350: ARRAY
2351: PPUSH
2352: LD_INT 6
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: CALL_OW 50
// un2 := CreateHuman ;
2362: LD_ADDR_VAR 0 7
2366: PUSH
2367: CALL_OW 44
2371: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
2372: LD_VAR 0 7
2376: PPUSH
2377: LD_VAR 0 6
2381: PPUSH
2382: CALL_OW 52
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un ) ;
2386: LD_ADDR_EXP 37
2390: PUSH
2391: LD_EXP 37
2395: PPUSH
2396: LD_INT 1
2398: PUSH
2399: LD_EXP 37
2403: PUSH
2404: LD_INT 1
2406: ARRAY
2407: PUSH
2408: LD_INT 1
2410: PLUS
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: LD_VAR 0 6
2420: PPUSH
2421: CALL 10876 0 3
2425: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un2 ) ;
2426: LD_ADDR_EXP 37
2430: PUSH
2431: LD_EXP 37
2435: PPUSH
2436: LD_INT 1
2438: PUSH
2439: LD_EXP 37
2443: PUSH
2444: LD_INT 1
2446: ARRAY
2447: PUSH
2448: LD_INT 1
2450: PLUS
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: LD_VAR 0 7
2460: PPUSH
2461: CALL 10876 0 3
2465: ST_TO_ADDR
// end ;
2466: GO 2223
2468: POP
2469: POP
// for i = 1 to 5 do
2470: LD_ADDR_VAR 0 2
2474: PUSH
2475: DOUBLE
2476: LD_INT 1
2478: DEC
2479: ST_TO_ADDR
2480: LD_INT 5
2482: PUSH
2483: FOR_TO
2484: IFFALSE 2577
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gatling_gun , ar_rocket_launcher , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] , 100 ) ;
2486: LD_INT 14
2488: PPUSH
2489: LD_INT 3
2491: PPUSH
2492: LD_INT 1
2494: PPUSH
2495: LD_INT 25
2497: PUSH
2498: LD_INT 28
2500: PUSH
2501: LD_INT 28
2503: PUSH
2504: LD_INT 27
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: LIST
2511: LIST
2512: PUSH
2513: LD_VAR 0 2
2517: PUSH
2518: LD_INT 4
2520: MOD
2521: PUSH
2522: LD_INT 1
2524: PLUS
2525: ARRAY
2526: PPUSH
2527: LD_INT 100
2529: PPUSH
2530: CALL 10319 0 5
// veh := CreateVehicle ;
2534: LD_ADDR_VAR 0 3
2538: PUSH
2539: CALL_OW 45
2543: ST_TO_ADDR
// tmp := tmp ^ veh ;
2544: LD_ADDR_VAR 0 4
2548: PUSH
2549: LD_VAR 0 4
2553: PUSH
2554: LD_VAR 0 3
2558: ADD
2559: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_arabian , false ) ;
2560: LD_VAR 0 3
2564: PPUSH
2565: LD_INT 1
2567: PPUSH
2568: LD_INT 0
2570: PPUSH
2571: CALL_OW 49
// end ;
2575: GO 2483
2577: POP
2578: POP
// arabian_guard := tmp ;
2579: LD_ADDR_EXP 35
2583: PUSH
2584: LD_VAR 0 4
2588: ST_TO_ADDR
// end ; end_of_file
2589: LD_VAR 0 1
2593: RET
// export function Action ; var tmp , i ; begin
2594: LD_INT 0
2596: PPUSH
2597: PPUSH
2598: PPUSH
// CenterNowOnXY ( 68 , 39 ) ;
2599: LD_INT 68
2601: PPUSH
2602: LD_INT 39
2604: PPUSH
2605: CALL_OW 86
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2609: LD_ADDR_VAR 0 2
2613: PUSH
2614: LD_INT 22
2616: PUSH
2617: LD_INT 7
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PPUSH
2624: CALL_OW 69
2628: ST_TO_ADDR
// InGameOn ;
2629: CALL_OW 8
// ComMoveXY ( tmp , 71 , 49 ) ;
2633: LD_VAR 0 2
2637: PPUSH
2638: LD_INT 71
2640: PPUSH
2641: LD_INT 49
2643: PPUSH
2644: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2648: LD_INT 35
2650: PPUSH
2651: CALL_OW 67
// until SeeXY ( 7 , 71 , 51 ) ;
2655: LD_INT 7
2657: PPUSH
2658: LD_INT 71
2660: PPUSH
2661: LD_INT 51
2663: PPUSH
2664: CALL_OW 293
2668: IFFALSE 2648
// DialogueOn ;
2670: CALL_OW 6
// Say ( JMM , D1-JMM-1 ) ;
2674: LD_EXP 6
2678: PPUSH
2679: LD_STRING D1-JMM-1
2681: PPUSH
2682: CALL_OW 88
// if Joan then
2686: LD_EXP 21
2690: IFFALSE 2704
// Say ( Joan , D1-Joan-1 ) ;
2692: LD_EXP 21
2696: PPUSH
2697: LD_STRING D1-Joan-1
2699: PPUSH
2700: CALL_OW 88
// if Lisa then
2704: LD_EXP 8
2708: IFFALSE 2722
// Say ( Lisa , D1-Lisa-1 ) ;
2710: LD_EXP 8
2714: PPUSH
2715: LD_STRING D1-Lisa-1
2717: PPUSH
2718: CALL_OW 88
// if Joan or Lisa then
2722: LD_EXP 21
2726: PUSH
2727: LD_EXP 8
2731: OR
2732: IFFALSE 2746
// Say ( JMM , D1-JMM-2 ) ;
2734: LD_EXP 6
2738: PPUSH
2739: LD_STRING D1-JMM-2
2741: PPUSH
2742: CALL_OW 88
// DialogueOff ;
2746: CALL_OW 7
// InGameOff ;
2750: CALL_OW 9
// PlaceSeeing ( 71 , 50 , 7 , - 30 ) ;
2754: LD_INT 71
2756: PPUSH
2757: LD_INT 50
2759: PPUSH
2760: LD_INT 7
2762: PPUSH
2763: LD_INT 30
2765: NEG
2766: PPUSH
2767: CALL_OW 330
// RemoveSeeing ( 71 , 50 , 7 ) ;
2771: LD_INT 71
2773: PPUSH
2774: LD_INT 50
2776: PPUSH
2777: LD_INT 7
2779: PPUSH
2780: CALL_OW 331
// ChangeMissionObjectives ( M1 ) ;
2784: LD_STRING M1
2786: PPUSH
2787: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
2791: LD_INT 35
2793: PPUSH
2794: CALL_OW 67
// until freedom ;
2798: LD_EXP 3
2802: IFFALSE 2791
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
2804: LD_INT 350
2806: PPUSH
2807: LD_INT 700
2809: PPUSH
2810: CALL_OW 12
2814: PPUSH
2815: CALL_OW 67
// PrepareGossudarov ;
2819: CALL 1557 0 0
// repeat wait ( 0 0$1 ) ;
2823: LD_INT 35
2825: PPUSH
2826: CALL_OW 67
// until See ( 7 , Gossudarov ) and FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2830: LD_INT 7
2832: PPUSH
2833: LD_EXP 23
2837: PPUSH
2838: CALL_OW 292
2842: PUSH
2843: LD_INT 22
2845: PUSH
2846: LD_INT 6
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PUSH
2853: LD_INT 3
2855: PUSH
2856: LD_INT 24
2858: PUSH
2859: LD_INT 1000
2861: PUSH
2862: EMPTY
2863: LIST
2864: LIST
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PPUSH
2874: CALL_OW 69
2878: AND
2879: IFFALSE 2823
// tmp := FilterAllUnits ( [ f_side , 6 ] ) ;
2881: LD_ADDR_VAR 0 2
2885: PUSH
2886: LD_INT 22
2888: PUSH
2889: LD_INT 6
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: PPUSH
2896: CALL_OW 69
2900: ST_TO_ADDR
// for i in tmp do
2901: LD_ADDR_VAR 0 3
2905: PUSH
2906: LD_VAR 0 2
2910: PUSH
2911: FOR_IN
2912: IFFALSE 2928
// SetSide ( i , 7 ) ;
2914: LD_VAR 0 3
2918: PPUSH
2919: LD_INT 7
2921: PPUSH
2922: CALL_OW 235
2926: GO 2911
2928: POP
2929: POP
// DialogueOn ;
2930: CALL_OW 6
// ComTurnUnit ( [ JMM , Roth ] , Gossudarov ) ;
2934: LD_EXP 6
2938: PUSH
2939: LD_EXP 7
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PPUSH
2948: LD_EXP 23
2952: PPUSH
2953: CALL_OW 119
// CenterNowOnUnits ( Gossudarov ) ;
2957: LD_EXP 23
2961: PPUSH
2962: CALL_OW 87
// if not Roth then
2966: LD_EXP 7
2970: NOT
2971: IFFALSE 3035
// begin Say ( JMM , D2-JMM-1 ) ;
2973: LD_EXP 6
2977: PPUSH
2978: LD_STRING D2-JMM-1
2980: PPUSH
2981: CALL_OW 88
// Say ( JMM , D2-JMM-1b ) ;
2985: LD_EXP 6
2989: PPUSH
2990: LD_STRING D2-JMM-1b
2992: PPUSH
2993: CALL_OW 88
// Say ( Gossudarov , D2-Gos-1 ) ;
2997: LD_EXP 23
3001: PPUSH
3002: LD_STRING D2-Gos-1
3004: PPUSH
3005: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
3009: LD_EXP 6
3013: PPUSH
3014: LD_STRING D2-JMM-2
3016: PPUSH
3017: CALL_OW 88
// Say ( Gossudarov , D2-Gos-2 ) ;
3021: LD_EXP 23
3025: PPUSH
3026: LD_STRING D2-Gos-2
3028: PPUSH
3029: CALL_OW 88
// end else
3033: GO 3131
// begin Say ( Roth , D2-Roth-2 ) ;
3035: LD_EXP 7
3039: PPUSH
3040: LD_STRING D2-Roth-2
3042: PPUSH
3043: CALL_OW 88
// Say ( JMM , D2-JMM-1a ) ;
3047: LD_EXP 6
3051: PPUSH
3052: LD_STRING D2-JMM-1a
3054: PPUSH
3055: CALL_OW 88
// Say ( Roth , D2-Roth-2a ) ;
3059: LD_EXP 7
3063: PPUSH
3064: LD_STRING D2-Roth-2a
3066: PPUSH
3067: CALL_OW 88
// Say ( Roth , D2-Roth-2b ) ;
3071: LD_EXP 7
3075: PPUSH
3076: LD_STRING D2-Roth-2b
3078: PPUSH
3079: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
3083: LD_EXP 6
3087: PPUSH
3088: LD_STRING D2-JMM-3
3090: PPUSH
3091: CALL_OW 88
// Say ( Gossudarov , D2-Gos-3 ) ;
3095: LD_EXP 23
3099: PPUSH
3100: LD_STRING D2-Gos-3
3102: PPUSH
3103: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
3107: LD_EXP 6
3111: PPUSH
3112: LD_STRING D2-JMM-4
3114: PPUSH
3115: CALL_OW 88
// Say ( Gossudarov , D2-Gos-4 ) ;
3119: LD_EXP 23
3123: PPUSH
3124: LD_STRING D2-Gos-4
3126: PPUSH
3127: CALL_OW 88
// end ; Say ( JMM , D2-JMM-5 ) ;
3131: LD_EXP 6
3135: PPUSH
3136: LD_STRING D2-JMM-5
3138: PPUSH
3139: CALL_OW 88
// Say ( Gossudarov , D2-Gos-5 ) ;
3143: LD_EXP 23
3147: PPUSH
3148: LD_STRING D2-Gos-5
3150: PPUSH
3151: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
3155: LD_EXP 6
3159: PPUSH
3160: LD_STRING D2-JMM-6
3162: PPUSH
3163: CALL_OW 88
// DialogueOff ;
3167: CALL_OW 7
// wait ( 0 0$2 ) ;
3171: LD_INT 70
3173: PPUSH
3174: CALL_OW 67
// if Kirilenkova then
3178: LD_EXP 24
3182: IFFALSE 3196
// Say ( Kirilenkova , D3-Kir-1 ) ;
3184: LD_EXP 24
3188: PPUSH
3189: LD_STRING D3-Kir-1
3191: PPUSH
3192: CALL_OW 88
// gossudarov_arrive := true ;
3196: LD_ADDR_EXP 4
3200: PUSH
3201: LD_INT 1
3203: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3204: LD_INT 35
3206: PPUSH
3207: CALL_OW 67
// until ru_lab_builded ;
3211: LD_EXP 5
3215: IFFALSE 3204
// if Kirilenkova then
3217: LD_EXP 24
3221: IFFALSE 3237
// Say ( Kirilenkova , D3a-Kir-1 ) else
3223: LD_EXP 24
3227: PPUSH
3228: LD_STRING D3a-Kir-1
3230: PPUSH
3231: CALL_OW 88
3235: GO 3244
// SaySciRu ( D3a-Sci1-1 ) ;
3237: LD_STRING D3a-Sci1-1
3239: PPUSH
3240: CALL 3261 0 1
// Say ( JMM , D3a-JMM-1 ) ;
3244: LD_EXP 6
3248: PPUSH
3249: LD_STRING D3a-JMM-1
3251: PPUSH
3252: CALL_OW 88
// end ;
3256: LD_VAR 0 1
3260: RET
// export function SaySciRu ( dialog ) ; var tmp , t ; begin
3261: LD_INT 0
3263: PPUSH
3264: PPUSH
3265: PPUSH
// t := [ Gossudarov , Titov , Fadeev , Dologov , Petrosyan , Burlak , Bielkov , Gnyevko ] ;
3266: LD_ADDR_VAR 0 4
3270: PUSH
3271: LD_EXP 23
3275: PUSH
3276: LD_EXP 25
3280: PUSH
3281: LD_EXP 26
3285: PUSH
3286: LD_EXP 27
3290: PUSH
3291: LD_EXP 28
3295: PUSH
3296: LD_EXP 29
3300: PUSH
3301: LD_EXP 30
3305: PUSH
3306: LD_EXP 31
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff t ;
3321: LD_ADDR_VAR 0 3
3325: PUSH
3326: LD_INT 22
3328: PUSH
3329: LD_INT 7
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: PUSH
3336: LD_INT 23
3338: PUSH
3339: LD_INT 3
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PUSH
3346: LD_INT 25
3348: PUSH
3349: LD_INT 4
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: LD_INT 26
3358: PUSH
3359: LD_INT 1
3361: PUSH
3362: EMPTY
3363: LIST
3364: LIST
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: PPUSH
3372: CALL_OW 69
3376: PUSH
3377: LD_VAR 0 4
3381: DIFF
3382: ST_TO_ADDR
// if tmp then
3383: LD_VAR 0 3
3387: IFFALSE 3407
// Say ( tmp [ 1 ] , dialog ) ;
3389: LD_VAR 0 3
3393: PUSH
3394: LD_INT 1
3396: ARRAY
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 88
// end ; end_of_file
3407: LD_VAR 0 2
3411: RET
// on UnitDestroyed ( un ) do var i , side ;
3412: LD_INT 0
3414: PPUSH
3415: PPUSH
// begin if un = JMM then
3416: LD_VAR 0 1
3420: PUSH
3421: LD_EXP 6
3425: EQUAL
3426: IFFALSE 3437
// begin YouLost ( JMM ) ;
3428: LD_STRING JMM
3430: PPUSH
3431: CALL_OW 104
// exit ;
3435: GO 3446
// end ; MCE_UnitDestroyed ( un ) ;
3437: LD_VAR 0 1
3441: PPUSH
3442: CALL 57427 0 1
// end ;
3446: PPOPN 3
3448: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
3449: LD_VAR 0 1
3453: PPUSH
3454: LD_VAR 0 2
3458: PPUSH
3459: CALL 59294 0 2
// end ;
3463: PPOPN 2
3465: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
3466: LD_VAR 0 1
3470: PPUSH
3471: CALL 58376 0 1
// end ;
3475: PPOPN 1
3477: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_depot ] ] ) then
3478: LD_VAR 0 1
3482: PUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 7
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 0
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 69
3511: IN
3512: IFFALSE 3551
// begin SetBName ( building , freedom ) ;
3514: LD_VAR 0 1
3518: PPUSH
3519: LD_STRING freedom
3521: PPUSH
3522: CALL_OW 500
// SetRestrict ( b_depot , 7 , false ) ;
3526: LD_INT 0
3528: PPUSH
3529: LD_INT 7
3531: PPUSH
3532: LD_INT 0
3534: PPUSH
3535: CALL_OW 324
// freedom := building ;
3539: LD_ADDR_EXP 3
3543: PUSH
3544: LD_VAR 0 1
3548: ST_TO_ADDR
// exit ;
3549: GO 3617
// end ; if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_btype , b_lab ] ] ) then
3551: LD_VAR 0 1
3555: PUSH
3556: LD_INT 22
3558: PUSH
3559: LD_INT 7
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: PUSH
3566: LD_INT 23
3568: PUSH
3569: LD_INT 3
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: LD_INT 30
3578: PUSH
3579: LD_INT 6
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: LIST
3590: PPUSH
3591: CALL_OW 69
3595: IN
3596: IFFALSE 3608
// begin ru_lab_builded := true ;
3598: LD_ADDR_EXP 5
3602: PUSH
3603: LD_INT 1
3605: ST_TO_ADDR
// exit ;
3606: GO 3617
// end ; MCE_BuildingComplete ( building ) ;
3608: LD_VAR 0 1
3612: PPUSH
3613: CALL 58610 0 1
// end ;
3617: PPOPN 1
3619: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
3620: LD_VAR 0 1
3624: PPUSH
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL 57103 0 2
// end ;
3634: PPOPN 2
3636: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
3637: LD_VAR 0 1
3641: PPUSH
3642: LD_VAR 0 2
3646: PPUSH
3647: LD_VAR 0 3
3651: PPUSH
3652: LD_VAR 0 4
3656: PPUSH
3657: LD_VAR 0 5
3661: PPUSH
3662: CALL 56730 0 5
// end ;
3666: PPOPN 5
3668: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
3669: LD_VAR 0 1
3673: PPUSH
3674: LD_VAR 0 2
3678: PPUSH
3679: CALL 56418 0 2
// end ;
3683: PPOPN 2
3685: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
3686: LD_VAR 0 1
3690: PPUSH
3691: LD_VAR 0 2
3695: PPUSH
3696: LD_VAR 0 3
3700: PPUSH
3701: LD_VAR 0 4
3705: PPUSH
3706: CALL 56263 0 4
// end ;
3710: PPOPN 4
3712: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
3713: LD_VAR 0 1
3717: PPUSH
3718: LD_VAR 0 2
3722: PPUSH
3723: LD_VAR 0 3
3727: PPUSH
3728: CALL 56045 0 3
// end ;
3732: PPOPN 3
3734: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
3735: LD_VAR 0 1
3739: PPUSH
3740: LD_VAR 0 2
3744: PPUSH
3745: CALL 55937 0 2
// end ;
3749: PPOPN 2
3751: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
3752: LD_VAR 0 1
3756: PPUSH
3757: LD_VAR 0 2
3761: PPUSH
3762: CALL 59548 0 2
// end ;
3766: PPOPN 2
3768: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
3769: LD_VAR 0 1
3773: PPUSH
3774: LD_VAR 0 2
3778: PPUSH
3779: LD_VAR 0 3
3783: PPUSH
3784: LD_VAR 0 4
3788: PPUSH
3789: CALL 59757 0 4
// end ;
3793: PPOPN 4
3795: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_VAR 0 2
3805: PPUSH
3806: CALL 55753 0 2
// end ; end_of_file
3810: PPOPN 2
3812: END
// every 0 0$30 do var cr , time ;
3813: GO 3815
3815: DISABLE
3816: LD_INT 0
3818: PPUSH
3819: PPUSH
// begin time := 0 0$01 ;
3820: LD_ADDR_VAR 0 2
3824: PUSH
3825: LD_INT 35
3827: ST_TO_ADDR
// while game do
3828: LD_EXP 2
3832: IFFALSE 3921
// begin wait ( time ) ;
3834: LD_VAR 0 2
3838: PPUSH
3839: CALL_OW 67
// time := time + [ 0 0$05 , 0 0$07 , 0 0$09 ] [ Difficulty ] ;
3843: LD_ADDR_VAR 0 2
3847: PUSH
3848: LD_VAR 0 2
3852: PUSH
3853: LD_INT 175
3855: PUSH
3856: LD_INT 245
3858: PUSH
3859: LD_INT 315
3861: PUSH
3862: EMPTY
3863: LIST
3864: LIST
3865: LIST
3866: PUSH
3867: LD_OWVAR 67
3871: ARRAY
3872: PLUS
3873: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 70 , 49 , 25 , true ) ;
3874: LD_INT 1
3876: PPUSH
3877: LD_INT 5
3879: PPUSH
3880: CALL_OW 12
3884: PPUSH
3885: LD_INT 70
3887: PPUSH
3888: LD_INT 49
3890: PPUSH
3891: LD_INT 25
3893: PPUSH
3894: LD_INT 1
3896: PPUSH
3897: CALL_OW 56
// if time > 6 6$00 then
3901: LD_VAR 0 2
3905: PUSH
3906: LD_INT 12600
3908: GREATER
3909: IFFALSE 3919
// time := 0 0$40 ;
3911: LD_ADDR_VAR 0 2
3915: PUSH
3916: LD_INT 1400
3918: ST_TO_ADDR
// end ;
3919: GO 3828
// end ;
3921: PPOPN 2
3923: END
// every 0 0$30 do var cr , time ;
3924: GO 3926
3926: DISABLE
3927: LD_INT 0
3929: PPUSH
3930: PPUSH
// begin time := 0 0$01 ;
3931: LD_ADDR_VAR 0 2
3935: PUSH
3936: LD_INT 35
3938: ST_TO_ADDR
// while game do
3939: LD_EXP 2
3943: IFFALSE 4032
// begin wait ( time ) ;
3945: LD_VAR 0 2
3949: PPUSH
3950: CALL_OW 67
// time := time + [ 0 0$03 , 0 0$05 , 0 0$07 ] [ Difficulty ] ;
3954: LD_ADDR_VAR 0 2
3958: PUSH
3959: LD_VAR 0 2
3963: PUSH
3964: LD_INT 105
3966: PUSH
3967: LD_INT 175
3969: PUSH
3970: LD_INT 245
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: LIST
3977: PUSH
3978: LD_OWVAR 67
3982: ARRAY
3983: PLUS
3984: ST_TO_ADDR
// CreateCratesXYR ( rand ( 3 , 5 ) , 26 , 9 , 30 , true ) ;
3985: LD_INT 3
3987: PPUSH
3988: LD_INT 5
3990: PPUSH
3991: CALL_OW 12
3995: PPUSH
3996: LD_INT 26
3998: PPUSH
3999: LD_INT 9
4001: PPUSH
4002: LD_INT 30
4004: PPUSH
4005: LD_INT 1
4007: PPUSH
4008: CALL_OW 56
// if time > 4 4$00 then
4012: LD_VAR 0 2
4016: PUSH
4017: LD_INT 8400
4019: GREATER
4020: IFFALSE 4030
// time := 0 0$50 ;
4022: LD_ADDR_VAR 0 2
4026: PUSH
4027: LD_INT 1750
4029: ST_TO_ADDR
// end ;
4030: GO 3939
// end ;
4032: PPOPN 2
4034: END
// every 0 0$30 do var cr , time ;
4035: GO 4037
4037: DISABLE
4038: LD_INT 0
4040: PPUSH
4041: PPUSH
// begin time := 0 0$20 ;
4042: LD_ADDR_VAR 0 2
4046: PUSH
4047: LD_INT 700
4049: ST_TO_ADDR
// while game do
4050: LD_EXP 2
4054: IFFALSE 4179
// begin wait ( time ) ;
4056: LD_VAR 0 2
4060: PPUSH
4061: CALL_OW 67
// time := time + [ 0 0$05 , 0 0$06 , 0 0$08 ] [ Difficulty ] ;
4065: LD_ADDR_VAR 0 2
4069: PUSH
4070: LD_VAR 0 2
4074: PUSH
4075: LD_INT 175
4077: PUSH
4078: LD_INT 210
4080: PUSH
4081: LD_INT 280
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: PUSH
4089: LD_OWVAR 67
4093: ARRAY
4094: PLUS
4095: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 179 , 101 , 20 , true ) ;
4096: LD_INT 1
4098: PPUSH
4099: LD_INT 5
4101: PPUSH
4102: CALL_OW 12
4106: PPUSH
4107: LD_INT 179
4109: PPUSH
4110: LD_INT 101
4112: PPUSH
4113: LD_INT 20
4115: PPUSH
4116: LD_INT 1
4118: PPUSH
4119: CALL_OW 56
// wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
4123: LD_INT 350
4125: PPUSH
4126: LD_INT 525
4128: PPUSH
4129: CALL_OW 12
4133: PPUSH
4134: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area_collect_arabian , true ) ;
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 5
4143: PPUSH
4144: CALL_OW 12
4148: PPUSH
4149: LD_INT 9
4151: PPUSH
4152: LD_INT 1
4154: PPUSH
4155: CALL_OW 55
// if time > 4 4$00 then
4159: LD_VAR 0 2
4163: PUSH
4164: LD_INT 8400
4166: GREATER
4167: IFFALSE 4177
// time := 0 0$30 ;
4169: LD_ADDR_VAR 0 2
4173: PUSH
4174: LD_INT 1050
4176: ST_TO_ADDR
// end ;
4177: GO 4050
// end ;
4179: PPOPN 2
4181: END
// every 0 0$30 do var cr , time ;
4182: GO 4184
4184: DISABLE
4185: LD_INT 0
4187: PPUSH
4188: PPUSH
// begin time := 0 0$10 ;
4189: LD_ADDR_VAR 0 2
4193: PUSH
4194: LD_INT 350
4196: ST_TO_ADDR
// while game do
4197: LD_EXP 2
4201: IFFALSE 4335
// begin wait ( time ) ;
4203: LD_VAR 0 2
4207: PPUSH
4208: CALL_OW 67
// time := time + 0 0$10 ;
4212: LD_ADDR_VAR 0 2
4216: PUSH
4217: LD_VAR 0 2
4221: PUSH
4222: LD_INT 350
4224: PLUS
4225: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , area_crates_russian , true ) ;
4226: LD_INT 1
4228: PPUSH
4229: LD_INT 5
4231: PPUSH
4232: CALL_OW 12
4236: PPUSH
4237: LD_INT 11
4239: PPUSH
4240: LD_INT 1
4242: PPUSH
4243: CALL_OW 55
// cr := rand ( 1 , 3 ) ;
4247: LD_ADDR_VAR 0 1
4251: PUSH
4252: LD_INT 1
4254: PPUSH
4255: LD_INT 3
4257: PPUSH
4258: CALL_OW 12
4262: ST_TO_ADDR
// if cr = 1 then
4263: LD_VAR 0 1
4267: PUSH
4268: LD_INT 1
4270: EQUAL
4271: IFFALSE 4315
// begin wait ( rand ( 0 0$20 , 0 0$45 ) ) ;
4273: LD_INT 700
4275: PPUSH
4276: LD_INT 1575
4278: PPUSH
4279: CALL_OW 12
4283: PPUSH
4284: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 34 , 50 , 7 , true ) ;
4288: LD_INT 1
4290: PPUSH
4291: LD_INT 5
4293: PPUSH
4294: CALL_OW 12
4298: PPUSH
4299: LD_INT 34
4301: PPUSH
4302: LD_INT 50
4304: PPUSH
4305: LD_INT 7
4307: PPUSH
4308: LD_INT 1
4310: PPUSH
4311: CALL_OW 56
// end ; if time > 8 8$00 then
4315: LD_VAR 0 2
4319: PUSH
4320: LD_INT 16800
4322: GREATER
4323: IFFALSE 4333
// time := 0 0$40 ;
4325: LD_ADDR_VAR 0 2
4329: PUSH
4330: LD_INT 1400
4332: ST_TO_ADDR
// end ;
4333: GO 4197
// end ; end_of_file
4335: PPOPN 2
4337: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4338: LD_INT 0
4340: PPUSH
4341: PPUSH
// if exist_mode then
4342: LD_VAR 0 2
4346: IFFALSE 4371
// unit := CreateCharacter ( prefix & ident ) else
4348: LD_ADDR_VAR 0 5
4352: PUSH
4353: LD_VAR 0 3
4357: PUSH
4358: LD_VAR 0 1
4362: STR
4363: PPUSH
4364: CALL_OW 34
4368: ST_TO_ADDR
4369: GO 4386
// unit := NewCharacter ( ident ) ;
4371: LD_ADDR_VAR 0 5
4375: PUSH
4376: LD_VAR 0 1
4380: PPUSH
4381: CALL_OW 25
4385: ST_TO_ADDR
// result := unit ;
4386: LD_ADDR_VAR 0 4
4390: PUSH
4391: LD_VAR 0 5
4395: ST_TO_ADDR
// end ;
4396: LD_VAR 0 4
4400: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4401: LD_INT 0
4403: PPUSH
4404: PPUSH
// if not side or not nation then
4405: LD_VAR 0 1
4409: NOT
4410: PUSH
4411: LD_VAR 0 2
4415: NOT
4416: OR
4417: IFFALSE 4421
// exit ;
4419: GO 5033
// case nation of nation_american :
4421: LD_VAR 0 2
4425: PUSH
4426: LD_INT 1
4428: DOUBLE
4429: EQUAL
4430: IFTRUE 4434
4432: GO 4592
4434: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
4435: LD_ADDR_VAR 0 4
4439: PUSH
4440: LD_INT 35
4442: PUSH
4443: LD_INT 45
4445: PUSH
4446: LD_INT 46
4448: PUSH
4449: LD_INT 47
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: LD_INT 2
4457: PUSH
4458: LD_INT 6
4460: PUSH
4461: LD_INT 15
4463: PUSH
4464: LD_INT 16
4466: PUSH
4467: LD_INT 7
4469: PUSH
4470: LD_INT 12
4472: PUSH
4473: LD_INT 13
4475: PUSH
4476: LD_INT 10
4478: PUSH
4479: LD_INT 14
4481: PUSH
4482: LD_INT 20
4484: PUSH
4485: LD_INT 25
4487: PUSH
4488: LD_INT 36
4490: PUSH
4491: LD_INT 69
4493: PUSH
4494: LD_INT 39
4496: PUSH
4497: LD_INT 34
4499: PUSH
4500: LD_INT 40
4502: PUSH
4503: LD_INT 48
4505: PUSH
4506: LD_INT 49
4508: PUSH
4509: LD_INT 50
4511: PUSH
4512: LD_INT 51
4514: PUSH
4515: LD_INT 52
4517: PUSH
4518: LD_INT 53
4520: PUSH
4521: LD_INT 54
4523: PUSH
4524: LD_INT 55
4526: PUSH
4527: LD_INT 56
4529: PUSH
4530: LD_INT 57
4532: PUSH
4533: LD_INT 58
4535: PUSH
4536: LD_INT 59
4538: PUSH
4539: LD_INT 60
4541: PUSH
4542: LD_INT 61
4544: PUSH
4545: LD_INT 62
4547: PUSH
4548: LD_INT 80
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: ST_TO_ADDR
4590: GO 4957
4592: LD_INT 2
4594: DOUBLE
4595: EQUAL
4596: IFTRUE 4600
4598: GO 4770
4600: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
4601: LD_ADDR_VAR 0 4
4605: PUSH
4606: LD_INT 35
4608: PUSH
4609: LD_INT 45
4611: PUSH
4612: LD_INT 46
4614: PUSH
4615: LD_INT 47
4617: PUSH
4618: LD_INT 70
4620: PUSH
4621: LD_INT 1
4623: PUSH
4624: LD_INT 11
4626: PUSH
4627: LD_INT 3
4629: PUSH
4630: LD_INT 4
4632: PUSH
4633: LD_INT 5
4635: PUSH
4636: LD_INT 6
4638: PUSH
4639: LD_INT 15
4641: PUSH
4642: LD_INT 18
4644: PUSH
4645: LD_INT 7
4647: PUSH
4648: LD_INT 17
4650: PUSH
4651: LD_INT 8
4653: PUSH
4654: LD_INT 20
4656: PUSH
4657: LD_INT 72
4659: PUSH
4660: LD_INT 26
4662: PUSH
4663: LD_INT 69
4665: PUSH
4666: LD_INT 39
4668: PUSH
4669: LD_INT 40
4671: PUSH
4672: LD_INT 41
4674: PUSH
4675: LD_INT 42
4677: PUSH
4678: LD_INT 43
4680: PUSH
4681: LD_INT 48
4683: PUSH
4684: LD_INT 49
4686: PUSH
4687: LD_INT 50
4689: PUSH
4690: LD_INT 51
4692: PUSH
4693: LD_INT 52
4695: PUSH
4696: LD_INT 53
4698: PUSH
4699: LD_INT 54
4701: PUSH
4702: LD_INT 55
4704: PUSH
4705: LD_INT 56
4707: PUSH
4708: LD_INT 60
4710: PUSH
4711: LD_INT 61
4713: PUSH
4714: LD_INT 62
4716: PUSH
4717: LD_INT 66
4719: PUSH
4720: LD_INT 67
4722: PUSH
4723: LD_INT 68
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: ST_TO_ADDR
4768: GO 4957
4770: LD_INT 3
4772: DOUBLE
4773: EQUAL
4774: IFTRUE 4778
4776: GO 4956
4778: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
4779: LD_ADDR_VAR 0 4
4783: PUSH
4784: LD_INT 46
4786: PUSH
4787: LD_INT 47
4789: PUSH
4790: LD_INT 1
4792: PUSH
4793: LD_INT 2
4795: PUSH
4796: LD_INT 11
4798: PUSH
4799: LD_INT 9
4801: PUSH
4802: LD_INT 20
4804: PUSH
4805: LD_INT 19
4807: PUSH
4808: LD_INT 21
4810: PUSH
4811: LD_INT 24
4813: PUSH
4814: LD_INT 22
4816: PUSH
4817: LD_INT 25
4819: PUSH
4820: LD_INT 28
4822: PUSH
4823: LD_INT 29
4825: PUSH
4826: LD_INT 31
4828: PUSH
4829: LD_INT 37
4831: PUSH
4832: LD_INT 38
4834: PUSH
4835: LD_INT 32
4837: PUSH
4838: LD_INT 27
4840: PUSH
4841: LD_INT 33
4843: PUSH
4844: LD_INT 69
4846: PUSH
4847: LD_INT 39
4849: PUSH
4850: LD_INT 34
4852: PUSH
4853: LD_INT 40
4855: PUSH
4856: LD_INT 71
4858: PUSH
4859: LD_INT 23
4861: PUSH
4862: LD_INT 44
4864: PUSH
4865: LD_INT 48
4867: PUSH
4868: LD_INT 49
4870: PUSH
4871: LD_INT 50
4873: PUSH
4874: LD_INT 51
4876: PUSH
4877: LD_INT 52
4879: PUSH
4880: LD_INT 53
4882: PUSH
4883: LD_INT 54
4885: PUSH
4886: LD_INT 55
4888: PUSH
4889: LD_INT 56
4891: PUSH
4892: LD_INT 57
4894: PUSH
4895: LD_INT 58
4897: PUSH
4898: LD_INT 59
4900: PUSH
4901: LD_INT 63
4903: PUSH
4904: LD_INT 64
4906: PUSH
4907: LD_INT 65
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: ST_TO_ADDR
4954: GO 4957
4956: POP
// if state > - 1 and state < 3 then
4957: LD_VAR 0 3
4961: PUSH
4962: LD_INT 1
4964: NEG
4965: GREATER
4966: PUSH
4967: LD_VAR 0 3
4971: PUSH
4972: LD_INT 3
4974: LESS
4975: AND
4976: IFFALSE 5033
// for i in result do
4978: LD_ADDR_VAR 0 5
4982: PUSH
4983: LD_VAR 0 4
4987: PUSH
4988: FOR_IN
4989: IFFALSE 5031
// if GetTech ( i , side ) <> state then
4991: LD_VAR 0 5
4995: PPUSH
4996: LD_VAR 0 1
5000: PPUSH
5001: CALL_OW 321
5005: PUSH
5006: LD_VAR 0 3
5010: NONEQUAL
5011: IFFALSE 5029
// result := result diff i ;
5013: LD_ADDR_VAR 0 4
5017: PUSH
5018: LD_VAR 0 4
5022: PUSH
5023: LD_VAR 0 5
5027: DIFF
5028: ST_TO_ADDR
5029: GO 4988
5031: POP
5032: POP
// end ;
5033: LD_VAR 0 4
5037: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5038: LD_INT 0
5040: PPUSH
5041: PPUSH
5042: PPUSH
5043: PPUSH
5044: PPUSH
5045: PPUSH
5046: PPUSH
5047: PPUSH
5048: PPUSH
5049: PPUSH
5050: PPUSH
5051: PPUSH
5052: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5053: LD_VAR 0 1
5057: NOT
5058: PUSH
5059: LD_VAR 0 1
5063: PPUSH
5064: CALL_OW 257
5068: PUSH
5069: LD_INT 9
5071: NONEQUAL
5072: OR
5073: IFFALSE 5077
// exit ;
5075: GO 5650
// side := GetSide ( unit ) ;
5077: LD_ADDR_VAR 0 9
5081: PUSH
5082: LD_VAR 0 1
5086: PPUSH
5087: CALL_OW 255
5091: ST_TO_ADDR
// tech_space := tech_spacanom ;
5092: LD_ADDR_VAR 0 12
5096: PUSH
5097: LD_INT 29
5099: ST_TO_ADDR
// tech_time := tech_taurad ;
5100: LD_ADDR_VAR 0 13
5104: PUSH
5105: LD_INT 28
5107: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5108: LD_ADDR_VAR 0 11
5112: PUSH
5113: LD_VAR 0 1
5117: PPUSH
5118: CALL_OW 310
5122: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5123: LD_VAR 0 11
5127: PPUSH
5128: CALL_OW 247
5132: PUSH
5133: LD_INT 2
5135: EQUAL
5136: IFFALSE 5140
// exit ;
5138: GO 5650
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5140: LD_ADDR_VAR 0 8
5144: PUSH
5145: LD_INT 81
5147: PUSH
5148: LD_VAR 0 9
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PUSH
5157: LD_INT 3
5159: PUSH
5160: LD_INT 21
5162: PUSH
5163: LD_INT 3
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: PPUSH
5178: CALL_OW 69
5182: ST_TO_ADDR
// if not tmp then
5183: LD_VAR 0 8
5187: NOT
5188: IFFALSE 5192
// exit ;
5190: GO 5650
// if in_unit then
5192: LD_VAR 0 11
5196: IFFALSE 5220
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5198: LD_ADDR_VAR 0 10
5202: PUSH
5203: LD_VAR 0 8
5207: PPUSH
5208: LD_VAR 0 11
5212: PPUSH
5213: CALL_OW 74
5217: ST_TO_ADDR
5218: GO 5240
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5220: LD_ADDR_VAR 0 10
5224: PUSH
5225: LD_VAR 0 8
5229: PPUSH
5230: LD_VAR 0 1
5234: PPUSH
5235: CALL_OW 74
5239: ST_TO_ADDR
// if not enemy then
5240: LD_VAR 0 10
5244: NOT
5245: IFFALSE 5249
// exit ;
5247: GO 5650
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5249: LD_VAR 0 11
5253: PUSH
5254: LD_VAR 0 11
5258: PPUSH
5259: LD_VAR 0 10
5263: PPUSH
5264: CALL_OW 296
5268: PUSH
5269: LD_INT 13
5271: GREATER
5272: AND
5273: PUSH
5274: LD_VAR 0 1
5278: PPUSH
5279: LD_VAR 0 10
5283: PPUSH
5284: CALL_OW 296
5288: PUSH
5289: LD_INT 12
5291: GREATER
5292: OR
5293: IFFALSE 5297
// exit ;
5295: GO 5650
// missile := [ 1 ] ;
5297: LD_ADDR_VAR 0 14
5301: PUSH
5302: LD_INT 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5308: LD_VAR 0 9
5312: PPUSH
5313: LD_VAR 0 12
5317: PPUSH
5318: CALL_OW 325
5322: IFFALSE 5351
// missile := Insert ( missile , missile + 1 , 2 ) ;
5324: LD_ADDR_VAR 0 14
5328: PUSH
5329: LD_VAR 0 14
5333: PPUSH
5334: LD_VAR 0 14
5338: PUSH
5339: LD_INT 1
5341: PLUS
5342: PPUSH
5343: LD_INT 2
5345: PPUSH
5346: CALL_OW 2
5350: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5351: LD_VAR 0 9
5355: PPUSH
5356: LD_VAR 0 13
5360: PPUSH
5361: CALL_OW 325
5365: PUSH
5366: LD_VAR 0 10
5370: PPUSH
5371: CALL_OW 255
5375: PPUSH
5376: LD_VAR 0 13
5380: PPUSH
5381: CALL_OW 325
5385: NOT
5386: AND
5387: IFFALSE 5416
// missile := Insert ( missile , missile + 1 , 3 ) ;
5389: LD_ADDR_VAR 0 14
5393: PUSH
5394: LD_VAR 0 14
5398: PPUSH
5399: LD_VAR 0 14
5403: PUSH
5404: LD_INT 1
5406: PLUS
5407: PPUSH
5408: LD_INT 3
5410: PPUSH
5411: CALL_OW 2
5415: ST_TO_ADDR
// if missile < 2 then
5416: LD_VAR 0 14
5420: PUSH
5421: LD_INT 2
5423: LESS
5424: IFFALSE 5428
// exit ;
5426: GO 5650
// x := GetX ( enemy ) ;
5428: LD_ADDR_VAR 0 4
5432: PUSH
5433: LD_VAR 0 10
5437: PPUSH
5438: CALL_OW 250
5442: ST_TO_ADDR
// y := GetY ( enemy ) ;
5443: LD_ADDR_VAR 0 5
5447: PUSH
5448: LD_VAR 0 10
5452: PPUSH
5453: CALL_OW 251
5457: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5458: LD_ADDR_VAR 0 6
5462: PUSH
5463: LD_VAR 0 4
5467: PUSH
5468: LD_INT 1
5470: NEG
5471: PPUSH
5472: LD_INT 1
5474: PPUSH
5475: CALL_OW 12
5479: PLUS
5480: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5481: LD_ADDR_VAR 0 7
5485: PUSH
5486: LD_VAR 0 5
5490: PUSH
5491: LD_INT 1
5493: NEG
5494: PPUSH
5495: LD_INT 1
5497: PPUSH
5498: CALL_OW 12
5502: PLUS
5503: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5504: LD_VAR 0 6
5508: PPUSH
5509: LD_VAR 0 7
5513: PPUSH
5514: CALL_OW 488
5518: NOT
5519: IFFALSE 5541
// begin _x := x ;
5521: LD_ADDR_VAR 0 6
5525: PUSH
5526: LD_VAR 0 4
5530: ST_TO_ADDR
// _y := y ;
5531: LD_ADDR_VAR 0 7
5535: PUSH
5536: LD_VAR 0 5
5540: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5541: LD_ADDR_VAR 0 3
5545: PUSH
5546: LD_INT 1
5548: PPUSH
5549: LD_VAR 0 14
5553: PPUSH
5554: CALL_OW 12
5558: ST_TO_ADDR
// case i of 1 :
5559: LD_VAR 0 3
5563: PUSH
5564: LD_INT 1
5566: DOUBLE
5567: EQUAL
5568: IFTRUE 5572
5570: GO 5589
5572: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5573: LD_VAR 0 1
5577: PPUSH
5578: LD_VAR 0 10
5582: PPUSH
5583: CALL_OW 115
5587: GO 5650
5589: LD_INT 2
5591: DOUBLE
5592: EQUAL
5593: IFTRUE 5597
5595: GO 5619
5597: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5598: LD_VAR 0 1
5602: PPUSH
5603: LD_VAR 0 6
5607: PPUSH
5608: LD_VAR 0 7
5612: PPUSH
5613: CALL_OW 153
5617: GO 5650
5619: LD_INT 3
5621: DOUBLE
5622: EQUAL
5623: IFTRUE 5627
5625: GO 5649
5627: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5628: LD_VAR 0 1
5632: PPUSH
5633: LD_VAR 0 6
5637: PPUSH
5638: LD_VAR 0 7
5642: PPUSH
5643: CALL_OW 154
5647: GO 5650
5649: POP
// end ;
5650: LD_VAR 0 2
5654: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5655: LD_INT 0
5657: PPUSH
5658: PPUSH
5659: PPUSH
5660: PPUSH
5661: PPUSH
5662: PPUSH
// if not unit or not building then
5663: LD_VAR 0 1
5667: NOT
5668: PUSH
5669: LD_VAR 0 2
5673: NOT
5674: OR
5675: IFFALSE 5679
// exit ;
5677: GO 5834
// x := GetX ( building ) ;
5679: LD_ADDR_VAR 0 5
5683: PUSH
5684: LD_VAR 0 2
5688: PPUSH
5689: CALL_OW 250
5693: ST_TO_ADDR
// y := GetY ( building ) ;
5694: LD_ADDR_VAR 0 6
5698: PUSH
5699: LD_VAR 0 2
5703: PPUSH
5704: CALL_OW 251
5708: ST_TO_ADDR
// for i = 0 to 5 do
5709: LD_ADDR_VAR 0 4
5713: PUSH
5714: DOUBLE
5715: LD_INT 0
5717: DEC
5718: ST_TO_ADDR
5719: LD_INT 5
5721: PUSH
5722: FOR_TO
5723: IFFALSE 5832
// begin _x := ShiftX ( x , i , 3 ) ;
5725: LD_ADDR_VAR 0 7
5729: PUSH
5730: LD_VAR 0 5
5734: PPUSH
5735: LD_VAR 0 4
5739: PPUSH
5740: LD_INT 3
5742: PPUSH
5743: CALL_OW 272
5747: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5748: LD_ADDR_VAR 0 8
5752: PUSH
5753: LD_VAR 0 6
5757: PPUSH
5758: LD_VAR 0 4
5762: PPUSH
5763: LD_INT 3
5765: PPUSH
5766: CALL_OW 273
5770: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
5771: LD_VAR 0 7
5775: PPUSH
5776: LD_VAR 0 8
5780: PPUSH
5781: CALL_OW 428
5785: PUSH
5786: LD_INT 0
5788: EQUAL
5789: PUSH
5790: LD_VAR 0 7
5794: PPUSH
5795: LD_VAR 0 8
5799: PPUSH
5800: CALL_OW 488
5804: AND
5805: IFFALSE 5830
// begin ComMoveXY ( unit , _x , _y ) ;
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_VAR 0 7
5816: PPUSH
5817: LD_VAR 0 8
5821: PPUSH
5822: CALL_OW 111
// exit ;
5826: POP
5827: POP
5828: GO 5834
// end ; end ;
5830: GO 5722
5832: POP
5833: POP
// end ;
5834: LD_VAR 0 3
5838: RET
// export function ScanBase ( side , base_area ) ; begin
5839: LD_INT 0
5841: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5842: LD_ADDR_VAR 0 3
5846: PUSH
5847: LD_VAR 0 2
5851: PPUSH
5852: LD_INT 81
5854: PUSH
5855: LD_VAR 0 1
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PPUSH
5864: CALL_OW 70
5868: ST_TO_ADDR
// end ;
5869: LD_VAR 0 3
5873: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
5874: LD_INT 0
5876: PPUSH
5877: PPUSH
5878: PPUSH
5879: PPUSH
5880: PPUSH
5881: PPUSH
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
5886: PPUSH
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
5892: LD_ADDR_VAR 0 12
5896: PUSH
5897: LD_EXP 37
5901: PUSH
5902: LD_VAR 0 1
5906: ARRAY
5907: PPUSH
5908: LD_INT 25
5910: PUSH
5911: LD_INT 3
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: PPUSH
5918: CALL_OW 72
5922: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
5923: LD_ADDR_VAR 0 8
5927: PUSH
5928: LD_EXP 37
5932: PUSH
5933: LD_VAR 0 1
5937: ARRAY
5938: PPUSH
5939: LD_INT 2
5941: PUSH
5942: LD_INT 25
5944: PUSH
5945: LD_INT 1
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 25
5954: PUSH
5955: LD_INT 5
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: LD_INT 25
5964: PUSH
5965: LD_INT 8
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PUSH
5972: LD_INT 25
5974: PUSH
5975: LD_INT 9
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: PPUSH
5989: CALL_OW 72
5993: ST_TO_ADDR
// if not defenders and not solds then
5994: LD_VAR 0 2
5998: NOT
5999: PUSH
6000: LD_VAR 0 8
6004: NOT
6005: AND
6006: IFFALSE 6010
// exit ;
6008: GO 7376
// depot_under_attack := false ;
6010: LD_ADDR_VAR 0 16
6014: PUSH
6015: LD_INT 0
6017: ST_TO_ADDR
// sold_defenders := [ ] ;
6018: LD_ADDR_VAR 0 17
6022: PUSH
6023: EMPTY
6024: ST_TO_ADDR
// if mechs then
6025: LD_VAR 0 12
6029: IFFALSE 6158
// for i in defenders do
6031: LD_ADDR_VAR 0 5
6035: PUSH
6036: LD_VAR 0 2
6040: PUSH
6041: FOR_IN
6042: IFFALSE 6156
// begin SetTag ( i , 20 ) ;
6044: LD_VAR 0 5
6048: PPUSH
6049: LD_INT 20
6051: PPUSH
6052: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
6056: LD_VAR 0 5
6060: PPUSH
6061: CALL_OW 263
6065: PUSH
6066: LD_INT 1
6068: EQUAL
6069: PUSH
6070: LD_VAR 0 5
6074: PPUSH
6075: CALL_OW 311
6079: NOT
6080: AND
6081: PUSH
6082: LD_VAR 0 12
6086: AND
6087: IFFALSE 6154
// begin un := mechs [ 1 ] ;
6089: LD_ADDR_VAR 0 10
6093: PUSH
6094: LD_VAR 0 12
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: ST_TO_ADDR
// ComExitBuilding ( un ) ;
6103: LD_VAR 0 10
6107: PPUSH
6108: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
6112: LD_VAR 0 10
6116: PPUSH
6117: LD_VAR 0 5
6121: PPUSH
6122: CALL_OW 180
// SetTag ( un , 19 ) ;
6126: LD_VAR 0 10
6130: PPUSH
6131: LD_INT 19
6133: PPUSH
6134: CALL_OW 109
// mechs := mechs diff un ;
6138: LD_ADDR_VAR 0 12
6142: PUSH
6143: LD_VAR 0 12
6147: PUSH
6148: LD_VAR 0 10
6152: DIFF
6153: ST_TO_ADDR
// end ; end ;
6154: GO 6041
6156: POP
6157: POP
// if solds then
6158: LD_VAR 0 8
6162: IFFALSE 6221
// for i in solds do
6164: LD_ADDR_VAR 0 5
6168: PUSH
6169: LD_VAR 0 8
6173: PUSH
6174: FOR_IN
6175: IFFALSE 6219
// if not GetTag ( i ) then
6177: LD_VAR 0 5
6181: PPUSH
6182: CALL_OW 110
6186: NOT
6187: IFFALSE 6217
// begin defenders := defenders union i ;
6189: LD_ADDR_VAR 0 2
6193: PUSH
6194: LD_VAR 0 2
6198: PUSH
6199: LD_VAR 0 5
6203: UNION
6204: ST_TO_ADDR
// SetTag ( i , 18 ) ;
6205: LD_VAR 0 5
6209: PPUSH
6210: LD_INT 18
6212: PPUSH
6213: CALL_OW 109
// end ;
6217: GO 6174
6219: POP
6220: POP
// repeat wait ( 0 0$1 ) ;
6221: LD_INT 35
6223: PPUSH
6224: CALL_OW 67
// enemy := mc_scan [ base ] ;
6228: LD_ADDR_VAR 0 3
6232: PUSH
6233: LD_EXP 60
6237: PUSH
6238: LD_VAR 0 1
6242: ARRAY
6243: ST_TO_ADDR
// for i in defenders do
6244: LD_ADDR_VAR 0 5
6248: PUSH
6249: LD_VAR 0 2
6253: PUSH
6254: FOR_IN
6255: IFFALSE 6940
// begin e := NearestUnitToUnit ( enemy , i ) ;
6257: LD_ADDR_VAR 0 13
6261: PUSH
6262: LD_VAR 0 3
6266: PPUSH
6267: LD_VAR 0 5
6271: PPUSH
6272: CALL_OW 74
6276: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
6277: LD_ADDR_VAR 0 16
6281: PUSH
6282: LD_EXP 37
6286: PUSH
6287: LD_VAR 0 1
6291: ARRAY
6292: PPUSH
6293: LD_INT 2
6295: PUSH
6296: LD_INT 30
6298: PUSH
6299: LD_INT 0
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: PUSH
6306: LD_INT 30
6308: PUSH
6309: LD_INT 1
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: LIST
6320: PPUSH
6321: CALL_OW 72
6325: NOT
6326: PUSH
6327: LD_EXP 37
6331: PUSH
6332: LD_VAR 0 1
6336: ARRAY
6337: PPUSH
6338: LD_INT 2
6340: PUSH
6341: LD_INT 30
6343: PUSH
6344: LD_INT 0
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: LD_INT 30
6353: PUSH
6354: LD_INT 1
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: PPUSH
6366: CALL_OW 72
6370: PPUSH
6371: CALL_OW 256
6375: PUSH
6376: LD_INT 600
6378: LESS
6379: OR
6380: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
6381: LD_VAR 0 5
6385: PPUSH
6386: CALL_OW 247
6390: PUSH
6391: LD_INT 2
6393: DOUBLE
6394: EQUAL
6395: IFTRUE 6399
6397: GO 6646
6399: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
6400: LD_VAR 0 5
6404: PPUSH
6405: CALL_OW 256
6409: PUSH
6410: LD_INT 650
6412: GREATER
6413: PUSH
6414: LD_VAR 0 5
6418: PPUSH
6419: LD_VAR 0 13
6423: PPUSH
6424: CALL_OW 296
6428: PUSH
6429: LD_INT 40
6431: LESS
6432: AND
6433: IFFALSE 6451
// ComAttackUnit ( i , e ) else
6435: LD_VAR 0 5
6439: PPUSH
6440: LD_VAR 0 13
6444: PPUSH
6445: CALL_OW 115
6449: GO 6529
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
6451: LD_VAR 0 5
6455: PPUSH
6456: LD_VAR 0 13
6460: PPUSH
6461: CALL_OW 296
6465: PUSH
6466: LD_INT 30
6468: GREATEREQUAL
6469: PUSH
6470: LD_VAR 0 5
6474: PPUSH
6475: CALL_OW 256
6479: PUSH
6480: LD_INT 650
6482: LESSEQUAL
6483: OR
6484: PUSH
6485: LD_VAR 0 5
6489: PPUSH
6490: LD_EXP 61
6494: PUSH
6495: LD_VAR 0 1
6499: ARRAY
6500: PPUSH
6501: CALL_OW 308
6505: NOT
6506: AND
6507: IFFALSE 6529
// ComMoveToArea ( i , mc_parking [ base ] ) ;
6509: LD_VAR 0 5
6513: PPUSH
6514: LD_EXP 61
6518: PUSH
6519: LD_VAR 0 1
6523: ARRAY
6524: PPUSH
6525: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
6529: LD_VAR 0 5
6533: PPUSH
6534: CALL_OW 256
6538: PUSH
6539: LD_INT 998
6541: LESS
6542: PUSH
6543: LD_VAR 0 5
6547: PPUSH
6548: CALL_OW 263
6552: PUSH
6553: LD_INT 1
6555: EQUAL
6556: AND
6557: PUSH
6558: LD_VAR 0 5
6562: PPUSH
6563: CALL_OW 311
6567: AND
6568: PUSH
6569: LD_VAR 0 5
6573: PPUSH
6574: LD_EXP 61
6578: PUSH
6579: LD_VAR 0 1
6583: ARRAY
6584: PPUSH
6585: CALL_OW 308
6589: AND
6590: IFFALSE 6644
// begin mech := IsDrivenBy ( i ) ;
6592: LD_ADDR_VAR 0 9
6596: PUSH
6597: LD_VAR 0 5
6601: PPUSH
6602: CALL_OW 311
6606: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
6607: LD_VAR 0 9
6611: PPUSH
6612: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
6616: LD_VAR 0 9
6620: PPUSH
6621: LD_VAR 0 5
6625: PPUSH
6626: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
6630: LD_VAR 0 9
6634: PPUSH
6635: LD_VAR 0 5
6639: PPUSH
6640: CALL_OW 180
// end ; end ; unit_human :
6644: GO 6911
6646: LD_INT 1
6648: DOUBLE
6649: EQUAL
6650: IFTRUE 6654
6652: GO 6910
6654: POP
// begin b := IsInUnit ( i ) ;
6655: LD_ADDR_VAR 0 18
6659: PUSH
6660: LD_VAR 0 5
6664: PPUSH
6665: CALL_OW 310
6669: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
6670: LD_ADDR_VAR 0 19
6674: PUSH
6675: LD_VAR 0 18
6679: NOT
6680: PUSH
6681: LD_VAR 0 18
6685: PPUSH
6686: CALL_OW 266
6690: PUSH
6691: LD_INT 32
6693: PUSH
6694: LD_INT 31
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: IN
6701: OR
6702: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
6703: LD_VAR 0 16
6707: PUSH
6708: LD_VAR 0 2
6712: PPUSH
6713: LD_INT 21
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 72
6727: PUSH
6728: LD_INT 1
6730: LESSEQUAL
6731: OR
6732: PUSH
6733: LD_VAR 0 19
6737: AND
6738: PUSH
6739: LD_VAR 0 5
6743: PUSH
6744: LD_VAR 0 17
6748: IN
6749: NOT
6750: AND
6751: IFFALSE 6844
// begin if b then
6753: LD_VAR 0 18
6757: IFFALSE 6806
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
6759: LD_VAR 0 18
6763: PPUSH
6764: LD_VAR 0 3
6768: PPUSH
6769: LD_VAR 0 18
6773: PPUSH
6774: CALL_OW 74
6778: PPUSH
6779: CALL_OW 296
6783: PUSH
6784: LD_INT 10
6786: LESS
6787: PUSH
6788: LD_VAR 0 18
6792: PPUSH
6793: CALL_OW 461
6797: PUSH
6798: LD_INT 7
6800: NONEQUAL
6801: AND
6802: IFFALSE 6806
// continue ;
6804: GO 6254
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
6806: LD_ADDR_VAR 0 17
6810: PUSH
6811: LD_VAR 0 17
6815: PPUSH
6816: LD_VAR 0 17
6820: PUSH
6821: LD_INT 1
6823: PLUS
6824: PPUSH
6825: LD_VAR 0 5
6829: PPUSH
6830: CALL_OW 1
6834: ST_TO_ADDR
// ComExitBuilding ( i ) ;
6835: LD_VAR 0 5
6839: PPUSH
6840: CALL_OW 122
// end ; if sold_defenders then
6844: LD_VAR 0 17
6848: IFFALSE 6908
// if i in sold_defenders then
6850: LD_VAR 0 5
6854: PUSH
6855: LD_VAR 0 17
6859: IN
6860: IFFALSE 6908
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
6862: LD_VAR 0 5
6866: PPUSH
6867: CALL_OW 314
6871: NOT
6872: PUSH
6873: LD_VAR 0 5
6877: PPUSH
6878: LD_VAR 0 13
6882: PPUSH
6883: CALL_OW 296
6887: PUSH
6888: LD_INT 30
6890: LESS
6891: AND
6892: IFFALSE 6908
// ComAttackUnit ( i , e ) ;
6894: LD_VAR 0 5
6898: PPUSH
6899: LD_VAR 0 13
6903: PPUSH
6904: CALL_OW 115
// end ; end ; end ;
6908: GO 6911
6910: POP
// if IsDead ( i ) then
6911: LD_VAR 0 5
6915: PPUSH
6916: CALL_OW 301
6920: IFFALSE 6938
// defenders := defenders diff i ;
6922: LD_ADDR_VAR 0 2
6926: PUSH
6927: LD_VAR 0 2
6931: PUSH
6932: LD_VAR 0 5
6936: DIFF
6937: ST_TO_ADDR
// end ;
6938: GO 6254
6940: POP
6941: POP
// until not enemy or not defenders ;
6942: LD_VAR 0 3
6946: NOT
6947: PUSH
6948: LD_VAR 0 2
6952: NOT
6953: OR
6954: IFFALSE 6221
// MC_Reset ( base , 18 ) ;
6956: LD_VAR 0 1
6960: PPUSH
6961: LD_INT 18
6963: PPUSH
6964: CALL 43318 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
6968: LD_ADDR_VAR 0 2
6972: PUSH
6973: LD_VAR 0 2
6977: PUSH
6978: LD_VAR 0 2
6982: PPUSH
6983: LD_INT 2
6985: PUSH
6986: LD_INT 25
6988: PUSH
6989: LD_INT 1
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: LD_INT 25
6998: PUSH
6999: LD_INT 5
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 25
7008: PUSH
7009: LD_INT 8
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 25
7018: PUSH
7019: LD_INT 9
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: DIFF
7038: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
7039: LD_VAR 0 3
7043: NOT
7044: PUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_INT 21
7052: PUSH
7053: LD_INT 2
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PPUSH
7060: CALL_OW 72
7064: AND
7065: IFFALSE 7327
// begin tmp := FilterByTag ( defenders , 19 ) ;
7067: LD_ADDR_VAR 0 11
7071: PUSH
7072: LD_VAR 0 2
7076: PPUSH
7077: LD_INT 19
7079: PPUSH
7080: CALL 41610 0 2
7084: ST_TO_ADDR
// if tmp then
7085: LD_VAR 0 11
7089: IFFALSE 7159
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
7091: LD_ADDR_VAR 0 11
7095: PUSH
7096: LD_VAR 0 11
7100: PPUSH
7101: LD_INT 25
7103: PUSH
7104: LD_INT 3
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PPUSH
7111: CALL_OW 72
7115: ST_TO_ADDR
// if tmp then
7116: LD_VAR 0 11
7120: IFFALSE 7159
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
7122: LD_ADDR_EXP 49
7126: PUSH
7127: LD_EXP 49
7131: PPUSH
7132: LD_VAR 0 1
7136: PPUSH
7137: LD_EXP 49
7141: PUSH
7142: LD_VAR 0 1
7146: ARRAY
7147: PUSH
7148: LD_VAR 0 11
7152: UNION
7153: PPUSH
7154: CALL_OW 1
7158: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
7159: LD_VAR 0 1
7163: PPUSH
7164: LD_INT 19
7166: PPUSH
7167: CALL 43318 0 2
// repeat wait ( 0 0$1 ) ;
7171: LD_INT 35
7173: PPUSH
7174: CALL_OW 67
// for i in defenders do
7178: LD_ADDR_VAR 0 5
7182: PUSH
7183: LD_VAR 0 2
7187: PUSH
7188: FOR_IN
7189: IFFALSE 7278
// begin if not IsInArea ( i , mc_parking [ base ] ) then
7191: LD_VAR 0 5
7195: PPUSH
7196: LD_EXP 61
7200: PUSH
7201: LD_VAR 0 1
7205: ARRAY
7206: PPUSH
7207: CALL_OW 308
7211: NOT
7212: IFFALSE 7236
// ComMoveToArea ( i , mc_parking [ base ] ) else
7214: LD_VAR 0 5
7218: PPUSH
7219: LD_EXP 61
7223: PUSH
7224: LD_VAR 0 1
7228: ARRAY
7229: PPUSH
7230: CALL_OW 113
7234: GO 7276
// if GetControl ( i ) = control_manual then
7236: LD_VAR 0 5
7240: PPUSH
7241: CALL_OW 263
7245: PUSH
7246: LD_INT 1
7248: EQUAL
7249: IFFALSE 7276
// if IsDrivenBy ( i ) then
7251: LD_VAR 0 5
7255: PPUSH
7256: CALL_OW 311
7260: IFFALSE 7276
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
7262: LD_VAR 0 5
7266: PPUSH
7267: CALL_OW 311
7271: PPUSH
7272: CALL_OW 121
// end ;
7276: GO 7188
7278: POP
7279: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
7280: LD_VAR 0 2
7284: PPUSH
7285: LD_INT 95
7287: PUSH
7288: LD_EXP 61
7292: PUSH
7293: LD_VAR 0 1
7297: ARRAY
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: PPUSH
7303: CALL_OW 72
7307: PUSH
7308: LD_VAR 0 2
7312: EQUAL
7313: PUSH
7314: LD_EXP 60
7318: PUSH
7319: LD_VAR 0 1
7323: ARRAY
7324: OR
7325: IFFALSE 7171
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
7327: LD_ADDR_EXP 59
7331: PUSH
7332: LD_EXP 59
7336: PPUSH
7337: LD_VAR 0 1
7341: PPUSH
7342: LD_EXP 59
7346: PUSH
7347: LD_VAR 0 1
7351: ARRAY
7352: PUSH
7353: LD_VAR 0 2
7357: UNION
7358: PPUSH
7359: CALL_OW 1
7363: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
7364: LD_VAR 0 1
7368: PPUSH
7369: LD_INT 20
7371: PPUSH
7372: CALL 43318 0 2
// end ;
7376: LD_VAR 0 4
7380: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
7381: LD_INT 0
7383: PPUSH
7384: PPUSH
7385: PPUSH
7386: PPUSH
// result := false ;
7387: LD_ADDR_VAR 0 2
7391: PUSH
7392: LD_INT 0
7394: ST_TO_ADDR
// side := GetSide ( unit ) ;
7395: LD_ADDR_VAR 0 3
7399: PUSH
7400: LD_VAR 0 1
7404: PPUSH
7405: CALL_OW 255
7409: ST_TO_ADDR
// nat := GetNation ( unit ) ;
7410: LD_ADDR_VAR 0 4
7414: PUSH
7415: LD_VAR 0 1
7419: PPUSH
7420: CALL_OW 248
7424: ST_TO_ADDR
// case nat of 1 :
7425: LD_VAR 0 4
7429: PUSH
7430: LD_INT 1
7432: DOUBLE
7433: EQUAL
7434: IFTRUE 7438
7436: GO 7449
7438: POP
// tech := tech_lassight ; 2 :
7439: LD_ADDR_VAR 0 5
7443: PUSH
7444: LD_INT 12
7446: ST_TO_ADDR
7447: GO 7488
7449: LD_INT 2
7451: DOUBLE
7452: EQUAL
7453: IFTRUE 7457
7455: GO 7468
7457: POP
// tech := tech_mortar ; 3 :
7458: LD_ADDR_VAR 0 5
7462: PUSH
7463: LD_INT 41
7465: ST_TO_ADDR
7466: GO 7488
7468: LD_INT 3
7470: DOUBLE
7471: EQUAL
7472: IFTRUE 7476
7474: GO 7487
7476: POP
// tech := tech_bazooka ; end ;
7477: LD_ADDR_VAR 0 5
7481: PUSH
7482: LD_INT 44
7484: ST_TO_ADDR
7485: GO 7488
7487: POP
// if Researched ( side , tech ) then
7488: LD_VAR 0 3
7492: PPUSH
7493: LD_VAR 0 5
7497: PPUSH
7498: CALL_OW 325
7502: IFFALSE 7529
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
7504: LD_ADDR_VAR 0 2
7508: PUSH
7509: LD_INT 5
7511: PUSH
7512: LD_INT 8
7514: PUSH
7515: LD_INT 9
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: LIST
7522: PUSH
7523: LD_VAR 0 4
7527: ARRAY
7528: ST_TO_ADDR
// end ;
7529: LD_VAR 0 2
7533: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
7534: LD_INT 0
7536: PPUSH
7537: PPUSH
7538: PPUSH
// if not mines then
7539: LD_VAR 0 2
7543: NOT
7544: IFFALSE 7548
// exit ;
7546: GO 7692
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7548: LD_ADDR_VAR 0 5
7552: PUSH
7553: LD_INT 81
7555: PUSH
7556: LD_VAR 0 1
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: LD_INT 21
7570: PUSH
7571: LD_INT 3
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 69
7590: ST_TO_ADDR
// for i in mines do
7591: LD_ADDR_VAR 0 4
7595: PUSH
7596: LD_VAR 0 2
7600: PUSH
7601: FOR_IN
7602: IFFALSE 7690
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
7604: LD_VAR 0 4
7608: PUSH
7609: LD_INT 1
7611: ARRAY
7612: PPUSH
7613: LD_VAR 0 4
7617: PUSH
7618: LD_INT 2
7620: ARRAY
7621: PPUSH
7622: CALL_OW 458
7626: NOT
7627: IFFALSE 7631
// continue ;
7629: GO 7601
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
7631: LD_VAR 0 4
7635: PUSH
7636: LD_INT 1
7638: ARRAY
7639: PPUSH
7640: LD_VAR 0 4
7644: PUSH
7645: LD_INT 2
7647: ARRAY
7648: PPUSH
7649: CALL_OW 428
7653: PUSH
7654: LD_VAR 0 5
7658: IN
7659: IFFALSE 7688
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
7661: LD_VAR 0 4
7665: PUSH
7666: LD_INT 1
7668: ARRAY
7669: PPUSH
7670: LD_VAR 0 4
7674: PUSH
7675: LD_INT 2
7677: ARRAY
7678: PPUSH
7679: LD_VAR 0 1
7683: PPUSH
7684: CALL_OW 456
// end ;
7688: GO 7601
7690: POP
7691: POP
// end ;
7692: LD_VAR 0 3
7696: RET
// export function Count ( array ) ; var i ; begin
7697: LD_INT 0
7699: PPUSH
7700: PPUSH
// result := 0 ;
7701: LD_ADDR_VAR 0 2
7705: PUSH
7706: LD_INT 0
7708: ST_TO_ADDR
// for i in array do
7709: LD_ADDR_VAR 0 3
7713: PUSH
7714: LD_VAR 0 1
7718: PUSH
7719: FOR_IN
7720: IFFALSE 7744
// if i then
7722: LD_VAR 0 3
7726: IFFALSE 7742
// result := result + 1 ;
7728: LD_ADDR_VAR 0 2
7732: PUSH
7733: LD_VAR 0 2
7737: PUSH
7738: LD_INT 1
7740: PLUS
7741: ST_TO_ADDR
7742: GO 7719
7744: POP
7745: POP
// end ;
7746: LD_VAR 0 2
7750: RET
// export function IsEmpty ( building ) ; begin
7751: LD_INT 0
7753: PPUSH
// if not building then
7754: LD_VAR 0 1
7758: NOT
7759: IFFALSE 7763
// exit ;
7761: GO 7806
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
7763: LD_ADDR_VAR 0 2
7767: PUSH
7768: LD_VAR 0 1
7772: PUSH
7773: LD_INT 22
7775: PUSH
7776: LD_VAR 0 1
7780: PPUSH
7781: CALL_OW 255
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: PUSH
7790: LD_INT 58
7792: PUSH
7793: EMPTY
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PPUSH
7800: CALL_OW 69
7804: IN
7805: ST_TO_ADDR
// end ;
7806: LD_VAR 0 2
7810: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
7811: LD_INT 0
7813: PPUSH
7814: PPUSH
7815: PPUSH
7816: PPUSH
// tmp := [ ] ;
7817: LD_ADDR_VAR 0 3
7821: PUSH
7822: EMPTY
7823: ST_TO_ADDR
// list := [ ] ;
7824: LD_ADDR_VAR 0 5
7828: PUSH
7829: EMPTY
7830: ST_TO_ADDR
// for i = 16 to 25 do
7831: LD_ADDR_VAR 0 4
7835: PUSH
7836: DOUBLE
7837: LD_INT 16
7839: DEC
7840: ST_TO_ADDR
7841: LD_INT 25
7843: PUSH
7844: FOR_TO
7845: IFFALSE 7918
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
7847: LD_ADDR_VAR 0 3
7851: PUSH
7852: LD_VAR 0 3
7856: PUSH
7857: LD_INT 22
7859: PUSH
7860: LD_VAR 0 1
7864: PPUSH
7865: CALL_OW 255
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 91
7876: PUSH
7877: LD_VAR 0 1
7881: PUSH
7882: LD_INT 6
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 30
7892: PUSH
7893: LD_VAR 0 4
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: PUSH
7907: EMPTY
7908: LIST
7909: PPUSH
7910: CALL_OW 69
7914: ADD
7915: ST_TO_ADDR
7916: GO 7844
7918: POP
7919: POP
// for i = 1 to tmp do
7920: LD_ADDR_VAR 0 4
7924: PUSH
7925: DOUBLE
7926: LD_INT 1
7928: DEC
7929: ST_TO_ADDR
7930: LD_VAR 0 3
7934: PUSH
7935: FOR_TO
7936: IFFALSE 8024
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
7938: LD_ADDR_VAR 0 5
7942: PUSH
7943: LD_VAR 0 5
7947: PUSH
7948: LD_VAR 0 3
7952: PUSH
7953: LD_VAR 0 4
7957: ARRAY
7958: PPUSH
7959: CALL_OW 266
7963: PUSH
7964: LD_VAR 0 3
7968: PUSH
7969: LD_VAR 0 4
7973: ARRAY
7974: PPUSH
7975: CALL_OW 250
7979: PUSH
7980: LD_VAR 0 3
7984: PUSH
7985: LD_VAR 0 4
7989: ARRAY
7990: PPUSH
7991: CALL_OW 251
7995: PUSH
7996: LD_VAR 0 3
8000: PUSH
8001: LD_VAR 0 4
8005: ARRAY
8006: PPUSH
8007: CALL_OW 254
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: PUSH
8018: EMPTY
8019: LIST
8020: ADD
8021: ST_TO_ADDR
8022: GO 7935
8024: POP
8025: POP
// result := list ;
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 5
8035: ST_TO_ADDR
// end ;
8036: LD_VAR 0 2
8040: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
8041: LD_INT 0
8043: PPUSH
8044: PPUSH
8045: PPUSH
8046: PPUSH
8047: PPUSH
8048: PPUSH
8049: PPUSH
// if not factory then
8050: LD_VAR 0 1
8054: NOT
8055: IFFALSE 8059
// exit ;
8057: GO 8584
// if control = control_apeman then
8059: LD_VAR 0 4
8063: PUSH
8064: LD_INT 5
8066: EQUAL
8067: IFFALSE 8176
// begin tmp := UnitsInside ( factory ) ;
8069: LD_ADDR_VAR 0 8
8073: PUSH
8074: LD_VAR 0 1
8078: PPUSH
8079: CALL_OW 313
8083: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
8084: LD_VAR 0 8
8088: PPUSH
8089: LD_INT 25
8091: PUSH
8092: LD_INT 12
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PPUSH
8099: CALL_OW 72
8103: NOT
8104: IFFALSE 8114
// control := control_manual ;
8106: LD_ADDR_VAR 0 4
8110: PUSH
8111: LD_INT 1
8113: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
8114: LD_ADDR_VAR 0 8
8118: PUSH
8119: LD_VAR 0 1
8123: PPUSH
8124: CALL 7811 0 1
8128: ST_TO_ADDR
// if tmp then
8129: LD_VAR 0 8
8133: IFFALSE 8176
// begin for i in tmp do
8135: LD_ADDR_VAR 0 7
8139: PUSH
8140: LD_VAR 0 8
8144: PUSH
8145: FOR_IN
8146: IFFALSE 8174
// if i [ 1 ] = b_ext_radar then
8148: LD_VAR 0 7
8152: PUSH
8153: LD_INT 1
8155: ARRAY
8156: PUSH
8157: LD_INT 20
8159: EQUAL
8160: IFFALSE 8172
// begin control := control_remote ;
8162: LD_ADDR_VAR 0 4
8166: PUSH
8167: LD_INT 2
8169: ST_TO_ADDR
// break ;
8170: GO 8174
// end ;
8172: GO 8145
8174: POP
8175: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
8176: LD_VAR 0 1
8180: PPUSH
8181: LD_VAR 0 2
8185: PPUSH
8186: LD_VAR 0 3
8190: PPUSH
8191: LD_VAR 0 4
8195: PPUSH
8196: LD_VAR 0 5
8200: PPUSH
8201: CALL_OW 448
8205: IFFALSE 8240
// begin result := [ chassis , engine , control , weapon ] ;
8207: LD_ADDR_VAR 0 6
8211: PUSH
8212: LD_VAR 0 2
8216: PUSH
8217: LD_VAR 0 3
8221: PUSH
8222: LD_VAR 0 4
8226: PUSH
8227: LD_VAR 0 5
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: ST_TO_ADDR
// exit ;
8238: GO 8584
// end ; _chassis := AvailableChassisList ( factory ) ;
8240: LD_ADDR_VAR 0 9
8244: PUSH
8245: LD_VAR 0 1
8249: PPUSH
8250: CALL_OW 475
8254: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
8255: LD_ADDR_VAR 0 11
8259: PUSH
8260: LD_VAR 0 1
8264: PPUSH
8265: CALL_OW 476
8269: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
8270: LD_ADDR_VAR 0 12
8274: PUSH
8275: LD_VAR 0 1
8279: PPUSH
8280: CALL_OW 477
8284: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
8285: LD_ADDR_VAR 0 10
8289: PUSH
8290: LD_VAR 0 1
8294: PPUSH
8295: CALL_OW 478
8299: ST_TO_ADDR
// if not chassis in _chassis then
8300: LD_VAR 0 2
8304: PUSH
8305: LD_VAR 0 9
8309: IN
8310: NOT
8311: IFFALSE 8337
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
8313: LD_ADDR_VAR 0 2
8317: PUSH
8318: LD_VAR 0 9
8322: PUSH
8323: LD_INT 1
8325: PPUSH
8326: LD_VAR 0 9
8330: PPUSH
8331: CALL_OW 12
8335: ARRAY
8336: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
8337: LD_VAR 0 2
8341: PPUSH
8342: LD_VAR 0 3
8346: PPUSH
8347: CALL 8589 0 2
8351: NOT
8352: IFFALSE 8411
// repeat engine := _engine [ 1 ] ;
8354: LD_ADDR_VAR 0 3
8358: PUSH
8359: LD_VAR 0 11
8363: PUSH
8364: LD_INT 1
8366: ARRAY
8367: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
8368: LD_ADDR_VAR 0 11
8372: PUSH
8373: LD_VAR 0 11
8377: PPUSH
8378: LD_INT 1
8380: PPUSH
8381: CALL_OW 3
8385: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
8386: LD_VAR 0 2
8390: PPUSH
8391: LD_VAR 0 3
8395: PPUSH
8396: CALL 8589 0 2
8400: PUSH
8401: LD_VAR 0 11
8405: PUSH
8406: EMPTY
8407: EQUAL
8408: OR
8409: IFFALSE 8354
// if not control in _control then
8411: LD_VAR 0 4
8415: PUSH
8416: LD_VAR 0 12
8420: IN
8421: NOT
8422: IFFALSE 8448
// control := _control [ rand ( 1 , _control ) ] ;
8424: LD_ADDR_VAR 0 4
8428: PUSH
8429: LD_VAR 0 12
8433: PUSH
8434: LD_INT 1
8436: PPUSH
8437: LD_VAR 0 12
8441: PPUSH
8442: CALL_OW 12
8446: ARRAY
8447: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
8448: LD_VAR 0 2
8452: PPUSH
8453: LD_VAR 0 5
8457: PPUSH
8458: CALL 8809 0 2
8462: NOT
8463: IFFALSE 8522
// repeat weapon := _weapon [ 1 ] ;
8465: LD_ADDR_VAR 0 5
8469: PUSH
8470: LD_VAR 0 10
8474: PUSH
8475: LD_INT 1
8477: ARRAY
8478: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
8479: LD_ADDR_VAR 0 10
8483: PUSH
8484: LD_VAR 0 10
8488: PPUSH
8489: LD_INT 1
8491: PPUSH
8492: CALL_OW 3
8496: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
8497: LD_VAR 0 2
8501: PPUSH
8502: LD_VAR 0 5
8506: PPUSH
8507: CALL 8809 0 2
8511: PUSH
8512: LD_VAR 0 10
8516: PUSH
8517: EMPTY
8518: EQUAL
8519: OR
8520: IFFALSE 8465
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
8522: LD_VAR 0 1
8526: PPUSH
8527: LD_VAR 0 2
8531: PPUSH
8532: LD_VAR 0 3
8536: PPUSH
8537: LD_VAR 0 4
8541: PPUSH
8542: LD_VAR 0 5
8546: PPUSH
8547: CALL_OW 448
8551: IFFALSE 8584
// result := [ chassis , engine , control , weapon ] ;
8553: LD_ADDR_VAR 0 6
8557: PUSH
8558: LD_VAR 0 2
8562: PUSH
8563: LD_VAR 0 3
8567: PUSH
8568: LD_VAR 0 4
8572: PUSH
8573: LD_VAR 0 5
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: ST_TO_ADDR
// end ;
8584: LD_VAR 0 6
8588: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
8589: LD_INT 0
8591: PPUSH
// if not chassis or not engine then
8592: LD_VAR 0 1
8596: NOT
8597: PUSH
8598: LD_VAR 0 2
8602: NOT
8603: OR
8604: IFFALSE 8608
// exit ;
8606: GO 8804
// case engine of engine_solar :
8608: LD_VAR 0 2
8612: PUSH
8613: LD_INT 2
8615: DOUBLE
8616: EQUAL
8617: IFTRUE 8621
8619: GO 8659
8621: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
8622: LD_ADDR_VAR 0 3
8626: PUSH
8627: LD_INT 11
8629: PUSH
8630: LD_INT 12
8632: PUSH
8633: LD_INT 13
8635: PUSH
8636: LD_INT 14
8638: PUSH
8639: LD_INT 1
8641: PUSH
8642: LD_INT 2
8644: PUSH
8645: LD_INT 3
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: ST_TO_ADDR
8657: GO 8788
8659: LD_INT 1
8661: DOUBLE
8662: EQUAL
8663: IFTRUE 8667
8665: GO 8729
8667: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
8668: LD_ADDR_VAR 0 3
8672: PUSH
8673: LD_INT 11
8675: PUSH
8676: LD_INT 12
8678: PUSH
8679: LD_INT 13
8681: PUSH
8682: LD_INT 14
8684: PUSH
8685: LD_INT 1
8687: PUSH
8688: LD_INT 2
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: LD_INT 4
8696: PUSH
8697: LD_INT 5
8699: PUSH
8700: LD_INT 21
8702: PUSH
8703: LD_INT 23
8705: PUSH
8706: LD_INT 22
8708: PUSH
8709: LD_INT 24
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: ST_TO_ADDR
8727: GO 8788
8729: LD_INT 3
8731: DOUBLE
8732: EQUAL
8733: IFTRUE 8737
8735: GO 8787
8737: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8738: LD_ADDR_VAR 0 3
8742: PUSH
8743: LD_INT 13
8745: PUSH
8746: LD_INT 14
8748: PUSH
8749: LD_INT 2
8751: PUSH
8752: LD_INT 3
8754: PUSH
8755: LD_INT 4
8757: PUSH
8758: LD_INT 5
8760: PUSH
8761: LD_INT 21
8763: PUSH
8764: LD_INT 22
8766: PUSH
8767: LD_INT 23
8769: PUSH
8770: LD_INT 24
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: ST_TO_ADDR
8785: GO 8788
8787: POP
// result := ( chassis in result ) ;
8788: LD_ADDR_VAR 0 3
8792: PUSH
8793: LD_VAR 0 1
8797: PUSH
8798: LD_VAR 0 3
8802: IN
8803: ST_TO_ADDR
// end ;
8804: LD_VAR 0 3
8808: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
8809: LD_INT 0
8811: PPUSH
// if not chassis or not weapon then
8812: LD_VAR 0 1
8816: NOT
8817: PUSH
8818: LD_VAR 0 2
8822: NOT
8823: OR
8824: IFFALSE 8828
// exit ;
8826: GO 9854
// case weapon of us_machine_gun :
8828: LD_VAR 0 2
8832: PUSH
8833: LD_INT 2
8835: DOUBLE
8836: EQUAL
8837: IFTRUE 8841
8839: GO 8871
8841: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
8842: LD_ADDR_VAR 0 3
8846: PUSH
8847: LD_INT 1
8849: PUSH
8850: LD_INT 2
8852: PUSH
8853: LD_INT 3
8855: PUSH
8856: LD_INT 4
8858: PUSH
8859: LD_INT 5
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: ST_TO_ADDR
8869: GO 9838
8871: LD_INT 3
8873: DOUBLE
8874: EQUAL
8875: IFTRUE 8879
8877: GO 8909
8879: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
8880: LD_ADDR_VAR 0 3
8884: PUSH
8885: LD_INT 1
8887: PUSH
8888: LD_INT 2
8890: PUSH
8891: LD_INT 3
8893: PUSH
8894: LD_INT 4
8896: PUSH
8897: LD_INT 5
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: ST_TO_ADDR
8907: GO 9838
8909: LD_INT 11
8911: DOUBLE
8912: EQUAL
8913: IFTRUE 8917
8915: GO 8947
8917: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
8918: LD_ADDR_VAR 0 3
8922: PUSH
8923: LD_INT 1
8925: PUSH
8926: LD_INT 2
8928: PUSH
8929: LD_INT 3
8931: PUSH
8932: LD_INT 4
8934: PUSH
8935: LD_INT 5
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: ST_TO_ADDR
8945: GO 9838
8947: LD_INT 4
8949: DOUBLE
8950: EQUAL
8951: IFTRUE 8955
8953: GO 8981
8955: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
8956: LD_ADDR_VAR 0 3
8960: PUSH
8961: LD_INT 2
8963: PUSH
8964: LD_INT 3
8966: PUSH
8967: LD_INT 4
8969: PUSH
8970: LD_INT 5
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: ST_TO_ADDR
8979: GO 9838
8981: LD_INT 5
8983: DOUBLE
8984: EQUAL
8985: IFTRUE 8989
8987: GO 9015
8989: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
8990: LD_ADDR_VAR 0 3
8994: PUSH
8995: LD_INT 2
8997: PUSH
8998: LD_INT 3
9000: PUSH
9001: LD_INT 4
9003: PUSH
9004: LD_INT 5
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: ST_TO_ADDR
9013: GO 9838
9015: LD_INT 9
9017: DOUBLE
9018: EQUAL
9019: IFTRUE 9023
9021: GO 9049
9023: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
9024: LD_ADDR_VAR 0 3
9028: PUSH
9029: LD_INT 2
9031: PUSH
9032: LD_INT 3
9034: PUSH
9035: LD_INT 4
9037: PUSH
9038: LD_INT 5
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: ST_TO_ADDR
9047: GO 9838
9049: LD_INT 7
9051: DOUBLE
9052: EQUAL
9053: IFTRUE 9057
9055: GO 9083
9057: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
9058: LD_ADDR_VAR 0 3
9062: PUSH
9063: LD_INT 2
9065: PUSH
9066: LD_INT 3
9068: PUSH
9069: LD_INT 4
9071: PUSH
9072: LD_INT 5
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: ST_TO_ADDR
9081: GO 9838
9083: LD_INT 12
9085: DOUBLE
9086: EQUAL
9087: IFTRUE 9091
9089: GO 9117
9091: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
9092: LD_ADDR_VAR 0 3
9096: PUSH
9097: LD_INT 2
9099: PUSH
9100: LD_INT 3
9102: PUSH
9103: LD_INT 4
9105: PUSH
9106: LD_INT 5
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: ST_TO_ADDR
9115: GO 9838
9117: LD_INT 13
9119: DOUBLE
9120: EQUAL
9121: IFTRUE 9125
9123: GO 9151
9125: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
9126: LD_ADDR_VAR 0 3
9130: PUSH
9131: LD_INT 2
9133: PUSH
9134: LD_INT 3
9136: PUSH
9137: LD_INT 4
9139: PUSH
9140: LD_INT 5
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: ST_TO_ADDR
9149: GO 9838
9151: LD_INT 14
9153: DOUBLE
9154: EQUAL
9155: IFTRUE 9159
9157: GO 9177
9159: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
9160: LD_ADDR_VAR 0 3
9164: PUSH
9165: LD_INT 4
9167: PUSH
9168: LD_INT 5
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: ST_TO_ADDR
9175: GO 9838
9177: LD_INT 6
9179: DOUBLE
9180: EQUAL
9181: IFTRUE 9185
9183: GO 9203
9185: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
9186: LD_ADDR_VAR 0 3
9190: PUSH
9191: LD_INT 4
9193: PUSH
9194: LD_INT 5
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: ST_TO_ADDR
9201: GO 9838
9203: LD_INT 10
9205: DOUBLE
9206: EQUAL
9207: IFTRUE 9211
9209: GO 9229
9211: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
9212: LD_ADDR_VAR 0 3
9216: PUSH
9217: LD_INT 4
9219: PUSH
9220: LD_INT 5
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: ST_TO_ADDR
9227: GO 9838
9229: LD_INT 22
9231: DOUBLE
9232: EQUAL
9233: IFTRUE 9237
9235: GO 9263
9237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
9238: LD_ADDR_VAR 0 3
9242: PUSH
9243: LD_INT 11
9245: PUSH
9246: LD_INT 12
9248: PUSH
9249: LD_INT 13
9251: PUSH
9252: LD_INT 14
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: ST_TO_ADDR
9261: GO 9838
9263: LD_INT 23
9265: DOUBLE
9266: EQUAL
9267: IFTRUE 9271
9269: GO 9297
9271: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
9272: LD_ADDR_VAR 0 3
9276: PUSH
9277: LD_INT 11
9279: PUSH
9280: LD_INT 12
9282: PUSH
9283: LD_INT 13
9285: PUSH
9286: LD_INT 14
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: ST_TO_ADDR
9295: GO 9838
9297: LD_INT 24
9299: DOUBLE
9300: EQUAL
9301: IFTRUE 9305
9303: GO 9331
9305: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
9306: LD_ADDR_VAR 0 3
9310: PUSH
9311: LD_INT 11
9313: PUSH
9314: LD_INT 12
9316: PUSH
9317: LD_INT 13
9319: PUSH
9320: LD_INT 14
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: ST_TO_ADDR
9329: GO 9838
9331: LD_INT 30
9333: DOUBLE
9334: EQUAL
9335: IFTRUE 9339
9337: GO 9365
9339: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
9340: LD_ADDR_VAR 0 3
9344: PUSH
9345: LD_INT 11
9347: PUSH
9348: LD_INT 12
9350: PUSH
9351: LD_INT 13
9353: PUSH
9354: LD_INT 14
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: ST_TO_ADDR
9363: GO 9838
9365: LD_INT 25
9367: DOUBLE
9368: EQUAL
9369: IFTRUE 9373
9371: GO 9391
9373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
9374: LD_ADDR_VAR 0 3
9378: PUSH
9379: LD_INT 13
9381: PUSH
9382: LD_INT 14
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: ST_TO_ADDR
9389: GO 9838
9391: LD_INT 27
9393: DOUBLE
9394: EQUAL
9395: IFTRUE 9399
9397: GO 9417
9399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
9400: LD_ADDR_VAR 0 3
9404: PUSH
9405: LD_INT 13
9407: PUSH
9408: LD_INT 14
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: ST_TO_ADDR
9415: GO 9838
9417: LD_INT 28
9419: DOUBLE
9420: EQUAL
9421: IFTRUE 9425
9423: GO 9443
9425: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
9426: LD_ADDR_VAR 0 3
9430: PUSH
9431: LD_INT 13
9433: PUSH
9434: LD_INT 14
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: ST_TO_ADDR
9441: GO 9838
9443: LD_INT 29
9445: DOUBLE
9446: EQUAL
9447: IFTRUE 9451
9449: GO 9469
9451: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
9452: LD_ADDR_VAR 0 3
9456: PUSH
9457: LD_INT 13
9459: PUSH
9460: LD_INT 14
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: ST_TO_ADDR
9467: GO 9838
9469: LD_INT 31
9471: DOUBLE
9472: EQUAL
9473: IFTRUE 9477
9475: GO 9495
9477: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
9478: LD_ADDR_VAR 0 3
9482: PUSH
9483: LD_INT 13
9485: PUSH
9486: LD_INT 14
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: ST_TO_ADDR
9493: GO 9838
9495: LD_INT 26
9497: DOUBLE
9498: EQUAL
9499: IFTRUE 9503
9501: GO 9521
9503: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
9504: LD_ADDR_VAR 0 3
9508: PUSH
9509: LD_INT 13
9511: PUSH
9512: LD_INT 14
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: ST_TO_ADDR
9519: GO 9838
9521: LD_INT 42
9523: DOUBLE
9524: EQUAL
9525: IFTRUE 9529
9527: GO 9555
9529: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
9530: LD_ADDR_VAR 0 3
9534: PUSH
9535: LD_INT 21
9537: PUSH
9538: LD_INT 22
9540: PUSH
9541: LD_INT 23
9543: PUSH
9544: LD_INT 24
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: ST_TO_ADDR
9553: GO 9838
9555: LD_INT 43
9557: DOUBLE
9558: EQUAL
9559: IFTRUE 9563
9561: GO 9589
9563: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
9564: LD_ADDR_VAR 0 3
9568: PUSH
9569: LD_INT 21
9571: PUSH
9572: LD_INT 22
9574: PUSH
9575: LD_INT 23
9577: PUSH
9578: LD_INT 24
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: ST_TO_ADDR
9587: GO 9838
9589: LD_INT 44
9591: DOUBLE
9592: EQUAL
9593: IFTRUE 9597
9595: GO 9623
9597: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
9598: LD_ADDR_VAR 0 3
9602: PUSH
9603: LD_INT 21
9605: PUSH
9606: LD_INT 22
9608: PUSH
9609: LD_INT 23
9611: PUSH
9612: LD_INT 24
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: ST_TO_ADDR
9621: GO 9838
9623: LD_INT 45
9625: DOUBLE
9626: EQUAL
9627: IFTRUE 9631
9629: GO 9657
9631: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
9632: LD_ADDR_VAR 0 3
9636: PUSH
9637: LD_INT 21
9639: PUSH
9640: LD_INT 22
9642: PUSH
9643: LD_INT 23
9645: PUSH
9646: LD_INT 24
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
9655: GO 9838
9657: LD_INT 49
9659: DOUBLE
9660: EQUAL
9661: IFTRUE 9665
9663: GO 9691
9665: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
9666: LD_ADDR_VAR 0 3
9670: PUSH
9671: LD_INT 21
9673: PUSH
9674: LD_INT 22
9676: PUSH
9677: LD_INT 23
9679: PUSH
9680: LD_INT 24
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: ST_TO_ADDR
9689: GO 9838
9691: LD_INT 51
9693: DOUBLE
9694: EQUAL
9695: IFTRUE 9699
9697: GO 9725
9699: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
9700: LD_ADDR_VAR 0 3
9704: PUSH
9705: LD_INT 21
9707: PUSH
9708: LD_INT 22
9710: PUSH
9711: LD_INT 23
9713: PUSH
9714: LD_INT 24
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: ST_TO_ADDR
9723: GO 9838
9725: LD_INT 52
9727: DOUBLE
9728: EQUAL
9729: IFTRUE 9733
9731: GO 9759
9733: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
9734: LD_ADDR_VAR 0 3
9738: PUSH
9739: LD_INT 21
9741: PUSH
9742: LD_INT 22
9744: PUSH
9745: LD_INT 23
9747: PUSH
9748: LD_INT 24
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: ST_TO_ADDR
9757: GO 9838
9759: LD_INT 53
9761: DOUBLE
9762: EQUAL
9763: IFTRUE 9767
9765: GO 9785
9767: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
9768: LD_ADDR_VAR 0 3
9772: PUSH
9773: LD_INT 23
9775: PUSH
9776: LD_INT 24
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: ST_TO_ADDR
9783: GO 9838
9785: LD_INT 46
9787: DOUBLE
9788: EQUAL
9789: IFTRUE 9793
9791: GO 9811
9793: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
9794: LD_ADDR_VAR 0 3
9798: PUSH
9799: LD_INT 23
9801: PUSH
9802: LD_INT 24
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: ST_TO_ADDR
9809: GO 9838
9811: LD_INT 47
9813: DOUBLE
9814: EQUAL
9815: IFTRUE 9819
9817: GO 9837
9819: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9820: LD_ADDR_VAR 0 3
9824: PUSH
9825: LD_INT 23
9827: PUSH
9828: LD_INT 24
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: ST_TO_ADDR
9835: GO 9838
9837: POP
// result := ( chassis in result ) ;
9838: LD_ADDR_VAR 0 3
9842: PUSH
9843: LD_VAR 0 1
9847: PUSH
9848: LD_VAR 0 3
9852: IN
9853: ST_TO_ADDR
// end ;
9854: LD_VAR 0 3
9858: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
9859: LD_INT 0
9861: PPUSH
9862: PPUSH
9863: PPUSH
9864: PPUSH
9865: PPUSH
9866: PPUSH
9867: PPUSH
// result := array ;
9868: LD_ADDR_VAR 0 5
9872: PUSH
9873: LD_VAR 0 1
9877: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
9878: LD_VAR 0 1
9882: NOT
9883: PUSH
9884: LD_VAR 0 2
9888: NOT
9889: OR
9890: PUSH
9891: LD_VAR 0 3
9895: NOT
9896: OR
9897: PUSH
9898: LD_VAR 0 2
9902: PUSH
9903: LD_VAR 0 1
9907: GREATER
9908: OR
9909: PUSH
9910: LD_VAR 0 3
9914: PUSH
9915: LD_VAR 0 1
9919: GREATER
9920: OR
9921: IFFALSE 9925
// exit ;
9923: GO 10221
// if direction then
9925: LD_VAR 0 4
9929: IFFALSE 9993
// begin d := 1 ;
9931: LD_ADDR_VAR 0 9
9935: PUSH
9936: LD_INT 1
9938: ST_TO_ADDR
// if i_from > i_to then
9939: LD_VAR 0 2
9943: PUSH
9944: LD_VAR 0 3
9948: GREATER
9949: IFFALSE 9975
// length := ( array - i_from ) + i_to else
9951: LD_ADDR_VAR 0 11
9955: PUSH
9956: LD_VAR 0 1
9960: PUSH
9961: LD_VAR 0 2
9965: MINUS
9966: PUSH
9967: LD_VAR 0 3
9971: PLUS
9972: ST_TO_ADDR
9973: GO 9991
// length := i_to - i_from ;
9975: LD_ADDR_VAR 0 11
9979: PUSH
9980: LD_VAR 0 3
9984: PUSH
9985: LD_VAR 0 2
9989: MINUS
9990: ST_TO_ADDR
// end else
9991: GO 10054
// begin d := - 1 ;
9993: LD_ADDR_VAR 0 9
9997: PUSH
9998: LD_INT 1
10000: NEG
10001: ST_TO_ADDR
// if i_from > i_to then
10002: LD_VAR 0 2
10006: PUSH
10007: LD_VAR 0 3
10011: GREATER
10012: IFFALSE 10032
// length := i_from - i_to else
10014: LD_ADDR_VAR 0 11
10018: PUSH
10019: LD_VAR 0 2
10023: PUSH
10024: LD_VAR 0 3
10028: MINUS
10029: ST_TO_ADDR
10030: GO 10054
// length := ( array - i_to ) + i_from ;
10032: LD_ADDR_VAR 0 11
10036: PUSH
10037: LD_VAR 0 1
10041: PUSH
10042: LD_VAR 0 3
10046: MINUS
10047: PUSH
10048: LD_VAR 0 2
10052: PLUS
10053: ST_TO_ADDR
// end ; if not length then
10054: LD_VAR 0 11
10058: NOT
10059: IFFALSE 10063
// exit ;
10061: GO 10221
// tmp := array ;
10063: LD_ADDR_VAR 0 10
10067: PUSH
10068: LD_VAR 0 1
10072: ST_TO_ADDR
// for i = 1 to length do
10073: LD_ADDR_VAR 0 6
10077: PUSH
10078: DOUBLE
10079: LD_INT 1
10081: DEC
10082: ST_TO_ADDR
10083: LD_VAR 0 11
10087: PUSH
10088: FOR_TO
10089: IFFALSE 10209
// begin for j = 1 to array do
10091: LD_ADDR_VAR 0 7
10095: PUSH
10096: DOUBLE
10097: LD_INT 1
10099: DEC
10100: ST_TO_ADDR
10101: LD_VAR 0 1
10105: PUSH
10106: FOR_TO
10107: IFFALSE 10195
// begin k := j + d ;
10109: LD_ADDR_VAR 0 8
10113: PUSH
10114: LD_VAR 0 7
10118: PUSH
10119: LD_VAR 0 9
10123: PLUS
10124: ST_TO_ADDR
// if k > array then
10125: LD_VAR 0 8
10129: PUSH
10130: LD_VAR 0 1
10134: GREATER
10135: IFFALSE 10145
// k := 1 ;
10137: LD_ADDR_VAR 0 8
10141: PUSH
10142: LD_INT 1
10144: ST_TO_ADDR
// if not k then
10145: LD_VAR 0 8
10149: NOT
10150: IFFALSE 10162
// k := array ;
10152: LD_ADDR_VAR 0 8
10156: PUSH
10157: LD_VAR 0 1
10161: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
10162: LD_ADDR_VAR 0 10
10166: PUSH
10167: LD_VAR 0 10
10171: PPUSH
10172: LD_VAR 0 8
10176: PPUSH
10177: LD_VAR 0 1
10181: PUSH
10182: LD_VAR 0 7
10186: ARRAY
10187: PPUSH
10188: CALL_OW 1
10192: ST_TO_ADDR
// end ;
10193: GO 10106
10195: POP
10196: POP
// array := tmp ;
10197: LD_ADDR_VAR 0 1
10201: PUSH
10202: LD_VAR 0 10
10206: ST_TO_ADDR
// end ;
10207: GO 10088
10209: POP
10210: POP
// result := array ;
10211: LD_ADDR_VAR 0 5
10215: PUSH
10216: LD_VAR 0 1
10220: ST_TO_ADDR
// end ;
10221: LD_VAR 0 5
10225: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
10226: LD_INT 0
10228: PPUSH
10229: PPUSH
// result := 0 ;
10230: LD_ADDR_VAR 0 3
10234: PUSH
10235: LD_INT 0
10237: ST_TO_ADDR
// if not array or not value in array then
10238: LD_VAR 0 1
10242: NOT
10243: PUSH
10244: LD_VAR 0 2
10248: PUSH
10249: LD_VAR 0 1
10253: IN
10254: NOT
10255: OR
10256: IFFALSE 10260
// exit ;
10258: GO 10314
// for i = 1 to array do
10260: LD_ADDR_VAR 0 4
10264: PUSH
10265: DOUBLE
10266: LD_INT 1
10268: DEC
10269: ST_TO_ADDR
10270: LD_VAR 0 1
10274: PUSH
10275: FOR_TO
10276: IFFALSE 10312
// if value = array [ i ] then
10278: LD_VAR 0 2
10282: PUSH
10283: LD_VAR 0 1
10287: PUSH
10288: LD_VAR 0 4
10292: ARRAY
10293: EQUAL
10294: IFFALSE 10310
// begin result := i ;
10296: LD_ADDR_VAR 0 3
10300: PUSH
10301: LD_VAR 0 4
10305: ST_TO_ADDR
// exit ;
10306: POP
10307: POP
10308: GO 10314
// end ;
10310: GO 10275
10312: POP
10313: POP
// end ;
10314: LD_VAR 0 3
10318: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
10319: LD_INT 0
10321: PPUSH
// vc_chassis := chassis ;
10322: LD_ADDR_OWVAR 37
10326: PUSH
10327: LD_VAR 0 1
10331: ST_TO_ADDR
// vc_engine := engine ;
10332: LD_ADDR_OWVAR 39
10336: PUSH
10337: LD_VAR 0 2
10341: ST_TO_ADDR
// vc_control := control ;
10342: LD_ADDR_OWVAR 38
10346: PUSH
10347: LD_VAR 0 3
10351: ST_TO_ADDR
// vc_weapon := weapon ;
10352: LD_ADDR_OWVAR 40
10356: PUSH
10357: LD_VAR 0 4
10361: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10362: LD_ADDR_OWVAR 41
10366: PUSH
10367: LD_VAR 0 5
10371: ST_TO_ADDR
// end ;
10372: LD_VAR 0 6
10376: RET
// export function WantPlant ( unit ) ; var task ; begin
10377: LD_INT 0
10379: PPUSH
10380: PPUSH
// result := false ;
10381: LD_ADDR_VAR 0 2
10385: PUSH
10386: LD_INT 0
10388: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
10389: LD_ADDR_VAR 0 3
10393: PUSH
10394: LD_VAR 0 1
10398: PPUSH
10399: CALL_OW 437
10403: ST_TO_ADDR
// if task then
10404: LD_VAR 0 3
10408: IFFALSE 10436
// if task [ 1 ] [ 1 ] = p then
10410: LD_VAR 0 3
10414: PUSH
10415: LD_INT 1
10417: ARRAY
10418: PUSH
10419: LD_INT 1
10421: ARRAY
10422: PUSH
10423: LD_STRING p
10425: EQUAL
10426: IFFALSE 10436
// result := true ;
10428: LD_ADDR_VAR 0 2
10432: PUSH
10433: LD_INT 1
10435: ST_TO_ADDR
// end ;
10436: LD_VAR 0 2
10440: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
10441: LD_INT 0
10443: PPUSH
10444: PPUSH
10445: PPUSH
10446: PPUSH
// if pos < 1 then
10447: LD_VAR 0 2
10451: PUSH
10452: LD_INT 1
10454: LESS
10455: IFFALSE 10459
// exit ;
10457: GO 10762
// if pos = 1 then
10459: LD_VAR 0 2
10463: PUSH
10464: LD_INT 1
10466: EQUAL
10467: IFFALSE 10500
// result := Replace ( arr , pos [ 1 ] , value ) else
10469: LD_ADDR_VAR 0 4
10473: PUSH
10474: LD_VAR 0 1
10478: PPUSH
10479: LD_VAR 0 2
10483: PUSH
10484: LD_INT 1
10486: ARRAY
10487: PPUSH
10488: LD_VAR 0 3
10492: PPUSH
10493: CALL_OW 1
10497: ST_TO_ADDR
10498: GO 10762
// begin tmp := arr ;
10500: LD_ADDR_VAR 0 6
10504: PUSH
10505: LD_VAR 0 1
10509: ST_TO_ADDR
// s_arr := [ tmp ] ;
10510: LD_ADDR_VAR 0 7
10514: PUSH
10515: LD_VAR 0 6
10519: PUSH
10520: EMPTY
10521: LIST
10522: ST_TO_ADDR
// for i = 1 to pos - 1 do
10523: LD_ADDR_VAR 0 5
10527: PUSH
10528: DOUBLE
10529: LD_INT 1
10531: DEC
10532: ST_TO_ADDR
10533: LD_VAR 0 2
10537: PUSH
10538: LD_INT 1
10540: MINUS
10541: PUSH
10542: FOR_TO
10543: IFFALSE 10588
// begin tmp := tmp [ pos [ i ] ] ;
10545: LD_ADDR_VAR 0 6
10549: PUSH
10550: LD_VAR 0 6
10554: PUSH
10555: LD_VAR 0 2
10559: PUSH
10560: LD_VAR 0 5
10564: ARRAY
10565: ARRAY
10566: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
10567: LD_ADDR_VAR 0 7
10571: PUSH
10572: LD_VAR 0 7
10576: PUSH
10577: LD_VAR 0 6
10581: PUSH
10582: EMPTY
10583: LIST
10584: ADD
10585: ST_TO_ADDR
// end ;
10586: GO 10542
10588: POP
10589: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
10590: LD_ADDR_VAR 0 6
10594: PUSH
10595: LD_VAR 0 6
10599: PPUSH
10600: LD_VAR 0 2
10604: PUSH
10605: LD_VAR 0 2
10609: ARRAY
10610: PPUSH
10611: LD_VAR 0 3
10615: PPUSH
10616: CALL_OW 1
10620: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
10621: LD_ADDR_VAR 0 7
10625: PUSH
10626: LD_VAR 0 7
10630: PPUSH
10631: LD_VAR 0 7
10635: PPUSH
10636: LD_VAR 0 6
10640: PPUSH
10641: CALL_OW 1
10645: ST_TO_ADDR
// for i = s_arr downto 2 do
10646: LD_ADDR_VAR 0 5
10650: PUSH
10651: DOUBLE
10652: LD_VAR 0 7
10656: INC
10657: ST_TO_ADDR
10658: LD_INT 2
10660: PUSH
10661: FOR_DOWNTO
10662: IFFALSE 10746
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
10664: LD_ADDR_VAR 0 6
10668: PUSH
10669: LD_VAR 0 7
10673: PUSH
10674: LD_VAR 0 5
10678: PUSH
10679: LD_INT 1
10681: MINUS
10682: ARRAY
10683: PPUSH
10684: LD_VAR 0 2
10688: PUSH
10689: LD_VAR 0 5
10693: PUSH
10694: LD_INT 1
10696: MINUS
10697: ARRAY
10698: PPUSH
10699: LD_VAR 0 7
10703: PUSH
10704: LD_VAR 0 5
10708: ARRAY
10709: PPUSH
10710: CALL_OW 1
10714: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
10715: LD_ADDR_VAR 0 7
10719: PUSH
10720: LD_VAR 0 7
10724: PPUSH
10725: LD_VAR 0 5
10729: PUSH
10730: LD_INT 1
10732: MINUS
10733: PPUSH
10734: LD_VAR 0 6
10738: PPUSH
10739: CALL_OW 1
10743: ST_TO_ADDR
// end ;
10744: GO 10661
10746: POP
10747: POP
// result := s_arr [ 1 ] ;
10748: LD_ADDR_VAR 0 4
10752: PUSH
10753: LD_VAR 0 7
10757: PUSH
10758: LD_INT 1
10760: ARRAY
10761: ST_TO_ADDR
// end ; end ;
10762: LD_VAR 0 4
10766: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
10767: LD_INT 0
10769: PPUSH
10770: PPUSH
// if not list then
10771: LD_VAR 0 1
10775: NOT
10776: IFFALSE 10780
// exit ;
10778: GO 10871
// i := list [ pos1 ] ;
10780: LD_ADDR_VAR 0 5
10784: PUSH
10785: LD_VAR 0 1
10789: PUSH
10790: LD_VAR 0 2
10794: ARRAY
10795: ST_TO_ADDR
// if not i then
10796: LD_VAR 0 5
10800: NOT
10801: IFFALSE 10805
// exit ;
10803: GO 10871
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
10805: LD_ADDR_VAR 0 1
10809: PUSH
10810: LD_VAR 0 1
10814: PPUSH
10815: LD_VAR 0 2
10819: PPUSH
10820: LD_VAR 0 1
10824: PUSH
10825: LD_VAR 0 3
10829: ARRAY
10830: PPUSH
10831: CALL_OW 1
10835: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
10836: LD_ADDR_VAR 0 1
10840: PUSH
10841: LD_VAR 0 1
10845: PPUSH
10846: LD_VAR 0 3
10850: PPUSH
10851: LD_VAR 0 5
10855: PPUSH
10856: CALL_OW 1
10860: ST_TO_ADDR
// result := list ;
10861: LD_ADDR_VAR 0 4
10865: PUSH
10866: LD_VAR 0 1
10870: ST_TO_ADDR
// end ;
10871: LD_VAR 0 4
10875: RET
// export function Add ( list , pos , val ) ; begin
10876: LD_INT 0
10878: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
10879: LD_ADDR_VAR 0 4
10883: PUSH
10884: LD_VAR 0 1
10888: PPUSH
10889: LD_VAR 0 2
10893: PPUSH
10894: LD_VAR 0 3
10898: PPUSH
10899: CALL 10441 0 3
10903: ST_TO_ADDR
10904: LD_VAR 0 4
10908: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
10909: LD_INT 0
10911: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
10912: LD_ADDR_VAR 0 5
10916: PUSH
10917: LD_VAR 0 1
10921: PPUSH
10922: CALL_OW 250
10926: PPUSH
10927: LD_VAR 0 1
10931: PPUSH
10932: CALL_OW 251
10936: PPUSH
10937: LD_VAR 0 2
10941: PPUSH
10942: LD_VAR 0 3
10946: PPUSH
10947: LD_VAR 0 4
10951: PPUSH
10952: CALL 10962 0 5
10956: ST_TO_ADDR
// end ;
10957: LD_VAR 0 5
10961: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
10962: LD_INT 0
10964: PPUSH
10965: PPUSH
10966: PPUSH
10967: PPUSH
// if not list then
10968: LD_VAR 0 3
10972: NOT
10973: IFFALSE 10977
// exit ;
10975: GO 11365
// result := [ ] ;
10977: LD_ADDR_VAR 0 6
10981: PUSH
10982: EMPTY
10983: ST_TO_ADDR
// for i in list do
10984: LD_ADDR_VAR 0 7
10988: PUSH
10989: LD_VAR 0 3
10993: PUSH
10994: FOR_IN
10995: IFFALSE 11197
// begin tmp := GetDistUnitXY ( i , x , y ) ;
10997: LD_ADDR_VAR 0 9
11001: PUSH
11002: LD_VAR 0 7
11006: PPUSH
11007: LD_VAR 0 1
11011: PPUSH
11012: LD_VAR 0 2
11016: PPUSH
11017: CALL_OW 297
11021: ST_TO_ADDR
// if not result then
11022: LD_VAR 0 6
11026: NOT
11027: IFFALSE 11053
// result := [ [ i , tmp ] ] else
11029: LD_ADDR_VAR 0 6
11033: PUSH
11034: LD_VAR 0 7
11038: PUSH
11039: LD_VAR 0 9
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: EMPTY
11049: LIST
11050: ST_TO_ADDR
11051: GO 11195
// begin if result [ result ] [ 2 ] < tmp then
11053: LD_VAR 0 6
11057: PUSH
11058: LD_VAR 0 6
11062: ARRAY
11063: PUSH
11064: LD_INT 2
11066: ARRAY
11067: PUSH
11068: LD_VAR 0 9
11072: LESS
11073: IFFALSE 11115
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
11075: LD_ADDR_VAR 0 6
11079: PUSH
11080: LD_VAR 0 6
11084: PPUSH
11085: LD_VAR 0 6
11089: PUSH
11090: LD_INT 1
11092: PLUS
11093: PPUSH
11094: LD_VAR 0 7
11098: PUSH
11099: LD_VAR 0 9
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PPUSH
11108: CALL_OW 2
11112: ST_TO_ADDR
11113: GO 11195
// for j = 1 to result do
11115: LD_ADDR_VAR 0 8
11119: PUSH
11120: DOUBLE
11121: LD_INT 1
11123: DEC
11124: ST_TO_ADDR
11125: LD_VAR 0 6
11129: PUSH
11130: FOR_TO
11131: IFFALSE 11193
// begin if tmp < result [ j ] [ 2 ] then
11133: LD_VAR 0 9
11137: PUSH
11138: LD_VAR 0 6
11142: PUSH
11143: LD_VAR 0 8
11147: ARRAY
11148: PUSH
11149: LD_INT 2
11151: ARRAY
11152: LESS
11153: IFFALSE 11191
// begin result := Insert ( result , j , [ i , tmp ] ) ;
11155: LD_ADDR_VAR 0 6
11159: PUSH
11160: LD_VAR 0 6
11164: PPUSH
11165: LD_VAR 0 8
11169: PPUSH
11170: LD_VAR 0 7
11174: PUSH
11175: LD_VAR 0 9
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PPUSH
11184: CALL_OW 2
11188: ST_TO_ADDR
// break ;
11189: GO 11193
// end ; end ;
11191: GO 11130
11193: POP
11194: POP
// end ; end ;
11195: GO 10994
11197: POP
11198: POP
// if result and not asc then
11199: LD_VAR 0 6
11203: PUSH
11204: LD_VAR 0 4
11208: NOT
11209: AND
11210: IFFALSE 11285
// begin tmp := result ;
11212: LD_ADDR_VAR 0 9
11216: PUSH
11217: LD_VAR 0 6
11221: ST_TO_ADDR
// for i = tmp downto 1 do
11222: LD_ADDR_VAR 0 7
11226: PUSH
11227: DOUBLE
11228: LD_VAR 0 9
11232: INC
11233: ST_TO_ADDR
11234: LD_INT 1
11236: PUSH
11237: FOR_DOWNTO
11238: IFFALSE 11283
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
11240: LD_ADDR_VAR 0 6
11244: PUSH
11245: LD_VAR 0 6
11249: PPUSH
11250: LD_VAR 0 9
11254: PUSH
11255: LD_VAR 0 7
11259: MINUS
11260: PUSH
11261: LD_INT 1
11263: PLUS
11264: PPUSH
11265: LD_VAR 0 9
11269: PUSH
11270: LD_VAR 0 7
11274: ARRAY
11275: PPUSH
11276: CALL_OW 1
11280: ST_TO_ADDR
11281: GO 11237
11283: POP
11284: POP
// end ; tmp := [ ] ;
11285: LD_ADDR_VAR 0 9
11289: PUSH
11290: EMPTY
11291: ST_TO_ADDR
// if mode then
11292: LD_VAR 0 5
11296: IFFALSE 11365
// begin for i = 1 to result do
11298: LD_ADDR_VAR 0 7
11302: PUSH
11303: DOUBLE
11304: LD_INT 1
11306: DEC
11307: ST_TO_ADDR
11308: LD_VAR 0 6
11312: PUSH
11313: FOR_TO
11314: IFFALSE 11353
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
11316: LD_ADDR_VAR 0 9
11320: PUSH
11321: LD_VAR 0 9
11325: PPUSH
11326: LD_VAR 0 7
11330: PPUSH
11331: LD_VAR 0 6
11335: PUSH
11336: LD_VAR 0 7
11340: ARRAY
11341: PUSH
11342: LD_INT 1
11344: ARRAY
11345: PPUSH
11346: CALL_OW 1
11350: ST_TO_ADDR
11351: GO 11313
11353: POP
11354: POP
// result := tmp ;
11355: LD_ADDR_VAR 0 6
11359: PUSH
11360: LD_VAR 0 9
11364: ST_TO_ADDR
// end ; end ;
11365: LD_VAR 0 6
11369: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
11370: LD_INT 0
11372: PPUSH
11373: PPUSH
11374: PPUSH
11375: PPUSH
11376: PPUSH
11377: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
11378: LD_ADDR_VAR 0 5
11382: PUSH
11383: LD_INT 0
11385: PUSH
11386: LD_INT 0
11388: PUSH
11389: LD_INT 0
11391: PUSH
11392: EMPTY
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: ST_TO_ADDR
// if not x or not y then
11400: LD_VAR 0 2
11404: NOT
11405: PUSH
11406: LD_VAR 0 3
11410: NOT
11411: OR
11412: IFFALSE 11416
// exit ;
11414: GO 13062
// if not range then
11416: LD_VAR 0 4
11420: NOT
11421: IFFALSE 11431
// range := 10 ;
11423: LD_ADDR_VAR 0 4
11427: PUSH
11428: LD_INT 10
11430: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11431: LD_ADDR_VAR 0 8
11435: PUSH
11436: LD_INT 81
11438: PUSH
11439: LD_VAR 0 1
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 92
11450: PUSH
11451: LD_VAR 0 2
11455: PUSH
11456: LD_VAR 0 3
11460: PUSH
11461: LD_VAR 0 4
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 3
11474: PUSH
11475: LD_INT 21
11477: PUSH
11478: LD_INT 3
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: PPUSH
11494: CALL_OW 69
11498: ST_TO_ADDR
// if not tmp then
11499: LD_VAR 0 8
11503: NOT
11504: IFFALSE 11508
// exit ;
11506: GO 13062
// for i in tmp do
11508: LD_ADDR_VAR 0 6
11512: PUSH
11513: LD_VAR 0 8
11517: PUSH
11518: FOR_IN
11519: IFFALSE 13037
// begin points := [ 0 , 0 , 0 ] ;
11521: LD_ADDR_VAR 0 9
11525: PUSH
11526: LD_INT 0
11528: PUSH
11529: LD_INT 0
11531: PUSH
11532: LD_INT 0
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: LIST
11539: ST_TO_ADDR
// bpoints := 1 ;
11540: LD_ADDR_VAR 0 10
11544: PUSH
11545: LD_INT 1
11547: ST_TO_ADDR
// case GetType ( i ) of unit_human :
11548: LD_VAR 0 6
11552: PPUSH
11553: CALL_OW 247
11557: PUSH
11558: LD_INT 1
11560: DOUBLE
11561: EQUAL
11562: IFTRUE 11566
11564: GO 12144
11566: POP
// begin if GetClass ( i ) = 1 then
11567: LD_VAR 0 6
11571: PPUSH
11572: CALL_OW 257
11576: PUSH
11577: LD_INT 1
11579: EQUAL
11580: IFFALSE 11601
// points := [ 10 , 5 , 3 ] ;
11582: LD_ADDR_VAR 0 9
11586: PUSH
11587: LD_INT 10
11589: PUSH
11590: LD_INT 5
11592: PUSH
11593: LD_INT 3
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: LIST
11600: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
11601: LD_VAR 0 6
11605: PPUSH
11606: CALL_OW 257
11610: PUSH
11611: LD_INT 2
11613: PUSH
11614: LD_INT 3
11616: PUSH
11617: LD_INT 4
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: LIST
11624: IN
11625: IFFALSE 11646
// points := [ 3 , 2 , 1 ] ;
11627: LD_ADDR_VAR 0 9
11631: PUSH
11632: LD_INT 3
11634: PUSH
11635: LD_INT 2
11637: PUSH
11638: LD_INT 1
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: LIST
11645: ST_TO_ADDR
// if GetClass ( i ) = 5 then
11646: LD_VAR 0 6
11650: PPUSH
11651: CALL_OW 257
11655: PUSH
11656: LD_INT 5
11658: EQUAL
11659: IFFALSE 11680
// points := [ 130 , 5 , 2 ] ;
11661: LD_ADDR_VAR 0 9
11665: PUSH
11666: LD_INT 130
11668: PUSH
11669: LD_INT 5
11671: PUSH
11672: LD_INT 2
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: LIST
11679: ST_TO_ADDR
// if GetClass ( i ) = 8 then
11680: LD_VAR 0 6
11684: PPUSH
11685: CALL_OW 257
11689: PUSH
11690: LD_INT 8
11692: EQUAL
11693: IFFALSE 11714
// points := [ 35 , 35 , 30 ] ;
11695: LD_ADDR_VAR 0 9
11699: PUSH
11700: LD_INT 35
11702: PUSH
11703: LD_INT 35
11705: PUSH
11706: LD_INT 30
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: LIST
11713: ST_TO_ADDR
// if GetClass ( i ) = 9 then
11714: LD_VAR 0 6
11718: PPUSH
11719: CALL_OW 257
11723: PUSH
11724: LD_INT 9
11726: EQUAL
11727: IFFALSE 11748
// points := [ 20 , 55 , 40 ] ;
11729: LD_ADDR_VAR 0 9
11733: PUSH
11734: LD_INT 20
11736: PUSH
11737: LD_INT 55
11739: PUSH
11740: LD_INT 40
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: LIST
11747: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
11748: LD_VAR 0 6
11752: PPUSH
11753: CALL_OW 257
11757: PUSH
11758: LD_INT 12
11760: PUSH
11761: LD_INT 16
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: IN
11768: IFFALSE 11789
// points := [ 5 , 3 , 2 ] ;
11770: LD_ADDR_VAR 0 9
11774: PUSH
11775: LD_INT 5
11777: PUSH
11778: LD_INT 3
11780: PUSH
11781: LD_INT 2
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: LIST
11788: ST_TO_ADDR
// if GetClass ( i ) = 17 then
11789: LD_VAR 0 6
11793: PPUSH
11794: CALL_OW 257
11798: PUSH
11799: LD_INT 17
11801: EQUAL
11802: IFFALSE 11823
// points := [ 100 , 50 , 75 ] ;
11804: LD_ADDR_VAR 0 9
11808: PUSH
11809: LD_INT 100
11811: PUSH
11812: LD_INT 50
11814: PUSH
11815: LD_INT 75
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: LIST
11822: ST_TO_ADDR
// if GetClass ( i ) = 15 then
11823: LD_VAR 0 6
11827: PPUSH
11828: CALL_OW 257
11832: PUSH
11833: LD_INT 15
11835: EQUAL
11836: IFFALSE 11857
// points := [ 10 , 5 , 3 ] ;
11838: LD_ADDR_VAR 0 9
11842: PUSH
11843: LD_INT 10
11845: PUSH
11846: LD_INT 5
11848: PUSH
11849: LD_INT 3
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: LIST
11856: ST_TO_ADDR
// if GetClass ( i ) = 14 then
11857: LD_VAR 0 6
11861: PPUSH
11862: CALL_OW 257
11866: PUSH
11867: LD_INT 14
11869: EQUAL
11870: IFFALSE 11891
// points := [ 10 , 0 , 0 ] ;
11872: LD_ADDR_VAR 0 9
11876: PUSH
11877: LD_INT 10
11879: PUSH
11880: LD_INT 0
11882: PUSH
11883: LD_INT 0
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: ST_TO_ADDR
// if GetClass ( i ) = 11 then
11891: LD_VAR 0 6
11895: PPUSH
11896: CALL_OW 257
11900: PUSH
11901: LD_INT 11
11903: EQUAL
11904: IFFALSE 11925
// points := [ 30 , 10 , 5 ] ;
11906: LD_ADDR_VAR 0 9
11910: PUSH
11911: LD_INT 30
11913: PUSH
11914: LD_INT 10
11916: PUSH
11917: LD_INT 5
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: LIST
11924: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
11925: LD_VAR 0 1
11929: PPUSH
11930: LD_INT 5
11932: PPUSH
11933: CALL_OW 321
11937: PUSH
11938: LD_INT 2
11940: EQUAL
11941: IFFALSE 11958
// bpoints := bpoints * 1.8 ;
11943: LD_ADDR_VAR 0 10
11947: PUSH
11948: LD_VAR 0 10
11952: PUSH
11953: LD_REAL  1.80000000000000E+0000
11956: MUL
11957: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
11958: LD_VAR 0 6
11962: PPUSH
11963: CALL_OW 257
11967: PUSH
11968: LD_INT 1
11970: PUSH
11971: LD_INT 2
11973: PUSH
11974: LD_INT 3
11976: PUSH
11977: LD_INT 4
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: IN
11986: PUSH
11987: LD_VAR 0 1
11991: PPUSH
11992: LD_INT 51
11994: PPUSH
11995: CALL_OW 321
11999: PUSH
12000: LD_INT 2
12002: EQUAL
12003: AND
12004: IFFALSE 12021
// bpoints := bpoints * 1.2 ;
12006: LD_ADDR_VAR 0 10
12010: PUSH
12011: LD_VAR 0 10
12015: PUSH
12016: LD_REAL  1.20000000000000E+0000
12019: MUL
12020: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
12021: LD_VAR 0 6
12025: PPUSH
12026: CALL_OW 257
12030: PUSH
12031: LD_INT 5
12033: PUSH
12034: LD_INT 7
12036: PUSH
12037: LD_INT 9
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: LIST
12044: IN
12045: PUSH
12046: LD_VAR 0 1
12050: PPUSH
12051: LD_INT 52
12053: PPUSH
12054: CALL_OW 321
12058: PUSH
12059: LD_INT 2
12061: EQUAL
12062: AND
12063: IFFALSE 12080
// bpoints := bpoints * 1.5 ;
12065: LD_ADDR_VAR 0 10
12069: PUSH
12070: LD_VAR 0 10
12074: PUSH
12075: LD_REAL  1.50000000000000E+0000
12078: MUL
12079: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
12080: LD_VAR 0 1
12084: PPUSH
12085: LD_INT 66
12087: PPUSH
12088: CALL_OW 321
12092: PUSH
12093: LD_INT 2
12095: EQUAL
12096: IFFALSE 12113
// bpoints := bpoints * 1.1 ;
12098: LD_ADDR_VAR 0 10
12102: PUSH
12103: LD_VAR 0 10
12107: PUSH
12108: LD_REAL  1.10000000000000E+0000
12111: MUL
12112: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
12113: LD_ADDR_VAR 0 10
12117: PUSH
12118: LD_VAR 0 10
12122: PUSH
12123: LD_VAR 0 6
12127: PPUSH
12128: LD_INT 1
12130: PPUSH
12131: CALL_OW 259
12135: PUSH
12136: LD_REAL  1.15000000000000E+0000
12139: MUL
12140: MUL
12141: ST_TO_ADDR
// end ; unit_vehicle :
12142: GO 12966
12144: LD_INT 2
12146: DOUBLE
12147: EQUAL
12148: IFTRUE 12152
12150: GO 12954
12152: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
12153: LD_VAR 0 6
12157: PPUSH
12158: CALL_OW 264
12162: PUSH
12163: LD_INT 2
12165: PUSH
12166: LD_INT 42
12168: PUSH
12169: LD_INT 24
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: IN
12177: IFFALSE 12198
// points := [ 25 , 5 , 3 ] ;
12179: LD_ADDR_VAR 0 9
12183: PUSH
12184: LD_INT 25
12186: PUSH
12187: LD_INT 5
12189: PUSH
12190: LD_INT 3
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: LIST
12197: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
12198: LD_VAR 0 6
12202: PPUSH
12203: CALL_OW 264
12207: PUSH
12208: LD_INT 4
12210: PUSH
12211: LD_INT 43
12213: PUSH
12214: LD_INT 25
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: LIST
12221: IN
12222: IFFALSE 12243
// points := [ 40 , 15 , 5 ] ;
12224: LD_ADDR_VAR 0 9
12228: PUSH
12229: LD_INT 40
12231: PUSH
12232: LD_INT 15
12234: PUSH
12235: LD_INT 5
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
12243: LD_VAR 0 6
12247: PPUSH
12248: CALL_OW 264
12252: PUSH
12253: LD_INT 3
12255: PUSH
12256: LD_INT 23
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: IN
12263: IFFALSE 12284
// points := [ 7 , 25 , 8 ] ;
12265: LD_ADDR_VAR 0 9
12269: PUSH
12270: LD_INT 7
12272: PUSH
12273: LD_INT 25
12275: PUSH
12276: LD_INT 8
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: LIST
12283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
12284: LD_VAR 0 6
12288: PPUSH
12289: CALL_OW 264
12293: PUSH
12294: LD_INT 5
12296: PUSH
12297: LD_INT 27
12299: PUSH
12300: LD_INT 44
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: LIST
12307: IN
12308: IFFALSE 12329
// points := [ 14 , 50 , 16 ] ;
12310: LD_ADDR_VAR 0 9
12314: PUSH
12315: LD_INT 14
12317: PUSH
12318: LD_INT 50
12320: PUSH
12321: LD_INT 16
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
12329: LD_VAR 0 6
12333: PPUSH
12334: CALL_OW 264
12338: PUSH
12339: LD_INT 6
12341: PUSH
12342: LD_INT 46
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: IN
12349: IFFALSE 12370
// points := [ 32 , 120 , 70 ] ;
12351: LD_ADDR_VAR 0 9
12355: PUSH
12356: LD_INT 32
12358: PUSH
12359: LD_INT 120
12361: PUSH
12362: LD_INT 70
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: LIST
12369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
12370: LD_VAR 0 6
12374: PPUSH
12375: CALL_OW 264
12379: PUSH
12380: LD_INT 7
12382: PUSH
12383: LD_INT 28
12385: PUSH
12386: LD_INT 45
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: LIST
12393: IN
12394: IFFALSE 12415
// points := [ 35 , 20 , 45 ] ;
12396: LD_ADDR_VAR 0 9
12400: PUSH
12401: LD_INT 35
12403: PUSH
12404: LD_INT 20
12406: PUSH
12407: LD_INT 45
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: LIST
12414: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
12415: LD_VAR 0 6
12419: PPUSH
12420: CALL_OW 264
12424: PUSH
12425: LD_INT 47
12427: PUSH
12428: EMPTY
12429: LIST
12430: IN
12431: IFFALSE 12452
// points := [ 67 , 45 , 75 ] ;
12433: LD_ADDR_VAR 0 9
12437: PUSH
12438: LD_INT 67
12440: PUSH
12441: LD_INT 45
12443: PUSH
12444: LD_INT 75
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
12452: LD_VAR 0 6
12456: PPUSH
12457: CALL_OW 264
12461: PUSH
12462: LD_INT 26
12464: PUSH
12465: EMPTY
12466: LIST
12467: IN
12468: IFFALSE 12489
// points := [ 120 , 30 , 80 ] ;
12470: LD_ADDR_VAR 0 9
12474: PUSH
12475: LD_INT 120
12477: PUSH
12478: LD_INT 30
12480: PUSH
12481: LD_INT 80
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: LIST
12488: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
12489: LD_VAR 0 6
12493: PPUSH
12494: CALL_OW 264
12498: PUSH
12499: LD_INT 22
12501: PUSH
12502: EMPTY
12503: LIST
12504: IN
12505: IFFALSE 12526
// points := [ 40 , 1 , 1 ] ;
12507: LD_ADDR_VAR 0 9
12511: PUSH
12512: LD_INT 40
12514: PUSH
12515: LD_INT 1
12517: PUSH
12518: LD_INT 1
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: LIST
12525: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
12526: LD_VAR 0 6
12530: PPUSH
12531: CALL_OW 264
12535: PUSH
12536: LD_INT 29
12538: PUSH
12539: EMPTY
12540: LIST
12541: IN
12542: IFFALSE 12563
// points := [ 70 , 200 , 400 ] ;
12544: LD_ADDR_VAR 0 9
12548: PUSH
12549: LD_INT 70
12551: PUSH
12552: LD_INT 200
12554: PUSH
12555: LD_INT 400
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: LIST
12562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
12563: LD_VAR 0 6
12567: PPUSH
12568: CALL_OW 264
12572: PUSH
12573: LD_INT 14
12575: PUSH
12576: LD_INT 53
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: IN
12583: IFFALSE 12604
// points := [ 40 , 10 , 20 ] ;
12585: LD_ADDR_VAR 0 9
12589: PUSH
12590: LD_INT 40
12592: PUSH
12593: LD_INT 10
12595: PUSH
12596: LD_INT 20
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: LIST
12603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
12604: LD_VAR 0 6
12608: PPUSH
12609: CALL_OW 264
12613: PUSH
12614: LD_INT 9
12616: PUSH
12617: EMPTY
12618: LIST
12619: IN
12620: IFFALSE 12641
// points := [ 5 , 70 , 20 ] ;
12622: LD_ADDR_VAR 0 9
12626: PUSH
12627: LD_INT 5
12629: PUSH
12630: LD_INT 70
12632: PUSH
12633: LD_INT 20
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
12641: LD_VAR 0 6
12645: PPUSH
12646: CALL_OW 264
12650: PUSH
12651: LD_INT 10
12653: PUSH
12654: EMPTY
12655: LIST
12656: IN
12657: IFFALSE 12678
// points := [ 35 , 110 , 70 ] ;
12659: LD_ADDR_VAR 0 9
12663: PUSH
12664: LD_INT 35
12666: PUSH
12667: LD_INT 110
12669: PUSH
12670: LD_INT 70
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: LIST
12677: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
12678: LD_VAR 0 6
12682: PPUSH
12683: CALL_OW 265
12687: PUSH
12688: LD_INT 25
12690: EQUAL
12691: IFFALSE 12712
// points := [ 80 , 65 , 100 ] ;
12693: LD_ADDR_VAR 0 9
12697: PUSH
12698: LD_INT 80
12700: PUSH
12701: LD_INT 65
12703: PUSH
12704: LD_INT 100
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: LIST
12711: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
12712: LD_VAR 0 6
12716: PPUSH
12717: CALL_OW 263
12721: PUSH
12722: LD_INT 1
12724: EQUAL
12725: IFFALSE 12760
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
12727: LD_ADDR_VAR 0 10
12731: PUSH
12732: LD_VAR 0 10
12736: PUSH
12737: LD_VAR 0 6
12741: PPUSH
12742: CALL_OW 311
12746: PPUSH
12747: LD_INT 3
12749: PPUSH
12750: CALL_OW 259
12754: PUSH
12755: LD_INT 4
12757: MUL
12758: MUL
12759: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
12760: LD_VAR 0 6
12764: PPUSH
12765: CALL_OW 263
12769: PUSH
12770: LD_INT 2
12772: EQUAL
12773: IFFALSE 12824
// begin j := IsControledBy ( i ) ;
12775: LD_ADDR_VAR 0 7
12779: PUSH
12780: LD_VAR 0 6
12784: PPUSH
12785: CALL_OW 312
12789: ST_TO_ADDR
// if j then
12790: LD_VAR 0 7
12794: IFFALSE 12824
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
12796: LD_ADDR_VAR 0 10
12800: PUSH
12801: LD_VAR 0 10
12805: PUSH
12806: LD_VAR 0 7
12810: PPUSH
12811: LD_INT 3
12813: PPUSH
12814: CALL_OW 259
12818: PUSH
12819: LD_INT 3
12821: MUL
12822: MUL
12823: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
12824: LD_VAR 0 6
12828: PPUSH
12829: CALL_OW 264
12833: PUSH
12834: LD_INT 5
12836: PUSH
12837: LD_INT 6
12839: PUSH
12840: LD_INT 46
12842: PUSH
12843: LD_INT 44
12845: PUSH
12846: LD_INT 47
12848: PUSH
12849: LD_INT 45
12851: PUSH
12852: LD_INT 28
12854: PUSH
12855: LD_INT 7
12857: PUSH
12858: LD_INT 27
12860: PUSH
12861: LD_INT 29
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: IN
12876: PUSH
12877: LD_VAR 0 1
12881: PPUSH
12882: LD_INT 52
12884: PPUSH
12885: CALL_OW 321
12889: PUSH
12890: LD_INT 2
12892: EQUAL
12893: AND
12894: IFFALSE 12911
// bpoints := bpoints * 1.2 ;
12896: LD_ADDR_VAR 0 10
12900: PUSH
12901: LD_VAR 0 10
12905: PUSH
12906: LD_REAL  1.20000000000000E+0000
12909: MUL
12910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
12911: LD_VAR 0 6
12915: PPUSH
12916: CALL_OW 264
12920: PUSH
12921: LD_INT 6
12923: PUSH
12924: LD_INT 46
12926: PUSH
12927: LD_INT 47
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: LIST
12934: IN
12935: IFFALSE 12952
// bpoints := bpoints * 1.2 ;
12937: LD_ADDR_VAR 0 10
12941: PUSH
12942: LD_VAR 0 10
12946: PUSH
12947: LD_REAL  1.20000000000000E+0000
12950: MUL
12951: ST_TO_ADDR
// end ; unit_building :
12952: GO 12966
12954: LD_INT 3
12956: DOUBLE
12957: EQUAL
12958: IFTRUE 12962
12960: GO 12965
12962: POP
// ; end ;
12963: GO 12966
12965: POP
// for j = 1 to 3 do
12966: LD_ADDR_VAR 0 7
12970: PUSH
12971: DOUBLE
12972: LD_INT 1
12974: DEC
12975: ST_TO_ADDR
12976: LD_INT 3
12978: PUSH
12979: FOR_TO
12980: IFFALSE 13033
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
12982: LD_ADDR_VAR 0 5
12986: PUSH
12987: LD_VAR 0 5
12991: PPUSH
12992: LD_VAR 0 7
12996: PPUSH
12997: LD_VAR 0 5
13001: PUSH
13002: LD_VAR 0 7
13006: ARRAY
13007: PUSH
13008: LD_VAR 0 9
13012: PUSH
13013: LD_VAR 0 7
13017: ARRAY
13018: PUSH
13019: LD_VAR 0 10
13023: MUL
13024: PLUS
13025: PPUSH
13026: CALL_OW 1
13030: ST_TO_ADDR
13031: GO 12979
13033: POP
13034: POP
// end ;
13035: GO 11518
13037: POP
13038: POP
// result := Replace ( result , 4 , tmp ) ;
13039: LD_ADDR_VAR 0 5
13043: PUSH
13044: LD_VAR 0 5
13048: PPUSH
13049: LD_INT 4
13051: PPUSH
13052: LD_VAR 0 8
13056: PPUSH
13057: CALL_OW 1
13061: ST_TO_ADDR
// end ;
13062: LD_VAR 0 5
13066: RET
// export function DangerAtRange ( unit , range ) ; begin
13067: LD_INT 0
13069: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
13070: LD_ADDR_VAR 0 3
13074: PUSH
13075: LD_VAR 0 1
13079: PPUSH
13080: CALL_OW 255
13084: PPUSH
13085: LD_VAR 0 1
13089: PPUSH
13090: CALL_OW 250
13094: PPUSH
13095: LD_VAR 0 1
13099: PPUSH
13100: CALL_OW 251
13104: PPUSH
13105: LD_VAR 0 2
13109: PPUSH
13110: CALL 11370 0 4
13114: ST_TO_ADDR
// end ;
13115: LD_VAR 0 3
13119: RET
// export function IsExtension ( b ) ; begin
13120: LD_INT 0
13122: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
13123: LD_ADDR_VAR 0 2
13127: PUSH
13128: LD_VAR 0 1
13132: PPUSH
13133: CALL_OW 266
13137: PUSH
13138: LD_INT 23
13140: PUSH
13141: LD_INT 20
13143: PUSH
13144: LD_INT 22
13146: PUSH
13147: LD_INT 17
13149: PUSH
13150: LD_INT 24
13152: PUSH
13153: LD_INT 21
13155: PUSH
13156: LD_INT 19
13158: PUSH
13159: LD_INT 16
13161: PUSH
13162: LD_INT 25
13164: PUSH
13165: LD_INT 18
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: IN
13180: ST_TO_ADDR
// end ;
13181: LD_VAR 0 2
13185: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
13186: LD_INT 0
13188: PPUSH
13189: PPUSH
13190: PPUSH
// result := [ ] ;
13191: LD_ADDR_VAR 0 2
13195: PUSH
13196: EMPTY
13197: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
13198: LD_ADDR_VAR 0 3
13202: PUSH
13203: LD_INT 21
13205: PUSH
13206: LD_INT 3
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PPUSH
13213: CALL_OW 69
13217: ST_TO_ADDR
// if not tmp then
13218: LD_VAR 0 3
13222: NOT
13223: IFFALSE 13227
// exit ;
13225: GO 13277
// for i in tmp do
13227: LD_ADDR_VAR 0 4
13231: PUSH
13232: LD_VAR 0 3
13236: PUSH
13237: FOR_IN
13238: IFFALSE 13275
// if GetBase ( i ) = base then
13240: LD_VAR 0 4
13244: PPUSH
13245: CALL_OW 274
13249: PUSH
13250: LD_VAR 0 1
13254: EQUAL
13255: IFFALSE 13273
// result := result ^ i ;
13257: LD_ADDR_VAR 0 2
13261: PUSH
13262: LD_VAR 0 2
13266: PUSH
13267: LD_VAR 0 4
13271: ADD
13272: ST_TO_ADDR
13273: GO 13237
13275: POP
13276: POP
// end ;
13277: LD_VAR 0 2
13281: RET
// export function ComComplete ( unit , b ) ; var i ; begin
13282: LD_INT 0
13284: PPUSH
13285: PPUSH
// if BuildingStatus ( b ) = bs_build then
13286: LD_VAR 0 2
13290: PPUSH
13291: CALL_OW 461
13295: PUSH
13296: LD_INT 1
13298: EQUAL
13299: IFFALSE 13359
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
13301: LD_VAR 0 1
13305: PPUSH
13306: LD_STRING h
13308: PUSH
13309: LD_VAR 0 2
13313: PPUSH
13314: CALL_OW 250
13318: PUSH
13319: LD_VAR 0 2
13323: PPUSH
13324: CALL_OW 251
13328: PUSH
13329: LD_VAR 0 2
13333: PUSH
13334: LD_INT 0
13336: PUSH
13337: LD_INT 0
13339: PUSH
13340: LD_INT 0
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: PUSH
13352: EMPTY
13353: LIST
13354: PPUSH
13355: CALL_OW 446
// end ;
13359: LD_VAR 0 3
13363: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13364: LD_INT 0
13366: PPUSH
13367: PPUSH
13368: PPUSH
13369: PPUSH
13370: PPUSH
13371: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
13372: LD_VAR 0 1
13376: NOT
13377: PUSH
13378: LD_VAR 0 1
13382: PPUSH
13383: CALL_OW 263
13387: PUSH
13388: LD_INT 2
13390: EQUAL
13391: NOT
13392: OR
13393: IFFALSE 13397
// exit ;
13395: GO 13713
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
13397: LD_ADDR_VAR 0 6
13401: PUSH
13402: LD_INT 22
13404: PUSH
13405: LD_VAR 0 1
13409: PPUSH
13410: CALL_OW 255
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 2
13421: PUSH
13422: LD_INT 30
13424: PUSH
13425: LD_INT 36
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 34
13434: PUSH
13435: LD_INT 31
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: ST_TO_ADDR
// if not tmp then
13456: LD_VAR 0 6
13460: NOT
13461: IFFALSE 13465
// exit ;
13463: GO 13713
// result := [ ] ;
13465: LD_ADDR_VAR 0 2
13469: PUSH
13470: EMPTY
13471: ST_TO_ADDR
// for i in tmp do
13472: LD_ADDR_VAR 0 3
13476: PUSH
13477: LD_VAR 0 6
13481: PUSH
13482: FOR_IN
13483: IFFALSE 13554
// begin t := UnitsInside ( i ) ;
13485: LD_ADDR_VAR 0 4
13489: PUSH
13490: LD_VAR 0 3
13494: PPUSH
13495: CALL_OW 313
13499: ST_TO_ADDR
// if t then
13500: LD_VAR 0 4
13504: IFFALSE 13552
// for j in t do
13506: LD_ADDR_VAR 0 7
13510: PUSH
13511: LD_VAR 0 4
13515: PUSH
13516: FOR_IN
13517: IFFALSE 13550
// result := Insert ( result , result + 1 , j ) ;
13519: LD_ADDR_VAR 0 2
13523: PUSH
13524: LD_VAR 0 2
13528: PPUSH
13529: LD_VAR 0 2
13533: PUSH
13534: LD_INT 1
13536: PLUS
13537: PPUSH
13538: LD_VAR 0 7
13542: PPUSH
13543: CALL_OW 2
13547: ST_TO_ADDR
13548: GO 13516
13550: POP
13551: POP
// end ;
13552: GO 13482
13554: POP
13555: POP
// if not result then
13556: LD_VAR 0 2
13560: NOT
13561: IFFALSE 13565
// exit ;
13563: GO 13713
// mech := result [ 1 ] ;
13565: LD_ADDR_VAR 0 5
13569: PUSH
13570: LD_VAR 0 2
13574: PUSH
13575: LD_INT 1
13577: ARRAY
13578: ST_TO_ADDR
// if result > 1 then
13579: LD_VAR 0 2
13583: PUSH
13584: LD_INT 1
13586: GREATER
13587: IFFALSE 13699
// for i = 2 to result do
13589: LD_ADDR_VAR 0 3
13593: PUSH
13594: DOUBLE
13595: LD_INT 2
13597: DEC
13598: ST_TO_ADDR
13599: LD_VAR 0 2
13603: PUSH
13604: FOR_TO
13605: IFFALSE 13697
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13607: LD_ADDR_VAR 0 4
13611: PUSH
13612: LD_VAR 0 2
13616: PUSH
13617: LD_VAR 0 3
13621: ARRAY
13622: PPUSH
13623: LD_INT 3
13625: PPUSH
13626: CALL_OW 259
13630: PUSH
13631: LD_VAR 0 2
13635: PUSH
13636: LD_VAR 0 3
13640: ARRAY
13641: PPUSH
13642: CALL_OW 432
13646: MINUS
13647: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13648: LD_VAR 0 4
13652: PUSH
13653: LD_VAR 0 5
13657: PPUSH
13658: LD_INT 3
13660: PPUSH
13661: CALL_OW 259
13665: PUSH
13666: LD_VAR 0 5
13670: PPUSH
13671: CALL_OW 432
13675: MINUS
13676: GREATEREQUAL
13677: IFFALSE 13695
// mech := result [ i ] ;
13679: LD_ADDR_VAR 0 5
13683: PUSH
13684: LD_VAR 0 2
13688: PUSH
13689: LD_VAR 0 3
13693: ARRAY
13694: ST_TO_ADDR
// end ;
13695: GO 13604
13697: POP
13698: POP
// ComLinkTo ( vehicle , mech ) ;
13699: LD_VAR 0 1
13703: PPUSH
13704: LD_VAR 0 5
13708: PPUSH
13709: CALL_OW 135
// end ;
13713: LD_VAR 0 2
13717: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
13718: LD_INT 0
13720: PPUSH
13721: PPUSH
13722: PPUSH
13723: PPUSH
13724: PPUSH
13725: PPUSH
13726: PPUSH
13727: PPUSH
13728: PPUSH
13729: PPUSH
13730: PPUSH
13731: PPUSH
// result := [ ] ;
13732: LD_ADDR_VAR 0 6
13736: PUSH
13737: EMPTY
13738: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13739: LD_VAR 0 1
13743: PPUSH
13744: CALL_OW 266
13748: PUSH
13749: LD_INT 0
13751: PUSH
13752: LD_INT 1
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: IN
13759: NOT
13760: IFFALSE 13764
// exit ;
13762: GO 15173
// if name then
13764: LD_VAR 0 2
13768: IFFALSE 13784
// SetBName ( base_dep , name ) ;
13770: LD_VAR 0 1
13774: PPUSH
13775: LD_VAR 0 2
13779: PPUSH
13780: CALL_OW 500
// base := GetBase ( base_dep ) ;
13784: LD_ADDR_VAR 0 14
13788: PUSH
13789: LD_VAR 0 1
13793: PPUSH
13794: CALL_OW 274
13798: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13799: LD_ADDR_VAR 0 15
13803: PUSH
13804: LD_VAR 0 1
13808: PPUSH
13809: CALL_OW 255
13813: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
13814: LD_ADDR_VAR 0 16
13818: PUSH
13819: LD_VAR 0 1
13823: PPUSH
13824: CALL_OW 248
13828: ST_TO_ADDR
// if sources then
13829: LD_VAR 0 4
13833: IFFALSE 13880
// for i = 1 to 3 do
13835: LD_ADDR_VAR 0 7
13839: PUSH
13840: DOUBLE
13841: LD_INT 1
13843: DEC
13844: ST_TO_ADDR
13845: LD_INT 3
13847: PUSH
13848: FOR_TO
13849: IFFALSE 13878
// AddResourceType ( base , i , sources [ i ] ) ;
13851: LD_VAR 0 14
13855: PPUSH
13856: LD_VAR 0 7
13860: PPUSH
13861: LD_VAR 0 4
13865: PUSH
13866: LD_VAR 0 7
13870: ARRAY
13871: PPUSH
13872: CALL_OW 276
13876: GO 13848
13878: POP
13879: POP
// buildings := GetBaseBuildings ( base ) ;
13880: LD_ADDR_VAR 0 17
13884: PUSH
13885: LD_VAR 0 14
13889: PPUSH
13890: CALL 13186 0 1
13894: ST_TO_ADDR
// InitHc ;
13895: CALL_OW 19
// InitUc ;
13899: CALL_OW 18
// uc_side := side ;
13903: LD_ADDR_OWVAR 20
13907: PUSH
13908: LD_VAR 0 15
13912: ST_TO_ADDR
// uc_nation := nation ;
13913: LD_ADDR_OWVAR 21
13917: PUSH
13918: LD_VAR 0 16
13922: ST_TO_ADDR
// if buildings then
13923: LD_VAR 0 17
13927: IFFALSE 15032
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13929: LD_VAR 0 17
13933: PPUSH
13934: LD_INT 2
13936: PUSH
13937: LD_INT 30
13939: PUSH
13940: LD_INT 32
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PUSH
13947: LD_INT 30
13949: PUSH
13950: LD_INT 33
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: PPUSH
13962: CALL_OW 72
13966: IFFALSE 14049
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13968: LD_ADDR_VAR 0 7
13972: PUSH
13973: LD_VAR 0 17
13977: PPUSH
13978: LD_INT 2
13980: PUSH
13981: LD_INT 30
13983: PUSH
13984: LD_INT 32
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: LD_INT 30
13993: PUSH
13994: LD_INT 33
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: PPUSH
14006: CALL_OW 72
14010: PUSH
14011: FOR_IN
14012: IFFALSE 14047
// begin if not GetBWeapon ( i ) then
14014: LD_VAR 0 7
14018: PPUSH
14019: CALL_OW 269
14023: NOT
14024: IFFALSE 14045
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
14026: LD_VAR 0 7
14030: PPUSH
14031: LD_VAR 0 7
14035: PPUSH
14036: CALL 15178 0 1
14040: PPUSH
14041: CALL_OW 431
// end ;
14045: GO 14011
14047: POP
14048: POP
// end ; for i = 1 to personel do
14049: LD_ADDR_VAR 0 7
14053: PUSH
14054: DOUBLE
14055: LD_INT 1
14057: DEC
14058: ST_TO_ADDR
14059: LD_VAR 0 5
14063: PUSH
14064: FOR_TO
14065: IFFALSE 15012
// begin if i > 4 then
14067: LD_VAR 0 7
14071: PUSH
14072: LD_INT 4
14074: GREATER
14075: IFFALSE 14079
// break ;
14077: GO 15012
// case i of 1 :
14079: LD_VAR 0 7
14083: PUSH
14084: LD_INT 1
14086: DOUBLE
14087: EQUAL
14088: IFTRUE 14092
14090: GO 14165
14092: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
14093: LD_ADDR_VAR 0 11
14097: PUSH
14098: LD_VAR 0 17
14102: PPUSH
14103: LD_INT 22
14105: PUSH
14106: LD_VAR 0 15
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 2
14117: PUSH
14118: LD_INT 30
14120: PUSH
14121: LD_INT 32
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 30
14130: PUSH
14131: LD_INT 4
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PUSH
14138: LD_INT 30
14140: PUSH
14141: LD_INT 5
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PPUSH
14158: CALL_OW 72
14162: ST_TO_ADDR
14163: GO 14387
14165: LD_INT 2
14167: DOUBLE
14168: EQUAL
14169: IFTRUE 14173
14171: GO 14235
14173: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
14174: LD_ADDR_VAR 0 11
14178: PUSH
14179: LD_VAR 0 17
14183: PPUSH
14184: LD_INT 22
14186: PUSH
14187: LD_VAR 0 15
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: LD_INT 2
14198: PUSH
14199: LD_INT 30
14201: PUSH
14202: LD_INT 0
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 30
14211: PUSH
14212: LD_INT 1
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: LIST
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PPUSH
14228: CALL_OW 72
14232: ST_TO_ADDR
14233: GO 14387
14235: LD_INT 3
14237: DOUBLE
14238: EQUAL
14239: IFTRUE 14243
14241: GO 14305
14243: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
14244: LD_ADDR_VAR 0 11
14248: PUSH
14249: LD_VAR 0 17
14253: PPUSH
14254: LD_INT 22
14256: PUSH
14257: LD_VAR 0 15
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: LD_INT 2
14268: PUSH
14269: LD_INT 30
14271: PUSH
14272: LD_INT 2
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PUSH
14279: LD_INT 30
14281: PUSH
14282: LD_INT 3
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: LIST
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PPUSH
14298: CALL_OW 72
14302: ST_TO_ADDR
14303: GO 14387
14305: LD_INT 4
14307: DOUBLE
14308: EQUAL
14309: IFTRUE 14313
14311: GO 14386
14313: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
14314: LD_ADDR_VAR 0 11
14318: PUSH
14319: LD_VAR 0 17
14323: PPUSH
14324: LD_INT 22
14326: PUSH
14327: LD_VAR 0 15
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: LD_INT 2
14338: PUSH
14339: LD_INT 30
14341: PUSH
14342: LD_INT 6
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: LD_INT 30
14351: PUSH
14352: LD_INT 7
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: LD_INT 30
14361: PUSH
14362: LD_INT 8
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PPUSH
14379: CALL_OW 72
14383: ST_TO_ADDR
14384: GO 14387
14386: POP
// if not f then
14387: LD_VAR 0 11
14391: NOT
14392: IFFALSE 14396
// continue ;
14394: GO 14064
// x := personel [ i ] ;
14396: LD_ADDR_VAR 0 12
14400: PUSH
14401: LD_VAR 0 5
14405: PUSH
14406: LD_VAR 0 7
14410: ARRAY
14411: ST_TO_ADDR
// if x = - 1 then
14412: LD_VAR 0 12
14416: PUSH
14417: LD_INT 1
14419: NEG
14420: EQUAL
14421: IFFALSE 14630
// begin for j in f do
14423: LD_ADDR_VAR 0 8
14427: PUSH
14428: LD_VAR 0 11
14432: PUSH
14433: FOR_IN
14434: IFFALSE 14626
// repeat InitHc ;
14436: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14440: LD_VAR 0 8
14444: PPUSH
14445: CALL_OW 266
14449: PUSH
14450: LD_INT 5
14452: EQUAL
14453: IFFALSE 14523
// begin if UnitsInside ( j ) < 3 then
14455: LD_VAR 0 8
14459: PPUSH
14460: CALL_OW 313
14464: PUSH
14465: LD_INT 3
14467: LESS
14468: IFFALSE 14504
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14470: LD_INT 0
14472: PPUSH
14473: LD_INT 5
14475: PUSH
14476: LD_INT 8
14478: PUSH
14479: LD_INT 9
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: LD_VAR 0 16
14491: ARRAY
14492: PPUSH
14493: LD_VAR 0 3
14497: PPUSH
14498: CALL_OW 380
14502: GO 14521
// PrepareHuman ( false , i , skill ) ;
14504: LD_INT 0
14506: PPUSH
14507: LD_VAR 0 7
14511: PPUSH
14512: LD_VAR 0 3
14516: PPUSH
14517: CALL_OW 380
// end else
14521: GO 14540
// PrepareHuman ( false , i , skill ) ;
14523: LD_INT 0
14525: PPUSH
14526: LD_VAR 0 7
14530: PPUSH
14531: LD_VAR 0 3
14535: PPUSH
14536: CALL_OW 380
// un := CreateHuman ;
14540: LD_ADDR_VAR 0 13
14544: PUSH
14545: CALL_OW 44
14549: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14550: LD_ADDR_VAR 0 6
14554: PUSH
14555: LD_VAR 0 6
14559: PPUSH
14560: LD_INT 1
14562: PPUSH
14563: LD_VAR 0 13
14567: PPUSH
14568: CALL_OW 2
14572: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14573: LD_VAR 0 13
14577: PPUSH
14578: LD_VAR 0 8
14582: PPUSH
14583: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14587: LD_VAR 0 8
14591: PPUSH
14592: CALL_OW 313
14596: PUSH
14597: LD_INT 6
14599: EQUAL
14600: PUSH
14601: LD_VAR 0 8
14605: PPUSH
14606: CALL_OW 266
14610: PUSH
14611: LD_INT 32
14613: PUSH
14614: LD_INT 31
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: IN
14621: OR
14622: IFFALSE 14436
14624: GO 14433
14626: POP
14627: POP
// end else
14628: GO 15010
// for j = 1 to x do
14630: LD_ADDR_VAR 0 8
14634: PUSH
14635: DOUBLE
14636: LD_INT 1
14638: DEC
14639: ST_TO_ADDR
14640: LD_VAR 0 12
14644: PUSH
14645: FOR_TO
14646: IFFALSE 15008
// begin InitHc ;
14648: CALL_OW 19
// if not f then
14652: LD_VAR 0 11
14656: NOT
14657: IFFALSE 14746
// begin PrepareHuman ( false , i , skill ) ;
14659: LD_INT 0
14661: PPUSH
14662: LD_VAR 0 7
14666: PPUSH
14667: LD_VAR 0 3
14671: PPUSH
14672: CALL_OW 380
// un := CreateHuman ;
14676: LD_ADDR_VAR 0 13
14680: PUSH
14681: CALL_OW 44
14685: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14686: LD_ADDR_VAR 0 6
14690: PUSH
14691: LD_VAR 0 6
14695: PPUSH
14696: LD_INT 1
14698: PPUSH
14699: LD_VAR 0 13
14703: PPUSH
14704: CALL_OW 2
14708: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14709: LD_VAR 0 13
14713: PPUSH
14714: LD_VAR 0 1
14718: PPUSH
14719: CALL_OW 250
14723: PPUSH
14724: LD_VAR 0 1
14728: PPUSH
14729: CALL_OW 251
14733: PPUSH
14734: LD_INT 10
14736: PPUSH
14737: LD_INT 0
14739: PPUSH
14740: CALL_OW 50
// continue ;
14744: GO 14645
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14746: LD_VAR 0 11
14750: PUSH
14751: LD_INT 1
14753: ARRAY
14754: PPUSH
14755: CALL_OW 313
14759: PUSH
14760: LD_VAR 0 11
14764: PUSH
14765: LD_INT 1
14767: ARRAY
14768: PPUSH
14769: CALL_OW 266
14773: PUSH
14774: LD_INT 32
14776: PUSH
14777: LD_INT 31
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: IN
14784: AND
14785: PUSH
14786: LD_VAR 0 11
14790: PUSH
14791: LD_INT 1
14793: ARRAY
14794: PPUSH
14795: CALL_OW 313
14799: PUSH
14800: LD_INT 6
14802: EQUAL
14803: OR
14804: IFFALSE 14824
// f := Delete ( f , 1 ) ;
14806: LD_ADDR_VAR 0 11
14810: PUSH
14811: LD_VAR 0 11
14815: PPUSH
14816: LD_INT 1
14818: PPUSH
14819: CALL_OW 3
14823: ST_TO_ADDR
// if not f then
14824: LD_VAR 0 11
14828: NOT
14829: IFFALSE 14847
// begin x := x + 2 ;
14831: LD_ADDR_VAR 0 12
14835: PUSH
14836: LD_VAR 0 12
14840: PUSH
14841: LD_INT 2
14843: PLUS
14844: ST_TO_ADDR
// continue ;
14845: GO 14645
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14847: LD_VAR 0 11
14851: PUSH
14852: LD_INT 1
14854: ARRAY
14855: PPUSH
14856: CALL_OW 266
14860: PUSH
14861: LD_INT 5
14863: EQUAL
14864: IFFALSE 14938
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14866: LD_VAR 0 11
14870: PUSH
14871: LD_INT 1
14873: ARRAY
14874: PPUSH
14875: CALL_OW 313
14879: PUSH
14880: LD_INT 3
14882: LESS
14883: IFFALSE 14919
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14885: LD_INT 0
14887: PPUSH
14888: LD_INT 5
14890: PUSH
14891: LD_INT 8
14893: PUSH
14894: LD_INT 9
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: LIST
14901: PUSH
14902: LD_VAR 0 16
14906: ARRAY
14907: PPUSH
14908: LD_VAR 0 3
14912: PPUSH
14913: CALL_OW 380
14917: GO 14936
// PrepareHuman ( false , i , skill ) ;
14919: LD_INT 0
14921: PPUSH
14922: LD_VAR 0 7
14926: PPUSH
14927: LD_VAR 0 3
14931: PPUSH
14932: CALL_OW 380
// end else
14936: GO 14955
// PrepareHuman ( false , i , skill ) ;
14938: LD_INT 0
14940: PPUSH
14941: LD_VAR 0 7
14945: PPUSH
14946: LD_VAR 0 3
14950: PPUSH
14951: CALL_OW 380
// un := CreateHuman ;
14955: LD_ADDR_VAR 0 13
14959: PUSH
14960: CALL_OW 44
14964: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14965: LD_ADDR_VAR 0 6
14969: PUSH
14970: LD_VAR 0 6
14974: PPUSH
14975: LD_INT 1
14977: PPUSH
14978: LD_VAR 0 13
14982: PPUSH
14983: CALL_OW 2
14987: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14988: LD_VAR 0 13
14992: PPUSH
14993: LD_VAR 0 11
14997: PUSH
14998: LD_INT 1
15000: ARRAY
15001: PPUSH
15002: CALL_OW 52
// end ;
15006: GO 14645
15008: POP
15009: POP
// end ;
15010: GO 14064
15012: POP
15013: POP
// result := result ^ buildings ;
15014: LD_ADDR_VAR 0 6
15018: PUSH
15019: LD_VAR 0 6
15023: PUSH
15024: LD_VAR 0 17
15028: ADD
15029: ST_TO_ADDR
// end else
15030: GO 15173
// begin for i = 1 to personel do
15032: LD_ADDR_VAR 0 7
15036: PUSH
15037: DOUBLE
15038: LD_INT 1
15040: DEC
15041: ST_TO_ADDR
15042: LD_VAR 0 5
15046: PUSH
15047: FOR_TO
15048: IFFALSE 15171
// begin if i > 4 then
15050: LD_VAR 0 7
15054: PUSH
15055: LD_INT 4
15057: GREATER
15058: IFFALSE 15062
// break ;
15060: GO 15171
// x := personel [ i ] ;
15062: LD_ADDR_VAR 0 12
15066: PUSH
15067: LD_VAR 0 5
15071: PUSH
15072: LD_VAR 0 7
15076: ARRAY
15077: ST_TO_ADDR
// if x = - 1 then
15078: LD_VAR 0 12
15082: PUSH
15083: LD_INT 1
15085: NEG
15086: EQUAL
15087: IFFALSE 15091
// continue ;
15089: GO 15047
// PrepareHuman ( false , i , skill ) ;
15091: LD_INT 0
15093: PPUSH
15094: LD_VAR 0 7
15098: PPUSH
15099: LD_VAR 0 3
15103: PPUSH
15104: CALL_OW 380
// un := CreateHuman ;
15108: LD_ADDR_VAR 0 13
15112: PUSH
15113: CALL_OW 44
15117: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
15118: LD_VAR 0 13
15122: PPUSH
15123: LD_VAR 0 1
15127: PPUSH
15128: CALL_OW 250
15132: PPUSH
15133: LD_VAR 0 1
15137: PPUSH
15138: CALL_OW 251
15142: PPUSH
15143: LD_INT 10
15145: PPUSH
15146: LD_INT 0
15148: PPUSH
15149: CALL_OW 50
// result := result ^ un ;
15153: LD_ADDR_VAR 0 6
15157: PUSH
15158: LD_VAR 0 6
15162: PUSH
15163: LD_VAR 0 13
15167: ADD
15168: ST_TO_ADDR
// end ;
15169: GO 15047
15171: POP
15172: POP
// end ; end ;
15173: LD_VAR 0 6
15177: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
15178: LD_INT 0
15180: PPUSH
15181: PPUSH
15182: PPUSH
15183: PPUSH
15184: PPUSH
15185: PPUSH
15186: PPUSH
15187: PPUSH
15188: PPUSH
15189: PPUSH
15190: PPUSH
15191: PPUSH
15192: PPUSH
15193: PPUSH
15194: PPUSH
15195: PPUSH
// result := false ;
15196: LD_ADDR_VAR 0 2
15200: PUSH
15201: LD_INT 0
15203: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
15204: LD_VAR 0 1
15208: NOT
15209: PUSH
15210: LD_VAR 0 1
15214: PPUSH
15215: CALL_OW 266
15219: PUSH
15220: LD_INT 32
15222: PUSH
15223: LD_INT 33
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: IN
15230: NOT
15231: OR
15232: IFFALSE 15236
// exit ;
15234: GO 16469
// nat := GetNation ( tower ) ;
15236: LD_ADDR_VAR 0 11
15240: PUSH
15241: LD_VAR 0 1
15245: PPUSH
15246: CALL_OW 248
15250: ST_TO_ADDR
// side := GetSide ( tower ) ;
15251: LD_ADDR_VAR 0 15
15255: PUSH
15256: LD_VAR 0 1
15260: PPUSH
15261: CALL_OW 255
15265: ST_TO_ADDR
// x := GetX ( tower ) ;
15266: LD_ADDR_VAR 0 9
15270: PUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 250
15280: ST_TO_ADDR
// y := GetY ( tower ) ;
15281: LD_ADDR_VAR 0 10
15285: PUSH
15286: LD_VAR 0 1
15290: PPUSH
15291: CALL_OW 251
15295: ST_TO_ADDR
// if not x or not y then
15296: LD_VAR 0 9
15300: NOT
15301: PUSH
15302: LD_VAR 0 10
15306: NOT
15307: OR
15308: IFFALSE 15312
// exit ;
15310: GO 16469
// weapon := 0 ;
15312: LD_ADDR_VAR 0 17
15316: PUSH
15317: LD_INT 0
15319: ST_TO_ADDR
// fac_list := [ ] ;
15320: LD_ADDR_VAR 0 16
15324: PUSH
15325: EMPTY
15326: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
15327: LD_ADDR_VAR 0 5
15331: PUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 274
15341: PPUSH
15342: CALL 13186 0 1
15346: PPUSH
15347: LD_INT 30
15349: PUSH
15350: LD_INT 3
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PPUSH
15357: CALL_OW 72
15361: ST_TO_ADDR
// if not factories then
15362: LD_VAR 0 5
15366: NOT
15367: IFFALSE 15371
// exit ;
15369: GO 16469
// for i in factories do
15371: LD_ADDR_VAR 0 7
15375: PUSH
15376: LD_VAR 0 5
15380: PUSH
15381: FOR_IN
15382: IFFALSE 15407
// fac_list := fac_list union AvailableWeaponList ( i ) ;
15384: LD_ADDR_VAR 0 16
15388: PUSH
15389: LD_VAR 0 16
15393: PUSH
15394: LD_VAR 0 7
15398: PPUSH
15399: CALL_OW 478
15403: UNION
15404: ST_TO_ADDR
15405: GO 15381
15407: POP
15408: POP
// if not fac_list then
15409: LD_VAR 0 16
15413: NOT
15414: IFFALSE 15418
// exit ;
15416: GO 16469
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
15418: LD_ADDR_VAR 0 4
15422: PUSH
15423: LD_INT 4
15425: PUSH
15426: LD_INT 5
15428: PUSH
15429: LD_INT 9
15431: PUSH
15432: LD_INT 10
15434: PUSH
15435: LD_INT 6
15437: PUSH
15438: LD_INT 7
15440: PUSH
15441: LD_INT 11
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 27
15455: PUSH
15456: LD_INT 28
15458: PUSH
15459: LD_INT 26
15461: PUSH
15462: LD_INT 30
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 43
15473: PUSH
15474: LD_INT 44
15476: PUSH
15477: LD_INT 46
15479: PUSH
15480: LD_INT 45
15482: PUSH
15483: LD_INT 47
15485: PUSH
15486: LD_INT 49
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: LIST
15501: PUSH
15502: LD_VAR 0 11
15506: ARRAY
15507: ST_TO_ADDR
// for i in list do
15508: LD_ADDR_VAR 0 7
15512: PUSH
15513: LD_VAR 0 4
15517: PUSH
15518: FOR_IN
15519: IFFALSE 15552
// if not i in fac_list then
15521: LD_VAR 0 7
15525: PUSH
15526: LD_VAR 0 16
15530: IN
15531: NOT
15532: IFFALSE 15550
// list := list diff i ;
15534: LD_ADDR_VAR 0 4
15538: PUSH
15539: LD_VAR 0 4
15543: PUSH
15544: LD_VAR 0 7
15548: DIFF
15549: ST_TO_ADDR
15550: GO 15518
15552: POP
15553: POP
// if not list then
15554: LD_VAR 0 4
15558: NOT
15559: IFFALSE 15563
// exit ;
15561: GO 16469
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
15563: LD_VAR 0 11
15567: PUSH
15568: LD_INT 3
15570: EQUAL
15571: PUSH
15572: LD_INT 49
15574: PUSH
15575: LD_VAR 0 4
15579: IN
15580: AND
15581: PUSH
15582: LD_INT 31
15584: PPUSH
15585: LD_VAR 0 15
15589: PPUSH
15590: CALL_OW 321
15594: PUSH
15595: LD_INT 2
15597: EQUAL
15598: AND
15599: IFFALSE 15659
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
15601: LD_INT 22
15603: PUSH
15604: LD_VAR 0 15
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 35
15615: PUSH
15616: LD_INT 49
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: LD_INT 91
15625: PUSH
15626: LD_VAR 0 1
15630: PUSH
15631: LD_INT 10
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: LIST
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: LIST
15643: PPUSH
15644: CALL_OW 69
15648: NOT
15649: IFFALSE 15659
// weapon := ru_time_lapser ;
15651: LD_ADDR_VAR 0 17
15655: PUSH
15656: LD_INT 49
15658: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
15659: LD_VAR 0 11
15663: PUSH
15664: LD_INT 1
15666: PUSH
15667: LD_INT 2
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: IN
15674: PUSH
15675: LD_INT 11
15677: PUSH
15678: LD_VAR 0 4
15682: IN
15683: PUSH
15684: LD_INT 30
15686: PUSH
15687: LD_VAR 0 4
15691: IN
15692: OR
15693: AND
15694: PUSH
15695: LD_INT 6
15697: PPUSH
15698: LD_VAR 0 15
15702: PPUSH
15703: CALL_OW 321
15707: PUSH
15708: LD_INT 2
15710: EQUAL
15711: AND
15712: IFFALSE 15877
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15714: LD_INT 22
15716: PUSH
15717: LD_VAR 0 15
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: LD_INT 2
15728: PUSH
15729: LD_INT 35
15731: PUSH
15732: LD_INT 11
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 35
15741: PUSH
15742: LD_INT 30
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 91
15756: PUSH
15757: LD_VAR 0 1
15761: PUSH
15762: LD_INT 18
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: LIST
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: LIST
15774: PPUSH
15775: CALL_OW 69
15779: NOT
15780: PUSH
15781: LD_INT 22
15783: PUSH
15784: LD_VAR 0 15
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 2
15795: PUSH
15796: LD_INT 30
15798: PUSH
15799: LD_INT 32
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 30
15808: PUSH
15809: LD_INT 33
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 91
15823: PUSH
15824: LD_VAR 0 1
15828: PUSH
15829: LD_INT 12
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: LIST
15841: PUSH
15842: EMPTY
15843: LIST
15844: PPUSH
15845: CALL_OW 69
15849: PUSH
15850: LD_INT 2
15852: GREATER
15853: AND
15854: IFFALSE 15877
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15856: LD_ADDR_VAR 0 17
15860: PUSH
15861: LD_INT 11
15863: PUSH
15864: LD_INT 30
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_VAR 0 11
15875: ARRAY
15876: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15877: LD_VAR 0 17
15881: NOT
15882: PUSH
15883: LD_INT 40
15885: PPUSH
15886: LD_VAR 0 15
15890: PPUSH
15891: CALL_OW 321
15895: PUSH
15896: LD_INT 2
15898: EQUAL
15899: AND
15900: PUSH
15901: LD_INT 7
15903: PUSH
15904: LD_VAR 0 4
15908: IN
15909: PUSH
15910: LD_INT 28
15912: PUSH
15913: LD_VAR 0 4
15917: IN
15918: OR
15919: PUSH
15920: LD_INT 45
15922: PUSH
15923: LD_VAR 0 4
15927: IN
15928: OR
15929: AND
15930: IFFALSE 16184
// begin hex := GetHexInfo ( x , y ) ;
15932: LD_ADDR_VAR 0 3
15936: PUSH
15937: LD_VAR 0 9
15941: PPUSH
15942: LD_VAR 0 10
15946: PPUSH
15947: CALL_OW 546
15951: ST_TO_ADDR
// if hex [ 1 ] then
15952: LD_VAR 0 3
15956: PUSH
15957: LD_INT 1
15959: ARRAY
15960: IFFALSE 15964
// exit ;
15962: GO 16469
// height := hex [ 2 ] ;
15964: LD_ADDR_VAR 0 14
15968: PUSH
15969: LD_VAR 0 3
15973: PUSH
15974: LD_INT 2
15976: ARRAY
15977: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15978: LD_ADDR_VAR 0 13
15982: PUSH
15983: LD_INT 0
15985: PUSH
15986: LD_INT 2
15988: PUSH
15989: LD_INT 3
15991: PUSH
15992: LD_INT 5
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: ST_TO_ADDR
// for i in tmp do
16001: LD_ADDR_VAR 0 7
16005: PUSH
16006: LD_VAR 0 13
16010: PUSH
16011: FOR_IN
16012: IFFALSE 16182
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
16014: LD_ADDR_VAR 0 8
16018: PUSH
16019: LD_VAR 0 9
16023: PPUSH
16024: LD_VAR 0 7
16028: PPUSH
16029: LD_INT 5
16031: PPUSH
16032: CALL_OW 272
16036: PUSH
16037: LD_VAR 0 10
16041: PPUSH
16042: LD_VAR 0 7
16046: PPUSH
16047: LD_INT 5
16049: PPUSH
16050: CALL_OW 273
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
16059: LD_VAR 0 8
16063: PUSH
16064: LD_INT 1
16066: ARRAY
16067: PPUSH
16068: LD_VAR 0 8
16072: PUSH
16073: LD_INT 2
16075: ARRAY
16076: PPUSH
16077: CALL_OW 488
16081: IFFALSE 16180
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
16083: LD_ADDR_VAR 0 3
16087: PUSH
16088: LD_VAR 0 8
16092: PUSH
16093: LD_INT 1
16095: ARRAY
16096: PPUSH
16097: LD_VAR 0 8
16101: PUSH
16102: LD_INT 2
16104: ARRAY
16105: PPUSH
16106: CALL_OW 546
16110: ST_TO_ADDR
// if hex [ 1 ] then
16111: LD_VAR 0 3
16115: PUSH
16116: LD_INT 1
16118: ARRAY
16119: IFFALSE 16123
// continue ;
16121: GO 16011
// h := hex [ 2 ] ;
16123: LD_ADDR_VAR 0 12
16127: PUSH
16128: LD_VAR 0 3
16132: PUSH
16133: LD_INT 2
16135: ARRAY
16136: ST_TO_ADDR
// if h + 7 < height then
16137: LD_VAR 0 12
16141: PUSH
16142: LD_INT 7
16144: PLUS
16145: PUSH
16146: LD_VAR 0 14
16150: LESS
16151: IFFALSE 16180
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
16153: LD_ADDR_VAR 0 17
16157: PUSH
16158: LD_INT 7
16160: PUSH
16161: LD_INT 28
16163: PUSH
16164: LD_INT 45
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: LIST
16171: PUSH
16172: LD_VAR 0 11
16176: ARRAY
16177: ST_TO_ADDR
// break ;
16178: GO 16182
// end ; end ; end ;
16180: GO 16011
16182: POP
16183: POP
// end ; if not weapon then
16184: LD_VAR 0 17
16188: NOT
16189: IFFALSE 16351
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
16191: LD_ADDR_VAR 0 4
16195: PUSH
16196: LD_VAR 0 4
16200: PUSH
16201: LD_INT 11
16203: PUSH
16204: LD_INT 30
16206: PUSH
16207: LD_INT 49
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: LIST
16214: DIFF
16215: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
16216: LD_ADDR_VAR 0 17
16220: PUSH
16221: LD_VAR 0 4
16225: PUSH
16226: LD_INT 1
16228: PPUSH
16229: LD_VAR 0 4
16233: PPUSH
16234: CALL_OW 12
16238: ARRAY
16239: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
16240: LD_ADDR_VAR 0 13
16244: PUSH
16245: LD_INT 22
16247: PUSH
16248: LD_VAR 0 15
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 3
16259: PUSH
16260: LD_INT 35
16262: PUSH
16263: LD_INT 0
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: PPUSH
16278: CALL_OW 69
16282: ST_TO_ADDR
// for i in tmp do
16283: LD_ADDR_VAR 0 7
16287: PUSH
16288: LD_VAR 0 13
16292: PUSH
16293: FOR_IN
16294: IFFALSE 16319
// list := list diff GetBWeapon ( i ) ;
16296: LD_ADDR_VAR 0 4
16300: PUSH
16301: LD_VAR 0 4
16305: PUSH
16306: LD_VAR 0 7
16310: PPUSH
16311: CALL_OW 269
16315: DIFF
16316: ST_TO_ADDR
16317: GO 16293
16319: POP
16320: POP
// if list then
16321: LD_VAR 0 4
16325: IFFALSE 16351
// weapon := list [ rand ( 1 , list ) ] ;
16327: LD_ADDR_VAR 0 17
16331: PUSH
16332: LD_VAR 0 4
16336: PUSH
16337: LD_INT 1
16339: PPUSH
16340: LD_VAR 0 4
16344: PPUSH
16345: CALL_OW 12
16349: ARRAY
16350: ST_TO_ADDR
// end ; if weapon then
16351: LD_VAR 0 17
16355: IFFALSE 16469
// begin tmp := CostOfWeapon ( weapon ) ;
16357: LD_ADDR_VAR 0 13
16361: PUSH
16362: LD_VAR 0 17
16366: PPUSH
16367: CALL_OW 451
16371: ST_TO_ADDR
// j := GetBase ( tower ) ;
16372: LD_ADDR_VAR 0 8
16376: PUSH
16377: LD_VAR 0 1
16381: PPUSH
16382: CALL_OW 274
16386: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
16387: LD_VAR 0 8
16391: PPUSH
16392: LD_INT 1
16394: PPUSH
16395: CALL_OW 275
16399: PUSH
16400: LD_VAR 0 13
16404: PUSH
16405: LD_INT 1
16407: ARRAY
16408: GREATEREQUAL
16409: PUSH
16410: LD_VAR 0 8
16414: PPUSH
16415: LD_INT 2
16417: PPUSH
16418: CALL_OW 275
16422: PUSH
16423: LD_VAR 0 13
16427: PUSH
16428: LD_INT 2
16430: ARRAY
16431: GREATEREQUAL
16432: AND
16433: PUSH
16434: LD_VAR 0 8
16438: PPUSH
16439: LD_INT 3
16441: PPUSH
16442: CALL_OW 275
16446: PUSH
16447: LD_VAR 0 13
16451: PUSH
16452: LD_INT 3
16454: ARRAY
16455: GREATEREQUAL
16456: AND
16457: IFFALSE 16469
// result := weapon ;
16459: LD_ADDR_VAR 0 2
16463: PUSH
16464: LD_VAR 0 17
16468: ST_TO_ADDR
// end ; end ;
16469: LD_VAR 0 2
16473: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
16474: LD_INT 0
16476: PPUSH
16477: PPUSH
// result := true ;
16478: LD_ADDR_VAR 0 3
16482: PUSH
16483: LD_INT 1
16485: ST_TO_ADDR
// if array1 = array2 then
16486: LD_VAR 0 1
16490: PUSH
16491: LD_VAR 0 2
16495: EQUAL
16496: IFFALSE 16556
// begin for i = 1 to array1 do
16498: LD_ADDR_VAR 0 4
16502: PUSH
16503: DOUBLE
16504: LD_INT 1
16506: DEC
16507: ST_TO_ADDR
16508: LD_VAR 0 1
16512: PUSH
16513: FOR_TO
16514: IFFALSE 16552
// if array1 [ i ] <> array2 [ i ] then
16516: LD_VAR 0 1
16520: PUSH
16521: LD_VAR 0 4
16525: ARRAY
16526: PUSH
16527: LD_VAR 0 2
16531: PUSH
16532: LD_VAR 0 4
16536: ARRAY
16537: NONEQUAL
16538: IFFALSE 16550
// begin result := false ;
16540: LD_ADDR_VAR 0 3
16544: PUSH
16545: LD_INT 0
16547: ST_TO_ADDR
// break ;
16548: GO 16552
// end ;
16550: GO 16513
16552: POP
16553: POP
// end else
16554: GO 16564
// result := false ;
16556: LD_ADDR_VAR 0 3
16560: PUSH
16561: LD_INT 0
16563: ST_TO_ADDR
// end ;
16564: LD_VAR 0 3
16568: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
16569: LD_INT 0
16571: PPUSH
16572: PPUSH
16573: PPUSH
// pom := GetBase ( fac ) ;
16574: LD_ADDR_VAR 0 5
16578: PUSH
16579: LD_VAR 0 1
16583: PPUSH
16584: CALL_OW 274
16588: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
16589: LD_ADDR_VAR 0 4
16593: PUSH
16594: LD_VAR 0 2
16598: PUSH
16599: LD_INT 1
16601: ARRAY
16602: PPUSH
16603: LD_VAR 0 2
16607: PUSH
16608: LD_INT 2
16610: ARRAY
16611: PPUSH
16612: LD_VAR 0 2
16616: PUSH
16617: LD_INT 3
16619: ARRAY
16620: PPUSH
16621: LD_VAR 0 2
16625: PUSH
16626: LD_INT 4
16628: ARRAY
16629: PPUSH
16630: CALL_OW 449
16634: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
16635: LD_VAR 0 5
16639: PPUSH
16640: LD_INT 1
16642: PPUSH
16643: CALL_OW 275
16647: PUSH
16648: LD_VAR 0 4
16652: PUSH
16653: LD_INT 1
16655: ARRAY
16656: GREATEREQUAL
16657: PUSH
16658: LD_VAR 0 5
16662: PPUSH
16663: LD_INT 2
16665: PPUSH
16666: CALL_OW 275
16670: PUSH
16671: LD_VAR 0 4
16675: PUSH
16676: LD_INT 2
16678: ARRAY
16679: GREATEREQUAL
16680: AND
16681: PUSH
16682: LD_VAR 0 5
16686: PPUSH
16687: LD_INT 3
16689: PPUSH
16690: CALL_OW 275
16694: PUSH
16695: LD_VAR 0 4
16699: PUSH
16700: LD_INT 3
16702: ARRAY
16703: GREATEREQUAL
16704: AND
16705: IFFALSE 16717
// result := true else
16707: LD_ADDR_VAR 0 3
16711: PUSH
16712: LD_INT 1
16714: ST_TO_ADDR
16715: GO 16725
// result := false ;
16717: LD_ADDR_VAR 0 3
16721: PUSH
16722: LD_INT 0
16724: ST_TO_ADDR
// end ;
16725: LD_VAR 0 3
16729: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
16730: LD_INT 0
16732: PPUSH
16733: PPUSH
16734: PPUSH
16735: PPUSH
// pom := GetBase ( building ) ;
16736: LD_ADDR_VAR 0 3
16740: PUSH
16741: LD_VAR 0 1
16745: PPUSH
16746: CALL_OW 274
16750: ST_TO_ADDR
// if not pom then
16751: LD_VAR 0 3
16755: NOT
16756: IFFALSE 16760
// exit ;
16758: GO 16930
// btype := GetBType ( building ) ;
16760: LD_ADDR_VAR 0 5
16764: PUSH
16765: LD_VAR 0 1
16769: PPUSH
16770: CALL_OW 266
16774: ST_TO_ADDR
// if btype = b_armoury then
16775: LD_VAR 0 5
16779: PUSH
16780: LD_INT 4
16782: EQUAL
16783: IFFALSE 16793
// btype := b_barracks ;
16785: LD_ADDR_VAR 0 5
16789: PUSH
16790: LD_INT 5
16792: ST_TO_ADDR
// if btype = b_depot then
16793: LD_VAR 0 5
16797: PUSH
16798: LD_INT 0
16800: EQUAL
16801: IFFALSE 16811
// btype := b_warehouse ;
16803: LD_ADDR_VAR 0 5
16807: PUSH
16808: LD_INT 1
16810: ST_TO_ADDR
// if btype = b_workshop then
16811: LD_VAR 0 5
16815: PUSH
16816: LD_INT 2
16818: EQUAL
16819: IFFALSE 16829
// btype := b_factory ;
16821: LD_ADDR_VAR 0 5
16825: PUSH
16826: LD_INT 3
16828: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16829: LD_ADDR_VAR 0 4
16833: PUSH
16834: LD_VAR 0 5
16838: PPUSH
16839: LD_VAR 0 1
16843: PPUSH
16844: CALL_OW 248
16848: PPUSH
16849: CALL_OW 450
16853: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16854: LD_ADDR_VAR 0 2
16858: PUSH
16859: LD_VAR 0 3
16863: PPUSH
16864: LD_INT 1
16866: PPUSH
16867: CALL_OW 275
16871: PUSH
16872: LD_VAR 0 4
16876: PUSH
16877: LD_INT 1
16879: ARRAY
16880: GREATEREQUAL
16881: PUSH
16882: LD_VAR 0 3
16886: PPUSH
16887: LD_INT 2
16889: PPUSH
16890: CALL_OW 275
16894: PUSH
16895: LD_VAR 0 4
16899: PUSH
16900: LD_INT 2
16902: ARRAY
16903: GREATEREQUAL
16904: AND
16905: PUSH
16906: LD_VAR 0 3
16910: PPUSH
16911: LD_INT 3
16913: PPUSH
16914: CALL_OW 275
16918: PUSH
16919: LD_VAR 0 4
16923: PUSH
16924: LD_INT 3
16926: ARRAY
16927: GREATEREQUAL
16928: AND
16929: ST_TO_ADDR
// end ;
16930: LD_VAR 0 2
16934: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16935: LD_INT 0
16937: PPUSH
16938: PPUSH
16939: PPUSH
// pom := GetBase ( building ) ;
16940: LD_ADDR_VAR 0 4
16944: PUSH
16945: LD_VAR 0 1
16949: PPUSH
16950: CALL_OW 274
16954: ST_TO_ADDR
// if not pom then
16955: LD_VAR 0 4
16959: NOT
16960: IFFALSE 16964
// exit ;
16962: GO 17065
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16964: LD_ADDR_VAR 0 5
16968: PUSH
16969: LD_VAR 0 2
16973: PPUSH
16974: LD_VAR 0 1
16978: PPUSH
16979: CALL_OW 248
16983: PPUSH
16984: CALL_OW 450
16988: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16989: LD_ADDR_VAR 0 3
16993: PUSH
16994: LD_VAR 0 4
16998: PPUSH
16999: LD_INT 1
17001: PPUSH
17002: CALL_OW 275
17006: PUSH
17007: LD_VAR 0 5
17011: PUSH
17012: LD_INT 1
17014: ARRAY
17015: GREATEREQUAL
17016: PUSH
17017: LD_VAR 0 4
17021: PPUSH
17022: LD_INT 2
17024: PPUSH
17025: CALL_OW 275
17029: PUSH
17030: LD_VAR 0 5
17034: PUSH
17035: LD_INT 2
17037: ARRAY
17038: GREATEREQUAL
17039: AND
17040: PUSH
17041: LD_VAR 0 4
17045: PPUSH
17046: LD_INT 3
17048: PPUSH
17049: CALL_OW 275
17053: PUSH
17054: LD_VAR 0 5
17058: PUSH
17059: LD_INT 3
17061: ARRAY
17062: GREATEREQUAL
17063: AND
17064: ST_TO_ADDR
// end ;
17065: LD_VAR 0 3
17069: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes ; begin
17070: LD_INT 0
17072: PPUSH
17073: PPUSH
17074: PPUSH
17075: PPUSH
17076: PPUSH
17077: PPUSH
17078: PPUSH
// if not base or not btype or not x or not y then
17079: LD_VAR 0 1
17083: NOT
17084: PUSH
17085: LD_VAR 0 2
17089: NOT
17090: OR
17091: PUSH
17092: LD_VAR 0 3
17096: NOT
17097: OR
17098: PUSH
17099: LD_VAR 0 4
17103: NOT
17104: OR
17105: IFFALSE 17109
// exit ;
17107: GO 17381
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
17109: LD_ADDR_VAR 0 12
17113: PUSH
17114: LD_VAR 0 2
17118: PPUSH
17119: LD_VAR 0 3
17123: PPUSH
17124: LD_VAR 0 4
17128: PPUSH
17129: LD_VAR 0 5
17133: PPUSH
17134: LD_VAR 0 1
17138: PUSH
17139: LD_INT 1
17141: ARRAY
17142: PPUSH
17143: CALL_OW 248
17147: PPUSH
17148: LD_INT 0
17150: PPUSH
17151: CALL 18164 0 6
17155: ST_TO_ADDR
// if not hexes then
17156: LD_VAR 0 12
17160: NOT
17161: IFFALSE 17165
// exit ;
17163: GO 17381
// for i = 1 to hexes do
17165: LD_ADDR_VAR 0 7
17169: PUSH
17170: DOUBLE
17171: LD_INT 1
17173: DEC
17174: ST_TO_ADDR
17175: LD_VAR 0 12
17179: PUSH
17180: FOR_TO
17181: IFFALSE 17379
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17183: LD_ADDR_VAR 0 11
17187: PUSH
17188: LD_VAR 0 12
17192: PUSH
17193: LD_VAR 0 7
17197: ARRAY
17198: PUSH
17199: LD_INT 1
17201: ARRAY
17202: PPUSH
17203: LD_VAR 0 12
17207: PUSH
17208: LD_VAR 0 7
17212: ARRAY
17213: PUSH
17214: LD_INT 2
17216: ARRAY
17217: PPUSH
17218: CALL_OW 428
17222: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
17223: LD_VAR 0 11
17227: NOT
17228: PUSH
17229: LD_VAR 0 11
17233: PPUSH
17234: CALL_OW 247
17238: PUSH
17239: LD_INT 3
17241: EQUAL
17242: OR
17243: IFFALSE 17247
// continue ;
17245: GO 17180
// for j = 0 to 5 do
17247: LD_ADDR_VAR 0 8
17251: PUSH
17252: DOUBLE
17253: LD_INT 0
17255: DEC
17256: ST_TO_ADDR
17257: LD_INT 5
17259: PUSH
17260: FOR_TO
17261: IFFALSE 17375
// begin _x := ShiftX ( GetX ( tmp ) , j , 3 ) ;
17263: LD_ADDR_VAR 0 9
17267: PUSH
17268: LD_VAR 0 11
17272: PPUSH
17273: CALL_OW 250
17277: PPUSH
17278: LD_VAR 0 8
17282: PPUSH
17283: LD_INT 3
17285: PPUSH
17286: CALL_OW 272
17290: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 3 ) ;
17291: LD_ADDR_VAR 0 10
17295: PUSH
17296: LD_VAR 0 11
17300: PPUSH
17301: CALL_OW 251
17305: PPUSH
17306: LD_VAR 0 8
17310: PPUSH
17311: LD_INT 3
17313: PPUSH
17314: CALL_OW 273
17318: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17319: LD_VAR 0 9
17323: PPUSH
17324: LD_VAR 0 10
17328: PPUSH
17329: CALL_OW 488
17333: PUSH
17334: LD_VAR 0 9
17338: PPUSH
17339: LD_VAR 0 10
17343: PPUSH
17344: CALL_OW 428
17348: NOT
17349: AND
17350: IFFALSE 17373
// begin ComMoveXY ( tmp , _x , _y ) ;
17352: LD_VAR 0 11
17356: PPUSH
17357: LD_VAR 0 9
17361: PPUSH
17362: LD_VAR 0 10
17366: PPUSH
17367: CALL_OW 111
// break ;
17371: GO 17375
// end ; end ;
17373: GO 17260
17375: POP
17376: POP
// end ;
17377: GO 17180
17379: POP
17380: POP
// end ;
17381: LD_VAR 0 6
17385: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17386: LD_INT 0
17388: PPUSH
17389: PPUSH
17390: PPUSH
17391: PPUSH
17392: PPUSH
17393: PPUSH
17394: PPUSH
17395: PPUSH
17396: PPUSH
// result := false ;
17397: LD_ADDR_VAR 0 6
17401: PUSH
17402: LD_INT 0
17404: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17405: LD_VAR 0 1
17409: NOT
17410: PUSH
17411: LD_VAR 0 1
17415: PPUSH
17416: CALL_OW 266
17420: PUSH
17421: LD_INT 0
17423: PUSH
17424: LD_INT 1
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: IN
17431: NOT
17432: OR
17433: PUSH
17434: LD_VAR 0 2
17438: NOT
17439: OR
17440: PUSH
17441: LD_VAR 0 5
17445: PUSH
17446: LD_INT 0
17448: PUSH
17449: LD_INT 1
17451: PUSH
17452: LD_INT 2
17454: PUSH
17455: LD_INT 3
17457: PUSH
17458: LD_INT 4
17460: PUSH
17461: LD_INT 5
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: IN
17472: NOT
17473: OR
17474: PUSH
17475: LD_VAR 0 3
17479: PPUSH
17480: LD_VAR 0 4
17484: PPUSH
17485: CALL_OW 488
17489: NOT
17490: OR
17491: IFFALSE 17495
// exit ;
17493: GO 18159
// pom := GetBase ( bdepot ) ;
17495: LD_ADDR_VAR 0 9
17499: PUSH
17500: LD_VAR 0 1
17504: PPUSH
17505: CALL_OW 274
17509: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17510: LD_ADDR_VAR 0 10
17514: PUSH
17515: LD_VAR 0 2
17519: PPUSH
17520: LD_VAR 0 1
17524: PPUSH
17525: CALL_OW 248
17529: PPUSH
17530: CALL_OW 450
17534: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17535: LD_VAR 0 9
17539: PPUSH
17540: LD_INT 1
17542: PPUSH
17543: CALL_OW 275
17547: PUSH
17548: LD_VAR 0 10
17552: PUSH
17553: LD_INT 1
17555: ARRAY
17556: GREATEREQUAL
17557: PUSH
17558: LD_VAR 0 9
17562: PPUSH
17563: LD_INT 2
17565: PPUSH
17566: CALL_OW 275
17570: PUSH
17571: LD_VAR 0 10
17575: PUSH
17576: LD_INT 2
17578: ARRAY
17579: GREATEREQUAL
17580: AND
17581: PUSH
17582: LD_VAR 0 9
17586: PPUSH
17587: LD_INT 3
17589: PPUSH
17590: CALL_OW 275
17594: PUSH
17595: LD_VAR 0 10
17599: PUSH
17600: LD_INT 3
17602: ARRAY
17603: GREATEREQUAL
17604: AND
17605: NOT
17606: IFFALSE 17610
// exit ;
17608: GO 18159
// if GetBType ( bdepot ) = b_depot then
17610: LD_VAR 0 1
17614: PPUSH
17615: CALL_OW 266
17619: PUSH
17620: LD_INT 0
17622: EQUAL
17623: IFFALSE 17635
// dist := 28 else
17625: LD_ADDR_VAR 0 13
17629: PUSH
17630: LD_INT 28
17632: ST_TO_ADDR
17633: GO 17643
// dist := 36 ;
17635: LD_ADDR_VAR 0 13
17639: PUSH
17640: LD_INT 36
17642: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17643: LD_VAR 0 1
17647: PPUSH
17648: LD_VAR 0 3
17652: PPUSH
17653: LD_VAR 0 4
17657: PPUSH
17658: CALL_OW 297
17662: PUSH
17663: LD_VAR 0 13
17667: GREATER
17668: IFFALSE 17672
// exit ;
17670: GO 18159
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17672: LD_ADDR_VAR 0 11
17676: PUSH
17677: LD_VAR 0 2
17681: PPUSH
17682: LD_VAR 0 3
17686: PPUSH
17687: LD_VAR 0 4
17691: PPUSH
17692: LD_VAR 0 5
17696: PPUSH
17697: LD_VAR 0 1
17701: PPUSH
17702: CALL_OW 248
17706: PPUSH
17707: LD_INT 0
17709: PPUSH
17710: CALL 18164 0 6
17714: ST_TO_ADDR
// if not hexes then
17715: LD_VAR 0 11
17719: NOT
17720: IFFALSE 17724
// exit ;
17722: GO 18159
// hex := GetHexInfo ( x , y ) ;
17724: LD_ADDR_VAR 0 14
17728: PUSH
17729: LD_VAR 0 3
17733: PPUSH
17734: LD_VAR 0 4
17738: PPUSH
17739: CALL_OW 546
17743: ST_TO_ADDR
// if hex [ 1 ] then
17744: LD_VAR 0 14
17748: PUSH
17749: LD_INT 1
17751: ARRAY
17752: IFFALSE 17756
// exit ;
17754: GO 18159
// height := hex [ 2 ] ;
17756: LD_ADDR_VAR 0 12
17760: PUSH
17761: LD_VAR 0 14
17765: PUSH
17766: LD_INT 2
17768: ARRAY
17769: ST_TO_ADDR
// for i = 1 to hexes do
17770: LD_ADDR_VAR 0 7
17774: PUSH
17775: DOUBLE
17776: LD_INT 1
17778: DEC
17779: ST_TO_ADDR
17780: LD_VAR 0 11
17784: PUSH
17785: FOR_TO
17786: IFFALSE 18114
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17788: LD_VAR 0 11
17792: PUSH
17793: LD_VAR 0 7
17797: ARRAY
17798: PUSH
17799: LD_INT 1
17801: ARRAY
17802: PPUSH
17803: LD_VAR 0 11
17807: PUSH
17808: LD_VAR 0 7
17812: ARRAY
17813: PUSH
17814: LD_INT 2
17816: ARRAY
17817: PPUSH
17818: CALL_OW 488
17822: NOT
17823: IFFALSE 17827
// continue ;
17825: GO 17785
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17827: LD_ADDR_VAR 0 8
17831: PUSH
17832: LD_VAR 0 11
17836: PUSH
17837: LD_VAR 0 7
17841: ARRAY
17842: PUSH
17843: LD_INT 1
17845: ARRAY
17846: PPUSH
17847: LD_VAR 0 11
17851: PUSH
17852: LD_VAR 0 7
17856: ARRAY
17857: PUSH
17858: LD_INT 2
17860: ARRAY
17861: PPUSH
17862: CALL_OW 546
17866: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17867: LD_VAR 0 8
17871: PUSH
17872: LD_INT 1
17874: ARRAY
17875: PUSH
17876: LD_VAR 0 8
17880: PUSH
17881: LD_INT 2
17883: ARRAY
17884: PUSH
17885: LD_VAR 0 12
17889: PUSH
17890: LD_INT 2
17892: PLUS
17893: GREATER
17894: OR
17895: PUSH
17896: LD_VAR 0 8
17900: PUSH
17901: LD_INT 2
17903: ARRAY
17904: PUSH
17905: LD_VAR 0 12
17909: PUSH
17910: LD_INT 2
17912: MINUS
17913: LESS
17914: OR
17915: PUSH
17916: LD_VAR 0 8
17920: PUSH
17921: LD_INT 3
17923: ARRAY
17924: PUSH
17925: LD_INT 0
17927: PUSH
17928: LD_INT 8
17930: PUSH
17931: LD_INT 9
17933: PUSH
17934: LD_INT 10
17936: PUSH
17937: LD_INT 11
17939: PUSH
17940: LD_INT 12
17942: PUSH
17943: LD_INT 13
17945: PUSH
17946: LD_INT 16
17948: PUSH
17949: LD_INT 17
17951: PUSH
17952: LD_INT 18
17954: PUSH
17955: LD_INT 19
17957: PUSH
17958: LD_INT 20
17960: PUSH
17961: LD_INT 21
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: IN
17979: NOT
17980: OR
17981: PUSH
17982: LD_VAR 0 8
17986: PUSH
17987: LD_INT 5
17989: ARRAY
17990: NOT
17991: OR
17992: PUSH
17993: LD_VAR 0 8
17997: PUSH
17998: LD_INT 6
18000: ARRAY
18001: PUSH
18002: LD_INT 1
18004: PUSH
18005: LD_INT 2
18007: PUSH
18008: LD_INT 7
18010: PUSH
18011: LD_INT 9
18013: PUSH
18014: LD_INT 10
18016: PUSH
18017: LD_INT 11
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: IN
18028: NOT
18029: OR
18030: PUSH
18031: LD_VAR 0 11
18035: PUSH
18036: LD_VAR 0 7
18040: ARRAY
18041: PUSH
18042: LD_INT 1
18044: ARRAY
18045: PPUSH
18046: LD_VAR 0 11
18050: PUSH
18051: LD_VAR 0 7
18055: ARRAY
18056: PUSH
18057: LD_INT 2
18059: ARRAY
18060: PPUSH
18061: CALL_OW 428
18065: PUSH
18066: LD_INT 0
18068: GREATER
18069: OR
18070: PUSH
18071: LD_VAR 0 11
18075: PUSH
18076: LD_VAR 0 7
18080: ARRAY
18081: PUSH
18082: LD_INT 1
18084: ARRAY
18085: PPUSH
18086: LD_VAR 0 11
18090: PUSH
18091: LD_VAR 0 7
18095: ARRAY
18096: PUSH
18097: LD_INT 2
18099: ARRAY
18100: PPUSH
18101: CALL_OW 351
18105: OR
18106: IFFALSE 18112
// exit ;
18108: POP
18109: POP
18110: GO 18159
// end ;
18112: GO 17785
18114: POP
18115: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
18116: LD_VAR 0 1
18120: PPUSH
18121: CALL_OW 255
18125: PPUSH
18126: LD_VAR 0 3
18130: PPUSH
18131: LD_VAR 0 4
18135: PPUSH
18136: LD_INT 20
18138: PPUSH
18139: CALL 11370 0 4
18143: PUSH
18144: LD_INT 4
18146: ARRAY
18147: IFFALSE 18151
// exit ;
18149: GO 18159
// result := true ;
18151: LD_ADDR_VAR 0 6
18155: PUSH
18156: LD_INT 1
18158: ST_TO_ADDR
// end ;
18159: LD_VAR 0 6
18163: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
18164: LD_INT 0
18166: PPUSH
18167: PPUSH
18168: PPUSH
18169: PPUSH
18170: PPUSH
18171: PPUSH
18172: PPUSH
18173: PPUSH
18174: PPUSH
18175: PPUSH
18176: PPUSH
18177: PPUSH
18178: PPUSH
18179: PPUSH
18180: PPUSH
18181: PPUSH
18182: PPUSH
18183: PPUSH
18184: PPUSH
18185: PPUSH
18186: PPUSH
18187: PPUSH
18188: PPUSH
18189: PPUSH
18190: PPUSH
18191: PPUSH
18192: PPUSH
18193: PPUSH
18194: PPUSH
18195: PPUSH
18196: PPUSH
18197: PPUSH
18198: PPUSH
18199: PPUSH
18200: PPUSH
18201: PPUSH
18202: PPUSH
18203: PPUSH
18204: PPUSH
18205: PPUSH
18206: PPUSH
18207: PPUSH
18208: PPUSH
18209: PPUSH
18210: PPUSH
18211: PPUSH
18212: PPUSH
18213: PPUSH
18214: PPUSH
18215: PPUSH
18216: PPUSH
18217: PPUSH
18218: PPUSH
18219: PPUSH
18220: PPUSH
18221: PPUSH
18222: PPUSH
18223: PPUSH
// result = [ ] ;
18224: LD_ADDR_VAR 0 7
18228: PUSH
18229: EMPTY
18230: ST_TO_ADDR
// temp_list = [ ] ;
18231: LD_ADDR_VAR 0 9
18235: PUSH
18236: EMPTY
18237: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18238: LD_VAR 0 4
18242: PUSH
18243: LD_INT 0
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: LD_INT 2
18251: PUSH
18252: LD_INT 3
18254: PUSH
18255: LD_INT 4
18257: PUSH
18258: LD_INT 5
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: IN
18269: NOT
18270: PUSH
18271: LD_VAR 0 1
18275: PUSH
18276: LD_INT 0
18278: PUSH
18279: LD_INT 1
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: IN
18286: PUSH
18287: LD_VAR 0 5
18291: PUSH
18292: LD_INT 1
18294: PUSH
18295: LD_INT 2
18297: PUSH
18298: LD_INT 3
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: LIST
18305: IN
18306: NOT
18307: AND
18308: OR
18309: IFFALSE 18313
// exit ;
18311: GO 36698
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18313: LD_VAR 0 1
18317: PUSH
18318: LD_INT 6
18320: PUSH
18321: LD_INT 7
18323: PUSH
18324: LD_INT 8
18326: PUSH
18327: LD_INT 13
18329: PUSH
18330: LD_INT 12
18332: PUSH
18333: LD_INT 15
18335: PUSH
18336: LD_INT 11
18338: PUSH
18339: LD_INT 14
18341: PUSH
18342: LD_INT 10
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: IN
18356: IFFALSE 18366
// btype = b_lab ;
18358: LD_ADDR_VAR 0 1
18362: PUSH
18363: LD_INT 6
18365: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18366: LD_VAR 0 6
18370: PUSH
18371: LD_INT 0
18373: PUSH
18374: LD_INT 1
18376: PUSH
18377: LD_INT 2
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: LIST
18384: IN
18385: NOT
18386: PUSH
18387: LD_VAR 0 1
18391: PUSH
18392: LD_INT 0
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: LD_INT 2
18400: PUSH
18401: LD_INT 3
18403: PUSH
18404: LD_INT 6
18406: PUSH
18407: LD_INT 36
18409: PUSH
18410: LD_INT 4
18412: PUSH
18413: LD_INT 5
18415: PUSH
18416: LD_INT 31
18418: PUSH
18419: LD_INT 32
18421: PUSH
18422: LD_INT 33
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: IN
18438: NOT
18439: PUSH
18440: LD_VAR 0 6
18444: PUSH
18445: LD_INT 1
18447: EQUAL
18448: AND
18449: OR
18450: PUSH
18451: LD_VAR 0 1
18455: PUSH
18456: LD_INT 2
18458: PUSH
18459: LD_INT 3
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: IN
18466: NOT
18467: PUSH
18468: LD_VAR 0 6
18472: PUSH
18473: LD_INT 2
18475: EQUAL
18476: AND
18477: OR
18478: IFFALSE 18488
// mode = 0 ;
18480: LD_ADDR_VAR 0 6
18484: PUSH
18485: LD_INT 0
18487: ST_TO_ADDR
// case mode of 0 :
18488: LD_VAR 0 6
18492: PUSH
18493: LD_INT 0
18495: DOUBLE
18496: EQUAL
18497: IFTRUE 18501
18499: GO 29954
18501: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18502: LD_ADDR_VAR 0 11
18506: PUSH
18507: LD_INT 0
18509: PUSH
18510: LD_INT 0
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 0
18519: PUSH
18520: LD_INT 1
18522: NEG
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: LD_INT 0
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 1
18540: PUSH
18541: LD_INT 1
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 0
18550: PUSH
18551: LD_INT 1
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 1
18560: NEG
18561: PUSH
18562: LD_INT 0
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 1
18571: NEG
18572: PUSH
18573: LD_INT 1
18575: NEG
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 1
18583: NEG
18584: PUSH
18585: LD_INT 2
18587: NEG
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 0
18595: PUSH
18596: LD_INT 2
18598: NEG
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 1
18606: PUSH
18607: LD_INT 1
18609: NEG
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 1
18617: PUSH
18618: LD_INT 2
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 0
18627: PUSH
18628: LD_INT 2
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 1
18637: NEG
18638: PUSH
18639: LD_INT 1
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 1
18648: PUSH
18649: LD_INT 3
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 0
18658: PUSH
18659: LD_INT 3
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 1
18668: NEG
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18695: LD_ADDR_VAR 0 12
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: LD_INT 0
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 0
18712: PUSH
18713: LD_INT 1
18715: NEG
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: LD_INT 0
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 0
18743: PUSH
18744: LD_INT 1
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 1
18753: NEG
18754: PUSH
18755: LD_INT 0
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 1
18764: NEG
18765: PUSH
18766: LD_INT 1
18768: NEG
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 1
18776: PUSH
18777: LD_INT 1
18779: NEG
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 2
18787: PUSH
18788: LD_INT 0
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 2
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 1
18807: NEG
18808: PUSH
18809: LD_INT 1
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 2
18818: NEG
18819: PUSH
18820: LD_INT 0
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 2
18829: NEG
18830: PUSH
18831: LD_INT 1
18833: NEG
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 2
18841: NEG
18842: PUSH
18843: LD_INT 1
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 3
18852: NEG
18853: PUSH
18854: LD_INT 0
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 3
18863: NEG
18864: PUSH
18865: LD_INT 1
18867: NEG
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18891: LD_ADDR_VAR 0 13
18895: PUSH
18896: LD_INT 0
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 0
18908: PUSH
18909: LD_INT 1
18911: NEG
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: LD_INT 1
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 0
18939: PUSH
18940: LD_INT 1
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 1
18949: NEG
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 1
18960: NEG
18961: PUSH
18962: LD_INT 1
18964: NEG
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 1
18972: NEG
18973: PUSH
18974: LD_INT 2
18976: NEG
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 2
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 2
18994: PUSH
18995: LD_INT 2
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 1
19004: PUSH
19005: LD_INT 2
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 2
19014: NEG
19015: PUSH
19016: LD_INT 1
19018: NEG
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 2
19026: NEG
19027: PUSH
19028: LD_INT 2
19030: NEG
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 2
19038: NEG
19039: PUSH
19040: LD_INT 3
19042: NEG
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 3
19050: NEG
19051: PUSH
19052: LD_INT 2
19054: NEG
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 3
19062: NEG
19063: PUSH
19064: LD_INT 3
19066: NEG
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19090: LD_ADDR_VAR 0 14
19094: PUSH
19095: LD_INT 0
19097: PUSH
19098: LD_INT 0
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 0
19107: PUSH
19108: LD_INT 1
19110: NEG
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 1
19118: PUSH
19119: LD_INT 0
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 1
19128: PUSH
19129: LD_INT 1
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 0
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 1
19148: NEG
19149: PUSH
19150: LD_INT 0
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 1
19159: NEG
19160: PUSH
19161: LD_INT 1
19163: NEG
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 1
19171: NEG
19172: PUSH
19173: LD_INT 2
19175: NEG
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 0
19183: PUSH
19184: LD_INT 2
19186: NEG
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: LD_INT 1
19197: NEG
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 1
19205: PUSH
19206: LD_INT 2
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 0
19215: PUSH
19216: LD_INT 2
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 1
19225: NEG
19226: PUSH
19227: LD_INT 1
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 1
19236: NEG
19237: PUSH
19238: LD_INT 3
19240: NEG
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 0
19248: PUSH
19249: LD_INT 3
19251: NEG
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: LD_INT 2
19262: NEG
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19286: LD_ADDR_VAR 0 15
19290: PUSH
19291: LD_INT 0
19293: PUSH
19294: LD_INT 0
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 0
19303: PUSH
19304: LD_INT 1
19306: NEG
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: LD_INT 0
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 0
19334: PUSH
19335: LD_INT 1
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 1
19344: NEG
19345: PUSH
19346: LD_INT 0
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 1
19355: NEG
19356: PUSH
19357: LD_INT 1
19359: NEG
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 1
19367: PUSH
19368: LD_INT 1
19370: NEG
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: LD_INT 0
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 1
19398: NEG
19399: PUSH
19400: LD_INT 1
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 2
19409: NEG
19410: PUSH
19411: LD_INT 0
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 2
19420: NEG
19421: PUSH
19422: LD_INT 1
19424: NEG
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 2
19432: PUSH
19433: LD_INT 1
19435: NEG
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 3
19443: PUSH
19444: LD_INT 0
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 3
19453: PUSH
19454: LD_INT 1
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19479: LD_ADDR_VAR 0 16
19483: PUSH
19484: LD_INT 0
19486: PUSH
19487: LD_INT 0
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 0
19496: PUSH
19497: LD_INT 1
19499: NEG
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 1
19517: PUSH
19518: LD_INT 1
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 0
19527: PUSH
19528: LD_INT 1
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 1
19537: NEG
19538: PUSH
19539: LD_INT 0
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 1
19548: NEG
19549: PUSH
19550: LD_INT 1
19552: NEG
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 1
19560: NEG
19561: PUSH
19562: LD_INT 2
19564: NEG
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 2
19572: PUSH
19573: LD_INT 1
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 2
19582: PUSH
19583: LD_INT 2
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 1
19592: PUSH
19593: LD_INT 2
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 2
19602: NEG
19603: PUSH
19604: LD_INT 1
19606: NEG
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 2
19614: NEG
19615: PUSH
19616: LD_INT 2
19618: NEG
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 3
19626: PUSH
19627: LD_INT 2
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 3
19636: PUSH
19637: LD_INT 3
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 2
19646: PUSH
19647: LD_INT 3
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19672: LD_ADDR_VAR 0 17
19676: PUSH
19677: LD_INT 0
19679: PUSH
19680: LD_INT 0
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 0
19689: PUSH
19690: LD_INT 1
19692: NEG
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: LD_INT 0
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 1
19710: PUSH
19711: LD_INT 1
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 0
19720: PUSH
19721: LD_INT 1
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 1
19730: NEG
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 1
19741: NEG
19742: PUSH
19743: LD_INT 1
19745: NEG
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 1
19753: NEG
19754: PUSH
19755: LD_INT 2
19757: NEG
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: LD_INT 2
19768: NEG
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 1
19776: PUSH
19777: LD_INT 1
19779: NEG
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: LD_INT 0
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: LD_INT 1
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: LD_INT 2
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 1
19817: PUSH
19818: LD_INT 2
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 0
19827: PUSH
19828: LD_INT 2
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 1
19837: NEG
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 2
19848: NEG
19849: PUSH
19850: LD_INT 0
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 2
19859: NEG
19860: PUSH
19861: LD_INT 1
19863: NEG
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 2
19871: NEG
19872: PUSH
19873: LD_INT 2
19875: NEG
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19902: LD_ADDR_VAR 0 18
19906: PUSH
19907: LD_INT 0
19909: PUSH
19910: LD_INT 0
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 0
19919: PUSH
19920: LD_INT 1
19922: NEG
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 1
19930: PUSH
19931: LD_INT 0
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 0
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 1
19960: NEG
19961: PUSH
19962: LD_INT 0
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 1
19971: NEG
19972: PUSH
19973: LD_INT 1
19975: NEG
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 1
19983: NEG
19984: PUSH
19985: LD_INT 2
19987: NEG
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: LD_INT 2
19998: NEG
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: LD_INT 1
20009: NEG
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 2
20017: PUSH
20018: LD_INT 0
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 2
20027: PUSH
20028: LD_INT 1
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 2
20037: PUSH
20038: LD_INT 2
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 1
20047: PUSH
20048: LD_INT 2
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 0
20057: PUSH
20058: LD_INT 2
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 1
20067: NEG
20068: PUSH
20069: LD_INT 1
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 2
20078: NEG
20079: PUSH
20080: LD_INT 0
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 2
20089: NEG
20090: PUSH
20091: LD_INT 1
20093: NEG
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 2
20101: NEG
20102: PUSH
20103: LD_INT 2
20105: NEG
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20132: LD_ADDR_VAR 0 19
20136: PUSH
20137: LD_INT 0
20139: PUSH
20140: LD_INT 0
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 0
20149: PUSH
20150: LD_INT 1
20152: NEG
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 1
20160: PUSH
20161: LD_INT 0
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 0
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 1
20190: NEG
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 1
20201: NEG
20202: PUSH
20203: LD_INT 1
20205: NEG
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 1
20213: NEG
20214: PUSH
20215: LD_INT 2
20217: NEG
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: LD_INT 2
20228: NEG
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 1
20236: PUSH
20237: LD_INT 1
20239: NEG
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: LD_INT 0
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 2
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: LD_INT 2
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 0
20287: PUSH
20288: LD_INT 2
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 1
20297: NEG
20298: PUSH
20299: LD_INT 1
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 2
20308: NEG
20309: PUSH
20310: LD_INT 0
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 2
20319: NEG
20320: PUSH
20321: LD_INT 1
20323: NEG
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 2
20331: NEG
20332: PUSH
20333: LD_INT 2
20335: NEG
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20362: LD_ADDR_VAR 0 20
20366: PUSH
20367: LD_INT 0
20369: PUSH
20370: LD_INT 0
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: LD_INT 1
20382: NEG
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: LD_INT 0
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 1
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: LD_INT 1
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 1
20420: NEG
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 1
20431: NEG
20432: PUSH
20433: LD_INT 1
20435: NEG
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 1
20443: NEG
20444: PUSH
20445: LD_INT 2
20447: NEG
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: LD_INT 2
20458: NEG
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 1
20466: PUSH
20467: LD_INT 1
20469: NEG
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 2
20477: PUSH
20478: LD_INT 0
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 2
20487: PUSH
20488: LD_INT 1
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 2
20497: PUSH
20498: LD_INT 2
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 1
20507: PUSH
20508: LD_INT 2
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 0
20517: PUSH
20518: LD_INT 2
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 1
20527: NEG
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 2
20538: NEG
20539: PUSH
20540: LD_INT 0
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 2
20549: NEG
20550: PUSH
20551: LD_INT 1
20553: NEG
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 2
20561: NEG
20562: PUSH
20563: LD_INT 2
20565: NEG
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20592: LD_ADDR_VAR 0 21
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: LD_INT 0
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 0
20609: PUSH
20610: LD_INT 1
20612: NEG
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 1
20620: PUSH
20621: LD_INT 0
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: LD_INT 1
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 0
20640: PUSH
20641: LD_INT 1
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 1
20650: NEG
20651: PUSH
20652: LD_INT 0
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 1
20661: NEG
20662: PUSH
20663: LD_INT 1
20665: NEG
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 1
20673: NEG
20674: PUSH
20675: LD_INT 2
20677: NEG
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: LD_INT 2
20688: NEG
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 1
20696: PUSH
20697: LD_INT 1
20699: NEG
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 2
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: LD_INT 1
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 2
20727: PUSH
20728: LD_INT 2
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 1
20737: PUSH
20738: LD_INT 2
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 0
20747: PUSH
20748: LD_INT 2
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 1
20757: NEG
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 2
20768: NEG
20769: PUSH
20770: LD_INT 0
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 2
20779: NEG
20780: PUSH
20781: LD_INT 1
20783: NEG
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 2
20791: NEG
20792: PUSH
20793: LD_INT 2
20795: NEG
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20822: LD_ADDR_VAR 0 22
20826: PUSH
20827: LD_INT 0
20829: PUSH
20830: LD_INT 0
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 0
20839: PUSH
20840: LD_INT 1
20842: NEG
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: LD_INT 1
20850: PUSH
20851: LD_INT 0
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 1
20860: PUSH
20861: LD_INT 1
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: LD_INT 1
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 1
20880: NEG
20881: PUSH
20882: LD_INT 0
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 1
20891: NEG
20892: PUSH
20893: LD_INT 1
20895: NEG
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 1
20903: NEG
20904: PUSH
20905: LD_INT 2
20907: NEG
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 0
20915: PUSH
20916: LD_INT 2
20918: NEG
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 1
20926: PUSH
20927: LD_INT 1
20929: NEG
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 2
20937: PUSH
20938: LD_INT 0
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 2
20947: PUSH
20948: LD_INT 1
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 2
20957: PUSH
20958: LD_INT 2
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 1
20967: PUSH
20968: LD_INT 2
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 0
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 1
20987: NEG
20988: PUSH
20989: LD_INT 1
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 2
20998: NEG
20999: PUSH
21000: LD_INT 0
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 2
21009: NEG
21010: PUSH
21011: LD_INT 1
21013: NEG
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 2
21021: NEG
21022: PUSH
21023: LD_INT 2
21025: NEG
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21052: LD_ADDR_VAR 0 23
21056: PUSH
21057: LD_INT 0
21059: PUSH
21060: LD_INT 0
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 0
21069: PUSH
21070: LD_INT 1
21072: NEG
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: LD_INT 0
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 1
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: LD_INT 1
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 1
21110: NEG
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: NEG
21122: PUSH
21123: LD_INT 1
21125: NEG
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 1
21133: NEG
21134: PUSH
21135: LD_INT 2
21137: NEG
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 0
21145: PUSH
21146: LD_INT 2
21148: NEG
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 1
21156: PUSH
21157: LD_INT 1
21159: NEG
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 2
21167: PUSH
21168: LD_INT 0
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 2
21177: PUSH
21178: LD_INT 1
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: LD_INT 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 1
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 0
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 1
21217: NEG
21218: PUSH
21219: LD_INT 1
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 2
21228: NEG
21229: PUSH
21230: LD_INT 0
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 2
21239: NEG
21240: PUSH
21241: LD_INT 1
21243: NEG
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 2
21251: NEG
21252: PUSH
21253: LD_INT 2
21255: NEG
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 2
21263: NEG
21264: PUSH
21265: LD_INT 3
21267: NEG
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 1
21275: NEG
21276: PUSH
21277: LD_INT 3
21279: NEG
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 1
21287: PUSH
21288: LD_INT 2
21290: NEG
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 2
21298: PUSH
21299: LD_INT 1
21301: NEG
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21332: LD_ADDR_VAR 0 24
21336: PUSH
21337: LD_INT 0
21339: PUSH
21340: LD_INT 0
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 0
21349: PUSH
21350: LD_INT 1
21352: NEG
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 1
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 1
21370: PUSH
21371: LD_INT 1
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 0
21380: PUSH
21381: LD_INT 1
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 1
21390: NEG
21391: PUSH
21392: LD_INT 0
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 1
21401: NEG
21402: PUSH
21403: LD_INT 1
21405: NEG
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 1
21413: NEG
21414: PUSH
21415: LD_INT 2
21417: NEG
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: LD_INT 2
21428: NEG
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 1
21436: PUSH
21437: LD_INT 1
21439: NEG
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 2
21447: PUSH
21448: LD_INT 0
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 2
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 2
21467: PUSH
21468: LD_INT 2
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 1
21477: PUSH
21478: LD_INT 2
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 0
21487: PUSH
21488: LD_INT 2
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 1
21497: NEG
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 2
21508: NEG
21509: PUSH
21510: LD_INT 0
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 2
21519: NEG
21520: PUSH
21521: LD_INT 1
21523: NEG
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 2
21531: NEG
21532: PUSH
21533: LD_INT 2
21535: NEG
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 1
21543: PUSH
21544: LD_INT 2
21546: NEG
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 2
21554: PUSH
21555: LD_INT 1
21557: NEG
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 3
21565: PUSH
21566: LD_INT 1
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 3
21575: PUSH
21576: LD_INT 2
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21608: LD_ADDR_VAR 0 25
21612: PUSH
21613: LD_INT 0
21615: PUSH
21616: LD_INT 0
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 0
21625: PUSH
21626: LD_INT 1
21628: NEG
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 1
21636: PUSH
21637: LD_INT 0
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 0
21656: PUSH
21657: LD_INT 1
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 1
21666: NEG
21667: PUSH
21668: LD_INT 0
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 1
21677: NEG
21678: PUSH
21679: LD_INT 1
21681: NEG
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 1
21689: NEG
21690: PUSH
21691: LD_INT 2
21693: NEG
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 0
21701: PUSH
21702: LD_INT 2
21704: NEG
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 1
21712: PUSH
21713: LD_INT 1
21715: NEG
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 2
21723: PUSH
21724: LD_INT 0
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 2
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 2
21743: PUSH
21744: LD_INT 2
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 1
21753: PUSH
21754: LD_INT 2
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: LD_INT 2
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 1
21773: NEG
21774: PUSH
21775: LD_INT 1
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 2
21784: NEG
21785: PUSH
21786: LD_INT 0
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 2
21795: NEG
21796: PUSH
21797: LD_INT 1
21799: NEG
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 2
21807: NEG
21808: PUSH
21809: LD_INT 2
21811: NEG
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 3
21819: PUSH
21820: LD_INT 1
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 3
21829: PUSH
21830: LD_INT 2
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 2
21839: PUSH
21840: LD_INT 3
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 1
21849: PUSH
21850: LD_INT 3
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21882: LD_ADDR_VAR 0 26
21886: PUSH
21887: LD_INT 0
21889: PUSH
21890: LD_INT 0
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 0
21899: PUSH
21900: LD_INT 1
21902: NEG
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 1
21910: PUSH
21911: LD_INT 0
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 1
21920: PUSH
21921: LD_INT 1
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: LD_INT 1
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 1
21940: NEG
21941: PUSH
21942: LD_INT 0
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 1
21951: NEG
21952: PUSH
21953: LD_INT 1
21955: NEG
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 1
21963: NEG
21964: PUSH
21965: LD_INT 2
21967: NEG
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 0
21975: PUSH
21976: LD_INT 2
21978: NEG
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 1
21986: PUSH
21987: LD_INT 1
21989: NEG
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 2
21997: PUSH
21998: LD_INT 0
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 2
22007: PUSH
22008: LD_INT 1
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 2
22017: PUSH
22018: LD_INT 2
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 1
22027: PUSH
22028: LD_INT 2
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 0
22037: PUSH
22038: LD_INT 2
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 1
22047: NEG
22048: PUSH
22049: LD_INT 1
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 2
22058: NEG
22059: PUSH
22060: LD_INT 0
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 2
22069: NEG
22070: PUSH
22071: LD_INT 1
22073: NEG
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 2
22081: NEG
22082: PUSH
22083: LD_INT 2
22085: NEG
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: LD_INT 3
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 1
22103: PUSH
22104: LD_INT 3
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 1
22113: NEG
22114: PUSH
22115: LD_INT 2
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 2
22124: NEG
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22158: LD_ADDR_VAR 0 27
22162: PUSH
22163: LD_INT 0
22165: PUSH
22166: LD_INT 0
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 0
22175: PUSH
22176: LD_INT 1
22178: NEG
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 1
22186: PUSH
22187: LD_INT 0
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 1
22196: PUSH
22197: LD_INT 1
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: LD_INT 1
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 1
22216: NEG
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 1
22227: NEG
22228: PUSH
22229: LD_INT 1
22231: NEG
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 1
22239: NEG
22240: PUSH
22241: LD_INT 2
22243: NEG
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 0
22251: PUSH
22252: LD_INT 2
22254: NEG
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 1
22262: PUSH
22263: LD_INT 1
22265: NEG
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 2
22273: PUSH
22274: LD_INT 0
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 2
22283: PUSH
22284: LD_INT 1
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 2
22293: PUSH
22294: LD_INT 2
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: LD_INT 2
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 0
22313: PUSH
22314: LD_INT 2
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 1
22323: NEG
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 2
22334: NEG
22335: PUSH
22336: LD_INT 0
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 2
22345: NEG
22346: PUSH
22347: LD_INT 1
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 2
22357: NEG
22358: PUSH
22359: LD_INT 2
22361: NEG
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 1
22369: NEG
22370: PUSH
22371: LD_INT 2
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 2
22380: NEG
22381: PUSH
22382: LD_INT 1
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 3
22391: NEG
22392: PUSH
22393: LD_INT 1
22395: NEG
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 3
22403: NEG
22404: PUSH
22405: LD_INT 2
22407: NEG
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22438: LD_ADDR_VAR 0 28
22442: PUSH
22443: LD_INT 0
22445: PUSH
22446: LD_INT 0
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 0
22455: PUSH
22456: LD_INT 1
22458: NEG
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 1
22466: PUSH
22467: LD_INT 0
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 1
22476: PUSH
22477: LD_INT 1
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 0
22486: PUSH
22487: LD_INT 1
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 1
22496: NEG
22497: PUSH
22498: LD_INT 0
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 1
22507: NEG
22508: PUSH
22509: LD_INT 1
22511: NEG
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 1
22519: NEG
22520: PUSH
22521: LD_INT 2
22523: NEG
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: LD_INT 2
22534: NEG
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: LD_INT 1
22545: NEG
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 2
22553: PUSH
22554: LD_INT 0
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 2
22563: PUSH
22564: LD_INT 1
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 2
22573: PUSH
22574: LD_INT 2
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: LD_INT 2
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: LD_INT 2
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 1
22603: NEG
22604: PUSH
22605: LD_INT 1
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 2
22614: NEG
22615: PUSH
22616: LD_INT 0
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 2
22625: NEG
22626: PUSH
22627: LD_INT 1
22629: NEG
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 2
22637: NEG
22638: PUSH
22639: LD_INT 2
22641: NEG
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 2
22649: NEG
22650: PUSH
22651: LD_INT 3
22653: NEG
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 1
22661: NEG
22662: PUSH
22663: LD_INT 3
22665: NEG
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 3
22673: NEG
22674: PUSH
22675: LD_INT 1
22677: NEG
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 3
22685: NEG
22686: PUSH
22687: LD_INT 2
22689: NEG
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22720: LD_ADDR_VAR 0 29
22724: PUSH
22725: LD_INT 0
22727: PUSH
22728: LD_INT 0
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 0
22737: PUSH
22738: LD_INT 1
22740: NEG
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 1
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 1
22758: PUSH
22759: LD_INT 1
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 0
22768: PUSH
22769: LD_INT 1
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 1
22778: NEG
22779: PUSH
22780: LD_INT 0
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 1
22789: NEG
22790: PUSH
22791: LD_INT 1
22793: NEG
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 1
22801: NEG
22802: PUSH
22803: LD_INT 2
22805: NEG
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 0
22813: PUSH
22814: LD_INT 2
22816: NEG
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 1
22824: PUSH
22825: LD_INT 1
22827: NEG
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 2
22835: PUSH
22836: LD_INT 0
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 2
22845: PUSH
22846: LD_INT 1
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: LD_INT 2
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 0
22865: PUSH
22866: LD_INT 2
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 1
22875: NEG
22876: PUSH
22877: LD_INT 1
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 2
22886: NEG
22887: PUSH
22888: LD_INT 1
22890: NEG
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 2
22898: NEG
22899: PUSH
22900: LD_INT 2
22902: NEG
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 2
22910: NEG
22911: PUSH
22912: LD_INT 3
22914: NEG
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 2
22922: PUSH
22923: LD_INT 1
22925: NEG
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 3
22933: PUSH
22934: LD_INT 1
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 1
22943: PUSH
22944: LD_INT 3
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 1
22953: NEG
22954: PUSH
22955: LD_INT 2
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 3
22964: NEG
22965: PUSH
22966: LD_INT 2
22968: NEG
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22999: LD_ADDR_VAR 0 30
23003: PUSH
23004: LD_INT 0
23006: PUSH
23007: LD_INT 0
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 0
23016: PUSH
23017: LD_INT 1
23019: NEG
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: LD_INT 0
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 1
23037: PUSH
23038: LD_INT 1
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 0
23047: PUSH
23048: LD_INT 1
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 1
23057: NEG
23058: PUSH
23059: LD_INT 0
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 1
23068: NEG
23069: PUSH
23070: LD_INT 1
23072: NEG
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 1
23080: NEG
23081: PUSH
23082: LD_INT 2
23084: NEG
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: LD_INT 2
23095: NEG
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: LD_INT 1
23106: NEG
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 2
23114: PUSH
23115: LD_INT 0
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 2
23124: PUSH
23125: LD_INT 1
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 2
23134: PUSH
23135: LD_INT 2
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 1
23144: PUSH
23145: LD_INT 2
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 1
23154: NEG
23155: PUSH
23156: LD_INT 1
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 2
23165: NEG
23166: PUSH
23167: LD_INT 0
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 2
23176: NEG
23177: PUSH
23178: LD_INT 1
23180: NEG
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 1
23188: NEG
23189: PUSH
23190: LD_INT 3
23192: NEG
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 1
23200: PUSH
23201: LD_INT 2
23203: NEG
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 3
23211: PUSH
23212: LD_INT 2
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 2
23221: PUSH
23222: LD_INT 3
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 2
23231: NEG
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 3
23242: NEG
23243: PUSH
23244: LD_INT 1
23246: NEG
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23277: LD_ADDR_VAR 0 31
23281: PUSH
23282: LD_INT 0
23284: PUSH
23285: LD_INT 0
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: LD_INT 1
23297: NEG
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 1
23305: PUSH
23306: LD_INT 0
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 1
23315: PUSH
23316: LD_INT 1
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 0
23325: PUSH
23326: LD_INT 1
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 1
23335: NEG
23336: PUSH
23337: LD_INT 0
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 1
23346: NEG
23347: PUSH
23348: LD_INT 1
23350: NEG
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 1
23358: NEG
23359: PUSH
23360: LD_INT 2
23362: NEG
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: LD_INT 1
23373: NEG
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 2
23381: PUSH
23382: LD_INT 0
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 2
23391: PUSH
23392: LD_INT 1
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: LD_INT 2
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: LD_INT 2
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 0
23421: PUSH
23422: LD_INT 2
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: PUSH
23433: LD_INT 1
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 2
23442: NEG
23443: PUSH
23444: LD_INT 1
23446: NEG
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 2
23454: NEG
23455: PUSH
23456: LD_INT 2
23458: NEG
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 2
23466: NEG
23467: PUSH
23468: LD_INT 3
23470: NEG
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 2
23478: PUSH
23479: LD_INT 1
23481: NEG
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 3
23489: PUSH
23490: LD_INT 1
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 1
23499: PUSH
23500: LD_INT 3
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 1
23509: NEG
23510: PUSH
23511: LD_INT 2
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 3
23520: NEG
23521: PUSH
23522: LD_INT 2
23524: NEG
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23555: LD_ADDR_VAR 0 32
23559: PUSH
23560: LD_INT 0
23562: PUSH
23563: LD_INT 0
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: LD_INT 1
23575: NEG
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 1
23593: PUSH
23594: LD_INT 1
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 0
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: PUSH
23615: LD_INT 0
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 1
23624: NEG
23625: PUSH
23626: LD_INT 1
23628: NEG
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 1
23636: NEG
23637: PUSH
23638: LD_INT 2
23640: NEG
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 0
23648: PUSH
23649: LD_INT 2
23651: NEG
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: LD_INT 1
23662: NEG
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 2
23670: PUSH
23671: LD_INT 1
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 2
23680: PUSH
23681: LD_INT 2
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: LD_INT 2
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 0
23700: PUSH
23701: LD_INT 2
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 1
23710: NEG
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 2
23721: NEG
23722: PUSH
23723: LD_INT 0
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 2
23732: NEG
23733: PUSH
23734: LD_INT 1
23736: NEG
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: NEG
23745: PUSH
23746: LD_INT 3
23748: NEG
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 1
23756: PUSH
23757: LD_INT 2
23759: NEG
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 3
23767: PUSH
23768: LD_INT 2
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 2
23777: PUSH
23778: LD_INT 3
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 2
23787: NEG
23788: PUSH
23789: LD_INT 1
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 3
23798: NEG
23799: PUSH
23800: LD_INT 1
23802: NEG
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23833: LD_ADDR_VAR 0 33
23837: PUSH
23838: LD_INT 0
23840: PUSH
23841: LD_INT 0
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: LD_INT 0
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 1
23871: PUSH
23872: LD_INT 1
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 0
23881: PUSH
23882: LD_INT 1
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 1
23891: NEG
23892: PUSH
23893: LD_INT 0
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 1
23902: NEG
23903: PUSH
23904: LD_INT 1
23906: NEG
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 1
23914: NEG
23915: PUSH
23916: LD_INT 2
23918: NEG
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: LD_INT 1
23929: NEG
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 2
23947: PUSH
23948: LD_INT 1
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 1
23957: PUSH
23958: LD_INT 2
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 0
23967: PUSH
23968: LD_INT 2
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 1
23977: NEG
23978: PUSH
23979: LD_INT 1
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 2
23988: NEG
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 2
23999: NEG
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 2
24011: NEG
24012: PUSH
24013: LD_INT 2
24015: NEG
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 2
24023: NEG
24024: PUSH
24025: LD_INT 3
24027: NEG
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 2
24035: PUSH
24036: LD_INT 1
24038: NEG
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 3
24046: PUSH
24047: LD_INT 1
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 1
24056: PUSH
24057: LD_INT 3
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 1
24066: NEG
24067: PUSH
24068: LD_INT 2
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 3
24077: NEG
24078: PUSH
24079: LD_INT 2
24081: NEG
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24112: LD_ADDR_VAR 0 34
24116: PUSH
24117: LD_INT 0
24119: PUSH
24120: LD_INT 0
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 0
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 1
24140: PUSH
24141: LD_INT 0
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: LD_INT 1
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: LD_INT 1
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 1
24170: NEG
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: LD_INT 1
24185: NEG
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 1
24193: NEG
24194: PUSH
24195: LD_INT 2
24197: NEG
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: LD_INT 2
24208: NEG
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 1
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 2
24227: PUSH
24228: LD_INT 1
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 2
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: LD_INT 2
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 1
24257: NEG
24258: PUSH
24259: LD_INT 1
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 2
24268: NEG
24269: PUSH
24270: LD_INT 0
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 2
24279: NEG
24280: PUSH
24281: LD_INT 1
24283: NEG
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 2
24291: NEG
24292: PUSH
24293: LD_INT 2
24295: NEG
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: PUSH
24305: LD_INT 3
24307: NEG
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 1
24315: PUSH
24316: LD_INT 2
24318: NEG
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 3
24326: PUSH
24327: LD_INT 2
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 2
24336: PUSH
24337: LD_INT 3
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 2
24346: NEG
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 3
24357: NEG
24358: PUSH
24359: LD_INT 1
24361: NEG
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24392: LD_ADDR_VAR 0 35
24396: PUSH
24397: LD_INT 0
24399: PUSH
24400: LD_INT 0
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 0
24409: PUSH
24410: LD_INT 1
24412: NEG
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 1
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: LD_INT 1
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 0
24440: PUSH
24441: LD_INT 1
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 1
24450: NEG
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 1
24461: NEG
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 2
24473: PUSH
24474: LD_INT 1
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 2
24483: NEG
24484: PUSH
24485: LD_INT 1
24487: NEG
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24504: LD_ADDR_VAR 0 36
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: LD_INT 0
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: LD_INT 1
24524: NEG
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 1
24532: PUSH
24533: LD_INT 0
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: LD_INT 1
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 0
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 1
24562: NEG
24563: PUSH
24564: LD_INT 0
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 1
24573: NEG
24574: PUSH
24575: LD_INT 1
24577: NEG
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 1
24585: NEG
24586: PUSH
24587: LD_INT 2
24589: NEG
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 1
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24616: LD_ADDR_VAR 0 37
24620: PUSH
24621: LD_INT 0
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: LD_INT 1
24636: NEG
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: LD_INT 0
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 1
24654: PUSH
24655: LD_INT 1
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: LD_INT 1
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: NEG
24675: PUSH
24676: LD_INT 0
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 1
24685: NEG
24686: PUSH
24687: LD_INT 1
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 1
24697: PUSH
24698: LD_INT 1
24700: NEG
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 1
24708: NEG
24709: PUSH
24710: LD_INT 1
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24728: LD_ADDR_VAR 0 38
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: LD_INT 0
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 0
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 1
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 1
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 1
24786: NEG
24787: PUSH
24788: LD_INT 0
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 1
24797: NEG
24798: PUSH
24799: LD_INT 1
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 2
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 2
24819: NEG
24820: PUSH
24821: LD_INT 1
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24840: LD_ADDR_VAR 0 39
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: LD_INT 0
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 0
24857: PUSH
24858: LD_INT 1
24860: NEG
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 1
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 0
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 1
24898: NEG
24899: PUSH
24900: LD_INT 0
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 1
24909: NEG
24910: PUSH
24911: LD_INT 1
24913: NEG
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: NEG
24922: PUSH
24923: LD_INT 2
24925: NEG
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 1
24933: PUSH
24934: LD_INT 2
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24952: LD_ADDR_VAR 0 40
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 0
24969: PUSH
24970: LD_INT 1
24972: NEG
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 1
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 1
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 0
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 1
25010: NEG
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 1
25021: NEG
25022: PUSH
25023: LD_INT 1
25025: NEG
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: PUSH
25034: LD_INT 1
25036: NEG
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 1
25044: NEG
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25064: LD_ADDR_VAR 0 41
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 0
25081: PUSH
25082: LD_INT 1
25084: NEG
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: NEG
25134: PUSH
25135: LD_INT 1
25137: NEG
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 1
25145: NEG
25146: PUSH
25147: LD_INT 2
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: LD_INT 1
25160: NEG
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 2
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 2
25188: PUSH
25189: LD_INT 2
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: LD_INT 2
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 1
25208: NEG
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 2
25219: NEG
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 2
25230: NEG
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 2
25242: NEG
25243: PUSH
25244: LD_INT 2
25246: NEG
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 2
25254: NEG
25255: PUSH
25256: LD_INT 3
25258: NEG
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 2
25266: PUSH
25267: LD_INT 1
25269: NEG
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 3
25277: PUSH
25278: LD_INT 0
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 3
25287: PUSH
25288: LD_INT 1
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 3
25297: PUSH
25298: LD_INT 2
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 3
25307: PUSH
25308: LD_INT 3
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 2
25317: PUSH
25318: LD_INT 3
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 2
25327: NEG
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 3
25338: NEG
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 3
25349: NEG
25350: PUSH
25351: LD_INT 1
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 3
25361: NEG
25362: PUSH
25363: LD_INT 2
25365: NEG
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 3
25373: NEG
25374: PUSH
25375: LD_INT 3
25377: NEG
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25414: LD_ADDR_VAR 0 42
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 1
25495: NEG
25496: PUSH
25497: LD_INT 2
25499: NEG
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: LD_INT 2
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: LD_INT 1
25521: NEG
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 2
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 2
25539: PUSH
25540: LD_INT 2
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: LD_INT 2
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: LD_INT 2
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: NEG
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 2
25580: NEG
25581: PUSH
25582: LD_INT 1
25584: NEG
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 2
25592: NEG
25593: PUSH
25594: LD_INT 2
25596: NEG
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 2
25604: NEG
25605: PUSH
25606: LD_INT 3
25608: NEG
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: LD_INT 3
25620: NEG
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: LD_INT 3
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: LD_INT 2
25642: NEG
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 3
25650: PUSH
25651: LD_INT 2
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 3
25660: PUSH
25661: LD_INT 3
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 2
25670: PUSH
25671: LD_INT 3
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: LD_INT 3
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: LD_INT 3
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: NEG
25701: PUSH
25702: LD_INT 2
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 3
25711: NEG
25712: PUSH
25713: LD_INT 2
25715: NEG
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 3
25723: NEG
25724: PUSH
25725: LD_INT 3
25727: NEG
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25764: LD_ADDR_VAR 0 43
25768: PUSH
25769: LD_INT 0
25771: PUSH
25772: LD_INT 0
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 0
25781: PUSH
25782: LD_INT 1
25784: NEG
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 1
25792: PUSH
25793: LD_INT 0
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 1
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 0
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 1
25822: NEG
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PUSH
25835: LD_INT 1
25837: NEG
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: PUSH
25847: LD_INT 2
25849: NEG
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: LD_INT 2
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: LD_INT 1
25871: NEG
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 2
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 2
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 1
25899: PUSH
25900: LD_INT 2
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: LD_INT 2
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: LD_INT 1
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 2
25930: NEG
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 2
25941: NEG
25942: PUSH
25943: LD_INT 1
25945: NEG
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: LD_INT 3
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: LD_INT 3
25968: NEG
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 1
25976: PUSH
25977: LD_INT 2
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 3
25998: PUSH
25999: LD_INT 0
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 3
26008: PUSH
26009: LD_INT 1
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 1
26018: PUSH
26019: LD_INT 3
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: LD_INT 3
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 1
26038: NEG
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: NEG
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 3
26060: NEG
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 3
26071: NEG
26072: PUSH
26073: LD_INT 1
26075: NEG
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26112: LD_ADDR_VAR 0 44
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 0
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 1
26150: PUSH
26151: LD_INT 1
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: LD_INT 1
26185: NEG
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: LD_INT 2
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: LD_INT 1
26208: NEG
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 2
26216: PUSH
26217: LD_INT 0
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 2
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 2
26236: PUSH
26237: LD_INT 2
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: PUSH
26247: LD_INT 2
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 1
26256: NEG
26257: PUSH
26258: LD_INT 1
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 2
26267: NEG
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 2
26278: NEG
26279: PUSH
26280: LD_INT 1
26282: NEG
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 2
26290: NEG
26291: PUSH
26292: LD_INT 2
26294: NEG
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 2
26302: NEG
26303: PUSH
26304: LD_INT 3
26306: NEG
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 2
26314: PUSH
26315: LD_INT 1
26317: NEG
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 3
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 3
26335: PUSH
26336: LD_INT 1
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 3
26345: PUSH
26346: LD_INT 2
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 3
26355: PUSH
26356: LD_INT 3
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 2
26365: PUSH
26366: LD_INT 3
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 2
26375: NEG
26376: PUSH
26377: LD_INT 1
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 3
26386: NEG
26387: PUSH
26388: LD_INT 0
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 3
26397: NEG
26398: PUSH
26399: LD_INT 1
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 3
26409: NEG
26410: PUSH
26411: LD_INT 2
26413: NEG
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 3
26421: NEG
26422: PUSH
26423: LD_INT 3
26425: NEG
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26462: LD_ADDR_VAR 0 45
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 0
26479: PUSH
26480: LD_INT 1
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: LD_INT 0
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 1
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 0
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 1
26520: NEG
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 1
26531: NEG
26532: PUSH
26533: LD_INT 1
26535: NEG
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 1
26543: NEG
26544: PUSH
26545: LD_INT 2
26547: NEG
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: LD_INT 2
26558: NEG
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 1
26566: PUSH
26567: LD_INT 1
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 2
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 2
26587: PUSH
26588: LD_INT 2
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: LD_INT 2
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: LD_INT 2
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 2
26628: NEG
26629: PUSH
26630: LD_INT 1
26632: NEG
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 2
26640: NEG
26641: PUSH
26642: LD_INT 2
26644: NEG
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 2
26652: NEG
26653: PUSH
26654: LD_INT 3
26656: NEG
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 1
26664: NEG
26665: PUSH
26666: LD_INT 3
26668: NEG
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 0
26676: PUSH
26677: LD_INT 3
26679: NEG
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: LD_INT 2
26690: NEG
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 3
26698: PUSH
26699: LD_INT 2
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 3
26708: PUSH
26709: LD_INT 3
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 2
26718: PUSH
26719: LD_INT 3
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: LD_INT 3
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: LD_INT 3
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: LD_INT 2
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 3
26759: NEG
26760: PUSH
26761: LD_INT 2
26763: NEG
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 3
26771: NEG
26772: PUSH
26773: LD_INT 3
26775: NEG
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26812: LD_ADDR_VAR 0 46
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: LD_INT 0
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 0
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: LD_INT 1
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: LD_INT 1
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: NEG
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: LD_INT 1
26885: NEG
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 1
26893: NEG
26894: PUSH
26895: LD_INT 2
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 0
26905: PUSH
26906: LD_INT 2
26908: NEG
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: PUSH
26917: LD_INT 1
26919: NEG
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 2
26927: PUSH
26928: LD_INT 0
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 2
26937: PUSH
26938: LD_INT 1
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: PUSH
26948: LD_INT 2
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: LD_INT 2
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 1
26967: NEG
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 2
26978: NEG
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 2
26989: NEG
26990: PUSH
26991: LD_INT 1
26993: NEG
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: NEG
27002: PUSH
27003: LD_INT 3
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: LD_INT 3
27016: NEG
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: LD_INT 2
27027: NEG
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 2
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 3
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 3
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: PUSH
27067: LD_INT 3
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: LD_INT 3
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 1
27086: NEG
27087: PUSH
27088: LD_INT 2
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: NEG
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 3
27108: NEG
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 3
27119: NEG
27120: PUSH
27121: LD_INT 1
27123: NEG
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27160: LD_ADDR_VAR 0 47
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: LD_INT 0
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 0
27177: PUSH
27178: LD_INT 1
27180: NEG
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 1
27188: PUSH
27189: LD_INT 0
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 1
27198: PUSH
27199: LD_INT 1
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: LD_INT 1
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 1
27218: NEG
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 1
27229: NEG
27230: PUSH
27231: LD_INT 1
27233: NEG
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PUSH
27243: LD_INT 2
27245: NEG
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: LD_INT 2
27256: NEG
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: LD_INT 1
27267: NEG
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 2
27275: NEG
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 2
27287: NEG
27288: PUSH
27289: LD_INT 2
27291: NEG
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27311: LD_ADDR_VAR 0 48
27315: PUSH
27316: LD_INT 0
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 1
27339: PUSH
27340: LD_INT 0
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 1
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 1
27369: NEG
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: LD_INT 1
27384: NEG
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: LD_INT 2
27396: NEG
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: LD_INT 2
27407: NEG
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 2
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 2
27436: PUSH
27437: LD_INT 1
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27458: LD_ADDR_VAR 0 49
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: LD_INT 1
27478: NEG
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: LD_INT 0
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 1
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: LD_INT 1
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 1
27516: NEG
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: NEG
27528: PUSH
27529: LD_INT 1
27531: NEG
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: LD_INT 1
27542: NEG
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 2
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 2
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 2
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: PUSH
27581: LD_INT 2
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27602: LD_ADDR_VAR 0 50
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: LD_INT 0
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: LD_INT 1
27622: NEG
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 1
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 1
27640: PUSH
27641: LD_INT 1
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 0
27650: PUSH
27651: LD_INT 1
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 1
27660: NEG
27661: PUSH
27662: LD_INT 0
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 1
27671: NEG
27672: PUSH
27673: LD_INT 1
27675: NEG
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 2
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 2
27693: PUSH
27694: LD_INT 2
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: LD_INT 2
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: LD_INT 2
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: LD_INT 1
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27746: LD_ADDR_VAR 0 51
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: LD_INT 0
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: LD_INT 1
27766: NEG
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 1
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 1
27784: PUSH
27785: LD_INT 1
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 0
27794: PUSH
27795: LD_INT 1
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 1
27804: NEG
27805: PUSH
27806: LD_INT 0
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 1
27815: NEG
27816: PUSH
27817: LD_INT 1
27819: NEG
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: LD_INT 2
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: LD_INT 2
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: LD_INT 1
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 2
27858: NEG
27859: PUSH
27860: LD_INT 0
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 2
27869: NEG
27870: PUSH
27871: LD_INT 1
27873: NEG
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27893: LD_ADDR_VAR 0 52
27897: PUSH
27898: LD_INT 0
27900: PUSH
27901: LD_INT 0
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: LD_INT 1
27913: NEG
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 1
27921: PUSH
27922: LD_INT 0
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 1
27931: PUSH
27932: LD_INT 1
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 1
27951: NEG
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 1
27962: NEG
27963: PUSH
27964: LD_INT 1
27966: NEG
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 1
27974: NEG
27975: PUSH
27976: LD_INT 2
27978: NEG
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 1
27986: NEG
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 2
27997: NEG
27998: PUSH
27999: LD_INT 0
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 2
28008: NEG
28009: PUSH
28010: LD_INT 1
28012: NEG
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 2
28020: NEG
28021: PUSH
28022: LD_INT 2
28024: NEG
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28044: LD_ADDR_VAR 0 53
28048: PUSH
28049: LD_INT 0
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 0
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: LD_INT 0
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: LD_INT 1
28117: NEG
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: LD_INT 2
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: LD_INT 2
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 2
28159: PUSH
28160: LD_INT 0
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 2
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: LD_INT 2
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 2
28220: NEG
28221: PUSH
28222: LD_INT 0
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: LD_INT 1
28235: NEG
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 2
28243: NEG
28244: PUSH
28245: LD_INT 2
28247: NEG
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28274: LD_ADDR_VAR 0 54
28278: PUSH
28279: LD_INT 0
28281: PUSH
28282: LD_INT 0
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 0
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 1
28302: PUSH
28303: LD_INT 0
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: LD_INT 1
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 1
28332: NEG
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: NEG
28344: PUSH
28345: LD_INT 1
28347: NEG
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 1
28355: NEG
28356: PUSH
28357: LD_INT 2
28359: NEG
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: LD_INT 2
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 1
28378: PUSH
28379: LD_INT 1
28381: NEG
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: LD_INT 0
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: LD_INT 1
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 2
28409: PUSH
28410: LD_INT 2
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 1
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: LD_INT 2
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: NEG
28440: PUSH
28441: LD_INT 1
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 2
28450: NEG
28451: PUSH
28452: LD_INT 0
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 2
28461: NEG
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 2
28473: NEG
28474: PUSH
28475: LD_INT 2
28477: NEG
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28504: LD_ADDR_VAR 0 55
28508: PUSH
28509: LD_INT 0
28511: PUSH
28512: LD_INT 0
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: LD_INT 0
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: LD_INT 2
28589: NEG
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: LD_INT 2
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: LD_INT 1
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 2
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 2
28639: PUSH
28640: LD_INT 2
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: LD_INT 2
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 2
28680: NEG
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 2
28691: NEG
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 2
28703: NEG
28704: PUSH
28705: LD_INT 2
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28734: LD_ADDR_VAR 0 56
28738: PUSH
28739: LD_INT 0
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: LD_INT 1
28754: NEG
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: NEG
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 1
28803: NEG
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 1
28815: NEG
28816: PUSH
28817: LD_INT 2
28819: NEG
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: LD_INT 2
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: LD_INT 1
28841: NEG
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 2
28849: PUSH
28850: LD_INT 0
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: LD_INT 1
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 2
28869: PUSH
28870: LD_INT 2
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: LD_INT 2
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 1
28899: NEG
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 2
28910: NEG
28911: PUSH
28912: LD_INT 0
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 2
28921: NEG
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 2
28933: NEG
28934: PUSH
28935: LD_INT 2
28937: NEG
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28964: LD_ADDR_VAR 0 57
28968: PUSH
28969: LD_INT 0
28971: PUSH
28972: LD_INT 0
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 0
28981: PUSH
28982: LD_INT 1
28984: NEG
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: LD_INT 0
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 1
29022: NEG
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 1
29033: NEG
29034: PUSH
29035: LD_INT 1
29037: NEG
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 1
29045: NEG
29046: PUSH
29047: LD_INT 2
29049: NEG
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: LD_INT 2
29060: NEG
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 1
29068: PUSH
29069: LD_INT 1
29071: NEG
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 2
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 2
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 2
29099: PUSH
29100: LD_INT 2
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: LD_INT 2
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: LD_INT 2
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 1
29129: NEG
29130: PUSH
29131: LD_INT 1
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 2
29140: NEG
29141: PUSH
29142: LD_INT 0
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 2
29151: NEG
29152: PUSH
29153: LD_INT 1
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 2
29163: NEG
29164: PUSH
29165: LD_INT 2
29167: NEG
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29194: LD_ADDR_VAR 0 58
29198: PUSH
29199: LD_INT 0
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 0
29211: PUSH
29212: LD_INT 1
29214: NEG
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: LD_INT 1
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: LD_INT 1
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 1
29263: NEG
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: LD_INT 2
29279: NEG
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: PUSH
29299: LD_INT 1
29301: NEG
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 2
29309: PUSH
29310: LD_INT 0
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: LD_INT 1
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 2
29329: PUSH
29330: LD_INT 2
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 1
29339: PUSH
29340: LD_INT 2
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 0
29349: PUSH
29350: LD_INT 2
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 1
29359: NEG
29360: PUSH
29361: LD_INT 1
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 2
29370: NEG
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 2
29381: NEG
29382: PUSH
29383: LD_INT 1
29385: NEG
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 2
29393: NEG
29394: PUSH
29395: LD_INT 2
29397: NEG
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29424: LD_ADDR_VAR 0 59
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: LD_INT 0
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 0
29441: PUSH
29442: LD_INT 1
29444: NEG
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 1
29452: PUSH
29453: LD_INT 0
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 1
29482: NEG
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PUSH
29495: LD_INT 1
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29512: LD_ADDR_VAR 0 60
29516: PUSH
29517: LD_INT 0
29519: PUSH
29520: LD_INT 0
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: LD_INT 1
29532: NEG
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: LD_INT 0
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: LD_INT 1
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: LD_INT 1
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 1
29581: NEG
29582: PUSH
29583: LD_INT 1
29585: NEG
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29600: LD_ADDR_VAR 0 61
29604: PUSH
29605: LD_INT 0
29607: PUSH
29608: LD_INT 0
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 0
29617: PUSH
29618: LD_INT 1
29620: NEG
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 1
29628: PUSH
29629: LD_INT 0
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 1
29638: PUSH
29639: LD_INT 1
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: LD_INT 1
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 1
29658: NEG
29659: PUSH
29660: LD_INT 0
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 1
29669: NEG
29670: PUSH
29671: LD_INT 1
29673: NEG
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29688: LD_ADDR_VAR 0 62
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 0
29705: PUSH
29706: LD_INT 1
29708: NEG
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 1
29716: PUSH
29717: LD_INT 0
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: LD_INT 1
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 0
29736: PUSH
29737: LD_INT 1
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 1
29746: NEG
29747: PUSH
29748: LD_INT 0
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 1
29757: NEG
29758: PUSH
29759: LD_INT 1
29761: NEG
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29776: LD_ADDR_VAR 0 63
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: LD_INT 0
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 0
29793: PUSH
29794: LD_INT 1
29796: NEG
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 1
29804: PUSH
29805: LD_INT 0
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 0
29824: PUSH
29825: LD_INT 1
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 1
29834: NEG
29835: PUSH
29836: LD_INT 0
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 1
29845: NEG
29846: PUSH
29847: LD_INT 1
29849: NEG
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29864: LD_ADDR_VAR 0 64
29868: PUSH
29869: LD_INT 0
29871: PUSH
29872: LD_INT 0
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 0
29881: PUSH
29882: LD_INT 1
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 1
29892: PUSH
29893: LD_INT 0
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 1
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 0
29912: PUSH
29913: LD_INT 1
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 1
29922: NEG
29923: PUSH
29924: LD_INT 0
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 1
29933: NEG
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: ST_TO_ADDR
// end ; 1 :
29952: GO 35849
29954: LD_INT 1
29956: DOUBLE
29957: EQUAL
29958: IFTRUE 29962
29960: GO 32585
29962: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29963: LD_ADDR_VAR 0 11
29967: PUSH
29968: LD_INT 1
29970: NEG
29971: PUSH
29972: LD_INT 3
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: LD_INT 3
29985: NEG
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: LD_INT 2
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30007: LD_ADDR_VAR 0 12
30011: PUSH
30012: LD_INT 2
30014: PUSH
30015: LD_INT 1
30017: NEG
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 3
30025: PUSH
30026: LD_INT 0
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 3
30035: PUSH
30036: LD_INT 1
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: LIST
30047: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30048: LD_ADDR_VAR 0 13
30052: PUSH
30053: LD_INT 3
30055: PUSH
30056: LD_INT 2
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 3
30065: PUSH
30066: LD_INT 3
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 2
30075: PUSH
30076: LD_INT 3
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: LIST
30087: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30088: LD_ADDR_VAR 0 14
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: LD_INT 3
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 0
30105: PUSH
30106: LD_INT 3
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 1
30115: NEG
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: LIST
30128: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30129: LD_ADDR_VAR 0 15
30133: PUSH
30134: LD_INT 2
30136: NEG
30137: PUSH
30138: LD_INT 1
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 3
30147: NEG
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 3
30158: NEG
30159: PUSH
30160: LD_INT 1
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: LIST
30172: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30173: LD_ADDR_VAR 0 16
30177: PUSH
30178: LD_INT 2
30180: NEG
30181: PUSH
30182: LD_INT 3
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 3
30192: NEG
30193: PUSH
30194: LD_INT 2
30196: NEG
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 3
30204: NEG
30205: PUSH
30206: LD_INT 3
30208: NEG
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30219: LD_ADDR_VAR 0 17
30223: PUSH
30224: LD_INT 1
30226: NEG
30227: PUSH
30228: LD_INT 3
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 0
30238: PUSH
30239: LD_INT 3
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 1
30249: PUSH
30250: LD_INT 2
30252: NEG
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: LIST
30262: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30263: LD_ADDR_VAR 0 18
30267: PUSH
30268: LD_INT 2
30270: PUSH
30271: LD_INT 1
30273: NEG
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 3
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 3
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: LIST
30303: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30304: LD_ADDR_VAR 0 19
30308: PUSH
30309: LD_INT 3
30311: PUSH
30312: LD_INT 2
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 3
30321: PUSH
30322: LD_INT 3
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 2
30331: PUSH
30332: LD_INT 3
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: LIST
30343: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30344: LD_ADDR_VAR 0 20
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: LD_INT 3
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 0
30361: PUSH
30362: LD_INT 3
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 1
30371: NEG
30372: PUSH
30373: LD_INT 2
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: LIST
30384: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30385: LD_ADDR_VAR 0 21
30389: PUSH
30390: LD_INT 2
30392: NEG
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 3
30403: NEG
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 3
30414: NEG
30415: PUSH
30416: LD_INT 1
30418: NEG
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: LIST
30428: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30429: LD_ADDR_VAR 0 22
30433: PUSH
30434: LD_INT 2
30436: NEG
30437: PUSH
30438: LD_INT 3
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 3
30448: NEG
30449: PUSH
30450: LD_INT 2
30452: NEG
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 3
30460: NEG
30461: PUSH
30462: LD_INT 3
30464: NEG
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: LIST
30474: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30475: LD_ADDR_VAR 0 23
30479: PUSH
30480: LD_INT 0
30482: PUSH
30483: LD_INT 3
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 1
30493: NEG
30494: PUSH
30495: LD_INT 4
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: LD_INT 3
30508: NEG
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30519: LD_ADDR_VAR 0 24
30523: PUSH
30524: LD_INT 3
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 3
30536: PUSH
30537: LD_INT 1
30539: NEG
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 4
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30560: LD_ADDR_VAR 0 25
30564: PUSH
30565: LD_INT 3
30567: PUSH
30568: LD_INT 3
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 4
30577: PUSH
30578: LD_INT 3
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 3
30587: PUSH
30588: LD_INT 4
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: LIST
30599: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30600: LD_ADDR_VAR 0 26
30604: PUSH
30605: LD_INT 0
30607: PUSH
30608: LD_INT 3
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 1
30617: PUSH
30618: LD_INT 4
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 1
30627: NEG
30628: PUSH
30629: LD_INT 3
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30641: LD_ADDR_VAR 0 27
30645: PUSH
30646: LD_INT 3
30648: NEG
30649: PUSH
30650: LD_INT 0
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 3
30659: NEG
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 4
30670: NEG
30671: PUSH
30672: LD_INT 1
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: LIST
30684: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30685: LD_ADDR_VAR 0 28
30689: PUSH
30690: LD_INT 3
30692: NEG
30693: PUSH
30694: LD_INT 3
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 3
30704: NEG
30705: PUSH
30706: LD_INT 4
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 4
30716: NEG
30717: PUSH
30718: LD_INT 3
30720: NEG
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: LIST
30730: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30731: LD_ADDR_VAR 0 29
30735: PUSH
30736: LD_INT 1
30738: NEG
30739: PUSH
30740: LD_INT 3
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 0
30750: PUSH
30751: LD_INT 3
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 1
30761: PUSH
30762: LD_INT 2
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 1
30772: NEG
30773: PUSH
30774: LD_INT 4
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 0
30784: PUSH
30785: LD_INT 4
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 1
30795: PUSH
30796: LD_INT 3
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 1
30806: NEG
30807: PUSH
30808: LD_INT 5
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 0
30818: PUSH
30819: LD_INT 5
30821: NEG
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: LD_INT 4
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 1
30840: NEG
30841: PUSH
30842: LD_INT 6
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: LD_INT 6
30855: NEG
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: LD_INT 5
30866: NEG
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30886: LD_ADDR_VAR 0 30
30890: PUSH
30891: LD_INT 2
30893: PUSH
30894: LD_INT 1
30896: NEG
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 3
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 3
30914: PUSH
30915: LD_INT 1
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 3
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 4
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 4
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 4
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 5
30966: PUSH
30967: LD_INT 0
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 5
30976: PUSH
30977: LD_INT 1
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 5
30986: PUSH
30987: LD_INT 1
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 6
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 6
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31029: LD_ADDR_VAR 0 31
31033: PUSH
31034: LD_INT 3
31036: PUSH
31037: LD_INT 2
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 3
31046: PUSH
31047: LD_INT 3
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 2
31056: PUSH
31057: LD_INT 3
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 4
31066: PUSH
31067: LD_INT 3
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 4
31076: PUSH
31077: LD_INT 4
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 3
31086: PUSH
31087: LD_INT 4
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 5
31096: PUSH
31097: LD_INT 4
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 5
31106: PUSH
31107: LD_INT 5
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 4
31116: PUSH
31117: LD_INT 5
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 6
31126: PUSH
31127: LD_INT 5
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 6
31136: PUSH
31137: LD_INT 6
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 5
31146: PUSH
31147: LD_INT 6
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31168: LD_ADDR_VAR 0 32
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: LD_INT 3
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 1
31195: NEG
31196: PUSH
31197: LD_INT 2
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: PUSH
31207: LD_INT 4
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: LD_INT 4
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: LD_INT 3
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: LD_INT 5
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 0
31247: PUSH
31248: LD_INT 5
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 1
31257: NEG
31258: PUSH
31259: LD_INT 4
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: LD_INT 6
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 0
31278: PUSH
31279: LD_INT 6
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 1
31288: NEG
31289: PUSH
31290: LD_INT 5
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31311: LD_ADDR_VAR 0 33
31315: PUSH
31316: LD_INT 2
31318: NEG
31319: PUSH
31320: LD_INT 1
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 3
31329: NEG
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 3
31340: NEG
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 3
31352: NEG
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 4
31363: NEG
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 4
31374: NEG
31375: PUSH
31376: LD_INT 1
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 4
31386: NEG
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 5
31397: NEG
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 5
31408: NEG
31409: PUSH
31410: LD_INT 1
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 5
31420: NEG
31421: PUSH
31422: LD_INT 1
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 6
31431: NEG
31432: PUSH
31433: LD_INT 0
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 6
31442: NEG
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31466: LD_ADDR_VAR 0 34
31470: PUSH
31471: LD_INT 2
31473: NEG
31474: PUSH
31475: LD_INT 3
31477: NEG
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 3
31485: NEG
31486: PUSH
31487: LD_INT 2
31489: NEG
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 3
31497: NEG
31498: PUSH
31499: LD_INT 3
31501: NEG
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 3
31509: NEG
31510: PUSH
31511: LD_INT 4
31513: NEG
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 4
31521: NEG
31522: PUSH
31523: LD_INT 3
31525: NEG
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 4
31533: NEG
31534: PUSH
31535: LD_INT 4
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 4
31545: NEG
31546: PUSH
31547: LD_INT 5
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 5
31557: NEG
31558: PUSH
31559: LD_INT 4
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 5
31569: NEG
31570: PUSH
31571: LD_INT 5
31573: NEG
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 5
31581: NEG
31582: PUSH
31583: LD_INT 6
31585: NEG
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 6
31593: NEG
31594: PUSH
31595: LD_INT 5
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 6
31605: NEG
31606: PUSH
31607: LD_INT 6
31609: NEG
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31629: LD_ADDR_VAR 0 41
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: LD_INT 2
31639: NEG
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: LD_INT 3
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 1
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: LIST
31672: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31673: LD_ADDR_VAR 0 42
31677: PUSH
31678: LD_INT 2
31680: PUSH
31681: LD_INT 0
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 2
31690: PUSH
31691: LD_INT 1
31693: NEG
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 3
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: LIST
31713: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31714: LD_ADDR_VAR 0 43
31718: PUSH
31719: LD_INT 2
31721: PUSH
31722: LD_INT 2
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 3
31731: PUSH
31732: LD_INT 2
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: LD_INT 3
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: LIST
31753: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31754: LD_ADDR_VAR 0 44
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: LD_INT 2
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 1
31771: PUSH
31772: LD_INT 3
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 1
31781: NEG
31782: PUSH
31783: LD_INT 2
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: LIST
31794: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31795: LD_ADDR_VAR 0 45
31799: PUSH
31800: LD_INT 2
31802: NEG
31803: PUSH
31804: LD_INT 0
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 2
31813: NEG
31814: PUSH
31815: LD_INT 1
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 3
31824: NEG
31825: PUSH
31826: LD_INT 1
31828: NEG
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: LIST
31838: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31839: LD_ADDR_VAR 0 46
31843: PUSH
31844: LD_INT 2
31846: NEG
31847: PUSH
31848: LD_INT 2
31850: NEG
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 2
31858: NEG
31859: PUSH
31860: LD_INT 3
31862: NEG
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 3
31870: NEG
31871: PUSH
31872: LD_INT 2
31874: NEG
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: LIST
31884: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31885: LD_ADDR_VAR 0 47
31889: PUSH
31890: LD_INT 2
31892: NEG
31893: PUSH
31894: LD_INT 3
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 1
31904: NEG
31905: PUSH
31906: LD_INT 3
31908: NEG
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31918: LD_ADDR_VAR 0 48
31922: PUSH
31923: LD_INT 1
31925: PUSH
31926: LD_INT 2
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 2
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31949: LD_ADDR_VAR 0 49
31953: PUSH
31954: LD_INT 3
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 3
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31978: LD_ADDR_VAR 0 50
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: LD_INT 3
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: LD_INT 3
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32007: LD_ADDR_VAR 0 51
32011: PUSH
32012: LD_INT 1
32014: NEG
32015: PUSH
32016: LD_INT 2
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 2
32025: NEG
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32038: LD_ADDR_VAR 0 52
32042: PUSH
32043: LD_INT 3
32045: NEG
32046: PUSH
32047: LD_INT 1
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 3
32057: NEG
32058: PUSH
32059: LD_INT 2
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32071: LD_ADDR_VAR 0 53
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: LD_INT 3
32082: NEG
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 0
32090: PUSH
32091: LD_INT 3
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 1
32101: PUSH
32102: LD_INT 2
32104: NEG
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: LIST
32114: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32115: LD_ADDR_VAR 0 54
32119: PUSH
32120: LD_INT 2
32122: PUSH
32123: LD_INT 1
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 3
32133: PUSH
32134: LD_INT 0
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 3
32143: PUSH
32144: LD_INT 1
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: LIST
32155: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32156: LD_ADDR_VAR 0 55
32160: PUSH
32161: LD_INT 3
32163: PUSH
32164: LD_INT 2
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 3
32173: PUSH
32174: LD_INT 3
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 2
32183: PUSH
32184: LD_INT 3
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: LIST
32195: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32196: LD_ADDR_VAR 0 56
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: LD_INT 3
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: LD_INT 3
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 1
32223: NEG
32224: PUSH
32225: LD_INT 2
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: LIST
32236: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32237: LD_ADDR_VAR 0 57
32241: PUSH
32242: LD_INT 2
32244: NEG
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 3
32255: NEG
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 3
32266: NEG
32267: PUSH
32268: LD_INT 1
32270: NEG
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: LIST
32280: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32281: LD_ADDR_VAR 0 58
32285: PUSH
32286: LD_INT 2
32288: NEG
32289: PUSH
32290: LD_INT 3
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 3
32300: NEG
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 3
32312: NEG
32313: PUSH
32314: LD_INT 3
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: LIST
32326: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32327: LD_ADDR_VAR 0 59
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PUSH
32336: LD_INT 2
32338: NEG
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: LD_INT 2
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 1
32357: PUSH
32358: LD_INT 1
32360: NEG
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: LIST
32370: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32371: LD_ADDR_VAR 0 60
32375: PUSH
32376: LD_INT 1
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 2
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 2
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32412: LD_ADDR_VAR 0 61
32416: PUSH
32417: LD_INT 2
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 2
32429: PUSH
32430: LD_INT 2
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: LIST
32451: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32452: LD_ADDR_VAR 0 62
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: LD_INT 2
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: LD_INT 1
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: LIST
32492: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32493: LD_ADDR_VAR 0 63
32497: PUSH
32498: LD_INT 1
32500: NEG
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 2
32511: NEG
32512: PUSH
32513: LD_INT 0
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 2
32522: NEG
32523: PUSH
32524: LD_INT 1
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: LIST
32536: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32537: LD_ADDR_VAR 0 64
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: LD_INT 2
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 2
32556: NEG
32557: PUSH
32558: LD_INT 1
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 2
32568: NEG
32569: PUSH
32570: LD_INT 2
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: LIST
32582: ST_TO_ADDR
// end ; 2 :
32583: GO 35849
32585: LD_INT 2
32587: DOUBLE
32588: EQUAL
32589: IFTRUE 32593
32591: GO 35848
32593: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32594: LD_ADDR_VAR 0 29
32598: PUSH
32599: LD_INT 4
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 4
32611: PUSH
32612: LD_INT 1
32614: NEG
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 5
32622: PUSH
32623: LD_INT 0
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 5
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 4
32642: PUSH
32643: LD_INT 1
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 3
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 3
32662: PUSH
32663: LD_INT 1
32665: NEG
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 3
32673: PUSH
32674: LD_INT 2
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 5
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 3
32694: PUSH
32695: LD_INT 3
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 3
32704: PUSH
32705: LD_INT 2
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 4
32714: PUSH
32715: LD_INT 3
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 4
32724: PUSH
32725: LD_INT 4
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 3
32734: PUSH
32735: LD_INT 4
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 2
32744: PUSH
32745: LD_INT 3
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 2
32754: PUSH
32755: LD_INT 2
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 4
32764: PUSH
32765: LD_INT 2
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: LD_INT 4
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: LD_INT 4
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 0
32794: PUSH
32795: LD_INT 3
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: LD_INT 4
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 1
32814: PUSH
32815: LD_INT 5
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 0
32824: PUSH
32825: LD_INT 5
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 1
32834: NEG
32835: PUSH
32836: LD_INT 4
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 1
32845: NEG
32846: PUSH
32847: LD_INT 3
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 2
32856: PUSH
32857: LD_INT 5
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 2
32866: NEG
32867: PUSH
32868: LD_INT 3
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 3
32877: NEG
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 3
32888: NEG
32889: PUSH
32890: LD_INT 1
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 2
32900: NEG
32901: PUSH
32902: LD_INT 0
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 2
32911: NEG
32912: PUSH
32913: LD_INT 1
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 3
32922: NEG
32923: PUSH
32924: LD_INT 1
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 4
32933: NEG
32934: PUSH
32935: LD_INT 0
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 4
32944: NEG
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 4
32956: NEG
32957: PUSH
32958: LD_INT 2
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 2
32968: NEG
32969: PUSH
32970: LD_INT 2
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 4
32979: NEG
32980: PUSH
32981: LD_INT 4
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 4
32991: NEG
32992: PUSH
32993: LD_INT 5
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 3
33003: NEG
33004: PUSH
33005: LD_INT 4
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 3
33015: NEG
33016: PUSH
33017: LD_INT 3
33019: NEG
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 4
33027: NEG
33028: PUSH
33029: LD_INT 3
33031: NEG
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 5
33039: NEG
33040: PUSH
33041: LD_INT 4
33043: NEG
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 5
33051: NEG
33052: PUSH
33053: LD_INT 5
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 3
33063: NEG
33064: PUSH
33065: LD_INT 5
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 5
33075: NEG
33076: PUSH
33077: LD_INT 3
33079: NEG
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33132: LD_ADDR_VAR 0 30
33136: PUSH
33137: LD_INT 4
33139: PUSH
33140: LD_INT 4
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 4
33149: PUSH
33150: LD_INT 3
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 5
33159: PUSH
33160: LD_INT 4
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 5
33169: PUSH
33170: LD_INT 5
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 4
33179: PUSH
33180: LD_INT 5
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 3
33189: PUSH
33190: LD_INT 4
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 3
33199: PUSH
33200: LD_INT 3
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 5
33209: PUSH
33210: LD_INT 3
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 3
33219: PUSH
33220: LD_INT 5
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: LD_INT 3
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: LD_INT 2
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 1
33249: PUSH
33250: LD_INT 3
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: LD_INT 4
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 0
33269: PUSH
33270: LD_INT 4
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: LD_INT 3
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 1
33290: NEG
33291: PUSH
33292: LD_INT 2
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 2
33301: PUSH
33302: LD_INT 4
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 2
33311: NEG
33312: PUSH
33313: LD_INT 2
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 4
33322: NEG
33323: PUSH
33324: LD_INT 0
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 4
33333: NEG
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 3
33345: NEG
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 3
33356: NEG
33357: PUSH
33358: LD_INT 1
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 4
33367: NEG
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 5
33378: NEG
33379: PUSH
33380: LD_INT 0
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 5
33389: NEG
33390: PUSH
33391: LD_INT 1
33393: NEG
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 5
33401: NEG
33402: PUSH
33403: LD_INT 2
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 3
33413: NEG
33414: PUSH
33415: LD_INT 2
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 3
33424: NEG
33425: PUSH
33426: LD_INT 3
33428: NEG
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 3
33436: NEG
33437: PUSH
33438: LD_INT 4
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 2
33448: NEG
33449: PUSH
33450: LD_INT 3
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 2
33460: NEG
33461: PUSH
33462: LD_INT 2
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 3
33472: NEG
33473: PUSH
33474: LD_INT 2
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 4
33484: NEG
33485: PUSH
33486: LD_INT 3
33488: NEG
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 4
33496: NEG
33497: PUSH
33498: LD_INT 4
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 2
33508: NEG
33509: PUSH
33510: LD_INT 4
33512: NEG
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 4
33520: NEG
33521: PUSH
33522: LD_INT 2
33524: NEG
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 4
33535: NEG
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 0
33543: PUSH
33544: LD_INT 5
33546: NEG
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 1
33554: PUSH
33555: LD_INT 4
33557: NEG
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: LD_INT 3
33568: NEG
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: LD_INT 3
33579: NEG
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: LD_INT 4
33591: NEG
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 1
33599: NEG
33600: PUSH
33601: LD_INT 5
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 2
33611: PUSH
33612: LD_INT 3
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 2
33622: NEG
33623: PUSH
33624: LD_INT 5
33626: NEG
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33679: LD_ADDR_VAR 0 31
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: LD_INT 4
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 0
33696: PUSH
33697: LD_INT 3
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: LD_INT 4
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: LD_INT 5
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: LD_INT 5
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 1
33736: NEG
33737: PUSH
33738: LD_INT 4
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 1
33747: NEG
33748: PUSH
33749: LD_INT 3
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 2
33758: PUSH
33759: LD_INT 5
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 2
33768: NEG
33769: PUSH
33770: LD_INT 3
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 3
33779: NEG
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 3
33790: NEG
33791: PUSH
33792: LD_INT 1
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 2
33802: NEG
33803: PUSH
33804: LD_INT 0
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 2
33813: NEG
33814: PUSH
33815: LD_INT 1
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 3
33824: NEG
33825: PUSH
33826: LD_INT 1
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 4
33835: NEG
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 4
33846: NEG
33847: PUSH
33848: LD_INT 1
33850: NEG
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 4
33858: NEG
33859: PUSH
33860: LD_INT 2
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: LD_INT 2
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 4
33881: NEG
33882: PUSH
33883: LD_INT 4
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 4
33893: NEG
33894: PUSH
33895: LD_INT 5
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 3
33905: NEG
33906: PUSH
33907: LD_INT 4
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 3
33917: NEG
33918: PUSH
33919: LD_INT 3
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 4
33929: NEG
33930: PUSH
33931: LD_INT 3
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 5
33941: NEG
33942: PUSH
33943: LD_INT 4
33945: NEG
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 5
33953: NEG
33954: PUSH
33955: LD_INT 5
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 3
33965: NEG
33966: PUSH
33967: LD_INT 5
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 5
33977: NEG
33978: PUSH
33979: LD_INT 3
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 0
33989: PUSH
33990: LD_INT 3
33992: NEG
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 0
34000: PUSH
34001: LD_INT 4
34003: NEG
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: LD_INT 3
34014: NEG
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 1
34022: PUSH
34023: LD_INT 2
34025: NEG
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 0
34033: PUSH
34034: LD_INT 2
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: LD_INT 3
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: NEG
34057: PUSH
34058: LD_INT 4
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 2
34068: PUSH
34069: LD_INT 2
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 2
34079: NEG
34080: PUSH
34081: LD_INT 4
34083: NEG
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 4
34091: PUSH
34092: LD_INT 0
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 4
34101: PUSH
34102: LD_INT 1
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 5
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 5
34122: PUSH
34123: LD_INT 1
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 4
34132: PUSH
34133: LD_INT 1
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 3
34142: PUSH
34143: LD_INT 0
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 3
34152: PUSH
34153: LD_INT 1
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 3
34163: PUSH
34164: LD_INT 2
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 5
34174: PUSH
34175: LD_INT 2
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34229: LD_ADDR_VAR 0 32
34233: PUSH
34234: LD_INT 4
34236: NEG
34237: PUSH
34238: LD_INT 0
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 4
34247: NEG
34248: PUSH
34249: LD_INT 1
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 3
34259: NEG
34260: PUSH
34261: LD_INT 0
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 3
34270: NEG
34271: PUSH
34272: LD_INT 1
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 4
34281: NEG
34282: PUSH
34283: LD_INT 1
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 5
34292: NEG
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 5
34303: NEG
34304: PUSH
34305: LD_INT 1
34307: NEG
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 5
34315: NEG
34316: PUSH
34317: LD_INT 2
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 3
34327: NEG
34328: PUSH
34329: LD_INT 2
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 3
34338: NEG
34339: PUSH
34340: LD_INT 3
34342: NEG
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 3
34350: NEG
34351: PUSH
34352: LD_INT 4
34354: NEG
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 2
34362: NEG
34363: PUSH
34364: LD_INT 3
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 2
34374: NEG
34375: PUSH
34376: LD_INT 2
34378: NEG
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 3
34386: NEG
34387: PUSH
34388: LD_INT 2
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 4
34398: NEG
34399: PUSH
34400: LD_INT 3
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 4
34410: NEG
34411: PUSH
34412: LD_INT 4
34414: NEG
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 2
34422: NEG
34423: PUSH
34424: LD_INT 4
34426: NEG
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 4
34434: NEG
34435: PUSH
34436: LD_INT 2
34438: NEG
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: LD_INT 4
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: LD_INT 5
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: LD_INT 4
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: PUSH
34480: LD_INT 3
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: LD_INT 3
34493: NEG
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 1
34501: NEG
34502: PUSH
34503: LD_INT 4
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: NEG
34514: PUSH
34515: LD_INT 5
34517: NEG
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 2
34525: PUSH
34526: LD_INT 3
34528: NEG
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 2
34536: NEG
34537: PUSH
34538: LD_INT 5
34540: NEG
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 3
34548: PUSH
34549: LD_INT 0
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 3
34558: PUSH
34559: LD_INT 1
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 4
34569: PUSH
34570: LD_INT 0
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 4
34579: PUSH
34580: LD_INT 1
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 3
34589: PUSH
34590: LD_INT 1
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 2
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 2
34609: PUSH
34610: LD_INT 1
34612: NEG
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: PUSH
34621: LD_INT 2
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 4
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 4
34641: PUSH
34642: LD_INT 4
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 4
34651: PUSH
34652: LD_INT 3
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 5
34661: PUSH
34662: LD_INT 4
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 5
34671: PUSH
34672: LD_INT 5
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 4
34681: PUSH
34682: LD_INT 5
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 3
34691: PUSH
34692: LD_INT 4
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 3
34701: PUSH
34702: LD_INT 3
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 5
34711: PUSH
34712: LD_INT 3
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 3
34721: PUSH
34722: LD_INT 5
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34776: LD_ADDR_VAR 0 33
34780: PUSH
34781: LD_INT 4
34783: NEG
34784: PUSH
34785: LD_INT 4
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 4
34795: NEG
34796: PUSH
34797: LD_INT 5
34799: NEG
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 3
34807: NEG
34808: PUSH
34809: LD_INT 4
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 3
34819: NEG
34820: PUSH
34821: LD_INT 3
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 4
34831: NEG
34832: PUSH
34833: LD_INT 3
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 5
34843: NEG
34844: PUSH
34845: LD_INT 4
34847: NEG
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 5
34855: NEG
34856: PUSH
34857: LD_INT 5
34859: NEG
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 3
34867: NEG
34868: PUSH
34869: LD_INT 5
34871: NEG
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 5
34879: NEG
34880: PUSH
34881: LD_INT 3
34883: NEG
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: LD_INT 3
34894: NEG
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 0
34902: PUSH
34903: LD_INT 4
34905: NEG
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: LD_INT 3
34916: NEG
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 1
34924: PUSH
34925: LD_INT 2
34927: NEG
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: LD_INT 2
34938: NEG
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 1
34946: NEG
34947: PUSH
34948: LD_INT 3
34950: NEG
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 1
34958: NEG
34959: PUSH
34960: LD_INT 4
34962: NEG
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 2
34970: PUSH
34971: LD_INT 2
34973: NEG
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 2
34981: NEG
34982: PUSH
34983: LD_INT 4
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 4
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 4
35003: PUSH
35004: LD_INT 1
35006: NEG
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 5
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 5
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 4
35034: PUSH
35035: LD_INT 1
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 3
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 3
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 3
35065: PUSH
35066: LD_INT 2
35068: NEG
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 5
35076: PUSH
35077: LD_INT 2
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 3
35086: PUSH
35087: LD_INT 3
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 3
35096: PUSH
35097: LD_INT 2
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 4
35106: PUSH
35107: LD_INT 3
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 4
35116: PUSH
35117: LD_INT 4
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 3
35126: PUSH
35127: LD_INT 4
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 2
35136: PUSH
35137: LD_INT 3
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 2
35146: PUSH
35147: LD_INT 2
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 4
35156: PUSH
35157: LD_INT 2
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 2
35166: PUSH
35167: LD_INT 4
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: LD_INT 4
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 0
35186: PUSH
35187: LD_INT 3
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: LD_INT 4
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: LD_INT 5
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: LD_INT 5
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: LD_INT 4
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: PUSH
35239: LD_INT 3
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 2
35248: PUSH
35249: LD_INT 5
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 2
35258: NEG
35259: PUSH
35260: LD_INT 3
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35314: LD_ADDR_VAR 0 34
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: LD_INT 4
35324: NEG
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 0
35332: PUSH
35333: LD_INT 5
35335: NEG
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 1
35343: PUSH
35344: LD_INT 4
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: PUSH
35355: LD_INT 3
35357: NEG
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 0
35365: PUSH
35366: LD_INT 3
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: NEG
35377: PUSH
35378: LD_INT 4
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: LD_INT 5
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 2
35400: PUSH
35401: LD_INT 3
35403: NEG
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 2
35411: NEG
35412: PUSH
35413: LD_INT 5
35415: NEG
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 3
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 3
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 4
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 4
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 3
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 2
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 2
35484: PUSH
35485: LD_INT 1
35487: NEG
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 2
35495: PUSH
35496: LD_INT 2
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 4
35506: PUSH
35507: LD_INT 2
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 4
35516: PUSH
35517: LD_INT 4
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 4
35526: PUSH
35527: LD_INT 3
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 5
35536: PUSH
35537: LD_INT 4
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 5
35546: PUSH
35547: LD_INT 5
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 4
35556: PUSH
35557: LD_INT 5
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 3
35566: PUSH
35567: LD_INT 4
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 3
35576: PUSH
35577: LD_INT 3
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 5
35586: PUSH
35587: LD_INT 3
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 3
35596: PUSH
35597: LD_INT 5
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: LD_INT 3
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 0
35616: PUSH
35617: LD_INT 2
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 1
35626: PUSH
35627: LD_INT 3
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: LD_INT 4
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 0
35646: PUSH
35647: LD_INT 4
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 1
35656: NEG
35657: PUSH
35658: LD_INT 3
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 1
35667: NEG
35668: PUSH
35669: LD_INT 2
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 2
35678: PUSH
35679: LD_INT 4
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 2
35688: NEG
35689: PUSH
35690: LD_INT 2
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 4
35699: NEG
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 4
35710: NEG
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 3
35722: NEG
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 3
35733: NEG
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 4
35744: NEG
35745: PUSH
35746: LD_INT 1
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 5
35755: NEG
35756: PUSH
35757: LD_INT 0
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 5
35766: NEG
35767: PUSH
35768: LD_INT 1
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 5
35778: NEG
35779: PUSH
35780: LD_INT 2
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 3
35790: NEG
35791: PUSH
35792: LD_INT 2
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: ST_TO_ADDR
// end ; end ;
35846: GO 35849
35848: POP
// case btype of b_depot , b_warehouse :
35849: LD_VAR 0 1
35853: PUSH
35854: LD_INT 0
35856: DOUBLE
35857: EQUAL
35858: IFTRUE 35868
35860: LD_INT 1
35862: DOUBLE
35863: EQUAL
35864: IFTRUE 35868
35866: GO 36069
35868: POP
// case nation of nation_american :
35869: LD_VAR 0 5
35873: PUSH
35874: LD_INT 1
35876: DOUBLE
35877: EQUAL
35878: IFTRUE 35882
35880: GO 35938
35882: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
35883: LD_ADDR_VAR 0 9
35887: PUSH
35888: LD_VAR 0 11
35892: PUSH
35893: LD_VAR 0 12
35897: PUSH
35898: LD_VAR 0 13
35902: PUSH
35903: LD_VAR 0 14
35907: PUSH
35908: LD_VAR 0 15
35912: PUSH
35913: LD_VAR 0 16
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: PUSH
35926: LD_VAR 0 4
35930: PUSH
35931: LD_INT 1
35933: PLUS
35934: ARRAY
35935: ST_TO_ADDR
35936: GO 36067
35938: LD_INT 2
35940: DOUBLE
35941: EQUAL
35942: IFTRUE 35946
35944: GO 36002
35946: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
35947: LD_ADDR_VAR 0 9
35951: PUSH
35952: LD_VAR 0 17
35956: PUSH
35957: LD_VAR 0 18
35961: PUSH
35962: LD_VAR 0 19
35966: PUSH
35967: LD_VAR 0 20
35971: PUSH
35972: LD_VAR 0 21
35976: PUSH
35977: LD_VAR 0 22
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: PUSH
35990: LD_VAR 0 4
35994: PUSH
35995: LD_INT 1
35997: PLUS
35998: ARRAY
35999: ST_TO_ADDR
36000: GO 36067
36002: LD_INT 3
36004: DOUBLE
36005: EQUAL
36006: IFTRUE 36010
36008: GO 36066
36010: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36011: LD_ADDR_VAR 0 9
36015: PUSH
36016: LD_VAR 0 23
36020: PUSH
36021: LD_VAR 0 24
36025: PUSH
36026: LD_VAR 0 25
36030: PUSH
36031: LD_VAR 0 26
36035: PUSH
36036: LD_VAR 0 27
36040: PUSH
36041: LD_VAR 0 28
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: PUSH
36054: LD_VAR 0 4
36058: PUSH
36059: LD_INT 1
36061: PLUS
36062: ARRAY
36063: ST_TO_ADDR
36064: GO 36067
36066: POP
36067: GO 36616
36069: LD_INT 2
36071: DOUBLE
36072: EQUAL
36073: IFTRUE 36083
36075: LD_INT 3
36077: DOUBLE
36078: EQUAL
36079: IFTRUE 36083
36081: GO 36139
36083: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36084: LD_ADDR_VAR 0 9
36088: PUSH
36089: LD_VAR 0 29
36093: PUSH
36094: LD_VAR 0 30
36098: PUSH
36099: LD_VAR 0 31
36103: PUSH
36104: LD_VAR 0 32
36108: PUSH
36109: LD_VAR 0 33
36113: PUSH
36114: LD_VAR 0 34
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: PUSH
36127: LD_VAR 0 4
36131: PUSH
36132: LD_INT 1
36134: PLUS
36135: ARRAY
36136: ST_TO_ADDR
36137: GO 36616
36139: LD_INT 16
36141: DOUBLE
36142: EQUAL
36143: IFTRUE 36195
36145: LD_INT 17
36147: DOUBLE
36148: EQUAL
36149: IFTRUE 36195
36151: LD_INT 18
36153: DOUBLE
36154: EQUAL
36155: IFTRUE 36195
36157: LD_INT 19
36159: DOUBLE
36160: EQUAL
36161: IFTRUE 36195
36163: LD_INT 20
36165: DOUBLE
36166: EQUAL
36167: IFTRUE 36195
36169: LD_INT 21
36171: DOUBLE
36172: EQUAL
36173: IFTRUE 36195
36175: LD_INT 23
36177: DOUBLE
36178: EQUAL
36179: IFTRUE 36195
36181: LD_INT 24
36183: DOUBLE
36184: EQUAL
36185: IFTRUE 36195
36187: LD_INT 25
36189: DOUBLE
36190: EQUAL
36191: IFTRUE 36195
36193: GO 36251
36195: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36196: LD_ADDR_VAR 0 9
36200: PUSH
36201: LD_VAR 0 35
36205: PUSH
36206: LD_VAR 0 36
36210: PUSH
36211: LD_VAR 0 37
36215: PUSH
36216: LD_VAR 0 38
36220: PUSH
36221: LD_VAR 0 39
36225: PUSH
36226: LD_VAR 0 40
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: PUSH
36239: LD_VAR 0 4
36243: PUSH
36244: LD_INT 1
36246: PLUS
36247: ARRAY
36248: ST_TO_ADDR
36249: GO 36616
36251: LD_INT 6
36253: DOUBLE
36254: EQUAL
36255: IFTRUE 36307
36257: LD_INT 7
36259: DOUBLE
36260: EQUAL
36261: IFTRUE 36307
36263: LD_INT 8
36265: DOUBLE
36266: EQUAL
36267: IFTRUE 36307
36269: LD_INT 13
36271: DOUBLE
36272: EQUAL
36273: IFTRUE 36307
36275: LD_INT 12
36277: DOUBLE
36278: EQUAL
36279: IFTRUE 36307
36281: LD_INT 15
36283: DOUBLE
36284: EQUAL
36285: IFTRUE 36307
36287: LD_INT 11
36289: DOUBLE
36290: EQUAL
36291: IFTRUE 36307
36293: LD_INT 14
36295: DOUBLE
36296: EQUAL
36297: IFTRUE 36307
36299: LD_INT 10
36301: DOUBLE
36302: EQUAL
36303: IFTRUE 36307
36305: GO 36363
36307: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36308: LD_ADDR_VAR 0 9
36312: PUSH
36313: LD_VAR 0 41
36317: PUSH
36318: LD_VAR 0 42
36322: PUSH
36323: LD_VAR 0 43
36327: PUSH
36328: LD_VAR 0 44
36332: PUSH
36333: LD_VAR 0 45
36337: PUSH
36338: LD_VAR 0 46
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: PUSH
36351: LD_VAR 0 4
36355: PUSH
36356: LD_INT 1
36358: PLUS
36359: ARRAY
36360: ST_TO_ADDR
36361: GO 36616
36363: LD_INT 36
36365: DOUBLE
36366: EQUAL
36367: IFTRUE 36371
36369: GO 36427
36371: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36372: LD_ADDR_VAR 0 9
36376: PUSH
36377: LD_VAR 0 47
36381: PUSH
36382: LD_VAR 0 48
36386: PUSH
36387: LD_VAR 0 49
36391: PUSH
36392: LD_VAR 0 50
36396: PUSH
36397: LD_VAR 0 51
36401: PUSH
36402: LD_VAR 0 52
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: PUSH
36415: LD_VAR 0 4
36419: PUSH
36420: LD_INT 1
36422: PLUS
36423: ARRAY
36424: ST_TO_ADDR
36425: GO 36616
36427: LD_INT 4
36429: DOUBLE
36430: EQUAL
36431: IFTRUE 36453
36433: LD_INT 5
36435: DOUBLE
36436: EQUAL
36437: IFTRUE 36453
36439: LD_INT 34
36441: DOUBLE
36442: EQUAL
36443: IFTRUE 36453
36445: LD_INT 37
36447: DOUBLE
36448: EQUAL
36449: IFTRUE 36453
36451: GO 36509
36453: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36454: LD_ADDR_VAR 0 9
36458: PUSH
36459: LD_VAR 0 53
36463: PUSH
36464: LD_VAR 0 54
36468: PUSH
36469: LD_VAR 0 55
36473: PUSH
36474: LD_VAR 0 56
36478: PUSH
36479: LD_VAR 0 57
36483: PUSH
36484: LD_VAR 0 58
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: PUSH
36497: LD_VAR 0 4
36501: PUSH
36502: LD_INT 1
36504: PLUS
36505: ARRAY
36506: ST_TO_ADDR
36507: GO 36616
36509: LD_INT 31
36511: DOUBLE
36512: EQUAL
36513: IFTRUE 36559
36515: LD_INT 32
36517: DOUBLE
36518: EQUAL
36519: IFTRUE 36559
36521: LD_INT 33
36523: DOUBLE
36524: EQUAL
36525: IFTRUE 36559
36527: LD_INT 27
36529: DOUBLE
36530: EQUAL
36531: IFTRUE 36559
36533: LD_INT 26
36535: DOUBLE
36536: EQUAL
36537: IFTRUE 36559
36539: LD_INT 28
36541: DOUBLE
36542: EQUAL
36543: IFTRUE 36559
36545: LD_INT 29
36547: DOUBLE
36548: EQUAL
36549: IFTRUE 36559
36551: LD_INT 30
36553: DOUBLE
36554: EQUAL
36555: IFTRUE 36559
36557: GO 36615
36559: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36560: LD_ADDR_VAR 0 9
36564: PUSH
36565: LD_VAR 0 59
36569: PUSH
36570: LD_VAR 0 60
36574: PUSH
36575: LD_VAR 0 61
36579: PUSH
36580: LD_VAR 0 62
36584: PUSH
36585: LD_VAR 0 63
36589: PUSH
36590: LD_VAR 0 64
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: PUSH
36603: LD_VAR 0 4
36607: PUSH
36608: LD_INT 1
36610: PLUS
36611: ARRAY
36612: ST_TO_ADDR
36613: GO 36616
36615: POP
// temp_list2 = [ ] ;
36616: LD_ADDR_VAR 0 10
36620: PUSH
36621: EMPTY
36622: ST_TO_ADDR
// for i in temp_list do
36623: LD_ADDR_VAR 0 8
36627: PUSH
36628: LD_VAR 0 9
36632: PUSH
36633: FOR_IN
36634: IFFALSE 36686
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36636: LD_ADDR_VAR 0 10
36640: PUSH
36641: LD_VAR 0 10
36645: PUSH
36646: LD_VAR 0 8
36650: PUSH
36651: LD_INT 1
36653: ARRAY
36654: PUSH
36655: LD_VAR 0 2
36659: PLUS
36660: PUSH
36661: LD_VAR 0 8
36665: PUSH
36666: LD_INT 2
36668: ARRAY
36669: PUSH
36670: LD_VAR 0 3
36674: PLUS
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: EMPTY
36681: LIST
36682: ADD
36683: ST_TO_ADDR
36684: GO 36633
36686: POP
36687: POP
// result = temp_list2 ;
36688: LD_ADDR_VAR 0 7
36692: PUSH
36693: LD_VAR 0 10
36697: ST_TO_ADDR
// end ;
36698: LD_VAR 0 7
36702: RET
// export function EnemyInRange ( unit , dist ) ; begin
36703: LD_INT 0
36705: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36706: LD_ADDR_VAR 0 3
36710: PUSH
36711: LD_VAR 0 1
36715: PPUSH
36716: CALL_OW 255
36720: PPUSH
36721: LD_VAR 0 1
36725: PPUSH
36726: CALL_OW 250
36730: PPUSH
36731: LD_VAR 0 1
36735: PPUSH
36736: CALL_OW 251
36740: PPUSH
36741: LD_VAR 0 2
36745: PPUSH
36746: CALL 11370 0 4
36750: PUSH
36751: LD_INT 4
36753: ARRAY
36754: ST_TO_ADDR
// end ;
36755: LD_VAR 0 3
36759: RET
// export function PlayerSeeMe ( unit ) ; begin
36760: LD_INT 0
36762: PPUSH
// result := See ( your_side , unit ) ;
36763: LD_ADDR_VAR 0 2
36767: PUSH
36768: LD_OWVAR 2
36772: PPUSH
36773: LD_VAR 0 1
36777: PPUSH
36778: CALL_OW 292
36782: ST_TO_ADDR
// end ;
36783: LD_VAR 0 2
36787: RET
// export function ReverseDir ( unit ) ; begin
36788: LD_INT 0
36790: PPUSH
// if not unit then
36791: LD_VAR 0 1
36795: NOT
36796: IFFALSE 36800
// exit ;
36798: GO 36846
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
36800: LD_ADDR_VAR 0 2
36804: PUSH
36805: LD_INT 3
36807: PUSH
36808: LD_INT 4
36810: PUSH
36811: LD_INT 5
36813: PUSH
36814: LD_INT 0
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: LD_INT 2
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: PUSH
36831: LD_VAR 0 1
36835: PPUSH
36836: CALL_OW 254
36840: PUSH
36841: LD_INT 1
36843: PLUS
36844: ARRAY
36845: ST_TO_ADDR
// end ;
36846: LD_VAR 0 2
36850: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
36851: LD_INT 0
36853: PPUSH
36854: PPUSH
36855: PPUSH
36856: PPUSH
36857: PPUSH
// if not hexes then
36858: LD_VAR 0 2
36862: NOT
36863: IFFALSE 36867
// exit ;
36865: GO 37015
// dist := 9999 ;
36867: LD_ADDR_VAR 0 5
36871: PUSH
36872: LD_INT 9999
36874: ST_TO_ADDR
// for i = 1 to hexes do
36875: LD_ADDR_VAR 0 4
36879: PUSH
36880: DOUBLE
36881: LD_INT 1
36883: DEC
36884: ST_TO_ADDR
36885: LD_VAR 0 2
36889: PUSH
36890: FOR_TO
36891: IFFALSE 37003
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
36893: LD_VAR 0 1
36897: PPUSH
36898: LD_VAR 0 2
36902: PUSH
36903: LD_VAR 0 4
36907: ARRAY
36908: PUSH
36909: LD_INT 1
36911: ARRAY
36912: PPUSH
36913: LD_VAR 0 2
36917: PUSH
36918: LD_VAR 0 4
36922: ARRAY
36923: PUSH
36924: LD_INT 2
36926: ARRAY
36927: PPUSH
36928: CALL_OW 297
36932: PUSH
36933: LD_VAR 0 5
36937: LESS
36938: IFFALSE 37001
// begin hex := hexes [ i ] ;
36940: LD_ADDR_VAR 0 7
36944: PUSH
36945: LD_VAR 0 2
36949: PUSH
36950: LD_VAR 0 4
36954: ARRAY
36955: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36956: LD_ADDR_VAR 0 5
36960: PUSH
36961: LD_VAR 0 1
36965: PPUSH
36966: LD_VAR 0 2
36970: PUSH
36971: LD_VAR 0 4
36975: ARRAY
36976: PUSH
36977: LD_INT 1
36979: ARRAY
36980: PPUSH
36981: LD_VAR 0 2
36985: PUSH
36986: LD_VAR 0 4
36990: ARRAY
36991: PUSH
36992: LD_INT 2
36994: ARRAY
36995: PPUSH
36996: CALL_OW 297
37000: ST_TO_ADDR
// end ; end ;
37001: GO 36890
37003: POP
37004: POP
// result := hex ;
37005: LD_ADDR_VAR 0 3
37009: PUSH
37010: LD_VAR 0 7
37014: ST_TO_ADDR
// end ;
37015: LD_VAR 0 3
37019: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37020: LD_INT 0
37022: PPUSH
37023: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37024: LD_VAR 0 1
37028: NOT
37029: PUSH
37030: LD_VAR 0 1
37034: PUSH
37035: LD_INT 21
37037: PUSH
37038: LD_INT 2
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 23
37047: PUSH
37048: LD_INT 2
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PPUSH
37059: CALL_OW 69
37063: IN
37064: NOT
37065: OR
37066: IFFALSE 37070
// exit ;
37068: GO 37117
// for i = 1 to 3 do
37070: LD_ADDR_VAR 0 3
37074: PUSH
37075: DOUBLE
37076: LD_INT 1
37078: DEC
37079: ST_TO_ADDR
37080: LD_INT 3
37082: PUSH
37083: FOR_TO
37084: IFFALSE 37115
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37086: LD_VAR 0 1
37090: PPUSH
37091: CALL_OW 250
37095: PPUSH
37096: LD_VAR 0 1
37100: PPUSH
37101: CALL_OW 251
37105: PPUSH
37106: LD_INT 1
37108: PPUSH
37109: CALL_OW 453
37113: GO 37083
37115: POP
37116: POP
// end ;
37117: LD_VAR 0 2
37121: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37122: LD_INT 0
37124: PPUSH
37125: PPUSH
37126: PPUSH
37127: PPUSH
37128: PPUSH
37129: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
37130: LD_VAR 0 1
37134: NOT
37135: PUSH
37136: LD_VAR 0 2
37140: NOT
37141: OR
37142: PUSH
37143: LD_VAR 0 1
37147: PPUSH
37148: CALL_OW 314
37152: OR
37153: IFFALSE 37157
// exit ;
37155: GO 37598
// x := GetX ( enemy_unit ) ;
37157: LD_ADDR_VAR 0 7
37161: PUSH
37162: LD_VAR 0 2
37166: PPUSH
37167: CALL_OW 250
37171: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37172: LD_ADDR_VAR 0 8
37176: PUSH
37177: LD_VAR 0 2
37181: PPUSH
37182: CALL_OW 251
37186: ST_TO_ADDR
// if not x or not y then
37187: LD_VAR 0 7
37191: NOT
37192: PUSH
37193: LD_VAR 0 8
37197: NOT
37198: OR
37199: IFFALSE 37203
// exit ;
37201: GO 37598
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37203: LD_ADDR_VAR 0 6
37207: PUSH
37208: LD_VAR 0 7
37212: PPUSH
37213: LD_INT 0
37215: PPUSH
37216: LD_INT 4
37218: PPUSH
37219: CALL_OW 272
37223: PUSH
37224: LD_VAR 0 8
37228: PPUSH
37229: LD_INT 0
37231: PPUSH
37232: LD_INT 4
37234: PPUSH
37235: CALL_OW 273
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_VAR 0 7
37248: PPUSH
37249: LD_INT 1
37251: PPUSH
37252: LD_INT 4
37254: PPUSH
37255: CALL_OW 272
37259: PUSH
37260: LD_VAR 0 8
37264: PPUSH
37265: LD_INT 1
37267: PPUSH
37268: LD_INT 4
37270: PPUSH
37271: CALL_OW 273
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_VAR 0 7
37284: PPUSH
37285: LD_INT 2
37287: PPUSH
37288: LD_INT 4
37290: PPUSH
37291: CALL_OW 272
37295: PUSH
37296: LD_VAR 0 8
37300: PPUSH
37301: LD_INT 2
37303: PPUSH
37304: LD_INT 4
37306: PPUSH
37307: CALL_OW 273
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_VAR 0 7
37320: PPUSH
37321: LD_INT 3
37323: PPUSH
37324: LD_INT 4
37326: PPUSH
37327: CALL_OW 272
37331: PUSH
37332: LD_VAR 0 8
37336: PPUSH
37337: LD_INT 3
37339: PPUSH
37340: LD_INT 4
37342: PPUSH
37343: CALL_OW 273
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_VAR 0 7
37356: PPUSH
37357: LD_INT 4
37359: PPUSH
37360: LD_INT 4
37362: PPUSH
37363: CALL_OW 272
37367: PUSH
37368: LD_VAR 0 8
37372: PPUSH
37373: LD_INT 4
37375: PPUSH
37376: LD_INT 4
37378: PPUSH
37379: CALL_OW 273
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_VAR 0 7
37392: PPUSH
37393: LD_INT 5
37395: PPUSH
37396: LD_INT 4
37398: PPUSH
37399: CALL_OW 272
37403: PUSH
37404: LD_VAR 0 8
37408: PPUSH
37409: LD_INT 5
37411: PPUSH
37412: LD_INT 4
37414: PPUSH
37415: CALL_OW 273
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: ST_TO_ADDR
// for i = tmp downto 1 do
37432: LD_ADDR_VAR 0 4
37436: PUSH
37437: DOUBLE
37438: LD_VAR 0 6
37442: INC
37443: ST_TO_ADDR
37444: LD_INT 1
37446: PUSH
37447: FOR_DOWNTO
37448: IFFALSE 37549
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37450: LD_VAR 0 6
37454: PUSH
37455: LD_VAR 0 4
37459: ARRAY
37460: PUSH
37461: LD_INT 1
37463: ARRAY
37464: PPUSH
37465: LD_VAR 0 6
37469: PUSH
37470: LD_VAR 0 4
37474: ARRAY
37475: PUSH
37476: LD_INT 2
37478: ARRAY
37479: PPUSH
37480: CALL_OW 488
37484: NOT
37485: PUSH
37486: LD_VAR 0 6
37490: PUSH
37491: LD_VAR 0 4
37495: ARRAY
37496: PUSH
37497: LD_INT 1
37499: ARRAY
37500: PPUSH
37501: LD_VAR 0 6
37505: PUSH
37506: LD_VAR 0 4
37510: ARRAY
37511: PUSH
37512: LD_INT 2
37514: ARRAY
37515: PPUSH
37516: CALL_OW 428
37520: PUSH
37521: LD_INT 0
37523: NONEQUAL
37524: OR
37525: IFFALSE 37547
// tmp := Delete ( tmp , i ) ;
37527: LD_ADDR_VAR 0 6
37531: PUSH
37532: LD_VAR 0 6
37536: PPUSH
37537: LD_VAR 0 4
37541: PPUSH
37542: CALL_OW 3
37546: ST_TO_ADDR
37547: GO 37447
37549: POP
37550: POP
// j := GetClosestHex ( unit , tmp ) ;
37551: LD_ADDR_VAR 0 5
37555: PUSH
37556: LD_VAR 0 1
37560: PPUSH
37561: LD_VAR 0 6
37565: PPUSH
37566: CALL 36851 0 2
37570: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37571: LD_VAR 0 1
37575: PPUSH
37576: LD_VAR 0 5
37580: PUSH
37581: LD_INT 1
37583: ARRAY
37584: PPUSH
37585: LD_VAR 0 5
37589: PUSH
37590: LD_INT 2
37592: ARRAY
37593: PPUSH
37594: CALL_OW 111
// end ;
37598: LD_VAR 0 3
37602: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37603: LD_INT 0
37605: PPUSH
37606: PPUSH
37607: PPUSH
// uc_side = 0 ;
37608: LD_ADDR_OWVAR 20
37612: PUSH
37613: LD_INT 0
37615: ST_TO_ADDR
// uc_nation = 0 ;
37616: LD_ADDR_OWVAR 21
37620: PUSH
37621: LD_INT 0
37623: ST_TO_ADDR
// InitHc ;
37624: CALL_OW 19
// InitVc ;
37628: CALL_OW 20
// if mastodonts then
37632: LD_VAR 0 6
37636: IFFALSE 37703
// for i = 1 to mastodonts do
37638: LD_ADDR_VAR 0 11
37642: PUSH
37643: DOUBLE
37644: LD_INT 1
37646: DEC
37647: ST_TO_ADDR
37648: LD_VAR 0 6
37652: PUSH
37653: FOR_TO
37654: IFFALSE 37701
// begin vc_chassis := 31 ;
37656: LD_ADDR_OWVAR 37
37660: PUSH
37661: LD_INT 31
37663: ST_TO_ADDR
// vc_control := control_rider ;
37664: LD_ADDR_OWVAR 38
37668: PUSH
37669: LD_INT 4
37671: ST_TO_ADDR
// animal := CreateVehicle ;
37672: LD_ADDR_VAR 0 12
37676: PUSH
37677: CALL_OW 45
37681: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
37682: LD_VAR 0 12
37686: PPUSH
37687: LD_VAR 0 8
37691: PPUSH
37692: LD_INT 0
37694: PPUSH
37695: CALL_OW 49
// end ;
37699: GO 37653
37701: POP
37702: POP
// if horses then
37703: LD_VAR 0 5
37707: IFFALSE 37774
// for i = 1 to horses do
37709: LD_ADDR_VAR 0 11
37713: PUSH
37714: DOUBLE
37715: LD_INT 1
37717: DEC
37718: ST_TO_ADDR
37719: LD_VAR 0 5
37723: PUSH
37724: FOR_TO
37725: IFFALSE 37772
// begin hc_class := 21 ;
37727: LD_ADDR_OWVAR 28
37731: PUSH
37732: LD_INT 21
37734: ST_TO_ADDR
// hc_gallery :=  ;
37735: LD_ADDR_OWVAR 33
37739: PUSH
37740: LD_STRING 
37742: ST_TO_ADDR
// animal := CreateHuman ;
37743: LD_ADDR_VAR 0 12
37747: PUSH
37748: CALL_OW 44
37752: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
37753: LD_VAR 0 12
37757: PPUSH
37758: LD_VAR 0 8
37762: PPUSH
37763: LD_INT 0
37765: PPUSH
37766: CALL_OW 49
// end ;
37770: GO 37724
37772: POP
37773: POP
// if birds then
37774: LD_VAR 0 1
37778: IFFALSE 37845
// for i = 1 to birds do
37780: LD_ADDR_VAR 0 11
37784: PUSH
37785: DOUBLE
37786: LD_INT 1
37788: DEC
37789: ST_TO_ADDR
37790: LD_VAR 0 1
37794: PUSH
37795: FOR_TO
37796: IFFALSE 37843
// begin hc_class = 18 ;
37798: LD_ADDR_OWVAR 28
37802: PUSH
37803: LD_INT 18
37805: ST_TO_ADDR
// hc_gallery =  ;
37806: LD_ADDR_OWVAR 33
37810: PUSH
37811: LD_STRING 
37813: ST_TO_ADDR
// animal := CreateHuman ;
37814: LD_ADDR_VAR 0 12
37818: PUSH
37819: CALL_OW 44
37823: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
37824: LD_VAR 0 12
37828: PPUSH
37829: LD_VAR 0 8
37833: PPUSH
37834: LD_INT 0
37836: PPUSH
37837: CALL_OW 49
// end ;
37841: GO 37795
37843: POP
37844: POP
// if tigers then
37845: LD_VAR 0 2
37849: IFFALSE 37933
// for i = 1 to tigers do
37851: LD_ADDR_VAR 0 11
37855: PUSH
37856: DOUBLE
37857: LD_INT 1
37859: DEC
37860: ST_TO_ADDR
37861: LD_VAR 0 2
37865: PUSH
37866: FOR_TO
37867: IFFALSE 37931
// begin hc_class = class_tiger ;
37869: LD_ADDR_OWVAR 28
37873: PUSH
37874: LD_INT 14
37876: ST_TO_ADDR
// hc_gallery =  ;
37877: LD_ADDR_OWVAR 33
37881: PUSH
37882: LD_STRING 
37884: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37885: LD_ADDR_OWVAR 35
37889: PUSH
37890: LD_INT 7
37892: NEG
37893: PPUSH
37894: LD_INT 7
37896: PPUSH
37897: CALL_OW 12
37901: ST_TO_ADDR
// animal := CreateHuman ;
37902: LD_ADDR_VAR 0 12
37906: PUSH
37907: CALL_OW 44
37911: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
37912: LD_VAR 0 12
37916: PPUSH
37917: LD_VAR 0 8
37921: PPUSH
37922: LD_INT 0
37924: PPUSH
37925: CALL_OW 49
// end ;
37929: GO 37866
37931: POP
37932: POP
// if apemans then
37933: LD_VAR 0 3
37937: IFFALSE 38060
// for i = 1 to apemans do
37939: LD_ADDR_VAR 0 11
37943: PUSH
37944: DOUBLE
37945: LD_INT 1
37947: DEC
37948: ST_TO_ADDR
37949: LD_VAR 0 3
37953: PUSH
37954: FOR_TO
37955: IFFALSE 38058
// begin hc_class = class_apeman ;
37957: LD_ADDR_OWVAR 28
37961: PUSH
37962: LD_INT 12
37964: ST_TO_ADDR
// hc_gallery =  ;
37965: LD_ADDR_OWVAR 33
37969: PUSH
37970: LD_STRING 
37972: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
37973: LD_ADDR_OWVAR 35
37977: PUSH
37978: LD_INT 5
37980: NEG
37981: PPUSH
37982: LD_INT 5
37984: PPUSH
37985: CALL_OW 12
37989: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37990: LD_ADDR_OWVAR 31
37994: PUSH
37995: LD_INT 1
37997: PPUSH
37998: LD_INT 3
38000: PPUSH
38001: CALL_OW 12
38005: PUSH
38006: LD_INT 1
38008: PPUSH
38009: LD_INT 3
38011: PPUSH
38012: CALL_OW 12
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: ST_TO_ADDR
// animal := CreateHuman ;
38029: LD_ADDR_VAR 0 12
38033: PUSH
38034: CALL_OW 44
38038: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
38039: LD_VAR 0 12
38043: PPUSH
38044: LD_VAR 0 8
38048: PPUSH
38049: LD_INT 0
38051: PPUSH
38052: CALL_OW 49
// end ;
38056: GO 37954
38058: POP
38059: POP
// if enchidnas then
38060: LD_VAR 0 4
38064: IFFALSE 38131
// for i = 1 to enchidnas do
38066: LD_ADDR_VAR 0 11
38070: PUSH
38071: DOUBLE
38072: LD_INT 1
38074: DEC
38075: ST_TO_ADDR
38076: LD_VAR 0 4
38080: PUSH
38081: FOR_TO
38082: IFFALSE 38129
// begin hc_class = 13 ;
38084: LD_ADDR_OWVAR 28
38088: PUSH
38089: LD_INT 13
38091: ST_TO_ADDR
// hc_gallery =  ;
38092: LD_ADDR_OWVAR 33
38096: PUSH
38097: LD_STRING 
38099: ST_TO_ADDR
// animal := CreateHuman ;
38100: LD_ADDR_VAR 0 12
38104: PUSH
38105: CALL_OW 44
38109: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
38110: LD_VAR 0 12
38114: PPUSH
38115: LD_VAR 0 8
38119: PPUSH
38120: LD_INT 0
38122: PPUSH
38123: CALL_OW 49
// end ;
38127: GO 38081
38129: POP
38130: POP
// if not wat_area then
38131: LD_VAR 0 9
38135: NOT
38136: IFFALSE 38140
// exit ;
38138: GO 38211
// if fishes then
38140: LD_VAR 0 7
38144: IFFALSE 38211
// for i = 1 to fishes do
38146: LD_ADDR_VAR 0 11
38150: PUSH
38151: DOUBLE
38152: LD_INT 1
38154: DEC
38155: ST_TO_ADDR
38156: LD_VAR 0 7
38160: PUSH
38161: FOR_TO
38162: IFFALSE 38209
// begin hc_class = 20 ;
38164: LD_ADDR_OWVAR 28
38168: PUSH
38169: LD_INT 20
38171: ST_TO_ADDR
// hc_gallery =  ;
38172: LD_ADDR_OWVAR 33
38176: PUSH
38177: LD_STRING 
38179: ST_TO_ADDR
// animal := CreateHuman ;
38180: LD_ADDR_VAR 0 12
38184: PUSH
38185: CALL_OW 44
38189: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
38190: LD_VAR 0 12
38194: PPUSH
38195: LD_VAR 0 9
38199: PPUSH
38200: LD_INT 0
38202: PPUSH
38203: CALL_OW 49
// end ;
38207: GO 38161
38209: POP
38210: POP
// end ;
38211: LD_VAR 0 10
38215: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
38216: LD_INT 0
38218: PPUSH
38219: PPUSH
38220: PPUSH
38221: PPUSH
38222: PPUSH
38223: PPUSH
38224: PPUSH
38225: PPUSH
38226: PPUSH
38227: PPUSH
38228: PPUSH
38229: PPUSH
38230: PPUSH
38231: PPUSH
38232: PPUSH
38233: PPUSH
38234: PPUSH
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
38239: PPUSH
38240: PPUSH
38241: PPUSH
38242: PPUSH
38243: PPUSH
38244: PPUSH
38245: PPUSH
// if not list then
38246: LD_VAR 0 1
38250: NOT
38251: IFFALSE 38255
// exit ;
38253: GO 41498
// base := list [ 1 ] ;
38255: LD_ADDR_VAR 0 3
38259: PUSH
38260: LD_VAR 0 1
38264: PUSH
38265: LD_INT 1
38267: ARRAY
38268: ST_TO_ADDR
// group := list [ 2 ] ;
38269: LD_ADDR_VAR 0 4
38273: PUSH
38274: LD_VAR 0 1
38278: PUSH
38279: LD_INT 2
38281: ARRAY
38282: ST_TO_ADDR
// path := list [ 3 ] ;
38283: LD_ADDR_VAR 0 5
38287: PUSH
38288: LD_VAR 0 1
38292: PUSH
38293: LD_INT 3
38295: ARRAY
38296: ST_TO_ADDR
// flags := list [ 4 ] ;
38297: LD_ADDR_VAR 0 6
38301: PUSH
38302: LD_VAR 0 1
38306: PUSH
38307: LD_INT 4
38309: ARRAY
38310: ST_TO_ADDR
// mined := [ ] ;
38311: LD_ADDR_VAR 0 27
38315: PUSH
38316: EMPTY
38317: ST_TO_ADDR
// bombed := [ ] ;
38318: LD_ADDR_VAR 0 28
38322: PUSH
38323: EMPTY
38324: ST_TO_ADDR
// if not group or not path then
38325: LD_VAR 0 4
38329: NOT
38330: PUSH
38331: LD_VAR 0 5
38335: NOT
38336: OR
38337: IFFALSE 38341
// exit ;
38339: GO 41498
// if flags then
38341: LD_VAR 0 6
38345: IFFALSE 38489
// begin f_ignore_area := flags [ 1 ] ;
38347: LD_ADDR_VAR 0 17
38351: PUSH
38352: LD_VAR 0 6
38356: PUSH
38357: LD_INT 1
38359: ARRAY
38360: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
38361: LD_ADDR_VAR 0 18
38365: PUSH
38366: LD_VAR 0 6
38370: PUSH
38371: LD_INT 2
38373: ARRAY
38374: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
38375: LD_ADDR_VAR 0 19
38379: PUSH
38380: LD_VAR 0 6
38384: PUSH
38385: LD_INT 3
38387: ARRAY
38388: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
38389: LD_ADDR_VAR 0 20
38393: PUSH
38394: LD_VAR 0 6
38398: PUSH
38399: LD_INT 4
38401: ARRAY
38402: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
38403: LD_ADDR_VAR 0 21
38407: PUSH
38408: LD_VAR 0 6
38412: PUSH
38413: LD_INT 5
38415: ARRAY
38416: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
38417: LD_ADDR_VAR 0 22
38421: PUSH
38422: LD_VAR 0 6
38426: PUSH
38427: LD_INT 6
38429: ARRAY
38430: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
38431: LD_ADDR_VAR 0 23
38435: PUSH
38436: LD_VAR 0 6
38440: PUSH
38441: LD_INT 7
38443: ARRAY
38444: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
38445: LD_ADDR_VAR 0 24
38449: PUSH
38450: LD_VAR 0 6
38454: PUSH
38455: LD_INT 8
38457: ARRAY
38458: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
38459: LD_ADDR_VAR 0 25
38463: PUSH
38464: LD_VAR 0 6
38468: PUSH
38469: LD_INT 9
38471: ARRAY
38472: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
38473: LD_ADDR_VAR 0 26
38477: PUSH
38478: LD_VAR 0 6
38482: PUSH
38483: LD_INT 10
38485: ARRAY
38486: ST_TO_ADDR
// end else
38487: GO 38569
// begin f_ignore_area := false ;
38489: LD_ADDR_VAR 0 17
38493: PUSH
38494: LD_INT 0
38496: ST_TO_ADDR
// f_capture := false ;
38497: LD_ADDR_VAR 0 18
38501: PUSH
38502: LD_INT 0
38504: ST_TO_ADDR
// f_ignore_civ := false ;
38505: LD_ADDR_VAR 0 19
38509: PUSH
38510: LD_INT 0
38512: ST_TO_ADDR
// f_murder := false ;
38513: LD_ADDR_VAR 0 20
38517: PUSH
38518: LD_INT 0
38520: ST_TO_ADDR
// f_mines := false ;
38521: LD_ADDR_VAR 0 21
38525: PUSH
38526: LD_INT 0
38528: ST_TO_ADDR
// f_repair := false ;
38529: LD_ADDR_VAR 0 22
38533: PUSH
38534: LD_INT 0
38536: ST_TO_ADDR
// f_heal := false ;
38537: LD_ADDR_VAR 0 23
38541: PUSH
38542: LD_INT 0
38544: ST_TO_ADDR
// f_spacetime := false ;
38545: LD_ADDR_VAR 0 24
38549: PUSH
38550: LD_INT 0
38552: ST_TO_ADDR
// f_attack_depot := false ;
38553: LD_ADDR_VAR 0 25
38557: PUSH
38558: LD_INT 0
38560: ST_TO_ADDR
// f_crawl := false ;
38561: LD_ADDR_VAR 0 26
38565: PUSH
38566: LD_INT 0
38568: ST_TO_ADDR
// end ; units_path := [ ] ;
38569: LD_ADDR_VAR 0 16
38573: PUSH
38574: EMPTY
38575: ST_TO_ADDR
// for i = 1 to group do
38576: LD_ADDR_VAR 0 7
38580: PUSH
38581: DOUBLE
38582: LD_INT 1
38584: DEC
38585: ST_TO_ADDR
38586: LD_VAR 0 4
38590: PUSH
38591: FOR_TO
38592: IFFALSE 38621
// begin units_path := Replace ( units_path , i , path ) ;
38594: LD_ADDR_VAR 0 16
38598: PUSH
38599: LD_VAR 0 16
38603: PPUSH
38604: LD_VAR 0 7
38608: PPUSH
38609: LD_VAR 0 5
38613: PPUSH
38614: CALL_OW 1
38618: ST_TO_ADDR
// end ;
38619: GO 38591
38621: POP
38622: POP
// repeat for i = group downto 1 do
38623: LD_ADDR_VAR 0 7
38627: PUSH
38628: DOUBLE
38629: LD_VAR 0 4
38633: INC
38634: ST_TO_ADDR
38635: LD_INT 1
38637: PUSH
38638: FOR_DOWNTO
38639: IFFALSE 41480
// begin wait ( 0 0$1 ) ;
38641: LD_INT 35
38643: PPUSH
38644: CALL_OW 67
// tmp := [ ] ;
38648: LD_ADDR_VAR 0 14
38652: PUSH
38653: EMPTY
38654: ST_TO_ADDR
// attacking := false ;
38655: LD_ADDR_VAR 0 29
38659: PUSH
38660: LD_INT 0
38662: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
38663: LD_VAR 0 4
38667: PUSH
38668: LD_VAR 0 7
38672: ARRAY
38673: PPUSH
38674: CALL_OW 301
38678: PUSH
38679: LD_VAR 0 4
38683: PUSH
38684: LD_VAR 0 7
38688: ARRAY
38689: NOT
38690: OR
38691: IFFALSE 38735
// begin group := Delete ( group , i ) ;
38693: LD_ADDR_VAR 0 4
38697: PUSH
38698: LD_VAR 0 4
38702: PPUSH
38703: LD_VAR 0 7
38707: PPUSH
38708: CALL_OW 3
38712: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
38713: LD_ADDR_VAR 0 16
38717: PUSH
38718: LD_VAR 0 16
38722: PPUSH
38723: LD_VAR 0 7
38727: PPUSH
38728: CALL_OW 3
38732: ST_TO_ADDR
// continue ;
38733: GO 38638
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
38735: LD_VAR 0 4
38739: PUSH
38740: LD_VAR 0 7
38744: ARRAY
38745: PPUSH
38746: LD_INT 10
38748: PPUSH
38749: CALL 36703 0 2
38753: NOT
38754: PUSH
38755: LD_VAR 0 16
38759: PUSH
38760: LD_VAR 0 7
38764: ARRAY
38765: PUSH
38766: EMPTY
38767: EQUAL
38768: NOT
38769: AND
38770: IFFALSE 39036
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
38772: LD_VAR 0 4
38776: PUSH
38777: LD_VAR 0 7
38781: ARRAY
38782: PPUSH
38783: CALL_OW 262
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: LD_INT 2
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: IN
38798: IFFALSE 38839
// if GetFuel ( group [ i ] ) < 10 then
38800: LD_VAR 0 4
38804: PUSH
38805: LD_VAR 0 7
38809: ARRAY
38810: PPUSH
38811: CALL_OW 261
38815: PUSH
38816: LD_INT 10
38818: LESS
38819: IFFALSE 38839
// SetFuel ( group [ i ] , 12 ) ;
38821: LD_VAR 0 4
38825: PUSH
38826: LD_VAR 0 7
38830: ARRAY
38831: PPUSH
38832: LD_INT 12
38834: PPUSH
38835: CALL_OW 240
// if units_path [ i ] then
38839: LD_VAR 0 16
38843: PUSH
38844: LD_VAR 0 7
38848: ARRAY
38849: IFFALSE 39034
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
38851: LD_VAR 0 4
38855: PUSH
38856: LD_VAR 0 7
38860: ARRAY
38861: PPUSH
38862: LD_VAR 0 16
38866: PUSH
38867: LD_VAR 0 7
38871: ARRAY
38872: PUSH
38873: LD_INT 1
38875: ARRAY
38876: PUSH
38877: LD_INT 1
38879: ARRAY
38880: PPUSH
38881: LD_VAR 0 16
38885: PUSH
38886: LD_VAR 0 7
38890: ARRAY
38891: PUSH
38892: LD_INT 1
38894: ARRAY
38895: PUSH
38896: LD_INT 2
38898: ARRAY
38899: PPUSH
38900: CALL_OW 297
38904: PUSH
38905: LD_INT 6
38907: GREATER
38908: IFFALSE 38983
// begin if not HasTask ( group [ i ] ) then
38910: LD_VAR 0 4
38914: PUSH
38915: LD_VAR 0 7
38919: ARRAY
38920: PPUSH
38921: CALL_OW 314
38925: NOT
38926: IFFALSE 38981
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
38928: LD_VAR 0 4
38932: PUSH
38933: LD_VAR 0 7
38937: ARRAY
38938: PPUSH
38939: LD_VAR 0 16
38943: PUSH
38944: LD_VAR 0 7
38948: ARRAY
38949: PUSH
38950: LD_INT 1
38952: ARRAY
38953: PUSH
38954: LD_INT 1
38956: ARRAY
38957: PPUSH
38958: LD_VAR 0 16
38962: PUSH
38963: LD_VAR 0 7
38967: ARRAY
38968: PUSH
38969: LD_INT 1
38971: ARRAY
38972: PUSH
38973: LD_INT 2
38975: ARRAY
38976: PPUSH
38977: CALL_OW 114
// end else
38981: GO 39034
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
38983: LD_ADDR_VAR 0 15
38987: PUSH
38988: LD_VAR 0 16
38992: PUSH
38993: LD_VAR 0 7
38997: ARRAY
38998: PPUSH
38999: LD_INT 1
39001: PPUSH
39002: CALL_OW 3
39006: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
39007: LD_ADDR_VAR 0 16
39011: PUSH
39012: LD_VAR 0 16
39016: PPUSH
39017: LD_VAR 0 7
39021: PPUSH
39022: LD_VAR 0 15
39026: PPUSH
39027: CALL_OW 1
39031: ST_TO_ADDR
// continue ;
39032: GO 38638
// end ; end ; end else
39034: GO 41478
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
39036: LD_ADDR_VAR 0 14
39040: PUSH
39041: LD_INT 81
39043: PUSH
39044: LD_VAR 0 4
39048: PUSH
39049: LD_VAR 0 7
39053: ARRAY
39054: PPUSH
39055: CALL_OW 255
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PPUSH
39064: CALL_OW 69
39068: ST_TO_ADDR
// if not tmp then
39069: LD_VAR 0 14
39073: NOT
39074: IFFALSE 39078
// continue ;
39076: GO 38638
// if f_ignore_area then
39078: LD_VAR 0 17
39082: IFFALSE 39170
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
39084: LD_ADDR_VAR 0 15
39088: PUSH
39089: LD_VAR 0 14
39093: PPUSH
39094: LD_INT 3
39096: PUSH
39097: LD_INT 92
39099: PUSH
39100: LD_VAR 0 17
39104: PUSH
39105: LD_INT 1
39107: ARRAY
39108: PUSH
39109: LD_VAR 0 17
39113: PUSH
39114: LD_INT 2
39116: ARRAY
39117: PUSH
39118: LD_VAR 0 17
39122: PUSH
39123: LD_INT 3
39125: ARRAY
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PPUSH
39137: CALL_OW 72
39141: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
39142: LD_VAR 0 14
39146: PUSH
39147: LD_VAR 0 15
39151: DIFF
39152: IFFALSE 39170
// tmp := tmp diff tmp2 ;
39154: LD_ADDR_VAR 0 14
39158: PUSH
39159: LD_VAR 0 14
39163: PUSH
39164: LD_VAR 0 15
39168: DIFF
39169: ST_TO_ADDR
// end ; if not f_murder then
39170: LD_VAR 0 20
39174: NOT
39175: IFFALSE 39233
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
39177: LD_ADDR_VAR 0 15
39181: PUSH
39182: LD_VAR 0 14
39186: PPUSH
39187: LD_INT 3
39189: PUSH
39190: LD_INT 50
39192: PUSH
39193: EMPTY
39194: LIST
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PPUSH
39200: CALL_OW 72
39204: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
39205: LD_VAR 0 14
39209: PUSH
39210: LD_VAR 0 15
39214: DIFF
39215: IFFALSE 39233
// tmp := tmp diff tmp2 ;
39217: LD_ADDR_VAR 0 14
39221: PUSH
39222: LD_VAR 0 14
39226: PUSH
39227: LD_VAR 0 15
39231: DIFF
39232: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
39233: LD_ADDR_VAR 0 14
39237: PUSH
39238: LD_VAR 0 4
39242: PUSH
39243: LD_VAR 0 7
39247: ARRAY
39248: PPUSH
39249: LD_VAR 0 14
39253: PPUSH
39254: LD_INT 1
39256: PPUSH
39257: LD_INT 1
39259: PPUSH
39260: CALL 10909 0 4
39264: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
39265: LD_VAR 0 4
39269: PUSH
39270: LD_VAR 0 7
39274: ARRAY
39275: PPUSH
39276: CALL_OW 257
39280: PUSH
39281: LD_INT 1
39283: EQUAL
39284: IFFALSE 39732
// begin if WantPlant ( group [ i ] ) then
39286: LD_VAR 0 4
39290: PUSH
39291: LD_VAR 0 7
39295: ARRAY
39296: PPUSH
39297: CALL 10377 0 1
39301: IFFALSE 39305
// continue ;
39303: GO 38638
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
39305: LD_VAR 0 18
39309: PUSH
39310: LD_VAR 0 4
39314: PUSH
39315: LD_VAR 0 7
39319: ARRAY
39320: PPUSH
39321: CALL_OW 310
39325: NOT
39326: AND
39327: PUSH
39328: LD_VAR 0 14
39332: PUSH
39333: LD_INT 1
39335: ARRAY
39336: PUSH
39337: LD_VAR 0 14
39341: PPUSH
39342: LD_INT 21
39344: PUSH
39345: LD_INT 2
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 58
39354: PUSH
39355: EMPTY
39356: LIST
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PPUSH
39362: CALL_OW 72
39366: IN
39367: AND
39368: IFFALSE 39404
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
39370: LD_VAR 0 4
39374: PUSH
39375: LD_VAR 0 7
39379: ARRAY
39380: PPUSH
39381: LD_VAR 0 14
39385: PUSH
39386: LD_INT 1
39388: ARRAY
39389: PPUSH
39390: CALL_OW 120
// attacking := true ;
39394: LD_ADDR_VAR 0 29
39398: PUSH
39399: LD_INT 1
39401: ST_TO_ADDR
// continue ;
39402: GO 38638
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
39404: LD_VAR 0 26
39408: PUSH
39409: LD_VAR 0 4
39413: PUSH
39414: LD_VAR 0 7
39418: ARRAY
39419: PPUSH
39420: CALL_OW 257
39424: PUSH
39425: LD_INT 1
39427: EQUAL
39428: AND
39429: PUSH
39430: LD_VAR 0 4
39434: PUSH
39435: LD_VAR 0 7
39439: ARRAY
39440: PPUSH
39441: CALL_OW 256
39445: PUSH
39446: LD_INT 800
39448: LESS
39449: AND
39450: PUSH
39451: LD_VAR 0 4
39455: PUSH
39456: LD_VAR 0 7
39460: ARRAY
39461: PPUSH
39462: CALL_OW 318
39466: NOT
39467: AND
39468: IFFALSE 39485
// ComCrawl ( group [ i ] ) ;
39470: LD_VAR 0 4
39474: PUSH
39475: LD_VAR 0 7
39479: ARRAY
39480: PPUSH
39481: CALL_OW 137
// if f_mines then
39485: LD_VAR 0 21
39489: IFFALSE 39732
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
39491: LD_VAR 0 14
39495: PUSH
39496: LD_INT 1
39498: ARRAY
39499: PPUSH
39500: CALL_OW 247
39504: PUSH
39505: LD_INT 3
39507: EQUAL
39508: PUSH
39509: LD_VAR 0 14
39513: PUSH
39514: LD_INT 1
39516: ARRAY
39517: PUSH
39518: LD_VAR 0 27
39522: IN
39523: NOT
39524: AND
39525: IFFALSE 39732
// begin x := GetX ( tmp [ 1 ] ) ;
39527: LD_ADDR_VAR 0 10
39531: PUSH
39532: LD_VAR 0 14
39536: PUSH
39537: LD_INT 1
39539: ARRAY
39540: PPUSH
39541: CALL_OW 250
39545: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
39546: LD_ADDR_VAR 0 11
39550: PUSH
39551: LD_VAR 0 14
39555: PUSH
39556: LD_INT 1
39558: ARRAY
39559: PPUSH
39560: CALL_OW 251
39564: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
39565: LD_ADDR_VAR 0 12
39569: PUSH
39570: LD_VAR 0 4
39574: PUSH
39575: LD_VAR 0 7
39579: ARRAY
39580: PPUSH
39581: CALL 36788 0 1
39585: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
39586: LD_VAR 0 4
39590: PUSH
39591: LD_VAR 0 7
39595: ARRAY
39596: PPUSH
39597: LD_VAR 0 10
39601: PPUSH
39602: LD_VAR 0 11
39606: PPUSH
39607: LD_VAR 0 14
39611: PUSH
39612: LD_INT 1
39614: ARRAY
39615: PPUSH
39616: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
39620: LD_VAR 0 4
39624: PUSH
39625: LD_VAR 0 7
39629: ARRAY
39630: PPUSH
39631: LD_VAR 0 10
39635: PPUSH
39636: LD_VAR 0 12
39640: PPUSH
39641: LD_INT 7
39643: PPUSH
39644: CALL_OW 272
39648: PPUSH
39649: LD_VAR 0 11
39653: PPUSH
39654: LD_VAR 0 12
39658: PPUSH
39659: LD_INT 7
39661: PPUSH
39662: CALL_OW 273
39666: PPUSH
39667: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
39671: LD_VAR 0 4
39675: PUSH
39676: LD_VAR 0 7
39680: ARRAY
39681: PPUSH
39682: LD_INT 71
39684: PPUSH
39685: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
39689: LD_ADDR_VAR 0 27
39693: PUSH
39694: LD_VAR 0 27
39698: PPUSH
39699: LD_VAR 0 27
39703: PUSH
39704: LD_INT 1
39706: PLUS
39707: PPUSH
39708: LD_VAR 0 14
39712: PUSH
39713: LD_INT 1
39715: ARRAY
39716: PPUSH
39717: CALL_OW 1
39721: ST_TO_ADDR
// attacking := true ;
39722: LD_ADDR_VAR 0 29
39726: PUSH
39727: LD_INT 1
39729: ST_TO_ADDR
// continue ;
39730: GO 38638
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
39732: LD_VAR 0 4
39736: PUSH
39737: LD_VAR 0 7
39741: ARRAY
39742: PPUSH
39743: CALL_OW 257
39747: PUSH
39748: LD_INT 17
39750: EQUAL
39751: PUSH
39752: LD_VAR 0 4
39756: PUSH
39757: LD_VAR 0 7
39761: ARRAY
39762: PPUSH
39763: CALL_OW 110
39767: PUSH
39768: LD_INT 71
39770: EQUAL
39771: NOT
39772: AND
39773: IFFALSE 39919
// begin attacking := false ;
39775: LD_ADDR_VAR 0 29
39779: PUSH
39780: LD_INT 0
39782: ST_TO_ADDR
// k := 5 ;
39783: LD_ADDR_VAR 0 9
39787: PUSH
39788: LD_INT 5
39790: ST_TO_ADDR
// if tmp < k then
39791: LD_VAR 0 14
39795: PUSH
39796: LD_VAR 0 9
39800: LESS
39801: IFFALSE 39813
// k := tmp ;
39803: LD_ADDR_VAR 0 9
39807: PUSH
39808: LD_VAR 0 14
39812: ST_TO_ADDR
// for j = 1 to k do
39813: LD_ADDR_VAR 0 8
39817: PUSH
39818: DOUBLE
39819: LD_INT 1
39821: DEC
39822: ST_TO_ADDR
39823: LD_VAR 0 9
39827: PUSH
39828: FOR_TO
39829: IFFALSE 39917
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
39831: LD_VAR 0 14
39835: PUSH
39836: LD_VAR 0 8
39840: ARRAY
39841: PUSH
39842: LD_VAR 0 14
39846: PPUSH
39847: LD_INT 58
39849: PUSH
39850: EMPTY
39851: LIST
39852: PPUSH
39853: CALL_OW 72
39857: IN
39858: NOT
39859: IFFALSE 39915
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
39861: LD_VAR 0 4
39865: PUSH
39866: LD_VAR 0 7
39870: ARRAY
39871: PPUSH
39872: LD_VAR 0 14
39876: PUSH
39877: LD_VAR 0 8
39881: ARRAY
39882: PPUSH
39883: CALL_OW 115
// attacking := true ;
39887: LD_ADDR_VAR 0 29
39891: PUSH
39892: LD_INT 1
39894: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
39895: LD_VAR 0 4
39899: PUSH
39900: LD_VAR 0 7
39904: ARRAY
39905: PPUSH
39906: LD_INT 71
39908: PPUSH
39909: CALL_OW 109
// continue ;
39913: GO 39828
// end ; end ;
39915: GO 39828
39917: POP
39918: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
39919: LD_VAR 0 4
39923: PUSH
39924: LD_VAR 0 7
39928: ARRAY
39929: PPUSH
39930: CALL_OW 257
39934: PUSH
39935: LD_INT 8
39937: EQUAL
39938: PUSH
39939: LD_VAR 0 4
39943: PUSH
39944: LD_VAR 0 7
39948: ARRAY
39949: PPUSH
39950: CALL_OW 264
39954: PUSH
39955: LD_INT 28
39957: PUSH
39958: LD_INT 45
39960: PUSH
39961: LD_INT 7
39963: PUSH
39964: LD_INT 47
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: IN
39973: OR
39974: IFFALSE 40204
// begin attacking := false ;
39976: LD_ADDR_VAR 0 29
39980: PUSH
39981: LD_INT 0
39983: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
39984: LD_VAR 0 14
39988: PUSH
39989: LD_INT 1
39991: ARRAY
39992: PPUSH
39993: CALL_OW 266
39997: PUSH
39998: LD_INT 32
40000: PUSH
40001: LD_INT 31
40003: PUSH
40004: LD_INT 33
40006: PUSH
40007: LD_INT 4
40009: PUSH
40010: LD_INT 5
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: IN
40020: IFFALSE 40204
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
40022: LD_ADDR_VAR 0 9
40026: PUSH
40027: LD_VAR 0 14
40031: PUSH
40032: LD_INT 1
40034: ARRAY
40035: PPUSH
40036: CALL_OW 266
40040: PPUSH
40041: LD_VAR 0 14
40045: PUSH
40046: LD_INT 1
40048: ARRAY
40049: PPUSH
40050: CALL_OW 250
40054: PPUSH
40055: LD_VAR 0 14
40059: PUSH
40060: LD_INT 1
40062: ARRAY
40063: PPUSH
40064: CALL_OW 251
40068: PPUSH
40069: LD_VAR 0 14
40073: PUSH
40074: LD_INT 1
40076: ARRAY
40077: PPUSH
40078: CALL_OW 254
40082: PPUSH
40083: LD_VAR 0 14
40087: PUSH
40088: LD_INT 1
40090: ARRAY
40091: PPUSH
40092: CALL_OW 248
40096: PPUSH
40097: LD_INT 0
40099: PPUSH
40100: CALL 18164 0 6
40104: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
40105: LD_ADDR_VAR 0 8
40109: PUSH
40110: LD_VAR 0 4
40114: PUSH
40115: LD_VAR 0 7
40119: ARRAY
40120: PPUSH
40121: LD_VAR 0 9
40125: PPUSH
40126: CALL 36851 0 2
40130: ST_TO_ADDR
// if j then
40131: LD_VAR 0 8
40135: IFFALSE 40204
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40137: LD_VAR 0 8
40141: PUSH
40142: LD_INT 1
40144: ARRAY
40145: PPUSH
40146: LD_VAR 0 8
40150: PUSH
40151: LD_INT 2
40153: ARRAY
40154: PPUSH
40155: CALL_OW 488
40159: IFFALSE 40204
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
40161: LD_VAR 0 4
40165: PUSH
40166: LD_VAR 0 7
40170: ARRAY
40171: PPUSH
40172: LD_VAR 0 8
40176: PUSH
40177: LD_INT 1
40179: ARRAY
40180: PPUSH
40181: LD_VAR 0 8
40185: PUSH
40186: LD_INT 2
40188: ARRAY
40189: PPUSH
40190: CALL_OW 116
// attacking := true ;
40194: LD_ADDR_VAR 0 29
40198: PUSH
40199: LD_INT 1
40201: ST_TO_ADDR
// continue ;
40202: GO 38638
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
40204: LD_VAR 0 4
40208: PUSH
40209: LD_VAR 0 7
40213: ARRAY
40214: PPUSH
40215: CALL_OW 265
40219: PUSH
40220: LD_INT 11
40222: EQUAL
40223: IFFALSE 40501
// begin k := 10 ;
40225: LD_ADDR_VAR 0 9
40229: PUSH
40230: LD_INT 10
40232: ST_TO_ADDR
// x := 0 ;
40233: LD_ADDR_VAR 0 10
40237: PUSH
40238: LD_INT 0
40240: ST_TO_ADDR
// if tmp < k then
40241: LD_VAR 0 14
40245: PUSH
40246: LD_VAR 0 9
40250: LESS
40251: IFFALSE 40263
// k := tmp ;
40253: LD_ADDR_VAR 0 9
40257: PUSH
40258: LD_VAR 0 14
40262: ST_TO_ADDR
// for j = k downto 1 do
40263: LD_ADDR_VAR 0 8
40267: PUSH
40268: DOUBLE
40269: LD_VAR 0 9
40273: INC
40274: ST_TO_ADDR
40275: LD_INT 1
40277: PUSH
40278: FOR_DOWNTO
40279: IFFALSE 40354
// begin if GetType ( tmp [ j ] ) = unit_human then
40281: LD_VAR 0 14
40285: PUSH
40286: LD_VAR 0 8
40290: ARRAY
40291: PPUSH
40292: CALL_OW 247
40296: PUSH
40297: LD_INT 1
40299: EQUAL
40300: IFFALSE 40352
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
40302: LD_VAR 0 4
40306: PUSH
40307: LD_VAR 0 7
40311: ARRAY
40312: PPUSH
40313: LD_VAR 0 14
40317: PUSH
40318: LD_VAR 0 8
40322: ARRAY
40323: PPUSH
40324: CALL 37122 0 2
// x := tmp [ j ] ;
40328: LD_ADDR_VAR 0 10
40332: PUSH
40333: LD_VAR 0 14
40337: PUSH
40338: LD_VAR 0 8
40342: ARRAY
40343: ST_TO_ADDR
// attacking := true ;
40344: LD_ADDR_VAR 0 29
40348: PUSH
40349: LD_INT 1
40351: ST_TO_ADDR
// end ; end ;
40352: GO 40278
40354: POP
40355: POP
// if not x then
40356: LD_VAR 0 10
40360: NOT
40361: IFFALSE 40501
// begin attacking := true ;
40363: LD_ADDR_VAR 0 29
40367: PUSH
40368: LD_INT 1
40370: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
40371: LD_VAR 0 4
40375: PUSH
40376: LD_VAR 0 7
40380: ARRAY
40381: PPUSH
40382: CALL_OW 250
40386: PPUSH
40387: LD_VAR 0 4
40391: PUSH
40392: LD_VAR 0 7
40396: ARRAY
40397: PPUSH
40398: CALL_OW 251
40402: PPUSH
40403: CALL_OW 546
40407: PUSH
40408: LD_INT 2
40410: ARRAY
40411: PUSH
40412: LD_VAR 0 14
40416: PUSH
40417: LD_INT 1
40419: ARRAY
40420: PPUSH
40421: CALL_OW 250
40425: PPUSH
40426: LD_VAR 0 14
40430: PUSH
40431: LD_INT 1
40433: ARRAY
40434: PPUSH
40435: CALL_OW 251
40439: PPUSH
40440: CALL_OW 546
40444: PUSH
40445: LD_INT 2
40447: ARRAY
40448: EQUAL
40449: IFFALSE 40477
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
40451: LD_VAR 0 4
40455: PUSH
40456: LD_VAR 0 7
40460: ARRAY
40461: PPUSH
40462: LD_VAR 0 14
40466: PUSH
40467: LD_INT 1
40469: ARRAY
40470: PPUSH
40471: CALL 37122 0 2
40475: GO 40501
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
40477: LD_VAR 0 4
40481: PUSH
40482: LD_VAR 0 7
40486: ARRAY
40487: PPUSH
40488: LD_VAR 0 14
40492: PUSH
40493: LD_INT 1
40495: ARRAY
40496: PPUSH
40497: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
40501: LD_VAR 0 4
40505: PUSH
40506: LD_VAR 0 7
40510: ARRAY
40511: PPUSH
40512: CALL_OW 264
40516: PUSH
40517: LD_INT 29
40519: EQUAL
40520: IFFALSE 40886
// begin if WantsToAttack ( group [ i ] ) in bombed then
40522: LD_VAR 0 4
40526: PUSH
40527: LD_VAR 0 7
40531: ARRAY
40532: PPUSH
40533: CALL_OW 319
40537: PUSH
40538: LD_VAR 0 28
40542: IN
40543: IFFALSE 40547
// continue ;
40545: GO 38638
// k := 8 ;
40547: LD_ADDR_VAR 0 9
40551: PUSH
40552: LD_INT 8
40554: ST_TO_ADDR
// x := 0 ;
40555: LD_ADDR_VAR 0 10
40559: PUSH
40560: LD_INT 0
40562: ST_TO_ADDR
// if tmp < k then
40563: LD_VAR 0 14
40567: PUSH
40568: LD_VAR 0 9
40572: LESS
40573: IFFALSE 40585
// k := tmp ;
40575: LD_ADDR_VAR 0 9
40579: PUSH
40580: LD_VAR 0 14
40584: ST_TO_ADDR
// for j = 1 to k do
40585: LD_ADDR_VAR 0 8
40589: PUSH
40590: DOUBLE
40591: LD_INT 1
40593: DEC
40594: ST_TO_ADDR
40595: LD_VAR 0 9
40599: PUSH
40600: FOR_TO
40601: IFFALSE 40733
// begin if GetType ( tmp [ j ] ) = unit_building then
40603: LD_VAR 0 14
40607: PUSH
40608: LD_VAR 0 8
40612: ARRAY
40613: PPUSH
40614: CALL_OW 247
40618: PUSH
40619: LD_INT 3
40621: EQUAL
40622: IFFALSE 40731
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
40624: LD_VAR 0 14
40628: PUSH
40629: LD_VAR 0 8
40633: ARRAY
40634: PUSH
40635: LD_VAR 0 28
40639: IN
40640: NOT
40641: PUSH
40642: LD_VAR 0 14
40646: PUSH
40647: LD_VAR 0 8
40651: ARRAY
40652: PPUSH
40653: CALL_OW 313
40657: AND
40658: IFFALSE 40731
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
40660: LD_VAR 0 4
40664: PUSH
40665: LD_VAR 0 7
40669: ARRAY
40670: PPUSH
40671: LD_VAR 0 14
40675: PUSH
40676: LD_VAR 0 8
40680: ARRAY
40681: PPUSH
40682: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
40686: LD_ADDR_VAR 0 28
40690: PUSH
40691: LD_VAR 0 28
40695: PPUSH
40696: LD_VAR 0 28
40700: PUSH
40701: LD_INT 1
40703: PLUS
40704: PPUSH
40705: LD_VAR 0 14
40709: PUSH
40710: LD_VAR 0 8
40714: ARRAY
40715: PPUSH
40716: CALL_OW 1
40720: ST_TO_ADDR
// attacking := true ;
40721: LD_ADDR_VAR 0 29
40725: PUSH
40726: LD_INT 1
40728: ST_TO_ADDR
// break ;
40729: GO 40733
// end ; end ;
40731: GO 40600
40733: POP
40734: POP
// if not attacking and f_attack_depot then
40735: LD_VAR 0 29
40739: NOT
40740: PUSH
40741: LD_VAR 0 25
40745: AND
40746: IFFALSE 40841
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
40748: LD_ADDR_VAR 0 13
40752: PUSH
40753: LD_VAR 0 14
40757: PPUSH
40758: LD_INT 2
40760: PUSH
40761: LD_INT 30
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 30
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: LIST
40785: PPUSH
40786: CALL_OW 72
40790: ST_TO_ADDR
// if z then
40791: LD_VAR 0 13
40795: IFFALSE 40841
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
40797: LD_VAR 0 4
40801: PUSH
40802: LD_VAR 0 7
40806: ARRAY
40807: PPUSH
40808: LD_VAR 0 13
40812: PPUSH
40813: LD_VAR 0 4
40817: PUSH
40818: LD_VAR 0 7
40822: ARRAY
40823: PPUSH
40824: CALL_OW 74
40828: PPUSH
40829: CALL_OW 115
// attacking := true ;
40833: LD_ADDR_VAR 0 29
40837: PUSH
40838: LD_INT 1
40840: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
40841: LD_VAR 0 4
40845: PUSH
40846: LD_VAR 0 7
40850: ARRAY
40851: PPUSH
40852: CALL_OW 256
40856: PUSH
40857: LD_INT 500
40859: LESS
40860: IFFALSE 40886
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
40862: LD_VAR 0 4
40866: PUSH
40867: LD_VAR 0 7
40871: ARRAY
40872: PPUSH
40873: LD_VAR 0 14
40877: PUSH
40878: LD_INT 1
40880: ARRAY
40881: PPUSH
40882: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40886: LD_VAR 0 4
40890: PUSH
40891: LD_VAR 0 7
40895: ARRAY
40896: PPUSH
40897: CALL_OW 256
40901: PUSH
40902: LD_INT 250
40904: LESS
40905: PUSH
40906: LD_VAR 0 4
40910: PUSH
40911: LD_VAR 0 7
40915: ARRAY
40916: PUSH
40917: LD_INT 21
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 23
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PPUSH
40941: CALL_OW 69
40945: IN
40946: AND
40947: IFFALSE 41072
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
40949: LD_ADDR_VAR 0 9
40953: PUSH
40954: LD_OWVAR 3
40958: PUSH
40959: LD_VAR 0 4
40963: PUSH
40964: LD_VAR 0 7
40968: ARRAY
40969: DIFF
40970: PPUSH
40971: LD_VAR 0 4
40975: PUSH
40976: LD_VAR 0 7
40980: ARRAY
40981: PPUSH
40982: CALL_OW 74
40986: ST_TO_ADDR
// if not k then
40987: LD_VAR 0 9
40991: NOT
40992: IFFALSE 40996
// continue ;
40994: GO 38638
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
40996: LD_VAR 0 9
41000: PUSH
41001: LD_INT 81
41003: PUSH
41004: LD_VAR 0 4
41008: PUSH
41009: LD_VAR 0 7
41013: ARRAY
41014: PPUSH
41015: CALL_OW 255
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PPUSH
41024: CALL_OW 69
41028: IN
41029: PUSH
41030: LD_VAR 0 9
41034: PPUSH
41035: LD_VAR 0 4
41039: PUSH
41040: LD_VAR 0 7
41044: ARRAY
41045: PPUSH
41046: CALL_OW 296
41050: PUSH
41051: LD_INT 5
41053: LESS
41054: AND
41055: IFFALSE 41072
// ComAutodestruct ( group [ i ] ) ;
41057: LD_VAR 0 4
41061: PUSH
41062: LD_VAR 0 7
41066: ARRAY
41067: PPUSH
41068: CALL 37020 0 1
// end ; if f_attack_depot then
41072: LD_VAR 0 25
41076: IFFALSE 41188
// begin k := 6 ;
41078: LD_ADDR_VAR 0 9
41082: PUSH
41083: LD_INT 6
41085: ST_TO_ADDR
// if tmp < k then
41086: LD_VAR 0 14
41090: PUSH
41091: LD_VAR 0 9
41095: LESS
41096: IFFALSE 41108
// k := tmp ;
41098: LD_ADDR_VAR 0 9
41102: PUSH
41103: LD_VAR 0 14
41107: ST_TO_ADDR
// for j = 1 to k do
41108: LD_ADDR_VAR 0 8
41112: PUSH
41113: DOUBLE
41114: LD_INT 1
41116: DEC
41117: ST_TO_ADDR
41118: LD_VAR 0 9
41122: PUSH
41123: FOR_TO
41124: IFFALSE 41186
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
41126: LD_VAR 0 8
41130: PPUSH
41131: CALL_OW 266
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: IN
41146: IFFALSE 41184
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
41148: LD_VAR 0 4
41152: PUSH
41153: LD_VAR 0 7
41157: ARRAY
41158: PPUSH
41159: LD_VAR 0 14
41163: PUSH
41164: LD_VAR 0 8
41168: ARRAY
41169: PPUSH
41170: CALL_OW 115
// attacking := true ;
41174: LD_ADDR_VAR 0 29
41178: PUSH
41179: LD_INT 1
41181: ST_TO_ADDR
// break ;
41182: GO 41186
// end ;
41184: GO 41123
41186: POP
41187: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
41188: LD_VAR 0 4
41192: PUSH
41193: LD_VAR 0 7
41197: ARRAY
41198: PPUSH
41199: CALL_OW 302
41203: PUSH
41204: LD_VAR 0 29
41208: NOT
41209: AND
41210: IFFALSE 41478
// begin if GetTag ( group [ i ] ) = 71 then
41212: LD_VAR 0 4
41216: PUSH
41217: LD_VAR 0 7
41221: ARRAY
41222: PPUSH
41223: CALL_OW 110
41227: PUSH
41228: LD_INT 71
41230: EQUAL
41231: IFFALSE 41272
// begin if HasTask ( group [ i ] ) then
41233: LD_VAR 0 4
41237: PUSH
41238: LD_VAR 0 7
41242: ARRAY
41243: PPUSH
41244: CALL_OW 314
41248: IFFALSE 41254
// continue else
41250: GO 38638
41252: GO 41272
// SetTag ( group [ i ] , 0 ) ;
41254: LD_VAR 0 4
41258: PUSH
41259: LD_VAR 0 7
41263: ARRAY
41264: PPUSH
41265: LD_INT 0
41267: PPUSH
41268: CALL_OW 109
// end ; k := 8 ;
41272: LD_ADDR_VAR 0 9
41276: PUSH
41277: LD_INT 8
41279: ST_TO_ADDR
// x := 0 ;
41280: LD_ADDR_VAR 0 10
41284: PUSH
41285: LD_INT 0
41287: ST_TO_ADDR
// if tmp < k then
41288: LD_VAR 0 14
41292: PUSH
41293: LD_VAR 0 9
41297: LESS
41298: IFFALSE 41310
// k := tmp ;
41300: LD_ADDR_VAR 0 9
41304: PUSH
41305: LD_VAR 0 14
41309: ST_TO_ADDR
// for j = 1 to k do
41310: LD_ADDR_VAR 0 8
41314: PUSH
41315: DOUBLE
41316: LD_INT 1
41318: DEC
41319: ST_TO_ADDR
41320: LD_VAR 0 9
41324: PUSH
41325: FOR_TO
41326: IFFALSE 41424
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
41328: LD_VAR 0 14
41332: PUSH
41333: LD_VAR 0 8
41337: ARRAY
41338: PPUSH
41339: CALL_OW 247
41343: PUSH
41344: LD_INT 1
41346: EQUAL
41347: PUSH
41348: LD_VAR 0 14
41352: PUSH
41353: LD_VAR 0 8
41357: ARRAY
41358: PPUSH
41359: CALL_OW 256
41363: PUSH
41364: LD_INT 250
41366: LESS
41367: PUSH
41368: LD_VAR 0 20
41372: AND
41373: PUSH
41374: LD_VAR 0 20
41378: NOT
41379: PUSH
41380: LD_VAR 0 14
41384: PUSH
41385: LD_VAR 0 8
41389: ARRAY
41390: PPUSH
41391: CALL_OW 256
41395: PUSH
41396: LD_INT 250
41398: GREATEREQUAL
41399: AND
41400: OR
41401: AND
41402: IFFALSE 41422
// begin x := tmp [ j ] ;
41404: LD_ADDR_VAR 0 10
41408: PUSH
41409: LD_VAR 0 14
41413: PUSH
41414: LD_VAR 0 8
41418: ARRAY
41419: ST_TO_ADDR
// break ;
41420: GO 41424
// end ;
41422: GO 41325
41424: POP
41425: POP
// if x then
41426: LD_VAR 0 10
41430: IFFALSE 41454
// ComAttackUnit ( group [ i ] , x ) else
41432: LD_VAR 0 4
41436: PUSH
41437: LD_VAR 0 7
41441: ARRAY
41442: PPUSH
41443: LD_VAR 0 10
41447: PPUSH
41448: CALL_OW 115
41452: GO 41478
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
41454: LD_VAR 0 4
41458: PUSH
41459: LD_VAR 0 7
41463: ARRAY
41464: PPUSH
41465: LD_VAR 0 14
41469: PUSH
41470: LD_INT 1
41472: ARRAY
41473: PPUSH
41474: CALL_OW 115
// end ; end ; end ;
41478: GO 38638
41480: POP
41481: POP
// wait ( 0 0$1 ) ;
41482: LD_INT 35
41484: PPUSH
41485: CALL_OW 67
// until group = [ ] ;
41489: LD_VAR 0 4
41493: PUSH
41494: EMPTY
41495: EQUAL
41496: IFFALSE 38623
// end ;
41498: LD_VAR 0 2
41502: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
41503: LD_INT 0
41505: PPUSH
41506: PPUSH
41507: PPUSH
41508: PPUSH
// if not base_units then
41509: LD_VAR 0 1
41513: NOT
41514: IFFALSE 41518
// exit ;
41516: GO 41605
// result := false ;
41518: LD_ADDR_VAR 0 2
41522: PUSH
41523: LD_INT 0
41525: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
41526: LD_ADDR_VAR 0 5
41530: PUSH
41531: LD_VAR 0 1
41535: PPUSH
41536: LD_INT 21
41538: PUSH
41539: LD_INT 3
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PPUSH
41546: CALL_OW 72
41550: ST_TO_ADDR
// if not tmp then
41551: LD_VAR 0 5
41555: NOT
41556: IFFALSE 41560
// exit ;
41558: GO 41605
// for i in tmp do
41560: LD_ADDR_VAR 0 3
41564: PUSH
41565: LD_VAR 0 5
41569: PUSH
41570: FOR_IN
41571: IFFALSE 41603
// begin result := EnemyInRange ( i , 22 ) ;
41573: LD_ADDR_VAR 0 2
41577: PUSH
41578: LD_VAR 0 3
41582: PPUSH
41583: LD_INT 22
41585: PPUSH
41586: CALL 36703 0 2
41590: ST_TO_ADDR
// if result then
41591: LD_VAR 0 2
41595: IFFALSE 41601
// exit ;
41597: POP
41598: POP
41599: GO 41605
// end ;
41601: GO 41570
41603: POP
41604: POP
// end ;
41605: LD_VAR 0 2
41609: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
41610: LD_INT 0
41612: PPUSH
41613: PPUSH
// if not units then
41614: LD_VAR 0 1
41618: NOT
41619: IFFALSE 41623
// exit ;
41621: GO 41693
// result := [ ] ;
41623: LD_ADDR_VAR 0 3
41627: PUSH
41628: EMPTY
41629: ST_TO_ADDR
// for i in units do
41630: LD_ADDR_VAR 0 4
41634: PUSH
41635: LD_VAR 0 1
41639: PUSH
41640: FOR_IN
41641: IFFALSE 41691
// if GetTag ( i ) = tag then
41643: LD_VAR 0 4
41647: PPUSH
41648: CALL_OW 110
41652: PUSH
41653: LD_VAR 0 2
41657: EQUAL
41658: IFFALSE 41689
// result := Insert ( result , result + 1 , i ) ;
41660: LD_ADDR_VAR 0 3
41664: PUSH
41665: LD_VAR 0 3
41669: PPUSH
41670: LD_VAR 0 3
41674: PUSH
41675: LD_INT 1
41677: PLUS
41678: PPUSH
41679: LD_VAR 0 4
41683: PPUSH
41684: CALL_OW 2
41688: ST_TO_ADDR
41689: GO 41640
41691: POP
41692: POP
// end ;
41693: LD_VAR 0 3
41697: RET
// export function IsDriver ( un ) ; begin
41698: LD_INT 0
41700: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
41701: LD_ADDR_VAR 0 2
41705: PUSH
41706: LD_VAR 0 1
41710: PUSH
41711: LD_INT 55
41713: PUSH
41714: EMPTY
41715: LIST
41716: PPUSH
41717: CALL_OW 69
41721: IN
41722: ST_TO_ADDR
// end ; end_of_file
41723: LD_VAR 0 2
41727: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit ; export function InitMacro ; var i ; begin
41728: LD_INT 0
41730: PPUSH
41731: PPUSH
// skirmish := false ;
41732: LD_ADDR_EXP 36
41736: PUSH
41737: LD_INT 0
41739: ST_TO_ADDR
// mc_bases := [ ] ;
41740: LD_ADDR_EXP 37
41744: PUSH
41745: EMPTY
41746: ST_TO_ADDR
// mc_sides := [ ] ;
41747: LD_ADDR_EXP 63
41751: PUSH
41752: EMPTY
41753: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
41754: LD_ADDR_EXP 38
41758: PUSH
41759: EMPTY
41760: ST_TO_ADDR
// mc_building_repairs := [ ] ;
41761: LD_ADDR_EXP 39
41765: PUSH
41766: EMPTY
41767: ST_TO_ADDR
// mc_need_heal := [ ] ;
41768: LD_ADDR_EXP 40
41772: PUSH
41773: EMPTY
41774: ST_TO_ADDR
// mc_healers := [ ] ;
41775: LD_ADDR_EXP 41
41779: PUSH
41780: EMPTY
41781: ST_TO_ADDR
// mc_build_list := [ ] ;
41782: LD_ADDR_EXP 42
41786: PUSH
41787: EMPTY
41788: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
41789: LD_ADDR_EXP 69
41793: PUSH
41794: EMPTY
41795: ST_TO_ADDR
// mc_builders := [ ] ;
41796: LD_ADDR_EXP 43
41800: PUSH
41801: EMPTY
41802: ST_TO_ADDR
// mc_construct_list := [ ] ;
41803: LD_ADDR_EXP 44
41807: PUSH
41808: EMPTY
41809: ST_TO_ADDR
// mc_turret_list := [ ] ;
41810: LD_ADDR_EXP 45
41814: PUSH
41815: EMPTY
41816: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
41817: LD_ADDR_EXP 46
41821: PUSH
41822: EMPTY
41823: ST_TO_ADDR
// mc_miners := [ ] ;
41824: LD_ADDR_EXP 51
41828: PUSH
41829: EMPTY
41830: ST_TO_ADDR
// mc_mines := [ ] ;
41831: LD_ADDR_EXP 50
41835: PUSH
41836: EMPTY
41837: ST_TO_ADDR
// mc_minefields := [ ] ;
41838: LD_ADDR_EXP 52
41842: PUSH
41843: EMPTY
41844: ST_TO_ADDR
// mc_crates := [ ] ;
41845: LD_ADDR_EXP 53
41849: PUSH
41850: EMPTY
41851: ST_TO_ADDR
// mc_crates_collector := [ ] ;
41852: LD_ADDR_EXP 54
41856: PUSH
41857: EMPTY
41858: ST_TO_ADDR
// mc_crates_area := [ ] ;
41859: LD_ADDR_EXP 55
41863: PUSH
41864: EMPTY
41865: ST_TO_ADDR
// mc_vehicles := [ ] ;
41866: LD_ADDR_EXP 56
41870: PUSH
41871: EMPTY
41872: ST_TO_ADDR
// mc_attack := [ ] ;
41873: LD_ADDR_EXP 57
41877: PUSH
41878: EMPTY
41879: ST_TO_ADDR
// mc_produce := [ ] ;
41880: LD_ADDR_EXP 58
41884: PUSH
41885: EMPTY
41886: ST_TO_ADDR
// mc_defender := [ ] ;
41887: LD_ADDR_EXP 59
41891: PUSH
41892: EMPTY
41893: ST_TO_ADDR
// mc_parking := [ ] ;
41894: LD_ADDR_EXP 61
41898: PUSH
41899: EMPTY
41900: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
41901: LD_ADDR_EXP 47
41905: PUSH
41906: EMPTY
41907: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
41908: LD_ADDR_EXP 49
41912: PUSH
41913: EMPTY
41914: ST_TO_ADDR
// mc_scan := [ ] ;
41915: LD_ADDR_EXP 60
41919: PUSH
41920: EMPTY
41921: ST_TO_ADDR
// mc_scan_area := [ ] ;
41922: LD_ADDR_EXP 62
41926: PUSH
41927: EMPTY
41928: ST_TO_ADDR
// mc_tech := [ ] ;
41929: LD_ADDR_EXP 64
41933: PUSH
41934: EMPTY
41935: ST_TO_ADDR
// end ;
41936: LD_VAR 0 1
41940: RET
// export function Skirmish_Start ; var i ; begin
41941: LD_INT 0
41943: PPUSH
41944: PPUSH
// for i = 1 to mc_bases do
41945: LD_ADDR_VAR 0 2
41949: PUSH
41950: DOUBLE
41951: LD_INT 1
41953: DEC
41954: ST_TO_ADDR
41955: LD_EXP 37
41959: PUSH
41960: FOR_TO
41961: IFFALSE 42806
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
41963: LD_ADDR_EXP 38
41967: PUSH
41968: LD_EXP 38
41972: PPUSH
41973: LD_VAR 0 2
41977: PPUSH
41978: EMPTY
41979: PPUSH
41980: CALL_OW 1
41984: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
41985: LD_ADDR_EXP 39
41989: PUSH
41990: LD_EXP 39
41994: PPUSH
41995: LD_VAR 0 2
41999: PPUSH
42000: EMPTY
42001: PPUSH
42002: CALL_OW 1
42006: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
42007: LD_ADDR_EXP 40
42011: PUSH
42012: LD_EXP 40
42016: PPUSH
42017: LD_VAR 0 2
42021: PPUSH
42022: EMPTY
42023: PPUSH
42024: CALL_OW 1
42028: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
42029: LD_ADDR_EXP 41
42033: PUSH
42034: LD_EXP 41
42038: PPUSH
42039: LD_VAR 0 2
42043: PPUSH
42044: EMPTY
42045: PUSH
42046: EMPTY
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PPUSH
42052: CALL_OW 1
42056: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
42057: LD_ADDR_EXP 42
42061: PUSH
42062: LD_EXP 42
42066: PPUSH
42067: LD_VAR 0 2
42071: PPUSH
42072: EMPTY
42073: PPUSH
42074: CALL_OW 1
42078: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
42079: LD_ADDR_EXP 69
42083: PUSH
42084: LD_EXP 69
42088: PPUSH
42089: LD_VAR 0 2
42093: PPUSH
42094: EMPTY
42095: PPUSH
42096: CALL_OW 1
42100: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
42101: LD_ADDR_EXP 43
42105: PUSH
42106: LD_EXP 43
42110: PPUSH
42111: LD_VAR 0 2
42115: PPUSH
42116: EMPTY
42117: PPUSH
42118: CALL_OW 1
42122: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
42123: LD_ADDR_EXP 44
42127: PUSH
42128: LD_EXP 44
42132: PPUSH
42133: LD_VAR 0 2
42137: PPUSH
42138: EMPTY
42139: PPUSH
42140: CALL_OW 1
42144: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
42145: LD_ADDR_EXP 45
42149: PUSH
42150: LD_EXP 45
42154: PPUSH
42155: LD_VAR 0 2
42159: PPUSH
42160: EMPTY
42161: PPUSH
42162: CALL_OW 1
42166: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
42167: LD_ADDR_EXP 46
42171: PUSH
42172: LD_EXP 46
42176: PPUSH
42177: LD_VAR 0 2
42181: PPUSH
42182: LD_EXP 37
42186: PUSH
42187: LD_VAR 0 2
42191: ARRAY
42192: PPUSH
42193: LD_INT 2
42195: PUSH
42196: LD_INT 30
42198: PUSH
42199: LD_INT 32
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 30
42208: PUSH
42209: LD_INT 31
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 58
42223: PUSH
42224: EMPTY
42225: LIST
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PPUSH
42231: CALL_OW 72
42235: PPUSH
42236: CALL_OW 1
42240: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
42241: LD_ADDR_EXP 47
42245: PUSH
42246: LD_EXP 47
42250: PPUSH
42251: LD_VAR 0 2
42255: PPUSH
42256: EMPTY
42257: PPUSH
42258: CALL_OW 1
42262: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
42263: LD_ADDR_EXP 51
42267: PUSH
42268: LD_EXP 51
42272: PPUSH
42273: LD_VAR 0 2
42277: PPUSH
42278: EMPTY
42279: PPUSH
42280: CALL_OW 1
42284: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
42285: LD_ADDR_EXP 50
42289: PUSH
42290: LD_EXP 50
42294: PPUSH
42295: LD_VAR 0 2
42299: PPUSH
42300: EMPTY
42301: PPUSH
42302: CALL_OW 1
42306: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
42307: LD_ADDR_EXP 52
42311: PUSH
42312: LD_EXP 52
42316: PPUSH
42317: LD_VAR 0 2
42321: PPUSH
42322: EMPTY
42323: PPUSH
42324: CALL_OW 1
42328: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
42329: LD_ADDR_EXP 53
42333: PUSH
42334: LD_EXP 53
42338: PPUSH
42339: LD_VAR 0 2
42343: PPUSH
42344: EMPTY
42345: PPUSH
42346: CALL_OW 1
42350: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
42351: LD_ADDR_EXP 54
42355: PUSH
42356: LD_EXP 54
42360: PPUSH
42361: LD_VAR 0 2
42365: PPUSH
42366: EMPTY
42367: PPUSH
42368: CALL_OW 1
42372: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
42373: LD_ADDR_EXP 55
42377: PUSH
42378: LD_EXP 55
42382: PPUSH
42383: LD_VAR 0 2
42387: PPUSH
42388: EMPTY
42389: PPUSH
42390: CALL_OW 1
42394: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
42395: LD_ADDR_EXP 56
42399: PUSH
42400: LD_EXP 56
42404: PPUSH
42405: LD_VAR 0 2
42409: PPUSH
42410: EMPTY
42411: PPUSH
42412: CALL_OW 1
42416: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
42417: LD_ADDR_EXP 57
42421: PUSH
42422: LD_EXP 57
42426: PPUSH
42427: LD_VAR 0 2
42431: PPUSH
42432: EMPTY
42433: PPUSH
42434: CALL_OW 1
42438: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
42439: LD_ADDR_EXP 58
42443: PUSH
42444: LD_EXP 58
42448: PPUSH
42449: LD_VAR 0 2
42453: PPUSH
42454: EMPTY
42455: PPUSH
42456: CALL_OW 1
42460: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
42461: LD_ADDR_EXP 59
42465: PUSH
42466: LD_EXP 59
42470: PPUSH
42471: LD_VAR 0 2
42475: PPUSH
42476: EMPTY
42477: PPUSH
42478: CALL_OW 1
42482: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
42483: LD_ADDR_EXP 48
42487: PUSH
42488: LD_EXP 48
42492: PPUSH
42493: LD_VAR 0 2
42497: PPUSH
42498: LD_INT 0
42500: PPUSH
42501: CALL_OW 1
42505: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
42506: LD_ADDR_EXP 61
42510: PUSH
42511: LD_EXP 61
42515: PPUSH
42516: LD_VAR 0 2
42520: PPUSH
42521: LD_INT 0
42523: PPUSH
42524: CALL_OW 1
42528: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
42529: LD_ADDR_EXP 49
42533: PUSH
42534: LD_EXP 49
42538: PPUSH
42539: LD_VAR 0 2
42543: PPUSH
42544: EMPTY
42545: PPUSH
42546: CALL_OW 1
42550: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
42551: LD_ADDR_EXP 60
42555: PUSH
42556: LD_EXP 60
42560: PPUSH
42561: LD_VAR 0 2
42565: PPUSH
42566: LD_INT 0
42568: PPUSH
42569: CALL_OW 1
42573: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
42574: LD_ADDR_EXP 62
42578: PUSH
42579: LD_EXP 62
42583: PPUSH
42584: LD_VAR 0 2
42588: PPUSH
42589: EMPTY
42590: PPUSH
42591: CALL_OW 1
42595: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
42596: LD_ADDR_EXP 65
42600: PUSH
42601: LD_EXP 65
42605: PPUSH
42606: LD_VAR 0 2
42610: PPUSH
42611: LD_INT 0
42613: PPUSH
42614: CALL_OW 1
42618: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
42619: LD_ADDR_EXP 66
42623: PUSH
42624: LD_EXP 66
42628: PPUSH
42629: LD_VAR 0 2
42633: PPUSH
42634: EMPTY
42635: PPUSH
42636: CALL_OW 1
42640: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
42641: LD_ADDR_EXP 67
42645: PUSH
42646: LD_EXP 67
42650: PPUSH
42651: LD_VAR 0 2
42655: PPUSH
42656: EMPTY
42657: PPUSH
42658: CALL_OW 1
42662: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
42663: LD_ADDR_EXP 68
42667: PUSH
42668: LD_EXP 68
42672: PPUSH
42673: LD_VAR 0 2
42677: PPUSH
42678: EMPTY
42679: PPUSH
42680: CALL_OW 1
42684: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
42685: LD_ADDR_EXP 70
42689: PUSH
42690: LD_EXP 70
42694: PPUSH
42695: LD_VAR 0 2
42699: PPUSH
42700: LD_EXP 37
42704: PUSH
42705: LD_VAR 0 2
42709: ARRAY
42710: PPUSH
42711: LD_INT 2
42713: PUSH
42714: LD_INT 30
42716: PUSH
42717: LD_INT 6
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 30
42726: PUSH
42727: LD_INT 7
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 30
42736: PUSH
42737: LD_INT 8
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: PPUSH
42750: CALL_OW 72
42754: PPUSH
42755: CALL_OW 1
42759: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
42760: LD_ADDR_EXP 71
42764: PUSH
42765: LD_EXP 71
42769: PPUSH
42770: LD_VAR 0 2
42774: PPUSH
42775: EMPTY
42776: PPUSH
42777: CALL_OW 1
42781: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
42782: LD_ADDR_EXP 72
42786: PUSH
42787: LD_EXP 72
42791: PPUSH
42792: LD_VAR 0 2
42796: PPUSH
42797: EMPTY
42798: PPUSH
42799: CALL_OW 1
42803: ST_TO_ADDR
// end ;
42804: GO 41960
42806: POP
42807: POP
// MC_InitSides ( ) ;
42808: CALL 51338 0 0
// MC_InitResearch ( ) ;
42812: CALL 51077 0 0
// CustomInitMacro ( ) ;
42816: CALL 174 0 0
// skirmish := true ;
42820: LD_ADDR_EXP 36
42824: PUSH
42825: LD_INT 1
42827: ST_TO_ADDR
// end ;
42828: LD_VAR 0 1
42832: RET
// every 0 0$01 trigger skirmish do
42833: LD_EXP 36
42837: IFFALSE 42956
42839: GO 42841
42841: DISABLE
// begin enable ;
42842: ENABLE
// MC_CheckBuildings ( ) ;
42843: CALL 43401 0 0
// MC_CheckPeopleLife ( ) ;
42847: CALL 43526 0 0
// RaiseSailEvent ( 103 ) ;
42851: LD_INT 103
42853: PPUSH
42854: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
42858: LD_INT 104
42860: PPUSH
42861: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
42865: LD_INT 105
42867: PPUSH
42868: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
42872: LD_INT 106
42874: PPUSH
42875: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
42879: LD_INT 107
42881: PPUSH
42882: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
42886: LD_INT 108
42888: PPUSH
42889: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
42893: LD_INT 109
42895: PPUSH
42896: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
42900: LD_INT 110
42902: PPUSH
42903: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
42907: LD_INT 111
42909: PPUSH
42910: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
42914: LD_INT 112
42916: PPUSH
42917: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
42921: LD_INT 120
42923: PPUSH
42924: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
42928: LD_INT 121
42930: PPUSH
42931: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
42935: LD_INT 122
42937: PPUSH
42938: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
42942: LD_INT 123
42944: PPUSH
42945: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
42949: LD_INT 200
42951: PPUSH
42952: CALL_OW 427
// end ;
42956: END
// every 10 trigger skirmish do var i ;
42957: LD_EXP 36
42961: IFFALSE 43060
42963: GO 42965
42965: DISABLE
42966: LD_INT 0
42968: PPUSH
// begin enable ;
42969: ENABLE
// if not mc_bases then
42970: LD_EXP 37
42974: NOT
42975: IFFALSE 42979
// exit ;
42977: GO 43060
// for i = 1 to mc_bases do
42979: LD_ADDR_VAR 0 1
42983: PUSH
42984: DOUBLE
42985: LD_INT 1
42987: DEC
42988: ST_TO_ADDR
42989: LD_EXP 37
42993: PUSH
42994: FOR_TO
42995: IFFALSE 43058
// if mc_mines [ i ] and mc_miners [ i ] then
42997: LD_EXP 50
43001: PUSH
43002: LD_VAR 0 1
43006: ARRAY
43007: PUSH
43008: LD_EXP 51
43012: PUSH
43013: LD_VAR 0 1
43017: ARRAY
43018: AND
43019: IFFALSE 43056
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
43021: LD_EXP 51
43025: PUSH
43026: LD_VAR 0 1
43030: ARRAY
43031: PUSH
43032: LD_INT 1
43034: ARRAY
43035: PPUSH
43036: CALL_OW 255
43040: PPUSH
43041: LD_EXP 50
43045: PUSH
43046: LD_VAR 0 1
43050: ARRAY
43051: PPUSH
43052: CALL 7534 0 2
43056: GO 42994
43058: POP
43059: POP
// end ;
43060: PPOPN 1
43062: END
// on SailEvent ( event ) do begin if event = 101 then
43063: LD_VAR 0 1
43067: PUSH
43068: LD_INT 101
43070: EQUAL
43071: IFFALSE 43077
// MC_RepairBuildings ( ) ;
43073: CALL 44084 0 0
// if event = 102 then
43077: LD_VAR 0 1
43081: PUSH
43082: LD_INT 102
43084: EQUAL
43085: IFFALSE 43091
// MC_Heal ( ) ;
43087: CALL 44490 0 0
// if event = 103 then
43091: LD_VAR 0 1
43095: PUSH
43096: LD_INT 103
43098: EQUAL
43099: IFFALSE 43105
// MC_Build ( ) ;
43101: CALL 44912 0 0
// if event = 104 then
43105: LD_VAR 0 1
43109: PUSH
43110: LD_INT 104
43112: EQUAL
43113: IFFALSE 43119
// MC_TurretWeapon ( ) ;
43115: CALL 46278 0 0
// if event = 105 then
43119: LD_VAR 0 1
43123: PUSH
43124: LD_INT 105
43126: EQUAL
43127: IFFALSE 43133
// MC_BuildUpgrade ( ) ;
43129: CALL 45829 0 0
// if event = 106 then
43133: LD_VAR 0 1
43137: PUSH
43138: LD_INT 106
43140: EQUAL
43141: IFFALSE 43147
// MC_PlantMines ( ) ;
43143: CALL 46597 0 0
// if event = 107 then
43147: LD_VAR 0 1
43151: PUSH
43152: LD_INT 107
43154: EQUAL
43155: IFFALSE 43161
// MC_CollectCrates ( ) ;
43157: CALL 47604 0 0
// if event = 108 then
43161: LD_VAR 0 1
43165: PUSH
43166: LD_INT 108
43168: EQUAL
43169: IFFALSE 43175
// MC_LinkRemoteControl ( ) ;
43171: CALL 49014 0 0
// if event = 109 then
43175: LD_VAR 0 1
43179: PUSH
43180: LD_INT 109
43182: EQUAL
43183: IFFALSE 43189
// MC_ProduceVehicle ( ) ;
43185: CALL 49195 0 0
// if event = 110 then
43189: LD_VAR 0 1
43193: PUSH
43194: LD_INT 110
43196: EQUAL
43197: IFFALSE 43203
// MC_SendAttack ( ) ;
43199: CALL 49676 0 0
// if event = 111 then
43203: LD_VAR 0 1
43207: PUSH
43208: LD_INT 111
43210: EQUAL
43211: IFFALSE 43217
// MC_Defend ( ) ;
43213: CALL 49784 0 0
// if event = 112 then
43217: LD_VAR 0 1
43221: PUSH
43222: LD_INT 112
43224: EQUAL
43225: IFFALSE 43231
// MC_Research ( ) ;
43227: CALL 50152 0 0
// if event = 120 then
43231: LD_VAR 0 1
43235: PUSH
43236: LD_INT 120
43238: EQUAL
43239: IFFALSE 43245
// MC_RepairVehicle ( ) ;
43241: CALL 51430 0 0
// if event = 121 then
43245: LD_VAR 0 1
43249: PUSH
43250: LD_INT 121
43252: EQUAL
43253: IFFALSE 43259
// MC_TameApe ( ) ;
43255: CALL 52099 0 0
// if event = 122 then
43259: LD_VAR 0 1
43263: PUSH
43264: LD_INT 122
43266: EQUAL
43267: IFFALSE 43273
// MC_ChangeApeClass ( ) ;
43269: CALL 52656 0 0
// if event = 123 then
43273: LD_VAR 0 1
43277: PUSH
43278: LD_INT 123
43280: EQUAL
43281: IFFALSE 43287
// MC_Bazooka ( ) ;
43283: CALL 53290 0 0
// if event = 124 then
43287: LD_VAR 0 1
43291: PUSH
43292: LD_INT 124
43294: EQUAL
43295: IFFALSE 43301
// MC_TeleportExit ( ) ;
43297: CALL 53488 0 0
// if event = 200 then
43301: LD_VAR 0 1
43305: PUSH
43306: LD_INT 200
43308: EQUAL
43309: IFFALSE 43315
// MC_Idle ( ) ;
43311: CALL 54512 0 0
// end ;
43315: PPOPN 1
43317: END
// export function MC_Reset ( base , tag ) ; var i ; begin
43318: LD_INT 0
43320: PPUSH
43321: PPUSH
// if not mc_bases [ base ] or not tag then
43322: LD_EXP 37
43326: PUSH
43327: LD_VAR 0 1
43331: ARRAY
43332: NOT
43333: PUSH
43334: LD_VAR 0 2
43338: NOT
43339: OR
43340: IFFALSE 43344
// exit ;
43342: GO 43396
// for i in mc_bases [ base ] do
43344: LD_ADDR_VAR 0 4
43348: PUSH
43349: LD_EXP 37
43353: PUSH
43354: LD_VAR 0 1
43358: ARRAY
43359: PUSH
43360: FOR_IN
43361: IFFALSE 43394
// if GetTag ( i ) = tag then
43363: LD_VAR 0 4
43367: PPUSH
43368: CALL_OW 110
43372: PUSH
43373: LD_VAR 0 2
43377: EQUAL
43378: IFFALSE 43392
// SetTag ( i , 0 ) ;
43380: LD_VAR 0 4
43384: PPUSH
43385: LD_INT 0
43387: PPUSH
43388: CALL_OW 109
43392: GO 43360
43394: POP
43395: POP
// end ;
43396: LD_VAR 0 3
43400: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
43401: LD_INT 0
43403: PPUSH
43404: PPUSH
43405: PPUSH
// if not mc_bases then
43406: LD_EXP 37
43410: NOT
43411: IFFALSE 43415
// exit ;
43413: GO 43521
// for i = 1 to mc_bases do
43415: LD_ADDR_VAR 0 2
43419: PUSH
43420: DOUBLE
43421: LD_INT 1
43423: DEC
43424: ST_TO_ADDR
43425: LD_EXP 37
43429: PUSH
43430: FOR_TO
43431: IFFALSE 43512
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
43433: LD_ADDR_VAR 0 3
43437: PUSH
43438: LD_EXP 37
43442: PUSH
43443: LD_VAR 0 2
43447: ARRAY
43448: PPUSH
43449: LD_INT 21
43451: PUSH
43452: LD_INT 3
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 3
43461: PUSH
43462: LD_INT 24
43464: PUSH
43465: LD_INT 1000
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PPUSH
43480: CALL_OW 72
43484: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
43485: LD_ADDR_EXP 38
43489: PUSH
43490: LD_EXP 38
43494: PPUSH
43495: LD_VAR 0 2
43499: PPUSH
43500: LD_VAR 0 3
43504: PPUSH
43505: CALL_OW 1
43509: ST_TO_ADDR
// end ;
43510: GO 43430
43512: POP
43513: POP
// RaiseSailEvent ( 101 ) ;
43514: LD_INT 101
43516: PPUSH
43517: CALL_OW 427
// end ;
43521: LD_VAR 0 1
43525: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
43526: LD_INT 0
43528: PPUSH
43529: PPUSH
43530: PPUSH
43531: PPUSH
43532: PPUSH
43533: PPUSH
43534: PPUSH
// if not mc_bases then
43535: LD_EXP 37
43539: NOT
43540: IFFALSE 43544
// exit ;
43542: GO 44079
// for i = 1 to mc_bases do
43544: LD_ADDR_VAR 0 2
43548: PUSH
43549: DOUBLE
43550: LD_INT 1
43552: DEC
43553: ST_TO_ADDR
43554: LD_EXP 37
43558: PUSH
43559: FOR_TO
43560: IFFALSE 44070
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
43562: LD_ADDR_VAR 0 5
43566: PUSH
43567: LD_EXP 37
43571: PUSH
43572: LD_VAR 0 2
43576: ARRAY
43577: PUSH
43578: LD_EXP 66
43582: PUSH
43583: LD_VAR 0 2
43587: ARRAY
43588: UNION
43589: PPUSH
43590: LD_INT 21
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: LD_INT 3
43605: PUSH
43606: LD_INT 54
43608: PUSH
43609: EMPTY
43610: LIST
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 3
43618: PUSH
43619: LD_INT 24
43621: PUSH
43622: LD_INT 700
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: LIST
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PPUSH
43642: CALL_OW 72
43646: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
43647: LD_ADDR_VAR 0 6
43651: PUSH
43652: LD_EXP 37
43656: PUSH
43657: LD_VAR 0 2
43661: ARRAY
43662: PPUSH
43663: LD_INT 21
43665: PUSH
43666: LD_INT 1
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 3
43678: PUSH
43679: LD_INT 54
43681: PUSH
43682: EMPTY
43683: LIST
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 3
43691: PUSH
43692: LD_INT 24
43694: PUSH
43695: LD_INT 250
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: LIST
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PPUSH
43715: CALL_OW 72
43719: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
43720: LD_ADDR_VAR 0 7
43724: PUSH
43725: LD_VAR 0 5
43729: PUSH
43730: LD_VAR 0 6
43734: DIFF
43735: ST_TO_ADDR
// if not need_heal_1 then
43736: LD_VAR 0 6
43740: NOT
43741: IFFALSE 43774
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
43743: LD_ADDR_EXP 40
43747: PUSH
43748: LD_EXP 40
43752: PPUSH
43753: LD_VAR 0 2
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PPUSH
43765: EMPTY
43766: PPUSH
43767: CALL 10876 0 3
43771: ST_TO_ADDR
43772: GO 43806
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
43774: LD_ADDR_EXP 40
43778: PUSH
43779: LD_EXP 40
43783: PPUSH
43784: LD_VAR 0 2
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PPUSH
43796: LD_VAR 0 6
43800: PPUSH
43801: CALL 10876 0 3
43805: ST_TO_ADDR
// if not need_heal_2 then
43806: LD_VAR 0 7
43810: NOT
43811: IFFALSE 43844
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
43813: LD_ADDR_EXP 40
43817: PUSH
43818: LD_EXP 40
43822: PPUSH
43823: LD_VAR 0 2
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PPUSH
43835: EMPTY
43836: PPUSH
43837: CALL 10876 0 3
43841: ST_TO_ADDR
43842: GO 43876
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
43844: LD_ADDR_EXP 40
43848: PUSH
43849: LD_EXP 40
43853: PPUSH
43854: LD_VAR 0 2
43858: PUSH
43859: LD_INT 2
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PPUSH
43866: LD_VAR 0 7
43870: PPUSH
43871: CALL 10876 0 3
43875: ST_TO_ADDR
// if need_heal_2 then
43876: LD_VAR 0 7
43880: IFFALSE 44052
// for j in need_heal_2 do
43882: LD_ADDR_VAR 0 3
43886: PUSH
43887: LD_VAR 0 7
43891: PUSH
43892: FOR_IN
43893: IFFALSE 44050
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
43895: LD_ADDR_VAR 0 5
43899: PUSH
43900: LD_EXP 37
43904: PUSH
43905: LD_VAR 0 2
43909: ARRAY
43910: PPUSH
43911: LD_INT 2
43913: PUSH
43914: LD_INT 30
43916: PUSH
43917: LD_INT 6
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 30
43926: PUSH
43927: LD_INT 7
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 30
43936: PUSH
43937: LD_INT 8
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 30
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 30
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 25
43966: PUSH
43967: LD_INT 4
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: PPUSH
43983: CALL_OW 72
43987: ST_TO_ADDR
// if tmp then
43988: LD_VAR 0 5
43992: IFFALSE 44048
// begin k := NearestUnitToUnit ( tmp , j ) ;
43994: LD_ADDR_VAR 0 4
43998: PUSH
43999: LD_VAR 0 5
44003: PPUSH
44004: LD_VAR 0 3
44008: PPUSH
44009: CALL_OW 74
44013: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
44014: LD_VAR 0 3
44018: PPUSH
44019: LD_VAR 0 4
44023: PPUSH
44024: CALL_OW 296
44028: PUSH
44029: LD_INT 7
44031: GREATER
44032: IFFALSE 44048
// ComMoveUnit ( j , k ) ;
44034: LD_VAR 0 3
44038: PPUSH
44039: LD_VAR 0 4
44043: PPUSH
44044: CALL_OW 112
// end ; end ;
44048: GO 43892
44050: POP
44051: POP
// if not need_heal_1 and not need_heal_2 then
44052: LD_VAR 0 6
44056: NOT
44057: PUSH
44058: LD_VAR 0 7
44062: NOT
44063: AND
44064: IFFALSE 44068
// continue ;
44066: GO 43559
// end ;
44068: GO 43559
44070: POP
44071: POP
// RaiseSailEvent ( 102 ) ;
44072: LD_INT 102
44074: PPUSH
44075: CALL_OW 427
// end ;
44079: LD_VAR 0 1
44083: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
44084: LD_INT 0
44086: PPUSH
44087: PPUSH
44088: PPUSH
44089: PPUSH
44090: PPUSH
// if not mc_bases then
44091: LD_EXP 37
44095: NOT
44096: IFFALSE 44100
// exit ;
44098: GO 44485
// for i = 1 to mc_bases do
44100: LD_ADDR_VAR 0 2
44104: PUSH
44105: DOUBLE
44106: LD_INT 1
44108: DEC
44109: ST_TO_ADDR
44110: LD_EXP 37
44114: PUSH
44115: FOR_TO
44116: IFFALSE 44483
// begin if not mc_building_need_repair [ i ] then
44118: LD_EXP 38
44122: PUSH
44123: LD_VAR 0 2
44127: ARRAY
44128: NOT
44129: IFFALSE 44167
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
44131: LD_ADDR_EXP 39
44135: PUSH
44136: LD_EXP 39
44140: PPUSH
44141: LD_VAR 0 2
44145: PPUSH
44146: EMPTY
44147: PPUSH
44148: CALL_OW 1
44152: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
44153: LD_VAR 0 2
44157: PPUSH
44158: LD_INT 101
44160: PPUSH
44161: CALL 43318 0 2
// continue ;
44165: GO 44115
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
44167: LD_ADDR_EXP 43
44171: PUSH
44172: LD_EXP 43
44176: PPUSH
44177: LD_VAR 0 2
44181: PPUSH
44182: EMPTY
44183: PPUSH
44184: CALL_OW 1
44188: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
44189: LD_VAR 0 2
44193: PPUSH
44194: LD_INT 103
44196: PPUSH
44197: CALL 43318 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
44201: LD_ADDR_VAR 0 5
44205: PUSH
44206: LD_EXP 37
44210: PUSH
44211: LD_VAR 0 2
44215: ARRAY
44216: PUSH
44217: LD_EXP 66
44221: PUSH
44222: LD_VAR 0 2
44226: ARRAY
44227: UNION
44228: PPUSH
44229: LD_INT 2
44231: PUSH
44232: LD_INT 25
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 25
44244: PUSH
44245: LD_INT 16
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: LIST
44256: PUSH
44257: EMPTY
44258: LIST
44259: PPUSH
44260: CALL_OW 72
44264: ST_TO_ADDR
// if not tmp then
44265: LD_VAR 0 5
44269: NOT
44270: IFFALSE 44274
// continue ;
44272: GO 44115
// for j in tmp do
44274: LD_ADDR_VAR 0 3
44278: PUSH
44279: LD_VAR 0 5
44283: PUSH
44284: FOR_IN
44285: IFFALSE 44479
// begin if mc_need_heal [ i ] then
44287: LD_EXP 40
44291: PUSH
44292: LD_VAR 0 2
44296: ARRAY
44297: IFFALSE 44345
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
44299: LD_VAR 0 3
44303: PUSH
44304: LD_EXP 40
44308: PUSH
44309: LD_VAR 0 2
44313: ARRAY
44314: PUSH
44315: LD_INT 1
44317: ARRAY
44318: IN
44319: PUSH
44320: LD_VAR 0 3
44324: PUSH
44325: LD_EXP 40
44329: PUSH
44330: LD_VAR 0 2
44334: ARRAY
44335: PUSH
44336: LD_INT 2
44338: ARRAY
44339: IN
44340: OR
44341: IFFALSE 44345
// continue ;
44343: GO 44284
// if IsInUnit ( j ) then
44345: LD_VAR 0 3
44349: PPUSH
44350: CALL_OW 310
44354: IFFALSE 44365
// ComExitBuilding ( j ) ;
44356: LD_VAR 0 3
44360: PPUSH
44361: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
44365: LD_VAR 0 3
44369: PUSH
44370: LD_EXP 39
44374: PUSH
44375: LD_VAR 0 2
44379: ARRAY
44380: IN
44381: NOT
44382: IFFALSE 44440
// begin SetTag ( j , 101 ) ;
44384: LD_VAR 0 3
44388: PPUSH
44389: LD_INT 101
44391: PPUSH
44392: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
44396: LD_ADDR_EXP 39
44400: PUSH
44401: LD_EXP 39
44405: PPUSH
44406: LD_VAR 0 2
44410: PUSH
44411: LD_EXP 39
44415: PUSH
44416: LD_VAR 0 2
44420: ARRAY
44421: PUSH
44422: LD_INT 1
44424: PLUS
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PPUSH
44430: LD_VAR 0 3
44434: PPUSH
44435: CALL 10876 0 3
44439: ST_TO_ADDR
// end ; Wait ( 3 ) ;
44440: LD_INT 3
44442: PPUSH
44443: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
44447: LD_VAR 0 3
44451: PPUSH
44452: LD_EXP 38
44456: PUSH
44457: LD_VAR 0 2
44461: ARRAY
44462: PPUSH
44463: LD_VAR 0 3
44467: PPUSH
44468: CALL_OW 74
44472: PPUSH
44473: CALL_OW 130
// end ;
44477: GO 44284
44479: POP
44480: POP
// end ;
44481: GO 44115
44483: POP
44484: POP
// end ;
44485: LD_VAR 0 1
44489: RET
// export function MC_Heal ; var i , j , tmp ; begin
44490: LD_INT 0
44492: PPUSH
44493: PPUSH
44494: PPUSH
44495: PPUSH
// if not mc_bases then
44496: LD_EXP 37
44500: NOT
44501: IFFALSE 44505
// exit ;
44503: GO 44907
// for i = 1 to mc_bases do
44505: LD_ADDR_VAR 0 2
44509: PUSH
44510: DOUBLE
44511: LD_INT 1
44513: DEC
44514: ST_TO_ADDR
44515: LD_EXP 37
44519: PUSH
44520: FOR_TO
44521: IFFALSE 44905
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
44523: LD_EXP 40
44527: PUSH
44528: LD_VAR 0 2
44532: ARRAY
44533: PUSH
44534: LD_INT 1
44536: ARRAY
44537: NOT
44538: PUSH
44539: LD_EXP 40
44543: PUSH
44544: LD_VAR 0 2
44548: ARRAY
44549: PUSH
44550: LD_INT 2
44552: ARRAY
44553: NOT
44554: AND
44555: IFFALSE 44593
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
44557: LD_ADDR_EXP 41
44561: PUSH
44562: LD_EXP 41
44566: PPUSH
44567: LD_VAR 0 2
44571: PPUSH
44572: EMPTY
44573: PPUSH
44574: CALL_OW 1
44578: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
44579: LD_VAR 0 2
44583: PPUSH
44584: LD_INT 102
44586: PPUSH
44587: CALL 43318 0 2
// continue ;
44591: GO 44520
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
44593: LD_ADDR_VAR 0 4
44597: PUSH
44598: LD_EXP 37
44602: PUSH
44603: LD_VAR 0 2
44607: ARRAY
44608: PPUSH
44609: LD_INT 25
44611: PUSH
44612: LD_INT 4
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PPUSH
44619: CALL_OW 72
44623: ST_TO_ADDR
// if not tmp then
44624: LD_VAR 0 4
44628: NOT
44629: IFFALSE 44633
// continue ;
44631: GO 44520
// if mc_taming [ i ] then
44633: LD_EXP 68
44637: PUSH
44638: LD_VAR 0 2
44642: ARRAY
44643: IFFALSE 44667
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
44645: LD_ADDR_EXP 68
44649: PUSH
44650: LD_EXP 68
44654: PPUSH
44655: LD_VAR 0 2
44659: PPUSH
44660: EMPTY
44661: PPUSH
44662: CALL_OW 1
44666: ST_TO_ADDR
// for j in tmp do
44667: LD_ADDR_VAR 0 3
44671: PUSH
44672: LD_VAR 0 4
44676: PUSH
44677: FOR_IN
44678: IFFALSE 44901
// begin if IsInUnit ( j ) then
44680: LD_VAR 0 3
44684: PPUSH
44685: CALL_OW 310
44689: IFFALSE 44700
// ComExitBuilding ( j ) ;
44691: LD_VAR 0 3
44695: PPUSH
44696: CALL_OW 122
// if not j in mc_healers [ i ] then
44700: LD_VAR 0 3
44704: PUSH
44705: LD_EXP 41
44709: PUSH
44710: LD_VAR 0 2
44714: ARRAY
44715: IN
44716: NOT
44717: IFFALSE 44763
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
44719: LD_ADDR_EXP 41
44723: PUSH
44724: LD_EXP 41
44728: PPUSH
44729: LD_VAR 0 2
44733: PUSH
44734: LD_EXP 41
44738: PUSH
44739: LD_VAR 0 2
44743: ARRAY
44744: PUSH
44745: LD_INT 1
44747: PLUS
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PPUSH
44753: LD_VAR 0 3
44757: PPUSH
44758: CALL 10876 0 3
44762: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
44763: LD_VAR 0 3
44767: PPUSH
44768: CALL_OW 110
44772: PUSH
44773: LD_INT 102
44775: NONEQUAL
44776: IFFALSE 44790
// SetTag ( j , 102 ) ;
44778: LD_VAR 0 3
44782: PPUSH
44783: LD_INT 102
44785: PPUSH
44786: CALL_OW 109
// Wait ( 3 ) ;
44790: LD_INT 3
44792: PPUSH
44793: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
44797: LD_EXP 40
44801: PUSH
44802: LD_VAR 0 2
44806: ARRAY
44807: PUSH
44808: LD_INT 1
44810: ARRAY
44811: IFFALSE 44843
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
44813: LD_VAR 0 3
44817: PPUSH
44818: LD_EXP 40
44822: PUSH
44823: LD_VAR 0 2
44827: ARRAY
44828: PUSH
44829: LD_INT 1
44831: ARRAY
44832: PUSH
44833: LD_INT 1
44835: ARRAY
44836: PPUSH
44837: CALL_OW 128
44841: GO 44899
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
44843: LD_VAR 0 3
44847: PPUSH
44848: CALL_OW 314
44852: NOT
44853: PUSH
44854: LD_EXP 40
44858: PUSH
44859: LD_VAR 0 2
44863: ARRAY
44864: PUSH
44865: LD_INT 2
44867: ARRAY
44868: AND
44869: IFFALSE 44899
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
44871: LD_VAR 0 3
44875: PPUSH
44876: LD_EXP 40
44880: PUSH
44881: LD_VAR 0 2
44885: ARRAY
44886: PUSH
44887: LD_INT 2
44889: ARRAY
44890: PUSH
44891: LD_INT 1
44893: ARRAY
44894: PPUSH
44895: CALL_OW 128
// end ;
44899: GO 44677
44901: POP
44902: POP
// end ;
44903: GO 44520
44905: POP
44906: POP
// end ;
44907: LD_VAR 0 1
44911: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
44912: LD_INT 0
44914: PPUSH
44915: PPUSH
44916: PPUSH
44917: PPUSH
// if not mc_bases then
44918: LD_EXP 37
44922: NOT
44923: IFFALSE 44927
// exit ;
44925: GO 45824
// for i = 1 to mc_bases do
44927: LD_ADDR_VAR 0 2
44931: PUSH
44932: DOUBLE
44933: LD_INT 1
44935: DEC
44936: ST_TO_ADDR
44937: LD_EXP 37
44941: PUSH
44942: FOR_TO
44943: IFFALSE 45822
// begin if mc_scan [ i ] then
44945: LD_EXP 60
44949: PUSH
44950: LD_VAR 0 2
44954: ARRAY
44955: IFFALSE 44959
// continue ;
44957: GO 44942
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
44959: LD_EXP 42
44963: PUSH
44964: LD_VAR 0 2
44968: ARRAY
44969: NOT
44970: PUSH
44971: LD_EXP 44
44975: PUSH
44976: LD_VAR 0 2
44980: ARRAY
44981: NOT
44982: AND
44983: PUSH
44984: LD_EXP 43
44988: PUSH
44989: LD_VAR 0 2
44993: ARRAY
44994: AND
44995: IFFALSE 45033
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
44997: LD_ADDR_EXP 43
45001: PUSH
45002: LD_EXP 43
45006: PPUSH
45007: LD_VAR 0 2
45011: PPUSH
45012: EMPTY
45013: PPUSH
45014: CALL_OW 1
45018: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
45019: LD_VAR 0 2
45023: PPUSH
45024: LD_INT 103
45026: PPUSH
45027: CALL 43318 0 2
// continue ;
45031: GO 44942
// end ; if mc_construct_list [ i ] then
45033: LD_EXP 44
45037: PUSH
45038: LD_VAR 0 2
45042: ARRAY
45043: IFFALSE 45263
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
45045: LD_ADDR_VAR 0 4
45049: PUSH
45050: LD_EXP 37
45054: PUSH
45055: LD_VAR 0 2
45059: ARRAY
45060: PPUSH
45061: LD_INT 25
45063: PUSH
45064: LD_INT 2
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PPUSH
45071: CALL_OW 72
45075: PUSH
45076: LD_EXP 39
45080: PUSH
45081: LD_VAR 0 2
45085: ARRAY
45086: DIFF
45087: ST_TO_ADDR
// if not tmp then
45088: LD_VAR 0 4
45092: NOT
45093: IFFALSE 45097
// continue ;
45095: GO 44942
// for j in tmp do
45097: LD_ADDR_VAR 0 3
45101: PUSH
45102: LD_VAR 0 4
45106: PUSH
45107: FOR_IN
45108: IFFALSE 45259
// begin if not mc_builders [ i ] then
45110: LD_EXP 43
45114: PUSH
45115: LD_VAR 0 2
45119: ARRAY
45120: NOT
45121: IFFALSE 45179
// begin SetTag ( j , 103 ) ;
45123: LD_VAR 0 3
45127: PPUSH
45128: LD_INT 103
45130: PPUSH
45131: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
45135: LD_ADDR_EXP 43
45139: PUSH
45140: LD_EXP 43
45144: PPUSH
45145: LD_VAR 0 2
45149: PUSH
45150: LD_EXP 43
45154: PUSH
45155: LD_VAR 0 2
45159: ARRAY
45160: PUSH
45161: LD_INT 1
45163: PLUS
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PPUSH
45169: LD_VAR 0 3
45173: PPUSH
45174: CALL 10876 0 3
45178: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
45179: LD_VAR 0 3
45183: PPUSH
45184: CALL_OW 310
45188: IFFALSE 45199
// ComExitBuilding ( j ) ;
45190: LD_VAR 0 3
45194: PPUSH
45195: CALL_OW 122
// wait ( 3 ) ;
45199: LD_INT 3
45201: PPUSH
45202: CALL_OW 67
// if not mc_construct_list [ i ] then
45206: LD_EXP 44
45210: PUSH
45211: LD_VAR 0 2
45215: ARRAY
45216: NOT
45217: IFFALSE 45221
// break ;
45219: GO 45259
// if not HasTask ( j ) then
45221: LD_VAR 0 3
45225: PPUSH
45226: CALL_OW 314
45230: NOT
45231: IFFALSE 45257
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
45233: LD_VAR 0 3
45237: PPUSH
45238: LD_EXP 44
45242: PUSH
45243: LD_VAR 0 2
45247: ARRAY
45248: PUSH
45249: LD_INT 1
45251: ARRAY
45252: PPUSH
45253: CALL 13282 0 2
// end ;
45257: GO 45107
45259: POP
45260: POP
// end else
45261: GO 45820
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
45263: LD_EXP 42
45267: PUSH
45268: LD_VAR 0 2
45272: ARRAY
45273: PUSH
45274: LD_EXP 37
45278: PUSH
45279: LD_VAR 0 2
45283: ARRAY
45284: PPUSH
45285: LD_INT 2
45287: PUSH
45288: LD_INT 30
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 30
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: LIST
45312: PPUSH
45313: CALL_OW 72
45317: AND
45318: IFFALSE 45820
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
45320: LD_EXP 37
45324: PUSH
45325: LD_VAR 0 2
45329: ARRAY
45330: PPUSH
45331: LD_INT 2
45333: PUSH
45334: LD_INT 30
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 30
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: LIST
45358: PPUSH
45359: CALL_OW 72
45363: PUSH
45364: LD_INT 1
45366: ARRAY
45367: PPUSH
45368: LD_EXP 42
45372: PUSH
45373: LD_VAR 0 2
45377: ARRAY
45378: PUSH
45379: LD_INT 1
45381: ARRAY
45382: PUSH
45383: LD_INT 1
45385: ARRAY
45386: PPUSH
45387: LD_EXP 42
45391: PUSH
45392: LD_VAR 0 2
45396: ARRAY
45397: PUSH
45398: LD_INT 1
45400: ARRAY
45401: PUSH
45402: LD_INT 2
45404: ARRAY
45405: PPUSH
45406: LD_EXP 42
45410: PUSH
45411: LD_VAR 0 2
45415: ARRAY
45416: PUSH
45417: LD_INT 1
45419: ARRAY
45420: PUSH
45421: LD_INT 3
45423: ARRAY
45424: PPUSH
45425: LD_EXP 42
45429: PUSH
45430: LD_VAR 0 2
45434: ARRAY
45435: PUSH
45436: LD_INT 1
45438: ARRAY
45439: PUSH
45440: LD_INT 4
45442: ARRAY
45443: PPUSH
45444: CALL 17386 0 5
45448: IFFALSE 45729
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
45450: LD_ADDR_VAR 0 4
45454: PUSH
45455: LD_EXP 37
45459: PUSH
45460: LD_VAR 0 2
45464: ARRAY
45465: PPUSH
45466: LD_INT 25
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PPUSH
45476: CALL_OW 72
45480: PUSH
45481: LD_EXP 39
45485: PUSH
45486: LD_VAR 0 2
45490: ARRAY
45491: DIFF
45492: ST_TO_ADDR
// if not tmp then
45493: LD_VAR 0 4
45497: NOT
45498: IFFALSE 45502
// continue ;
45500: GO 44942
// for j in tmp do
45502: LD_ADDR_VAR 0 3
45506: PUSH
45507: LD_VAR 0 4
45511: PUSH
45512: FOR_IN
45513: IFFALSE 45725
// begin if not mc_builders [ i ] then
45515: LD_EXP 43
45519: PUSH
45520: LD_VAR 0 2
45524: ARRAY
45525: NOT
45526: IFFALSE 45584
// begin SetTag ( j , 103 ) ;
45528: LD_VAR 0 3
45532: PPUSH
45533: LD_INT 103
45535: PPUSH
45536: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
45540: LD_ADDR_EXP 43
45544: PUSH
45545: LD_EXP 43
45549: PPUSH
45550: LD_VAR 0 2
45554: PUSH
45555: LD_EXP 43
45559: PUSH
45560: LD_VAR 0 2
45564: ARRAY
45565: PUSH
45566: LD_INT 1
45568: PLUS
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PPUSH
45574: LD_VAR 0 3
45578: PPUSH
45579: CALL 10876 0 3
45583: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
45584: LD_VAR 0 3
45588: PPUSH
45589: CALL_OW 310
45593: IFFALSE 45604
// ComExitBuilding ( j ) ;
45595: LD_VAR 0 3
45599: PPUSH
45600: CALL_OW 122
// wait ( 3 ) ;
45604: LD_INT 3
45606: PPUSH
45607: CALL_OW 67
// if not mc_build_list [ i ] then
45611: LD_EXP 42
45615: PUSH
45616: LD_VAR 0 2
45620: ARRAY
45621: NOT
45622: IFFALSE 45626
// break ;
45624: GO 45725
// if not HasTask ( j ) then
45626: LD_VAR 0 3
45630: PPUSH
45631: CALL_OW 314
45635: NOT
45636: IFFALSE 45723
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
45638: LD_VAR 0 3
45642: PPUSH
45643: LD_EXP 42
45647: PUSH
45648: LD_VAR 0 2
45652: ARRAY
45653: PUSH
45654: LD_INT 1
45656: ARRAY
45657: PUSH
45658: LD_INT 1
45660: ARRAY
45661: PPUSH
45662: LD_EXP 42
45666: PUSH
45667: LD_VAR 0 2
45671: ARRAY
45672: PUSH
45673: LD_INT 1
45675: ARRAY
45676: PUSH
45677: LD_INT 2
45679: ARRAY
45680: PPUSH
45681: LD_EXP 42
45685: PUSH
45686: LD_VAR 0 2
45690: ARRAY
45691: PUSH
45692: LD_INT 1
45694: ARRAY
45695: PUSH
45696: LD_INT 3
45698: ARRAY
45699: PPUSH
45700: LD_EXP 42
45704: PUSH
45705: LD_VAR 0 2
45709: ARRAY
45710: PUSH
45711: LD_INT 1
45713: ARRAY
45714: PUSH
45715: LD_INT 4
45717: ARRAY
45718: PPUSH
45719: CALL_OW 145
// end ;
45723: GO 45512
45725: POP
45726: POP
// end else
45727: GO 45820
// TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
45729: LD_EXP 37
45733: PUSH
45734: LD_VAR 0 2
45738: ARRAY
45739: PPUSH
45740: LD_EXP 42
45744: PUSH
45745: LD_VAR 0 2
45749: ARRAY
45750: PUSH
45751: LD_INT 1
45753: ARRAY
45754: PUSH
45755: LD_INT 1
45757: ARRAY
45758: PPUSH
45759: LD_EXP 42
45763: PUSH
45764: LD_VAR 0 2
45768: ARRAY
45769: PUSH
45770: LD_INT 1
45772: ARRAY
45773: PUSH
45774: LD_INT 2
45776: ARRAY
45777: PPUSH
45778: LD_EXP 42
45782: PUSH
45783: LD_VAR 0 2
45787: ARRAY
45788: PUSH
45789: LD_INT 1
45791: ARRAY
45792: PUSH
45793: LD_INT 3
45795: ARRAY
45796: PPUSH
45797: LD_EXP 42
45801: PUSH
45802: LD_VAR 0 2
45806: ARRAY
45807: PUSH
45808: LD_INT 1
45810: ARRAY
45811: PUSH
45812: LD_INT 4
45814: ARRAY
45815: PPUSH
45816: CALL 17070 0 5
// end ;
45820: GO 44942
45822: POP
45823: POP
// end ;
45824: LD_VAR 0 1
45828: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
45829: LD_INT 0
45831: PPUSH
45832: PPUSH
45833: PPUSH
45834: PPUSH
45835: PPUSH
45836: PPUSH
// if not mc_bases then
45837: LD_EXP 37
45841: NOT
45842: IFFALSE 45846
// exit ;
45844: GO 46273
// for i = 1 to mc_bases do
45846: LD_ADDR_VAR 0 2
45850: PUSH
45851: DOUBLE
45852: LD_INT 1
45854: DEC
45855: ST_TO_ADDR
45856: LD_EXP 37
45860: PUSH
45861: FOR_TO
45862: IFFALSE 46271
// begin tmp := mc_build_upgrade [ i ] ;
45864: LD_ADDR_VAR 0 4
45868: PUSH
45869: LD_EXP 69
45873: PUSH
45874: LD_VAR 0 2
45878: ARRAY
45879: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
45880: LD_ADDR_VAR 0 6
45884: PUSH
45885: LD_EXP 70
45889: PUSH
45890: LD_VAR 0 2
45894: ARRAY
45895: PPUSH
45896: LD_INT 2
45898: PUSH
45899: LD_INT 30
45901: PUSH
45902: LD_INT 6
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 30
45911: PUSH
45912: LD_INT 7
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: LIST
45923: PPUSH
45924: CALL_OW 72
45928: ST_TO_ADDR
// if not tmp and not lab then
45929: LD_VAR 0 4
45933: NOT
45934: PUSH
45935: LD_VAR 0 6
45939: NOT
45940: AND
45941: IFFALSE 45945
// continue ;
45943: GO 45861
// if tmp then
45945: LD_VAR 0 4
45949: IFFALSE 46069
// for j in tmp do
45951: LD_ADDR_VAR 0 3
45955: PUSH
45956: LD_VAR 0 4
45960: PUSH
45961: FOR_IN
45962: IFFALSE 46067
// begin if UpgradeCost ( j ) then
45964: LD_VAR 0 3
45968: PPUSH
45969: CALL 16730 0 1
45973: IFFALSE 46065
// begin ComUpgrade ( j ) ;
45975: LD_VAR 0 3
45979: PPUSH
45980: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
45984: LD_ADDR_EXP 69
45988: PUSH
45989: LD_EXP 69
45993: PPUSH
45994: LD_VAR 0 2
45998: PPUSH
45999: LD_EXP 69
46003: PUSH
46004: LD_VAR 0 2
46008: ARRAY
46009: PUSH
46010: LD_VAR 0 3
46014: DIFF
46015: PPUSH
46016: CALL_OW 1
46020: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
46021: LD_ADDR_EXP 44
46025: PUSH
46026: LD_EXP 44
46030: PPUSH
46031: LD_VAR 0 2
46035: PUSH
46036: LD_EXP 44
46040: PUSH
46041: LD_VAR 0 2
46045: ARRAY
46046: PUSH
46047: LD_INT 1
46049: PLUS
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PPUSH
46055: LD_VAR 0 3
46059: PPUSH
46060: CALL 10876 0 3
46064: ST_TO_ADDR
// end ; end ;
46065: GO 45961
46067: POP
46068: POP
// if not lab or not mc_lab_upgrade [ i ] then
46069: LD_VAR 0 6
46073: NOT
46074: PUSH
46075: LD_EXP 71
46079: PUSH
46080: LD_VAR 0 2
46084: ARRAY
46085: NOT
46086: OR
46087: IFFALSE 46091
// continue ;
46089: GO 45861
// for j in lab do
46091: LD_ADDR_VAR 0 3
46095: PUSH
46096: LD_VAR 0 6
46100: PUSH
46101: FOR_IN
46102: IFFALSE 46267
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
46104: LD_VAR 0 3
46108: PPUSH
46109: CALL_OW 266
46113: PUSH
46114: LD_INT 6
46116: PUSH
46117: LD_INT 7
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: IN
46124: PUSH
46125: LD_VAR 0 3
46129: PPUSH
46130: CALL_OW 461
46134: PUSH
46135: LD_INT 1
46137: NONEQUAL
46138: AND
46139: IFFALSE 46265
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
46141: LD_VAR 0 3
46145: PPUSH
46146: LD_EXP 71
46150: PUSH
46151: LD_VAR 0 2
46155: ARRAY
46156: PUSH
46157: LD_INT 1
46159: ARRAY
46160: PPUSH
46161: CALL 16935 0 2
46165: IFFALSE 46265
// begin ComCancel ( j ) ;
46167: LD_VAR 0 3
46171: PPUSH
46172: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
46176: LD_VAR 0 3
46180: PPUSH
46181: LD_EXP 71
46185: PUSH
46186: LD_VAR 0 2
46190: ARRAY
46191: PUSH
46192: LD_INT 1
46194: ARRAY
46195: PPUSH
46196: CALL_OW 207
// if not j in mc_construct_list [ i ] then
46200: LD_VAR 0 3
46204: PUSH
46205: LD_EXP 44
46209: PUSH
46210: LD_VAR 0 2
46214: ARRAY
46215: IN
46216: NOT
46217: IFFALSE 46263
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
46219: LD_ADDR_EXP 44
46223: PUSH
46224: LD_EXP 44
46228: PPUSH
46229: LD_VAR 0 2
46233: PUSH
46234: LD_EXP 44
46238: PUSH
46239: LD_VAR 0 2
46243: ARRAY
46244: PUSH
46245: LD_INT 1
46247: PLUS
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PPUSH
46253: LD_VAR 0 3
46257: PPUSH
46258: CALL 10876 0 3
46262: ST_TO_ADDR
// break ;
46263: GO 46267
// end ; end ; end ;
46265: GO 46101
46267: POP
46268: POP
// end ;
46269: GO 45861
46271: POP
46272: POP
// end ;
46273: LD_VAR 0 1
46277: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
46278: LD_INT 0
46280: PPUSH
46281: PPUSH
46282: PPUSH
46283: PPUSH
46284: PPUSH
46285: PPUSH
46286: PPUSH
// if not mc_bases then
46287: LD_EXP 37
46291: NOT
46292: IFFALSE 46296
// exit ;
46294: GO 46592
// for i = 1 to mc_bases do
46296: LD_ADDR_VAR 0 2
46300: PUSH
46301: DOUBLE
46302: LD_INT 1
46304: DEC
46305: ST_TO_ADDR
46306: LD_EXP 37
46310: PUSH
46311: FOR_TO
46312: IFFALSE 46590
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
46314: LD_EXP 45
46318: PUSH
46319: LD_VAR 0 2
46323: ARRAY
46324: NOT
46325: PUSH
46326: LD_EXP 37
46330: PUSH
46331: LD_VAR 0 2
46335: ARRAY
46336: PPUSH
46337: LD_INT 30
46339: PUSH
46340: LD_INT 3
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PPUSH
46347: CALL_OW 72
46351: NOT
46352: OR
46353: IFFALSE 46357
// continue ;
46355: GO 46311
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
46357: LD_EXP 45
46361: PUSH
46362: LD_VAR 0 2
46366: ARRAY
46367: PUSH
46368: LD_INT 1
46370: ARRAY
46371: PPUSH
46372: CALL_OW 269
46376: IFFALSE 46442
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
46378: LD_ADDR_VAR 0 4
46382: PUSH
46383: LD_EXP 45
46387: PUSH
46388: LD_VAR 0 2
46392: ARRAY
46393: PPUSH
46394: LD_INT 1
46396: PPUSH
46397: CALL_OW 3
46401: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
46402: LD_ADDR_EXP 45
46406: PUSH
46407: LD_EXP 45
46411: PPUSH
46412: LD_VAR 0 2
46416: PPUSH
46417: LD_VAR 0 4
46421: PPUSH
46422: CALL_OW 1
46426: ST_TO_ADDR
// if not mc_turret_list [ i ] then
46427: LD_EXP 45
46431: PUSH
46432: LD_VAR 0 2
46436: ARRAY
46437: NOT
46438: IFFALSE 46442
// continue ;
46440: GO 46311
// end ; busy := false ;
46442: LD_ADDR_VAR 0 6
46446: PUSH
46447: LD_INT 0
46449: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
46450: LD_ADDR_VAR 0 4
46454: PUSH
46455: LD_EXP 37
46459: PUSH
46460: LD_VAR 0 2
46464: ARRAY
46465: PPUSH
46466: LD_INT 30
46468: PUSH
46469: LD_INT 3
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PPUSH
46476: CALL_OW 72
46480: ST_TO_ADDR
// for j in tmp do
46481: LD_ADDR_VAR 0 3
46485: PUSH
46486: LD_VAR 0 4
46490: PUSH
46491: FOR_IN
46492: IFFALSE 46520
// if not BuildingStatus ( j ) = bs_idle then
46494: LD_VAR 0 3
46498: PPUSH
46499: CALL_OW 461
46503: PUSH
46504: LD_INT 2
46506: EQUAL
46507: NOT
46508: IFFALSE 46518
// busy := true ;
46510: LD_ADDR_VAR 0 6
46514: PUSH
46515: LD_INT 1
46517: ST_TO_ADDR
46518: GO 46491
46520: POP
46521: POP
// if busy then
46522: LD_VAR 0 6
46526: IFFALSE 46530
// continue ;
46528: GO 46311
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
46530: LD_ADDR_VAR 0 7
46534: PUSH
46535: LD_EXP 45
46539: PUSH
46540: LD_VAR 0 2
46544: ARRAY
46545: PUSH
46546: LD_INT 1
46548: ARRAY
46549: PPUSH
46550: CALL 15178 0 1
46554: ST_TO_ADDR
// if not weapon then
46555: LD_VAR 0 7
46559: NOT
46560: IFFALSE 46564
// continue ;
46562: GO 46311
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
46564: LD_EXP 45
46568: PUSH
46569: LD_VAR 0 2
46573: ARRAY
46574: PUSH
46575: LD_INT 1
46577: ARRAY
46578: PPUSH
46579: LD_VAR 0 7
46583: PPUSH
46584: CALL_OW 148
// end ;
46588: GO 46311
46590: POP
46591: POP
// end ;
46592: LD_VAR 0 1
46596: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
46597: LD_INT 0
46599: PPUSH
46600: PPUSH
46601: PPUSH
46602: PPUSH
46603: PPUSH
46604: PPUSH
// if not mc_bases then
46605: LD_EXP 37
46609: NOT
46610: IFFALSE 46614
// exit ;
46612: GO 47599
// for i = 1 to mc_bases do
46614: LD_ADDR_VAR 0 2
46618: PUSH
46619: DOUBLE
46620: LD_INT 1
46622: DEC
46623: ST_TO_ADDR
46624: LD_EXP 37
46628: PUSH
46629: FOR_TO
46630: IFFALSE 47597
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
46632: LD_EXP 50
46636: PUSH
46637: LD_VAR 0 2
46641: ARRAY
46642: NOT
46643: PUSH
46644: LD_EXP 50
46648: PUSH
46649: LD_VAR 0 2
46653: ARRAY
46654: PUSH
46655: LD_EXP 51
46659: PUSH
46660: LD_VAR 0 2
46664: ARRAY
46665: EQUAL
46666: OR
46667: IFFALSE 46671
// continue ;
46669: GO 46629
// if mc_miners [ i ] then
46671: LD_EXP 51
46675: PUSH
46676: LD_VAR 0 2
46680: ARRAY
46681: IFFALSE 47284
// begin k := 1 ;
46683: LD_ADDR_VAR 0 4
46687: PUSH
46688: LD_INT 1
46690: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
46691: LD_ADDR_VAR 0 3
46695: PUSH
46696: DOUBLE
46697: LD_EXP 51
46701: PUSH
46702: LD_VAR 0 2
46706: ARRAY
46707: INC
46708: ST_TO_ADDR
46709: LD_INT 1
46711: PUSH
46712: FOR_DOWNTO
46713: IFFALSE 47282
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
46715: LD_EXP 51
46719: PUSH
46720: LD_VAR 0 2
46724: ARRAY
46725: PUSH
46726: LD_VAR 0 3
46730: ARRAY
46731: PPUSH
46732: CALL_OW 301
46736: IFFALSE 46799
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
46738: LD_ADDR_VAR 0 5
46742: PUSH
46743: LD_EXP 51
46747: PUSH
46748: LD_VAR 0 2
46752: ARRAY
46753: PUSH
46754: LD_EXP 51
46758: PUSH
46759: LD_VAR 0 2
46763: ARRAY
46764: PUSH
46765: LD_VAR 0 3
46769: ARRAY
46770: DIFF
46771: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
46772: LD_ADDR_EXP 51
46776: PUSH
46777: LD_EXP 51
46781: PPUSH
46782: LD_VAR 0 2
46786: PPUSH
46787: LD_VAR 0 5
46791: PPUSH
46792: CALL_OW 1
46796: ST_TO_ADDR
// continue ;
46797: GO 46712
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
46799: LD_EXP 51
46803: PUSH
46804: LD_VAR 0 2
46808: ARRAY
46809: PUSH
46810: LD_VAR 0 3
46814: ARRAY
46815: PPUSH
46816: CALL 10377 0 1
46820: PUSH
46821: LD_EXP 51
46825: PUSH
46826: LD_VAR 0 2
46830: ARRAY
46831: PUSH
46832: LD_VAR 0 3
46836: ARRAY
46837: PPUSH
46838: CALL_OW 255
46842: PPUSH
46843: LD_EXP 50
46847: PUSH
46848: LD_VAR 0 2
46852: ARRAY
46853: PUSH
46854: LD_VAR 0 4
46858: ARRAY
46859: PUSH
46860: LD_INT 1
46862: ARRAY
46863: PPUSH
46864: LD_EXP 50
46868: PUSH
46869: LD_VAR 0 2
46873: ARRAY
46874: PUSH
46875: LD_VAR 0 4
46879: ARRAY
46880: PUSH
46881: LD_INT 2
46883: ARRAY
46884: PPUSH
46885: LD_INT 15
46887: PPUSH
46888: CALL 11370 0 4
46892: PUSH
46893: LD_INT 4
46895: ARRAY
46896: PUSH
46897: LD_EXP 51
46901: PUSH
46902: LD_VAR 0 2
46906: ARRAY
46907: PUSH
46908: LD_VAR 0 3
46912: ARRAY
46913: PPUSH
46914: LD_INT 10
46916: PPUSH
46917: CALL 13067 0 2
46921: PUSH
46922: LD_INT 4
46924: ARRAY
46925: OR
46926: AND
46927: IFFALSE 46950
// ComStop ( mc_miners [ i ] [ j ] ) ;
46929: LD_EXP 51
46933: PUSH
46934: LD_VAR 0 2
46938: ARRAY
46939: PUSH
46940: LD_VAR 0 3
46944: ARRAY
46945: PPUSH
46946: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
46950: LD_EXP 51
46954: PUSH
46955: LD_VAR 0 2
46959: ARRAY
46960: PUSH
46961: LD_VAR 0 3
46965: ARRAY
46966: PPUSH
46967: CALL_OW 257
46971: PUSH
46972: LD_INT 1
46974: EQUAL
46975: PUSH
46976: LD_EXP 51
46980: PUSH
46981: LD_VAR 0 2
46985: ARRAY
46986: PUSH
46987: LD_VAR 0 3
46991: ARRAY
46992: PPUSH
46993: CALL_OW 459
46997: NOT
46998: AND
46999: PUSH
47000: LD_EXP 51
47004: PUSH
47005: LD_VAR 0 2
47009: ARRAY
47010: PUSH
47011: LD_VAR 0 3
47015: ARRAY
47016: PPUSH
47017: CALL_OW 255
47021: PPUSH
47022: LD_EXP 50
47026: PUSH
47027: LD_VAR 0 2
47031: ARRAY
47032: PUSH
47033: LD_VAR 0 4
47037: ARRAY
47038: PUSH
47039: LD_INT 1
47041: ARRAY
47042: PPUSH
47043: LD_EXP 50
47047: PUSH
47048: LD_VAR 0 2
47052: ARRAY
47053: PUSH
47054: LD_VAR 0 4
47058: ARRAY
47059: PUSH
47060: LD_INT 2
47062: ARRAY
47063: PPUSH
47064: LD_INT 15
47066: PPUSH
47067: CALL 11370 0 4
47071: PUSH
47072: LD_INT 4
47074: ARRAY
47075: PUSH
47076: LD_INT 0
47078: EQUAL
47079: AND
47080: PUSH
47081: LD_EXP 51
47085: PUSH
47086: LD_VAR 0 2
47090: ARRAY
47091: PUSH
47092: LD_VAR 0 3
47096: ARRAY
47097: PPUSH
47098: CALL_OW 314
47102: NOT
47103: AND
47104: IFFALSE 47280
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
47106: LD_EXP 51
47110: PUSH
47111: LD_VAR 0 2
47115: ARRAY
47116: PUSH
47117: LD_VAR 0 3
47121: ARRAY
47122: PPUSH
47123: CALL_OW 310
47127: IFFALSE 47150
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
47129: LD_EXP 51
47133: PUSH
47134: LD_VAR 0 2
47138: ARRAY
47139: PUSH
47140: LD_VAR 0 3
47144: ARRAY
47145: PPUSH
47146: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
47150: LD_EXP 51
47154: PUSH
47155: LD_VAR 0 2
47159: ARRAY
47160: PUSH
47161: LD_VAR 0 3
47165: ARRAY
47166: PPUSH
47167: CALL_OW 314
47171: NOT
47172: IFFALSE 47240
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
47174: LD_EXP 51
47178: PUSH
47179: LD_VAR 0 2
47183: ARRAY
47184: PUSH
47185: LD_VAR 0 3
47189: ARRAY
47190: PPUSH
47191: LD_EXP 50
47195: PUSH
47196: LD_VAR 0 2
47200: ARRAY
47201: PUSH
47202: LD_VAR 0 4
47206: ARRAY
47207: PUSH
47208: LD_INT 1
47210: ARRAY
47211: PPUSH
47212: LD_EXP 50
47216: PUSH
47217: LD_VAR 0 2
47221: ARRAY
47222: PUSH
47223: LD_VAR 0 4
47227: ARRAY
47228: PUSH
47229: LD_INT 2
47231: ARRAY
47232: PPUSH
47233: LD_INT 0
47235: PPUSH
47236: CALL_OW 193
// k := k + 1 ;
47240: LD_ADDR_VAR 0 4
47244: PUSH
47245: LD_VAR 0 4
47249: PUSH
47250: LD_INT 1
47252: PLUS
47253: ST_TO_ADDR
// if k > mc_mines [ i ] then
47254: LD_VAR 0 4
47258: PUSH
47259: LD_EXP 50
47263: PUSH
47264: LD_VAR 0 2
47268: ARRAY
47269: GREATER
47270: IFFALSE 47280
// k := 1 ;
47272: LD_ADDR_VAR 0 4
47276: PUSH
47277: LD_INT 1
47279: ST_TO_ADDR
// end ; end ;
47280: GO 46712
47282: POP
47283: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
47284: LD_ADDR_VAR 0 5
47288: PUSH
47289: LD_EXP 37
47293: PUSH
47294: LD_VAR 0 2
47298: ARRAY
47299: PPUSH
47300: LD_INT 2
47302: PUSH
47303: LD_INT 30
47305: PUSH
47306: LD_INT 4
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 30
47315: PUSH
47316: LD_INT 5
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 30
47325: PUSH
47326: LD_INT 32
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: PPUSH
47339: CALL_OW 72
47343: ST_TO_ADDR
// if not tmp then
47344: LD_VAR 0 5
47348: NOT
47349: IFFALSE 47353
// continue ;
47351: GO 46629
// list := [ ] ;
47353: LD_ADDR_VAR 0 6
47357: PUSH
47358: EMPTY
47359: ST_TO_ADDR
// for j in tmp do
47360: LD_ADDR_VAR 0 3
47364: PUSH
47365: LD_VAR 0 5
47369: PUSH
47370: FOR_IN
47371: IFFALSE 47440
// begin for k in UnitsInside ( j ) do
47373: LD_ADDR_VAR 0 4
47377: PUSH
47378: LD_VAR 0 3
47382: PPUSH
47383: CALL_OW 313
47387: PUSH
47388: FOR_IN
47389: IFFALSE 47436
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
47391: LD_VAR 0 4
47395: PPUSH
47396: CALL_OW 257
47400: PUSH
47401: LD_INT 1
47403: EQUAL
47404: PUSH
47405: LD_VAR 0 4
47409: PPUSH
47410: CALL_OW 459
47414: NOT
47415: AND
47416: IFFALSE 47434
// list := list ^ k ;
47418: LD_ADDR_VAR 0 6
47422: PUSH
47423: LD_VAR 0 6
47427: PUSH
47428: LD_VAR 0 4
47432: ADD
47433: ST_TO_ADDR
47434: GO 47388
47436: POP
47437: POP
// end ;
47438: GO 47370
47440: POP
47441: POP
// list := list diff mc_miners [ i ] ;
47442: LD_ADDR_VAR 0 6
47446: PUSH
47447: LD_VAR 0 6
47451: PUSH
47452: LD_EXP 51
47456: PUSH
47457: LD_VAR 0 2
47461: ARRAY
47462: DIFF
47463: ST_TO_ADDR
// if not list then
47464: LD_VAR 0 6
47468: NOT
47469: IFFALSE 47473
// continue ;
47471: GO 46629
// k := mc_mines [ i ] - mc_miners [ i ] ;
47473: LD_ADDR_VAR 0 4
47477: PUSH
47478: LD_EXP 50
47482: PUSH
47483: LD_VAR 0 2
47487: ARRAY
47488: PUSH
47489: LD_EXP 51
47493: PUSH
47494: LD_VAR 0 2
47498: ARRAY
47499: MINUS
47500: ST_TO_ADDR
// if k > list then
47501: LD_VAR 0 4
47505: PUSH
47506: LD_VAR 0 6
47510: GREATER
47511: IFFALSE 47523
// k := list ;
47513: LD_ADDR_VAR 0 4
47517: PUSH
47518: LD_VAR 0 6
47522: ST_TO_ADDR
// for j = 1 to k do
47523: LD_ADDR_VAR 0 3
47527: PUSH
47528: DOUBLE
47529: LD_INT 1
47531: DEC
47532: ST_TO_ADDR
47533: LD_VAR 0 4
47537: PUSH
47538: FOR_TO
47539: IFFALSE 47593
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
47541: LD_ADDR_EXP 51
47545: PUSH
47546: LD_EXP 51
47550: PPUSH
47551: LD_VAR 0 2
47555: PUSH
47556: LD_EXP 51
47560: PUSH
47561: LD_VAR 0 2
47565: ARRAY
47566: PUSH
47567: LD_INT 1
47569: PLUS
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PPUSH
47575: LD_VAR 0 6
47579: PUSH
47580: LD_VAR 0 3
47584: ARRAY
47585: PPUSH
47586: CALL 10876 0 3
47590: ST_TO_ADDR
47591: GO 47538
47593: POP
47594: POP
// end ;
47595: GO 46629
47597: POP
47598: POP
// end ;
47599: LD_VAR 0 1
47603: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
47604: LD_INT 0
47606: PPUSH
47607: PPUSH
47608: PPUSH
47609: PPUSH
47610: PPUSH
47611: PPUSH
47612: PPUSH
47613: PPUSH
47614: PPUSH
// if not mc_bases then
47615: LD_EXP 37
47619: NOT
47620: IFFALSE 47624
// exit ;
47622: GO 49009
// for i = 1 to mc_bases do
47624: LD_ADDR_VAR 0 2
47628: PUSH
47629: DOUBLE
47630: LD_INT 1
47632: DEC
47633: ST_TO_ADDR
47634: LD_EXP 37
47638: PUSH
47639: FOR_TO
47640: IFFALSE 49007
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
47642: LD_EXP 37
47646: PUSH
47647: LD_VAR 0 2
47651: ARRAY
47652: NOT
47653: PUSH
47654: LD_EXP 44
47658: PUSH
47659: LD_VAR 0 2
47663: ARRAY
47664: OR
47665: IFFALSE 47669
// continue ;
47667: GO 47639
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
47669: LD_EXP 53
47673: PUSH
47674: LD_VAR 0 2
47678: ARRAY
47679: NOT
47680: PUSH
47681: LD_EXP 54
47685: PUSH
47686: LD_VAR 0 2
47690: ARRAY
47691: AND
47692: IFFALSE 47730
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
47694: LD_ADDR_EXP 54
47698: PUSH
47699: LD_EXP 54
47703: PPUSH
47704: LD_VAR 0 2
47708: PPUSH
47709: EMPTY
47710: PPUSH
47711: CALL_OW 1
47715: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
47716: LD_VAR 0 2
47720: PPUSH
47721: LD_INT 107
47723: PPUSH
47724: CALL 43318 0 2
// continue ;
47728: GO 47639
// end ; target := [ ] ;
47730: LD_ADDR_VAR 0 5
47734: PUSH
47735: EMPTY
47736: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
47737: LD_ADDR_VAR 0 3
47741: PUSH
47742: DOUBLE
47743: LD_EXP 53
47747: PUSH
47748: LD_VAR 0 2
47752: ARRAY
47753: INC
47754: ST_TO_ADDR
47755: LD_INT 1
47757: PUSH
47758: FOR_DOWNTO
47759: IFFALSE 48019
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
47761: LD_EXP 53
47765: PUSH
47766: LD_VAR 0 2
47770: ARRAY
47771: PUSH
47772: LD_VAR 0 3
47776: ARRAY
47777: PUSH
47778: LD_INT 2
47780: ARRAY
47781: PPUSH
47782: LD_EXP 53
47786: PUSH
47787: LD_VAR 0 2
47791: ARRAY
47792: PUSH
47793: LD_VAR 0 3
47797: ARRAY
47798: PUSH
47799: LD_INT 3
47801: ARRAY
47802: PPUSH
47803: CALL_OW 488
47807: PUSH
47808: LD_EXP 53
47812: PUSH
47813: LD_VAR 0 2
47817: ARRAY
47818: PUSH
47819: LD_VAR 0 3
47823: ARRAY
47824: PUSH
47825: LD_INT 2
47827: ARRAY
47828: PPUSH
47829: LD_EXP 53
47833: PUSH
47834: LD_VAR 0 2
47838: ARRAY
47839: PUSH
47840: LD_VAR 0 3
47844: ARRAY
47845: PUSH
47846: LD_INT 3
47848: ARRAY
47849: PPUSH
47850: CALL_OW 284
47854: PUSH
47855: LD_INT 0
47857: EQUAL
47858: AND
47859: IFFALSE 47914
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
47861: LD_ADDR_VAR 0 4
47865: PUSH
47866: LD_EXP 53
47870: PUSH
47871: LD_VAR 0 2
47875: ARRAY
47876: PPUSH
47877: LD_VAR 0 3
47881: PPUSH
47882: CALL_OW 3
47886: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
47887: LD_ADDR_EXP 53
47891: PUSH
47892: LD_EXP 53
47896: PPUSH
47897: LD_VAR 0 2
47901: PPUSH
47902: LD_VAR 0 4
47906: PPUSH
47907: CALL_OW 1
47911: ST_TO_ADDR
// continue ;
47912: GO 47758
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
47914: LD_EXP 37
47918: PUSH
47919: LD_VAR 0 2
47923: ARRAY
47924: PUSH
47925: LD_INT 1
47927: ARRAY
47928: PPUSH
47929: CALL_OW 255
47933: PPUSH
47934: LD_EXP 53
47938: PUSH
47939: LD_VAR 0 2
47943: ARRAY
47944: PUSH
47945: LD_VAR 0 3
47949: ARRAY
47950: PUSH
47951: LD_INT 2
47953: ARRAY
47954: PPUSH
47955: LD_EXP 53
47959: PUSH
47960: LD_VAR 0 2
47964: ARRAY
47965: PUSH
47966: LD_VAR 0 3
47970: ARRAY
47971: PUSH
47972: LD_INT 3
47974: ARRAY
47975: PPUSH
47976: LD_INT 20
47978: PPUSH
47979: CALL 11370 0 4
47983: PUSH
47984: LD_INT 4
47986: ARRAY
47987: PUSH
47988: LD_INT 0
47990: EQUAL
47991: IFFALSE 48017
// begin target := mc_crates [ i ] [ j ] ;
47993: LD_ADDR_VAR 0 5
47997: PUSH
47998: LD_EXP 53
48002: PUSH
48003: LD_VAR 0 2
48007: ARRAY
48008: PUSH
48009: LD_VAR 0 3
48013: ARRAY
48014: ST_TO_ADDR
// break ;
48015: GO 48019
// end ; end ;
48017: GO 47758
48019: POP
48020: POP
// if not target then
48021: LD_VAR 0 5
48025: NOT
48026: IFFALSE 48030
// continue ;
48028: GO 47639
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
48030: LD_ADDR_VAR 0 6
48034: PUSH
48035: LD_EXP 56
48039: PUSH
48040: LD_VAR 0 2
48044: ARRAY
48045: PPUSH
48046: LD_INT 2
48048: PUSH
48049: LD_INT 3
48051: PUSH
48052: LD_INT 58
48054: PUSH
48055: EMPTY
48056: LIST
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 61
48064: PUSH
48065: EMPTY
48066: LIST
48067: PUSH
48068: LD_INT 33
48070: PUSH
48071: LD_INT 5
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 33
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 2
48097: PUSH
48098: LD_INT 34
48100: PUSH
48101: LD_INT 32
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 34
48110: PUSH
48111: LD_INT 51
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 34
48120: PUSH
48121: LD_INT 12
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PPUSH
48138: CALL_OW 72
48142: ST_TO_ADDR
// if not cargo then
48143: LD_VAR 0 6
48147: NOT
48148: IFFALSE 48542
// begin if mc_crates_collector [ i ] < 5 then
48150: LD_EXP 54
48154: PUSH
48155: LD_VAR 0 2
48159: ARRAY
48160: PUSH
48161: LD_INT 5
48163: LESS
48164: IFFALSE 48356
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
48166: LD_ADDR_VAR 0 4
48170: PUSH
48171: LD_EXP 37
48175: PUSH
48176: LD_VAR 0 2
48180: ARRAY
48181: PUSH
48182: LD_EXP 66
48186: PUSH
48187: LD_VAR 0 2
48191: ARRAY
48192: UNION
48193: PPUSH
48194: LD_INT 2
48196: PUSH
48197: LD_INT 25
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 25
48209: PUSH
48210: LD_INT 16
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 24
48224: PUSH
48225: LD_INT 750
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PPUSH
48236: CALL_OW 72
48240: ST_TO_ADDR
// if not tmp then
48241: LD_VAR 0 4
48245: NOT
48246: IFFALSE 48250
// continue ;
48248: GO 47639
// for j in tmp do
48250: LD_ADDR_VAR 0 3
48254: PUSH
48255: LD_VAR 0 4
48259: PUSH
48260: FOR_IN
48261: IFFALSE 48354
// if GetTag ( j ) = 0 then
48263: LD_VAR 0 3
48267: PPUSH
48268: CALL_OW 110
48272: PUSH
48273: LD_INT 0
48275: EQUAL
48276: IFFALSE 48352
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
48278: LD_ADDR_EXP 54
48282: PUSH
48283: LD_EXP 54
48287: PPUSH
48288: LD_VAR 0 2
48292: PUSH
48293: LD_EXP 54
48297: PUSH
48298: LD_VAR 0 2
48302: ARRAY
48303: PUSH
48304: LD_INT 1
48306: PLUS
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PPUSH
48312: LD_VAR 0 3
48316: PPUSH
48317: CALL 10876 0 3
48321: ST_TO_ADDR
// SetTag ( j , 107 ) ;
48322: LD_VAR 0 3
48326: PPUSH
48327: LD_INT 107
48329: PPUSH
48330: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
48334: LD_EXP 54
48338: PUSH
48339: LD_VAR 0 2
48343: ARRAY
48344: PUSH
48345: LD_INT 5
48347: GREATER
48348: IFFALSE 48352
// break ;
48350: GO 48354
// end ;
48352: GO 48260
48354: POP
48355: POP
// end ; if mc_crates_collector [ i ] and target then
48356: LD_EXP 54
48360: PUSH
48361: LD_VAR 0 2
48365: ARRAY
48366: PUSH
48367: LD_VAR 0 5
48371: AND
48372: IFFALSE 48540
// begin if mc_crates_collector [ i ] < target [ 1 ] then
48374: LD_EXP 54
48378: PUSH
48379: LD_VAR 0 2
48383: ARRAY
48384: PUSH
48385: LD_VAR 0 5
48389: PUSH
48390: LD_INT 1
48392: ARRAY
48393: LESS
48394: IFFALSE 48414
// tmp := mc_crates_collector [ i ] else
48396: LD_ADDR_VAR 0 4
48400: PUSH
48401: LD_EXP 54
48405: PUSH
48406: LD_VAR 0 2
48410: ARRAY
48411: ST_TO_ADDR
48412: GO 48428
// tmp := target [ 1 ] ;
48414: LD_ADDR_VAR 0 4
48418: PUSH
48419: LD_VAR 0 5
48423: PUSH
48424: LD_INT 1
48426: ARRAY
48427: ST_TO_ADDR
// for j = 1 to tmp do
48428: LD_ADDR_VAR 0 3
48432: PUSH
48433: DOUBLE
48434: LD_INT 1
48436: DEC
48437: ST_TO_ADDR
48438: LD_VAR 0 4
48442: PUSH
48443: FOR_TO
48444: IFFALSE 48538
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
48446: LD_EXP 54
48450: PUSH
48451: LD_VAR 0 2
48455: ARRAY
48456: PUSH
48457: LD_VAR 0 3
48461: ARRAY
48462: PPUSH
48463: CALL_OW 310
48467: IFFALSE 48490
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
48469: LD_EXP 54
48473: PUSH
48474: LD_VAR 0 2
48478: ARRAY
48479: PUSH
48480: LD_VAR 0 3
48484: ARRAY
48485: PPUSH
48486: CALL_OW 122
// wait ( 3 ) ;
48490: LD_INT 3
48492: PPUSH
48493: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
48497: LD_EXP 54
48501: PUSH
48502: LD_VAR 0 2
48506: ARRAY
48507: PUSH
48508: LD_VAR 0 3
48512: ARRAY
48513: PPUSH
48514: LD_VAR 0 5
48518: PUSH
48519: LD_INT 2
48521: ARRAY
48522: PPUSH
48523: LD_VAR 0 5
48527: PUSH
48528: LD_INT 3
48530: ARRAY
48531: PPUSH
48532: CALL_OW 117
// end ;
48536: GO 48443
48538: POP
48539: POP
// end ; end else
48540: GO 49005
// begin for j in cargo do
48542: LD_ADDR_VAR 0 3
48546: PUSH
48547: LD_VAR 0 6
48551: PUSH
48552: FOR_IN
48553: IFFALSE 49003
// begin if GetTag ( j ) <> 0 then
48555: LD_VAR 0 3
48559: PPUSH
48560: CALL_OW 110
48564: PUSH
48565: LD_INT 0
48567: NONEQUAL
48568: IFFALSE 48572
// continue ;
48570: GO 48552
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
48572: LD_VAR 0 3
48576: PPUSH
48577: CALL_OW 262
48581: PUSH
48582: LD_INT 2
48584: EQUAL
48585: PUSH
48586: LD_VAR 0 3
48590: PPUSH
48591: CALL_OW 261
48595: PUSH
48596: LD_INT 15
48598: LESS
48599: AND
48600: IFFALSE 48604
// continue ;
48602: GO 48552
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
48604: LD_VAR 0 3
48608: PPUSH
48609: CALL_OW 262
48613: PUSH
48614: LD_INT 1
48616: EQUAL
48617: PUSH
48618: LD_VAR 0 3
48622: PPUSH
48623: CALL_OW 261
48627: PUSH
48628: LD_INT 10
48630: LESS
48631: AND
48632: IFFALSE 48942
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
48634: LD_ADDR_VAR 0 7
48638: PUSH
48639: LD_EXP 37
48643: PUSH
48644: LD_VAR 0 2
48648: ARRAY
48649: PPUSH
48650: LD_INT 2
48652: PUSH
48653: LD_INT 30
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 30
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: LIST
48677: PPUSH
48678: CALL_OW 72
48682: ST_TO_ADDR
// if not depot then
48683: LD_VAR 0 7
48687: NOT
48688: IFFALSE 48692
// continue ;
48690: GO 48552
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
48692: LD_VAR 0 3
48696: PPUSH
48697: LD_VAR 0 7
48701: PPUSH
48702: LD_VAR 0 3
48706: PPUSH
48707: CALL_OW 74
48711: PPUSH
48712: CALL_OW 296
48716: PUSH
48717: LD_INT 6
48719: LESS
48720: IFFALSE 48736
// SetFuel ( j , 100 ) else
48722: LD_VAR 0 3
48726: PPUSH
48727: LD_INT 100
48729: PPUSH
48730: CALL_OW 240
48734: GO 48942
// if GetFuel ( j ) = 0 then
48736: LD_VAR 0 3
48740: PPUSH
48741: CALL_OW 261
48745: PUSH
48746: LD_INT 0
48748: EQUAL
48749: IFFALSE 48942
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
48751: LD_ADDR_EXP 56
48755: PUSH
48756: LD_EXP 56
48760: PPUSH
48761: LD_VAR 0 2
48765: PPUSH
48766: LD_EXP 56
48770: PUSH
48771: LD_VAR 0 2
48775: ARRAY
48776: PUSH
48777: LD_VAR 0 3
48781: DIFF
48782: PPUSH
48783: CALL_OW 1
48787: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
48788: LD_VAR 0 3
48792: PPUSH
48793: CALL_OW 263
48797: PUSH
48798: LD_INT 1
48800: EQUAL
48801: IFFALSE 48817
// ComExitVehicle ( IsInUnit ( j ) ) ;
48803: LD_VAR 0 3
48807: PPUSH
48808: CALL_OW 310
48812: PPUSH
48813: CALL_OW 121
// if GetControl ( j ) = control_remote then
48817: LD_VAR 0 3
48821: PPUSH
48822: CALL_OW 263
48826: PUSH
48827: LD_INT 2
48829: EQUAL
48830: IFFALSE 48841
// ComUnlink ( j ) ;
48832: LD_VAR 0 3
48836: PPUSH
48837: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
48841: LD_ADDR_VAR 0 8
48845: PUSH
48846: LD_VAR 0 2
48850: PPUSH
48851: LD_INT 3
48853: PPUSH
48854: CALL 55414 0 2
48858: ST_TO_ADDR
// if fac then
48859: LD_VAR 0 8
48863: IFFALSE 48940
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
48865: LD_ADDR_VAR 0 9
48869: PUSH
48870: LD_VAR 0 8
48874: PPUSH
48875: LD_VAR 0 3
48879: PPUSH
48880: CALL_OW 265
48884: PPUSH
48885: LD_VAR 0 3
48889: PPUSH
48890: CALL_OW 262
48894: PPUSH
48895: LD_VAR 0 3
48899: PPUSH
48900: CALL_OW 263
48904: PPUSH
48905: LD_VAR 0 3
48909: PPUSH
48910: CALL_OW 264
48914: PPUSH
48915: CALL 8041 0 5
48919: ST_TO_ADDR
// if components then
48920: LD_VAR 0 9
48924: IFFALSE 48940
// MC_InsertProduceList ( i , components ) ;
48926: LD_VAR 0 2
48930: PPUSH
48931: LD_VAR 0 9
48935: PPUSH
48936: CALL 55077 0 2
// end ; continue ;
48940: GO 48552
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
48942: LD_VAR 0 3
48946: PPUSH
48947: LD_INT 1
48949: PPUSH
48950: CALL_OW 289
48954: PUSH
48955: LD_INT 100
48957: LESS
48958: PUSH
48959: LD_VAR 0 3
48963: PPUSH
48964: CALL_OW 314
48968: NOT
48969: AND
48970: IFFALSE 48999
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
48972: LD_VAR 0 3
48976: PPUSH
48977: LD_VAR 0 5
48981: PUSH
48982: LD_INT 2
48984: ARRAY
48985: PPUSH
48986: LD_VAR 0 5
48990: PUSH
48991: LD_INT 3
48993: ARRAY
48994: PPUSH
48995: CALL_OW 117
// break ;
48999: GO 49003
// end ;
49001: GO 48552
49003: POP
49004: POP
// end ; end ;
49005: GO 47639
49007: POP
49008: POP
// end ;
49009: LD_VAR 0 1
49013: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
49014: LD_INT 0
49016: PPUSH
49017: PPUSH
49018: PPUSH
49019: PPUSH
// if not mc_bases then
49020: LD_EXP 37
49024: NOT
49025: IFFALSE 49029
// exit ;
49027: GO 49190
// for i = 1 to mc_bases do
49029: LD_ADDR_VAR 0 2
49033: PUSH
49034: DOUBLE
49035: LD_INT 1
49037: DEC
49038: ST_TO_ADDR
49039: LD_EXP 37
49043: PUSH
49044: FOR_TO
49045: IFFALSE 49188
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
49047: LD_ADDR_VAR 0 4
49051: PUSH
49052: LD_EXP 56
49056: PUSH
49057: LD_VAR 0 2
49061: ARRAY
49062: PUSH
49063: LD_EXP 59
49067: PUSH
49068: LD_VAR 0 2
49072: ARRAY
49073: ADD
49074: PPUSH
49075: LD_INT 33
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PPUSH
49085: CALL_OW 72
49089: ST_TO_ADDR
// if tmp then
49090: LD_VAR 0 4
49094: IFFALSE 49186
// for j in tmp do
49096: LD_ADDR_VAR 0 3
49100: PUSH
49101: LD_VAR 0 4
49105: PUSH
49106: FOR_IN
49107: IFFALSE 49184
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
49109: LD_VAR 0 3
49113: PPUSH
49114: CALL_OW 312
49118: NOT
49119: PUSH
49120: LD_VAR 0 3
49124: PPUSH
49125: CALL_OW 256
49129: PUSH
49130: LD_INT 250
49132: GREATEREQUAL
49133: AND
49134: IFFALSE 49147
// Connect ( j ) else
49136: LD_VAR 0 3
49140: PPUSH
49141: CALL 13364 0 1
49145: GO 49182
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
49147: LD_VAR 0 3
49151: PPUSH
49152: CALL_OW 256
49156: PUSH
49157: LD_INT 250
49159: LESS
49160: PUSH
49161: LD_VAR 0 3
49165: PPUSH
49166: CALL_OW 312
49170: AND
49171: IFFALSE 49182
// ComUnlink ( j ) ;
49173: LD_VAR 0 3
49177: PPUSH
49178: CALL_OW 136
49182: GO 49106
49184: POP
49185: POP
// end ;
49186: GO 49044
49188: POP
49189: POP
// end ;
49190: LD_VAR 0 1
49194: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
49195: LD_INT 0
49197: PPUSH
49198: PPUSH
49199: PPUSH
49200: PPUSH
49201: PPUSH
// if not mc_bases then
49202: LD_EXP 37
49206: NOT
49207: IFFALSE 49211
// exit ;
49209: GO 49671
// for i = 1 to mc_bases do
49211: LD_ADDR_VAR 0 2
49215: PUSH
49216: DOUBLE
49217: LD_INT 1
49219: DEC
49220: ST_TO_ADDR
49221: LD_EXP 37
49225: PUSH
49226: FOR_TO
49227: IFFALSE 49669
// begin if not mc_produce [ i ] then
49229: LD_EXP 58
49233: PUSH
49234: LD_VAR 0 2
49238: ARRAY
49239: NOT
49240: IFFALSE 49244
// continue ;
49242: GO 49226
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
49244: LD_ADDR_VAR 0 5
49248: PUSH
49249: LD_EXP 37
49253: PUSH
49254: LD_VAR 0 2
49258: ARRAY
49259: PPUSH
49260: LD_INT 30
49262: PUSH
49263: LD_INT 3
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PPUSH
49270: CALL_OW 72
49274: ST_TO_ADDR
// if not fac then
49275: LD_VAR 0 5
49279: NOT
49280: IFFALSE 49284
// continue ;
49282: GO 49226
// for j in fac do
49284: LD_ADDR_VAR 0 3
49288: PUSH
49289: LD_VAR 0 5
49293: PUSH
49294: FOR_IN
49295: IFFALSE 49665
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
49297: LD_VAR 0 3
49301: PPUSH
49302: CALL_OW 461
49306: PUSH
49307: LD_INT 2
49309: NONEQUAL
49310: PUSH
49311: LD_VAR 0 3
49315: PPUSH
49316: LD_INT 15
49318: PPUSH
49319: CALL 13067 0 2
49323: PUSH
49324: LD_INT 4
49326: ARRAY
49327: OR
49328: PUSH
49329: LD_VAR 0 3
49333: PPUSH
49334: CALL_OW 313
49338: PUSH
49339: LD_INT 0
49341: EQUAL
49342: OR
49343: IFFALSE 49347
// continue ;
49345: GO 49294
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
49347: LD_VAR 0 3
49351: PPUSH
49352: LD_EXP 58
49356: PUSH
49357: LD_VAR 0 2
49361: ARRAY
49362: PUSH
49363: LD_INT 1
49365: ARRAY
49366: PUSH
49367: LD_INT 1
49369: ARRAY
49370: PPUSH
49371: LD_EXP 58
49375: PUSH
49376: LD_VAR 0 2
49380: ARRAY
49381: PUSH
49382: LD_INT 1
49384: ARRAY
49385: PUSH
49386: LD_INT 2
49388: ARRAY
49389: PPUSH
49390: LD_EXP 58
49394: PUSH
49395: LD_VAR 0 2
49399: ARRAY
49400: PUSH
49401: LD_INT 1
49403: ARRAY
49404: PUSH
49405: LD_INT 3
49407: ARRAY
49408: PPUSH
49409: LD_EXP 58
49413: PUSH
49414: LD_VAR 0 2
49418: ARRAY
49419: PUSH
49420: LD_INT 1
49422: ARRAY
49423: PUSH
49424: LD_INT 4
49426: ARRAY
49427: PPUSH
49428: CALL_OW 448
49432: PUSH
49433: LD_VAR 0 3
49437: PPUSH
49438: LD_EXP 58
49442: PUSH
49443: LD_VAR 0 2
49447: ARRAY
49448: PUSH
49449: LD_INT 1
49451: ARRAY
49452: PUSH
49453: LD_INT 1
49455: ARRAY
49456: PUSH
49457: LD_EXP 58
49461: PUSH
49462: LD_VAR 0 2
49466: ARRAY
49467: PUSH
49468: LD_INT 1
49470: ARRAY
49471: PUSH
49472: LD_INT 2
49474: ARRAY
49475: PUSH
49476: LD_EXP 58
49480: PUSH
49481: LD_VAR 0 2
49485: ARRAY
49486: PUSH
49487: LD_INT 1
49489: ARRAY
49490: PUSH
49491: LD_INT 3
49493: ARRAY
49494: PUSH
49495: LD_EXP 58
49499: PUSH
49500: LD_VAR 0 2
49504: ARRAY
49505: PUSH
49506: LD_INT 1
49508: ARRAY
49509: PUSH
49510: LD_INT 4
49512: ARRAY
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: PPUSH
49520: CALL 16569 0 2
49524: AND
49525: IFFALSE 49663
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
49527: LD_VAR 0 3
49531: PPUSH
49532: LD_EXP 58
49536: PUSH
49537: LD_VAR 0 2
49541: ARRAY
49542: PUSH
49543: LD_INT 1
49545: ARRAY
49546: PUSH
49547: LD_INT 1
49549: ARRAY
49550: PPUSH
49551: LD_EXP 58
49555: PUSH
49556: LD_VAR 0 2
49560: ARRAY
49561: PUSH
49562: LD_INT 1
49564: ARRAY
49565: PUSH
49566: LD_INT 2
49568: ARRAY
49569: PPUSH
49570: LD_EXP 58
49574: PUSH
49575: LD_VAR 0 2
49579: ARRAY
49580: PUSH
49581: LD_INT 1
49583: ARRAY
49584: PUSH
49585: LD_INT 3
49587: ARRAY
49588: PPUSH
49589: LD_EXP 58
49593: PUSH
49594: LD_VAR 0 2
49598: ARRAY
49599: PUSH
49600: LD_INT 1
49602: ARRAY
49603: PUSH
49604: LD_INT 4
49606: ARRAY
49607: PPUSH
49608: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
49612: LD_ADDR_VAR 0 4
49616: PUSH
49617: LD_EXP 58
49621: PUSH
49622: LD_VAR 0 2
49626: ARRAY
49627: PPUSH
49628: LD_INT 1
49630: PPUSH
49631: CALL_OW 3
49635: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
49636: LD_ADDR_EXP 58
49640: PUSH
49641: LD_EXP 58
49645: PPUSH
49646: LD_VAR 0 2
49650: PPUSH
49651: LD_VAR 0 4
49655: PPUSH
49656: CALL_OW 1
49660: ST_TO_ADDR
// break ;
49661: GO 49665
// end ; end ;
49663: GO 49294
49665: POP
49666: POP
// end ;
49667: GO 49226
49669: POP
49670: POP
// end ;
49671: LD_VAR 0 1
49675: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
49676: LD_INT 0
49678: PPUSH
49679: PPUSH
49680: PPUSH
// if not mc_bases then
49681: LD_EXP 37
49685: NOT
49686: IFFALSE 49690
// exit ;
49688: GO 49779
// for i = 1 to mc_bases do
49690: LD_ADDR_VAR 0 2
49694: PUSH
49695: DOUBLE
49696: LD_INT 1
49698: DEC
49699: ST_TO_ADDR
49700: LD_EXP 37
49704: PUSH
49705: FOR_TO
49706: IFFALSE 49777
// begin if mc_attack [ i ] then
49708: LD_EXP 57
49712: PUSH
49713: LD_VAR 0 2
49717: ARRAY
49718: IFFALSE 49775
// begin tmp := mc_attack [ i ] [ 1 ] ;
49720: LD_ADDR_VAR 0 3
49724: PUSH
49725: LD_EXP 57
49729: PUSH
49730: LD_VAR 0 2
49734: ARRAY
49735: PUSH
49736: LD_INT 1
49738: ARRAY
49739: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
49740: LD_ADDR_EXP 57
49744: PUSH
49745: LD_EXP 57
49749: PPUSH
49750: LD_VAR 0 2
49754: PPUSH
49755: EMPTY
49756: PPUSH
49757: CALL_OW 1
49761: ST_TO_ADDR
// Attack ( tmp ) ;
49762: LD_VAR 0 3
49766: PPUSH
49767: CALL 38216 0 1
// exit ;
49771: POP
49772: POP
49773: GO 49779
// end ; end ;
49775: GO 49705
49777: POP
49778: POP
// end ;
49779: LD_VAR 0 1
49783: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
49784: LD_INT 0
49786: PPUSH
49787: PPUSH
49788: PPUSH
49789: PPUSH
49790: PPUSH
49791: PPUSH
49792: PPUSH
// if not mc_bases then
49793: LD_EXP 37
49797: NOT
49798: IFFALSE 49802
// exit ;
49800: GO 50147
// class := AllowSpecClass ( mc_defender [ 1 ] ) ;
49802: LD_ADDR_VAR 0 7
49806: PUSH
49807: LD_EXP 59
49811: PUSH
49812: LD_INT 1
49814: ARRAY
49815: PPUSH
49816: CALL 7381 0 1
49820: ST_TO_ADDR
// for i = 1 to mc_bases do
49821: LD_ADDR_VAR 0 2
49825: PUSH
49826: DOUBLE
49827: LD_INT 1
49829: DEC
49830: ST_TO_ADDR
49831: LD_EXP 37
49835: PUSH
49836: FOR_TO
49837: IFFALSE 50145
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ 1 ] ) , mc_scan_area [ i ] ) ) ;
49839: LD_ADDR_EXP 60
49843: PUSH
49844: LD_EXP 60
49848: PPUSH
49849: LD_VAR 0 2
49853: PPUSH
49854: LD_EXP 37
49858: PUSH
49859: LD_INT 1
49861: ARRAY
49862: PPUSH
49863: CALL_OW 255
49867: PPUSH
49868: LD_EXP 62
49872: PUSH
49873: LD_VAR 0 2
49877: ARRAY
49878: PPUSH
49879: CALL 5839 0 2
49883: PPUSH
49884: CALL_OW 1
49888: ST_TO_ADDR
// if not mc_scan [ i ] then
49889: LD_EXP 60
49893: PUSH
49894: LD_VAR 0 2
49898: ARRAY
49899: NOT
49900: IFFALSE 50052
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
49902: LD_ADDR_VAR 0 4
49906: PUSH
49907: LD_EXP 37
49911: PUSH
49912: LD_VAR 0 2
49916: ARRAY
49917: PPUSH
49918: LD_INT 2
49920: PUSH
49921: LD_INT 25
49923: PUSH
49924: LD_INT 5
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 25
49933: PUSH
49934: LD_INT 8
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 25
49943: PUSH
49944: LD_INT 9
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: PPUSH
49957: CALL_OW 72
49961: ST_TO_ADDR
// if not tmp then
49962: LD_VAR 0 4
49966: NOT
49967: IFFALSE 49971
// continue ;
49969: GO 49836
// for j in tmp do
49971: LD_ADDR_VAR 0 3
49975: PUSH
49976: LD_VAR 0 4
49980: PUSH
49981: FOR_IN
49982: IFFALSE 50050
// if GetBType ( IsInUnit ( j ) ) in [ b_barracks ] and GetClass ( j ) = 1 and not MineOfUnit ( j ) then
49984: LD_VAR 0 3
49988: PPUSH
49989: CALL_OW 310
49993: PPUSH
49994: CALL_OW 266
49998: PUSH
49999: LD_INT 5
50001: PUSH
50002: EMPTY
50003: LIST
50004: IN
50005: PUSH
50006: LD_VAR 0 3
50010: PPUSH
50011: CALL_OW 257
50015: PUSH
50016: LD_INT 1
50018: EQUAL
50019: AND
50020: PUSH
50021: LD_VAR 0 3
50025: PPUSH
50026: CALL_OW 459
50030: NOT
50031: AND
50032: IFFALSE 50048
// ComChangeProfession ( j , class ) ;
50034: LD_VAR 0 3
50038: PPUSH
50039: LD_VAR 0 7
50043: PPUSH
50044: CALL_OW 123
50048: GO 49981
50050: POP
50051: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
50052: LD_EXP 60
50056: PUSH
50057: LD_VAR 0 2
50061: ARRAY
50062: PUSH
50063: LD_EXP 59
50067: PUSH
50068: LD_VAR 0 2
50072: ARRAY
50073: AND
50074: IFFALSE 50143
// begin tmp := mc_defender [ i ] ;
50076: LD_ADDR_VAR 0 4
50080: PUSH
50081: LD_EXP 59
50085: PUSH
50086: LD_VAR 0 2
50090: ARRAY
50091: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
50092: LD_ADDR_EXP 59
50096: PUSH
50097: LD_EXP 59
50101: PPUSH
50102: LD_VAR 0 2
50106: PPUSH
50107: EMPTY
50108: PPUSH
50109: CALL_OW 1
50113: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
50114: LD_VAR 0 2
50118: PPUSH
50119: LD_VAR 0 4
50123: PPUSH
50124: LD_EXP 60
50128: PUSH
50129: LD_VAR 0 2
50133: ARRAY
50134: PPUSH
50135: CALL 5874 0 3
// exit ;
50139: POP
50140: POP
50141: GO 50147
// end ; end ;
50143: GO 49836
50145: POP
50146: POP
// end ;
50147: LD_VAR 0 1
50151: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tech_temp , tmp2 ; begin
50152: LD_INT 0
50154: PPUSH
50155: PPUSH
50156: PPUSH
50157: PPUSH
50158: PPUSH
50159: PPUSH
50160: PPUSH
50161: PPUSH
50162: PPUSH
50163: PPUSH
// if not mc_bases then
50164: LD_EXP 37
50168: NOT
50169: IFFALSE 50173
// exit ;
50171: GO 51072
// for i = 1 to mc_bases do
50173: LD_ADDR_VAR 0 2
50177: PUSH
50178: DOUBLE
50179: LD_INT 1
50181: DEC
50182: ST_TO_ADDR
50183: LD_EXP 37
50187: PUSH
50188: FOR_TO
50189: IFFALSE 51070
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
50191: LD_ADDR_VAR 0 6
50195: PUSH
50196: LD_EXP 37
50200: PUSH
50201: LD_VAR 0 2
50205: ARRAY
50206: PPUSH
50207: LD_INT 2
50209: PUSH
50210: LD_INT 30
50212: PUSH
50213: LD_INT 6
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 30
50222: PUSH
50223: LD_INT 7
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 30
50232: PUSH
50233: LD_INT 8
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: PPUSH
50246: CALL_OW 72
50250: ST_TO_ADDR
// if not tmp then
50251: LD_VAR 0 6
50255: NOT
50256: IFFALSE 50260
// continue ;
50258: GO 50188
// for j in tmp do
50260: LD_ADDR_VAR 0 3
50264: PUSH
50265: LD_VAR 0 6
50269: PUSH
50270: FOR_IN
50271: IFFALSE 51066
// begin side := GetSide ( j ) ;
50273: LD_ADDR_VAR 0 4
50277: PUSH
50278: LD_VAR 0 3
50282: PPUSH
50283: CALL_OW 255
50287: ST_TO_ADDR
// if not mc_tech [ side ] then
50288: LD_EXP 64
50292: PUSH
50293: LD_VAR 0 4
50297: ARRAY
50298: NOT
50299: IFFALSE 50303
// continue ;
50301: GO 50270
// if BuildingStatus ( j ) = bs_idle then
50303: LD_VAR 0 3
50307: PPUSH
50308: CALL_OW 461
50312: PUSH
50313: LD_INT 2
50315: EQUAL
50316: IFFALSE 50373
// for t in mc_tech [ side ] do
50318: LD_ADDR_VAR 0 5
50322: PUSH
50323: LD_EXP 64
50327: PUSH
50328: LD_VAR 0 4
50332: ARRAY
50333: PUSH
50334: FOR_IN
50335: IFFALSE 50371
// if CanBeResearched ( j , t ) then
50337: LD_VAR 0 3
50341: PPUSH
50342: LD_VAR 0 5
50346: PPUSH
50347: CALL_OW 430
50351: IFFALSE 50369
// begin ComResearch ( j , t ) ;
50353: LD_VAR 0 3
50357: PPUSH
50358: LD_VAR 0 5
50362: PPUSH
50363: CALL_OW 124
// break ;
50367: GO 50371
// end ;
50369: GO 50334
50371: POP
50372: POP
// if BuildingStatus ( j ) = bs_need_ape then
50373: LD_VAR 0 3
50377: PPUSH
50378: CALL_OW 461
50382: PUSH
50383: LD_INT 10
50385: EQUAL
50386: IFFALSE 50901
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
50388: LD_EXP 66
50392: PUSH
50393: LD_VAR 0 2
50397: ARRAY
50398: NOT
50399: PUSH
50400: LD_EXP 67
50404: PUSH
50405: LD_VAR 0 2
50409: ARRAY
50410: NOT
50411: AND
50412: PUSH
50413: LD_EXP 64
50417: PUSH
50418: LD_VAR 0 4
50422: ARRAY
50423: PUSH
50424: LD_INT 1
50426: GREATER
50427: AND
50428: IFFALSE 50504
// begin ComCancel ( j ) ;
50430: LD_VAR 0 3
50434: PPUSH
50435: CALL_OW 127
// tech_temp := Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ;
50439: LD_ADDR_VAR 0 9
50443: PUSH
50444: LD_EXP 64
50448: PUSH
50449: LD_VAR 0 4
50453: ARRAY
50454: PPUSH
50455: LD_EXP 64
50459: PUSH
50460: LD_VAR 0 4
50464: ARRAY
50465: PPUSH
50466: LD_INT 1
50468: PPUSH
50469: LD_INT 0
50471: PPUSH
50472: CALL 9859 0 4
50476: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , tech_temp ) ;
50477: LD_ADDR_EXP 64
50481: PUSH
50482: LD_EXP 64
50486: PPUSH
50487: LD_VAR 0 4
50491: PPUSH
50492: LD_VAR 0 9
50496: PPUSH
50497: CALL_OW 1
50501: ST_TO_ADDR
// continue ;
50502: GO 50270
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
50504: LD_EXP 66
50508: PUSH
50509: LD_VAR 0 2
50513: ARRAY
50514: PUSH
50515: LD_EXP 67
50519: PUSH
50520: LD_VAR 0 2
50524: ARRAY
50525: NOT
50526: AND
50527: IFFALSE 50654
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
50529: LD_ADDR_EXP 67
50533: PUSH
50534: LD_EXP 67
50538: PPUSH
50539: LD_VAR 0 2
50543: PUSH
50544: LD_EXP 67
50548: PUSH
50549: LD_VAR 0 2
50553: ARRAY
50554: PUSH
50555: LD_INT 1
50557: PLUS
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PPUSH
50563: LD_EXP 66
50567: PUSH
50568: LD_VAR 0 2
50572: ARRAY
50573: PUSH
50574: LD_INT 1
50576: ARRAY
50577: PPUSH
50578: CALL 10876 0 3
50582: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
50583: LD_EXP 66
50587: PUSH
50588: LD_VAR 0 2
50592: ARRAY
50593: PUSH
50594: LD_INT 1
50596: ARRAY
50597: PPUSH
50598: LD_INT 112
50600: PPUSH
50601: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
50605: LD_ADDR_VAR 0 10
50609: PUSH
50610: LD_EXP 66
50614: PUSH
50615: LD_VAR 0 2
50619: ARRAY
50620: PPUSH
50621: LD_INT 1
50623: PPUSH
50624: CALL_OW 3
50628: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
50629: LD_ADDR_EXP 66
50633: PUSH
50634: LD_EXP 66
50638: PPUSH
50639: LD_VAR 0 2
50643: PPUSH
50644: LD_VAR 0 10
50648: PPUSH
50649: CALL_OW 1
50653: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
50654: LD_EXP 66
50658: PUSH
50659: LD_VAR 0 2
50663: ARRAY
50664: PUSH
50665: LD_EXP 67
50669: PUSH
50670: LD_VAR 0 2
50674: ARRAY
50675: AND
50676: PUSH
50677: LD_EXP 67
50681: PUSH
50682: LD_VAR 0 2
50686: ARRAY
50687: PUSH
50688: LD_INT 1
50690: ARRAY
50691: PPUSH
50692: CALL_OW 310
50696: NOT
50697: AND
50698: PUSH
50699: LD_VAR 0 3
50703: PPUSH
50704: CALL_OW 313
50708: PUSH
50709: LD_INT 6
50711: EQUAL
50712: AND
50713: IFFALSE 50769
// begin tmp2 := UnitsInside ( j ) ;
50715: LD_ADDR_VAR 0 10
50719: PUSH
50720: LD_VAR 0 3
50724: PPUSH
50725: CALL_OW 313
50729: ST_TO_ADDR
// if tmp2 = 6 then
50730: LD_VAR 0 10
50734: PUSH
50735: LD_INT 6
50737: EQUAL
50738: IFFALSE 50769
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
50740: LD_VAR 0 10
50744: PUSH
50745: LD_INT 1
50747: ARRAY
50748: PPUSH
50749: LD_INT 112
50751: PPUSH
50752: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
50756: LD_VAR 0 10
50760: PUSH
50761: LD_INT 1
50763: ARRAY
50764: PPUSH
50765: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) in mc_lab [ i ] then
50769: LD_EXP 67
50773: PUSH
50774: LD_VAR 0 2
50778: ARRAY
50779: PUSH
50780: LD_EXP 67
50784: PUSH
50785: LD_VAR 0 2
50789: ARRAY
50790: PUSH
50791: LD_INT 1
50793: ARRAY
50794: PPUSH
50795: CALL_OW 314
50799: NOT
50800: AND
50801: PUSH
50802: LD_EXP 67
50806: PUSH
50807: LD_VAR 0 2
50811: ARRAY
50812: PUSH
50813: LD_INT 1
50815: ARRAY
50816: PPUSH
50817: CALL_OW 310
50821: PUSH
50822: LD_EXP 70
50826: PUSH
50827: LD_VAR 0 2
50831: ARRAY
50832: IN
50833: NOT
50834: AND
50835: IFFALSE 50901
// begin if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
50837: LD_EXP 67
50841: PUSH
50842: LD_VAR 0 2
50846: ARRAY
50847: PUSH
50848: LD_INT 1
50850: ARRAY
50851: PPUSH
50852: CALL_OW 310
50856: IFFALSE 50877
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
50858: LD_EXP 67
50862: PUSH
50863: LD_VAR 0 2
50867: ARRAY
50868: PUSH
50869: LD_INT 1
50871: ARRAY
50872: PPUSH
50873: CALL_OW 122
// AddComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
50877: LD_EXP 67
50881: PUSH
50882: LD_VAR 0 2
50886: ARRAY
50887: PUSH
50888: LD_INT 1
50890: ARRAY
50891: PPUSH
50892: LD_VAR 0 3
50896: PPUSH
50897: CALL_OW 180
// end ; end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
50901: LD_VAR 0 3
50905: PPUSH
50906: CALL_OW 461
50910: PUSH
50911: LD_INT 6
50913: EQUAL
50914: PUSH
50915: LD_VAR 0 6
50919: PUSH
50920: LD_INT 1
50922: GREATER
50923: AND
50924: IFFALSE 51064
// begin sci := [ ] ;
50926: LD_ADDR_VAR 0 8
50930: PUSH
50931: EMPTY
50932: ST_TO_ADDR
// for x in tmp diff j do
50933: LD_ADDR_VAR 0 7
50937: PUSH
50938: LD_VAR 0 6
50942: PUSH
50943: LD_VAR 0 3
50947: DIFF
50948: PUSH
50949: FOR_IN
50950: IFFALSE 50990
// begin if BuildingStatus ( x ) = bs_idle then
50952: LD_VAR 0 7
50956: PPUSH
50957: CALL_OW 461
50961: PUSH
50962: LD_INT 2
50964: EQUAL
50965: IFFALSE 50988
// sci := sci ^ UnitsInside ( x ) ;
50967: LD_ADDR_VAR 0 8
50971: PUSH
50972: LD_VAR 0 8
50976: PUSH
50977: LD_VAR 0 7
50981: PPUSH
50982: CALL_OW 313
50986: ADD
50987: ST_TO_ADDR
// end ;
50988: GO 50949
50990: POP
50991: POP
// if not sci then
50992: LD_VAR 0 8
50996: NOT
50997: IFFALSE 51001
// continue ;
50999: GO 50270
// for x in sci do
51001: LD_ADDR_VAR 0 7
51005: PUSH
51006: LD_VAR 0 8
51010: PUSH
51011: FOR_IN
51012: IFFALSE 51062
// if IsInUnit ( x ) and not HasTask ( x ) then
51014: LD_VAR 0 7
51018: PPUSH
51019: CALL_OW 310
51023: PUSH
51024: LD_VAR 0 7
51028: PPUSH
51029: CALL_OW 314
51033: NOT
51034: AND
51035: IFFALSE 51060
// begin ComExitBuilding ( x ) ;
51037: LD_VAR 0 7
51041: PPUSH
51042: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
51046: LD_VAR 0 7
51050: PPUSH
51051: LD_VAR 0 3
51055: PPUSH
51056: CALL_OW 180
// end ;
51060: GO 51011
51062: POP
51063: POP
// end ; end ;
51064: GO 50270
51066: POP
51067: POP
// end ;
51068: GO 50188
51070: POP
51071: POP
// end ;
51072: LD_VAR 0 1
51076: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
51077: LD_INT 0
51079: PPUSH
51080: PPUSH
51081: PPUSH
51082: PPUSH
51083: PPUSH
51084: PPUSH
// if not mc_bases then
51085: LD_EXP 37
51089: NOT
51090: IFFALSE 51094
// exit ;
51092: GO 51333
// for i = 1 to 8 do
51094: LD_ADDR_VAR 0 2
51098: PUSH
51099: DOUBLE
51100: LD_INT 1
51102: DEC
51103: ST_TO_ADDR
51104: LD_INT 8
51106: PUSH
51107: FOR_TO
51108: IFFALSE 51134
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
51110: LD_ADDR_EXP 64
51114: PUSH
51115: LD_EXP 64
51119: PPUSH
51120: LD_VAR 0 2
51124: PPUSH
51125: EMPTY
51126: PPUSH
51127: CALL_OW 1
51131: ST_TO_ADDR
51132: GO 51107
51134: POP
51135: POP
// tmp := [ ] ;
51136: LD_ADDR_VAR 0 5
51140: PUSH
51141: EMPTY
51142: ST_TO_ADDR
// for i = 1 to mc_sides do
51143: LD_ADDR_VAR 0 2
51147: PUSH
51148: DOUBLE
51149: LD_INT 1
51151: DEC
51152: ST_TO_ADDR
51153: LD_EXP 63
51157: PUSH
51158: FOR_TO
51159: IFFALSE 51217
// if not mc_sides [ i ] in tmp then
51161: LD_EXP 63
51165: PUSH
51166: LD_VAR 0 2
51170: ARRAY
51171: PUSH
51172: LD_VAR 0 5
51176: IN
51177: NOT
51178: IFFALSE 51215
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
51180: LD_ADDR_VAR 0 5
51184: PUSH
51185: LD_VAR 0 5
51189: PPUSH
51190: LD_VAR 0 5
51194: PUSH
51195: LD_INT 1
51197: PLUS
51198: PPUSH
51199: LD_EXP 63
51203: PUSH
51204: LD_VAR 0 2
51208: ARRAY
51209: PPUSH
51210: CALL_OW 2
51214: ST_TO_ADDR
51215: GO 51158
51217: POP
51218: POP
// if not tmp then
51219: LD_VAR 0 5
51223: NOT
51224: IFFALSE 51228
// exit ;
51226: GO 51333
// for j in tmp do
51228: LD_ADDR_VAR 0 3
51232: PUSH
51233: LD_VAR 0 5
51237: PUSH
51238: FOR_IN
51239: IFFALSE 51331
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
51241: LD_ADDR_VAR 0 6
51245: PUSH
51246: LD_INT 22
51248: PUSH
51249: LD_VAR 0 3
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PPUSH
51258: CALL_OW 69
51262: ST_TO_ADDR
// if not un then
51263: LD_VAR 0 6
51267: NOT
51268: IFFALSE 51272
// continue ;
51270: GO 51238
// nation := GetNation ( un [ 1 ] ) ;
51272: LD_ADDR_VAR 0 4
51276: PUSH
51277: LD_VAR 0 6
51281: PUSH
51282: LD_INT 1
51284: ARRAY
51285: PPUSH
51286: CALL_OW 248
51290: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
51291: LD_ADDR_EXP 64
51295: PUSH
51296: LD_EXP 64
51300: PPUSH
51301: LD_VAR 0 3
51305: PPUSH
51306: LD_VAR 0 3
51310: PPUSH
51311: LD_VAR 0 4
51315: PPUSH
51316: LD_INT 1
51318: PPUSH
51319: CALL 4401 0 3
51323: PPUSH
51324: CALL_OW 1
51328: ST_TO_ADDR
// end ;
51329: GO 51238
51331: POP
51332: POP
// end ;
51333: LD_VAR 0 1
51337: RET
// export function MC_InitSides ( ) ; var i ; begin
51338: LD_INT 0
51340: PPUSH
51341: PPUSH
// if not mc_bases then
51342: LD_EXP 37
51346: NOT
51347: IFFALSE 51351
// exit ;
51349: GO 51425
// for i = 1 to mc_bases do
51351: LD_ADDR_VAR 0 2
51355: PUSH
51356: DOUBLE
51357: LD_INT 1
51359: DEC
51360: ST_TO_ADDR
51361: LD_EXP 37
51365: PUSH
51366: FOR_TO
51367: IFFALSE 51423
// if mc_bases [ i ] then
51369: LD_EXP 37
51373: PUSH
51374: LD_VAR 0 2
51378: ARRAY
51379: IFFALSE 51421
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
51381: LD_ADDR_EXP 63
51385: PUSH
51386: LD_EXP 63
51390: PPUSH
51391: LD_VAR 0 2
51395: PPUSH
51396: LD_EXP 37
51400: PUSH
51401: LD_VAR 0 2
51405: ARRAY
51406: PUSH
51407: LD_INT 1
51409: ARRAY
51410: PPUSH
51411: CALL_OW 255
51415: PPUSH
51416: CALL_OW 1
51420: ST_TO_ADDR
51421: GO 51366
51423: POP
51424: POP
// end ;
51425: LD_VAR 0 1
51429: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
51430: LD_INT 0
51432: PPUSH
51433: PPUSH
51434: PPUSH
51435: PPUSH
51436: PPUSH
51437: PPUSH
51438: PPUSH
51439: PPUSH
// if not mc_bases then
51440: LD_EXP 37
51444: NOT
51445: IFFALSE 51449
// exit ;
51447: GO 52094
// for i = 1 to mc_bases do
51449: LD_ADDR_VAR 0 2
51453: PUSH
51454: DOUBLE
51455: LD_INT 1
51457: DEC
51458: ST_TO_ADDR
51459: LD_EXP 37
51463: PUSH
51464: FOR_TO
51465: IFFALSE 52092
// begin if not mc_bases [ i ] then
51467: LD_EXP 37
51471: PUSH
51472: LD_VAR 0 2
51476: ARRAY
51477: NOT
51478: IFFALSE 51482
// continue ;
51480: GO 51464
// if mc_scan [ i ] then
51482: LD_EXP 60
51486: PUSH
51487: LD_VAR 0 2
51491: ARRAY
51492: IFFALSE 51518
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
51494: LD_ADDR_EXP 49
51498: PUSH
51499: LD_EXP 49
51503: PPUSH
51504: LD_VAR 0 2
51508: PPUSH
51509: EMPTY
51510: PPUSH
51511: CALL_OW 1
51515: ST_TO_ADDR
// continue ;
51516: GO 51464
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
51518: LD_ADDR_VAR 0 5
51522: PUSH
51523: LD_EXP 37
51527: PUSH
51528: LD_VAR 0 2
51532: ARRAY
51533: PUSH
51534: LD_INT 1
51536: ARRAY
51537: PPUSH
51538: CALL_OW 255
51542: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
51543: LD_ADDR_VAR 0 6
51547: PUSH
51548: LD_EXP 37
51552: PUSH
51553: LD_VAR 0 2
51557: ARRAY
51558: PPUSH
51559: LD_INT 30
51561: PUSH
51562: LD_INT 3
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PPUSH
51569: CALL_OW 72
51573: ST_TO_ADDR
// if not fac then
51574: LD_VAR 0 6
51578: NOT
51579: IFFALSE 51630
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
51581: LD_ADDR_VAR 0 6
51585: PUSH
51586: LD_EXP 37
51590: PUSH
51591: LD_VAR 0 2
51595: ARRAY
51596: PPUSH
51597: LD_INT 2
51599: PUSH
51600: LD_INT 30
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 30
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: LIST
51624: PPUSH
51625: CALL_OW 72
51629: ST_TO_ADDR
// if not fac then
51630: LD_VAR 0 6
51634: NOT
51635: IFFALSE 51639
// continue ;
51637: GO 51464
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
51639: LD_ADDR_VAR 0 7
51643: PUSH
51644: LD_EXP 61
51648: PUSH
51649: LD_VAR 0 2
51653: ARRAY
51654: PPUSH
51655: LD_INT 22
51657: PUSH
51658: LD_VAR 0 5
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 21
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: PUSH
51680: LD_INT 24
51682: PUSH
51683: LD_INT 1000
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: LIST
51698: PPUSH
51699: CALL_OW 70
51703: PUSH
51704: LD_INT 22
51706: PUSH
51707: LD_VAR 0 5
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 91
51718: PUSH
51719: LD_VAR 0 6
51723: PUSH
51724: LD_INT 1
51726: ARRAY
51727: PUSH
51728: LD_INT 25
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 21
51738: PUSH
51739: LD_INT 2
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 3
51748: PUSH
51749: LD_INT 24
51751: PUSH
51752: LD_INT 1000
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: PPUSH
51769: CALL_OW 69
51773: UNION
51774: ST_TO_ADDR
// if not vehs then
51775: LD_VAR 0 7
51779: NOT
51780: IFFALSE 51806
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
51782: LD_ADDR_EXP 49
51786: PUSH
51787: LD_EXP 49
51791: PPUSH
51792: LD_VAR 0 2
51796: PPUSH
51797: EMPTY
51798: PPUSH
51799: CALL_OW 1
51803: ST_TO_ADDR
// continue ;
51804: GO 51464
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
51806: LD_ADDR_VAR 0 8
51810: PUSH
51811: LD_EXP 37
51815: PUSH
51816: LD_VAR 0 2
51820: ARRAY
51821: PPUSH
51822: LD_INT 30
51824: PUSH
51825: LD_INT 3
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PPUSH
51832: CALL_OW 72
51836: ST_TO_ADDR
// if tmp then
51837: LD_VAR 0 8
51841: IFFALSE 51944
// begin for j in tmp do
51843: LD_ADDR_VAR 0 3
51847: PUSH
51848: LD_VAR 0 8
51852: PUSH
51853: FOR_IN
51854: IFFALSE 51942
// for k in UnitsInside ( j ) do
51856: LD_ADDR_VAR 0 4
51860: PUSH
51861: LD_VAR 0 3
51865: PPUSH
51866: CALL_OW 313
51870: PUSH
51871: FOR_IN
51872: IFFALSE 51938
// if k then
51874: LD_VAR 0 4
51878: IFFALSE 51936
// if not k in mc_repair_vehicle [ i ] then
51880: LD_VAR 0 4
51884: PUSH
51885: LD_EXP 49
51889: PUSH
51890: LD_VAR 0 2
51894: ARRAY
51895: IN
51896: NOT
51897: IFFALSE 51936
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
51899: LD_ADDR_EXP 49
51903: PUSH
51904: LD_EXP 49
51908: PPUSH
51909: LD_VAR 0 2
51913: PPUSH
51914: LD_EXP 49
51918: PUSH
51919: LD_VAR 0 2
51923: ARRAY
51924: PUSH
51925: LD_VAR 0 4
51929: UNION
51930: PPUSH
51931: CALL_OW 1
51935: ST_TO_ADDR
51936: GO 51871
51938: POP
51939: POP
51940: GO 51853
51942: POP
51943: POP
// end ; if not mc_repair_vehicle [ i ] then
51944: LD_EXP 49
51948: PUSH
51949: LD_VAR 0 2
51953: ARRAY
51954: NOT
51955: IFFALSE 51959
// continue ;
51957: GO 51464
// for j in mc_repair_vehicle [ i ] do
51959: LD_ADDR_VAR 0 3
51963: PUSH
51964: LD_EXP 49
51968: PUSH
51969: LD_VAR 0 2
51973: ARRAY
51974: PUSH
51975: FOR_IN
51976: IFFALSE 52088
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
51978: LD_VAR 0 3
51982: PPUSH
51983: CALL_OW 311
51987: NOT
51988: PUSH
51989: LD_VAR 0 3
51993: PUSH
51994: LD_EXP 40
51998: PUSH
51999: LD_VAR 0 2
52003: ARRAY
52004: PUSH
52005: LD_INT 1
52007: ARRAY
52008: IN
52009: NOT
52010: AND
52011: PUSH
52012: LD_VAR 0 3
52016: PUSH
52017: LD_EXP 40
52021: PUSH
52022: LD_VAR 0 2
52026: ARRAY
52027: PUSH
52028: LD_INT 2
52030: ARRAY
52031: IN
52032: NOT
52033: AND
52034: IFFALSE 52086
// begin if IsInUnit ( j ) then
52036: LD_VAR 0 3
52040: PPUSH
52041: CALL_OW 310
52045: IFFALSE 52056
// ComExitBuilding ( j ) ;
52047: LD_VAR 0 3
52051: PPUSH
52052: CALL_OW 122
// if not HasTask ( j ) then
52056: LD_VAR 0 3
52060: PPUSH
52061: CALL_OW 314
52065: NOT
52066: IFFALSE 52086
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
52068: LD_VAR 0 3
52072: PPUSH
52073: LD_VAR 0 7
52077: PUSH
52078: LD_INT 1
52080: ARRAY
52081: PPUSH
52082: CALL_OW 189
// end ; end ;
52086: GO 51975
52088: POP
52089: POP
// end ;
52090: GO 51464
52092: POP
52093: POP
// end ;
52094: LD_VAR 0 1
52098: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp ; begin
52099: LD_INT 0
52101: PPUSH
52102: PPUSH
52103: PPUSH
52104: PPUSH
52105: PPUSH
52106: PPUSH
52107: PPUSH
52108: PPUSH
// if not mc_bases then
52109: LD_EXP 37
52113: NOT
52114: IFFALSE 52118
// exit ;
52116: GO 52651
// for i = 1 to mc_bases do
52118: LD_ADDR_VAR 0 2
52122: PUSH
52123: DOUBLE
52124: LD_INT 1
52126: DEC
52127: ST_TO_ADDR
52128: LD_EXP 37
52132: PUSH
52133: FOR_TO
52134: IFFALSE 52649
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
52136: LD_EXP 65
52140: PUSH
52141: LD_VAR 0 2
52145: ARRAY
52146: NOT
52147: PUSH
52148: LD_EXP 40
52152: PUSH
52153: LD_VAR 0 2
52157: ARRAY
52158: PUSH
52159: LD_INT 1
52161: ARRAY
52162: OR
52163: PUSH
52164: LD_EXP 40
52168: PUSH
52169: LD_VAR 0 2
52173: ARRAY
52174: PUSH
52175: LD_INT 2
52177: ARRAY
52178: OR
52179: PUSH
52180: LD_EXP 63
52184: PUSH
52185: LD_VAR 0 2
52189: ARRAY
52190: PPUSH
52191: LD_INT 1
52193: PPUSH
52194: CALL_OW 325
52198: NOT
52199: OR
52200: PUSH
52201: LD_EXP 60
52205: PUSH
52206: LD_VAR 0 2
52210: ARRAY
52211: OR
52212: IFFALSE 52216
// continue ;
52214: GO 52133
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
52216: LD_ADDR_VAR 0 8
52220: PUSH
52221: LD_EXP 37
52225: PUSH
52226: LD_VAR 0 2
52230: ARRAY
52231: PPUSH
52232: LD_INT 25
52234: PUSH
52235: LD_INT 4
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 50
52244: PUSH
52245: EMPTY
52246: LIST
52247: PUSH
52248: LD_INT 3
52250: PUSH
52251: LD_INT 60
52253: PUSH
52254: EMPTY
52255: LIST
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: LIST
52265: PPUSH
52266: CALL_OW 72
52270: PUSH
52271: LD_EXP 41
52275: PUSH
52276: LD_VAR 0 2
52280: ARRAY
52281: DIFF
52282: ST_TO_ADDR
// if not tmp then
52283: LD_VAR 0 8
52287: NOT
52288: IFFALSE 52292
// continue ;
52290: GO 52133
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
52292: LD_ADDR_VAR 0 7
52296: PUSH
52297: LD_EXP 65
52301: PUSH
52302: LD_VAR 0 2
52306: ARRAY
52307: PPUSH
52308: LD_INT 22
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 25
52320: PUSH
52321: LD_INT 12
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PPUSH
52332: CALL_OW 70
52336: ST_TO_ADDR
// if not apes then
52337: LD_VAR 0 7
52341: NOT
52342: IFFALSE 52392
// begin if mc_taming [ i ] then
52344: LD_EXP 68
52348: PUSH
52349: LD_VAR 0 2
52353: ARRAY
52354: IFFALSE 52390
// begin MC_Reset ( i , 121 ) ;
52356: LD_VAR 0 2
52360: PPUSH
52361: LD_INT 121
52363: PPUSH
52364: CALL 43318 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
52368: LD_ADDR_EXP 68
52372: PUSH
52373: LD_EXP 68
52377: PPUSH
52378: LD_VAR 0 2
52382: PPUSH
52383: EMPTY
52384: PPUSH
52385: CALL_OW 1
52389: ST_TO_ADDR
// end ; continue ;
52390: GO 52133
// end ; for j in tmp do
52392: LD_ADDR_VAR 0 3
52396: PUSH
52397: LD_VAR 0 8
52401: PUSH
52402: FOR_IN
52403: IFFALSE 52645
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
52405: LD_VAR 0 3
52409: PUSH
52410: LD_EXP 68
52414: PUSH
52415: LD_VAR 0 2
52419: ARRAY
52420: IN
52421: NOT
52422: PUSH
52423: LD_EXP 68
52427: PUSH
52428: LD_VAR 0 2
52432: ARRAY
52433: PUSH
52434: LD_INT 3
52436: LESS
52437: AND
52438: IFFALSE 52496
// begin SetTag ( j , 121 ) ;
52440: LD_VAR 0 3
52444: PPUSH
52445: LD_INT 121
52447: PPUSH
52448: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
52452: LD_ADDR_EXP 68
52456: PUSH
52457: LD_EXP 68
52461: PPUSH
52462: LD_VAR 0 2
52466: PUSH
52467: LD_EXP 68
52471: PUSH
52472: LD_VAR 0 2
52476: ARRAY
52477: PUSH
52478: LD_INT 1
52480: PLUS
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PPUSH
52486: LD_VAR 0 3
52490: PPUSH
52491: CALL 10876 0 3
52495: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
52496: LD_VAR 0 3
52500: PUSH
52501: LD_EXP 68
52505: PUSH
52506: LD_VAR 0 2
52510: ARRAY
52511: IN
52512: IFFALSE 52643
// begin if IsInUnit ( j ) then
52514: LD_VAR 0 3
52518: PPUSH
52519: CALL_OW 310
52523: IFFALSE 52534
// ComExitBuilding ( j ) ;
52525: LD_VAR 0 3
52529: PPUSH
52530: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
52534: LD_ADDR_VAR 0 6
52538: PUSH
52539: LD_VAR 0 7
52543: PPUSH
52544: LD_VAR 0 3
52548: PPUSH
52549: CALL_OW 74
52553: ST_TO_ADDR
// if not ape then
52554: LD_VAR 0 6
52558: NOT
52559: IFFALSE 52563
// break ;
52561: GO 52645
// x := GetX ( ape ) ;
52563: LD_ADDR_VAR 0 4
52567: PUSH
52568: LD_VAR 0 6
52572: PPUSH
52573: CALL_OW 250
52577: ST_TO_ADDR
// y := GetY ( ape ) ;
52578: LD_ADDR_VAR 0 5
52582: PUSH
52583: LD_VAR 0 6
52587: PPUSH
52588: CALL_OW 251
52592: ST_TO_ADDR
// if not ValidHex ( x , y ) then
52593: LD_VAR 0 4
52597: PPUSH
52598: LD_VAR 0 5
52602: PPUSH
52603: CALL_OW 488
52607: NOT
52608: IFFALSE 52612
// break ;
52610: GO 52645
// if not HasTask ( j ) then
52612: LD_VAR 0 3
52616: PPUSH
52617: CALL_OW 314
52621: NOT
52622: IFFALSE 52643
// ComTameXY ( j , x , y ) ;
52624: LD_VAR 0 3
52628: PPUSH
52629: LD_VAR 0 4
52633: PPUSH
52634: LD_VAR 0 5
52638: PPUSH
52639: CALL_OW 131
// end ; end ;
52643: GO 52402
52645: POP
52646: POP
// end ;
52647: GO 52133
52649: POP
52650: POP
// end ;
52651: LD_VAR 0 1
52655: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
52656: LD_INT 0
52658: PPUSH
52659: PPUSH
52660: PPUSH
52661: PPUSH
52662: PPUSH
52663: PPUSH
52664: PPUSH
52665: PPUSH
// if not mc_bases then
52666: LD_EXP 37
52670: NOT
52671: IFFALSE 52675
// exit ;
52673: GO 53285
// for i = 1 to mc_bases do
52675: LD_ADDR_VAR 0 2
52679: PUSH
52680: DOUBLE
52681: LD_INT 1
52683: DEC
52684: ST_TO_ADDR
52685: LD_EXP 37
52689: PUSH
52690: FOR_TO
52691: IFFALSE 53283
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
52693: LD_EXP 66
52697: PUSH
52698: LD_VAR 0 2
52702: ARRAY
52703: NOT
52704: PUSH
52705: LD_EXP 66
52709: PUSH
52710: LD_VAR 0 2
52714: ARRAY
52715: PPUSH
52716: LD_INT 25
52718: PUSH
52719: LD_INT 12
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PPUSH
52726: CALL_OW 72
52730: NOT
52731: OR
52732: IFFALSE 52736
// continue ;
52734: GO 52690
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
52736: LD_ADDR_VAR 0 5
52740: PUSH
52741: LD_EXP 66
52745: PUSH
52746: LD_VAR 0 2
52750: ARRAY
52751: PUSH
52752: LD_INT 1
52754: ARRAY
52755: PPUSH
52756: CALL_OW 255
52760: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
52761: LD_VAR 0 5
52765: PPUSH
52766: LD_INT 2
52768: PPUSH
52769: CALL_OW 325
52773: IFFALSE 53018
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
52775: LD_ADDR_VAR 0 4
52779: PUSH
52780: LD_EXP 66
52784: PUSH
52785: LD_VAR 0 2
52789: ARRAY
52790: PPUSH
52791: LD_INT 25
52793: PUSH
52794: LD_INT 16
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PPUSH
52801: CALL_OW 72
52805: ST_TO_ADDR
// if tmp < 6 then
52806: LD_VAR 0 4
52810: PUSH
52811: LD_INT 6
52813: LESS
52814: IFFALSE 53018
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
52816: LD_ADDR_VAR 0 6
52820: PUSH
52821: LD_EXP 37
52825: PUSH
52826: LD_VAR 0 2
52830: ARRAY
52831: PPUSH
52832: LD_INT 2
52834: PUSH
52835: LD_INT 30
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 30
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: LIST
52859: PPUSH
52860: CALL_OW 72
52864: ST_TO_ADDR
// if depot then
52865: LD_VAR 0 6
52869: IFFALSE 53018
// begin for j in depot do
52871: LD_ADDR_VAR 0 3
52875: PUSH
52876: LD_VAR 0 6
52880: PUSH
52881: FOR_IN
52882: IFFALSE 52913
// begin if UnitsInside ( j ) < 6 then
52884: LD_VAR 0 3
52888: PPUSH
52889: CALL_OW 313
52893: PUSH
52894: LD_INT 6
52896: LESS
52897: IFFALSE 52911
// begin selected := j ;
52899: LD_ADDR_VAR 0 7
52903: PUSH
52904: LD_VAR 0 3
52908: ST_TO_ADDR
// break ;
52909: GO 52913
// end ; end ;
52911: GO 52881
52913: POP
52914: POP
// if selected then
52915: LD_VAR 0 7
52919: IFFALSE 53018
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
52921: LD_ADDR_VAR 0 3
52925: PUSH
52926: LD_EXP 66
52930: PUSH
52931: LD_VAR 0 2
52935: ARRAY
52936: PPUSH
52937: LD_INT 25
52939: PUSH
52940: LD_INT 12
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PPUSH
52947: CALL_OW 72
52951: PUSH
52952: FOR_IN
52953: IFFALSE 53016
// if not HasTask ( j ) then
52955: LD_VAR 0 3
52959: PPUSH
52960: CALL_OW 314
52964: NOT
52965: IFFALSE 53014
// begin if not IsInUnit ( j ) then
52967: LD_VAR 0 3
52971: PPUSH
52972: CALL_OW 310
52976: NOT
52977: IFFALSE 52993
// ComEnterUnit ( j , selected ) ;
52979: LD_VAR 0 3
52983: PPUSH
52984: LD_VAR 0 7
52988: PPUSH
52989: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
52993: LD_VAR 0 3
52997: PPUSH
52998: LD_INT 16
53000: PPUSH
53001: CALL_OW 183
// AddComExitBuilding ( j ) ;
53005: LD_VAR 0 3
53009: PPUSH
53010: CALL_OW 182
// end ;
53014: GO 52952
53016: POP
53017: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
53018: LD_VAR 0 5
53022: PPUSH
53023: LD_INT 11
53025: PPUSH
53026: CALL_OW 325
53030: IFFALSE 53281
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
53032: LD_ADDR_VAR 0 4
53036: PUSH
53037: LD_EXP 66
53041: PUSH
53042: LD_VAR 0 2
53046: ARRAY
53047: PPUSH
53048: LD_INT 25
53050: PUSH
53051: LD_INT 16
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PPUSH
53058: CALL_OW 72
53062: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
53063: LD_VAR 0 4
53067: PUSH
53068: LD_INT 6
53070: GREATEREQUAL
53071: PUSH
53072: LD_VAR 0 5
53076: PPUSH
53077: LD_INT 2
53079: PPUSH
53080: CALL_OW 325
53084: NOT
53085: OR
53086: IFFALSE 53281
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
53088: LD_ADDR_VAR 0 8
53092: PUSH
53093: LD_EXP 37
53097: PUSH
53098: LD_VAR 0 2
53102: ARRAY
53103: PPUSH
53104: LD_INT 2
53106: PUSH
53107: LD_INT 30
53109: PUSH
53110: LD_INT 4
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 30
53119: PUSH
53120: LD_INT 5
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: LIST
53131: PPUSH
53132: CALL_OW 72
53136: ST_TO_ADDR
// if barracks then
53137: LD_VAR 0 8
53141: IFFALSE 53281
// begin for j in barracks do
53143: LD_ADDR_VAR 0 3
53147: PUSH
53148: LD_VAR 0 8
53152: PUSH
53153: FOR_IN
53154: IFFALSE 53185
// begin if UnitsInside ( j ) < 6 then
53156: LD_VAR 0 3
53160: PPUSH
53161: CALL_OW 313
53165: PUSH
53166: LD_INT 6
53168: LESS
53169: IFFALSE 53183
// begin selected := j ;
53171: LD_ADDR_VAR 0 7
53175: PUSH
53176: LD_VAR 0 3
53180: ST_TO_ADDR
// break ;
53181: GO 53185
// end ; end ;
53183: GO 53153
53185: POP
53186: POP
// if selected then
53187: LD_VAR 0 7
53191: IFFALSE 53281
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
53193: LD_ADDR_VAR 0 3
53197: PUSH
53198: LD_EXP 66
53202: PUSH
53203: LD_VAR 0 2
53207: ARRAY
53208: PPUSH
53209: LD_INT 25
53211: PUSH
53212: LD_INT 12
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PPUSH
53219: CALL_OW 72
53223: PUSH
53224: FOR_IN
53225: IFFALSE 53279
// if not IsInUnit ( j ) and not HasTask ( j ) then
53227: LD_VAR 0 3
53231: PPUSH
53232: CALL_OW 310
53236: NOT
53237: PUSH
53238: LD_VAR 0 3
53242: PPUSH
53243: CALL_OW 314
53247: NOT
53248: AND
53249: IFFALSE 53277
// begin ComEnterUnit ( j , selected ) ;
53251: LD_VAR 0 3
53255: PPUSH
53256: LD_VAR 0 7
53260: PPUSH
53261: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
53265: LD_VAR 0 3
53269: PPUSH
53270: LD_INT 15
53272: PPUSH
53273: CALL_OW 183
// end ;
53277: GO 53224
53279: POP
53280: POP
// end ; end ; end ; end ; end ;
53281: GO 52690
53283: POP
53284: POP
// end ;
53285: LD_VAR 0 1
53289: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
53290: LD_INT 0
53292: PPUSH
53293: PPUSH
53294: PPUSH
53295: PPUSH
// if not mc_bases then
53296: LD_EXP 37
53300: NOT
53301: IFFALSE 53305
// exit ;
53303: GO 53483
// for i = 1 to mc_bases do
53305: LD_ADDR_VAR 0 2
53309: PUSH
53310: DOUBLE
53311: LD_INT 1
53313: DEC
53314: ST_TO_ADDR
53315: LD_EXP 37
53319: PUSH
53320: FOR_TO
53321: IFFALSE 53481
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
53323: LD_ADDR_VAR 0 4
53327: PUSH
53328: LD_EXP 37
53332: PUSH
53333: LD_VAR 0 2
53337: ARRAY
53338: PPUSH
53339: LD_INT 25
53341: PUSH
53342: LD_INT 9
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PPUSH
53349: CALL_OW 72
53353: ST_TO_ADDR
// if not tmp then
53354: LD_VAR 0 4
53358: NOT
53359: IFFALSE 53363
// continue ;
53361: GO 53320
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
53363: LD_EXP 63
53367: PUSH
53368: LD_VAR 0 2
53372: ARRAY
53373: PPUSH
53374: LD_INT 29
53376: PPUSH
53377: CALL_OW 325
53381: NOT
53382: PUSH
53383: LD_EXP 63
53387: PUSH
53388: LD_VAR 0 2
53392: ARRAY
53393: PPUSH
53394: LD_INT 28
53396: PPUSH
53397: CALL_OW 325
53401: NOT
53402: AND
53403: IFFALSE 53407
// continue ;
53405: GO 53320
// for j in tmp do
53407: LD_ADDR_VAR 0 3
53411: PUSH
53412: LD_VAR 0 4
53416: PUSH
53417: FOR_IN
53418: IFFALSE 53477
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
53420: LD_VAR 0 3
53424: PUSH
53425: LD_EXP 40
53429: PUSH
53430: LD_VAR 0 2
53434: ARRAY
53435: PUSH
53436: LD_INT 1
53438: ARRAY
53439: IN
53440: NOT
53441: PUSH
53442: LD_VAR 0 3
53446: PUSH
53447: LD_EXP 40
53451: PUSH
53452: LD_VAR 0 2
53456: ARRAY
53457: PUSH
53458: LD_INT 2
53460: ARRAY
53461: IN
53462: NOT
53463: AND
53464: IFFALSE 53475
// ComSpaceTimeShoot ( j ) ;
53466: LD_VAR 0 3
53470: PPUSH
53471: CALL 5038 0 1
53475: GO 53417
53477: POP
53478: POP
// end ;
53479: GO 53320
53481: POP
53482: POP
// end ;
53483: LD_VAR 0 1
53487: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
53488: LD_INT 0
53490: PPUSH
53491: PPUSH
53492: PPUSH
53493: PPUSH
// if not mc_bases then
53494: LD_EXP 37
53498: NOT
53499: IFFALSE 53503
// exit ;
53501: GO 53525
// for i = 1 to mc_bases do
53503: LD_ADDR_VAR 0 2
53507: PUSH
53508: DOUBLE
53509: LD_INT 1
53511: DEC
53512: ST_TO_ADDR
53513: LD_EXP 37
53517: PUSH
53518: FOR_TO
53519: IFFALSE 53523
// begin end ;
53521: GO 53518
53523: POP
53524: POP
// end ;
53525: LD_VAR 0 1
53529: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
53530: LD_INT 0
53532: PPUSH
53533: PPUSH
53534: PPUSH
53535: PPUSH
53536: PPUSH
53537: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
53538: LD_VAR 0 1
53542: NOT
53543: PUSH
53544: LD_VAR 0 2
53548: NOT
53549: OR
53550: PUSH
53551: LD_VAR 0 3
53555: NOT
53556: OR
53557: PUSH
53558: LD_VAR 0 4
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: LD_INT 3
53571: PUSH
53572: LD_INT 4
53574: PUSH
53575: LD_INT 5
53577: PUSH
53578: LD_INT 8
53580: PUSH
53581: LD_INT 9
53583: PUSH
53584: LD_INT 15
53586: PUSH
53587: LD_INT 16
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: IN
53601: NOT
53602: OR
53603: IFFALSE 53607
// exit ;
53605: GO 54507
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
53607: LD_ADDR_VAR 0 2
53611: PUSH
53612: LD_VAR 0 2
53616: PPUSH
53617: LD_INT 21
53619: PUSH
53620: LD_INT 3
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 24
53629: PUSH
53630: LD_INT 250
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PPUSH
53641: CALL_OW 72
53645: ST_TO_ADDR
// case class of 1 , 15 :
53646: LD_VAR 0 4
53650: PUSH
53651: LD_INT 1
53653: DOUBLE
53654: EQUAL
53655: IFTRUE 53665
53657: LD_INT 15
53659: DOUBLE
53660: EQUAL
53661: IFTRUE 53665
53663: GO 53750
53665: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
53666: LD_ADDR_VAR 0 8
53670: PUSH
53671: LD_VAR 0 2
53675: PPUSH
53676: LD_INT 2
53678: PUSH
53679: LD_INT 30
53681: PUSH
53682: LD_INT 32
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 30
53691: PUSH
53692: LD_INT 31
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: LIST
53703: PPUSH
53704: CALL_OW 72
53708: PUSH
53709: LD_VAR 0 2
53713: PPUSH
53714: LD_INT 2
53716: PUSH
53717: LD_INT 30
53719: PUSH
53720: LD_INT 4
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 30
53729: PUSH
53730: LD_INT 5
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: LIST
53741: PPUSH
53742: CALL_OW 72
53746: ADD
53747: ST_TO_ADDR
53748: GO 53996
53750: LD_INT 2
53752: DOUBLE
53753: EQUAL
53754: IFTRUE 53764
53756: LD_INT 16
53758: DOUBLE
53759: EQUAL
53760: IFTRUE 53764
53762: GO 53810
53764: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
53765: LD_ADDR_VAR 0 8
53769: PUSH
53770: LD_VAR 0 2
53774: PPUSH
53775: LD_INT 2
53777: PUSH
53778: LD_INT 30
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 30
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: LIST
53802: PPUSH
53803: CALL_OW 72
53807: ST_TO_ADDR
53808: GO 53996
53810: LD_INT 3
53812: DOUBLE
53813: EQUAL
53814: IFTRUE 53818
53816: GO 53864
53818: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
53819: LD_ADDR_VAR 0 8
53823: PUSH
53824: LD_VAR 0 2
53828: PPUSH
53829: LD_INT 2
53831: PUSH
53832: LD_INT 30
53834: PUSH
53835: LD_INT 2
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 30
53844: PUSH
53845: LD_INT 3
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: LIST
53856: PPUSH
53857: CALL_OW 72
53861: ST_TO_ADDR
53862: GO 53996
53864: LD_INT 4
53866: DOUBLE
53867: EQUAL
53868: IFTRUE 53872
53870: GO 53929
53872: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
53873: LD_ADDR_VAR 0 8
53877: PUSH
53878: LD_VAR 0 2
53882: PPUSH
53883: LD_INT 2
53885: PUSH
53886: LD_INT 30
53888: PUSH
53889: LD_INT 6
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 30
53898: PUSH
53899: LD_INT 7
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 30
53908: PUSH
53909: LD_INT 8
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: PPUSH
53922: CALL_OW 72
53926: ST_TO_ADDR
53927: GO 53996
53929: LD_INT 5
53931: DOUBLE
53932: EQUAL
53933: IFTRUE 53949
53935: LD_INT 8
53937: DOUBLE
53938: EQUAL
53939: IFTRUE 53949
53941: LD_INT 9
53943: DOUBLE
53944: EQUAL
53945: IFTRUE 53949
53947: GO 53995
53949: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
53950: LD_ADDR_VAR 0 8
53954: PUSH
53955: LD_VAR 0 2
53959: PPUSH
53960: LD_INT 2
53962: PUSH
53963: LD_INT 30
53965: PUSH
53966: LD_INT 4
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 30
53975: PUSH
53976: LD_INT 5
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: LIST
53987: PPUSH
53988: CALL_OW 72
53992: ST_TO_ADDR
53993: GO 53996
53995: POP
// if not tmp then
53996: LD_VAR 0 8
54000: NOT
54001: IFFALSE 54005
// exit ;
54003: GO 54507
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
54005: LD_VAR 0 4
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 15
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: IN
54020: PUSH
54021: LD_EXP 46
54025: PUSH
54026: LD_VAR 0 1
54030: ARRAY
54031: AND
54032: IFFALSE 54188
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
54034: LD_ADDR_VAR 0 9
54038: PUSH
54039: LD_EXP 46
54043: PUSH
54044: LD_VAR 0 1
54048: ARRAY
54049: PUSH
54050: LD_INT 1
54052: ARRAY
54053: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
54054: LD_VAR 0 9
54058: PUSH
54059: LD_EXP 47
54063: PUSH
54064: LD_VAR 0 1
54068: ARRAY
54069: IN
54070: NOT
54071: IFFALSE 54186
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
54073: LD_ADDR_EXP 47
54077: PUSH
54078: LD_EXP 47
54082: PPUSH
54083: LD_VAR 0 1
54087: PUSH
54088: LD_EXP 47
54092: PUSH
54093: LD_VAR 0 1
54097: ARRAY
54098: PUSH
54099: LD_INT 1
54101: PLUS
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PPUSH
54107: LD_VAR 0 9
54111: PPUSH
54112: CALL 10876 0 3
54116: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
54117: LD_ADDR_EXP 46
54121: PUSH
54122: LD_EXP 46
54126: PPUSH
54127: LD_VAR 0 1
54131: PPUSH
54132: LD_EXP 46
54136: PUSH
54137: LD_VAR 0 1
54141: ARRAY
54142: PUSH
54143: LD_VAR 0 9
54147: DIFF
54148: PPUSH
54149: CALL_OW 1
54153: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
54154: LD_VAR 0 3
54158: PPUSH
54159: LD_EXP 47
54163: PUSH
54164: LD_VAR 0 1
54168: ARRAY
54169: PUSH
54170: LD_EXP 47
54174: PUSH
54175: LD_VAR 0 1
54179: ARRAY
54180: ARRAY
54181: PPUSH
54182: CALL_OW 120
// end ; exit ;
54186: GO 54507
// end ; if tmp > 1 then
54188: LD_VAR 0 8
54192: PUSH
54193: LD_INT 1
54195: GREATER
54196: IFFALSE 54300
// for i = 2 to tmp do
54198: LD_ADDR_VAR 0 6
54202: PUSH
54203: DOUBLE
54204: LD_INT 2
54206: DEC
54207: ST_TO_ADDR
54208: LD_VAR 0 8
54212: PUSH
54213: FOR_TO
54214: IFFALSE 54298
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
54216: LD_VAR 0 8
54220: PUSH
54221: LD_VAR 0 6
54225: ARRAY
54226: PPUSH
54227: CALL_OW 461
54231: PUSH
54232: LD_INT 6
54234: EQUAL
54235: IFFALSE 54296
// begin x := tmp [ i ] ;
54237: LD_ADDR_VAR 0 9
54241: PUSH
54242: LD_VAR 0 8
54246: PUSH
54247: LD_VAR 0 6
54251: ARRAY
54252: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
54253: LD_ADDR_VAR 0 8
54257: PUSH
54258: LD_VAR 0 8
54262: PPUSH
54263: LD_VAR 0 6
54267: PPUSH
54268: CALL_OW 3
54272: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
54273: LD_ADDR_VAR 0 8
54277: PUSH
54278: LD_VAR 0 8
54282: PPUSH
54283: LD_INT 1
54285: PPUSH
54286: LD_VAR 0 9
54290: PPUSH
54291: CALL_OW 2
54295: ST_TO_ADDR
// end ;
54296: GO 54213
54298: POP
54299: POP
// for i in tmp do
54300: LD_ADDR_VAR 0 6
54304: PUSH
54305: LD_VAR 0 8
54309: PUSH
54310: FOR_IN
54311: IFFALSE 54380
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
54313: LD_VAR 0 6
54317: PPUSH
54318: CALL_OW 313
54322: PUSH
54323: LD_INT 6
54325: LESS
54326: PUSH
54327: LD_VAR 0 6
54331: PPUSH
54332: CALL_OW 266
54336: PUSH
54337: LD_INT 31
54339: PUSH
54340: LD_INT 32
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: IN
54347: NOT
54348: AND
54349: PUSH
54350: LD_VAR 0 6
54354: PPUSH
54355: CALL_OW 313
54359: PUSH
54360: LD_INT 0
54362: EQUAL
54363: OR
54364: IFFALSE 54378
// begin j := i ;
54366: LD_ADDR_VAR 0 7
54370: PUSH
54371: LD_VAR 0 6
54375: ST_TO_ADDR
// break ;
54376: GO 54380
// end ; end ;
54378: GO 54310
54380: POP
54381: POP
// if j then
54382: LD_VAR 0 7
54386: IFFALSE 54404
// ComEnterUnit ( unit , j ) else
54388: LD_VAR 0 3
54392: PPUSH
54393: LD_VAR 0 7
54397: PPUSH
54398: CALL_OW 120
54402: GO 54507
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
54404: LD_ADDR_VAR 0 10
54408: PUSH
54409: LD_VAR 0 2
54413: PPUSH
54414: LD_INT 2
54416: PUSH
54417: LD_INT 30
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 30
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: LIST
54441: PPUSH
54442: CALL_OW 72
54446: ST_TO_ADDR
// if depot then
54447: LD_VAR 0 10
54451: IFFALSE 54507
// begin depot := NearestUnitToUnit ( depot , unit ) ;
54453: LD_ADDR_VAR 0 10
54457: PUSH
54458: LD_VAR 0 10
54462: PPUSH
54463: LD_VAR 0 3
54467: PPUSH
54468: CALL_OW 74
54472: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
54473: LD_VAR 0 3
54477: PPUSH
54478: LD_VAR 0 10
54482: PPUSH
54483: CALL_OW 296
54487: PUSH
54488: LD_INT 10
54490: GREATER
54491: IFFALSE 54507
// ComStandNearbyBuilding ( unit , depot ) ;
54493: LD_VAR 0 3
54497: PPUSH
54498: LD_VAR 0 10
54502: PPUSH
54503: CALL 5655 0 2
// end ; end ; end ;
54507: LD_VAR 0 5
54511: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
54512: LD_INT 0
54514: PPUSH
54515: PPUSH
54516: PPUSH
54517: PPUSH
// if not mc_bases then
54518: LD_EXP 37
54522: NOT
54523: IFFALSE 54527
// exit ;
54525: GO 54766
// for i = 1 to mc_bases do
54527: LD_ADDR_VAR 0 2
54531: PUSH
54532: DOUBLE
54533: LD_INT 1
54535: DEC
54536: ST_TO_ADDR
54537: LD_EXP 37
54541: PUSH
54542: FOR_TO
54543: IFFALSE 54764
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
54545: LD_ADDR_VAR 0 4
54549: PUSH
54550: LD_EXP 37
54554: PUSH
54555: LD_VAR 0 2
54559: ARRAY
54560: PPUSH
54561: LD_INT 21
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PPUSH
54571: CALL_OW 72
54575: PUSH
54576: LD_EXP 66
54580: PUSH
54581: LD_VAR 0 2
54585: ARRAY
54586: UNION
54587: ST_TO_ADDR
// if not tmp then
54588: LD_VAR 0 4
54592: NOT
54593: IFFALSE 54597
// continue ;
54595: GO 54542
// for j in tmp do
54597: LD_ADDR_VAR 0 3
54601: PUSH
54602: LD_VAR 0 4
54606: PUSH
54607: FOR_IN
54608: IFFALSE 54760
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
54610: LD_VAR 0 3
54614: PPUSH
54615: CALL_OW 110
54619: NOT
54620: PUSH
54621: LD_VAR 0 3
54625: PPUSH
54626: CALL_OW 314
54630: NOT
54631: AND
54632: PUSH
54633: LD_VAR 0 3
54637: PPUSH
54638: CALL_OW 311
54642: NOT
54643: AND
54644: PUSH
54645: LD_VAR 0 3
54649: PPUSH
54650: CALL_OW 310
54654: NOT
54655: AND
54656: PUSH
54657: LD_VAR 0 3
54661: PUSH
54662: LD_EXP 40
54666: PUSH
54667: LD_VAR 0 2
54671: ARRAY
54672: PUSH
54673: LD_INT 1
54675: ARRAY
54676: IN
54677: NOT
54678: AND
54679: PUSH
54680: LD_VAR 0 3
54684: PUSH
54685: LD_EXP 40
54689: PUSH
54690: LD_VAR 0 2
54694: ARRAY
54695: PUSH
54696: LD_INT 2
54698: ARRAY
54699: IN
54700: NOT
54701: AND
54702: PUSH
54703: LD_VAR 0 3
54707: PUSH
54708: LD_EXP 49
54712: PUSH
54713: LD_VAR 0 2
54717: ARRAY
54718: IN
54719: NOT
54720: AND
54721: IFFALSE 54758
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
54723: LD_VAR 0 2
54727: PPUSH
54728: LD_EXP 37
54732: PUSH
54733: LD_VAR 0 2
54737: ARRAY
54738: PPUSH
54739: LD_VAR 0 3
54743: PPUSH
54744: LD_VAR 0 3
54748: PPUSH
54749: CALL_OW 257
54753: PPUSH
54754: CALL 53530 0 4
// end ;
54758: GO 54607
54760: POP
54761: POP
// end ;
54762: GO 54542
54764: POP
54765: POP
// end ;
54766: LD_VAR 0 1
54770: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
54771: LD_INT 0
54773: PPUSH
54774: PPUSH
54775: PPUSH
54776: PPUSH
54777: PPUSH
54778: PPUSH
// if not mc_bases [ base ] then
54779: LD_EXP 37
54783: PUSH
54784: LD_VAR 0 1
54788: ARRAY
54789: NOT
54790: IFFALSE 54794
// exit ;
54792: GO 54976
// tmp := [ ] ;
54794: LD_ADDR_VAR 0 6
54798: PUSH
54799: EMPTY
54800: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
54801: LD_ADDR_VAR 0 7
54805: PUSH
54806: LD_VAR 0 3
54810: PPUSH
54811: LD_INT 0
54813: PPUSH
54814: CALL_OW 517
54818: ST_TO_ADDR
// if not list then
54819: LD_VAR 0 7
54823: NOT
54824: IFFALSE 54828
// exit ;
54826: GO 54976
// for i = 1 to amount do
54828: LD_ADDR_VAR 0 5
54832: PUSH
54833: DOUBLE
54834: LD_INT 1
54836: DEC
54837: ST_TO_ADDR
54838: LD_VAR 0 2
54842: PUSH
54843: FOR_TO
54844: IFFALSE 54924
// begin x := rand ( 1 , list [ 1 ] ) ;
54846: LD_ADDR_VAR 0 8
54850: PUSH
54851: LD_INT 1
54853: PPUSH
54854: LD_VAR 0 7
54858: PUSH
54859: LD_INT 1
54861: ARRAY
54862: PPUSH
54863: CALL_OW 12
54867: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
54868: LD_ADDR_VAR 0 6
54872: PUSH
54873: LD_VAR 0 6
54877: PPUSH
54878: LD_VAR 0 5
54882: PPUSH
54883: LD_VAR 0 7
54887: PUSH
54888: LD_INT 1
54890: ARRAY
54891: PUSH
54892: LD_VAR 0 8
54896: ARRAY
54897: PUSH
54898: LD_VAR 0 7
54902: PUSH
54903: LD_INT 2
54905: ARRAY
54906: PUSH
54907: LD_VAR 0 8
54911: ARRAY
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PPUSH
54917: CALL_OW 1
54921: ST_TO_ADDR
// end ;
54922: GO 54843
54924: POP
54925: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
54926: LD_ADDR_EXP 50
54930: PUSH
54931: LD_EXP 50
54935: PPUSH
54936: LD_VAR 0 1
54940: PPUSH
54941: LD_VAR 0 6
54945: PPUSH
54946: CALL_OW 1
54950: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
54951: LD_ADDR_EXP 52
54955: PUSH
54956: LD_EXP 52
54960: PPUSH
54961: LD_VAR 0 1
54965: PPUSH
54966: LD_VAR 0 3
54970: PPUSH
54971: CALL_OW 1
54975: ST_TO_ADDR
// end ;
54976: LD_VAR 0 4
54980: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
54981: LD_INT 0
54983: PPUSH
// if not mc_bases [ base ] then
54984: LD_EXP 37
54988: PUSH
54989: LD_VAR 0 1
54993: ARRAY
54994: NOT
54995: IFFALSE 54999
// exit ;
54997: GO 55024
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
54999: LD_ADDR_EXP 42
55003: PUSH
55004: LD_EXP 42
55008: PPUSH
55009: LD_VAR 0 1
55013: PPUSH
55014: LD_VAR 0 2
55018: PPUSH
55019: CALL_OW 1
55023: ST_TO_ADDR
// end ;
55024: LD_VAR 0 3
55028: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
55029: LD_INT 0
55031: PPUSH
// if not mc_bases [ base ] then
55032: LD_EXP 37
55036: PUSH
55037: LD_VAR 0 1
55041: ARRAY
55042: NOT
55043: IFFALSE 55047
// exit ;
55045: GO 55072
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
55047: LD_ADDR_EXP 58
55051: PUSH
55052: LD_EXP 58
55056: PPUSH
55057: LD_VAR 0 1
55061: PPUSH
55062: LD_VAR 0 2
55066: PPUSH
55067: CALL_OW 1
55071: ST_TO_ADDR
// end ;
55072: LD_VAR 0 3
55076: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
55077: LD_INT 0
55079: PPUSH
// if not mc_bases [ base ] then
55080: LD_EXP 37
55084: PUSH
55085: LD_VAR 0 1
55089: ARRAY
55090: NOT
55091: IFFALSE 55095
// exit ;
55093: GO 55135
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
55095: LD_ADDR_EXP 58
55099: PUSH
55100: LD_EXP 58
55104: PPUSH
55105: LD_VAR 0 1
55109: PPUSH
55110: LD_EXP 58
55114: PUSH
55115: LD_VAR 0 1
55119: ARRAY
55120: PUSH
55121: LD_VAR 0 2
55125: PUSH
55126: EMPTY
55127: LIST
55128: ADD
55129: PPUSH
55130: CALL_OW 1
55134: ST_TO_ADDR
// end ;
55135: LD_VAR 0 3
55139: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
55140: LD_INT 0
55142: PPUSH
// if not mc_bases [ base ] then
55143: LD_EXP 37
55147: PUSH
55148: LD_VAR 0 1
55152: ARRAY
55153: NOT
55154: IFFALSE 55158
// exit ;
55156: GO 55270
// mc_defender := Replace ( mc_defender , base , deflist ) ;
55158: LD_ADDR_EXP 59
55162: PUSH
55163: LD_EXP 59
55167: PPUSH
55168: LD_VAR 0 1
55172: PPUSH
55173: LD_VAR 0 2
55177: PPUSH
55178: CALL_OW 1
55182: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
55183: LD_ADDR_EXP 48
55187: PUSH
55188: LD_EXP 48
55192: PPUSH
55193: LD_VAR 0 1
55197: PPUSH
55198: LD_VAR 0 2
55202: PUSH
55203: LD_INT 0
55205: PLUS
55206: PPUSH
55207: CALL_OW 1
55211: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
55212: LD_ADDR_EXP 56
55216: PUSH
55217: LD_EXP 56
55221: PPUSH
55222: LD_VAR 0 1
55226: PPUSH
55227: LD_EXP 56
55231: PUSH
55232: LD_VAR 0 1
55236: ARRAY
55237: PUSH
55238: LD_EXP 59
55242: PUSH
55243: LD_VAR 0 1
55247: ARRAY
55248: PPUSH
55249: LD_INT 21
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PPUSH
55259: CALL_OW 72
55263: UNION
55264: PPUSH
55265: CALL_OW 1
55269: ST_TO_ADDR
// end ;
55270: LD_VAR 0 3
55274: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
55275: LD_INT 0
55277: PPUSH
55278: PPUSH
55279: PPUSH
55280: PPUSH
// if not mc_bases [ base ] then
55281: LD_EXP 37
55285: PUSH
55286: LD_VAR 0 1
55290: ARRAY
55291: NOT
55292: IFFALSE 55296
// exit ;
55294: GO 55361
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
55296: LD_ADDR_EXP 57
55300: PUSH
55301: LD_EXP 57
55305: PPUSH
55306: LD_VAR 0 1
55310: PUSH
55311: LD_EXP 57
55315: PUSH
55316: LD_VAR 0 1
55320: ARRAY
55321: PUSH
55322: LD_INT 1
55324: PLUS
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PPUSH
55330: LD_VAR 0 1
55334: PUSH
55335: LD_VAR 0 2
55339: PUSH
55340: LD_VAR 0 3
55344: PUSH
55345: LD_VAR 0 4
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: PPUSH
55356: CALL 10876 0 3
55360: ST_TO_ADDR
// end ;
55361: LD_VAR 0 5
55365: RET
// export function MC_GetMinesField ( base ) ; begin
55366: LD_INT 0
55368: PPUSH
// result := mc_mines [ base ] ;
55369: LD_ADDR_VAR 0 2
55373: PUSH
55374: LD_EXP 50
55378: PUSH
55379: LD_VAR 0 1
55383: ARRAY
55384: ST_TO_ADDR
// end ;
55385: LD_VAR 0 2
55389: RET
// export function MC_GetProduceList ( base ) ; begin
55390: LD_INT 0
55392: PPUSH
// result := mc_produce [ base ] ;
55393: LD_ADDR_VAR 0 2
55397: PUSH
55398: LD_EXP 58
55402: PUSH
55403: LD_VAR 0 1
55407: ARRAY
55408: ST_TO_ADDR
// end ;
55409: LD_VAR 0 2
55413: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
55414: LD_INT 0
55416: PPUSH
55417: PPUSH
// if not mc_bases then
55418: LD_EXP 37
55422: NOT
55423: IFFALSE 55427
// exit ;
55425: GO 55492
// if mc_bases [ base ] then
55427: LD_EXP 37
55431: PUSH
55432: LD_VAR 0 1
55436: ARRAY
55437: IFFALSE 55492
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
55439: LD_ADDR_VAR 0 3
55443: PUSH
55444: LD_EXP 37
55448: PUSH
55449: LD_VAR 0 1
55453: ARRAY
55454: PPUSH
55455: LD_INT 30
55457: PUSH
55458: LD_VAR 0 2
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PPUSH
55467: CALL_OW 72
55471: ST_TO_ADDR
// if result then
55472: LD_VAR 0 3
55476: IFFALSE 55492
// result := result [ 1 ] ;
55478: LD_ADDR_VAR 0 3
55482: PUSH
55483: LD_VAR 0 3
55487: PUSH
55488: LD_INT 1
55490: ARRAY
55491: ST_TO_ADDR
// end ; end ;
55492: LD_VAR 0 3
55496: RET
// export function MC_SetTame ( base , area ) ; begin
55497: LD_INT 0
55499: PPUSH
// if not mc_bases or not base then
55500: LD_EXP 37
55504: NOT
55505: PUSH
55506: LD_VAR 0 1
55510: NOT
55511: OR
55512: IFFALSE 55516
// exit ;
55514: GO 55541
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
55516: LD_ADDR_EXP 65
55520: PUSH
55521: LD_EXP 65
55525: PPUSH
55526: LD_VAR 0 1
55530: PPUSH
55531: LD_VAR 0 2
55535: PPUSH
55536: CALL_OW 1
55540: ST_TO_ADDR
// end ;
55541: LD_VAR 0 3
55545: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
55546: LD_INT 0
55548: PPUSH
55549: PPUSH
// if not mc_bases or not base or not kinds then
55550: LD_EXP 37
55554: NOT
55555: PUSH
55556: LD_VAR 0 1
55560: NOT
55561: OR
55562: PUSH
55563: LD_VAR 0 2
55567: NOT
55568: OR
55569: IFFALSE 55573
// exit ;
55571: GO 55634
// for i in kinds do
55573: LD_ADDR_VAR 0 4
55577: PUSH
55578: LD_VAR 0 2
55582: PUSH
55583: FOR_IN
55584: IFFALSE 55632
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
55586: LD_ADDR_EXP 71
55590: PUSH
55591: LD_EXP 71
55595: PPUSH
55596: LD_VAR 0 1
55600: PUSH
55601: LD_EXP 71
55605: PUSH
55606: LD_VAR 0 1
55610: ARRAY
55611: PUSH
55612: LD_INT 1
55614: PLUS
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PPUSH
55620: LD_VAR 0 4
55624: PPUSH
55625: CALL 10876 0 3
55629: ST_TO_ADDR
55630: GO 55583
55632: POP
55633: POP
// end ;
55634: LD_VAR 0 3
55638: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
55639: LD_INT 0
55641: PPUSH
// if not mc_bases or not base or not areas then
55642: LD_EXP 37
55646: NOT
55647: PUSH
55648: LD_VAR 0 1
55652: NOT
55653: OR
55654: PUSH
55655: LD_VAR 0 2
55659: NOT
55660: OR
55661: IFFALSE 55665
// exit ;
55663: GO 55690
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
55665: LD_ADDR_EXP 55
55669: PUSH
55670: LD_EXP 55
55674: PPUSH
55675: LD_VAR 0 1
55679: PPUSH
55680: LD_VAR 0 2
55684: PPUSH
55685: CALL_OW 1
55689: ST_TO_ADDR
// end ;
55690: LD_VAR 0 3
55694: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
55695: LD_INT 0
55697: PPUSH
// if not mc_bases or not base then
55698: LD_EXP 37
55702: NOT
55703: PUSH
55704: LD_VAR 0 1
55708: NOT
55709: OR
55710: IFFALSE 55714
// exit ;
55712: GO 55748
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
55714: LD_ADDR_EXP 72
55718: PUSH
55719: LD_EXP 72
55723: PPUSH
55724: LD_VAR 0 1
55728: PPUSH
55729: LD_VAR 0 2
55733: PUSH
55734: LD_VAR 0 3
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PPUSH
55743: CALL_OW 1
55747: ST_TO_ADDR
// end ; end_of_file
55748: LD_VAR 0 4
55752: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
55753: LD_INT 0
55755: PPUSH
55756: PPUSH
55757: PPUSH
// if not mc_bases then
55758: LD_EXP 37
55762: NOT
55763: IFFALSE 55767
// exit ;
55765: GO 55932
// for i = 1 to mc_bases do
55767: LD_ADDR_VAR 0 4
55771: PUSH
55772: DOUBLE
55773: LD_INT 1
55775: DEC
55776: ST_TO_ADDR
55777: LD_EXP 37
55781: PUSH
55782: FOR_TO
55783: IFFALSE 55930
// begin if sci in mc_bases [ i ] then
55785: LD_VAR 0 2
55789: PUSH
55790: LD_EXP 37
55794: PUSH
55795: LD_VAR 0 4
55799: ARRAY
55800: IN
55801: IFFALSE 55928
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
55803: LD_ADDR_EXP 66
55807: PUSH
55808: LD_EXP 66
55812: PPUSH
55813: LD_VAR 0 4
55817: PUSH
55818: LD_EXP 66
55822: PUSH
55823: LD_VAR 0 4
55827: ARRAY
55828: PUSH
55829: LD_INT 1
55831: PLUS
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PPUSH
55837: LD_VAR 0 1
55841: PPUSH
55842: CALL 10876 0 3
55846: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
55847: LD_ADDR_VAR 0 5
55851: PUSH
55852: LD_EXP 37
55856: PUSH
55857: LD_VAR 0 4
55861: ARRAY
55862: PPUSH
55863: LD_INT 2
55865: PUSH
55866: LD_INT 30
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 30
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: PPUSH
55891: CALL_OW 72
55895: PPUSH
55896: LD_VAR 0 1
55900: PPUSH
55901: CALL_OW 74
55905: ST_TO_ADDR
// if tmp then
55906: LD_VAR 0 5
55910: IFFALSE 55926
// ComStandNearbyBuilding ( ape , tmp ) ;
55912: LD_VAR 0 1
55916: PPUSH
55917: LD_VAR 0 5
55921: PPUSH
55922: CALL 5655 0 2
// break ;
55926: GO 55930
// end ; end ;
55928: GO 55782
55930: POP
55931: POP
// end ;
55932: LD_VAR 0 3
55936: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
55937: LD_INT 0
55939: PPUSH
55940: PPUSH
55941: PPUSH
// if not mc_bases then
55942: LD_EXP 37
55946: NOT
55947: IFFALSE 55951
// exit ;
55949: GO 56040
// for i = 1 to mc_bases do
55951: LD_ADDR_VAR 0 4
55955: PUSH
55956: DOUBLE
55957: LD_INT 1
55959: DEC
55960: ST_TO_ADDR
55961: LD_EXP 37
55965: PUSH
55966: FOR_TO
55967: IFFALSE 56038
// begin if building in mc_busy_turret_list [ i ] then
55969: LD_VAR 0 1
55973: PUSH
55974: LD_EXP 47
55978: PUSH
55979: LD_VAR 0 4
55983: ARRAY
55984: IN
55985: IFFALSE 56036
// begin tmp := mc_busy_turret_list [ i ] diff building ;
55987: LD_ADDR_VAR 0 5
55991: PUSH
55992: LD_EXP 47
55996: PUSH
55997: LD_VAR 0 4
56001: ARRAY
56002: PUSH
56003: LD_VAR 0 1
56007: DIFF
56008: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
56009: LD_ADDR_EXP 47
56013: PUSH
56014: LD_EXP 47
56018: PPUSH
56019: LD_VAR 0 4
56023: PPUSH
56024: LD_VAR 0 5
56028: PPUSH
56029: CALL_OW 1
56033: ST_TO_ADDR
// break ;
56034: GO 56038
// end ; end ;
56036: GO 55966
56038: POP
56039: POP
// end ;
56040: LD_VAR 0 3
56044: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
56045: LD_INT 0
56047: PPUSH
56048: PPUSH
56049: PPUSH
// if not mc_bases then
56050: LD_EXP 37
56054: NOT
56055: IFFALSE 56059
// exit ;
56057: GO 56258
// for i = 1 to mc_bases do
56059: LD_ADDR_VAR 0 5
56063: PUSH
56064: DOUBLE
56065: LD_INT 1
56067: DEC
56068: ST_TO_ADDR
56069: LD_EXP 37
56073: PUSH
56074: FOR_TO
56075: IFFALSE 56256
// if building in mc_bases [ i ] then
56077: LD_VAR 0 1
56081: PUSH
56082: LD_EXP 37
56086: PUSH
56087: LD_VAR 0 5
56091: ARRAY
56092: IN
56093: IFFALSE 56254
// begin tmp := mc_bases [ i ] diff building ;
56095: LD_ADDR_VAR 0 6
56099: PUSH
56100: LD_EXP 37
56104: PUSH
56105: LD_VAR 0 5
56109: ARRAY
56110: PUSH
56111: LD_VAR 0 1
56115: DIFF
56116: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
56117: LD_ADDR_EXP 37
56121: PUSH
56122: LD_EXP 37
56126: PPUSH
56127: LD_VAR 0 5
56131: PPUSH
56132: LD_VAR 0 6
56136: PPUSH
56137: CALL_OW 1
56141: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
56142: LD_VAR 0 1
56146: PUSH
56147: LD_EXP 45
56151: PUSH
56152: LD_VAR 0 5
56156: ARRAY
56157: IN
56158: IFFALSE 56197
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
56160: LD_ADDR_EXP 45
56164: PUSH
56165: LD_EXP 45
56169: PPUSH
56170: LD_VAR 0 5
56174: PPUSH
56175: LD_EXP 45
56179: PUSH
56180: LD_VAR 0 5
56184: ARRAY
56185: PUSH
56186: LD_VAR 0 1
56190: DIFF
56191: PPUSH
56192: CALL_OW 1
56196: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
56197: LD_VAR 0 1
56201: PUSH
56202: LD_EXP 46
56206: PUSH
56207: LD_VAR 0 5
56211: ARRAY
56212: IN
56213: IFFALSE 56252
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
56215: LD_ADDR_EXP 46
56219: PUSH
56220: LD_EXP 46
56224: PPUSH
56225: LD_VAR 0 5
56229: PPUSH
56230: LD_EXP 46
56234: PUSH
56235: LD_VAR 0 5
56239: ARRAY
56240: PUSH
56241: LD_VAR 0 1
56245: DIFF
56246: PPUSH
56247: CALL_OW 1
56251: ST_TO_ADDR
// break ;
56252: GO 56256
// end ;
56254: GO 56074
56256: POP
56257: POP
// end ;
56258: LD_VAR 0 4
56262: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
56263: LD_INT 0
56265: PPUSH
56266: PPUSH
56267: PPUSH
// if not mc_bases or not side in mc_sides then
56268: LD_EXP 37
56272: NOT
56273: PUSH
56274: LD_VAR 0 3
56278: PUSH
56279: LD_EXP 63
56283: IN
56284: NOT
56285: OR
56286: IFFALSE 56290
// exit ;
56288: GO 56413
// for i = 1 to mc_vehicles do
56290: LD_ADDR_VAR 0 6
56294: PUSH
56295: DOUBLE
56296: LD_INT 1
56298: DEC
56299: ST_TO_ADDR
56300: LD_EXP 56
56304: PUSH
56305: FOR_TO
56306: IFFALSE 56411
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
56308: LD_VAR 0 2
56312: PUSH
56313: LD_EXP 56
56317: PUSH
56318: LD_VAR 0 6
56322: ARRAY
56323: IN
56324: PUSH
56325: LD_VAR 0 1
56329: PUSH
56330: LD_EXP 56
56334: PUSH
56335: LD_VAR 0 6
56339: ARRAY
56340: IN
56341: OR
56342: IFFALSE 56409
// begin tmp := mc_vehicles [ i ] diff old ;
56344: LD_ADDR_VAR 0 7
56348: PUSH
56349: LD_EXP 56
56353: PUSH
56354: LD_VAR 0 6
56358: ARRAY
56359: PUSH
56360: LD_VAR 0 2
56364: DIFF
56365: ST_TO_ADDR
// tmp := tmp diff new ;
56366: LD_ADDR_VAR 0 7
56370: PUSH
56371: LD_VAR 0 7
56375: PUSH
56376: LD_VAR 0 1
56380: DIFF
56381: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
56382: LD_ADDR_EXP 56
56386: PUSH
56387: LD_EXP 56
56391: PPUSH
56392: LD_VAR 0 6
56396: PPUSH
56397: LD_VAR 0 7
56401: PPUSH
56402: CALL_OW 1
56406: ST_TO_ADDR
// break ;
56407: GO 56411
// end ;
56409: GO 56305
56411: POP
56412: POP
// end ;
56413: LD_VAR 0 5
56417: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
56418: LD_INT 0
56420: PPUSH
56421: PPUSH
56422: PPUSH
56423: PPUSH
// if not mc_bases then
56424: LD_EXP 37
56428: NOT
56429: IFFALSE 56433
// exit ;
56431: GO 56725
// side := GetSide ( vehicle ) ;
56433: LD_ADDR_VAR 0 5
56437: PUSH
56438: LD_VAR 0 1
56442: PPUSH
56443: CALL_OW 255
56447: ST_TO_ADDR
// for i = 1 to mc_bases do
56448: LD_ADDR_VAR 0 4
56452: PUSH
56453: DOUBLE
56454: LD_INT 1
56456: DEC
56457: ST_TO_ADDR
56458: LD_EXP 37
56462: PUSH
56463: FOR_TO
56464: IFFALSE 56723
// begin if factory in mc_bases [ i ] then
56466: LD_VAR 0 2
56470: PUSH
56471: LD_EXP 37
56475: PUSH
56476: LD_VAR 0 4
56480: ARRAY
56481: IN
56482: IFFALSE 56721
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
56484: LD_EXP 59
56488: PUSH
56489: LD_VAR 0 4
56493: ARRAY
56494: PUSH
56495: LD_EXP 48
56499: PUSH
56500: LD_VAR 0 4
56504: ARRAY
56505: LESS
56506: IFFALSE 56677
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
56508: LD_ADDR_EXP 59
56512: PUSH
56513: LD_EXP 59
56517: PPUSH
56518: LD_VAR 0 4
56522: PPUSH
56523: LD_EXP 59
56527: PUSH
56528: LD_VAR 0 4
56532: ARRAY
56533: PUSH
56534: LD_VAR 0 1
56538: ADD
56539: PPUSH
56540: CALL_OW 1
56544: ST_TO_ADDR
// if not mc_scan [ i ] then
56545: LD_EXP 60
56549: PUSH
56550: LD_VAR 0 4
56554: ARRAY
56555: NOT
56556: IFFALSE 56675
// begin if GetControl ( vehicle ) = control_remote then
56558: LD_VAR 0 1
56562: PPUSH
56563: CALL_OW 263
56567: PUSH
56568: LD_INT 2
56570: EQUAL
56571: IFFALSE 56591
// repeat wait ( 0 0$1 ) ;
56573: LD_INT 35
56575: PPUSH
56576: CALL_OW 67
// until IsControledBy ( vehicle ) ;
56580: LD_VAR 0 1
56584: PPUSH
56585: CALL_OW 312
56589: IFFALSE 56573
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
56591: LD_VAR 0 1
56595: PPUSH
56596: LD_EXP 61
56600: PUSH
56601: LD_VAR 0 4
56605: ARRAY
56606: PPUSH
56607: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
56611: LD_VAR 0 1
56615: PPUSH
56616: CALL_OW 263
56620: PUSH
56621: LD_INT 1
56623: NONEQUAL
56624: IFFALSE 56628
// break ;
56626: GO 56723
// repeat wait ( 0 0$1 ) ;
56628: LD_INT 35
56630: PPUSH
56631: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
56635: LD_VAR 0 1
56639: PPUSH
56640: LD_EXP 61
56644: PUSH
56645: LD_VAR 0 4
56649: ARRAY
56650: PPUSH
56651: CALL_OW 308
56655: IFFALSE 56628
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
56657: LD_VAR 0 1
56661: PPUSH
56662: CALL_OW 311
56666: PPUSH
56667: CALL_OW 121
// exit ;
56671: POP
56672: POP
56673: GO 56725
// end ; end else
56675: GO 56721
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
56677: LD_ADDR_EXP 56
56681: PUSH
56682: LD_EXP 56
56686: PPUSH
56687: LD_VAR 0 4
56691: PUSH
56692: LD_EXP 56
56696: PUSH
56697: LD_VAR 0 4
56701: ARRAY
56702: PUSH
56703: LD_INT 1
56705: PLUS
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PPUSH
56711: LD_VAR 0 1
56715: PPUSH
56716: CALL 10876 0 3
56720: ST_TO_ADDR
// end ; end ;
56721: GO 56463
56723: POP
56724: POP
// end ;
56725: LD_VAR 0 3
56729: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
56730: LD_INT 0
56732: PPUSH
56733: PPUSH
56734: PPUSH
56735: PPUSH
// if not mc_bases then
56736: LD_EXP 37
56740: NOT
56741: IFFALSE 56745
// exit ;
56743: GO 57098
// repeat wait ( 0 0$1 ) ;
56745: LD_INT 35
56747: PPUSH
56748: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
56752: LD_VAR 0 2
56756: PPUSH
56757: LD_VAR 0 3
56761: PPUSH
56762: CALL_OW 284
56766: IFFALSE 56745
// if GetResourceTypeXY ( x , y ) = mat_artefact then
56768: LD_VAR 0 2
56772: PPUSH
56773: LD_VAR 0 3
56777: PPUSH
56778: CALL_OW 283
56782: PUSH
56783: LD_INT 4
56785: EQUAL
56786: IFFALSE 56790
// exit ;
56788: GO 57098
// for i = 1 to mc_bases do
56790: LD_ADDR_VAR 0 7
56794: PUSH
56795: DOUBLE
56796: LD_INT 1
56798: DEC
56799: ST_TO_ADDR
56800: LD_EXP 37
56804: PUSH
56805: FOR_TO
56806: IFFALSE 57096
// begin if mc_crates_area [ i ] then
56808: LD_EXP 55
56812: PUSH
56813: LD_VAR 0 7
56817: ARRAY
56818: IFFALSE 56929
// for j in mc_crates_area [ i ] do
56820: LD_ADDR_VAR 0 8
56824: PUSH
56825: LD_EXP 55
56829: PUSH
56830: LD_VAR 0 7
56834: ARRAY
56835: PUSH
56836: FOR_IN
56837: IFFALSE 56927
// if InArea ( x , y , j ) then
56839: LD_VAR 0 2
56843: PPUSH
56844: LD_VAR 0 3
56848: PPUSH
56849: LD_VAR 0 8
56853: PPUSH
56854: CALL_OW 309
56858: IFFALSE 56925
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
56860: LD_ADDR_EXP 53
56864: PUSH
56865: LD_EXP 53
56869: PPUSH
56870: LD_VAR 0 7
56874: PUSH
56875: LD_EXP 53
56879: PUSH
56880: LD_VAR 0 7
56884: ARRAY
56885: PUSH
56886: LD_INT 1
56888: PLUS
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PPUSH
56894: LD_VAR 0 4
56898: PUSH
56899: LD_VAR 0 2
56903: PUSH
56904: LD_VAR 0 3
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: LIST
56913: PPUSH
56914: CALL 10876 0 3
56918: ST_TO_ADDR
// exit ;
56919: POP
56920: POP
56921: POP
56922: POP
56923: GO 57098
// end ;
56925: GO 56836
56927: POP
56928: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56929: LD_ADDR_VAR 0 9
56933: PUSH
56934: LD_EXP 37
56938: PUSH
56939: LD_VAR 0 7
56943: ARRAY
56944: PPUSH
56945: LD_INT 2
56947: PUSH
56948: LD_INT 30
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 30
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: LIST
56972: PPUSH
56973: CALL_OW 72
56977: ST_TO_ADDR
// if not depot then
56978: LD_VAR 0 9
56982: NOT
56983: IFFALSE 56987
// continue ;
56985: GO 56805
// for j in depot do
56987: LD_ADDR_VAR 0 8
56991: PUSH
56992: LD_VAR 0 9
56996: PUSH
56997: FOR_IN
56998: IFFALSE 57092
// if GetDistUnitXY ( j , x , y ) < 30 then
57000: LD_VAR 0 8
57004: PPUSH
57005: LD_VAR 0 2
57009: PPUSH
57010: LD_VAR 0 3
57014: PPUSH
57015: CALL_OW 297
57019: PUSH
57020: LD_INT 30
57022: LESS
57023: IFFALSE 57090
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
57025: LD_ADDR_EXP 53
57029: PUSH
57030: LD_EXP 53
57034: PPUSH
57035: LD_VAR 0 7
57039: PUSH
57040: LD_EXP 53
57044: PUSH
57045: LD_VAR 0 7
57049: ARRAY
57050: PUSH
57051: LD_INT 1
57053: PLUS
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PPUSH
57059: LD_VAR 0 4
57063: PUSH
57064: LD_VAR 0 2
57068: PUSH
57069: LD_VAR 0 3
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: LIST
57078: PPUSH
57079: CALL 10876 0 3
57083: ST_TO_ADDR
// exit ;
57084: POP
57085: POP
57086: POP
57087: POP
57088: GO 57098
// end ;
57090: GO 56997
57092: POP
57093: POP
// end ;
57094: GO 56805
57096: POP
57097: POP
// end ;
57098: LD_VAR 0 6
57102: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
57103: LD_INT 0
57105: PPUSH
57106: PPUSH
57107: PPUSH
57108: PPUSH
// side := GetSide ( lab ) ;
57109: LD_ADDR_VAR 0 4
57113: PUSH
57114: LD_VAR 0 2
57118: PPUSH
57119: CALL_OW 255
57123: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
57124: LD_VAR 0 4
57128: PUSH
57129: LD_EXP 63
57133: IN
57134: NOT
57135: PUSH
57136: LD_EXP 64
57140: NOT
57141: OR
57142: PUSH
57143: LD_EXP 37
57147: NOT
57148: OR
57149: IFFALSE 57153
// exit ;
57151: GO 57422
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
57153: LD_ADDR_EXP 64
57157: PUSH
57158: LD_EXP 64
57162: PPUSH
57163: LD_VAR 0 4
57167: PPUSH
57168: LD_EXP 64
57172: PUSH
57173: LD_VAR 0 4
57177: ARRAY
57178: PUSH
57179: LD_VAR 0 1
57183: DIFF
57184: PPUSH
57185: CALL_OW 1
57189: ST_TO_ADDR
// for i = 1 to mc_bases do
57190: LD_ADDR_VAR 0 5
57194: PUSH
57195: DOUBLE
57196: LD_INT 1
57198: DEC
57199: ST_TO_ADDR
57200: LD_EXP 37
57204: PUSH
57205: FOR_TO
57206: IFFALSE 57420
// begin if lab in mc_bases [ i ] then
57208: LD_VAR 0 2
57212: PUSH
57213: LD_EXP 37
57217: PUSH
57218: LD_VAR 0 5
57222: ARRAY
57223: IN
57224: IFFALSE 57418
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] and not mc_tech [ side ] [ 2 ] in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] then
57226: LD_VAR 0 1
57230: PUSH
57231: LD_INT 11
57233: PUSH
57234: LD_INT 4
57236: PUSH
57237: LD_INT 3
57239: PUSH
57240: LD_INT 2
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: IN
57249: PUSH
57250: LD_EXP 67
57254: PUSH
57255: LD_VAR 0 5
57259: ARRAY
57260: AND
57261: PUSH
57262: LD_EXP 64
57266: PUSH
57267: LD_VAR 0 4
57271: ARRAY
57272: PUSH
57273: LD_INT 2
57275: ARRAY
57276: PUSH
57277: LD_INT 11
57279: PUSH
57280: LD_INT 4
57282: PUSH
57283: LD_INT 3
57285: PUSH
57286: LD_INT 2
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: IN
57295: NOT
57296: AND
57297: IFFALSE 57418
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
57299: LD_ADDR_VAR 0 6
57303: PUSH
57304: LD_EXP 67
57308: PUSH
57309: LD_VAR 0 5
57313: ARRAY
57314: PUSH
57315: LD_INT 1
57317: ARRAY
57318: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
57319: LD_ADDR_EXP 67
57323: PUSH
57324: LD_EXP 67
57328: PPUSH
57329: LD_VAR 0 5
57333: PPUSH
57334: EMPTY
57335: PPUSH
57336: CALL_OW 1
57340: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
57341: LD_VAR 0 6
57345: PPUSH
57346: LD_INT 0
57348: PPUSH
57349: CALL_OW 109
// ComExitBuilding ( tmp ) ;
57353: LD_VAR 0 6
57357: PPUSH
57358: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
57362: LD_ADDR_EXP 66
57366: PUSH
57367: LD_EXP 66
57371: PPUSH
57372: LD_VAR 0 5
57376: PPUSH
57377: LD_EXP 66
57381: PUSH
57382: LD_VAR 0 5
57386: ARRAY
57387: PPUSH
57388: LD_INT 1
57390: PPUSH
57391: LD_VAR 0 6
57395: PPUSH
57396: CALL_OW 2
57400: PPUSH
57401: CALL_OW 1
57405: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
57406: LD_VAR 0 5
57410: PPUSH
57411: LD_INT 112
57413: PPUSH
57414: CALL 43318 0 2
// end ; end ; end ;
57418: GO 57205
57420: POP
57421: POP
// end ;
57422: LD_VAR 0 3
57426: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
57427: LD_INT 0
57429: PPUSH
57430: PPUSH
57431: PPUSH
57432: PPUSH
57433: PPUSH
57434: PPUSH
57435: PPUSH
57436: PPUSH
// if not mc_bases then
57437: LD_EXP 37
57441: NOT
57442: IFFALSE 57446
// exit ;
57444: GO 58371
// for i = 1 to mc_bases do
57446: LD_ADDR_VAR 0 3
57450: PUSH
57451: DOUBLE
57452: LD_INT 1
57454: DEC
57455: ST_TO_ADDR
57456: LD_EXP 37
57460: PUSH
57461: FOR_TO
57462: IFFALSE 58369
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
57464: LD_VAR 0 1
57468: PUSH
57469: LD_EXP 37
57473: PUSH
57474: LD_VAR 0 3
57478: ARRAY
57479: IN
57480: PUSH
57481: LD_VAR 0 1
57485: PUSH
57486: LD_EXP 44
57490: PUSH
57491: LD_VAR 0 3
57495: ARRAY
57496: IN
57497: OR
57498: PUSH
57499: LD_VAR 0 1
57503: PUSH
57504: LD_EXP 56
57508: PUSH
57509: LD_VAR 0 3
57513: ARRAY
57514: IN
57515: OR
57516: PUSH
57517: LD_VAR 0 1
57521: PUSH
57522: LD_EXP 66
57526: PUSH
57527: LD_VAR 0 3
57531: ARRAY
57532: IN
57533: OR
57534: PUSH
57535: LD_VAR 0 1
57539: PUSH
57540: LD_EXP 67
57544: PUSH
57545: LD_VAR 0 3
57549: ARRAY
57550: IN
57551: OR
57552: IFFALSE 58367
// begin if un in mc_ape [ i ] then
57554: LD_VAR 0 1
57558: PUSH
57559: LD_EXP 66
57563: PUSH
57564: LD_VAR 0 3
57568: ARRAY
57569: IN
57570: IFFALSE 57609
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
57572: LD_ADDR_EXP 66
57576: PUSH
57577: LD_EXP 66
57581: PPUSH
57582: LD_VAR 0 3
57586: PPUSH
57587: LD_EXP 66
57591: PUSH
57592: LD_VAR 0 3
57596: ARRAY
57597: PUSH
57598: LD_VAR 0 1
57602: DIFF
57603: PPUSH
57604: CALL_OW 1
57608: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
57609: LD_VAR 0 1
57613: PUSH
57614: LD_EXP 67
57618: PUSH
57619: LD_VAR 0 3
57623: ARRAY
57624: IN
57625: IFFALSE 57649
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
57627: LD_ADDR_EXP 67
57631: PUSH
57632: LD_EXP 67
57636: PPUSH
57637: LD_VAR 0 3
57641: PPUSH
57642: EMPTY
57643: PPUSH
57644: CALL_OW 1
57648: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
57649: LD_VAR 0 1
57653: PPUSH
57654: CALL_OW 247
57658: PUSH
57659: LD_INT 2
57661: EQUAL
57662: PUSH
57663: LD_VAR 0 1
57667: PPUSH
57668: CALL_OW 110
57672: PUSH
57673: LD_INT 20
57675: EQUAL
57676: AND
57677: IFFALSE 57780
// begin fac := MC_GetBuilding ( i , b_factory ) ;
57679: LD_ADDR_VAR 0 8
57683: PUSH
57684: LD_VAR 0 3
57688: PPUSH
57689: LD_INT 3
57691: PPUSH
57692: CALL 55414 0 2
57696: ST_TO_ADDR
// if fac then
57697: LD_VAR 0 8
57701: IFFALSE 57780
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
57703: LD_ADDR_VAR 0 9
57707: PUSH
57708: LD_VAR 0 8
57712: PPUSH
57713: LD_VAR 0 1
57717: PPUSH
57718: CALL_OW 265
57722: PPUSH
57723: LD_VAR 0 1
57727: PPUSH
57728: CALL_OW 262
57732: PPUSH
57733: LD_VAR 0 1
57737: PPUSH
57738: CALL_OW 263
57742: PPUSH
57743: LD_VAR 0 1
57747: PPUSH
57748: CALL_OW 264
57752: PPUSH
57753: CALL 8041 0 5
57757: ST_TO_ADDR
// if components then
57758: LD_VAR 0 9
57762: IFFALSE 57778
// MC_InsertProduceList ( i , components ) ;
57764: LD_VAR 0 3
57768: PPUSH
57769: LD_VAR 0 9
57773: PPUSH
57774: CALL 55077 0 2
// break ;
57778: GO 58369
// end ; end ; if GetType ( un ) = unit_building then
57780: LD_VAR 0 1
57784: PPUSH
57785: CALL_OW 247
57789: PUSH
57790: LD_INT 3
57792: EQUAL
57793: IFFALSE 58090
// begin btype := GetBType ( un ) ;
57795: LD_ADDR_VAR 0 5
57799: PUSH
57800: LD_VAR 0 1
57804: PPUSH
57805: CALL_OW 266
57809: ST_TO_ADDR
// if btype = b_warehouse then
57810: LD_VAR 0 5
57814: PUSH
57815: LD_INT 1
57817: EQUAL
57818: IFFALSE 57836
// begin btype := b_depot ;
57820: LD_ADDR_VAR 0 5
57824: PUSH
57825: LD_INT 0
57827: ST_TO_ADDR
// pos := 1 ;
57828: LD_ADDR_VAR 0 6
57832: PUSH
57833: LD_INT 1
57835: ST_TO_ADDR
// end ; if btype = b_factory then
57836: LD_VAR 0 5
57840: PUSH
57841: LD_INT 3
57843: EQUAL
57844: IFFALSE 57862
// begin btype := b_workshop ;
57846: LD_ADDR_VAR 0 5
57850: PUSH
57851: LD_INT 2
57853: ST_TO_ADDR
// pos := 1 ;
57854: LD_ADDR_VAR 0 6
57858: PUSH
57859: LD_INT 1
57861: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
57862: LD_VAR 0 5
57866: PUSH
57867: LD_INT 7
57869: PUSH
57870: LD_INT 8
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: IN
57877: IFFALSE 57887
// btype := b_lab ;
57879: LD_ADDR_VAR 0 5
57883: PUSH
57884: LD_INT 6
57886: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
57887: LD_ADDR_EXP 42
57891: PUSH
57892: LD_EXP 42
57896: PPUSH
57897: LD_VAR 0 3
57901: PUSH
57902: LD_EXP 42
57906: PUSH
57907: LD_VAR 0 3
57911: ARRAY
57912: PUSH
57913: LD_INT 1
57915: PLUS
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PPUSH
57921: LD_VAR 0 5
57925: PUSH
57926: LD_VAR 0 1
57930: PPUSH
57931: CALL_OW 250
57935: PUSH
57936: LD_VAR 0 1
57940: PPUSH
57941: CALL_OW 251
57945: PUSH
57946: LD_VAR 0 1
57950: PPUSH
57951: CALL_OW 254
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: PPUSH
57962: CALL 10876 0 3
57966: ST_TO_ADDR
// if pos = 1 then
57967: LD_VAR 0 6
57971: PUSH
57972: LD_INT 1
57974: EQUAL
57975: IFFALSE 58090
// begin tmp := mc_build_list [ i ] ;
57977: LD_ADDR_VAR 0 7
57981: PUSH
57982: LD_EXP 42
57986: PUSH
57987: LD_VAR 0 3
57991: ARRAY
57992: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
57993: LD_VAR 0 7
57997: PPUSH
57998: LD_INT 2
58000: PUSH
58001: LD_INT 30
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 30
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: LIST
58025: PPUSH
58026: CALL_OW 72
58030: IFFALSE 58040
// pos := 2 ;
58032: LD_ADDR_VAR 0 6
58036: PUSH
58037: LD_INT 2
58039: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
58040: LD_ADDR_VAR 0 7
58044: PUSH
58045: LD_VAR 0 7
58049: PPUSH
58050: LD_VAR 0 6
58054: PPUSH
58055: LD_VAR 0 7
58059: PPUSH
58060: CALL 10767 0 3
58064: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
58065: LD_ADDR_EXP 42
58069: PUSH
58070: LD_EXP 42
58074: PPUSH
58075: LD_VAR 0 3
58079: PPUSH
58080: LD_VAR 0 7
58084: PPUSH
58085: CALL_OW 1
58089: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
58090: LD_VAR 0 1
58094: PUSH
58095: LD_EXP 37
58099: PUSH
58100: LD_VAR 0 3
58104: ARRAY
58105: IN
58106: IFFALSE 58145
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
58108: LD_ADDR_EXP 37
58112: PUSH
58113: LD_EXP 37
58117: PPUSH
58118: LD_VAR 0 3
58122: PPUSH
58123: LD_EXP 37
58127: PUSH
58128: LD_VAR 0 3
58132: ARRAY
58133: PUSH
58134: LD_VAR 0 1
58138: DIFF
58139: PPUSH
58140: CALL_OW 1
58144: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
58145: LD_VAR 0 1
58149: PUSH
58150: LD_EXP 44
58154: PUSH
58155: LD_VAR 0 3
58159: ARRAY
58160: IN
58161: IFFALSE 58200
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
58163: LD_ADDR_EXP 44
58167: PUSH
58168: LD_EXP 44
58172: PPUSH
58173: LD_VAR 0 3
58177: PPUSH
58178: LD_EXP 44
58182: PUSH
58183: LD_VAR 0 3
58187: ARRAY
58188: PUSH
58189: LD_VAR 0 1
58193: DIFF
58194: PPUSH
58195: CALL_OW 1
58199: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
58200: LD_VAR 0 1
58204: PUSH
58205: LD_EXP 56
58209: PUSH
58210: LD_VAR 0 3
58214: ARRAY
58215: IN
58216: IFFALSE 58255
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
58218: LD_ADDR_EXP 56
58222: PUSH
58223: LD_EXP 56
58227: PPUSH
58228: LD_VAR 0 3
58232: PPUSH
58233: LD_EXP 56
58237: PUSH
58238: LD_VAR 0 3
58242: ARRAY
58243: PUSH
58244: LD_VAR 0 1
58248: DIFF
58249: PPUSH
58250: CALL_OW 1
58254: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
58255: LD_VAR 0 1
58259: PUSH
58260: LD_EXP 46
58264: PUSH
58265: LD_VAR 0 3
58269: ARRAY
58270: IN
58271: IFFALSE 58310
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
58273: LD_ADDR_EXP 46
58277: PUSH
58278: LD_EXP 46
58282: PPUSH
58283: LD_VAR 0 3
58287: PPUSH
58288: LD_EXP 46
58292: PUSH
58293: LD_VAR 0 3
58297: ARRAY
58298: PUSH
58299: LD_VAR 0 1
58303: DIFF
58304: PPUSH
58305: CALL_OW 1
58309: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
58310: LD_VAR 0 1
58314: PUSH
58315: LD_EXP 45
58319: PUSH
58320: LD_VAR 0 3
58324: ARRAY
58325: IN
58326: IFFALSE 58365
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
58328: LD_ADDR_EXP 45
58332: PUSH
58333: LD_EXP 45
58337: PPUSH
58338: LD_VAR 0 3
58342: PPUSH
58343: LD_EXP 45
58347: PUSH
58348: LD_VAR 0 3
58352: ARRAY
58353: PUSH
58354: LD_VAR 0 1
58358: DIFF
58359: PPUSH
58360: CALL_OW 1
58364: ST_TO_ADDR
// end ; break ;
58365: GO 58369
// end ;
58367: GO 57461
58369: POP
58370: POP
// end ;
58371: LD_VAR 0 2
58375: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
58376: LD_INT 0
58378: PPUSH
58379: PPUSH
58380: PPUSH
// if not mc_bases then
58381: LD_EXP 37
58385: NOT
58386: IFFALSE 58390
// exit ;
58388: GO 58605
// for i = 1 to mc_bases do
58390: LD_ADDR_VAR 0 3
58394: PUSH
58395: DOUBLE
58396: LD_INT 1
58398: DEC
58399: ST_TO_ADDR
58400: LD_EXP 37
58404: PUSH
58405: FOR_TO
58406: IFFALSE 58603
// begin if building in mc_construct_list [ i ] then
58408: LD_VAR 0 1
58412: PUSH
58413: LD_EXP 44
58417: PUSH
58418: LD_VAR 0 3
58422: ARRAY
58423: IN
58424: IFFALSE 58601
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
58426: LD_ADDR_EXP 44
58430: PUSH
58431: LD_EXP 44
58435: PPUSH
58436: LD_VAR 0 3
58440: PPUSH
58441: LD_EXP 44
58445: PUSH
58446: LD_VAR 0 3
58450: ARRAY
58451: PUSH
58452: LD_VAR 0 1
58456: DIFF
58457: PPUSH
58458: CALL_OW 1
58462: ST_TO_ADDR
// if building in mc_lab [ i ] then
58463: LD_VAR 0 1
58467: PUSH
58468: LD_EXP 70
58472: PUSH
58473: LD_VAR 0 3
58477: ARRAY
58478: IN
58479: IFFALSE 58534
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
58481: LD_ADDR_EXP 71
58485: PUSH
58486: LD_EXP 71
58490: PPUSH
58491: LD_VAR 0 3
58495: PPUSH
58496: LD_EXP 71
58500: PUSH
58501: LD_VAR 0 3
58505: ARRAY
58506: PPUSH
58507: LD_INT 1
58509: PPUSH
58510: LD_EXP 71
58514: PUSH
58515: LD_VAR 0 3
58519: ARRAY
58520: PPUSH
58521: LD_INT 0
58523: PPUSH
58524: CALL 9859 0 4
58528: PPUSH
58529: CALL_OW 1
58533: ST_TO_ADDR
// if not building in mc_bases [ i ] then
58534: LD_VAR 0 1
58538: PUSH
58539: LD_EXP 37
58543: PUSH
58544: LD_VAR 0 3
58548: ARRAY
58549: IN
58550: NOT
58551: IFFALSE 58597
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
58553: LD_ADDR_EXP 37
58557: PUSH
58558: LD_EXP 37
58562: PPUSH
58563: LD_VAR 0 3
58567: PUSH
58568: LD_EXP 37
58572: PUSH
58573: LD_VAR 0 3
58577: ARRAY
58578: PUSH
58579: LD_INT 1
58581: PLUS
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PPUSH
58587: LD_VAR 0 1
58591: PPUSH
58592: CALL 10876 0 3
58596: ST_TO_ADDR
// exit ;
58597: POP
58598: POP
58599: GO 58605
// end ; end ;
58601: GO 58405
58603: POP
58604: POP
// end ;
58605: LD_VAR 0 2
58609: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
58610: LD_INT 0
58612: PPUSH
58613: PPUSH
58614: PPUSH
58615: PPUSH
58616: PPUSH
58617: PPUSH
58618: PPUSH
// if not mc_bases then
58619: LD_EXP 37
58623: NOT
58624: IFFALSE 58628
// exit ;
58626: GO 59289
// for i = 1 to mc_bases do
58628: LD_ADDR_VAR 0 3
58632: PUSH
58633: DOUBLE
58634: LD_INT 1
58636: DEC
58637: ST_TO_ADDR
58638: LD_EXP 37
58642: PUSH
58643: FOR_TO
58644: IFFALSE 59287
// begin if building in mc_construct_list [ i ] then
58646: LD_VAR 0 1
58650: PUSH
58651: LD_EXP 44
58655: PUSH
58656: LD_VAR 0 3
58660: ARRAY
58661: IN
58662: IFFALSE 59285
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
58664: LD_ADDR_EXP 44
58668: PUSH
58669: LD_EXP 44
58673: PPUSH
58674: LD_VAR 0 3
58678: PPUSH
58679: LD_EXP 44
58683: PUSH
58684: LD_VAR 0 3
58688: ARRAY
58689: PUSH
58690: LD_VAR 0 1
58694: DIFF
58695: PPUSH
58696: CALL_OW 1
58700: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
58701: LD_ADDR_EXP 37
58705: PUSH
58706: LD_EXP 37
58710: PPUSH
58711: LD_VAR 0 3
58715: PUSH
58716: LD_EXP 37
58720: PUSH
58721: LD_VAR 0 3
58725: ARRAY
58726: PUSH
58727: LD_INT 1
58729: PLUS
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PPUSH
58735: LD_VAR 0 1
58739: PPUSH
58740: CALL 10876 0 3
58744: ST_TO_ADDR
// btype := GetBType ( building ) ;
58745: LD_ADDR_VAR 0 5
58749: PUSH
58750: LD_VAR 0 1
58754: PPUSH
58755: CALL_OW 266
58759: ST_TO_ADDR
// side := GetSide ( building ) ;
58760: LD_ADDR_VAR 0 8
58764: PUSH
58765: LD_VAR 0 1
58769: PPUSH
58770: CALL_OW 255
58774: ST_TO_ADDR
// if btype = b_lab then
58775: LD_VAR 0 5
58779: PUSH
58780: LD_INT 6
58782: EQUAL
58783: IFFALSE 58833
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
58785: LD_ADDR_EXP 70
58789: PUSH
58790: LD_EXP 70
58794: PPUSH
58795: LD_VAR 0 3
58799: PUSH
58800: LD_EXP 70
58804: PUSH
58805: LD_VAR 0 3
58809: ARRAY
58810: PUSH
58811: LD_INT 1
58813: PLUS
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PPUSH
58819: LD_VAR 0 1
58823: PPUSH
58824: CALL 10876 0 3
58828: ST_TO_ADDR
// exit ;
58829: POP
58830: POP
58831: GO 59289
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
58833: LD_VAR 0 5
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: LD_INT 2
58843: PUSH
58844: LD_INT 4
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: LIST
58851: IN
58852: IFFALSE 58976
// begin if btype = b_armoury then
58854: LD_VAR 0 5
58858: PUSH
58859: LD_INT 4
58861: EQUAL
58862: IFFALSE 58872
// btype := b_barracks ;
58864: LD_ADDR_VAR 0 5
58868: PUSH
58869: LD_INT 5
58871: ST_TO_ADDR
// if btype = b_depot then
58872: LD_VAR 0 5
58876: PUSH
58877: LD_INT 0
58879: EQUAL
58880: IFFALSE 58890
// btype := b_warehouse ;
58882: LD_ADDR_VAR 0 5
58886: PUSH
58887: LD_INT 1
58889: ST_TO_ADDR
// if btype = b_workshop then
58890: LD_VAR 0 5
58894: PUSH
58895: LD_INT 2
58897: EQUAL
58898: IFFALSE 58908
// btype := b_factory ;
58900: LD_ADDR_VAR 0 5
58904: PUSH
58905: LD_INT 3
58907: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
58908: LD_VAR 0 5
58912: PPUSH
58913: LD_VAR 0 8
58917: PPUSH
58918: CALL_OW 323
58922: PUSH
58923: LD_INT 1
58925: EQUAL
58926: IFFALSE 58972
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
58928: LD_ADDR_EXP 69
58932: PUSH
58933: LD_EXP 69
58937: PPUSH
58938: LD_VAR 0 3
58942: PUSH
58943: LD_EXP 69
58947: PUSH
58948: LD_VAR 0 3
58952: ARRAY
58953: PUSH
58954: LD_INT 1
58956: PLUS
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PPUSH
58962: LD_VAR 0 1
58966: PPUSH
58967: CALL 10876 0 3
58971: ST_TO_ADDR
// exit ;
58972: POP
58973: POP
58974: GO 59289
// end ; if btype in [ b_bunker , b_turret ] then
58976: LD_VAR 0 5
58980: PUSH
58981: LD_INT 32
58983: PUSH
58984: LD_INT 33
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: IN
58991: IFFALSE 59281
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
58993: LD_ADDR_EXP 45
58997: PUSH
58998: LD_EXP 45
59002: PPUSH
59003: LD_VAR 0 3
59007: PUSH
59008: LD_EXP 45
59012: PUSH
59013: LD_VAR 0 3
59017: ARRAY
59018: PUSH
59019: LD_INT 1
59021: PLUS
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PPUSH
59027: LD_VAR 0 1
59031: PPUSH
59032: CALL 10876 0 3
59036: ST_TO_ADDR
// if btype = b_bunker then
59037: LD_VAR 0 5
59041: PUSH
59042: LD_INT 32
59044: EQUAL
59045: IFFALSE 59281
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
59047: LD_ADDR_EXP 46
59051: PUSH
59052: LD_EXP 46
59056: PPUSH
59057: LD_VAR 0 3
59061: PUSH
59062: LD_EXP 46
59066: PUSH
59067: LD_VAR 0 3
59071: ARRAY
59072: PUSH
59073: LD_INT 1
59075: PLUS
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PPUSH
59081: LD_VAR 0 1
59085: PPUSH
59086: CALL 10876 0 3
59090: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
59091: LD_ADDR_VAR 0 6
59095: PUSH
59096: LD_EXP 37
59100: PUSH
59101: LD_VAR 0 3
59105: ARRAY
59106: PPUSH
59107: LD_INT 25
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 3
59119: PUSH
59120: LD_INT 54
59122: PUSH
59123: EMPTY
59124: LIST
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PPUSH
59134: CALL_OW 72
59138: ST_TO_ADDR
// if tmp then
59139: LD_VAR 0 6
59143: IFFALSE 59149
// exit ;
59145: POP
59146: POP
59147: GO 59289
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
59149: LD_ADDR_VAR 0 6
59153: PUSH
59154: LD_EXP 37
59158: PUSH
59159: LD_VAR 0 3
59163: ARRAY
59164: PPUSH
59165: LD_INT 2
59167: PUSH
59168: LD_INT 30
59170: PUSH
59171: LD_INT 4
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 30
59180: PUSH
59181: LD_INT 5
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: LIST
59192: PPUSH
59193: CALL_OW 72
59197: ST_TO_ADDR
// if not tmp then
59198: LD_VAR 0 6
59202: NOT
59203: IFFALSE 59209
// exit ;
59205: POP
59206: POP
59207: GO 59289
// for j in tmp do
59209: LD_ADDR_VAR 0 4
59213: PUSH
59214: LD_VAR 0 6
59218: PUSH
59219: FOR_IN
59220: IFFALSE 59279
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
59222: LD_ADDR_VAR 0 7
59226: PUSH
59227: LD_VAR 0 4
59231: PPUSH
59232: CALL_OW 313
59236: PPUSH
59237: LD_INT 25
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PPUSH
59247: CALL_OW 72
59251: ST_TO_ADDR
// if units then
59252: LD_VAR 0 7
59256: IFFALSE 59277
// begin ComExitBuilding ( units [ 1 ] ) ;
59258: LD_VAR 0 7
59262: PUSH
59263: LD_INT 1
59265: ARRAY
59266: PPUSH
59267: CALL_OW 122
// exit ;
59271: POP
59272: POP
59273: POP
59274: POP
59275: GO 59289
// end ; end ;
59277: GO 59219
59279: POP
59280: POP
// end ; end ; exit ;
59281: POP
59282: POP
59283: GO 59289
// end ; end ;
59285: GO 58643
59287: POP
59288: POP
// end ;
59289: LD_VAR 0 2
59293: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
59294: LD_INT 0
59296: PPUSH
59297: PPUSH
59298: PPUSH
59299: PPUSH
59300: PPUSH
59301: PPUSH
59302: PPUSH
// if not mc_bases then
59303: LD_EXP 37
59307: NOT
59308: IFFALSE 59312
// exit ;
59310: GO 59543
// btype := GetBType ( building ) ;
59312: LD_ADDR_VAR 0 6
59316: PUSH
59317: LD_VAR 0 1
59321: PPUSH
59322: CALL_OW 266
59326: ST_TO_ADDR
// x := GetX ( building ) ;
59327: LD_ADDR_VAR 0 7
59331: PUSH
59332: LD_VAR 0 1
59336: PPUSH
59337: CALL_OW 250
59341: ST_TO_ADDR
// y := GetY ( building ) ;
59342: LD_ADDR_VAR 0 8
59346: PUSH
59347: LD_VAR 0 1
59351: PPUSH
59352: CALL_OW 251
59356: ST_TO_ADDR
// d := GetDir ( building ) ;
59357: LD_ADDR_VAR 0 9
59361: PUSH
59362: LD_VAR 0 1
59366: PPUSH
59367: CALL_OW 254
59371: ST_TO_ADDR
// for i = 1 to mc_bases do
59372: LD_ADDR_VAR 0 4
59376: PUSH
59377: DOUBLE
59378: LD_INT 1
59380: DEC
59381: ST_TO_ADDR
59382: LD_EXP 37
59386: PUSH
59387: FOR_TO
59388: IFFALSE 59541
// begin if not mc_build_list [ i ] then
59390: LD_EXP 42
59394: PUSH
59395: LD_VAR 0 4
59399: ARRAY
59400: NOT
59401: IFFALSE 59405
// continue ;
59403: GO 59387
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
59405: LD_VAR 0 6
59409: PUSH
59410: LD_VAR 0 7
59414: PUSH
59415: LD_VAR 0 8
59419: PUSH
59420: LD_VAR 0 9
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: PPUSH
59431: LD_EXP 42
59435: PUSH
59436: LD_VAR 0 4
59440: ARRAY
59441: PUSH
59442: LD_INT 1
59444: ARRAY
59445: PPUSH
59446: CALL 16474 0 2
59450: IFFALSE 59539
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
59452: LD_ADDR_EXP 42
59456: PUSH
59457: LD_EXP 42
59461: PPUSH
59462: LD_VAR 0 4
59466: PPUSH
59467: LD_EXP 42
59471: PUSH
59472: LD_VAR 0 4
59476: ARRAY
59477: PPUSH
59478: LD_INT 1
59480: PPUSH
59481: CALL_OW 3
59485: PPUSH
59486: CALL_OW 1
59490: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
59491: LD_ADDR_EXP 44
59495: PUSH
59496: LD_EXP 44
59500: PPUSH
59501: LD_VAR 0 4
59505: PUSH
59506: LD_EXP 44
59510: PUSH
59511: LD_VAR 0 4
59515: ARRAY
59516: PUSH
59517: LD_INT 1
59519: PLUS
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PPUSH
59525: LD_VAR 0 1
59529: PPUSH
59530: CALL 10876 0 3
59534: ST_TO_ADDR
// exit ;
59535: POP
59536: POP
59537: GO 59543
// end ; end ;
59539: GO 59387
59541: POP
59542: POP
// end ;
59543: LD_VAR 0 3
59547: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
59548: LD_INT 0
59550: PPUSH
59551: PPUSH
59552: PPUSH
// if not mc_bases then
59553: LD_EXP 37
59557: NOT
59558: IFFALSE 59562
// exit ;
59560: GO 59752
// for i = 1 to mc_bases do
59562: LD_ADDR_VAR 0 4
59566: PUSH
59567: DOUBLE
59568: LD_INT 1
59570: DEC
59571: ST_TO_ADDR
59572: LD_EXP 37
59576: PUSH
59577: FOR_TO
59578: IFFALSE 59665
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
59580: LD_VAR 0 1
59584: PUSH
59585: LD_EXP 45
59589: PUSH
59590: LD_VAR 0 4
59594: ARRAY
59595: IN
59596: PUSH
59597: LD_VAR 0 1
59601: PUSH
59602: LD_EXP 46
59606: PUSH
59607: LD_VAR 0 4
59611: ARRAY
59612: IN
59613: NOT
59614: AND
59615: IFFALSE 59663
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
59617: LD_ADDR_EXP 46
59621: PUSH
59622: LD_EXP 46
59626: PPUSH
59627: LD_VAR 0 4
59631: PUSH
59632: LD_EXP 46
59636: PUSH
59637: LD_VAR 0 4
59641: ARRAY
59642: PUSH
59643: LD_INT 1
59645: PLUS
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PPUSH
59651: LD_VAR 0 1
59655: PPUSH
59656: CALL 10876 0 3
59660: ST_TO_ADDR
// break ;
59661: GO 59665
// end ; end ;
59663: GO 59577
59665: POP
59666: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
59667: LD_VAR 0 1
59671: PPUSH
59672: CALL_OW 257
59676: PUSH
59677: LD_EXP 63
59681: IN
59682: PUSH
59683: LD_VAR 0 1
59687: PPUSH
59688: CALL_OW 266
59692: PUSH
59693: LD_INT 5
59695: EQUAL
59696: AND
59697: PUSH
59698: LD_VAR 0 2
59702: PPUSH
59703: CALL_OW 110
59707: PUSH
59708: LD_INT 18
59710: NONEQUAL
59711: AND
59712: IFFALSE 59752
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
59714: LD_VAR 0 2
59718: PPUSH
59719: CALL_OW 257
59723: PUSH
59724: LD_INT 5
59726: PUSH
59727: LD_INT 8
59729: PUSH
59730: LD_INT 9
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: LIST
59737: IN
59738: IFFALSE 59752
// SetClass ( unit , 1 ) ;
59740: LD_VAR 0 2
59744: PPUSH
59745: LD_INT 1
59747: PPUSH
59748: CALL_OW 336
// end ;
59752: LD_VAR 0 3
59756: RET
// export function MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
59757: LD_INT 0
59759: PPUSH
59760: PPUSH
// if not mc_bases then
59761: LD_EXP 37
59765: NOT
59766: IFFALSE 59770
// exit ;
59768: GO 59886
// if GetLives ( abandoned_vehicle ) > 250 then
59770: LD_VAR 0 2
59774: PPUSH
59775: CALL_OW 256
59779: PUSH
59780: LD_INT 250
59782: GREATER
59783: IFFALSE 59787
// exit ;
59785: GO 59886
// for i = 1 to mc_bases do
59787: LD_ADDR_VAR 0 6
59791: PUSH
59792: DOUBLE
59793: LD_INT 1
59795: DEC
59796: ST_TO_ADDR
59797: LD_EXP 37
59801: PUSH
59802: FOR_TO
59803: IFFALSE 59884
// begin if driver in mc_bases [ i ] then
59805: LD_VAR 0 1
59809: PUSH
59810: LD_EXP 37
59814: PUSH
59815: LD_VAR 0 6
59819: ARRAY
59820: IN
59821: IFFALSE 59882
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
59823: LD_VAR 0 1
59827: PPUSH
59828: LD_EXP 37
59832: PUSH
59833: LD_VAR 0 6
59837: ARRAY
59838: PPUSH
59839: LD_INT 2
59841: PUSH
59842: LD_INT 30
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 30
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: LIST
59866: PPUSH
59867: CALL_OW 72
59871: PUSH
59872: LD_INT 1
59874: ARRAY
59875: PPUSH
59876: CALL_OW 112
// break ;
59880: GO 59884
// end ; end ;
59882: GO 59802
59884: POP
59885: POP
// end ;
59886: LD_VAR 0 5
59890: RET
