// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitVariables ;
   8: CALL 587 0 0
// InitMacro ;
  12: CALL 52054 0 0
// PrepareNature ( 3 , 3 , 3 , 4 , 3 , 0 , 0 , nature_area , 0 ) ;
  16: LD_INT 3
  18: PPUSH
  19: LD_INT 3
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 4
  27: PPUSH
  28: LD_INT 3
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: LD_INT 5
  39: PPUSH
  40: LD_INT 0
  42: PPUSH
  43: CALL 47005 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_russian , 0 ) ;
  47: LD_INT 0
  49: PPUSH
  50: LD_INT 0
  52: PPUSH
  53: LD_INT 5
  55: PPUSH
  56: LD_INT 0
  58: PPUSH
  59: LD_INT 0
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: LD_INT 0
  67: PPUSH
  68: LD_INT 8
  70: PPUSH
  71: LD_INT 0
  73: PPUSH
  74: CALL 47005 0 9
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 1 , 0 , area_apeman_arabian , 0 ) ;
  78: LD_INT 0
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 6
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: LD_INT 0
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: LD_INT 6
 101: PPUSH
 102: LD_INT 0
 104: PPUSH
 105: CALL 47005 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_alliance , 0 ) ;
 109: LD_INT 0
 111: PPUSH
 112: LD_INT 0
 114: PPUSH
 115: LD_INT 5
 117: PPUSH
 118: LD_INT 0
 120: PPUSH
 121: LD_INT 0
 123: PPUSH
 124: LD_INT 0
 126: PPUSH
 127: LD_INT 0
 129: PPUSH
 130: LD_INT 12
 132: PPUSH
 133: LD_INT 0
 135: PPUSH
 136: CALL 47005 0 9
// PrepareArabian ;
 140: CALL 3423 0 0
// PrepareRussian ;
 144: CALL 2550 0 0
// PrepareAlliance ;
 148: CALL 697 0 0
// MC_Start ( ) ;
 152: CALL 53112 0 0
// if debug then
 156: LD_EXP 1
 160: IFFALSE 169
// FogOff ( 1 ) ;
 162: LD_INT 1
 164: PPUSH
 165: CALL_OW 344
// Action ;
 169: CALL 6588 0 0
// end ;
 173: END
// export function CustomInitMacro ; var i ; begin
 174: LD_INT 0
 176: PPUSH
 177: PPUSH
// mc_parking := [ parking_arabian , parking_russian ] ;
 178: LD_ADDR_EXP 81
 182: PUSH
 183: LD_INT 1
 185: PUSH
 186: LD_INT 2
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: ST_TO_ADDR
// mc_scan_area := [ area_base_arabian , area_base_russian ] ;
 193: LD_ADDR_EXP 82
 197: PUSH
 198: LD_INT 3
 200: PUSH
 201: LD_INT 4
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 12 , 15 , 18 ] [ Difficulty ] , minefield ) ;
 208: LD_INT 1
 210: PPUSH
 211: LD_INT 12
 213: PUSH
 214: LD_INT 15
 216: PUSH
 217: LD_INT 18
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: PUSH
 225: LD_OWVAR 67
 229: ARRAY
 230: PPUSH
 231: LD_INT 7
 233: PPUSH
 234: CALL 67664 0 3
// MC_SetDefenderList ( 1 , arabian_guard ) ;
 238: LD_INT 1
 240: PPUSH
 241: LD_EXP 53
 245: PPUSH
 246: CALL 68112 0 2
// MC_SetTame ( 1 , area_apeman_arabian ) ;
 250: LD_INT 1
 252: PPUSH
 253: LD_INT 6
 255: PPUSH
 256: CALL 68565 0 2
// MC_SetCratesArea ( 1 , [ area_collect_arabian ] ) ;
 260: LD_INT 1
 262: PPUSH
 263: LD_INT 9
 265: PUSH
 266: EMPTY
 267: LIST
 268: PPUSH
 269: CALL 68834 0 2
// MC_InsertProduceList ( 1 , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 13
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: LD_INT 2
 284: PUSH
 285: LD_INT 32
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL 68049 0 2
// MC_SetLabKind ( 2 , [ b_lab_computer , b_lab_spacetime , b_lab_weapon , b_lab_siberium ] ) ;
 298: LD_INT 2
 300: PPUSH
 301: LD_INT 12
 303: PUSH
 304: LD_INT 14
 306: PUSH
 307: LD_INT 10
 309: PUSH
 310: LD_INT 11
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: PPUSH
 319: CALL 68741 0 2
// MC_SetDefenderList ( 2 , russian_guard ) ;
 323: LD_INT 2
 325: PPUSH
 326: LD_EXP 50
 330: PPUSH
 331: CALL 68112 0 2
// MC_SetTame ( 2 , area_apeman_russian ) ;
 335: LD_INT 2
 337: PPUSH
 338: LD_INT 8
 340: PPUSH
 341: CALL 68565 0 2
// MC_SetCratesArea ( 2 , [ area_collect_russian ] ) ;
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 10
 350: PUSH
 351: EMPTY
 352: LIST
 353: PPUSH
 354: CALL 68834 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 71 , 116 , 4 ] , [ b_armoury , 85 , 116 , 4 ] , [ b_bunker , 83 , 111 , 4 ] , [ b_bunker , 87 , 121 , 4 ] , [ b_turret , 88 , 128 , 4 ] , [ b_bunker , 59 , 89 , 3 ] , [ b_turret , 69 , 98 , 3 ] , [ b_turret , 77 , 103 , 3 ] , [ b_turret , 83 , 105 , 3 ] , [ b_turret , 71 , 125 , 5 ] ] ) ;
 358: LD_INT 2
 360: PPUSH
 361: LD_INT 6
 363: PUSH
 364: LD_INT 71
 366: PUSH
 367: LD_INT 116
 369: PUSH
 370: LD_INT 4
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_INT 4
 381: PUSH
 382: LD_INT 85
 384: PUSH
 385: LD_INT 116
 387: PUSH
 388: LD_INT 4
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 32
 399: PUSH
 400: LD_INT 83
 402: PUSH
 403: LD_INT 111
 405: PUSH
 406: LD_INT 4
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 32
 417: PUSH
 418: LD_INT 87
 420: PUSH
 421: LD_INT 121
 423: PUSH
 424: LD_INT 4
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 33
 435: PUSH
 436: LD_INT 88
 438: PUSH
 439: LD_INT 128
 441: PUSH
 442: LD_INT 4
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 32
 453: PUSH
 454: LD_INT 59
 456: PUSH
 457: LD_INT 89
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 33
 471: PUSH
 472: LD_INT 69
 474: PUSH
 475: LD_INT 98
 477: PUSH
 478: LD_INT 3
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 33
 489: PUSH
 490: LD_INT 77
 492: PUSH
 493: LD_INT 103
 495: PUSH
 496: LD_INT 3
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_INT 33
 507: PUSH
 508: LD_INT 83
 510: PUSH
 511: LD_INT 105
 513: PUSH
 514: LD_INT 3
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 33
 525: PUSH
 526: LD_INT 71
 528: PUSH
 529: LD_INT 125
 531: PUSH
 532: LD_INT 5
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL 67874 0 2
// MC_InsertProduceList ( 2 , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ) ;
 557: LD_INT 2
 559: PPUSH
 560: LD_INT 21
 562: PUSH
 563: LD_INT 1
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 51
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL 68049 0 2
// end ;
 582: LD_VAR 0 1
 586: RET
// export debug , game , freedom , gossudarov_arrive , ru_lab_builded , player_spotted , first_attack , ar_base_spotted , ar_active_attack , ar_attackers , first_powell_attack , abdul_escaped , loss_counter ; function InitVariables ; begin
 587: LD_INT 0
 589: PPUSH
// debug := false ;
 590: LD_ADDR_EXP 1
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// game := true ;
 598: LD_ADDR_EXP 2
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// gossudarov_arrive := false ;
 606: LD_ADDR_EXP 4
 610: PUSH
 611: LD_INT 0
 613: ST_TO_ADDR
// ru_lab_builded := false ;
 614: LD_ADDR_EXP 5
 618: PUSH
 619: LD_INT 0
 621: ST_TO_ADDR
// player_spotted := false ;
 622: LD_ADDR_EXP 6
 626: PUSH
 627: LD_INT 0
 629: ST_TO_ADDR
// first_attack := false ;
 630: LD_ADDR_EXP 7
 634: PUSH
 635: LD_INT 0
 637: ST_TO_ADDR
// ru_attackers := [ ] ;
 638: LD_ADDR_EXP 51
 642: PUSH
 643: EMPTY
 644: ST_TO_ADDR
// ar_base_spotted := false ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_INT 0
 652: ST_TO_ADDR
// ar_active_attack := false ;
 653: LD_ADDR_EXP 9
 657: PUSH
 658: LD_INT 0
 660: ST_TO_ADDR
// ar_attackers := [ ] ;
 661: LD_ADDR_EXP 10
 665: PUSH
 666: EMPTY
 667: ST_TO_ADDR
// first_powell_attack := false ;
 668: LD_ADDR_EXP 11
 672: PUSH
 673: LD_INT 0
 675: ST_TO_ADDR
// abdul_escaped := true ;
 676: LD_ADDR_EXP 12
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// loss_counter := 0 ;
 684: LD_ADDR_EXP 13
 688: PUSH
 689: LD_INT 0
 691: ST_TO_ADDR
// end ; end_of_file
 692: LD_VAR 0 1
 696: RET
// export JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export Gossudarov , Kirilenkova , Titov , Fadeev , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov ; export Burlak , Belkov , Gnyevko ; export Masha ; export function PrepareAlliance ; var veh , i , tmp ; begin
 697: LD_INT 0
 699: PPUSH
 700: PPUSH
 701: PPUSH
 702: PPUSH
// uc_side := 7 ;
 703: LD_ADDR_OWVAR 20
 707: PUSH
 708: LD_INT 7
 710: ST_TO_ADDR
// uc_nation := 1 ;
 711: LD_ADDR_OWVAR 21
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 12a_ ) ;
 719: LD_ADDR_EXP 14
 723: PUSH
 724: LD_STRING JMM
 726: PPUSH
 727: LD_EXP 1
 731: NOT
 732: PPUSH
 733: LD_STRING 12a_
 735: PPUSH
 736: CALL 13467 0 3
 740: ST_TO_ADDR
// PlaceUnitXY ( JMM , 71 , 23 , false ) ;
 741: LD_EXP 14
 745: PPUSH
 746: LD_INT 71
 748: PPUSH
 749: LD_INT 23
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL_OW 48
// SetClass ( JMM , 2 ) ;
 759: LD_EXP 14
 763: PPUSH
 764: LD_INT 2
 766: PPUSH
 767: CALL_OW 336
// Roth := PrepareUnit ( Roth , ( not debug ) , 12a_ ) ;
 771: LD_ADDR_EXP 15
 775: PUSH
 776: LD_STRING Roth
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_STRING 12a_
 787: PPUSH
 788: CALL 13467 0 3
 792: ST_TO_ADDR
// if Roth then
 793: LD_EXP 15
 797: IFFALSE 817
// PlaceUnitXY ( Roth , 71 , 21 , false ) ;
 799: LD_EXP 15
 803: PPUSH
 804: LD_INT 71
 806: PPUSH
 807: LD_INT 21
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL_OW 48
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 12a_ ) ;
 817: LD_ADDR_EXP 16
 821: PUSH
 822: LD_STRING Lisa
 824: PPUSH
 825: LD_EXP 1
 829: NOT
 830: PPUSH
 831: LD_STRING 12a_
 833: PPUSH
 834: CALL 13467 0 3
 838: ST_TO_ADDR
// if Lisa then
 839: LD_EXP 16
 843: IFFALSE 860
// PlaceUnitArea ( Lisa , alliance_start , false ) ;
 845: LD_EXP 16
 849: PPUSH
 850: LD_INT 13
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 49
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 12a_ ) ;
 860: LD_ADDR_EXP 17
 864: PUSH
 865: LD_STRING Donaldson
 867: PPUSH
 868: LD_EXP 1
 872: NOT
 873: PPUSH
 874: LD_STRING 12a_
 876: PPUSH
 877: CALL 13467 0 3
 881: ST_TO_ADDR
// if Donaldson then
 882: LD_EXP 17
 886: IFFALSE 903
// PlaceUnitArea ( Donaldson , alliance_start , false ) ;
 888: LD_EXP 17
 892: PPUSH
 893: LD_INT 13
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 49
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 12a_ ) ;
 903: LD_ADDR_EXP 18
 907: PUSH
 908: LD_STRING Bobby
 910: PPUSH
 911: LD_EXP 1
 915: NOT
 916: PPUSH
 917: LD_STRING 12a_
 919: PPUSH
 920: CALL 13467 0 3
 924: ST_TO_ADDR
// if Bobby then
 925: LD_EXP 18
 929: IFFALSE 946
// PlaceUnitArea ( Bobby , alliance_start , false ) ;
 931: LD_EXP 18
 935: PPUSH
 936: LD_INT 13
 938: PPUSH
 939: LD_INT 0
 941: PPUSH
 942: CALL_OW 49
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 12a_ ) ;
 946: LD_ADDR_EXP 19
 950: PUSH
 951: LD_STRING Cyrus
 953: PPUSH
 954: LD_EXP 1
 958: NOT
 959: PPUSH
 960: LD_STRING 12a_
 962: PPUSH
 963: CALL 13467 0 3
 967: ST_TO_ADDR
// if Cyrus then
 968: LD_EXP 19
 972: IFFALSE 989
// PlaceUnitArea ( Cyrus , alliance_start , false ) ;
 974: LD_EXP 19
 978: PPUSH
 979: LD_INT 13
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 49
// Denis := PrepareUnit ( Denis , ( not debug ) , 12a_ ) ;
 989: LD_ADDR_EXP 20
 993: PUSH
 994: LD_STRING Denis
 996: PPUSH
 997: LD_EXP 1
1001: NOT
1002: PPUSH
1003: LD_STRING 12a_
1005: PPUSH
1006: CALL 13467 0 3
1010: ST_TO_ADDR
// if Denis then
1011: LD_EXP 20
1015: IFFALSE 1032
// PlaceUnitArea ( Denis , alliance_start , false ) ;
1017: LD_EXP 20
1021: PPUSH
1022: LD_INT 13
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// Brown := PrepareUnit ( Brown , ( not debug ) , 12a_ ) ;
1032: LD_ADDR_EXP 21
1036: PUSH
1037: LD_STRING Brown
1039: PPUSH
1040: LD_EXP 1
1044: NOT
1045: PPUSH
1046: LD_STRING 12a_
1048: PPUSH
1049: CALL 13467 0 3
1053: ST_TO_ADDR
// if Brown then
1054: LD_EXP 21
1058: IFFALSE 1075
// PlaceUnitArea ( Brown , alliance_start , false ) ;
1060: LD_EXP 21
1064: PPUSH
1065: LD_INT 13
1067: PPUSH
1068: LD_INT 0
1070: PPUSH
1071: CALL_OW 49
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 12a_ ) ;
1075: LD_ADDR_EXP 22
1079: PUSH
1080: LD_STRING Gladstone
1082: PPUSH
1083: LD_EXP 1
1087: NOT
1088: PPUSH
1089: LD_STRING 12a_
1091: PPUSH
1092: CALL 13467 0 3
1096: ST_TO_ADDR
// if Gladstone then
1097: LD_EXP 22
1101: IFFALSE 1118
// PlaceUnitArea ( Gladstone , alliance_start , false ) ;
1103: LD_EXP 22
1107: PPUSH
1108: LD_INT 13
1110: PPUSH
1111: LD_INT 0
1113: PPUSH
1114: CALL_OW 49
// Houten := PrepareUnit ( Houten , ( not debug ) , 12a_ ) ;
1118: LD_ADDR_EXP 23
1122: PUSH
1123: LD_STRING Houten
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_STRING 12a_
1134: PPUSH
1135: CALL 13467 0 3
1139: ST_TO_ADDR
// if Houten then
1140: LD_EXP 23
1144: IFFALSE 1161
// PlaceUnitArea ( Houten , alliance_start , false ) ;
1146: LD_EXP 23
1150: PPUSH
1151: LD_INT 13
1153: PPUSH
1154: LD_INT 0
1156: PPUSH
1157: CALL_OW 49
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 12a_ ) ;
1161: LD_ADDR_EXP 24
1165: PUSH
1166: LD_STRING Cornel
1168: PPUSH
1169: LD_EXP 1
1173: NOT
1174: PPUSH
1175: LD_STRING 12a_
1177: PPUSH
1178: CALL 13467 0 3
1182: ST_TO_ADDR
// if Cornel then
1183: LD_EXP 24
1187: IFFALSE 1204
// PlaceUnitArea ( Cornel , alliance_start , false ) ;
1189: LD_EXP 24
1193: PPUSH
1194: LD_INT 13
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 49
// Gary := PrepareUnit ( Gary , ( not debug ) , 12a_ ) ;
1204: LD_ADDR_EXP 25
1208: PUSH
1209: LD_STRING Gary
1211: PPUSH
1212: LD_EXP 1
1216: NOT
1217: PPUSH
1218: LD_STRING 12a_
1220: PPUSH
1221: CALL 13467 0 3
1225: ST_TO_ADDR
// if Gary then
1226: LD_EXP 25
1230: IFFALSE 1247
// PlaceUnitArea ( Gary , alliance_start , false ) ;
1232: LD_EXP 25
1236: PPUSH
1237: LD_INT 13
1239: PPUSH
1240: LD_INT 0
1242: PPUSH
1243: CALL_OW 49
// Frank := PrepareUnit ( Frank , ( not debug ) , 12a_ ) ;
1247: LD_ADDR_EXP 26
1251: PUSH
1252: LD_STRING Frank
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_STRING 12a_
1263: PPUSH
1264: CALL 13467 0 3
1268: ST_TO_ADDR
// if Frank then
1269: LD_EXP 26
1273: IFFALSE 1290
// PlaceUnitArea ( Frank , alliance_start , false ) ;
1275: LD_EXP 26
1279: PPUSH
1280: LD_INT 13
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 49
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 12a_ ) ;
1290: LD_ADDR_EXP 27
1294: PUSH
1295: LD_STRING Kikuchi
1297: PPUSH
1298: LD_EXP 1
1302: NOT
1303: PPUSH
1304: LD_STRING 12a_
1306: PPUSH
1307: CALL 13467 0 3
1311: ST_TO_ADDR
// if Kikuchi then
1312: LD_EXP 27
1316: IFFALSE 1333
// PlaceUnitArea ( Kikuchi , alliance_start , false ) ;
1318: LD_EXP 27
1322: PPUSH
1323: LD_INT 13
1325: PPUSH
1326: LD_INT 0
1328: PPUSH
1329: CALL_OW 49
// Simms := PrepareUnit ( Simms , ( not debug ) , 12a_ ) ;
1333: LD_ADDR_EXP 28
1337: PUSH
1338: LD_STRING Simms
1340: PPUSH
1341: LD_EXP 1
1345: NOT
1346: PPUSH
1347: LD_STRING 12a_
1349: PPUSH
1350: CALL 13467 0 3
1354: ST_TO_ADDR
// if Simms then
1355: LD_EXP 28
1359: IFFALSE 1376
// PlaceUnitArea ( Simms , alliance_start , false ) ;
1361: LD_EXP 28
1365: PPUSH
1366: LD_INT 13
1368: PPUSH
1369: LD_INT 0
1371: PPUSH
1372: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 12a_ ) ;
1376: LD_ADDR_EXP 29
1380: PUSH
1381: LD_STRING Joan
1383: PPUSH
1384: LD_EXP 1
1388: NOT
1389: PPUSH
1390: LD_STRING 12a_
1392: PPUSH
1393: CALL 13467 0 3
1397: ST_TO_ADDR
// if Joan then
1398: LD_EXP 29
1402: IFFALSE 1419
// PlaceUnitArea ( Joan , alliance_start , false ) ;
1404: LD_EXP 29
1408: PPUSH
1409: LD_INT 13
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 12a_ ) ;
1419: LD_ADDR_EXP 30
1423: PUSH
1424: LD_STRING DeltaDoctor
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_STRING 12a_
1435: PPUSH
1436: CALL 13467 0 3
1440: ST_TO_ADDR
// if DeltaDoctor then
1441: LD_EXP 30
1445: IFFALSE 1462
// PlaceUnitArea ( DeltaDoctor , alliance_start , false ) ;
1447: LD_EXP 30
1451: PPUSH
1452: LD_INT 13
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// tmp := CreateCharacterSet ( 12a_others ) ;
1462: LD_ADDR_VAR 0 4
1466: PUSH
1467: LD_STRING 12a_others
1469: PPUSH
1470: CALL_OW 31
1474: ST_TO_ADDR
// if tmp then
1475: LD_VAR 0 4
1479: IFFALSE 1513
// for i in tmp do
1481: LD_ADDR_VAR 0 3
1485: PUSH
1486: LD_VAR 0 4
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1511
// PlaceUnitArea ( i , alliance_start , false ) ;
1494: LD_VAR 0 3
1498: PPUSH
1499: LD_INT 13
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 49
1509: GO 1491
1511: POP
1512: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1513: LD_INT 3
1515: PPUSH
1516: LD_INT 3
1518: PPUSH
1519: LD_INT 3
1521: PPUSH
1522: LD_INT 12
1524: PPUSH
1525: LD_INT 100
1527: PPUSH
1528: CALL 19547 0 5
// veh := CreateVehicle ;
1532: LD_ADDR_VAR 0 2
1536: PUSH
1537: CALL_OW 45
1541: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1542: LD_VAR 0 2
1546: PPUSH
1547: LD_INT 2
1549: PPUSH
1550: CALL_OW 233
// PlaceUnitXY ( veh , 63 , 9 , false ) ;
1554: LD_VAR 0 2
1558: PPUSH
1559: LD_INT 63
1561: PPUSH
1562: LD_INT 9
1564: PPUSH
1565: LD_INT 0
1567: PPUSH
1568: CALL_OW 48
// SetCargo ( veh , mat_artifact , 30 ) ;
1572: LD_VAR 0 2
1576: PPUSH
1577: LD_INT 4
1579: PPUSH
1580: LD_INT 30
1582: PPUSH
1583: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , debug ) then
1587: LD_STRING 11_artifact_captured
1589: PPUSH
1590: LD_EXP 1
1594: PPUSH
1595: CALL_OW 30
1599: IFFALSE 1675
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1601: LD_INT 3
1603: PPUSH
1604: LD_INT 3
1606: PPUSH
1607: LD_INT 3
1609: PPUSH
1610: LD_INT 12
1612: PPUSH
1613: LD_INT 100
1615: PPUSH
1616: CALL 19547 0 5
// veh := CreateVehicle ;
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: CALL_OW 45
1629: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1630: LD_VAR 0 2
1634: PPUSH
1635: LD_INT 2
1637: PPUSH
1638: CALL_OW 233
// PlaceUnitXY ( veh , 60 , 4 , false ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_INT 60
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 0
1655: PPUSH
1656: CALL_OW 48
// SetCargo ( veh , mat_artifact , 50 ) ;
1660: LD_VAR 0 2
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: LD_INT 50
1670: PPUSH
1671: CALL_OW 290
// end ; end ;
1675: LD_VAR 0 1
1679: RET
// export function PrepareGossudarov ; var tmp , i ; begin
1680: LD_INT 0
1682: PPUSH
1683: PPUSH
1684: PPUSH
// uc_side := 6 ;
1685: LD_ADDR_OWVAR 20
1689: PUSH
1690: LD_INT 6
1692: ST_TO_ADDR
// uc_nation := 3 ;
1693: LD_ADDR_OWVAR 21
1697: PUSH
1698: LD_INT 3
1700: ST_TO_ADDR
// InitHc ;
1701: CALL_OW 19
// Gossudarov := NewCharacter ( Gossudarov ) ;
1705: LD_ADDR_EXP 31
1709: PUSH
1710: LD_STRING Gossudarov
1712: PPUSH
1713: CALL_OW 25
1717: ST_TO_ADDR
// Kirilenkova := NewCharacter ( Kirilenkova ) ;
1718: LD_ADDR_EXP 32
1722: PUSH
1723: LD_STRING Kirilenkova
1725: PPUSH
1726: CALL_OW 25
1730: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
1731: LD_ADDR_EXP 33
1735: PUSH
1736: LD_STRING Titov
1738: PPUSH
1739: CALL_OW 25
1743: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
1744: LD_ADDR_EXP 38
1748: PUSH
1749: LD_STRING Oblukov
1751: PPUSH
1752: CALL_OW 25
1756: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
1757: LD_ADDR_EXP 35
1761: PUSH
1762: LD_STRING Dolgov
1764: PPUSH
1765: CALL_OW 25
1769: ST_TO_ADDR
// Petrosyan := NewCharacter ( Petrosyan ) ;
1770: LD_ADDR_EXP 36
1774: PUSH
1775: LD_STRING Petrosyan
1777: PPUSH
1778: CALL_OW 25
1782: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
1783: LD_ADDR_EXP 37
1787: PUSH
1788: LD_STRING Scholtze
1790: PPUSH
1791: CALL_OW 25
1795: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
1796: LD_ADDR_EXP 39
1800: PUSH
1801: LD_STRING Kapitsova
1803: PPUSH
1804: CALL_OW 25
1808: ST_TO_ADDR
// tmp := [ Gossudarov , Kirilenkova , Titov , Oblukov , Dolgov , Petrosyan , Scholtze , Kapitsova ] ;
1809: LD_ADDR_VAR 0 2
1813: PUSH
1814: LD_EXP 31
1818: PUSH
1819: LD_EXP 32
1823: PUSH
1824: LD_EXP 33
1828: PUSH
1829: LD_EXP 38
1833: PUSH
1834: LD_EXP 35
1838: PUSH
1839: LD_EXP 36
1843: PUSH
1844: LD_EXP 37
1848: PUSH
1849: LD_EXP 39
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: ST_TO_ADDR
// for i in tmp do
1864: LD_ADDR_VAR 0 3
1868: PUSH
1869: LD_VAR 0 2
1873: PUSH
1874: FOR_IN
1875: IFFALSE 1894
// PlaceUnitArea ( i , gossudarov_spawn , false ) ;
1877: LD_VAR 0 3
1881: PPUSH
1882: LD_INT 14
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL_OW 49
1892: GO 1874
1894: POP
1895: POP
// ComMoveXY ( tmp , GetX ( freedom ) , GetY ( freedom ) ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_EXP 3
1905: PPUSH
1906: CALL_OW 250
1910: PPUSH
1911: LD_EXP 3
1915: PPUSH
1916: CALL_OW 251
1920: PPUSH
1921: CALL_OW 111
// end ;
1925: LD_VAR 0 1
1929: RET
// export function PrepareBelkov ; begin
1930: LD_INT 0
1932: PPUSH
// uc_side := 4 ;
1933: LD_ADDR_OWVAR 20
1937: PUSH
1938: LD_INT 4
1940: ST_TO_ADDR
// uc_nation := 3 ;
1941: LD_ADDR_OWVAR 21
1945: PUSH
1946: LD_INT 3
1948: ST_TO_ADDR
// InitHc ;
1949: CALL_OW 19
// Belkov := NewCharacter ( Belkov ) ;
1953: LD_ADDR_EXP 46
1957: PUSH
1958: LD_STRING Belkov
1960: PPUSH
1961: CALL_OW 25
1965: ST_TO_ADDR
// PlaceUnitArea ( Belkov , gossudarov_spawn , false ) ;
1966: LD_EXP 46
1970: PPUSH
1971: LD_INT 14
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 49
// end ;
1981: LD_VAR 0 1
1985: RET
// export function PrepareGnyevko ; begin
1986: LD_INT 0
1988: PPUSH
// uc_side := 4 ;
1989: LD_ADDR_OWVAR 20
1993: PUSH
1994: LD_INT 4
1996: ST_TO_ADDR
// uc_nation := 3 ;
1997: LD_ADDR_OWVAR 21
2001: PUSH
2002: LD_INT 3
2004: ST_TO_ADDR
// InitHc ;
2005: CALL_OW 19
// Gnyevko := NewCharacter ( Gnyevko ) ;
2009: LD_ADDR_EXP 47
2013: PUSH
2014: LD_STRING Gnyevko
2016: PPUSH
2017: CALL_OW 25
2021: ST_TO_ADDR
// PlaceUnitArea ( Gnyevko , gossudarov_spawn , false ) ;
2022: LD_EXP 47
2026: PPUSH
2027: LD_INT 14
2029: PPUSH
2030: LD_INT 0
2032: PPUSH
2033: CALL_OW 49
// end ;
2037: LD_VAR 0 1
2041: RET
// export function PrepareBurlak ; var i , tmp ; begin
2042: LD_INT 0
2044: PPUSH
2045: PPUSH
2046: PPUSH
// uc_side := 4 ;
2047: LD_ADDR_OWVAR 20
2051: PUSH
2052: LD_INT 4
2054: ST_TO_ADDR
// uc_nation := 3 ;
2055: LD_ADDR_OWVAR 21
2059: PUSH
2060: LD_INT 3
2062: ST_TO_ADDR
// InitHc ;
2063: CALL_OW 19
// Burlak := NewCharacter ( Burlak ) ;
2067: LD_ADDR_EXP 45
2071: PUSH
2072: LD_STRING Burlak
2074: PPUSH
2075: CALL_OW 25
2079: ST_TO_ADDR
// PrepareVehicle ( [ ru_heavy_tracked , ru_heavy_wheeled , ru_medium_tracked ] [ Difficulty ] , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gun , ru_gatling_gun ] [ Difficulty ] , 0 ) ;
2080: LD_INT 24
2082: PUSH
2083: LD_INT 23
2085: PUSH
2086: LD_INT 22
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: PUSH
2094: LD_OWVAR 67
2098: ARRAY
2099: PPUSH
2100: LD_INT 1
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 45
2108: PUSH
2109: LD_INT 44
2111: PUSH
2112: LD_INT 43
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: PUSH
2120: LD_OWVAR 67
2124: ARRAY
2125: PPUSH
2126: LD_INT 0
2128: PPUSH
2129: CALL 19547 0 5
// Masha := CreateVehicle ;
2133: LD_ADDR_EXP 48
2137: PUSH
2138: CALL_OW 45
2142: ST_TO_ADDR
// SetLives ( [ Masha , Burlak ] , 499 ) ;
2143: LD_EXP 48
2147: PUSH
2148: LD_EXP 45
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PPUSH
2157: LD_INT 499
2159: PPUSH
2160: CALL_OW 234
// SetDir ( Masha , 3 ) ;
2164: LD_EXP 48
2168: PPUSH
2169: LD_INT 3
2171: PPUSH
2172: CALL_OW 233
// SetMark ( Masha , 1 ) ;
2176: LD_EXP 48
2180: PPUSH
2181: LD_INT 1
2183: PPUSH
2184: CALL_OW 242
// PlaceUnitArea ( Masha , burlak_spawn , false ) ;
2188: LD_EXP 48
2192: PPUSH
2193: LD_INT 18
2195: PPUSH
2196: LD_INT 0
2198: PPUSH
2199: CALL_OW 49
// PlaceUnitXY ( Burlak , 125 , 1 , false ) ;
2203: LD_EXP 45
2207: PPUSH
2208: LD_INT 125
2210: PPUSH
2211: LD_INT 1
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 48
// ComMoveUnit ( Burlak , Masha ) ;
2221: LD_EXP 45
2225: PPUSH
2226: LD_EXP 48
2230: PPUSH
2231: CALL_OW 112
// wait ( 0 0$0.3 ) ;
2235: LD_INT 10
2237: PPUSH
2238: CALL_OW 67
// AddComMoveXY ( Masha , 110 , 10 ) ;
2242: LD_EXP 48
2246: PPUSH
2247: LD_INT 110
2249: PPUSH
2250: LD_INT 10
2252: PPUSH
2253: CALL_OW 171
// Petrovova := NewCharacter ( Petrovova ) ;
2257: LD_ADDR_EXP 41
2261: PUSH
2262: LD_STRING Petrovova
2264: PPUSH
2265: CALL_OW 25
2269: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
2270: LD_ADDR_EXP 43
2274: PUSH
2275: LD_STRING Kuzmov
2277: PPUSH
2278: CALL_OW 25
2282: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
2283: LD_ADDR_EXP 42
2287: PUSH
2288: LD_STRING Kovalyuk
2290: PPUSH
2291: CALL_OW 25
2295: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
2296: LD_ADDR_EXP 40
2300: PUSH
2301: LD_STRING Lipshchin
2303: PPUSH
2304: CALL_OW 25
2308: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
2309: LD_ADDR_EXP 44
2313: PUSH
2314: LD_STRING Karamazov
2316: PPUSH
2317: CALL_OW 25
2321: ST_TO_ADDR
// tmp := [ Petrovova , Kuzmov , Kovalyuk , Lipshchin , Karamazov ] ;
2322: LD_ADDR_VAR 0 3
2326: PUSH
2327: LD_EXP 41
2331: PUSH
2332: LD_EXP 43
2336: PUSH
2337: LD_EXP 42
2341: PUSH
2342: LD_EXP 40
2346: PUSH
2347: LD_EXP 44
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: ST_TO_ADDR
// for i in tmp do
2359: LD_ADDR_VAR 0 2
2363: PUSH
2364: LD_VAR 0 3
2368: PUSH
2369: FOR_IN
2370: IFFALSE 2409
// begin SetLives ( i , rand ( 399 , 799 ) ) ;
2372: LD_VAR 0 2
2376: PPUSH
2377: LD_INT 399
2379: PPUSH
2380: LD_INT 799
2382: PPUSH
2383: CALL_OW 12
2387: PPUSH
2388: CALL_OW 234
// PlaceUnitArea ( i , burlak_friends_spawn , false ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 19
2399: PPUSH
2400: LD_INT 0
2402: PPUSH
2403: CALL_OW 49
// end ;
2407: GO 2369
2409: POP
2410: POP
// ComMoveXY ( tmp , 116 , 8 ) ;
2411: LD_VAR 0 3
2415: PPUSH
2416: LD_INT 116
2418: PPUSH
2419: LD_INT 8
2421: PPUSH
2422: CALL_OW 111
// AddComHold ( tmp ) ;
2426: LD_VAR 0 3
2430: PPUSH
2431: CALL_OW 200
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
2435: LD_ADDR_VAR 0 2
2439: PUSH
2440: LD_VAR 0 3
2444: PPUSH
2445: LD_INT 25
2447: PUSH
2448: LD_INT 1
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PPUSH
2455: CALL_OW 72
2459: PUSH
2460: FOR_IN
2461: IFFALSE 2501
// begin AddComMoveToArea ( i , burlak_crawl_area ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: LD_INT 20
2470: PPUSH
2471: CALL_OW 173
// AddComTurnXY ( i , 147 , 45 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 147
2482: PPUSH
2483: LD_INT 45
2485: PPUSH
2486: CALL_OW 178
// AddComCrawl ( i ) ;
2490: LD_VAR 0 2
2494: PPUSH
2495: CALL_OW 197
// end ;
2499: GO 2460
2501: POP
2502: POP
// repeat wait ( 0 0$1 ) ;
2503: LD_INT 35
2505: PPUSH
2506: CALL_OW 67
// until IsAt ( Masha , 110 , 10 ) ;
2510: LD_EXP 48
2514: PPUSH
2515: LD_INT 110
2517: PPUSH
2518: LD_INT 10
2520: PPUSH
2521: CALL_OW 307
2525: IFFALSE 2503
// ComStop ( Burlak ) ;
2527: LD_EXP 45
2531: PPUSH
2532: CALL_OW 141
// AddComHold ( Burlak ) ;
2536: LD_EXP 45
2540: PPUSH
2541: CALL_OW 200
// end ; end_of_file
2545: LD_VAR 0 1
2549: RET
// export russian_force , russian_guard , ru_attackers ; export function PrepareRussian ; var i , veh , tmp ; begin
2550: LD_INT 0
2552: PPUSH
2553: PPUSH
2554: PPUSH
2555: PPUSH
// uc_side := 3 ;
2556: LD_ADDR_OWVAR 20
2560: PUSH
2561: LD_INT 3
2563: ST_TO_ADDR
// uc_nation := 3 ;
2564: LD_ADDR_OWVAR 21
2568: PUSH
2569: LD_INT 3
2571: ST_TO_ADDR
// russian_force := PrepareBase ( ru_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 10000 , 3000 , 300 ] , [ 9 , 5 , 6 , 6 ] ) ;
2572: LD_ADDR_EXP 49
2576: PUSH
2577: LD_INT 47
2579: PPUSH
2580: LD_STRING 
2582: PPUSH
2583: LD_INT 7
2585: PUSH
2586: LD_INT 8
2588: PUSH
2589: LD_INT 9
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: PUSH
2597: LD_OWVAR 67
2601: ARRAY
2602: PPUSH
2603: LD_INT 10000
2605: PUSH
2606: LD_INT 3000
2608: PUSH
2609: LD_INT 300
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: LIST
2616: PPUSH
2617: LD_INT 9
2619: PUSH
2620: LD_INT 5
2622: PUSH
2623: LD_INT 6
2625: PUSH
2626: LD_INT 6
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: PPUSH
2635: CALL 22946 0 5
2639: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , russian_force ) ;
2640: LD_ADDR_EXP 57
2644: PUSH
2645: LD_EXP 57
2649: PPUSH
2650: LD_INT 2
2652: PPUSH
2653: LD_EXP 49
2657: PPUSH
2658: CALL_OW 1
2662: ST_TO_ADDR
// tmp := [ ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: EMPTY
2669: ST_TO_ADDR
// for i = 1 to 4 do
2670: LD_ADDR_VAR 0 2
2674: PUSH
2675: DOUBLE
2676: LD_INT 1
2678: DEC
2679: ST_TO_ADDR
2680: LD_INT 4
2682: PUSH
2683: FOR_TO
2684: IFFALSE 2777
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun ] [ i mod 4 + 1 ] , 100 ) ;
2686: LD_INT 22
2688: PPUSH
2689: LD_INT 3
2691: PPUSH
2692: LD_INT 3
2694: PPUSH
2695: LD_INT 43
2697: PUSH
2698: LD_INT 45
2700: PUSH
2701: LD_INT 45
2703: PUSH
2704: LD_INT 44
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: LIST
2711: LIST
2712: PUSH
2713: LD_VAR 0 2
2717: PUSH
2718: LD_INT 4
2720: MOD
2721: PUSH
2722: LD_INT 1
2724: PLUS
2725: ARRAY
2726: PPUSH
2727: LD_INT 100
2729: PPUSH
2730: CALL 19547 0 5
// veh := CreateVehicle ;
2734: LD_ADDR_VAR 0 3
2738: PUSH
2739: CALL_OW 45
2743: ST_TO_ADDR
// tmp := tmp ^ veh ;
2744: LD_ADDR_VAR 0 4
2748: PUSH
2749: LD_VAR 0 4
2753: PUSH
2754: LD_VAR 0 3
2758: ADD
2759: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_russian , false ) ;
2760: LD_VAR 0 3
2764: PPUSH
2765: LD_INT 2
2767: PPUSH
2768: LD_INT 0
2770: PPUSH
2771: CALL_OW 49
// end ;
2775: GO 2683
2777: POP
2778: POP
// russian_guard := tmp ;
2779: LD_ADDR_EXP 50
2783: PUSH
2784: LD_VAR 0 4
2788: ST_TO_ADDR
// end ;
2789: LD_VAR 0 1
2793: RET
// every 9 9$00 + 2 2$00 trigger IsOk ( ru_depot ) and player_spotted do var i , base , tmp , flags , _target , attackers ;
2794: LD_INT 47
2796: PPUSH
2797: CALL_OW 302
2801: PUSH
2802: LD_EXP 6
2806: AND
2807: IFFALSE 3420
2809: GO 2811
2811: DISABLE
2812: LD_INT 0
2814: PPUSH
2815: PPUSH
2816: PPUSH
2817: PPUSH
2818: PPUSH
2819: PPUSH
// begin enable ;
2820: ENABLE
// base := 2 ;
2821: LD_ADDR_VAR 0 2
2825: PUSH
2826: LD_INT 2
2828: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
2829: LD_ADDR_VAR 0 4
2833: PUSH
2834: LD_INT 0
2836: PUSH
2837: LD_INT 0
2839: PUSH
2840: LD_INT 0
2842: PUSH
2843: LD_INT 0
2845: PUSH
2846: LD_INT 0
2848: PUSH
2849: LD_INT 0
2851: PUSH
2852: LD_INT 0
2854: PUSH
2855: LD_INT 0
2857: PUSH
2858: LD_INT 1
2860: PUSH
2861: LD_INT 0
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: LIST
2875: ST_TO_ADDR
// tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] ] ;
2876: LD_ADDR_VAR 0 3
2880: PUSH
2881: LD_INT 22
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: LD_INT 3
2889: PUSH
2890: LD_INT 45
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: LIST
2897: LIST
2898: PUSH
2899: LD_INT 21
2901: PUSH
2902: LD_INT 1
2904: PUSH
2905: LD_INT 3
2907: PUSH
2908: LD_INT 45
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: PUSH
2917: LD_INT 22
2919: PUSH
2920: LD_INT 1
2922: PUSH
2923: LD_INT 3
2925: PUSH
2926: LD_INT 45
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_INT 23
2937: PUSH
2938: LD_INT 1
2940: PUSH
2941: LD_INT 3
2943: PUSH
2944: LD_INT 46
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
2959: LD_ADDR_VAR 0 1
2963: PUSH
2964: DOUBLE
2965: LD_INT 1
2967: DEC
2968: ST_TO_ADDR
2969: LD_OWVAR 67
2973: PUSH
2974: LD_OWVAR 1
2978: PUSH
2979: LD_INT 21000
2981: DIV
2982: PLUS
2983: PUSH
2984: FOR_TO
2985: IFFALSE 3073
// tmp := Insert ( tmp , tmp + 1 , [ [ ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
2987: LD_ADDR_VAR 0 3
2991: PUSH
2992: LD_VAR 0 3
2996: PPUSH
2997: LD_VAR 0 3
3001: PUSH
3002: LD_INT 1
3004: PLUS
3005: PPUSH
3006: LD_INT 23
3008: PUSH
3009: LD_INT 24
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 1
3018: PPUSH
3019: LD_INT 2
3021: PPUSH
3022: CALL_OW 12
3026: ARRAY
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: LD_INT 3
3033: PUSH
3034: LD_INT 46
3036: PUSH
3037: LD_INT 47
3039: PUSH
3040: LD_INT 45
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 1
3050: PPUSH
3051: LD_INT 3
3053: PPUSH
3054: CALL_OW 12
3058: ARRAY
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 2
3070: ST_TO_ADDR
3071: GO 2984
3073: POP
3074: POP
// MC_SetProduceList ( base , tmp ) ;
3075: LD_VAR 0 2
3079: PPUSH
3080: LD_VAR 0 3
3084: PPUSH
3085: CALL 68001 0 2
// repeat wait ( 0 0$1 ) ;
3089: LD_INT 35
3091: PPUSH
3092: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
3096: LD_VAR 0 2
3100: PPUSH
3101: CALL 68458 0 1
3105: PUSH
3106: LD_INT 0
3108: EQUAL
3109: IFFALSE 3089
// wait ( 0 0$20 ) ;
3111: LD_INT 700
3113: PPUSH
3114: CALL_OW 67
// _target := [ [ 71 , 19 ] , [ 91 , 67 ] , [ 52 , 44 ] , [ 68 , 48 ] ] ;
3118: LD_ADDR_VAR 0 5
3122: PUSH
3123: LD_INT 71
3125: PUSH
3126: LD_INT 19
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: PUSH
3133: LD_INT 91
3135: PUSH
3136: LD_INT 67
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PUSH
3143: LD_INT 52
3145: PUSH
3146: LD_INT 44
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: PUSH
3153: LD_INT 68
3155: PUSH
3156: LD_INT 48
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] ] ) ) ;
3169: LD_ADDR_VAR 0 6
3173: PUSH
3174: LD_EXP 76
3178: PUSH
3179: LD_VAR 0 2
3183: ARRAY
3184: PUSH
3185: LD_EXP 79
3189: PUSH
3190: LD_VAR 0 2
3194: ARRAY
3195: PUSH
3196: LD_EXP 76
3200: PUSH
3201: LD_VAR 0 2
3205: ARRAY
3206: PPUSH
3207: LD_INT 2
3209: PUSH
3210: LD_INT 34
3212: PUSH
3213: LD_INT 51
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: LD_INT 34
3222: PUSH
3223: LD_INT 52
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: LIST
3234: PPUSH
3235: CALL_OW 72
3239: UNION
3240: DIFF
3241: ST_TO_ADDR
// if not attackers then
3242: LD_VAR 0 6
3246: NOT
3247: IFFALSE 3251
// exit ;
3249: GO 3420
// ru_attackers := attackers ;
3251: LD_ADDR_EXP 51
3255: PUSH
3256: LD_VAR 0 6
3260: ST_TO_ADDR
// for i = 1 to attackers do
3261: LD_ADDR_VAR 0 1
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_VAR 0 6
3275: PUSH
3276: FOR_TO
3277: IFFALSE 3354
// begin case i mod 3 of 0 :
3279: LD_VAR 0 1
3283: PUSH
3284: LD_INT 3
3286: MOD
3287: PUSH
3288: LD_INT 0
3290: DOUBLE
3291: EQUAL
3292: IFTRUE 3296
3294: GO 3299
3296: POP
// ; 1 :
3297: GO 3352
3299: LD_INT 1
3301: DOUBLE
3302: EQUAL
3303: IFTRUE 3307
3305: GO 3325
3307: POP
// ComAgressiveMove ( i , 32 , 49 ) ; 2 :
3308: LD_VAR 0 1
3312: PPUSH
3313: LD_INT 32
3315: PPUSH
3316: LD_INT 49
3318: PPUSH
3319: CALL_OW 114
3323: GO 3352
3325: LD_INT 2
3327: DOUBLE
3328: EQUAL
3329: IFTRUE 3333
3331: GO 3351
3333: POP
// ComAgressiveMove ( i , 117 , 107 ) ; end ;
3334: LD_VAR 0 1
3338: PPUSH
3339: LD_INT 117
3341: PPUSH
3342: LD_INT 107
3344: PPUSH
3345: CALL_OW 114
3349: GO 3352
3351: POP
// end ;
3352: GO 3276
3354: POP
3355: POP
// repeat wait ( 0 0$1 ) ;
3356: LD_INT 35
3358: PPUSH
3359: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
3363: LD_VAR 0 6
3367: PPUSH
3368: LD_INT 60
3370: PUSH
3371: EMPTY
3372: LIST
3373: PPUSH
3374: CALL_OW 72
3378: NOT
3379: IFFALSE 3356
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
3381: LD_VAR 0 2
3385: PPUSH
3386: LD_VAR 0 6
3390: PPUSH
3391: LD_VAR 0 5
3395: PPUSH
3396: LD_VAR 0 4
3400: PPUSH
3401: CALL 68295 0 4
// if not first_attack then
3405: LD_EXP 7
3409: NOT
3410: IFFALSE 3420
// first_attack := true ;
3412: LD_ADDR_EXP 7
3416: PUSH
3417: LD_INT 1
3419: ST_TO_ADDR
// end ; end_of_file
3420: PPOPN 6
3422: END
// export arabian_force , arabian_guard , Abdul , mastodont ; export function PrepareArabian ; var i , veh , tmp , xy , un , un2 ; begin
3423: LD_INT 0
3425: PPUSH
3426: PPUSH
3427: PPUSH
3428: PPUSH
3429: PPUSH
3430: PPUSH
3431: PPUSH
// uc_side := 2 ;
3432: LD_ADDR_OWVAR 20
3436: PUSH
3437: LD_INT 2
3439: ST_TO_ADDR
// uc_nation := 2 ;
3440: LD_ADDR_OWVAR 21
3444: PUSH
3445: LD_INT 2
3447: ST_TO_ADDR
// Abdul := NewCharacter ( Abdul ) ;
3448: LD_ADDR_EXP 54
3452: PUSH
3453: LD_STRING Abdul
3455: PPUSH
3456: CALL_OW 25
3460: ST_TO_ADDR
// SetClass ( Abdul , class_desert_warior ) ;
3461: LD_EXP 54
3465: PPUSH
3466: LD_INT 11
3468: PPUSH
3469: CALL_OW 336
// PlaceHumanInUnit ( Abdul , ar_depot ) ;
3473: LD_EXP 54
3477: PPUSH
3478: LD_INT 1
3480: PPUSH
3481: CALL_OW 52
// vc_chassis := 31 ;
3485: LD_ADDR_OWVAR 37
3489: PUSH
3490: LD_INT 31
3492: ST_TO_ADDR
// vc_control := control_rider ;
3493: LD_ADDR_OWVAR 38
3497: PUSH
3498: LD_INT 4
3500: ST_TO_ADDR
// mastodont := CreateVehicle ;
3501: LD_ADDR_EXP 55
3505: PUSH
3506: CALL_OW 45
3510: ST_TO_ADDR
// PlaceUnitXY ( mastodont , 153 , 71 , false ) ;
3511: LD_EXP 55
3515: PPUSH
3516: LD_INT 153
3518: PPUSH
3519: LD_INT 71
3521: PPUSH
3522: LD_INT 0
3524: PPUSH
3525: CALL_OW 48
// InitVc ;
3529: CALL_OW 20
// arabian_force := PrepareBase ( ar_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 5000 , 1000 , 300 ] , [ 22 , 5 , 6 , 9 ] ) ;
3533: LD_ADDR_EXP 52
3537: PUSH
3538: LD_INT 1
3540: PPUSH
3541: LD_STRING 
3543: PPUSH
3544: LD_INT 7
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: PUSH
3558: LD_OWVAR 67
3562: ARRAY
3563: PPUSH
3564: LD_INT 5000
3566: PUSH
3567: LD_INT 1000
3569: PUSH
3570: LD_INT 300
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: PPUSH
3578: LD_INT 22
3580: PUSH
3581: LD_INT 5
3583: PUSH
3584: LD_INT 6
3586: PUSH
3587: LD_INT 9
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: PPUSH
3596: CALL 22946 0 5
3600: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , arabian_force ) ;
3601: LD_ADDR_EXP 57
3605: PUSH
3606: LD_EXP 57
3610: PPUSH
3611: LD_INT 1
3613: PPUSH
3614: LD_EXP 52
3618: PPUSH
3619: CALL_OW 1
3623: ST_TO_ADDR
// tmp := [ ] ;
3624: LD_ADDR_VAR 0 4
3628: PUSH
3629: EMPTY
3630: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
3631: LD_ADDR_OWVAR 37
3635: PUSH
3636: LD_INT 14
3638: ST_TO_ADDR
// vc_engine := engine_siberite ;
3639: LD_ADDR_OWVAR 39
3643: PUSH
3644: LD_INT 3
3646: ST_TO_ADDR
// vc_control := control_manual ;
3647: LD_ADDR_OWVAR 38
3651: PUSH
3652: LD_INT 1
3654: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
3655: LD_ADDR_OWVAR 40
3659: PUSH
3660: LD_INT 31
3662: ST_TO_ADDR
// for i = 1 to 3 do
3663: LD_ADDR_VAR 0 2
3667: PUSH
3668: DOUBLE
3669: LD_INT 1
3671: DEC
3672: ST_TO_ADDR
3673: LD_INT 3
3675: PUSH
3676: FOR_TO
3677: IFFALSE 3921
// begin xy := [ [ 153 , 71 ] , [ 155 , 81 ] ] [ i mod 2 + 1 ] ;
3679: LD_ADDR_VAR 0 5
3683: PUSH
3684: LD_INT 153
3686: PUSH
3687: LD_INT 71
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PUSH
3694: LD_INT 155
3696: PUSH
3697: LD_INT 81
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_VAR 0 2
3712: PUSH
3713: LD_INT 2
3715: MOD
3716: PUSH
3717: LD_INT 1
3719: PLUS
3720: ARRAY
3721: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
3722: LD_INT 0
3724: PPUSH
3725: LD_INT 3
3727: PPUSH
3728: LD_INT 7
3730: PUSH
3731: LD_INT 8
3733: PUSH
3734: LD_INT 9
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: PUSH
3742: LD_OWVAR 67
3746: ARRAY
3747: PPUSH
3748: CALL_OW 380
// un := CreateVehicle ;
3752: LD_ADDR_VAR 0 6
3756: PUSH
3757: CALL_OW 45
3761: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3762: LD_VAR 0 6
3766: PPUSH
3767: LD_INT 0
3769: PPUSH
3770: LD_INT 5
3772: PPUSH
3773: CALL_OW 12
3777: PPUSH
3778: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
3782: LD_VAR 0 6
3786: PPUSH
3787: LD_VAR 0 5
3791: PUSH
3792: LD_INT 1
3794: ARRAY
3795: PPUSH
3796: LD_VAR 0 5
3800: PUSH
3801: LD_INT 2
3803: ARRAY
3804: PPUSH
3805: LD_INT 6
3807: PPUSH
3808: LD_INT 0
3810: PPUSH
3811: CALL_OW 50
// un2 := CreateHuman ;
3815: LD_ADDR_VAR 0 7
3819: PUSH
3820: CALL_OW 44
3824: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
3825: LD_VAR 0 7
3829: PPUSH
3830: LD_VAR 0 6
3834: PPUSH
3835: CALL_OW 52
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un ) ;
3839: LD_ADDR_EXP 57
3843: PUSH
3844: LD_EXP 57
3848: PPUSH
3849: LD_INT 1
3851: PUSH
3852: LD_EXP 57
3856: PUSH
3857: LD_INT 1
3859: ARRAY
3860: PUSH
3861: LD_INT 1
3863: PLUS
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: PPUSH
3869: LD_VAR 0 6
3873: PPUSH
3874: CALL 20104 0 3
3878: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un2 ) ;
3879: LD_ADDR_EXP 57
3883: PUSH
3884: LD_EXP 57
3888: PPUSH
3889: LD_INT 1
3891: PUSH
3892: LD_EXP 57
3896: PUSH
3897: LD_INT 1
3899: ARRAY
3900: PUSH
3901: LD_INT 1
3903: PLUS
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PPUSH
3909: LD_VAR 0 7
3913: PPUSH
3914: CALL 20104 0 3
3918: ST_TO_ADDR
// end ;
3919: GO 3676
3921: POP
3922: POP
// for i = 1 to 5 do
3923: LD_ADDR_VAR 0 2
3927: PUSH
3928: DOUBLE
3929: LD_INT 1
3931: DEC
3932: ST_TO_ADDR
3933: LD_INT 5
3935: PUSH
3936: FOR_TO
3937: IFFALSE 4030
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gatling_gun , ar_rocket_launcher , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 100 ) ;
3939: LD_INT 14
3941: PPUSH
3942: LD_INT 3
3944: PPUSH
3945: LD_INT 1
3947: PPUSH
3948: LD_INT 25
3950: PUSH
3951: LD_INT 28
3953: PUSH
3954: LD_INT 28
3956: PUSH
3957: LD_INT 26
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: PUSH
3966: LD_VAR 0 2
3970: PUSH
3971: LD_INT 4
3973: MOD
3974: PUSH
3975: LD_INT 1
3977: PLUS
3978: ARRAY
3979: PPUSH
3980: LD_INT 100
3982: PPUSH
3983: CALL 19547 0 5
// veh := CreateVehicle ;
3987: LD_ADDR_VAR 0 3
3991: PUSH
3992: CALL_OW 45
3996: ST_TO_ADDR
// tmp := tmp ^ veh ;
3997: LD_ADDR_VAR 0 4
4001: PUSH
4002: LD_VAR 0 4
4006: PUSH
4007: LD_VAR 0 3
4011: ADD
4012: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_arabian , false ) ;
4013: LD_VAR 0 3
4017: PPUSH
4018: LD_INT 1
4020: PPUSH
4021: LD_INT 0
4023: PPUSH
4024: CALL_OW 49
// end ;
4028: GO 3936
4030: POP
4031: POP
// arabian_guard := tmp ;
4032: LD_ADDR_EXP 53
4036: PUSH
4037: LD_VAR 0 4
4041: ST_TO_ADDR
// end ;
4042: LD_VAR 0 1
4046: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , ar_depot , 12 ] ] ) or GetLives ( Mastodont ) < 990 or GetLives ( Abdul ) < 990 do
4047: LD_INT 22
4049: PUSH
4050: LD_INT 7
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: PUSH
4057: LD_INT 91
4059: PUSH
4060: LD_INT 1
4062: PUSH
4063: LD_INT 12
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: LIST
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PPUSH
4075: CALL_OW 69
4079: PUSH
4080: LD_EXP 55
4084: PPUSH
4085: CALL_OW 256
4089: PUSH
4090: LD_INT 990
4092: LESS
4093: OR
4094: PUSH
4095: LD_EXP 54
4099: PPUSH
4100: CALL_OW 256
4104: PUSH
4105: LD_INT 990
4107: LESS
4108: OR
4109: IFFALSE 4252
4111: GO 4113
4113: DISABLE
// begin if IsInUnit ( Abdul ) then
4114: LD_EXP 54
4118: PPUSH
4119: CALL_OW 310
4123: IFFALSE 4134
// ComExitBuilding ( Abdul ) ;
4125: LD_EXP 54
4129: PPUSH
4130: CALL_OW 122
// if Mastodont then
4134: LD_EXP 55
4138: IFFALSE 4155
// ComMoveXY ( Mastodont , 205 , 132 ) ;
4140: LD_EXP 55
4144: PPUSH
4145: LD_INT 205
4147: PPUSH
4148: LD_INT 132
4150: PPUSH
4151: CALL_OW 111
// AddComMoveXY ( Abdul , 205 , 132 ) ;
4155: LD_EXP 54
4159: PPUSH
4160: LD_INT 205
4162: PPUSH
4163: LD_INT 132
4165: PPUSH
4166: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4170: LD_INT 35
4172: PPUSH
4173: CALL_OW 67
// until IsInArea ( Abdul , escape_area ) ;
4177: LD_EXP 54
4181: PPUSH
4182: LD_INT 21
4184: PPUSH
4185: CALL_OW 308
4189: IFFALSE 4170
// RemoveUnit ( Abdul ) ;
4191: LD_EXP 54
4195: PPUSH
4196: CALL_OW 64
// repeat wait ( 0 0$1 ) ;
4200: LD_INT 35
4202: PPUSH
4203: CALL_OW 67
// until IsInArea ( Mastodont , escape_area ) or IsDead ( Mastodont ) ;
4207: LD_EXP 55
4211: PPUSH
4212: LD_INT 21
4214: PPUSH
4215: CALL_OW 308
4219: PUSH
4220: LD_EXP 55
4224: PPUSH
4225: CALL_OW 301
4229: OR
4230: IFFALSE 4200
// if IsOk ( Mastodont ) then
4232: LD_EXP 55
4236: PPUSH
4237: CALL_OW 302
4241: IFFALSE 4252
// RemoveUnit ( Mastodont ) ;
4243: LD_EXP 55
4247: PPUSH
4248: CALL_OW 64
// end ;
4252: END
// every 0 0$5 trigger IsDead ( Abdul ) or FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 8 ] ] ] ) < [ 16 , 19 , 22 ] [ Difficulty ] do var tmp_vehs , tmp , tmp_ape , tmp_empty , i , veh ;
4253: LD_EXP 54
4257: PPUSH
4258: CALL_OW 301
4262: PUSH
4263: LD_INT 22
4265: PUSH
4266: LD_INT 2
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: PUSH
4273: LD_INT 2
4275: PUSH
4276: LD_INT 25
4278: PUSH
4279: LD_INT 1
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: PUSH
4286: LD_INT 25
4288: PUSH
4289: LD_INT 2
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 25
4298: PUSH
4299: LD_INT 3
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: LD_INT 25
4308: PUSH
4309: LD_INT 4
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 25
4318: PUSH
4319: LD_INT 8
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: PPUSH
4338: CALL_OW 69
4342: PUSH
4343: LD_INT 16
4345: PUSH
4346: LD_INT 19
4348: PUSH
4349: LD_INT 22
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: PUSH
4357: LD_OWVAR 67
4361: ARRAY
4362: LESS
4363: OR
4364: IFFALSE 5008
4366: GO 4368
4368: DISABLE
4369: LD_INT 0
4371: PPUSH
4372: PPUSH
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
// begin MC_Kill ( 1 ) ;
4377: LD_INT 1
4379: PPUSH
4380: CALL 52267 0 1
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 8 ] ] ] ) ;
4384: LD_ADDR_VAR 0 2
4388: PUSH
4389: LD_INT 22
4391: PUSH
4392: LD_INT 2
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 2
4401: PUSH
4402: LD_INT 25
4404: PUSH
4405: LD_INT 1
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 25
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 25
4424: PUSH
4425: LD_INT 3
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: LD_INT 25
4434: PUSH
4435: LD_INT 4
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PUSH
4442: LD_INT 25
4444: PUSH
4445: LD_INT 8
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: PPUSH
4464: CALL_OW 69
4468: ST_TO_ADDR
// tmp_ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff tmp ;
4469: LD_ADDR_VAR 0 3
4473: PUSH
4474: LD_INT 22
4476: PUSH
4477: LD_INT 2
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: PUSH
4484: LD_INT 21
4486: PUSH
4487: LD_INT 1
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: PUSH
4503: LD_VAR 0 2
4507: DIFF
4508: ST_TO_ADDR
// tmp_vehs := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_lives , 300 ] ] ) ;
4509: LD_ADDR_VAR 0 1
4513: PUSH
4514: LD_INT 22
4516: PUSH
4517: LD_INT 2
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 21
4526: PUSH
4527: LD_INT 2
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: PUSH
4534: LD_INT 24
4536: PUSH
4537: LD_INT 300
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 69
4553: ST_TO_ADDR
// tmp_empty := UnitFilter ( tmp_vehs , [ [ f_control , control_manual ] , [ f_empty ] ] ) ;
4554: LD_ADDR_VAR 0 4
4558: PUSH
4559: LD_VAR 0 1
4563: PPUSH
4564: LD_INT 33
4566: PUSH
4567: LD_INT 1
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: LD_INT 58
4576: PUSH
4577: EMPTY
4578: LIST
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PPUSH
4584: CALL_OW 72
4588: ST_TO_ADDR
// for i in tmp do
4589: LD_ADDR_VAR 0 5
4593: PUSH
4594: LD_VAR 0 2
4598: PUSH
4599: FOR_IN
4600: IFFALSE 4784
// begin if i in FilterAllUnits ( [ f_driving ] ) then
4602: LD_VAR 0 5
4606: PUSH
4607: LD_INT 55
4609: PUSH
4610: EMPTY
4611: LIST
4612: PPUSH
4613: CALL_OW 69
4617: IN
4618: IFFALSE 4637
// begin AddComMoveXY ( i , 209 , 132 ) ;
4620: LD_VAR 0 5
4624: PPUSH
4625: LD_INT 209
4627: PPUSH
4628: LD_INT 132
4630: PPUSH
4631: CALL_OW 171
// continue ;
4635: GO 4599
// end ; if IsInUnit ( i ) then
4637: LD_VAR 0 5
4641: PPUSH
4642: CALL_OW 310
4646: IFFALSE 4664
// begin ComExitBuilding ( i ) ;
4648: LD_VAR 0 5
4652: PPUSH
4653: CALL_OW 122
// wait ( 3 ) ;
4657: LD_INT 3
4659: PPUSH
4660: CALL_OW 67
// end ; if tmp_empty then
4664: LD_VAR 0 4
4668: IFFALSE 4767
// if GetDistUnits ( i , NearestUnitToUnit ( tmp_empty , i ) ) < 25 then
4670: LD_VAR 0 5
4674: PPUSH
4675: LD_VAR 0 4
4679: PPUSH
4680: LD_VAR 0 5
4684: PPUSH
4685: CALL_OW 74
4689: PPUSH
4690: CALL_OW 296
4694: PUSH
4695: LD_INT 25
4697: LESS
4698: IFFALSE 4767
// begin veh := NearestUnitToUnit ( tmp_empty , i ) ;
4700: LD_ADDR_VAR 0 6
4704: PUSH
4705: LD_VAR 0 4
4709: PPUSH
4710: LD_VAR 0 5
4714: PPUSH
4715: CALL_OW 74
4719: ST_TO_ADDR
// AddComEnterUnit ( i , veh ) ;
4720: LD_VAR 0 5
4724: PPUSH
4725: LD_VAR 0 6
4729: PPUSH
4730: CALL_OW 180
// AddComMoveXY ( i , 209 , 132 ) ;
4734: LD_VAR 0 5
4738: PPUSH
4739: LD_INT 209
4741: PPUSH
4742: LD_INT 132
4744: PPUSH
4745: CALL_OW 171
// tmp_empty := tmp_empty diff veh ;
4749: LD_ADDR_VAR 0 4
4753: PUSH
4754: LD_VAR 0 4
4758: PUSH
4759: LD_VAR 0 6
4763: DIFF
4764: ST_TO_ADDR
// continue ;
4765: GO 4599
// end ; AddComMoveXY ( i , 201 , 132 ) ;
4767: LD_VAR 0 5
4771: PPUSH
4772: LD_INT 201
4774: PPUSH
4775: LD_INT 132
4777: PPUSH
4778: CALL_OW 171
// end ;
4782: GO 4599
4784: POP
4785: POP
// for i in tmp_ape do
4786: LD_ADDR_VAR 0 5
4790: PUSH
4791: LD_VAR 0 3
4795: PUSH
4796: FOR_IN
4797: IFFALSE 4836
// begin if IsInUnit ( i ) then
4799: LD_VAR 0 5
4803: PPUSH
4804: CALL_OW 310
4808: IFFALSE 4819
// ComExitBuilding ( i ) ;
4810: LD_VAR 0 5
4814: PPUSH
4815: CALL_OW 122
// AddComMoveXY ( i , 201 , 132 ) ;
4819: LD_VAR 0 5
4823: PPUSH
4824: LD_INT 201
4826: PPUSH
4827: LD_INT 132
4829: PPUSH
4830: CALL_OW 171
// end ;
4834: GO 4796
4836: POP
4837: POP
// repeat wait ( 0 0$1 ) ;
4838: LD_INT 35
4840: PPUSH
4841: CALL_OW 67
// for i in tmp union tmp_ape union tmp_vehs do
4845: LD_ADDR_VAR 0 5
4849: PUSH
4850: LD_VAR 0 2
4854: PUSH
4855: LD_VAR 0 3
4859: UNION
4860: PUSH
4861: LD_VAR 0 1
4865: UNION
4866: PUSH
4867: FOR_IN
4868: IFFALSE 4899
// if not HasTask ( i ) then
4870: LD_VAR 0 5
4874: PPUSH
4875: CALL_OW 314
4879: NOT
4880: IFFALSE 4897
// ComMoveXY ( i , 201 , 132 ) ;
4882: LD_VAR 0 5
4886: PPUSH
4887: LD_INT 201
4889: PPUSH
4890: LD_INT 132
4892: PPUSH
4893: CALL_OW 111
4897: GO 4867
4899: POP
4900: POP
// if FilterUnitsInArea ( escape_area , [ f_side , 2 ] ) then
4901: LD_INT 21
4903: PPUSH
4904: LD_INT 22
4906: PUSH
4907: LD_INT 2
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PPUSH
4914: CALL_OW 70
4918: IFFALSE 4959
// for i in FilterUnitsInArea ( escape_area , [ f_side , 2 ] ) do
4920: LD_ADDR_VAR 0 5
4924: PUSH
4925: LD_INT 21
4927: PPUSH
4928: LD_INT 22
4930: PUSH
4931: LD_INT 2
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PPUSH
4938: CALL_OW 70
4942: PUSH
4943: FOR_IN
4944: IFFALSE 4957
// RemoveUnit ( i ) ;
4946: LD_VAR 0 5
4950: PPUSH
4951: CALL_OW 64
4955: GO 4943
4957: POP
4958: POP
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
4959: LD_INT 22
4961: PUSH
4962: LD_INT 2
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: PUSH
4969: LD_INT 2
4971: PUSH
4972: LD_INT 21
4974: PUSH
4975: LD_INT 1
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: LD_INT 21
4984: PUSH
4985: LD_INT 2
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PPUSH
5001: CALL_OW 69
5005: NOT
5006: IFFALSE 4838
// end ;
5008: PPOPN 6
5010: END
// every 12 12$00 trigger ar_active_attack and GetBType ( HexInfo ( 92 , 40 ) ) = b_siberite_mine do var sci ;
5011: LD_EXP 9
5015: PUSH
5016: LD_INT 92
5018: PPUSH
5019: LD_INT 40
5021: PPUSH
5022: CALL_OW 428
5026: PPUSH
5027: CALL_OW 266
5031: PUSH
5032: LD_INT 30
5034: EQUAL
5035: AND
5036: IFFALSE 5232
5038: GO 5040
5040: DISABLE
5041: LD_INT 0
5043: PPUSH
// begin sci := UnitFilter ( mc_bases [ 1 ] , [ f_class , 4 ] ) ;
5044: LD_ADDR_VAR 0 1
5048: PUSH
5049: LD_EXP 57
5053: PUSH
5054: LD_INT 1
5056: ARRAY
5057: PPUSH
5058: LD_INT 25
5060: PUSH
5061: LD_INT 4
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PPUSH
5068: CALL_OW 72
5072: ST_TO_ADDR
// if not sci then
5073: LD_VAR 0 1
5077: NOT
5078: IFFALSE 5082
// exit ;
5080: GO 5232
// mc_bases := Replace ( mc_bases , 1 , mc_bases [ 1 ] diff sci [ 1 ] ) ;
5082: LD_ADDR_EXP 57
5086: PUSH
5087: LD_EXP 57
5091: PPUSH
5092: LD_INT 1
5094: PPUSH
5095: LD_EXP 57
5099: PUSH
5100: LD_INT 1
5102: ARRAY
5103: PUSH
5104: LD_VAR 0 1
5108: PUSH
5109: LD_INT 1
5111: ARRAY
5112: DIFF
5113: PPUSH
5114: CALL_OW 1
5118: ST_TO_ADDR
// if IsInUnit ( sci [ 1 ] ) then
5119: LD_VAR 0 1
5123: PUSH
5124: LD_INT 1
5126: ARRAY
5127: PPUSH
5128: CALL_OW 310
5132: IFFALSE 5147
// ComExitBuilding ( sci [ 1 ] ) ;
5134: LD_VAR 0 1
5138: PUSH
5139: LD_INT 1
5141: ARRAY
5142: PPUSH
5143: CALL_OW 122
// if DangerAtRangeXY ( 2 , 105 , 14 , 20 ) [ 4 ] < 10 then
5147: LD_INT 2
5149: PPUSH
5150: LD_INT 105
5152: PPUSH
5153: LD_INT 14
5155: PPUSH
5156: LD_INT 20
5158: PPUSH
5159: CALL 20598 0 4
5163: PUSH
5164: LD_INT 4
5166: ARRAY
5167: PUSH
5168: LD_INT 10
5170: LESS
5171: IFFALSE 5194
// AddComMoveXY ( sci [ 1 ] , 105 , 14 ) else
5173: LD_VAR 0 1
5177: PUSH
5178: LD_INT 1
5180: ARRAY
5181: PPUSH
5182: LD_INT 105
5184: PPUSH
5185: LD_INT 14
5187: PPUSH
5188: CALL_OW 171
5192: GO 5213
// AddComMoveXY ( sci [ 1 ] , 118 , 77 ) ;
5194: LD_VAR 0 1
5198: PUSH
5199: LD_INT 1
5201: ARRAY
5202: PPUSH
5203: LD_INT 118
5205: PPUSH
5206: LD_INT 77
5208: PPUSH
5209: CALL_OW 171
// AddComContaminate ( sci [ 1 ] , 92 , 40 ) ;
5213: LD_VAR 0 1
5217: PUSH
5218: LD_INT 1
5220: ARRAY
5221: PPUSH
5222: LD_INT 92
5224: PPUSH
5225: LD_INT 40
5227: PPUSH
5228: CALL_OW 218
// end ;
5232: PPOPN 1
5234: END
// every 14 14$00 trigger IsOk ( ar_depot ) and ar_active_attack do var i , base , tmp , flags , _target , attackers ;
5235: LD_INT 1
5237: PPUSH
5238: CALL_OW 302
5242: PUSH
5243: LD_EXP 9
5247: AND
5248: IFFALSE 5718
5250: GO 5252
5252: DISABLE
5253: LD_INT 0
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
// begin enable ;
5261: ENABLE
// base := 1 ;
5262: LD_ADDR_VAR 0 2
5266: PUSH
5267: LD_INT 1
5269: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
5270: LD_ADDR_VAR 0 4
5274: PUSH
5275: LD_INT 0
5277: PUSH
5278: LD_INT 0
5280: PUSH
5281: LD_INT 0
5283: PUSH
5284: LD_INT 0
5286: PUSH
5287: LD_INT 0
5289: PUSH
5290: LD_INT 0
5292: PUSH
5293: LD_INT 0
5295: PUSH
5296: LD_INT 0
5298: PUSH
5299: LD_INT 1
5301: PUSH
5302: LD_INT 0
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: ST_TO_ADDR
// tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_flame_thrower ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , ] ;
5317: LD_ADDR_VAR 0 3
5321: PUSH
5322: LD_INT 14
5324: PUSH
5325: LD_INT 1
5327: PUSH
5328: LD_INT 2
5330: PUSH
5331: LD_INT 26
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: PUSH
5340: LD_INT 14
5342: PUSH
5343: LD_INT 1
5345: PUSH
5346: LD_INT 2
5348: PUSH
5349: LD_INT 28
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: LIST
5356: LIST
5357: PUSH
5358: LD_INT 13
5360: PUSH
5361: LD_INT 1
5363: PUSH
5364: LD_INT 2
5366: PUSH
5367: LD_INT 29
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: LIST
5380: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
5381: LD_ADDR_VAR 0 1
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_OWVAR 67
5395: PUSH
5396: LD_OWVAR 1
5400: PUSH
5401: LD_INT 21000
5403: DIV
5404: PLUS
5405: PUSH
5406: FOR_TO
5407: IFFALSE 5499
// tmp := Insert ( tmp , tmp + 1 , [ [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_remote , [ ar_rocket_launcher , ar_selfpropelled_bomb , ar_gatling_gun , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ) ;
5409: LD_ADDR_VAR 0 3
5413: PUSH
5414: LD_VAR 0 3
5418: PPUSH
5419: LD_VAR 0 3
5423: PUSH
5424: LD_INT 1
5426: PLUS
5427: PPUSH
5428: LD_INT 13
5430: PUSH
5431: LD_INT 14
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_INT 2
5443: PPUSH
5444: CALL_OW 12
5448: ARRAY
5449: PUSH
5450: LD_INT 1
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: LD_INT 28
5458: PUSH
5459: LD_INT 29
5461: PUSH
5462: LD_INT 25
5464: PUSH
5465: LD_INT 26
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 1
5476: PPUSH
5477: LD_INT 4
5479: PPUSH
5480: CALL_OW 12
5484: ARRAY
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: PPUSH
5492: CALL_OW 2
5496: ST_TO_ADDR
5497: GO 5406
5499: POP
5500: POP
// MC_SetProduceList ( base , tmp ) ;
5501: LD_VAR 0 2
5505: PPUSH
5506: LD_VAR 0 3
5510: PPUSH
5511: CALL 68001 0 2
// repeat wait ( 0 0$1 ) ;
5515: LD_INT 35
5517: PPUSH
5518: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
5522: LD_VAR 0 2
5526: PPUSH
5527: CALL 68458 0 1
5531: PUSH
5532: LD_INT 0
5534: EQUAL
5535: IFFALSE 5515
// wait ( 0 0$20 ) ;
5537: LD_INT 700
5539: PPUSH
5540: CALL_OW 67
// _target := [ [ 124 , 85 ] , [ 90 , 61 ] , [ 69 , 48 ] , [ 68 , 48 ] ] ;
5544: LD_ADDR_VAR 0 5
5548: PUSH
5549: LD_INT 124
5551: PUSH
5552: LD_INT 85
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: PUSH
5559: LD_INT 90
5561: PUSH
5562: LD_INT 61
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: LD_INT 69
5571: PUSH
5572: LD_INT 48
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PUSH
5579: LD_INT 68
5581: PUSH
5582: LD_INT 48
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , ar_cargo_bay ] ) ) ;
5595: LD_ADDR_VAR 0 6
5599: PUSH
5600: LD_EXP 76
5604: PUSH
5605: LD_VAR 0 2
5609: ARRAY
5610: PUSH
5611: LD_EXP 79
5615: PUSH
5616: LD_VAR 0 2
5620: ARRAY
5621: PUSH
5622: LD_EXP 76
5626: PUSH
5627: LD_VAR 0 2
5631: ARRAY
5632: PPUSH
5633: LD_INT 34
5635: PUSH
5636: LD_INT 32
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PPUSH
5643: CALL_OW 72
5647: UNION
5648: DIFF
5649: ST_TO_ADDR
// if not attackers then
5650: LD_VAR 0 6
5654: NOT
5655: IFFALSE 5659
// exit ;
5657: GO 5718
// ar_attackers := attackers ;
5659: LD_ADDR_EXP 10
5663: PUSH
5664: LD_VAR 0 6
5668: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5669: LD_INT 35
5671: PPUSH
5672: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
5676: LD_VAR 0 6
5680: PPUSH
5681: LD_INT 60
5683: PUSH
5684: EMPTY
5685: LIST
5686: PPUSH
5687: CALL_OW 72
5691: NOT
5692: IFFALSE 5669
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
5694: LD_VAR 0 2
5698: PPUSH
5699: LD_VAR 0 6
5703: PPUSH
5704: LD_VAR 0 5
5708: PPUSH
5709: LD_VAR 0 4
5713: PPUSH
5714: CALL 68295 0 4
// end ;
5718: PPOPN 6
5720: END
// every 11 11$00 trigger IsOk ( ar_depot ) and ar_active_attack and IsInArea ( masha , masha_area ) and MC_GetProduceList ( 1 ) = 0 and not ar_attackers do var i , base , tmp , flags , _target , attackers , un ;
5721: LD_INT 1
5723: PPUSH
5724: CALL_OW 302
5728: PUSH
5729: LD_EXP 9
5733: AND
5734: PUSH
5735: LD_EXP 48
5739: PPUSH
5740: LD_INT 22
5742: PPUSH
5743: CALL_OW 308
5747: AND
5748: PUSH
5749: LD_INT 1
5751: PPUSH
5752: CALL 68458 0 1
5756: PUSH
5757: LD_INT 0
5759: EQUAL
5760: AND
5761: PUSH
5762: LD_EXP 10
5766: NOT
5767: AND
5768: IFFALSE 6243
5770: GO 5772
5772: DISABLE
5773: LD_INT 0
5775: PPUSH
5776: PPUSH
5777: PPUSH
5778: PPUSH
5779: PPUSH
5780: PPUSH
5781: PPUSH
// begin base := 1 ;
5782: LD_ADDR_VAR 0 2
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
5790: LD_ADDR_VAR 0 4
5794: PUSH
5795: LD_INT 0
5797: PUSH
5798: LD_INT 0
5800: PUSH
5801: LD_INT 0
5803: PUSH
5804: LD_INT 0
5806: PUSH
5807: LD_INT 0
5809: PUSH
5810: LD_INT 0
5812: PUSH
5813: LD_INT 0
5815: PUSH
5816: LD_INT 0
5818: PUSH
5819: LD_INT 1
5821: PUSH
5822: LD_INT 0
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: ST_TO_ADDR
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_hovercraft , engine_solar , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_solar , control_remote , ar_double_machine_gun ] ] ;
5837: LD_ADDR_VAR 0 3
5841: PUSH
5842: LD_INT 13
5844: PUSH
5845: LD_INT 1
5847: PUSH
5848: LD_INT 2
5850: PUSH
5851: LD_INT 28
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 13
5862: PUSH
5863: LD_INT 1
5865: PUSH
5866: LD_INT 2
5868: PUSH
5869: LD_INT 27
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: PUSH
5878: LD_INT 13
5880: PUSH
5881: LD_INT 1
5883: PUSH
5884: LD_INT 2
5886: PUSH
5887: LD_INT 25
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: PUSH
5896: LD_INT 11
5898: PUSH
5899: LD_INT 2
5901: PUSH
5902: LD_INT 2
5904: PUSH
5905: LD_INT 24
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: PUSH
5914: LD_INT 11
5916: PUSH
5917: LD_INT 2
5919: PUSH
5920: LD_INT 2
5922: PUSH
5923: LD_INT 24
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: ST_TO_ADDR
// MC_SetProduceList ( base , tmp ) ;
5939: LD_VAR 0 2
5943: PPUSH
5944: LD_VAR 0 3
5948: PPUSH
5949: CALL 68001 0 2
// repeat wait ( 0 0$1 ) ;
5953: LD_INT 35
5955: PPUSH
5956: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
5960: LD_VAR 0 2
5964: PPUSH
5965: CALL 68458 0 1
5969: PUSH
5970: LD_INT 0
5972: EQUAL
5973: IFFALSE 5953
// wait ( 0 0$20 ) ;
5975: LD_INT 700
5977: PPUSH
5978: CALL_OW 67
// _target := [ [ 119 , 9 ] ] ;
5982: LD_ADDR_VAR 0 5
5986: PUSH
5987: LD_INT 119
5989: PUSH
5990: LD_INT 9
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: EMPTY
5998: LIST
5999: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , ar_cargo_bay ] ) ) ;
6000: LD_ADDR_VAR 0 6
6004: PUSH
6005: LD_EXP 76
6009: PUSH
6010: LD_VAR 0 2
6014: ARRAY
6015: PUSH
6016: LD_EXP 79
6020: PUSH
6021: LD_VAR 0 2
6025: ARRAY
6026: PUSH
6027: LD_EXP 76
6031: PUSH
6032: LD_VAR 0 2
6036: ARRAY
6037: PPUSH
6038: LD_INT 34
6040: PUSH
6041: LD_INT 32
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PPUSH
6048: CALL_OW 72
6052: UNION
6053: DIFF
6054: ST_TO_ADDR
// if not attackers then
6055: LD_VAR 0 6
6059: NOT
6060: IFFALSE 6064
// exit ;
6062: GO 6243
// uc_side := 2 ;
6064: LD_ADDR_OWVAR 20
6068: PUSH
6069: LD_INT 2
6071: ST_TO_ADDR
// uc_nation := 2 ;
6072: LD_ADDR_OWVAR 21
6076: PUSH
6077: LD_INT 2
6079: ST_TO_ADDR
// InitHc ;
6080: CALL_OW 19
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6084: LD_ADDR_VAR 0 1
6088: PUSH
6089: DOUBLE
6090: LD_INT 1
6092: DEC
6093: ST_TO_ADDR
6094: LD_INT 4
6096: PUSH
6097: LD_INT 5
6099: PUSH
6100: LD_INT 6
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: PUSH
6108: LD_OWVAR 67
6112: ARRAY
6113: PUSH
6114: FOR_TO
6115: IFFALSE 6192
// begin PrepareHuman ( false , [ class_apeman_soldier , class_apeman_kamikaze ] [ rand ( 1 , 2 ) ] , 8 ) ;
6117: LD_INT 0
6119: PPUSH
6120: LD_INT 15
6122: PUSH
6123: LD_INT 17
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PUSH
6130: LD_INT 1
6132: PPUSH
6133: LD_INT 2
6135: PPUSH
6136: CALL_OW 12
6140: ARRAY
6141: PPUSH
6142: LD_INT 8
6144: PPUSH
6145: CALL_OW 380
// un := CreateHuman ;
6149: LD_ADDR_VAR 0 7
6153: PUSH
6154: CALL_OW 44
6158: ST_TO_ADDR
// PlaceUnitArea ( un , east_spawn , false ) ;
6159: LD_VAR 0 7
6163: PPUSH
6164: LD_INT 23
6166: PPUSH
6167: LD_INT 0
6169: PPUSH
6170: CALL_OW 49
// attackers := attackers union un ;
6174: LD_ADDR_VAR 0 6
6178: PUSH
6179: LD_VAR 0 6
6183: PUSH
6184: LD_VAR 0 7
6188: UNION
6189: ST_TO_ADDR
// end ;
6190: GO 6114
6192: POP
6193: POP
// repeat wait ( 0 0$1 ) ;
6194: LD_INT 35
6196: PPUSH
6197: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
6201: LD_VAR 0 6
6205: PPUSH
6206: LD_INT 60
6208: PUSH
6209: EMPTY
6210: LIST
6211: PPUSH
6212: CALL_OW 72
6216: NOT
6217: IFFALSE 6194
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
6219: LD_VAR 0 2
6223: PPUSH
6224: LD_VAR 0 6
6228: PPUSH
6229: LD_VAR 0 5
6233: PPUSH
6234: LD_VAR 0 4
6238: PPUSH
6239: CALL 68295 0 4
// end ; end_of_file
6243: PPOPN 7
6245: END
// export function PrepareAmericanAttack ; var i , tmp , veh , flags , _target ; begin
6246: LD_INT 0
6248: PPUSH
6249: PPUSH
6250: PPUSH
6251: PPUSH
6252: PPUSH
6253: PPUSH
// uc_side := 1 ;
6254: LD_ADDR_OWVAR 20
6258: PUSH
6259: LD_INT 1
6261: ST_TO_ADDR
// uc_nation := 1 ;
6262: LD_ADDR_OWVAR 21
6266: PUSH
6267: LD_INT 1
6269: ST_TO_ADDR
// InitHc ;
6270: CALL_OW 19
// InitVc ;
6274: CALL_OW 20
// tmp := [ ] ;
6278: LD_ADDR_VAR 0 3
6282: PUSH
6283: EMPTY
6284: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
6285: LD_ADDR_VAR 0 5
6289: PUSH
6290: LD_INT 0
6292: PUSH
6293: LD_INT 0
6295: PUSH
6296: LD_INT 0
6298: PUSH
6299: LD_INT 0
6301: PUSH
6302: LD_INT 0
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: LD_INT 0
6310: PUSH
6311: LD_INT 0
6313: PUSH
6314: LD_INT 1
6316: PUSH
6317: LD_INT 0
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: ST_TO_ADDR
// _target := [ [ 71 , 34 ] , [ 63 , 49 ] ] ;
6332: LD_ADDR_VAR 0 6
6336: PUSH
6337: LD_INT 71
6339: PUSH
6340: LD_INT 34
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: PUSH
6347: LD_INT 63
6349: PUSH
6350: LD_INT 49
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
6361: LD_ADDR_VAR 0 2
6365: PUSH
6366: DOUBLE
6367: LD_INT 1
6369: DEC
6370: ST_TO_ADDR
6371: LD_INT 5
6373: PUSH
6374: LD_INT 6
6376: PUSH
6377: LD_INT 6
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: LD_OWVAR 67
6389: ARRAY
6390: PUSH
6391: FOR_TO
6392: IFFALSE 6529
// begin PrepareVehicle ( [ us_medium_wheeled , us_heavy_tracked , us_morphling ] [ rand ( 1 , 3 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ us_laser , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 78 ) ;
6394: LD_INT 2
6396: PUSH
6397: LD_INT 4
6399: PUSH
6400: LD_INT 5
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: PUSH
6408: LD_INT 1
6410: PPUSH
6411: LD_INT 3
6413: PPUSH
6414: CALL_OW 12
6418: ARRAY
6419: PPUSH
6420: LD_INT 1
6422: PUSH
6423: LD_INT 3
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: PUSH
6430: LD_INT 1
6432: PPUSH
6433: LD_INT 2
6435: PPUSH
6436: CALL_OW 12
6440: ARRAY
6441: PPUSH
6442: LD_INT 3
6444: PPUSH
6445: LD_INT 9
6447: PUSH
6448: LD_INT 7
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PUSH
6455: LD_INT 1
6457: PPUSH
6458: LD_INT 2
6460: PPUSH
6461: CALL_OW 12
6465: ARRAY
6466: PPUSH
6467: LD_INT 78
6469: PPUSH
6470: CALL 19547 0 5
// veh := CreateVehicle ;
6474: LD_ADDR_VAR 0 4
6478: PUSH
6479: CALL_OW 45
6483: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
6484: LD_VAR 0 4
6488: PPUSH
6489: LD_INT 2
6491: PPUSH
6492: CALL_OW 233
// PlaceUnitArea ( veh , north_spawn , false ) ;
6496: LD_VAR 0 4
6500: PPUSH
6501: LD_INT 17
6503: PPUSH
6504: LD_INT 0
6506: PPUSH
6507: CALL_OW 49
// tmp := tmp ^ veh ;
6511: LD_ADDR_VAR 0 3
6515: PUSH
6516: LD_VAR 0 3
6520: PUSH
6521: LD_VAR 0 4
6525: ADD
6526: ST_TO_ADDR
// end ;
6527: GO 6391
6529: POP
6530: POP
// if not tmp then
6531: LD_VAR 0 3
6535: NOT
6536: IFFALSE 6540
// exit ;
6538: GO 6583
// if not first_powell_attack then
6540: LD_EXP 11
6544: NOT
6545: IFFALSE 6555
// first_powell_attack := true ;
6547: LD_ADDR_EXP 11
6551: PUSH
6552: LD_INT 1
6554: ST_TO_ADDR
// Attack ( [ 0 , tmp , _target , flags ] ) ;
6555: LD_INT 0
6557: PUSH
6558: LD_VAR 0 3
6562: PUSH
6563: LD_VAR 0 6
6567: PUSH
6568: LD_VAR 0 5
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: PPUSH
6579: CALL 47618 0 1
// end ; end_of_file
6583: LD_VAR 0 1
6587: RET
// export function Action ; var tmp , i , un ; begin
6588: LD_INT 0
6590: PPUSH
6591: PPUSH
6592: PPUSH
6593: PPUSH
// CenterNowOnXY ( 68 , 39 ) ;
6594: LD_INT 68
6596: PPUSH
6597: LD_INT 39
6599: PPUSH
6600: CALL_OW 86
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
6604: LD_ADDR_VAR 0 2
6608: PUSH
6609: LD_INT 22
6611: PUSH
6612: LD_INT 7
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PPUSH
6619: CALL_OW 69
6623: ST_TO_ADDR
// InGameOn ;
6624: CALL_OW 8
// ComMoveXY ( tmp , 71 , 49 ) ;
6628: LD_VAR 0 2
6632: PPUSH
6633: LD_INT 71
6635: PPUSH
6636: LD_INT 49
6638: PPUSH
6639: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6643: LD_INT 35
6645: PPUSH
6646: CALL_OW 67
// until SeeXY ( 7 , 71 , 51 ) ;
6650: LD_INT 7
6652: PPUSH
6653: LD_INT 71
6655: PPUSH
6656: LD_INT 51
6658: PPUSH
6659: CALL_OW 293
6663: IFFALSE 6643
// DialogueOn ;
6665: CALL_OW 6
// Say ( JMM , D1-JMM-1 ) ;
6669: LD_EXP 14
6673: PPUSH
6674: LD_STRING D1-JMM-1
6676: PPUSH
6677: CALL_OW 88
// if Joan then
6681: LD_EXP 29
6685: IFFALSE 6699
// Say ( Joan , D1-Joan-1 ) ;
6687: LD_EXP 29
6691: PPUSH
6692: LD_STRING D1-Joan-1
6694: PPUSH
6695: CALL_OW 88
// if Lisa then
6699: LD_EXP 16
6703: IFFALSE 6717
// Say ( Lisa , D1-Lisa-1 ) ;
6705: LD_EXP 16
6709: PPUSH
6710: LD_STRING D1-Lisa-1
6712: PPUSH
6713: CALL_OW 88
// if Joan or Lisa then
6717: LD_EXP 29
6721: PUSH
6722: LD_EXP 16
6726: OR
6727: IFFALSE 6741
// Say ( JMM , D1-JMM-2 ) ;
6729: LD_EXP 14
6733: PPUSH
6734: LD_STRING D1-JMM-2
6736: PPUSH
6737: CALL_OW 88
// DialogueOff ;
6741: CALL_OW 7
// InGameOff ;
6745: CALL_OW 9
// PlaceSeeing ( 71 , 50 , 7 , - 30 ) ;
6749: LD_INT 71
6751: PPUSH
6752: LD_INT 50
6754: PPUSH
6755: LD_INT 7
6757: PPUSH
6758: LD_INT 30
6760: NEG
6761: PPUSH
6762: CALL_OW 330
// RemoveSeeing ( 71 , 50 , 7 ) ;
6766: LD_INT 71
6768: PPUSH
6769: LD_INT 50
6771: PPUSH
6772: LD_INT 7
6774: PPUSH
6775: CALL_OW 331
// ChangeMissionObjectives ( M1 ) ;
6779: LD_STRING M1
6781: PPUSH
6782: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
6786: LD_INT 35
6788: PPUSH
6789: CALL_OW 67
// until freedom ;
6793: LD_EXP 3
6797: IFFALSE 6786
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
6799: LD_INT 350
6801: PPUSH
6802: LD_INT 700
6804: PPUSH
6805: CALL_OW 12
6809: PPUSH
6810: CALL_OW 67
// PrepareGossudarov ;
6814: CALL 1680 0 0
// repeat wait ( 0 0$1 ) ;
6818: LD_INT 35
6820: PPUSH
6821: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6825: LD_INT 22
6827: PUSH
6828: LD_INT 6
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 3
6837: PUSH
6838: LD_INT 24
6840: PUSH
6841: LD_INT 1000
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PPUSH
6856: CALL_OW 69
6860: IFFALSE 6818
// tmp := FilterAllUnits ( [ f_side , 6 ] ) ;
6862: LD_ADDR_VAR 0 2
6866: PUSH
6867: LD_INT 22
6869: PUSH
6870: LD_INT 6
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PPUSH
6877: CALL_OW 69
6881: ST_TO_ADDR
// for i in tmp do
6882: LD_ADDR_VAR 0 3
6886: PUSH
6887: LD_VAR 0 2
6891: PUSH
6892: FOR_IN
6893: IFFALSE 6909
// SetSide ( i , 7 ) ;
6895: LD_VAR 0 3
6899: PPUSH
6900: LD_INT 7
6902: PPUSH
6903: CALL_OW 235
6907: GO 6892
6909: POP
6910: POP
// DialogueOn ;
6911: CALL_OW 6
// ComTurnUnit ( [ JMM , Roth ] , Gossudarov ) ;
6915: LD_EXP 14
6919: PUSH
6920: LD_EXP 15
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PPUSH
6929: LD_EXP 31
6933: PPUSH
6934: CALL_OW 119
// CenterNowOnUnits ( Gossudarov ) ;
6938: LD_EXP 31
6942: PPUSH
6943: CALL_OW 87
// if not Roth then
6947: LD_EXP 15
6951: NOT
6952: IFFALSE 7016
// begin Say ( JMM , D2-JMM-1 ) ;
6954: LD_EXP 14
6958: PPUSH
6959: LD_STRING D2-JMM-1
6961: PPUSH
6962: CALL_OW 88
// Say ( JMM , D2-JMM-1b ) ;
6966: LD_EXP 14
6970: PPUSH
6971: LD_STRING D2-JMM-1b
6973: PPUSH
6974: CALL_OW 88
// Say ( Gossudarov , D2-Gos-1 ) ;
6978: LD_EXP 31
6982: PPUSH
6983: LD_STRING D2-Gos-1
6985: PPUSH
6986: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
6990: LD_EXP 14
6994: PPUSH
6995: LD_STRING D2-JMM-2
6997: PPUSH
6998: CALL_OW 88
// Say ( Gossudarov , D2-Gos-2 ) ;
7002: LD_EXP 31
7006: PPUSH
7007: LD_STRING D2-Gos-2
7009: PPUSH
7010: CALL_OW 88
// end else
7014: GO 7112
// begin Say ( Roth , D2-Roth-2 ) ;
7016: LD_EXP 15
7020: PPUSH
7021: LD_STRING D2-Roth-2
7023: PPUSH
7024: CALL_OW 88
// Say ( JMM , D2-JMM-1a ) ;
7028: LD_EXP 14
7032: PPUSH
7033: LD_STRING D2-JMM-1a
7035: PPUSH
7036: CALL_OW 88
// Say ( Roth , D2-Roth-2a ) ;
7040: LD_EXP 15
7044: PPUSH
7045: LD_STRING D2-Roth-2a
7047: PPUSH
7048: CALL_OW 88
// Say ( Roth , D2-Roth-2b ) ;
7052: LD_EXP 15
7056: PPUSH
7057: LD_STRING D2-Roth-2b
7059: PPUSH
7060: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7064: LD_EXP 14
7068: PPUSH
7069: LD_STRING D2-JMM-3
7071: PPUSH
7072: CALL_OW 88
// Say ( Gossudarov , D2-Gos-3 ) ;
7076: LD_EXP 31
7080: PPUSH
7081: LD_STRING D2-Gos-3
7083: PPUSH
7084: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
7088: LD_EXP 14
7092: PPUSH
7093: LD_STRING D2-JMM-4
7095: PPUSH
7096: CALL_OW 88
// Say ( Gossudarov , D2-Gos-4 ) ;
7100: LD_EXP 31
7104: PPUSH
7105: LD_STRING D2-Gos-4
7107: PPUSH
7108: CALL_OW 88
// end ; Say ( JMM , D2-JMM-5 ) ;
7112: LD_EXP 14
7116: PPUSH
7117: LD_STRING D2-JMM-5
7119: PPUSH
7120: CALL_OW 88
// Say ( Gossudarov , D2-Gos-5 ) ;
7124: LD_EXP 31
7128: PPUSH
7129: LD_STRING D2-Gos-5
7131: PPUSH
7132: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
7136: LD_EXP 14
7140: PPUSH
7141: LD_STRING D2-JMM-6
7143: PPUSH
7144: CALL_OW 88
// DialogueOff ;
7148: CALL_OW 7
// wait ( 0 0$2 ) ;
7152: LD_INT 70
7154: PPUSH
7155: CALL_OW 67
// if Kirilenkova then
7159: LD_EXP 32
7163: IFFALSE 7177
// Say ( Kirilenkova , D3-Kir-1 ) ;
7165: LD_EXP 32
7169: PPUSH
7170: LD_STRING D3-Kir-1
7172: PPUSH
7173: CALL_OW 88
// gossudarov_arrive := true ;
7177: LD_ADDR_EXP 4
7181: PUSH
7182: LD_INT 1
7184: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7185: LD_INT 35
7187: PPUSH
7188: CALL_OW 67
// until ru_lab_builded ;
7192: LD_EXP 5
7196: IFFALSE 7185
// if Kirilenkova then
7198: LD_EXP 32
7202: IFFALSE 7218
// Say ( Kirilenkova , D3a-Kir-1 ) else
7204: LD_EXP 32
7208: PPUSH
7209: LD_STRING D3a-Kir-1
7211: PPUSH
7212: CALL_OW 88
7216: GO 7240
// begin un := SciRu ;
7218: LD_ADDR_VAR 0 4
7222: PUSH
7223: CALL 12006 0 0
7227: ST_TO_ADDR
// Say ( un , D3a-Sci1-1 ) ;
7228: LD_VAR 0 4
7232: PPUSH
7233: LD_STRING D3a-Sci1-1
7235: PPUSH
7236: CALL_OW 88
// end ; if Kirilenkova or un then
7240: LD_EXP 32
7244: PUSH
7245: LD_VAR 0 4
7249: OR
7250: IFFALSE 7264
// Say ( JMM , D3a-JMM-1 ) ;
7252: LD_EXP 14
7256: PPUSH
7257: LD_STRING D3a-JMM-1
7259: PPUSH
7260: CALL_OW 88
// end ;
7264: LD_VAR 0 1
7268: RET
// every 0 0$1 trigger gossudarov_arrive and FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) < 6 do
7269: LD_EXP 4
7273: PUSH
7274: LD_INT 22
7276: PUSH
7277: LD_INT 7
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: PUSH
7284: LD_INT 2
7286: PUSH
7287: LD_INT 25
7289: PUSH
7290: LD_INT 1
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 25
7299: PUSH
7300: LD_INT 2
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 25
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 25
7319: PUSH
7320: LD_INT 4
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: LD_INT 25
7329: PUSH
7330: LD_INT 5
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 25
7339: PUSH
7340: LD_INT 8
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: LD_INT 25
7349: PUSH
7350: LD_INT 9
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 69
7375: PUSH
7376: LD_INT 6
7378: LESS
7379: AND
7380: IFFALSE 7392
7382: GO 7384
7384: DISABLE
// YouLost ( TooMany ) ;
7385: LD_STRING TooMany
7387: PPUSH
7388: CALL_OW 104
7392: END
// every 0 0$40 trigger GetSide ( Gossudarov ) = 7 do var i , tmp , un ;
7393: LD_EXP 31
7397: PPUSH
7398: CALL_OW 255
7402: PUSH
7403: LD_INT 7
7405: EQUAL
7406: IFFALSE 7606
7408: GO 7410
7410: DISABLE
7411: LD_INT 0
7413: PPUSH
7414: PPUSH
7415: PPUSH
// begin uc_side := 3 ;
7416: LD_ADDR_OWVAR 20
7420: PUSH
7421: LD_INT 3
7423: ST_TO_ADDR
// uc_nation := 3 ;
7424: LD_ADDR_OWVAR 21
7428: PUSH
7429: LD_INT 3
7431: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_heavy_machine_gun , 100 ) ;
7432: LD_INT 21
7434: PPUSH
7435: LD_INT 3
7437: PPUSH
7438: LD_INT 3
7440: PPUSH
7441: LD_INT 42
7443: PPUSH
7444: LD_INT 100
7446: PPUSH
7447: CALL 19547 0 5
// un := CreateVehicle ;
7451: LD_ADDR_VAR 0 3
7455: PUSH
7456: CALL_OW 45
7460: ST_TO_ADDR
// PlaceUnitArea ( un , south_west_spawn , false ) ;
7461: LD_VAR 0 3
7465: PPUSH
7466: LD_INT 15
7468: PPUSH
7469: LD_INT 0
7471: PPUSH
7472: CALL_OW 49
// ComMoveXY ( un , 67 , 45 ) ;
7476: LD_VAR 0 3
7480: PPUSH
7481: LD_INT 67
7483: PPUSH
7484: LD_INT 45
7486: PPUSH
7487: CALL_OW 111
// AddComWait ( un , 0 0$2 ) ;
7491: LD_VAR 0 3
7495: PPUSH
7496: LD_INT 70
7498: PPUSH
7499: CALL_OW 202
// AddComMoveXY ( un , 69 , 18 ) ;
7503: LD_VAR 0 3
7507: PPUSH
7508: LD_INT 69
7510: PPUSH
7511: LD_INT 18
7513: PPUSH
7514: CALL_OW 171
// AddComMoveXY ( un , 60 , 2 ) ;
7518: LD_VAR 0 3
7522: PPUSH
7523: LD_INT 60
7525: PPUSH
7526: LD_INT 2
7528: PPUSH
7529: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7533: LD_INT 35
7535: PPUSH
7536: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , north_spawn ) ;
7540: LD_VAR 0 3
7544: PPUSH
7545: CALL_OW 302
7549: NOT
7550: PUSH
7551: LD_VAR 0 3
7555: PPUSH
7556: LD_INT 17
7558: PPUSH
7559: CALL_OW 308
7563: OR
7564: IFFALSE 7533
// if IsInArea ( un , north_spawn ) or IsAt ( un , 60 , 2 ) then
7566: LD_VAR 0 3
7570: PPUSH
7571: LD_INT 17
7573: PPUSH
7574: CALL_OW 308
7578: PUSH
7579: LD_VAR 0 3
7583: PPUSH
7584: LD_INT 60
7586: PPUSH
7587: LD_INT 2
7589: PPUSH
7590: CALL_OW 307
7594: OR
7595: IFFALSE 7606
// RemoveUnit ( un ) ;
7597: LD_VAR 0 3
7601: PPUSH
7602: CALL_OW 64
// end ;
7606: PPOPN 3
7608: END
// every 0 0$2 do var i , un , tmp ;
7609: GO 7611
7611: DISABLE
7612: LD_INT 0
7614: PPUSH
7615: PPUSH
7616: PPUSH
// begin repeat wait ( 0 0$2 ) ;
7617: LD_INT 70
7619: PPUSH
7620: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 3 ] ] ) ;
7624: LD_ADDR_VAR 0 3
7628: PUSH
7629: LD_INT 22
7631: PUSH
7632: LD_INT 7
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: PUSH
7639: LD_INT 101
7641: PUSH
7642: LD_INT 3
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PPUSH
7653: CALL_OW 69
7657: ST_TO_ADDR
// until tmp ;
7658: LD_VAR 0 3
7662: IFFALSE 7617
// un := NearestUnitToUnit ( tmp , JMM ) ;
7664: LD_ADDR_VAR 0 2
7668: PUSH
7669: LD_VAR 0 3
7673: PPUSH
7674: LD_EXP 14
7678: PPUSH
7679: CALL_OW 74
7683: ST_TO_ADDR
// player_spotted := true ;
7684: LD_ADDR_EXP 6
7688: PUSH
7689: LD_INT 1
7691: ST_TO_ADDR
// tmp := SciRu ;
7692: LD_ADDR_VAR 0 3
7696: PUSH
7697: CALL 12006 0 0
7701: ST_TO_ADDR
// DialogueOn ;
7702: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 7 , - 8 ) ;
7706: LD_VAR 0 2
7710: PPUSH
7711: CALL_OW 250
7715: PPUSH
7716: LD_VAR 0 2
7720: PPUSH
7721: CALL_OW 251
7725: PPUSH
7726: LD_INT 7
7728: PPUSH
7729: LD_INT 8
7731: NEG
7732: PPUSH
7733: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7737: LD_VAR 0 2
7741: PPUSH
7742: CALL_OW 87
// if tmp then
7746: LD_VAR 0 3
7750: IFFALSE 7764
// Say ( tmp , D4-RSci1-1 ) ;
7752: LD_VAR 0 3
7756: PPUSH
7757: LD_STRING D4-RSci1-1
7759: PPUSH
7760: CALL_OW 88
// if Gossudarov then
7764: LD_EXP 31
7768: IFFALSE 7794
// begin Say ( Gossudarov , D4-Gos-1 ) ;
7770: LD_EXP 31
7774: PPUSH
7775: LD_STRING D4-Gos-1
7777: PPUSH
7778: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7782: LD_EXP 14
7786: PPUSH
7787: LD_STRING D4-JMM-1
7789: PPUSH
7790: CALL_OW 88
// end ; RemoveSeeing ( GetX ( un ) , GetY ( un ) , 7 ) ;
7794: LD_VAR 0 2
7798: PPUSH
7799: CALL_OW 250
7803: PPUSH
7804: LD_VAR 0 2
7808: PPUSH
7809: CALL_OW 251
7813: PPUSH
7814: LD_INT 7
7816: PPUSH
7817: CALL_OW 331
// DialogueOff ;
7821: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
7825: LD_STRING M5
7827: PPUSH
7828: CALL_OW 337
// end ;
7832: PPOPN 3
7834: END
// every 0 0$30 + 2 2$30 trigger player_spotted do
7835: LD_EXP 6
7839: IFFALSE 8298
7841: GO 7843
7843: DISABLE
// begin PrepareBelkov ;
7844: CALL 1930 0 0
// ComMoveXY ( Belkov , 118 , 106 ) ;
7848: LD_EXP 46
7852: PPUSH
7853: LD_INT 118
7855: PPUSH
7856: LD_INT 106
7858: PPUSH
7859: CALL_OW 111
// AddComHold ( Belkov ) ;
7863: LD_EXP 46
7867: PPUSH
7868: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
7872: LD_INT 35
7874: PPUSH
7875: CALL_OW 67
// until IsAt ( Belkov , 118 , 106 ) ;
7879: LD_EXP 46
7883: PPUSH
7884: LD_INT 118
7886: PPUSH
7887: LD_INT 106
7889: PPUSH
7890: CALL_OW 307
7894: IFFALSE 7872
// ChangeSideFog ( 4 , 7 ) ;
7896: LD_INT 4
7898: PPUSH
7899: LD_INT 7
7901: PPUSH
7902: CALL_OW 343
// if IsOk ( Belkov ) then
7906: LD_EXP 46
7910: PPUSH
7911: CALL_OW 302
7915: IFFALSE 7999
// begin InGameOn ;
7917: CALL_OW 8
// DialogueOn ;
7921: CALL_OW 6
// SayRadio ( Belkov , D5-Bel-1 ) ;
7925: LD_EXP 46
7929: PPUSH
7930: LD_STRING D5-Bel-1
7932: PPUSH
7933: CALL_OW 94
// if Gossudarov then
7937: LD_EXP 31
7941: IFFALSE 7991
// begin Say ( Gossudarov , D5-Gos-1 ) ;
7943: LD_EXP 31
7947: PPUSH
7948: LD_STRING D5-Gos-1
7950: PPUSH
7951: CALL_OW 88
// Say ( JMM , D5-JMM-1 ) ;
7955: LD_EXP 14
7959: PPUSH
7960: LD_STRING D5-JMM-1
7962: PPUSH
7963: CALL_OW 88
// Say ( Gossudarov , D5-Gos-2 ) ;
7967: LD_EXP 31
7971: PPUSH
7972: LD_STRING D5-Gos-2
7974: PPUSH
7975: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
7979: LD_EXP 14
7983: PPUSH
7984: LD_STRING D5-JMM-2
7986: PPUSH
7987: CALL_OW 88
// end ; DialogueOff ;
7991: CALL_OW 7
// InGameOff ;
7995: CALL_OW 9
// end ; case Query ( QSaveBelkov ) of 1 :
7999: LD_STRING QSaveBelkov
8001: PPUSH
8002: CALL_OW 97
8006: PUSH
8007: LD_INT 1
8009: DOUBLE
8010: EQUAL
8011: IFTRUE 8015
8013: GO 8065
8015: POP
// begin DialogueOn ;
8016: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
8020: LD_EXP 14
8024: PPUSH
8025: LD_STRING D5a-JMM-1
8027: PPUSH
8028: CALL_OW 88
// SayRadio ( Belkov , D5a-Bel-1 ) ;
8032: LD_EXP 46
8036: PPUSH
8037: LD_STRING D5a-Bel-1
8039: PPUSH
8040: CALL_OW 94
// DialogueOff ;
8044: CALL_OW 7
// ComMoveXY ( Belkov , 83 , 49 ) ;
8048: LD_EXP 46
8052: PPUSH
8053: LD_INT 83
8055: PPUSH
8056: LD_INT 49
8058: PPUSH
8059: CALL_OW 111
// end ; 2 :
8063: GO 8125
8065: LD_INT 2
8067: DOUBLE
8068: EQUAL
8069: IFTRUE 8073
8071: GO 8124
8073: POP
// begin Say ( JMM , D5a-JMM-2 ) ;
8074: LD_EXP 14
8078: PPUSH
8079: LD_STRING D5a-JMM-2
8081: PPUSH
8082: CALL_OW 88
// ComWait ( Belkov , 0 0$10 ) ;
8086: LD_EXP 46
8090: PPUSH
8091: LD_INT 350
8093: PPUSH
8094: CALL_OW 142
// AddComMoveXY ( Belkov , 107 , 109 ) ;
8098: LD_EXP 46
8102: PPUSH
8103: LD_INT 107
8105: PPUSH
8106: LD_INT 109
8108: PPUSH
8109: CALL_OW 171
// AddComHold ( Belkov ) ;
8113: LD_EXP 46
8117: PPUSH
8118: CALL_OW 200
// end ; end ;
8122: GO 8125
8124: POP
// repeat wait ( 0 0$1 ) ;
8125: LD_INT 35
8127: PPUSH
8128: CALL_OW 67
// until ( IsDead ( Belkov ) and GetSide ( Belkov ) = 4 ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Belkov ) , Belkov ) < 10 ;
8132: LD_EXP 46
8136: PPUSH
8137: CALL_OW 301
8141: PUSH
8142: LD_EXP 46
8146: PPUSH
8147: CALL_OW 255
8151: PUSH
8152: LD_INT 4
8154: EQUAL
8155: AND
8156: PUSH
8157: LD_INT 22
8159: PUSH
8160: LD_INT 7
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: PPUSH
8172: LD_EXP 46
8176: PPUSH
8177: CALL_OW 74
8181: PPUSH
8182: LD_EXP 46
8186: PPUSH
8187: CALL_OW 296
8191: PUSH
8192: LD_INT 10
8194: LESS
8195: OR
8196: IFFALSE 8125
// if IsDead ( Belkov ) then
8198: LD_EXP 46
8202: PPUSH
8203: CALL_OW 301
8207: IFFALSE 8232
// begin CenterNowOnUnits ( Belkov ) ;
8209: LD_EXP 46
8213: PPUSH
8214: CALL_OW 87
// Say ( JMM , D5a-JMM-2a ) ;
8218: LD_EXP 14
8222: PPUSH
8223: LD_STRING D5a-JMM-2a
8225: PPUSH
8226: CALL_OW 88
// exit ;
8230: GO 8298
// end ; if See ( 7 , Belkov ) then
8232: LD_INT 7
8234: PPUSH
8235: LD_EXP 46
8239: PPUSH
8240: CALL_OW 292
8244: IFFALSE 8258
// SetSide ( Belkov , 7 ) ;
8246: LD_EXP 46
8250: PPUSH
8251: LD_INT 7
8253: PPUSH
8254: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
8258: LD_INT 35
8260: PPUSH
8261: CALL_OW 67
// until GetDistUnitXY ( Belkov , 66 , 45 ) < 30 ;
8265: LD_EXP 46
8269: PPUSH
8270: LD_INT 66
8272: PPUSH
8273: LD_INT 45
8275: PPUSH
8276: CALL_OW 297
8280: PUSH
8281: LD_INT 30
8283: LESS
8284: IFFALSE 8258
// Say ( Belkov , D6-Bel-1 ) ;
8286: LD_EXP 46
8290: PPUSH
8291: LD_STRING D6-Bel-1
8293: PPUSH
8294: CALL_OW 88
// end ;
8298: END
// every 0 0$1 trigger IsOk ( Belkov ) and UnitShoot ( Belkov ) in FilterAllUnits ( [ f_or , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ) do
8299: LD_EXP 46
8303: PPUSH
8304: CALL_OW 302
8308: PUSH
8309: LD_EXP 46
8313: PPUSH
8314: CALL_OW 504
8318: PUSH
8319: LD_INT 2
8321: PUSH
8322: LD_INT 34
8324: PUSH
8325: LD_INT 47
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 34
8334: PUSH
8335: LD_INT 45
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: LIST
8346: PPUSH
8347: CALL_OW 69
8351: IN
8352: AND
8353: IFFALSE 8370
8355: GO 8357
8357: DISABLE
// Say ( Belkov , D7-Bel-1 ) ;
8358: LD_EXP 46
8362: PPUSH
8363: LD_STRING D7-Bel-1
8365: PPUSH
8366: CALL_OW 88
8370: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 2 ] ] ) and not ar_base_spotted and not IsPlaced ( Burlak ) do var tmp ;
8371: LD_INT 22
8373: PUSH
8374: LD_INT 7
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: PUSH
8381: LD_INT 101
8383: PUSH
8384: LD_INT 2
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PPUSH
8395: CALL_OW 69
8399: PUSH
8400: LD_EXP 8
8404: NOT
8405: AND
8406: PUSH
8407: LD_EXP 45
8411: PPUSH
8412: CALL_OW 305
8416: NOT
8417: AND
8418: IFFALSE 8888
8420: GO 8422
8422: DISABLE
8423: LD_INT 0
8425: PPUSH
// begin ar_base_spotted := true ;
8426: LD_ADDR_EXP 8
8430: PUSH
8431: LD_INT 1
8433: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) ;
8434: LD_ADDR_VAR 0 1
8438: PUSH
8439: LD_INT 22
8441: PUSH
8442: LD_INT 2
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: LD_INT 21
8451: PUSH
8452: LD_INT 3
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: PPUSH
8463: CALL_OW 69
8467: ST_TO_ADDR
// tmp := NearestUnitToUnit ( tmp , JMM ) ;
8468: LD_ADDR_VAR 0 1
8472: PUSH
8473: LD_VAR 0 1
8477: PPUSH
8478: LD_EXP 14
8482: PPUSH
8483: CALL_OW 74
8487: ST_TO_ADDR
// RevealFogArea ( 7 , area_base_arabian ) ;
8488: LD_INT 7
8490: PPUSH
8491: LD_INT 3
8493: PPUSH
8494: CALL_OW 332
// DialogueOn ;
8498: CALL_OW 6
// CenterNowOnXY ( GetX ( tmp ) , GetY ( tmp ) ) ;
8502: LD_VAR 0 1
8506: PPUSH
8507: CALL_OW 250
8511: PPUSH
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 251
8521: PPUSH
8522: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Frank , Roth , Cornel , Denis , Gladstone ] ;
8526: LD_ADDR_VAR 0 1
8530: PUSH
8531: LD_INT 22
8533: PUSH
8534: LD_INT 7
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: LD_INT 23
8543: PUSH
8544: LD_INT 1
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 26
8553: PUSH
8554: LD_INT 1
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: PPUSH
8566: CALL_OW 69
8570: PUSH
8571: LD_EXP 14
8575: PUSH
8576: LD_EXP 18
8580: PUSH
8581: LD_EXP 19
8585: PUSH
8586: LD_EXP 26
8590: PUSH
8591: LD_EXP 15
8595: PUSH
8596: LD_EXP 24
8600: PUSH
8601: LD_EXP 20
8605: PUSH
8606: LD_EXP 22
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: DIFF
8621: ST_TO_ADDR
// if not tmp then
8622: LD_VAR 0 1
8626: NOT
8627: IFFALSE 8701
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_female ] ] ) diff [ Joan , Lisa , Kikuchi , Simms ] ;
8629: LD_ADDR_VAR 0 1
8633: PUSH
8634: LD_INT 22
8636: PUSH
8637: LD_INT 7
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 23
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 26
8656: PUSH
8657: LD_INT 2
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: LIST
8668: PPUSH
8669: CALL_OW 69
8673: PUSH
8674: LD_EXP 29
8678: PUSH
8679: LD_EXP 16
8683: PUSH
8684: LD_EXP 27
8688: PUSH
8689: LD_EXP 28
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: DIFF
8700: ST_TO_ADDR
// if tmp then
8701: LD_VAR 0 1
8705: IFFALSE 8776
// case GetSex ( tmp [ 1 ] ) of sex_male :
8707: LD_VAR 0 1
8711: PUSH
8712: LD_INT 1
8714: ARRAY
8715: PPUSH
8716: CALL_OW 258
8720: PUSH
8721: LD_INT 1
8723: DOUBLE
8724: EQUAL
8725: IFTRUE 8729
8727: GO 8748
8729: POP
// Say ( tmp [ 1 ] , D9-Sol1-1 ) ; sex_female :
8730: LD_VAR 0 1
8734: PUSH
8735: LD_INT 1
8737: ARRAY
8738: PPUSH
8739: LD_STRING D9-Sol1-1
8741: PPUSH
8742: CALL_OW 88
8746: GO 8776
8748: LD_INT 2
8750: DOUBLE
8751: EQUAL
8752: IFTRUE 8756
8754: GO 8775
8756: POP
// Say ( tmp [ 1 ] , D9-FSol1-1 ) ; end ;
8757: LD_VAR 0 1
8761: PUSH
8762: LD_INT 1
8764: ARRAY
8765: PPUSH
8766: LD_STRING D9-FSol1-1
8768: PPUSH
8769: CALL_OW 88
8773: GO 8776
8775: POP
// if Frank then
8776: LD_EXP 26
8780: IFFALSE 8884
// begin PlaceSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 , 8 ) ;
8782: LD_EXP 55
8786: PPUSH
8787: CALL_OW 250
8791: PPUSH
8792: LD_EXP 55
8796: PPUSH
8797: CALL_OW 251
8801: PPUSH
8802: LD_INT 7
8804: PPUSH
8805: LD_INT 8
8807: PPUSH
8808: CALL_OW 330
// CenterNowOnUnits ( mastodont ) ;
8812: LD_EXP 55
8816: PPUSH
8817: CALL_OW 87
// Say ( Frank , D9-Frank-1 ) ;
8821: LD_EXP 26
8825: PPUSH
8826: LD_STRING D9-Frank-1
8828: PPUSH
8829: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
8833: LD_EXP 14
8837: PPUSH
8838: LD_STRING D9-JMM-1
8840: PPUSH
8841: CALL_OW 88
// Say ( Frank , D9-Frank-2 ) ;
8845: LD_EXP 26
8849: PPUSH
8850: LD_STRING D9-Frank-2
8852: PPUSH
8853: CALL_OW 88
// RemoveSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 ) ;
8857: LD_EXP 55
8861: PPUSH
8862: CALL_OW 250
8866: PPUSH
8867: LD_EXP 55
8871: PPUSH
8872: CALL_OW 251
8876: PPUSH
8877: LD_INT 7
8879: PPUSH
8880: CALL_OW 331
// end ; DialogueOff ;
8884: CALL_OW 7
// end ;
8888: PPOPN 1
8890: END
// every 0 0$20 trigger first_attack do var i , selected_option ;
8891: LD_EXP 7
8895: IFFALSE 9922
8897: GO 8899
8899: DISABLE
8900: LD_INT 0
8902: PPUSH
8903: PPUSH
// begin selected_option := 1 ;
8904: LD_ADDR_VAR 0 2
8908: PUSH
8909: LD_INT 1
8911: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8912: LD_INT 10500
8914: PPUSH
8915: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8919: LD_INT 35
8921: PPUSH
8922: CALL_OW 67
// until not ru_attackers ;
8926: LD_EXP 51
8930: NOT
8931: IFFALSE 8919
// PrepareBurlak ;
8933: CALL 2042 0 0
// repeat wait ( 0 0$2 ) ;
8937: LD_INT 70
8939: PPUSH
8940: CALL_OW 67
// until not HasTask ( Burlak ) ;
8944: LD_EXP 45
8948: PPUSH
8949: CALL_OW 314
8953: NOT
8954: IFFALSE 8937
// InGameOn ;
8956: CALL_OW 8
// DialogueOn ;
8960: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
8964: LD_EXP 48
8968: PPUSH
8969: CALL_OW 87
// SayRadio ( Burlak , D10-Bur-1 ) ;
8973: LD_EXP 45
8977: PPUSH
8978: LD_STRING D10-Bur-1
8980: PPUSH
8981: CALL_OW 94
// if Belkov and GetSide ( Belkov ) = 7 then
8985: LD_EXP 46
8989: PUSH
8990: LD_EXP 46
8994: PPUSH
8995: CALL_OW 255
8999: PUSH
9000: LD_INT 7
9002: EQUAL
9003: AND
9004: IFFALSE 9018
// Say ( Belkov , D10-Bel-1 ) ;
9006: LD_EXP 46
9010: PPUSH
9011: LD_STRING D10-Bel-1
9013: PPUSH
9014: CALL_OW 88
// if Gossudarov then
9018: LD_EXP 31
9022: IFFALSE 9036
// Say ( Gossudarov , D10-Gos-1 ) ;
9024: LD_EXP 31
9028: PPUSH
9029: LD_STRING D10-Gos-1
9031: PPUSH
9032: CALL_OW 88
// if Kirilenkova then
9036: LD_EXP 32
9040: IFFALSE 9054
// Say ( Kirilenkova , D10-Kir-1 ) ;
9042: LD_EXP 32
9046: PPUSH
9047: LD_STRING D10-Kir-1
9049: PPUSH
9050: CALL_OW 88
// Say ( SolRu , D10-RSol1-1 ) ;
9054: CALL 12135 0 0
9058: PPUSH
9059: LD_STRING D10-RSol1-1
9061: PPUSH
9062: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-2 ) ;
9066: LD_EXP 45
9070: PPUSH
9071: LD_STRING D10-Bur-2
9073: PPUSH
9074: CALL_OW 94
// Say ( JMM , D10-JMM-2 ) ;
9078: LD_EXP 14
9082: PPUSH
9083: LD_STRING D10-JMM-2
9085: PPUSH
9086: CALL_OW 88
// if Kirilenkova then
9090: LD_EXP 32
9094: IFFALSE 9110
// Say ( Kirilenkova , D10-Kir-2 ) else
9096: LD_EXP 32
9100: PPUSH
9101: LD_STRING D10-Kir-2
9103: PPUSH
9104: CALL_OW 88
9108: GO 9122
// Say ( SolRu , D10-RSol1-2 ) ;
9110: CALL 12135 0 0
9114: PPUSH
9115: LD_STRING D10-RSol1-2
9117: PPUSH
9118: CALL_OW 88
// Say ( JMM , D10-JMM-3 ) ;
9122: LD_EXP 14
9126: PPUSH
9127: LD_STRING D10-JMM-3
9129: PPUSH
9130: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-3 ) ;
9134: LD_EXP 45
9138: PPUSH
9139: LD_STRING D10-Bur-3
9141: PPUSH
9142: CALL_OW 94
// Say ( JMM , D10-JMM-4 ) ;
9146: LD_EXP 14
9150: PPUSH
9151: LD_STRING D10-JMM-4
9153: PPUSH
9154: CALL_OW 88
// DialogueOff ;
9158: CALL_OW 7
// InGameOff ;
9162: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
9166: LD_STRING M2
9168: PPUSH
9169: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
9173: LD_INT 35
9175: PPUSH
9176: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , Burlak , 8 ] ] ) ;
9180: LD_INT 22
9182: PUSH
9183: LD_INT 7
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: PUSH
9190: LD_INT 91
9192: PUSH
9193: LD_EXP 45
9197: PUSH
9198: LD_INT 8
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: LIST
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PPUSH
9210: CALL_OW 69
9214: IFFALSE 9173
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9216: LD_ADDR_VAR 0 1
9220: PUSH
9221: LD_INT 22
9223: PUSH
9224: LD_INT 4
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PPUSH
9231: CALL_OW 69
9235: PUSH
9236: FOR_IN
9237: IFFALSE 9253
// SetSide ( i , 7 ) ;
9239: LD_VAR 0 1
9243: PPUSH
9244: LD_INT 7
9246: PPUSH
9247: CALL_OW 235
9251: GO 9236
9253: POP
9254: POP
// ChangeMissionObjectives ( M3 ) ;
9255: LD_STRING M3
9257: PPUSH
9258: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
9262: LD_INT 35
9264: PPUSH
9265: CALL_OW 67
// until GetDistUnits ( JMM , Burlak ) < 8 ;
9269: LD_EXP 14
9273: PPUSH
9274: LD_EXP 45
9278: PPUSH
9279: CALL_OW 296
9283: PUSH
9284: LD_INT 8
9286: LESS
9287: IFFALSE 9262
// ComTurnUnit ( JMM , Burlak ) ;
9289: LD_EXP 14
9293: PPUSH
9294: LD_EXP 45
9298: PPUSH
9299: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
9303: LD_EXP 45
9307: PPUSH
9308: LD_EXP 14
9312: PPUSH
9313: CALL_OW 119
// wait ( 0 0$0.3 ) ;
9317: LD_INT 10
9319: PPUSH
9320: CALL_OW 67
// DialogueOn ;
9324: CALL_OW 6
// Say ( JMM , D11-JMM-1 ) ;
9328: LD_EXP 14
9332: PPUSH
9333: LD_STRING D11-JMM-1
9335: PPUSH
9336: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
9340: LD_EXP 45
9344: PPUSH
9345: LD_STRING D11-Bur-1
9347: PPUSH
9348: CALL_OW 88
// Say ( JMM , D11-JMM-2 ) ;
9352: LD_EXP 14
9356: PPUSH
9357: LD_STRING D11-JMM-2
9359: PPUSH
9360: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
9364: LD_EXP 45
9368: PPUSH
9369: LD_STRING D11-Bur-2
9371: PPUSH
9372: CALL_OW 88
// Say ( JMM , D11-JMM-3 ) ;
9376: LD_EXP 14
9380: PPUSH
9381: LD_STRING D11-JMM-3
9383: PPUSH
9384: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
9388: LD_EXP 45
9392: PPUSH
9393: LD_STRING D11-Bur-3
9395: PPUSH
9396: CALL_OW 88
// Say ( JMM , D11-JMM-4 ) ;
9400: LD_EXP 14
9404: PPUSH
9405: LD_STRING D11-JMM-4
9407: PPUSH
9408: CALL_OW 88
// if ar_base_spotted then
9412: LD_EXP 8
9416: IFFALSE 9432
// Say ( Burlak , D12-Bur-1 ) else
9418: LD_EXP 45
9422: PPUSH
9423: LD_STRING D12-Bur-1
9425: PPUSH
9426: CALL_OW 88
9430: GO 9471
// begin RevealFogArea ( 7 , area_base_arabian ) ;
9432: LD_INT 7
9434: PPUSH
9435: LD_INT 3
9437: PPUSH
9438: CALL_OW 332
// CenterNowOnXY ( 127 , 45 ) ;
9442: LD_INT 127
9444: PPUSH
9445: LD_INT 45
9447: PPUSH
9448: CALL_OW 86
// Say ( Burlak , D12-Bur-1a ) ;
9452: LD_EXP 45
9456: PPUSH
9457: LD_STRING D12-Bur-1a
9459: PPUSH
9460: CALL_OW 88
// dwait ( 0 0$2 ) ;
9464: LD_INT 70
9466: PPUSH
9467: CALL_OW 68
// end ; Say ( Burlak , D12-Bur-1b ) ;
9471: LD_EXP 45
9475: PPUSH
9476: LD_STRING D12-Bur-1b
9478: PPUSH
9479: CALL_OW 88
// Say ( JMM , D12-JMM-1 ) ;
9483: LD_EXP 14
9487: PPUSH
9488: LD_STRING D12-JMM-1
9490: PPUSH
9491: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
9495: LD_EXP 45
9499: PPUSH
9500: LD_STRING D12-Bur-2
9502: PPUSH
9503: CALL_OW 88
// if Roth then
9507: LD_EXP 15
9511: IFFALSE 9527
// Say ( Roth , D12-Roth-2 ) else
9513: LD_EXP 15
9517: PPUSH
9518: LD_STRING D12-Roth-2
9520: PPUSH
9521: CALL_OW 88
9525: GO 9539
// Say ( SciRu , D12-RSci1-2 ) ;
9527: CALL 12006 0 0
9531: PPUSH
9532: LD_STRING D12-RSci1-2
9534: PPUSH
9535: CALL_OW 88
// Say ( JMM , D12-JMM-2 ) ;
9539: LD_EXP 14
9543: PPUSH
9544: LD_STRING D12-JMM-2
9546: PPUSH
9547: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
9551: LD_EXP 45
9555: PPUSH
9556: LD_STRING D12-Bur-3
9558: PPUSH
9559: CALL_OW 88
// Say ( JMM , D12-JMM-3 ) ;
9563: LD_EXP 14
9567: PPUSH
9568: LD_STRING D12-JMM-3
9570: PPUSH
9571: CALL_OW 88
// Say ( Burlak , D12-Bur-4 ) ;
9575: LD_EXP 45
9579: PPUSH
9580: LD_STRING D12-Bur-4
9582: PPUSH
9583: CALL_OW 88
// case Query ( QBase ) of 1 :
9587: LD_STRING QBase
9589: PPUSH
9590: CALL_OW 97
9594: PUSH
9595: LD_INT 1
9597: DOUBLE
9598: EQUAL
9599: IFTRUE 9603
9601: GO 9721
9603: POP
// begin Say ( JMM , D13a-JMM-1 ) ;
9604: LD_EXP 14
9608: PPUSH
9609: LD_STRING D13a-JMM-1
9611: PPUSH
9612: CALL_OW 88
// Say ( Burlak , D13a-Bur-1 ) ;
9616: LD_EXP 45
9620: PPUSH
9621: LD_STRING D13a-Bur-1
9623: PPUSH
9624: CALL_OW 88
// if Roth then
9628: LD_EXP 15
9632: IFFALSE 9648
// Say ( Roth , D13a-Roth-1 ) else
9634: LD_EXP 15
9638: PPUSH
9639: LD_STRING D13a-Roth-1
9641: PPUSH
9642: CALL_OW 88
9646: GO 9660
// Say ( SciRu , D13a-RSci1-1 ) ;
9648: CALL 12006 0 0
9652: PPUSH
9653: LD_STRING D13a-RSci1-1
9655: PPUSH
9656: CALL_OW 88
// Say ( JMM , D13a-JMM-2 ) ;
9660: LD_EXP 14
9664: PPUSH
9665: LD_STRING D13a-JMM-2
9667: PPUSH
9668: CALL_OW 88
// case Query ( QBaseAgain ) of 1 :
9672: LD_STRING QBaseAgain
9674: PPUSH
9675: CALL_OW 97
9679: PUSH
9680: LD_INT 1
9682: DOUBLE
9683: EQUAL
9684: IFTRUE 9688
9686: GO 9699
9688: POP
// selected_option := 2 ; 2 :
9689: LD_ADDR_VAR 0 2
9693: PUSH
9694: LD_INT 2
9696: ST_TO_ADDR
9697: GO 9719
9699: LD_INT 2
9701: DOUBLE
9702: EQUAL
9703: IFTRUE 9707
9705: GO 9718
9707: POP
// selected_option := 3 ; end ;
9708: LD_ADDR_VAR 0 2
9712: PUSH
9713: LD_INT 3
9715: ST_TO_ADDR
9716: GO 9719
9718: POP
// end ; 2 :
9719: GO 9760
9721: LD_INT 2
9723: DOUBLE
9724: EQUAL
9725: IFTRUE 9729
9727: GO 9740
9729: POP
// selected_option := 2 ; 3 :
9730: LD_ADDR_VAR 0 2
9734: PUSH
9735: LD_INT 2
9737: ST_TO_ADDR
9738: GO 9760
9740: LD_INT 3
9742: DOUBLE
9743: EQUAL
9744: IFTRUE 9748
9746: GO 9759
9748: POP
// selected_option := 3 ; end ;
9749: LD_ADDR_VAR 0 2
9753: PUSH
9754: LD_INT 3
9756: ST_TO_ADDR
9757: GO 9760
9759: POP
// if selected_option = 2 then
9760: LD_VAR 0 2
9764: PUSH
9765: LD_INT 2
9767: EQUAL
9768: IFFALSE 9862
// begin Say ( JMM , D13b-JMM-1 ) ;
9770: LD_EXP 14
9774: PPUSH
9775: LD_STRING D13b-JMM-1
9777: PPUSH
9778: CALL_OW 88
// Say ( Burlak , D13b-Bur-1 ) ;
9782: LD_EXP 45
9786: PPUSH
9787: LD_STRING D13b-Bur-1
9789: PPUSH
9790: CALL_OW 88
// Say ( JMM , D13b-JMM-2 ) ;
9794: LD_EXP 14
9798: PPUSH
9799: LD_STRING D13b-JMM-2
9801: PPUSH
9802: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-2 ) ;
9806: LD_EXP 54
9810: PPUSH
9811: LD_STRING D13b-Abd-2
9813: PPUSH
9814: CALL_OW 94
// Say ( JMM , D13b-JMM-3 ) ;
9818: LD_EXP 14
9822: PPUSH
9823: LD_STRING D13b-JMM-3
9825: PPUSH
9826: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-3 ) ;
9830: LD_EXP 54
9834: PPUSH
9835: LD_STRING D13b-Abd-3
9837: PPUSH
9838: CALL_OW 94
// Say ( JMM , D13b-JMM-4 ) ;
9842: LD_EXP 14
9846: PPUSH
9847: LD_STRING D13b-JMM-4
9849: PPUSH
9850: CALL_OW 88
// ar_active_attack := true ;
9854: LD_ADDR_EXP 9
9858: PUSH
9859: LD_INT 1
9861: ST_TO_ADDR
// end ; if selected_option = 3 then
9862: LD_VAR 0 2
9866: PUSH
9867: LD_INT 3
9869: EQUAL
9870: IFFALSE 9896
// begin Say ( JMM , D13c-JMM-1 ) ;
9872: LD_EXP 14
9876: PPUSH
9877: LD_STRING D13c-JMM-1
9879: PPUSH
9880: CALL_OW 88
// Say ( Burlak , D13c-Bur-1 ) ;
9884: LD_EXP 45
9888: PPUSH
9889: LD_STRING D13c-Bur-1
9891: PPUSH
9892: CALL_OW 88
// end ; DialogueOff ;
9896: CALL_OW 7
// if not ar_active_attack then
9900: LD_EXP 9
9904: NOT
9905: IFFALSE 9922
// begin wait ( 6 6$00 ) ;
9907: LD_INT 12600
9909: PPUSH
9910: CALL_OW 67
// ar_active_attack := true ;
9914: LD_ADDR_EXP 9
9918: PUSH
9919: LD_INT 1
9921: ST_TO_ADDR
// end ; end ;
9922: PPOPN 2
9924: END
// every 0 0$1 trigger IsPlaced ( Burlak ) and GetSide ( Burlak ) = 7 do
9925: LD_EXP 45
9929: PPUSH
9930: CALL_OW 305
9934: PUSH
9935: LD_EXP 45
9939: PPUSH
9940: CALL_OW 255
9944: PUSH
9945: LD_INT 7
9947: EQUAL
9948: AND
9949: IFFALSE 10110
9951: GO 9953
9953: DISABLE
// begin wait ( 4 4$40 ) ;
9954: LD_INT 9800
9956: PPUSH
9957: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9961: LD_INT 35
9963: PPUSH
9964: CALL_OW 67
// until not ru_attackers ;
9968: LD_EXP 51
9972: NOT
9973: IFFALSE 9961
// PrepareGnyevko ;
9975: CALL 1986 0 0
// ComMoveXY ( Gnyevko , 124 , 118 ) ;
9979: LD_EXP 47
9983: PPUSH
9984: LD_INT 124
9986: PPUSH
9987: LD_INT 118
9989: PPUSH
9990: CALL_OW 111
// AddComHold ( Gnyevko ) ;
9994: LD_EXP 47
9998: PPUSH
9999: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10003: LD_INT 35
10005: PPUSH
10006: CALL_OW 67
// until IsAt ( Gnyevko , 124 , 118 ) ;
10010: LD_EXP 47
10014: PPUSH
10015: LD_INT 124
10017: PPUSH
10018: LD_INT 118
10020: PPUSH
10021: CALL_OW 307
10025: IFFALSE 10003
// SayRadio ( Gnyevko , DBelkov-Gny-1 ) ;
10027: LD_EXP 47
10031: PPUSH
10032: LD_STRING DBelkov-Gny-1
10034: PPUSH
10035: CALL_OW 94
// Say ( Burlak , DBelkov-Bur-1a ) ;
10039: LD_EXP 45
10043: PPUSH
10044: LD_STRING DBelkov-Bur-1a
10046: PPUSH
10047: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10051: LD_INT 35
10053: PPUSH
10054: CALL_OW 67
// until GetDistUnits ( Gnyevko , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Gnyevko ) ) < 8 ;
10058: LD_EXP 47
10062: PPUSH
10063: LD_INT 22
10065: PUSH
10066: LD_INT 7
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PPUSH
10073: CALL_OW 69
10077: PPUSH
10078: LD_EXP 47
10082: PPUSH
10083: CALL_OW 74
10087: PPUSH
10088: CALL_OW 296
10092: PUSH
10093: LD_INT 8
10095: LESS
10096: IFFALSE 10051
// SetSide ( Gnyevko , 7 ) ;
10098: LD_EXP 47
10102: PPUSH
10103: LD_INT 7
10105: PPUSH
10106: CALL_OW 235
// end ;
10110: END
// every 10 10$00 + 1 1$30 trigger GetSide ( Burlak ) = 7 do
10111: LD_EXP 45
10115: PPUSH
10116: CALL_OW 255
10120: PUSH
10121: LD_INT 7
10123: EQUAL
10124: IFFALSE 10134
10126: GO 10128
10128: DISABLE
// begin enable ;
10129: ENABLE
// PrepareAmericanAttack ;
10130: CALL 6246 0 0
// end ;
10134: END
// every 0 0$2 trigger FilterAllUnits ( [ f_side , 1 ] ) do var i , tmp ;
10135: LD_INT 22
10137: PUSH
10138: LD_INT 1
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL_OW 69
10149: IFFALSE 10333
10151: GO 10153
10153: DISABLE
10154: LD_INT 0
10156: PPUSH
10157: PPUSH
// begin while true do
10158: LD_INT 1
10160: IFFALSE 10217
// begin wait ( 0 0$1 ) ;
10162: LD_INT 35
10164: PPUSH
10165: CALL_OW 67
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , JMM ) ;
10169: LD_ADDR_VAR 0 2
10173: PUSH
10174: LD_INT 22
10176: PUSH
10177: LD_INT 1
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PPUSH
10184: CALL_OW 69
10188: PPUSH
10189: LD_EXP 14
10193: PPUSH
10194: CALL_OW 74
10198: ST_TO_ADDR
// if See ( 7 , tmp ) then
10199: LD_INT 7
10201: PPUSH
10202: LD_VAR 0 2
10206: PPUSH
10207: CALL_OW 292
10211: IFFALSE 10215
// break ;
10213: GO 10217
// end ;
10215: GO 10158
// DialogueOn ;
10217: CALL_OW 6
// CenterNowOnUnits ( tmp ) ;
10221: LD_VAR 0 2
10225: PPUSH
10226: CALL_OW 87
// PlaceSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 , 8 ) ;
10230: LD_VAR 0 2
10234: PPUSH
10235: CALL_OW 250
10239: PPUSH
10240: LD_VAR 0 2
10244: PPUSH
10245: CALL_OW 251
10249: PPUSH
10250: LD_INT 7
10252: PPUSH
10253: LD_INT 8
10255: PPUSH
10256: CALL_OW 330
// if Denis then
10260: LD_EXP 20
10264: IFFALSE 10278
// Say ( Denis , DAmerAttack-Pet-1 ) ;
10266: LD_EXP 20
10270: PPUSH
10271: LD_STRING DAmerAttack-Pet-1
10273: PPUSH
10274: CALL_OW 88
// Say ( JMM , DAmerAttack-JMM-1 ) ;
10278: LD_EXP 14
10282: PPUSH
10283: LD_STRING DAmerAttack-JMM-1
10285: PPUSH
10286: CALL_OW 88
// Say ( Burlak , DStop-Bur-1 ) ;
10290: LD_EXP 45
10294: PPUSH
10295: LD_STRING DStop-Bur-1
10297: PPUSH
10298: CALL_OW 88
// RemoveSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 ) ;
10302: LD_VAR 0 2
10306: PPUSH
10307: CALL_OW 250
10311: PPUSH
10312: LD_VAR 0 2
10316: PPUSH
10317: CALL_OW 251
10321: PPUSH
10322: LD_INT 7
10324: PPUSH
10325: CALL_OW 331
// DialogueOff ;
10329: CALL_OW 7
// end ;
10333: PPOPN 2
10335: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and IsDead ( ru_depot ) do
10336: LD_INT 22
10338: PUSH
10339: LD_INT 3
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 21
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PPUSH
10360: CALL_OW 69
10364: PUSH
10365: LD_INT 0
10367: EQUAL
10368: PUSH
10369: LD_INT 47
10371: PPUSH
10372: CALL_OW 301
10376: AND
10377: IFFALSE 10419
10379: GO 10381
10381: DISABLE
// begin ChangeMissionObjectives ( M5a ) ;
10382: LD_STRING M5a
10384: PPUSH
10385: CALL_OW 337
// Say ( JMM , D8-JMM-1 ) ;
10389: LD_EXP 14
10393: PPUSH
10394: LD_STRING D8-JMM-1
10396: PPUSH
10397: CALL_OW 88
// if Gossudarov then
10401: LD_EXP 31
10405: IFFALSE 10419
// Say ( Gossudarov , D8-Gos-1 ) ;
10407: LD_EXP 31
10411: PPUSH
10412: LD_STRING D8-Gos-1
10414: PPUSH
10415: CALL_OW 88
// end ;
10419: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 do
10420: LD_INT 22
10422: PUSH
10423: LD_INT 2
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: LD_INT 21
10432: PUSH
10433: LD_INT 1
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PPUSH
10444: CALL_OW 69
10448: PUSH
10449: LD_INT 0
10451: EQUAL
10452: IFFALSE 10502
10454: GO 10456
10456: DISABLE
// begin ChangeMissionObjectives ( M4c ) ;
10457: LD_STRING M4c
10459: PPUSH
10460: CALL_OW 337
// if Roth then
10464: LD_EXP 15
10468: IFFALSE 10484
// Say ( Roth , DStop-Roth-1 ) else
10470: LD_EXP 15
10474: PPUSH
10475: LD_STRING DStop-Roth-1
10477: PPUSH
10478: CALL_OW 88
10482: GO 10502
// if Gossudarov then
10484: LD_EXP 31
10488: IFFALSE 10502
// Say ( Gossudarov , D8-Gos-1a ) ;
10490: LD_EXP 31
10494: PPUSH
10495: LD_STRING D8-Gos-1a
10497: PPUSH
10498: CALL_OW 88
// end ;
10502: END
// every 0 0$01 trigger GetTechNation ( 7 , 1 , state_enabled ) = 0 and GetTechNation ( 7 , 3 , state_enabled ) = 0 do
10503: LD_INT 7
10505: PPUSH
10506: LD_INT 1
10508: PPUSH
10509: LD_INT 1
10511: PPUSH
10512: CALL 13530 0 3
10516: PUSH
10517: LD_INT 0
10519: EQUAL
10520: PUSH
10521: LD_INT 7
10523: PPUSH
10524: LD_INT 3
10526: PPUSH
10527: LD_INT 1
10529: PPUSH
10530: CALL 13530 0 3
10534: PUSH
10535: LD_INT 0
10537: EQUAL
10538: AND
10539: IFFALSE 10551
10541: GO 10543
10543: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
10544: LD_STRING M1a
10546: PPUSH
10547: CALL_OW 337
// end ;
10551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ f_side , 3 ] ) = 0 and FilterAllUnits ( [ f_side , 1 ] ) = 0 and GetTechNation ( 7 , 1 , state_enabled ) = 0 and GetTechNation ( 7 , 3 , state_enabled ) = 0 do var i , tmp , tmp2 ;
10552: LD_INT 22
10554: PUSH
10555: LD_INT 2
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: LD_INT 21
10564: PUSH
10565: LD_INT 1
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PPUSH
10576: CALL_OW 69
10580: PUSH
10581: LD_INT 0
10583: EQUAL
10584: PUSH
10585: LD_INT 22
10587: PUSH
10588: LD_INT 3
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PPUSH
10595: CALL_OW 69
10599: PUSH
10600: LD_INT 0
10602: EQUAL
10603: AND
10604: PUSH
10605: LD_INT 22
10607: PUSH
10608: LD_INT 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PPUSH
10615: CALL_OW 69
10619: PUSH
10620: LD_INT 0
10622: EQUAL
10623: AND
10624: PUSH
10625: LD_INT 7
10627: PPUSH
10628: LD_INT 1
10630: PPUSH
10631: LD_INT 1
10633: PPUSH
10634: CALL 13530 0 3
10638: PUSH
10639: LD_INT 0
10641: EQUAL
10642: AND
10643: PUSH
10644: LD_INT 7
10646: PPUSH
10647: LD_INT 3
10649: PPUSH
10650: LD_INT 1
10652: PPUSH
10653: CALL 13530 0 3
10657: PUSH
10658: LD_INT 0
10660: EQUAL
10661: AND
10662: IFFALSE 12003
10664: GO 10666
10666: DISABLE
10667: LD_INT 0
10669: PPUSH
10670: PPUSH
10671: PPUSH
// begin wait ( 0 0$3 ) ;
10672: LD_INT 105
10674: PPUSH
10675: CALL_OW 67
// if not IsDead ( Masha ) then
10679: LD_EXP 48
10683: PPUSH
10684: CALL_OW 301
10688: NOT
10689: IFFALSE 10703
// AddMedal ( Masha , 1 ) else
10691: LD_STRING Masha
10693: PPUSH
10694: LD_INT 1
10696: PPUSH
10697: CALL_OW 101
10701: GO 10714
// AddMedal ( Masha , - 1 ) ;
10703: LD_STRING Masha
10705: PPUSH
10706: LD_INT 1
10708: NEG
10709: PPUSH
10710: CALL_OW 101
// if abdul_escaped then
10714: LD_EXP 12
10718: IFFALSE 10733
// AddMedal ( Abdul , - 1 ) else
10720: LD_STRING Abdul
10722: PPUSH
10723: LD_INT 1
10725: NEG
10726: PPUSH
10727: CALL_OW 101
10731: GO 10743
// AddMedal ( Abdul , 1 ) ;
10733: LD_STRING Abdul
10735: PPUSH
10736: LD_INT 1
10738: PPUSH
10739: CALL_OW 101
// if loss_counter = 0 then
10743: LD_EXP 13
10747: PUSH
10748: LD_INT 0
10750: EQUAL
10751: IFFALSE 10765
// AddMedal ( People , 2 ) else
10753: LD_STRING People
10755: PPUSH
10756: LD_INT 2
10758: PPUSH
10759: CALL_OW 101
10763: GO 10815
// if loss_counter <= [ 3 , 2 , 2 ] [ Difficulty ] then
10765: LD_EXP 13
10769: PUSH
10770: LD_INT 3
10772: PUSH
10773: LD_INT 2
10775: PUSH
10776: LD_INT 2
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: PUSH
10784: LD_OWVAR 67
10788: ARRAY
10789: LESSEQUAL
10790: IFFALSE 10804
// AddMedal ( People , 1 ) else
10792: LD_STRING People
10794: PPUSH
10795: LD_INT 1
10797: PPUSH
10798: CALL_OW 101
10802: GO 10815
// AddMedal ( People , - 1 ) ;
10804: LD_STRING People
10806: PPUSH
10807: LD_INT 1
10809: NEG
10810: PPUSH
10811: CALL_OW 101
// GiveMedals ( MAIN ) ;
10815: LD_STRING MAIN
10817: PPUSH
10818: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10822: LD_ADDR_VAR 0 2
10826: PUSH
10827: LD_INT 22
10829: PUSH
10830: LD_INT 7
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 2
10839: PUSH
10840: LD_INT 25
10842: PUSH
10843: LD_INT 1
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 25
10852: PUSH
10853: LD_INT 2
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: LD_INT 25
10862: PUSH
10863: LD_INT 3
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 25
10872: PUSH
10873: LD_INT 4
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: LD_INT 25
10882: PUSH
10883: LD_INT 5
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: LD_INT 25
10892: PUSH
10893: LD_INT 8
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: LD_INT 25
10902: PUSH
10903: LD_INT 9
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PPUSH
10924: CALL_OW 69
10928: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10929: LD_VAR 0 2
10933: PPUSH
10934: CALL_OW 43
// tmp2 := [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Burlak , Belkov , Gnyevko ] ;
10938: LD_ADDR_VAR 0 3
10942: PUSH
10943: LD_EXP 14
10947: PUSH
10948: LD_EXP 15
10952: PUSH
10953: LD_EXP 16
10957: PUSH
10958: LD_EXP 17
10962: PUSH
10963: LD_EXP 18
10967: PUSH
10968: LD_EXP 19
10972: PUSH
10973: LD_EXP 20
10977: PUSH
10978: LD_EXP 21
10982: PUSH
10983: LD_EXP 22
10987: PUSH
10988: LD_EXP 23
10992: PUSH
10993: LD_EXP 24
10997: PUSH
10998: LD_EXP 25
11002: PUSH
11003: LD_EXP 26
11007: PUSH
11008: LD_EXP 27
11012: PUSH
11013: LD_EXP 28
11017: PUSH
11018: LD_EXP 29
11022: PUSH
11023: LD_EXP 30
11027: PUSH
11028: LD_EXP 31
11032: PUSH
11033: LD_EXP 32
11037: PUSH
11038: LD_EXP 33
11042: PUSH
11043: LD_EXP 35
11047: PUSH
11048: LD_EXP 36
11052: PUSH
11053: LD_EXP 37
11057: PUSH
11058: LD_EXP 38
11062: PUSH
11063: LD_EXP 39
11067: PUSH
11068: LD_EXP 40
11072: PUSH
11073: LD_EXP 41
11077: PUSH
11078: LD_EXP 42
11082: PUSH
11083: LD_EXP 43
11087: PUSH
11088: LD_EXP 44
11092: PUSH
11093: LD_EXP 45
11097: PUSH
11098: LD_EXP 46
11102: PUSH
11103: LD_EXP 47
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: ST_TO_ADDR
// if tmp diff tmp2 then
11143: LD_VAR 0 2
11147: PUSH
11148: LD_VAR 0 3
11152: DIFF
11153: IFFALSE 11173
// SaveCharacters ( tmp diff tmp2 , 13a_others ) ;
11155: LD_VAR 0 2
11159: PUSH
11160: LD_VAR 0 3
11164: DIFF
11165: PPUSH
11166: LD_STRING 13a_others
11168: PPUSH
11169: CALL_OW 38
// SaveCharacters ( JMM , 13a_JMM ) ;
11173: LD_EXP 14
11177: PPUSH
11178: LD_STRING 13a_JMM
11180: PPUSH
11181: CALL_OW 38
// if Titov then
11185: LD_EXP 33
11189: IFFALSE 11203
// SaveCharacters ( Titov , 13a_Titov ) ;
11191: LD_EXP 33
11195: PPUSH
11196: LD_STRING 13a_Titov
11198: PPUSH
11199: CALL_OW 38
// if Dolgov then
11203: LD_EXP 35
11207: IFFALSE 11221
// SaveCharacters ( Dolgov , 13a_Dolgov ) ;
11209: LD_EXP 35
11213: PPUSH
11214: LD_STRING 13a_Dolgov
11216: PPUSH
11217: CALL_OW 38
// if Petrosyan then
11221: LD_EXP 36
11225: IFFALSE 11239
// SaveCharacters ( Petrosyan , 13a_Petrosyan ) ;
11227: LD_EXP 36
11231: PPUSH
11232: LD_STRING 13a_Petrosyan
11234: PPUSH
11235: CALL_OW 38
// if Scholtze then
11239: LD_EXP 37
11243: IFFALSE 11257
// SaveCharacters ( Scholtze , 13a_Scholtze ) ;
11245: LD_EXP 37
11249: PPUSH
11250: LD_STRING 13a_Scholtze
11252: PPUSH
11253: CALL_OW 38
// if Oblukov then
11257: LD_EXP 38
11261: IFFALSE 11275
// SaveCharacters ( Oblukov , 13a_Oblukov ) ;
11263: LD_EXP 38
11267: PPUSH
11268: LD_STRING 13a_Oblukov
11270: PPUSH
11271: CALL_OW 38
// if Kapitsova then
11275: LD_EXP 39
11279: IFFALSE 11293
// SaveCharacters ( Kapitsova , 13a_Kapitsova ) ;
11281: LD_EXP 39
11285: PPUSH
11286: LD_STRING 13a_Kapitsova
11288: PPUSH
11289: CALL_OW 38
// if Lipshchin then
11293: LD_EXP 40
11297: IFFALSE 11311
// SaveCharacters ( Lipshchin , 13a_Lipshchin ) ;
11299: LD_EXP 40
11303: PPUSH
11304: LD_STRING 13a_Lipshchin
11306: PPUSH
11307: CALL_OW 38
// if Petrovova then
11311: LD_EXP 41
11315: IFFALSE 11329
// SaveCharacters ( Petrovova , 13a_Petrovova ) ;
11317: LD_EXP 41
11321: PPUSH
11322: LD_STRING 13a_Petrovova
11324: PPUSH
11325: CALL_OW 38
// if Kovalyuk then
11329: LD_EXP 42
11333: IFFALSE 11347
// SaveCharacters ( Kovalyuk , 13a_Kovalyuk ) ;
11335: LD_EXP 42
11339: PPUSH
11340: LD_STRING 13a_Kovalyuk
11342: PPUSH
11343: CALL_OW 38
// if Kuzmov then
11347: LD_EXP 43
11351: IFFALSE 11365
// SaveCharacters ( Kuzmov , 13a_Kuzmov ) ;
11353: LD_EXP 43
11357: PPUSH
11358: LD_STRING 13a_Kuzmov
11360: PPUSH
11361: CALL_OW 38
// if Karamazov then
11365: LD_EXP 44
11369: IFFALSE 11383
// SaveCharacters ( Karamazov , 13a_Karamazov ) ;
11371: LD_EXP 44
11375: PPUSH
11376: LD_STRING 13a_Karamazov
11378: PPUSH
11379: CALL_OW 38
// if Burlak then
11383: LD_EXP 45
11387: IFFALSE 11401
// SaveCharacters ( Burlak , 13a_Burlak ) ;
11389: LD_EXP 45
11393: PPUSH
11394: LD_STRING 13a_Burlak
11396: PPUSH
11397: CALL_OW 38
// if Belkov then
11401: LD_EXP 46
11405: IFFALSE 11419
// SaveCharacters ( Belkov , 13a_Belkov ) ;
11407: LD_EXP 46
11411: PPUSH
11412: LD_STRING 13a_Belkov
11414: PPUSH
11415: CALL_OW 38
// if Gnyevko then
11419: LD_EXP 47
11423: IFFALSE 11437
// SaveCharacters ( Gnyevko , 13a_Gnyevko ) ;
11425: LD_EXP 47
11429: PPUSH
11430: LD_STRING 13a_Gnyevko
11432: PPUSH
11433: CALL_OW 38
// if Lisa then
11437: LD_EXP 16
11441: IFFALSE 11455
// SaveCharacters ( Lisa , 13a_Lisa ) ;
11443: LD_EXP 16
11447: PPUSH
11448: LD_STRING 13a_Lisa
11450: PPUSH
11451: CALL_OW 38
// if Donaldson then
11455: LD_EXP 17
11459: IFFALSE 11473
// SaveCharacters ( Donaldson , 13a_Donaldson ) ;
11461: LD_EXP 17
11465: PPUSH
11466: LD_STRING 13a_Donaldson
11468: PPUSH
11469: CALL_OW 38
// if Bobby then
11473: LD_EXP 18
11477: IFFALSE 11491
// SaveCharacters ( Bobby , 13a_Bobby ) ;
11479: LD_EXP 18
11483: PPUSH
11484: LD_STRING 13a_Bobby
11486: PPUSH
11487: CALL_OW 38
// if Cyrus then
11491: LD_EXP 19
11495: IFFALSE 11509
// SaveCharacters ( Cyrus , 13a_Cyrus ) ;
11497: LD_EXP 19
11501: PPUSH
11502: LD_STRING 13a_Cyrus
11504: PPUSH
11505: CALL_OW 38
// if Denis then
11509: LD_EXP 20
11513: IFFALSE 11527
// SaveCharacters ( Denis , 13a_Denis ) ;
11515: LD_EXP 20
11519: PPUSH
11520: LD_STRING 13a_Denis
11522: PPUSH
11523: CALL_OW 38
// if Brown then
11527: LD_EXP 21
11531: IFFALSE 11545
// SaveCharacters ( Brown , 13a_Brown ) ;
11533: LD_EXP 21
11537: PPUSH
11538: LD_STRING 13a_Brown
11540: PPUSH
11541: CALL_OW 38
// if Gladstone then
11545: LD_EXP 22
11549: IFFALSE 11563
// SaveCharacters ( Gladstone , 13a_Gladstone ) ;
11551: LD_EXP 22
11555: PPUSH
11556: LD_STRING 13a_Gladstone
11558: PPUSH
11559: CALL_OW 38
// if Houten then
11563: LD_EXP 23
11567: IFFALSE 11581
// SaveCharacters ( Houten , 13a_Houten ) ;
11569: LD_EXP 23
11573: PPUSH
11574: LD_STRING 13a_Houten
11576: PPUSH
11577: CALL_OW 38
// if Cornel then
11581: LD_EXP 24
11585: IFFALSE 11599
// SaveCharacters ( Cornel , 13a_Cornel ) ;
11587: LD_EXP 24
11591: PPUSH
11592: LD_STRING 13a_Cornel
11594: PPUSH
11595: CALL_OW 38
// if Gary then
11599: LD_EXP 25
11603: IFFALSE 11617
// SaveCharacters ( Gary , 13a_Gary ) ;
11605: LD_EXP 25
11609: PPUSH
11610: LD_STRING 13a_Gary
11612: PPUSH
11613: CALL_OW 38
// if Frank then
11617: LD_EXP 26
11621: IFFALSE 11635
// SaveCharacters ( Frank , 13a_Frank ) ;
11623: LD_EXP 26
11627: PPUSH
11628: LD_STRING 13a_Frank
11630: PPUSH
11631: CALL_OW 38
// if Kikuchi then
11635: LD_EXP 27
11639: IFFALSE 11653
// SaveCharacters ( Kikuchi , 13a_Kikuchi ) ;
11641: LD_EXP 27
11645: PPUSH
11646: LD_STRING 13a_Kikuchi
11648: PPUSH
11649: CALL_OW 38
// if Simms then
11653: LD_EXP 28
11657: IFFALSE 11671
// SaveCharacters ( Simms , 13a_Simms ) ;
11659: LD_EXP 28
11663: PPUSH
11664: LD_STRING 13a_Simms
11666: PPUSH
11667: CALL_OW 38
// if Joan then
11671: LD_EXP 29
11675: IFFALSE 11689
// SaveCharacters ( Joan , 13a_Joan ) ;
11677: LD_EXP 29
11681: PPUSH
11682: LD_STRING 13a_Joan
11684: PPUSH
11685: CALL_OW 38
// if DeltaDoctor then
11689: LD_EXP 30
11693: IFFALSE 11707
// SaveCharacters ( DeltaDoctor , 13a_DeltaDoctor ) ;
11695: LD_EXP 30
11699: PPUSH
11700: LD_STRING 13a_DeltaDoctor
11702: PPUSH
11703: CALL_OW 38
// if Gossudarov then
11707: LD_EXP 31
11711: IFFALSE 11725
// SaveCharacters ( Gossudarov , 13a_Gossudarov ) ;
11713: LD_EXP 31
11717: PPUSH
11718: LD_STRING 13a_Gossudarov
11720: PPUSH
11721: CALL_OW 38
// if Kirilenkova then
11725: LD_EXP 32
11729: IFFALSE 11743
// SaveCharacters ( Kirilenkova , 13a_Kirilenkova ) ;
11731: LD_EXP 32
11735: PPUSH
11736: LD_STRING 13a_Kirilenkova
11738: PPUSH
11739: CALL_OW 38
// if Masha then
11743: LD_EXP 48
11747: IFFALSE 11802
// SaveVariable ( [ GetChassis ( Masha ) , GetEngine ( Masha ) , GetControl ( Masha ) , GetWeapon ( Masha ) ] , 13a_Masha ) ;
11749: LD_EXP 48
11753: PPUSH
11754: CALL_OW 265
11758: PUSH
11759: LD_EXP 48
11763: PPUSH
11764: CALL_OW 262
11768: PUSH
11769: LD_EXP 48
11773: PPUSH
11774: CALL_OW 263
11778: PUSH
11779: LD_EXP 48
11783: PPUSH
11784: CALL_OW 264
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: PPUSH
11795: LD_STRING 13a_Masha
11797: PPUSH
11798: CALL_OW 39
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
11802: LD_ADDR_VAR 0 2
11806: PUSH
11807: LD_INT 21
11809: PUSH
11810: LD_INT 3
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PPUSH
11817: CALL_OW 69
11821: ST_TO_ADDR
// tmp2 := [ ] ;
11822: LD_ADDR_VAR 0 3
11826: PUSH
11827: EMPTY
11828: ST_TO_ADDR
// if tmp then
11829: LD_VAR 0 2
11833: IFFALSE 11981
// for i in tmp do
11835: LD_ADDR_VAR 0 1
11839: PUSH
11840: LD_VAR 0 2
11844: PUSH
11845: FOR_IN
11846: IFFALSE 11979
// if IsOk ( i ) then
11848: LD_VAR 0 1
11852: PPUSH
11853: CALL_OW 302
11857: IFFALSE 11977
// tmp2 := tmp2 ^ [ GetSide ( i ) , GetNation ( i ) , GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ;
11859: LD_ADDR_VAR 0 3
11863: PUSH
11864: LD_VAR 0 3
11868: PUSH
11869: LD_VAR 0 1
11873: PPUSH
11874: CALL_OW 255
11878: PUSH
11879: LD_VAR 0 1
11883: PPUSH
11884: CALL_OW 248
11888: PUSH
11889: LD_VAR 0 1
11893: PPUSH
11894: CALL_OW 266
11898: PUSH
11899: LD_VAR 0 1
11903: PPUSH
11904: CALL_OW 250
11908: PUSH
11909: LD_VAR 0 1
11913: PPUSH
11914: CALL_OW 251
11918: PUSH
11919: LD_VAR 0 1
11923: PPUSH
11924: CALL_OW 254
11928: PUSH
11929: LD_VAR 0 1
11933: PPUSH
11934: CALL_OW 267
11938: PUSH
11939: LD_VAR 0 1
11943: PPUSH
11944: LD_INT 1
11946: PPUSH
11947: CALL_OW 268
11951: PUSH
11952: LD_VAR 0 1
11956: PPUSH
11957: LD_INT 2
11959: PPUSH
11960: CALL_OW 268
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: ADD
11976: ST_TO_ADDR
11977: GO 11845
11979: POP
11980: POP
// if tmp2 then
11981: LD_VAR 0 3
11985: IFFALSE 11999
// SaveVariable ( tmp2 , 13a_buildings ) ;
11987: LD_VAR 0 3
11991: PPUSH
11992: LD_STRING 13a_buildings
11994: PPUSH
11995: CALL_OW 39
// YouWin ;
11999: CALL_OW 103
// end ;
12003: PPOPN 3
12005: END
// export function SciRu ; var tmp , t ; begin
12006: LD_INT 0
12008: PPUSH
12009: PPUSH
12010: PPUSH
// t := [ Gossudarov , Burlak , Titov , Belkov , Gnyevko ] ;
12011: LD_ADDR_VAR 0 3
12015: PUSH
12016: LD_EXP 31
12020: PUSH
12021: LD_EXP 45
12025: PUSH
12026: LD_EXP 33
12030: PUSH
12031: LD_EXP 46
12035: PUSH
12036: LD_EXP 47
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff t ;
12048: LD_ADDR_VAR 0 2
12052: PUSH
12053: LD_INT 22
12055: PUSH
12056: LD_INT 7
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 23
12065: PUSH
12066: LD_INT 3
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: LD_INT 25
12075: PUSH
12076: LD_INT 4
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PUSH
12083: LD_INT 26
12085: PUSH
12086: LD_INT 1
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: PPUSH
12099: CALL_OW 69
12103: PUSH
12104: LD_VAR 0 3
12108: DIFF
12109: ST_TO_ADDR
// if tmp then
12110: LD_VAR 0 2
12114: IFFALSE 12130
// result := tmp [ 1 ] ;
12116: LD_ADDR_VAR 0 1
12120: PUSH
12121: LD_VAR 0 2
12125: PUSH
12126: LD_INT 1
12128: ARRAY
12129: ST_TO_ADDR
// end ;
12130: LD_VAR 0 1
12134: RET
// export function SolRu ; var tmp , t ; begin
12135: LD_INT 0
12137: PPUSH
12138: PPUSH
12139: PPUSH
// t := [ Belkov , Burlak , Gossudarov ] ;
12140: LD_ADDR_VAR 0 3
12144: PUSH
12145: LD_EXP 46
12149: PUSH
12150: LD_EXP 45
12154: PUSH
12155: LD_EXP 31
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 1 ] , [ f_sex , sex_male ] ] ) diff t ;
12165: LD_ADDR_VAR 0 2
12169: PUSH
12170: LD_INT 22
12172: PUSH
12173: LD_INT 7
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: LD_INT 23
12182: PUSH
12183: LD_INT 3
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: LD_INT 25
12192: PUSH
12193: LD_INT 1
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 26
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: PPUSH
12216: CALL_OW 69
12220: PUSH
12221: LD_VAR 0 3
12225: DIFF
12226: ST_TO_ADDR
// if tmp then
12227: LD_VAR 0 2
12231: IFFALSE 12247
// result := tmp [ 1 ] ;
12233: LD_ADDR_VAR 0 1
12237: PUSH
12238: LD_VAR 0 2
12242: PUSH
12243: LD_INT 1
12245: ARRAY
12246: ST_TO_ADDR
// end ; end_of_file
12247: LD_VAR 0 1
12251: RET
// on UnitDestroyed ( un ) do var i , side ;
12252: LD_INT 0
12254: PPUSH
12255: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) then
12256: LD_VAR 0 1
12260: PUSH
12261: LD_INT 22
12263: PUSH
12264: LD_INT 7
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: LD_INT 2
12273: PUSH
12274: LD_INT 25
12276: PUSH
12277: LD_INT 1
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: LD_INT 25
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 25
12296: PUSH
12297: LD_INT 3
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 25
12306: PUSH
12307: LD_INT 4
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 25
12316: PUSH
12317: LD_INT 5
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 25
12326: PUSH
12327: LD_INT 8
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 25
12336: PUSH
12337: LD_INT 9
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: IN
12363: IFFALSE 12379
// loss_counter := loss_counter + 1 ;
12365: LD_ADDR_EXP 13
12369: PUSH
12370: LD_EXP 13
12374: PUSH
12375: LD_INT 1
12377: PLUS
12378: ST_TO_ADDR
// if un = Abdul then
12379: LD_VAR 0 1
12383: PUSH
12384: LD_EXP 54
12388: EQUAL
12389: IFFALSE 12399
// abdul_escaped := false ;
12391: LD_ADDR_EXP 12
12395: PUSH
12396: LD_INT 0
12398: ST_TO_ADDR
// if un in ru_attackers then
12399: LD_VAR 0 1
12403: PUSH
12404: LD_EXP 51
12408: IN
12409: IFFALSE 12427
// ru_attackers := ru_attackers diff un ;
12411: LD_ADDR_EXP 51
12415: PUSH
12416: LD_EXP 51
12420: PUSH
12421: LD_VAR 0 1
12425: DIFF
12426: ST_TO_ADDR
// if un in ar_attackers then
12427: LD_VAR 0 1
12431: PUSH
12432: LD_EXP 10
12436: IN
12437: IFFALSE 12455
// ar_attackers := ar_attackers diff un ;
12439: LD_ADDR_EXP 10
12443: PUSH
12444: LD_EXP 10
12448: PUSH
12449: LD_VAR 0 1
12453: DIFF
12454: ST_TO_ADDR
// if un = JMM then
12455: LD_VAR 0 1
12459: PUSH
12460: LD_EXP 14
12464: EQUAL
12465: IFFALSE 12476
// begin YouLost ( JMM ) ;
12467: LD_STRING JMM
12469: PPUSH
12470: CALL_OW 104
// exit ;
12474: GO 12565
// end ; if un = Burlak then
12476: LD_VAR 0 1
12480: PUSH
12481: LD_EXP 45
12485: EQUAL
12486: IFFALSE 12497
// begin YouLost ( Burlak ) ;
12488: LD_STRING Burlak
12490: PPUSH
12491: CALL_OW 104
// exit ;
12495: GO 12565
// end ; if un = freedom then
12497: LD_VAR 0 1
12501: PUSH
12502: LD_EXP 3
12506: EQUAL
12507: IFFALSE 12518
// begin YouLost ( Destroyed ) ;
12509: LD_STRING Destroyed
12511: PPUSH
12512: CALL_OW 104
// exit ;
12516: GO 12565
// end ; if un = Masha then
12518: LD_VAR 0 1
12522: PUSH
12523: LD_EXP 48
12527: EQUAL
12528: IFFALSE 12537
// ChangeMissionObjectives ( M4b ) ;
12530: LD_STRING M4b
12532: PPUSH
12533: CALL_OW 337
// if un = Mastodont then
12537: LD_VAR 0 1
12541: PUSH
12542: LD_EXP 55
12546: EQUAL
12547: IFFALSE 12556
// ChangeMissionObjectives ( M4a ) ;
12549: LD_STRING M4a
12551: PPUSH
12552: CALL_OW 337
// MCE_UnitDestroyed ( un ) ;
12556: LD_VAR 0 1
12560: PPUSH
12561: CALL 71016 0 1
// end ;
12565: PPOPN 3
12567: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
12568: LD_VAR 0 1
12572: PPUSH
12573: LD_VAR 0 2
12577: PPUSH
12578: CALL 72883 0 2
// end ;
12582: PPOPN 2
12584: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
12585: LD_VAR 0 1
12589: PPUSH
12590: CALL 71965 0 1
// end ;
12594: PPOPN 1
12596: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_depot ] ] ) then
12597: LD_VAR 0 1
12601: PUSH
12602: LD_INT 22
12604: PUSH
12605: LD_INT 7
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: LD_INT 30
12614: PUSH
12615: LD_INT 0
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PPUSH
12626: CALL_OW 69
12630: IN
12631: IFFALSE 12670
// begin SetBName ( building , freedom ) ;
12633: LD_VAR 0 1
12637: PPUSH
12638: LD_STRING freedom
12640: PPUSH
12641: CALL_OW 500
// SetRestrict ( b_depot , 7 , false ) ;
12645: LD_INT 0
12647: PPUSH
12648: LD_INT 7
12650: PPUSH
12651: LD_INT 0
12653: PPUSH
12654: CALL_OW 324
// freedom := building ;
12658: LD_ADDR_EXP 3
12662: PUSH
12663: LD_VAR 0 1
12667: ST_TO_ADDR
// exit ;
12668: GO 12736
// end ; if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_btype , b_lab ] ] ) then
12670: LD_VAR 0 1
12674: PUSH
12675: LD_INT 22
12677: PUSH
12678: LD_INT 7
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 23
12687: PUSH
12688: LD_INT 3
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: LD_INT 30
12697: PUSH
12698: LD_INT 6
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: LIST
12709: PPUSH
12710: CALL_OW 69
12714: IN
12715: IFFALSE 12727
// begin ru_lab_builded := true ;
12717: LD_ADDR_EXP 5
12721: PUSH
12722: LD_INT 1
12724: ST_TO_ADDR
// exit ;
12725: GO 12736
// end ; MCE_BuildingComplete ( building ) ;
12727: LD_VAR 0 1
12731: PPUSH
12732: CALL 72199 0 1
// end ;
12736: PPOPN 1
12738: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
12739: LD_VAR 0 1
12743: PPUSH
12744: LD_VAR 0 2
12748: PPUSH
12749: CALL 70728 0 2
// end ;
12753: PPOPN 2
12755: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
12756: LD_VAR 0 1
12760: PPUSH
12761: LD_VAR 0 2
12765: PPUSH
12766: LD_VAR 0 3
12770: PPUSH
12771: LD_VAR 0 4
12775: PPUSH
12776: LD_VAR 0 5
12780: PPUSH
12781: CALL 70355 0 5
// end ;
12785: PPOPN 5
12787: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
12788: LD_VAR 0 1
12792: PPUSH
12793: LD_VAR 0 2
12797: PPUSH
12798: CALL 70043 0 2
// end ;
12802: PPOPN 2
12804: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
12805: LD_VAR 0 1
12809: PPUSH
12810: LD_VAR 0 2
12814: PPUSH
12815: LD_VAR 0 3
12819: PPUSH
12820: LD_VAR 0 4
12824: PPUSH
12825: CALL 69888 0 4
// end ;
12829: PPOPN 4
12831: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
12832: LD_VAR 0 1
12836: PPUSH
12837: LD_VAR 0 2
12841: PPUSH
12842: LD_VAR 0 3
12846: PPUSH
12847: CALL 69670 0 3
// end ;
12851: PPOPN 3
12853: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
12854: LD_VAR 0 1
12858: PPUSH
12859: LD_VAR 0 2
12863: PPUSH
12864: CALL 69562 0 2
// end ;
12868: PPOPN 2
12870: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
12871: LD_VAR 0 1
12875: PPUSH
12876: LD_VAR 0 2
12880: PPUSH
12881: CALL 73137 0 2
// end ;
12885: PPOPN 2
12887: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
12888: LD_VAR 0 1
12892: PPUSH
12893: LD_VAR 0 2
12897: PPUSH
12898: LD_VAR 0 3
12902: PPUSH
12903: LD_VAR 0 4
12907: PPUSH
12908: CALL 73346 0 4
// end ;
12912: PPOPN 4
12914: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
12915: LD_VAR 0 1
12919: PPUSH
12920: LD_VAR 0 2
12924: PPUSH
12925: CALL 69378 0 2
// end ; end_of_file
12929: PPOPN 2
12931: END
// every 0 0$30 do var cr , time ;
12932: GO 12934
12934: DISABLE
12935: LD_INT 0
12937: PPUSH
12938: PPUSH
// begin time := 0 0$10 ;
12939: LD_ADDR_VAR 0 2
12943: PUSH
12944: LD_INT 350
12946: ST_TO_ADDR
// while game do
12947: LD_EXP 2
12951: IFFALSE 13050
// begin wait ( time ) ;
12953: LD_VAR 0 2
12957: PPUSH
12958: CALL_OW 67
// if tick > 2 2$00 then
12962: LD_OWVAR 1
12966: PUSH
12967: LD_INT 4200
12969: GREATER
12970: IFFALSE 13003
// time := time + [ 0 0$06 , 0 0$07 , 0 0$08 ] [ Difficulty ] ;
12972: LD_ADDR_VAR 0 2
12976: PUSH
12977: LD_VAR 0 2
12981: PUSH
12982: LD_INT 210
12984: PUSH
12985: LD_INT 245
12987: PUSH
12988: LD_INT 280
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: LIST
12995: PUSH
12996: LD_OWVAR 67
13000: ARRAY
13001: PLUS
13002: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 70 , 49 , 25 , true ) ;
13003: LD_INT 1
13005: PPUSH
13006: LD_INT 5
13008: PPUSH
13009: CALL_OW 12
13013: PPUSH
13014: LD_INT 70
13016: PPUSH
13017: LD_INT 49
13019: PPUSH
13020: LD_INT 25
13022: PPUSH
13023: LD_INT 1
13025: PPUSH
13026: CALL_OW 56
// if time > 5 5$00 then
13030: LD_VAR 0 2
13034: PUSH
13035: LD_INT 10500
13037: GREATER
13038: IFFALSE 13048
// time := 0 0$30 ;
13040: LD_ADDR_VAR 0 2
13044: PUSH
13045: LD_INT 1050
13047: ST_TO_ADDR
// end ;
13048: GO 12947
// end ;
13050: PPOPN 2
13052: END
// every 0 0$30 do var cr , time ;
13053: GO 13055
13055: DISABLE
13056: LD_INT 0
13058: PPUSH
13059: PPUSH
// begin time := 0 0$01 ;
13060: LD_ADDR_VAR 0 2
13064: PUSH
13065: LD_INT 35
13067: ST_TO_ADDR
// while game do
13068: LD_EXP 2
13072: IFFALSE 13161
// begin wait ( time ) ;
13074: LD_VAR 0 2
13078: PPUSH
13079: CALL_OW 67
// time := time + [ 0 0$04 , 0 0$05 , 0 0$06 ] [ Difficulty ] ;
13083: LD_ADDR_VAR 0 2
13087: PUSH
13088: LD_VAR 0 2
13092: PUSH
13093: LD_INT 140
13095: PUSH
13096: LD_INT 175
13098: PUSH
13099: LD_INT 210
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: LIST
13106: PUSH
13107: LD_OWVAR 67
13111: ARRAY
13112: PLUS
13113: ST_TO_ADDR
// CreateCratesXYR ( rand ( 3 , 5 ) , 26 , 9 , 30 , true ) ;
13114: LD_INT 3
13116: PPUSH
13117: LD_INT 5
13119: PPUSH
13120: CALL_OW 12
13124: PPUSH
13125: LD_INT 26
13127: PPUSH
13128: LD_INT 9
13130: PPUSH
13131: LD_INT 30
13133: PPUSH
13134: LD_INT 1
13136: PPUSH
13137: CALL_OW 56
// if time > 3 3$00 then
13141: LD_VAR 0 2
13145: PUSH
13146: LD_INT 6300
13148: GREATER
13149: IFFALSE 13159
// time := 0 0$20 ;
13151: LD_ADDR_VAR 0 2
13155: PUSH
13156: LD_INT 700
13158: ST_TO_ADDR
// end ;
13159: GO 13068
// end ;
13161: PPOPN 2
13163: END
// every 0 0$30 do var cr , time ;
13164: GO 13166
13166: DISABLE
13167: LD_INT 0
13169: PPUSH
13170: PPUSH
// begin time := 0 0$20 ;
13171: LD_ADDR_VAR 0 2
13175: PUSH
13176: LD_INT 700
13178: ST_TO_ADDR
// while game do
13179: LD_EXP 2
13183: IFFALSE 13308
// begin wait ( time ) ;
13185: LD_VAR 0 2
13189: PPUSH
13190: CALL_OW 67
// time := time + [ 0 0$05 , 0 0$06 , 0 0$08 ] [ Difficulty ] ;
13194: LD_ADDR_VAR 0 2
13198: PUSH
13199: LD_VAR 0 2
13203: PUSH
13204: LD_INT 175
13206: PUSH
13207: LD_INT 210
13209: PUSH
13210: LD_INT 280
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: LIST
13217: PUSH
13218: LD_OWVAR 67
13222: ARRAY
13223: PLUS
13224: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 179 , 101 , 20 , true ) ;
13225: LD_INT 1
13227: PPUSH
13228: LD_INT 5
13230: PPUSH
13231: CALL_OW 12
13235: PPUSH
13236: LD_INT 179
13238: PPUSH
13239: LD_INT 101
13241: PPUSH
13242: LD_INT 20
13244: PPUSH
13245: LD_INT 1
13247: PPUSH
13248: CALL_OW 56
// wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
13252: LD_INT 350
13254: PPUSH
13255: LD_INT 525
13257: PPUSH
13258: CALL_OW 12
13262: PPUSH
13263: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area_collect_arabian , true ) ;
13267: LD_INT 1
13269: PPUSH
13270: LD_INT 5
13272: PPUSH
13273: CALL_OW 12
13277: PPUSH
13278: LD_INT 9
13280: PPUSH
13281: LD_INT 1
13283: PPUSH
13284: CALL_OW 55
// if time > 4 4$00 then
13288: LD_VAR 0 2
13292: PUSH
13293: LD_INT 8400
13295: GREATER
13296: IFFALSE 13306
// time := 0 0$30 ;
13298: LD_ADDR_VAR 0 2
13302: PUSH
13303: LD_INT 1050
13305: ST_TO_ADDR
// end ;
13306: GO 13179
// end ;
13308: PPOPN 2
13310: END
// every 0 0$30 do var cr , time ;
13311: GO 13313
13313: DISABLE
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
// begin time := 0 0$10 ;
13318: LD_ADDR_VAR 0 2
13322: PUSH
13323: LD_INT 350
13325: ST_TO_ADDR
// while game do
13326: LD_EXP 2
13330: IFFALSE 13464
// begin wait ( time ) ;
13332: LD_VAR 0 2
13336: PPUSH
13337: CALL_OW 67
// time := time + 0 0$10 ;
13341: LD_ADDR_VAR 0 2
13345: PUSH
13346: LD_VAR 0 2
13350: PUSH
13351: LD_INT 350
13353: PLUS
13354: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , area_crates_russian , true ) ;
13355: LD_INT 1
13357: PPUSH
13358: LD_INT 5
13360: PPUSH
13361: CALL_OW 12
13365: PPUSH
13366: LD_INT 11
13368: PPUSH
13369: LD_INT 1
13371: PPUSH
13372: CALL_OW 55
// cr := rand ( 1 , 3 ) ;
13376: LD_ADDR_VAR 0 1
13380: PUSH
13381: LD_INT 1
13383: PPUSH
13384: LD_INT 3
13386: PPUSH
13387: CALL_OW 12
13391: ST_TO_ADDR
// if cr = 1 then
13392: LD_VAR 0 1
13396: PUSH
13397: LD_INT 1
13399: EQUAL
13400: IFFALSE 13444
// begin wait ( rand ( 0 0$20 , 0 0$45 ) ) ;
13402: LD_INT 700
13404: PPUSH
13405: LD_INT 1575
13407: PPUSH
13408: CALL_OW 12
13412: PPUSH
13413: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 34 , 50 , 7 , true ) ;
13417: LD_INT 1
13419: PPUSH
13420: LD_INT 5
13422: PPUSH
13423: CALL_OW 12
13427: PPUSH
13428: LD_INT 34
13430: PPUSH
13431: LD_INT 50
13433: PPUSH
13434: LD_INT 7
13436: PPUSH
13437: LD_INT 1
13439: PPUSH
13440: CALL_OW 56
// end ; if time > 8 8$00 then
13444: LD_VAR 0 2
13448: PUSH
13449: LD_INT 16800
13451: GREATER
13452: IFFALSE 13462
// time := 0 0$40 ;
13454: LD_ADDR_VAR 0 2
13458: PUSH
13459: LD_INT 1400
13461: ST_TO_ADDR
// end ;
13462: GO 13326
// end ; end_of_file
13464: PPOPN 2
13466: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13467: LD_INT 0
13469: PPUSH
13470: PPUSH
// if exist_mode then
13471: LD_VAR 0 2
13475: IFFALSE 13500
// unit := CreateCharacter ( prefix & ident ) else
13477: LD_ADDR_VAR 0 5
13481: PUSH
13482: LD_VAR 0 3
13486: PUSH
13487: LD_VAR 0 1
13491: STR
13492: PPUSH
13493: CALL_OW 34
13497: ST_TO_ADDR
13498: GO 13515
// unit := NewCharacter ( ident ) ;
13500: LD_ADDR_VAR 0 5
13504: PUSH
13505: LD_VAR 0 1
13509: PPUSH
13510: CALL_OW 25
13514: ST_TO_ADDR
// result := unit ;
13515: LD_ADDR_VAR 0 4
13519: PUSH
13520: LD_VAR 0 5
13524: ST_TO_ADDR
// end ;
13525: LD_VAR 0 4
13529: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13530: LD_INT 0
13532: PPUSH
13533: PPUSH
// if not side or not nation then
13534: LD_VAR 0 1
13538: NOT
13539: PUSH
13540: LD_VAR 0 2
13544: NOT
13545: OR
13546: IFFALSE 13550
// exit ;
13548: GO 14170
// case nation of nation_american :
13550: LD_VAR 0 2
13554: PUSH
13555: LD_INT 1
13557: DOUBLE
13558: EQUAL
13559: IFTRUE 13563
13561: GO 13729
13563: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
13564: LD_ADDR_VAR 0 4
13568: PUSH
13569: LD_INT 35
13571: PUSH
13572: LD_INT 45
13574: PUSH
13575: LD_INT 46
13577: PUSH
13578: LD_INT 47
13580: PUSH
13581: LD_INT 1
13583: PUSH
13584: LD_INT 2
13586: PUSH
13587: LD_INT 6
13589: PUSH
13590: LD_INT 15
13592: PUSH
13593: LD_INT 16
13595: PUSH
13596: LD_INT 7
13598: PUSH
13599: LD_INT 12
13601: PUSH
13602: LD_INT 13
13604: PUSH
13605: LD_INT 10
13607: PUSH
13608: LD_INT 14
13610: PUSH
13611: LD_INT 20
13613: PUSH
13614: LD_INT 25
13616: PUSH
13617: LD_INT 32
13619: PUSH
13620: LD_INT 27
13622: PUSH
13623: LD_INT 36
13625: PUSH
13626: LD_INT 69
13628: PUSH
13629: LD_INT 39
13631: PUSH
13632: LD_INT 34
13634: PUSH
13635: LD_INT 40
13637: PUSH
13638: LD_INT 48
13640: PUSH
13641: LD_INT 49
13643: PUSH
13644: LD_INT 50
13646: PUSH
13647: LD_INT 51
13649: PUSH
13650: LD_INT 52
13652: PUSH
13653: LD_INT 53
13655: PUSH
13656: LD_INT 54
13658: PUSH
13659: LD_INT 55
13661: PUSH
13662: LD_INT 56
13664: PUSH
13665: LD_INT 57
13667: PUSH
13668: LD_INT 58
13670: PUSH
13671: LD_INT 59
13673: PUSH
13674: LD_INT 60
13676: PUSH
13677: LD_INT 61
13679: PUSH
13680: LD_INT 62
13682: PUSH
13683: LD_INT 80
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: ST_TO_ADDR
13727: GO 14094
13729: LD_INT 2
13731: DOUBLE
13732: EQUAL
13733: IFTRUE 13737
13735: GO 13907
13737: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
13738: LD_ADDR_VAR 0 4
13742: PUSH
13743: LD_INT 35
13745: PUSH
13746: LD_INT 45
13748: PUSH
13749: LD_INT 46
13751: PUSH
13752: LD_INT 47
13754: PUSH
13755: LD_INT 70
13757: PUSH
13758: LD_INT 1
13760: PUSH
13761: LD_INT 11
13763: PUSH
13764: LD_INT 3
13766: PUSH
13767: LD_INT 4
13769: PUSH
13770: LD_INT 5
13772: PUSH
13773: LD_INT 6
13775: PUSH
13776: LD_INT 15
13778: PUSH
13779: LD_INT 18
13781: PUSH
13782: LD_INT 7
13784: PUSH
13785: LD_INT 17
13787: PUSH
13788: LD_INT 8
13790: PUSH
13791: LD_INT 20
13793: PUSH
13794: LD_INT 72
13796: PUSH
13797: LD_INT 26
13799: PUSH
13800: LD_INT 69
13802: PUSH
13803: LD_INT 39
13805: PUSH
13806: LD_INT 40
13808: PUSH
13809: LD_INT 41
13811: PUSH
13812: LD_INT 42
13814: PUSH
13815: LD_INT 43
13817: PUSH
13818: LD_INT 48
13820: PUSH
13821: LD_INT 49
13823: PUSH
13824: LD_INT 50
13826: PUSH
13827: LD_INT 51
13829: PUSH
13830: LD_INT 52
13832: PUSH
13833: LD_INT 53
13835: PUSH
13836: LD_INT 54
13838: PUSH
13839: LD_INT 55
13841: PUSH
13842: LD_INT 56
13844: PUSH
13845: LD_INT 60
13847: PUSH
13848: LD_INT 61
13850: PUSH
13851: LD_INT 62
13853: PUSH
13854: LD_INT 66
13856: PUSH
13857: LD_INT 67
13859: PUSH
13860: LD_INT 68
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: ST_TO_ADDR
13905: GO 14094
13907: LD_INT 3
13909: DOUBLE
13910: EQUAL
13911: IFTRUE 13915
13913: GO 14093
13915: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
13916: LD_ADDR_VAR 0 4
13920: PUSH
13921: LD_INT 46
13923: PUSH
13924: LD_INT 47
13926: PUSH
13927: LD_INT 1
13929: PUSH
13930: LD_INT 2
13932: PUSH
13933: LD_INT 11
13935: PUSH
13936: LD_INT 9
13938: PUSH
13939: LD_INT 20
13941: PUSH
13942: LD_INT 19
13944: PUSH
13945: LD_INT 21
13947: PUSH
13948: LD_INT 24
13950: PUSH
13951: LD_INT 22
13953: PUSH
13954: LD_INT 25
13956: PUSH
13957: LD_INT 28
13959: PUSH
13960: LD_INT 29
13962: PUSH
13963: LD_INT 31
13965: PUSH
13966: LD_INT 37
13968: PUSH
13969: LD_INT 38
13971: PUSH
13972: LD_INT 32
13974: PUSH
13975: LD_INT 27
13977: PUSH
13978: LD_INT 33
13980: PUSH
13981: LD_INT 69
13983: PUSH
13984: LD_INT 39
13986: PUSH
13987: LD_INT 34
13989: PUSH
13990: LD_INT 40
13992: PUSH
13993: LD_INT 71
13995: PUSH
13996: LD_INT 23
13998: PUSH
13999: LD_INT 44
14001: PUSH
14002: LD_INT 48
14004: PUSH
14005: LD_INT 49
14007: PUSH
14008: LD_INT 50
14010: PUSH
14011: LD_INT 51
14013: PUSH
14014: LD_INT 52
14016: PUSH
14017: LD_INT 53
14019: PUSH
14020: LD_INT 54
14022: PUSH
14023: LD_INT 55
14025: PUSH
14026: LD_INT 56
14028: PUSH
14029: LD_INT 57
14031: PUSH
14032: LD_INT 58
14034: PUSH
14035: LD_INT 59
14037: PUSH
14038: LD_INT 63
14040: PUSH
14041: LD_INT 64
14043: PUSH
14044: LD_INT 65
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: ST_TO_ADDR
14091: GO 14094
14093: POP
// if state > - 1 and state < 3 then
14094: LD_VAR 0 3
14098: PUSH
14099: LD_INT 1
14101: NEG
14102: GREATER
14103: PUSH
14104: LD_VAR 0 3
14108: PUSH
14109: LD_INT 3
14111: LESS
14112: AND
14113: IFFALSE 14170
// for i in result do
14115: LD_ADDR_VAR 0 5
14119: PUSH
14120: LD_VAR 0 4
14124: PUSH
14125: FOR_IN
14126: IFFALSE 14168
// if GetTech ( i , side ) <> state then
14128: LD_VAR 0 5
14132: PPUSH
14133: LD_VAR 0 1
14137: PPUSH
14138: CALL_OW 321
14142: PUSH
14143: LD_VAR 0 3
14147: NONEQUAL
14148: IFFALSE 14166
// result := result diff i ;
14150: LD_ADDR_VAR 0 4
14154: PUSH
14155: LD_VAR 0 4
14159: PUSH
14160: LD_VAR 0 5
14164: DIFF
14165: ST_TO_ADDR
14166: GO 14125
14168: POP
14169: POP
// end ;
14170: LD_VAR 0 4
14174: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14175: LD_INT 0
14177: PPUSH
14178: PPUSH
14179: PPUSH
// result := true ;
14180: LD_ADDR_VAR 0 3
14184: PUSH
14185: LD_INT 1
14187: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14188: LD_ADDR_VAR 0 5
14192: PUSH
14193: LD_VAR 0 2
14197: PPUSH
14198: CALL_OW 480
14202: ST_TO_ADDR
// if not tmp then
14203: LD_VAR 0 5
14207: NOT
14208: IFFALSE 14212
// exit ;
14210: GO 14261
// for i in tmp do
14212: LD_ADDR_VAR 0 4
14216: PUSH
14217: LD_VAR 0 5
14221: PUSH
14222: FOR_IN
14223: IFFALSE 14259
// if GetTech ( i , side ) <> state_researched then
14225: LD_VAR 0 4
14229: PPUSH
14230: LD_VAR 0 1
14234: PPUSH
14235: CALL_OW 321
14239: PUSH
14240: LD_INT 2
14242: NONEQUAL
14243: IFFALSE 14257
// begin result := false ;
14245: LD_ADDR_VAR 0 3
14249: PUSH
14250: LD_INT 0
14252: ST_TO_ADDR
// exit ;
14253: POP
14254: POP
14255: GO 14261
// end ;
14257: GO 14222
14259: POP
14260: POP
// end ;
14261: LD_VAR 0 3
14265: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14266: LD_INT 0
14268: PPUSH
14269: PPUSH
14270: PPUSH
14271: PPUSH
14272: PPUSH
14273: PPUSH
14274: PPUSH
14275: PPUSH
14276: PPUSH
14277: PPUSH
14278: PPUSH
14279: PPUSH
14280: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14281: LD_VAR 0 1
14285: NOT
14286: PUSH
14287: LD_VAR 0 1
14291: PPUSH
14292: CALL_OW 257
14296: PUSH
14297: LD_INT 9
14299: NONEQUAL
14300: OR
14301: IFFALSE 14305
// exit ;
14303: GO 14878
// side := GetSide ( unit ) ;
14305: LD_ADDR_VAR 0 9
14309: PUSH
14310: LD_VAR 0 1
14314: PPUSH
14315: CALL_OW 255
14319: ST_TO_ADDR
// tech_space := tech_spacanom ;
14320: LD_ADDR_VAR 0 12
14324: PUSH
14325: LD_INT 29
14327: ST_TO_ADDR
// tech_time := tech_taurad ;
14328: LD_ADDR_VAR 0 13
14332: PUSH
14333: LD_INT 28
14335: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14336: LD_ADDR_VAR 0 11
14340: PUSH
14341: LD_VAR 0 1
14345: PPUSH
14346: CALL_OW 310
14350: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14351: LD_VAR 0 11
14355: PPUSH
14356: CALL_OW 247
14360: PUSH
14361: LD_INT 2
14363: EQUAL
14364: IFFALSE 14368
// exit ;
14366: GO 14878
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14368: LD_ADDR_VAR 0 8
14372: PUSH
14373: LD_INT 81
14375: PUSH
14376: LD_VAR 0 9
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 3
14387: PUSH
14388: LD_INT 21
14390: PUSH
14391: LD_INT 3
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PPUSH
14406: CALL_OW 69
14410: ST_TO_ADDR
// if not tmp then
14411: LD_VAR 0 8
14415: NOT
14416: IFFALSE 14420
// exit ;
14418: GO 14878
// if in_unit then
14420: LD_VAR 0 11
14424: IFFALSE 14448
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14426: LD_ADDR_VAR 0 10
14430: PUSH
14431: LD_VAR 0 8
14435: PPUSH
14436: LD_VAR 0 11
14440: PPUSH
14441: CALL_OW 74
14445: ST_TO_ADDR
14446: GO 14468
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14448: LD_ADDR_VAR 0 10
14452: PUSH
14453: LD_VAR 0 8
14457: PPUSH
14458: LD_VAR 0 1
14462: PPUSH
14463: CALL_OW 74
14467: ST_TO_ADDR
// if not enemy then
14468: LD_VAR 0 10
14472: NOT
14473: IFFALSE 14477
// exit ;
14475: GO 14878
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14477: LD_VAR 0 11
14481: PUSH
14482: LD_VAR 0 11
14486: PPUSH
14487: LD_VAR 0 10
14491: PPUSH
14492: CALL_OW 296
14496: PUSH
14497: LD_INT 13
14499: GREATER
14500: AND
14501: PUSH
14502: LD_VAR 0 1
14506: PPUSH
14507: LD_VAR 0 10
14511: PPUSH
14512: CALL_OW 296
14516: PUSH
14517: LD_INT 12
14519: GREATER
14520: OR
14521: IFFALSE 14525
// exit ;
14523: GO 14878
// missile := [ 1 ] ;
14525: LD_ADDR_VAR 0 14
14529: PUSH
14530: LD_INT 1
14532: PUSH
14533: EMPTY
14534: LIST
14535: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14536: LD_VAR 0 9
14540: PPUSH
14541: LD_VAR 0 12
14545: PPUSH
14546: CALL_OW 325
14550: IFFALSE 14579
// missile := Insert ( missile , missile + 1 , 2 ) ;
14552: LD_ADDR_VAR 0 14
14556: PUSH
14557: LD_VAR 0 14
14561: PPUSH
14562: LD_VAR 0 14
14566: PUSH
14567: LD_INT 1
14569: PLUS
14570: PPUSH
14571: LD_INT 2
14573: PPUSH
14574: CALL_OW 2
14578: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14579: LD_VAR 0 9
14583: PPUSH
14584: LD_VAR 0 13
14588: PPUSH
14589: CALL_OW 325
14593: PUSH
14594: LD_VAR 0 10
14598: PPUSH
14599: CALL_OW 255
14603: PPUSH
14604: LD_VAR 0 13
14608: PPUSH
14609: CALL_OW 325
14613: NOT
14614: AND
14615: IFFALSE 14644
// missile := Insert ( missile , missile + 1 , 3 ) ;
14617: LD_ADDR_VAR 0 14
14621: PUSH
14622: LD_VAR 0 14
14626: PPUSH
14627: LD_VAR 0 14
14631: PUSH
14632: LD_INT 1
14634: PLUS
14635: PPUSH
14636: LD_INT 3
14638: PPUSH
14639: CALL_OW 2
14643: ST_TO_ADDR
// if missile < 2 then
14644: LD_VAR 0 14
14648: PUSH
14649: LD_INT 2
14651: LESS
14652: IFFALSE 14656
// exit ;
14654: GO 14878
// x := GetX ( enemy ) ;
14656: LD_ADDR_VAR 0 4
14660: PUSH
14661: LD_VAR 0 10
14665: PPUSH
14666: CALL_OW 250
14670: ST_TO_ADDR
// y := GetY ( enemy ) ;
14671: LD_ADDR_VAR 0 5
14675: PUSH
14676: LD_VAR 0 10
14680: PPUSH
14681: CALL_OW 251
14685: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14686: LD_ADDR_VAR 0 6
14690: PUSH
14691: LD_VAR 0 4
14695: PUSH
14696: LD_INT 1
14698: NEG
14699: PPUSH
14700: LD_INT 1
14702: PPUSH
14703: CALL_OW 12
14707: PLUS
14708: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14709: LD_ADDR_VAR 0 7
14713: PUSH
14714: LD_VAR 0 5
14718: PUSH
14719: LD_INT 1
14721: NEG
14722: PPUSH
14723: LD_INT 1
14725: PPUSH
14726: CALL_OW 12
14730: PLUS
14731: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14732: LD_VAR 0 6
14736: PPUSH
14737: LD_VAR 0 7
14741: PPUSH
14742: CALL_OW 488
14746: NOT
14747: IFFALSE 14769
// begin _x := x ;
14749: LD_ADDR_VAR 0 6
14753: PUSH
14754: LD_VAR 0 4
14758: ST_TO_ADDR
// _y := y ;
14759: LD_ADDR_VAR 0 7
14763: PUSH
14764: LD_VAR 0 5
14768: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14769: LD_ADDR_VAR 0 3
14773: PUSH
14774: LD_INT 1
14776: PPUSH
14777: LD_VAR 0 14
14781: PPUSH
14782: CALL_OW 12
14786: ST_TO_ADDR
// case i of 1 :
14787: LD_VAR 0 3
14791: PUSH
14792: LD_INT 1
14794: DOUBLE
14795: EQUAL
14796: IFTRUE 14800
14798: GO 14817
14800: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14801: LD_VAR 0 1
14805: PPUSH
14806: LD_VAR 0 10
14810: PPUSH
14811: CALL_OW 115
14815: GO 14878
14817: LD_INT 2
14819: DOUBLE
14820: EQUAL
14821: IFTRUE 14825
14823: GO 14847
14825: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14826: LD_VAR 0 1
14830: PPUSH
14831: LD_VAR 0 6
14835: PPUSH
14836: LD_VAR 0 7
14840: PPUSH
14841: CALL_OW 153
14845: GO 14878
14847: LD_INT 3
14849: DOUBLE
14850: EQUAL
14851: IFTRUE 14855
14853: GO 14877
14855: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14856: LD_VAR 0 1
14860: PPUSH
14861: LD_VAR 0 6
14865: PPUSH
14866: LD_VAR 0 7
14870: PPUSH
14871: CALL_OW 154
14875: GO 14878
14877: POP
// end ;
14878: LD_VAR 0 2
14882: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14883: LD_INT 0
14885: PPUSH
14886: PPUSH
14887: PPUSH
14888: PPUSH
14889: PPUSH
14890: PPUSH
// if not unit or not building then
14891: LD_VAR 0 1
14895: NOT
14896: PUSH
14897: LD_VAR 0 2
14901: NOT
14902: OR
14903: IFFALSE 14907
// exit ;
14905: GO 15062
// x := GetX ( building ) ;
14907: LD_ADDR_VAR 0 5
14911: PUSH
14912: LD_VAR 0 2
14916: PPUSH
14917: CALL_OW 250
14921: ST_TO_ADDR
// y := GetY ( building ) ;
14922: LD_ADDR_VAR 0 6
14926: PUSH
14927: LD_VAR 0 2
14931: PPUSH
14932: CALL_OW 251
14936: ST_TO_ADDR
// for i = 0 to 5 do
14937: LD_ADDR_VAR 0 4
14941: PUSH
14942: DOUBLE
14943: LD_INT 0
14945: DEC
14946: ST_TO_ADDR
14947: LD_INT 5
14949: PUSH
14950: FOR_TO
14951: IFFALSE 15060
// begin _x := ShiftX ( x , i , 3 ) ;
14953: LD_ADDR_VAR 0 7
14957: PUSH
14958: LD_VAR 0 5
14962: PPUSH
14963: LD_VAR 0 4
14967: PPUSH
14968: LD_INT 3
14970: PPUSH
14971: CALL_OW 272
14975: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
14976: LD_ADDR_VAR 0 8
14980: PUSH
14981: LD_VAR 0 6
14985: PPUSH
14986: LD_VAR 0 4
14990: PPUSH
14991: LD_INT 3
14993: PPUSH
14994: CALL_OW 273
14998: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
14999: LD_VAR 0 7
15003: PPUSH
15004: LD_VAR 0 8
15008: PPUSH
15009: CALL_OW 428
15013: PUSH
15014: LD_INT 0
15016: EQUAL
15017: PUSH
15018: LD_VAR 0 7
15022: PPUSH
15023: LD_VAR 0 8
15027: PPUSH
15028: CALL_OW 488
15032: AND
15033: IFFALSE 15058
// begin ComMoveXY ( unit , _x , _y ) ;
15035: LD_VAR 0 1
15039: PPUSH
15040: LD_VAR 0 7
15044: PPUSH
15045: LD_VAR 0 8
15049: PPUSH
15050: CALL_OW 111
// exit ;
15054: POP
15055: POP
15056: GO 15062
// end ; end ;
15058: GO 14950
15060: POP
15061: POP
// end ;
15062: LD_VAR 0 3
15066: RET
// export function ScanBase ( side , base_area ) ; begin
15067: LD_INT 0
15069: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15070: LD_ADDR_VAR 0 3
15074: PUSH
15075: LD_VAR 0 2
15079: PPUSH
15080: LD_INT 81
15082: PUSH
15083: LD_VAR 0 1
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PPUSH
15092: CALL_OW 70
15096: ST_TO_ADDR
// end ;
15097: LD_VAR 0 3
15101: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
15102: LD_INT 0
15104: PPUSH
15105: PPUSH
15106: PPUSH
15107: PPUSH
15108: PPUSH
15109: PPUSH
15110: PPUSH
15111: PPUSH
15112: PPUSH
15113: PPUSH
15114: PPUSH
15115: PPUSH
15116: PPUSH
15117: PPUSH
15118: PPUSH
15119: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
15120: LD_ADDR_VAR 0 12
15124: PUSH
15125: LD_EXP 57
15129: PUSH
15130: LD_VAR 0 1
15134: ARRAY
15135: PPUSH
15136: LD_INT 25
15138: PUSH
15139: LD_INT 3
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PPUSH
15146: CALL_OW 72
15150: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
15151: LD_ADDR_VAR 0 8
15155: PUSH
15156: LD_EXP 57
15160: PUSH
15161: LD_VAR 0 1
15165: ARRAY
15166: PPUSH
15167: LD_INT 2
15169: PUSH
15170: LD_INT 25
15172: PUSH
15173: LD_INT 1
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: LD_INT 25
15182: PUSH
15183: LD_INT 5
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PUSH
15190: LD_INT 25
15192: PUSH
15193: LD_INT 8
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: LD_INT 25
15202: PUSH
15203: LD_INT 9
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: PPUSH
15217: CALL_OW 72
15221: ST_TO_ADDR
// if not defenders and not solds then
15222: LD_VAR 0 2
15226: NOT
15227: PUSH
15228: LD_VAR 0 8
15232: NOT
15233: AND
15234: IFFALSE 15238
// exit ;
15236: GO 16604
// depot_under_attack := false ;
15238: LD_ADDR_VAR 0 16
15242: PUSH
15243: LD_INT 0
15245: ST_TO_ADDR
// sold_defenders := [ ] ;
15246: LD_ADDR_VAR 0 17
15250: PUSH
15251: EMPTY
15252: ST_TO_ADDR
// if mechs then
15253: LD_VAR 0 12
15257: IFFALSE 15386
// for i in defenders do
15259: LD_ADDR_VAR 0 5
15263: PUSH
15264: LD_VAR 0 2
15268: PUSH
15269: FOR_IN
15270: IFFALSE 15384
// begin SetTag ( i , 20 ) ;
15272: LD_VAR 0 5
15276: PPUSH
15277: LD_INT 20
15279: PPUSH
15280: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
15284: LD_VAR 0 5
15288: PPUSH
15289: CALL_OW 263
15293: PUSH
15294: LD_INT 1
15296: EQUAL
15297: PUSH
15298: LD_VAR 0 5
15302: PPUSH
15303: CALL_OW 311
15307: NOT
15308: AND
15309: PUSH
15310: LD_VAR 0 12
15314: AND
15315: IFFALSE 15382
// begin un := mechs [ 1 ] ;
15317: LD_ADDR_VAR 0 10
15321: PUSH
15322: LD_VAR 0 12
15326: PUSH
15327: LD_INT 1
15329: ARRAY
15330: ST_TO_ADDR
// ComExitBuilding ( un ) ;
15331: LD_VAR 0 10
15335: PPUSH
15336: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
15340: LD_VAR 0 10
15344: PPUSH
15345: LD_VAR 0 5
15349: PPUSH
15350: CALL_OW 180
// SetTag ( un , 19 ) ;
15354: LD_VAR 0 10
15358: PPUSH
15359: LD_INT 19
15361: PPUSH
15362: CALL_OW 109
// mechs := mechs diff un ;
15366: LD_ADDR_VAR 0 12
15370: PUSH
15371: LD_VAR 0 12
15375: PUSH
15376: LD_VAR 0 10
15380: DIFF
15381: ST_TO_ADDR
// end ; end ;
15382: GO 15269
15384: POP
15385: POP
// if solds then
15386: LD_VAR 0 8
15390: IFFALSE 15449
// for i in solds do
15392: LD_ADDR_VAR 0 5
15396: PUSH
15397: LD_VAR 0 8
15401: PUSH
15402: FOR_IN
15403: IFFALSE 15447
// if not GetTag ( i ) then
15405: LD_VAR 0 5
15409: PPUSH
15410: CALL_OW 110
15414: NOT
15415: IFFALSE 15445
// begin defenders := defenders union i ;
15417: LD_ADDR_VAR 0 2
15421: PUSH
15422: LD_VAR 0 2
15426: PUSH
15427: LD_VAR 0 5
15431: UNION
15432: ST_TO_ADDR
// SetTag ( i , 18 ) ;
15433: LD_VAR 0 5
15437: PPUSH
15438: LD_INT 18
15440: PPUSH
15441: CALL_OW 109
// end ;
15445: GO 15402
15447: POP
15448: POP
// repeat wait ( 0 0$1 ) ;
15449: LD_INT 35
15451: PPUSH
15452: CALL_OW 67
// enemy := mc_scan [ base ] ;
15456: LD_ADDR_VAR 0 3
15460: PUSH
15461: LD_EXP 80
15465: PUSH
15466: LD_VAR 0 1
15470: ARRAY
15471: ST_TO_ADDR
// for i in defenders do
15472: LD_ADDR_VAR 0 5
15476: PUSH
15477: LD_VAR 0 2
15481: PUSH
15482: FOR_IN
15483: IFFALSE 16168
// begin e := NearestUnitToUnit ( enemy , i ) ;
15485: LD_ADDR_VAR 0 13
15489: PUSH
15490: LD_VAR 0 3
15494: PPUSH
15495: LD_VAR 0 5
15499: PPUSH
15500: CALL_OW 74
15504: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
15505: LD_ADDR_VAR 0 16
15509: PUSH
15510: LD_EXP 57
15514: PUSH
15515: LD_VAR 0 1
15519: ARRAY
15520: PPUSH
15521: LD_INT 2
15523: PUSH
15524: LD_INT 30
15526: PUSH
15527: LD_INT 0
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 30
15536: PUSH
15537: LD_INT 1
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: LIST
15548: PPUSH
15549: CALL_OW 72
15553: NOT
15554: PUSH
15555: LD_EXP 57
15559: PUSH
15560: LD_VAR 0 1
15564: ARRAY
15565: PPUSH
15566: LD_INT 2
15568: PUSH
15569: LD_INT 30
15571: PUSH
15572: LD_INT 0
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 30
15581: PUSH
15582: LD_INT 1
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: LIST
15593: PPUSH
15594: CALL_OW 72
15598: PPUSH
15599: CALL_OW 256
15603: PUSH
15604: LD_INT 600
15606: LESS
15607: OR
15608: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
15609: LD_VAR 0 5
15613: PPUSH
15614: CALL_OW 247
15618: PUSH
15619: LD_INT 2
15621: DOUBLE
15622: EQUAL
15623: IFTRUE 15627
15625: GO 15874
15627: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
15628: LD_VAR 0 5
15632: PPUSH
15633: CALL_OW 256
15637: PUSH
15638: LD_INT 650
15640: GREATER
15641: PUSH
15642: LD_VAR 0 5
15646: PPUSH
15647: LD_VAR 0 13
15651: PPUSH
15652: CALL_OW 296
15656: PUSH
15657: LD_INT 40
15659: LESS
15660: AND
15661: IFFALSE 15679
// ComAttackUnit ( i , e ) else
15663: LD_VAR 0 5
15667: PPUSH
15668: LD_VAR 0 13
15672: PPUSH
15673: CALL_OW 115
15677: GO 15757
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
15679: LD_VAR 0 5
15683: PPUSH
15684: LD_VAR 0 13
15688: PPUSH
15689: CALL_OW 296
15693: PUSH
15694: LD_INT 30
15696: GREATEREQUAL
15697: PUSH
15698: LD_VAR 0 5
15702: PPUSH
15703: CALL_OW 256
15707: PUSH
15708: LD_INT 650
15710: LESSEQUAL
15711: OR
15712: PUSH
15713: LD_VAR 0 5
15717: PPUSH
15718: LD_EXP 81
15722: PUSH
15723: LD_VAR 0 1
15727: ARRAY
15728: PPUSH
15729: CALL_OW 308
15733: NOT
15734: AND
15735: IFFALSE 15757
// ComMoveToArea ( i , mc_parking [ base ] ) ;
15737: LD_VAR 0 5
15741: PPUSH
15742: LD_EXP 81
15746: PUSH
15747: LD_VAR 0 1
15751: ARRAY
15752: PPUSH
15753: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
15757: LD_VAR 0 5
15761: PPUSH
15762: CALL_OW 256
15766: PUSH
15767: LD_INT 998
15769: LESS
15770: PUSH
15771: LD_VAR 0 5
15775: PPUSH
15776: CALL_OW 263
15780: PUSH
15781: LD_INT 1
15783: EQUAL
15784: AND
15785: PUSH
15786: LD_VAR 0 5
15790: PPUSH
15791: CALL_OW 311
15795: AND
15796: PUSH
15797: LD_VAR 0 5
15801: PPUSH
15802: LD_EXP 81
15806: PUSH
15807: LD_VAR 0 1
15811: ARRAY
15812: PPUSH
15813: CALL_OW 308
15817: AND
15818: IFFALSE 15872
// begin mech := IsDrivenBy ( i ) ;
15820: LD_ADDR_VAR 0 9
15824: PUSH
15825: LD_VAR 0 5
15829: PPUSH
15830: CALL_OW 311
15834: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
15835: LD_VAR 0 9
15839: PPUSH
15840: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
15844: LD_VAR 0 9
15848: PPUSH
15849: LD_VAR 0 5
15853: PPUSH
15854: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
15858: LD_VAR 0 9
15862: PPUSH
15863: LD_VAR 0 5
15867: PPUSH
15868: CALL_OW 180
// end ; end ; unit_human :
15872: GO 16139
15874: LD_INT 1
15876: DOUBLE
15877: EQUAL
15878: IFTRUE 15882
15880: GO 16138
15882: POP
// begin b := IsInUnit ( i ) ;
15883: LD_ADDR_VAR 0 18
15887: PUSH
15888: LD_VAR 0 5
15892: PPUSH
15893: CALL_OW 310
15897: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
15898: LD_ADDR_VAR 0 19
15902: PUSH
15903: LD_VAR 0 18
15907: NOT
15908: PUSH
15909: LD_VAR 0 18
15913: PPUSH
15914: CALL_OW 266
15918: PUSH
15919: LD_INT 32
15921: PUSH
15922: LD_INT 31
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: IN
15929: OR
15930: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
15931: LD_VAR 0 16
15935: PUSH
15936: LD_VAR 0 2
15940: PPUSH
15941: LD_INT 21
15943: PUSH
15944: LD_INT 2
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PPUSH
15951: CALL_OW 72
15955: PUSH
15956: LD_INT 1
15958: LESSEQUAL
15959: OR
15960: PUSH
15961: LD_VAR 0 19
15965: AND
15966: PUSH
15967: LD_VAR 0 5
15971: PUSH
15972: LD_VAR 0 17
15976: IN
15977: NOT
15978: AND
15979: IFFALSE 16072
// begin if b then
15981: LD_VAR 0 18
15985: IFFALSE 16034
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
15987: LD_VAR 0 18
15991: PPUSH
15992: LD_VAR 0 3
15996: PPUSH
15997: LD_VAR 0 18
16001: PPUSH
16002: CALL_OW 74
16006: PPUSH
16007: CALL_OW 296
16011: PUSH
16012: LD_INT 10
16014: LESS
16015: PUSH
16016: LD_VAR 0 18
16020: PPUSH
16021: CALL_OW 461
16025: PUSH
16026: LD_INT 7
16028: NONEQUAL
16029: AND
16030: IFFALSE 16034
// continue ;
16032: GO 15482
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
16034: LD_ADDR_VAR 0 17
16038: PUSH
16039: LD_VAR 0 17
16043: PPUSH
16044: LD_VAR 0 17
16048: PUSH
16049: LD_INT 1
16051: PLUS
16052: PPUSH
16053: LD_VAR 0 5
16057: PPUSH
16058: CALL_OW 1
16062: ST_TO_ADDR
// ComExitBuilding ( i ) ;
16063: LD_VAR 0 5
16067: PPUSH
16068: CALL_OW 122
// end ; if sold_defenders then
16072: LD_VAR 0 17
16076: IFFALSE 16136
// if i in sold_defenders then
16078: LD_VAR 0 5
16082: PUSH
16083: LD_VAR 0 17
16087: IN
16088: IFFALSE 16136
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
16090: LD_VAR 0 5
16094: PPUSH
16095: CALL_OW 314
16099: NOT
16100: PUSH
16101: LD_VAR 0 5
16105: PPUSH
16106: LD_VAR 0 13
16110: PPUSH
16111: CALL_OW 296
16115: PUSH
16116: LD_INT 30
16118: LESS
16119: AND
16120: IFFALSE 16136
// ComAttackUnit ( i , e ) ;
16122: LD_VAR 0 5
16126: PPUSH
16127: LD_VAR 0 13
16131: PPUSH
16132: CALL_OW 115
// end ; end ; end ;
16136: GO 16139
16138: POP
// if IsDead ( i ) then
16139: LD_VAR 0 5
16143: PPUSH
16144: CALL_OW 301
16148: IFFALSE 16166
// defenders := defenders diff i ;
16150: LD_ADDR_VAR 0 2
16154: PUSH
16155: LD_VAR 0 2
16159: PUSH
16160: LD_VAR 0 5
16164: DIFF
16165: ST_TO_ADDR
// end ;
16166: GO 15482
16168: POP
16169: POP
// until not enemy or not defenders ;
16170: LD_VAR 0 3
16174: NOT
16175: PUSH
16176: LD_VAR 0 2
16180: NOT
16181: OR
16182: IFFALSE 15449
// MC_Reset ( base , 18 ) ;
16184: LD_VAR 0 1
16188: PPUSH
16189: LD_INT 18
16191: PPUSH
16192: CALL 54972 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
16196: LD_ADDR_VAR 0 2
16200: PUSH
16201: LD_VAR 0 2
16205: PUSH
16206: LD_VAR 0 2
16210: PPUSH
16211: LD_INT 2
16213: PUSH
16214: LD_INT 25
16216: PUSH
16217: LD_INT 1
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: LD_INT 25
16226: PUSH
16227: LD_INT 5
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: LD_INT 25
16236: PUSH
16237: LD_INT 8
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 25
16246: PUSH
16247: LD_INT 9
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: PPUSH
16261: CALL_OW 72
16265: DIFF
16266: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
16267: LD_VAR 0 3
16271: NOT
16272: PUSH
16273: LD_VAR 0 2
16277: PPUSH
16278: LD_INT 21
16280: PUSH
16281: LD_INT 2
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: PPUSH
16288: CALL_OW 72
16292: AND
16293: IFFALSE 16555
// begin tmp := FilterByTag ( defenders , 19 ) ;
16295: LD_ADDR_VAR 0 11
16299: PUSH
16300: LD_VAR 0 2
16304: PPUSH
16305: LD_INT 19
16307: PPUSH
16308: CALL 51066 0 2
16312: ST_TO_ADDR
// if tmp then
16313: LD_VAR 0 11
16317: IFFALSE 16387
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
16319: LD_ADDR_VAR 0 11
16323: PUSH
16324: LD_VAR 0 11
16328: PPUSH
16329: LD_INT 25
16331: PUSH
16332: LD_INT 3
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PPUSH
16339: CALL_OW 72
16343: ST_TO_ADDR
// if tmp then
16344: LD_VAR 0 11
16348: IFFALSE 16387
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
16350: LD_ADDR_EXP 69
16354: PUSH
16355: LD_EXP 69
16359: PPUSH
16360: LD_VAR 0 1
16364: PPUSH
16365: LD_EXP 69
16369: PUSH
16370: LD_VAR 0 1
16374: ARRAY
16375: PUSH
16376: LD_VAR 0 11
16380: UNION
16381: PPUSH
16382: CALL_OW 1
16386: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
16387: LD_VAR 0 1
16391: PPUSH
16392: LD_INT 19
16394: PPUSH
16395: CALL 54972 0 2
// repeat wait ( 0 0$1 ) ;
16399: LD_INT 35
16401: PPUSH
16402: CALL_OW 67
// for i in defenders do
16406: LD_ADDR_VAR 0 5
16410: PUSH
16411: LD_VAR 0 2
16415: PUSH
16416: FOR_IN
16417: IFFALSE 16506
// begin if not IsInArea ( i , mc_parking [ base ] ) then
16419: LD_VAR 0 5
16423: PPUSH
16424: LD_EXP 81
16428: PUSH
16429: LD_VAR 0 1
16433: ARRAY
16434: PPUSH
16435: CALL_OW 308
16439: NOT
16440: IFFALSE 16464
// ComMoveToArea ( i , mc_parking [ base ] ) else
16442: LD_VAR 0 5
16446: PPUSH
16447: LD_EXP 81
16451: PUSH
16452: LD_VAR 0 1
16456: ARRAY
16457: PPUSH
16458: CALL_OW 113
16462: GO 16504
// if GetControl ( i ) = control_manual then
16464: LD_VAR 0 5
16468: PPUSH
16469: CALL_OW 263
16473: PUSH
16474: LD_INT 1
16476: EQUAL
16477: IFFALSE 16504
// if IsDrivenBy ( i ) then
16479: LD_VAR 0 5
16483: PPUSH
16484: CALL_OW 311
16488: IFFALSE 16504
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
16490: LD_VAR 0 5
16494: PPUSH
16495: CALL_OW 311
16499: PPUSH
16500: CALL_OW 121
// end ;
16504: GO 16416
16506: POP
16507: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
16508: LD_VAR 0 2
16512: PPUSH
16513: LD_INT 95
16515: PUSH
16516: LD_EXP 81
16520: PUSH
16521: LD_VAR 0 1
16525: ARRAY
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PPUSH
16531: CALL_OW 72
16535: PUSH
16536: LD_VAR 0 2
16540: EQUAL
16541: PUSH
16542: LD_EXP 80
16546: PUSH
16547: LD_VAR 0 1
16551: ARRAY
16552: OR
16553: IFFALSE 16399
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
16555: LD_ADDR_EXP 79
16559: PUSH
16560: LD_EXP 79
16564: PPUSH
16565: LD_VAR 0 1
16569: PPUSH
16570: LD_EXP 79
16574: PUSH
16575: LD_VAR 0 1
16579: ARRAY
16580: PUSH
16581: LD_VAR 0 2
16585: UNION
16586: PPUSH
16587: CALL_OW 1
16591: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
16592: LD_VAR 0 1
16596: PPUSH
16597: LD_INT 20
16599: PPUSH
16600: CALL 54972 0 2
// end ;
16604: LD_VAR 0 4
16608: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16609: LD_INT 0
16611: PPUSH
16612: PPUSH
16613: PPUSH
16614: PPUSH
// result := false ;
16615: LD_ADDR_VAR 0 2
16619: PUSH
16620: LD_INT 0
16622: ST_TO_ADDR
// side := GetSide ( unit ) ;
16623: LD_ADDR_VAR 0 3
16627: PUSH
16628: LD_VAR 0 1
16632: PPUSH
16633: CALL_OW 255
16637: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16638: LD_ADDR_VAR 0 4
16642: PUSH
16643: LD_VAR 0 1
16647: PPUSH
16648: CALL_OW 248
16652: ST_TO_ADDR
// case nat of 1 :
16653: LD_VAR 0 4
16657: PUSH
16658: LD_INT 1
16660: DOUBLE
16661: EQUAL
16662: IFTRUE 16666
16664: GO 16677
16666: POP
// tech := tech_lassight ; 2 :
16667: LD_ADDR_VAR 0 5
16671: PUSH
16672: LD_INT 12
16674: ST_TO_ADDR
16675: GO 16716
16677: LD_INT 2
16679: DOUBLE
16680: EQUAL
16681: IFTRUE 16685
16683: GO 16696
16685: POP
// tech := tech_mortar ; 3 :
16686: LD_ADDR_VAR 0 5
16690: PUSH
16691: LD_INT 41
16693: ST_TO_ADDR
16694: GO 16716
16696: LD_INT 3
16698: DOUBLE
16699: EQUAL
16700: IFTRUE 16704
16702: GO 16715
16704: POP
// tech := tech_bazooka ; end ;
16705: LD_ADDR_VAR 0 5
16709: PUSH
16710: LD_INT 44
16712: ST_TO_ADDR
16713: GO 16716
16715: POP
// if Researched ( side , tech ) then
16716: LD_VAR 0 3
16720: PPUSH
16721: LD_VAR 0 5
16725: PPUSH
16726: CALL_OW 325
16730: IFFALSE 16757
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
16732: LD_ADDR_VAR 0 2
16736: PUSH
16737: LD_INT 5
16739: PUSH
16740: LD_INT 8
16742: PUSH
16743: LD_INT 9
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: LIST
16750: PUSH
16751: LD_VAR 0 4
16755: ARRAY
16756: ST_TO_ADDR
// end ;
16757: LD_VAR 0 2
16761: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
16762: LD_INT 0
16764: PPUSH
16765: PPUSH
16766: PPUSH
// if not mines then
16767: LD_VAR 0 2
16771: NOT
16772: IFFALSE 16776
// exit ;
16774: GO 16920
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16776: LD_ADDR_VAR 0 5
16780: PUSH
16781: LD_INT 81
16783: PUSH
16784: LD_VAR 0 1
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 3
16795: PUSH
16796: LD_INT 21
16798: PUSH
16799: LD_INT 3
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PPUSH
16814: CALL_OW 69
16818: ST_TO_ADDR
// for i in mines do
16819: LD_ADDR_VAR 0 4
16823: PUSH
16824: LD_VAR 0 2
16828: PUSH
16829: FOR_IN
16830: IFFALSE 16918
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
16832: LD_VAR 0 4
16836: PUSH
16837: LD_INT 1
16839: ARRAY
16840: PPUSH
16841: LD_VAR 0 4
16845: PUSH
16846: LD_INT 2
16848: ARRAY
16849: PPUSH
16850: CALL_OW 458
16854: NOT
16855: IFFALSE 16859
// continue ;
16857: GO 16829
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
16859: LD_VAR 0 4
16863: PUSH
16864: LD_INT 1
16866: ARRAY
16867: PPUSH
16868: LD_VAR 0 4
16872: PUSH
16873: LD_INT 2
16875: ARRAY
16876: PPUSH
16877: CALL_OW 428
16881: PUSH
16882: LD_VAR 0 5
16886: IN
16887: IFFALSE 16916
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
16889: LD_VAR 0 4
16893: PUSH
16894: LD_INT 1
16896: ARRAY
16897: PPUSH
16898: LD_VAR 0 4
16902: PUSH
16903: LD_INT 2
16905: ARRAY
16906: PPUSH
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL_OW 456
// end ;
16916: GO 16829
16918: POP
16919: POP
// end ;
16920: LD_VAR 0 3
16924: RET
// export function Count ( array ) ; var i ; begin
16925: LD_INT 0
16927: PPUSH
16928: PPUSH
// result := 0 ;
16929: LD_ADDR_VAR 0 2
16933: PUSH
16934: LD_INT 0
16936: ST_TO_ADDR
// for i in array do
16937: LD_ADDR_VAR 0 3
16941: PUSH
16942: LD_VAR 0 1
16946: PUSH
16947: FOR_IN
16948: IFFALSE 16972
// if i then
16950: LD_VAR 0 3
16954: IFFALSE 16970
// result := result + 1 ;
16956: LD_ADDR_VAR 0 2
16960: PUSH
16961: LD_VAR 0 2
16965: PUSH
16966: LD_INT 1
16968: PLUS
16969: ST_TO_ADDR
16970: GO 16947
16972: POP
16973: POP
// end ;
16974: LD_VAR 0 2
16978: RET
// export function IsEmpty ( building ) ; begin
16979: LD_INT 0
16981: PPUSH
// if not building then
16982: LD_VAR 0 1
16986: NOT
16987: IFFALSE 16991
// exit ;
16989: GO 17034
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
16991: LD_ADDR_VAR 0 2
16995: PUSH
16996: LD_VAR 0 1
17000: PUSH
17001: LD_INT 22
17003: PUSH
17004: LD_VAR 0 1
17008: PPUSH
17009: CALL_OW 255
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 58
17020: PUSH
17021: EMPTY
17022: LIST
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PPUSH
17028: CALL_OW 69
17032: IN
17033: ST_TO_ADDR
// end ;
17034: LD_VAR 0 2
17038: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17039: LD_INT 0
17041: PPUSH
17042: PPUSH
17043: PPUSH
17044: PPUSH
// tmp := [ ] ;
17045: LD_ADDR_VAR 0 3
17049: PUSH
17050: EMPTY
17051: ST_TO_ADDR
// list := [ ] ;
17052: LD_ADDR_VAR 0 5
17056: PUSH
17057: EMPTY
17058: ST_TO_ADDR
// for i = 16 to 25 do
17059: LD_ADDR_VAR 0 4
17063: PUSH
17064: DOUBLE
17065: LD_INT 16
17067: DEC
17068: ST_TO_ADDR
17069: LD_INT 25
17071: PUSH
17072: FOR_TO
17073: IFFALSE 17146
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17075: LD_ADDR_VAR 0 3
17079: PUSH
17080: LD_VAR 0 3
17084: PUSH
17085: LD_INT 22
17087: PUSH
17088: LD_VAR 0 1
17092: PPUSH
17093: CALL_OW 255
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 91
17104: PUSH
17105: LD_VAR 0 1
17109: PUSH
17110: LD_INT 6
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 30
17120: PUSH
17121: LD_VAR 0 4
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: PPUSH
17138: CALL_OW 69
17142: ADD
17143: ST_TO_ADDR
17144: GO 17072
17146: POP
17147: POP
// for i = 1 to tmp do
17148: LD_ADDR_VAR 0 4
17152: PUSH
17153: DOUBLE
17154: LD_INT 1
17156: DEC
17157: ST_TO_ADDR
17158: LD_VAR 0 3
17162: PUSH
17163: FOR_TO
17164: IFFALSE 17252
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17166: LD_ADDR_VAR 0 5
17170: PUSH
17171: LD_VAR 0 5
17175: PUSH
17176: LD_VAR 0 3
17180: PUSH
17181: LD_VAR 0 4
17185: ARRAY
17186: PPUSH
17187: CALL_OW 266
17191: PUSH
17192: LD_VAR 0 3
17196: PUSH
17197: LD_VAR 0 4
17201: ARRAY
17202: PPUSH
17203: CALL_OW 250
17207: PUSH
17208: LD_VAR 0 3
17212: PUSH
17213: LD_VAR 0 4
17217: ARRAY
17218: PPUSH
17219: CALL_OW 251
17223: PUSH
17224: LD_VAR 0 3
17228: PUSH
17229: LD_VAR 0 4
17233: ARRAY
17234: PPUSH
17235: CALL_OW 254
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: PUSH
17246: EMPTY
17247: LIST
17248: ADD
17249: ST_TO_ADDR
17250: GO 17163
17252: POP
17253: POP
// result := list ;
17254: LD_ADDR_VAR 0 2
17258: PUSH
17259: LD_VAR 0 5
17263: ST_TO_ADDR
// end ;
17264: LD_VAR 0 2
17268: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17269: LD_INT 0
17271: PPUSH
17272: PPUSH
17273: PPUSH
17274: PPUSH
17275: PPUSH
17276: PPUSH
17277: PPUSH
// if not factory then
17278: LD_VAR 0 1
17282: NOT
17283: IFFALSE 17287
// exit ;
17285: GO 17812
// if control = control_apeman then
17287: LD_VAR 0 4
17291: PUSH
17292: LD_INT 5
17294: EQUAL
17295: IFFALSE 17404
// begin tmp := UnitsInside ( factory ) ;
17297: LD_ADDR_VAR 0 8
17301: PUSH
17302: LD_VAR 0 1
17306: PPUSH
17307: CALL_OW 313
17311: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17312: LD_VAR 0 8
17316: PPUSH
17317: LD_INT 25
17319: PUSH
17320: LD_INT 12
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PPUSH
17327: CALL_OW 72
17331: NOT
17332: IFFALSE 17342
// control := control_manual ;
17334: LD_ADDR_VAR 0 4
17338: PUSH
17339: LD_INT 1
17341: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17342: LD_ADDR_VAR 0 8
17346: PUSH
17347: LD_VAR 0 1
17351: PPUSH
17352: CALL 17039 0 1
17356: ST_TO_ADDR
// if tmp then
17357: LD_VAR 0 8
17361: IFFALSE 17404
// begin for i in tmp do
17363: LD_ADDR_VAR 0 7
17367: PUSH
17368: LD_VAR 0 8
17372: PUSH
17373: FOR_IN
17374: IFFALSE 17402
// if i [ 1 ] = b_ext_radar then
17376: LD_VAR 0 7
17380: PUSH
17381: LD_INT 1
17383: ARRAY
17384: PUSH
17385: LD_INT 20
17387: EQUAL
17388: IFFALSE 17400
// begin control := control_remote ;
17390: LD_ADDR_VAR 0 4
17394: PUSH
17395: LD_INT 2
17397: ST_TO_ADDR
// break ;
17398: GO 17402
// end ;
17400: GO 17373
17402: POP
17403: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17404: LD_VAR 0 1
17408: PPUSH
17409: LD_VAR 0 2
17413: PPUSH
17414: LD_VAR 0 3
17418: PPUSH
17419: LD_VAR 0 4
17423: PPUSH
17424: LD_VAR 0 5
17428: PPUSH
17429: CALL_OW 448
17433: IFFALSE 17468
// begin result := [ chassis , engine , control , weapon ] ;
17435: LD_ADDR_VAR 0 6
17439: PUSH
17440: LD_VAR 0 2
17444: PUSH
17445: LD_VAR 0 3
17449: PUSH
17450: LD_VAR 0 4
17454: PUSH
17455: LD_VAR 0 5
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: ST_TO_ADDR
// exit ;
17466: GO 17812
// end ; _chassis := AvailableChassisList ( factory ) ;
17468: LD_ADDR_VAR 0 9
17472: PUSH
17473: LD_VAR 0 1
17477: PPUSH
17478: CALL_OW 475
17482: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17483: LD_ADDR_VAR 0 11
17487: PUSH
17488: LD_VAR 0 1
17492: PPUSH
17493: CALL_OW 476
17497: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17498: LD_ADDR_VAR 0 12
17502: PUSH
17503: LD_VAR 0 1
17507: PPUSH
17508: CALL_OW 477
17512: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17513: LD_ADDR_VAR 0 10
17517: PUSH
17518: LD_VAR 0 1
17522: PPUSH
17523: CALL_OW 478
17527: ST_TO_ADDR
// if not chassis in _chassis then
17528: LD_VAR 0 2
17532: PUSH
17533: LD_VAR 0 9
17537: IN
17538: NOT
17539: IFFALSE 17565
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17541: LD_ADDR_VAR 0 2
17545: PUSH
17546: LD_VAR 0 9
17550: PUSH
17551: LD_INT 1
17553: PPUSH
17554: LD_VAR 0 9
17558: PPUSH
17559: CALL_OW 12
17563: ARRAY
17564: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17565: LD_VAR 0 2
17569: PPUSH
17570: LD_VAR 0 3
17574: PPUSH
17575: CALL 17817 0 2
17579: NOT
17580: IFFALSE 17639
// repeat engine := _engine [ 1 ] ;
17582: LD_ADDR_VAR 0 3
17586: PUSH
17587: LD_VAR 0 11
17591: PUSH
17592: LD_INT 1
17594: ARRAY
17595: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17596: LD_ADDR_VAR 0 11
17600: PUSH
17601: LD_VAR 0 11
17605: PPUSH
17606: LD_INT 1
17608: PPUSH
17609: CALL_OW 3
17613: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17614: LD_VAR 0 2
17618: PPUSH
17619: LD_VAR 0 3
17623: PPUSH
17624: CALL 17817 0 2
17628: PUSH
17629: LD_VAR 0 11
17633: PUSH
17634: EMPTY
17635: EQUAL
17636: OR
17637: IFFALSE 17582
// if not control in _control then
17639: LD_VAR 0 4
17643: PUSH
17644: LD_VAR 0 12
17648: IN
17649: NOT
17650: IFFALSE 17676
// control := _control [ rand ( 1 , _control ) ] ;
17652: LD_ADDR_VAR 0 4
17656: PUSH
17657: LD_VAR 0 12
17661: PUSH
17662: LD_INT 1
17664: PPUSH
17665: LD_VAR 0 12
17669: PPUSH
17670: CALL_OW 12
17674: ARRAY
17675: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
17676: LD_VAR 0 2
17680: PPUSH
17681: LD_VAR 0 5
17685: PPUSH
17686: CALL 18037 0 2
17690: NOT
17691: IFFALSE 17750
// repeat weapon := _weapon [ 1 ] ;
17693: LD_ADDR_VAR 0 5
17697: PUSH
17698: LD_VAR 0 10
17702: PUSH
17703: LD_INT 1
17705: ARRAY
17706: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
17707: LD_ADDR_VAR 0 10
17711: PUSH
17712: LD_VAR 0 10
17716: PPUSH
17717: LD_INT 1
17719: PPUSH
17720: CALL_OW 3
17724: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
17725: LD_VAR 0 2
17729: PPUSH
17730: LD_VAR 0 5
17734: PPUSH
17735: CALL 18037 0 2
17739: PUSH
17740: LD_VAR 0 10
17744: PUSH
17745: EMPTY
17746: EQUAL
17747: OR
17748: IFFALSE 17693
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17750: LD_VAR 0 1
17754: PPUSH
17755: LD_VAR 0 2
17759: PPUSH
17760: LD_VAR 0 3
17764: PPUSH
17765: LD_VAR 0 4
17769: PPUSH
17770: LD_VAR 0 5
17774: PPUSH
17775: CALL_OW 448
17779: IFFALSE 17812
// result := [ chassis , engine , control , weapon ] ;
17781: LD_ADDR_VAR 0 6
17785: PUSH
17786: LD_VAR 0 2
17790: PUSH
17791: LD_VAR 0 3
17795: PUSH
17796: LD_VAR 0 4
17800: PUSH
17801: LD_VAR 0 5
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: ST_TO_ADDR
// end ;
17812: LD_VAR 0 6
17816: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
17817: LD_INT 0
17819: PPUSH
// if not chassis or not engine then
17820: LD_VAR 0 1
17824: NOT
17825: PUSH
17826: LD_VAR 0 2
17830: NOT
17831: OR
17832: IFFALSE 17836
// exit ;
17834: GO 18032
// case engine of engine_solar :
17836: LD_VAR 0 2
17840: PUSH
17841: LD_INT 2
17843: DOUBLE
17844: EQUAL
17845: IFTRUE 17849
17847: GO 17887
17849: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
17850: LD_ADDR_VAR 0 3
17854: PUSH
17855: LD_INT 11
17857: PUSH
17858: LD_INT 12
17860: PUSH
17861: LD_INT 13
17863: PUSH
17864: LD_INT 14
17866: PUSH
17867: LD_INT 1
17869: PUSH
17870: LD_INT 2
17872: PUSH
17873: LD_INT 3
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: ST_TO_ADDR
17885: GO 18016
17887: LD_INT 1
17889: DOUBLE
17890: EQUAL
17891: IFTRUE 17895
17893: GO 17957
17895: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
17896: LD_ADDR_VAR 0 3
17900: PUSH
17901: LD_INT 11
17903: PUSH
17904: LD_INT 12
17906: PUSH
17907: LD_INT 13
17909: PUSH
17910: LD_INT 14
17912: PUSH
17913: LD_INT 1
17915: PUSH
17916: LD_INT 2
17918: PUSH
17919: LD_INT 3
17921: PUSH
17922: LD_INT 4
17924: PUSH
17925: LD_INT 5
17927: PUSH
17928: LD_INT 21
17930: PUSH
17931: LD_INT 23
17933: PUSH
17934: LD_INT 22
17936: PUSH
17937: LD_INT 24
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: ST_TO_ADDR
17955: GO 18016
17957: LD_INT 3
17959: DOUBLE
17960: EQUAL
17961: IFTRUE 17965
17963: GO 18015
17965: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17966: LD_ADDR_VAR 0 3
17970: PUSH
17971: LD_INT 13
17973: PUSH
17974: LD_INT 14
17976: PUSH
17977: LD_INT 2
17979: PUSH
17980: LD_INT 3
17982: PUSH
17983: LD_INT 4
17985: PUSH
17986: LD_INT 5
17988: PUSH
17989: LD_INT 21
17991: PUSH
17992: LD_INT 22
17994: PUSH
17995: LD_INT 23
17997: PUSH
17998: LD_INT 24
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: ST_TO_ADDR
18013: GO 18016
18015: POP
// result := ( chassis in result ) ;
18016: LD_ADDR_VAR 0 3
18020: PUSH
18021: LD_VAR 0 1
18025: PUSH
18026: LD_VAR 0 3
18030: IN
18031: ST_TO_ADDR
// end ;
18032: LD_VAR 0 3
18036: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18037: LD_INT 0
18039: PPUSH
// if not chassis or not weapon then
18040: LD_VAR 0 1
18044: NOT
18045: PUSH
18046: LD_VAR 0 2
18050: NOT
18051: OR
18052: IFFALSE 18056
// exit ;
18054: GO 19082
// case weapon of us_machine_gun :
18056: LD_VAR 0 2
18060: PUSH
18061: LD_INT 2
18063: DOUBLE
18064: EQUAL
18065: IFTRUE 18069
18067: GO 18099
18069: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18070: LD_ADDR_VAR 0 3
18074: PUSH
18075: LD_INT 1
18077: PUSH
18078: LD_INT 2
18080: PUSH
18081: LD_INT 3
18083: PUSH
18084: LD_INT 4
18086: PUSH
18087: LD_INT 5
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: ST_TO_ADDR
18097: GO 19066
18099: LD_INT 3
18101: DOUBLE
18102: EQUAL
18103: IFTRUE 18107
18105: GO 18137
18107: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18108: LD_ADDR_VAR 0 3
18112: PUSH
18113: LD_INT 1
18115: PUSH
18116: LD_INT 2
18118: PUSH
18119: LD_INT 3
18121: PUSH
18122: LD_INT 4
18124: PUSH
18125: LD_INT 5
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: ST_TO_ADDR
18135: GO 19066
18137: LD_INT 11
18139: DOUBLE
18140: EQUAL
18141: IFTRUE 18145
18143: GO 18175
18145: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18146: LD_ADDR_VAR 0 3
18150: PUSH
18151: LD_INT 1
18153: PUSH
18154: LD_INT 2
18156: PUSH
18157: LD_INT 3
18159: PUSH
18160: LD_INT 4
18162: PUSH
18163: LD_INT 5
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: ST_TO_ADDR
18173: GO 19066
18175: LD_INT 4
18177: DOUBLE
18178: EQUAL
18179: IFTRUE 18183
18181: GO 18209
18183: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18184: LD_ADDR_VAR 0 3
18188: PUSH
18189: LD_INT 2
18191: PUSH
18192: LD_INT 3
18194: PUSH
18195: LD_INT 4
18197: PUSH
18198: LD_INT 5
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: ST_TO_ADDR
18207: GO 19066
18209: LD_INT 5
18211: DOUBLE
18212: EQUAL
18213: IFTRUE 18217
18215: GO 18243
18217: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18218: LD_ADDR_VAR 0 3
18222: PUSH
18223: LD_INT 2
18225: PUSH
18226: LD_INT 3
18228: PUSH
18229: LD_INT 4
18231: PUSH
18232: LD_INT 5
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: ST_TO_ADDR
18241: GO 19066
18243: LD_INT 9
18245: DOUBLE
18246: EQUAL
18247: IFTRUE 18251
18249: GO 18277
18251: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18252: LD_ADDR_VAR 0 3
18256: PUSH
18257: LD_INT 2
18259: PUSH
18260: LD_INT 3
18262: PUSH
18263: LD_INT 4
18265: PUSH
18266: LD_INT 5
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: ST_TO_ADDR
18275: GO 19066
18277: LD_INT 7
18279: DOUBLE
18280: EQUAL
18281: IFTRUE 18285
18283: GO 18311
18285: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18286: LD_ADDR_VAR 0 3
18290: PUSH
18291: LD_INT 2
18293: PUSH
18294: LD_INT 3
18296: PUSH
18297: LD_INT 4
18299: PUSH
18300: LD_INT 5
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: ST_TO_ADDR
18309: GO 19066
18311: LD_INT 12
18313: DOUBLE
18314: EQUAL
18315: IFTRUE 18319
18317: GO 18345
18319: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18320: LD_ADDR_VAR 0 3
18324: PUSH
18325: LD_INT 2
18327: PUSH
18328: LD_INT 3
18330: PUSH
18331: LD_INT 4
18333: PUSH
18334: LD_INT 5
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: ST_TO_ADDR
18343: GO 19066
18345: LD_INT 13
18347: DOUBLE
18348: EQUAL
18349: IFTRUE 18353
18351: GO 18379
18353: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18354: LD_ADDR_VAR 0 3
18358: PUSH
18359: LD_INT 2
18361: PUSH
18362: LD_INT 3
18364: PUSH
18365: LD_INT 4
18367: PUSH
18368: LD_INT 5
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: ST_TO_ADDR
18377: GO 19066
18379: LD_INT 14
18381: DOUBLE
18382: EQUAL
18383: IFTRUE 18387
18385: GO 18405
18387: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18388: LD_ADDR_VAR 0 3
18392: PUSH
18393: LD_INT 4
18395: PUSH
18396: LD_INT 5
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: ST_TO_ADDR
18403: GO 19066
18405: LD_INT 6
18407: DOUBLE
18408: EQUAL
18409: IFTRUE 18413
18411: GO 18431
18413: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18414: LD_ADDR_VAR 0 3
18418: PUSH
18419: LD_INT 4
18421: PUSH
18422: LD_INT 5
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: ST_TO_ADDR
18429: GO 19066
18431: LD_INT 10
18433: DOUBLE
18434: EQUAL
18435: IFTRUE 18439
18437: GO 18457
18439: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18440: LD_ADDR_VAR 0 3
18444: PUSH
18445: LD_INT 4
18447: PUSH
18448: LD_INT 5
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: ST_TO_ADDR
18455: GO 19066
18457: LD_INT 22
18459: DOUBLE
18460: EQUAL
18461: IFTRUE 18465
18463: GO 18491
18465: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18466: LD_ADDR_VAR 0 3
18470: PUSH
18471: LD_INT 11
18473: PUSH
18474: LD_INT 12
18476: PUSH
18477: LD_INT 13
18479: PUSH
18480: LD_INT 14
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: ST_TO_ADDR
18489: GO 19066
18491: LD_INT 23
18493: DOUBLE
18494: EQUAL
18495: IFTRUE 18499
18497: GO 18525
18499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18500: LD_ADDR_VAR 0 3
18504: PUSH
18505: LD_INT 11
18507: PUSH
18508: LD_INT 12
18510: PUSH
18511: LD_INT 13
18513: PUSH
18514: LD_INT 14
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: ST_TO_ADDR
18523: GO 19066
18525: LD_INT 24
18527: DOUBLE
18528: EQUAL
18529: IFTRUE 18533
18531: GO 18559
18533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18534: LD_ADDR_VAR 0 3
18538: PUSH
18539: LD_INT 11
18541: PUSH
18542: LD_INT 12
18544: PUSH
18545: LD_INT 13
18547: PUSH
18548: LD_INT 14
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: ST_TO_ADDR
18557: GO 19066
18559: LD_INT 30
18561: DOUBLE
18562: EQUAL
18563: IFTRUE 18567
18565: GO 18593
18567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18568: LD_ADDR_VAR 0 3
18572: PUSH
18573: LD_INT 11
18575: PUSH
18576: LD_INT 12
18578: PUSH
18579: LD_INT 13
18581: PUSH
18582: LD_INT 14
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: ST_TO_ADDR
18591: GO 19066
18593: LD_INT 25
18595: DOUBLE
18596: EQUAL
18597: IFTRUE 18601
18599: GO 18619
18601: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18602: LD_ADDR_VAR 0 3
18606: PUSH
18607: LD_INT 13
18609: PUSH
18610: LD_INT 14
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: ST_TO_ADDR
18617: GO 19066
18619: LD_INT 27
18621: DOUBLE
18622: EQUAL
18623: IFTRUE 18627
18625: GO 18645
18627: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
18628: LD_ADDR_VAR 0 3
18632: PUSH
18633: LD_INT 13
18635: PUSH
18636: LD_INT 14
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: ST_TO_ADDR
18643: GO 19066
18645: LD_INT 28
18647: DOUBLE
18648: EQUAL
18649: IFTRUE 18653
18651: GO 18671
18653: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
18654: LD_ADDR_VAR 0 3
18658: PUSH
18659: LD_INT 13
18661: PUSH
18662: LD_INT 14
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: ST_TO_ADDR
18669: GO 19066
18671: LD_INT 29
18673: DOUBLE
18674: EQUAL
18675: IFTRUE 18679
18677: GO 18697
18679: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
18680: LD_ADDR_VAR 0 3
18684: PUSH
18685: LD_INT 13
18687: PUSH
18688: LD_INT 14
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: ST_TO_ADDR
18695: GO 19066
18697: LD_INT 31
18699: DOUBLE
18700: EQUAL
18701: IFTRUE 18705
18703: GO 18723
18705: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
18706: LD_ADDR_VAR 0 3
18710: PUSH
18711: LD_INT 13
18713: PUSH
18714: LD_INT 14
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: ST_TO_ADDR
18721: GO 19066
18723: LD_INT 26
18725: DOUBLE
18726: EQUAL
18727: IFTRUE 18731
18729: GO 18749
18731: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
18732: LD_ADDR_VAR 0 3
18736: PUSH
18737: LD_INT 13
18739: PUSH
18740: LD_INT 14
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: ST_TO_ADDR
18747: GO 19066
18749: LD_INT 42
18751: DOUBLE
18752: EQUAL
18753: IFTRUE 18757
18755: GO 18783
18757: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
18758: LD_ADDR_VAR 0 3
18762: PUSH
18763: LD_INT 21
18765: PUSH
18766: LD_INT 22
18768: PUSH
18769: LD_INT 23
18771: PUSH
18772: LD_INT 24
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: ST_TO_ADDR
18781: GO 19066
18783: LD_INT 43
18785: DOUBLE
18786: EQUAL
18787: IFTRUE 18791
18789: GO 18817
18791: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
18792: LD_ADDR_VAR 0 3
18796: PUSH
18797: LD_INT 21
18799: PUSH
18800: LD_INT 22
18802: PUSH
18803: LD_INT 23
18805: PUSH
18806: LD_INT 24
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: ST_TO_ADDR
18815: GO 19066
18817: LD_INT 44
18819: DOUBLE
18820: EQUAL
18821: IFTRUE 18825
18823: GO 18851
18825: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
18826: LD_ADDR_VAR 0 3
18830: PUSH
18831: LD_INT 21
18833: PUSH
18834: LD_INT 22
18836: PUSH
18837: LD_INT 23
18839: PUSH
18840: LD_INT 24
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: ST_TO_ADDR
18849: GO 19066
18851: LD_INT 45
18853: DOUBLE
18854: EQUAL
18855: IFTRUE 18859
18857: GO 18885
18859: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
18860: LD_ADDR_VAR 0 3
18864: PUSH
18865: LD_INT 21
18867: PUSH
18868: LD_INT 22
18870: PUSH
18871: LD_INT 23
18873: PUSH
18874: LD_INT 24
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: ST_TO_ADDR
18883: GO 19066
18885: LD_INT 49
18887: DOUBLE
18888: EQUAL
18889: IFTRUE 18893
18891: GO 18919
18893: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
18894: LD_ADDR_VAR 0 3
18898: PUSH
18899: LD_INT 21
18901: PUSH
18902: LD_INT 22
18904: PUSH
18905: LD_INT 23
18907: PUSH
18908: LD_INT 24
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: ST_TO_ADDR
18917: GO 19066
18919: LD_INT 51
18921: DOUBLE
18922: EQUAL
18923: IFTRUE 18927
18925: GO 18953
18927: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
18928: LD_ADDR_VAR 0 3
18932: PUSH
18933: LD_INT 21
18935: PUSH
18936: LD_INT 22
18938: PUSH
18939: LD_INT 23
18941: PUSH
18942: LD_INT 24
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: ST_TO_ADDR
18951: GO 19066
18953: LD_INT 52
18955: DOUBLE
18956: EQUAL
18957: IFTRUE 18961
18959: GO 18987
18961: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
18962: LD_ADDR_VAR 0 3
18966: PUSH
18967: LD_INT 21
18969: PUSH
18970: LD_INT 22
18972: PUSH
18973: LD_INT 23
18975: PUSH
18976: LD_INT 24
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: ST_TO_ADDR
18985: GO 19066
18987: LD_INT 53
18989: DOUBLE
18990: EQUAL
18991: IFTRUE 18995
18993: GO 19013
18995: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
18996: LD_ADDR_VAR 0 3
19000: PUSH
19001: LD_INT 23
19003: PUSH
19004: LD_INT 24
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: ST_TO_ADDR
19011: GO 19066
19013: LD_INT 46
19015: DOUBLE
19016: EQUAL
19017: IFTRUE 19021
19019: GO 19039
19021: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19022: LD_ADDR_VAR 0 3
19026: PUSH
19027: LD_INT 23
19029: PUSH
19030: LD_INT 24
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: ST_TO_ADDR
19037: GO 19066
19039: LD_INT 47
19041: DOUBLE
19042: EQUAL
19043: IFTRUE 19047
19045: GO 19065
19047: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19048: LD_ADDR_VAR 0 3
19052: PUSH
19053: LD_INT 23
19055: PUSH
19056: LD_INT 24
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: ST_TO_ADDR
19063: GO 19066
19065: POP
// result := ( chassis in result ) ;
19066: LD_ADDR_VAR 0 3
19070: PUSH
19071: LD_VAR 0 1
19075: PUSH
19076: LD_VAR 0 3
19080: IN
19081: ST_TO_ADDR
// end ;
19082: LD_VAR 0 3
19086: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19087: LD_INT 0
19089: PPUSH
19090: PPUSH
19091: PPUSH
19092: PPUSH
19093: PPUSH
19094: PPUSH
19095: PPUSH
// result := array ;
19096: LD_ADDR_VAR 0 5
19100: PUSH
19101: LD_VAR 0 1
19105: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19106: LD_VAR 0 1
19110: NOT
19111: PUSH
19112: LD_VAR 0 2
19116: NOT
19117: OR
19118: PUSH
19119: LD_VAR 0 3
19123: NOT
19124: OR
19125: PUSH
19126: LD_VAR 0 2
19130: PUSH
19131: LD_VAR 0 1
19135: GREATER
19136: OR
19137: PUSH
19138: LD_VAR 0 3
19142: PUSH
19143: LD_VAR 0 1
19147: GREATER
19148: OR
19149: IFFALSE 19153
// exit ;
19151: GO 19449
// if direction then
19153: LD_VAR 0 4
19157: IFFALSE 19221
// begin d := 1 ;
19159: LD_ADDR_VAR 0 9
19163: PUSH
19164: LD_INT 1
19166: ST_TO_ADDR
// if i_from > i_to then
19167: LD_VAR 0 2
19171: PUSH
19172: LD_VAR 0 3
19176: GREATER
19177: IFFALSE 19203
// length := ( array - i_from ) + i_to else
19179: LD_ADDR_VAR 0 11
19183: PUSH
19184: LD_VAR 0 1
19188: PUSH
19189: LD_VAR 0 2
19193: MINUS
19194: PUSH
19195: LD_VAR 0 3
19199: PLUS
19200: ST_TO_ADDR
19201: GO 19219
// length := i_to - i_from ;
19203: LD_ADDR_VAR 0 11
19207: PUSH
19208: LD_VAR 0 3
19212: PUSH
19213: LD_VAR 0 2
19217: MINUS
19218: ST_TO_ADDR
// end else
19219: GO 19282
// begin d := - 1 ;
19221: LD_ADDR_VAR 0 9
19225: PUSH
19226: LD_INT 1
19228: NEG
19229: ST_TO_ADDR
// if i_from > i_to then
19230: LD_VAR 0 2
19234: PUSH
19235: LD_VAR 0 3
19239: GREATER
19240: IFFALSE 19260
// length := i_from - i_to else
19242: LD_ADDR_VAR 0 11
19246: PUSH
19247: LD_VAR 0 2
19251: PUSH
19252: LD_VAR 0 3
19256: MINUS
19257: ST_TO_ADDR
19258: GO 19282
// length := ( array - i_to ) + i_from ;
19260: LD_ADDR_VAR 0 11
19264: PUSH
19265: LD_VAR 0 1
19269: PUSH
19270: LD_VAR 0 3
19274: MINUS
19275: PUSH
19276: LD_VAR 0 2
19280: PLUS
19281: ST_TO_ADDR
// end ; if not length then
19282: LD_VAR 0 11
19286: NOT
19287: IFFALSE 19291
// exit ;
19289: GO 19449
// tmp := array ;
19291: LD_ADDR_VAR 0 10
19295: PUSH
19296: LD_VAR 0 1
19300: ST_TO_ADDR
// for i = 1 to length do
19301: LD_ADDR_VAR 0 6
19305: PUSH
19306: DOUBLE
19307: LD_INT 1
19309: DEC
19310: ST_TO_ADDR
19311: LD_VAR 0 11
19315: PUSH
19316: FOR_TO
19317: IFFALSE 19437
// begin for j = 1 to array do
19319: LD_ADDR_VAR 0 7
19323: PUSH
19324: DOUBLE
19325: LD_INT 1
19327: DEC
19328: ST_TO_ADDR
19329: LD_VAR 0 1
19333: PUSH
19334: FOR_TO
19335: IFFALSE 19423
// begin k := j + d ;
19337: LD_ADDR_VAR 0 8
19341: PUSH
19342: LD_VAR 0 7
19346: PUSH
19347: LD_VAR 0 9
19351: PLUS
19352: ST_TO_ADDR
// if k > array then
19353: LD_VAR 0 8
19357: PUSH
19358: LD_VAR 0 1
19362: GREATER
19363: IFFALSE 19373
// k := 1 ;
19365: LD_ADDR_VAR 0 8
19369: PUSH
19370: LD_INT 1
19372: ST_TO_ADDR
// if not k then
19373: LD_VAR 0 8
19377: NOT
19378: IFFALSE 19390
// k := array ;
19380: LD_ADDR_VAR 0 8
19384: PUSH
19385: LD_VAR 0 1
19389: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19390: LD_ADDR_VAR 0 10
19394: PUSH
19395: LD_VAR 0 10
19399: PPUSH
19400: LD_VAR 0 8
19404: PPUSH
19405: LD_VAR 0 1
19409: PUSH
19410: LD_VAR 0 7
19414: ARRAY
19415: PPUSH
19416: CALL_OW 1
19420: ST_TO_ADDR
// end ;
19421: GO 19334
19423: POP
19424: POP
// array := tmp ;
19425: LD_ADDR_VAR 0 1
19429: PUSH
19430: LD_VAR 0 10
19434: ST_TO_ADDR
// end ;
19435: GO 19316
19437: POP
19438: POP
// result := array ;
19439: LD_ADDR_VAR 0 5
19443: PUSH
19444: LD_VAR 0 1
19448: ST_TO_ADDR
// end ;
19449: LD_VAR 0 5
19453: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19454: LD_INT 0
19456: PPUSH
19457: PPUSH
// result := 0 ;
19458: LD_ADDR_VAR 0 3
19462: PUSH
19463: LD_INT 0
19465: ST_TO_ADDR
// if not array or not value in array then
19466: LD_VAR 0 1
19470: NOT
19471: PUSH
19472: LD_VAR 0 2
19476: PUSH
19477: LD_VAR 0 1
19481: IN
19482: NOT
19483: OR
19484: IFFALSE 19488
// exit ;
19486: GO 19542
// for i = 1 to array do
19488: LD_ADDR_VAR 0 4
19492: PUSH
19493: DOUBLE
19494: LD_INT 1
19496: DEC
19497: ST_TO_ADDR
19498: LD_VAR 0 1
19502: PUSH
19503: FOR_TO
19504: IFFALSE 19540
// if value = array [ i ] then
19506: LD_VAR 0 2
19510: PUSH
19511: LD_VAR 0 1
19515: PUSH
19516: LD_VAR 0 4
19520: ARRAY
19521: EQUAL
19522: IFFALSE 19538
// begin result := i ;
19524: LD_ADDR_VAR 0 3
19528: PUSH
19529: LD_VAR 0 4
19533: ST_TO_ADDR
// exit ;
19534: POP
19535: POP
19536: GO 19542
// end ;
19538: GO 19503
19540: POP
19541: POP
// end ;
19542: LD_VAR 0 3
19546: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19547: LD_INT 0
19549: PPUSH
// vc_chassis := chassis ;
19550: LD_ADDR_OWVAR 37
19554: PUSH
19555: LD_VAR 0 1
19559: ST_TO_ADDR
// vc_engine := engine ;
19560: LD_ADDR_OWVAR 39
19564: PUSH
19565: LD_VAR 0 2
19569: ST_TO_ADDR
// vc_control := control ;
19570: LD_ADDR_OWVAR 38
19574: PUSH
19575: LD_VAR 0 3
19579: ST_TO_ADDR
// vc_weapon := weapon ;
19580: LD_ADDR_OWVAR 40
19584: PUSH
19585: LD_VAR 0 4
19589: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19590: LD_ADDR_OWVAR 41
19594: PUSH
19595: LD_VAR 0 5
19599: ST_TO_ADDR
// end ;
19600: LD_VAR 0 6
19604: RET
// export function WantPlant ( unit ) ; var task ; begin
19605: LD_INT 0
19607: PPUSH
19608: PPUSH
// result := false ;
19609: LD_ADDR_VAR 0 2
19613: PUSH
19614: LD_INT 0
19616: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
19617: LD_ADDR_VAR 0 3
19621: PUSH
19622: LD_VAR 0 1
19626: PPUSH
19627: CALL_OW 437
19631: ST_TO_ADDR
// if task then
19632: LD_VAR 0 3
19636: IFFALSE 19664
// if task [ 1 ] [ 1 ] = p then
19638: LD_VAR 0 3
19642: PUSH
19643: LD_INT 1
19645: ARRAY
19646: PUSH
19647: LD_INT 1
19649: ARRAY
19650: PUSH
19651: LD_STRING p
19653: EQUAL
19654: IFFALSE 19664
// result := true ;
19656: LD_ADDR_VAR 0 2
19660: PUSH
19661: LD_INT 1
19663: ST_TO_ADDR
// end ;
19664: LD_VAR 0 2
19668: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
19669: LD_INT 0
19671: PPUSH
19672: PPUSH
19673: PPUSH
19674: PPUSH
// if pos < 1 then
19675: LD_VAR 0 2
19679: PUSH
19680: LD_INT 1
19682: LESS
19683: IFFALSE 19687
// exit ;
19685: GO 19990
// if pos = 1 then
19687: LD_VAR 0 2
19691: PUSH
19692: LD_INT 1
19694: EQUAL
19695: IFFALSE 19728
// result := Replace ( arr , pos [ 1 ] , value ) else
19697: LD_ADDR_VAR 0 4
19701: PUSH
19702: LD_VAR 0 1
19706: PPUSH
19707: LD_VAR 0 2
19711: PUSH
19712: LD_INT 1
19714: ARRAY
19715: PPUSH
19716: LD_VAR 0 3
19720: PPUSH
19721: CALL_OW 1
19725: ST_TO_ADDR
19726: GO 19990
// begin tmp := arr ;
19728: LD_ADDR_VAR 0 6
19732: PUSH
19733: LD_VAR 0 1
19737: ST_TO_ADDR
// s_arr := [ tmp ] ;
19738: LD_ADDR_VAR 0 7
19742: PUSH
19743: LD_VAR 0 6
19747: PUSH
19748: EMPTY
19749: LIST
19750: ST_TO_ADDR
// for i = 1 to pos - 1 do
19751: LD_ADDR_VAR 0 5
19755: PUSH
19756: DOUBLE
19757: LD_INT 1
19759: DEC
19760: ST_TO_ADDR
19761: LD_VAR 0 2
19765: PUSH
19766: LD_INT 1
19768: MINUS
19769: PUSH
19770: FOR_TO
19771: IFFALSE 19816
// begin tmp := tmp [ pos [ i ] ] ;
19773: LD_ADDR_VAR 0 6
19777: PUSH
19778: LD_VAR 0 6
19782: PUSH
19783: LD_VAR 0 2
19787: PUSH
19788: LD_VAR 0 5
19792: ARRAY
19793: ARRAY
19794: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
19795: LD_ADDR_VAR 0 7
19799: PUSH
19800: LD_VAR 0 7
19804: PUSH
19805: LD_VAR 0 6
19809: PUSH
19810: EMPTY
19811: LIST
19812: ADD
19813: ST_TO_ADDR
// end ;
19814: GO 19770
19816: POP
19817: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
19818: LD_ADDR_VAR 0 6
19822: PUSH
19823: LD_VAR 0 6
19827: PPUSH
19828: LD_VAR 0 2
19832: PUSH
19833: LD_VAR 0 2
19837: ARRAY
19838: PPUSH
19839: LD_VAR 0 3
19843: PPUSH
19844: CALL_OW 1
19848: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
19849: LD_ADDR_VAR 0 7
19853: PUSH
19854: LD_VAR 0 7
19858: PPUSH
19859: LD_VAR 0 7
19863: PPUSH
19864: LD_VAR 0 6
19868: PPUSH
19869: CALL_OW 1
19873: ST_TO_ADDR
// for i = s_arr downto 2 do
19874: LD_ADDR_VAR 0 5
19878: PUSH
19879: DOUBLE
19880: LD_VAR 0 7
19884: INC
19885: ST_TO_ADDR
19886: LD_INT 2
19888: PUSH
19889: FOR_DOWNTO
19890: IFFALSE 19974
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
19892: LD_ADDR_VAR 0 6
19896: PUSH
19897: LD_VAR 0 7
19901: PUSH
19902: LD_VAR 0 5
19906: PUSH
19907: LD_INT 1
19909: MINUS
19910: ARRAY
19911: PPUSH
19912: LD_VAR 0 2
19916: PUSH
19917: LD_VAR 0 5
19921: PUSH
19922: LD_INT 1
19924: MINUS
19925: ARRAY
19926: PPUSH
19927: LD_VAR 0 7
19931: PUSH
19932: LD_VAR 0 5
19936: ARRAY
19937: PPUSH
19938: CALL_OW 1
19942: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
19943: LD_ADDR_VAR 0 7
19947: PUSH
19948: LD_VAR 0 7
19952: PPUSH
19953: LD_VAR 0 5
19957: PUSH
19958: LD_INT 1
19960: MINUS
19961: PPUSH
19962: LD_VAR 0 6
19966: PPUSH
19967: CALL_OW 1
19971: ST_TO_ADDR
// end ;
19972: GO 19889
19974: POP
19975: POP
// result := s_arr [ 1 ] ;
19976: LD_ADDR_VAR 0 4
19980: PUSH
19981: LD_VAR 0 7
19985: PUSH
19986: LD_INT 1
19988: ARRAY
19989: ST_TO_ADDR
// end ; end ;
19990: LD_VAR 0 4
19994: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
19995: LD_INT 0
19997: PPUSH
19998: PPUSH
// if not list then
19999: LD_VAR 0 1
20003: NOT
20004: IFFALSE 20008
// exit ;
20006: GO 20099
// i := list [ pos1 ] ;
20008: LD_ADDR_VAR 0 5
20012: PUSH
20013: LD_VAR 0 1
20017: PUSH
20018: LD_VAR 0 2
20022: ARRAY
20023: ST_TO_ADDR
// if not i then
20024: LD_VAR 0 5
20028: NOT
20029: IFFALSE 20033
// exit ;
20031: GO 20099
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20033: LD_ADDR_VAR 0 1
20037: PUSH
20038: LD_VAR 0 1
20042: PPUSH
20043: LD_VAR 0 2
20047: PPUSH
20048: LD_VAR 0 1
20052: PUSH
20053: LD_VAR 0 3
20057: ARRAY
20058: PPUSH
20059: CALL_OW 1
20063: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20064: LD_ADDR_VAR 0 1
20068: PUSH
20069: LD_VAR 0 1
20073: PPUSH
20074: LD_VAR 0 3
20078: PPUSH
20079: LD_VAR 0 5
20083: PPUSH
20084: CALL_OW 1
20088: ST_TO_ADDR
// result := list ;
20089: LD_ADDR_VAR 0 4
20093: PUSH
20094: LD_VAR 0 1
20098: ST_TO_ADDR
// end ;
20099: LD_VAR 0 4
20103: RET
// export function Add ( list , pos , val ) ; begin
20104: LD_INT 0
20106: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
20107: LD_ADDR_VAR 0 4
20111: PUSH
20112: LD_VAR 0 1
20116: PPUSH
20117: LD_VAR 0 2
20121: PPUSH
20122: LD_VAR 0 3
20126: PPUSH
20127: CALL 19669 0 3
20131: ST_TO_ADDR
20132: LD_VAR 0 4
20136: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20137: LD_INT 0
20139: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20140: LD_ADDR_VAR 0 5
20144: PUSH
20145: LD_VAR 0 1
20149: PPUSH
20150: CALL_OW 250
20154: PPUSH
20155: LD_VAR 0 1
20159: PPUSH
20160: CALL_OW 251
20164: PPUSH
20165: LD_VAR 0 2
20169: PPUSH
20170: LD_VAR 0 3
20174: PPUSH
20175: LD_VAR 0 4
20179: PPUSH
20180: CALL 20190 0 5
20184: ST_TO_ADDR
// end ;
20185: LD_VAR 0 5
20189: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20190: LD_INT 0
20192: PPUSH
20193: PPUSH
20194: PPUSH
20195: PPUSH
// if not list then
20196: LD_VAR 0 3
20200: NOT
20201: IFFALSE 20205
// exit ;
20203: GO 20593
// result := [ ] ;
20205: LD_ADDR_VAR 0 6
20209: PUSH
20210: EMPTY
20211: ST_TO_ADDR
// for i in list do
20212: LD_ADDR_VAR 0 7
20216: PUSH
20217: LD_VAR 0 3
20221: PUSH
20222: FOR_IN
20223: IFFALSE 20425
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20225: LD_ADDR_VAR 0 9
20229: PUSH
20230: LD_VAR 0 7
20234: PPUSH
20235: LD_VAR 0 1
20239: PPUSH
20240: LD_VAR 0 2
20244: PPUSH
20245: CALL_OW 297
20249: ST_TO_ADDR
// if not result then
20250: LD_VAR 0 6
20254: NOT
20255: IFFALSE 20281
// result := [ [ i , tmp ] ] else
20257: LD_ADDR_VAR 0 6
20261: PUSH
20262: LD_VAR 0 7
20266: PUSH
20267: LD_VAR 0 9
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: EMPTY
20277: LIST
20278: ST_TO_ADDR
20279: GO 20423
// begin if result [ result ] [ 2 ] < tmp then
20281: LD_VAR 0 6
20285: PUSH
20286: LD_VAR 0 6
20290: ARRAY
20291: PUSH
20292: LD_INT 2
20294: ARRAY
20295: PUSH
20296: LD_VAR 0 9
20300: LESS
20301: IFFALSE 20343
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20303: LD_ADDR_VAR 0 6
20307: PUSH
20308: LD_VAR 0 6
20312: PPUSH
20313: LD_VAR 0 6
20317: PUSH
20318: LD_INT 1
20320: PLUS
20321: PPUSH
20322: LD_VAR 0 7
20326: PUSH
20327: LD_VAR 0 9
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PPUSH
20336: CALL_OW 2
20340: ST_TO_ADDR
20341: GO 20423
// for j = 1 to result do
20343: LD_ADDR_VAR 0 8
20347: PUSH
20348: DOUBLE
20349: LD_INT 1
20351: DEC
20352: ST_TO_ADDR
20353: LD_VAR 0 6
20357: PUSH
20358: FOR_TO
20359: IFFALSE 20421
// begin if tmp < result [ j ] [ 2 ] then
20361: LD_VAR 0 9
20365: PUSH
20366: LD_VAR 0 6
20370: PUSH
20371: LD_VAR 0 8
20375: ARRAY
20376: PUSH
20377: LD_INT 2
20379: ARRAY
20380: LESS
20381: IFFALSE 20419
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20383: LD_ADDR_VAR 0 6
20387: PUSH
20388: LD_VAR 0 6
20392: PPUSH
20393: LD_VAR 0 8
20397: PPUSH
20398: LD_VAR 0 7
20402: PUSH
20403: LD_VAR 0 9
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PPUSH
20412: CALL_OW 2
20416: ST_TO_ADDR
// break ;
20417: GO 20421
// end ; end ;
20419: GO 20358
20421: POP
20422: POP
// end ; end ;
20423: GO 20222
20425: POP
20426: POP
// if result and not asc then
20427: LD_VAR 0 6
20431: PUSH
20432: LD_VAR 0 4
20436: NOT
20437: AND
20438: IFFALSE 20513
// begin tmp := result ;
20440: LD_ADDR_VAR 0 9
20444: PUSH
20445: LD_VAR 0 6
20449: ST_TO_ADDR
// for i = tmp downto 1 do
20450: LD_ADDR_VAR 0 7
20454: PUSH
20455: DOUBLE
20456: LD_VAR 0 9
20460: INC
20461: ST_TO_ADDR
20462: LD_INT 1
20464: PUSH
20465: FOR_DOWNTO
20466: IFFALSE 20511
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
20468: LD_ADDR_VAR 0 6
20472: PUSH
20473: LD_VAR 0 6
20477: PPUSH
20478: LD_VAR 0 9
20482: PUSH
20483: LD_VAR 0 7
20487: MINUS
20488: PUSH
20489: LD_INT 1
20491: PLUS
20492: PPUSH
20493: LD_VAR 0 9
20497: PUSH
20498: LD_VAR 0 7
20502: ARRAY
20503: PPUSH
20504: CALL_OW 1
20508: ST_TO_ADDR
20509: GO 20465
20511: POP
20512: POP
// end ; tmp := [ ] ;
20513: LD_ADDR_VAR 0 9
20517: PUSH
20518: EMPTY
20519: ST_TO_ADDR
// if mode then
20520: LD_VAR 0 5
20524: IFFALSE 20593
// begin for i = 1 to result do
20526: LD_ADDR_VAR 0 7
20530: PUSH
20531: DOUBLE
20532: LD_INT 1
20534: DEC
20535: ST_TO_ADDR
20536: LD_VAR 0 6
20540: PUSH
20541: FOR_TO
20542: IFFALSE 20581
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
20544: LD_ADDR_VAR 0 9
20548: PUSH
20549: LD_VAR 0 9
20553: PPUSH
20554: LD_VAR 0 7
20558: PPUSH
20559: LD_VAR 0 6
20563: PUSH
20564: LD_VAR 0 7
20568: ARRAY
20569: PUSH
20570: LD_INT 1
20572: ARRAY
20573: PPUSH
20574: CALL_OW 1
20578: ST_TO_ADDR
20579: GO 20541
20581: POP
20582: POP
// result := tmp ;
20583: LD_ADDR_VAR 0 6
20587: PUSH
20588: LD_VAR 0 9
20592: ST_TO_ADDR
// end ; end ;
20593: LD_VAR 0 6
20597: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
20598: LD_INT 0
20600: PPUSH
20601: PPUSH
20602: PPUSH
20603: PPUSH
20604: PPUSH
20605: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
20606: LD_ADDR_VAR 0 5
20610: PUSH
20611: LD_INT 0
20613: PUSH
20614: LD_INT 0
20616: PUSH
20617: LD_INT 0
20619: PUSH
20620: EMPTY
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: ST_TO_ADDR
// if not x or not y then
20628: LD_VAR 0 2
20632: NOT
20633: PUSH
20634: LD_VAR 0 3
20638: NOT
20639: OR
20640: IFFALSE 20644
// exit ;
20642: GO 22290
// if not range then
20644: LD_VAR 0 4
20648: NOT
20649: IFFALSE 20659
// range := 10 ;
20651: LD_ADDR_VAR 0 4
20655: PUSH
20656: LD_INT 10
20658: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20659: LD_ADDR_VAR 0 8
20663: PUSH
20664: LD_INT 81
20666: PUSH
20667: LD_VAR 0 1
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 92
20678: PUSH
20679: LD_VAR 0 2
20683: PUSH
20684: LD_VAR 0 3
20688: PUSH
20689: LD_VAR 0 4
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 3
20702: PUSH
20703: LD_INT 21
20705: PUSH
20706: LD_INT 3
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: LIST
20721: PPUSH
20722: CALL_OW 69
20726: ST_TO_ADDR
// if not tmp then
20727: LD_VAR 0 8
20731: NOT
20732: IFFALSE 20736
// exit ;
20734: GO 22290
// for i in tmp do
20736: LD_ADDR_VAR 0 6
20740: PUSH
20741: LD_VAR 0 8
20745: PUSH
20746: FOR_IN
20747: IFFALSE 22265
// begin points := [ 0 , 0 , 0 ] ;
20749: LD_ADDR_VAR 0 9
20753: PUSH
20754: LD_INT 0
20756: PUSH
20757: LD_INT 0
20759: PUSH
20760: LD_INT 0
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: LIST
20767: ST_TO_ADDR
// bpoints := 1 ;
20768: LD_ADDR_VAR 0 10
20772: PUSH
20773: LD_INT 1
20775: ST_TO_ADDR
// case GetType ( i ) of unit_human :
20776: LD_VAR 0 6
20780: PPUSH
20781: CALL_OW 247
20785: PUSH
20786: LD_INT 1
20788: DOUBLE
20789: EQUAL
20790: IFTRUE 20794
20792: GO 21372
20794: POP
// begin if GetClass ( i ) = 1 then
20795: LD_VAR 0 6
20799: PPUSH
20800: CALL_OW 257
20804: PUSH
20805: LD_INT 1
20807: EQUAL
20808: IFFALSE 20829
// points := [ 10 , 5 , 3 ] ;
20810: LD_ADDR_VAR 0 9
20814: PUSH
20815: LD_INT 10
20817: PUSH
20818: LD_INT 5
20820: PUSH
20821: LD_INT 3
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: LIST
20828: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
20829: LD_VAR 0 6
20833: PPUSH
20834: CALL_OW 257
20838: PUSH
20839: LD_INT 2
20841: PUSH
20842: LD_INT 3
20844: PUSH
20845: LD_INT 4
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: LIST
20852: IN
20853: IFFALSE 20874
// points := [ 3 , 2 , 1 ] ;
20855: LD_ADDR_VAR 0 9
20859: PUSH
20860: LD_INT 3
20862: PUSH
20863: LD_INT 2
20865: PUSH
20866: LD_INT 1
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: LIST
20873: ST_TO_ADDR
// if GetClass ( i ) = 5 then
20874: LD_VAR 0 6
20878: PPUSH
20879: CALL_OW 257
20883: PUSH
20884: LD_INT 5
20886: EQUAL
20887: IFFALSE 20908
// points := [ 130 , 5 , 2 ] ;
20889: LD_ADDR_VAR 0 9
20893: PUSH
20894: LD_INT 130
20896: PUSH
20897: LD_INT 5
20899: PUSH
20900: LD_INT 2
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: LIST
20907: ST_TO_ADDR
// if GetClass ( i ) = 8 then
20908: LD_VAR 0 6
20912: PPUSH
20913: CALL_OW 257
20917: PUSH
20918: LD_INT 8
20920: EQUAL
20921: IFFALSE 20942
// points := [ 35 , 35 , 30 ] ;
20923: LD_ADDR_VAR 0 9
20927: PUSH
20928: LD_INT 35
20930: PUSH
20931: LD_INT 35
20933: PUSH
20934: LD_INT 30
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: ST_TO_ADDR
// if GetClass ( i ) = 9 then
20942: LD_VAR 0 6
20946: PPUSH
20947: CALL_OW 257
20951: PUSH
20952: LD_INT 9
20954: EQUAL
20955: IFFALSE 20976
// points := [ 20 , 55 , 40 ] ;
20957: LD_ADDR_VAR 0 9
20961: PUSH
20962: LD_INT 20
20964: PUSH
20965: LD_INT 55
20967: PUSH
20968: LD_INT 40
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: LIST
20975: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
20976: LD_VAR 0 6
20980: PPUSH
20981: CALL_OW 257
20985: PUSH
20986: LD_INT 12
20988: PUSH
20989: LD_INT 16
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: IN
20996: IFFALSE 21017
// points := [ 5 , 3 , 2 ] ;
20998: LD_ADDR_VAR 0 9
21002: PUSH
21003: LD_INT 5
21005: PUSH
21006: LD_INT 3
21008: PUSH
21009: LD_INT 2
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: LIST
21016: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21017: LD_VAR 0 6
21021: PPUSH
21022: CALL_OW 257
21026: PUSH
21027: LD_INT 17
21029: EQUAL
21030: IFFALSE 21051
// points := [ 100 , 50 , 75 ] ;
21032: LD_ADDR_VAR 0 9
21036: PUSH
21037: LD_INT 100
21039: PUSH
21040: LD_INT 50
21042: PUSH
21043: LD_INT 75
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: LIST
21050: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21051: LD_VAR 0 6
21055: PPUSH
21056: CALL_OW 257
21060: PUSH
21061: LD_INT 15
21063: EQUAL
21064: IFFALSE 21085
// points := [ 10 , 5 , 3 ] ;
21066: LD_ADDR_VAR 0 9
21070: PUSH
21071: LD_INT 10
21073: PUSH
21074: LD_INT 5
21076: PUSH
21077: LD_INT 3
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: LIST
21084: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21085: LD_VAR 0 6
21089: PPUSH
21090: CALL_OW 257
21094: PUSH
21095: LD_INT 14
21097: EQUAL
21098: IFFALSE 21119
// points := [ 10 , 0 , 0 ] ;
21100: LD_ADDR_VAR 0 9
21104: PUSH
21105: LD_INT 10
21107: PUSH
21108: LD_INT 0
21110: PUSH
21111: LD_INT 0
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: LIST
21118: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21119: LD_VAR 0 6
21123: PPUSH
21124: CALL_OW 257
21128: PUSH
21129: LD_INT 11
21131: EQUAL
21132: IFFALSE 21153
// points := [ 30 , 10 , 5 ] ;
21134: LD_ADDR_VAR 0 9
21138: PUSH
21139: LD_INT 30
21141: PUSH
21142: LD_INT 10
21144: PUSH
21145: LD_INT 5
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: LIST
21152: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21153: LD_VAR 0 1
21157: PPUSH
21158: LD_INT 5
21160: PPUSH
21161: CALL_OW 321
21165: PUSH
21166: LD_INT 2
21168: EQUAL
21169: IFFALSE 21186
// bpoints := bpoints * 1.8 ;
21171: LD_ADDR_VAR 0 10
21175: PUSH
21176: LD_VAR 0 10
21180: PUSH
21181: LD_REAL  1.80000000000000E+0000
21184: MUL
21185: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21186: LD_VAR 0 6
21190: PPUSH
21191: CALL_OW 257
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: LD_INT 2
21201: PUSH
21202: LD_INT 3
21204: PUSH
21205: LD_INT 4
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: IN
21214: PUSH
21215: LD_VAR 0 1
21219: PPUSH
21220: LD_INT 51
21222: PPUSH
21223: CALL_OW 321
21227: PUSH
21228: LD_INT 2
21230: EQUAL
21231: AND
21232: IFFALSE 21249
// bpoints := bpoints * 1.2 ;
21234: LD_ADDR_VAR 0 10
21238: PUSH
21239: LD_VAR 0 10
21243: PUSH
21244: LD_REAL  1.20000000000000E+0000
21247: MUL
21248: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21249: LD_VAR 0 6
21253: PPUSH
21254: CALL_OW 257
21258: PUSH
21259: LD_INT 5
21261: PUSH
21262: LD_INT 7
21264: PUSH
21265: LD_INT 9
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: LIST
21272: IN
21273: PUSH
21274: LD_VAR 0 1
21278: PPUSH
21279: LD_INT 52
21281: PPUSH
21282: CALL_OW 321
21286: PUSH
21287: LD_INT 2
21289: EQUAL
21290: AND
21291: IFFALSE 21308
// bpoints := bpoints * 1.5 ;
21293: LD_ADDR_VAR 0 10
21297: PUSH
21298: LD_VAR 0 10
21302: PUSH
21303: LD_REAL  1.50000000000000E+0000
21306: MUL
21307: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21308: LD_VAR 0 1
21312: PPUSH
21313: LD_INT 66
21315: PPUSH
21316: CALL_OW 321
21320: PUSH
21321: LD_INT 2
21323: EQUAL
21324: IFFALSE 21341
// bpoints := bpoints * 1.1 ;
21326: LD_ADDR_VAR 0 10
21330: PUSH
21331: LD_VAR 0 10
21335: PUSH
21336: LD_REAL  1.10000000000000E+0000
21339: MUL
21340: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21341: LD_ADDR_VAR 0 10
21345: PUSH
21346: LD_VAR 0 10
21350: PUSH
21351: LD_VAR 0 6
21355: PPUSH
21356: LD_INT 1
21358: PPUSH
21359: CALL_OW 259
21363: PUSH
21364: LD_REAL  1.15000000000000E+0000
21367: MUL
21368: MUL
21369: ST_TO_ADDR
// end ; unit_vehicle :
21370: GO 22194
21372: LD_INT 2
21374: DOUBLE
21375: EQUAL
21376: IFTRUE 21380
21378: GO 22182
21380: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21381: LD_VAR 0 6
21385: PPUSH
21386: CALL_OW 264
21390: PUSH
21391: LD_INT 2
21393: PUSH
21394: LD_INT 42
21396: PUSH
21397: LD_INT 24
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: LIST
21404: IN
21405: IFFALSE 21426
// points := [ 25 , 5 , 3 ] ;
21407: LD_ADDR_VAR 0 9
21411: PUSH
21412: LD_INT 25
21414: PUSH
21415: LD_INT 5
21417: PUSH
21418: LD_INT 3
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: LIST
21425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
21426: LD_VAR 0 6
21430: PPUSH
21431: CALL_OW 264
21435: PUSH
21436: LD_INT 4
21438: PUSH
21439: LD_INT 43
21441: PUSH
21442: LD_INT 25
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: LIST
21449: IN
21450: IFFALSE 21471
// points := [ 40 , 15 , 5 ] ;
21452: LD_ADDR_VAR 0 9
21456: PUSH
21457: LD_INT 40
21459: PUSH
21460: LD_INT 15
21462: PUSH
21463: LD_INT 5
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: LIST
21470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
21471: LD_VAR 0 6
21475: PPUSH
21476: CALL_OW 264
21480: PUSH
21481: LD_INT 3
21483: PUSH
21484: LD_INT 23
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: IN
21491: IFFALSE 21512
// points := [ 7 , 25 , 8 ] ;
21493: LD_ADDR_VAR 0 9
21497: PUSH
21498: LD_INT 7
21500: PUSH
21501: LD_INT 25
21503: PUSH
21504: LD_INT 8
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: LIST
21511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
21512: LD_VAR 0 6
21516: PPUSH
21517: CALL_OW 264
21521: PUSH
21522: LD_INT 5
21524: PUSH
21525: LD_INT 27
21527: PUSH
21528: LD_INT 44
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: LIST
21535: IN
21536: IFFALSE 21557
// points := [ 14 , 50 , 16 ] ;
21538: LD_ADDR_VAR 0 9
21542: PUSH
21543: LD_INT 14
21545: PUSH
21546: LD_INT 50
21548: PUSH
21549: LD_INT 16
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: LIST
21556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
21557: LD_VAR 0 6
21561: PPUSH
21562: CALL_OW 264
21566: PUSH
21567: LD_INT 6
21569: PUSH
21570: LD_INT 46
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: IN
21577: IFFALSE 21598
// points := [ 32 , 120 , 70 ] ;
21579: LD_ADDR_VAR 0 9
21583: PUSH
21584: LD_INT 32
21586: PUSH
21587: LD_INT 120
21589: PUSH
21590: LD_INT 70
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: LIST
21597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
21598: LD_VAR 0 6
21602: PPUSH
21603: CALL_OW 264
21607: PUSH
21608: LD_INT 7
21610: PUSH
21611: LD_INT 28
21613: PUSH
21614: LD_INT 45
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: LIST
21621: IN
21622: IFFALSE 21643
// points := [ 35 , 20 , 45 ] ;
21624: LD_ADDR_VAR 0 9
21628: PUSH
21629: LD_INT 35
21631: PUSH
21632: LD_INT 20
21634: PUSH
21635: LD_INT 45
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: LIST
21642: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
21643: LD_VAR 0 6
21647: PPUSH
21648: CALL_OW 264
21652: PUSH
21653: LD_INT 47
21655: PUSH
21656: EMPTY
21657: LIST
21658: IN
21659: IFFALSE 21680
// points := [ 67 , 45 , 75 ] ;
21661: LD_ADDR_VAR 0 9
21665: PUSH
21666: LD_INT 67
21668: PUSH
21669: LD_INT 45
21671: PUSH
21672: LD_INT 75
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: LIST
21679: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
21680: LD_VAR 0 6
21684: PPUSH
21685: CALL_OW 264
21689: PUSH
21690: LD_INT 26
21692: PUSH
21693: EMPTY
21694: LIST
21695: IN
21696: IFFALSE 21717
// points := [ 120 , 30 , 80 ] ;
21698: LD_ADDR_VAR 0 9
21702: PUSH
21703: LD_INT 120
21705: PUSH
21706: LD_INT 30
21708: PUSH
21709: LD_INT 80
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: LIST
21716: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
21717: LD_VAR 0 6
21721: PPUSH
21722: CALL_OW 264
21726: PUSH
21727: LD_INT 22
21729: PUSH
21730: EMPTY
21731: LIST
21732: IN
21733: IFFALSE 21754
// points := [ 40 , 1 , 1 ] ;
21735: LD_ADDR_VAR 0 9
21739: PUSH
21740: LD_INT 40
21742: PUSH
21743: LD_INT 1
21745: PUSH
21746: LD_INT 1
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: LIST
21753: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
21754: LD_VAR 0 6
21758: PPUSH
21759: CALL_OW 264
21763: PUSH
21764: LD_INT 29
21766: PUSH
21767: EMPTY
21768: LIST
21769: IN
21770: IFFALSE 21791
// points := [ 70 , 200 , 400 ] ;
21772: LD_ADDR_VAR 0 9
21776: PUSH
21777: LD_INT 70
21779: PUSH
21780: LD_INT 200
21782: PUSH
21783: LD_INT 400
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: LIST
21790: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
21791: LD_VAR 0 6
21795: PPUSH
21796: CALL_OW 264
21800: PUSH
21801: LD_INT 14
21803: PUSH
21804: LD_INT 53
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: IN
21811: IFFALSE 21832
// points := [ 40 , 10 , 20 ] ;
21813: LD_ADDR_VAR 0 9
21817: PUSH
21818: LD_INT 40
21820: PUSH
21821: LD_INT 10
21823: PUSH
21824: LD_INT 20
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: LIST
21831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
21832: LD_VAR 0 6
21836: PPUSH
21837: CALL_OW 264
21841: PUSH
21842: LD_INT 9
21844: PUSH
21845: EMPTY
21846: LIST
21847: IN
21848: IFFALSE 21869
// points := [ 5 , 70 , 20 ] ;
21850: LD_ADDR_VAR 0 9
21854: PUSH
21855: LD_INT 5
21857: PUSH
21858: LD_INT 70
21860: PUSH
21861: LD_INT 20
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: LIST
21868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
21869: LD_VAR 0 6
21873: PPUSH
21874: CALL_OW 264
21878: PUSH
21879: LD_INT 10
21881: PUSH
21882: EMPTY
21883: LIST
21884: IN
21885: IFFALSE 21906
// points := [ 35 , 110 , 70 ] ;
21887: LD_ADDR_VAR 0 9
21891: PUSH
21892: LD_INT 35
21894: PUSH
21895: LD_INT 110
21897: PUSH
21898: LD_INT 70
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: LIST
21905: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
21906: LD_VAR 0 6
21910: PPUSH
21911: CALL_OW 265
21915: PUSH
21916: LD_INT 25
21918: EQUAL
21919: IFFALSE 21940
// points := [ 80 , 65 , 100 ] ;
21921: LD_ADDR_VAR 0 9
21925: PUSH
21926: LD_INT 80
21928: PUSH
21929: LD_INT 65
21931: PUSH
21932: LD_INT 100
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: LIST
21939: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
21940: LD_VAR 0 6
21944: PPUSH
21945: CALL_OW 263
21949: PUSH
21950: LD_INT 1
21952: EQUAL
21953: IFFALSE 21988
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
21955: LD_ADDR_VAR 0 10
21959: PUSH
21960: LD_VAR 0 10
21964: PUSH
21965: LD_VAR 0 6
21969: PPUSH
21970: CALL_OW 311
21974: PPUSH
21975: LD_INT 3
21977: PPUSH
21978: CALL_OW 259
21982: PUSH
21983: LD_INT 4
21985: MUL
21986: MUL
21987: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
21988: LD_VAR 0 6
21992: PPUSH
21993: CALL_OW 263
21997: PUSH
21998: LD_INT 2
22000: EQUAL
22001: IFFALSE 22052
// begin j := IsControledBy ( i ) ;
22003: LD_ADDR_VAR 0 7
22007: PUSH
22008: LD_VAR 0 6
22012: PPUSH
22013: CALL_OW 312
22017: ST_TO_ADDR
// if j then
22018: LD_VAR 0 7
22022: IFFALSE 22052
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22024: LD_ADDR_VAR 0 10
22028: PUSH
22029: LD_VAR 0 10
22033: PUSH
22034: LD_VAR 0 7
22038: PPUSH
22039: LD_INT 3
22041: PPUSH
22042: CALL_OW 259
22046: PUSH
22047: LD_INT 3
22049: MUL
22050: MUL
22051: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22052: LD_VAR 0 6
22056: PPUSH
22057: CALL_OW 264
22061: PUSH
22062: LD_INT 5
22064: PUSH
22065: LD_INT 6
22067: PUSH
22068: LD_INT 46
22070: PUSH
22071: LD_INT 44
22073: PUSH
22074: LD_INT 47
22076: PUSH
22077: LD_INT 45
22079: PUSH
22080: LD_INT 28
22082: PUSH
22083: LD_INT 7
22085: PUSH
22086: LD_INT 27
22088: PUSH
22089: LD_INT 29
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: IN
22104: PUSH
22105: LD_VAR 0 1
22109: PPUSH
22110: LD_INT 52
22112: PPUSH
22113: CALL_OW 321
22117: PUSH
22118: LD_INT 2
22120: EQUAL
22121: AND
22122: IFFALSE 22139
// bpoints := bpoints * 1.2 ;
22124: LD_ADDR_VAR 0 10
22128: PUSH
22129: LD_VAR 0 10
22133: PUSH
22134: LD_REAL  1.20000000000000E+0000
22137: MUL
22138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22139: LD_VAR 0 6
22143: PPUSH
22144: CALL_OW 264
22148: PUSH
22149: LD_INT 6
22151: PUSH
22152: LD_INT 46
22154: PUSH
22155: LD_INT 47
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: LIST
22162: IN
22163: IFFALSE 22180
// bpoints := bpoints * 1.2 ;
22165: LD_ADDR_VAR 0 10
22169: PUSH
22170: LD_VAR 0 10
22174: PUSH
22175: LD_REAL  1.20000000000000E+0000
22178: MUL
22179: ST_TO_ADDR
// end ; unit_building :
22180: GO 22194
22182: LD_INT 3
22184: DOUBLE
22185: EQUAL
22186: IFTRUE 22190
22188: GO 22193
22190: POP
// ; end ;
22191: GO 22194
22193: POP
// for j = 1 to 3 do
22194: LD_ADDR_VAR 0 7
22198: PUSH
22199: DOUBLE
22200: LD_INT 1
22202: DEC
22203: ST_TO_ADDR
22204: LD_INT 3
22206: PUSH
22207: FOR_TO
22208: IFFALSE 22261
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22210: LD_ADDR_VAR 0 5
22214: PUSH
22215: LD_VAR 0 5
22219: PPUSH
22220: LD_VAR 0 7
22224: PPUSH
22225: LD_VAR 0 5
22229: PUSH
22230: LD_VAR 0 7
22234: ARRAY
22235: PUSH
22236: LD_VAR 0 9
22240: PUSH
22241: LD_VAR 0 7
22245: ARRAY
22246: PUSH
22247: LD_VAR 0 10
22251: MUL
22252: PLUS
22253: PPUSH
22254: CALL_OW 1
22258: ST_TO_ADDR
22259: GO 22207
22261: POP
22262: POP
// end ;
22263: GO 20746
22265: POP
22266: POP
// result := Replace ( result , 4 , tmp ) ;
22267: LD_ADDR_VAR 0 5
22271: PUSH
22272: LD_VAR 0 5
22276: PPUSH
22277: LD_INT 4
22279: PPUSH
22280: LD_VAR 0 8
22284: PPUSH
22285: CALL_OW 1
22289: ST_TO_ADDR
// end ;
22290: LD_VAR 0 5
22294: RET
// export function DangerAtRange ( unit , range ) ; begin
22295: LD_INT 0
22297: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22298: LD_ADDR_VAR 0 3
22302: PUSH
22303: LD_VAR 0 1
22307: PPUSH
22308: CALL_OW 255
22312: PPUSH
22313: LD_VAR 0 1
22317: PPUSH
22318: CALL_OW 250
22322: PPUSH
22323: LD_VAR 0 1
22327: PPUSH
22328: CALL_OW 251
22332: PPUSH
22333: LD_VAR 0 2
22337: PPUSH
22338: CALL 20598 0 4
22342: ST_TO_ADDR
// end ;
22343: LD_VAR 0 3
22347: RET
// export function IsExtension ( b ) ; begin
22348: LD_INT 0
22350: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22351: LD_ADDR_VAR 0 2
22355: PUSH
22356: LD_VAR 0 1
22360: PPUSH
22361: CALL_OW 266
22365: PUSH
22366: LD_INT 23
22368: PUSH
22369: LD_INT 20
22371: PUSH
22372: LD_INT 22
22374: PUSH
22375: LD_INT 17
22377: PUSH
22378: LD_INT 24
22380: PUSH
22381: LD_INT 21
22383: PUSH
22384: LD_INT 19
22386: PUSH
22387: LD_INT 16
22389: PUSH
22390: LD_INT 25
22392: PUSH
22393: LD_INT 18
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: IN
22408: ST_TO_ADDR
// end ;
22409: LD_VAR 0 2
22413: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
22414: LD_INT 0
22416: PPUSH
22417: PPUSH
22418: PPUSH
// result := [ ] ;
22419: LD_ADDR_VAR 0 2
22423: PUSH
22424: EMPTY
22425: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
22426: LD_ADDR_VAR 0 3
22430: PUSH
22431: LD_INT 21
22433: PUSH
22434: LD_INT 3
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PPUSH
22441: CALL_OW 69
22445: ST_TO_ADDR
// if not tmp then
22446: LD_VAR 0 3
22450: NOT
22451: IFFALSE 22455
// exit ;
22453: GO 22505
// for i in tmp do
22455: LD_ADDR_VAR 0 4
22459: PUSH
22460: LD_VAR 0 3
22464: PUSH
22465: FOR_IN
22466: IFFALSE 22503
// if GetBase ( i ) = base then
22468: LD_VAR 0 4
22472: PPUSH
22473: CALL_OW 274
22477: PUSH
22478: LD_VAR 0 1
22482: EQUAL
22483: IFFALSE 22501
// result := result ^ i ;
22485: LD_ADDR_VAR 0 2
22489: PUSH
22490: LD_VAR 0 2
22494: PUSH
22495: LD_VAR 0 4
22499: ADD
22500: ST_TO_ADDR
22501: GO 22465
22503: POP
22504: POP
// end ;
22505: LD_VAR 0 2
22509: RET
// export function ComComplete ( unit , b ) ; var i ; begin
22510: LD_INT 0
22512: PPUSH
22513: PPUSH
// if BuildingStatus ( b ) = bs_build then
22514: LD_VAR 0 2
22518: PPUSH
22519: CALL_OW 461
22523: PUSH
22524: LD_INT 1
22526: EQUAL
22527: IFFALSE 22587
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
22529: LD_VAR 0 1
22533: PPUSH
22534: LD_STRING h
22536: PUSH
22537: LD_VAR 0 2
22541: PPUSH
22542: CALL_OW 250
22546: PUSH
22547: LD_VAR 0 2
22551: PPUSH
22552: CALL_OW 251
22556: PUSH
22557: LD_VAR 0 2
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: LD_INT 0
22567: PUSH
22568: LD_INT 0
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: PUSH
22580: EMPTY
22581: LIST
22582: PPUSH
22583: CALL_OW 446
// end ;
22587: LD_VAR 0 3
22591: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
22592: LD_INT 0
22594: PPUSH
22595: PPUSH
22596: PPUSH
22597: PPUSH
22598: PPUSH
22599: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
22600: LD_VAR 0 1
22604: NOT
22605: PUSH
22606: LD_VAR 0 1
22610: PPUSH
22611: CALL_OW 263
22615: PUSH
22616: LD_INT 2
22618: EQUAL
22619: NOT
22620: OR
22621: IFFALSE 22625
// exit ;
22623: GO 22941
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
22625: LD_ADDR_VAR 0 6
22629: PUSH
22630: LD_INT 22
22632: PUSH
22633: LD_VAR 0 1
22637: PPUSH
22638: CALL_OW 255
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 2
22649: PUSH
22650: LD_INT 30
22652: PUSH
22653: LD_INT 36
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 34
22662: PUSH
22663: LD_INT 31
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: LIST
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PPUSH
22679: CALL_OW 69
22683: ST_TO_ADDR
// if not tmp then
22684: LD_VAR 0 6
22688: NOT
22689: IFFALSE 22693
// exit ;
22691: GO 22941
// result := [ ] ;
22693: LD_ADDR_VAR 0 2
22697: PUSH
22698: EMPTY
22699: ST_TO_ADDR
// for i in tmp do
22700: LD_ADDR_VAR 0 3
22704: PUSH
22705: LD_VAR 0 6
22709: PUSH
22710: FOR_IN
22711: IFFALSE 22782
// begin t := UnitsInside ( i ) ;
22713: LD_ADDR_VAR 0 4
22717: PUSH
22718: LD_VAR 0 3
22722: PPUSH
22723: CALL_OW 313
22727: ST_TO_ADDR
// if t then
22728: LD_VAR 0 4
22732: IFFALSE 22780
// for j in t do
22734: LD_ADDR_VAR 0 7
22738: PUSH
22739: LD_VAR 0 4
22743: PUSH
22744: FOR_IN
22745: IFFALSE 22778
// result := Insert ( result , result + 1 , j ) ;
22747: LD_ADDR_VAR 0 2
22751: PUSH
22752: LD_VAR 0 2
22756: PPUSH
22757: LD_VAR 0 2
22761: PUSH
22762: LD_INT 1
22764: PLUS
22765: PPUSH
22766: LD_VAR 0 7
22770: PPUSH
22771: CALL_OW 2
22775: ST_TO_ADDR
22776: GO 22744
22778: POP
22779: POP
// end ;
22780: GO 22710
22782: POP
22783: POP
// if not result then
22784: LD_VAR 0 2
22788: NOT
22789: IFFALSE 22793
// exit ;
22791: GO 22941
// mech := result [ 1 ] ;
22793: LD_ADDR_VAR 0 5
22797: PUSH
22798: LD_VAR 0 2
22802: PUSH
22803: LD_INT 1
22805: ARRAY
22806: ST_TO_ADDR
// if result > 1 then
22807: LD_VAR 0 2
22811: PUSH
22812: LD_INT 1
22814: GREATER
22815: IFFALSE 22927
// for i = 2 to result do
22817: LD_ADDR_VAR 0 3
22821: PUSH
22822: DOUBLE
22823: LD_INT 2
22825: DEC
22826: ST_TO_ADDR
22827: LD_VAR 0 2
22831: PUSH
22832: FOR_TO
22833: IFFALSE 22925
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
22835: LD_ADDR_VAR 0 4
22839: PUSH
22840: LD_VAR 0 2
22844: PUSH
22845: LD_VAR 0 3
22849: ARRAY
22850: PPUSH
22851: LD_INT 3
22853: PPUSH
22854: CALL_OW 259
22858: PUSH
22859: LD_VAR 0 2
22863: PUSH
22864: LD_VAR 0 3
22868: ARRAY
22869: PPUSH
22870: CALL_OW 432
22874: MINUS
22875: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
22876: LD_VAR 0 4
22880: PUSH
22881: LD_VAR 0 5
22885: PPUSH
22886: LD_INT 3
22888: PPUSH
22889: CALL_OW 259
22893: PUSH
22894: LD_VAR 0 5
22898: PPUSH
22899: CALL_OW 432
22903: MINUS
22904: GREATEREQUAL
22905: IFFALSE 22923
// mech := result [ i ] ;
22907: LD_ADDR_VAR 0 5
22911: PUSH
22912: LD_VAR 0 2
22916: PUSH
22917: LD_VAR 0 3
22921: ARRAY
22922: ST_TO_ADDR
// end ;
22923: GO 22832
22925: POP
22926: POP
// ComLinkTo ( vehicle , mech ) ;
22927: LD_VAR 0 1
22931: PPUSH
22932: LD_VAR 0 5
22936: PPUSH
22937: CALL_OW 135
// end ;
22941: LD_VAR 0 2
22945: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
22946: LD_INT 0
22948: PPUSH
22949: PPUSH
22950: PPUSH
22951: PPUSH
22952: PPUSH
22953: PPUSH
22954: PPUSH
22955: PPUSH
22956: PPUSH
22957: PPUSH
22958: PPUSH
22959: PPUSH
// result := [ ] ;
22960: LD_ADDR_VAR 0 6
22964: PUSH
22965: EMPTY
22966: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
22967: LD_VAR 0 1
22971: PPUSH
22972: CALL_OW 266
22976: PUSH
22977: LD_INT 0
22979: PUSH
22980: LD_INT 1
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: IN
22987: NOT
22988: IFFALSE 22992
// exit ;
22990: GO 24392
// if name then
22992: LD_VAR 0 2
22996: IFFALSE 23012
// SetBName ( base_dep , name ) ;
22998: LD_VAR 0 1
23002: PPUSH
23003: LD_VAR 0 2
23007: PPUSH
23008: CALL_OW 500
// base := GetBase ( base_dep ) ;
23012: LD_ADDR_VAR 0 14
23016: PUSH
23017: LD_VAR 0 1
23021: PPUSH
23022: CALL_OW 274
23026: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23027: LD_ADDR_VAR 0 15
23031: PUSH
23032: LD_VAR 0 1
23036: PPUSH
23037: CALL_OW 255
23041: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23042: LD_ADDR_VAR 0 16
23046: PUSH
23047: LD_VAR 0 1
23051: PPUSH
23052: CALL_OW 248
23056: ST_TO_ADDR
// if sources then
23057: LD_VAR 0 4
23061: IFFALSE 23108
// for i = 1 to 3 do
23063: LD_ADDR_VAR 0 7
23067: PUSH
23068: DOUBLE
23069: LD_INT 1
23071: DEC
23072: ST_TO_ADDR
23073: LD_INT 3
23075: PUSH
23076: FOR_TO
23077: IFFALSE 23106
// AddResourceType ( base , i , sources [ i ] ) ;
23079: LD_VAR 0 14
23083: PPUSH
23084: LD_VAR 0 7
23088: PPUSH
23089: LD_VAR 0 4
23093: PUSH
23094: LD_VAR 0 7
23098: ARRAY
23099: PPUSH
23100: CALL_OW 276
23104: GO 23076
23106: POP
23107: POP
// buildings := GetBaseBuildings ( base ) ;
23108: LD_ADDR_VAR 0 17
23112: PUSH
23113: LD_VAR 0 14
23117: PPUSH
23118: CALL 22414 0 1
23122: ST_TO_ADDR
// InitHc ;
23123: CALL_OW 19
// InitUc ;
23127: CALL_OW 18
// uc_side := side ;
23131: LD_ADDR_OWVAR 20
23135: PUSH
23136: LD_VAR 0 15
23140: ST_TO_ADDR
// uc_nation := nation ;
23141: LD_ADDR_OWVAR 21
23145: PUSH
23146: LD_VAR 0 16
23150: ST_TO_ADDR
// if buildings then
23151: LD_VAR 0 17
23155: IFFALSE 24251
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23157: LD_VAR 0 17
23161: PPUSH
23162: LD_INT 2
23164: PUSH
23165: LD_INT 30
23167: PUSH
23168: LD_INT 32
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 30
23177: PUSH
23178: LD_INT 33
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: PPUSH
23190: CALL_OW 72
23194: IFFALSE 23277
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23196: LD_ADDR_VAR 0 7
23200: PUSH
23201: LD_VAR 0 17
23205: PPUSH
23206: LD_INT 2
23208: PUSH
23209: LD_INT 30
23211: PUSH
23212: LD_INT 32
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 30
23221: PUSH
23222: LD_INT 33
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: LIST
23233: PPUSH
23234: CALL_OW 72
23238: PUSH
23239: FOR_IN
23240: IFFALSE 23275
// begin if not GetBWeapon ( i ) then
23242: LD_VAR 0 7
23246: PPUSH
23247: CALL_OW 269
23251: NOT
23252: IFFALSE 23273
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
23254: LD_VAR 0 7
23258: PPUSH
23259: LD_VAR 0 7
23263: PPUSH
23264: CALL 24397 0 1
23268: PPUSH
23269: CALL_OW 431
// end ;
23273: GO 23239
23275: POP
23276: POP
// end ; for i = 1 to personel do
23277: LD_ADDR_VAR 0 7
23281: PUSH
23282: DOUBLE
23283: LD_INT 1
23285: DEC
23286: ST_TO_ADDR
23287: LD_VAR 0 5
23291: PUSH
23292: FOR_TO
23293: IFFALSE 24231
// begin if i > 4 then
23295: LD_VAR 0 7
23299: PUSH
23300: LD_INT 4
23302: GREATER
23303: IFFALSE 23307
// break ;
23305: GO 24231
// case i of 1 :
23307: LD_VAR 0 7
23311: PUSH
23312: LD_INT 1
23314: DOUBLE
23315: EQUAL
23316: IFTRUE 23320
23318: GO 23393
23320: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
23321: LD_ADDR_VAR 0 11
23325: PUSH
23326: LD_VAR 0 17
23330: PPUSH
23331: LD_INT 22
23333: PUSH
23334: LD_VAR 0 15
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 2
23345: PUSH
23346: LD_INT 30
23348: PUSH
23349: LD_INT 32
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 30
23358: PUSH
23359: LD_INT 4
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 30
23368: PUSH
23369: LD_INT 5
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PPUSH
23386: CALL_OW 72
23390: ST_TO_ADDR
23391: GO 23615
23393: LD_INT 2
23395: DOUBLE
23396: EQUAL
23397: IFTRUE 23401
23399: GO 23463
23401: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
23402: LD_ADDR_VAR 0 11
23406: PUSH
23407: LD_VAR 0 17
23411: PPUSH
23412: LD_INT 22
23414: PUSH
23415: LD_VAR 0 15
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 2
23426: PUSH
23427: LD_INT 30
23429: PUSH
23430: LD_INT 0
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 30
23439: PUSH
23440: LD_INT 1
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: LIST
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PPUSH
23456: CALL_OW 72
23460: ST_TO_ADDR
23461: GO 23615
23463: LD_INT 3
23465: DOUBLE
23466: EQUAL
23467: IFTRUE 23471
23469: GO 23533
23471: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
23472: LD_ADDR_VAR 0 11
23476: PUSH
23477: LD_VAR 0 17
23481: PPUSH
23482: LD_INT 22
23484: PUSH
23485: LD_VAR 0 15
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 2
23496: PUSH
23497: LD_INT 30
23499: PUSH
23500: LD_INT 2
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 30
23509: PUSH
23510: LD_INT 3
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: LIST
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PPUSH
23526: CALL_OW 72
23530: ST_TO_ADDR
23531: GO 23615
23533: LD_INT 4
23535: DOUBLE
23536: EQUAL
23537: IFTRUE 23541
23539: GO 23614
23541: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
23542: LD_ADDR_VAR 0 11
23546: PUSH
23547: LD_VAR 0 17
23551: PPUSH
23552: LD_INT 22
23554: PUSH
23555: LD_VAR 0 15
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 2
23566: PUSH
23567: LD_INT 30
23569: PUSH
23570: LD_INT 6
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 30
23579: PUSH
23580: LD_INT 7
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 30
23589: PUSH
23590: LD_INT 8
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PPUSH
23607: CALL_OW 72
23611: ST_TO_ADDR
23612: GO 23615
23614: POP
// x := personel [ i ] ;
23615: LD_ADDR_VAR 0 12
23619: PUSH
23620: LD_VAR 0 5
23624: PUSH
23625: LD_VAR 0 7
23629: ARRAY
23630: ST_TO_ADDR
// if x = - 1 then
23631: LD_VAR 0 12
23635: PUSH
23636: LD_INT 1
23638: NEG
23639: EQUAL
23640: IFFALSE 23849
// begin for j in f do
23642: LD_ADDR_VAR 0 8
23646: PUSH
23647: LD_VAR 0 11
23651: PUSH
23652: FOR_IN
23653: IFFALSE 23845
// repeat InitHc ;
23655: CALL_OW 19
// if GetBType ( j ) = b_barracks then
23659: LD_VAR 0 8
23663: PPUSH
23664: CALL_OW 266
23668: PUSH
23669: LD_INT 5
23671: EQUAL
23672: IFFALSE 23742
// begin if UnitsInside ( j ) < 3 then
23674: LD_VAR 0 8
23678: PPUSH
23679: CALL_OW 313
23683: PUSH
23684: LD_INT 3
23686: LESS
23687: IFFALSE 23723
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23689: LD_INT 0
23691: PPUSH
23692: LD_INT 5
23694: PUSH
23695: LD_INT 8
23697: PUSH
23698: LD_INT 9
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: LIST
23705: PUSH
23706: LD_VAR 0 16
23710: ARRAY
23711: PPUSH
23712: LD_VAR 0 3
23716: PPUSH
23717: CALL_OW 380
23721: GO 23740
// PrepareHuman ( false , i , skill ) ;
23723: LD_INT 0
23725: PPUSH
23726: LD_VAR 0 7
23730: PPUSH
23731: LD_VAR 0 3
23735: PPUSH
23736: CALL_OW 380
// end else
23740: GO 23759
// PrepareHuman ( false , i , skill ) ;
23742: LD_INT 0
23744: PPUSH
23745: LD_VAR 0 7
23749: PPUSH
23750: LD_VAR 0 3
23754: PPUSH
23755: CALL_OW 380
// un := CreateHuman ;
23759: LD_ADDR_VAR 0 13
23763: PUSH
23764: CALL_OW 44
23768: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23769: LD_ADDR_VAR 0 6
23773: PUSH
23774: LD_VAR 0 6
23778: PPUSH
23779: LD_INT 1
23781: PPUSH
23782: LD_VAR 0 13
23786: PPUSH
23787: CALL_OW 2
23791: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
23792: LD_VAR 0 13
23796: PPUSH
23797: LD_VAR 0 8
23801: PPUSH
23802: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
23806: LD_VAR 0 8
23810: PPUSH
23811: CALL_OW 313
23815: PUSH
23816: LD_INT 6
23818: EQUAL
23819: PUSH
23820: LD_VAR 0 8
23824: PPUSH
23825: CALL_OW 266
23829: PUSH
23830: LD_INT 32
23832: PUSH
23833: LD_INT 31
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: IN
23840: OR
23841: IFFALSE 23655
23843: GO 23652
23845: POP
23846: POP
// end else
23847: GO 24229
// for j = 1 to x do
23849: LD_ADDR_VAR 0 8
23853: PUSH
23854: DOUBLE
23855: LD_INT 1
23857: DEC
23858: ST_TO_ADDR
23859: LD_VAR 0 12
23863: PUSH
23864: FOR_TO
23865: IFFALSE 24227
// begin InitHc ;
23867: CALL_OW 19
// if not f then
23871: LD_VAR 0 11
23875: NOT
23876: IFFALSE 23965
// begin PrepareHuman ( false , i , skill ) ;
23878: LD_INT 0
23880: PPUSH
23881: LD_VAR 0 7
23885: PPUSH
23886: LD_VAR 0 3
23890: PPUSH
23891: CALL_OW 380
// un := CreateHuman ;
23895: LD_ADDR_VAR 0 13
23899: PUSH
23900: CALL_OW 44
23904: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23905: LD_ADDR_VAR 0 6
23909: PUSH
23910: LD_VAR 0 6
23914: PPUSH
23915: LD_INT 1
23917: PPUSH
23918: LD_VAR 0 13
23922: PPUSH
23923: CALL_OW 2
23927: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23928: LD_VAR 0 13
23932: PPUSH
23933: LD_VAR 0 1
23937: PPUSH
23938: CALL_OW 250
23942: PPUSH
23943: LD_VAR 0 1
23947: PPUSH
23948: CALL_OW 251
23952: PPUSH
23953: LD_INT 10
23955: PPUSH
23956: LD_INT 0
23958: PPUSH
23959: CALL_OW 50
// continue ;
23963: GO 23864
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
23965: LD_VAR 0 11
23969: PUSH
23970: LD_INT 1
23972: ARRAY
23973: PPUSH
23974: CALL_OW 313
23978: PUSH
23979: LD_VAR 0 11
23983: PUSH
23984: LD_INT 1
23986: ARRAY
23987: PPUSH
23988: CALL_OW 266
23992: PUSH
23993: LD_INT 32
23995: PUSH
23996: LD_INT 31
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: IN
24003: AND
24004: PUSH
24005: LD_VAR 0 11
24009: PUSH
24010: LD_INT 1
24012: ARRAY
24013: PPUSH
24014: CALL_OW 313
24018: PUSH
24019: LD_INT 6
24021: EQUAL
24022: OR
24023: IFFALSE 24043
// f := Delete ( f , 1 ) ;
24025: LD_ADDR_VAR 0 11
24029: PUSH
24030: LD_VAR 0 11
24034: PPUSH
24035: LD_INT 1
24037: PPUSH
24038: CALL_OW 3
24042: ST_TO_ADDR
// if not f then
24043: LD_VAR 0 11
24047: NOT
24048: IFFALSE 24066
// begin x := x + 2 ;
24050: LD_ADDR_VAR 0 12
24054: PUSH
24055: LD_VAR 0 12
24059: PUSH
24060: LD_INT 2
24062: PLUS
24063: ST_TO_ADDR
// continue ;
24064: GO 23864
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24066: LD_VAR 0 11
24070: PUSH
24071: LD_INT 1
24073: ARRAY
24074: PPUSH
24075: CALL_OW 266
24079: PUSH
24080: LD_INT 5
24082: EQUAL
24083: IFFALSE 24157
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24085: LD_VAR 0 11
24089: PUSH
24090: LD_INT 1
24092: ARRAY
24093: PPUSH
24094: CALL_OW 313
24098: PUSH
24099: LD_INT 3
24101: LESS
24102: IFFALSE 24138
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24104: LD_INT 0
24106: PPUSH
24107: LD_INT 5
24109: PUSH
24110: LD_INT 8
24112: PUSH
24113: LD_INT 9
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: LIST
24120: PUSH
24121: LD_VAR 0 16
24125: ARRAY
24126: PPUSH
24127: LD_VAR 0 3
24131: PPUSH
24132: CALL_OW 380
24136: GO 24155
// PrepareHuman ( false , i , skill ) ;
24138: LD_INT 0
24140: PPUSH
24141: LD_VAR 0 7
24145: PPUSH
24146: LD_VAR 0 3
24150: PPUSH
24151: CALL_OW 380
// end else
24155: GO 24174
// PrepareHuman ( false , i , skill ) ;
24157: LD_INT 0
24159: PPUSH
24160: LD_VAR 0 7
24164: PPUSH
24165: LD_VAR 0 3
24169: PPUSH
24170: CALL_OW 380
// un := CreateHuman ;
24174: LD_ADDR_VAR 0 13
24178: PUSH
24179: CALL_OW 44
24183: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24184: LD_ADDR_VAR 0 6
24188: PUSH
24189: LD_VAR 0 6
24193: PPUSH
24194: LD_INT 1
24196: PPUSH
24197: LD_VAR 0 13
24201: PPUSH
24202: CALL_OW 2
24206: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
24207: LD_VAR 0 13
24211: PPUSH
24212: LD_VAR 0 11
24216: PUSH
24217: LD_INT 1
24219: ARRAY
24220: PPUSH
24221: CALL_OW 52
// end ;
24225: GO 23864
24227: POP
24228: POP
// end ;
24229: GO 23292
24231: POP
24232: POP
// result := result ^ buildings ;
24233: LD_ADDR_VAR 0 6
24237: PUSH
24238: LD_VAR 0 6
24242: PUSH
24243: LD_VAR 0 17
24247: ADD
24248: ST_TO_ADDR
// end else
24249: GO 24392
// begin for i = 1 to personel do
24251: LD_ADDR_VAR 0 7
24255: PUSH
24256: DOUBLE
24257: LD_INT 1
24259: DEC
24260: ST_TO_ADDR
24261: LD_VAR 0 5
24265: PUSH
24266: FOR_TO
24267: IFFALSE 24390
// begin if i > 4 then
24269: LD_VAR 0 7
24273: PUSH
24274: LD_INT 4
24276: GREATER
24277: IFFALSE 24281
// break ;
24279: GO 24390
// x := personel [ i ] ;
24281: LD_ADDR_VAR 0 12
24285: PUSH
24286: LD_VAR 0 5
24290: PUSH
24291: LD_VAR 0 7
24295: ARRAY
24296: ST_TO_ADDR
// if x = - 1 then
24297: LD_VAR 0 12
24301: PUSH
24302: LD_INT 1
24304: NEG
24305: EQUAL
24306: IFFALSE 24310
// continue ;
24308: GO 24266
// PrepareHuman ( false , i , skill ) ;
24310: LD_INT 0
24312: PPUSH
24313: LD_VAR 0 7
24317: PPUSH
24318: LD_VAR 0 3
24322: PPUSH
24323: CALL_OW 380
// un := CreateHuman ;
24327: LD_ADDR_VAR 0 13
24331: PUSH
24332: CALL_OW 44
24336: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24337: LD_VAR 0 13
24341: PPUSH
24342: LD_VAR 0 1
24346: PPUSH
24347: CALL_OW 250
24351: PPUSH
24352: LD_VAR 0 1
24356: PPUSH
24357: CALL_OW 251
24361: PPUSH
24362: LD_INT 10
24364: PPUSH
24365: LD_INT 0
24367: PPUSH
24368: CALL_OW 50
// result := result ^ un ;
24372: LD_ADDR_VAR 0 6
24376: PUSH
24377: LD_VAR 0 6
24381: PUSH
24382: LD_VAR 0 13
24386: ADD
24387: ST_TO_ADDR
// end ;
24388: GO 24266
24390: POP
24391: POP
// end ; end ;
24392: LD_VAR 0 6
24396: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
24397: LD_INT 0
24399: PPUSH
24400: PPUSH
24401: PPUSH
24402: PPUSH
24403: PPUSH
24404: PPUSH
24405: PPUSH
24406: PPUSH
24407: PPUSH
24408: PPUSH
24409: PPUSH
24410: PPUSH
24411: PPUSH
24412: PPUSH
24413: PPUSH
24414: PPUSH
// result := false ;
24415: LD_ADDR_VAR 0 2
24419: PUSH
24420: LD_INT 0
24422: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
24423: LD_VAR 0 1
24427: NOT
24428: PUSH
24429: LD_VAR 0 1
24433: PPUSH
24434: CALL_OW 266
24438: PUSH
24439: LD_INT 32
24441: PUSH
24442: LD_INT 33
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: IN
24449: NOT
24450: OR
24451: IFFALSE 24455
// exit ;
24453: GO 25586
// nat := GetNation ( tower ) ;
24455: LD_ADDR_VAR 0 11
24459: PUSH
24460: LD_VAR 0 1
24464: PPUSH
24465: CALL_OW 248
24469: ST_TO_ADDR
// side := GetSide ( tower ) ;
24470: LD_ADDR_VAR 0 15
24474: PUSH
24475: LD_VAR 0 1
24479: PPUSH
24480: CALL_OW 255
24484: ST_TO_ADDR
// x := GetX ( tower ) ;
24485: LD_ADDR_VAR 0 9
24489: PUSH
24490: LD_VAR 0 1
24494: PPUSH
24495: CALL_OW 250
24499: ST_TO_ADDR
// y := GetY ( tower ) ;
24500: LD_ADDR_VAR 0 10
24504: PUSH
24505: LD_VAR 0 1
24509: PPUSH
24510: CALL_OW 251
24514: ST_TO_ADDR
// if not x or not y then
24515: LD_VAR 0 9
24519: NOT
24520: PUSH
24521: LD_VAR 0 10
24525: NOT
24526: OR
24527: IFFALSE 24531
// exit ;
24529: GO 25586
// weapon := 0 ;
24531: LD_ADDR_VAR 0 17
24535: PUSH
24536: LD_INT 0
24538: ST_TO_ADDR
// fac_list := [ ] ;
24539: LD_ADDR_VAR 0 16
24543: PUSH
24544: EMPTY
24545: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
24546: LD_ADDR_VAR 0 5
24550: PUSH
24551: LD_VAR 0 1
24555: PPUSH
24556: CALL_OW 274
24560: PPUSH
24561: CALL 22414 0 1
24565: PPUSH
24566: LD_INT 30
24568: PUSH
24569: LD_INT 3
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PPUSH
24576: CALL_OW 72
24580: ST_TO_ADDR
// if not factories then
24581: LD_VAR 0 5
24585: NOT
24586: IFFALSE 24590
// exit ;
24588: GO 25586
// for i in factories do
24590: LD_ADDR_VAR 0 7
24594: PUSH
24595: LD_VAR 0 5
24599: PUSH
24600: FOR_IN
24601: IFFALSE 24626
// fac_list := fac_list union AvailableWeaponList ( i ) ;
24603: LD_ADDR_VAR 0 16
24607: PUSH
24608: LD_VAR 0 16
24612: PUSH
24613: LD_VAR 0 7
24617: PPUSH
24618: CALL_OW 478
24622: UNION
24623: ST_TO_ADDR
24624: GO 24600
24626: POP
24627: POP
// if not fac_list then
24628: LD_VAR 0 16
24632: NOT
24633: IFFALSE 24637
// exit ;
24635: GO 25586
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
24637: LD_ADDR_VAR 0 4
24641: PUSH
24642: LD_INT 4
24644: PUSH
24645: LD_INT 5
24647: PUSH
24648: LD_INT 9
24650: PUSH
24651: LD_INT 10
24653: PUSH
24654: LD_INT 6
24656: PUSH
24657: LD_INT 7
24659: PUSH
24660: LD_INT 11
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 27
24674: PUSH
24675: LD_INT 28
24677: PUSH
24678: LD_INT 26
24680: PUSH
24681: LD_INT 30
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 43
24692: PUSH
24693: LD_INT 44
24695: PUSH
24696: LD_INT 46
24698: PUSH
24699: LD_INT 45
24701: PUSH
24702: LD_INT 47
24704: PUSH
24705: LD_INT 49
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: LIST
24720: PUSH
24721: LD_VAR 0 11
24725: ARRAY
24726: ST_TO_ADDR
// for i in list do
24727: LD_ADDR_VAR 0 7
24731: PUSH
24732: LD_VAR 0 4
24736: PUSH
24737: FOR_IN
24738: IFFALSE 24771
// if not i in fac_list then
24740: LD_VAR 0 7
24744: PUSH
24745: LD_VAR 0 16
24749: IN
24750: NOT
24751: IFFALSE 24769
// list := list diff i ;
24753: LD_ADDR_VAR 0 4
24757: PUSH
24758: LD_VAR 0 4
24762: PUSH
24763: LD_VAR 0 7
24767: DIFF
24768: ST_TO_ADDR
24769: GO 24737
24771: POP
24772: POP
// if not list then
24773: LD_VAR 0 4
24777: NOT
24778: IFFALSE 24782
// exit ;
24780: GO 25586
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
24782: LD_VAR 0 11
24786: PUSH
24787: LD_INT 3
24789: EQUAL
24790: PUSH
24791: LD_INT 49
24793: PUSH
24794: LD_VAR 0 4
24798: IN
24799: AND
24800: PUSH
24801: LD_INT 31
24803: PPUSH
24804: LD_VAR 0 15
24808: PPUSH
24809: CALL_OW 321
24813: PUSH
24814: LD_INT 2
24816: EQUAL
24817: AND
24818: IFFALSE 24878
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
24820: LD_INT 22
24822: PUSH
24823: LD_VAR 0 15
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 35
24834: PUSH
24835: LD_INT 49
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 91
24844: PUSH
24845: LD_VAR 0 1
24849: PUSH
24850: LD_INT 10
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: LIST
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: LIST
24862: PPUSH
24863: CALL_OW 69
24867: NOT
24868: IFFALSE 24878
// weapon := ru_time_lapser ;
24870: LD_ADDR_VAR 0 17
24874: PUSH
24875: LD_INT 49
24877: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
24878: LD_VAR 0 11
24882: PUSH
24883: LD_INT 1
24885: PUSH
24886: LD_INT 2
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: IN
24893: PUSH
24894: LD_INT 11
24896: PUSH
24897: LD_VAR 0 4
24901: IN
24902: PUSH
24903: LD_INT 30
24905: PUSH
24906: LD_VAR 0 4
24910: IN
24911: OR
24912: AND
24913: PUSH
24914: LD_INT 6
24916: PPUSH
24917: LD_VAR 0 15
24921: PPUSH
24922: CALL_OW 321
24926: PUSH
24927: LD_INT 2
24929: EQUAL
24930: AND
24931: IFFALSE 25096
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
24933: LD_INT 22
24935: PUSH
24936: LD_VAR 0 15
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 2
24947: PUSH
24948: LD_INT 35
24950: PUSH
24951: LD_INT 11
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 35
24960: PUSH
24961: LD_INT 30
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 91
24975: PUSH
24976: LD_VAR 0 1
24980: PUSH
24981: LD_INT 18
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: LIST
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: LIST
24993: PPUSH
24994: CALL_OW 69
24998: NOT
24999: PUSH
25000: LD_INT 22
25002: PUSH
25003: LD_VAR 0 15
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 2
25014: PUSH
25015: LD_INT 30
25017: PUSH
25018: LD_INT 32
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 30
25027: PUSH
25028: LD_INT 33
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 91
25042: PUSH
25043: LD_VAR 0 1
25047: PUSH
25048: LD_INT 12
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: LIST
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: LIST
25060: PUSH
25061: EMPTY
25062: LIST
25063: PPUSH
25064: CALL_OW 69
25068: PUSH
25069: LD_INT 2
25071: GREATER
25072: AND
25073: IFFALSE 25096
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25075: LD_ADDR_VAR 0 17
25079: PUSH
25080: LD_INT 11
25082: PUSH
25083: LD_INT 30
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_VAR 0 11
25094: ARRAY
25095: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25096: LD_VAR 0 17
25100: NOT
25101: PUSH
25102: LD_INT 40
25104: PPUSH
25105: LD_VAR 0 15
25109: PPUSH
25110: CALL_OW 321
25114: PUSH
25115: LD_INT 2
25117: EQUAL
25118: AND
25119: PUSH
25120: LD_INT 7
25122: PUSH
25123: LD_VAR 0 4
25127: IN
25128: PUSH
25129: LD_INT 28
25131: PUSH
25132: LD_VAR 0 4
25136: IN
25137: OR
25138: PUSH
25139: LD_INT 45
25141: PUSH
25142: LD_VAR 0 4
25146: IN
25147: OR
25148: AND
25149: IFFALSE 25403
// begin hex := GetHexInfo ( x , y ) ;
25151: LD_ADDR_VAR 0 3
25155: PUSH
25156: LD_VAR 0 9
25160: PPUSH
25161: LD_VAR 0 10
25165: PPUSH
25166: CALL_OW 546
25170: ST_TO_ADDR
// if hex [ 1 ] then
25171: LD_VAR 0 3
25175: PUSH
25176: LD_INT 1
25178: ARRAY
25179: IFFALSE 25183
// exit ;
25181: GO 25586
// height := hex [ 2 ] ;
25183: LD_ADDR_VAR 0 14
25187: PUSH
25188: LD_VAR 0 3
25192: PUSH
25193: LD_INT 2
25195: ARRAY
25196: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
25197: LD_ADDR_VAR 0 13
25201: PUSH
25202: LD_INT 0
25204: PUSH
25205: LD_INT 2
25207: PUSH
25208: LD_INT 3
25210: PUSH
25211: LD_INT 5
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: ST_TO_ADDR
// for i in tmp do
25220: LD_ADDR_VAR 0 7
25224: PUSH
25225: LD_VAR 0 13
25229: PUSH
25230: FOR_IN
25231: IFFALSE 25401
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
25233: LD_ADDR_VAR 0 8
25237: PUSH
25238: LD_VAR 0 9
25242: PPUSH
25243: LD_VAR 0 7
25247: PPUSH
25248: LD_INT 5
25250: PPUSH
25251: CALL_OW 272
25255: PUSH
25256: LD_VAR 0 10
25260: PPUSH
25261: LD_VAR 0 7
25265: PPUSH
25266: LD_INT 5
25268: PPUSH
25269: CALL_OW 273
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
25278: LD_VAR 0 8
25282: PUSH
25283: LD_INT 1
25285: ARRAY
25286: PPUSH
25287: LD_VAR 0 8
25291: PUSH
25292: LD_INT 2
25294: ARRAY
25295: PPUSH
25296: CALL_OW 488
25300: IFFALSE 25399
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
25302: LD_ADDR_VAR 0 3
25306: PUSH
25307: LD_VAR 0 8
25311: PUSH
25312: LD_INT 1
25314: ARRAY
25315: PPUSH
25316: LD_VAR 0 8
25320: PUSH
25321: LD_INT 2
25323: ARRAY
25324: PPUSH
25325: CALL_OW 546
25329: ST_TO_ADDR
// if hex [ 1 ] then
25330: LD_VAR 0 3
25334: PUSH
25335: LD_INT 1
25337: ARRAY
25338: IFFALSE 25342
// continue ;
25340: GO 25230
// h := hex [ 2 ] ;
25342: LD_ADDR_VAR 0 12
25346: PUSH
25347: LD_VAR 0 3
25351: PUSH
25352: LD_INT 2
25354: ARRAY
25355: ST_TO_ADDR
// if h + 7 < height then
25356: LD_VAR 0 12
25360: PUSH
25361: LD_INT 7
25363: PLUS
25364: PUSH
25365: LD_VAR 0 14
25369: LESS
25370: IFFALSE 25399
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
25372: LD_ADDR_VAR 0 17
25376: PUSH
25377: LD_INT 7
25379: PUSH
25380: LD_INT 28
25382: PUSH
25383: LD_INT 45
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: LIST
25390: PUSH
25391: LD_VAR 0 11
25395: ARRAY
25396: ST_TO_ADDR
// break ;
25397: GO 25401
// end ; end ; end ;
25399: GO 25230
25401: POP
25402: POP
// end ; if not weapon then
25403: LD_VAR 0 17
25407: NOT
25408: IFFALSE 25468
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
25410: LD_ADDR_VAR 0 4
25414: PUSH
25415: LD_VAR 0 4
25419: PUSH
25420: LD_INT 11
25422: PUSH
25423: LD_INT 30
25425: PUSH
25426: LD_INT 49
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: LIST
25433: DIFF
25434: ST_TO_ADDR
// if not list then
25435: LD_VAR 0 4
25439: NOT
25440: IFFALSE 25444
// exit ;
25442: GO 25586
// weapon := list [ rand ( 1 , list ) ] ;
25444: LD_ADDR_VAR 0 17
25448: PUSH
25449: LD_VAR 0 4
25453: PUSH
25454: LD_INT 1
25456: PPUSH
25457: LD_VAR 0 4
25461: PPUSH
25462: CALL_OW 12
25466: ARRAY
25467: ST_TO_ADDR
// end ; if weapon then
25468: LD_VAR 0 17
25472: IFFALSE 25586
// begin tmp := CostOfWeapon ( weapon ) ;
25474: LD_ADDR_VAR 0 13
25478: PUSH
25479: LD_VAR 0 17
25483: PPUSH
25484: CALL_OW 451
25488: ST_TO_ADDR
// j := GetBase ( tower ) ;
25489: LD_ADDR_VAR 0 8
25493: PUSH
25494: LD_VAR 0 1
25498: PPUSH
25499: CALL_OW 274
25503: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
25504: LD_VAR 0 8
25508: PPUSH
25509: LD_INT 1
25511: PPUSH
25512: CALL_OW 275
25516: PUSH
25517: LD_VAR 0 13
25521: PUSH
25522: LD_INT 1
25524: ARRAY
25525: GREATEREQUAL
25526: PUSH
25527: LD_VAR 0 8
25531: PPUSH
25532: LD_INT 2
25534: PPUSH
25535: CALL_OW 275
25539: PUSH
25540: LD_VAR 0 13
25544: PUSH
25545: LD_INT 2
25547: ARRAY
25548: GREATEREQUAL
25549: AND
25550: PUSH
25551: LD_VAR 0 8
25555: PPUSH
25556: LD_INT 3
25558: PPUSH
25559: CALL_OW 275
25563: PUSH
25564: LD_VAR 0 13
25568: PUSH
25569: LD_INT 3
25571: ARRAY
25572: GREATEREQUAL
25573: AND
25574: IFFALSE 25586
// result := weapon ;
25576: LD_ADDR_VAR 0 2
25580: PUSH
25581: LD_VAR 0 17
25585: ST_TO_ADDR
// end ; end ;
25586: LD_VAR 0 2
25590: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
25591: LD_INT 0
25593: PPUSH
25594: PPUSH
// result := true ;
25595: LD_ADDR_VAR 0 3
25599: PUSH
25600: LD_INT 1
25602: ST_TO_ADDR
// if array1 = array2 then
25603: LD_VAR 0 1
25607: PUSH
25608: LD_VAR 0 2
25612: EQUAL
25613: IFFALSE 25673
// begin for i = 1 to array1 do
25615: LD_ADDR_VAR 0 4
25619: PUSH
25620: DOUBLE
25621: LD_INT 1
25623: DEC
25624: ST_TO_ADDR
25625: LD_VAR 0 1
25629: PUSH
25630: FOR_TO
25631: IFFALSE 25669
// if array1 [ i ] <> array2 [ i ] then
25633: LD_VAR 0 1
25637: PUSH
25638: LD_VAR 0 4
25642: ARRAY
25643: PUSH
25644: LD_VAR 0 2
25648: PUSH
25649: LD_VAR 0 4
25653: ARRAY
25654: NONEQUAL
25655: IFFALSE 25667
// begin result := false ;
25657: LD_ADDR_VAR 0 3
25661: PUSH
25662: LD_INT 0
25664: ST_TO_ADDR
// break ;
25665: GO 25669
// end ;
25667: GO 25630
25669: POP
25670: POP
// end else
25671: GO 25681
// result := false ;
25673: LD_ADDR_VAR 0 3
25677: PUSH
25678: LD_INT 0
25680: ST_TO_ADDR
// end ;
25681: LD_VAR 0 3
25685: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
25686: LD_INT 0
25688: PPUSH
25689: PPUSH
25690: PPUSH
// pom := GetBase ( fac ) ;
25691: LD_ADDR_VAR 0 5
25695: PUSH
25696: LD_VAR 0 1
25700: PPUSH
25701: CALL_OW 274
25705: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
25706: LD_ADDR_VAR 0 4
25710: PUSH
25711: LD_VAR 0 2
25715: PUSH
25716: LD_INT 1
25718: ARRAY
25719: PPUSH
25720: LD_VAR 0 2
25724: PUSH
25725: LD_INT 2
25727: ARRAY
25728: PPUSH
25729: LD_VAR 0 2
25733: PUSH
25734: LD_INT 3
25736: ARRAY
25737: PPUSH
25738: LD_VAR 0 2
25742: PUSH
25743: LD_INT 4
25745: ARRAY
25746: PPUSH
25747: CALL_OW 449
25751: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25752: LD_ADDR_VAR 0 3
25756: PUSH
25757: LD_VAR 0 5
25761: PPUSH
25762: LD_INT 1
25764: PPUSH
25765: CALL_OW 275
25769: PUSH
25770: LD_VAR 0 4
25774: PUSH
25775: LD_INT 1
25777: ARRAY
25778: GREATEREQUAL
25779: PUSH
25780: LD_VAR 0 5
25784: PPUSH
25785: LD_INT 2
25787: PPUSH
25788: CALL_OW 275
25792: PUSH
25793: LD_VAR 0 4
25797: PUSH
25798: LD_INT 2
25800: ARRAY
25801: GREATEREQUAL
25802: AND
25803: PUSH
25804: LD_VAR 0 5
25808: PPUSH
25809: LD_INT 3
25811: PPUSH
25812: CALL_OW 275
25816: PUSH
25817: LD_VAR 0 4
25821: PUSH
25822: LD_INT 3
25824: ARRAY
25825: GREATEREQUAL
25826: AND
25827: ST_TO_ADDR
// end ;
25828: LD_VAR 0 3
25832: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
25833: LD_INT 0
25835: PPUSH
25836: PPUSH
25837: PPUSH
25838: PPUSH
// pom := GetBase ( building ) ;
25839: LD_ADDR_VAR 0 3
25843: PUSH
25844: LD_VAR 0 1
25848: PPUSH
25849: CALL_OW 274
25853: ST_TO_ADDR
// if not pom then
25854: LD_VAR 0 3
25858: NOT
25859: IFFALSE 25863
// exit ;
25861: GO 26033
// btype := GetBType ( building ) ;
25863: LD_ADDR_VAR 0 5
25867: PUSH
25868: LD_VAR 0 1
25872: PPUSH
25873: CALL_OW 266
25877: ST_TO_ADDR
// if btype = b_armoury then
25878: LD_VAR 0 5
25882: PUSH
25883: LD_INT 4
25885: EQUAL
25886: IFFALSE 25896
// btype := b_barracks ;
25888: LD_ADDR_VAR 0 5
25892: PUSH
25893: LD_INT 5
25895: ST_TO_ADDR
// if btype = b_depot then
25896: LD_VAR 0 5
25900: PUSH
25901: LD_INT 0
25903: EQUAL
25904: IFFALSE 25914
// btype := b_warehouse ;
25906: LD_ADDR_VAR 0 5
25910: PUSH
25911: LD_INT 1
25913: ST_TO_ADDR
// if btype = b_workshop then
25914: LD_VAR 0 5
25918: PUSH
25919: LD_INT 2
25921: EQUAL
25922: IFFALSE 25932
// btype := b_factory ;
25924: LD_ADDR_VAR 0 5
25928: PUSH
25929: LD_INT 3
25931: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25932: LD_ADDR_VAR 0 4
25936: PUSH
25937: LD_VAR 0 5
25941: PPUSH
25942: LD_VAR 0 1
25946: PPUSH
25947: CALL_OW 248
25951: PPUSH
25952: CALL_OW 450
25956: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25957: LD_ADDR_VAR 0 2
25961: PUSH
25962: LD_VAR 0 3
25966: PPUSH
25967: LD_INT 1
25969: PPUSH
25970: CALL_OW 275
25974: PUSH
25975: LD_VAR 0 4
25979: PUSH
25980: LD_INT 1
25982: ARRAY
25983: GREATEREQUAL
25984: PUSH
25985: LD_VAR 0 3
25989: PPUSH
25990: LD_INT 2
25992: PPUSH
25993: CALL_OW 275
25997: PUSH
25998: LD_VAR 0 4
26002: PUSH
26003: LD_INT 2
26005: ARRAY
26006: GREATEREQUAL
26007: AND
26008: PUSH
26009: LD_VAR 0 3
26013: PPUSH
26014: LD_INT 3
26016: PPUSH
26017: CALL_OW 275
26021: PUSH
26022: LD_VAR 0 4
26026: PUSH
26027: LD_INT 3
26029: ARRAY
26030: GREATEREQUAL
26031: AND
26032: ST_TO_ADDR
// end ;
26033: LD_VAR 0 2
26037: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
26038: LD_INT 0
26040: PPUSH
26041: PPUSH
26042: PPUSH
// pom := GetBase ( building ) ;
26043: LD_ADDR_VAR 0 4
26047: PUSH
26048: LD_VAR 0 1
26052: PPUSH
26053: CALL_OW 274
26057: ST_TO_ADDR
// if not pom then
26058: LD_VAR 0 4
26062: NOT
26063: IFFALSE 26067
// exit ;
26065: GO 26168
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26067: LD_ADDR_VAR 0 5
26071: PUSH
26072: LD_VAR 0 2
26076: PPUSH
26077: LD_VAR 0 1
26081: PPUSH
26082: CALL_OW 248
26086: PPUSH
26087: CALL_OW 450
26091: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26092: LD_ADDR_VAR 0 3
26096: PUSH
26097: LD_VAR 0 4
26101: PPUSH
26102: LD_INT 1
26104: PPUSH
26105: CALL_OW 275
26109: PUSH
26110: LD_VAR 0 5
26114: PUSH
26115: LD_INT 1
26117: ARRAY
26118: GREATEREQUAL
26119: PUSH
26120: LD_VAR 0 4
26124: PPUSH
26125: LD_INT 2
26127: PPUSH
26128: CALL_OW 275
26132: PUSH
26133: LD_VAR 0 5
26137: PUSH
26138: LD_INT 2
26140: ARRAY
26141: GREATEREQUAL
26142: AND
26143: PUSH
26144: LD_VAR 0 4
26148: PPUSH
26149: LD_INT 3
26151: PPUSH
26152: CALL_OW 275
26156: PUSH
26157: LD_VAR 0 5
26161: PUSH
26162: LD_INT 3
26164: ARRAY
26165: GREATEREQUAL
26166: AND
26167: ST_TO_ADDR
// end ;
26168: LD_VAR 0 3
26172: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
26173: LD_INT 0
26175: PPUSH
26176: PPUSH
26177: PPUSH
26178: PPUSH
26179: PPUSH
26180: PPUSH
26181: PPUSH
26182: PPUSH
26183: PPUSH
26184: PPUSH
// result := false ;
26185: LD_ADDR_VAR 0 6
26189: PUSH
26190: LD_INT 0
26192: ST_TO_ADDR
// if not base or not btype or not x or not y then
26193: LD_VAR 0 1
26197: NOT
26198: PUSH
26199: LD_VAR 0 2
26203: NOT
26204: OR
26205: PUSH
26206: LD_VAR 0 3
26210: NOT
26211: OR
26212: PUSH
26213: LD_VAR 0 4
26217: NOT
26218: OR
26219: IFFALSE 26223
// exit ;
26221: GO 26737
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
26223: LD_ADDR_VAR 0 12
26227: PUSH
26228: LD_VAR 0 2
26232: PPUSH
26233: LD_VAR 0 3
26237: PPUSH
26238: LD_VAR 0 4
26242: PPUSH
26243: LD_VAR 0 5
26247: PPUSH
26248: LD_VAR 0 1
26252: PUSH
26253: LD_INT 1
26255: ARRAY
26256: PPUSH
26257: CALL_OW 248
26261: PPUSH
26262: LD_INT 0
26264: PPUSH
26265: CALL 27566 0 6
26269: ST_TO_ADDR
// if not hexes then
26270: LD_VAR 0 12
26274: NOT
26275: IFFALSE 26279
// exit ;
26277: GO 26737
// for i = 1 to hexes do
26279: LD_ADDR_VAR 0 7
26283: PUSH
26284: DOUBLE
26285: LD_INT 1
26287: DEC
26288: ST_TO_ADDR
26289: LD_VAR 0 12
26293: PUSH
26294: FOR_TO
26295: IFFALSE 26735
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26297: LD_ADDR_VAR 0 11
26301: PUSH
26302: LD_VAR 0 12
26306: PUSH
26307: LD_VAR 0 7
26311: ARRAY
26312: PUSH
26313: LD_INT 1
26315: ARRAY
26316: PPUSH
26317: LD_VAR 0 12
26321: PUSH
26322: LD_VAR 0 7
26326: ARRAY
26327: PUSH
26328: LD_INT 2
26330: ARRAY
26331: PPUSH
26332: CALL_OW 428
26336: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
26337: LD_VAR 0 11
26341: NOT
26342: PUSH
26343: LD_VAR 0 11
26347: PPUSH
26348: CALL_OW 247
26352: PUSH
26353: LD_INT 3
26355: EQUAL
26356: OR
26357: IFFALSE 26361
// continue ;
26359: GO 26294
// result := true ;
26361: LD_ADDR_VAR 0 6
26365: PUSH
26366: LD_INT 1
26368: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26369: LD_ADDR_VAR 0 15
26373: PUSH
26374: LD_INT 22
26376: PUSH
26377: LD_VAR 0 11
26381: PPUSH
26382: CALL_OW 255
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 2
26393: PUSH
26394: LD_INT 30
26396: PUSH
26397: LD_INT 0
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 30
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: LIST
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PPUSH
26423: CALL_OW 69
26427: ST_TO_ADDR
// if dep then
26428: LD_VAR 0 15
26432: IFFALSE 26568
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
26434: LD_ADDR_VAR 0 14
26438: PUSH
26439: LD_VAR 0 15
26443: PUSH
26444: LD_INT 1
26446: ARRAY
26447: PPUSH
26448: CALL_OW 250
26452: PPUSH
26453: LD_VAR 0 15
26457: PUSH
26458: LD_INT 1
26460: ARRAY
26461: PPUSH
26462: CALL_OW 254
26466: PPUSH
26467: LD_INT 5
26469: PPUSH
26470: CALL_OW 272
26474: PUSH
26475: LD_VAR 0 15
26479: PUSH
26480: LD_INT 1
26482: ARRAY
26483: PPUSH
26484: CALL_OW 251
26488: PPUSH
26489: LD_VAR 0 15
26493: PUSH
26494: LD_INT 1
26496: ARRAY
26497: PPUSH
26498: CALL_OW 254
26502: PPUSH
26503: LD_INT 5
26505: PPUSH
26506: CALL_OW 273
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
26515: LD_VAR 0 14
26519: PUSH
26520: LD_INT 1
26522: ARRAY
26523: PPUSH
26524: LD_VAR 0 14
26528: PUSH
26529: LD_INT 2
26531: ARRAY
26532: PPUSH
26533: CALL_OW 488
26537: IFFALSE 26568
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
26539: LD_VAR 0 11
26543: PPUSH
26544: LD_VAR 0 14
26548: PUSH
26549: LD_INT 1
26551: ARRAY
26552: PPUSH
26553: LD_VAR 0 14
26557: PUSH
26558: LD_INT 2
26560: ARRAY
26561: PPUSH
26562: CALL_OW 111
// continue ;
26566: GO 26294
// end ; end ; r := GetDir ( tmp ) ;
26568: LD_ADDR_VAR 0 13
26572: PUSH
26573: LD_VAR 0 11
26577: PPUSH
26578: CALL_OW 254
26582: ST_TO_ADDR
// if r = 5 then
26583: LD_VAR 0 13
26587: PUSH
26588: LD_INT 5
26590: EQUAL
26591: IFFALSE 26601
// r := 0 ;
26593: LD_ADDR_VAR 0 13
26597: PUSH
26598: LD_INT 0
26600: ST_TO_ADDR
// for j = r to 5 do
26601: LD_ADDR_VAR 0 8
26605: PUSH
26606: DOUBLE
26607: LD_VAR 0 13
26611: DEC
26612: ST_TO_ADDR
26613: LD_INT 5
26615: PUSH
26616: FOR_TO
26617: IFFALSE 26731
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
26619: LD_ADDR_VAR 0 9
26623: PUSH
26624: LD_VAR 0 11
26628: PPUSH
26629: CALL_OW 250
26633: PPUSH
26634: LD_VAR 0 8
26638: PPUSH
26639: LD_INT 2
26641: PPUSH
26642: CALL_OW 272
26646: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
26647: LD_ADDR_VAR 0 10
26651: PUSH
26652: LD_VAR 0 11
26656: PPUSH
26657: CALL_OW 251
26661: PPUSH
26662: LD_VAR 0 8
26666: PPUSH
26667: LD_INT 2
26669: PPUSH
26670: CALL_OW 273
26674: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
26675: LD_VAR 0 9
26679: PPUSH
26680: LD_VAR 0 10
26684: PPUSH
26685: CALL_OW 488
26689: PUSH
26690: LD_VAR 0 9
26694: PPUSH
26695: LD_VAR 0 10
26699: PPUSH
26700: CALL_OW 428
26704: NOT
26705: AND
26706: IFFALSE 26729
// begin ComMoveXY ( tmp , _x , _y ) ;
26708: LD_VAR 0 11
26712: PPUSH
26713: LD_VAR 0 9
26717: PPUSH
26718: LD_VAR 0 10
26722: PPUSH
26723: CALL_OW 111
// break ;
26727: GO 26731
// end ; end ;
26729: GO 26616
26731: POP
26732: POP
// end ;
26733: GO 26294
26735: POP
26736: POP
// end ;
26737: LD_VAR 0 6
26741: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
26742: LD_INT 0
26744: PPUSH
26745: PPUSH
26746: PPUSH
26747: PPUSH
26748: PPUSH
26749: PPUSH
26750: PPUSH
26751: PPUSH
26752: PPUSH
// result := false ;
26753: LD_ADDR_VAR 0 6
26757: PUSH
26758: LD_INT 0
26760: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
26761: LD_VAR 0 1
26765: NOT
26766: PUSH
26767: LD_VAR 0 1
26771: PPUSH
26772: CALL_OW 266
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: LD_INT 1
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: IN
26787: NOT
26788: OR
26789: PUSH
26790: LD_VAR 0 2
26794: NOT
26795: OR
26796: PUSH
26797: LD_VAR 0 5
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: LD_INT 1
26807: PUSH
26808: LD_INT 2
26810: PUSH
26811: LD_INT 3
26813: PUSH
26814: LD_INT 4
26816: PUSH
26817: LD_INT 5
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: IN
26828: NOT
26829: OR
26830: PUSH
26831: LD_VAR 0 3
26835: PPUSH
26836: LD_VAR 0 4
26840: PPUSH
26841: CALL_OW 488
26845: NOT
26846: OR
26847: IFFALSE 26851
// exit ;
26849: GO 27561
// pom := GetBase ( bdepot ) ;
26851: LD_ADDR_VAR 0 9
26855: PUSH
26856: LD_VAR 0 1
26860: PPUSH
26861: CALL_OW 274
26865: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
26866: LD_ADDR_VAR 0 10
26870: PUSH
26871: LD_VAR 0 2
26875: PPUSH
26876: LD_VAR 0 1
26880: PPUSH
26881: CALL_OW 248
26885: PPUSH
26886: CALL_OW 450
26890: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26891: LD_VAR 0 9
26895: PPUSH
26896: LD_INT 1
26898: PPUSH
26899: CALL_OW 275
26903: PUSH
26904: LD_VAR 0 10
26908: PUSH
26909: LD_INT 1
26911: ARRAY
26912: GREATEREQUAL
26913: PUSH
26914: LD_VAR 0 9
26918: PPUSH
26919: LD_INT 2
26921: PPUSH
26922: CALL_OW 275
26926: PUSH
26927: LD_VAR 0 10
26931: PUSH
26932: LD_INT 2
26934: ARRAY
26935: GREATEREQUAL
26936: AND
26937: PUSH
26938: LD_VAR 0 9
26942: PPUSH
26943: LD_INT 3
26945: PPUSH
26946: CALL_OW 275
26950: PUSH
26951: LD_VAR 0 10
26955: PUSH
26956: LD_INT 3
26958: ARRAY
26959: GREATEREQUAL
26960: AND
26961: NOT
26962: IFFALSE 26966
// exit ;
26964: GO 27561
// if GetBType ( bdepot ) = b_depot then
26966: LD_VAR 0 1
26970: PPUSH
26971: CALL_OW 266
26975: PUSH
26976: LD_INT 0
26978: EQUAL
26979: IFFALSE 26991
// dist := 28 else
26981: LD_ADDR_VAR 0 13
26985: PUSH
26986: LD_INT 28
26988: ST_TO_ADDR
26989: GO 26999
// dist := 36 ;
26991: LD_ADDR_VAR 0 13
26995: PUSH
26996: LD_INT 36
26998: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
26999: LD_VAR 0 1
27003: PPUSH
27004: LD_VAR 0 3
27008: PPUSH
27009: LD_VAR 0 4
27013: PPUSH
27014: CALL_OW 297
27018: PUSH
27019: LD_VAR 0 13
27023: GREATER
27024: IFFALSE 27028
// exit ;
27026: GO 27561
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
27028: LD_ADDR_VAR 0 11
27032: PUSH
27033: LD_VAR 0 2
27037: PPUSH
27038: LD_VAR 0 3
27042: PPUSH
27043: LD_VAR 0 4
27047: PPUSH
27048: LD_VAR 0 5
27052: PPUSH
27053: LD_VAR 0 1
27057: PPUSH
27058: CALL_OW 248
27062: PPUSH
27063: LD_INT 0
27065: PPUSH
27066: CALL 27566 0 6
27070: ST_TO_ADDR
// if not hexes then
27071: LD_VAR 0 11
27075: NOT
27076: IFFALSE 27080
// exit ;
27078: GO 27561
// hex := GetHexInfo ( x , y ) ;
27080: LD_ADDR_VAR 0 14
27084: PUSH
27085: LD_VAR 0 3
27089: PPUSH
27090: LD_VAR 0 4
27094: PPUSH
27095: CALL_OW 546
27099: ST_TO_ADDR
// if hex [ 1 ] then
27100: LD_VAR 0 14
27104: PUSH
27105: LD_INT 1
27107: ARRAY
27108: IFFALSE 27112
// exit ;
27110: GO 27561
// height := hex [ 2 ] ;
27112: LD_ADDR_VAR 0 12
27116: PUSH
27117: LD_VAR 0 14
27121: PUSH
27122: LD_INT 2
27124: ARRAY
27125: ST_TO_ADDR
// for i = 1 to hexes do
27126: LD_ADDR_VAR 0 7
27130: PUSH
27131: DOUBLE
27132: LD_INT 1
27134: DEC
27135: ST_TO_ADDR
27136: LD_VAR 0 11
27140: PUSH
27141: FOR_TO
27142: IFFALSE 27470
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27144: LD_VAR 0 11
27148: PUSH
27149: LD_VAR 0 7
27153: ARRAY
27154: PUSH
27155: LD_INT 1
27157: ARRAY
27158: PPUSH
27159: LD_VAR 0 11
27163: PUSH
27164: LD_VAR 0 7
27168: ARRAY
27169: PUSH
27170: LD_INT 2
27172: ARRAY
27173: PPUSH
27174: CALL_OW 488
27178: NOT
27179: IFFALSE 27183
// continue ;
27181: GO 27141
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27183: LD_ADDR_VAR 0 8
27187: PUSH
27188: LD_VAR 0 11
27192: PUSH
27193: LD_VAR 0 7
27197: ARRAY
27198: PUSH
27199: LD_INT 1
27201: ARRAY
27202: PPUSH
27203: LD_VAR 0 11
27207: PUSH
27208: LD_VAR 0 7
27212: ARRAY
27213: PUSH
27214: LD_INT 2
27216: ARRAY
27217: PPUSH
27218: CALL_OW 546
27222: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27223: LD_VAR 0 8
27227: PUSH
27228: LD_INT 1
27230: ARRAY
27231: PUSH
27232: LD_VAR 0 8
27236: PUSH
27237: LD_INT 2
27239: ARRAY
27240: PUSH
27241: LD_VAR 0 12
27245: PUSH
27246: LD_INT 2
27248: PLUS
27249: GREATER
27250: OR
27251: PUSH
27252: LD_VAR 0 8
27256: PUSH
27257: LD_INT 2
27259: ARRAY
27260: PUSH
27261: LD_VAR 0 12
27265: PUSH
27266: LD_INT 2
27268: MINUS
27269: LESS
27270: OR
27271: PUSH
27272: LD_VAR 0 8
27276: PUSH
27277: LD_INT 3
27279: ARRAY
27280: PUSH
27281: LD_INT 0
27283: PUSH
27284: LD_INT 8
27286: PUSH
27287: LD_INT 9
27289: PUSH
27290: LD_INT 10
27292: PUSH
27293: LD_INT 11
27295: PUSH
27296: LD_INT 12
27298: PUSH
27299: LD_INT 13
27301: PUSH
27302: LD_INT 16
27304: PUSH
27305: LD_INT 17
27307: PUSH
27308: LD_INT 18
27310: PUSH
27311: LD_INT 19
27313: PUSH
27314: LD_INT 20
27316: PUSH
27317: LD_INT 21
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: IN
27335: NOT
27336: OR
27337: PUSH
27338: LD_VAR 0 8
27342: PUSH
27343: LD_INT 5
27345: ARRAY
27346: NOT
27347: OR
27348: PUSH
27349: LD_VAR 0 8
27353: PUSH
27354: LD_INT 6
27356: ARRAY
27357: PUSH
27358: LD_INT 1
27360: PUSH
27361: LD_INT 2
27363: PUSH
27364: LD_INT 7
27366: PUSH
27367: LD_INT 9
27369: PUSH
27370: LD_INT 10
27372: PUSH
27373: LD_INT 11
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: IN
27384: NOT
27385: OR
27386: PUSH
27387: LD_VAR 0 11
27391: PUSH
27392: LD_VAR 0 7
27396: ARRAY
27397: PUSH
27398: LD_INT 1
27400: ARRAY
27401: PPUSH
27402: LD_VAR 0 11
27406: PUSH
27407: LD_VAR 0 7
27411: ARRAY
27412: PUSH
27413: LD_INT 2
27415: ARRAY
27416: PPUSH
27417: CALL_OW 428
27421: PUSH
27422: LD_INT 0
27424: GREATER
27425: OR
27426: PUSH
27427: LD_VAR 0 11
27431: PUSH
27432: LD_VAR 0 7
27436: ARRAY
27437: PUSH
27438: LD_INT 1
27440: ARRAY
27441: PPUSH
27442: LD_VAR 0 11
27446: PUSH
27447: LD_VAR 0 7
27451: ARRAY
27452: PUSH
27453: LD_INT 2
27455: ARRAY
27456: PPUSH
27457: CALL_OW 351
27461: OR
27462: IFFALSE 27468
// exit ;
27464: POP
27465: POP
27466: GO 27561
// end ;
27468: GO 27141
27470: POP
27471: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
27472: LD_VAR 0 1
27476: PPUSH
27477: CALL_OW 255
27481: PPUSH
27482: LD_VAR 0 3
27486: PPUSH
27487: LD_VAR 0 4
27491: PPUSH
27492: LD_INT 20
27494: PPUSH
27495: CALL 20598 0 4
27499: PUSH
27500: LD_INT 4
27502: ARRAY
27503: IFFALSE 27507
// exit ;
27505: GO 27561
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
27507: LD_VAR 0 2
27511: PUSH
27512: LD_INT 29
27514: PUSH
27515: LD_INT 30
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: IN
27522: PUSH
27523: LD_VAR 0 3
27527: PPUSH
27528: LD_VAR 0 4
27532: PPUSH
27533: LD_VAR 0 1
27537: PPUSH
27538: CALL_OW 255
27542: PPUSH
27543: CALL_OW 440
27547: NOT
27548: AND
27549: IFFALSE 27553
// exit ;
27551: GO 27561
// result := true ;
27553: LD_ADDR_VAR 0 6
27557: PUSH
27558: LD_INT 1
27560: ST_TO_ADDR
// end ;
27561: LD_VAR 0 6
27565: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
27566: LD_INT 0
27568: PPUSH
27569: PPUSH
27570: PPUSH
27571: PPUSH
27572: PPUSH
27573: PPUSH
27574: PPUSH
27575: PPUSH
27576: PPUSH
27577: PPUSH
27578: PPUSH
27579: PPUSH
27580: PPUSH
27581: PPUSH
27582: PPUSH
27583: PPUSH
27584: PPUSH
27585: PPUSH
27586: PPUSH
27587: PPUSH
27588: PPUSH
27589: PPUSH
27590: PPUSH
27591: PPUSH
27592: PPUSH
27593: PPUSH
27594: PPUSH
27595: PPUSH
27596: PPUSH
27597: PPUSH
27598: PPUSH
27599: PPUSH
27600: PPUSH
27601: PPUSH
27602: PPUSH
27603: PPUSH
27604: PPUSH
27605: PPUSH
27606: PPUSH
27607: PPUSH
27608: PPUSH
27609: PPUSH
27610: PPUSH
27611: PPUSH
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
27616: PPUSH
27617: PPUSH
27618: PPUSH
27619: PPUSH
27620: PPUSH
27621: PPUSH
27622: PPUSH
27623: PPUSH
27624: PPUSH
27625: PPUSH
// result = [ ] ;
27626: LD_ADDR_VAR 0 7
27630: PUSH
27631: EMPTY
27632: ST_TO_ADDR
// temp_list = [ ] ;
27633: LD_ADDR_VAR 0 9
27637: PUSH
27638: EMPTY
27639: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
27640: LD_VAR 0 4
27644: PUSH
27645: LD_INT 0
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: LD_INT 2
27653: PUSH
27654: LD_INT 3
27656: PUSH
27657: LD_INT 4
27659: PUSH
27660: LD_INT 5
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: IN
27671: NOT
27672: PUSH
27673: LD_VAR 0 1
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: LD_INT 1
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: IN
27688: PUSH
27689: LD_VAR 0 5
27693: PUSH
27694: LD_INT 1
27696: PUSH
27697: LD_INT 2
27699: PUSH
27700: LD_INT 3
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: LIST
27707: IN
27708: NOT
27709: AND
27710: OR
27711: IFFALSE 27715
// exit ;
27713: GO 46100
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
27715: LD_VAR 0 1
27719: PUSH
27720: LD_INT 6
27722: PUSH
27723: LD_INT 7
27725: PUSH
27726: LD_INT 8
27728: PUSH
27729: LD_INT 13
27731: PUSH
27732: LD_INT 12
27734: PUSH
27735: LD_INT 15
27737: PUSH
27738: LD_INT 11
27740: PUSH
27741: LD_INT 14
27743: PUSH
27744: LD_INT 10
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: IN
27758: IFFALSE 27768
// btype = b_lab ;
27760: LD_ADDR_VAR 0 1
27764: PUSH
27765: LD_INT 6
27767: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
27768: LD_VAR 0 6
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 2
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: LIST
27786: IN
27787: NOT
27788: PUSH
27789: LD_VAR 0 1
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: LD_INT 1
27799: PUSH
27800: LD_INT 2
27802: PUSH
27803: LD_INT 3
27805: PUSH
27806: LD_INT 6
27808: PUSH
27809: LD_INT 36
27811: PUSH
27812: LD_INT 4
27814: PUSH
27815: LD_INT 5
27817: PUSH
27818: LD_INT 31
27820: PUSH
27821: LD_INT 32
27823: PUSH
27824: LD_INT 33
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: IN
27840: NOT
27841: PUSH
27842: LD_VAR 0 6
27846: PUSH
27847: LD_INT 1
27849: EQUAL
27850: AND
27851: OR
27852: PUSH
27853: LD_VAR 0 1
27857: PUSH
27858: LD_INT 2
27860: PUSH
27861: LD_INT 3
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: IN
27868: NOT
27869: PUSH
27870: LD_VAR 0 6
27874: PUSH
27875: LD_INT 2
27877: EQUAL
27878: AND
27879: OR
27880: IFFALSE 27890
// mode = 0 ;
27882: LD_ADDR_VAR 0 6
27886: PUSH
27887: LD_INT 0
27889: ST_TO_ADDR
// case mode of 0 :
27890: LD_VAR 0 6
27894: PUSH
27895: LD_INT 0
27897: DOUBLE
27898: EQUAL
27899: IFTRUE 27903
27901: GO 39356
27903: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27904: LD_ADDR_VAR 0 11
27908: PUSH
27909: LD_INT 0
27911: PUSH
27912: LD_INT 0
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: LD_INT 1
27924: NEG
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 1
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 1
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: LD_INT 1
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 1
27962: NEG
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 1
27973: NEG
27974: PUSH
27975: LD_INT 1
27977: NEG
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: PUSH
27987: LD_INT 2
27989: NEG
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: LD_INT 2
28000: NEG
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 1
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 1
28019: PUSH
28020: LD_INT 2
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: LD_INT 2
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 1
28039: NEG
28040: PUSH
28041: LD_INT 1
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: LD_INT 3
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 0
28060: PUSH
28061: LD_INT 3
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 1
28070: NEG
28071: PUSH
28072: LD_INT 2
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28097: LD_ADDR_VAR 0 12
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: LD_INT 0
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: LD_INT 1
28117: NEG
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 1
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 1
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 0
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 1
28155: NEG
28156: PUSH
28157: LD_INT 0
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: LD_INT 1
28170: NEG
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 1
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: LD_INT 0
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 2
28199: PUSH
28200: LD_INT 1
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 2
28220: NEG
28221: PUSH
28222: LD_INT 0
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: LD_INT 1
28235: NEG
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 2
28243: NEG
28244: PUSH
28245: LD_INT 1
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 3
28254: NEG
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 3
28265: NEG
28266: PUSH
28267: LD_INT 1
28269: NEG
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28293: LD_ADDR_VAR 0 13
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 0
28310: PUSH
28311: LD_INT 1
28313: NEG
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 1
28321: PUSH
28322: LD_INT 0
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: LD_INT 1
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 0
28341: PUSH
28342: LD_INT 1
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 1
28362: NEG
28363: PUSH
28364: LD_INT 1
28366: NEG
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 1
28374: NEG
28375: PUSH
28376: LD_INT 2
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 2
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 2
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 1
28406: PUSH
28407: LD_INT 2
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 2
28416: NEG
28417: PUSH
28418: LD_INT 1
28420: NEG
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 2
28428: NEG
28429: PUSH
28430: LD_INT 2
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 2
28440: NEG
28441: PUSH
28442: LD_INT 3
28444: NEG
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 3
28452: NEG
28453: PUSH
28454: LD_INT 2
28456: NEG
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 3
28464: NEG
28465: PUSH
28466: LD_INT 3
28468: NEG
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28492: LD_ADDR_VAR 0 14
28496: PUSH
28497: LD_INT 0
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 0
28509: PUSH
28510: LD_INT 1
28512: NEG
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 1
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 1
28530: PUSH
28531: LD_INT 1
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 0
28540: PUSH
28541: LD_INT 1
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 1
28550: NEG
28551: PUSH
28552: LD_INT 0
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 1
28561: NEG
28562: PUSH
28563: LD_INT 1
28565: NEG
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: LD_INT 2
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: LD_INT 2
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 1
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 0
28617: PUSH
28618: LD_INT 2
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 1
28627: NEG
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 1
28638: NEG
28639: PUSH
28640: LD_INT 3
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: LD_INT 3
28653: NEG
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 1
28661: PUSH
28662: LD_INT 2
28664: NEG
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28688: LD_ADDR_VAR 0 15
28692: PUSH
28693: LD_INT 0
28695: PUSH
28696: LD_INT 0
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 0
28705: PUSH
28706: LD_INT 1
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: LD_INT 0
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 1
28726: PUSH
28727: LD_INT 1
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 0
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 1
28746: NEG
28747: PUSH
28748: LD_INT 0
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 1
28757: NEG
28758: PUSH
28759: LD_INT 1
28761: NEG
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 1
28769: PUSH
28770: LD_INT 1
28772: NEG
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 2
28780: PUSH
28781: LD_INT 0
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 2
28790: PUSH
28791: LD_INT 1
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 1
28800: NEG
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 2
28811: NEG
28812: PUSH
28813: LD_INT 0
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 2
28822: NEG
28823: PUSH
28824: LD_INT 1
28826: NEG
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 2
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 3
28845: PUSH
28846: LD_INT 0
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 3
28855: PUSH
28856: LD_INT 1
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28881: LD_ADDR_VAR 0 16
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 1
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 1
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 0
28929: PUSH
28930: LD_INT 1
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 1
28939: NEG
28940: PUSH
28941: LD_INT 0
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 1
28950: NEG
28951: PUSH
28952: LD_INT 1
28954: NEG
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 1
28962: NEG
28963: PUSH
28964: LD_INT 2
28966: NEG
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 2
28974: PUSH
28975: LD_INT 1
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 2
28984: PUSH
28985: LD_INT 2
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 1
28994: PUSH
28995: LD_INT 2
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 2
29004: NEG
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 2
29016: NEG
29017: PUSH
29018: LD_INT 2
29020: NEG
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: LD_INT 2
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 3
29038: PUSH
29039: LD_INT 3
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 2
29048: PUSH
29049: LD_INT 3
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29074: LD_ADDR_VAR 0 17
29078: PUSH
29079: LD_INT 0
29081: PUSH
29082: LD_INT 0
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 0
29091: PUSH
29092: LD_INT 1
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 1
29102: PUSH
29103: LD_INT 0
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 1
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 0
29122: PUSH
29123: LD_INT 1
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 1
29132: NEG
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 1
29143: NEG
29144: PUSH
29145: LD_INT 1
29147: NEG
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 1
29155: NEG
29156: PUSH
29157: LD_INT 2
29159: NEG
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: LD_INT 2
29170: NEG
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: LD_INT 1
29181: NEG
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 2
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 2
29199: PUSH
29200: LD_INT 1
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 2
29209: PUSH
29210: LD_INT 2
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: LD_INT 2
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 0
29229: PUSH
29230: LD_INT 2
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 1
29239: NEG
29240: PUSH
29241: LD_INT 1
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 2
29250: NEG
29251: PUSH
29252: LD_INT 0
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 2
29261: NEG
29262: PUSH
29263: LD_INT 1
29265: NEG
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 2
29273: NEG
29274: PUSH
29275: LD_INT 2
29277: NEG
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29304: LD_ADDR_VAR 0 18
29308: PUSH
29309: LD_INT 0
29311: PUSH
29312: LD_INT 0
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 0
29321: PUSH
29322: LD_INT 1
29324: NEG
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: LD_INT 0
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 1
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 0
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 1
29362: NEG
29363: PUSH
29364: LD_INT 0
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 1
29373: NEG
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 1
29385: NEG
29386: PUSH
29387: LD_INT 2
29389: NEG
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 0
29397: PUSH
29398: LD_INT 2
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: LD_INT 1
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 2
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 2
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 2
29439: PUSH
29440: LD_INT 2
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 1
29449: PUSH
29450: LD_INT 2
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 0
29459: PUSH
29460: LD_INT 2
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 1
29469: NEG
29470: PUSH
29471: LD_INT 1
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 2
29480: NEG
29481: PUSH
29482: LD_INT 0
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 2
29491: NEG
29492: PUSH
29493: LD_INT 1
29495: NEG
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 2
29503: NEG
29504: PUSH
29505: LD_INT 2
29507: NEG
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29534: LD_ADDR_VAR 0 19
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: LD_INT 0
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 0
29551: PUSH
29552: LD_INT 1
29554: NEG
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 1
29562: PUSH
29563: LD_INT 0
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 0
29582: PUSH
29583: LD_INT 1
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 1
29592: NEG
29593: PUSH
29594: LD_INT 0
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 1
29603: NEG
29604: PUSH
29605: LD_INT 1
29607: NEG
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 1
29615: NEG
29616: PUSH
29617: LD_INT 2
29619: NEG
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 0
29627: PUSH
29628: LD_INT 2
29630: NEG
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 1
29638: PUSH
29639: LD_INT 1
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 2
29649: PUSH
29650: LD_INT 0
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 2
29659: PUSH
29660: LD_INT 1
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 2
29669: PUSH
29670: LD_INT 2
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: LD_INT 2
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 2
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: PUSH
29701: LD_INT 1
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 2
29710: NEG
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 2
29721: NEG
29722: PUSH
29723: LD_INT 1
29725: NEG
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 2
29733: NEG
29734: PUSH
29735: LD_INT 2
29737: NEG
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29764: LD_ADDR_VAR 0 20
29768: PUSH
29769: LD_INT 0
29771: PUSH
29772: LD_INT 0
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: LD_INT 1
29784: NEG
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 1
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 1
29802: PUSH
29803: LD_INT 1
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 0
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: LD_INT 0
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: LD_INT 1
29837: NEG
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 1
29845: NEG
29846: PUSH
29847: LD_INT 2
29849: NEG
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 0
29857: PUSH
29858: LD_INT 2
29860: NEG
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: LD_INT 1
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 2
29879: PUSH
29880: LD_INT 0
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 2
29889: PUSH
29890: LD_INT 1
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 2
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: LD_INT 2
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 0
29919: PUSH
29920: LD_INT 2
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: NEG
29930: PUSH
29931: LD_INT 1
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 2
29940: NEG
29941: PUSH
29942: LD_INT 0
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 2
29951: NEG
29952: PUSH
29953: LD_INT 1
29955: NEG
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 2
29963: NEG
29964: PUSH
29965: LD_INT 2
29967: NEG
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29994: LD_ADDR_VAR 0 21
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: LD_INT 1
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 1
30022: PUSH
30023: LD_INT 0
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 1
30032: PUSH
30033: LD_INT 1
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: LD_INT 1
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 1
30052: NEG
30053: PUSH
30054: LD_INT 0
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 1
30063: NEG
30064: PUSH
30065: LD_INT 1
30067: NEG
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 1
30075: NEG
30076: PUSH
30077: LD_INT 2
30079: NEG
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 0
30087: PUSH
30088: LD_INT 2
30090: NEG
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: LD_INT 1
30101: NEG
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 2
30109: PUSH
30110: LD_INT 0
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: LD_INT 2
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 1
30139: PUSH
30140: LD_INT 2
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 0
30149: PUSH
30150: LD_INT 2
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: NEG
30160: PUSH
30161: LD_INT 1
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 2
30170: NEG
30171: PUSH
30172: LD_INT 0
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 2
30181: NEG
30182: PUSH
30183: LD_INT 1
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 2
30193: NEG
30194: PUSH
30195: LD_INT 2
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30224: LD_ADDR_VAR 0 22
30228: PUSH
30229: LD_INT 0
30231: PUSH
30232: LD_INT 0
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 1
30252: PUSH
30253: LD_INT 0
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 1
30262: PUSH
30263: LD_INT 1
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 0
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 1
30282: NEG
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 1
30293: NEG
30294: PUSH
30295: LD_INT 1
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 1
30305: NEG
30306: PUSH
30307: LD_INT 2
30309: NEG
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 0
30317: PUSH
30318: LD_INT 2
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: LD_INT 1
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 2
30339: PUSH
30340: LD_INT 0
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 2
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: LD_INT 2
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 1
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 0
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 1
30389: NEG
30390: PUSH
30391: LD_INT 1
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 2
30400: NEG
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 2
30411: NEG
30412: PUSH
30413: LD_INT 1
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 2
30423: NEG
30424: PUSH
30425: LD_INT 2
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30454: LD_ADDR_VAR 0 23
30458: PUSH
30459: LD_INT 0
30461: PUSH
30462: LD_INT 0
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: LD_INT 1
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 1
30482: PUSH
30483: LD_INT 0
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 1
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 0
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 1
30512: NEG
30513: PUSH
30514: LD_INT 0
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 1
30523: NEG
30524: PUSH
30525: LD_INT 1
30527: NEG
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 1
30535: NEG
30536: PUSH
30537: LD_INT 2
30539: NEG
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 0
30547: PUSH
30548: LD_INT 2
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: LD_INT 1
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 2
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 2
30579: PUSH
30580: LD_INT 1
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 2
30589: PUSH
30590: LD_INT 2
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 1
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: LD_INT 2
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 1
30619: NEG
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 2
30630: NEG
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 2
30641: NEG
30642: PUSH
30643: LD_INT 1
30645: NEG
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 2
30653: NEG
30654: PUSH
30655: LD_INT 2
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 2
30665: NEG
30666: PUSH
30667: LD_INT 3
30669: NEG
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 1
30677: NEG
30678: PUSH
30679: LD_INT 3
30681: NEG
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: LD_INT 2
30692: NEG
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 2
30700: PUSH
30701: LD_INT 1
30703: NEG
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
30734: LD_ADDR_VAR 0 24
30738: PUSH
30739: LD_INT 0
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 0
30751: PUSH
30752: LD_INT 1
30754: NEG
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: LD_INT 0
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 1
30772: PUSH
30773: LD_INT 1
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 0
30782: PUSH
30783: LD_INT 1
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 1
30792: NEG
30793: PUSH
30794: LD_INT 0
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: LD_INT 1
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 1
30815: NEG
30816: PUSH
30817: LD_INT 2
30819: NEG
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 0
30827: PUSH
30828: LD_INT 2
30830: NEG
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: LD_INT 1
30841: NEG
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 2
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 2
30859: PUSH
30860: LD_INT 1
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 2
30869: PUSH
30870: LD_INT 2
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: LD_INT 2
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 0
30889: PUSH
30890: LD_INT 2
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 1
30899: NEG
30900: PUSH
30901: LD_INT 1
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 2
30910: NEG
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 2
30921: NEG
30922: PUSH
30923: LD_INT 1
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 2
30933: NEG
30934: PUSH
30935: LD_INT 2
30937: NEG
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: LD_INT 2
30948: NEG
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 2
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 3
30967: PUSH
30968: LD_INT 1
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 3
30977: PUSH
30978: LD_INT 2
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
31010: LD_ADDR_VAR 0 25
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: LD_INT 0
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 0
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 1
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 1
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: LD_INT 1
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 1
31068: NEG
31069: PUSH
31070: LD_INT 0
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: NEG
31080: PUSH
31081: LD_INT 1
31083: NEG
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: PUSH
31093: LD_INT 2
31095: NEG
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 0
31103: PUSH
31104: LD_INT 2
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: LD_INT 1
31117: NEG
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 2
31125: PUSH
31126: LD_INT 0
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 2
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: LD_INT 2
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 1
31155: PUSH
31156: LD_INT 2
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: LD_INT 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: NEG
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 2
31186: NEG
31187: PUSH
31188: LD_INT 0
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 2
31197: NEG
31198: PUSH
31199: LD_INT 1
31201: NEG
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 2
31209: NEG
31210: PUSH
31211: LD_INT 2
31213: NEG
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 3
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 3
31231: PUSH
31232: LD_INT 2
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 2
31241: PUSH
31242: LD_INT 3
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: LD_INT 3
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31284: LD_ADDR_VAR 0 26
31288: PUSH
31289: LD_INT 0
31291: PUSH
31292: LD_INT 0
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: LD_INT 1
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 1
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 0
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 1
31342: NEG
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 1
31353: NEG
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 1
31365: NEG
31366: PUSH
31367: LD_INT 2
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 0
31377: PUSH
31378: LD_INT 2
31380: NEG
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 1
31388: PUSH
31389: LD_INT 1
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: LD_INT 0
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 2
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 2
31419: PUSH
31420: LD_INT 2
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 1
31429: PUSH
31430: LD_INT 2
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 0
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 1
31449: NEG
31450: PUSH
31451: LD_INT 1
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 2
31460: NEG
31461: PUSH
31462: LD_INT 0
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 2
31471: NEG
31472: PUSH
31473: LD_INT 1
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 2
31483: NEG
31484: PUSH
31485: LD_INT 2
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: LD_INT 3
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: LD_INT 3
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 1
31515: NEG
31516: PUSH
31517: LD_INT 2
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 2
31526: NEG
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31560: LD_ADDR_VAR 0 27
31564: PUSH
31565: LD_INT 0
31567: PUSH
31568: LD_INT 0
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 0
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 1
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: LD_INT 1
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: LD_INT 1
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 1
31618: NEG
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 1
31629: NEG
31630: PUSH
31631: LD_INT 1
31633: NEG
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 1
31641: NEG
31642: PUSH
31643: LD_INT 2
31645: NEG
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 0
31653: PUSH
31654: LD_INT 2
31656: NEG
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 1
31664: PUSH
31665: LD_INT 1
31667: NEG
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 2
31675: PUSH
31676: LD_INT 0
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 2
31685: PUSH
31686: LD_INT 1
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 2
31695: PUSH
31696: LD_INT 2
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 1
31705: PUSH
31706: LD_INT 2
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 0
31715: PUSH
31716: LD_INT 2
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 2
31736: NEG
31737: PUSH
31738: LD_INT 0
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 2
31747: NEG
31748: PUSH
31749: LD_INT 1
31751: NEG
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 2
31759: NEG
31760: PUSH
31761: LD_INT 2
31763: NEG
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 1
31771: NEG
31772: PUSH
31773: LD_INT 2
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 2
31782: NEG
31783: PUSH
31784: LD_INT 1
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 3
31793: NEG
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 3
31805: NEG
31806: PUSH
31807: LD_INT 2
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31840: LD_ADDR_VAR 0 28
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: LD_INT 0
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 1
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 1
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 0
31888: PUSH
31889: LD_INT 1
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: NEG
31899: PUSH
31900: LD_INT 0
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: NEG
31910: PUSH
31911: LD_INT 1
31913: NEG
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 1
31921: NEG
31922: PUSH
31923: LD_INT 2
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 0
31933: PUSH
31934: LD_INT 2
31936: NEG
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 1
31944: PUSH
31945: LD_INT 1
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 2
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 2
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 2
31975: PUSH
31976: LD_INT 2
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 1
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: LD_INT 2
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 1
32005: NEG
32006: PUSH
32007: LD_INT 1
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 2
32016: NEG
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 2
32027: NEG
32028: PUSH
32029: LD_INT 1
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 2
32039: NEG
32040: PUSH
32041: LD_INT 2
32043: NEG
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: LD_INT 3
32055: NEG
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: LD_INT 3
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 3
32075: NEG
32076: PUSH
32077: LD_INT 1
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 3
32087: NEG
32088: PUSH
32089: LD_INT 2
32091: NEG
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32122: LD_ADDR_VAR 0 29
32126: PUSH
32127: LD_INT 0
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 0
32139: PUSH
32140: LD_INT 1
32142: NEG
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 1
32150: PUSH
32151: LD_INT 0
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 0
32170: PUSH
32171: LD_INT 1
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 1
32180: NEG
32181: PUSH
32182: LD_INT 0
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 1
32191: NEG
32192: PUSH
32193: LD_INT 1
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 1
32203: NEG
32204: PUSH
32205: LD_INT 2
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: LD_INT 2
32218: NEG
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 1
32226: PUSH
32227: LD_INT 1
32229: NEG
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 2
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 2
32247: PUSH
32248: LD_INT 1
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: LD_INT 2
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 0
32267: PUSH
32268: LD_INT 2
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: LD_INT 1
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 2
32288: NEG
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 2
32300: NEG
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 2
32312: NEG
32313: PUSH
32314: LD_INT 3
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 2
32324: PUSH
32325: LD_INT 1
32327: NEG
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 3
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 1
32345: PUSH
32346: LD_INT 3
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: LD_INT 2
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 3
32366: NEG
32367: PUSH
32368: LD_INT 2
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32401: LD_ADDR_VAR 0 30
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 0
32418: PUSH
32419: LD_INT 1
32421: NEG
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: LD_INT 1
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 0
32449: PUSH
32450: LD_INT 1
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: NEG
32460: PUSH
32461: LD_INT 0
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: LD_INT 1
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: NEG
32483: PUSH
32484: LD_INT 2
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 1
32505: PUSH
32506: LD_INT 1
32508: NEG
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 2
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 2
32526: PUSH
32527: LD_INT 1
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: LD_INT 2
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 1
32546: PUSH
32547: LD_INT 2
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 1
32556: NEG
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 2
32567: NEG
32568: PUSH
32569: LD_INT 0
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 2
32578: NEG
32579: PUSH
32580: LD_INT 1
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: LD_INT 3
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 1
32602: PUSH
32603: LD_INT 2
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 3
32613: PUSH
32614: LD_INT 2
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 2
32623: PUSH
32624: LD_INT 3
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 2
32633: NEG
32634: PUSH
32635: LD_INT 1
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 3
32644: NEG
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32679: LD_ADDR_VAR 0 31
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 0
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 1
32748: NEG
32749: PUSH
32750: LD_INT 1
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: NEG
32761: PUSH
32762: LD_INT 2
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 1
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 2
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 2
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 2
32803: PUSH
32804: LD_INT 2
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: LD_INT 2
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: LD_INT 2
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 1
32833: NEG
32834: PUSH
32835: LD_INT 1
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 2
32844: NEG
32845: PUSH
32846: LD_INT 1
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 2
32856: NEG
32857: PUSH
32858: LD_INT 2
32860: NEG
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 2
32868: NEG
32869: PUSH
32870: LD_INT 3
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: PUSH
32881: LD_INT 1
32883: NEG
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 3
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: LD_INT 3
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 1
32911: NEG
32912: PUSH
32913: LD_INT 2
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 3
32922: NEG
32923: PUSH
32924: LD_INT 2
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32957: LD_ADDR_VAR 0 32
32961: PUSH
32962: LD_INT 0
32964: PUSH
32965: LD_INT 0
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 0
32974: PUSH
32975: LD_INT 1
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 1
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 1
32995: PUSH
32996: LD_INT 1
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: LD_INT 1
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 1
33015: NEG
33016: PUSH
33017: LD_INT 0
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 1
33026: NEG
33027: PUSH
33028: LD_INT 1
33030: NEG
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 1
33038: NEG
33039: PUSH
33040: LD_INT 2
33042: NEG
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 0
33050: PUSH
33051: LD_INT 2
33053: NEG
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 1
33061: PUSH
33062: LD_INT 1
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: PUSH
33073: LD_INT 1
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 2
33082: PUSH
33083: LD_INT 2
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: PUSH
33093: LD_INT 2
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 0
33102: PUSH
33103: LD_INT 2
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 1
33112: NEG
33113: PUSH
33114: LD_INT 1
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 2
33123: NEG
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 2
33134: NEG
33135: PUSH
33136: LD_INT 1
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: NEG
33147: PUSH
33148: LD_INT 3
33150: NEG
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 1
33158: PUSH
33159: LD_INT 2
33161: NEG
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 3
33169: PUSH
33170: LD_INT 2
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 2
33179: PUSH
33180: LD_INT 3
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 2
33189: NEG
33190: PUSH
33191: LD_INT 1
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 3
33200: NEG
33201: PUSH
33202: LD_INT 1
33204: NEG
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33235: LD_ADDR_VAR 0 33
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 0
33252: PUSH
33253: LD_INT 1
33255: NEG
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 1
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 1
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: LD_INT 1
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: LD_INT 1
33308: NEG
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 1
33316: NEG
33317: PUSH
33318: LD_INT 2
33320: NEG
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: LD_INT 1
33331: NEG
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 2
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 2
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 1
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: LD_INT 2
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: NEG
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 2
33390: NEG
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 2
33401: NEG
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 2
33413: NEG
33414: PUSH
33415: LD_INT 2
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 2
33425: NEG
33426: PUSH
33427: LD_INT 3
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 2
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 3
33448: PUSH
33449: LD_INT 1
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 1
33458: PUSH
33459: LD_INT 3
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 1
33468: NEG
33469: PUSH
33470: LD_INT 2
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 3
33479: NEG
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33514: LD_ADDR_VAR 0 34
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 0
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 1
33572: NEG
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: LD_INT 2
33599: NEG
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: LD_INT 2
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: LD_INT 1
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 2
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 2
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: NEG
33660: PUSH
33661: LD_INT 1
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 2
33670: NEG
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 2
33681: NEG
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 2
33693: NEG
33694: PUSH
33695: LD_INT 2
33697: NEG
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: LD_INT 3
33709: NEG
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 1
33717: PUSH
33718: LD_INT 2
33720: NEG
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 3
33728: PUSH
33729: LD_INT 2
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 2
33738: PUSH
33739: LD_INT 3
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 2
33748: NEG
33749: PUSH
33750: LD_INT 1
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 3
33759: NEG
33760: PUSH
33761: LD_INT 1
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33794: LD_ADDR_VAR 0 35
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 0
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 1
33822: PUSH
33823: LD_INT 0
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: LD_INT 1
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 0
33842: PUSH
33843: LD_INT 1
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 1
33852: NEG
33853: PUSH
33854: LD_INT 0
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 1
33863: NEG
33864: PUSH
33865: LD_INT 1
33867: NEG
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 2
33875: PUSH
33876: LD_INT 1
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 2
33885: NEG
33886: PUSH
33887: LD_INT 1
33889: NEG
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33906: LD_ADDR_VAR 0 36
33910: PUSH
33911: LD_INT 0
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: LD_INT 1
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: PUSH
33935: LD_INT 0
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 1
33964: NEG
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: NEG
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: LD_INT 2
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: LD_INT 2
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34018: LD_ADDR_VAR 0 37
34022: PUSH
34023: LD_INT 0
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: LD_INT 0
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: LD_INT 1
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 1
34087: NEG
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 1
34099: PUSH
34100: LD_INT 1
34102: NEG
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 1
34110: NEG
34111: PUSH
34112: LD_INT 1
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34130: LD_ADDR_VAR 0 38
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: LD_INT 0
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 0
34147: PUSH
34148: LD_INT 1
34150: NEG
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 1
34168: PUSH
34169: LD_INT 1
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 0
34178: PUSH
34179: LD_INT 1
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 1
34188: NEG
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 1
34199: NEG
34200: PUSH
34201: LD_INT 1
34203: NEG
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 2
34211: PUSH
34212: LD_INT 1
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 2
34221: NEG
34222: PUSH
34223: LD_INT 1
34225: NEG
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34242: LD_ADDR_VAR 0 39
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 0
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 1
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 0
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 1
34300: NEG
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 1
34311: NEG
34312: PUSH
34313: LD_INT 1
34315: NEG
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: LD_INT 2
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: PUSH
34336: LD_INT 2
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34354: LD_ADDR_VAR 0 40
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: LD_INT 1
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 1
34412: NEG
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 1
34423: NEG
34424: PUSH
34425: LD_INT 1
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: PUSH
34436: LD_INT 1
34438: NEG
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: LD_INT 1
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34466: LD_ADDR_VAR 0 41
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 0
34483: PUSH
34484: LD_INT 1
34486: NEG
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: LD_INT 1
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 0
34514: PUSH
34515: LD_INT 1
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 1
34524: NEG
34525: PUSH
34526: LD_INT 0
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 1
34535: NEG
34536: PUSH
34537: LD_INT 1
34539: NEG
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: NEG
34548: PUSH
34549: LD_INT 2
34551: NEG
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 1
34559: PUSH
34560: LD_INT 1
34562: NEG
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 2
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 2
34580: PUSH
34581: LD_INT 1
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 2
34590: PUSH
34591: LD_INT 2
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 1
34600: PUSH
34601: LD_INT 2
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 1
34610: NEG
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 2
34621: NEG
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 2
34632: NEG
34633: PUSH
34634: LD_INT 1
34636: NEG
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 2
34644: NEG
34645: PUSH
34646: LD_INT 2
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 2
34656: NEG
34657: PUSH
34658: LD_INT 3
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 2
34668: PUSH
34669: LD_INT 1
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 3
34679: PUSH
34680: LD_INT 0
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 3
34689: PUSH
34690: LD_INT 1
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 3
34699: PUSH
34700: LD_INT 2
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 3
34709: PUSH
34710: LD_INT 3
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 2
34719: PUSH
34720: LD_INT 3
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 2
34729: NEG
34730: PUSH
34731: LD_INT 1
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 3
34740: NEG
34741: PUSH
34742: LD_INT 0
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 3
34751: NEG
34752: PUSH
34753: LD_INT 1
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 3
34763: NEG
34764: PUSH
34765: LD_INT 2
34767: NEG
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 3
34775: NEG
34776: PUSH
34777: LD_INT 3
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34816: LD_ADDR_VAR 0 42
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: LD_INT 0
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: LD_INT 1
34836: NEG
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 1
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: NEG
34886: PUSH
34887: LD_INT 1
34889: NEG
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 1
34897: NEG
34898: PUSH
34899: LD_INT 2
34901: NEG
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 0
34909: PUSH
34910: LD_INT 2
34912: NEG
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: PUSH
34921: LD_INT 1
34923: NEG
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 2
34931: PUSH
34932: LD_INT 1
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: LD_INT 2
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 1
34951: PUSH
34952: LD_INT 2
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 1
34971: NEG
34972: PUSH
34973: LD_INT 1
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 2
34982: NEG
34983: PUSH
34984: LD_INT 1
34986: NEG
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 2
34994: NEG
34995: PUSH
34996: LD_INT 2
34998: NEG
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 2
35006: NEG
35007: PUSH
35008: LD_INT 3
35010: NEG
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 1
35018: NEG
35019: PUSH
35020: LD_INT 3
35022: NEG
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 0
35030: PUSH
35031: LD_INT 3
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 1
35041: PUSH
35042: LD_INT 2
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 3
35052: PUSH
35053: LD_INT 2
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 3
35062: PUSH
35063: LD_INT 3
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 2
35072: PUSH
35073: LD_INT 3
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 1
35082: PUSH
35083: LD_INT 3
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: LD_INT 3
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: LD_INT 2
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 3
35113: NEG
35114: PUSH
35115: LD_INT 2
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 3
35125: NEG
35126: PUSH
35127: LD_INT 3
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35166: LD_ADDR_VAR 0 43
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 0
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 1
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 1
35204: PUSH
35205: LD_INT 1
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: LD_INT 1
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: LD_INT 0
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 1
35235: NEG
35236: PUSH
35237: LD_INT 1
35239: NEG
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 1
35247: NEG
35248: PUSH
35249: LD_INT 2
35251: NEG
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: LD_INT 2
35262: NEG
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: LD_INT 1
35273: NEG
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 2
35281: PUSH
35282: LD_INT 0
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 2
35291: PUSH
35292: LD_INT 1
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: LD_INT 2
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: LD_INT 2
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 2
35332: NEG
35333: PUSH
35334: LD_INT 0
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 2
35343: NEG
35344: PUSH
35345: LD_INT 1
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: LD_INT 3
35359: NEG
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 0
35367: PUSH
35368: LD_INT 3
35370: NEG
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 1
35378: PUSH
35379: LD_INT 2
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 2
35389: PUSH
35390: LD_INT 1
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 3
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 3
35410: PUSH
35411: LD_INT 1
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 1
35420: PUSH
35421: LD_INT 3
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: LD_INT 3
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: LD_INT 2
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 2
35451: NEG
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 3
35462: NEG
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 3
35473: NEG
35474: PUSH
35475: LD_INT 1
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35514: LD_ADDR_VAR 0 44
35518: PUSH
35519: LD_INT 0
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: LD_INT 1
35534: NEG
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 1
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 1
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 0
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: NEG
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: NEG
35596: PUSH
35597: LD_INT 2
35599: NEG
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 1
35607: PUSH
35608: LD_INT 1
35610: NEG
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 2
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 2
35628: PUSH
35629: LD_INT 1
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 2
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: LD_INT 2
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 2
35669: NEG
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 2
35680: NEG
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 2
35692: NEG
35693: PUSH
35694: LD_INT 2
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 2
35704: NEG
35705: PUSH
35706: LD_INT 3
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 2
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 3
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 3
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 3
35747: PUSH
35748: LD_INT 2
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 3
35757: PUSH
35758: LD_INT 3
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: LD_INT 3
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 2
35777: NEG
35778: PUSH
35779: LD_INT 1
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 3
35788: NEG
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 3
35799: NEG
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 3
35811: NEG
35812: PUSH
35813: LD_INT 2
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 3
35823: NEG
35824: PUSH
35825: LD_INT 3
35827: NEG
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35864: LD_ADDR_VAR 0 45
35868: PUSH
35869: LD_INT 0
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 0
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 1
35892: PUSH
35893: LD_INT 0
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 1
35902: PUSH
35903: LD_INT 1
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 0
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 1
35922: NEG
35923: PUSH
35924: LD_INT 0
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 1
35933: NEG
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 1
35945: NEG
35946: PUSH
35947: LD_INT 2
35949: NEG
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: LD_INT 2
35960: NEG
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 2
35979: PUSH
35980: LD_INT 1
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 2
35989: PUSH
35990: LD_INT 2
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: LD_INT 2
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: LD_INT 2
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 2
36030: NEG
36031: PUSH
36032: LD_INT 1
36034: NEG
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 2
36042: NEG
36043: PUSH
36044: LD_INT 2
36046: NEG
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 2
36054: NEG
36055: PUSH
36056: LD_INT 3
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: PUSH
36068: LD_INT 3
36070: NEG
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: LD_INT 3
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: LD_INT 2
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 3
36100: PUSH
36101: LD_INT 2
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 3
36110: PUSH
36111: LD_INT 3
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 2
36120: PUSH
36121: LD_INT 3
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: LD_INT 3
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: LD_INT 3
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: LD_INT 2
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 3
36161: NEG
36162: PUSH
36163: LD_INT 2
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 3
36173: NEG
36174: PUSH
36175: LD_INT 3
36177: NEG
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36214: LD_ADDR_VAR 0 46
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 1
36252: PUSH
36253: LD_INT 1
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: LD_INT 1
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 1
36272: NEG
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: LD_INT 1
36287: NEG
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 1
36295: NEG
36296: PUSH
36297: LD_INT 2
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: LD_INT 2
36310: NEG
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: PUSH
36319: LD_INT 1
36321: NEG
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 2
36329: PUSH
36330: LD_INT 0
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 2
36339: PUSH
36340: LD_INT 1
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: LD_INT 2
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: LD_INT 2
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 2
36380: NEG
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 2
36391: NEG
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: LD_INT 3
36407: NEG
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: LD_INT 3
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: LD_INT 2
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 2
36437: PUSH
36438: LD_INT 1
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 3
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 3
36458: PUSH
36459: LD_INT 1
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 1
36468: PUSH
36469: LD_INT 3
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: LD_INT 3
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: NEG
36489: PUSH
36490: LD_INT 2
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: LD_INT 1
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 3
36510: NEG
36511: PUSH
36512: LD_INT 0
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 3
36521: NEG
36522: PUSH
36523: LD_INT 1
36525: NEG
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36562: LD_ADDR_VAR 0 47
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 0
36610: PUSH
36611: LD_INT 1
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 1
36631: NEG
36632: PUSH
36633: LD_INT 1
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 1
36643: NEG
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: LD_INT 2
36658: NEG
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 1
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 2
36677: NEG
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 2
36689: NEG
36690: PUSH
36691: LD_INT 2
36693: NEG
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36713: LD_ADDR_VAR 0 48
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 1
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 0
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: LD_INT 0
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: NEG
36795: PUSH
36796: LD_INT 2
36798: NEG
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 0
36806: PUSH
36807: LD_INT 2
36809: NEG
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 1
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 2
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 2
36838: PUSH
36839: LD_INT 1
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36860: LD_ADDR_VAR 0 49
36864: PUSH
36865: LD_INT 0
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: LD_INT 1
36880: NEG
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 1
36898: PUSH
36899: LD_INT 1
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 0
36908: PUSH
36909: LD_INT 1
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 1
36918: NEG
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: LD_INT 1
36933: NEG
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: LD_INT 1
36944: NEG
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 2
36952: PUSH
36953: LD_INT 0
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 2
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: LD_INT 2
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 1
36982: PUSH
36983: LD_INT 2
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37004: LD_ADDR_VAR 0 50
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: LD_INT 1
37024: NEG
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 1
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: LD_INT 1
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 2
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 2
37095: PUSH
37096: LD_INT 2
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 1
37105: PUSH
37106: LD_INT 2
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 0
37115: PUSH
37116: LD_INT 2
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 1
37125: NEG
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37148: LD_ADDR_VAR 0 51
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: LD_INT 1
37168: NEG
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: PUSH
37177: LD_INT 0
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 1
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 1
37206: NEG
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 1
37217: NEG
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 1
37229: PUSH
37230: LD_INT 2
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: LD_INT 2
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 1
37249: NEG
37250: PUSH
37251: LD_INT 1
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 2
37260: NEG
37261: PUSH
37262: LD_INT 0
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 2
37271: NEG
37272: PUSH
37273: LD_INT 1
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37295: LD_ADDR_VAR 0 52
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 0
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: NEG
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 1
37376: NEG
37377: PUSH
37378: LD_INT 2
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: NEG
37389: PUSH
37390: LD_INT 1
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 2
37399: NEG
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 2
37410: NEG
37411: PUSH
37412: LD_INT 1
37414: NEG
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 2
37422: NEG
37423: PUSH
37424: LD_INT 2
37426: NEG
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37446: LD_ADDR_VAR 0 53
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 1
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 1
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: LD_INT 1
37519: NEG
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: LD_INT 2
37531: NEG
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 0
37539: PUSH
37540: LD_INT 2
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 1
37550: PUSH
37551: LD_INT 1
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 2
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 2
37571: PUSH
37572: LD_INT 1
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 2
37581: PUSH
37582: LD_INT 2
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: LD_INT 2
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 0
37601: PUSH
37602: LD_INT 2
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 2
37622: NEG
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 2
37633: NEG
37634: PUSH
37635: LD_INT 1
37637: NEG
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 2
37645: NEG
37646: PUSH
37647: LD_INT 2
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37676: LD_ADDR_VAR 0 54
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: NEG
37746: PUSH
37747: LD_INT 1
37749: NEG
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: LD_INT 2
37761: NEG
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: LD_INT 2
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: LD_INT 1
37783: NEG
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: LD_INT 1
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: LD_INT 2
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: LD_INT 2
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 0
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 2
37852: NEG
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 2
37863: NEG
37864: PUSH
37865: LD_INT 1
37867: NEG
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 2
37875: NEG
37876: PUSH
37877: LD_INT 2
37879: NEG
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37906: LD_ADDR_VAR 0 55
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 0
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: LD_INT 1
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 1
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 1
37964: NEG
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: LD_INT 1
37979: NEG
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: NEG
37988: PUSH
37989: LD_INT 2
37991: NEG
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: LD_INT 2
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: LD_INT 1
38013: NEG
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 2
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 2
38041: PUSH
38042: LD_INT 2
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 0
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: NEG
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 2
38082: NEG
38083: PUSH
38084: LD_INT 0
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 2
38093: NEG
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 2
38105: NEG
38106: PUSH
38107: LD_INT 2
38109: NEG
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38136: LD_ADDR_VAR 0 56
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 1
38164: PUSH
38165: LD_INT 0
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 1
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 0
38184: PUSH
38185: LD_INT 1
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 1
38194: NEG
38195: PUSH
38196: LD_INT 0
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: LD_INT 1
38209: NEG
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: LD_INT 2
38221: NEG
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 0
38229: PUSH
38230: LD_INT 2
38232: NEG
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 1
38240: PUSH
38241: LD_INT 1
38243: NEG
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 2
38251: PUSH
38252: LD_INT 0
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 2
38261: PUSH
38262: LD_INT 1
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 2
38271: PUSH
38272: LD_INT 2
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: LD_INT 2
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: LD_INT 2
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: NEG
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 2
38312: NEG
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 2
38323: NEG
38324: PUSH
38325: LD_INT 1
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 2
38335: NEG
38336: PUSH
38337: LD_INT 2
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38366: LD_ADDR_VAR 0 57
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 1
38386: NEG
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: LD_INT 0
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: LD_INT 1
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 1
38424: NEG
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 1
38435: NEG
38436: PUSH
38437: LD_INT 1
38439: NEG
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: LD_INT 2
38451: NEG
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 0
38459: PUSH
38460: LD_INT 2
38462: NEG
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 1
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 2
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: LD_INT 1
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 2
38501: PUSH
38502: LD_INT 2
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 1
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 2
38542: NEG
38543: PUSH
38544: LD_INT 0
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 2
38553: NEG
38554: PUSH
38555: LD_INT 1
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 2
38565: NEG
38566: PUSH
38567: LD_INT 2
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38596: LD_ADDR_VAR 0 58
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: LD_INT 0
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: LD_INT 1
38616: NEG
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 1
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: LD_INT 1
38669: NEG
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: LD_INT 2
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: LD_INT 2
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 1
38700: PUSH
38701: LD_INT 1
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 2
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 2
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 2
38731: PUSH
38732: LD_INT 2
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: LD_INT 2
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 0
38751: PUSH
38752: LD_INT 2
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: NEG
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 2
38772: NEG
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 2
38783: NEG
38784: PUSH
38785: LD_INT 1
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 2
38795: NEG
38796: PUSH
38797: LD_INT 2
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38826: LD_ADDR_VAR 0 59
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: LD_INT 1
38846: NEG
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38914: LD_ADDR_VAR 0 60
38918: PUSH
38919: LD_INT 0
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: LD_INT 1
38934: NEG
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 1
38942: PUSH
38943: LD_INT 0
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: LD_INT 1
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39002: LD_ADDR_VAR 0 61
39006: PUSH
39007: LD_INT 0
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 1
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 1
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: NEG
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39090: LD_ADDR_VAR 0 62
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 0
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: LD_INT 1
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: LD_INT 0
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: LD_INT 1
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39178: LD_ADDR_VAR 0 63
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: LD_INT 1
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: LD_INT 1
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 1
39247: NEG
39248: PUSH
39249: LD_INT 1
39251: NEG
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39266: LD_ADDR_VAR 0 64
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 1
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: ST_TO_ADDR
// end ; 1 :
39354: GO 45251
39356: LD_INT 1
39358: DOUBLE
39359: EQUAL
39360: IFTRUE 39364
39362: GO 41987
39364: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39365: LD_ADDR_VAR 0 11
39369: PUSH
39370: LD_INT 1
39372: NEG
39373: PUSH
39374: LD_INT 3
39376: NEG
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: LD_INT 3
39387: NEG
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: LD_INT 2
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: LIST
39408: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39409: LD_ADDR_VAR 0 12
39413: PUSH
39414: LD_INT 2
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 3
39427: PUSH
39428: LD_INT 0
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 3
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: LIST
39449: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39450: LD_ADDR_VAR 0 13
39454: PUSH
39455: LD_INT 3
39457: PUSH
39458: LD_INT 2
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 3
39467: PUSH
39468: LD_INT 3
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 2
39477: PUSH
39478: LD_INT 3
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: LIST
39489: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39490: LD_ADDR_VAR 0 14
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: LD_INT 3
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: LD_INT 3
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: NEG
39518: PUSH
39519: LD_INT 2
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: LIST
39530: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39531: LD_ADDR_VAR 0 15
39535: PUSH
39536: LD_INT 2
39538: NEG
39539: PUSH
39540: LD_INT 1
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 3
39549: NEG
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 3
39560: NEG
39561: PUSH
39562: LD_INT 1
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: LIST
39574: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39575: LD_ADDR_VAR 0 16
39579: PUSH
39580: LD_INT 2
39582: NEG
39583: PUSH
39584: LD_INT 3
39586: NEG
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 3
39594: NEG
39595: PUSH
39596: LD_INT 2
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 3
39606: NEG
39607: PUSH
39608: LD_INT 3
39610: NEG
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: LIST
39620: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39621: LD_ADDR_VAR 0 17
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: LD_INT 3
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: LD_INT 3
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: LIST
39664: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39665: LD_ADDR_VAR 0 18
39669: PUSH
39670: LD_INT 2
39672: PUSH
39673: LD_INT 1
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 3
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 3
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: LIST
39705: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39706: LD_ADDR_VAR 0 19
39710: PUSH
39711: LD_INT 3
39713: PUSH
39714: LD_INT 2
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 3
39723: PUSH
39724: LD_INT 3
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 2
39733: PUSH
39734: LD_INT 3
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: LIST
39745: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39746: LD_ADDR_VAR 0 20
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: LD_INT 3
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: LD_INT 3
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: LD_INT 2
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: LIST
39786: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39787: LD_ADDR_VAR 0 21
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 3
39805: NEG
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 3
39816: NEG
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39831: LD_ADDR_VAR 0 22
39835: PUSH
39836: LD_INT 2
39838: NEG
39839: PUSH
39840: LD_INT 3
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 3
39850: NEG
39851: PUSH
39852: LD_INT 2
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 3
39862: NEG
39863: PUSH
39864: LD_INT 3
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: LIST
39876: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39877: LD_ADDR_VAR 0 23
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: LD_INT 3
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: LD_INT 4
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: LD_INT 3
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: LIST
39920: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39921: LD_ADDR_VAR 0 24
39925: PUSH
39926: LD_INT 3
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 3
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 4
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: LIST
39961: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39962: LD_ADDR_VAR 0 25
39966: PUSH
39967: LD_INT 3
39969: PUSH
39970: LD_INT 3
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 4
39979: PUSH
39980: LD_INT 3
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 3
39989: PUSH
39990: LD_INT 4
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: LIST
40001: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
40002: LD_ADDR_VAR 0 26
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 3
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: LD_INT 4
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: LD_INT 3
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: LIST
40042: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
40043: LD_ADDR_VAR 0 27
40047: PUSH
40048: LD_INT 3
40050: NEG
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 3
40061: NEG
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 4
40072: NEG
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: LIST
40086: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
40087: LD_ADDR_VAR 0 28
40091: PUSH
40092: LD_INT 3
40094: NEG
40095: PUSH
40096: LD_INT 3
40098: NEG
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 3
40106: NEG
40107: PUSH
40108: LD_INT 4
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 4
40118: NEG
40119: PUSH
40120: LD_INT 3
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: LIST
40132: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
40133: LD_ADDR_VAR 0 29
40137: PUSH
40138: LD_INT 1
40140: NEG
40141: PUSH
40142: LD_INT 3
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 3
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: LD_INT 2
40166: NEG
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: LD_INT 4
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: LD_INT 4
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 1
40197: PUSH
40198: LD_INT 3
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: LD_INT 5
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 5
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: LD_INT 4
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: LD_INT 6
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: LD_INT 6
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: LD_INT 5
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
40288: LD_ADDR_VAR 0 30
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 3
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 3
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 3
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 4
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 4
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 4
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 5
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 5
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 5
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 6
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 6
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
40431: LD_ADDR_VAR 0 31
40435: PUSH
40436: LD_INT 3
40438: PUSH
40439: LD_INT 2
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 3
40448: PUSH
40449: LD_INT 3
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: LD_INT 3
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 4
40468: PUSH
40469: LD_INT 3
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 4
40478: PUSH
40479: LD_INT 4
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 3
40488: PUSH
40489: LD_INT 4
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 5
40498: PUSH
40499: LD_INT 4
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 5
40508: PUSH
40509: LD_INT 5
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 4
40518: PUSH
40519: LD_INT 5
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 6
40528: PUSH
40529: LD_INT 5
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 6
40538: PUSH
40539: LD_INT 6
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 5
40548: PUSH
40549: LD_INT 6
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
40570: LD_ADDR_VAR 0 32
40574: PUSH
40575: LD_INT 1
40577: PUSH
40578: LD_INT 3
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: LD_INT 3
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: LD_INT 2
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: LD_INT 4
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: LD_INT 4
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: LD_INT 3
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: LD_INT 5
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: LD_INT 5
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: LD_INT 4
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: LD_INT 6
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: LD_INT 6
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: LD_INT 5
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
40713: LD_ADDR_VAR 0 33
40717: PUSH
40718: LD_INT 2
40720: NEG
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 3
40731: NEG
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 3
40742: NEG
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 3
40754: NEG
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 4
40765: NEG
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 4
40776: NEG
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 4
40788: NEG
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 5
40799: NEG
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 5
40810: NEG
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 5
40822: NEG
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 6
40833: NEG
40834: PUSH
40835: LD_INT 0
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 6
40844: NEG
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40868: LD_ADDR_VAR 0 34
40872: PUSH
40873: LD_INT 2
40875: NEG
40876: PUSH
40877: LD_INT 3
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 3
40887: NEG
40888: PUSH
40889: LD_INT 2
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 3
40899: NEG
40900: PUSH
40901: LD_INT 3
40903: NEG
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 3
40911: NEG
40912: PUSH
40913: LD_INT 4
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 4
40923: NEG
40924: PUSH
40925: LD_INT 3
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 4
40935: NEG
40936: PUSH
40937: LD_INT 4
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 4
40947: NEG
40948: PUSH
40949: LD_INT 5
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 5
40959: NEG
40960: PUSH
40961: LD_INT 4
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 5
40971: NEG
40972: PUSH
40973: LD_INT 5
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 5
40983: NEG
40984: PUSH
40985: LD_INT 6
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 6
40995: NEG
40996: PUSH
40997: LD_INT 5
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 6
41007: NEG
41008: PUSH
41009: LD_INT 6
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
41031: LD_ADDR_VAR 0 41
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: LD_INT 2
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: LD_INT 3
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: PUSH
41062: LD_INT 2
41064: NEG
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: LIST
41074: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
41075: LD_ADDR_VAR 0 42
41079: PUSH
41080: LD_INT 2
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 2
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 3
41103: PUSH
41104: LD_INT 1
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: LIST
41115: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
41116: LD_ADDR_VAR 0 43
41120: PUSH
41121: LD_INT 2
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 3
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 2
41143: PUSH
41144: LD_INT 3
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: LIST
41155: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
41156: LD_ADDR_VAR 0 44
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: LD_INT 3
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: LD_INT 2
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: LIST
41196: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41197: LD_ADDR_VAR 0 45
41201: PUSH
41202: LD_INT 2
41204: NEG
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 2
41215: NEG
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 3
41226: NEG
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: LIST
41240: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
41241: LD_ADDR_VAR 0 46
41245: PUSH
41246: LD_INT 2
41248: NEG
41249: PUSH
41250: LD_INT 2
41252: NEG
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: NEG
41261: PUSH
41262: LD_INT 3
41264: NEG
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 3
41272: NEG
41273: PUSH
41274: LD_INT 2
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: LIST
41286: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
41287: LD_ADDR_VAR 0 47
41291: PUSH
41292: LD_INT 2
41294: NEG
41295: PUSH
41296: LD_INT 3
41298: NEG
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 1
41306: NEG
41307: PUSH
41308: LD_INT 3
41310: NEG
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41320: LD_ADDR_VAR 0 48
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: LD_INT 2
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 2
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
41351: LD_ADDR_VAR 0 49
41355: PUSH
41356: LD_INT 3
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 3
41368: PUSH
41369: LD_INT 2
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
41380: LD_ADDR_VAR 0 50
41384: PUSH
41385: LD_INT 2
41387: PUSH
41388: LD_INT 3
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 1
41397: PUSH
41398: LD_INT 3
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41409: LD_ADDR_VAR 0 51
41413: PUSH
41414: LD_INT 1
41416: NEG
41417: PUSH
41418: LD_INT 2
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 2
41427: NEG
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41440: LD_ADDR_VAR 0 52
41444: PUSH
41445: LD_INT 3
41447: NEG
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 3
41459: NEG
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41473: LD_ADDR_VAR 0 53
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: LD_INT 3
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 3
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: LIST
41516: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41517: LD_ADDR_VAR 0 54
41521: PUSH
41522: LD_INT 2
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 3
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 3
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: LIST
41557: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41558: LD_ADDR_VAR 0 55
41562: PUSH
41563: LD_INT 3
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 3
41575: PUSH
41576: LD_INT 3
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 2
41585: PUSH
41586: LD_INT 3
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: LIST
41597: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41598: LD_ADDR_VAR 0 56
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: LD_INT 3
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: LD_INT 3
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 2
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: LIST
41638: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41639: LD_ADDR_VAR 0 57
41643: PUSH
41644: LD_INT 2
41646: NEG
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 3
41657: NEG
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 3
41668: NEG
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: LIST
41682: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41683: LD_ADDR_VAR 0 58
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: LD_INT 3
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 3
41702: NEG
41703: PUSH
41704: LD_INT 2
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 3
41714: NEG
41715: PUSH
41716: LD_INT 3
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: LIST
41728: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
41729: LD_ADDR_VAR 0 59
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: LIST
41772: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41773: LD_ADDR_VAR 0 60
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 2
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: LIST
41813: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41814: LD_ADDR_VAR 0 61
41818: PUSH
41819: LD_INT 2
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 2
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: LD_INT 2
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: LIST
41853: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41854: LD_ADDR_VAR 0 62
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: LD_INT 2
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: LIST
41894: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41895: LD_ADDR_VAR 0 63
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 2
41913: NEG
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 2
41924: NEG
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: LIST
41938: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41939: LD_ADDR_VAR 0 64
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: LD_INT 2
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 2
41970: NEG
41971: PUSH
41972: LD_INT 2
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: LIST
41984: ST_TO_ADDR
// end ; 2 :
41985: GO 45251
41987: LD_INT 2
41989: DOUBLE
41990: EQUAL
41991: IFTRUE 41995
41993: GO 45250
41995: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41996: LD_ADDR_VAR 0 29
42000: PUSH
42001: LD_INT 4
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 4
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 5
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 5
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 4
42044: PUSH
42045: LD_INT 1
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 3
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 3
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 3
42075: PUSH
42076: LD_INT 2
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 5
42086: PUSH
42087: LD_INT 2
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 3
42096: PUSH
42097: LD_INT 3
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 3
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 4
42116: PUSH
42117: LD_INT 3
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 4
42126: PUSH
42127: LD_INT 4
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 3
42136: PUSH
42137: LD_INT 4
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: LD_INT 3
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 2
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 4
42166: PUSH
42167: LD_INT 2
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: LD_INT 4
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: LD_INT 4
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: LD_INT 3
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: LD_INT 4
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: LD_INT 5
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: LD_INT 5
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: LD_INT 4
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: LD_INT 3
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 2
42258: PUSH
42259: LD_INT 5
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: LD_INT 3
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 3
42279: NEG
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 3
42290: NEG
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 2
42313: NEG
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 3
42324: NEG
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 4
42335: NEG
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 4
42346: NEG
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 4
42358: NEG
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: NEG
42371: PUSH
42372: LD_INT 2
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 4
42381: NEG
42382: PUSH
42383: LD_INT 4
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 4
42393: NEG
42394: PUSH
42395: LD_INT 5
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 3
42405: NEG
42406: PUSH
42407: LD_INT 4
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 3
42417: NEG
42418: PUSH
42419: LD_INT 3
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 4
42429: NEG
42430: PUSH
42431: LD_INT 3
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 5
42441: NEG
42442: PUSH
42443: LD_INT 4
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 5
42453: NEG
42454: PUSH
42455: LD_INT 5
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 3
42465: NEG
42466: PUSH
42467: LD_INT 5
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 5
42477: NEG
42478: PUSH
42479: LD_INT 3
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
42534: LD_ADDR_VAR 0 30
42538: PUSH
42539: LD_INT 4
42541: PUSH
42542: LD_INT 4
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 4
42551: PUSH
42552: LD_INT 3
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 5
42561: PUSH
42562: LD_INT 4
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 5
42571: PUSH
42572: LD_INT 5
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 4
42581: PUSH
42582: LD_INT 5
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 3
42591: PUSH
42592: LD_INT 4
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 3
42601: PUSH
42602: LD_INT 3
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 5
42611: PUSH
42612: LD_INT 3
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 3
42621: PUSH
42622: LD_INT 5
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: LD_INT 3
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: LD_INT 3
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 1
42661: PUSH
42662: LD_INT 4
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: LD_INT 4
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: LD_INT 3
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: PUSH
42704: LD_INT 4
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: LD_INT 2
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 4
42724: NEG
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 4
42735: NEG
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 3
42747: NEG
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 3
42758: NEG
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 4
42769: NEG
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 5
42780: NEG
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 5
42791: NEG
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 5
42803: NEG
42804: PUSH
42805: LD_INT 2
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 3
42815: NEG
42816: PUSH
42817: LD_INT 2
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 3
42826: NEG
42827: PUSH
42828: LD_INT 3
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 3
42838: NEG
42839: PUSH
42840: LD_INT 4
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: NEG
42851: PUSH
42852: LD_INT 3
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: NEG
42863: PUSH
42864: LD_INT 2
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 3
42874: NEG
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 4
42886: NEG
42887: PUSH
42888: LD_INT 3
42890: NEG
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 4
42898: NEG
42899: PUSH
42900: LD_INT 4
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 2
42910: NEG
42911: PUSH
42912: LD_INT 4
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 4
42922: NEG
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 4
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: LD_INT 5
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: LD_INT 4
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: LD_INT 3
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 3
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: LD_INT 4
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: LD_INT 5
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: LD_INT 3
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 2
43024: NEG
43025: PUSH
43026: LD_INT 5
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
43081: LD_ADDR_VAR 0 31
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: LD_INT 4
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: LD_INT 3
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: LD_INT 4
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: LD_INT 5
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 5
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: LD_INT 4
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: LD_INT 3
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 2
43160: PUSH
43161: LD_INT 5
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: LD_INT 3
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 3
43181: NEG
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 3
43192: NEG
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: NEG
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 3
43226: NEG
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 4
43237: NEG
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 4
43248: NEG
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 4
43260: NEG
43261: PUSH
43262: LD_INT 2
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 4
43283: NEG
43284: PUSH
43285: LD_INT 4
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 4
43295: NEG
43296: PUSH
43297: LD_INT 5
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 3
43307: NEG
43308: PUSH
43309: LD_INT 4
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 3
43319: NEG
43320: PUSH
43321: LD_INT 3
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 4
43331: NEG
43332: PUSH
43333: LD_INT 3
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 5
43343: NEG
43344: PUSH
43345: LD_INT 4
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 5
43355: NEG
43356: PUSH
43357: LD_INT 5
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 3
43367: NEG
43368: PUSH
43369: LD_INT 5
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 5
43379: NEG
43380: PUSH
43381: LD_INT 3
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: LD_INT 3
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 4
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: LD_INT 3
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 2
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: LD_INT 3
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: LD_INT 4
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: LD_INT 2
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 2
43481: NEG
43482: PUSH
43483: LD_INT 4
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 4
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 4
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 5
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 5
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 4
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 3
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 3
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 3
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 5
43576: PUSH
43577: LD_INT 2
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
43631: LD_ADDR_VAR 0 32
43635: PUSH
43636: LD_INT 4
43638: NEG
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 4
43649: NEG
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 3
43661: NEG
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 3
43672: NEG
43673: PUSH
43674: LD_INT 1
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 4
43683: NEG
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 5
43694: NEG
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 5
43705: NEG
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 5
43717: NEG
43718: PUSH
43719: LD_INT 2
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 3
43729: NEG
43730: PUSH
43731: LD_INT 2
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 3
43740: NEG
43741: PUSH
43742: LD_INT 3
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 3
43752: NEG
43753: PUSH
43754: LD_INT 4
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 2
43764: NEG
43765: PUSH
43766: LD_INT 3
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: LD_INT 2
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 3
43788: NEG
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 4
43800: NEG
43801: PUSH
43802: LD_INT 3
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 4
43812: NEG
43813: PUSH
43814: LD_INT 4
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 2
43824: NEG
43825: PUSH
43826: LD_INT 4
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 4
43836: NEG
43837: PUSH
43838: LD_INT 2
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: LD_INT 4
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: LD_INT 5
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: LD_INT 4
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 3
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 3
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: LD_INT 4
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: LD_INT 5
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 2
43927: PUSH
43928: LD_INT 3
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: LD_INT 5
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 3
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 3
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 4
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 4
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 3
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 2
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 2
44022: PUSH
44023: LD_INT 2
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 4
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 4
44043: PUSH
44044: LD_INT 4
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 4
44053: PUSH
44054: LD_INT 3
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 5
44063: PUSH
44064: LD_INT 4
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 5
44073: PUSH
44074: LD_INT 5
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 4
44083: PUSH
44084: LD_INT 5
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 3
44093: PUSH
44094: LD_INT 4
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 3
44103: PUSH
44104: LD_INT 3
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 5
44113: PUSH
44114: LD_INT 3
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 3
44123: PUSH
44124: LD_INT 5
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
44178: LD_ADDR_VAR 0 33
44182: PUSH
44183: LD_INT 4
44185: NEG
44186: PUSH
44187: LD_INT 4
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 4
44197: NEG
44198: PUSH
44199: LD_INT 5
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 3
44209: NEG
44210: PUSH
44211: LD_INT 4
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 3
44221: NEG
44222: PUSH
44223: LD_INT 3
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 4
44233: NEG
44234: PUSH
44235: LD_INT 3
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 5
44245: NEG
44246: PUSH
44247: LD_INT 4
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 5
44257: NEG
44258: PUSH
44259: LD_INT 5
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 3
44269: NEG
44270: PUSH
44271: LD_INT 5
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 5
44281: NEG
44282: PUSH
44283: LD_INT 3
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_INT 3
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: LD_INT 4
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: LD_INT 3
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: LD_INT 3
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: LD_INT 4
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: LD_INT 2
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: LD_INT 4
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 4
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 4
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 5
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 5
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 4
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 3
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 3
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 3
44467: PUSH
44468: LD_INT 2
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 5
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 3
44488: PUSH
44489: LD_INT 3
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 3
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 4
44508: PUSH
44509: LD_INT 3
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 4
44518: PUSH
44519: LD_INT 4
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 3
44528: PUSH
44529: LD_INT 4
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 2
44538: PUSH
44539: LD_INT 3
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 2
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 4
44558: PUSH
44559: LD_INT 2
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 2
44568: PUSH
44569: LD_INT 4
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 4
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: LD_INT 3
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: LD_INT 4
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: LD_INT 5
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: LD_INT 5
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: LD_INT 4
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: LD_INT 3
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 2
44650: PUSH
44651: LD_INT 5
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 2
44660: NEG
44661: PUSH
44662: LD_INT 3
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
44716: LD_ADDR_VAR 0 34
44720: PUSH
44721: LD_INT 0
44723: PUSH
44724: LD_INT 4
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 5
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 4
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: LD_INT 3
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 3
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 4
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: LD_INT 5
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: LD_INT 3
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 2
44813: NEG
44814: PUSH
44815: LD_INT 5
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 3
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 3
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 4
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 4
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 3
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: LD_INT 2
44900: NEG
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 4
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 4
44918: PUSH
44919: LD_INT 4
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 4
44928: PUSH
44929: LD_INT 3
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 5
44938: PUSH
44939: LD_INT 4
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 5
44948: PUSH
44949: LD_INT 5
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 4
44958: PUSH
44959: LD_INT 5
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 3
44968: PUSH
44969: LD_INT 4
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 3
44978: PUSH
44979: LD_INT 3
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 5
44988: PUSH
44989: LD_INT 3
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 3
44998: PUSH
44999: LD_INT 5
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: LD_INT 3
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 3
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: LD_INT 4
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: LD_INT 4
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: LD_INT 3
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 2
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 2
45080: PUSH
45081: LD_INT 4
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: LD_INT 2
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 4
45101: NEG
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 4
45112: NEG
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 3
45124: NEG
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 3
45135: NEG
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 4
45146: NEG
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 5
45157: NEG
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 5
45168: NEG
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 5
45180: NEG
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 3
45192: NEG
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: ST_TO_ADDR
// end ; end ;
45248: GO 45251
45250: POP
// case btype of b_depot , b_warehouse :
45251: LD_VAR 0 1
45255: PUSH
45256: LD_INT 0
45258: DOUBLE
45259: EQUAL
45260: IFTRUE 45270
45262: LD_INT 1
45264: DOUBLE
45265: EQUAL
45266: IFTRUE 45270
45268: GO 45471
45270: POP
// case nation of nation_american :
45271: LD_VAR 0 5
45275: PUSH
45276: LD_INT 1
45278: DOUBLE
45279: EQUAL
45280: IFTRUE 45284
45282: GO 45340
45284: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
45285: LD_ADDR_VAR 0 9
45289: PUSH
45290: LD_VAR 0 11
45294: PUSH
45295: LD_VAR 0 12
45299: PUSH
45300: LD_VAR 0 13
45304: PUSH
45305: LD_VAR 0 14
45309: PUSH
45310: LD_VAR 0 15
45314: PUSH
45315: LD_VAR 0 16
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: PUSH
45328: LD_VAR 0 4
45332: PUSH
45333: LD_INT 1
45335: PLUS
45336: ARRAY
45337: ST_TO_ADDR
45338: GO 45469
45340: LD_INT 2
45342: DOUBLE
45343: EQUAL
45344: IFTRUE 45348
45346: GO 45404
45348: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
45349: LD_ADDR_VAR 0 9
45353: PUSH
45354: LD_VAR 0 17
45358: PUSH
45359: LD_VAR 0 18
45363: PUSH
45364: LD_VAR 0 19
45368: PUSH
45369: LD_VAR 0 20
45373: PUSH
45374: LD_VAR 0 21
45378: PUSH
45379: LD_VAR 0 22
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: PUSH
45392: LD_VAR 0 4
45396: PUSH
45397: LD_INT 1
45399: PLUS
45400: ARRAY
45401: ST_TO_ADDR
45402: GO 45469
45404: LD_INT 3
45406: DOUBLE
45407: EQUAL
45408: IFTRUE 45412
45410: GO 45468
45412: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
45413: LD_ADDR_VAR 0 9
45417: PUSH
45418: LD_VAR 0 23
45422: PUSH
45423: LD_VAR 0 24
45427: PUSH
45428: LD_VAR 0 25
45432: PUSH
45433: LD_VAR 0 26
45437: PUSH
45438: LD_VAR 0 27
45442: PUSH
45443: LD_VAR 0 28
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: PUSH
45456: LD_VAR 0 4
45460: PUSH
45461: LD_INT 1
45463: PLUS
45464: ARRAY
45465: ST_TO_ADDR
45466: GO 45469
45468: POP
45469: GO 46018
45471: LD_INT 2
45473: DOUBLE
45474: EQUAL
45475: IFTRUE 45485
45477: LD_INT 3
45479: DOUBLE
45480: EQUAL
45481: IFTRUE 45485
45483: GO 45541
45485: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
45486: LD_ADDR_VAR 0 9
45490: PUSH
45491: LD_VAR 0 29
45495: PUSH
45496: LD_VAR 0 30
45500: PUSH
45501: LD_VAR 0 31
45505: PUSH
45506: LD_VAR 0 32
45510: PUSH
45511: LD_VAR 0 33
45515: PUSH
45516: LD_VAR 0 34
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: PUSH
45529: LD_VAR 0 4
45533: PUSH
45534: LD_INT 1
45536: PLUS
45537: ARRAY
45538: ST_TO_ADDR
45539: GO 46018
45541: LD_INT 16
45543: DOUBLE
45544: EQUAL
45545: IFTRUE 45597
45547: LD_INT 17
45549: DOUBLE
45550: EQUAL
45551: IFTRUE 45597
45553: LD_INT 18
45555: DOUBLE
45556: EQUAL
45557: IFTRUE 45597
45559: LD_INT 19
45561: DOUBLE
45562: EQUAL
45563: IFTRUE 45597
45565: LD_INT 20
45567: DOUBLE
45568: EQUAL
45569: IFTRUE 45597
45571: LD_INT 21
45573: DOUBLE
45574: EQUAL
45575: IFTRUE 45597
45577: LD_INT 23
45579: DOUBLE
45580: EQUAL
45581: IFTRUE 45597
45583: LD_INT 24
45585: DOUBLE
45586: EQUAL
45587: IFTRUE 45597
45589: LD_INT 25
45591: DOUBLE
45592: EQUAL
45593: IFTRUE 45597
45595: GO 45653
45597: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
45598: LD_ADDR_VAR 0 9
45602: PUSH
45603: LD_VAR 0 35
45607: PUSH
45608: LD_VAR 0 36
45612: PUSH
45613: LD_VAR 0 37
45617: PUSH
45618: LD_VAR 0 38
45622: PUSH
45623: LD_VAR 0 39
45627: PUSH
45628: LD_VAR 0 40
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: PUSH
45641: LD_VAR 0 4
45645: PUSH
45646: LD_INT 1
45648: PLUS
45649: ARRAY
45650: ST_TO_ADDR
45651: GO 46018
45653: LD_INT 6
45655: DOUBLE
45656: EQUAL
45657: IFTRUE 45709
45659: LD_INT 7
45661: DOUBLE
45662: EQUAL
45663: IFTRUE 45709
45665: LD_INT 8
45667: DOUBLE
45668: EQUAL
45669: IFTRUE 45709
45671: LD_INT 13
45673: DOUBLE
45674: EQUAL
45675: IFTRUE 45709
45677: LD_INT 12
45679: DOUBLE
45680: EQUAL
45681: IFTRUE 45709
45683: LD_INT 15
45685: DOUBLE
45686: EQUAL
45687: IFTRUE 45709
45689: LD_INT 11
45691: DOUBLE
45692: EQUAL
45693: IFTRUE 45709
45695: LD_INT 14
45697: DOUBLE
45698: EQUAL
45699: IFTRUE 45709
45701: LD_INT 10
45703: DOUBLE
45704: EQUAL
45705: IFTRUE 45709
45707: GO 45765
45709: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
45710: LD_ADDR_VAR 0 9
45714: PUSH
45715: LD_VAR 0 41
45719: PUSH
45720: LD_VAR 0 42
45724: PUSH
45725: LD_VAR 0 43
45729: PUSH
45730: LD_VAR 0 44
45734: PUSH
45735: LD_VAR 0 45
45739: PUSH
45740: LD_VAR 0 46
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: PUSH
45753: LD_VAR 0 4
45757: PUSH
45758: LD_INT 1
45760: PLUS
45761: ARRAY
45762: ST_TO_ADDR
45763: GO 46018
45765: LD_INT 36
45767: DOUBLE
45768: EQUAL
45769: IFTRUE 45773
45771: GO 45829
45773: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
45774: LD_ADDR_VAR 0 9
45778: PUSH
45779: LD_VAR 0 47
45783: PUSH
45784: LD_VAR 0 48
45788: PUSH
45789: LD_VAR 0 49
45793: PUSH
45794: LD_VAR 0 50
45798: PUSH
45799: LD_VAR 0 51
45803: PUSH
45804: LD_VAR 0 52
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: PUSH
45817: LD_VAR 0 4
45821: PUSH
45822: LD_INT 1
45824: PLUS
45825: ARRAY
45826: ST_TO_ADDR
45827: GO 46018
45829: LD_INT 4
45831: DOUBLE
45832: EQUAL
45833: IFTRUE 45855
45835: LD_INT 5
45837: DOUBLE
45838: EQUAL
45839: IFTRUE 45855
45841: LD_INT 34
45843: DOUBLE
45844: EQUAL
45845: IFTRUE 45855
45847: LD_INT 37
45849: DOUBLE
45850: EQUAL
45851: IFTRUE 45855
45853: GO 45911
45855: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45856: LD_ADDR_VAR 0 9
45860: PUSH
45861: LD_VAR 0 53
45865: PUSH
45866: LD_VAR 0 54
45870: PUSH
45871: LD_VAR 0 55
45875: PUSH
45876: LD_VAR 0 56
45880: PUSH
45881: LD_VAR 0 57
45885: PUSH
45886: LD_VAR 0 58
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: PUSH
45899: LD_VAR 0 4
45903: PUSH
45904: LD_INT 1
45906: PLUS
45907: ARRAY
45908: ST_TO_ADDR
45909: GO 46018
45911: LD_INT 31
45913: DOUBLE
45914: EQUAL
45915: IFTRUE 45961
45917: LD_INT 32
45919: DOUBLE
45920: EQUAL
45921: IFTRUE 45961
45923: LD_INT 33
45925: DOUBLE
45926: EQUAL
45927: IFTRUE 45961
45929: LD_INT 27
45931: DOUBLE
45932: EQUAL
45933: IFTRUE 45961
45935: LD_INT 26
45937: DOUBLE
45938: EQUAL
45939: IFTRUE 45961
45941: LD_INT 28
45943: DOUBLE
45944: EQUAL
45945: IFTRUE 45961
45947: LD_INT 29
45949: DOUBLE
45950: EQUAL
45951: IFTRUE 45961
45953: LD_INT 30
45955: DOUBLE
45956: EQUAL
45957: IFTRUE 45961
45959: GO 46017
45961: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
45962: LD_ADDR_VAR 0 9
45966: PUSH
45967: LD_VAR 0 59
45971: PUSH
45972: LD_VAR 0 60
45976: PUSH
45977: LD_VAR 0 61
45981: PUSH
45982: LD_VAR 0 62
45986: PUSH
45987: LD_VAR 0 63
45991: PUSH
45992: LD_VAR 0 64
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: PUSH
46005: LD_VAR 0 4
46009: PUSH
46010: LD_INT 1
46012: PLUS
46013: ARRAY
46014: ST_TO_ADDR
46015: GO 46018
46017: POP
// temp_list2 = [ ] ;
46018: LD_ADDR_VAR 0 10
46022: PUSH
46023: EMPTY
46024: ST_TO_ADDR
// for i in temp_list do
46025: LD_ADDR_VAR 0 8
46029: PUSH
46030: LD_VAR 0 9
46034: PUSH
46035: FOR_IN
46036: IFFALSE 46088
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
46038: LD_ADDR_VAR 0 10
46042: PUSH
46043: LD_VAR 0 10
46047: PUSH
46048: LD_VAR 0 8
46052: PUSH
46053: LD_INT 1
46055: ARRAY
46056: PUSH
46057: LD_VAR 0 2
46061: PLUS
46062: PUSH
46063: LD_VAR 0 8
46067: PUSH
46068: LD_INT 2
46070: ARRAY
46071: PUSH
46072: LD_VAR 0 3
46076: PLUS
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: EMPTY
46083: LIST
46084: ADD
46085: ST_TO_ADDR
46086: GO 46035
46088: POP
46089: POP
// result = temp_list2 ;
46090: LD_ADDR_VAR 0 7
46094: PUSH
46095: LD_VAR 0 10
46099: ST_TO_ADDR
// end ;
46100: LD_VAR 0 7
46104: RET
// export function EnemyInRange ( unit , dist ) ; begin
46105: LD_INT 0
46107: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
46108: LD_ADDR_VAR 0 3
46112: PUSH
46113: LD_VAR 0 1
46117: PPUSH
46118: CALL_OW 255
46122: PPUSH
46123: LD_VAR 0 1
46127: PPUSH
46128: CALL_OW 250
46132: PPUSH
46133: LD_VAR 0 1
46137: PPUSH
46138: CALL_OW 251
46142: PPUSH
46143: LD_VAR 0 2
46147: PPUSH
46148: CALL 20598 0 4
46152: PUSH
46153: LD_INT 4
46155: ARRAY
46156: ST_TO_ADDR
// end ;
46157: LD_VAR 0 3
46161: RET
// export function PlayerSeeMe ( unit ) ; begin
46162: LD_INT 0
46164: PPUSH
// result := See ( your_side , unit ) ;
46165: LD_ADDR_VAR 0 2
46169: PUSH
46170: LD_OWVAR 2
46174: PPUSH
46175: LD_VAR 0 1
46179: PPUSH
46180: CALL_OW 292
46184: ST_TO_ADDR
// end ;
46185: LD_VAR 0 2
46189: RET
// export function ReverseDir ( unit ) ; begin
46190: LD_INT 0
46192: PPUSH
// if not unit then
46193: LD_VAR 0 1
46197: NOT
46198: IFFALSE 46202
// exit ;
46200: GO 46248
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
46202: LD_ADDR_VAR 0 2
46206: PUSH
46207: LD_INT 3
46209: PUSH
46210: LD_INT 4
46212: PUSH
46213: LD_INT 5
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: PUSH
46233: LD_VAR 0 1
46237: PPUSH
46238: CALL_OW 254
46242: PUSH
46243: LD_INT 1
46245: PLUS
46246: ARRAY
46247: ST_TO_ADDR
// end ;
46248: LD_VAR 0 2
46252: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
46253: LD_INT 0
46255: PPUSH
46256: PPUSH
46257: PPUSH
46258: PPUSH
46259: PPUSH
// if not hexes then
46260: LD_VAR 0 2
46264: NOT
46265: IFFALSE 46269
// exit ;
46267: GO 46417
// dist := 9999 ;
46269: LD_ADDR_VAR 0 5
46273: PUSH
46274: LD_INT 9999
46276: ST_TO_ADDR
// for i = 1 to hexes do
46277: LD_ADDR_VAR 0 4
46281: PUSH
46282: DOUBLE
46283: LD_INT 1
46285: DEC
46286: ST_TO_ADDR
46287: LD_VAR 0 2
46291: PUSH
46292: FOR_TO
46293: IFFALSE 46405
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
46295: LD_VAR 0 1
46299: PPUSH
46300: LD_VAR 0 2
46304: PUSH
46305: LD_VAR 0 4
46309: ARRAY
46310: PUSH
46311: LD_INT 1
46313: ARRAY
46314: PPUSH
46315: LD_VAR 0 2
46319: PUSH
46320: LD_VAR 0 4
46324: ARRAY
46325: PUSH
46326: LD_INT 2
46328: ARRAY
46329: PPUSH
46330: CALL_OW 297
46334: PUSH
46335: LD_VAR 0 5
46339: LESS
46340: IFFALSE 46403
// begin hex := hexes [ i ] ;
46342: LD_ADDR_VAR 0 7
46346: PUSH
46347: LD_VAR 0 2
46351: PUSH
46352: LD_VAR 0 4
46356: ARRAY
46357: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46358: LD_ADDR_VAR 0 5
46362: PUSH
46363: LD_VAR 0 1
46367: PPUSH
46368: LD_VAR 0 2
46372: PUSH
46373: LD_VAR 0 4
46377: ARRAY
46378: PUSH
46379: LD_INT 1
46381: ARRAY
46382: PPUSH
46383: LD_VAR 0 2
46387: PUSH
46388: LD_VAR 0 4
46392: ARRAY
46393: PUSH
46394: LD_INT 2
46396: ARRAY
46397: PPUSH
46398: CALL_OW 297
46402: ST_TO_ADDR
// end ; end ;
46403: GO 46292
46405: POP
46406: POP
// result := hex ;
46407: LD_ADDR_VAR 0 3
46411: PUSH
46412: LD_VAR 0 7
46416: ST_TO_ADDR
// end ;
46417: LD_VAR 0 3
46421: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
46422: LD_INT 0
46424: PPUSH
46425: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
46426: LD_VAR 0 1
46430: NOT
46431: PUSH
46432: LD_VAR 0 1
46436: PUSH
46437: LD_INT 21
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 23
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PPUSH
46461: CALL_OW 69
46465: IN
46466: NOT
46467: OR
46468: IFFALSE 46472
// exit ;
46470: GO 46519
// for i = 1 to 3 do
46472: LD_ADDR_VAR 0 3
46476: PUSH
46477: DOUBLE
46478: LD_INT 1
46480: DEC
46481: ST_TO_ADDR
46482: LD_INT 3
46484: PUSH
46485: FOR_TO
46486: IFFALSE 46517
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
46488: LD_VAR 0 1
46492: PPUSH
46493: CALL_OW 250
46497: PPUSH
46498: LD_VAR 0 1
46502: PPUSH
46503: CALL_OW 251
46507: PPUSH
46508: LD_INT 1
46510: PPUSH
46511: CALL_OW 453
46515: GO 46485
46517: POP
46518: POP
// end ;
46519: LD_VAR 0 2
46523: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
46524: LD_INT 0
46526: PPUSH
46527: PPUSH
46528: PPUSH
46529: PPUSH
46530: PPUSH
46531: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
46532: LD_VAR 0 1
46536: NOT
46537: PUSH
46538: LD_VAR 0 2
46542: NOT
46543: OR
46544: PUSH
46545: LD_VAR 0 1
46549: PPUSH
46550: CALL_OW 314
46554: OR
46555: IFFALSE 46559
// exit ;
46557: GO 47000
// x := GetX ( enemy_unit ) ;
46559: LD_ADDR_VAR 0 7
46563: PUSH
46564: LD_VAR 0 2
46568: PPUSH
46569: CALL_OW 250
46573: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
46574: LD_ADDR_VAR 0 8
46578: PUSH
46579: LD_VAR 0 2
46583: PPUSH
46584: CALL_OW 251
46588: ST_TO_ADDR
// if not x or not y then
46589: LD_VAR 0 7
46593: NOT
46594: PUSH
46595: LD_VAR 0 8
46599: NOT
46600: OR
46601: IFFALSE 46605
// exit ;
46603: GO 47000
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
46605: LD_ADDR_VAR 0 6
46609: PUSH
46610: LD_VAR 0 7
46614: PPUSH
46615: LD_INT 0
46617: PPUSH
46618: LD_INT 4
46620: PPUSH
46621: CALL_OW 272
46625: PUSH
46626: LD_VAR 0 8
46630: PPUSH
46631: LD_INT 0
46633: PPUSH
46634: LD_INT 4
46636: PPUSH
46637: CALL_OW 273
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_VAR 0 7
46650: PPUSH
46651: LD_INT 1
46653: PPUSH
46654: LD_INT 4
46656: PPUSH
46657: CALL_OW 272
46661: PUSH
46662: LD_VAR 0 8
46666: PPUSH
46667: LD_INT 1
46669: PPUSH
46670: LD_INT 4
46672: PPUSH
46673: CALL_OW 273
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_VAR 0 7
46686: PPUSH
46687: LD_INT 2
46689: PPUSH
46690: LD_INT 4
46692: PPUSH
46693: CALL_OW 272
46697: PUSH
46698: LD_VAR 0 8
46702: PPUSH
46703: LD_INT 2
46705: PPUSH
46706: LD_INT 4
46708: PPUSH
46709: CALL_OW 273
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_VAR 0 7
46722: PPUSH
46723: LD_INT 3
46725: PPUSH
46726: LD_INT 4
46728: PPUSH
46729: CALL_OW 272
46733: PUSH
46734: LD_VAR 0 8
46738: PPUSH
46739: LD_INT 3
46741: PPUSH
46742: LD_INT 4
46744: PPUSH
46745: CALL_OW 273
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_VAR 0 7
46758: PPUSH
46759: LD_INT 4
46761: PPUSH
46762: LD_INT 4
46764: PPUSH
46765: CALL_OW 272
46769: PUSH
46770: LD_VAR 0 8
46774: PPUSH
46775: LD_INT 4
46777: PPUSH
46778: LD_INT 4
46780: PPUSH
46781: CALL_OW 273
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_VAR 0 7
46794: PPUSH
46795: LD_INT 5
46797: PPUSH
46798: LD_INT 4
46800: PPUSH
46801: CALL_OW 272
46805: PUSH
46806: LD_VAR 0 8
46810: PPUSH
46811: LD_INT 5
46813: PPUSH
46814: LD_INT 4
46816: PPUSH
46817: CALL_OW 273
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: ST_TO_ADDR
// for i = tmp downto 1 do
46834: LD_ADDR_VAR 0 4
46838: PUSH
46839: DOUBLE
46840: LD_VAR 0 6
46844: INC
46845: ST_TO_ADDR
46846: LD_INT 1
46848: PUSH
46849: FOR_DOWNTO
46850: IFFALSE 46951
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
46852: LD_VAR 0 6
46856: PUSH
46857: LD_VAR 0 4
46861: ARRAY
46862: PUSH
46863: LD_INT 1
46865: ARRAY
46866: PPUSH
46867: LD_VAR 0 6
46871: PUSH
46872: LD_VAR 0 4
46876: ARRAY
46877: PUSH
46878: LD_INT 2
46880: ARRAY
46881: PPUSH
46882: CALL_OW 488
46886: NOT
46887: PUSH
46888: LD_VAR 0 6
46892: PUSH
46893: LD_VAR 0 4
46897: ARRAY
46898: PUSH
46899: LD_INT 1
46901: ARRAY
46902: PPUSH
46903: LD_VAR 0 6
46907: PUSH
46908: LD_VAR 0 4
46912: ARRAY
46913: PUSH
46914: LD_INT 2
46916: ARRAY
46917: PPUSH
46918: CALL_OW 428
46922: PUSH
46923: LD_INT 0
46925: NONEQUAL
46926: OR
46927: IFFALSE 46949
// tmp := Delete ( tmp , i ) ;
46929: LD_ADDR_VAR 0 6
46933: PUSH
46934: LD_VAR 0 6
46938: PPUSH
46939: LD_VAR 0 4
46943: PPUSH
46944: CALL_OW 3
46948: ST_TO_ADDR
46949: GO 46849
46951: POP
46952: POP
// j := GetClosestHex ( unit , tmp ) ;
46953: LD_ADDR_VAR 0 5
46957: PUSH
46958: LD_VAR 0 1
46962: PPUSH
46963: LD_VAR 0 6
46967: PPUSH
46968: CALL 46253 0 2
46972: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46973: LD_VAR 0 1
46977: PPUSH
46978: LD_VAR 0 5
46982: PUSH
46983: LD_INT 1
46985: ARRAY
46986: PPUSH
46987: LD_VAR 0 5
46991: PUSH
46992: LD_INT 2
46994: ARRAY
46995: PPUSH
46996: CALL_OW 111
// end ;
47000: LD_VAR 0 3
47004: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
47005: LD_INT 0
47007: PPUSH
47008: PPUSH
47009: PPUSH
// uc_side = 0 ;
47010: LD_ADDR_OWVAR 20
47014: PUSH
47015: LD_INT 0
47017: ST_TO_ADDR
// uc_nation = 0 ;
47018: LD_ADDR_OWVAR 21
47022: PUSH
47023: LD_INT 0
47025: ST_TO_ADDR
// InitHc ;
47026: CALL_OW 19
// InitVc ;
47030: CALL_OW 20
// if mastodonts then
47034: LD_VAR 0 6
47038: IFFALSE 47105
// for i = 1 to mastodonts do
47040: LD_ADDR_VAR 0 11
47044: PUSH
47045: DOUBLE
47046: LD_INT 1
47048: DEC
47049: ST_TO_ADDR
47050: LD_VAR 0 6
47054: PUSH
47055: FOR_TO
47056: IFFALSE 47103
// begin vc_chassis := 31 ;
47058: LD_ADDR_OWVAR 37
47062: PUSH
47063: LD_INT 31
47065: ST_TO_ADDR
// vc_control := control_rider ;
47066: LD_ADDR_OWVAR 38
47070: PUSH
47071: LD_INT 4
47073: ST_TO_ADDR
// animal := CreateVehicle ;
47074: LD_ADDR_VAR 0 12
47078: PUSH
47079: CALL_OW 45
47083: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47084: LD_VAR 0 12
47088: PPUSH
47089: LD_VAR 0 8
47093: PPUSH
47094: LD_INT 0
47096: PPUSH
47097: CALL_OW 49
// end ;
47101: GO 47055
47103: POP
47104: POP
// if horses then
47105: LD_VAR 0 5
47109: IFFALSE 47176
// for i = 1 to horses do
47111: LD_ADDR_VAR 0 11
47115: PUSH
47116: DOUBLE
47117: LD_INT 1
47119: DEC
47120: ST_TO_ADDR
47121: LD_VAR 0 5
47125: PUSH
47126: FOR_TO
47127: IFFALSE 47174
// begin hc_class := 21 ;
47129: LD_ADDR_OWVAR 28
47133: PUSH
47134: LD_INT 21
47136: ST_TO_ADDR
// hc_gallery :=  ;
47137: LD_ADDR_OWVAR 33
47141: PUSH
47142: LD_STRING 
47144: ST_TO_ADDR
// animal := CreateHuman ;
47145: LD_ADDR_VAR 0 12
47149: PUSH
47150: CALL_OW 44
47154: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47155: LD_VAR 0 12
47159: PPUSH
47160: LD_VAR 0 8
47164: PPUSH
47165: LD_INT 0
47167: PPUSH
47168: CALL_OW 49
// end ;
47172: GO 47126
47174: POP
47175: POP
// if birds then
47176: LD_VAR 0 1
47180: IFFALSE 47247
// for i = 1 to birds do
47182: LD_ADDR_VAR 0 11
47186: PUSH
47187: DOUBLE
47188: LD_INT 1
47190: DEC
47191: ST_TO_ADDR
47192: LD_VAR 0 1
47196: PUSH
47197: FOR_TO
47198: IFFALSE 47245
// begin hc_class = 18 ;
47200: LD_ADDR_OWVAR 28
47204: PUSH
47205: LD_INT 18
47207: ST_TO_ADDR
// hc_gallery =  ;
47208: LD_ADDR_OWVAR 33
47212: PUSH
47213: LD_STRING 
47215: ST_TO_ADDR
// animal := CreateHuman ;
47216: LD_ADDR_VAR 0 12
47220: PUSH
47221: CALL_OW 44
47225: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47226: LD_VAR 0 12
47230: PPUSH
47231: LD_VAR 0 8
47235: PPUSH
47236: LD_INT 0
47238: PPUSH
47239: CALL_OW 49
// end ;
47243: GO 47197
47245: POP
47246: POP
// if tigers then
47247: LD_VAR 0 2
47251: IFFALSE 47335
// for i = 1 to tigers do
47253: LD_ADDR_VAR 0 11
47257: PUSH
47258: DOUBLE
47259: LD_INT 1
47261: DEC
47262: ST_TO_ADDR
47263: LD_VAR 0 2
47267: PUSH
47268: FOR_TO
47269: IFFALSE 47333
// begin hc_class = class_tiger ;
47271: LD_ADDR_OWVAR 28
47275: PUSH
47276: LD_INT 14
47278: ST_TO_ADDR
// hc_gallery =  ;
47279: LD_ADDR_OWVAR 33
47283: PUSH
47284: LD_STRING 
47286: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
47287: LD_ADDR_OWVAR 35
47291: PUSH
47292: LD_INT 7
47294: NEG
47295: PPUSH
47296: LD_INT 7
47298: PPUSH
47299: CALL_OW 12
47303: ST_TO_ADDR
// animal := CreateHuman ;
47304: LD_ADDR_VAR 0 12
47308: PUSH
47309: CALL_OW 44
47313: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47314: LD_VAR 0 12
47318: PPUSH
47319: LD_VAR 0 8
47323: PPUSH
47324: LD_INT 0
47326: PPUSH
47327: CALL_OW 49
// end ;
47331: GO 47268
47333: POP
47334: POP
// if apemans then
47335: LD_VAR 0 3
47339: IFFALSE 47462
// for i = 1 to apemans do
47341: LD_ADDR_VAR 0 11
47345: PUSH
47346: DOUBLE
47347: LD_INT 1
47349: DEC
47350: ST_TO_ADDR
47351: LD_VAR 0 3
47355: PUSH
47356: FOR_TO
47357: IFFALSE 47460
// begin hc_class = class_apeman ;
47359: LD_ADDR_OWVAR 28
47363: PUSH
47364: LD_INT 12
47366: ST_TO_ADDR
// hc_gallery =  ;
47367: LD_ADDR_OWVAR 33
47371: PUSH
47372: LD_STRING 
47374: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
47375: LD_ADDR_OWVAR 35
47379: PUSH
47380: LD_INT 5
47382: NEG
47383: PPUSH
47384: LD_INT 5
47386: PPUSH
47387: CALL_OW 12
47391: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
47392: LD_ADDR_OWVAR 31
47396: PUSH
47397: LD_INT 1
47399: PPUSH
47400: LD_INT 3
47402: PPUSH
47403: CALL_OW 12
47407: PUSH
47408: LD_INT 1
47410: PPUSH
47411: LD_INT 3
47413: PPUSH
47414: CALL_OW 12
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: ST_TO_ADDR
// animal := CreateHuman ;
47431: LD_ADDR_VAR 0 12
47435: PUSH
47436: CALL_OW 44
47440: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47441: LD_VAR 0 12
47445: PPUSH
47446: LD_VAR 0 8
47450: PPUSH
47451: LD_INT 0
47453: PPUSH
47454: CALL_OW 49
// end ;
47458: GO 47356
47460: POP
47461: POP
// if enchidnas then
47462: LD_VAR 0 4
47466: IFFALSE 47533
// for i = 1 to enchidnas do
47468: LD_ADDR_VAR 0 11
47472: PUSH
47473: DOUBLE
47474: LD_INT 1
47476: DEC
47477: ST_TO_ADDR
47478: LD_VAR 0 4
47482: PUSH
47483: FOR_TO
47484: IFFALSE 47531
// begin hc_class = 13 ;
47486: LD_ADDR_OWVAR 28
47490: PUSH
47491: LD_INT 13
47493: ST_TO_ADDR
// hc_gallery =  ;
47494: LD_ADDR_OWVAR 33
47498: PUSH
47499: LD_STRING 
47501: ST_TO_ADDR
// animal := CreateHuman ;
47502: LD_ADDR_VAR 0 12
47506: PUSH
47507: CALL_OW 44
47511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47512: LD_VAR 0 12
47516: PPUSH
47517: LD_VAR 0 8
47521: PPUSH
47522: LD_INT 0
47524: PPUSH
47525: CALL_OW 49
// end ;
47529: GO 47483
47531: POP
47532: POP
// if not wat_area then
47533: LD_VAR 0 9
47537: NOT
47538: IFFALSE 47542
// exit ;
47540: GO 47613
// if fishes then
47542: LD_VAR 0 7
47546: IFFALSE 47613
// for i = 1 to fishes do
47548: LD_ADDR_VAR 0 11
47552: PUSH
47553: DOUBLE
47554: LD_INT 1
47556: DEC
47557: ST_TO_ADDR
47558: LD_VAR 0 7
47562: PUSH
47563: FOR_TO
47564: IFFALSE 47611
// begin hc_class = 20 ;
47566: LD_ADDR_OWVAR 28
47570: PUSH
47571: LD_INT 20
47573: ST_TO_ADDR
// hc_gallery =  ;
47574: LD_ADDR_OWVAR 33
47578: PUSH
47579: LD_STRING 
47581: ST_TO_ADDR
// animal := CreateHuman ;
47582: LD_ADDR_VAR 0 12
47586: PUSH
47587: CALL_OW 44
47591: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
47592: LD_VAR 0 12
47596: PPUSH
47597: LD_VAR 0 9
47601: PPUSH
47602: LD_INT 0
47604: PPUSH
47605: CALL_OW 49
// end ;
47609: GO 47563
47611: POP
47612: POP
// end ;
47613: LD_VAR 0 10
47617: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
47618: LD_INT 0
47620: PPUSH
47621: PPUSH
47622: PPUSH
47623: PPUSH
47624: PPUSH
47625: PPUSH
47626: PPUSH
47627: PPUSH
47628: PPUSH
47629: PPUSH
47630: PPUSH
47631: PPUSH
47632: PPUSH
47633: PPUSH
47634: PPUSH
47635: PPUSH
47636: PPUSH
47637: PPUSH
47638: PPUSH
47639: PPUSH
47640: PPUSH
47641: PPUSH
47642: PPUSH
47643: PPUSH
47644: PPUSH
47645: PPUSH
47646: PPUSH
47647: PPUSH
// if not list then
47648: LD_VAR 0 1
47652: NOT
47653: IFFALSE 47657
// exit ;
47655: GO 50954
// base := list [ 1 ] ;
47657: LD_ADDR_VAR 0 3
47661: PUSH
47662: LD_VAR 0 1
47666: PUSH
47667: LD_INT 1
47669: ARRAY
47670: ST_TO_ADDR
// group := list [ 2 ] ;
47671: LD_ADDR_VAR 0 4
47675: PUSH
47676: LD_VAR 0 1
47680: PUSH
47681: LD_INT 2
47683: ARRAY
47684: ST_TO_ADDR
// path := list [ 3 ] ;
47685: LD_ADDR_VAR 0 5
47689: PUSH
47690: LD_VAR 0 1
47694: PUSH
47695: LD_INT 3
47697: ARRAY
47698: ST_TO_ADDR
// flags := list [ 4 ] ;
47699: LD_ADDR_VAR 0 6
47703: PUSH
47704: LD_VAR 0 1
47708: PUSH
47709: LD_INT 4
47711: ARRAY
47712: ST_TO_ADDR
// mined := [ ] ;
47713: LD_ADDR_VAR 0 27
47717: PUSH
47718: EMPTY
47719: ST_TO_ADDR
// bombed := [ ] ;
47720: LD_ADDR_VAR 0 28
47724: PUSH
47725: EMPTY
47726: ST_TO_ADDR
// if not group or not path then
47727: LD_VAR 0 4
47731: NOT
47732: PUSH
47733: LD_VAR 0 5
47737: NOT
47738: OR
47739: IFFALSE 47743
// exit ;
47741: GO 50954
// if flags then
47743: LD_VAR 0 6
47747: IFFALSE 47891
// begin f_ignore_area := flags [ 1 ] ;
47749: LD_ADDR_VAR 0 17
47753: PUSH
47754: LD_VAR 0 6
47758: PUSH
47759: LD_INT 1
47761: ARRAY
47762: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
47763: LD_ADDR_VAR 0 18
47767: PUSH
47768: LD_VAR 0 6
47772: PUSH
47773: LD_INT 2
47775: ARRAY
47776: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
47777: LD_ADDR_VAR 0 19
47781: PUSH
47782: LD_VAR 0 6
47786: PUSH
47787: LD_INT 3
47789: ARRAY
47790: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
47791: LD_ADDR_VAR 0 20
47795: PUSH
47796: LD_VAR 0 6
47800: PUSH
47801: LD_INT 4
47803: ARRAY
47804: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
47805: LD_ADDR_VAR 0 21
47809: PUSH
47810: LD_VAR 0 6
47814: PUSH
47815: LD_INT 5
47817: ARRAY
47818: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
47819: LD_ADDR_VAR 0 22
47823: PUSH
47824: LD_VAR 0 6
47828: PUSH
47829: LD_INT 6
47831: ARRAY
47832: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
47833: LD_ADDR_VAR 0 23
47837: PUSH
47838: LD_VAR 0 6
47842: PUSH
47843: LD_INT 7
47845: ARRAY
47846: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
47847: LD_ADDR_VAR 0 24
47851: PUSH
47852: LD_VAR 0 6
47856: PUSH
47857: LD_INT 8
47859: ARRAY
47860: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
47861: LD_ADDR_VAR 0 25
47865: PUSH
47866: LD_VAR 0 6
47870: PUSH
47871: LD_INT 9
47873: ARRAY
47874: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
47875: LD_ADDR_VAR 0 26
47879: PUSH
47880: LD_VAR 0 6
47884: PUSH
47885: LD_INT 10
47887: ARRAY
47888: ST_TO_ADDR
// end else
47889: GO 47971
// begin f_ignore_area := false ;
47891: LD_ADDR_VAR 0 17
47895: PUSH
47896: LD_INT 0
47898: ST_TO_ADDR
// f_capture := false ;
47899: LD_ADDR_VAR 0 18
47903: PUSH
47904: LD_INT 0
47906: ST_TO_ADDR
// f_ignore_civ := false ;
47907: LD_ADDR_VAR 0 19
47911: PUSH
47912: LD_INT 0
47914: ST_TO_ADDR
// f_murder := false ;
47915: LD_ADDR_VAR 0 20
47919: PUSH
47920: LD_INT 0
47922: ST_TO_ADDR
// f_mines := false ;
47923: LD_ADDR_VAR 0 21
47927: PUSH
47928: LD_INT 0
47930: ST_TO_ADDR
// f_repair := false ;
47931: LD_ADDR_VAR 0 22
47935: PUSH
47936: LD_INT 0
47938: ST_TO_ADDR
// f_heal := false ;
47939: LD_ADDR_VAR 0 23
47943: PUSH
47944: LD_INT 0
47946: ST_TO_ADDR
// f_spacetime := false ;
47947: LD_ADDR_VAR 0 24
47951: PUSH
47952: LD_INT 0
47954: ST_TO_ADDR
// f_attack_depot := false ;
47955: LD_ADDR_VAR 0 25
47959: PUSH
47960: LD_INT 0
47962: ST_TO_ADDR
// f_crawl := false ;
47963: LD_ADDR_VAR 0 26
47967: PUSH
47968: LD_INT 0
47970: ST_TO_ADDR
// end ; units_path := [ ] ;
47971: LD_ADDR_VAR 0 16
47975: PUSH
47976: EMPTY
47977: ST_TO_ADDR
// for i = 1 to group do
47978: LD_ADDR_VAR 0 7
47982: PUSH
47983: DOUBLE
47984: LD_INT 1
47986: DEC
47987: ST_TO_ADDR
47988: LD_VAR 0 4
47992: PUSH
47993: FOR_TO
47994: IFFALSE 48023
// begin units_path := Replace ( units_path , i , path ) ;
47996: LD_ADDR_VAR 0 16
48000: PUSH
48001: LD_VAR 0 16
48005: PPUSH
48006: LD_VAR 0 7
48010: PPUSH
48011: LD_VAR 0 5
48015: PPUSH
48016: CALL_OW 1
48020: ST_TO_ADDR
// end ;
48021: GO 47993
48023: POP
48024: POP
// repeat for i = group downto 1 do
48025: LD_ADDR_VAR 0 7
48029: PUSH
48030: DOUBLE
48031: LD_VAR 0 4
48035: INC
48036: ST_TO_ADDR
48037: LD_INT 1
48039: PUSH
48040: FOR_DOWNTO
48041: IFFALSE 50936
// begin wait ( 0 0$1 ) ;
48043: LD_INT 35
48045: PPUSH
48046: CALL_OW 67
// tmp := [ ] ;
48050: LD_ADDR_VAR 0 14
48054: PUSH
48055: EMPTY
48056: ST_TO_ADDR
// attacking := false ;
48057: LD_ADDR_VAR 0 29
48061: PUSH
48062: LD_INT 0
48064: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
48065: LD_VAR 0 4
48069: PUSH
48070: LD_VAR 0 7
48074: ARRAY
48075: PPUSH
48076: CALL_OW 301
48080: PUSH
48081: LD_VAR 0 4
48085: PUSH
48086: LD_VAR 0 7
48090: ARRAY
48091: NOT
48092: OR
48093: IFFALSE 48137
// begin group := Delete ( group , i ) ;
48095: LD_ADDR_VAR 0 4
48099: PUSH
48100: LD_VAR 0 4
48104: PPUSH
48105: LD_VAR 0 7
48109: PPUSH
48110: CALL_OW 3
48114: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
48115: LD_ADDR_VAR 0 16
48119: PUSH
48120: LD_VAR 0 16
48124: PPUSH
48125: LD_VAR 0 7
48129: PPUSH
48130: CALL_OW 3
48134: ST_TO_ADDR
// continue ;
48135: GO 48040
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
48137: LD_VAR 0 4
48141: PUSH
48142: LD_VAR 0 7
48146: ARRAY
48147: PPUSH
48148: LD_INT 10
48150: PPUSH
48151: CALL 46105 0 2
48155: NOT
48156: PUSH
48157: LD_VAR 0 16
48161: PUSH
48162: LD_VAR 0 7
48166: ARRAY
48167: PUSH
48168: EMPTY
48169: EQUAL
48170: NOT
48171: AND
48172: IFFALSE 48438
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
48174: LD_VAR 0 4
48178: PUSH
48179: LD_VAR 0 7
48183: ARRAY
48184: PPUSH
48185: CALL_OW 262
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: IN
48200: IFFALSE 48241
// if GetFuel ( group [ i ] ) < 10 then
48202: LD_VAR 0 4
48206: PUSH
48207: LD_VAR 0 7
48211: ARRAY
48212: PPUSH
48213: CALL_OW 261
48217: PUSH
48218: LD_INT 10
48220: LESS
48221: IFFALSE 48241
// SetFuel ( group [ i ] , 12 ) ;
48223: LD_VAR 0 4
48227: PUSH
48228: LD_VAR 0 7
48232: ARRAY
48233: PPUSH
48234: LD_INT 12
48236: PPUSH
48237: CALL_OW 240
// if units_path [ i ] then
48241: LD_VAR 0 16
48245: PUSH
48246: LD_VAR 0 7
48250: ARRAY
48251: IFFALSE 48436
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
48253: LD_VAR 0 4
48257: PUSH
48258: LD_VAR 0 7
48262: ARRAY
48263: PPUSH
48264: LD_VAR 0 16
48268: PUSH
48269: LD_VAR 0 7
48273: ARRAY
48274: PUSH
48275: LD_INT 1
48277: ARRAY
48278: PUSH
48279: LD_INT 1
48281: ARRAY
48282: PPUSH
48283: LD_VAR 0 16
48287: PUSH
48288: LD_VAR 0 7
48292: ARRAY
48293: PUSH
48294: LD_INT 1
48296: ARRAY
48297: PUSH
48298: LD_INT 2
48300: ARRAY
48301: PPUSH
48302: CALL_OW 297
48306: PUSH
48307: LD_INT 6
48309: GREATER
48310: IFFALSE 48385
// begin if not HasTask ( group [ i ] ) then
48312: LD_VAR 0 4
48316: PUSH
48317: LD_VAR 0 7
48321: ARRAY
48322: PPUSH
48323: CALL_OW 314
48327: NOT
48328: IFFALSE 48383
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
48330: LD_VAR 0 4
48334: PUSH
48335: LD_VAR 0 7
48339: ARRAY
48340: PPUSH
48341: LD_VAR 0 16
48345: PUSH
48346: LD_VAR 0 7
48350: ARRAY
48351: PUSH
48352: LD_INT 1
48354: ARRAY
48355: PUSH
48356: LD_INT 1
48358: ARRAY
48359: PPUSH
48360: LD_VAR 0 16
48364: PUSH
48365: LD_VAR 0 7
48369: ARRAY
48370: PUSH
48371: LD_INT 1
48373: ARRAY
48374: PUSH
48375: LD_INT 2
48377: ARRAY
48378: PPUSH
48379: CALL_OW 114
// end else
48383: GO 48436
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
48385: LD_ADDR_VAR 0 15
48389: PUSH
48390: LD_VAR 0 16
48394: PUSH
48395: LD_VAR 0 7
48399: ARRAY
48400: PPUSH
48401: LD_INT 1
48403: PPUSH
48404: CALL_OW 3
48408: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
48409: LD_ADDR_VAR 0 16
48413: PUSH
48414: LD_VAR 0 16
48418: PPUSH
48419: LD_VAR 0 7
48423: PPUSH
48424: LD_VAR 0 15
48428: PPUSH
48429: CALL_OW 1
48433: ST_TO_ADDR
// continue ;
48434: GO 48040
// end ; end ; end else
48436: GO 50934
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
48438: LD_ADDR_VAR 0 14
48442: PUSH
48443: LD_INT 81
48445: PUSH
48446: LD_VAR 0 4
48450: PUSH
48451: LD_VAR 0 7
48455: ARRAY
48456: PPUSH
48457: CALL_OW 255
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PPUSH
48466: CALL_OW 69
48470: ST_TO_ADDR
// if not tmp then
48471: LD_VAR 0 14
48475: NOT
48476: IFFALSE 48480
// continue ;
48478: GO 48040
// if f_ignore_area then
48480: LD_VAR 0 17
48484: IFFALSE 48572
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
48486: LD_ADDR_VAR 0 15
48490: PUSH
48491: LD_VAR 0 14
48495: PPUSH
48496: LD_INT 3
48498: PUSH
48499: LD_INT 92
48501: PUSH
48502: LD_VAR 0 17
48506: PUSH
48507: LD_INT 1
48509: ARRAY
48510: PUSH
48511: LD_VAR 0 17
48515: PUSH
48516: LD_INT 2
48518: ARRAY
48519: PUSH
48520: LD_VAR 0 17
48524: PUSH
48525: LD_INT 3
48527: ARRAY
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PPUSH
48539: CALL_OW 72
48543: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48544: LD_VAR 0 14
48548: PUSH
48549: LD_VAR 0 15
48553: DIFF
48554: IFFALSE 48572
// tmp := tmp diff tmp2 ;
48556: LD_ADDR_VAR 0 14
48560: PUSH
48561: LD_VAR 0 14
48565: PUSH
48566: LD_VAR 0 15
48570: DIFF
48571: ST_TO_ADDR
// end ; if not f_murder then
48572: LD_VAR 0 20
48576: NOT
48577: IFFALSE 48635
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
48579: LD_ADDR_VAR 0 15
48583: PUSH
48584: LD_VAR 0 14
48588: PPUSH
48589: LD_INT 3
48591: PUSH
48592: LD_INT 50
48594: PUSH
48595: EMPTY
48596: LIST
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PPUSH
48602: CALL_OW 72
48606: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48607: LD_VAR 0 14
48611: PUSH
48612: LD_VAR 0 15
48616: DIFF
48617: IFFALSE 48635
// tmp := tmp diff tmp2 ;
48619: LD_ADDR_VAR 0 14
48623: PUSH
48624: LD_VAR 0 14
48628: PUSH
48629: LD_VAR 0 15
48633: DIFF
48634: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
48635: LD_ADDR_VAR 0 14
48639: PUSH
48640: LD_VAR 0 4
48644: PUSH
48645: LD_VAR 0 7
48649: ARRAY
48650: PPUSH
48651: LD_VAR 0 14
48655: PPUSH
48656: LD_INT 1
48658: PPUSH
48659: LD_INT 1
48661: PPUSH
48662: CALL 20137 0 4
48666: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
48667: LD_VAR 0 4
48671: PUSH
48672: LD_VAR 0 7
48676: ARRAY
48677: PPUSH
48678: CALL_OW 257
48682: PUSH
48683: LD_INT 1
48685: EQUAL
48686: IFFALSE 49134
// begin if WantPlant ( group [ i ] ) then
48688: LD_VAR 0 4
48692: PUSH
48693: LD_VAR 0 7
48697: ARRAY
48698: PPUSH
48699: CALL 19605 0 1
48703: IFFALSE 48707
// continue ;
48705: GO 48040
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
48707: LD_VAR 0 18
48711: PUSH
48712: LD_VAR 0 4
48716: PUSH
48717: LD_VAR 0 7
48721: ARRAY
48722: PPUSH
48723: CALL_OW 310
48727: NOT
48728: AND
48729: PUSH
48730: LD_VAR 0 14
48734: PUSH
48735: LD_INT 1
48737: ARRAY
48738: PUSH
48739: LD_VAR 0 14
48743: PPUSH
48744: LD_INT 21
48746: PUSH
48747: LD_INT 2
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 58
48756: PUSH
48757: EMPTY
48758: LIST
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PPUSH
48764: CALL_OW 72
48768: IN
48769: AND
48770: IFFALSE 48806
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
48772: LD_VAR 0 4
48776: PUSH
48777: LD_VAR 0 7
48781: ARRAY
48782: PPUSH
48783: LD_VAR 0 14
48787: PUSH
48788: LD_INT 1
48790: ARRAY
48791: PPUSH
48792: CALL_OW 120
// attacking := true ;
48796: LD_ADDR_VAR 0 29
48800: PUSH
48801: LD_INT 1
48803: ST_TO_ADDR
// continue ;
48804: GO 48040
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
48806: LD_VAR 0 26
48810: PUSH
48811: LD_VAR 0 4
48815: PUSH
48816: LD_VAR 0 7
48820: ARRAY
48821: PPUSH
48822: CALL_OW 257
48826: PUSH
48827: LD_INT 1
48829: EQUAL
48830: AND
48831: PUSH
48832: LD_VAR 0 4
48836: PUSH
48837: LD_VAR 0 7
48841: ARRAY
48842: PPUSH
48843: CALL_OW 256
48847: PUSH
48848: LD_INT 800
48850: LESS
48851: AND
48852: PUSH
48853: LD_VAR 0 4
48857: PUSH
48858: LD_VAR 0 7
48862: ARRAY
48863: PPUSH
48864: CALL_OW 318
48868: NOT
48869: AND
48870: IFFALSE 48887
// ComCrawl ( group [ i ] ) ;
48872: LD_VAR 0 4
48876: PUSH
48877: LD_VAR 0 7
48881: ARRAY
48882: PPUSH
48883: CALL_OW 137
// if f_mines then
48887: LD_VAR 0 21
48891: IFFALSE 49134
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
48893: LD_VAR 0 14
48897: PUSH
48898: LD_INT 1
48900: ARRAY
48901: PPUSH
48902: CALL_OW 247
48906: PUSH
48907: LD_INT 3
48909: EQUAL
48910: PUSH
48911: LD_VAR 0 14
48915: PUSH
48916: LD_INT 1
48918: ARRAY
48919: PUSH
48920: LD_VAR 0 27
48924: IN
48925: NOT
48926: AND
48927: IFFALSE 49134
// begin x := GetX ( tmp [ 1 ] ) ;
48929: LD_ADDR_VAR 0 10
48933: PUSH
48934: LD_VAR 0 14
48938: PUSH
48939: LD_INT 1
48941: ARRAY
48942: PPUSH
48943: CALL_OW 250
48947: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
48948: LD_ADDR_VAR 0 11
48952: PUSH
48953: LD_VAR 0 14
48957: PUSH
48958: LD_INT 1
48960: ARRAY
48961: PPUSH
48962: CALL_OW 251
48966: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
48967: LD_ADDR_VAR 0 12
48971: PUSH
48972: LD_VAR 0 4
48976: PUSH
48977: LD_VAR 0 7
48981: ARRAY
48982: PPUSH
48983: CALL 46190 0 1
48987: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
48988: LD_VAR 0 4
48992: PUSH
48993: LD_VAR 0 7
48997: ARRAY
48998: PPUSH
48999: LD_VAR 0 10
49003: PPUSH
49004: LD_VAR 0 11
49008: PPUSH
49009: LD_VAR 0 14
49013: PUSH
49014: LD_INT 1
49016: ARRAY
49017: PPUSH
49018: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
49022: LD_VAR 0 4
49026: PUSH
49027: LD_VAR 0 7
49031: ARRAY
49032: PPUSH
49033: LD_VAR 0 10
49037: PPUSH
49038: LD_VAR 0 12
49042: PPUSH
49043: LD_INT 7
49045: PPUSH
49046: CALL_OW 272
49050: PPUSH
49051: LD_VAR 0 11
49055: PPUSH
49056: LD_VAR 0 12
49060: PPUSH
49061: LD_INT 7
49063: PPUSH
49064: CALL_OW 273
49068: PPUSH
49069: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
49073: LD_VAR 0 4
49077: PUSH
49078: LD_VAR 0 7
49082: ARRAY
49083: PPUSH
49084: LD_INT 71
49086: PPUSH
49087: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
49091: LD_ADDR_VAR 0 27
49095: PUSH
49096: LD_VAR 0 27
49100: PPUSH
49101: LD_VAR 0 27
49105: PUSH
49106: LD_INT 1
49108: PLUS
49109: PPUSH
49110: LD_VAR 0 14
49114: PUSH
49115: LD_INT 1
49117: ARRAY
49118: PPUSH
49119: CALL_OW 1
49123: ST_TO_ADDR
// attacking := true ;
49124: LD_ADDR_VAR 0 29
49128: PUSH
49129: LD_INT 1
49131: ST_TO_ADDR
// continue ;
49132: GO 48040
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
49134: LD_VAR 0 4
49138: PUSH
49139: LD_VAR 0 7
49143: ARRAY
49144: PPUSH
49145: CALL_OW 257
49149: PUSH
49150: LD_INT 17
49152: EQUAL
49153: PUSH
49154: LD_VAR 0 4
49158: PUSH
49159: LD_VAR 0 7
49163: ARRAY
49164: PPUSH
49165: CALL_OW 110
49169: PUSH
49170: LD_INT 71
49172: EQUAL
49173: NOT
49174: AND
49175: IFFALSE 49321
// begin attacking := false ;
49177: LD_ADDR_VAR 0 29
49181: PUSH
49182: LD_INT 0
49184: ST_TO_ADDR
// k := 5 ;
49185: LD_ADDR_VAR 0 9
49189: PUSH
49190: LD_INT 5
49192: ST_TO_ADDR
// if tmp < k then
49193: LD_VAR 0 14
49197: PUSH
49198: LD_VAR 0 9
49202: LESS
49203: IFFALSE 49215
// k := tmp ;
49205: LD_ADDR_VAR 0 9
49209: PUSH
49210: LD_VAR 0 14
49214: ST_TO_ADDR
// for j = 1 to k do
49215: LD_ADDR_VAR 0 8
49219: PUSH
49220: DOUBLE
49221: LD_INT 1
49223: DEC
49224: ST_TO_ADDR
49225: LD_VAR 0 9
49229: PUSH
49230: FOR_TO
49231: IFFALSE 49319
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
49233: LD_VAR 0 14
49237: PUSH
49238: LD_VAR 0 8
49242: ARRAY
49243: PUSH
49244: LD_VAR 0 14
49248: PPUSH
49249: LD_INT 58
49251: PUSH
49252: EMPTY
49253: LIST
49254: PPUSH
49255: CALL_OW 72
49259: IN
49260: NOT
49261: IFFALSE 49317
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49263: LD_VAR 0 4
49267: PUSH
49268: LD_VAR 0 7
49272: ARRAY
49273: PPUSH
49274: LD_VAR 0 14
49278: PUSH
49279: LD_VAR 0 8
49283: ARRAY
49284: PPUSH
49285: CALL_OW 115
// attacking := true ;
49289: LD_ADDR_VAR 0 29
49293: PUSH
49294: LD_INT 1
49296: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
49297: LD_VAR 0 4
49301: PUSH
49302: LD_VAR 0 7
49306: ARRAY
49307: PPUSH
49308: LD_INT 71
49310: PPUSH
49311: CALL_OW 109
// continue ;
49315: GO 49230
// end ; end ;
49317: GO 49230
49319: POP
49320: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
49321: LD_VAR 0 4
49325: PUSH
49326: LD_VAR 0 7
49330: ARRAY
49331: PPUSH
49332: CALL_OW 257
49336: PUSH
49337: LD_INT 8
49339: EQUAL
49340: PUSH
49341: LD_VAR 0 4
49345: PUSH
49346: LD_VAR 0 7
49350: ARRAY
49351: PPUSH
49352: CALL_OW 264
49356: PUSH
49357: LD_INT 28
49359: PUSH
49360: LD_INT 45
49362: PUSH
49363: LD_INT 7
49365: PUSH
49366: LD_INT 47
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: IN
49375: OR
49376: IFFALSE 49606
// begin attacking := false ;
49378: LD_ADDR_VAR 0 29
49382: PUSH
49383: LD_INT 0
49385: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
49386: LD_VAR 0 14
49390: PUSH
49391: LD_INT 1
49393: ARRAY
49394: PPUSH
49395: CALL_OW 266
49399: PUSH
49400: LD_INT 32
49402: PUSH
49403: LD_INT 31
49405: PUSH
49406: LD_INT 33
49408: PUSH
49409: LD_INT 4
49411: PUSH
49412: LD_INT 5
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: IN
49422: IFFALSE 49606
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
49424: LD_ADDR_VAR 0 9
49428: PUSH
49429: LD_VAR 0 14
49433: PUSH
49434: LD_INT 1
49436: ARRAY
49437: PPUSH
49438: CALL_OW 266
49442: PPUSH
49443: LD_VAR 0 14
49447: PUSH
49448: LD_INT 1
49450: ARRAY
49451: PPUSH
49452: CALL_OW 250
49456: PPUSH
49457: LD_VAR 0 14
49461: PUSH
49462: LD_INT 1
49464: ARRAY
49465: PPUSH
49466: CALL_OW 251
49470: PPUSH
49471: LD_VAR 0 14
49475: PUSH
49476: LD_INT 1
49478: ARRAY
49479: PPUSH
49480: CALL_OW 254
49484: PPUSH
49485: LD_VAR 0 14
49489: PUSH
49490: LD_INT 1
49492: ARRAY
49493: PPUSH
49494: CALL_OW 248
49498: PPUSH
49499: LD_INT 0
49501: PPUSH
49502: CALL 27566 0 6
49506: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
49507: LD_ADDR_VAR 0 8
49511: PUSH
49512: LD_VAR 0 4
49516: PUSH
49517: LD_VAR 0 7
49521: ARRAY
49522: PPUSH
49523: LD_VAR 0 9
49527: PPUSH
49528: CALL 46253 0 2
49532: ST_TO_ADDR
// if j then
49533: LD_VAR 0 8
49537: IFFALSE 49606
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49539: LD_VAR 0 8
49543: PUSH
49544: LD_INT 1
49546: ARRAY
49547: PPUSH
49548: LD_VAR 0 8
49552: PUSH
49553: LD_INT 2
49555: ARRAY
49556: PPUSH
49557: CALL_OW 488
49561: IFFALSE 49606
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
49563: LD_VAR 0 4
49567: PUSH
49568: LD_VAR 0 7
49572: ARRAY
49573: PPUSH
49574: LD_VAR 0 8
49578: PUSH
49579: LD_INT 1
49581: ARRAY
49582: PPUSH
49583: LD_VAR 0 8
49587: PUSH
49588: LD_INT 2
49590: ARRAY
49591: PPUSH
49592: CALL_OW 116
// attacking := true ;
49596: LD_ADDR_VAR 0 29
49600: PUSH
49601: LD_INT 1
49603: ST_TO_ADDR
// continue ;
49604: GO 48040
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
49606: LD_VAR 0 4
49610: PUSH
49611: LD_VAR 0 7
49615: ARRAY
49616: PPUSH
49617: CALL_OW 265
49621: PUSH
49622: LD_INT 11
49624: EQUAL
49625: IFFALSE 49903
// begin k := 10 ;
49627: LD_ADDR_VAR 0 9
49631: PUSH
49632: LD_INT 10
49634: ST_TO_ADDR
// x := 0 ;
49635: LD_ADDR_VAR 0 10
49639: PUSH
49640: LD_INT 0
49642: ST_TO_ADDR
// if tmp < k then
49643: LD_VAR 0 14
49647: PUSH
49648: LD_VAR 0 9
49652: LESS
49653: IFFALSE 49665
// k := tmp ;
49655: LD_ADDR_VAR 0 9
49659: PUSH
49660: LD_VAR 0 14
49664: ST_TO_ADDR
// for j = k downto 1 do
49665: LD_ADDR_VAR 0 8
49669: PUSH
49670: DOUBLE
49671: LD_VAR 0 9
49675: INC
49676: ST_TO_ADDR
49677: LD_INT 1
49679: PUSH
49680: FOR_DOWNTO
49681: IFFALSE 49756
// begin if GetType ( tmp [ j ] ) = unit_human then
49683: LD_VAR 0 14
49687: PUSH
49688: LD_VAR 0 8
49692: ARRAY
49693: PPUSH
49694: CALL_OW 247
49698: PUSH
49699: LD_INT 1
49701: EQUAL
49702: IFFALSE 49754
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
49704: LD_VAR 0 4
49708: PUSH
49709: LD_VAR 0 7
49713: ARRAY
49714: PPUSH
49715: LD_VAR 0 14
49719: PUSH
49720: LD_VAR 0 8
49724: ARRAY
49725: PPUSH
49726: CALL 46524 0 2
// x := tmp [ j ] ;
49730: LD_ADDR_VAR 0 10
49734: PUSH
49735: LD_VAR 0 14
49739: PUSH
49740: LD_VAR 0 8
49744: ARRAY
49745: ST_TO_ADDR
// attacking := true ;
49746: LD_ADDR_VAR 0 29
49750: PUSH
49751: LD_INT 1
49753: ST_TO_ADDR
// end ; end ;
49754: GO 49680
49756: POP
49757: POP
// if not x then
49758: LD_VAR 0 10
49762: NOT
49763: IFFALSE 49903
// begin attacking := true ;
49765: LD_ADDR_VAR 0 29
49769: PUSH
49770: LD_INT 1
49772: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
49773: LD_VAR 0 4
49777: PUSH
49778: LD_VAR 0 7
49782: ARRAY
49783: PPUSH
49784: CALL_OW 250
49788: PPUSH
49789: LD_VAR 0 4
49793: PUSH
49794: LD_VAR 0 7
49798: ARRAY
49799: PPUSH
49800: CALL_OW 251
49804: PPUSH
49805: CALL_OW 546
49809: PUSH
49810: LD_INT 2
49812: ARRAY
49813: PUSH
49814: LD_VAR 0 14
49818: PUSH
49819: LD_INT 1
49821: ARRAY
49822: PPUSH
49823: CALL_OW 250
49827: PPUSH
49828: LD_VAR 0 14
49832: PUSH
49833: LD_INT 1
49835: ARRAY
49836: PPUSH
49837: CALL_OW 251
49841: PPUSH
49842: CALL_OW 546
49846: PUSH
49847: LD_INT 2
49849: ARRAY
49850: EQUAL
49851: IFFALSE 49879
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
49853: LD_VAR 0 4
49857: PUSH
49858: LD_VAR 0 7
49862: ARRAY
49863: PPUSH
49864: LD_VAR 0 14
49868: PUSH
49869: LD_INT 1
49871: ARRAY
49872: PPUSH
49873: CALL 46524 0 2
49877: GO 49903
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49879: LD_VAR 0 4
49883: PUSH
49884: LD_VAR 0 7
49888: ARRAY
49889: PPUSH
49890: LD_VAR 0 14
49894: PUSH
49895: LD_INT 1
49897: ARRAY
49898: PPUSH
49899: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
49903: LD_VAR 0 4
49907: PUSH
49908: LD_VAR 0 7
49912: ARRAY
49913: PPUSH
49914: CALL_OW 264
49918: PUSH
49919: LD_INT 29
49921: EQUAL
49922: IFFALSE 50288
// begin if WantsToAttack ( group [ i ] ) in bombed then
49924: LD_VAR 0 4
49928: PUSH
49929: LD_VAR 0 7
49933: ARRAY
49934: PPUSH
49935: CALL_OW 319
49939: PUSH
49940: LD_VAR 0 28
49944: IN
49945: IFFALSE 49949
// continue ;
49947: GO 48040
// k := 8 ;
49949: LD_ADDR_VAR 0 9
49953: PUSH
49954: LD_INT 8
49956: ST_TO_ADDR
// x := 0 ;
49957: LD_ADDR_VAR 0 10
49961: PUSH
49962: LD_INT 0
49964: ST_TO_ADDR
// if tmp < k then
49965: LD_VAR 0 14
49969: PUSH
49970: LD_VAR 0 9
49974: LESS
49975: IFFALSE 49987
// k := tmp ;
49977: LD_ADDR_VAR 0 9
49981: PUSH
49982: LD_VAR 0 14
49986: ST_TO_ADDR
// for j = 1 to k do
49987: LD_ADDR_VAR 0 8
49991: PUSH
49992: DOUBLE
49993: LD_INT 1
49995: DEC
49996: ST_TO_ADDR
49997: LD_VAR 0 9
50001: PUSH
50002: FOR_TO
50003: IFFALSE 50135
// begin if GetType ( tmp [ j ] ) = unit_building then
50005: LD_VAR 0 14
50009: PUSH
50010: LD_VAR 0 8
50014: ARRAY
50015: PPUSH
50016: CALL_OW 247
50020: PUSH
50021: LD_INT 3
50023: EQUAL
50024: IFFALSE 50133
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
50026: LD_VAR 0 14
50030: PUSH
50031: LD_VAR 0 8
50035: ARRAY
50036: PUSH
50037: LD_VAR 0 28
50041: IN
50042: NOT
50043: PUSH
50044: LD_VAR 0 14
50048: PUSH
50049: LD_VAR 0 8
50053: ARRAY
50054: PPUSH
50055: CALL_OW 313
50059: AND
50060: IFFALSE 50133
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50062: LD_VAR 0 4
50066: PUSH
50067: LD_VAR 0 7
50071: ARRAY
50072: PPUSH
50073: LD_VAR 0 14
50077: PUSH
50078: LD_VAR 0 8
50082: ARRAY
50083: PPUSH
50084: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
50088: LD_ADDR_VAR 0 28
50092: PUSH
50093: LD_VAR 0 28
50097: PPUSH
50098: LD_VAR 0 28
50102: PUSH
50103: LD_INT 1
50105: PLUS
50106: PPUSH
50107: LD_VAR 0 14
50111: PUSH
50112: LD_VAR 0 8
50116: ARRAY
50117: PPUSH
50118: CALL_OW 1
50122: ST_TO_ADDR
// attacking := true ;
50123: LD_ADDR_VAR 0 29
50127: PUSH
50128: LD_INT 1
50130: ST_TO_ADDR
// break ;
50131: GO 50135
// end ; end ;
50133: GO 50002
50135: POP
50136: POP
// if not attacking and f_attack_depot then
50137: LD_VAR 0 29
50141: NOT
50142: PUSH
50143: LD_VAR 0 25
50147: AND
50148: IFFALSE 50243
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50150: LD_ADDR_VAR 0 13
50154: PUSH
50155: LD_VAR 0 14
50159: PPUSH
50160: LD_INT 2
50162: PUSH
50163: LD_INT 30
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 30
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: LIST
50187: PPUSH
50188: CALL_OW 72
50192: ST_TO_ADDR
// if z then
50193: LD_VAR 0 13
50197: IFFALSE 50243
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
50199: LD_VAR 0 4
50203: PUSH
50204: LD_VAR 0 7
50208: ARRAY
50209: PPUSH
50210: LD_VAR 0 13
50214: PPUSH
50215: LD_VAR 0 4
50219: PUSH
50220: LD_VAR 0 7
50224: ARRAY
50225: PPUSH
50226: CALL_OW 74
50230: PPUSH
50231: CALL_OW 115
// attacking := true ;
50235: LD_ADDR_VAR 0 29
50239: PUSH
50240: LD_INT 1
50242: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
50243: LD_VAR 0 4
50247: PUSH
50248: LD_VAR 0 7
50252: ARRAY
50253: PPUSH
50254: CALL_OW 256
50258: PUSH
50259: LD_INT 500
50261: LESS
50262: IFFALSE 50288
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50264: LD_VAR 0 4
50268: PUSH
50269: LD_VAR 0 7
50273: ARRAY
50274: PPUSH
50275: LD_VAR 0 14
50279: PUSH
50280: LD_INT 1
50282: ARRAY
50283: PPUSH
50284: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50288: LD_VAR 0 4
50292: PUSH
50293: LD_VAR 0 7
50297: ARRAY
50298: PPUSH
50299: CALL_OW 256
50303: PUSH
50304: LD_INT 250
50306: LESS
50307: PUSH
50308: LD_VAR 0 4
50312: PUSH
50313: LD_VAR 0 7
50317: ARRAY
50318: PUSH
50319: LD_INT 21
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 23
50331: PUSH
50332: LD_INT 2
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PPUSH
50343: CALL_OW 69
50347: IN
50348: AND
50349: IFFALSE 50474
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
50351: LD_ADDR_VAR 0 9
50355: PUSH
50356: LD_OWVAR 3
50360: PUSH
50361: LD_VAR 0 4
50365: PUSH
50366: LD_VAR 0 7
50370: ARRAY
50371: DIFF
50372: PPUSH
50373: LD_VAR 0 4
50377: PUSH
50378: LD_VAR 0 7
50382: ARRAY
50383: PPUSH
50384: CALL_OW 74
50388: ST_TO_ADDR
// if not k then
50389: LD_VAR 0 9
50393: NOT
50394: IFFALSE 50398
// continue ;
50396: GO 48040
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
50398: LD_VAR 0 9
50402: PUSH
50403: LD_INT 81
50405: PUSH
50406: LD_VAR 0 4
50410: PUSH
50411: LD_VAR 0 7
50415: ARRAY
50416: PPUSH
50417: CALL_OW 255
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PPUSH
50426: CALL_OW 69
50430: IN
50431: PUSH
50432: LD_VAR 0 9
50436: PPUSH
50437: LD_VAR 0 4
50441: PUSH
50442: LD_VAR 0 7
50446: ARRAY
50447: PPUSH
50448: CALL_OW 296
50452: PUSH
50453: LD_INT 5
50455: LESS
50456: AND
50457: IFFALSE 50474
// ComAutodestruct ( group [ i ] ) ;
50459: LD_VAR 0 4
50463: PUSH
50464: LD_VAR 0 7
50468: ARRAY
50469: PPUSH
50470: CALL 46422 0 1
// end ; if f_attack_depot then
50474: LD_VAR 0 25
50478: IFFALSE 50590
// begin k := 6 ;
50480: LD_ADDR_VAR 0 9
50484: PUSH
50485: LD_INT 6
50487: ST_TO_ADDR
// if tmp < k then
50488: LD_VAR 0 14
50492: PUSH
50493: LD_VAR 0 9
50497: LESS
50498: IFFALSE 50510
// k := tmp ;
50500: LD_ADDR_VAR 0 9
50504: PUSH
50505: LD_VAR 0 14
50509: ST_TO_ADDR
// for j = 1 to k do
50510: LD_ADDR_VAR 0 8
50514: PUSH
50515: DOUBLE
50516: LD_INT 1
50518: DEC
50519: ST_TO_ADDR
50520: LD_VAR 0 9
50524: PUSH
50525: FOR_TO
50526: IFFALSE 50588
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
50528: LD_VAR 0 8
50532: PPUSH
50533: CALL_OW 266
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: IN
50548: IFFALSE 50586
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50550: LD_VAR 0 4
50554: PUSH
50555: LD_VAR 0 7
50559: ARRAY
50560: PPUSH
50561: LD_VAR 0 14
50565: PUSH
50566: LD_VAR 0 8
50570: ARRAY
50571: PPUSH
50572: CALL_OW 115
// attacking := true ;
50576: LD_ADDR_VAR 0 29
50580: PUSH
50581: LD_INT 1
50583: ST_TO_ADDR
// break ;
50584: GO 50588
// end ;
50586: GO 50525
50588: POP
50589: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
50590: LD_VAR 0 4
50594: PUSH
50595: LD_VAR 0 7
50599: ARRAY
50600: PPUSH
50601: CALL_OW 302
50605: PUSH
50606: LD_VAR 0 29
50610: NOT
50611: AND
50612: IFFALSE 50934
// begin if GetTag ( group [ i ] ) = 71 then
50614: LD_VAR 0 4
50618: PUSH
50619: LD_VAR 0 7
50623: ARRAY
50624: PPUSH
50625: CALL_OW 110
50629: PUSH
50630: LD_INT 71
50632: EQUAL
50633: IFFALSE 50674
// begin if HasTask ( group [ i ] ) then
50635: LD_VAR 0 4
50639: PUSH
50640: LD_VAR 0 7
50644: ARRAY
50645: PPUSH
50646: CALL_OW 314
50650: IFFALSE 50656
// continue else
50652: GO 48040
50654: GO 50674
// SetTag ( group [ i ] , 0 ) ;
50656: LD_VAR 0 4
50660: PUSH
50661: LD_VAR 0 7
50665: ARRAY
50666: PPUSH
50667: LD_INT 0
50669: PPUSH
50670: CALL_OW 109
// end ; k := 8 ;
50674: LD_ADDR_VAR 0 9
50678: PUSH
50679: LD_INT 8
50681: ST_TO_ADDR
// x := 0 ;
50682: LD_ADDR_VAR 0 10
50686: PUSH
50687: LD_INT 0
50689: ST_TO_ADDR
// if tmp < k then
50690: LD_VAR 0 14
50694: PUSH
50695: LD_VAR 0 9
50699: LESS
50700: IFFALSE 50712
// k := tmp ;
50702: LD_ADDR_VAR 0 9
50706: PUSH
50707: LD_VAR 0 14
50711: ST_TO_ADDR
// for j = 1 to k do
50712: LD_ADDR_VAR 0 8
50716: PUSH
50717: DOUBLE
50718: LD_INT 1
50720: DEC
50721: ST_TO_ADDR
50722: LD_VAR 0 9
50726: PUSH
50727: FOR_TO
50728: IFFALSE 50826
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
50730: LD_VAR 0 14
50734: PUSH
50735: LD_VAR 0 8
50739: ARRAY
50740: PPUSH
50741: CALL_OW 247
50745: PUSH
50746: LD_INT 1
50748: EQUAL
50749: PUSH
50750: LD_VAR 0 14
50754: PUSH
50755: LD_VAR 0 8
50759: ARRAY
50760: PPUSH
50761: CALL_OW 256
50765: PUSH
50766: LD_INT 250
50768: LESS
50769: PUSH
50770: LD_VAR 0 20
50774: AND
50775: PUSH
50776: LD_VAR 0 20
50780: NOT
50781: PUSH
50782: LD_VAR 0 14
50786: PUSH
50787: LD_VAR 0 8
50791: ARRAY
50792: PPUSH
50793: CALL_OW 256
50797: PUSH
50798: LD_INT 250
50800: GREATEREQUAL
50801: AND
50802: OR
50803: AND
50804: IFFALSE 50824
// begin x := tmp [ j ] ;
50806: LD_ADDR_VAR 0 10
50810: PUSH
50811: LD_VAR 0 14
50815: PUSH
50816: LD_VAR 0 8
50820: ARRAY
50821: ST_TO_ADDR
// break ;
50822: GO 50826
// end ;
50824: GO 50727
50826: POP
50827: POP
// if x then
50828: LD_VAR 0 10
50832: IFFALSE 50856
// ComAttackUnit ( group [ i ] , x ) else
50834: LD_VAR 0 4
50838: PUSH
50839: LD_VAR 0 7
50843: ARRAY
50844: PPUSH
50845: LD_VAR 0 10
50849: PPUSH
50850: CALL_OW 115
50854: GO 50880
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50856: LD_VAR 0 4
50860: PUSH
50861: LD_VAR 0 7
50865: ARRAY
50866: PPUSH
50867: LD_VAR 0 14
50871: PUSH
50872: LD_INT 1
50874: ARRAY
50875: PPUSH
50876: CALL_OW 115
// if not HasTask ( group [ i ] ) then
50880: LD_VAR 0 4
50884: PUSH
50885: LD_VAR 0 7
50889: ARRAY
50890: PPUSH
50891: CALL_OW 314
50895: NOT
50896: IFFALSE 50934
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
50898: LD_VAR 0 4
50902: PUSH
50903: LD_VAR 0 7
50907: ARRAY
50908: PPUSH
50909: LD_VAR 0 14
50913: PPUSH
50914: LD_VAR 0 4
50918: PUSH
50919: LD_VAR 0 7
50923: ARRAY
50924: PPUSH
50925: CALL_OW 74
50929: PPUSH
50930: CALL_OW 115
// end ; end ; end ;
50934: GO 48040
50936: POP
50937: POP
// wait ( 0 0$1 ) ;
50938: LD_INT 35
50940: PPUSH
50941: CALL_OW 67
// until group = [ ] ;
50945: LD_VAR 0 4
50949: PUSH
50950: EMPTY
50951: EQUAL
50952: IFFALSE 48025
// end ;
50954: LD_VAR 0 2
50958: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50959: LD_INT 0
50961: PPUSH
50962: PPUSH
50963: PPUSH
50964: PPUSH
// if not base_units then
50965: LD_VAR 0 1
50969: NOT
50970: IFFALSE 50974
// exit ;
50972: GO 51061
// result := false ;
50974: LD_ADDR_VAR 0 2
50978: PUSH
50979: LD_INT 0
50981: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50982: LD_ADDR_VAR 0 5
50986: PUSH
50987: LD_VAR 0 1
50991: PPUSH
50992: LD_INT 21
50994: PUSH
50995: LD_INT 3
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PPUSH
51002: CALL_OW 72
51006: ST_TO_ADDR
// if not tmp then
51007: LD_VAR 0 5
51011: NOT
51012: IFFALSE 51016
// exit ;
51014: GO 51061
// for i in tmp do
51016: LD_ADDR_VAR 0 3
51020: PUSH
51021: LD_VAR 0 5
51025: PUSH
51026: FOR_IN
51027: IFFALSE 51059
// begin result := EnemyInRange ( i , 22 ) ;
51029: LD_ADDR_VAR 0 2
51033: PUSH
51034: LD_VAR 0 3
51038: PPUSH
51039: LD_INT 22
51041: PPUSH
51042: CALL 46105 0 2
51046: ST_TO_ADDR
// if result then
51047: LD_VAR 0 2
51051: IFFALSE 51057
// exit ;
51053: POP
51054: POP
51055: GO 51061
// end ;
51057: GO 51026
51059: POP
51060: POP
// end ;
51061: LD_VAR 0 2
51065: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
51066: LD_INT 0
51068: PPUSH
51069: PPUSH
// if not units then
51070: LD_VAR 0 1
51074: NOT
51075: IFFALSE 51079
// exit ;
51077: GO 51149
// result := [ ] ;
51079: LD_ADDR_VAR 0 3
51083: PUSH
51084: EMPTY
51085: ST_TO_ADDR
// for i in units do
51086: LD_ADDR_VAR 0 4
51090: PUSH
51091: LD_VAR 0 1
51095: PUSH
51096: FOR_IN
51097: IFFALSE 51147
// if GetTag ( i ) = tag then
51099: LD_VAR 0 4
51103: PPUSH
51104: CALL_OW 110
51108: PUSH
51109: LD_VAR 0 2
51113: EQUAL
51114: IFFALSE 51145
// result := Insert ( result , result + 1 , i ) ;
51116: LD_ADDR_VAR 0 3
51120: PUSH
51121: LD_VAR 0 3
51125: PPUSH
51126: LD_VAR 0 3
51130: PUSH
51131: LD_INT 1
51133: PLUS
51134: PPUSH
51135: LD_VAR 0 4
51139: PPUSH
51140: CALL_OW 2
51144: ST_TO_ADDR
51145: GO 51096
51147: POP
51148: POP
// end ;
51149: LD_VAR 0 3
51153: RET
// export function IsDriver ( un ) ; begin
51154: LD_INT 0
51156: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51157: LD_ADDR_VAR 0 2
51161: PUSH
51162: LD_VAR 0 1
51166: PUSH
51167: LD_INT 55
51169: PUSH
51170: EMPTY
51171: LIST
51172: PPUSH
51173: CALL_OW 69
51177: IN
51178: ST_TO_ADDR
// end ;
51179: LD_VAR 0 2
51183: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51184: LD_INT 0
51186: PPUSH
51187: PPUSH
// list := [ ] ;
51188: LD_ADDR_VAR 0 5
51192: PUSH
51193: EMPTY
51194: ST_TO_ADDR
// case d of 0 :
51195: LD_VAR 0 3
51199: PUSH
51200: LD_INT 0
51202: DOUBLE
51203: EQUAL
51204: IFTRUE 51208
51206: GO 51341
51208: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51209: LD_ADDR_VAR 0 5
51213: PUSH
51214: LD_VAR 0 1
51218: PUSH
51219: LD_INT 4
51221: MINUS
51222: PUSH
51223: LD_VAR 0 2
51227: PUSH
51228: LD_INT 4
51230: MINUS
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: LIST
51239: PUSH
51240: LD_VAR 0 1
51244: PUSH
51245: LD_INT 3
51247: MINUS
51248: PUSH
51249: LD_VAR 0 2
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: LIST
51261: PUSH
51262: LD_VAR 0 1
51266: PUSH
51267: LD_INT 4
51269: PLUS
51270: PUSH
51271: LD_VAR 0 2
51275: PUSH
51276: LD_INT 4
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: LIST
51283: PUSH
51284: LD_VAR 0 1
51288: PUSH
51289: LD_INT 3
51291: PLUS
51292: PUSH
51293: LD_VAR 0 2
51297: PUSH
51298: LD_INT 3
51300: PLUS
51301: PUSH
51302: LD_INT 5
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: LIST
51309: PUSH
51310: LD_VAR 0 1
51314: PUSH
51315: LD_VAR 0 2
51319: PUSH
51320: LD_INT 4
51322: PLUS
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: LIST
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: ST_TO_ADDR
// end ; 1 :
51339: GO 52039
51341: LD_INT 1
51343: DOUBLE
51344: EQUAL
51345: IFTRUE 51349
51347: GO 51482
51349: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51350: LD_ADDR_VAR 0 5
51354: PUSH
51355: LD_VAR 0 1
51359: PUSH
51360: LD_VAR 0 2
51364: PUSH
51365: LD_INT 4
51367: MINUS
51368: PUSH
51369: LD_INT 3
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: LIST
51376: PUSH
51377: LD_VAR 0 1
51381: PUSH
51382: LD_INT 3
51384: MINUS
51385: PUSH
51386: LD_VAR 0 2
51390: PUSH
51391: LD_INT 3
51393: MINUS
51394: PUSH
51395: LD_INT 2
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: LIST
51402: PUSH
51403: LD_VAR 0 1
51407: PUSH
51408: LD_INT 4
51410: MINUS
51411: PUSH
51412: LD_VAR 0 2
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: LIST
51424: PUSH
51425: LD_VAR 0 1
51429: PUSH
51430: LD_VAR 0 2
51434: PUSH
51435: LD_INT 3
51437: PLUS
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: LIST
51446: PUSH
51447: LD_VAR 0 1
51451: PUSH
51452: LD_INT 4
51454: PLUS
51455: PUSH
51456: LD_VAR 0 2
51460: PUSH
51461: LD_INT 4
51463: PLUS
51464: PUSH
51465: LD_INT 5
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: LIST
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: ST_TO_ADDR
// end ; 2 :
51480: GO 52039
51482: LD_INT 2
51484: DOUBLE
51485: EQUAL
51486: IFTRUE 51490
51488: GO 51619
51490: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51491: LD_ADDR_VAR 0 5
51495: PUSH
51496: LD_VAR 0 1
51500: PUSH
51501: LD_VAR 0 2
51505: PUSH
51506: LD_INT 3
51508: MINUS
51509: PUSH
51510: LD_INT 3
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: LIST
51517: PUSH
51518: LD_VAR 0 1
51522: PUSH
51523: LD_INT 4
51525: PLUS
51526: PUSH
51527: LD_VAR 0 2
51531: PUSH
51532: LD_INT 4
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: LIST
51539: PUSH
51540: LD_VAR 0 1
51544: PUSH
51545: LD_VAR 0 2
51549: PUSH
51550: LD_INT 4
51552: PLUS
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: LIST
51561: PUSH
51562: LD_VAR 0 1
51566: PUSH
51567: LD_INT 3
51569: MINUS
51570: PUSH
51571: LD_VAR 0 2
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: LIST
51583: PUSH
51584: LD_VAR 0 1
51588: PUSH
51589: LD_INT 4
51591: MINUS
51592: PUSH
51593: LD_VAR 0 2
51597: PUSH
51598: LD_INT 4
51600: MINUS
51601: PUSH
51602: LD_INT 2
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: LIST
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: ST_TO_ADDR
// end ; 3 :
51617: GO 52039
51619: LD_INT 3
51621: DOUBLE
51622: EQUAL
51623: IFTRUE 51627
51625: GO 51760
51627: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51628: LD_ADDR_VAR 0 5
51632: PUSH
51633: LD_VAR 0 1
51637: PUSH
51638: LD_INT 3
51640: PLUS
51641: PUSH
51642: LD_VAR 0 2
51646: PUSH
51647: LD_INT 4
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: LIST
51654: PUSH
51655: LD_VAR 0 1
51659: PUSH
51660: LD_INT 4
51662: PLUS
51663: PUSH
51664: LD_VAR 0 2
51668: PUSH
51669: LD_INT 4
51671: PLUS
51672: PUSH
51673: LD_INT 5
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: LIST
51680: PUSH
51681: LD_VAR 0 1
51685: PUSH
51686: LD_INT 4
51688: MINUS
51689: PUSH
51690: LD_VAR 0 2
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: LIST
51702: PUSH
51703: LD_VAR 0 1
51707: PUSH
51708: LD_VAR 0 2
51712: PUSH
51713: LD_INT 4
51715: MINUS
51716: PUSH
51717: LD_INT 3
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: PUSH
51725: LD_VAR 0 1
51729: PUSH
51730: LD_INT 3
51732: MINUS
51733: PUSH
51734: LD_VAR 0 2
51738: PUSH
51739: LD_INT 3
51741: MINUS
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: ST_TO_ADDR
// end ; 4 :
51758: GO 52039
51760: LD_INT 4
51762: DOUBLE
51763: EQUAL
51764: IFTRUE 51768
51766: GO 51901
51768: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51769: LD_ADDR_VAR 0 5
51773: PUSH
51774: LD_VAR 0 1
51778: PUSH
51779: LD_VAR 0 2
51783: PUSH
51784: LD_INT 4
51786: PLUS
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: PUSH
51796: LD_VAR 0 1
51800: PUSH
51801: LD_INT 3
51803: PLUS
51804: PUSH
51805: LD_VAR 0 2
51809: PUSH
51810: LD_INT 3
51812: PLUS
51813: PUSH
51814: LD_INT 5
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: LIST
51821: PUSH
51822: LD_VAR 0 1
51826: PUSH
51827: LD_INT 4
51829: PLUS
51830: PUSH
51831: LD_VAR 0 2
51835: PUSH
51836: LD_INT 4
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: LIST
51843: PUSH
51844: LD_VAR 0 1
51848: PUSH
51849: LD_VAR 0 2
51853: PUSH
51854: LD_INT 3
51856: MINUS
51857: PUSH
51858: LD_INT 3
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: LIST
51865: PUSH
51866: LD_VAR 0 1
51870: PUSH
51871: LD_INT 4
51873: MINUS
51874: PUSH
51875: LD_VAR 0 2
51879: PUSH
51880: LD_INT 4
51882: MINUS
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: LIST
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: ST_TO_ADDR
// end ; 5 :
51899: GO 52039
51901: LD_INT 5
51903: DOUBLE
51904: EQUAL
51905: IFTRUE 51909
51907: GO 52038
51909: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51910: LD_ADDR_VAR 0 5
51914: PUSH
51915: LD_VAR 0 1
51919: PUSH
51920: LD_INT 4
51922: MINUS
51923: PUSH
51924: LD_VAR 0 2
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: LIST
51936: PUSH
51937: LD_VAR 0 1
51941: PUSH
51942: LD_VAR 0 2
51946: PUSH
51947: LD_INT 4
51949: MINUS
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: LIST
51958: PUSH
51959: LD_VAR 0 1
51963: PUSH
51964: LD_INT 4
51966: PLUS
51967: PUSH
51968: LD_VAR 0 2
51972: PUSH
51973: LD_INT 4
51975: PLUS
51976: PUSH
51977: LD_INT 5
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: LIST
51984: PUSH
51985: LD_VAR 0 1
51989: PUSH
51990: LD_INT 3
51992: PLUS
51993: PUSH
51994: LD_VAR 0 2
51998: PUSH
51999: LD_INT 4
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: LIST
52006: PUSH
52007: LD_VAR 0 1
52011: PUSH
52012: LD_VAR 0 2
52016: PUSH
52017: LD_INT 3
52019: PLUS
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: ST_TO_ADDR
// end ; end ;
52036: GO 52039
52038: POP
// result := list ;
52039: LD_ADDR_VAR 0 4
52043: PUSH
52044: LD_VAR 0 5
52048: ST_TO_ADDR
// end ; end_of_file
52049: LD_VAR 0 4
52053: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver ; export function InitMacro ; var i ; begin
52054: LD_INT 0
52056: PPUSH
52057: PPUSH
// skirmish := false ;
52058: LD_ADDR_EXP 56
52062: PUSH
52063: LD_INT 0
52065: ST_TO_ADDR
// mc_bases := [ ] ;
52066: LD_ADDR_EXP 57
52070: PUSH
52071: EMPTY
52072: ST_TO_ADDR
// mc_sides := [ ] ;
52073: LD_ADDR_EXP 83
52077: PUSH
52078: EMPTY
52079: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
52080: LD_ADDR_EXP 58
52084: PUSH
52085: EMPTY
52086: ST_TO_ADDR
// mc_building_repairs := [ ] ;
52087: LD_ADDR_EXP 59
52091: PUSH
52092: EMPTY
52093: ST_TO_ADDR
// mc_need_heal := [ ] ;
52094: LD_ADDR_EXP 60
52098: PUSH
52099: EMPTY
52100: ST_TO_ADDR
// mc_healers := [ ] ;
52101: LD_ADDR_EXP 61
52105: PUSH
52106: EMPTY
52107: ST_TO_ADDR
// mc_build_list := [ ] ;
52108: LD_ADDR_EXP 62
52112: PUSH
52113: EMPTY
52114: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
52115: LD_ADDR_EXP 89
52119: PUSH
52120: EMPTY
52121: ST_TO_ADDR
// mc_builders := [ ] ;
52122: LD_ADDR_EXP 63
52126: PUSH
52127: EMPTY
52128: ST_TO_ADDR
// mc_construct_list := [ ] ;
52129: LD_ADDR_EXP 64
52133: PUSH
52134: EMPTY
52135: ST_TO_ADDR
// mc_turret_list := [ ] ;
52136: LD_ADDR_EXP 65
52140: PUSH
52141: EMPTY
52142: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
52143: LD_ADDR_EXP 66
52147: PUSH
52148: EMPTY
52149: ST_TO_ADDR
// mc_miners := [ ] ;
52150: LD_ADDR_EXP 71
52154: PUSH
52155: EMPTY
52156: ST_TO_ADDR
// mc_mines := [ ] ;
52157: LD_ADDR_EXP 70
52161: PUSH
52162: EMPTY
52163: ST_TO_ADDR
// mc_minefields := [ ] ;
52164: LD_ADDR_EXP 72
52168: PUSH
52169: EMPTY
52170: ST_TO_ADDR
// mc_crates := [ ] ;
52171: LD_ADDR_EXP 73
52175: PUSH
52176: EMPTY
52177: ST_TO_ADDR
// mc_crates_collector := [ ] ;
52178: LD_ADDR_EXP 74
52182: PUSH
52183: EMPTY
52184: ST_TO_ADDR
// mc_crates_area := [ ] ;
52185: LD_ADDR_EXP 75
52189: PUSH
52190: EMPTY
52191: ST_TO_ADDR
// mc_vehicles := [ ] ;
52192: LD_ADDR_EXP 76
52196: PUSH
52197: EMPTY
52198: ST_TO_ADDR
// mc_attack := [ ] ;
52199: LD_ADDR_EXP 77
52203: PUSH
52204: EMPTY
52205: ST_TO_ADDR
// mc_produce := [ ] ;
52206: LD_ADDR_EXP 78
52210: PUSH
52211: EMPTY
52212: ST_TO_ADDR
// mc_defender := [ ] ;
52213: LD_ADDR_EXP 79
52217: PUSH
52218: EMPTY
52219: ST_TO_ADDR
// mc_parking := [ ] ;
52220: LD_ADDR_EXP 81
52224: PUSH
52225: EMPTY
52226: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
52227: LD_ADDR_EXP 67
52231: PUSH
52232: EMPTY
52233: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
52234: LD_ADDR_EXP 69
52238: PUSH
52239: EMPTY
52240: ST_TO_ADDR
// mc_scan := [ ] ;
52241: LD_ADDR_EXP 80
52245: PUSH
52246: EMPTY
52247: ST_TO_ADDR
// mc_scan_area := [ ] ;
52248: LD_ADDR_EXP 82
52252: PUSH
52253: EMPTY
52254: ST_TO_ADDR
// mc_tech := [ ] ;
52255: LD_ADDR_EXP 84
52259: PUSH
52260: EMPTY
52261: ST_TO_ADDR
// end ;
52262: LD_VAR 0 1
52266: RET
// export function MC_Kill ( base ) ; begin
52267: LD_INT 0
52269: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
52270: LD_ADDR_EXP 57
52274: PUSH
52275: LD_EXP 57
52279: PPUSH
52280: LD_VAR 0 1
52284: PPUSH
52285: EMPTY
52286: PPUSH
52287: CALL_OW 1
52291: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
52292: LD_ADDR_EXP 58
52296: PUSH
52297: LD_EXP 58
52301: PPUSH
52302: LD_VAR 0 1
52306: PPUSH
52307: EMPTY
52308: PPUSH
52309: CALL_OW 1
52313: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
52314: LD_ADDR_EXP 59
52318: PUSH
52319: LD_EXP 59
52323: PPUSH
52324: LD_VAR 0 1
52328: PPUSH
52329: EMPTY
52330: PPUSH
52331: CALL_OW 1
52335: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
52336: LD_ADDR_EXP 60
52340: PUSH
52341: LD_EXP 60
52345: PPUSH
52346: LD_VAR 0 1
52350: PPUSH
52351: EMPTY
52352: PPUSH
52353: CALL_OW 1
52357: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
52358: LD_ADDR_EXP 61
52362: PUSH
52363: LD_EXP 61
52367: PPUSH
52368: LD_VAR 0 1
52372: PPUSH
52373: EMPTY
52374: PPUSH
52375: CALL_OW 1
52379: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
52380: LD_ADDR_EXP 62
52384: PUSH
52385: LD_EXP 62
52389: PPUSH
52390: LD_VAR 0 1
52394: PPUSH
52395: EMPTY
52396: PPUSH
52397: CALL_OW 1
52401: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
52402: LD_ADDR_EXP 63
52406: PUSH
52407: LD_EXP 63
52411: PPUSH
52412: LD_VAR 0 1
52416: PPUSH
52417: EMPTY
52418: PPUSH
52419: CALL_OW 1
52423: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
52424: LD_ADDR_EXP 64
52428: PUSH
52429: LD_EXP 64
52433: PPUSH
52434: LD_VAR 0 1
52438: PPUSH
52439: EMPTY
52440: PPUSH
52441: CALL_OW 1
52445: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
52446: LD_ADDR_EXP 65
52450: PUSH
52451: LD_EXP 65
52455: PPUSH
52456: LD_VAR 0 1
52460: PPUSH
52461: EMPTY
52462: PPUSH
52463: CALL_OW 1
52467: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
52468: LD_ADDR_EXP 66
52472: PUSH
52473: LD_EXP 66
52477: PPUSH
52478: LD_VAR 0 1
52482: PPUSH
52483: EMPTY
52484: PPUSH
52485: CALL_OW 1
52489: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
52490: LD_ADDR_EXP 67
52494: PUSH
52495: LD_EXP 67
52499: PPUSH
52500: LD_VAR 0 1
52504: PPUSH
52505: EMPTY
52506: PPUSH
52507: CALL_OW 1
52511: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
52512: LD_ADDR_EXP 68
52516: PUSH
52517: LD_EXP 68
52521: PPUSH
52522: LD_VAR 0 1
52526: PPUSH
52527: LD_INT 0
52529: PPUSH
52530: CALL_OW 1
52534: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
52535: LD_ADDR_EXP 69
52539: PUSH
52540: LD_EXP 69
52544: PPUSH
52545: LD_VAR 0 1
52549: PPUSH
52550: EMPTY
52551: PPUSH
52552: CALL_OW 1
52556: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
52557: LD_ADDR_EXP 70
52561: PUSH
52562: LD_EXP 70
52566: PPUSH
52567: LD_VAR 0 1
52571: PPUSH
52572: EMPTY
52573: PPUSH
52574: CALL_OW 1
52578: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
52579: LD_ADDR_EXP 71
52583: PUSH
52584: LD_EXP 71
52588: PPUSH
52589: LD_VAR 0 1
52593: PPUSH
52594: EMPTY
52595: PPUSH
52596: CALL_OW 1
52600: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
52601: LD_ADDR_EXP 72
52605: PUSH
52606: LD_EXP 72
52610: PPUSH
52611: LD_VAR 0 1
52615: PPUSH
52616: EMPTY
52617: PPUSH
52618: CALL_OW 1
52622: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
52623: LD_ADDR_EXP 73
52627: PUSH
52628: LD_EXP 73
52632: PPUSH
52633: LD_VAR 0 1
52637: PPUSH
52638: EMPTY
52639: PPUSH
52640: CALL_OW 1
52644: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
52645: LD_ADDR_EXP 74
52649: PUSH
52650: LD_EXP 74
52654: PPUSH
52655: LD_VAR 0 1
52659: PPUSH
52660: EMPTY
52661: PPUSH
52662: CALL_OW 1
52666: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
52667: LD_ADDR_EXP 75
52671: PUSH
52672: LD_EXP 75
52676: PPUSH
52677: LD_VAR 0 1
52681: PPUSH
52682: EMPTY
52683: PPUSH
52684: CALL_OW 1
52688: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
52689: LD_ADDR_EXP 76
52693: PUSH
52694: LD_EXP 76
52698: PPUSH
52699: LD_VAR 0 1
52703: PPUSH
52704: EMPTY
52705: PPUSH
52706: CALL_OW 1
52710: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
52711: LD_ADDR_EXP 77
52715: PUSH
52716: LD_EXP 77
52720: PPUSH
52721: LD_VAR 0 1
52725: PPUSH
52726: EMPTY
52727: PPUSH
52728: CALL_OW 1
52732: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
52733: LD_ADDR_EXP 78
52737: PUSH
52738: LD_EXP 78
52742: PPUSH
52743: LD_VAR 0 1
52747: PPUSH
52748: EMPTY
52749: PPUSH
52750: CALL_OW 1
52754: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
52755: LD_ADDR_EXP 79
52759: PUSH
52760: LD_EXP 79
52764: PPUSH
52765: LD_VAR 0 1
52769: PPUSH
52770: EMPTY
52771: PPUSH
52772: CALL_OW 1
52776: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
52777: LD_ADDR_EXP 80
52781: PUSH
52782: LD_EXP 80
52786: PPUSH
52787: LD_VAR 0 1
52791: PPUSH
52792: EMPTY
52793: PPUSH
52794: CALL_OW 1
52798: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
52799: LD_ADDR_EXP 81
52803: PUSH
52804: LD_EXP 81
52808: PPUSH
52809: LD_VAR 0 1
52813: PPUSH
52814: EMPTY
52815: PPUSH
52816: CALL_OW 1
52820: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
52821: LD_ADDR_EXP 82
52825: PUSH
52826: LD_EXP 82
52830: PPUSH
52831: LD_VAR 0 1
52835: PPUSH
52836: EMPTY
52837: PPUSH
52838: CALL_OW 1
52842: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
52843: LD_ADDR_EXP 84
52847: PUSH
52848: LD_EXP 84
52852: PPUSH
52853: LD_VAR 0 1
52857: PPUSH
52858: EMPTY
52859: PPUSH
52860: CALL_OW 1
52864: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
52865: LD_ADDR_EXP 86
52869: PUSH
52870: LD_EXP 86
52874: PPUSH
52875: LD_VAR 0 1
52879: PPUSH
52880: EMPTY
52881: PPUSH
52882: CALL_OW 1
52886: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
52887: LD_ADDR_EXP 87
52891: PUSH
52892: LD_EXP 87
52896: PPUSH
52897: LD_VAR 0 1
52901: PPUSH
52902: EMPTY
52903: PPUSH
52904: CALL_OW 1
52908: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
52909: LD_ADDR_EXP 88
52913: PUSH
52914: LD_EXP 88
52918: PPUSH
52919: LD_VAR 0 1
52923: PPUSH
52924: EMPTY
52925: PPUSH
52926: CALL_OW 1
52930: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
52931: LD_ADDR_EXP 89
52935: PUSH
52936: LD_EXP 89
52940: PPUSH
52941: LD_VAR 0 1
52945: PPUSH
52946: EMPTY
52947: PPUSH
52948: CALL_OW 1
52952: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
52953: LD_ADDR_EXP 90
52957: PUSH
52958: LD_EXP 90
52962: PPUSH
52963: LD_VAR 0 1
52967: PPUSH
52968: EMPTY
52969: PPUSH
52970: CALL_OW 1
52974: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
52975: LD_ADDR_EXP 91
52979: PUSH
52980: LD_EXP 91
52984: PPUSH
52985: LD_VAR 0 1
52989: PPUSH
52990: EMPTY
52991: PPUSH
52992: CALL_OW 1
52996: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
52997: LD_ADDR_EXP 92
53001: PUSH
53002: LD_EXP 92
53006: PPUSH
53007: LD_VAR 0 1
53011: PPUSH
53012: EMPTY
53013: PPUSH
53014: CALL_OW 1
53018: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
53019: LD_ADDR_EXP 93
53023: PUSH
53024: LD_EXP 93
53028: PPUSH
53029: LD_VAR 0 1
53033: PPUSH
53034: EMPTY
53035: PPUSH
53036: CALL_OW 1
53040: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
53041: LD_ADDR_EXP 94
53045: PUSH
53046: LD_EXP 94
53050: PPUSH
53051: LD_VAR 0 1
53055: PPUSH
53056: EMPTY
53057: PPUSH
53058: CALL_OW 1
53062: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
53063: LD_ADDR_EXP 95
53067: PUSH
53068: LD_EXP 95
53072: PPUSH
53073: LD_VAR 0 1
53077: PPUSH
53078: EMPTY
53079: PPUSH
53080: CALL_OW 1
53084: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
53085: LD_ADDR_EXP 96
53089: PUSH
53090: LD_EXP 96
53094: PPUSH
53095: LD_VAR 0 1
53099: PPUSH
53100: EMPTY
53101: PPUSH
53102: CALL_OW 1
53106: ST_TO_ADDR
// end ;
53107: LD_VAR 0 2
53111: RET
// export function MC_Start ( ) ; var i ; begin
53112: LD_INT 0
53114: PPUSH
53115: PPUSH
// for i = 1 to mc_bases do
53116: LD_ADDR_VAR 0 2
53120: PUSH
53121: DOUBLE
53122: LD_INT 1
53124: DEC
53125: ST_TO_ADDR
53126: LD_EXP 57
53130: PUSH
53131: FOR_TO
53132: IFFALSE 54065
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
53134: LD_ADDR_EXP 58
53138: PUSH
53139: LD_EXP 58
53143: PPUSH
53144: LD_VAR 0 2
53148: PPUSH
53149: EMPTY
53150: PPUSH
53151: CALL_OW 1
53155: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
53156: LD_ADDR_EXP 59
53160: PUSH
53161: LD_EXP 59
53165: PPUSH
53166: LD_VAR 0 2
53170: PPUSH
53171: EMPTY
53172: PPUSH
53173: CALL_OW 1
53177: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
53178: LD_ADDR_EXP 60
53182: PUSH
53183: LD_EXP 60
53187: PPUSH
53188: LD_VAR 0 2
53192: PPUSH
53193: EMPTY
53194: PPUSH
53195: CALL_OW 1
53199: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
53200: LD_ADDR_EXP 61
53204: PUSH
53205: LD_EXP 61
53209: PPUSH
53210: LD_VAR 0 2
53214: PPUSH
53215: EMPTY
53216: PUSH
53217: EMPTY
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PPUSH
53223: CALL_OW 1
53227: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
53228: LD_ADDR_EXP 62
53232: PUSH
53233: LD_EXP 62
53237: PPUSH
53238: LD_VAR 0 2
53242: PPUSH
53243: EMPTY
53244: PPUSH
53245: CALL_OW 1
53249: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
53250: LD_ADDR_EXP 89
53254: PUSH
53255: LD_EXP 89
53259: PPUSH
53260: LD_VAR 0 2
53264: PPUSH
53265: EMPTY
53266: PPUSH
53267: CALL_OW 1
53271: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
53272: LD_ADDR_EXP 63
53276: PUSH
53277: LD_EXP 63
53281: PPUSH
53282: LD_VAR 0 2
53286: PPUSH
53287: EMPTY
53288: PPUSH
53289: CALL_OW 1
53293: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
53294: LD_ADDR_EXP 64
53298: PUSH
53299: LD_EXP 64
53303: PPUSH
53304: LD_VAR 0 2
53308: PPUSH
53309: EMPTY
53310: PPUSH
53311: CALL_OW 1
53315: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
53316: LD_ADDR_EXP 65
53320: PUSH
53321: LD_EXP 65
53325: PPUSH
53326: LD_VAR 0 2
53330: PPUSH
53331: EMPTY
53332: PPUSH
53333: CALL_OW 1
53337: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
53338: LD_ADDR_EXP 66
53342: PUSH
53343: LD_EXP 66
53347: PPUSH
53348: LD_VAR 0 2
53352: PPUSH
53353: LD_EXP 57
53357: PUSH
53358: LD_VAR 0 2
53362: ARRAY
53363: PPUSH
53364: LD_INT 2
53366: PUSH
53367: LD_INT 30
53369: PUSH
53370: LD_INT 32
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 30
53379: PUSH
53380: LD_INT 31
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 58
53394: PUSH
53395: EMPTY
53396: LIST
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PPUSH
53402: CALL_OW 72
53406: PPUSH
53407: CALL_OW 1
53411: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
53412: LD_ADDR_EXP 67
53416: PUSH
53417: LD_EXP 67
53421: PPUSH
53422: LD_VAR 0 2
53426: PPUSH
53427: EMPTY
53428: PPUSH
53429: CALL_OW 1
53433: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
53434: LD_ADDR_EXP 71
53438: PUSH
53439: LD_EXP 71
53443: PPUSH
53444: LD_VAR 0 2
53448: PPUSH
53449: EMPTY
53450: PPUSH
53451: CALL_OW 1
53455: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
53456: LD_ADDR_EXP 70
53460: PUSH
53461: LD_EXP 70
53465: PPUSH
53466: LD_VAR 0 2
53470: PPUSH
53471: EMPTY
53472: PPUSH
53473: CALL_OW 1
53477: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
53478: LD_ADDR_EXP 72
53482: PUSH
53483: LD_EXP 72
53487: PPUSH
53488: LD_VAR 0 2
53492: PPUSH
53493: EMPTY
53494: PPUSH
53495: CALL_OW 1
53499: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
53500: LD_ADDR_EXP 73
53504: PUSH
53505: LD_EXP 73
53509: PPUSH
53510: LD_VAR 0 2
53514: PPUSH
53515: EMPTY
53516: PPUSH
53517: CALL_OW 1
53521: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
53522: LD_ADDR_EXP 74
53526: PUSH
53527: LD_EXP 74
53531: PPUSH
53532: LD_VAR 0 2
53536: PPUSH
53537: EMPTY
53538: PPUSH
53539: CALL_OW 1
53543: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
53544: LD_ADDR_EXP 75
53548: PUSH
53549: LD_EXP 75
53553: PPUSH
53554: LD_VAR 0 2
53558: PPUSH
53559: EMPTY
53560: PPUSH
53561: CALL_OW 1
53565: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
53566: LD_ADDR_EXP 76
53570: PUSH
53571: LD_EXP 76
53575: PPUSH
53576: LD_VAR 0 2
53580: PPUSH
53581: EMPTY
53582: PPUSH
53583: CALL_OW 1
53587: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
53588: LD_ADDR_EXP 77
53592: PUSH
53593: LD_EXP 77
53597: PPUSH
53598: LD_VAR 0 2
53602: PPUSH
53603: EMPTY
53604: PPUSH
53605: CALL_OW 1
53609: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
53610: LD_ADDR_EXP 78
53614: PUSH
53615: LD_EXP 78
53619: PPUSH
53620: LD_VAR 0 2
53624: PPUSH
53625: EMPTY
53626: PPUSH
53627: CALL_OW 1
53631: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
53632: LD_ADDR_EXP 79
53636: PUSH
53637: LD_EXP 79
53641: PPUSH
53642: LD_VAR 0 2
53646: PPUSH
53647: EMPTY
53648: PPUSH
53649: CALL_OW 1
53653: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
53654: LD_ADDR_EXP 68
53658: PUSH
53659: LD_EXP 68
53663: PPUSH
53664: LD_VAR 0 2
53668: PPUSH
53669: LD_INT 0
53671: PPUSH
53672: CALL_OW 1
53676: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
53677: LD_ADDR_EXP 81
53681: PUSH
53682: LD_EXP 81
53686: PPUSH
53687: LD_VAR 0 2
53691: PPUSH
53692: LD_INT 0
53694: PPUSH
53695: CALL_OW 1
53699: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
53700: LD_ADDR_EXP 69
53704: PUSH
53705: LD_EXP 69
53709: PPUSH
53710: LD_VAR 0 2
53714: PPUSH
53715: EMPTY
53716: PPUSH
53717: CALL_OW 1
53721: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
53722: LD_ADDR_EXP 80
53726: PUSH
53727: LD_EXP 80
53731: PPUSH
53732: LD_VAR 0 2
53736: PPUSH
53737: LD_INT 0
53739: PPUSH
53740: CALL_OW 1
53744: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
53745: LD_ADDR_EXP 82
53749: PUSH
53750: LD_EXP 82
53754: PPUSH
53755: LD_VAR 0 2
53759: PPUSH
53760: EMPTY
53761: PPUSH
53762: CALL_OW 1
53766: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
53767: LD_ADDR_EXP 85
53771: PUSH
53772: LD_EXP 85
53776: PPUSH
53777: LD_VAR 0 2
53781: PPUSH
53782: LD_INT 0
53784: PPUSH
53785: CALL_OW 1
53789: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
53790: LD_ADDR_EXP 86
53794: PUSH
53795: LD_EXP 86
53799: PPUSH
53800: LD_VAR 0 2
53804: PPUSH
53805: EMPTY
53806: PPUSH
53807: CALL_OW 1
53811: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
53812: LD_ADDR_EXP 87
53816: PUSH
53817: LD_EXP 87
53821: PPUSH
53822: LD_VAR 0 2
53826: PPUSH
53827: EMPTY
53828: PPUSH
53829: CALL_OW 1
53833: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
53834: LD_ADDR_EXP 88
53838: PUSH
53839: LD_EXP 88
53843: PPUSH
53844: LD_VAR 0 2
53848: PPUSH
53849: EMPTY
53850: PPUSH
53851: CALL_OW 1
53855: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
53856: LD_ADDR_EXP 90
53860: PUSH
53861: LD_EXP 90
53865: PPUSH
53866: LD_VAR 0 2
53870: PPUSH
53871: LD_EXP 57
53875: PUSH
53876: LD_VAR 0 2
53880: ARRAY
53881: PPUSH
53882: LD_INT 2
53884: PUSH
53885: LD_INT 30
53887: PUSH
53888: LD_INT 6
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 30
53897: PUSH
53898: LD_INT 7
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 30
53907: PUSH
53908: LD_INT 8
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: PPUSH
53921: CALL_OW 72
53925: PPUSH
53926: CALL_OW 1
53930: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
53931: LD_ADDR_EXP 91
53935: PUSH
53936: LD_EXP 91
53940: PPUSH
53941: LD_VAR 0 2
53945: PPUSH
53946: EMPTY
53947: PPUSH
53948: CALL_OW 1
53952: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
53953: LD_ADDR_EXP 92
53957: PUSH
53958: LD_EXP 92
53962: PPUSH
53963: LD_VAR 0 2
53967: PPUSH
53968: EMPTY
53969: PPUSH
53970: CALL_OW 1
53974: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
53975: LD_ADDR_EXP 93
53979: PUSH
53980: LD_EXP 93
53984: PPUSH
53985: LD_VAR 0 2
53989: PPUSH
53990: EMPTY
53991: PPUSH
53992: CALL_OW 1
53996: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
53997: LD_ADDR_EXP 94
54001: PUSH
54002: LD_EXP 94
54006: PPUSH
54007: LD_VAR 0 2
54011: PPUSH
54012: EMPTY
54013: PPUSH
54014: CALL_OW 1
54018: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
54019: LD_ADDR_EXP 95
54023: PUSH
54024: LD_EXP 95
54028: PPUSH
54029: LD_VAR 0 2
54033: PPUSH
54034: EMPTY
54035: PPUSH
54036: CALL_OW 1
54040: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
54041: LD_ADDR_EXP 96
54045: PUSH
54046: LD_EXP 96
54050: PPUSH
54051: LD_VAR 0 2
54055: PPUSH
54056: EMPTY
54057: PPUSH
54058: CALL_OW 1
54062: ST_TO_ADDR
// end ;
54063: GO 53131
54065: POP
54066: POP
// MC_InitSides ( ) ;
54067: CALL 54353 0 0
// MC_InitResearch ( ) ;
54071: CALL 54092 0 0
// CustomInitMacro ( ) ;
54075: CALL 174 0 0
// skirmish := true ;
54079: LD_ADDR_EXP 56
54083: PUSH
54084: LD_INT 1
54086: ST_TO_ADDR
// end ;
54087: LD_VAR 0 1
54091: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
54092: LD_INT 0
54094: PPUSH
54095: PPUSH
54096: PPUSH
54097: PPUSH
54098: PPUSH
54099: PPUSH
// if not mc_bases then
54100: LD_EXP 57
54104: NOT
54105: IFFALSE 54109
// exit ;
54107: GO 54348
// for i = 1 to 8 do
54109: LD_ADDR_VAR 0 2
54113: PUSH
54114: DOUBLE
54115: LD_INT 1
54117: DEC
54118: ST_TO_ADDR
54119: LD_INT 8
54121: PUSH
54122: FOR_TO
54123: IFFALSE 54149
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
54125: LD_ADDR_EXP 84
54129: PUSH
54130: LD_EXP 84
54134: PPUSH
54135: LD_VAR 0 2
54139: PPUSH
54140: EMPTY
54141: PPUSH
54142: CALL_OW 1
54146: ST_TO_ADDR
54147: GO 54122
54149: POP
54150: POP
// tmp := [ ] ;
54151: LD_ADDR_VAR 0 5
54155: PUSH
54156: EMPTY
54157: ST_TO_ADDR
// for i = 1 to mc_sides do
54158: LD_ADDR_VAR 0 2
54162: PUSH
54163: DOUBLE
54164: LD_INT 1
54166: DEC
54167: ST_TO_ADDR
54168: LD_EXP 83
54172: PUSH
54173: FOR_TO
54174: IFFALSE 54232
// if not mc_sides [ i ] in tmp then
54176: LD_EXP 83
54180: PUSH
54181: LD_VAR 0 2
54185: ARRAY
54186: PUSH
54187: LD_VAR 0 5
54191: IN
54192: NOT
54193: IFFALSE 54230
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
54195: LD_ADDR_VAR 0 5
54199: PUSH
54200: LD_VAR 0 5
54204: PPUSH
54205: LD_VAR 0 5
54209: PUSH
54210: LD_INT 1
54212: PLUS
54213: PPUSH
54214: LD_EXP 83
54218: PUSH
54219: LD_VAR 0 2
54223: ARRAY
54224: PPUSH
54225: CALL_OW 2
54229: ST_TO_ADDR
54230: GO 54173
54232: POP
54233: POP
// if not tmp then
54234: LD_VAR 0 5
54238: NOT
54239: IFFALSE 54243
// exit ;
54241: GO 54348
// for j in tmp do
54243: LD_ADDR_VAR 0 3
54247: PUSH
54248: LD_VAR 0 5
54252: PUSH
54253: FOR_IN
54254: IFFALSE 54346
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
54256: LD_ADDR_VAR 0 6
54260: PUSH
54261: LD_INT 22
54263: PUSH
54264: LD_VAR 0 3
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PPUSH
54273: CALL_OW 69
54277: ST_TO_ADDR
// if not un then
54278: LD_VAR 0 6
54282: NOT
54283: IFFALSE 54287
// continue ;
54285: GO 54253
// nation := GetNation ( un [ 1 ] ) ;
54287: LD_ADDR_VAR 0 4
54291: PUSH
54292: LD_VAR 0 6
54296: PUSH
54297: LD_INT 1
54299: ARRAY
54300: PPUSH
54301: CALL_OW 248
54305: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
54306: LD_ADDR_EXP 84
54310: PUSH
54311: LD_EXP 84
54315: PPUSH
54316: LD_VAR 0 3
54320: PPUSH
54321: LD_VAR 0 3
54325: PPUSH
54326: LD_VAR 0 4
54330: PPUSH
54331: LD_INT 1
54333: PPUSH
54334: CALL 13530 0 3
54338: PPUSH
54339: CALL_OW 1
54343: ST_TO_ADDR
// end ;
54344: GO 54253
54346: POP
54347: POP
// end ;
54348: LD_VAR 0 1
54352: RET
// export function MC_InitSides ( ) ; var i ; begin
54353: LD_INT 0
54355: PPUSH
54356: PPUSH
// if not mc_bases then
54357: LD_EXP 57
54361: NOT
54362: IFFALSE 54366
// exit ;
54364: GO 54440
// for i = 1 to mc_bases do
54366: LD_ADDR_VAR 0 2
54370: PUSH
54371: DOUBLE
54372: LD_INT 1
54374: DEC
54375: ST_TO_ADDR
54376: LD_EXP 57
54380: PUSH
54381: FOR_TO
54382: IFFALSE 54438
// if mc_bases [ i ] then
54384: LD_EXP 57
54388: PUSH
54389: LD_VAR 0 2
54393: ARRAY
54394: IFFALSE 54436
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
54396: LD_ADDR_EXP 83
54400: PUSH
54401: LD_EXP 83
54405: PPUSH
54406: LD_VAR 0 2
54410: PPUSH
54411: LD_EXP 57
54415: PUSH
54416: LD_VAR 0 2
54420: ARRAY
54421: PUSH
54422: LD_INT 1
54424: ARRAY
54425: PPUSH
54426: CALL_OW 255
54430: PPUSH
54431: CALL_OW 1
54435: ST_TO_ADDR
54436: GO 54381
54438: POP
54439: POP
// end ;
54440: LD_VAR 0 1
54444: RET
// every 0 0$01 trigger skirmish do
54445: LD_EXP 56
54449: IFFALSE 54582
54451: GO 54453
54453: DISABLE
// begin enable ;
54454: ENABLE
// MC_CheckBuildings ( ) ;
54455: CALL 55067 0 0
// MC_CheckPeopleLife ( ) ;
54459: CALL 55192 0 0
// RaiseSailEvent ( 103 ) ;
54463: LD_INT 103
54465: PPUSH
54466: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
54470: LD_INT 104
54472: PPUSH
54473: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
54477: LD_INT 105
54479: PPUSH
54480: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
54484: LD_INT 106
54486: PPUSH
54487: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
54491: LD_INT 107
54493: PPUSH
54494: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
54498: LD_INT 108
54500: PPUSH
54501: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
54505: LD_INT 109
54507: PPUSH
54508: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
54512: LD_INT 110
54514: PPUSH
54515: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
54519: LD_INT 111
54521: PPUSH
54522: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
54526: LD_INT 112
54528: PPUSH
54529: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
54533: LD_INT 120
54535: PPUSH
54536: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
54540: LD_INT 121
54542: PPUSH
54543: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
54547: LD_INT 122
54549: PPUSH
54550: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
54554: LD_INT 123
54556: PPUSH
54557: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
54561: LD_INT 125
54563: PPUSH
54564: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
54568: LD_INT 126
54570: PPUSH
54571: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
54575: LD_INT 200
54577: PPUSH
54578: CALL_OW 427
// end ;
54582: END
// every 10 trigger skirmish do var i ;
54583: LD_EXP 56
54587: IFFALSE 54686
54589: GO 54591
54591: DISABLE
54592: LD_INT 0
54594: PPUSH
// begin enable ;
54595: ENABLE
// if not mc_bases then
54596: LD_EXP 57
54600: NOT
54601: IFFALSE 54605
// exit ;
54603: GO 54686
// for i = 1 to mc_bases do
54605: LD_ADDR_VAR 0 1
54609: PUSH
54610: DOUBLE
54611: LD_INT 1
54613: DEC
54614: ST_TO_ADDR
54615: LD_EXP 57
54619: PUSH
54620: FOR_TO
54621: IFFALSE 54684
// if mc_mines [ i ] and mc_miners [ i ] then
54623: LD_EXP 70
54627: PUSH
54628: LD_VAR 0 1
54632: ARRAY
54633: PUSH
54634: LD_EXP 71
54638: PUSH
54639: LD_VAR 0 1
54643: ARRAY
54644: AND
54645: IFFALSE 54682
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
54647: LD_EXP 71
54651: PUSH
54652: LD_VAR 0 1
54656: ARRAY
54657: PUSH
54658: LD_INT 1
54660: ARRAY
54661: PPUSH
54662: CALL_OW 255
54666: PPUSH
54667: LD_EXP 70
54671: PUSH
54672: LD_VAR 0 1
54676: ARRAY
54677: PPUSH
54678: CALL 16762 0 2
54682: GO 54620
54684: POP
54685: POP
// end ;
54686: PPOPN 1
54688: END
// on SailEvent ( event ) do begin if event = 101 then
54689: LD_VAR 0 1
54693: PUSH
54694: LD_INT 101
54696: EQUAL
54697: IFFALSE 54703
// MC_RepairBuildings ( ) ;
54699: CALL 55750 0 0
// if event = 102 then
54703: LD_VAR 0 1
54707: PUSH
54708: LD_INT 102
54710: EQUAL
54711: IFFALSE 54717
// MC_Heal ( ) ;
54713: CALL 56156 0 0
// if event = 103 then
54717: LD_VAR 0 1
54721: PUSH
54722: LD_INT 103
54724: EQUAL
54725: IFFALSE 54731
// MC_Build ( ) ;
54727: CALL 56578 0 0
// if event = 104 then
54731: LD_VAR 0 1
54735: PUSH
54736: LD_INT 104
54738: EQUAL
54739: IFFALSE 54745
// MC_TurretWeapon ( ) ;
54741: CALL 57995 0 0
// if event = 105 then
54745: LD_VAR 0 1
54749: PUSH
54750: LD_INT 105
54752: EQUAL
54753: IFFALSE 54759
// MC_BuildUpgrade ( ) ;
54755: CALL 57546 0 0
// if event = 106 then
54759: LD_VAR 0 1
54763: PUSH
54764: LD_INT 106
54766: EQUAL
54767: IFFALSE 54773
// MC_PlantMines ( ) ;
54769: CALL 58347 0 0
// if event = 107 then
54773: LD_VAR 0 1
54777: PUSH
54778: LD_INT 107
54780: EQUAL
54781: IFFALSE 54787
// MC_CollectCrates ( ) ;
54783: CALL 59354 0 0
// if event = 108 then
54787: LD_VAR 0 1
54791: PUSH
54792: LD_INT 108
54794: EQUAL
54795: IFFALSE 54801
// MC_LinkRemoteControl ( ) ;
54797: CALL 60858 0 0
// if event = 109 then
54801: LD_VAR 0 1
54805: PUSH
54806: LD_INT 109
54808: EQUAL
54809: IFFALSE 54815
// MC_ProduceVehicle ( ) ;
54811: CALL 61039 0 0
// if event = 110 then
54815: LD_VAR 0 1
54819: PUSH
54820: LD_INT 110
54822: EQUAL
54823: IFFALSE 54829
// MC_SendAttack ( ) ;
54825: CALL 61520 0 0
// if event = 111 then
54829: LD_VAR 0 1
54833: PUSH
54834: LD_INT 111
54836: EQUAL
54837: IFFALSE 54843
// MC_Defend ( ) ;
54839: CALL 61628 0 0
// if event = 112 then
54843: LD_VAR 0 1
54847: PUSH
54848: LD_INT 112
54850: EQUAL
54851: IFFALSE 54857
// MC_Research ( ) ;
54853: CALL 62026 0 0
// if event = 120 then
54857: LD_VAR 0 1
54861: PUSH
54862: LD_INT 120
54864: EQUAL
54865: IFFALSE 54871
// MC_RepairVehicle ( ) ;
54867: CALL 62995 0 0
// if event = 121 then
54871: LD_VAR 0 1
54875: PUSH
54876: LD_INT 121
54878: EQUAL
54879: IFFALSE 54885
// MC_TameApe ( ) ;
54881: CALL 63684 0 0
// if event = 122 then
54885: LD_VAR 0 1
54889: PUSH
54890: LD_INT 122
54892: EQUAL
54893: IFFALSE 54899
// MC_ChangeApeClass ( ) ;
54895: CALL 64447 0 0
// if event = 123 then
54899: LD_VAR 0 1
54903: PUSH
54904: LD_INT 123
54906: EQUAL
54907: IFFALSE 54913
// MC_Bazooka ( ) ;
54909: CALL 65081 0 0
// if event = 124 then
54913: LD_VAR 0 1
54917: PUSH
54918: LD_INT 124
54920: EQUAL
54921: IFFALSE 54927
// MC_TeleportExit ( ) ;
54923: CALL 65279 0 0
// if event = 125 then
54927: LD_VAR 0 1
54931: PUSH
54932: LD_INT 125
54934: EQUAL
54935: IFFALSE 54941
// MC_Deposits ( ) ;
54937: CALL 65321 0 0
// if event = 126 then
54941: LD_VAR 0 1
54945: PUSH
54946: LD_INT 126
54948: EQUAL
54949: IFFALSE 54955
// MC_RemoteDriver ( ) ;
54951: CALL 65900 0 0
// if event = 200 then
54955: LD_VAR 0 1
54959: PUSH
54960: LD_INT 200
54962: EQUAL
54963: IFFALSE 54969
// MC_Idle ( ) ;
54965: CALL 67405 0 0
// end ;
54969: PPOPN 1
54971: END
// export function MC_Reset ( base , tag ) ; var i ; begin
54972: LD_INT 0
54974: PPUSH
54975: PPUSH
// if not mc_bases [ base ] or not tag then
54976: LD_EXP 57
54980: PUSH
54981: LD_VAR 0 1
54985: ARRAY
54986: NOT
54987: PUSH
54988: LD_VAR 0 2
54992: NOT
54993: OR
54994: IFFALSE 54998
// exit ;
54996: GO 55062
// for i in mc_bases [ base ] union mc_ape [ base ] do
54998: LD_ADDR_VAR 0 4
55002: PUSH
55003: LD_EXP 57
55007: PUSH
55008: LD_VAR 0 1
55012: ARRAY
55013: PUSH
55014: LD_EXP 86
55018: PUSH
55019: LD_VAR 0 1
55023: ARRAY
55024: UNION
55025: PUSH
55026: FOR_IN
55027: IFFALSE 55060
// if GetTag ( i ) = tag then
55029: LD_VAR 0 4
55033: PPUSH
55034: CALL_OW 110
55038: PUSH
55039: LD_VAR 0 2
55043: EQUAL
55044: IFFALSE 55058
// SetTag ( i , 0 ) ;
55046: LD_VAR 0 4
55050: PPUSH
55051: LD_INT 0
55053: PPUSH
55054: CALL_OW 109
55058: GO 55026
55060: POP
55061: POP
// end ;
55062: LD_VAR 0 3
55066: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
55067: LD_INT 0
55069: PPUSH
55070: PPUSH
55071: PPUSH
// if not mc_bases then
55072: LD_EXP 57
55076: NOT
55077: IFFALSE 55081
// exit ;
55079: GO 55187
// for i = 1 to mc_bases do
55081: LD_ADDR_VAR 0 2
55085: PUSH
55086: DOUBLE
55087: LD_INT 1
55089: DEC
55090: ST_TO_ADDR
55091: LD_EXP 57
55095: PUSH
55096: FOR_TO
55097: IFFALSE 55178
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
55099: LD_ADDR_VAR 0 3
55103: PUSH
55104: LD_EXP 57
55108: PUSH
55109: LD_VAR 0 2
55113: ARRAY
55114: PPUSH
55115: LD_INT 21
55117: PUSH
55118: LD_INT 3
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 3
55127: PUSH
55128: LD_INT 24
55130: PUSH
55131: LD_INT 1000
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PPUSH
55146: CALL_OW 72
55150: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
55151: LD_ADDR_EXP 58
55155: PUSH
55156: LD_EXP 58
55160: PPUSH
55161: LD_VAR 0 2
55165: PPUSH
55166: LD_VAR 0 3
55170: PPUSH
55171: CALL_OW 1
55175: ST_TO_ADDR
// end ;
55176: GO 55096
55178: POP
55179: POP
// RaiseSailEvent ( 101 ) ;
55180: LD_INT 101
55182: PPUSH
55183: CALL_OW 427
// end ;
55187: LD_VAR 0 1
55191: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
55192: LD_INT 0
55194: PPUSH
55195: PPUSH
55196: PPUSH
55197: PPUSH
55198: PPUSH
55199: PPUSH
55200: PPUSH
// if not mc_bases then
55201: LD_EXP 57
55205: NOT
55206: IFFALSE 55210
// exit ;
55208: GO 55745
// for i = 1 to mc_bases do
55210: LD_ADDR_VAR 0 2
55214: PUSH
55215: DOUBLE
55216: LD_INT 1
55218: DEC
55219: ST_TO_ADDR
55220: LD_EXP 57
55224: PUSH
55225: FOR_TO
55226: IFFALSE 55736
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
55228: LD_ADDR_VAR 0 5
55232: PUSH
55233: LD_EXP 57
55237: PUSH
55238: LD_VAR 0 2
55242: ARRAY
55243: PUSH
55244: LD_EXP 86
55248: PUSH
55249: LD_VAR 0 2
55253: ARRAY
55254: UNION
55255: PPUSH
55256: LD_INT 21
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: LD_INT 3
55271: PUSH
55272: LD_INT 54
55274: PUSH
55275: EMPTY
55276: LIST
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: LD_INT 24
55287: PUSH
55288: LD_INT 700
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: LIST
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PPUSH
55308: CALL_OW 72
55312: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
55313: LD_ADDR_VAR 0 6
55317: PUSH
55318: LD_EXP 57
55322: PUSH
55323: LD_VAR 0 2
55327: ARRAY
55328: PPUSH
55329: LD_INT 21
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: LD_INT 3
55344: PUSH
55345: LD_INT 54
55347: PUSH
55348: EMPTY
55349: LIST
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 3
55357: PUSH
55358: LD_INT 24
55360: PUSH
55361: LD_INT 250
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PPUSH
55381: CALL_OW 72
55385: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
55386: LD_ADDR_VAR 0 7
55390: PUSH
55391: LD_VAR 0 5
55395: PUSH
55396: LD_VAR 0 6
55400: DIFF
55401: ST_TO_ADDR
// if not need_heal_1 then
55402: LD_VAR 0 6
55406: NOT
55407: IFFALSE 55440
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
55409: LD_ADDR_EXP 60
55413: PUSH
55414: LD_EXP 60
55418: PPUSH
55419: LD_VAR 0 2
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PPUSH
55431: EMPTY
55432: PPUSH
55433: CALL 20104 0 3
55437: ST_TO_ADDR
55438: GO 55472
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
55440: LD_ADDR_EXP 60
55444: PUSH
55445: LD_EXP 60
55449: PPUSH
55450: LD_VAR 0 2
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PPUSH
55462: LD_VAR 0 6
55466: PPUSH
55467: CALL 20104 0 3
55471: ST_TO_ADDR
// if not need_heal_2 then
55472: LD_VAR 0 7
55476: NOT
55477: IFFALSE 55510
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
55479: LD_ADDR_EXP 60
55483: PUSH
55484: LD_EXP 60
55488: PPUSH
55489: LD_VAR 0 2
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PPUSH
55501: EMPTY
55502: PPUSH
55503: CALL 20104 0 3
55507: ST_TO_ADDR
55508: GO 55542
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
55510: LD_ADDR_EXP 60
55514: PUSH
55515: LD_EXP 60
55519: PPUSH
55520: LD_VAR 0 2
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PPUSH
55532: LD_VAR 0 7
55536: PPUSH
55537: CALL 20104 0 3
55541: ST_TO_ADDR
// if need_heal_2 then
55542: LD_VAR 0 7
55546: IFFALSE 55718
// for j in need_heal_2 do
55548: LD_ADDR_VAR 0 3
55552: PUSH
55553: LD_VAR 0 7
55557: PUSH
55558: FOR_IN
55559: IFFALSE 55716
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
55561: LD_ADDR_VAR 0 5
55565: PUSH
55566: LD_EXP 57
55570: PUSH
55571: LD_VAR 0 2
55575: ARRAY
55576: PPUSH
55577: LD_INT 2
55579: PUSH
55580: LD_INT 30
55582: PUSH
55583: LD_INT 6
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 30
55592: PUSH
55593: LD_INT 7
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 30
55602: PUSH
55603: LD_INT 8
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 30
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 30
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 25
55632: PUSH
55633: LD_INT 4
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: PPUSH
55649: CALL_OW 72
55653: ST_TO_ADDR
// if tmp then
55654: LD_VAR 0 5
55658: IFFALSE 55714
// begin k := NearestUnitToUnit ( tmp , j ) ;
55660: LD_ADDR_VAR 0 4
55664: PUSH
55665: LD_VAR 0 5
55669: PPUSH
55670: LD_VAR 0 3
55674: PPUSH
55675: CALL_OW 74
55679: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
55680: LD_VAR 0 3
55684: PPUSH
55685: LD_VAR 0 4
55689: PPUSH
55690: CALL_OW 296
55694: PUSH
55695: LD_INT 7
55697: GREATER
55698: IFFALSE 55714
// ComMoveUnit ( j , k ) ;
55700: LD_VAR 0 3
55704: PPUSH
55705: LD_VAR 0 4
55709: PPUSH
55710: CALL_OW 112
// end ; end ;
55714: GO 55558
55716: POP
55717: POP
// if not need_heal_1 and not need_heal_2 then
55718: LD_VAR 0 6
55722: NOT
55723: PUSH
55724: LD_VAR 0 7
55728: NOT
55729: AND
55730: IFFALSE 55734
// continue ;
55732: GO 55225
// end ;
55734: GO 55225
55736: POP
55737: POP
// RaiseSailEvent ( 102 ) ;
55738: LD_INT 102
55740: PPUSH
55741: CALL_OW 427
// end ;
55745: LD_VAR 0 1
55749: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
55750: LD_INT 0
55752: PPUSH
55753: PPUSH
55754: PPUSH
55755: PPUSH
55756: PPUSH
// if not mc_bases then
55757: LD_EXP 57
55761: NOT
55762: IFFALSE 55766
// exit ;
55764: GO 56151
// for i = 1 to mc_bases do
55766: LD_ADDR_VAR 0 2
55770: PUSH
55771: DOUBLE
55772: LD_INT 1
55774: DEC
55775: ST_TO_ADDR
55776: LD_EXP 57
55780: PUSH
55781: FOR_TO
55782: IFFALSE 56149
// begin if not mc_building_need_repair [ i ] then
55784: LD_EXP 58
55788: PUSH
55789: LD_VAR 0 2
55793: ARRAY
55794: NOT
55795: IFFALSE 55833
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
55797: LD_ADDR_EXP 59
55801: PUSH
55802: LD_EXP 59
55806: PPUSH
55807: LD_VAR 0 2
55811: PPUSH
55812: EMPTY
55813: PPUSH
55814: CALL_OW 1
55818: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
55819: LD_VAR 0 2
55823: PPUSH
55824: LD_INT 101
55826: PPUSH
55827: CALL 54972 0 2
// continue ;
55831: GO 55781
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
55833: LD_ADDR_EXP 63
55837: PUSH
55838: LD_EXP 63
55842: PPUSH
55843: LD_VAR 0 2
55847: PPUSH
55848: EMPTY
55849: PPUSH
55850: CALL_OW 1
55854: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
55855: LD_VAR 0 2
55859: PPUSH
55860: LD_INT 103
55862: PPUSH
55863: CALL 54972 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
55867: LD_ADDR_VAR 0 5
55871: PUSH
55872: LD_EXP 57
55876: PUSH
55877: LD_VAR 0 2
55881: ARRAY
55882: PUSH
55883: LD_EXP 86
55887: PUSH
55888: LD_VAR 0 2
55892: ARRAY
55893: UNION
55894: PPUSH
55895: LD_INT 2
55897: PUSH
55898: LD_INT 25
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 25
55910: PUSH
55911: LD_INT 16
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: LIST
55922: PUSH
55923: EMPTY
55924: LIST
55925: PPUSH
55926: CALL_OW 72
55930: ST_TO_ADDR
// if not tmp then
55931: LD_VAR 0 5
55935: NOT
55936: IFFALSE 55940
// continue ;
55938: GO 55781
// for j in tmp do
55940: LD_ADDR_VAR 0 3
55944: PUSH
55945: LD_VAR 0 5
55949: PUSH
55950: FOR_IN
55951: IFFALSE 56145
// begin if mc_need_heal [ i ] then
55953: LD_EXP 60
55957: PUSH
55958: LD_VAR 0 2
55962: ARRAY
55963: IFFALSE 56011
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
55965: LD_VAR 0 3
55969: PUSH
55970: LD_EXP 60
55974: PUSH
55975: LD_VAR 0 2
55979: ARRAY
55980: PUSH
55981: LD_INT 1
55983: ARRAY
55984: IN
55985: PUSH
55986: LD_VAR 0 3
55990: PUSH
55991: LD_EXP 60
55995: PUSH
55996: LD_VAR 0 2
56000: ARRAY
56001: PUSH
56002: LD_INT 2
56004: ARRAY
56005: IN
56006: OR
56007: IFFALSE 56011
// continue ;
56009: GO 55950
// if IsInUnit ( j ) then
56011: LD_VAR 0 3
56015: PPUSH
56016: CALL_OW 310
56020: IFFALSE 56031
// ComExitBuilding ( j ) ;
56022: LD_VAR 0 3
56026: PPUSH
56027: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
56031: LD_VAR 0 3
56035: PUSH
56036: LD_EXP 59
56040: PUSH
56041: LD_VAR 0 2
56045: ARRAY
56046: IN
56047: NOT
56048: IFFALSE 56106
// begin SetTag ( j , 101 ) ;
56050: LD_VAR 0 3
56054: PPUSH
56055: LD_INT 101
56057: PPUSH
56058: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
56062: LD_ADDR_EXP 59
56066: PUSH
56067: LD_EXP 59
56071: PPUSH
56072: LD_VAR 0 2
56076: PUSH
56077: LD_EXP 59
56081: PUSH
56082: LD_VAR 0 2
56086: ARRAY
56087: PUSH
56088: LD_INT 1
56090: PLUS
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PPUSH
56096: LD_VAR 0 3
56100: PPUSH
56101: CALL 20104 0 3
56105: ST_TO_ADDR
// end ; Wait ( 3 ) ;
56106: LD_INT 3
56108: PPUSH
56109: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
56113: LD_VAR 0 3
56117: PPUSH
56118: LD_EXP 58
56122: PUSH
56123: LD_VAR 0 2
56127: ARRAY
56128: PPUSH
56129: LD_VAR 0 3
56133: PPUSH
56134: CALL_OW 74
56138: PPUSH
56139: CALL_OW 130
// end ;
56143: GO 55950
56145: POP
56146: POP
// end ;
56147: GO 55781
56149: POP
56150: POP
// end ;
56151: LD_VAR 0 1
56155: RET
// export function MC_Heal ; var i , j , tmp ; begin
56156: LD_INT 0
56158: PPUSH
56159: PPUSH
56160: PPUSH
56161: PPUSH
// if not mc_bases then
56162: LD_EXP 57
56166: NOT
56167: IFFALSE 56171
// exit ;
56169: GO 56573
// for i = 1 to mc_bases do
56171: LD_ADDR_VAR 0 2
56175: PUSH
56176: DOUBLE
56177: LD_INT 1
56179: DEC
56180: ST_TO_ADDR
56181: LD_EXP 57
56185: PUSH
56186: FOR_TO
56187: IFFALSE 56571
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
56189: LD_EXP 60
56193: PUSH
56194: LD_VAR 0 2
56198: ARRAY
56199: PUSH
56200: LD_INT 1
56202: ARRAY
56203: NOT
56204: PUSH
56205: LD_EXP 60
56209: PUSH
56210: LD_VAR 0 2
56214: ARRAY
56215: PUSH
56216: LD_INT 2
56218: ARRAY
56219: NOT
56220: AND
56221: IFFALSE 56259
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
56223: LD_ADDR_EXP 61
56227: PUSH
56228: LD_EXP 61
56232: PPUSH
56233: LD_VAR 0 2
56237: PPUSH
56238: EMPTY
56239: PPUSH
56240: CALL_OW 1
56244: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
56245: LD_VAR 0 2
56249: PPUSH
56250: LD_INT 102
56252: PPUSH
56253: CALL 54972 0 2
// continue ;
56257: GO 56186
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
56259: LD_ADDR_VAR 0 4
56263: PUSH
56264: LD_EXP 57
56268: PUSH
56269: LD_VAR 0 2
56273: ARRAY
56274: PPUSH
56275: LD_INT 25
56277: PUSH
56278: LD_INT 4
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PPUSH
56285: CALL_OW 72
56289: ST_TO_ADDR
// if not tmp then
56290: LD_VAR 0 4
56294: NOT
56295: IFFALSE 56299
// continue ;
56297: GO 56186
// if mc_taming [ i ] then
56299: LD_EXP 88
56303: PUSH
56304: LD_VAR 0 2
56308: ARRAY
56309: IFFALSE 56333
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
56311: LD_ADDR_EXP 88
56315: PUSH
56316: LD_EXP 88
56320: PPUSH
56321: LD_VAR 0 2
56325: PPUSH
56326: EMPTY
56327: PPUSH
56328: CALL_OW 1
56332: ST_TO_ADDR
// for j in tmp do
56333: LD_ADDR_VAR 0 3
56337: PUSH
56338: LD_VAR 0 4
56342: PUSH
56343: FOR_IN
56344: IFFALSE 56567
// begin if IsInUnit ( j ) then
56346: LD_VAR 0 3
56350: PPUSH
56351: CALL_OW 310
56355: IFFALSE 56366
// ComExitBuilding ( j ) ;
56357: LD_VAR 0 3
56361: PPUSH
56362: CALL_OW 122
// if not j in mc_healers [ i ] then
56366: LD_VAR 0 3
56370: PUSH
56371: LD_EXP 61
56375: PUSH
56376: LD_VAR 0 2
56380: ARRAY
56381: IN
56382: NOT
56383: IFFALSE 56429
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
56385: LD_ADDR_EXP 61
56389: PUSH
56390: LD_EXP 61
56394: PPUSH
56395: LD_VAR 0 2
56399: PUSH
56400: LD_EXP 61
56404: PUSH
56405: LD_VAR 0 2
56409: ARRAY
56410: PUSH
56411: LD_INT 1
56413: PLUS
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PPUSH
56419: LD_VAR 0 3
56423: PPUSH
56424: CALL 20104 0 3
56428: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
56429: LD_VAR 0 3
56433: PPUSH
56434: CALL_OW 110
56438: PUSH
56439: LD_INT 102
56441: NONEQUAL
56442: IFFALSE 56456
// SetTag ( j , 102 ) ;
56444: LD_VAR 0 3
56448: PPUSH
56449: LD_INT 102
56451: PPUSH
56452: CALL_OW 109
// Wait ( 3 ) ;
56456: LD_INT 3
56458: PPUSH
56459: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
56463: LD_EXP 60
56467: PUSH
56468: LD_VAR 0 2
56472: ARRAY
56473: PUSH
56474: LD_INT 1
56476: ARRAY
56477: IFFALSE 56509
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
56479: LD_VAR 0 3
56483: PPUSH
56484: LD_EXP 60
56488: PUSH
56489: LD_VAR 0 2
56493: ARRAY
56494: PUSH
56495: LD_INT 1
56497: ARRAY
56498: PUSH
56499: LD_INT 1
56501: ARRAY
56502: PPUSH
56503: CALL_OW 128
56507: GO 56565
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
56509: LD_VAR 0 3
56513: PPUSH
56514: CALL_OW 314
56518: NOT
56519: PUSH
56520: LD_EXP 60
56524: PUSH
56525: LD_VAR 0 2
56529: ARRAY
56530: PUSH
56531: LD_INT 2
56533: ARRAY
56534: AND
56535: IFFALSE 56565
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
56537: LD_VAR 0 3
56541: PPUSH
56542: LD_EXP 60
56546: PUSH
56547: LD_VAR 0 2
56551: ARRAY
56552: PUSH
56553: LD_INT 2
56555: ARRAY
56556: PUSH
56557: LD_INT 1
56559: ARRAY
56560: PPUSH
56561: CALL_OW 128
// end ;
56565: GO 56343
56567: POP
56568: POP
// end ;
56569: GO 56186
56571: POP
56572: POP
// end ;
56573: LD_VAR 0 1
56577: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
56578: LD_INT 0
56580: PPUSH
56581: PPUSH
56582: PPUSH
56583: PPUSH
// if not mc_bases then
56584: LD_EXP 57
56588: NOT
56589: IFFALSE 56593
// exit ;
56591: GO 57541
// for i = 1 to mc_bases do
56593: LD_ADDR_VAR 0 2
56597: PUSH
56598: DOUBLE
56599: LD_INT 1
56601: DEC
56602: ST_TO_ADDR
56603: LD_EXP 57
56607: PUSH
56608: FOR_TO
56609: IFFALSE 57539
// begin if mc_scan [ i ] then
56611: LD_EXP 80
56615: PUSH
56616: LD_VAR 0 2
56620: ARRAY
56621: IFFALSE 56625
// continue ;
56623: GO 56608
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
56625: LD_EXP 62
56629: PUSH
56630: LD_VAR 0 2
56634: ARRAY
56635: NOT
56636: PUSH
56637: LD_EXP 64
56641: PUSH
56642: LD_VAR 0 2
56646: ARRAY
56647: NOT
56648: AND
56649: PUSH
56650: LD_EXP 63
56654: PUSH
56655: LD_VAR 0 2
56659: ARRAY
56660: AND
56661: IFFALSE 56699
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
56663: LD_ADDR_EXP 63
56667: PUSH
56668: LD_EXP 63
56672: PPUSH
56673: LD_VAR 0 2
56677: PPUSH
56678: EMPTY
56679: PPUSH
56680: CALL_OW 1
56684: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
56685: LD_VAR 0 2
56689: PPUSH
56690: LD_INT 103
56692: PPUSH
56693: CALL 54972 0 2
// continue ;
56697: GO 56608
// end ; if mc_construct_list [ i ] then
56699: LD_EXP 64
56703: PUSH
56704: LD_VAR 0 2
56708: ARRAY
56709: IFFALSE 56929
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
56711: LD_ADDR_VAR 0 4
56715: PUSH
56716: LD_EXP 57
56720: PUSH
56721: LD_VAR 0 2
56725: ARRAY
56726: PPUSH
56727: LD_INT 25
56729: PUSH
56730: LD_INT 2
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PPUSH
56737: CALL_OW 72
56741: PUSH
56742: LD_EXP 59
56746: PUSH
56747: LD_VAR 0 2
56751: ARRAY
56752: DIFF
56753: ST_TO_ADDR
// if not tmp then
56754: LD_VAR 0 4
56758: NOT
56759: IFFALSE 56763
// continue ;
56761: GO 56608
// for j in tmp do
56763: LD_ADDR_VAR 0 3
56767: PUSH
56768: LD_VAR 0 4
56772: PUSH
56773: FOR_IN
56774: IFFALSE 56925
// begin if not mc_builders [ i ] then
56776: LD_EXP 63
56780: PUSH
56781: LD_VAR 0 2
56785: ARRAY
56786: NOT
56787: IFFALSE 56845
// begin SetTag ( j , 103 ) ;
56789: LD_VAR 0 3
56793: PPUSH
56794: LD_INT 103
56796: PPUSH
56797: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
56801: LD_ADDR_EXP 63
56805: PUSH
56806: LD_EXP 63
56810: PPUSH
56811: LD_VAR 0 2
56815: PUSH
56816: LD_EXP 63
56820: PUSH
56821: LD_VAR 0 2
56825: ARRAY
56826: PUSH
56827: LD_INT 1
56829: PLUS
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PPUSH
56835: LD_VAR 0 3
56839: PPUSH
56840: CALL 20104 0 3
56844: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
56845: LD_VAR 0 3
56849: PPUSH
56850: CALL_OW 310
56854: IFFALSE 56865
// ComExitBuilding ( j ) ;
56856: LD_VAR 0 3
56860: PPUSH
56861: CALL_OW 122
// wait ( 3 ) ;
56865: LD_INT 3
56867: PPUSH
56868: CALL_OW 67
// if not mc_construct_list [ i ] then
56872: LD_EXP 64
56876: PUSH
56877: LD_VAR 0 2
56881: ARRAY
56882: NOT
56883: IFFALSE 56887
// break ;
56885: GO 56925
// if not HasTask ( j ) then
56887: LD_VAR 0 3
56891: PPUSH
56892: CALL_OW 314
56896: NOT
56897: IFFALSE 56923
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
56899: LD_VAR 0 3
56903: PPUSH
56904: LD_EXP 64
56908: PUSH
56909: LD_VAR 0 2
56913: ARRAY
56914: PUSH
56915: LD_INT 1
56917: ARRAY
56918: PPUSH
56919: CALL 22510 0 2
// end ;
56923: GO 56773
56925: POP
56926: POP
// end else
56927: GO 57537
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
56929: LD_EXP 62
56933: PUSH
56934: LD_VAR 0 2
56938: ARRAY
56939: PUSH
56940: LD_EXP 57
56944: PUSH
56945: LD_VAR 0 2
56949: ARRAY
56950: PPUSH
56951: LD_INT 2
56953: PUSH
56954: LD_INT 30
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 30
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: LIST
56978: PPUSH
56979: CALL_OW 72
56983: AND
56984: IFFALSE 57537
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
56986: LD_EXP 57
56990: PUSH
56991: LD_VAR 0 2
56995: ARRAY
56996: PPUSH
56997: LD_INT 2
56999: PUSH
57000: LD_INT 30
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 30
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: LIST
57024: PPUSH
57025: CALL_OW 72
57029: PUSH
57030: LD_INT 1
57032: ARRAY
57033: PPUSH
57034: LD_EXP 62
57038: PUSH
57039: LD_VAR 0 2
57043: ARRAY
57044: PUSH
57045: LD_INT 1
57047: ARRAY
57048: PUSH
57049: LD_INT 1
57051: ARRAY
57052: PPUSH
57053: LD_EXP 62
57057: PUSH
57058: LD_VAR 0 2
57062: ARRAY
57063: PUSH
57064: LD_INT 1
57066: ARRAY
57067: PUSH
57068: LD_INT 2
57070: ARRAY
57071: PPUSH
57072: LD_EXP 62
57076: PUSH
57077: LD_VAR 0 2
57081: ARRAY
57082: PUSH
57083: LD_INT 1
57085: ARRAY
57086: PUSH
57087: LD_INT 3
57089: ARRAY
57090: PPUSH
57091: LD_EXP 62
57095: PUSH
57096: LD_VAR 0 2
57100: ARRAY
57101: PUSH
57102: LD_INT 1
57104: ARRAY
57105: PUSH
57106: LD_INT 4
57108: ARRAY
57109: PPUSH
57110: CALL 26742 0 5
57114: IFFALSE 57395
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
57116: LD_ADDR_VAR 0 4
57120: PUSH
57121: LD_EXP 57
57125: PUSH
57126: LD_VAR 0 2
57130: ARRAY
57131: PPUSH
57132: LD_INT 25
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PPUSH
57142: CALL_OW 72
57146: PUSH
57147: LD_EXP 59
57151: PUSH
57152: LD_VAR 0 2
57156: ARRAY
57157: DIFF
57158: ST_TO_ADDR
// if not tmp then
57159: LD_VAR 0 4
57163: NOT
57164: IFFALSE 57168
// continue ;
57166: GO 56608
// for j in tmp do
57168: LD_ADDR_VAR 0 3
57172: PUSH
57173: LD_VAR 0 4
57177: PUSH
57178: FOR_IN
57179: IFFALSE 57391
// begin if not mc_builders [ i ] then
57181: LD_EXP 63
57185: PUSH
57186: LD_VAR 0 2
57190: ARRAY
57191: NOT
57192: IFFALSE 57250
// begin SetTag ( j , 103 ) ;
57194: LD_VAR 0 3
57198: PPUSH
57199: LD_INT 103
57201: PPUSH
57202: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
57206: LD_ADDR_EXP 63
57210: PUSH
57211: LD_EXP 63
57215: PPUSH
57216: LD_VAR 0 2
57220: PUSH
57221: LD_EXP 63
57225: PUSH
57226: LD_VAR 0 2
57230: ARRAY
57231: PUSH
57232: LD_INT 1
57234: PLUS
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PPUSH
57240: LD_VAR 0 3
57244: PPUSH
57245: CALL 20104 0 3
57249: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
57250: LD_VAR 0 3
57254: PPUSH
57255: CALL_OW 310
57259: IFFALSE 57270
// ComExitBuilding ( j ) ;
57261: LD_VAR 0 3
57265: PPUSH
57266: CALL_OW 122
// wait ( 3 ) ;
57270: LD_INT 3
57272: PPUSH
57273: CALL_OW 67
// if not mc_build_list [ i ] then
57277: LD_EXP 62
57281: PUSH
57282: LD_VAR 0 2
57286: ARRAY
57287: NOT
57288: IFFALSE 57292
// break ;
57290: GO 57391
// if not HasTask ( j ) then
57292: LD_VAR 0 3
57296: PPUSH
57297: CALL_OW 314
57301: NOT
57302: IFFALSE 57389
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
57304: LD_VAR 0 3
57308: PPUSH
57309: LD_EXP 62
57313: PUSH
57314: LD_VAR 0 2
57318: ARRAY
57319: PUSH
57320: LD_INT 1
57322: ARRAY
57323: PUSH
57324: LD_INT 1
57326: ARRAY
57327: PPUSH
57328: LD_EXP 62
57332: PUSH
57333: LD_VAR 0 2
57337: ARRAY
57338: PUSH
57339: LD_INT 1
57341: ARRAY
57342: PUSH
57343: LD_INT 2
57345: ARRAY
57346: PPUSH
57347: LD_EXP 62
57351: PUSH
57352: LD_VAR 0 2
57356: ARRAY
57357: PUSH
57358: LD_INT 1
57360: ARRAY
57361: PUSH
57362: LD_INT 3
57364: ARRAY
57365: PPUSH
57366: LD_EXP 62
57370: PUSH
57371: LD_VAR 0 2
57375: ARRAY
57376: PUSH
57377: LD_INT 1
57379: ARRAY
57380: PUSH
57381: LD_INT 4
57383: ARRAY
57384: PPUSH
57385: CALL_OW 145
// end ;
57389: GO 57178
57391: POP
57392: POP
// end else
57393: GO 57537
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
57395: LD_EXP 57
57399: PUSH
57400: LD_VAR 0 2
57404: ARRAY
57405: PPUSH
57406: LD_EXP 62
57410: PUSH
57411: LD_VAR 0 2
57415: ARRAY
57416: PUSH
57417: LD_INT 1
57419: ARRAY
57420: PUSH
57421: LD_INT 1
57423: ARRAY
57424: PPUSH
57425: LD_EXP 62
57429: PUSH
57430: LD_VAR 0 2
57434: ARRAY
57435: PUSH
57436: LD_INT 1
57438: ARRAY
57439: PUSH
57440: LD_INT 2
57442: ARRAY
57443: PPUSH
57444: LD_EXP 62
57448: PUSH
57449: LD_VAR 0 2
57453: ARRAY
57454: PUSH
57455: LD_INT 1
57457: ARRAY
57458: PUSH
57459: LD_INT 3
57461: ARRAY
57462: PPUSH
57463: LD_EXP 62
57467: PUSH
57468: LD_VAR 0 2
57472: ARRAY
57473: PUSH
57474: LD_INT 1
57476: ARRAY
57477: PUSH
57478: LD_INT 4
57480: ARRAY
57481: PPUSH
57482: CALL 26173 0 5
57486: NOT
57487: IFFALSE 57537
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
57489: LD_ADDR_EXP 62
57493: PUSH
57494: LD_EXP 62
57498: PPUSH
57499: LD_VAR 0 2
57503: PPUSH
57504: LD_EXP 62
57508: PUSH
57509: LD_VAR 0 2
57513: ARRAY
57514: PPUSH
57515: LD_INT 1
57517: PPUSH
57518: LD_INT 1
57520: NEG
57521: PPUSH
57522: LD_INT 0
57524: PPUSH
57525: CALL 19087 0 4
57529: PPUSH
57530: CALL_OW 1
57534: ST_TO_ADDR
// continue ;
57535: GO 56608
// end ; end ;
57537: GO 56608
57539: POP
57540: POP
// end ;
57541: LD_VAR 0 1
57545: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
57546: LD_INT 0
57548: PPUSH
57549: PPUSH
57550: PPUSH
57551: PPUSH
57552: PPUSH
57553: PPUSH
// if not mc_bases then
57554: LD_EXP 57
57558: NOT
57559: IFFALSE 57563
// exit ;
57561: GO 57990
// for i = 1 to mc_bases do
57563: LD_ADDR_VAR 0 2
57567: PUSH
57568: DOUBLE
57569: LD_INT 1
57571: DEC
57572: ST_TO_ADDR
57573: LD_EXP 57
57577: PUSH
57578: FOR_TO
57579: IFFALSE 57988
// begin tmp := mc_build_upgrade [ i ] ;
57581: LD_ADDR_VAR 0 4
57585: PUSH
57586: LD_EXP 89
57590: PUSH
57591: LD_VAR 0 2
57595: ARRAY
57596: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
57597: LD_ADDR_VAR 0 6
57601: PUSH
57602: LD_EXP 90
57606: PUSH
57607: LD_VAR 0 2
57611: ARRAY
57612: PPUSH
57613: LD_INT 2
57615: PUSH
57616: LD_INT 30
57618: PUSH
57619: LD_INT 6
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 30
57628: PUSH
57629: LD_INT 7
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: LIST
57640: PPUSH
57641: CALL_OW 72
57645: ST_TO_ADDR
// if not tmp and not lab then
57646: LD_VAR 0 4
57650: NOT
57651: PUSH
57652: LD_VAR 0 6
57656: NOT
57657: AND
57658: IFFALSE 57662
// continue ;
57660: GO 57578
// if tmp then
57662: LD_VAR 0 4
57666: IFFALSE 57786
// for j in tmp do
57668: LD_ADDR_VAR 0 3
57672: PUSH
57673: LD_VAR 0 4
57677: PUSH
57678: FOR_IN
57679: IFFALSE 57784
// begin if UpgradeCost ( j ) then
57681: LD_VAR 0 3
57685: PPUSH
57686: CALL 25833 0 1
57690: IFFALSE 57782
// begin ComUpgrade ( j ) ;
57692: LD_VAR 0 3
57696: PPUSH
57697: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
57701: LD_ADDR_EXP 89
57705: PUSH
57706: LD_EXP 89
57710: PPUSH
57711: LD_VAR 0 2
57715: PPUSH
57716: LD_EXP 89
57720: PUSH
57721: LD_VAR 0 2
57725: ARRAY
57726: PUSH
57727: LD_VAR 0 3
57731: DIFF
57732: PPUSH
57733: CALL_OW 1
57737: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
57738: LD_ADDR_EXP 64
57742: PUSH
57743: LD_EXP 64
57747: PPUSH
57748: LD_VAR 0 2
57752: PUSH
57753: LD_EXP 64
57757: PUSH
57758: LD_VAR 0 2
57762: ARRAY
57763: PUSH
57764: LD_INT 1
57766: PLUS
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PPUSH
57772: LD_VAR 0 3
57776: PPUSH
57777: CALL 20104 0 3
57781: ST_TO_ADDR
// end ; end ;
57782: GO 57678
57784: POP
57785: POP
// if not lab or not mc_lab_upgrade [ i ] then
57786: LD_VAR 0 6
57790: NOT
57791: PUSH
57792: LD_EXP 91
57796: PUSH
57797: LD_VAR 0 2
57801: ARRAY
57802: NOT
57803: OR
57804: IFFALSE 57808
// continue ;
57806: GO 57578
// for j in lab do
57808: LD_ADDR_VAR 0 3
57812: PUSH
57813: LD_VAR 0 6
57817: PUSH
57818: FOR_IN
57819: IFFALSE 57984
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
57821: LD_VAR 0 3
57825: PPUSH
57826: CALL_OW 266
57830: PUSH
57831: LD_INT 6
57833: PUSH
57834: LD_INT 7
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: IN
57841: PUSH
57842: LD_VAR 0 3
57846: PPUSH
57847: CALL_OW 461
57851: PUSH
57852: LD_INT 1
57854: NONEQUAL
57855: AND
57856: IFFALSE 57982
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
57858: LD_VAR 0 3
57862: PPUSH
57863: LD_EXP 91
57867: PUSH
57868: LD_VAR 0 2
57872: ARRAY
57873: PUSH
57874: LD_INT 1
57876: ARRAY
57877: PPUSH
57878: CALL 26038 0 2
57882: IFFALSE 57982
// begin ComCancel ( j ) ;
57884: LD_VAR 0 3
57888: PPUSH
57889: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
57893: LD_VAR 0 3
57897: PPUSH
57898: LD_EXP 91
57902: PUSH
57903: LD_VAR 0 2
57907: ARRAY
57908: PUSH
57909: LD_INT 1
57911: ARRAY
57912: PPUSH
57913: CALL_OW 207
// if not j in mc_construct_list [ i ] then
57917: LD_VAR 0 3
57921: PUSH
57922: LD_EXP 64
57926: PUSH
57927: LD_VAR 0 2
57931: ARRAY
57932: IN
57933: NOT
57934: IFFALSE 57980
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
57936: LD_ADDR_EXP 64
57940: PUSH
57941: LD_EXP 64
57945: PPUSH
57946: LD_VAR 0 2
57950: PUSH
57951: LD_EXP 64
57955: PUSH
57956: LD_VAR 0 2
57960: ARRAY
57961: PUSH
57962: LD_INT 1
57964: PLUS
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PPUSH
57970: LD_VAR 0 3
57974: PPUSH
57975: CALL 20104 0 3
57979: ST_TO_ADDR
// break ;
57980: GO 57984
// end ; end ; end ;
57982: GO 57818
57984: POP
57985: POP
// end ;
57986: GO 57578
57988: POP
57989: POP
// end ;
57990: LD_VAR 0 1
57994: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
57995: LD_INT 0
57997: PPUSH
57998: PPUSH
57999: PPUSH
58000: PPUSH
58001: PPUSH
58002: PPUSH
58003: PPUSH
// if not mc_bases then
58004: LD_EXP 57
58008: NOT
58009: IFFALSE 58013
// exit ;
58011: GO 58342
// for i = 1 to mc_bases do
58013: LD_ADDR_VAR 0 2
58017: PUSH
58018: DOUBLE
58019: LD_INT 1
58021: DEC
58022: ST_TO_ADDR
58023: LD_EXP 57
58027: PUSH
58028: FOR_TO
58029: IFFALSE 58340
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
58031: LD_EXP 65
58035: PUSH
58036: LD_VAR 0 2
58040: ARRAY
58041: NOT
58042: PUSH
58043: LD_EXP 57
58047: PUSH
58048: LD_VAR 0 2
58052: ARRAY
58053: PPUSH
58054: LD_INT 30
58056: PUSH
58057: LD_INT 3
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PPUSH
58064: CALL_OW 72
58068: NOT
58069: OR
58070: IFFALSE 58074
// continue ;
58072: GO 58028
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
58074: LD_EXP 65
58078: PUSH
58079: LD_VAR 0 2
58083: ARRAY
58084: PUSH
58085: LD_INT 1
58087: ARRAY
58088: PPUSH
58089: CALL_OW 269
58093: IFFALSE 58159
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
58095: LD_ADDR_VAR 0 4
58099: PUSH
58100: LD_EXP 65
58104: PUSH
58105: LD_VAR 0 2
58109: ARRAY
58110: PPUSH
58111: LD_INT 1
58113: PPUSH
58114: CALL_OW 3
58118: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
58119: LD_ADDR_EXP 65
58123: PUSH
58124: LD_EXP 65
58128: PPUSH
58129: LD_VAR 0 2
58133: PPUSH
58134: LD_VAR 0 4
58138: PPUSH
58139: CALL_OW 1
58143: ST_TO_ADDR
// if not mc_turret_list [ i ] then
58144: LD_EXP 65
58148: PUSH
58149: LD_VAR 0 2
58153: ARRAY
58154: NOT
58155: IFFALSE 58159
// continue ;
58157: GO 58028
// end ; busy := false ;
58159: LD_ADDR_VAR 0 6
58163: PUSH
58164: LD_INT 0
58166: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
58167: LD_ADDR_VAR 0 4
58171: PUSH
58172: LD_EXP 57
58176: PUSH
58177: LD_VAR 0 2
58181: ARRAY
58182: PPUSH
58183: LD_INT 30
58185: PUSH
58186: LD_INT 3
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PPUSH
58193: CALL_OW 72
58197: ST_TO_ADDR
// for j in tmp do
58198: LD_ADDR_VAR 0 3
58202: PUSH
58203: LD_VAR 0 4
58207: PUSH
58208: FOR_IN
58209: IFFALSE 58237
// if not BuildingStatus ( j ) = bs_idle then
58211: LD_VAR 0 3
58215: PPUSH
58216: CALL_OW 461
58220: PUSH
58221: LD_INT 2
58223: EQUAL
58224: NOT
58225: IFFALSE 58235
// busy := true ;
58227: LD_ADDR_VAR 0 6
58231: PUSH
58232: LD_INT 1
58234: ST_TO_ADDR
58235: GO 58208
58237: POP
58238: POP
// if busy then
58239: LD_VAR 0 6
58243: IFFALSE 58247
// continue ;
58245: GO 58028
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
58247: LD_ADDR_VAR 0 7
58251: PUSH
58252: LD_EXP 65
58256: PUSH
58257: LD_VAR 0 2
58261: ARRAY
58262: PUSH
58263: LD_INT 1
58265: ARRAY
58266: PPUSH
58267: CALL 24397 0 1
58271: ST_TO_ADDR
// if not weapon then
58272: LD_VAR 0 7
58276: NOT
58277: IFFALSE 58281
// continue ;
58279: GO 58028
// if mc_allowed_tower_weapons [ i ] then
58281: LD_EXP 95
58285: PUSH
58286: LD_VAR 0 2
58290: ARRAY
58291: IFFALSE 58314
// if not weapon in mc_allowed_tower_weapons [ i ] then
58293: LD_VAR 0 7
58297: PUSH
58298: LD_EXP 95
58302: PUSH
58303: LD_VAR 0 2
58307: ARRAY
58308: IN
58309: NOT
58310: IFFALSE 58314
// continue ;
58312: GO 58028
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
58314: LD_EXP 65
58318: PUSH
58319: LD_VAR 0 2
58323: ARRAY
58324: PUSH
58325: LD_INT 1
58327: ARRAY
58328: PPUSH
58329: LD_VAR 0 7
58333: PPUSH
58334: CALL_OW 148
// end ;
58338: GO 58028
58340: POP
58341: POP
// end ;
58342: LD_VAR 0 1
58346: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
58347: LD_INT 0
58349: PPUSH
58350: PPUSH
58351: PPUSH
58352: PPUSH
58353: PPUSH
58354: PPUSH
// if not mc_bases then
58355: LD_EXP 57
58359: NOT
58360: IFFALSE 58364
// exit ;
58362: GO 59349
// for i = 1 to mc_bases do
58364: LD_ADDR_VAR 0 2
58368: PUSH
58369: DOUBLE
58370: LD_INT 1
58372: DEC
58373: ST_TO_ADDR
58374: LD_EXP 57
58378: PUSH
58379: FOR_TO
58380: IFFALSE 59347
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
58382: LD_EXP 70
58386: PUSH
58387: LD_VAR 0 2
58391: ARRAY
58392: NOT
58393: PUSH
58394: LD_EXP 70
58398: PUSH
58399: LD_VAR 0 2
58403: ARRAY
58404: PUSH
58405: LD_EXP 71
58409: PUSH
58410: LD_VAR 0 2
58414: ARRAY
58415: EQUAL
58416: OR
58417: IFFALSE 58421
// continue ;
58419: GO 58379
// if mc_miners [ i ] then
58421: LD_EXP 71
58425: PUSH
58426: LD_VAR 0 2
58430: ARRAY
58431: IFFALSE 59034
// begin k := 1 ;
58433: LD_ADDR_VAR 0 4
58437: PUSH
58438: LD_INT 1
58440: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
58441: LD_ADDR_VAR 0 3
58445: PUSH
58446: DOUBLE
58447: LD_EXP 71
58451: PUSH
58452: LD_VAR 0 2
58456: ARRAY
58457: INC
58458: ST_TO_ADDR
58459: LD_INT 1
58461: PUSH
58462: FOR_DOWNTO
58463: IFFALSE 59032
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
58465: LD_EXP 71
58469: PUSH
58470: LD_VAR 0 2
58474: ARRAY
58475: PUSH
58476: LD_VAR 0 3
58480: ARRAY
58481: PPUSH
58482: CALL_OW 301
58486: IFFALSE 58549
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
58488: LD_ADDR_VAR 0 5
58492: PUSH
58493: LD_EXP 71
58497: PUSH
58498: LD_VAR 0 2
58502: ARRAY
58503: PUSH
58504: LD_EXP 71
58508: PUSH
58509: LD_VAR 0 2
58513: ARRAY
58514: PUSH
58515: LD_VAR 0 3
58519: ARRAY
58520: DIFF
58521: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
58522: LD_ADDR_EXP 71
58526: PUSH
58527: LD_EXP 71
58531: PPUSH
58532: LD_VAR 0 2
58536: PPUSH
58537: LD_VAR 0 5
58541: PPUSH
58542: CALL_OW 1
58546: ST_TO_ADDR
// continue ;
58547: GO 58462
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
58549: LD_EXP 71
58553: PUSH
58554: LD_VAR 0 2
58558: ARRAY
58559: PUSH
58560: LD_VAR 0 3
58564: ARRAY
58565: PPUSH
58566: CALL 19605 0 1
58570: PUSH
58571: LD_EXP 71
58575: PUSH
58576: LD_VAR 0 2
58580: ARRAY
58581: PUSH
58582: LD_VAR 0 3
58586: ARRAY
58587: PPUSH
58588: CALL_OW 255
58592: PPUSH
58593: LD_EXP 70
58597: PUSH
58598: LD_VAR 0 2
58602: ARRAY
58603: PUSH
58604: LD_VAR 0 4
58608: ARRAY
58609: PUSH
58610: LD_INT 1
58612: ARRAY
58613: PPUSH
58614: LD_EXP 70
58618: PUSH
58619: LD_VAR 0 2
58623: ARRAY
58624: PUSH
58625: LD_VAR 0 4
58629: ARRAY
58630: PUSH
58631: LD_INT 2
58633: ARRAY
58634: PPUSH
58635: LD_INT 15
58637: PPUSH
58638: CALL 20598 0 4
58642: PUSH
58643: LD_INT 4
58645: ARRAY
58646: PUSH
58647: LD_EXP 71
58651: PUSH
58652: LD_VAR 0 2
58656: ARRAY
58657: PUSH
58658: LD_VAR 0 3
58662: ARRAY
58663: PPUSH
58664: LD_INT 10
58666: PPUSH
58667: CALL 22295 0 2
58671: PUSH
58672: LD_INT 4
58674: ARRAY
58675: OR
58676: AND
58677: IFFALSE 58700
// ComStop ( mc_miners [ i ] [ j ] ) ;
58679: LD_EXP 71
58683: PUSH
58684: LD_VAR 0 2
58688: ARRAY
58689: PUSH
58690: LD_VAR 0 3
58694: ARRAY
58695: PPUSH
58696: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
58700: LD_EXP 71
58704: PUSH
58705: LD_VAR 0 2
58709: ARRAY
58710: PUSH
58711: LD_VAR 0 3
58715: ARRAY
58716: PPUSH
58717: CALL_OW 257
58721: PUSH
58722: LD_INT 1
58724: EQUAL
58725: PUSH
58726: LD_EXP 71
58730: PUSH
58731: LD_VAR 0 2
58735: ARRAY
58736: PUSH
58737: LD_VAR 0 3
58741: ARRAY
58742: PPUSH
58743: CALL_OW 459
58747: NOT
58748: AND
58749: PUSH
58750: LD_EXP 71
58754: PUSH
58755: LD_VAR 0 2
58759: ARRAY
58760: PUSH
58761: LD_VAR 0 3
58765: ARRAY
58766: PPUSH
58767: CALL_OW 255
58771: PPUSH
58772: LD_EXP 70
58776: PUSH
58777: LD_VAR 0 2
58781: ARRAY
58782: PUSH
58783: LD_VAR 0 4
58787: ARRAY
58788: PUSH
58789: LD_INT 1
58791: ARRAY
58792: PPUSH
58793: LD_EXP 70
58797: PUSH
58798: LD_VAR 0 2
58802: ARRAY
58803: PUSH
58804: LD_VAR 0 4
58808: ARRAY
58809: PUSH
58810: LD_INT 2
58812: ARRAY
58813: PPUSH
58814: LD_INT 15
58816: PPUSH
58817: CALL 20598 0 4
58821: PUSH
58822: LD_INT 4
58824: ARRAY
58825: PUSH
58826: LD_INT 0
58828: EQUAL
58829: AND
58830: PUSH
58831: LD_EXP 71
58835: PUSH
58836: LD_VAR 0 2
58840: ARRAY
58841: PUSH
58842: LD_VAR 0 3
58846: ARRAY
58847: PPUSH
58848: CALL_OW 314
58852: NOT
58853: AND
58854: IFFALSE 59030
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
58856: LD_EXP 71
58860: PUSH
58861: LD_VAR 0 2
58865: ARRAY
58866: PUSH
58867: LD_VAR 0 3
58871: ARRAY
58872: PPUSH
58873: CALL_OW 310
58877: IFFALSE 58900
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
58879: LD_EXP 71
58883: PUSH
58884: LD_VAR 0 2
58888: ARRAY
58889: PUSH
58890: LD_VAR 0 3
58894: ARRAY
58895: PPUSH
58896: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
58900: LD_EXP 71
58904: PUSH
58905: LD_VAR 0 2
58909: ARRAY
58910: PUSH
58911: LD_VAR 0 3
58915: ARRAY
58916: PPUSH
58917: CALL_OW 314
58921: NOT
58922: IFFALSE 58990
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
58924: LD_EXP 71
58928: PUSH
58929: LD_VAR 0 2
58933: ARRAY
58934: PUSH
58935: LD_VAR 0 3
58939: ARRAY
58940: PPUSH
58941: LD_EXP 70
58945: PUSH
58946: LD_VAR 0 2
58950: ARRAY
58951: PUSH
58952: LD_VAR 0 4
58956: ARRAY
58957: PUSH
58958: LD_INT 1
58960: ARRAY
58961: PPUSH
58962: LD_EXP 70
58966: PUSH
58967: LD_VAR 0 2
58971: ARRAY
58972: PUSH
58973: LD_VAR 0 4
58977: ARRAY
58978: PUSH
58979: LD_INT 2
58981: ARRAY
58982: PPUSH
58983: LD_INT 0
58985: PPUSH
58986: CALL_OW 193
// k := k + 1 ;
58990: LD_ADDR_VAR 0 4
58994: PUSH
58995: LD_VAR 0 4
58999: PUSH
59000: LD_INT 1
59002: PLUS
59003: ST_TO_ADDR
// if k > mc_mines [ i ] then
59004: LD_VAR 0 4
59008: PUSH
59009: LD_EXP 70
59013: PUSH
59014: LD_VAR 0 2
59018: ARRAY
59019: GREATER
59020: IFFALSE 59030
// k := 1 ;
59022: LD_ADDR_VAR 0 4
59026: PUSH
59027: LD_INT 1
59029: ST_TO_ADDR
// end ; end ;
59030: GO 58462
59032: POP
59033: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
59034: LD_ADDR_VAR 0 5
59038: PUSH
59039: LD_EXP 57
59043: PUSH
59044: LD_VAR 0 2
59048: ARRAY
59049: PPUSH
59050: LD_INT 2
59052: PUSH
59053: LD_INT 30
59055: PUSH
59056: LD_INT 4
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 30
59065: PUSH
59066: LD_INT 5
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 30
59075: PUSH
59076: LD_INT 32
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: PPUSH
59089: CALL_OW 72
59093: ST_TO_ADDR
// if not tmp then
59094: LD_VAR 0 5
59098: NOT
59099: IFFALSE 59103
// continue ;
59101: GO 58379
// list := [ ] ;
59103: LD_ADDR_VAR 0 6
59107: PUSH
59108: EMPTY
59109: ST_TO_ADDR
// for j in tmp do
59110: LD_ADDR_VAR 0 3
59114: PUSH
59115: LD_VAR 0 5
59119: PUSH
59120: FOR_IN
59121: IFFALSE 59190
// begin for k in UnitsInside ( j ) do
59123: LD_ADDR_VAR 0 4
59127: PUSH
59128: LD_VAR 0 3
59132: PPUSH
59133: CALL_OW 313
59137: PUSH
59138: FOR_IN
59139: IFFALSE 59186
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
59141: LD_VAR 0 4
59145: PPUSH
59146: CALL_OW 257
59150: PUSH
59151: LD_INT 1
59153: EQUAL
59154: PUSH
59155: LD_VAR 0 4
59159: PPUSH
59160: CALL_OW 459
59164: NOT
59165: AND
59166: IFFALSE 59184
// list := list ^ k ;
59168: LD_ADDR_VAR 0 6
59172: PUSH
59173: LD_VAR 0 6
59177: PUSH
59178: LD_VAR 0 4
59182: ADD
59183: ST_TO_ADDR
59184: GO 59138
59186: POP
59187: POP
// end ;
59188: GO 59120
59190: POP
59191: POP
// list := list diff mc_miners [ i ] ;
59192: LD_ADDR_VAR 0 6
59196: PUSH
59197: LD_VAR 0 6
59201: PUSH
59202: LD_EXP 71
59206: PUSH
59207: LD_VAR 0 2
59211: ARRAY
59212: DIFF
59213: ST_TO_ADDR
// if not list then
59214: LD_VAR 0 6
59218: NOT
59219: IFFALSE 59223
// continue ;
59221: GO 58379
// k := mc_mines [ i ] - mc_miners [ i ] ;
59223: LD_ADDR_VAR 0 4
59227: PUSH
59228: LD_EXP 70
59232: PUSH
59233: LD_VAR 0 2
59237: ARRAY
59238: PUSH
59239: LD_EXP 71
59243: PUSH
59244: LD_VAR 0 2
59248: ARRAY
59249: MINUS
59250: ST_TO_ADDR
// if k > list then
59251: LD_VAR 0 4
59255: PUSH
59256: LD_VAR 0 6
59260: GREATER
59261: IFFALSE 59273
// k := list ;
59263: LD_ADDR_VAR 0 4
59267: PUSH
59268: LD_VAR 0 6
59272: ST_TO_ADDR
// for j = 1 to k do
59273: LD_ADDR_VAR 0 3
59277: PUSH
59278: DOUBLE
59279: LD_INT 1
59281: DEC
59282: ST_TO_ADDR
59283: LD_VAR 0 4
59287: PUSH
59288: FOR_TO
59289: IFFALSE 59343
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
59291: LD_ADDR_EXP 71
59295: PUSH
59296: LD_EXP 71
59300: PPUSH
59301: LD_VAR 0 2
59305: PUSH
59306: LD_EXP 71
59310: PUSH
59311: LD_VAR 0 2
59315: ARRAY
59316: PUSH
59317: LD_INT 1
59319: PLUS
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PPUSH
59325: LD_VAR 0 6
59329: PUSH
59330: LD_VAR 0 3
59334: ARRAY
59335: PPUSH
59336: CALL 20104 0 3
59340: ST_TO_ADDR
59341: GO 59288
59343: POP
59344: POP
// end ;
59345: GO 58379
59347: POP
59348: POP
// end ;
59349: LD_VAR 0 1
59353: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
59354: LD_INT 0
59356: PPUSH
59357: PPUSH
59358: PPUSH
59359: PPUSH
59360: PPUSH
59361: PPUSH
59362: PPUSH
59363: PPUSH
59364: PPUSH
// if not mc_bases then
59365: LD_EXP 57
59369: NOT
59370: IFFALSE 59374
// exit ;
59372: GO 60853
// for i = 1 to mc_bases do
59374: LD_ADDR_VAR 0 2
59378: PUSH
59379: DOUBLE
59380: LD_INT 1
59382: DEC
59383: ST_TO_ADDR
59384: LD_EXP 57
59388: PUSH
59389: FOR_TO
59390: IFFALSE 60851
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
59392: LD_EXP 57
59396: PUSH
59397: LD_VAR 0 2
59401: ARRAY
59402: NOT
59403: PUSH
59404: LD_EXP 64
59408: PUSH
59409: LD_VAR 0 2
59413: ARRAY
59414: OR
59415: IFFALSE 59419
// continue ;
59417: GO 59389
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
59419: LD_EXP 73
59423: PUSH
59424: LD_VAR 0 2
59428: ARRAY
59429: NOT
59430: PUSH
59431: LD_EXP 74
59435: PUSH
59436: LD_VAR 0 2
59440: ARRAY
59441: AND
59442: IFFALSE 59480
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
59444: LD_ADDR_EXP 74
59448: PUSH
59449: LD_EXP 74
59453: PPUSH
59454: LD_VAR 0 2
59458: PPUSH
59459: EMPTY
59460: PPUSH
59461: CALL_OW 1
59465: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
59466: LD_VAR 0 2
59470: PPUSH
59471: LD_INT 107
59473: PPUSH
59474: CALL 54972 0 2
// continue ;
59478: GO 59389
// end ; target := [ ] ;
59480: LD_ADDR_VAR 0 5
59484: PUSH
59485: EMPTY
59486: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
59487: LD_ADDR_VAR 0 3
59491: PUSH
59492: DOUBLE
59493: LD_EXP 73
59497: PUSH
59498: LD_VAR 0 2
59502: ARRAY
59503: INC
59504: ST_TO_ADDR
59505: LD_INT 1
59507: PUSH
59508: FOR_DOWNTO
59509: IFFALSE 59769
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
59511: LD_EXP 73
59515: PUSH
59516: LD_VAR 0 2
59520: ARRAY
59521: PUSH
59522: LD_VAR 0 3
59526: ARRAY
59527: PUSH
59528: LD_INT 2
59530: ARRAY
59531: PPUSH
59532: LD_EXP 73
59536: PUSH
59537: LD_VAR 0 2
59541: ARRAY
59542: PUSH
59543: LD_VAR 0 3
59547: ARRAY
59548: PUSH
59549: LD_INT 3
59551: ARRAY
59552: PPUSH
59553: CALL_OW 488
59557: PUSH
59558: LD_EXP 73
59562: PUSH
59563: LD_VAR 0 2
59567: ARRAY
59568: PUSH
59569: LD_VAR 0 3
59573: ARRAY
59574: PUSH
59575: LD_INT 2
59577: ARRAY
59578: PPUSH
59579: LD_EXP 73
59583: PUSH
59584: LD_VAR 0 2
59588: ARRAY
59589: PUSH
59590: LD_VAR 0 3
59594: ARRAY
59595: PUSH
59596: LD_INT 3
59598: ARRAY
59599: PPUSH
59600: CALL_OW 284
59604: PUSH
59605: LD_INT 0
59607: EQUAL
59608: AND
59609: IFFALSE 59664
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
59611: LD_ADDR_VAR 0 4
59615: PUSH
59616: LD_EXP 73
59620: PUSH
59621: LD_VAR 0 2
59625: ARRAY
59626: PPUSH
59627: LD_VAR 0 3
59631: PPUSH
59632: CALL_OW 3
59636: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
59637: LD_ADDR_EXP 73
59641: PUSH
59642: LD_EXP 73
59646: PPUSH
59647: LD_VAR 0 2
59651: PPUSH
59652: LD_VAR 0 4
59656: PPUSH
59657: CALL_OW 1
59661: ST_TO_ADDR
// continue ;
59662: GO 59508
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
59664: LD_EXP 57
59668: PUSH
59669: LD_VAR 0 2
59673: ARRAY
59674: PUSH
59675: LD_INT 1
59677: ARRAY
59678: PPUSH
59679: CALL_OW 255
59683: PPUSH
59684: LD_EXP 73
59688: PUSH
59689: LD_VAR 0 2
59693: ARRAY
59694: PUSH
59695: LD_VAR 0 3
59699: ARRAY
59700: PUSH
59701: LD_INT 2
59703: ARRAY
59704: PPUSH
59705: LD_EXP 73
59709: PUSH
59710: LD_VAR 0 2
59714: ARRAY
59715: PUSH
59716: LD_VAR 0 3
59720: ARRAY
59721: PUSH
59722: LD_INT 3
59724: ARRAY
59725: PPUSH
59726: LD_INT 20
59728: PPUSH
59729: CALL 20598 0 4
59733: PUSH
59734: LD_INT 4
59736: ARRAY
59737: PUSH
59738: LD_INT 0
59740: EQUAL
59741: IFFALSE 59767
// begin target := mc_crates [ i ] [ j ] ;
59743: LD_ADDR_VAR 0 5
59747: PUSH
59748: LD_EXP 73
59752: PUSH
59753: LD_VAR 0 2
59757: ARRAY
59758: PUSH
59759: LD_VAR 0 3
59763: ARRAY
59764: ST_TO_ADDR
// break ;
59765: GO 59769
// end ; end ;
59767: GO 59508
59769: POP
59770: POP
// if not target then
59771: LD_VAR 0 5
59775: NOT
59776: IFFALSE 59780
// continue ;
59778: GO 59389
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
59780: LD_ADDR_VAR 0 6
59784: PUSH
59785: LD_EXP 76
59789: PUSH
59790: LD_VAR 0 2
59794: ARRAY
59795: PPUSH
59796: LD_INT 2
59798: PUSH
59799: LD_INT 3
59801: PUSH
59802: LD_INT 58
59804: PUSH
59805: EMPTY
59806: LIST
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 61
59814: PUSH
59815: EMPTY
59816: LIST
59817: PUSH
59818: LD_INT 33
59820: PUSH
59821: LD_INT 5
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 33
59830: PUSH
59831: LD_INT 3
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 2
59847: PUSH
59848: LD_INT 34
59850: PUSH
59851: LD_INT 32
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 34
59860: PUSH
59861: LD_INT 51
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 34
59870: PUSH
59871: LD_INT 12
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PPUSH
59888: CALL_OW 72
59892: ST_TO_ADDR
// if not cargo then
59893: LD_VAR 0 6
59897: NOT
59898: IFFALSE 60386
// begin if mc_crates_collector [ i ] < 5 then
59900: LD_EXP 74
59904: PUSH
59905: LD_VAR 0 2
59909: ARRAY
59910: PUSH
59911: LD_INT 5
59913: LESS
59914: IFFALSE 60200
// begin if mc_ape [ i ] then
59916: LD_EXP 86
59920: PUSH
59921: LD_VAR 0 2
59925: ARRAY
59926: IFFALSE 59973
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
59928: LD_ADDR_VAR 0 4
59932: PUSH
59933: LD_EXP 86
59937: PUSH
59938: LD_VAR 0 2
59942: ARRAY
59943: PPUSH
59944: LD_INT 25
59946: PUSH
59947: LD_INT 16
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 24
59956: PUSH
59957: LD_INT 750
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PPUSH
59968: CALL_OW 72
59972: ST_TO_ADDR
// if not tmp then
59973: LD_VAR 0 4
59977: NOT
59978: IFFALSE 60027
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) else
59980: LD_ADDR_VAR 0 4
59984: PUSH
59985: LD_EXP 57
59989: PUSH
59990: LD_VAR 0 2
59994: ARRAY
59995: PPUSH
59996: LD_INT 25
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 24
60008: PUSH
60009: LD_INT 750
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PPUSH
60020: CALL_OW 72
60024: ST_TO_ADDR
60025: GO 60088
// if tmp < 5 then
60027: LD_VAR 0 4
60031: PUSH
60032: LD_INT 5
60034: LESS
60035: IFFALSE 60088
// tmp := tmp union UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
60037: LD_ADDR_VAR 0 4
60041: PUSH
60042: LD_VAR 0 4
60046: PUSH
60047: LD_EXP 57
60051: PUSH
60052: LD_VAR 0 2
60056: ARRAY
60057: PPUSH
60058: LD_INT 25
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 24
60070: PUSH
60071: LD_INT 750
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PPUSH
60082: CALL_OW 72
60086: UNION
60087: ST_TO_ADDR
// if not tmp then
60088: LD_VAR 0 4
60092: NOT
60093: IFFALSE 60097
// continue ;
60095: GO 59389
// for j in tmp do
60097: LD_ADDR_VAR 0 3
60101: PUSH
60102: LD_VAR 0 4
60106: PUSH
60107: FOR_IN
60108: IFFALSE 60198
// if not GetTag ( j ) then
60110: LD_VAR 0 3
60114: PPUSH
60115: CALL_OW 110
60119: NOT
60120: IFFALSE 60196
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
60122: LD_ADDR_EXP 74
60126: PUSH
60127: LD_EXP 74
60131: PPUSH
60132: LD_VAR 0 2
60136: PUSH
60137: LD_EXP 74
60141: PUSH
60142: LD_VAR 0 2
60146: ARRAY
60147: PUSH
60148: LD_INT 1
60150: PLUS
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PPUSH
60156: LD_VAR 0 3
60160: PPUSH
60161: CALL 20104 0 3
60165: ST_TO_ADDR
// SetTag ( j , 107 ) ;
60166: LD_VAR 0 3
60170: PPUSH
60171: LD_INT 107
60173: PPUSH
60174: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
60178: LD_EXP 74
60182: PUSH
60183: LD_VAR 0 2
60187: ARRAY
60188: PUSH
60189: LD_INT 5
60191: GREATEREQUAL
60192: IFFALSE 60196
// break ;
60194: GO 60198
// end ;
60196: GO 60107
60198: POP
60199: POP
// end ; if mc_crates_collector [ i ] and target then
60200: LD_EXP 74
60204: PUSH
60205: LD_VAR 0 2
60209: ARRAY
60210: PUSH
60211: LD_VAR 0 5
60215: AND
60216: IFFALSE 60384
// begin if mc_crates_collector [ i ] < target [ 1 ] then
60218: LD_EXP 74
60222: PUSH
60223: LD_VAR 0 2
60227: ARRAY
60228: PUSH
60229: LD_VAR 0 5
60233: PUSH
60234: LD_INT 1
60236: ARRAY
60237: LESS
60238: IFFALSE 60258
// tmp := mc_crates_collector [ i ] else
60240: LD_ADDR_VAR 0 4
60244: PUSH
60245: LD_EXP 74
60249: PUSH
60250: LD_VAR 0 2
60254: ARRAY
60255: ST_TO_ADDR
60256: GO 60272
// tmp := target [ 1 ] ;
60258: LD_ADDR_VAR 0 4
60262: PUSH
60263: LD_VAR 0 5
60267: PUSH
60268: LD_INT 1
60270: ARRAY
60271: ST_TO_ADDR
// for j = 1 to tmp do
60272: LD_ADDR_VAR 0 3
60276: PUSH
60277: DOUBLE
60278: LD_INT 1
60280: DEC
60281: ST_TO_ADDR
60282: LD_VAR 0 4
60286: PUSH
60287: FOR_TO
60288: IFFALSE 60382
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
60290: LD_EXP 74
60294: PUSH
60295: LD_VAR 0 2
60299: ARRAY
60300: PUSH
60301: LD_VAR 0 3
60305: ARRAY
60306: PPUSH
60307: CALL_OW 310
60311: IFFALSE 60334
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
60313: LD_EXP 74
60317: PUSH
60318: LD_VAR 0 2
60322: ARRAY
60323: PUSH
60324: LD_VAR 0 3
60328: ARRAY
60329: PPUSH
60330: CALL_OW 122
// wait ( 3 ) ;
60334: LD_INT 3
60336: PPUSH
60337: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
60341: LD_EXP 74
60345: PUSH
60346: LD_VAR 0 2
60350: ARRAY
60351: PUSH
60352: LD_VAR 0 3
60356: ARRAY
60357: PPUSH
60358: LD_VAR 0 5
60362: PUSH
60363: LD_INT 2
60365: ARRAY
60366: PPUSH
60367: LD_VAR 0 5
60371: PUSH
60372: LD_INT 3
60374: ARRAY
60375: PPUSH
60376: CALL_OW 117
// end ;
60380: GO 60287
60382: POP
60383: POP
// end ; end else
60384: GO 60849
// begin for j in cargo do
60386: LD_ADDR_VAR 0 3
60390: PUSH
60391: LD_VAR 0 6
60395: PUSH
60396: FOR_IN
60397: IFFALSE 60847
// begin if GetTag ( j ) <> 0 then
60399: LD_VAR 0 3
60403: PPUSH
60404: CALL_OW 110
60408: PUSH
60409: LD_INT 0
60411: NONEQUAL
60412: IFFALSE 60416
// continue ;
60414: GO 60396
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
60416: LD_VAR 0 3
60420: PPUSH
60421: CALL_OW 262
60425: PUSH
60426: LD_INT 2
60428: EQUAL
60429: PUSH
60430: LD_VAR 0 3
60434: PPUSH
60435: CALL_OW 261
60439: PUSH
60440: LD_INT 15
60442: LESS
60443: AND
60444: IFFALSE 60448
// continue ;
60446: GO 60396
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
60448: LD_VAR 0 3
60452: PPUSH
60453: CALL_OW 262
60457: PUSH
60458: LD_INT 1
60460: EQUAL
60461: PUSH
60462: LD_VAR 0 3
60466: PPUSH
60467: CALL_OW 261
60471: PUSH
60472: LD_INT 10
60474: LESS
60475: AND
60476: IFFALSE 60786
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
60478: LD_ADDR_VAR 0 7
60482: PUSH
60483: LD_EXP 57
60487: PUSH
60488: LD_VAR 0 2
60492: ARRAY
60493: PPUSH
60494: LD_INT 2
60496: PUSH
60497: LD_INT 30
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 30
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: LIST
60521: PPUSH
60522: CALL_OW 72
60526: ST_TO_ADDR
// if not depot then
60527: LD_VAR 0 7
60531: NOT
60532: IFFALSE 60536
// continue ;
60534: GO 60396
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
60536: LD_VAR 0 3
60540: PPUSH
60541: LD_VAR 0 7
60545: PPUSH
60546: LD_VAR 0 3
60550: PPUSH
60551: CALL_OW 74
60555: PPUSH
60556: CALL_OW 296
60560: PUSH
60561: LD_INT 6
60563: LESS
60564: IFFALSE 60580
// SetFuel ( j , 100 ) else
60566: LD_VAR 0 3
60570: PPUSH
60571: LD_INT 100
60573: PPUSH
60574: CALL_OW 240
60578: GO 60786
// if GetFuel ( j ) = 0 then
60580: LD_VAR 0 3
60584: PPUSH
60585: CALL_OW 261
60589: PUSH
60590: LD_INT 0
60592: EQUAL
60593: IFFALSE 60786
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
60595: LD_ADDR_EXP 76
60599: PUSH
60600: LD_EXP 76
60604: PPUSH
60605: LD_VAR 0 2
60609: PPUSH
60610: LD_EXP 76
60614: PUSH
60615: LD_VAR 0 2
60619: ARRAY
60620: PUSH
60621: LD_VAR 0 3
60625: DIFF
60626: PPUSH
60627: CALL_OW 1
60631: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
60632: LD_VAR 0 3
60636: PPUSH
60637: CALL_OW 263
60641: PUSH
60642: LD_INT 1
60644: EQUAL
60645: IFFALSE 60661
// ComExitVehicle ( IsInUnit ( j ) ) ;
60647: LD_VAR 0 3
60651: PPUSH
60652: CALL_OW 310
60656: PPUSH
60657: CALL_OW 121
// if GetControl ( j ) = control_remote then
60661: LD_VAR 0 3
60665: PPUSH
60666: CALL_OW 263
60670: PUSH
60671: LD_INT 2
60673: EQUAL
60674: IFFALSE 60685
// ComUnlink ( j ) ;
60676: LD_VAR 0 3
60680: PPUSH
60681: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
60685: LD_ADDR_VAR 0 8
60689: PUSH
60690: LD_VAR 0 2
60694: PPUSH
60695: LD_INT 3
60697: PPUSH
60698: CALL 68482 0 2
60702: ST_TO_ADDR
// if fac then
60703: LD_VAR 0 8
60707: IFFALSE 60784
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
60709: LD_ADDR_VAR 0 9
60713: PUSH
60714: LD_VAR 0 8
60718: PPUSH
60719: LD_VAR 0 3
60723: PPUSH
60724: CALL_OW 265
60728: PPUSH
60729: LD_VAR 0 3
60733: PPUSH
60734: CALL_OW 262
60738: PPUSH
60739: LD_VAR 0 3
60743: PPUSH
60744: CALL_OW 263
60748: PPUSH
60749: LD_VAR 0 3
60753: PPUSH
60754: CALL_OW 264
60758: PPUSH
60759: CALL 17269 0 5
60763: ST_TO_ADDR
// if components then
60764: LD_VAR 0 9
60768: IFFALSE 60784
// MC_InsertProduceList ( i , components ) ;
60770: LD_VAR 0 2
60774: PPUSH
60775: LD_VAR 0 9
60779: PPUSH
60780: CALL 68049 0 2
// end ; continue ;
60784: GO 60396
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
60786: LD_VAR 0 3
60790: PPUSH
60791: LD_INT 1
60793: PPUSH
60794: CALL_OW 289
60798: PUSH
60799: LD_INT 100
60801: LESS
60802: PUSH
60803: LD_VAR 0 3
60807: PPUSH
60808: CALL_OW 314
60812: NOT
60813: AND
60814: IFFALSE 60843
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
60816: LD_VAR 0 3
60820: PPUSH
60821: LD_VAR 0 5
60825: PUSH
60826: LD_INT 2
60828: ARRAY
60829: PPUSH
60830: LD_VAR 0 5
60834: PUSH
60835: LD_INT 3
60837: ARRAY
60838: PPUSH
60839: CALL_OW 117
// break ;
60843: GO 60847
// end ;
60845: GO 60396
60847: POP
60848: POP
// end ; end ;
60849: GO 59389
60851: POP
60852: POP
// end ;
60853: LD_VAR 0 1
60857: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
60858: LD_INT 0
60860: PPUSH
60861: PPUSH
60862: PPUSH
60863: PPUSH
// if not mc_bases then
60864: LD_EXP 57
60868: NOT
60869: IFFALSE 60873
// exit ;
60871: GO 61034
// for i = 1 to mc_bases do
60873: LD_ADDR_VAR 0 2
60877: PUSH
60878: DOUBLE
60879: LD_INT 1
60881: DEC
60882: ST_TO_ADDR
60883: LD_EXP 57
60887: PUSH
60888: FOR_TO
60889: IFFALSE 61032
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
60891: LD_ADDR_VAR 0 4
60895: PUSH
60896: LD_EXP 76
60900: PUSH
60901: LD_VAR 0 2
60905: ARRAY
60906: PUSH
60907: LD_EXP 79
60911: PUSH
60912: LD_VAR 0 2
60916: ARRAY
60917: ADD
60918: PPUSH
60919: LD_INT 33
60921: PUSH
60922: LD_INT 2
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PPUSH
60929: CALL_OW 72
60933: ST_TO_ADDR
// if tmp then
60934: LD_VAR 0 4
60938: IFFALSE 61030
// for j in tmp do
60940: LD_ADDR_VAR 0 3
60944: PUSH
60945: LD_VAR 0 4
60949: PUSH
60950: FOR_IN
60951: IFFALSE 61028
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
60953: LD_VAR 0 3
60957: PPUSH
60958: CALL_OW 312
60962: NOT
60963: PUSH
60964: LD_VAR 0 3
60968: PPUSH
60969: CALL_OW 256
60973: PUSH
60974: LD_INT 250
60976: GREATEREQUAL
60977: AND
60978: IFFALSE 60991
// Connect ( j ) else
60980: LD_VAR 0 3
60984: PPUSH
60985: CALL 22592 0 1
60989: GO 61026
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
60991: LD_VAR 0 3
60995: PPUSH
60996: CALL_OW 256
61000: PUSH
61001: LD_INT 250
61003: LESS
61004: PUSH
61005: LD_VAR 0 3
61009: PPUSH
61010: CALL_OW 312
61014: AND
61015: IFFALSE 61026
// ComUnlink ( j ) ;
61017: LD_VAR 0 3
61021: PPUSH
61022: CALL_OW 136
61026: GO 60950
61028: POP
61029: POP
// end ;
61030: GO 60888
61032: POP
61033: POP
// end ;
61034: LD_VAR 0 1
61038: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
61039: LD_INT 0
61041: PPUSH
61042: PPUSH
61043: PPUSH
61044: PPUSH
61045: PPUSH
// if not mc_bases then
61046: LD_EXP 57
61050: NOT
61051: IFFALSE 61055
// exit ;
61053: GO 61515
// for i = 1 to mc_bases do
61055: LD_ADDR_VAR 0 2
61059: PUSH
61060: DOUBLE
61061: LD_INT 1
61063: DEC
61064: ST_TO_ADDR
61065: LD_EXP 57
61069: PUSH
61070: FOR_TO
61071: IFFALSE 61513
// begin if not mc_produce [ i ] then
61073: LD_EXP 78
61077: PUSH
61078: LD_VAR 0 2
61082: ARRAY
61083: NOT
61084: IFFALSE 61088
// continue ;
61086: GO 61070
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
61088: LD_ADDR_VAR 0 5
61092: PUSH
61093: LD_EXP 57
61097: PUSH
61098: LD_VAR 0 2
61102: ARRAY
61103: PPUSH
61104: LD_INT 30
61106: PUSH
61107: LD_INT 3
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PPUSH
61114: CALL_OW 72
61118: ST_TO_ADDR
// if not fac then
61119: LD_VAR 0 5
61123: NOT
61124: IFFALSE 61128
// continue ;
61126: GO 61070
// for j in fac do
61128: LD_ADDR_VAR 0 3
61132: PUSH
61133: LD_VAR 0 5
61137: PUSH
61138: FOR_IN
61139: IFFALSE 61509
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
61141: LD_VAR 0 3
61145: PPUSH
61146: CALL_OW 461
61150: PUSH
61151: LD_INT 2
61153: NONEQUAL
61154: PUSH
61155: LD_VAR 0 3
61159: PPUSH
61160: LD_INT 15
61162: PPUSH
61163: CALL 22295 0 2
61167: PUSH
61168: LD_INT 4
61170: ARRAY
61171: OR
61172: PUSH
61173: LD_VAR 0 3
61177: PPUSH
61178: CALL_OW 313
61182: PUSH
61183: LD_INT 0
61185: EQUAL
61186: OR
61187: IFFALSE 61191
// continue ;
61189: GO 61138
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
61191: LD_VAR 0 3
61195: PPUSH
61196: LD_EXP 78
61200: PUSH
61201: LD_VAR 0 2
61205: ARRAY
61206: PUSH
61207: LD_INT 1
61209: ARRAY
61210: PUSH
61211: LD_INT 1
61213: ARRAY
61214: PPUSH
61215: LD_EXP 78
61219: PUSH
61220: LD_VAR 0 2
61224: ARRAY
61225: PUSH
61226: LD_INT 1
61228: ARRAY
61229: PUSH
61230: LD_INT 2
61232: ARRAY
61233: PPUSH
61234: LD_EXP 78
61238: PUSH
61239: LD_VAR 0 2
61243: ARRAY
61244: PUSH
61245: LD_INT 1
61247: ARRAY
61248: PUSH
61249: LD_INT 3
61251: ARRAY
61252: PPUSH
61253: LD_EXP 78
61257: PUSH
61258: LD_VAR 0 2
61262: ARRAY
61263: PUSH
61264: LD_INT 1
61266: ARRAY
61267: PUSH
61268: LD_INT 4
61270: ARRAY
61271: PPUSH
61272: CALL_OW 448
61276: PUSH
61277: LD_VAR 0 3
61281: PPUSH
61282: LD_EXP 78
61286: PUSH
61287: LD_VAR 0 2
61291: ARRAY
61292: PUSH
61293: LD_INT 1
61295: ARRAY
61296: PUSH
61297: LD_INT 1
61299: ARRAY
61300: PUSH
61301: LD_EXP 78
61305: PUSH
61306: LD_VAR 0 2
61310: ARRAY
61311: PUSH
61312: LD_INT 1
61314: ARRAY
61315: PUSH
61316: LD_INT 2
61318: ARRAY
61319: PUSH
61320: LD_EXP 78
61324: PUSH
61325: LD_VAR 0 2
61329: ARRAY
61330: PUSH
61331: LD_INT 1
61333: ARRAY
61334: PUSH
61335: LD_INT 3
61337: ARRAY
61338: PUSH
61339: LD_EXP 78
61343: PUSH
61344: LD_VAR 0 2
61348: ARRAY
61349: PUSH
61350: LD_INT 1
61352: ARRAY
61353: PUSH
61354: LD_INT 4
61356: ARRAY
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: PPUSH
61364: CALL 25686 0 2
61368: AND
61369: IFFALSE 61507
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
61371: LD_VAR 0 3
61375: PPUSH
61376: LD_EXP 78
61380: PUSH
61381: LD_VAR 0 2
61385: ARRAY
61386: PUSH
61387: LD_INT 1
61389: ARRAY
61390: PUSH
61391: LD_INT 1
61393: ARRAY
61394: PPUSH
61395: LD_EXP 78
61399: PUSH
61400: LD_VAR 0 2
61404: ARRAY
61405: PUSH
61406: LD_INT 1
61408: ARRAY
61409: PUSH
61410: LD_INT 2
61412: ARRAY
61413: PPUSH
61414: LD_EXP 78
61418: PUSH
61419: LD_VAR 0 2
61423: ARRAY
61424: PUSH
61425: LD_INT 1
61427: ARRAY
61428: PUSH
61429: LD_INT 3
61431: ARRAY
61432: PPUSH
61433: LD_EXP 78
61437: PUSH
61438: LD_VAR 0 2
61442: ARRAY
61443: PUSH
61444: LD_INT 1
61446: ARRAY
61447: PUSH
61448: LD_INT 4
61450: ARRAY
61451: PPUSH
61452: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
61456: LD_ADDR_VAR 0 4
61460: PUSH
61461: LD_EXP 78
61465: PUSH
61466: LD_VAR 0 2
61470: ARRAY
61471: PPUSH
61472: LD_INT 1
61474: PPUSH
61475: CALL_OW 3
61479: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
61480: LD_ADDR_EXP 78
61484: PUSH
61485: LD_EXP 78
61489: PPUSH
61490: LD_VAR 0 2
61494: PPUSH
61495: LD_VAR 0 4
61499: PPUSH
61500: CALL_OW 1
61504: ST_TO_ADDR
// break ;
61505: GO 61509
// end ; end ;
61507: GO 61138
61509: POP
61510: POP
// end ;
61511: GO 61070
61513: POP
61514: POP
// end ;
61515: LD_VAR 0 1
61519: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
61520: LD_INT 0
61522: PPUSH
61523: PPUSH
61524: PPUSH
// if not mc_bases then
61525: LD_EXP 57
61529: NOT
61530: IFFALSE 61534
// exit ;
61532: GO 61623
// for i = 1 to mc_bases do
61534: LD_ADDR_VAR 0 2
61538: PUSH
61539: DOUBLE
61540: LD_INT 1
61542: DEC
61543: ST_TO_ADDR
61544: LD_EXP 57
61548: PUSH
61549: FOR_TO
61550: IFFALSE 61621
// begin if mc_attack [ i ] then
61552: LD_EXP 77
61556: PUSH
61557: LD_VAR 0 2
61561: ARRAY
61562: IFFALSE 61619
// begin tmp := mc_attack [ i ] [ 1 ] ;
61564: LD_ADDR_VAR 0 3
61568: PUSH
61569: LD_EXP 77
61573: PUSH
61574: LD_VAR 0 2
61578: ARRAY
61579: PUSH
61580: LD_INT 1
61582: ARRAY
61583: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
61584: LD_ADDR_EXP 77
61588: PUSH
61589: LD_EXP 77
61593: PPUSH
61594: LD_VAR 0 2
61598: PPUSH
61599: EMPTY
61600: PPUSH
61601: CALL_OW 1
61605: ST_TO_ADDR
// Attack ( tmp ) ;
61606: LD_VAR 0 3
61610: PPUSH
61611: CALL 47618 0 1
// exit ;
61615: POP
61616: POP
61617: GO 61623
// end ; end ;
61619: GO 61549
61621: POP
61622: POP
// end ;
61623: LD_VAR 0 1
61627: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
61628: LD_INT 0
61630: PPUSH
61631: PPUSH
61632: PPUSH
61633: PPUSH
61634: PPUSH
61635: PPUSH
61636: PPUSH
// if not mc_bases then
61637: LD_EXP 57
61641: NOT
61642: IFFALSE 61646
// exit ;
61644: GO 62021
// for i = 1 to mc_bases do
61646: LD_ADDR_VAR 0 2
61650: PUSH
61651: DOUBLE
61652: LD_INT 1
61654: DEC
61655: ST_TO_ADDR
61656: LD_EXP 57
61660: PUSH
61661: FOR_TO
61662: IFFALSE 62019
// begin if not mc_bases [ i ] then
61664: LD_EXP 57
61668: PUSH
61669: LD_VAR 0 2
61673: ARRAY
61674: NOT
61675: IFFALSE 61679
// continue ;
61677: GO 61661
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
61679: LD_ADDR_VAR 0 7
61683: PUSH
61684: LD_EXP 57
61688: PUSH
61689: LD_VAR 0 2
61693: ARRAY
61694: PUSH
61695: LD_INT 1
61697: ARRAY
61698: PPUSH
61699: CALL 16609 0 1
61703: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
61704: LD_ADDR_EXP 80
61708: PUSH
61709: LD_EXP 80
61713: PPUSH
61714: LD_VAR 0 2
61718: PPUSH
61719: LD_EXP 57
61723: PUSH
61724: LD_VAR 0 2
61728: ARRAY
61729: PUSH
61730: LD_INT 1
61732: ARRAY
61733: PPUSH
61734: CALL_OW 255
61738: PPUSH
61739: LD_EXP 82
61743: PUSH
61744: LD_VAR 0 2
61748: ARRAY
61749: PPUSH
61750: CALL 15067 0 2
61754: PPUSH
61755: CALL_OW 1
61759: ST_TO_ADDR
// if not mc_scan [ i ] then
61760: LD_EXP 80
61764: PUSH
61765: LD_VAR 0 2
61769: ARRAY
61770: NOT
61771: IFFALSE 61926
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
61773: LD_ADDR_VAR 0 4
61777: PUSH
61778: LD_EXP 57
61782: PUSH
61783: LD_VAR 0 2
61787: ARRAY
61788: PPUSH
61789: LD_INT 2
61791: PUSH
61792: LD_INT 25
61794: PUSH
61795: LD_INT 5
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 25
61804: PUSH
61805: LD_INT 8
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 25
61814: PUSH
61815: LD_INT 9
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: PPUSH
61828: CALL_OW 72
61832: ST_TO_ADDR
// if not tmp then
61833: LD_VAR 0 4
61837: NOT
61838: IFFALSE 61842
// continue ;
61840: GO 61661
// for j in tmp do
61842: LD_ADDR_VAR 0 3
61846: PUSH
61847: LD_VAR 0 4
61851: PUSH
61852: FOR_IN
61853: IFFALSE 61924
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
61855: LD_VAR 0 3
61859: PPUSH
61860: CALL_OW 310
61864: PPUSH
61865: CALL_OW 266
61869: PUSH
61870: LD_INT 5
61872: EQUAL
61873: PUSH
61874: LD_VAR 0 3
61878: PPUSH
61879: CALL_OW 257
61883: PUSH
61884: LD_INT 1
61886: EQUAL
61887: AND
61888: PUSH
61889: LD_VAR 0 3
61893: PPUSH
61894: CALL_OW 459
61898: NOT
61899: AND
61900: PUSH
61901: LD_VAR 0 7
61905: AND
61906: IFFALSE 61922
// ComChangeProfession ( j , class ) ;
61908: LD_VAR 0 3
61912: PPUSH
61913: LD_VAR 0 7
61917: PPUSH
61918: CALL_OW 123
61922: GO 61852
61924: POP
61925: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
61926: LD_EXP 80
61930: PUSH
61931: LD_VAR 0 2
61935: ARRAY
61936: PUSH
61937: LD_EXP 79
61941: PUSH
61942: LD_VAR 0 2
61946: ARRAY
61947: AND
61948: IFFALSE 62017
// begin tmp := mc_defender [ i ] ;
61950: LD_ADDR_VAR 0 4
61954: PUSH
61955: LD_EXP 79
61959: PUSH
61960: LD_VAR 0 2
61964: ARRAY
61965: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
61966: LD_ADDR_EXP 79
61970: PUSH
61971: LD_EXP 79
61975: PPUSH
61976: LD_VAR 0 2
61980: PPUSH
61981: EMPTY
61982: PPUSH
61983: CALL_OW 1
61987: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
61988: LD_VAR 0 2
61992: PPUSH
61993: LD_VAR 0 4
61997: PPUSH
61998: LD_EXP 80
62002: PUSH
62003: LD_VAR 0 2
62007: ARRAY
62008: PPUSH
62009: CALL 15102 0 3
// exit ;
62013: POP
62014: POP
62015: GO 62021
// end ; end ;
62017: GO 61661
62019: POP
62020: POP
// end ;
62021: LD_VAR 0 1
62025: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
62026: LD_INT 0
62028: PPUSH
62029: PPUSH
62030: PPUSH
62031: PPUSH
62032: PPUSH
62033: PPUSH
62034: PPUSH
62035: PPUSH
62036: PPUSH
// if not mc_bases then
62037: LD_EXP 57
62041: NOT
62042: IFFALSE 62046
// exit ;
62044: GO 62990
// for i = 1 to mc_bases do
62046: LD_ADDR_VAR 0 2
62050: PUSH
62051: DOUBLE
62052: LD_INT 1
62054: DEC
62055: ST_TO_ADDR
62056: LD_EXP 57
62060: PUSH
62061: FOR_TO
62062: IFFALSE 62988
// begin tmp := mc_lab [ i ] ;
62064: LD_ADDR_VAR 0 6
62068: PUSH
62069: LD_EXP 90
62073: PUSH
62074: LD_VAR 0 2
62078: ARRAY
62079: ST_TO_ADDR
// if not tmp then
62080: LD_VAR 0 6
62084: NOT
62085: IFFALSE 62089
// continue ;
62087: GO 62061
// for j in tmp do
62089: LD_ADDR_VAR 0 3
62093: PUSH
62094: LD_VAR 0 6
62098: PUSH
62099: FOR_IN
62100: IFFALSE 62984
// begin side := GetSide ( j ) ;
62102: LD_ADDR_VAR 0 4
62106: PUSH
62107: LD_VAR 0 3
62111: PPUSH
62112: CALL_OW 255
62116: ST_TO_ADDR
// if not mc_tech [ side ] then
62117: LD_EXP 84
62121: PUSH
62122: LD_VAR 0 4
62126: ARRAY
62127: NOT
62128: IFFALSE 62132
// continue ;
62130: GO 62099
// if BuildingStatus ( j ) = bs_idle then
62132: LD_VAR 0 3
62136: PPUSH
62137: CALL_OW 461
62141: PUSH
62142: LD_INT 2
62144: EQUAL
62145: IFFALSE 62218
// for t in mc_tech [ side ] do
62147: LD_ADDR_VAR 0 5
62151: PUSH
62152: LD_EXP 84
62156: PUSH
62157: LD_VAR 0 4
62161: ARRAY
62162: PUSH
62163: FOR_IN
62164: IFFALSE 62216
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
62166: LD_VAR 0 3
62170: PPUSH
62171: LD_VAR 0 5
62175: PPUSH
62176: CALL_OW 430
62180: PUSH
62181: LD_VAR 0 4
62185: PPUSH
62186: LD_VAR 0 5
62190: PPUSH
62191: CALL 14175 0 2
62195: AND
62196: IFFALSE 62214
// begin ComResearch ( j , t ) ;
62198: LD_VAR 0 3
62202: PPUSH
62203: LD_VAR 0 5
62207: PPUSH
62208: CALL_OW 124
// break ;
62212: GO 62216
// end ;
62214: GO 62163
62216: POP
62217: POP
// if BuildingStatus ( j ) = bs_need_ape then
62218: LD_VAR 0 3
62222: PPUSH
62223: CALL_OW 461
62227: PUSH
62228: LD_INT 10
62230: EQUAL
62231: IFFALSE 62819
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
62233: LD_EXP 86
62237: PUSH
62238: LD_VAR 0 2
62242: ARRAY
62243: NOT
62244: PUSH
62245: LD_EXP 87
62249: PUSH
62250: LD_VAR 0 2
62254: ARRAY
62255: NOT
62256: AND
62257: PUSH
62258: LD_EXP 84
62262: PUSH
62263: LD_VAR 0 4
62267: ARRAY
62268: PUSH
62269: LD_INT 1
62271: GREATER
62272: AND
62273: IFFALSE 62404
// begin ComCancel ( j ) ;
62275: LD_VAR 0 3
62279: PPUSH
62280: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
62284: LD_ADDR_EXP 84
62288: PUSH
62289: LD_EXP 84
62293: PPUSH
62294: LD_VAR 0 4
62298: PPUSH
62299: LD_EXP 84
62303: PUSH
62304: LD_VAR 0 4
62308: ARRAY
62309: PPUSH
62310: LD_EXP 84
62314: PUSH
62315: LD_VAR 0 4
62319: ARRAY
62320: PUSH
62321: LD_INT 1
62323: MINUS
62324: PPUSH
62325: LD_EXP 84
62329: PUSH
62330: LD_VAR 0 4
62334: ARRAY
62335: PPUSH
62336: LD_INT 0
62338: PPUSH
62339: CALL 19087 0 4
62343: PPUSH
62344: CALL_OW 1
62348: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
62349: LD_ADDR_EXP 84
62353: PUSH
62354: LD_EXP 84
62358: PPUSH
62359: LD_VAR 0 4
62363: PPUSH
62364: LD_EXP 84
62368: PUSH
62369: LD_VAR 0 4
62373: ARRAY
62374: PPUSH
62375: LD_EXP 84
62379: PUSH
62380: LD_VAR 0 4
62384: ARRAY
62385: PPUSH
62386: LD_INT 1
62388: PPUSH
62389: LD_INT 0
62391: PPUSH
62392: CALL 19087 0 4
62396: PPUSH
62397: CALL_OW 1
62401: ST_TO_ADDR
// continue ;
62402: GO 62099
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
62404: LD_EXP 86
62408: PUSH
62409: LD_VAR 0 2
62413: ARRAY
62414: PUSH
62415: LD_EXP 87
62419: PUSH
62420: LD_VAR 0 2
62424: ARRAY
62425: NOT
62426: AND
62427: IFFALSE 62554
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
62429: LD_ADDR_EXP 87
62433: PUSH
62434: LD_EXP 87
62438: PPUSH
62439: LD_VAR 0 2
62443: PUSH
62444: LD_EXP 87
62448: PUSH
62449: LD_VAR 0 2
62453: ARRAY
62454: PUSH
62455: LD_INT 1
62457: PLUS
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PPUSH
62463: LD_EXP 86
62467: PUSH
62468: LD_VAR 0 2
62472: ARRAY
62473: PUSH
62474: LD_INT 1
62476: ARRAY
62477: PPUSH
62478: CALL 20104 0 3
62482: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
62483: LD_EXP 86
62487: PUSH
62488: LD_VAR 0 2
62492: ARRAY
62493: PUSH
62494: LD_INT 1
62496: ARRAY
62497: PPUSH
62498: LD_INT 112
62500: PPUSH
62501: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
62505: LD_ADDR_VAR 0 9
62509: PUSH
62510: LD_EXP 86
62514: PUSH
62515: LD_VAR 0 2
62519: ARRAY
62520: PPUSH
62521: LD_INT 1
62523: PPUSH
62524: CALL_OW 3
62528: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
62529: LD_ADDR_EXP 86
62533: PUSH
62534: LD_EXP 86
62538: PPUSH
62539: LD_VAR 0 2
62543: PPUSH
62544: LD_VAR 0 9
62548: PPUSH
62549: CALL_OW 1
62553: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
62554: LD_EXP 86
62558: PUSH
62559: LD_VAR 0 2
62563: ARRAY
62564: PUSH
62565: LD_EXP 87
62569: PUSH
62570: LD_VAR 0 2
62574: ARRAY
62575: AND
62576: PUSH
62577: LD_EXP 87
62581: PUSH
62582: LD_VAR 0 2
62586: ARRAY
62587: PUSH
62588: LD_INT 1
62590: ARRAY
62591: PPUSH
62592: CALL_OW 310
62596: NOT
62597: AND
62598: PUSH
62599: LD_VAR 0 3
62603: PPUSH
62604: CALL_OW 313
62608: PUSH
62609: LD_INT 6
62611: EQUAL
62612: AND
62613: IFFALSE 62669
// begin tmp2 := UnitsInside ( j ) ;
62615: LD_ADDR_VAR 0 9
62619: PUSH
62620: LD_VAR 0 3
62624: PPUSH
62625: CALL_OW 313
62629: ST_TO_ADDR
// if tmp2 = 6 then
62630: LD_VAR 0 9
62634: PUSH
62635: LD_INT 6
62637: EQUAL
62638: IFFALSE 62669
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
62640: LD_VAR 0 9
62644: PUSH
62645: LD_INT 1
62647: ARRAY
62648: PPUSH
62649: LD_INT 112
62651: PPUSH
62652: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
62656: LD_VAR 0 9
62660: PUSH
62661: LD_INT 1
62663: ARRAY
62664: PPUSH
62665: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
62669: LD_EXP 87
62673: PUSH
62674: LD_VAR 0 2
62678: ARRAY
62679: PUSH
62680: LD_EXP 87
62684: PUSH
62685: LD_VAR 0 2
62689: ARRAY
62690: PUSH
62691: LD_INT 1
62693: ARRAY
62694: PPUSH
62695: CALL_OW 314
62699: NOT
62700: AND
62701: PUSH
62702: LD_EXP 87
62706: PUSH
62707: LD_VAR 0 2
62711: ARRAY
62712: PUSH
62713: LD_INT 1
62715: ARRAY
62716: PPUSH
62717: CALL_OW 310
62721: NOT
62722: AND
62723: IFFALSE 62749
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
62725: LD_EXP 87
62729: PUSH
62730: LD_VAR 0 2
62734: ARRAY
62735: PUSH
62736: LD_INT 1
62738: ARRAY
62739: PPUSH
62740: LD_VAR 0 3
62744: PPUSH
62745: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
62749: LD_EXP 87
62753: PUSH
62754: LD_VAR 0 2
62758: ARRAY
62759: PUSH
62760: LD_INT 1
62762: ARRAY
62763: PPUSH
62764: CALL_OW 310
62768: PUSH
62769: LD_EXP 87
62773: PUSH
62774: LD_VAR 0 2
62778: ARRAY
62779: PUSH
62780: LD_INT 1
62782: ARRAY
62783: PPUSH
62784: CALL_OW 310
62788: PPUSH
62789: CALL_OW 461
62793: PUSH
62794: LD_INT 3
62796: NONEQUAL
62797: AND
62798: IFFALSE 62819
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
62800: LD_EXP 87
62804: PUSH
62805: LD_VAR 0 2
62809: ARRAY
62810: PUSH
62811: LD_INT 1
62813: ARRAY
62814: PPUSH
62815: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
62819: LD_VAR 0 3
62823: PPUSH
62824: CALL_OW 461
62828: PUSH
62829: LD_INT 6
62831: EQUAL
62832: PUSH
62833: LD_VAR 0 6
62837: PUSH
62838: LD_INT 1
62840: GREATER
62841: AND
62842: IFFALSE 62982
// begin sci := [ ] ;
62844: LD_ADDR_VAR 0 8
62848: PUSH
62849: EMPTY
62850: ST_TO_ADDR
// for x in tmp diff j do
62851: LD_ADDR_VAR 0 7
62855: PUSH
62856: LD_VAR 0 6
62860: PUSH
62861: LD_VAR 0 3
62865: DIFF
62866: PUSH
62867: FOR_IN
62868: IFFALSE 62908
// begin if BuildingStatus ( x ) = bs_idle then
62870: LD_VAR 0 7
62874: PPUSH
62875: CALL_OW 461
62879: PUSH
62880: LD_INT 2
62882: EQUAL
62883: IFFALSE 62906
// sci := sci ^ UnitsInside ( x ) ;
62885: LD_ADDR_VAR 0 8
62889: PUSH
62890: LD_VAR 0 8
62894: PUSH
62895: LD_VAR 0 7
62899: PPUSH
62900: CALL_OW 313
62904: ADD
62905: ST_TO_ADDR
// end ;
62906: GO 62867
62908: POP
62909: POP
// if not sci then
62910: LD_VAR 0 8
62914: NOT
62915: IFFALSE 62919
// continue ;
62917: GO 62099
// for x in sci do
62919: LD_ADDR_VAR 0 7
62923: PUSH
62924: LD_VAR 0 8
62928: PUSH
62929: FOR_IN
62930: IFFALSE 62980
// if IsInUnit ( x ) and not HasTask ( x ) then
62932: LD_VAR 0 7
62936: PPUSH
62937: CALL_OW 310
62941: PUSH
62942: LD_VAR 0 7
62946: PPUSH
62947: CALL_OW 314
62951: NOT
62952: AND
62953: IFFALSE 62978
// begin ComExitBuilding ( x ) ;
62955: LD_VAR 0 7
62959: PPUSH
62960: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
62964: LD_VAR 0 7
62968: PPUSH
62969: LD_VAR 0 3
62973: PPUSH
62974: CALL_OW 180
// end ;
62978: GO 62929
62980: POP
62981: POP
// end ; end ;
62982: GO 62099
62984: POP
62985: POP
// end ;
62986: GO 62061
62988: POP
62989: POP
// end ;
62990: LD_VAR 0 1
62994: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
62995: LD_INT 0
62997: PPUSH
62998: PPUSH
62999: PPUSH
63000: PPUSH
63001: PPUSH
63002: PPUSH
63003: PPUSH
63004: PPUSH
// if not mc_bases or not mc_parking then
63005: LD_EXP 57
63009: NOT
63010: PUSH
63011: LD_EXP 81
63015: NOT
63016: OR
63017: IFFALSE 63021
// exit ;
63019: GO 63679
// for i = 1 to mc_bases do
63021: LD_ADDR_VAR 0 2
63025: PUSH
63026: DOUBLE
63027: LD_INT 1
63029: DEC
63030: ST_TO_ADDR
63031: LD_EXP 57
63035: PUSH
63036: FOR_TO
63037: IFFALSE 63677
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
63039: LD_EXP 57
63043: PUSH
63044: LD_VAR 0 2
63048: ARRAY
63049: NOT
63050: PUSH
63051: LD_EXP 81
63055: PUSH
63056: LD_VAR 0 2
63060: ARRAY
63061: NOT
63062: OR
63063: IFFALSE 63067
// continue ;
63065: GO 63036
// if mc_scan [ i ] then
63067: LD_EXP 80
63071: PUSH
63072: LD_VAR 0 2
63076: ARRAY
63077: IFFALSE 63103
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
63079: LD_ADDR_EXP 69
63083: PUSH
63084: LD_EXP 69
63088: PPUSH
63089: LD_VAR 0 2
63093: PPUSH
63094: EMPTY
63095: PPUSH
63096: CALL_OW 1
63100: ST_TO_ADDR
// continue ;
63101: GO 63036
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
63103: LD_ADDR_VAR 0 5
63107: PUSH
63108: LD_EXP 57
63112: PUSH
63113: LD_VAR 0 2
63117: ARRAY
63118: PUSH
63119: LD_INT 1
63121: ARRAY
63122: PPUSH
63123: CALL_OW 255
63127: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
63128: LD_ADDR_VAR 0 6
63132: PUSH
63133: LD_EXP 57
63137: PUSH
63138: LD_VAR 0 2
63142: ARRAY
63143: PPUSH
63144: LD_INT 30
63146: PUSH
63147: LD_INT 3
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PPUSH
63154: CALL_OW 72
63158: ST_TO_ADDR
// if not fac then
63159: LD_VAR 0 6
63163: NOT
63164: IFFALSE 63215
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63166: LD_ADDR_VAR 0 6
63170: PUSH
63171: LD_EXP 57
63175: PUSH
63176: LD_VAR 0 2
63180: ARRAY
63181: PPUSH
63182: LD_INT 2
63184: PUSH
63185: LD_INT 30
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 30
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: LIST
63209: PPUSH
63210: CALL_OW 72
63214: ST_TO_ADDR
// if not fac then
63215: LD_VAR 0 6
63219: NOT
63220: IFFALSE 63224
// continue ;
63222: GO 63036
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
63224: LD_ADDR_VAR 0 7
63228: PUSH
63229: LD_EXP 81
63233: PUSH
63234: LD_VAR 0 2
63238: ARRAY
63239: PPUSH
63240: LD_INT 22
63242: PUSH
63243: LD_VAR 0 5
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 21
63254: PUSH
63255: LD_INT 2
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 3
63264: PUSH
63265: LD_INT 24
63267: PUSH
63268: LD_INT 1000
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: LIST
63283: PPUSH
63284: CALL_OW 70
63288: PUSH
63289: LD_INT 22
63291: PUSH
63292: LD_VAR 0 5
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 91
63303: PUSH
63304: LD_VAR 0 6
63308: PUSH
63309: LD_INT 1
63311: ARRAY
63312: PUSH
63313: LD_INT 25
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 21
63323: PUSH
63324: LD_INT 2
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 3
63333: PUSH
63334: LD_INT 24
63336: PUSH
63337: LD_INT 1000
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: PPUSH
63354: CALL_OW 69
63358: UNION
63359: ST_TO_ADDR
// if not vehs then
63360: LD_VAR 0 7
63364: NOT
63365: IFFALSE 63391
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
63367: LD_ADDR_EXP 69
63371: PUSH
63372: LD_EXP 69
63376: PPUSH
63377: LD_VAR 0 2
63381: PPUSH
63382: EMPTY
63383: PPUSH
63384: CALL_OW 1
63388: ST_TO_ADDR
// continue ;
63389: GO 63036
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
63391: LD_ADDR_VAR 0 8
63395: PUSH
63396: LD_EXP 57
63400: PUSH
63401: LD_VAR 0 2
63405: ARRAY
63406: PPUSH
63407: LD_INT 30
63409: PUSH
63410: LD_INT 3
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PPUSH
63417: CALL_OW 72
63421: ST_TO_ADDR
// if tmp then
63422: LD_VAR 0 8
63426: IFFALSE 63529
// begin for j in tmp do
63428: LD_ADDR_VAR 0 3
63432: PUSH
63433: LD_VAR 0 8
63437: PUSH
63438: FOR_IN
63439: IFFALSE 63527
// for k in UnitsInside ( j ) do
63441: LD_ADDR_VAR 0 4
63445: PUSH
63446: LD_VAR 0 3
63450: PPUSH
63451: CALL_OW 313
63455: PUSH
63456: FOR_IN
63457: IFFALSE 63523
// if k then
63459: LD_VAR 0 4
63463: IFFALSE 63521
// if not k in mc_repair_vehicle [ i ] then
63465: LD_VAR 0 4
63469: PUSH
63470: LD_EXP 69
63474: PUSH
63475: LD_VAR 0 2
63479: ARRAY
63480: IN
63481: NOT
63482: IFFALSE 63521
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
63484: LD_ADDR_EXP 69
63488: PUSH
63489: LD_EXP 69
63493: PPUSH
63494: LD_VAR 0 2
63498: PPUSH
63499: LD_EXP 69
63503: PUSH
63504: LD_VAR 0 2
63508: ARRAY
63509: PUSH
63510: LD_VAR 0 4
63514: UNION
63515: PPUSH
63516: CALL_OW 1
63520: ST_TO_ADDR
63521: GO 63456
63523: POP
63524: POP
63525: GO 63438
63527: POP
63528: POP
// end ; if not mc_repair_vehicle [ i ] then
63529: LD_EXP 69
63533: PUSH
63534: LD_VAR 0 2
63538: ARRAY
63539: NOT
63540: IFFALSE 63544
// continue ;
63542: GO 63036
// for j in mc_repair_vehicle [ i ] do
63544: LD_ADDR_VAR 0 3
63548: PUSH
63549: LD_EXP 69
63553: PUSH
63554: LD_VAR 0 2
63558: ARRAY
63559: PUSH
63560: FOR_IN
63561: IFFALSE 63673
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
63563: LD_VAR 0 3
63567: PPUSH
63568: CALL_OW 311
63572: NOT
63573: PUSH
63574: LD_VAR 0 3
63578: PUSH
63579: LD_EXP 60
63583: PUSH
63584: LD_VAR 0 2
63588: ARRAY
63589: PUSH
63590: LD_INT 1
63592: ARRAY
63593: IN
63594: NOT
63595: AND
63596: PUSH
63597: LD_VAR 0 3
63601: PUSH
63602: LD_EXP 60
63606: PUSH
63607: LD_VAR 0 2
63611: ARRAY
63612: PUSH
63613: LD_INT 2
63615: ARRAY
63616: IN
63617: NOT
63618: AND
63619: IFFALSE 63671
// begin if IsInUnit ( j ) then
63621: LD_VAR 0 3
63625: PPUSH
63626: CALL_OW 310
63630: IFFALSE 63641
// ComExitBuilding ( j ) ;
63632: LD_VAR 0 3
63636: PPUSH
63637: CALL_OW 122
// if not HasTask ( j ) then
63641: LD_VAR 0 3
63645: PPUSH
63646: CALL_OW 314
63650: NOT
63651: IFFALSE 63671
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
63653: LD_VAR 0 3
63657: PPUSH
63658: LD_VAR 0 7
63662: PUSH
63663: LD_INT 1
63665: ARRAY
63666: PPUSH
63667: CALL_OW 189
// end ; end ;
63671: GO 63560
63673: POP
63674: POP
// end ;
63675: GO 63036
63677: POP
63678: POP
// end ;
63679: LD_VAR 0 1
63683: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
63684: LD_INT 0
63686: PPUSH
63687: PPUSH
63688: PPUSH
63689: PPUSH
63690: PPUSH
63691: PPUSH
63692: PPUSH
63693: PPUSH
63694: PPUSH
63695: PPUSH
63696: PPUSH
// if not mc_bases then
63697: LD_EXP 57
63701: NOT
63702: IFFALSE 63706
// exit ;
63704: GO 64442
// for i = 1 to mc_bases do
63706: LD_ADDR_VAR 0 2
63710: PUSH
63711: DOUBLE
63712: LD_INT 1
63714: DEC
63715: ST_TO_ADDR
63716: LD_EXP 57
63720: PUSH
63721: FOR_TO
63722: IFFALSE 64440
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
63724: LD_EXP 85
63728: PUSH
63729: LD_VAR 0 2
63733: ARRAY
63734: NOT
63735: PUSH
63736: LD_EXP 60
63740: PUSH
63741: LD_VAR 0 2
63745: ARRAY
63746: PUSH
63747: LD_INT 1
63749: ARRAY
63750: OR
63751: PUSH
63752: LD_EXP 60
63756: PUSH
63757: LD_VAR 0 2
63761: ARRAY
63762: PUSH
63763: LD_INT 2
63765: ARRAY
63766: OR
63767: PUSH
63768: LD_EXP 83
63772: PUSH
63773: LD_VAR 0 2
63777: ARRAY
63778: PPUSH
63779: LD_INT 1
63781: PPUSH
63782: CALL_OW 325
63786: NOT
63787: OR
63788: PUSH
63789: LD_EXP 80
63793: PUSH
63794: LD_VAR 0 2
63798: ARRAY
63799: OR
63800: IFFALSE 63804
// continue ;
63802: GO 63721
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
63804: LD_ADDR_VAR 0 8
63808: PUSH
63809: LD_EXP 57
63813: PUSH
63814: LD_VAR 0 2
63818: ARRAY
63819: PPUSH
63820: LD_INT 25
63822: PUSH
63823: LD_INT 4
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 50
63832: PUSH
63833: EMPTY
63834: LIST
63835: PUSH
63836: LD_INT 3
63838: PUSH
63839: LD_INT 60
63841: PUSH
63842: EMPTY
63843: LIST
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: LIST
63853: PPUSH
63854: CALL_OW 72
63858: PUSH
63859: LD_EXP 61
63863: PUSH
63864: LD_VAR 0 2
63868: ARRAY
63869: DIFF
63870: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63871: LD_ADDR_VAR 0 9
63875: PUSH
63876: LD_EXP 57
63880: PUSH
63881: LD_VAR 0 2
63885: ARRAY
63886: PPUSH
63887: LD_INT 2
63889: PUSH
63890: LD_INT 30
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 30
63902: PUSH
63903: LD_INT 1
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: LIST
63914: PPUSH
63915: CALL_OW 72
63919: ST_TO_ADDR
// if not tmp or not dep then
63920: LD_VAR 0 8
63924: NOT
63925: PUSH
63926: LD_VAR 0 9
63930: NOT
63931: OR
63932: IFFALSE 63936
// continue ;
63934: GO 63721
// side := GetSide ( tmp [ 1 ] ) ;
63936: LD_ADDR_VAR 0 11
63940: PUSH
63941: LD_VAR 0 8
63945: PUSH
63946: LD_INT 1
63948: ARRAY
63949: PPUSH
63950: CALL_OW 255
63954: ST_TO_ADDR
// dep := dep [ 1 ] ;
63955: LD_ADDR_VAR 0 9
63959: PUSH
63960: LD_VAR 0 9
63964: PUSH
63965: LD_INT 1
63967: ARRAY
63968: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
63969: LD_ADDR_VAR 0 7
63973: PUSH
63974: LD_EXP 85
63978: PUSH
63979: LD_VAR 0 2
63983: ARRAY
63984: PPUSH
63985: LD_INT 22
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 25
63997: PUSH
63998: LD_INT 12
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PPUSH
64009: CALL_OW 70
64013: PUSH
64014: LD_INT 22
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 25
64026: PUSH
64027: LD_INT 12
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 91
64036: PUSH
64037: LD_VAR 0 9
64041: PUSH
64042: LD_INT 20
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: LIST
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: LIST
64054: PPUSH
64055: CALL_OW 69
64059: UNION
64060: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
64061: LD_ADDR_VAR 0 10
64065: PUSH
64066: LD_EXP 85
64070: PUSH
64071: LD_VAR 0 2
64075: ARRAY
64076: PPUSH
64077: LD_INT 81
64079: PUSH
64080: LD_VAR 0 11
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PPUSH
64089: CALL_OW 70
64093: ST_TO_ADDR
// if not apes or danger_at_area then
64094: LD_VAR 0 7
64098: NOT
64099: PUSH
64100: LD_VAR 0 10
64104: OR
64105: IFFALSE 64155
// begin if mc_taming [ i ] then
64107: LD_EXP 88
64111: PUSH
64112: LD_VAR 0 2
64116: ARRAY
64117: IFFALSE 64153
// begin MC_Reset ( i , 121 ) ;
64119: LD_VAR 0 2
64123: PPUSH
64124: LD_INT 121
64126: PPUSH
64127: CALL 54972 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
64131: LD_ADDR_EXP 88
64135: PUSH
64136: LD_EXP 88
64140: PPUSH
64141: LD_VAR 0 2
64145: PPUSH
64146: EMPTY
64147: PPUSH
64148: CALL_OW 1
64152: ST_TO_ADDR
// end ; continue ;
64153: GO 63721
// end ; for j in tmp do
64155: LD_ADDR_VAR 0 3
64159: PUSH
64160: LD_VAR 0 8
64164: PUSH
64165: FOR_IN
64166: IFFALSE 64436
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
64168: LD_VAR 0 3
64172: PUSH
64173: LD_EXP 88
64177: PUSH
64178: LD_VAR 0 2
64182: ARRAY
64183: IN
64184: NOT
64185: PUSH
64186: LD_EXP 88
64190: PUSH
64191: LD_VAR 0 2
64195: ARRAY
64196: PUSH
64197: LD_INT 3
64199: LESS
64200: AND
64201: IFFALSE 64259
// begin SetTag ( j , 121 ) ;
64203: LD_VAR 0 3
64207: PPUSH
64208: LD_INT 121
64210: PPUSH
64211: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
64215: LD_ADDR_EXP 88
64219: PUSH
64220: LD_EXP 88
64224: PPUSH
64225: LD_VAR 0 2
64229: PUSH
64230: LD_EXP 88
64234: PUSH
64235: LD_VAR 0 2
64239: ARRAY
64240: PUSH
64241: LD_INT 1
64243: PLUS
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PPUSH
64249: LD_VAR 0 3
64253: PPUSH
64254: CALL 20104 0 3
64258: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
64259: LD_VAR 0 3
64263: PUSH
64264: LD_EXP 88
64268: PUSH
64269: LD_VAR 0 2
64273: ARRAY
64274: IN
64275: IFFALSE 64434
// begin if IsInUnit ( j ) then
64277: LD_VAR 0 3
64281: PPUSH
64282: CALL_OW 310
64286: IFFALSE 64297
// ComExitBuilding ( j ) ;
64288: LD_VAR 0 3
64292: PPUSH
64293: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
64297: LD_ADDR_VAR 0 6
64301: PUSH
64302: LD_VAR 0 7
64306: PPUSH
64307: LD_VAR 0 3
64311: PPUSH
64312: CALL_OW 74
64316: ST_TO_ADDR
// if not ape then
64317: LD_VAR 0 6
64321: NOT
64322: IFFALSE 64326
// break ;
64324: GO 64436
// x := GetX ( ape ) ;
64326: LD_ADDR_VAR 0 4
64330: PUSH
64331: LD_VAR 0 6
64335: PPUSH
64336: CALL_OW 250
64340: ST_TO_ADDR
// y := GetY ( ape ) ;
64341: LD_ADDR_VAR 0 5
64345: PUSH
64346: LD_VAR 0 6
64350: PPUSH
64351: CALL_OW 251
64355: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
64356: LD_VAR 0 4
64360: PPUSH
64361: LD_VAR 0 5
64365: PPUSH
64366: CALL_OW 488
64370: NOT
64371: PUSH
64372: LD_VAR 0 11
64376: PPUSH
64377: LD_VAR 0 4
64381: PPUSH
64382: LD_VAR 0 5
64386: PPUSH
64387: LD_INT 20
64389: PPUSH
64390: CALL 20598 0 4
64394: PUSH
64395: LD_INT 4
64397: ARRAY
64398: OR
64399: IFFALSE 64403
// break ;
64401: GO 64436
// if not HasTask ( j ) then
64403: LD_VAR 0 3
64407: PPUSH
64408: CALL_OW 314
64412: NOT
64413: IFFALSE 64434
// ComTameXY ( j , x , y ) ;
64415: LD_VAR 0 3
64419: PPUSH
64420: LD_VAR 0 4
64424: PPUSH
64425: LD_VAR 0 5
64429: PPUSH
64430: CALL_OW 131
// end ; end ;
64434: GO 64165
64436: POP
64437: POP
// end ;
64438: GO 63721
64440: POP
64441: POP
// end ;
64442: LD_VAR 0 1
64446: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
64447: LD_INT 0
64449: PPUSH
64450: PPUSH
64451: PPUSH
64452: PPUSH
64453: PPUSH
64454: PPUSH
64455: PPUSH
64456: PPUSH
// if not mc_bases then
64457: LD_EXP 57
64461: NOT
64462: IFFALSE 64466
// exit ;
64464: GO 65076
// for i = 1 to mc_bases do
64466: LD_ADDR_VAR 0 2
64470: PUSH
64471: DOUBLE
64472: LD_INT 1
64474: DEC
64475: ST_TO_ADDR
64476: LD_EXP 57
64480: PUSH
64481: FOR_TO
64482: IFFALSE 65074
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
64484: LD_EXP 86
64488: PUSH
64489: LD_VAR 0 2
64493: ARRAY
64494: NOT
64495: PUSH
64496: LD_EXP 86
64500: PUSH
64501: LD_VAR 0 2
64505: ARRAY
64506: PPUSH
64507: LD_INT 25
64509: PUSH
64510: LD_INT 12
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PPUSH
64517: CALL_OW 72
64521: NOT
64522: OR
64523: IFFALSE 64527
// continue ;
64525: GO 64481
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
64527: LD_ADDR_VAR 0 5
64531: PUSH
64532: LD_EXP 86
64536: PUSH
64537: LD_VAR 0 2
64541: ARRAY
64542: PUSH
64543: LD_INT 1
64545: ARRAY
64546: PPUSH
64547: CALL_OW 255
64551: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
64552: LD_VAR 0 5
64556: PPUSH
64557: LD_INT 2
64559: PPUSH
64560: CALL_OW 325
64564: IFFALSE 64809
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
64566: LD_ADDR_VAR 0 4
64570: PUSH
64571: LD_EXP 86
64575: PUSH
64576: LD_VAR 0 2
64580: ARRAY
64581: PPUSH
64582: LD_INT 25
64584: PUSH
64585: LD_INT 16
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PPUSH
64592: CALL_OW 72
64596: ST_TO_ADDR
// if tmp < 6 then
64597: LD_VAR 0 4
64601: PUSH
64602: LD_INT 6
64604: LESS
64605: IFFALSE 64809
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64607: LD_ADDR_VAR 0 6
64611: PUSH
64612: LD_EXP 57
64616: PUSH
64617: LD_VAR 0 2
64621: ARRAY
64622: PPUSH
64623: LD_INT 2
64625: PUSH
64626: LD_INT 30
64628: PUSH
64629: LD_INT 0
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 30
64638: PUSH
64639: LD_INT 1
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: LIST
64650: PPUSH
64651: CALL_OW 72
64655: ST_TO_ADDR
// if depot then
64656: LD_VAR 0 6
64660: IFFALSE 64809
// begin for j in depot do
64662: LD_ADDR_VAR 0 3
64666: PUSH
64667: LD_VAR 0 6
64671: PUSH
64672: FOR_IN
64673: IFFALSE 64704
// begin if UnitsInside ( j ) < 6 then
64675: LD_VAR 0 3
64679: PPUSH
64680: CALL_OW 313
64684: PUSH
64685: LD_INT 6
64687: LESS
64688: IFFALSE 64702
// begin selected := j ;
64690: LD_ADDR_VAR 0 7
64694: PUSH
64695: LD_VAR 0 3
64699: ST_TO_ADDR
// break ;
64700: GO 64704
// end ; end ;
64702: GO 64672
64704: POP
64705: POP
// if selected then
64706: LD_VAR 0 7
64710: IFFALSE 64809
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
64712: LD_ADDR_VAR 0 3
64716: PUSH
64717: LD_EXP 86
64721: PUSH
64722: LD_VAR 0 2
64726: ARRAY
64727: PPUSH
64728: LD_INT 25
64730: PUSH
64731: LD_INT 12
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PPUSH
64738: CALL_OW 72
64742: PUSH
64743: FOR_IN
64744: IFFALSE 64807
// if not HasTask ( j ) then
64746: LD_VAR 0 3
64750: PPUSH
64751: CALL_OW 314
64755: NOT
64756: IFFALSE 64805
// begin if not IsInUnit ( j ) then
64758: LD_VAR 0 3
64762: PPUSH
64763: CALL_OW 310
64767: NOT
64768: IFFALSE 64784
// ComEnterUnit ( j , selected ) ;
64770: LD_VAR 0 3
64774: PPUSH
64775: LD_VAR 0 7
64779: PPUSH
64780: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
64784: LD_VAR 0 3
64788: PPUSH
64789: LD_INT 16
64791: PPUSH
64792: CALL_OW 183
// AddComExitBuilding ( j ) ;
64796: LD_VAR 0 3
64800: PPUSH
64801: CALL_OW 182
// end ;
64805: GO 64743
64807: POP
64808: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
64809: LD_VAR 0 5
64813: PPUSH
64814: LD_INT 11
64816: PPUSH
64817: CALL_OW 325
64821: IFFALSE 65072
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
64823: LD_ADDR_VAR 0 4
64827: PUSH
64828: LD_EXP 86
64832: PUSH
64833: LD_VAR 0 2
64837: ARRAY
64838: PPUSH
64839: LD_INT 25
64841: PUSH
64842: LD_INT 16
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PPUSH
64849: CALL_OW 72
64853: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
64854: LD_VAR 0 4
64858: PUSH
64859: LD_INT 6
64861: GREATEREQUAL
64862: PUSH
64863: LD_VAR 0 5
64867: PPUSH
64868: LD_INT 2
64870: PPUSH
64871: CALL_OW 325
64875: NOT
64876: OR
64877: IFFALSE 65072
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
64879: LD_ADDR_VAR 0 8
64883: PUSH
64884: LD_EXP 57
64888: PUSH
64889: LD_VAR 0 2
64893: ARRAY
64894: PPUSH
64895: LD_INT 2
64897: PUSH
64898: LD_INT 30
64900: PUSH
64901: LD_INT 4
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 30
64910: PUSH
64911: LD_INT 5
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: LIST
64922: PPUSH
64923: CALL_OW 72
64927: ST_TO_ADDR
// if barracks then
64928: LD_VAR 0 8
64932: IFFALSE 65072
// begin for j in barracks do
64934: LD_ADDR_VAR 0 3
64938: PUSH
64939: LD_VAR 0 8
64943: PUSH
64944: FOR_IN
64945: IFFALSE 64976
// begin if UnitsInside ( j ) < 6 then
64947: LD_VAR 0 3
64951: PPUSH
64952: CALL_OW 313
64956: PUSH
64957: LD_INT 6
64959: LESS
64960: IFFALSE 64974
// begin selected := j ;
64962: LD_ADDR_VAR 0 7
64966: PUSH
64967: LD_VAR 0 3
64971: ST_TO_ADDR
// break ;
64972: GO 64976
// end ; end ;
64974: GO 64944
64976: POP
64977: POP
// if selected then
64978: LD_VAR 0 7
64982: IFFALSE 65072
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
64984: LD_ADDR_VAR 0 3
64988: PUSH
64989: LD_EXP 86
64993: PUSH
64994: LD_VAR 0 2
64998: ARRAY
64999: PPUSH
65000: LD_INT 25
65002: PUSH
65003: LD_INT 12
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PPUSH
65010: CALL_OW 72
65014: PUSH
65015: FOR_IN
65016: IFFALSE 65070
// if not IsInUnit ( j ) and not HasTask ( j ) then
65018: LD_VAR 0 3
65022: PPUSH
65023: CALL_OW 310
65027: NOT
65028: PUSH
65029: LD_VAR 0 3
65033: PPUSH
65034: CALL_OW 314
65038: NOT
65039: AND
65040: IFFALSE 65068
// begin ComEnterUnit ( j , selected ) ;
65042: LD_VAR 0 3
65046: PPUSH
65047: LD_VAR 0 7
65051: PPUSH
65052: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
65056: LD_VAR 0 3
65060: PPUSH
65061: LD_INT 15
65063: PPUSH
65064: CALL_OW 183
// end ;
65068: GO 65015
65070: POP
65071: POP
// end ; end ; end ; end ; end ;
65072: GO 64481
65074: POP
65075: POP
// end ;
65076: LD_VAR 0 1
65080: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
65081: LD_INT 0
65083: PPUSH
65084: PPUSH
65085: PPUSH
65086: PPUSH
// if not mc_bases then
65087: LD_EXP 57
65091: NOT
65092: IFFALSE 65096
// exit ;
65094: GO 65274
// for i = 1 to mc_bases do
65096: LD_ADDR_VAR 0 2
65100: PUSH
65101: DOUBLE
65102: LD_INT 1
65104: DEC
65105: ST_TO_ADDR
65106: LD_EXP 57
65110: PUSH
65111: FOR_TO
65112: IFFALSE 65272
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
65114: LD_ADDR_VAR 0 4
65118: PUSH
65119: LD_EXP 57
65123: PUSH
65124: LD_VAR 0 2
65128: ARRAY
65129: PPUSH
65130: LD_INT 25
65132: PUSH
65133: LD_INT 9
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PPUSH
65140: CALL_OW 72
65144: ST_TO_ADDR
// if not tmp then
65145: LD_VAR 0 4
65149: NOT
65150: IFFALSE 65154
// continue ;
65152: GO 65111
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
65154: LD_EXP 83
65158: PUSH
65159: LD_VAR 0 2
65163: ARRAY
65164: PPUSH
65165: LD_INT 29
65167: PPUSH
65168: CALL_OW 325
65172: NOT
65173: PUSH
65174: LD_EXP 83
65178: PUSH
65179: LD_VAR 0 2
65183: ARRAY
65184: PPUSH
65185: LD_INT 28
65187: PPUSH
65188: CALL_OW 325
65192: NOT
65193: AND
65194: IFFALSE 65198
// continue ;
65196: GO 65111
// for j in tmp do
65198: LD_ADDR_VAR 0 3
65202: PUSH
65203: LD_VAR 0 4
65207: PUSH
65208: FOR_IN
65209: IFFALSE 65268
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
65211: LD_VAR 0 3
65215: PUSH
65216: LD_EXP 60
65220: PUSH
65221: LD_VAR 0 2
65225: ARRAY
65226: PUSH
65227: LD_INT 1
65229: ARRAY
65230: IN
65231: NOT
65232: PUSH
65233: LD_VAR 0 3
65237: PUSH
65238: LD_EXP 60
65242: PUSH
65243: LD_VAR 0 2
65247: ARRAY
65248: PUSH
65249: LD_INT 2
65251: ARRAY
65252: IN
65253: NOT
65254: AND
65255: IFFALSE 65266
// ComSpaceTimeShoot ( j ) ;
65257: LD_VAR 0 3
65261: PPUSH
65262: CALL 14266 0 1
65266: GO 65208
65268: POP
65269: POP
// end ;
65270: GO 65111
65272: POP
65273: POP
// end ;
65274: LD_VAR 0 1
65278: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
65279: LD_INT 0
65281: PPUSH
65282: PPUSH
65283: PPUSH
65284: PPUSH
// if not mc_bases then
65285: LD_EXP 57
65289: NOT
65290: IFFALSE 65294
// exit ;
65292: GO 65316
// for i = 1 to mc_bases do
65294: LD_ADDR_VAR 0 2
65298: PUSH
65299: DOUBLE
65300: LD_INT 1
65302: DEC
65303: ST_TO_ADDR
65304: LD_EXP 57
65308: PUSH
65309: FOR_TO
65310: IFFALSE 65314
// begin end ;
65312: GO 65309
65314: POP
65315: POP
// end ;
65316: LD_VAR 0 1
65320: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
65321: LD_INT 0
65323: PPUSH
65324: PPUSH
65325: PPUSH
// if not mc_bases then
65326: LD_EXP 57
65330: NOT
65331: IFFALSE 65335
// exit ;
65333: GO 65895
// for i = 1 to mc_bases do
65335: LD_ADDR_VAR 0 2
65339: PUSH
65340: DOUBLE
65341: LD_INT 1
65343: DEC
65344: ST_TO_ADDR
65345: LD_EXP 57
65349: PUSH
65350: FOR_TO
65351: IFFALSE 65893
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
65353: LD_ADDR_VAR 0 3
65357: PUSH
65358: LD_EXP 57
65362: PUSH
65363: LD_VAR 0 2
65367: ARRAY
65368: PPUSH
65369: LD_INT 25
65371: PUSH
65372: LD_INT 4
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PPUSH
65379: CALL_OW 72
65383: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] then
65384: LD_VAR 0 3
65388: NOT
65389: PUSH
65390: LD_EXP 93
65394: PUSH
65395: LD_VAR 0 2
65399: ARRAY
65400: NOT
65401: OR
65402: IFFALSE 65452
// begin if mc_deposits_finder [ i ] then
65404: LD_EXP 94
65408: PUSH
65409: LD_VAR 0 2
65413: ARRAY
65414: IFFALSE 65450
// begin MC_Reset ( i , 125 ) ;
65416: LD_VAR 0 2
65420: PPUSH
65421: LD_INT 125
65423: PPUSH
65424: CALL 54972 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65428: LD_ADDR_EXP 94
65432: PUSH
65433: LD_EXP 94
65437: PPUSH
65438: LD_VAR 0 2
65442: PPUSH
65443: EMPTY
65444: PPUSH
65445: CALL_OW 1
65449: ST_TO_ADDR
// end ; continue ;
65450: GO 65350
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
65452: LD_EXP 93
65456: PUSH
65457: LD_VAR 0 2
65461: ARRAY
65462: PUSH
65463: LD_INT 1
65465: ARRAY
65466: PUSH
65467: LD_INT 3
65469: ARRAY
65470: PUSH
65471: LD_INT 1
65473: EQUAL
65474: PUSH
65475: LD_INT 20
65477: PPUSH
65478: LD_EXP 83
65482: PUSH
65483: LD_VAR 0 2
65487: ARRAY
65488: PPUSH
65489: CALL_OW 321
65493: PUSH
65494: LD_INT 2
65496: NONEQUAL
65497: AND
65498: IFFALSE 65548
// begin if mc_deposits_finder [ i ] then
65500: LD_EXP 94
65504: PUSH
65505: LD_VAR 0 2
65509: ARRAY
65510: IFFALSE 65546
// begin MC_Reset ( i , 125 ) ;
65512: LD_VAR 0 2
65516: PPUSH
65517: LD_INT 125
65519: PPUSH
65520: CALL 54972 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65524: LD_ADDR_EXP 94
65528: PUSH
65529: LD_EXP 94
65533: PPUSH
65534: LD_VAR 0 2
65538: PPUSH
65539: EMPTY
65540: PPUSH
65541: CALL_OW 1
65545: ST_TO_ADDR
// end ; continue ;
65546: GO 65350
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
65548: LD_EXP 93
65552: PUSH
65553: LD_VAR 0 2
65557: ARRAY
65558: PUSH
65559: LD_INT 1
65561: ARRAY
65562: PUSH
65563: LD_INT 1
65565: ARRAY
65566: PPUSH
65567: LD_EXP 93
65571: PUSH
65572: LD_VAR 0 2
65576: ARRAY
65577: PUSH
65578: LD_INT 1
65580: ARRAY
65581: PUSH
65582: LD_INT 2
65584: ARRAY
65585: PPUSH
65586: LD_EXP 83
65590: PUSH
65591: LD_VAR 0 2
65595: ARRAY
65596: PPUSH
65597: CALL_OW 440
65601: IFFALSE 65644
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
65603: LD_ADDR_EXP 93
65607: PUSH
65608: LD_EXP 93
65612: PPUSH
65613: LD_VAR 0 2
65617: PPUSH
65618: LD_EXP 93
65622: PUSH
65623: LD_VAR 0 2
65627: ARRAY
65628: PPUSH
65629: LD_INT 1
65631: PPUSH
65632: CALL_OW 3
65636: PPUSH
65637: CALL_OW 1
65641: ST_TO_ADDR
65642: GO 65891
// begin if not mc_deposits_finder [ i ] then
65644: LD_EXP 94
65648: PUSH
65649: LD_VAR 0 2
65653: ARRAY
65654: NOT
65655: IFFALSE 65707
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
65657: LD_ADDR_EXP 94
65661: PUSH
65662: LD_EXP 94
65666: PPUSH
65667: LD_VAR 0 2
65671: PPUSH
65672: LD_VAR 0 3
65676: PUSH
65677: LD_INT 1
65679: ARRAY
65680: PUSH
65681: EMPTY
65682: LIST
65683: PPUSH
65684: CALL_OW 1
65688: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
65689: LD_VAR 0 3
65693: PUSH
65694: LD_INT 1
65696: ARRAY
65697: PPUSH
65698: LD_INT 125
65700: PPUSH
65701: CALL_OW 109
// end else
65705: GO 65891
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
65707: LD_EXP 94
65711: PUSH
65712: LD_VAR 0 2
65716: ARRAY
65717: PUSH
65718: LD_INT 1
65720: ARRAY
65721: PPUSH
65722: CALL_OW 310
65726: IFFALSE 65749
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
65728: LD_EXP 94
65732: PUSH
65733: LD_VAR 0 2
65737: ARRAY
65738: PUSH
65739: LD_INT 1
65741: ARRAY
65742: PPUSH
65743: CALL_OW 122
65747: GO 65891
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
65749: LD_EXP 94
65753: PUSH
65754: LD_VAR 0 2
65758: ARRAY
65759: PUSH
65760: LD_INT 1
65762: ARRAY
65763: PPUSH
65764: CALL_OW 314
65768: NOT
65769: PUSH
65770: LD_EXP 94
65774: PUSH
65775: LD_VAR 0 2
65779: ARRAY
65780: PUSH
65781: LD_INT 1
65783: ARRAY
65784: PPUSH
65785: LD_EXP 93
65789: PUSH
65790: LD_VAR 0 2
65794: ARRAY
65795: PUSH
65796: LD_INT 1
65798: ARRAY
65799: PUSH
65800: LD_INT 1
65802: ARRAY
65803: PPUSH
65804: LD_EXP 93
65808: PUSH
65809: LD_VAR 0 2
65813: ARRAY
65814: PUSH
65815: LD_INT 1
65817: ARRAY
65818: PUSH
65819: LD_INT 2
65821: ARRAY
65822: PPUSH
65823: CALL_OW 297
65827: PUSH
65828: LD_INT 6
65830: GREATER
65831: AND
65832: IFFALSE 65891
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
65834: LD_EXP 94
65838: PUSH
65839: LD_VAR 0 2
65843: ARRAY
65844: PUSH
65845: LD_INT 1
65847: ARRAY
65848: PPUSH
65849: LD_EXP 93
65853: PUSH
65854: LD_VAR 0 2
65858: ARRAY
65859: PUSH
65860: LD_INT 1
65862: ARRAY
65863: PUSH
65864: LD_INT 1
65866: ARRAY
65867: PPUSH
65868: LD_EXP 93
65872: PUSH
65873: LD_VAR 0 2
65877: ARRAY
65878: PUSH
65879: LD_INT 1
65881: ARRAY
65882: PUSH
65883: LD_INT 2
65885: ARRAY
65886: PPUSH
65887: CALL_OW 111
// end ; end ; end ;
65891: GO 65350
65893: POP
65894: POP
// end ;
65895: LD_VAR 0 1
65899: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts ; begin
65900: LD_INT 0
65902: PPUSH
65903: PPUSH
65904: PPUSH
65905: PPUSH
65906: PPUSH
65907: PPUSH
65908: PPUSH
65909: PPUSH
65910: PPUSH
// if not mc_bases then
65911: LD_EXP 57
65915: NOT
65916: IFFALSE 65920
// exit ;
65918: GO 66418
// for i = 1 to mc_bases do
65920: LD_ADDR_VAR 0 2
65924: PUSH
65925: DOUBLE
65926: LD_INT 1
65928: DEC
65929: ST_TO_ADDR
65930: LD_EXP 57
65934: PUSH
65935: FOR_TO
65936: IFFALSE 66416
// begin if not mc_bases [ i ] then
65938: LD_EXP 57
65942: PUSH
65943: LD_VAR 0 2
65947: ARRAY
65948: NOT
65949: IFFALSE 65953
// continue ;
65951: GO 65935
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
65953: LD_ADDR_VAR 0 7
65957: PUSH
65958: LD_EXP 57
65962: PUSH
65963: LD_VAR 0 2
65967: ARRAY
65968: PUSH
65969: LD_INT 1
65971: ARRAY
65972: PPUSH
65973: CALL_OW 248
65977: ST_TO_ADDR
// if nation <> 1 or not UnitFilter ( ( mc_vehicles [ i ] union mc_defender [ i ] ) , [ f_control , control_remote ] ) then
65978: LD_VAR 0 7
65982: PUSH
65983: LD_INT 1
65985: NONEQUAL
65986: PUSH
65987: LD_EXP 76
65991: PUSH
65992: LD_VAR 0 2
65996: ARRAY
65997: PUSH
65998: LD_EXP 79
66002: PUSH
66003: LD_VAR 0 2
66007: ARRAY
66008: UNION
66009: PPUSH
66010: LD_INT 33
66012: PUSH
66013: LD_INT 2
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PPUSH
66020: CALL_OW 72
66024: NOT
66025: OR
66026: IFFALSE 66030
// continue ;
66028: GO 65935
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
66030: LD_ADDR_VAR 0 9
66034: PUSH
66035: LD_EXP 57
66039: PUSH
66040: LD_VAR 0 2
66044: ARRAY
66045: PPUSH
66046: LD_INT 30
66048: PUSH
66049: LD_INT 36
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PPUSH
66056: CALL_OW 72
66060: ST_TO_ADDR
// if not cts then
66061: LD_VAR 0 9
66065: NOT
66066: IFFALSE 66070
// continue ;
66068: GO 65935
// if mc_remote_driver [ i ] then
66070: LD_EXP 96
66074: PUSH
66075: LD_VAR 0 2
66079: ARRAY
66080: IFFALSE 66229
// for j in mc_remote_driver [ i ] do
66082: LD_ADDR_VAR 0 3
66086: PUSH
66087: LD_EXP 96
66091: PUSH
66092: LD_VAR 0 2
66096: ARRAY
66097: PUSH
66098: FOR_IN
66099: IFFALSE 66227
// if not IsInUnit ( j ) or GetBType ( IsInUnit ( j ) ) <> b_control_tower then
66101: LD_VAR 0 3
66105: PPUSH
66106: CALL_OW 310
66110: NOT
66111: PUSH
66112: LD_VAR 0 3
66116: PPUSH
66117: CALL_OW 310
66121: PPUSH
66122: CALL_OW 266
66126: PUSH
66127: LD_INT 36
66129: NONEQUAL
66130: OR
66131: IFFALSE 66225
// begin if IsInUnit ( j ) then
66133: LD_VAR 0 3
66137: PPUSH
66138: CALL_OW 310
66142: IFFALSE 66153
// ComExitBuilding ( j ) ;
66144: LD_VAR 0 3
66148: PPUSH
66149: CALL_OW 122
// ct := 0 ;
66153: LD_ADDR_VAR 0 8
66157: PUSH
66158: LD_INT 0
66160: ST_TO_ADDR
// for k in cts do
66161: LD_ADDR_VAR 0 4
66165: PUSH
66166: LD_VAR 0 9
66170: PUSH
66171: FOR_IN
66172: IFFALSE 66203
// if UnitsInside ( k ) < 3 then
66174: LD_VAR 0 4
66178: PPUSH
66179: CALL_OW 313
66183: PUSH
66184: LD_INT 3
66186: LESS
66187: IFFALSE 66201
// begin ct := k ;
66189: LD_ADDR_VAR 0 8
66193: PUSH
66194: LD_VAR 0 4
66198: ST_TO_ADDR
// break ;
66199: GO 66203
// end ;
66201: GO 66171
66203: POP
66204: POP
// if ct then
66205: LD_VAR 0 8
66209: IFFALSE 66225
// AddComEnterUnit ( j , ct ) ;
66211: LD_VAR 0 3
66215: PPUSH
66216: LD_VAR 0 8
66220: PPUSH
66221: CALL_OW 180
// end ;
66225: GO 66098
66227: POP
66228: POP
// places := 0 ;
66229: LD_ADDR_VAR 0 5
66233: PUSH
66234: LD_INT 0
66236: ST_TO_ADDR
// for j = 1 to cts do
66237: LD_ADDR_VAR 0 3
66241: PUSH
66242: DOUBLE
66243: LD_INT 1
66245: DEC
66246: ST_TO_ADDR
66247: LD_VAR 0 9
66251: PUSH
66252: FOR_TO
66253: IFFALSE 66271
// places := places + 3 ;
66255: LD_ADDR_VAR 0 5
66259: PUSH
66260: LD_VAR 0 5
66264: PUSH
66265: LD_INT 3
66267: PLUS
66268: ST_TO_ADDR
66269: GO 66252
66271: POP
66272: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] ;
66273: LD_ADDR_VAR 0 6
66277: PUSH
66278: LD_EXP 57
66282: PUSH
66283: LD_VAR 0 2
66287: ARRAY
66288: PPUSH
66289: LD_INT 25
66291: PUSH
66292: LD_INT 3
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PPUSH
66299: CALL_OW 72
66303: PUSH
66304: LD_EXP 96
66308: PUSH
66309: LD_VAR 0 2
66313: ARRAY
66314: DIFF
66315: ST_TO_ADDR
// if not tmp then
66316: LD_VAR 0 6
66320: NOT
66321: IFFALSE 66325
// continue ;
66323: GO 65935
// places := places - ( mc_remote_driver [ i ] + 1 ) ;
66325: LD_ADDR_VAR 0 5
66329: PUSH
66330: LD_VAR 0 5
66334: PUSH
66335: LD_EXP 96
66339: PUSH
66340: LD_VAR 0 2
66344: ARRAY
66345: PUSH
66346: LD_INT 1
66348: PLUS
66349: MINUS
66350: ST_TO_ADDR
// if places then
66351: LD_VAR 0 5
66355: IFFALSE 66414
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
66357: LD_ADDR_EXP 96
66361: PUSH
66362: LD_EXP 96
66366: PPUSH
66367: LD_VAR 0 2
66371: PPUSH
66372: LD_EXP 96
66376: PUSH
66377: LD_VAR 0 2
66381: ARRAY
66382: PUSH
66383: LD_VAR 0 6
66387: PUSH
66388: LD_INT 1
66390: ARRAY
66391: UNION
66392: PPUSH
66393: CALL_OW 1
66397: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
66398: LD_VAR 0 6
66402: PUSH
66403: LD_INT 1
66405: ARRAY
66406: PPUSH
66407: LD_INT 126
66409: PPUSH
66410: CALL_OW 109
// end ; end ;
66414: GO 65935
66416: POP
66417: POP
// end ;
66418: LD_VAR 0 1
66422: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
66423: LD_INT 0
66425: PPUSH
66426: PPUSH
66427: PPUSH
66428: PPUSH
66429: PPUSH
66430: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
66431: LD_VAR 0 1
66435: NOT
66436: PUSH
66437: LD_VAR 0 2
66441: NOT
66442: OR
66443: PUSH
66444: LD_VAR 0 3
66448: NOT
66449: OR
66450: PUSH
66451: LD_VAR 0 4
66455: PUSH
66456: LD_INT 1
66458: PUSH
66459: LD_INT 2
66461: PUSH
66462: LD_INT 3
66464: PUSH
66465: LD_INT 4
66467: PUSH
66468: LD_INT 5
66470: PUSH
66471: LD_INT 8
66473: PUSH
66474: LD_INT 9
66476: PUSH
66477: LD_INT 15
66479: PUSH
66480: LD_INT 16
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: IN
66494: NOT
66495: OR
66496: IFFALSE 66500
// exit ;
66498: GO 67400
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
66500: LD_ADDR_VAR 0 2
66504: PUSH
66505: LD_VAR 0 2
66509: PPUSH
66510: LD_INT 21
66512: PUSH
66513: LD_INT 3
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 24
66522: PUSH
66523: LD_INT 250
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PPUSH
66534: CALL_OW 72
66538: ST_TO_ADDR
// case class of 1 , 15 :
66539: LD_VAR 0 4
66543: PUSH
66544: LD_INT 1
66546: DOUBLE
66547: EQUAL
66548: IFTRUE 66558
66550: LD_INT 15
66552: DOUBLE
66553: EQUAL
66554: IFTRUE 66558
66556: GO 66643
66558: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
66559: LD_ADDR_VAR 0 8
66563: PUSH
66564: LD_VAR 0 2
66568: PPUSH
66569: LD_INT 2
66571: PUSH
66572: LD_INT 30
66574: PUSH
66575: LD_INT 32
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 30
66584: PUSH
66585: LD_INT 31
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: LIST
66596: PPUSH
66597: CALL_OW 72
66601: PUSH
66602: LD_VAR 0 2
66606: PPUSH
66607: LD_INT 2
66609: PUSH
66610: LD_INT 30
66612: PUSH
66613: LD_INT 4
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 30
66622: PUSH
66623: LD_INT 5
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: LIST
66634: PPUSH
66635: CALL_OW 72
66639: ADD
66640: ST_TO_ADDR
66641: GO 66889
66643: LD_INT 2
66645: DOUBLE
66646: EQUAL
66647: IFTRUE 66657
66649: LD_INT 16
66651: DOUBLE
66652: EQUAL
66653: IFTRUE 66657
66655: GO 66703
66657: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
66658: LD_ADDR_VAR 0 8
66662: PUSH
66663: LD_VAR 0 2
66667: PPUSH
66668: LD_INT 2
66670: PUSH
66671: LD_INT 30
66673: PUSH
66674: LD_INT 0
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 30
66683: PUSH
66684: LD_INT 1
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: LIST
66695: PPUSH
66696: CALL_OW 72
66700: ST_TO_ADDR
66701: GO 66889
66703: LD_INT 3
66705: DOUBLE
66706: EQUAL
66707: IFTRUE 66711
66709: GO 66757
66711: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
66712: LD_ADDR_VAR 0 8
66716: PUSH
66717: LD_VAR 0 2
66721: PPUSH
66722: LD_INT 2
66724: PUSH
66725: LD_INT 30
66727: PUSH
66728: LD_INT 2
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 30
66737: PUSH
66738: LD_INT 3
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: LIST
66749: PPUSH
66750: CALL_OW 72
66754: ST_TO_ADDR
66755: GO 66889
66757: LD_INT 4
66759: DOUBLE
66760: EQUAL
66761: IFTRUE 66765
66763: GO 66822
66765: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
66766: LD_ADDR_VAR 0 8
66770: PUSH
66771: LD_VAR 0 2
66775: PPUSH
66776: LD_INT 2
66778: PUSH
66779: LD_INT 30
66781: PUSH
66782: LD_INT 6
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 30
66791: PUSH
66792: LD_INT 7
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 30
66801: PUSH
66802: LD_INT 8
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: PPUSH
66815: CALL_OW 72
66819: ST_TO_ADDR
66820: GO 66889
66822: LD_INT 5
66824: DOUBLE
66825: EQUAL
66826: IFTRUE 66842
66828: LD_INT 8
66830: DOUBLE
66831: EQUAL
66832: IFTRUE 66842
66834: LD_INT 9
66836: DOUBLE
66837: EQUAL
66838: IFTRUE 66842
66840: GO 66888
66842: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
66843: LD_ADDR_VAR 0 8
66847: PUSH
66848: LD_VAR 0 2
66852: PPUSH
66853: LD_INT 2
66855: PUSH
66856: LD_INT 30
66858: PUSH
66859: LD_INT 4
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 30
66868: PUSH
66869: LD_INT 5
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: LIST
66880: PPUSH
66881: CALL_OW 72
66885: ST_TO_ADDR
66886: GO 66889
66888: POP
// if not tmp then
66889: LD_VAR 0 8
66893: NOT
66894: IFFALSE 66898
// exit ;
66896: GO 67400
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
66898: LD_VAR 0 4
66902: PUSH
66903: LD_INT 1
66905: PUSH
66906: LD_INT 15
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: IN
66913: PUSH
66914: LD_EXP 66
66918: PUSH
66919: LD_VAR 0 1
66923: ARRAY
66924: AND
66925: IFFALSE 67081
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
66927: LD_ADDR_VAR 0 9
66931: PUSH
66932: LD_EXP 66
66936: PUSH
66937: LD_VAR 0 1
66941: ARRAY
66942: PUSH
66943: LD_INT 1
66945: ARRAY
66946: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
66947: LD_VAR 0 9
66951: PUSH
66952: LD_EXP 67
66956: PUSH
66957: LD_VAR 0 1
66961: ARRAY
66962: IN
66963: NOT
66964: IFFALSE 67079
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
66966: LD_ADDR_EXP 67
66970: PUSH
66971: LD_EXP 67
66975: PPUSH
66976: LD_VAR 0 1
66980: PUSH
66981: LD_EXP 67
66985: PUSH
66986: LD_VAR 0 1
66990: ARRAY
66991: PUSH
66992: LD_INT 1
66994: PLUS
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PPUSH
67000: LD_VAR 0 9
67004: PPUSH
67005: CALL 20104 0 3
67009: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
67010: LD_ADDR_EXP 66
67014: PUSH
67015: LD_EXP 66
67019: PPUSH
67020: LD_VAR 0 1
67024: PPUSH
67025: LD_EXP 66
67029: PUSH
67030: LD_VAR 0 1
67034: ARRAY
67035: PUSH
67036: LD_VAR 0 9
67040: DIFF
67041: PPUSH
67042: CALL_OW 1
67046: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
67047: LD_VAR 0 3
67051: PPUSH
67052: LD_EXP 67
67056: PUSH
67057: LD_VAR 0 1
67061: ARRAY
67062: PUSH
67063: LD_EXP 67
67067: PUSH
67068: LD_VAR 0 1
67072: ARRAY
67073: ARRAY
67074: PPUSH
67075: CALL_OW 120
// end ; exit ;
67079: GO 67400
// end ; if tmp > 1 then
67081: LD_VAR 0 8
67085: PUSH
67086: LD_INT 1
67088: GREATER
67089: IFFALSE 67193
// for i = 2 to tmp do
67091: LD_ADDR_VAR 0 6
67095: PUSH
67096: DOUBLE
67097: LD_INT 2
67099: DEC
67100: ST_TO_ADDR
67101: LD_VAR 0 8
67105: PUSH
67106: FOR_TO
67107: IFFALSE 67191
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
67109: LD_VAR 0 8
67113: PUSH
67114: LD_VAR 0 6
67118: ARRAY
67119: PPUSH
67120: CALL_OW 461
67124: PUSH
67125: LD_INT 6
67127: EQUAL
67128: IFFALSE 67189
// begin x := tmp [ i ] ;
67130: LD_ADDR_VAR 0 9
67134: PUSH
67135: LD_VAR 0 8
67139: PUSH
67140: LD_VAR 0 6
67144: ARRAY
67145: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
67146: LD_ADDR_VAR 0 8
67150: PUSH
67151: LD_VAR 0 8
67155: PPUSH
67156: LD_VAR 0 6
67160: PPUSH
67161: CALL_OW 3
67165: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
67166: LD_ADDR_VAR 0 8
67170: PUSH
67171: LD_VAR 0 8
67175: PPUSH
67176: LD_INT 1
67178: PPUSH
67179: LD_VAR 0 9
67183: PPUSH
67184: CALL_OW 2
67188: ST_TO_ADDR
// end ;
67189: GO 67106
67191: POP
67192: POP
// for i in tmp do
67193: LD_ADDR_VAR 0 6
67197: PUSH
67198: LD_VAR 0 8
67202: PUSH
67203: FOR_IN
67204: IFFALSE 67273
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
67206: LD_VAR 0 6
67210: PPUSH
67211: CALL_OW 313
67215: PUSH
67216: LD_INT 6
67218: LESS
67219: PUSH
67220: LD_VAR 0 6
67224: PPUSH
67225: CALL_OW 266
67229: PUSH
67230: LD_INT 31
67232: PUSH
67233: LD_INT 32
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: IN
67240: NOT
67241: AND
67242: PUSH
67243: LD_VAR 0 6
67247: PPUSH
67248: CALL_OW 313
67252: PUSH
67253: LD_INT 0
67255: EQUAL
67256: OR
67257: IFFALSE 67271
// begin j := i ;
67259: LD_ADDR_VAR 0 7
67263: PUSH
67264: LD_VAR 0 6
67268: ST_TO_ADDR
// break ;
67269: GO 67273
// end ; end ;
67271: GO 67203
67273: POP
67274: POP
// if j then
67275: LD_VAR 0 7
67279: IFFALSE 67297
// ComEnterUnit ( unit , j ) else
67281: LD_VAR 0 3
67285: PPUSH
67286: LD_VAR 0 7
67290: PPUSH
67291: CALL_OW 120
67295: GO 67400
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67297: LD_ADDR_VAR 0 10
67301: PUSH
67302: LD_VAR 0 2
67306: PPUSH
67307: LD_INT 2
67309: PUSH
67310: LD_INT 30
67312: PUSH
67313: LD_INT 0
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 30
67322: PUSH
67323: LD_INT 1
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: LIST
67334: PPUSH
67335: CALL_OW 72
67339: ST_TO_ADDR
// if depot then
67340: LD_VAR 0 10
67344: IFFALSE 67400
// begin depot := NearestUnitToUnit ( depot , unit ) ;
67346: LD_ADDR_VAR 0 10
67350: PUSH
67351: LD_VAR 0 10
67355: PPUSH
67356: LD_VAR 0 3
67360: PPUSH
67361: CALL_OW 74
67365: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
67366: LD_VAR 0 3
67370: PPUSH
67371: LD_VAR 0 10
67375: PPUSH
67376: CALL_OW 296
67380: PUSH
67381: LD_INT 10
67383: GREATER
67384: IFFALSE 67400
// ComStandNearbyBuilding ( unit , depot ) ;
67386: LD_VAR 0 3
67390: PPUSH
67391: LD_VAR 0 10
67395: PPUSH
67396: CALL 14883 0 2
// end ; end ; end ;
67400: LD_VAR 0 5
67404: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
67405: LD_INT 0
67407: PPUSH
67408: PPUSH
67409: PPUSH
67410: PPUSH
// if not mc_bases then
67411: LD_EXP 57
67415: NOT
67416: IFFALSE 67420
// exit ;
67418: GO 67659
// for i = 1 to mc_bases do
67420: LD_ADDR_VAR 0 2
67424: PUSH
67425: DOUBLE
67426: LD_INT 1
67428: DEC
67429: ST_TO_ADDR
67430: LD_EXP 57
67434: PUSH
67435: FOR_TO
67436: IFFALSE 67657
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
67438: LD_ADDR_VAR 0 4
67442: PUSH
67443: LD_EXP 57
67447: PUSH
67448: LD_VAR 0 2
67452: ARRAY
67453: PPUSH
67454: LD_INT 21
67456: PUSH
67457: LD_INT 1
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PPUSH
67464: CALL_OW 72
67468: PUSH
67469: LD_EXP 86
67473: PUSH
67474: LD_VAR 0 2
67478: ARRAY
67479: UNION
67480: ST_TO_ADDR
// if not tmp then
67481: LD_VAR 0 4
67485: NOT
67486: IFFALSE 67490
// continue ;
67488: GO 67435
// for j in tmp do
67490: LD_ADDR_VAR 0 3
67494: PUSH
67495: LD_VAR 0 4
67499: PUSH
67500: FOR_IN
67501: IFFALSE 67653
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
67503: LD_VAR 0 3
67507: PPUSH
67508: CALL_OW 110
67512: NOT
67513: PUSH
67514: LD_VAR 0 3
67518: PPUSH
67519: CALL_OW 314
67523: NOT
67524: AND
67525: PUSH
67526: LD_VAR 0 3
67530: PPUSH
67531: CALL_OW 311
67535: NOT
67536: AND
67537: PUSH
67538: LD_VAR 0 3
67542: PPUSH
67543: CALL_OW 310
67547: NOT
67548: AND
67549: PUSH
67550: LD_VAR 0 3
67554: PUSH
67555: LD_EXP 60
67559: PUSH
67560: LD_VAR 0 2
67564: ARRAY
67565: PUSH
67566: LD_INT 1
67568: ARRAY
67569: IN
67570: NOT
67571: AND
67572: PUSH
67573: LD_VAR 0 3
67577: PUSH
67578: LD_EXP 60
67582: PUSH
67583: LD_VAR 0 2
67587: ARRAY
67588: PUSH
67589: LD_INT 2
67591: ARRAY
67592: IN
67593: NOT
67594: AND
67595: PUSH
67596: LD_VAR 0 3
67600: PUSH
67601: LD_EXP 69
67605: PUSH
67606: LD_VAR 0 2
67610: ARRAY
67611: IN
67612: NOT
67613: AND
67614: IFFALSE 67651
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
67616: LD_VAR 0 2
67620: PPUSH
67621: LD_EXP 57
67625: PUSH
67626: LD_VAR 0 2
67630: ARRAY
67631: PPUSH
67632: LD_VAR 0 3
67636: PPUSH
67637: LD_VAR 0 3
67641: PPUSH
67642: CALL_OW 257
67646: PPUSH
67647: CALL 66423 0 4
// end ;
67651: GO 67500
67653: POP
67654: POP
// end ;
67655: GO 67435
67657: POP
67658: POP
// end ;
67659: LD_VAR 0 1
67663: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
67664: LD_INT 0
67666: PPUSH
67667: PPUSH
67668: PPUSH
67669: PPUSH
67670: PPUSH
67671: PPUSH
// if not mc_bases [ base ] then
67672: LD_EXP 57
67676: PUSH
67677: LD_VAR 0 1
67681: ARRAY
67682: NOT
67683: IFFALSE 67687
// exit ;
67685: GO 67869
// tmp := [ ] ;
67687: LD_ADDR_VAR 0 6
67691: PUSH
67692: EMPTY
67693: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
67694: LD_ADDR_VAR 0 7
67698: PUSH
67699: LD_VAR 0 3
67703: PPUSH
67704: LD_INT 0
67706: PPUSH
67707: CALL_OW 517
67711: ST_TO_ADDR
// if not list then
67712: LD_VAR 0 7
67716: NOT
67717: IFFALSE 67721
// exit ;
67719: GO 67869
// for i = 1 to amount do
67721: LD_ADDR_VAR 0 5
67725: PUSH
67726: DOUBLE
67727: LD_INT 1
67729: DEC
67730: ST_TO_ADDR
67731: LD_VAR 0 2
67735: PUSH
67736: FOR_TO
67737: IFFALSE 67817
// begin x := rand ( 1 , list [ 1 ] ) ;
67739: LD_ADDR_VAR 0 8
67743: PUSH
67744: LD_INT 1
67746: PPUSH
67747: LD_VAR 0 7
67751: PUSH
67752: LD_INT 1
67754: ARRAY
67755: PPUSH
67756: CALL_OW 12
67760: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
67761: LD_ADDR_VAR 0 6
67765: PUSH
67766: LD_VAR 0 6
67770: PPUSH
67771: LD_VAR 0 5
67775: PPUSH
67776: LD_VAR 0 7
67780: PUSH
67781: LD_INT 1
67783: ARRAY
67784: PUSH
67785: LD_VAR 0 8
67789: ARRAY
67790: PUSH
67791: LD_VAR 0 7
67795: PUSH
67796: LD_INT 2
67798: ARRAY
67799: PUSH
67800: LD_VAR 0 8
67804: ARRAY
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PPUSH
67810: CALL_OW 1
67814: ST_TO_ADDR
// end ;
67815: GO 67736
67817: POP
67818: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
67819: LD_ADDR_EXP 70
67823: PUSH
67824: LD_EXP 70
67828: PPUSH
67829: LD_VAR 0 1
67833: PPUSH
67834: LD_VAR 0 6
67838: PPUSH
67839: CALL_OW 1
67843: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
67844: LD_ADDR_EXP 72
67848: PUSH
67849: LD_EXP 72
67853: PPUSH
67854: LD_VAR 0 1
67858: PPUSH
67859: LD_VAR 0 3
67863: PPUSH
67864: CALL_OW 1
67868: ST_TO_ADDR
// end ;
67869: LD_VAR 0 4
67873: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
67874: LD_INT 0
67876: PPUSH
// if not mc_bases [ base ] then
67877: LD_EXP 57
67881: PUSH
67882: LD_VAR 0 1
67886: ARRAY
67887: NOT
67888: IFFALSE 67892
// exit ;
67890: GO 67917
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
67892: LD_ADDR_EXP 62
67896: PUSH
67897: LD_EXP 62
67901: PPUSH
67902: LD_VAR 0 1
67906: PPUSH
67907: LD_VAR 0 2
67911: PPUSH
67912: CALL_OW 1
67916: ST_TO_ADDR
// end ;
67917: LD_VAR 0 3
67921: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
67922: LD_INT 0
67924: PPUSH
// if not mc_bases [ base ] then
67925: LD_EXP 57
67929: PUSH
67930: LD_VAR 0 1
67934: ARRAY
67935: NOT
67936: IFFALSE 67940
// exit ;
67938: GO 67996
// mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , list ) ) ;
67940: LD_ADDR_EXP 62
67944: PUSH
67945: LD_EXP 62
67949: PPUSH
67950: LD_VAR 0 1
67954: PPUSH
67955: LD_EXP 62
67959: PUSH
67960: LD_VAR 0 1
67964: ARRAY
67965: PPUSH
67966: LD_EXP 62
67970: PUSH
67971: LD_VAR 0 1
67975: ARRAY
67976: PUSH
67977: LD_INT 1
67979: PLUS
67980: PPUSH
67981: LD_VAR 0 2
67985: PPUSH
67986: CALL_OW 2
67990: PPUSH
67991: CALL_OW 1
67995: ST_TO_ADDR
// end ;
67996: LD_VAR 0 3
68000: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
68001: LD_INT 0
68003: PPUSH
// if not mc_bases [ base ] then
68004: LD_EXP 57
68008: PUSH
68009: LD_VAR 0 1
68013: ARRAY
68014: NOT
68015: IFFALSE 68019
// exit ;
68017: GO 68044
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
68019: LD_ADDR_EXP 78
68023: PUSH
68024: LD_EXP 78
68028: PPUSH
68029: LD_VAR 0 1
68033: PPUSH
68034: LD_VAR 0 2
68038: PPUSH
68039: CALL_OW 1
68043: ST_TO_ADDR
// end ;
68044: LD_VAR 0 3
68048: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
68049: LD_INT 0
68051: PPUSH
// if not mc_bases [ base ] then
68052: LD_EXP 57
68056: PUSH
68057: LD_VAR 0 1
68061: ARRAY
68062: NOT
68063: IFFALSE 68067
// exit ;
68065: GO 68107
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
68067: LD_ADDR_EXP 78
68071: PUSH
68072: LD_EXP 78
68076: PPUSH
68077: LD_VAR 0 1
68081: PPUSH
68082: LD_EXP 78
68086: PUSH
68087: LD_VAR 0 1
68091: ARRAY
68092: PUSH
68093: LD_VAR 0 2
68097: PUSH
68098: EMPTY
68099: LIST
68100: ADD
68101: PPUSH
68102: CALL_OW 1
68106: ST_TO_ADDR
// end ;
68107: LD_VAR 0 3
68111: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
68112: LD_INT 0
68114: PPUSH
// if not mc_bases [ base ] then
68115: LD_EXP 57
68119: PUSH
68120: LD_VAR 0 1
68124: ARRAY
68125: NOT
68126: IFFALSE 68130
// exit ;
68128: GO 68242
// mc_defender := Replace ( mc_defender , base , deflist ) ;
68130: LD_ADDR_EXP 79
68134: PUSH
68135: LD_EXP 79
68139: PPUSH
68140: LD_VAR 0 1
68144: PPUSH
68145: LD_VAR 0 2
68149: PPUSH
68150: CALL_OW 1
68154: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
68155: LD_ADDR_EXP 68
68159: PUSH
68160: LD_EXP 68
68164: PPUSH
68165: LD_VAR 0 1
68169: PPUSH
68170: LD_VAR 0 2
68174: PUSH
68175: LD_INT 0
68177: PLUS
68178: PPUSH
68179: CALL_OW 1
68183: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
68184: LD_ADDR_EXP 76
68188: PUSH
68189: LD_EXP 76
68193: PPUSH
68194: LD_VAR 0 1
68198: PPUSH
68199: LD_EXP 76
68203: PUSH
68204: LD_VAR 0 1
68208: ARRAY
68209: PUSH
68210: LD_EXP 79
68214: PUSH
68215: LD_VAR 0 1
68219: ARRAY
68220: PPUSH
68221: LD_INT 21
68223: PUSH
68224: LD_INT 2
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PPUSH
68231: CALL_OW 72
68235: UNION
68236: PPUSH
68237: CALL_OW 1
68241: ST_TO_ADDR
// end ;
68242: LD_VAR 0 3
68246: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
68247: LD_INT 0
68249: PPUSH
// if not mc_bases [ base ] then
68250: LD_EXP 57
68254: PUSH
68255: LD_VAR 0 1
68259: ARRAY
68260: NOT
68261: IFFALSE 68265
// exit ;
68263: GO 68290
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
68265: LD_ADDR_EXP 68
68269: PUSH
68270: LD_EXP 68
68274: PPUSH
68275: LD_VAR 0 1
68279: PPUSH
68280: LD_VAR 0 2
68284: PPUSH
68285: CALL_OW 1
68289: ST_TO_ADDR
// end ;
68290: LD_VAR 0 3
68294: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
68295: LD_INT 0
68297: PPUSH
68298: PPUSH
68299: PPUSH
68300: PPUSH
// if not mc_bases [ base ] then
68301: LD_EXP 57
68305: PUSH
68306: LD_VAR 0 1
68310: ARRAY
68311: NOT
68312: IFFALSE 68316
// exit ;
68314: GO 68381
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
68316: LD_ADDR_EXP 77
68320: PUSH
68321: LD_EXP 77
68325: PPUSH
68326: LD_VAR 0 1
68330: PUSH
68331: LD_EXP 77
68335: PUSH
68336: LD_VAR 0 1
68340: ARRAY
68341: PUSH
68342: LD_INT 1
68344: PLUS
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PPUSH
68350: LD_VAR 0 1
68354: PUSH
68355: LD_VAR 0 2
68359: PUSH
68360: LD_VAR 0 3
68364: PUSH
68365: LD_VAR 0 4
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: PPUSH
68376: CALL 20104 0 3
68380: ST_TO_ADDR
// end ;
68381: LD_VAR 0 5
68385: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
68386: LD_INT 0
68388: PPUSH
// if not mc_bases [ base ] then
68389: LD_EXP 57
68393: PUSH
68394: LD_VAR 0 1
68398: ARRAY
68399: NOT
68400: IFFALSE 68404
// exit ;
68402: GO 68429
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
68404: LD_ADDR_EXP 93
68408: PUSH
68409: LD_EXP 93
68413: PPUSH
68414: LD_VAR 0 1
68418: PPUSH
68419: LD_VAR 0 2
68423: PPUSH
68424: CALL_OW 1
68428: ST_TO_ADDR
// end ;
68429: LD_VAR 0 3
68433: RET
// export function MC_GetMinesField ( base ) ; begin
68434: LD_INT 0
68436: PPUSH
// result := mc_mines [ base ] ;
68437: LD_ADDR_VAR 0 2
68441: PUSH
68442: LD_EXP 70
68446: PUSH
68447: LD_VAR 0 1
68451: ARRAY
68452: ST_TO_ADDR
// end ;
68453: LD_VAR 0 2
68457: RET
// export function MC_GetProduceList ( base ) ; begin
68458: LD_INT 0
68460: PPUSH
// result := mc_produce [ base ] ;
68461: LD_ADDR_VAR 0 2
68465: PUSH
68466: LD_EXP 78
68470: PUSH
68471: LD_VAR 0 1
68475: ARRAY
68476: ST_TO_ADDR
// end ;
68477: LD_VAR 0 2
68481: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
68482: LD_INT 0
68484: PPUSH
68485: PPUSH
// if not mc_bases then
68486: LD_EXP 57
68490: NOT
68491: IFFALSE 68495
// exit ;
68493: GO 68560
// if mc_bases [ base ] then
68495: LD_EXP 57
68499: PUSH
68500: LD_VAR 0 1
68504: ARRAY
68505: IFFALSE 68560
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
68507: LD_ADDR_VAR 0 3
68511: PUSH
68512: LD_EXP 57
68516: PUSH
68517: LD_VAR 0 1
68521: ARRAY
68522: PPUSH
68523: LD_INT 30
68525: PUSH
68526: LD_VAR 0 2
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PPUSH
68535: CALL_OW 72
68539: ST_TO_ADDR
// if result then
68540: LD_VAR 0 3
68544: IFFALSE 68560
// result := result [ 1 ] ;
68546: LD_ADDR_VAR 0 3
68550: PUSH
68551: LD_VAR 0 3
68555: PUSH
68556: LD_INT 1
68558: ARRAY
68559: ST_TO_ADDR
// end ; end ;
68560: LD_VAR 0 3
68564: RET
// export function MC_SetTame ( base , area ) ; begin
68565: LD_INT 0
68567: PPUSH
// if not mc_bases or not base then
68568: LD_EXP 57
68572: NOT
68573: PUSH
68574: LD_VAR 0 1
68578: NOT
68579: OR
68580: IFFALSE 68584
// exit ;
68582: GO 68609
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
68584: LD_ADDR_EXP 85
68588: PUSH
68589: LD_EXP 85
68593: PPUSH
68594: LD_VAR 0 1
68598: PPUSH
68599: LD_VAR 0 2
68603: PPUSH
68604: CALL_OW 1
68608: ST_TO_ADDR
// end ;
68609: LD_VAR 0 3
68613: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
68614: LD_INT 0
68616: PPUSH
68617: PPUSH
// if not mc_bases or not base then
68618: LD_EXP 57
68622: NOT
68623: PUSH
68624: LD_VAR 0 1
68628: NOT
68629: OR
68630: IFFALSE 68634
// exit ;
68632: GO 68736
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
68634: LD_ADDR_VAR 0 4
68638: PUSH
68639: LD_EXP 57
68643: PUSH
68644: LD_VAR 0 1
68648: ARRAY
68649: PPUSH
68650: LD_INT 30
68652: PUSH
68653: LD_VAR 0 2
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PPUSH
68662: CALL_OW 72
68666: ST_TO_ADDR
// if not tmp then
68667: LD_VAR 0 4
68671: NOT
68672: IFFALSE 68676
// exit ;
68674: GO 68736
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
68676: LD_ADDR_EXP 89
68680: PUSH
68681: LD_EXP 89
68685: PPUSH
68686: LD_VAR 0 1
68690: PPUSH
68691: LD_EXP 89
68695: PUSH
68696: LD_VAR 0 1
68700: ARRAY
68701: PPUSH
68702: LD_EXP 89
68706: PUSH
68707: LD_VAR 0 1
68711: ARRAY
68712: PUSH
68713: LD_INT 1
68715: PLUS
68716: PPUSH
68717: LD_VAR 0 4
68721: PUSH
68722: LD_INT 1
68724: ARRAY
68725: PPUSH
68726: CALL_OW 2
68730: PPUSH
68731: CALL_OW 1
68735: ST_TO_ADDR
// end ;
68736: LD_VAR 0 3
68740: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
68741: LD_INT 0
68743: PPUSH
68744: PPUSH
// if not mc_bases or not base or not kinds then
68745: LD_EXP 57
68749: NOT
68750: PUSH
68751: LD_VAR 0 1
68755: NOT
68756: OR
68757: PUSH
68758: LD_VAR 0 2
68762: NOT
68763: OR
68764: IFFALSE 68768
// exit ;
68766: GO 68829
// for i in kinds do
68768: LD_ADDR_VAR 0 4
68772: PUSH
68773: LD_VAR 0 2
68777: PUSH
68778: FOR_IN
68779: IFFALSE 68827
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
68781: LD_ADDR_EXP 91
68785: PUSH
68786: LD_EXP 91
68790: PPUSH
68791: LD_VAR 0 1
68795: PUSH
68796: LD_EXP 91
68800: PUSH
68801: LD_VAR 0 1
68805: ARRAY
68806: PUSH
68807: LD_INT 1
68809: PLUS
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PPUSH
68815: LD_VAR 0 4
68819: PPUSH
68820: CALL 20104 0 3
68824: ST_TO_ADDR
68825: GO 68778
68827: POP
68828: POP
// end ;
68829: LD_VAR 0 3
68833: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
68834: LD_INT 0
68836: PPUSH
// if not mc_bases or not base or not areas then
68837: LD_EXP 57
68841: NOT
68842: PUSH
68843: LD_VAR 0 1
68847: NOT
68848: OR
68849: PUSH
68850: LD_VAR 0 2
68854: NOT
68855: OR
68856: IFFALSE 68860
// exit ;
68858: GO 68885
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
68860: LD_ADDR_EXP 75
68864: PUSH
68865: LD_EXP 75
68869: PPUSH
68870: LD_VAR 0 1
68874: PPUSH
68875: LD_VAR 0 2
68879: PPUSH
68880: CALL_OW 1
68884: ST_TO_ADDR
// end ;
68885: LD_VAR 0 3
68889: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
68890: LD_INT 0
68892: PPUSH
// if not mc_bases or not base then
68893: LD_EXP 57
68897: NOT
68898: PUSH
68899: LD_VAR 0 1
68903: NOT
68904: OR
68905: IFFALSE 68909
// exit ;
68907: GO 68943
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
68909: LD_ADDR_EXP 92
68913: PUSH
68914: LD_EXP 92
68918: PPUSH
68919: LD_VAR 0 1
68923: PPUSH
68924: LD_VAR 0 2
68928: PUSH
68929: LD_VAR 0 3
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PPUSH
68938: CALL_OW 1
68942: ST_TO_ADDR
// end ;
68943: LD_VAR 0 4
68947: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
68948: LD_INT 0
68950: PPUSH
68951: PPUSH
68952: PPUSH
// if not mc_bases or not base or not ext_list then
68953: LD_EXP 57
68957: NOT
68958: PUSH
68959: LD_VAR 0 1
68963: NOT
68964: OR
68965: PUSH
68966: LD_VAR 0 5
68970: NOT
68971: OR
68972: IFFALSE 68976
// exit ;
68974: GO 69149
// tmp := GetFacExtXYD ( x , y , d ) ;
68976: LD_ADDR_VAR 0 8
68980: PUSH
68981: LD_VAR 0 2
68985: PPUSH
68986: LD_VAR 0 3
68990: PPUSH
68991: LD_VAR 0 4
68995: PPUSH
68996: CALL 51184 0 3
69000: ST_TO_ADDR
// if not tmp then
69001: LD_VAR 0 8
69005: NOT
69006: IFFALSE 69010
// exit ;
69008: GO 69149
// for i in tmp do
69010: LD_ADDR_VAR 0 7
69014: PUSH
69015: LD_VAR 0 8
69019: PUSH
69020: FOR_IN
69021: IFFALSE 69147
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
69023: LD_ADDR_EXP 62
69027: PUSH
69028: LD_EXP 62
69032: PPUSH
69033: LD_VAR 0 1
69037: PPUSH
69038: LD_EXP 62
69042: PUSH
69043: LD_VAR 0 1
69047: ARRAY
69048: PPUSH
69049: LD_EXP 62
69053: PUSH
69054: LD_VAR 0 1
69058: ARRAY
69059: PUSH
69060: LD_INT 1
69062: PLUS
69063: PPUSH
69064: LD_VAR 0 5
69068: PUSH
69069: LD_INT 1
69071: ARRAY
69072: PUSH
69073: LD_VAR 0 7
69077: PUSH
69078: LD_INT 1
69080: ARRAY
69081: PUSH
69082: LD_VAR 0 7
69086: PUSH
69087: LD_INT 2
69089: ARRAY
69090: PUSH
69091: LD_VAR 0 7
69095: PUSH
69096: LD_INT 3
69098: ARRAY
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: PPUSH
69106: CALL_OW 2
69110: PPUSH
69111: CALL_OW 1
69115: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
69116: LD_ADDR_VAR 0 5
69120: PUSH
69121: LD_VAR 0 5
69125: PPUSH
69126: LD_INT 1
69128: PPUSH
69129: CALL_OW 3
69133: ST_TO_ADDR
// if not ext_list then
69134: LD_VAR 0 5
69138: NOT
69139: IFFALSE 69145
// exit ;
69141: POP
69142: POP
69143: GO 69149
// end ;
69145: GO 69020
69147: POP
69148: POP
// end ;
69149: LD_VAR 0 6
69153: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
69154: LD_INT 0
69156: PPUSH
// if not mc_bases or not base or not weapon_list then
69157: LD_EXP 57
69161: NOT
69162: PUSH
69163: LD_VAR 0 1
69167: NOT
69168: OR
69169: PUSH
69170: LD_VAR 0 2
69174: NOT
69175: OR
69176: IFFALSE 69180
// exit ;
69178: GO 69205
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
69180: LD_ADDR_EXP 95
69184: PUSH
69185: LD_EXP 95
69189: PPUSH
69190: LD_VAR 0 1
69194: PPUSH
69195: LD_VAR 0 2
69199: PPUSH
69200: CALL_OW 1
69204: ST_TO_ADDR
// end ;
69205: LD_VAR 0 3
69209: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
69210: LD_INT 0
69212: PPUSH
// if not mc_bases or not base or not tech_list then
69213: LD_EXP 57
69217: NOT
69218: PUSH
69219: LD_VAR 0 1
69223: NOT
69224: OR
69225: PUSH
69226: LD_VAR 0 2
69230: NOT
69231: OR
69232: IFFALSE 69236
// exit ;
69234: GO 69261
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
69236: LD_ADDR_EXP 84
69240: PUSH
69241: LD_EXP 84
69245: PPUSH
69246: LD_VAR 0 1
69250: PPUSH
69251: LD_VAR 0 2
69255: PPUSH
69256: CALL_OW 1
69260: ST_TO_ADDR
// end ;
69261: LD_VAR 0 3
69265: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
69266: LD_INT 0
69268: PPUSH
// if not mc_bases or not parking_area or not base then
69269: LD_EXP 57
69273: NOT
69274: PUSH
69275: LD_VAR 0 2
69279: NOT
69280: OR
69281: PUSH
69282: LD_VAR 0 1
69286: NOT
69287: OR
69288: IFFALSE 69292
// exit ;
69290: GO 69317
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
69292: LD_ADDR_EXP 81
69296: PUSH
69297: LD_EXP 81
69301: PPUSH
69302: LD_VAR 0 1
69306: PPUSH
69307: LD_VAR 0 2
69311: PPUSH
69312: CALL_OW 1
69316: ST_TO_ADDR
// end ;
69317: LD_VAR 0 3
69321: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
69322: LD_INT 0
69324: PPUSH
// if not mc_bases or not base or not scan_area then
69325: LD_EXP 57
69329: NOT
69330: PUSH
69331: LD_VAR 0 1
69335: NOT
69336: OR
69337: PUSH
69338: LD_VAR 0 2
69342: NOT
69343: OR
69344: IFFALSE 69348
// exit ;
69346: GO 69373
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
69348: LD_ADDR_EXP 82
69352: PUSH
69353: LD_EXP 82
69357: PPUSH
69358: LD_VAR 0 1
69362: PPUSH
69363: LD_VAR 0 2
69367: PPUSH
69368: CALL_OW 1
69372: ST_TO_ADDR
// end ; end_of_file
69373: LD_VAR 0 3
69377: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
69378: LD_INT 0
69380: PPUSH
69381: PPUSH
69382: PPUSH
// if not mc_bases then
69383: LD_EXP 57
69387: NOT
69388: IFFALSE 69392
// exit ;
69390: GO 69557
// for i = 1 to mc_bases do
69392: LD_ADDR_VAR 0 4
69396: PUSH
69397: DOUBLE
69398: LD_INT 1
69400: DEC
69401: ST_TO_ADDR
69402: LD_EXP 57
69406: PUSH
69407: FOR_TO
69408: IFFALSE 69555
// begin if sci in mc_bases [ i ] then
69410: LD_VAR 0 2
69414: PUSH
69415: LD_EXP 57
69419: PUSH
69420: LD_VAR 0 4
69424: ARRAY
69425: IN
69426: IFFALSE 69553
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
69428: LD_ADDR_EXP 86
69432: PUSH
69433: LD_EXP 86
69437: PPUSH
69438: LD_VAR 0 4
69442: PUSH
69443: LD_EXP 86
69447: PUSH
69448: LD_VAR 0 4
69452: ARRAY
69453: PUSH
69454: LD_INT 1
69456: PLUS
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PPUSH
69462: LD_VAR 0 1
69466: PPUSH
69467: CALL 20104 0 3
69471: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
69472: LD_ADDR_VAR 0 5
69476: PUSH
69477: LD_EXP 57
69481: PUSH
69482: LD_VAR 0 4
69486: ARRAY
69487: PPUSH
69488: LD_INT 2
69490: PUSH
69491: LD_INT 30
69493: PUSH
69494: LD_INT 0
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 30
69503: PUSH
69504: LD_INT 1
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: LIST
69515: PPUSH
69516: CALL_OW 72
69520: PPUSH
69521: LD_VAR 0 1
69525: PPUSH
69526: CALL_OW 74
69530: ST_TO_ADDR
// if tmp then
69531: LD_VAR 0 5
69535: IFFALSE 69551
// ComStandNearbyBuilding ( ape , tmp ) ;
69537: LD_VAR 0 1
69541: PPUSH
69542: LD_VAR 0 5
69546: PPUSH
69547: CALL 14883 0 2
// break ;
69551: GO 69555
// end ; end ;
69553: GO 69407
69555: POP
69556: POP
// end ;
69557: LD_VAR 0 3
69561: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
69562: LD_INT 0
69564: PPUSH
69565: PPUSH
69566: PPUSH
// if not mc_bases then
69567: LD_EXP 57
69571: NOT
69572: IFFALSE 69576
// exit ;
69574: GO 69665
// for i = 1 to mc_bases do
69576: LD_ADDR_VAR 0 4
69580: PUSH
69581: DOUBLE
69582: LD_INT 1
69584: DEC
69585: ST_TO_ADDR
69586: LD_EXP 57
69590: PUSH
69591: FOR_TO
69592: IFFALSE 69663
// begin if building in mc_busy_turret_list [ i ] then
69594: LD_VAR 0 1
69598: PUSH
69599: LD_EXP 67
69603: PUSH
69604: LD_VAR 0 4
69608: ARRAY
69609: IN
69610: IFFALSE 69661
// begin tmp := mc_busy_turret_list [ i ] diff building ;
69612: LD_ADDR_VAR 0 5
69616: PUSH
69617: LD_EXP 67
69621: PUSH
69622: LD_VAR 0 4
69626: ARRAY
69627: PUSH
69628: LD_VAR 0 1
69632: DIFF
69633: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
69634: LD_ADDR_EXP 67
69638: PUSH
69639: LD_EXP 67
69643: PPUSH
69644: LD_VAR 0 4
69648: PPUSH
69649: LD_VAR 0 5
69653: PPUSH
69654: CALL_OW 1
69658: ST_TO_ADDR
// break ;
69659: GO 69663
// end ; end ;
69661: GO 69591
69663: POP
69664: POP
// end ;
69665: LD_VAR 0 3
69669: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
69670: LD_INT 0
69672: PPUSH
69673: PPUSH
69674: PPUSH
// if not mc_bases then
69675: LD_EXP 57
69679: NOT
69680: IFFALSE 69684
// exit ;
69682: GO 69883
// for i = 1 to mc_bases do
69684: LD_ADDR_VAR 0 5
69688: PUSH
69689: DOUBLE
69690: LD_INT 1
69692: DEC
69693: ST_TO_ADDR
69694: LD_EXP 57
69698: PUSH
69699: FOR_TO
69700: IFFALSE 69881
// if building in mc_bases [ i ] then
69702: LD_VAR 0 1
69706: PUSH
69707: LD_EXP 57
69711: PUSH
69712: LD_VAR 0 5
69716: ARRAY
69717: IN
69718: IFFALSE 69879
// begin tmp := mc_bases [ i ] diff building ;
69720: LD_ADDR_VAR 0 6
69724: PUSH
69725: LD_EXP 57
69729: PUSH
69730: LD_VAR 0 5
69734: ARRAY
69735: PUSH
69736: LD_VAR 0 1
69740: DIFF
69741: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
69742: LD_ADDR_EXP 57
69746: PUSH
69747: LD_EXP 57
69751: PPUSH
69752: LD_VAR 0 5
69756: PPUSH
69757: LD_VAR 0 6
69761: PPUSH
69762: CALL_OW 1
69766: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
69767: LD_VAR 0 1
69771: PUSH
69772: LD_EXP 65
69776: PUSH
69777: LD_VAR 0 5
69781: ARRAY
69782: IN
69783: IFFALSE 69822
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
69785: LD_ADDR_EXP 65
69789: PUSH
69790: LD_EXP 65
69794: PPUSH
69795: LD_VAR 0 5
69799: PPUSH
69800: LD_EXP 65
69804: PUSH
69805: LD_VAR 0 5
69809: ARRAY
69810: PUSH
69811: LD_VAR 0 1
69815: DIFF
69816: PPUSH
69817: CALL_OW 1
69821: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
69822: LD_VAR 0 1
69826: PUSH
69827: LD_EXP 66
69831: PUSH
69832: LD_VAR 0 5
69836: ARRAY
69837: IN
69838: IFFALSE 69877
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
69840: LD_ADDR_EXP 66
69844: PUSH
69845: LD_EXP 66
69849: PPUSH
69850: LD_VAR 0 5
69854: PPUSH
69855: LD_EXP 66
69859: PUSH
69860: LD_VAR 0 5
69864: ARRAY
69865: PUSH
69866: LD_VAR 0 1
69870: DIFF
69871: PPUSH
69872: CALL_OW 1
69876: ST_TO_ADDR
// break ;
69877: GO 69881
// end ;
69879: GO 69699
69881: POP
69882: POP
// end ;
69883: LD_VAR 0 4
69887: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
69888: LD_INT 0
69890: PPUSH
69891: PPUSH
69892: PPUSH
// if not mc_bases or not side in mc_sides then
69893: LD_EXP 57
69897: NOT
69898: PUSH
69899: LD_VAR 0 3
69903: PUSH
69904: LD_EXP 83
69908: IN
69909: NOT
69910: OR
69911: IFFALSE 69915
// exit ;
69913: GO 70038
// for i = 1 to mc_vehicles do
69915: LD_ADDR_VAR 0 6
69919: PUSH
69920: DOUBLE
69921: LD_INT 1
69923: DEC
69924: ST_TO_ADDR
69925: LD_EXP 76
69929: PUSH
69930: FOR_TO
69931: IFFALSE 70036
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
69933: LD_VAR 0 2
69937: PUSH
69938: LD_EXP 76
69942: PUSH
69943: LD_VAR 0 6
69947: ARRAY
69948: IN
69949: PUSH
69950: LD_VAR 0 1
69954: PUSH
69955: LD_EXP 76
69959: PUSH
69960: LD_VAR 0 6
69964: ARRAY
69965: IN
69966: OR
69967: IFFALSE 70034
// begin tmp := mc_vehicles [ i ] diff old ;
69969: LD_ADDR_VAR 0 7
69973: PUSH
69974: LD_EXP 76
69978: PUSH
69979: LD_VAR 0 6
69983: ARRAY
69984: PUSH
69985: LD_VAR 0 2
69989: DIFF
69990: ST_TO_ADDR
// tmp := tmp diff new ;
69991: LD_ADDR_VAR 0 7
69995: PUSH
69996: LD_VAR 0 7
70000: PUSH
70001: LD_VAR 0 1
70005: DIFF
70006: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
70007: LD_ADDR_EXP 76
70011: PUSH
70012: LD_EXP 76
70016: PPUSH
70017: LD_VAR 0 6
70021: PPUSH
70022: LD_VAR 0 7
70026: PPUSH
70027: CALL_OW 1
70031: ST_TO_ADDR
// break ;
70032: GO 70036
// end ;
70034: GO 69930
70036: POP
70037: POP
// end ;
70038: LD_VAR 0 5
70042: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
70043: LD_INT 0
70045: PPUSH
70046: PPUSH
70047: PPUSH
70048: PPUSH
// if not mc_bases then
70049: LD_EXP 57
70053: NOT
70054: IFFALSE 70058
// exit ;
70056: GO 70350
// side := GetSide ( vehicle ) ;
70058: LD_ADDR_VAR 0 5
70062: PUSH
70063: LD_VAR 0 1
70067: PPUSH
70068: CALL_OW 255
70072: ST_TO_ADDR
// for i = 1 to mc_bases do
70073: LD_ADDR_VAR 0 4
70077: PUSH
70078: DOUBLE
70079: LD_INT 1
70081: DEC
70082: ST_TO_ADDR
70083: LD_EXP 57
70087: PUSH
70088: FOR_TO
70089: IFFALSE 70348
// begin if factory in mc_bases [ i ] then
70091: LD_VAR 0 2
70095: PUSH
70096: LD_EXP 57
70100: PUSH
70101: LD_VAR 0 4
70105: ARRAY
70106: IN
70107: IFFALSE 70346
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
70109: LD_EXP 79
70113: PUSH
70114: LD_VAR 0 4
70118: ARRAY
70119: PUSH
70120: LD_EXP 68
70124: PUSH
70125: LD_VAR 0 4
70129: ARRAY
70130: LESS
70131: IFFALSE 70302
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
70133: LD_ADDR_EXP 79
70137: PUSH
70138: LD_EXP 79
70142: PPUSH
70143: LD_VAR 0 4
70147: PPUSH
70148: LD_EXP 79
70152: PUSH
70153: LD_VAR 0 4
70157: ARRAY
70158: PUSH
70159: LD_VAR 0 1
70163: ADD
70164: PPUSH
70165: CALL_OW 1
70169: ST_TO_ADDR
// if not mc_scan [ i ] then
70170: LD_EXP 80
70174: PUSH
70175: LD_VAR 0 4
70179: ARRAY
70180: NOT
70181: IFFALSE 70300
// begin if GetControl ( vehicle ) = control_remote then
70183: LD_VAR 0 1
70187: PPUSH
70188: CALL_OW 263
70192: PUSH
70193: LD_INT 2
70195: EQUAL
70196: IFFALSE 70216
// repeat wait ( 0 0$1 ) ;
70198: LD_INT 35
70200: PPUSH
70201: CALL_OW 67
// until IsControledBy ( vehicle ) ;
70205: LD_VAR 0 1
70209: PPUSH
70210: CALL_OW 312
70214: IFFALSE 70198
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
70216: LD_VAR 0 1
70220: PPUSH
70221: LD_EXP 81
70225: PUSH
70226: LD_VAR 0 4
70230: ARRAY
70231: PPUSH
70232: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
70236: LD_VAR 0 1
70240: PPUSH
70241: CALL_OW 263
70245: PUSH
70246: LD_INT 1
70248: NONEQUAL
70249: IFFALSE 70253
// break ;
70251: GO 70348
// repeat wait ( 0 0$1 ) ;
70253: LD_INT 35
70255: PPUSH
70256: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
70260: LD_VAR 0 1
70264: PPUSH
70265: LD_EXP 81
70269: PUSH
70270: LD_VAR 0 4
70274: ARRAY
70275: PPUSH
70276: CALL_OW 308
70280: IFFALSE 70253
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
70282: LD_VAR 0 1
70286: PPUSH
70287: CALL_OW 311
70291: PPUSH
70292: CALL_OW 121
// exit ;
70296: POP
70297: POP
70298: GO 70350
// end ; end else
70300: GO 70346
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
70302: LD_ADDR_EXP 76
70306: PUSH
70307: LD_EXP 76
70311: PPUSH
70312: LD_VAR 0 4
70316: PUSH
70317: LD_EXP 76
70321: PUSH
70322: LD_VAR 0 4
70326: ARRAY
70327: PUSH
70328: LD_INT 1
70330: PLUS
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PPUSH
70336: LD_VAR 0 1
70340: PPUSH
70341: CALL 20104 0 3
70345: ST_TO_ADDR
// end ; end ;
70346: GO 70088
70348: POP
70349: POP
// end ;
70350: LD_VAR 0 3
70354: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
70355: LD_INT 0
70357: PPUSH
70358: PPUSH
70359: PPUSH
70360: PPUSH
// if not mc_bases then
70361: LD_EXP 57
70365: NOT
70366: IFFALSE 70370
// exit ;
70368: GO 70723
// repeat wait ( 0 0$1 ) ;
70370: LD_INT 35
70372: PPUSH
70373: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
70377: LD_VAR 0 2
70381: PPUSH
70382: LD_VAR 0 3
70386: PPUSH
70387: CALL_OW 284
70391: IFFALSE 70370
// if GetResourceTypeXY ( x , y ) = mat_artefact then
70393: LD_VAR 0 2
70397: PPUSH
70398: LD_VAR 0 3
70402: PPUSH
70403: CALL_OW 283
70407: PUSH
70408: LD_INT 4
70410: EQUAL
70411: IFFALSE 70415
// exit ;
70413: GO 70723
// for i = 1 to mc_bases do
70415: LD_ADDR_VAR 0 7
70419: PUSH
70420: DOUBLE
70421: LD_INT 1
70423: DEC
70424: ST_TO_ADDR
70425: LD_EXP 57
70429: PUSH
70430: FOR_TO
70431: IFFALSE 70721
// begin if mc_crates_area [ i ] then
70433: LD_EXP 75
70437: PUSH
70438: LD_VAR 0 7
70442: ARRAY
70443: IFFALSE 70554
// for j in mc_crates_area [ i ] do
70445: LD_ADDR_VAR 0 8
70449: PUSH
70450: LD_EXP 75
70454: PUSH
70455: LD_VAR 0 7
70459: ARRAY
70460: PUSH
70461: FOR_IN
70462: IFFALSE 70552
// if InArea ( x , y , j ) then
70464: LD_VAR 0 2
70468: PPUSH
70469: LD_VAR 0 3
70473: PPUSH
70474: LD_VAR 0 8
70478: PPUSH
70479: CALL_OW 309
70483: IFFALSE 70550
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
70485: LD_ADDR_EXP 73
70489: PUSH
70490: LD_EXP 73
70494: PPUSH
70495: LD_VAR 0 7
70499: PUSH
70500: LD_EXP 73
70504: PUSH
70505: LD_VAR 0 7
70509: ARRAY
70510: PUSH
70511: LD_INT 1
70513: PLUS
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PPUSH
70519: LD_VAR 0 4
70523: PUSH
70524: LD_VAR 0 2
70528: PUSH
70529: LD_VAR 0 3
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: LIST
70538: PPUSH
70539: CALL 20104 0 3
70543: ST_TO_ADDR
// exit ;
70544: POP
70545: POP
70546: POP
70547: POP
70548: GO 70723
// end ;
70550: GO 70461
70552: POP
70553: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70554: LD_ADDR_VAR 0 9
70558: PUSH
70559: LD_EXP 57
70563: PUSH
70564: LD_VAR 0 7
70568: ARRAY
70569: PPUSH
70570: LD_INT 2
70572: PUSH
70573: LD_INT 30
70575: PUSH
70576: LD_INT 0
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 30
70585: PUSH
70586: LD_INT 1
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: LIST
70597: PPUSH
70598: CALL_OW 72
70602: ST_TO_ADDR
// if not depot then
70603: LD_VAR 0 9
70607: NOT
70608: IFFALSE 70612
// continue ;
70610: GO 70430
// for j in depot do
70612: LD_ADDR_VAR 0 8
70616: PUSH
70617: LD_VAR 0 9
70621: PUSH
70622: FOR_IN
70623: IFFALSE 70717
// if GetDistUnitXY ( j , x , y ) < 30 then
70625: LD_VAR 0 8
70629: PPUSH
70630: LD_VAR 0 2
70634: PPUSH
70635: LD_VAR 0 3
70639: PPUSH
70640: CALL_OW 297
70644: PUSH
70645: LD_INT 30
70647: LESS
70648: IFFALSE 70715
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
70650: LD_ADDR_EXP 73
70654: PUSH
70655: LD_EXP 73
70659: PPUSH
70660: LD_VAR 0 7
70664: PUSH
70665: LD_EXP 73
70669: PUSH
70670: LD_VAR 0 7
70674: ARRAY
70675: PUSH
70676: LD_INT 1
70678: PLUS
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PPUSH
70684: LD_VAR 0 4
70688: PUSH
70689: LD_VAR 0 2
70693: PUSH
70694: LD_VAR 0 3
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: LIST
70703: PPUSH
70704: CALL 20104 0 3
70708: ST_TO_ADDR
// exit ;
70709: POP
70710: POP
70711: POP
70712: POP
70713: GO 70723
// end ;
70715: GO 70622
70717: POP
70718: POP
// end ;
70719: GO 70430
70721: POP
70722: POP
// end ;
70723: LD_VAR 0 6
70727: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
70728: LD_INT 0
70730: PPUSH
70731: PPUSH
70732: PPUSH
70733: PPUSH
// side := GetSide ( lab ) ;
70734: LD_ADDR_VAR 0 4
70738: PUSH
70739: LD_VAR 0 2
70743: PPUSH
70744: CALL_OW 255
70748: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
70749: LD_VAR 0 4
70753: PUSH
70754: LD_EXP 83
70758: IN
70759: NOT
70760: PUSH
70761: LD_EXP 84
70765: NOT
70766: OR
70767: PUSH
70768: LD_EXP 57
70772: NOT
70773: OR
70774: IFFALSE 70778
// exit ;
70776: GO 71011
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
70778: LD_ADDR_EXP 84
70782: PUSH
70783: LD_EXP 84
70787: PPUSH
70788: LD_VAR 0 4
70792: PPUSH
70793: LD_EXP 84
70797: PUSH
70798: LD_VAR 0 4
70802: ARRAY
70803: PUSH
70804: LD_VAR 0 1
70808: DIFF
70809: PPUSH
70810: CALL_OW 1
70814: ST_TO_ADDR
// for i = 1 to mc_bases do
70815: LD_ADDR_VAR 0 5
70819: PUSH
70820: DOUBLE
70821: LD_INT 1
70823: DEC
70824: ST_TO_ADDR
70825: LD_EXP 57
70829: PUSH
70830: FOR_TO
70831: IFFALSE 71009
// begin if lab in mc_bases [ i ] then
70833: LD_VAR 0 2
70837: PUSH
70838: LD_EXP 57
70842: PUSH
70843: LD_VAR 0 5
70847: ARRAY
70848: IN
70849: IFFALSE 71007
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
70851: LD_VAR 0 1
70855: PUSH
70856: LD_INT 11
70858: PUSH
70859: LD_INT 4
70861: PUSH
70862: LD_INT 3
70864: PUSH
70865: LD_INT 2
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: IN
70874: PUSH
70875: LD_EXP 87
70879: PUSH
70880: LD_VAR 0 5
70884: ARRAY
70885: AND
70886: IFFALSE 71007
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
70888: LD_ADDR_VAR 0 6
70892: PUSH
70893: LD_EXP 87
70897: PUSH
70898: LD_VAR 0 5
70902: ARRAY
70903: PUSH
70904: LD_INT 1
70906: ARRAY
70907: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
70908: LD_ADDR_EXP 87
70912: PUSH
70913: LD_EXP 87
70917: PPUSH
70918: LD_VAR 0 5
70922: PPUSH
70923: EMPTY
70924: PPUSH
70925: CALL_OW 1
70929: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
70930: LD_VAR 0 6
70934: PPUSH
70935: LD_INT 0
70937: PPUSH
70938: CALL_OW 109
// ComExitBuilding ( tmp ) ;
70942: LD_VAR 0 6
70946: PPUSH
70947: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
70951: LD_ADDR_EXP 86
70955: PUSH
70956: LD_EXP 86
70960: PPUSH
70961: LD_VAR 0 5
70965: PPUSH
70966: LD_EXP 86
70970: PUSH
70971: LD_VAR 0 5
70975: ARRAY
70976: PPUSH
70977: LD_INT 1
70979: PPUSH
70980: LD_VAR 0 6
70984: PPUSH
70985: CALL_OW 2
70989: PPUSH
70990: CALL_OW 1
70994: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
70995: LD_VAR 0 5
70999: PPUSH
71000: LD_INT 112
71002: PPUSH
71003: CALL 54972 0 2
// end ; end ; end ;
71007: GO 70830
71009: POP
71010: POP
// end ;
71011: LD_VAR 0 3
71015: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
71016: LD_INT 0
71018: PPUSH
71019: PPUSH
71020: PPUSH
71021: PPUSH
71022: PPUSH
71023: PPUSH
71024: PPUSH
71025: PPUSH
// if not mc_bases then
71026: LD_EXP 57
71030: NOT
71031: IFFALSE 71035
// exit ;
71033: GO 71960
// for i = 1 to mc_bases do
71035: LD_ADDR_VAR 0 3
71039: PUSH
71040: DOUBLE
71041: LD_INT 1
71043: DEC
71044: ST_TO_ADDR
71045: LD_EXP 57
71049: PUSH
71050: FOR_TO
71051: IFFALSE 71958
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
71053: LD_VAR 0 1
71057: PUSH
71058: LD_EXP 57
71062: PUSH
71063: LD_VAR 0 3
71067: ARRAY
71068: IN
71069: PUSH
71070: LD_VAR 0 1
71074: PUSH
71075: LD_EXP 64
71079: PUSH
71080: LD_VAR 0 3
71084: ARRAY
71085: IN
71086: OR
71087: PUSH
71088: LD_VAR 0 1
71092: PUSH
71093: LD_EXP 76
71097: PUSH
71098: LD_VAR 0 3
71102: ARRAY
71103: IN
71104: OR
71105: PUSH
71106: LD_VAR 0 1
71110: PUSH
71111: LD_EXP 86
71115: PUSH
71116: LD_VAR 0 3
71120: ARRAY
71121: IN
71122: OR
71123: PUSH
71124: LD_VAR 0 1
71128: PUSH
71129: LD_EXP 87
71133: PUSH
71134: LD_VAR 0 3
71138: ARRAY
71139: IN
71140: OR
71141: IFFALSE 71956
// begin if un in mc_ape [ i ] then
71143: LD_VAR 0 1
71147: PUSH
71148: LD_EXP 86
71152: PUSH
71153: LD_VAR 0 3
71157: ARRAY
71158: IN
71159: IFFALSE 71198
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
71161: LD_ADDR_EXP 86
71165: PUSH
71166: LD_EXP 86
71170: PPUSH
71171: LD_VAR 0 3
71175: PPUSH
71176: LD_EXP 86
71180: PUSH
71181: LD_VAR 0 3
71185: ARRAY
71186: PUSH
71187: LD_VAR 0 1
71191: DIFF
71192: PPUSH
71193: CALL_OW 1
71197: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
71198: LD_VAR 0 1
71202: PUSH
71203: LD_EXP 87
71207: PUSH
71208: LD_VAR 0 3
71212: ARRAY
71213: IN
71214: IFFALSE 71238
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
71216: LD_ADDR_EXP 87
71220: PUSH
71221: LD_EXP 87
71225: PPUSH
71226: LD_VAR 0 3
71230: PPUSH
71231: EMPTY
71232: PPUSH
71233: CALL_OW 1
71237: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
71238: LD_VAR 0 1
71242: PPUSH
71243: CALL_OW 247
71247: PUSH
71248: LD_INT 2
71250: EQUAL
71251: PUSH
71252: LD_VAR 0 1
71256: PPUSH
71257: CALL_OW 110
71261: PUSH
71262: LD_INT 20
71264: EQUAL
71265: AND
71266: IFFALSE 71369
// begin fac := MC_GetBuilding ( i , b_factory ) ;
71268: LD_ADDR_VAR 0 8
71272: PUSH
71273: LD_VAR 0 3
71277: PPUSH
71278: LD_INT 3
71280: PPUSH
71281: CALL 68482 0 2
71285: ST_TO_ADDR
// if fac then
71286: LD_VAR 0 8
71290: IFFALSE 71369
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
71292: LD_ADDR_VAR 0 9
71296: PUSH
71297: LD_VAR 0 8
71301: PPUSH
71302: LD_VAR 0 1
71306: PPUSH
71307: CALL_OW 265
71311: PPUSH
71312: LD_VAR 0 1
71316: PPUSH
71317: CALL_OW 262
71321: PPUSH
71322: LD_VAR 0 1
71326: PPUSH
71327: CALL_OW 263
71331: PPUSH
71332: LD_VAR 0 1
71336: PPUSH
71337: CALL_OW 264
71341: PPUSH
71342: CALL 17269 0 5
71346: ST_TO_ADDR
// if components then
71347: LD_VAR 0 9
71351: IFFALSE 71367
// MC_InsertProduceList ( i , components ) ;
71353: LD_VAR 0 3
71357: PPUSH
71358: LD_VAR 0 9
71362: PPUSH
71363: CALL 68049 0 2
// break ;
71367: GO 71958
// end ; end ; if GetType ( un ) = unit_building then
71369: LD_VAR 0 1
71373: PPUSH
71374: CALL_OW 247
71378: PUSH
71379: LD_INT 3
71381: EQUAL
71382: IFFALSE 71679
// begin btype := GetBType ( un ) ;
71384: LD_ADDR_VAR 0 5
71388: PUSH
71389: LD_VAR 0 1
71393: PPUSH
71394: CALL_OW 266
71398: ST_TO_ADDR
// if btype = b_warehouse then
71399: LD_VAR 0 5
71403: PUSH
71404: LD_INT 1
71406: EQUAL
71407: IFFALSE 71425
// begin btype := b_depot ;
71409: LD_ADDR_VAR 0 5
71413: PUSH
71414: LD_INT 0
71416: ST_TO_ADDR
// pos := 1 ;
71417: LD_ADDR_VAR 0 6
71421: PUSH
71422: LD_INT 1
71424: ST_TO_ADDR
// end ; if btype = b_factory then
71425: LD_VAR 0 5
71429: PUSH
71430: LD_INT 3
71432: EQUAL
71433: IFFALSE 71451
// begin btype := b_workshop ;
71435: LD_ADDR_VAR 0 5
71439: PUSH
71440: LD_INT 2
71442: ST_TO_ADDR
// pos := 1 ;
71443: LD_ADDR_VAR 0 6
71447: PUSH
71448: LD_INT 1
71450: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
71451: LD_VAR 0 5
71455: PUSH
71456: LD_INT 7
71458: PUSH
71459: LD_INT 8
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: IN
71466: IFFALSE 71476
// btype := b_lab ;
71468: LD_ADDR_VAR 0 5
71472: PUSH
71473: LD_INT 6
71475: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
71476: LD_ADDR_EXP 62
71480: PUSH
71481: LD_EXP 62
71485: PPUSH
71486: LD_VAR 0 3
71490: PUSH
71491: LD_EXP 62
71495: PUSH
71496: LD_VAR 0 3
71500: ARRAY
71501: PUSH
71502: LD_INT 1
71504: PLUS
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PPUSH
71510: LD_VAR 0 5
71514: PUSH
71515: LD_VAR 0 1
71519: PPUSH
71520: CALL_OW 250
71524: PUSH
71525: LD_VAR 0 1
71529: PPUSH
71530: CALL_OW 251
71534: PUSH
71535: LD_VAR 0 1
71539: PPUSH
71540: CALL_OW 254
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: LIST
71549: LIST
71550: PPUSH
71551: CALL 20104 0 3
71555: ST_TO_ADDR
// if pos = 1 then
71556: LD_VAR 0 6
71560: PUSH
71561: LD_INT 1
71563: EQUAL
71564: IFFALSE 71679
// begin tmp := mc_build_list [ i ] ;
71566: LD_ADDR_VAR 0 7
71570: PUSH
71571: LD_EXP 62
71575: PUSH
71576: LD_VAR 0 3
71580: ARRAY
71581: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
71582: LD_VAR 0 7
71586: PPUSH
71587: LD_INT 2
71589: PUSH
71590: LD_INT 30
71592: PUSH
71593: LD_INT 0
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 30
71602: PUSH
71603: LD_INT 1
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: LIST
71614: PPUSH
71615: CALL_OW 72
71619: IFFALSE 71629
// pos := 2 ;
71621: LD_ADDR_VAR 0 6
71625: PUSH
71626: LD_INT 2
71628: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
71629: LD_ADDR_VAR 0 7
71633: PUSH
71634: LD_VAR 0 7
71638: PPUSH
71639: LD_VAR 0 6
71643: PPUSH
71644: LD_VAR 0 7
71648: PPUSH
71649: CALL 19995 0 3
71653: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
71654: LD_ADDR_EXP 62
71658: PUSH
71659: LD_EXP 62
71663: PPUSH
71664: LD_VAR 0 3
71668: PPUSH
71669: LD_VAR 0 7
71673: PPUSH
71674: CALL_OW 1
71678: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
71679: LD_VAR 0 1
71683: PUSH
71684: LD_EXP 57
71688: PUSH
71689: LD_VAR 0 3
71693: ARRAY
71694: IN
71695: IFFALSE 71734
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
71697: LD_ADDR_EXP 57
71701: PUSH
71702: LD_EXP 57
71706: PPUSH
71707: LD_VAR 0 3
71711: PPUSH
71712: LD_EXP 57
71716: PUSH
71717: LD_VAR 0 3
71721: ARRAY
71722: PUSH
71723: LD_VAR 0 1
71727: DIFF
71728: PPUSH
71729: CALL_OW 1
71733: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
71734: LD_VAR 0 1
71738: PUSH
71739: LD_EXP 64
71743: PUSH
71744: LD_VAR 0 3
71748: ARRAY
71749: IN
71750: IFFALSE 71789
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
71752: LD_ADDR_EXP 64
71756: PUSH
71757: LD_EXP 64
71761: PPUSH
71762: LD_VAR 0 3
71766: PPUSH
71767: LD_EXP 64
71771: PUSH
71772: LD_VAR 0 3
71776: ARRAY
71777: PUSH
71778: LD_VAR 0 1
71782: DIFF
71783: PPUSH
71784: CALL_OW 1
71788: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
71789: LD_VAR 0 1
71793: PUSH
71794: LD_EXP 76
71798: PUSH
71799: LD_VAR 0 3
71803: ARRAY
71804: IN
71805: IFFALSE 71844
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
71807: LD_ADDR_EXP 76
71811: PUSH
71812: LD_EXP 76
71816: PPUSH
71817: LD_VAR 0 3
71821: PPUSH
71822: LD_EXP 76
71826: PUSH
71827: LD_VAR 0 3
71831: ARRAY
71832: PUSH
71833: LD_VAR 0 1
71837: DIFF
71838: PPUSH
71839: CALL_OW 1
71843: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
71844: LD_VAR 0 1
71848: PUSH
71849: LD_EXP 66
71853: PUSH
71854: LD_VAR 0 3
71858: ARRAY
71859: IN
71860: IFFALSE 71899
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
71862: LD_ADDR_EXP 66
71866: PUSH
71867: LD_EXP 66
71871: PPUSH
71872: LD_VAR 0 3
71876: PPUSH
71877: LD_EXP 66
71881: PUSH
71882: LD_VAR 0 3
71886: ARRAY
71887: PUSH
71888: LD_VAR 0 1
71892: DIFF
71893: PPUSH
71894: CALL_OW 1
71898: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
71899: LD_VAR 0 1
71903: PUSH
71904: LD_EXP 65
71908: PUSH
71909: LD_VAR 0 3
71913: ARRAY
71914: IN
71915: IFFALSE 71954
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
71917: LD_ADDR_EXP 65
71921: PUSH
71922: LD_EXP 65
71926: PPUSH
71927: LD_VAR 0 3
71931: PPUSH
71932: LD_EXP 65
71936: PUSH
71937: LD_VAR 0 3
71941: ARRAY
71942: PUSH
71943: LD_VAR 0 1
71947: DIFF
71948: PPUSH
71949: CALL_OW 1
71953: ST_TO_ADDR
// end ; break ;
71954: GO 71958
// end ;
71956: GO 71050
71958: POP
71959: POP
// end ;
71960: LD_VAR 0 2
71964: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
71965: LD_INT 0
71967: PPUSH
71968: PPUSH
71969: PPUSH
// if not mc_bases then
71970: LD_EXP 57
71974: NOT
71975: IFFALSE 71979
// exit ;
71977: GO 72194
// for i = 1 to mc_bases do
71979: LD_ADDR_VAR 0 3
71983: PUSH
71984: DOUBLE
71985: LD_INT 1
71987: DEC
71988: ST_TO_ADDR
71989: LD_EXP 57
71993: PUSH
71994: FOR_TO
71995: IFFALSE 72192
// begin if building in mc_construct_list [ i ] then
71997: LD_VAR 0 1
72001: PUSH
72002: LD_EXP 64
72006: PUSH
72007: LD_VAR 0 3
72011: ARRAY
72012: IN
72013: IFFALSE 72190
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
72015: LD_ADDR_EXP 64
72019: PUSH
72020: LD_EXP 64
72024: PPUSH
72025: LD_VAR 0 3
72029: PPUSH
72030: LD_EXP 64
72034: PUSH
72035: LD_VAR 0 3
72039: ARRAY
72040: PUSH
72041: LD_VAR 0 1
72045: DIFF
72046: PPUSH
72047: CALL_OW 1
72051: ST_TO_ADDR
// if building in mc_lab [ i ] then
72052: LD_VAR 0 1
72056: PUSH
72057: LD_EXP 90
72061: PUSH
72062: LD_VAR 0 3
72066: ARRAY
72067: IN
72068: IFFALSE 72123
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
72070: LD_ADDR_EXP 91
72074: PUSH
72075: LD_EXP 91
72079: PPUSH
72080: LD_VAR 0 3
72084: PPUSH
72085: LD_EXP 91
72089: PUSH
72090: LD_VAR 0 3
72094: ARRAY
72095: PPUSH
72096: LD_INT 1
72098: PPUSH
72099: LD_EXP 91
72103: PUSH
72104: LD_VAR 0 3
72108: ARRAY
72109: PPUSH
72110: LD_INT 0
72112: PPUSH
72113: CALL 19087 0 4
72117: PPUSH
72118: CALL_OW 1
72122: ST_TO_ADDR
// if not building in mc_bases [ i ] then
72123: LD_VAR 0 1
72127: PUSH
72128: LD_EXP 57
72132: PUSH
72133: LD_VAR 0 3
72137: ARRAY
72138: IN
72139: NOT
72140: IFFALSE 72186
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
72142: LD_ADDR_EXP 57
72146: PUSH
72147: LD_EXP 57
72151: PPUSH
72152: LD_VAR 0 3
72156: PUSH
72157: LD_EXP 57
72161: PUSH
72162: LD_VAR 0 3
72166: ARRAY
72167: PUSH
72168: LD_INT 1
72170: PLUS
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PPUSH
72176: LD_VAR 0 1
72180: PPUSH
72181: CALL 20104 0 3
72185: ST_TO_ADDR
// exit ;
72186: POP
72187: POP
72188: GO 72194
// end ; end ;
72190: GO 71994
72192: POP
72193: POP
// end ;
72194: LD_VAR 0 2
72198: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
72199: LD_INT 0
72201: PPUSH
72202: PPUSH
72203: PPUSH
72204: PPUSH
72205: PPUSH
72206: PPUSH
72207: PPUSH
// if not mc_bases then
72208: LD_EXP 57
72212: NOT
72213: IFFALSE 72217
// exit ;
72215: GO 72878
// for i = 1 to mc_bases do
72217: LD_ADDR_VAR 0 3
72221: PUSH
72222: DOUBLE
72223: LD_INT 1
72225: DEC
72226: ST_TO_ADDR
72227: LD_EXP 57
72231: PUSH
72232: FOR_TO
72233: IFFALSE 72876
// begin if building in mc_construct_list [ i ] then
72235: LD_VAR 0 1
72239: PUSH
72240: LD_EXP 64
72244: PUSH
72245: LD_VAR 0 3
72249: ARRAY
72250: IN
72251: IFFALSE 72874
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
72253: LD_ADDR_EXP 64
72257: PUSH
72258: LD_EXP 64
72262: PPUSH
72263: LD_VAR 0 3
72267: PPUSH
72268: LD_EXP 64
72272: PUSH
72273: LD_VAR 0 3
72277: ARRAY
72278: PUSH
72279: LD_VAR 0 1
72283: DIFF
72284: PPUSH
72285: CALL_OW 1
72289: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
72290: LD_ADDR_EXP 57
72294: PUSH
72295: LD_EXP 57
72299: PPUSH
72300: LD_VAR 0 3
72304: PUSH
72305: LD_EXP 57
72309: PUSH
72310: LD_VAR 0 3
72314: ARRAY
72315: PUSH
72316: LD_INT 1
72318: PLUS
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PPUSH
72324: LD_VAR 0 1
72328: PPUSH
72329: CALL 20104 0 3
72333: ST_TO_ADDR
// btype := GetBType ( building ) ;
72334: LD_ADDR_VAR 0 5
72338: PUSH
72339: LD_VAR 0 1
72343: PPUSH
72344: CALL_OW 266
72348: ST_TO_ADDR
// side := GetSide ( building ) ;
72349: LD_ADDR_VAR 0 8
72353: PUSH
72354: LD_VAR 0 1
72358: PPUSH
72359: CALL_OW 255
72363: ST_TO_ADDR
// if btype = b_lab then
72364: LD_VAR 0 5
72368: PUSH
72369: LD_INT 6
72371: EQUAL
72372: IFFALSE 72422
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
72374: LD_ADDR_EXP 90
72378: PUSH
72379: LD_EXP 90
72383: PPUSH
72384: LD_VAR 0 3
72388: PUSH
72389: LD_EXP 90
72393: PUSH
72394: LD_VAR 0 3
72398: ARRAY
72399: PUSH
72400: LD_INT 1
72402: PLUS
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PPUSH
72408: LD_VAR 0 1
72412: PPUSH
72413: CALL 20104 0 3
72417: ST_TO_ADDR
// exit ;
72418: POP
72419: POP
72420: GO 72878
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
72422: LD_VAR 0 5
72426: PUSH
72427: LD_INT 0
72429: PUSH
72430: LD_INT 2
72432: PUSH
72433: LD_INT 4
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: LIST
72440: IN
72441: IFFALSE 72565
// begin if btype = b_armoury then
72443: LD_VAR 0 5
72447: PUSH
72448: LD_INT 4
72450: EQUAL
72451: IFFALSE 72461
// btype := b_barracks ;
72453: LD_ADDR_VAR 0 5
72457: PUSH
72458: LD_INT 5
72460: ST_TO_ADDR
// if btype = b_depot then
72461: LD_VAR 0 5
72465: PUSH
72466: LD_INT 0
72468: EQUAL
72469: IFFALSE 72479
// btype := b_warehouse ;
72471: LD_ADDR_VAR 0 5
72475: PUSH
72476: LD_INT 1
72478: ST_TO_ADDR
// if btype = b_workshop then
72479: LD_VAR 0 5
72483: PUSH
72484: LD_INT 2
72486: EQUAL
72487: IFFALSE 72497
// btype := b_factory ;
72489: LD_ADDR_VAR 0 5
72493: PUSH
72494: LD_INT 3
72496: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
72497: LD_VAR 0 5
72501: PPUSH
72502: LD_VAR 0 8
72506: PPUSH
72507: CALL_OW 323
72511: PUSH
72512: LD_INT 1
72514: EQUAL
72515: IFFALSE 72561
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
72517: LD_ADDR_EXP 89
72521: PUSH
72522: LD_EXP 89
72526: PPUSH
72527: LD_VAR 0 3
72531: PUSH
72532: LD_EXP 89
72536: PUSH
72537: LD_VAR 0 3
72541: ARRAY
72542: PUSH
72543: LD_INT 1
72545: PLUS
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PPUSH
72551: LD_VAR 0 1
72555: PPUSH
72556: CALL 20104 0 3
72560: ST_TO_ADDR
// exit ;
72561: POP
72562: POP
72563: GO 72878
// end ; if btype in [ b_bunker , b_turret ] then
72565: LD_VAR 0 5
72569: PUSH
72570: LD_INT 32
72572: PUSH
72573: LD_INT 33
72575: PUSH
72576: EMPTY
72577: LIST
72578: LIST
72579: IN
72580: IFFALSE 72870
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
72582: LD_ADDR_EXP 65
72586: PUSH
72587: LD_EXP 65
72591: PPUSH
72592: LD_VAR 0 3
72596: PUSH
72597: LD_EXP 65
72601: PUSH
72602: LD_VAR 0 3
72606: ARRAY
72607: PUSH
72608: LD_INT 1
72610: PLUS
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PPUSH
72616: LD_VAR 0 1
72620: PPUSH
72621: CALL 20104 0 3
72625: ST_TO_ADDR
// if btype = b_bunker then
72626: LD_VAR 0 5
72630: PUSH
72631: LD_INT 32
72633: EQUAL
72634: IFFALSE 72870
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
72636: LD_ADDR_EXP 66
72640: PUSH
72641: LD_EXP 66
72645: PPUSH
72646: LD_VAR 0 3
72650: PUSH
72651: LD_EXP 66
72655: PUSH
72656: LD_VAR 0 3
72660: ARRAY
72661: PUSH
72662: LD_INT 1
72664: PLUS
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: PPUSH
72670: LD_VAR 0 1
72674: PPUSH
72675: CALL 20104 0 3
72679: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
72680: LD_ADDR_VAR 0 6
72684: PUSH
72685: LD_EXP 57
72689: PUSH
72690: LD_VAR 0 3
72694: ARRAY
72695: PPUSH
72696: LD_INT 25
72698: PUSH
72699: LD_INT 1
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: LD_INT 3
72708: PUSH
72709: LD_INT 54
72711: PUSH
72712: EMPTY
72713: LIST
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PPUSH
72723: CALL_OW 72
72727: ST_TO_ADDR
// if tmp then
72728: LD_VAR 0 6
72732: IFFALSE 72738
// exit ;
72734: POP
72735: POP
72736: GO 72878
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
72738: LD_ADDR_VAR 0 6
72742: PUSH
72743: LD_EXP 57
72747: PUSH
72748: LD_VAR 0 3
72752: ARRAY
72753: PPUSH
72754: LD_INT 2
72756: PUSH
72757: LD_INT 30
72759: PUSH
72760: LD_INT 4
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 30
72769: PUSH
72770: LD_INT 5
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: LIST
72781: PPUSH
72782: CALL_OW 72
72786: ST_TO_ADDR
// if not tmp then
72787: LD_VAR 0 6
72791: NOT
72792: IFFALSE 72798
// exit ;
72794: POP
72795: POP
72796: GO 72878
// for j in tmp do
72798: LD_ADDR_VAR 0 4
72802: PUSH
72803: LD_VAR 0 6
72807: PUSH
72808: FOR_IN
72809: IFFALSE 72868
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
72811: LD_ADDR_VAR 0 7
72815: PUSH
72816: LD_VAR 0 4
72820: PPUSH
72821: CALL_OW 313
72825: PPUSH
72826: LD_INT 25
72828: PUSH
72829: LD_INT 1
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PPUSH
72836: CALL_OW 72
72840: ST_TO_ADDR
// if units then
72841: LD_VAR 0 7
72845: IFFALSE 72866
// begin ComExitBuilding ( units [ 1 ] ) ;
72847: LD_VAR 0 7
72851: PUSH
72852: LD_INT 1
72854: ARRAY
72855: PPUSH
72856: CALL_OW 122
// exit ;
72860: POP
72861: POP
72862: POP
72863: POP
72864: GO 72878
// end ; end ;
72866: GO 72808
72868: POP
72869: POP
// end ; end ; exit ;
72870: POP
72871: POP
72872: GO 72878
// end ; end ;
72874: GO 72232
72876: POP
72877: POP
// end ;
72878: LD_VAR 0 2
72882: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
72883: LD_INT 0
72885: PPUSH
72886: PPUSH
72887: PPUSH
72888: PPUSH
72889: PPUSH
72890: PPUSH
72891: PPUSH
// if not mc_bases then
72892: LD_EXP 57
72896: NOT
72897: IFFALSE 72901
// exit ;
72899: GO 73132
// btype := GetBType ( building ) ;
72901: LD_ADDR_VAR 0 6
72905: PUSH
72906: LD_VAR 0 1
72910: PPUSH
72911: CALL_OW 266
72915: ST_TO_ADDR
// x := GetX ( building ) ;
72916: LD_ADDR_VAR 0 7
72920: PUSH
72921: LD_VAR 0 1
72925: PPUSH
72926: CALL_OW 250
72930: ST_TO_ADDR
// y := GetY ( building ) ;
72931: LD_ADDR_VAR 0 8
72935: PUSH
72936: LD_VAR 0 1
72940: PPUSH
72941: CALL_OW 251
72945: ST_TO_ADDR
// d := GetDir ( building ) ;
72946: LD_ADDR_VAR 0 9
72950: PUSH
72951: LD_VAR 0 1
72955: PPUSH
72956: CALL_OW 254
72960: ST_TO_ADDR
// for i = 1 to mc_bases do
72961: LD_ADDR_VAR 0 4
72965: PUSH
72966: DOUBLE
72967: LD_INT 1
72969: DEC
72970: ST_TO_ADDR
72971: LD_EXP 57
72975: PUSH
72976: FOR_TO
72977: IFFALSE 73130
// begin if not mc_build_list [ i ] then
72979: LD_EXP 62
72983: PUSH
72984: LD_VAR 0 4
72988: ARRAY
72989: NOT
72990: IFFALSE 72994
// continue ;
72992: GO 72976
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
72994: LD_VAR 0 6
72998: PUSH
72999: LD_VAR 0 7
73003: PUSH
73004: LD_VAR 0 8
73008: PUSH
73009: LD_VAR 0 9
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: PPUSH
73020: LD_EXP 62
73024: PUSH
73025: LD_VAR 0 4
73029: ARRAY
73030: PUSH
73031: LD_INT 1
73033: ARRAY
73034: PPUSH
73035: CALL 25591 0 2
73039: IFFALSE 73128
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
73041: LD_ADDR_EXP 62
73045: PUSH
73046: LD_EXP 62
73050: PPUSH
73051: LD_VAR 0 4
73055: PPUSH
73056: LD_EXP 62
73060: PUSH
73061: LD_VAR 0 4
73065: ARRAY
73066: PPUSH
73067: LD_INT 1
73069: PPUSH
73070: CALL_OW 3
73074: PPUSH
73075: CALL_OW 1
73079: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
73080: LD_ADDR_EXP 64
73084: PUSH
73085: LD_EXP 64
73089: PPUSH
73090: LD_VAR 0 4
73094: PUSH
73095: LD_EXP 64
73099: PUSH
73100: LD_VAR 0 4
73104: ARRAY
73105: PUSH
73106: LD_INT 1
73108: PLUS
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PPUSH
73114: LD_VAR 0 1
73118: PPUSH
73119: CALL 20104 0 3
73123: ST_TO_ADDR
// exit ;
73124: POP
73125: POP
73126: GO 73132
// end ; end ;
73128: GO 72976
73130: POP
73131: POP
// end ;
73132: LD_VAR 0 3
73136: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
73137: LD_INT 0
73139: PPUSH
73140: PPUSH
73141: PPUSH
// if not mc_bases then
73142: LD_EXP 57
73146: NOT
73147: IFFALSE 73151
// exit ;
73149: GO 73341
// for i = 1 to mc_bases do
73151: LD_ADDR_VAR 0 4
73155: PUSH
73156: DOUBLE
73157: LD_INT 1
73159: DEC
73160: ST_TO_ADDR
73161: LD_EXP 57
73165: PUSH
73166: FOR_TO
73167: IFFALSE 73254
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
73169: LD_VAR 0 1
73173: PUSH
73174: LD_EXP 65
73178: PUSH
73179: LD_VAR 0 4
73183: ARRAY
73184: IN
73185: PUSH
73186: LD_VAR 0 1
73190: PUSH
73191: LD_EXP 66
73195: PUSH
73196: LD_VAR 0 4
73200: ARRAY
73201: IN
73202: NOT
73203: AND
73204: IFFALSE 73252
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
73206: LD_ADDR_EXP 66
73210: PUSH
73211: LD_EXP 66
73215: PPUSH
73216: LD_VAR 0 4
73220: PUSH
73221: LD_EXP 66
73225: PUSH
73226: LD_VAR 0 4
73230: ARRAY
73231: PUSH
73232: LD_INT 1
73234: PLUS
73235: PUSH
73236: EMPTY
73237: LIST
73238: LIST
73239: PPUSH
73240: LD_VAR 0 1
73244: PPUSH
73245: CALL 20104 0 3
73249: ST_TO_ADDR
// break ;
73250: GO 73254
// end ; end ;
73252: GO 73166
73254: POP
73255: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
73256: LD_VAR 0 1
73260: PPUSH
73261: CALL_OW 257
73265: PUSH
73266: LD_EXP 83
73270: IN
73271: PUSH
73272: LD_VAR 0 1
73276: PPUSH
73277: CALL_OW 266
73281: PUSH
73282: LD_INT 5
73284: EQUAL
73285: AND
73286: PUSH
73287: LD_VAR 0 2
73291: PPUSH
73292: CALL_OW 110
73296: PUSH
73297: LD_INT 18
73299: NONEQUAL
73300: AND
73301: IFFALSE 73341
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
73303: LD_VAR 0 2
73307: PPUSH
73308: CALL_OW 257
73312: PUSH
73313: LD_INT 5
73315: PUSH
73316: LD_INT 8
73318: PUSH
73319: LD_INT 9
73321: PUSH
73322: EMPTY
73323: LIST
73324: LIST
73325: LIST
73326: IN
73327: IFFALSE 73341
// SetClass ( unit , 1 ) ;
73329: LD_VAR 0 2
73333: PPUSH
73334: LD_INT 1
73336: PPUSH
73337: CALL_OW 336
// end ;
73341: LD_VAR 0 3
73345: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
73346: LD_INT 0
73348: PPUSH
73349: PPUSH
// if not mc_bases then
73350: LD_EXP 57
73354: NOT
73355: IFFALSE 73359
// exit ;
73357: GO 73475
// if GetLives ( abandoned_vehicle ) > 250 then
73359: LD_VAR 0 2
73363: PPUSH
73364: CALL_OW 256
73368: PUSH
73369: LD_INT 250
73371: GREATER
73372: IFFALSE 73376
// exit ;
73374: GO 73475
// for i = 1 to mc_bases do
73376: LD_ADDR_VAR 0 6
73380: PUSH
73381: DOUBLE
73382: LD_INT 1
73384: DEC
73385: ST_TO_ADDR
73386: LD_EXP 57
73390: PUSH
73391: FOR_TO
73392: IFFALSE 73473
// begin if driver in mc_bases [ i ] then
73394: LD_VAR 0 1
73398: PUSH
73399: LD_EXP 57
73403: PUSH
73404: LD_VAR 0 6
73408: ARRAY
73409: IN
73410: IFFALSE 73471
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
73412: LD_VAR 0 1
73416: PPUSH
73417: LD_EXP 57
73421: PUSH
73422: LD_VAR 0 6
73426: ARRAY
73427: PPUSH
73428: LD_INT 2
73430: PUSH
73431: LD_INT 30
73433: PUSH
73434: LD_INT 0
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: LD_INT 30
73443: PUSH
73444: LD_INT 1
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: EMPTY
73452: LIST
73453: LIST
73454: LIST
73455: PPUSH
73456: CALL_OW 72
73460: PUSH
73461: LD_INT 1
73463: ARRAY
73464: PPUSH
73465: CALL_OW 112
// break ;
73469: GO 73473
// end ; end ;
73471: GO 73391
73473: POP
73474: POP
// end ;
73475: LD_VAR 0 5
73479: RET
