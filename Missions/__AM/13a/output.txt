// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitVariables ;
   8: CALL 587 0 0
// InitMacro ;
  12: CALL 49017 0 0
// PrepareNature ( 3 , 3 , 3 , 4 , 3 , 0 , 0 , nature_area , 0 ) ;
  16: LD_INT 3
  18: PPUSH
  19: LD_INT 3
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 4
  27: PPUSH
  28: LD_INT 3
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: LD_INT 5
  39: PPUSH
  40: LD_INT 0
  42: PPUSH
  43: CALL 44892 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_russian , 0 ) ;
  47: LD_INT 0
  49: PPUSH
  50: LD_INT 0
  52: PPUSH
  53: LD_INT 5
  55: PPUSH
  56: LD_INT 0
  58: PPUSH
  59: LD_INT 0
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: LD_INT 0
  67: PPUSH
  68: LD_INT 8
  70: PPUSH
  71: LD_INT 0
  73: PPUSH
  74: CALL 44892 0 9
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 1 , 0 , area_apeman_arabian , 0 ) ;
  78: LD_INT 0
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 6
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: LD_INT 0
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: LD_INT 6
 101: PPUSH
 102: LD_INT 0
 104: PPUSH
 105: CALL 44892 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_alliance , 0 ) ;
 109: LD_INT 0
 111: PPUSH
 112: LD_INT 0
 114: PPUSH
 115: LD_INT 5
 117: PPUSH
 118: LD_INT 0
 120: PPUSH
 121: LD_INT 0
 123: PPUSH
 124: LD_INT 0
 126: PPUSH
 127: LD_INT 0
 129: PPUSH
 130: LD_INT 12
 132: PPUSH
 133: LD_INT 0
 135: PPUSH
 136: CALL 44892 0 9
// PrepareArabian ;
 140: CALL 3406 0 0
// PrepareRussian ;
 144: CALL 2533 0 0
// PrepareAlliance ;
 148: CALL 697 0 0
// MC_Start ( ) ;
 152: CALL 49230 0 0
// if debug then
 156: LD_EXP 1
 160: IFFALSE 169
// FogOff ( 1 ) ;
 162: LD_INT 1
 164: PPUSH
 165: CALL_OW 344
// Action ;
 169: CALL 4711 0 0
// end ;
 173: END
// export function CustomInitMacro ; var i ; begin
 174: LD_INT 0
 176: PPUSH
 177: PPUSH
// mc_parking := [ parking_arabian , parking_russian ] ;
 178: LD_ADDR_EXP 81
 182: PUSH
 183: LD_INT 1
 185: PUSH
 186: LD_INT 2
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: ST_TO_ADDR
// mc_scan_area := [ area_base_arabian , area_base_russian ] ;
 193: LD_ADDR_EXP 82
 197: PUSH
 198: LD_INT 3
 200: PUSH
 201: LD_INT 4
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 12 , 15 , 18 ] [ Difficulty ] , minefield ) ;
 208: LD_INT 1
 210: PPUSH
 211: LD_INT 12
 213: PUSH
 214: LD_INT 15
 216: PUSH
 217: LD_INT 18
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: PUSH
 225: LD_OWVAR 67
 229: ARRAY
 230: PPUSH
 231: LD_INT 7
 233: PPUSH
 234: CALL 62060 0 3
// MC_SetDefenderList ( 1 , arabian_guard ) ;
 238: LD_INT 1
 240: PPUSH
 241: LD_EXP 53
 245: PPUSH
 246: CALL 62429 0 2
// MC_SetTame ( 1 , area_apeman_arabian ) ;
 250: LD_INT 1
 252: PPUSH
 253: LD_INT 6
 255: PPUSH
 256: CALL 62786 0 2
// MC_SetCratesArea ( 1 , [ area_collect_arabian ] ) ;
 260: LD_INT 1
 262: PPUSH
 263: LD_INT 9
 265: PUSH
 266: EMPTY
 267: LIST
 268: PPUSH
 269: CALL 62928 0 2
// MC_InsertProduceList ( 1 , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 13
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: LD_INT 2
 284: PUSH
 285: LD_INT 32
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL 62366 0 2
// MC_SetLabKind ( 2 , [ b_lab_computer , b_lab_spacetime , b_lab_weapon , b_lab_siberium ] ) ;
 298: LD_INT 2
 300: PPUSH
 301: LD_INT 12
 303: PUSH
 304: LD_INT 14
 306: PUSH
 307: LD_INT 10
 309: PUSH
 310: LD_INT 11
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: PPUSH
 319: CALL 62835 0 2
// MC_SetDefenderList ( 2 , russian_guard ) ;
 323: LD_INT 2
 325: PPUSH
 326: LD_EXP 50
 330: PPUSH
 331: CALL 62429 0 2
// MC_SetTame ( 2 , area_apeman_russian ) ;
 335: LD_INT 2
 337: PPUSH
 338: LD_INT 8
 340: PPUSH
 341: CALL 62786 0 2
// MC_SetCratesArea ( 2 , [ area_collect_russian ] ) ;
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 10
 350: PUSH
 351: EMPTY
 352: LIST
 353: PPUSH
 354: CALL 62928 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 71 , 116 , 4 ] , [ b_armoury , 85 , 116 , 4 ] , [ b_bunker , 83 , 111 , 4 ] , [ b_bunker , 87 , 121 , 4 ] , [ b_turret , 88 , 128 , 4 ] , [ b_bunker , 59 , 89 , 3 ] , [ b_turret , 69 , 98 , 3 ] , [ b_turret , 77 , 103 , 3 ] , [ b_turret , 83 , 105 , 3 ] , [ b_turret , 71 , 125 , 5 ] ] ) ;
 358: LD_INT 2
 360: PPUSH
 361: LD_INT 6
 363: PUSH
 364: LD_INT 71
 366: PUSH
 367: LD_INT 116
 369: PUSH
 370: LD_INT 4
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_INT 4
 381: PUSH
 382: LD_INT 85
 384: PUSH
 385: LD_INT 116
 387: PUSH
 388: LD_INT 4
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 32
 399: PUSH
 400: LD_INT 83
 402: PUSH
 403: LD_INT 111
 405: PUSH
 406: LD_INT 4
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 32
 417: PUSH
 418: LD_INT 87
 420: PUSH
 421: LD_INT 121
 423: PUSH
 424: LD_INT 4
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 33
 435: PUSH
 436: LD_INT 88
 438: PUSH
 439: LD_INT 128
 441: PUSH
 442: LD_INT 4
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 32
 453: PUSH
 454: LD_INT 59
 456: PUSH
 457: LD_INT 89
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 33
 471: PUSH
 472: LD_INT 69
 474: PUSH
 475: LD_INT 98
 477: PUSH
 478: LD_INT 3
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 33
 489: PUSH
 490: LD_INT 77
 492: PUSH
 493: LD_INT 103
 495: PUSH
 496: LD_INT 3
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_INT 33
 507: PUSH
 508: LD_INT 83
 510: PUSH
 511: LD_INT 105
 513: PUSH
 514: LD_INT 3
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 33
 525: PUSH
 526: LD_INT 71
 528: PUSH
 529: LD_INT 125
 531: PUSH
 532: LD_INT 5
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL 62270 0 2
// MC_InsertProduceList ( 2 , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ) ;
 557: LD_INT 2
 559: PPUSH
 560: LD_INT 21
 562: PUSH
 563: LD_INT 1
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 51
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL 62366 0 2
// end ;
 582: LD_VAR 0 1
 586: RET
// export debug , game , freedom , gossudarov_arrive , ru_lab_builded , player_spotted , first_attack , ar_base_spotted , ar_active_attack , ar_attackers , first_powell_attack , abdul_escaped , loss_counter ; function InitVariables ; begin
 587: LD_INT 0
 589: PPUSH
// debug := false ;
 590: LD_ADDR_EXP 1
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// game := true ;
 598: LD_ADDR_EXP 2
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// gossudarov_arrive := false ;
 606: LD_ADDR_EXP 4
 610: PUSH
 611: LD_INT 0
 613: ST_TO_ADDR
// ru_lab_builded := false ;
 614: LD_ADDR_EXP 5
 618: PUSH
 619: LD_INT 0
 621: ST_TO_ADDR
// player_spotted := false ;
 622: LD_ADDR_EXP 6
 626: PUSH
 627: LD_INT 0
 629: ST_TO_ADDR
// first_attack := false ;
 630: LD_ADDR_EXP 7
 634: PUSH
 635: LD_INT 0
 637: ST_TO_ADDR
// ru_attackers := [ ] ;
 638: LD_ADDR_EXP 51
 642: PUSH
 643: EMPTY
 644: ST_TO_ADDR
// ar_base_spotted := false ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_INT 0
 652: ST_TO_ADDR
// ar_active_attack := false ;
 653: LD_ADDR_EXP 9
 657: PUSH
 658: LD_INT 0
 660: ST_TO_ADDR
// ar_attackers := [ ] ;
 661: LD_ADDR_EXP 10
 665: PUSH
 666: EMPTY
 667: ST_TO_ADDR
// first_powell_attack := false ;
 668: LD_ADDR_EXP 11
 672: PUSH
 673: LD_INT 0
 675: ST_TO_ADDR
// abdul_escaped := false ;
 676: LD_ADDR_EXP 12
 680: PUSH
 681: LD_INT 0
 683: ST_TO_ADDR
// loss_counter := 0 ;
 684: LD_ADDR_EXP 13
 688: PUSH
 689: LD_INT 0
 691: ST_TO_ADDR
// end ; end_of_file
 692: LD_VAR 0 1
 696: RET
// export JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export Gossudarov , Kirilenkova , Titov , Fadeev , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov ; export Burlak , Belkov , Gnyevko ; export Masha ; export function PrepareAlliance ; var veh , i , tmp ; begin
 697: LD_INT 0
 699: PPUSH
 700: PPUSH
 701: PPUSH
 702: PPUSH
// uc_side := 7 ;
 703: LD_ADDR_OWVAR 20
 707: PUSH
 708: LD_INT 7
 710: ST_TO_ADDR
// uc_nation := 1 ;
 711: LD_ADDR_OWVAR 21
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 12a_ ) ;
 719: LD_ADDR_EXP 14
 723: PUSH
 724: LD_STRING JMM
 726: PPUSH
 727: LD_EXP 1
 731: NOT
 732: PPUSH
 733: LD_STRING 12a_
 735: PPUSH
 736: CALL 11627 0 3
 740: ST_TO_ADDR
// PlaceUnitXY ( JMM , 71 , 23 , false ) ;
 741: LD_EXP 14
 745: PPUSH
 746: LD_INT 71
 748: PPUSH
 749: LD_INT 23
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL_OW 48
// SetClass ( JMM , 2 ) ;
 759: LD_EXP 14
 763: PPUSH
 764: LD_INT 2
 766: PPUSH
 767: CALL_OW 336
// Roth := PrepareUnit ( Roth , ( not debug ) , 12a_ ) ;
 771: LD_ADDR_EXP 15
 775: PUSH
 776: LD_STRING Roth
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_STRING 12a_
 787: PPUSH
 788: CALL 11627 0 3
 792: ST_TO_ADDR
// if Roth then
 793: LD_EXP 15
 797: IFFALSE 817
// PlaceUnitXY ( Roth , 71 , 21 , false ) ;
 799: LD_EXP 15
 803: PPUSH
 804: LD_INT 71
 806: PPUSH
 807: LD_INT 21
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL_OW 48
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 12a_ ) ;
 817: LD_ADDR_EXP 16
 821: PUSH
 822: LD_STRING Lisa
 824: PPUSH
 825: LD_EXP 1
 829: NOT
 830: PPUSH
 831: LD_STRING 12a_
 833: PPUSH
 834: CALL 11627 0 3
 838: ST_TO_ADDR
// if Lisa then
 839: LD_EXP 16
 843: IFFALSE 860
// PlaceUnitArea ( Lisa , alliance_start , false ) ;
 845: LD_EXP 16
 849: PPUSH
 850: LD_INT 13
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 49
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 12a_ ) ;
 860: LD_ADDR_EXP 17
 864: PUSH
 865: LD_STRING Donaldson
 867: PPUSH
 868: LD_EXP 1
 872: NOT
 873: PPUSH
 874: LD_STRING 12a_
 876: PPUSH
 877: CALL 11627 0 3
 881: ST_TO_ADDR
// if Donaldson then
 882: LD_EXP 17
 886: IFFALSE 903
// PlaceUnitArea ( Donaldson , alliance_start , false ) ;
 888: LD_EXP 17
 892: PPUSH
 893: LD_INT 13
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 49
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 12a_ ) ;
 903: LD_ADDR_EXP 18
 907: PUSH
 908: LD_STRING Bobby
 910: PPUSH
 911: LD_EXP 1
 915: NOT
 916: PPUSH
 917: LD_STRING 12a_
 919: PPUSH
 920: CALL 11627 0 3
 924: ST_TO_ADDR
// if Bobby then
 925: LD_EXP 18
 929: IFFALSE 946
// PlaceUnitArea ( Bobby , alliance_start , false ) ;
 931: LD_EXP 18
 935: PPUSH
 936: LD_INT 13
 938: PPUSH
 939: LD_INT 0
 941: PPUSH
 942: CALL_OW 49
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 12a_ ) ;
 946: LD_ADDR_EXP 19
 950: PUSH
 951: LD_STRING Cyrus
 953: PPUSH
 954: LD_EXP 1
 958: NOT
 959: PPUSH
 960: LD_STRING 12a_
 962: PPUSH
 963: CALL 11627 0 3
 967: ST_TO_ADDR
// if Cyrus then
 968: LD_EXP 19
 972: IFFALSE 989
// PlaceUnitArea ( Cyrus , alliance_start , false ) ;
 974: LD_EXP 19
 978: PPUSH
 979: LD_INT 13
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 49
// Denis := PrepareUnit ( Denis , ( not debug ) , 12a_ ) ;
 989: LD_ADDR_EXP 20
 993: PUSH
 994: LD_STRING Denis
 996: PPUSH
 997: LD_EXP 1
1001: NOT
1002: PPUSH
1003: LD_STRING 12a_
1005: PPUSH
1006: CALL 11627 0 3
1010: ST_TO_ADDR
// if Denis then
1011: LD_EXP 20
1015: IFFALSE 1032
// PlaceUnitArea ( Denis , alliance_start , false ) ;
1017: LD_EXP 20
1021: PPUSH
1022: LD_INT 13
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// Brown := PrepareUnit ( Brown , ( not debug ) , 12a_ ) ;
1032: LD_ADDR_EXP 21
1036: PUSH
1037: LD_STRING Brown
1039: PPUSH
1040: LD_EXP 1
1044: NOT
1045: PPUSH
1046: LD_STRING 12a_
1048: PPUSH
1049: CALL 11627 0 3
1053: ST_TO_ADDR
// if Brown then
1054: LD_EXP 21
1058: IFFALSE 1075
// PlaceUnitArea ( Brown , alliance_start , false ) ;
1060: LD_EXP 21
1064: PPUSH
1065: LD_INT 13
1067: PPUSH
1068: LD_INT 0
1070: PPUSH
1071: CALL_OW 49
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 12a_ ) ;
1075: LD_ADDR_EXP 22
1079: PUSH
1080: LD_STRING Gladstone
1082: PPUSH
1083: LD_EXP 1
1087: NOT
1088: PPUSH
1089: LD_STRING 12a_
1091: PPUSH
1092: CALL 11627 0 3
1096: ST_TO_ADDR
// if Gladstone then
1097: LD_EXP 22
1101: IFFALSE 1118
// PlaceUnitArea ( Gladstone , alliance_start , false ) ;
1103: LD_EXP 22
1107: PPUSH
1108: LD_INT 13
1110: PPUSH
1111: LD_INT 0
1113: PPUSH
1114: CALL_OW 49
// Houten := PrepareUnit ( Houten , ( not debug ) , 12a_ ) ;
1118: LD_ADDR_EXP 23
1122: PUSH
1123: LD_STRING Houten
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_STRING 12a_
1134: PPUSH
1135: CALL 11627 0 3
1139: ST_TO_ADDR
// if Houten then
1140: LD_EXP 23
1144: IFFALSE 1161
// PlaceUnitArea ( Houten , alliance_start , false ) ;
1146: LD_EXP 23
1150: PPUSH
1151: LD_INT 13
1153: PPUSH
1154: LD_INT 0
1156: PPUSH
1157: CALL_OW 49
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 12a_ ) ;
1161: LD_ADDR_EXP 24
1165: PUSH
1166: LD_STRING Cornel
1168: PPUSH
1169: LD_EXP 1
1173: NOT
1174: PPUSH
1175: LD_STRING 12a_
1177: PPUSH
1178: CALL 11627 0 3
1182: ST_TO_ADDR
// if Cornel then
1183: LD_EXP 24
1187: IFFALSE 1204
// PlaceUnitArea ( Cornel , alliance_start , false ) ;
1189: LD_EXP 24
1193: PPUSH
1194: LD_INT 13
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 49
// Gary := PrepareUnit ( Gary , ( not debug ) , 12a_ ) ;
1204: LD_ADDR_EXP 25
1208: PUSH
1209: LD_STRING Gary
1211: PPUSH
1212: LD_EXP 1
1216: NOT
1217: PPUSH
1218: LD_STRING 12a_
1220: PPUSH
1221: CALL 11627 0 3
1225: ST_TO_ADDR
// if Gary then
1226: LD_EXP 25
1230: IFFALSE 1247
// PlaceUnitArea ( Gary , alliance_start , false ) ;
1232: LD_EXP 25
1236: PPUSH
1237: LD_INT 13
1239: PPUSH
1240: LD_INT 0
1242: PPUSH
1243: CALL_OW 49
// Frank := PrepareUnit ( Frank , ( not debug ) , 12a_ ) ;
1247: LD_ADDR_EXP 26
1251: PUSH
1252: LD_STRING Frank
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_STRING 12a_
1263: PPUSH
1264: CALL 11627 0 3
1268: ST_TO_ADDR
// if Frank then
1269: LD_EXP 26
1273: IFFALSE 1290
// PlaceUnitArea ( Frank , alliance_start , false ) ;
1275: LD_EXP 26
1279: PPUSH
1280: LD_INT 13
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 49
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 12a_ ) ;
1290: LD_ADDR_EXP 27
1294: PUSH
1295: LD_STRING Kikuchi
1297: PPUSH
1298: LD_EXP 1
1302: NOT
1303: PPUSH
1304: LD_STRING 12a_
1306: PPUSH
1307: CALL 11627 0 3
1311: ST_TO_ADDR
// if Kikuchi then
1312: LD_EXP 27
1316: IFFALSE 1333
// PlaceUnitArea ( Kikuchi , alliance_start , false ) ;
1318: LD_EXP 27
1322: PPUSH
1323: LD_INT 13
1325: PPUSH
1326: LD_INT 0
1328: PPUSH
1329: CALL_OW 49
// Simms := PrepareUnit ( Simms , ( not debug ) , 12a_ ) ;
1333: LD_ADDR_EXP 28
1337: PUSH
1338: LD_STRING Simms
1340: PPUSH
1341: LD_EXP 1
1345: NOT
1346: PPUSH
1347: LD_STRING 12a_
1349: PPUSH
1350: CALL 11627 0 3
1354: ST_TO_ADDR
// if Simms then
1355: LD_EXP 28
1359: IFFALSE 1376
// PlaceUnitArea ( Simms , alliance_start , false ) ;
1361: LD_EXP 28
1365: PPUSH
1366: LD_INT 13
1368: PPUSH
1369: LD_INT 0
1371: PPUSH
1372: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 12a_ ) ;
1376: LD_ADDR_EXP 29
1380: PUSH
1381: LD_STRING Joan
1383: PPUSH
1384: LD_EXP 1
1388: NOT
1389: PPUSH
1390: LD_STRING 12a_
1392: PPUSH
1393: CALL 11627 0 3
1397: ST_TO_ADDR
// if Joan then
1398: LD_EXP 29
1402: IFFALSE 1419
// PlaceUnitArea ( Joan , alliance_start , false ) ;
1404: LD_EXP 29
1408: PPUSH
1409: LD_INT 13
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 12a_ ) ;
1419: LD_ADDR_EXP 30
1423: PUSH
1424: LD_STRING DeltaDoctor
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_STRING 12a_
1435: PPUSH
1436: CALL 11627 0 3
1440: ST_TO_ADDR
// if DeltaDoctor then
1441: LD_EXP 30
1445: IFFALSE 1462
// PlaceUnitArea ( DeltaDoctor , alliance_start , false ) ;
1447: LD_EXP 30
1451: PPUSH
1452: LD_INT 13
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// tmp := CreateCharacterSet ( 12a_others ) ;
1462: LD_ADDR_VAR 0 4
1466: PUSH
1467: LD_STRING 12a_others
1469: PPUSH
1470: CALL_OW 31
1474: ST_TO_ADDR
// if tmp then
1475: LD_VAR 0 4
1479: IFFALSE 1513
// for i in tmp do
1481: LD_ADDR_VAR 0 3
1485: PUSH
1486: LD_VAR 0 4
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1511
// PlaceUnitArea ( i , alliance_start , false ) ;
1494: LD_VAR 0 3
1498: PPUSH
1499: LD_INT 13
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 49
1509: GO 1491
1511: POP
1512: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1513: LD_INT 3
1515: PPUSH
1516: LD_INT 3
1518: PPUSH
1519: LD_INT 3
1521: PPUSH
1522: LD_INT 12
1524: PPUSH
1525: LD_INT 100
1527: PPUSH
1528: CALL 17608 0 5
// veh := CreateVehicle ;
1532: LD_ADDR_VAR 0 2
1536: PUSH
1537: CALL_OW 45
1541: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1542: LD_VAR 0 2
1546: PPUSH
1547: LD_INT 2
1549: PPUSH
1550: CALL_OW 233
// PlaceUnitXY ( veh , 63 , 9 , false ) ;
1554: LD_VAR 0 2
1558: PPUSH
1559: LD_INT 63
1561: PPUSH
1562: LD_INT 9
1564: PPUSH
1565: LD_INT 0
1567: PPUSH
1568: CALL_OW 48
// SetCargo ( veh , mat_artifact , 30 ) ;
1572: LD_VAR 0 2
1576: PPUSH
1577: LD_INT 4
1579: PPUSH
1580: LD_INT 30
1582: PPUSH
1583: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , debug ) then
1587: LD_STRING 11_artifact_captured
1589: PPUSH
1590: LD_EXP 1
1594: PPUSH
1595: CALL_OW 30
1599: IFFALSE 1675
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1601: LD_INT 3
1603: PPUSH
1604: LD_INT 3
1606: PPUSH
1607: LD_INT 3
1609: PPUSH
1610: LD_INT 12
1612: PPUSH
1613: LD_INT 100
1615: PPUSH
1616: CALL 17608 0 5
// veh := CreateVehicle ;
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: CALL_OW 45
1629: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1630: LD_VAR 0 2
1634: PPUSH
1635: LD_INT 2
1637: PPUSH
1638: CALL_OW 233
// PlaceUnitXY ( veh , 60 , 4 , false ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_INT 60
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 0
1655: PPUSH
1656: CALL_OW 48
// SetCargo ( veh , mat_artifact , 50 ) ;
1660: LD_VAR 0 2
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: LD_INT 50
1670: PPUSH
1671: CALL_OW 290
// end ; end ;
1675: LD_VAR 0 1
1679: RET
// export function PrepareGossudarov ; var tmp , i ; begin
1680: LD_INT 0
1682: PPUSH
1683: PPUSH
1684: PPUSH
// uc_side := 6 ;
1685: LD_ADDR_OWVAR 20
1689: PUSH
1690: LD_INT 6
1692: ST_TO_ADDR
// uc_nation := 3 ;
1693: LD_ADDR_OWVAR 21
1697: PUSH
1698: LD_INT 3
1700: ST_TO_ADDR
// InitHc ;
1701: CALL_OW 19
// Gossudarov := NewCharacter ( Gossudarov ) ;
1705: LD_ADDR_EXP 31
1709: PUSH
1710: LD_STRING Gossudarov
1712: PPUSH
1713: CALL_OW 25
1717: ST_TO_ADDR
// Kirilenkova := NewCharacter ( Kirilenkova ) ;
1718: LD_ADDR_EXP 32
1722: PUSH
1723: LD_STRING Kirilenkova
1725: PPUSH
1726: CALL_OW 25
1730: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
1731: LD_ADDR_EXP 33
1735: PUSH
1736: LD_STRING Titov
1738: PPUSH
1739: CALL_OW 25
1743: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
1744: LD_ADDR_EXP 38
1748: PUSH
1749: LD_STRING Oblukov
1751: PPUSH
1752: CALL_OW 25
1756: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
1757: LD_ADDR_EXP 35
1761: PUSH
1762: LD_STRING Dolgov
1764: PPUSH
1765: CALL_OW 25
1769: ST_TO_ADDR
// Petrosyan := NewCharacter ( Petrosyan ) ;
1770: LD_ADDR_EXP 36
1774: PUSH
1775: LD_STRING Petrosyan
1777: PPUSH
1778: CALL_OW 25
1782: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
1783: LD_ADDR_EXP 37
1787: PUSH
1788: LD_STRING Scholtze
1790: PPUSH
1791: CALL_OW 25
1795: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
1796: LD_ADDR_EXP 39
1800: PUSH
1801: LD_STRING Kapitsova
1803: PPUSH
1804: CALL_OW 25
1808: ST_TO_ADDR
// tmp := [ Gossudarov , Kirilenkova , Titov , Oblukov , Dolgov , Petrosyan , Scholtze , Kapitsova ] ;
1809: LD_ADDR_VAR 0 2
1813: PUSH
1814: LD_EXP 31
1818: PUSH
1819: LD_EXP 32
1823: PUSH
1824: LD_EXP 33
1828: PUSH
1829: LD_EXP 38
1833: PUSH
1834: LD_EXP 35
1838: PUSH
1839: LD_EXP 36
1843: PUSH
1844: LD_EXP 37
1848: PUSH
1849: LD_EXP 39
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: ST_TO_ADDR
// for i in tmp do
1864: LD_ADDR_VAR 0 3
1868: PUSH
1869: LD_VAR 0 2
1873: PUSH
1874: FOR_IN
1875: IFFALSE 1894
// PlaceUnitArea ( i , gossudarov_spawn , false ) ;
1877: LD_VAR 0 3
1881: PPUSH
1882: LD_INT 14
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL_OW 49
1892: GO 1874
1894: POP
1895: POP
// ComMoveXY ( tmp , GetX ( freedom ) , GetY ( freedom ) ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_EXP 3
1905: PPUSH
1906: CALL_OW 250
1910: PPUSH
1911: LD_EXP 3
1915: PPUSH
1916: CALL_OW 251
1920: PPUSH
1921: CALL_OW 111
// end ;
1925: LD_VAR 0 1
1929: RET
// export function PrepareBelkov ; begin
1930: LD_INT 0
1932: PPUSH
// uc_side := 4 ;
1933: LD_ADDR_OWVAR 20
1937: PUSH
1938: LD_INT 4
1940: ST_TO_ADDR
// uc_nation := 3 ;
1941: LD_ADDR_OWVAR 21
1945: PUSH
1946: LD_INT 3
1948: ST_TO_ADDR
// InitHc ;
1949: CALL_OW 19
// Belkov := NewCharacter ( Belkov ) ;
1953: LD_ADDR_EXP 46
1957: PUSH
1958: LD_STRING Belkov
1960: PPUSH
1961: CALL_OW 25
1965: ST_TO_ADDR
// PlaceUnitArea ( Belkov , gossudarov_spawn , false ) ;
1966: LD_EXP 46
1970: PPUSH
1971: LD_INT 14
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 49
// end ;
1981: LD_VAR 0 1
1985: RET
// export function PrepareGnyevko ; begin
1986: LD_INT 0
1988: PPUSH
// uc_side := 4 ;
1989: LD_ADDR_OWVAR 20
1993: PUSH
1994: LD_INT 4
1996: ST_TO_ADDR
// uc_nation := 3 ;
1997: LD_ADDR_OWVAR 21
2001: PUSH
2002: LD_INT 3
2004: ST_TO_ADDR
// InitHc ;
2005: CALL_OW 19
// Gnyevko := NewCharacter ( Gnyevko ) ;
2009: LD_ADDR_EXP 47
2013: PUSH
2014: LD_STRING Gnyevko
2016: PPUSH
2017: CALL_OW 25
2021: ST_TO_ADDR
// PlaceUnitArea ( Gnyevko , gossudarov_spawn , false ) ;
2022: LD_EXP 47
2026: PPUSH
2027: LD_INT 14
2029: PPUSH
2030: LD_INT 0
2032: PPUSH
2033: CALL_OW 49
// end ;
2037: LD_VAR 0 1
2041: RET
// export function PrepareBurlak ; var i , tmp ; begin
2042: LD_INT 0
2044: PPUSH
2045: PPUSH
2046: PPUSH
// uc_side := 4 ;
2047: LD_ADDR_OWVAR 20
2051: PUSH
2052: LD_INT 4
2054: ST_TO_ADDR
// uc_nation := 3 ;
2055: LD_ADDR_OWVAR 21
2059: PUSH
2060: LD_INT 3
2062: ST_TO_ADDR
// InitHc ;
2063: CALL_OW 19
// Burlak := NewCharacter ( Burlak ) ;
2067: LD_ADDR_EXP 45
2071: PUSH
2072: LD_STRING Burlak
2074: PPUSH
2075: CALL_OW 25
2079: ST_TO_ADDR
// PrepareVehicle ( [ ru_heavy_tracked , ru_heavy_wheeled , ru_medium_tracked ] [ Difficulty ] , engine_combustion , control_manual , ru_rocket_launcher , 0 ) ;
2080: LD_INT 24
2082: PUSH
2083: LD_INT 23
2085: PUSH
2086: LD_INT 22
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: PUSH
2094: LD_OWVAR 67
2098: ARRAY
2099: PPUSH
2100: LD_INT 1
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 45
2108: PPUSH
2109: LD_INT 0
2111: PPUSH
2112: CALL 17608 0 5
// Masha := CreateVehicle ;
2116: LD_ADDR_EXP 48
2120: PUSH
2121: CALL_OW 45
2125: ST_TO_ADDR
// SetLives ( [ Masha , Burlak ] , 499 ) ;
2126: LD_EXP 48
2130: PUSH
2131: LD_EXP 45
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PPUSH
2140: LD_INT 499
2142: PPUSH
2143: CALL_OW 234
// SetDir ( Masha , 3 ) ;
2147: LD_EXP 48
2151: PPUSH
2152: LD_INT 3
2154: PPUSH
2155: CALL_OW 233
// SetMark ( Masha , 1 ) ;
2159: LD_EXP 48
2163: PPUSH
2164: LD_INT 1
2166: PPUSH
2167: CALL_OW 242
// PlaceUnitArea ( Masha , burlak_spawn , false ) ;
2171: LD_EXP 48
2175: PPUSH
2176: LD_INT 18
2178: PPUSH
2179: LD_INT 0
2181: PPUSH
2182: CALL_OW 49
// PlaceUnitXY ( Burlak , 125 , 1 , false ) ;
2186: LD_EXP 45
2190: PPUSH
2191: LD_INT 125
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: LD_INT 0
2199: PPUSH
2200: CALL_OW 48
// ComMoveUnit ( Burlak , Masha ) ;
2204: LD_EXP 45
2208: PPUSH
2209: LD_EXP 48
2213: PPUSH
2214: CALL_OW 112
// wait ( 0 0$0.3 ) ;
2218: LD_INT 10
2220: PPUSH
2221: CALL_OW 67
// AddComMoveXY ( Masha , 110 , 10 ) ;
2225: LD_EXP 48
2229: PPUSH
2230: LD_INT 110
2232: PPUSH
2233: LD_INT 10
2235: PPUSH
2236: CALL_OW 171
// Petrovova := NewCharacter ( Petrovova ) ;
2240: LD_ADDR_EXP 41
2244: PUSH
2245: LD_STRING Petrovova
2247: PPUSH
2248: CALL_OW 25
2252: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
2253: LD_ADDR_EXP 43
2257: PUSH
2258: LD_STRING Kuzmov
2260: PPUSH
2261: CALL_OW 25
2265: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
2266: LD_ADDR_EXP 42
2270: PUSH
2271: LD_STRING Kovalyuk
2273: PPUSH
2274: CALL_OW 25
2278: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
2279: LD_ADDR_EXP 40
2283: PUSH
2284: LD_STRING Lipshchin
2286: PPUSH
2287: CALL_OW 25
2291: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
2292: LD_ADDR_EXP 44
2296: PUSH
2297: LD_STRING Karamazov
2299: PPUSH
2300: CALL_OW 25
2304: ST_TO_ADDR
// tmp := [ Petrovova , Kuzmov , Kovalyuk , Lipshchin , Karamazov ] ;
2305: LD_ADDR_VAR 0 3
2309: PUSH
2310: LD_EXP 41
2314: PUSH
2315: LD_EXP 43
2319: PUSH
2320: LD_EXP 42
2324: PUSH
2325: LD_EXP 40
2329: PUSH
2330: LD_EXP 44
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// for i in tmp do
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_VAR 0 3
2351: PUSH
2352: FOR_IN
2353: IFFALSE 2392
// begin SetLives ( i , rand ( 399 , 799 ) ) ;
2355: LD_VAR 0 2
2359: PPUSH
2360: LD_INT 399
2362: PPUSH
2363: LD_INT 799
2365: PPUSH
2366: CALL_OW 12
2370: PPUSH
2371: CALL_OW 234
// PlaceUnitArea ( i , burlak_friends_spawn , false ) ;
2375: LD_VAR 0 2
2379: PPUSH
2380: LD_INT 19
2382: PPUSH
2383: LD_INT 0
2385: PPUSH
2386: CALL_OW 49
// end ;
2390: GO 2352
2392: POP
2393: POP
// ComMoveXY ( tmp , 116 , 8 ) ;
2394: LD_VAR 0 3
2398: PPUSH
2399: LD_INT 116
2401: PPUSH
2402: LD_INT 8
2404: PPUSH
2405: CALL_OW 111
// AddComHold ( tmp ) ;
2409: LD_VAR 0 3
2413: PPUSH
2414: CALL_OW 200
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
2418: LD_ADDR_VAR 0 2
2422: PUSH
2423: LD_VAR 0 3
2427: PPUSH
2428: LD_INT 25
2430: PUSH
2431: LD_INT 1
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PPUSH
2438: CALL_OW 72
2442: PUSH
2443: FOR_IN
2444: IFFALSE 2484
// begin AddComMoveToArea ( i , burlak_crawl_area ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 20
2453: PPUSH
2454: CALL_OW 173
// AddComTurnXY ( i , 147 , 45 ) ;
2458: LD_VAR 0 2
2462: PPUSH
2463: LD_INT 147
2465: PPUSH
2466: LD_INT 45
2468: PPUSH
2469: CALL_OW 178
// AddComCrawl ( i ) ;
2473: LD_VAR 0 2
2477: PPUSH
2478: CALL_OW 197
// end ;
2482: GO 2443
2484: POP
2485: POP
// repeat wait ( 0 0$1 ) ;
2486: LD_INT 35
2488: PPUSH
2489: CALL_OW 67
// until IsAt ( Masha , 110 , 10 ) ;
2493: LD_EXP 48
2497: PPUSH
2498: LD_INT 110
2500: PPUSH
2501: LD_INT 10
2503: PPUSH
2504: CALL_OW 307
2508: IFFALSE 2486
// ComStop ( Burlak ) ;
2510: LD_EXP 45
2514: PPUSH
2515: CALL_OW 141
// AddComHold ( Burlak ) ;
2519: LD_EXP 45
2523: PPUSH
2524: CALL_OW 200
// end ; end_of_file
2528: LD_VAR 0 1
2532: RET
// export russian_force , russian_guard , ru_attackers ; export function PrepareRussian ; var i , veh , tmp ; begin
2533: LD_INT 0
2535: PPUSH
2536: PPUSH
2537: PPUSH
2538: PPUSH
// uc_side := 3 ;
2539: LD_ADDR_OWVAR 20
2543: PUSH
2544: LD_INT 3
2546: ST_TO_ADDR
// uc_nation := 3 ;
2547: LD_ADDR_OWVAR 21
2551: PUSH
2552: LD_INT 3
2554: ST_TO_ADDR
// russian_force := PrepareBase ( ru_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 10000 , 3000 , 300 ] , [ 9 , 5 , 6 , 6 ] ) ;
2555: LD_ADDR_EXP 49
2559: PUSH
2560: LD_INT 47
2562: PPUSH
2563: LD_STRING 
2565: PPUSH
2566: LD_INT 7
2568: PUSH
2569: LD_INT 8
2571: PUSH
2572: LD_INT 9
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: LIST
2579: PUSH
2580: LD_OWVAR 67
2584: ARRAY
2585: PPUSH
2586: LD_INT 10000
2588: PUSH
2589: LD_INT 3000
2591: PUSH
2592: LD_INT 300
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: LD_INT 9
2602: PUSH
2603: LD_INT 5
2605: PUSH
2606: LD_INT 6
2608: PUSH
2609: LD_INT 6
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: PPUSH
2618: CALL 21007 0 5
2622: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , russian_force ) ;
2623: LD_ADDR_EXP 57
2627: PUSH
2628: LD_EXP 57
2632: PPUSH
2633: LD_INT 2
2635: PPUSH
2636: LD_EXP 49
2640: PPUSH
2641: CALL_OW 1
2645: ST_TO_ADDR
// tmp := [ ] ;
2646: LD_ADDR_VAR 0 4
2650: PUSH
2651: EMPTY
2652: ST_TO_ADDR
// for i = 1 to 4 do
2653: LD_ADDR_VAR 0 2
2657: PUSH
2658: DOUBLE
2659: LD_INT 1
2661: DEC
2662: ST_TO_ADDR
2663: LD_INT 4
2665: PUSH
2666: FOR_TO
2667: IFFALSE 2760
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun ] [ i mod 4 + 1 ] , 100 ) ;
2669: LD_INT 22
2671: PPUSH
2672: LD_INT 3
2674: PPUSH
2675: LD_INT 3
2677: PPUSH
2678: LD_INT 43
2680: PUSH
2681: LD_INT 45
2683: PUSH
2684: LD_INT 45
2686: PUSH
2687: LD_INT 44
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: PUSH
2696: LD_VAR 0 2
2700: PUSH
2701: LD_INT 4
2703: MOD
2704: PUSH
2705: LD_INT 1
2707: PLUS
2708: ARRAY
2709: PPUSH
2710: LD_INT 100
2712: PPUSH
2713: CALL 17608 0 5
// veh := CreateVehicle ;
2717: LD_ADDR_VAR 0 3
2721: PUSH
2722: CALL_OW 45
2726: ST_TO_ADDR
// tmp := tmp ^ veh ;
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: LD_VAR 0 4
2736: PUSH
2737: LD_VAR 0 3
2741: ADD
2742: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_russian , false ) ;
2743: LD_VAR 0 3
2747: PPUSH
2748: LD_INT 2
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: CALL_OW 49
// end ;
2758: GO 2666
2760: POP
2761: POP
// russian_guard := tmp ;
2762: LD_ADDR_EXP 50
2766: PUSH
2767: LD_VAR 0 4
2771: ST_TO_ADDR
// end ;
2772: LD_VAR 0 1
2776: RET
// every 6 6$00 + 2 2$00 trigger IsOk ( ru_depot ) and player_spotted do var i , base , tmp , flags , _target , attackers ;
2777: LD_INT 47
2779: PPUSH
2780: CALL_OW 302
2784: PUSH
2785: LD_EXP 6
2789: AND
2790: IFFALSE 3403
2792: GO 2794
2794: DISABLE
2795: LD_INT 0
2797: PPUSH
2798: PPUSH
2799: PPUSH
2800: PPUSH
2801: PPUSH
2802: PPUSH
// begin enable ;
2803: ENABLE
// base := 2 ;
2804: LD_ADDR_VAR 0 2
2808: PUSH
2809: LD_INT 2
2811: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
2812: LD_ADDR_VAR 0 4
2816: PUSH
2817: LD_INT 0
2819: PUSH
2820: LD_INT 0
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: LD_INT 0
2828: PUSH
2829: LD_INT 0
2831: PUSH
2832: LD_INT 0
2834: PUSH
2835: LD_INT 0
2837: PUSH
2838: LD_INT 0
2840: PUSH
2841: LD_INT 1
2843: PUSH
2844: LD_INT 0
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: ST_TO_ADDR
// tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] ] ;
2859: LD_ADDR_VAR 0 3
2863: PUSH
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: LD_INT 3
2872: PUSH
2873: LD_INT 45
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: LD_INT 21
2884: PUSH
2885: LD_INT 1
2887: PUSH
2888: LD_INT 3
2890: PUSH
2891: LD_INT 45
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: PUSH
2900: LD_INT 22
2902: PUSH
2903: LD_INT 1
2905: PUSH
2906: LD_INT 3
2908: PUSH
2909: LD_INT 45
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 23
2920: PUSH
2921: LD_INT 1
2923: PUSH
2924: LD_INT 3
2926: PUSH
2927: LD_INT 46
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
2942: LD_ADDR_VAR 0 1
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_OWVAR 67
2956: PUSH
2957: LD_OWVAR 1
2961: PUSH
2962: LD_INT 21000
2964: DIV
2965: PLUS
2966: PUSH
2967: FOR_TO
2968: IFFALSE 3056
// tmp := Insert ( tmp , tmp + 1 , [ [ ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
2970: LD_ADDR_VAR 0 3
2974: PUSH
2975: LD_VAR 0 3
2979: PPUSH
2980: LD_VAR 0 3
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: PPUSH
2989: LD_INT 23
2991: PUSH
2992: LD_INT 24
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 1
3001: PPUSH
3002: LD_INT 2
3004: PPUSH
3005: CALL_OW 12
3009: ARRAY
3010: PUSH
3011: LD_INT 1
3013: PUSH
3014: LD_INT 3
3016: PUSH
3017: LD_INT 46
3019: PUSH
3020: LD_INT 47
3022: PUSH
3023: LD_INT 45
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 1
3033: PPUSH
3034: LD_INT 3
3036: PPUSH
3037: CALL_OW 12
3041: ARRAY
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 2
3053: ST_TO_ADDR
3054: GO 2967
3056: POP
3057: POP
// MC_SetProduceList ( base , tmp ) ;
3058: LD_VAR 0 2
3062: PPUSH
3063: LD_VAR 0 3
3067: PPUSH
3068: CALL 62318 0 2
// repeat wait ( 0 0$1 ) ;
3072: LD_INT 35
3074: PPUSH
3075: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
3079: LD_VAR 0 2
3083: PPUSH
3084: CALL 62679 0 1
3088: PUSH
3089: LD_INT 0
3091: EQUAL
3092: IFFALSE 3072
// wait ( 0 0$20 ) ;
3094: LD_INT 700
3096: PPUSH
3097: CALL_OW 67
// _target := [ [ 71 , 19 ] , [ 91 , 67 ] , [ 52 , 44 ] , [ 68 , 48 ] ] ;
3101: LD_ADDR_VAR 0 5
3105: PUSH
3106: LD_INT 71
3108: PUSH
3109: LD_INT 19
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 91
3118: PUSH
3119: LD_INT 67
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 52
3128: PUSH
3129: LD_INT 44
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 68
3138: PUSH
3139: LD_INT 48
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] ] ) ) ;
3152: LD_ADDR_VAR 0 6
3156: PUSH
3157: LD_EXP 76
3161: PUSH
3162: LD_VAR 0 2
3166: ARRAY
3167: PUSH
3168: LD_EXP 79
3172: PUSH
3173: LD_VAR 0 2
3177: ARRAY
3178: PUSH
3179: LD_EXP 76
3183: PUSH
3184: LD_VAR 0 2
3188: ARRAY
3189: PPUSH
3190: LD_INT 2
3192: PUSH
3193: LD_INT 34
3195: PUSH
3196: LD_INT 51
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 34
3205: PUSH
3206: LD_INT 52
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: LIST
3217: PPUSH
3218: CALL_OW 72
3222: UNION
3223: DIFF
3224: ST_TO_ADDR
// if not attackers then
3225: LD_VAR 0 6
3229: NOT
3230: IFFALSE 3234
// exit ;
3232: GO 3403
// ru_attackers := attackers ;
3234: LD_ADDR_EXP 51
3238: PUSH
3239: LD_VAR 0 6
3243: ST_TO_ADDR
// for i = 1 to attackers do
3244: LD_ADDR_VAR 0 1
3248: PUSH
3249: DOUBLE
3250: LD_INT 1
3252: DEC
3253: ST_TO_ADDR
3254: LD_VAR 0 6
3258: PUSH
3259: FOR_TO
3260: IFFALSE 3337
// begin case i mod 3 of 0 :
3262: LD_VAR 0 1
3266: PUSH
3267: LD_INT 3
3269: MOD
3270: PUSH
3271: LD_INT 0
3273: DOUBLE
3274: EQUAL
3275: IFTRUE 3279
3277: GO 3282
3279: POP
// ; 1 :
3280: GO 3335
3282: LD_INT 1
3284: DOUBLE
3285: EQUAL
3286: IFTRUE 3290
3288: GO 3308
3290: POP
// ComAgressiveMove ( i , 32 , 49 ) ; 2 :
3291: LD_VAR 0 1
3295: PPUSH
3296: LD_INT 32
3298: PPUSH
3299: LD_INT 49
3301: PPUSH
3302: CALL_OW 114
3306: GO 3335
3308: LD_INT 2
3310: DOUBLE
3311: EQUAL
3312: IFTRUE 3316
3314: GO 3334
3316: POP
// ComAgressiveMove ( i , 117 , 107 ) ; end ;
3317: LD_VAR 0 1
3321: PPUSH
3322: LD_INT 117
3324: PPUSH
3325: LD_INT 107
3327: PPUSH
3328: CALL_OW 114
3332: GO 3335
3334: POP
// end ;
3335: GO 3259
3337: POP
3338: POP
// repeat wait ( 0 0$1 ) ;
3339: LD_INT 35
3341: PPUSH
3342: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
3346: LD_VAR 0 6
3350: PPUSH
3351: LD_INT 60
3353: PUSH
3354: EMPTY
3355: LIST
3356: PPUSH
3357: CALL_OW 72
3361: NOT
3362: IFFALSE 3339
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
3364: LD_VAR 0 2
3368: PPUSH
3369: LD_VAR 0 6
3373: PPUSH
3374: LD_VAR 0 5
3378: PPUSH
3379: LD_VAR 0 4
3383: PPUSH
3384: CALL 62564 0 4
// if not first_attack then
3388: LD_EXP 7
3392: NOT
3393: IFFALSE 3403
// first_attack := true ;
3395: LD_ADDR_EXP 7
3399: PUSH
3400: LD_INT 1
3402: ST_TO_ADDR
// end ; end_of_file
3403: PPOPN 6
3405: END
// export arabian_force , arabian_guard , Abdul , mastodont ; export function PrepareArabian ; var i , veh , tmp , xy , un , un2 ; begin
3406: LD_INT 0
3408: PPUSH
3409: PPUSH
3410: PPUSH
3411: PPUSH
3412: PPUSH
3413: PPUSH
3414: PPUSH
// uc_side := 2 ;
3415: LD_ADDR_OWVAR 20
3419: PUSH
3420: LD_INT 2
3422: ST_TO_ADDR
// uc_nation := 2 ;
3423: LD_ADDR_OWVAR 21
3427: PUSH
3428: LD_INT 2
3430: ST_TO_ADDR
// Abdul := NewCharacter ( Abdul ) ;
3431: LD_ADDR_EXP 54
3435: PUSH
3436: LD_STRING Abdul
3438: PPUSH
3439: CALL_OW 25
3443: ST_TO_ADDR
// SetClass ( Abdul , class_desert_warior ) ;
3444: LD_EXP 54
3448: PPUSH
3449: LD_INT 11
3451: PPUSH
3452: CALL_OW 336
// PlaceHumanInUnit ( Abdul , ar_depot ) ;
3456: LD_EXP 54
3460: PPUSH
3461: LD_INT 1
3463: PPUSH
3464: CALL_OW 52
// vc_chassis := 31 ;
3468: LD_ADDR_OWVAR 37
3472: PUSH
3473: LD_INT 31
3475: ST_TO_ADDR
// vc_control := control_rider ;
3476: LD_ADDR_OWVAR 38
3480: PUSH
3481: LD_INT 4
3483: ST_TO_ADDR
// mastodont := CreateVehicle ;
3484: LD_ADDR_EXP 55
3488: PUSH
3489: CALL_OW 45
3493: ST_TO_ADDR
// PlaceUnitXY ( mastodont , 153 , 71 , false ) ;
3494: LD_EXP 55
3498: PPUSH
3499: LD_INT 153
3501: PPUSH
3502: LD_INT 71
3504: PPUSH
3505: LD_INT 0
3507: PPUSH
3508: CALL_OW 48
// InitVc ;
3512: CALL_OW 20
// arabian_force := PrepareBase ( ar_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 5000 , 1000 , 300 ] , [ 22 , 5 , 6 , 9 ] ) ;
3516: LD_ADDR_EXP 52
3520: PUSH
3521: LD_INT 1
3523: PPUSH
3524: LD_STRING 
3526: PPUSH
3527: LD_INT 7
3529: PUSH
3530: LD_INT 8
3532: PUSH
3533: LD_INT 9
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: LIST
3540: PUSH
3541: LD_OWVAR 67
3545: ARRAY
3546: PPUSH
3547: LD_INT 5000
3549: PUSH
3550: LD_INT 1000
3552: PUSH
3553: LD_INT 300
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: PPUSH
3561: LD_INT 22
3563: PUSH
3564: LD_INT 5
3566: PUSH
3567: LD_INT 6
3569: PUSH
3570: LD_INT 9
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: PPUSH
3579: CALL 21007 0 5
3583: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , arabian_force ) ;
3584: LD_ADDR_EXP 57
3588: PUSH
3589: LD_EXP 57
3593: PPUSH
3594: LD_INT 1
3596: PPUSH
3597: LD_EXP 52
3601: PPUSH
3602: CALL_OW 1
3606: ST_TO_ADDR
// tmp := [ ] ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: EMPTY
3613: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
3614: LD_ADDR_OWVAR 37
3618: PUSH
3619: LD_INT 14
3621: ST_TO_ADDR
// vc_engine := engine_siberite ;
3622: LD_ADDR_OWVAR 39
3626: PUSH
3627: LD_INT 3
3629: ST_TO_ADDR
// vc_control := control_manual ;
3630: LD_ADDR_OWVAR 38
3634: PUSH
3635: LD_INT 1
3637: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
3638: LD_ADDR_OWVAR 40
3642: PUSH
3643: LD_INT 31
3645: ST_TO_ADDR
// for i = 1 to 3 do
3646: LD_ADDR_VAR 0 2
3650: PUSH
3651: DOUBLE
3652: LD_INT 1
3654: DEC
3655: ST_TO_ADDR
3656: LD_INT 3
3658: PUSH
3659: FOR_TO
3660: IFFALSE 3904
// begin xy := [ [ 153 , 71 ] , [ 155 , 81 ] ] [ i mod 2 + 1 ] ;
3662: LD_ADDR_VAR 0 5
3666: PUSH
3667: LD_INT 153
3669: PUSH
3670: LD_INT 71
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 155
3679: PUSH
3680: LD_INT 81
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PUSH
3691: LD_VAR 0 2
3695: PUSH
3696: LD_INT 2
3698: MOD
3699: PUSH
3700: LD_INT 1
3702: PLUS
3703: ARRAY
3704: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
3705: LD_INT 0
3707: PPUSH
3708: LD_INT 3
3710: PPUSH
3711: LD_INT 7
3713: PUSH
3714: LD_INT 8
3716: PUSH
3717: LD_INT 9
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: LIST
3724: PUSH
3725: LD_OWVAR 67
3729: ARRAY
3730: PPUSH
3731: CALL_OW 380
// un := CreateVehicle ;
3735: LD_ADDR_VAR 0 6
3739: PUSH
3740: CALL_OW 45
3744: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3745: LD_VAR 0 6
3749: PPUSH
3750: LD_INT 0
3752: PPUSH
3753: LD_INT 5
3755: PPUSH
3756: CALL_OW 12
3760: PPUSH
3761: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
3765: LD_VAR 0 6
3769: PPUSH
3770: LD_VAR 0 5
3774: PUSH
3775: LD_INT 1
3777: ARRAY
3778: PPUSH
3779: LD_VAR 0 5
3783: PUSH
3784: LD_INT 2
3786: ARRAY
3787: PPUSH
3788: LD_INT 6
3790: PPUSH
3791: LD_INT 0
3793: PPUSH
3794: CALL_OW 50
// un2 := CreateHuman ;
3798: LD_ADDR_VAR 0 7
3802: PUSH
3803: CALL_OW 44
3807: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
3808: LD_VAR 0 7
3812: PPUSH
3813: LD_VAR 0 6
3817: PPUSH
3818: CALL_OW 52
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un ) ;
3822: LD_ADDR_EXP 57
3826: PUSH
3827: LD_EXP 57
3831: PPUSH
3832: LD_INT 1
3834: PUSH
3835: LD_EXP 57
3839: PUSH
3840: LD_INT 1
3842: ARRAY
3843: PUSH
3844: LD_INT 1
3846: PLUS
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PPUSH
3852: LD_VAR 0 6
3856: PPUSH
3857: CALL 18165 0 3
3861: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un2 ) ;
3862: LD_ADDR_EXP 57
3866: PUSH
3867: LD_EXP 57
3871: PPUSH
3872: LD_INT 1
3874: PUSH
3875: LD_EXP 57
3879: PUSH
3880: LD_INT 1
3882: ARRAY
3883: PUSH
3884: LD_INT 1
3886: PLUS
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PPUSH
3892: LD_VAR 0 7
3896: PPUSH
3897: CALL 18165 0 3
3901: ST_TO_ADDR
// end ;
3902: GO 3659
3904: POP
3905: POP
// for i = 1 to 5 do
3906: LD_ADDR_VAR 0 2
3910: PUSH
3911: DOUBLE
3912: LD_INT 1
3914: DEC
3915: ST_TO_ADDR
3916: LD_INT 5
3918: PUSH
3919: FOR_TO
3920: IFFALSE 4013
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gatling_gun , ar_rocket_launcher , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] , 100 ) ;
3922: LD_INT 14
3924: PPUSH
3925: LD_INT 3
3927: PPUSH
3928: LD_INT 1
3930: PPUSH
3931: LD_INT 25
3933: PUSH
3934: LD_INT 28
3936: PUSH
3937: LD_INT 28
3939: PUSH
3940: LD_INT 27
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: PUSH
3949: LD_VAR 0 2
3953: PUSH
3954: LD_INT 4
3956: MOD
3957: PUSH
3958: LD_INT 1
3960: PLUS
3961: ARRAY
3962: PPUSH
3963: LD_INT 100
3965: PPUSH
3966: CALL 17608 0 5
// veh := CreateVehicle ;
3970: LD_ADDR_VAR 0 3
3974: PUSH
3975: CALL_OW 45
3979: ST_TO_ADDR
// tmp := tmp ^ veh ;
3980: LD_ADDR_VAR 0 4
3984: PUSH
3985: LD_VAR 0 4
3989: PUSH
3990: LD_VAR 0 3
3994: ADD
3995: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_arabian , false ) ;
3996: LD_VAR 0 3
4000: PPUSH
4001: LD_INT 1
4003: PPUSH
4004: LD_INT 0
4006: PPUSH
4007: CALL_OW 49
// end ;
4011: GO 3919
4013: POP
4014: POP
// arabian_guard := tmp ;
4015: LD_ADDR_EXP 53
4019: PUSH
4020: LD_VAR 0 4
4024: ST_TO_ADDR
// end ;
4025: LD_VAR 0 1
4029: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , ar_depot , 12 ] ] ) or GetLives ( Mastodont ) < 990 or GetLives ( Abdul ) < 990 do
4030: LD_INT 22
4032: PUSH
4033: LD_INT 7
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: LD_INT 91
4042: PUSH
4043: LD_INT 1
4045: PUSH
4046: LD_INT 12
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: LIST
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: PPUSH
4058: CALL_OW 69
4062: PUSH
4063: LD_EXP 55
4067: PPUSH
4068: CALL_OW 256
4072: PUSH
4073: LD_INT 990
4075: LESS
4076: OR
4077: PUSH
4078: LD_EXP 54
4082: PPUSH
4083: CALL_OW 256
4087: PUSH
4088: LD_INT 990
4090: LESS
4091: OR
4092: IFFALSE 4243
4094: GO 4096
4096: DISABLE
// begin if IsInUnit ( Abdul ) then
4097: LD_EXP 54
4101: PPUSH
4102: CALL_OW 310
4106: IFFALSE 4117
// ComExitBuilding ( Abdul ) ;
4108: LD_EXP 54
4112: PPUSH
4113: CALL_OW 122
// if Mastodont then
4117: LD_EXP 55
4121: IFFALSE 4138
// ComMoveXY ( Mastodont , 205 , 132 ) ;
4123: LD_EXP 55
4127: PPUSH
4128: LD_INT 205
4130: PPUSH
4131: LD_INT 132
4133: PPUSH
4134: CALL_OW 111
// AddComMoveXY ( Abdul , 205 , 132 ) ;
4138: LD_EXP 54
4142: PPUSH
4143: LD_INT 205
4145: PPUSH
4146: LD_INT 132
4148: PPUSH
4149: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4153: LD_INT 35
4155: PPUSH
4156: CALL_OW 67
// until IsInArea ( Abdul , escape_area ) ;
4160: LD_EXP 54
4164: PPUSH
4165: LD_INT 21
4167: PPUSH
4168: CALL_OW 308
4172: IFFALSE 4153
// RemoveUnit ( Abdul ) ;
4174: LD_EXP 54
4178: PPUSH
4179: CALL_OW 64
// abdul_escaped := true ;
4183: LD_ADDR_EXP 12
4187: PUSH
4188: LD_INT 1
4190: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4191: LD_INT 35
4193: PPUSH
4194: CALL_OW 67
// until IsInArea ( Mastodont , escape_area ) or IsDead ( Mastodont ) ;
4198: LD_EXP 55
4202: PPUSH
4203: LD_INT 21
4205: PPUSH
4206: CALL_OW 308
4210: PUSH
4211: LD_EXP 55
4215: PPUSH
4216: CALL_OW 301
4220: OR
4221: IFFALSE 4191
// if IsOk ( Mastodont ) then
4223: LD_EXP 55
4227: PPUSH
4228: CALL_OW 302
4232: IFFALSE 4243
// RemoveUnit ( Mastodont ) ;
4234: LD_EXP 55
4238: PPUSH
4239: CALL_OW 64
// end ;
4243: END
// every 8 8$00 + 2 2$00 trigger IsOk ( ar_depot ) and ar_active_attack do var i , base , tmp , flags , _target , attackers ;
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 302
4251: PUSH
4252: LD_EXP 9
4256: AND
4257: IFFALSE 4708
4259: GO 4261
4261: DISABLE
4262: LD_INT 0
4264: PPUSH
4265: PPUSH
4266: PPUSH
4267: PPUSH
4268: PPUSH
4269: PPUSH
// begin enable ;
4270: ENABLE
// base := 1 ;
4271: LD_ADDR_VAR 0 2
4275: PUSH
4276: LD_INT 1
4278: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
4279: LD_ADDR_VAR 0 4
4283: PUSH
4284: LD_INT 0
4286: PUSH
4287: LD_INT 0
4289: PUSH
4290: LD_INT 0
4292: PUSH
4293: LD_INT 0
4295: PUSH
4296: LD_INT 0
4298: PUSH
4299: LD_INT 0
4301: PUSH
4302: LD_INT 0
4304: PUSH
4305: LD_INT 0
4307: PUSH
4308: LD_INT 1
4310: PUSH
4311: LD_INT 0
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: ST_TO_ADDR
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , ] ;
4326: LD_ADDR_VAR 0 3
4330: PUSH
4331: LD_INT 13
4333: PUSH
4334: LD_INT 1
4336: PUSH
4337: LD_INT 2
4339: PUSH
4340: LD_INT 28
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: PUSH
4349: LD_INT 13
4351: PUSH
4352: LD_INT 1
4354: PUSH
4355: LD_INT 2
4357: PUSH
4358: LD_INT 27
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: PUSH
4367: LD_INT 13
4369: PUSH
4370: LD_INT 1
4372: PUSH
4373: LD_INT 2
4375: PUSH
4376: LD_INT 29
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
4390: LD_ADDR_VAR 0 1
4394: PUSH
4395: DOUBLE
4396: LD_INT 1
4398: DEC
4399: ST_TO_ADDR
4400: LD_OWVAR 67
4404: PUSH
4405: LD_OWVAR 1
4409: PUSH
4410: LD_INT 21000
4412: DIV
4413: PLUS
4414: PUSH
4415: FOR_TO
4416: IFFALSE 4489
// tmp := Insert ( tmp , tmp + 1 , [ ar_medium_trike , engine_combustion , control_remote , [ ar_rocket_launcher , ar_selfpropelled_bomb , ar_gatling_gun , ar_gun ] [ rand ( 1 , 4 ) ] ] ) ;
4418: LD_ADDR_VAR 0 3
4422: PUSH
4423: LD_VAR 0 3
4427: PPUSH
4428: LD_VAR 0 3
4432: PUSH
4433: LD_INT 1
4435: PLUS
4436: PPUSH
4437: LD_INT 13
4439: PUSH
4440: LD_INT 1
4442: PUSH
4443: LD_INT 2
4445: PUSH
4446: LD_INT 28
4448: PUSH
4449: LD_INT 29
4451: PUSH
4452: LD_INT 25
4454: PUSH
4455: LD_INT 27
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: PUSH
4464: LD_INT 1
4466: PPUSH
4467: LD_INT 4
4469: PPUSH
4470: CALL_OW 12
4474: ARRAY
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: PPUSH
4482: CALL_OW 2
4486: ST_TO_ADDR
4487: GO 4415
4489: POP
4490: POP
// MC_SetProduceList ( base , tmp ) ;
4491: LD_VAR 0 2
4495: PPUSH
4496: LD_VAR 0 3
4500: PPUSH
4501: CALL 62318 0 2
// repeat wait ( 0 0$1 ) ;
4505: LD_INT 35
4507: PPUSH
4508: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
4512: LD_VAR 0 2
4516: PPUSH
4517: CALL 62679 0 1
4521: PUSH
4522: LD_INT 0
4524: EQUAL
4525: IFFALSE 4505
// wait ( 0 0$20 ) ;
4527: LD_INT 700
4529: PPUSH
4530: CALL_OW 67
// _target := [ [ 124 , 85 ] , [ 90 , 61 ] , [ 69 , 48 ] , [ 68 , 48 ] ] ;
4534: LD_ADDR_VAR 0 5
4538: PUSH
4539: LD_INT 124
4541: PUSH
4542: LD_INT 85
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PUSH
4549: LD_INT 90
4551: PUSH
4552: LD_INT 61
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: PUSH
4559: LD_INT 69
4561: PUSH
4562: LD_INT 48
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: PUSH
4569: LD_INT 68
4571: PUSH
4572: LD_INT 48
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , ar_cargo_bay ] ) ) ;
4585: LD_ADDR_VAR 0 6
4589: PUSH
4590: LD_EXP 76
4594: PUSH
4595: LD_VAR 0 2
4599: ARRAY
4600: PUSH
4601: LD_EXP 79
4605: PUSH
4606: LD_VAR 0 2
4610: ARRAY
4611: PUSH
4612: LD_EXP 76
4616: PUSH
4617: LD_VAR 0 2
4621: ARRAY
4622: PPUSH
4623: LD_INT 34
4625: PUSH
4626: LD_INT 32
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PPUSH
4633: CALL_OW 72
4637: UNION
4638: DIFF
4639: ST_TO_ADDR
// if not attackers then
4640: LD_VAR 0 6
4644: NOT
4645: IFFALSE 4649
// exit ;
4647: GO 4708
// ar_attackers := attackers ;
4649: LD_ADDR_EXP 10
4653: PUSH
4654: LD_VAR 0 6
4658: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4659: LD_INT 35
4661: PPUSH
4662: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
4666: LD_VAR 0 6
4670: PPUSH
4671: LD_INT 60
4673: PUSH
4674: EMPTY
4675: LIST
4676: PPUSH
4677: CALL_OW 72
4681: NOT
4682: IFFALSE 4659
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
4684: LD_VAR 0 2
4688: PPUSH
4689: LD_VAR 0 6
4693: PPUSH
4694: LD_VAR 0 5
4698: PPUSH
4699: LD_VAR 0 4
4703: PPUSH
4704: CALL 62564 0 4
// end ; end_of_file
4708: PPOPN 6
4710: END
// export function Action ; var tmp , i , un ; begin
4711: LD_INT 0
4713: PPUSH
4714: PPUSH
4715: PPUSH
4716: PPUSH
// CenterNowOnXY ( 68 , 39 ) ;
4717: LD_INT 68
4719: PPUSH
4720: LD_INT 39
4722: PPUSH
4723: CALL_OW 86
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
4727: LD_ADDR_VAR 0 2
4731: PUSH
4732: LD_INT 22
4734: PUSH
4735: LD_INT 7
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: PPUSH
4742: CALL_OW 69
4746: ST_TO_ADDR
// InGameOn ;
4747: CALL_OW 8
// ComMoveXY ( tmp , 71 , 49 ) ;
4751: LD_VAR 0 2
4755: PPUSH
4756: LD_INT 71
4758: PPUSH
4759: LD_INT 49
4761: PPUSH
4762: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4766: LD_INT 35
4768: PPUSH
4769: CALL_OW 67
// until SeeXY ( 7 , 71 , 51 ) ;
4773: LD_INT 7
4775: PPUSH
4776: LD_INT 71
4778: PPUSH
4779: LD_INT 51
4781: PPUSH
4782: CALL_OW 293
4786: IFFALSE 4766
// DialogueOn ;
4788: CALL_OW 6
// Say ( JMM , D1-JMM-1 ) ;
4792: LD_EXP 14
4796: PPUSH
4797: LD_STRING D1-JMM-1
4799: PPUSH
4800: CALL_OW 88
// if Joan then
4804: LD_EXP 29
4808: IFFALSE 4822
// Say ( Joan , D1-Joan-1 ) ;
4810: LD_EXP 29
4814: PPUSH
4815: LD_STRING D1-Joan-1
4817: PPUSH
4818: CALL_OW 88
// if Lisa then
4822: LD_EXP 16
4826: IFFALSE 4840
// Say ( Lisa , D1-Lisa-1 ) ;
4828: LD_EXP 16
4832: PPUSH
4833: LD_STRING D1-Lisa-1
4835: PPUSH
4836: CALL_OW 88
// if Joan or Lisa then
4840: LD_EXP 29
4844: PUSH
4845: LD_EXP 16
4849: OR
4850: IFFALSE 4864
// Say ( JMM , D1-JMM-2 ) ;
4852: LD_EXP 14
4856: PPUSH
4857: LD_STRING D1-JMM-2
4859: PPUSH
4860: CALL_OW 88
// DialogueOff ;
4864: CALL_OW 7
// InGameOff ;
4868: CALL_OW 9
// PlaceSeeing ( 71 , 50 , 7 , - 30 ) ;
4872: LD_INT 71
4874: PPUSH
4875: LD_INT 50
4877: PPUSH
4878: LD_INT 7
4880: PPUSH
4881: LD_INT 30
4883: NEG
4884: PPUSH
4885: CALL_OW 330
// RemoveSeeing ( 71 , 50 , 7 ) ;
4889: LD_INT 71
4891: PPUSH
4892: LD_INT 50
4894: PPUSH
4895: LD_INT 7
4897: PPUSH
4898: CALL_OW 331
// ChangeMissionObjectives ( M1 ) ;
4902: LD_STRING M1
4904: PPUSH
4905: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
4909: LD_INT 35
4911: PPUSH
4912: CALL_OW 67
// until freedom ;
4916: LD_EXP 3
4920: IFFALSE 4909
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
4922: LD_INT 350
4924: PPUSH
4925: LD_INT 700
4927: PPUSH
4928: CALL_OW 12
4932: PPUSH
4933: CALL_OW 67
// PrepareGossudarov ;
4937: CALL 1680 0 0
// repeat wait ( 0 0$1 ) ;
4941: LD_INT 35
4943: PPUSH
4944: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4948: LD_INT 22
4950: PUSH
4951: LD_INT 6
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 24
4963: PUSH
4964: LD_INT 1000
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: PPUSH
4979: CALL_OW 69
4983: IFFALSE 4941
// tmp := FilterAllUnits ( [ f_side , 6 ] ) ;
4985: LD_ADDR_VAR 0 2
4989: PUSH
4990: LD_INT 22
4992: PUSH
4993: LD_INT 6
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PPUSH
5000: CALL_OW 69
5004: ST_TO_ADDR
// for i in tmp do
5005: LD_ADDR_VAR 0 3
5009: PUSH
5010: LD_VAR 0 2
5014: PUSH
5015: FOR_IN
5016: IFFALSE 5032
// SetSide ( i , 7 ) ;
5018: LD_VAR 0 3
5022: PPUSH
5023: LD_INT 7
5025: PPUSH
5026: CALL_OW 235
5030: GO 5015
5032: POP
5033: POP
// DialogueOn ;
5034: CALL_OW 6
// ComTurnUnit ( [ JMM , Roth ] , Gossudarov ) ;
5038: LD_EXP 14
5042: PUSH
5043: LD_EXP 15
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PPUSH
5052: LD_EXP 31
5056: PPUSH
5057: CALL_OW 119
// CenterNowOnUnits ( Gossudarov ) ;
5061: LD_EXP 31
5065: PPUSH
5066: CALL_OW 87
// if not Roth then
5070: LD_EXP 15
5074: NOT
5075: IFFALSE 5139
// begin Say ( JMM , D2-JMM-1 ) ;
5077: LD_EXP 14
5081: PPUSH
5082: LD_STRING D2-JMM-1
5084: PPUSH
5085: CALL_OW 88
// Say ( JMM , D2-JMM-1b ) ;
5089: LD_EXP 14
5093: PPUSH
5094: LD_STRING D2-JMM-1b
5096: PPUSH
5097: CALL_OW 88
// Say ( Gossudarov , D2-Gos-1 ) ;
5101: LD_EXP 31
5105: PPUSH
5106: LD_STRING D2-Gos-1
5108: PPUSH
5109: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
5113: LD_EXP 14
5117: PPUSH
5118: LD_STRING D2-JMM-2
5120: PPUSH
5121: CALL_OW 88
// Say ( Gossudarov , D2-Gos-2 ) ;
5125: LD_EXP 31
5129: PPUSH
5130: LD_STRING D2-Gos-2
5132: PPUSH
5133: CALL_OW 88
// end else
5137: GO 5235
// begin Say ( Roth , D2-Roth-2 ) ;
5139: LD_EXP 15
5143: PPUSH
5144: LD_STRING D2-Roth-2
5146: PPUSH
5147: CALL_OW 88
// Say ( JMM , D2-JMM-1a ) ;
5151: LD_EXP 14
5155: PPUSH
5156: LD_STRING D2-JMM-1a
5158: PPUSH
5159: CALL_OW 88
// Say ( Roth , D2-Roth-2a ) ;
5163: LD_EXP 15
5167: PPUSH
5168: LD_STRING D2-Roth-2a
5170: PPUSH
5171: CALL_OW 88
// Say ( Roth , D2-Roth-2b ) ;
5175: LD_EXP 15
5179: PPUSH
5180: LD_STRING D2-Roth-2b
5182: PPUSH
5183: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
5187: LD_EXP 14
5191: PPUSH
5192: LD_STRING D2-JMM-3
5194: PPUSH
5195: CALL_OW 88
// Say ( Gossudarov , D2-Gos-3 ) ;
5199: LD_EXP 31
5203: PPUSH
5204: LD_STRING D2-Gos-3
5206: PPUSH
5207: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
5211: LD_EXP 14
5215: PPUSH
5216: LD_STRING D2-JMM-4
5218: PPUSH
5219: CALL_OW 88
// Say ( Gossudarov , D2-Gos-4 ) ;
5223: LD_EXP 31
5227: PPUSH
5228: LD_STRING D2-Gos-4
5230: PPUSH
5231: CALL_OW 88
// end ; Say ( JMM , D2-JMM-5 ) ;
5235: LD_EXP 14
5239: PPUSH
5240: LD_STRING D2-JMM-5
5242: PPUSH
5243: CALL_OW 88
// Say ( Gossudarov , D2-Gos-5 ) ;
5247: LD_EXP 31
5251: PPUSH
5252: LD_STRING D2-Gos-5
5254: PPUSH
5255: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
5259: LD_EXP 14
5263: PPUSH
5264: LD_STRING D2-JMM-6
5266: PPUSH
5267: CALL_OW 88
// DialogueOff ;
5271: CALL_OW 7
// wait ( 0 0$2 ) ;
5275: LD_INT 70
5277: PPUSH
5278: CALL_OW 67
// if Kirilenkova then
5282: LD_EXP 32
5286: IFFALSE 5300
// Say ( Kirilenkova , D3-Kir-1 ) ;
5288: LD_EXP 32
5292: PPUSH
5293: LD_STRING D3-Kir-1
5295: PPUSH
5296: CALL_OW 88
// gossudarov_arrive := true ;
5300: LD_ADDR_EXP 4
5304: PUSH
5305: LD_INT 1
5307: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5308: LD_INT 35
5310: PPUSH
5311: CALL_OW 67
// until ru_lab_builded ;
5315: LD_EXP 5
5319: IFFALSE 5308
// if Kirilenkova then
5321: LD_EXP 32
5325: IFFALSE 5341
// Say ( Kirilenkova , D3a-Kir-1 ) else
5327: LD_EXP 32
5331: PPUSH
5332: LD_STRING D3a-Kir-1
5334: PPUSH
5335: CALL_OW 88
5339: GO 5363
// begin un := SciRu ;
5341: LD_ADDR_VAR 0 4
5345: PUSH
5346: CALL 9844 0 0
5350: ST_TO_ADDR
// Say ( un , D3a-Sci1-1 ) ;
5351: LD_VAR 0 4
5355: PPUSH
5356: LD_STRING D3a-Sci1-1
5358: PPUSH
5359: CALL_OW 88
// end ; if Kirilenkova or un then
5363: LD_EXP 32
5367: PUSH
5368: LD_VAR 0 4
5372: OR
5373: IFFALSE 5387
// Say ( JMM , D3a-JMM-1 ) ;
5375: LD_EXP 14
5379: PPUSH
5380: LD_STRING D3a-JMM-1
5382: PPUSH
5383: CALL_OW 88
// end ;
5387: LD_VAR 0 1
5391: RET
// every 0 0$1 trigger gossudarov_arrive and FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) < 6 do
5392: LD_EXP 4
5396: PUSH
5397: LD_INT 22
5399: PUSH
5400: LD_INT 7
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 2
5409: PUSH
5410: LD_INT 25
5412: PUSH
5413: LD_INT 1
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: PUSH
5420: LD_INT 25
5422: PUSH
5423: LD_INT 2
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: PUSH
5430: LD_INT 25
5432: PUSH
5433: LD_INT 3
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PUSH
5440: LD_INT 25
5442: PUSH
5443: LD_INT 4
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: PUSH
5450: LD_INT 25
5452: PUSH
5453: LD_INT 5
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: PUSH
5460: LD_INT 25
5462: PUSH
5463: LD_INT 8
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PUSH
5470: LD_INT 25
5472: PUSH
5473: LD_INT 9
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PPUSH
5494: CALL_OW 69
5498: PUSH
5499: LD_INT 6
5501: LESS
5502: AND
5503: IFFALSE 5515
5505: GO 5507
5507: DISABLE
// YouLost ( TooMany ) ;
5508: LD_STRING TooMany
5510: PPUSH
5511: CALL_OW 104
5515: END
// every 0 0$40 trigger GetSide ( Gossudarov ) = 7 do var i , tmp , un ;
5516: LD_EXP 31
5520: PPUSH
5521: CALL_OW 255
5525: PUSH
5526: LD_INT 7
5528: EQUAL
5529: IFFALSE 5712
5531: GO 5533
5533: DISABLE
5534: LD_INT 0
5536: PPUSH
5537: PPUSH
5538: PPUSH
// begin uc_side := 3 ;
5539: LD_ADDR_OWVAR 20
5543: PUSH
5544: LD_INT 3
5546: ST_TO_ADDR
// uc_nation := 3 ;
5547: LD_ADDR_OWVAR 21
5551: PUSH
5552: LD_INT 3
5554: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_heavy_machine_gun , 100 ) ;
5555: LD_INT 21
5557: PPUSH
5558: LD_INT 3
5560: PPUSH
5561: LD_INT 3
5563: PPUSH
5564: LD_INT 42
5566: PPUSH
5567: LD_INT 100
5569: PPUSH
5570: CALL 17608 0 5
// un := CreateVehicle ;
5574: LD_ADDR_VAR 0 3
5578: PUSH
5579: CALL_OW 45
5583: ST_TO_ADDR
// PlaceUnitArea ( un , south_west_spawn , false ) ;
5584: LD_VAR 0 3
5588: PPUSH
5589: LD_INT 15
5591: PPUSH
5592: LD_INT 0
5594: PPUSH
5595: CALL_OW 49
// ComMoveXY ( un , 67 , 45 ) ;
5599: LD_VAR 0 3
5603: PPUSH
5604: LD_INT 67
5606: PPUSH
5607: LD_INT 45
5609: PPUSH
5610: CALL_OW 111
// AddComWait ( un , 0 0$2 ) ;
5614: LD_VAR 0 3
5618: PPUSH
5619: LD_INT 70
5621: PPUSH
5622: CALL_OW 202
// AddComMoveXY ( un , 69 , 18 ) ;
5626: LD_VAR 0 3
5630: PPUSH
5631: LD_INT 69
5633: PPUSH
5634: LD_INT 18
5636: PPUSH
5637: CALL_OW 171
// AddComMoveXY ( un , 60 , 2 ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_INT 60
5648: PPUSH
5649: LD_INT 2
5651: PPUSH
5652: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5656: LD_INT 35
5658: PPUSH
5659: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , north_spawn ) ;
5663: LD_VAR 0 3
5667: PPUSH
5668: CALL_OW 302
5672: NOT
5673: PUSH
5674: LD_VAR 0 3
5678: PPUSH
5679: LD_INT 17
5681: PPUSH
5682: CALL_OW 308
5686: OR
5687: IFFALSE 5656
// if IsInArea ( un , north_spawn ) then
5689: LD_VAR 0 3
5693: PPUSH
5694: LD_INT 17
5696: PPUSH
5697: CALL_OW 308
5701: IFFALSE 5712
// RemoveUnit ( un ) ;
5703: LD_VAR 0 3
5707: PPUSH
5708: CALL_OW 64
// end ;
5712: PPOPN 3
5714: END
// every 0 0$2 do var i , un , tmp ;
5715: GO 5717
5717: DISABLE
5718: LD_INT 0
5720: PPUSH
5721: PPUSH
5722: PPUSH
// begin repeat wait ( 0 0$2 ) ;
5723: LD_INT 70
5725: PPUSH
5726: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 3 ] ] ) ;
5730: LD_ADDR_VAR 0 3
5734: PUSH
5735: LD_INT 22
5737: PUSH
5738: LD_INT 7
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: LD_INT 101
5747: PUSH
5748: LD_INT 3
5750: PUSH
5751: EMPTY
5752: LIST
5753: LIST
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: PPUSH
5759: CALL_OW 69
5763: ST_TO_ADDR
// until tmp ;
5764: LD_VAR 0 3
5768: IFFALSE 5723
// un := NearestUnitToUnit ( tmp , JMM ) ;
5770: LD_ADDR_VAR 0 2
5774: PUSH
5775: LD_VAR 0 3
5779: PPUSH
5780: LD_EXP 14
5784: PPUSH
5785: CALL_OW 74
5789: ST_TO_ADDR
// player_spotted := true ;
5790: LD_ADDR_EXP 6
5794: PUSH
5795: LD_INT 1
5797: ST_TO_ADDR
// tmp := SciRu ;
5798: LD_ADDR_VAR 0 3
5802: PUSH
5803: CALL 9844 0 0
5807: ST_TO_ADDR
// DialogueOn ;
5808: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 7 , - 8 ) ;
5812: LD_VAR 0 2
5816: PPUSH
5817: CALL_OW 250
5821: PPUSH
5822: LD_VAR 0 2
5826: PPUSH
5827: CALL_OW 251
5831: PPUSH
5832: LD_INT 7
5834: PPUSH
5835: LD_INT 8
5837: NEG
5838: PPUSH
5839: CALL_OW 330
// CenterNowOnUnits ( un ) ;
5843: LD_VAR 0 2
5847: PPUSH
5848: CALL_OW 87
// if tmp then
5852: LD_VAR 0 3
5856: IFFALSE 5870
// Say ( tmp , D4-RSci1-1 ) ;
5858: LD_VAR 0 3
5862: PPUSH
5863: LD_STRING D4-RSci1-1
5865: PPUSH
5866: CALL_OW 88
// if Gossudarov then
5870: LD_EXP 31
5874: IFFALSE 5900
// begin Say ( Gossudarov , D4-Gos-1 ) ;
5876: LD_EXP 31
5880: PPUSH
5881: LD_STRING D4-Gos-1
5883: PPUSH
5884: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5888: LD_EXP 14
5892: PPUSH
5893: LD_STRING D4-JMM-1
5895: PPUSH
5896: CALL_OW 88
// end ; RemoveSeeing ( GetX ( un ) , GetY ( un ) , 7 ) ;
5900: LD_VAR 0 2
5904: PPUSH
5905: CALL_OW 250
5909: PPUSH
5910: LD_VAR 0 2
5914: PPUSH
5915: CALL_OW 251
5919: PPUSH
5920: LD_INT 7
5922: PPUSH
5923: CALL_OW 331
// DialogueOff ;
5927: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
5931: LD_STRING M5
5933: PPUSH
5934: CALL_OW 337
// end ;
5938: PPOPN 3
5940: END
// every 0 0$30 + 2 2$30 trigger player_spotted do
5941: LD_EXP 6
5945: IFFALSE 6404
5947: GO 5949
5949: DISABLE
// begin PrepareBelkov ;
5950: CALL 1930 0 0
// ComMoveXY ( Belkov , 118 , 106 ) ;
5954: LD_EXP 46
5958: PPUSH
5959: LD_INT 118
5961: PPUSH
5962: LD_INT 106
5964: PPUSH
5965: CALL_OW 111
// AddComHold ( Belkov ) ;
5969: LD_EXP 46
5973: PPUSH
5974: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
5978: LD_INT 35
5980: PPUSH
5981: CALL_OW 67
// until IsAt ( Belkov , 118 , 106 ) ;
5985: LD_EXP 46
5989: PPUSH
5990: LD_INT 118
5992: PPUSH
5993: LD_INT 106
5995: PPUSH
5996: CALL_OW 307
6000: IFFALSE 5978
// ChangeSideFog ( 4 , 7 ) ;
6002: LD_INT 4
6004: PPUSH
6005: LD_INT 7
6007: PPUSH
6008: CALL_OW 343
// if IsOk ( Belkov ) then
6012: LD_EXP 46
6016: PPUSH
6017: CALL_OW 302
6021: IFFALSE 6105
// begin InGameOn ;
6023: CALL_OW 8
// DialogueOn ;
6027: CALL_OW 6
// SayRadio ( Belkov , D5-Bel-1 ) ;
6031: LD_EXP 46
6035: PPUSH
6036: LD_STRING D5-Bel-1
6038: PPUSH
6039: CALL_OW 94
// if Gossudarov then
6043: LD_EXP 31
6047: IFFALSE 6097
// begin Say ( Gossudarov , D5-Gos-1 ) ;
6049: LD_EXP 31
6053: PPUSH
6054: LD_STRING D5-Gos-1
6056: PPUSH
6057: CALL_OW 88
// Say ( JMM , D5-JMM-1 ) ;
6061: LD_EXP 14
6065: PPUSH
6066: LD_STRING D5-JMM-1
6068: PPUSH
6069: CALL_OW 88
// Say ( Gossudarov , D5-Gos-2 ) ;
6073: LD_EXP 31
6077: PPUSH
6078: LD_STRING D5-Gos-2
6080: PPUSH
6081: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
6085: LD_EXP 14
6089: PPUSH
6090: LD_STRING D5-JMM-2
6092: PPUSH
6093: CALL_OW 88
// end ; DialogueOff ;
6097: CALL_OW 7
// InGameOff ;
6101: CALL_OW 9
// end ; case Query ( QSaveBelkov ) of 1 :
6105: LD_STRING QSaveBelkov
6107: PPUSH
6108: CALL_OW 97
6112: PUSH
6113: LD_INT 1
6115: DOUBLE
6116: EQUAL
6117: IFTRUE 6121
6119: GO 6171
6121: POP
// begin DialogueOn ;
6122: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
6126: LD_EXP 14
6130: PPUSH
6131: LD_STRING D5a-JMM-1
6133: PPUSH
6134: CALL_OW 88
// SayRadio ( Belkov , D5a-Bel-1 ) ;
6138: LD_EXP 46
6142: PPUSH
6143: LD_STRING D5a-Bel-1
6145: PPUSH
6146: CALL_OW 94
// DialogueOff ;
6150: CALL_OW 7
// ComMoveXY ( Belkov , 83 , 49 ) ;
6154: LD_EXP 46
6158: PPUSH
6159: LD_INT 83
6161: PPUSH
6162: LD_INT 49
6164: PPUSH
6165: CALL_OW 111
// end ; 2 :
6169: GO 6231
6171: LD_INT 2
6173: DOUBLE
6174: EQUAL
6175: IFTRUE 6179
6177: GO 6230
6179: POP
// begin Say ( JMM , D5a-JMM-2 ) ;
6180: LD_EXP 14
6184: PPUSH
6185: LD_STRING D5a-JMM-2
6187: PPUSH
6188: CALL_OW 88
// ComWait ( Belkov , 0 0$10 ) ;
6192: LD_EXP 46
6196: PPUSH
6197: LD_INT 350
6199: PPUSH
6200: CALL_OW 142
// AddComMoveXY ( Belkov , 107 , 109 ) ;
6204: LD_EXP 46
6208: PPUSH
6209: LD_INT 107
6211: PPUSH
6212: LD_INT 109
6214: PPUSH
6215: CALL_OW 171
// AddComHold ( Belkov ) ;
6219: LD_EXP 46
6223: PPUSH
6224: CALL_OW 200
// end ; end ;
6228: GO 6231
6230: POP
// repeat wait ( 0 0$1 ) ;
6231: LD_INT 35
6233: PPUSH
6234: CALL_OW 67
// until ( IsDead ( Belkov ) and GetSide ( Belkov ) = 4 ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Belkov ) , Belkov ) < 10 ;
6238: LD_EXP 46
6242: PPUSH
6243: CALL_OW 301
6247: PUSH
6248: LD_EXP 46
6252: PPUSH
6253: CALL_OW 255
6257: PUSH
6258: LD_INT 4
6260: EQUAL
6261: AND
6262: PUSH
6263: LD_INT 22
6265: PUSH
6266: LD_INT 7
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PPUSH
6273: CALL_OW 69
6277: PPUSH
6278: LD_EXP 46
6282: PPUSH
6283: CALL_OW 74
6287: PPUSH
6288: LD_EXP 46
6292: PPUSH
6293: CALL_OW 296
6297: PUSH
6298: LD_INT 10
6300: LESS
6301: OR
6302: IFFALSE 6231
// if IsDead ( Belkov ) then
6304: LD_EXP 46
6308: PPUSH
6309: CALL_OW 301
6313: IFFALSE 6338
// begin CenterNowOnUnits ( Belkov ) ;
6315: LD_EXP 46
6319: PPUSH
6320: CALL_OW 87
// Say ( JMM , D5a-JMM-2a ) ;
6324: LD_EXP 14
6328: PPUSH
6329: LD_STRING D5a-JMM-2a
6331: PPUSH
6332: CALL_OW 88
// exit ;
6336: GO 6404
// end ; if See ( 7 , Belkov ) then
6338: LD_INT 7
6340: PPUSH
6341: LD_EXP 46
6345: PPUSH
6346: CALL_OW 292
6350: IFFALSE 6364
// SetSide ( Belkov , 7 ) ;
6352: LD_EXP 46
6356: PPUSH
6357: LD_INT 7
6359: PPUSH
6360: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
6364: LD_INT 35
6366: PPUSH
6367: CALL_OW 67
// until GetDistUnitXY ( Belkov , 66 , 45 ) < 30 ;
6371: LD_EXP 46
6375: PPUSH
6376: LD_INT 66
6378: PPUSH
6379: LD_INT 45
6381: PPUSH
6382: CALL_OW 297
6386: PUSH
6387: LD_INT 30
6389: LESS
6390: IFFALSE 6364
// Say ( Belkov , D6-Bel-1 ) ;
6392: LD_EXP 46
6396: PPUSH
6397: LD_STRING D6-Bel-1
6399: PPUSH
6400: CALL_OW 88
// end ;
6404: END
// every 0 0$1 trigger IsOk ( Belkov ) and UnitShoot ( Belkov ) in FilterAllUnits ( [ f_or , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ) do
6405: LD_EXP 46
6409: PPUSH
6410: CALL_OW 302
6414: PUSH
6415: LD_EXP 46
6419: PPUSH
6420: CALL_OW 504
6424: PUSH
6425: LD_INT 2
6427: PUSH
6428: LD_INT 34
6430: PUSH
6431: LD_INT 47
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 34
6440: PUSH
6441: LD_INT 45
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: PPUSH
6453: CALL_OW 69
6457: IN
6458: AND
6459: IFFALSE 6476
6461: GO 6463
6463: DISABLE
// Say ( Belkov , D7-Bel-1 ) ;
6464: LD_EXP 46
6468: PPUSH
6469: LD_STRING D7-Bel-1
6471: PPUSH
6472: CALL_OW 88
6476: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 2 ] ] ) and not ar_base_spotted and not IsPlaced ( Burlak ) do var tmp ;
6477: LD_INT 22
6479: PUSH
6480: LD_INT 7
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 101
6489: PUSH
6490: LD_INT 2
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PPUSH
6501: CALL_OW 69
6505: PUSH
6506: LD_EXP 8
6510: NOT
6511: AND
6512: PUSH
6513: LD_EXP 45
6517: PPUSH
6518: CALL_OW 305
6522: NOT
6523: AND
6524: IFFALSE 6994
6526: GO 6528
6528: DISABLE
6529: LD_INT 0
6531: PPUSH
// begin ar_base_spotted := true ;
6532: LD_ADDR_EXP 8
6536: PUSH
6537: LD_INT 1
6539: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) ;
6540: LD_ADDR_VAR 0 1
6544: PUSH
6545: LD_INT 22
6547: PUSH
6548: LD_INT 2
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: LD_INT 21
6557: PUSH
6558: LD_INT 3
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PPUSH
6569: CALL_OW 69
6573: ST_TO_ADDR
// tmp := NearestUnitToUnit ( tmp , JMM ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_VAR 0 1
6583: PPUSH
6584: LD_EXP 14
6588: PPUSH
6589: CALL_OW 74
6593: ST_TO_ADDR
// RevealFogArea ( 7 , area_base_arabian ) ;
6594: LD_INT 7
6596: PPUSH
6597: LD_INT 3
6599: PPUSH
6600: CALL_OW 332
// DialogueOn ;
6604: CALL_OW 6
// CenterNowOnXY ( GetX ( tmp ) , GetY ( tmp ) ) ;
6608: LD_VAR 0 1
6612: PPUSH
6613: CALL_OW 250
6617: PPUSH
6618: LD_VAR 0 1
6622: PPUSH
6623: CALL_OW 251
6627: PPUSH
6628: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Frank , Roth , Cornel , Denis , Gladstone ] ;
6632: LD_ADDR_VAR 0 1
6636: PUSH
6637: LD_INT 22
6639: PUSH
6640: LD_INT 7
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_INT 23
6649: PUSH
6650: LD_INT 1
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 26
6659: PUSH
6660: LD_INT 1
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: LIST
6671: PPUSH
6672: CALL_OW 69
6676: PUSH
6677: LD_EXP 14
6681: PUSH
6682: LD_EXP 18
6686: PUSH
6687: LD_EXP 19
6691: PUSH
6692: LD_EXP 26
6696: PUSH
6697: LD_EXP 15
6701: PUSH
6702: LD_EXP 24
6706: PUSH
6707: LD_EXP 20
6711: PUSH
6712: LD_EXP 22
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: DIFF
6727: ST_TO_ADDR
// if not tmp then
6728: LD_VAR 0 1
6732: NOT
6733: IFFALSE 6807
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_female ] ] ) diff [ Joan , Lisa , Kikuchi , Simms ] ;
6735: LD_ADDR_VAR 0 1
6739: PUSH
6740: LD_INT 22
6742: PUSH
6743: LD_INT 7
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PUSH
6750: LD_INT 23
6752: PUSH
6753: LD_INT 1
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 26
6762: PUSH
6763: LD_INT 2
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: PPUSH
6775: CALL_OW 69
6779: PUSH
6780: LD_EXP 29
6784: PUSH
6785: LD_EXP 16
6789: PUSH
6790: LD_EXP 27
6794: PUSH
6795: LD_EXP 28
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: DIFF
6806: ST_TO_ADDR
// if tmp then
6807: LD_VAR 0 1
6811: IFFALSE 6882
// case GetSex ( tmp [ 1 ] ) of sex_male :
6813: LD_VAR 0 1
6817: PUSH
6818: LD_INT 1
6820: ARRAY
6821: PPUSH
6822: CALL_OW 258
6826: PUSH
6827: LD_INT 1
6829: DOUBLE
6830: EQUAL
6831: IFTRUE 6835
6833: GO 6854
6835: POP
// Say ( tmp [ 1 ] , D9-Sol1-1 ) ; sex_female :
6836: LD_VAR 0 1
6840: PUSH
6841: LD_INT 1
6843: ARRAY
6844: PPUSH
6845: LD_STRING D9-Sol1-1
6847: PPUSH
6848: CALL_OW 88
6852: GO 6882
6854: LD_INT 2
6856: DOUBLE
6857: EQUAL
6858: IFTRUE 6862
6860: GO 6881
6862: POP
// Say ( tmp [ 1 ] , D9-FSol1-1 ) ; end ;
6863: LD_VAR 0 1
6867: PUSH
6868: LD_INT 1
6870: ARRAY
6871: PPUSH
6872: LD_STRING D9-FSol1-1
6874: PPUSH
6875: CALL_OW 88
6879: GO 6882
6881: POP
// if Frank then
6882: LD_EXP 26
6886: IFFALSE 6990
// begin PlaceSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 , 8 ) ;
6888: LD_EXP 55
6892: PPUSH
6893: CALL_OW 250
6897: PPUSH
6898: LD_EXP 55
6902: PPUSH
6903: CALL_OW 251
6907: PPUSH
6908: LD_INT 7
6910: PPUSH
6911: LD_INT 8
6913: PPUSH
6914: CALL_OW 330
// CenterNowOnUnits ( mastodont ) ;
6918: LD_EXP 55
6922: PPUSH
6923: CALL_OW 87
// Say ( Frank , D9-Frank-1 ) ;
6927: LD_EXP 26
6931: PPUSH
6932: LD_STRING D9-Frank-1
6934: PPUSH
6935: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
6939: LD_EXP 14
6943: PPUSH
6944: LD_STRING D9-JMM-1
6946: PPUSH
6947: CALL_OW 88
// Say ( Frank , D9-Frank-2 ) ;
6951: LD_EXP 26
6955: PPUSH
6956: LD_STRING D9-Frank-2
6958: PPUSH
6959: CALL_OW 88
// RemoveSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 ) ;
6963: LD_EXP 55
6967: PPUSH
6968: CALL_OW 250
6972: PPUSH
6973: LD_EXP 55
6977: PPUSH
6978: CALL_OW 251
6982: PPUSH
6983: LD_INT 7
6985: PPUSH
6986: CALL_OW 331
// end ; DialogueOff ;
6990: CALL_OW 7
// end ;
6994: PPOPN 1
6996: END
// every 0 0$20 trigger first_attack do var i , selected_option ;
6997: LD_EXP 7
7001: IFFALSE 8028
7003: GO 7005
7005: DISABLE
7006: LD_INT 0
7008: PPUSH
7009: PPUSH
// begin selected_option := 1 ;
7010: LD_ADDR_VAR 0 2
7014: PUSH
7015: LD_INT 1
7017: ST_TO_ADDR
// wait ( 5 5$00 ) ;
7018: LD_INT 10500
7020: PPUSH
7021: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7025: LD_INT 35
7027: PPUSH
7028: CALL_OW 67
// until not ru_attackers ;
7032: LD_EXP 51
7036: NOT
7037: IFFALSE 7025
// PrepareBurlak ;
7039: CALL 2042 0 0
// repeat wait ( 0 0$2 ) ;
7043: LD_INT 70
7045: PPUSH
7046: CALL_OW 67
// until not HasTask ( Burlak ) ;
7050: LD_EXP 45
7054: PPUSH
7055: CALL_OW 314
7059: NOT
7060: IFFALSE 7043
// InGameOn ;
7062: CALL_OW 8
// DialogueOn ;
7066: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
7070: LD_EXP 48
7074: PPUSH
7075: CALL_OW 87
// SayRadio ( Burlak , D10-Bur-1 ) ;
7079: LD_EXP 45
7083: PPUSH
7084: LD_STRING D10-Bur-1
7086: PPUSH
7087: CALL_OW 94
// if Belkov and GetSide ( Belkov ) = 7 then
7091: LD_EXP 46
7095: PUSH
7096: LD_EXP 46
7100: PPUSH
7101: CALL_OW 255
7105: PUSH
7106: LD_INT 7
7108: EQUAL
7109: AND
7110: IFFALSE 7124
// Say ( Belkov , D10-Bel-1 ) ;
7112: LD_EXP 46
7116: PPUSH
7117: LD_STRING D10-Bel-1
7119: PPUSH
7120: CALL_OW 88
// if Gossudarov then
7124: LD_EXP 31
7128: IFFALSE 7142
// Say ( Gossudarov , D10-Gos-1 ) ;
7130: LD_EXP 31
7134: PPUSH
7135: LD_STRING D10-Gos-1
7137: PPUSH
7138: CALL_OW 88
// if Kirilenkova then
7142: LD_EXP 32
7146: IFFALSE 7160
// Say ( Kirilenkova , D10-Kir-1 ) ;
7148: LD_EXP 32
7152: PPUSH
7153: LD_STRING D10-Kir-1
7155: PPUSH
7156: CALL_OW 88
// Say ( SolRu , D10-RSol1-1 ) ;
7160: CALL 9973 0 0
7164: PPUSH
7165: LD_STRING D10-RSol1-1
7167: PPUSH
7168: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-2 ) ;
7172: LD_EXP 45
7176: PPUSH
7177: LD_STRING D10-Bur-2
7179: PPUSH
7180: CALL_OW 94
// Say ( JMM , D10-JMM-2 ) ;
7184: LD_EXP 14
7188: PPUSH
7189: LD_STRING D10-JMM-2
7191: PPUSH
7192: CALL_OW 88
// if Kirilenkova then
7196: LD_EXP 32
7200: IFFALSE 7216
// Say ( Kirilenkova , D10-Kir-2 ) else
7202: LD_EXP 32
7206: PPUSH
7207: LD_STRING D10-Kir-2
7209: PPUSH
7210: CALL_OW 88
7214: GO 7228
// Say ( SolRu , D10-RSol1-2 ) ;
7216: CALL 9973 0 0
7220: PPUSH
7221: LD_STRING D10-RSol1-2
7223: PPUSH
7224: CALL_OW 88
// Say ( JMM , D10-JMM-3 ) ;
7228: LD_EXP 14
7232: PPUSH
7233: LD_STRING D10-JMM-3
7235: PPUSH
7236: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-3 ) ;
7240: LD_EXP 45
7244: PPUSH
7245: LD_STRING D10-Bur-3
7247: PPUSH
7248: CALL_OW 94
// Say ( JMM , D10-JMM-4 ) ;
7252: LD_EXP 14
7256: PPUSH
7257: LD_STRING D10-JMM-4
7259: PPUSH
7260: CALL_OW 88
// DialogueOff ;
7264: CALL_OW 7
// InGameOff ;
7268: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
7272: LD_STRING M2
7274: PPUSH
7275: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
7279: LD_INT 35
7281: PPUSH
7282: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , Burlak , 8 ] ] ) ;
7286: LD_INT 22
7288: PUSH
7289: LD_INT 7
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 91
7298: PUSH
7299: LD_EXP 45
7303: PUSH
7304: LD_INT 8
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PPUSH
7316: CALL_OW 69
7320: IFFALSE 7279
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
7322: LD_ADDR_VAR 0 1
7326: PUSH
7327: LD_INT 22
7329: PUSH
7330: LD_INT 4
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PPUSH
7337: CALL_OW 69
7341: PUSH
7342: FOR_IN
7343: IFFALSE 7359
// SetSide ( i , 7 ) ;
7345: LD_VAR 0 1
7349: PPUSH
7350: LD_INT 7
7352: PPUSH
7353: CALL_OW 235
7357: GO 7342
7359: POP
7360: POP
// ChangeMissionObjectives ( M3 ) ;
7361: LD_STRING M3
7363: PPUSH
7364: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
7368: LD_INT 35
7370: PPUSH
7371: CALL_OW 67
// until GetDistUnits ( JMM , Burlak ) < 8 ;
7375: LD_EXP 14
7379: PPUSH
7380: LD_EXP 45
7384: PPUSH
7385: CALL_OW 296
7389: PUSH
7390: LD_INT 8
7392: LESS
7393: IFFALSE 7368
// ComTurnUnit ( JMM , Burlak ) ;
7395: LD_EXP 14
7399: PPUSH
7400: LD_EXP 45
7404: PPUSH
7405: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
7409: LD_EXP 45
7413: PPUSH
7414: LD_EXP 14
7418: PPUSH
7419: CALL_OW 119
// wait ( 0 0$0.3 ) ;
7423: LD_INT 10
7425: PPUSH
7426: CALL_OW 67
// DialogueOn ;
7430: CALL_OW 6
// Say ( JMM , D11-JMM-1 ) ;
7434: LD_EXP 14
7438: PPUSH
7439: LD_STRING D11-JMM-1
7441: PPUSH
7442: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
7446: LD_EXP 45
7450: PPUSH
7451: LD_STRING D11-Bur-1
7453: PPUSH
7454: CALL_OW 88
// Say ( JMM , D11-JMM-2 ) ;
7458: LD_EXP 14
7462: PPUSH
7463: LD_STRING D11-JMM-2
7465: PPUSH
7466: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
7470: LD_EXP 45
7474: PPUSH
7475: LD_STRING D11-Bur-2
7477: PPUSH
7478: CALL_OW 88
// Say ( JMM , D11-JMM-3 ) ;
7482: LD_EXP 14
7486: PPUSH
7487: LD_STRING D11-JMM-3
7489: PPUSH
7490: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
7494: LD_EXP 45
7498: PPUSH
7499: LD_STRING D11-Bur-3
7501: PPUSH
7502: CALL_OW 88
// Say ( JMM , D11-JMM-4 ) ;
7506: LD_EXP 14
7510: PPUSH
7511: LD_STRING D11-JMM-4
7513: PPUSH
7514: CALL_OW 88
// if ar_base_spotted then
7518: LD_EXP 8
7522: IFFALSE 7538
// Say ( Burlak , D12-Bur-1 ) else
7524: LD_EXP 45
7528: PPUSH
7529: LD_STRING D12-Bur-1
7531: PPUSH
7532: CALL_OW 88
7536: GO 7577
// begin RevealFogArea ( 7 , area_base_arabian ) ;
7538: LD_INT 7
7540: PPUSH
7541: LD_INT 3
7543: PPUSH
7544: CALL_OW 332
// CenterNowOnXY ( 127 , 45 ) ;
7548: LD_INT 127
7550: PPUSH
7551: LD_INT 45
7553: PPUSH
7554: CALL_OW 86
// Say ( Burlak , D12-Bur-1a ) ;
7558: LD_EXP 45
7562: PPUSH
7563: LD_STRING D12-Bur-1a
7565: PPUSH
7566: CALL_OW 88
// dwait ( 0 0$2 ) ;
7570: LD_INT 70
7572: PPUSH
7573: CALL_OW 68
// end ; Say ( Burlak , D12-Bur-1b ) ;
7577: LD_EXP 45
7581: PPUSH
7582: LD_STRING D12-Bur-1b
7584: PPUSH
7585: CALL_OW 88
// Say ( JMM , D12-JMM-1 ) ;
7589: LD_EXP 14
7593: PPUSH
7594: LD_STRING D12-JMM-1
7596: PPUSH
7597: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
7601: LD_EXP 45
7605: PPUSH
7606: LD_STRING D12-Bur-2
7608: PPUSH
7609: CALL_OW 88
// if Roth then
7613: LD_EXP 15
7617: IFFALSE 7633
// Say ( Roth , D12-Roth-2 ) else
7619: LD_EXP 15
7623: PPUSH
7624: LD_STRING D12-Roth-2
7626: PPUSH
7627: CALL_OW 88
7631: GO 7645
// Say ( SciRu , D12-RSci1-2 ) ;
7633: CALL 9844 0 0
7637: PPUSH
7638: LD_STRING D12-RSci1-2
7640: PPUSH
7641: CALL_OW 88
// Say ( JMM , D12-JMM-2 ) ;
7645: LD_EXP 14
7649: PPUSH
7650: LD_STRING D12-JMM-2
7652: PPUSH
7653: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
7657: LD_EXP 45
7661: PPUSH
7662: LD_STRING D12-Bur-3
7664: PPUSH
7665: CALL_OW 88
// Say ( JMM , D12-JMM-3 ) ;
7669: LD_EXP 14
7673: PPUSH
7674: LD_STRING D12-JMM-3
7676: PPUSH
7677: CALL_OW 88
// Say ( Burlak , D12-Bur-4 ) ;
7681: LD_EXP 45
7685: PPUSH
7686: LD_STRING D12-Bur-4
7688: PPUSH
7689: CALL_OW 88
// case Query ( QBase ) of 1 :
7693: LD_STRING QBase
7695: PPUSH
7696: CALL_OW 97
7700: PUSH
7701: LD_INT 1
7703: DOUBLE
7704: EQUAL
7705: IFTRUE 7709
7707: GO 7827
7709: POP
// begin Say ( JMM , D13a-JMM-1 ) ;
7710: LD_EXP 14
7714: PPUSH
7715: LD_STRING D13a-JMM-1
7717: PPUSH
7718: CALL_OW 88
// Say ( Burlak , D13a-Bur-1 ) ;
7722: LD_EXP 45
7726: PPUSH
7727: LD_STRING D13a-Bur-1
7729: PPUSH
7730: CALL_OW 88
// if Roth then
7734: LD_EXP 15
7738: IFFALSE 7754
// Say ( Roth , D13a-Roth-1 ) else
7740: LD_EXP 15
7744: PPUSH
7745: LD_STRING D13a-Roth-1
7747: PPUSH
7748: CALL_OW 88
7752: GO 7766
// Say ( SciRu , D13a-RSci1-1 ) ;
7754: CALL 9844 0 0
7758: PPUSH
7759: LD_STRING D13a-RSci1-1
7761: PPUSH
7762: CALL_OW 88
// Say ( JMM , D13a-JMM-2 ) ;
7766: LD_EXP 14
7770: PPUSH
7771: LD_STRING D13a-JMM-2
7773: PPUSH
7774: CALL_OW 88
// case Query ( QBaseAgain ) of 1 :
7778: LD_STRING QBaseAgain
7780: PPUSH
7781: CALL_OW 97
7785: PUSH
7786: LD_INT 1
7788: DOUBLE
7789: EQUAL
7790: IFTRUE 7794
7792: GO 7805
7794: POP
// selected_option := 2 ; 2 :
7795: LD_ADDR_VAR 0 2
7799: PUSH
7800: LD_INT 2
7802: ST_TO_ADDR
7803: GO 7825
7805: LD_INT 2
7807: DOUBLE
7808: EQUAL
7809: IFTRUE 7813
7811: GO 7824
7813: POP
// selected_option := 3 ; end ;
7814: LD_ADDR_VAR 0 2
7818: PUSH
7819: LD_INT 3
7821: ST_TO_ADDR
7822: GO 7825
7824: POP
// end ; 2 :
7825: GO 7866
7827: LD_INT 2
7829: DOUBLE
7830: EQUAL
7831: IFTRUE 7835
7833: GO 7846
7835: POP
// selected_option := 2 ; 3 :
7836: LD_ADDR_VAR 0 2
7840: PUSH
7841: LD_INT 2
7843: ST_TO_ADDR
7844: GO 7866
7846: LD_INT 3
7848: DOUBLE
7849: EQUAL
7850: IFTRUE 7854
7852: GO 7865
7854: POP
// selected_option := 3 ; end ;
7855: LD_ADDR_VAR 0 2
7859: PUSH
7860: LD_INT 3
7862: ST_TO_ADDR
7863: GO 7866
7865: POP
// if selected_option = 2 then
7866: LD_VAR 0 2
7870: PUSH
7871: LD_INT 2
7873: EQUAL
7874: IFFALSE 7968
// begin Say ( JMM , D13b-JMM-1 ) ;
7876: LD_EXP 14
7880: PPUSH
7881: LD_STRING D13b-JMM-1
7883: PPUSH
7884: CALL_OW 88
// Say ( Burlak , D13b-Bur-1 ) ;
7888: LD_EXP 45
7892: PPUSH
7893: LD_STRING D13b-Bur-1
7895: PPUSH
7896: CALL_OW 88
// Say ( JMM , D13b-JMM-2 ) ;
7900: LD_EXP 14
7904: PPUSH
7905: LD_STRING D13b-JMM-2
7907: PPUSH
7908: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-2 ) ;
7912: LD_EXP 54
7916: PPUSH
7917: LD_STRING D13b-Abd-2
7919: PPUSH
7920: CALL_OW 94
// Say ( JMM , D13b-JMM-3 ) ;
7924: LD_EXP 14
7928: PPUSH
7929: LD_STRING D13b-JMM-3
7931: PPUSH
7932: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-3 ) ;
7936: LD_EXP 54
7940: PPUSH
7941: LD_STRING D13b-Abd-3
7943: PPUSH
7944: CALL_OW 94
// Say ( JMM , D13b-JMM-4 ) ;
7948: LD_EXP 14
7952: PPUSH
7953: LD_STRING D13b-JMM-4
7955: PPUSH
7956: CALL_OW 88
// ar_active_attack := true ;
7960: LD_ADDR_EXP 9
7964: PUSH
7965: LD_INT 1
7967: ST_TO_ADDR
// end ; if selected_option = 3 then
7968: LD_VAR 0 2
7972: PUSH
7973: LD_INT 3
7975: EQUAL
7976: IFFALSE 8002
// begin Say ( JMM , D13c-JMM-1 ) ;
7978: LD_EXP 14
7982: PPUSH
7983: LD_STRING D13c-JMM-1
7985: PPUSH
7986: CALL_OW 88
// Say ( Burlak , D13c-Bur-1 ) ;
7990: LD_EXP 45
7994: PPUSH
7995: LD_STRING D13c-Bur-1
7997: PPUSH
7998: CALL_OW 88
// end ; DialogueOff ;
8002: CALL_OW 7
// if not ar_active_attack then
8006: LD_EXP 9
8010: NOT
8011: IFFALSE 8028
// begin wait ( 6 6$00 ) ;
8013: LD_INT 12600
8015: PPUSH
8016: CALL_OW 67
// ar_active_attack := true ;
8020: LD_ADDR_EXP 9
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// end ; end ;
8028: PPOPN 2
8030: END
// every 0 0$1 trigger IsPlaced ( Burlak ) and GetSide ( Burlak ) = 7 do
8031: LD_EXP 45
8035: PPUSH
8036: CALL_OW 305
8040: PUSH
8041: LD_EXP 45
8045: PPUSH
8046: CALL_OW 255
8050: PUSH
8051: LD_INT 7
8053: EQUAL
8054: AND
8055: IFFALSE 8216
8057: GO 8059
8059: DISABLE
// begin wait ( 4 4$40 ) ;
8060: LD_INT 9800
8062: PPUSH
8063: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8067: LD_INT 35
8069: PPUSH
8070: CALL_OW 67
// until not ru_attackers ;
8074: LD_EXP 51
8078: NOT
8079: IFFALSE 8067
// PrepareGnyevko ;
8081: CALL 1986 0 0
// ComMoveXY ( Gnyevko , 124 , 118 ) ;
8085: LD_EXP 47
8089: PPUSH
8090: LD_INT 124
8092: PPUSH
8093: LD_INT 118
8095: PPUSH
8096: CALL_OW 111
// AddComHold ( Gnyevko ) ;
8100: LD_EXP 47
8104: PPUSH
8105: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
8109: LD_INT 35
8111: PPUSH
8112: CALL_OW 67
// until IsAt ( Gnyevko , 124 , 118 ) ;
8116: LD_EXP 47
8120: PPUSH
8121: LD_INT 124
8123: PPUSH
8124: LD_INT 118
8126: PPUSH
8127: CALL_OW 307
8131: IFFALSE 8109
// SayRadio ( Gnyevko , DBelkov-Gny-1 ) ;
8133: LD_EXP 47
8137: PPUSH
8138: LD_STRING DBelkov-Gny-1
8140: PPUSH
8141: CALL_OW 94
// Say ( Burlak , DBelkov-Bur-1a ) ;
8145: LD_EXP 45
8149: PPUSH
8150: LD_STRING DBelkov-Bur-1a
8152: PPUSH
8153: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
8157: LD_INT 35
8159: PPUSH
8160: CALL_OW 67
// until GetDistUnits ( Gnyevko , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Gnyevko ) ) < 8 ;
8164: LD_EXP 47
8168: PPUSH
8169: LD_INT 22
8171: PUSH
8172: LD_INT 7
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: PPUSH
8179: CALL_OW 69
8183: PPUSH
8184: LD_EXP 47
8188: PPUSH
8189: CALL_OW 74
8193: PPUSH
8194: CALL_OW 296
8198: PUSH
8199: LD_INT 8
8201: LESS
8202: IFFALSE 8157
// SetSide ( Gnyevko , 7 ) ;
8204: LD_EXP 47
8208: PPUSH
8209: LD_INT 7
8211: PPUSH
8212: CALL_OW 235
// end ;
8216: END
// every 10 10$00 + 1 1$30 trigger GetSide ( Burlak ) = 7 do
8217: LD_EXP 45
8221: PPUSH
8222: CALL_OW 255
8226: PUSH
8227: LD_INT 7
8229: EQUAL
8230: IFFALSE 8240
8232: GO 8234
8234: DISABLE
// begin enable ;
8235: ENABLE
// PrepareAmericanAttack ;
8236: CALL 11285 0 0
// end ;
8240: END
// every 0 0$2 trigger FilterAllUnits ( [ f_side , 1 ] ) do var i , tmp ;
8241: LD_INT 22
8243: PUSH
8244: LD_INT 1
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: PPUSH
8251: CALL_OW 69
8255: IFFALSE 8439
8257: GO 8259
8259: DISABLE
8260: LD_INT 0
8262: PPUSH
8263: PPUSH
// begin while true do
8264: LD_INT 1
8266: IFFALSE 8323
// begin wait ( 0 0$1 ) ;
8268: LD_INT 35
8270: PPUSH
8271: CALL_OW 67
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , JMM ) ;
8275: LD_ADDR_VAR 0 2
8279: PUSH
8280: LD_INT 22
8282: PUSH
8283: LD_INT 1
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 69
8294: PPUSH
8295: LD_EXP 14
8299: PPUSH
8300: CALL_OW 74
8304: ST_TO_ADDR
// if See ( 7 , tmp ) then
8305: LD_INT 7
8307: PPUSH
8308: LD_VAR 0 2
8312: PPUSH
8313: CALL_OW 292
8317: IFFALSE 8321
// break ;
8319: GO 8323
// end ;
8321: GO 8264
// DialogueOn ;
8323: CALL_OW 6
// CenterNowOnUnits ( tmp ) ;
8327: LD_VAR 0 2
8331: PPUSH
8332: CALL_OW 87
// PlaceSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 , 8 ) ;
8336: LD_VAR 0 2
8340: PPUSH
8341: CALL_OW 250
8345: PPUSH
8346: LD_VAR 0 2
8350: PPUSH
8351: CALL_OW 251
8355: PPUSH
8356: LD_INT 7
8358: PPUSH
8359: LD_INT 8
8361: PPUSH
8362: CALL_OW 330
// if Denis then
8366: LD_EXP 20
8370: IFFALSE 8384
// Say ( Denis , DAmerAttack-Pet-1 ) ;
8372: LD_EXP 20
8376: PPUSH
8377: LD_STRING DAmerAttack-Pet-1
8379: PPUSH
8380: CALL_OW 88
// Say ( JMM , DAmerAttack-JMM-1 ) ;
8384: LD_EXP 14
8388: PPUSH
8389: LD_STRING DAmerAttack-JMM-1
8391: PPUSH
8392: CALL_OW 88
// Say ( Burlak , DStop-Bur-1 ) ;
8396: LD_EXP 45
8400: PPUSH
8401: LD_STRING DStop-Bur-1
8403: PPUSH
8404: CALL_OW 88
// RemoveSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 ) ;
8408: LD_VAR 0 2
8412: PPUSH
8413: CALL_OW 250
8417: PPUSH
8418: LD_VAR 0 2
8422: PPUSH
8423: CALL_OW 251
8427: PPUSH
8428: LD_INT 7
8430: PPUSH
8431: CALL_OW 331
// DialogueOff ;
8435: CALL_OW 7
// end ;
8439: PPOPN 2
8441: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and IsDead ( ru_depot ) do
8442: LD_INT 22
8444: PUSH
8445: LD_INT 3
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PUSH
8452: LD_INT 21
8454: PUSH
8455: LD_INT 1
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: PPUSH
8466: CALL_OW 69
8470: PUSH
8471: LD_INT 0
8473: EQUAL
8474: PUSH
8475: LD_INT 47
8477: PPUSH
8478: CALL_OW 301
8482: AND
8483: IFFALSE 8525
8485: GO 8487
8487: DISABLE
// begin ChangeMissionObjectives ( M5a ) ;
8488: LD_STRING M5a
8490: PPUSH
8491: CALL_OW 337
// Say ( JMM , D8-JMM-1 ) ;
8495: LD_EXP 14
8499: PPUSH
8500: LD_STRING D8-JMM-1
8502: PPUSH
8503: CALL_OW 88
// if Gossudarov then
8507: LD_EXP 31
8511: IFFALSE 8525
// Say ( Gossudarov , D8-Gos-1 ) ;
8513: LD_EXP 31
8517: PPUSH
8518: LD_STRING D8-Gos-1
8520: PPUSH
8521: CALL_OW 88
// end ;
8525: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 do
8526: LD_INT 22
8528: PUSH
8529: LD_INT 2
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: PUSH
8536: LD_INT 21
8538: PUSH
8539: LD_INT 1
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PPUSH
8550: CALL_OW 69
8554: PUSH
8555: LD_INT 0
8557: EQUAL
8558: IFFALSE 8608
8560: GO 8562
8562: DISABLE
// begin ChangeMissionObjectives ( M4c ) ;
8563: LD_STRING M4c
8565: PPUSH
8566: CALL_OW 337
// if Roth then
8570: LD_EXP 15
8574: IFFALSE 8590
// Say ( Roth , DStop-Roth-1 ) else
8576: LD_EXP 15
8580: PPUSH
8581: LD_STRING DStop-Roth-1
8583: PPUSH
8584: CALL_OW 88
8588: GO 8608
// if Gossudarov then
8590: LD_EXP 31
8594: IFFALSE 8608
// Say ( Gossudarov , D8-Gos-1a ) ;
8596: LD_EXP 31
8600: PPUSH
8601: LD_STRING D8-Gos-1a
8603: PPUSH
8604: CALL_OW 88
// end ;
8608: END
// every 0 0$01 trigger GetTechNation ( 7 , 1 , state_enabled ) = 0 and GetTechNation ( 7 , 3 , state_enabled ) = 0 do
8609: LD_INT 7
8611: PPUSH
8612: LD_INT 1
8614: PPUSH
8615: LD_INT 1
8617: PPUSH
8618: CALL 11690 0 3
8622: PUSH
8623: LD_INT 0
8625: EQUAL
8626: PUSH
8627: LD_INT 7
8629: PPUSH
8630: LD_INT 3
8632: PPUSH
8633: LD_INT 1
8635: PPUSH
8636: CALL 11690 0 3
8640: PUSH
8641: LD_INT 0
8643: EQUAL
8644: AND
8645: IFFALSE 8657
8647: GO 8649
8649: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
8650: LD_STRING M1a
8652: PPUSH
8653: CALL_OW 337
// end ;
8657: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ f_side , 3 ] ) = 0 and FilterAllUnits ( [ f_side , 1 ] ) = 0 and GetTechNation ( 7 , 1 , state_enabled ) = 0 and GetTechNation ( 7 , 3 , state_enabled ) = 0 do var tmp , tmp2 ;
8658: LD_INT 22
8660: PUSH
8661: LD_INT 2
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 21
8670: PUSH
8671: LD_INT 1
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PPUSH
8682: CALL_OW 69
8686: PUSH
8687: LD_INT 0
8689: EQUAL
8690: PUSH
8691: LD_INT 22
8693: PUSH
8694: LD_INT 3
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PPUSH
8701: CALL_OW 69
8705: PUSH
8706: LD_INT 0
8708: EQUAL
8709: AND
8710: PUSH
8711: LD_INT 22
8713: PUSH
8714: LD_INT 1
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PPUSH
8721: CALL_OW 69
8725: PUSH
8726: LD_INT 0
8728: EQUAL
8729: AND
8730: PUSH
8731: LD_INT 7
8733: PPUSH
8734: LD_INT 1
8736: PPUSH
8737: LD_INT 1
8739: PPUSH
8740: CALL 11690 0 3
8744: PUSH
8745: LD_INT 0
8747: EQUAL
8748: AND
8749: PUSH
8750: LD_INT 7
8752: PPUSH
8753: LD_INT 3
8755: PPUSH
8756: LD_INT 1
8758: PPUSH
8759: CALL 11690 0 3
8763: PUSH
8764: LD_INT 0
8766: EQUAL
8767: AND
8768: IFFALSE 9841
8770: GO 8772
8772: DISABLE
8773: LD_INT 0
8775: PPUSH
8776: PPUSH
// begin if not IsDead ( Masha ) then
8777: LD_EXP 48
8781: PPUSH
8782: CALL_OW 301
8786: NOT
8787: IFFALSE 8801
// AddMedal ( Masha , 1 ) else
8789: LD_STRING Masha
8791: PPUSH
8792: LD_INT 1
8794: PPUSH
8795: CALL_OW 101
8799: GO 8812
// AddMedal ( Masha , - 1 ) ;
8801: LD_STRING Masha
8803: PPUSH
8804: LD_INT 1
8806: NEG
8807: PPUSH
8808: CALL_OW 101
// if abdul_escaped then
8812: LD_EXP 12
8816: IFFALSE 8831
// AddMedal ( Abdul , - 1 ) else
8818: LD_STRING Abdul
8820: PPUSH
8821: LD_INT 1
8823: NEG
8824: PPUSH
8825: CALL_OW 101
8829: GO 8841
// AddMedal ( Abdul , 1 ) ;
8831: LD_STRING Abdul
8833: PPUSH
8834: LD_INT 1
8836: PPUSH
8837: CALL_OW 101
// if loss_counter = 0 then
8841: LD_EXP 13
8845: PUSH
8846: LD_INT 0
8848: EQUAL
8849: IFFALSE 8863
// AddMedal ( People , 2 ) else
8851: LD_STRING People
8853: PPUSH
8854: LD_INT 2
8856: PPUSH
8857: CALL_OW 101
8861: GO 8913
// if loss_counter <= [ 3 , 2 , 2 ] [ Difficulty ] then
8863: LD_EXP 13
8867: PUSH
8868: LD_INT 3
8870: PUSH
8871: LD_INT 2
8873: PUSH
8874: LD_INT 2
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: LIST
8881: PUSH
8882: LD_OWVAR 67
8886: ARRAY
8887: LESSEQUAL
8888: IFFALSE 8902
// AddMedal ( People , 1 ) else
8890: LD_STRING People
8892: PPUSH
8893: LD_INT 1
8895: PPUSH
8896: CALL_OW 101
8900: GO 8913
// AddMedal ( People , - 1 ) ;
8902: LD_STRING People
8904: PPUSH
8905: LD_INT 1
8907: NEG
8908: PPUSH
8909: CALL_OW 101
// GiveMedals ( MAIN ) ;
8913: LD_STRING MAIN
8915: PPUSH
8916: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8920: LD_ADDR_VAR 0 1
8924: PUSH
8925: LD_INT 22
8927: PUSH
8928: LD_INT 7
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PUSH
8935: LD_INT 2
8937: PUSH
8938: LD_INT 25
8940: PUSH
8941: LD_INT 1
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 25
8950: PUSH
8951: LD_INT 2
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: LD_INT 25
8960: PUSH
8961: LD_INT 3
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: LD_INT 25
8970: PUSH
8971: LD_INT 4
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 25
8980: PUSH
8981: LD_INT 5
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 25
8990: PUSH
8991: LD_INT 8
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 25
9000: PUSH
9001: LD_INT 9
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 69
9026: ST_TO_ADDR
// RewardPeople ( tmp ) ;
9027: LD_VAR 0 1
9031: PPUSH
9032: CALL_OW 43
// tmp2 := [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Burlak , Belkov , Gnyevko ] ;
9036: LD_ADDR_VAR 0 2
9040: PUSH
9041: LD_EXP 14
9045: PUSH
9046: LD_EXP 15
9050: PUSH
9051: LD_EXP 16
9055: PUSH
9056: LD_EXP 17
9060: PUSH
9061: LD_EXP 18
9065: PUSH
9066: LD_EXP 19
9070: PUSH
9071: LD_EXP 20
9075: PUSH
9076: LD_EXP 21
9080: PUSH
9081: LD_EXP 22
9085: PUSH
9086: LD_EXP 23
9090: PUSH
9091: LD_EXP 24
9095: PUSH
9096: LD_EXP 25
9100: PUSH
9101: LD_EXP 26
9105: PUSH
9106: LD_EXP 27
9110: PUSH
9111: LD_EXP 28
9115: PUSH
9116: LD_EXP 29
9120: PUSH
9121: LD_EXP 30
9125: PUSH
9126: LD_EXP 31
9130: PUSH
9131: LD_EXP 32
9135: PUSH
9136: LD_EXP 33
9140: PUSH
9141: LD_EXP 35
9145: PUSH
9146: LD_EXP 36
9150: PUSH
9151: LD_EXP 37
9155: PUSH
9156: LD_EXP 38
9160: PUSH
9161: LD_EXP 39
9165: PUSH
9166: LD_EXP 40
9170: PUSH
9171: LD_EXP 41
9175: PUSH
9176: LD_EXP 42
9180: PUSH
9181: LD_EXP 43
9185: PUSH
9186: LD_EXP 44
9190: PUSH
9191: LD_EXP 45
9195: PUSH
9196: LD_EXP 46
9200: PUSH
9201: LD_EXP 47
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: ST_TO_ADDR
// if tmp diff tmp2 then
9241: LD_VAR 0 1
9245: PUSH
9246: LD_VAR 0 2
9250: DIFF
9251: IFFALSE 9271
// SaveCharacters ( tmp diff tmp2 , 13a_others ) ;
9253: LD_VAR 0 1
9257: PUSH
9258: LD_VAR 0 2
9262: DIFF
9263: PPUSH
9264: LD_STRING 13a_others
9266: PPUSH
9267: CALL_OW 38
// SaveCharacters ( JMM , 13a_JMM ) ;
9271: LD_EXP 14
9275: PPUSH
9276: LD_STRING 13a_JMM
9278: PPUSH
9279: CALL_OW 38
// if Titov then
9283: LD_EXP 33
9287: IFFALSE 9301
// SaveCharacters ( Titov , 13a_Titov ) ;
9289: LD_EXP 33
9293: PPUSH
9294: LD_STRING 13a_Titov
9296: PPUSH
9297: CALL_OW 38
// if Dolgov then
9301: LD_EXP 35
9305: IFFALSE 9319
// SaveCharacters ( Dolgov , 13a_Dolgov ) ;
9307: LD_EXP 35
9311: PPUSH
9312: LD_STRING 13a_Dolgov
9314: PPUSH
9315: CALL_OW 38
// if Petrosyan then
9319: LD_EXP 36
9323: IFFALSE 9337
// SaveCharacters ( Petrosyan , 13a_Petrosyan ) ;
9325: LD_EXP 36
9329: PPUSH
9330: LD_STRING 13a_Petrosyan
9332: PPUSH
9333: CALL_OW 38
// if Scholtze then
9337: LD_EXP 37
9341: IFFALSE 9355
// SaveCharacters ( Scholtze , 13a_Scholtze ) ;
9343: LD_EXP 37
9347: PPUSH
9348: LD_STRING 13a_Scholtze
9350: PPUSH
9351: CALL_OW 38
// if Oblukov then
9355: LD_EXP 38
9359: IFFALSE 9373
// SaveCharacters ( Oblukov , 13a_Oblukov ) ;
9361: LD_EXP 38
9365: PPUSH
9366: LD_STRING 13a_Oblukov
9368: PPUSH
9369: CALL_OW 38
// if Kapitsova then
9373: LD_EXP 39
9377: IFFALSE 9391
// SaveCharacters ( Kapitsova , 13a_Kapitsova ) ;
9379: LD_EXP 39
9383: PPUSH
9384: LD_STRING 13a_Kapitsova
9386: PPUSH
9387: CALL_OW 38
// if Lipshchin then
9391: LD_EXP 40
9395: IFFALSE 9409
// SaveCharacters ( Lipshchin , 13a_Lipshchin ) ;
9397: LD_EXP 40
9401: PPUSH
9402: LD_STRING 13a_Lipshchin
9404: PPUSH
9405: CALL_OW 38
// if Petrovova then
9409: LD_EXP 41
9413: IFFALSE 9427
// SaveCharacters ( Petrovova , 13a_Petrovova ) ;
9415: LD_EXP 41
9419: PPUSH
9420: LD_STRING 13a_Petrovova
9422: PPUSH
9423: CALL_OW 38
// if Kovalyuk then
9427: LD_EXP 42
9431: IFFALSE 9445
// SaveCharacters ( Kovalyuk , 13a_Kovalyuk ) ;
9433: LD_EXP 42
9437: PPUSH
9438: LD_STRING 13a_Kovalyuk
9440: PPUSH
9441: CALL_OW 38
// if Kuzmov then
9445: LD_EXP 43
9449: IFFALSE 9463
// SaveCharacters ( Kuzmov , 13a_Kuzmov ) ;
9451: LD_EXP 43
9455: PPUSH
9456: LD_STRING 13a_Kuzmov
9458: PPUSH
9459: CALL_OW 38
// if Karamazov then
9463: LD_EXP 44
9467: IFFALSE 9481
// SaveCharacters ( Karamazov , 13a_Karamazov ) ;
9469: LD_EXP 44
9473: PPUSH
9474: LD_STRING 13a_Karamazov
9476: PPUSH
9477: CALL_OW 38
// if Burlak then
9481: LD_EXP 45
9485: IFFALSE 9499
// SaveCharacters ( Burlak , 13a_Burlak ) ;
9487: LD_EXP 45
9491: PPUSH
9492: LD_STRING 13a_Burlak
9494: PPUSH
9495: CALL_OW 38
// if Belkov then
9499: LD_EXP 46
9503: IFFALSE 9517
// SaveCharacters ( Belkov , 13a_Belkov ) ;
9505: LD_EXP 46
9509: PPUSH
9510: LD_STRING 13a_Belkov
9512: PPUSH
9513: CALL_OW 38
// if Gnyevko then
9517: LD_EXP 47
9521: IFFALSE 9535
// SaveCharacters ( Gnyevko , 13a_Gnyevko ) ;
9523: LD_EXP 47
9527: PPUSH
9528: LD_STRING 13a_Gnyevko
9530: PPUSH
9531: CALL_OW 38
// if Lisa then
9535: LD_EXP 16
9539: IFFALSE 9553
// SaveCharacters ( Lisa , 13a_Lisa ) ;
9541: LD_EXP 16
9545: PPUSH
9546: LD_STRING 13a_Lisa
9548: PPUSH
9549: CALL_OW 38
// if Donaldson then
9553: LD_EXP 17
9557: IFFALSE 9571
// SaveCharacters ( Donaldson , 13a_Donaldson ) ;
9559: LD_EXP 17
9563: PPUSH
9564: LD_STRING 13a_Donaldson
9566: PPUSH
9567: CALL_OW 38
// if Bobby then
9571: LD_EXP 18
9575: IFFALSE 9589
// SaveCharacters ( Bobby , 13a_Bobby ) ;
9577: LD_EXP 18
9581: PPUSH
9582: LD_STRING 13a_Bobby
9584: PPUSH
9585: CALL_OW 38
// if Cyrus then
9589: LD_EXP 19
9593: IFFALSE 9607
// SaveCharacters ( Cyrus , 13a_Cyrus ) ;
9595: LD_EXP 19
9599: PPUSH
9600: LD_STRING 13a_Cyrus
9602: PPUSH
9603: CALL_OW 38
// if Denis then
9607: LD_EXP 20
9611: IFFALSE 9625
// SaveCharacters ( Denis , 13a_Denis ) ;
9613: LD_EXP 20
9617: PPUSH
9618: LD_STRING 13a_Denis
9620: PPUSH
9621: CALL_OW 38
// if Brown then
9625: LD_EXP 21
9629: IFFALSE 9643
// SaveCharacters ( Brown , 13a_Brown ) ;
9631: LD_EXP 21
9635: PPUSH
9636: LD_STRING 13a_Brown
9638: PPUSH
9639: CALL_OW 38
// if Gladstone then
9643: LD_EXP 22
9647: IFFALSE 9661
// SaveCharacters ( Gladstone , 13a_Gladstone ) ;
9649: LD_EXP 22
9653: PPUSH
9654: LD_STRING 13a_Gladstone
9656: PPUSH
9657: CALL_OW 38
// if Houten then
9661: LD_EXP 23
9665: IFFALSE 9679
// SaveCharacters ( Houten , 13a_Houten ) ;
9667: LD_EXP 23
9671: PPUSH
9672: LD_STRING 13a_Houten
9674: PPUSH
9675: CALL_OW 38
// if Cornel then
9679: LD_EXP 24
9683: IFFALSE 9697
// SaveCharacters ( Cornel , 13a_Cornel ) ;
9685: LD_EXP 24
9689: PPUSH
9690: LD_STRING 13a_Cornel
9692: PPUSH
9693: CALL_OW 38
// if Gary then
9697: LD_EXP 25
9701: IFFALSE 9715
// SaveCharacters ( Gary , 13a_Gary ) ;
9703: LD_EXP 25
9707: PPUSH
9708: LD_STRING 13a_Gary
9710: PPUSH
9711: CALL_OW 38
// if Frank then
9715: LD_EXP 26
9719: IFFALSE 9733
// SaveCharacters ( Frank , 13a_Frank ) ;
9721: LD_EXP 26
9725: PPUSH
9726: LD_STRING 13a_Frank
9728: PPUSH
9729: CALL_OW 38
// if Kikuchi then
9733: LD_EXP 27
9737: IFFALSE 9751
// SaveCharacters ( Kikuchi , 13a_Kikuchi ) ;
9739: LD_EXP 27
9743: PPUSH
9744: LD_STRING 13a_Kikuchi
9746: PPUSH
9747: CALL_OW 38
// if Simms then
9751: LD_EXP 28
9755: IFFALSE 9769
// SaveCharacters ( Simms , 13a_Simms ) ;
9757: LD_EXP 28
9761: PPUSH
9762: LD_STRING 13a_Simms
9764: PPUSH
9765: CALL_OW 38
// if Joan then
9769: LD_EXP 29
9773: IFFALSE 9787
// SaveCharacters ( Joan , 13a_Joan ) ;
9775: LD_EXP 29
9779: PPUSH
9780: LD_STRING 13a_Joan
9782: PPUSH
9783: CALL_OW 38
// if DeltaDoctor then
9787: LD_EXP 30
9791: IFFALSE 9805
// SaveCharacters ( DeltaDoctor , 13a_DeltaDoctor ) ;
9793: LD_EXP 30
9797: PPUSH
9798: LD_STRING 13a_DeltaDoctor
9800: PPUSH
9801: CALL_OW 38
// if Gossudarov then
9805: LD_EXP 31
9809: IFFALSE 9823
// SaveCharacters ( Gossudarov , 13a_Gossudarov ) ;
9811: LD_EXP 31
9815: PPUSH
9816: LD_STRING 13a_Gossudarov
9818: PPUSH
9819: CALL_OW 38
// if Kirilenkova then
9823: LD_EXP 32
9827: IFFALSE 9841
// SaveCharacters ( Kirilenkova , 13a_Kirilenkova ) ;
9829: LD_EXP 32
9833: PPUSH
9834: LD_STRING 13a_Kirilenkova
9836: PPUSH
9837: CALL_OW 38
// end ;
9841: PPOPN 2
9843: END
// export function SciRu ; var tmp , t ; begin
9844: LD_INT 0
9846: PPUSH
9847: PPUSH
9848: PPUSH
// t := [ Gossudarov , Burlak , Titov , Belkov , Gnyevko ] ;
9849: LD_ADDR_VAR 0 3
9853: PUSH
9854: LD_EXP 31
9858: PUSH
9859: LD_EXP 45
9863: PUSH
9864: LD_EXP 33
9868: PUSH
9869: LD_EXP 46
9873: PUSH
9874: LD_EXP 47
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff t ;
9886: LD_ADDR_VAR 0 2
9890: PUSH
9891: LD_INT 22
9893: PUSH
9894: LD_INT 7
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 23
9903: PUSH
9904: LD_INT 3
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: LD_INT 25
9913: PUSH
9914: LD_INT 4
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PUSH
9921: LD_INT 26
9923: PUSH
9924: LD_INT 1
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: PUSH
9942: LD_VAR 0 3
9946: DIFF
9947: ST_TO_ADDR
// if tmp then
9948: LD_VAR 0 2
9952: IFFALSE 9968
// result := tmp [ 1 ] ;
9954: LD_ADDR_VAR 0 1
9958: PUSH
9959: LD_VAR 0 2
9963: PUSH
9964: LD_INT 1
9966: ARRAY
9967: ST_TO_ADDR
// end ;
9968: LD_VAR 0 1
9972: RET
// export function SolRu ; var tmp , t ; begin
9973: LD_INT 0
9975: PPUSH
9976: PPUSH
9977: PPUSH
// t := [ Belkov , Burlak , Gossudarov ] ;
9978: LD_ADDR_VAR 0 3
9982: PUSH
9983: LD_EXP 46
9987: PUSH
9988: LD_EXP 45
9992: PUSH
9993: LD_EXP 31
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: LIST
10002: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 1 ] , [ f_sex , sex_male ] ] ) diff t ;
10003: LD_ADDR_VAR 0 2
10007: PUSH
10008: LD_INT 22
10010: PUSH
10011: LD_INT 7
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PUSH
10018: LD_INT 23
10020: PUSH
10021: LD_INT 3
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PUSH
10028: LD_INT 25
10030: PUSH
10031: LD_INT 1
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 26
10040: PUSH
10041: LD_INT 1
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: PPUSH
10054: CALL_OW 69
10058: PUSH
10059: LD_VAR 0 3
10063: DIFF
10064: ST_TO_ADDR
// if tmp then
10065: LD_VAR 0 2
10069: IFFALSE 10085
// result := tmp [ 1 ] ;
10071: LD_ADDR_VAR 0 1
10075: PUSH
10076: LD_VAR 0 2
10080: PUSH
10081: LD_INT 1
10083: ARRAY
10084: ST_TO_ADDR
// end ; end_of_file
10085: LD_VAR 0 1
10089: RET
// on UnitDestroyed ( un ) do var i , side ;
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) then
10094: LD_VAR 0 1
10098: PUSH
10099: LD_INT 22
10101: PUSH
10102: LD_INT 7
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: LD_INT 2
10111: PUSH
10112: LD_INT 25
10114: PUSH
10115: LD_INT 1
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PUSH
10122: LD_INT 25
10124: PUSH
10125: LD_INT 2
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 25
10134: PUSH
10135: LD_INT 3
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: LD_INT 25
10144: PUSH
10145: LD_INT 4
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 25
10154: PUSH
10155: LD_INT 5
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: LD_INT 25
10164: PUSH
10165: LD_INT 8
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 25
10174: PUSH
10175: LD_INT 9
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 69
10200: IN
10201: IFFALSE 10217
// loss_counter := loss_counter + 1 ;
10203: LD_ADDR_EXP 13
10207: PUSH
10208: LD_EXP 13
10212: PUSH
10213: LD_INT 1
10215: PLUS
10216: ST_TO_ADDR
// if un in ru_attackers then
10217: LD_VAR 0 1
10221: PUSH
10222: LD_EXP 51
10226: IN
10227: IFFALSE 10245
// ru_attackers := ru_attackers diff un ;
10229: LD_ADDR_EXP 51
10233: PUSH
10234: LD_EXP 51
10238: PUSH
10239: LD_VAR 0 1
10243: DIFF
10244: ST_TO_ADDR
// if un in ar_attackers then
10245: LD_VAR 0 1
10249: PUSH
10250: LD_EXP 10
10254: IN
10255: IFFALSE 10273
// ar_attackers := ar_attackers diff un ;
10257: LD_ADDR_EXP 10
10261: PUSH
10262: LD_EXP 10
10266: PUSH
10267: LD_VAR 0 1
10271: DIFF
10272: ST_TO_ADDR
// if un = JMM then
10273: LD_VAR 0 1
10277: PUSH
10278: LD_EXP 14
10282: EQUAL
10283: IFFALSE 10294
// begin YouLost ( JMM ) ;
10285: LD_STRING JMM
10287: PPUSH
10288: CALL_OW 104
// exit ;
10292: GO 10383
// end ; if un = Burlak then
10294: LD_VAR 0 1
10298: PUSH
10299: LD_EXP 45
10303: EQUAL
10304: IFFALSE 10315
// begin YouLost ( Burlak ) ;
10306: LD_STRING Burlak
10308: PPUSH
10309: CALL_OW 104
// exit ;
10313: GO 10383
// end ; if un = freedom then
10315: LD_VAR 0 1
10319: PUSH
10320: LD_EXP 3
10324: EQUAL
10325: IFFALSE 10336
// begin YouLost ( Destroyed ) ;
10327: LD_STRING Destroyed
10329: PPUSH
10330: CALL_OW 104
// exit ;
10334: GO 10383
// end ; if un = Masha then
10336: LD_VAR 0 1
10340: PUSH
10341: LD_EXP 48
10345: EQUAL
10346: IFFALSE 10355
// ChangeMissionObjectives ( M4b ) ;
10348: LD_STRING M4b
10350: PPUSH
10351: CALL_OW 337
// if un = Mastodont then
10355: LD_VAR 0 1
10359: PUSH
10360: LD_EXP 55
10364: EQUAL
10365: IFFALSE 10374
// ChangeMissionObjectives ( M4a ) ;
10367: LD_STRING M4a
10369: PPUSH
10370: CALL_OW 337
// MCE_UnitDestroyed ( un ) ;
10374: LD_VAR 0 1
10378: PPUSH
10379: CALL 64716 0 1
// end ;
10383: PPOPN 3
10385: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10386: LD_VAR 0 1
10390: PPUSH
10391: LD_VAR 0 2
10395: PPUSH
10396: CALL 66583 0 2
// end ;
10400: PPOPN 2
10402: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10403: LD_VAR 0 1
10407: PPUSH
10408: CALL 65665 0 1
// end ;
10412: PPOPN 1
10414: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_depot ] ] ) then
10415: LD_VAR 0 1
10419: PUSH
10420: LD_INT 22
10422: PUSH
10423: LD_INT 7
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: LD_INT 30
10432: PUSH
10433: LD_INT 0
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PPUSH
10444: CALL_OW 69
10448: IN
10449: IFFALSE 10488
// begin SetBName ( building , freedom ) ;
10451: LD_VAR 0 1
10455: PPUSH
10456: LD_STRING freedom
10458: PPUSH
10459: CALL_OW 500
// SetRestrict ( b_depot , 7 , false ) ;
10463: LD_INT 0
10465: PPUSH
10466: LD_INT 7
10468: PPUSH
10469: LD_INT 0
10471: PPUSH
10472: CALL_OW 324
// freedom := building ;
10476: LD_ADDR_EXP 3
10480: PUSH
10481: LD_VAR 0 1
10485: ST_TO_ADDR
// exit ;
10486: GO 10554
// end ; if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_btype , b_lab ] ] ) then
10488: LD_VAR 0 1
10492: PUSH
10493: LD_INT 22
10495: PUSH
10496: LD_INT 7
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 23
10505: PUSH
10506: LD_INT 3
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 30
10515: PUSH
10516: LD_INT 6
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: LIST
10527: PPUSH
10528: CALL_OW 69
10532: IN
10533: IFFALSE 10545
// begin ru_lab_builded := true ;
10535: LD_ADDR_EXP 5
10539: PUSH
10540: LD_INT 1
10542: ST_TO_ADDR
// exit ;
10543: GO 10554
// end ; MCE_BuildingComplete ( building ) ;
10545: LD_VAR 0 1
10549: PPUSH
10550: CALL 65899 0 1
// end ;
10554: PPOPN 1
10556: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
10557: LD_VAR 0 1
10561: PPUSH
10562: LD_VAR 0 2
10566: PPUSH
10567: CALL 64392 0 2
// end ;
10571: PPOPN 2
10573: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10574: LD_VAR 0 1
10578: PPUSH
10579: LD_VAR 0 2
10583: PPUSH
10584: LD_VAR 0 3
10588: PPUSH
10589: LD_VAR 0 4
10593: PPUSH
10594: LD_VAR 0 5
10598: PPUSH
10599: CALL 64019 0 5
// end ;
10603: PPOPN 5
10605: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10606: LD_VAR 0 1
10610: PPUSH
10611: LD_VAR 0 2
10615: PPUSH
10616: CALL 63707 0 2
// end ;
10620: PPOPN 2
10622: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10623: LD_VAR 0 1
10627: PPUSH
10628: LD_VAR 0 2
10632: PPUSH
10633: LD_VAR 0 3
10637: PPUSH
10638: LD_VAR 0 4
10642: PPUSH
10643: CALL 63552 0 4
// end ;
10647: PPOPN 4
10649: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10650: LD_VAR 0 1
10654: PPUSH
10655: LD_VAR 0 2
10659: PPUSH
10660: LD_VAR 0 3
10664: PPUSH
10665: CALL 63334 0 3
// end ;
10669: PPOPN 3
10671: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10672: LD_VAR 0 1
10676: PPUSH
10677: LD_VAR 0 2
10681: PPUSH
10682: CALL 63226 0 2
// end ;
10686: PPOPN 2
10688: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10689: LD_VAR 0 1
10693: PPUSH
10694: LD_VAR 0 2
10698: PPUSH
10699: CALL 66837 0 2
// end ;
10703: PPOPN 2
10705: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10706: LD_VAR 0 1
10710: PPUSH
10711: LD_VAR 0 2
10715: PPUSH
10716: LD_VAR 0 3
10720: PPUSH
10721: LD_VAR 0 4
10725: PPUSH
10726: CALL 67046 0 4
// end ;
10730: PPOPN 4
10732: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10733: LD_VAR 0 1
10737: PPUSH
10738: LD_VAR 0 2
10742: PPUSH
10743: CALL 63042 0 2
// end ; end_of_file
10747: PPOPN 2
10749: END
// every 0 0$30 do var cr , time ;
10750: GO 10752
10752: DISABLE
10753: LD_INT 0
10755: PPUSH
10756: PPUSH
// begin time := 0 0$10 ;
10757: LD_ADDR_VAR 0 2
10761: PUSH
10762: LD_INT 350
10764: ST_TO_ADDR
// while game do
10765: LD_EXP 2
10769: IFFALSE 10868
// begin wait ( time ) ;
10771: LD_VAR 0 2
10775: PPUSH
10776: CALL_OW 67
// if tick > 2 2$00 then
10780: LD_OWVAR 1
10784: PUSH
10785: LD_INT 4200
10787: GREATER
10788: IFFALSE 10821
// time := time + [ 0 0$05 , 0 0$06 , 0 0$07 ] [ Difficulty ] ;
10790: LD_ADDR_VAR 0 2
10794: PUSH
10795: LD_VAR 0 2
10799: PUSH
10800: LD_INT 175
10802: PUSH
10803: LD_INT 210
10805: PUSH
10806: LD_INT 245
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: LIST
10813: PUSH
10814: LD_OWVAR 67
10818: ARRAY
10819: PLUS
10820: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 70 , 49 , 25 , true ) ;
10821: LD_INT 1
10823: PPUSH
10824: LD_INT 5
10826: PPUSH
10827: CALL_OW 12
10831: PPUSH
10832: LD_INT 70
10834: PPUSH
10835: LD_INT 49
10837: PPUSH
10838: LD_INT 25
10840: PPUSH
10841: LD_INT 1
10843: PPUSH
10844: CALL_OW 56
// if time > 5 5$00 then
10848: LD_VAR 0 2
10852: PUSH
10853: LD_INT 10500
10855: GREATER
10856: IFFALSE 10866
// time := 0 0$30 ;
10858: LD_ADDR_VAR 0 2
10862: PUSH
10863: LD_INT 1050
10865: ST_TO_ADDR
// end ;
10866: GO 10765
// end ;
10868: PPOPN 2
10870: END
// every 0 0$30 do var cr , time ;
10871: GO 10873
10873: DISABLE
10874: LD_INT 0
10876: PPUSH
10877: PPUSH
// begin time := 0 0$01 ;
10878: LD_ADDR_VAR 0 2
10882: PUSH
10883: LD_INT 35
10885: ST_TO_ADDR
// while game do
10886: LD_EXP 2
10890: IFFALSE 10979
// begin wait ( time ) ;
10892: LD_VAR 0 2
10896: PPUSH
10897: CALL_OW 67
// time := time + [ 0 0$04 , 0 0$05 , 0 0$06 ] [ Difficulty ] ;
10901: LD_ADDR_VAR 0 2
10905: PUSH
10906: LD_VAR 0 2
10910: PUSH
10911: LD_INT 140
10913: PUSH
10914: LD_INT 175
10916: PUSH
10917: LD_INT 210
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: LIST
10924: PUSH
10925: LD_OWVAR 67
10929: ARRAY
10930: PLUS
10931: ST_TO_ADDR
// CreateCratesXYR ( rand ( 3 , 5 ) , 26 , 9 , 30 , true ) ;
10932: LD_INT 3
10934: PPUSH
10935: LD_INT 5
10937: PPUSH
10938: CALL_OW 12
10942: PPUSH
10943: LD_INT 26
10945: PPUSH
10946: LD_INT 9
10948: PPUSH
10949: LD_INT 30
10951: PPUSH
10952: LD_INT 1
10954: PPUSH
10955: CALL_OW 56
// if time > 3 3$00 then
10959: LD_VAR 0 2
10963: PUSH
10964: LD_INT 6300
10966: GREATER
10967: IFFALSE 10977
// time := 0 0$20 ;
10969: LD_ADDR_VAR 0 2
10973: PUSH
10974: LD_INT 700
10976: ST_TO_ADDR
// end ;
10977: GO 10886
// end ;
10979: PPOPN 2
10981: END
// every 0 0$30 do var cr , time ;
10982: GO 10984
10984: DISABLE
10985: LD_INT 0
10987: PPUSH
10988: PPUSH
// begin time := 0 0$20 ;
10989: LD_ADDR_VAR 0 2
10993: PUSH
10994: LD_INT 700
10996: ST_TO_ADDR
// while game do
10997: LD_EXP 2
11001: IFFALSE 11126
// begin wait ( time ) ;
11003: LD_VAR 0 2
11007: PPUSH
11008: CALL_OW 67
// time := time + [ 0 0$05 , 0 0$06 , 0 0$08 ] [ Difficulty ] ;
11012: LD_ADDR_VAR 0 2
11016: PUSH
11017: LD_VAR 0 2
11021: PUSH
11022: LD_INT 175
11024: PUSH
11025: LD_INT 210
11027: PUSH
11028: LD_INT 280
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: LIST
11035: PUSH
11036: LD_OWVAR 67
11040: ARRAY
11041: PLUS
11042: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 179 , 101 , 20 , true ) ;
11043: LD_INT 1
11045: PPUSH
11046: LD_INT 5
11048: PPUSH
11049: CALL_OW 12
11053: PPUSH
11054: LD_INT 179
11056: PPUSH
11057: LD_INT 101
11059: PPUSH
11060: LD_INT 20
11062: PPUSH
11063: LD_INT 1
11065: PPUSH
11066: CALL_OW 56
// wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
11070: LD_INT 350
11072: PPUSH
11073: LD_INT 525
11075: PPUSH
11076: CALL_OW 12
11080: PPUSH
11081: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area_collect_arabian , true ) ;
11085: LD_INT 1
11087: PPUSH
11088: LD_INT 5
11090: PPUSH
11091: CALL_OW 12
11095: PPUSH
11096: LD_INT 9
11098: PPUSH
11099: LD_INT 1
11101: PPUSH
11102: CALL_OW 55
// if time > 4 4$00 then
11106: LD_VAR 0 2
11110: PUSH
11111: LD_INT 8400
11113: GREATER
11114: IFFALSE 11124
// time := 0 0$30 ;
11116: LD_ADDR_VAR 0 2
11120: PUSH
11121: LD_INT 1050
11123: ST_TO_ADDR
// end ;
11124: GO 10997
// end ;
11126: PPOPN 2
11128: END
// every 0 0$30 do var cr , time ;
11129: GO 11131
11131: DISABLE
11132: LD_INT 0
11134: PPUSH
11135: PPUSH
// begin time := 0 0$10 ;
11136: LD_ADDR_VAR 0 2
11140: PUSH
11141: LD_INT 350
11143: ST_TO_ADDR
// while game do
11144: LD_EXP 2
11148: IFFALSE 11282
// begin wait ( time ) ;
11150: LD_VAR 0 2
11154: PPUSH
11155: CALL_OW 67
// time := time + 0 0$10 ;
11159: LD_ADDR_VAR 0 2
11163: PUSH
11164: LD_VAR 0 2
11168: PUSH
11169: LD_INT 350
11171: PLUS
11172: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , area_crates_russian , true ) ;
11173: LD_INT 1
11175: PPUSH
11176: LD_INT 5
11178: PPUSH
11179: CALL_OW 12
11183: PPUSH
11184: LD_INT 11
11186: PPUSH
11187: LD_INT 1
11189: PPUSH
11190: CALL_OW 55
// cr := rand ( 1 , 3 ) ;
11194: LD_ADDR_VAR 0 1
11198: PUSH
11199: LD_INT 1
11201: PPUSH
11202: LD_INT 3
11204: PPUSH
11205: CALL_OW 12
11209: ST_TO_ADDR
// if cr = 1 then
11210: LD_VAR 0 1
11214: PUSH
11215: LD_INT 1
11217: EQUAL
11218: IFFALSE 11262
// begin wait ( rand ( 0 0$20 , 0 0$45 ) ) ;
11220: LD_INT 700
11222: PPUSH
11223: LD_INT 1575
11225: PPUSH
11226: CALL_OW 12
11230: PPUSH
11231: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 34 , 50 , 7 , true ) ;
11235: LD_INT 1
11237: PPUSH
11238: LD_INT 5
11240: PPUSH
11241: CALL_OW 12
11245: PPUSH
11246: LD_INT 34
11248: PPUSH
11249: LD_INT 50
11251: PPUSH
11252: LD_INT 7
11254: PPUSH
11255: LD_INT 1
11257: PPUSH
11258: CALL_OW 56
// end ; if time > 8 8$00 then
11262: LD_VAR 0 2
11266: PUSH
11267: LD_INT 16800
11269: GREATER
11270: IFFALSE 11280
// time := 0 0$40 ;
11272: LD_ADDR_VAR 0 2
11276: PUSH
11277: LD_INT 1400
11279: ST_TO_ADDR
// end ;
11280: GO 11144
// end ; end_of_file
11282: PPOPN 2
11284: END
// export function PrepareAmericanAttack ; var i , tmp , veh , flags , _target ; begin
11285: LD_INT 0
11287: PPUSH
11288: PPUSH
11289: PPUSH
11290: PPUSH
11291: PPUSH
11292: PPUSH
// uc_side := 1 ;
11293: LD_ADDR_OWVAR 20
11297: PUSH
11298: LD_INT 1
11300: ST_TO_ADDR
// uc_nation := 1 ;
11301: LD_ADDR_OWVAR 21
11305: PUSH
11306: LD_INT 1
11308: ST_TO_ADDR
// InitHc ;
11309: CALL_OW 19
// InitVc ;
11313: CALL_OW 20
// tmp := [ ] ;
11317: LD_ADDR_VAR 0 3
11321: PUSH
11322: EMPTY
11323: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
11324: LD_ADDR_VAR 0 5
11328: PUSH
11329: LD_INT 0
11331: PUSH
11332: LD_INT 0
11334: PUSH
11335: LD_INT 0
11337: PUSH
11338: LD_INT 0
11340: PUSH
11341: LD_INT 0
11343: PUSH
11344: LD_INT 0
11346: PUSH
11347: LD_INT 0
11349: PUSH
11350: LD_INT 0
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: LD_INT 0
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: ST_TO_ADDR
// _target := [ [ 71 , 34 ] , [ 63 , 49 ] ] ;
11371: LD_ADDR_VAR 0 6
11375: PUSH
11376: LD_INT 71
11378: PUSH
11379: LD_INT 34
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PUSH
11386: LD_INT 63
11388: PUSH
11389: LD_INT 49
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
11400: LD_ADDR_VAR 0 2
11404: PUSH
11405: DOUBLE
11406: LD_INT 1
11408: DEC
11409: ST_TO_ADDR
11410: LD_INT 4
11412: PUSH
11413: LD_INT 5
11415: PUSH
11416: LD_INT 6
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: LIST
11423: PUSH
11424: LD_OWVAR 67
11428: ARRAY
11429: PUSH
11430: FOR_TO
11431: IFFALSE 11568
// begin PrepareVehicle ( [ us_medium_wheeled , us_heavy_tracked , us_morphling ] [ rand ( 1 , 3 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ us_laser , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 78 ) ;
11433: LD_INT 2
11435: PUSH
11436: LD_INT 4
11438: PUSH
11439: LD_INT 5
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 1
11449: PPUSH
11450: LD_INT 3
11452: PPUSH
11453: CALL_OW 12
11457: ARRAY
11458: PPUSH
11459: LD_INT 1
11461: PUSH
11462: LD_INT 3
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 1
11471: PPUSH
11472: LD_INT 2
11474: PPUSH
11475: CALL_OW 12
11479: ARRAY
11480: PPUSH
11481: LD_INT 3
11483: PPUSH
11484: LD_INT 9
11486: PUSH
11487: LD_INT 7
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 1
11496: PPUSH
11497: LD_INT 2
11499: PPUSH
11500: CALL_OW 12
11504: ARRAY
11505: PPUSH
11506: LD_INT 78
11508: PPUSH
11509: CALL 17608 0 5
// veh := CreateVehicle ;
11513: LD_ADDR_VAR 0 4
11517: PUSH
11518: CALL_OW 45
11522: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
11523: LD_VAR 0 4
11527: PPUSH
11528: LD_INT 2
11530: PPUSH
11531: CALL_OW 233
// PlaceUnitArea ( veh , north_spawn , false ) ;
11535: LD_VAR 0 4
11539: PPUSH
11540: LD_INT 17
11542: PPUSH
11543: LD_INT 0
11545: PPUSH
11546: CALL_OW 49
// tmp := tmp union veh ;
11550: LD_ADDR_VAR 0 3
11554: PUSH
11555: LD_VAR 0 3
11559: PUSH
11560: LD_VAR 0 4
11564: UNION
11565: ST_TO_ADDR
// end ;
11566: GO 11430
11568: POP
11569: POP
// if not tmp then
11570: LD_VAR 0 3
11574: NOT
11575: IFFALSE 11579
// exit ;
11577: GO 11622
// if not first_powell_attack then
11579: LD_EXP 11
11583: NOT
11584: IFFALSE 11594
// first_powell_attack := true ;
11586: LD_ADDR_EXP 11
11590: PUSH
11591: LD_INT 1
11593: ST_TO_ADDR
// Attack ( [ 0 , tmp , _target , flags ] ) ;
11594: LD_INT 0
11596: PUSH
11597: LD_VAR 0 3
11601: PUSH
11602: LD_VAR 0 6
11606: PUSH
11607: LD_VAR 0 5
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: PPUSH
11618: CALL 45505 0 1
// end ; end_of_file
11622: LD_VAR 0 1
11626: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
// if exist_mode then
11631: LD_VAR 0 2
11635: IFFALSE 11660
// unit := CreateCharacter ( prefix & ident ) else
11637: LD_ADDR_VAR 0 5
11641: PUSH
11642: LD_VAR 0 3
11646: PUSH
11647: LD_VAR 0 1
11651: STR
11652: PPUSH
11653: CALL_OW 34
11657: ST_TO_ADDR
11658: GO 11675
// unit := NewCharacter ( ident ) ;
11660: LD_ADDR_VAR 0 5
11664: PUSH
11665: LD_VAR 0 1
11669: PPUSH
11670: CALL_OW 25
11674: ST_TO_ADDR
// result := unit ;
11675: LD_ADDR_VAR 0 4
11679: PUSH
11680: LD_VAR 0 5
11684: ST_TO_ADDR
// end ;
11685: LD_VAR 0 4
11689: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11690: LD_INT 0
11692: PPUSH
11693: PPUSH
// if not side or not nation then
11694: LD_VAR 0 1
11698: NOT
11699: PUSH
11700: LD_VAR 0 2
11704: NOT
11705: OR
11706: IFFALSE 11710
// exit ;
11708: GO 12322
// case nation of nation_american :
11710: LD_VAR 0 2
11714: PUSH
11715: LD_INT 1
11717: DOUBLE
11718: EQUAL
11719: IFTRUE 11723
11721: GO 11881
11723: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
11724: LD_ADDR_VAR 0 4
11728: PUSH
11729: LD_INT 35
11731: PUSH
11732: LD_INT 45
11734: PUSH
11735: LD_INT 46
11737: PUSH
11738: LD_INT 47
11740: PUSH
11741: LD_INT 1
11743: PUSH
11744: LD_INT 2
11746: PUSH
11747: LD_INT 6
11749: PUSH
11750: LD_INT 15
11752: PUSH
11753: LD_INT 16
11755: PUSH
11756: LD_INT 7
11758: PUSH
11759: LD_INT 12
11761: PUSH
11762: LD_INT 13
11764: PUSH
11765: LD_INT 10
11767: PUSH
11768: LD_INT 14
11770: PUSH
11771: LD_INT 20
11773: PUSH
11774: LD_INT 25
11776: PUSH
11777: LD_INT 36
11779: PUSH
11780: LD_INT 69
11782: PUSH
11783: LD_INT 39
11785: PUSH
11786: LD_INT 34
11788: PUSH
11789: LD_INT 40
11791: PUSH
11792: LD_INT 48
11794: PUSH
11795: LD_INT 49
11797: PUSH
11798: LD_INT 50
11800: PUSH
11801: LD_INT 51
11803: PUSH
11804: LD_INT 52
11806: PUSH
11807: LD_INT 53
11809: PUSH
11810: LD_INT 54
11812: PUSH
11813: LD_INT 55
11815: PUSH
11816: LD_INT 56
11818: PUSH
11819: LD_INT 57
11821: PUSH
11822: LD_INT 58
11824: PUSH
11825: LD_INT 59
11827: PUSH
11828: LD_INT 60
11830: PUSH
11831: LD_INT 61
11833: PUSH
11834: LD_INT 62
11836: PUSH
11837: LD_INT 80
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: ST_TO_ADDR
11879: GO 12246
11881: LD_INT 2
11883: DOUBLE
11884: EQUAL
11885: IFTRUE 11889
11887: GO 12059
11889: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
11890: LD_ADDR_VAR 0 4
11894: PUSH
11895: LD_INT 35
11897: PUSH
11898: LD_INT 45
11900: PUSH
11901: LD_INT 46
11903: PUSH
11904: LD_INT 47
11906: PUSH
11907: LD_INT 70
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: LD_INT 11
11915: PUSH
11916: LD_INT 3
11918: PUSH
11919: LD_INT 4
11921: PUSH
11922: LD_INT 5
11924: PUSH
11925: LD_INT 6
11927: PUSH
11928: LD_INT 15
11930: PUSH
11931: LD_INT 18
11933: PUSH
11934: LD_INT 7
11936: PUSH
11937: LD_INT 17
11939: PUSH
11940: LD_INT 8
11942: PUSH
11943: LD_INT 20
11945: PUSH
11946: LD_INT 72
11948: PUSH
11949: LD_INT 26
11951: PUSH
11952: LD_INT 69
11954: PUSH
11955: LD_INT 39
11957: PUSH
11958: LD_INT 40
11960: PUSH
11961: LD_INT 41
11963: PUSH
11964: LD_INT 42
11966: PUSH
11967: LD_INT 43
11969: PUSH
11970: LD_INT 48
11972: PUSH
11973: LD_INT 49
11975: PUSH
11976: LD_INT 50
11978: PUSH
11979: LD_INT 51
11981: PUSH
11982: LD_INT 52
11984: PUSH
11985: LD_INT 53
11987: PUSH
11988: LD_INT 54
11990: PUSH
11991: LD_INT 55
11993: PUSH
11994: LD_INT 56
11996: PUSH
11997: LD_INT 60
11999: PUSH
12000: LD_INT 61
12002: PUSH
12003: LD_INT 62
12005: PUSH
12006: LD_INT 66
12008: PUSH
12009: LD_INT 67
12011: PUSH
12012: LD_INT 68
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: ST_TO_ADDR
12057: GO 12246
12059: LD_INT 3
12061: DOUBLE
12062: EQUAL
12063: IFTRUE 12067
12065: GO 12245
12067: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
12068: LD_ADDR_VAR 0 4
12072: PUSH
12073: LD_INT 46
12075: PUSH
12076: LD_INT 47
12078: PUSH
12079: LD_INT 1
12081: PUSH
12082: LD_INT 2
12084: PUSH
12085: LD_INT 11
12087: PUSH
12088: LD_INT 9
12090: PUSH
12091: LD_INT 20
12093: PUSH
12094: LD_INT 19
12096: PUSH
12097: LD_INT 21
12099: PUSH
12100: LD_INT 24
12102: PUSH
12103: LD_INT 22
12105: PUSH
12106: LD_INT 25
12108: PUSH
12109: LD_INT 28
12111: PUSH
12112: LD_INT 29
12114: PUSH
12115: LD_INT 31
12117: PUSH
12118: LD_INT 37
12120: PUSH
12121: LD_INT 38
12123: PUSH
12124: LD_INT 32
12126: PUSH
12127: LD_INT 27
12129: PUSH
12130: LD_INT 33
12132: PUSH
12133: LD_INT 69
12135: PUSH
12136: LD_INT 39
12138: PUSH
12139: LD_INT 34
12141: PUSH
12142: LD_INT 40
12144: PUSH
12145: LD_INT 71
12147: PUSH
12148: LD_INT 23
12150: PUSH
12151: LD_INT 44
12153: PUSH
12154: LD_INT 48
12156: PUSH
12157: LD_INT 49
12159: PUSH
12160: LD_INT 50
12162: PUSH
12163: LD_INT 51
12165: PUSH
12166: LD_INT 52
12168: PUSH
12169: LD_INT 53
12171: PUSH
12172: LD_INT 54
12174: PUSH
12175: LD_INT 55
12177: PUSH
12178: LD_INT 56
12180: PUSH
12181: LD_INT 57
12183: PUSH
12184: LD_INT 58
12186: PUSH
12187: LD_INT 59
12189: PUSH
12190: LD_INT 63
12192: PUSH
12193: LD_INT 64
12195: PUSH
12196: LD_INT 65
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: ST_TO_ADDR
12243: GO 12246
12245: POP
// if state > - 1 and state < 3 then
12246: LD_VAR 0 3
12250: PUSH
12251: LD_INT 1
12253: NEG
12254: GREATER
12255: PUSH
12256: LD_VAR 0 3
12260: PUSH
12261: LD_INT 3
12263: LESS
12264: AND
12265: IFFALSE 12322
// for i in result do
12267: LD_ADDR_VAR 0 5
12271: PUSH
12272: LD_VAR 0 4
12276: PUSH
12277: FOR_IN
12278: IFFALSE 12320
// if GetTech ( i , side ) <> state then
12280: LD_VAR 0 5
12284: PPUSH
12285: LD_VAR 0 1
12289: PPUSH
12290: CALL_OW 321
12294: PUSH
12295: LD_VAR 0 3
12299: NONEQUAL
12300: IFFALSE 12318
// result := result diff i ;
12302: LD_ADDR_VAR 0 4
12306: PUSH
12307: LD_VAR 0 4
12311: PUSH
12312: LD_VAR 0 5
12316: DIFF
12317: ST_TO_ADDR
12318: GO 12277
12320: POP
12321: POP
// end ;
12322: LD_VAR 0 4
12326: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12327: LD_INT 0
12329: PPUSH
12330: PPUSH
12331: PPUSH
12332: PPUSH
12333: PPUSH
12334: PPUSH
12335: PPUSH
12336: PPUSH
12337: PPUSH
12338: PPUSH
12339: PPUSH
12340: PPUSH
12341: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12342: LD_VAR 0 1
12346: NOT
12347: PUSH
12348: LD_VAR 0 1
12352: PPUSH
12353: CALL_OW 257
12357: PUSH
12358: LD_INT 9
12360: NONEQUAL
12361: OR
12362: IFFALSE 12366
// exit ;
12364: GO 12939
// side := GetSide ( unit ) ;
12366: LD_ADDR_VAR 0 9
12370: PUSH
12371: LD_VAR 0 1
12375: PPUSH
12376: CALL_OW 255
12380: ST_TO_ADDR
// tech_space := tech_spacanom ;
12381: LD_ADDR_VAR 0 12
12385: PUSH
12386: LD_INT 29
12388: ST_TO_ADDR
// tech_time := tech_taurad ;
12389: LD_ADDR_VAR 0 13
12393: PUSH
12394: LD_INT 28
12396: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12397: LD_ADDR_VAR 0 11
12401: PUSH
12402: LD_VAR 0 1
12406: PPUSH
12407: CALL_OW 310
12411: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12412: LD_VAR 0 11
12416: PPUSH
12417: CALL_OW 247
12421: PUSH
12422: LD_INT 2
12424: EQUAL
12425: IFFALSE 12429
// exit ;
12427: GO 12939
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12429: LD_ADDR_VAR 0 8
12433: PUSH
12434: LD_INT 81
12436: PUSH
12437: LD_VAR 0 9
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: LD_INT 3
12448: PUSH
12449: LD_INT 21
12451: PUSH
12452: LD_INT 3
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PPUSH
12467: CALL_OW 69
12471: ST_TO_ADDR
// if not tmp then
12472: LD_VAR 0 8
12476: NOT
12477: IFFALSE 12481
// exit ;
12479: GO 12939
// if in_unit then
12481: LD_VAR 0 11
12485: IFFALSE 12509
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12487: LD_ADDR_VAR 0 10
12491: PUSH
12492: LD_VAR 0 8
12496: PPUSH
12497: LD_VAR 0 11
12501: PPUSH
12502: CALL_OW 74
12506: ST_TO_ADDR
12507: GO 12529
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12509: LD_ADDR_VAR 0 10
12513: PUSH
12514: LD_VAR 0 8
12518: PPUSH
12519: LD_VAR 0 1
12523: PPUSH
12524: CALL_OW 74
12528: ST_TO_ADDR
// if not enemy then
12529: LD_VAR 0 10
12533: NOT
12534: IFFALSE 12538
// exit ;
12536: GO 12939
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12538: LD_VAR 0 11
12542: PUSH
12543: LD_VAR 0 11
12547: PPUSH
12548: LD_VAR 0 10
12552: PPUSH
12553: CALL_OW 296
12557: PUSH
12558: LD_INT 13
12560: GREATER
12561: AND
12562: PUSH
12563: LD_VAR 0 1
12567: PPUSH
12568: LD_VAR 0 10
12572: PPUSH
12573: CALL_OW 296
12577: PUSH
12578: LD_INT 12
12580: GREATER
12581: OR
12582: IFFALSE 12586
// exit ;
12584: GO 12939
// missile := [ 1 ] ;
12586: LD_ADDR_VAR 0 14
12590: PUSH
12591: LD_INT 1
12593: PUSH
12594: EMPTY
12595: LIST
12596: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12597: LD_VAR 0 9
12601: PPUSH
12602: LD_VAR 0 12
12606: PPUSH
12607: CALL_OW 325
12611: IFFALSE 12640
// missile := Insert ( missile , missile + 1 , 2 ) ;
12613: LD_ADDR_VAR 0 14
12617: PUSH
12618: LD_VAR 0 14
12622: PPUSH
12623: LD_VAR 0 14
12627: PUSH
12628: LD_INT 1
12630: PLUS
12631: PPUSH
12632: LD_INT 2
12634: PPUSH
12635: CALL_OW 2
12639: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12640: LD_VAR 0 9
12644: PPUSH
12645: LD_VAR 0 13
12649: PPUSH
12650: CALL_OW 325
12654: PUSH
12655: LD_VAR 0 10
12659: PPUSH
12660: CALL_OW 255
12664: PPUSH
12665: LD_VAR 0 13
12669: PPUSH
12670: CALL_OW 325
12674: NOT
12675: AND
12676: IFFALSE 12705
// missile := Insert ( missile , missile + 1 , 3 ) ;
12678: LD_ADDR_VAR 0 14
12682: PUSH
12683: LD_VAR 0 14
12687: PPUSH
12688: LD_VAR 0 14
12692: PUSH
12693: LD_INT 1
12695: PLUS
12696: PPUSH
12697: LD_INT 3
12699: PPUSH
12700: CALL_OW 2
12704: ST_TO_ADDR
// if missile < 2 then
12705: LD_VAR 0 14
12709: PUSH
12710: LD_INT 2
12712: LESS
12713: IFFALSE 12717
// exit ;
12715: GO 12939
// x := GetX ( enemy ) ;
12717: LD_ADDR_VAR 0 4
12721: PUSH
12722: LD_VAR 0 10
12726: PPUSH
12727: CALL_OW 250
12731: ST_TO_ADDR
// y := GetY ( enemy ) ;
12732: LD_ADDR_VAR 0 5
12736: PUSH
12737: LD_VAR 0 10
12741: PPUSH
12742: CALL_OW 251
12746: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12747: LD_ADDR_VAR 0 6
12751: PUSH
12752: LD_VAR 0 4
12756: PUSH
12757: LD_INT 1
12759: NEG
12760: PPUSH
12761: LD_INT 1
12763: PPUSH
12764: CALL_OW 12
12768: PLUS
12769: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12770: LD_ADDR_VAR 0 7
12774: PUSH
12775: LD_VAR 0 5
12779: PUSH
12780: LD_INT 1
12782: NEG
12783: PPUSH
12784: LD_INT 1
12786: PPUSH
12787: CALL_OW 12
12791: PLUS
12792: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12793: LD_VAR 0 6
12797: PPUSH
12798: LD_VAR 0 7
12802: PPUSH
12803: CALL_OW 488
12807: NOT
12808: IFFALSE 12830
// begin _x := x ;
12810: LD_ADDR_VAR 0 6
12814: PUSH
12815: LD_VAR 0 4
12819: ST_TO_ADDR
// _y := y ;
12820: LD_ADDR_VAR 0 7
12824: PUSH
12825: LD_VAR 0 5
12829: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12830: LD_ADDR_VAR 0 3
12834: PUSH
12835: LD_INT 1
12837: PPUSH
12838: LD_VAR 0 14
12842: PPUSH
12843: CALL_OW 12
12847: ST_TO_ADDR
// case i of 1 :
12848: LD_VAR 0 3
12852: PUSH
12853: LD_INT 1
12855: DOUBLE
12856: EQUAL
12857: IFTRUE 12861
12859: GO 12878
12861: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12862: LD_VAR 0 1
12866: PPUSH
12867: LD_VAR 0 10
12871: PPUSH
12872: CALL_OW 115
12876: GO 12939
12878: LD_INT 2
12880: DOUBLE
12881: EQUAL
12882: IFTRUE 12886
12884: GO 12908
12886: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12887: LD_VAR 0 1
12891: PPUSH
12892: LD_VAR 0 6
12896: PPUSH
12897: LD_VAR 0 7
12901: PPUSH
12902: CALL_OW 153
12906: GO 12939
12908: LD_INT 3
12910: DOUBLE
12911: EQUAL
12912: IFTRUE 12916
12914: GO 12938
12916: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12917: LD_VAR 0 1
12921: PPUSH
12922: LD_VAR 0 6
12926: PPUSH
12927: LD_VAR 0 7
12931: PPUSH
12932: CALL_OW 154
12936: GO 12939
12938: POP
// end ;
12939: LD_VAR 0 2
12943: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12944: LD_INT 0
12946: PPUSH
12947: PPUSH
12948: PPUSH
12949: PPUSH
12950: PPUSH
12951: PPUSH
// if not unit or not building then
12952: LD_VAR 0 1
12956: NOT
12957: PUSH
12958: LD_VAR 0 2
12962: NOT
12963: OR
12964: IFFALSE 12968
// exit ;
12966: GO 13123
// x := GetX ( building ) ;
12968: LD_ADDR_VAR 0 5
12972: PUSH
12973: LD_VAR 0 2
12977: PPUSH
12978: CALL_OW 250
12982: ST_TO_ADDR
// y := GetY ( building ) ;
12983: LD_ADDR_VAR 0 6
12987: PUSH
12988: LD_VAR 0 2
12992: PPUSH
12993: CALL_OW 251
12997: ST_TO_ADDR
// for i = 0 to 5 do
12998: LD_ADDR_VAR 0 4
13002: PUSH
13003: DOUBLE
13004: LD_INT 0
13006: DEC
13007: ST_TO_ADDR
13008: LD_INT 5
13010: PUSH
13011: FOR_TO
13012: IFFALSE 13121
// begin _x := ShiftX ( x , i , 3 ) ;
13014: LD_ADDR_VAR 0 7
13018: PUSH
13019: LD_VAR 0 5
13023: PPUSH
13024: LD_VAR 0 4
13028: PPUSH
13029: LD_INT 3
13031: PPUSH
13032: CALL_OW 272
13036: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13037: LD_ADDR_VAR 0 8
13041: PUSH
13042: LD_VAR 0 6
13046: PPUSH
13047: LD_VAR 0 4
13051: PPUSH
13052: LD_INT 3
13054: PPUSH
13055: CALL_OW 273
13059: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
13060: LD_VAR 0 7
13064: PPUSH
13065: LD_VAR 0 8
13069: PPUSH
13070: CALL_OW 428
13074: PUSH
13075: LD_INT 0
13077: EQUAL
13078: PUSH
13079: LD_VAR 0 7
13083: PPUSH
13084: LD_VAR 0 8
13088: PPUSH
13089: CALL_OW 488
13093: AND
13094: IFFALSE 13119
// begin ComMoveXY ( unit , _x , _y ) ;
13096: LD_VAR 0 1
13100: PPUSH
13101: LD_VAR 0 7
13105: PPUSH
13106: LD_VAR 0 8
13110: PPUSH
13111: CALL_OW 111
// exit ;
13115: POP
13116: POP
13117: GO 13123
// end ; end ;
13119: GO 13011
13121: POP
13122: POP
// end ;
13123: LD_VAR 0 3
13127: RET
// export function ScanBase ( side , base_area ) ; begin
13128: LD_INT 0
13130: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
13131: LD_ADDR_VAR 0 3
13135: PUSH
13136: LD_VAR 0 2
13140: PPUSH
13141: LD_INT 81
13143: PUSH
13144: LD_VAR 0 1
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PPUSH
13153: CALL_OW 70
13157: ST_TO_ADDR
// end ;
13158: LD_VAR 0 3
13162: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
13163: LD_INT 0
13165: PPUSH
13166: PPUSH
13167: PPUSH
13168: PPUSH
13169: PPUSH
13170: PPUSH
13171: PPUSH
13172: PPUSH
13173: PPUSH
13174: PPUSH
13175: PPUSH
13176: PPUSH
13177: PPUSH
13178: PPUSH
13179: PPUSH
13180: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
13181: LD_ADDR_VAR 0 12
13185: PUSH
13186: LD_EXP 57
13190: PUSH
13191: LD_VAR 0 1
13195: ARRAY
13196: PPUSH
13197: LD_INT 25
13199: PUSH
13200: LD_INT 3
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PPUSH
13207: CALL_OW 72
13211: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
13212: LD_ADDR_VAR 0 8
13216: PUSH
13217: LD_EXP 57
13221: PUSH
13222: LD_VAR 0 1
13226: ARRAY
13227: PPUSH
13228: LD_INT 2
13230: PUSH
13231: LD_INT 25
13233: PUSH
13234: LD_INT 1
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 25
13243: PUSH
13244: LD_INT 5
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 8
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 25
13263: PUSH
13264: LD_INT 9
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: PPUSH
13278: CALL_OW 72
13282: ST_TO_ADDR
// if not defenders and not solds then
13283: LD_VAR 0 2
13287: NOT
13288: PUSH
13289: LD_VAR 0 8
13293: NOT
13294: AND
13295: IFFALSE 13299
// exit ;
13297: GO 14665
// depot_under_attack := false ;
13299: LD_ADDR_VAR 0 16
13303: PUSH
13304: LD_INT 0
13306: ST_TO_ADDR
// sold_defenders := [ ] ;
13307: LD_ADDR_VAR 0 17
13311: PUSH
13312: EMPTY
13313: ST_TO_ADDR
// if mechs then
13314: LD_VAR 0 12
13318: IFFALSE 13447
// for i in defenders do
13320: LD_ADDR_VAR 0 5
13324: PUSH
13325: LD_VAR 0 2
13329: PUSH
13330: FOR_IN
13331: IFFALSE 13445
// begin SetTag ( i , 20 ) ;
13333: LD_VAR 0 5
13337: PPUSH
13338: LD_INT 20
13340: PPUSH
13341: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
13345: LD_VAR 0 5
13349: PPUSH
13350: CALL_OW 263
13354: PUSH
13355: LD_INT 1
13357: EQUAL
13358: PUSH
13359: LD_VAR 0 5
13363: PPUSH
13364: CALL_OW 311
13368: NOT
13369: AND
13370: PUSH
13371: LD_VAR 0 12
13375: AND
13376: IFFALSE 13443
// begin un := mechs [ 1 ] ;
13378: LD_ADDR_VAR 0 10
13382: PUSH
13383: LD_VAR 0 12
13387: PUSH
13388: LD_INT 1
13390: ARRAY
13391: ST_TO_ADDR
// ComExitBuilding ( un ) ;
13392: LD_VAR 0 10
13396: PPUSH
13397: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
13401: LD_VAR 0 10
13405: PPUSH
13406: LD_VAR 0 5
13410: PPUSH
13411: CALL_OW 180
// SetTag ( un , 19 ) ;
13415: LD_VAR 0 10
13419: PPUSH
13420: LD_INT 19
13422: PPUSH
13423: CALL_OW 109
// mechs := mechs diff un ;
13427: LD_ADDR_VAR 0 12
13431: PUSH
13432: LD_VAR 0 12
13436: PUSH
13437: LD_VAR 0 10
13441: DIFF
13442: ST_TO_ADDR
// end ; end ;
13443: GO 13330
13445: POP
13446: POP
// if solds then
13447: LD_VAR 0 8
13451: IFFALSE 13510
// for i in solds do
13453: LD_ADDR_VAR 0 5
13457: PUSH
13458: LD_VAR 0 8
13462: PUSH
13463: FOR_IN
13464: IFFALSE 13508
// if not GetTag ( i ) then
13466: LD_VAR 0 5
13470: PPUSH
13471: CALL_OW 110
13475: NOT
13476: IFFALSE 13506
// begin defenders := defenders union i ;
13478: LD_ADDR_VAR 0 2
13482: PUSH
13483: LD_VAR 0 2
13487: PUSH
13488: LD_VAR 0 5
13492: UNION
13493: ST_TO_ADDR
// SetTag ( i , 18 ) ;
13494: LD_VAR 0 5
13498: PPUSH
13499: LD_INT 18
13501: PPUSH
13502: CALL_OW 109
// end ;
13506: GO 13463
13508: POP
13509: POP
// repeat wait ( 0 0$1 ) ;
13510: LD_INT 35
13512: PPUSH
13513: CALL_OW 67
// enemy := mc_scan [ base ] ;
13517: LD_ADDR_VAR 0 3
13521: PUSH
13522: LD_EXP 80
13526: PUSH
13527: LD_VAR 0 1
13531: ARRAY
13532: ST_TO_ADDR
// for i in defenders do
13533: LD_ADDR_VAR 0 5
13537: PUSH
13538: LD_VAR 0 2
13542: PUSH
13543: FOR_IN
13544: IFFALSE 14229
// begin e := NearestUnitToUnit ( enemy , i ) ;
13546: LD_ADDR_VAR 0 13
13550: PUSH
13551: LD_VAR 0 3
13555: PPUSH
13556: LD_VAR 0 5
13560: PPUSH
13561: CALL_OW 74
13565: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
13566: LD_ADDR_VAR 0 16
13570: PUSH
13571: LD_EXP 57
13575: PUSH
13576: LD_VAR 0 1
13580: ARRAY
13581: PPUSH
13582: LD_INT 2
13584: PUSH
13585: LD_INT 30
13587: PUSH
13588: LD_INT 0
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: LD_INT 30
13597: PUSH
13598: LD_INT 1
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: PPUSH
13610: CALL_OW 72
13614: NOT
13615: PUSH
13616: LD_EXP 57
13620: PUSH
13621: LD_VAR 0 1
13625: ARRAY
13626: PPUSH
13627: LD_INT 2
13629: PUSH
13630: LD_INT 30
13632: PUSH
13633: LD_INT 0
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PUSH
13640: LD_INT 30
13642: PUSH
13643: LD_INT 1
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: LIST
13654: PPUSH
13655: CALL_OW 72
13659: PPUSH
13660: CALL_OW 256
13664: PUSH
13665: LD_INT 600
13667: LESS
13668: OR
13669: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
13670: LD_VAR 0 5
13674: PPUSH
13675: CALL_OW 247
13679: PUSH
13680: LD_INT 2
13682: DOUBLE
13683: EQUAL
13684: IFTRUE 13688
13686: GO 13935
13688: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
13689: LD_VAR 0 5
13693: PPUSH
13694: CALL_OW 256
13698: PUSH
13699: LD_INT 650
13701: GREATER
13702: PUSH
13703: LD_VAR 0 5
13707: PPUSH
13708: LD_VAR 0 13
13712: PPUSH
13713: CALL_OW 296
13717: PUSH
13718: LD_INT 40
13720: LESS
13721: AND
13722: IFFALSE 13740
// ComAttackUnit ( i , e ) else
13724: LD_VAR 0 5
13728: PPUSH
13729: LD_VAR 0 13
13733: PPUSH
13734: CALL_OW 115
13738: GO 13818
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
13740: LD_VAR 0 5
13744: PPUSH
13745: LD_VAR 0 13
13749: PPUSH
13750: CALL_OW 296
13754: PUSH
13755: LD_INT 30
13757: GREATEREQUAL
13758: PUSH
13759: LD_VAR 0 5
13763: PPUSH
13764: CALL_OW 256
13768: PUSH
13769: LD_INT 650
13771: LESSEQUAL
13772: OR
13773: PUSH
13774: LD_VAR 0 5
13778: PPUSH
13779: LD_EXP 81
13783: PUSH
13784: LD_VAR 0 1
13788: ARRAY
13789: PPUSH
13790: CALL_OW 308
13794: NOT
13795: AND
13796: IFFALSE 13818
// ComMoveToArea ( i , mc_parking [ base ] ) ;
13798: LD_VAR 0 5
13802: PPUSH
13803: LD_EXP 81
13807: PUSH
13808: LD_VAR 0 1
13812: ARRAY
13813: PPUSH
13814: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
13818: LD_VAR 0 5
13822: PPUSH
13823: CALL_OW 256
13827: PUSH
13828: LD_INT 998
13830: LESS
13831: PUSH
13832: LD_VAR 0 5
13836: PPUSH
13837: CALL_OW 263
13841: PUSH
13842: LD_INT 1
13844: EQUAL
13845: AND
13846: PUSH
13847: LD_VAR 0 5
13851: PPUSH
13852: CALL_OW 311
13856: AND
13857: PUSH
13858: LD_VAR 0 5
13862: PPUSH
13863: LD_EXP 81
13867: PUSH
13868: LD_VAR 0 1
13872: ARRAY
13873: PPUSH
13874: CALL_OW 308
13878: AND
13879: IFFALSE 13933
// begin mech := IsDrivenBy ( i ) ;
13881: LD_ADDR_VAR 0 9
13885: PUSH
13886: LD_VAR 0 5
13890: PPUSH
13891: CALL_OW 311
13895: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13896: LD_VAR 0 9
13900: PPUSH
13901: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13905: LD_VAR 0 9
13909: PPUSH
13910: LD_VAR 0 5
13914: PPUSH
13915: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
13919: LD_VAR 0 9
13923: PPUSH
13924: LD_VAR 0 5
13928: PPUSH
13929: CALL_OW 180
// end ; end ; unit_human :
13933: GO 14200
13935: LD_INT 1
13937: DOUBLE
13938: EQUAL
13939: IFTRUE 13943
13941: GO 14199
13943: POP
// begin b := IsInUnit ( i ) ;
13944: LD_ADDR_VAR 0 18
13948: PUSH
13949: LD_VAR 0 5
13953: PPUSH
13954: CALL_OW 310
13958: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
13959: LD_ADDR_VAR 0 19
13963: PUSH
13964: LD_VAR 0 18
13968: NOT
13969: PUSH
13970: LD_VAR 0 18
13974: PPUSH
13975: CALL_OW 266
13979: PUSH
13980: LD_INT 32
13982: PUSH
13983: LD_INT 31
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: IN
13990: OR
13991: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
13992: LD_VAR 0 16
13996: PUSH
13997: LD_VAR 0 2
14001: PPUSH
14002: LD_INT 21
14004: PUSH
14005: LD_INT 2
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PPUSH
14012: CALL_OW 72
14016: PUSH
14017: LD_INT 1
14019: LESSEQUAL
14020: OR
14021: PUSH
14022: LD_VAR 0 19
14026: AND
14027: PUSH
14028: LD_VAR 0 5
14032: PUSH
14033: LD_VAR 0 17
14037: IN
14038: NOT
14039: AND
14040: IFFALSE 14133
// begin if b then
14042: LD_VAR 0 18
14046: IFFALSE 14095
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
14048: LD_VAR 0 18
14052: PPUSH
14053: LD_VAR 0 3
14057: PPUSH
14058: LD_VAR 0 18
14062: PPUSH
14063: CALL_OW 74
14067: PPUSH
14068: CALL_OW 296
14072: PUSH
14073: LD_INT 10
14075: LESS
14076: PUSH
14077: LD_VAR 0 18
14081: PPUSH
14082: CALL_OW 461
14086: PUSH
14087: LD_INT 7
14089: NONEQUAL
14090: AND
14091: IFFALSE 14095
// continue ;
14093: GO 13543
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
14095: LD_ADDR_VAR 0 17
14099: PUSH
14100: LD_VAR 0 17
14104: PPUSH
14105: LD_VAR 0 17
14109: PUSH
14110: LD_INT 1
14112: PLUS
14113: PPUSH
14114: LD_VAR 0 5
14118: PPUSH
14119: CALL_OW 1
14123: ST_TO_ADDR
// ComExitBuilding ( i ) ;
14124: LD_VAR 0 5
14128: PPUSH
14129: CALL_OW 122
// end ; if sold_defenders then
14133: LD_VAR 0 17
14137: IFFALSE 14197
// if i in sold_defenders then
14139: LD_VAR 0 5
14143: PUSH
14144: LD_VAR 0 17
14148: IN
14149: IFFALSE 14197
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
14151: LD_VAR 0 5
14155: PPUSH
14156: CALL_OW 314
14160: NOT
14161: PUSH
14162: LD_VAR 0 5
14166: PPUSH
14167: LD_VAR 0 13
14171: PPUSH
14172: CALL_OW 296
14176: PUSH
14177: LD_INT 30
14179: LESS
14180: AND
14181: IFFALSE 14197
// ComAttackUnit ( i , e ) ;
14183: LD_VAR 0 5
14187: PPUSH
14188: LD_VAR 0 13
14192: PPUSH
14193: CALL_OW 115
// end ; end ; end ;
14197: GO 14200
14199: POP
// if IsDead ( i ) then
14200: LD_VAR 0 5
14204: PPUSH
14205: CALL_OW 301
14209: IFFALSE 14227
// defenders := defenders diff i ;
14211: LD_ADDR_VAR 0 2
14215: PUSH
14216: LD_VAR 0 2
14220: PUSH
14221: LD_VAR 0 5
14225: DIFF
14226: ST_TO_ADDR
// end ;
14227: GO 13543
14229: POP
14230: POP
// until not enemy or not defenders ;
14231: LD_VAR 0 3
14235: NOT
14236: PUSH
14237: LD_VAR 0 2
14241: NOT
14242: OR
14243: IFFALSE 13510
// MC_Reset ( base , 18 ) ;
14245: LD_VAR 0 1
14249: PPUSH
14250: LD_INT 18
14252: PPUSH
14253: CALL 50607 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
14257: LD_ADDR_VAR 0 2
14261: PUSH
14262: LD_VAR 0 2
14266: PUSH
14267: LD_VAR 0 2
14271: PPUSH
14272: LD_INT 2
14274: PUSH
14275: LD_INT 25
14277: PUSH
14278: LD_INT 1
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 25
14287: PUSH
14288: LD_INT 5
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 25
14297: PUSH
14298: LD_INT 8
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: LD_INT 25
14307: PUSH
14308: LD_INT 9
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 72
14326: DIFF
14327: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
14328: LD_VAR 0 3
14332: NOT
14333: PUSH
14334: LD_VAR 0 2
14338: PPUSH
14339: LD_INT 21
14341: PUSH
14342: LD_INT 2
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PPUSH
14349: CALL_OW 72
14353: AND
14354: IFFALSE 14616
// begin tmp := FilterByTag ( defenders , 19 ) ;
14356: LD_ADDR_VAR 0 11
14360: PUSH
14361: LD_VAR 0 2
14365: PPUSH
14366: LD_INT 19
14368: PPUSH
14369: CALL 48899 0 2
14373: ST_TO_ADDR
// if tmp then
14374: LD_VAR 0 11
14378: IFFALSE 14448
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
14380: LD_ADDR_VAR 0 11
14384: PUSH
14385: LD_VAR 0 11
14389: PPUSH
14390: LD_INT 25
14392: PUSH
14393: LD_INT 3
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PPUSH
14400: CALL_OW 72
14404: ST_TO_ADDR
// if tmp then
14405: LD_VAR 0 11
14409: IFFALSE 14448
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
14411: LD_ADDR_EXP 69
14415: PUSH
14416: LD_EXP 69
14420: PPUSH
14421: LD_VAR 0 1
14425: PPUSH
14426: LD_EXP 69
14430: PUSH
14431: LD_VAR 0 1
14435: ARRAY
14436: PUSH
14437: LD_VAR 0 11
14441: UNION
14442: PPUSH
14443: CALL_OW 1
14447: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
14448: LD_VAR 0 1
14452: PPUSH
14453: LD_INT 19
14455: PPUSH
14456: CALL 50607 0 2
// repeat wait ( 0 0$1 ) ;
14460: LD_INT 35
14462: PPUSH
14463: CALL_OW 67
// for i in defenders do
14467: LD_ADDR_VAR 0 5
14471: PUSH
14472: LD_VAR 0 2
14476: PUSH
14477: FOR_IN
14478: IFFALSE 14567
// begin if not IsInArea ( i , mc_parking [ base ] ) then
14480: LD_VAR 0 5
14484: PPUSH
14485: LD_EXP 81
14489: PUSH
14490: LD_VAR 0 1
14494: ARRAY
14495: PPUSH
14496: CALL_OW 308
14500: NOT
14501: IFFALSE 14525
// ComMoveToArea ( i , mc_parking [ base ] ) else
14503: LD_VAR 0 5
14507: PPUSH
14508: LD_EXP 81
14512: PUSH
14513: LD_VAR 0 1
14517: ARRAY
14518: PPUSH
14519: CALL_OW 113
14523: GO 14565
// if GetControl ( i ) = control_manual then
14525: LD_VAR 0 5
14529: PPUSH
14530: CALL_OW 263
14534: PUSH
14535: LD_INT 1
14537: EQUAL
14538: IFFALSE 14565
// if IsDrivenBy ( i ) then
14540: LD_VAR 0 5
14544: PPUSH
14545: CALL_OW 311
14549: IFFALSE 14565
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
14551: LD_VAR 0 5
14555: PPUSH
14556: CALL_OW 311
14560: PPUSH
14561: CALL_OW 121
// end ;
14565: GO 14477
14567: POP
14568: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
14569: LD_VAR 0 2
14573: PPUSH
14574: LD_INT 95
14576: PUSH
14577: LD_EXP 81
14581: PUSH
14582: LD_VAR 0 1
14586: ARRAY
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PPUSH
14592: CALL_OW 72
14596: PUSH
14597: LD_VAR 0 2
14601: EQUAL
14602: PUSH
14603: LD_EXP 80
14607: PUSH
14608: LD_VAR 0 1
14612: ARRAY
14613: OR
14614: IFFALSE 14460
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
14616: LD_ADDR_EXP 79
14620: PUSH
14621: LD_EXP 79
14625: PPUSH
14626: LD_VAR 0 1
14630: PPUSH
14631: LD_EXP 79
14635: PUSH
14636: LD_VAR 0 1
14640: ARRAY
14641: PUSH
14642: LD_VAR 0 2
14646: UNION
14647: PPUSH
14648: CALL_OW 1
14652: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
14653: LD_VAR 0 1
14657: PPUSH
14658: LD_INT 20
14660: PPUSH
14661: CALL 50607 0 2
// end ;
14665: LD_VAR 0 4
14669: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14670: LD_INT 0
14672: PPUSH
14673: PPUSH
14674: PPUSH
14675: PPUSH
// result := false ;
14676: LD_ADDR_VAR 0 2
14680: PUSH
14681: LD_INT 0
14683: ST_TO_ADDR
// side := GetSide ( unit ) ;
14684: LD_ADDR_VAR 0 3
14688: PUSH
14689: LD_VAR 0 1
14693: PPUSH
14694: CALL_OW 255
14698: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14699: LD_ADDR_VAR 0 4
14703: PUSH
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL_OW 248
14713: ST_TO_ADDR
// case nat of 1 :
14714: LD_VAR 0 4
14718: PUSH
14719: LD_INT 1
14721: DOUBLE
14722: EQUAL
14723: IFTRUE 14727
14725: GO 14738
14727: POP
// tech := tech_lassight ; 2 :
14728: LD_ADDR_VAR 0 5
14732: PUSH
14733: LD_INT 12
14735: ST_TO_ADDR
14736: GO 14777
14738: LD_INT 2
14740: DOUBLE
14741: EQUAL
14742: IFTRUE 14746
14744: GO 14757
14746: POP
// tech := tech_mortar ; 3 :
14747: LD_ADDR_VAR 0 5
14751: PUSH
14752: LD_INT 41
14754: ST_TO_ADDR
14755: GO 14777
14757: LD_INT 3
14759: DOUBLE
14760: EQUAL
14761: IFTRUE 14765
14763: GO 14776
14765: POP
// tech := tech_bazooka ; end ;
14766: LD_ADDR_VAR 0 5
14770: PUSH
14771: LD_INT 44
14773: ST_TO_ADDR
14774: GO 14777
14776: POP
// if Researched ( side , tech ) then
14777: LD_VAR 0 3
14781: PPUSH
14782: LD_VAR 0 5
14786: PPUSH
14787: CALL_OW 325
14791: IFFALSE 14818
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14793: LD_ADDR_VAR 0 2
14797: PUSH
14798: LD_INT 5
14800: PUSH
14801: LD_INT 8
14803: PUSH
14804: LD_INT 9
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: LIST
14811: PUSH
14812: LD_VAR 0 4
14816: ARRAY
14817: ST_TO_ADDR
// end ;
14818: LD_VAR 0 2
14822: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14823: LD_INT 0
14825: PPUSH
14826: PPUSH
14827: PPUSH
// if not mines then
14828: LD_VAR 0 2
14832: NOT
14833: IFFALSE 14837
// exit ;
14835: GO 14981
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14837: LD_ADDR_VAR 0 5
14841: PUSH
14842: LD_INT 81
14844: PUSH
14845: LD_VAR 0 1
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PUSH
14854: LD_INT 3
14856: PUSH
14857: LD_INT 21
14859: PUSH
14860: LD_INT 3
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PPUSH
14875: CALL_OW 69
14879: ST_TO_ADDR
// for i in mines do
14880: LD_ADDR_VAR 0 4
14884: PUSH
14885: LD_VAR 0 2
14889: PUSH
14890: FOR_IN
14891: IFFALSE 14979
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14893: LD_VAR 0 4
14897: PUSH
14898: LD_INT 1
14900: ARRAY
14901: PPUSH
14902: LD_VAR 0 4
14906: PUSH
14907: LD_INT 2
14909: ARRAY
14910: PPUSH
14911: CALL_OW 458
14915: NOT
14916: IFFALSE 14920
// continue ;
14918: GO 14890
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14920: LD_VAR 0 4
14924: PUSH
14925: LD_INT 1
14927: ARRAY
14928: PPUSH
14929: LD_VAR 0 4
14933: PUSH
14934: LD_INT 2
14936: ARRAY
14937: PPUSH
14938: CALL_OW 428
14942: PUSH
14943: LD_VAR 0 5
14947: IN
14948: IFFALSE 14977
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14950: LD_VAR 0 4
14954: PUSH
14955: LD_INT 1
14957: ARRAY
14958: PPUSH
14959: LD_VAR 0 4
14963: PUSH
14964: LD_INT 2
14966: ARRAY
14967: PPUSH
14968: LD_VAR 0 1
14972: PPUSH
14973: CALL_OW 456
// end ;
14977: GO 14890
14979: POP
14980: POP
// end ;
14981: LD_VAR 0 3
14985: RET
// export function Count ( array ) ; var i ; begin
14986: LD_INT 0
14988: PPUSH
14989: PPUSH
// result := 0 ;
14990: LD_ADDR_VAR 0 2
14994: PUSH
14995: LD_INT 0
14997: ST_TO_ADDR
// for i in array do
14998: LD_ADDR_VAR 0 3
15002: PUSH
15003: LD_VAR 0 1
15007: PUSH
15008: FOR_IN
15009: IFFALSE 15033
// if i then
15011: LD_VAR 0 3
15015: IFFALSE 15031
// result := result + 1 ;
15017: LD_ADDR_VAR 0 2
15021: PUSH
15022: LD_VAR 0 2
15026: PUSH
15027: LD_INT 1
15029: PLUS
15030: ST_TO_ADDR
15031: GO 15008
15033: POP
15034: POP
// end ;
15035: LD_VAR 0 2
15039: RET
// export function IsEmpty ( building ) ; begin
15040: LD_INT 0
15042: PPUSH
// if not building then
15043: LD_VAR 0 1
15047: NOT
15048: IFFALSE 15052
// exit ;
15050: GO 15095
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15052: LD_ADDR_VAR 0 2
15056: PUSH
15057: LD_VAR 0 1
15061: PUSH
15062: LD_INT 22
15064: PUSH
15065: LD_VAR 0 1
15069: PPUSH
15070: CALL_OW 255
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: LD_INT 58
15081: PUSH
15082: EMPTY
15083: LIST
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PPUSH
15089: CALL_OW 69
15093: IN
15094: ST_TO_ADDR
// end ;
15095: LD_VAR 0 2
15099: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15100: LD_INT 0
15102: PPUSH
15103: PPUSH
15104: PPUSH
15105: PPUSH
// tmp := [ ] ;
15106: LD_ADDR_VAR 0 3
15110: PUSH
15111: EMPTY
15112: ST_TO_ADDR
// list := [ ] ;
15113: LD_ADDR_VAR 0 5
15117: PUSH
15118: EMPTY
15119: ST_TO_ADDR
// for i = 16 to 25 do
15120: LD_ADDR_VAR 0 4
15124: PUSH
15125: DOUBLE
15126: LD_INT 16
15128: DEC
15129: ST_TO_ADDR
15130: LD_INT 25
15132: PUSH
15133: FOR_TO
15134: IFFALSE 15207
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15136: LD_ADDR_VAR 0 3
15140: PUSH
15141: LD_VAR 0 3
15145: PUSH
15146: LD_INT 22
15148: PUSH
15149: LD_VAR 0 1
15153: PPUSH
15154: CALL_OW 255
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 91
15165: PUSH
15166: LD_VAR 0 1
15170: PUSH
15171: LD_INT 6
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: PUSH
15179: LD_INT 30
15181: PUSH
15182: LD_VAR 0 4
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: LIST
15195: PUSH
15196: EMPTY
15197: LIST
15198: PPUSH
15199: CALL_OW 69
15203: ADD
15204: ST_TO_ADDR
15205: GO 15133
15207: POP
15208: POP
// for i = 1 to tmp do
15209: LD_ADDR_VAR 0 4
15213: PUSH
15214: DOUBLE
15215: LD_INT 1
15217: DEC
15218: ST_TO_ADDR
15219: LD_VAR 0 3
15223: PUSH
15224: FOR_TO
15225: IFFALSE 15313
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15227: LD_ADDR_VAR 0 5
15231: PUSH
15232: LD_VAR 0 5
15236: PUSH
15237: LD_VAR 0 3
15241: PUSH
15242: LD_VAR 0 4
15246: ARRAY
15247: PPUSH
15248: CALL_OW 266
15252: PUSH
15253: LD_VAR 0 3
15257: PUSH
15258: LD_VAR 0 4
15262: ARRAY
15263: PPUSH
15264: CALL_OW 250
15268: PUSH
15269: LD_VAR 0 3
15273: PUSH
15274: LD_VAR 0 4
15278: ARRAY
15279: PPUSH
15280: CALL_OW 251
15284: PUSH
15285: LD_VAR 0 3
15289: PUSH
15290: LD_VAR 0 4
15294: ARRAY
15295: PPUSH
15296: CALL_OW 254
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: PUSH
15307: EMPTY
15308: LIST
15309: ADD
15310: ST_TO_ADDR
15311: GO 15224
15313: POP
15314: POP
// result := list ;
15315: LD_ADDR_VAR 0 2
15319: PUSH
15320: LD_VAR 0 5
15324: ST_TO_ADDR
// end ;
15325: LD_VAR 0 2
15329: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15330: LD_INT 0
15332: PPUSH
15333: PPUSH
15334: PPUSH
15335: PPUSH
15336: PPUSH
15337: PPUSH
15338: PPUSH
// if not factory then
15339: LD_VAR 0 1
15343: NOT
15344: IFFALSE 15348
// exit ;
15346: GO 15873
// if control = control_apeman then
15348: LD_VAR 0 4
15352: PUSH
15353: LD_INT 5
15355: EQUAL
15356: IFFALSE 15465
// begin tmp := UnitsInside ( factory ) ;
15358: LD_ADDR_VAR 0 8
15362: PUSH
15363: LD_VAR 0 1
15367: PPUSH
15368: CALL_OW 313
15372: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15373: LD_VAR 0 8
15377: PPUSH
15378: LD_INT 25
15380: PUSH
15381: LD_INT 12
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PPUSH
15388: CALL_OW 72
15392: NOT
15393: IFFALSE 15403
// control := control_manual ;
15395: LD_ADDR_VAR 0 4
15399: PUSH
15400: LD_INT 1
15402: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15403: LD_ADDR_VAR 0 8
15407: PUSH
15408: LD_VAR 0 1
15412: PPUSH
15413: CALL 15100 0 1
15417: ST_TO_ADDR
// if tmp then
15418: LD_VAR 0 8
15422: IFFALSE 15465
// begin for i in tmp do
15424: LD_ADDR_VAR 0 7
15428: PUSH
15429: LD_VAR 0 8
15433: PUSH
15434: FOR_IN
15435: IFFALSE 15463
// if i [ 1 ] = b_ext_radar then
15437: LD_VAR 0 7
15441: PUSH
15442: LD_INT 1
15444: ARRAY
15445: PUSH
15446: LD_INT 20
15448: EQUAL
15449: IFFALSE 15461
// begin control := control_remote ;
15451: LD_ADDR_VAR 0 4
15455: PUSH
15456: LD_INT 2
15458: ST_TO_ADDR
// break ;
15459: GO 15463
// end ;
15461: GO 15434
15463: POP
15464: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15465: LD_VAR 0 1
15469: PPUSH
15470: LD_VAR 0 2
15474: PPUSH
15475: LD_VAR 0 3
15479: PPUSH
15480: LD_VAR 0 4
15484: PPUSH
15485: LD_VAR 0 5
15489: PPUSH
15490: CALL_OW 448
15494: IFFALSE 15529
// begin result := [ chassis , engine , control , weapon ] ;
15496: LD_ADDR_VAR 0 6
15500: PUSH
15501: LD_VAR 0 2
15505: PUSH
15506: LD_VAR 0 3
15510: PUSH
15511: LD_VAR 0 4
15515: PUSH
15516: LD_VAR 0 5
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: ST_TO_ADDR
// exit ;
15527: GO 15873
// end ; _chassis := AvailableChassisList ( factory ) ;
15529: LD_ADDR_VAR 0 9
15533: PUSH
15534: LD_VAR 0 1
15538: PPUSH
15539: CALL_OW 475
15543: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15544: LD_ADDR_VAR 0 11
15548: PUSH
15549: LD_VAR 0 1
15553: PPUSH
15554: CALL_OW 476
15558: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15559: LD_ADDR_VAR 0 12
15563: PUSH
15564: LD_VAR 0 1
15568: PPUSH
15569: CALL_OW 477
15573: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15574: LD_ADDR_VAR 0 10
15578: PUSH
15579: LD_VAR 0 1
15583: PPUSH
15584: CALL_OW 478
15588: ST_TO_ADDR
// if not chassis in _chassis then
15589: LD_VAR 0 2
15593: PUSH
15594: LD_VAR 0 9
15598: IN
15599: NOT
15600: IFFALSE 15626
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15602: LD_ADDR_VAR 0 2
15606: PUSH
15607: LD_VAR 0 9
15611: PUSH
15612: LD_INT 1
15614: PPUSH
15615: LD_VAR 0 9
15619: PPUSH
15620: CALL_OW 12
15624: ARRAY
15625: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15626: LD_VAR 0 2
15630: PPUSH
15631: LD_VAR 0 3
15635: PPUSH
15636: CALL 15878 0 2
15640: NOT
15641: IFFALSE 15700
// repeat engine := _engine [ 1 ] ;
15643: LD_ADDR_VAR 0 3
15647: PUSH
15648: LD_VAR 0 11
15652: PUSH
15653: LD_INT 1
15655: ARRAY
15656: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15657: LD_ADDR_VAR 0 11
15661: PUSH
15662: LD_VAR 0 11
15666: PPUSH
15667: LD_INT 1
15669: PPUSH
15670: CALL_OW 3
15674: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15675: LD_VAR 0 2
15679: PPUSH
15680: LD_VAR 0 3
15684: PPUSH
15685: CALL 15878 0 2
15689: PUSH
15690: LD_VAR 0 11
15694: PUSH
15695: EMPTY
15696: EQUAL
15697: OR
15698: IFFALSE 15643
// if not control in _control then
15700: LD_VAR 0 4
15704: PUSH
15705: LD_VAR 0 12
15709: IN
15710: NOT
15711: IFFALSE 15737
// control := _control [ rand ( 1 , _control ) ] ;
15713: LD_ADDR_VAR 0 4
15717: PUSH
15718: LD_VAR 0 12
15722: PUSH
15723: LD_INT 1
15725: PPUSH
15726: LD_VAR 0 12
15730: PPUSH
15731: CALL_OW 12
15735: ARRAY
15736: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15737: LD_VAR 0 2
15741: PPUSH
15742: LD_VAR 0 5
15746: PPUSH
15747: CALL 16098 0 2
15751: NOT
15752: IFFALSE 15811
// repeat weapon := _weapon [ 1 ] ;
15754: LD_ADDR_VAR 0 5
15758: PUSH
15759: LD_VAR 0 10
15763: PUSH
15764: LD_INT 1
15766: ARRAY
15767: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15768: LD_ADDR_VAR 0 10
15772: PUSH
15773: LD_VAR 0 10
15777: PPUSH
15778: LD_INT 1
15780: PPUSH
15781: CALL_OW 3
15785: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15786: LD_VAR 0 2
15790: PPUSH
15791: LD_VAR 0 5
15795: PPUSH
15796: CALL 16098 0 2
15800: PUSH
15801: LD_VAR 0 10
15805: PUSH
15806: EMPTY
15807: EQUAL
15808: OR
15809: IFFALSE 15754
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15811: LD_VAR 0 1
15815: PPUSH
15816: LD_VAR 0 2
15820: PPUSH
15821: LD_VAR 0 3
15825: PPUSH
15826: LD_VAR 0 4
15830: PPUSH
15831: LD_VAR 0 5
15835: PPUSH
15836: CALL_OW 448
15840: IFFALSE 15873
// result := [ chassis , engine , control , weapon ] ;
15842: LD_ADDR_VAR 0 6
15846: PUSH
15847: LD_VAR 0 2
15851: PUSH
15852: LD_VAR 0 3
15856: PUSH
15857: LD_VAR 0 4
15861: PUSH
15862: LD_VAR 0 5
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: ST_TO_ADDR
// end ;
15873: LD_VAR 0 6
15877: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15878: LD_INT 0
15880: PPUSH
// if not chassis or not engine then
15881: LD_VAR 0 1
15885: NOT
15886: PUSH
15887: LD_VAR 0 2
15891: NOT
15892: OR
15893: IFFALSE 15897
// exit ;
15895: GO 16093
// case engine of engine_solar :
15897: LD_VAR 0 2
15901: PUSH
15902: LD_INT 2
15904: DOUBLE
15905: EQUAL
15906: IFTRUE 15910
15908: GO 15948
15910: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15911: LD_ADDR_VAR 0 3
15915: PUSH
15916: LD_INT 11
15918: PUSH
15919: LD_INT 12
15921: PUSH
15922: LD_INT 13
15924: PUSH
15925: LD_INT 14
15927: PUSH
15928: LD_INT 1
15930: PUSH
15931: LD_INT 2
15933: PUSH
15934: LD_INT 3
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: ST_TO_ADDR
15946: GO 16077
15948: LD_INT 1
15950: DOUBLE
15951: EQUAL
15952: IFTRUE 15956
15954: GO 16018
15956: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15957: LD_ADDR_VAR 0 3
15961: PUSH
15962: LD_INT 11
15964: PUSH
15965: LD_INT 12
15967: PUSH
15968: LD_INT 13
15970: PUSH
15971: LD_INT 14
15973: PUSH
15974: LD_INT 1
15976: PUSH
15977: LD_INT 2
15979: PUSH
15980: LD_INT 3
15982: PUSH
15983: LD_INT 4
15985: PUSH
15986: LD_INT 5
15988: PUSH
15989: LD_INT 21
15991: PUSH
15992: LD_INT 23
15994: PUSH
15995: LD_INT 22
15997: PUSH
15998: LD_INT 24
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: ST_TO_ADDR
16016: GO 16077
16018: LD_INT 3
16020: DOUBLE
16021: EQUAL
16022: IFTRUE 16026
16024: GO 16076
16026: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16027: LD_ADDR_VAR 0 3
16031: PUSH
16032: LD_INT 13
16034: PUSH
16035: LD_INT 14
16037: PUSH
16038: LD_INT 2
16040: PUSH
16041: LD_INT 3
16043: PUSH
16044: LD_INT 4
16046: PUSH
16047: LD_INT 5
16049: PUSH
16050: LD_INT 21
16052: PUSH
16053: LD_INT 22
16055: PUSH
16056: LD_INT 23
16058: PUSH
16059: LD_INT 24
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: ST_TO_ADDR
16074: GO 16077
16076: POP
// result := ( chassis in result ) ;
16077: LD_ADDR_VAR 0 3
16081: PUSH
16082: LD_VAR 0 1
16086: PUSH
16087: LD_VAR 0 3
16091: IN
16092: ST_TO_ADDR
// end ;
16093: LD_VAR 0 3
16097: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16098: LD_INT 0
16100: PPUSH
// if not chassis or not weapon then
16101: LD_VAR 0 1
16105: NOT
16106: PUSH
16107: LD_VAR 0 2
16111: NOT
16112: OR
16113: IFFALSE 16117
// exit ;
16115: GO 17143
// case weapon of us_machine_gun :
16117: LD_VAR 0 2
16121: PUSH
16122: LD_INT 2
16124: DOUBLE
16125: EQUAL
16126: IFTRUE 16130
16128: GO 16160
16130: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16131: LD_ADDR_VAR 0 3
16135: PUSH
16136: LD_INT 1
16138: PUSH
16139: LD_INT 2
16141: PUSH
16142: LD_INT 3
16144: PUSH
16145: LD_INT 4
16147: PUSH
16148: LD_INT 5
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: ST_TO_ADDR
16158: GO 17127
16160: LD_INT 3
16162: DOUBLE
16163: EQUAL
16164: IFTRUE 16168
16166: GO 16198
16168: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16169: LD_ADDR_VAR 0 3
16173: PUSH
16174: LD_INT 1
16176: PUSH
16177: LD_INT 2
16179: PUSH
16180: LD_INT 3
16182: PUSH
16183: LD_INT 4
16185: PUSH
16186: LD_INT 5
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: ST_TO_ADDR
16196: GO 17127
16198: LD_INT 11
16200: DOUBLE
16201: EQUAL
16202: IFTRUE 16206
16204: GO 16236
16206: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16207: LD_ADDR_VAR 0 3
16211: PUSH
16212: LD_INT 1
16214: PUSH
16215: LD_INT 2
16217: PUSH
16218: LD_INT 3
16220: PUSH
16221: LD_INT 4
16223: PUSH
16224: LD_INT 5
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: ST_TO_ADDR
16234: GO 17127
16236: LD_INT 4
16238: DOUBLE
16239: EQUAL
16240: IFTRUE 16244
16242: GO 16270
16244: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16245: LD_ADDR_VAR 0 3
16249: PUSH
16250: LD_INT 2
16252: PUSH
16253: LD_INT 3
16255: PUSH
16256: LD_INT 4
16258: PUSH
16259: LD_INT 5
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: ST_TO_ADDR
16268: GO 17127
16270: LD_INT 5
16272: DOUBLE
16273: EQUAL
16274: IFTRUE 16278
16276: GO 16304
16278: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16279: LD_ADDR_VAR 0 3
16283: PUSH
16284: LD_INT 2
16286: PUSH
16287: LD_INT 3
16289: PUSH
16290: LD_INT 4
16292: PUSH
16293: LD_INT 5
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: ST_TO_ADDR
16302: GO 17127
16304: LD_INT 9
16306: DOUBLE
16307: EQUAL
16308: IFTRUE 16312
16310: GO 16338
16312: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16313: LD_ADDR_VAR 0 3
16317: PUSH
16318: LD_INT 2
16320: PUSH
16321: LD_INT 3
16323: PUSH
16324: LD_INT 4
16326: PUSH
16327: LD_INT 5
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: ST_TO_ADDR
16336: GO 17127
16338: LD_INT 7
16340: DOUBLE
16341: EQUAL
16342: IFTRUE 16346
16344: GO 16372
16346: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16347: LD_ADDR_VAR 0 3
16351: PUSH
16352: LD_INT 2
16354: PUSH
16355: LD_INT 3
16357: PUSH
16358: LD_INT 4
16360: PUSH
16361: LD_INT 5
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: ST_TO_ADDR
16370: GO 17127
16372: LD_INT 12
16374: DOUBLE
16375: EQUAL
16376: IFTRUE 16380
16378: GO 16406
16380: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16381: LD_ADDR_VAR 0 3
16385: PUSH
16386: LD_INT 2
16388: PUSH
16389: LD_INT 3
16391: PUSH
16392: LD_INT 4
16394: PUSH
16395: LD_INT 5
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: ST_TO_ADDR
16404: GO 17127
16406: LD_INT 13
16408: DOUBLE
16409: EQUAL
16410: IFTRUE 16414
16412: GO 16440
16414: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16415: LD_ADDR_VAR 0 3
16419: PUSH
16420: LD_INT 2
16422: PUSH
16423: LD_INT 3
16425: PUSH
16426: LD_INT 4
16428: PUSH
16429: LD_INT 5
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: ST_TO_ADDR
16438: GO 17127
16440: LD_INT 14
16442: DOUBLE
16443: EQUAL
16444: IFTRUE 16448
16446: GO 16466
16448: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16449: LD_ADDR_VAR 0 3
16453: PUSH
16454: LD_INT 4
16456: PUSH
16457: LD_INT 5
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: ST_TO_ADDR
16464: GO 17127
16466: LD_INT 6
16468: DOUBLE
16469: EQUAL
16470: IFTRUE 16474
16472: GO 16492
16474: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16475: LD_ADDR_VAR 0 3
16479: PUSH
16480: LD_INT 4
16482: PUSH
16483: LD_INT 5
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: ST_TO_ADDR
16490: GO 17127
16492: LD_INT 10
16494: DOUBLE
16495: EQUAL
16496: IFTRUE 16500
16498: GO 16518
16500: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16501: LD_ADDR_VAR 0 3
16505: PUSH
16506: LD_INT 4
16508: PUSH
16509: LD_INT 5
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: ST_TO_ADDR
16516: GO 17127
16518: LD_INT 22
16520: DOUBLE
16521: EQUAL
16522: IFTRUE 16526
16524: GO 16552
16526: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16527: LD_ADDR_VAR 0 3
16531: PUSH
16532: LD_INT 11
16534: PUSH
16535: LD_INT 12
16537: PUSH
16538: LD_INT 13
16540: PUSH
16541: LD_INT 14
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: ST_TO_ADDR
16550: GO 17127
16552: LD_INT 23
16554: DOUBLE
16555: EQUAL
16556: IFTRUE 16560
16558: GO 16586
16560: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16561: LD_ADDR_VAR 0 3
16565: PUSH
16566: LD_INT 11
16568: PUSH
16569: LD_INT 12
16571: PUSH
16572: LD_INT 13
16574: PUSH
16575: LD_INT 14
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: ST_TO_ADDR
16584: GO 17127
16586: LD_INT 24
16588: DOUBLE
16589: EQUAL
16590: IFTRUE 16594
16592: GO 16620
16594: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16595: LD_ADDR_VAR 0 3
16599: PUSH
16600: LD_INT 11
16602: PUSH
16603: LD_INT 12
16605: PUSH
16606: LD_INT 13
16608: PUSH
16609: LD_INT 14
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: ST_TO_ADDR
16618: GO 17127
16620: LD_INT 30
16622: DOUBLE
16623: EQUAL
16624: IFTRUE 16628
16626: GO 16654
16628: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16629: LD_ADDR_VAR 0 3
16633: PUSH
16634: LD_INT 11
16636: PUSH
16637: LD_INT 12
16639: PUSH
16640: LD_INT 13
16642: PUSH
16643: LD_INT 14
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: ST_TO_ADDR
16652: GO 17127
16654: LD_INT 25
16656: DOUBLE
16657: EQUAL
16658: IFTRUE 16662
16660: GO 16680
16662: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16663: LD_ADDR_VAR 0 3
16667: PUSH
16668: LD_INT 13
16670: PUSH
16671: LD_INT 14
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: ST_TO_ADDR
16678: GO 17127
16680: LD_INT 27
16682: DOUBLE
16683: EQUAL
16684: IFTRUE 16688
16686: GO 16706
16688: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16689: LD_ADDR_VAR 0 3
16693: PUSH
16694: LD_INT 13
16696: PUSH
16697: LD_INT 14
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: ST_TO_ADDR
16704: GO 17127
16706: LD_INT 28
16708: DOUBLE
16709: EQUAL
16710: IFTRUE 16714
16712: GO 16732
16714: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16715: LD_ADDR_VAR 0 3
16719: PUSH
16720: LD_INT 13
16722: PUSH
16723: LD_INT 14
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: ST_TO_ADDR
16730: GO 17127
16732: LD_INT 29
16734: DOUBLE
16735: EQUAL
16736: IFTRUE 16740
16738: GO 16758
16740: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16741: LD_ADDR_VAR 0 3
16745: PUSH
16746: LD_INT 13
16748: PUSH
16749: LD_INT 14
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: ST_TO_ADDR
16756: GO 17127
16758: LD_INT 31
16760: DOUBLE
16761: EQUAL
16762: IFTRUE 16766
16764: GO 16784
16766: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16767: LD_ADDR_VAR 0 3
16771: PUSH
16772: LD_INT 13
16774: PUSH
16775: LD_INT 14
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: ST_TO_ADDR
16782: GO 17127
16784: LD_INT 26
16786: DOUBLE
16787: EQUAL
16788: IFTRUE 16792
16790: GO 16810
16792: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16793: LD_ADDR_VAR 0 3
16797: PUSH
16798: LD_INT 13
16800: PUSH
16801: LD_INT 14
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: ST_TO_ADDR
16808: GO 17127
16810: LD_INT 42
16812: DOUBLE
16813: EQUAL
16814: IFTRUE 16818
16816: GO 16844
16818: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16819: LD_ADDR_VAR 0 3
16823: PUSH
16824: LD_INT 21
16826: PUSH
16827: LD_INT 22
16829: PUSH
16830: LD_INT 23
16832: PUSH
16833: LD_INT 24
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: ST_TO_ADDR
16842: GO 17127
16844: LD_INT 43
16846: DOUBLE
16847: EQUAL
16848: IFTRUE 16852
16850: GO 16878
16852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16853: LD_ADDR_VAR 0 3
16857: PUSH
16858: LD_INT 21
16860: PUSH
16861: LD_INT 22
16863: PUSH
16864: LD_INT 23
16866: PUSH
16867: LD_INT 24
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: ST_TO_ADDR
16876: GO 17127
16878: LD_INT 44
16880: DOUBLE
16881: EQUAL
16882: IFTRUE 16886
16884: GO 16912
16886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16887: LD_ADDR_VAR 0 3
16891: PUSH
16892: LD_INT 21
16894: PUSH
16895: LD_INT 22
16897: PUSH
16898: LD_INT 23
16900: PUSH
16901: LD_INT 24
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: ST_TO_ADDR
16910: GO 17127
16912: LD_INT 45
16914: DOUBLE
16915: EQUAL
16916: IFTRUE 16920
16918: GO 16946
16920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16921: LD_ADDR_VAR 0 3
16925: PUSH
16926: LD_INT 21
16928: PUSH
16929: LD_INT 22
16931: PUSH
16932: LD_INT 23
16934: PUSH
16935: LD_INT 24
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: ST_TO_ADDR
16944: GO 17127
16946: LD_INT 49
16948: DOUBLE
16949: EQUAL
16950: IFTRUE 16954
16952: GO 16980
16954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
16955: LD_ADDR_VAR 0 3
16959: PUSH
16960: LD_INT 21
16962: PUSH
16963: LD_INT 22
16965: PUSH
16966: LD_INT 23
16968: PUSH
16969: LD_INT 24
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: ST_TO_ADDR
16978: GO 17127
16980: LD_INT 51
16982: DOUBLE
16983: EQUAL
16984: IFTRUE 16988
16986: GO 17014
16988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
16989: LD_ADDR_VAR 0 3
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 22
16999: PUSH
17000: LD_INT 23
17002: PUSH
17003: LD_INT 24
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: ST_TO_ADDR
17012: GO 17127
17014: LD_INT 52
17016: DOUBLE
17017: EQUAL
17018: IFTRUE 17022
17020: GO 17048
17022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17023: LD_ADDR_VAR 0 3
17027: PUSH
17028: LD_INT 21
17030: PUSH
17031: LD_INT 22
17033: PUSH
17034: LD_INT 23
17036: PUSH
17037: LD_INT 24
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: ST_TO_ADDR
17046: GO 17127
17048: LD_INT 53
17050: DOUBLE
17051: EQUAL
17052: IFTRUE 17056
17054: GO 17074
17056: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17057: LD_ADDR_VAR 0 3
17061: PUSH
17062: LD_INT 23
17064: PUSH
17065: LD_INT 24
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: ST_TO_ADDR
17072: GO 17127
17074: LD_INT 46
17076: DOUBLE
17077: EQUAL
17078: IFTRUE 17082
17080: GO 17100
17082: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17083: LD_ADDR_VAR 0 3
17087: PUSH
17088: LD_INT 23
17090: PUSH
17091: LD_INT 24
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: ST_TO_ADDR
17098: GO 17127
17100: LD_INT 47
17102: DOUBLE
17103: EQUAL
17104: IFTRUE 17108
17106: GO 17126
17108: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17109: LD_ADDR_VAR 0 3
17113: PUSH
17114: LD_INT 23
17116: PUSH
17117: LD_INT 24
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: ST_TO_ADDR
17124: GO 17127
17126: POP
// result := ( chassis in result ) ;
17127: LD_ADDR_VAR 0 3
17131: PUSH
17132: LD_VAR 0 1
17136: PUSH
17137: LD_VAR 0 3
17141: IN
17142: ST_TO_ADDR
// end ;
17143: LD_VAR 0 3
17147: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17148: LD_INT 0
17150: PPUSH
17151: PPUSH
17152: PPUSH
17153: PPUSH
17154: PPUSH
17155: PPUSH
17156: PPUSH
// result := array ;
17157: LD_ADDR_VAR 0 5
17161: PUSH
17162: LD_VAR 0 1
17166: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17167: LD_VAR 0 1
17171: NOT
17172: PUSH
17173: LD_VAR 0 2
17177: NOT
17178: OR
17179: PUSH
17180: LD_VAR 0 3
17184: NOT
17185: OR
17186: PUSH
17187: LD_VAR 0 2
17191: PUSH
17192: LD_VAR 0 1
17196: GREATER
17197: OR
17198: PUSH
17199: LD_VAR 0 3
17203: PUSH
17204: LD_VAR 0 1
17208: GREATER
17209: OR
17210: IFFALSE 17214
// exit ;
17212: GO 17510
// if direction then
17214: LD_VAR 0 4
17218: IFFALSE 17282
// begin d := 1 ;
17220: LD_ADDR_VAR 0 9
17224: PUSH
17225: LD_INT 1
17227: ST_TO_ADDR
// if i_from > i_to then
17228: LD_VAR 0 2
17232: PUSH
17233: LD_VAR 0 3
17237: GREATER
17238: IFFALSE 17264
// length := ( array - i_from ) + i_to else
17240: LD_ADDR_VAR 0 11
17244: PUSH
17245: LD_VAR 0 1
17249: PUSH
17250: LD_VAR 0 2
17254: MINUS
17255: PUSH
17256: LD_VAR 0 3
17260: PLUS
17261: ST_TO_ADDR
17262: GO 17280
// length := i_to - i_from ;
17264: LD_ADDR_VAR 0 11
17268: PUSH
17269: LD_VAR 0 3
17273: PUSH
17274: LD_VAR 0 2
17278: MINUS
17279: ST_TO_ADDR
// end else
17280: GO 17343
// begin d := - 1 ;
17282: LD_ADDR_VAR 0 9
17286: PUSH
17287: LD_INT 1
17289: NEG
17290: ST_TO_ADDR
// if i_from > i_to then
17291: LD_VAR 0 2
17295: PUSH
17296: LD_VAR 0 3
17300: GREATER
17301: IFFALSE 17321
// length := i_from - i_to else
17303: LD_ADDR_VAR 0 11
17307: PUSH
17308: LD_VAR 0 2
17312: PUSH
17313: LD_VAR 0 3
17317: MINUS
17318: ST_TO_ADDR
17319: GO 17343
// length := ( array - i_to ) + i_from ;
17321: LD_ADDR_VAR 0 11
17325: PUSH
17326: LD_VAR 0 1
17330: PUSH
17331: LD_VAR 0 3
17335: MINUS
17336: PUSH
17337: LD_VAR 0 2
17341: PLUS
17342: ST_TO_ADDR
// end ; if not length then
17343: LD_VAR 0 11
17347: NOT
17348: IFFALSE 17352
// exit ;
17350: GO 17510
// tmp := array ;
17352: LD_ADDR_VAR 0 10
17356: PUSH
17357: LD_VAR 0 1
17361: ST_TO_ADDR
// for i = 1 to length do
17362: LD_ADDR_VAR 0 6
17366: PUSH
17367: DOUBLE
17368: LD_INT 1
17370: DEC
17371: ST_TO_ADDR
17372: LD_VAR 0 11
17376: PUSH
17377: FOR_TO
17378: IFFALSE 17498
// begin for j = 1 to array do
17380: LD_ADDR_VAR 0 7
17384: PUSH
17385: DOUBLE
17386: LD_INT 1
17388: DEC
17389: ST_TO_ADDR
17390: LD_VAR 0 1
17394: PUSH
17395: FOR_TO
17396: IFFALSE 17484
// begin k := j + d ;
17398: LD_ADDR_VAR 0 8
17402: PUSH
17403: LD_VAR 0 7
17407: PUSH
17408: LD_VAR 0 9
17412: PLUS
17413: ST_TO_ADDR
// if k > array then
17414: LD_VAR 0 8
17418: PUSH
17419: LD_VAR 0 1
17423: GREATER
17424: IFFALSE 17434
// k := 1 ;
17426: LD_ADDR_VAR 0 8
17430: PUSH
17431: LD_INT 1
17433: ST_TO_ADDR
// if not k then
17434: LD_VAR 0 8
17438: NOT
17439: IFFALSE 17451
// k := array ;
17441: LD_ADDR_VAR 0 8
17445: PUSH
17446: LD_VAR 0 1
17450: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17451: LD_ADDR_VAR 0 10
17455: PUSH
17456: LD_VAR 0 10
17460: PPUSH
17461: LD_VAR 0 8
17465: PPUSH
17466: LD_VAR 0 1
17470: PUSH
17471: LD_VAR 0 7
17475: ARRAY
17476: PPUSH
17477: CALL_OW 1
17481: ST_TO_ADDR
// end ;
17482: GO 17395
17484: POP
17485: POP
// array := tmp ;
17486: LD_ADDR_VAR 0 1
17490: PUSH
17491: LD_VAR 0 10
17495: ST_TO_ADDR
// end ;
17496: GO 17377
17498: POP
17499: POP
// result := array ;
17500: LD_ADDR_VAR 0 5
17504: PUSH
17505: LD_VAR 0 1
17509: ST_TO_ADDR
// end ;
17510: LD_VAR 0 5
17514: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17515: LD_INT 0
17517: PPUSH
17518: PPUSH
// result := 0 ;
17519: LD_ADDR_VAR 0 3
17523: PUSH
17524: LD_INT 0
17526: ST_TO_ADDR
// if not array or not value in array then
17527: LD_VAR 0 1
17531: NOT
17532: PUSH
17533: LD_VAR 0 2
17537: PUSH
17538: LD_VAR 0 1
17542: IN
17543: NOT
17544: OR
17545: IFFALSE 17549
// exit ;
17547: GO 17603
// for i = 1 to array do
17549: LD_ADDR_VAR 0 4
17553: PUSH
17554: DOUBLE
17555: LD_INT 1
17557: DEC
17558: ST_TO_ADDR
17559: LD_VAR 0 1
17563: PUSH
17564: FOR_TO
17565: IFFALSE 17601
// if value = array [ i ] then
17567: LD_VAR 0 2
17571: PUSH
17572: LD_VAR 0 1
17576: PUSH
17577: LD_VAR 0 4
17581: ARRAY
17582: EQUAL
17583: IFFALSE 17599
// begin result := i ;
17585: LD_ADDR_VAR 0 3
17589: PUSH
17590: LD_VAR 0 4
17594: ST_TO_ADDR
// exit ;
17595: POP
17596: POP
17597: GO 17603
// end ;
17599: GO 17564
17601: POP
17602: POP
// end ;
17603: LD_VAR 0 3
17607: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17608: LD_INT 0
17610: PPUSH
// vc_chassis := chassis ;
17611: LD_ADDR_OWVAR 37
17615: PUSH
17616: LD_VAR 0 1
17620: ST_TO_ADDR
// vc_engine := engine ;
17621: LD_ADDR_OWVAR 39
17625: PUSH
17626: LD_VAR 0 2
17630: ST_TO_ADDR
// vc_control := control ;
17631: LD_ADDR_OWVAR 38
17635: PUSH
17636: LD_VAR 0 3
17640: ST_TO_ADDR
// vc_weapon := weapon ;
17641: LD_ADDR_OWVAR 40
17645: PUSH
17646: LD_VAR 0 4
17650: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17651: LD_ADDR_OWVAR 41
17655: PUSH
17656: LD_VAR 0 5
17660: ST_TO_ADDR
// end ;
17661: LD_VAR 0 6
17665: RET
// export function WantPlant ( unit ) ; var task ; begin
17666: LD_INT 0
17668: PPUSH
17669: PPUSH
// result := false ;
17670: LD_ADDR_VAR 0 2
17674: PUSH
17675: LD_INT 0
17677: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17678: LD_ADDR_VAR 0 3
17682: PUSH
17683: LD_VAR 0 1
17687: PPUSH
17688: CALL_OW 437
17692: ST_TO_ADDR
// if task then
17693: LD_VAR 0 3
17697: IFFALSE 17725
// if task [ 1 ] [ 1 ] = p then
17699: LD_VAR 0 3
17703: PUSH
17704: LD_INT 1
17706: ARRAY
17707: PUSH
17708: LD_INT 1
17710: ARRAY
17711: PUSH
17712: LD_STRING p
17714: EQUAL
17715: IFFALSE 17725
// result := true ;
17717: LD_ADDR_VAR 0 2
17721: PUSH
17722: LD_INT 1
17724: ST_TO_ADDR
// end ;
17725: LD_VAR 0 2
17729: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
17730: LD_INT 0
17732: PPUSH
17733: PPUSH
17734: PPUSH
17735: PPUSH
// if pos < 1 then
17736: LD_VAR 0 2
17740: PUSH
17741: LD_INT 1
17743: LESS
17744: IFFALSE 17748
// exit ;
17746: GO 18051
// if pos = 1 then
17748: LD_VAR 0 2
17752: PUSH
17753: LD_INT 1
17755: EQUAL
17756: IFFALSE 17789
// result := Replace ( arr , pos [ 1 ] , value ) else
17758: LD_ADDR_VAR 0 4
17762: PUSH
17763: LD_VAR 0 1
17767: PPUSH
17768: LD_VAR 0 2
17772: PUSH
17773: LD_INT 1
17775: ARRAY
17776: PPUSH
17777: LD_VAR 0 3
17781: PPUSH
17782: CALL_OW 1
17786: ST_TO_ADDR
17787: GO 18051
// begin tmp := arr ;
17789: LD_ADDR_VAR 0 6
17793: PUSH
17794: LD_VAR 0 1
17798: ST_TO_ADDR
// s_arr := [ tmp ] ;
17799: LD_ADDR_VAR 0 7
17803: PUSH
17804: LD_VAR 0 6
17808: PUSH
17809: EMPTY
17810: LIST
17811: ST_TO_ADDR
// for i = 1 to pos - 1 do
17812: LD_ADDR_VAR 0 5
17816: PUSH
17817: DOUBLE
17818: LD_INT 1
17820: DEC
17821: ST_TO_ADDR
17822: LD_VAR 0 2
17826: PUSH
17827: LD_INT 1
17829: MINUS
17830: PUSH
17831: FOR_TO
17832: IFFALSE 17877
// begin tmp := tmp [ pos [ i ] ] ;
17834: LD_ADDR_VAR 0 6
17838: PUSH
17839: LD_VAR 0 6
17843: PUSH
17844: LD_VAR 0 2
17848: PUSH
17849: LD_VAR 0 5
17853: ARRAY
17854: ARRAY
17855: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17856: LD_ADDR_VAR 0 7
17860: PUSH
17861: LD_VAR 0 7
17865: PUSH
17866: LD_VAR 0 6
17870: PUSH
17871: EMPTY
17872: LIST
17873: ADD
17874: ST_TO_ADDR
// end ;
17875: GO 17831
17877: POP
17878: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17879: LD_ADDR_VAR 0 6
17883: PUSH
17884: LD_VAR 0 6
17888: PPUSH
17889: LD_VAR 0 2
17893: PUSH
17894: LD_VAR 0 2
17898: ARRAY
17899: PPUSH
17900: LD_VAR 0 3
17904: PPUSH
17905: CALL_OW 1
17909: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17910: LD_ADDR_VAR 0 7
17914: PUSH
17915: LD_VAR 0 7
17919: PPUSH
17920: LD_VAR 0 7
17924: PPUSH
17925: LD_VAR 0 6
17929: PPUSH
17930: CALL_OW 1
17934: ST_TO_ADDR
// for i = s_arr downto 2 do
17935: LD_ADDR_VAR 0 5
17939: PUSH
17940: DOUBLE
17941: LD_VAR 0 7
17945: INC
17946: ST_TO_ADDR
17947: LD_INT 2
17949: PUSH
17950: FOR_DOWNTO
17951: IFFALSE 18035
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
17953: LD_ADDR_VAR 0 6
17957: PUSH
17958: LD_VAR 0 7
17962: PUSH
17963: LD_VAR 0 5
17967: PUSH
17968: LD_INT 1
17970: MINUS
17971: ARRAY
17972: PPUSH
17973: LD_VAR 0 2
17977: PUSH
17978: LD_VAR 0 5
17982: PUSH
17983: LD_INT 1
17985: MINUS
17986: ARRAY
17987: PPUSH
17988: LD_VAR 0 7
17992: PUSH
17993: LD_VAR 0 5
17997: ARRAY
17998: PPUSH
17999: CALL_OW 1
18003: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18004: LD_ADDR_VAR 0 7
18008: PUSH
18009: LD_VAR 0 7
18013: PPUSH
18014: LD_VAR 0 5
18018: PUSH
18019: LD_INT 1
18021: MINUS
18022: PPUSH
18023: LD_VAR 0 6
18027: PPUSH
18028: CALL_OW 1
18032: ST_TO_ADDR
// end ;
18033: GO 17950
18035: POP
18036: POP
// result := s_arr [ 1 ] ;
18037: LD_ADDR_VAR 0 4
18041: PUSH
18042: LD_VAR 0 7
18046: PUSH
18047: LD_INT 1
18049: ARRAY
18050: ST_TO_ADDR
// end ; end ;
18051: LD_VAR 0 4
18055: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18056: LD_INT 0
18058: PPUSH
18059: PPUSH
// if not list then
18060: LD_VAR 0 1
18064: NOT
18065: IFFALSE 18069
// exit ;
18067: GO 18160
// i := list [ pos1 ] ;
18069: LD_ADDR_VAR 0 5
18073: PUSH
18074: LD_VAR 0 1
18078: PUSH
18079: LD_VAR 0 2
18083: ARRAY
18084: ST_TO_ADDR
// if not i then
18085: LD_VAR 0 5
18089: NOT
18090: IFFALSE 18094
// exit ;
18092: GO 18160
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18094: LD_ADDR_VAR 0 1
18098: PUSH
18099: LD_VAR 0 1
18103: PPUSH
18104: LD_VAR 0 2
18108: PPUSH
18109: LD_VAR 0 1
18113: PUSH
18114: LD_VAR 0 3
18118: ARRAY
18119: PPUSH
18120: CALL_OW 1
18124: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18125: LD_ADDR_VAR 0 1
18129: PUSH
18130: LD_VAR 0 1
18134: PPUSH
18135: LD_VAR 0 3
18139: PPUSH
18140: LD_VAR 0 5
18144: PPUSH
18145: CALL_OW 1
18149: ST_TO_ADDR
// result := list ;
18150: LD_ADDR_VAR 0 4
18154: PUSH
18155: LD_VAR 0 1
18159: ST_TO_ADDR
// end ;
18160: LD_VAR 0 4
18164: RET
// export function Add ( list , pos , val ) ; begin
18165: LD_INT 0
18167: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
18168: LD_ADDR_VAR 0 4
18172: PUSH
18173: LD_VAR 0 1
18177: PPUSH
18178: LD_VAR 0 2
18182: PPUSH
18183: LD_VAR 0 3
18187: PPUSH
18188: CALL 17730 0 3
18192: ST_TO_ADDR
18193: LD_VAR 0 4
18197: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18198: LD_INT 0
18200: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18201: LD_ADDR_VAR 0 5
18205: PUSH
18206: LD_VAR 0 1
18210: PPUSH
18211: CALL_OW 250
18215: PPUSH
18216: LD_VAR 0 1
18220: PPUSH
18221: CALL_OW 251
18225: PPUSH
18226: LD_VAR 0 2
18230: PPUSH
18231: LD_VAR 0 3
18235: PPUSH
18236: LD_VAR 0 4
18240: PPUSH
18241: CALL 18251 0 5
18245: ST_TO_ADDR
// end ;
18246: LD_VAR 0 5
18250: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18251: LD_INT 0
18253: PPUSH
18254: PPUSH
18255: PPUSH
18256: PPUSH
// if not list then
18257: LD_VAR 0 3
18261: NOT
18262: IFFALSE 18266
// exit ;
18264: GO 18654
// result := [ ] ;
18266: LD_ADDR_VAR 0 6
18270: PUSH
18271: EMPTY
18272: ST_TO_ADDR
// for i in list do
18273: LD_ADDR_VAR 0 7
18277: PUSH
18278: LD_VAR 0 3
18282: PUSH
18283: FOR_IN
18284: IFFALSE 18486
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18286: LD_ADDR_VAR 0 9
18290: PUSH
18291: LD_VAR 0 7
18295: PPUSH
18296: LD_VAR 0 1
18300: PPUSH
18301: LD_VAR 0 2
18305: PPUSH
18306: CALL_OW 297
18310: ST_TO_ADDR
// if not result then
18311: LD_VAR 0 6
18315: NOT
18316: IFFALSE 18342
// result := [ [ i , tmp ] ] else
18318: LD_ADDR_VAR 0 6
18322: PUSH
18323: LD_VAR 0 7
18327: PUSH
18328: LD_VAR 0 9
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: EMPTY
18338: LIST
18339: ST_TO_ADDR
18340: GO 18484
// begin if result [ result ] [ 2 ] < tmp then
18342: LD_VAR 0 6
18346: PUSH
18347: LD_VAR 0 6
18351: ARRAY
18352: PUSH
18353: LD_INT 2
18355: ARRAY
18356: PUSH
18357: LD_VAR 0 9
18361: LESS
18362: IFFALSE 18404
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18364: LD_ADDR_VAR 0 6
18368: PUSH
18369: LD_VAR 0 6
18373: PPUSH
18374: LD_VAR 0 6
18378: PUSH
18379: LD_INT 1
18381: PLUS
18382: PPUSH
18383: LD_VAR 0 7
18387: PUSH
18388: LD_VAR 0 9
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PPUSH
18397: CALL_OW 2
18401: ST_TO_ADDR
18402: GO 18484
// for j = 1 to result do
18404: LD_ADDR_VAR 0 8
18408: PUSH
18409: DOUBLE
18410: LD_INT 1
18412: DEC
18413: ST_TO_ADDR
18414: LD_VAR 0 6
18418: PUSH
18419: FOR_TO
18420: IFFALSE 18482
// begin if tmp < result [ j ] [ 2 ] then
18422: LD_VAR 0 9
18426: PUSH
18427: LD_VAR 0 6
18431: PUSH
18432: LD_VAR 0 8
18436: ARRAY
18437: PUSH
18438: LD_INT 2
18440: ARRAY
18441: LESS
18442: IFFALSE 18480
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18444: LD_ADDR_VAR 0 6
18448: PUSH
18449: LD_VAR 0 6
18453: PPUSH
18454: LD_VAR 0 8
18458: PPUSH
18459: LD_VAR 0 7
18463: PUSH
18464: LD_VAR 0 9
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PPUSH
18473: CALL_OW 2
18477: ST_TO_ADDR
// break ;
18478: GO 18482
// end ; end ;
18480: GO 18419
18482: POP
18483: POP
// end ; end ;
18484: GO 18283
18486: POP
18487: POP
// if result and not asc then
18488: LD_VAR 0 6
18492: PUSH
18493: LD_VAR 0 4
18497: NOT
18498: AND
18499: IFFALSE 18574
// begin tmp := result ;
18501: LD_ADDR_VAR 0 9
18505: PUSH
18506: LD_VAR 0 6
18510: ST_TO_ADDR
// for i = tmp downto 1 do
18511: LD_ADDR_VAR 0 7
18515: PUSH
18516: DOUBLE
18517: LD_VAR 0 9
18521: INC
18522: ST_TO_ADDR
18523: LD_INT 1
18525: PUSH
18526: FOR_DOWNTO
18527: IFFALSE 18572
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18529: LD_ADDR_VAR 0 6
18533: PUSH
18534: LD_VAR 0 6
18538: PPUSH
18539: LD_VAR 0 9
18543: PUSH
18544: LD_VAR 0 7
18548: MINUS
18549: PUSH
18550: LD_INT 1
18552: PLUS
18553: PPUSH
18554: LD_VAR 0 9
18558: PUSH
18559: LD_VAR 0 7
18563: ARRAY
18564: PPUSH
18565: CALL_OW 1
18569: ST_TO_ADDR
18570: GO 18526
18572: POP
18573: POP
// end ; tmp := [ ] ;
18574: LD_ADDR_VAR 0 9
18578: PUSH
18579: EMPTY
18580: ST_TO_ADDR
// if mode then
18581: LD_VAR 0 5
18585: IFFALSE 18654
// begin for i = 1 to result do
18587: LD_ADDR_VAR 0 7
18591: PUSH
18592: DOUBLE
18593: LD_INT 1
18595: DEC
18596: ST_TO_ADDR
18597: LD_VAR 0 6
18601: PUSH
18602: FOR_TO
18603: IFFALSE 18642
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
18605: LD_ADDR_VAR 0 9
18609: PUSH
18610: LD_VAR 0 9
18614: PPUSH
18615: LD_VAR 0 7
18619: PPUSH
18620: LD_VAR 0 6
18624: PUSH
18625: LD_VAR 0 7
18629: ARRAY
18630: PUSH
18631: LD_INT 1
18633: ARRAY
18634: PPUSH
18635: CALL_OW 1
18639: ST_TO_ADDR
18640: GO 18602
18642: POP
18643: POP
// result := tmp ;
18644: LD_ADDR_VAR 0 6
18648: PUSH
18649: LD_VAR 0 9
18653: ST_TO_ADDR
// end ; end ;
18654: LD_VAR 0 6
18658: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
18659: LD_INT 0
18661: PPUSH
18662: PPUSH
18663: PPUSH
18664: PPUSH
18665: PPUSH
18666: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
18667: LD_ADDR_VAR 0 5
18671: PUSH
18672: LD_INT 0
18674: PUSH
18675: LD_INT 0
18677: PUSH
18678: LD_INT 0
18680: PUSH
18681: EMPTY
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: ST_TO_ADDR
// if not x or not y then
18689: LD_VAR 0 2
18693: NOT
18694: PUSH
18695: LD_VAR 0 3
18699: NOT
18700: OR
18701: IFFALSE 18705
// exit ;
18703: GO 20351
// if not range then
18705: LD_VAR 0 4
18709: NOT
18710: IFFALSE 18720
// range := 10 ;
18712: LD_ADDR_VAR 0 4
18716: PUSH
18717: LD_INT 10
18719: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18720: LD_ADDR_VAR 0 8
18724: PUSH
18725: LD_INT 81
18727: PUSH
18728: LD_VAR 0 1
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 92
18739: PUSH
18740: LD_VAR 0 2
18744: PUSH
18745: LD_VAR 0 3
18749: PUSH
18750: LD_VAR 0 4
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 3
18763: PUSH
18764: LD_INT 21
18766: PUSH
18767: LD_INT 3
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: LIST
18782: PPUSH
18783: CALL_OW 69
18787: ST_TO_ADDR
// if not tmp then
18788: LD_VAR 0 8
18792: NOT
18793: IFFALSE 18797
// exit ;
18795: GO 20351
// for i in tmp do
18797: LD_ADDR_VAR 0 6
18801: PUSH
18802: LD_VAR 0 8
18806: PUSH
18807: FOR_IN
18808: IFFALSE 20326
// begin points := [ 0 , 0 , 0 ] ;
18810: LD_ADDR_VAR 0 9
18814: PUSH
18815: LD_INT 0
18817: PUSH
18818: LD_INT 0
18820: PUSH
18821: LD_INT 0
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: LIST
18828: ST_TO_ADDR
// bpoints := 1 ;
18829: LD_ADDR_VAR 0 10
18833: PUSH
18834: LD_INT 1
18836: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18837: LD_VAR 0 6
18841: PPUSH
18842: CALL_OW 247
18846: PUSH
18847: LD_INT 1
18849: DOUBLE
18850: EQUAL
18851: IFTRUE 18855
18853: GO 19433
18855: POP
// begin if GetClass ( i ) = 1 then
18856: LD_VAR 0 6
18860: PPUSH
18861: CALL_OW 257
18865: PUSH
18866: LD_INT 1
18868: EQUAL
18869: IFFALSE 18890
// points := [ 10 , 5 , 3 ] ;
18871: LD_ADDR_VAR 0 9
18875: PUSH
18876: LD_INT 10
18878: PUSH
18879: LD_INT 5
18881: PUSH
18882: LD_INT 3
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: LIST
18889: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18890: LD_VAR 0 6
18894: PPUSH
18895: CALL_OW 257
18899: PUSH
18900: LD_INT 2
18902: PUSH
18903: LD_INT 3
18905: PUSH
18906: LD_INT 4
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: LIST
18913: IN
18914: IFFALSE 18935
// points := [ 3 , 2 , 1 ] ;
18916: LD_ADDR_VAR 0 9
18920: PUSH
18921: LD_INT 3
18923: PUSH
18924: LD_INT 2
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: LIST
18934: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18935: LD_VAR 0 6
18939: PPUSH
18940: CALL_OW 257
18944: PUSH
18945: LD_INT 5
18947: EQUAL
18948: IFFALSE 18969
// points := [ 130 , 5 , 2 ] ;
18950: LD_ADDR_VAR 0 9
18954: PUSH
18955: LD_INT 130
18957: PUSH
18958: LD_INT 5
18960: PUSH
18961: LD_INT 2
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: LIST
18968: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18969: LD_VAR 0 6
18973: PPUSH
18974: CALL_OW 257
18978: PUSH
18979: LD_INT 8
18981: EQUAL
18982: IFFALSE 19003
// points := [ 35 , 35 , 30 ] ;
18984: LD_ADDR_VAR 0 9
18988: PUSH
18989: LD_INT 35
18991: PUSH
18992: LD_INT 35
18994: PUSH
18995: LD_INT 30
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: LIST
19002: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19003: LD_VAR 0 6
19007: PPUSH
19008: CALL_OW 257
19012: PUSH
19013: LD_INT 9
19015: EQUAL
19016: IFFALSE 19037
// points := [ 20 , 55 , 40 ] ;
19018: LD_ADDR_VAR 0 9
19022: PUSH
19023: LD_INT 20
19025: PUSH
19026: LD_INT 55
19028: PUSH
19029: LD_INT 40
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: LIST
19036: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19037: LD_VAR 0 6
19041: PPUSH
19042: CALL_OW 257
19046: PUSH
19047: LD_INT 12
19049: PUSH
19050: LD_INT 16
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: IN
19057: IFFALSE 19078
// points := [ 5 , 3 , 2 ] ;
19059: LD_ADDR_VAR 0 9
19063: PUSH
19064: LD_INT 5
19066: PUSH
19067: LD_INT 3
19069: PUSH
19070: LD_INT 2
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: LIST
19077: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19078: LD_VAR 0 6
19082: PPUSH
19083: CALL_OW 257
19087: PUSH
19088: LD_INT 17
19090: EQUAL
19091: IFFALSE 19112
// points := [ 100 , 50 , 75 ] ;
19093: LD_ADDR_VAR 0 9
19097: PUSH
19098: LD_INT 100
19100: PUSH
19101: LD_INT 50
19103: PUSH
19104: LD_INT 75
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: LIST
19111: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19112: LD_VAR 0 6
19116: PPUSH
19117: CALL_OW 257
19121: PUSH
19122: LD_INT 15
19124: EQUAL
19125: IFFALSE 19146
// points := [ 10 , 5 , 3 ] ;
19127: LD_ADDR_VAR 0 9
19131: PUSH
19132: LD_INT 10
19134: PUSH
19135: LD_INT 5
19137: PUSH
19138: LD_INT 3
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19146: LD_VAR 0 6
19150: PPUSH
19151: CALL_OW 257
19155: PUSH
19156: LD_INT 14
19158: EQUAL
19159: IFFALSE 19180
// points := [ 10 , 0 , 0 ] ;
19161: LD_ADDR_VAR 0 9
19165: PUSH
19166: LD_INT 10
19168: PUSH
19169: LD_INT 0
19171: PUSH
19172: LD_INT 0
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: LIST
19179: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19180: LD_VAR 0 6
19184: PPUSH
19185: CALL_OW 257
19189: PUSH
19190: LD_INT 11
19192: EQUAL
19193: IFFALSE 19214
// points := [ 30 , 10 , 5 ] ;
19195: LD_ADDR_VAR 0 9
19199: PUSH
19200: LD_INT 30
19202: PUSH
19203: LD_INT 10
19205: PUSH
19206: LD_INT 5
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: LIST
19213: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19214: LD_VAR 0 1
19218: PPUSH
19219: LD_INT 5
19221: PPUSH
19222: CALL_OW 321
19226: PUSH
19227: LD_INT 2
19229: EQUAL
19230: IFFALSE 19247
// bpoints := bpoints * 1.8 ;
19232: LD_ADDR_VAR 0 10
19236: PUSH
19237: LD_VAR 0 10
19241: PUSH
19242: LD_REAL  1.80000000000000E+0000
19245: MUL
19246: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19247: LD_VAR 0 6
19251: PPUSH
19252: CALL_OW 257
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: LD_INT 2
19262: PUSH
19263: LD_INT 3
19265: PUSH
19266: LD_INT 4
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: IN
19275: PUSH
19276: LD_VAR 0 1
19280: PPUSH
19281: LD_INT 51
19283: PPUSH
19284: CALL_OW 321
19288: PUSH
19289: LD_INT 2
19291: EQUAL
19292: AND
19293: IFFALSE 19310
// bpoints := bpoints * 1.2 ;
19295: LD_ADDR_VAR 0 10
19299: PUSH
19300: LD_VAR 0 10
19304: PUSH
19305: LD_REAL  1.20000000000000E+0000
19308: MUL
19309: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19310: LD_VAR 0 6
19314: PPUSH
19315: CALL_OW 257
19319: PUSH
19320: LD_INT 5
19322: PUSH
19323: LD_INT 7
19325: PUSH
19326: LD_INT 9
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: IN
19334: PUSH
19335: LD_VAR 0 1
19339: PPUSH
19340: LD_INT 52
19342: PPUSH
19343: CALL_OW 321
19347: PUSH
19348: LD_INT 2
19350: EQUAL
19351: AND
19352: IFFALSE 19369
// bpoints := bpoints * 1.5 ;
19354: LD_ADDR_VAR 0 10
19358: PUSH
19359: LD_VAR 0 10
19363: PUSH
19364: LD_REAL  1.50000000000000E+0000
19367: MUL
19368: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19369: LD_VAR 0 1
19373: PPUSH
19374: LD_INT 66
19376: PPUSH
19377: CALL_OW 321
19381: PUSH
19382: LD_INT 2
19384: EQUAL
19385: IFFALSE 19402
// bpoints := bpoints * 1.1 ;
19387: LD_ADDR_VAR 0 10
19391: PUSH
19392: LD_VAR 0 10
19396: PUSH
19397: LD_REAL  1.10000000000000E+0000
19400: MUL
19401: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19402: LD_ADDR_VAR 0 10
19406: PUSH
19407: LD_VAR 0 10
19411: PUSH
19412: LD_VAR 0 6
19416: PPUSH
19417: LD_INT 1
19419: PPUSH
19420: CALL_OW 259
19424: PUSH
19425: LD_REAL  1.15000000000000E+0000
19428: MUL
19429: MUL
19430: ST_TO_ADDR
// end ; unit_vehicle :
19431: GO 20255
19433: LD_INT 2
19435: DOUBLE
19436: EQUAL
19437: IFTRUE 19441
19439: GO 20243
19441: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19442: LD_VAR 0 6
19446: PPUSH
19447: CALL_OW 264
19451: PUSH
19452: LD_INT 2
19454: PUSH
19455: LD_INT 42
19457: PUSH
19458: LD_INT 24
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: LIST
19465: IN
19466: IFFALSE 19487
// points := [ 25 , 5 , 3 ] ;
19468: LD_ADDR_VAR 0 9
19472: PUSH
19473: LD_INT 25
19475: PUSH
19476: LD_INT 5
19478: PUSH
19479: LD_INT 3
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: LIST
19486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19487: LD_VAR 0 6
19491: PPUSH
19492: CALL_OW 264
19496: PUSH
19497: LD_INT 4
19499: PUSH
19500: LD_INT 43
19502: PUSH
19503: LD_INT 25
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: LIST
19510: IN
19511: IFFALSE 19532
// points := [ 40 , 15 , 5 ] ;
19513: LD_ADDR_VAR 0 9
19517: PUSH
19518: LD_INT 40
19520: PUSH
19521: LD_INT 15
19523: PUSH
19524: LD_INT 5
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: LIST
19531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19532: LD_VAR 0 6
19536: PPUSH
19537: CALL_OW 264
19541: PUSH
19542: LD_INT 3
19544: PUSH
19545: LD_INT 23
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: IN
19552: IFFALSE 19573
// points := [ 7 , 25 , 8 ] ;
19554: LD_ADDR_VAR 0 9
19558: PUSH
19559: LD_INT 7
19561: PUSH
19562: LD_INT 25
19564: PUSH
19565: LD_INT 8
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: LIST
19572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19573: LD_VAR 0 6
19577: PPUSH
19578: CALL_OW 264
19582: PUSH
19583: LD_INT 5
19585: PUSH
19586: LD_INT 27
19588: PUSH
19589: LD_INT 44
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: IN
19597: IFFALSE 19618
// points := [ 14 , 50 , 16 ] ;
19599: LD_ADDR_VAR 0 9
19603: PUSH
19604: LD_INT 14
19606: PUSH
19607: LD_INT 50
19609: PUSH
19610: LD_INT 16
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: LIST
19617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
19618: LD_VAR 0 6
19622: PPUSH
19623: CALL_OW 264
19627: PUSH
19628: LD_INT 6
19630: PUSH
19631: LD_INT 46
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: IN
19638: IFFALSE 19659
// points := [ 32 , 120 , 70 ] ;
19640: LD_ADDR_VAR 0 9
19644: PUSH
19645: LD_INT 32
19647: PUSH
19648: LD_INT 120
19650: PUSH
19651: LD_INT 70
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
19659: LD_VAR 0 6
19663: PPUSH
19664: CALL_OW 264
19668: PUSH
19669: LD_INT 7
19671: PUSH
19672: LD_INT 28
19674: PUSH
19675: LD_INT 45
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: LIST
19682: IN
19683: IFFALSE 19704
// points := [ 35 , 20 , 45 ] ;
19685: LD_ADDR_VAR 0 9
19689: PUSH
19690: LD_INT 35
19692: PUSH
19693: LD_INT 20
19695: PUSH
19696: LD_INT 45
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: LIST
19703: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
19704: LD_VAR 0 6
19708: PPUSH
19709: CALL_OW 264
19713: PUSH
19714: LD_INT 47
19716: PUSH
19717: EMPTY
19718: LIST
19719: IN
19720: IFFALSE 19741
// points := [ 67 , 45 , 75 ] ;
19722: LD_ADDR_VAR 0 9
19726: PUSH
19727: LD_INT 67
19729: PUSH
19730: LD_INT 45
19732: PUSH
19733: LD_INT 75
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: LIST
19740: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
19741: LD_VAR 0 6
19745: PPUSH
19746: CALL_OW 264
19750: PUSH
19751: LD_INT 26
19753: PUSH
19754: EMPTY
19755: LIST
19756: IN
19757: IFFALSE 19778
// points := [ 120 , 30 , 80 ] ;
19759: LD_ADDR_VAR 0 9
19763: PUSH
19764: LD_INT 120
19766: PUSH
19767: LD_INT 30
19769: PUSH
19770: LD_INT 80
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: LIST
19777: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19778: LD_VAR 0 6
19782: PPUSH
19783: CALL_OW 264
19787: PUSH
19788: LD_INT 22
19790: PUSH
19791: EMPTY
19792: LIST
19793: IN
19794: IFFALSE 19815
// points := [ 40 , 1 , 1 ] ;
19796: LD_ADDR_VAR 0 9
19800: PUSH
19801: LD_INT 40
19803: PUSH
19804: LD_INT 1
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: LIST
19814: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19815: LD_VAR 0 6
19819: PPUSH
19820: CALL_OW 264
19824: PUSH
19825: LD_INT 29
19827: PUSH
19828: EMPTY
19829: LIST
19830: IN
19831: IFFALSE 19852
// points := [ 70 , 200 , 400 ] ;
19833: LD_ADDR_VAR 0 9
19837: PUSH
19838: LD_INT 70
19840: PUSH
19841: LD_INT 200
19843: PUSH
19844: LD_INT 400
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: LIST
19851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19852: LD_VAR 0 6
19856: PPUSH
19857: CALL_OW 264
19861: PUSH
19862: LD_INT 14
19864: PUSH
19865: LD_INT 53
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: IN
19872: IFFALSE 19893
// points := [ 40 , 10 , 20 ] ;
19874: LD_ADDR_VAR 0 9
19878: PUSH
19879: LD_INT 40
19881: PUSH
19882: LD_INT 10
19884: PUSH
19885: LD_INT 20
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: LIST
19892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19893: LD_VAR 0 6
19897: PPUSH
19898: CALL_OW 264
19902: PUSH
19903: LD_INT 9
19905: PUSH
19906: EMPTY
19907: LIST
19908: IN
19909: IFFALSE 19930
// points := [ 5 , 70 , 20 ] ;
19911: LD_ADDR_VAR 0 9
19915: PUSH
19916: LD_INT 5
19918: PUSH
19919: LD_INT 70
19921: PUSH
19922: LD_INT 20
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: LIST
19929: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19930: LD_VAR 0 6
19934: PPUSH
19935: CALL_OW 264
19939: PUSH
19940: LD_INT 10
19942: PUSH
19943: EMPTY
19944: LIST
19945: IN
19946: IFFALSE 19967
// points := [ 35 , 110 , 70 ] ;
19948: LD_ADDR_VAR 0 9
19952: PUSH
19953: LD_INT 35
19955: PUSH
19956: LD_INT 110
19958: PUSH
19959: LD_INT 70
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: LIST
19966: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19967: LD_VAR 0 6
19971: PPUSH
19972: CALL_OW 265
19976: PUSH
19977: LD_INT 25
19979: EQUAL
19980: IFFALSE 20001
// points := [ 80 , 65 , 100 ] ;
19982: LD_ADDR_VAR 0 9
19986: PUSH
19987: LD_INT 80
19989: PUSH
19990: LD_INT 65
19992: PUSH
19993: LD_INT 100
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: LIST
20000: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20001: LD_VAR 0 6
20005: PPUSH
20006: CALL_OW 263
20010: PUSH
20011: LD_INT 1
20013: EQUAL
20014: IFFALSE 20049
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20016: LD_ADDR_VAR 0 10
20020: PUSH
20021: LD_VAR 0 10
20025: PUSH
20026: LD_VAR 0 6
20030: PPUSH
20031: CALL_OW 311
20035: PPUSH
20036: LD_INT 3
20038: PPUSH
20039: CALL_OW 259
20043: PUSH
20044: LD_INT 4
20046: MUL
20047: MUL
20048: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20049: LD_VAR 0 6
20053: PPUSH
20054: CALL_OW 263
20058: PUSH
20059: LD_INT 2
20061: EQUAL
20062: IFFALSE 20113
// begin j := IsControledBy ( i ) ;
20064: LD_ADDR_VAR 0 7
20068: PUSH
20069: LD_VAR 0 6
20073: PPUSH
20074: CALL_OW 312
20078: ST_TO_ADDR
// if j then
20079: LD_VAR 0 7
20083: IFFALSE 20113
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20085: LD_ADDR_VAR 0 10
20089: PUSH
20090: LD_VAR 0 10
20094: PUSH
20095: LD_VAR 0 7
20099: PPUSH
20100: LD_INT 3
20102: PPUSH
20103: CALL_OW 259
20107: PUSH
20108: LD_INT 3
20110: MUL
20111: MUL
20112: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20113: LD_VAR 0 6
20117: PPUSH
20118: CALL_OW 264
20122: PUSH
20123: LD_INT 5
20125: PUSH
20126: LD_INT 6
20128: PUSH
20129: LD_INT 46
20131: PUSH
20132: LD_INT 44
20134: PUSH
20135: LD_INT 47
20137: PUSH
20138: LD_INT 45
20140: PUSH
20141: LD_INT 28
20143: PUSH
20144: LD_INT 7
20146: PUSH
20147: LD_INT 27
20149: PUSH
20150: LD_INT 29
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: IN
20165: PUSH
20166: LD_VAR 0 1
20170: PPUSH
20171: LD_INT 52
20173: PPUSH
20174: CALL_OW 321
20178: PUSH
20179: LD_INT 2
20181: EQUAL
20182: AND
20183: IFFALSE 20200
// bpoints := bpoints * 1.2 ;
20185: LD_ADDR_VAR 0 10
20189: PUSH
20190: LD_VAR 0 10
20194: PUSH
20195: LD_REAL  1.20000000000000E+0000
20198: MUL
20199: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20200: LD_VAR 0 6
20204: PPUSH
20205: CALL_OW 264
20209: PUSH
20210: LD_INT 6
20212: PUSH
20213: LD_INT 46
20215: PUSH
20216: LD_INT 47
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: LIST
20223: IN
20224: IFFALSE 20241
// bpoints := bpoints * 1.2 ;
20226: LD_ADDR_VAR 0 10
20230: PUSH
20231: LD_VAR 0 10
20235: PUSH
20236: LD_REAL  1.20000000000000E+0000
20239: MUL
20240: ST_TO_ADDR
// end ; unit_building :
20241: GO 20255
20243: LD_INT 3
20245: DOUBLE
20246: EQUAL
20247: IFTRUE 20251
20249: GO 20254
20251: POP
// ; end ;
20252: GO 20255
20254: POP
// for j = 1 to 3 do
20255: LD_ADDR_VAR 0 7
20259: PUSH
20260: DOUBLE
20261: LD_INT 1
20263: DEC
20264: ST_TO_ADDR
20265: LD_INT 3
20267: PUSH
20268: FOR_TO
20269: IFFALSE 20322
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20271: LD_ADDR_VAR 0 5
20275: PUSH
20276: LD_VAR 0 5
20280: PPUSH
20281: LD_VAR 0 7
20285: PPUSH
20286: LD_VAR 0 5
20290: PUSH
20291: LD_VAR 0 7
20295: ARRAY
20296: PUSH
20297: LD_VAR 0 9
20301: PUSH
20302: LD_VAR 0 7
20306: ARRAY
20307: PUSH
20308: LD_VAR 0 10
20312: MUL
20313: PLUS
20314: PPUSH
20315: CALL_OW 1
20319: ST_TO_ADDR
20320: GO 20268
20322: POP
20323: POP
// end ;
20324: GO 18807
20326: POP
20327: POP
// result := Replace ( result , 4 , tmp ) ;
20328: LD_ADDR_VAR 0 5
20332: PUSH
20333: LD_VAR 0 5
20337: PPUSH
20338: LD_INT 4
20340: PPUSH
20341: LD_VAR 0 8
20345: PPUSH
20346: CALL_OW 1
20350: ST_TO_ADDR
// end ;
20351: LD_VAR 0 5
20355: RET
// export function DangerAtRange ( unit , range ) ; begin
20356: LD_INT 0
20358: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20359: LD_ADDR_VAR 0 3
20363: PUSH
20364: LD_VAR 0 1
20368: PPUSH
20369: CALL_OW 255
20373: PPUSH
20374: LD_VAR 0 1
20378: PPUSH
20379: CALL_OW 250
20383: PPUSH
20384: LD_VAR 0 1
20388: PPUSH
20389: CALL_OW 251
20393: PPUSH
20394: LD_VAR 0 2
20398: PPUSH
20399: CALL 18659 0 4
20403: ST_TO_ADDR
// end ;
20404: LD_VAR 0 3
20408: RET
// export function IsExtension ( b ) ; begin
20409: LD_INT 0
20411: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20412: LD_ADDR_VAR 0 2
20416: PUSH
20417: LD_VAR 0 1
20421: PPUSH
20422: CALL_OW 266
20426: PUSH
20427: LD_INT 23
20429: PUSH
20430: LD_INT 20
20432: PUSH
20433: LD_INT 22
20435: PUSH
20436: LD_INT 17
20438: PUSH
20439: LD_INT 24
20441: PUSH
20442: LD_INT 21
20444: PUSH
20445: LD_INT 19
20447: PUSH
20448: LD_INT 16
20450: PUSH
20451: LD_INT 25
20453: PUSH
20454: LD_INT 18
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: IN
20469: ST_TO_ADDR
// end ;
20470: LD_VAR 0 2
20474: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
20475: LD_INT 0
20477: PPUSH
20478: PPUSH
20479: PPUSH
// result := [ ] ;
20480: LD_ADDR_VAR 0 2
20484: PUSH
20485: EMPTY
20486: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
20487: LD_ADDR_VAR 0 3
20491: PUSH
20492: LD_INT 21
20494: PUSH
20495: LD_INT 3
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PPUSH
20502: CALL_OW 69
20506: ST_TO_ADDR
// if not tmp then
20507: LD_VAR 0 3
20511: NOT
20512: IFFALSE 20516
// exit ;
20514: GO 20566
// for i in tmp do
20516: LD_ADDR_VAR 0 4
20520: PUSH
20521: LD_VAR 0 3
20525: PUSH
20526: FOR_IN
20527: IFFALSE 20564
// if GetBase ( i ) = base then
20529: LD_VAR 0 4
20533: PPUSH
20534: CALL_OW 274
20538: PUSH
20539: LD_VAR 0 1
20543: EQUAL
20544: IFFALSE 20562
// result := result ^ i ;
20546: LD_ADDR_VAR 0 2
20550: PUSH
20551: LD_VAR 0 2
20555: PUSH
20556: LD_VAR 0 4
20560: ADD
20561: ST_TO_ADDR
20562: GO 20526
20564: POP
20565: POP
// end ;
20566: LD_VAR 0 2
20570: RET
// export function ComComplete ( unit , b ) ; var i ; begin
20571: LD_INT 0
20573: PPUSH
20574: PPUSH
// if BuildingStatus ( b ) = bs_build then
20575: LD_VAR 0 2
20579: PPUSH
20580: CALL_OW 461
20584: PUSH
20585: LD_INT 1
20587: EQUAL
20588: IFFALSE 20648
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20590: LD_VAR 0 1
20594: PPUSH
20595: LD_STRING h
20597: PUSH
20598: LD_VAR 0 2
20602: PPUSH
20603: CALL_OW 250
20607: PUSH
20608: LD_VAR 0 2
20612: PPUSH
20613: CALL_OW 251
20617: PUSH
20618: LD_VAR 0 2
20622: PUSH
20623: LD_INT 0
20625: PUSH
20626: LD_INT 0
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: PUSH
20641: EMPTY
20642: LIST
20643: PPUSH
20644: CALL_OW 446
// end ;
20648: LD_VAR 0 3
20652: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
20653: LD_INT 0
20655: PPUSH
20656: PPUSH
20657: PPUSH
20658: PPUSH
20659: PPUSH
20660: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
20661: LD_VAR 0 1
20665: NOT
20666: PUSH
20667: LD_VAR 0 1
20671: PPUSH
20672: CALL_OW 263
20676: PUSH
20677: LD_INT 2
20679: EQUAL
20680: NOT
20681: OR
20682: IFFALSE 20686
// exit ;
20684: GO 21002
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20686: LD_ADDR_VAR 0 6
20690: PUSH
20691: LD_INT 22
20693: PUSH
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 255
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 2
20710: PUSH
20711: LD_INT 30
20713: PUSH
20714: LD_INT 36
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 34
20723: PUSH
20724: LD_INT 31
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: LIST
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PPUSH
20740: CALL_OW 69
20744: ST_TO_ADDR
// if not tmp then
20745: LD_VAR 0 6
20749: NOT
20750: IFFALSE 20754
// exit ;
20752: GO 21002
// result := [ ] ;
20754: LD_ADDR_VAR 0 2
20758: PUSH
20759: EMPTY
20760: ST_TO_ADDR
// for i in tmp do
20761: LD_ADDR_VAR 0 3
20765: PUSH
20766: LD_VAR 0 6
20770: PUSH
20771: FOR_IN
20772: IFFALSE 20843
// begin t := UnitsInside ( i ) ;
20774: LD_ADDR_VAR 0 4
20778: PUSH
20779: LD_VAR 0 3
20783: PPUSH
20784: CALL_OW 313
20788: ST_TO_ADDR
// if t then
20789: LD_VAR 0 4
20793: IFFALSE 20841
// for j in t do
20795: LD_ADDR_VAR 0 7
20799: PUSH
20800: LD_VAR 0 4
20804: PUSH
20805: FOR_IN
20806: IFFALSE 20839
// result := Insert ( result , result + 1 , j ) ;
20808: LD_ADDR_VAR 0 2
20812: PUSH
20813: LD_VAR 0 2
20817: PPUSH
20818: LD_VAR 0 2
20822: PUSH
20823: LD_INT 1
20825: PLUS
20826: PPUSH
20827: LD_VAR 0 7
20831: PPUSH
20832: CALL_OW 2
20836: ST_TO_ADDR
20837: GO 20805
20839: POP
20840: POP
// end ;
20841: GO 20771
20843: POP
20844: POP
// if not result then
20845: LD_VAR 0 2
20849: NOT
20850: IFFALSE 20854
// exit ;
20852: GO 21002
// mech := result [ 1 ] ;
20854: LD_ADDR_VAR 0 5
20858: PUSH
20859: LD_VAR 0 2
20863: PUSH
20864: LD_INT 1
20866: ARRAY
20867: ST_TO_ADDR
// if result > 1 then
20868: LD_VAR 0 2
20872: PUSH
20873: LD_INT 1
20875: GREATER
20876: IFFALSE 20988
// for i = 2 to result do
20878: LD_ADDR_VAR 0 3
20882: PUSH
20883: DOUBLE
20884: LD_INT 2
20886: DEC
20887: ST_TO_ADDR
20888: LD_VAR 0 2
20892: PUSH
20893: FOR_TO
20894: IFFALSE 20986
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20896: LD_ADDR_VAR 0 4
20900: PUSH
20901: LD_VAR 0 2
20905: PUSH
20906: LD_VAR 0 3
20910: ARRAY
20911: PPUSH
20912: LD_INT 3
20914: PPUSH
20915: CALL_OW 259
20919: PUSH
20920: LD_VAR 0 2
20924: PUSH
20925: LD_VAR 0 3
20929: ARRAY
20930: PPUSH
20931: CALL_OW 432
20935: MINUS
20936: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20937: LD_VAR 0 4
20941: PUSH
20942: LD_VAR 0 5
20946: PPUSH
20947: LD_INT 3
20949: PPUSH
20950: CALL_OW 259
20954: PUSH
20955: LD_VAR 0 5
20959: PPUSH
20960: CALL_OW 432
20964: MINUS
20965: GREATEREQUAL
20966: IFFALSE 20984
// mech := result [ i ] ;
20968: LD_ADDR_VAR 0 5
20972: PUSH
20973: LD_VAR 0 2
20977: PUSH
20978: LD_VAR 0 3
20982: ARRAY
20983: ST_TO_ADDR
// end ;
20984: GO 20893
20986: POP
20987: POP
// ComLinkTo ( vehicle , mech ) ;
20988: LD_VAR 0 1
20992: PPUSH
20993: LD_VAR 0 5
20997: PPUSH
20998: CALL_OW 135
// end ;
21002: LD_VAR 0 2
21006: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
21007: LD_INT 0
21009: PPUSH
21010: PPUSH
21011: PPUSH
21012: PPUSH
21013: PPUSH
21014: PPUSH
21015: PPUSH
21016: PPUSH
21017: PPUSH
21018: PPUSH
21019: PPUSH
21020: PPUSH
// result := [ ] ;
21021: LD_ADDR_VAR 0 6
21025: PUSH
21026: EMPTY
21027: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21028: LD_VAR 0 1
21032: PPUSH
21033: CALL_OW 266
21037: PUSH
21038: LD_INT 0
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: IN
21048: NOT
21049: IFFALSE 21053
// exit ;
21051: GO 22462
// if name then
21053: LD_VAR 0 2
21057: IFFALSE 21073
// SetBName ( base_dep , name ) ;
21059: LD_VAR 0 1
21063: PPUSH
21064: LD_VAR 0 2
21068: PPUSH
21069: CALL_OW 500
// base := GetBase ( base_dep ) ;
21073: LD_ADDR_VAR 0 14
21077: PUSH
21078: LD_VAR 0 1
21082: PPUSH
21083: CALL_OW 274
21087: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21088: LD_ADDR_VAR 0 15
21092: PUSH
21093: LD_VAR 0 1
21097: PPUSH
21098: CALL_OW 255
21102: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21103: LD_ADDR_VAR 0 16
21107: PUSH
21108: LD_VAR 0 1
21112: PPUSH
21113: CALL_OW 248
21117: ST_TO_ADDR
// if sources then
21118: LD_VAR 0 4
21122: IFFALSE 21169
// for i = 1 to 3 do
21124: LD_ADDR_VAR 0 7
21128: PUSH
21129: DOUBLE
21130: LD_INT 1
21132: DEC
21133: ST_TO_ADDR
21134: LD_INT 3
21136: PUSH
21137: FOR_TO
21138: IFFALSE 21167
// AddResourceType ( base , i , sources [ i ] ) ;
21140: LD_VAR 0 14
21144: PPUSH
21145: LD_VAR 0 7
21149: PPUSH
21150: LD_VAR 0 4
21154: PUSH
21155: LD_VAR 0 7
21159: ARRAY
21160: PPUSH
21161: CALL_OW 276
21165: GO 21137
21167: POP
21168: POP
// buildings := GetBaseBuildings ( base ) ;
21169: LD_ADDR_VAR 0 17
21173: PUSH
21174: LD_VAR 0 14
21178: PPUSH
21179: CALL 20475 0 1
21183: ST_TO_ADDR
// InitHc ;
21184: CALL_OW 19
// InitUc ;
21188: CALL_OW 18
// uc_side := side ;
21192: LD_ADDR_OWVAR 20
21196: PUSH
21197: LD_VAR 0 15
21201: ST_TO_ADDR
// uc_nation := nation ;
21202: LD_ADDR_OWVAR 21
21206: PUSH
21207: LD_VAR 0 16
21211: ST_TO_ADDR
// if buildings then
21212: LD_VAR 0 17
21216: IFFALSE 22321
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21218: LD_VAR 0 17
21222: PPUSH
21223: LD_INT 2
21225: PUSH
21226: LD_INT 30
21228: PUSH
21229: LD_INT 32
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 30
21238: PUSH
21239: LD_INT 33
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: LIST
21250: PPUSH
21251: CALL_OW 72
21255: IFFALSE 21338
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21257: LD_ADDR_VAR 0 7
21261: PUSH
21262: LD_VAR 0 17
21266: PPUSH
21267: LD_INT 2
21269: PUSH
21270: LD_INT 30
21272: PUSH
21273: LD_INT 32
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 30
21282: PUSH
21283: LD_INT 33
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: LIST
21294: PPUSH
21295: CALL_OW 72
21299: PUSH
21300: FOR_IN
21301: IFFALSE 21336
// begin if not GetBWeapon ( i ) then
21303: LD_VAR 0 7
21307: PPUSH
21308: CALL_OW 269
21312: NOT
21313: IFFALSE 21334
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
21315: LD_VAR 0 7
21319: PPUSH
21320: LD_VAR 0 7
21324: PPUSH
21325: CALL 22467 0 1
21329: PPUSH
21330: CALL_OW 431
// end ;
21334: GO 21300
21336: POP
21337: POP
// end ; for i = 1 to personel do
21338: LD_ADDR_VAR 0 7
21342: PUSH
21343: DOUBLE
21344: LD_INT 1
21346: DEC
21347: ST_TO_ADDR
21348: LD_VAR 0 5
21352: PUSH
21353: FOR_TO
21354: IFFALSE 22301
// begin if i > 4 then
21356: LD_VAR 0 7
21360: PUSH
21361: LD_INT 4
21363: GREATER
21364: IFFALSE 21368
// break ;
21366: GO 22301
// case i of 1 :
21368: LD_VAR 0 7
21372: PUSH
21373: LD_INT 1
21375: DOUBLE
21376: EQUAL
21377: IFTRUE 21381
21379: GO 21454
21381: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21382: LD_ADDR_VAR 0 11
21386: PUSH
21387: LD_VAR 0 17
21391: PPUSH
21392: LD_INT 22
21394: PUSH
21395: LD_VAR 0 15
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 2
21406: PUSH
21407: LD_INT 30
21409: PUSH
21410: LD_INT 32
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 30
21419: PUSH
21420: LD_INT 4
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 30
21429: PUSH
21430: LD_INT 5
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PPUSH
21447: CALL_OW 72
21451: ST_TO_ADDR
21452: GO 21676
21454: LD_INT 2
21456: DOUBLE
21457: EQUAL
21458: IFTRUE 21462
21460: GO 21524
21462: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
21463: LD_ADDR_VAR 0 11
21467: PUSH
21468: LD_VAR 0 17
21472: PPUSH
21473: LD_INT 22
21475: PUSH
21476: LD_VAR 0 15
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 2
21487: PUSH
21488: LD_INT 30
21490: PUSH
21491: LD_INT 0
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 30
21500: PUSH
21501: LD_INT 1
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: LIST
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PPUSH
21517: CALL_OW 72
21521: ST_TO_ADDR
21522: GO 21676
21524: LD_INT 3
21526: DOUBLE
21527: EQUAL
21528: IFTRUE 21532
21530: GO 21594
21532: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
21533: LD_ADDR_VAR 0 11
21537: PUSH
21538: LD_VAR 0 17
21542: PPUSH
21543: LD_INT 22
21545: PUSH
21546: LD_VAR 0 15
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 2
21557: PUSH
21558: LD_INT 30
21560: PUSH
21561: LD_INT 2
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 30
21570: PUSH
21571: LD_INT 3
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: LIST
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PPUSH
21587: CALL_OW 72
21591: ST_TO_ADDR
21592: GO 21676
21594: LD_INT 4
21596: DOUBLE
21597: EQUAL
21598: IFTRUE 21602
21600: GO 21675
21602: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21603: LD_ADDR_VAR 0 11
21607: PUSH
21608: LD_VAR 0 17
21612: PPUSH
21613: LD_INT 22
21615: PUSH
21616: LD_VAR 0 15
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 2
21627: PUSH
21628: LD_INT 30
21630: PUSH
21631: LD_INT 6
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 30
21640: PUSH
21641: LD_INT 7
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 30
21650: PUSH
21651: LD_INT 8
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PPUSH
21668: CALL_OW 72
21672: ST_TO_ADDR
21673: GO 21676
21675: POP
// if not f then
21676: LD_VAR 0 11
21680: NOT
21681: IFFALSE 21685
// continue ;
21683: GO 21353
// x := personel [ i ] ;
21685: LD_ADDR_VAR 0 12
21689: PUSH
21690: LD_VAR 0 5
21694: PUSH
21695: LD_VAR 0 7
21699: ARRAY
21700: ST_TO_ADDR
// if x = - 1 then
21701: LD_VAR 0 12
21705: PUSH
21706: LD_INT 1
21708: NEG
21709: EQUAL
21710: IFFALSE 21919
// begin for j in f do
21712: LD_ADDR_VAR 0 8
21716: PUSH
21717: LD_VAR 0 11
21721: PUSH
21722: FOR_IN
21723: IFFALSE 21915
// repeat InitHc ;
21725: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21729: LD_VAR 0 8
21733: PPUSH
21734: CALL_OW 266
21738: PUSH
21739: LD_INT 5
21741: EQUAL
21742: IFFALSE 21812
// begin if UnitsInside ( j ) < 3 then
21744: LD_VAR 0 8
21748: PPUSH
21749: CALL_OW 313
21753: PUSH
21754: LD_INT 3
21756: LESS
21757: IFFALSE 21793
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21759: LD_INT 0
21761: PPUSH
21762: LD_INT 5
21764: PUSH
21765: LD_INT 8
21767: PUSH
21768: LD_INT 9
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: LIST
21775: PUSH
21776: LD_VAR 0 16
21780: ARRAY
21781: PPUSH
21782: LD_VAR 0 3
21786: PPUSH
21787: CALL_OW 380
21791: GO 21810
// PrepareHuman ( false , i , skill ) ;
21793: LD_INT 0
21795: PPUSH
21796: LD_VAR 0 7
21800: PPUSH
21801: LD_VAR 0 3
21805: PPUSH
21806: CALL_OW 380
// end else
21810: GO 21829
// PrepareHuman ( false , i , skill ) ;
21812: LD_INT 0
21814: PPUSH
21815: LD_VAR 0 7
21819: PPUSH
21820: LD_VAR 0 3
21824: PPUSH
21825: CALL_OW 380
// un := CreateHuman ;
21829: LD_ADDR_VAR 0 13
21833: PUSH
21834: CALL_OW 44
21838: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21839: LD_ADDR_VAR 0 6
21843: PUSH
21844: LD_VAR 0 6
21848: PPUSH
21849: LD_INT 1
21851: PPUSH
21852: LD_VAR 0 13
21856: PPUSH
21857: CALL_OW 2
21861: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21862: LD_VAR 0 13
21866: PPUSH
21867: LD_VAR 0 8
21871: PPUSH
21872: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21876: LD_VAR 0 8
21880: PPUSH
21881: CALL_OW 313
21885: PUSH
21886: LD_INT 6
21888: EQUAL
21889: PUSH
21890: LD_VAR 0 8
21894: PPUSH
21895: CALL_OW 266
21899: PUSH
21900: LD_INT 32
21902: PUSH
21903: LD_INT 31
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: IN
21910: OR
21911: IFFALSE 21725
21913: GO 21722
21915: POP
21916: POP
// end else
21917: GO 22299
// for j = 1 to x do
21919: LD_ADDR_VAR 0 8
21923: PUSH
21924: DOUBLE
21925: LD_INT 1
21927: DEC
21928: ST_TO_ADDR
21929: LD_VAR 0 12
21933: PUSH
21934: FOR_TO
21935: IFFALSE 22297
// begin InitHc ;
21937: CALL_OW 19
// if not f then
21941: LD_VAR 0 11
21945: NOT
21946: IFFALSE 22035
// begin PrepareHuman ( false , i , skill ) ;
21948: LD_INT 0
21950: PPUSH
21951: LD_VAR 0 7
21955: PPUSH
21956: LD_VAR 0 3
21960: PPUSH
21961: CALL_OW 380
// un := CreateHuman ;
21965: LD_ADDR_VAR 0 13
21969: PUSH
21970: CALL_OW 44
21974: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21975: LD_ADDR_VAR 0 6
21979: PUSH
21980: LD_VAR 0 6
21984: PPUSH
21985: LD_INT 1
21987: PPUSH
21988: LD_VAR 0 13
21992: PPUSH
21993: CALL_OW 2
21997: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21998: LD_VAR 0 13
22002: PPUSH
22003: LD_VAR 0 1
22007: PPUSH
22008: CALL_OW 250
22012: PPUSH
22013: LD_VAR 0 1
22017: PPUSH
22018: CALL_OW 251
22022: PPUSH
22023: LD_INT 10
22025: PPUSH
22026: LD_INT 0
22028: PPUSH
22029: CALL_OW 50
// continue ;
22033: GO 21934
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22035: LD_VAR 0 11
22039: PUSH
22040: LD_INT 1
22042: ARRAY
22043: PPUSH
22044: CALL_OW 313
22048: PUSH
22049: LD_VAR 0 11
22053: PUSH
22054: LD_INT 1
22056: ARRAY
22057: PPUSH
22058: CALL_OW 266
22062: PUSH
22063: LD_INT 32
22065: PUSH
22066: LD_INT 31
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: IN
22073: AND
22074: PUSH
22075: LD_VAR 0 11
22079: PUSH
22080: LD_INT 1
22082: ARRAY
22083: PPUSH
22084: CALL_OW 313
22088: PUSH
22089: LD_INT 6
22091: EQUAL
22092: OR
22093: IFFALSE 22113
// f := Delete ( f , 1 ) ;
22095: LD_ADDR_VAR 0 11
22099: PUSH
22100: LD_VAR 0 11
22104: PPUSH
22105: LD_INT 1
22107: PPUSH
22108: CALL_OW 3
22112: ST_TO_ADDR
// if not f then
22113: LD_VAR 0 11
22117: NOT
22118: IFFALSE 22136
// begin x := x + 2 ;
22120: LD_ADDR_VAR 0 12
22124: PUSH
22125: LD_VAR 0 12
22129: PUSH
22130: LD_INT 2
22132: PLUS
22133: ST_TO_ADDR
// continue ;
22134: GO 21934
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22136: LD_VAR 0 11
22140: PUSH
22141: LD_INT 1
22143: ARRAY
22144: PPUSH
22145: CALL_OW 266
22149: PUSH
22150: LD_INT 5
22152: EQUAL
22153: IFFALSE 22227
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22155: LD_VAR 0 11
22159: PUSH
22160: LD_INT 1
22162: ARRAY
22163: PPUSH
22164: CALL_OW 313
22168: PUSH
22169: LD_INT 3
22171: LESS
22172: IFFALSE 22208
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22174: LD_INT 0
22176: PPUSH
22177: LD_INT 5
22179: PUSH
22180: LD_INT 8
22182: PUSH
22183: LD_INT 9
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: LIST
22190: PUSH
22191: LD_VAR 0 16
22195: ARRAY
22196: PPUSH
22197: LD_VAR 0 3
22201: PPUSH
22202: CALL_OW 380
22206: GO 22225
// PrepareHuman ( false , i , skill ) ;
22208: LD_INT 0
22210: PPUSH
22211: LD_VAR 0 7
22215: PPUSH
22216: LD_VAR 0 3
22220: PPUSH
22221: CALL_OW 380
// end else
22225: GO 22244
// PrepareHuman ( false , i , skill ) ;
22227: LD_INT 0
22229: PPUSH
22230: LD_VAR 0 7
22234: PPUSH
22235: LD_VAR 0 3
22239: PPUSH
22240: CALL_OW 380
// un := CreateHuman ;
22244: LD_ADDR_VAR 0 13
22248: PUSH
22249: CALL_OW 44
22253: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22254: LD_ADDR_VAR 0 6
22258: PUSH
22259: LD_VAR 0 6
22263: PPUSH
22264: LD_INT 1
22266: PPUSH
22267: LD_VAR 0 13
22271: PPUSH
22272: CALL_OW 2
22276: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22277: LD_VAR 0 13
22281: PPUSH
22282: LD_VAR 0 11
22286: PUSH
22287: LD_INT 1
22289: ARRAY
22290: PPUSH
22291: CALL_OW 52
// end ;
22295: GO 21934
22297: POP
22298: POP
// end ;
22299: GO 21353
22301: POP
22302: POP
// result := result ^ buildings ;
22303: LD_ADDR_VAR 0 6
22307: PUSH
22308: LD_VAR 0 6
22312: PUSH
22313: LD_VAR 0 17
22317: ADD
22318: ST_TO_ADDR
// end else
22319: GO 22462
// begin for i = 1 to personel do
22321: LD_ADDR_VAR 0 7
22325: PUSH
22326: DOUBLE
22327: LD_INT 1
22329: DEC
22330: ST_TO_ADDR
22331: LD_VAR 0 5
22335: PUSH
22336: FOR_TO
22337: IFFALSE 22460
// begin if i > 4 then
22339: LD_VAR 0 7
22343: PUSH
22344: LD_INT 4
22346: GREATER
22347: IFFALSE 22351
// break ;
22349: GO 22460
// x := personel [ i ] ;
22351: LD_ADDR_VAR 0 12
22355: PUSH
22356: LD_VAR 0 5
22360: PUSH
22361: LD_VAR 0 7
22365: ARRAY
22366: ST_TO_ADDR
// if x = - 1 then
22367: LD_VAR 0 12
22371: PUSH
22372: LD_INT 1
22374: NEG
22375: EQUAL
22376: IFFALSE 22380
// continue ;
22378: GO 22336
// PrepareHuman ( false , i , skill ) ;
22380: LD_INT 0
22382: PPUSH
22383: LD_VAR 0 7
22387: PPUSH
22388: LD_VAR 0 3
22392: PPUSH
22393: CALL_OW 380
// un := CreateHuman ;
22397: LD_ADDR_VAR 0 13
22401: PUSH
22402: CALL_OW 44
22406: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22407: LD_VAR 0 13
22411: PPUSH
22412: LD_VAR 0 1
22416: PPUSH
22417: CALL_OW 250
22421: PPUSH
22422: LD_VAR 0 1
22426: PPUSH
22427: CALL_OW 251
22431: PPUSH
22432: LD_INT 10
22434: PPUSH
22435: LD_INT 0
22437: PPUSH
22438: CALL_OW 50
// result := result ^ un ;
22442: LD_ADDR_VAR 0 6
22446: PUSH
22447: LD_VAR 0 6
22451: PUSH
22452: LD_VAR 0 13
22456: ADD
22457: ST_TO_ADDR
// end ;
22458: GO 22336
22460: POP
22461: POP
// end ; end ;
22462: LD_VAR 0 6
22466: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22467: LD_INT 0
22469: PPUSH
22470: PPUSH
22471: PPUSH
22472: PPUSH
22473: PPUSH
22474: PPUSH
22475: PPUSH
22476: PPUSH
22477: PPUSH
22478: PPUSH
22479: PPUSH
22480: PPUSH
22481: PPUSH
22482: PPUSH
22483: PPUSH
22484: PPUSH
// result := false ;
22485: LD_ADDR_VAR 0 2
22489: PUSH
22490: LD_INT 0
22492: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22493: LD_VAR 0 1
22497: NOT
22498: PUSH
22499: LD_VAR 0 1
22503: PPUSH
22504: CALL_OW 266
22508: PUSH
22509: LD_INT 32
22511: PUSH
22512: LD_INT 33
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: IN
22519: NOT
22520: OR
22521: IFFALSE 22525
// exit ;
22523: GO 23758
// nat := GetNation ( tower ) ;
22525: LD_ADDR_VAR 0 11
22529: PUSH
22530: LD_VAR 0 1
22534: PPUSH
22535: CALL_OW 248
22539: ST_TO_ADDR
// side := GetSide ( tower ) ;
22540: LD_ADDR_VAR 0 15
22544: PUSH
22545: LD_VAR 0 1
22549: PPUSH
22550: CALL_OW 255
22554: ST_TO_ADDR
// x := GetX ( tower ) ;
22555: LD_ADDR_VAR 0 9
22559: PUSH
22560: LD_VAR 0 1
22564: PPUSH
22565: CALL_OW 250
22569: ST_TO_ADDR
// y := GetY ( tower ) ;
22570: LD_ADDR_VAR 0 10
22574: PUSH
22575: LD_VAR 0 1
22579: PPUSH
22580: CALL_OW 251
22584: ST_TO_ADDR
// if not x or not y then
22585: LD_VAR 0 9
22589: NOT
22590: PUSH
22591: LD_VAR 0 10
22595: NOT
22596: OR
22597: IFFALSE 22601
// exit ;
22599: GO 23758
// weapon := 0 ;
22601: LD_ADDR_VAR 0 17
22605: PUSH
22606: LD_INT 0
22608: ST_TO_ADDR
// fac_list := [ ] ;
22609: LD_ADDR_VAR 0 16
22613: PUSH
22614: EMPTY
22615: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
22616: LD_ADDR_VAR 0 5
22620: PUSH
22621: LD_VAR 0 1
22625: PPUSH
22626: CALL_OW 274
22630: PPUSH
22631: CALL 20475 0 1
22635: PPUSH
22636: LD_INT 30
22638: PUSH
22639: LD_INT 3
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PPUSH
22646: CALL_OW 72
22650: ST_TO_ADDR
// if not factories then
22651: LD_VAR 0 5
22655: NOT
22656: IFFALSE 22660
// exit ;
22658: GO 23758
// for i in factories do
22660: LD_ADDR_VAR 0 7
22664: PUSH
22665: LD_VAR 0 5
22669: PUSH
22670: FOR_IN
22671: IFFALSE 22696
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22673: LD_ADDR_VAR 0 16
22677: PUSH
22678: LD_VAR 0 16
22682: PUSH
22683: LD_VAR 0 7
22687: PPUSH
22688: CALL_OW 478
22692: UNION
22693: ST_TO_ADDR
22694: GO 22670
22696: POP
22697: POP
// if not fac_list then
22698: LD_VAR 0 16
22702: NOT
22703: IFFALSE 22707
// exit ;
22705: GO 23758
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22707: LD_ADDR_VAR 0 4
22711: PUSH
22712: LD_INT 4
22714: PUSH
22715: LD_INT 5
22717: PUSH
22718: LD_INT 9
22720: PUSH
22721: LD_INT 10
22723: PUSH
22724: LD_INT 6
22726: PUSH
22727: LD_INT 7
22729: PUSH
22730: LD_INT 11
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 27
22744: PUSH
22745: LD_INT 28
22747: PUSH
22748: LD_INT 26
22750: PUSH
22751: LD_INT 30
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 43
22762: PUSH
22763: LD_INT 44
22765: PUSH
22766: LD_INT 46
22768: PUSH
22769: LD_INT 45
22771: PUSH
22772: LD_INT 47
22774: PUSH
22775: LD_INT 49
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: LIST
22790: PUSH
22791: LD_VAR 0 11
22795: ARRAY
22796: ST_TO_ADDR
// for i in list do
22797: LD_ADDR_VAR 0 7
22801: PUSH
22802: LD_VAR 0 4
22806: PUSH
22807: FOR_IN
22808: IFFALSE 22841
// if not i in fac_list then
22810: LD_VAR 0 7
22814: PUSH
22815: LD_VAR 0 16
22819: IN
22820: NOT
22821: IFFALSE 22839
// list := list diff i ;
22823: LD_ADDR_VAR 0 4
22827: PUSH
22828: LD_VAR 0 4
22832: PUSH
22833: LD_VAR 0 7
22837: DIFF
22838: ST_TO_ADDR
22839: GO 22807
22841: POP
22842: POP
// if not list then
22843: LD_VAR 0 4
22847: NOT
22848: IFFALSE 22852
// exit ;
22850: GO 23758
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22852: LD_VAR 0 11
22856: PUSH
22857: LD_INT 3
22859: EQUAL
22860: PUSH
22861: LD_INT 49
22863: PUSH
22864: LD_VAR 0 4
22868: IN
22869: AND
22870: PUSH
22871: LD_INT 31
22873: PPUSH
22874: LD_VAR 0 15
22878: PPUSH
22879: CALL_OW 321
22883: PUSH
22884: LD_INT 2
22886: EQUAL
22887: AND
22888: IFFALSE 22948
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22890: LD_INT 22
22892: PUSH
22893: LD_VAR 0 15
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 35
22904: PUSH
22905: LD_INT 49
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 91
22914: PUSH
22915: LD_VAR 0 1
22919: PUSH
22920: LD_INT 10
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: LIST
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: PPUSH
22933: CALL_OW 69
22937: NOT
22938: IFFALSE 22948
// weapon := ru_time_lapser ;
22940: LD_ADDR_VAR 0 17
22944: PUSH
22945: LD_INT 49
22947: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22948: LD_VAR 0 11
22952: PUSH
22953: LD_INT 1
22955: PUSH
22956: LD_INT 2
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: IN
22963: PUSH
22964: LD_INT 11
22966: PUSH
22967: LD_VAR 0 4
22971: IN
22972: PUSH
22973: LD_INT 30
22975: PUSH
22976: LD_VAR 0 4
22980: IN
22981: OR
22982: AND
22983: PUSH
22984: LD_INT 6
22986: PPUSH
22987: LD_VAR 0 15
22991: PPUSH
22992: CALL_OW 321
22996: PUSH
22997: LD_INT 2
22999: EQUAL
23000: AND
23001: IFFALSE 23166
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23003: LD_INT 22
23005: PUSH
23006: LD_VAR 0 15
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 2
23017: PUSH
23018: LD_INT 35
23020: PUSH
23021: LD_INT 11
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 35
23030: PUSH
23031: LD_INT 30
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 91
23045: PUSH
23046: LD_VAR 0 1
23050: PUSH
23051: LD_INT 18
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: LIST
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: LIST
23063: PPUSH
23064: CALL_OW 69
23068: NOT
23069: PUSH
23070: LD_INT 22
23072: PUSH
23073: LD_VAR 0 15
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 2
23084: PUSH
23085: LD_INT 30
23087: PUSH
23088: LD_INT 32
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 30
23097: PUSH
23098: LD_INT 33
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 91
23112: PUSH
23113: LD_VAR 0 1
23117: PUSH
23118: LD_INT 12
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: LIST
23130: PUSH
23131: EMPTY
23132: LIST
23133: PPUSH
23134: CALL_OW 69
23138: PUSH
23139: LD_INT 2
23141: GREATER
23142: AND
23143: IFFALSE 23166
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23145: LD_ADDR_VAR 0 17
23149: PUSH
23150: LD_INT 11
23152: PUSH
23153: LD_INT 30
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_VAR 0 11
23164: ARRAY
23165: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23166: LD_VAR 0 17
23170: NOT
23171: PUSH
23172: LD_INT 40
23174: PPUSH
23175: LD_VAR 0 15
23179: PPUSH
23180: CALL_OW 321
23184: PUSH
23185: LD_INT 2
23187: EQUAL
23188: AND
23189: PUSH
23190: LD_INT 7
23192: PUSH
23193: LD_VAR 0 4
23197: IN
23198: PUSH
23199: LD_INT 28
23201: PUSH
23202: LD_VAR 0 4
23206: IN
23207: OR
23208: PUSH
23209: LD_INT 45
23211: PUSH
23212: LD_VAR 0 4
23216: IN
23217: OR
23218: AND
23219: IFFALSE 23473
// begin hex := GetHexInfo ( x , y ) ;
23221: LD_ADDR_VAR 0 3
23225: PUSH
23226: LD_VAR 0 9
23230: PPUSH
23231: LD_VAR 0 10
23235: PPUSH
23236: CALL_OW 546
23240: ST_TO_ADDR
// if hex [ 1 ] then
23241: LD_VAR 0 3
23245: PUSH
23246: LD_INT 1
23248: ARRAY
23249: IFFALSE 23253
// exit ;
23251: GO 23758
// height := hex [ 2 ] ;
23253: LD_ADDR_VAR 0 14
23257: PUSH
23258: LD_VAR 0 3
23262: PUSH
23263: LD_INT 2
23265: ARRAY
23266: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23267: LD_ADDR_VAR 0 13
23271: PUSH
23272: LD_INT 0
23274: PUSH
23275: LD_INT 2
23277: PUSH
23278: LD_INT 3
23280: PUSH
23281: LD_INT 5
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: ST_TO_ADDR
// for i in tmp do
23290: LD_ADDR_VAR 0 7
23294: PUSH
23295: LD_VAR 0 13
23299: PUSH
23300: FOR_IN
23301: IFFALSE 23471
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23303: LD_ADDR_VAR 0 8
23307: PUSH
23308: LD_VAR 0 9
23312: PPUSH
23313: LD_VAR 0 7
23317: PPUSH
23318: LD_INT 5
23320: PPUSH
23321: CALL_OW 272
23325: PUSH
23326: LD_VAR 0 10
23330: PPUSH
23331: LD_VAR 0 7
23335: PPUSH
23336: LD_INT 5
23338: PPUSH
23339: CALL_OW 273
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
23348: LD_VAR 0 8
23352: PUSH
23353: LD_INT 1
23355: ARRAY
23356: PPUSH
23357: LD_VAR 0 8
23361: PUSH
23362: LD_INT 2
23364: ARRAY
23365: PPUSH
23366: CALL_OW 488
23370: IFFALSE 23469
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
23372: LD_ADDR_VAR 0 3
23376: PUSH
23377: LD_VAR 0 8
23381: PUSH
23382: LD_INT 1
23384: ARRAY
23385: PPUSH
23386: LD_VAR 0 8
23390: PUSH
23391: LD_INT 2
23393: ARRAY
23394: PPUSH
23395: CALL_OW 546
23399: ST_TO_ADDR
// if hex [ 1 ] then
23400: LD_VAR 0 3
23404: PUSH
23405: LD_INT 1
23407: ARRAY
23408: IFFALSE 23412
// continue ;
23410: GO 23300
// h := hex [ 2 ] ;
23412: LD_ADDR_VAR 0 12
23416: PUSH
23417: LD_VAR 0 3
23421: PUSH
23422: LD_INT 2
23424: ARRAY
23425: ST_TO_ADDR
// if h + 7 < height then
23426: LD_VAR 0 12
23430: PUSH
23431: LD_INT 7
23433: PLUS
23434: PUSH
23435: LD_VAR 0 14
23439: LESS
23440: IFFALSE 23469
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23442: LD_ADDR_VAR 0 17
23446: PUSH
23447: LD_INT 7
23449: PUSH
23450: LD_INT 28
23452: PUSH
23453: LD_INT 45
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: LIST
23460: PUSH
23461: LD_VAR 0 11
23465: ARRAY
23466: ST_TO_ADDR
// break ;
23467: GO 23471
// end ; end ; end ;
23469: GO 23300
23471: POP
23472: POP
// end ; if not weapon then
23473: LD_VAR 0 17
23477: NOT
23478: IFFALSE 23640
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23480: LD_ADDR_VAR 0 4
23484: PUSH
23485: LD_VAR 0 4
23489: PUSH
23490: LD_INT 11
23492: PUSH
23493: LD_INT 30
23495: PUSH
23496: LD_INT 49
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: DIFF
23504: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
23505: LD_ADDR_VAR 0 17
23509: PUSH
23510: LD_VAR 0 4
23514: PUSH
23515: LD_INT 1
23517: PPUSH
23518: LD_VAR 0 4
23522: PPUSH
23523: CALL_OW 12
23527: ARRAY
23528: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
23529: LD_ADDR_VAR 0 13
23533: PUSH
23534: LD_INT 22
23536: PUSH
23537: LD_VAR 0 15
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 3
23548: PUSH
23549: LD_INT 35
23551: PUSH
23552: LD_INT 0
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PPUSH
23567: CALL_OW 69
23571: ST_TO_ADDR
// for i in tmp do
23572: LD_ADDR_VAR 0 7
23576: PUSH
23577: LD_VAR 0 13
23581: PUSH
23582: FOR_IN
23583: IFFALSE 23608
// list := list diff GetBWeapon ( i ) ;
23585: LD_ADDR_VAR 0 4
23589: PUSH
23590: LD_VAR 0 4
23594: PUSH
23595: LD_VAR 0 7
23599: PPUSH
23600: CALL_OW 269
23604: DIFF
23605: ST_TO_ADDR
23606: GO 23582
23608: POP
23609: POP
// if list then
23610: LD_VAR 0 4
23614: IFFALSE 23640
// weapon := list [ rand ( 1 , list ) ] ;
23616: LD_ADDR_VAR 0 17
23620: PUSH
23621: LD_VAR 0 4
23625: PUSH
23626: LD_INT 1
23628: PPUSH
23629: LD_VAR 0 4
23633: PPUSH
23634: CALL_OW 12
23638: ARRAY
23639: ST_TO_ADDR
// end ; if weapon then
23640: LD_VAR 0 17
23644: IFFALSE 23758
// begin tmp := CostOfWeapon ( weapon ) ;
23646: LD_ADDR_VAR 0 13
23650: PUSH
23651: LD_VAR 0 17
23655: PPUSH
23656: CALL_OW 451
23660: ST_TO_ADDR
// j := GetBase ( tower ) ;
23661: LD_ADDR_VAR 0 8
23665: PUSH
23666: LD_VAR 0 1
23670: PPUSH
23671: CALL_OW 274
23675: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23676: LD_VAR 0 8
23680: PPUSH
23681: LD_INT 1
23683: PPUSH
23684: CALL_OW 275
23688: PUSH
23689: LD_VAR 0 13
23693: PUSH
23694: LD_INT 1
23696: ARRAY
23697: GREATEREQUAL
23698: PUSH
23699: LD_VAR 0 8
23703: PPUSH
23704: LD_INT 2
23706: PPUSH
23707: CALL_OW 275
23711: PUSH
23712: LD_VAR 0 13
23716: PUSH
23717: LD_INT 2
23719: ARRAY
23720: GREATEREQUAL
23721: AND
23722: PUSH
23723: LD_VAR 0 8
23727: PPUSH
23728: LD_INT 3
23730: PPUSH
23731: CALL_OW 275
23735: PUSH
23736: LD_VAR 0 13
23740: PUSH
23741: LD_INT 3
23743: ARRAY
23744: GREATEREQUAL
23745: AND
23746: IFFALSE 23758
// result := weapon ;
23748: LD_ADDR_VAR 0 2
23752: PUSH
23753: LD_VAR 0 17
23757: ST_TO_ADDR
// end ; end ;
23758: LD_VAR 0 2
23762: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23763: LD_INT 0
23765: PPUSH
23766: PPUSH
// result := true ;
23767: LD_ADDR_VAR 0 3
23771: PUSH
23772: LD_INT 1
23774: ST_TO_ADDR
// if array1 = array2 then
23775: LD_VAR 0 1
23779: PUSH
23780: LD_VAR 0 2
23784: EQUAL
23785: IFFALSE 23845
// begin for i = 1 to array1 do
23787: LD_ADDR_VAR 0 4
23791: PUSH
23792: DOUBLE
23793: LD_INT 1
23795: DEC
23796: ST_TO_ADDR
23797: LD_VAR 0 1
23801: PUSH
23802: FOR_TO
23803: IFFALSE 23841
// if array1 [ i ] <> array2 [ i ] then
23805: LD_VAR 0 1
23809: PUSH
23810: LD_VAR 0 4
23814: ARRAY
23815: PUSH
23816: LD_VAR 0 2
23820: PUSH
23821: LD_VAR 0 4
23825: ARRAY
23826: NONEQUAL
23827: IFFALSE 23839
// begin result := false ;
23829: LD_ADDR_VAR 0 3
23833: PUSH
23834: LD_INT 0
23836: ST_TO_ADDR
// break ;
23837: GO 23841
// end ;
23839: GO 23802
23841: POP
23842: POP
// end else
23843: GO 23853
// result := false ;
23845: LD_ADDR_VAR 0 3
23849: PUSH
23850: LD_INT 0
23852: ST_TO_ADDR
// end ;
23853: LD_VAR 0 3
23857: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23858: LD_INT 0
23860: PPUSH
23861: PPUSH
23862: PPUSH
// pom := GetBase ( fac ) ;
23863: LD_ADDR_VAR 0 5
23867: PUSH
23868: LD_VAR 0 1
23872: PPUSH
23873: CALL_OW 274
23877: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23878: LD_ADDR_VAR 0 4
23882: PUSH
23883: LD_VAR 0 2
23887: PUSH
23888: LD_INT 1
23890: ARRAY
23891: PPUSH
23892: LD_VAR 0 2
23896: PUSH
23897: LD_INT 2
23899: ARRAY
23900: PPUSH
23901: LD_VAR 0 2
23905: PUSH
23906: LD_INT 3
23908: ARRAY
23909: PPUSH
23910: LD_VAR 0 2
23914: PUSH
23915: LD_INT 4
23917: ARRAY
23918: PPUSH
23919: CALL_OW 449
23923: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
23924: LD_VAR 0 5
23928: PPUSH
23929: LD_INT 1
23931: PPUSH
23932: CALL_OW 275
23936: PUSH
23937: LD_VAR 0 4
23941: PUSH
23942: LD_INT 1
23944: ARRAY
23945: GREATEREQUAL
23946: PUSH
23947: LD_VAR 0 5
23951: PPUSH
23952: LD_INT 2
23954: PPUSH
23955: CALL_OW 275
23959: PUSH
23960: LD_VAR 0 4
23964: PUSH
23965: LD_INT 2
23967: ARRAY
23968: GREATEREQUAL
23969: AND
23970: PUSH
23971: LD_VAR 0 5
23975: PPUSH
23976: LD_INT 3
23978: PPUSH
23979: CALL_OW 275
23983: PUSH
23984: LD_VAR 0 4
23988: PUSH
23989: LD_INT 3
23991: ARRAY
23992: GREATEREQUAL
23993: AND
23994: IFFALSE 24006
// result := true else
23996: LD_ADDR_VAR 0 3
24000: PUSH
24001: LD_INT 1
24003: ST_TO_ADDR
24004: GO 24014
// result := false ;
24006: LD_ADDR_VAR 0 3
24010: PUSH
24011: LD_INT 0
24013: ST_TO_ADDR
// end ;
24014: LD_VAR 0 3
24018: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24019: LD_INT 0
24021: PPUSH
24022: PPUSH
24023: PPUSH
24024: PPUSH
// pom := GetBase ( building ) ;
24025: LD_ADDR_VAR 0 3
24029: PUSH
24030: LD_VAR 0 1
24034: PPUSH
24035: CALL_OW 274
24039: ST_TO_ADDR
// if not pom then
24040: LD_VAR 0 3
24044: NOT
24045: IFFALSE 24049
// exit ;
24047: GO 24219
// btype := GetBType ( building ) ;
24049: LD_ADDR_VAR 0 5
24053: PUSH
24054: LD_VAR 0 1
24058: PPUSH
24059: CALL_OW 266
24063: ST_TO_ADDR
// if btype = b_armoury then
24064: LD_VAR 0 5
24068: PUSH
24069: LD_INT 4
24071: EQUAL
24072: IFFALSE 24082
// btype := b_barracks ;
24074: LD_ADDR_VAR 0 5
24078: PUSH
24079: LD_INT 5
24081: ST_TO_ADDR
// if btype = b_depot then
24082: LD_VAR 0 5
24086: PUSH
24087: LD_INT 0
24089: EQUAL
24090: IFFALSE 24100
// btype := b_warehouse ;
24092: LD_ADDR_VAR 0 5
24096: PUSH
24097: LD_INT 1
24099: ST_TO_ADDR
// if btype = b_workshop then
24100: LD_VAR 0 5
24104: PUSH
24105: LD_INT 2
24107: EQUAL
24108: IFFALSE 24118
// btype := b_factory ;
24110: LD_ADDR_VAR 0 5
24114: PUSH
24115: LD_INT 3
24117: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24118: LD_ADDR_VAR 0 4
24122: PUSH
24123: LD_VAR 0 5
24127: PPUSH
24128: LD_VAR 0 1
24132: PPUSH
24133: CALL_OW 248
24137: PPUSH
24138: CALL_OW 450
24142: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24143: LD_ADDR_VAR 0 2
24147: PUSH
24148: LD_VAR 0 3
24152: PPUSH
24153: LD_INT 1
24155: PPUSH
24156: CALL_OW 275
24160: PUSH
24161: LD_VAR 0 4
24165: PUSH
24166: LD_INT 1
24168: ARRAY
24169: GREATEREQUAL
24170: PUSH
24171: LD_VAR 0 3
24175: PPUSH
24176: LD_INT 2
24178: PPUSH
24179: CALL_OW 275
24183: PUSH
24184: LD_VAR 0 4
24188: PUSH
24189: LD_INT 2
24191: ARRAY
24192: GREATEREQUAL
24193: AND
24194: PUSH
24195: LD_VAR 0 3
24199: PPUSH
24200: LD_INT 3
24202: PPUSH
24203: CALL_OW 275
24207: PUSH
24208: LD_VAR 0 4
24212: PUSH
24213: LD_INT 3
24215: ARRAY
24216: GREATEREQUAL
24217: AND
24218: ST_TO_ADDR
// end ;
24219: LD_VAR 0 2
24223: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24224: LD_INT 0
24226: PPUSH
24227: PPUSH
24228: PPUSH
// pom := GetBase ( building ) ;
24229: LD_ADDR_VAR 0 4
24233: PUSH
24234: LD_VAR 0 1
24238: PPUSH
24239: CALL_OW 274
24243: ST_TO_ADDR
// if not pom then
24244: LD_VAR 0 4
24248: NOT
24249: IFFALSE 24253
// exit ;
24251: GO 24354
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24253: LD_ADDR_VAR 0 5
24257: PUSH
24258: LD_VAR 0 2
24262: PPUSH
24263: LD_VAR 0 1
24267: PPUSH
24268: CALL_OW 248
24272: PPUSH
24273: CALL_OW 450
24277: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24278: LD_ADDR_VAR 0 3
24282: PUSH
24283: LD_VAR 0 4
24287: PPUSH
24288: LD_INT 1
24290: PPUSH
24291: CALL_OW 275
24295: PUSH
24296: LD_VAR 0 5
24300: PUSH
24301: LD_INT 1
24303: ARRAY
24304: GREATEREQUAL
24305: PUSH
24306: LD_VAR 0 4
24310: PPUSH
24311: LD_INT 2
24313: PPUSH
24314: CALL_OW 275
24318: PUSH
24319: LD_VAR 0 5
24323: PUSH
24324: LD_INT 2
24326: ARRAY
24327: GREATEREQUAL
24328: AND
24329: PUSH
24330: LD_VAR 0 4
24334: PPUSH
24335: LD_INT 3
24337: PPUSH
24338: CALL_OW 275
24342: PUSH
24343: LD_VAR 0 5
24347: PUSH
24348: LD_INT 3
24350: ARRAY
24351: GREATEREQUAL
24352: AND
24353: ST_TO_ADDR
// end ;
24354: LD_VAR 0 3
24358: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes ; begin
24359: LD_INT 0
24361: PPUSH
24362: PPUSH
24363: PPUSH
24364: PPUSH
24365: PPUSH
24366: PPUSH
24367: PPUSH
// if not base or not btype or not x or not y then
24368: LD_VAR 0 1
24372: NOT
24373: PUSH
24374: LD_VAR 0 2
24378: NOT
24379: OR
24380: PUSH
24381: LD_VAR 0 3
24385: NOT
24386: OR
24387: PUSH
24388: LD_VAR 0 4
24392: NOT
24393: OR
24394: IFFALSE 24398
// exit ;
24396: GO 24670
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
24398: LD_ADDR_VAR 0 12
24402: PUSH
24403: LD_VAR 0 2
24407: PPUSH
24408: LD_VAR 0 3
24412: PPUSH
24413: LD_VAR 0 4
24417: PPUSH
24418: LD_VAR 0 5
24422: PPUSH
24423: LD_VAR 0 1
24427: PUSH
24428: LD_INT 1
24430: ARRAY
24431: PPUSH
24432: CALL_OW 248
24436: PPUSH
24437: LD_INT 0
24439: PPUSH
24440: CALL 25453 0 6
24444: ST_TO_ADDR
// if not hexes then
24445: LD_VAR 0 12
24449: NOT
24450: IFFALSE 24454
// exit ;
24452: GO 24670
// for i = 1 to hexes do
24454: LD_ADDR_VAR 0 7
24458: PUSH
24459: DOUBLE
24460: LD_INT 1
24462: DEC
24463: ST_TO_ADDR
24464: LD_VAR 0 12
24468: PUSH
24469: FOR_TO
24470: IFFALSE 24668
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24472: LD_ADDR_VAR 0 11
24476: PUSH
24477: LD_VAR 0 12
24481: PUSH
24482: LD_VAR 0 7
24486: ARRAY
24487: PUSH
24488: LD_INT 1
24490: ARRAY
24491: PPUSH
24492: LD_VAR 0 12
24496: PUSH
24497: LD_VAR 0 7
24501: ARRAY
24502: PUSH
24503: LD_INT 2
24505: ARRAY
24506: PPUSH
24507: CALL_OW 428
24511: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
24512: LD_VAR 0 11
24516: NOT
24517: PUSH
24518: LD_VAR 0 11
24522: PPUSH
24523: CALL_OW 247
24527: PUSH
24528: LD_INT 3
24530: EQUAL
24531: OR
24532: IFFALSE 24536
// continue ;
24534: GO 24469
// for j = 0 to 5 do
24536: LD_ADDR_VAR 0 8
24540: PUSH
24541: DOUBLE
24542: LD_INT 0
24544: DEC
24545: ST_TO_ADDR
24546: LD_INT 5
24548: PUSH
24549: FOR_TO
24550: IFFALSE 24664
// begin _x := ShiftX ( GetX ( tmp ) , j , 3 ) ;
24552: LD_ADDR_VAR 0 9
24556: PUSH
24557: LD_VAR 0 11
24561: PPUSH
24562: CALL_OW 250
24566: PPUSH
24567: LD_VAR 0 8
24571: PPUSH
24572: LD_INT 3
24574: PPUSH
24575: CALL_OW 272
24579: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 3 ) ;
24580: LD_ADDR_VAR 0 10
24584: PUSH
24585: LD_VAR 0 11
24589: PPUSH
24590: CALL_OW 251
24594: PPUSH
24595: LD_VAR 0 8
24599: PPUSH
24600: LD_INT 3
24602: PPUSH
24603: CALL_OW 273
24607: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24608: LD_VAR 0 9
24612: PPUSH
24613: LD_VAR 0 10
24617: PPUSH
24618: CALL_OW 488
24622: PUSH
24623: LD_VAR 0 9
24627: PPUSH
24628: LD_VAR 0 10
24632: PPUSH
24633: CALL_OW 428
24637: NOT
24638: AND
24639: IFFALSE 24662
// begin ComMoveXY ( tmp , _x , _y ) ;
24641: LD_VAR 0 11
24645: PPUSH
24646: LD_VAR 0 9
24650: PPUSH
24651: LD_VAR 0 10
24655: PPUSH
24656: CALL_OW 111
// break ;
24660: GO 24664
// end ; end ;
24662: GO 24549
24664: POP
24665: POP
// end ;
24666: GO 24469
24668: POP
24669: POP
// end ;
24670: LD_VAR 0 6
24674: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
24675: LD_INT 0
24677: PPUSH
24678: PPUSH
24679: PPUSH
24680: PPUSH
24681: PPUSH
24682: PPUSH
24683: PPUSH
24684: PPUSH
24685: PPUSH
// result := false ;
24686: LD_ADDR_VAR 0 6
24690: PUSH
24691: LD_INT 0
24693: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24694: LD_VAR 0 1
24698: NOT
24699: PUSH
24700: LD_VAR 0 1
24704: PPUSH
24705: CALL_OW 266
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: IN
24720: NOT
24721: OR
24722: PUSH
24723: LD_VAR 0 2
24727: NOT
24728: OR
24729: PUSH
24730: LD_VAR 0 5
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: LD_INT 1
24740: PUSH
24741: LD_INT 2
24743: PUSH
24744: LD_INT 3
24746: PUSH
24747: LD_INT 4
24749: PUSH
24750: LD_INT 5
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: IN
24761: NOT
24762: OR
24763: PUSH
24764: LD_VAR 0 3
24768: PPUSH
24769: LD_VAR 0 4
24773: PPUSH
24774: CALL_OW 488
24778: NOT
24779: OR
24780: IFFALSE 24784
// exit ;
24782: GO 25448
// pom := GetBase ( bdepot ) ;
24784: LD_ADDR_VAR 0 9
24788: PUSH
24789: LD_VAR 0 1
24793: PPUSH
24794: CALL_OW 274
24798: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
24799: LD_ADDR_VAR 0 10
24803: PUSH
24804: LD_VAR 0 2
24808: PPUSH
24809: LD_VAR 0 1
24813: PPUSH
24814: CALL_OW 248
24818: PPUSH
24819: CALL_OW 450
24823: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24824: LD_VAR 0 9
24828: PPUSH
24829: LD_INT 1
24831: PPUSH
24832: CALL_OW 275
24836: PUSH
24837: LD_VAR 0 10
24841: PUSH
24842: LD_INT 1
24844: ARRAY
24845: GREATEREQUAL
24846: PUSH
24847: LD_VAR 0 9
24851: PPUSH
24852: LD_INT 2
24854: PPUSH
24855: CALL_OW 275
24859: PUSH
24860: LD_VAR 0 10
24864: PUSH
24865: LD_INT 2
24867: ARRAY
24868: GREATEREQUAL
24869: AND
24870: PUSH
24871: LD_VAR 0 9
24875: PPUSH
24876: LD_INT 3
24878: PPUSH
24879: CALL_OW 275
24883: PUSH
24884: LD_VAR 0 10
24888: PUSH
24889: LD_INT 3
24891: ARRAY
24892: GREATEREQUAL
24893: AND
24894: NOT
24895: IFFALSE 24899
// exit ;
24897: GO 25448
// if GetBType ( bdepot ) = b_depot then
24899: LD_VAR 0 1
24903: PPUSH
24904: CALL_OW 266
24908: PUSH
24909: LD_INT 0
24911: EQUAL
24912: IFFALSE 24924
// dist := 28 else
24914: LD_ADDR_VAR 0 13
24918: PUSH
24919: LD_INT 28
24921: ST_TO_ADDR
24922: GO 24932
// dist := 36 ;
24924: LD_ADDR_VAR 0 13
24928: PUSH
24929: LD_INT 36
24931: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
24932: LD_VAR 0 1
24936: PPUSH
24937: LD_VAR 0 3
24941: PPUSH
24942: LD_VAR 0 4
24946: PPUSH
24947: CALL_OW 297
24951: PUSH
24952: LD_VAR 0 13
24956: GREATER
24957: IFFALSE 24961
// exit ;
24959: GO 25448
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
24961: LD_ADDR_VAR 0 11
24965: PUSH
24966: LD_VAR 0 2
24970: PPUSH
24971: LD_VAR 0 3
24975: PPUSH
24976: LD_VAR 0 4
24980: PPUSH
24981: LD_VAR 0 5
24985: PPUSH
24986: LD_VAR 0 1
24990: PPUSH
24991: CALL_OW 248
24995: PPUSH
24996: LD_INT 0
24998: PPUSH
24999: CALL 25453 0 6
25003: ST_TO_ADDR
// if not hexes then
25004: LD_VAR 0 11
25008: NOT
25009: IFFALSE 25013
// exit ;
25011: GO 25448
// hex := GetHexInfo ( x , y ) ;
25013: LD_ADDR_VAR 0 14
25017: PUSH
25018: LD_VAR 0 3
25022: PPUSH
25023: LD_VAR 0 4
25027: PPUSH
25028: CALL_OW 546
25032: ST_TO_ADDR
// if hex [ 1 ] then
25033: LD_VAR 0 14
25037: PUSH
25038: LD_INT 1
25040: ARRAY
25041: IFFALSE 25045
// exit ;
25043: GO 25448
// height := hex [ 2 ] ;
25045: LD_ADDR_VAR 0 12
25049: PUSH
25050: LD_VAR 0 14
25054: PUSH
25055: LD_INT 2
25057: ARRAY
25058: ST_TO_ADDR
// for i = 1 to hexes do
25059: LD_ADDR_VAR 0 7
25063: PUSH
25064: DOUBLE
25065: LD_INT 1
25067: DEC
25068: ST_TO_ADDR
25069: LD_VAR 0 11
25073: PUSH
25074: FOR_TO
25075: IFFALSE 25403
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25077: LD_VAR 0 11
25081: PUSH
25082: LD_VAR 0 7
25086: ARRAY
25087: PUSH
25088: LD_INT 1
25090: ARRAY
25091: PPUSH
25092: LD_VAR 0 11
25096: PUSH
25097: LD_VAR 0 7
25101: ARRAY
25102: PUSH
25103: LD_INT 2
25105: ARRAY
25106: PPUSH
25107: CALL_OW 488
25111: NOT
25112: IFFALSE 25116
// continue ;
25114: GO 25074
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25116: LD_ADDR_VAR 0 8
25120: PUSH
25121: LD_VAR 0 11
25125: PUSH
25126: LD_VAR 0 7
25130: ARRAY
25131: PUSH
25132: LD_INT 1
25134: ARRAY
25135: PPUSH
25136: LD_VAR 0 11
25140: PUSH
25141: LD_VAR 0 7
25145: ARRAY
25146: PUSH
25147: LD_INT 2
25149: ARRAY
25150: PPUSH
25151: CALL_OW 546
25155: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25156: LD_VAR 0 8
25160: PUSH
25161: LD_INT 1
25163: ARRAY
25164: PUSH
25165: LD_VAR 0 8
25169: PUSH
25170: LD_INT 2
25172: ARRAY
25173: PUSH
25174: LD_VAR 0 12
25178: PUSH
25179: LD_INT 2
25181: PLUS
25182: GREATER
25183: OR
25184: PUSH
25185: LD_VAR 0 8
25189: PUSH
25190: LD_INT 2
25192: ARRAY
25193: PUSH
25194: LD_VAR 0 12
25198: PUSH
25199: LD_INT 2
25201: MINUS
25202: LESS
25203: OR
25204: PUSH
25205: LD_VAR 0 8
25209: PUSH
25210: LD_INT 3
25212: ARRAY
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: LD_INT 8
25219: PUSH
25220: LD_INT 9
25222: PUSH
25223: LD_INT 10
25225: PUSH
25226: LD_INT 11
25228: PUSH
25229: LD_INT 12
25231: PUSH
25232: LD_INT 13
25234: PUSH
25235: LD_INT 16
25237: PUSH
25238: LD_INT 17
25240: PUSH
25241: LD_INT 18
25243: PUSH
25244: LD_INT 19
25246: PUSH
25247: LD_INT 20
25249: PUSH
25250: LD_INT 21
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: IN
25268: NOT
25269: OR
25270: PUSH
25271: LD_VAR 0 8
25275: PUSH
25276: LD_INT 5
25278: ARRAY
25279: NOT
25280: OR
25281: PUSH
25282: LD_VAR 0 8
25286: PUSH
25287: LD_INT 6
25289: ARRAY
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: LD_INT 2
25296: PUSH
25297: LD_INT 7
25299: PUSH
25300: LD_INT 9
25302: PUSH
25303: LD_INT 10
25305: PUSH
25306: LD_INT 11
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: IN
25317: NOT
25318: OR
25319: PUSH
25320: LD_VAR 0 11
25324: PUSH
25325: LD_VAR 0 7
25329: ARRAY
25330: PUSH
25331: LD_INT 1
25333: ARRAY
25334: PPUSH
25335: LD_VAR 0 11
25339: PUSH
25340: LD_VAR 0 7
25344: ARRAY
25345: PUSH
25346: LD_INT 2
25348: ARRAY
25349: PPUSH
25350: CALL_OW 428
25354: PUSH
25355: LD_INT 0
25357: GREATER
25358: OR
25359: PUSH
25360: LD_VAR 0 11
25364: PUSH
25365: LD_VAR 0 7
25369: ARRAY
25370: PUSH
25371: LD_INT 1
25373: ARRAY
25374: PPUSH
25375: LD_VAR 0 11
25379: PUSH
25380: LD_VAR 0 7
25384: ARRAY
25385: PUSH
25386: LD_INT 2
25388: ARRAY
25389: PPUSH
25390: CALL_OW 351
25394: OR
25395: IFFALSE 25401
// exit ;
25397: POP
25398: POP
25399: GO 25448
// end ;
25401: GO 25074
25403: POP
25404: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
25405: LD_VAR 0 1
25409: PPUSH
25410: CALL_OW 255
25414: PPUSH
25415: LD_VAR 0 3
25419: PPUSH
25420: LD_VAR 0 4
25424: PPUSH
25425: LD_INT 20
25427: PPUSH
25428: CALL 18659 0 4
25432: PUSH
25433: LD_INT 4
25435: ARRAY
25436: IFFALSE 25440
// exit ;
25438: GO 25448
// result := true ;
25440: LD_ADDR_VAR 0 6
25444: PUSH
25445: LD_INT 1
25447: ST_TO_ADDR
// end ;
25448: LD_VAR 0 6
25452: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
25453: LD_INT 0
25455: PPUSH
25456: PPUSH
25457: PPUSH
25458: PPUSH
25459: PPUSH
25460: PPUSH
25461: PPUSH
25462: PPUSH
25463: PPUSH
25464: PPUSH
25465: PPUSH
25466: PPUSH
25467: PPUSH
25468: PPUSH
25469: PPUSH
25470: PPUSH
25471: PPUSH
25472: PPUSH
25473: PPUSH
25474: PPUSH
25475: PPUSH
25476: PPUSH
25477: PPUSH
25478: PPUSH
25479: PPUSH
25480: PPUSH
25481: PPUSH
25482: PPUSH
25483: PPUSH
25484: PPUSH
25485: PPUSH
25486: PPUSH
25487: PPUSH
25488: PPUSH
25489: PPUSH
25490: PPUSH
25491: PPUSH
25492: PPUSH
25493: PPUSH
25494: PPUSH
25495: PPUSH
25496: PPUSH
25497: PPUSH
25498: PPUSH
25499: PPUSH
25500: PPUSH
25501: PPUSH
25502: PPUSH
25503: PPUSH
25504: PPUSH
25505: PPUSH
25506: PPUSH
25507: PPUSH
25508: PPUSH
25509: PPUSH
25510: PPUSH
25511: PPUSH
25512: PPUSH
// result = [ ] ;
25513: LD_ADDR_VAR 0 7
25517: PUSH
25518: EMPTY
25519: ST_TO_ADDR
// temp_list = [ ] ;
25520: LD_ADDR_VAR 0 9
25524: PUSH
25525: EMPTY
25526: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25527: LD_VAR 0 4
25531: PUSH
25532: LD_INT 0
25534: PUSH
25535: LD_INT 1
25537: PUSH
25538: LD_INT 2
25540: PUSH
25541: LD_INT 3
25543: PUSH
25544: LD_INT 4
25546: PUSH
25547: LD_INT 5
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: IN
25558: NOT
25559: PUSH
25560: LD_VAR 0 1
25564: PUSH
25565: LD_INT 0
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: IN
25575: PUSH
25576: LD_VAR 0 5
25580: PUSH
25581: LD_INT 1
25583: PUSH
25584: LD_INT 2
25586: PUSH
25587: LD_INT 3
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: LIST
25594: IN
25595: NOT
25596: AND
25597: OR
25598: IFFALSE 25602
// exit ;
25600: GO 43987
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25602: LD_VAR 0 1
25606: PUSH
25607: LD_INT 6
25609: PUSH
25610: LD_INT 7
25612: PUSH
25613: LD_INT 8
25615: PUSH
25616: LD_INT 13
25618: PUSH
25619: LD_INT 12
25621: PUSH
25622: LD_INT 15
25624: PUSH
25625: LD_INT 11
25627: PUSH
25628: LD_INT 14
25630: PUSH
25631: LD_INT 10
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: IN
25645: IFFALSE 25655
// btype = b_lab ;
25647: LD_ADDR_VAR 0 1
25651: PUSH
25652: LD_INT 6
25654: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25655: LD_VAR 0 6
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: LD_INT 2
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: LIST
25673: IN
25674: NOT
25675: PUSH
25676: LD_VAR 0 1
25680: PUSH
25681: LD_INT 0
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: LD_INT 2
25689: PUSH
25690: LD_INT 3
25692: PUSH
25693: LD_INT 6
25695: PUSH
25696: LD_INT 36
25698: PUSH
25699: LD_INT 4
25701: PUSH
25702: LD_INT 5
25704: PUSH
25705: LD_INT 31
25707: PUSH
25708: LD_INT 32
25710: PUSH
25711: LD_INT 33
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: IN
25727: NOT
25728: PUSH
25729: LD_VAR 0 6
25733: PUSH
25734: LD_INT 1
25736: EQUAL
25737: AND
25738: OR
25739: PUSH
25740: LD_VAR 0 1
25744: PUSH
25745: LD_INT 2
25747: PUSH
25748: LD_INT 3
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: IN
25755: NOT
25756: PUSH
25757: LD_VAR 0 6
25761: PUSH
25762: LD_INT 2
25764: EQUAL
25765: AND
25766: OR
25767: IFFALSE 25777
// mode = 0 ;
25769: LD_ADDR_VAR 0 6
25773: PUSH
25774: LD_INT 0
25776: ST_TO_ADDR
// case mode of 0 :
25777: LD_VAR 0 6
25781: PUSH
25782: LD_INT 0
25784: DOUBLE
25785: EQUAL
25786: IFTRUE 25790
25788: GO 37243
25790: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25791: LD_ADDR_VAR 0 11
25795: PUSH
25796: LD_INT 0
25798: PUSH
25799: LD_INT 0
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: LD_INT 1
25811: NEG
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 1
25829: PUSH
25830: LD_INT 1
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 0
25839: PUSH
25840: LD_INT 1
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 1
25849: NEG
25850: PUSH
25851: LD_INT 0
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 1
25860: NEG
25861: PUSH
25862: LD_INT 1
25864: NEG
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 1
25872: NEG
25873: PUSH
25874: LD_INT 2
25876: NEG
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: LD_INT 2
25887: NEG
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: LD_INT 1
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 1
25906: PUSH
25907: LD_INT 2
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: LD_INT 2
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: LD_INT 1
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: LD_INT 3
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: LD_INT 3
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: LD_INT 2
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25984: LD_ADDR_VAR 0 12
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: LD_INT 0
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 0
26001: PUSH
26002: LD_INT 1
26004: NEG
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: LD_INT 0
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: LD_INT 1
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: LD_INT 1
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 1
26042: NEG
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 1
26053: NEG
26054: PUSH
26055: LD_INT 1
26057: NEG
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 1
26065: PUSH
26066: LD_INT 1
26068: NEG
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 2
26076: PUSH
26077: LD_INT 0
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 2
26086: PUSH
26087: LD_INT 1
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 1
26096: NEG
26097: PUSH
26098: LD_INT 1
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 2
26107: NEG
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 2
26118: NEG
26119: PUSH
26120: LD_INT 1
26122: NEG
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 2
26130: NEG
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 3
26141: NEG
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 3
26152: NEG
26153: PUSH
26154: LD_INT 1
26156: NEG
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26180: LD_ADDR_VAR 0 13
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 0
26197: PUSH
26198: LD_INT 1
26200: NEG
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: LD_INT 0
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: LD_INT 1
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 0
26228: PUSH
26229: LD_INT 1
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 1
26238: NEG
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: LD_INT 1
26253: NEG
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 1
26261: NEG
26262: PUSH
26263: LD_INT 2
26265: NEG
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 2
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 2
26283: PUSH
26284: LD_INT 2
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 1
26293: PUSH
26294: LD_INT 2
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 2
26303: NEG
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 2
26315: NEG
26316: PUSH
26317: LD_INT 2
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 2
26327: NEG
26328: PUSH
26329: LD_INT 3
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 3
26339: NEG
26340: PUSH
26341: LD_INT 2
26343: NEG
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 3
26351: NEG
26352: PUSH
26353: LD_INT 3
26355: NEG
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26379: LD_ADDR_VAR 0 14
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 0
26396: PUSH
26397: LD_INT 1
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: LD_INT 0
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 1
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 0
26427: PUSH
26428: LD_INT 1
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 1
26437: NEG
26438: PUSH
26439: LD_INT 0
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: NEG
26449: PUSH
26450: LD_INT 1
26452: NEG
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: LD_INT 2
26464: NEG
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: LD_INT 2
26475: NEG
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: LD_INT 1
26486: NEG
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 1
26494: PUSH
26495: LD_INT 2
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 0
26504: PUSH
26505: LD_INT 2
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 1
26514: NEG
26515: PUSH
26516: LD_INT 1
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 1
26525: NEG
26526: PUSH
26527: LD_INT 3
26529: NEG
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 0
26537: PUSH
26538: LD_INT 3
26540: NEG
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 1
26548: PUSH
26549: LD_INT 2
26551: NEG
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26575: LD_ADDR_VAR 0 15
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 0
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 1
26644: NEG
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 2
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 2
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: LD_INT 1
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 2
26698: NEG
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 2
26709: NEG
26710: PUSH
26711: LD_INT 1
26713: NEG
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 2
26721: PUSH
26722: LD_INT 1
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 3
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 3
26742: PUSH
26743: LD_INT 1
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26768: LD_ADDR_VAR 0 16
26772: PUSH
26773: LD_INT 0
26775: PUSH
26776: LD_INT 0
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 0
26785: PUSH
26786: LD_INT 1
26788: NEG
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 1
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 1
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: LD_INT 1
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 1
26826: NEG
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: PUSH
26839: LD_INT 1
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 1
26849: NEG
26850: PUSH
26851: LD_INT 2
26853: NEG
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 2
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 2
26871: PUSH
26872: LD_INT 2
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 1
26881: PUSH
26882: LD_INT 2
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 2
26891: NEG
26892: PUSH
26893: LD_INT 1
26895: NEG
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 2
26903: NEG
26904: PUSH
26905: LD_INT 2
26907: NEG
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 3
26915: PUSH
26916: LD_INT 2
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 3
26925: PUSH
26926: LD_INT 3
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 2
26935: PUSH
26936: LD_INT 3
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26961: LD_ADDR_VAR 0 17
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: LD_INT 1
26981: NEG
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: LD_INT 1
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 0
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 1
27019: NEG
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: NEG
27031: PUSH
27032: LD_INT 1
27034: NEG
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: LD_INT 2
27046: NEG
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 2
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 2
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 2
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 2
27096: PUSH
27097: LD_INT 2
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 1
27106: PUSH
27107: LD_INT 2
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 0
27116: PUSH
27117: LD_INT 2
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 1
27126: NEG
27127: PUSH
27128: LD_INT 1
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 2
27137: NEG
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 2
27148: NEG
27149: PUSH
27150: LD_INT 1
27152: NEG
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 2
27160: NEG
27161: PUSH
27162: LD_INT 2
27164: NEG
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27191: LD_ADDR_VAR 0 18
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: LD_INT 0
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: LD_INT 1
27211: NEG
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 0
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 1
27249: NEG
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 1
27260: NEG
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: LD_INT 2
27276: NEG
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: LD_INT 2
27287: NEG
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: LD_INT 1
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 2
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 2
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 2
27326: PUSH
27327: LD_INT 2
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: LD_INT 2
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 0
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 1
27356: NEG
27357: PUSH
27358: LD_INT 1
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 2
27367: NEG
27368: PUSH
27369: LD_INT 0
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 2
27378: NEG
27379: PUSH
27380: LD_INT 1
27382: NEG
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 2
27390: NEG
27391: PUSH
27392: LD_INT 2
27394: NEG
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27421: LD_ADDR_VAR 0 19
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: LD_INT 0
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 0
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: LD_INT 1
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: LD_INT 1
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: LD_INT 2
27506: NEG
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: LD_INT 2
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: PUSH
27526: LD_INT 1
27528: NEG
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 2
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 2
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: LD_INT 2
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: LD_INT 2
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 0
27576: PUSH
27577: LD_INT 2
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 1
27586: NEG
27587: PUSH
27588: LD_INT 1
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 2
27608: NEG
27609: PUSH
27610: LD_INT 1
27612: NEG
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 2
27620: NEG
27621: PUSH
27622: LD_INT 2
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27651: LD_ADDR_VAR 0 20
27655: PUSH
27656: LD_INT 0
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 0
27668: PUSH
27669: LD_INT 1
27671: NEG
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: LD_INT 0
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 1
27689: PUSH
27690: LD_INT 1
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 0
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 1
27709: NEG
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 1
27720: NEG
27721: PUSH
27722: LD_INT 1
27724: NEG
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: LD_INT 2
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 0
27744: PUSH
27745: LD_INT 2
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: LD_INT 1
27758: NEG
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 2
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 2
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 2
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 1
27796: PUSH
27797: LD_INT 2
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: LD_INT 2
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 1
27816: NEG
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 2
27827: NEG
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 2
27838: NEG
27839: PUSH
27840: LD_INT 1
27842: NEG
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 2
27850: NEG
27851: PUSH
27852: LD_INT 2
27854: NEG
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27881: LD_ADDR_VAR 0 21
27885: PUSH
27886: LD_INT 0
27888: PUSH
27889: LD_INT 0
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 0
27898: PUSH
27899: LD_INT 1
27901: NEG
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 1
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 1
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 0
27929: PUSH
27930: LD_INT 1
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 1
27939: NEG
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 1
27950: NEG
27951: PUSH
27952: LD_INT 1
27954: NEG
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 1
27962: NEG
27963: PUSH
27964: LD_INT 2
27966: NEG
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: LD_INT 2
27977: NEG
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: PUSH
27986: LD_INT 1
27988: NEG
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 2
27996: PUSH
27997: LD_INT 0
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 2
28006: PUSH
28007: LD_INT 1
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 2
28016: PUSH
28017: LD_INT 2
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 1
28026: PUSH
28027: LD_INT 2
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 0
28036: PUSH
28037: LD_INT 2
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 1
28046: NEG
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 2
28057: NEG
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 2
28068: NEG
28069: PUSH
28070: LD_INT 1
28072: NEG
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 2
28080: NEG
28081: PUSH
28082: LD_INT 2
28084: NEG
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28111: LD_ADDR_VAR 0 22
28115: PUSH
28116: LD_INT 0
28118: PUSH
28119: LD_INT 0
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 1
28139: PUSH
28140: LD_INT 0
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 1
28149: PUSH
28150: LD_INT 1
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 0
28159: PUSH
28160: LD_INT 1
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: NEG
28170: PUSH
28171: LD_INT 0
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 1
28180: NEG
28181: PUSH
28182: LD_INT 1
28184: NEG
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: NEG
28193: PUSH
28194: LD_INT 2
28196: NEG
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 0
28204: PUSH
28205: LD_INT 2
28207: NEG
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: LD_INT 1
28218: NEG
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 2
28226: PUSH
28227: LD_INT 0
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 2
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: LD_INT 2
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 1
28256: PUSH
28257: LD_INT 2
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 0
28266: PUSH
28267: LD_INT 2
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 1
28276: NEG
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 2
28287: NEG
28288: PUSH
28289: LD_INT 0
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 2
28298: NEG
28299: PUSH
28300: LD_INT 1
28302: NEG
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 2
28310: NEG
28311: PUSH
28312: LD_INT 2
28314: NEG
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28341: LD_ADDR_VAR 0 23
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: LD_INT 0
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 0
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: LD_INT 0
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 0
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 1
28399: NEG
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 1
28410: NEG
28411: PUSH
28412: LD_INT 1
28414: NEG
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 1
28422: NEG
28423: PUSH
28424: LD_INT 2
28426: NEG
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 0
28434: PUSH
28435: LD_INT 2
28437: NEG
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: PUSH
28446: LD_INT 1
28448: NEG
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 2
28466: PUSH
28467: LD_INT 1
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 2
28476: PUSH
28477: LD_INT 2
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 1
28486: PUSH
28487: LD_INT 2
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 0
28496: PUSH
28497: LD_INT 2
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 1
28506: NEG
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 2
28517: NEG
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 2
28528: NEG
28529: PUSH
28530: LD_INT 1
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 2
28540: NEG
28541: PUSH
28542: LD_INT 2
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 2
28552: NEG
28553: PUSH
28554: LD_INT 3
28556: NEG
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 1
28564: NEG
28565: PUSH
28566: LD_INT 3
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: LD_INT 2
28579: NEG
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 2
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28621: LD_ADDR_VAR 0 24
28625: PUSH
28626: LD_INT 0
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 0
28638: PUSH
28639: LD_INT 1
28641: NEG
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: LD_INT 0
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 1
28659: PUSH
28660: LD_INT 1
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 0
28669: PUSH
28670: LD_INT 1
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PUSH
28692: LD_INT 1
28694: NEG
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 1
28702: NEG
28703: PUSH
28704: LD_INT 2
28706: NEG
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 0
28714: PUSH
28715: LD_INT 2
28717: NEG
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: LD_INT 1
28728: NEG
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 2
28736: PUSH
28737: LD_INT 0
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 2
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 2
28756: PUSH
28757: LD_INT 2
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: LD_INT 2
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: LD_INT 2
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: NEG
28787: PUSH
28788: LD_INT 1
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 2
28797: NEG
28798: PUSH
28799: LD_INT 0
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 2
28808: NEG
28809: PUSH
28810: LD_INT 1
28812: NEG
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 2
28820: NEG
28821: PUSH
28822: LD_INT 2
28824: NEG
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: LD_INT 2
28835: NEG
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 2
28843: PUSH
28844: LD_INT 1
28846: NEG
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 3
28854: PUSH
28855: LD_INT 1
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 3
28864: PUSH
28865: LD_INT 2
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28897: LD_ADDR_VAR 0 25
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 0
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 1
28925: PUSH
28926: LD_INT 0
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: LD_INT 1
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 0
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: LD_INT 0
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: NEG
28967: PUSH
28968: LD_INT 1
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: NEG
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 0
28990: PUSH
28991: LD_INT 2
28993: NEG
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 1
29001: PUSH
29002: LD_INT 1
29004: NEG
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 2
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 2
29022: PUSH
29023: LD_INT 1
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 2
29032: PUSH
29033: LD_INT 2
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: LD_INT 2
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 0
29052: PUSH
29053: LD_INT 2
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 1
29062: NEG
29063: PUSH
29064: LD_INT 1
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 2
29073: NEG
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 2
29084: NEG
29085: PUSH
29086: LD_INT 1
29088: NEG
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 2
29096: NEG
29097: PUSH
29098: LD_INT 2
29100: NEG
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 3
29108: PUSH
29109: LD_INT 1
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 3
29118: PUSH
29119: LD_INT 2
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 2
29128: PUSH
29129: LD_INT 3
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 1
29138: PUSH
29139: LD_INT 3
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29171: LD_ADDR_VAR 0 26
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: LD_INT 1
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: LD_INT 0
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: LD_INT 1
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 1
29229: NEG
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 1
29240: NEG
29241: PUSH
29242: LD_INT 1
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: LD_INT 2
29256: NEG
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: LD_INT 2
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: LD_INT 1
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 2
29286: PUSH
29287: LD_INT 0
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 2
29296: PUSH
29297: LD_INT 1
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 2
29306: PUSH
29307: LD_INT 2
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 0
29326: PUSH
29327: LD_INT 2
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 1
29336: NEG
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 2
29347: NEG
29348: PUSH
29349: LD_INT 0
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 2
29358: NEG
29359: PUSH
29360: LD_INT 1
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 2
29370: NEG
29371: PUSH
29372: LD_INT 2
29374: NEG
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 2
29382: PUSH
29383: LD_INT 3
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 1
29392: PUSH
29393: LD_INT 3
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 1
29402: NEG
29403: PUSH
29404: LD_INT 2
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 2
29413: NEG
29414: PUSH
29415: LD_INT 1
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29447: LD_ADDR_VAR 0 27
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: LD_INT 0
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 0
29464: PUSH
29465: LD_INT 1
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: LD_INT 0
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: LD_INT 1
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 0
29495: PUSH
29496: LD_INT 1
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 1
29505: NEG
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: NEG
29517: PUSH
29518: LD_INT 1
29520: NEG
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 1
29528: NEG
29529: PUSH
29530: LD_INT 2
29532: NEG
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 0
29540: PUSH
29541: LD_INT 2
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 1
29551: PUSH
29552: LD_INT 1
29554: NEG
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 2
29562: PUSH
29563: LD_INT 0
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 2
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: LD_INT 2
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 1
29592: PUSH
29593: LD_INT 2
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 0
29602: PUSH
29603: LD_INT 2
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 1
29612: NEG
29613: PUSH
29614: LD_INT 1
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 2
29623: NEG
29624: PUSH
29625: LD_INT 0
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 2
29634: NEG
29635: PUSH
29636: LD_INT 1
29638: NEG
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 2
29646: NEG
29647: PUSH
29648: LD_INT 2
29650: NEG
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 1
29658: NEG
29659: PUSH
29660: LD_INT 2
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 2
29669: NEG
29670: PUSH
29671: LD_INT 1
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 3
29680: NEG
29681: PUSH
29682: LD_INT 1
29684: NEG
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 3
29692: NEG
29693: PUSH
29694: LD_INT 2
29696: NEG
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29727: LD_ADDR_VAR 0 28
29731: PUSH
29732: LD_INT 0
29734: PUSH
29735: LD_INT 0
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 0
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 1
29755: PUSH
29756: LD_INT 0
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 1
29765: PUSH
29766: LD_INT 1
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 0
29775: PUSH
29776: LD_INT 1
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: LD_INT 0
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 1
29796: NEG
29797: PUSH
29798: LD_INT 1
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: PUSH
29810: LD_INT 2
29812: NEG
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 0
29820: PUSH
29821: LD_INT 2
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: LD_INT 1
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 2
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 2
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 2
29862: PUSH
29863: LD_INT 2
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 1
29872: PUSH
29873: LD_INT 2
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 0
29882: PUSH
29883: LD_INT 2
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 1
29892: NEG
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 2
29903: NEG
29904: PUSH
29905: LD_INT 0
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 2
29914: NEG
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 2
29926: NEG
29927: PUSH
29928: LD_INT 2
29930: NEG
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 2
29938: NEG
29939: PUSH
29940: LD_INT 3
29942: NEG
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 1
29950: NEG
29951: PUSH
29952: LD_INT 3
29954: NEG
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 3
29962: NEG
29963: PUSH
29964: LD_INT 1
29966: NEG
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 3
29974: NEG
29975: PUSH
29976: LD_INT 2
29978: NEG
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30009: LD_ADDR_VAR 0 29
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: LD_INT 0
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 0
30026: PUSH
30027: LD_INT 1
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 1
30037: PUSH
30038: LD_INT 0
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 1
30047: PUSH
30048: LD_INT 1
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 0
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 1
30067: NEG
30068: PUSH
30069: LD_INT 0
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 1
30078: NEG
30079: PUSH
30080: LD_INT 1
30082: NEG
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 1
30090: NEG
30091: PUSH
30092: LD_INT 2
30094: NEG
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 0
30102: PUSH
30103: LD_INT 2
30105: NEG
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 1
30113: PUSH
30114: LD_INT 1
30116: NEG
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 2
30124: PUSH
30125: LD_INT 0
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 2
30134: PUSH
30135: LD_INT 1
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: LD_INT 2
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: LD_INT 2
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 1
30164: NEG
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 2
30175: NEG
30176: PUSH
30177: LD_INT 1
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 2
30187: NEG
30188: PUSH
30189: LD_INT 2
30191: NEG
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 2
30199: NEG
30200: PUSH
30201: LD_INT 3
30203: NEG
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 2
30211: PUSH
30212: LD_INT 1
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 3
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 1
30232: PUSH
30233: LD_INT 3
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 1
30242: NEG
30243: PUSH
30244: LD_INT 2
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 3
30253: NEG
30254: PUSH
30255: LD_INT 2
30257: NEG
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30288: LD_ADDR_VAR 0 30
30292: PUSH
30293: LD_INT 0
30295: PUSH
30296: LD_INT 0
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 0
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 1
30316: PUSH
30317: LD_INT 0
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 1
30326: PUSH
30327: LD_INT 1
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 0
30336: PUSH
30337: LD_INT 1
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 1
30346: NEG
30347: PUSH
30348: LD_INT 0
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 1
30357: NEG
30358: PUSH
30359: LD_INT 1
30361: NEG
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 1
30369: NEG
30370: PUSH
30371: LD_INT 2
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 0
30381: PUSH
30382: LD_INT 2
30384: NEG
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 1
30392: PUSH
30393: LD_INT 1
30395: NEG
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 2
30403: PUSH
30404: LD_INT 0
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 2
30413: PUSH
30414: LD_INT 1
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 2
30423: PUSH
30424: LD_INT 2
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 1
30433: PUSH
30434: LD_INT 2
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 1
30443: NEG
30444: PUSH
30445: LD_INT 1
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 2
30454: NEG
30455: PUSH
30456: LD_INT 0
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 2
30465: NEG
30466: PUSH
30467: LD_INT 1
30469: NEG
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 1
30477: NEG
30478: PUSH
30479: LD_INT 3
30481: NEG
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: LD_INT 2
30492: NEG
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 3
30500: PUSH
30501: LD_INT 2
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 2
30510: PUSH
30511: LD_INT 3
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 2
30520: NEG
30521: PUSH
30522: LD_INT 1
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 3
30531: NEG
30532: PUSH
30533: LD_INT 1
30535: NEG
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30566: LD_ADDR_VAR 0 31
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: LD_INT 0
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 0
30583: PUSH
30584: LD_INT 1
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 1
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 1
30604: PUSH
30605: LD_INT 1
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 0
30614: PUSH
30615: LD_INT 1
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 1
30624: NEG
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 1
30635: NEG
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: NEG
30648: PUSH
30649: LD_INT 2
30651: NEG
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: LD_INT 1
30662: NEG
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 2
30670: PUSH
30671: LD_INT 0
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 2
30680: PUSH
30681: LD_INT 1
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 2
30690: PUSH
30691: LD_INT 2
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 1
30700: PUSH
30701: LD_INT 2
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 0
30710: PUSH
30711: LD_INT 2
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 1
30720: NEG
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 2
30731: NEG
30732: PUSH
30733: LD_INT 1
30735: NEG
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 2
30743: NEG
30744: PUSH
30745: LD_INT 2
30747: NEG
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 2
30755: NEG
30756: PUSH
30757: LD_INT 3
30759: NEG
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 2
30767: PUSH
30768: LD_INT 1
30770: NEG
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 3
30778: PUSH
30779: LD_INT 1
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 1
30788: PUSH
30789: LD_INT 3
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 1
30798: NEG
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 3
30809: NEG
30810: PUSH
30811: LD_INT 2
30813: NEG
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30844: LD_ADDR_VAR 0 32
30848: PUSH
30849: LD_INT 0
30851: PUSH
30852: LD_INT 0
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 0
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: LD_INT 0
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 1
30882: PUSH
30883: LD_INT 1
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: LD_INT 1
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: LD_INT 0
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 1
30913: NEG
30914: PUSH
30915: LD_INT 1
30917: NEG
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 1
30925: NEG
30926: PUSH
30927: LD_INT 2
30929: NEG
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 0
30937: PUSH
30938: LD_INT 2
30940: NEG
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: LD_INT 1
30951: NEG
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 2
30959: PUSH
30960: LD_INT 1
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 2
30969: PUSH
30970: LD_INT 2
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 1
30979: PUSH
30980: LD_INT 2
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: LD_INT 2
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: LD_INT 1
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 2
31010: NEG
31011: PUSH
31012: LD_INT 0
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 2
31021: NEG
31022: PUSH
31023: LD_INT 1
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: LD_INT 3
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: LD_INT 2
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 3
31056: PUSH
31057: LD_INT 2
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 2
31066: PUSH
31067: LD_INT 3
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 2
31076: NEG
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 3
31087: NEG
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31122: LD_ADDR_VAR 0 33
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: LD_INT 0
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 0
31139: PUSH
31140: LD_INT 1
31142: NEG
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 1
31150: PUSH
31151: LD_INT 0
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 1
31160: PUSH
31161: LD_INT 1
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 0
31170: PUSH
31171: LD_INT 1
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 1
31180: NEG
31181: PUSH
31182: LD_INT 0
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 1
31191: NEG
31192: PUSH
31193: LD_INT 1
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: NEG
31204: PUSH
31205: LD_INT 2
31207: NEG
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 1
31215: PUSH
31216: LD_INT 1
31218: NEG
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 2
31226: PUSH
31227: LD_INT 0
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: LD_INT 2
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 0
31256: PUSH
31257: LD_INT 2
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 1
31266: NEG
31267: PUSH
31268: LD_INT 1
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: LD_INT 0
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 2
31288: NEG
31289: PUSH
31290: LD_INT 1
31292: NEG
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 2
31300: NEG
31301: PUSH
31302: LD_INT 2
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 2
31312: NEG
31313: PUSH
31314: LD_INT 3
31316: NEG
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 2
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 3
31335: PUSH
31336: LD_INT 1
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: LD_INT 3
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 1
31355: NEG
31356: PUSH
31357: LD_INT 2
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 3
31366: NEG
31367: PUSH
31368: LD_INT 2
31370: NEG
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31401: LD_ADDR_VAR 0 34
31405: PUSH
31406: LD_INT 0
31408: PUSH
31409: LD_INT 0
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: LD_INT 1
31421: NEG
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 1
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: LD_INT 1
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: LD_INT 1
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 1
31459: NEG
31460: PUSH
31461: LD_INT 0
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 1
31470: NEG
31471: PUSH
31472: LD_INT 1
31474: NEG
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 1
31482: NEG
31483: PUSH
31484: LD_INT 2
31486: NEG
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: LD_INT 2
31497: NEG
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: LD_INT 1
31508: NEG
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 2
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: LD_INT 2
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: LD_INT 2
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: NEG
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 2
31557: NEG
31558: PUSH
31559: LD_INT 0
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 2
31568: NEG
31569: PUSH
31570: LD_INT 1
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 2
31580: NEG
31581: PUSH
31582: LD_INT 2
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 1
31592: NEG
31593: PUSH
31594: LD_INT 3
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 1
31604: PUSH
31605: LD_INT 2
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 3
31615: PUSH
31616: LD_INT 2
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 2
31625: PUSH
31626: LD_INT 3
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 2
31635: NEG
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 3
31646: NEG
31647: PUSH
31648: LD_INT 1
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31681: LD_ADDR_VAR 0 35
31685: PUSH
31686: LD_INT 0
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 0
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: PUSH
31710: LD_INT 0
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 1
31719: PUSH
31720: LD_INT 1
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 0
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 1
31739: NEG
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 1
31750: NEG
31751: PUSH
31752: LD_INT 1
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 2
31762: PUSH
31763: LD_INT 1
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 2
31772: NEG
31773: PUSH
31774: LD_INT 1
31776: NEG
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31793: LD_ADDR_VAR 0 36
31797: PUSH
31798: LD_INT 0
31800: PUSH
31801: LD_INT 0
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: LD_INT 1
31813: NEG
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 1
31831: PUSH
31832: LD_INT 1
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 1
31851: NEG
31852: PUSH
31853: LD_INT 0
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: NEG
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 1
31874: NEG
31875: PUSH
31876: LD_INT 2
31878: NEG
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: LD_INT 2
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31905: LD_ADDR_VAR 0 37
31909: PUSH
31910: LD_INT 0
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 0
31922: PUSH
31923: LD_INT 1
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 1
31933: PUSH
31934: LD_INT 0
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: LD_INT 1
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 1
31963: NEG
31964: PUSH
31965: LD_INT 0
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 1
31974: NEG
31975: PUSH
31976: LD_INT 1
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 1
31997: NEG
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32017: LD_ADDR_VAR 0 38
32021: PUSH
32022: LD_INT 0
32024: PUSH
32025: LD_INT 0
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 0
32034: PUSH
32035: LD_INT 1
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: LD_INT 0
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 1
32055: PUSH
32056: LD_INT 1
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 0
32065: PUSH
32066: LD_INT 1
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: LD_INT 0
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 1
32086: NEG
32087: PUSH
32088: LD_INT 1
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 2
32098: PUSH
32099: LD_INT 1
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 2
32108: NEG
32109: PUSH
32110: LD_INT 1
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32129: LD_ADDR_VAR 0 39
32133: PUSH
32134: LD_INT 0
32136: PUSH
32137: LD_INT 0
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: LD_INT 1
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 1
32167: PUSH
32168: LD_INT 1
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 0
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 1
32187: NEG
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 1
32198: NEG
32199: PUSH
32200: LD_INT 1
32202: NEG
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: NEG
32211: PUSH
32212: LD_INT 2
32214: NEG
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: LD_INT 2
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32241: LD_ADDR_VAR 0 40
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: LD_INT 1
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: LD_INT 1
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: LD_INT 0
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 1
32310: NEG
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 1
32322: PUSH
32323: LD_INT 1
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 1
32333: NEG
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32353: LD_ADDR_VAR 0 41
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: LD_INT 1
32373: NEG
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 1
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 1
32391: PUSH
32392: LD_INT 1
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 0
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 1
32411: NEG
32412: PUSH
32413: LD_INT 0
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: LD_INT 1
32426: NEG
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 1
32434: NEG
32435: PUSH
32436: LD_INT 2
32438: NEG
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 2
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 2
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 2
32477: PUSH
32478: LD_INT 2
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: LD_INT 2
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 1
32497: NEG
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 2
32508: NEG
32509: PUSH
32510: LD_INT 0
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 2
32519: NEG
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 2
32531: NEG
32532: PUSH
32533: LD_INT 2
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 2
32543: NEG
32544: PUSH
32545: LD_INT 3
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 2
32555: PUSH
32556: LD_INT 1
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 3
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 3
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 3
32586: PUSH
32587: LD_INT 2
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 3
32596: PUSH
32597: LD_INT 3
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 2
32606: PUSH
32607: LD_INT 3
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 2
32616: NEG
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 3
32627: NEG
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 3
32638: NEG
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 3
32650: NEG
32651: PUSH
32652: LD_INT 2
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 3
32662: NEG
32663: PUSH
32664: LD_INT 3
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32703: LD_ADDR_VAR 0 42
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: LD_INT 1
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 1
32761: NEG
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 1
32772: NEG
32773: PUSH
32774: LD_INT 1
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 1
32784: NEG
32785: PUSH
32786: LD_INT 2
32788: NEG
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: LD_INT 2
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: LD_INT 1
32810: NEG
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 2
32818: PUSH
32819: LD_INT 1
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: LD_INT 2
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: LD_INT 2
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: LD_INT 2
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 1
32858: NEG
32859: PUSH
32860: LD_INT 1
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 2
32869: NEG
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 2
32881: NEG
32882: PUSH
32883: LD_INT 2
32885: NEG
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 2
32893: NEG
32894: PUSH
32895: LD_INT 3
32897: NEG
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 1
32905: NEG
32906: PUSH
32907: LD_INT 3
32909: NEG
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: LD_INT 3
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 1
32928: PUSH
32929: LD_INT 2
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 3
32939: PUSH
32940: LD_INT 2
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 3
32949: PUSH
32950: LD_INT 3
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 2
32959: PUSH
32960: LD_INT 3
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: LD_INT 3
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 3
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 1
32989: NEG
32990: PUSH
32991: LD_INT 2
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 3
33000: NEG
33001: PUSH
33002: LD_INT 2
33004: NEG
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 3
33012: NEG
33013: PUSH
33014: LD_INT 3
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33053: LD_ADDR_VAR 0 43
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: LD_INT 0
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 1
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 1
33111: NEG
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 1
33122: NEG
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 1
33134: NEG
33135: PUSH
33136: LD_INT 2
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 2
33149: NEG
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 1
33157: PUSH
33158: LD_INT 1
33160: NEG
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 2
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 2
33178: PUSH
33179: LD_INT 1
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: LD_INT 2
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 0
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 1
33208: NEG
33209: PUSH
33210: LD_INT 1
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 2
33219: NEG
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 2
33230: NEG
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 1
33242: NEG
33243: PUSH
33244: LD_INT 3
33246: NEG
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: LD_INT 3
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: LD_INT 2
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 2
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 3
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 3
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: LD_INT 3
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 0
33317: PUSH
33318: LD_INT 3
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 1
33327: NEG
33328: PUSH
33329: LD_INT 2
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 2
33338: NEG
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 3
33349: NEG
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 3
33360: NEG
33361: PUSH
33362: LD_INT 1
33364: NEG
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33401: LD_ADDR_VAR 0 44
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: LD_INT 0
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 0
33418: PUSH
33419: LD_INT 1
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 1
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: LD_INT 1
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 0
33449: PUSH
33450: LD_INT 1
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 1
33459: NEG
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 1
33470: NEG
33471: PUSH
33472: LD_INT 1
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: NEG
33483: PUSH
33484: LD_INT 2
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: LD_INT 1
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 2
33505: PUSH
33506: LD_INT 0
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 2
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 2
33525: PUSH
33526: LD_INT 2
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: LD_INT 2
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 1
33545: NEG
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 2
33556: NEG
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 2
33567: NEG
33568: PUSH
33569: LD_INT 1
33571: NEG
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 2
33579: NEG
33580: PUSH
33581: LD_INT 2
33583: NEG
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 2
33591: NEG
33592: PUSH
33593: LD_INT 3
33595: NEG
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 2
33603: PUSH
33604: LD_INT 1
33606: NEG
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 3
33614: PUSH
33615: LD_INT 0
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 3
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 3
33634: PUSH
33635: LD_INT 2
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 3
33644: PUSH
33645: LD_INT 3
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 2
33654: PUSH
33655: LD_INT 3
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 2
33664: NEG
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 3
33675: NEG
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 3
33686: NEG
33687: PUSH
33688: LD_INT 1
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 3
33698: NEG
33699: PUSH
33700: LD_INT 2
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 3
33710: NEG
33711: PUSH
33712: LD_INT 3
33714: NEG
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33751: LD_ADDR_VAR 0 45
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 1
33779: PUSH
33780: LD_INT 0
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 0
33799: PUSH
33800: LD_INT 1
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 1
33809: NEG
33810: PUSH
33811: LD_INT 0
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PUSH
33822: LD_INT 1
33824: NEG
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 1
33832: NEG
33833: PUSH
33834: LD_INT 2
33836: NEG
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 0
33844: PUSH
33845: LD_INT 2
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 1
33855: PUSH
33856: LD_INT 1
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: LD_INT 1
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 2
33876: PUSH
33877: LD_INT 2
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 1
33886: PUSH
33887: LD_INT 2
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 0
33896: PUSH
33897: LD_INT 2
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 1
33906: NEG
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 2
33917: NEG
33918: PUSH
33919: LD_INT 1
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 2
33929: NEG
33930: PUSH
33931: LD_INT 2
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 2
33941: NEG
33942: PUSH
33943: LD_INT 3
33945: NEG
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: LD_INT 3
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: LD_INT 3
33968: NEG
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: LD_INT 2
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 3
33987: PUSH
33988: LD_INT 2
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 3
33997: PUSH
33998: LD_INT 3
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 2
34007: PUSH
34008: LD_INT 3
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: LD_INT 3
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: LD_INT 3
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 1
34037: NEG
34038: PUSH
34039: LD_INT 2
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 3
34048: NEG
34049: PUSH
34050: LD_INT 2
34052: NEG
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 3
34060: NEG
34061: PUSH
34062: LD_INT 3
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34101: LD_ADDR_VAR 0 46
34105: PUSH
34106: LD_INT 0
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: LD_INT 1
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: LD_INT 0
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 1
34159: NEG
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 1
34170: NEG
34171: PUSH
34172: LD_INT 1
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: NEG
34183: PUSH
34184: LD_INT 2
34186: NEG
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: LD_INT 2
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: LD_INT 1
34208: NEG
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 2
34216: PUSH
34217: LD_INT 0
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 2
34226: PUSH
34227: LD_INT 1
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 1
34236: PUSH
34237: LD_INT 2
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 1
34256: NEG
34257: PUSH
34258: LD_INT 1
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 2
34267: NEG
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 2
34278: NEG
34279: PUSH
34280: LD_INT 1
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 1
34290: NEG
34291: PUSH
34292: LD_INT 3
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 3
34305: NEG
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: LD_INT 2
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 2
34324: PUSH
34325: LD_INT 1
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 3
34335: PUSH
34336: LD_INT 0
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 3
34345: PUSH
34346: LD_INT 1
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 1
34355: PUSH
34356: LD_INT 3
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 0
34365: PUSH
34366: LD_INT 3
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 1
34375: NEG
34376: PUSH
34377: LD_INT 2
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 2
34386: NEG
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 3
34397: NEG
34398: PUSH
34399: LD_INT 0
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 3
34408: NEG
34409: PUSH
34410: LD_INT 1
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34449: LD_ADDR_VAR 0 47
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: LD_INT 1
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 1
34487: PUSH
34488: LD_INT 1
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: LD_INT 1
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 1
34518: NEG
34519: PUSH
34520: LD_INT 1
34522: NEG
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 1
34530: NEG
34531: PUSH
34532: LD_INT 2
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: LD_INT 2
34545: NEG
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: LD_INT 1
34556: NEG
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 2
34564: NEG
34565: PUSH
34566: LD_INT 1
34568: NEG
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 2
34576: NEG
34577: PUSH
34578: LD_INT 2
34580: NEG
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34600: LD_ADDR_VAR 0 48
34604: PUSH
34605: LD_INT 0
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: LD_INT 1
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: LD_INT 0
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: LD_INT 1
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 1
34669: NEG
34670: PUSH
34671: LD_INT 1
34673: NEG
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: LD_INT 2
34685: NEG
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 2
34715: PUSH
34716: LD_INT 0
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 2
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34747: LD_ADDR_VAR 0 49
34751: PUSH
34752: LD_INT 0
34754: PUSH
34755: LD_INT 0
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 0
34764: PUSH
34765: LD_INT 1
34767: NEG
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 1
34775: PUSH
34776: LD_INT 0
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: PUSH
34786: LD_INT 1
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: LD_INT 1
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 1
34805: NEG
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 1
34816: NEG
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: LD_INT 1
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: LD_INT 0
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 2
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 2
34859: PUSH
34860: LD_INT 2
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: PUSH
34870: LD_INT 2
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34891: LD_ADDR_VAR 0 50
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: LD_INT 0
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: LD_INT 1
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: PUSH
34930: LD_INT 1
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: LD_INT 1
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 1
34949: NEG
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 1
34960: NEG
34961: PUSH
34962: LD_INT 1
34964: NEG
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 2
34972: PUSH
34973: LD_INT 1
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 2
34982: PUSH
34983: LD_INT 2
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: LD_INT 2
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 0
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: NEG
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35035: LD_ADDR_VAR 0 51
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: LD_INT 0
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 0
35052: PUSH
35053: LD_INT 1
35055: NEG
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: LD_INT 0
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: LD_INT 1
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 1
35093: NEG
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 1
35104: NEG
35105: PUSH
35106: LD_INT 1
35108: NEG
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 1
35116: PUSH
35117: LD_INT 2
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: LD_INT 2
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: NEG
35137: PUSH
35138: LD_INT 1
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 2
35147: NEG
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 2
35158: NEG
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35182: LD_ADDR_VAR 0 52
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: LD_INT 1
35202: NEG
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 1
35240: NEG
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: LD_INT 2
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 1
35275: NEG
35276: PUSH
35277: LD_INT 1
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 2
35286: NEG
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 2
35297: NEG
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 2
35309: NEG
35310: PUSH
35311: LD_INT 2
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35333: LD_ADDR_VAR 0 53
35337: PUSH
35338: LD_INT 0
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 0
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 1
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 1
35371: PUSH
35372: LD_INT 1
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 1
35391: NEG
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: NEG
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: LD_INT 2
35418: NEG
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: LD_INT 2
35429: NEG
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 2
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 2
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 2
35468: PUSH
35469: LD_INT 2
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: LD_INT 2
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: LD_INT 2
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 2
35509: NEG
35510: PUSH
35511: LD_INT 0
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 2
35520: NEG
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 2
35532: NEG
35533: PUSH
35534: LD_INT 2
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35563: LD_ADDR_VAR 0 54
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: PUSH
35592: LD_INT 0
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 1
35601: PUSH
35602: LD_INT 1
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 0
35611: PUSH
35612: LD_INT 1
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 1
35621: NEG
35622: PUSH
35623: LD_INT 0
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 1
35632: NEG
35633: PUSH
35634: LD_INT 1
35636: NEG
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 1
35644: NEG
35645: PUSH
35646: LD_INT 2
35648: NEG
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 0
35656: PUSH
35657: LD_INT 2
35659: NEG
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: LD_INT 1
35670: NEG
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 2
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 2
35688: PUSH
35689: LD_INT 1
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 2
35698: PUSH
35699: LD_INT 2
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 1
35708: PUSH
35709: LD_INT 2
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: LD_INT 2
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: LD_INT 1
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 2
35739: NEG
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 2
35750: NEG
35751: PUSH
35752: LD_INT 1
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 2
35762: NEG
35763: PUSH
35764: LD_INT 2
35766: NEG
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35793: LD_ADDR_VAR 0 55
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: LD_INT 1
35813: NEG
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 1
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 0
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: NEG
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 1
35874: NEG
35875: PUSH
35876: LD_INT 2
35878: NEG
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 0
35886: PUSH
35887: LD_INT 2
35889: NEG
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 2
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 2
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 2
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: PUSH
35939: LD_INT 2
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 0
35948: PUSH
35949: LD_INT 2
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 2
35969: NEG
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 2
35980: NEG
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 2
35992: NEG
35993: PUSH
35994: LD_INT 2
35996: NEG
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36023: LD_ADDR_VAR 0 56
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: PUSH
36062: LD_INT 1
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 0
36071: PUSH
36072: LD_INT 1
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 1
36081: NEG
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: NEG
36093: PUSH
36094: LD_INT 1
36096: NEG
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 1
36104: NEG
36105: PUSH
36106: LD_INT 2
36108: NEG
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: LD_INT 2
36119: NEG
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: LD_INT 1
36130: NEG
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 2
36138: PUSH
36139: LD_INT 0
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 2
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 2
36158: PUSH
36159: LD_INT 2
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 1
36168: PUSH
36169: LD_INT 2
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: LD_INT 2
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 1
36188: NEG
36189: PUSH
36190: LD_INT 1
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 2
36199: NEG
36200: PUSH
36201: LD_INT 0
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 2
36210: NEG
36211: PUSH
36212: LD_INT 1
36214: NEG
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 2
36222: NEG
36223: PUSH
36224: LD_INT 2
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36253: LD_ADDR_VAR 0 57
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 0
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 1
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 1
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 0
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: NEG
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 1
36322: NEG
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: NEG
36335: PUSH
36336: LD_INT 2
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: LD_INT 2
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: LD_INT 1
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 2
36368: PUSH
36369: LD_INT 0
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 2
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 2
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: PUSH
36399: LD_INT 2
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: LD_INT 2
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 2
36429: NEG
36430: PUSH
36431: LD_INT 0
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 2
36440: NEG
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 2
36452: NEG
36453: PUSH
36454: LD_INT 2
36456: NEG
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36483: LD_ADDR_VAR 0 58
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: LD_INT 0
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 0
36531: PUSH
36532: LD_INT 1
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 1
36564: NEG
36565: PUSH
36566: LD_INT 2
36568: NEG
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: LD_INT 2
36579: NEG
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: LD_INT 1
36590: NEG
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 2
36598: PUSH
36599: LD_INT 0
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 2
36608: PUSH
36609: LD_INT 1
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 2
36618: PUSH
36619: LD_INT 2
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 1
36628: PUSH
36629: LD_INT 2
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: NEG
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 2
36659: NEG
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 2
36670: NEG
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 2
36682: NEG
36683: PUSH
36684: LD_INT 2
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36713: LD_ADDR_VAR 0 59
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 1
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 0
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: LD_INT 0
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36801: LD_ADDR_VAR 0 60
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 1
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: NEG
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36889: LD_ADDR_VAR 0 61
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: LD_INT 1
36909: NEG
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: LD_INT 1
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: NEG
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36977: LD_ADDR_VAR 0 62
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 0
36994: PUSH
36995: LD_INT 1
36997: NEG
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 1
37005: PUSH
37006: LD_INT 0
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 1
37015: PUSH
37016: LD_INT 1
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 0
37025: PUSH
37026: LD_INT 1
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 1
37035: NEG
37036: PUSH
37037: LD_INT 0
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: LD_INT 1
37050: NEG
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37065: LD_ADDR_VAR 0 63
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: LD_INT 0
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: LD_INT 1
37085: NEG
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 1
37123: NEG
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37153: LD_ADDR_VAR 0 64
37157: PUSH
37158: LD_INT 0
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 1
37191: PUSH
37192: LD_INT 1
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: LD_INT 1
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 1
37211: NEG
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: NEG
37223: PUSH
37224: LD_INT 1
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: ST_TO_ADDR
// end ; 1 :
37241: GO 43138
37243: LD_INT 1
37245: DOUBLE
37246: EQUAL
37247: IFTRUE 37251
37249: GO 39874
37251: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37252: LD_ADDR_VAR 0 11
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: LD_INT 3
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 0
37271: PUSH
37272: LD_INT 3
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: LD_INT 2
37285: NEG
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: LIST
37295: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37296: LD_ADDR_VAR 0 12
37300: PUSH
37301: LD_INT 2
37303: PUSH
37304: LD_INT 1
37306: NEG
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 3
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 3
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: LIST
37336: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37337: LD_ADDR_VAR 0 13
37341: PUSH
37342: LD_INT 3
37344: PUSH
37345: LD_INT 2
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 3
37354: PUSH
37355: LD_INT 3
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: LD_INT 3
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: LIST
37376: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37377: LD_ADDR_VAR 0 14
37381: PUSH
37382: LD_INT 1
37384: PUSH
37385: LD_INT 3
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 3
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: LD_INT 2
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: LIST
37417: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37418: LD_ADDR_VAR 0 15
37422: PUSH
37423: LD_INT 2
37425: NEG
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 3
37436: NEG
37437: PUSH
37438: LD_INT 0
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 3
37447: NEG
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: LIST
37461: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37462: LD_ADDR_VAR 0 16
37466: PUSH
37467: LD_INT 2
37469: NEG
37470: PUSH
37471: LD_INT 3
37473: NEG
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 3
37481: NEG
37482: PUSH
37483: LD_INT 2
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 3
37493: NEG
37494: PUSH
37495: LD_INT 3
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: LIST
37507: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37508: LD_ADDR_VAR 0 17
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: LD_INT 3
37519: NEG
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: LD_INT 3
37530: NEG
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: LD_INT 2
37541: NEG
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: LIST
37551: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37552: LD_ADDR_VAR 0 18
37556: PUSH
37557: LD_INT 2
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 3
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 3
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: LIST
37592: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37593: LD_ADDR_VAR 0 19
37597: PUSH
37598: LD_INT 3
37600: PUSH
37601: LD_INT 2
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 3
37610: PUSH
37611: LD_INT 3
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 2
37620: PUSH
37621: LD_INT 3
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: LIST
37632: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37633: LD_ADDR_VAR 0 20
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: LD_INT 3
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: LD_INT 3
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: LD_INT 2
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: LIST
37673: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37674: LD_ADDR_VAR 0 21
37678: PUSH
37679: LD_INT 2
37681: NEG
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 3
37692: NEG
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 3
37703: NEG
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: LIST
37717: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37718: LD_ADDR_VAR 0 22
37722: PUSH
37723: LD_INT 2
37725: NEG
37726: PUSH
37727: LD_INT 3
37729: NEG
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 3
37737: NEG
37738: PUSH
37739: LD_INT 2
37741: NEG
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 3
37749: NEG
37750: PUSH
37751: LD_INT 3
37753: NEG
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: LIST
37763: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37764: LD_ADDR_VAR 0 23
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: LD_INT 3
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: LD_INT 4
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 1
37794: PUSH
37795: LD_INT 3
37797: NEG
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: LIST
37807: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37808: LD_ADDR_VAR 0 24
37812: PUSH
37813: LD_INT 3
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 3
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 4
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: LIST
37848: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37849: LD_ADDR_VAR 0 25
37853: PUSH
37854: LD_INT 3
37856: PUSH
37857: LD_INT 3
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 4
37866: PUSH
37867: LD_INT 3
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 3
37876: PUSH
37877: LD_INT 4
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: LIST
37888: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37889: LD_ADDR_VAR 0 26
37893: PUSH
37894: LD_INT 0
37896: PUSH
37897: LD_INT 3
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: LD_INT 4
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 1
37916: NEG
37917: PUSH
37918: LD_INT 3
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37930: LD_ADDR_VAR 0 27
37934: PUSH
37935: LD_INT 3
37937: NEG
37938: PUSH
37939: LD_INT 0
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 3
37948: NEG
37949: PUSH
37950: LD_INT 1
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 4
37959: NEG
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: LIST
37973: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37974: LD_ADDR_VAR 0 28
37978: PUSH
37979: LD_INT 3
37981: NEG
37982: PUSH
37983: LD_INT 3
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 3
37993: NEG
37994: PUSH
37995: LD_INT 4
37997: NEG
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 4
38005: NEG
38006: PUSH
38007: LD_INT 3
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: LIST
38019: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38020: LD_ADDR_VAR 0 29
38024: PUSH
38025: LD_INT 1
38027: NEG
38028: PUSH
38029: LD_INT 3
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 0
38039: PUSH
38040: LD_INT 3
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 1
38050: PUSH
38051: LD_INT 2
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: LD_INT 4
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: LD_INT 4
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: LD_INT 3
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: LD_INT 5
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: LD_INT 5
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: LD_INT 4
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: NEG
38130: PUSH
38131: LD_INT 6
38133: NEG
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: LD_INT 6
38144: NEG
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: LD_INT 5
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38175: LD_ADDR_VAR 0 30
38179: PUSH
38180: LD_INT 2
38182: PUSH
38183: LD_INT 1
38185: NEG
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 3
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 3
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 3
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 4
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 4
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 4
38244: PUSH
38245: LD_INT 1
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 5
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 5
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 5
38275: PUSH
38276: LD_INT 1
38278: NEG
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 6
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 6
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38318: LD_ADDR_VAR 0 31
38322: PUSH
38323: LD_INT 3
38325: PUSH
38326: LD_INT 2
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 3
38335: PUSH
38336: LD_INT 3
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 2
38345: PUSH
38346: LD_INT 3
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 4
38355: PUSH
38356: LD_INT 3
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 4
38365: PUSH
38366: LD_INT 4
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 3
38375: PUSH
38376: LD_INT 4
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 5
38385: PUSH
38386: LD_INT 4
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 5
38395: PUSH
38396: LD_INT 5
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 4
38405: PUSH
38406: LD_INT 5
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 6
38415: PUSH
38416: LD_INT 5
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 6
38425: PUSH
38426: LD_INT 6
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 5
38435: PUSH
38436: LD_INT 6
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38457: LD_ADDR_VAR 0 32
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: LD_INT 3
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: LD_INT 3
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 1
38484: NEG
38485: PUSH
38486: LD_INT 2
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: LD_INT 4
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: LD_INT 4
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: PUSH
38517: LD_INT 3
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: LD_INT 5
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: LD_INT 5
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 1
38546: NEG
38547: PUSH
38548: LD_INT 4
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: LD_INT 6
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: LD_INT 6
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: LD_INT 5
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38600: LD_ADDR_VAR 0 33
38604: PUSH
38605: LD_INT 2
38607: NEG
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 3
38618: NEG
38619: PUSH
38620: LD_INT 0
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 3
38629: NEG
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 3
38641: NEG
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 4
38652: NEG
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 4
38663: NEG
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 4
38675: NEG
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 5
38686: NEG
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 5
38697: NEG
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 5
38709: NEG
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 6
38720: NEG
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 6
38731: NEG
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38755: LD_ADDR_VAR 0 34
38759: PUSH
38760: LD_INT 2
38762: NEG
38763: PUSH
38764: LD_INT 3
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 3
38774: NEG
38775: PUSH
38776: LD_INT 2
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 3
38786: NEG
38787: PUSH
38788: LD_INT 3
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 3
38798: NEG
38799: PUSH
38800: LD_INT 4
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 4
38810: NEG
38811: PUSH
38812: LD_INT 3
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 4
38822: NEG
38823: PUSH
38824: LD_INT 4
38826: NEG
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 4
38834: NEG
38835: PUSH
38836: LD_INT 5
38838: NEG
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 5
38846: NEG
38847: PUSH
38848: LD_INT 4
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 5
38858: NEG
38859: PUSH
38860: LD_INT 5
38862: NEG
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 5
38870: NEG
38871: PUSH
38872: LD_INT 6
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 6
38882: NEG
38883: PUSH
38884: LD_INT 5
38886: NEG
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 6
38894: NEG
38895: PUSH
38896: LD_INT 6
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38918: LD_ADDR_VAR 0 41
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: LD_INT 2
38928: NEG
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: LD_INT 3
38940: NEG
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: LD_INT 2
38951: NEG
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: LIST
38961: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38962: LD_ADDR_VAR 0 42
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 3
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: LIST
39002: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39003: LD_ADDR_VAR 0 43
39007: PUSH
39008: LD_INT 2
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 3
39020: PUSH
39021: LD_INT 2
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: LD_INT 3
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: LIST
39042: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39043: LD_ADDR_VAR 0 44
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: LD_INT 2
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 3
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: NEG
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: LIST
39083: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39084: LD_ADDR_VAR 0 45
39088: PUSH
39089: LD_INT 2
39091: NEG
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 2
39102: NEG
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 3
39113: NEG
39114: PUSH
39115: LD_INT 1
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: LIST
39127: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39128: LD_ADDR_VAR 0 46
39132: PUSH
39133: LD_INT 2
39135: NEG
39136: PUSH
39137: LD_INT 2
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 2
39147: NEG
39148: PUSH
39149: LD_INT 3
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 3
39159: NEG
39160: PUSH
39161: LD_INT 2
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: LIST
39173: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39174: LD_ADDR_VAR 0 47
39178: PUSH
39179: LD_INT 2
39181: NEG
39182: PUSH
39183: LD_INT 3
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 1
39193: NEG
39194: PUSH
39195: LD_INT 3
39197: NEG
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39207: LD_ADDR_VAR 0 48
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: LD_INT 2
39217: NEG
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 2
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39238: LD_ADDR_VAR 0 49
39242: PUSH
39243: LD_INT 3
39245: PUSH
39246: LD_INT 1
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 3
39255: PUSH
39256: LD_INT 2
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39267: LD_ADDR_VAR 0 50
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: LD_INT 3
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: LD_INT 3
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39296: LD_ADDR_VAR 0 51
39300: PUSH
39301: LD_INT 1
39303: NEG
39304: PUSH
39305: LD_INT 2
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 2
39314: NEG
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39327: LD_ADDR_VAR 0 52
39331: PUSH
39332: LD_INT 3
39334: NEG
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 3
39346: NEG
39347: PUSH
39348: LD_INT 2
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39360: LD_ADDR_VAR 0 53
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: LD_INT 3
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: LD_INT 3
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: LD_INT 2
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: LIST
39403: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39404: LD_ADDR_VAR 0 54
39408: PUSH
39409: LD_INT 2
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 3
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 3
39432: PUSH
39433: LD_INT 1
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: LIST
39444: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39445: LD_ADDR_VAR 0 55
39449: PUSH
39450: LD_INT 3
39452: PUSH
39453: LD_INT 2
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 3
39462: PUSH
39463: LD_INT 3
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: LD_INT 3
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: LIST
39484: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39485: LD_ADDR_VAR 0 56
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: LD_INT 3
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: LD_INT 3
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: NEG
39513: PUSH
39514: LD_INT 2
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39526: LD_ADDR_VAR 0 57
39530: PUSH
39531: LD_INT 2
39533: NEG
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 3
39544: NEG
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 3
39555: NEG
39556: PUSH
39557: LD_INT 1
39559: NEG
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: LIST
39569: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39570: LD_ADDR_VAR 0 58
39574: PUSH
39575: LD_INT 2
39577: NEG
39578: PUSH
39579: LD_INT 3
39581: NEG
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 3
39589: NEG
39590: PUSH
39591: LD_INT 2
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 3
39601: NEG
39602: PUSH
39603: LD_INT 3
39605: NEG
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: LIST
39615: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39616: LD_ADDR_VAR 0 59
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: LD_INT 2
39627: NEG
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: LD_INT 2
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: LIST
39659: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39660: LD_ADDR_VAR 0 60
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: LD_INT 1
39670: NEG
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 2
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 2
39688: PUSH
39689: LD_INT 1
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: LIST
39700: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39701: LD_ADDR_VAR 0 61
39705: PUSH
39706: LD_INT 2
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 2
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: LIST
39740: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39741: LD_ADDR_VAR 0 62
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: LD_INT 2
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: LD_INT 2
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: NEG
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: LIST
39781: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39782: LD_ADDR_VAR 0 63
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 2
39800: NEG
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 2
39811: NEG
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: LIST
39825: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39826: LD_ADDR_VAR 0 64
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: LD_INT 2
39837: NEG
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 2
39845: NEG
39846: PUSH
39847: LD_INT 1
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 2
39857: NEG
39858: PUSH
39859: LD_INT 2
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: LIST
39871: ST_TO_ADDR
// end ; 2 :
39872: GO 43138
39874: LD_INT 2
39876: DOUBLE
39877: EQUAL
39878: IFTRUE 39882
39880: GO 43137
39882: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39883: LD_ADDR_VAR 0 29
39887: PUSH
39888: LD_INT 4
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 4
39900: PUSH
39901: LD_INT 1
39903: NEG
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 5
39911: PUSH
39912: LD_INT 0
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 5
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 4
39931: PUSH
39932: LD_INT 1
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 3
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 3
39951: PUSH
39952: LD_INT 1
39954: NEG
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 3
39962: PUSH
39963: LD_INT 2
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 5
39973: PUSH
39974: LD_INT 2
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 3
39983: PUSH
39984: LD_INT 3
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 3
39993: PUSH
39994: LD_INT 2
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 4
40003: PUSH
40004: LD_INT 3
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 4
40013: PUSH
40014: LD_INT 4
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 3
40023: PUSH
40024: LD_INT 4
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 2
40033: PUSH
40034: LD_INT 3
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 2
40043: PUSH
40044: LD_INT 2
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 4
40053: PUSH
40054: LD_INT 2
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 2
40063: PUSH
40064: LD_INT 4
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: LD_INT 4
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: LD_INT 3
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: LD_INT 4
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 1
40103: PUSH
40104: LD_INT 5
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: LD_INT 5
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: NEG
40124: PUSH
40125: LD_INT 4
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: LD_INT 3
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 2
40145: PUSH
40146: LD_INT 5
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 2
40155: NEG
40156: PUSH
40157: LD_INT 3
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 3
40166: NEG
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 3
40177: NEG
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: NEG
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 3
40211: NEG
40212: PUSH
40213: LD_INT 1
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 4
40222: NEG
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 4
40233: NEG
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 4
40245: NEG
40246: PUSH
40247: LD_INT 2
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 2
40257: NEG
40258: PUSH
40259: LD_INT 2
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 4
40268: NEG
40269: PUSH
40270: LD_INT 4
40272: NEG
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 4
40280: NEG
40281: PUSH
40282: LD_INT 5
40284: NEG
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 3
40292: NEG
40293: PUSH
40294: LD_INT 4
40296: NEG
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 3
40304: NEG
40305: PUSH
40306: LD_INT 3
40308: NEG
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 4
40316: NEG
40317: PUSH
40318: LD_INT 3
40320: NEG
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 5
40328: NEG
40329: PUSH
40330: LD_INT 4
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 5
40340: NEG
40341: PUSH
40342: LD_INT 5
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 3
40352: NEG
40353: PUSH
40354: LD_INT 5
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 5
40364: NEG
40365: PUSH
40366: LD_INT 3
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40421: LD_ADDR_VAR 0 30
40425: PUSH
40426: LD_INT 4
40428: PUSH
40429: LD_INT 4
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 4
40438: PUSH
40439: LD_INT 3
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 5
40448: PUSH
40449: LD_INT 4
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 5
40458: PUSH
40459: LD_INT 5
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 4
40468: PUSH
40469: LD_INT 5
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 3
40478: PUSH
40479: LD_INT 4
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 3
40488: PUSH
40489: LD_INT 3
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 5
40498: PUSH
40499: LD_INT 3
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 3
40508: PUSH
40509: LD_INT 5
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: LD_INT 3
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: LD_INT 3
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: PUSH
40549: LD_INT 4
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: LD_INT 4
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: LD_INT 3
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: LD_INT 2
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 2
40590: PUSH
40591: LD_INT 4
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: NEG
40601: PUSH
40602: LD_INT 2
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 4
40611: NEG
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 4
40622: NEG
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 3
40634: NEG
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 3
40645: NEG
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 4
40656: NEG
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 5
40667: NEG
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 5
40678: NEG
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 5
40690: NEG
40691: PUSH
40692: LD_INT 2
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 3
40702: NEG
40703: PUSH
40704: LD_INT 2
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 3
40713: NEG
40714: PUSH
40715: LD_INT 3
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 3
40725: NEG
40726: PUSH
40727: LD_INT 4
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: LD_INT 3
40741: NEG
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 2
40749: NEG
40750: PUSH
40751: LD_INT 2
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 3
40761: NEG
40762: PUSH
40763: LD_INT 2
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 4
40773: NEG
40774: PUSH
40775: LD_INT 3
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 4
40785: NEG
40786: PUSH
40787: LD_INT 4
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 2
40797: NEG
40798: PUSH
40799: LD_INT 4
40801: NEG
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 4
40809: NEG
40810: PUSH
40811: LD_INT 2
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: LD_INT 4
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 5
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: LD_INT 4
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: LD_INT 3
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: LD_INT 3
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: PUSH
40878: LD_INT 4
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: LD_INT 5
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: LD_INT 3
40903: NEG
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 2
40911: NEG
40912: PUSH
40913: LD_INT 5
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40968: LD_ADDR_VAR 0 31
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: LD_INT 4
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: LD_INT 3
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: LD_INT 4
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: LD_INT 5
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 5
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: LD_INT 4
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: LD_INT 3
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: PUSH
41048: LD_INT 5
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: LD_INT 3
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 3
41068: NEG
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 3
41079: NEG
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 2
41091: NEG
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: NEG
41103: PUSH
41104: LD_INT 1
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 3
41113: NEG
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 4
41124: NEG
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 4
41135: NEG
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 4
41147: NEG
41148: PUSH
41149: LD_INT 2
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 2
41159: NEG
41160: PUSH
41161: LD_INT 2
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 4
41170: NEG
41171: PUSH
41172: LD_INT 4
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 4
41182: NEG
41183: PUSH
41184: LD_INT 5
41186: NEG
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 3
41194: NEG
41195: PUSH
41196: LD_INT 4
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 3
41206: NEG
41207: PUSH
41208: LD_INT 3
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 4
41218: NEG
41219: PUSH
41220: LD_INT 3
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 5
41230: NEG
41231: PUSH
41232: LD_INT 4
41234: NEG
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 5
41242: NEG
41243: PUSH
41244: LD_INT 5
41246: NEG
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 3
41254: NEG
41255: PUSH
41256: LD_INT 5
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 5
41266: NEG
41267: PUSH
41268: LD_INT 3
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: LD_INT 3
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 4
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: LD_INT 3
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: LD_INT 2
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 2
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: LD_INT 3
41337: NEG
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 1
41345: NEG
41346: PUSH
41347: LD_INT 4
41349: NEG
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 2
41357: PUSH
41358: LD_INT 2
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 2
41368: NEG
41369: PUSH
41370: LD_INT 4
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 4
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 4
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 5
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 5
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 4
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 3
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 3
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 3
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 5
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41518: LD_ADDR_VAR 0 32
41522: PUSH
41523: LD_INT 4
41525: NEG
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 4
41536: NEG
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 3
41548: NEG
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 3
41559: NEG
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 4
41570: NEG
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 5
41581: NEG
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 5
41592: NEG
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 5
41604: NEG
41605: PUSH
41606: LD_INT 2
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 3
41616: NEG
41617: PUSH
41618: LD_INT 2
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 3
41627: NEG
41628: PUSH
41629: LD_INT 3
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 3
41639: NEG
41640: PUSH
41641: LD_INT 4
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: LD_INT 3
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 2
41663: NEG
41664: PUSH
41665: LD_INT 2
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 3
41675: NEG
41676: PUSH
41677: LD_INT 2
41679: NEG
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 4
41687: NEG
41688: PUSH
41689: LD_INT 3
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 4
41699: NEG
41700: PUSH
41701: LD_INT 4
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 2
41711: NEG
41712: PUSH
41713: LD_INT 4
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 4
41723: NEG
41724: PUSH
41725: LD_INT 2
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 4
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: LD_INT 5
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: LD_INT 4
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: LD_INT 3
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 3
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: LD_INT 4
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: LD_INT 5
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 2
41814: PUSH
41815: LD_INT 3
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 2
41825: NEG
41826: PUSH
41827: LD_INT 5
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 3
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 3
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 4
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 4
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 3
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 2
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: LD_INT 2
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 4
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 4
41930: PUSH
41931: LD_INT 4
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 4
41940: PUSH
41941: LD_INT 3
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 5
41950: PUSH
41951: LD_INT 4
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 5
41960: PUSH
41961: LD_INT 5
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 4
41970: PUSH
41971: LD_INT 5
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 3
41980: PUSH
41981: LD_INT 4
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 3
41990: PUSH
41991: LD_INT 3
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 5
42000: PUSH
42001: LD_INT 3
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 3
42010: PUSH
42011: LD_INT 5
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42065: LD_ADDR_VAR 0 33
42069: PUSH
42070: LD_INT 4
42072: NEG
42073: PUSH
42074: LD_INT 4
42076: NEG
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 4
42084: NEG
42085: PUSH
42086: LD_INT 5
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 3
42096: NEG
42097: PUSH
42098: LD_INT 4
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 3
42108: NEG
42109: PUSH
42110: LD_INT 3
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 4
42120: NEG
42121: PUSH
42122: LD_INT 3
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 5
42132: NEG
42133: PUSH
42134: LD_INT 4
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 5
42144: NEG
42145: PUSH
42146: LD_INT 5
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 3
42156: NEG
42157: PUSH
42158: LD_INT 5
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 5
42168: NEG
42169: PUSH
42170: LD_INT 3
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: LD_INT 3
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: LD_INT 4
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: PUSH
42203: LD_INT 3
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: PUSH
42214: LD_INT 2
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: LD_INT 2
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: LD_INT 3
42239: NEG
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: LD_INT 4
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: NEG
42271: PUSH
42272: LD_INT 4
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 4
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 4
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 5
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 5
42313: PUSH
42314: LD_INT 1
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 4
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 3
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 3
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 3
42354: PUSH
42355: LD_INT 2
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 5
42365: PUSH
42366: LD_INT 2
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 3
42375: PUSH
42376: LD_INT 3
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 3
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 4
42395: PUSH
42396: LD_INT 3
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 4
42405: PUSH
42406: LD_INT 4
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 3
42415: PUSH
42416: LD_INT 4
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 2
42425: PUSH
42426: LD_INT 3
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 2
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 4
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 2
42455: PUSH
42456: LD_INT 4
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: LD_INT 4
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: LD_INT 3
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: LD_INT 4
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: LD_INT 5
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 5
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: LD_INT 4
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: LD_INT 3
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 2
42537: PUSH
42538: LD_INT 5
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: NEG
42548: PUSH
42549: LD_INT 3
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42603: LD_ADDR_VAR 0 34
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: LD_INT 4
42613: NEG
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: LD_INT 5
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 4
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: LD_INT 3
42646: NEG
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: LD_INT 3
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: LD_INT 4
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: LD_INT 5
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: PUSH
42690: LD_INT 3
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: LD_INT 5
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 3
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 3
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 4
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 4
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 3
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: LD_INT 2
42787: NEG
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 4
42795: PUSH
42796: LD_INT 2
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 4
42805: PUSH
42806: LD_INT 4
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 4
42815: PUSH
42816: LD_INT 3
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 5
42825: PUSH
42826: LD_INT 4
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 5
42835: PUSH
42836: LD_INT 5
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 4
42845: PUSH
42846: LD_INT 5
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 3
42855: PUSH
42856: LD_INT 4
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 3
42865: PUSH
42866: LD_INT 3
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 5
42875: PUSH
42876: LD_INT 3
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 3
42885: PUSH
42886: LD_INT 5
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: LD_INT 3
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: LD_INT 2
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: LD_INT 3
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: LD_INT 4
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: LD_INT 4
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: LD_INT 3
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 1
42956: NEG
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 2
42967: PUSH
42968: LD_INT 4
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: LD_INT 2
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 4
42988: NEG
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 4
42999: NEG
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 3
43011: NEG
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 3
43022: NEG
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 4
43033: NEG
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 5
43044: NEG
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 5
43055: NEG
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 5
43067: NEG
43068: PUSH
43069: LD_INT 2
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 3
43079: NEG
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: ST_TO_ADDR
// end ; end ;
43135: GO 43138
43137: POP
// case btype of b_depot , b_warehouse :
43138: LD_VAR 0 1
43142: PUSH
43143: LD_INT 0
43145: DOUBLE
43146: EQUAL
43147: IFTRUE 43157
43149: LD_INT 1
43151: DOUBLE
43152: EQUAL
43153: IFTRUE 43157
43155: GO 43358
43157: POP
// case nation of nation_american :
43158: LD_VAR 0 5
43162: PUSH
43163: LD_INT 1
43165: DOUBLE
43166: EQUAL
43167: IFTRUE 43171
43169: GO 43227
43171: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
43172: LD_ADDR_VAR 0 9
43176: PUSH
43177: LD_VAR 0 11
43181: PUSH
43182: LD_VAR 0 12
43186: PUSH
43187: LD_VAR 0 13
43191: PUSH
43192: LD_VAR 0 14
43196: PUSH
43197: LD_VAR 0 15
43201: PUSH
43202: LD_VAR 0 16
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: PUSH
43215: LD_VAR 0 4
43219: PUSH
43220: LD_INT 1
43222: PLUS
43223: ARRAY
43224: ST_TO_ADDR
43225: GO 43356
43227: LD_INT 2
43229: DOUBLE
43230: EQUAL
43231: IFTRUE 43235
43233: GO 43291
43235: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
43236: LD_ADDR_VAR 0 9
43240: PUSH
43241: LD_VAR 0 17
43245: PUSH
43246: LD_VAR 0 18
43250: PUSH
43251: LD_VAR 0 19
43255: PUSH
43256: LD_VAR 0 20
43260: PUSH
43261: LD_VAR 0 21
43265: PUSH
43266: LD_VAR 0 22
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: PUSH
43279: LD_VAR 0 4
43283: PUSH
43284: LD_INT 1
43286: PLUS
43287: ARRAY
43288: ST_TO_ADDR
43289: GO 43356
43291: LD_INT 3
43293: DOUBLE
43294: EQUAL
43295: IFTRUE 43299
43297: GO 43355
43299: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43300: LD_ADDR_VAR 0 9
43304: PUSH
43305: LD_VAR 0 23
43309: PUSH
43310: LD_VAR 0 24
43314: PUSH
43315: LD_VAR 0 25
43319: PUSH
43320: LD_VAR 0 26
43324: PUSH
43325: LD_VAR 0 27
43329: PUSH
43330: LD_VAR 0 28
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: PUSH
43343: LD_VAR 0 4
43347: PUSH
43348: LD_INT 1
43350: PLUS
43351: ARRAY
43352: ST_TO_ADDR
43353: GO 43356
43355: POP
43356: GO 43905
43358: LD_INT 2
43360: DOUBLE
43361: EQUAL
43362: IFTRUE 43372
43364: LD_INT 3
43366: DOUBLE
43367: EQUAL
43368: IFTRUE 43372
43370: GO 43428
43372: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43373: LD_ADDR_VAR 0 9
43377: PUSH
43378: LD_VAR 0 29
43382: PUSH
43383: LD_VAR 0 30
43387: PUSH
43388: LD_VAR 0 31
43392: PUSH
43393: LD_VAR 0 32
43397: PUSH
43398: LD_VAR 0 33
43402: PUSH
43403: LD_VAR 0 34
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: PUSH
43416: LD_VAR 0 4
43420: PUSH
43421: LD_INT 1
43423: PLUS
43424: ARRAY
43425: ST_TO_ADDR
43426: GO 43905
43428: LD_INT 16
43430: DOUBLE
43431: EQUAL
43432: IFTRUE 43484
43434: LD_INT 17
43436: DOUBLE
43437: EQUAL
43438: IFTRUE 43484
43440: LD_INT 18
43442: DOUBLE
43443: EQUAL
43444: IFTRUE 43484
43446: LD_INT 19
43448: DOUBLE
43449: EQUAL
43450: IFTRUE 43484
43452: LD_INT 20
43454: DOUBLE
43455: EQUAL
43456: IFTRUE 43484
43458: LD_INT 21
43460: DOUBLE
43461: EQUAL
43462: IFTRUE 43484
43464: LD_INT 23
43466: DOUBLE
43467: EQUAL
43468: IFTRUE 43484
43470: LD_INT 24
43472: DOUBLE
43473: EQUAL
43474: IFTRUE 43484
43476: LD_INT 25
43478: DOUBLE
43479: EQUAL
43480: IFTRUE 43484
43482: GO 43540
43484: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43485: LD_ADDR_VAR 0 9
43489: PUSH
43490: LD_VAR 0 35
43494: PUSH
43495: LD_VAR 0 36
43499: PUSH
43500: LD_VAR 0 37
43504: PUSH
43505: LD_VAR 0 38
43509: PUSH
43510: LD_VAR 0 39
43514: PUSH
43515: LD_VAR 0 40
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: PUSH
43528: LD_VAR 0 4
43532: PUSH
43533: LD_INT 1
43535: PLUS
43536: ARRAY
43537: ST_TO_ADDR
43538: GO 43905
43540: LD_INT 6
43542: DOUBLE
43543: EQUAL
43544: IFTRUE 43596
43546: LD_INT 7
43548: DOUBLE
43549: EQUAL
43550: IFTRUE 43596
43552: LD_INT 8
43554: DOUBLE
43555: EQUAL
43556: IFTRUE 43596
43558: LD_INT 13
43560: DOUBLE
43561: EQUAL
43562: IFTRUE 43596
43564: LD_INT 12
43566: DOUBLE
43567: EQUAL
43568: IFTRUE 43596
43570: LD_INT 15
43572: DOUBLE
43573: EQUAL
43574: IFTRUE 43596
43576: LD_INT 11
43578: DOUBLE
43579: EQUAL
43580: IFTRUE 43596
43582: LD_INT 14
43584: DOUBLE
43585: EQUAL
43586: IFTRUE 43596
43588: LD_INT 10
43590: DOUBLE
43591: EQUAL
43592: IFTRUE 43596
43594: GO 43652
43596: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
43597: LD_ADDR_VAR 0 9
43601: PUSH
43602: LD_VAR 0 41
43606: PUSH
43607: LD_VAR 0 42
43611: PUSH
43612: LD_VAR 0 43
43616: PUSH
43617: LD_VAR 0 44
43621: PUSH
43622: LD_VAR 0 45
43626: PUSH
43627: LD_VAR 0 46
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: PUSH
43640: LD_VAR 0 4
43644: PUSH
43645: LD_INT 1
43647: PLUS
43648: ARRAY
43649: ST_TO_ADDR
43650: GO 43905
43652: LD_INT 36
43654: DOUBLE
43655: EQUAL
43656: IFTRUE 43660
43658: GO 43716
43660: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43661: LD_ADDR_VAR 0 9
43665: PUSH
43666: LD_VAR 0 47
43670: PUSH
43671: LD_VAR 0 48
43675: PUSH
43676: LD_VAR 0 49
43680: PUSH
43681: LD_VAR 0 50
43685: PUSH
43686: LD_VAR 0 51
43690: PUSH
43691: LD_VAR 0 52
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: PUSH
43704: LD_VAR 0 4
43708: PUSH
43709: LD_INT 1
43711: PLUS
43712: ARRAY
43713: ST_TO_ADDR
43714: GO 43905
43716: LD_INT 4
43718: DOUBLE
43719: EQUAL
43720: IFTRUE 43742
43722: LD_INT 5
43724: DOUBLE
43725: EQUAL
43726: IFTRUE 43742
43728: LD_INT 34
43730: DOUBLE
43731: EQUAL
43732: IFTRUE 43742
43734: LD_INT 37
43736: DOUBLE
43737: EQUAL
43738: IFTRUE 43742
43740: GO 43798
43742: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43743: LD_ADDR_VAR 0 9
43747: PUSH
43748: LD_VAR 0 53
43752: PUSH
43753: LD_VAR 0 54
43757: PUSH
43758: LD_VAR 0 55
43762: PUSH
43763: LD_VAR 0 56
43767: PUSH
43768: LD_VAR 0 57
43772: PUSH
43773: LD_VAR 0 58
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: PUSH
43786: LD_VAR 0 4
43790: PUSH
43791: LD_INT 1
43793: PLUS
43794: ARRAY
43795: ST_TO_ADDR
43796: GO 43905
43798: LD_INT 31
43800: DOUBLE
43801: EQUAL
43802: IFTRUE 43848
43804: LD_INT 32
43806: DOUBLE
43807: EQUAL
43808: IFTRUE 43848
43810: LD_INT 33
43812: DOUBLE
43813: EQUAL
43814: IFTRUE 43848
43816: LD_INT 27
43818: DOUBLE
43819: EQUAL
43820: IFTRUE 43848
43822: LD_INT 26
43824: DOUBLE
43825: EQUAL
43826: IFTRUE 43848
43828: LD_INT 28
43830: DOUBLE
43831: EQUAL
43832: IFTRUE 43848
43834: LD_INT 29
43836: DOUBLE
43837: EQUAL
43838: IFTRUE 43848
43840: LD_INT 30
43842: DOUBLE
43843: EQUAL
43844: IFTRUE 43848
43846: GO 43904
43848: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
43849: LD_ADDR_VAR 0 9
43853: PUSH
43854: LD_VAR 0 59
43858: PUSH
43859: LD_VAR 0 60
43863: PUSH
43864: LD_VAR 0 61
43868: PUSH
43869: LD_VAR 0 62
43873: PUSH
43874: LD_VAR 0 63
43878: PUSH
43879: LD_VAR 0 64
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: PUSH
43892: LD_VAR 0 4
43896: PUSH
43897: LD_INT 1
43899: PLUS
43900: ARRAY
43901: ST_TO_ADDR
43902: GO 43905
43904: POP
// temp_list2 = [ ] ;
43905: LD_ADDR_VAR 0 10
43909: PUSH
43910: EMPTY
43911: ST_TO_ADDR
// for i in temp_list do
43912: LD_ADDR_VAR 0 8
43916: PUSH
43917: LD_VAR 0 9
43921: PUSH
43922: FOR_IN
43923: IFFALSE 43975
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43925: LD_ADDR_VAR 0 10
43929: PUSH
43930: LD_VAR 0 10
43934: PUSH
43935: LD_VAR 0 8
43939: PUSH
43940: LD_INT 1
43942: ARRAY
43943: PUSH
43944: LD_VAR 0 2
43948: PLUS
43949: PUSH
43950: LD_VAR 0 8
43954: PUSH
43955: LD_INT 2
43957: ARRAY
43958: PUSH
43959: LD_VAR 0 3
43963: PLUS
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: EMPTY
43970: LIST
43971: ADD
43972: ST_TO_ADDR
43973: GO 43922
43975: POP
43976: POP
// result = temp_list2 ;
43977: LD_ADDR_VAR 0 7
43981: PUSH
43982: LD_VAR 0 10
43986: ST_TO_ADDR
// end ;
43987: LD_VAR 0 7
43991: RET
// export function EnemyInRange ( unit , dist ) ; begin
43992: LD_INT 0
43994: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43995: LD_ADDR_VAR 0 3
43999: PUSH
44000: LD_VAR 0 1
44004: PPUSH
44005: CALL_OW 255
44009: PPUSH
44010: LD_VAR 0 1
44014: PPUSH
44015: CALL_OW 250
44019: PPUSH
44020: LD_VAR 0 1
44024: PPUSH
44025: CALL_OW 251
44029: PPUSH
44030: LD_VAR 0 2
44034: PPUSH
44035: CALL 18659 0 4
44039: PUSH
44040: LD_INT 4
44042: ARRAY
44043: ST_TO_ADDR
// end ;
44044: LD_VAR 0 3
44048: RET
// export function PlayerSeeMe ( unit ) ; begin
44049: LD_INT 0
44051: PPUSH
// result := See ( your_side , unit ) ;
44052: LD_ADDR_VAR 0 2
44056: PUSH
44057: LD_OWVAR 2
44061: PPUSH
44062: LD_VAR 0 1
44066: PPUSH
44067: CALL_OW 292
44071: ST_TO_ADDR
// end ;
44072: LD_VAR 0 2
44076: RET
// export function ReverseDir ( unit ) ; begin
44077: LD_INT 0
44079: PPUSH
// if not unit then
44080: LD_VAR 0 1
44084: NOT
44085: IFFALSE 44089
// exit ;
44087: GO 44135
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
44089: LD_ADDR_VAR 0 2
44093: PUSH
44094: LD_INT 3
44096: PUSH
44097: LD_INT 4
44099: PUSH
44100: LD_INT 5
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: PUSH
44120: LD_VAR 0 1
44124: PPUSH
44125: CALL_OW 254
44129: PUSH
44130: LD_INT 1
44132: PLUS
44133: ARRAY
44134: ST_TO_ADDR
// end ;
44135: LD_VAR 0 2
44139: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
44140: LD_INT 0
44142: PPUSH
44143: PPUSH
44144: PPUSH
44145: PPUSH
44146: PPUSH
// if not hexes then
44147: LD_VAR 0 2
44151: NOT
44152: IFFALSE 44156
// exit ;
44154: GO 44304
// dist := 9999 ;
44156: LD_ADDR_VAR 0 5
44160: PUSH
44161: LD_INT 9999
44163: ST_TO_ADDR
// for i = 1 to hexes do
44164: LD_ADDR_VAR 0 4
44168: PUSH
44169: DOUBLE
44170: LD_INT 1
44172: DEC
44173: ST_TO_ADDR
44174: LD_VAR 0 2
44178: PUSH
44179: FOR_TO
44180: IFFALSE 44292
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
44182: LD_VAR 0 1
44186: PPUSH
44187: LD_VAR 0 2
44191: PUSH
44192: LD_VAR 0 4
44196: ARRAY
44197: PUSH
44198: LD_INT 1
44200: ARRAY
44201: PPUSH
44202: LD_VAR 0 2
44206: PUSH
44207: LD_VAR 0 4
44211: ARRAY
44212: PUSH
44213: LD_INT 2
44215: ARRAY
44216: PPUSH
44217: CALL_OW 297
44221: PUSH
44222: LD_VAR 0 5
44226: LESS
44227: IFFALSE 44290
// begin hex := hexes [ i ] ;
44229: LD_ADDR_VAR 0 7
44233: PUSH
44234: LD_VAR 0 2
44238: PUSH
44239: LD_VAR 0 4
44243: ARRAY
44244: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44245: LD_ADDR_VAR 0 5
44249: PUSH
44250: LD_VAR 0 1
44254: PPUSH
44255: LD_VAR 0 2
44259: PUSH
44260: LD_VAR 0 4
44264: ARRAY
44265: PUSH
44266: LD_INT 1
44268: ARRAY
44269: PPUSH
44270: LD_VAR 0 2
44274: PUSH
44275: LD_VAR 0 4
44279: ARRAY
44280: PUSH
44281: LD_INT 2
44283: ARRAY
44284: PPUSH
44285: CALL_OW 297
44289: ST_TO_ADDR
// end ; end ;
44290: GO 44179
44292: POP
44293: POP
// result := hex ;
44294: LD_ADDR_VAR 0 3
44298: PUSH
44299: LD_VAR 0 7
44303: ST_TO_ADDR
// end ;
44304: LD_VAR 0 3
44308: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44309: LD_INT 0
44311: PPUSH
44312: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44313: LD_VAR 0 1
44317: NOT
44318: PUSH
44319: LD_VAR 0 1
44323: PUSH
44324: LD_INT 21
44326: PUSH
44327: LD_INT 2
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 23
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PPUSH
44348: CALL_OW 69
44352: IN
44353: NOT
44354: OR
44355: IFFALSE 44359
// exit ;
44357: GO 44406
// for i = 1 to 3 do
44359: LD_ADDR_VAR 0 3
44363: PUSH
44364: DOUBLE
44365: LD_INT 1
44367: DEC
44368: ST_TO_ADDR
44369: LD_INT 3
44371: PUSH
44372: FOR_TO
44373: IFFALSE 44404
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44375: LD_VAR 0 1
44379: PPUSH
44380: CALL_OW 250
44384: PPUSH
44385: LD_VAR 0 1
44389: PPUSH
44390: CALL_OW 251
44394: PPUSH
44395: LD_INT 1
44397: PPUSH
44398: CALL_OW 453
44402: GO 44372
44404: POP
44405: POP
// end ;
44406: LD_VAR 0 2
44410: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44411: LD_INT 0
44413: PPUSH
44414: PPUSH
44415: PPUSH
44416: PPUSH
44417: PPUSH
44418: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
44419: LD_VAR 0 1
44423: NOT
44424: PUSH
44425: LD_VAR 0 2
44429: NOT
44430: OR
44431: PUSH
44432: LD_VAR 0 1
44436: PPUSH
44437: CALL_OW 314
44441: OR
44442: IFFALSE 44446
// exit ;
44444: GO 44887
// x := GetX ( enemy_unit ) ;
44446: LD_ADDR_VAR 0 7
44450: PUSH
44451: LD_VAR 0 2
44455: PPUSH
44456: CALL_OW 250
44460: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44461: LD_ADDR_VAR 0 8
44465: PUSH
44466: LD_VAR 0 2
44470: PPUSH
44471: CALL_OW 251
44475: ST_TO_ADDR
// if not x or not y then
44476: LD_VAR 0 7
44480: NOT
44481: PUSH
44482: LD_VAR 0 8
44486: NOT
44487: OR
44488: IFFALSE 44492
// exit ;
44490: GO 44887
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44492: LD_ADDR_VAR 0 6
44496: PUSH
44497: LD_VAR 0 7
44501: PPUSH
44502: LD_INT 0
44504: PPUSH
44505: LD_INT 4
44507: PPUSH
44508: CALL_OW 272
44512: PUSH
44513: LD_VAR 0 8
44517: PPUSH
44518: LD_INT 0
44520: PPUSH
44521: LD_INT 4
44523: PPUSH
44524: CALL_OW 273
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_VAR 0 7
44537: PPUSH
44538: LD_INT 1
44540: PPUSH
44541: LD_INT 4
44543: PPUSH
44544: CALL_OW 272
44548: PUSH
44549: LD_VAR 0 8
44553: PPUSH
44554: LD_INT 1
44556: PPUSH
44557: LD_INT 4
44559: PPUSH
44560: CALL_OW 273
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_VAR 0 7
44573: PPUSH
44574: LD_INT 2
44576: PPUSH
44577: LD_INT 4
44579: PPUSH
44580: CALL_OW 272
44584: PUSH
44585: LD_VAR 0 8
44589: PPUSH
44590: LD_INT 2
44592: PPUSH
44593: LD_INT 4
44595: PPUSH
44596: CALL_OW 273
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_VAR 0 7
44609: PPUSH
44610: LD_INT 3
44612: PPUSH
44613: LD_INT 4
44615: PPUSH
44616: CALL_OW 272
44620: PUSH
44621: LD_VAR 0 8
44625: PPUSH
44626: LD_INT 3
44628: PPUSH
44629: LD_INT 4
44631: PPUSH
44632: CALL_OW 273
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_VAR 0 7
44645: PPUSH
44646: LD_INT 4
44648: PPUSH
44649: LD_INT 4
44651: PPUSH
44652: CALL_OW 272
44656: PUSH
44657: LD_VAR 0 8
44661: PPUSH
44662: LD_INT 4
44664: PPUSH
44665: LD_INT 4
44667: PPUSH
44668: CALL_OW 273
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_VAR 0 7
44681: PPUSH
44682: LD_INT 5
44684: PPUSH
44685: LD_INT 4
44687: PPUSH
44688: CALL_OW 272
44692: PUSH
44693: LD_VAR 0 8
44697: PPUSH
44698: LD_INT 5
44700: PPUSH
44701: LD_INT 4
44703: PPUSH
44704: CALL_OW 273
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: ST_TO_ADDR
// for i = tmp downto 1 do
44721: LD_ADDR_VAR 0 4
44725: PUSH
44726: DOUBLE
44727: LD_VAR 0 6
44731: INC
44732: ST_TO_ADDR
44733: LD_INT 1
44735: PUSH
44736: FOR_DOWNTO
44737: IFFALSE 44838
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44739: LD_VAR 0 6
44743: PUSH
44744: LD_VAR 0 4
44748: ARRAY
44749: PUSH
44750: LD_INT 1
44752: ARRAY
44753: PPUSH
44754: LD_VAR 0 6
44758: PUSH
44759: LD_VAR 0 4
44763: ARRAY
44764: PUSH
44765: LD_INT 2
44767: ARRAY
44768: PPUSH
44769: CALL_OW 488
44773: NOT
44774: PUSH
44775: LD_VAR 0 6
44779: PUSH
44780: LD_VAR 0 4
44784: ARRAY
44785: PUSH
44786: LD_INT 1
44788: ARRAY
44789: PPUSH
44790: LD_VAR 0 6
44794: PUSH
44795: LD_VAR 0 4
44799: ARRAY
44800: PUSH
44801: LD_INT 2
44803: ARRAY
44804: PPUSH
44805: CALL_OW 428
44809: PUSH
44810: LD_INT 0
44812: NONEQUAL
44813: OR
44814: IFFALSE 44836
// tmp := Delete ( tmp , i ) ;
44816: LD_ADDR_VAR 0 6
44820: PUSH
44821: LD_VAR 0 6
44825: PPUSH
44826: LD_VAR 0 4
44830: PPUSH
44831: CALL_OW 3
44835: ST_TO_ADDR
44836: GO 44736
44838: POP
44839: POP
// j := GetClosestHex ( unit , tmp ) ;
44840: LD_ADDR_VAR 0 5
44844: PUSH
44845: LD_VAR 0 1
44849: PPUSH
44850: LD_VAR 0 6
44854: PPUSH
44855: CALL 44140 0 2
44859: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44860: LD_VAR 0 1
44864: PPUSH
44865: LD_VAR 0 5
44869: PUSH
44870: LD_INT 1
44872: ARRAY
44873: PPUSH
44874: LD_VAR 0 5
44878: PUSH
44879: LD_INT 2
44881: ARRAY
44882: PPUSH
44883: CALL_OW 111
// end ;
44887: LD_VAR 0 3
44891: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44892: LD_INT 0
44894: PPUSH
44895: PPUSH
44896: PPUSH
// uc_side = 0 ;
44897: LD_ADDR_OWVAR 20
44901: PUSH
44902: LD_INT 0
44904: ST_TO_ADDR
// uc_nation = 0 ;
44905: LD_ADDR_OWVAR 21
44909: PUSH
44910: LD_INT 0
44912: ST_TO_ADDR
// InitHc ;
44913: CALL_OW 19
// InitVc ;
44917: CALL_OW 20
// if mastodonts then
44921: LD_VAR 0 6
44925: IFFALSE 44992
// for i = 1 to mastodonts do
44927: LD_ADDR_VAR 0 11
44931: PUSH
44932: DOUBLE
44933: LD_INT 1
44935: DEC
44936: ST_TO_ADDR
44937: LD_VAR 0 6
44941: PUSH
44942: FOR_TO
44943: IFFALSE 44990
// begin vc_chassis := 31 ;
44945: LD_ADDR_OWVAR 37
44949: PUSH
44950: LD_INT 31
44952: ST_TO_ADDR
// vc_control := control_rider ;
44953: LD_ADDR_OWVAR 38
44957: PUSH
44958: LD_INT 4
44960: ST_TO_ADDR
// animal := CreateVehicle ;
44961: LD_ADDR_VAR 0 12
44965: PUSH
44966: CALL_OW 45
44970: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
44971: LD_VAR 0 12
44975: PPUSH
44976: LD_VAR 0 8
44980: PPUSH
44981: LD_INT 0
44983: PPUSH
44984: CALL_OW 49
// end ;
44988: GO 44942
44990: POP
44991: POP
// if horses then
44992: LD_VAR 0 5
44996: IFFALSE 45063
// for i = 1 to horses do
44998: LD_ADDR_VAR 0 11
45002: PUSH
45003: DOUBLE
45004: LD_INT 1
45006: DEC
45007: ST_TO_ADDR
45008: LD_VAR 0 5
45012: PUSH
45013: FOR_TO
45014: IFFALSE 45061
// begin hc_class := 21 ;
45016: LD_ADDR_OWVAR 28
45020: PUSH
45021: LD_INT 21
45023: ST_TO_ADDR
// hc_gallery :=  ;
45024: LD_ADDR_OWVAR 33
45028: PUSH
45029: LD_STRING 
45031: ST_TO_ADDR
// animal := CreateHuman ;
45032: LD_ADDR_VAR 0 12
45036: PUSH
45037: CALL_OW 44
45041: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
45042: LD_VAR 0 12
45046: PPUSH
45047: LD_VAR 0 8
45051: PPUSH
45052: LD_INT 0
45054: PPUSH
45055: CALL_OW 49
// end ;
45059: GO 45013
45061: POP
45062: POP
// if birds then
45063: LD_VAR 0 1
45067: IFFALSE 45134
// for i = 1 to birds do
45069: LD_ADDR_VAR 0 11
45073: PUSH
45074: DOUBLE
45075: LD_INT 1
45077: DEC
45078: ST_TO_ADDR
45079: LD_VAR 0 1
45083: PUSH
45084: FOR_TO
45085: IFFALSE 45132
// begin hc_class = 18 ;
45087: LD_ADDR_OWVAR 28
45091: PUSH
45092: LD_INT 18
45094: ST_TO_ADDR
// hc_gallery =  ;
45095: LD_ADDR_OWVAR 33
45099: PUSH
45100: LD_STRING 
45102: ST_TO_ADDR
// animal := CreateHuman ;
45103: LD_ADDR_VAR 0 12
45107: PUSH
45108: CALL_OW 44
45112: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
45113: LD_VAR 0 12
45117: PPUSH
45118: LD_VAR 0 8
45122: PPUSH
45123: LD_INT 0
45125: PPUSH
45126: CALL_OW 49
// end ;
45130: GO 45084
45132: POP
45133: POP
// if tigers then
45134: LD_VAR 0 2
45138: IFFALSE 45222
// for i = 1 to tigers do
45140: LD_ADDR_VAR 0 11
45144: PUSH
45145: DOUBLE
45146: LD_INT 1
45148: DEC
45149: ST_TO_ADDR
45150: LD_VAR 0 2
45154: PUSH
45155: FOR_TO
45156: IFFALSE 45220
// begin hc_class = class_tiger ;
45158: LD_ADDR_OWVAR 28
45162: PUSH
45163: LD_INT 14
45165: ST_TO_ADDR
// hc_gallery =  ;
45166: LD_ADDR_OWVAR 33
45170: PUSH
45171: LD_STRING 
45173: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45174: LD_ADDR_OWVAR 35
45178: PUSH
45179: LD_INT 7
45181: NEG
45182: PPUSH
45183: LD_INT 7
45185: PPUSH
45186: CALL_OW 12
45190: ST_TO_ADDR
// animal := CreateHuman ;
45191: LD_ADDR_VAR 0 12
45195: PUSH
45196: CALL_OW 44
45200: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
45201: LD_VAR 0 12
45205: PPUSH
45206: LD_VAR 0 8
45210: PPUSH
45211: LD_INT 0
45213: PPUSH
45214: CALL_OW 49
// end ;
45218: GO 45155
45220: POP
45221: POP
// if apemans then
45222: LD_VAR 0 3
45226: IFFALSE 45349
// for i = 1 to apemans do
45228: LD_ADDR_VAR 0 11
45232: PUSH
45233: DOUBLE
45234: LD_INT 1
45236: DEC
45237: ST_TO_ADDR
45238: LD_VAR 0 3
45242: PUSH
45243: FOR_TO
45244: IFFALSE 45347
// begin hc_class = class_apeman ;
45246: LD_ADDR_OWVAR 28
45250: PUSH
45251: LD_INT 12
45253: ST_TO_ADDR
// hc_gallery =  ;
45254: LD_ADDR_OWVAR 33
45258: PUSH
45259: LD_STRING 
45261: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
45262: LD_ADDR_OWVAR 35
45266: PUSH
45267: LD_INT 5
45269: NEG
45270: PPUSH
45271: LD_INT 5
45273: PPUSH
45274: CALL_OW 12
45278: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45279: LD_ADDR_OWVAR 31
45283: PUSH
45284: LD_INT 1
45286: PPUSH
45287: LD_INT 3
45289: PPUSH
45290: CALL_OW 12
45294: PUSH
45295: LD_INT 1
45297: PPUSH
45298: LD_INT 3
45300: PPUSH
45301: CALL_OW 12
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: ST_TO_ADDR
// animal := CreateHuman ;
45318: LD_ADDR_VAR 0 12
45322: PUSH
45323: CALL_OW 44
45327: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
45328: LD_VAR 0 12
45332: PPUSH
45333: LD_VAR 0 8
45337: PPUSH
45338: LD_INT 0
45340: PPUSH
45341: CALL_OW 49
// end ;
45345: GO 45243
45347: POP
45348: POP
// if enchidnas then
45349: LD_VAR 0 4
45353: IFFALSE 45420
// for i = 1 to enchidnas do
45355: LD_ADDR_VAR 0 11
45359: PUSH
45360: DOUBLE
45361: LD_INT 1
45363: DEC
45364: ST_TO_ADDR
45365: LD_VAR 0 4
45369: PUSH
45370: FOR_TO
45371: IFFALSE 45418
// begin hc_class = 13 ;
45373: LD_ADDR_OWVAR 28
45377: PUSH
45378: LD_INT 13
45380: ST_TO_ADDR
// hc_gallery =  ;
45381: LD_ADDR_OWVAR 33
45385: PUSH
45386: LD_STRING 
45388: ST_TO_ADDR
// animal := CreateHuman ;
45389: LD_ADDR_VAR 0 12
45393: PUSH
45394: CALL_OW 44
45398: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
45399: LD_VAR 0 12
45403: PPUSH
45404: LD_VAR 0 8
45408: PPUSH
45409: LD_INT 0
45411: PPUSH
45412: CALL_OW 49
// end ;
45416: GO 45370
45418: POP
45419: POP
// if not wat_area then
45420: LD_VAR 0 9
45424: NOT
45425: IFFALSE 45429
// exit ;
45427: GO 45500
// if fishes then
45429: LD_VAR 0 7
45433: IFFALSE 45500
// for i = 1 to fishes do
45435: LD_ADDR_VAR 0 11
45439: PUSH
45440: DOUBLE
45441: LD_INT 1
45443: DEC
45444: ST_TO_ADDR
45445: LD_VAR 0 7
45449: PUSH
45450: FOR_TO
45451: IFFALSE 45498
// begin hc_class = 20 ;
45453: LD_ADDR_OWVAR 28
45457: PUSH
45458: LD_INT 20
45460: ST_TO_ADDR
// hc_gallery =  ;
45461: LD_ADDR_OWVAR 33
45465: PUSH
45466: LD_STRING 
45468: ST_TO_ADDR
// animal := CreateHuman ;
45469: LD_ADDR_VAR 0 12
45473: PUSH
45474: CALL_OW 44
45478: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
45479: LD_VAR 0 12
45483: PPUSH
45484: LD_VAR 0 9
45488: PPUSH
45489: LD_INT 0
45491: PPUSH
45492: CALL_OW 49
// end ;
45496: GO 45450
45498: POP
45499: POP
// end ;
45500: LD_VAR 0 10
45504: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
45505: LD_INT 0
45507: PPUSH
45508: PPUSH
45509: PPUSH
45510: PPUSH
45511: PPUSH
45512: PPUSH
45513: PPUSH
45514: PPUSH
45515: PPUSH
45516: PPUSH
45517: PPUSH
45518: PPUSH
45519: PPUSH
45520: PPUSH
45521: PPUSH
45522: PPUSH
45523: PPUSH
45524: PPUSH
45525: PPUSH
45526: PPUSH
45527: PPUSH
45528: PPUSH
45529: PPUSH
45530: PPUSH
45531: PPUSH
45532: PPUSH
45533: PPUSH
45534: PPUSH
// if not list then
45535: LD_VAR 0 1
45539: NOT
45540: IFFALSE 45544
// exit ;
45542: GO 48787
// base := list [ 1 ] ;
45544: LD_ADDR_VAR 0 3
45548: PUSH
45549: LD_VAR 0 1
45553: PUSH
45554: LD_INT 1
45556: ARRAY
45557: ST_TO_ADDR
// group := list [ 2 ] ;
45558: LD_ADDR_VAR 0 4
45562: PUSH
45563: LD_VAR 0 1
45567: PUSH
45568: LD_INT 2
45570: ARRAY
45571: ST_TO_ADDR
// path := list [ 3 ] ;
45572: LD_ADDR_VAR 0 5
45576: PUSH
45577: LD_VAR 0 1
45581: PUSH
45582: LD_INT 3
45584: ARRAY
45585: ST_TO_ADDR
// flags := list [ 4 ] ;
45586: LD_ADDR_VAR 0 6
45590: PUSH
45591: LD_VAR 0 1
45595: PUSH
45596: LD_INT 4
45598: ARRAY
45599: ST_TO_ADDR
// mined := [ ] ;
45600: LD_ADDR_VAR 0 27
45604: PUSH
45605: EMPTY
45606: ST_TO_ADDR
// bombed := [ ] ;
45607: LD_ADDR_VAR 0 28
45611: PUSH
45612: EMPTY
45613: ST_TO_ADDR
// if not group or not path then
45614: LD_VAR 0 4
45618: NOT
45619: PUSH
45620: LD_VAR 0 5
45624: NOT
45625: OR
45626: IFFALSE 45630
// exit ;
45628: GO 48787
// if flags then
45630: LD_VAR 0 6
45634: IFFALSE 45778
// begin f_ignore_area := flags [ 1 ] ;
45636: LD_ADDR_VAR 0 17
45640: PUSH
45641: LD_VAR 0 6
45645: PUSH
45646: LD_INT 1
45648: ARRAY
45649: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
45650: LD_ADDR_VAR 0 18
45654: PUSH
45655: LD_VAR 0 6
45659: PUSH
45660: LD_INT 2
45662: ARRAY
45663: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
45664: LD_ADDR_VAR 0 19
45668: PUSH
45669: LD_VAR 0 6
45673: PUSH
45674: LD_INT 3
45676: ARRAY
45677: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
45678: LD_ADDR_VAR 0 20
45682: PUSH
45683: LD_VAR 0 6
45687: PUSH
45688: LD_INT 4
45690: ARRAY
45691: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
45692: LD_ADDR_VAR 0 21
45696: PUSH
45697: LD_VAR 0 6
45701: PUSH
45702: LD_INT 5
45704: ARRAY
45705: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
45706: LD_ADDR_VAR 0 22
45710: PUSH
45711: LD_VAR 0 6
45715: PUSH
45716: LD_INT 6
45718: ARRAY
45719: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
45720: LD_ADDR_VAR 0 23
45724: PUSH
45725: LD_VAR 0 6
45729: PUSH
45730: LD_INT 7
45732: ARRAY
45733: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
45734: LD_ADDR_VAR 0 24
45738: PUSH
45739: LD_VAR 0 6
45743: PUSH
45744: LD_INT 8
45746: ARRAY
45747: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
45748: LD_ADDR_VAR 0 25
45752: PUSH
45753: LD_VAR 0 6
45757: PUSH
45758: LD_INT 9
45760: ARRAY
45761: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
45762: LD_ADDR_VAR 0 26
45766: PUSH
45767: LD_VAR 0 6
45771: PUSH
45772: LD_INT 10
45774: ARRAY
45775: ST_TO_ADDR
// end else
45776: GO 45858
// begin f_ignore_area := false ;
45778: LD_ADDR_VAR 0 17
45782: PUSH
45783: LD_INT 0
45785: ST_TO_ADDR
// f_capture := false ;
45786: LD_ADDR_VAR 0 18
45790: PUSH
45791: LD_INT 0
45793: ST_TO_ADDR
// f_ignore_civ := false ;
45794: LD_ADDR_VAR 0 19
45798: PUSH
45799: LD_INT 0
45801: ST_TO_ADDR
// f_murder := false ;
45802: LD_ADDR_VAR 0 20
45806: PUSH
45807: LD_INT 0
45809: ST_TO_ADDR
// f_mines := false ;
45810: LD_ADDR_VAR 0 21
45814: PUSH
45815: LD_INT 0
45817: ST_TO_ADDR
// f_repair := false ;
45818: LD_ADDR_VAR 0 22
45822: PUSH
45823: LD_INT 0
45825: ST_TO_ADDR
// f_heal := false ;
45826: LD_ADDR_VAR 0 23
45830: PUSH
45831: LD_INT 0
45833: ST_TO_ADDR
// f_spacetime := false ;
45834: LD_ADDR_VAR 0 24
45838: PUSH
45839: LD_INT 0
45841: ST_TO_ADDR
// f_attack_depot := false ;
45842: LD_ADDR_VAR 0 25
45846: PUSH
45847: LD_INT 0
45849: ST_TO_ADDR
// f_crawl := false ;
45850: LD_ADDR_VAR 0 26
45854: PUSH
45855: LD_INT 0
45857: ST_TO_ADDR
// end ; units_path := [ ] ;
45858: LD_ADDR_VAR 0 16
45862: PUSH
45863: EMPTY
45864: ST_TO_ADDR
// for i = 1 to group do
45865: LD_ADDR_VAR 0 7
45869: PUSH
45870: DOUBLE
45871: LD_INT 1
45873: DEC
45874: ST_TO_ADDR
45875: LD_VAR 0 4
45879: PUSH
45880: FOR_TO
45881: IFFALSE 45910
// begin units_path := Replace ( units_path , i , path ) ;
45883: LD_ADDR_VAR 0 16
45887: PUSH
45888: LD_VAR 0 16
45892: PPUSH
45893: LD_VAR 0 7
45897: PPUSH
45898: LD_VAR 0 5
45902: PPUSH
45903: CALL_OW 1
45907: ST_TO_ADDR
// end ;
45908: GO 45880
45910: POP
45911: POP
// repeat for i = group downto 1 do
45912: LD_ADDR_VAR 0 7
45916: PUSH
45917: DOUBLE
45918: LD_VAR 0 4
45922: INC
45923: ST_TO_ADDR
45924: LD_INT 1
45926: PUSH
45927: FOR_DOWNTO
45928: IFFALSE 48769
// begin wait ( 0 0$1 ) ;
45930: LD_INT 35
45932: PPUSH
45933: CALL_OW 67
// tmp := [ ] ;
45937: LD_ADDR_VAR 0 14
45941: PUSH
45942: EMPTY
45943: ST_TO_ADDR
// attacking := false ;
45944: LD_ADDR_VAR 0 29
45948: PUSH
45949: LD_INT 0
45951: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
45952: LD_VAR 0 4
45956: PUSH
45957: LD_VAR 0 7
45961: ARRAY
45962: PPUSH
45963: CALL_OW 301
45967: PUSH
45968: LD_VAR 0 4
45972: PUSH
45973: LD_VAR 0 7
45977: ARRAY
45978: NOT
45979: OR
45980: IFFALSE 46024
// begin group := Delete ( group , i ) ;
45982: LD_ADDR_VAR 0 4
45986: PUSH
45987: LD_VAR 0 4
45991: PPUSH
45992: LD_VAR 0 7
45996: PPUSH
45997: CALL_OW 3
46001: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
46002: LD_ADDR_VAR 0 16
46006: PUSH
46007: LD_VAR 0 16
46011: PPUSH
46012: LD_VAR 0 7
46016: PPUSH
46017: CALL_OW 3
46021: ST_TO_ADDR
// continue ;
46022: GO 45927
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
46024: LD_VAR 0 4
46028: PUSH
46029: LD_VAR 0 7
46033: ARRAY
46034: PPUSH
46035: LD_INT 10
46037: PPUSH
46038: CALL 43992 0 2
46042: NOT
46043: PUSH
46044: LD_VAR 0 16
46048: PUSH
46049: LD_VAR 0 7
46053: ARRAY
46054: PUSH
46055: EMPTY
46056: EQUAL
46057: NOT
46058: AND
46059: IFFALSE 46325
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
46061: LD_VAR 0 4
46065: PUSH
46066: LD_VAR 0 7
46070: ARRAY
46071: PPUSH
46072: CALL_OW 262
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: LD_INT 2
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: IN
46087: IFFALSE 46128
// if GetFuel ( group [ i ] ) < 10 then
46089: LD_VAR 0 4
46093: PUSH
46094: LD_VAR 0 7
46098: ARRAY
46099: PPUSH
46100: CALL_OW 261
46104: PUSH
46105: LD_INT 10
46107: LESS
46108: IFFALSE 46128
// SetFuel ( group [ i ] , 12 ) ;
46110: LD_VAR 0 4
46114: PUSH
46115: LD_VAR 0 7
46119: ARRAY
46120: PPUSH
46121: LD_INT 12
46123: PPUSH
46124: CALL_OW 240
// if units_path [ i ] then
46128: LD_VAR 0 16
46132: PUSH
46133: LD_VAR 0 7
46137: ARRAY
46138: IFFALSE 46323
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
46140: LD_VAR 0 4
46144: PUSH
46145: LD_VAR 0 7
46149: ARRAY
46150: PPUSH
46151: LD_VAR 0 16
46155: PUSH
46156: LD_VAR 0 7
46160: ARRAY
46161: PUSH
46162: LD_INT 1
46164: ARRAY
46165: PUSH
46166: LD_INT 1
46168: ARRAY
46169: PPUSH
46170: LD_VAR 0 16
46174: PUSH
46175: LD_VAR 0 7
46179: ARRAY
46180: PUSH
46181: LD_INT 1
46183: ARRAY
46184: PUSH
46185: LD_INT 2
46187: ARRAY
46188: PPUSH
46189: CALL_OW 297
46193: PUSH
46194: LD_INT 6
46196: GREATER
46197: IFFALSE 46272
// begin if not HasTask ( group [ i ] ) then
46199: LD_VAR 0 4
46203: PUSH
46204: LD_VAR 0 7
46208: ARRAY
46209: PPUSH
46210: CALL_OW 314
46214: NOT
46215: IFFALSE 46270
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
46217: LD_VAR 0 4
46221: PUSH
46222: LD_VAR 0 7
46226: ARRAY
46227: PPUSH
46228: LD_VAR 0 16
46232: PUSH
46233: LD_VAR 0 7
46237: ARRAY
46238: PUSH
46239: LD_INT 1
46241: ARRAY
46242: PUSH
46243: LD_INT 1
46245: ARRAY
46246: PPUSH
46247: LD_VAR 0 16
46251: PUSH
46252: LD_VAR 0 7
46256: ARRAY
46257: PUSH
46258: LD_INT 1
46260: ARRAY
46261: PUSH
46262: LD_INT 2
46264: ARRAY
46265: PPUSH
46266: CALL_OW 114
// end else
46270: GO 46323
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
46272: LD_ADDR_VAR 0 15
46276: PUSH
46277: LD_VAR 0 16
46281: PUSH
46282: LD_VAR 0 7
46286: ARRAY
46287: PPUSH
46288: LD_INT 1
46290: PPUSH
46291: CALL_OW 3
46295: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
46296: LD_ADDR_VAR 0 16
46300: PUSH
46301: LD_VAR 0 16
46305: PPUSH
46306: LD_VAR 0 7
46310: PPUSH
46311: LD_VAR 0 15
46315: PPUSH
46316: CALL_OW 1
46320: ST_TO_ADDR
// continue ;
46321: GO 45927
// end ; end ; end else
46323: GO 48767
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
46325: LD_ADDR_VAR 0 14
46329: PUSH
46330: LD_INT 81
46332: PUSH
46333: LD_VAR 0 4
46337: PUSH
46338: LD_VAR 0 7
46342: ARRAY
46343: PPUSH
46344: CALL_OW 255
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PPUSH
46353: CALL_OW 69
46357: ST_TO_ADDR
// if not tmp then
46358: LD_VAR 0 14
46362: NOT
46363: IFFALSE 46367
// continue ;
46365: GO 45927
// if f_ignore_area then
46367: LD_VAR 0 17
46371: IFFALSE 46459
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
46373: LD_ADDR_VAR 0 15
46377: PUSH
46378: LD_VAR 0 14
46382: PPUSH
46383: LD_INT 3
46385: PUSH
46386: LD_INT 92
46388: PUSH
46389: LD_VAR 0 17
46393: PUSH
46394: LD_INT 1
46396: ARRAY
46397: PUSH
46398: LD_VAR 0 17
46402: PUSH
46403: LD_INT 2
46405: ARRAY
46406: PUSH
46407: LD_VAR 0 17
46411: PUSH
46412: LD_INT 3
46414: ARRAY
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PPUSH
46426: CALL_OW 72
46430: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
46431: LD_VAR 0 14
46435: PUSH
46436: LD_VAR 0 15
46440: DIFF
46441: IFFALSE 46459
// tmp := tmp diff tmp2 ;
46443: LD_ADDR_VAR 0 14
46447: PUSH
46448: LD_VAR 0 14
46452: PUSH
46453: LD_VAR 0 15
46457: DIFF
46458: ST_TO_ADDR
// end ; if not f_murder then
46459: LD_VAR 0 20
46463: NOT
46464: IFFALSE 46522
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
46466: LD_ADDR_VAR 0 15
46470: PUSH
46471: LD_VAR 0 14
46475: PPUSH
46476: LD_INT 3
46478: PUSH
46479: LD_INT 50
46481: PUSH
46482: EMPTY
46483: LIST
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PPUSH
46489: CALL_OW 72
46493: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
46494: LD_VAR 0 14
46498: PUSH
46499: LD_VAR 0 15
46503: DIFF
46504: IFFALSE 46522
// tmp := tmp diff tmp2 ;
46506: LD_ADDR_VAR 0 14
46510: PUSH
46511: LD_VAR 0 14
46515: PUSH
46516: LD_VAR 0 15
46520: DIFF
46521: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
46522: LD_ADDR_VAR 0 14
46526: PUSH
46527: LD_VAR 0 4
46531: PUSH
46532: LD_VAR 0 7
46536: ARRAY
46537: PPUSH
46538: LD_VAR 0 14
46542: PPUSH
46543: LD_INT 1
46545: PPUSH
46546: LD_INT 1
46548: PPUSH
46549: CALL 18198 0 4
46553: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
46554: LD_VAR 0 4
46558: PUSH
46559: LD_VAR 0 7
46563: ARRAY
46564: PPUSH
46565: CALL_OW 257
46569: PUSH
46570: LD_INT 1
46572: EQUAL
46573: IFFALSE 47021
// begin if WantPlant ( group [ i ] ) then
46575: LD_VAR 0 4
46579: PUSH
46580: LD_VAR 0 7
46584: ARRAY
46585: PPUSH
46586: CALL 17666 0 1
46590: IFFALSE 46594
// continue ;
46592: GO 45927
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
46594: LD_VAR 0 18
46598: PUSH
46599: LD_VAR 0 4
46603: PUSH
46604: LD_VAR 0 7
46608: ARRAY
46609: PPUSH
46610: CALL_OW 310
46614: NOT
46615: AND
46616: PUSH
46617: LD_VAR 0 14
46621: PUSH
46622: LD_INT 1
46624: ARRAY
46625: PUSH
46626: LD_VAR 0 14
46630: PPUSH
46631: LD_INT 21
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 58
46643: PUSH
46644: EMPTY
46645: LIST
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PPUSH
46651: CALL_OW 72
46655: IN
46656: AND
46657: IFFALSE 46693
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
46659: LD_VAR 0 4
46663: PUSH
46664: LD_VAR 0 7
46668: ARRAY
46669: PPUSH
46670: LD_VAR 0 14
46674: PUSH
46675: LD_INT 1
46677: ARRAY
46678: PPUSH
46679: CALL_OW 120
// attacking := true ;
46683: LD_ADDR_VAR 0 29
46687: PUSH
46688: LD_INT 1
46690: ST_TO_ADDR
// continue ;
46691: GO 45927
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
46693: LD_VAR 0 26
46697: PUSH
46698: LD_VAR 0 4
46702: PUSH
46703: LD_VAR 0 7
46707: ARRAY
46708: PPUSH
46709: CALL_OW 257
46713: PUSH
46714: LD_INT 1
46716: EQUAL
46717: AND
46718: PUSH
46719: LD_VAR 0 4
46723: PUSH
46724: LD_VAR 0 7
46728: ARRAY
46729: PPUSH
46730: CALL_OW 256
46734: PUSH
46735: LD_INT 800
46737: LESS
46738: AND
46739: PUSH
46740: LD_VAR 0 4
46744: PUSH
46745: LD_VAR 0 7
46749: ARRAY
46750: PPUSH
46751: CALL_OW 318
46755: NOT
46756: AND
46757: IFFALSE 46774
// ComCrawl ( group [ i ] ) ;
46759: LD_VAR 0 4
46763: PUSH
46764: LD_VAR 0 7
46768: ARRAY
46769: PPUSH
46770: CALL_OW 137
// if f_mines then
46774: LD_VAR 0 21
46778: IFFALSE 47021
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
46780: LD_VAR 0 14
46784: PUSH
46785: LD_INT 1
46787: ARRAY
46788: PPUSH
46789: CALL_OW 247
46793: PUSH
46794: LD_INT 3
46796: EQUAL
46797: PUSH
46798: LD_VAR 0 14
46802: PUSH
46803: LD_INT 1
46805: ARRAY
46806: PUSH
46807: LD_VAR 0 27
46811: IN
46812: NOT
46813: AND
46814: IFFALSE 47021
// begin x := GetX ( tmp [ 1 ] ) ;
46816: LD_ADDR_VAR 0 10
46820: PUSH
46821: LD_VAR 0 14
46825: PUSH
46826: LD_INT 1
46828: ARRAY
46829: PPUSH
46830: CALL_OW 250
46834: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
46835: LD_ADDR_VAR 0 11
46839: PUSH
46840: LD_VAR 0 14
46844: PUSH
46845: LD_INT 1
46847: ARRAY
46848: PPUSH
46849: CALL_OW 251
46853: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
46854: LD_ADDR_VAR 0 12
46858: PUSH
46859: LD_VAR 0 4
46863: PUSH
46864: LD_VAR 0 7
46868: ARRAY
46869: PPUSH
46870: CALL 44077 0 1
46874: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
46875: LD_VAR 0 4
46879: PUSH
46880: LD_VAR 0 7
46884: ARRAY
46885: PPUSH
46886: LD_VAR 0 10
46890: PPUSH
46891: LD_VAR 0 11
46895: PPUSH
46896: LD_VAR 0 14
46900: PUSH
46901: LD_INT 1
46903: ARRAY
46904: PPUSH
46905: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
46909: LD_VAR 0 4
46913: PUSH
46914: LD_VAR 0 7
46918: ARRAY
46919: PPUSH
46920: LD_VAR 0 10
46924: PPUSH
46925: LD_VAR 0 12
46929: PPUSH
46930: LD_INT 7
46932: PPUSH
46933: CALL_OW 272
46937: PPUSH
46938: LD_VAR 0 11
46942: PPUSH
46943: LD_VAR 0 12
46947: PPUSH
46948: LD_INT 7
46950: PPUSH
46951: CALL_OW 273
46955: PPUSH
46956: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
46960: LD_VAR 0 4
46964: PUSH
46965: LD_VAR 0 7
46969: ARRAY
46970: PPUSH
46971: LD_INT 71
46973: PPUSH
46974: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
46978: LD_ADDR_VAR 0 27
46982: PUSH
46983: LD_VAR 0 27
46987: PPUSH
46988: LD_VAR 0 27
46992: PUSH
46993: LD_INT 1
46995: PLUS
46996: PPUSH
46997: LD_VAR 0 14
47001: PUSH
47002: LD_INT 1
47004: ARRAY
47005: PPUSH
47006: CALL_OW 1
47010: ST_TO_ADDR
// attacking := true ;
47011: LD_ADDR_VAR 0 29
47015: PUSH
47016: LD_INT 1
47018: ST_TO_ADDR
// continue ;
47019: GO 45927
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
47021: LD_VAR 0 4
47025: PUSH
47026: LD_VAR 0 7
47030: ARRAY
47031: PPUSH
47032: CALL_OW 257
47036: PUSH
47037: LD_INT 17
47039: EQUAL
47040: PUSH
47041: LD_VAR 0 4
47045: PUSH
47046: LD_VAR 0 7
47050: ARRAY
47051: PPUSH
47052: CALL_OW 110
47056: PUSH
47057: LD_INT 71
47059: EQUAL
47060: NOT
47061: AND
47062: IFFALSE 47208
// begin attacking := false ;
47064: LD_ADDR_VAR 0 29
47068: PUSH
47069: LD_INT 0
47071: ST_TO_ADDR
// k := 5 ;
47072: LD_ADDR_VAR 0 9
47076: PUSH
47077: LD_INT 5
47079: ST_TO_ADDR
// if tmp < k then
47080: LD_VAR 0 14
47084: PUSH
47085: LD_VAR 0 9
47089: LESS
47090: IFFALSE 47102
// k := tmp ;
47092: LD_ADDR_VAR 0 9
47096: PUSH
47097: LD_VAR 0 14
47101: ST_TO_ADDR
// for j = 1 to k do
47102: LD_ADDR_VAR 0 8
47106: PUSH
47107: DOUBLE
47108: LD_INT 1
47110: DEC
47111: ST_TO_ADDR
47112: LD_VAR 0 9
47116: PUSH
47117: FOR_TO
47118: IFFALSE 47206
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
47120: LD_VAR 0 14
47124: PUSH
47125: LD_VAR 0 8
47129: ARRAY
47130: PUSH
47131: LD_VAR 0 14
47135: PPUSH
47136: LD_INT 58
47138: PUSH
47139: EMPTY
47140: LIST
47141: PPUSH
47142: CALL_OW 72
47146: IN
47147: NOT
47148: IFFALSE 47204
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
47150: LD_VAR 0 4
47154: PUSH
47155: LD_VAR 0 7
47159: ARRAY
47160: PPUSH
47161: LD_VAR 0 14
47165: PUSH
47166: LD_VAR 0 8
47170: ARRAY
47171: PPUSH
47172: CALL_OW 115
// attacking := true ;
47176: LD_ADDR_VAR 0 29
47180: PUSH
47181: LD_INT 1
47183: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
47184: LD_VAR 0 4
47188: PUSH
47189: LD_VAR 0 7
47193: ARRAY
47194: PPUSH
47195: LD_INT 71
47197: PPUSH
47198: CALL_OW 109
// continue ;
47202: GO 47117
// end ; end ;
47204: GO 47117
47206: POP
47207: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
47208: LD_VAR 0 4
47212: PUSH
47213: LD_VAR 0 7
47217: ARRAY
47218: PPUSH
47219: CALL_OW 257
47223: PUSH
47224: LD_INT 8
47226: EQUAL
47227: PUSH
47228: LD_VAR 0 4
47232: PUSH
47233: LD_VAR 0 7
47237: ARRAY
47238: PPUSH
47239: CALL_OW 264
47243: PUSH
47244: LD_INT 28
47246: PUSH
47247: LD_INT 45
47249: PUSH
47250: LD_INT 7
47252: PUSH
47253: LD_INT 47
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: IN
47262: OR
47263: IFFALSE 47493
// begin attacking := false ;
47265: LD_ADDR_VAR 0 29
47269: PUSH
47270: LD_INT 0
47272: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
47273: LD_VAR 0 14
47277: PUSH
47278: LD_INT 1
47280: ARRAY
47281: PPUSH
47282: CALL_OW 266
47286: PUSH
47287: LD_INT 32
47289: PUSH
47290: LD_INT 31
47292: PUSH
47293: LD_INT 33
47295: PUSH
47296: LD_INT 4
47298: PUSH
47299: LD_INT 5
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: IN
47309: IFFALSE 47493
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
47311: LD_ADDR_VAR 0 9
47315: PUSH
47316: LD_VAR 0 14
47320: PUSH
47321: LD_INT 1
47323: ARRAY
47324: PPUSH
47325: CALL_OW 266
47329: PPUSH
47330: LD_VAR 0 14
47334: PUSH
47335: LD_INT 1
47337: ARRAY
47338: PPUSH
47339: CALL_OW 250
47343: PPUSH
47344: LD_VAR 0 14
47348: PUSH
47349: LD_INT 1
47351: ARRAY
47352: PPUSH
47353: CALL_OW 251
47357: PPUSH
47358: LD_VAR 0 14
47362: PUSH
47363: LD_INT 1
47365: ARRAY
47366: PPUSH
47367: CALL_OW 254
47371: PPUSH
47372: LD_VAR 0 14
47376: PUSH
47377: LD_INT 1
47379: ARRAY
47380: PPUSH
47381: CALL_OW 248
47385: PPUSH
47386: LD_INT 0
47388: PPUSH
47389: CALL 25453 0 6
47393: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
47394: LD_ADDR_VAR 0 8
47398: PUSH
47399: LD_VAR 0 4
47403: PUSH
47404: LD_VAR 0 7
47408: ARRAY
47409: PPUSH
47410: LD_VAR 0 9
47414: PPUSH
47415: CALL 44140 0 2
47419: ST_TO_ADDR
// if j then
47420: LD_VAR 0 8
47424: IFFALSE 47493
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47426: LD_VAR 0 8
47430: PUSH
47431: LD_INT 1
47433: ARRAY
47434: PPUSH
47435: LD_VAR 0 8
47439: PUSH
47440: LD_INT 2
47442: ARRAY
47443: PPUSH
47444: CALL_OW 488
47448: IFFALSE 47493
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
47450: LD_VAR 0 4
47454: PUSH
47455: LD_VAR 0 7
47459: ARRAY
47460: PPUSH
47461: LD_VAR 0 8
47465: PUSH
47466: LD_INT 1
47468: ARRAY
47469: PPUSH
47470: LD_VAR 0 8
47474: PUSH
47475: LD_INT 2
47477: ARRAY
47478: PPUSH
47479: CALL_OW 116
// attacking := true ;
47483: LD_ADDR_VAR 0 29
47487: PUSH
47488: LD_INT 1
47490: ST_TO_ADDR
// continue ;
47491: GO 45927
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
47493: LD_VAR 0 4
47497: PUSH
47498: LD_VAR 0 7
47502: ARRAY
47503: PPUSH
47504: CALL_OW 265
47508: PUSH
47509: LD_INT 11
47511: EQUAL
47512: IFFALSE 47790
// begin k := 10 ;
47514: LD_ADDR_VAR 0 9
47518: PUSH
47519: LD_INT 10
47521: ST_TO_ADDR
// x := 0 ;
47522: LD_ADDR_VAR 0 10
47526: PUSH
47527: LD_INT 0
47529: ST_TO_ADDR
// if tmp < k then
47530: LD_VAR 0 14
47534: PUSH
47535: LD_VAR 0 9
47539: LESS
47540: IFFALSE 47552
// k := tmp ;
47542: LD_ADDR_VAR 0 9
47546: PUSH
47547: LD_VAR 0 14
47551: ST_TO_ADDR
// for j = k downto 1 do
47552: LD_ADDR_VAR 0 8
47556: PUSH
47557: DOUBLE
47558: LD_VAR 0 9
47562: INC
47563: ST_TO_ADDR
47564: LD_INT 1
47566: PUSH
47567: FOR_DOWNTO
47568: IFFALSE 47643
// begin if GetType ( tmp [ j ] ) = unit_human then
47570: LD_VAR 0 14
47574: PUSH
47575: LD_VAR 0 8
47579: ARRAY
47580: PPUSH
47581: CALL_OW 247
47585: PUSH
47586: LD_INT 1
47588: EQUAL
47589: IFFALSE 47641
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
47591: LD_VAR 0 4
47595: PUSH
47596: LD_VAR 0 7
47600: ARRAY
47601: PPUSH
47602: LD_VAR 0 14
47606: PUSH
47607: LD_VAR 0 8
47611: ARRAY
47612: PPUSH
47613: CALL 44411 0 2
// x := tmp [ j ] ;
47617: LD_ADDR_VAR 0 10
47621: PUSH
47622: LD_VAR 0 14
47626: PUSH
47627: LD_VAR 0 8
47631: ARRAY
47632: ST_TO_ADDR
// attacking := true ;
47633: LD_ADDR_VAR 0 29
47637: PUSH
47638: LD_INT 1
47640: ST_TO_ADDR
// end ; end ;
47641: GO 47567
47643: POP
47644: POP
// if not x then
47645: LD_VAR 0 10
47649: NOT
47650: IFFALSE 47790
// begin attacking := true ;
47652: LD_ADDR_VAR 0 29
47656: PUSH
47657: LD_INT 1
47659: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
47660: LD_VAR 0 4
47664: PUSH
47665: LD_VAR 0 7
47669: ARRAY
47670: PPUSH
47671: CALL_OW 250
47675: PPUSH
47676: LD_VAR 0 4
47680: PUSH
47681: LD_VAR 0 7
47685: ARRAY
47686: PPUSH
47687: CALL_OW 251
47691: PPUSH
47692: CALL_OW 546
47696: PUSH
47697: LD_INT 2
47699: ARRAY
47700: PUSH
47701: LD_VAR 0 14
47705: PUSH
47706: LD_INT 1
47708: ARRAY
47709: PPUSH
47710: CALL_OW 250
47714: PPUSH
47715: LD_VAR 0 14
47719: PUSH
47720: LD_INT 1
47722: ARRAY
47723: PPUSH
47724: CALL_OW 251
47728: PPUSH
47729: CALL_OW 546
47733: PUSH
47734: LD_INT 2
47736: ARRAY
47737: EQUAL
47738: IFFALSE 47766
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
47740: LD_VAR 0 4
47744: PUSH
47745: LD_VAR 0 7
47749: ARRAY
47750: PPUSH
47751: LD_VAR 0 14
47755: PUSH
47756: LD_INT 1
47758: ARRAY
47759: PPUSH
47760: CALL 44411 0 2
47764: GO 47790
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
47766: LD_VAR 0 4
47770: PUSH
47771: LD_VAR 0 7
47775: ARRAY
47776: PPUSH
47777: LD_VAR 0 14
47781: PUSH
47782: LD_INT 1
47784: ARRAY
47785: PPUSH
47786: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
47790: LD_VAR 0 4
47794: PUSH
47795: LD_VAR 0 7
47799: ARRAY
47800: PPUSH
47801: CALL_OW 264
47805: PUSH
47806: LD_INT 29
47808: EQUAL
47809: IFFALSE 48175
// begin if WantsToAttack ( group [ i ] ) in bombed then
47811: LD_VAR 0 4
47815: PUSH
47816: LD_VAR 0 7
47820: ARRAY
47821: PPUSH
47822: CALL_OW 319
47826: PUSH
47827: LD_VAR 0 28
47831: IN
47832: IFFALSE 47836
// continue ;
47834: GO 45927
// k := 8 ;
47836: LD_ADDR_VAR 0 9
47840: PUSH
47841: LD_INT 8
47843: ST_TO_ADDR
// x := 0 ;
47844: LD_ADDR_VAR 0 10
47848: PUSH
47849: LD_INT 0
47851: ST_TO_ADDR
// if tmp < k then
47852: LD_VAR 0 14
47856: PUSH
47857: LD_VAR 0 9
47861: LESS
47862: IFFALSE 47874
// k := tmp ;
47864: LD_ADDR_VAR 0 9
47868: PUSH
47869: LD_VAR 0 14
47873: ST_TO_ADDR
// for j = 1 to k do
47874: LD_ADDR_VAR 0 8
47878: PUSH
47879: DOUBLE
47880: LD_INT 1
47882: DEC
47883: ST_TO_ADDR
47884: LD_VAR 0 9
47888: PUSH
47889: FOR_TO
47890: IFFALSE 48022
// begin if GetType ( tmp [ j ] ) = unit_building then
47892: LD_VAR 0 14
47896: PUSH
47897: LD_VAR 0 8
47901: ARRAY
47902: PPUSH
47903: CALL_OW 247
47907: PUSH
47908: LD_INT 3
47910: EQUAL
47911: IFFALSE 48020
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
47913: LD_VAR 0 14
47917: PUSH
47918: LD_VAR 0 8
47922: ARRAY
47923: PUSH
47924: LD_VAR 0 28
47928: IN
47929: NOT
47930: PUSH
47931: LD_VAR 0 14
47935: PUSH
47936: LD_VAR 0 8
47940: ARRAY
47941: PPUSH
47942: CALL_OW 313
47946: AND
47947: IFFALSE 48020
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
47949: LD_VAR 0 4
47953: PUSH
47954: LD_VAR 0 7
47958: ARRAY
47959: PPUSH
47960: LD_VAR 0 14
47964: PUSH
47965: LD_VAR 0 8
47969: ARRAY
47970: PPUSH
47971: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
47975: LD_ADDR_VAR 0 28
47979: PUSH
47980: LD_VAR 0 28
47984: PPUSH
47985: LD_VAR 0 28
47989: PUSH
47990: LD_INT 1
47992: PLUS
47993: PPUSH
47994: LD_VAR 0 14
47998: PUSH
47999: LD_VAR 0 8
48003: ARRAY
48004: PPUSH
48005: CALL_OW 1
48009: ST_TO_ADDR
// attacking := true ;
48010: LD_ADDR_VAR 0 29
48014: PUSH
48015: LD_INT 1
48017: ST_TO_ADDR
// break ;
48018: GO 48022
// end ; end ;
48020: GO 47889
48022: POP
48023: POP
// if not attacking and f_attack_depot then
48024: LD_VAR 0 29
48028: NOT
48029: PUSH
48030: LD_VAR 0 25
48034: AND
48035: IFFALSE 48130
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
48037: LD_ADDR_VAR 0 13
48041: PUSH
48042: LD_VAR 0 14
48046: PPUSH
48047: LD_INT 2
48049: PUSH
48050: LD_INT 30
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 30
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: LIST
48074: PPUSH
48075: CALL_OW 72
48079: ST_TO_ADDR
// if z then
48080: LD_VAR 0 13
48084: IFFALSE 48130
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
48086: LD_VAR 0 4
48090: PUSH
48091: LD_VAR 0 7
48095: ARRAY
48096: PPUSH
48097: LD_VAR 0 13
48101: PPUSH
48102: LD_VAR 0 4
48106: PUSH
48107: LD_VAR 0 7
48111: ARRAY
48112: PPUSH
48113: CALL_OW 74
48117: PPUSH
48118: CALL_OW 115
// attacking := true ;
48122: LD_ADDR_VAR 0 29
48126: PUSH
48127: LD_INT 1
48129: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
48130: LD_VAR 0 4
48134: PUSH
48135: LD_VAR 0 7
48139: ARRAY
48140: PPUSH
48141: CALL_OW 256
48145: PUSH
48146: LD_INT 500
48148: LESS
48149: IFFALSE 48175
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
48151: LD_VAR 0 4
48155: PUSH
48156: LD_VAR 0 7
48160: ARRAY
48161: PPUSH
48162: LD_VAR 0 14
48166: PUSH
48167: LD_INT 1
48169: ARRAY
48170: PPUSH
48171: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48175: LD_VAR 0 4
48179: PUSH
48180: LD_VAR 0 7
48184: ARRAY
48185: PPUSH
48186: CALL_OW 256
48190: PUSH
48191: LD_INT 250
48193: LESS
48194: PUSH
48195: LD_VAR 0 4
48199: PUSH
48200: LD_VAR 0 7
48204: ARRAY
48205: PUSH
48206: LD_INT 21
48208: PUSH
48209: LD_INT 2
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 23
48218: PUSH
48219: LD_INT 2
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PPUSH
48230: CALL_OW 69
48234: IN
48235: AND
48236: IFFALSE 48361
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
48238: LD_ADDR_VAR 0 9
48242: PUSH
48243: LD_OWVAR 3
48247: PUSH
48248: LD_VAR 0 4
48252: PUSH
48253: LD_VAR 0 7
48257: ARRAY
48258: DIFF
48259: PPUSH
48260: LD_VAR 0 4
48264: PUSH
48265: LD_VAR 0 7
48269: ARRAY
48270: PPUSH
48271: CALL_OW 74
48275: ST_TO_ADDR
// if not k then
48276: LD_VAR 0 9
48280: NOT
48281: IFFALSE 48285
// continue ;
48283: GO 45927
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
48285: LD_VAR 0 9
48289: PUSH
48290: LD_INT 81
48292: PUSH
48293: LD_VAR 0 4
48297: PUSH
48298: LD_VAR 0 7
48302: ARRAY
48303: PPUSH
48304: CALL_OW 255
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PPUSH
48313: CALL_OW 69
48317: IN
48318: PUSH
48319: LD_VAR 0 9
48323: PPUSH
48324: LD_VAR 0 4
48328: PUSH
48329: LD_VAR 0 7
48333: ARRAY
48334: PPUSH
48335: CALL_OW 296
48339: PUSH
48340: LD_INT 5
48342: LESS
48343: AND
48344: IFFALSE 48361
// ComAutodestruct ( group [ i ] ) ;
48346: LD_VAR 0 4
48350: PUSH
48351: LD_VAR 0 7
48355: ARRAY
48356: PPUSH
48357: CALL 44309 0 1
// end ; if f_attack_depot then
48361: LD_VAR 0 25
48365: IFFALSE 48477
// begin k := 6 ;
48367: LD_ADDR_VAR 0 9
48371: PUSH
48372: LD_INT 6
48374: ST_TO_ADDR
// if tmp < k then
48375: LD_VAR 0 14
48379: PUSH
48380: LD_VAR 0 9
48384: LESS
48385: IFFALSE 48397
// k := tmp ;
48387: LD_ADDR_VAR 0 9
48391: PUSH
48392: LD_VAR 0 14
48396: ST_TO_ADDR
// for j = 1 to k do
48397: LD_ADDR_VAR 0 8
48401: PUSH
48402: DOUBLE
48403: LD_INT 1
48405: DEC
48406: ST_TO_ADDR
48407: LD_VAR 0 9
48411: PUSH
48412: FOR_TO
48413: IFFALSE 48475
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
48415: LD_VAR 0 8
48419: PPUSH
48420: CALL_OW 266
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: IN
48435: IFFALSE 48473
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
48437: LD_VAR 0 4
48441: PUSH
48442: LD_VAR 0 7
48446: ARRAY
48447: PPUSH
48448: LD_VAR 0 14
48452: PUSH
48453: LD_VAR 0 8
48457: ARRAY
48458: PPUSH
48459: CALL_OW 115
// attacking := true ;
48463: LD_ADDR_VAR 0 29
48467: PUSH
48468: LD_INT 1
48470: ST_TO_ADDR
// break ;
48471: GO 48475
// end ;
48473: GO 48412
48475: POP
48476: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
48477: LD_VAR 0 4
48481: PUSH
48482: LD_VAR 0 7
48486: ARRAY
48487: PPUSH
48488: CALL_OW 302
48492: PUSH
48493: LD_VAR 0 29
48497: NOT
48498: AND
48499: IFFALSE 48767
// begin if GetTag ( group [ i ] ) = 71 then
48501: LD_VAR 0 4
48505: PUSH
48506: LD_VAR 0 7
48510: ARRAY
48511: PPUSH
48512: CALL_OW 110
48516: PUSH
48517: LD_INT 71
48519: EQUAL
48520: IFFALSE 48561
// begin if HasTask ( group [ i ] ) then
48522: LD_VAR 0 4
48526: PUSH
48527: LD_VAR 0 7
48531: ARRAY
48532: PPUSH
48533: CALL_OW 314
48537: IFFALSE 48543
// continue else
48539: GO 45927
48541: GO 48561
// SetTag ( group [ i ] , 0 ) ;
48543: LD_VAR 0 4
48547: PUSH
48548: LD_VAR 0 7
48552: ARRAY
48553: PPUSH
48554: LD_INT 0
48556: PPUSH
48557: CALL_OW 109
// end ; k := 8 ;
48561: LD_ADDR_VAR 0 9
48565: PUSH
48566: LD_INT 8
48568: ST_TO_ADDR
// x := 0 ;
48569: LD_ADDR_VAR 0 10
48573: PUSH
48574: LD_INT 0
48576: ST_TO_ADDR
// if tmp < k then
48577: LD_VAR 0 14
48581: PUSH
48582: LD_VAR 0 9
48586: LESS
48587: IFFALSE 48599
// k := tmp ;
48589: LD_ADDR_VAR 0 9
48593: PUSH
48594: LD_VAR 0 14
48598: ST_TO_ADDR
// for j = 1 to k do
48599: LD_ADDR_VAR 0 8
48603: PUSH
48604: DOUBLE
48605: LD_INT 1
48607: DEC
48608: ST_TO_ADDR
48609: LD_VAR 0 9
48613: PUSH
48614: FOR_TO
48615: IFFALSE 48713
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
48617: LD_VAR 0 14
48621: PUSH
48622: LD_VAR 0 8
48626: ARRAY
48627: PPUSH
48628: CALL_OW 247
48632: PUSH
48633: LD_INT 1
48635: EQUAL
48636: PUSH
48637: LD_VAR 0 14
48641: PUSH
48642: LD_VAR 0 8
48646: ARRAY
48647: PPUSH
48648: CALL_OW 256
48652: PUSH
48653: LD_INT 250
48655: LESS
48656: PUSH
48657: LD_VAR 0 20
48661: AND
48662: PUSH
48663: LD_VAR 0 20
48667: NOT
48668: PUSH
48669: LD_VAR 0 14
48673: PUSH
48674: LD_VAR 0 8
48678: ARRAY
48679: PPUSH
48680: CALL_OW 256
48684: PUSH
48685: LD_INT 250
48687: GREATEREQUAL
48688: AND
48689: OR
48690: AND
48691: IFFALSE 48711
// begin x := tmp [ j ] ;
48693: LD_ADDR_VAR 0 10
48697: PUSH
48698: LD_VAR 0 14
48702: PUSH
48703: LD_VAR 0 8
48707: ARRAY
48708: ST_TO_ADDR
// break ;
48709: GO 48713
// end ;
48711: GO 48614
48713: POP
48714: POP
// if x then
48715: LD_VAR 0 10
48719: IFFALSE 48743
// ComAttackUnit ( group [ i ] , x ) else
48721: LD_VAR 0 4
48725: PUSH
48726: LD_VAR 0 7
48730: ARRAY
48731: PPUSH
48732: LD_VAR 0 10
48736: PPUSH
48737: CALL_OW 115
48741: GO 48767
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
48743: LD_VAR 0 4
48747: PUSH
48748: LD_VAR 0 7
48752: ARRAY
48753: PPUSH
48754: LD_VAR 0 14
48758: PUSH
48759: LD_INT 1
48761: ARRAY
48762: PPUSH
48763: CALL_OW 115
// end ; end ; end ;
48767: GO 45927
48769: POP
48770: POP
// wait ( 0 0$1 ) ;
48771: LD_INT 35
48773: PPUSH
48774: CALL_OW 67
// until group = [ ] ;
48778: LD_VAR 0 4
48782: PUSH
48783: EMPTY
48784: EQUAL
48785: IFFALSE 45912
// end ;
48787: LD_VAR 0 2
48791: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
48792: LD_INT 0
48794: PPUSH
48795: PPUSH
48796: PPUSH
48797: PPUSH
// if not base_units then
48798: LD_VAR 0 1
48802: NOT
48803: IFFALSE 48807
// exit ;
48805: GO 48894
// result := false ;
48807: LD_ADDR_VAR 0 2
48811: PUSH
48812: LD_INT 0
48814: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
48815: LD_ADDR_VAR 0 5
48819: PUSH
48820: LD_VAR 0 1
48824: PPUSH
48825: LD_INT 21
48827: PUSH
48828: LD_INT 3
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PPUSH
48835: CALL_OW 72
48839: ST_TO_ADDR
// if not tmp then
48840: LD_VAR 0 5
48844: NOT
48845: IFFALSE 48849
// exit ;
48847: GO 48894
// for i in tmp do
48849: LD_ADDR_VAR 0 3
48853: PUSH
48854: LD_VAR 0 5
48858: PUSH
48859: FOR_IN
48860: IFFALSE 48892
// begin result := EnemyInRange ( i , 22 ) ;
48862: LD_ADDR_VAR 0 2
48866: PUSH
48867: LD_VAR 0 3
48871: PPUSH
48872: LD_INT 22
48874: PPUSH
48875: CALL 43992 0 2
48879: ST_TO_ADDR
// if result then
48880: LD_VAR 0 2
48884: IFFALSE 48890
// exit ;
48886: POP
48887: POP
48888: GO 48894
// end ;
48890: GO 48859
48892: POP
48893: POP
// end ;
48894: LD_VAR 0 2
48898: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
48899: LD_INT 0
48901: PPUSH
48902: PPUSH
// if not units then
48903: LD_VAR 0 1
48907: NOT
48908: IFFALSE 48912
// exit ;
48910: GO 48982
// result := [ ] ;
48912: LD_ADDR_VAR 0 3
48916: PUSH
48917: EMPTY
48918: ST_TO_ADDR
// for i in units do
48919: LD_ADDR_VAR 0 4
48923: PUSH
48924: LD_VAR 0 1
48928: PUSH
48929: FOR_IN
48930: IFFALSE 48980
// if GetTag ( i ) = tag then
48932: LD_VAR 0 4
48936: PPUSH
48937: CALL_OW 110
48941: PUSH
48942: LD_VAR 0 2
48946: EQUAL
48947: IFFALSE 48978
// result := Insert ( result , result + 1 , i ) ;
48949: LD_ADDR_VAR 0 3
48953: PUSH
48954: LD_VAR 0 3
48958: PPUSH
48959: LD_VAR 0 3
48963: PUSH
48964: LD_INT 1
48966: PLUS
48967: PPUSH
48968: LD_VAR 0 4
48972: PPUSH
48973: CALL_OW 2
48977: ST_TO_ADDR
48978: GO 48929
48980: POP
48981: POP
// end ;
48982: LD_VAR 0 3
48986: RET
// export function IsDriver ( un ) ; begin
48987: LD_INT 0
48989: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
48990: LD_ADDR_VAR 0 2
48994: PUSH
48995: LD_VAR 0 1
48999: PUSH
49000: LD_INT 55
49002: PUSH
49003: EMPTY
49004: LIST
49005: PPUSH
49006: CALL_OW 69
49010: IN
49011: ST_TO_ADDR
// end ; end_of_file
49012: LD_VAR 0 2
49016: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit ; export function InitMacro ; var i ; begin
49017: LD_INT 0
49019: PPUSH
49020: PPUSH
// skirmish := false ;
49021: LD_ADDR_EXP 56
49025: PUSH
49026: LD_INT 0
49028: ST_TO_ADDR
// mc_bases := [ ] ;
49029: LD_ADDR_EXP 57
49033: PUSH
49034: EMPTY
49035: ST_TO_ADDR
// mc_sides := [ ] ;
49036: LD_ADDR_EXP 83
49040: PUSH
49041: EMPTY
49042: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
49043: LD_ADDR_EXP 58
49047: PUSH
49048: EMPTY
49049: ST_TO_ADDR
// mc_building_repairs := [ ] ;
49050: LD_ADDR_EXP 59
49054: PUSH
49055: EMPTY
49056: ST_TO_ADDR
// mc_need_heal := [ ] ;
49057: LD_ADDR_EXP 60
49061: PUSH
49062: EMPTY
49063: ST_TO_ADDR
// mc_healers := [ ] ;
49064: LD_ADDR_EXP 61
49068: PUSH
49069: EMPTY
49070: ST_TO_ADDR
// mc_build_list := [ ] ;
49071: LD_ADDR_EXP 62
49075: PUSH
49076: EMPTY
49077: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
49078: LD_ADDR_EXP 89
49082: PUSH
49083: EMPTY
49084: ST_TO_ADDR
// mc_builders := [ ] ;
49085: LD_ADDR_EXP 63
49089: PUSH
49090: EMPTY
49091: ST_TO_ADDR
// mc_construct_list := [ ] ;
49092: LD_ADDR_EXP 64
49096: PUSH
49097: EMPTY
49098: ST_TO_ADDR
// mc_turret_list := [ ] ;
49099: LD_ADDR_EXP 65
49103: PUSH
49104: EMPTY
49105: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
49106: LD_ADDR_EXP 66
49110: PUSH
49111: EMPTY
49112: ST_TO_ADDR
// mc_miners := [ ] ;
49113: LD_ADDR_EXP 71
49117: PUSH
49118: EMPTY
49119: ST_TO_ADDR
// mc_mines := [ ] ;
49120: LD_ADDR_EXP 70
49124: PUSH
49125: EMPTY
49126: ST_TO_ADDR
// mc_minefields := [ ] ;
49127: LD_ADDR_EXP 72
49131: PUSH
49132: EMPTY
49133: ST_TO_ADDR
// mc_crates := [ ] ;
49134: LD_ADDR_EXP 73
49138: PUSH
49139: EMPTY
49140: ST_TO_ADDR
// mc_crates_collector := [ ] ;
49141: LD_ADDR_EXP 74
49145: PUSH
49146: EMPTY
49147: ST_TO_ADDR
// mc_crates_area := [ ] ;
49148: LD_ADDR_EXP 75
49152: PUSH
49153: EMPTY
49154: ST_TO_ADDR
// mc_vehicles := [ ] ;
49155: LD_ADDR_EXP 76
49159: PUSH
49160: EMPTY
49161: ST_TO_ADDR
// mc_attack := [ ] ;
49162: LD_ADDR_EXP 77
49166: PUSH
49167: EMPTY
49168: ST_TO_ADDR
// mc_produce := [ ] ;
49169: LD_ADDR_EXP 78
49173: PUSH
49174: EMPTY
49175: ST_TO_ADDR
// mc_defender := [ ] ;
49176: LD_ADDR_EXP 79
49180: PUSH
49181: EMPTY
49182: ST_TO_ADDR
// mc_parking := [ ] ;
49183: LD_ADDR_EXP 81
49187: PUSH
49188: EMPTY
49189: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
49190: LD_ADDR_EXP 67
49194: PUSH
49195: EMPTY
49196: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
49197: LD_ADDR_EXP 69
49201: PUSH
49202: EMPTY
49203: ST_TO_ADDR
// mc_scan := [ ] ;
49204: LD_ADDR_EXP 80
49208: PUSH
49209: EMPTY
49210: ST_TO_ADDR
// mc_scan_area := [ ] ;
49211: LD_ADDR_EXP 82
49215: PUSH
49216: EMPTY
49217: ST_TO_ADDR
// mc_tech := [ ] ;
49218: LD_ADDR_EXP 84
49222: PUSH
49223: EMPTY
49224: ST_TO_ADDR
// end ;
49225: LD_VAR 0 1
49229: RET
// export function MC_Start ( ) ; var i ; begin
49230: LD_INT 0
49232: PPUSH
49233: PPUSH
// for i = 1 to mc_bases do
49234: LD_ADDR_VAR 0 2
49238: PUSH
49239: DOUBLE
49240: LD_INT 1
49242: DEC
49243: ST_TO_ADDR
49244: LD_EXP 57
49248: PUSH
49249: FOR_TO
49250: IFFALSE 50095
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
49252: LD_ADDR_EXP 58
49256: PUSH
49257: LD_EXP 58
49261: PPUSH
49262: LD_VAR 0 2
49266: PPUSH
49267: EMPTY
49268: PPUSH
49269: CALL_OW 1
49273: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
49274: LD_ADDR_EXP 59
49278: PUSH
49279: LD_EXP 59
49283: PPUSH
49284: LD_VAR 0 2
49288: PPUSH
49289: EMPTY
49290: PPUSH
49291: CALL_OW 1
49295: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
49296: LD_ADDR_EXP 60
49300: PUSH
49301: LD_EXP 60
49305: PPUSH
49306: LD_VAR 0 2
49310: PPUSH
49311: EMPTY
49312: PPUSH
49313: CALL_OW 1
49317: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
49318: LD_ADDR_EXP 61
49322: PUSH
49323: LD_EXP 61
49327: PPUSH
49328: LD_VAR 0 2
49332: PPUSH
49333: EMPTY
49334: PUSH
49335: EMPTY
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PPUSH
49341: CALL_OW 1
49345: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
49346: LD_ADDR_EXP 62
49350: PUSH
49351: LD_EXP 62
49355: PPUSH
49356: LD_VAR 0 2
49360: PPUSH
49361: EMPTY
49362: PPUSH
49363: CALL_OW 1
49367: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
49368: LD_ADDR_EXP 89
49372: PUSH
49373: LD_EXP 89
49377: PPUSH
49378: LD_VAR 0 2
49382: PPUSH
49383: EMPTY
49384: PPUSH
49385: CALL_OW 1
49389: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
49390: LD_ADDR_EXP 63
49394: PUSH
49395: LD_EXP 63
49399: PPUSH
49400: LD_VAR 0 2
49404: PPUSH
49405: EMPTY
49406: PPUSH
49407: CALL_OW 1
49411: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
49412: LD_ADDR_EXP 64
49416: PUSH
49417: LD_EXP 64
49421: PPUSH
49422: LD_VAR 0 2
49426: PPUSH
49427: EMPTY
49428: PPUSH
49429: CALL_OW 1
49433: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
49434: LD_ADDR_EXP 65
49438: PUSH
49439: LD_EXP 65
49443: PPUSH
49444: LD_VAR 0 2
49448: PPUSH
49449: EMPTY
49450: PPUSH
49451: CALL_OW 1
49455: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
49456: LD_ADDR_EXP 66
49460: PUSH
49461: LD_EXP 66
49465: PPUSH
49466: LD_VAR 0 2
49470: PPUSH
49471: LD_EXP 57
49475: PUSH
49476: LD_VAR 0 2
49480: ARRAY
49481: PPUSH
49482: LD_INT 2
49484: PUSH
49485: LD_INT 30
49487: PUSH
49488: LD_INT 32
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 30
49497: PUSH
49498: LD_INT 31
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 58
49512: PUSH
49513: EMPTY
49514: LIST
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PPUSH
49520: CALL_OW 72
49524: PPUSH
49525: CALL_OW 1
49529: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
49530: LD_ADDR_EXP 67
49534: PUSH
49535: LD_EXP 67
49539: PPUSH
49540: LD_VAR 0 2
49544: PPUSH
49545: EMPTY
49546: PPUSH
49547: CALL_OW 1
49551: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
49552: LD_ADDR_EXP 71
49556: PUSH
49557: LD_EXP 71
49561: PPUSH
49562: LD_VAR 0 2
49566: PPUSH
49567: EMPTY
49568: PPUSH
49569: CALL_OW 1
49573: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
49574: LD_ADDR_EXP 70
49578: PUSH
49579: LD_EXP 70
49583: PPUSH
49584: LD_VAR 0 2
49588: PPUSH
49589: EMPTY
49590: PPUSH
49591: CALL_OW 1
49595: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
49596: LD_ADDR_EXP 72
49600: PUSH
49601: LD_EXP 72
49605: PPUSH
49606: LD_VAR 0 2
49610: PPUSH
49611: EMPTY
49612: PPUSH
49613: CALL_OW 1
49617: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
49618: LD_ADDR_EXP 73
49622: PUSH
49623: LD_EXP 73
49627: PPUSH
49628: LD_VAR 0 2
49632: PPUSH
49633: EMPTY
49634: PPUSH
49635: CALL_OW 1
49639: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
49640: LD_ADDR_EXP 74
49644: PUSH
49645: LD_EXP 74
49649: PPUSH
49650: LD_VAR 0 2
49654: PPUSH
49655: EMPTY
49656: PPUSH
49657: CALL_OW 1
49661: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
49662: LD_ADDR_EXP 75
49666: PUSH
49667: LD_EXP 75
49671: PPUSH
49672: LD_VAR 0 2
49676: PPUSH
49677: EMPTY
49678: PPUSH
49679: CALL_OW 1
49683: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
49684: LD_ADDR_EXP 76
49688: PUSH
49689: LD_EXP 76
49693: PPUSH
49694: LD_VAR 0 2
49698: PPUSH
49699: EMPTY
49700: PPUSH
49701: CALL_OW 1
49705: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
49706: LD_ADDR_EXP 77
49710: PUSH
49711: LD_EXP 77
49715: PPUSH
49716: LD_VAR 0 2
49720: PPUSH
49721: EMPTY
49722: PPUSH
49723: CALL_OW 1
49727: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
49728: LD_ADDR_EXP 78
49732: PUSH
49733: LD_EXP 78
49737: PPUSH
49738: LD_VAR 0 2
49742: PPUSH
49743: EMPTY
49744: PPUSH
49745: CALL_OW 1
49749: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
49750: LD_ADDR_EXP 79
49754: PUSH
49755: LD_EXP 79
49759: PPUSH
49760: LD_VAR 0 2
49764: PPUSH
49765: EMPTY
49766: PPUSH
49767: CALL_OW 1
49771: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
49772: LD_ADDR_EXP 68
49776: PUSH
49777: LD_EXP 68
49781: PPUSH
49782: LD_VAR 0 2
49786: PPUSH
49787: LD_INT 0
49789: PPUSH
49790: CALL_OW 1
49794: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
49795: LD_ADDR_EXP 81
49799: PUSH
49800: LD_EXP 81
49804: PPUSH
49805: LD_VAR 0 2
49809: PPUSH
49810: LD_INT 0
49812: PPUSH
49813: CALL_OW 1
49817: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
49818: LD_ADDR_EXP 69
49822: PUSH
49823: LD_EXP 69
49827: PPUSH
49828: LD_VAR 0 2
49832: PPUSH
49833: EMPTY
49834: PPUSH
49835: CALL_OW 1
49839: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
49840: LD_ADDR_EXP 80
49844: PUSH
49845: LD_EXP 80
49849: PPUSH
49850: LD_VAR 0 2
49854: PPUSH
49855: LD_INT 0
49857: PPUSH
49858: CALL_OW 1
49862: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
49863: LD_ADDR_EXP 82
49867: PUSH
49868: LD_EXP 82
49872: PPUSH
49873: LD_VAR 0 2
49877: PPUSH
49878: EMPTY
49879: PPUSH
49880: CALL_OW 1
49884: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
49885: LD_ADDR_EXP 85
49889: PUSH
49890: LD_EXP 85
49894: PPUSH
49895: LD_VAR 0 2
49899: PPUSH
49900: LD_INT 0
49902: PPUSH
49903: CALL_OW 1
49907: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
49908: LD_ADDR_EXP 86
49912: PUSH
49913: LD_EXP 86
49917: PPUSH
49918: LD_VAR 0 2
49922: PPUSH
49923: EMPTY
49924: PPUSH
49925: CALL_OW 1
49929: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
49930: LD_ADDR_EXP 87
49934: PUSH
49935: LD_EXP 87
49939: PPUSH
49940: LD_VAR 0 2
49944: PPUSH
49945: EMPTY
49946: PPUSH
49947: CALL_OW 1
49951: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
49952: LD_ADDR_EXP 88
49956: PUSH
49957: LD_EXP 88
49961: PPUSH
49962: LD_VAR 0 2
49966: PPUSH
49967: EMPTY
49968: PPUSH
49969: CALL_OW 1
49973: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
49974: LD_ADDR_EXP 90
49978: PUSH
49979: LD_EXP 90
49983: PPUSH
49984: LD_VAR 0 2
49988: PPUSH
49989: LD_EXP 57
49993: PUSH
49994: LD_VAR 0 2
49998: ARRAY
49999: PPUSH
50000: LD_INT 2
50002: PUSH
50003: LD_INT 30
50005: PUSH
50006: LD_INT 6
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 30
50015: PUSH
50016: LD_INT 7
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 30
50025: PUSH
50026: LD_INT 8
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: PPUSH
50039: CALL_OW 72
50043: PPUSH
50044: CALL_OW 1
50048: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
50049: LD_ADDR_EXP 91
50053: PUSH
50054: LD_EXP 91
50058: PPUSH
50059: LD_VAR 0 2
50063: PPUSH
50064: EMPTY
50065: PPUSH
50066: CALL_OW 1
50070: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
50071: LD_ADDR_EXP 92
50075: PUSH
50076: LD_EXP 92
50080: PPUSH
50081: LD_VAR 0 2
50085: PPUSH
50086: EMPTY
50087: PPUSH
50088: CALL_OW 1
50092: ST_TO_ADDR
// end ;
50093: GO 49249
50095: POP
50096: POP
// MC_InitSides ( ) ;
50097: CALL 58627 0 0
// MC_InitResearch ( ) ;
50101: CALL 58366 0 0
// CustomInitMacro ( ) ;
50105: CALL 174 0 0
// skirmish := true ;
50109: LD_ADDR_EXP 56
50113: PUSH
50114: LD_INT 1
50116: ST_TO_ADDR
// end ;
50117: LD_VAR 0 1
50121: RET
// every 0 0$01 trigger skirmish do
50122: LD_EXP 56
50126: IFFALSE 50245
50128: GO 50130
50130: DISABLE
// begin enable ;
50131: ENABLE
// MC_CheckBuildings ( ) ;
50132: CALL 50690 0 0
// MC_CheckPeopleLife ( ) ;
50136: CALL 50815 0 0
// RaiseSailEvent ( 103 ) ;
50140: LD_INT 103
50142: PPUSH
50143: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
50147: LD_INT 104
50149: PPUSH
50150: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
50154: LD_INT 105
50156: PPUSH
50157: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
50161: LD_INT 106
50163: PPUSH
50164: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
50168: LD_INT 107
50170: PPUSH
50171: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
50175: LD_INT 108
50177: PPUSH
50178: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
50182: LD_INT 109
50184: PPUSH
50185: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
50189: LD_INT 110
50191: PPUSH
50192: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
50196: LD_INT 111
50198: PPUSH
50199: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
50203: LD_INT 112
50205: PPUSH
50206: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
50210: LD_INT 120
50212: PPUSH
50213: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
50217: LD_INT 121
50219: PPUSH
50220: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
50224: LD_INT 122
50226: PPUSH
50227: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
50231: LD_INT 123
50233: PPUSH
50234: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
50238: LD_INT 200
50240: PPUSH
50241: CALL_OW 427
// end ;
50245: END
// every 10 trigger skirmish do var i ;
50246: LD_EXP 56
50250: IFFALSE 50349
50252: GO 50254
50254: DISABLE
50255: LD_INT 0
50257: PPUSH
// begin enable ;
50258: ENABLE
// if not mc_bases then
50259: LD_EXP 57
50263: NOT
50264: IFFALSE 50268
// exit ;
50266: GO 50349
// for i = 1 to mc_bases do
50268: LD_ADDR_VAR 0 1
50272: PUSH
50273: DOUBLE
50274: LD_INT 1
50276: DEC
50277: ST_TO_ADDR
50278: LD_EXP 57
50282: PUSH
50283: FOR_TO
50284: IFFALSE 50347
// if mc_mines [ i ] and mc_miners [ i ] then
50286: LD_EXP 70
50290: PUSH
50291: LD_VAR 0 1
50295: ARRAY
50296: PUSH
50297: LD_EXP 71
50301: PUSH
50302: LD_VAR 0 1
50306: ARRAY
50307: AND
50308: IFFALSE 50345
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
50310: LD_EXP 71
50314: PUSH
50315: LD_VAR 0 1
50319: ARRAY
50320: PUSH
50321: LD_INT 1
50323: ARRAY
50324: PPUSH
50325: CALL_OW 255
50329: PPUSH
50330: LD_EXP 70
50334: PUSH
50335: LD_VAR 0 1
50339: ARRAY
50340: PPUSH
50341: CALL 14823 0 2
50345: GO 50283
50347: POP
50348: POP
// end ;
50349: PPOPN 1
50351: END
// on SailEvent ( event ) do begin if event = 101 then
50352: LD_VAR 0 1
50356: PUSH
50357: LD_INT 101
50359: EQUAL
50360: IFFALSE 50366
// MC_RepairBuildings ( ) ;
50362: CALL 51373 0 0
// if event = 102 then
50366: LD_VAR 0 1
50370: PUSH
50371: LD_INT 102
50373: EQUAL
50374: IFFALSE 50380
// MC_Heal ( ) ;
50376: CALL 51779 0 0
// if event = 103 then
50380: LD_VAR 0 1
50384: PUSH
50385: LD_INT 103
50387: EQUAL
50388: IFFALSE 50394
// MC_Build ( ) ;
50390: CALL 52201 0 0
// if event = 104 then
50394: LD_VAR 0 1
50398: PUSH
50399: LD_INT 104
50401: EQUAL
50402: IFFALSE 50408
// MC_TurretWeapon ( ) ;
50404: CALL 53567 0 0
// if event = 105 then
50408: LD_VAR 0 1
50412: PUSH
50413: LD_INT 105
50415: EQUAL
50416: IFFALSE 50422
// MC_BuildUpgrade ( ) ;
50418: CALL 53118 0 0
// if event = 106 then
50422: LD_VAR 0 1
50426: PUSH
50427: LD_INT 106
50429: EQUAL
50430: IFFALSE 50436
// MC_PlantMines ( ) ;
50432: CALL 53886 0 0
// if event = 107 then
50436: LD_VAR 0 1
50440: PUSH
50441: LD_INT 107
50443: EQUAL
50444: IFFALSE 50450
// MC_CollectCrates ( ) ;
50446: CALL 54893 0 0
// if event = 108 then
50450: LD_VAR 0 1
50454: PUSH
50455: LD_INT 108
50457: EQUAL
50458: IFFALSE 50464
// MC_LinkRemoteControl ( ) ;
50460: CALL 56303 0 0
// if event = 109 then
50464: LD_VAR 0 1
50468: PUSH
50469: LD_INT 109
50471: EQUAL
50472: IFFALSE 50478
// MC_ProduceVehicle ( ) ;
50474: CALL 56484 0 0
// if event = 110 then
50478: LD_VAR 0 1
50482: PUSH
50483: LD_INT 110
50485: EQUAL
50486: IFFALSE 50492
// MC_SendAttack ( ) ;
50488: CALL 56965 0 0
// if event = 111 then
50492: LD_VAR 0 1
50496: PUSH
50497: LD_INT 111
50499: EQUAL
50500: IFFALSE 50506
// MC_Defend ( ) ;
50502: CALL 57073 0 0
// if event = 112 then
50506: LD_VAR 0 1
50510: PUSH
50511: LD_INT 112
50513: EQUAL
50514: IFFALSE 50520
// MC_Research ( ) ;
50516: CALL 57441 0 0
// if event = 120 then
50520: LD_VAR 0 1
50524: PUSH
50525: LD_INT 120
50527: EQUAL
50528: IFFALSE 50534
// MC_RepairVehicle ( ) ;
50530: CALL 58719 0 0
// if event = 121 then
50534: LD_VAR 0 1
50538: PUSH
50539: LD_INT 121
50541: EQUAL
50542: IFFALSE 50548
// MC_TameApe ( ) ;
50544: CALL 59388 0 0
// if event = 122 then
50548: LD_VAR 0 1
50552: PUSH
50553: LD_INT 122
50555: EQUAL
50556: IFFALSE 50562
// MC_ChangeApeClass ( ) ;
50558: CALL 59945 0 0
// if event = 123 then
50562: LD_VAR 0 1
50566: PUSH
50567: LD_INT 123
50569: EQUAL
50570: IFFALSE 50576
// MC_Bazooka ( ) ;
50572: CALL 60579 0 0
// if event = 124 then
50576: LD_VAR 0 1
50580: PUSH
50581: LD_INT 124
50583: EQUAL
50584: IFFALSE 50590
// MC_TeleportExit ( ) ;
50586: CALL 60777 0 0
// if event = 200 then
50590: LD_VAR 0 1
50594: PUSH
50595: LD_INT 200
50597: EQUAL
50598: IFFALSE 50604
// MC_Idle ( ) ;
50600: CALL 61801 0 0
// end ;
50604: PPOPN 1
50606: END
// export function MC_Reset ( base , tag ) ; var i ; begin
50607: LD_INT 0
50609: PPUSH
50610: PPUSH
// if not mc_bases [ base ] or not tag then
50611: LD_EXP 57
50615: PUSH
50616: LD_VAR 0 1
50620: ARRAY
50621: NOT
50622: PUSH
50623: LD_VAR 0 2
50627: NOT
50628: OR
50629: IFFALSE 50633
// exit ;
50631: GO 50685
// for i in mc_bases [ base ] do
50633: LD_ADDR_VAR 0 4
50637: PUSH
50638: LD_EXP 57
50642: PUSH
50643: LD_VAR 0 1
50647: ARRAY
50648: PUSH
50649: FOR_IN
50650: IFFALSE 50683
// if GetTag ( i ) = tag then
50652: LD_VAR 0 4
50656: PPUSH
50657: CALL_OW 110
50661: PUSH
50662: LD_VAR 0 2
50666: EQUAL
50667: IFFALSE 50681
// SetTag ( i , 0 ) ;
50669: LD_VAR 0 4
50673: PPUSH
50674: LD_INT 0
50676: PPUSH
50677: CALL_OW 109
50681: GO 50649
50683: POP
50684: POP
// end ;
50685: LD_VAR 0 3
50689: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
50690: LD_INT 0
50692: PPUSH
50693: PPUSH
50694: PPUSH
// if not mc_bases then
50695: LD_EXP 57
50699: NOT
50700: IFFALSE 50704
// exit ;
50702: GO 50810
// for i = 1 to mc_bases do
50704: LD_ADDR_VAR 0 2
50708: PUSH
50709: DOUBLE
50710: LD_INT 1
50712: DEC
50713: ST_TO_ADDR
50714: LD_EXP 57
50718: PUSH
50719: FOR_TO
50720: IFFALSE 50801
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
50722: LD_ADDR_VAR 0 3
50726: PUSH
50727: LD_EXP 57
50731: PUSH
50732: LD_VAR 0 2
50736: ARRAY
50737: PPUSH
50738: LD_INT 21
50740: PUSH
50741: LD_INT 3
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 3
50750: PUSH
50751: LD_INT 24
50753: PUSH
50754: LD_INT 1000
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PPUSH
50769: CALL_OW 72
50773: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
50774: LD_ADDR_EXP 58
50778: PUSH
50779: LD_EXP 58
50783: PPUSH
50784: LD_VAR 0 2
50788: PPUSH
50789: LD_VAR 0 3
50793: PPUSH
50794: CALL_OW 1
50798: ST_TO_ADDR
// end ;
50799: GO 50719
50801: POP
50802: POP
// RaiseSailEvent ( 101 ) ;
50803: LD_INT 101
50805: PPUSH
50806: CALL_OW 427
// end ;
50810: LD_VAR 0 1
50814: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
50815: LD_INT 0
50817: PPUSH
50818: PPUSH
50819: PPUSH
50820: PPUSH
50821: PPUSH
50822: PPUSH
50823: PPUSH
// if not mc_bases then
50824: LD_EXP 57
50828: NOT
50829: IFFALSE 50833
// exit ;
50831: GO 51368
// for i = 1 to mc_bases do
50833: LD_ADDR_VAR 0 2
50837: PUSH
50838: DOUBLE
50839: LD_INT 1
50841: DEC
50842: ST_TO_ADDR
50843: LD_EXP 57
50847: PUSH
50848: FOR_TO
50849: IFFALSE 51359
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
50851: LD_ADDR_VAR 0 5
50855: PUSH
50856: LD_EXP 57
50860: PUSH
50861: LD_VAR 0 2
50865: ARRAY
50866: PUSH
50867: LD_EXP 86
50871: PUSH
50872: LD_VAR 0 2
50876: ARRAY
50877: UNION
50878: PPUSH
50879: LD_INT 21
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 3
50894: PUSH
50895: LD_INT 54
50897: PUSH
50898: EMPTY
50899: LIST
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 3
50907: PUSH
50908: LD_INT 24
50910: PUSH
50911: LD_INT 700
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: LIST
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PPUSH
50931: CALL_OW 72
50935: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
50936: LD_ADDR_VAR 0 6
50940: PUSH
50941: LD_EXP 57
50945: PUSH
50946: LD_VAR 0 2
50950: ARRAY
50951: PPUSH
50952: LD_INT 21
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 3
50967: PUSH
50968: LD_INT 54
50970: PUSH
50971: EMPTY
50972: LIST
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 3
50980: PUSH
50981: LD_INT 24
50983: PUSH
50984: LD_INT 250
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: LIST
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PPUSH
51004: CALL_OW 72
51008: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
51009: LD_ADDR_VAR 0 7
51013: PUSH
51014: LD_VAR 0 5
51018: PUSH
51019: LD_VAR 0 6
51023: DIFF
51024: ST_TO_ADDR
// if not need_heal_1 then
51025: LD_VAR 0 6
51029: NOT
51030: IFFALSE 51063
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
51032: LD_ADDR_EXP 60
51036: PUSH
51037: LD_EXP 60
51041: PPUSH
51042: LD_VAR 0 2
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PPUSH
51054: EMPTY
51055: PPUSH
51056: CALL 18165 0 3
51060: ST_TO_ADDR
51061: GO 51095
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
51063: LD_ADDR_EXP 60
51067: PUSH
51068: LD_EXP 60
51072: PPUSH
51073: LD_VAR 0 2
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PPUSH
51085: LD_VAR 0 6
51089: PPUSH
51090: CALL 18165 0 3
51094: ST_TO_ADDR
// if not need_heal_2 then
51095: LD_VAR 0 7
51099: NOT
51100: IFFALSE 51133
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
51102: LD_ADDR_EXP 60
51106: PUSH
51107: LD_EXP 60
51111: PPUSH
51112: LD_VAR 0 2
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PPUSH
51124: EMPTY
51125: PPUSH
51126: CALL 18165 0 3
51130: ST_TO_ADDR
51131: GO 51165
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
51133: LD_ADDR_EXP 60
51137: PUSH
51138: LD_EXP 60
51142: PPUSH
51143: LD_VAR 0 2
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PPUSH
51155: LD_VAR 0 7
51159: PPUSH
51160: CALL 18165 0 3
51164: ST_TO_ADDR
// if need_heal_2 then
51165: LD_VAR 0 7
51169: IFFALSE 51341
// for j in need_heal_2 do
51171: LD_ADDR_VAR 0 3
51175: PUSH
51176: LD_VAR 0 7
51180: PUSH
51181: FOR_IN
51182: IFFALSE 51339
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
51184: LD_ADDR_VAR 0 5
51188: PUSH
51189: LD_EXP 57
51193: PUSH
51194: LD_VAR 0 2
51198: ARRAY
51199: PPUSH
51200: LD_INT 2
51202: PUSH
51203: LD_INT 30
51205: PUSH
51206: LD_INT 6
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 30
51215: PUSH
51216: LD_INT 7
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 30
51225: PUSH
51226: LD_INT 8
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 30
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 30
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 25
51255: PUSH
51256: LD_INT 4
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: PPUSH
51272: CALL_OW 72
51276: ST_TO_ADDR
// if tmp then
51277: LD_VAR 0 5
51281: IFFALSE 51337
// begin k := NearestUnitToUnit ( tmp , j ) ;
51283: LD_ADDR_VAR 0 4
51287: PUSH
51288: LD_VAR 0 5
51292: PPUSH
51293: LD_VAR 0 3
51297: PPUSH
51298: CALL_OW 74
51302: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
51303: LD_VAR 0 3
51307: PPUSH
51308: LD_VAR 0 4
51312: PPUSH
51313: CALL_OW 296
51317: PUSH
51318: LD_INT 7
51320: GREATER
51321: IFFALSE 51337
// ComMoveUnit ( j , k ) ;
51323: LD_VAR 0 3
51327: PPUSH
51328: LD_VAR 0 4
51332: PPUSH
51333: CALL_OW 112
// end ; end ;
51337: GO 51181
51339: POP
51340: POP
// if not need_heal_1 and not need_heal_2 then
51341: LD_VAR 0 6
51345: NOT
51346: PUSH
51347: LD_VAR 0 7
51351: NOT
51352: AND
51353: IFFALSE 51357
// continue ;
51355: GO 50848
// end ;
51357: GO 50848
51359: POP
51360: POP
// RaiseSailEvent ( 102 ) ;
51361: LD_INT 102
51363: PPUSH
51364: CALL_OW 427
// end ;
51368: LD_VAR 0 1
51372: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
51373: LD_INT 0
51375: PPUSH
51376: PPUSH
51377: PPUSH
51378: PPUSH
51379: PPUSH
// if not mc_bases then
51380: LD_EXP 57
51384: NOT
51385: IFFALSE 51389
// exit ;
51387: GO 51774
// for i = 1 to mc_bases do
51389: LD_ADDR_VAR 0 2
51393: PUSH
51394: DOUBLE
51395: LD_INT 1
51397: DEC
51398: ST_TO_ADDR
51399: LD_EXP 57
51403: PUSH
51404: FOR_TO
51405: IFFALSE 51772
// begin if not mc_building_need_repair [ i ] then
51407: LD_EXP 58
51411: PUSH
51412: LD_VAR 0 2
51416: ARRAY
51417: NOT
51418: IFFALSE 51456
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
51420: LD_ADDR_EXP 59
51424: PUSH
51425: LD_EXP 59
51429: PPUSH
51430: LD_VAR 0 2
51434: PPUSH
51435: EMPTY
51436: PPUSH
51437: CALL_OW 1
51441: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
51442: LD_VAR 0 2
51446: PPUSH
51447: LD_INT 101
51449: PPUSH
51450: CALL 50607 0 2
// continue ;
51454: GO 51404
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
51456: LD_ADDR_EXP 63
51460: PUSH
51461: LD_EXP 63
51465: PPUSH
51466: LD_VAR 0 2
51470: PPUSH
51471: EMPTY
51472: PPUSH
51473: CALL_OW 1
51477: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
51478: LD_VAR 0 2
51482: PPUSH
51483: LD_INT 103
51485: PPUSH
51486: CALL 50607 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
51490: LD_ADDR_VAR 0 5
51494: PUSH
51495: LD_EXP 57
51499: PUSH
51500: LD_VAR 0 2
51504: ARRAY
51505: PUSH
51506: LD_EXP 86
51510: PUSH
51511: LD_VAR 0 2
51515: ARRAY
51516: UNION
51517: PPUSH
51518: LD_INT 2
51520: PUSH
51521: LD_INT 25
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 25
51533: PUSH
51534: LD_INT 16
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: LIST
51545: PUSH
51546: EMPTY
51547: LIST
51548: PPUSH
51549: CALL_OW 72
51553: ST_TO_ADDR
// if not tmp then
51554: LD_VAR 0 5
51558: NOT
51559: IFFALSE 51563
// continue ;
51561: GO 51404
// for j in tmp do
51563: LD_ADDR_VAR 0 3
51567: PUSH
51568: LD_VAR 0 5
51572: PUSH
51573: FOR_IN
51574: IFFALSE 51768
// begin if mc_need_heal [ i ] then
51576: LD_EXP 60
51580: PUSH
51581: LD_VAR 0 2
51585: ARRAY
51586: IFFALSE 51634
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
51588: LD_VAR 0 3
51592: PUSH
51593: LD_EXP 60
51597: PUSH
51598: LD_VAR 0 2
51602: ARRAY
51603: PUSH
51604: LD_INT 1
51606: ARRAY
51607: IN
51608: PUSH
51609: LD_VAR 0 3
51613: PUSH
51614: LD_EXP 60
51618: PUSH
51619: LD_VAR 0 2
51623: ARRAY
51624: PUSH
51625: LD_INT 2
51627: ARRAY
51628: IN
51629: OR
51630: IFFALSE 51634
// continue ;
51632: GO 51573
// if IsInUnit ( j ) then
51634: LD_VAR 0 3
51638: PPUSH
51639: CALL_OW 310
51643: IFFALSE 51654
// ComExitBuilding ( j ) ;
51645: LD_VAR 0 3
51649: PPUSH
51650: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
51654: LD_VAR 0 3
51658: PUSH
51659: LD_EXP 59
51663: PUSH
51664: LD_VAR 0 2
51668: ARRAY
51669: IN
51670: NOT
51671: IFFALSE 51729
// begin SetTag ( j , 101 ) ;
51673: LD_VAR 0 3
51677: PPUSH
51678: LD_INT 101
51680: PPUSH
51681: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
51685: LD_ADDR_EXP 59
51689: PUSH
51690: LD_EXP 59
51694: PPUSH
51695: LD_VAR 0 2
51699: PUSH
51700: LD_EXP 59
51704: PUSH
51705: LD_VAR 0 2
51709: ARRAY
51710: PUSH
51711: LD_INT 1
51713: PLUS
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PPUSH
51719: LD_VAR 0 3
51723: PPUSH
51724: CALL 18165 0 3
51728: ST_TO_ADDR
// end ; Wait ( 3 ) ;
51729: LD_INT 3
51731: PPUSH
51732: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
51736: LD_VAR 0 3
51740: PPUSH
51741: LD_EXP 58
51745: PUSH
51746: LD_VAR 0 2
51750: ARRAY
51751: PPUSH
51752: LD_VAR 0 3
51756: PPUSH
51757: CALL_OW 74
51761: PPUSH
51762: CALL_OW 130
// end ;
51766: GO 51573
51768: POP
51769: POP
// end ;
51770: GO 51404
51772: POP
51773: POP
// end ;
51774: LD_VAR 0 1
51778: RET
// export function MC_Heal ; var i , j , tmp ; begin
51779: LD_INT 0
51781: PPUSH
51782: PPUSH
51783: PPUSH
51784: PPUSH
// if not mc_bases then
51785: LD_EXP 57
51789: NOT
51790: IFFALSE 51794
// exit ;
51792: GO 52196
// for i = 1 to mc_bases do
51794: LD_ADDR_VAR 0 2
51798: PUSH
51799: DOUBLE
51800: LD_INT 1
51802: DEC
51803: ST_TO_ADDR
51804: LD_EXP 57
51808: PUSH
51809: FOR_TO
51810: IFFALSE 52194
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
51812: LD_EXP 60
51816: PUSH
51817: LD_VAR 0 2
51821: ARRAY
51822: PUSH
51823: LD_INT 1
51825: ARRAY
51826: NOT
51827: PUSH
51828: LD_EXP 60
51832: PUSH
51833: LD_VAR 0 2
51837: ARRAY
51838: PUSH
51839: LD_INT 2
51841: ARRAY
51842: NOT
51843: AND
51844: IFFALSE 51882
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
51846: LD_ADDR_EXP 61
51850: PUSH
51851: LD_EXP 61
51855: PPUSH
51856: LD_VAR 0 2
51860: PPUSH
51861: EMPTY
51862: PPUSH
51863: CALL_OW 1
51867: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
51868: LD_VAR 0 2
51872: PPUSH
51873: LD_INT 102
51875: PPUSH
51876: CALL 50607 0 2
// continue ;
51880: GO 51809
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
51882: LD_ADDR_VAR 0 4
51886: PUSH
51887: LD_EXP 57
51891: PUSH
51892: LD_VAR 0 2
51896: ARRAY
51897: PPUSH
51898: LD_INT 25
51900: PUSH
51901: LD_INT 4
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PPUSH
51908: CALL_OW 72
51912: ST_TO_ADDR
// if not tmp then
51913: LD_VAR 0 4
51917: NOT
51918: IFFALSE 51922
// continue ;
51920: GO 51809
// if mc_taming [ i ] then
51922: LD_EXP 88
51926: PUSH
51927: LD_VAR 0 2
51931: ARRAY
51932: IFFALSE 51956
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
51934: LD_ADDR_EXP 88
51938: PUSH
51939: LD_EXP 88
51943: PPUSH
51944: LD_VAR 0 2
51948: PPUSH
51949: EMPTY
51950: PPUSH
51951: CALL_OW 1
51955: ST_TO_ADDR
// for j in tmp do
51956: LD_ADDR_VAR 0 3
51960: PUSH
51961: LD_VAR 0 4
51965: PUSH
51966: FOR_IN
51967: IFFALSE 52190
// begin if IsInUnit ( j ) then
51969: LD_VAR 0 3
51973: PPUSH
51974: CALL_OW 310
51978: IFFALSE 51989
// ComExitBuilding ( j ) ;
51980: LD_VAR 0 3
51984: PPUSH
51985: CALL_OW 122
// if not j in mc_healers [ i ] then
51989: LD_VAR 0 3
51993: PUSH
51994: LD_EXP 61
51998: PUSH
51999: LD_VAR 0 2
52003: ARRAY
52004: IN
52005: NOT
52006: IFFALSE 52052
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
52008: LD_ADDR_EXP 61
52012: PUSH
52013: LD_EXP 61
52017: PPUSH
52018: LD_VAR 0 2
52022: PUSH
52023: LD_EXP 61
52027: PUSH
52028: LD_VAR 0 2
52032: ARRAY
52033: PUSH
52034: LD_INT 1
52036: PLUS
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PPUSH
52042: LD_VAR 0 3
52046: PPUSH
52047: CALL 18165 0 3
52051: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
52052: LD_VAR 0 3
52056: PPUSH
52057: CALL_OW 110
52061: PUSH
52062: LD_INT 102
52064: NONEQUAL
52065: IFFALSE 52079
// SetTag ( j , 102 ) ;
52067: LD_VAR 0 3
52071: PPUSH
52072: LD_INT 102
52074: PPUSH
52075: CALL_OW 109
// Wait ( 3 ) ;
52079: LD_INT 3
52081: PPUSH
52082: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
52086: LD_EXP 60
52090: PUSH
52091: LD_VAR 0 2
52095: ARRAY
52096: PUSH
52097: LD_INT 1
52099: ARRAY
52100: IFFALSE 52132
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
52102: LD_VAR 0 3
52106: PPUSH
52107: LD_EXP 60
52111: PUSH
52112: LD_VAR 0 2
52116: ARRAY
52117: PUSH
52118: LD_INT 1
52120: ARRAY
52121: PUSH
52122: LD_INT 1
52124: ARRAY
52125: PPUSH
52126: CALL_OW 128
52130: GO 52188
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
52132: LD_VAR 0 3
52136: PPUSH
52137: CALL_OW 314
52141: NOT
52142: PUSH
52143: LD_EXP 60
52147: PUSH
52148: LD_VAR 0 2
52152: ARRAY
52153: PUSH
52154: LD_INT 2
52156: ARRAY
52157: AND
52158: IFFALSE 52188
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
52160: LD_VAR 0 3
52164: PPUSH
52165: LD_EXP 60
52169: PUSH
52170: LD_VAR 0 2
52174: ARRAY
52175: PUSH
52176: LD_INT 2
52178: ARRAY
52179: PUSH
52180: LD_INT 1
52182: ARRAY
52183: PPUSH
52184: CALL_OW 128
// end ;
52188: GO 51966
52190: POP
52191: POP
// end ;
52192: GO 51809
52194: POP
52195: POP
// end ;
52196: LD_VAR 0 1
52200: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
52201: LD_INT 0
52203: PPUSH
52204: PPUSH
52205: PPUSH
52206: PPUSH
// if not mc_bases then
52207: LD_EXP 57
52211: NOT
52212: IFFALSE 52216
// exit ;
52214: GO 53113
// for i = 1 to mc_bases do
52216: LD_ADDR_VAR 0 2
52220: PUSH
52221: DOUBLE
52222: LD_INT 1
52224: DEC
52225: ST_TO_ADDR
52226: LD_EXP 57
52230: PUSH
52231: FOR_TO
52232: IFFALSE 53111
// begin if mc_scan [ i ] then
52234: LD_EXP 80
52238: PUSH
52239: LD_VAR 0 2
52243: ARRAY
52244: IFFALSE 52248
// continue ;
52246: GO 52231
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
52248: LD_EXP 62
52252: PUSH
52253: LD_VAR 0 2
52257: ARRAY
52258: NOT
52259: PUSH
52260: LD_EXP 64
52264: PUSH
52265: LD_VAR 0 2
52269: ARRAY
52270: NOT
52271: AND
52272: PUSH
52273: LD_EXP 63
52277: PUSH
52278: LD_VAR 0 2
52282: ARRAY
52283: AND
52284: IFFALSE 52322
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
52286: LD_ADDR_EXP 63
52290: PUSH
52291: LD_EXP 63
52295: PPUSH
52296: LD_VAR 0 2
52300: PPUSH
52301: EMPTY
52302: PPUSH
52303: CALL_OW 1
52307: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
52308: LD_VAR 0 2
52312: PPUSH
52313: LD_INT 103
52315: PPUSH
52316: CALL 50607 0 2
// continue ;
52320: GO 52231
// end ; if mc_construct_list [ i ] then
52322: LD_EXP 64
52326: PUSH
52327: LD_VAR 0 2
52331: ARRAY
52332: IFFALSE 52552
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
52334: LD_ADDR_VAR 0 4
52338: PUSH
52339: LD_EXP 57
52343: PUSH
52344: LD_VAR 0 2
52348: ARRAY
52349: PPUSH
52350: LD_INT 25
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PPUSH
52360: CALL_OW 72
52364: PUSH
52365: LD_EXP 59
52369: PUSH
52370: LD_VAR 0 2
52374: ARRAY
52375: DIFF
52376: ST_TO_ADDR
// if not tmp then
52377: LD_VAR 0 4
52381: NOT
52382: IFFALSE 52386
// continue ;
52384: GO 52231
// for j in tmp do
52386: LD_ADDR_VAR 0 3
52390: PUSH
52391: LD_VAR 0 4
52395: PUSH
52396: FOR_IN
52397: IFFALSE 52548
// begin if not mc_builders [ i ] then
52399: LD_EXP 63
52403: PUSH
52404: LD_VAR 0 2
52408: ARRAY
52409: NOT
52410: IFFALSE 52468
// begin SetTag ( j , 103 ) ;
52412: LD_VAR 0 3
52416: PPUSH
52417: LD_INT 103
52419: PPUSH
52420: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
52424: LD_ADDR_EXP 63
52428: PUSH
52429: LD_EXP 63
52433: PPUSH
52434: LD_VAR 0 2
52438: PUSH
52439: LD_EXP 63
52443: PUSH
52444: LD_VAR 0 2
52448: ARRAY
52449: PUSH
52450: LD_INT 1
52452: PLUS
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PPUSH
52458: LD_VAR 0 3
52462: PPUSH
52463: CALL 18165 0 3
52467: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
52468: LD_VAR 0 3
52472: PPUSH
52473: CALL_OW 310
52477: IFFALSE 52488
// ComExitBuilding ( j ) ;
52479: LD_VAR 0 3
52483: PPUSH
52484: CALL_OW 122
// wait ( 3 ) ;
52488: LD_INT 3
52490: PPUSH
52491: CALL_OW 67
// if not mc_construct_list [ i ] then
52495: LD_EXP 64
52499: PUSH
52500: LD_VAR 0 2
52504: ARRAY
52505: NOT
52506: IFFALSE 52510
// break ;
52508: GO 52548
// if not HasTask ( j ) then
52510: LD_VAR 0 3
52514: PPUSH
52515: CALL_OW 314
52519: NOT
52520: IFFALSE 52546
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
52522: LD_VAR 0 3
52526: PPUSH
52527: LD_EXP 64
52531: PUSH
52532: LD_VAR 0 2
52536: ARRAY
52537: PUSH
52538: LD_INT 1
52540: ARRAY
52541: PPUSH
52542: CALL 20571 0 2
// end ;
52546: GO 52396
52548: POP
52549: POP
// end else
52550: GO 53109
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
52552: LD_EXP 62
52556: PUSH
52557: LD_VAR 0 2
52561: ARRAY
52562: PUSH
52563: LD_EXP 57
52567: PUSH
52568: LD_VAR 0 2
52572: ARRAY
52573: PPUSH
52574: LD_INT 2
52576: PUSH
52577: LD_INT 30
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 30
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: LIST
52601: PPUSH
52602: CALL_OW 72
52606: AND
52607: IFFALSE 53109
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
52609: LD_EXP 57
52613: PUSH
52614: LD_VAR 0 2
52618: ARRAY
52619: PPUSH
52620: LD_INT 2
52622: PUSH
52623: LD_INT 30
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 30
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: LIST
52647: PPUSH
52648: CALL_OW 72
52652: PUSH
52653: LD_INT 1
52655: ARRAY
52656: PPUSH
52657: LD_EXP 62
52661: PUSH
52662: LD_VAR 0 2
52666: ARRAY
52667: PUSH
52668: LD_INT 1
52670: ARRAY
52671: PUSH
52672: LD_INT 1
52674: ARRAY
52675: PPUSH
52676: LD_EXP 62
52680: PUSH
52681: LD_VAR 0 2
52685: ARRAY
52686: PUSH
52687: LD_INT 1
52689: ARRAY
52690: PUSH
52691: LD_INT 2
52693: ARRAY
52694: PPUSH
52695: LD_EXP 62
52699: PUSH
52700: LD_VAR 0 2
52704: ARRAY
52705: PUSH
52706: LD_INT 1
52708: ARRAY
52709: PUSH
52710: LD_INT 3
52712: ARRAY
52713: PPUSH
52714: LD_EXP 62
52718: PUSH
52719: LD_VAR 0 2
52723: ARRAY
52724: PUSH
52725: LD_INT 1
52727: ARRAY
52728: PUSH
52729: LD_INT 4
52731: ARRAY
52732: PPUSH
52733: CALL 24675 0 5
52737: IFFALSE 53018
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
52739: LD_ADDR_VAR 0 4
52743: PUSH
52744: LD_EXP 57
52748: PUSH
52749: LD_VAR 0 2
52753: ARRAY
52754: PPUSH
52755: LD_INT 25
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PPUSH
52765: CALL_OW 72
52769: PUSH
52770: LD_EXP 59
52774: PUSH
52775: LD_VAR 0 2
52779: ARRAY
52780: DIFF
52781: ST_TO_ADDR
// if not tmp then
52782: LD_VAR 0 4
52786: NOT
52787: IFFALSE 52791
// continue ;
52789: GO 52231
// for j in tmp do
52791: LD_ADDR_VAR 0 3
52795: PUSH
52796: LD_VAR 0 4
52800: PUSH
52801: FOR_IN
52802: IFFALSE 53014
// begin if not mc_builders [ i ] then
52804: LD_EXP 63
52808: PUSH
52809: LD_VAR 0 2
52813: ARRAY
52814: NOT
52815: IFFALSE 52873
// begin SetTag ( j , 103 ) ;
52817: LD_VAR 0 3
52821: PPUSH
52822: LD_INT 103
52824: PPUSH
52825: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
52829: LD_ADDR_EXP 63
52833: PUSH
52834: LD_EXP 63
52838: PPUSH
52839: LD_VAR 0 2
52843: PUSH
52844: LD_EXP 63
52848: PUSH
52849: LD_VAR 0 2
52853: ARRAY
52854: PUSH
52855: LD_INT 1
52857: PLUS
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PPUSH
52863: LD_VAR 0 3
52867: PPUSH
52868: CALL 18165 0 3
52872: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
52873: LD_VAR 0 3
52877: PPUSH
52878: CALL_OW 310
52882: IFFALSE 52893
// ComExitBuilding ( j ) ;
52884: LD_VAR 0 3
52888: PPUSH
52889: CALL_OW 122
// wait ( 3 ) ;
52893: LD_INT 3
52895: PPUSH
52896: CALL_OW 67
// if not mc_build_list [ i ] then
52900: LD_EXP 62
52904: PUSH
52905: LD_VAR 0 2
52909: ARRAY
52910: NOT
52911: IFFALSE 52915
// break ;
52913: GO 53014
// if not HasTask ( j ) then
52915: LD_VAR 0 3
52919: PPUSH
52920: CALL_OW 314
52924: NOT
52925: IFFALSE 53012
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
52927: LD_VAR 0 3
52931: PPUSH
52932: LD_EXP 62
52936: PUSH
52937: LD_VAR 0 2
52941: ARRAY
52942: PUSH
52943: LD_INT 1
52945: ARRAY
52946: PUSH
52947: LD_INT 1
52949: ARRAY
52950: PPUSH
52951: LD_EXP 62
52955: PUSH
52956: LD_VAR 0 2
52960: ARRAY
52961: PUSH
52962: LD_INT 1
52964: ARRAY
52965: PUSH
52966: LD_INT 2
52968: ARRAY
52969: PPUSH
52970: LD_EXP 62
52974: PUSH
52975: LD_VAR 0 2
52979: ARRAY
52980: PUSH
52981: LD_INT 1
52983: ARRAY
52984: PUSH
52985: LD_INT 3
52987: ARRAY
52988: PPUSH
52989: LD_EXP 62
52993: PUSH
52994: LD_VAR 0 2
52998: ARRAY
52999: PUSH
53000: LD_INT 1
53002: ARRAY
53003: PUSH
53004: LD_INT 4
53006: ARRAY
53007: PPUSH
53008: CALL_OW 145
// end ;
53012: GO 52801
53014: POP
53015: POP
// end else
53016: GO 53109
// TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
53018: LD_EXP 57
53022: PUSH
53023: LD_VAR 0 2
53027: ARRAY
53028: PPUSH
53029: LD_EXP 62
53033: PUSH
53034: LD_VAR 0 2
53038: ARRAY
53039: PUSH
53040: LD_INT 1
53042: ARRAY
53043: PUSH
53044: LD_INT 1
53046: ARRAY
53047: PPUSH
53048: LD_EXP 62
53052: PUSH
53053: LD_VAR 0 2
53057: ARRAY
53058: PUSH
53059: LD_INT 1
53061: ARRAY
53062: PUSH
53063: LD_INT 2
53065: ARRAY
53066: PPUSH
53067: LD_EXP 62
53071: PUSH
53072: LD_VAR 0 2
53076: ARRAY
53077: PUSH
53078: LD_INT 1
53080: ARRAY
53081: PUSH
53082: LD_INT 3
53084: ARRAY
53085: PPUSH
53086: LD_EXP 62
53090: PUSH
53091: LD_VAR 0 2
53095: ARRAY
53096: PUSH
53097: LD_INT 1
53099: ARRAY
53100: PUSH
53101: LD_INT 4
53103: ARRAY
53104: PPUSH
53105: CALL 24359 0 5
// end ;
53109: GO 52231
53111: POP
53112: POP
// end ;
53113: LD_VAR 0 1
53117: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
53118: LD_INT 0
53120: PPUSH
53121: PPUSH
53122: PPUSH
53123: PPUSH
53124: PPUSH
53125: PPUSH
// if not mc_bases then
53126: LD_EXP 57
53130: NOT
53131: IFFALSE 53135
// exit ;
53133: GO 53562
// for i = 1 to mc_bases do
53135: LD_ADDR_VAR 0 2
53139: PUSH
53140: DOUBLE
53141: LD_INT 1
53143: DEC
53144: ST_TO_ADDR
53145: LD_EXP 57
53149: PUSH
53150: FOR_TO
53151: IFFALSE 53560
// begin tmp := mc_build_upgrade [ i ] ;
53153: LD_ADDR_VAR 0 4
53157: PUSH
53158: LD_EXP 89
53162: PUSH
53163: LD_VAR 0 2
53167: ARRAY
53168: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
53169: LD_ADDR_VAR 0 6
53173: PUSH
53174: LD_EXP 90
53178: PUSH
53179: LD_VAR 0 2
53183: ARRAY
53184: PPUSH
53185: LD_INT 2
53187: PUSH
53188: LD_INT 30
53190: PUSH
53191: LD_INT 6
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 30
53200: PUSH
53201: LD_INT 7
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: LIST
53212: PPUSH
53213: CALL_OW 72
53217: ST_TO_ADDR
// if not tmp and not lab then
53218: LD_VAR 0 4
53222: NOT
53223: PUSH
53224: LD_VAR 0 6
53228: NOT
53229: AND
53230: IFFALSE 53234
// continue ;
53232: GO 53150
// if tmp then
53234: LD_VAR 0 4
53238: IFFALSE 53358
// for j in tmp do
53240: LD_ADDR_VAR 0 3
53244: PUSH
53245: LD_VAR 0 4
53249: PUSH
53250: FOR_IN
53251: IFFALSE 53356
// begin if UpgradeCost ( j ) then
53253: LD_VAR 0 3
53257: PPUSH
53258: CALL 24019 0 1
53262: IFFALSE 53354
// begin ComUpgrade ( j ) ;
53264: LD_VAR 0 3
53268: PPUSH
53269: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
53273: LD_ADDR_EXP 89
53277: PUSH
53278: LD_EXP 89
53282: PPUSH
53283: LD_VAR 0 2
53287: PPUSH
53288: LD_EXP 89
53292: PUSH
53293: LD_VAR 0 2
53297: ARRAY
53298: PUSH
53299: LD_VAR 0 3
53303: DIFF
53304: PPUSH
53305: CALL_OW 1
53309: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
53310: LD_ADDR_EXP 64
53314: PUSH
53315: LD_EXP 64
53319: PPUSH
53320: LD_VAR 0 2
53324: PUSH
53325: LD_EXP 64
53329: PUSH
53330: LD_VAR 0 2
53334: ARRAY
53335: PUSH
53336: LD_INT 1
53338: PLUS
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PPUSH
53344: LD_VAR 0 3
53348: PPUSH
53349: CALL 18165 0 3
53353: ST_TO_ADDR
// end ; end ;
53354: GO 53250
53356: POP
53357: POP
// if not lab or not mc_lab_upgrade [ i ] then
53358: LD_VAR 0 6
53362: NOT
53363: PUSH
53364: LD_EXP 91
53368: PUSH
53369: LD_VAR 0 2
53373: ARRAY
53374: NOT
53375: OR
53376: IFFALSE 53380
// continue ;
53378: GO 53150
// for j in lab do
53380: LD_ADDR_VAR 0 3
53384: PUSH
53385: LD_VAR 0 6
53389: PUSH
53390: FOR_IN
53391: IFFALSE 53556
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
53393: LD_VAR 0 3
53397: PPUSH
53398: CALL_OW 266
53402: PUSH
53403: LD_INT 6
53405: PUSH
53406: LD_INT 7
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: IN
53413: PUSH
53414: LD_VAR 0 3
53418: PPUSH
53419: CALL_OW 461
53423: PUSH
53424: LD_INT 1
53426: NONEQUAL
53427: AND
53428: IFFALSE 53554
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
53430: LD_VAR 0 3
53434: PPUSH
53435: LD_EXP 91
53439: PUSH
53440: LD_VAR 0 2
53444: ARRAY
53445: PUSH
53446: LD_INT 1
53448: ARRAY
53449: PPUSH
53450: CALL 24224 0 2
53454: IFFALSE 53554
// begin ComCancel ( j ) ;
53456: LD_VAR 0 3
53460: PPUSH
53461: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
53465: LD_VAR 0 3
53469: PPUSH
53470: LD_EXP 91
53474: PUSH
53475: LD_VAR 0 2
53479: ARRAY
53480: PUSH
53481: LD_INT 1
53483: ARRAY
53484: PPUSH
53485: CALL_OW 207
// if not j in mc_construct_list [ i ] then
53489: LD_VAR 0 3
53493: PUSH
53494: LD_EXP 64
53498: PUSH
53499: LD_VAR 0 2
53503: ARRAY
53504: IN
53505: NOT
53506: IFFALSE 53552
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
53508: LD_ADDR_EXP 64
53512: PUSH
53513: LD_EXP 64
53517: PPUSH
53518: LD_VAR 0 2
53522: PUSH
53523: LD_EXP 64
53527: PUSH
53528: LD_VAR 0 2
53532: ARRAY
53533: PUSH
53534: LD_INT 1
53536: PLUS
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PPUSH
53542: LD_VAR 0 3
53546: PPUSH
53547: CALL 18165 0 3
53551: ST_TO_ADDR
// break ;
53552: GO 53556
// end ; end ; end ;
53554: GO 53390
53556: POP
53557: POP
// end ;
53558: GO 53150
53560: POP
53561: POP
// end ;
53562: LD_VAR 0 1
53566: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
53567: LD_INT 0
53569: PPUSH
53570: PPUSH
53571: PPUSH
53572: PPUSH
53573: PPUSH
53574: PPUSH
53575: PPUSH
// if not mc_bases then
53576: LD_EXP 57
53580: NOT
53581: IFFALSE 53585
// exit ;
53583: GO 53881
// for i = 1 to mc_bases do
53585: LD_ADDR_VAR 0 2
53589: PUSH
53590: DOUBLE
53591: LD_INT 1
53593: DEC
53594: ST_TO_ADDR
53595: LD_EXP 57
53599: PUSH
53600: FOR_TO
53601: IFFALSE 53879
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
53603: LD_EXP 65
53607: PUSH
53608: LD_VAR 0 2
53612: ARRAY
53613: NOT
53614: PUSH
53615: LD_EXP 57
53619: PUSH
53620: LD_VAR 0 2
53624: ARRAY
53625: PPUSH
53626: LD_INT 30
53628: PUSH
53629: LD_INT 3
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PPUSH
53636: CALL_OW 72
53640: NOT
53641: OR
53642: IFFALSE 53646
// continue ;
53644: GO 53600
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
53646: LD_EXP 65
53650: PUSH
53651: LD_VAR 0 2
53655: ARRAY
53656: PUSH
53657: LD_INT 1
53659: ARRAY
53660: PPUSH
53661: CALL_OW 269
53665: IFFALSE 53731
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
53667: LD_ADDR_VAR 0 4
53671: PUSH
53672: LD_EXP 65
53676: PUSH
53677: LD_VAR 0 2
53681: ARRAY
53682: PPUSH
53683: LD_INT 1
53685: PPUSH
53686: CALL_OW 3
53690: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
53691: LD_ADDR_EXP 65
53695: PUSH
53696: LD_EXP 65
53700: PPUSH
53701: LD_VAR 0 2
53705: PPUSH
53706: LD_VAR 0 4
53710: PPUSH
53711: CALL_OW 1
53715: ST_TO_ADDR
// if not mc_turret_list [ i ] then
53716: LD_EXP 65
53720: PUSH
53721: LD_VAR 0 2
53725: ARRAY
53726: NOT
53727: IFFALSE 53731
// continue ;
53729: GO 53600
// end ; busy := false ;
53731: LD_ADDR_VAR 0 6
53735: PUSH
53736: LD_INT 0
53738: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
53739: LD_ADDR_VAR 0 4
53743: PUSH
53744: LD_EXP 57
53748: PUSH
53749: LD_VAR 0 2
53753: ARRAY
53754: PPUSH
53755: LD_INT 30
53757: PUSH
53758: LD_INT 3
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PPUSH
53765: CALL_OW 72
53769: ST_TO_ADDR
// for j in tmp do
53770: LD_ADDR_VAR 0 3
53774: PUSH
53775: LD_VAR 0 4
53779: PUSH
53780: FOR_IN
53781: IFFALSE 53809
// if not BuildingStatus ( j ) = bs_idle then
53783: LD_VAR 0 3
53787: PPUSH
53788: CALL_OW 461
53792: PUSH
53793: LD_INT 2
53795: EQUAL
53796: NOT
53797: IFFALSE 53807
// busy := true ;
53799: LD_ADDR_VAR 0 6
53803: PUSH
53804: LD_INT 1
53806: ST_TO_ADDR
53807: GO 53780
53809: POP
53810: POP
// if busy then
53811: LD_VAR 0 6
53815: IFFALSE 53819
// continue ;
53817: GO 53600
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
53819: LD_ADDR_VAR 0 7
53823: PUSH
53824: LD_EXP 65
53828: PUSH
53829: LD_VAR 0 2
53833: ARRAY
53834: PUSH
53835: LD_INT 1
53837: ARRAY
53838: PPUSH
53839: CALL 22467 0 1
53843: ST_TO_ADDR
// if not weapon then
53844: LD_VAR 0 7
53848: NOT
53849: IFFALSE 53853
// continue ;
53851: GO 53600
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
53853: LD_EXP 65
53857: PUSH
53858: LD_VAR 0 2
53862: ARRAY
53863: PUSH
53864: LD_INT 1
53866: ARRAY
53867: PPUSH
53868: LD_VAR 0 7
53872: PPUSH
53873: CALL_OW 148
// end ;
53877: GO 53600
53879: POP
53880: POP
// end ;
53881: LD_VAR 0 1
53885: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
53886: LD_INT 0
53888: PPUSH
53889: PPUSH
53890: PPUSH
53891: PPUSH
53892: PPUSH
53893: PPUSH
// if not mc_bases then
53894: LD_EXP 57
53898: NOT
53899: IFFALSE 53903
// exit ;
53901: GO 54888
// for i = 1 to mc_bases do
53903: LD_ADDR_VAR 0 2
53907: PUSH
53908: DOUBLE
53909: LD_INT 1
53911: DEC
53912: ST_TO_ADDR
53913: LD_EXP 57
53917: PUSH
53918: FOR_TO
53919: IFFALSE 54886
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
53921: LD_EXP 70
53925: PUSH
53926: LD_VAR 0 2
53930: ARRAY
53931: NOT
53932: PUSH
53933: LD_EXP 70
53937: PUSH
53938: LD_VAR 0 2
53942: ARRAY
53943: PUSH
53944: LD_EXP 71
53948: PUSH
53949: LD_VAR 0 2
53953: ARRAY
53954: EQUAL
53955: OR
53956: IFFALSE 53960
// continue ;
53958: GO 53918
// if mc_miners [ i ] then
53960: LD_EXP 71
53964: PUSH
53965: LD_VAR 0 2
53969: ARRAY
53970: IFFALSE 54573
// begin k := 1 ;
53972: LD_ADDR_VAR 0 4
53976: PUSH
53977: LD_INT 1
53979: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
53980: LD_ADDR_VAR 0 3
53984: PUSH
53985: DOUBLE
53986: LD_EXP 71
53990: PUSH
53991: LD_VAR 0 2
53995: ARRAY
53996: INC
53997: ST_TO_ADDR
53998: LD_INT 1
54000: PUSH
54001: FOR_DOWNTO
54002: IFFALSE 54571
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
54004: LD_EXP 71
54008: PUSH
54009: LD_VAR 0 2
54013: ARRAY
54014: PUSH
54015: LD_VAR 0 3
54019: ARRAY
54020: PPUSH
54021: CALL_OW 301
54025: IFFALSE 54088
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
54027: LD_ADDR_VAR 0 5
54031: PUSH
54032: LD_EXP 71
54036: PUSH
54037: LD_VAR 0 2
54041: ARRAY
54042: PUSH
54043: LD_EXP 71
54047: PUSH
54048: LD_VAR 0 2
54052: ARRAY
54053: PUSH
54054: LD_VAR 0 3
54058: ARRAY
54059: DIFF
54060: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
54061: LD_ADDR_EXP 71
54065: PUSH
54066: LD_EXP 71
54070: PPUSH
54071: LD_VAR 0 2
54075: PPUSH
54076: LD_VAR 0 5
54080: PPUSH
54081: CALL_OW 1
54085: ST_TO_ADDR
// continue ;
54086: GO 54001
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
54088: LD_EXP 71
54092: PUSH
54093: LD_VAR 0 2
54097: ARRAY
54098: PUSH
54099: LD_VAR 0 3
54103: ARRAY
54104: PPUSH
54105: CALL 17666 0 1
54109: PUSH
54110: LD_EXP 71
54114: PUSH
54115: LD_VAR 0 2
54119: ARRAY
54120: PUSH
54121: LD_VAR 0 3
54125: ARRAY
54126: PPUSH
54127: CALL_OW 255
54131: PPUSH
54132: LD_EXP 70
54136: PUSH
54137: LD_VAR 0 2
54141: ARRAY
54142: PUSH
54143: LD_VAR 0 4
54147: ARRAY
54148: PUSH
54149: LD_INT 1
54151: ARRAY
54152: PPUSH
54153: LD_EXP 70
54157: PUSH
54158: LD_VAR 0 2
54162: ARRAY
54163: PUSH
54164: LD_VAR 0 4
54168: ARRAY
54169: PUSH
54170: LD_INT 2
54172: ARRAY
54173: PPUSH
54174: LD_INT 15
54176: PPUSH
54177: CALL 18659 0 4
54181: PUSH
54182: LD_INT 4
54184: ARRAY
54185: PUSH
54186: LD_EXP 71
54190: PUSH
54191: LD_VAR 0 2
54195: ARRAY
54196: PUSH
54197: LD_VAR 0 3
54201: ARRAY
54202: PPUSH
54203: LD_INT 10
54205: PPUSH
54206: CALL 20356 0 2
54210: PUSH
54211: LD_INT 4
54213: ARRAY
54214: OR
54215: AND
54216: IFFALSE 54239
// ComStop ( mc_miners [ i ] [ j ] ) ;
54218: LD_EXP 71
54222: PUSH
54223: LD_VAR 0 2
54227: ARRAY
54228: PUSH
54229: LD_VAR 0 3
54233: ARRAY
54234: PPUSH
54235: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
54239: LD_EXP 71
54243: PUSH
54244: LD_VAR 0 2
54248: ARRAY
54249: PUSH
54250: LD_VAR 0 3
54254: ARRAY
54255: PPUSH
54256: CALL_OW 257
54260: PUSH
54261: LD_INT 1
54263: EQUAL
54264: PUSH
54265: LD_EXP 71
54269: PUSH
54270: LD_VAR 0 2
54274: ARRAY
54275: PUSH
54276: LD_VAR 0 3
54280: ARRAY
54281: PPUSH
54282: CALL_OW 459
54286: NOT
54287: AND
54288: PUSH
54289: LD_EXP 71
54293: PUSH
54294: LD_VAR 0 2
54298: ARRAY
54299: PUSH
54300: LD_VAR 0 3
54304: ARRAY
54305: PPUSH
54306: CALL_OW 255
54310: PPUSH
54311: LD_EXP 70
54315: PUSH
54316: LD_VAR 0 2
54320: ARRAY
54321: PUSH
54322: LD_VAR 0 4
54326: ARRAY
54327: PUSH
54328: LD_INT 1
54330: ARRAY
54331: PPUSH
54332: LD_EXP 70
54336: PUSH
54337: LD_VAR 0 2
54341: ARRAY
54342: PUSH
54343: LD_VAR 0 4
54347: ARRAY
54348: PUSH
54349: LD_INT 2
54351: ARRAY
54352: PPUSH
54353: LD_INT 15
54355: PPUSH
54356: CALL 18659 0 4
54360: PUSH
54361: LD_INT 4
54363: ARRAY
54364: PUSH
54365: LD_INT 0
54367: EQUAL
54368: AND
54369: PUSH
54370: LD_EXP 71
54374: PUSH
54375: LD_VAR 0 2
54379: ARRAY
54380: PUSH
54381: LD_VAR 0 3
54385: ARRAY
54386: PPUSH
54387: CALL_OW 314
54391: NOT
54392: AND
54393: IFFALSE 54569
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
54395: LD_EXP 71
54399: PUSH
54400: LD_VAR 0 2
54404: ARRAY
54405: PUSH
54406: LD_VAR 0 3
54410: ARRAY
54411: PPUSH
54412: CALL_OW 310
54416: IFFALSE 54439
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
54418: LD_EXP 71
54422: PUSH
54423: LD_VAR 0 2
54427: ARRAY
54428: PUSH
54429: LD_VAR 0 3
54433: ARRAY
54434: PPUSH
54435: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
54439: LD_EXP 71
54443: PUSH
54444: LD_VAR 0 2
54448: ARRAY
54449: PUSH
54450: LD_VAR 0 3
54454: ARRAY
54455: PPUSH
54456: CALL_OW 314
54460: NOT
54461: IFFALSE 54529
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
54463: LD_EXP 71
54467: PUSH
54468: LD_VAR 0 2
54472: ARRAY
54473: PUSH
54474: LD_VAR 0 3
54478: ARRAY
54479: PPUSH
54480: LD_EXP 70
54484: PUSH
54485: LD_VAR 0 2
54489: ARRAY
54490: PUSH
54491: LD_VAR 0 4
54495: ARRAY
54496: PUSH
54497: LD_INT 1
54499: ARRAY
54500: PPUSH
54501: LD_EXP 70
54505: PUSH
54506: LD_VAR 0 2
54510: ARRAY
54511: PUSH
54512: LD_VAR 0 4
54516: ARRAY
54517: PUSH
54518: LD_INT 2
54520: ARRAY
54521: PPUSH
54522: LD_INT 0
54524: PPUSH
54525: CALL_OW 193
// k := k + 1 ;
54529: LD_ADDR_VAR 0 4
54533: PUSH
54534: LD_VAR 0 4
54538: PUSH
54539: LD_INT 1
54541: PLUS
54542: ST_TO_ADDR
// if k > mc_mines [ i ] then
54543: LD_VAR 0 4
54547: PUSH
54548: LD_EXP 70
54552: PUSH
54553: LD_VAR 0 2
54557: ARRAY
54558: GREATER
54559: IFFALSE 54569
// k := 1 ;
54561: LD_ADDR_VAR 0 4
54565: PUSH
54566: LD_INT 1
54568: ST_TO_ADDR
// end ; end ;
54569: GO 54001
54571: POP
54572: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
54573: LD_ADDR_VAR 0 5
54577: PUSH
54578: LD_EXP 57
54582: PUSH
54583: LD_VAR 0 2
54587: ARRAY
54588: PPUSH
54589: LD_INT 2
54591: PUSH
54592: LD_INT 30
54594: PUSH
54595: LD_INT 4
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 30
54604: PUSH
54605: LD_INT 5
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 30
54614: PUSH
54615: LD_INT 32
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: PPUSH
54628: CALL_OW 72
54632: ST_TO_ADDR
// if not tmp then
54633: LD_VAR 0 5
54637: NOT
54638: IFFALSE 54642
// continue ;
54640: GO 53918
// list := [ ] ;
54642: LD_ADDR_VAR 0 6
54646: PUSH
54647: EMPTY
54648: ST_TO_ADDR
// for j in tmp do
54649: LD_ADDR_VAR 0 3
54653: PUSH
54654: LD_VAR 0 5
54658: PUSH
54659: FOR_IN
54660: IFFALSE 54729
// begin for k in UnitsInside ( j ) do
54662: LD_ADDR_VAR 0 4
54666: PUSH
54667: LD_VAR 0 3
54671: PPUSH
54672: CALL_OW 313
54676: PUSH
54677: FOR_IN
54678: IFFALSE 54725
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
54680: LD_VAR 0 4
54684: PPUSH
54685: CALL_OW 257
54689: PUSH
54690: LD_INT 1
54692: EQUAL
54693: PUSH
54694: LD_VAR 0 4
54698: PPUSH
54699: CALL_OW 459
54703: NOT
54704: AND
54705: IFFALSE 54723
// list := list ^ k ;
54707: LD_ADDR_VAR 0 6
54711: PUSH
54712: LD_VAR 0 6
54716: PUSH
54717: LD_VAR 0 4
54721: ADD
54722: ST_TO_ADDR
54723: GO 54677
54725: POP
54726: POP
// end ;
54727: GO 54659
54729: POP
54730: POP
// list := list diff mc_miners [ i ] ;
54731: LD_ADDR_VAR 0 6
54735: PUSH
54736: LD_VAR 0 6
54740: PUSH
54741: LD_EXP 71
54745: PUSH
54746: LD_VAR 0 2
54750: ARRAY
54751: DIFF
54752: ST_TO_ADDR
// if not list then
54753: LD_VAR 0 6
54757: NOT
54758: IFFALSE 54762
// continue ;
54760: GO 53918
// k := mc_mines [ i ] - mc_miners [ i ] ;
54762: LD_ADDR_VAR 0 4
54766: PUSH
54767: LD_EXP 70
54771: PUSH
54772: LD_VAR 0 2
54776: ARRAY
54777: PUSH
54778: LD_EXP 71
54782: PUSH
54783: LD_VAR 0 2
54787: ARRAY
54788: MINUS
54789: ST_TO_ADDR
// if k > list then
54790: LD_VAR 0 4
54794: PUSH
54795: LD_VAR 0 6
54799: GREATER
54800: IFFALSE 54812
// k := list ;
54802: LD_ADDR_VAR 0 4
54806: PUSH
54807: LD_VAR 0 6
54811: ST_TO_ADDR
// for j = 1 to k do
54812: LD_ADDR_VAR 0 3
54816: PUSH
54817: DOUBLE
54818: LD_INT 1
54820: DEC
54821: ST_TO_ADDR
54822: LD_VAR 0 4
54826: PUSH
54827: FOR_TO
54828: IFFALSE 54882
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
54830: LD_ADDR_EXP 71
54834: PUSH
54835: LD_EXP 71
54839: PPUSH
54840: LD_VAR 0 2
54844: PUSH
54845: LD_EXP 71
54849: PUSH
54850: LD_VAR 0 2
54854: ARRAY
54855: PUSH
54856: LD_INT 1
54858: PLUS
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PPUSH
54864: LD_VAR 0 6
54868: PUSH
54869: LD_VAR 0 3
54873: ARRAY
54874: PPUSH
54875: CALL 18165 0 3
54879: ST_TO_ADDR
54880: GO 54827
54882: POP
54883: POP
// end ;
54884: GO 53918
54886: POP
54887: POP
// end ;
54888: LD_VAR 0 1
54892: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
54893: LD_INT 0
54895: PPUSH
54896: PPUSH
54897: PPUSH
54898: PPUSH
54899: PPUSH
54900: PPUSH
54901: PPUSH
54902: PPUSH
54903: PPUSH
// if not mc_bases then
54904: LD_EXP 57
54908: NOT
54909: IFFALSE 54913
// exit ;
54911: GO 56298
// for i = 1 to mc_bases do
54913: LD_ADDR_VAR 0 2
54917: PUSH
54918: DOUBLE
54919: LD_INT 1
54921: DEC
54922: ST_TO_ADDR
54923: LD_EXP 57
54927: PUSH
54928: FOR_TO
54929: IFFALSE 56296
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
54931: LD_EXP 57
54935: PUSH
54936: LD_VAR 0 2
54940: ARRAY
54941: NOT
54942: PUSH
54943: LD_EXP 64
54947: PUSH
54948: LD_VAR 0 2
54952: ARRAY
54953: OR
54954: IFFALSE 54958
// continue ;
54956: GO 54928
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
54958: LD_EXP 73
54962: PUSH
54963: LD_VAR 0 2
54967: ARRAY
54968: NOT
54969: PUSH
54970: LD_EXP 74
54974: PUSH
54975: LD_VAR 0 2
54979: ARRAY
54980: AND
54981: IFFALSE 55019
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
54983: LD_ADDR_EXP 74
54987: PUSH
54988: LD_EXP 74
54992: PPUSH
54993: LD_VAR 0 2
54997: PPUSH
54998: EMPTY
54999: PPUSH
55000: CALL_OW 1
55004: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
55005: LD_VAR 0 2
55009: PPUSH
55010: LD_INT 107
55012: PPUSH
55013: CALL 50607 0 2
// continue ;
55017: GO 54928
// end ; target := [ ] ;
55019: LD_ADDR_VAR 0 5
55023: PUSH
55024: EMPTY
55025: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
55026: LD_ADDR_VAR 0 3
55030: PUSH
55031: DOUBLE
55032: LD_EXP 73
55036: PUSH
55037: LD_VAR 0 2
55041: ARRAY
55042: INC
55043: ST_TO_ADDR
55044: LD_INT 1
55046: PUSH
55047: FOR_DOWNTO
55048: IFFALSE 55308
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
55050: LD_EXP 73
55054: PUSH
55055: LD_VAR 0 2
55059: ARRAY
55060: PUSH
55061: LD_VAR 0 3
55065: ARRAY
55066: PUSH
55067: LD_INT 2
55069: ARRAY
55070: PPUSH
55071: LD_EXP 73
55075: PUSH
55076: LD_VAR 0 2
55080: ARRAY
55081: PUSH
55082: LD_VAR 0 3
55086: ARRAY
55087: PUSH
55088: LD_INT 3
55090: ARRAY
55091: PPUSH
55092: CALL_OW 488
55096: PUSH
55097: LD_EXP 73
55101: PUSH
55102: LD_VAR 0 2
55106: ARRAY
55107: PUSH
55108: LD_VAR 0 3
55112: ARRAY
55113: PUSH
55114: LD_INT 2
55116: ARRAY
55117: PPUSH
55118: LD_EXP 73
55122: PUSH
55123: LD_VAR 0 2
55127: ARRAY
55128: PUSH
55129: LD_VAR 0 3
55133: ARRAY
55134: PUSH
55135: LD_INT 3
55137: ARRAY
55138: PPUSH
55139: CALL_OW 284
55143: PUSH
55144: LD_INT 0
55146: EQUAL
55147: AND
55148: IFFALSE 55203
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
55150: LD_ADDR_VAR 0 4
55154: PUSH
55155: LD_EXP 73
55159: PUSH
55160: LD_VAR 0 2
55164: ARRAY
55165: PPUSH
55166: LD_VAR 0 3
55170: PPUSH
55171: CALL_OW 3
55175: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
55176: LD_ADDR_EXP 73
55180: PUSH
55181: LD_EXP 73
55185: PPUSH
55186: LD_VAR 0 2
55190: PPUSH
55191: LD_VAR 0 4
55195: PPUSH
55196: CALL_OW 1
55200: ST_TO_ADDR
// continue ;
55201: GO 55047
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
55203: LD_EXP 57
55207: PUSH
55208: LD_VAR 0 2
55212: ARRAY
55213: PUSH
55214: LD_INT 1
55216: ARRAY
55217: PPUSH
55218: CALL_OW 255
55222: PPUSH
55223: LD_EXP 73
55227: PUSH
55228: LD_VAR 0 2
55232: ARRAY
55233: PUSH
55234: LD_VAR 0 3
55238: ARRAY
55239: PUSH
55240: LD_INT 2
55242: ARRAY
55243: PPUSH
55244: LD_EXP 73
55248: PUSH
55249: LD_VAR 0 2
55253: ARRAY
55254: PUSH
55255: LD_VAR 0 3
55259: ARRAY
55260: PUSH
55261: LD_INT 3
55263: ARRAY
55264: PPUSH
55265: LD_INT 20
55267: PPUSH
55268: CALL 18659 0 4
55272: PUSH
55273: LD_INT 4
55275: ARRAY
55276: PUSH
55277: LD_INT 0
55279: EQUAL
55280: IFFALSE 55306
// begin target := mc_crates [ i ] [ j ] ;
55282: LD_ADDR_VAR 0 5
55286: PUSH
55287: LD_EXP 73
55291: PUSH
55292: LD_VAR 0 2
55296: ARRAY
55297: PUSH
55298: LD_VAR 0 3
55302: ARRAY
55303: ST_TO_ADDR
// break ;
55304: GO 55308
// end ; end ;
55306: GO 55047
55308: POP
55309: POP
// if not target then
55310: LD_VAR 0 5
55314: NOT
55315: IFFALSE 55319
// continue ;
55317: GO 54928
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
55319: LD_ADDR_VAR 0 6
55323: PUSH
55324: LD_EXP 76
55328: PUSH
55329: LD_VAR 0 2
55333: ARRAY
55334: PPUSH
55335: LD_INT 2
55337: PUSH
55338: LD_INT 3
55340: PUSH
55341: LD_INT 58
55343: PUSH
55344: EMPTY
55345: LIST
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 61
55353: PUSH
55354: EMPTY
55355: LIST
55356: PUSH
55357: LD_INT 33
55359: PUSH
55360: LD_INT 5
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 33
55369: PUSH
55370: LD_INT 3
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: LD_INT 34
55389: PUSH
55390: LD_INT 32
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 34
55399: PUSH
55400: LD_INT 51
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 34
55409: PUSH
55410: LD_INT 12
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PPUSH
55427: CALL_OW 72
55431: ST_TO_ADDR
// if not cargo then
55432: LD_VAR 0 6
55436: NOT
55437: IFFALSE 55831
// begin if mc_crates_collector [ i ] < 5 then
55439: LD_EXP 74
55443: PUSH
55444: LD_VAR 0 2
55448: ARRAY
55449: PUSH
55450: LD_INT 5
55452: LESS
55453: IFFALSE 55645
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
55455: LD_ADDR_VAR 0 4
55459: PUSH
55460: LD_EXP 57
55464: PUSH
55465: LD_VAR 0 2
55469: ARRAY
55470: PUSH
55471: LD_EXP 86
55475: PUSH
55476: LD_VAR 0 2
55480: ARRAY
55481: UNION
55482: PPUSH
55483: LD_INT 2
55485: PUSH
55486: LD_INT 25
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 25
55498: PUSH
55499: LD_INT 16
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 24
55513: PUSH
55514: LD_INT 750
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PPUSH
55525: CALL_OW 72
55529: ST_TO_ADDR
// if not tmp then
55530: LD_VAR 0 4
55534: NOT
55535: IFFALSE 55539
// continue ;
55537: GO 54928
// for j in tmp do
55539: LD_ADDR_VAR 0 3
55543: PUSH
55544: LD_VAR 0 4
55548: PUSH
55549: FOR_IN
55550: IFFALSE 55643
// if GetTag ( j ) = 0 then
55552: LD_VAR 0 3
55556: PPUSH
55557: CALL_OW 110
55561: PUSH
55562: LD_INT 0
55564: EQUAL
55565: IFFALSE 55641
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
55567: LD_ADDR_EXP 74
55571: PUSH
55572: LD_EXP 74
55576: PPUSH
55577: LD_VAR 0 2
55581: PUSH
55582: LD_EXP 74
55586: PUSH
55587: LD_VAR 0 2
55591: ARRAY
55592: PUSH
55593: LD_INT 1
55595: PLUS
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PPUSH
55601: LD_VAR 0 3
55605: PPUSH
55606: CALL 18165 0 3
55610: ST_TO_ADDR
// SetTag ( j , 107 ) ;
55611: LD_VAR 0 3
55615: PPUSH
55616: LD_INT 107
55618: PPUSH
55619: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
55623: LD_EXP 74
55627: PUSH
55628: LD_VAR 0 2
55632: ARRAY
55633: PUSH
55634: LD_INT 5
55636: GREATER
55637: IFFALSE 55641
// break ;
55639: GO 55643
// end ;
55641: GO 55549
55643: POP
55644: POP
// end ; if mc_crates_collector [ i ] and target then
55645: LD_EXP 74
55649: PUSH
55650: LD_VAR 0 2
55654: ARRAY
55655: PUSH
55656: LD_VAR 0 5
55660: AND
55661: IFFALSE 55829
// begin if mc_crates_collector [ i ] < target [ 1 ] then
55663: LD_EXP 74
55667: PUSH
55668: LD_VAR 0 2
55672: ARRAY
55673: PUSH
55674: LD_VAR 0 5
55678: PUSH
55679: LD_INT 1
55681: ARRAY
55682: LESS
55683: IFFALSE 55703
// tmp := mc_crates_collector [ i ] else
55685: LD_ADDR_VAR 0 4
55689: PUSH
55690: LD_EXP 74
55694: PUSH
55695: LD_VAR 0 2
55699: ARRAY
55700: ST_TO_ADDR
55701: GO 55717
// tmp := target [ 1 ] ;
55703: LD_ADDR_VAR 0 4
55707: PUSH
55708: LD_VAR 0 5
55712: PUSH
55713: LD_INT 1
55715: ARRAY
55716: ST_TO_ADDR
// for j = 1 to tmp do
55717: LD_ADDR_VAR 0 3
55721: PUSH
55722: DOUBLE
55723: LD_INT 1
55725: DEC
55726: ST_TO_ADDR
55727: LD_VAR 0 4
55731: PUSH
55732: FOR_TO
55733: IFFALSE 55827
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
55735: LD_EXP 74
55739: PUSH
55740: LD_VAR 0 2
55744: ARRAY
55745: PUSH
55746: LD_VAR 0 3
55750: ARRAY
55751: PPUSH
55752: CALL_OW 310
55756: IFFALSE 55779
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
55758: LD_EXP 74
55762: PUSH
55763: LD_VAR 0 2
55767: ARRAY
55768: PUSH
55769: LD_VAR 0 3
55773: ARRAY
55774: PPUSH
55775: CALL_OW 122
// wait ( 3 ) ;
55779: LD_INT 3
55781: PPUSH
55782: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
55786: LD_EXP 74
55790: PUSH
55791: LD_VAR 0 2
55795: ARRAY
55796: PUSH
55797: LD_VAR 0 3
55801: ARRAY
55802: PPUSH
55803: LD_VAR 0 5
55807: PUSH
55808: LD_INT 2
55810: ARRAY
55811: PPUSH
55812: LD_VAR 0 5
55816: PUSH
55817: LD_INT 3
55819: ARRAY
55820: PPUSH
55821: CALL_OW 117
// end ;
55825: GO 55732
55827: POP
55828: POP
// end ; end else
55829: GO 56294
// begin for j in cargo do
55831: LD_ADDR_VAR 0 3
55835: PUSH
55836: LD_VAR 0 6
55840: PUSH
55841: FOR_IN
55842: IFFALSE 56292
// begin if GetTag ( j ) <> 0 then
55844: LD_VAR 0 3
55848: PPUSH
55849: CALL_OW 110
55853: PUSH
55854: LD_INT 0
55856: NONEQUAL
55857: IFFALSE 55861
// continue ;
55859: GO 55841
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
55861: LD_VAR 0 3
55865: PPUSH
55866: CALL_OW 262
55870: PUSH
55871: LD_INT 2
55873: EQUAL
55874: PUSH
55875: LD_VAR 0 3
55879: PPUSH
55880: CALL_OW 261
55884: PUSH
55885: LD_INT 15
55887: LESS
55888: AND
55889: IFFALSE 55893
// continue ;
55891: GO 55841
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
55893: LD_VAR 0 3
55897: PPUSH
55898: CALL_OW 262
55902: PUSH
55903: LD_INT 1
55905: EQUAL
55906: PUSH
55907: LD_VAR 0 3
55911: PPUSH
55912: CALL_OW 261
55916: PUSH
55917: LD_INT 10
55919: LESS
55920: AND
55921: IFFALSE 56231
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
55923: LD_ADDR_VAR 0 7
55927: PUSH
55928: LD_EXP 57
55932: PUSH
55933: LD_VAR 0 2
55937: ARRAY
55938: PPUSH
55939: LD_INT 2
55941: PUSH
55942: LD_INT 30
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 30
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: LIST
55966: PPUSH
55967: CALL_OW 72
55971: ST_TO_ADDR
// if not depot then
55972: LD_VAR 0 7
55976: NOT
55977: IFFALSE 55981
// continue ;
55979: GO 55841
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
55981: LD_VAR 0 3
55985: PPUSH
55986: LD_VAR 0 7
55990: PPUSH
55991: LD_VAR 0 3
55995: PPUSH
55996: CALL_OW 74
56000: PPUSH
56001: CALL_OW 296
56005: PUSH
56006: LD_INT 6
56008: LESS
56009: IFFALSE 56025
// SetFuel ( j , 100 ) else
56011: LD_VAR 0 3
56015: PPUSH
56016: LD_INT 100
56018: PPUSH
56019: CALL_OW 240
56023: GO 56231
// if GetFuel ( j ) = 0 then
56025: LD_VAR 0 3
56029: PPUSH
56030: CALL_OW 261
56034: PUSH
56035: LD_INT 0
56037: EQUAL
56038: IFFALSE 56231
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
56040: LD_ADDR_EXP 76
56044: PUSH
56045: LD_EXP 76
56049: PPUSH
56050: LD_VAR 0 2
56054: PPUSH
56055: LD_EXP 76
56059: PUSH
56060: LD_VAR 0 2
56064: ARRAY
56065: PUSH
56066: LD_VAR 0 3
56070: DIFF
56071: PPUSH
56072: CALL_OW 1
56076: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
56077: LD_VAR 0 3
56081: PPUSH
56082: CALL_OW 263
56086: PUSH
56087: LD_INT 1
56089: EQUAL
56090: IFFALSE 56106
// ComExitVehicle ( IsInUnit ( j ) ) ;
56092: LD_VAR 0 3
56096: PPUSH
56097: CALL_OW 310
56101: PPUSH
56102: CALL_OW 121
// if GetControl ( j ) = control_remote then
56106: LD_VAR 0 3
56110: PPUSH
56111: CALL_OW 263
56115: PUSH
56116: LD_INT 2
56118: EQUAL
56119: IFFALSE 56130
// ComUnlink ( j ) ;
56121: LD_VAR 0 3
56125: PPUSH
56126: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
56130: LD_ADDR_VAR 0 8
56134: PUSH
56135: LD_VAR 0 2
56139: PPUSH
56140: LD_INT 3
56142: PPUSH
56143: CALL 62703 0 2
56147: ST_TO_ADDR
// if fac then
56148: LD_VAR 0 8
56152: IFFALSE 56229
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
56154: LD_ADDR_VAR 0 9
56158: PUSH
56159: LD_VAR 0 8
56163: PPUSH
56164: LD_VAR 0 3
56168: PPUSH
56169: CALL_OW 265
56173: PPUSH
56174: LD_VAR 0 3
56178: PPUSH
56179: CALL_OW 262
56183: PPUSH
56184: LD_VAR 0 3
56188: PPUSH
56189: CALL_OW 263
56193: PPUSH
56194: LD_VAR 0 3
56198: PPUSH
56199: CALL_OW 264
56203: PPUSH
56204: CALL 15330 0 5
56208: ST_TO_ADDR
// if components then
56209: LD_VAR 0 9
56213: IFFALSE 56229
// MC_InsertProduceList ( i , components ) ;
56215: LD_VAR 0 2
56219: PPUSH
56220: LD_VAR 0 9
56224: PPUSH
56225: CALL 62366 0 2
// end ; continue ;
56229: GO 55841
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
56231: LD_VAR 0 3
56235: PPUSH
56236: LD_INT 1
56238: PPUSH
56239: CALL_OW 289
56243: PUSH
56244: LD_INT 100
56246: LESS
56247: PUSH
56248: LD_VAR 0 3
56252: PPUSH
56253: CALL_OW 314
56257: NOT
56258: AND
56259: IFFALSE 56288
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
56261: LD_VAR 0 3
56265: PPUSH
56266: LD_VAR 0 5
56270: PUSH
56271: LD_INT 2
56273: ARRAY
56274: PPUSH
56275: LD_VAR 0 5
56279: PUSH
56280: LD_INT 3
56282: ARRAY
56283: PPUSH
56284: CALL_OW 117
// break ;
56288: GO 56292
// end ;
56290: GO 55841
56292: POP
56293: POP
// end ; end ;
56294: GO 54928
56296: POP
56297: POP
// end ;
56298: LD_VAR 0 1
56302: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
56303: LD_INT 0
56305: PPUSH
56306: PPUSH
56307: PPUSH
56308: PPUSH
// if not mc_bases then
56309: LD_EXP 57
56313: NOT
56314: IFFALSE 56318
// exit ;
56316: GO 56479
// for i = 1 to mc_bases do
56318: LD_ADDR_VAR 0 2
56322: PUSH
56323: DOUBLE
56324: LD_INT 1
56326: DEC
56327: ST_TO_ADDR
56328: LD_EXP 57
56332: PUSH
56333: FOR_TO
56334: IFFALSE 56477
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
56336: LD_ADDR_VAR 0 4
56340: PUSH
56341: LD_EXP 76
56345: PUSH
56346: LD_VAR 0 2
56350: ARRAY
56351: PUSH
56352: LD_EXP 79
56356: PUSH
56357: LD_VAR 0 2
56361: ARRAY
56362: ADD
56363: PPUSH
56364: LD_INT 33
56366: PUSH
56367: LD_INT 2
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PPUSH
56374: CALL_OW 72
56378: ST_TO_ADDR
// if tmp then
56379: LD_VAR 0 4
56383: IFFALSE 56475
// for j in tmp do
56385: LD_ADDR_VAR 0 3
56389: PUSH
56390: LD_VAR 0 4
56394: PUSH
56395: FOR_IN
56396: IFFALSE 56473
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
56398: LD_VAR 0 3
56402: PPUSH
56403: CALL_OW 312
56407: NOT
56408: PUSH
56409: LD_VAR 0 3
56413: PPUSH
56414: CALL_OW 256
56418: PUSH
56419: LD_INT 250
56421: GREATEREQUAL
56422: AND
56423: IFFALSE 56436
// Connect ( j ) else
56425: LD_VAR 0 3
56429: PPUSH
56430: CALL 20653 0 1
56434: GO 56471
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
56436: LD_VAR 0 3
56440: PPUSH
56441: CALL_OW 256
56445: PUSH
56446: LD_INT 250
56448: LESS
56449: PUSH
56450: LD_VAR 0 3
56454: PPUSH
56455: CALL_OW 312
56459: AND
56460: IFFALSE 56471
// ComUnlink ( j ) ;
56462: LD_VAR 0 3
56466: PPUSH
56467: CALL_OW 136
56471: GO 56395
56473: POP
56474: POP
// end ;
56475: GO 56333
56477: POP
56478: POP
// end ;
56479: LD_VAR 0 1
56483: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
56484: LD_INT 0
56486: PPUSH
56487: PPUSH
56488: PPUSH
56489: PPUSH
56490: PPUSH
// if not mc_bases then
56491: LD_EXP 57
56495: NOT
56496: IFFALSE 56500
// exit ;
56498: GO 56960
// for i = 1 to mc_bases do
56500: LD_ADDR_VAR 0 2
56504: PUSH
56505: DOUBLE
56506: LD_INT 1
56508: DEC
56509: ST_TO_ADDR
56510: LD_EXP 57
56514: PUSH
56515: FOR_TO
56516: IFFALSE 56958
// begin if not mc_produce [ i ] then
56518: LD_EXP 78
56522: PUSH
56523: LD_VAR 0 2
56527: ARRAY
56528: NOT
56529: IFFALSE 56533
// continue ;
56531: GO 56515
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
56533: LD_ADDR_VAR 0 5
56537: PUSH
56538: LD_EXP 57
56542: PUSH
56543: LD_VAR 0 2
56547: ARRAY
56548: PPUSH
56549: LD_INT 30
56551: PUSH
56552: LD_INT 3
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PPUSH
56559: CALL_OW 72
56563: ST_TO_ADDR
// if not fac then
56564: LD_VAR 0 5
56568: NOT
56569: IFFALSE 56573
// continue ;
56571: GO 56515
// for j in fac do
56573: LD_ADDR_VAR 0 3
56577: PUSH
56578: LD_VAR 0 5
56582: PUSH
56583: FOR_IN
56584: IFFALSE 56954
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
56586: LD_VAR 0 3
56590: PPUSH
56591: CALL_OW 461
56595: PUSH
56596: LD_INT 2
56598: NONEQUAL
56599: PUSH
56600: LD_VAR 0 3
56604: PPUSH
56605: LD_INT 15
56607: PPUSH
56608: CALL 20356 0 2
56612: PUSH
56613: LD_INT 4
56615: ARRAY
56616: OR
56617: PUSH
56618: LD_VAR 0 3
56622: PPUSH
56623: CALL_OW 313
56627: PUSH
56628: LD_INT 0
56630: EQUAL
56631: OR
56632: IFFALSE 56636
// continue ;
56634: GO 56583
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
56636: LD_VAR 0 3
56640: PPUSH
56641: LD_EXP 78
56645: PUSH
56646: LD_VAR 0 2
56650: ARRAY
56651: PUSH
56652: LD_INT 1
56654: ARRAY
56655: PUSH
56656: LD_INT 1
56658: ARRAY
56659: PPUSH
56660: LD_EXP 78
56664: PUSH
56665: LD_VAR 0 2
56669: ARRAY
56670: PUSH
56671: LD_INT 1
56673: ARRAY
56674: PUSH
56675: LD_INT 2
56677: ARRAY
56678: PPUSH
56679: LD_EXP 78
56683: PUSH
56684: LD_VAR 0 2
56688: ARRAY
56689: PUSH
56690: LD_INT 1
56692: ARRAY
56693: PUSH
56694: LD_INT 3
56696: ARRAY
56697: PPUSH
56698: LD_EXP 78
56702: PUSH
56703: LD_VAR 0 2
56707: ARRAY
56708: PUSH
56709: LD_INT 1
56711: ARRAY
56712: PUSH
56713: LD_INT 4
56715: ARRAY
56716: PPUSH
56717: CALL_OW 448
56721: PUSH
56722: LD_VAR 0 3
56726: PPUSH
56727: LD_EXP 78
56731: PUSH
56732: LD_VAR 0 2
56736: ARRAY
56737: PUSH
56738: LD_INT 1
56740: ARRAY
56741: PUSH
56742: LD_INT 1
56744: ARRAY
56745: PUSH
56746: LD_EXP 78
56750: PUSH
56751: LD_VAR 0 2
56755: ARRAY
56756: PUSH
56757: LD_INT 1
56759: ARRAY
56760: PUSH
56761: LD_INT 2
56763: ARRAY
56764: PUSH
56765: LD_EXP 78
56769: PUSH
56770: LD_VAR 0 2
56774: ARRAY
56775: PUSH
56776: LD_INT 1
56778: ARRAY
56779: PUSH
56780: LD_INT 3
56782: ARRAY
56783: PUSH
56784: LD_EXP 78
56788: PUSH
56789: LD_VAR 0 2
56793: ARRAY
56794: PUSH
56795: LD_INT 1
56797: ARRAY
56798: PUSH
56799: LD_INT 4
56801: ARRAY
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: PPUSH
56809: CALL 23858 0 2
56813: AND
56814: IFFALSE 56952
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
56816: LD_VAR 0 3
56820: PPUSH
56821: LD_EXP 78
56825: PUSH
56826: LD_VAR 0 2
56830: ARRAY
56831: PUSH
56832: LD_INT 1
56834: ARRAY
56835: PUSH
56836: LD_INT 1
56838: ARRAY
56839: PPUSH
56840: LD_EXP 78
56844: PUSH
56845: LD_VAR 0 2
56849: ARRAY
56850: PUSH
56851: LD_INT 1
56853: ARRAY
56854: PUSH
56855: LD_INT 2
56857: ARRAY
56858: PPUSH
56859: LD_EXP 78
56863: PUSH
56864: LD_VAR 0 2
56868: ARRAY
56869: PUSH
56870: LD_INT 1
56872: ARRAY
56873: PUSH
56874: LD_INT 3
56876: ARRAY
56877: PPUSH
56878: LD_EXP 78
56882: PUSH
56883: LD_VAR 0 2
56887: ARRAY
56888: PUSH
56889: LD_INT 1
56891: ARRAY
56892: PUSH
56893: LD_INT 4
56895: ARRAY
56896: PPUSH
56897: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
56901: LD_ADDR_VAR 0 4
56905: PUSH
56906: LD_EXP 78
56910: PUSH
56911: LD_VAR 0 2
56915: ARRAY
56916: PPUSH
56917: LD_INT 1
56919: PPUSH
56920: CALL_OW 3
56924: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
56925: LD_ADDR_EXP 78
56929: PUSH
56930: LD_EXP 78
56934: PPUSH
56935: LD_VAR 0 2
56939: PPUSH
56940: LD_VAR 0 4
56944: PPUSH
56945: CALL_OW 1
56949: ST_TO_ADDR
// break ;
56950: GO 56954
// end ; end ;
56952: GO 56583
56954: POP
56955: POP
// end ;
56956: GO 56515
56958: POP
56959: POP
// end ;
56960: LD_VAR 0 1
56964: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
56965: LD_INT 0
56967: PPUSH
56968: PPUSH
56969: PPUSH
// if not mc_bases then
56970: LD_EXP 57
56974: NOT
56975: IFFALSE 56979
// exit ;
56977: GO 57068
// for i = 1 to mc_bases do
56979: LD_ADDR_VAR 0 2
56983: PUSH
56984: DOUBLE
56985: LD_INT 1
56987: DEC
56988: ST_TO_ADDR
56989: LD_EXP 57
56993: PUSH
56994: FOR_TO
56995: IFFALSE 57066
// begin if mc_attack [ i ] then
56997: LD_EXP 77
57001: PUSH
57002: LD_VAR 0 2
57006: ARRAY
57007: IFFALSE 57064
// begin tmp := mc_attack [ i ] [ 1 ] ;
57009: LD_ADDR_VAR 0 3
57013: PUSH
57014: LD_EXP 77
57018: PUSH
57019: LD_VAR 0 2
57023: ARRAY
57024: PUSH
57025: LD_INT 1
57027: ARRAY
57028: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
57029: LD_ADDR_EXP 77
57033: PUSH
57034: LD_EXP 77
57038: PPUSH
57039: LD_VAR 0 2
57043: PPUSH
57044: EMPTY
57045: PPUSH
57046: CALL_OW 1
57050: ST_TO_ADDR
// Attack ( tmp ) ;
57051: LD_VAR 0 3
57055: PPUSH
57056: CALL 45505 0 1
// exit ;
57060: POP
57061: POP
57062: GO 57068
// end ; end ;
57064: GO 56994
57066: POP
57067: POP
// end ;
57068: LD_VAR 0 1
57072: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
57073: LD_INT 0
57075: PPUSH
57076: PPUSH
57077: PPUSH
57078: PPUSH
57079: PPUSH
57080: PPUSH
57081: PPUSH
// if not mc_bases then
57082: LD_EXP 57
57086: NOT
57087: IFFALSE 57091
// exit ;
57089: GO 57436
// class := AllowSpecClass ( mc_defender [ 1 ] ) ;
57091: LD_ADDR_VAR 0 7
57095: PUSH
57096: LD_EXP 79
57100: PUSH
57101: LD_INT 1
57103: ARRAY
57104: PPUSH
57105: CALL 14670 0 1
57109: ST_TO_ADDR
// for i = 1 to mc_bases do
57110: LD_ADDR_VAR 0 2
57114: PUSH
57115: DOUBLE
57116: LD_INT 1
57118: DEC
57119: ST_TO_ADDR
57120: LD_EXP 57
57124: PUSH
57125: FOR_TO
57126: IFFALSE 57434
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ 1 ] ) , mc_scan_area [ i ] ) ) ;
57128: LD_ADDR_EXP 80
57132: PUSH
57133: LD_EXP 80
57137: PPUSH
57138: LD_VAR 0 2
57142: PPUSH
57143: LD_EXP 57
57147: PUSH
57148: LD_INT 1
57150: ARRAY
57151: PPUSH
57152: CALL_OW 255
57156: PPUSH
57157: LD_EXP 82
57161: PUSH
57162: LD_VAR 0 2
57166: ARRAY
57167: PPUSH
57168: CALL 13128 0 2
57172: PPUSH
57173: CALL_OW 1
57177: ST_TO_ADDR
// if not mc_scan [ i ] then
57178: LD_EXP 80
57182: PUSH
57183: LD_VAR 0 2
57187: ARRAY
57188: NOT
57189: IFFALSE 57341
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
57191: LD_ADDR_VAR 0 4
57195: PUSH
57196: LD_EXP 57
57200: PUSH
57201: LD_VAR 0 2
57205: ARRAY
57206: PPUSH
57207: LD_INT 2
57209: PUSH
57210: LD_INT 25
57212: PUSH
57213: LD_INT 5
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 25
57222: PUSH
57223: LD_INT 8
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 25
57232: PUSH
57233: LD_INT 9
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: PPUSH
57246: CALL_OW 72
57250: ST_TO_ADDR
// if not tmp then
57251: LD_VAR 0 4
57255: NOT
57256: IFFALSE 57260
// continue ;
57258: GO 57125
// for j in tmp do
57260: LD_ADDR_VAR 0 3
57264: PUSH
57265: LD_VAR 0 4
57269: PUSH
57270: FOR_IN
57271: IFFALSE 57339
// if GetBType ( IsInUnit ( j ) ) in [ b_barracks ] and GetClass ( j ) = 1 and not MineOfUnit ( j ) then
57273: LD_VAR 0 3
57277: PPUSH
57278: CALL_OW 310
57282: PPUSH
57283: CALL_OW 266
57287: PUSH
57288: LD_INT 5
57290: PUSH
57291: EMPTY
57292: LIST
57293: IN
57294: PUSH
57295: LD_VAR 0 3
57299: PPUSH
57300: CALL_OW 257
57304: PUSH
57305: LD_INT 1
57307: EQUAL
57308: AND
57309: PUSH
57310: LD_VAR 0 3
57314: PPUSH
57315: CALL_OW 459
57319: NOT
57320: AND
57321: IFFALSE 57337
// ComChangeProfession ( j , class ) ;
57323: LD_VAR 0 3
57327: PPUSH
57328: LD_VAR 0 7
57332: PPUSH
57333: CALL_OW 123
57337: GO 57270
57339: POP
57340: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
57341: LD_EXP 80
57345: PUSH
57346: LD_VAR 0 2
57350: ARRAY
57351: PUSH
57352: LD_EXP 79
57356: PUSH
57357: LD_VAR 0 2
57361: ARRAY
57362: AND
57363: IFFALSE 57432
// begin tmp := mc_defender [ i ] ;
57365: LD_ADDR_VAR 0 4
57369: PUSH
57370: LD_EXP 79
57374: PUSH
57375: LD_VAR 0 2
57379: ARRAY
57380: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
57381: LD_ADDR_EXP 79
57385: PUSH
57386: LD_EXP 79
57390: PPUSH
57391: LD_VAR 0 2
57395: PPUSH
57396: EMPTY
57397: PPUSH
57398: CALL_OW 1
57402: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
57403: LD_VAR 0 2
57407: PPUSH
57408: LD_VAR 0 4
57412: PPUSH
57413: LD_EXP 80
57417: PUSH
57418: LD_VAR 0 2
57422: ARRAY
57423: PPUSH
57424: CALL 13163 0 3
// exit ;
57428: POP
57429: POP
57430: GO 57436
// end ; end ;
57432: GO 57125
57434: POP
57435: POP
// end ;
57436: LD_VAR 0 1
57440: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tech_temp , tmp2 ; begin
57441: LD_INT 0
57443: PPUSH
57444: PPUSH
57445: PPUSH
57446: PPUSH
57447: PPUSH
57448: PPUSH
57449: PPUSH
57450: PPUSH
57451: PPUSH
57452: PPUSH
// if not mc_bases then
57453: LD_EXP 57
57457: NOT
57458: IFFALSE 57462
// exit ;
57460: GO 58361
// for i = 1 to mc_bases do
57462: LD_ADDR_VAR 0 2
57466: PUSH
57467: DOUBLE
57468: LD_INT 1
57470: DEC
57471: ST_TO_ADDR
57472: LD_EXP 57
57476: PUSH
57477: FOR_TO
57478: IFFALSE 58359
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
57480: LD_ADDR_VAR 0 6
57484: PUSH
57485: LD_EXP 57
57489: PUSH
57490: LD_VAR 0 2
57494: ARRAY
57495: PPUSH
57496: LD_INT 2
57498: PUSH
57499: LD_INT 30
57501: PUSH
57502: LD_INT 6
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 30
57511: PUSH
57512: LD_INT 7
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 30
57521: PUSH
57522: LD_INT 8
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: PPUSH
57535: CALL_OW 72
57539: ST_TO_ADDR
// if not tmp then
57540: LD_VAR 0 6
57544: NOT
57545: IFFALSE 57549
// continue ;
57547: GO 57477
// for j in tmp do
57549: LD_ADDR_VAR 0 3
57553: PUSH
57554: LD_VAR 0 6
57558: PUSH
57559: FOR_IN
57560: IFFALSE 58355
// begin side := GetSide ( j ) ;
57562: LD_ADDR_VAR 0 4
57566: PUSH
57567: LD_VAR 0 3
57571: PPUSH
57572: CALL_OW 255
57576: ST_TO_ADDR
// if not mc_tech [ side ] then
57577: LD_EXP 84
57581: PUSH
57582: LD_VAR 0 4
57586: ARRAY
57587: NOT
57588: IFFALSE 57592
// continue ;
57590: GO 57559
// if BuildingStatus ( j ) = bs_idle then
57592: LD_VAR 0 3
57596: PPUSH
57597: CALL_OW 461
57601: PUSH
57602: LD_INT 2
57604: EQUAL
57605: IFFALSE 57662
// for t in mc_tech [ side ] do
57607: LD_ADDR_VAR 0 5
57611: PUSH
57612: LD_EXP 84
57616: PUSH
57617: LD_VAR 0 4
57621: ARRAY
57622: PUSH
57623: FOR_IN
57624: IFFALSE 57660
// if CanBeResearched ( j , t ) then
57626: LD_VAR 0 3
57630: PPUSH
57631: LD_VAR 0 5
57635: PPUSH
57636: CALL_OW 430
57640: IFFALSE 57658
// begin ComResearch ( j , t ) ;
57642: LD_VAR 0 3
57646: PPUSH
57647: LD_VAR 0 5
57651: PPUSH
57652: CALL_OW 124
// break ;
57656: GO 57660
// end ;
57658: GO 57623
57660: POP
57661: POP
// if BuildingStatus ( j ) = bs_need_ape then
57662: LD_VAR 0 3
57666: PPUSH
57667: CALL_OW 461
57671: PUSH
57672: LD_INT 10
57674: EQUAL
57675: IFFALSE 58190
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
57677: LD_EXP 86
57681: PUSH
57682: LD_VAR 0 2
57686: ARRAY
57687: NOT
57688: PUSH
57689: LD_EXP 87
57693: PUSH
57694: LD_VAR 0 2
57698: ARRAY
57699: NOT
57700: AND
57701: PUSH
57702: LD_EXP 84
57706: PUSH
57707: LD_VAR 0 4
57711: ARRAY
57712: PUSH
57713: LD_INT 1
57715: GREATER
57716: AND
57717: IFFALSE 57793
// begin ComCancel ( j ) ;
57719: LD_VAR 0 3
57723: PPUSH
57724: CALL_OW 127
// tech_temp := Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ;
57728: LD_ADDR_VAR 0 9
57732: PUSH
57733: LD_EXP 84
57737: PUSH
57738: LD_VAR 0 4
57742: ARRAY
57743: PPUSH
57744: LD_EXP 84
57748: PUSH
57749: LD_VAR 0 4
57753: ARRAY
57754: PPUSH
57755: LD_INT 1
57757: PPUSH
57758: LD_INT 0
57760: PPUSH
57761: CALL 17148 0 4
57765: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , tech_temp ) ;
57766: LD_ADDR_EXP 84
57770: PUSH
57771: LD_EXP 84
57775: PPUSH
57776: LD_VAR 0 4
57780: PPUSH
57781: LD_VAR 0 9
57785: PPUSH
57786: CALL_OW 1
57790: ST_TO_ADDR
// continue ;
57791: GO 57559
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
57793: LD_EXP 86
57797: PUSH
57798: LD_VAR 0 2
57802: ARRAY
57803: PUSH
57804: LD_EXP 87
57808: PUSH
57809: LD_VAR 0 2
57813: ARRAY
57814: NOT
57815: AND
57816: IFFALSE 57943
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
57818: LD_ADDR_EXP 87
57822: PUSH
57823: LD_EXP 87
57827: PPUSH
57828: LD_VAR 0 2
57832: PUSH
57833: LD_EXP 87
57837: PUSH
57838: LD_VAR 0 2
57842: ARRAY
57843: PUSH
57844: LD_INT 1
57846: PLUS
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PPUSH
57852: LD_EXP 86
57856: PUSH
57857: LD_VAR 0 2
57861: ARRAY
57862: PUSH
57863: LD_INT 1
57865: ARRAY
57866: PPUSH
57867: CALL 18165 0 3
57871: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
57872: LD_EXP 86
57876: PUSH
57877: LD_VAR 0 2
57881: ARRAY
57882: PUSH
57883: LD_INT 1
57885: ARRAY
57886: PPUSH
57887: LD_INT 112
57889: PPUSH
57890: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
57894: LD_ADDR_VAR 0 10
57898: PUSH
57899: LD_EXP 86
57903: PUSH
57904: LD_VAR 0 2
57908: ARRAY
57909: PPUSH
57910: LD_INT 1
57912: PPUSH
57913: CALL_OW 3
57917: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
57918: LD_ADDR_EXP 86
57922: PUSH
57923: LD_EXP 86
57927: PPUSH
57928: LD_VAR 0 2
57932: PPUSH
57933: LD_VAR 0 10
57937: PPUSH
57938: CALL_OW 1
57942: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
57943: LD_EXP 86
57947: PUSH
57948: LD_VAR 0 2
57952: ARRAY
57953: PUSH
57954: LD_EXP 87
57958: PUSH
57959: LD_VAR 0 2
57963: ARRAY
57964: AND
57965: PUSH
57966: LD_EXP 87
57970: PUSH
57971: LD_VAR 0 2
57975: ARRAY
57976: PUSH
57977: LD_INT 1
57979: ARRAY
57980: PPUSH
57981: CALL_OW 310
57985: NOT
57986: AND
57987: PUSH
57988: LD_VAR 0 3
57992: PPUSH
57993: CALL_OW 313
57997: PUSH
57998: LD_INT 6
58000: EQUAL
58001: AND
58002: IFFALSE 58058
// begin tmp2 := UnitsInside ( j ) ;
58004: LD_ADDR_VAR 0 10
58008: PUSH
58009: LD_VAR 0 3
58013: PPUSH
58014: CALL_OW 313
58018: ST_TO_ADDR
// if tmp2 = 6 then
58019: LD_VAR 0 10
58023: PUSH
58024: LD_INT 6
58026: EQUAL
58027: IFFALSE 58058
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
58029: LD_VAR 0 10
58033: PUSH
58034: LD_INT 1
58036: ARRAY
58037: PPUSH
58038: LD_INT 112
58040: PPUSH
58041: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
58045: LD_VAR 0 10
58049: PUSH
58050: LD_INT 1
58052: ARRAY
58053: PPUSH
58054: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) in mc_lab [ i ] then
58058: LD_EXP 87
58062: PUSH
58063: LD_VAR 0 2
58067: ARRAY
58068: PUSH
58069: LD_EXP 87
58073: PUSH
58074: LD_VAR 0 2
58078: ARRAY
58079: PUSH
58080: LD_INT 1
58082: ARRAY
58083: PPUSH
58084: CALL_OW 314
58088: NOT
58089: AND
58090: PUSH
58091: LD_EXP 87
58095: PUSH
58096: LD_VAR 0 2
58100: ARRAY
58101: PUSH
58102: LD_INT 1
58104: ARRAY
58105: PPUSH
58106: CALL_OW 310
58110: PUSH
58111: LD_EXP 90
58115: PUSH
58116: LD_VAR 0 2
58120: ARRAY
58121: IN
58122: NOT
58123: AND
58124: IFFALSE 58190
// begin if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
58126: LD_EXP 87
58130: PUSH
58131: LD_VAR 0 2
58135: ARRAY
58136: PUSH
58137: LD_INT 1
58139: ARRAY
58140: PPUSH
58141: CALL_OW 310
58145: IFFALSE 58166
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
58147: LD_EXP 87
58151: PUSH
58152: LD_VAR 0 2
58156: ARRAY
58157: PUSH
58158: LD_INT 1
58160: ARRAY
58161: PPUSH
58162: CALL_OW 122
// AddComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
58166: LD_EXP 87
58170: PUSH
58171: LD_VAR 0 2
58175: ARRAY
58176: PUSH
58177: LD_INT 1
58179: ARRAY
58180: PPUSH
58181: LD_VAR 0 3
58185: PPUSH
58186: CALL_OW 180
// end ; end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
58190: LD_VAR 0 3
58194: PPUSH
58195: CALL_OW 461
58199: PUSH
58200: LD_INT 6
58202: EQUAL
58203: PUSH
58204: LD_VAR 0 6
58208: PUSH
58209: LD_INT 1
58211: GREATER
58212: AND
58213: IFFALSE 58353
// begin sci := [ ] ;
58215: LD_ADDR_VAR 0 8
58219: PUSH
58220: EMPTY
58221: ST_TO_ADDR
// for x in tmp diff j do
58222: LD_ADDR_VAR 0 7
58226: PUSH
58227: LD_VAR 0 6
58231: PUSH
58232: LD_VAR 0 3
58236: DIFF
58237: PUSH
58238: FOR_IN
58239: IFFALSE 58279
// begin if BuildingStatus ( x ) = bs_idle then
58241: LD_VAR 0 7
58245: PPUSH
58246: CALL_OW 461
58250: PUSH
58251: LD_INT 2
58253: EQUAL
58254: IFFALSE 58277
// sci := sci ^ UnitsInside ( x ) ;
58256: LD_ADDR_VAR 0 8
58260: PUSH
58261: LD_VAR 0 8
58265: PUSH
58266: LD_VAR 0 7
58270: PPUSH
58271: CALL_OW 313
58275: ADD
58276: ST_TO_ADDR
// end ;
58277: GO 58238
58279: POP
58280: POP
// if not sci then
58281: LD_VAR 0 8
58285: NOT
58286: IFFALSE 58290
// continue ;
58288: GO 57559
// for x in sci do
58290: LD_ADDR_VAR 0 7
58294: PUSH
58295: LD_VAR 0 8
58299: PUSH
58300: FOR_IN
58301: IFFALSE 58351
// if IsInUnit ( x ) and not HasTask ( x ) then
58303: LD_VAR 0 7
58307: PPUSH
58308: CALL_OW 310
58312: PUSH
58313: LD_VAR 0 7
58317: PPUSH
58318: CALL_OW 314
58322: NOT
58323: AND
58324: IFFALSE 58349
// begin ComExitBuilding ( x ) ;
58326: LD_VAR 0 7
58330: PPUSH
58331: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
58335: LD_VAR 0 7
58339: PPUSH
58340: LD_VAR 0 3
58344: PPUSH
58345: CALL_OW 180
// end ;
58349: GO 58300
58351: POP
58352: POP
// end ; end ;
58353: GO 57559
58355: POP
58356: POP
// end ;
58357: GO 57477
58359: POP
58360: POP
// end ;
58361: LD_VAR 0 1
58365: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
58366: LD_INT 0
58368: PPUSH
58369: PPUSH
58370: PPUSH
58371: PPUSH
58372: PPUSH
58373: PPUSH
// if not mc_bases then
58374: LD_EXP 57
58378: NOT
58379: IFFALSE 58383
// exit ;
58381: GO 58622
// for i = 1 to 8 do
58383: LD_ADDR_VAR 0 2
58387: PUSH
58388: DOUBLE
58389: LD_INT 1
58391: DEC
58392: ST_TO_ADDR
58393: LD_INT 8
58395: PUSH
58396: FOR_TO
58397: IFFALSE 58423
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
58399: LD_ADDR_EXP 84
58403: PUSH
58404: LD_EXP 84
58408: PPUSH
58409: LD_VAR 0 2
58413: PPUSH
58414: EMPTY
58415: PPUSH
58416: CALL_OW 1
58420: ST_TO_ADDR
58421: GO 58396
58423: POP
58424: POP
// tmp := [ ] ;
58425: LD_ADDR_VAR 0 5
58429: PUSH
58430: EMPTY
58431: ST_TO_ADDR
// for i = 1 to mc_sides do
58432: LD_ADDR_VAR 0 2
58436: PUSH
58437: DOUBLE
58438: LD_INT 1
58440: DEC
58441: ST_TO_ADDR
58442: LD_EXP 83
58446: PUSH
58447: FOR_TO
58448: IFFALSE 58506
// if not mc_sides [ i ] in tmp then
58450: LD_EXP 83
58454: PUSH
58455: LD_VAR 0 2
58459: ARRAY
58460: PUSH
58461: LD_VAR 0 5
58465: IN
58466: NOT
58467: IFFALSE 58504
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
58469: LD_ADDR_VAR 0 5
58473: PUSH
58474: LD_VAR 0 5
58478: PPUSH
58479: LD_VAR 0 5
58483: PUSH
58484: LD_INT 1
58486: PLUS
58487: PPUSH
58488: LD_EXP 83
58492: PUSH
58493: LD_VAR 0 2
58497: ARRAY
58498: PPUSH
58499: CALL_OW 2
58503: ST_TO_ADDR
58504: GO 58447
58506: POP
58507: POP
// if not tmp then
58508: LD_VAR 0 5
58512: NOT
58513: IFFALSE 58517
// exit ;
58515: GO 58622
// for j in tmp do
58517: LD_ADDR_VAR 0 3
58521: PUSH
58522: LD_VAR 0 5
58526: PUSH
58527: FOR_IN
58528: IFFALSE 58620
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
58530: LD_ADDR_VAR 0 6
58534: PUSH
58535: LD_INT 22
58537: PUSH
58538: LD_VAR 0 3
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PPUSH
58547: CALL_OW 69
58551: ST_TO_ADDR
// if not un then
58552: LD_VAR 0 6
58556: NOT
58557: IFFALSE 58561
// continue ;
58559: GO 58527
// nation := GetNation ( un [ 1 ] ) ;
58561: LD_ADDR_VAR 0 4
58565: PUSH
58566: LD_VAR 0 6
58570: PUSH
58571: LD_INT 1
58573: ARRAY
58574: PPUSH
58575: CALL_OW 248
58579: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
58580: LD_ADDR_EXP 84
58584: PUSH
58585: LD_EXP 84
58589: PPUSH
58590: LD_VAR 0 3
58594: PPUSH
58595: LD_VAR 0 3
58599: PPUSH
58600: LD_VAR 0 4
58604: PPUSH
58605: LD_INT 1
58607: PPUSH
58608: CALL 11690 0 3
58612: PPUSH
58613: CALL_OW 1
58617: ST_TO_ADDR
// end ;
58618: GO 58527
58620: POP
58621: POP
// end ;
58622: LD_VAR 0 1
58626: RET
// export function MC_InitSides ( ) ; var i ; begin
58627: LD_INT 0
58629: PPUSH
58630: PPUSH
// if not mc_bases then
58631: LD_EXP 57
58635: NOT
58636: IFFALSE 58640
// exit ;
58638: GO 58714
// for i = 1 to mc_bases do
58640: LD_ADDR_VAR 0 2
58644: PUSH
58645: DOUBLE
58646: LD_INT 1
58648: DEC
58649: ST_TO_ADDR
58650: LD_EXP 57
58654: PUSH
58655: FOR_TO
58656: IFFALSE 58712
// if mc_bases [ i ] then
58658: LD_EXP 57
58662: PUSH
58663: LD_VAR 0 2
58667: ARRAY
58668: IFFALSE 58710
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
58670: LD_ADDR_EXP 83
58674: PUSH
58675: LD_EXP 83
58679: PPUSH
58680: LD_VAR 0 2
58684: PPUSH
58685: LD_EXP 57
58689: PUSH
58690: LD_VAR 0 2
58694: ARRAY
58695: PUSH
58696: LD_INT 1
58698: ARRAY
58699: PPUSH
58700: CALL_OW 255
58704: PPUSH
58705: CALL_OW 1
58709: ST_TO_ADDR
58710: GO 58655
58712: POP
58713: POP
// end ;
58714: LD_VAR 0 1
58718: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
58719: LD_INT 0
58721: PPUSH
58722: PPUSH
58723: PPUSH
58724: PPUSH
58725: PPUSH
58726: PPUSH
58727: PPUSH
58728: PPUSH
// if not mc_bases then
58729: LD_EXP 57
58733: NOT
58734: IFFALSE 58738
// exit ;
58736: GO 59383
// for i = 1 to mc_bases do
58738: LD_ADDR_VAR 0 2
58742: PUSH
58743: DOUBLE
58744: LD_INT 1
58746: DEC
58747: ST_TO_ADDR
58748: LD_EXP 57
58752: PUSH
58753: FOR_TO
58754: IFFALSE 59381
// begin if not mc_bases [ i ] then
58756: LD_EXP 57
58760: PUSH
58761: LD_VAR 0 2
58765: ARRAY
58766: NOT
58767: IFFALSE 58771
// continue ;
58769: GO 58753
// if mc_scan [ i ] then
58771: LD_EXP 80
58775: PUSH
58776: LD_VAR 0 2
58780: ARRAY
58781: IFFALSE 58807
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
58783: LD_ADDR_EXP 69
58787: PUSH
58788: LD_EXP 69
58792: PPUSH
58793: LD_VAR 0 2
58797: PPUSH
58798: EMPTY
58799: PPUSH
58800: CALL_OW 1
58804: ST_TO_ADDR
// continue ;
58805: GO 58753
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
58807: LD_ADDR_VAR 0 5
58811: PUSH
58812: LD_EXP 57
58816: PUSH
58817: LD_VAR 0 2
58821: ARRAY
58822: PUSH
58823: LD_INT 1
58825: ARRAY
58826: PPUSH
58827: CALL_OW 255
58831: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
58832: LD_ADDR_VAR 0 6
58836: PUSH
58837: LD_EXP 57
58841: PUSH
58842: LD_VAR 0 2
58846: ARRAY
58847: PPUSH
58848: LD_INT 30
58850: PUSH
58851: LD_INT 3
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PPUSH
58858: CALL_OW 72
58862: ST_TO_ADDR
// if not fac then
58863: LD_VAR 0 6
58867: NOT
58868: IFFALSE 58919
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58870: LD_ADDR_VAR 0 6
58874: PUSH
58875: LD_EXP 57
58879: PUSH
58880: LD_VAR 0 2
58884: ARRAY
58885: PPUSH
58886: LD_INT 2
58888: PUSH
58889: LD_INT 30
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 30
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: LIST
58913: PPUSH
58914: CALL_OW 72
58918: ST_TO_ADDR
// if not fac then
58919: LD_VAR 0 6
58923: NOT
58924: IFFALSE 58928
// continue ;
58926: GO 58753
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
58928: LD_ADDR_VAR 0 7
58932: PUSH
58933: LD_EXP 81
58937: PUSH
58938: LD_VAR 0 2
58942: ARRAY
58943: PPUSH
58944: LD_INT 22
58946: PUSH
58947: LD_VAR 0 5
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 21
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 3
58968: PUSH
58969: LD_INT 24
58971: PUSH
58972: LD_INT 1000
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: LIST
58987: PPUSH
58988: CALL_OW 70
58992: PUSH
58993: LD_INT 22
58995: PUSH
58996: LD_VAR 0 5
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 91
59007: PUSH
59008: LD_VAR 0 6
59012: PUSH
59013: LD_INT 1
59015: ARRAY
59016: PUSH
59017: LD_INT 25
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 21
59027: PUSH
59028: LD_INT 2
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 3
59037: PUSH
59038: LD_INT 24
59040: PUSH
59041: LD_INT 1000
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: PPUSH
59058: CALL_OW 69
59062: UNION
59063: ST_TO_ADDR
// if not vehs then
59064: LD_VAR 0 7
59068: NOT
59069: IFFALSE 59095
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
59071: LD_ADDR_EXP 69
59075: PUSH
59076: LD_EXP 69
59080: PPUSH
59081: LD_VAR 0 2
59085: PPUSH
59086: EMPTY
59087: PPUSH
59088: CALL_OW 1
59092: ST_TO_ADDR
// continue ;
59093: GO 58753
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
59095: LD_ADDR_VAR 0 8
59099: PUSH
59100: LD_EXP 57
59104: PUSH
59105: LD_VAR 0 2
59109: ARRAY
59110: PPUSH
59111: LD_INT 30
59113: PUSH
59114: LD_INT 3
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PPUSH
59121: CALL_OW 72
59125: ST_TO_ADDR
// if tmp then
59126: LD_VAR 0 8
59130: IFFALSE 59233
// begin for j in tmp do
59132: LD_ADDR_VAR 0 3
59136: PUSH
59137: LD_VAR 0 8
59141: PUSH
59142: FOR_IN
59143: IFFALSE 59231
// for k in UnitsInside ( j ) do
59145: LD_ADDR_VAR 0 4
59149: PUSH
59150: LD_VAR 0 3
59154: PPUSH
59155: CALL_OW 313
59159: PUSH
59160: FOR_IN
59161: IFFALSE 59227
// if k then
59163: LD_VAR 0 4
59167: IFFALSE 59225
// if not k in mc_repair_vehicle [ i ] then
59169: LD_VAR 0 4
59173: PUSH
59174: LD_EXP 69
59178: PUSH
59179: LD_VAR 0 2
59183: ARRAY
59184: IN
59185: NOT
59186: IFFALSE 59225
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
59188: LD_ADDR_EXP 69
59192: PUSH
59193: LD_EXP 69
59197: PPUSH
59198: LD_VAR 0 2
59202: PPUSH
59203: LD_EXP 69
59207: PUSH
59208: LD_VAR 0 2
59212: ARRAY
59213: PUSH
59214: LD_VAR 0 4
59218: UNION
59219: PPUSH
59220: CALL_OW 1
59224: ST_TO_ADDR
59225: GO 59160
59227: POP
59228: POP
59229: GO 59142
59231: POP
59232: POP
// end ; if not mc_repair_vehicle [ i ] then
59233: LD_EXP 69
59237: PUSH
59238: LD_VAR 0 2
59242: ARRAY
59243: NOT
59244: IFFALSE 59248
// continue ;
59246: GO 58753
// for j in mc_repair_vehicle [ i ] do
59248: LD_ADDR_VAR 0 3
59252: PUSH
59253: LD_EXP 69
59257: PUSH
59258: LD_VAR 0 2
59262: ARRAY
59263: PUSH
59264: FOR_IN
59265: IFFALSE 59377
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
59267: LD_VAR 0 3
59271: PPUSH
59272: CALL_OW 311
59276: NOT
59277: PUSH
59278: LD_VAR 0 3
59282: PUSH
59283: LD_EXP 60
59287: PUSH
59288: LD_VAR 0 2
59292: ARRAY
59293: PUSH
59294: LD_INT 1
59296: ARRAY
59297: IN
59298: NOT
59299: AND
59300: PUSH
59301: LD_VAR 0 3
59305: PUSH
59306: LD_EXP 60
59310: PUSH
59311: LD_VAR 0 2
59315: ARRAY
59316: PUSH
59317: LD_INT 2
59319: ARRAY
59320: IN
59321: NOT
59322: AND
59323: IFFALSE 59375
// begin if IsInUnit ( j ) then
59325: LD_VAR 0 3
59329: PPUSH
59330: CALL_OW 310
59334: IFFALSE 59345
// ComExitBuilding ( j ) ;
59336: LD_VAR 0 3
59340: PPUSH
59341: CALL_OW 122
// if not HasTask ( j ) then
59345: LD_VAR 0 3
59349: PPUSH
59350: CALL_OW 314
59354: NOT
59355: IFFALSE 59375
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
59357: LD_VAR 0 3
59361: PPUSH
59362: LD_VAR 0 7
59366: PUSH
59367: LD_INT 1
59369: ARRAY
59370: PPUSH
59371: CALL_OW 189
// end ; end ;
59375: GO 59264
59377: POP
59378: POP
// end ;
59379: GO 58753
59381: POP
59382: POP
// end ;
59383: LD_VAR 0 1
59387: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp ; begin
59388: LD_INT 0
59390: PPUSH
59391: PPUSH
59392: PPUSH
59393: PPUSH
59394: PPUSH
59395: PPUSH
59396: PPUSH
59397: PPUSH
// if not mc_bases then
59398: LD_EXP 57
59402: NOT
59403: IFFALSE 59407
// exit ;
59405: GO 59940
// for i = 1 to mc_bases do
59407: LD_ADDR_VAR 0 2
59411: PUSH
59412: DOUBLE
59413: LD_INT 1
59415: DEC
59416: ST_TO_ADDR
59417: LD_EXP 57
59421: PUSH
59422: FOR_TO
59423: IFFALSE 59938
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
59425: LD_EXP 85
59429: PUSH
59430: LD_VAR 0 2
59434: ARRAY
59435: NOT
59436: PUSH
59437: LD_EXP 60
59441: PUSH
59442: LD_VAR 0 2
59446: ARRAY
59447: PUSH
59448: LD_INT 1
59450: ARRAY
59451: OR
59452: PUSH
59453: LD_EXP 60
59457: PUSH
59458: LD_VAR 0 2
59462: ARRAY
59463: PUSH
59464: LD_INT 2
59466: ARRAY
59467: OR
59468: PUSH
59469: LD_EXP 83
59473: PUSH
59474: LD_VAR 0 2
59478: ARRAY
59479: PPUSH
59480: LD_INT 1
59482: PPUSH
59483: CALL_OW 325
59487: NOT
59488: OR
59489: PUSH
59490: LD_EXP 80
59494: PUSH
59495: LD_VAR 0 2
59499: ARRAY
59500: OR
59501: IFFALSE 59505
// continue ;
59503: GO 59422
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
59505: LD_ADDR_VAR 0 8
59509: PUSH
59510: LD_EXP 57
59514: PUSH
59515: LD_VAR 0 2
59519: ARRAY
59520: PPUSH
59521: LD_INT 25
59523: PUSH
59524: LD_INT 4
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 50
59533: PUSH
59534: EMPTY
59535: LIST
59536: PUSH
59537: LD_INT 3
59539: PUSH
59540: LD_INT 60
59542: PUSH
59543: EMPTY
59544: LIST
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: LIST
59554: PPUSH
59555: CALL_OW 72
59559: PUSH
59560: LD_EXP 61
59564: PUSH
59565: LD_VAR 0 2
59569: ARRAY
59570: DIFF
59571: ST_TO_ADDR
// if not tmp then
59572: LD_VAR 0 8
59576: NOT
59577: IFFALSE 59581
// continue ;
59579: GO 59422
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
59581: LD_ADDR_VAR 0 7
59585: PUSH
59586: LD_EXP 85
59590: PUSH
59591: LD_VAR 0 2
59595: ARRAY
59596: PPUSH
59597: LD_INT 22
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 25
59609: PUSH
59610: LD_INT 12
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PPUSH
59621: CALL_OW 70
59625: ST_TO_ADDR
// if not apes then
59626: LD_VAR 0 7
59630: NOT
59631: IFFALSE 59681
// begin if mc_taming [ i ] then
59633: LD_EXP 88
59637: PUSH
59638: LD_VAR 0 2
59642: ARRAY
59643: IFFALSE 59679
// begin MC_Reset ( i , 121 ) ;
59645: LD_VAR 0 2
59649: PPUSH
59650: LD_INT 121
59652: PPUSH
59653: CALL 50607 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
59657: LD_ADDR_EXP 88
59661: PUSH
59662: LD_EXP 88
59666: PPUSH
59667: LD_VAR 0 2
59671: PPUSH
59672: EMPTY
59673: PPUSH
59674: CALL_OW 1
59678: ST_TO_ADDR
// end ; continue ;
59679: GO 59422
// end ; for j in tmp do
59681: LD_ADDR_VAR 0 3
59685: PUSH
59686: LD_VAR 0 8
59690: PUSH
59691: FOR_IN
59692: IFFALSE 59934
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
59694: LD_VAR 0 3
59698: PUSH
59699: LD_EXP 88
59703: PUSH
59704: LD_VAR 0 2
59708: ARRAY
59709: IN
59710: NOT
59711: PUSH
59712: LD_EXP 88
59716: PUSH
59717: LD_VAR 0 2
59721: ARRAY
59722: PUSH
59723: LD_INT 3
59725: LESS
59726: AND
59727: IFFALSE 59785
// begin SetTag ( j , 121 ) ;
59729: LD_VAR 0 3
59733: PPUSH
59734: LD_INT 121
59736: PPUSH
59737: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
59741: LD_ADDR_EXP 88
59745: PUSH
59746: LD_EXP 88
59750: PPUSH
59751: LD_VAR 0 2
59755: PUSH
59756: LD_EXP 88
59760: PUSH
59761: LD_VAR 0 2
59765: ARRAY
59766: PUSH
59767: LD_INT 1
59769: PLUS
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PPUSH
59775: LD_VAR 0 3
59779: PPUSH
59780: CALL 18165 0 3
59784: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
59785: LD_VAR 0 3
59789: PUSH
59790: LD_EXP 88
59794: PUSH
59795: LD_VAR 0 2
59799: ARRAY
59800: IN
59801: IFFALSE 59932
// begin if IsInUnit ( j ) then
59803: LD_VAR 0 3
59807: PPUSH
59808: CALL_OW 310
59812: IFFALSE 59823
// ComExitBuilding ( j ) ;
59814: LD_VAR 0 3
59818: PPUSH
59819: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
59823: LD_ADDR_VAR 0 6
59827: PUSH
59828: LD_VAR 0 7
59832: PPUSH
59833: LD_VAR 0 3
59837: PPUSH
59838: CALL_OW 74
59842: ST_TO_ADDR
// if not ape then
59843: LD_VAR 0 6
59847: NOT
59848: IFFALSE 59852
// break ;
59850: GO 59934
// x := GetX ( ape ) ;
59852: LD_ADDR_VAR 0 4
59856: PUSH
59857: LD_VAR 0 6
59861: PPUSH
59862: CALL_OW 250
59866: ST_TO_ADDR
// y := GetY ( ape ) ;
59867: LD_ADDR_VAR 0 5
59871: PUSH
59872: LD_VAR 0 6
59876: PPUSH
59877: CALL_OW 251
59881: ST_TO_ADDR
// if not ValidHex ( x , y ) then
59882: LD_VAR 0 4
59886: PPUSH
59887: LD_VAR 0 5
59891: PPUSH
59892: CALL_OW 488
59896: NOT
59897: IFFALSE 59901
// break ;
59899: GO 59934
// if not HasTask ( j ) then
59901: LD_VAR 0 3
59905: PPUSH
59906: CALL_OW 314
59910: NOT
59911: IFFALSE 59932
// ComTameXY ( j , x , y ) ;
59913: LD_VAR 0 3
59917: PPUSH
59918: LD_VAR 0 4
59922: PPUSH
59923: LD_VAR 0 5
59927: PPUSH
59928: CALL_OW 131
// end ; end ;
59932: GO 59691
59934: POP
59935: POP
// end ;
59936: GO 59422
59938: POP
59939: POP
// end ;
59940: LD_VAR 0 1
59944: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
59945: LD_INT 0
59947: PPUSH
59948: PPUSH
59949: PPUSH
59950: PPUSH
59951: PPUSH
59952: PPUSH
59953: PPUSH
59954: PPUSH
// if not mc_bases then
59955: LD_EXP 57
59959: NOT
59960: IFFALSE 59964
// exit ;
59962: GO 60574
// for i = 1 to mc_bases do
59964: LD_ADDR_VAR 0 2
59968: PUSH
59969: DOUBLE
59970: LD_INT 1
59972: DEC
59973: ST_TO_ADDR
59974: LD_EXP 57
59978: PUSH
59979: FOR_TO
59980: IFFALSE 60572
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
59982: LD_EXP 86
59986: PUSH
59987: LD_VAR 0 2
59991: ARRAY
59992: NOT
59993: PUSH
59994: LD_EXP 86
59998: PUSH
59999: LD_VAR 0 2
60003: ARRAY
60004: PPUSH
60005: LD_INT 25
60007: PUSH
60008: LD_INT 12
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PPUSH
60015: CALL_OW 72
60019: NOT
60020: OR
60021: IFFALSE 60025
// continue ;
60023: GO 59979
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
60025: LD_ADDR_VAR 0 5
60029: PUSH
60030: LD_EXP 86
60034: PUSH
60035: LD_VAR 0 2
60039: ARRAY
60040: PUSH
60041: LD_INT 1
60043: ARRAY
60044: PPUSH
60045: CALL_OW 255
60049: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
60050: LD_VAR 0 5
60054: PPUSH
60055: LD_INT 2
60057: PPUSH
60058: CALL_OW 325
60062: IFFALSE 60307
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
60064: LD_ADDR_VAR 0 4
60068: PUSH
60069: LD_EXP 86
60073: PUSH
60074: LD_VAR 0 2
60078: ARRAY
60079: PPUSH
60080: LD_INT 25
60082: PUSH
60083: LD_INT 16
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PPUSH
60090: CALL_OW 72
60094: ST_TO_ADDR
// if tmp < 6 then
60095: LD_VAR 0 4
60099: PUSH
60100: LD_INT 6
60102: LESS
60103: IFFALSE 60307
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
60105: LD_ADDR_VAR 0 6
60109: PUSH
60110: LD_EXP 57
60114: PUSH
60115: LD_VAR 0 2
60119: ARRAY
60120: PPUSH
60121: LD_INT 2
60123: PUSH
60124: LD_INT 30
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 30
60136: PUSH
60137: LD_INT 1
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: LIST
60148: PPUSH
60149: CALL_OW 72
60153: ST_TO_ADDR
// if depot then
60154: LD_VAR 0 6
60158: IFFALSE 60307
// begin for j in depot do
60160: LD_ADDR_VAR 0 3
60164: PUSH
60165: LD_VAR 0 6
60169: PUSH
60170: FOR_IN
60171: IFFALSE 60202
// begin if UnitsInside ( j ) < 6 then
60173: LD_VAR 0 3
60177: PPUSH
60178: CALL_OW 313
60182: PUSH
60183: LD_INT 6
60185: LESS
60186: IFFALSE 60200
// begin selected := j ;
60188: LD_ADDR_VAR 0 7
60192: PUSH
60193: LD_VAR 0 3
60197: ST_TO_ADDR
// break ;
60198: GO 60202
// end ; end ;
60200: GO 60170
60202: POP
60203: POP
// if selected then
60204: LD_VAR 0 7
60208: IFFALSE 60307
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
60210: LD_ADDR_VAR 0 3
60214: PUSH
60215: LD_EXP 86
60219: PUSH
60220: LD_VAR 0 2
60224: ARRAY
60225: PPUSH
60226: LD_INT 25
60228: PUSH
60229: LD_INT 12
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PPUSH
60236: CALL_OW 72
60240: PUSH
60241: FOR_IN
60242: IFFALSE 60305
// if not HasTask ( j ) then
60244: LD_VAR 0 3
60248: PPUSH
60249: CALL_OW 314
60253: NOT
60254: IFFALSE 60303
// begin if not IsInUnit ( j ) then
60256: LD_VAR 0 3
60260: PPUSH
60261: CALL_OW 310
60265: NOT
60266: IFFALSE 60282
// ComEnterUnit ( j , selected ) ;
60268: LD_VAR 0 3
60272: PPUSH
60273: LD_VAR 0 7
60277: PPUSH
60278: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
60282: LD_VAR 0 3
60286: PPUSH
60287: LD_INT 16
60289: PPUSH
60290: CALL_OW 183
// AddComExitBuilding ( j ) ;
60294: LD_VAR 0 3
60298: PPUSH
60299: CALL_OW 182
// end ;
60303: GO 60241
60305: POP
60306: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
60307: LD_VAR 0 5
60311: PPUSH
60312: LD_INT 11
60314: PPUSH
60315: CALL_OW 325
60319: IFFALSE 60570
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
60321: LD_ADDR_VAR 0 4
60325: PUSH
60326: LD_EXP 86
60330: PUSH
60331: LD_VAR 0 2
60335: ARRAY
60336: PPUSH
60337: LD_INT 25
60339: PUSH
60340: LD_INT 16
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PPUSH
60347: CALL_OW 72
60351: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
60352: LD_VAR 0 4
60356: PUSH
60357: LD_INT 6
60359: GREATEREQUAL
60360: PUSH
60361: LD_VAR 0 5
60365: PPUSH
60366: LD_INT 2
60368: PPUSH
60369: CALL_OW 325
60373: NOT
60374: OR
60375: IFFALSE 60570
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
60377: LD_ADDR_VAR 0 8
60381: PUSH
60382: LD_EXP 57
60386: PUSH
60387: LD_VAR 0 2
60391: ARRAY
60392: PPUSH
60393: LD_INT 2
60395: PUSH
60396: LD_INT 30
60398: PUSH
60399: LD_INT 4
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 30
60408: PUSH
60409: LD_INT 5
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: LIST
60420: PPUSH
60421: CALL_OW 72
60425: ST_TO_ADDR
// if barracks then
60426: LD_VAR 0 8
60430: IFFALSE 60570
// begin for j in barracks do
60432: LD_ADDR_VAR 0 3
60436: PUSH
60437: LD_VAR 0 8
60441: PUSH
60442: FOR_IN
60443: IFFALSE 60474
// begin if UnitsInside ( j ) < 6 then
60445: LD_VAR 0 3
60449: PPUSH
60450: CALL_OW 313
60454: PUSH
60455: LD_INT 6
60457: LESS
60458: IFFALSE 60472
// begin selected := j ;
60460: LD_ADDR_VAR 0 7
60464: PUSH
60465: LD_VAR 0 3
60469: ST_TO_ADDR
// break ;
60470: GO 60474
// end ; end ;
60472: GO 60442
60474: POP
60475: POP
// if selected then
60476: LD_VAR 0 7
60480: IFFALSE 60570
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
60482: LD_ADDR_VAR 0 3
60486: PUSH
60487: LD_EXP 86
60491: PUSH
60492: LD_VAR 0 2
60496: ARRAY
60497: PPUSH
60498: LD_INT 25
60500: PUSH
60501: LD_INT 12
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PPUSH
60508: CALL_OW 72
60512: PUSH
60513: FOR_IN
60514: IFFALSE 60568
// if not IsInUnit ( j ) and not HasTask ( j ) then
60516: LD_VAR 0 3
60520: PPUSH
60521: CALL_OW 310
60525: NOT
60526: PUSH
60527: LD_VAR 0 3
60531: PPUSH
60532: CALL_OW 314
60536: NOT
60537: AND
60538: IFFALSE 60566
// begin ComEnterUnit ( j , selected ) ;
60540: LD_VAR 0 3
60544: PPUSH
60545: LD_VAR 0 7
60549: PPUSH
60550: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
60554: LD_VAR 0 3
60558: PPUSH
60559: LD_INT 15
60561: PPUSH
60562: CALL_OW 183
// end ;
60566: GO 60513
60568: POP
60569: POP
// end ; end ; end ; end ; end ;
60570: GO 59979
60572: POP
60573: POP
// end ;
60574: LD_VAR 0 1
60578: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
60579: LD_INT 0
60581: PPUSH
60582: PPUSH
60583: PPUSH
60584: PPUSH
// if not mc_bases then
60585: LD_EXP 57
60589: NOT
60590: IFFALSE 60594
// exit ;
60592: GO 60772
// for i = 1 to mc_bases do
60594: LD_ADDR_VAR 0 2
60598: PUSH
60599: DOUBLE
60600: LD_INT 1
60602: DEC
60603: ST_TO_ADDR
60604: LD_EXP 57
60608: PUSH
60609: FOR_TO
60610: IFFALSE 60770
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
60612: LD_ADDR_VAR 0 4
60616: PUSH
60617: LD_EXP 57
60621: PUSH
60622: LD_VAR 0 2
60626: ARRAY
60627: PPUSH
60628: LD_INT 25
60630: PUSH
60631: LD_INT 9
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PPUSH
60638: CALL_OW 72
60642: ST_TO_ADDR
// if not tmp then
60643: LD_VAR 0 4
60647: NOT
60648: IFFALSE 60652
// continue ;
60650: GO 60609
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
60652: LD_EXP 83
60656: PUSH
60657: LD_VAR 0 2
60661: ARRAY
60662: PPUSH
60663: LD_INT 29
60665: PPUSH
60666: CALL_OW 325
60670: NOT
60671: PUSH
60672: LD_EXP 83
60676: PUSH
60677: LD_VAR 0 2
60681: ARRAY
60682: PPUSH
60683: LD_INT 28
60685: PPUSH
60686: CALL_OW 325
60690: NOT
60691: AND
60692: IFFALSE 60696
// continue ;
60694: GO 60609
// for j in tmp do
60696: LD_ADDR_VAR 0 3
60700: PUSH
60701: LD_VAR 0 4
60705: PUSH
60706: FOR_IN
60707: IFFALSE 60766
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
60709: LD_VAR 0 3
60713: PUSH
60714: LD_EXP 60
60718: PUSH
60719: LD_VAR 0 2
60723: ARRAY
60724: PUSH
60725: LD_INT 1
60727: ARRAY
60728: IN
60729: NOT
60730: PUSH
60731: LD_VAR 0 3
60735: PUSH
60736: LD_EXP 60
60740: PUSH
60741: LD_VAR 0 2
60745: ARRAY
60746: PUSH
60747: LD_INT 2
60749: ARRAY
60750: IN
60751: NOT
60752: AND
60753: IFFALSE 60764
// ComSpaceTimeShoot ( j ) ;
60755: LD_VAR 0 3
60759: PPUSH
60760: CALL 12327 0 1
60764: GO 60706
60766: POP
60767: POP
// end ;
60768: GO 60609
60770: POP
60771: POP
// end ;
60772: LD_VAR 0 1
60776: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
60777: LD_INT 0
60779: PPUSH
60780: PPUSH
60781: PPUSH
60782: PPUSH
// if not mc_bases then
60783: LD_EXP 57
60787: NOT
60788: IFFALSE 60792
// exit ;
60790: GO 60814
// for i = 1 to mc_bases do
60792: LD_ADDR_VAR 0 2
60796: PUSH
60797: DOUBLE
60798: LD_INT 1
60800: DEC
60801: ST_TO_ADDR
60802: LD_EXP 57
60806: PUSH
60807: FOR_TO
60808: IFFALSE 60812
// begin end ;
60810: GO 60807
60812: POP
60813: POP
// end ;
60814: LD_VAR 0 1
60818: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
60819: LD_INT 0
60821: PPUSH
60822: PPUSH
60823: PPUSH
60824: PPUSH
60825: PPUSH
60826: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
60827: LD_VAR 0 1
60831: NOT
60832: PUSH
60833: LD_VAR 0 2
60837: NOT
60838: OR
60839: PUSH
60840: LD_VAR 0 3
60844: NOT
60845: OR
60846: PUSH
60847: LD_VAR 0 4
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: LD_INT 2
60857: PUSH
60858: LD_INT 3
60860: PUSH
60861: LD_INT 4
60863: PUSH
60864: LD_INT 5
60866: PUSH
60867: LD_INT 8
60869: PUSH
60870: LD_INT 9
60872: PUSH
60873: LD_INT 15
60875: PUSH
60876: LD_INT 16
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: IN
60890: NOT
60891: OR
60892: IFFALSE 60896
// exit ;
60894: GO 61796
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
60896: LD_ADDR_VAR 0 2
60900: PUSH
60901: LD_VAR 0 2
60905: PPUSH
60906: LD_INT 21
60908: PUSH
60909: LD_INT 3
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 24
60918: PUSH
60919: LD_INT 250
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PPUSH
60930: CALL_OW 72
60934: ST_TO_ADDR
// case class of 1 , 15 :
60935: LD_VAR 0 4
60939: PUSH
60940: LD_INT 1
60942: DOUBLE
60943: EQUAL
60944: IFTRUE 60954
60946: LD_INT 15
60948: DOUBLE
60949: EQUAL
60950: IFTRUE 60954
60952: GO 61039
60954: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
60955: LD_ADDR_VAR 0 8
60959: PUSH
60960: LD_VAR 0 2
60964: PPUSH
60965: LD_INT 2
60967: PUSH
60968: LD_INT 30
60970: PUSH
60971: LD_INT 32
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 30
60980: PUSH
60981: LD_INT 31
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: LIST
60992: PPUSH
60993: CALL_OW 72
60997: PUSH
60998: LD_VAR 0 2
61002: PPUSH
61003: LD_INT 2
61005: PUSH
61006: LD_INT 30
61008: PUSH
61009: LD_INT 4
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 30
61018: PUSH
61019: LD_INT 5
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: LIST
61030: PPUSH
61031: CALL_OW 72
61035: ADD
61036: ST_TO_ADDR
61037: GO 61285
61039: LD_INT 2
61041: DOUBLE
61042: EQUAL
61043: IFTRUE 61053
61045: LD_INT 16
61047: DOUBLE
61048: EQUAL
61049: IFTRUE 61053
61051: GO 61099
61053: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
61054: LD_ADDR_VAR 0 8
61058: PUSH
61059: LD_VAR 0 2
61063: PPUSH
61064: LD_INT 2
61066: PUSH
61067: LD_INT 30
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 30
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: LIST
61091: PPUSH
61092: CALL_OW 72
61096: ST_TO_ADDR
61097: GO 61285
61099: LD_INT 3
61101: DOUBLE
61102: EQUAL
61103: IFTRUE 61107
61105: GO 61153
61107: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
61108: LD_ADDR_VAR 0 8
61112: PUSH
61113: LD_VAR 0 2
61117: PPUSH
61118: LD_INT 2
61120: PUSH
61121: LD_INT 30
61123: PUSH
61124: LD_INT 2
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 30
61133: PUSH
61134: LD_INT 3
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: LIST
61145: PPUSH
61146: CALL_OW 72
61150: ST_TO_ADDR
61151: GO 61285
61153: LD_INT 4
61155: DOUBLE
61156: EQUAL
61157: IFTRUE 61161
61159: GO 61218
61161: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
61162: LD_ADDR_VAR 0 8
61166: PUSH
61167: LD_VAR 0 2
61171: PPUSH
61172: LD_INT 2
61174: PUSH
61175: LD_INT 30
61177: PUSH
61178: LD_INT 6
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 30
61187: PUSH
61188: LD_INT 7
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 30
61197: PUSH
61198: LD_INT 8
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: PPUSH
61211: CALL_OW 72
61215: ST_TO_ADDR
61216: GO 61285
61218: LD_INT 5
61220: DOUBLE
61221: EQUAL
61222: IFTRUE 61238
61224: LD_INT 8
61226: DOUBLE
61227: EQUAL
61228: IFTRUE 61238
61230: LD_INT 9
61232: DOUBLE
61233: EQUAL
61234: IFTRUE 61238
61236: GO 61284
61238: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
61239: LD_ADDR_VAR 0 8
61243: PUSH
61244: LD_VAR 0 2
61248: PPUSH
61249: LD_INT 2
61251: PUSH
61252: LD_INT 30
61254: PUSH
61255: LD_INT 4
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 30
61264: PUSH
61265: LD_INT 5
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: LIST
61276: PPUSH
61277: CALL_OW 72
61281: ST_TO_ADDR
61282: GO 61285
61284: POP
// if not tmp then
61285: LD_VAR 0 8
61289: NOT
61290: IFFALSE 61294
// exit ;
61292: GO 61796
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
61294: LD_VAR 0 4
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: LD_INT 15
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: IN
61309: PUSH
61310: LD_EXP 66
61314: PUSH
61315: LD_VAR 0 1
61319: ARRAY
61320: AND
61321: IFFALSE 61477
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
61323: LD_ADDR_VAR 0 9
61327: PUSH
61328: LD_EXP 66
61332: PUSH
61333: LD_VAR 0 1
61337: ARRAY
61338: PUSH
61339: LD_INT 1
61341: ARRAY
61342: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
61343: LD_VAR 0 9
61347: PUSH
61348: LD_EXP 67
61352: PUSH
61353: LD_VAR 0 1
61357: ARRAY
61358: IN
61359: NOT
61360: IFFALSE 61475
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
61362: LD_ADDR_EXP 67
61366: PUSH
61367: LD_EXP 67
61371: PPUSH
61372: LD_VAR 0 1
61376: PUSH
61377: LD_EXP 67
61381: PUSH
61382: LD_VAR 0 1
61386: ARRAY
61387: PUSH
61388: LD_INT 1
61390: PLUS
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PPUSH
61396: LD_VAR 0 9
61400: PPUSH
61401: CALL 18165 0 3
61405: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
61406: LD_ADDR_EXP 66
61410: PUSH
61411: LD_EXP 66
61415: PPUSH
61416: LD_VAR 0 1
61420: PPUSH
61421: LD_EXP 66
61425: PUSH
61426: LD_VAR 0 1
61430: ARRAY
61431: PUSH
61432: LD_VAR 0 9
61436: DIFF
61437: PPUSH
61438: CALL_OW 1
61442: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
61443: LD_VAR 0 3
61447: PPUSH
61448: LD_EXP 67
61452: PUSH
61453: LD_VAR 0 1
61457: ARRAY
61458: PUSH
61459: LD_EXP 67
61463: PUSH
61464: LD_VAR 0 1
61468: ARRAY
61469: ARRAY
61470: PPUSH
61471: CALL_OW 120
// end ; exit ;
61475: GO 61796
// end ; if tmp > 1 then
61477: LD_VAR 0 8
61481: PUSH
61482: LD_INT 1
61484: GREATER
61485: IFFALSE 61589
// for i = 2 to tmp do
61487: LD_ADDR_VAR 0 6
61491: PUSH
61492: DOUBLE
61493: LD_INT 2
61495: DEC
61496: ST_TO_ADDR
61497: LD_VAR 0 8
61501: PUSH
61502: FOR_TO
61503: IFFALSE 61587
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
61505: LD_VAR 0 8
61509: PUSH
61510: LD_VAR 0 6
61514: ARRAY
61515: PPUSH
61516: CALL_OW 461
61520: PUSH
61521: LD_INT 6
61523: EQUAL
61524: IFFALSE 61585
// begin x := tmp [ i ] ;
61526: LD_ADDR_VAR 0 9
61530: PUSH
61531: LD_VAR 0 8
61535: PUSH
61536: LD_VAR 0 6
61540: ARRAY
61541: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
61542: LD_ADDR_VAR 0 8
61546: PUSH
61547: LD_VAR 0 8
61551: PPUSH
61552: LD_VAR 0 6
61556: PPUSH
61557: CALL_OW 3
61561: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
61562: LD_ADDR_VAR 0 8
61566: PUSH
61567: LD_VAR 0 8
61571: PPUSH
61572: LD_INT 1
61574: PPUSH
61575: LD_VAR 0 9
61579: PPUSH
61580: CALL_OW 2
61584: ST_TO_ADDR
// end ;
61585: GO 61502
61587: POP
61588: POP
// for i in tmp do
61589: LD_ADDR_VAR 0 6
61593: PUSH
61594: LD_VAR 0 8
61598: PUSH
61599: FOR_IN
61600: IFFALSE 61669
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
61602: LD_VAR 0 6
61606: PPUSH
61607: CALL_OW 313
61611: PUSH
61612: LD_INT 6
61614: LESS
61615: PUSH
61616: LD_VAR 0 6
61620: PPUSH
61621: CALL_OW 266
61625: PUSH
61626: LD_INT 31
61628: PUSH
61629: LD_INT 32
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: IN
61636: NOT
61637: AND
61638: PUSH
61639: LD_VAR 0 6
61643: PPUSH
61644: CALL_OW 313
61648: PUSH
61649: LD_INT 0
61651: EQUAL
61652: OR
61653: IFFALSE 61667
// begin j := i ;
61655: LD_ADDR_VAR 0 7
61659: PUSH
61660: LD_VAR 0 6
61664: ST_TO_ADDR
// break ;
61665: GO 61669
// end ; end ;
61667: GO 61599
61669: POP
61670: POP
// if j then
61671: LD_VAR 0 7
61675: IFFALSE 61693
// ComEnterUnit ( unit , j ) else
61677: LD_VAR 0 3
61681: PPUSH
61682: LD_VAR 0 7
61686: PPUSH
61687: CALL_OW 120
61691: GO 61796
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
61693: LD_ADDR_VAR 0 10
61697: PUSH
61698: LD_VAR 0 2
61702: PPUSH
61703: LD_INT 2
61705: PUSH
61706: LD_INT 30
61708: PUSH
61709: LD_INT 0
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 30
61718: PUSH
61719: LD_INT 1
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: LIST
61730: PPUSH
61731: CALL_OW 72
61735: ST_TO_ADDR
// if depot then
61736: LD_VAR 0 10
61740: IFFALSE 61796
// begin depot := NearestUnitToUnit ( depot , unit ) ;
61742: LD_ADDR_VAR 0 10
61746: PUSH
61747: LD_VAR 0 10
61751: PPUSH
61752: LD_VAR 0 3
61756: PPUSH
61757: CALL_OW 74
61761: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
61762: LD_VAR 0 3
61766: PPUSH
61767: LD_VAR 0 10
61771: PPUSH
61772: CALL_OW 296
61776: PUSH
61777: LD_INT 10
61779: GREATER
61780: IFFALSE 61796
// ComStandNearbyBuilding ( unit , depot ) ;
61782: LD_VAR 0 3
61786: PPUSH
61787: LD_VAR 0 10
61791: PPUSH
61792: CALL 12944 0 2
// end ; end ; end ;
61796: LD_VAR 0 5
61800: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
61801: LD_INT 0
61803: PPUSH
61804: PPUSH
61805: PPUSH
61806: PPUSH
// if not mc_bases then
61807: LD_EXP 57
61811: NOT
61812: IFFALSE 61816
// exit ;
61814: GO 62055
// for i = 1 to mc_bases do
61816: LD_ADDR_VAR 0 2
61820: PUSH
61821: DOUBLE
61822: LD_INT 1
61824: DEC
61825: ST_TO_ADDR
61826: LD_EXP 57
61830: PUSH
61831: FOR_TO
61832: IFFALSE 62053
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
61834: LD_ADDR_VAR 0 4
61838: PUSH
61839: LD_EXP 57
61843: PUSH
61844: LD_VAR 0 2
61848: ARRAY
61849: PPUSH
61850: LD_INT 21
61852: PUSH
61853: LD_INT 1
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PPUSH
61860: CALL_OW 72
61864: PUSH
61865: LD_EXP 86
61869: PUSH
61870: LD_VAR 0 2
61874: ARRAY
61875: UNION
61876: ST_TO_ADDR
// if not tmp then
61877: LD_VAR 0 4
61881: NOT
61882: IFFALSE 61886
// continue ;
61884: GO 61831
// for j in tmp do
61886: LD_ADDR_VAR 0 3
61890: PUSH
61891: LD_VAR 0 4
61895: PUSH
61896: FOR_IN
61897: IFFALSE 62049
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
61899: LD_VAR 0 3
61903: PPUSH
61904: CALL_OW 110
61908: NOT
61909: PUSH
61910: LD_VAR 0 3
61914: PPUSH
61915: CALL_OW 314
61919: NOT
61920: AND
61921: PUSH
61922: LD_VAR 0 3
61926: PPUSH
61927: CALL_OW 311
61931: NOT
61932: AND
61933: PUSH
61934: LD_VAR 0 3
61938: PPUSH
61939: CALL_OW 310
61943: NOT
61944: AND
61945: PUSH
61946: LD_VAR 0 3
61950: PUSH
61951: LD_EXP 60
61955: PUSH
61956: LD_VAR 0 2
61960: ARRAY
61961: PUSH
61962: LD_INT 1
61964: ARRAY
61965: IN
61966: NOT
61967: AND
61968: PUSH
61969: LD_VAR 0 3
61973: PUSH
61974: LD_EXP 60
61978: PUSH
61979: LD_VAR 0 2
61983: ARRAY
61984: PUSH
61985: LD_INT 2
61987: ARRAY
61988: IN
61989: NOT
61990: AND
61991: PUSH
61992: LD_VAR 0 3
61996: PUSH
61997: LD_EXP 69
62001: PUSH
62002: LD_VAR 0 2
62006: ARRAY
62007: IN
62008: NOT
62009: AND
62010: IFFALSE 62047
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
62012: LD_VAR 0 2
62016: PPUSH
62017: LD_EXP 57
62021: PUSH
62022: LD_VAR 0 2
62026: ARRAY
62027: PPUSH
62028: LD_VAR 0 3
62032: PPUSH
62033: LD_VAR 0 3
62037: PPUSH
62038: CALL_OW 257
62042: PPUSH
62043: CALL 60819 0 4
// end ;
62047: GO 61896
62049: POP
62050: POP
// end ;
62051: GO 61831
62053: POP
62054: POP
// end ;
62055: LD_VAR 0 1
62059: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
62060: LD_INT 0
62062: PPUSH
62063: PPUSH
62064: PPUSH
62065: PPUSH
62066: PPUSH
62067: PPUSH
// if not mc_bases [ base ] then
62068: LD_EXP 57
62072: PUSH
62073: LD_VAR 0 1
62077: ARRAY
62078: NOT
62079: IFFALSE 62083
// exit ;
62081: GO 62265
// tmp := [ ] ;
62083: LD_ADDR_VAR 0 6
62087: PUSH
62088: EMPTY
62089: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
62090: LD_ADDR_VAR 0 7
62094: PUSH
62095: LD_VAR 0 3
62099: PPUSH
62100: LD_INT 0
62102: PPUSH
62103: CALL_OW 517
62107: ST_TO_ADDR
// if not list then
62108: LD_VAR 0 7
62112: NOT
62113: IFFALSE 62117
// exit ;
62115: GO 62265
// for i = 1 to amount do
62117: LD_ADDR_VAR 0 5
62121: PUSH
62122: DOUBLE
62123: LD_INT 1
62125: DEC
62126: ST_TO_ADDR
62127: LD_VAR 0 2
62131: PUSH
62132: FOR_TO
62133: IFFALSE 62213
// begin x := rand ( 1 , list [ 1 ] ) ;
62135: LD_ADDR_VAR 0 8
62139: PUSH
62140: LD_INT 1
62142: PPUSH
62143: LD_VAR 0 7
62147: PUSH
62148: LD_INT 1
62150: ARRAY
62151: PPUSH
62152: CALL_OW 12
62156: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
62157: LD_ADDR_VAR 0 6
62161: PUSH
62162: LD_VAR 0 6
62166: PPUSH
62167: LD_VAR 0 5
62171: PPUSH
62172: LD_VAR 0 7
62176: PUSH
62177: LD_INT 1
62179: ARRAY
62180: PUSH
62181: LD_VAR 0 8
62185: ARRAY
62186: PUSH
62187: LD_VAR 0 7
62191: PUSH
62192: LD_INT 2
62194: ARRAY
62195: PUSH
62196: LD_VAR 0 8
62200: ARRAY
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PPUSH
62206: CALL_OW 1
62210: ST_TO_ADDR
// end ;
62211: GO 62132
62213: POP
62214: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
62215: LD_ADDR_EXP 70
62219: PUSH
62220: LD_EXP 70
62224: PPUSH
62225: LD_VAR 0 1
62229: PPUSH
62230: LD_VAR 0 6
62234: PPUSH
62235: CALL_OW 1
62239: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
62240: LD_ADDR_EXP 72
62244: PUSH
62245: LD_EXP 72
62249: PPUSH
62250: LD_VAR 0 1
62254: PPUSH
62255: LD_VAR 0 3
62259: PPUSH
62260: CALL_OW 1
62264: ST_TO_ADDR
// end ;
62265: LD_VAR 0 4
62269: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
62270: LD_INT 0
62272: PPUSH
// if not mc_bases [ base ] then
62273: LD_EXP 57
62277: PUSH
62278: LD_VAR 0 1
62282: ARRAY
62283: NOT
62284: IFFALSE 62288
// exit ;
62286: GO 62313
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
62288: LD_ADDR_EXP 62
62292: PUSH
62293: LD_EXP 62
62297: PPUSH
62298: LD_VAR 0 1
62302: PPUSH
62303: LD_VAR 0 2
62307: PPUSH
62308: CALL_OW 1
62312: ST_TO_ADDR
// end ;
62313: LD_VAR 0 3
62317: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
62318: LD_INT 0
62320: PPUSH
// if not mc_bases [ base ] then
62321: LD_EXP 57
62325: PUSH
62326: LD_VAR 0 1
62330: ARRAY
62331: NOT
62332: IFFALSE 62336
// exit ;
62334: GO 62361
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
62336: LD_ADDR_EXP 78
62340: PUSH
62341: LD_EXP 78
62345: PPUSH
62346: LD_VAR 0 1
62350: PPUSH
62351: LD_VAR 0 2
62355: PPUSH
62356: CALL_OW 1
62360: ST_TO_ADDR
// end ;
62361: LD_VAR 0 3
62365: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
62366: LD_INT 0
62368: PPUSH
// if not mc_bases [ base ] then
62369: LD_EXP 57
62373: PUSH
62374: LD_VAR 0 1
62378: ARRAY
62379: NOT
62380: IFFALSE 62384
// exit ;
62382: GO 62424
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
62384: LD_ADDR_EXP 78
62388: PUSH
62389: LD_EXP 78
62393: PPUSH
62394: LD_VAR 0 1
62398: PPUSH
62399: LD_EXP 78
62403: PUSH
62404: LD_VAR 0 1
62408: ARRAY
62409: PUSH
62410: LD_VAR 0 2
62414: PUSH
62415: EMPTY
62416: LIST
62417: ADD
62418: PPUSH
62419: CALL_OW 1
62423: ST_TO_ADDR
// end ;
62424: LD_VAR 0 3
62428: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
62429: LD_INT 0
62431: PPUSH
// if not mc_bases [ base ] then
62432: LD_EXP 57
62436: PUSH
62437: LD_VAR 0 1
62441: ARRAY
62442: NOT
62443: IFFALSE 62447
// exit ;
62445: GO 62559
// mc_defender := Replace ( mc_defender , base , deflist ) ;
62447: LD_ADDR_EXP 79
62451: PUSH
62452: LD_EXP 79
62456: PPUSH
62457: LD_VAR 0 1
62461: PPUSH
62462: LD_VAR 0 2
62466: PPUSH
62467: CALL_OW 1
62471: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
62472: LD_ADDR_EXP 68
62476: PUSH
62477: LD_EXP 68
62481: PPUSH
62482: LD_VAR 0 1
62486: PPUSH
62487: LD_VAR 0 2
62491: PUSH
62492: LD_INT 0
62494: PLUS
62495: PPUSH
62496: CALL_OW 1
62500: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
62501: LD_ADDR_EXP 76
62505: PUSH
62506: LD_EXP 76
62510: PPUSH
62511: LD_VAR 0 1
62515: PPUSH
62516: LD_EXP 76
62520: PUSH
62521: LD_VAR 0 1
62525: ARRAY
62526: PUSH
62527: LD_EXP 79
62531: PUSH
62532: LD_VAR 0 1
62536: ARRAY
62537: PPUSH
62538: LD_INT 21
62540: PUSH
62541: LD_INT 2
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PPUSH
62548: CALL_OW 72
62552: UNION
62553: PPUSH
62554: CALL_OW 1
62558: ST_TO_ADDR
// end ;
62559: LD_VAR 0 3
62563: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
62564: LD_INT 0
62566: PPUSH
62567: PPUSH
62568: PPUSH
62569: PPUSH
// if not mc_bases [ base ] then
62570: LD_EXP 57
62574: PUSH
62575: LD_VAR 0 1
62579: ARRAY
62580: NOT
62581: IFFALSE 62585
// exit ;
62583: GO 62650
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
62585: LD_ADDR_EXP 77
62589: PUSH
62590: LD_EXP 77
62594: PPUSH
62595: LD_VAR 0 1
62599: PUSH
62600: LD_EXP 77
62604: PUSH
62605: LD_VAR 0 1
62609: ARRAY
62610: PUSH
62611: LD_INT 1
62613: PLUS
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PPUSH
62619: LD_VAR 0 1
62623: PUSH
62624: LD_VAR 0 2
62628: PUSH
62629: LD_VAR 0 3
62633: PUSH
62634: LD_VAR 0 4
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: PPUSH
62645: CALL 18165 0 3
62649: ST_TO_ADDR
// end ;
62650: LD_VAR 0 5
62654: RET
// export function MC_GetMinesField ( base ) ; begin
62655: LD_INT 0
62657: PPUSH
// result := mc_mines [ base ] ;
62658: LD_ADDR_VAR 0 2
62662: PUSH
62663: LD_EXP 70
62667: PUSH
62668: LD_VAR 0 1
62672: ARRAY
62673: ST_TO_ADDR
// end ;
62674: LD_VAR 0 2
62678: RET
// export function MC_GetProduceList ( base ) ; begin
62679: LD_INT 0
62681: PPUSH
// result := mc_produce [ base ] ;
62682: LD_ADDR_VAR 0 2
62686: PUSH
62687: LD_EXP 78
62691: PUSH
62692: LD_VAR 0 1
62696: ARRAY
62697: ST_TO_ADDR
// end ;
62698: LD_VAR 0 2
62702: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
62703: LD_INT 0
62705: PPUSH
62706: PPUSH
// if not mc_bases then
62707: LD_EXP 57
62711: NOT
62712: IFFALSE 62716
// exit ;
62714: GO 62781
// if mc_bases [ base ] then
62716: LD_EXP 57
62720: PUSH
62721: LD_VAR 0 1
62725: ARRAY
62726: IFFALSE 62781
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
62728: LD_ADDR_VAR 0 3
62732: PUSH
62733: LD_EXP 57
62737: PUSH
62738: LD_VAR 0 1
62742: ARRAY
62743: PPUSH
62744: LD_INT 30
62746: PUSH
62747: LD_VAR 0 2
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PPUSH
62756: CALL_OW 72
62760: ST_TO_ADDR
// if result then
62761: LD_VAR 0 3
62765: IFFALSE 62781
// result := result [ 1 ] ;
62767: LD_ADDR_VAR 0 3
62771: PUSH
62772: LD_VAR 0 3
62776: PUSH
62777: LD_INT 1
62779: ARRAY
62780: ST_TO_ADDR
// end ; end ;
62781: LD_VAR 0 3
62785: RET
// export function MC_SetTame ( base , area ) ; begin
62786: LD_INT 0
62788: PPUSH
// if not mc_bases or not base then
62789: LD_EXP 57
62793: NOT
62794: PUSH
62795: LD_VAR 0 1
62799: NOT
62800: OR
62801: IFFALSE 62805
// exit ;
62803: GO 62830
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
62805: LD_ADDR_EXP 85
62809: PUSH
62810: LD_EXP 85
62814: PPUSH
62815: LD_VAR 0 1
62819: PPUSH
62820: LD_VAR 0 2
62824: PPUSH
62825: CALL_OW 1
62829: ST_TO_ADDR
// end ;
62830: LD_VAR 0 3
62834: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
62835: LD_INT 0
62837: PPUSH
62838: PPUSH
// if not mc_bases or not base or not kinds then
62839: LD_EXP 57
62843: NOT
62844: PUSH
62845: LD_VAR 0 1
62849: NOT
62850: OR
62851: PUSH
62852: LD_VAR 0 2
62856: NOT
62857: OR
62858: IFFALSE 62862
// exit ;
62860: GO 62923
// for i in kinds do
62862: LD_ADDR_VAR 0 4
62866: PUSH
62867: LD_VAR 0 2
62871: PUSH
62872: FOR_IN
62873: IFFALSE 62921
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
62875: LD_ADDR_EXP 91
62879: PUSH
62880: LD_EXP 91
62884: PPUSH
62885: LD_VAR 0 1
62889: PUSH
62890: LD_EXP 91
62894: PUSH
62895: LD_VAR 0 1
62899: ARRAY
62900: PUSH
62901: LD_INT 1
62903: PLUS
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PPUSH
62909: LD_VAR 0 4
62913: PPUSH
62914: CALL 18165 0 3
62918: ST_TO_ADDR
62919: GO 62872
62921: POP
62922: POP
// end ;
62923: LD_VAR 0 3
62927: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
62928: LD_INT 0
62930: PPUSH
// if not mc_bases or not base or not areas then
62931: LD_EXP 57
62935: NOT
62936: PUSH
62937: LD_VAR 0 1
62941: NOT
62942: OR
62943: PUSH
62944: LD_VAR 0 2
62948: NOT
62949: OR
62950: IFFALSE 62954
// exit ;
62952: GO 62979
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
62954: LD_ADDR_EXP 75
62958: PUSH
62959: LD_EXP 75
62963: PPUSH
62964: LD_VAR 0 1
62968: PPUSH
62969: LD_VAR 0 2
62973: PPUSH
62974: CALL_OW 1
62978: ST_TO_ADDR
// end ;
62979: LD_VAR 0 3
62983: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
62984: LD_INT 0
62986: PPUSH
// if not mc_bases or not base then
62987: LD_EXP 57
62991: NOT
62992: PUSH
62993: LD_VAR 0 1
62997: NOT
62998: OR
62999: IFFALSE 63003
// exit ;
63001: GO 63037
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
63003: LD_ADDR_EXP 92
63007: PUSH
63008: LD_EXP 92
63012: PPUSH
63013: LD_VAR 0 1
63017: PPUSH
63018: LD_VAR 0 2
63022: PUSH
63023: LD_VAR 0 3
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PPUSH
63032: CALL_OW 1
63036: ST_TO_ADDR
// end ; end_of_file
63037: LD_VAR 0 4
63041: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
63042: LD_INT 0
63044: PPUSH
63045: PPUSH
63046: PPUSH
// if not mc_bases then
63047: LD_EXP 57
63051: NOT
63052: IFFALSE 63056
// exit ;
63054: GO 63221
// for i = 1 to mc_bases do
63056: LD_ADDR_VAR 0 4
63060: PUSH
63061: DOUBLE
63062: LD_INT 1
63064: DEC
63065: ST_TO_ADDR
63066: LD_EXP 57
63070: PUSH
63071: FOR_TO
63072: IFFALSE 63219
// begin if sci in mc_bases [ i ] then
63074: LD_VAR 0 2
63078: PUSH
63079: LD_EXP 57
63083: PUSH
63084: LD_VAR 0 4
63088: ARRAY
63089: IN
63090: IFFALSE 63217
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
63092: LD_ADDR_EXP 86
63096: PUSH
63097: LD_EXP 86
63101: PPUSH
63102: LD_VAR 0 4
63106: PUSH
63107: LD_EXP 86
63111: PUSH
63112: LD_VAR 0 4
63116: ARRAY
63117: PUSH
63118: LD_INT 1
63120: PLUS
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PPUSH
63126: LD_VAR 0 1
63130: PPUSH
63131: CALL 18165 0 3
63135: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
63136: LD_ADDR_VAR 0 5
63140: PUSH
63141: LD_EXP 57
63145: PUSH
63146: LD_VAR 0 4
63150: ARRAY
63151: PPUSH
63152: LD_INT 2
63154: PUSH
63155: LD_INT 30
63157: PUSH
63158: LD_INT 0
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 30
63167: PUSH
63168: LD_INT 1
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: LIST
63179: PPUSH
63180: CALL_OW 72
63184: PPUSH
63185: LD_VAR 0 1
63189: PPUSH
63190: CALL_OW 74
63194: ST_TO_ADDR
// if tmp then
63195: LD_VAR 0 5
63199: IFFALSE 63215
// ComStandNearbyBuilding ( ape , tmp ) ;
63201: LD_VAR 0 1
63205: PPUSH
63206: LD_VAR 0 5
63210: PPUSH
63211: CALL 12944 0 2
// break ;
63215: GO 63219
// end ; end ;
63217: GO 63071
63219: POP
63220: POP
// end ;
63221: LD_VAR 0 3
63225: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
63226: LD_INT 0
63228: PPUSH
63229: PPUSH
63230: PPUSH
// if not mc_bases then
63231: LD_EXP 57
63235: NOT
63236: IFFALSE 63240
// exit ;
63238: GO 63329
// for i = 1 to mc_bases do
63240: LD_ADDR_VAR 0 4
63244: PUSH
63245: DOUBLE
63246: LD_INT 1
63248: DEC
63249: ST_TO_ADDR
63250: LD_EXP 57
63254: PUSH
63255: FOR_TO
63256: IFFALSE 63327
// begin if building in mc_busy_turret_list [ i ] then
63258: LD_VAR 0 1
63262: PUSH
63263: LD_EXP 67
63267: PUSH
63268: LD_VAR 0 4
63272: ARRAY
63273: IN
63274: IFFALSE 63325
// begin tmp := mc_busy_turret_list [ i ] diff building ;
63276: LD_ADDR_VAR 0 5
63280: PUSH
63281: LD_EXP 67
63285: PUSH
63286: LD_VAR 0 4
63290: ARRAY
63291: PUSH
63292: LD_VAR 0 1
63296: DIFF
63297: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
63298: LD_ADDR_EXP 67
63302: PUSH
63303: LD_EXP 67
63307: PPUSH
63308: LD_VAR 0 4
63312: PPUSH
63313: LD_VAR 0 5
63317: PPUSH
63318: CALL_OW 1
63322: ST_TO_ADDR
// break ;
63323: GO 63327
// end ; end ;
63325: GO 63255
63327: POP
63328: POP
// end ;
63329: LD_VAR 0 3
63333: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
63334: LD_INT 0
63336: PPUSH
63337: PPUSH
63338: PPUSH
// if not mc_bases then
63339: LD_EXP 57
63343: NOT
63344: IFFALSE 63348
// exit ;
63346: GO 63547
// for i = 1 to mc_bases do
63348: LD_ADDR_VAR 0 5
63352: PUSH
63353: DOUBLE
63354: LD_INT 1
63356: DEC
63357: ST_TO_ADDR
63358: LD_EXP 57
63362: PUSH
63363: FOR_TO
63364: IFFALSE 63545
// if building in mc_bases [ i ] then
63366: LD_VAR 0 1
63370: PUSH
63371: LD_EXP 57
63375: PUSH
63376: LD_VAR 0 5
63380: ARRAY
63381: IN
63382: IFFALSE 63543
// begin tmp := mc_bases [ i ] diff building ;
63384: LD_ADDR_VAR 0 6
63388: PUSH
63389: LD_EXP 57
63393: PUSH
63394: LD_VAR 0 5
63398: ARRAY
63399: PUSH
63400: LD_VAR 0 1
63404: DIFF
63405: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
63406: LD_ADDR_EXP 57
63410: PUSH
63411: LD_EXP 57
63415: PPUSH
63416: LD_VAR 0 5
63420: PPUSH
63421: LD_VAR 0 6
63425: PPUSH
63426: CALL_OW 1
63430: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
63431: LD_VAR 0 1
63435: PUSH
63436: LD_EXP 65
63440: PUSH
63441: LD_VAR 0 5
63445: ARRAY
63446: IN
63447: IFFALSE 63486
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
63449: LD_ADDR_EXP 65
63453: PUSH
63454: LD_EXP 65
63458: PPUSH
63459: LD_VAR 0 5
63463: PPUSH
63464: LD_EXP 65
63468: PUSH
63469: LD_VAR 0 5
63473: ARRAY
63474: PUSH
63475: LD_VAR 0 1
63479: DIFF
63480: PPUSH
63481: CALL_OW 1
63485: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
63486: LD_VAR 0 1
63490: PUSH
63491: LD_EXP 66
63495: PUSH
63496: LD_VAR 0 5
63500: ARRAY
63501: IN
63502: IFFALSE 63541
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
63504: LD_ADDR_EXP 66
63508: PUSH
63509: LD_EXP 66
63513: PPUSH
63514: LD_VAR 0 5
63518: PPUSH
63519: LD_EXP 66
63523: PUSH
63524: LD_VAR 0 5
63528: ARRAY
63529: PUSH
63530: LD_VAR 0 1
63534: DIFF
63535: PPUSH
63536: CALL_OW 1
63540: ST_TO_ADDR
// break ;
63541: GO 63545
// end ;
63543: GO 63363
63545: POP
63546: POP
// end ;
63547: LD_VAR 0 4
63551: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
63552: LD_INT 0
63554: PPUSH
63555: PPUSH
63556: PPUSH
// if not mc_bases or not side in mc_sides then
63557: LD_EXP 57
63561: NOT
63562: PUSH
63563: LD_VAR 0 3
63567: PUSH
63568: LD_EXP 83
63572: IN
63573: NOT
63574: OR
63575: IFFALSE 63579
// exit ;
63577: GO 63702
// for i = 1 to mc_vehicles do
63579: LD_ADDR_VAR 0 6
63583: PUSH
63584: DOUBLE
63585: LD_INT 1
63587: DEC
63588: ST_TO_ADDR
63589: LD_EXP 76
63593: PUSH
63594: FOR_TO
63595: IFFALSE 63700
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
63597: LD_VAR 0 2
63601: PUSH
63602: LD_EXP 76
63606: PUSH
63607: LD_VAR 0 6
63611: ARRAY
63612: IN
63613: PUSH
63614: LD_VAR 0 1
63618: PUSH
63619: LD_EXP 76
63623: PUSH
63624: LD_VAR 0 6
63628: ARRAY
63629: IN
63630: OR
63631: IFFALSE 63698
// begin tmp := mc_vehicles [ i ] diff old ;
63633: LD_ADDR_VAR 0 7
63637: PUSH
63638: LD_EXP 76
63642: PUSH
63643: LD_VAR 0 6
63647: ARRAY
63648: PUSH
63649: LD_VAR 0 2
63653: DIFF
63654: ST_TO_ADDR
// tmp := tmp diff new ;
63655: LD_ADDR_VAR 0 7
63659: PUSH
63660: LD_VAR 0 7
63664: PUSH
63665: LD_VAR 0 1
63669: DIFF
63670: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
63671: LD_ADDR_EXP 76
63675: PUSH
63676: LD_EXP 76
63680: PPUSH
63681: LD_VAR 0 6
63685: PPUSH
63686: LD_VAR 0 7
63690: PPUSH
63691: CALL_OW 1
63695: ST_TO_ADDR
// break ;
63696: GO 63700
// end ;
63698: GO 63594
63700: POP
63701: POP
// end ;
63702: LD_VAR 0 5
63706: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
63707: LD_INT 0
63709: PPUSH
63710: PPUSH
63711: PPUSH
63712: PPUSH
// if not mc_bases then
63713: LD_EXP 57
63717: NOT
63718: IFFALSE 63722
// exit ;
63720: GO 64014
// side := GetSide ( vehicle ) ;
63722: LD_ADDR_VAR 0 5
63726: PUSH
63727: LD_VAR 0 1
63731: PPUSH
63732: CALL_OW 255
63736: ST_TO_ADDR
// for i = 1 to mc_bases do
63737: LD_ADDR_VAR 0 4
63741: PUSH
63742: DOUBLE
63743: LD_INT 1
63745: DEC
63746: ST_TO_ADDR
63747: LD_EXP 57
63751: PUSH
63752: FOR_TO
63753: IFFALSE 64012
// begin if factory in mc_bases [ i ] then
63755: LD_VAR 0 2
63759: PUSH
63760: LD_EXP 57
63764: PUSH
63765: LD_VAR 0 4
63769: ARRAY
63770: IN
63771: IFFALSE 64010
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
63773: LD_EXP 79
63777: PUSH
63778: LD_VAR 0 4
63782: ARRAY
63783: PUSH
63784: LD_EXP 68
63788: PUSH
63789: LD_VAR 0 4
63793: ARRAY
63794: LESS
63795: IFFALSE 63966
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
63797: LD_ADDR_EXP 79
63801: PUSH
63802: LD_EXP 79
63806: PPUSH
63807: LD_VAR 0 4
63811: PPUSH
63812: LD_EXP 79
63816: PUSH
63817: LD_VAR 0 4
63821: ARRAY
63822: PUSH
63823: LD_VAR 0 1
63827: ADD
63828: PPUSH
63829: CALL_OW 1
63833: ST_TO_ADDR
// if not mc_scan [ i ] then
63834: LD_EXP 80
63838: PUSH
63839: LD_VAR 0 4
63843: ARRAY
63844: NOT
63845: IFFALSE 63964
// begin if GetControl ( vehicle ) = control_remote then
63847: LD_VAR 0 1
63851: PPUSH
63852: CALL_OW 263
63856: PUSH
63857: LD_INT 2
63859: EQUAL
63860: IFFALSE 63880
// repeat wait ( 0 0$1 ) ;
63862: LD_INT 35
63864: PPUSH
63865: CALL_OW 67
// until IsControledBy ( vehicle ) ;
63869: LD_VAR 0 1
63873: PPUSH
63874: CALL_OW 312
63878: IFFALSE 63862
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
63880: LD_VAR 0 1
63884: PPUSH
63885: LD_EXP 81
63889: PUSH
63890: LD_VAR 0 4
63894: ARRAY
63895: PPUSH
63896: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
63900: LD_VAR 0 1
63904: PPUSH
63905: CALL_OW 263
63909: PUSH
63910: LD_INT 1
63912: NONEQUAL
63913: IFFALSE 63917
// break ;
63915: GO 64012
// repeat wait ( 0 0$1 ) ;
63917: LD_INT 35
63919: PPUSH
63920: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
63924: LD_VAR 0 1
63928: PPUSH
63929: LD_EXP 81
63933: PUSH
63934: LD_VAR 0 4
63938: ARRAY
63939: PPUSH
63940: CALL_OW 308
63944: IFFALSE 63917
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
63946: LD_VAR 0 1
63950: PPUSH
63951: CALL_OW 311
63955: PPUSH
63956: CALL_OW 121
// exit ;
63960: POP
63961: POP
63962: GO 64014
// end ; end else
63964: GO 64010
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
63966: LD_ADDR_EXP 76
63970: PUSH
63971: LD_EXP 76
63975: PPUSH
63976: LD_VAR 0 4
63980: PUSH
63981: LD_EXP 76
63985: PUSH
63986: LD_VAR 0 4
63990: ARRAY
63991: PUSH
63992: LD_INT 1
63994: PLUS
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PPUSH
64000: LD_VAR 0 1
64004: PPUSH
64005: CALL 18165 0 3
64009: ST_TO_ADDR
// end ; end ;
64010: GO 63752
64012: POP
64013: POP
// end ;
64014: LD_VAR 0 3
64018: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
64019: LD_INT 0
64021: PPUSH
64022: PPUSH
64023: PPUSH
64024: PPUSH
// if not mc_bases then
64025: LD_EXP 57
64029: NOT
64030: IFFALSE 64034
// exit ;
64032: GO 64387
// repeat wait ( 0 0$1 ) ;
64034: LD_INT 35
64036: PPUSH
64037: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
64041: LD_VAR 0 2
64045: PPUSH
64046: LD_VAR 0 3
64050: PPUSH
64051: CALL_OW 284
64055: IFFALSE 64034
// if GetResourceTypeXY ( x , y ) = mat_artefact then
64057: LD_VAR 0 2
64061: PPUSH
64062: LD_VAR 0 3
64066: PPUSH
64067: CALL_OW 283
64071: PUSH
64072: LD_INT 4
64074: EQUAL
64075: IFFALSE 64079
// exit ;
64077: GO 64387
// for i = 1 to mc_bases do
64079: LD_ADDR_VAR 0 7
64083: PUSH
64084: DOUBLE
64085: LD_INT 1
64087: DEC
64088: ST_TO_ADDR
64089: LD_EXP 57
64093: PUSH
64094: FOR_TO
64095: IFFALSE 64385
// begin if mc_crates_area [ i ] then
64097: LD_EXP 75
64101: PUSH
64102: LD_VAR 0 7
64106: ARRAY
64107: IFFALSE 64218
// for j in mc_crates_area [ i ] do
64109: LD_ADDR_VAR 0 8
64113: PUSH
64114: LD_EXP 75
64118: PUSH
64119: LD_VAR 0 7
64123: ARRAY
64124: PUSH
64125: FOR_IN
64126: IFFALSE 64216
// if InArea ( x , y , j ) then
64128: LD_VAR 0 2
64132: PPUSH
64133: LD_VAR 0 3
64137: PPUSH
64138: LD_VAR 0 8
64142: PPUSH
64143: CALL_OW 309
64147: IFFALSE 64214
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
64149: LD_ADDR_EXP 73
64153: PUSH
64154: LD_EXP 73
64158: PPUSH
64159: LD_VAR 0 7
64163: PUSH
64164: LD_EXP 73
64168: PUSH
64169: LD_VAR 0 7
64173: ARRAY
64174: PUSH
64175: LD_INT 1
64177: PLUS
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PPUSH
64183: LD_VAR 0 4
64187: PUSH
64188: LD_VAR 0 2
64192: PUSH
64193: LD_VAR 0 3
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: LIST
64202: PPUSH
64203: CALL 18165 0 3
64207: ST_TO_ADDR
// exit ;
64208: POP
64209: POP
64210: POP
64211: POP
64212: GO 64387
// end ;
64214: GO 64125
64216: POP
64217: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64218: LD_ADDR_VAR 0 9
64222: PUSH
64223: LD_EXP 57
64227: PUSH
64228: LD_VAR 0 7
64232: ARRAY
64233: PPUSH
64234: LD_INT 2
64236: PUSH
64237: LD_INT 30
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 30
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: LIST
64261: PPUSH
64262: CALL_OW 72
64266: ST_TO_ADDR
// if not depot then
64267: LD_VAR 0 9
64271: NOT
64272: IFFALSE 64276
// continue ;
64274: GO 64094
// for j in depot do
64276: LD_ADDR_VAR 0 8
64280: PUSH
64281: LD_VAR 0 9
64285: PUSH
64286: FOR_IN
64287: IFFALSE 64381
// if GetDistUnitXY ( j , x , y ) < 30 then
64289: LD_VAR 0 8
64293: PPUSH
64294: LD_VAR 0 2
64298: PPUSH
64299: LD_VAR 0 3
64303: PPUSH
64304: CALL_OW 297
64308: PUSH
64309: LD_INT 30
64311: LESS
64312: IFFALSE 64379
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
64314: LD_ADDR_EXP 73
64318: PUSH
64319: LD_EXP 73
64323: PPUSH
64324: LD_VAR 0 7
64328: PUSH
64329: LD_EXP 73
64333: PUSH
64334: LD_VAR 0 7
64338: ARRAY
64339: PUSH
64340: LD_INT 1
64342: PLUS
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PPUSH
64348: LD_VAR 0 4
64352: PUSH
64353: LD_VAR 0 2
64357: PUSH
64358: LD_VAR 0 3
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: LIST
64367: PPUSH
64368: CALL 18165 0 3
64372: ST_TO_ADDR
// exit ;
64373: POP
64374: POP
64375: POP
64376: POP
64377: GO 64387
// end ;
64379: GO 64286
64381: POP
64382: POP
// end ;
64383: GO 64094
64385: POP
64386: POP
// end ;
64387: LD_VAR 0 6
64391: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
64392: LD_INT 0
64394: PPUSH
64395: PPUSH
64396: PPUSH
64397: PPUSH
// side := GetSide ( lab ) ;
64398: LD_ADDR_VAR 0 4
64402: PUSH
64403: LD_VAR 0 2
64407: PPUSH
64408: CALL_OW 255
64412: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
64413: LD_VAR 0 4
64417: PUSH
64418: LD_EXP 83
64422: IN
64423: NOT
64424: PUSH
64425: LD_EXP 84
64429: NOT
64430: OR
64431: PUSH
64432: LD_EXP 57
64436: NOT
64437: OR
64438: IFFALSE 64442
// exit ;
64440: GO 64711
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
64442: LD_ADDR_EXP 84
64446: PUSH
64447: LD_EXP 84
64451: PPUSH
64452: LD_VAR 0 4
64456: PPUSH
64457: LD_EXP 84
64461: PUSH
64462: LD_VAR 0 4
64466: ARRAY
64467: PUSH
64468: LD_VAR 0 1
64472: DIFF
64473: PPUSH
64474: CALL_OW 1
64478: ST_TO_ADDR
// for i = 1 to mc_bases do
64479: LD_ADDR_VAR 0 5
64483: PUSH
64484: DOUBLE
64485: LD_INT 1
64487: DEC
64488: ST_TO_ADDR
64489: LD_EXP 57
64493: PUSH
64494: FOR_TO
64495: IFFALSE 64709
// begin if lab in mc_bases [ i ] then
64497: LD_VAR 0 2
64501: PUSH
64502: LD_EXP 57
64506: PUSH
64507: LD_VAR 0 5
64511: ARRAY
64512: IN
64513: IFFALSE 64707
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] and not mc_tech [ side ] [ 2 ] in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] then
64515: LD_VAR 0 1
64519: PUSH
64520: LD_INT 11
64522: PUSH
64523: LD_INT 4
64525: PUSH
64526: LD_INT 3
64528: PUSH
64529: LD_INT 2
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: IN
64538: PUSH
64539: LD_EXP 87
64543: PUSH
64544: LD_VAR 0 5
64548: ARRAY
64549: AND
64550: PUSH
64551: LD_EXP 84
64555: PUSH
64556: LD_VAR 0 4
64560: ARRAY
64561: PUSH
64562: LD_INT 2
64564: ARRAY
64565: PUSH
64566: LD_INT 11
64568: PUSH
64569: LD_INT 4
64571: PUSH
64572: LD_INT 3
64574: PUSH
64575: LD_INT 2
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: IN
64584: NOT
64585: AND
64586: IFFALSE 64707
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
64588: LD_ADDR_VAR 0 6
64592: PUSH
64593: LD_EXP 87
64597: PUSH
64598: LD_VAR 0 5
64602: ARRAY
64603: PUSH
64604: LD_INT 1
64606: ARRAY
64607: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
64608: LD_ADDR_EXP 87
64612: PUSH
64613: LD_EXP 87
64617: PPUSH
64618: LD_VAR 0 5
64622: PPUSH
64623: EMPTY
64624: PPUSH
64625: CALL_OW 1
64629: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
64630: LD_VAR 0 6
64634: PPUSH
64635: LD_INT 0
64637: PPUSH
64638: CALL_OW 109
// ComExitBuilding ( tmp ) ;
64642: LD_VAR 0 6
64646: PPUSH
64647: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
64651: LD_ADDR_EXP 86
64655: PUSH
64656: LD_EXP 86
64660: PPUSH
64661: LD_VAR 0 5
64665: PPUSH
64666: LD_EXP 86
64670: PUSH
64671: LD_VAR 0 5
64675: ARRAY
64676: PPUSH
64677: LD_INT 1
64679: PPUSH
64680: LD_VAR 0 6
64684: PPUSH
64685: CALL_OW 2
64689: PPUSH
64690: CALL_OW 1
64694: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
64695: LD_VAR 0 5
64699: PPUSH
64700: LD_INT 112
64702: PPUSH
64703: CALL 50607 0 2
// end ; end ; end ;
64707: GO 64494
64709: POP
64710: POP
// end ;
64711: LD_VAR 0 3
64715: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
64716: LD_INT 0
64718: PPUSH
64719: PPUSH
64720: PPUSH
64721: PPUSH
64722: PPUSH
64723: PPUSH
64724: PPUSH
64725: PPUSH
// if not mc_bases then
64726: LD_EXP 57
64730: NOT
64731: IFFALSE 64735
// exit ;
64733: GO 65660
// for i = 1 to mc_bases do
64735: LD_ADDR_VAR 0 3
64739: PUSH
64740: DOUBLE
64741: LD_INT 1
64743: DEC
64744: ST_TO_ADDR
64745: LD_EXP 57
64749: PUSH
64750: FOR_TO
64751: IFFALSE 65658
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
64753: LD_VAR 0 1
64757: PUSH
64758: LD_EXP 57
64762: PUSH
64763: LD_VAR 0 3
64767: ARRAY
64768: IN
64769: PUSH
64770: LD_VAR 0 1
64774: PUSH
64775: LD_EXP 64
64779: PUSH
64780: LD_VAR 0 3
64784: ARRAY
64785: IN
64786: OR
64787: PUSH
64788: LD_VAR 0 1
64792: PUSH
64793: LD_EXP 76
64797: PUSH
64798: LD_VAR 0 3
64802: ARRAY
64803: IN
64804: OR
64805: PUSH
64806: LD_VAR 0 1
64810: PUSH
64811: LD_EXP 86
64815: PUSH
64816: LD_VAR 0 3
64820: ARRAY
64821: IN
64822: OR
64823: PUSH
64824: LD_VAR 0 1
64828: PUSH
64829: LD_EXP 87
64833: PUSH
64834: LD_VAR 0 3
64838: ARRAY
64839: IN
64840: OR
64841: IFFALSE 65656
// begin if un in mc_ape [ i ] then
64843: LD_VAR 0 1
64847: PUSH
64848: LD_EXP 86
64852: PUSH
64853: LD_VAR 0 3
64857: ARRAY
64858: IN
64859: IFFALSE 64898
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
64861: LD_ADDR_EXP 86
64865: PUSH
64866: LD_EXP 86
64870: PPUSH
64871: LD_VAR 0 3
64875: PPUSH
64876: LD_EXP 86
64880: PUSH
64881: LD_VAR 0 3
64885: ARRAY
64886: PUSH
64887: LD_VAR 0 1
64891: DIFF
64892: PPUSH
64893: CALL_OW 1
64897: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
64898: LD_VAR 0 1
64902: PUSH
64903: LD_EXP 87
64907: PUSH
64908: LD_VAR 0 3
64912: ARRAY
64913: IN
64914: IFFALSE 64938
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
64916: LD_ADDR_EXP 87
64920: PUSH
64921: LD_EXP 87
64925: PPUSH
64926: LD_VAR 0 3
64930: PPUSH
64931: EMPTY
64932: PPUSH
64933: CALL_OW 1
64937: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
64938: LD_VAR 0 1
64942: PPUSH
64943: CALL_OW 247
64947: PUSH
64948: LD_INT 2
64950: EQUAL
64951: PUSH
64952: LD_VAR 0 1
64956: PPUSH
64957: CALL_OW 110
64961: PUSH
64962: LD_INT 20
64964: EQUAL
64965: AND
64966: IFFALSE 65069
// begin fac := MC_GetBuilding ( i , b_factory ) ;
64968: LD_ADDR_VAR 0 8
64972: PUSH
64973: LD_VAR 0 3
64977: PPUSH
64978: LD_INT 3
64980: PPUSH
64981: CALL 62703 0 2
64985: ST_TO_ADDR
// if fac then
64986: LD_VAR 0 8
64990: IFFALSE 65069
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
64992: LD_ADDR_VAR 0 9
64996: PUSH
64997: LD_VAR 0 8
65001: PPUSH
65002: LD_VAR 0 1
65006: PPUSH
65007: CALL_OW 265
65011: PPUSH
65012: LD_VAR 0 1
65016: PPUSH
65017: CALL_OW 262
65021: PPUSH
65022: LD_VAR 0 1
65026: PPUSH
65027: CALL_OW 263
65031: PPUSH
65032: LD_VAR 0 1
65036: PPUSH
65037: CALL_OW 264
65041: PPUSH
65042: CALL 15330 0 5
65046: ST_TO_ADDR
// if components then
65047: LD_VAR 0 9
65051: IFFALSE 65067
// MC_InsertProduceList ( i , components ) ;
65053: LD_VAR 0 3
65057: PPUSH
65058: LD_VAR 0 9
65062: PPUSH
65063: CALL 62366 0 2
// break ;
65067: GO 65658
// end ; end ; if GetType ( un ) = unit_building then
65069: LD_VAR 0 1
65073: PPUSH
65074: CALL_OW 247
65078: PUSH
65079: LD_INT 3
65081: EQUAL
65082: IFFALSE 65379
// begin btype := GetBType ( un ) ;
65084: LD_ADDR_VAR 0 5
65088: PUSH
65089: LD_VAR 0 1
65093: PPUSH
65094: CALL_OW 266
65098: ST_TO_ADDR
// if btype = b_warehouse then
65099: LD_VAR 0 5
65103: PUSH
65104: LD_INT 1
65106: EQUAL
65107: IFFALSE 65125
// begin btype := b_depot ;
65109: LD_ADDR_VAR 0 5
65113: PUSH
65114: LD_INT 0
65116: ST_TO_ADDR
// pos := 1 ;
65117: LD_ADDR_VAR 0 6
65121: PUSH
65122: LD_INT 1
65124: ST_TO_ADDR
// end ; if btype = b_factory then
65125: LD_VAR 0 5
65129: PUSH
65130: LD_INT 3
65132: EQUAL
65133: IFFALSE 65151
// begin btype := b_workshop ;
65135: LD_ADDR_VAR 0 5
65139: PUSH
65140: LD_INT 2
65142: ST_TO_ADDR
// pos := 1 ;
65143: LD_ADDR_VAR 0 6
65147: PUSH
65148: LD_INT 1
65150: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
65151: LD_VAR 0 5
65155: PUSH
65156: LD_INT 7
65158: PUSH
65159: LD_INT 8
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: IN
65166: IFFALSE 65176
// btype := b_lab ;
65168: LD_ADDR_VAR 0 5
65172: PUSH
65173: LD_INT 6
65175: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
65176: LD_ADDR_EXP 62
65180: PUSH
65181: LD_EXP 62
65185: PPUSH
65186: LD_VAR 0 3
65190: PUSH
65191: LD_EXP 62
65195: PUSH
65196: LD_VAR 0 3
65200: ARRAY
65201: PUSH
65202: LD_INT 1
65204: PLUS
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PPUSH
65210: LD_VAR 0 5
65214: PUSH
65215: LD_VAR 0 1
65219: PPUSH
65220: CALL_OW 250
65224: PUSH
65225: LD_VAR 0 1
65229: PPUSH
65230: CALL_OW 251
65234: PUSH
65235: LD_VAR 0 1
65239: PPUSH
65240: CALL_OW 254
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: PPUSH
65251: CALL 18165 0 3
65255: ST_TO_ADDR
// if pos = 1 then
65256: LD_VAR 0 6
65260: PUSH
65261: LD_INT 1
65263: EQUAL
65264: IFFALSE 65379
// begin tmp := mc_build_list [ i ] ;
65266: LD_ADDR_VAR 0 7
65270: PUSH
65271: LD_EXP 62
65275: PUSH
65276: LD_VAR 0 3
65280: ARRAY
65281: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
65282: LD_VAR 0 7
65286: PPUSH
65287: LD_INT 2
65289: PUSH
65290: LD_INT 30
65292: PUSH
65293: LD_INT 0
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 30
65302: PUSH
65303: LD_INT 1
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: LIST
65314: PPUSH
65315: CALL_OW 72
65319: IFFALSE 65329
// pos := 2 ;
65321: LD_ADDR_VAR 0 6
65325: PUSH
65326: LD_INT 2
65328: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
65329: LD_ADDR_VAR 0 7
65333: PUSH
65334: LD_VAR 0 7
65338: PPUSH
65339: LD_VAR 0 6
65343: PPUSH
65344: LD_VAR 0 7
65348: PPUSH
65349: CALL 18056 0 3
65353: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
65354: LD_ADDR_EXP 62
65358: PUSH
65359: LD_EXP 62
65363: PPUSH
65364: LD_VAR 0 3
65368: PPUSH
65369: LD_VAR 0 7
65373: PPUSH
65374: CALL_OW 1
65378: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
65379: LD_VAR 0 1
65383: PUSH
65384: LD_EXP 57
65388: PUSH
65389: LD_VAR 0 3
65393: ARRAY
65394: IN
65395: IFFALSE 65434
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
65397: LD_ADDR_EXP 57
65401: PUSH
65402: LD_EXP 57
65406: PPUSH
65407: LD_VAR 0 3
65411: PPUSH
65412: LD_EXP 57
65416: PUSH
65417: LD_VAR 0 3
65421: ARRAY
65422: PUSH
65423: LD_VAR 0 1
65427: DIFF
65428: PPUSH
65429: CALL_OW 1
65433: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
65434: LD_VAR 0 1
65438: PUSH
65439: LD_EXP 64
65443: PUSH
65444: LD_VAR 0 3
65448: ARRAY
65449: IN
65450: IFFALSE 65489
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
65452: LD_ADDR_EXP 64
65456: PUSH
65457: LD_EXP 64
65461: PPUSH
65462: LD_VAR 0 3
65466: PPUSH
65467: LD_EXP 64
65471: PUSH
65472: LD_VAR 0 3
65476: ARRAY
65477: PUSH
65478: LD_VAR 0 1
65482: DIFF
65483: PPUSH
65484: CALL_OW 1
65488: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
65489: LD_VAR 0 1
65493: PUSH
65494: LD_EXP 76
65498: PUSH
65499: LD_VAR 0 3
65503: ARRAY
65504: IN
65505: IFFALSE 65544
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
65507: LD_ADDR_EXP 76
65511: PUSH
65512: LD_EXP 76
65516: PPUSH
65517: LD_VAR 0 3
65521: PPUSH
65522: LD_EXP 76
65526: PUSH
65527: LD_VAR 0 3
65531: ARRAY
65532: PUSH
65533: LD_VAR 0 1
65537: DIFF
65538: PPUSH
65539: CALL_OW 1
65543: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
65544: LD_VAR 0 1
65548: PUSH
65549: LD_EXP 66
65553: PUSH
65554: LD_VAR 0 3
65558: ARRAY
65559: IN
65560: IFFALSE 65599
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
65562: LD_ADDR_EXP 66
65566: PUSH
65567: LD_EXP 66
65571: PPUSH
65572: LD_VAR 0 3
65576: PPUSH
65577: LD_EXP 66
65581: PUSH
65582: LD_VAR 0 3
65586: ARRAY
65587: PUSH
65588: LD_VAR 0 1
65592: DIFF
65593: PPUSH
65594: CALL_OW 1
65598: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
65599: LD_VAR 0 1
65603: PUSH
65604: LD_EXP 65
65608: PUSH
65609: LD_VAR 0 3
65613: ARRAY
65614: IN
65615: IFFALSE 65654
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
65617: LD_ADDR_EXP 65
65621: PUSH
65622: LD_EXP 65
65626: PPUSH
65627: LD_VAR 0 3
65631: PPUSH
65632: LD_EXP 65
65636: PUSH
65637: LD_VAR 0 3
65641: ARRAY
65642: PUSH
65643: LD_VAR 0 1
65647: DIFF
65648: PPUSH
65649: CALL_OW 1
65653: ST_TO_ADDR
// end ; break ;
65654: GO 65658
// end ;
65656: GO 64750
65658: POP
65659: POP
// end ;
65660: LD_VAR 0 2
65664: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
65665: LD_INT 0
65667: PPUSH
65668: PPUSH
65669: PPUSH
// if not mc_bases then
65670: LD_EXP 57
65674: NOT
65675: IFFALSE 65679
// exit ;
65677: GO 65894
// for i = 1 to mc_bases do
65679: LD_ADDR_VAR 0 3
65683: PUSH
65684: DOUBLE
65685: LD_INT 1
65687: DEC
65688: ST_TO_ADDR
65689: LD_EXP 57
65693: PUSH
65694: FOR_TO
65695: IFFALSE 65892
// begin if building in mc_construct_list [ i ] then
65697: LD_VAR 0 1
65701: PUSH
65702: LD_EXP 64
65706: PUSH
65707: LD_VAR 0 3
65711: ARRAY
65712: IN
65713: IFFALSE 65890
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
65715: LD_ADDR_EXP 64
65719: PUSH
65720: LD_EXP 64
65724: PPUSH
65725: LD_VAR 0 3
65729: PPUSH
65730: LD_EXP 64
65734: PUSH
65735: LD_VAR 0 3
65739: ARRAY
65740: PUSH
65741: LD_VAR 0 1
65745: DIFF
65746: PPUSH
65747: CALL_OW 1
65751: ST_TO_ADDR
// if building in mc_lab [ i ] then
65752: LD_VAR 0 1
65756: PUSH
65757: LD_EXP 90
65761: PUSH
65762: LD_VAR 0 3
65766: ARRAY
65767: IN
65768: IFFALSE 65823
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
65770: LD_ADDR_EXP 91
65774: PUSH
65775: LD_EXP 91
65779: PPUSH
65780: LD_VAR 0 3
65784: PPUSH
65785: LD_EXP 91
65789: PUSH
65790: LD_VAR 0 3
65794: ARRAY
65795: PPUSH
65796: LD_INT 1
65798: PPUSH
65799: LD_EXP 91
65803: PUSH
65804: LD_VAR 0 3
65808: ARRAY
65809: PPUSH
65810: LD_INT 0
65812: PPUSH
65813: CALL 17148 0 4
65817: PPUSH
65818: CALL_OW 1
65822: ST_TO_ADDR
// if not building in mc_bases [ i ] then
65823: LD_VAR 0 1
65827: PUSH
65828: LD_EXP 57
65832: PUSH
65833: LD_VAR 0 3
65837: ARRAY
65838: IN
65839: NOT
65840: IFFALSE 65886
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
65842: LD_ADDR_EXP 57
65846: PUSH
65847: LD_EXP 57
65851: PPUSH
65852: LD_VAR 0 3
65856: PUSH
65857: LD_EXP 57
65861: PUSH
65862: LD_VAR 0 3
65866: ARRAY
65867: PUSH
65868: LD_INT 1
65870: PLUS
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PPUSH
65876: LD_VAR 0 1
65880: PPUSH
65881: CALL 18165 0 3
65885: ST_TO_ADDR
// exit ;
65886: POP
65887: POP
65888: GO 65894
// end ; end ;
65890: GO 65694
65892: POP
65893: POP
// end ;
65894: LD_VAR 0 2
65898: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
65899: LD_INT 0
65901: PPUSH
65902: PPUSH
65903: PPUSH
65904: PPUSH
65905: PPUSH
65906: PPUSH
65907: PPUSH
// if not mc_bases then
65908: LD_EXP 57
65912: NOT
65913: IFFALSE 65917
// exit ;
65915: GO 66578
// for i = 1 to mc_bases do
65917: LD_ADDR_VAR 0 3
65921: PUSH
65922: DOUBLE
65923: LD_INT 1
65925: DEC
65926: ST_TO_ADDR
65927: LD_EXP 57
65931: PUSH
65932: FOR_TO
65933: IFFALSE 66576
// begin if building in mc_construct_list [ i ] then
65935: LD_VAR 0 1
65939: PUSH
65940: LD_EXP 64
65944: PUSH
65945: LD_VAR 0 3
65949: ARRAY
65950: IN
65951: IFFALSE 66574
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
65953: LD_ADDR_EXP 64
65957: PUSH
65958: LD_EXP 64
65962: PPUSH
65963: LD_VAR 0 3
65967: PPUSH
65968: LD_EXP 64
65972: PUSH
65973: LD_VAR 0 3
65977: ARRAY
65978: PUSH
65979: LD_VAR 0 1
65983: DIFF
65984: PPUSH
65985: CALL_OW 1
65989: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
65990: LD_ADDR_EXP 57
65994: PUSH
65995: LD_EXP 57
65999: PPUSH
66000: LD_VAR 0 3
66004: PUSH
66005: LD_EXP 57
66009: PUSH
66010: LD_VAR 0 3
66014: ARRAY
66015: PUSH
66016: LD_INT 1
66018: PLUS
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PPUSH
66024: LD_VAR 0 1
66028: PPUSH
66029: CALL 18165 0 3
66033: ST_TO_ADDR
// btype := GetBType ( building ) ;
66034: LD_ADDR_VAR 0 5
66038: PUSH
66039: LD_VAR 0 1
66043: PPUSH
66044: CALL_OW 266
66048: ST_TO_ADDR
// side := GetSide ( building ) ;
66049: LD_ADDR_VAR 0 8
66053: PUSH
66054: LD_VAR 0 1
66058: PPUSH
66059: CALL_OW 255
66063: ST_TO_ADDR
// if btype = b_lab then
66064: LD_VAR 0 5
66068: PUSH
66069: LD_INT 6
66071: EQUAL
66072: IFFALSE 66122
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
66074: LD_ADDR_EXP 90
66078: PUSH
66079: LD_EXP 90
66083: PPUSH
66084: LD_VAR 0 3
66088: PUSH
66089: LD_EXP 90
66093: PUSH
66094: LD_VAR 0 3
66098: ARRAY
66099: PUSH
66100: LD_INT 1
66102: PLUS
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PPUSH
66108: LD_VAR 0 1
66112: PPUSH
66113: CALL 18165 0 3
66117: ST_TO_ADDR
// exit ;
66118: POP
66119: POP
66120: GO 66578
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
66122: LD_VAR 0 5
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: LD_INT 2
66132: PUSH
66133: LD_INT 4
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: LIST
66140: IN
66141: IFFALSE 66265
// begin if btype = b_armoury then
66143: LD_VAR 0 5
66147: PUSH
66148: LD_INT 4
66150: EQUAL
66151: IFFALSE 66161
// btype := b_barracks ;
66153: LD_ADDR_VAR 0 5
66157: PUSH
66158: LD_INT 5
66160: ST_TO_ADDR
// if btype = b_depot then
66161: LD_VAR 0 5
66165: PUSH
66166: LD_INT 0
66168: EQUAL
66169: IFFALSE 66179
// btype := b_warehouse ;
66171: LD_ADDR_VAR 0 5
66175: PUSH
66176: LD_INT 1
66178: ST_TO_ADDR
// if btype = b_workshop then
66179: LD_VAR 0 5
66183: PUSH
66184: LD_INT 2
66186: EQUAL
66187: IFFALSE 66197
// btype := b_factory ;
66189: LD_ADDR_VAR 0 5
66193: PUSH
66194: LD_INT 3
66196: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
66197: LD_VAR 0 5
66201: PPUSH
66202: LD_VAR 0 8
66206: PPUSH
66207: CALL_OW 323
66211: PUSH
66212: LD_INT 1
66214: EQUAL
66215: IFFALSE 66261
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
66217: LD_ADDR_EXP 89
66221: PUSH
66222: LD_EXP 89
66226: PPUSH
66227: LD_VAR 0 3
66231: PUSH
66232: LD_EXP 89
66236: PUSH
66237: LD_VAR 0 3
66241: ARRAY
66242: PUSH
66243: LD_INT 1
66245: PLUS
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PPUSH
66251: LD_VAR 0 1
66255: PPUSH
66256: CALL 18165 0 3
66260: ST_TO_ADDR
// exit ;
66261: POP
66262: POP
66263: GO 66578
// end ; if btype in [ b_bunker , b_turret ] then
66265: LD_VAR 0 5
66269: PUSH
66270: LD_INT 32
66272: PUSH
66273: LD_INT 33
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: IN
66280: IFFALSE 66570
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
66282: LD_ADDR_EXP 65
66286: PUSH
66287: LD_EXP 65
66291: PPUSH
66292: LD_VAR 0 3
66296: PUSH
66297: LD_EXP 65
66301: PUSH
66302: LD_VAR 0 3
66306: ARRAY
66307: PUSH
66308: LD_INT 1
66310: PLUS
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PPUSH
66316: LD_VAR 0 1
66320: PPUSH
66321: CALL 18165 0 3
66325: ST_TO_ADDR
// if btype = b_bunker then
66326: LD_VAR 0 5
66330: PUSH
66331: LD_INT 32
66333: EQUAL
66334: IFFALSE 66570
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
66336: LD_ADDR_EXP 66
66340: PUSH
66341: LD_EXP 66
66345: PPUSH
66346: LD_VAR 0 3
66350: PUSH
66351: LD_EXP 66
66355: PUSH
66356: LD_VAR 0 3
66360: ARRAY
66361: PUSH
66362: LD_INT 1
66364: PLUS
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PPUSH
66370: LD_VAR 0 1
66374: PPUSH
66375: CALL 18165 0 3
66379: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
66380: LD_ADDR_VAR 0 6
66384: PUSH
66385: LD_EXP 57
66389: PUSH
66390: LD_VAR 0 3
66394: ARRAY
66395: PPUSH
66396: LD_INT 25
66398: PUSH
66399: LD_INT 1
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 3
66408: PUSH
66409: LD_INT 54
66411: PUSH
66412: EMPTY
66413: LIST
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PPUSH
66423: CALL_OW 72
66427: ST_TO_ADDR
// if tmp then
66428: LD_VAR 0 6
66432: IFFALSE 66438
// exit ;
66434: POP
66435: POP
66436: GO 66578
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
66438: LD_ADDR_VAR 0 6
66442: PUSH
66443: LD_EXP 57
66447: PUSH
66448: LD_VAR 0 3
66452: ARRAY
66453: PPUSH
66454: LD_INT 2
66456: PUSH
66457: LD_INT 30
66459: PUSH
66460: LD_INT 4
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 30
66469: PUSH
66470: LD_INT 5
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: LIST
66481: PPUSH
66482: CALL_OW 72
66486: ST_TO_ADDR
// if not tmp then
66487: LD_VAR 0 6
66491: NOT
66492: IFFALSE 66498
// exit ;
66494: POP
66495: POP
66496: GO 66578
// for j in tmp do
66498: LD_ADDR_VAR 0 4
66502: PUSH
66503: LD_VAR 0 6
66507: PUSH
66508: FOR_IN
66509: IFFALSE 66568
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
66511: LD_ADDR_VAR 0 7
66515: PUSH
66516: LD_VAR 0 4
66520: PPUSH
66521: CALL_OW 313
66525: PPUSH
66526: LD_INT 25
66528: PUSH
66529: LD_INT 1
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PPUSH
66536: CALL_OW 72
66540: ST_TO_ADDR
// if units then
66541: LD_VAR 0 7
66545: IFFALSE 66566
// begin ComExitBuilding ( units [ 1 ] ) ;
66547: LD_VAR 0 7
66551: PUSH
66552: LD_INT 1
66554: ARRAY
66555: PPUSH
66556: CALL_OW 122
// exit ;
66560: POP
66561: POP
66562: POP
66563: POP
66564: GO 66578
// end ; end ;
66566: GO 66508
66568: POP
66569: POP
// end ; end ; exit ;
66570: POP
66571: POP
66572: GO 66578
// end ; end ;
66574: GO 65932
66576: POP
66577: POP
// end ;
66578: LD_VAR 0 2
66582: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
66583: LD_INT 0
66585: PPUSH
66586: PPUSH
66587: PPUSH
66588: PPUSH
66589: PPUSH
66590: PPUSH
66591: PPUSH
// if not mc_bases then
66592: LD_EXP 57
66596: NOT
66597: IFFALSE 66601
// exit ;
66599: GO 66832
// btype := GetBType ( building ) ;
66601: LD_ADDR_VAR 0 6
66605: PUSH
66606: LD_VAR 0 1
66610: PPUSH
66611: CALL_OW 266
66615: ST_TO_ADDR
// x := GetX ( building ) ;
66616: LD_ADDR_VAR 0 7
66620: PUSH
66621: LD_VAR 0 1
66625: PPUSH
66626: CALL_OW 250
66630: ST_TO_ADDR
// y := GetY ( building ) ;
66631: LD_ADDR_VAR 0 8
66635: PUSH
66636: LD_VAR 0 1
66640: PPUSH
66641: CALL_OW 251
66645: ST_TO_ADDR
// d := GetDir ( building ) ;
66646: LD_ADDR_VAR 0 9
66650: PUSH
66651: LD_VAR 0 1
66655: PPUSH
66656: CALL_OW 254
66660: ST_TO_ADDR
// for i = 1 to mc_bases do
66661: LD_ADDR_VAR 0 4
66665: PUSH
66666: DOUBLE
66667: LD_INT 1
66669: DEC
66670: ST_TO_ADDR
66671: LD_EXP 57
66675: PUSH
66676: FOR_TO
66677: IFFALSE 66830
// begin if not mc_build_list [ i ] then
66679: LD_EXP 62
66683: PUSH
66684: LD_VAR 0 4
66688: ARRAY
66689: NOT
66690: IFFALSE 66694
// continue ;
66692: GO 66676
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
66694: LD_VAR 0 6
66698: PUSH
66699: LD_VAR 0 7
66703: PUSH
66704: LD_VAR 0 8
66708: PUSH
66709: LD_VAR 0 9
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: PPUSH
66720: LD_EXP 62
66724: PUSH
66725: LD_VAR 0 4
66729: ARRAY
66730: PUSH
66731: LD_INT 1
66733: ARRAY
66734: PPUSH
66735: CALL 23763 0 2
66739: IFFALSE 66828
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
66741: LD_ADDR_EXP 62
66745: PUSH
66746: LD_EXP 62
66750: PPUSH
66751: LD_VAR 0 4
66755: PPUSH
66756: LD_EXP 62
66760: PUSH
66761: LD_VAR 0 4
66765: ARRAY
66766: PPUSH
66767: LD_INT 1
66769: PPUSH
66770: CALL_OW 3
66774: PPUSH
66775: CALL_OW 1
66779: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
66780: LD_ADDR_EXP 64
66784: PUSH
66785: LD_EXP 64
66789: PPUSH
66790: LD_VAR 0 4
66794: PUSH
66795: LD_EXP 64
66799: PUSH
66800: LD_VAR 0 4
66804: ARRAY
66805: PUSH
66806: LD_INT 1
66808: PLUS
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PPUSH
66814: LD_VAR 0 1
66818: PPUSH
66819: CALL 18165 0 3
66823: ST_TO_ADDR
// exit ;
66824: POP
66825: POP
66826: GO 66832
// end ; end ;
66828: GO 66676
66830: POP
66831: POP
// end ;
66832: LD_VAR 0 3
66836: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
66837: LD_INT 0
66839: PPUSH
66840: PPUSH
66841: PPUSH
// if not mc_bases then
66842: LD_EXP 57
66846: NOT
66847: IFFALSE 66851
// exit ;
66849: GO 67041
// for i = 1 to mc_bases do
66851: LD_ADDR_VAR 0 4
66855: PUSH
66856: DOUBLE
66857: LD_INT 1
66859: DEC
66860: ST_TO_ADDR
66861: LD_EXP 57
66865: PUSH
66866: FOR_TO
66867: IFFALSE 66954
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
66869: LD_VAR 0 1
66873: PUSH
66874: LD_EXP 65
66878: PUSH
66879: LD_VAR 0 4
66883: ARRAY
66884: IN
66885: PUSH
66886: LD_VAR 0 1
66890: PUSH
66891: LD_EXP 66
66895: PUSH
66896: LD_VAR 0 4
66900: ARRAY
66901: IN
66902: NOT
66903: AND
66904: IFFALSE 66952
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
66906: LD_ADDR_EXP 66
66910: PUSH
66911: LD_EXP 66
66915: PPUSH
66916: LD_VAR 0 4
66920: PUSH
66921: LD_EXP 66
66925: PUSH
66926: LD_VAR 0 4
66930: ARRAY
66931: PUSH
66932: LD_INT 1
66934: PLUS
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PPUSH
66940: LD_VAR 0 1
66944: PPUSH
66945: CALL 18165 0 3
66949: ST_TO_ADDR
// break ;
66950: GO 66954
// end ; end ;
66952: GO 66866
66954: POP
66955: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
66956: LD_VAR 0 1
66960: PPUSH
66961: CALL_OW 257
66965: PUSH
66966: LD_EXP 83
66970: IN
66971: PUSH
66972: LD_VAR 0 1
66976: PPUSH
66977: CALL_OW 266
66981: PUSH
66982: LD_INT 5
66984: EQUAL
66985: AND
66986: PUSH
66987: LD_VAR 0 2
66991: PPUSH
66992: CALL_OW 110
66996: PUSH
66997: LD_INT 18
66999: NONEQUAL
67000: AND
67001: IFFALSE 67041
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
67003: LD_VAR 0 2
67007: PPUSH
67008: CALL_OW 257
67012: PUSH
67013: LD_INT 5
67015: PUSH
67016: LD_INT 8
67018: PUSH
67019: LD_INT 9
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: LIST
67026: IN
67027: IFFALSE 67041
// SetClass ( unit , 1 ) ;
67029: LD_VAR 0 2
67033: PPUSH
67034: LD_INT 1
67036: PPUSH
67037: CALL_OW 336
// end ;
67041: LD_VAR 0 3
67045: RET
// export function MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
67046: LD_INT 0
67048: PPUSH
67049: PPUSH
// if not mc_bases then
67050: LD_EXP 57
67054: NOT
67055: IFFALSE 67059
// exit ;
67057: GO 67175
// if GetLives ( abandoned_vehicle ) > 250 then
67059: LD_VAR 0 2
67063: PPUSH
67064: CALL_OW 256
67068: PUSH
67069: LD_INT 250
67071: GREATER
67072: IFFALSE 67076
// exit ;
67074: GO 67175
// for i = 1 to mc_bases do
67076: LD_ADDR_VAR 0 6
67080: PUSH
67081: DOUBLE
67082: LD_INT 1
67084: DEC
67085: ST_TO_ADDR
67086: LD_EXP 57
67090: PUSH
67091: FOR_TO
67092: IFFALSE 67173
// begin if driver in mc_bases [ i ] then
67094: LD_VAR 0 1
67098: PUSH
67099: LD_EXP 57
67103: PUSH
67104: LD_VAR 0 6
67108: ARRAY
67109: IN
67110: IFFALSE 67171
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
67112: LD_VAR 0 1
67116: PPUSH
67117: LD_EXP 57
67121: PUSH
67122: LD_VAR 0 6
67126: ARRAY
67127: PPUSH
67128: LD_INT 2
67130: PUSH
67131: LD_INT 30
67133: PUSH
67134: LD_INT 0
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 30
67143: PUSH
67144: LD_INT 1
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: LIST
67155: PPUSH
67156: CALL_OW 72
67160: PUSH
67161: LD_INT 1
67163: ARRAY
67164: PPUSH
67165: CALL_OW 112
// break ;
67169: GO 67173
// end ; end ;
67171: GO 67091
67173: POP
67174: POP
// end ;
67175: LD_VAR 0 5
67179: RET
