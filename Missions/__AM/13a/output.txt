// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitVariables ;
   8: CALL 587 0 0
// InitMacro ;
  12: CALL 49874 0 0
// PrepareNature ( 3 , 3 , 3 , 4 , 3 , 0 , 0 , nature_area , 0 ) ;
  16: LD_INT 3
  18: PPUSH
  19: LD_INT 3
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 4
  27: PPUSH
  28: LD_INT 3
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: LD_INT 5
  39: PPUSH
  40: LD_INT 0
  42: PPUSH
  43: CALL 45749 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_russian , 0 ) ;
  47: LD_INT 0
  49: PPUSH
  50: LD_INT 0
  52: PPUSH
  53: LD_INT 5
  55: PPUSH
  56: LD_INT 0
  58: PPUSH
  59: LD_INT 0
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: LD_INT 0
  67: PPUSH
  68: LD_INT 8
  70: PPUSH
  71: LD_INT 0
  73: PPUSH
  74: CALL 45749 0 9
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 1 , 0 , area_apeman_arabian , 0 ) ;
  78: LD_INT 0
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 6
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: LD_INT 0
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: LD_INT 6
 101: PPUSH
 102: LD_INT 0
 104: PPUSH
 105: CALL 45749 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_alliance , 0 ) ;
 109: LD_INT 0
 111: PPUSH
 112: LD_INT 0
 114: PPUSH
 115: LD_INT 5
 117: PPUSH
 118: LD_INT 0
 120: PPUSH
 121: LD_INT 0
 123: PPUSH
 124: LD_INT 0
 126: PPUSH
 127: LD_INT 0
 129: PPUSH
 130: LD_INT 12
 132: PPUSH
 133: LD_INT 0
 135: PPUSH
 136: CALL 45749 0 9
// PrepareArabian ;
 140: CALL 3406 0 0
// PrepareRussian ;
 144: CALL 2533 0 0
// PrepareAlliance ;
 148: CALL 697 0 0
// MC_Start ( ) ;
 152: CALL 50087 0 0
// if debug then
 156: LD_EXP 1
 160: IFFALSE 169
// FogOff ( 1 ) ;
 162: LD_INT 1
 164: PPUSH
 165: CALL_OW 344
// Action ;
 169: CALL 5460 0 0
// end ;
 173: END
// export function CustomInitMacro ; var i ; begin
 174: LD_INT 0
 176: PPUSH
 177: PPUSH
// mc_parking := [ parking_arabian , parking_russian ] ;
 178: LD_ADDR_EXP 81
 182: PUSH
 183: LD_INT 1
 185: PUSH
 186: LD_INT 2
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: ST_TO_ADDR
// mc_scan_area := [ area_base_arabian , area_base_russian ] ;
 193: LD_ADDR_EXP 82
 197: PUSH
 198: LD_INT 3
 200: PUSH
 201: LD_INT 4
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 12 , 15 , 18 ] [ Difficulty ] , minefield ) ;
 208: LD_INT 1
 210: PPUSH
 211: LD_INT 12
 213: PUSH
 214: LD_INT 15
 216: PUSH
 217: LD_INT 18
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: PUSH
 225: LD_OWVAR 67
 229: ARRAY
 230: PPUSH
 231: LD_INT 7
 233: PPUSH
 234: CALL 62961 0 3
// MC_SetDefenderList ( 1 , arabian_guard ) ;
 238: LD_INT 1
 240: PPUSH
 241: LD_EXP 53
 245: PPUSH
 246: CALL 63330 0 2
// MC_SetTame ( 1 , area_apeman_arabian ) ;
 250: LD_INT 1
 252: PPUSH
 253: LD_INT 6
 255: PPUSH
 256: CALL 63687 0 2
// MC_SetCratesArea ( 1 , [ area_collect_arabian ] ) ;
 260: LD_INT 1
 262: PPUSH
 263: LD_INT 9
 265: PUSH
 266: EMPTY
 267: LIST
 268: PPUSH
 269: CALL 63829 0 2
// MC_InsertProduceList ( 1 , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 13
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: LD_INT 2
 284: PUSH
 285: LD_INT 32
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL 63267 0 2
// MC_SetLabKind ( 2 , [ b_lab_computer , b_lab_spacetime , b_lab_weapon , b_lab_siberium ] ) ;
 298: LD_INT 2
 300: PPUSH
 301: LD_INT 12
 303: PUSH
 304: LD_INT 14
 306: PUSH
 307: LD_INT 10
 309: PUSH
 310: LD_INT 11
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: PPUSH
 319: CALL 63736 0 2
// MC_SetDefenderList ( 2 , russian_guard ) ;
 323: LD_INT 2
 325: PPUSH
 326: LD_EXP 50
 330: PPUSH
 331: CALL 63330 0 2
// MC_SetTame ( 2 , area_apeman_russian ) ;
 335: LD_INT 2
 337: PPUSH
 338: LD_INT 8
 340: PPUSH
 341: CALL 63687 0 2
// MC_SetCratesArea ( 2 , [ area_collect_russian ] ) ;
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 10
 350: PUSH
 351: EMPTY
 352: LIST
 353: PPUSH
 354: CALL 63829 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 71 , 116 , 4 ] , [ b_armoury , 85 , 116 , 4 ] , [ b_bunker , 83 , 111 , 4 ] , [ b_bunker , 87 , 121 , 4 ] , [ b_turret , 88 , 128 , 4 ] , [ b_bunker , 59 , 89 , 3 ] , [ b_turret , 69 , 98 , 3 ] , [ b_turret , 77 , 103 , 3 ] , [ b_turret , 83 , 105 , 3 ] , [ b_turret , 71 , 125 , 5 ] ] ) ;
 358: LD_INT 2
 360: PPUSH
 361: LD_INT 6
 363: PUSH
 364: LD_INT 71
 366: PUSH
 367: LD_INT 116
 369: PUSH
 370: LD_INT 4
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_INT 4
 381: PUSH
 382: LD_INT 85
 384: PUSH
 385: LD_INT 116
 387: PUSH
 388: LD_INT 4
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 32
 399: PUSH
 400: LD_INT 83
 402: PUSH
 403: LD_INT 111
 405: PUSH
 406: LD_INT 4
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 32
 417: PUSH
 418: LD_INT 87
 420: PUSH
 421: LD_INT 121
 423: PUSH
 424: LD_INT 4
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 33
 435: PUSH
 436: LD_INT 88
 438: PUSH
 439: LD_INT 128
 441: PUSH
 442: LD_INT 4
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 32
 453: PUSH
 454: LD_INT 59
 456: PUSH
 457: LD_INT 89
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 33
 471: PUSH
 472: LD_INT 69
 474: PUSH
 475: LD_INT 98
 477: PUSH
 478: LD_INT 3
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 33
 489: PUSH
 490: LD_INT 77
 492: PUSH
 493: LD_INT 103
 495: PUSH
 496: LD_INT 3
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_INT 33
 507: PUSH
 508: LD_INT 83
 510: PUSH
 511: LD_INT 105
 513: PUSH
 514: LD_INT 3
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 33
 525: PUSH
 526: LD_INT 71
 528: PUSH
 529: LD_INT 125
 531: PUSH
 532: LD_INT 5
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL 63171 0 2
// MC_InsertProduceList ( 2 , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ) ;
 557: LD_INT 2
 559: PPUSH
 560: LD_INT 21
 562: PUSH
 563: LD_INT 1
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 51
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL 63267 0 2
// end ;
 582: LD_VAR 0 1
 586: RET
// export debug , game , freedom , gossudarov_arrive , ru_lab_builded , player_spotted , first_attack , ar_base_spotted , ar_active_attack , ar_attackers , first_powell_attack , abdul_escaped , loss_counter ; function InitVariables ; begin
 587: LD_INT 0
 589: PPUSH
// debug := false ;
 590: LD_ADDR_EXP 1
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// game := true ;
 598: LD_ADDR_EXP 2
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// gossudarov_arrive := false ;
 606: LD_ADDR_EXP 4
 610: PUSH
 611: LD_INT 0
 613: ST_TO_ADDR
// ru_lab_builded := false ;
 614: LD_ADDR_EXP 5
 618: PUSH
 619: LD_INT 0
 621: ST_TO_ADDR
// player_spotted := false ;
 622: LD_ADDR_EXP 6
 626: PUSH
 627: LD_INT 0
 629: ST_TO_ADDR
// first_attack := false ;
 630: LD_ADDR_EXP 7
 634: PUSH
 635: LD_INT 0
 637: ST_TO_ADDR
// ru_attackers := [ ] ;
 638: LD_ADDR_EXP 51
 642: PUSH
 643: EMPTY
 644: ST_TO_ADDR
// ar_base_spotted := false ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_INT 0
 652: ST_TO_ADDR
// ar_active_attack := false ;
 653: LD_ADDR_EXP 9
 657: PUSH
 658: LD_INT 0
 660: ST_TO_ADDR
// ar_attackers := [ ] ;
 661: LD_ADDR_EXP 10
 665: PUSH
 666: EMPTY
 667: ST_TO_ADDR
// first_powell_attack := false ;
 668: LD_ADDR_EXP 11
 672: PUSH
 673: LD_INT 0
 675: ST_TO_ADDR
// abdul_escaped := false ;
 676: LD_ADDR_EXP 12
 680: PUSH
 681: LD_INT 0
 683: ST_TO_ADDR
// loss_counter := 0 ;
 684: LD_ADDR_EXP 13
 688: PUSH
 689: LD_INT 0
 691: ST_TO_ADDR
// end ; end_of_file
 692: LD_VAR 0 1
 696: RET
// export JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export Gossudarov , Kirilenkova , Titov , Fadeev , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov ; export Burlak , Belkov , Gnyevko ; export Masha ; export function PrepareAlliance ; var veh , i , tmp ; begin
 697: LD_INT 0
 699: PPUSH
 700: PPUSH
 701: PPUSH
 702: PPUSH
// uc_side := 7 ;
 703: LD_ADDR_OWVAR 20
 707: PUSH
 708: LD_INT 7
 710: ST_TO_ADDR
// uc_nation := 1 ;
 711: LD_ADDR_OWVAR 21
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 12a_ ) ;
 719: LD_ADDR_EXP 14
 723: PUSH
 724: LD_STRING JMM
 726: PPUSH
 727: LD_EXP 1
 731: NOT
 732: PPUSH
 733: LD_STRING 12a_
 735: PPUSH
 736: CALL 12393 0 3
 740: ST_TO_ADDR
// PlaceUnitXY ( JMM , 71 , 23 , false ) ;
 741: LD_EXP 14
 745: PPUSH
 746: LD_INT 71
 748: PPUSH
 749: LD_INT 23
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL_OW 48
// SetClass ( JMM , 2 ) ;
 759: LD_EXP 14
 763: PPUSH
 764: LD_INT 2
 766: PPUSH
 767: CALL_OW 336
// Roth := PrepareUnit ( Roth , ( not debug ) , 12a_ ) ;
 771: LD_ADDR_EXP 15
 775: PUSH
 776: LD_STRING Roth
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_STRING 12a_
 787: PPUSH
 788: CALL 12393 0 3
 792: ST_TO_ADDR
// if Roth then
 793: LD_EXP 15
 797: IFFALSE 817
// PlaceUnitXY ( Roth , 71 , 21 , false ) ;
 799: LD_EXP 15
 803: PPUSH
 804: LD_INT 71
 806: PPUSH
 807: LD_INT 21
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL_OW 48
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 12a_ ) ;
 817: LD_ADDR_EXP 16
 821: PUSH
 822: LD_STRING Lisa
 824: PPUSH
 825: LD_EXP 1
 829: NOT
 830: PPUSH
 831: LD_STRING 12a_
 833: PPUSH
 834: CALL 12393 0 3
 838: ST_TO_ADDR
// if Lisa then
 839: LD_EXP 16
 843: IFFALSE 860
// PlaceUnitArea ( Lisa , alliance_start , false ) ;
 845: LD_EXP 16
 849: PPUSH
 850: LD_INT 13
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 49
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 12a_ ) ;
 860: LD_ADDR_EXP 17
 864: PUSH
 865: LD_STRING Donaldson
 867: PPUSH
 868: LD_EXP 1
 872: NOT
 873: PPUSH
 874: LD_STRING 12a_
 876: PPUSH
 877: CALL 12393 0 3
 881: ST_TO_ADDR
// if Donaldson then
 882: LD_EXP 17
 886: IFFALSE 903
// PlaceUnitArea ( Donaldson , alliance_start , false ) ;
 888: LD_EXP 17
 892: PPUSH
 893: LD_INT 13
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 49
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 12a_ ) ;
 903: LD_ADDR_EXP 18
 907: PUSH
 908: LD_STRING Bobby
 910: PPUSH
 911: LD_EXP 1
 915: NOT
 916: PPUSH
 917: LD_STRING 12a_
 919: PPUSH
 920: CALL 12393 0 3
 924: ST_TO_ADDR
// if Bobby then
 925: LD_EXP 18
 929: IFFALSE 946
// PlaceUnitArea ( Bobby , alliance_start , false ) ;
 931: LD_EXP 18
 935: PPUSH
 936: LD_INT 13
 938: PPUSH
 939: LD_INT 0
 941: PPUSH
 942: CALL_OW 49
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 12a_ ) ;
 946: LD_ADDR_EXP 19
 950: PUSH
 951: LD_STRING Cyrus
 953: PPUSH
 954: LD_EXP 1
 958: NOT
 959: PPUSH
 960: LD_STRING 12a_
 962: PPUSH
 963: CALL 12393 0 3
 967: ST_TO_ADDR
// if Cyrus then
 968: LD_EXP 19
 972: IFFALSE 989
// PlaceUnitArea ( Cyrus , alliance_start , false ) ;
 974: LD_EXP 19
 978: PPUSH
 979: LD_INT 13
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 49
// Denis := PrepareUnit ( Denis , ( not debug ) , 12a_ ) ;
 989: LD_ADDR_EXP 20
 993: PUSH
 994: LD_STRING Denis
 996: PPUSH
 997: LD_EXP 1
1001: NOT
1002: PPUSH
1003: LD_STRING 12a_
1005: PPUSH
1006: CALL 12393 0 3
1010: ST_TO_ADDR
// if Denis then
1011: LD_EXP 20
1015: IFFALSE 1032
// PlaceUnitArea ( Denis , alliance_start , false ) ;
1017: LD_EXP 20
1021: PPUSH
1022: LD_INT 13
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// Brown := PrepareUnit ( Brown , ( not debug ) , 12a_ ) ;
1032: LD_ADDR_EXP 21
1036: PUSH
1037: LD_STRING Brown
1039: PPUSH
1040: LD_EXP 1
1044: NOT
1045: PPUSH
1046: LD_STRING 12a_
1048: PPUSH
1049: CALL 12393 0 3
1053: ST_TO_ADDR
// if Brown then
1054: LD_EXP 21
1058: IFFALSE 1075
// PlaceUnitArea ( Brown , alliance_start , false ) ;
1060: LD_EXP 21
1064: PPUSH
1065: LD_INT 13
1067: PPUSH
1068: LD_INT 0
1070: PPUSH
1071: CALL_OW 49
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 12a_ ) ;
1075: LD_ADDR_EXP 22
1079: PUSH
1080: LD_STRING Gladstone
1082: PPUSH
1083: LD_EXP 1
1087: NOT
1088: PPUSH
1089: LD_STRING 12a_
1091: PPUSH
1092: CALL 12393 0 3
1096: ST_TO_ADDR
// if Gladstone then
1097: LD_EXP 22
1101: IFFALSE 1118
// PlaceUnitArea ( Gladstone , alliance_start , false ) ;
1103: LD_EXP 22
1107: PPUSH
1108: LD_INT 13
1110: PPUSH
1111: LD_INT 0
1113: PPUSH
1114: CALL_OW 49
// Houten := PrepareUnit ( Houten , ( not debug ) , 12a_ ) ;
1118: LD_ADDR_EXP 23
1122: PUSH
1123: LD_STRING Houten
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_STRING 12a_
1134: PPUSH
1135: CALL 12393 0 3
1139: ST_TO_ADDR
// if Houten then
1140: LD_EXP 23
1144: IFFALSE 1161
// PlaceUnitArea ( Houten , alliance_start , false ) ;
1146: LD_EXP 23
1150: PPUSH
1151: LD_INT 13
1153: PPUSH
1154: LD_INT 0
1156: PPUSH
1157: CALL_OW 49
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 12a_ ) ;
1161: LD_ADDR_EXP 24
1165: PUSH
1166: LD_STRING Cornel
1168: PPUSH
1169: LD_EXP 1
1173: NOT
1174: PPUSH
1175: LD_STRING 12a_
1177: PPUSH
1178: CALL 12393 0 3
1182: ST_TO_ADDR
// if Cornel then
1183: LD_EXP 24
1187: IFFALSE 1204
// PlaceUnitArea ( Cornel , alliance_start , false ) ;
1189: LD_EXP 24
1193: PPUSH
1194: LD_INT 13
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 49
// Gary := PrepareUnit ( Gary , ( not debug ) , 12a_ ) ;
1204: LD_ADDR_EXP 25
1208: PUSH
1209: LD_STRING Gary
1211: PPUSH
1212: LD_EXP 1
1216: NOT
1217: PPUSH
1218: LD_STRING 12a_
1220: PPUSH
1221: CALL 12393 0 3
1225: ST_TO_ADDR
// if Gary then
1226: LD_EXP 25
1230: IFFALSE 1247
// PlaceUnitArea ( Gary , alliance_start , false ) ;
1232: LD_EXP 25
1236: PPUSH
1237: LD_INT 13
1239: PPUSH
1240: LD_INT 0
1242: PPUSH
1243: CALL_OW 49
// Frank := PrepareUnit ( Frank , ( not debug ) , 12a_ ) ;
1247: LD_ADDR_EXP 26
1251: PUSH
1252: LD_STRING Frank
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_STRING 12a_
1263: PPUSH
1264: CALL 12393 0 3
1268: ST_TO_ADDR
// if Frank then
1269: LD_EXP 26
1273: IFFALSE 1290
// PlaceUnitArea ( Frank , alliance_start , false ) ;
1275: LD_EXP 26
1279: PPUSH
1280: LD_INT 13
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 49
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 12a_ ) ;
1290: LD_ADDR_EXP 27
1294: PUSH
1295: LD_STRING Kikuchi
1297: PPUSH
1298: LD_EXP 1
1302: NOT
1303: PPUSH
1304: LD_STRING 12a_
1306: PPUSH
1307: CALL 12393 0 3
1311: ST_TO_ADDR
// if Kikuchi then
1312: LD_EXP 27
1316: IFFALSE 1333
// PlaceUnitArea ( Kikuchi , alliance_start , false ) ;
1318: LD_EXP 27
1322: PPUSH
1323: LD_INT 13
1325: PPUSH
1326: LD_INT 0
1328: PPUSH
1329: CALL_OW 49
// Simms := PrepareUnit ( Simms , ( not debug ) , 12a_ ) ;
1333: LD_ADDR_EXP 28
1337: PUSH
1338: LD_STRING Simms
1340: PPUSH
1341: LD_EXP 1
1345: NOT
1346: PPUSH
1347: LD_STRING 12a_
1349: PPUSH
1350: CALL 12393 0 3
1354: ST_TO_ADDR
// if Simms then
1355: LD_EXP 28
1359: IFFALSE 1376
// PlaceUnitArea ( Simms , alliance_start , false ) ;
1361: LD_EXP 28
1365: PPUSH
1366: LD_INT 13
1368: PPUSH
1369: LD_INT 0
1371: PPUSH
1372: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 12a_ ) ;
1376: LD_ADDR_EXP 29
1380: PUSH
1381: LD_STRING Joan
1383: PPUSH
1384: LD_EXP 1
1388: NOT
1389: PPUSH
1390: LD_STRING 12a_
1392: PPUSH
1393: CALL 12393 0 3
1397: ST_TO_ADDR
// if Joan then
1398: LD_EXP 29
1402: IFFALSE 1419
// PlaceUnitArea ( Joan , alliance_start , false ) ;
1404: LD_EXP 29
1408: PPUSH
1409: LD_INT 13
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 12a_ ) ;
1419: LD_ADDR_EXP 30
1423: PUSH
1424: LD_STRING DeltaDoctor
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_STRING 12a_
1435: PPUSH
1436: CALL 12393 0 3
1440: ST_TO_ADDR
// if DeltaDoctor then
1441: LD_EXP 30
1445: IFFALSE 1462
// PlaceUnitArea ( DeltaDoctor , alliance_start , false ) ;
1447: LD_EXP 30
1451: PPUSH
1452: LD_INT 13
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// tmp := CreateCharacterSet ( 12a_others ) ;
1462: LD_ADDR_VAR 0 4
1466: PUSH
1467: LD_STRING 12a_others
1469: PPUSH
1470: CALL_OW 31
1474: ST_TO_ADDR
// if tmp then
1475: LD_VAR 0 4
1479: IFFALSE 1513
// for i in tmp do
1481: LD_ADDR_VAR 0 3
1485: PUSH
1486: LD_VAR 0 4
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1511
// PlaceUnitArea ( i , alliance_start , false ) ;
1494: LD_VAR 0 3
1498: PPUSH
1499: LD_INT 13
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 49
1509: GO 1491
1511: POP
1512: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1513: LD_INT 3
1515: PPUSH
1516: LD_INT 3
1518: PPUSH
1519: LD_INT 3
1521: PPUSH
1522: LD_INT 12
1524: PPUSH
1525: LD_INT 100
1527: PPUSH
1528: CALL 18465 0 5
// veh := CreateVehicle ;
1532: LD_ADDR_VAR 0 2
1536: PUSH
1537: CALL_OW 45
1541: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1542: LD_VAR 0 2
1546: PPUSH
1547: LD_INT 2
1549: PPUSH
1550: CALL_OW 233
// PlaceUnitXY ( veh , 63 , 9 , false ) ;
1554: LD_VAR 0 2
1558: PPUSH
1559: LD_INT 63
1561: PPUSH
1562: LD_INT 9
1564: PPUSH
1565: LD_INT 0
1567: PPUSH
1568: CALL_OW 48
// SetCargo ( veh , mat_artifact , 30 ) ;
1572: LD_VAR 0 2
1576: PPUSH
1577: LD_INT 4
1579: PPUSH
1580: LD_INT 30
1582: PPUSH
1583: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , debug ) then
1587: LD_STRING 11_artifact_captured
1589: PPUSH
1590: LD_EXP 1
1594: PPUSH
1595: CALL_OW 30
1599: IFFALSE 1675
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1601: LD_INT 3
1603: PPUSH
1604: LD_INT 3
1606: PPUSH
1607: LD_INT 3
1609: PPUSH
1610: LD_INT 12
1612: PPUSH
1613: LD_INT 100
1615: PPUSH
1616: CALL 18465 0 5
// veh := CreateVehicle ;
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: CALL_OW 45
1629: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1630: LD_VAR 0 2
1634: PPUSH
1635: LD_INT 2
1637: PPUSH
1638: CALL_OW 233
// PlaceUnitXY ( veh , 60 , 4 , false ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_INT 60
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 0
1655: PPUSH
1656: CALL_OW 48
// SetCargo ( veh , mat_artifact , 50 ) ;
1660: LD_VAR 0 2
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: LD_INT 50
1670: PPUSH
1671: CALL_OW 290
// end ; end ;
1675: LD_VAR 0 1
1679: RET
// export function PrepareGossudarov ; var tmp , i ; begin
1680: LD_INT 0
1682: PPUSH
1683: PPUSH
1684: PPUSH
// uc_side := 6 ;
1685: LD_ADDR_OWVAR 20
1689: PUSH
1690: LD_INT 6
1692: ST_TO_ADDR
// uc_nation := 3 ;
1693: LD_ADDR_OWVAR 21
1697: PUSH
1698: LD_INT 3
1700: ST_TO_ADDR
// InitHc ;
1701: CALL_OW 19
// Gossudarov := NewCharacter ( Gossudarov ) ;
1705: LD_ADDR_EXP 31
1709: PUSH
1710: LD_STRING Gossudarov
1712: PPUSH
1713: CALL_OW 25
1717: ST_TO_ADDR
// Kirilenkova := NewCharacter ( Kirilenkova ) ;
1718: LD_ADDR_EXP 32
1722: PUSH
1723: LD_STRING Kirilenkova
1725: PPUSH
1726: CALL_OW 25
1730: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
1731: LD_ADDR_EXP 33
1735: PUSH
1736: LD_STRING Titov
1738: PPUSH
1739: CALL_OW 25
1743: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
1744: LD_ADDR_EXP 38
1748: PUSH
1749: LD_STRING Oblukov
1751: PPUSH
1752: CALL_OW 25
1756: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
1757: LD_ADDR_EXP 35
1761: PUSH
1762: LD_STRING Dolgov
1764: PPUSH
1765: CALL_OW 25
1769: ST_TO_ADDR
// Petrosyan := NewCharacter ( Petrosyan ) ;
1770: LD_ADDR_EXP 36
1774: PUSH
1775: LD_STRING Petrosyan
1777: PPUSH
1778: CALL_OW 25
1782: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
1783: LD_ADDR_EXP 37
1787: PUSH
1788: LD_STRING Scholtze
1790: PPUSH
1791: CALL_OW 25
1795: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
1796: LD_ADDR_EXP 39
1800: PUSH
1801: LD_STRING Kapitsova
1803: PPUSH
1804: CALL_OW 25
1808: ST_TO_ADDR
// tmp := [ Gossudarov , Kirilenkova , Titov , Oblukov , Dolgov , Petrosyan , Scholtze , Kapitsova ] ;
1809: LD_ADDR_VAR 0 2
1813: PUSH
1814: LD_EXP 31
1818: PUSH
1819: LD_EXP 32
1823: PUSH
1824: LD_EXP 33
1828: PUSH
1829: LD_EXP 38
1833: PUSH
1834: LD_EXP 35
1838: PUSH
1839: LD_EXP 36
1843: PUSH
1844: LD_EXP 37
1848: PUSH
1849: LD_EXP 39
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: ST_TO_ADDR
// for i in tmp do
1864: LD_ADDR_VAR 0 3
1868: PUSH
1869: LD_VAR 0 2
1873: PUSH
1874: FOR_IN
1875: IFFALSE 1894
// PlaceUnitArea ( i , gossudarov_spawn , false ) ;
1877: LD_VAR 0 3
1881: PPUSH
1882: LD_INT 14
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL_OW 49
1892: GO 1874
1894: POP
1895: POP
// ComMoveXY ( tmp , GetX ( freedom ) , GetY ( freedom ) ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_EXP 3
1905: PPUSH
1906: CALL_OW 250
1910: PPUSH
1911: LD_EXP 3
1915: PPUSH
1916: CALL_OW 251
1920: PPUSH
1921: CALL_OW 111
// end ;
1925: LD_VAR 0 1
1929: RET
// export function PrepareBelkov ; begin
1930: LD_INT 0
1932: PPUSH
// uc_side := 4 ;
1933: LD_ADDR_OWVAR 20
1937: PUSH
1938: LD_INT 4
1940: ST_TO_ADDR
// uc_nation := 3 ;
1941: LD_ADDR_OWVAR 21
1945: PUSH
1946: LD_INT 3
1948: ST_TO_ADDR
// InitHc ;
1949: CALL_OW 19
// Belkov := NewCharacter ( Belkov ) ;
1953: LD_ADDR_EXP 46
1957: PUSH
1958: LD_STRING Belkov
1960: PPUSH
1961: CALL_OW 25
1965: ST_TO_ADDR
// PlaceUnitArea ( Belkov , gossudarov_spawn , false ) ;
1966: LD_EXP 46
1970: PPUSH
1971: LD_INT 14
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 49
// end ;
1981: LD_VAR 0 1
1985: RET
// export function PrepareGnyevko ; begin
1986: LD_INT 0
1988: PPUSH
// uc_side := 4 ;
1989: LD_ADDR_OWVAR 20
1993: PUSH
1994: LD_INT 4
1996: ST_TO_ADDR
// uc_nation := 3 ;
1997: LD_ADDR_OWVAR 21
2001: PUSH
2002: LD_INT 3
2004: ST_TO_ADDR
// InitHc ;
2005: CALL_OW 19
// Gnyevko := NewCharacter ( Gnyevko ) ;
2009: LD_ADDR_EXP 47
2013: PUSH
2014: LD_STRING Gnyevko
2016: PPUSH
2017: CALL_OW 25
2021: ST_TO_ADDR
// PlaceUnitArea ( Gnyevko , gossudarov_spawn , false ) ;
2022: LD_EXP 47
2026: PPUSH
2027: LD_INT 14
2029: PPUSH
2030: LD_INT 0
2032: PPUSH
2033: CALL_OW 49
// end ;
2037: LD_VAR 0 1
2041: RET
// export function PrepareBurlak ; var i , tmp ; begin
2042: LD_INT 0
2044: PPUSH
2045: PPUSH
2046: PPUSH
// uc_side := 4 ;
2047: LD_ADDR_OWVAR 20
2051: PUSH
2052: LD_INT 4
2054: ST_TO_ADDR
// uc_nation := 3 ;
2055: LD_ADDR_OWVAR 21
2059: PUSH
2060: LD_INT 3
2062: ST_TO_ADDR
// InitHc ;
2063: CALL_OW 19
// Burlak := NewCharacter ( Burlak ) ;
2067: LD_ADDR_EXP 45
2071: PUSH
2072: LD_STRING Burlak
2074: PPUSH
2075: CALL_OW 25
2079: ST_TO_ADDR
// PrepareVehicle ( [ ru_heavy_tracked , ru_heavy_wheeled , ru_medium_tracked ] [ Difficulty ] , engine_combustion , control_manual , ru_rocket_launcher , 0 ) ;
2080: LD_INT 24
2082: PUSH
2083: LD_INT 23
2085: PUSH
2086: LD_INT 22
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: PUSH
2094: LD_OWVAR 67
2098: ARRAY
2099: PPUSH
2100: LD_INT 1
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 45
2108: PPUSH
2109: LD_INT 0
2111: PPUSH
2112: CALL 18465 0 5
// Masha := CreateVehicle ;
2116: LD_ADDR_EXP 48
2120: PUSH
2121: CALL_OW 45
2125: ST_TO_ADDR
// SetLives ( [ Masha , Burlak ] , 499 ) ;
2126: LD_EXP 48
2130: PUSH
2131: LD_EXP 45
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PPUSH
2140: LD_INT 499
2142: PPUSH
2143: CALL_OW 234
// SetDir ( Masha , 3 ) ;
2147: LD_EXP 48
2151: PPUSH
2152: LD_INT 3
2154: PPUSH
2155: CALL_OW 233
// SetMark ( Masha , 1 ) ;
2159: LD_EXP 48
2163: PPUSH
2164: LD_INT 1
2166: PPUSH
2167: CALL_OW 242
// PlaceUnitArea ( Masha , burlak_spawn , false ) ;
2171: LD_EXP 48
2175: PPUSH
2176: LD_INT 18
2178: PPUSH
2179: LD_INT 0
2181: PPUSH
2182: CALL_OW 49
// PlaceUnitXY ( Burlak , 125 , 1 , false ) ;
2186: LD_EXP 45
2190: PPUSH
2191: LD_INT 125
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: LD_INT 0
2199: PPUSH
2200: CALL_OW 48
// ComMoveUnit ( Burlak , Masha ) ;
2204: LD_EXP 45
2208: PPUSH
2209: LD_EXP 48
2213: PPUSH
2214: CALL_OW 112
// wait ( 0 0$0.3 ) ;
2218: LD_INT 10
2220: PPUSH
2221: CALL_OW 67
// AddComMoveXY ( Masha , 110 , 10 ) ;
2225: LD_EXP 48
2229: PPUSH
2230: LD_INT 110
2232: PPUSH
2233: LD_INT 10
2235: PPUSH
2236: CALL_OW 171
// Petrovova := NewCharacter ( Petrovova ) ;
2240: LD_ADDR_EXP 41
2244: PUSH
2245: LD_STRING Petrovova
2247: PPUSH
2248: CALL_OW 25
2252: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
2253: LD_ADDR_EXP 43
2257: PUSH
2258: LD_STRING Kuzmov
2260: PPUSH
2261: CALL_OW 25
2265: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
2266: LD_ADDR_EXP 42
2270: PUSH
2271: LD_STRING Kovalyuk
2273: PPUSH
2274: CALL_OW 25
2278: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
2279: LD_ADDR_EXP 40
2283: PUSH
2284: LD_STRING Lipshchin
2286: PPUSH
2287: CALL_OW 25
2291: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
2292: LD_ADDR_EXP 44
2296: PUSH
2297: LD_STRING Karamazov
2299: PPUSH
2300: CALL_OW 25
2304: ST_TO_ADDR
// tmp := [ Petrovova , Kuzmov , Kovalyuk , Lipshchin , Karamazov ] ;
2305: LD_ADDR_VAR 0 3
2309: PUSH
2310: LD_EXP 41
2314: PUSH
2315: LD_EXP 43
2319: PUSH
2320: LD_EXP 42
2324: PUSH
2325: LD_EXP 40
2329: PUSH
2330: LD_EXP 44
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// for i in tmp do
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_VAR 0 3
2351: PUSH
2352: FOR_IN
2353: IFFALSE 2392
// begin SetLives ( i , rand ( 399 , 799 ) ) ;
2355: LD_VAR 0 2
2359: PPUSH
2360: LD_INT 399
2362: PPUSH
2363: LD_INT 799
2365: PPUSH
2366: CALL_OW 12
2370: PPUSH
2371: CALL_OW 234
// PlaceUnitArea ( i , burlak_friends_spawn , false ) ;
2375: LD_VAR 0 2
2379: PPUSH
2380: LD_INT 19
2382: PPUSH
2383: LD_INT 0
2385: PPUSH
2386: CALL_OW 49
// end ;
2390: GO 2352
2392: POP
2393: POP
// ComMoveXY ( tmp , 116 , 8 ) ;
2394: LD_VAR 0 3
2398: PPUSH
2399: LD_INT 116
2401: PPUSH
2402: LD_INT 8
2404: PPUSH
2405: CALL_OW 111
// AddComHold ( tmp ) ;
2409: LD_VAR 0 3
2413: PPUSH
2414: CALL_OW 200
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
2418: LD_ADDR_VAR 0 2
2422: PUSH
2423: LD_VAR 0 3
2427: PPUSH
2428: LD_INT 25
2430: PUSH
2431: LD_INT 1
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PPUSH
2438: CALL_OW 72
2442: PUSH
2443: FOR_IN
2444: IFFALSE 2484
// begin AddComMoveToArea ( i , burlak_crawl_area ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 20
2453: PPUSH
2454: CALL_OW 173
// AddComTurnXY ( i , 147 , 45 ) ;
2458: LD_VAR 0 2
2462: PPUSH
2463: LD_INT 147
2465: PPUSH
2466: LD_INT 45
2468: PPUSH
2469: CALL_OW 178
// AddComCrawl ( i ) ;
2473: LD_VAR 0 2
2477: PPUSH
2478: CALL_OW 197
// end ;
2482: GO 2443
2484: POP
2485: POP
// repeat wait ( 0 0$1 ) ;
2486: LD_INT 35
2488: PPUSH
2489: CALL_OW 67
// until IsAt ( Masha , 110 , 10 ) ;
2493: LD_EXP 48
2497: PPUSH
2498: LD_INT 110
2500: PPUSH
2501: LD_INT 10
2503: PPUSH
2504: CALL_OW 307
2508: IFFALSE 2486
// ComStop ( Burlak ) ;
2510: LD_EXP 45
2514: PPUSH
2515: CALL_OW 141
// AddComHold ( Burlak ) ;
2519: LD_EXP 45
2523: PPUSH
2524: CALL_OW 200
// end ; end_of_file
2528: LD_VAR 0 1
2532: RET
// export russian_force , russian_guard , ru_attackers ; export function PrepareRussian ; var i , veh , tmp ; begin
2533: LD_INT 0
2535: PPUSH
2536: PPUSH
2537: PPUSH
2538: PPUSH
// uc_side := 3 ;
2539: LD_ADDR_OWVAR 20
2543: PUSH
2544: LD_INT 3
2546: ST_TO_ADDR
// uc_nation := 3 ;
2547: LD_ADDR_OWVAR 21
2551: PUSH
2552: LD_INT 3
2554: ST_TO_ADDR
// russian_force := PrepareBase ( ru_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 10000 , 3000 , 300 ] , [ 9 , 5 , 6 , 6 ] ) ;
2555: LD_ADDR_EXP 49
2559: PUSH
2560: LD_INT 47
2562: PPUSH
2563: LD_STRING 
2565: PPUSH
2566: LD_INT 7
2568: PUSH
2569: LD_INT 8
2571: PUSH
2572: LD_INT 9
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: LIST
2579: PUSH
2580: LD_OWVAR 67
2584: ARRAY
2585: PPUSH
2586: LD_INT 10000
2588: PUSH
2589: LD_INT 3000
2591: PUSH
2592: LD_INT 300
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: LD_INT 9
2602: PUSH
2603: LD_INT 5
2605: PUSH
2606: LD_INT 6
2608: PUSH
2609: LD_INT 6
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: PPUSH
2618: CALL 21864 0 5
2622: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , russian_force ) ;
2623: LD_ADDR_EXP 57
2627: PUSH
2628: LD_EXP 57
2632: PPUSH
2633: LD_INT 2
2635: PPUSH
2636: LD_EXP 49
2640: PPUSH
2641: CALL_OW 1
2645: ST_TO_ADDR
// tmp := [ ] ;
2646: LD_ADDR_VAR 0 4
2650: PUSH
2651: EMPTY
2652: ST_TO_ADDR
// for i = 1 to 4 do
2653: LD_ADDR_VAR 0 2
2657: PUSH
2658: DOUBLE
2659: LD_INT 1
2661: DEC
2662: ST_TO_ADDR
2663: LD_INT 4
2665: PUSH
2666: FOR_TO
2667: IFFALSE 2760
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun ] [ i mod 4 + 1 ] , 100 ) ;
2669: LD_INT 22
2671: PPUSH
2672: LD_INT 3
2674: PPUSH
2675: LD_INT 3
2677: PPUSH
2678: LD_INT 43
2680: PUSH
2681: LD_INT 45
2683: PUSH
2684: LD_INT 45
2686: PUSH
2687: LD_INT 44
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: PUSH
2696: LD_VAR 0 2
2700: PUSH
2701: LD_INT 4
2703: MOD
2704: PUSH
2705: LD_INT 1
2707: PLUS
2708: ARRAY
2709: PPUSH
2710: LD_INT 100
2712: PPUSH
2713: CALL 18465 0 5
// veh := CreateVehicle ;
2717: LD_ADDR_VAR 0 3
2721: PUSH
2722: CALL_OW 45
2726: ST_TO_ADDR
// tmp := tmp ^ veh ;
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: LD_VAR 0 4
2736: PUSH
2737: LD_VAR 0 3
2741: ADD
2742: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_russian , false ) ;
2743: LD_VAR 0 3
2747: PPUSH
2748: LD_INT 2
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: CALL_OW 49
// end ;
2758: GO 2666
2760: POP
2761: POP
// russian_guard := tmp ;
2762: LD_ADDR_EXP 50
2766: PUSH
2767: LD_VAR 0 4
2771: ST_TO_ADDR
// end ;
2772: LD_VAR 0 1
2776: RET
// every 6 6$00 + 2 2$00 trigger IsOk ( ru_depot ) and player_spotted do var i , base , tmp , flags , _target , attackers ;
2777: LD_INT 47
2779: PPUSH
2780: CALL_OW 302
2784: PUSH
2785: LD_EXP 6
2789: AND
2790: IFFALSE 3403
2792: GO 2794
2794: DISABLE
2795: LD_INT 0
2797: PPUSH
2798: PPUSH
2799: PPUSH
2800: PPUSH
2801: PPUSH
2802: PPUSH
// begin enable ;
2803: ENABLE
// base := 2 ;
2804: LD_ADDR_VAR 0 2
2808: PUSH
2809: LD_INT 2
2811: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
2812: LD_ADDR_VAR 0 4
2816: PUSH
2817: LD_INT 0
2819: PUSH
2820: LD_INT 0
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: LD_INT 0
2828: PUSH
2829: LD_INT 0
2831: PUSH
2832: LD_INT 0
2834: PUSH
2835: LD_INT 0
2837: PUSH
2838: LD_INT 0
2840: PUSH
2841: LD_INT 1
2843: PUSH
2844: LD_INT 0
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: ST_TO_ADDR
// tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] ] ;
2859: LD_ADDR_VAR 0 3
2863: PUSH
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: LD_INT 3
2872: PUSH
2873: LD_INT 45
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: LD_INT 21
2884: PUSH
2885: LD_INT 1
2887: PUSH
2888: LD_INT 3
2890: PUSH
2891: LD_INT 45
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: PUSH
2900: LD_INT 22
2902: PUSH
2903: LD_INT 1
2905: PUSH
2906: LD_INT 3
2908: PUSH
2909: LD_INT 45
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 23
2920: PUSH
2921: LD_INT 1
2923: PUSH
2924: LD_INT 3
2926: PUSH
2927: LD_INT 46
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
2942: LD_ADDR_VAR 0 1
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_OWVAR 67
2956: PUSH
2957: LD_OWVAR 1
2961: PUSH
2962: LD_INT 21000
2964: DIV
2965: PLUS
2966: PUSH
2967: FOR_TO
2968: IFFALSE 3056
// tmp := Insert ( tmp , tmp + 1 , [ [ ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
2970: LD_ADDR_VAR 0 3
2974: PUSH
2975: LD_VAR 0 3
2979: PPUSH
2980: LD_VAR 0 3
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: PPUSH
2989: LD_INT 23
2991: PUSH
2992: LD_INT 24
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 1
3001: PPUSH
3002: LD_INT 2
3004: PPUSH
3005: CALL_OW 12
3009: ARRAY
3010: PUSH
3011: LD_INT 1
3013: PUSH
3014: LD_INT 3
3016: PUSH
3017: LD_INT 46
3019: PUSH
3020: LD_INT 47
3022: PUSH
3023: LD_INT 45
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 1
3033: PPUSH
3034: LD_INT 3
3036: PPUSH
3037: CALL_OW 12
3041: ARRAY
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 2
3053: ST_TO_ADDR
3054: GO 2967
3056: POP
3057: POP
// MC_SetProduceList ( base , tmp ) ;
3058: LD_VAR 0 2
3062: PPUSH
3063: LD_VAR 0 3
3067: PPUSH
3068: CALL 63219 0 2
// repeat wait ( 0 0$1 ) ;
3072: LD_INT 35
3074: PPUSH
3075: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
3079: LD_VAR 0 2
3083: PPUSH
3084: CALL 63580 0 1
3088: PUSH
3089: LD_INT 0
3091: EQUAL
3092: IFFALSE 3072
// wait ( 0 0$20 ) ;
3094: LD_INT 700
3096: PPUSH
3097: CALL_OW 67
// _target := [ [ 71 , 19 ] , [ 91 , 67 ] , [ 52 , 44 ] , [ 68 , 48 ] ] ;
3101: LD_ADDR_VAR 0 5
3105: PUSH
3106: LD_INT 71
3108: PUSH
3109: LD_INT 19
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 91
3118: PUSH
3119: LD_INT 67
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 52
3128: PUSH
3129: LD_INT 44
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 68
3138: PUSH
3139: LD_INT 48
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] ] ) ) ;
3152: LD_ADDR_VAR 0 6
3156: PUSH
3157: LD_EXP 76
3161: PUSH
3162: LD_VAR 0 2
3166: ARRAY
3167: PUSH
3168: LD_EXP 79
3172: PUSH
3173: LD_VAR 0 2
3177: ARRAY
3178: PUSH
3179: LD_EXP 76
3183: PUSH
3184: LD_VAR 0 2
3188: ARRAY
3189: PPUSH
3190: LD_INT 2
3192: PUSH
3193: LD_INT 34
3195: PUSH
3196: LD_INT 51
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 34
3205: PUSH
3206: LD_INT 52
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: LIST
3217: PPUSH
3218: CALL_OW 72
3222: UNION
3223: DIFF
3224: ST_TO_ADDR
// if not attackers then
3225: LD_VAR 0 6
3229: NOT
3230: IFFALSE 3234
// exit ;
3232: GO 3403
// ru_attackers := attackers ;
3234: LD_ADDR_EXP 51
3238: PUSH
3239: LD_VAR 0 6
3243: ST_TO_ADDR
// for i = 1 to attackers do
3244: LD_ADDR_VAR 0 1
3248: PUSH
3249: DOUBLE
3250: LD_INT 1
3252: DEC
3253: ST_TO_ADDR
3254: LD_VAR 0 6
3258: PUSH
3259: FOR_TO
3260: IFFALSE 3337
// begin case i mod 3 of 0 :
3262: LD_VAR 0 1
3266: PUSH
3267: LD_INT 3
3269: MOD
3270: PUSH
3271: LD_INT 0
3273: DOUBLE
3274: EQUAL
3275: IFTRUE 3279
3277: GO 3282
3279: POP
// ; 1 :
3280: GO 3335
3282: LD_INT 1
3284: DOUBLE
3285: EQUAL
3286: IFTRUE 3290
3288: GO 3308
3290: POP
// ComAgressiveMove ( i , 32 , 49 ) ; 2 :
3291: LD_VAR 0 1
3295: PPUSH
3296: LD_INT 32
3298: PPUSH
3299: LD_INT 49
3301: PPUSH
3302: CALL_OW 114
3306: GO 3335
3308: LD_INT 2
3310: DOUBLE
3311: EQUAL
3312: IFTRUE 3316
3314: GO 3334
3316: POP
// ComAgressiveMove ( i , 117 , 107 ) ; end ;
3317: LD_VAR 0 1
3321: PPUSH
3322: LD_INT 117
3324: PPUSH
3325: LD_INT 107
3327: PPUSH
3328: CALL_OW 114
3332: GO 3335
3334: POP
// end ;
3335: GO 3259
3337: POP
3338: POP
// repeat wait ( 0 0$1 ) ;
3339: LD_INT 35
3341: PPUSH
3342: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
3346: LD_VAR 0 6
3350: PPUSH
3351: LD_INT 60
3353: PUSH
3354: EMPTY
3355: LIST
3356: PPUSH
3357: CALL_OW 72
3361: NOT
3362: IFFALSE 3339
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
3364: LD_VAR 0 2
3368: PPUSH
3369: LD_VAR 0 6
3373: PPUSH
3374: LD_VAR 0 5
3378: PPUSH
3379: LD_VAR 0 4
3383: PPUSH
3384: CALL 63465 0 4
// if not first_attack then
3388: LD_EXP 7
3392: NOT
3393: IFFALSE 3403
// first_attack := true ;
3395: LD_ADDR_EXP 7
3399: PUSH
3400: LD_INT 1
3402: ST_TO_ADDR
// end ; end_of_file
3403: PPOPN 6
3405: END
// export arabian_force , arabian_guard , Abdul , mastodont ; export function PrepareArabian ; var i , veh , tmp , xy , un , un2 ; begin
3406: LD_INT 0
3408: PPUSH
3409: PPUSH
3410: PPUSH
3411: PPUSH
3412: PPUSH
3413: PPUSH
3414: PPUSH
// uc_side := 2 ;
3415: LD_ADDR_OWVAR 20
3419: PUSH
3420: LD_INT 2
3422: ST_TO_ADDR
// uc_nation := 2 ;
3423: LD_ADDR_OWVAR 21
3427: PUSH
3428: LD_INT 2
3430: ST_TO_ADDR
// Abdul := NewCharacter ( Abdul ) ;
3431: LD_ADDR_EXP 54
3435: PUSH
3436: LD_STRING Abdul
3438: PPUSH
3439: CALL_OW 25
3443: ST_TO_ADDR
// SetClass ( Abdul , class_desert_warior ) ;
3444: LD_EXP 54
3448: PPUSH
3449: LD_INT 11
3451: PPUSH
3452: CALL_OW 336
// PlaceHumanInUnit ( Abdul , ar_depot ) ;
3456: LD_EXP 54
3460: PPUSH
3461: LD_INT 1
3463: PPUSH
3464: CALL_OW 52
// vc_chassis := 31 ;
3468: LD_ADDR_OWVAR 37
3472: PUSH
3473: LD_INT 31
3475: ST_TO_ADDR
// vc_control := control_rider ;
3476: LD_ADDR_OWVAR 38
3480: PUSH
3481: LD_INT 4
3483: ST_TO_ADDR
// mastodont := CreateVehicle ;
3484: LD_ADDR_EXP 55
3488: PUSH
3489: CALL_OW 45
3493: ST_TO_ADDR
// PlaceUnitXY ( mastodont , 153 , 71 , false ) ;
3494: LD_EXP 55
3498: PPUSH
3499: LD_INT 153
3501: PPUSH
3502: LD_INT 71
3504: PPUSH
3505: LD_INT 0
3507: PPUSH
3508: CALL_OW 48
// InitVc ;
3512: CALL_OW 20
// arabian_force := PrepareBase ( ar_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 5000 , 1000 , 300 ] , [ 22 , 5 , 6 , 9 ] ) ;
3516: LD_ADDR_EXP 52
3520: PUSH
3521: LD_INT 1
3523: PPUSH
3524: LD_STRING 
3526: PPUSH
3527: LD_INT 7
3529: PUSH
3530: LD_INT 8
3532: PUSH
3533: LD_INT 9
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: LIST
3540: PUSH
3541: LD_OWVAR 67
3545: ARRAY
3546: PPUSH
3547: LD_INT 5000
3549: PUSH
3550: LD_INT 1000
3552: PUSH
3553: LD_INT 300
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: PPUSH
3561: LD_INT 22
3563: PUSH
3564: LD_INT 5
3566: PUSH
3567: LD_INT 6
3569: PUSH
3570: LD_INT 9
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: PPUSH
3579: CALL 21864 0 5
3583: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , arabian_force ) ;
3584: LD_ADDR_EXP 57
3588: PUSH
3589: LD_EXP 57
3593: PPUSH
3594: LD_INT 1
3596: PPUSH
3597: LD_EXP 52
3601: PPUSH
3602: CALL_OW 1
3606: ST_TO_ADDR
// tmp := [ ] ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: EMPTY
3613: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
3614: LD_ADDR_OWVAR 37
3618: PUSH
3619: LD_INT 14
3621: ST_TO_ADDR
// vc_engine := engine_siberite ;
3622: LD_ADDR_OWVAR 39
3626: PUSH
3627: LD_INT 3
3629: ST_TO_ADDR
// vc_control := control_manual ;
3630: LD_ADDR_OWVAR 38
3634: PUSH
3635: LD_INT 1
3637: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
3638: LD_ADDR_OWVAR 40
3642: PUSH
3643: LD_INT 31
3645: ST_TO_ADDR
// for i = 1 to 3 do
3646: LD_ADDR_VAR 0 2
3650: PUSH
3651: DOUBLE
3652: LD_INT 1
3654: DEC
3655: ST_TO_ADDR
3656: LD_INT 3
3658: PUSH
3659: FOR_TO
3660: IFFALSE 3904
// begin xy := [ [ 153 , 71 ] , [ 155 , 81 ] ] [ i mod 2 + 1 ] ;
3662: LD_ADDR_VAR 0 5
3666: PUSH
3667: LD_INT 153
3669: PUSH
3670: LD_INT 71
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 155
3679: PUSH
3680: LD_INT 81
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PUSH
3691: LD_VAR 0 2
3695: PUSH
3696: LD_INT 2
3698: MOD
3699: PUSH
3700: LD_INT 1
3702: PLUS
3703: ARRAY
3704: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
3705: LD_INT 0
3707: PPUSH
3708: LD_INT 3
3710: PPUSH
3711: LD_INT 7
3713: PUSH
3714: LD_INT 8
3716: PUSH
3717: LD_INT 9
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: LIST
3724: PUSH
3725: LD_OWVAR 67
3729: ARRAY
3730: PPUSH
3731: CALL_OW 380
// un := CreateVehicle ;
3735: LD_ADDR_VAR 0 6
3739: PUSH
3740: CALL_OW 45
3744: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3745: LD_VAR 0 6
3749: PPUSH
3750: LD_INT 0
3752: PPUSH
3753: LD_INT 5
3755: PPUSH
3756: CALL_OW 12
3760: PPUSH
3761: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
3765: LD_VAR 0 6
3769: PPUSH
3770: LD_VAR 0 5
3774: PUSH
3775: LD_INT 1
3777: ARRAY
3778: PPUSH
3779: LD_VAR 0 5
3783: PUSH
3784: LD_INT 2
3786: ARRAY
3787: PPUSH
3788: LD_INT 6
3790: PPUSH
3791: LD_INT 0
3793: PPUSH
3794: CALL_OW 50
// un2 := CreateHuman ;
3798: LD_ADDR_VAR 0 7
3802: PUSH
3803: CALL_OW 44
3807: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
3808: LD_VAR 0 7
3812: PPUSH
3813: LD_VAR 0 6
3817: PPUSH
3818: CALL_OW 52
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un ) ;
3822: LD_ADDR_EXP 57
3826: PUSH
3827: LD_EXP 57
3831: PPUSH
3832: LD_INT 1
3834: PUSH
3835: LD_EXP 57
3839: PUSH
3840: LD_INT 1
3842: ARRAY
3843: PUSH
3844: LD_INT 1
3846: PLUS
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PPUSH
3852: LD_VAR 0 6
3856: PPUSH
3857: CALL 19022 0 3
3861: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un2 ) ;
3862: LD_ADDR_EXP 57
3866: PUSH
3867: LD_EXP 57
3871: PPUSH
3872: LD_INT 1
3874: PUSH
3875: LD_EXP 57
3879: PUSH
3880: LD_INT 1
3882: ARRAY
3883: PUSH
3884: LD_INT 1
3886: PLUS
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PPUSH
3892: LD_VAR 0 7
3896: PPUSH
3897: CALL 19022 0 3
3901: ST_TO_ADDR
// end ;
3902: GO 3659
3904: POP
3905: POP
// for i = 1 to 5 do
3906: LD_ADDR_VAR 0 2
3910: PUSH
3911: DOUBLE
3912: LD_INT 1
3914: DEC
3915: ST_TO_ADDR
3916: LD_INT 5
3918: PUSH
3919: FOR_TO
3920: IFFALSE 4013
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gatling_gun , ar_rocket_launcher , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] , 100 ) ;
3922: LD_INT 14
3924: PPUSH
3925: LD_INT 3
3927: PPUSH
3928: LD_INT 1
3930: PPUSH
3931: LD_INT 25
3933: PUSH
3934: LD_INT 28
3936: PUSH
3937: LD_INT 28
3939: PUSH
3940: LD_INT 27
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: PUSH
3949: LD_VAR 0 2
3953: PUSH
3954: LD_INT 4
3956: MOD
3957: PUSH
3958: LD_INT 1
3960: PLUS
3961: ARRAY
3962: PPUSH
3963: LD_INT 100
3965: PPUSH
3966: CALL 18465 0 5
// veh := CreateVehicle ;
3970: LD_ADDR_VAR 0 3
3974: PUSH
3975: CALL_OW 45
3979: ST_TO_ADDR
// tmp := tmp ^ veh ;
3980: LD_ADDR_VAR 0 4
3984: PUSH
3985: LD_VAR 0 4
3989: PUSH
3990: LD_VAR 0 3
3994: ADD
3995: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_arabian , false ) ;
3996: LD_VAR 0 3
4000: PPUSH
4001: LD_INT 1
4003: PPUSH
4004: LD_INT 0
4006: PPUSH
4007: CALL_OW 49
// end ;
4011: GO 3919
4013: POP
4014: POP
// arabian_guard := tmp ;
4015: LD_ADDR_EXP 53
4019: PUSH
4020: LD_VAR 0 4
4024: ST_TO_ADDR
// end ;
4025: LD_VAR 0 1
4029: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , ar_depot , 12 ] ] ) or GetLives ( Mastodont ) < 990 or GetLives ( Abdul ) < 990 do
4030: LD_INT 22
4032: PUSH
4033: LD_INT 7
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: LD_INT 91
4042: PUSH
4043: LD_INT 1
4045: PUSH
4046: LD_INT 12
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: LIST
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: PPUSH
4058: CALL_OW 69
4062: PUSH
4063: LD_EXP 55
4067: PPUSH
4068: CALL_OW 256
4072: PUSH
4073: LD_INT 990
4075: LESS
4076: OR
4077: PUSH
4078: LD_EXP 54
4082: PPUSH
4083: CALL_OW 256
4087: PUSH
4088: LD_INT 990
4090: LESS
4091: OR
4092: IFFALSE 4243
4094: GO 4096
4096: DISABLE
// begin if IsInUnit ( Abdul ) then
4097: LD_EXP 54
4101: PPUSH
4102: CALL_OW 310
4106: IFFALSE 4117
// ComExitBuilding ( Abdul ) ;
4108: LD_EXP 54
4112: PPUSH
4113: CALL_OW 122
// if Mastodont then
4117: LD_EXP 55
4121: IFFALSE 4138
// ComMoveXY ( Mastodont , 205 , 132 ) ;
4123: LD_EXP 55
4127: PPUSH
4128: LD_INT 205
4130: PPUSH
4131: LD_INT 132
4133: PPUSH
4134: CALL_OW 111
// AddComMoveXY ( Abdul , 205 , 132 ) ;
4138: LD_EXP 54
4142: PPUSH
4143: LD_INT 205
4145: PPUSH
4146: LD_INT 132
4148: PPUSH
4149: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4153: LD_INT 35
4155: PPUSH
4156: CALL_OW 67
// until IsInArea ( Abdul , escape_area ) ;
4160: LD_EXP 54
4164: PPUSH
4165: LD_INT 21
4167: PPUSH
4168: CALL_OW 308
4172: IFFALSE 4153
// RemoveUnit ( Abdul ) ;
4174: LD_EXP 54
4178: PPUSH
4179: CALL_OW 64
// abdul_escaped := true ;
4183: LD_ADDR_EXP 12
4187: PUSH
4188: LD_INT 1
4190: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4191: LD_INT 35
4193: PPUSH
4194: CALL_OW 67
// until IsInArea ( Mastodont , escape_area ) or IsDead ( Mastodont ) ;
4198: LD_EXP 55
4202: PPUSH
4203: LD_INT 21
4205: PPUSH
4206: CALL_OW 308
4210: PUSH
4211: LD_EXP 55
4215: PPUSH
4216: CALL_OW 301
4220: OR
4221: IFFALSE 4191
// if IsOk ( Mastodont ) then
4223: LD_EXP 55
4227: PPUSH
4228: CALL_OW 302
4232: IFFALSE 4243
// RemoveUnit ( Mastodont ) ;
4234: LD_EXP 55
4238: PPUSH
4239: CALL_OW 64
// end ;
4243: END
// every 12 12$00 trigger ar_active_attack and GetBType ( HexInfo ( 92 , 40 ) ) = b_siberite_mine do var sci ;
4244: LD_EXP 9
4248: PUSH
4249: LD_INT 92
4251: PPUSH
4252: LD_INT 40
4254: PPUSH
4255: CALL_OW 428
4259: PPUSH
4260: CALL_OW 266
4264: PUSH
4265: LD_INT 30
4267: EQUAL
4268: AND
4269: IFFALSE 4465
4271: GO 4273
4273: DISABLE
4274: LD_INT 0
4276: PPUSH
// begin sci := UnitFilter ( mc_bases [ 1 ] , [ f_class , 4 ] ) ;
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: LD_EXP 57
4286: PUSH
4287: LD_INT 1
4289: ARRAY
4290: PPUSH
4291: LD_INT 25
4293: PUSH
4294: LD_INT 4
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PPUSH
4301: CALL_OW 72
4305: ST_TO_ADDR
// if not sci then
4306: LD_VAR 0 1
4310: NOT
4311: IFFALSE 4315
// exit ;
4313: GO 4465
// mc_bases := Replace ( mc_bases , 1 , mc_bases [ 1 ] diff sci [ 1 ] ) ;
4315: LD_ADDR_EXP 57
4319: PUSH
4320: LD_EXP 57
4324: PPUSH
4325: LD_INT 1
4327: PPUSH
4328: LD_EXP 57
4332: PUSH
4333: LD_INT 1
4335: ARRAY
4336: PUSH
4337: LD_VAR 0 1
4341: PUSH
4342: LD_INT 1
4344: ARRAY
4345: DIFF
4346: PPUSH
4347: CALL_OW 1
4351: ST_TO_ADDR
// if IsInUnit ( sci [ 1 ] ) then
4352: LD_VAR 0 1
4356: PUSH
4357: LD_INT 1
4359: ARRAY
4360: PPUSH
4361: CALL_OW 310
4365: IFFALSE 4380
// ComExitBuilding ( sci [ 1 ] ) ;
4367: LD_VAR 0 1
4371: PUSH
4372: LD_INT 1
4374: ARRAY
4375: PPUSH
4376: CALL_OW 122
// if DangerAtRangeXY ( 2 , 105 , 14 , 20 ) [ 4 ] < 10 then
4380: LD_INT 2
4382: PPUSH
4383: LD_INT 105
4385: PPUSH
4386: LD_INT 14
4388: PPUSH
4389: LD_INT 20
4391: PPUSH
4392: CALL 19516 0 4
4396: PUSH
4397: LD_INT 4
4399: ARRAY
4400: PUSH
4401: LD_INT 10
4403: LESS
4404: IFFALSE 4427
// AddComMoveXY ( sci [ 1 ] , 105 , 14 ) else
4406: LD_VAR 0 1
4410: PUSH
4411: LD_INT 1
4413: ARRAY
4414: PPUSH
4415: LD_INT 105
4417: PPUSH
4418: LD_INT 14
4420: PPUSH
4421: CALL_OW 171
4425: GO 4446
// AddComMoveXY ( sci [ 1 ] , 118 , 77 ) ;
4427: LD_VAR 0 1
4431: PUSH
4432: LD_INT 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 118
4438: PPUSH
4439: LD_INT 77
4441: PPUSH
4442: CALL_OW 171
// AddComContaminate ( sci [ 1 ] , 92 , 40 ) ;
4446: LD_VAR 0 1
4450: PUSH
4451: LD_INT 1
4453: ARRAY
4454: PPUSH
4455: LD_INT 92
4457: PPUSH
4458: LD_INT 40
4460: PPUSH
4461: CALL_OW 218
// end ;
4465: PPOPN 1
4467: END
// every 8 8$00 trigger IsOk ( ar_depot ) and ar_active_attack do var i , base , tmp , flags , _target , attackers ;
4468: LD_INT 1
4470: PPUSH
4471: CALL_OW 302
4475: PUSH
4476: LD_EXP 9
4480: AND
4481: IFFALSE 4932
4483: GO 4485
4485: DISABLE
4486: LD_INT 0
4488: PPUSH
4489: PPUSH
4490: PPUSH
4491: PPUSH
4492: PPUSH
4493: PPUSH
// begin enable ;
4494: ENABLE
// base := 1 ;
4495: LD_ADDR_VAR 0 2
4499: PUSH
4500: LD_INT 1
4502: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
4503: LD_ADDR_VAR 0 4
4507: PUSH
4508: LD_INT 0
4510: PUSH
4511: LD_INT 0
4513: PUSH
4514: LD_INT 0
4516: PUSH
4517: LD_INT 0
4519: PUSH
4520: LD_INT 0
4522: PUSH
4523: LD_INT 0
4525: PUSH
4526: LD_INT 0
4528: PUSH
4529: LD_INT 0
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: LD_INT 0
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: ST_TO_ADDR
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , ] ;
4550: LD_ADDR_VAR 0 3
4554: PUSH
4555: LD_INT 13
4557: PUSH
4558: LD_INT 1
4560: PUSH
4561: LD_INT 2
4563: PUSH
4564: LD_INT 26
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 13
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: LD_INT 2
4581: PUSH
4582: LD_INT 27
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: PUSH
4591: LD_INT 13
4593: PUSH
4594: LD_INT 1
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: LD_INT 29
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
4614: LD_ADDR_VAR 0 1
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_OWVAR 67
4628: PUSH
4629: LD_OWVAR 1
4633: PUSH
4634: LD_INT 21000
4636: DIV
4637: PLUS
4638: PUSH
4639: FOR_TO
4640: IFFALSE 4713
// tmp := Insert ( tmp , tmp + 1 , [ ar_medium_trike , engine_combustion , control_remote , [ ar_rocket_launcher , ar_selfpropelled_bomb , ar_gatling_gun , ar_gun ] [ rand ( 1 , 4 ) ] ] ) ;
4642: LD_ADDR_VAR 0 3
4646: PUSH
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_VAR 0 3
4656: PUSH
4657: LD_INT 1
4659: PLUS
4660: PPUSH
4661: LD_INT 13
4663: PUSH
4664: LD_INT 1
4666: PUSH
4667: LD_INT 2
4669: PUSH
4670: LD_INT 28
4672: PUSH
4673: LD_INT 29
4675: PUSH
4676: LD_INT 25
4678: PUSH
4679: LD_INT 27
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: PUSH
4688: LD_INT 1
4690: PPUSH
4691: LD_INT 4
4693: PPUSH
4694: CALL_OW 12
4698: ARRAY
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: PPUSH
4706: CALL_OW 2
4710: ST_TO_ADDR
4711: GO 4639
4713: POP
4714: POP
// MC_SetProduceList ( base , tmp ) ;
4715: LD_VAR 0 2
4719: PPUSH
4720: LD_VAR 0 3
4724: PPUSH
4725: CALL 63219 0 2
// repeat wait ( 0 0$1 ) ;
4729: LD_INT 35
4731: PPUSH
4732: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
4736: LD_VAR 0 2
4740: PPUSH
4741: CALL 63580 0 1
4745: PUSH
4746: LD_INT 0
4748: EQUAL
4749: IFFALSE 4729
// wait ( 0 0$20 ) ;
4751: LD_INT 700
4753: PPUSH
4754: CALL_OW 67
// _target := [ [ 124 , 85 ] , [ 90 , 61 ] , [ 69 , 48 ] , [ 68 , 48 ] ] ;
4758: LD_ADDR_VAR 0 5
4762: PUSH
4763: LD_INT 124
4765: PUSH
4766: LD_INT 85
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: LD_INT 90
4775: PUSH
4776: LD_INT 61
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 69
4785: PUSH
4786: LD_INT 48
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_INT 68
4795: PUSH
4796: LD_INT 48
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , ar_cargo_bay ] ) ) ;
4809: LD_ADDR_VAR 0 6
4813: PUSH
4814: LD_EXP 76
4818: PUSH
4819: LD_VAR 0 2
4823: ARRAY
4824: PUSH
4825: LD_EXP 79
4829: PUSH
4830: LD_VAR 0 2
4834: ARRAY
4835: PUSH
4836: LD_EXP 76
4840: PUSH
4841: LD_VAR 0 2
4845: ARRAY
4846: PPUSH
4847: LD_INT 34
4849: PUSH
4850: LD_INT 32
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 72
4861: UNION
4862: DIFF
4863: ST_TO_ADDR
// if not attackers then
4864: LD_VAR 0 6
4868: NOT
4869: IFFALSE 4873
// exit ;
4871: GO 4932
// ar_attackers := attackers ;
4873: LD_ADDR_EXP 10
4877: PUSH
4878: LD_VAR 0 6
4882: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4883: LD_INT 35
4885: PPUSH
4886: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
4890: LD_VAR 0 6
4894: PPUSH
4895: LD_INT 60
4897: PUSH
4898: EMPTY
4899: LIST
4900: PPUSH
4901: CALL_OW 72
4905: NOT
4906: IFFALSE 4883
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
4908: LD_VAR 0 2
4912: PPUSH
4913: LD_VAR 0 6
4917: PPUSH
4918: LD_VAR 0 5
4922: PPUSH
4923: LD_VAR 0 4
4927: PPUSH
4928: CALL 63465 0 4
// end ;
4932: PPOPN 6
4934: END
// every 12 12$00 trigger IsOk ( ar_depot ) and ar_active_attack and IsInArea ( masha , masha_area ) and MC_GetProduceList ( 1 ) = 0 and not ar_attackers do var i , base , tmp , flags , _target , attackers , un ;
4935: LD_INT 1
4937: PPUSH
4938: CALL_OW 302
4942: PUSH
4943: LD_EXP 9
4947: AND
4948: PUSH
4949: LD_EXP 48
4953: PPUSH
4954: LD_INT 22
4956: PPUSH
4957: CALL_OW 308
4961: AND
4962: PUSH
4963: LD_INT 1
4965: PPUSH
4966: CALL 63580 0 1
4970: PUSH
4971: LD_INT 0
4973: EQUAL
4974: AND
4975: PUSH
4976: LD_EXP 10
4980: NOT
4981: AND
4982: IFFALSE 5457
4984: GO 4986
4986: DISABLE
4987: LD_INT 0
4989: PPUSH
4990: PPUSH
4991: PPUSH
4992: PPUSH
4993: PPUSH
4994: PPUSH
4995: PPUSH
// begin base := 1 ;
4996: LD_ADDR_VAR 0 2
5000: PUSH
5001: LD_INT 1
5003: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
5004: LD_ADDR_VAR 0 4
5008: PUSH
5009: LD_INT 0
5011: PUSH
5012: LD_INT 0
5014: PUSH
5015: LD_INT 0
5017: PUSH
5018: LD_INT 0
5020: PUSH
5021: LD_INT 0
5023: PUSH
5024: LD_INT 0
5026: PUSH
5027: LD_INT 0
5029: PUSH
5030: LD_INT 0
5032: PUSH
5033: LD_INT 1
5035: PUSH
5036: LD_INT 0
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: ST_TO_ADDR
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_hovercraft , engine_solar , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_solar , control_remote , ar_double_machine_gun ] ] ;
5051: LD_ADDR_VAR 0 3
5055: PUSH
5056: LD_INT 13
5058: PUSH
5059: LD_INT 1
5061: PUSH
5062: LD_INT 2
5064: PUSH
5065: LD_INT 28
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: PUSH
5074: LD_INT 13
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: LD_INT 2
5082: PUSH
5083: LD_INT 27
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PUSH
5092: LD_INT 13
5094: PUSH
5095: LD_INT 1
5097: PUSH
5098: LD_INT 2
5100: PUSH
5101: LD_INT 25
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 11
5112: PUSH
5113: LD_INT 2
5115: PUSH
5116: LD_INT 2
5118: PUSH
5119: LD_INT 24
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: PUSH
5128: LD_INT 11
5130: PUSH
5131: LD_INT 2
5133: PUSH
5134: LD_INT 2
5136: PUSH
5137: LD_INT 24
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: ST_TO_ADDR
// MC_SetProduceList ( base , tmp ) ;
5153: LD_VAR 0 2
5157: PPUSH
5158: LD_VAR 0 3
5162: PPUSH
5163: CALL 63219 0 2
// repeat wait ( 0 0$1 ) ;
5167: LD_INT 35
5169: PPUSH
5170: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
5174: LD_VAR 0 2
5178: PPUSH
5179: CALL 63580 0 1
5183: PUSH
5184: LD_INT 0
5186: EQUAL
5187: IFFALSE 5167
// wait ( 0 0$20 ) ;
5189: LD_INT 700
5191: PPUSH
5192: CALL_OW 67
// _target := [ [ 119 , 9 ] ] ;
5196: LD_ADDR_VAR 0 5
5200: PUSH
5201: LD_INT 119
5203: PUSH
5204: LD_INT 9
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: PUSH
5211: EMPTY
5212: LIST
5213: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , ar_cargo_bay ] ) ) ;
5214: LD_ADDR_VAR 0 6
5218: PUSH
5219: LD_EXP 76
5223: PUSH
5224: LD_VAR 0 2
5228: ARRAY
5229: PUSH
5230: LD_EXP 79
5234: PUSH
5235: LD_VAR 0 2
5239: ARRAY
5240: PUSH
5241: LD_EXP 76
5245: PUSH
5246: LD_VAR 0 2
5250: ARRAY
5251: PPUSH
5252: LD_INT 34
5254: PUSH
5255: LD_INT 32
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 72
5266: UNION
5267: DIFF
5268: ST_TO_ADDR
// if not attackers then
5269: LD_VAR 0 6
5273: NOT
5274: IFFALSE 5278
// exit ;
5276: GO 5457
// uc_side := 2 ;
5278: LD_ADDR_OWVAR 20
5282: PUSH
5283: LD_INT 2
5285: ST_TO_ADDR
// uc_nation := 2 ;
5286: LD_ADDR_OWVAR 21
5290: PUSH
5291: LD_INT 2
5293: ST_TO_ADDR
// InitHc ;
5294: CALL_OW 19
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5298: LD_ADDR_VAR 0 1
5302: PUSH
5303: DOUBLE
5304: LD_INT 1
5306: DEC
5307: ST_TO_ADDR
5308: LD_INT 4
5310: PUSH
5311: LD_INT 5
5313: PUSH
5314: LD_INT 6
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_OWVAR 67
5326: ARRAY
5327: PUSH
5328: FOR_TO
5329: IFFALSE 5406
// begin PrepareHuman ( false , [ class_apeman_soldier , class_apeman_kamikaze ] [ rand ( 1 , 2 ) ] , 8 ) ;
5331: LD_INT 0
5333: PPUSH
5334: LD_INT 15
5336: PUSH
5337: LD_INT 17
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: PUSH
5344: LD_INT 1
5346: PPUSH
5347: LD_INT 2
5349: PPUSH
5350: CALL_OW 12
5354: ARRAY
5355: PPUSH
5356: LD_INT 8
5358: PPUSH
5359: CALL_OW 380
// un := CreateHuman ;
5363: LD_ADDR_VAR 0 7
5367: PUSH
5368: CALL_OW 44
5372: ST_TO_ADDR
// PlaceUnitArea ( un , east_spawn , false ) ;
5373: LD_VAR 0 7
5377: PPUSH
5378: LD_INT 23
5380: PPUSH
5381: LD_INT 0
5383: PPUSH
5384: CALL_OW 49
// attackers := attackers union un ;
5388: LD_ADDR_VAR 0 6
5392: PUSH
5393: LD_VAR 0 6
5397: PUSH
5398: LD_VAR 0 7
5402: UNION
5403: ST_TO_ADDR
// end ;
5404: GO 5328
5406: POP
5407: POP
// repeat wait ( 0 0$1 ) ;
5408: LD_INT 35
5410: PPUSH
5411: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
5415: LD_VAR 0 6
5419: PPUSH
5420: LD_INT 60
5422: PUSH
5423: EMPTY
5424: LIST
5425: PPUSH
5426: CALL_OW 72
5430: NOT
5431: IFFALSE 5408
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
5433: LD_VAR 0 2
5437: PPUSH
5438: LD_VAR 0 6
5442: PPUSH
5443: LD_VAR 0 5
5447: PPUSH
5448: LD_VAR 0 4
5452: PPUSH
5453: CALL 63465 0 4
// end ; end_of_file
5457: PPOPN 7
5459: END
// export function Action ; var tmp , i , un ; begin
5460: LD_INT 0
5462: PPUSH
5463: PPUSH
5464: PPUSH
5465: PPUSH
// CenterNowOnXY ( 68 , 39 ) ;
5466: LD_INT 68
5468: PPUSH
5469: LD_INT 39
5471: PPUSH
5472: CALL_OW 86
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
5476: LD_ADDR_VAR 0 2
5480: PUSH
5481: LD_INT 22
5483: PUSH
5484: LD_INT 7
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 69
5495: ST_TO_ADDR
// InGameOn ;
5496: CALL_OW 8
// ComMoveXY ( tmp , 71 , 49 ) ;
5500: LD_VAR 0 2
5504: PPUSH
5505: LD_INT 71
5507: PPUSH
5508: LD_INT 49
5510: PPUSH
5511: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5515: LD_INT 35
5517: PPUSH
5518: CALL_OW 67
// until SeeXY ( 7 , 71 , 51 ) ;
5522: LD_INT 7
5524: PPUSH
5525: LD_INT 71
5527: PPUSH
5528: LD_INT 51
5530: PPUSH
5531: CALL_OW 293
5535: IFFALSE 5515
// DialogueOn ;
5537: CALL_OW 6
// Say ( JMM , D1-JMM-1 ) ;
5541: LD_EXP 14
5545: PPUSH
5546: LD_STRING D1-JMM-1
5548: PPUSH
5549: CALL_OW 88
// if Joan then
5553: LD_EXP 29
5557: IFFALSE 5571
// Say ( Joan , D1-Joan-1 ) ;
5559: LD_EXP 29
5563: PPUSH
5564: LD_STRING D1-Joan-1
5566: PPUSH
5567: CALL_OW 88
// if Lisa then
5571: LD_EXP 16
5575: IFFALSE 5589
// Say ( Lisa , D1-Lisa-1 ) ;
5577: LD_EXP 16
5581: PPUSH
5582: LD_STRING D1-Lisa-1
5584: PPUSH
5585: CALL_OW 88
// if Joan or Lisa then
5589: LD_EXP 29
5593: PUSH
5594: LD_EXP 16
5598: OR
5599: IFFALSE 5613
// Say ( JMM , D1-JMM-2 ) ;
5601: LD_EXP 14
5605: PPUSH
5606: LD_STRING D1-JMM-2
5608: PPUSH
5609: CALL_OW 88
// DialogueOff ;
5613: CALL_OW 7
// InGameOff ;
5617: CALL_OW 9
// PlaceSeeing ( 71 , 50 , 7 , - 30 ) ;
5621: LD_INT 71
5623: PPUSH
5624: LD_INT 50
5626: PPUSH
5627: LD_INT 7
5629: PPUSH
5630: LD_INT 30
5632: NEG
5633: PPUSH
5634: CALL_OW 330
// RemoveSeeing ( 71 , 50 , 7 ) ;
5638: LD_INT 71
5640: PPUSH
5641: LD_INT 50
5643: PPUSH
5644: LD_INT 7
5646: PPUSH
5647: CALL_OW 331
// ChangeMissionObjectives ( M1 ) ;
5651: LD_STRING M1
5653: PPUSH
5654: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5658: LD_INT 35
5660: PPUSH
5661: CALL_OW 67
// until freedom ;
5665: LD_EXP 3
5669: IFFALSE 5658
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
5671: LD_INT 350
5673: PPUSH
5674: LD_INT 700
5676: PPUSH
5677: CALL_OW 12
5681: PPUSH
5682: CALL_OW 67
// PrepareGossudarov ;
5686: CALL 1680 0 0
// repeat wait ( 0 0$1 ) ;
5690: LD_INT 35
5692: PPUSH
5693: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5697: LD_INT 22
5699: PUSH
5700: LD_INT 6
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: LD_INT 3
5709: PUSH
5710: LD_INT 24
5712: PUSH
5713: LD_INT 1000
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PUSH
5720: EMPTY
5721: LIST
5722: LIST
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PPUSH
5728: CALL_OW 69
5732: IFFALSE 5690
// tmp := FilterAllUnits ( [ f_side , 6 ] ) ;
5734: LD_ADDR_VAR 0 2
5738: PUSH
5739: LD_INT 22
5741: PUSH
5742: LD_INT 6
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PPUSH
5749: CALL_OW 69
5753: ST_TO_ADDR
// for i in tmp do
5754: LD_ADDR_VAR 0 3
5758: PUSH
5759: LD_VAR 0 2
5763: PUSH
5764: FOR_IN
5765: IFFALSE 5781
// SetSide ( i , 7 ) ;
5767: LD_VAR 0 3
5771: PPUSH
5772: LD_INT 7
5774: PPUSH
5775: CALL_OW 235
5779: GO 5764
5781: POP
5782: POP
// DialogueOn ;
5783: CALL_OW 6
// ComTurnUnit ( [ JMM , Roth ] , Gossudarov ) ;
5787: LD_EXP 14
5791: PUSH
5792: LD_EXP 15
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PPUSH
5801: LD_EXP 31
5805: PPUSH
5806: CALL_OW 119
// CenterNowOnUnits ( Gossudarov ) ;
5810: LD_EXP 31
5814: PPUSH
5815: CALL_OW 87
// if not Roth then
5819: LD_EXP 15
5823: NOT
5824: IFFALSE 5888
// begin Say ( JMM , D2-JMM-1 ) ;
5826: LD_EXP 14
5830: PPUSH
5831: LD_STRING D2-JMM-1
5833: PPUSH
5834: CALL_OW 88
// Say ( JMM , D2-JMM-1b ) ;
5838: LD_EXP 14
5842: PPUSH
5843: LD_STRING D2-JMM-1b
5845: PPUSH
5846: CALL_OW 88
// Say ( Gossudarov , D2-Gos-1 ) ;
5850: LD_EXP 31
5854: PPUSH
5855: LD_STRING D2-Gos-1
5857: PPUSH
5858: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
5862: LD_EXP 14
5866: PPUSH
5867: LD_STRING D2-JMM-2
5869: PPUSH
5870: CALL_OW 88
// Say ( Gossudarov , D2-Gos-2 ) ;
5874: LD_EXP 31
5878: PPUSH
5879: LD_STRING D2-Gos-2
5881: PPUSH
5882: CALL_OW 88
// end else
5886: GO 5984
// begin Say ( Roth , D2-Roth-2 ) ;
5888: LD_EXP 15
5892: PPUSH
5893: LD_STRING D2-Roth-2
5895: PPUSH
5896: CALL_OW 88
// Say ( JMM , D2-JMM-1a ) ;
5900: LD_EXP 14
5904: PPUSH
5905: LD_STRING D2-JMM-1a
5907: PPUSH
5908: CALL_OW 88
// Say ( Roth , D2-Roth-2a ) ;
5912: LD_EXP 15
5916: PPUSH
5917: LD_STRING D2-Roth-2a
5919: PPUSH
5920: CALL_OW 88
// Say ( Roth , D2-Roth-2b ) ;
5924: LD_EXP 15
5928: PPUSH
5929: LD_STRING D2-Roth-2b
5931: PPUSH
5932: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
5936: LD_EXP 14
5940: PPUSH
5941: LD_STRING D2-JMM-3
5943: PPUSH
5944: CALL_OW 88
// Say ( Gossudarov , D2-Gos-3 ) ;
5948: LD_EXP 31
5952: PPUSH
5953: LD_STRING D2-Gos-3
5955: PPUSH
5956: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
5960: LD_EXP 14
5964: PPUSH
5965: LD_STRING D2-JMM-4
5967: PPUSH
5968: CALL_OW 88
// Say ( Gossudarov , D2-Gos-4 ) ;
5972: LD_EXP 31
5976: PPUSH
5977: LD_STRING D2-Gos-4
5979: PPUSH
5980: CALL_OW 88
// end ; Say ( JMM , D2-JMM-5 ) ;
5984: LD_EXP 14
5988: PPUSH
5989: LD_STRING D2-JMM-5
5991: PPUSH
5992: CALL_OW 88
// Say ( Gossudarov , D2-Gos-5 ) ;
5996: LD_EXP 31
6000: PPUSH
6001: LD_STRING D2-Gos-5
6003: PPUSH
6004: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
6008: LD_EXP 14
6012: PPUSH
6013: LD_STRING D2-JMM-6
6015: PPUSH
6016: CALL_OW 88
// DialogueOff ;
6020: CALL_OW 7
// wait ( 0 0$2 ) ;
6024: LD_INT 70
6026: PPUSH
6027: CALL_OW 67
// if Kirilenkova then
6031: LD_EXP 32
6035: IFFALSE 6049
// Say ( Kirilenkova , D3-Kir-1 ) ;
6037: LD_EXP 32
6041: PPUSH
6042: LD_STRING D3-Kir-1
6044: PPUSH
6045: CALL_OW 88
// gossudarov_arrive := true ;
6049: LD_ADDR_EXP 4
6053: PUSH
6054: LD_INT 1
6056: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6057: LD_INT 35
6059: PPUSH
6060: CALL_OW 67
// until ru_lab_builded ;
6064: LD_EXP 5
6068: IFFALSE 6057
// if Kirilenkova then
6070: LD_EXP 32
6074: IFFALSE 6090
// Say ( Kirilenkova , D3a-Kir-1 ) else
6076: LD_EXP 32
6080: PPUSH
6081: LD_STRING D3a-Kir-1
6083: PPUSH
6084: CALL_OW 88
6088: GO 6112
// begin un := SciRu ;
6090: LD_ADDR_VAR 0 4
6094: PUSH
6095: CALL 10610 0 0
6099: ST_TO_ADDR
// Say ( un , D3a-Sci1-1 ) ;
6100: LD_VAR 0 4
6104: PPUSH
6105: LD_STRING D3a-Sci1-1
6107: PPUSH
6108: CALL_OW 88
// end ; if Kirilenkova or un then
6112: LD_EXP 32
6116: PUSH
6117: LD_VAR 0 4
6121: OR
6122: IFFALSE 6136
// Say ( JMM , D3a-JMM-1 ) ;
6124: LD_EXP 14
6128: PPUSH
6129: LD_STRING D3a-JMM-1
6131: PPUSH
6132: CALL_OW 88
// end ;
6136: LD_VAR 0 1
6140: RET
// every 0 0$1 trigger gossudarov_arrive and FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) < 6 do
6141: LD_EXP 4
6145: PUSH
6146: LD_INT 22
6148: PUSH
6149: LD_INT 7
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: PUSH
6156: LD_INT 2
6158: PUSH
6159: LD_INT 25
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 2
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 25
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 25
6191: PUSH
6192: LD_INT 4
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 5
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 25
6211: PUSH
6212: LD_INT 8
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 25
6221: PUSH
6222: LD_INT 9
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PPUSH
6243: CALL_OW 69
6247: PUSH
6248: LD_INT 6
6250: LESS
6251: AND
6252: IFFALSE 6264
6254: GO 6256
6256: DISABLE
// YouLost ( TooMany ) ;
6257: LD_STRING TooMany
6259: PPUSH
6260: CALL_OW 104
6264: END
// every 0 0$40 trigger GetSide ( Gossudarov ) = 7 do var i , tmp , un ;
6265: LD_EXP 31
6269: PPUSH
6270: CALL_OW 255
6274: PUSH
6275: LD_INT 7
6277: EQUAL
6278: IFFALSE 6478
6280: GO 6282
6282: DISABLE
6283: LD_INT 0
6285: PPUSH
6286: PPUSH
6287: PPUSH
// begin uc_side := 3 ;
6288: LD_ADDR_OWVAR 20
6292: PUSH
6293: LD_INT 3
6295: ST_TO_ADDR
// uc_nation := 3 ;
6296: LD_ADDR_OWVAR 21
6300: PUSH
6301: LD_INT 3
6303: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_heavy_machine_gun , 100 ) ;
6304: LD_INT 21
6306: PPUSH
6307: LD_INT 3
6309: PPUSH
6310: LD_INT 3
6312: PPUSH
6313: LD_INT 42
6315: PPUSH
6316: LD_INT 100
6318: PPUSH
6319: CALL 18465 0 5
// un := CreateVehicle ;
6323: LD_ADDR_VAR 0 3
6327: PUSH
6328: CALL_OW 45
6332: ST_TO_ADDR
// PlaceUnitArea ( un , south_west_spawn , false ) ;
6333: LD_VAR 0 3
6337: PPUSH
6338: LD_INT 15
6340: PPUSH
6341: LD_INT 0
6343: PPUSH
6344: CALL_OW 49
// ComMoveXY ( un , 67 , 45 ) ;
6348: LD_VAR 0 3
6352: PPUSH
6353: LD_INT 67
6355: PPUSH
6356: LD_INT 45
6358: PPUSH
6359: CALL_OW 111
// AddComWait ( un , 0 0$2 ) ;
6363: LD_VAR 0 3
6367: PPUSH
6368: LD_INT 70
6370: PPUSH
6371: CALL_OW 202
// AddComMoveXY ( un , 69 , 18 ) ;
6375: LD_VAR 0 3
6379: PPUSH
6380: LD_INT 69
6382: PPUSH
6383: LD_INT 18
6385: PPUSH
6386: CALL_OW 171
// AddComMoveXY ( un , 60 , 2 ) ;
6390: LD_VAR 0 3
6394: PPUSH
6395: LD_INT 60
6397: PPUSH
6398: LD_INT 2
6400: PPUSH
6401: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6405: LD_INT 35
6407: PPUSH
6408: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , north_spawn ) ;
6412: LD_VAR 0 3
6416: PPUSH
6417: CALL_OW 302
6421: NOT
6422: PUSH
6423: LD_VAR 0 3
6427: PPUSH
6428: LD_INT 17
6430: PPUSH
6431: CALL_OW 308
6435: OR
6436: IFFALSE 6405
// if IsInArea ( un , north_spawn ) or IsAt ( un , 60 , 2 ) then
6438: LD_VAR 0 3
6442: PPUSH
6443: LD_INT 17
6445: PPUSH
6446: CALL_OW 308
6450: PUSH
6451: LD_VAR 0 3
6455: PPUSH
6456: LD_INT 60
6458: PPUSH
6459: LD_INT 2
6461: PPUSH
6462: CALL_OW 307
6466: OR
6467: IFFALSE 6478
// RemoveUnit ( un ) ;
6469: LD_VAR 0 3
6473: PPUSH
6474: CALL_OW 64
// end ;
6478: PPOPN 3
6480: END
// every 0 0$2 do var i , un , tmp ;
6481: GO 6483
6483: DISABLE
6484: LD_INT 0
6486: PPUSH
6487: PPUSH
6488: PPUSH
// begin repeat wait ( 0 0$2 ) ;
6489: LD_INT 70
6491: PPUSH
6492: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 3 ] ] ) ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: LD_INT 22
6503: PUSH
6504: LD_INT 7
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: LD_INT 101
6513: PUSH
6514: LD_INT 3
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 69
6529: ST_TO_ADDR
// until tmp ;
6530: LD_VAR 0 3
6534: IFFALSE 6489
// un := NearestUnitToUnit ( tmp , JMM ) ;
6536: LD_ADDR_VAR 0 2
6540: PUSH
6541: LD_VAR 0 3
6545: PPUSH
6546: LD_EXP 14
6550: PPUSH
6551: CALL_OW 74
6555: ST_TO_ADDR
// player_spotted := true ;
6556: LD_ADDR_EXP 6
6560: PUSH
6561: LD_INT 1
6563: ST_TO_ADDR
// tmp := SciRu ;
6564: LD_ADDR_VAR 0 3
6568: PUSH
6569: CALL 10610 0 0
6573: ST_TO_ADDR
// DialogueOn ;
6574: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 7 , - 8 ) ;
6578: LD_VAR 0 2
6582: PPUSH
6583: CALL_OW 250
6587: PPUSH
6588: LD_VAR 0 2
6592: PPUSH
6593: CALL_OW 251
6597: PPUSH
6598: LD_INT 7
6600: PPUSH
6601: LD_INT 8
6603: NEG
6604: PPUSH
6605: CALL_OW 330
// CenterNowOnUnits ( un ) ;
6609: LD_VAR 0 2
6613: PPUSH
6614: CALL_OW 87
// if tmp then
6618: LD_VAR 0 3
6622: IFFALSE 6636
// Say ( tmp , D4-RSci1-1 ) ;
6624: LD_VAR 0 3
6628: PPUSH
6629: LD_STRING D4-RSci1-1
6631: PPUSH
6632: CALL_OW 88
// if Gossudarov then
6636: LD_EXP 31
6640: IFFALSE 6666
// begin Say ( Gossudarov , D4-Gos-1 ) ;
6642: LD_EXP 31
6646: PPUSH
6647: LD_STRING D4-Gos-1
6649: PPUSH
6650: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6654: LD_EXP 14
6658: PPUSH
6659: LD_STRING D4-JMM-1
6661: PPUSH
6662: CALL_OW 88
// end ; RemoveSeeing ( GetX ( un ) , GetY ( un ) , 7 ) ;
6666: LD_VAR 0 2
6670: PPUSH
6671: CALL_OW 250
6675: PPUSH
6676: LD_VAR 0 2
6680: PPUSH
6681: CALL_OW 251
6685: PPUSH
6686: LD_INT 7
6688: PPUSH
6689: CALL_OW 331
// DialogueOff ;
6693: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
6697: LD_STRING M5
6699: PPUSH
6700: CALL_OW 337
// end ;
6704: PPOPN 3
6706: END
// every 0 0$30 + 2 2$30 trigger player_spotted do
6707: LD_EXP 6
6711: IFFALSE 7170
6713: GO 6715
6715: DISABLE
// begin PrepareBelkov ;
6716: CALL 1930 0 0
// ComMoveXY ( Belkov , 118 , 106 ) ;
6720: LD_EXP 46
6724: PPUSH
6725: LD_INT 118
6727: PPUSH
6728: LD_INT 106
6730: PPUSH
6731: CALL_OW 111
// AddComHold ( Belkov ) ;
6735: LD_EXP 46
6739: PPUSH
6740: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
6744: LD_INT 35
6746: PPUSH
6747: CALL_OW 67
// until IsAt ( Belkov , 118 , 106 ) ;
6751: LD_EXP 46
6755: PPUSH
6756: LD_INT 118
6758: PPUSH
6759: LD_INT 106
6761: PPUSH
6762: CALL_OW 307
6766: IFFALSE 6744
// ChangeSideFog ( 4 , 7 ) ;
6768: LD_INT 4
6770: PPUSH
6771: LD_INT 7
6773: PPUSH
6774: CALL_OW 343
// if IsOk ( Belkov ) then
6778: LD_EXP 46
6782: PPUSH
6783: CALL_OW 302
6787: IFFALSE 6871
// begin InGameOn ;
6789: CALL_OW 8
// DialogueOn ;
6793: CALL_OW 6
// SayRadio ( Belkov , D5-Bel-1 ) ;
6797: LD_EXP 46
6801: PPUSH
6802: LD_STRING D5-Bel-1
6804: PPUSH
6805: CALL_OW 94
// if Gossudarov then
6809: LD_EXP 31
6813: IFFALSE 6863
// begin Say ( Gossudarov , D5-Gos-1 ) ;
6815: LD_EXP 31
6819: PPUSH
6820: LD_STRING D5-Gos-1
6822: PPUSH
6823: CALL_OW 88
// Say ( JMM , D5-JMM-1 ) ;
6827: LD_EXP 14
6831: PPUSH
6832: LD_STRING D5-JMM-1
6834: PPUSH
6835: CALL_OW 88
// Say ( Gossudarov , D5-Gos-2 ) ;
6839: LD_EXP 31
6843: PPUSH
6844: LD_STRING D5-Gos-2
6846: PPUSH
6847: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
6851: LD_EXP 14
6855: PPUSH
6856: LD_STRING D5-JMM-2
6858: PPUSH
6859: CALL_OW 88
// end ; DialogueOff ;
6863: CALL_OW 7
// InGameOff ;
6867: CALL_OW 9
// end ; case Query ( QSaveBelkov ) of 1 :
6871: LD_STRING QSaveBelkov
6873: PPUSH
6874: CALL_OW 97
6878: PUSH
6879: LD_INT 1
6881: DOUBLE
6882: EQUAL
6883: IFTRUE 6887
6885: GO 6937
6887: POP
// begin DialogueOn ;
6888: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
6892: LD_EXP 14
6896: PPUSH
6897: LD_STRING D5a-JMM-1
6899: PPUSH
6900: CALL_OW 88
// SayRadio ( Belkov , D5a-Bel-1 ) ;
6904: LD_EXP 46
6908: PPUSH
6909: LD_STRING D5a-Bel-1
6911: PPUSH
6912: CALL_OW 94
// DialogueOff ;
6916: CALL_OW 7
// ComMoveXY ( Belkov , 83 , 49 ) ;
6920: LD_EXP 46
6924: PPUSH
6925: LD_INT 83
6927: PPUSH
6928: LD_INT 49
6930: PPUSH
6931: CALL_OW 111
// end ; 2 :
6935: GO 6997
6937: LD_INT 2
6939: DOUBLE
6940: EQUAL
6941: IFTRUE 6945
6943: GO 6996
6945: POP
// begin Say ( JMM , D5a-JMM-2 ) ;
6946: LD_EXP 14
6950: PPUSH
6951: LD_STRING D5a-JMM-2
6953: PPUSH
6954: CALL_OW 88
// ComWait ( Belkov , 0 0$10 ) ;
6958: LD_EXP 46
6962: PPUSH
6963: LD_INT 350
6965: PPUSH
6966: CALL_OW 142
// AddComMoveXY ( Belkov , 107 , 109 ) ;
6970: LD_EXP 46
6974: PPUSH
6975: LD_INT 107
6977: PPUSH
6978: LD_INT 109
6980: PPUSH
6981: CALL_OW 171
// AddComHold ( Belkov ) ;
6985: LD_EXP 46
6989: PPUSH
6990: CALL_OW 200
// end ; end ;
6994: GO 6997
6996: POP
// repeat wait ( 0 0$1 ) ;
6997: LD_INT 35
6999: PPUSH
7000: CALL_OW 67
// until ( IsDead ( Belkov ) and GetSide ( Belkov ) = 4 ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Belkov ) , Belkov ) < 10 ;
7004: LD_EXP 46
7008: PPUSH
7009: CALL_OW 301
7013: PUSH
7014: LD_EXP 46
7018: PPUSH
7019: CALL_OW 255
7023: PUSH
7024: LD_INT 4
7026: EQUAL
7027: AND
7028: PUSH
7029: LD_INT 22
7031: PUSH
7032: LD_INT 7
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL_OW 69
7043: PPUSH
7044: LD_EXP 46
7048: PPUSH
7049: CALL_OW 74
7053: PPUSH
7054: LD_EXP 46
7058: PPUSH
7059: CALL_OW 296
7063: PUSH
7064: LD_INT 10
7066: LESS
7067: OR
7068: IFFALSE 6997
// if IsDead ( Belkov ) then
7070: LD_EXP 46
7074: PPUSH
7075: CALL_OW 301
7079: IFFALSE 7104
// begin CenterNowOnUnits ( Belkov ) ;
7081: LD_EXP 46
7085: PPUSH
7086: CALL_OW 87
// Say ( JMM , D5a-JMM-2a ) ;
7090: LD_EXP 14
7094: PPUSH
7095: LD_STRING D5a-JMM-2a
7097: PPUSH
7098: CALL_OW 88
// exit ;
7102: GO 7170
// end ; if See ( 7 , Belkov ) then
7104: LD_INT 7
7106: PPUSH
7107: LD_EXP 46
7111: PPUSH
7112: CALL_OW 292
7116: IFFALSE 7130
// SetSide ( Belkov , 7 ) ;
7118: LD_EXP 46
7122: PPUSH
7123: LD_INT 7
7125: PPUSH
7126: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7130: LD_INT 35
7132: PPUSH
7133: CALL_OW 67
// until GetDistUnitXY ( Belkov , 66 , 45 ) < 30 ;
7137: LD_EXP 46
7141: PPUSH
7142: LD_INT 66
7144: PPUSH
7145: LD_INT 45
7147: PPUSH
7148: CALL_OW 297
7152: PUSH
7153: LD_INT 30
7155: LESS
7156: IFFALSE 7130
// Say ( Belkov , D6-Bel-1 ) ;
7158: LD_EXP 46
7162: PPUSH
7163: LD_STRING D6-Bel-1
7165: PPUSH
7166: CALL_OW 88
// end ;
7170: END
// every 0 0$1 trigger IsOk ( Belkov ) and UnitShoot ( Belkov ) in FilterAllUnits ( [ f_or , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ) do
7171: LD_EXP 46
7175: PPUSH
7176: CALL_OW 302
7180: PUSH
7181: LD_EXP 46
7185: PPUSH
7186: CALL_OW 504
7190: PUSH
7191: LD_INT 2
7193: PUSH
7194: LD_INT 34
7196: PUSH
7197: LD_INT 47
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: LD_INT 34
7206: PUSH
7207: LD_INT 45
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: LIST
7218: PPUSH
7219: CALL_OW 69
7223: IN
7224: AND
7225: IFFALSE 7242
7227: GO 7229
7229: DISABLE
// Say ( Belkov , D7-Bel-1 ) ;
7230: LD_EXP 46
7234: PPUSH
7235: LD_STRING D7-Bel-1
7237: PPUSH
7238: CALL_OW 88
7242: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 2 ] ] ) and not ar_base_spotted and not IsPlaced ( Burlak ) do var tmp ;
7243: LD_INT 22
7245: PUSH
7246: LD_INT 7
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 101
7255: PUSH
7256: LD_INT 2
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PPUSH
7267: CALL_OW 69
7271: PUSH
7272: LD_EXP 8
7276: NOT
7277: AND
7278: PUSH
7279: LD_EXP 45
7283: PPUSH
7284: CALL_OW 305
7288: NOT
7289: AND
7290: IFFALSE 7760
7292: GO 7294
7294: DISABLE
7295: LD_INT 0
7297: PPUSH
// begin ar_base_spotted := true ;
7298: LD_ADDR_EXP 8
7302: PUSH
7303: LD_INT 1
7305: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) ;
7306: LD_ADDR_VAR 0 1
7310: PUSH
7311: LD_INT 22
7313: PUSH
7314: LD_INT 2
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: PUSH
7321: LD_INT 21
7323: PUSH
7324: LD_INT 3
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PPUSH
7335: CALL_OW 69
7339: ST_TO_ADDR
// tmp := NearestUnitToUnit ( tmp , JMM ) ;
7340: LD_ADDR_VAR 0 1
7344: PUSH
7345: LD_VAR 0 1
7349: PPUSH
7350: LD_EXP 14
7354: PPUSH
7355: CALL_OW 74
7359: ST_TO_ADDR
// RevealFogArea ( 7 , area_base_arabian ) ;
7360: LD_INT 7
7362: PPUSH
7363: LD_INT 3
7365: PPUSH
7366: CALL_OW 332
// DialogueOn ;
7370: CALL_OW 6
// CenterNowOnXY ( GetX ( tmp ) , GetY ( tmp ) ) ;
7374: LD_VAR 0 1
7378: PPUSH
7379: CALL_OW 250
7383: PPUSH
7384: LD_VAR 0 1
7388: PPUSH
7389: CALL_OW 251
7393: PPUSH
7394: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Frank , Roth , Cornel , Denis , Gladstone ] ;
7398: LD_ADDR_VAR 0 1
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_INT 7
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 23
7415: PUSH
7416: LD_INT 1
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: LD_INT 26
7425: PUSH
7426: LD_INT 1
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: LIST
7437: PPUSH
7438: CALL_OW 69
7442: PUSH
7443: LD_EXP 14
7447: PUSH
7448: LD_EXP 18
7452: PUSH
7453: LD_EXP 19
7457: PUSH
7458: LD_EXP 26
7462: PUSH
7463: LD_EXP 15
7467: PUSH
7468: LD_EXP 24
7472: PUSH
7473: LD_EXP 20
7477: PUSH
7478: LD_EXP 22
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: DIFF
7493: ST_TO_ADDR
// if not tmp then
7494: LD_VAR 0 1
7498: NOT
7499: IFFALSE 7573
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_female ] ] ) diff [ Joan , Lisa , Kikuchi , Simms ] ;
7501: LD_ADDR_VAR 0 1
7505: PUSH
7506: LD_INT 22
7508: PUSH
7509: LD_INT 7
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 23
7518: PUSH
7519: LD_INT 1
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: LD_INT 26
7528: PUSH
7529: LD_INT 2
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: LIST
7540: PPUSH
7541: CALL_OW 69
7545: PUSH
7546: LD_EXP 29
7550: PUSH
7551: LD_EXP 16
7555: PUSH
7556: LD_EXP 27
7560: PUSH
7561: LD_EXP 28
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: DIFF
7572: ST_TO_ADDR
// if tmp then
7573: LD_VAR 0 1
7577: IFFALSE 7648
// case GetSex ( tmp [ 1 ] ) of sex_male :
7579: LD_VAR 0 1
7583: PUSH
7584: LD_INT 1
7586: ARRAY
7587: PPUSH
7588: CALL_OW 258
7592: PUSH
7593: LD_INT 1
7595: DOUBLE
7596: EQUAL
7597: IFTRUE 7601
7599: GO 7620
7601: POP
// Say ( tmp [ 1 ] , D9-Sol1-1 ) ; sex_female :
7602: LD_VAR 0 1
7606: PUSH
7607: LD_INT 1
7609: ARRAY
7610: PPUSH
7611: LD_STRING D9-Sol1-1
7613: PPUSH
7614: CALL_OW 88
7618: GO 7648
7620: LD_INT 2
7622: DOUBLE
7623: EQUAL
7624: IFTRUE 7628
7626: GO 7647
7628: POP
// Say ( tmp [ 1 ] , D9-FSol1-1 ) ; end ;
7629: LD_VAR 0 1
7633: PUSH
7634: LD_INT 1
7636: ARRAY
7637: PPUSH
7638: LD_STRING D9-FSol1-1
7640: PPUSH
7641: CALL_OW 88
7645: GO 7648
7647: POP
// if Frank then
7648: LD_EXP 26
7652: IFFALSE 7756
// begin PlaceSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 , 8 ) ;
7654: LD_EXP 55
7658: PPUSH
7659: CALL_OW 250
7663: PPUSH
7664: LD_EXP 55
7668: PPUSH
7669: CALL_OW 251
7673: PPUSH
7674: LD_INT 7
7676: PPUSH
7677: LD_INT 8
7679: PPUSH
7680: CALL_OW 330
// CenterNowOnUnits ( mastodont ) ;
7684: LD_EXP 55
7688: PPUSH
7689: CALL_OW 87
// Say ( Frank , D9-Frank-1 ) ;
7693: LD_EXP 26
7697: PPUSH
7698: LD_STRING D9-Frank-1
7700: PPUSH
7701: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
7705: LD_EXP 14
7709: PPUSH
7710: LD_STRING D9-JMM-1
7712: PPUSH
7713: CALL_OW 88
// Say ( Frank , D9-Frank-2 ) ;
7717: LD_EXP 26
7721: PPUSH
7722: LD_STRING D9-Frank-2
7724: PPUSH
7725: CALL_OW 88
// RemoveSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 ) ;
7729: LD_EXP 55
7733: PPUSH
7734: CALL_OW 250
7738: PPUSH
7739: LD_EXP 55
7743: PPUSH
7744: CALL_OW 251
7748: PPUSH
7749: LD_INT 7
7751: PPUSH
7752: CALL_OW 331
// end ; DialogueOff ;
7756: CALL_OW 7
// end ;
7760: PPOPN 1
7762: END
// every 0 0$20 trigger first_attack do var i , selected_option ;
7763: LD_EXP 7
7767: IFFALSE 8794
7769: GO 7771
7771: DISABLE
7772: LD_INT 0
7774: PPUSH
7775: PPUSH
// begin selected_option := 1 ;
7776: LD_ADDR_VAR 0 2
7780: PUSH
7781: LD_INT 1
7783: ST_TO_ADDR
// wait ( 5 5$00 ) ;
7784: LD_INT 10500
7786: PPUSH
7787: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7791: LD_INT 35
7793: PPUSH
7794: CALL_OW 67
// until not ru_attackers ;
7798: LD_EXP 51
7802: NOT
7803: IFFALSE 7791
// PrepareBurlak ;
7805: CALL 2042 0 0
// repeat wait ( 0 0$2 ) ;
7809: LD_INT 70
7811: PPUSH
7812: CALL_OW 67
// until not HasTask ( Burlak ) ;
7816: LD_EXP 45
7820: PPUSH
7821: CALL_OW 314
7825: NOT
7826: IFFALSE 7809
// InGameOn ;
7828: CALL_OW 8
// DialogueOn ;
7832: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
7836: LD_EXP 48
7840: PPUSH
7841: CALL_OW 87
// SayRadio ( Burlak , D10-Bur-1 ) ;
7845: LD_EXP 45
7849: PPUSH
7850: LD_STRING D10-Bur-1
7852: PPUSH
7853: CALL_OW 94
// if Belkov and GetSide ( Belkov ) = 7 then
7857: LD_EXP 46
7861: PUSH
7862: LD_EXP 46
7866: PPUSH
7867: CALL_OW 255
7871: PUSH
7872: LD_INT 7
7874: EQUAL
7875: AND
7876: IFFALSE 7890
// Say ( Belkov , D10-Bel-1 ) ;
7878: LD_EXP 46
7882: PPUSH
7883: LD_STRING D10-Bel-1
7885: PPUSH
7886: CALL_OW 88
// if Gossudarov then
7890: LD_EXP 31
7894: IFFALSE 7908
// Say ( Gossudarov , D10-Gos-1 ) ;
7896: LD_EXP 31
7900: PPUSH
7901: LD_STRING D10-Gos-1
7903: PPUSH
7904: CALL_OW 88
// if Kirilenkova then
7908: LD_EXP 32
7912: IFFALSE 7926
// Say ( Kirilenkova , D10-Kir-1 ) ;
7914: LD_EXP 32
7918: PPUSH
7919: LD_STRING D10-Kir-1
7921: PPUSH
7922: CALL_OW 88
// Say ( SolRu , D10-RSol1-1 ) ;
7926: CALL 10739 0 0
7930: PPUSH
7931: LD_STRING D10-RSol1-1
7933: PPUSH
7934: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-2 ) ;
7938: LD_EXP 45
7942: PPUSH
7943: LD_STRING D10-Bur-2
7945: PPUSH
7946: CALL_OW 94
// Say ( JMM , D10-JMM-2 ) ;
7950: LD_EXP 14
7954: PPUSH
7955: LD_STRING D10-JMM-2
7957: PPUSH
7958: CALL_OW 88
// if Kirilenkova then
7962: LD_EXP 32
7966: IFFALSE 7982
// Say ( Kirilenkova , D10-Kir-2 ) else
7968: LD_EXP 32
7972: PPUSH
7973: LD_STRING D10-Kir-2
7975: PPUSH
7976: CALL_OW 88
7980: GO 7994
// Say ( SolRu , D10-RSol1-2 ) ;
7982: CALL 10739 0 0
7986: PPUSH
7987: LD_STRING D10-RSol1-2
7989: PPUSH
7990: CALL_OW 88
// Say ( JMM , D10-JMM-3 ) ;
7994: LD_EXP 14
7998: PPUSH
7999: LD_STRING D10-JMM-3
8001: PPUSH
8002: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-3 ) ;
8006: LD_EXP 45
8010: PPUSH
8011: LD_STRING D10-Bur-3
8013: PPUSH
8014: CALL_OW 94
// Say ( JMM , D10-JMM-4 ) ;
8018: LD_EXP 14
8022: PPUSH
8023: LD_STRING D10-JMM-4
8025: PPUSH
8026: CALL_OW 88
// DialogueOff ;
8030: CALL_OW 7
// InGameOff ;
8034: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
8038: LD_STRING M2
8040: PPUSH
8041: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
8045: LD_INT 35
8047: PPUSH
8048: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , Burlak , 8 ] ] ) ;
8052: LD_INT 22
8054: PUSH
8055: LD_INT 7
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 91
8064: PUSH
8065: LD_EXP 45
8069: PUSH
8070: LD_INT 8
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: LIST
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PPUSH
8082: CALL_OW 69
8086: IFFALSE 8045
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
8088: LD_ADDR_VAR 0 1
8092: PUSH
8093: LD_INT 22
8095: PUSH
8096: LD_INT 4
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PPUSH
8103: CALL_OW 69
8107: PUSH
8108: FOR_IN
8109: IFFALSE 8125
// SetSide ( i , 7 ) ;
8111: LD_VAR 0 1
8115: PPUSH
8116: LD_INT 7
8118: PPUSH
8119: CALL_OW 235
8123: GO 8108
8125: POP
8126: POP
// ChangeMissionObjectives ( M3 ) ;
8127: LD_STRING M3
8129: PPUSH
8130: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
8134: LD_INT 35
8136: PPUSH
8137: CALL_OW 67
// until GetDistUnits ( JMM , Burlak ) < 8 ;
8141: LD_EXP 14
8145: PPUSH
8146: LD_EXP 45
8150: PPUSH
8151: CALL_OW 296
8155: PUSH
8156: LD_INT 8
8158: LESS
8159: IFFALSE 8134
// ComTurnUnit ( JMM , Burlak ) ;
8161: LD_EXP 14
8165: PPUSH
8166: LD_EXP 45
8170: PPUSH
8171: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
8175: LD_EXP 45
8179: PPUSH
8180: LD_EXP 14
8184: PPUSH
8185: CALL_OW 119
// wait ( 0 0$0.3 ) ;
8189: LD_INT 10
8191: PPUSH
8192: CALL_OW 67
// DialogueOn ;
8196: CALL_OW 6
// Say ( JMM , D11-JMM-1 ) ;
8200: LD_EXP 14
8204: PPUSH
8205: LD_STRING D11-JMM-1
8207: PPUSH
8208: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
8212: LD_EXP 45
8216: PPUSH
8217: LD_STRING D11-Bur-1
8219: PPUSH
8220: CALL_OW 88
// Say ( JMM , D11-JMM-2 ) ;
8224: LD_EXP 14
8228: PPUSH
8229: LD_STRING D11-JMM-2
8231: PPUSH
8232: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
8236: LD_EXP 45
8240: PPUSH
8241: LD_STRING D11-Bur-2
8243: PPUSH
8244: CALL_OW 88
// Say ( JMM , D11-JMM-3 ) ;
8248: LD_EXP 14
8252: PPUSH
8253: LD_STRING D11-JMM-3
8255: PPUSH
8256: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
8260: LD_EXP 45
8264: PPUSH
8265: LD_STRING D11-Bur-3
8267: PPUSH
8268: CALL_OW 88
// Say ( JMM , D11-JMM-4 ) ;
8272: LD_EXP 14
8276: PPUSH
8277: LD_STRING D11-JMM-4
8279: PPUSH
8280: CALL_OW 88
// if ar_base_spotted then
8284: LD_EXP 8
8288: IFFALSE 8304
// Say ( Burlak , D12-Bur-1 ) else
8290: LD_EXP 45
8294: PPUSH
8295: LD_STRING D12-Bur-1
8297: PPUSH
8298: CALL_OW 88
8302: GO 8343
// begin RevealFogArea ( 7 , area_base_arabian ) ;
8304: LD_INT 7
8306: PPUSH
8307: LD_INT 3
8309: PPUSH
8310: CALL_OW 332
// CenterNowOnXY ( 127 , 45 ) ;
8314: LD_INT 127
8316: PPUSH
8317: LD_INT 45
8319: PPUSH
8320: CALL_OW 86
// Say ( Burlak , D12-Bur-1a ) ;
8324: LD_EXP 45
8328: PPUSH
8329: LD_STRING D12-Bur-1a
8331: PPUSH
8332: CALL_OW 88
// dwait ( 0 0$2 ) ;
8336: LD_INT 70
8338: PPUSH
8339: CALL_OW 68
// end ; Say ( Burlak , D12-Bur-1b ) ;
8343: LD_EXP 45
8347: PPUSH
8348: LD_STRING D12-Bur-1b
8350: PPUSH
8351: CALL_OW 88
// Say ( JMM , D12-JMM-1 ) ;
8355: LD_EXP 14
8359: PPUSH
8360: LD_STRING D12-JMM-1
8362: PPUSH
8363: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
8367: LD_EXP 45
8371: PPUSH
8372: LD_STRING D12-Bur-2
8374: PPUSH
8375: CALL_OW 88
// if Roth then
8379: LD_EXP 15
8383: IFFALSE 8399
// Say ( Roth , D12-Roth-2 ) else
8385: LD_EXP 15
8389: PPUSH
8390: LD_STRING D12-Roth-2
8392: PPUSH
8393: CALL_OW 88
8397: GO 8411
// Say ( SciRu , D12-RSci1-2 ) ;
8399: CALL 10610 0 0
8403: PPUSH
8404: LD_STRING D12-RSci1-2
8406: PPUSH
8407: CALL_OW 88
// Say ( JMM , D12-JMM-2 ) ;
8411: LD_EXP 14
8415: PPUSH
8416: LD_STRING D12-JMM-2
8418: PPUSH
8419: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
8423: LD_EXP 45
8427: PPUSH
8428: LD_STRING D12-Bur-3
8430: PPUSH
8431: CALL_OW 88
// Say ( JMM , D12-JMM-3 ) ;
8435: LD_EXP 14
8439: PPUSH
8440: LD_STRING D12-JMM-3
8442: PPUSH
8443: CALL_OW 88
// Say ( Burlak , D12-Bur-4 ) ;
8447: LD_EXP 45
8451: PPUSH
8452: LD_STRING D12-Bur-4
8454: PPUSH
8455: CALL_OW 88
// case Query ( QBase ) of 1 :
8459: LD_STRING QBase
8461: PPUSH
8462: CALL_OW 97
8466: PUSH
8467: LD_INT 1
8469: DOUBLE
8470: EQUAL
8471: IFTRUE 8475
8473: GO 8593
8475: POP
// begin Say ( JMM , D13a-JMM-1 ) ;
8476: LD_EXP 14
8480: PPUSH
8481: LD_STRING D13a-JMM-1
8483: PPUSH
8484: CALL_OW 88
// Say ( Burlak , D13a-Bur-1 ) ;
8488: LD_EXP 45
8492: PPUSH
8493: LD_STRING D13a-Bur-1
8495: PPUSH
8496: CALL_OW 88
// if Roth then
8500: LD_EXP 15
8504: IFFALSE 8520
// Say ( Roth , D13a-Roth-1 ) else
8506: LD_EXP 15
8510: PPUSH
8511: LD_STRING D13a-Roth-1
8513: PPUSH
8514: CALL_OW 88
8518: GO 8532
// Say ( SciRu , D13a-RSci1-1 ) ;
8520: CALL 10610 0 0
8524: PPUSH
8525: LD_STRING D13a-RSci1-1
8527: PPUSH
8528: CALL_OW 88
// Say ( JMM , D13a-JMM-2 ) ;
8532: LD_EXP 14
8536: PPUSH
8537: LD_STRING D13a-JMM-2
8539: PPUSH
8540: CALL_OW 88
// case Query ( QBaseAgain ) of 1 :
8544: LD_STRING QBaseAgain
8546: PPUSH
8547: CALL_OW 97
8551: PUSH
8552: LD_INT 1
8554: DOUBLE
8555: EQUAL
8556: IFTRUE 8560
8558: GO 8571
8560: POP
// selected_option := 2 ; 2 :
8561: LD_ADDR_VAR 0 2
8565: PUSH
8566: LD_INT 2
8568: ST_TO_ADDR
8569: GO 8591
8571: LD_INT 2
8573: DOUBLE
8574: EQUAL
8575: IFTRUE 8579
8577: GO 8590
8579: POP
// selected_option := 3 ; end ;
8580: LD_ADDR_VAR 0 2
8584: PUSH
8585: LD_INT 3
8587: ST_TO_ADDR
8588: GO 8591
8590: POP
// end ; 2 :
8591: GO 8632
8593: LD_INT 2
8595: DOUBLE
8596: EQUAL
8597: IFTRUE 8601
8599: GO 8612
8601: POP
// selected_option := 2 ; 3 :
8602: LD_ADDR_VAR 0 2
8606: PUSH
8607: LD_INT 2
8609: ST_TO_ADDR
8610: GO 8632
8612: LD_INT 3
8614: DOUBLE
8615: EQUAL
8616: IFTRUE 8620
8618: GO 8631
8620: POP
// selected_option := 3 ; end ;
8621: LD_ADDR_VAR 0 2
8625: PUSH
8626: LD_INT 3
8628: ST_TO_ADDR
8629: GO 8632
8631: POP
// if selected_option = 2 then
8632: LD_VAR 0 2
8636: PUSH
8637: LD_INT 2
8639: EQUAL
8640: IFFALSE 8734
// begin Say ( JMM , D13b-JMM-1 ) ;
8642: LD_EXP 14
8646: PPUSH
8647: LD_STRING D13b-JMM-1
8649: PPUSH
8650: CALL_OW 88
// Say ( Burlak , D13b-Bur-1 ) ;
8654: LD_EXP 45
8658: PPUSH
8659: LD_STRING D13b-Bur-1
8661: PPUSH
8662: CALL_OW 88
// Say ( JMM , D13b-JMM-2 ) ;
8666: LD_EXP 14
8670: PPUSH
8671: LD_STRING D13b-JMM-2
8673: PPUSH
8674: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-2 ) ;
8678: LD_EXP 54
8682: PPUSH
8683: LD_STRING D13b-Abd-2
8685: PPUSH
8686: CALL_OW 94
// Say ( JMM , D13b-JMM-3 ) ;
8690: LD_EXP 14
8694: PPUSH
8695: LD_STRING D13b-JMM-3
8697: PPUSH
8698: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-3 ) ;
8702: LD_EXP 54
8706: PPUSH
8707: LD_STRING D13b-Abd-3
8709: PPUSH
8710: CALL_OW 94
// Say ( JMM , D13b-JMM-4 ) ;
8714: LD_EXP 14
8718: PPUSH
8719: LD_STRING D13b-JMM-4
8721: PPUSH
8722: CALL_OW 88
// ar_active_attack := true ;
8726: LD_ADDR_EXP 9
8730: PUSH
8731: LD_INT 1
8733: ST_TO_ADDR
// end ; if selected_option = 3 then
8734: LD_VAR 0 2
8738: PUSH
8739: LD_INT 3
8741: EQUAL
8742: IFFALSE 8768
// begin Say ( JMM , D13c-JMM-1 ) ;
8744: LD_EXP 14
8748: PPUSH
8749: LD_STRING D13c-JMM-1
8751: PPUSH
8752: CALL_OW 88
// Say ( Burlak , D13c-Bur-1 ) ;
8756: LD_EXP 45
8760: PPUSH
8761: LD_STRING D13c-Bur-1
8763: PPUSH
8764: CALL_OW 88
// end ; DialogueOff ;
8768: CALL_OW 7
// if not ar_active_attack then
8772: LD_EXP 9
8776: NOT
8777: IFFALSE 8794
// begin wait ( 6 6$00 ) ;
8779: LD_INT 12600
8781: PPUSH
8782: CALL_OW 67
// ar_active_attack := true ;
8786: LD_ADDR_EXP 9
8790: PUSH
8791: LD_INT 1
8793: ST_TO_ADDR
// end ; end ;
8794: PPOPN 2
8796: END
// every 0 0$1 trigger IsPlaced ( Burlak ) and GetSide ( Burlak ) = 7 do
8797: LD_EXP 45
8801: PPUSH
8802: CALL_OW 305
8806: PUSH
8807: LD_EXP 45
8811: PPUSH
8812: CALL_OW 255
8816: PUSH
8817: LD_INT 7
8819: EQUAL
8820: AND
8821: IFFALSE 8982
8823: GO 8825
8825: DISABLE
// begin wait ( 4 4$40 ) ;
8826: LD_INT 9800
8828: PPUSH
8829: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8833: LD_INT 35
8835: PPUSH
8836: CALL_OW 67
// until not ru_attackers ;
8840: LD_EXP 51
8844: NOT
8845: IFFALSE 8833
// PrepareGnyevko ;
8847: CALL 1986 0 0
// ComMoveXY ( Gnyevko , 124 , 118 ) ;
8851: LD_EXP 47
8855: PPUSH
8856: LD_INT 124
8858: PPUSH
8859: LD_INT 118
8861: PPUSH
8862: CALL_OW 111
// AddComHold ( Gnyevko ) ;
8866: LD_EXP 47
8870: PPUSH
8871: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
8875: LD_INT 35
8877: PPUSH
8878: CALL_OW 67
// until IsAt ( Gnyevko , 124 , 118 ) ;
8882: LD_EXP 47
8886: PPUSH
8887: LD_INT 124
8889: PPUSH
8890: LD_INT 118
8892: PPUSH
8893: CALL_OW 307
8897: IFFALSE 8875
// SayRadio ( Gnyevko , DBelkov-Gny-1 ) ;
8899: LD_EXP 47
8903: PPUSH
8904: LD_STRING DBelkov-Gny-1
8906: PPUSH
8907: CALL_OW 94
// Say ( Burlak , DBelkov-Bur-1a ) ;
8911: LD_EXP 45
8915: PPUSH
8916: LD_STRING DBelkov-Bur-1a
8918: PPUSH
8919: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
8923: LD_INT 35
8925: PPUSH
8926: CALL_OW 67
// until GetDistUnits ( Gnyevko , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Gnyevko ) ) < 8 ;
8930: LD_EXP 47
8934: PPUSH
8935: LD_INT 22
8937: PUSH
8938: LD_INT 7
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PPUSH
8945: CALL_OW 69
8949: PPUSH
8950: LD_EXP 47
8954: PPUSH
8955: CALL_OW 74
8959: PPUSH
8960: CALL_OW 296
8964: PUSH
8965: LD_INT 8
8967: LESS
8968: IFFALSE 8923
// SetSide ( Gnyevko , 7 ) ;
8970: LD_EXP 47
8974: PPUSH
8975: LD_INT 7
8977: PPUSH
8978: CALL_OW 235
// end ;
8982: END
// every 10 10$00 + 1 1$30 trigger GetSide ( Burlak ) = 7 do
8983: LD_EXP 45
8987: PPUSH
8988: CALL_OW 255
8992: PUSH
8993: LD_INT 7
8995: EQUAL
8996: IFFALSE 9006
8998: GO 9000
9000: DISABLE
// begin enable ;
9001: ENABLE
// PrepareAmericanAttack ;
9002: CALL 12051 0 0
// end ;
9006: END
// every 0 0$2 trigger FilterAllUnits ( [ f_side , 1 ] ) do var i , tmp ;
9007: LD_INT 22
9009: PUSH
9010: LD_INT 1
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PPUSH
9017: CALL_OW 69
9021: IFFALSE 9205
9023: GO 9025
9025: DISABLE
9026: LD_INT 0
9028: PPUSH
9029: PPUSH
// begin while true do
9030: LD_INT 1
9032: IFFALSE 9089
// begin wait ( 0 0$1 ) ;
9034: LD_INT 35
9036: PPUSH
9037: CALL_OW 67
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , JMM ) ;
9041: LD_ADDR_VAR 0 2
9045: PUSH
9046: LD_INT 22
9048: PUSH
9049: LD_INT 1
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PPUSH
9056: CALL_OW 69
9060: PPUSH
9061: LD_EXP 14
9065: PPUSH
9066: CALL_OW 74
9070: ST_TO_ADDR
// if See ( 7 , tmp ) then
9071: LD_INT 7
9073: PPUSH
9074: LD_VAR 0 2
9078: PPUSH
9079: CALL_OW 292
9083: IFFALSE 9087
// break ;
9085: GO 9089
// end ;
9087: GO 9030
// DialogueOn ;
9089: CALL_OW 6
// CenterNowOnUnits ( tmp ) ;
9093: LD_VAR 0 2
9097: PPUSH
9098: CALL_OW 87
// PlaceSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 , 8 ) ;
9102: LD_VAR 0 2
9106: PPUSH
9107: CALL_OW 250
9111: PPUSH
9112: LD_VAR 0 2
9116: PPUSH
9117: CALL_OW 251
9121: PPUSH
9122: LD_INT 7
9124: PPUSH
9125: LD_INT 8
9127: PPUSH
9128: CALL_OW 330
// if Denis then
9132: LD_EXP 20
9136: IFFALSE 9150
// Say ( Denis , DAmerAttack-Pet-1 ) ;
9138: LD_EXP 20
9142: PPUSH
9143: LD_STRING DAmerAttack-Pet-1
9145: PPUSH
9146: CALL_OW 88
// Say ( JMM , DAmerAttack-JMM-1 ) ;
9150: LD_EXP 14
9154: PPUSH
9155: LD_STRING DAmerAttack-JMM-1
9157: PPUSH
9158: CALL_OW 88
// Say ( Burlak , DStop-Bur-1 ) ;
9162: LD_EXP 45
9166: PPUSH
9167: LD_STRING DStop-Bur-1
9169: PPUSH
9170: CALL_OW 88
// RemoveSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 ) ;
9174: LD_VAR 0 2
9178: PPUSH
9179: CALL_OW 250
9183: PPUSH
9184: LD_VAR 0 2
9188: PPUSH
9189: CALL_OW 251
9193: PPUSH
9194: LD_INT 7
9196: PPUSH
9197: CALL_OW 331
// DialogueOff ;
9201: CALL_OW 7
// end ;
9205: PPOPN 2
9207: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and IsDead ( ru_depot ) do
9208: LD_INT 22
9210: PUSH
9211: LD_INT 3
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: LD_INT 21
9220: PUSH
9221: LD_INT 1
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PPUSH
9232: CALL_OW 69
9236: PUSH
9237: LD_INT 0
9239: EQUAL
9240: PUSH
9241: LD_INT 47
9243: PPUSH
9244: CALL_OW 301
9248: AND
9249: IFFALSE 9291
9251: GO 9253
9253: DISABLE
// begin ChangeMissionObjectives ( M5a ) ;
9254: LD_STRING M5a
9256: PPUSH
9257: CALL_OW 337
// Say ( JMM , D8-JMM-1 ) ;
9261: LD_EXP 14
9265: PPUSH
9266: LD_STRING D8-JMM-1
9268: PPUSH
9269: CALL_OW 88
// if Gossudarov then
9273: LD_EXP 31
9277: IFFALSE 9291
// Say ( Gossudarov , D8-Gos-1 ) ;
9279: LD_EXP 31
9283: PPUSH
9284: LD_STRING D8-Gos-1
9286: PPUSH
9287: CALL_OW 88
// end ;
9291: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 do
9292: LD_INT 22
9294: PUSH
9295: LD_INT 2
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: PUSH
9302: LD_INT 21
9304: PUSH
9305: LD_INT 1
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: PPUSH
9316: CALL_OW 69
9320: PUSH
9321: LD_INT 0
9323: EQUAL
9324: IFFALSE 9374
9326: GO 9328
9328: DISABLE
// begin ChangeMissionObjectives ( M4c ) ;
9329: LD_STRING M4c
9331: PPUSH
9332: CALL_OW 337
// if Roth then
9336: LD_EXP 15
9340: IFFALSE 9356
// Say ( Roth , DStop-Roth-1 ) else
9342: LD_EXP 15
9346: PPUSH
9347: LD_STRING DStop-Roth-1
9349: PPUSH
9350: CALL_OW 88
9354: GO 9374
// if Gossudarov then
9356: LD_EXP 31
9360: IFFALSE 9374
// Say ( Gossudarov , D8-Gos-1a ) ;
9362: LD_EXP 31
9366: PPUSH
9367: LD_STRING D8-Gos-1a
9369: PPUSH
9370: CALL_OW 88
// end ;
9374: END
// every 0 0$01 trigger GetTechNation ( 7 , 1 , state_enabled ) = 0 and GetTechNation ( 7 , 3 , state_enabled ) = 0 do
9375: LD_INT 7
9377: PPUSH
9378: LD_INT 1
9380: PPUSH
9381: LD_INT 1
9383: PPUSH
9384: CALL 12456 0 3
9388: PUSH
9389: LD_INT 0
9391: EQUAL
9392: PUSH
9393: LD_INT 7
9395: PPUSH
9396: LD_INT 3
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL 12456 0 3
9406: PUSH
9407: LD_INT 0
9409: EQUAL
9410: AND
9411: IFFALSE 9423
9413: GO 9415
9415: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
9416: LD_STRING M1a
9418: PPUSH
9419: CALL_OW 337
// end ;
9423: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ f_side , 3 ] ) = 0 and FilterAllUnits ( [ f_side , 1 ] ) = 0 and GetTechNation ( 7 , 1 , state_enabled ) = 0 and GetTechNation ( 7 , 3 , state_enabled ) = 0 do var tmp , tmp2 ;
9424: LD_INT 22
9426: PUSH
9427: LD_INT 2
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 21
9436: PUSH
9437: LD_INT 1
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PPUSH
9448: CALL_OW 69
9452: PUSH
9453: LD_INT 0
9455: EQUAL
9456: PUSH
9457: LD_INT 22
9459: PUSH
9460: LD_INT 3
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PPUSH
9467: CALL_OW 69
9471: PUSH
9472: LD_INT 0
9474: EQUAL
9475: AND
9476: PUSH
9477: LD_INT 22
9479: PUSH
9480: LD_INT 1
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PPUSH
9487: CALL_OW 69
9491: PUSH
9492: LD_INT 0
9494: EQUAL
9495: AND
9496: PUSH
9497: LD_INT 7
9499: PPUSH
9500: LD_INT 1
9502: PPUSH
9503: LD_INT 1
9505: PPUSH
9506: CALL 12456 0 3
9510: PUSH
9511: LD_INT 0
9513: EQUAL
9514: AND
9515: PUSH
9516: LD_INT 7
9518: PPUSH
9519: LD_INT 3
9521: PPUSH
9522: LD_INT 1
9524: PPUSH
9525: CALL 12456 0 3
9529: PUSH
9530: LD_INT 0
9532: EQUAL
9533: AND
9534: IFFALSE 10607
9536: GO 9538
9538: DISABLE
9539: LD_INT 0
9541: PPUSH
9542: PPUSH
// begin if not IsDead ( Masha ) then
9543: LD_EXP 48
9547: PPUSH
9548: CALL_OW 301
9552: NOT
9553: IFFALSE 9567
// AddMedal ( Masha , 1 ) else
9555: LD_STRING Masha
9557: PPUSH
9558: LD_INT 1
9560: PPUSH
9561: CALL_OW 101
9565: GO 9578
// AddMedal ( Masha , - 1 ) ;
9567: LD_STRING Masha
9569: PPUSH
9570: LD_INT 1
9572: NEG
9573: PPUSH
9574: CALL_OW 101
// if abdul_escaped then
9578: LD_EXP 12
9582: IFFALSE 9597
// AddMedal ( Abdul , - 1 ) else
9584: LD_STRING Abdul
9586: PPUSH
9587: LD_INT 1
9589: NEG
9590: PPUSH
9591: CALL_OW 101
9595: GO 9607
// AddMedal ( Abdul , 1 ) ;
9597: LD_STRING Abdul
9599: PPUSH
9600: LD_INT 1
9602: PPUSH
9603: CALL_OW 101
// if loss_counter = 0 then
9607: LD_EXP 13
9611: PUSH
9612: LD_INT 0
9614: EQUAL
9615: IFFALSE 9629
// AddMedal ( People , 2 ) else
9617: LD_STRING People
9619: PPUSH
9620: LD_INT 2
9622: PPUSH
9623: CALL_OW 101
9627: GO 9679
// if loss_counter <= [ 3 , 2 , 2 ] [ Difficulty ] then
9629: LD_EXP 13
9633: PUSH
9634: LD_INT 3
9636: PUSH
9637: LD_INT 2
9639: PUSH
9640: LD_INT 2
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: PUSH
9648: LD_OWVAR 67
9652: ARRAY
9653: LESSEQUAL
9654: IFFALSE 9668
// AddMedal ( People , 1 ) else
9656: LD_STRING People
9658: PPUSH
9659: LD_INT 1
9661: PPUSH
9662: CALL_OW 101
9666: GO 9679
// AddMedal ( People , - 1 ) ;
9668: LD_STRING People
9670: PPUSH
9671: LD_INT 1
9673: NEG
9674: PPUSH
9675: CALL_OW 101
// GiveMedals ( MAIN ) ;
9679: LD_STRING MAIN
9681: PPUSH
9682: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9686: LD_ADDR_VAR 0 1
9690: PUSH
9691: LD_INT 22
9693: PUSH
9694: LD_INT 7
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: LD_INT 2
9703: PUSH
9704: LD_INT 25
9706: PUSH
9707: LD_INT 1
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PUSH
9714: LD_INT 25
9716: PUSH
9717: LD_INT 2
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 25
9726: PUSH
9727: LD_INT 3
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 25
9736: PUSH
9737: LD_INT 4
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 25
9746: PUSH
9747: LD_INT 5
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: LD_INT 25
9756: PUSH
9757: LD_INT 8
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 25
9766: PUSH
9767: LD_INT 9
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PPUSH
9788: CALL_OW 69
9792: ST_TO_ADDR
// RewardPeople ( tmp ) ;
9793: LD_VAR 0 1
9797: PPUSH
9798: CALL_OW 43
// tmp2 := [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Burlak , Belkov , Gnyevko ] ;
9802: LD_ADDR_VAR 0 2
9806: PUSH
9807: LD_EXP 14
9811: PUSH
9812: LD_EXP 15
9816: PUSH
9817: LD_EXP 16
9821: PUSH
9822: LD_EXP 17
9826: PUSH
9827: LD_EXP 18
9831: PUSH
9832: LD_EXP 19
9836: PUSH
9837: LD_EXP 20
9841: PUSH
9842: LD_EXP 21
9846: PUSH
9847: LD_EXP 22
9851: PUSH
9852: LD_EXP 23
9856: PUSH
9857: LD_EXP 24
9861: PUSH
9862: LD_EXP 25
9866: PUSH
9867: LD_EXP 26
9871: PUSH
9872: LD_EXP 27
9876: PUSH
9877: LD_EXP 28
9881: PUSH
9882: LD_EXP 29
9886: PUSH
9887: LD_EXP 30
9891: PUSH
9892: LD_EXP 31
9896: PUSH
9897: LD_EXP 32
9901: PUSH
9902: LD_EXP 33
9906: PUSH
9907: LD_EXP 35
9911: PUSH
9912: LD_EXP 36
9916: PUSH
9917: LD_EXP 37
9921: PUSH
9922: LD_EXP 38
9926: PUSH
9927: LD_EXP 39
9931: PUSH
9932: LD_EXP 40
9936: PUSH
9937: LD_EXP 41
9941: PUSH
9942: LD_EXP 42
9946: PUSH
9947: LD_EXP 43
9951: PUSH
9952: LD_EXP 44
9956: PUSH
9957: LD_EXP 45
9961: PUSH
9962: LD_EXP 46
9966: PUSH
9967: LD_EXP 47
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: ST_TO_ADDR
// if tmp diff tmp2 then
10007: LD_VAR 0 1
10011: PUSH
10012: LD_VAR 0 2
10016: DIFF
10017: IFFALSE 10037
// SaveCharacters ( tmp diff tmp2 , 13a_others ) ;
10019: LD_VAR 0 1
10023: PUSH
10024: LD_VAR 0 2
10028: DIFF
10029: PPUSH
10030: LD_STRING 13a_others
10032: PPUSH
10033: CALL_OW 38
// SaveCharacters ( JMM , 13a_JMM ) ;
10037: LD_EXP 14
10041: PPUSH
10042: LD_STRING 13a_JMM
10044: PPUSH
10045: CALL_OW 38
// if Titov then
10049: LD_EXP 33
10053: IFFALSE 10067
// SaveCharacters ( Titov , 13a_Titov ) ;
10055: LD_EXP 33
10059: PPUSH
10060: LD_STRING 13a_Titov
10062: PPUSH
10063: CALL_OW 38
// if Dolgov then
10067: LD_EXP 35
10071: IFFALSE 10085
// SaveCharacters ( Dolgov , 13a_Dolgov ) ;
10073: LD_EXP 35
10077: PPUSH
10078: LD_STRING 13a_Dolgov
10080: PPUSH
10081: CALL_OW 38
// if Petrosyan then
10085: LD_EXP 36
10089: IFFALSE 10103
// SaveCharacters ( Petrosyan , 13a_Petrosyan ) ;
10091: LD_EXP 36
10095: PPUSH
10096: LD_STRING 13a_Petrosyan
10098: PPUSH
10099: CALL_OW 38
// if Scholtze then
10103: LD_EXP 37
10107: IFFALSE 10121
// SaveCharacters ( Scholtze , 13a_Scholtze ) ;
10109: LD_EXP 37
10113: PPUSH
10114: LD_STRING 13a_Scholtze
10116: PPUSH
10117: CALL_OW 38
// if Oblukov then
10121: LD_EXP 38
10125: IFFALSE 10139
// SaveCharacters ( Oblukov , 13a_Oblukov ) ;
10127: LD_EXP 38
10131: PPUSH
10132: LD_STRING 13a_Oblukov
10134: PPUSH
10135: CALL_OW 38
// if Kapitsova then
10139: LD_EXP 39
10143: IFFALSE 10157
// SaveCharacters ( Kapitsova , 13a_Kapitsova ) ;
10145: LD_EXP 39
10149: PPUSH
10150: LD_STRING 13a_Kapitsova
10152: PPUSH
10153: CALL_OW 38
// if Lipshchin then
10157: LD_EXP 40
10161: IFFALSE 10175
// SaveCharacters ( Lipshchin , 13a_Lipshchin ) ;
10163: LD_EXP 40
10167: PPUSH
10168: LD_STRING 13a_Lipshchin
10170: PPUSH
10171: CALL_OW 38
// if Petrovova then
10175: LD_EXP 41
10179: IFFALSE 10193
// SaveCharacters ( Petrovova , 13a_Petrovova ) ;
10181: LD_EXP 41
10185: PPUSH
10186: LD_STRING 13a_Petrovova
10188: PPUSH
10189: CALL_OW 38
// if Kovalyuk then
10193: LD_EXP 42
10197: IFFALSE 10211
// SaveCharacters ( Kovalyuk , 13a_Kovalyuk ) ;
10199: LD_EXP 42
10203: PPUSH
10204: LD_STRING 13a_Kovalyuk
10206: PPUSH
10207: CALL_OW 38
// if Kuzmov then
10211: LD_EXP 43
10215: IFFALSE 10229
// SaveCharacters ( Kuzmov , 13a_Kuzmov ) ;
10217: LD_EXP 43
10221: PPUSH
10222: LD_STRING 13a_Kuzmov
10224: PPUSH
10225: CALL_OW 38
// if Karamazov then
10229: LD_EXP 44
10233: IFFALSE 10247
// SaveCharacters ( Karamazov , 13a_Karamazov ) ;
10235: LD_EXP 44
10239: PPUSH
10240: LD_STRING 13a_Karamazov
10242: PPUSH
10243: CALL_OW 38
// if Burlak then
10247: LD_EXP 45
10251: IFFALSE 10265
// SaveCharacters ( Burlak , 13a_Burlak ) ;
10253: LD_EXP 45
10257: PPUSH
10258: LD_STRING 13a_Burlak
10260: PPUSH
10261: CALL_OW 38
// if Belkov then
10265: LD_EXP 46
10269: IFFALSE 10283
// SaveCharacters ( Belkov , 13a_Belkov ) ;
10271: LD_EXP 46
10275: PPUSH
10276: LD_STRING 13a_Belkov
10278: PPUSH
10279: CALL_OW 38
// if Gnyevko then
10283: LD_EXP 47
10287: IFFALSE 10301
// SaveCharacters ( Gnyevko , 13a_Gnyevko ) ;
10289: LD_EXP 47
10293: PPUSH
10294: LD_STRING 13a_Gnyevko
10296: PPUSH
10297: CALL_OW 38
// if Lisa then
10301: LD_EXP 16
10305: IFFALSE 10319
// SaveCharacters ( Lisa , 13a_Lisa ) ;
10307: LD_EXP 16
10311: PPUSH
10312: LD_STRING 13a_Lisa
10314: PPUSH
10315: CALL_OW 38
// if Donaldson then
10319: LD_EXP 17
10323: IFFALSE 10337
// SaveCharacters ( Donaldson , 13a_Donaldson ) ;
10325: LD_EXP 17
10329: PPUSH
10330: LD_STRING 13a_Donaldson
10332: PPUSH
10333: CALL_OW 38
// if Bobby then
10337: LD_EXP 18
10341: IFFALSE 10355
// SaveCharacters ( Bobby , 13a_Bobby ) ;
10343: LD_EXP 18
10347: PPUSH
10348: LD_STRING 13a_Bobby
10350: PPUSH
10351: CALL_OW 38
// if Cyrus then
10355: LD_EXP 19
10359: IFFALSE 10373
// SaveCharacters ( Cyrus , 13a_Cyrus ) ;
10361: LD_EXP 19
10365: PPUSH
10366: LD_STRING 13a_Cyrus
10368: PPUSH
10369: CALL_OW 38
// if Denis then
10373: LD_EXP 20
10377: IFFALSE 10391
// SaveCharacters ( Denis , 13a_Denis ) ;
10379: LD_EXP 20
10383: PPUSH
10384: LD_STRING 13a_Denis
10386: PPUSH
10387: CALL_OW 38
// if Brown then
10391: LD_EXP 21
10395: IFFALSE 10409
// SaveCharacters ( Brown , 13a_Brown ) ;
10397: LD_EXP 21
10401: PPUSH
10402: LD_STRING 13a_Brown
10404: PPUSH
10405: CALL_OW 38
// if Gladstone then
10409: LD_EXP 22
10413: IFFALSE 10427
// SaveCharacters ( Gladstone , 13a_Gladstone ) ;
10415: LD_EXP 22
10419: PPUSH
10420: LD_STRING 13a_Gladstone
10422: PPUSH
10423: CALL_OW 38
// if Houten then
10427: LD_EXP 23
10431: IFFALSE 10445
// SaveCharacters ( Houten , 13a_Houten ) ;
10433: LD_EXP 23
10437: PPUSH
10438: LD_STRING 13a_Houten
10440: PPUSH
10441: CALL_OW 38
// if Cornel then
10445: LD_EXP 24
10449: IFFALSE 10463
// SaveCharacters ( Cornel , 13a_Cornel ) ;
10451: LD_EXP 24
10455: PPUSH
10456: LD_STRING 13a_Cornel
10458: PPUSH
10459: CALL_OW 38
// if Gary then
10463: LD_EXP 25
10467: IFFALSE 10481
// SaveCharacters ( Gary , 13a_Gary ) ;
10469: LD_EXP 25
10473: PPUSH
10474: LD_STRING 13a_Gary
10476: PPUSH
10477: CALL_OW 38
// if Frank then
10481: LD_EXP 26
10485: IFFALSE 10499
// SaveCharacters ( Frank , 13a_Frank ) ;
10487: LD_EXP 26
10491: PPUSH
10492: LD_STRING 13a_Frank
10494: PPUSH
10495: CALL_OW 38
// if Kikuchi then
10499: LD_EXP 27
10503: IFFALSE 10517
// SaveCharacters ( Kikuchi , 13a_Kikuchi ) ;
10505: LD_EXP 27
10509: PPUSH
10510: LD_STRING 13a_Kikuchi
10512: PPUSH
10513: CALL_OW 38
// if Simms then
10517: LD_EXP 28
10521: IFFALSE 10535
// SaveCharacters ( Simms , 13a_Simms ) ;
10523: LD_EXP 28
10527: PPUSH
10528: LD_STRING 13a_Simms
10530: PPUSH
10531: CALL_OW 38
// if Joan then
10535: LD_EXP 29
10539: IFFALSE 10553
// SaveCharacters ( Joan , 13a_Joan ) ;
10541: LD_EXP 29
10545: PPUSH
10546: LD_STRING 13a_Joan
10548: PPUSH
10549: CALL_OW 38
// if DeltaDoctor then
10553: LD_EXP 30
10557: IFFALSE 10571
// SaveCharacters ( DeltaDoctor , 13a_DeltaDoctor ) ;
10559: LD_EXP 30
10563: PPUSH
10564: LD_STRING 13a_DeltaDoctor
10566: PPUSH
10567: CALL_OW 38
// if Gossudarov then
10571: LD_EXP 31
10575: IFFALSE 10589
// SaveCharacters ( Gossudarov , 13a_Gossudarov ) ;
10577: LD_EXP 31
10581: PPUSH
10582: LD_STRING 13a_Gossudarov
10584: PPUSH
10585: CALL_OW 38
// if Kirilenkova then
10589: LD_EXP 32
10593: IFFALSE 10607
// SaveCharacters ( Kirilenkova , 13a_Kirilenkova ) ;
10595: LD_EXP 32
10599: PPUSH
10600: LD_STRING 13a_Kirilenkova
10602: PPUSH
10603: CALL_OW 38
// end ;
10607: PPOPN 2
10609: END
// export function SciRu ; var tmp , t ; begin
10610: LD_INT 0
10612: PPUSH
10613: PPUSH
10614: PPUSH
// t := [ Gossudarov , Burlak , Titov , Belkov , Gnyevko ] ;
10615: LD_ADDR_VAR 0 3
10619: PUSH
10620: LD_EXP 31
10624: PUSH
10625: LD_EXP 45
10629: PUSH
10630: LD_EXP 33
10634: PUSH
10635: LD_EXP 46
10639: PUSH
10640: LD_EXP 47
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff t ;
10652: LD_ADDR_VAR 0 2
10656: PUSH
10657: LD_INT 22
10659: PUSH
10660: LD_INT 7
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: LD_INT 23
10669: PUSH
10670: LD_INT 3
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PUSH
10677: LD_INT 25
10679: PUSH
10680: LD_INT 4
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 26
10689: PUSH
10690: LD_INT 1
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: PPUSH
10703: CALL_OW 69
10707: PUSH
10708: LD_VAR 0 3
10712: DIFF
10713: ST_TO_ADDR
// if tmp then
10714: LD_VAR 0 2
10718: IFFALSE 10734
// result := tmp [ 1 ] ;
10720: LD_ADDR_VAR 0 1
10724: PUSH
10725: LD_VAR 0 2
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: ST_TO_ADDR
// end ;
10734: LD_VAR 0 1
10738: RET
// export function SolRu ; var tmp , t ; begin
10739: LD_INT 0
10741: PPUSH
10742: PPUSH
10743: PPUSH
// t := [ Belkov , Burlak , Gossudarov ] ;
10744: LD_ADDR_VAR 0 3
10748: PUSH
10749: LD_EXP 46
10753: PUSH
10754: LD_EXP 45
10758: PUSH
10759: LD_EXP 31
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: LIST
10768: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 1 ] , [ f_sex , sex_male ] ] ) diff t ;
10769: LD_ADDR_VAR 0 2
10773: PUSH
10774: LD_INT 22
10776: PUSH
10777: LD_INT 7
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PUSH
10784: LD_INT 23
10786: PUSH
10787: LD_INT 3
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: LD_INT 25
10796: PUSH
10797: LD_INT 1
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 26
10806: PUSH
10807: LD_INT 1
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: PPUSH
10820: CALL_OW 69
10824: PUSH
10825: LD_VAR 0 3
10829: DIFF
10830: ST_TO_ADDR
// if tmp then
10831: LD_VAR 0 2
10835: IFFALSE 10851
// result := tmp [ 1 ] ;
10837: LD_ADDR_VAR 0 1
10841: PUSH
10842: LD_VAR 0 2
10846: PUSH
10847: LD_INT 1
10849: ARRAY
10850: ST_TO_ADDR
// end ; end_of_file
10851: LD_VAR 0 1
10855: RET
// on UnitDestroyed ( un ) do var i , side ;
10856: LD_INT 0
10858: PPUSH
10859: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) then
10860: LD_VAR 0 1
10864: PUSH
10865: LD_INT 22
10867: PUSH
10868: LD_INT 7
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: LD_INT 2
10877: PUSH
10878: LD_INT 25
10880: PUSH
10881: LD_INT 1
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 25
10890: PUSH
10891: LD_INT 2
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 25
10900: PUSH
10901: LD_INT 3
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: LD_INT 25
10910: PUSH
10911: LD_INT 4
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 25
10920: PUSH
10921: LD_INT 5
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 25
10930: PUSH
10931: LD_INT 8
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 25
10940: PUSH
10941: LD_INT 9
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PPUSH
10962: CALL_OW 69
10966: IN
10967: IFFALSE 10983
// loss_counter := loss_counter + 1 ;
10969: LD_ADDR_EXP 13
10973: PUSH
10974: LD_EXP 13
10978: PUSH
10979: LD_INT 1
10981: PLUS
10982: ST_TO_ADDR
// if un in ru_attackers then
10983: LD_VAR 0 1
10987: PUSH
10988: LD_EXP 51
10992: IN
10993: IFFALSE 11011
// ru_attackers := ru_attackers diff un ;
10995: LD_ADDR_EXP 51
10999: PUSH
11000: LD_EXP 51
11004: PUSH
11005: LD_VAR 0 1
11009: DIFF
11010: ST_TO_ADDR
// if un in ar_attackers then
11011: LD_VAR 0 1
11015: PUSH
11016: LD_EXP 10
11020: IN
11021: IFFALSE 11039
// ar_attackers := ar_attackers diff un ;
11023: LD_ADDR_EXP 10
11027: PUSH
11028: LD_EXP 10
11032: PUSH
11033: LD_VAR 0 1
11037: DIFF
11038: ST_TO_ADDR
// if un = JMM then
11039: LD_VAR 0 1
11043: PUSH
11044: LD_EXP 14
11048: EQUAL
11049: IFFALSE 11060
// begin YouLost ( JMM ) ;
11051: LD_STRING JMM
11053: PPUSH
11054: CALL_OW 104
// exit ;
11058: GO 11149
// end ; if un = Burlak then
11060: LD_VAR 0 1
11064: PUSH
11065: LD_EXP 45
11069: EQUAL
11070: IFFALSE 11081
// begin YouLost ( Burlak ) ;
11072: LD_STRING Burlak
11074: PPUSH
11075: CALL_OW 104
// exit ;
11079: GO 11149
// end ; if un = freedom then
11081: LD_VAR 0 1
11085: PUSH
11086: LD_EXP 3
11090: EQUAL
11091: IFFALSE 11102
// begin YouLost ( Destroyed ) ;
11093: LD_STRING Destroyed
11095: PPUSH
11096: CALL_OW 104
// exit ;
11100: GO 11149
// end ; if un = Masha then
11102: LD_VAR 0 1
11106: PUSH
11107: LD_EXP 48
11111: EQUAL
11112: IFFALSE 11121
// ChangeMissionObjectives ( M4b ) ;
11114: LD_STRING M4b
11116: PPUSH
11117: CALL_OW 337
// if un = Mastodont then
11121: LD_VAR 0 1
11125: PUSH
11126: LD_EXP 55
11130: EQUAL
11131: IFFALSE 11140
// ChangeMissionObjectives ( M4a ) ;
11133: LD_STRING M4a
11135: PPUSH
11136: CALL_OW 337
// MCE_UnitDestroyed ( un ) ;
11140: LD_VAR 0 1
11144: PPUSH
11145: CALL 65581 0 1
// end ;
11149: PPOPN 3
11151: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
11152: LD_VAR 0 1
11156: PPUSH
11157: LD_VAR 0 2
11161: PPUSH
11162: CALL 67448 0 2
// end ;
11166: PPOPN 2
11168: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
11169: LD_VAR 0 1
11173: PPUSH
11174: CALL 66530 0 1
// end ;
11178: PPOPN 1
11180: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_depot ] ] ) then
11181: LD_VAR 0 1
11185: PUSH
11186: LD_INT 22
11188: PUSH
11189: LD_INT 7
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 30
11198: PUSH
11199: LD_INT 0
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PPUSH
11210: CALL_OW 69
11214: IN
11215: IFFALSE 11254
// begin SetBName ( building , freedom ) ;
11217: LD_VAR 0 1
11221: PPUSH
11222: LD_STRING freedom
11224: PPUSH
11225: CALL_OW 500
// SetRestrict ( b_depot , 7 , false ) ;
11229: LD_INT 0
11231: PPUSH
11232: LD_INT 7
11234: PPUSH
11235: LD_INT 0
11237: PPUSH
11238: CALL_OW 324
// freedom := building ;
11242: LD_ADDR_EXP 3
11246: PUSH
11247: LD_VAR 0 1
11251: ST_TO_ADDR
// exit ;
11252: GO 11320
// end ; if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_btype , b_lab ] ] ) then
11254: LD_VAR 0 1
11258: PUSH
11259: LD_INT 22
11261: PUSH
11262: LD_INT 7
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PUSH
11269: LD_INT 23
11271: PUSH
11272: LD_INT 3
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PUSH
11279: LD_INT 30
11281: PUSH
11282: LD_INT 6
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: PPUSH
11294: CALL_OW 69
11298: IN
11299: IFFALSE 11311
// begin ru_lab_builded := true ;
11301: LD_ADDR_EXP 5
11305: PUSH
11306: LD_INT 1
11308: ST_TO_ADDR
// exit ;
11309: GO 11320
// end ; MCE_BuildingComplete ( building ) ;
11311: LD_VAR 0 1
11315: PPUSH
11316: CALL 66764 0 1
// end ;
11320: PPOPN 1
11322: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
11323: LD_VAR 0 1
11327: PPUSH
11328: LD_VAR 0 2
11332: PPUSH
11333: CALL 65293 0 2
// end ;
11337: PPOPN 2
11339: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
11340: LD_VAR 0 1
11344: PPUSH
11345: LD_VAR 0 2
11349: PPUSH
11350: LD_VAR 0 3
11354: PPUSH
11355: LD_VAR 0 4
11359: PPUSH
11360: LD_VAR 0 5
11364: PPUSH
11365: CALL 64920 0 5
// end ;
11369: PPOPN 5
11371: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_VAR 0 2
11381: PPUSH
11382: CALL 64608 0 2
// end ;
11386: PPOPN 2
11388: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
11389: LD_VAR 0 1
11393: PPUSH
11394: LD_VAR 0 2
11398: PPUSH
11399: LD_VAR 0 3
11403: PPUSH
11404: LD_VAR 0 4
11408: PPUSH
11409: CALL 64453 0 4
// end ;
11413: PPOPN 4
11415: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
11416: LD_VAR 0 1
11420: PPUSH
11421: LD_VAR 0 2
11425: PPUSH
11426: LD_VAR 0 3
11430: PPUSH
11431: CALL 64235 0 3
// end ;
11435: PPOPN 3
11437: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
11438: LD_VAR 0 1
11442: PPUSH
11443: LD_VAR 0 2
11447: PPUSH
11448: CALL 64127 0 2
// end ;
11452: PPOPN 2
11454: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
11455: LD_VAR 0 1
11459: PPUSH
11460: LD_VAR 0 2
11464: PPUSH
11465: CALL 67702 0 2
// end ;
11469: PPOPN 2
11471: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
11472: LD_VAR 0 1
11476: PPUSH
11477: LD_VAR 0 2
11481: PPUSH
11482: LD_VAR 0 3
11486: PPUSH
11487: LD_VAR 0 4
11491: PPUSH
11492: CALL 67911 0 4
// end ;
11496: PPOPN 4
11498: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
11499: LD_VAR 0 1
11503: PPUSH
11504: LD_VAR 0 2
11508: PPUSH
11509: CALL 63943 0 2
// end ; end_of_file
11513: PPOPN 2
11515: END
// every 0 0$30 do var cr , time ;
11516: GO 11518
11518: DISABLE
11519: LD_INT 0
11521: PPUSH
11522: PPUSH
// begin time := 0 0$10 ;
11523: LD_ADDR_VAR 0 2
11527: PUSH
11528: LD_INT 350
11530: ST_TO_ADDR
// while game do
11531: LD_EXP 2
11535: IFFALSE 11634
// begin wait ( time ) ;
11537: LD_VAR 0 2
11541: PPUSH
11542: CALL_OW 67
// if tick > 2 2$00 then
11546: LD_OWVAR 1
11550: PUSH
11551: LD_INT 4200
11553: GREATER
11554: IFFALSE 11587
// time := time + [ 0 0$05 , 0 0$06 , 0 0$07 ] [ Difficulty ] ;
11556: LD_ADDR_VAR 0 2
11560: PUSH
11561: LD_VAR 0 2
11565: PUSH
11566: LD_INT 175
11568: PUSH
11569: LD_INT 210
11571: PUSH
11572: LD_INT 245
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: PUSH
11580: LD_OWVAR 67
11584: ARRAY
11585: PLUS
11586: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 70 , 49 , 25 , true ) ;
11587: LD_INT 1
11589: PPUSH
11590: LD_INT 5
11592: PPUSH
11593: CALL_OW 12
11597: PPUSH
11598: LD_INT 70
11600: PPUSH
11601: LD_INT 49
11603: PPUSH
11604: LD_INT 25
11606: PPUSH
11607: LD_INT 1
11609: PPUSH
11610: CALL_OW 56
// if time > 5 5$00 then
11614: LD_VAR 0 2
11618: PUSH
11619: LD_INT 10500
11621: GREATER
11622: IFFALSE 11632
// time := 0 0$30 ;
11624: LD_ADDR_VAR 0 2
11628: PUSH
11629: LD_INT 1050
11631: ST_TO_ADDR
// end ;
11632: GO 11531
// end ;
11634: PPOPN 2
11636: END
// every 0 0$30 do var cr , time ;
11637: GO 11639
11639: DISABLE
11640: LD_INT 0
11642: PPUSH
11643: PPUSH
// begin time := 0 0$01 ;
11644: LD_ADDR_VAR 0 2
11648: PUSH
11649: LD_INT 35
11651: ST_TO_ADDR
// while game do
11652: LD_EXP 2
11656: IFFALSE 11745
// begin wait ( time ) ;
11658: LD_VAR 0 2
11662: PPUSH
11663: CALL_OW 67
// time := time + [ 0 0$04 , 0 0$05 , 0 0$06 ] [ Difficulty ] ;
11667: LD_ADDR_VAR 0 2
11671: PUSH
11672: LD_VAR 0 2
11676: PUSH
11677: LD_INT 140
11679: PUSH
11680: LD_INT 175
11682: PUSH
11683: LD_INT 210
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: LIST
11690: PUSH
11691: LD_OWVAR 67
11695: ARRAY
11696: PLUS
11697: ST_TO_ADDR
// CreateCratesXYR ( rand ( 3 , 5 ) , 26 , 9 , 30 , true ) ;
11698: LD_INT 3
11700: PPUSH
11701: LD_INT 5
11703: PPUSH
11704: CALL_OW 12
11708: PPUSH
11709: LD_INT 26
11711: PPUSH
11712: LD_INT 9
11714: PPUSH
11715: LD_INT 30
11717: PPUSH
11718: LD_INT 1
11720: PPUSH
11721: CALL_OW 56
// if time > 3 3$00 then
11725: LD_VAR 0 2
11729: PUSH
11730: LD_INT 6300
11732: GREATER
11733: IFFALSE 11743
// time := 0 0$20 ;
11735: LD_ADDR_VAR 0 2
11739: PUSH
11740: LD_INT 700
11742: ST_TO_ADDR
// end ;
11743: GO 11652
// end ;
11745: PPOPN 2
11747: END
// every 0 0$30 do var cr , time ;
11748: GO 11750
11750: DISABLE
11751: LD_INT 0
11753: PPUSH
11754: PPUSH
// begin time := 0 0$20 ;
11755: LD_ADDR_VAR 0 2
11759: PUSH
11760: LD_INT 700
11762: ST_TO_ADDR
// while game do
11763: LD_EXP 2
11767: IFFALSE 11892
// begin wait ( time ) ;
11769: LD_VAR 0 2
11773: PPUSH
11774: CALL_OW 67
// time := time + [ 0 0$05 , 0 0$06 , 0 0$08 ] [ Difficulty ] ;
11778: LD_ADDR_VAR 0 2
11782: PUSH
11783: LD_VAR 0 2
11787: PUSH
11788: LD_INT 175
11790: PUSH
11791: LD_INT 210
11793: PUSH
11794: LD_INT 280
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: PUSH
11802: LD_OWVAR 67
11806: ARRAY
11807: PLUS
11808: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 179 , 101 , 20 , true ) ;
11809: LD_INT 1
11811: PPUSH
11812: LD_INT 5
11814: PPUSH
11815: CALL_OW 12
11819: PPUSH
11820: LD_INT 179
11822: PPUSH
11823: LD_INT 101
11825: PPUSH
11826: LD_INT 20
11828: PPUSH
11829: LD_INT 1
11831: PPUSH
11832: CALL_OW 56
// wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
11836: LD_INT 350
11838: PPUSH
11839: LD_INT 525
11841: PPUSH
11842: CALL_OW 12
11846: PPUSH
11847: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area_collect_arabian , true ) ;
11851: LD_INT 1
11853: PPUSH
11854: LD_INT 5
11856: PPUSH
11857: CALL_OW 12
11861: PPUSH
11862: LD_INT 9
11864: PPUSH
11865: LD_INT 1
11867: PPUSH
11868: CALL_OW 55
// if time > 4 4$00 then
11872: LD_VAR 0 2
11876: PUSH
11877: LD_INT 8400
11879: GREATER
11880: IFFALSE 11890
// time := 0 0$30 ;
11882: LD_ADDR_VAR 0 2
11886: PUSH
11887: LD_INT 1050
11889: ST_TO_ADDR
// end ;
11890: GO 11763
// end ;
11892: PPOPN 2
11894: END
// every 0 0$30 do var cr , time ;
11895: GO 11897
11897: DISABLE
11898: LD_INT 0
11900: PPUSH
11901: PPUSH
// begin time := 0 0$10 ;
11902: LD_ADDR_VAR 0 2
11906: PUSH
11907: LD_INT 350
11909: ST_TO_ADDR
// while game do
11910: LD_EXP 2
11914: IFFALSE 12048
// begin wait ( time ) ;
11916: LD_VAR 0 2
11920: PPUSH
11921: CALL_OW 67
// time := time + 0 0$10 ;
11925: LD_ADDR_VAR 0 2
11929: PUSH
11930: LD_VAR 0 2
11934: PUSH
11935: LD_INT 350
11937: PLUS
11938: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , area_crates_russian , true ) ;
11939: LD_INT 1
11941: PPUSH
11942: LD_INT 5
11944: PPUSH
11945: CALL_OW 12
11949: PPUSH
11950: LD_INT 11
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: CALL_OW 55
// cr := rand ( 1 , 3 ) ;
11960: LD_ADDR_VAR 0 1
11964: PUSH
11965: LD_INT 1
11967: PPUSH
11968: LD_INT 3
11970: PPUSH
11971: CALL_OW 12
11975: ST_TO_ADDR
// if cr = 1 then
11976: LD_VAR 0 1
11980: PUSH
11981: LD_INT 1
11983: EQUAL
11984: IFFALSE 12028
// begin wait ( rand ( 0 0$20 , 0 0$45 ) ) ;
11986: LD_INT 700
11988: PPUSH
11989: LD_INT 1575
11991: PPUSH
11992: CALL_OW 12
11996: PPUSH
11997: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 34 , 50 , 7 , true ) ;
12001: LD_INT 1
12003: PPUSH
12004: LD_INT 5
12006: PPUSH
12007: CALL_OW 12
12011: PPUSH
12012: LD_INT 34
12014: PPUSH
12015: LD_INT 50
12017: PPUSH
12018: LD_INT 7
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL_OW 56
// end ; if time > 8 8$00 then
12028: LD_VAR 0 2
12032: PUSH
12033: LD_INT 16800
12035: GREATER
12036: IFFALSE 12046
// time := 0 0$40 ;
12038: LD_ADDR_VAR 0 2
12042: PUSH
12043: LD_INT 1400
12045: ST_TO_ADDR
// end ;
12046: GO 11910
// end ; end_of_file
12048: PPOPN 2
12050: END
// export function PrepareAmericanAttack ; var i , tmp , veh , flags , _target ; begin
12051: LD_INT 0
12053: PPUSH
12054: PPUSH
12055: PPUSH
12056: PPUSH
12057: PPUSH
12058: PPUSH
// uc_side := 1 ;
12059: LD_ADDR_OWVAR 20
12063: PUSH
12064: LD_INT 1
12066: ST_TO_ADDR
// uc_nation := 1 ;
12067: LD_ADDR_OWVAR 21
12071: PUSH
12072: LD_INT 1
12074: ST_TO_ADDR
// InitHc ;
12075: CALL_OW 19
// InitVc ;
12079: CALL_OW 20
// tmp := [ ] ;
12083: LD_ADDR_VAR 0 3
12087: PUSH
12088: EMPTY
12089: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
12090: LD_ADDR_VAR 0 5
12094: PUSH
12095: LD_INT 0
12097: PUSH
12098: LD_INT 0
12100: PUSH
12101: LD_INT 0
12103: PUSH
12104: LD_INT 0
12106: PUSH
12107: LD_INT 0
12109: PUSH
12110: LD_INT 0
12112: PUSH
12113: LD_INT 0
12115: PUSH
12116: LD_INT 0
12118: PUSH
12119: LD_INT 1
12121: PUSH
12122: LD_INT 0
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: ST_TO_ADDR
// _target := [ [ 71 , 34 ] , [ 63 , 49 ] ] ;
12137: LD_ADDR_VAR 0 6
12141: PUSH
12142: LD_INT 71
12144: PUSH
12145: LD_INT 34
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 63
12154: PUSH
12155: LD_INT 49
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
12166: LD_ADDR_VAR 0 2
12170: PUSH
12171: DOUBLE
12172: LD_INT 1
12174: DEC
12175: ST_TO_ADDR
12176: LD_INT 4
12178: PUSH
12179: LD_INT 5
12181: PUSH
12182: LD_INT 6
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: LIST
12189: PUSH
12190: LD_OWVAR 67
12194: ARRAY
12195: PUSH
12196: FOR_TO
12197: IFFALSE 12334
// begin PrepareVehicle ( [ us_medium_wheeled , us_heavy_tracked , us_morphling ] [ rand ( 1 , 3 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ us_laser , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 78 ) ;
12199: LD_INT 2
12201: PUSH
12202: LD_INT 4
12204: PUSH
12205: LD_INT 5
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: LIST
12212: PUSH
12213: LD_INT 1
12215: PPUSH
12216: LD_INT 3
12218: PPUSH
12219: CALL_OW 12
12223: ARRAY
12224: PPUSH
12225: LD_INT 1
12227: PUSH
12228: LD_INT 3
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PUSH
12235: LD_INT 1
12237: PPUSH
12238: LD_INT 2
12240: PPUSH
12241: CALL_OW 12
12245: ARRAY
12246: PPUSH
12247: LD_INT 3
12249: PPUSH
12250: LD_INT 9
12252: PUSH
12253: LD_INT 7
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 1
12262: PPUSH
12263: LD_INT 2
12265: PPUSH
12266: CALL_OW 12
12270: ARRAY
12271: PPUSH
12272: LD_INT 78
12274: PPUSH
12275: CALL 18465 0 5
// veh := CreateVehicle ;
12279: LD_ADDR_VAR 0 4
12283: PUSH
12284: CALL_OW 45
12288: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12289: LD_VAR 0 4
12293: PPUSH
12294: LD_INT 2
12296: PPUSH
12297: CALL_OW 233
// PlaceUnitArea ( veh , north_spawn , false ) ;
12301: LD_VAR 0 4
12305: PPUSH
12306: LD_INT 17
12308: PPUSH
12309: LD_INT 0
12311: PPUSH
12312: CALL_OW 49
// tmp := tmp union veh ;
12316: LD_ADDR_VAR 0 3
12320: PUSH
12321: LD_VAR 0 3
12325: PUSH
12326: LD_VAR 0 4
12330: UNION
12331: ST_TO_ADDR
// end ;
12332: GO 12196
12334: POP
12335: POP
// if not tmp then
12336: LD_VAR 0 3
12340: NOT
12341: IFFALSE 12345
// exit ;
12343: GO 12388
// if not first_powell_attack then
12345: LD_EXP 11
12349: NOT
12350: IFFALSE 12360
// first_powell_attack := true ;
12352: LD_ADDR_EXP 11
12356: PUSH
12357: LD_INT 1
12359: ST_TO_ADDR
// Attack ( [ 0 , tmp , _target , flags ] ) ;
12360: LD_INT 0
12362: PUSH
12363: LD_VAR 0 3
12367: PUSH
12368: LD_VAR 0 6
12372: PUSH
12373: LD_VAR 0 5
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: PPUSH
12384: CALL 46362 0 1
// end ; end_of_file
12388: LD_VAR 0 1
12392: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
12393: LD_INT 0
12395: PPUSH
12396: PPUSH
// if exist_mode then
12397: LD_VAR 0 2
12401: IFFALSE 12426
// unit := CreateCharacter ( prefix & ident ) else
12403: LD_ADDR_VAR 0 5
12407: PUSH
12408: LD_VAR 0 3
12412: PUSH
12413: LD_VAR 0 1
12417: STR
12418: PPUSH
12419: CALL_OW 34
12423: ST_TO_ADDR
12424: GO 12441
// unit := NewCharacter ( ident ) ;
12426: LD_ADDR_VAR 0 5
12430: PUSH
12431: LD_VAR 0 1
12435: PPUSH
12436: CALL_OW 25
12440: ST_TO_ADDR
// result := unit ;
12441: LD_ADDR_VAR 0 4
12445: PUSH
12446: LD_VAR 0 5
12450: ST_TO_ADDR
// end ;
12451: LD_VAR 0 4
12455: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
12456: LD_INT 0
12458: PPUSH
12459: PPUSH
// if not side or not nation then
12460: LD_VAR 0 1
12464: NOT
12465: PUSH
12466: LD_VAR 0 2
12470: NOT
12471: OR
12472: IFFALSE 12476
// exit ;
12474: GO 13088
// case nation of nation_american :
12476: LD_VAR 0 2
12480: PUSH
12481: LD_INT 1
12483: DOUBLE
12484: EQUAL
12485: IFTRUE 12489
12487: GO 12647
12489: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
12490: LD_ADDR_VAR 0 4
12494: PUSH
12495: LD_INT 35
12497: PUSH
12498: LD_INT 45
12500: PUSH
12501: LD_INT 46
12503: PUSH
12504: LD_INT 47
12506: PUSH
12507: LD_INT 1
12509: PUSH
12510: LD_INT 2
12512: PUSH
12513: LD_INT 6
12515: PUSH
12516: LD_INT 15
12518: PUSH
12519: LD_INT 16
12521: PUSH
12522: LD_INT 7
12524: PUSH
12525: LD_INT 12
12527: PUSH
12528: LD_INT 13
12530: PUSH
12531: LD_INT 10
12533: PUSH
12534: LD_INT 14
12536: PUSH
12537: LD_INT 20
12539: PUSH
12540: LD_INT 25
12542: PUSH
12543: LD_INT 36
12545: PUSH
12546: LD_INT 69
12548: PUSH
12549: LD_INT 39
12551: PUSH
12552: LD_INT 34
12554: PUSH
12555: LD_INT 40
12557: PUSH
12558: LD_INT 48
12560: PUSH
12561: LD_INT 49
12563: PUSH
12564: LD_INT 50
12566: PUSH
12567: LD_INT 51
12569: PUSH
12570: LD_INT 52
12572: PUSH
12573: LD_INT 53
12575: PUSH
12576: LD_INT 54
12578: PUSH
12579: LD_INT 55
12581: PUSH
12582: LD_INT 56
12584: PUSH
12585: LD_INT 57
12587: PUSH
12588: LD_INT 58
12590: PUSH
12591: LD_INT 59
12593: PUSH
12594: LD_INT 60
12596: PUSH
12597: LD_INT 61
12599: PUSH
12600: LD_INT 62
12602: PUSH
12603: LD_INT 80
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: ST_TO_ADDR
12645: GO 13012
12647: LD_INT 2
12649: DOUBLE
12650: EQUAL
12651: IFTRUE 12655
12653: GO 12825
12655: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
12656: LD_ADDR_VAR 0 4
12660: PUSH
12661: LD_INT 35
12663: PUSH
12664: LD_INT 45
12666: PUSH
12667: LD_INT 46
12669: PUSH
12670: LD_INT 47
12672: PUSH
12673: LD_INT 70
12675: PUSH
12676: LD_INT 1
12678: PUSH
12679: LD_INT 11
12681: PUSH
12682: LD_INT 3
12684: PUSH
12685: LD_INT 4
12687: PUSH
12688: LD_INT 5
12690: PUSH
12691: LD_INT 6
12693: PUSH
12694: LD_INT 15
12696: PUSH
12697: LD_INT 18
12699: PUSH
12700: LD_INT 7
12702: PUSH
12703: LD_INT 17
12705: PUSH
12706: LD_INT 8
12708: PUSH
12709: LD_INT 20
12711: PUSH
12712: LD_INT 72
12714: PUSH
12715: LD_INT 26
12717: PUSH
12718: LD_INT 69
12720: PUSH
12721: LD_INT 39
12723: PUSH
12724: LD_INT 40
12726: PUSH
12727: LD_INT 41
12729: PUSH
12730: LD_INT 42
12732: PUSH
12733: LD_INT 43
12735: PUSH
12736: LD_INT 48
12738: PUSH
12739: LD_INT 49
12741: PUSH
12742: LD_INT 50
12744: PUSH
12745: LD_INT 51
12747: PUSH
12748: LD_INT 52
12750: PUSH
12751: LD_INT 53
12753: PUSH
12754: LD_INT 54
12756: PUSH
12757: LD_INT 55
12759: PUSH
12760: LD_INT 56
12762: PUSH
12763: LD_INT 60
12765: PUSH
12766: LD_INT 61
12768: PUSH
12769: LD_INT 62
12771: PUSH
12772: LD_INT 66
12774: PUSH
12775: LD_INT 67
12777: PUSH
12778: LD_INT 68
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: ST_TO_ADDR
12823: GO 13012
12825: LD_INT 3
12827: DOUBLE
12828: EQUAL
12829: IFTRUE 12833
12831: GO 13011
12833: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
12834: LD_ADDR_VAR 0 4
12838: PUSH
12839: LD_INT 46
12841: PUSH
12842: LD_INT 47
12844: PUSH
12845: LD_INT 1
12847: PUSH
12848: LD_INT 2
12850: PUSH
12851: LD_INT 11
12853: PUSH
12854: LD_INT 9
12856: PUSH
12857: LD_INT 20
12859: PUSH
12860: LD_INT 19
12862: PUSH
12863: LD_INT 21
12865: PUSH
12866: LD_INT 24
12868: PUSH
12869: LD_INT 22
12871: PUSH
12872: LD_INT 25
12874: PUSH
12875: LD_INT 28
12877: PUSH
12878: LD_INT 29
12880: PUSH
12881: LD_INT 31
12883: PUSH
12884: LD_INT 37
12886: PUSH
12887: LD_INT 38
12889: PUSH
12890: LD_INT 32
12892: PUSH
12893: LD_INT 27
12895: PUSH
12896: LD_INT 33
12898: PUSH
12899: LD_INT 69
12901: PUSH
12902: LD_INT 39
12904: PUSH
12905: LD_INT 34
12907: PUSH
12908: LD_INT 40
12910: PUSH
12911: LD_INT 71
12913: PUSH
12914: LD_INT 23
12916: PUSH
12917: LD_INT 44
12919: PUSH
12920: LD_INT 48
12922: PUSH
12923: LD_INT 49
12925: PUSH
12926: LD_INT 50
12928: PUSH
12929: LD_INT 51
12931: PUSH
12932: LD_INT 52
12934: PUSH
12935: LD_INT 53
12937: PUSH
12938: LD_INT 54
12940: PUSH
12941: LD_INT 55
12943: PUSH
12944: LD_INT 56
12946: PUSH
12947: LD_INT 57
12949: PUSH
12950: LD_INT 58
12952: PUSH
12953: LD_INT 59
12955: PUSH
12956: LD_INT 63
12958: PUSH
12959: LD_INT 64
12961: PUSH
12962: LD_INT 65
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: ST_TO_ADDR
13009: GO 13012
13011: POP
// if state > - 1 and state < 3 then
13012: LD_VAR 0 3
13016: PUSH
13017: LD_INT 1
13019: NEG
13020: GREATER
13021: PUSH
13022: LD_VAR 0 3
13026: PUSH
13027: LD_INT 3
13029: LESS
13030: AND
13031: IFFALSE 13088
// for i in result do
13033: LD_ADDR_VAR 0 5
13037: PUSH
13038: LD_VAR 0 4
13042: PUSH
13043: FOR_IN
13044: IFFALSE 13086
// if GetTech ( i , side ) <> state then
13046: LD_VAR 0 5
13050: PPUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 321
13060: PUSH
13061: LD_VAR 0 3
13065: NONEQUAL
13066: IFFALSE 13084
// result := result diff i ;
13068: LD_ADDR_VAR 0 4
13072: PUSH
13073: LD_VAR 0 4
13077: PUSH
13078: LD_VAR 0 5
13082: DIFF
13083: ST_TO_ADDR
13084: GO 13043
13086: POP
13087: POP
// end ;
13088: LD_VAR 0 4
13092: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
13093: LD_INT 0
13095: PPUSH
13096: PPUSH
13097: PPUSH
// result := true ;
13098: LD_ADDR_VAR 0 3
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
13106: LD_ADDR_VAR 0 5
13110: PUSH
13111: LD_VAR 0 2
13115: PPUSH
13116: CALL_OW 480
13120: ST_TO_ADDR
// if not tmp then
13121: LD_VAR 0 5
13125: NOT
13126: IFFALSE 13130
// exit ;
13128: GO 13179
// for i in tmp do
13130: LD_ADDR_VAR 0 4
13134: PUSH
13135: LD_VAR 0 5
13139: PUSH
13140: FOR_IN
13141: IFFALSE 13177
// if GetTech ( i , side ) <> state_researched then
13143: LD_VAR 0 4
13147: PPUSH
13148: LD_VAR 0 1
13152: PPUSH
13153: CALL_OW 321
13157: PUSH
13158: LD_INT 2
13160: NONEQUAL
13161: IFFALSE 13175
// begin result := false ;
13163: LD_ADDR_VAR 0 3
13167: PUSH
13168: LD_INT 0
13170: ST_TO_ADDR
// exit ;
13171: POP
13172: POP
13173: GO 13179
// end ;
13175: GO 13140
13177: POP
13178: POP
// end ;
13179: LD_VAR 0 3
13183: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
13184: LD_INT 0
13186: PPUSH
13187: PPUSH
13188: PPUSH
13189: PPUSH
13190: PPUSH
13191: PPUSH
13192: PPUSH
13193: PPUSH
13194: PPUSH
13195: PPUSH
13196: PPUSH
13197: PPUSH
13198: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
13199: LD_VAR 0 1
13203: NOT
13204: PUSH
13205: LD_VAR 0 1
13209: PPUSH
13210: CALL_OW 257
13214: PUSH
13215: LD_INT 9
13217: NONEQUAL
13218: OR
13219: IFFALSE 13223
// exit ;
13221: GO 13796
// side := GetSide ( unit ) ;
13223: LD_ADDR_VAR 0 9
13227: PUSH
13228: LD_VAR 0 1
13232: PPUSH
13233: CALL_OW 255
13237: ST_TO_ADDR
// tech_space := tech_spacanom ;
13238: LD_ADDR_VAR 0 12
13242: PUSH
13243: LD_INT 29
13245: ST_TO_ADDR
// tech_time := tech_taurad ;
13246: LD_ADDR_VAR 0 13
13250: PUSH
13251: LD_INT 28
13253: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
13254: LD_ADDR_VAR 0 11
13258: PUSH
13259: LD_VAR 0 1
13263: PPUSH
13264: CALL_OW 310
13268: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
13269: LD_VAR 0 11
13273: PPUSH
13274: CALL_OW 247
13278: PUSH
13279: LD_INT 2
13281: EQUAL
13282: IFFALSE 13286
// exit ;
13284: GO 13796
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13286: LD_ADDR_VAR 0 8
13290: PUSH
13291: LD_INT 81
13293: PUSH
13294: LD_VAR 0 9
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PUSH
13303: LD_INT 3
13305: PUSH
13306: LD_INT 21
13308: PUSH
13309: LD_INT 3
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PPUSH
13324: CALL_OW 69
13328: ST_TO_ADDR
// if not tmp then
13329: LD_VAR 0 8
13333: NOT
13334: IFFALSE 13338
// exit ;
13336: GO 13796
// if in_unit then
13338: LD_VAR 0 11
13342: IFFALSE 13366
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
13344: LD_ADDR_VAR 0 10
13348: PUSH
13349: LD_VAR 0 8
13353: PPUSH
13354: LD_VAR 0 11
13358: PPUSH
13359: CALL_OW 74
13363: ST_TO_ADDR
13364: GO 13386
// enemy := NearestUnitToUnit ( tmp , unit ) ;
13366: LD_ADDR_VAR 0 10
13370: PUSH
13371: LD_VAR 0 8
13375: PPUSH
13376: LD_VAR 0 1
13380: PPUSH
13381: CALL_OW 74
13385: ST_TO_ADDR
// if not enemy then
13386: LD_VAR 0 10
13390: NOT
13391: IFFALSE 13395
// exit ;
13393: GO 13796
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
13395: LD_VAR 0 11
13399: PUSH
13400: LD_VAR 0 11
13404: PPUSH
13405: LD_VAR 0 10
13409: PPUSH
13410: CALL_OW 296
13414: PUSH
13415: LD_INT 13
13417: GREATER
13418: AND
13419: PUSH
13420: LD_VAR 0 1
13424: PPUSH
13425: LD_VAR 0 10
13429: PPUSH
13430: CALL_OW 296
13434: PUSH
13435: LD_INT 12
13437: GREATER
13438: OR
13439: IFFALSE 13443
// exit ;
13441: GO 13796
// missile := [ 1 ] ;
13443: LD_ADDR_VAR 0 14
13447: PUSH
13448: LD_INT 1
13450: PUSH
13451: EMPTY
13452: LIST
13453: ST_TO_ADDR
// if Researched ( side , tech_space ) then
13454: LD_VAR 0 9
13458: PPUSH
13459: LD_VAR 0 12
13463: PPUSH
13464: CALL_OW 325
13468: IFFALSE 13497
// missile := Insert ( missile , missile + 1 , 2 ) ;
13470: LD_ADDR_VAR 0 14
13474: PUSH
13475: LD_VAR 0 14
13479: PPUSH
13480: LD_VAR 0 14
13484: PUSH
13485: LD_INT 1
13487: PLUS
13488: PPUSH
13489: LD_INT 2
13491: PPUSH
13492: CALL_OW 2
13496: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
13497: LD_VAR 0 9
13501: PPUSH
13502: LD_VAR 0 13
13506: PPUSH
13507: CALL_OW 325
13511: PUSH
13512: LD_VAR 0 10
13516: PPUSH
13517: CALL_OW 255
13521: PPUSH
13522: LD_VAR 0 13
13526: PPUSH
13527: CALL_OW 325
13531: NOT
13532: AND
13533: IFFALSE 13562
// missile := Insert ( missile , missile + 1 , 3 ) ;
13535: LD_ADDR_VAR 0 14
13539: PUSH
13540: LD_VAR 0 14
13544: PPUSH
13545: LD_VAR 0 14
13549: PUSH
13550: LD_INT 1
13552: PLUS
13553: PPUSH
13554: LD_INT 3
13556: PPUSH
13557: CALL_OW 2
13561: ST_TO_ADDR
// if missile < 2 then
13562: LD_VAR 0 14
13566: PUSH
13567: LD_INT 2
13569: LESS
13570: IFFALSE 13574
// exit ;
13572: GO 13796
// x := GetX ( enemy ) ;
13574: LD_ADDR_VAR 0 4
13578: PUSH
13579: LD_VAR 0 10
13583: PPUSH
13584: CALL_OW 250
13588: ST_TO_ADDR
// y := GetY ( enemy ) ;
13589: LD_ADDR_VAR 0 5
13593: PUSH
13594: LD_VAR 0 10
13598: PPUSH
13599: CALL_OW 251
13603: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
13604: LD_ADDR_VAR 0 6
13608: PUSH
13609: LD_VAR 0 4
13613: PUSH
13614: LD_INT 1
13616: NEG
13617: PPUSH
13618: LD_INT 1
13620: PPUSH
13621: CALL_OW 12
13625: PLUS
13626: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
13627: LD_ADDR_VAR 0 7
13631: PUSH
13632: LD_VAR 0 5
13636: PUSH
13637: LD_INT 1
13639: NEG
13640: PPUSH
13641: LD_INT 1
13643: PPUSH
13644: CALL_OW 12
13648: PLUS
13649: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13650: LD_VAR 0 6
13654: PPUSH
13655: LD_VAR 0 7
13659: PPUSH
13660: CALL_OW 488
13664: NOT
13665: IFFALSE 13687
// begin _x := x ;
13667: LD_ADDR_VAR 0 6
13671: PUSH
13672: LD_VAR 0 4
13676: ST_TO_ADDR
// _y := y ;
13677: LD_ADDR_VAR 0 7
13681: PUSH
13682: LD_VAR 0 5
13686: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
13687: LD_ADDR_VAR 0 3
13691: PUSH
13692: LD_INT 1
13694: PPUSH
13695: LD_VAR 0 14
13699: PPUSH
13700: CALL_OW 12
13704: ST_TO_ADDR
// case i of 1 :
13705: LD_VAR 0 3
13709: PUSH
13710: LD_INT 1
13712: DOUBLE
13713: EQUAL
13714: IFTRUE 13718
13716: GO 13735
13718: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
13719: LD_VAR 0 1
13723: PPUSH
13724: LD_VAR 0 10
13728: PPUSH
13729: CALL_OW 115
13733: GO 13796
13735: LD_INT 2
13737: DOUBLE
13738: EQUAL
13739: IFTRUE 13743
13741: GO 13765
13743: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
13744: LD_VAR 0 1
13748: PPUSH
13749: LD_VAR 0 6
13753: PPUSH
13754: LD_VAR 0 7
13758: PPUSH
13759: CALL_OW 153
13763: GO 13796
13765: LD_INT 3
13767: DOUBLE
13768: EQUAL
13769: IFTRUE 13773
13771: GO 13795
13773: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
13774: LD_VAR 0 1
13778: PPUSH
13779: LD_VAR 0 6
13783: PPUSH
13784: LD_VAR 0 7
13788: PPUSH
13789: CALL_OW 154
13793: GO 13796
13795: POP
// end ;
13796: LD_VAR 0 2
13800: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
13801: LD_INT 0
13803: PPUSH
13804: PPUSH
13805: PPUSH
13806: PPUSH
13807: PPUSH
13808: PPUSH
// if not unit or not building then
13809: LD_VAR 0 1
13813: NOT
13814: PUSH
13815: LD_VAR 0 2
13819: NOT
13820: OR
13821: IFFALSE 13825
// exit ;
13823: GO 13980
// x := GetX ( building ) ;
13825: LD_ADDR_VAR 0 5
13829: PUSH
13830: LD_VAR 0 2
13834: PPUSH
13835: CALL_OW 250
13839: ST_TO_ADDR
// y := GetY ( building ) ;
13840: LD_ADDR_VAR 0 6
13844: PUSH
13845: LD_VAR 0 2
13849: PPUSH
13850: CALL_OW 251
13854: ST_TO_ADDR
// for i = 0 to 5 do
13855: LD_ADDR_VAR 0 4
13859: PUSH
13860: DOUBLE
13861: LD_INT 0
13863: DEC
13864: ST_TO_ADDR
13865: LD_INT 5
13867: PUSH
13868: FOR_TO
13869: IFFALSE 13978
// begin _x := ShiftX ( x , i , 3 ) ;
13871: LD_ADDR_VAR 0 7
13875: PUSH
13876: LD_VAR 0 5
13880: PPUSH
13881: LD_VAR 0 4
13885: PPUSH
13886: LD_INT 3
13888: PPUSH
13889: CALL_OW 272
13893: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13894: LD_ADDR_VAR 0 8
13898: PUSH
13899: LD_VAR 0 6
13903: PPUSH
13904: LD_VAR 0 4
13908: PPUSH
13909: LD_INT 3
13911: PPUSH
13912: CALL_OW 273
13916: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
13917: LD_VAR 0 7
13921: PPUSH
13922: LD_VAR 0 8
13926: PPUSH
13927: CALL_OW 428
13931: PUSH
13932: LD_INT 0
13934: EQUAL
13935: PUSH
13936: LD_VAR 0 7
13940: PPUSH
13941: LD_VAR 0 8
13945: PPUSH
13946: CALL_OW 488
13950: AND
13951: IFFALSE 13976
// begin ComMoveXY ( unit , _x , _y ) ;
13953: LD_VAR 0 1
13957: PPUSH
13958: LD_VAR 0 7
13962: PPUSH
13963: LD_VAR 0 8
13967: PPUSH
13968: CALL_OW 111
// exit ;
13972: POP
13973: POP
13974: GO 13980
// end ; end ;
13976: GO 13868
13978: POP
13979: POP
// end ;
13980: LD_VAR 0 3
13984: RET
// export function ScanBase ( side , base_area ) ; begin
13985: LD_INT 0
13987: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
13988: LD_ADDR_VAR 0 3
13992: PUSH
13993: LD_VAR 0 2
13997: PPUSH
13998: LD_INT 81
14000: PUSH
14001: LD_VAR 0 1
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PPUSH
14010: CALL_OW 70
14014: ST_TO_ADDR
// end ;
14015: LD_VAR 0 3
14019: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
14020: LD_INT 0
14022: PPUSH
14023: PPUSH
14024: PPUSH
14025: PPUSH
14026: PPUSH
14027: PPUSH
14028: PPUSH
14029: PPUSH
14030: PPUSH
14031: PPUSH
14032: PPUSH
14033: PPUSH
14034: PPUSH
14035: PPUSH
14036: PPUSH
14037: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
14038: LD_ADDR_VAR 0 12
14042: PUSH
14043: LD_EXP 57
14047: PUSH
14048: LD_VAR 0 1
14052: ARRAY
14053: PPUSH
14054: LD_INT 25
14056: PUSH
14057: LD_INT 3
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PPUSH
14064: CALL_OW 72
14068: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
14069: LD_ADDR_VAR 0 8
14073: PUSH
14074: LD_EXP 57
14078: PUSH
14079: LD_VAR 0 1
14083: ARRAY
14084: PPUSH
14085: LD_INT 2
14087: PUSH
14088: LD_INT 25
14090: PUSH
14091: LD_INT 1
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 25
14100: PUSH
14101: LD_INT 5
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: LD_INT 25
14110: PUSH
14111: LD_INT 8
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: PUSH
14118: LD_INT 25
14120: PUSH
14121: LD_INT 9
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: PPUSH
14135: CALL_OW 72
14139: ST_TO_ADDR
// if not defenders and not solds then
14140: LD_VAR 0 2
14144: NOT
14145: PUSH
14146: LD_VAR 0 8
14150: NOT
14151: AND
14152: IFFALSE 14156
// exit ;
14154: GO 15522
// depot_under_attack := false ;
14156: LD_ADDR_VAR 0 16
14160: PUSH
14161: LD_INT 0
14163: ST_TO_ADDR
// sold_defenders := [ ] ;
14164: LD_ADDR_VAR 0 17
14168: PUSH
14169: EMPTY
14170: ST_TO_ADDR
// if mechs then
14171: LD_VAR 0 12
14175: IFFALSE 14304
// for i in defenders do
14177: LD_ADDR_VAR 0 5
14181: PUSH
14182: LD_VAR 0 2
14186: PUSH
14187: FOR_IN
14188: IFFALSE 14302
// begin SetTag ( i , 20 ) ;
14190: LD_VAR 0 5
14194: PPUSH
14195: LD_INT 20
14197: PPUSH
14198: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
14202: LD_VAR 0 5
14206: PPUSH
14207: CALL_OW 263
14211: PUSH
14212: LD_INT 1
14214: EQUAL
14215: PUSH
14216: LD_VAR 0 5
14220: PPUSH
14221: CALL_OW 311
14225: NOT
14226: AND
14227: PUSH
14228: LD_VAR 0 12
14232: AND
14233: IFFALSE 14300
// begin un := mechs [ 1 ] ;
14235: LD_ADDR_VAR 0 10
14239: PUSH
14240: LD_VAR 0 12
14244: PUSH
14245: LD_INT 1
14247: ARRAY
14248: ST_TO_ADDR
// ComExitBuilding ( un ) ;
14249: LD_VAR 0 10
14253: PPUSH
14254: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
14258: LD_VAR 0 10
14262: PPUSH
14263: LD_VAR 0 5
14267: PPUSH
14268: CALL_OW 180
// SetTag ( un , 19 ) ;
14272: LD_VAR 0 10
14276: PPUSH
14277: LD_INT 19
14279: PPUSH
14280: CALL_OW 109
// mechs := mechs diff un ;
14284: LD_ADDR_VAR 0 12
14288: PUSH
14289: LD_VAR 0 12
14293: PUSH
14294: LD_VAR 0 10
14298: DIFF
14299: ST_TO_ADDR
// end ; end ;
14300: GO 14187
14302: POP
14303: POP
// if solds then
14304: LD_VAR 0 8
14308: IFFALSE 14367
// for i in solds do
14310: LD_ADDR_VAR 0 5
14314: PUSH
14315: LD_VAR 0 8
14319: PUSH
14320: FOR_IN
14321: IFFALSE 14365
// if not GetTag ( i ) then
14323: LD_VAR 0 5
14327: PPUSH
14328: CALL_OW 110
14332: NOT
14333: IFFALSE 14363
// begin defenders := defenders union i ;
14335: LD_ADDR_VAR 0 2
14339: PUSH
14340: LD_VAR 0 2
14344: PUSH
14345: LD_VAR 0 5
14349: UNION
14350: ST_TO_ADDR
// SetTag ( i , 18 ) ;
14351: LD_VAR 0 5
14355: PPUSH
14356: LD_INT 18
14358: PPUSH
14359: CALL_OW 109
// end ;
14363: GO 14320
14365: POP
14366: POP
// repeat wait ( 0 0$1 ) ;
14367: LD_INT 35
14369: PPUSH
14370: CALL_OW 67
// enemy := mc_scan [ base ] ;
14374: LD_ADDR_VAR 0 3
14378: PUSH
14379: LD_EXP 80
14383: PUSH
14384: LD_VAR 0 1
14388: ARRAY
14389: ST_TO_ADDR
// for i in defenders do
14390: LD_ADDR_VAR 0 5
14394: PUSH
14395: LD_VAR 0 2
14399: PUSH
14400: FOR_IN
14401: IFFALSE 15086
// begin e := NearestUnitToUnit ( enemy , i ) ;
14403: LD_ADDR_VAR 0 13
14407: PUSH
14408: LD_VAR 0 3
14412: PPUSH
14413: LD_VAR 0 5
14417: PPUSH
14418: CALL_OW 74
14422: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
14423: LD_ADDR_VAR 0 16
14427: PUSH
14428: LD_EXP 57
14432: PUSH
14433: LD_VAR 0 1
14437: ARRAY
14438: PPUSH
14439: LD_INT 2
14441: PUSH
14442: LD_INT 30
14444: PUSH
14445: LD_INT 0
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 30
14454: PUSH
14455: LD_INT 1
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: LIST
14466: PPUSH
14467: CALL_OW 72
14471: NOT
14472: PUSH
14473: LD_EXP 57
14477: PUSH
14478: LD_VAR 0 1
14482: ARRAY
14483: PPUSH
14484: LD_INT 2
14486: PUSH
14487: LD_INT 30
14489: PUSH
14490: LD_INT 0
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 30
14499: PUSH
14500: LD_INT 1
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: LIST
14511: PPUSH
14512: CALL_OW 72
14516: PPUSH
14517: CALL_OW 256
14521: PUSH
14522: LD_INT 600
14524: LESS
14525: OR
14526: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
14527: LD_VAR 0 5
14531: PPUSH
14532: CALL_OW 247
14536: PUSH
14537: LD_INT 2
14539: DOUBLE
14540: EQUAL
14541: IFTRUE 14545
14543: GO 14792
14545: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
14546: LD_VAR 0 5
14550: PPUSH
14551: CALL_OW 256
14555: PUSH
14556: LD_INT 650
14558: GREATER
14559: PUSH
14560: LD_VAR 0 5
14564: PPUSH
14565: LD_VAR 0 13
14569: PPUSH
14570: CALL_OW 296
14574: PUSH
14575: LD_INT 40
14577: LESS
14578: AND
14579: IFFALSE 14597
// ComAttackUnit ( i , e ) else
14581: LD_VAR 0 5
14585: PPUSH
14586: LD_VAR 0 13
14590: PPUSH
14591: CALL_OW 115
14595: GO 14675
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
14597: LD_VAR 0 5
14601: PPUSH
14602: LD_VAR 0 13
14606: PPUSH
14607: CALL_OW 296
14611: PUSH
14612: LD_INT 30
14614: GREATEREQUAL
14615: PUSH
14616: LD_VAR 0 5
14620: PPUSH
14621: CALL_OW 256
14625: PUSH
14626: LD_INT 650
14628: LESSEQUAL
14629: OR
14630: PUSH
14631: LD_VAR 0 5
14635: PPUSH
14636: LD_EXP 81
14640: PUSH
14641: LD_VAR 0 1
14645: ARRAY
14646: PPUSH
14647: CALL_OW 308
14651: NOT
14652: AND
14653: IFFALSE 14675
// ComMoveToArea ( i , mc_parking [ base ] ) ;
14655: LD_VAR 0 5
14659: PPUSH
14660: LD_EXP 81
14664: PUSH
14665: LD_VAR 0 1
14669: ARRAY
14670: PPUSH
14671: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
14675: LD_VAR 0 5
14679: PPUSH
14680: CALL_OW 256
14684: PUSH
14685: LD_INT 998
14687: LESS
14688: PUSH
14689: LD_VAR 0 5
14693: PPUSH
14694: CALL_OW 263
14698: PUSH
14699: LD_INT 1
14701: EQUAL
14702: AND
14703: PUSH
14704: LD_VAR 0 5
14708: PPUSH
14709: CALL_OW 311
14713: AND
14714: PUSH
14715: LD_VAR 0 5
14719: PPUSH
14720: LD_EXP 81
14724: PUSH
14725: LD_VAR 0 1
14729: ARRAY
14730: PPUSH
14731: CALL_OW 308
14735: AND
14736: IFFALSE 14790
// begin mech := IsDrivenBy ( i ) ;
14738: LD_ADDR_VAR 0 9
14742: PUSH
14743: LD_VAR 0 5
14747: PPUSH
14748: CALL_OW 311
14752: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14753: LD_VAR 0 9
14757: PPUSH
14758: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14762: LD_VAR 0 9
14766: PPUSH
14767: LD_VAR 0 5
14771: PPUSH
14772: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
14776: LD_VAR 0 9
14780: PPUSH
14781: LD_VAR 0 5
14785: PPUSH
14786: CALL_OW 180
// end ; end ; unit_human :
14790: GO 15057
14792: LD_INT 1
14794: DOUBLE
14795: EQUAL
14796: IFTRUE 14800
14798: GO 15056
14800: POP
// begin b := IsInUnit ( i ) ;
14801: LD_ADDR_VAR 0 18
14805: PUSH
14806: LD_VAR 0 5
14810: PPUSH
14811: CALL_OW 310
14815: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
14816: LD_ADDR_VAR 0 19
14820: PUSH
14821: LD_VAR 0 18
14825: NOT
14826: PUSH
14827: LD_VAR 0 18
14831: PPUSH
14832: CALL_OW 266
14836: PUSH
14837: LD_INT 32
14839: PUSH
14840: LD_INT 31
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: IN
14847: OR
14848: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
14849: LD_VAR 0 16
14853: PUSH
14854: LD_VAR 0 2
14858: PPUSH
14859: LD_INT 21
14861: PUSH
14862: LD_INT 2
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PPUSH
14869: CALL_OW 72
14873: PUSH
14874: LD_INT 1
14876: LESSEQUAL
14877: OR
14878: PUSH
14879: LD_VAR 0 19
14883: AND
14884: PUSH
14885: LD_VAR 0 5
14889: PUSH
14890: LD_VAR 0 17
14894: IN
14895: NOT
14896: AND
14897: IFFALSE 14990
// begin if b then
14899: LD_VAR 0 18
14903: IFFALSE 14952
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
14905: LD_VAR 0 18
14909: PPUSH
14910: LD_VAR 0 3
14914: PPUSH
14915: LD_VAR 0 18
14919: PPUSH
14920: CALL_OW 74
14924: PPUSH
14925: CALL_OW 296
14929: PUSH
14930: LD_INT 10
14932: LESS
14933: PUSH
14934: LD_VAR 0 18
14938: PPUSH
14939: CALL_OW 461
14943: PUSH
14944: LD_INT 7
14946: NONEQUAL
14947: AND
14948: IFFALSE 14952
// continue ;
14950: GO 14400
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
14952: LD_ADDR_VAR 0 17
14956: PUSH
14957: LD_VAR 0 17
14961: PPUSH
14962: LD_VAR 0 17
14966: PUSH
14967: LD_INT 1
14969: PLUS
14970: PPUSH
14971: LD_VAR 0 5
14975: PPUSH
14976: CALL_OW 1
14980: ST_TO_ADDR
// ComExitBuilding ( i ) ;
14981: LD_VAR 0 5
14985: PPUSH
14986: CALL_OW 122
// end ; if sold_defenders then
14990: LD_VAR 0 17
14994: IFFALSE 15054
// if i in sold_defenders then
14996: LD_VAR 0 5
15000: PUSH
15001: LD_VAR 0 17
15005: IN
15006: IFFALSE 15054
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
15008: LD_VAR 0 5
15012: PPUSH
15013: CALL_OW 314
15017: NOT
15018: PUSH
15019: LD_VAR 0 5
15023: PPUSH
15024: LD_VAR 0 13
15028: PPUSH
15029: CALL_OW 296
15033: PUSH
15034: LD_INT 30
15036: LESS
15037: AND
15038: IFFALSE 15054
// ComAttackUnit ( i , e ) ;
15040: LD_VAR 0 5
15044: PPUSH
15045: LD_VAR 0 13
15049: PPUSH
15050: CALL_OW 115
// end ; end ; end ;
15054: GO 15057
15056: POP
// if IsDead ( i ) then
15057: LD_VAR 0 5
15061: PPUSH
15062: CALL_OW 301
15066: IFFALSE 15084
// defenders := defenders diff i ;
15068: LD_ADDR_VAR 0 2
15072: PUSH
15073: LD_VAR 0 2
15077: PUSH
15078: LD_VAR 0 5
15082: DIFF
15083: ST_TO_ADDR
// end ;
15084: GO 14400
15086: POP
15087: POP
// until not enemy or not defenders ;
15088: LD_VAR 0 3
15092: NOT
15093: PUSH
15094: LD_VAR 0 2
15098: NOT
15099: OR
15100: IFFALSE 14367
// MC_Reset ( base , 18 ) ;
15102: LD_VAR 0 1
15106: PPUSH
15107: LD_INT 18
15109: PPUSH
15110: CALL 51464 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
15114: LD_ADDR_VAR 0 2
15118: PUSH
15119: LD_VAR 0 2
15123: PUSH
15124: LD_VAR 0 2
15128: PPUSH
15129: LD_INT 2
15131: PUSH
15132: LD_INT 25
15134: PUSH
15135: LD_INT 1
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PUSH
15142: LD_INT 25
15144: PUSH
15145: LD_INT 5
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 25
15154: PUSH
15155: LD_INT 8
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: PUSH
15162: LD_INT 25
15164: PUSH
15165: LD_INT 9
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: PPUSH
15179: CALL_OW 72
15183: DIFF
15184: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
15185: LD_VAR 0 3
15189: NOT
15190: PUSH
15191: LD_VAR 0 2
15195: PPUSH
15196: LD_INT 21
15198: PUSH
15199: LD_INT 2
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PPUSH
15206: CALL_OW 72
15210: AND
15211: IFFALSE 15473
// begin tmp := FilterByTag ( defenders , 19 ) ;
15213: LD_ADDR_VAR 0 11
15217: PUSH
15218: LD_VAR 0 2
15222: PPUSH
15223: LD_INT 19
15225: PPUSH
15226: CALL 49756 0 2
15230: ST_TO_ADDR
// if tmp then
15231: LD_VAR 0 11
15235: IFFALSE 15305
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
15237: LD_ADDR_VAR 0 11
15241: PUSH
15242: LD_VAR 0 11
15246: PPUSH
15247: LD_INT 25
15249: PUSH
15250: LD_INT 3
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PPUSH
15257: CALL_OW 72
15261: ST_TO_ADDR
// if tmp then
15262: LD_VAR 0 11
15266: IFFALSE 15305
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
15268: LD_ADDR_EXP 69
15272: PUSH
15273: LD_EXP 69
15277: PPUSH
15278: LD_VAR 0 1
15282: PPUSH
15283: LD_EXP 69
15287: PUSH
15288: LD_VAR 0 1
15292: ARRAY
15293: PUSH
15294: LD_VAR 0 11
15298: UNION
15299: PPUSH
15300: CALL_OW 1
15304: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
15305: LD_VAR 0 1
15309: PPUSH
15310: LD_INT 19
15312: PPUSH
15313: CALL 51464 0 2
// repeat wait ( 0 0$1 ) ;
15317: LD_INT 35
15319: PPUSH
15320: CALL_OW 67
// for i in defenders do
15324: LD_ADDR_VAR 0 5
15328: PUSH
15329: LD_VAR 0 2
15333: PUSH
15334: FOR_IN
15335: IFFALSE 15424
// begin if not IsInArea ( i , mc_parking [ base ] ) then
15337: LD_VAR 0 5
15341: PPUSH
15342: LD_EXP 81
15346: PUSH
15347: LD_VAR 0 1
15351: ARRAY
15352: PPUSH
15353: CALL_OW 308
15357: NOT
15358: IFFALSE 15382
// ComMoveToArea ( i , mc_parking [ base ] ) else
15360: LD_VAR 0 5
15364: PPUSH
15365: LD_EXP 81
15369: PUSH
15370: LD_VAR 0 1
15374: ARRAY
15375: PPUSH
15376: CALL_OW 113
15380: GO 15422
// if GetControl ( i ) = control_manual then
15382: LD_VAR 0 5
15386: PPUSH
15387: CALL_OW 263
15391: PUSH
15392: LD_INT 1
15394: EQUAL
15395: IFFALSE 15422
// if IsDrivenBy ( i ) then
15397: LD_VAR 0 5
15401: PPUSH
15402: CALL_OW 311
15406: IFFALSE 15422
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
15408: LD_VAR 0 5
15412: PPUSH
15413: CALL_OW 311
15417: PPUSH
15418: CALL_OW 121
// end ;
15422: GO 15334
15424: POP
15425: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
15426: LD_VAR 0 2
15430: PPUSH
15431: LD_INT 95
15433: PUSH
15434: LD_EXP 81
15438: PUSH
15439: LD_VAR 0 1
15443: ARRAY
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PPUSH
15449: CALL_OW 72
15453: PUSH
15454: LD_VAR 0 2
15458: EQUAL
15459: PUSH
15460: LD_EXP 80
15464: PUSH
15465: LD_VAR 0 1
15469: ARRAY
15470: OR
15471: IFFALSE 15317
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
15473: LD_ADDR_EXP 79
15477: PUSH
15478: LD_EXP 79
15482: PPUSH
15483: LD_VAR 0 1
15487: PPUSH
15488: LD_EXP 79
15492: PUSH
15493: LD_VAR 0 1
15497: ARRAY
15498: PUSH
15499: LD_VAR 0 2
15503: UNION
15504: PPUSH
15505: CALL_OW 1
15509: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
15510: LD_VAR 0 1
15514: PPUSH
15515: LD_INT 20
15517: PPUSH
15518: CALL 51464 0 2
// end ;
15522: LD_VAR 0 4
15526: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15527: LD_INT 0
15529: PPUSH
15530: PPUSH
15531: PPUSH
15532: PPUSH
// result := false ;
15533: LD_ADDR_VAR 0 2
15537: PUSH
15538: LD_INT 0
15540: ST_TO_ADDR
// side := GetSide ( unit ) ;
15541: LD_ADDR_VAR 0 3
15545: PUSH
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 255
15555: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15556: LD_ADDR_VAR 0 4
15560: PUSH
15561: LD_VAR 0 1
15565: PPUSH
15566: CALL_OW 248
15570: ST_TO_ADDR
// case nat of 1 :
15571: LD_VAR 0 4
15575: PUSH
15576: LD_INT 1
15578: DOUBLE
15579: EQUAL
15580: IFTRUE 15584
15582: GO 15595
15584: POP
// tech := tech_lassight ; 2 :
15585: LD_ADDR_VAR 0 5
15589: PUSH
15590: LD_INT 12
15592: ST_TO_ADDR
15593: GO 15634
15595: LD_INT 2
15597: DOUBLE
15598: EQUAL
15599: IFTRUE 15603
15601: GO 15614
15603: POP
// tech := tech_mortar ; 3 :
15604: LD_ADDR_VAR 0 5
15608: PUSH
15609: LD_INT 41
15611: ST_TO_ADDR
15612: GO 15634
15614: LD_INT 3
15616: DOUBLE
15617: EQUAL
15618: IFTRUE 15622
15620: GO 15633
15622: POP
// tech := tech_bazooka ; end ;
15623: LD_ADDR_VAR 0 5
15627: PUSH
15628: LD_INT 44
15630: ST_TO_ADDR
15631: GO 15634
15633: POP
// if Researched ( side , tech ) then
15634: LD_VAR 0 3
15638: PPUSH
15639: LD_VAR 0 5
15643: PPUSH
15644: CALL_OW 325
15648: IFFALSE 15675
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15650: LD_ADDR_VAR 0 2
15654: PUSH
15655: LD_INT 5
15657: PUSH
15658: LD_INT 8
15660: PUSH
15661: LD_INT 9
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: LIST
15668: PUSH
15669: LD_VAR 0 4
15673: ARRAY
15674: ST_TO_ADDR
// end ;
15675: LD_VAR 0 2
15679: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15680: LD_INT 0
15682: PPUSH
15683: PPUSH
15684: PPUSH
// if not mines then
15685: LD_VAR 0 2
15689: NOT
15690: IFFALSE 15694
// exit ;
15692: GO 15838
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15694: LD_ADDR_VAR 0 5
15698: PUSH
15699: LD_INT 81
15701: PUSH
15702: LD_VAR 0 1
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 3
15713: PUSH
15714: LD_INT 21
15716: PUSH
15717: LD_INT 3
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PPUSH
15732: CALL_OW 69
15736: ST_TO_ADDR
// for i in mines do
15737: LD_ADDR_VAR 0 4
15741: PUSH
15742: LD_VAR 0 2
15746: PUSH
15747: FOR_IN
15748: IFFALSE 15836
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15750: LD_VAR 0 4
15754: PUSH
15755: LD_INT 1
15757: ARRAY
15758: PPUSH
15759: LD_VAR 0 4
15763: PUSH
15764: LD_INT 2
15766: ARRAY
15767: PPUSH
15768: CALL_OW 458
15772: NOT
15773: IFFALSE 15777
// continue ;
15775: GO 15747
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15777: LD_VAR 0 4
15781: PUSH
15782: LD_INT 1
15784: ARRAY
15785: PPUSH
15786: LD_VAR 0 4
15790: PUSH
15791: LD_INT 2
15793: ARRAY
15794: PPUSH
15795: CALL_OW 428
15799: PUSH
15800: LD_VAR 0 5
15804: IN
15805: IFFALSE 15834
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15807: LD_VAR 0 4
15811: PUSH
15812: LD_INT 1
15814: ARRAY
15815: PPUSH
15816: LD_VAR 0 4
15820: PUSH
15821: LD_INT 2
15823: ARRAY
15824: PPUSH
15825: LD_VAR 0 1
15829: PPUSH
15830: CALL_OW 456
// end ;
15834: GO 15747
15836: POP
15837: POP
// end ;
15838: LD_VAR 0 3
15842: RET
// export function Count ( array ) ; var i ; begin
15843: LD_INT 0
15845: PPUSH
15846: PPUSH
// result := 0 ;
15847: LD_ADDR_VAR 0 2
15851: PUSH
15852: LD_INT 0
15854: ST_TO_ADDR
// for i in array do
15855: LD_ADDR_VAR 0 3
15859: PUSH
15860: LD_VAR 0 1
15864: PUSH
15865: FOR_IN
15866: IFFALSE 15890
// if i then
15868: LD_VAR 0 3
15872: IFFALSE 15888
// result := result + 1 ;
15874: LD_ADDR_VAR 0 2
15878: PUSH
15879: LD_VAR 0 2
15883: PUSH
15884: LD_INT 1
15886: PLUS
15887: ST_TO_ADDR
15888: GO 15865
15890: POP
15891: POP
// end ;
15892: LD_VAR 0 2
15896: RET
// export function IsEmpty ( building ) ; begin
15897: LD_INT 0
15899: PPUSH
// if not building then
15900: LD_VAR 0 1
15904: NOT
15905: IFFALSE 15909
// exit ;
15907: GO 15952
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15909: LD_ADDR_VAR 0 2
15913: PUSH
15914: LD_VAR 0 1
15918: PUSH
15919: LD_INT 22
15921: PUSH
15922: LD_VAR 0 1
15926: PPUSH
15927: CALL_OW 255
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: LD_INT 58
15938: PUSH
15939: EMPTY
15940: LIST
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PPUSH
15946: CALL_OW 69
15950: IN
15951: ST_TO_ADDR
// end ;
15952: LD_VAR 0 2
15956: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15957: LD_INT 0
15959: PPUSH
15960: PPUSH
15961: PPUSH
15962: PPUSH
// tmp := [ ] ;
15963: LD_ADDR_VAR 0 3
15967: PUSH
15968: EMPTY
15969: ST_TO_ADDR
// list := [ ] ;
15970: LD_ADDR_VAR 0 5
15974: PUSH
15975: EMPTY
15976: ST_TO_ADDR
// for i = 16 to 25 do
15977: LD_ADDR_VAR 0 4
15981: PUSH
15982: DOUBLE
15983: LD_INT 16
15985: DEC
15986: ST_TO_ADDR
15987: LD_INT 25
15989: PUSH
15990: FOR_TO
15991: IFFALSE 16064
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15993: LD_ADDR_VAR 0 3
15997: PUSH
15998: LD_VAR 0 3
16002: PUSH
16003: LD_INT 22
16005: PUSH
16006: LD_VAR 0 1
16010: PPUSH
16011: CALL_OW 255
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 91
16022: PUSH
16023: LD_VAR 0 1
16027: PUSH
16028: LD_INT 6
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 30
16038: PUSH
16039: LD_VAR 0 4
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: LIST
16052: PUSH
16053: EMPTY
16054: LIST
16055: PPUSH
16056: CALL_OW 69
16060: ADD
16061: ST_TO_ADDR
16062: GO 15990
16064: POP
16065: POP
// for i = 1 to tmp do
16066: LD_ADDR_VAR 0 4
16070: PUSH
16071: DOUBLE
16072: LD_INT 1
16074: DEC
16075: ST_TO_ADDR
16076: LD_VAR 0 3
16080: PUSH
16081: FOR_TO
16082: IFFALSE 16170
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
16084: LD_ADDR_VAR 0 5
16088: PUSH
16089: LD_VAR 0 5
16093: PUSH
16094: LD_VAR 0 3
16098: PUSH
16099: LD_VAR 0 4
16103: ARRAY
16104: PPUSH
16105: CALL_OW 266
16109: PUSH
16110: LD_VAR 0 3
16114: PUSH
16115: LD_VAR 0 4
16119: ARRAY
16120: PPUSH
16121: CALL_OW 250
16125: PUSH
16126: LD_VAR 0 3
16130: PUSH
16131: LD_VAR 0 4
16135: ARRAY
16136: PPUSH
16137: CALL_OW 251
16141: PUSH
16142: LD_VAR 0 3
16146: PUSH
16147: LD_VAR 0 4
16151: ARRAY
16152: PPUSH
16153: CALL_OW 254
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: PUSH
16164: EMPTY
16165: LIST
16166: ADD
16167: ST_TO_ADDR
16168: GO 16081
16170: POP
16171: POP
// result := list ;
16172: LD_ADDR_VAR 0 2
16176: PUSH
16177: LD_VAR 0 5
16181: ST_TO_ADDR
// end ;
16182: LD_VAR 0 2
16186: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
16187: LD_INT 0
16189: PPUSH
16190: PPUSH
16191: PPUSH
16192: PPUSH
16193: PPUSH
16194: PPUSH
16195: PPUSH
// if not factory then
16196: LD_VAR 0 1
16200: NOT
16201: IFFALSE 16205
// exit ;
16203: GO 16730
// if control = control_apeman then
16205: LD_VAR 0 4
16209: PUSH
16210: LD_INT 5
16212: EQUAL
16213: IFFALSE 16322
// begin tmp := UnitsInside ( factory ) ;
16215: LD_ADDR_VAR 0 8
16219: PUSH
16220: LD_VAR 0 1
16224: PPUSH
16225: CALL_OW 313
16229: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
16230: LD_VAR 0 8
16234: PPUSH
16235: LD_INT 25
16237: PUSH
16238: LD_INT 12
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PPUSH
16245: CALL_OW 72
16249: NOT
16250: IFFALSE 16260
// control := control_manual ;
16252: LD_ADDR_VAR 0 4
16256: PUSH
16257: LD_INT 1
16259: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
16260: LD_ADDR_VAR 0 8
16264: PUSH
16265: LD_VAR 0 1
16269: PPUSH
16270: CALL 15957 0 1
16274: ST_TO_ADDR
// if tmp then
16275: LD_VAR 0 8
16279: IFFALSE 16322
// begin for i in tmp do
16281: LD_ADDR_VAR 0 7
16285: PUSH
16286: LD_VAR 0 8
16290: PUSH
16291: FOR_IN
16292: IFFALSE 16320
// if i [ 1 ] = b_ext_radar then
16294: LD_VAR 0 7
16298: PUSH
16299: LD_INT 1
16301: ARRAY
16302: PUSH
16303: LD_INT 20
16305: EQUAL
16306: IFFALSE 16318
// begin control := control_remote ;
16308: LD_ADDR_VAR 0 4
16312: PUSH
16313: LD_INT 2
16315: ST_TO_ADDR
// break ;
16316: GO 16320
// end ;
16318: GO 16291
16320: POP
16321: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16322: LD_VAR 0 1
16326: PPUSH
16327: LD_VAR 0 2
16331: PPUSH
16332: LD_VAR 0 3
16336: PPUSH
16337: LD_VAR 0 4
16341: PPUSH
16342: LD_VAR 0 5
16346: PPUSH
16347: CALL_OW 448
16351: IFFALSE 16386
// begin result := [ chassis , engine , control , weapon ] ;
16353: LD_ADDR_VAR 0 6
16357: PUSH
16358: LD_VAR 0 2
16362: PUSH
16363: LD_VAR 0 3
16367: PUSH
16368: LD_VAR 0 4
16372: PUSH
16373: LD_VAR 0 5
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: ST_TO_ADDR
// exit ;
16384: GO 16730
// end ; _chassis := AvailableChassisList ( factory ) ;
16386: LD_ADDR_VAR 0 9
16390: PUSH
16391: LD_VAR 0 1
16395: PPUSH
16396: CALL_OW 475
16400: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16401: LD_ADDR_VAR 0 11
16405: PUSH
16406: LD_VAR 0 1
16410: PPUSH
16411: CALL_OW 476
16415: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16416: LD_ADDR_VAR 0 12
16420: PUSH
16421: LD_VAR 0 1
16425: PPUSH
16426: CALL_OW 477
16430: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16431: LD_ADDR_VAR 0 10
16435: PUSH
16436: LD_VAR 0 1
16440: PPUSH
16441: CALL_OW 478
16445: ST_TO_ADDR
// if not chassis in _chassis then
16446: LD_VAR 0 2
16450: PUSH
16451: LD_VAR 0 9
16455: IN
16456: NOT
16457: IFFALSE 16483
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16459: LD_ADDR_VAR 0 2
16463: PUSH
16464: LD_VAR 0 9
16468: PUSH
16469: LD_INT 1
16471: PPUSH
16472: LD_VAR 0 9
16476: PPUSH
16477: CALL_OW 12
16481: ARRAY
16482: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16483: LD_VAR 0 2
16487: PPUSH
16488: LD_VAR 0 3
16492: PPUSH
16493: CALL 16735 0 2
16497: NOT
16498: IFFALSE 16557
// repeat engine := _engine [ 1 ] ;
16500: LD_ADDR_VAR 0 3
16504: PUSH
16505: LD_VAR 0 11
16509: PUSH
16510: LD_INT 1
16512: ARRAY
16513: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16514: LD_ADDR_VAR 0 11
16518: PUSH
16519: LD_VAR 0 11
16523: PPUSH
16524: LD_INT 1
16526: PPUSH
16527: CALL_OW 3
16531: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16532: LD_VAR 0 2
16536: PPUSH
16537: LD_VAR 0 3
16541: PPUSH
16542: CALL 16735 0 2
16546: PUSH
16547: LD_VAR 0 11
16551: PUSH
16552: EMPTY
16553: EQUAL
16554: OR
16555: IFFALSE 16500
// if not control in _control then
16557: LD_VAR 0 4
16561: PUSH
16562: LD_VAR 0 12
16566: IN
16567: NOT
16568: IFFALSE 16594
// control := _control [ rand ( 1 , _control ) ] ;
16570: LD_ADDR_VAR 0 4
16574: PUSH
16575: LD_VAR 0 12
16579: PUSH
16580: LD_INT 1
16582: PPUSH
16583: LD_VAR 0 12
16587: PPUSH
16588: CALL_OW 12
16592: ARRAY
16593: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16594: LD_VAR 0 2
16598: PPUSH
16599: LD_VAR 0 5
16603: PPUSH
16604: CALL 16955 0 2
16608: NOT
16609: IFFALSE 16668
// repeat weapon := _weapon [ 1 ] ;
16611: LD_ADDR_VAR 0 5
16615: PUSH
16616: LD_VAR 0 10
16620: PUSH
16621: LD_INT 1
16623: ARRAY
16624: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16625: LD_ADDR_VAR 0 10
16629: PUSH
16630: LD_VAR 0 10
16634: PPUSH
16635: LD_INT 1
16637: PPUSH
16638: CALL_OW 3
16642: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16643: LD_VAR 0 2
16647: PPUSH
16648: LD_VAR 0 5
16652: PPUSH
16653: CALL 16955 0 2
16657: PUSH
16658: LD_VAR 0 10
16662: PUSH
16663: EMPTY
16664: EQUAL
16665: OR
16666: IFFALSE 16611
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16668: LD_VAR 0 1
16672: PPUSH
16673: LD_VAR 0 2
16677: PPUSH
16678: LD_VAR 0 3
16682: PPUSH
16683: LD_VAR 0 4
16687: PPUSH
16688: LD_VAR 0 5
16692: PPUSH
16693: CALL_OW 448
16697: IFFALSE 16730
// result := [ chassis , engine , control , weapon ] ;
16699: LD_ADDR_VAR 0 6
16703: PUSH
16704: LD_VAR 0 2
16708: PUSH
16709: LD_VAR 0 3
16713: PUSH
16714: LD_VAR 0 4
16718: PUSH
16719: LD_VAR 0 5
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: ST_TO_ADDR
// end ;
16730: LD_VAR 0 6
16734: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16735: LD_INT 0
16737: PPUSH
// if not chassis or not engine then
16738: LD_VAR 0 1
16742: NOT
16743: PUSH
16744: LD_VAR 0 2
16748: NOT
16749: OR
16750: IFFALSE 16754
// exit ;
16752: GO 16950
// case engine of engine_solar :
16754: LD_VAR 0 2
16758: PUSH
16759: LD_INT 2
16761: DOUBLE
16762: EQUAL
16763: IFTRUE 16767
16765: GO 16805
16767: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16768: LD_ADDR_VAR 0 3
16772: PUSH
16773: LD_INT 11
16775: PUSH
16776: LD_INT 12
16778: PUSH
16779: LD_INT 13
16781: PUSH
16782: LD_INT 14
16784: PUSH
16785: LD_INT 1
16787: PUSH
16788: LD_INT 2
16790: PUSH
16791: LD_INT 3
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: ST_TO_ADDR
16803: GO 16934
16805: LD_INT 1
16807: DOUBLE
16808: EQUAL
16809: IFTRUE 16813
16811: GO 16875
16813: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16814: LD_ADDR_VAR 0 3
16818: PUSH
16819: LD_INT 11
16821: PUSH
16822: LD_INT 12
16824: PUSH
16825: LD_INT 13
16827: PUSH
16828: LD_INT 14
16830: PUSH
16831: LD_INT 1
16833: PUSH
16834: LD_INT 2
16836: PUSH
16837: LD_INT 3
16839: PUSH
16840: LD_INT 4
16842: PUSH
16843: LD_INT 5
16845: PUSH
16846: LD_INT 21
16848: PUSH
16849: LD_INT 23
16851: PUSH
16852: LD_INT 22
16854: PUSH
16855: LD_INT 24
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: ST_TO_ADDR
16873: GO 16934
16875: LD_INT 3
16877: DOUBLE
16878: EQUAL
16879: IFTRUE 16883
16881: GO 16933
16883: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16884: LD_ADDR_VAR 0 3
16888: PUSH
16889: LD_INT 13
16891: PUSH
16892: LD_INT 14
16894: PUSH
16895: LD_INT 2
16897: PUSH
16898: LD_INT 3
16900: PUSH
16901: LD_INT 4
16903: PUSH
16904: LD_INT 5
16906: PUSH
16907: LD_INT 21
16909: PUSH
16910: LD_INT 22
16912: PUSH
16913: LD_INT 23
16915: PUSH
16916: LD_INT 24
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: ST_TO_ADDR
16931: GO 16934
16933: POP
// result := ( chassis in result ) ;
16934: LD_ADDR_VAR 0 3
16938: PUSH
16939: LD_VAR 0 1
16943: PUSH
16944: LD_VAR 0 3
16948: IN
16949: ST_TO_ADDR
// end ;
16950: LD_VAR 0 3
16954: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16955: LD_INT 0
16957: PPUSH
// if not chassis or not weapon then
16958: LD_VAR 0 1
16962: NOT
16963: PUSH
16964: LD_VAR 0 2
16968: NOT
16969: OR
16970: IFFALSE 16974
// exit ;
16972: GO 18000
// case weapon of us_machine_gun :
16974: LD_VAR 0 2
16978: PUSH
16979: LD_INT 2
16981: DOUBLE
16982: EQUAL
16983: IFTRUE 16987
16985: GO 17017
16987: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16988: LD_ADDR_VAR 0 3
16992: PUSH
16993: LD_INT 1
16995: PUSH
16996: LD_INT 2
16998: PUSH
16999: LD_INT 3
17001: PUSH
17002: LD_INT 4
17004: PUSH
17005: LD_INT 5
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: ST_TO_ADDR
17015: GO 17984
17017: LD_INT 3
17019: DOUBLE
17020: EQUAL
17021: IFTRUE 17025
17023: GO 17055
17025: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
17026: LD_ADDR_VAR 0 3
17030: PUSH
17031: LD_INT 1
17033: PUSH
17034: LD_INT 2
17036: PUSH
17037: LD_INT 3
17039: PUSH
17040: LD_INT 4
17042: PUSH
17043: LD_INT 5
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: ST_TO_ADDR
17053: GO 17984
17055: LD_INT 11
17057: DOUBLE
17058: EQUAL
17059: IFTRUE 17063
17061: GO 17093
17063: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
17064: LD_ADDR_VAR 0 3
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: LD_INT 2
17074: PUSH
17075: LD_INT 3
17077: PUSH
17078: LD_INT 4
17080: PUSH
17081: LD_INT 5
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: ST_TO_ADDR
17091: GO 17984
17093: LD_INT 4
17095: DOUBLE
17096: EQUAL
17097: IFTRUE 17101
17099: GO 17127
17101: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
17102: LD_ADDR_VAR 0 3
17106: PUSH
17107: LD_INT 2
17109: PUSH
17110: LD_INT 3
17112: PUSH
17113: LD_INT 4
17115: PUSH
17116: LD_INT 5
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: ST_TO_ADDR
17125: GO 17984
17127: LD_INT 5
17129: DOUBLE
17130: EQUAL
17131: IFTRUE 17135
17133: GO 17161
17135: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
17136: LD_ADDR_VAR 0 3
17140: PUSH
17141: LD_INT 2
17143: PUSH
17144: LD_INT 3
17146: PUSH
17147: LD_INT 4
17149: PUSH
17150: LD_INT 5
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: ST_TO_ADDR
17159: GO 17984
17161: LD_INT 9
17163: DOUBLE
17164: EQUAL
17165: IFTRUE 17169
17167: GO 17195
17169: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
17170: LD_ADDR_VAR 0 3
17174: PUSH
17175: LD_INT 2
17177: PUSH
17178: LD_INT 3
17180: PUSH
17181: LD_INT 4
17183: PUSH
17184: LD_INT 5
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: ST_TO_ADDR
17193: GO 17984
17195: LD_INT 7
17197: DOUBLE
17198: EQUAL
17199: IFTRUE 17203
17201: GO 17229
17203: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
17204: LD_ADDR_VAR 0 3
17208: PUSH
17209: LD_INT 2
17211: PUSH
17212: LD_INT 3
17214: PUSH
17215: LD_INT 4
17217: PUSH
17218: LD_INT 5
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: ST_TO_ADDR
17227: GO 17984
17229: LD_INT 12
17231: DOUBLE
17232: EQUAL
17233: IFTRUE 17237
17235: GO 17263
17237: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17238: LD_ADDR_VAR 0 3
17242: PUSH
17243: LD_INT 2
17245: PUSH
17246: LD_INT 3
17248: PUSH
17249: LD_INT 4
17251: PUSH
17252: LD_INT 5
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: ST_TO_ADDR
17261: GO 17984
17263: LD_INT 13
17265: DOUBLE
17266: EQUAL
17267: IFTRUE 17271
17269: GO 17297
17271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17272: LD_ADDR_VAR 0 3
17276: PUSH
17277: LD_INT 2
17279: PUSH
17280: LD_INT 3
17282: PUSH
17283: LD_INT 4
17285: PUSH
17286: LD_INT 5
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: ST_TO_ADDR
17295: GO 17984
17297: LD_INT 14
17299: DOUBLE
17300: EQUAL
17301: IFTRUE 17305
17303: GO 17323
17305: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17306: LD_ADDR_VAR 0 3
17310: PUSH
17311: LD_INT 4
17313: PUSH
17314: LD_INT 5
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: ST_TO_ADDR
17321: GO 17984
17323: LD_INT 6
17325: DOUBLE
17326: EQUAL
17327: IFTRUE 17331
17329: GO 17349
17331: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17332: LD_ADDR_VAR 0 3
17336: PUSH
17337: LD_INT 4
17339: PUSH
17340: LD_INT 5
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: ST_TO_ADDR
17347: GO 17984
17349: LD_INT 10
17351: DOUBLE
17352: EQUAL
17353: IFTRUE 17357
17355: GO 17375
17357: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17358: LD_ADDR_VAR 0 3
17362: PUSH
17363: LD_INT 4
17365: PUSH
17366: LD_INT 5
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: ST_TO_ADDR
17373: GO 17984
17375: LD_INT 22
17377: DOUBLE
17378: EQUAL
17379: IFTRUE 17383
17381: GO 17409
17383: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17384: LD_ADDR_VAR 0 3
17388: PUSH
17389: LD_INT 11
17391: PUSH
17392: LD_INT 12
17394: PUSH
17395: LD_INT 13
17397: PUSH
17398: LD_INT 14
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: ST_TO_ADDR
17407: GO 17984
17409: LD_INT 23
17411: DOUBLE
17412: EQUAL
17413: IFTRUE 17417
17415: GO 17443
17417: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17418: LD_ADDR_VAR 0 3
17422: PUSH
17423: LD_INT 11
17425: PUSH
17426: LD_INT 12
17428: PUSH
17429: LD_INT 13
17431: PUSH
17432: LD_INT 14
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: ST_TO_ADDR
17441: GO 17984
17443: LD_INT 24
17445: DOUBLE
17446: EQUAL
17447: IFTRUE 17451
17449: GO 17477
17451: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17452: LD_ADDR_VAR 0 3
17456: PUSH
17457: LD_INT 11
17459: PUSH
17460: LD_INT 12
17462: PUSH
17463: LD_INT 13
17465: PUSH
17466: LD_INT 14
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: ST_TO_ADDR
17475: GO 17984
17477: LD_INT 30
17479: DOUBLE
17480: EQUAL
17481: IFTRUE 17485
17483: GO 17511
17485: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17486: LD_ADDR_VAR 0 3
17490: PUSH
17491: LD_INT 11
17493: PUSH
17494: LD_INT 12
17496: PUSH
17497: LD_INT 13
17499: PUSH
17500: LD_INT 14
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: ST_TO_ADDR
17509: GO 17984
17511: LD_INT 25
17513: DOUBLE
17514: EQUAL
17515: IFTRUE 17519
17517: GO 17537
17519: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17520: LD_ADDR_VAR 0 3
17524: PUSH
17525: LD_INT 13
17527: PUSH
17528: LD_INT 14
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: ST_TO_ADDR
17535: GO 17984
17537: LD_INT 27
17539: DOUBLE
17540: EQUAL
17541: IFTRUE 17545
17543: GO 17563
17545: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17546: LD_ADDR_VAR 0 3
17550: PUSH
17551: LD_INT 13
17553: PUSH
17554: LD_INT 14
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: ST_TO_ADDR
17561: GO 17984
17563: LD_INT 28
17565: DOUBLE
17566: EQUAL
17567: IFTRUE 17571
17569: GO 17589
17571: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17572: LD_ADDR_VAR 0 3
17576: PUSH
17577: LD_INT 13
17579: PUSH
17580: LD_INT 14
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: ST_TO_ADDR
17587: GO 17984
17589: LD_INT 29
17591: DOUBLE
17592: EQUAL
17593: IFTRUE 17597
17595: GO 17615
17597: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17598: LD_ADDR_VAR 0 3
17602: PUSH
17603: LD_INT 13
17605: PUSH
17606: LD_INT 14
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: ST_TO_ADDR
17613: GO 17984
17615: LD_INT 31
17617: DOUBLE
17618: EQUAL
17619: IFTRUE 17623
17621: GO 17641
17623: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17624: LD_ADDR_VAR 0 3
17628: PUSH
17629: LD_INT 13
17631: PUSH
17632: LD_INT 14
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: ST_TO_ADDR
17639: GO 17984
17641: LD_INT 26
17643: DOUBLE
17644: EQUAL
17645: IFTRUE 17649
17647: GO 17667
17649: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17650: LD_ADDR_VAR 0 3
17654: PUSH
17655: LD_INT 13
17657: PUSH
17658: LD_INT 14
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: ST_TO_ADDR
17665: GO 17984
17667: LD_INT 42
17669: DOUBLE
17670: EQUAL
17671: IFTRUE 17675
17673: GO 17701
17675: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17676: LD_ADDR_VAR 0 3
17680: PUSH
17681: LD_INT 21
17683: PUSH
17684: LD_INT 22
17686: PUSH
17687: LD_INT 23
17689: PUSH
17690: LD_INT 24
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: ST_TO_ADDR
17699: GO 17984
17701: LD_INT 43
17703: DOUBLE
17704: EQUAL
17705: IFTRUE 17709
17707: GO 17735
17709: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17710: LD_ADDR_VAR 0 3
17714: PUSH
17715: LD_INT 21
17717: PUSH
17718: LD_INT 22
17720: PUSH
17721: LD_INT 23
17723: PUSH
17724: LD_INT 24
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: ST_TO_ADDR
17733: GO 17984
17735: LD_INT 44
17737: DOUBLE
17738: EQUAL
17739: IFTRUE 17743
17741: GO 17769
17743: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17744: LD_ADDR_VAR 0 3
17748: PUSH
17749: LD_INT 21
17751: PUSH
17752: LD_INT 22
17754: PUSH
17755: LD_INT 23
17757: PUSH
17758: LD_INT 24
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: ST_TO_ADDR
17767: GO 17984
17769: LD_INT 45
17771: DOUBLE
17772: EQUAL
17773: IFTRUE 17777
17775: GO 17803
17777: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17778: LD_ADDR_VAR 0 3
17782: PUSH
17783: LD_INT 21
17785: PUSH
17786: LD_INT 22
17788: PUSH
17789: LD_INT 23
17791: PUSH
17792: LD_INT 24
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: ST_TO_ADDR
17801: GO 17984
17803: LD_INT 49
17805: DOUBLE
17806: EQUAL
17807: IFTRUE 17811
17809: GO 17837
17811: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17812: LD_ADDR_VAR 0 3
17816: PUSH
17817: LD_INT 21
17819: PUSH
17820: LD_INT 22
17822: PUSH
17823: LD_INT 23
17825: PUSH
17826: LD_INT 24
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: ST_TO_ADDR
17835: GO 17984
17837: LD_INT 51
17839: DOUBLE
17840: EQUAL
17841: IFTRUE 17845
17843: GO 17871
17845: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17846: LD_ADDR_VAR 0 3
17850: PUSH
17851: LD_INT 21
17853: PUSH
17854: LD_INT 22
17856: PUSH
17857: LD_INT 23
17859: PUSH
17860: LD_INT 24
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: ST_TO_ADDR
17869: GO 17984
17871: LD_INT 52
17873: DOUBLE
17874: EQUAL
17875: IFTRUE 17879
17877: GO 17905
17879: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17880: LD_ADDR_VAR 0 3
17884: PUSH
17885: LD_INT 21
17887: PUSH
17888: LD_INT 22
17890: PUSH
17891: LD_INT 23
17893: PUSH
17894: LD_INT 24
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: ST_TO_ADDR
17903: GO 17984
17905: LD_INT 53
17907: DOUBLE
17908: EQUAL
17909: IFTRUE 17913
17911: GO 17931
17913: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17914: LD_ADDR_VAR 0 3
17918: PUSH
17919: LD_INT 23
17921: PUSH
17922: LD_INT 24
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: ST_TO_ADDR
17929: GO 17984
17931: LD_INT 46
17933: DOUBLE
17934: EQUAL
17935: IFTRUE 17939
17937: GO 17957
17939: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17940: LD_ADDR_VAR 0 3
17944: PUSH
17945: LD_INT 23
17947: PUSH
17948: LD_INT 24
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: ST_TO_ADDR
17955: GO 17984
17957: LD_INT 47
17959: DOUBLE
17960: EQUAL
17961: IFTRUE 17965
17963: GO 17983
17965: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17966: LD_ADDR_VAR 0 3
17970: PUSH
17971: LD_INT 23
17973: PUSH
17974: LD_INT 24
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: ST_TO_ADDR
17981: GO 17984
17983: POP
// result := ( chassis in result ) ;
17984: LD_ADDR_VAR 0 3
17988: PUSH
17989: LD_VAR 0 1
17993: PUSH
17994: LD_VAR 0 3
17998: IN
17999: ST_TO_ADDR
// end ;
18000: LD_VAR 0 3
18004: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
18005: LD_INT 0
18007: PPUSH
18008: PPUSH
18009: PPUSH
18010: PPUSH
18011: PPUSH
18012: PPUSH
18013: PPUSH
// result := array ;
18014: LD_ADDR_VAR 0 5
18018: PUSH
18019: LD_VAR 0 1
18023: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
18024: LD_VAR 0 1
18028: NOT
18029: PUSH
18030: LD_VAR 0 2
18034: NOT
18035: OR
18036: PUSH
18037: LD_VAR 0 3
18041: NOT
18042: OR
18043: PUSH
18044: LD_VAR 0 2
18048: PUSH
18049: LD_VAR 0 1
18053: GREATER
18054: OR
18055: PUSH
18056: LD_VAR 0 3
18060: PUSH
18061: LD_VAR 0 1
18065: GREATER
18066: OR
18067: IFFALSE 18071
// exit ;
18069: GO 18367
// if direction then
18071: LD_VAR 0 4
18075: IFFALSE 18139
// begin d := 1 ;
18077: LD_ADDR_VAR 0 9
18081: PUSH
18082: LD_INT 1
18084: ST_TO_ADDR
// if i_from > i_to then
18085: LD_VAR 0 2
18089: PUSH
18090: LD_VAR 0 3
18094: GREATER
18095: IFFALSE 18121
// length := ( array - i_from ) + i_to else
18097: LD_ADDR_VAR 0 11
18101: PUSH
18102: LD_VAR 0 1
18106: PUSH
18107: LD_VAR 0 2
18111: MINUS
18112: PUSH
18113: LD_VAR 0 3
18117: PLUS
18118: ST_TO_ADDR
18119: GO 18137
// length := i_to - i_from ;
18121: LD_ADDR_VAR 0 11
18125: PUSH
18126: LD_VAR 0 3
18130: PUSH
18131: LD_VAR 0 2
18135: MINUS
18136: ST_TO_ADDR
// end else
18137: GO 18200
// begin d := - 1 ;
18139: LD_ADDR_VAR 0 9
18143: PUSH
18144: LD_INT 1
18146: NEG
18147: ST_TO_ADDR
// if i_from > i_to then
18148: LD_VAR 0 2
18152: PUSH
18153: LD_VAR 0 3
18157: GREATER
18158: IFFALSE 18178
// length := i_from - i_to else
18160: LD_ADDR_VAR 0 11
18164: PUSH
18165: LD_VAR 0 2
18169: PUSH
18170: LD_VAR 0 3
18174: MINUS
18175: ST_TO_ADDR
18176: GO 18200
// length := ( array - i_to ) + i_from ;
18178: LD_ADDR_VAR 0 11
18182: PUSH
18183: LD_VAR 0 1
18187: PUSH
18188: LD_VAR 0 3
18192: MINUS
18193: PUSH
18194: LD_VAR 0 2
18198: PLUS
18199: ST_TO_ADDR
// end ; if not length then
18200: LD_VAR 0 11
18204: NOT
18205: IFFALSE 18209
// exit ;
18207: GO 18367
// tmp := array ;
18209: LD_ADDR_VAR 0 10
18213: PUSH
18214: LD_VAR 0 1
18218: ST_TO_ADDR
// for i = 1 to length do
18219: LD_ADDR_VAR 0 6
18223: PUSH
18224: DOUBLE
18225: LD_INT 1
18227: DEC
18228: ST_TO_ADDR
18229: LD_VAR 0 11
18233: PUSH
18234: FOR_TO
18235: IFFALSE 18355
// begin for j = 1 to array do
18237: LD_ADDR_VAR 0 7
18241: PUSH
18242: DOUBLE
18243: LD_INT 1
18245: DEC
18246: ST_TO_ADDR
18247: LD_VAR 0 1
18251: PUSH
18252: FOR_TO
18253: IFFALSE 18341
// begin k := j + d ;
18255: LD_ADDR_VAR 0 8
18259: PUSH
18260: LD_VAR 0 7
18264: PUSH
18265: LD_VAR 0 9
18269: PLUS
18270: ST_TO_ADDR
// if k > array then
18271: LD_VAR 0 8
18275: PUSH
18276: LD_VAR 0 1
18280: GREATER
18281: IFFALSE 18291
// k := 1 ;
18283: LD_ADDR_VAR 0 8
18287: PUSH
18288: LD_INT 1
18290: ST_TO_ADDR
// if not k then
18291: LD_VAR 0 8
18295: NOT
18296: IFFALSE 18308
// k := array ;
18298: LD_ADDR_VAR 0 8
18302: PUSH
18303: LD_VAR 0 1
18307: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18308: LD_ADDR_VAR 0 10
18312: PUSH
18313: LD_VAR 0 10
18317: PPUSH
18318: LD_VAR 0 8
18322: PPUSH
18323: LD_VAR 0 1
18327: PUSH
18328: LD_VAR 0 7
18332: ARRAY
18333: PPUSH
18334: CALL_OW 1
18338: ST_TO_ADDR
// end ;
18339: GO 18252
18341: POP
18342: POP
// array := tmp ;
18343: LD_ADDR_VAR 0 1
18347: PUSH
18348: LD_VAR 0 10
18352: ST_TO_ADDR
// end ;
18353: GO 18234
18355: POP
18356: POP
// result := array ;
18357: LD_ADDR_VAR 0 5
18361: PUSH
18362: LD_VAR 0 1
18366: ST_TO_ADDR
// end ;
18367: LD_VAR 0 5
18371: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18372: LD_INT 0
18374: PPUSH
18375: PPUSH
// result := 0 ;
18376: LD_ADDR_VAR 0 3
18380: PUSH
18381: LD_INT 0
18383: ST_TO_ADDR
// if not array or not value in array then
18384: LD_VAR 0 1
18388: NOT
18389: PUSH
18390: LD_VAR 0 2
18394: PUSH
18395: LD_VAR 0 1
18399: IN
18400: NOT
18401: OR
18402: IFFALSE 18406
// exit ;
18404: GO 18460
// for i = 1 to array do
18406: LD_ADDR_VAR 0 4
18410: PUSH
18411: DOUBLE
18412: LD_INT 1
18414: DEC
18415: ST_TO_ADDR
18416: LD_VAR 0 1
18420: PUSH
18421: FOR_TO
18422: IFFALSE 18458
// if value = array [ i ] then
18424: LD_VAR 0 2
18428: PUSH
18429: LD_VAR 0 1
18433: PUSH
18434: LD_VAR 0 4
18438: ARRAY
18439: EQUAL
18440: IFFALSE 18456
// begin result := i ;
18442: LD_ADDR_VAR 0 3
18446: PUSH
18447: LD_VAR 0 4
18451: ST_TO_ADDR
// exit ;
18452: POP
18453: POP
18454: GO 18460
// end ;
18456: GO 18421
18458: POP
18459: POP
// end ;
18460: LD_VAR 0 3
18464: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18465: LD_INT 0
18467: PPUSH
// vc_chassis := chassis ;
18468: LD_ADDR_OWVAR 37
18472: PUSH
18473: LD_VAR 0 1
18477: ST_TO_ADDR
// vc_engine := engine ;
18478: LD_ADDR_OWVAR 39
18482: PUSH
18483: LD_VAR 0 2
18487: ST_TO_ADDR
// vc_control := control ;
18488: LD_ADDR_OWVAR 38
18492: PUSH
18493: LD_VAR 0 3
18497: ST_TO_ADDR
// vc_weapon := weapon ;
18498: LD_ADDR_OWVAR 40
18502: PUSH
18503: LD_VAR 0 4
18507: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18508: LD_ADDR_OWVAR 41
18512: PUSH
18513: LD_VAR 0 5
18517: ST_TO_ADDR
// end ;
18518: LD_VAR 0 6
18522: RET
// export function WantPlant ( unit ) ; var task ; begin
18523: LD_INT 0
18525: PPUSH
18526: PPUSH
// result := false ;
18527: LD_ADDR_VAR 0 2
18531: PUSH
18532: LD_INT 0
18534: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18535: LD_ADDR_VAR 0 3
18539: PUSH
18540: LD_VAR 0 1
18544: PPUSH
18545: CALL_OW 437
18549: ST_TO_ADDR
// if task then
18550: LD_VAR 0 3
18554: IFFALSE 18582
// if task [ 1 ] [ 1 ] = p then
18556: LD_VAR 0 3
18560: PUSH
18561: LD_INT 1
18563: ARRAY
18564: PUSH
18565: LD_INT 1
18567: ARRAY
18568: PUSH
18569: LD_STRING p
18571: EQUAL
18572: IFFALSE 18582
// result := true ;
18574: LD_ADDR_VAR 0 2
18578: PUSH
18579: LD_INT 1
18581: ST_TO_ADDR
// end ;
18582: LD_VAR 0 2
18586: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18587: LD_INT 0
18589: PPUSH
18590: PPUSH
18591: PPUSH
18592: PPUSH
// if pos < 1 then
18593: LD_VAR 0 2
18597: PUSH
18598: LD_INT 1
18600: LESS
18601: IFFALSE 18605
// exit ;
18603: GO 18908
// if pos = 1 then
18605: LD_VAR 0 2
18609: PUSH
18610: LD_INT 1
18612: EQUAL
18613: IFFALSE 18646
// result := Replace ( arr , pos [ 1 ] , value ) else
18615: LD_ADDR_VAR 0 4
18619: PUSH
18620: LD_VAR 0 1
18624: PPUSH
18625: LD_VAR 0 2
18629: PUSH
18630: LD_INT 1
18632: ARRAY
18633: PPUSH
18634: LD_VAR 0 3
18638: PPUSH
18639: CALL_OW 1
18643: ST_TO_ADDR
18644: GO 18908
// begin tmp := arr ;
18646: LD_ADDR_VAR 0 6
18650: PUSH
18651: LD_VAR 0 1
18655: ST_TO_ADDR
// s_arr := [ tmp ] ;
18656: LD_ADDR_VAR 0 7
18660: PUSH
18661: LD_VAR 0 6
18665: PUSH
18666: EMPTY
18667: LIST
18668: ST_TO_ADDR
// for i = 1 to pos - 1 do
18669: LD_ADDR_VAR 0 5
18673: PUSH
18674: DOUBLE
18675: LD_INT 1
18677: DEC
18678: ST_TO_ADDR
18679: LD_VAR 0 2
18683: PUSH
18684: LD_INT 1
18686: MINUS
18687: PUSH
18688: FOR_TO
18689: IFFALSE 18734
// begin tmp := tmp [ pos [ i ] ] ;
18691: LD_ADDR_VAR 0 6
18695: PUSH
18696: LD_VAR 0 6
18700: PUSH
18701: LD_VAR 0 2
18705: PUSH
18706: LD_VAR 0 5
18710: ARRAY
18711: ARRAY
18712: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18713: LD_ADDR_VAR 0 7
18717: PUSH
18718: LD_VAR 0 7
18722: PUSH
18723: LD_VAR 0 6
18727: PUSH
18728: EMPTY
18729: LIST
18730: ADD
18731: ST_TO_ADDR
// end ;
18732: GO 18688
18734: POP
18735: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18736: LD_ADDR_VAR 0 6
18740: PUSH
18741: LD_VAR 0 6
18745: PPUSH
18746: LD_VAR 0 2
18750: PUSH
18751: LD_VAR 0 2
18755: ARRAY
18756: PPUSH
18757: LD_VAR 0 3
18761: PPUSH
18762: CALL_OW 1
18766: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18767: LD_ADDR_VAR 0 7
18771: PUSH
18772: LD_VAR 0 7
18776: PPUSH
18777: LD_VAR 0 7
18781: PPUSH
18782: LD_VAR 0 6
18786: PPUSH
18787: CALL_OW 1
18791: ST_TO_ADDR
// for i = s_arr downto 2 do
18792: LD_ADDR_VAR 0 5
18796: PUSH
18797: DOUBLE
18798: LD_VAR 0 7
18802: INC
18803: ST_TO_ADDR
18804: LD_INT 2
18806: PUSH
18807: FOR_DOWNTO
18808: IFFALSE 18892
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18810: LD_ADDR_VAR 0 6
18814: PUSH
18815: LD_VAR 0 7
18819: PUSH
18820: LD_VAR 0 5
18824: PUSH
18825: LD_INT 1
18827: MINUS
18828: ARRAY
18829: PPUSH
18830: LD_VAR 0 2
18834: PUSH
18835: LD_VAR 0 5
18839: PUSH
18840: LD_INT 1
18842: MINUS
18843: ARRAY
18844: PPUSH
18845: LD_VAR 0 7
18849: PUSH
18850: LD_VAR 0 5
18854: ARRAY
18855: PPUSH
18856: CALL_OW 1
18860: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18861: LD_ADDR_VAR 0 7
18865: PUSH
18866: LD_VAR 0 7
18870: PPUSH
18871: LD_VAR 0 5
18875: PUSH
18876: LD_INT 1
18878: MINUS
18879: PPUSH
18880: LD_VAR 0 6
18884: PPUSH
18885: CALL_OW 1
18889: ST_TO_ADDR
// end ;
18890: GO 18807
18892: POP
18893: POP
// result := s_arr [ 1 ] ;
18894: LD_ADDR_VAR 0 4
18898: PUSH
18899: LD_VAR 0 7
18903: PUSH
18904: LD_INT 1
18906: ARRAY
18907: ST_TO_ADDR
// end ; end ;
18908: LD_VAR 0 4
18912: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18913: LD_INT 0
18915: PPUSH
18916: PPUSH
// if not list then
18917: LD_VAR 0 1
18921: NOT
18922: IFFALSE 18926
// exit ;
18924: GO 19017
// i := list [ pos1 ] ;
18926: LD_ADDR_VAR 0 5
18930: PUSH
18931: LD_VAR 0 1
18935: PUSH
18936: LD_VAR 0 2
18940: ARRAY
18941: ST_TO_ADDR
// if not i then
18942: LD_VAR 0 5
18946: NOT
18947: IFFALSE 18951
// exit ;
18949: GO 19017
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18951: LD_ADDR_VAR 0 1
18955: PUSH
18956: LD_VAR 0 1
18960: PPUSH
18961: LD_VAR 0 2
18965: PPUSH
18966: LD_VAR 0 1
18970: PUSH
18971: LD_VAR 0 3
18975: ARRAY
18976: PPUSH
18977: CALL_OW 1
18981: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18982: LD_ADDR_VAR 0 1
18986: PUSH
18987: LD_VAR 0 1
18991: PPUSH
18992: LD_VAR 0 3
18996: PPUSH
18997: LD_VAR 0 5
19001: PPUSH
19002: CALL_OW 1
19006: ST_TO_ADDR
// result := list ;
19007: LD_ADDR_VAR 0 4
19011: PUSH
19012: LD_VAR 0 1
19016: ST_TO_ADDR
// end ;
19017: LD_VAR 0 4
19021: RET
// export function Add ( list , pos , val ) ; begin
19022: LD_INT 0
19024: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
19025: LD_ADDR_VAR 0 4
19029: PUSH
19030: LD_VAR 0 1
19034: PPUSH
19035: LD_VAR 0 2
19039: PPUSH
19040: LD_VAR 0 3
19044: PPUSH
19045: CALL 18587 0 3
19049: ST_TO_ADDR
19050: LD_VAR 0 4
19054: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
19055: LD_INT 0
19057: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
19058: LD_ADDR_VAR 0 5
19062: PUSH
19063: LD_VAR 0 1
19067: PPUSH
19068: CALL_OW 250
19072: PPUSH
19073: LD_VAR 0 1
19077: PPUSH
19078: CALL_OW 251
19082: PPUSH
19083: LD_VAR 0 2
19087: PPUSH
19088: LD_VAR 0 3
19092: PPUSH
19093: LD_VAR 0 4
19097: PPUSH
19098: CALL 19108 0 5
19102: ST_TO_ADDR
// end ;
19103: LD_VAR 0 5
19107: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
19108: LD_INT 0
19110: PPUSH
19111: PPUSH
19112: PPUSH
19113: PPUSH
// if not list then
19114: LD_VAR 0 3
19118: NOT
19119: IFFALSE 19123
// exit ;
19121: GO 19511
// result := [ ] ;
19123: LD_ADDR_VAR 0 6
19127: PUSH
19128: EMPTY
19129: ST_TO_ADDR
// for i in list do
19130: LD_ADDR_VAR 0 7
19134: PUSH
19135: LD_VAR 0 3
19139: PUSH
19140: FOR_IN
19141: IFFALSE 19343
// begin tmp := GetDistUnitXY ( i , x , y ) ;
19143: LD_ADDR_VAR 0 9
19147: PUSH
19148: LD_VAR 0 7
19152: PPUSH
19153: LD_VAR 0 1
19157: PPUSH
19158: LD_VAR 0 2
19162: PPUSH
19163: CALL_OW 297
19167: ST_TO_ADDR
// if not result then
19168: LD_VAR 0 6
19172: NOT
19173: IFFALSE 19199
// result := [ [ i , tmp ] ] else
19175: LD_ADDR_VAR 0 6
19179: PUSH
19180: LD_VAR 0 7
19184: PUSH
19185: LD_VAR 0 9
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: EMPTY
19195: LIST
19196: ST_TO_ADDR
19197: GO 19341
// begin if result [ result ] [ 2 ] < tmp then
19199: LD_VAR 0 6
19203: PUSH
19204: LD_VAR 0 6
19208: ARRAY
19209: PUSH
19210: LD_INT 2
19212: ARRAY
19213: PUSH
19214: LD_VAR 0 9
19218: LESS
19219: IFFALSE 19261
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
19221: LD_ADDR_VAR 0 6
19225: PUSH
19226: LD_VAR 0 6
19230: PPUSH
19231: LD_VAR 0 6
19235: PUSH
19236: LD_INT 1
19238: PLUS
19239: PPUSH
19240: LD_VAR 0 7
19244: PUSH
19245: LD_VAR 0 9
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PPUSH
19254: CALL_OW 2
19258: ST_TO_ADDR
19259: GO 19341
// for j = 1 to result do
19261: LD_ADDR_VAR 0 8
19265: PUSH
19266: DOUBLE
19267: LD_INT 1
19269: DEC
19270: ST_TO_ADDR
19271: LD_VAR 0 6
19275: PUSH
19276: FOR_TO
19277: IFFALSE 19339
// begin if tmp < result [ j ] [ 2 ] then
19279: LD_VAR 0 9
19283: PUSH
19284: LD_VAR 0 6
19288: PUSH
19289: LD_VAR 0 8
19293: ARRAY
19294: PUSH
19295: LD_INT 2
19297: ARRAY
19298: LESS
19299: IFFALSE 19337
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19301: LD_ADDR_VAR 0 6
19305: PUSH
19306: LD_VAR 0 6
19310: PPUSH
19311: LD_VAR 0 8
19315: PPUSH
19316: LD_VAR 0 7
19320: PUSH
19321: LD_VAR 0 9
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PPUSH
19330: CALL_OW 2
19334: ST_TO_ADDR
// break ;
19335: GO 19339
// end ; end ;
19337: GO 19276
19339: POP
19340: POP
// end ; end ;
19341: GO 19140
19343: POP
19344: POP
// if result and not asc then
19345: LD_VAR 0 6
19349: PUSH
19350: LD_VAR 0 4
19354: NOT
19355: AND
19356: IFFALSE 19431
// begin tmp := result ;
19358: LD_ADDR_VAR 0 9
19362: PUSH
19363: LD_VAR 0 6
19367: ST_TO_ADDR
// for i = tmp downto 1 do
19368: LD_ADDR_VAR 0 7
19372: PUSH
19373: DOUBLE
19374: LD_VAR 0 9
19378: INC
19379: ST_TO_ADDR
19380: LD_INT 1
19382: PUSH
19383: FOR_DOWNTO
19384: IFFALSE 19429
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19386: LD_ADDR_VAR 0 6
19390: PUSH
19391: LD_VAR 0 6
19395: PPUSH
19396: LD_VAR 0 9
19400: PUSH
19401: LD_VAR 0 7
19405: MINUS
19406: PUSH
19407: LD_INT 1
19409: PLUS
19410: PPUSH
19411: LD_VAR 0 9
19415: PUSH
19416: LD_VAR 0 7
19420: ARRAY
19421: PPUSH
19422: CALL_OW 1
19426: ST_TO_ADDR
19427: GO 19383
19429: POP
19430: POP
// end ; tmp := [ ] ;
19431: LD_ADDR_VAR 0 9
19435: PUSH
19436: EMPTY
19437: ST_TO_ADDR
// if mode then
19438: LD_VAR 0 5
19442: IFFALSE 19511
// begin for i = 1 to result do
19444: LD_ADDR_VAR 0 7
19448: PUSH
19449: DOUBLE
19450: LD_INT 1
19452: DEC
19453: ST_TO_ADDR
19454: LD_VAR 0 6
19458: PUSH
19459: FOR_TO
19460: IFFALSE 19499
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19462: LD_ADDR_VAR 0 9
19466: PUSH
19467: LD_VAR 0 9
19471: PPUSH
19472: LD_VAR 0 7
19476: PPUSH
19477: LD_VAR 0 6
19481: PUSH
19482: LD_VAR 0 7
19486: ARRAY
19487: PUSH
19488: LD_INT 1
19490: ARRAY
19491: PPUSH
19492: CALL_OW 1
19496: ST_TO_ADDR
19497: GO 19459
19499: POP
19500: POP
// result := tmp ;
19501: LD_ADDR_VAR 0 6
19505: PUSH
19506: LD_VAR 0 9
19510: ST_TO_ADDR
// end ; end ;
19511: LD_VAR 0 6
19515: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19516: LD_INT 0
19518: PPUSH
19519: PPUSH
19520: PPUSH
19521: PPUSH
19522: PPUSH
19523: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19524: LD_ADDR_VAR 0 5
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: LD_INT 0
19534: PUSH
19535: LD_INT 0
19537: PUSH
19538: EMPTY
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: ST_TO_ADDR
// if not x or not y then
19546: LD_VAR 0 2
19550: NOT
19551: PUSH
19552: LD_VAR 0 3
19556: NOT
19557: OR
19558: IFFALSE 19562
// exit ;
19560: GO 21208
// if not range then
19562: LD_VAR 0 4
19566: NOT
19567: IFFALSE 19577
// range := 10 ;
19569: LD_ADDR_VAR 0 4
19573: PUSH
19574: LD_INT 10
19576: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19577: LD_ADDR_VAR 0 8
19581: PUSH
19582: LD_INT 81
19584: PUSH
19585: LD_VAR 0 1
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 92
19596: PUSH
19597: LD_VAR 0 2
19601: PUSH
19602: LD_VAR 0 3
19606: PUSH
19607: LD_VAR 0 4
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 3
19620: PUSH
19621: LD_INT 21
19623: PUSH
19624: LD_INT 3
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: LIST
19639: PPUSH
19640: CALL_OW 69
19644: ST_TO_ADDR
// if not tmp then
19645: LD_VAR 0 8
19649: NOT
19650: IFFALSE 19654
// exit ;
19652: GO 21208
// for i in tmp do
19654: LD_ADDR_VAR 0 6
19658: PUSH
19659: LD_VAR 0 8
19663: PUSH
19664: FOR_IN
19665: IFFALSE 21183
// begin points := [ 0 , 0 , 0 ] ;
19667: LD_ADDR_VAR 0 9
19671: PUSH
19672: LD_INT 0
19674: PUSH
19675: LD_INT 0
19677: PUSH
19678: LD_INT 0
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: LIST
19685: ST_TO_ADDR
// bpoints := 1 ;
19686: LD_ADDR_VAR 0 10
19690: PUSH
19691: LD_INT 1
19693: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19694: LD_VAR 0 6
19698: PPUSH
19699: CALL_OW 247
19703: PUSH
19704: LD_INT 1
19706: DOUBLE
19707: EQUAL
19708: IFTRUE 19712
19710: GO 20290
19712: POP
// begin if GetClass ( i ) = 1 then
19713: LD_VAR 0 6
19717: PPUSH
19718: CALL_OW 257
19722: PUSH
19723: LD_INT 1
19725: EQUAL
19726: IFFALSE 19747
// points := [ 10 , 5 , 3 ] ;
19728: LD_ADDR_VAR 0 9
19732: PUSH
19733: LD_INT 10
19735: PUSH
19736: LD_INT 5
19738: PUSH
19739: LD_INT 3
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: LIST
19746: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19747: LD_VAR 0 6
19751: PPUSH
19752: CALL_OW 257
19756: PUSH
19757: LD_INT 2
19759: PUSH
19760: LD_INT 3
19762: PUSH
19763: LD_INT 4
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: LIST
19770: IN
19771: IFFALSE 19792
// points := [ 3 , 2 , 1 ] ;
19773: LD_ADDR_VAR 0 9
19777: PUSH
19778: LD_INT 3
19780: PUSH
19781: LD_INT 2
19783: PUSH
19784: LD_INT 1
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: LIST
19791: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19792: LD_VAR 0 6
19796: PPUSH
19797: CALL_OW 257
19801: PUSH
19802: LD_INT 5
19804: EQUAL
19805: IFFALSE 19826
// points := [ 130 , 5 , 2 ] ;
19807: LD_ADDR_VAR 0 9
19811: PUSH
19812: LD_INT 130
19814: PUSH
19815: LD_INT 5
19817: PUSH
19818: LD_INT 2
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: LIST
19825: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19826: LD_VAR 0 6
19830: PPUSH
19831: CALL_OW 257
19835: PUSH
19836: LD_INT 8
19838: EQUAL
19839: IFFALSE 19860
// points := [ 35 , 35 , 30 ] ;
19841: LD_ADDR_VAR 0 9
19845: PUSH
19846: LD_INT 35
19848: PUSH
19849: LD_INT 35
19851: PUSH
19852: LD_INT 30
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: LIST
19859: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19860: LD_VAR 0 6
19864: PPUSH
19865: CALL_OW 257
19869: PUSH
19870: LD_INT 9
19872: EQUAL
19873: IFFALSE 19894
// points := [ 20 , 55 , 40 ] ;
19875: LD_ADDR_VAR 0 9
19879: PUSH
19880: LD_INT 20
19882: PUSH
19883: LD_INT 55
19885: PUSH
19886: LD_INT 40
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: LIST
19893: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19894: LD_VAR 0 6
19898: PPUSH
19899: CALL_OW 257
19903: PUSH
19904: LD_INT 12
19906: PUSH
19907: LD_INT 16
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: IN
19914: IFFALSE 19935
// points := [ 5 , 3 , 2 ] ;
19916: LD_ADDR_VAR 0 9
19920: PUSH
19921: LD_INT 5
19923: PUSH
19924: LD_INT 3
19926: PUSH
19927: LD_INT 2
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: LIST
19934: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19935: LD_VAR 0 6
19939: PPUSH
19940: CALL_OW 257
19944: PUSH
19945: LD_INT 17
19947: EQUAL
19948: IFFALSE 19969
// points := [ 100 , 50 , 75 ] ;
19950: LD_ADDR_VAR 0 9
19954: PUSH
19955: LD_INT 100
19957: PUSH
19958: LD_INT 50
19960: PUSH
19961: LD_INT 75
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: LIST
19968: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19969: LD_VAR 0 6
19973: PPUSH
19974: CALL_OW 257
19978: PUSH
19979: LD_INT 15
19981: EQUAL
19982: IFFALSE 20003
// points := [ 10 , 5 , 3 ] ;
19984: LD_ADDR_VAR 0 9
19988: PUSH
19989: LD_INT 10
19991: PUSH
19992: LD_INT 5
19994: PUSH
19995: LD_INT 3
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: LIST
20002: ST_TO_ADDR
// if GetClass ( i ) = 14 then
20003: LD_VAR 0 6
20007: PPUSH
20008: CALL_OW 257
20012: PUSH
20013: LD_INT 14
20015: EQUAL
20016: IFFALSE 20037
// points := [ 10 , 0 , 0 ] ;
20018: LD_ADDR_VAR 0 9
20022: PUSH
20023: LD_INT 10
20025: PUSH
20026: LD_INT 0
20028: PUSH
20029: LD_INT 0
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: LIST
20036: ST_TO_ADDR
// if GetClass ( i ) = 11 then
20037: LD_VAR 0 6
20041: PPUSH
20042: CALL_OW 257
20046: PUSH
20047: LD_INT 11
20049: EQUAL
20050: IFFALSE 20071
// points := [ 30 , 10 , 5 ] ;
20052: LD_ADDR_VAR 0 9
20056: PUSH
20057: LD_INT 30
20059: PUSH
20060: LD_INT 10
20062: PUSH
20063: LD_INT 5
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: LIST
20070: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
20071: LD_VAR 0 1
20075: PPUSH
20076: LD_INT 5
20078: PPUSH
20079: CALL_OW 321
20083: PUSH
20084: LD_INT 2
20086: EQUAL
20087: IFFALSE 20104
// bpoints := bpoints * 1.8 ;
20089: LD_ADDR_VAR 0 10
20093: PUSH
20094: LD_VAR 0 10
20098: PUSH
20099: LD_REAL  1.80000000000000E+0000
20102: MUL
20103: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
20104: LD_VAR 0 6
20108: PPUSH
20109: CALL_OW 257
20113: PUSH
20114: LD_INT 1
20116: PUSH
20117: LD_INT 2
20119: PUSH
20120: LD_INT 3
20122: PUSH
20123: LD_INT 4
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: IN
20132: PUSH
20133: LD_VAR 0 1
20137: PPUSH
20138: LD_INT 51
20140: PPUSH
20141: CALL_OW 321
20145: PUSH
20146: LD_INT 2
20148: EQUAL
20149: AND
20150: IFFALSE 20167
// bpoints := bpoints * 1.2 ;
20152: LD_ADDR_VAR 0 10
20156: PUSH
20157: LD_VAR 0 10
20161: PUSH
20162: LD_REAL  1.20000000000000E+0000
20165: MUL
20166: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
20167: LD_VAR 0 6
20171: PPUSH
20172: CALL_OW 257
20176: PUSH
20177: LD_INT 5
20179: PUSH
20180: LD_INT 7
20182: PUSH
20183: LD_INT 9
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: LIST
20190: IN
20191: PUSH
20192: LD_VAR 0 1
20196: PPUSH
20197: LD_INT 52
20199: PPUSH
20200: CALL_OW 321
20204: PUSH
20205: LD_INT 2
20207: EQUAL
20208: AND
20209: IFFALSE 20226
// bpoints := bpoints * 1.5 ;
20211: LD_ADDR_VAR 0 10
20215: PUSH
20216: LD_VAR 0 10
20220: PUSH
20221: LD_REAL  1.50000000000000E+0000
20224: MUL
20225: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
20226: LD_VAR 0 1
20230: PPUSH
20231: LD_INT 66
20233: PPUSH
20234: CALL_OW 321
20238: PUSH
20239: LD_INT 2
20241: EQUAL
20242: IFFALSE 20259
// bpoints := bpoints * 1.1 ;
20244: LD_ADDR_VAR 0 10
20248: PUSH
20249: LD_VAR 0 10
20253: PUSH
20254: LD_REAL  1.10000000000000E+0000
20257: MUL
20258: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20259: LD_ADDR_VAR 0 10
20263: PUSH
20264: LD_VAR 0 10
20268: PUSH
20269: LD_VAR 0 6
20273: PPUSH
20274: LD_INT 1
20276: PPUSH
20277: CALL_OW 259
20281: PUSH
20282: LD_REAL  1.15000000000000E+0000
20285: MUL
20286: MUL
20287: ST_TO_ADDR
// end ; unit_vehicle :
20288: GO 21112
20290: LD_INT 2
20292: DOUBLE
20293: EQUAL
20294: IFTRUE 20298
20296: GO 21100
20298: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20299: LD_VAR 0 6
20303: PPUSH
20304: CALL_OW 264
20308: PUSH
20309: LD_INT 2
20311: PUSH
20312: LD_INT 42
20314: PUSH
20315: LD_INT 24
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: IN
20323: IFFALSE 20344
// points := [ 25 , 5 , 3 ] ;
20325: LD_ADDR_VAR 0 9
20329: PUSH
20330: LD_INT 25
20332: PUSH
20333: LD_INT 5
20335: PUSH
20336: LD_INT 3
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: LIST
20343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20344: LD_VAR 0 6
20348: PPUSH
20349: CALL_OW 264
20353: PUSH
20354: LD_INT 4
20356: PUSH
20357: LD_INT 43
20359: PUSH
20360: LD_INT 25
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: LIST
20367: IN
20368: IFFALSE 20389
// points := [ 40 , 15 , 5 ] ;
20370: LD_ADDR_VAR 0 9
20374: PUSH
20375: LD_INT 40
20377: PUSH
20378: LD_INT 15
20380: PUSH
20381: LD_INT 5
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: LIST
20388: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20389: LD_VAR 0 6
20393: PPUSH
20394: CALL_OW 264
20398: PUSH
20399: LD_INT 3
20401: PUSH
20402: LD_INT 23
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: IN
20409: IFFALSE 20430
// points := [ 7 , 25 , 8 ] ;
20411: LD_ADDR_VAR 0 9
20415: PUSH
20416: LD_INT 7
20418: PUSH
20419: LD_INT 25
20421: PUSH
20422: LD_INT 8
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: LIST
20429: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20430: LD_VAR 0 6
20434: PPUSH
20435: CALL_OW 264
20439: PUSH
20440: LD_INT 5
20442: PUSH
20443: LD_INT 27
20445: PUSH
20446: LD_INT 44
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: LIST
20453: IN
20454: IFFALSE 20475
// points := [ 14 , 50 , 16 ] ;
20456: LD_ADDR_VAR 0 9
20460: PUSH
20461: LD_INT 14
20463: PUSH
20464: LD_INT 50
20466: PUSH
20467: LD_INT 16
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: LIST
20474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20475: LD_VAR 0 6
20479: PPUSH
20480: CALL_OW 264
20484: PUSH
20485: LD_INT 6
20487: PUSH
20488: LD_INT 46
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: IN
20495: IFFALSE 20516
// points := [ 32 , 120 , 70 ] ;
20497: LD_ADDR_VAR 0 9
20501: PUSH
20502: LD_INT 32
20504: PUSH
20505: LD_INT 120
20507: PUSH
20508: LD_INT 70
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: LIST
20515: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
20516: LD_VAR 0 6
20520: PPUSH
20521: CALL_OW 264
20525: PUSH
20526: LD_INT 7
20528: PUSH
20529: LD_INT 28
20531: PUSH
20532: LD_INT 45
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: LIST
20539: IN
20540: IFFALSE 20561
// points := [ 35 , 20 , 45 ] ;
20542: LD_ADDR_VAR 0 9
20546: PUSH
20547: LD_INT 35
20549: PUSH
20550: LD_INT 20
20552: PUSH
20553: LD_INT 45
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: LIST
20560: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20561: LD_VAR 0 6
20565: PPUSH
20566: CALL_OW 264
20570: PUSH
20571: LD_INT 47
20573: PUSH
20574: EMPTY
20575: LIST
20576: IN
20577: IFFALSE 20598
// points := [ 67 , 45 , 75 ] ;
20579: LD_ADDR_VAR 0 9
20583: PUSH
20584: LD_INT 67
20586: PUSH
20587: LD_INT 45
20589: PUSH
20590: LD_INT 75
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: LIST
20597: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20598: LD_VAR 0 6
20602: PPUSH
20603: CALL_OW 264
20607: PUSH
20608: LD_INT 26
20610: PUSH
20611: EMPTY
20612: LIST
20613: IN
20614: IFFALSE 20635
// points := [ 120 , 30 , 80 ] ;
20616: LD_ADDR_VAR 0 9
20620: PUSH
20621: LD_INT 120
20623: PUSH
20624: LD_INT 30
20626: PUSH
20627: LD_INT 80
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: LIST
20634: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20635: LD_VAR 0 6
20639: PPUSH
20640: CALL_OW 264
20644: PUSH
20645: LD_INT 22
20647: PUSH
20648: EMPTY
20649: LIST
20650: IN
20651: IFFALSE 20672
// points := [ 40 , 1 , 1 ] ;
20653: LD_ADDR_VAR 0 9
20657: PUSH
20658: LD_INT 40
20660: PUSH
20661: LD_INT 1
20663: PUSH
20664: LD_INT 1
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: LIST
20671: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20672: LD_VAR 0 6
20676: PPUSH
20677: CALL_OW 264
20681: PUSH
20682: LD_INT 29
20684: PUSH
20685: EMPTY
20686: LIST
20687: IN
20688: IFFALSE 20709
// points := [ 70 , 200 , 400 ] ;
20690: LD_ADDR_VAR 0 9
20694: PUSH
20695: LD_INT 70
20697: PUSH
20698: LD_INT 200
20700: PUSH
20701: LD_INT 400
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: LIST
20708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20709: LD_VAR 0 6
20713: PPUSH
20714: CALL_OW 264
20718: PUSH
20719: LD_INT 14
20721: PUSH
20722: LD_INT 53
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: IN
20729: IFFALSE 20750
// points := [ 40 , 10 , 20 ] ;
20731: LD_ADDR_VAR 0 9
20735: PUSH
20736: LD_INT 40
20738: PUSH
20739: LD_INT 10
20741: PUSH
20742: LD_INT 20
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20750: LD_VAR 0 6
20754: PPUSH
20755: CALL_OW 264
20759: PUSH
20760: LD_INT 9
20762: PUSH
20763: EMPTY
20764: LIST
20765: IN
20766: IFFALSE 20787
// points := [ 5 , 70 , 20 ] ;
20768: LD_ADDR_VAR 0 9
20772: PUSH
20773: LD_INT 5
20775: PUSH
20776: LD_INT 70
20778: PUSH
20779: LD_INT 20
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: LIST
20786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20787: LD_VAR 0 6
20791: PPUSH
20792: CALL_OW 264
20796: PUSH
20797: LD_INT 10
20799: PUSH
20800: EMPTY
20801: LIST
20802: IN
20803: IFFALSE 20824
// points := [ 35 , 110 , 70 ] ;
20805: LD_ADDR_VAR 0 9
20809: PUSH
20810: LD_INT 35
20812: PUSH
20813: LD_INT 110
20815: PUSH
20816: LD_INT 70
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: LIST
20823: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20824: LD_VAR 0 6
20828: PPUSH
20829: CALL_OW 265
20833: PUSH
20834: LD_INT 25
20836: EQUAL
20837: IFFALSE 20858
// points := [ 80 , 65 , 100 ] ;
20839: LD_ADDR_VAR 0 9
20843: PUSH
20844: LD_INT 80
20846: PUSH
20847: LD_INT 65
20849: PUSH
20850: LD_INT 100
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: LIST
20857: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20858: LD_VAR 0 6
20862: PPUSH
20863: CALL_OW 263
20867: PUSH
20868: LD_INT 1
20870: EQUAL
20871: IFFALSE 20906
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20873: LD_ADDR_VAR 0 10
20877: PUSH
20878: LD_VAR 0 10
20882: PUSH
20883: LD_VAR 0 6
20887: PPUSH
20888: CALL_OW 311
20892: PPUSH
20893: LD_INT 3
20895: PPUSH
20896: CALL_OW 259
20900: PUSH
20901: LD_INT 4
20903: MUL
20904: MUL
20905: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20906: LD_VAR 0 6
20910: PPUSH
20911: CALL_OW 263
20915: PUSH
20916: LD_INT 2
20918: EQUAL
20919: IFFALSE 20970
// begin j := IsControledBy ( i ) ;
20921: LD_ADDR_VAR 0 7
20925: PUSH
20926: LD_VAR 0 6
20930: PPUSH
20931: CALL_OW 312
20935: ST_TO_ADDR
// if j then
20936: LD_VAR 0 7
20940: IFFALSE 20970
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20942: LD_ADDR_VAR 0 10
20946: PUSH
20947: LD_VAR 0 10
20951: PUSH
20952: LD_VAR 0 7
20956: PPUSH
20957: LD_INT 3
20959: PPUSH
20960: CALL_OW 259
20964: PUSH
20965: LD_INT 3
20967: MUL
20968: MUL
20969: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20970: LD_VAR 0 6
20974: PPUSH
20975: CALL_OW 264
20979: PUSH
20980: LD_INT 5
20982: PUSH
20983: LD_INT 6
20985: PUSH
20986: LD_INT 46
20988: PUSH
20989: LD_INT 44
20991: PUSH
20992: LD_INT 47
20994: PUSH
20995: LD_INT 45
20997: PUSH
20998: LD_INT 28
21000: PUSH
21001: LD_INT 7
21003: PUSH
21004: LD_INT 27
21006: PUSH
21007: LD_INT 29
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: IN
21022: PUSH
21023: LD_VAR 0 1
21027: PPUSH
21028: LD_INT 52
21030: PPUSH
21031: CALL_OW 321
21035: PUSH
21036: LD_INT 2
21038: EQUAL
21039: AND
21040: IFFALSE 21057
// bpoints := bpoints * 1.2 ;
21042: LD_ADDR_VAR 0 10
21046: PUSH
21047: LD_VAR 0 10
21051: PUSH
21052: LD_REAL  1.20000000000000E+0000
21055: MUL
21056: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
21057: LD_VAR 0 6
21061: PPUSH
21062: CALL_OW 264
21066: PUSH
21067: LD_INT 6
21069: PUSH
21070: LD_INT 46
21072: PUSH
21073: LD_INT 47
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: LIST
21080: IN
21081: IFFALSE 21098
// bpoints := bpoints * 1.2 ;
21083: LD_ADDR_VAR 0 10
21087: PUSH
21088: LD_VAR 0 10
21092: PUSH
21093: LD_REAL  1.20000000000000E+0000
21096: MUL
21097: ST_TO_ADDR
// end ; unit_building :
21098: GO 21112
21100: LD_INT 3
21102: DOUBLE
21103: EQUAL
21104: IFTRUE 21108
21106: GO 21111
21108: POP
// ; end ;
21109: GO 21112
21111: POP
// for j = 1 to 3 do
21112: LD_ADDR_VAR 0 7
21116: PUSH
21117: DOUBLE
21118: LD_INT 1
21120: DEC
21121: ST_TO_ADDR
21122: LD_INT 3
21124: PUSH
21125: FOR_TO
21126: IFFALSE 21179
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
21128: LD_ADDR_VAR 0 5
21132: PUSH
21133: LD_VAR 0 5
21137: PPUSH
21138: LD_VAR 0 7
21142: PPUSH
21143: LD_VAR 0 5
21147: PUSH
21148: LD_VAR 0 7
21152: ARRAY
21153: PUSH
21154: LD_VAR 0 9
21158: PUSH
21159: LD_VAR 0 7
21163: ARRAY
21164: PUSH
21165: LD_VAR 0 10
21169: MUL
21170: PLUS
21171: PPUSH
21172: CALL_OW 1
21176: ST_TO_ADDR
21177: GO 21125
21179: POP
21180: POP
// end ;
21181: GO 19664
21183: POP
21184: POP
// result := Replace ( result , 4 , tmp ) ;
21185: LD_ADDR_VAR 0 5
21189: PUSH
21190: LD_VAR 0 5
21194: PPUSH
21195: LD_INT 4
21197: PPUSH
21198: LD_VAR 0 8
21202: PPUSH
21203: CALL_OW 1
21207: ST_TO_ADDR
// end ;
21208: LD_VAR 0 5
21212: RET
// export function DangerAtRange ( unit , range ) ; begin
21213: LD_INT 0
21215: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
21216: LD_ADDR_VAR 0 3
21220: PUSH
21221: LD_VAR 0 1
21225: PPUSH
21226: CALL_OW 255
21230: PPUSH
21231: LD_VAR 0 1
21235: PPUSH
21236: CALL_OW 250
21240: PPUSH
21241: LD_VAR 0 1
21245: PPUSH
21246: CALL_OW 251
21250: PPUSH
21251: LD_VAR 0 2
21255: PPUSH
21256: CALL 19516 0 4
21260: ST_TO_ADDR
// end ;
21261: LD_VAR 0 3
21265: RET
// export function IsExtension ( b ) ; begin
21266: LD_INT 0
21268: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21269: LD_ADDR_VAR 0 2
21273: PUSH
21274: LD_VAR 0 1
21278: PPUSH
21279: CALL_OW 266
21283: PUSH
21284: LD_INT 23
21286: PUSH
21287: LD_INT 20
21289: PUSH
21290: LD_INT 22
21292: PUSH
21293: LD_INT 17
21295: PUSH
21296: LD_INT 24
21298: PUSH
21299: LD_INT 21
21301: PUSH
21302: LD_INT 19
21304: PUSH
21305: LD_INT 16
21307: PUSH
21308: LD_INT 25
21310: PUSH
21311: LD_INT 18
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: IN
21326: ST_TO_ADDR
// end ;
21327: LD_VAR 0 2
21331: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
21332: LD_INT 0
21334: PPUSH
21335: PPUSH
21336: PPUSH
// result := [ ] ;
21337: LD_ADDR_VAR 0 2
21341: PUSH
21342: EMPTY
21343: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
21344: LD_ADDR_VAR 0 3
21348: PUSH
21349: LD_INT 21
21351: PUSH
21352: LD_INT 3
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PPUSH
21359: CALL_OW 69
21363: ST_TO_ADDR
// if not tmp then
21364: LD_VAR 0 3
21368: NOT
21369: IFFALSE 21373
// exit ;
21371: GO 21423
// for i in tmp do
21373: LD_ADDR_VAR 0 4
21377: PUSH
21378: LD_VAR 0 3
21382: PUSH
21383: FOR_IN
21384: IFFALSE 21421
// if GetBase ( i ) = base then
21386: LD_VAR 0 4
21390: PPUSH
21391: CALL_OW 274
21395: PUSH
21396: LD_VAR 0 1
21400: EQUAL
21401: IFFALSE 21419
// result := result ^ i ;
21403: LD_ADDR_VAR 0 2
21407: PUSH
21408: LD_VAR 0 2
21412: PUSH
21413: LD_VAR 0 4
21417: ADD
21418: ST_TO_ADDR
21419: GO 21383
21421: POP
21422: POP
// end ;
21423: LD_VAR 0 2
21427: RET
// export function ComComplete ( unit , b ) ; var i ; begin
21428: LD_INT 0
21430: PPUSH
21431: PPUSH
// if BuildingStatus ( b ) = bs_build then
21432: LD_VAR 0 2
21436: PPUSH
21437: CALL_OW 461
21441: PUSH
21442: LD_INT 1
21444: EQUAL
21445: IFFALSE 21505
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21447: LD_VAR 0 1
21451: PPUSH
21452: LD_STRING h
21454: PUSH
21455: LD_VAR 0 2
21459: PPUSH
21460: CALL_OW 250
21464: PUSH
21465: LD_VAR 0 2
21469: PPUSH
21470: CALL_OW 251
21474: PUSH
21475: LD_VAR 0 2
21479: PUSH
21480: LD_INT 0
21482: PUSH
21483: LD_INT 0
21485: PUSH
21486: LD_INT 0
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: PUSH
21498: EMPTY
21499: LIST
21500: PPUSH
21501: CALL_OW 446
// end ;
21505: LD_VAR 0 3
21509: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21510: LD_INT 0
21512: PPUSH
21513: PPUSH
21514: PPUSH
21515: PPUSH
21516: PPUSH
21517: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
21518: LD_VAR 0 1
21522: NOT
21523: PUSH
21524: LD_VAR 0 1
21528: PPUSH
21529: CALL_OW 263
21533: PUSH
21534: LD_INT 2
21536: EQUAL
21537: NOT
21538: OR
21539: IFFALSE 21543
// exit ;
21541: GO 21859
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21543: LD_ADDR_VAR 0 6
21547: PUSH
21548: LD_INT 22
21550: PUSH
21551: LD_VAR 0 1
21555: PPUSH
21556: CALL_OW 255
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 2
21567: PUSH
21568: LD_INT 30
21570: PUSH
21571: LD_INT 36
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 34
21580: PUSH
21581: LD_INT 31
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PPUSH
21597: CALL_OW 69
21601: ST_TO_ADDR
// if not tmp then
21602: LD_VAR 0 6
21606: NOT
21607: IFFALSE 21611
// exit ;
21609: GO 21859
// result := [ ] ;
21611: LD_ADDR_VAR 0 2
21615: PUSH
21616: EMPTY
21617: ST_TO_ADDR
// for i in tmp do
21618: LD_ADDR_VAR 0 3
21622: PUSH
21623: LD_VAR 0 6
21627: PUSH
21628: FOR_IN
21629: IFFALSE 21700
// begin t := UnitsInside ( i ) ;
21631: LD_ADDR_VAR 0 4
21635: PUSH
21636: LD_VAR 0 3
21640: PPUSH
21641: CALL_OW 313
21645: ST_TO_ADDR
// if t then
21646: LD_VAR 0 4
21650: IFFALSE 21698
// for j in t do
21652: LD_ADDR_VAR 0 7
21656: PUSH
21657: LD_VAR 0 4
21661: PUSH
21662: FOR_IN
21663: IFFALSE 21696
// result := Insert ( result , result + 1 , j ) ;
21665: LD_ADDR_VAR 0 2
21669: PUSH
21670: LD_VAR 0 2
21674: PPUSH
21675: LD_VAR 0 2
21679: PUSH
21680: LD_INT 1
21682: PLUS
21683: PPUSH
21684: LD_VAR 0 7
21688: PPUSH
21689: CALL_OW 2
21693: ST_TO_ADDR
21694: GO 21662
21696: POP
21697: POP
// end ;
21698: GO 21628
21700: POP
21701: POP
// if not result then
21702: LD_VAR 0 2
21706: NOT
21707: IFFALSE 21711
// exit ;
21709: GO 21859
// mech := result [ 1 ] ;
21711: LD_ADDR_VAR 0 5
21715: PUSH
21716: LD_VAR 0 2
21720: PUSH
21721: LD_INT 1
21723: ARRAY
21724: ST_TO_ADDR
// if result > 1 then
21725: LD_VAR 0 2
21729: PUSH
21730: LD_INT 1
21732: GREATER
21733: IFFALSE 21845
// for i = 2 to result do
21735: LD_ADDR_VAR 0 3
21739: PUSH
21740: DOUBLE
21741: LD_INT 2
21743: DEC
21744: ST_TO_ADDR
21745: LD_VAR 0 2
21749: PUSH
21750: FOR_TO
21751: IFFALSE 21843
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21753: LD_ADDR_VAR 0 4
21757: PUSH
21758: LD_VAR 0 2
21762: PUSH
21763: LD_VAR 0 3
21767: ARRAY
21768: PPUSH
21769: LD_INT 3
21771: PPUSH
21772: CALL_OW 259
21776: PUSH
21777: LD_VAR 0 2
21781: PUSH
21782: LD_VAR 0 3
21786: ARRAY
21787: PPUSH
21788: CALL_OW 432
21792: MINUS
21793: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21794: LD_VAR 0 4
21798: PUSH
21799: LD_VAR 0 5
21803: PPUSH
21804: LD_INT 3
21806: PPUSH
21807: CALL_OW 259
21811: PUSH
21812: LD_VAR 0 5
21816: PPUSH
21817: CALL_OW 432
21821: MINUS
21822: GREATEREQUAL
21823: IFFALSE 21841
// mech := result [ i ] ;
21825: LD_ADDR_VAR 0 5
21829: PUSH
21830: LD_VAR 0 2
21834: PUSH
21835: LD_VAR 0 3
21839: ARRAY
21840: ST_TO_ADDR
// end ;
21841: GO 21750
21843: POP
21844: POP
// ComLinkTo ( vehicle , mech ) ;
21845: LD_VAR 0 1
21849: PPUSH
21850: LD_VAR 0 5
21854: PPUSH
21855: CALL_OW 135
// end ;
21859: LD_VAR 0 2
21863: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
21864: LD_INT 0
21866: PPUSH
21867: PPUSH
21868: PPUSH
21869: PPUSH
21870: PPUSH
21871: PPUSH
21872: PPUSH
21873: PPUSH
21874: PPUSH
21875: PPUSH
21876: PPUSH
21877: PPUSH
// result := [ ] ;
21878: LD_ADDR_VAR 0 6
21882: PUSH
21883: EMPTY
21884: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21885: LD_VAR 0 1
21889: PPUSH
21890: CALL_OW 266
21894: PUSH
21895: LD_INT 0
21897: PUSH
21898: LD_INT 1
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: IN
21905: NOT
21906: IFFALSE 21910
// exit ;
21908: GO 23319
// if name then
21910: LD_VAR 0 2
21914: IFFALSE 21930
// SetBName ( base_dep , name ) ;
21916: LD_VAR 0 1
21920: PPUSH
21921: LD_VAR 0 2
21925: PPUSH
21926: CALL_OW 500
// base := GetBase ( base_dep ) ;
21930: LD_ADDR_VAR 0 14
21934: PUSH
21935: LD_VAR 0 1
21939: PPUSH
21940: CALL_OW 274
21944: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21945: LD_ADDR_VAR 0 15
21949: PUSH
21950: LD_VAR 0 1
21954: PPUSH
21955: CALL_OW 255
21959: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21960: LD_ADDR_VAR 0 16
21964: PUSH
21965: LD_VAR 0 1
21969: PPUSH
21970: CALL_OW 248
21974: ST_TO_ADDR
// if sources then
21975: LD_VAR 0 4
21979: IFFALSE 22026
// for i = 1 to 3 do
21981: LD_ADDR_VAR 0 7
21985: PUSH
21986: DOUBLE
21987: LD_INT 1
21989: DEC
21990: ST_TO_ADDR
21991: LD_INT 3
21993: PUSH
21994: FOR_TO
21995: IFFALSE 22024
// AddResourceType ( base , i , sources [ i ] ) ;
21997: LD_VAR 0 14
22001: PPUSH
22002: LD_VAR 0 7
22006: PPUSH
22007: LD_VAR 0 4
22011: PUSH
22012: LD_VAR 0 7
22016: ARRAY
22017: PPUSH
22018: CALL_OW 276
22022: GO 21994
22024: POP
22025: POP
// buildings := GetBaseBuildings ( base ) ;
22026: LD_ADDR_VAR 0 17
22030: PUSH
22031: LD_VAR 0 14
22035: PPUSH
22036: CALL 21332 0 1
22040: ST_TO_ADDR
// InitHc ;
22041: CALL_OW 19
// InitUc ;
22045: CALL_OW 18
// uc_side := side ;
22049: LD_ADDR_OWVAR 20
22053: PUSH
22054: LD_VAR 0 15
22058: ST_TO_ADDR
// uc_nation := nation ;
22059: LD_ADDR_OWVAR 21
22063: PUSH
22064: LD_VAR 0 16
22068: ST_TO_ADDR
// if buildings then
22069: LD_VAR 0 17
22073: IFFALSE 23178
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22075: LD_VAR 0 17
22079: PPUSH
22080: LD_INT 2
22082: PUSH
22083: LD_INT 30
22085: PUSH
22086: LD_INT 32
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 30
22095: PUSH
22096: LD_INT 33
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: LIST
22107: PPUSH
22108: CALL_OW 72
22112: IFFALSE 22195
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22114: LD_ADDR_VAR 0 7
22118: PUSH
22119: LD_VAR 0 17
22123: PPUSH
22124: LD_INT 2
22126: PUSH
22127: LD_INT 30
22129: PUSH
22130: LD_INT 32
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 30
22139: PUSH
22140: LD_INT 33
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: PPUSH
22152: CALL_OW 72
22156: PUSH
22157: FOR_IN
22158: IFFALSE 22193
// begin if not GetBWeapon ( i ) then
22160: LD_VAR 0 7
22164: PPUSH
22165: CALL_OW 269
22169: NOT
22170: IFFALSE 22191
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
22172: LD_VAR 0 7
22176: PPUSH
22177: LD_VAR 0 7
22181: PPUSH
22182: CALL 23324 0 1
22186: PPUSH
22187: CALL_OW 431
// end ;
22191: GO 22157
22193: POP
22194: POP
// end ; for i = 1 to personel do
22195: LD_ADDR_VAR 0 7
22199: PUSH
22200: DOUBLE
22201: LD_INT 1
22203: DEC
22204: ST_TO_ADDR
22205: LD_VAR 0 5
22209: PUSH
22210: FOR_TO
22211: IFFALSE 23158
// begin if i > 4 then
22213: LD_VAR 0 7
22217: PUSH
22218: LD_INT 4
22220: GREATER
22221: IFFALSE 22225
// break ;
22223: GO 23158
// case i of 1 :
22225: LD_VAR 0 7
22229: PUSH
22230: LD_INT 1
22232: DOUBLE
22233: EQUAL
22234: IFTRUE 22238
22236: GO 22311
22238: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22239: LD_ADDR_VAR 0 11
22243: PUSH
22244: LD_VAR 0 17
22248: PPUSH
22249: LD_INT 22
22251: PUSH
22252: LD_VAR 0 15
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 2
22263: PUSH
22264: LD_INT 30
22266: PUSH
22267: LD_INT 32
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 30
22276: PUSH
22277: LD_INT 4
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 30
22286: PUSH
22287: LD_INT 5
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PPUSH
22304: CALL_OW 72
22308: ST_TO_ADDR
22309: GO 22533
22311: LD_INT 2
22313: DOUBLE
22314: EQUAL
22315: IFTRUE 22319
22317: GO 22381
22319: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22320: LD_ADDR_VAR 0 11
22324: PUSH
22325: LD_VAR 0 17
22329: PPUSH
22330: LD_INT 22
22332: PUSH
22333: LD_VAR 0 15
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 2
22344: PUSH
22345: LD_INT 30
22347: PUSH
22348: LD_INT 0
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 30
22357: PUSH
22358: LD_INT 1
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: LIST
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PPUSH
22374: CALL_OW 72
22378: ST_TO_ADDR
22379: GO 22533
22381: LD_INT 3
22383: DOUBLE
22384: EQUAL
22385: IFTRUE 22389
22387: GO 22451
22389: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22390: LD_ADDR_VAR 0 11
22394: PUSH
22395: LD_VAR 0 17
22399: PPUSH
22400: LD_INT 22
22402: PUSH
22403: LD_VAR 0 15
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 2
22414: PUSH
22415: LD_INT 30
22417: PUSH
22418: LD_INT 2
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 30
22427: PUSH
22428: LD_INT 3
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PPUSH
22444: CALL_OW 72
22448: ST_TO_ADDR
22449: GO 22533
22451: LD_INT 4
22453: DOUBLE
22454: EQUAL
22455: IFTRUE 22459
22457: GO 22532
22459: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22460: LD_ADDR_VAR 0 11
22464: PUSH
22465: LD_VAR 0 17
22469: PPUSH
22470: LD_INT 22
22472: PUSH
22473: LD_VAR 0 15
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 2
22484: PUSH
22485: LD_INT 30
22487: PUSH
22488: LD_INT 6
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 30
22497: PUSH
22498: LD_INT 7
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 30
22507: PUSH
22508: LD_INT 8
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PPUSH
22525: CALL_OW 72
22529: ST_TO_ADDR
22530: GO 22533
22532: POP
// if not f then
22533: LD_VAR 0 11
22537: NOT
22538: IFFALSE 22542
// continue ;
22540: GO 22210
// x := personel [ i ] ;
22542: LD_ADDR_VAR 0 12
22546: PUSH
22547: LD_VAR 0 5
22551: PUSH
22552: LD_VAR 0 7
22556: ARRAY
22557: ST_TO_ADDR
// if x = - 1 then
22558: LD_VAR 0 12
22562: PUSH
22563: LD_INT 1
22565: NEG
22566: EQUAL
22567: IFFALSE 22776
// begin for j in f do
22569: LD_ADDR_VAR 0 8
22573: PUSH
22574: LD_VAR 0 11
22578: PUSH
22579: FOR_IN
22580: IFFALSE 22772
// repeat InitHc ;
22582: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22586: LD_VAR 0 8
22590: PPUSH
22591: CALL_OW 266
22595: PUSH
22596: LD_INT 5
22598: EQUAL
22599: IFFALSE 22669
// begin if UnitsInside ( j ) < 3 then
22601: LD_VAR 0 8
22605: PPUSH
22606: CALL_OW 313
22610: PUSH
22611: LD_INT 3
22613: LESS
22614: IFFALSE 22650
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22616: LD_INT 0
22618: PPUSH
22619: LD_INT 5
22621: PUSH
22622: LD_INT 8
22624: PUSH
22625: LD_INT 9
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: PUSH
22633: LD_VAR 0 16
22637: ARRAY
22638: PPUSH
22639: LD_VAR 0 3
22643: PPUSH
22644: CALL_OW 380
22648: GO 22667
// PrepareHuman ( false , i , skill ) ;
22650: LD_INT 0
22652: PPUSH
22653: LD_VAR 0 7
22657: PPUSH
22658: LD_VAR 0 3
22662: PPUSH
22663: CALL_OW 380
// end else
22667: GO 22686
// PrepareHuman ( false , i , skill ) ;
22669: LD_INT 0
22671: PPUSH
22672: LD_VAR 0 7
22676: PPUSH
22677: LD_VAR 0 3
22681: PPUSH
22682: CALL_OW 380
// un := CreateHuman ;
22686: LD_ADDR_VAR 0 13
22690: PUSH
22691: CALL_OW 44
22695: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22696: LD_ADDR_VAR 0 6
22700: PUSH
22701: LD_VAR 0 6
22705: PPUSH
22706: LD_INT 1
22708: PPUSH
22709: LD_VAR 0 13
22713: PPUSH
22714: CALL_OW 2
22718: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22719: LD_VAR 0 13
22723: PPUSH
22724: LD_VAR 0 8
22728: PPUSH
22729: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22733: LD_VAR 0 8
22737: PPUSH
22738: CALL_OW 313
22742: PUSH
22743: LD_INT 6
22745: EQUAL
22746: PUSH
22747: LD_VAR 0 8
22751: PPUSH
22752: CALL_OW 266
22756: PUSH
22757: LD_INT 32
22759: PUSH
22760: LD_INT 31
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: IN
22767: OR
22768: IFFALSE 22582
22770: GO 22579
22772: POP
22773: POP
// end else
22774: GO 23156
// for j = 1 to x do
22776: LD_ADDR_VAR 0 8
22780: PUSH
22781: DOUBLE
22782: LD_INT 1
22784: DEC
22785: ST_TO_ADDR
22786: LD_VAR 0 12
22790: PUSH
22791: FOR_TO
22792: IFFALSE 23154
// begin InitHc ;
22794: CALL_OW 19
// if not f then
22798: LD_VAR 0 11
22802: NOT
22803: IFFALSE 22892
// begin PrepareHuman ( false , i , skill ) ;
22805: LD_INT 0
22807: PPUSH
22808: LD_VAR 0 7
22812: PPUSH
22813: LD_VAR 0 3
22817: PPUSH
22818: CALL_OW 380
// un := CreateHuman ;
22822: LD_ADDR_VAR 0 13
22826: PUSH
22827: CALL_OW 44
22831: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22832: LD_ADDR_VAR 0 6
22836: PUSH
22837: LD_VAR 0 6
22841: PPUSH
22842: LD_INT 1
22844: PPUSH
22845: LD_VAR 0 13
22849: PPUSH
22850: CALL_OW 2
22854: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22855: LD_VAR 0 13
22859: PPUSH
22860: LD_VAR 0 1
22864: PPUSH
22865: CALL_OW 250
22869: PPUSH
22870: LD_VAR 0 1
22874: PPUSH
22875: CALL_OW 251
22879: PPUSH
22880: LD_INT 10
22882: PPUSH
22883: LD_INT 0
22885: PPUSH
22886: CALL_OW 50
// continue ;
22890: GO 22791
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22892: LD_VAR 0 11
22896: PUSH
22897: LD_INT 1
22899: ARRAY
22900: PPUSH
22901: CALL_OW 313
22905: PUSH
22906: LD_VAR 0 11
22910: PUSH
22911: LD_INT 1
22913: ARRAY
22914: PPUSH
22915: CALL_OW 266
22919: PUSH
22920: LD_INT 32
22922: PUSH
22923: LD_INT 31
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: IN
22930: AND
22931: PUSH
22932: LD_VAR 0 11
22936: PUSH
22937: LD_INT 1
22939: ARRAY
22940: PPUSH
22941: CALL_OW 313
22945: PUSH
22946: LD_INT 6
22948: EQUAL
22949: OR
22950: IFFALSE 22970
// f := Delete ( f , 1 ) ;
22952: LD_ADDR_VAR 0 11
22956: PUSH
22957: LD_VAR 0 11
22961: PPUSH
22962: LD_INT 1
22964: PPUSH
22965: CALL_OW 3
22969: ST_TO_ADDR
// if not f then
22970: LD_VAR 0 11
22974: NOT
22975: IFFALSE 22993
// begin x := x + 2 ;
22977: LD_ADDR_VAR 0 12
22981: PUSH
22982: LD_VAR 0 12
22986: PUSH
22987: LD_INT 2
22989: PLUS
22990: ST_TO_ADDR
// continue ;
22991: GO 22791
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22993: LD_VAR 0 11
22997: PUSH
22998: LD_INT 1
23000: ARRAY
23001: PPUSH
23002: CALL_OW 266
23006: PUSH
23007: LD_INT 5
23009: EQUAL
23010: IFFALSE 23084
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23012: LD_VAR 0 11
23016: PUSH
23017: LD_INT 1
23019: ARRAY
23020: PPUSH
23021: CALL_OW 313
23025: PUSH
23026: LD_INT 3
23028: LESS
23029: IFFALSE 23065
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23031: LD_INT 0
23033: PPUSH
23034: LD_INT 5
23036: PUSH
23037: LD_INT 8
23039: PUSH
23040: LD_INT 9
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: LIST
23047: PUSH
23048: LD_VAR 0 16
23052: ARRAY
23053: PPUSH
23054: LD_VAR 0 3
23058: PPUSH
23059: CALL_OW 380
23063: GO 23082
// PrepareHuman ( false , i , skill ) ;
23065: LD_INT 0
23067: PPUSH
23068: LD_VAR 0 7
23072: PPUSH
23073: LD_VAR 0 3
23077: PPUSH
23078: CALL_OW 380
// end else
23082: GO 23101
// PrepareHuman ( false , i , skill ) ;
23084: LD_INT 0
23086: PPUSH
23087: LD_VAR 0 7
23091: PPUSH
23092: LD_VAR 0 3
23096: PPUSH
23097: CALL_OW 380
// un := CreateHuman ;
23101: LD_ADDR_VAR 0 13
23105: PUSH
23106: CALL_OW 44
23110: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23111: LD_ADDR_VAR 0 6
23115: PUSH
23116: LD_VAR 0 6
23120: PPUSH
23121: LD_INT 1
23123: PPUSH
23124: LD_VAR 0 13
23128: PPUSH
23129: CALL_OW 2
23133: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23134: LD_VAR 0 13
23138: PPUSH
23139: LD_VAR 0 11
23143: PUSH
23144: LD_INT 1
23146: ARRAY
23147: PPUSH
23148: CALL_OW 52
// end ;
23152: GO 22791
23154: POP
23155: POP
// end ;
23156: GO 22210
23158: POP
23159: POP
// result := result ^ buildings ;
23160: LD_ADDR_VAR 0 6
23164: PUSH
23165: LD_VAR 0 6
23169: PUSH
23170: LD_VAR 0 17
23174: ADD
23175: ST_TO_ADDR
// end else
23176: GO 23319
// begin for i = 1 to personel do
23178: LD_ADDR_VAR 0 7
23182: PUSH
23183: DOUBLE
23184: LD_INT 1
23186: DEC
23187: ST_TO_ADDR
23188: LD_VAR 0 5
23192: PUSH
23193: FOR_TO
23194: IFFALSE 23317
// begin if i > 4 then
23196: LD_VAR 0 7
23200: PUSH
23201: LD_INT 4
23203: GREATER
23204: IFFALSE 23208
// break ;
23206: GO 23317
// x := personel [ i ] ;
23208: LD_ADDR_VAR 0 12
23212: PUSH
23213: LD_VAR 0 5
23217: PUSH
23218: LD_VAR 0 7
23222: ARRAY
23223: ST_TO_ADDR
// if x = - 1 then
23224: LD_VAR 0 12
23228: PUSH
23229: LD_INT 1
23231: NEG
23232: EQUAL
23233: IFFALSE 23237
// continue ;
23235: GO 23193
// PrepareHuman ( false , i , skill ) ;
23237: LD_INT 0
23239: PPUSH
23240: LD_VAR 0 7
23244: PPUSH
23245: LD_VAR 0 3
23249: PPUSH
23250: CALL_OW 380
// un := CreateHuman ;
23254: LD_ADDR_VAR 0 13
23258: PUSH
23259: CALL_OW 44
23263: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23264: LD_VAR 0 13
23268: PPUSH
23269: LD_VAR 0 1
23273: PPUSH
23274: CALL_OW 250
23278: PPUSH
23279: LD_VAR 0 1
23283: PPUSH
23284: CALL_OW 251
23288: PPUSH
23289: LD_INT 10
23291: PPUSH
23292: LD_INT 0
23294: PPUSH
23295: CALL_OW 50
// result := result ^ un ;
23299: LD_ADDR_VAR 0 6
23303: PUSH
23304: LD_VAR 0 6
23308: PUSH
23309: LD_VAR 0 13
23313: ADD
23314: ST_TO_ADDR
// end ;
23315: GO 23193
23317: POP
23318: POP
// end ; end ;
23319: LD_VAR 0 6
23323: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23324: LD_INT 0
23326: PPUSH
23327: PPUSH
23328: PPUSH
23329: PPUSH
23330: PPUSH
23331: PPUSH
23332: PPUSH
23333: PPUSH
23334: PPUSH
23335: PPUSH
23336: PPUSH
23337: PPUSH
23338: PPUSH
23339: PPUSH
23340: PPUSH
23341: PPUSH
// result := false ;
23342: LD_ADDR_VAR 0 2
23346: PUSH
23347: LD_INT 0
23349: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23350: LD_VAR 0 1
23354: NOT
23355: PUSH
23356: LD_VAR 0 1
23360: PPUSH
23361: CALL_OW 266
23365: PUSH
23366: LD_INT 32
23368: PUSH
23369: LD_INT 33
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: IN
23376: NOT
23377: OR
23378: IFFALSE 23382
// exit ;
23380: GO 24615
// nat := GetNation ( tower ) ;
23382: LD_ADDR_VAR 0 11
23386: PUSH
23387: LD_VAR 0 1
23391: PPUSH
23392: CALL_OW 248
23396: ST_TO_ADDR
// side := GetSide ( tower ) ;
23397: LD_ADDR_VAR 0 15
23401: PUSH
23402: LD_VAR 0 1
23406: PPUSH
23407: CALL_OW 255
23411: ST_TO_ADDR
// x := GetX ( tower ) ;
23412: LD_ADDR_VAR 0 9
23416: PUSH
23417: LD_VAR 0 1
23421: PPUSH
23422: CALL_OW 250
23426: ST_TO_ADDR
// y := GetY ( tower ) ;
23427: LD_ADDR_VAR 0 10
23431: PUSH
23432: LD_VAR 0 1
23436: PPUSH
23437: CALL_OW 251
23441: ST_TO_ADDR
// if not x or not y then
23442: LD_VAR 0 9
23446: NOT
23447: PUSH
23448: LD_VAR 0 10
23452: NOT
23453: OR
23454: IFFALSE 23458
// exit ;
23456: GO 24615
// weapon := 0 ;
23458: LD_ADDR_VAR 0 17
23462: PUSH
23463: LD_INT 0
23465: ST_TO_ADDR
// fac_list := [ ] ;
23466: LD_ADDR_VAR 0 16
23470: PUSH
23471: EMPTY
23472: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
23473: LD_ADDR_VAR 0 5
23477: PUSH
23478: LD_VAR 0 1
23482: PPUSH
23483: CALL_OW 274
23487: PPUSH
23488: CALL 21332 0 1
23492: PPUSH
23493: LD_INT 30
23495: PUSH
23496: LD_INT 3
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PPUSH
23503: CALL_OW 72
23507: ST_TO_ADDR
// if not factories then
23508: LD_VAR 0 5
23512: NOT
23513: IFFALSE 23517
// exit ;
23515: GO 24615
// for i in factories do
23517: LD_ADDR_VAR 0 7
23521: PUSH
23522: LD_VAR 0 5
23526: PUSH
23527: FOR_IN
23528: IFFALSE 23553
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23530: LD_ADDR_VAR 0 16
23534: PUSH
23535: LD_VAR 0 16
23539: PUSH
23540: LD_VAR 0 7
23544: PPUSH
23545: CALL_OW 478
23549: UNION
23550: ST_TO_ADDR
23551: GO 23527
23553: POP
23554: POP
// if not fac_list then
23555: LD_VAR 0 16
23559: NOT
23560: IFFALSE 23564
// exit ;
23562: GO 24615
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23564: LD_ADDR_VAR 0 4
23568: PUSH
23569: LD_INT 4
23571: PUSH
23572: LD_INT 5
23574: PUSH
23575: LD_INT 9
23577: PUSH
23578: LD_INT 10
23580: PUSH
23581: LD_INT 6
23583: PUSH
23584: LD_INT 7
23586: PUSH
23587: LD_INT 11
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 27
23601: PUSH
23602: LD_INT 28
23604: PUSH
23605: LD_INT 26
23607: PUSH
23608: LD_INT 30
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 43
23619: PUSH
23620: LD_INT 44
23622: PUSH
23623: LD_INT 46
23625: PUSH
23626: LD_INT 45
23628: PUSH
23629: LD_INT 47
23631: PUSH
23632: LD_INT 49
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: LIST
23647: PUSH
23648: LD_VAR 0 11
23652: ARRAY
23653: ST_TO_ADDR
// for i in list do
23654: LD_ADDR_VAR 0 7
23658: PUSH
23659: LD_VAR 0 4
23663: PUSH
23664: FOR_IN
23665: IFFALSE 23698
// if not i in fac_list then
23667: LD_VAR 0 7
23671: PUSH
23672: LD_VAR 0 16
23676: IN
23677: NOT
23678: IFFALSE 23696
// list := list diff i ;
23680: LD_ADDR_VAR 0 4
23684: PUSH
23685: LD_VAR 0 4
23689: PUSH
23690: LD_VAR 0 7
23694: DIFF
23695: ST_TO_ADDR
23696: GO 23664
23698: POP
23699: POP
// if not list then
23700: LD_VAR 0 4
23704: NOT
23705: IFFALSE 23709
// exit ;
23707: GO 24615
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23709: LD_VAR 0 11
23713: PUSH
23714: LD_INT 3
23716: EQUAL
23717: PUSH
23718: LD_INT 49
23720: PUSH
23721: LD_VAR 0 4
23725: IN
23726: AND
23727: PUSH
23728: LD_INT 31
23730: PPUSH
23731: LD_VAR 0 15
23735: PPUSH
23736: CALL_OW 321
23740: PUSH
23741: LD_INT 2
23743: EQUAL
23744: AND
23745: IFFALSE 23805
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23747: LD_INT 22
23749: PUSH
23750: LD_VAR 0 15
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 35
23761: PUSH
23762: LD_INT 49
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 91
23771: PUSH
23772: LD_VAR 0 1
23776: PUSH
23777: LD_INT 10
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: LIST
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: PPUSH
23790: CALL_OW 69
23794: NOT
23795: IFFALSE 23805
// weapon := ru_time_lapser ;
23797: LD_ADDR_VAR 0 17
23801: PUSH
23802: LD_INT 49
23804: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23805: LD_VAR 0 11
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: IN
23820: PUSH
23821: LD_INT 11
23823: PUSH
23824: LD_VAR 0 4
23828: IN
23829: PUSH
23830: LD_INT 30
23832: PUSH
23833: LD_VAR 0 4
23837: IN
23838: OR
23839: AND
23840: PUSH
23841: LD_INT 6
23843: PPUSH
23844: LD_VAR 0 15
23848: PPUSH
23849: CALL_OW 321
23853: PUSH
23854: LD_INT 2
23856: EQUAL
23857: AND
23858: IFFALSE 24023
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23860: LD_INT 22
23862: PUSH
23863: LD_VAR 0 15
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 2
23874: PUSH
23875: LD_INT 35
23877: PUSH
23878: LD_INT 11
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 35
23887: PUSH
23888: LD_INT 30
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 91
23902: PUSH
23903: LD_VAR 0 1
23907: PUSH
23908: LD_INT 18
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: LIST
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: PPUSH
23921: CALL_OW 69
23925: NOT
23926: PUSH
23927: LD_INT 22
23929: PUSH
23930: LD_VAR 0 15
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 2
23941: PUSH
23942: LD_INT 30
23944: PUSH
23945: LD_INT 32
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 30
23954: PUSH
23955: LD_INT 33
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 91
23969: PUSH
23970: LD_VAR 0 1
23974: PUSH
23975: LD_INT 12
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: LIST
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: LIST
23987: PUSH
23988: EMPTY
23989: LIST
23990: PPUSH
23991: CALL_OW 69
23995: PUSH
23996: LD_INT 2
23998: GREATER
23999: AND
24000: IFFALSE 24023
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24002: LD_ADDR_VAR 0 17
24006: PUSH
24007: LD_INT 11
24009: PUSH
24010: LD_INT 30
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_VAR 0 11
24021: ARRAY
24022: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24023: LD_VAR 0 17
24027: NOT
24028: PUSH
24029: LD_INT 40
24031: PPUSH
24032: LD_VAR 0 15
24036: PPUSH
24037: CALL_OW 321
24041: PUSH
24042: LD_INT 2
24044: EQUAL
24045: AND
24046: PUSH
24047: LD_INT 7
24049: PUSH
24050: LD_VAR 0 4
24054: IN
24055: PUSH
24056: LD_INT 28
24058: PUSH
24059: LD_VAR 0 4
24063: IN
24064: OR
24065: PUSH
24066: LD_INT 45
24068: PUSH
24069: LD_VAR 0 4
24073: IN
24074: OR
24075: AND
24076: IFFALSE 24330
// begin hex := GetHexInfo ( x , y ) ;
24078: LD_ADDR_VAR 0 3
24082: PUSH
24083: LD_VAR 0 9
24087: PPUSH
24088: LD_VAR 0 10
24092: PPUSH
24093: CALL_OW 546
24097: ST_TO_ADDR
// if hex [ 1 ] then
24098: LD_VAR 0 3
24102: PUSH
24103: LD_INT 1
24105: ARRAY
24106: IFFALSE 24110
// exit ;
24108: GO 24615
// height := hex [ 2 ] ;
24110: LD_ADDR_VAR 0 14
24114: PUSH
24115: LD_VAR 0 3
24119: PUSH
24120: LD_INT 2
24122: ARRAY
24123: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24124: LD_ADDR_VAR 0 13
24128: PUSH
24129: LD_INT 0
24131: PUSH
24132: LD_INT 2
24134: PUSH
24135: LD_INT 3
24137: PUSH
24138: LD_INT 5
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: ST_TO_ADDR
// for i in tmp do
24147: LD_ADDR_VAR 0 7
24151: PUSH
24152: LD_VAR 0 13
24156: PUSH
24157: FOR_IN
24158: IFFALSE 24328
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24160: LD_ADDR_VAR 0 8
24164: PUSH
24165: LD_VAR 0 9
24169: PPUSH
24170: LD_VAR 0 7
24174: PPUSH
24175: LD_INT 5
24177: PPUSH
24178: CALL_OW 272
24182: PUSH
24183: LD_VAR 0 10
24187: PPUSH
24188: LD_VAR 0 7
24192: PPUSH
24193: LD_INT 5
24195: PPUSH
24196: CALL_OW 273
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24205: LD_VAR 0 8
24209: PUSH
24210: LD_INT 1
24212: ARRAY
24213: PPUSH
24214: LD_VAR 0 8
24218: PUSH
24219: LD_INT 2
24221: ARRAY
24222: PPUSH
24223: CALL_OW 488
24227: IFFALSE 24326
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24229: LD_ADDR_VAR 0 3
24233: PUSH
24234: LD_VAR 0 8
24238: PUSH
24239: LD_INT 1
24241: ARRAY
24242: PPUSH
24243: LD_VAR 0 8
24247: PUSH
24248: LD_INT 2
24250: ARRAY
24251: PPUSH
24252: CALL_OW 546
24256: ST_TO_ADDR
// if hex [ 1 ] then
24257: LD_VAR 0 3
24261: PUSH
24262: LD_INT 1
24264: ARRAY
24265: IFFALSE 24269
// continue ;
24267: GO 24157
// h := hex [ 2 ] ;
24269: LD_ADDR_VAR 0 12
24273: PUSH
24274: LD_VAR 0 3
24278: PUSH
24279: LD_INT 2
24281: ARRAY
24282: ST_TO_ADDR
// if h + 7 < height then
24283: LD_VAR 0 12
24287: PUSH
24288: LD_INT 7
24290: PLUS
24291: PUSH
24292: LD_VAR 0 14
24296: LESS
24297: IFFALSE 24326
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24299: LD_ADDR_VAR 0 17
24303: PUSH
24304: LD_INT 7
24306: PUSH
24307: LD_INT 28
24309: PUSH
24310: LD_INT 45
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: LIST
24317: PUSH
24318: LD_VAR 0 11
24322: ARRAY
24323: ST_TO_ADDR
// break ;
24324: GO 24328
// end ; end ; end ;
24326: GO 24157
24328: POP
24329: POP
// end ; if not weapon then
24330: LD_VAR 0 17
24334: NOT
24335: IFFALSE 24497
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24337: LD_ADDR_VAR 0 4
24341: PUSH
24342: LD_VAR 0 4
24346: PUSH
24347: LD_INT 11
24349: PUSH
24350: LD_INT 30
24352: PUSH
24353: LD_INT 49
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: LIST
24360: DIFF
24361: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
24362: LD_ADDR_VAR 0 17
24366: PUSH
24367: LD_VAR 0 4
24371: PUSH
24372: LD_INT 1
24374: PPUSH
24375: LD_VAR 0 4
24379: PPUSH
24380: CALL_OW 12
24384: ARRAY
24385: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
24386: LD_ADDR_VAR 0 13
24390: PUSH
24391: LD_INT 22
24393: PUSH
24394: LD_VAR 0 15
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 3
24405: PUSH
24406: LD_INT 35
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PPUSH
24424: CALL_OW 69
24428: ST_TO_ADDR
// for i in tmp do
24429: LD_ADDR_VAR 0 7
24433: PUSH
24434: LD_VAR 0 13
24438: PUSH
24439: FOR_IN
24440: IFFALSE 24465
// list := list diff GetBWeapon ( i ) ;
24442: LD_ADDR_VAR 0 4
24446: PUSH
24447: LD_VAR 0 4
24451: PUSH
24452: LD_VAR 0 7
24456: PPUSH
24457: CALL_OW 269
24461: DIFF
24462: ST_TO_ADDR
24463: GO 24439
24465: POP
24466: POP
// if list then
24467: LD_VAR 0 4
24471: IFFALSE 24497
// weapon := list [ rand ( 1 , list ) ] ;
24473: LD_ADDR_VAR 0 17
24477: PUSH
24478: LD_VAR 0 4
24482: PUSH
24483: LD_INT 1
24485: PPUSH
24486: LD_VAR 0 4
24490: PPUSH
24491: CALL_OW 12
24495: ARRAY
24496: ST_TO_ADDR
// end ; if weapon then
24497: LD_VAR 0 17
24501: IFFALSE 24615
// begin tmp := CostOfWeapon ( weapon ) ;
24503: LD_ADDR_VAR 0 13
24507: PUSH
24508: LD_VAR 0 17
24512: PPUSH
24513: CALL_OW 451
24517: ST_TO_ADDR
// j := GetBase ( tower ) ;
24518: LD_ADDR_VAR 0 8
24522: PUSH
24523: LD_VAR 0 1
24527: PPUSH
24528: CALL_OW 274
24532: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24533: LD_VAR 0 8
24537: PPUSH
24538: LD_INT 1
24540: PPUSH
24541: CALL_OW 275
24545: PUSH
24546: LD_VAR 0 13
24550: PUSH
24551: LD_INT 1
24553: ARRAY
24554: GREATEREQUAL
24555: PUSH
24556: LD_VAR 0 8
24560: PPUSH
24561: LD_INT 2
24563: PPUSH
24564: CALL_OW 275
24568: PUSH
24569: LD_VAR 0 13
24573: PUSH
24574: LD_INT 2
24576: ARRAY
24577: GREATEREQUAL
24578: AND
24579: PUSH
24580: LD_VAR 0 8
24584: PPUSH
24585: LD_INT 3
24587: PPUSH
24588: CALL_OW 275
24592: PUSH
24593: LD_VAR 0 13
24597: PUSH
24598: LD_INT 3
24600: ARRAY
24601: GREATEREQUAL
24602: AND
24603: IFFALSE 24615
// result := weapon ;
24605: LD_ADDR_VAR 0 2
24609: PUSH
24610: LD_VAR 0 17
24614: ST_TO_ADDR
// end ; end ;
24615: LD_VAR 0 2
24619: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24620: LD_INT 0
24622: PPUSH
24623: PPUSH
// result := true ;
24624: LD_ADDR_VAR 0 3
24628: PUSH
24629: LD_INT 1
24631: ST_TO_ADDR
// if array1 = array2 then
24632: LD_VAR 0 1
24636: PUSH
24637: LD_VAR 0 2
24641: EQUAL
24642: IFFALSE 24702
// begin for i = 1 to array1 do
24644: LD_ADDR_VAR 0 4
24648: PUSH
24649: DOUBLE
24650: LD_INT 1
24652: DEC
24653: ST_TO_ADDR
24654: LD_VAR 0 1
24658: PUSH
24659: FOR_TO
24660: IFFALSE 24698
// if array1 [ i ] <> array2 [ i ] then
24662: LD_VAR 0 1
24666: PUSH
24667: LD_VAR 0 4
24671: ARRAY
24672: PUSH
24673: LD_VAR 0 2
24677: PUSH
24678: LD_VAR 0 4
24682: ARRAY
24683: NONEQUAL
24684: IFFALSE 24696
// begin result := false ;
24686: LD_ADDR_VAR 0 3
24690: PUSH
24691: LD_INT 0
24693: ST_TO_ADDR
// break ;
24694: GO 24698
// end ;
24696: GO 24659
24698: POP
24699: POP
// end else
24700: GO 24710
// result := false ;
24702: LD_ADDR_VAR 0 3
24706: PUSH
24707: LD_INT 0
24709: ST_TO_ADDR
// end ;
24710: LD_VAR 0 3
24714: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24715: LD_INT 0
24717: PPUSH
24718: PPUSH
24719: PPUSH
// pom := GetBase ( fac ) ;
24720: LD_ADDR_VAR 0 5
24724: PUSH
24725: LD_VAR 0 1
24729: PPUSH
24730: CALL_OW 274
24734: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24735: LD_ADDR_VAR 0 4
24739: PUSH
24740: LD_VAR 0 2
24744: PUSH
24745: LD_INT 1
24747: ARRAY
24748: PPUSH
24749: LD_VAR 0 2
24753: PUSH
24754: LD_INT 2
24756: ARRAY
24757: PPUSH
24758: LD_VAR 0 2
24762: PUSH
24763: LD_INT 3
24765: ARRAY
24766: PPUSH
24767: LD_VAR 0 2
24771: PUSH
24772: LD_INT 4
24774: ARRAY
24775: PPUSH
24776: CALL_OW 449
24780: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
24781: LD_VAR 0 5
24785: PPUSH
24786: LD_INT 1
24788: PPUSH
24789: CALL_OW 275
24793: PUSH
24794: LD_VAR 0 4
24798: PUSH
24799: LD_INT 1
24801: ARRAY
24802: GREATEREQUAL
24803: PUSH
24804: LD_VAR 0 5
24808: PPUSH
24809: LD_INT 2
24811: PPUSH
24812: CALL_OW 275
24816: PUSH
24817: LD_VAR 0 4
24821: PUSH
24822: LD_INT 2
24824: ARRAY
24825: GREATEREQUAL
24826: AND
24827: PUSH
24828: LD_VAR 0 5
24832: PPUSH
24833: LD_INT 3
24835: PPUSH
24836: CALL_OW 275
24840: PUSH
24841: LD_VAR 0 4
24845: PUSH
24846: LD_INT 3
24848: ARRAY
24849: GREATEREQUAL
24850: AND
24851: IFFALSE 24863
// result := true else
24853: LD_ADDR_VAR 0 3
24857: PUSH
24858: LD_INT 1
24860: ST_TO_ADDR
24861: GO 24871
// result := false ;
24863: LD_ADDR_VAR 0 3
24867: PUSH
24868: LD_INT 0
24870: ST_TO_ADDR
// end ;
24871: LD_VAR 0 3
24875: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24876: LD_INT 0
24878: PPUSH
24879: PPUSH
24880: PPUSH
24881: PPUSH
// pom := GetBase ( building ) ;
24882: LD_ADDR_VAR 0 3
24886: PUSH
24887: LD_VAR 0 1
24891: PPUSH
24892: CALL_OW 274
24896: ST_TO_ADDR
// if not pom then
24897: LD_VAR 0 3
24901: NOT
24902: IFFALSE 24906
// exit ;
24904: GO 25076
// btype := GetBType ( building ) ;
24906: LD_ADDR_VAR 0 5
24910: PUSH
24911: LD_VAR 0 1
24915: PPUSH
24916: CALL_OW 266
24920: ST_TO_ADDR
// if btype = b_armoury then
24921: LD_VAR 0 5
24925: PUSH
24926: LD_INT 4
24928: EQUAL
24929: IFFALSE 24939
// btype := b_barracks ;
24931: LD_ADDR_VAR 0 5
24935: PUSH
24936: LD_INT 5
24938: ST_TO_ADDR
// if btype = b_depot then
24939: LD_VAR 0 5
24943: PUSH
24944: LD_INT 0
24946: EQUAL
24947: IFFALSE 24957
// btype := b_warehouse ;
24949: LD_ADDR_VAR 0 5
24953: PUSH
24954: LD_INT 1
24956: ST_TO_ADDR
// if btype = b_workshop then
24957: LD_VAR 0 5
24961: PUSH
24962: LD_INT 2
24964: EQUAL
24965: IFFALSE 24975
// btype := b_factory ;
24967: LD_ADDR_VAR 0 5
24971: PUSH
24972: LD_INT 3
24974: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24975: LD_ADDR_VAR 0 4
24979: PUSH
24980: LD_VAR 0 5
24984: PPUSH
24985: LD_VAR 0 1
24989: PPUSH
24990: CALL_OW 248
24994: PPUSH
24995: CALL_OW 450
24999: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25000: LD_ADDR_VAR 0 2
25004: PUSH
25005: LD_VAR 0 3
25009: PPUSH
25010: LD_INT 1
25012: PPUSH
25013: CALL_OW 275
25017: PUSH
25018: LD_VAR 0 4
25022: PUSH
25023: LD_INT 1
25025: ARRAY
25026: GREATEREQUAL
25027: PUSH
25028: LD_VAR 0 3
25032: PPUSH
25033: LD_INT 2
25035: PPUSH
25036: CALL_OW 275
25040: PUSH
25041: LD_VAR 0 4
25045: PUSH
25046: LD_INT 2
25048: ARRAY
25049: GREATEREQUAL
25050: AND
25051: PUSH
25052: LD_VAR 0 3
25056: PPUSH
25057: LD_INT 3
25059: PPUSH
25060: CALL_OW 275
25064: PUSH
25065: LD_VAR 0 4
25069: PUSH
25070: LD_INT 3
25072: ARRAY
25073: GREATEREQUAL
25074: AND
25075: ST_TO_ADDR
// end ;
25076: LD_VAR 0 2
25080: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25081: LD_INT 0
25083: PPUSH
25084: PPUSH
25085: PPUSH
// pom := GetBase ( building ) ;
25086: LD_ADDR_VAR 0 4
25090: PUSH
25091: LD_VAR 0 1
25095: PPUSH
25096: CALL_OW 274
25100: ST_TO_ADDR
// if not pom then
25101: LD_VAR 0 4
25105: NOT
25106: IFFALSE 25110
// exit ;
25108: GO 25211
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25110: LD_ADDR_VAR 0 5
25114: PUSH
25115: LD_VAR 0 2
25119: PPUSH
25120: LD_VAR 0 1
25124: PPUSH
25125: CALL_OW 248
25129: PPUSH
25130: CALL_OW 450
25134: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25135: LD_ADDR_VAR 0 3
25139: PUSH
25140: LD_VAR 0 4
25144: PPUSH
25145: LD_INT 1
25147: PPUSH
25148: CALL_OW 275
25152: PUSH
25153: LD_VAR 0 5
25157: PUSH
25158: LD_INT 1
25160: ARRAY
25161: GREATEREQUAL
25162: PUSH
25163: LD_VAR 0 4
25167: PPUSH
25168: LD_INT 2
25170: PPUSH
25171: CALL_OW 275
25175: PUSH
25176: LD_VAR 0 5
25180: PUSH
25181: LD_INT 2
25183: ARRAY
25184: GREATEREQUAL
25185: AND
25186: PUSH
25187: LD_VAR 0 4
25191: PPUSH
25192: LD_INT 3
25194: PPUSH
25195: CALL_OW 275
25199: PUSH
25200: LD_VAR 0 5
25204: PUSH
25205: LD_INT 3
25207: ARRAY
25208: GREATEREQUAL
25209: AND
25210: ST_TO_ADDR
// end ;
25211: LD_VAR 0 3
25215: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes ; begin
25216: LD_INT 0
25218: PPUSH
25219: PPUSH
25220: PPUSH
25221: PPUSH
25222: PPUSH
25223: PPUSH
25224: PPUSH
// if not base or not btype or not x or not y then
25225: LD_VAR 0 1
25229: NOT
25230: PUSH
25231: LD_VAR 0 2
25235: NOT
25236: OR
25237: PUSH
25238: LD_VAR 0 3
25242: NOT
25243: OR
25244: PUSH
25245: LD_VAR 0 4
25249: NOT
25250: OR
25251: IFFALSE 25255
// exit ;
25253: GO 25527
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
25255: LD_ADDR_VAR 0 12
25259: PUSH
25260: LD_VAR 0 2
25264: PPUSH
25265: LD_VAR 0 3
25269: PPUSH
25270: LD_VAR 0 4
25274: PPUSH
25275: LD_VAR 0 5
25279: PPUSH
25280: LD_VAR 0 1
25284: PUSH
25285: LD_INT 1
25287: ARRAY
25288: PPUSH
25289: CALL_OW 248
25293: PPUSH
25294: LD_INT 0
25296: PPUSH
25297: CALL 26310 0 6
25301: ST_TO_ADDR
// if not hexes then
25302: LD_VAR 0 12
25306: NOT
25307: IFFALSE 25311
// exit ;
25309: GO 25527
// for i = 1 to hexes do
25311: LD_ADDR_VAR 0 7
25315: PUSH
25316: DOUBLE
25317: LD_INT 1
25319: DEC
25320: ST_TO_ADDR
25321: LD_VAR 0 12
25325: PUSH
25326: FOR_TO
25327: IFFALSE 25525
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25329: LD_ADDR_VAR 0 11
25333: PUSH
25334: LD_VAR 0 12
25338: PUSH
25339: LD_VAR 0 7
25343: ARRAY
25344: PUSH
25345: LD_INT 1
25347: ARRAY
25348: PPUSH
25349: LD_VAR 0 12
25353: PUSH
25354: LD_VAR 0 7
25358: ARRAY
25359: PUSH
25360: LD_INT 2
25362: ARRAY
25363: PPUSH
25364: CALL_OW 428
25368: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
25369: LD_VAR 0 11
25373: NOT
25374: PUSH
25375: LD_VAR 0 11
25379: PPUSH
25380: CALL_OW 247
25384: PUSH
25385: LD_INT 3
25387: EQUAL
25388: OR
25389: IFFALSE 25393
// continue ;
25391: GO 25326
// for j = 0 to 5 do
25393: LD_ADDR_VAR 0 8
25397: PUSH
25398: DOUBLE
25399: LD_INT 0
25401: DEC
25402: ST_TO_ADDR
25403: LD_INT 5
25405: PUSH
25406: FOR_TO
25407: IFFALSE 25521
// begin _x := ShiftX ( GetX ( tmp ) , j , 3 ) ;
25409: LD_ADDR_VAR 0 9
25413: PUSH
25414: LD_VAR 0 11
25418: PPUSH
25419: CALL_OW 250
25423: PPUSH
25424: LD_VAR 0 8
25428: PPUSH
25429: LD_INT 3
25431: PPUSH
25432: CALL_OW 272
25436: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 3 ) ;
25437: LD_ADDR_VAR 0 10
25441: PUSH
25442: LD_VAR 0 11
25446: PPUSH
25447: CALL_OW 251
25451: PPUSH
25452: LD_VAR 0 8
25456: PPUSH
25457: LD_INT 3
25459: PPUSH
25460: CALL_OW 273
25464: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25465: LD_VAR 0 9
25469: PPUSH
25470: LD_VAR 0 10
25474: PPUSH
25475: CALL_OW 488
25479: PUSH
25480: LD_VAR 0 9
25484: PPUSH
25485: LD_VAR 0 10
25489: PPUSH
25490: CALL_OW 428
25494: NOT
25495: AND
25496: IFFALSE 25519
// begin ComMoveXY ( tmp , _x , _y ) ;
25498: LD_VAR 0 11
25502: PPUSH
25503: LD_VAR 0 9
25507: PPUSH
25508: LD_VAR 0 10
25512: PPUSH
25513: CALL_OW 111
// break ;
25517: GO 25521
// end ; end ;
25519: GO 25406
25521: POP
25522: POP
// end ;
25523: GO 25326
25525: POP
25526: POP
// end ;
25527: LD_VAR 0 6
25531: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
25532: LD_INT 0
25534: PPUSH
25535: PPUSH
25536: PPUSH
25537: PPUSH
25538: PPUSH
25539: PPUSH
25540: PPUSH
25541: PPUSH
25542: PPUSH
// result := false ;
25543: LD_ADDR_VAR 0 6
25547: PUSH
25548: LD_INT 0
25550: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25551: LD_VAR 0 1
25555: NOT
25556: PUSH
25557: LD_VAR 0 1
25561: PPUSH
25562: CALL_OW 266
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: LD_INT 1
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: IN
25577: NOT
25578: OR
25579: PUSH
25580: LD_VAR 0 2
25584: NOT
25585: OR
25586: PUSH
25587: LD_VAR 0 5
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: LD_INT 1
25597: PUSH
25598: LD_INT 2
25600: PUSH
25601: LD_INT 3
25603: PUSH
25604: LD_INT 4
25606: PUSH
25607: LD_INT 5
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: IN
25618: NOT
25619: OR
25620: PUSH
25621: LD_VAR 0 3
25625: PPUSH
25626: LD_VAR 0 4
25630: PPUSH
25631: CALL_OW 488
25635: NOT
25636: OR
25637: IFFALSE 25641
// exit ;
25639: GO 26305
// pom := GetBase ( bdepot ) ;
25641: LD_ADDR_VAR 0 9
25645: PUSH
25646: LD_VAR 0 1
25650: PPUSH
25651: CALL_OW 274
25655: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
25656: LD_ADDR_VAR 0 10
25660: PUSH
25661: LD_VAR 0 2
25665: PPUSH
25666: LD_VAR 0 1
25670: PPUSH
25671: CALL_OW 248
25675: PPUSH
25676: CALL_OW 450
25680: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25681: LD_VAR 0 9
25685: PPUSH
25686: LD_INT 1
25688: PPUSH
25689: CALL_OW 275
25693: PUSH
25694: LD_VAR 0 10
25698: PUSH
25699: LD_INT 1
25701: ARRAY
25702: GREATEREQUAL
25703: PUSH
25704: LD_VAR 0 9
25708: PPUSH
25709: LD_INT 2
25711: PPUSH
25712: CALL_OW 275
25716: PUSH
25717: LD_VAR 0 10
25721: PUSH
25722: LD_INT 2
25724: ARRAY
25725: GREATEREQUAL
25726: AND
25727: PUSH
25728: LD_VAR 0 9
25732: PPUSH
25733: LD_INT 3
25735: PPUSH
25736: CALL_OW 275
25740: PUSH
25741: LD_VAR 0 10
25745: PUSH
25746: LD_INT 3
25748: ARRAY
25749: GREATEREQUAL
25750: AND
25751: NOT
25752: IFFALSE 25756
// exit ;
25754: GO 26305
// if GetBType ( bdepot ) = b_depot then
25756: LD_VAR 0 1
25760: PPUSH
25761: CALL_OW 266
25765: PUSH
25766: LD_INT 0
25768: EQUAL
25769: IFFALSE 25781
// dist := 28 else
25771: LD_ADDR_VAR 0 13
25775: PUSH
25776: LD_INT 28
25778: ST_TO_ADDR
25779: GO 25789
// dist := 36 ;
25781: LD_ADDR_VAR 0 13
25785: PUSH
25786: LD_INT 36
25788: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
25789: LD_VAR 0 1
25793: PPUSH
25794: LD_VAR 0 3
25798: PPUSH
25799: LD_VAR 0 4
25803: PPUSH
25804: CALL_OW 297
25808: PUSH
25809: LD_VAR 0 13
25813: GREATER
25814: IFFALSE 25818
// exit ;
25816: GO 26305
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
25818: LD_ADDR_VAR 0 11
25822: PUSH
25823: LD_VAR 0 2
25827: PPUSH
25828: LD_VAR 0 3
25832: PPUSH
25833: LD_VAR 0 4
25837: PPUSH
25838: LD_VAR 0 5
25842: PPUSH
25843: LD_VAR 0 1
25847: PPUSH
25848: CALL_OW 248
25852: PPUSH
25853: LD_INT 0
25855: PPUSH
25856: CALL 26310 0 6
25860: ST_TO_ADDR
// if not hexes then
25861: LD_VAR 0 11
25865: NOT
25866: IFFALSE 25870
// exit ;
25868: GO 26305
// hex := GetHexInfo ( x , y ) ;
25870: LD_ADDR_VAR 0 14
25874: PUSH
25875: LD_VAR 0 3
25879: PPUSH
25880: LD_VAR 0 4
25884: PPUSH
25885: CALL_OW 546
25889: ST_TO_ADDR
// if hex [ 1 ] then
25890: LD_VAR 0 14
25894: PUSH
25895: LD_INT 1
25897: ARRAY
25898: IFFALSE 25902
// exit ;
25900: GO 26305
// height := hex [ 2 ] ;
25902: LD_ADDR_VAR 0 12
25906: PUSH
25907: LD_VAR 0 14
25911: PUSH
25912: LD_INT 2
25914: ARRAY
25915: ST_TO_ADDR
// for i = 1 to hexes do
25916: LD_ADDR_VAR 0 7
25920: PUSH
25921: DOUBLE
25922: LD_INT 1
25924: DEC
25925: ST_TO_ADDR
25926: LD_VAR 0 11
25930: PUSH
25931: FOR_TO
25932: IFFALSE 26260
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25934: LD_VAR 0 11
25938: PUSH
25939: LD_VAR 0 7
25943: ARRAY
25944: PUSH
25945: LD_INT 1
25947: ARRAY
25948: PPUSH
25949: LD_VAR 0 11
25953: PUSH
25954: LD_VAR 0 7
25958: ARRAY
25959: PUSH
25960: LD_INT 2
25962: ARRAY
25963: PPUSH
25964: CALL_OW 488
25968: NOT
25969: IFFALSE 25973
// continue ;
25971: GO 25931
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25973: LD_ADDR_VAR 0 8
25977: PUSH
25978: LD_VAR 0 11
25982: PUSH
25983: LD_VAR 0 7
25987: ARRAY
25988: PUSH
25989: LD_INT 1
25991: ARRAY
25992: PPUSH
25993: LD_VAR 0 11
25997: PUSH
25998: LD_VAR 0 7
26002: ARRAY
26003: PUSH
26004: LD_INT 2
26006: ARRAY
26007: PPUSH
26008: CALL_OW 546
26012: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26013: LD_VAR 0 8
26017: PUSH
26018: LD_INT 1
26020: ARRAY
26021: PUSH
26022: LD_VAR 0 8
26026: PUSH
26027: LD_INT 2
26029: ARRAY
26030: PUSH
26031: LD_VAR 0 12
26035: PUSH
26036: LD_INT 2
26038: PLUS
26039: GREATER
26040: OR
26041: PUSH
26042: LD_VAR 0 8
26046: PUSH
26047: LD_INT 2
26049: ARRAY
26050: PUSH
26051: LD_VAR 0 12
26055: PUSH
26056: LD_INT 2
26058: MINUS
26059: LESS
26060: OR
26061: PUSH
26062: LD_VAR 0 8
26066: PUSH
26067: LD_INT 3
26069: ARRAY
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: LD_INT 8
26076: PUSH
26077: LD_INT 9
26079: PUSH
26080: LD_INT 10
26082: PUSH
26083: LD_INT 11
26085: PUSH
26086: LD_INT 12
26088: PUSH
26089: LD_INT 13
26091: PUSH
26092: LD_INT 16
26094: PUSH
26095: LD_INT 17
26097: PUSH
26098: LD_INT 18
26100: PUSH
26101: LD_INT 19
26103: PUSH
26104: LD_INT 20
26106: PUSH
26107: LD_INT 21
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: IN
26125: NOT
26126: OR
26127: PUSH
26128: LD_VAR 0 8
26132: PUSH
26133: LD_INT 5
26135: ARRAY
26136: NOT
26137: OR
26138: PUSH
26139: LD_VAR 0 8
26143: PUSH
26144: LD_INT 6
26146: ARRAY
26147: PUSH
26148: LD_INT 1
26150: PUSH
26151: LD_INT 2
26153: PUSH
26154: LD_INT 7
26156: PUSH
26157: LD_INT 9
26159: PUSH
26160: LD_INT 10
26162: PUSH
26163: LD_INT 11
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: IN
26174: NOT
26175: OR
26176: PUSH
26177: LD_VAR 0 11
26181: PUSH
26182: LD_VAR 0 7
26186: ARRAY
26187: PUSH
26188: LD_INT 1
26190: ARRAY
26191: PPUSH
26192: LD_VAR 0 11
26196: PUSH
26197: LD_VAR 0 7
26201: ARRAY
26202: PUSH
26203: LD_INT 2
26205: ARRAY
26206: PPUSH
26207: CALL_OW 428
26211: PUSH
26212: LD_INT 0
26214: GREATER
26215: OR
26216: PUSH
26217: LD_VAR 0 11
26221: PUSH
26222: LD_VAR 0 7
26226: ARRAY
26227: PUSH
26228: LD_INT 1
26230: ARRAY
26231: PPUSH
26232: LD_VAR 0 11
26236: PUSH
26237: LD_VAR 0 7
26241: ARRAY
26242: PUSH
26243: LD_INT 2
26245: ARRAY
26246: PPUSH
26247: CALL_OW 351
26251: OR
26252: IFFALSE 26258
// exit ;
26254: POP
26255: POP
26256: GO 26305
// end ;
26258: GO 25931
26260: POP
26261: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
26262: LD_VAR 0 1
26266: PPUSH
26267: CALL_OW 255
26271: PPUSH
26272: LD_VAR 0 3
26276: PPUSH
26277: LD_VAR 0 4
26281: PPUSH
26282: LD_INT 20
26284: PPUSH
26285: CALL 19516 0 4
26289: PUSH
26290: LD_INT 4
26292: ARRAY
26293: IFFALSE 26297
// exit ;
26295: GO 26305
// result := true ;
26297: LD_ADDR_VAR 0 6
26301: PUSH
26302: LD_INT 1
26304: ST_TO_ADDR
// end ;
26305: LD_VAR 0 6
26309: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
26310: LD_INT 0
26312: PPUSH
26313: PPUSH
26314: PPUSH
26315: PPUSH
26316: PPUSH
26317: PPUSH
26318: PPUSH
26319: PPUSH
26320: PPUSH
26321: PPUSH
26322: PPUSH
26323: PPUSH
26324: PPUSH
26325: PPUSH
26326: PPUSH
26327: PPUSH
26328: PPUSH
26329: PPUSH
26330: PPUSH
26331: PPUSH
26332: PPUSH
26333: PPUSH
26334: PPUSH
26335: PPUSH
26336: PPUSH
26337: PPUSH
26338: PPUSH
26339: PPUSH
26340: PPUSH
26341: PPUSH
26342: PPUSH
26343: PPUSH
26344: PPUSH
26345: PPUSH
26346: PPUSH
26347: PPUSH
26348: PPUSH
26349: PPUSH
26350: PPUSH
26351: PPUSH
26352: PPUSH
26353: PPUSH
26354: PPUSH
26355: PPUSH
26356: PPUSH
26357: PPUSH
26358: PPUSH
26359: PPUSH
26360: PPUSH
26361: PPUSH
26362: PPUSH
26363: PPUSH
26364: PPUSH
26365: PPUSH
26366: PPUSH
26367: PPUSH
26368: PPUSH
26369: PPUSH
// result = [ ] ;
26370: LD_ADDR_VAR 0 7
26374: PUSH
26375: EMPTY
26376: ST_TO_ADDR
// temp_list = [ ] ;
26377: LD_ADDR_VAR 0 9
26381: PUSH
26382: EMPTY
26383: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26384: LD_VAR 0 4
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: LD_INT 1
26394: PUSH
26395: LD_INT 2
26397: PUSH
26398: LD_INT 3
26400: PUSH
26401: LD_INT 4
26403: PUSH
26404: LD_INT 5
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: IN
26415: NOT
26416: PUSH
26417: LD_VAR 0 1
26421: PUSH
26422: LD_INT 0
26424: PUSH
26425: LD_INT 1
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: IN
26432: PUSH
26433: LD_VAR 0 5
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: LD_INT 2
26443: PUSH
26444: LD_INT 3
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: LIST
26451: IN
26452: NOT
26453: AND
26454: OR
26455: IFFALSE 26459
// exit ;
26457: GO 44844
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26459: LD_VAR 0 1
26463: PUSH
26464: LD_INT 6
26466: PUSH
26467: LD_INT 7
26469: PUSH
26470: LD_INT 8
26472: PUSH
26473: LD_INT 13
26475: PUSH
26476: LD_INT 12
26478: PUSH
26479: LD_INT 15
26481: PUSH
26482: LD_INT 11
26484: PUSH
26485: LD_INT 14
26487: PUSH
26488: LD_INT 10
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: IN
26502: IFFALSE 26512
// btype = b_lab ;
26504: LD_ADDR_VAR 0 1
26508: PUSH
26509: LD_INT 6
26511: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26512: LD_VAR 0 6
26516: PUSH
26517: LD_INT 0
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: LD_INT 2
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: LIST
26530: IN
26531: NOT
26532: PUSH
26533: LD_VAR 0 1
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: LD_INT 1
26543: PUSH
26544: LD_INT 2
26546: PUSH
26547: LD_INT 3
26549: PUSH
26550: LD_INT 6
26552: PUSH
26553: LD_INT 36
26555: PUSH
26556: LD_INT 4
26558: PUSH
26559: LD_INT 5
26561: PUSH
26562: LD_INT 31
26564: PUSH
26565: LD_INT 32
26567: PUSH
26568: LD_INT 33
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: IN
26584: NOT
26585: PUSH
26586: LD_VAR 0 6
26590: PUSH
26591: LD_INT 1
26593: EQUAL
26594: AND
26595: OR
26596: PUSH
26597: LD_VAR 0 1
26601: PUSH
26602: LD_INT 2
26604: PUSH
26605: LD_INT 3
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: IN
26612: NOT
26613: PUSH
26614: LD_VAR 0 6
26618: PUSH
26619: LD_INT 2
26621: EQUAL
26622: AND
26623: OR
26624: IFFALSE 26634
// mode = 0 ;
26626: LD_ADDR_VAR 0 6
26630: PUSH
26631: LD_INT 0
26633: ST_TO_ADDR
// case mode of 0 :
26634: LD_VAR 0 6
26638: PUSH
26639: LD_INT 0
26641: DOUBLE
26642: EQUAL
26643: IFTRUE 26647
26645: GO 38100
26647: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26648: LD_ADDR_VAR 0 11
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: LD_INT 1
26668: NEG
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 1
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 1
26686: PUSH
26687: LD_INT 1
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 0
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 1
26706: NEG
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 1
26717: NEG
26718: PUSH
26719: LD_INT 1
26721: NEG
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: LD_INT 2
26733: NEG
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: LD_INT 2
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: LD_INT 1
26755: NEG
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 1
26763: PUSH
26764: LD_INT 2
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 1
26783: NEG
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: LD_INT 3
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: LD_INT 3
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 1
26814: NEG
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26841: LD_ADDR_VAR 0 12
26845: PUSH
26846: LD_INT 0
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 1
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: LD_INT 1
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: LD_INT 1
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: LD_INT 1
26925: NEG
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 2
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 2
26943: PUSH
26944: LD_INT 1
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: NEG
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 2
26964: NEG
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 2
26975: NEG
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 2
26987: NEG
26988: PUSH
26989: LD_INT 1
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 3
26998: NEG
26999: PUSH
27000: LD_INT 0
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 3
27009: NEG
27010: PUSH
27011: LD_INT 1
27013: NEG
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27037: LD_ADDR_VAR 0 13
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 1
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 0
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 1
27095: NEG
27096: PUSH
27097: LD_INT 0
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: LD_INT 1
27110: NEG
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: NEG
27119: PUSH
27120: LD_INT 2
27122: NEG
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 2
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 2
27140: PUSH
27141: LD_INT 2
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: LD_INT 2
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 2
27160: NEG
27161: PUSH
27162: LD_INT 1
27164: NEG
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 2
27172: NEG
27173: PUSH
27174: LD_INT 2
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 2
27184: NEG
27185: PUSH
27186: LD_INT 3
27188: NEG
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 3
27196: NEG
27197: PUSH
27198: LD_INT 2
27200: NEG
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 3
27208: NEG
27209: PUSH
27210: LD_INT 3
27212: NEG
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27236: LD_ADDR_VAR 0 14
27240: PUSH
27241: LD_INT 0
27243: PUSH
27244: LD_INT 0
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: LD_INT 1
27256: NEG
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 1
27294: NEG
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: LD_INT 1
27309: NEG
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 1
27317: NEG
27318: PUSH
27319: LD_INT 2
27321: NEG
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 0
27329: PUSH
27330: LD_INT 2
27332: NEG
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: LD_INT 1
27343: NEG
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 1
27351: PUSH
27352: LD_INT 2
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 0
27361: PUSH
27362: LD_INT 2
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 1
27371: NEG
27372: PUSH
27373: LD_INT 1
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 1
27382: NEG
27383: PUSH
27384: LD_INT 3
27386: NEG
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 0
27394: PUSH
27395: LD_INT 3
27397: NEG
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 1
27405: PUSH
27406: LD_INT 2
27408: NEG
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27432: LD_ADDR_VAR 0 15
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: LD_INT 0
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: LD_INT 1
27452: NEG
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 1
27513: PUSH
27514: LD_INT 1
27516: NEG
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 2
27524: PUSH
27525: LD_INT 0
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 2
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 1
27544: NEG
27545: PUSH
27546: LD_INT 1
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 2
27555: NEG
27556: PUSH
27557: LD_INT 0
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 2
27566: NEG
27567: PUSH
27568: LD_INT 1
27570: NEG
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 2
27578: PUSH
27579: LD_INT 1
27581: NEG
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 3
27589: PUSH
27590: LD_INT 0
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 3
27599: PUSH
27600: LD_INT 1
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27625: LD_ADDR_VAR 0 16
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 1
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 0
27673: PUSH
27674: LD_INT 1
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: LD_INT 0
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: LD_INT 1
27698: NEG
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: LD_INT 2
27710: NEG
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 2
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 2
27728: PUSH
27729: LD_INT 2
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: LD_INT 2
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 2
27748: NEG
27749: PUSH
27750: LD_INT 1
27752: NEG
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 2
27760: NEG
27761: PUSH
27762: LD_INT 2
27764: NEG
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 3
27772: PUSH
27773: LD_INT 2
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 3
27782: PUSH
27783: LD_INT 3
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 2
27792: PUSH
27793: LD_INT 3
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27818: LD_ADDR_VAR 0 17
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: LD_INT 1
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: LD_INT 1
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: LD_INT 0
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: LD_INT 1
27891: NEG
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 1
27899: NEG
27900: PUSH
27901: LD_INT 2
27903: NEG
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 0
27911: PUSH
27912: LD_INT 2
27914: NEG
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: LD_INT 1
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 2
27933: PUSH
27934: LD_INT 0
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 2
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 2
27953: PUSH
27954: LD_INT 2
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: LD_INT 2
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 0
27973: PUSH
27974: LD_INT 2
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 1
27983: NEG
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 2
27994: NEG
27995: PUSH
27996: LD_INT 0
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 2
28005: NEG
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 2
28017: NEG
28018: PUSH
28019: LD_INT 2
28021: NEG
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28048: LD_ADDR_VAR 0 18
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: LD_INT 1
28068: NEG
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: LD_INT 0
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: LD_INT 1
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 1
28106: NEG
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 1
28117: NEG
28118: PUSH
28119: LD_INT 1
28121: NEG
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: LD_INT 2
28133: NEG
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 0
28141: PUSH
28142: LD_INT 2
28144: NEG
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 1
28152: PUSH
28153: LD_INT 1
28155: NEG
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 2
28163: PUSH
28164: LD_INT 0
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 2
28173: PUSH
28174: LD_INT 1
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 2
28183: PUSH
28184: LD_INT 2
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 1
28193: PUSH
28194: LD_INT 2
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 0
28203: PUSH
28204: LD_INT 2
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 1
28213: NEG
28214: PUSH
28215: LD_INT 1
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 2
28224: NEG
28225: PUSH
28226: LD_INT 0
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 2
28235: NEG
28236: PUSH
28237: LD_INT 1
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 2
28247: NEG
28248: PUSH
28249: LD_INT 2
28251: NEG
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28278: LD_ADDR_VAR 0 19
28282: PUSH
28283: LD_INT 0
28285: PUSH
28286: LD_INT 0
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 0
28295: PUSH
28296: LD_INT 1
28298: NEG
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 1
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 1
28316: PUSH
28317: LD_INT 1
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: LD_INT 1
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 1
28336: NEG
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 1
28347: NEG
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 1
28359: NEG
28360: PUSH
28361: LD_INT 2
28363: NEG
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 0
28371: PUSH
28372: LD_INT 2
28374: NEG
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: LD_INT 1
28385: NEG
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 2
28393: PUSH
28394: LD_INT 0
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 2
28403: PUSH
28404: LD_INT 1
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 2
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 1
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: LD_INT 2
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 1
28443: NEG
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 2
28454: NEG
28455: PUSH
28456: LD_INT 0
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 2
28465: NEG
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 2
28477: NEG
28478: PUSH
28479: LD_INT 2
28481: NEG
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28508: LD_ADDR_VAR 0 20
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: LD_INT 0
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 0
28525: PUSH
28526: LD_INT 1
28528: NEG
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 1
28536: PUSH
28537: LD_INT 0
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: LD_INT 1
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 0
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 1
28566: NEG
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: LD_INT 1
28581: NEG
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 1
28589: NEG
28590: PUSH
28591: LD_INT 2
28593: NEG
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 0
28601: PUSH
28602: LD_INT 2
28604: NEG
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 1
28612: PUSH
28613: LD_INT 1
28615: NEG
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 2
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 2
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 2
28643: PUSH
28644: LD_INT 2
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: LD_INT 2
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: LD_INT 2
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 2
28684: NEG
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 2
28695: NEG
28696: PUSH
28697: LD_INT 1
28699: NEG
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 2
28707: NEG
28708: PUSH
28709: LD_INT 2
28711: NEG
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28738: LD_ADDR_VAR 0 21
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: LD_INT 1
28758: NEG
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 1
28776: PUSH
28777: LD_INT 1
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 1
28796: NEG
28797: PUSH
28798: LD_INT 0
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: LD_INT 1
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 1
28819: NEG
28820: PUSH
28821: LD_INT 2
28823: NEG
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: LD_INT 2
28834: NEG
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 1
28842: PUSH
28843: LD_INT 1
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 2
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 2
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 2
28873: PUSH
28874: LD_INT 2
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: LD_INT 2
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: LD_INT 2
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 1
28903: NEG
28904: PUSH
28905: LD_INT 1
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 2
28914: NEG
28915: PUSH
28916: LD_INT 0
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 2
28925: NEG
28926: PUSH
28927: LD_INT 1
28929: NEG
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 2
28937: NEG
28938: PUSH
28939: LD_INT 2
28941: NEG
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28968: LD_ADDR_VAR 0 22
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: LD_INT 0
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: LD_INT 1
28988: NEG
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: LD_INT 0
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 1
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 1
29026: NEG
29027: PUSH
29028: LD_INT 0
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 1
29037: NEG
29038: PUSH
29039: LD_INT 1
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 1
29049: NEG
29050: PUSH
29051: LD_INT 2
29053: NEG
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 0
29061: PUSH
29062: LD_INT 2
29064: NEG
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: LD_INT 1
29075: NEG
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 2
29083: PUSH
29084: LD_INT 0
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 2
29093: PUSH
29094: LD_INT 1
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 2
29103: PUSH
29104: LD_INT 2
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: LD_INT 2
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: LD_INT 2
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: LD_INT 1
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 2
29144: NEG
29145: PUSH
29146: LD_INT 0
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 2
29155: NEG
29156: PUSH
29157: LD_INT 1
29159: NEG
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 2
29167: NEG
29168: PUSH
29169: LD_INT 2
29171: NEG
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29198: LD_ADDR_VAR 0 23
29202: PUSH
29203: LD_INT 0
29205: PUSH
29206: LD_INT 0
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 0
29215: PUSH
29216: LD_INT 1
29218: NEG
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 1
29226: PUSH
29227: LD_INT 0
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 1
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 0
29246: PUSH
29247: LD_INT 1
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 1
29256: NEG
29257: PUSH
29258: LD_INT 0
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: LD_INT 1
29271: NEG
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 1
29279: NEG
29280: PUSH
29281: LD_INT 2
29283: NEG
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 0
29291: PUSH
29292: LD_INT 2
29294: NEG
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 1
29302: PUSH
29303: LD_INT 1
29305: NEG
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 2
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 2
29333: PUSH
29334: LD_INT 2
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 1
29343: PUSH
29344: LD_INT 2
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: LD_INT 2
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 1
29363: NEG
29364: PUSH
29365: LD_INT 1
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 2
29374: NEG
29375: PUSH
29376: LD_INT 0
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 2
29385: NEG
29386: PUSH
29387: LD_INT 1
29389: NEG
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 2
29397: NEG
29398: PUSH
29399: LD_INT 2
29401: NEG
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 2
29409: NEG
29410: PUSH
29411: LD_INT 3
29413: NEG
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 1
29421: NEG
29422: PUSH
29423: LD_INT 3
29425: NEG
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: LD_INT 2
29436: NEG
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 2
29444: PUSH
29445: LD_INT 1
29447: NEG
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29478: LD_ADDR_VAR 0 24
29482: PUSH
29483: LD_INT 0
29485: PUSH
29486: LD_INT 0
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 0
29495: PUSH
29496: LD_INT 1
29498: NEG
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 0
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 1
29547: NEG
29548: PUSH
29549: LD_INT 1
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 1
29559: NEG
29560: PUSH
29561: LD_INT 2
29563: NEG
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 0
29571: PUSH
29572: LD_INT 2
29574: NEG
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 1
29582: PUSH
29583: LD_INT 1
29585: NEG
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 2
29593: PUSH
29594: LD_INT 0
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 2
29613: PUSH
29614: LD_INT 2
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 1
29623: PUSH
29624: LD_INT 2
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 0
29633: PUSH
29634: LD_INT 2
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 1
29643: NEG
29644: PUSH
29645: LD_INT 1
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 2
29654: NEG
29655: PUSH
29656: LD_INT 0
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 2
29665: NEG
29666: PUSH
29667: LD_INT 1
29669: NEG
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 2
29677: NEG
29678: PUSH
29679: LD_INT 2
29681: NEG
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 1
29689: PUSH
29690: LD_INT 2
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 2
29700: PUSH
29701: LD_INT 1
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 3
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 3
29721: PUSH
29722: LD_INT 2
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29754: LD_ADDR_VAR 0 25
29758: PUSH
29759: LD_INT 0
29761: PUSH
29762: LD_INT 0
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 0
29771: PUSH
29772: LD_INT 1
29774: NEG
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 1
29782: PUSH
29783: LD_INT 0
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 1
29792: PUSH
29793: LD_INT 1
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 0
29802: PUSH
29803: LD_INT 1
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 1
29812: NEG
29813: PUSH
29814: LD_INT 0
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: LD_INT 1
29827: NEG
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: LD_INT 2
29839: NEG
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 0
29847: PUSH
29848: LD_INT 2
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 1
29858: PUSH
29859: LD_INT 1
29861: NEG
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 2
29869: PUSH
29870: LD_INT 0
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 2
29879: PUSH
29880: LD_INT 1
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 2
29889: PUSH
29890: LD_INT 2
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 0
29909: PUSH
29910: LD_INT 2
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 1
29919: NEG
29920: PUSH
29921: LD_INT 1
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 2
29930: NEG
29931: PUSH
29932: LD_INT 0
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 2
29941: NEG
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 2
29953: NEG
29954: PUSH
29955: LD_INT 2
29957: NEG
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 3
29965: PUSH
29966: LD_INT 1
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 3
29975: PUSH
29976: LD_INT 2
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 2
29985: PUSH
29986: LD_INT 3
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 1
29995: PUSH
29996: LD_INT 3
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30028: LD_ADDR_VAR 0 26
30032: PUSH
30033: LD_INT 0
30035: PUSH
30036: LD_INT 0
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 0
30045: PUSH
30046: LD_INT 1
30048: NEG
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 1
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: LD_INT 1
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: LD_INT 0
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 1
30097: NEG
30098: PUSH
30099: LD_INT 1
30101: NEG
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 1
30109: NEG
30110: PUSH
30111: LD_INT 2
30113: NEG
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 0
30121: PUSH
30122: LD_INT 2
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 1
30132: PUSH
30133: LD_INT 1
30135: NEG
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 2
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 2
30153: PUSH
30154: LD_INT 1
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 2
30163: PUSH
30164: LD_INT 2
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: LD_INT 2
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 0
30183: PUSH
30184: LD_INT 2
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 1
30193: NEG
30194: PUSH
30195: LD_INT 1
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 2
30204: NEG
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 2
30215: NEG
30216: PUSH
30217: LD_INT 1
30219: NEG
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 2
30227: NEG
30228: PUSH
30229: LD_INT 2
30231: NEG
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 2
30239: PUSH
30240: LD_INT 3
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 1
30249: PUSH
30250: LD_INT 3
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: LD_INT 2
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 2
30270: NEG
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30304: LD_ADDR_VAR 0 27
30308: PUSH
30309: LD_INT 0
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 0
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 1
30332: PUSH
30333: LD_INT 0
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: LD_INT 1
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 0
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 1
30362: NEG
30363: PUSH
30364: LD_INT 0
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 1
30373: NEG
30374: PUSH
30375: LD_INT 1
30377: NEG
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 1
30385: NEG
30386: PUSH
30387: LD_INT 2
30389: NEG
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 0
30397: PUSH
30398: LD_INT 2
30400: NEG
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 1
30408: PUSH
30409: LD_INT 1
30411: NEG
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 2
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 2
30429: PUSH
30430: LD_INT 1
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 2
30439: PUSH
30440: LD_INT 2
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: LD_INT 2
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: LD_INT 2
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 1
30469: NEG
30470: PUSH
30471: LD_INT 1
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 2
30480: NEG
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 2
30491: NEG
30492: PUSH
30493: LD_INT 1
30495: NEG
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 2
30503: NEG
30504: PUSH
30505: LD_INT 2
30507: NEG
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 1
30515: NEG
30516: PUSH
30517: LD_INT 2
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 2
30526: NEG
30527: PUSH
30528: LD_INT 1
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 3
30537: NEG
30538: PUSH
30539: LD_INT 1
30541: NEG
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 3
30549: NEG
30550: PUSH
30551: LD_INT 2
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30584: LD_ADDR_VAR 0 28
30588: PUSH
30589: LD_INT 0
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: LD_INT 1
30604: NEG
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: LD_INT 0
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: LD_INT 1
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: LD_INT 1
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 1
30642: NEG
30643: PUSH
30644: LD_INT 0
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 1
30653: NEG
30654: PUSH
30655: LD_INT 1
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: LD_INT 2
30669: NEG
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 0
30677: PUSH
30678: LD_INT 2
30680: NEG
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 1
30688: PUSH
30689: LD_INT 1
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 2
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 2
30709: PUSH
30710: LD_INT 1
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 2
30719: PUSH
30720: LD_INT 2
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 1
30729: PUSH
30730: LD_INT 2
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: LD_INT 2
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: NEG
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 2
30760: NEG
30761: PUSH
30762: LD_INT 0
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 2
30771: NEG
30772: PUSH
30773: LD_INT 1
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 2
30783: NEG
30784: PUSH
30785: LD_INT 2
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 2
30795: NEG
30796: PUSH
30797: LD_INT 3
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 1
30807: NEG
30808: PUSH
30809: LD_INT 3
30811: NEG
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 3
30819: NEG
30820: PUSH
30821: LD_INT 1
30823: NEG
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 3
30831: NEG
30832: PUSH
30833: LD_INT 2
30835: NEG
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30866: LD_ADDR_VAR 0 29
30870: PUSH
30871: LD_INT 0
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 0
30883: PUSH
30884: LD_INT 1
30886: NEG
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 1
30894: PUSH
30895: LD_INT 0
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 1
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: LD_INT 1
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 1
30924: NEG
30925: PUSH
30926: LD_INT 0
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PUSH
30937: LD_INT 1
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 1
30947: NEG
30948: PUSH
30949: LD_INT 2
30951: NEG
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 0
30959: PUSH
30960: LD_INT 2
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 1
30970: PUSH
30971: LD_INT 1
30973: NEG
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 2
30981: PUSH
30982: LD_INT 0
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: LD_INT 1
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 1
31001: PUSH
31002: LD_INT 2
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 0
31011: PUSH
31012: LD_INT 2
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 1
31021: NEG
31022: PUSH
31023: LD_INT 1
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 2
31032: NEG
31033: PUSH
31034: LD_INT 1
31036: NEG
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 2
31044: NEG
31045: PUSH
31046: LD_INT 2
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 2
31056: NEG
31057: PUSH
31058: LD_INT 3
31060: NEG
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 2
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 3
31079: PUSH
31080: LD_INT 1
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: LD_INT 3
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 1
31099: NEG
31100: PUSH
31101: LD_INT 2
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 3
31110: NEG
31111: PUSH
31112: LD_INT 2
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31145: LD_ADDR_VAR 0 30
31149: PUSH
31150: LD_INT 0
31152: PUSH
31153: LD_INT 0
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: LD_INT 1
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 1
31173: PUSH
31174: LD_INT 0
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 1
31183: PUSH
31184: LD_INT 1
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: NEG
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 1
31214: NEG
31215: PUSH
31216: LD_INT 1
31218: NEG
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: LD_INT 2
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 0
31238: PUSH
31239: LD_INT 2
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 1
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 2
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 2
31280: PUSH
31281: LD_INT 2
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: LD_INT 2
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 1
31300: NEG
31301: PUSH
31302: LD_INT 1
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 2
31311: NEG
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 2
31322: NEG
31323: PUSH
31324: LD_INT 1
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 1
31334: NEG
31335: PUSH
31336: LD_INT 3
31338: NEG
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 1
31346: PUSH
31347: LD_INT 2
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 3
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 2
31367: PUSH
31368: LD_INT 3
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 2
31377: NEG
31378: PUSH
31379: LD_INT 1
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 3
31388: NEG
31389: PUSH
31390: LD_INT 1
31392: NEG
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31423: LD_ADDR_VAR 0 31
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 0
31440: PUSH
31441: LD_INT 1
31443: NEG
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: LD_INT 0
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 1
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 0
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 1
31481: NEG
31482: PUSH
31483: LD_INT 0
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 1
31492: NEG
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 1
31504: NEG
31505: PUSH
31506: LD_INT 2
31508: NEG
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: LD_INT 1
31519: NEG
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 2
31527: PUSH
31528: LD_INT 0
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 2
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 2
31547: PUSH
31548: LD_INT 2
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 1
31557: PUSH
31558: LD_INT 2
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 0
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 1
31577: NEG
31578: PUSH
31579: LD_INT 1
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 2
31588: NEG
31589: PUSH
31590: LD_INT 1
31592: NEG
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 2
31600: NEG
31601: PUSH
31602: LD_INT 2
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 2
31612: NEG
31613: PUSH
31614: LD_INT 3
31616: NEG
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 2
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 3
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: LD_INT 3
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: NEG
31656: PUSH
31657: LD_INT 2
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 3
31666: NEG
31667: PUSH
31668: LD_INT 2
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31701: LD_ADDR_VAR 0 32
31705: PUSH
31706: LD_INT 0
31708: PUSH
31709: LD_INT 0
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 0
31718: PUSH
31719: LD_INT 1
31721: NEG
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: LD_INT 0
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 1
31739: PUSH
31740: LD_INT 1
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 0
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 1
31759: NEG
31760: PUSH
31761: LD_INT 0
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 1
31770: NEG
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 1
31782: NEG
31783: PUSH
31784: LD_INT 2
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: LD_INT 2
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 1
31805: PUSH
31806: LD_INT 1
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: LD_INT 2
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: LD_INT 2
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 0
31846: PUSH
31847: LD_INT 2
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 1
31856: NEG
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 2
31867: NEG
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 2
31878: NEG
31879: PUSH
31880: LD_INT 1
31882: NEG
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: LD_INT 3
31894: NEG
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 1
31902: PUSH
31903: LD_INT 2
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 3
31913: PUSH
31914: LD_INT 2
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 2
31923: PUSH
31924: LD_INT 3
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 2
31933: NEG
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 3
31944: NEG
31945: PUSH
31946: LD_INT 1
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31979: LD_ADDR_VAR 0 33
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: LD_INT 0
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: LD_INT 1
31999: NEG
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 0
32027: PUSH
32028: LD_INT 1
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 1
32037: NEG
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: LD_INT 2
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 1
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 2
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 1
32123: NEG
32124: PUSH
32125: LD_INT 1
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 2
32134: NEG
32135: PUSH
32136: LD_INT 0
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 2
32145: NEG
32146: PUSH
32147: LD_INT 1
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 2
32157: NEG
32158: PUSH
32159: LD_INT 2
32161: NEG
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 2
32169: NEG
32170: PUSH
32171: LD_INT 3
32173: NEG
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 2
32181: PUSH
32182: LD_INT 1
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 3
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: LD_INT 3
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: LD_INT 2
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 3
32223: NEG
32224: PUSH
32225: LD_INT 2
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32258: LD_ADDR_VAR 0 34
32262: PUSH
32263: LD_INT 0
32265: PUSH
32266: LD_INT 0
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: LD_INT 1
32278: NEG
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 0
32306: PUSH
32307: LD_INT 1
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: NEG
32317: PUSH
32318: LD_INT 0
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 1
32327: NEG
32328: PUSH
32329: LD_INT 1
32331: NEG
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 1
32339: NEG
32340: PUSH
32341: LD_INT 2
32343: NEG
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 1
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 2
32373: PUSH
32374: LD_INT 1
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 2
32383: PUSH
32384: LD_INT 2
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: LD_INT 2
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: LD_INT 1
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 2
32414: NEG
32415: PUSH
32416: LD_INT 0
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 2
32425: NEG
32426: PUSH
32427: LD_INT 1
32429: NEG
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 2
32437: NEG
32438: PUSH
32439: LD_INT 2
32441: NEG
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: LD_INT 3
32453: NEG
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: LD_INT 2
32464: NEG
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 3
32472: PUSH
32473: LD_INT 2
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 2
32482: PUSH
32483: LD_INT 3
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 2
32492: NEG
32493: PUSH
32494: LD_INT 1
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 3
32503: NEG
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32538: LD_ADDR_VAR 0 35
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: LD_INT 0
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: LD_INT 1
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 1
32596: NEG
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: LD_INT 1
32611: NEG
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 2
32619: PUSH
32620: LD_INT 1
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 2
32629: NEG
32630: PUSH
32631: LD_INT 1
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32650: LD_ADDR_VAR 0 36
32654: PUSH
32655: LD_INT 0
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: LD_INT 1
32670: NEG
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: PUSH
32689: LD_INT 1
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: LD_INT 1
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: LD_INT 2
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: LD_INT 2
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32762: LD_ADDR_VAR 0 37
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: LD_INT 1
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 1
32790: PUSH
32791: LD_INT 0
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 0
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: NEG
32821: PUSH
32822: LD_INT 0
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 1
32831: NEG
32832: PUSH
32833: LD_INT 1
32835: NEG
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: LD_INT 1
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 1
32854: NEG
32855: PUSH
32856: LD_INT 1
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32874: LD_ADDR_VAR 0 38
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: LD_INT 0
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 0
32891: PUSH
32892: LD_INT 1
32894: NEG
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 1
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: LD_INT 1
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 1
32932: NEG
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: LD_INT 1
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: LD_INT 1
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 2
32965: NEG
32966: PUSH
32967: LD_INT 1
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32986: LD_ADDR_VAR 0 39
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 0
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 1
33044: NEG
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 1
33055: NEG
33056: PUSH
33057: LD_INT 1
33059: NEG
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 1
33067: NEG
33068: PUSH
33069: LD_INT 2
33071: NEG
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 1
33079: PUSH
33080: LD_INT 2
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33098: LD_ADDR_VAR 0 40
33102: PUSH
33103: LD_INT 0
33105: PUSH
33106: LD_INT 0
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: PUSH
33127: LD_INT 0
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: LD_INT 1
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: LD_INT 0
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 1
33167: NEG
33168: PUSH
33169: LD_INT 1
33171: NEG
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: LD_INT 1
33182: NEG
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 1
33190: NEG
33191: PUSH
33192: LD_INT 1
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33210: LD_ADDR_VAR 0 41
33214: PUSH
33215: LD_INT 0
33217: PUSH
33218: LD_INT 0
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: LD_INT 1
33230: NEG
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 1
33238: PUSH
33239: LD_INT 0
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 1
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: LD_INT 0
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: LD_INT 1
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 1
33291: NEG
33292: PUSH
33293: LD_INT 2
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: LD_INT 1
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 2
33314: PUSH
33315: LD_INT 0
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 2
33324: PUSH
33325: LD_INT 1
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: LD_INT 2
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: LD_INT 1
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 2
33365: NEG
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 2
33376: NEG
33377: PUSH
33378: LD_INT 1
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 2
33388: NEG
33389: PUSH
33390: LD_INT 2
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 2
33400: NEG
33401: PUSH
33402: LD_INT 3
33404: NEG
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 2
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 3
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 3
33433: PUSH
33434: LD_INT 1
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 3
33443: PUSH
33444: LD_INT 2
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 3
33453: PUSH
33454: LD_INT 3
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 2
33463: PUSH
33464: LD_INT 3
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 2
33473: NEG
33474: PUSH
33475: LD_INT 1
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 3
33484: NEG
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 3
33495: NEG
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 3
33507: NEG
33508: PUSH
33509: LD_INT 2
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 3
33519: NEG
33520: PUSH
33521: LD_INT 3
33523: NEG
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33560: LD_ADDR_VAR 0 42
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: LD_INT 1
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: LD_INT 2
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 0
33653: PUSH
33654: LD_INT 2
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 2
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 2
33685: PUSH
33686: LD_INT 2
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 1
33695: PUSH
33696: LD_INT 2
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: LD_INT 2
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 1
33715: NEG
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 2
33726: NEG
33727: PUSH
33728: LD_INT 1
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 2
33738: NEG
33739: PUSH
33740: LD_INT 2
33742: NEG
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 2
33750: NEG
33751: PUSH
33752: LD_INT 3
33754: NEG
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 1
33762: NEG
33763: PUSH
33764: LD_INT 3
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 0
33774: PUSH
33775: LD_INT 3
33777: NEG
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 1
33785: PUSH
33786: LD_INT 2
33788: NEG
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 3
33796: PUSH
33797: LD_INT 2
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 3
33806: PUSH
33807: LD_INT 3
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: LD_INT 3
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: LD_INT 3
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: LD_INT 3
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: LD_INT 2
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 3
33857: NEG
33858: PUSH
33859: LD_INT 2
33861: NEG
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 3
33869: NEG
33870: PUSH
33871: LD_INT 3
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33910: LD_ADDR_VAR 0 43
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 1
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 1
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: LD_INT 1
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 1
33991: NEG
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: LD_INT 2
34006: NEG
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 2
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 2
34035: PUSH
34036: LD_INT 1
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 1
34045: PUSH
34046: LD_INT 2
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: LD_INT 2
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 2
34076: NEG
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 2
34087: NEG
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 1
34099: NEG
34100: PUSH
34101: LD_INT 3
34103: NEG
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: LD_INT 3
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: LD_INT 2
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 2
34133: PUSH
34134: LD_INT 1
34136: NEG
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 3
34144: PUSH
34145: LD_INT 0
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 3
34154: PUSH
34155: LD_INT 1
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 1
34164: PUSH
34165: LD_INT 3
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: LD_INT 3
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: NEG
34185: PUSH
34186: LD_INT 2
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 2
34195: NEG
34196: PUSH
34197: LD_INT 1
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 3
34206: NEG
34207: PUSH
34208: LD_INT 0
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 3
34217: NEG
34218: PUSH
34219: LD_INT 1
34221: NEG
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34258: LD_ADDR_VAR 0 44
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: LD_INT 0
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: LD_INT 1
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: LD_INT 1
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 1
34316: NEG
34317: PUSH
34318: LD_INT 0
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 1
34327: NEG
34328: PUSH
34329: LD_INT 1
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: LD_INT 2
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 1
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 2
34362: PUSH
34363: LD_INT 0
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 2
34372: PUSH
34373: LD_INT 1
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 2
34382: PUSH
34383: LD_INT 2
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: LD_INT 2
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: NEG
34403: PUSH
34404: LD_INT 1
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 2
34413: NEG
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 2
34424: NEG
34425: PUSH
34426: LD_INT 1
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: LD_INT 2
34440: NEG
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 2
34448: NEG
34449: PUSH
34450: LD_INT 3
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 2
34460: PUSH
34461: LD_INT 1
34463: NEG
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 3
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 3
34481: PUSH
34482: LD_INT 1
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 3
34491: PUSH
34492: LD_INT 2
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 3
34501: PUSH
34502: LD_INT 3
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 2
34511: PUSH
34512: LD_INT 3
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 2
34521: NEG
34522: PUSH
34523: LD_INT 1
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 3
34532: NEG
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 3
34543: NEG
34544: PUSH
34545: LD_INT 1
34547: NEG
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 3
34555: NEG
34556: PUSH
34557: LD_INT 2
34559: NEG
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 3
34567: NEG
34568: PUSH
34569: LD_INT 3
34571: NEG
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34608: LD_ADDR_VAR 0 45
34612: PUSH
34613: LD_INT 0
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 1
34636: PUSH
34637: LD_INT 0
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 1
34646: PUSH
34647: LD_INT 1
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 1
34677: NEG
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: LD_INT 2
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 0
34701: PUSH
34702: LD_INT 2
34704: NEG
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 2
34723: PUSH
34724: LD_INT 1
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 2
34733: PUSH
34734: LD_INT 2
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: LD_INT 2
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: LD_INT 2
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 2
34774: NEG
34775: PUSH
34776: LD_INT 1
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 2
34786: NEG
34787: PUSH
34788: LD_INT 2
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 2
34798: NEG
34799: PUSH
34800: LD_INT 3
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 1
34810: NEG
34811: PUSH
34812: LD_INT 3
34814: NEG
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: LD_INT 3
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 1
34833: PUSH
34834: LD_INT 2
34836: NEG
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 3
34844: PUSH
34845: LD_INT 2
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 3
34854: PUSH
34855: LD_INT 3
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: LD_INT 3
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: LD_INT 3
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: LD_INT 3
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 1
34894: NEG
34895: PUSH
34896: LD_INT 2
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 3
34905: NEG
34906: PUSH
34907: LD_INT 2
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 3
34917: NEG
34918: PUSH
34919: LD_INT 3
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34958: LD_ADDR_VAR 0 46
34962: PUSH
34963: LD_INT 0
34965: PUSH
34966: LD_INT 0
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: LD_INT 1
34978: NEG
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: LD_INT 0
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 1
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: LD_INT 1
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: LD_INT 0
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 1
35039: NEG
35040: PUSH
35041: LD_INT 2
35043: NEG
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 0
35051: PUSH
35052: LD_INT 2
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: LD_INT 1
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 2
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: LD_INT 1
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: LD_INT 2
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: LD_INT 2
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 2
35124: NEG
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: NEG
35136: PUSH
35137: LD_INT 1
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: NEG
35148: PUSH
35149: LD_INT 3
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: LD_INT 3
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: PUSH
35171: LD_INT 2
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 2
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 3
35192: PUSH
35193: LD_INT 0
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 3
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 1
35212: PUSH
35213: LD_INT 3
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 0
35222: PUSH
35223: LD_INT 3
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: NEG
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 2
35243: NEG
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 3
35254: NEG
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 3
35265: NEG
35266: PUSH
35267: LD_INT 1
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35306: LD_ADDR_VAR 0 47
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 0
35323: PUSH
35324: LD_INT 1
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 1
35334: PUSH
35335: LD_INT 0
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: LD_INT 1
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: LD_INT 1
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: LD_INT 0
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 1
35375: NEG
35376: PUSH
35377: LD_INT 1
35379: NEG
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 1
35387: NEG
35388: PUSH
35389: LD_INT 2
35391: NEG
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: LD_INT 2
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 1
35410: PUSH
35411: LD_INT 1
35413: NEG
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 2
35421: NEG
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 2
35433: NEG
35434: PUSH
35435: LD_INT 2
35437: NEG
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35457: LD_ADDR_VAR 0 48
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: LD_INT 1
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 1
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 1
35495: PUSH
35496: LD_INT 1
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 0
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: LD_INT 0
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 1
35526: NEG
35527: PUSH
35528: LD_INT 1
35530: NEG
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 1
35538: NEG
35539: PUSH
35540: LD_INT 2
35542: NEG
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: LD_INT 2
35553: NEG
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 2
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 2
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35604: LD_ADDR_VAR 0 49
35608: PUSH
35609: LD_INT 0
35611: PUSH
35612: LD_INT 0
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: LD_INT 0
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: NEG
35674: PUSH
35675: LD_INT 1
35677: NEG
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 2
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 2
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 2
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35748: LD_ADDR_VAR 0 50
35752: PUSH
35753: LD_INT 0
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: LD_INT 1
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 1
35776: PUSH
35777: LD_INT 0
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 1
35806: NEG
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 1
35817: NEG
35818: PUSH
35819: LD_INT 1
35821: NEG
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 2
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 2
35839: PUSH
35840: LD_INT 2
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 1
35849: PUSH
35850: LD_INT 2
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: NEG
35870: PUSH
35871: LD_INT 1
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35892: LD_ADDR_VAR 0 51
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: LD_INT 1
35912: NEG
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: PUSH
35931: LD_INT 1
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 1
35961: NEG
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: LD_INT 2
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: LD_INT 2
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 2
36004: NEG
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 2
36015: NEG
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36039: LD_ADDR_VAR 0 52
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 0
36056: PUSH
36057: LD_INT 1
36059: NEG
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: NEG
36121: PUSH
36122: LD_INT 2
36124: NEG
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 1
36132: NEG
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 2
36143: NEG
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 2
36154: NEG
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 2
36166: NEG
36167: PUSH
36168: LD_INT 2
36170: NEG
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36190: LD_ADDR_VAR 0 53
36194: PUSH
36195: LD_INT 0
36197: PUSH
36198: LD_INT 0
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: LD_INT 1
36210: NEG
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: PUSH
36229: LD_INT 1
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 1
36259: NEG
36260: PUSH
36261: LD_INT 1
36263: NEG
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: LD_INT 2
36275: NEG
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: LD_INT 2
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: LD_INT 1
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 2
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 2
36315: PUSH
36316: LD_INT 1
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 2
36325: PUSH
36326: LD_INT 2
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 1
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 0
36345: PUSH
36346: LD_INT 2
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 1
36355: NEG
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 2
36366: NEG
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 2
36377: NEG
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 2
36389: NEG
36390: PUSH
36391: LD_INT 2
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36420: LD_ADDR_VAR 0 54
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: LD_INT 0
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: LD_INT 1
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 1
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: LD_INT 1
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: LD_INT 1
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 1
36478: NEG
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 1
36489: NEG
36490: PUSH
36491: LD_INT 1
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 1
36501: NEG
36502: PUSH
36503: LD_INT 2
36505: NEG
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 0
36513: PUSH
36514: LD_INT 2
36516: NEG
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: LD_INT 1
36527: NEG
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 2
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 2
36545: PUSH
36546: LD_INT 1
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: LD_INT 2
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 1
36565: PUSH
36566: LD_INT 2
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: LD_INT 2
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 1
36585: NEG
36586: PUSH
36587: LD_INT 1
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 2
36596: NEG
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 2
36607: NEG
36608: PUSH
36609: LD_INT 1
36611: NEG
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 2
36619: NEG
36620: PUSH
36621: LD_INT 2
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36650: LD_ADDR_VAR 0 55
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: LD_INT 1
36670: NEG
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: LD_INT 0
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 1
36688: PUSH
36689: LD_INT 1
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 0
36698: PUSH
36699: LD_INT 1
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: NEG
36709: PUSH
36710: LD_INT 0
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: LD_INT 1
36723: NEG
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 1
36731: NEG
36732: PUSH
36733: LD_INT 2
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: LD_INT 2
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: LD_INT 1
36757: NEG
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 2
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 2
36775: PUSH
36776: LD_INT 1
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 2
36785: PUSH
36786: LD_INT 2
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 1
36795: PUSH
36796: LD_INT 2
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 0
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: NEG
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 2
36826: NEG
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 2
36837: NEG
36838: PUSH
36839: LD_INT 1
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 2
36849: NEG
36850: PUSH
36851: LD_INT 2
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36880: LD_ADDR_VAR 0 56
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: LD_INT 1
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: NEG
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: LD_INT 1
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: NEG
36962: PUSH
36963: LD_INT 2
36965: NEG
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: LD_INT 2
36976: NEG
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 1
36984: PUSH
36985: LD_INT 1
36987: NEG
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 2
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: LD_INT 1
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: LD_INT 2
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: LD_INT 2
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: LD_INT 2
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: LD_INT 1
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 2
37056: NEG
37057: PUSH
37058: LD_INT 0
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 2
37067: NEG
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 2
37079: NEG
37080: PUSH
37081: LD_INT 2
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37110: LD_ADDR_VAR 0 57
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: LD_INT 0
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 1
37168: NEG
37169: PUSH
37170: LD_INT 0
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: LD_INT 1
37183: NEG
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: LD_INT 2
37195: NEG
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 0
37203: PUSH
37204: LD_INT 2
37206: NEG
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: LD_INT 1
37217: NEG
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 2
37225: PUSH
37226: LD_INT 0
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 2
37235: PUSH
37236: LD_INT 1
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: LD_INT 2
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 1
37255: PUSH
37256: LD_INT 2
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 0
37265: PUSH
37266: LD_INT 2
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 1
37275: NEG
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 2
37286: NEG
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 2
37297: NEG
37298: PUSH
37299: LD_INT 1
37301: NEG
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 2
37309: NEG
37310: PUSH
37311: LD_INT 2
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37340: LD_ADDR_VAR 0 58
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: LD_INT 0
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 1
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 1
37378: PUSH
37379: LD_INT 1
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: NEG
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: LD_INT 1
37413: NEG
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: LD_INT 2
37425: NEG
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 0
37433: PUSH
37434: LD_INT 2
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: LD_INT 1
37447: NEG
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 2
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 2
37465: PUSH
37466: LD_INT 1
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: LD_INT 2
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 1
37485: PUSH
37486: LD_INT 2
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 1
37505: NEG
37506: PUSH
37507: LD_INT 1
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 2
37516: NEG
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 2
37527: NEG
37528: PUSH
37529: LD_INT 1
37531: NEG
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 2
37539: NEG
37540: PUSH
37541: LD_INT 2
37543: NEG
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37570: LD_ADDR_VAR 0 59
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: LD_INT 1
37590: NEG
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: LD_INT 0
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: NEG
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: LD_INT 1
37643: NEG
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37658: LD_ADDR_VAR 0 60
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: LD_INT 1
37678: NEG
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: LD_INT 1
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: LD_INT 1
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 1
37716: NEG
37717: PUSH
37718: LD_INT 0
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 1
37727: NEG
37728: PUSH
37729: LD_INT 1
37731: NEG
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37746: LD_ADDR_VAR 0 61
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 1
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: LD_INT 0
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: LD_INT 1
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37834: LD_ADDR_VAR 0 62
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: LD_INT 0
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: LD_INT 1
37854: NEG
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: LD_INT 0
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 1
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 1
37892: NEG
37893: PUSH
37894: LD_INT 0
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 1
37903: NEG
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37922: LD_ADDR_VAR 0 63
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: LD_INT 1
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 1
37980: NEG
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 1
37991: NEG
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38010: LD_ADDR_VAR 0 64
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: LD_INT 1
38030: NEG
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 1
38038: PUSH
38039: LD_INT 0
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 1
38068: NEG
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: LD_INT 1
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: ST_TO_ADDR
// end ; 1 :
38098: GO 43995
38100: LD_INT 1
38102: DOUBLE
38103: EQUAL
38104: IFTRUE 38108
38106: GO 40731
38108: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38109: LD_ADDR_VAR 0 11
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: LD_INT 3
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: LD_INT 3
38131: NEG
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: LD_INT 2
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: LIST
38152: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38153: LD_ADDR_VAR 0 12
38157: PUSH
38158: LD_INT 2
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 3
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 3
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38194: LD_ADDR_VAR 0 13
38198: PUSH
38199: LD_INT 3
38201: PUSH
38202: LD_INT 2
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 3
38211: PUSH
38212: LD_INT 3
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 2
38221: PUSH
38222: LD_INT 3
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: LIST
38233: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38234: LD_ADDR_VAR 0 14
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: LD_INT 3
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: LD_INT 3
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: LD_INT 2
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38275: LD_ADDR_VAR 0 15
38279: PUSH
38280: LD_INT 2
38282: NEG
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 3
38293: NEG
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 3
38304: NEG
38305: PUSH
38306: LD_INT 1
38308: NEG
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: LIST
38318: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38319: LD_ADDR_VAR 0 16
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: LD_INT 3
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 3
38338: NEG
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 3
38350: NEG
38351: PUSH
38352: LD_INT 3
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38365: LD_ADDR_VAR 0 17
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: LD_INT 3
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 0
38384: PUSH
38385: LD_INT 3
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: LIST
38408: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38409: LD_ADDR_VAR 0 18
38413: PUSH
38414: LD_INT 2
38416: PUSH
38417: LD_INT 1
38419: NEG
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 3
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: LIST
38449: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38450: LD_ADDR_VAR 0 19
38454: PUSH
38455: LD_INT 3
38457: PUSH
38458: LD_INT 2
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 3
38467: PUSH
38468: LD_INT 3
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 2
38477: PUSH
38478: LD_INT 3
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: LIST
38489: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38490: LD_ADDR_VAR 0 20
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: LD_INT 3
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 3
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: LIST
38530: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38531: LD_ADDR_VAR 0 21
38535: PUSH
38536: LD_INT 2
38538: NEG
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 3
38549: NEG
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 3
38560: NEG
38561: PUSH
38562: LD_INT 1
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: LIST
38574: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38575: LD_ADDR_VAR 0 22
38579: PUSH
38580: LD_INT 2
38582: NEG
38583: PUSH
38584: LD_INT 3
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 3
38594: NEG
38595: PUSH
38596: LD_INT 2
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 3
38606: NEG
38607: PUSH
38608: LD_INT 3
38610: NEG
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: LIST
38620: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38621: LD_ADDR_VAR 0 23
38625: PUSH
38626: LD_INT 0
38628: PUSH
38629: LD_INT 3
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 1
38639: NEG
38640: PUSH
38641: LD_INT 4
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: LD_INT 3
38654: NEG
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: LIST
38664: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38665: LD_ADDR_VAR 0 24
38669: PUSH
38670: LD_INT 3
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 3
38682: PUSH
38683: LD_INT 1
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 4
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: LIST
38705: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38706: LD_ADDR_VAR 0 25
38710: PUSH
38711: LD_INT 3
38713: PUSH
38714: LD_INT 3
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 4
38723: PUSH
38724: LD_INT 3
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 3
38733: PUSH
38734: LD_INT 4
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38746: LD_ADDR_VAR 0 26
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: LD_INT 3
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: LD_INT 4
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: LD_INT 3
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: LIST
38786: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38787: LD_ADDR_VAR 0 27
38791: PUSH
38792: LD_INT 3
38794: NEG
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 3
38805: NEG
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 4
38816: NEG
38817: PUSH
38818: LD_INT 1
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: LIST
38830: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38831: LD_ADDR_VAR 0 28
38835: PUSH
38836: LD_INT 3
38838: NEG
38839: PUSH
38840: LD_INT 3
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 3
38850: NEG
38851: PUSH
38852: LD_INT 4
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 4
38862: NEG
38863: PUSH
38864: LD_INT 3
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: LIST
38876: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38877: LD_ADDR_VAR 0 29
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: LD_INT 3
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: LD_INT 3
38899: NEG
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: LD_INT 2
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: LD_INT 4
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: LD_INT 4
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: LD_INT 3
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 1
38952: NEG
38953: PUSH
38954: LD_INT 5
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: LD_INT 5
38967: NEG
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 4
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 1
38986: NEG
38987: PUSH
38988: LD_INT 6
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: LD_INT 6
39001: NEG
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 1
39009: PUSH
39010: LD_INT 5
39012: NEG
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39032: LD_ADDR_VAR 0 30
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 3
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 3
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 3
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 4
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 4
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 4
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 5
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 5
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 5
39132: PUSH
39133: LD_INT 1
39135: NEG
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 6
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 6
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39175: LD_ADDR_VAR 0 31
39179: PUSH
39180: LD_INT 3
39182: PUSH
39183: LD_INT 2
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 3
39192: PUSH
39193: LD_INT 3
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: LD_INT 3
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 4
39212: PUSH
39213: LD_INT 3
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 4
39222: PUSH
39223: LD_INT 4
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 3
39232: PUSH
39233: LD_INT 4
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 5
39242: PUSH
39243: LD_INT 4
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 5
39252: PUSH
39253: LD_INT 5
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 4
39262: PUSH
39263: LD_INT 5
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 6
39272: PUSH
39273: LD_INT 5
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 6
39282: PUSH
39283: LD_INT 6
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 5
39292: PUSH
39293: LD_INT 6
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39314: LD_ADDR_VAR 0 32
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: LD_INT 3
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: LD_INT 3
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: LD_INT 2
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: PUSH
39353: LD_INT 4
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: LD_INT 4
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 1
39372: NEG
39373: PUSH
39374: LD_INT 3
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 1
39383: PUSH
39384: LD_INT 5
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: LD_INT 5
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 1
39403: NEG
39404: PUSH
39405: LD_INT 4
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: LD_INT 6
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: LD_INT 6
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: PUSH
39436: LD_INT 5
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39457: LD_ADDR_VAR 0 33
39461: PUSH
39462: LD_INT 2
39464: NEG
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 3
39475: NEG
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 3
39486: NEG
39487: PUSH
39488: LD_INT 1
39490: NEG
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 3
39498: NEG
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 4
39509: NEG
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 4
39520: NEG
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 4
39532: NEG
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 5
39543: NEG
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 5
39554: NEG
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 5
39566: NEG
39567: PUSH
39568: LD_INT 1
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 6
39577: NEG
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 6
39588: NEG
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39612: LD_ADDR_VAR 0 34
39616: PUSH
39617: LD_INT 2
39619: NEG
39620: PUSH
39621: LD_INT 3
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 3
39631: NEG
39632: PUSH
39633: LD_INT 2
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 3
39643: NEG
39644: PUSH
39645: LD_INT 3
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 3
39655: NEG
39656: PUSH
39657: LD_INT 4
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 4
39667: NEG
39668: PUSH
39669: LD_INT 3
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 4
39679: NEG
39680: PUSH
39681: LD_INT 4
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 4
39691: NEG
39692: PUSH
39693: LD_INT 5
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 5
39703: NEG
39704: PUSH
39705: LD_INT 4
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 5
39715: NEG
39716: PUSH
39717: LD_INT 5
39719: NEG
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 5
39727: NEG
39728: PUSH
39729: LD_INT 6
39731: NEG
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 6
39739: NEG
39740: PUSH
39741: LD_INT 5
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 6
39751: NEG
39752: PUSH
39753: LD_INT 6
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39775: LD_ADDR_VAR 0 41
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: LD_INT 2
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: LD_INT 3
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: LD_INT 2
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: LIST
39818: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39819: LD_ADDR_VAR 0 42
39823: PUSH
39824: LD_INT 2
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 2
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 3
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: LIST
39859: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39860: LD_ADDR_VAR 0 43
39864: PUSH
39865: LD_INT 2
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 3
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 2
39887: PUSH
39888: LD_INT 3
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: LIST
39899: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39900: LD_ADDR_VAR 0 44
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: LD_INT 3
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: NEG
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: LIST
39940: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39941: LD_ADDR_VAR 0 45
39945: PUSH
39946: LD_INT 2
39948: NEG
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 2
39959: NEG
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 3
39970: NEG
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: LIST
39984: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39985: LD_ADDR_VAR 0 46
39989: PUSH
39990: LD_INT 2
39992: NEG
39993: PUSH
39994: LD_INT 2
39996: NEG
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 2
40004: NEG
40005: PUSH
40006: LD_INT 3
40008: NEG
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 3
40016: NEG
40017: PUSH
40018: LD_INT 2
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: LIST
40030: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40031: LD_ADDR_VAR 0 47
40035: PUSH
40036: LD_INT 2
40038: NEG
40039: PUSH
40040: LD_INT 3
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: LD_INT 3
40054: NEG
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40064: LD_ADDR_VAR 0 48
40068: PUSH
40069: LD_INT 1
40071: PUSH
40072: LD_INT 2
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 2
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40095: LD_ADDR_VAR 0 49
40099: PUSH
40100: LD_INT 3
40102: PUSH
40103: LD_INT 1
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 3
40112: PUSH
40113: LD_INT 2
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40124: LD_ADDR_VAR 0 50
40128: PUSH
40129: LD_INT 2
40131: PUSH
40132: LD_INT 3
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: LD_INT 3
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40153: LD_ADDR_VAR 0 51
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: LD_INT 2
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 2
40171: NEG
40172: PUSH
40173: LD_INT 1
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40184: LD_ADDR_VAR 0 52
40188: PUSH
40189: LD_INT 3
40191: NEG
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 3
40203: NEG
40204: PUSH
40205: LD_INT 2
40207: NEG
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40217: LD_ADDR_VAR 0 53
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: PUSH
40226: LD_INT 3
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 3
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: LD_INT 2
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: LIST
40260: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40261: LD_ADDR_VAR 0 54
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 3
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 3
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: LIST
40301: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40302: LD_ADDR_VAR 0 55
40306: PUSH
40307: LD_INT 3
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 3
40319: PUSH
40320: LD_INT 3
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 2
40329: PUSH
40330: LD_INT 3
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: LIST
40341: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40342: LD_ADDR_VAR 0 56
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: LD_INT 3
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: LD_INT 3
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 1
40369: NEG
40370: PUSH
40371: LD_INT 2
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40383: LD_ADDR_VAR 0 57
40387: PUSH
40388: LD_INT 2
40390: NEG
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 3
40401: NEG
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 3
40412: NEG
40413: PUSH
40414: LD_INT 1
40416: NEG
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: LIST
40426: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40427: LD_ADDR_VAR 0 58
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: LD_INT 3
40438: NEG
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 3
40446: NEG
40447: PUSH
40448: LD_INT 2
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 3
40458: NEG
40459: PUSH
40460: LD_INT 3
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: LIST
40472: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40473: LD_ADDR_VAR 0 59
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: LD_INT 2
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: LD_INT 2
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: LIST
40516: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40517: LD_ADDR_VAR 0 60
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 2
40545: PUSH
40546: LD_INT 1
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: LIST
40557: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40558: LD_ADDR_VAR 0 61
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: LD_INT 2
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: LD_INT 2
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: LIST
40597: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40598: LD_ADDR_VAR 0 62
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: LIST
40638: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40639: LD_ADDR_VAR 0 63
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 2
40657: NEG
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 2
40668: NEG
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: LIST
40682: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40683: LD_ADDR_VAR 0 64
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: LD_INT 2
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 2
40702: NEG
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 2
40714: NEG
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: LIST
40728: ST_TO_ADDR
// end ; 2 :
40729: GO 43995
40731: LD_INT 2
40733: DOUBLE
40734: EQUAL
40735: IFTRUE 40739
40737: GO 43994
40739: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40740: LD_ADDR_VAR 0 29
40744: PUSH
40745: LD_INT 4
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 4
40757: PUSH
40758: LD_INT 1
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 5
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 5
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 4
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 3
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 3
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 3
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 5
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 3
40840: PUSH
40841: LD_INT 3
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 3
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 4
40860: PUSH
40861: LD_INT 3
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 4
40870: PUSH
40871: LD_INT 4
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 3
40880: PUSH
40881: LD_INT 4
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 2
40890: PUSH
40891: LD_INT 3
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 4
40910: PUSH
40911: LD_INT 2
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 2
40920: PUSH
40921: LD_INT 4
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: LD_INT 4
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: LD_INT 3
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 4
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: LD_INT 5
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 5
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: LD_INT 4
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: LD_INT 3
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: LD_INT 5
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: NEG
41013: PUSH
41014: LD_INT 3
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 3
41023: NEG
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 3
41034: NEG
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: NEG
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: LD_INT 1
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 3
41068: NEG
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 4
41079: NEG
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 4
41090: NEG
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 4
41102: NEG
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: LD_INT 2
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 4
41125: NEG
41126: PUSH
41127: LD_INT 4
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 4
41137: NEG
41138: PUSH
41139: LD_INT 5
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 3
41149: NEG
41150: PUSH
41151: LD_INT 4
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 3
41161: NEG
41162: PUSH
41163: LD_INT 3
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 4
41173: NEG
41174: PUSH
41175: LD_INT 3
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 5
41185: NEG
41186: PUSH
41187: LD_INT 4
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 5
41197: NEG
41198: PUSH
41199: LD_INT 5
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 3
41209: NEG
41210: PUSH
41211: LD_INT 5
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 5
41221: NEG
41222: PUSH
41223: LD_INT 3
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41278: LD_ADDR_VAR 0 30
41282: PUSH
41283: LD_INT 4
41285: PUSH
41286: LD_INT 4
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 4
41295: PUSH
41296: LD_INT 3
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 5
41305: PUSH
41306: LD_INT 4
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 5
41315: PUSH
41316: LD_INT 5
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 4
41325: PUSH
41326: LD_INT 5
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 3
41335: PUSH
41336: LD_INT 4
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 3
41345: PUSH
41346: LD_INT 3
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 5
41355: PUSH
41356: LD_INT 3
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 3
41365: PUSH
41366: LD_INT 5
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: LD_INT 3
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: LD_INT 2
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: PUSH
41396: LD_INT 3
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: LD_INT 4
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: LD_INT 4
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: LD_INT 3
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: LD_INT 4
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 2
41457: NEG
41458: PUSH
41459: LD_INT 2
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 4
41468: NEG
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 4
41479: NEG
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 3
41491: NEG
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 3
41502: NEG
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 4
41513: NEG
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 5
41524: NEG
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 5
41535: NEG
41536: PUSH
41537: LD_INT 1
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 5
41547: NEG
41548: PUSH
41549: LD_INT 2
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 3
41559: NEG
41560: PUSH
41561: LD_INT 2
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 3
41570: NEG
41571: PUSH
41572: LD_INT 3
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 3
41582: NEG
41583: PUSH
41584: LD_INT 4
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: LD_INT 3
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 2
41606: NEG
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 3
41618: NEG
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 4
41630: NEG
41631: PUSH
41632: LD_INT 3
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 4
41642: NEG
41643: PUSH
41644: LD_INT 4
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PUSH
41656: LD_INT 4
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 4
41666: NEG
41667: PUSH
41668: LD_INT 2
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: LD_INT 4
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: LD_INT 5
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: LD_INT 4
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: LD_INT 3
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: LD_INT 3
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: LD_INT 4
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: LD_INT 5
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: LD_INT 3
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 2
41768: NEG
41769: PUSH
41770: LD_INT 5
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41825: LD_ADDR_VAR 0 31
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 4
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 3
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: LD_INT 4
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: LD_INT 5
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: LD_INT 5
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: LD_INT 4
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 3
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 2
41904: PUSH
41905: LD_INT 5
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 2
41914: NEG
41915: PUSH
41916: LD_INT 3
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 3
41925: NEG
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 3
41936: NEG
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 3
41970: NEG
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 4
41981: NEG
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 4
41992: NEG
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 4
42004: NEG
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 2
42016: NEG
42017: PUSH
42018: LD_INT 2
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 4
42027: NEG
42028: PUSH
42029: LD_INT 4
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 4
42039: NEG
42040: PUSH
42041: LD_INT 5
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 3
42051: NEG
42052: PUSH
42053: LD_INT 4
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 3
42063: NEG
42064: PUSH
42065: LD_INT 3
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 4
42075: NEG
42076: PUSH
42077: LD_INT 3
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 5
42087: NEG
42088: PUSH
42089: LD_INT 4
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 5
42099: NEG
42100: PUSH
42101: LD_INT 5
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 3
42111: NEG
42112: PUSH
42113: LD_INT 5
42115: NEG
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 5
42123: NEG
42124: PUSH
42125: LD_INT 3
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: LD_INT 3
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: LD_INT 4
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: LD_INT 3
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: LD_INT 2
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: LD_INT 2
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: LD_INT 3
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: PUSH
42204: LD_INT 4
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: LD_INT 2
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: LD_INT 4
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 4
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 4
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 5
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 5
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 4
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 3
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 3
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 3
42309: PUSH
42310: LD_INT 2
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 5
42320: PUSH
42321: LD_INT 2
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42375: LD_ADDR_VAR 0 32
42379: PUSH
42380: LD_INT 4
42382: NEG
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 4
42393: NEG
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 3
42405: NEG
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 3
42416: NEG
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 4
42427: NEG
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 5
42438: NEG
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 5
42449: NEG
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 5
42461: NEG
42462: PUSH
42463: LD_INT 2
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 3
42473: NEG
42474: PUSH
42475: LD_INT 2
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 3
42484: NEG
42485: PUSH
42486: LD_INT 3
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 3
42496: NEG
42497: PUSH
42498: LD_INT 4
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 2
42508: NEG
42509: PUSH
42510: LD_INT 3
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 2
42520: NEG
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 3
42532: NEG
42533: PUSH
42534: LD_INT 2
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 4
42544: NEG
42545: PUSH
42546: LD_INT 3
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 4
42556: NEG
42557: PUSH
42558: LD_INT 4
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 2
42568: NEG
42569: PUSH
42570: LD_INT 4
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 4
42580: NEG
42581: PUSH
42582: LD_INT 2
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 4
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: LD_INT 5
42606: NEG
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: LD_INT 4
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: LD_INT 3
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: LD_INT 3
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: LD_INT 4
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: LD_INT 5
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 2
42671: PUSH
42672: LD_INT 3
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 2
42682: NEG
42683: PUSH
42684: LD_INT 5
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 3
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 3
42704: PUSH
42705: LD_INT 1
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 4
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 4
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 3
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 2
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: LD_INT 2
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 4
42777: PUSH
42778: LD_INT 2
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 4
42787: PUSH
42788: LD_INT 4
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 4
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 5
42807: PUSH
42808: LD_INT 4
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 5
42817: PUSH
42818: LD_INT 5
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 4
42827: PUSH
42828: LD_INT 5
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 3
42837: PUSH
42838: LD_INT 4
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 3
42847: PUSH
42848: LD_INT 3
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 5
42857: PUSH
42858: LD_INT 3
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 3
42867: PUSH
42868: LD_INT 5
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42922: LD_ADDR_VAR 0 33
42926: PUSH
42927: LD_INT 4
42929: NEG
42930: PUSH
42931: LD_INT 4
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 4
42941: NEG
42942: PUSH
42943: LD_INT 5
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 3
42953: NEG
42954: PUSH
42955: LD_INT 4
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 3
42965: NEG
42966: PUSH
42967: LD_INT 3
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 4
42977: NEG
42978: PUSH
42979: LD_INT 3
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 5
42989: NEG
42990: PUSH
42991: LD_INT 4
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 5
43001: NEG
43002: PUSH
43003: LD_INT 5
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 3
43013: NEG
43014: PUSH
43015: LD_INT 5
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 5
43025: NEG
43026: PUSH
43027: LD_INT 3
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: LD_INT 3
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 4
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: LD_INT 3
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: LD_INT 2
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: LD_INT 3
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: LD_INT 4
43108: NEG
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: LD_INT 2
43119: NEG
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: LD_INT 4
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 4
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 4
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 5
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 5
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 4
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 3
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 3
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 3
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 5
43222: PUSH
43223: LD_INT 2
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 3
43232: PUSH
43233: LD_INT 3
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 3
43242: PUSH
43243: LD_INT 2
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 4
43252: PUSH
43253: LD_INT 3
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 4
43262: PUSH
43263: LD_INT 4
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 3
43272: PUSH
43273: LD_INT 4
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 2
43282: PUSH
43283: LD_INT 3
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 2
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 4
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: LD_INT 4
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 4
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 3
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: PUSH
43343: LD_INT 4
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: LD_INT 5
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: LD_INT 5
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: LD_INT 4
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 1
43383: NEG
43384: PUSH
43385: LD_INT 3
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 2
43394: PUSH
43395: LD_INT 5
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 2
43404: NEG
43405: PUSH
43406: LD_INT 3
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43460: LD_ADDR_VAR 0 34
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: LD_INT 4
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: LD_INT 5
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: LD_INT 4
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: LD_INT 3
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: LD_INT 3
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: LD_INT 4
43526: NEG
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 5
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 3
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 2
43557: NEG
43558: PUSH
43559: LD_INT 5
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 3
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 3
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 4
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 4
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 3
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 2
43641: PUSH
43642: LD_INT 2
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 4
43652: PUSH
43653: LD_INT 2
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 4
43662: PUSH
43663: LD_INT 4
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 4
43672: PUSH
43673: LD_INT 3
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 5
43682: PUSH
43683: LD_INT 4
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 5
43692: PUSH
43693: LD_INT 5
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 4
43702: PUSH
43703: LD_INT 5
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 3
43712: PUSH
43713: LD_INT 4
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 3
43722: PUSH
43723: LD_INT 3
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 5
43732: PUSH
43733: LD_INT 3
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 3
43742: PUSH
43743: LD_INT 5
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: LD_INT 3
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: LD_INT 2
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: LD_INT 3
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: LD_INT 4
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 4
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: LD_INT 3
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: LD_INT 2
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: LD_INT 4
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 4
43845: NEG
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 4
43856: NEG
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 3
43868: NEG
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 3
43879: NEG
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 4
43890: NEG
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 5
43901: NEG
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 5
43912: NEG
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 5
43924: NEG
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 3
43936: NEG
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: ST_TO_ADDR
// end ; end ;
43992: GO 43995
43994: POP
// case btype of b_depot , b_warehouse :
43995: LD_VAR 0 1
43999: PUSH
44000: LD_INT 0
44002: DOUBLE
44003: EQUAL
44004: IFTRUE 44014
44006: LD_INT 1
44008: DOUBLE
44009: EQUAL
44010: IFTRUE 44014
44012: GO 44215
44014: POP
// case nation of nation_american :
44015: LD_VAR 0 5
44019: PUSH
44020: LD_INT 1
44022: DOUBLE
44023: EQUAL
44024: IFTRUE 44028
44026: GO 44084
44028: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
44029: LD_ADDR_VAR 0 9
44033: PUSH
44034: LD_VAR 0 11
44038: PUSH
44039: LD_VAR 0 12
44043: PUSH
44044: LD_VAR 0 13
44048: PUSH
44049: LD_VAR 0 14
44053: PUSH
44054: LD_VAR 0 15
44058: PUSH
44059: LD_VAR 0 16
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: PUSH
44072: LD_VAR 0 4
44076: PUSH
44077: LD_INT 1
44079: PLUS
44080: ARRAY
44081: ST_TO_ADDR
44082: GO 44213
44084: LD_INT 2
44086: DOUBLE
44087: EQUAL
44088: IFTRUE 44092
44090: GO 44148
44092: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
44093: LD_ADDR_VAR 0 9
44097: PUSH
44098: LD_VAR 0 17
44102: PUSH
44103: LD_VAR 0 18
44107: PUSH
44108: LD_VAR 0 19
44112: PUSH
44113: LD_VAR 0 20
44117: PUSH
44118: LD_VAR 0 21
44122: PUSH
44123: LD_VAR 0 22
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: PUSH
44136: LD_VAR 0 4
44140: PUSH
44141: LD_INT 1
44143: PLUS
44144: ARRAY
44145: ST_TO_ADDR
44146: GO 44213
44148: LD_INT 3
44150: DOUBLE
44151: EQUAL
44152: IFTRUE 44156
44154: GO 44212
44156: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44157: LD_ADDR_VAR 0 9
44161: PUSH
44162: LD_VAR 0 23
44166: PUSH
44167: LD_VAR 0 24
44171: PUSH
44172: LD_VAR 0 25
44176: PUSH
44177: LD_VAR 0 26
44181: PUSH
44182: LD_VAR 0 27
44186: PUSH
44187: LD_VAR 0 28
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: PUSH
44200: LD_VAR 0 4
44204: PUSH
44205: LD_INT 1
44207: PLUS
44208: ARRAY
44209: ST_TO_ADDR
44210: GO 44213
44212: POP
44213: GO 44762
44215: LD_INT 2
44217: DOUBLE
44218: EQUAL
44219: IFTRUE 44229
44221: LD_INT 3
44223: DOUBLE
44224: EQUAL
44225: IFTRUE 44229
44227: GO 44285
44229: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44230: LD_ADDR_VAR 0 9
44234: PUSH
44235: LD_VAR 0 29
44239: PUSH
44240: LD_VAR 0 30
44244: PUSH
44245: LD_VAR 0 31
44249: PUSH
44250: LD_VAR 0 32
44254: PUSH
44255: LD_VAR 0 33
44259: PUSH
44260: LD_VAR 0 34
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: PUSH
44273: LD_VAR 0 4
44277: PUSH
44278: LD_INT 1
44280: PLUS
44281: ARRAY
44282: ST_TO_ADDR
44283: GO 44762
44285: LD_INT 16
44287: DOUBLE
44288: EQUAL
44289: IFTRUE 44341
44291: LD_INT 17
44293: DOUBLE
44294: EQUAL
44295: IFTRUE 44341
44297: LD_INT 18
44299: DOUBLE
44300: EQUAL
44301: IFTRUE 44341
44303: LD_INT 19
44305: DOUBLE
44306: EQUAL
44307: IFTRUE 44341
44309: LD_INT 20
44311: DOUBLE
44312: EQUAL
44313: IFTRUE 44341
44315: LD_INT 21
44317: DOUBLE
44318: EQUAL
44319: IFTRUE 44341
44321: LD_INT 23
44323: DOUBLE
44324: EQUAL
44325: IFTRUE 44341
44327: LD_INT 24
44329: DOUBLE
44330: EQUAL
44331: IFTRUE 44341
44333: LD_INT 25
44335: DOUBLE
44336: EQUAL
44337: IFTRUE 44341
44339: GO 44397
44341: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44342: LD_ADDR_VAR 0 9
44346: PUSH
44347: LD_VAR 0 35
44351: PUSH
44352: LD_VAR 0 36
44356: PUSH
44357: LD_VAR 0 37
44361: PUSH
44362: LD_VAR 0 38
44366: PUSH
44367: LD_VAR 0 39
44371: PUSH
44372: LD_VAR 0 40
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: PUSH
44385: LD_VAR 0 4
44389: PUSH
44390: LD_INT 1
44392: PLUS
44393: ARRAY
44394: ST_TO_ADDR
44395: GO 44762
44397: LD_INT 6
44399: DOUBLE
44400: EQUAL
44401: IFTRUE 44453
44403: LD_INT 7
44405: DOUBLE
44406: EQUAL
44407: IFTRUE 44453
44409: LD_INT 8
44411: DOUBLE
44412: EQUAL
44413: IFTRUE 44453
44415: LD_INT 13
44417: DOUBLE
44418: EQUAL
44419: IFTRUE 44453
44421: LD_INT 12
44423: DOUBLE
44424: EQUAL
44425: IFTRUE 44453
44427: LD_INT 15
44429: DOUBLE
44430: EQUAL
44431: IFTRUE 44453
44433: LD_INT 11
44435: DOUBLE
44436: EQUAL
44437: IFTRUE 44453
44439: LD_INT 14
44441: DOUBLE
44442: EQUAL
44443: IFTRUE 44453
44445: LD_INT 10
44447: DOUBLE
44448: EQUAL
44449: IFTRUE 44453
44451: GO 44509
44453: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
44454: LD_ADDR_VAR 0 9
44458: PUSH
44459: LD_VAR 0 41
44463: PUSH
44464: LD_VAR 0 42
44468: PUSH
44469: LD_VAR 0 43
44473: PUSH
44474: LD_VAR 0 44
44478: PUSH
44479: LD_VAR 0 45
44483: PUSH
44484: LD_VAR 0 46
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: PUSH
44497: LD_VAR 0 4
44501: PUSH
44502: LD_INT 1
44504: PLUS
44505: ARRAY
44506: ST_TO_ADDR
44507: GO 44762
44509: LD_INT 36
44511: DOUBLE
44512: EQUAL
44513: IFTRUE 44517
44515: GO 44573
44517: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44518: LD_ADDR_VAR 0 9
44522: PUSH
44523: LD_VAR 0 47
44527: PUSH
44528: LD_VAR 0 48
44532: PUSH
44533: LD_VAR 0 49
44537: PUSH
44538: LD_VAR 0 50
44542: PUSH
44543: LD_VAR 0 51
44547: PUSH
44548: LD_VAR 0 52
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: PUSH
44561: LD_VAR 0 4
44565: PUSH
44566: LD_INT 1
44568: PLUS
44569: ARRAY
44570: ST_TO_ADDR
44571: GO 44762
44573: LD_INT 4
44575: DOUBLE
44576: EQUAL
44577: IFTRUE 44599
44579: LD_INT 5
44581: DOUBLE
44582: EQUAL
44583: IFTRUE 44599
44585: LD_INT 34
44587: DOUBLE
44588: EQUAL
44589: IFTRUE 44599
44591: LD_INT 37
44593: DOUBLE
44594: EQUAL
44595: IFTRUE 44599
44597: GO 44655
44599: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44600: LD_ADDR_VAR 0 9
44604: PUSH
44605: LD_VAR 0 53
44609: PUSH
44610: LD_VAR 0 54
44614: PUSH
44615: LD_VAR 0 55
44619: PUSH
44620: LD_VAR 0 56
44624: PUSH
44625: LD_VAR 0 57
44629: PUSH
44630: LD_VAR 0 58
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: PUSH
44643: LD_VAR 0 4
44647: PUSH
44648: LD_INT 1
44650: PLUS
44651: ARRAY
44652: ST_TO_ADDR
44653: GO 44762
44655: LD_INT 31
44657: DOUBLE
44658: EQUAL
44659: IFTRUE 44705
44661: LD_INT 32
44663: DOUBLE
44664: EQUAL
44665: IFTRUE 44705
44667: LD_INT 33
44669: DOUBLE
44670: EQUAL
44671: IFTRUE 44705
44673: LD_INT 27
44675: DOUBLE
44676: EQUAL
44677: IFTRUE 44705
44679: LD_INT 26
44681: DOUBLE
44682: EQUAL
44683: IFTRUE 44705
44685: LD_INT 28
44687: DOUBLE
44688: EQUAL
44689: IFTRUE 44705
44691: LD_INT 29
44693: DOUBLE
44694: EQUAL
44695: IFTRUE 44705
44697: LD_INT 30
44699: DOUBLE
44700: EQUAL
44701: IFTRUE 44705
44703: GO 44761
44705: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
44706: LD_ADDR_VAR 0 9
44710: PUSH
44711: LD_VAR 0 59
44715: PUSH
44716: LD_VAR 0 60
44720: PUSH
44721: LD_VAR 0 61
44725: PUSH
44726: LD_VAR 0 62
44730: PUSH
44731: LD_VAR 0 63
44735: PUSH
44736: LD_VAR 0 64
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: PUSH
44749: LD_VAR 0 4
44753: PUSH
44754: LD_INT 1
44756: PLUS
44757: ARRAY
44758: ST_TO_ADDR
44759: GO 44762
44761: POP
// temp_list2 = [ ] ;
44762: LD_ADDR_VAR 0 10
44766: PUSH
44767: EMPTY
44768: ST_TO_ADDR
// for i in temp_list do
44769: LD_ADDR_VAR 0 8
44773: PUSH
44774: LD_VAR 0 9
44778: PUSH
44779: FOR_IN
44780: IFFALSE 44832
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44782: LD_ADDR_VAR 0 10
44786: PUSH
44787: LD_VAR 0 10
44791: PUSH
44792: LD_VAR 0 8
44796: PUSH
44797: LD_INT 1
44799: ARRAY
44800: PUSH
44801: LD_VAR 0 2
44805: PLUS
44806: PUSH
44807: LD_VAR 0 8
44811: PUSH
44812: LD_INT 2
44814: ARRAY
44815: PUSH
44816: LD_VAR 0 3
44820: PLUS
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: EMPTY
44827: LIST
44828: ADD
44829: ST_TO_ADDR
44830: GO 44779
44832: POP
44833: POP
// result = temp_list2 ;
44834: LD_ADDR_VAR 0 7
44838: PUSH
44839: LD_VAR 0 10
44843: ST_TO_ADDR
// end ;
44844: LD_VAR 0 7
44848: RET
// export function EnemyInRange ( unit , dist ) ; begin
44849: LD_INT 0
44851: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44852: LD_ADDR_VAR 0 3
44856: PUSH
44857: LD_VAR 0 1
44861: PPUSH
44862: CALL_OW 255
44866: PPUSH
44867: LD_VAR 0 1
44871: PPUSH
44872: CALL_OW 250
44876: PPUSH
44877: LD_VAR 0 1
44881: PPUSH
44882: CALL_OW 251
44886: PPUSH
44887: LD_VAR 0 2
44891: PPUSH
44892: CALL 19516 0 4
44896: PUSH
44897: LD_INT 4
44899: ARRAY
44900: ST_TO_ADDR
// end ;
44901: LD_VAR 0 3
44905: RET
// export function PlayerSeeMe ( unit ) ; begin
44906: LD_INT 0
44908: PPUSH
// result := See ( your_side , unit ) ;
44909: LD_ADDR_VAR 0 2
44913: PUSH
44914: LD_OWVAR 2
44918: PPUSH
44919: LD_VAR 0 1
44923: PPUSH
44924: CALL_OW 292
44928: ST_TO_ADDR
// end ;
44929: LD_VAR 0 2
44933: RET
// export function ReverseDir ( unit ) ; begin
44934: LD_INT 0
44936: PPUSH
// if not unit then
44937: LD_VAR 0 1
44941: NOT
44942: IFFALSE 44946
// exit ;
44944: GO 44992
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
44946: LD_ADDR_VAR 0 2
44950: PUSH
44951: LD_INT 3
44953: PUSH
44954: LD_INT 4
44956: PUSH
44957: LD_INT 5
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: PUSH
44977: LD_VAR 0 1
44981: PPUSH
44982: CALL_OW 254
44986: PUSH
44987: LD_INT 1
44989: PLUS
44990: ARRAY
44991: ST_TO_ADDR
// end ;
44992: LD_VAR 0 2
44996: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
44997: LD_INT 0
44999: PPUSH
45000: PPUSH
45001: PPUSH
45002: PPUSH
45003: PPUSH
// if not hexes then
45004: LD_VAR 0 2
45008: NOT
45009: IFFALSE 45013
// exit ;
45011: GO 45161
// dist := 9999 ;
45013: LD_ADDR_VAR 0 5
45017: PUSH
45018: LD_INT 9999
45020: ST_TO_ADDR
// for i = 1 to hexes do
45021: LD_ADDR_VAR 0 4
45025: PUSH
45026: DOUBLE
45027: LD_INT 1
45029: DEC
45030: ST_TO_ADDR
45031: LD_VAR 0 2
45035: PUSH
45036: FOR_TO
45037: IFFALSE 45149
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45039: LD_VAR 0 1
45043: PPUSH
45044: LD_VAR 0 2
45048: PUSH
45049: LD_VAR 0 4
45053: ARRAY
45054: PUSH
45055: LD_INT 1
45057: ARRAY
45058: PPUSH
45059: LD_VAR 0 2
45063: PUSH
45064: LD_VAR 0 4
45068: ARRAY
45069: PUSH
45070: LD_INT 2
45072: ARRAY
45073: PPUSH
45074: CALL_OW 297
45078: PUSH
45079: LD_VAR 0 5
45083: LESS
45084: IFFALSE 45147
// begin hex := hexes [ i ] ;
45086: LD_ADDR_VAR 0 7
45090: PUSH
45091: LD_VAR 0 2
45095: PUSH
45096: LD_VAR 0 4
45100: ARRAY
45101: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45102: LD_ADDR_VAR 0 5
45106: PUSH
45107: LD_VAR 0 1
45111: PPUSH
45112: LD_VAR 0 2
45116: PUSH
45117: LD_VAR 0 4
45121: ARRAY
45122: PUSH
45123: LD_INT 1
45125: ARRAY
45126: PPUSH
45127: LD_VAR 0 2
45131: PUSH
45132: LD_VAR 0 4
45136: ARRAY
45137: PUSH
45138: LD_INT 2
45140: ARRAY
45141: PPUSH
45142: CALL_OW 297
45146: ST_TO_ADDR
// end ; end ;
45147: GO 45036
45149: POP
45150: POP
// result := hex ;
45151: LD_ADDR_VAR 0 3
45155: PUSH
45156: LD_VAR 0 7
45160: ST_TO_ADDR
// end ;
45161: LD_VAR 0 3
45165: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45166: LD_INT 0
45168: PPUSH
45169: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45170: LD_VAR 0 1
45174: NOT
45175: PUSH
45176: LD_VAR 0 1
45180: PUSH
45181: LD_INT 21
45183: PUSH
45184: LD_INT 2
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 23
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PPUSH
45205: CALL_OW 69
45209: IN
45210: NOT
45211: OR
45212: IFFALSE 45216
// exit ;
45214: GO 45263
// for i = 1 to 3 do
45216: LD_ADDR_VAR 0 3
45220: PUSH
45221: DOUBLE
45222: LD_INT 1
45224: DEC
45225: ST_TO_ADDR
45226: LD_INT 3
45228: PUSH
45229: FOR_TO
45230: IFFALSE 45261
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45232: LD_VAR 0 1
45236: PPUSH
45237: CALL_OW 250
45241: PPUSH
45242: LD_VAR 0 1
45246: PPUSH
45247: CALL_OW 251
45251: PPUSH
45252: LD_INT 1
45254: PPUSH
45255: CALL_OW 453
45259: GO 45229
45261: POP
45262: POP
// end ;
45263: LD_VAR 0 2
45267: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45268: LD_INT 0
45270: PPUSH
45271: PPUSH
45272: PPUSH
45273: PPUSH
45274: PPUSH
45275: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45276: LD_VAR 0 1
45280: NOT
45281: PUSH
45282: LD_VAR 0 2
45286: NOT
45287: OR
45288: PUSH
45289: LD_VAR 0 1
45293: PPUSH
45294: CALL_OW 314
45298: OR
45299: IFFALSE 45303
// exit ;
45301: GO 45744
// x := GetX ( enemy_unit ) ;
45303: LD_ADDR_VAR 0 7
45307: PUSH
45308: LD_VAR 0 2
45312: PPUSH
45313: CALL_OW 250
45317: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45318: LD_ADDR_VAR 0 8
45322: PUSH
45323: LD_VAR 0 2
45327: PPUSH
45328: CALL_OW 251
45332: ST_TO_ADDR
// if not x or not y then
45333: LD_VAR 0 7
45337: NOT
45338: PUSH
45339: LD_VAR 0 8
45343: NOT
45344: OR
45345: IFFALSE 45349
// exit ;
45347: GO 45744
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45349: LD_ADDR_VAR 0 6
45353: PUSH
45354: LD_VAR 0 7
45358: PPUSH
45359: LD_INT 0
45361: PPUSH
45362: LD_INT 4
45364: PPUSH
45365: CALL_OW 272
45369: PUSH
45370: LD_VAR 0 8
45374: PPUSH
45375: LD_INT 0
45377: PPUSH
45378: LD_INT 4
45380: PPUSH
45381: CALL_OW 273
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_VAR 0 7
45394: PPUSH
45395: LD_INT 1
45397: PPUSH
45398: LD_INT 4
45400: PPUSH
45401: CALL_OW 272
45405: PUSH
45406: LD_VAR 0 8
45410: PPUSH
45411: LD_INT 1
45413: PPUSH
45414: LD_INT 4
45416: PPUSH
45417: CALL_OW 273
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_VAR 0 7
45430: PPUSH
45431: LD_INT 2
45433: PPUSH
45434: LD_INT 4
45436: PPUSH
45437: CALL_OW 272
45441: PUSH
45442: LD_VAR 0 8
45446: PPUSH
45447: LD_INT 2
45449: PPUSH
45450: LD_INT 4
45452: PPUSH
45453: CALL_OW 273
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_VAR 0 7
45466: PPUSH
45467: LD_INT 3
45469: PPUSH
45470: LD_INT 4
45472: PPUSH
45473: CALL_OW 272
45477: PUSH
45478: LD_VAR 0 8
45482: PPUSH
45483: LD_INT 3
45485: PPUSH
45486: LD_INT 4
45488: PPUSH
45489: CALL_OW 273
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_VAR 0 7
45502: PPUSH
45503: LD_INT 4
45505: PPUSH
45506: LD_INT 4
45508: PPUSH
45509: CALL_OW 272
45513: PUSH
45514: LD_VAR 0 8
45518: PPUSH
45519: LD_INT 4
45521: PPUSH
45522: LD_INT 4
45524: PPUSH
45525: CALL_OW 273
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_VAR 0 7
45538: PPUSH
45539: LD_INT 5
45541: PPUSH
45542: LD_INT 4
45544: PPUSH
45545: CALL_OW 272
45549: PUSH
45550: LD_VAR 0 8
45554: PPUSH
45555: LD_INT 5
45557: PPUSH
45558: LD_INT 4
45560: PPUSH
45561: CALL_OW 273
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: ST_TO_ADDR
// for i = tmp downto 1 do
45578: LD_ADDR_VAR 0 4
45582: PUSH
45583: DOUBLE
45584: LD_VAR 0 6
45588: INC
45589: ST_TO_ADDR
45590: LD_INT 1
45592: PUSH
45593: FOR_DOWNTO
45594: IFFALSE 45695
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45596: LD_VAR 0 6
45600: PUSH
45601: LD_VAR 0 4
45605: ARRAY
45606: PUSH
45607: LD_INT 1
45609: ARRAY
45610: PPUSH
45611: LD_VAR 0 6
45615: PUSH
45616: LD_VAR 0 4
45620: ARRAY
45621: PUSH
45622: LD_INT 2
45624: ARRAY
45625: PPUSH
45626: CALL_OW 488
45630: NOT
45631: PUSH
45632: LD_VAR 0 6
45636: PUSH
45637: LD_VAR 0 4
45641: ARRAY
45642: PUSH
45643: LD_INT 1
45645: ARRAY
45646: PPUSH
45647: LD_VAR 0 6
45651: PUSH
45652: LD_VAR 0 4
45656: ARRAY
45657: PUSH
45658: LD_INT 2
45660: ARRAY
45661: PPUSH
45662: CALL_OW 428
45666: PUSH
45667: LD_INT 0
45669: NONEQUAL
45670: OR
45671: IFFALSE 45693
// tmp := Delete ( tmp , i ) ;
45673: LD_ADDR_VAR 0 6
45677: PUSH
45678: LD_VAR 0 6
45682: PPUSH
45683: LD_VAR 0 4
45687: PPUSH
45688: CALL_OW 3
45692: ST_TO_ADDR
45693: GO 45593
45695: POP
45696: POP
// j := GetClosestHex ( unit , tmp ) ;
45697: LD_ADDR_VAR 0 5
45701: PUSH
45702: LD_VAR 0 1
45706: PPUSH
45707: LD_VAR 0 6
45711: PPUSH
45712: CALL 44997 0 2
45716: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45717: LD_VAR 0 1
45721: PPUSH
45722: LD_VAR 0 5
45726: PUSH
45727: LD_INT 1
45729: ARRAY
45730: PPUSH
45731: LD_VAR 0 5
45735: PUSH
45736: LD_INT 2
45738: ARRAY
45739: PPUSH
45740: CALL_OW 111
// end ;
45744: LD_VAR 0 3
45748: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45749: LD_INT 0
45751: PPUSH
45752: PPUSH
45753: PPUSH
// uc_side = 0 ;
45754: LD_ADDR_OWVAR 20
45758: PUSH
45759: LD_INT 0
45761: ST_TO_ADDR
// uc_nation = 0 ;
45762: LD_ADDR_OWVAR 21
45766: PUSH
45767: LD_INT 0
45769: ST_TO_ADDR
// InitHc ;
45770: CALL_OW 19
// InitVc ;
45774: CALL_OW 20
// if mastodonts then
45778: LD_VAR 0 6
45782: IFFALSE 45849
// for i = 1 to mastodonts do
45784: LD_ADDR_VAR 0 11
45788: PUSH
45789: DOUBLE
45790: LD_INT 1
45792: DEC
45793: ST_TO_ADDR
45794: LD_VAR 0 6
45798: PUSH
45799: FOR_TO
45800: IFFALSE 45847
// begin vc_chassis := 31 ;
45802: LD_ADDR_OWVAR 37
45806: PUSH
45807: LD_INT 31
45809: ST_TO_ADDR
// vc_control := control_rider ;
45810: LD_ADDR_OWVAR 38
45814: PUSH
45815: LD_INT 4
45817: ST_TO_ADDR
// animal := CreateVehicle ;
45818: LD_ADDR_VAR 0 12
45822: PUSH
45823: CALL_OW 45
45827: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
45828: LD_VAR 0 12
45832: PPUSH
45833: LD_VAR 0 8
45837: PPUSH
45838: LD_INT 0
45840: PPUSH
45841: CALL_OW 49
// end ;
45845: GO 45799
45847: POP
45848: POP
// if horses then
45849: LD_VAR 0 5
45853: IFFALSE 45920
// for i = 1 to horses do
45855: LD_ADDR_VAR 0 11
45859: PUSH
45860: DOUBLE
45861: LD_INT 1
45863: DEC
45864: ST_TO_ADDR
45865: LD_VAR 0 5
45869: PUSH
45870: FOR_TO
45871: IFFALSE 45918
// begin hc_class := 21 ;
45873: LD_ADDR_OWVAR 28
45877: PUSH
45878: LD_INT 21
45880: ST_TO_ADDR
// hc_gallery :=  ;
45881: LD_ADDR_OWVAR 33
45885: PUSH
45886: LD_STRING 
45888: ST_TO_ADDR
// animal := CreateHuman ;
45889: LD_ADDR_VAR 0 12
45893: PUSH
45894: CALL_OW 44
45898: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
45899: LD_VAR 0 12
45903: PPUSH
45904: LD_VAR 0 8
45908: PPUSH
45909: LD_INT 0
45911: PPUSH
45912: CALL_OW 49
// end ;
45916: GO 45870
45918: POP
45919: POP
// if birds then
45920: LD_VAR 0 1
45924: IFFALSE 45991
// for i = 1 to birds do
45926: LD_ADDR_VAR 0 11
45930: PUSH
45931: DOUBLE
45932: LD_INT 1
45934: DEC
45935: ST_TO_ADDR
45936: LD_VAR 0 1
45940: PUSH
45941: FOR_TO
45942: IFFALSE 45989
// begin hc_class = 18 ;
45944: LD_ADDR_OWVAR 28
45948: PUSH
45949: LD_INT 18
45951: ST_TO_ADDR
// hc_gallery =  ;
45952: LD_ADDR_OWVAR 33
45956: PUSH
45957: LD_STRING 
45959: ST_TO_ADDR
// animal := CreateHuman ;
45960: LD_ADDR_VAR 0 12
45964: PUSH
45965: CALL_OW 44
45969: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
45970: LD_VAR 0 12
45974: PPUSH
45975: LD_VAR 0 8
45979: PPUSH
45980: LD_INT 0
45982: PPUSH
45983: CALL_OW 49
// end ;
45987: GO 45941
45989: POP
45990: POP
// if tigers then
45991: LD_VAR 0 2
45995: IFFALSE 46079
// for i = 1 to tigers do
45997: LD_ADDR_VAR 0 11
46001: PUSH
46002: DOUBLE
46003: LD_INT 1
46005: DEC
46006: ST_TO_ADDR
46007: LD_VAR 0 2
46011: PUSH
46012: FOR_TO
46013: IFFALSE 46077
// begin hc_class = class_tiger ;
46015: LD_ADDR_OWVAR 28
46019: PUSH
46020: LD_INT 14
46022: ST_TO_ADDR
// hc_gallery =  ;
46023: LD_ADDR_OWVAR 33
46027: PUSH
46028: LD_STRING 
46030: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46031: LD_ADDR_OWVAR 35
46035: PUSH
46036: LD_INT 7
46038: NEG
46039: PPUSH
46040: LD_INT 7
46042: PPUSH
46043: CALL_OW 12
46047: ST_TO_ADDR
// animal := CreateHuman ;
46048: LD_ADDR_VAR 0 12
46052: PUSH
46053: CALL_OW 44
46057: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
46058: LD_VAR 0 12
46062: PPUSH
46063: LD_VAR 0 8
46067: PPUSH
46068: LD_INT 0
46070: PPUSH
46071: CALL_OW 49
// end ;
46075: GO 46012
46077: POP
46078: POP
// if apemans then
46079: LD_VAR 0 3
46083: IFFALSE 46206
// for i = 1 to apemans do
46085: LD_ADDR_VAR 0 11
46089: PUSH
46090: DOUBLE
46091: LD_INT 1
46093: DEC
46094: ST_TO_ADDR
46095: LD_VAR 0 3
46099: PUSH
46100: FOR_TO
46101: IFFALSE 46204
// begin hc_class = class_apeman ;
46103: LD_ADDR_OWVAR 28
46107: PUSH
46108: LD_INT 12
46110: ST_TO_ADDR
// hc_gallery =  ;
46111: LD_ADDR_OWVAR 33
46115: PUSH
46116: LD_STRING 
46118: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
46119: LD_ADDR_OWVAR 35
46123: PUSH
46124: LD_INT 5
46126: NEG
46127: PPUSH
46128: LD_INT 5
46130: PPUSH
46131: CALL_OW 12
46135: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46136: LD_ADDR_OWVAR 31
46140: PUSH
46141: LD_INT 1
46143: PPUSH
46144: LD_INT 3
46146: PPUSH
46147: CALL_OW 12
46151: PUSH
46152: LD_INT 1
46154: PPUSH
46155: LD_INT 3
46157: PPUSH
46158: CALL_OW 12
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: ST_TO_ADDR
// animal := CreateHuman ;
46175: LD_ADDR_VAR 0 12
46179: PUSH
46180: CALL_OW 44
46184: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
46185: LD_VAR 0 12
46189: PPUSH
46190: LD_VAR 0 8
46194: PPUSH
46195: LD_INT 0
46197: PPUSH
46198: CALL_OW 49
// end ;
46202: GO 46100
46204: POP
46205: POP
// if enchidnas then
46206: LD_VAR 0 4
46210: IFFALSE 46277
// for i = 1 to enchidnas do
46212: LD_ADDR_VAR 0 11
46216: PUSH
46217: DOUBLE
46218: LD_INT 1
46220: DEC
46221: ST_TO_ADDR
46222: LD_VAR 0 4
46226: PUSH
46227: FOR_TO
46228: IFFALSE 46275
// begin hc_class = 13 ;
46230: LD_ADDR_OWVAR 28
46234: PUSH
46235: LD_INT 13
46237: ST_TO_ADDR
// hc_gallery =  ;
46238: LD_ADDR_OWVAR 33
46242: PUSH
46243: LD_STRING 
46245: ST_TO_ADDR
// animal := CreateHuman ;
46246: LD_ADDR_VAR 0 12
46250: PUSH
46251: CALL_OW 44
46255: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
46256: LD_VAR 0 12
46260: PPUSH
46261: LD_VAR 0 8
46265: PPUSH
46266: LD_INT 0
46268: PPUSH
46269: CALL_OW 49
// end ;
46273: GO 46227
46275: POP
46276: POP
// if not wat_area then
46277: LD_VAR 0 9
46281: NOT
46282: IFFALSE 46286
// exit ;
46284: GO 46357
// if fishes then
46286: LD_VAR 0 7
46290: IFFALSE 46357
// for i = 1 to fishes do
46292: LD_ADDR_VAR 0 11
46296: PUSH
46297: DOUBLE
46298: LD_INT 1
46300: DEC
46301: ST_TO_ADDR
46302: LD_VAR 0 7
46306: PUSH
46307: FOR_TO
46308: IFFALSE 46355
// begin hc_class = 20 ;
46310: LD_ADDR_OWVAR 28
46314: PUSH
46315: LD_INT 20
46317: ST_TO_ADDR
// hc_gallery =  ;
46318: LD_ADDR_OWVAR 33
46322: PUSH
46323: LD_STRING 
46325: ST_TO_ADDR
// animal := CreateHuman ;
46326: LD_ADDR_VAR 0 12
46330: PUSH
46331: CALL_OW 44
46335: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
46336: LD_VAR 0 12
46340: PPUSH
46341: LD_VAR 0 9
46345: PPUSH
46346: LD_INT 0
46348: PPUSH
46349: CALL_OW 49
// end ;
46353: GO 46307
46355: POP
46356: POP
// end ;
46357: LD_VAR 0 10
46361: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
46362: LD_INT 0
46364: PPUSH
46365: PPUSH
46366: PPUSH
46367: PPUSH
46368: PPUSH
46369: PPUSH
46370: PPUSH
46371: PPUSH
46372: PPUSH
46373: PPUSH
46374: PPUSH
46375: PPUSH
46376: PPUSH
46377: PPUSH
46378: PPUSH
46379: PPUSH
46380: PPUSH
46381: PPUSH
46382: PPUSH
46383: PPUSH
46384: PPUSH
46385: PPUSH
46386: PPUSH
46387: PPUSH
46388: PPUSH
46389: PPUSH
46390: PPUSH
46391: PPUSH
// if not list then
46392: LD_VAR 0 1
46396: NOT
46397: IFFALSE 46401
// exit ;
46399: GO 49644
// base := list [ 1 ] ;
46401: LD_ADDR_VAR 0 3
46405: PUSH
46406: LD_VAR 0 1
46410: PUSH
46411: LD_INT 1
46413: ARRAY
46414: ST_TO_ADDR
// group := list [ 2 ] ;
46415: LD_ADDR_VAR 0 4
46419: PUSH
46420: LD_VAR 0 1
46424: PUSH
46425: LD_INT 2
46427: ARRAY
46428: ST_TO_ADDR
// path := list [ 3 ] ;
46429: LD_ADDR_VAR 0 5
46433: PUSH
46434: LD_VAR 0 1
46438: PUSH
46439: LD_INT 3
46441: ARRAY
46442: ST_TO_ADDR
// flags := list [ 4 ] ;
46443: LD_ADDR_VAR 0 6
46447: PUSH
46448: LD_VAR 0 1
46452: PUSH
46453: LD_INT 4
46455: ARRAY
46456: ST_TO_ADDR
// mined := [ ] ;
46457: LD_ADDR_VAR 0 27
46461: PUSH
46462: EMPTY
46463: ST_TO_ADDR
// bombed := [ ] ;
46464: LD_ADDR_VAR 0 28
46468: PUSH
46469: EMPTY
46470: ST_TO_ADDR
// if not group or not path then
46471: LD_VAR 0 4
46475: NOT
46476: PUSH
46477: LD_VAR 0 5
46481: NOT
46482: OR
46483: IFFALSE 46487
// exit ;
46485: GO 49644
// if flags then
46487: LD_VAR 0 6
46491: IFFALSE 46635
// begin f_ignore_area := flags [ 1 ] ;
46493: LD_ADDR_VAR 0 17
46497: PUSH
46498: LD_VAR 0 6
46502: PUSH
46503: LD_INT 1
46505: ARRAY
46506: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
46507: LD_ADDR_VAR 0 18
46511: PUSH
46512: LD_VAR 0 6
46516: PUSH
46517: LD_INT 2
46519: ARRAY
46520: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
46521: LD_ADDR_VAR 0 19
46525: PUSH
46526: LD_VAR 0 6
46530: PUSH
46531: LD_INT 3
46533: ARRAY
46534: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
46535: LD_ADDR_VAR 0 20
46539: PUSH
46540: LD_VAR 0 6
46544: PUSH
46545: LD_INT 4
46547: ARRAY
46548: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
46549: LD_ADDR_VAR 0 21
46553: PUSH
46554: LD_VAR 0 6
46558: PUSH
46559: LD_INT 5
46561: ARRAY
46562: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
46563: LD_ADDR_VAR 0 22
46567: PUSH
46568: LD_VAR 0 6
46572: PUSH
46573: LD_INT 6
46575: ARRAY
46576: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
46577: LD_ADDR_VAR 0 23
46581: PUSH
46582: LD_VAR 0 6
46586: PUSH
46587: LD_INT 7
46589: ARRAY
46590: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
46591: LD_ADDR_VAR 0 24
46595: PUSH
46596: LD_VAR 0 6
46600: PUSH
46601: LD_INT 8
46603: ARRAY
46604: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
46605: LD_ADDR_VAR 0 25
46609: PUSH
46610: LD_VAR 0 6
46614: PUSH
46615: LD_INT 9
46617: ARRAY
46618: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
46619: LD_ADDR_VAR 0 26
46623: PUSH
46624: LD_VAR 0 6
46628: PUSH
46629: LD_INT 10
46631: ARRAY
46632: ST_TO_ADDR
// end else
46633: GO 46715
// begin f_ignore_area := false ;
46635: LD_ADDR_VAR 0 17
46639: PUSH
46640: LD_INT 0
46642: ST_TO_ADDR
// f_capture := false ;
46643: LD_ADDR_VAR 0 18
46647: PUSH
46648: LD_INT 0
46650: ST_TO_ADDR
// f_ignore_civ := false ;
46651: LD_ADDR_VAR 0 19
46655: PUSH
46656: LD_INT 0
46658: ST_TO_ADDR
// f_murder := false ;
46659: LD_ADDR_VAR 0 20
46663: PUSH
46664: LD_INT 0
46666: ST_TO_ADDR
// f_mines := false ;
46667: LD_ADDR_VAR 0 21
46671: PUSH
46672: LD_INT 0
46674: ST_TO_ADDR
// f_repair := false ;
46675: LD_ADDR_VAR 0 22
46679: PUSH
46680: LD_INT 0
46682: ST_TO_ADDR
// f_heal := false ;
46683: LD_ADDR_VAR 0 23
46687: PUSH
46688: LD_INT 0
46690: ST_TO_ADDR
// f_spacetime := false ;
46691: LD_ADDR_VAR 0 24
46695: PUSH
46696: LD_INT 0
46698: ST_TO_ADDR
// f_attack_depot := false ;
46699: LD_ADDR_VAR 0 25
46703: PUSH
46704: LD_INT 0
46706: ST_TO_ADDR
// f_crawl := false ;
46707: LD_ADDR_VAR 0 26
46711: PUSH
46712: LD_INT 0
46714: ST_TO_ADDR
// end ; units_path := [ ] ;
46715: LD_ADDR_VAR 0 16
46719: PUSH
46720: EMPTY
46721: ST_TO_ADDR
// for i = 1 to group do
46722: LD_ADDR_VAR 0 7
46726: PUSH
46727: DOUBLE
46728: LD_INT 1
46730: DEC
46731: ST_TO_ADDR
46732: LD_VAR 0 4
46736: PUSH
46737: FOR_TO
46738: IFFALSE 46767
// begin units_path := Replace ( units_path , i , path ) ;
46740: LD_ADDR_VAR 0 16
46744: PUSH
46745: LD_VAR 0 16
46749: PPUSH
46750: LD_VAR 0 7
46754: PPUSH
46755: LD_VAR 0 5
46759: PPUSH
46760: CALL_OW 1
46764: ST_TO_ADDR
// end ;
46765: GO 46737
46767: POP
46768: POP
// repeat for i = group downto 1 do
46769: LD_ADDR_VAR 0 7
46773: PUSH
46774: DOUBLE
46775: LD_VAR 0 4
46779: INC
46780: ST_TO_ADDR
46781: LD_INT 1
46783: PUSH
46784: FOR_DOWNTO
46785: IFFALSE 49626
// begin wait ( 0 0$1 ) ;
46787: LD_INT 35
46789: PPUSH
46790: CALL_OW 67
// tmp := [ ] ;
46794: LD_ADDR_VAR 0 14
46798: PUSH
46799: EMPTY
46800: ST_TO_ADDR
// attacking := false ;
46801: LD_ADDR_VAR 0 29
46805: PUSH
46806: LD_INT 0
46808: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
46809: LD_VAR 0 4
46813: PUSH
46814: LD_VAR 0 7
46818: ARRAY
46819: PPUSH
46820: CALL_OW 301
46824: PUSH
46825: LD_VAR 0 4
46829: PUSH
46830: LD_VAR 0 7
46834: ARRAY
46835: NOT
46836: OR
46837: IFFALSE 46881
// begin group := Delete ( group , i ) ;
46839: LD_ADDR_VAR 0 4
46843: PUSH
46844: LD_VAR 0 4
46848: PPUSH
46849: LD_VAR 0 7
46853: PPUSH
46854: CALL_OW 3
46858: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
46859: LD_ADDR_VAR 0 16
46863: PUSH
46864: LD_VAR 0 16
46868: PPUSH
46869: LD_VAR 0 7
46873: PPUSH
46874: CALL_OW 3
46878: ST_TO_ADDR
// continue ;
46879: GO 46784
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
46881: LD_VAR 0 4
46885: PUSH
46886: LD_VAR 0 7
46890: ARRAY
46891: PPUSH
46892: LD_INT 10
46894: PPUSH
46895: CALL 44849 0 2
46899: NOT
46900: PUSH
46901: LD_VAR 0 16
46905: PUSH
46906: LD_VAR 0 7
46910: ARRAY
46911: PUSH
46912: EMPTY
46913: EQUAL
46914: NOT
46915: AND
46916: IFFALSE 47182
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
46918: LD_VAR 0 4
46922: PUSH
46923: LD_VAR 0 7
46927: ARRAY
46928: PPUSH
46929: CALL_OW 262
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: IN
46944: IFFALSE 46985
// if GetFuel ( group [ i ] ) < 10 then
46946: LD_VAR 0 4
46950: PUSH
46951: LD_VAR 0 7
46955: ARRAY
46956: PPUSH
46957: CALL_OW 261
46961: PUSH
46962: LD_INT 10
46964: LESS
46965: IFFALSE 46985
// SetFuel ( group [ i ] , 12 ) ;
46967: LD_VAR 0 4
46971: PUSH
46972: LD_VAR 0 7
46976: ARRAY
46977: PPUSH
46978: LD_INT 12
46980: PPUSH
46981: CALL_OW 240
// if units_path [ i ] then
46985: LD_VAR 0 16
46989: PUSH
46990: LD_VAR 0 7
46994: ARRAY
46995: IFFALSE 47180
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
46997: LD_VAR 0 4
47001: PUSH
47002: LD_VAR 0 7
47006: ARRAY
47007: PPUSH
47008: LD_VAR 0 16
47012: PUSH
47013: LD_VAR 0 7
47017: ARRAY
47018: PUSH
47019: LD_INT 1
47021: ARRAY
47022: PUSH
47023: LD_INT 1
47025: ARRAY
47026: PPUSH
47027: LD_VAR 0 16
47031: PUSH
47032: LD_VAR 0 7
47036: ARRAY
47037: PUSH
47038: LD_INT 1
47040: ARRAY
47041: PUSH
47042: LD_INT 2
47044: ARRAY
47045: PPUSH
47046: CALL_OW 297
47050: PUSH
47051: LD_INT 6
47053: GREATER
47054: IFFALSE 47129
// begin if not HasTask ( group [ i ] ) then
47056: LD_VAR 0 4
47060: PUSH
47061: LD_VAR 0 7
47065: ARRAY
47066: PPUSH
47067: CALL_OW 314
47071: NOT
47072: IFFALSE 47127
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
47074: LD_VAR 0 4
47078: PUSH
47079: LD_VAR 0 7
47083: ARRAY
47084: PPUSH
47085: LD_VAR 0 16
47089: PUSH
47090: LD_VAR 0 7
47094: ARRAY
47095: PUSH
47096: LD_INT 1
47098: ARRAY
47099: PUSH
47100: LD_INT 1
47102: ARRAY
47103: PPUSH
47104: LD_VAR 0 16
47108: PUSH
47109: LD_VAR 0 7
47113: ARRAY
47114: PUSH
47115: LD_INT 1
47117: ARRAY
47118: PUSH
47119: LD_INT 2
47121: ARRAY
47122: PPUSH
47123: CALL_OW 114
// end else
47127: GO 47180
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
47129: LD_ADDR_VAR 0 15
47133: PUSH
47134: LD_VAR 0 16
47138: PUSH
47139: LD_VAR 0 7
47143: ARRAY
47144: PPUSH
47145: LD_INT 1
47147: PPUSH
47148: CALL_OW 3
47152: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
47153: LD_ADDR_VAR 0 16
47157: PUSH
47158: LD_VAR 0 16
47162: PPUSH
47163: LD_VAR 0 7
47167: PPUSH
47168: LD_VAR 0 15
47172: PPUSH
47173: CALL_OW 1
47177: ST_TO_ADDR
// continue ;
47178: GO 46784
// end ; end ; end else
47180: GO 49624
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
47182: LD_ADDR_VAR 0 14
47186: PUSH
47187: LD_INT 81
47189: PUSH
47190: LD_VAR 0 4
47194: PUSH
47195: LD_VAR 0 7
47199: ARRAY
47200: PPUSH
47201: CALL_OW 255
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PPUSH
47210: CALL_OW 69
47214: ST_TO_ADDR
// if not tmp then
47215: LD_VAR 0 14
47219: NOT
47220: IFFALSE 47224
// continue ;
47222: GO 46784
// if f_ignore_area then
47224: LD_VAR 0 17
47228: IFFALSE 47316
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
47230: LD_ADDR_VAR 0 15
47234: PUSH
47235: LD_VAR 0 14
47239: PPUSH
47240: LD_INT 3
47242: PUSH
47243: LD_INT 92
47245: PUSH
47246: LD_VAR 0 17
47250: PUSH
47251: LD_INT 1
47253: ARRAY
47254: PUSH
47255: LD_VAR 0 17
47259: PUSH
47260: LD_INT 2
47262: ARRAY
47263: PUSH
47264: LD_VAR 0 17
47268: PUSH
47269: LD_INT 3
47271: ARRAY
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PPUSH
47283: CALL_OW 72
47287: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
47288: LD_VAR 0 14
47292: PUSH
47293: LD_VAR 0 15
47297: DIFF
47298: IFFALSE 47316
// tmp := tmp diff tmp2 ;
47300: LD_ADDR_VAR 0 14
47304: PUSH
47305: LD_VAR 0 14
47309: PUSH
47310: LD_VAR 0 15
47314: DIFF
47315: ST_TO_ADDR
// end ; if not f_murder then
47316: LD_VAR 0 20
47320: NOT
47321: IFFALSE 47379
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
47323: LD_ADDR_VAR 0 15
47327: PUSH
47328: LD_VAR 0 14
47332: PPUSH
47333: LD_INT 3
47335: PUSH
47336: LD_INT 50
47338: PUSH
47339: EMPTY
47340: LIST
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PPUSH
47346: CALL_OW 72
47350: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
47351: LD_VAR 0 14
47355: PUSH
47356: LD_VAR 0 15
47360: DIFF
47361: IFFALSE 47379
// tmp := tmp diff tmp2 ;
47363: LD_ADDR_VAR 0 14
47367: PUSH
47368: LD_VAR 0 14
47372: PUSH
47373: LD_VAR 0 15
47377: DIFF
47378: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
47379: LD_ADDR_VAR 0 14
47383: PUSH
47384: LD_VAR 0 4
47388: PUSH
47389: LD_VAR 0 7
47393: ARRAY
47394: PPUSH
47395: LD_VAR 0 14
47399: PPUSH
47400: LD_INT 1
47402: PPUSH
47403: LD_INT 1
47405: PPUSH
47406: CALL 19055 0 4
47410: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
47411: LD_VAR 0 4
47415: PUSH
47416: LD_VAR 0 7
47420: ARRAY
47421: PPUSH
47422: CALL_OW 257
47426: PUSH
47427: LD_INT 1
47429: EQUAL
47430: IFFALSE 47878
// begin if WantPlant ( group [ i ] ) then
47432: LD_VAR 0 4
47436: PUSH
47437: LD_VAR 0 7
47441: ARRAY
47442: PPUSH
47443: CALL 18523 0 1
47447: IFFALSE 47451
// continue ;
47449: GO 46784
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
47451: LD_VAR 0 18
47455: PUSH
47456: LD_VAR 0 4
47460: PUSH
47461: LD_VAR 0 7
47465: ARRAY
47466: PPUSH
47467: CALL_OW 310
47471: NOT
47472: AND
47473: PUSH
47474: LD_VAR 0 14
47478: PUSH
47479: LD_INT 1
47481: ARRAY
47482: PUSH
47483: LD_VAR 0 14
47487: PPUSH
47488: LD_INT 21
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 58
47500: PUSH
47501: EMPTY
47502: LIST
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PPUSH
47508: CALL_OW 72
47512: IN
47513: AND
47514: IFFALSE 47550
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
47516: LD_VAR 0 4
47520: PUSH
47521: LD_VAR 0 7
47525: ARRAY
47526: PPUSH
47527: LD_VAR 0 14
47531: PUSH
47532: LD_INT 1
47534: ARRAY
47535: PPUSH
47536: CALL_OW 120
// attacking := true ;
47540: LD_ADDR_VAR 0 29
47544: PUSH
47545: LD_INT 1
47547: ST_TO_ADDR
// continue ;
47548: GO 46784
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
47550: LD_VAR 0 26
47554: PUSH
47555: LD_VAR 0 4
47559: PUSH
47560: LD_VAR 0 7
47564: ARRAY
47565: PPUSH
47566: CALL_OW 257
47570: PUSH
47571: LD_INT 1
47573: EQUAL
47574: AND
47575: PUSH
47576: LD_VAR 0 4
47580: PUSH
47581: LD_VAR 0 7
47585: ARRAY
47586: PPUSH
47587: CALL_OW 256
47591: PUSH
47592: LD_INT 800
47594: LESS
47595: AND
47596: PUSH
47597: LD_VAR 0 4
47601: PUSH
47602: LD_VAR 0 7
47606: ARRAY
47607: PPUSH
47608: CALL_OW 318
47612: NOT
47613: AND
47614: IFFALSE 47631
// ComCrawl ( group [ i ] ) ;
47616: LD_VAR 0 4
47620: PUSH
47621: LD_VAR 0 7
47625: ARRAY
47626: PPUSH
47627: CALL_OW 137
// if f_mines then
47631: LD_VAR 0 21
47635: IFFALSE 47878
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
47637: LD_VAR 0 14
47641: PUSH
47642: LD_INT 1
47644: ARRAY
47645: PPUSH
47646: CALL_OW 247
47650: PUSH
47651: LD_INT 3
47653: EQUAL
47654: PUSH
47655: LD_VAR 0 14
47659: PUSH
47660: LD_INT 1
47662: ARRAY
47663: PUSH
47664: LD_VAR 0 27
47668: IN
47669: NOT
47670: AND
47671: IFFALSE 47878
// begin x := GetX ( tmp [ 1 ] ) ;
47673: LD_ADDR_VAR 0 10
47677: PUSH
47678: LD_VAR 0 14
47682: PUSH
47683: LD_INT 1
47685: ARRAY
47686: PPUSH
47687: CALL_OW 250
47691: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
47692: LD_ADDR_VAR 0 11
47696: PUSH
47697: LD_VAR 0 14
47701: PUSH
47702: LD_INT 1
47704: ARRAY
47705: PPUSH
47706: CALL_OW 251
47710: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
47711: LD_ADDR_VAR 0 12
47715: PUSH
47716: LD_VAR 0 4
47720: PUSH
47721: LD_VAR 0 7
47725: ARRAY
47726: PPUSH
47727: CALL 44934 0 1
47731: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
47732: LD_VAR 0 4
47736: PUSH
47737: LD_VAR 0 7
47741: ARRAY
47742: PPUSH
47743: LD_VAR 0 10
47747: PPUSH
47748: LD_VAR 0 11
47752: PPUSH
47753: LD_VAR 0 14
47757: PUSH
47758: LD_INT 1
47760: ARRAY
47761: PPUSH
47762: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
47766: LD_VAR 0 4
47770: PUSH
47771: LD_VAR 0 7
47775: ARRAY
47776: PPUSH
47777: LD_VAR 0 10
47781: PPUSH
47782: LD_VAR 0 12
47786: PPUSH
47787: LD_INT 7
47789: PPUSH
47790: CALL_OW 272
47794: PPUSH
47795: LD_VAR 0 11
47799: PPUSH
47800: LD_VAR 0 12
47804: PPUSH
47805: LD_INT 7
47807: PPUSH
47808: CALL_OW 273
47812: PPUSH
47813: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
47817: LD_VAR 0 4
47821: PUSH
47822: LD_VAR 0 7
47826: ARRAY
47827: PPUSH
47828: LD_INT 71
47830: PPUSH
47831: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
47835: LD_ADDR_VAR 0 27
47839: PUSH
47840: LD_VAR 0 27
47844: PPUSH
47845: LD_VAR 0 27
47849: PUSH
47850: LD_INT 1
47852: PLUS
47853: PPUSH
47854: LD_VAR 0 14
47858: PUSH
47859: LD_INT 1
47861: ARRAY
47862: PPUSH
47863: CALL_OW 1
47867: ST_TO_ADDR
// attacking := true ;
47868: LD_ADDR_VAR 0 29
47872: PUSH
47873: LD_INT 1
47875: ST_TO_ADDR
// continue ;
47876: GO 46784
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
47878: LD_VAR 0 4
47882: PUSH
47883: LD_VAR 0 7
47887: ARRAY
47888: PPUSH
47889: CALL_OW 257
47893: PUSH
47894: LD_INT 17
47896: EQUAL
47897: PUSH
47898: LD_VAR 0 4
47902: PUSH
47903: LD_VAR 0 7
47907: ARRAY
47908: PPUSH
47909: CALL_OW 110
47913: PUSH
47914: LD_INT 71
47916: EQUAL
47917: NOT
47918: AND
47919: IFFALSE 48065
// begin attacking := false ;
47921: LD_ADDR_VAR 0 29
47925: PUSH
47926: LD_INT 0
47928: ST_TO_ADDR
// k := 5 ;
47929: LD_ADDR_VAR 0 9
47933: PUSH
47934: LD_INT 5
47936: ST_TO_ADDR
// if tmp < k then
47937: LD_VAR 0 14
47941: PUSH
47942: LD_VAR 0 9
47946: LESS
47947: IFFALSE 47959
// k := tmp ;
47949: LD_ADDR_VAR 0 9
47953: PUSH
47954: LD_VAR 0 14
47958: ST_TO_ADDR
// for j = 1 to k do
47959: LD_ADDR_VAR 0 8
47963: PUSH
47964: DOUBLE
47965: LD_INT 1
47967: DEC
47968: ST_TO_ADDR
47969: LD_VAR 0 9
47973: PUSH
47974: FOR_TO
47975: IFFALSE 48063
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
47977: LD_VAR 0 14
47981: PUSH
47982: LD_VAR 0 8
47986: ARRAY
47987: PUSH
47988: LD_VAR 0 14
47992: PPUSH
47993: LD_INT 58
47995: PUSH
47996: EMPTY
47997: LIST
47998: PPUSH
47999: CALL_OW 72
48003: IN
48004: NOT
48005: IFFALSE 48061
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
48007: LD_VAR 0 4
48011: PUSH
48012: LD_VAR 0 7
48016: ARRAY
48017: PPUSH
48018: LD_VAR 0 14
48022: PUSH
48023: LD_VAR 0 8
48027: ARRAY
48028: PPUSH
48029: CALL_OW 115
// attacking := true ;
48033: LD_ADDR_VAR 0 29
48037: PUSH
48038: LD_INT 1
48040: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
48041: LD_VAR 0 4
48045: PUSH
48046: LD_VAR 0 7
48050: ARRAY
48051: PPUSH
48052: LD_INT 71
48054: PPUSH
48055: CALL_OW 109
// continue ;
48059: GO 47974
// end ; end ;
48061: GO 47974
48063: POP
48064: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
48065: LD_VAR 0 4
48069: PUSH
48070: LD_VAR 0 7
48074: ARRAY
48075: PPUSH
48076: CALL_OW 257
48080: PUSH
48081: LD_INT 8
48083: EQUAL
48084: PUSH
48085: LD_VAR 0 4
48089: PUSH
48090: LD_VAR 0 7
48094: ARRAY
48095: PPUSH
48096: CALL_OW 264
48100: PUSH
48101: LD_INT 28
48103: PUSH
48104: LD_INT 45
48106: PUSH
48107: LD_INT 7
48109: PUSH
48110: LD_INT 47
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: IN
48119: OR
48120: IFFALSE 48350
// begin attacking := false ;
48122: LD_ADDR_VAR 0 29
48126: PUSH
48127: LD_INT 0
48129: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
48130: LD_VAR 0 14
48134: PUSH
48135: LD_INT 1
48137: ARRAY
48138: PPUSH
48139: CALL_OW 266
48143: PUSH
48144: LD_INT 32
48146: PUSH
48147: LD_INT 31
48149: PUSH
48150: LD_INT 33
48152: PUSH
48153: LD_INT 4
48155: PUSH
48156: LD_INT 5
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: IN
48166: IFFALSE 48350
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
48168: LD_ADDR_VAR 0 9
48172: PUSH
48173: LD_VAR 0 14
48177: PUSH
48178: LD_INT 1
48180: ARRAY
48181: PPUSH
48182: CALL_OW 266
48186: PPUSH
48187: LD_VAR 0 14
48191: PUSH
48192: LD_INT 1
48194: ARRAY
48195: PPUSH
48196: CALL_OW 250
48200: PPUSH
48201: LD_VAR 0 14
48205: PUSH
48206: LD_INT 1
48208: ARRAY
48209: PPUSH
48210: CALL_OW 251
48214: PPUSH
48215: LD_VAR 0 14
48219: PUSH
48220: LD_INT 1
48222: ARRAY
48223: PPUSH
48224: CALL_OW 254
48228: PPUSH
48229: LD_VAR 0 14
48233: PUSH
48234: LD_INT 1
48236: ARRAY
48237: PPUSH
48238: CALL_OW 248
48242: PPUSH
48243: LD_INT 0
48245: PPUSH
48246: CALL 26310 0 6
48250: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
48251: LD_ADDR_VAR 0 8
48255: PUSH
48256: LD_VAR 0 4
48260: PUSH
48261: LD_VAR 0 7
48265: ARRAY
48266: PPUSH
48267: LD_VAR 0 9
48271: PPUSH
48272: CALL 44997 0 2
48276: ST_TO_ADDR
// if j then
48277: LD_VAR 0 8
48281: IFFALSE 48350
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48283: LD_VAR 0 8
48287: PUSH
48288: LD_INT 1
48290: ARRAY
48291: PPUSH
48292: LD_VAR 0 8
48296: PUSH
48297: LD_INT 2
48299: ARRAY
48300: PPUSH
48301: CALL_OW 488
48305: IFFALSE 48350
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
48307: LD_VAR 0 4
48311: PUSH
48312: LD_VAR 0 7
48316: ARRAY
48317: PPUSH
48318: LD_VAR 0 8
48322: PUSH
48323: LD_INT 1
48325: ARRAY
48326: PPUSH
48327: LD_VAR 0 8
48331: PUSH
48332: LD_INT 2
48334: ARRAY
48335: PPUSH
48336: CALL_OW 116
// attacking := true ;
48340: LD_ADDR_VAR 0 29
48344: PUSH
48345: LD_INT 1
48347: ST_TO_ADDR
// continue ;
48348: GO 46784
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
48350: LD_VAR 0 4
48354: PUSH
48355: LD_VAR 0 7
48359: ARRAY
48360: PPUSH
48361: CALL_OW 265
48365: PUSH
48366: LD_INT 11
48368: EQUAL
48369: IFFALSE 48647
// begin k := 10 ;
48371: LD_ADDR_VAR 0 9
48375: PUSH
48376: LD_INT 10
48378: ST_TO_ADDR
// x := 0 ;
48379: LD_ADDR_VAR 0 10
48383: PUSH
48384: LD_INT 0
48386: ST_TO_ADDR
// if tmp < k then
48387: LD_VAR 0 14
48391: PUSH
48392: LD_VAR 0 9
48396: LESS
48397: IFFALSE 48409
// k := tmp ;
48399: LD_ADDR_VAR 0 9
48403: PUSH
48404: LD_VAR 0 14
48408: ST_TO_ADDR
// for j = k downto 1 do
48409: LD_ADDR_VAR 0 8
48413: PUSH
48414: DOUBLE
48415: LD_VAR 0 9
48419: INC
48420: ST_TO_ADDR
48421: LD_INT 1
48423: PUSH
48424: FOR_DOWNTO
48425: IFFALSE 48500
// begin if GetType ( tmp [ j ] ) = unit_human then
48427: LD_VAR 0 14
48431: PUSH
48432: LD_VAR 0 8
48436: ARRAY
48437: PPUSH
48438: CALL_OW 247
48442: PUSH
48443: LD_INT 1
48445: EQUAL
48446: IFFALSE 48498
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
48448: LD_VAR 0 4
48452: PUSH
48453: LD_VAR 0 7
48457: ARRAY
48458: PPUSH
48459: LD_VAR 0 14
48463: PUSH
48464: LD_VAR 0 8
48468: ARRAY
48469: PPUSH
48470: CALL 45268 0 2
// x := tmp [ j ] ;
48474: LD_ADDR_VAR 0 10
48478: PUSH
48479: LD_VAR 0 14
48483: PUSH
48484: LD_VAR 0 8
48488: ARRAY
48489: ST_TO_ADDR
// attacking := true ;
48490: LD_ADDR_VAR 0 29
48494: PUSH
48495: LD_INT 1
48497: ST_TO_ADDR
// end ; end ;
48498: GO 48424
48500: POP
48501: POP
// if not x then
48502: LD_VAR 0 10
48506: NOT
48507: IFFALSE 48647
// begin attacking := true ;
48509: LD_ADDR_VAR 0 29
48513: PUSH
48514: LD_INT 1
48516: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
48517: LD_VAR 0 4
48521: PUSH
48522: LD_VAR 0 7
48526: ARRAY
48527: PPUSH
48528: CALL_OW 250
48532: PPUSH
48533: LD_VAR 0 4
48537: PUSH
48538: LD_VAR 0 7
48542: ARRAY
48543: PPUSH
48544: CALL_OW 251
48548: PPUSH
48549: CALL_OW 546
48553: PUSH
48554: LD_INT 2
48556: ARRAY
48557: PUSH
48558: LD_VAR 0 14
48562: PUSH
48563: LD_INT 1
48565: ARRAY
48566: PPUSH
48567: CALL_OW 250
48571: PPUSH
48572: LD_VAR 0 14
48576: PUSH
48577: LD_INT 1
48579: ARRAY
48580: PPUSH
48581: CALL_OW 251
48585: PPUSH
48586: CALL_OW 546
48590: PUSH
48591: LD_INT 2
48593: ARRAY
48594: EQUAL
48595: IFFALSE 48623
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
48597: LD_VAR 0 4
48601: PUSH
48602: LD_VAR 0 7
48606: ARRAY
48607: PPUSH
48608: LD_VAR 0 14
48612: PUSH
48613: LD_INT 1
48615: ARRAY
48616: PPUSH
48617: CALL 45268 0 2
48621: GO 48647
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
48623: LD_VAR 0 4
48627: PUSH
48628: LD_VAR 0 7
48632: ARRAY
48633: PPUSH
48634: LD_VAR 0 14
48638: PUSH
48639: LD_INT 1
48641: ARRAY
48642: PPUSH
48643: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
48647: LD_VAR 0 4
48651: PUSH
48652: LD_VAR 0 7
48656: ARRAY
48657: PPUSH
48658: CALL_OW 264
48662: PUSH
48663: LD_INT 29
48665: EQUAL
48666: IFFALSE 49032
// begin if WantsToAttack ( group [ i ] ) in bombed then
48668: LD_VAR 0 4
48672: PUSH
48673: LD_VAR 0 7
48677: ARRAY
48678: PPUSH
48679: CALL_OW 319
48683: PUSH
48684: LD_VAR 0 28
48688: IN
48689: IFFALSE 48693
// continue ;
48691: GO 46784
// k := 8 ;
48693: LD_ADDR_VAR 0 9
48697: PUSH
48698: LD_INT 8
48700: ST_TO_ADDR
// x := 0 ;
48701: LD_ADDR_VAR 0 10
48705: PUSH
48706: LD_INT 0
48708: ST_TO_ADDR
// if tmp < k then
48709: LD_VAR 0 14
48713: PUSH
48714: LD_VAR 0 9
48718: LESS
48719: IFFALSE 48731
// k := tmp ;
48721: LD_ADDR_VAR 0 9
48725: PUSH
48726: LD_VAR 0 14
48730: ST_TO_ADDR
// for j = 1 to k do
48731: LD_ADDR_VAR 0 8
48735: PUSH
48736: DOUBLE
48737: LD_INT 1
48739: DEC
48740: ST_TO_ADDR
48741: LD_VAR 0 9
48745: PUSH
48746: FOR_TO
48747: IFFALSE 48879
// begin if GetType ( tmp [ j ] ) = unit_building then
48749: LD_VAR 0 14
48753: PUSH
48754: LD_VAR 0 8
48758: ARRAY
48759: PPUSH
48760: CALL_OW 247
48764: PUSH
48765: LD_INT 3
48767: EQUAL
48768: IFFALSE 48877
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
48770: LD_VAR 0 14
48774: PUSH
48775: LD_VAR 0 8
48779: ARRAY
48780: PUSH
48781: LD_VAR 0 28
48785: IN
48786: NOT
48787: PUSH
48788: LD_VAR 0 14
48792: PUSH
48793: LD_VAR 0 8
48797: ARRAY
48798: PPUSH
48799: CALL_OW 313
48803: AND
48804: IFFALSE 48877
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
48806: LD_VAR 0 4
48810: PUSH
48811: LD_VAR 0 7
48815: ARRAY
48816: PPUSH
48817: LD_VAR 0 14
48821: PUSH
48822: LD_VAR 0 8
48826: ARRAY
48827: PPUSH
48828: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
48832: LD_ADDR_VAR 0 28
48836: PUSH
48837: LD_VAR 0 28
48841: PPUSH
48842: LD_VAR 0 28
48846: PUSH
48847: LD_INT 1
48849: PLUS
48850: PPUSH
48851: LD_VAR 0 14
48855: PUSH
48856: LD_VAR 0 8
48860: ARRAY
48861: PPUSH
48862: CALL_OW 1
48866: ST_TO_ADDR
// attacking := true ;
48867: LD_ADDR_VAR 0 29
48871: PUSH
48872: LD_INT 1
48874: ST_TO_ADDR
// break ;
48875: GO 48879
// end ; end ;
48877: GO 48746
48879: POP
48880: POP
// if not attacking and f_attack_depot then
48881: LD_VAR 0 29
48885: NOT
48886: PUSH
48887: LD_VAR 0 25
48891: AND
48892: IFFALSE 48987
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
48894: LD_ADDR_VAR 0 13
48898: PUSH
48899: LD_VAR 0 14
48903: PPUSH
48904: LD_INT 2
48906: PUSH
48907: LD_INT 30
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 30
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: LIST
48931: PPUSH
48932: CALL_OW 72
48936: ST_TO_ADDR
// if z then
48937: LD_VAR 0 13
48941: IFFALSE 48987
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
48943: LD_VAR 0 4
48947: PUSH
48948: LD_VAR 0 7
48952: ARRAY
48953: PPUSH
48954: LD_VAR 0 13
48958: PPUSH
48959: LD_VAR 0 4
48963: PUSH
48964: LD_VAR 0 7
48968: ARRAY
48969: PPUSH
48970: CALL_OW 74
48974: PPUSH
48975: CALL_OW 115
// attacking := true ;
48979: LD_ADDR_VAR 0 29
48983: PUSH
48984: LD_INT 1
48986: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
48987: LD_VAR 0 4
48991: PUSH
48992: LD_VAR 0 7
48996: ARRAY
48997: PPUSH
48998: CALL_OW 256
49002: PUSH
49003: LD_INT 500
49005: LESS
49006: IFFALSE 49032
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49008: LD_VAR 0 4
49012: PUSH
49013: LD_VAR 0 7
49017: ARRAY
49018: PPUSH
49019: LD_VAR 0 14
49023: PUSH
49024: LD_INT 1
49026: ARRAY
49027: PPUSH
49028: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49032: LD_VAR 0 4
49036: PUSH
49037: LD_VAR 0 7
49041: ARRAY
49042: PPUSH
49043: CALL_OW 256
49047: PUSH
49048: LD_INT 250
49050: LESS
49051: PUSH
49052: LD_VAR 0 4
49056: PUSH
49057: LD_VAR 0 7
49061: ARRAY
49062: PUSH
49063: LD_INT 21
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 23
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PPUSH
49087: CALL_OW 69
49091: IN
49092: AND
49093: IFFALSE 49218
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
49095: LD_ADDR_VAR 0 9
49099: PUSH
49100: LD_OWVAR 3
49104: PUSH
49105: LD_VAR 0 4
49109: PUSH
49110: LD_VAR 0 7
49114: ARRAY
49115: DIFF
49116: PPUSH
49117: LD_VAR 0 4
49121: PUSH
49122: LD_VAR 0 7
49126: ARRAY
49127: PPUSH
49128: CALL_OW 74
49132: ST_TO_ADDR
// if not k then
49133: LD_VAR 0 9
49137: NOT
49138: IFFALSE 49142
// continue ;
49140: GO 46784
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
49142: LD_VAR 0 9
49146: PUSH
49147: LD_INT 81
49149: PUSH
49150: LD_VAR 0 4
49154: PUSH
49155: LD_VAR 0 7
49159: ARRAY
49160: PPUSH
49161: CALL_OW 255
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PPUSH
49170: CALL_OW 69
49174: IN
49175: PUSH
49176: LD_VAR 0 9
49180: PPUSH
49181: LD_VAR 0 4
49185: PUSH
49186: LD_VAR 0 7
49190: ARRAY
49191: PPUSH
49192: CALL_OW 296
49196: PUSH
49197: LD_INT 5
49199: LESS
49200: AND
49201: IFFALSE 49218
// ComAutodestruct ( group [ i ] ) ;
49203: LD_VAR 0 4
49207: PUSH
49208: LD_VAR 0 7
49212: ARRAY
49213: PPUSH
49214: CALL 45166 0 1
// end ; if f_attack_depot then
49218: LD_VAR 0 25
49222: IFFALSE 49334
// begin k := 6 ;
49224: LD_ADDR_VAR 0 9
49228: PUSH
49229: LD_INT 6
49231: ST_TO_ADDR
// if tmp < k then
49232: LD_VAR 0 14
49236: PUSH
49237: LD_VAR 0 9
49241: LESS
49242: IFFALSE 49254
// k := tmp ;
49244: LD_ADDR_VAR 0 9
49248: PUSH
49249: LD_VAR 0 14
49253: ST_TO_ADDR
// for j = 1 to k do
49254: LD_ADDR_VAR 0 8
49258: PUSH
49259: DOUBLE
49260: LD_INT 1
49262: DEC
49263: ST_TO_ADDR
49264: LD_VAR 0 9
49268: PUSH
49269: FOR_TO
49270: IFFALSE 49332
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
49272: LD_VAR 0 8
49276: PPUSH
49277: CALL_OW 266
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: IN
49292: IFFALSE 49330
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49294: LD_VAR 0 4
49298: PUSH
49299: LD_VAR 0 7
49303: ARRAY
49304: PPUSH
49305: LD_VAR 0 14
49309: PUSH
49310: LD_VAR 0 8
49314: ARRAY
49315: PPUSH
49316: CALL_OW 115
// attacking := true ;
49320: LD_ADDR_VAR 0 29
49324: PUSH
49325: LD_INT 1
49327: ST_TO_ADDR
// break ;
49328: GO 49332
// end ;
49330: GO 49269
49332: POP
49333: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
49334: LD_VAR 0 4
49338: PUSH
49339: LD_VAR 0 7
49343: ARRAY
49344: PPUSH
49345: CALL_OW 302
49349: PUSH
49350: LD_VAR 0 29
49354: NOT
49355: AND
49356: IFFALSE 49624
// begin if GetTag ( group [ i ] ) = 71 then
49358: LD_VAR 0 4
49362: PUSH
49363: LD_VAR 0 7
49367: ARRAY
49368: PPUSH
49369: CALL_OW 110
49373: PUSH
49374: LD_INT 71
49376: EQUAL
49377: IFFALSE 49418
// begin if HasTask ( group [ i ] ) then
49379: LD_VAR 0 4
49383: PUSH
49384: LD_VAR 0 7
49388: ARRAY
49389: PPUSH
49390: CALL_OW 314
49394: IFFALSE 49400
// continue else
49396: GO 46784
49398: GO 49418
// SetTag ( group [ i ] , 0 ) ;
49400: LD_VAR 0 4
49404: PUSH
49405: LD_VAR 0 7
49409: ARRAY
49410: PPUSH
49411: LD_INT 0
49413: PPUSH
49414: CALL_OW 109
// end ; k := 8 ;
49418: LD_ADDR_VAR 0 9
49422: PUSH
49423: LD_INT 8
49425: ST_TO_ADDR
// x := 0 ;
49426: LD_ADDR_VAR 0 10
49430: PUSH
49431: LD_INT 0
49433: ST_TO_ADDR
// if tmp < k then
49434: LD_VAR 0 14
49438: PUSH
49439: LD_VAR 0 9
49443: LESS
49444: IFFALSE 49456
// k := tmp ;
49446: LD_ADDR_VAR 0 9
49450: PUSH
49451: LD_VAR 0 14
49455: ST_TO_ADDR
// for j = 1 to k do
49456: LD_ADDR_VAR 0 8
49460: PUSH
49461: DOUBLE
49462: LD_INT 1
49464: DEC
49465: ST_TO_ADDR
49466: LD_VAR 0 9
49470: PUSH
49471: FOR_TO
49472: IFFALSE 49570
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
49474: LD_VAR 0 14
49478: PUSH
49479: LD_VAR 0 8
49483: ARRAY
49484: PPUSH
49485: CALL_OW 247
49489: PUSH
49490: LD_INT 1
49492: EQUAL
49493: PUSH
49494: LD_VAR 0 14
49498: PUSH
49499: LD_VAR 0 8
49503: ARRAY
49504: PPUSH
49505: CALL_OW 256
49509: PUSH
49510: LD_INT 250
49512: LESS
49513: PUSH
49514: LD_VAR 0 20
49518: AND
49519: PUSH
49520: LD_VAR 0 20
49524: NOT
49525: PUSH
49526: LD_VAR 0 14
49530: PUSH
49531: LD_VAR 0 8
49535: ARRAY
49536: PPUSH
49537: CALL_OW 256
49541: PUSH
49542: LD_INT 250
49544: GREATEREQUAL
49545: AND
49546: OR
49547: AND
49548: IFFALSE 49568
// begin x := tmp [ j ] ;
49550: LD_ADDR_VAR 0 10
49554: PUSH
49555: LD_VAR 0 14
49559: PUSH
49560: LD_VAR 0 8
49564: ARRAY
49565: ST_TO_ADDR
// break ;
49566: GO 49570
// end ;
49568: GO 49471
49570: POP
49571: POP
// if x then
49572: LD_VAR 0 10
49576: IFFALSE 49600
// ComAttackUnit ( group [ i ] , x ) else
49578: LD_VAR 0 4
49582: PUSH
49583: LD_VAR 0 7
49587: ARRAY
49588: PPUSH
49589: LD_VAR 0 10
49593: PPUSH
49594: CALL_OW 115
49598: GO 49624
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49600: LD_VAR 0 4
49604: PUSH
49605: LD_VAR 0 7
49609: ARRAY
49610: PPUSH
49611: LD_VAR 0 14
49615: PUSH
49616: LD_INT 1
49618: ARRAY
49619: PPUSH
49620: CALL_OW 115
// end ; end ; end ;
49624: GO 46784
49626: POP
49627: POP
// wait ( 0 0$1 ) ;
49628: LD_INT 35
49630: PPUSH
49631: CALL_OW 67
// until group = [ ] ;
49635: LD_VAR 0 4
49639: PUSH
49640: EMPTY
49641: EQUAL
49642: IFFALSE 46769
// end ;
49644: LD_VAR 0 2
49648: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
49649: LD_INT 0
49651: PPUSH
49652: PPUSH
49653: PPUSH
49654: PPUSH
// if not base_units then
49655: LD_VAR 0 1
49659: NOT
49660: IFFALSE 49664
// exit ;
49662: GO 49751
// result := false ;
49664: LD_ADDR_VAR 0 2
49668: PUSH
49669: LD_INT 0
49671: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
49672: LD_ADDR_VAR 0 5
49676: PUSH
49677: LD_VAR 0 1
49681: PPUSH
49682: LD_INT 21
49684: PUSH
49685: LD_INT 3
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PPUSH
49692: CALL_OW 72
49696: ST_TO_ADDR
// if not tmp then
49697: LD_VAR 0 5
49701: NOT
49702: IFFALSE 49706
// exit ;
49704: GO 49751
// for i in tmp do
49706: LD_ADDR_VAR 0 3
49710: PUSH
49711: LD_VAR 0 5
49715: PUSH
49716: FOR_IN
49717: IFFALSE 49749
// begin result := EnemyInRange ( i , 22 ) ;
49719: LD_ADDR_VAR 0 2
49723: PUSH
49724: LD_VAR 0 3
49728: PPUSH
49729: LD_INT 22
49731: PPUSH
49732: CALL 44849 0 2
49736: ST_TO_ADDR
// if result then
49737: LD_VAR 0 2
49741: IFFALSE 49747
// exit ;
49743: POP
49744: POP
49745: GO 49751
// end ;
49747: GO 49716
49749: POP
49750: POP
// end ;
49751: LD_VAR 0 2
49755: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
49756: LD_INT 0
49758: PPUSH
49759: PPUSH
// if not units then
49760: LD_VAR 0 1
49764: NOT
49765: IFFALSE 49769
// exit ;
49767: GO 49839
// result := [ ] ;
49769: LD_ADDR_VAR 0 3
49773: PUSH
49774: EMPTY
49775: ST_TO_ADDR
// for i in units do
49776: LD_ADDR_VAR 0 4
49780: PUSH
49781: LD_VAR 0 1
49785: PUSH
49786: FOR_IN
49787: IFFALSE 49837
// if GetTag ( i ) = tag then
49789: LD_VAR 0 4
49793: PPUSH
49794: CALL_OW 110
49798: PUSH
49799: LD_VAR 0 2
49803: EQUAL
49804: IFFALSE 49835
// result := Insert ( result , result + 1 , i ) ;
49806: LD_ADDR_VAR 0 3
49810: PUSH
49811: LD_VAR 0 3
49815: PPUSH
49816: LD_VAR 0 3
49820: PUSH
49821: LD_INT 1
49823: PLUS
49824: PPUSH
49825: LD_VAR 0 4
49829: PPUSH
49830: CALL_OW 2
49834: ST_TO_ADDR
49835: GO 49786
49837: POP
49838: POP
// end ;
49839: LD_VAR 0 3
49843: RET
// export function IsDriver ( un ) ; begin
49844: LD_INT 0
49846: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
49847: LD_ADDR_VAR 0 2
49851: PUSH
49852: LD_VAR 0 1
49856: PUSH
49857: LD_INT 55
49859: PUSH
49860: EMPTY
49861: LIST
49862: PPUSH
49863: CALL_OW 69
49867: IN
49868: ST_TO_ADDR
// end ; end_of_file
49869: LD_VAR 0 2
49873: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit ; export function InitMacro ; var i ; begin
49874: LD_INT 0
49876: PPUSH
49877: PPUSH
// skirmish := false ;
49878: LD_ADDR_EXP 56
49882: PUSH
49883: LD_INT 0
49885: ST_TO_ADDR
// mc_bases := [ ] ;
49886: LD_ADDR_EXP 57
49890: PUSH
49891: EMPTY
49892: ST_TO_ADDR
// mc_sides := [ ] ;
49893: LD_ADDR_EXP 83
49897: PUSH
49898: EMPTY
49899: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
49900: LD_ADDR_EXP 58
49904: PUSH
49905: EMPTY
49906: ST_TO_ADDR
// mc_building_repairs := [ ] ;
49907: LD_ADDR_EXP 59
49911: PUSH
49912: EMPTY
49913: ST_TO_ADDR
// mc_need_heal := [ ] ;
49914: LD_ADDR_EXP 60
49918: PUSH
49919: EMPTY
49920: ST_TO_ADDR
// mc_healers := [ ] ;
49921: LD_ADDR_EXP 61
49925: PUSH
49926: EMPTY
49927: ST_TO_ADDR
// mc_build_list := [ ] ;
49928: LD_ADDR_EXP 62
49932: PUSH
49933: EMPTY
49934: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
49935: LD_ADDR_EXP 89
49939: PUSH
49940: EMPTY
49941: ST_TO_ADDR
// mc_builders := [ ] ;
49942: LD_ADDR_EXP 63
49946: PUSH
49947: EMPTY
49948: ST_TO_ADDR
// mc_construct_list := [ ] ;
49949: LD_ADDR_EXP 64
49953: PUSH
49954: EMPTY
49955: ST_TO_ADDR
// mc_turret_list := [ ] ;
49956: LD_ADDR_EXP 65
49960: PUSH
49961: EMPTY
49962: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
49963: LD_ADDR_EXP 66
49967: PUSH
49968: EMPTY
49969: ST_TO_ADDR
// mc_miners := [ ] ;
49970: LD_ADDR_EXP 71
49974: PUSH
49975: EMPTY
49976: ST_TO_ADDR
// mc_mines := [ ] ;
49977: LD_ADDR_EXP 70
49981: PUSH
49982: EMPTY
49983: ST_TO_ADDR
// mc_minefields := [ ] ;
49984: LD_ADDR_EXP 72
49988: PUSH
49989: EMPTY
49990: ST_TO_ADDR
// mc_crates := [ ] ;
49991: LD_ADDR_EXP 73
49995: PUSH
49996: EMPTY
49997: ST_TO_ADDR
// mc_crates_collector := [ ] ;
49998: LD_ADDR_EXP 74
50002: PUSH
50003: EMPTY
50004: ST_TO_ADDR
// mc_crates_area := [ ] ;
50005: LD_ADDR_EXP 75
50009: PUSH
50010: EMPTY
50011: ST_TO_ADDR
// mc_vehicles := [ ] ;
50012: LD_ADDR_EXP 76
50016: PUSH
50017: EMPTY
50018: ST_TO_ADDR
// mc_attack := [ ] ;
50019: LD_ADDR_EXP 77
50023: PUSH
50024: EMPTY
50025: ST_TO_ADDR
// mc_produce := [ ] ;
50026: LD_ADDR_EXP 78
50030: PUSH
50031: EMPTY
50032: ST_TO_ADDR
// mc_defender := [ ] ;
50033: LD_ADDR_EXP 79
50037: PUSH
50038: EMPTY
50039: ST_TO_ADDR
// mc_parking := [ ] ;
50040: LD_ADDR_EXP 81
50044: PUSH
50045: EMPTY
50046: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
50047: LD_ADDR_EXP 67
50051: PUSH
50052: EMPTY
50053: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
50054: LD_ADDR_EXP 69
50058: PUSH
50059: EMPTY
50060: ST_TO_ADDR
// mc_scan := [ ] ;
50061: LD_ADDR_EXP 80
50065: PUSH
50066: EMPTY
50067: ST_TO_ADDR
// mc_scan_area := [ ] ;
50068: LD_ADDR_EXP 82
50072: PUSH
50073: EMPTY
50074: ST_TO_ADDR
// mc_tech := [ ] ;
50075: LD_ADDR_EXP 84
50079: PUSH
50080: EMPTY
50081: ST_TO_ADDR
// end ;
50082: LD_VAR 0 1
50086: RET
// export function MC_Start ( ) ; var i ; begin
50087: LD_INT 0
50089: PPUSH
50090: PPUSH
// for i = 1 to mc_bases do
50091: LD_ADDR_VAR 0 2
50095: PUSH
50096: DOUBLE
50097: LD_INT 1
50099: DEC
50100: ST_TO_ADDR
50101: LD_EXP 57
50105: PUSH
50106: FOR_TO
50107: IFFALSE 50952
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
50109: LD_ADDR_EXP 58
50113: PUSH
50114: LD_EXP 58
50118: PPUSH
50119: LD_VAR 0 2
50123: PPUSH
50124: EMPTY
50125: PPUSH
50126: CALL_OW 1
50130: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
50131: LD_ADDR_EXP 59
50135: PUSH
50136: LD_EXP 59
50140: PPUSH
50141: LD_VAR 0 2
50145: PPUSH
50146: EMPTY
50147: PPUSH
50148: CALL_OW 1
50152: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
50153: LD_ADDR_EXP 60
50157: PUSH
50158: LD_EXP 60
50162: PPUSH
50163: LD_VAR 0 2
50167: PPUSH
50168: EMPTY
50169: PPUSH
50170: CALL_OW 1
50174: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
50175: LD_ADDR_EXP 61
50179: PUSH
50180: LD_EXP 61
50184: PPUSH
50185: LD_VAR 0 2
50189: PPUSH
50190: EMPTY
50191: PUSH
50192: EMPTY
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PPUSH
50198: CALL_OW 1
50202: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
50203: LD_ADDR_EXP 62
50207: PUSH
50208: LD_EXP 62
50212: PPUSH
50213: LD_VAR 0 2
50217: PPUSH
50218: EMPTY
50219: PPUSH
50220: CALL_OW 1
50224: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
50225: LD_ADDR_EXP 89
50229: PUSH
50230: LD_EXP 89
50234: PPUSH
50235: LD_VAR 0 2
50239: PPUSH
50240: EMPTY
50241: PPUSH
50242: CALL_OW 1
50246: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
50247: LD_ADDR_EXP 63
50251: PUSH
50252: LD_EXP 63
50256: PPUSH
50257: LD_VAR 0 2
50261: PPUSH
50262: EMPTY
50263: PPUSH
50264: CALL_OW 1
50268: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
50269: LD_ADDR_EXP 64
50273: PUSH
50274: LD_EXP 64
50278: PPUSH
50279: LD_VAR 0 2
50283: PPUSH
50284: EMPTY
50285: PPUSH
50286: CALL_OW 1
50290: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
50291: LD_ADDR_EXP 65
50295: PUSH
50296: LD_EXP 65
50300: PPUSH
50301: LD_VAR 0 2
50305: PPUSH
50306: EMPTY
50307: PPUSH
50308: CALL_OW 1
50312: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
50313: LD_ADDR_EXP 66
50317: PUSH
50318: LD_EXP 66
50322: PPUSH
50323: LD_VAR 0 2
50327: PPUSH
50328: LD_EXP 57
50332: PUSH
50333: LD_VAR 0 2
50337: ARRAY
50338: PPUSH
50339: LD_INT 2
50341: PUSH
50342: LD_INT 30
50344: PUSH
50345: LD_INT 32
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 30
50354: PUSH
50355: LD_INT 31
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 58
50369: PUSH
50370: EMPTY
50371: LIST
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PPUSH
50377: CALL_OW 72
50381: PPUSH
50382: CALL_OW 1
50386: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
50387: LD_ADDR_EXP 67
50391: PUSH
50392: LD_EXP 67
50396: PPUSH
50397: LD_VAR 0 2
50401: PPUSH
50402: EMPTY
50403: PPUSH
50404: CALL_OW 1
50408: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
50409: LD_ADDR_EXP 71
50413: PUSH
50414: LD_EXP 71
50418: PPUSH
50419: LD_VAR 0 2
50423: PPUSH
50424: EMPTY
50425: PPUSH
50426: CALL_OW 1
50430: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
50431: LD_ADDR_EXP 70
50435: PUSH
50436: LD_EXP 70
50440: PPUSH
50441: LD_VAR 0 2
50445: PPUSH
50446: EMPTY
50447: PPUSH
50448: CALL_OW 1
50452: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
50453: LD_ADDR_EXP 72
50457: PUSH
50458: LD_EXP 72
50462: PPUSH
50463: LD_VAR 0 2
50467: PPUSH
50468: EMPTY
50469: PPUSH
50470: CALL_OW 1
50474: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
50475: LD_ADDR_EXP 73
50479: PUSH
50480: LD_EXP 73
50484: PPUSH
50485: LD_VAR 0 2
50489: PPUSH
50490: EMPTY
50491: PPUSH
50492: CALL_OW 1
50496: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
50497: LD_ADDR_EXP 74
50501: PUSH
50502: LD_EXP 74
50506: PPUSH
50507: LD_VAR 0 2
50511: PPUSH
50512: EMPTY
50513: PPUSH
50514: CALL_OW 1
50518: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
50519: LD_ADDR_EXP 75
50523: PUSH
50524: LD_EXP 75
50528: PPUSH
50529: LD_VAR 0 2
50533: PPUSH
50534: EMPTY
50535: PPUSH
50536: CALL_OW 1
50540: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
50541: LD_ADDR_EXP 76
50545: PUSH
50546: LD_EXP 76
50550: PPUSH
50551: LD_VAR 0 2
50555: PPUSH
50556: EMPTY
50557: PPUSH
50558: CALL_OW 1
50562: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
50563: LD_ADDR_EXP 77
50567: PUSH
50568: LD_EXP 77
50572: PPUSH
50573: LD_VAR 0 2
50577: PPUSH
50578: EMPTY
50579: PPUSH
50580: CALL_OW 1
50584: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
50585: LD_ADDR_EXP 78
50589: PUSH
50590: LD_EXP 78
50594: PPUSH
50595: LD_VAR 0 2
50599: PPUSH
50600: EMPTY
50601: PPUSH
50602: CALL_OW 1
50606: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
50607: LD_ADDR_EXP 79
50611: PUSH
50612: LD_EXP 79
50616: PPUSH
50617: LD_VAR 0 2
50621: PPUSH
50622: EMPTY
50623: PPUSH
50624: CALL_OW 1
50628: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
50629: LD_ADDR_EXP 68
50633: PUSH
50634: LD_EXP 68
50638: PPUSH
50639: LD_VAR 0 2
50643: PPUSH
50644: LD_INT 0
50646: PPUSH
50647: CALL_OW 1
50651: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
50652: LD_ADDR_EXP 81
50656: PUSH
50657: LD_EXP 81
50661: PPUSH
50662: LD_VAR 0 2
50666: PPUSH
50667: LD_INT 0
50669: PPUSH
50670: CALL_OW 1
50674: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
50675: LD_ADDR_EXP 69
50679: PUSH
50680: LD_EXP 69
50684: PPUSH
50685: LD_VAR 0 2
50689: PPUSH
50690: EMPTY
50691: PPUSH
50692: CALL_OW 1
50696: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
50697: LD_ADDR_EXP 80
50701: PUSH
50702: LD_EXP 80
50706: PPUSH
50707: LD_VAR 0 2
50711: PPUSH
50712: LD_INT 0
50714: PPUSH
50715: CALL_OW 1
50719: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
50720: LD_ADDR_EXP 82
50724: PUSH
50725: LD_EXP 82
50729: PPUSH
50730: LD_VAR 0 2
50734: PPUSH
50735: EMPTY
50736: PPUSH
50737: CALL_OW 1
50741: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
50742: LD_ADDR_EXP 85
50746: PUSH
50747: LD_EXP 85
50751: PPUSH
50752: LD_VAR 0 2
50756: PPUSH
50757: LD_INT 0
50759: PPUSH
50760: CALL_OW 1
50764: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
50765: LD_ADDR_EXP 86
50769: PUSH
50770: LD_EXP 86
50774: PPUSH
50775: LD_VAR 0 2
50779: PPUSH
50780: EMPTY
50781: PPUSH
50782: CALL_OW 1
50786: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
50787: LD_ADDR_EXP 87
50791: PUSH
50792: LD_EXP 87
50796: PPUSH
50797: LD_VAR 0 2
50801: PPUSH
50802: EMPTY
50803: PPUSH
50804: CALL_OW 1
50808: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
50809: LD_ADDR_EXP 88
50813: PUSH
50814: LD_EXP 88
50818: PPUSH
50819: LD_VAR 0 2
50823: PPUSH
50824: EMPTY
50825: PPUSH
50826: CALL_OW 1
50830: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
50831: LD_ADDR_EXP 90
50835: PUSH
50836: LD_EXP 90
50840: PPUSH
50841: LD_VAR 0 2
50845: PPUSH
50846: LD_EXP 57
50850: PUSH
50851: LD_VAR 0 2
50855: ARRAY
50856: PPUSH
50857: LD_INT 2
50859: PUSH
50860: LD_INT 30
50862: PUSH
50863: LD_INT 6
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 30
50872: PUSH
50873: LD_INT 7
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 30
50882: PUSH
50883: LD_INT 8
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: PPUSH
50896: CALL_OW 72
50900: PPUSH
50901: CALL_OW 1
50905: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
50906: LD_ADDR_EXP 91
50910: PUSH
50911: LD_EXP 91
50915: PPUSH
50916: LD_VAR 0 2
50920: PPUSH
50921: EMPTY
50922: PPUSH
50923: CALL_OW 1
50927: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
50928: LD_ADDR_EXP 92
50932: PUSH
50933: LD_EXP 92
50937: PPUSH
50938: LD_VAR 0 2
50942: PPUSH
50943: EMPTY
50944: PPUSH
50945: CALL_OW 1
50949: ST_TO_ADDR
// end ;
50950: GO 50106
50952: POP
50953: POP
// MC_InitSides ( ) ;
50954: CALL 59528 0 0
// MC_InitResearch ( ) ;
50958: CALL 59267 0 0
// CustomInitMacro ( ) ;
50962: CALL 174 0 0
// skirmish := true ;
50966: LD_ADDR_EXP 56
50970: PUSH
50971: LD_INT 1
50973: ST_TO_ADDR
// end ;
50974: LD_VAR 0 1
50978: RET
// every 0 0$01 trigger skirmish do
50979: LD_EXP 56
50983: IFFALSE 51102
50985: GO 50987
50987: DISABLE
// begin enable ;
50988: ENABLE
// MC_CheckBuildings ( ) ;
50989: CALL 51547 0 0
// MC_CheckPeopleLife ( ) ;
50993: CALL 51672 0 0
// RaiseSailEvent ( 103 ) ;
50997: LD_INT 103
50999: PPUSH
51000: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
51004: LD_INT 104
51006: PPUSH
51007: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
51011: LD_INT 105
51013: PPUSH
51014: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
51018: LD_INT 106
51020: PPUSH
51021: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
51025: LD_INT 107
51027: PPUSH
51028: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
51032: LD_INT 108
51034: PPUSH
51035: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
51039: LD_INT 109
51041: PPUSH
51042: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
51046: LD_INT 110
51048: PPUSH
51049: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
51053: LD_INT 111
51055: PPUSH
51056: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
51060: LD_INT 112
51062: PPUSH
51063: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
51067: LD_INT 120
51069: PPUSH
51070: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
51074: LD_INT 121
51076: PPUSH
51077: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
51081: LD_INT 122
51083: PPUSH
51084: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
51088: LD_INT 123
51090: PPUSH
51091: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
51095: LD_INT 200
51097: PPUSH
51098: CALL_OW 427
// end ;
51102: END
// every 10 trigger skirmish do var i ;
51103: LD_EXP 56
51107: IFFALSE 51206
51109: GO 51111
51111: DISABLE
51112: LD_INT 0
51114: PPUSH
// begin enable ;
51115: ENABLE
// if not mc_bases then
51116: LD_EXP 57
51120: NOT
51121: IFFALSE 51125
// exit ;
51123: GO 51206
// for i = 1 to mc_bases do
51125: LD_ADDR_VAR 0 1
51129: PUSH
51130: DOUBLE
51131: LD_INT 1
51133: DEC
51134: ST_TO_ADDR
51135: LD_EXP 57
51139: PUSH
51140: FOR_TO
51141: IFFALSE 51204
// if mc_mines [ i ] and mc_miners [ i ] then
51143: LD_EXP 70
51147: PUSH
51148: LD_VAR 0 1
51152: ARRAY
51153: PUSH
51154: LD_EXP 71
51158: PUSH
51159: LD_VAR 0 1
51163: ARRAY
51164: AND
51165: IFFALSE 51202
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
51167: LD_EXP 71
51171: PUSH
51172: LD_VAR 0 1
51176: ARRAY
51177: PUSH
51178: LD_INT 1
51180: ARRAY
51181: PPUSH
51182: CALL_OW 255
51186: PPUSH
51187: LD_EXP 70
51191: PUSH
51192: LD_VAR 0 1
51196: ARRAY
51197: PPUSH
51198: CALL 15680 0 2
51202: GO 51140
51204: POP
51205: POP
// end ;
51206: PPOPN 1
51208: END
// on SailEvent ( event ) do begin if event = 101 then
51209: LD_VAR 0 1
51213: PUSH
51214: LD_INT 101
51216: EQUAL
51217: IFFALSE 51223
// MC_RepairBuildings ( ) ;
51219: CALL 52230 0 0
// if event = 102 then
51223: LD_VAR 0 1
51227: PUSH
51228: LD_INT 102
51230: EQUAL
51231: IFFALSE 51237
// MC_Heal ( ) ;
51233: CALL 52636 0 0
// if event = 103 then
51237: LD_VAR 0 1
51241: PUSH
51242: LD_INT 103
51244: EQUAL
51245: IFFALSE 51251
// MC_Build ( ) ;
51247: CALL 53058 0 0
// if event = 104 then
51251: LD_VAR 0 1
51255: PUSH
51256: LD_INT 104
51258: EQUAL
51259: IFFALSE 51265
// MC_TurretWeapon ( ) ;
51261: CALL 54424 0 0
// if event = 105 then
51265: LD_VAR 0 1
51269: PUSH
51270: LD_INT 105
51272: EQUAL
51273: IFFALSE 51279
// MC_BuildUpgrade ( ) ;
51275: CALL 53975 0 0
// if event = 106 then
51279: LD_VAR 0 1
51283: PUSH
51284: LD_INT 106
51286: EQUAL
51287: IFFALSE 51293
// MC_PlantMines ( ) ;
51289: CALL 54743 0 0
// if event = 107 then
51293: LD_VAR 0 1
51297: PUSH
51298: LD_INT 107
51300: EQUAL
51301: IFFALSE 51307
// MC_CollectCrates ( ) ;
51303: CALL 55750 0 0
// if event = 108 then
51307: LD_VAR 0 1
51311: PUSH
51312: LD_INT 108
51314: EQUAL
51315: IFFALSE 51321
// MC_LinkRemoteControl ( ) ;
51317: CALL 57160 0 0
// if event = 109 then
51321: LD_VAR 0 1
51325: PUSH
51326: LD_INT 109
51328: EQUAL
51329: IFFALSE 51335
// MC_ProduceVehicle ( ) ;
51331: CALL 57341 0 0
// if event = 110 then
51335: LD_VAR 0 1
51339: PUSH
51340: LD_INT 110
51342: EQUAL
51343: IFFALSE 51349
// MC_SendAttack ( ) ;
51345: CALL 57822 0 0
// if event = 111 then
51349: LD_VAR 0 1
51353: PUSH
51354: LD_INT 111
51356: EQUAL
51357: IFFALSE 51363
// MC_Defend ( ) ;
51359: CALL 57930 0 0
// if event = 112 then
51363: LD_VAR 0 1
51367: PUSH
51368: LD_INT 112
51370: EQUAL
51371: IFFALSE 51377
// MC_Research ( ) ;
51373: CALL 58298 0 0
// if event = 120 then
51377: LD_VAR 0 1
51381: PUSH
51382: LD_INT 120
51384: EQUAL
51385: IFFALSE 51391
// MC_RepairVehicle ( ) ;
51387: CALL 59620 0 0
// if event = 121 then
51391: LD_VAR 0 1
51395: PUSH
51396: LD_INT 121
51398: EQUAL
51399: IFFALSE 51405
// MC_TameApe ( ) ;
51401: CALL 60289 0 0
// if event = 122 then
51405: LD_VAR 0 1
51409: PUSH
51410: LD_INT 122
51412: EQUAL
51413: IFFALSE 51419
// MC_ChangeApeClass ( ) ;
51415: CALL 60846 0 0
// if event = 123 then
51419: LD_VAR 0 1
51423: PUSH
51424: LD_INT 123
51426: EQUAL
51427: IFFALSE 51433
// MC_Bazooka ( ) ;
51429: CALL 61480 0 0
// if event = 124 then
51433: LD_VAR 0 1
51437: PUSH
51438: LD_INT 124
51440: EQUAL
51441: IFFALSE 51447
// MC_TeleportExit ( ) ;
51443: CALL 61678 0 0
// if event = 200 then
51447: LD_VAR 0 1
51451: PUSH
51452: LD_INT 200
51454: EQUAL
51455: IFFALSE 51461
// MC_Idle ( ) ;
51457: CALL 62702 0 0
// end ;
51461: PPOPN 1
51463: END
// export function MC_Reset ( base , tag ) ; var i ; begin
51464: LD_INT 0
51466: PPUSH
51467: PPUSH
// if not mc_bases [ base ] or not tag then
51468: LD_EXP 57
51472: PUSH
51473: LD_VAR 0 1
51477: ARRAY
51478: NOT
51479: PUSH
51480: LD_VAR 0 2
51484: NOT
51485: OR
51486: IFFALSE 51490
// exit ;
51488: GO 51542
// for i in mc_bases [ base ] do
51490: LD_ADDR_VAR 0 4
51494: PUSH
51495: LD_EXP 57
51499: PUSH
51500: LD_VAR 0 1
51504: ARRAY
51505: PUSH
51506: FOR_IN
51507: IFFALSE 51540
// if GetTag ( i ) = tag then
51509: LD_VAR 0 4
51513: PPUSH
51514: CALL_OW 110
51518: PUSH
51519: LD_VAR 0 2
51523: EQUAL
51524: IFFALSE 51538
// SetTag ( i , 0 ) ;
51526: LD_VAR 0 4
51530: PPUSH
51531: LD_INT 0
51533: PPUSH
51534: CALL_OW 109
51538: GO 51506
51540: POP
51541: POP
// end ;
51542: LD_VAR 0 3
51546: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
51547: LD_INT 0
51549: PPUSH
51550: PPUSH
51551: PPUSH
// if not mc_bases then
51552: LD_EXP 57
51556: NOT
51557: IFFALSE 51561
// exit ;
51559: GO 51667
// for i = 1 to mc_bases do
51561: LD_ADDR_VAR 0 2
51565: PUSH
51566: DOUBLE
51567: LD_INT 1
51569: DEC
51570: ST_TO_ADDR
51571: LD_EXP 57
51575: PUSH
51576: FOR_TO
51577: IFFALSE 51658
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
51579: LD_ADDR_VAR 0 3
51583: PUSH
51584: LD_EXP 57
51588: PUSH
51589: LD_VAR 0 2
51593: ARRAY
51594: PPUSH
51595: LD_INT 21
51597: PUSH
51598: LD_INT 3
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 3
51607: PUSH
51608: LD_INT 24
51610: PUSH
51611: LD_INT 1000
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PPUSH
51626: CALL_OW 72
51630: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
51631: LD_ADDR_EXP 58
51635: PUSH
51636: LD_EXP 58
51640: PPUSH
51641: LD_VAR 0 2
51645: PPUSH
51646: LD_VAR 0 3
51650: PPUSH
51651: CALL_OW 1
51655: ST_TO_ADDR
// end ;
51656: GO 51576
51658: POP
51659: POP
// RaiseSailEvent ( 101 ) ;
51660: LD_INT 101
51662: PPUSH
51663: CALL_OW 427
// end ;
51667: LD_VAR 0 1
51671: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
51672: LD_INT 0
51674: PPUSH
51675: PPUSH
51676: PPUSH
51677: PPUSH
51678: PPUSH
51679: PPUSH
51680: PPUSH
// if not mc_bases then
51681: LD_EXP 57
51685: NOT
51686: IFFALSE 51690
// exit ;
51688: GO 52225
// for i = 1 to mc_bases do
51690: LD_ADDR_VAR 0 2
51694: PUSH
51695: DOUBLE
51696: LD_INT 1
51698: DEC
51699: ST_TO_ADDR
51700: LD_EXP 57
51704: PUSH
51705: FOR_TO
51706: IFFALSE 52216
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
51708: LD_ADDR_VAR 0 5
51712: PUSH
51713: LD_EXP 57
51717: PUSH
51718: LD_VAR 0 2
51722: ARRAY
51723: PUSH
51724: LD_EXP 86
51728: PUSH
51729: LD_VAR 0 2
51733: ARRAY
51734: UNION
51735: PPUSH
51736: LD_INT 21
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: LD_INT 3
51751: PUSH
51752: LD_INT 54
51754: PUSH
51755: EMPTY
51756: LIST
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 3
51764: PUSH
51765: LD_INT 24
51767: PUSH
51768: LD_INT 700
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: LIST
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PPUSH
51788: CALL_OW 72
51792: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
51793: LD_ADDR_VAR 0 6
51797: PUSH
51798: LD_EXP 57
51802: PUSH
51803: LD_VAR 0 2
51807: ARRAY
51808: PPUSH
51809: LD_INT 21
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: LD_INT 54
51827: PUSH
51828: EMPTY
51829: LIST
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 3
51837: PUSH
51838: LD_INT 24
51840: PUSH
51841: LD_INT 250
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: LIST
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PPUSH
51861: CALL_OW 72
51865: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
51866: LD_ADDR_VAR 0 7
51870: PUSH
51871: LD_VAR 0 5
51875: PUSH
51876: LD_VAR 0 6
51880: DIFF
51881: ST_TO_ADDR
// if not need_heal_1 then
51882: LD_VAR 0 6
51886: NOT
51887: IFFALSE 51920
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
51889: LD_ADDR_EXP 60
51893: PUSH
51894: LD_EXP 60
51898: PPUSH
51899: LD_VAR 0 2
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PPUSH
51911: EMPTY
51912: PPUSH
51913: CALL 19022 0 3
51917: ST_TO_ADDR
51918: GO 51952
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
51920: LD_ADDR_EXP 60
51924: PUSH
51925: LD_EXP 60
51929: PPUSH
51930: LD_VAR 0 2
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PPUSH
51942: LD_VAR 0 6
51946: PPUSH
51947: CALL 19022 0 3
51951: ST_TO_ADDR
// if not need_heal_2 then
51952: LD_VAR 0 7
51956: NOT
51957: IFFALSE 51990
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
51959: LD_ADDR_EXP 60
51963: PUSH
51964: LD_EXP 60
51968: PPUSH
51969: LD_VAR 0 2
51973: PUSH
51974: LD_INT 2
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PPUSH
51981: EMPTY
51982: PPUSH
51983: CALL 19022 0 3
51987: ST_TO_ADDR
51988: GO 52022
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
51990: LD_ADDR_EXP 60
51994: PUSH
51995: LD_EXP 60
51999: PPUSH
52000: LD_VAR 0 2
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PPUSH
52012: LD_VAR 0 7
52016: PPUSH
52017: CALL 19022 0 3
52021: ST_TO_ADDR
// if need_heal_2 then
52022: LD_VAR 0 7
52026: IFFALSE 52198
// for j in need_heal_2 do
52028: LD_ADDR_VAR 0 3
52032: PUSH
52033: LD_VAR 0 7
52037: PUSH
52038: FOR_IN
52039: IFFALSE 52196
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
52041: LD_ADDR_VAR 0 5
52045: PUSH
52046: LD_EXP 57
52050: PUSH
52051: LD_VAR 0 2
52055: ARRAY
52056: PPUSH
52057: LD_INT 2
52059: PUSH
52060: LD_INT 30
52062: PUSH
52063: LD_INT 6
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 30
52072: PUSH
52073: LD_INT 7
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 30
52082: PUSH
52083: LD_INT 8
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 30
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 30
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 25
52112: PUSH
52113: LD_INT 4
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: PPUSH
52129: CALL_OW 72
52133: ST_TO_ADDR
// if tmp then
52134: LD_VAR 0 5
52138: IFFALSE 52194
// begin k := NearestUnitToUnit ( tmp , j ) ;
52140: LD_ADDR_VAR 0 4
52144: PUSH
52145: LD_VAR 0 5
52149: PPUSH
52150: LD_VAR 0 3
52154: PPUSH
52155: CALL_OW 74
52159: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
52160: LD_VAR 0 3
52164: PPUSH
52165: LD_VAR 0 4
52169: PPUSH
52170: CALL_OW 296
52174: PUSH
52175: LD_INT 7
52177: GREATER
52178: IFFALSE 52194
// ComMoveUnit ( j , k ) ;
52180: LD_VAR 0 3
52184: PPUSH
52185: LD_VAR 0 4
52189: PPUSH
52190: CALL_OW 112
// end ; end ;
52194: GO 52038
52196: POP
52197: POP
// if not need_heal_1 and not need_heal_2 then
52198: LD_VAR 0 6
52202: NOT
52203: PUSH
52204: LD_VAR 0 7
52208: NOT
52209: AND
52210: IFFALSE 52214
// continue ;
52212: GO 51705
// end ;
52214: GO 51705
52216: POP
52217: POP
// RaiseSailEvent ( 102 ) ;
52218: LD_INT 102
52220: PPUSH
52221: CALL_OW 427
// end ;
52225: LD_VAR 0 1
52229: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
52230: LD_INT 0
52232: PPUSH
52233: PPUSH
52234: PPUSH
52235: PPUSH
52236: PPUSH
// if not mc_bases then
52237: LD_EXP 57
52241: NOT
52242: IFFALSE 52246
// exit ;
52244: GO 52631
// for i = 1 to mc_bases do
52246: LD_ADDR_VAR 0 2
52250: PUSH
52251: DOUBLE
52252: LD_INT 1
52254: DEC
52255: ST_TO_ADDR
52256: LD_EXP 57
52260: PUSH
52261: FOR_TO
52262: IFFALSE 52629
// begin if not mc_building_need_repair [ i ] then
52264: LD_EXP 58
52268: PUSH
52269: LD_VAR 0 2
52273: ARRAY
52274: NOT
52275: IFFALSE 52313
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
52277: LD_ADDR_EXP 59
52281: PUSH
52282: LD_EXP 59
52286: PPUSH
52287: LD_VAR 0 2
52291: PPUSH
52292: EMPTY
52293: PPUSH
52294: CALL_OW 1
52298: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
52299: LD_VAR 0 2
52303: PPUSH
52304: LD_INT 101
52306: PPUSH
52307: CALL 51464 0 2
// continue ;
52311: GO 52261
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
52313: LD_ADDR_EXP 63
52317: PUSH
52318: LD_EXP 63
52322: PPUSH
52323: LD_VAR 0 2
52327: PPUSH
52328: EMPTY
52329: PPUSH
52330: CALL_OW 1
52334: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
52335: LD_VAR 0 2
52339: PPUSH
52340: LD_INT 103
52342: PPUSH
52343: CALL 51464 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
52347: LD_ADDR_VAR 0 5
52351: PUSH
52352: LD_EXP 57
52356: PUSH
52357: LD_VAR 0 2
52361: ARRAY
52362: PUSH
52363: LD_EXP 86
52367: PUSH
52368: LD_VAR 0 2
52372: ARRAY
52373: UNION
52374: PPUSH
52375: LD_INT 2
52377: PUSH
52378: LD_INT 25
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 25
52390: PUSH
52391: LD_INT 16
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: LIST
52402: PUSH
52403: EMPTY
52404: LIST
52405: PPUSH
52406: CALL_OW 72
52410: ST_TO_ADDR
// if not tmp then
52411: LD_VAR 0 5
52415: NOT
52416: IFFALSE 52420
// continue ;
52418: GO 52261
// for j in tmp do
52420: LD_ADDR_VAR 0 3
52424: PUSH
52425: LD_VAR 0 5
52429: PUSH
52430: FOR_IN
52431: IFFALSE 52625
// begin if mc_need_heal [ i ] then
52433: LD_EXP 60
52437: PUSH
52438: LD_VAR 0 2
52442: ARRAY
52443: IFFALSE 52491
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
52445: LD_VAR 0 3
52449: PUSH
52450: LD_EXP 60
52454: PUSH
52455: LD_VAR 0 2
52459: ARRAY
52460: PUSH
52461: LD_INT 1
52463: ARRAY
52464: IN
52465: PUSH
52466: LD_VAR 0 3
52470: PUSH
52471: LD_EXP 60
52475: PUSH
52476: LD_VAR 0 2
52480: ARRAY
52481: PUSH
52482: LD_INT 2
52484: ARRAY
52485: IN
52486: OR
52487: IFFALSE 52491
// continue ;
52489: GO 52430
// if IsInUnit ( j ) then
52491: LD_VAR 0 3
52495: PPUSH
52496: CALL_OW 310
52500: IFFALSE 52511
// ComExitBuilding ( j ) ;
52502: LD_VAR 0 3
52506: PPUSH
52507: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
52511: LD_VAR 0 3
52515: PUSH
52516: LD_EXP 59
52520: PUSH
52521: LD_VAR 0 2
52525: ARRAY
52526: IN
52527: NOT
52528: IFFALSE 52586
// begin SetTag ( j , 101 ) ;
52530: LD_VAR 0 3
52534: PPUSH
52535: LD_INT 101
52537: PPUSH
52538: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
52542: LD_ADDR_EXP 59
52546: PUSH
52547: LD_EXP 59
52551: PPUSH
52552: LD_VAR 0 2
52556: PUSH
52557: LD_EXP 59
52561: PUSH
52562: LD_VAR 0 2
52566: ARRAY
52567: PUSH
52568: LD_INT 1
52570: PLUS
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PPUSH
52576: LD_VAR 0 3
52580: PPUSH
52581: CALL 19022 0 3
52585: ST_TO_ADDR
// end ; Wait ( 3 ) ;
52586: LD_INT 3
52588: PPUSH
52589: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
52593: LD_VAR 0 3
52597: PPUSH
52598: LD_EXP 58
52602: PUSH
52603: LD_VAR 0 2
52607: ARRAY
52608: PPUSH
52609: LD_VAR 0 3
52613: PPUSH
52614: CALL_OW 74
52618: PPUSH
52619: CALL_OW 130
// end ;
52623: GO 52430
52625: POP
52626: POP
// end ;
52627: GO 52261
52629: POP
52630: POP
// end ;
52631: LD_VAR 0 1
52635: RET
// export function MC_Heal ; var i , j , tmp ; begin
52636: LD_INT 0
52638: PPUSH
52639: PPUSH
52640: PPUSH
52641: PPUSH
// if not mc_bases then
52642: LD_EXP 57
52646: NOT
52647: IFFALSE 52651
// exit ;
52649: GO 53053
// for i = 1 to mc_bases do
52651: LD_ADDR_VAR 0 2
52655: PUSH
52656: DOUBLE
52657: LD_INT 1
52659: DEC
52660: ST_TO_ADDR
52661: LD_EXP 57
52665: PUSH
52666: FOR_TO
52667: IFFALSE 53051
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
52669: LD_EXP 60
52673: PUSH
52674: LD_VAR 0 2
52678: ARRAY
52679: PUSH
52680: LD_INT 1
52682: ARRAY
52683: NOT
52684: PUSH
52685: LD_EXP 60
52689: PUSH
52690: LD_VAR 0 2
52694: ARRAY
52695: PUSH
52696: LD_INT 2
52698: ARRAY
52699: NOT
52700: AND
52701: IFFALSE 52739
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
52703: LD_ADDR_EXP 61
52707: PUSH
52708: LD_EXP 61
52712: PPUSH
52713: LD_VAR 0 2
52717: PPUSH
52718: EMPTY
52719: PPUSH
52720: CALL_OW 1
52724: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
52725: LD_VAR 0 2
52729: PPUSH
52730: LD_INT 102
52732: PPUSH
52733: CALL 51464 0 2
// continue ;
52737: GO 52666
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
52739: LD_ADDR_VAR 0 4
52743: PUSH
52744: LD_EXP 57
52748: PUSH
52749: LD_VAR 0 2
52753: ARRAY
52754: PPUSH
52755: LD_INT 25
52757: PUSH
52758: LD_INT 4
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PPUSH
52765: CALL_OW 72
52769: ST_TO_ADDR
// if not tmp then
52770: LD_VAR 0 4
52774: NOT
52775: IFFALSE 52779
// continue ;
52777: GO 52666
// if mc_taming [ i ] then
52779: LD_EXP 88
52783: PUSH
52784: LD_VAR 0 2
52788: ARRAY
52789: IFFALSE 52813
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
52791: LD_ADDR_EXP 88
52795: PUSH
52796: LD_EXP 88
52800: PPUSH
52801: LD_VAR 0 2
52805: PPUSH
52806: EMPTY
52807: PPUSH
52808: CALL_OW 1
52812: ST_TO_ADDR
// for j in tmp do
52813: LD_ADDR_VAR 0 3
52817: PUSH
52818: LD_VAR 0 4
52822: PUSH
52823: FOR_IN
52824: IFFALSE 53047
// begin if IsInUnit ( j ) then
52826: LD_VAR 0 3
52830: PPUSH
52831: CALL_OW 310
52835: IFFALSE 52846
// ComExitBuilding ( j ) ;
52837: LD_VAR 0 3
52841: PPUSH
52842: CALL_OW 122
// if not j in mc_healers [ i ] then
52846: LD_VAR 0 3
52850: PUSH
52851: LD_EXP 61
52855: PUSH
52856: LD_VAR 0 2
52860: ARRAY
52861: IN
52862: NOT
52863: IFFALSE 52909
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
52865: LD_ADDR_EXP 61
52869: PUSH
52870: LD_EXP 61
52874: PPUSH
52875: LD_VAR 0 2
52879: PUSH
52880: LD_EXP 61
52884: PUSH
52885: LD_VAR 0 2
52889: ARRAY
52890: PUSH
52891: LD_INT 1
52893: PLUS
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PPUSH
52899: LD_VAR 0 3
52903: PPUSH
52904: CALL 19022 0 3
52908: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
52909: LD_VAR 0 3
52913: PPUSH
52914: CALL_OW 110
52918: PUSH
52919: LD_INT 102
52921: NONEQUAL
52922: IFFALSE 52936
// SetTag ( j , 102 ) ;
52924: LD_VAR 0 3
52928: PPUSH
52929: LD_INT 102
52931: PPUSH
52932: CALL_OW 109
// Wait ( 3 ) ;
52936: LD_INT 3
52938: PPUSH
52939: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
52943: LD_EXP 60
52947: PUSH
52948: LD_VAR 0 2
52952: ARRAY
52953: PUSH
52954: LD_INT 1
52956: ARRAY
52957: IFFALSE 52989
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
52959: LD_VAR 0 3
52963: PPUSH
52964: LD_EXP 60
52968: PUSH
52969: LD_VAR 0 2
52973: ARRAY
52974: PUSH
52975: LD_INT 1
52977: ARRAY
52978: PUSH
52979: LD_INT 1
52981: ARRAY
52982: PPUSH
52983: CALL_OW 128
52987: GO 53045
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
52989: LD_VAR 0 3
52993: PPUSH
52994: CALL_OW 314
52998: NOT
52999: PUSH
53000: LD_EXP 60
53004: PUSH
53005: LD_VAR 0 2
53009: ARRAY
53010: PUSH
53011: LD_INT 2
53013: ARRAY
53014: AND
53015: IFFALSE 53045
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
53017: LD_VAR 0 3
53021: PPUSH
53022: LD_EXP 60
53026: PUSH
53027: LD_VAR 0 2
53031: ARRAY
53032: PUSH
53033: LD_INT 2
53035: ARRAY
53036: PUSH
53037: LD_INT 1
53039: ARRAY
53040: PPUSH
53041: CALL_OW 128
// end ;
53045: GO 52823
53047: POP
53048: POP
// end ;
53049: GO 52666
53051: POP
53052: POP
// end ;
53053: LD_VAR 0 1
53057: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
53058: LD_INT 0
53060: PPUSH
53061: PPUSH
53062: PPUSH
53063: PPUSH
// if not mc_bases then
53064: LD_EXP 57
53068: NOT
53069: IFFALSE 53073
// exit ;
53071: GO 53970
// for i = 1 to mc_bases do
53073: LD_ADDR_VAR 0 2
53077: PUSH
53078: DOUBLE
53079: LD_INT 1
53081: DEC
53082: ST_TO_ADDR
53083: LD_EXP 57
53087: PUSH
53088: FOR_TO
53089: IFFALSE 53968
// begin if mc_scan [ i ] then
53091: LD_EXP 80
53095: PUSH
53096: LD_VAR 0 2
53100: ARRAY
53101: IFFALSE 53105
// continue ;
53103: GO 53088
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
53105: LD_EXP 62
53109: PUSH
53110: LD_VAR 0 2
53114: ARRAY
53115: NOT
53116: PUSH
53117: LD_EXP 64
53121: PUSH
53122: LD_VAR 0 2
53126: ARRAY
53127: NOT
53128: AND
53129: PUSH
53130: LD_EXP 63
53134: PUSH
53135: LD_VAR 0 2
53139: ARRAY
53140: AND
53141: IFFALSE 53179
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
53143: LD_ADDR_EXP 63
53147: PUSH
53148: LD_EXP 63
53152: PPUSH
53153: LD_VAR 0 2
53157: PPUSH
53158: EMPTY
53159: PPUSH
53160: CALL_OW 1
53164: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
53165: LD_VAR 0 2
53169: PPUSH
53170: LD_INT 103
53172: PPUSH
53173: CALL 51464 0 2
// continue ;
53177: GO 53088
// end ; if mc_construct_list [ i ] then
53179: LD_EXP 64
53183: PUSH
53184: LD_VAR 0 2
53188: ARRAY
53189: IFFALSE 53409
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
53191: LD_ADDR_VAR 0 4
53195: PUSH
53196: LD_EXP 57
53200: PUSH
53201: LD_VAR 0 2
53205: ARRAY
53206: PPUSH
53207: LD_INT 25
53209: PUSH
53210: LD_INT 2
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PPUSH
53217: CALL_OW 72
53221: PUSH
53222: LD_EXP 59
53226: PUSH
53227: LD_VAR 0 2
53231: ARRAY
53232: DIFF
53233: ST_TO_ADDR
// if not tmp then
53234: LD_VAR 0 4
53238: NOT
53239: IFFALSE 53243
// continue ;
53241: GO 53088
// for j in tmp do
53243: LD_ADDR_VAR 0 3
53247: PUSH
53248: LD_VAR 0 4
53252: PUSH
53253: FOR_IN
53254: IFFALSE 53405
// begin if not mc_builders [ i ] then
53256: LD_EXP 63
53260: PUSH
53261: LD_VAR 0 2
53265: ARRAY
53266: NOT
53267: IFFALSE 53325
// begin SetTag ( j , 103 ) ;
53269: LD_VAR 0 3
53273: PPUSH
53274: LD_INT 103
53276: PPUSH
53277: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
53281: LD_ADDR_EXP 63
53285: PUSH
53286: LD_EXP 63
53290: PPUSH
53291: LD_VAR 0 2
53295: PUSH
53296: LD_EXP 63
53300: PUSH
53301: LD_VAR 0 2
53305: ARRAY
53306: PUSH
53307: LD_INT 1
53309: PLUS
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PPUSH
53315: LD_VAR 0 3
53319: PPUSH
53320: CALL 19022 0 3
53324: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
53325: LD_VAR 0 3
53329: PPUSH
53330: CALL_OW 310
53334: IFFALSE 53345
// ComExitBuilding ( j ) ;
53336: LD_VAR 0 3
53340: PPUSH
53341: CALL_OW 122
// wait ( 3 ) ;
53345: LD_INT 3
53347: PPUSH
53348: CALL_OW 67
// if not mc_construct_list [ i ] then
53352: LD_EXP 64
53356: PUSH
53357: LD_VAR 0 2
53361: ARRAY
53362: NOT
53363: IFFALSE 53367
// break ;
53365: GO 53405
// if not HasTask ( j ) then
53367: LD_VAR 0 3
53371: PPUSH
53372: CALL_OW 314
53376: NOT
53377: IFFALSE 53403
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
53379: LD_VAR 0 3
53383: PPUSH
53384: LD_EXP 64
53388: PUSH
53389: LD_VAR 0 2
53393: ARRAY
53394: PUSH
53395: LD_INT 1
53397: ARRAY
53398: PPUSH
53399: CALL 21428 0 2
// end ;
53403: GO 53253
53405: POP
53406: POP
// end else
53407: GO 53966
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
53409: LD_EXP 62
53413: PUSH
53414: LD_VAR 0 2
53418: ARRAY
53419: PUSH
53420: LD_EXP 57
53424: PUSH
53425: LD_VAR 0 2
53429: ARRAY
53430: PPUSH
53431: LD_INT 2
53433: PUSH
53434: LD_INT 30
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 30
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: LIST
53458: PPUSH
53459: CALL_OW 72
53463: AND
53464: IFFALSE 53966
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
53466: LD_EXP 57
53470: PUSH
53471: LD_VAR 0 2
53475: ARRAY
53476: PPUSH
53477: LD_INT 2
53479: PUSH
53480: LD_INT 30
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 30
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: LIST
53504: PPUSH
53505: CALL_OW 72
53509: PUSH
53510: LD_INT 1
53512: ARRAY
53513: PPUSH
53514: LD_EXP 62
53518: PUSH
53519: LD_VAR 0 2
53523: ARRAY
53524: PUSH
53525: LD_INT 1
53527: ARRAY
53528: PUSH
53529: LD_INT 1
53531: ARRAY
53532: PPUSH
53533: LD_EXP 62
53537: PUSH
53538: LD_VAR 0 2
53542: ARRAY
53543: PUSH
53544: LD_INT 1
53546: ARRAY
53547: PUSH
53548: LD_INT 2
53550: ARRAY
53551: PPUSH
53552: LD_EXP 62
53556: PUSH
53557: LD_VAR 0 2
53561: ARRAY
53562: PUSH
53563: LD_INT 1
53565: ARRAY
53566: PUSH
53567: LD_INT 3
53569: ARRAY
53570: PPUSH
53571: LD_EXP 62
53575: PUSH
53576: LD_VAR 0 2
53580: ARRAY
53581: PUSH
53582: LD_INT 1
53584: ARRAY
53585: PUSH
53586: LD_INT 4
53588: ARRAY
53589: PPUSH
53590: CALL 25532 0 5
53594: IFFALSE 53875
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
53596: LD_ADDR_VAR 0 4
53600: PUSH
53601: LD_EXP 57
53605: PUSH
53606: LD_VAR 0 2
53610: ARRAY
53611: PPUSH
53612: LD_INT 25
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PPUSH
53622: CALL_OW 72
53626: PUSH
53627: LD_EXP 59
53631: PUSH
53632: LD_VAR 0 2
53636: ARRAY
53637: DIFF
53638: ST_TO_ADDR
// if not tmp then
53639: LD_VAR 0 4
53643: NOT
53644: IFFALSE 53648
// continue ;
53646: GO 53088
// for j in tmp do
53648: LD_ADDR_VAR 0 3
53652: PUSH
53653: LD_VAR 0 4
53657: PUSH
53658: FOR_IN
53659: IFFALSE 53871
// begin if not mc_builders [ i ] then
53661: LD_EXP 63
53665: PUSH
53666: LD_VAR 0 2
53670: ARRAY
53671: NOT
53672: IFFALSE 53730
// begin SetTag ( j , 103 ) ;
53674: LD_VAR 0 3
53678: PPUSH
53679: LD_INT 103
53681: PPUSH
53682: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
53686: LD_ADDR_EXP 63
53690: PUSH
53691: LD_EXP 63
53695: PPUSH
53696: LD_VAR 0 2
53700: PUSH
53701: LD_EXP 63
53705: PUSH
53706: LD_VAR 0 2
53710: ARRAY
53711: PUSH
53712: LD_INT 1
53714: PLUS
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PPUSH
53720: LD_VAR 0 3
53724: PPUSH
53725: CALL 19022 0 3
53729: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
53730: LD_VAR 0 3
53734: PPUSH
53735: CALL_OW 310
53739: IFFALSE 53750
// ComExitBuilding ( j ) ;
53741: LD_VAR 0 3
53745: PPUSH
53746: CALL_OW 122
// wait ( 3 ) ;
53750: LD_INT 3
53752: PPUSH
53753: CALL_OW 67
// if not mc_build_list [ i ] then
53757: LD_EXP 62
53761: PUSH
53762: LD_VAR 0 2
53766: ARRAY
53767: NOT
53768: IFFALSE 53772
// break ;
53770: GO 53871
// if not HasTask ( j ) then
53772: LD_VAR 0 3
53776: PPUSH
53777: CALL_OW 314
53781: NOT
53782: IFFALSE 53869
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
53784: LD_VAR 0 3
53788: PPUSH
53789: LD_EXP 62
53793: PUSH
53794: LD_VAR 0 2
53798: ARRAY
53799: PUSH
53800: LD_INT 1
53802: ARRAY
53803: PUSH
53804: LD_INT 1
53806: ARRAY
53807: PPUSH
53808: LD_EXP 62
53812: PUSH
53813: LD_VAR 0 2
53817: ARRAY
53818: PUSH
53819: LD_INT 1
53821: ARRAY
53822: PUSH
53823: LD_INT 2
53825: ARRAY
53826: PPUSH
53827: LD_EXP 62
53831: PUSH
53832: LD_VAR 0 2
53836: ARRAY
53837: PUSH
53838: LD_INT 1
53840: ARRAY
53841: PUSH
53842: LD_INT 3
53844: ARRAY
53845: PPUSH
53846: LD_EXP 62
53850: PUSH
53851: LD_VAR 0 2
53855: ARRAY
53856: PUSH
53857: LD_INT 1
53859: ARRAY
53860: PUSH
53861: LD_INT 4
53863: ARRAY
53864: PPUSH
53865: CALL_OW 145
// end ;
53869: GO 53658
53871: POP
53872: POP
// end else
53873: GO 53966
// TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
53875: LD_EXP 57
53879: PUSH
53880: LD_VAR 0 2
53884: ARRAY
53885: PPUSH
53886: LD_EXP 62
53890: PUSH
53891: LD_VAR 0 2
53895: ARRAY
53896: PUSH
53897: LD_INT 1
53899: ARRAY
53900: PUSH
53901: LD_INT 1
53903: ARRAY
53904: PPUSH
53905: LD_EXP 62
53909: PUSH
53910: LD_VAR 0 2
53914: ARRAY
53915: PUSH
53916: LD_INT 1
53918: ARRAY
53919: PUSH
53920: LD_INT 2
53922: ARRAY
53923: PPUSH
53924: LD_EXP 62
53928: PUSH
53929: LD_VAR 0 2
53933: ARRAY
53934: PUSH
53935: LD_INT 1
53937: ARRAY
53938: PUSH
53939: LD_INT 3
53941: ARRAY
53942: PPUSH
53943: LD_EXP 62
53947: PUSH
53948: LD_VAR 0 2
53952: ARRAY
53953: PUSH
53954: LD_INT 1
53956: ARRAY
53957: PUSH
53958: LD_INT 4
53960: ARRAY
53961: PPUSH
53962: CALL 25216 0 5
// end ;
53966: GO 53088
53968: POP
53969: POP
// end ;
53970: LD_VAR 0 1
53974: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
53975: LD_INT 0
53977: PPUSH
53978: PPUSH
53979: PPUSH
53980: PPUSH
53981: PPUSH
53982: PPUSH
// if not mc_bases then
53983: LD_EXP 57
53987: NOT
53988: IFFALSE 53992
// exit ;
53990: GO 54419
// for i = 1 to mc_bases do
53992: LD_ADDR_VAR 0 2
53996: PUSH
53997: DOUBLE
53998: LD_INT 1
54000: DEC
54001: ST_TO_ADDR
54002: LD_EXP 57
54006: PUSH
54007: FOR_TO
54008: IFFALSE 54417
// begin tmp := mc_build_upgrade [ i ] ;
54010: LD_ADDR_VAR 0 4
54014: PUSH
54015: LD_EXP 89
54019: PUSH
54020: LD_VAR 0 2
54024: ARRAY
54025: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
54026: LD_ADDR_VAR 0 6
54030: PUSH
54031: LD_EXP 90
54035: PUSH
54036: LD_VAR 0 2
54040: ARRAY
54041: PPUSH
54042: LD_INT 2
54044: PUSH
54045: LD_INT 30
54047: PUSH
54048: LD_INT 6
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 30
54057: PUSH
54058: LD_INT 7
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: LIST
54069: PPUSH
54070: CALL_OW 72
54074: ST_TO_ADDR
// if not tmp and not lab then
54075: LD_VAR 0 4
54079: NOT
54080: PUSH
54081: LD_VAR 0 6
54085: NOT
54086: AND
54087: IFFALSE 54091
// continue ;
54089: GO 54007
// if tmp then
54091: LD_VAR 0 4
54095: IFFALSE 54215
// for j in tmp do
54097: LD_ADDR_VAR 0 3
54101: PUSH
54102: LD_VAR 0 4
54106: PUSH
54107: FOR_IN
54108: IFFALSE 54213
// begin if UpgradeCost ( j ) then
54110: LD_VAR 0 3
54114: PPUSH
54115: CALL 24876 0 1
54119: IFFALSE 54211
// begin ComUpgrade ( j ) ;
54121: LD_VAR 0 3
54125: PPUSH
54126: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
54130: LD_ADDR_EXP 89
54134: PUSH
54135: LD_EXP 89
54139: PPUSH
54140: LD_VAR 0 2
54144: PPUSH
54145: LD_EXP 89
54149: PUSH
54150: LD_VAR 0 2
54154: ARRAY
54155: PUSH
54156: LD_VAR 0 3
54160: DIFF
54161: PPUSH
54162: CALL_OW 1
54166: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
54167: LD_ADDR_EXP 64
54171: PUSH
54172: LD_EXP 64
54176: PPUSH
54177: LD_VAR 0 2
54181: PUSH
54182: LD_EXP 64
54186: PUSH
54187: LD_VAR 0 2
54191: ARRAY
54192: PUSH
54193: LD_INT 1
54195: PLUS
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PPUSH
54201: LD_VAR 0 3
54205: PPUSH
54206: CALL 19022 0 3
54210: ST_TO_ADDR
// end ; end ;
54211: GO 54107
54213: POP
54214: POP
// if not lab or not mc_lab_upgrade [ i ] then
54215: LD_VAR 0 6
54219: NOT
54220: PUSH
54221: LD_EXP 91
54225: PUSH
54226: LD_VAR 0 2
54230: ARRAY
54231: NOT
54232: OR
54233: IFFALSE 54237
// continue ;
54235: GO 54007
// for j in lab do
54237: LD_ADDR_VAR 0 3
54241: PUSH
54242: LD_VAR 0 6
54246: PUSH
54247: FOR_IN
54248: IFFALSE 54413
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
54250: LD_VAR 0 3
54254: PPUSH
54255: CALL_OW 266
54259: PUSH
54260: LD_INT 6
54262: PUSH
54263: LD_INT 7
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: IN
54270: PUSH
54271: LD_VAR 0 3
54275: PPUSH
54276: CALL_OW 461
54280: PUSH
54281: LD_INT 1
54283: NONEQUAL
54284: AND
54285: IFFALSE 54411
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
54287: LD_VAR 0 3
54291: PPUSH
54292: LD_EXP 91
54296: PUSH
54297: LD_VAR 0 2
54301: ARRAY
54302: PUSH
54303: LD_INT 1
54305: ARRAY
54306: PPUSH
54307: CALL 25081 0 2
54311: IFFALSE 54411
// begin ComCancel ( j ) ;
54313: LD_VAR 0 3
54317: PPUSH
54318: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
54322: LD_VAR 0 3
54326: PPUSH
54327: LD_EXP 91
54331: PUSH
54332: LD_VAR 0 2
54336: ARRAY
54337: PUSH
54338: LD_INT 1
54340: ARRAY
54341: PPUSH
54342: CALL_OW 207
// if not j in mc_construct_list [ i ] then
54346: LD_VAR 0 3
54350: PUSH
54351: LD_EXP 64
54355: PUSH
54356: LD_VAR 0 2
54360: ARRAY
54361: IN
54362: NOT
54363: IFFALSE 54409
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
54365: LD_ADDR_EXP 64
54369: PUSH
54370: LD_EXP 64
54374: PPUSH
54375: LD_VAR 0 2
54379: PUSH
54380: LD_EXP 64
54384: PUSH
54385: LD_VAR 0 2
54389: ARRAY
54390: PUSH
54391: LD_INT 1
54393: PLUS
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PPUSH
54399: LD_VAR 0 3
54403: PPUSH
54404: CALL 19022 0 3
54408: ST_TO_ADDR
// break ;
54409: GO 54413
// end ; end ; end ;
54411: GO 54247
54413: POP
54414: POP
// end ;
54415: GO 54007
54417: POP
54418: POP
// end ;
54419: LD_VAR 0 1
54423: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
54424: LD_INT 0
54426: PPUSH
54427: PPUSH
54428: PPUSH
54429: PPUSH
54430: PPUSH
54431: PPUSH
54432: PPUSH
// if not mc_bases then
54433: LD_EXP 57
54437: NOT
54438: IFFALSE 54442
// exit ;
54440: GO 54738
// for i = 1 to mc_bases do
54442: LD_ADDR_VAR 0 2
54446: PUSH
54447: DOUBLE
54448: LD_INT 1
54450: DEC
54451: ST_TO_ADDR
54452: LD_EXP 57
54456: PUSH
54457: FOR_TO
54458: IFFALSE 54736
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
54460: LD_EXP 65
54464: PUSH
54465: LD_VAR 0 2
54469: ARRAY
54470: NOT
54471: PUSH
54472: LD_EXP 57
54476: PUSH
54477: LD_VAR 0 2
54481: ARRAY
54482: PPUSH
54483: LD_INT 30
54485: PUSH
54486: LD_INT 3
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PPUSH
54493: CALL_OW 72
54497: NOT
54498: OR
54499: IFFALSE 54503
// continue ;
54501: GO 54457
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
54503: LD_EXP 65
54507: PUSH
54508: LD_VAR 0 2
54512: ARRAY
54513: PUSH
54514: LD_INT 1
54516: ARRAY
54517: PPUSH
54518: CALL_OW 269
54522: IFFALSE 54588
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
54524: LD_ADDR_VAR 0 4
54528: PUSH
54529: LD_EXP 65
54533: PUSH
54534: LD_VAR 0 2
54538: ARRAY
54539: PPUSH
54540: LD_INT 1
54542: PPUSH
54543: CALL_OW 3
54547: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
54548: LD_ADDR_EXP 65
54552: PUSH
54553: LD_EXP 65
54557: PPUSH
54558: LD_VAR 0 2
54562: PPUSH
54563: LD_VAR 0 4
54567: PPUSH
54568: CALL_OW 1
54572: ST_TO_ADDR
// if not mc_turret_list [ i ] then
54573: LD_EXP 65
54577: PUSH
54578: LD_VAR 0 2
54582: ARRAY
54583: NOT
54584: IFFALSE 54588
// continue ;
54586: GO 54457
// end ; busy := false ;
54588: LD_ADDR_VAR 0 6
54592: PUSH
54593: LD_INT 0
54595: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
54596: LD_ADDR_VAR 0 4
54600: PUSH
54601: LD_EXP 57
54605: PUSH
54606: LD_VAR 0 2
54610: ARRAY
54611: PPUSH
54612: LD_INT 30
54614: PUSH
54615: LD_INT 3
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PPUSH
54622: CALL_OW 72
54626: ST_TO_ADDR
// for j in tmp do
54627: LD_ADDR_VAR 0 3
54631: PUSH
54632: LD_VAR 0 4
54636: PUSH
54637: FOR_IN
54638: IFFALSE 54666
// if not BuildingStatus ( j ) = bs_idle then
54640: LD_VAR 0 3
54644: PPUSH
54645: CALL_OW 461
54649: PUSH
54650: LD_INT 2
54652: EQUAL
54653: NOT
54654: IFFALSE 54664
// busy := true ;
54656: LD_ADDR_VAR 0 6
54660: PUSH
54661: LD_INT 1
54663: ST_TO_ADDR
54664: GO 54637
54666: POP
54667: POP
// if busy then
54668: LD_VAR 0 6
54672: IFFALSE 54676
// continue ;
54674: GO 54457
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
54676: LD_ADDR_VAR 0 7
54680: PUSH
54681: LD_EXP 65
54685: PUSH
54686: LD_VAR 0 2
54690: ARRAY
54691: PUSH
54692: LD_INT 1
54694: ARRAY
54695: PPUSH
54696: CALL 23324 0 1
54700: ST_TO_ADDR
// if not weapon then
54701: LD_VAR 0 7
54705: NOT
54706: IFFALSE 54710
// continue ;
54708: GO 54457
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
54710: LD_EXP 65
54714: PUSH
54715: LD_VAR 0 2
54719: ARRAY
54720: PUSH
54721: LD_INT 1
54723: ARRAY
54724: PPUSH
54725: LD_VAR 0 7
54729: PPUSH
54730: CALL_OW 148
// end ;
54734: GO 54457
54736: POP
54737: POP
// end ;
54738: LD_VAR 0 1
54742: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
54743: LD_INT 0
54745: PPUSH
54746: PPUSH
54747: PPUSH
54748: PPUSH
54749: PPUSH
54750: PPUSH
// if not mc_bases then
54751: LD_EXP 57
54755: NOT
54756: IFFALSE 54760
// exit ;
54758: GO 55745
// for i = 1 to mc_bases do
54760: LD_ADDR_VAR 0 2
54764: PUSH
54765: DOUBLE
54766: LD_INT 1
54768: DEC
54769: ST_TO_ADDR
54770: LD_EXP 57
54774: PUSH
54775: FOR_TO
54776: IFFALSE 55743
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
54778: LD_EXP 70
54782: PUSH
54783: LD_VAR 0 2
54787: ARRAY
54788: NOT
54789: PUSH
54790: LD_EXP 70
54794: PUSH
54795: LD_VAR 0 2
54799: ARRAY
54800: PUSH
54801: LD_EXP 71
54805: PUSH
54806: LD_VAR 0 2
54810: ARRAY
54811: EQUAL
54812: OR
54813: IFFALSE 54817
// continue ;
54815: GO 54775
// if mc_miners [ i ] then
54817: LD_EXP 71
54821: PUSH
54822: LD_VAR 0 2
54826: ARRAY
54827: IFFALSE 55430
// begin k := 1 ;
54829: LD_ADDR_VAR 0 4
54833: PUSH
54834: LD_INT 1
54836: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
54837: LD_ADDR_VAR 0 3
54841: PUSH
54842: DOUBLE
54843: LD_EXP 71
54847: PUSH
54848: LD_VAR 0 2
54852: ARRAY
54853: INC
54854: ST_TO_ADDR
54855: LD_INT 1
54857: PUSH
54858: FOR_DOWNTO
54859: IFFALSE 55428
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
54861: LD_EXP 71
54865: PUSH
54866: LD_VAR 0 2
54870: ARRAY
54871: PUSH
54872: LD_VAR 0 3
54876: ARRAY
54877: PPUSH
54878: CALL_OW 301
54882: IFFALSE 54945
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
54884: LD_ADDR_VAR 0 5
54888: PUSH
54889: LD_EXP 71
54893: PUSH
54894: LD_VAR 0 2
54898: ARRAY
54899: PUSH
54900: LD_EXP 71
54904: PUSH
54905: LD_VAR 0 2
54909: ARRAY
54910: PUSH
54911: LD_VAR 0 3
54915: ARRAY
54916: DIFF
54917: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
54918: LD_ADDR_EXP 71
54922: PUSH
54923: LD_EXP 71
54927: PPUSH
54928: LD_VAR 0 2
54932: PPUSH
54933: LD_VAR 0 5
54937: PPUSH
54938: CALL_OW 1
54942: ST_TO_ADDR
// continue ;
54943: GO 54858
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
54945: LD_EXP 71
54949: PUSH
54950: LD_VAR 0 2
54954: ARRAY
54955: PUSH
54956: LD_VAR 0 3
54960: ARRAY
54961: PPUSH
54962: CALL 18523 0 1
54966: PUSH
54967: LD_EXP 71
54971: PUSH
54972: LD_VAR 0 2
54976: ARRAY
54977: PUSH
54978: LD_VAR 0 3
54982: ARRAY
54983: PPUSH
54984: CALL_OW 255
54988: PPUSH
54989: LD_EXP 70
54993: PUSH
54994: LD_VAR 0 2
54998: ARRAY
54999: PUSH
55000: LD_VAR 0 4
55004: ARRAY
55005: PUSH
55006: LD_INT 1
55008: ARRAY
55009: PPUSH
55010: LD_EXP 70
55014: PUSH
55015: LD_VAR 0 2
55019: ARRAY
55020: PUSH
55021: LD_VAR 0 4
55025: ARRAY
55026: PUSH
55027: LD_INT 2
55029: ARRAY
55030: PPUSH
55031: LD_INT 15
55033: PPUSH
55034: CALL 19516 0 4
55038: PUSH
55039: LD_INT 4
55041: ARRAY
55042: PUSH
55043: LD_EXP 71
55047: PUSH
55048: LD_VAR 0 2
55052: ARRAY
55053: PUSH
55054: LD_VAR 0 3
55058: ARRAY
55059: PPUSH
55060: LD_INT 10
55062: PPUSH
55063: CALL 21213 0 2
55067: PUSH
55068: LD_INT 4
55070: ARRAY
55071: OR
55072: AND
55073: IFFALSE 55096
// ComStop ( mc_miners [ i ] [ j ] ) ;
55075: LD_EXP 71
55079: PUSH
55080: LD_VAR 0 2
55084: ARRAY
55085: PUSH
55086: LD_VAR 0 3
55090: ARRAY
55091: PPUSH
55092: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
55096: LD_EXP 71
55100: PUSH
55101: LD_VAR 0 2
55105: ARRAY
55106: PUSH
55107: LD_VAR 0 3
55111: ARRAY
55112: PPUSH
55113: CALL_OW 257
55117: PUSH
55118: LD_INT 1
55120: EQUAL
55121: PUSH
55122: LD_EXP 71
55126: PUSH
55127: LD_VAR 0 2
55131: ARRAY
55132: PUSH
55133: LD_VAR 0 3
55137: ARRAY
55138: PPUSH
55139: CALL_OW 459
55143: NOT
55144: AND
55145: PUSH
55146: LD_EXP 71
55150: PUSH
55151: LD_VAR 0 2
55155: ARRAY
55156: PUSH
55157: LD_VAR 0 3
55161: ARRAY
55162: PPUSH
55163: CALL_OW 255
55167: PPUSH
55168: LD_EXP 70
55172: PUSH
55173: LD_VAR 0 2
55177: ARRAY
55178: PUSH
55179: LD_VAR 0 4
55183: ARRAY
55184: PUSH
55185: LD_INT 1
55187: ARRAY
55188: PPUSH
55189: LD_EXP 70
55193: PUSH
55194: LD_VAR 0 2
55198: ARRAY
55199: PUSH
55200: LD_VAR 0 4
55204: ARRAY
55205: PUSH
55206: LD_INT 2
55208: ARRAY
55209: PPUSH
55210: LD_INT 15
55212: PPUSH
55213: CALL 19516 0 4
55217: PUSH
55218: LD_INT 4
55220: ARRAY
55221: PUSH
55222: LD_INT 0
55224: EQUAL
55225: AND
55226: PUSH
55227: LD_EXP 71
55231: PUSH
55232: LD_VAR 0 2
55236: ARRAY
55237: PUSH
55238: LD_VAR 0 3
55242: ARRAY
55243: PPUSH
55244: CALL_OW 314
55248: NOT
55249: AND
55250: IFFALSE 55426
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
55252: LD_EXP 71
55256: PUSH
55257: LD_VAR 0 2
55261: ARRAY
55262: PUSH
55263: LD_VAR 0 3
55267: ARRAY
55268: PPUSH
55269: CALL_OW 310
55273: IFFALSE 55296
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
55275: LD_EXP 71
55279: PUSH
55280: LD_VAR 0 2
55284: ARRAY
55285: PUSH
55286: LD_VAR 0 3
55290: ARRAY
55291: PPUSH
55292: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
55296: LD_EXP 71
55300: PUSH
55301: LD_VAR 0 2
55305: ARRAY
55306: PUSH
55307: LD_VAR 0 3
55311: ARRAY
55312: PPUSH
55313: CALL_OW 314
55317: NOT
55318: IFFALSE 55386
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
55320: LD_EXP 71
55324: PUSH
55325: LD_VAR 0 2
55329: ARRAY
55330: PUSH
55331: LD_VAR 0 3
55335: ARRAY
55336: PPUSH
55337: LD_EXP 70
55341: PUSH
55342: LD_VAR 0 2
55346: ARRAY
55347: PUSH
55348: LD_VAR 0 4
55352: ARRAY
55353: PUSH
55354: LD_INT 1
55356: ARRAY
55357: PPUSH
55358: LD_EXP 70
55362: PUSH
55363: LD_VAR 0 2
55367: ARRAY
55368: PUSH
55369: LD_VAR 0 4
55373: ARRAY
55374: PUSH
55375: LD_INT 2
55377: ARRAY
55378: PPUSH
55379: LD_INT 0
55381: PPUSH
55382: CALL_OW 193
// k := k + 1 ;
55386: LD_ADDR_VAR 0 4
55390: PUSH
55391: LD_VAR 0 4
55395: PUSH
55396: LD_INT 1
55398: PLUS
55399: ST_TO_ADDR
// if k > mc_mines [ i ] then
55400: LD_VAR 0 4
55404: PUSH
55405: LD_EXP 70
55409: PUSH
55410: LD_VAR 0 2
55414: ARRAY
55415: GREATER
55416: IFFALSE 55426
// k := 1 ;
55418: LD_ADDR_VAR 0 4
55422: PUSH
55423: LD_INT 1
55425: ST_TO_ADDR
// end ; end ;
55426: GO 54858
55428: POP
55429: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
55430: LD_ADDR_VAR 0 5
55434: PUSH
55435: LD_EXP 57
55439: PUSH
55440: LD_VAR 0 2
55444: ARRAY
55445: PPUSH
55446: LD_INT 2
55448: PUSH
55449: LD_INT 30
55451: PUSH
55452: LD_INT 4
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 30
55461: PUSH
55462: LD_INT 5
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 30
55471: PUSH
55472: LD_INT 32
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: PPUSH
55485: CALL_OW 72
55489: ST_TO_ADDR
// if not tmp then
55490: LD_VAR 0 5
55494: NOT
55495: IFFALSE 55499
// continue ;
55497: GO 54775
// list := [ ] ;
55499: LD_ADDR_VAR 0 6
55503: PUSH
55504: EMPTY
55505: ST_TO_ADDR
// for j in tmp do
55506: LD_ADDR_VAR 0 3
55510: PUSH
55511: LD_VAR 0 5
55515: PUSH
55516: FOR_IN
55517: IFFALSE 55586
// begin for k in UnitsInside ( j ) do
55519: LD_ADDR_VAR 0 4
55523: PUSH
55524: LD_VAR 0 3
55528: PPUSH
55529: CALL_OW 313
55533: PUSH
55534: FOR_IN
55535: IFFALSE 55582
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
55537: LD_VAR 0 4
55541: PPUSH
55542: CALL_OW 257
55546: PUSH
55547: LD_INT 1
55549: EQUAL
55550: PUSH
55551: LD_VAR 0 4
55555: PPUSH
55556: CALL_OW 459
55560: NOT
55561: AND
55562: IFFALSE 55580
// list := list ^ k ;
55564: LD_ADDR_VAR 0 6
55568: PUSH
55569: LD_VAR 0 6
55573: PUSH
55574: LD_VAR 0 4
55578: ADD
55579: ST_TO_ADDR
55580: GO 55534
55582: POP
55583: POP
// end ;
55584: GO 55516
55586: POP
55587: POP
// list := list diff mc_miners [ i ] ;
55588: LD_ADDR_VAR 0 6
55592: PUSH
55593: LD_VAR 0 6
55597: PUSH
55598: LD_EXP 71
55602: PUSH
55603: LD_VAR 0 2
55607: ARRAY
55608: DIFF
55609: ST_TO_ADDR
// if not list then
55610: LD_VAR 0 6
55614: NOT
55615: IFFALSE 55619
// continue ;
55617: GO 54775
// k := mc_mines [ i ] - mc_miners [ i ] ;
55619: LD_ADDR_VAR 0 4
55623: PUSH
55624: LD_EXP 70
55628: PUSH
55629: LD_VAR 0 2
55633: ARRAY
55634: PUSH
55635: LD_EXP 71
55639: PUSH
55640: LD_VAR 0 2
55644: ARRAY
55645: MINUS
55646: ST_TO_ADDR
// if k > list then
55647: LD_VAR 0 4
55651: PUSH
55652: LD_VAR 0 6
55656: GREATER
55657: IFFALSE 55669
// k := list ;
55659: LD_ADDR_VAR 0 4
55663: PUSH
55664: LD_VAR 0 6
55668: ST_TO_ADDR
// for j = 1 to k do
55669: LD_ADDR_VAR 0 3
55673: PUSH
55674: DOUBLE
55675: LD_INT 1
55677: DEC
55678: ST_TO_ADDR
55679: LD_VAR 0 4
55683: PUSH
55684: FOR_TO
55685: IFFALSE 55739
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
55687: LD_ADDR_EXP 71
55691: PUSH
55692: LD_EXP 71
55696: PPUSH
55697: LD_VAR 0 2
55701: PUSH
55702: LD_EXP 71
55706: PUSH
55707: LD_VAR 0 2
55711: ARRAY
55712: PUSH
55713: LD_INT 1
55715: PLUS
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PPUSH
55721: LD_VAR 0 6
55725: PUSH
55726: LD_VAR 0 3
55730: ARRAY
55731: PPUSH
55732: CALL 19022 0 3
55736: ST_TO_ADDR
55737: GO 55684
55739: POP
55740: POP
// end ;
55741: GO 54775
55743: POP
55744: POP
// end ;
55745: LD_VAR 0 1
55749: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
55750: LD_INT 0
55752: PPUSH
55753: PPUSH
55754: PPUSH
55755: PPUSH
55756: PPUSH
55757: PPUSH
55758: PPUSH
55759: PPUSH
55760: PPUSH
// if not mc_bases then
55761: LD_EXP 57
55765: NOT
55766: IFFALSE 55770
// exit ;
55768: GO 57155
// for i = 1 to mc_bases do
55770: LD_ADDR_VAR 0 2
55774: PUSH
55775: DOUBLE
55776: LD_INT 1
55778: DEC
55779: ST_TO_ADDR
55780: LD_EXP 57
55784: PUSH
55785: FOR_TO
55786: IFFALSE 57153
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
55788: LD_EXP 57
55792: PUSH
55793: LD_VAR 0 2
55797: ARRAY
55798: NOT
55799: PUSH
55800: LD_EXP 64
55804: PUSH
55805: LD_VAR 0 2
55809: ARRAY
55810: OR
55811: IFFALSE 55815
// continue ;
55813: GO 55785
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
55815: LD_EXP 73
55819: PUSH
55820: LD_VAR 0 2
55824: ARRAY
55825: NOT
55826: PUSH
55827: LD_EXP 74
55831: PUSH
55832: LD_VAR 0 2
55836: ARRAY
55837: AND
55838: IFFALSE 55876
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
55840: LD_ADDR_EXP 74
55844: PUSH
55845: LD_EXP 74
55849: PPUSH
55850: LD_VAR 0 2
55854: PPUSH
55855: EMPTY
55856: PPUSH
55857: CALL_OW 1
55861: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
55862: LD_VAR 0 2
55866: PPUSH
55867: LD_INT 107
55869: PPUSH
55870: CALL 51464 0 2
// continue ;
55874: GO 55785
// end ; target := [ ] ;
55876: LD_ADDR_VAR 0 5
55880: PUSH
55881: EMPTY
55882: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
55883: LD_ADDR_VAR 0 3
55887: PUSH
55888: DOUBLE
55889: LD_EXP 73
55893: PUSH
55894: LD_VAR 0 2
55898: ARRAY
55899: INC
55900: ST_TO_ADDR
55901: LD_INT 1
55903: PUSH
55904: FOR_DOWNTO
55905: IFFALSE 56165
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
55907: LD_EXP 73
55911: PUSH
55912: LD_VAR 0 2
55916: ARRAY
55917: PUSH
55918: LD_VAR 0 3
55922: ARRAY
55923: PUSH
55924: LD_INT 2
55926: ARRAY
55927: PPUSH
55928: LD_EXP 73
55932: PUSH
55933: LD_VAR 0 2
55937: ARRAY
55938: PUSH
55939: LD_VAR 0 3
55943: ARRAY
55944: PUSH
55945: LD_INT 3
55947: ARRAY
55948: PPUSH
55949: CALL_OW 488
55953: PUSH
55954: LD_EXP 73
55958: PUSH
55959: LD_VAR 0 2
55963: ARRAY
55964: PUSH
55965: LD_VAR 0 3
55969: ARRAY
55970: PUSH
55971: LD_INT 2
55973: ARRAY
55974: PPUSH
55975: LD_EXP 73
55979: PUSH
55980: LD_VAR 0 2
55984: ARRAY
55985: PUSH
55986: LD_VAR 0 3
55990: ARRAY
55991: PUSH
55992: LD_INT 3
55994: ARRAY
55995: PPUSH
55996: CALL_OW 284
56000: PUSH
56001: LD_INT 0
56003: EQUAL
56004: AND
56005: IFFALSE 56060
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
56007: LD_ADDR_VAR 0 4
56011: PUSH
56012: LD_EXP 73
56016: PUSH
56017: LD_VAR 0 2
56021: ARRAY
56022: PPUSH
56023: LD_VAR 0 3
56027: PPUSH
56028: CALL_OW 3
56032: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
56033: LD_ADDR_EXP 73
56037: PUSH
56038: LD_EXP 73
56042: PPUSH
56043: LD_VAR 0 2
56047: PPUSH
56048: LD_VAR 0 4
56052: PPUSH
56053: CALL_OW 1
56057: ST_TO_ADDR
// continue ;
56058: GO 55904
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
56060: LD_EXP 57
56064: PUSH
56065: LD_VAR 0 2
56069: ARRAY
56070: PUSH
56071: LD_INT 1
56073: ARRAY
56074: PPUSH
56075: CALL_OW 255
56079: PPUSH
56080: LD_EXP 73
56084: PUSH
56085: LD_VAR 0 2
56089: ARRAY
56090: PUSH
56091: LD_VAR 0 3
56095: ARRAY
56096: PUSH
56097: LD_INT 2
56099: ARRAY
56100: PPUSH
56101: LD_EXP 73
56105: PUSH
56106: LD_VAR 0 2
56110: ARRAY
56111: PUSH
56112: LD_VAR 0 3
56116: ARRAY
56117: PUSH
56118: LD_INT 3
56120: ARRAY
56121: PPUSH
56122: LD_INT 20
56124: PPUSH
56125: CALL 19516 0 4
56129: PUSH
56130: LD_INT 4
56132: ARRAY
56133: PUSH
56134: LD_INT 0
56136: EQUAL
56137: IFFALSE 56163
// begin target := mc_crates [ i ] [ j ] ;
56139: LD_ADDR_VAR 0 5
56143: PUSH
56144: LD_EXP 73
56148: PUSH
56149: LD_VAR 0 2
56153: ARRAY
56154: PUSH
56155: LD_VAR 0 3
56159: ARRAY
56160: ST_TO_ADDR
// break ;
56161: GO 56165
// end ; end ;
56163: GO 55904
56165: POP
56166: POP
// if not target then
56167: LD_VAR 0 5
56171: NOT
56172: IFFALSE 56176
// continue ;
56174: GO 55785
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
56176: LD_ADDR_VAR 0 6
56180: PUSH
56181: LD_EXP 76
56185: PUSH
56186: LD_VAR 0 2
56190: ARRAY
56191: PPUSH
56192: LD_INT 2
56194: PUSH
56195: LD_INT 3
56197: PUSH
56198: LD_INT 58
56200: PUSH
56201: EMPTY
56202: LIST
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 61
56210: PUSH
56211: EMPTY
56212: LIST
56213: PUSH
56214: LD_INT 33
56216: PUSH
56217: LD_INT 5
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 33
56226: PUSH
56227: LD_INT 3
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: LD_INT 34
56246: PUSH
56247: LD_INT 32
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 34
56256: PUSH
56257: LD_INT 51
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 34
56266: PUSH
56267: LD_INT 12
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PPUSH
56284: CALL_OW 72
56288: ST_TO_ADDR
// if not cargo then
56289: LD_VAR 0 6
56293: NOT
56294: IFFALSE 56688
// begin if mc_crates_collector [ i ] < 5 then
56296: LD_EXP 74
56300: PUSH
56301: LD_VAR 0 2
56305: ARRAY
56306: PUSH
56307: LD_INT 5
56309: LESS
56310: IFFALSE 56502
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
56312: LD_ADDR_VAR 0 4
56316: PUSH
56317: LD_EXP 57
56321: PUSH
56322: LD_VAR 0 2
56326: ARRAY
56327: PUSH
56328: LD_EXP 86
56332: PUSH
56333: LD_VAR 0 2
56337: ARRAY
56338: UNION
56339: PPUSH
56340: LD_INT 2
56342: PUSH
56343: LD_INT 25
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 25
56355: PUSH
56356: LD_INT 16
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 24
56370: PUSH
56371: LD_INT 750
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PPUSH
56382: CALL_OW 72
56386: ST_TO_ADDR
// if not tmp then
56387: LD_VAR 0 4
56391: NOT
56392: IFFALSE 56396
// continue ;
56394: GO 55785
// for j in tmp do
56396: LD_ADDR_VAR 0 3
56400: PUSH
56401: LD_VAR 0 4
56405: PUSH
56406: FOR_IN
56407: IFFALSE 56500
// if GetTag ( j ) = 0 then
56409: LD_VAR 0 3
56413: PPUSH
56414: CALL_OW 110
56418: PUSH
56419: LD_INT 0
56421: EQUAL
56422: IFFALSE 56498
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
56424: LD_ADDR_EXP 74
56428: PUSH
56429: LD_EXP 74
56433: PPUSH
56434: LD_VAR 0 2
56438: PUSH
56439: LD_EXP 74
56443: PUSH
56444: LD_VAR 0 2
56448: ARRAY
56449: PUSH
56450: LD_INT 1
56452: PLUS
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PPUSH
56458: LD_VAR 0 3
56462: PPUSH
56463: CALL 19022 0 3
56467: ST_TO_ADDR
// SetTag ( j , 107 ) ;
56468: LD_VAR 0 3
56472: PPUSH
56473: LD_INT 107
56475: PPUSH
56476: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
56480: LD_EXP 74
56484: PUSH
56485: LD_VAR 0 2
56489: ARRAY
56490: PUSH
56491: LD_INT 5
56493: GREATER
56494: IFFALSE 56498
// break ;
56496: GO 56500
// end ;
56498: GO 56406
56500: POP
56501: POP
// end ; if mc_crates_collector [ i ] and target then
56502: LD_EXP 74
56506: PUSH
56507: LD_VAR 0 2
56511: ARRAY
56512: PUSH
56513: LD_VAR 0 5
56517: AND
56518: IFFALSE 56686
// begin if mc_crates_collector [ i ] < target [ 1 ] then
56520: LD_EXP 74
56524: PUSH
56525: LD_VAR 0 2
56529: ARRAY
56530: PUSH
56531: LD_VAR 0 5
56535: PUSH
56536: LD_INT 1
56538: ARRAY
56539: LESS
56540: IFFALSE 56560
// tmp := mc_crates_collector [ i ] else
56542: LD_ADDR_VAR 0 4
56546: PUSH
56547: LD_EXP 74
56551: PUSH
56552: LD_VAR 0 2
56556: ARRAY
56557: ST_TO_ADDR
56558: GO 56574
// tmp := target [ 1 ] ;
56560: LD_ADDR_VAR 0 4
56564: PUSH
56565: LD_VAR 0 5
56569: PUSH
56570: LD_INT 1
56572: ARRAY
56573: ST_TO_ADDR
// for j = 1 to tmp do
56574: LD_ADDR_VAR 0 3
56578: PUSH
56579: DOUBLE
56580: LD_INT 1
56582: DEC
56583: ST_TO_ADDR
56584: LD_VAR 0 4
56588: PUSH
56589: FOR_TO
56590: IFFALSE 56684
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
56592: LD_EXP 74
56596: PUSH
56597: LD_VAR 0 2
56601: ARRAY
56602: PUSH
56603: LD_VAR 0 3
56607: ARRAY
56608: PPUSH
56609: CALL_OW 310
56613: IFFALSE 56636
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
56615: LD_EXP 74
56619: PUSH
56620: LD_VAR 0 2
56624: ARRAY
56625: PUSH
56626: LD_VAR 0 3
56630: ARRAY
56631: PPUSH
56632: CALL_OW 122
// wait ( 3 ) ;
56636: LD_INT 3
56638: PPUSH
56639: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
56643: LD_EXP 74
56647: PUSH
56648: LD_VAR 0 2
56652: ARRAY
56653: PUSH
56654: LD_VAR 0 3
56658: ARRAY
56659: PPUSH
56660: LD_VAR 0 5
56664: PUSH
56665: LD_INT 2
56667: ARRAY
56668: PPUSH
56669: LD_VAR 0 5
56673: PUSH
56674: LD_INT 3
56676: ARRAY
56677: PPUSH
56678: CALL_OW 117
// end ;
56682: GO 56589
56684: POP
56685: POP
// end ; end else
56686: GO 57151
// begin for j in cargo do
56688: LD_ADDR_VAR 0 3
56692: PUSH
56693: LD_VAR 0 6
56697: PUSH
56698: FOR_IN
56699: IFFALSE 57149
// begin if GetTag ( j ) <> 0 then
56701: LD_VAR 0 3
56705: PPUSH
56706: CALL_OW 110
56710: PUSH
56711: LD_INT 0
56713: NONEQUAL
56714: IFFALSE 56718
// continue ;
56716: GO 56698
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
56718: LD_VAR 0 3
56722: PPUSH
56723: CALL_OW 262
56727: PUSH
56728: LD_INT 2
56730: EQUAL
56731: PUSH
56732: LD_VAR 0 3
56736: PPUSH
56737: CALL_OW 261
56741: PUSH
56742: LD_INT 15
56744: LESS
56745: AND
56746: IFFALSE 56750
// continue ;
56748: GO 56698
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
56750: LD_VAR 0 3
56754: PPUSH
56755: CALL_OW 262
56759: PUSH
56760: LD_INT 1
56762: EQUAL
56763: PUSH
56764: LD_VAR 0 3
56768: PPUSH
56769: CALL_OW 261
56773: PUSH
56774: LD_INT 10
56776: LESS
56777: AND
56778: IFFALSE 57088
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56780: LD_ADDR_VAR 0 7
56784: PUSH
56785: LD_EXP 57
56789: PUSH
56790: LD_VAR 0 2
56794: ARRAY
56795: PPUSH
56796: LD_INT 2
56798: PUSH
56799: LD_INT 30
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 30
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: LIST
56823: PPUSH
56824: CALL_OW 72
56828: ST_TO_ADDR
// if not depot then
56829: LD_VAR 0 7
56833: NOT
56834: IFFALSE 56838
// continue ;
56836: GO 56698
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
56838: LD_VAR 0 3
56842: PPUSH
56843: LD_VAR 0 7
56847: PPUSH
56848: LD_VAR 0 3
56852: PPUSH
56853: CALL_OW 74
56857: PPUSH
56858: CALL_OW 296
56862: PUSH
56863: LD_INT 6
56865: LESS
56866: IFFALSE 56882
// SetFuel ( j , 100 ) else
56868: LD_VAR 0 3
56872: PPUSH
56873: LD_INT 100
56875: PPUSH
56876: CALL_OW 240
56880: GO 57088
// if GetFuel ( j ) = 0 then
56882: LD_VAR 0 3
56886: PPUSH
56887: CALL_OW 261
56891: PUSH
56892: LD_INT 0
56894: EQUAL
56895: IFFALSE 57088
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
56897: LD_ADDR_EXP 76
56901: PUSH
56902: LD_EXP 76
56906: PPUSH
56907: LD_VAR 0 2
56911: PPUSH
56912: LD_EXP 76
56916: PUSH
56917: LD_VAR 0 2
56921: ARRAY
56922: PUSH
56923: LD_VAR 0 3
56927: DIFF
56928: PPUSH
56929: CALL_OW 1
56933: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
56934: LD_VAR 0 3
56938: PPUSH
56939: CALL_OW 263
56943: PUSH
56944: LD_INT 1
56946: EQUAL
56947: IFFALSE 56963
// ComExitVehicle ( IsInUnit ( j ) ) ;
56949: LD_VAR 0 3
56953: PPUSH
56954: CALL_OW 310
56958: PPUSH
56959: CALL_OW 121
// if GetControl ( j ) = control_remote then
56963: LD_VAR 0 3
56967: PPUSH
56968: CALL_OW 263
56972: PUSH
56973: LD_INT 2
56975: EQUAL
56976: IFFALSE 56987
// ComUnlink ( j ) ;
56978: LD_VAR 0 3
56982: PPUSH
56983: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
56987: LD_ADDR_VAR 0 8
56991: PUSH
56992: LD_VAR 0 2
56996: PPUSH
56997: LD_INT 3
56999: PPUSH
57000: CALL 63604 0 2
57004: ST_TO_ADDR
// if fac then
57005: LD_VAR 0 8
57009: IFFALSE 57086
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
57011: LD_ADDR_VAR 0 9
57015: PUSH
57016: LD_VAR 0 8
57020: PPUSH
57021: LD_VAR 0 3
57025: PPUSH
57026: CALL_OW 265
57030: PPUSH
57031: LD_VAR 0 3
57035: PPUSH
57036: CALL_OW 262
57040: PPUSH
57041: LD_VAR 0 3
57045: PPUSH
57046: CALL_OW 263
57050: PPUSH
57051: LD_VAR 0 3
57055: PPUSH
57056: CALL_OW 264
57060: PPUSH
57061: CALL 16187 0 5
57065: ST_TO_ADDR
// if components then
57066: LD_VAR 0 9
57070: IFFALSE 57086
// MC_InsertProduceList ( i , components ) ;
57072: LD_VAR 0 2
57076: PPUSH
57077: LD_VAR 0 9
57081: PPUSH
57082: CALL 63267 0 2
// end ; continue ;
57086: GO 56698
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
57088: LD_VAR 0 3
57092: PPUSH
57093: LD_INT 1
57095: PPUSH
57096: CALL_OW 289
57100: PUSH
57101: LD_INT 100
57103: LESS
57104: PUSH
57105: LD_VAR 0 3
57109: PPUSH
57110: CALL_OW 314
57114: NOT
57115: AND
57116: IFFALSE 57145
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
57118: LD_VAR 0 3
57122: PPUSH
57123: LD_VAR 0 5
57127: PUSH
57128: LD_INT 2
57130: ARRAY
57131: PPUSH
57132: LD_VAR 0 5
57136: PUSH
57137: LD_INT 3
57139: ARRAY
57140: PPUSH
57141: CALL_OW 117
// break ;
57145: GO 57149
// end ;
57147: GO 56698
57149: POP
57150: POP
// end ; end ;
57151: GO 55785
57153: POP
57154: POP
// end ;
57155: LD_VAR 0 1
57159: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
57160: LD_INT 0
57162: PPUSH
57163: PPUSH
57164: PPUSH
57165: PPUSH
// if not mc_bases then
57166: LD_EXP 57
57170: NOT
57171: IFFALSE 57175
// exit ;
57173: GO 57336
// for i = 1 to mc_bases do
57175: LD_ADDR_VAR 0 2
57179: PUSH
57180: DOUBLE
57181: LD_INT 1
57183: DEC
57184: ST_TO_ADDR
57185: LD_EXP 57
57189: PUSH
57190: FOR_TO
57191: IFFALSE 57334
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
57193: LD_ADDR_VAR 0 4
57197: PUSH
57198: LD_EXP 76
57202: PUSH
57203: LD_VAR 0 2
57207: ARRAY
57208: PUSH
57209: LD_EXP 79
57213: PUSH
57214: LD_VAR 0 2
57218: ARRAY
57219: ADD
57220: PPUSH
57221: LD_INT 33
57223: PUSH
57224: LD_INT 2
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PPUSH
57231: CALL_OW 72
57235: ST_TO_ADDR
// if tmp then
57236: LD_VAR 0 4
57240: IFFALSE 57332
// for j in tmp do
57242: LD_ADDR_VAR 0 3
57246: PUSH
57247: LD_VAR 0 4
57251: PUSH
57252: FOR_IN
57253: IFFALSE 57330
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
57255: LD_VAR 0 3
57259: PPUSH
57260: CALL_OW 312
57264: NOT
57265: PUSH
57266: LD_VAR 0 3
57270: PPUSH
57271: CALL_OW 256
57275: PUSH
57276: LD_INT 250
57278: GREATEREQUAL
57279: AND
57280: IFFALSE 57293
// Connect ( j ) else
57282: LD_VAR 0 3
57286: PPUSH
57287: CALL 21510 0 1
57291: GO 57328
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
57293: LD_VAR 0 3
57297: PPUSH
57298: CALL_OW 256
57302: PUSH
57303: LD_INT 250
57305: LESS
57306: PUSH
57307: LD_VAR 0 3
57311: PPUSH
57312: CALL_OW 312
57316: AND
57317: IFFALSE 57328
// ComUnlink ( j ) ;
57319: LD_VAR 0 3
57323: PPUSH
57324: CALL_OW 136
57328: GO 57252
57330: POP
57331: POP
// end ;
57332: GO 57190
57334: POP
57335: POP
// end ;
57336: LD_VAR 0 1
57340: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
57341: LD_INT 0
57343: PPUSH
57344: PPUSH
57345: PPUSH
57346: PPUSH
57347: PPUSH
// if not mc_bases then
57348: LD_EXP 57
57352: NOT
57353: IFFALSE 57357
// exit ;
57355: GO 57817
// for i = 1 to mc_bases do
57357: LD_ADDR_VAR 0 2
57361: PUSH
57362: DOUBLE
57363: LD_INT 1
57365: DEC
57366: ST_TO_ADDR
57367: LD_EXP 57
57371: PUSH
57372: FOR_TO
57373: IFFALSE 57815
// begin if not mc_produce [ i ] then
57375: LD_EXP 78
57379: PUSH
57380: LD_VAR 0 2
57384: ARRAY
57385: NOT
57386: IFFALSE 57390
// continue ;
57388: GO 57372
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
57390: LD_ADDR_VAR 0 5
57394: PUSH
57395: LD_EXP 57
57399: PUSH
57400: LD_VAR 0 2
57404: ARRAY
57405: PPUSH
57406: LD_INT 30
57408: PUSH
57409: LD_INT 3
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PPUSH
57416: CALL_OW 72
57420: ST_TO_ADDR
// if not fac then
57421: LD_VAR 0 5
57425: NOT
57426: IFFALSE 57430
// continue ;
57428: GO 57372
// for j in fac do
57430: LD_ADDR_VAR 0 3
57434: PUSH
57435: LD_VAR 0 5
57439: PUSH
57440: FOR_IN
57441: IFFALSE 57811
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
57443: LD_VAR 0 3
57447: PPUSH
57448: CALL_OW 461
57452: PUSH
57453: LD_INT 2
57455: NONEQUAL
57456: PUSH
57457: LD_VAR 0 3
57461: PPUSH
57462: LD_INT 15
57464: PPUSH
57465: CALL 21213 0 2
57469: PUSH
57470: LD_INT 4
57472: ARRAY
57473: OR
57474: PUSH
57475: LD_VAR 0 3
57479: PPUSH
57480: CALL_OW 313
57484: PUSH
57485: LD_INT 0
57487: EQUAL
57488: OR
57489: IFFALSE 57493
// continue ;
57491: GO 57440
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
57493: LD_VAR 0 3
57497: PPUSH
57498: LD_EXP 78
57502: PUSH
57503: LD_VAR 0 2
57507: ARRAY
57508: PUSH
57509: LD_INT 1
57511: ARRAY
57512: PUSH
57513: LD_INT 1
57515: ARRAY
57516: PPUSH
57517: LD_EXP 78
57521: PUSH
57522: LD_VAR 0 2
57526: ARRAY
57527: PUSH
57528: LD_INT 1
57530: ARRAY
57531: PUSH
57532: LD_INT 2
57534: ARRAY
57535: PPUSH
57536: LD_EXP 78
57540: PUSH
57541: LD_VAR 0 2
57545: ARRAY
57546: PUSH
57547: LD_INT 1
57549: ARRAY
57550: PUSH
57551: LD_INT 3
57553: ARRAY
57554: PPUSH
57555: LD_EXP 78
57559: PUSH
57560: LD_VAR 0 2
57564: ARRAY
57565: PUSH
57566: LD_INT 1
57568: ARRAY
57569: PUSH
57570: LD_INT 4
57572: ARRAY
57573: PPUSH
57574: CALL_OW 448
57578: PUSH
57579: LD_VAR 0 3
57583: PPUSH
57584: LD_EXP 78
57588: PUSH
57589: LD_VAR 0 2
57593: ARRAY
57594: PUSH
57595: LD_INT 1
57597: ARRAY
57598: PUSH
57599: LD_INT 1
57601: ARRAY
57602: PUSH
57603: LD_EXP 78
57607: PUSH
57608: LD_VAR 0 2
57612: ARRAY
57613: PUSH
57614: LD_INT 1
57616: ARRAY
57617: PUSH
57618: LD_INT 2
57620: ARRAY
57621: PUSH
57622: LD_EXP 78
57626: PUSH
57627: LD_VAR 0 2
57631: ARRAY
57632: PUSH
57633: LD_INT 1
57635: ARRAY
57636: PUSH
57637: LD_INT 3
57639: ARRAY
57640: PUSH
57641: LD_EXP 78
57645: PUSH
57646: LD_VAR 0 2
57650: ARRAY
57651: PUSH
57652: LD_INT 1
57654: ARRAY
57655: PUSH
57656: LD_INT 4
57658: ARRAY
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: PPUSH
57666: CALL 24715 0 2
57670: AND
57671: IFFALSE 57809
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
57673: LD_VAR 0 3
57677: PPUSH
57678: LD_EXP 78
57682: PUSH
57683: LD_VAR 0 2
57687: ARRAY
57688: PUSH
57689: LD_INT 1
57691: ARRAY
57692: PUSH
57693: LD_INT 1
57695: ARRAY
57696: PPUSH
57697: LD_EXP 78
57701: PUSH
57702: LD_VAR 0 2
57706: ARRAY
57707: PUSH
57708: LD_INT 1
57710: ARRAY
57711: PUSH
57712: LD_INT 2
57714: ARRAY
57715: PPUSH
57716: LD_EXP 78
57720: PUSH
57721: LD_VAR 0 2
57725: ARRAY
57726: PUSH
57727: LD_INT 1
57729: ARRAY
57730: PUSH
57731: LD_INT 3
57733: ARRAY
57734: PPUSH
57735: LD_EXP 78
57739: PUSH
57740: LD_VAR 0 2
57744: ARRAY
57745: PUSH
57746: LD_INT 1
57748: ARRAY
57749: PUSH
57750: LD_INT 4
57752: ARRAY
57753: PPUSH
57754: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
57758: LD_ADDR_VAR 0 4
57762: PUSH
57763: LD_EXP 78
57767: PUSH
57768: LD_VAR 0 2
57772: ARRAY
57773: PPUSH
57774: LD_INT 1
57776: PPUSH
57777: CALL_OW 3
57781: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
57782: LD_ADDR_EXP 78
57786: PUSH
57787: LD_EXP 78
57791: PPUSH
57792: LD_VAR 0 2
57796: PPUSH
57797: LD_VAR 0 4
57801: PPUSH
57802: CALL_OW 1
57806: ST_TO_ADDR
// break ;
57807: GO 57811
// end ; end ;
57809: GO 57440
57811: POP
57812: POP
// end ;
57813: GO 57372
57815: POP
57816: POP
// end ;
57817: LD_VAR 0 1
57821: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
57822: LD_INT 0
57824: PPUSH
57825: PPUSH
57826: PPUSH
// if not mc_bases then
57827: LD_EXP 57
57831: NOT
57832: IFFALSE 57836
// exit ;
57834: GO 57925
// for i = 1 to mc_bases do
57836: LD_ADDR_VAR 0 2
57840: PUSH
57841: DOUBLE
57842: LD_INT 1
57844: DEC
57845: ST_TO_ADDR
57846: LD_EXP 57
57850: PUSH
57851: FOR_TO
57852: IFFALSE 57923
// begin if mc_attack [ i ] then
57854: LD_EXP 77
57858: PUSH
57859: LD_VAR 0 2
57863: ARRAY
57864: IFFALSE 57921
// begin tmp := mc_attack [ i ] [ 1 ] ;
57866: LD_ADDR_VAR 0 3
57870: PUSH
57871: LD_EXP 77
57875: PUSH
57876: LD_VAR 0 2
57880: ARRAY
57881: PUSH
57882: LD_INT 1
57884: ARRAY
57885: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
57886: LD_ADDR_EXP 77
57890: PUSH
57891: LD_EXP 77
57895: PPUSH
57896: LD_VAR 0 2
57900: PPUSH
57901: EMPTY
57902: PPUSH
57903: CALL_OW 1
57907: ST_TO_ADDR
// Attack ( tmp ) ;
57908: LD_VAR 0 3
57912: PPUSH
57913: CALL 46362 0 1
// exit ;
57917: POP
57918: POP
57919: GO 57925
// end ; end ;
57921: GO 57851
57923: POP
57924: POP
// end ;
57925: LD_VAR 0 1
57929: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
57930: LD_INT 0
57932: PPUSH
57933: PPUSH
57934: PPUSH
57935: PPUSH
57936: PPUSH
57937: PPUSH
57938: PPUSH
// if not mc_bases then
57939: LD_EXP 57
57943: NOT
57944: IFFALSE 57948
// exit ;
57946: GO 58293
// class := AllowSpecClass ( mc_defender [ 1 ] ) ;
57948: LD_ADDR_VAR 0 7
57952: PUSH
57953: LD_EXP 79
57957: PUSH
57958: LD_INT 1
57960: ARRAY
57961: PPUSH
57962: CALL 15527 0 1
57966: ST_TO_ADDR
// for i = 1 to mc_bases do
57967: LD_ADDR_VAR 0 2
57971: PUSH
57972: DOUBLE
57973: LD_INT 1
57975: DEC
57976: ST_TO_ADDR
57977: LD_EXP 57
57981: PUSH
57982: FOR_TO
57983: IFFALSE 58291
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ 1 ] ) , mc_scan_area [ i ] ) ) ;
57985: LD_ADDR_EXP 80
57989: PUSH
57990: LD_EXP 80
57994: PPUSH
57995: LD_VAR 0 2
57999: PPUSH
58000: LD_EXP 57
58004: PUSH
58005: LD_INT 1
58007: ARRAY
58008: PPUSH
58009: CALL_OW 255
58013: PPUSH
58014: LD_EXP 82
58018: PUSH
58019: LD_VAR 0 2
58023: ARRAY
58024: PPUSH
58025: CALL 13985 0 2
58029: PPUSH
58030: CALL_OW 1
58034: ST_TO_ADDR
// if not mc_scan [ i ] then
58035: LD_EXP 80
58039: PUSH
58040: LD_VAR 0 2
58044: ARRAY
58045: NOT
58046: IFFALSE 58198
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
58048: LD_ADDR_VAR 0 4
58052: PUSH
58053: LD_EXP 57
58057: PUSH
58058: LD_VAR 0 2
58062: ARRAY
58063: PPUSH
58064: LD_INT 2
58066: PUSH
58067: LD_INT 25
58069: PUSH
58070: LD_INT 5
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 25
58079: PUSH
58080: LD_INT 8
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 25
58089: PUSH
58090: LD_INT 9
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: PPUSH
58103: CALL_OW 72
58107: ST_TO_ADDR
// if not tmp then
58108: LD_VAR 0 4
58112: NOT
58113: IFFALSE 58117
// continue ;
58115: GO 57982
// for j in tmp do
58117: LD_ADDR_VAR 0 3
58121: PUSH
58122: LD_VAR 0 4
58126: PUSH
58127: FOR_IN
58128: IFFALSE 58196
// if GetBType ( IsInUnit ( j ) ) in [ b_barracks ] and GetClass ( j ) = 1 and not MineOfUnit ( j ) then
58130: LD_VAR 0 3
58134: PPUSH
58135: CALL_OW 310
58139: PPUSH
58140: CALL_OW 266
58144: PUSH
58145: LD_INT 5
58147: PUSH
58148: EMPTY
58149: LIST
58150: IN
58151: PUSH
58152: LD_VAR 0 3
58156: PPUSH
58157: CALL_OW 257
58161: PUSH
58162: LD_INT 1
58164: EQUAL
58165: AND
58166: PUSH
58167: LD_VAR 0 3
58171: PPUSH
58172: CALL_OW 459
58176: NOT
58177: AND
58178: IFFALSE 58194
// ComChangeProfession ( j , class ) ;
58180: LD_VAR 0 3
58184: PPUSH
58185: LD_VAR 0 7
58189: PPUSH
58190: CALL_OW 123
58194: GO 58127
58196: POP
58197: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
58198: LD_EXP 80
58202: PUSH
58203: LD_VAR 0 2
58207: ARRAY
58208: PUSH
58209: LD_EXP 79
58213: PUSH
58214: LD_VAR 0 2
58218: ARRAY
58219: AND
58220: IFFALSE 58289
// begin tmp := mc_defender [ i ] ;
58222: LD_ADDR_VAR 0 4
58226: PUSH
58227: LD_EXP 79
58231: PUSH
58232: LD_VAR 0 2
58236: ARRAY
58237: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
58238: LD_ADDR_EXP 79
58242: PUSH
58243: LD_EXP 79
58247: PPUSH
58248: LD_VAR 0 2
58252: PPUSH
58253: EMPTY
58254: PPUSH
58255: CALL_OW 1
58259: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
58260: LD_VAR 0 2
58264: PPUSH
58265: LD_VAR 0 4
58269: PPUSH
58270: LD_EXP 80
58274: PUSH
58275: LD_VAR 0 2
58279: ARRAY
58280: PPUSH
58281: CALL 14020 0 3
// exit ;
58285: POP
58286: POP
58287: GO 58293
// end ; end ;
58289: GO 57982
58291: POP
58292: POP
// end ;
58293: LD_VAR 0 1
58297: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
58298: LD_INT 0
58300: PPUSH
58301: PPUSH
58302: PPUSH
58303: PPUSH
58304: PPUSH
58305: PPUSH
58306: PPUSH
58307: PPUSH
58308: PPUSH
// if not mc_bases then
58309: LD_EXP 57
58313: NOT
58314: IFFALSE 58318
// exit ;
58316: GO 59262
// for i = 1 to mc_bases do
58318: LD_ADDR_VAR 0 2
58322: PUSH
58323: DOUBLE
58324: LD_INT 1
58326: DEC
58327: ST_TO_ADDR
58328: LD_EXP 57
58332: PUSH
58333: FOR_TO
58334: IFFALSE 59260
// begin tmp := mc_lab [ i ] ;
58336: LD_ADDR_VAR 0 6
58340: PUSH
58341: LD_EXP 90
58345: PUSH
58346: LD_VAR 0 2
58350: ARRAY
58351: ST_TO_ADDR
// if not tmp then
58352: LD_VAR 0 6
58356: NOT
58357: IFFALSE 58361
// continue ;
58359: GO 58333
// for j in tmp do
58361: LD_ADDR_VAR 0 3
58365: PUSH
58366: LD_VAR 0 6
58370: PUSH
58371: FOR_IN
58372: IFFALSE 59256
// begin side := GetSide ( j ) ;
58374: LD_ADDR_VAR 0 4
58378: PUSH
58379: LD_VAR 0 3
58383: PPUSH
58384: CALL_OW 255
58388: ST_TO_ADDR
// if not mc_tech [ side ] then
58389: LD_EXP 84
58393: PUSH
58394: LD_VAR 0 4
58398: ARRAY
58399: NOT
58400: IFFALSE 58404
// continue ;
58402: GO 58371
// if BuildingStatus ( j ) = bs_idle then
58404: LD_VAR 0 3
58408: PPUSH
58409: CALL_OW 461
58413: PUSH
58414: LD_INT 2
58416: EQUAL
58417: IFFALSE 58490
// for t in mc_tech [ side ] do
58419: LD_ADDR_VAR 0 5
58423: PUSH
58424: LD_EXP 84
58428: PUSH
58429: LD_VAR 0 4
58433: ARRAY
58434: PUSH
58435: FOR_IN
58436: IFFALSE 58488
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
58438: LD_VAR 0 3
58442: PPUSH
58443: LD_VAR 0 5
58447: PPUSH
58448: CALL_OW 430
58452: PUSH
58453: LD_VAR 0 4
58457: PPUSH
58458: LD_VAR 0 5
58462: PPUSH
58463: CALL 13093 0 2
58467: AND
58468: IFFALSE 58486
// begin ComResearch ( j , t ) ;
58470: LD_VAR 0 3
58474: PPUSH
58475: LD_VAR 0 5
58479: PPUSH
58480: CALL_OW 124
// break ;
58484: GO 58488
// end ;
58486: GO 58435
58488: POP
58489: POP
// if BuildingStatus ( j ) = bs_need_ape then
58490: LD_VAR 0 3
58494: PPUSH
58495: CALL_OW 461
58499: PUSH
58500: LD_INT 10
58502: EQUAL
58503: IFFALSE 59091
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
58505: LD_EXP 86
58509: PUSH
58510: LD_VAR 0 2
58514: ARRAY
58515: NOT
58516: PUSH
58517: LD_EXP 87
58521: PUSH
58522: LD_VAR 0 2
58526: ARRAY
58527: NOT
58528: AND
58529: PUSH
58530: LD_EXP 84
58534: PUSH
58535: LD_VAR 0 4
58539: ARRAY
58540: PUSH
58541: LD_INT 1
58543: GREATER
58544: AND
58545: IFFALSE 58676
// begin ComCancel ( j ) ;
58547: LD_VAR 0 3
58551: PPUSH
58552: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
58556: LD_ADDR_EXP 84
58560: PUSH
58561: LD_EXP 84
58565: PPUSH
58566: LD_VAR 0 4
58570: PPUSH
58571: LD_EXP 84
58575: PUSH
58576: LD_VAR 0 4
58580: ARRAY
58581: PPUSH
58582: LD_EXP 84
58586: PUSH
58587: LD_VAR 0 4
58591: ARRAY
58592: PUSH
58593: LD_INT 1
58595: MINUS
58596: PPUSH
58597: LD_EXP 84
58601: PUSH
58602: LD_VAR 0 4
58606: ARRAY
58607: PPUSH
58608: LD_INT 0
58610: PPUSH
58611: CALL 18005 0 4
58615: PPUSH
58616: CALL_OW 1
58620: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
58621: LD_ADDR_EXP 84
58625: PUSH
58626: LD_EXP 84
58630: PPUSH
58631: LD_VAR 0 4
58635: PPUSH
58636: LD_EXP 84
58640: PUSH
58641: LD_VAR 0 4
58645: ARRAY
58646: PPUSH
58647: LD_EXP 84
58651: PUSH
58652: LD_VAR 0 4
58656: ARRAY
58657: PPUSH
58658: LD_INT 1
58660: PPUSH
58661: LD_INT 0
58663: PPUSH
58664: CALL 18005 0 4
58668: PPUSH
58669: CALL_OW 1
58673: ST_TO_ADDR
// continue ;
58674: GO 58371
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
58676: LD_EXP 86
58680: PUSH
58681: LD_VAR 0 2
58685: ARRAY
58686: PUSH
58687: LD_EXP 87
58691: PUSH
58692: LD_VAR 0 2
58696: ARRAY
58697: NOT
58698: AND
58699: IFFALSE 58826
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
58701: LD_ADDR_EXP 87
58705: PUSH
58706: LD_EXP 87
58710: PPUSH
58711: LD_VAR 0 2
58715: PUSH
58716: LD_EXP 87
58720: PUSH
58721: LD_VAR 0 2
58725: ARRAY
58726: PUSH
58727: LD_INT 1
58729: PLUS
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PPUSH
58735: LD_EXP 86
58739: PUSH
58740: LD_VAR 0 2
58744: ARRAY
58745: PUSH
58746: LD_INT 1
58748: ARRAY
58749: PPUSH
58750: CALL 19022 0 3
58754: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
58755: LD_EXP 86
58759: PUSH
58760: LD_VAR 0 2
58764: ARRAY
58765: PUSH
58766: LD_INT 1
58768: ARRAY
58769: PPUSH
58770: LD_INT 112
58772: PPUSH
58773: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
58777: LD_ADDR_VAR 0 9
58781: PUSH
58782: LD_EXP 86
58786: PUSH
58787: LD_VAR 0 2
58791: ARRAY
58792: PPUSH
58793: LD_INT 1
58795: PPUSH
58796: CALL_OW 3
58800: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
58801: LD_ADDR_EXP 86
58805: PUSH
58806: LD_EXP 86
58810: PPUSH
58811: LD_VAR 0 2
58815: PPUSH
58816: LD_VAR 0 9
58820: PPUSH
58821: CALL_OW 1
58825: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
58826: LD_EXP 86
58830: PUSH
58831: LD_VAR 0 2
58835: ARRAY
58836: PUSH
58837: LD_EXP 87
58841: PUSH
58842: LD_VAR 0 2
58846: ARRAY
58847: AND
58848: PUSH
58849: LD_EXP 87
58853: PUSH
58854: LD_VAR 0 2
58858: ARRAY
58859: PUSH
58860: LD_INT 1
58862: ARRAY
58863: PPUSH
58864: CALL_OW 310
58868: NOT
58869: AND
58870: PUSH
58871: LD_VAR 0 3
58875: PPUSH
58876: CALL_OW 313
58880: PUSH
58881: LD_INT 6
58883: EQUAL
58884: AND
58885: IFFALSE 58941
// begin tmp2 := UnitsInside ( j ) ;
58887: LD_ADDR_VAR 0 9
58891: PUSH
58892: LD_VAR 0 3
58896: PPUSH
58897: CALL_OW 313
58901: ST_TO_ADDR
// if tmp2 = 6 then
58902: LD_VAR 0 9
58906: PUSH
58907: LD_INT 6
58909: EQUAL
58910: IFFALSE 58941
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
58912: LD_VAR 0 9
58916: PUSH
58917: LD_INT 1
58919: ARRAY
58920: PPUSH
58921: LD_INT 112
58923: PPUSH
58924: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
58928: LD_VAR 0 9
58932: PUSH
58933: LD_INT 1
58935: ARRAY
58936: PPUSH
58937: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
58941: LD_EXP 87
58945: PUSH
58946: LD_VAR 0 2
58950: ARRAY
58951: PUSH
58952: LD_EXP 87
58956: PUSH
58957: LD_VAR 0 2
58961: ARRAY
58962: PUSH
58963: LD_INT 1
58965: ARRAY
58966: PPUSH
58967: CALL_OW 314
58971: NOT
58972: AND
58973: PUSH
58974: LD_EXP 87
58978: PUSH
58979: LD_VAR 0 2
58983: ARRAY
58984: PUSH
58985: LD_INT 1
58987: ARRAY
58988: PPUSH
58989: CALL_OW 310
58993: NOT
58994: AND
58995: IFFALSE 59021
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
58997: LD_EXP 87
59001: PUSH
59002: LD_VAR 0 2
59006: ARRAY
59007: PUSH
59008: LD_INT 1
59010: ARRAY
59011: PPUSH
59012: LD_VAR 0 3
59016: PPUSH
59017: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
59021: LD_EXP 87
59025: PUSH
59026: LD_VAR 0 2
59030: ARRAY
59031: PUSH
59032: LD_INT 1
59034: ARRAY
59035: PPUSH
59036: CALL_OW 310
59040: PUSH
59041: LD_EXP 87
59045: PUSH
59046: LD_VAR 0 2
59050: ARRAY
59051: PUSH
59052: LD_INT 1
59054: ARRAY
59055: PPUSH
59056: CALL_OW 310
59060: PPUSH
59061: CALL_OW 461
59065: PUSH
59066: LD_INT 3
59068: NONEQUAL
59069: AND
59070: IFFALSE 59091
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
59072: LD_EXP 87
59076: PUSH
59077: LD_VAR 0 2
59081: ARRAY
59082: PUSH
59083: LD_INT 1
59085: ARRAY
59086: PPUSH
59087: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
59091: LD_VAR 0 3
59095: PPUSH
59096: CALL_OW 461
59100: PUSH
59101: LD_INT 6
59103: EQUAL
59104: PUSH
59105: LD_VAR 0 6
59109: PUSH
59110: LD_INT 1
59112: GREATER
59113: AND
59114: IFFALSE 59254
// begin sci := [ ] ;
59116: LD_ADDR_VAR 0 8
59120: PUSH
59121: EMPTY
59122: ST_TO_ADDR
// for x in tmp diff j do
59123: LD_ADDR_VAR 0 7
59127: PUSH
59128: LD_VAR 0 6
59132: PUSH
59133: LD_VAR 0 3
59137: DIFF
59138: PUSH
59139: FOR_IN
59140: IFFALSE 59180
// begin if BuildingStatus ( x ) = bs_idle then
59142: LD_VAR 0 7
59146: PPUSH
59147: CALL_OW 461
59151: PUSH
59152: LD_INT 2
59154: EQUAL
59155: IFFALSE 59178
// sci := sci ^ UnitsInside ( x ) ;
59157: LD_ADDR_VAR 0 8
59161: PUSH
59162: LD_VAR 0 8
59166: PUSH
59167: LD_VAR 0 7
59171: PPUSH
59172: CALL_OW 313
59176: ADD
59177: ST_TO_ADDR
// end ;
59178: GO 59139
59180: POP
59181: POP
// if not sci then
59182: LD_VAR 0 8
59186: NOT
59187: IFFALSE 59191
// continue ;
59189: GO 58371
// for x in sci do
59191: LD_ADDR_VAR 0 7
59195: PUSH
59196: LD_VAR 0 8
59200: PUSH
59201: FOR_IN
59202: IFFALSE 59252
// if IsInUnit ( x ) and not HasTask ( x ) then
59204: LD_VAR 0 7
59208: PPUSH
59209: CALL_OW 310
59213: PUSH
59214: LD_VAR 0 7
59218: PPUSH
59219: CALL_OW 314
59223: NOT
59224: AND
59225: IFFALSE 59250
// begin ComExitBuilding ( x ) ;
59227: LD_VAR 0 7
59231: PPUSH
59232: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
59236: LD_VAR 0 7
59240: PPUSH
59241: LD_VAR 0 3
59245: PPUSH
59246: CALL_OW 180
// end ;
59250: GO 59201
59252: POP
59253: POP
// end ; end ;
59254: GO 58371
59256: POP
59257: POP
// end ;
59258: GO 58333
59260: POP
59261: POP
// end ;
59262: LD_VAR 0 1
59266: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
59267: LD_INT 0
59269: PPUSH
59270: PPUSH
59271: PPUSH
59272: PPUSH
59273: PPUSH
59274: PPUSH
// if not mc_bases then
59275: LD_EXP 57
59279: NOT
59280: IFFALSE 59284
// exit ;
59282: GO 59523
// for i = 1 to 8 do
59284: LD_ADDR_VAR 0 2
59288: PUSH
59289: DOUBLE
59290: LD_INT 1
59292: DEC
59293: ST_TO_ADDR
59294: LD_INT 8
59296: PUSH
59297: FOR_TO
59298: IFFALSE 59324
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
59300: LD_ADDR_EXP 84
59304: PUSH
59305: LD_EXP 84
59309: PPUSH
59310: LD_VAR 0 2
59314: PPUSH
59315: EMPTY
59316: PPUSH
59317: CALL_OW 1
59321: ST_TO_ADDR
59322: GO 59297
59324: POP
59325: POP
// tmp := [ ] ;
59326: LD_ADDR_VAR 0 5
59330: PUSH
59331: EMPTY
59332: ST_TO_ADDR
// for i = 1 to mc_sides do
59333: LD_ADDR_VAR 0 2
59337: PUSH
59338: DOUBLE
59339: LD_INT 1
59341: DEC
59342: ST_TO_ADDR
59343: LD_EXP 83
59347: PUSH
59348: FOR_TO
59349: IFFALSE 59407
// if not mc_sides [ i ] in tmp then
59351: LD_EXP 83
59355: PUSH
59356: LD_VAR 0 2
59360: ARRAY
59361: PUSH
59362: LD_VAR 0 5
59366: IN
59367: NOT
59368: IFFALSE 59405
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
59370: LD_ADDR_VAR 0 5
59374: PUSH
59375: LD_VAR 0 5
59379: PPUSH
59380: LD_VAR 0 5
59384: PUSH
59385: LD_INT 1
59387: PLUS
59388: PPUSH
59389: LD_EXP 83
59393: PUSH
59394: LD_VAR 0 2
59398: ARRAY
59399: PPUSH
59400: CALL_OW 2
59404: ST_TO_ADDR
59405: GO 59348
59407: POP
59408: POP
// if not tmp then
59409: LD_VAR 0 5
59413: NOT
59414: IFFALSE 59418
// exit ;
59416: GO 59523
// for j in tmp do
59418: LD_ADDR_VAR 0 3
59422: PUSH
59423: LD_VAR 0 5
59427: PUSH
59428: FOR_IN
59429: IFFALSE 59521
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
59431: LD_ADDR_VAR 0 6
59435: PUSH
59436: LD_INT 22
59438: PUSH
59439: LD_VAR 0 3
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PPUSH
59448: CALL_OW 69
59452: ST_TO_ADDR
// if not un then
59453: LD_VAR 0 6
59457: NOT
59458: IFFALSE 59462
// continue ;
59460: GO 59428
// nation := GetNation ( un [ 1 ] ) ;
59462: LD_ADDR_VAR 0 4
59466: PUSH
59467: LD_VAR 0 6
59471: PUSH
59472: LD_INT 1
59474: ARRAY
59475: PPUSH
59476: CALL_OW 248
59480: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
59481: LD_ADDR_EXP 84
59485: PUSH
59486: LD_EXP 84
59490: PPUSH
59491: LD_VAR 0 3
59495: PPUSH
59496: LD_VAR 0 3
59500: PPUSH
59501: LD_VAR 0 4
59505: PPUSH
59506: LD_INT 1
59508: PPUSH
59509: CALL 12456 0 3
59513: PPUSH
59514: CALL_OW 1
59518: ST_TO_ADDR
// end ;
59519: GO 59428
59521: POP
59522: POP
// end ;
59523: LD_VAR 0 1
59527: RET
// export function MC_InitSides ( ) ; var i ; begin
59528: LD_INT 0
59530: PPUSH
59531: PPUSH
// if not mc_bases then
59532: LD_EXP 57
59536: NOT
59537: IFFALSE 59541
// exit ;
59539: GO 59615
// for i = 1 to mc_bases do
59541: LD_ADDR_VAR 0 2
59545: PUSH
59546: DOUBLE
59547: LD_INT 1
59549: DEC
59550: ST_TO_ADDR
59551: LD_EXP 57
59555: PUSH
59556: FOR_TO
59557: IFFALSE 59613
// if mc_bases [ i ] then
59559: LD_EXP 57
59563: PUSH
59564: LD_VAR 0 2
59568: ARRAY
59569: IFFALSE 59611
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
59571: LD_ADDR_EXP 83
59575: PUSH
59576: LD_EXP 83
59580: PPUSH
59581: LD_VAR 0 2
59585: PPUSH
59586: LD_EXP 57
59590: PUSH
59591: LD_VAR 0 2
59595: ARRAY
59596: PUSH
59597: LD_INT 1
59599: ARRAY
59600: PPUSH
59601: CALL_OW 255
59605: PPUSH
59606: CALL_OW 1
59610: ST_TO_ADDR
59611: GO 59556
59613: POP
59614: POP
// end ;
59615: LD_VAR 0 1
59619: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
59620: LD_INT 0
59622: PPUSH
59623: PPUSH
59624: PPUSH
59625: PPUSH
59626: PPUSH
59627: PPUSH
59628: PPUSH
59629: PPUSH
// if not mc_bases then
59630: LD_EXP 57
59634: NOT
59635: IFFALSE 59639
// exit ;
59637: GO 60284
// for i = 1 to mc_bases do
59639: LD_ADDR_VAR 0 2
59643: PUSH
59644: DOUBLE
59645: LD_INT 1
59647: DEC
59648: ST_TO_ADDR
59649: LD_EXP 57
59653: PUSH
59654: FOR_TO
59655: IFFALSE 60282
// begin if not mc_bases [ i ] then
59657: LD_EXP 57
59661: PUSH
59662: LD_VAR 0 2
59666: ARRAY
59667: NOT
59668: IFFALSE 59672
// continue ;
59670: GO 59654
// if mc_scan [ i ] then
59672: LD_EXP 80
59676: PUSH
59677: LD_VAR 0 2
59681: ARRAY
59682: IFFALSE 59708
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
59684: LD_ADDR_EXP 69
59688: PUSH
59689: LD_EXP 69
59693: PPUSH
59694: LD_VAR 0 2
59698: PPUSH
59699: EMPTY
59700: PPUSH
59701: CALL_OW 1
59705: ST_TO_ADDR
// continue ;
59706: GO 59654
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
59708: LD_ADDR_VAR 0 5
59712: PUSH
59713: LD_EXP 57
59717: PUSH
59718: LD_VAR 0 2
59722: ARRAY
59723: PUSH
59724: LD_INT 1
59726: ARRAY
59727: PPUSH
59728: CALL_OW 255
59732: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
59733: LD_ADDR_VAR 0 6
59737: PUSH
59738: LD_EXP 57
59742: PUSH
59743: LD_VAR 0 2
59747: ARRAY
59748: PPUSH
59749: LD_INT 30
59751: PUSH
59752: LD_INT 3
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PPUSH
59759: CALL_OW 72
59763: ST_TO_ADDR
// if not fac then
59764: LD_VAR 0 6
59768: NOT
59769: IFFALSE 59820
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
59771: LD_ADDR_VAR 0 6
59775: PUSH
59776: LD_EXP 57
59780: PUSH
59781: LD_VAR 0 2
59785: ARRAY
59786: PPUSH
59787: LD_INT 2
59789: PUSH
59790: LD_INT 30
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 30
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: LIST
59814: PPUSH
59815: CALL_OW 72
59819: ST_TO_ADDR
// if not fac then
59820: LD_VAR 0 6
59824: NOT
59825: IFFALSE 59829
// continue ;
59827: GO 59654
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
59829: LD_ADDR_VAR 0 7
59833: PUSH
59834: LD_EXP 81
59838: PUSH
59839: LD_VAR 0 2
59843: ARRAY
59844: PPUSH
59845: LD_INT 22
59847: PUSH
59848: LD_VAR 0 5
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 21
59859: PUSH
59860: LD_INT 2
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 3
59869: PUSH
59870: LD_INT 24
59872: PUSH
59873: LD_INT 1000
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: LIST
59888: PPUSH
59889: CALL_OW 70
59893: PUSH
59894: LD_INT 22
59896: PUSH
59897: LD_VAR 0 5
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 91
59908: PUSH
59909: LD_VAR 0 6
59913: PUSH
59914: LD_INT 1
59916: ARRAY
59917: PUSH
59918: LD_INT 25
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 21
59928: PUSH
59929: LD_INT 2
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 3
59938: PUSH
59939: LD_INT 24
59941: PUSH
59942: LD_INT 1000
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: PPUSH
59959: CALL_OW 69
59963: UNION
59964: ST_TO_ADDR
// if not vehs then
59965: LD_VAR 0 7
59969: NOT
59970: IFFALSE 59996
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
59972: LD_ADDR_EXP 69
59976: PUSH
59977: LD_EXP 69
59981: PPUSH
59982: LD_VAR 0 2
59986: PPUSH
59987: EMPTY
59988: PPUSH
59989: CALL_OW 1
59993: ST_TO_ADDR
// continue ;
59994: GO 59654
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
59996: LD_ADDR_VAR 0 8
60000: PUSH
60001: LD_EXP 57
60005: PUSH
60006: LD_VAR 0 2
60010: ARRAY
60011: PPUSH
60012: LD_INT 30
60014: PUSH
60015: LD_INT 3
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PPUSH
60022: CALL_OW 72
60026: ST_TO_ADDR
// if tmp then
60027: LD_VAR 0 8
60031: IFFALSE 60134
// begin for j in tmp do
60033: LD_ADDR_VAR 0 3
60037: PUSH
60038: LD_VAR 0 8
60042: PUSH
60043: FOR_IN
60044: IFFALSE 60132
// for k in UnitsInside ( j ) do
60046: LD_ADDR_VAR 0 4
60050: PUSH
60051: LD_VAR 0 3
60055: PPUSH
60056: CALL_OW 313
60060: PUSH
60061: FOR_IN
60062: IFFALSE 60128
// if k then
60064: LD_VAR 0 4
60068: IFFALSE 60126
// if not k in mc_repair_vehicle [ i ] then
60070: LD_VAR 0 4
60074: PUSH
60075: LD_EXP 69
60079: PUSH
60080: LD_VAR 0 2
60084: ARRAY
60085: IN
60086: NOT
60087: IFFALSE 60126
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
60089: LD_ADDR_EXP 69
60093: PUSH
60094: LD_EXP 69
60098: PPUSH
60099: LD_VAR 0 2
60103: PPUSH
60104: LD_EXP 69
60108: PUSH
60109: LD_VAR 0 2
60113: ARRAY
60114: PUSH
60115: LD_VAR 0 4
60119: UNION
60120: PPUSH
60121: CALL_OW 1
60125: ST_TO_ADDR
60126: GO 60061
60128: POP
60129: POP
60130: GO 60043
60132: POP
60133: POP
// end ; if not mc_repair_vehicle [ i ] then
60134: LD_EXP 69
60138: PUSH
60139: LD_VAR 0 2
60143: ARRAY
60144: NOT
60145: IFFALSE 60149
// continue ;
60147: GO 59654
// for j in mc_repair_vehicle [ i ] do
60149: LD_ADDR_VAR 0 3
60153: PUSH
60154: LD_EXP 69
60158: PUSH
60159: LD_VAR 0 2
60163: ARRAY
60164: PUSH
60165: FOR_IN
60166: IFFALSE 60278
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
60168: LD_VAR 0 3
60172: PPUSH
60173: CALL_OW 311
60177: NOT
60178: PUSH
60179: LD_VAR 0 3
60183: PUSH
60184: LD_EXP 60
60188: PUSH
60189: LD_VAR 0 2
60193: ARRAY
60194: PUSH
60195: LD_INT 1
60197: ARRAY
60198: IN
60199: NOT
60200: AND
60201: PUSH
60202: LD_VAR 0 3
60206: PUSH
60207: LD_EXP 60
60211: PUSH
60212: LD_VAR 0 2
60216: ARRAY
60217: PUSH
60218: LD_INT 2
60220: ARRAY
60221: IN
60222: NOT
60223: AND
60224: IFFALSE 60276
// begin if IsInUnit ( j ) then
60226: LD_VAR 0 3
60230: PPUSH
60231: CALL_OW 310
60235: IFFALSE 60246
// ComExitBuilding ( j ) ;
60237: LD_VAR 0 3
60241: PPUSH
60242: CALL_OW 122
// if not HasTask ( j ) then
60246: LD_VAR 0 3
60250: PPUSH
60251: CALL_OW 314
60255: NOT
60256: IFFALSE 60276
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
60258: LD_VAR 0 3
60262: PPUSH
60263: LD_VAR 0 7
60267: PUSH
60268: LD_INT 1
60270: ARRAY
60271: PPUSH
60272: CALL_OW 189
// end ; end ;
60276: GO 60165
60278: POP
60279: POP
// end ;
60280: GO 59654
60282: POP
60283: POP
// end ;
60284: LD_VAR 0 1
60288: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp ; begin
60289: LD_INT 0
60291: PPUSH
60292: PPUSH
60293: PPUSH
60294: PPUSH
60295: PPUSH
60296: PPUSH
60297: PPUSH
60298: PPUSH
// if not mc_bases then
60299: LD_EXP 57
60303: NOT
60304: IFFALSE 60308
// exit ;
60306: GO 60841
// for i = 1 to mc_bases do
60308: LD_ADDR_VAR 0 2
60312: PUSH
60313: DOUBLE
60314: LD_INT 1
60316: DEC
60317: ST_TO_ADDR
60318: LD_EXP 57
60322: PUSH
60323: FOR_TO
60324: IFFALSE 60839
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
60326: LD_EXP 85
60330: PUSH
60331: LD_VAR 0 2
60335: ARRAY
60336: NOT
60337: PUSH
60338: LD_EXP 60
60342: PUSH
60343: LD_VAR 0 2
60347: ARRAY
60348: PUSH
60349: LD_INT 1
60351: ARRAY
60352: OR
60353: PUSH
60354: LD_EXP 60
60358: PUSH
60359: LD_VAR 0 2
60363: ARRAY
60364: PUSH
60365: LD_INT 2
60367: ARRAY
60368: OR
60369: PUSH
60370: LD_EXP 83
60374: PUSH
60375: LD_VAR 0 2
60379: ARRAY
60380: PPUSH
60381: LD_INT 1
60383: PPUSH
60384: CALL_OW 325
60388: NOT
60389: OR
60390: PUSH
60391: LD_EXP 80
60395: PUSH
60396: LD_VAR 0 2
60400: ARRAY
60401: OR
60402: IFFALSE 60406
// continue ;
60404: GO 60323
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
60406: LD_ADDR_VAR 0 8
60410: PUSH
60411: LD_EXP 57
60415: PUSH
60416: LD_VAR 0 2
60420: ARRAY
60421: PPUSH
60422: LD_INT 25
60424: PUSH
60425: LD_INT 4
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 50
60434: PUSH
60435: EMPTY
60436: LIST
60437: PUSH
60438: LD_INT 3
60440: PUSH
60441: LD_INT 60
60443: PUSH
60444: EMPTY
60445: LIST
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: LIST
60455: PPUSH
60456: CALL_OW 72
60460: PUSH
60461: LD_EXP 61
60465: PUSH
60466: LD_VAR 0 2
60470: ARRAY
60471: DIFF
60472: ST_TO_ADDR
// if not tmp then
60473: LD_VAR 0 8
60477: NOT
60478: IFFALSE 60482
// continue ;
60480: GO 60323
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
60482: LD_ADDR_VAR 0 7
60486: PUSH
60487: LD_EXP 85
60491: PUSH
60492: LD_VAR 0 2
60496: ARRAY
60497: PPUSH
60498: LD_INT 22
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 25
60510: PUSH
60511: LD_INT 12
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PPUSH
60522: CALL_OW 70
60526: ST_TO_ADDR
// if not apes then
60527: LD_VAR 0 7
60531: NOT
60532: IFFALSE 60582
// begin if mc_taming [ i ] then
60534: LD_EXP 88
60538: PUSH
60539: LD_VAR 0 2
60543: ARRAY
60544: IFFALSE 60580
// begin MC_Reset ( i , 121 ) ;
60546: LD_VAR 0 2
60550: PPUSH
60551: LD_INT 121
60553: PPUSH
60554: CALL 51464 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
60558: LD_ADDR_EXP 88
60562: PUSH
60563: LD_EXP 88
60567: PPUSH
60568: LD_VAR 0 2
60572: PPUSH
60573: EMPTY
60574: PPUSH
60575: CALL_OW 1
60579: ST_TO_ADDR
// end ; continue ;
60580: GO 60323
// end ; for j in tmp do
60582: LD_ADDR_VAR 0 3
60586: PUSH
60587: LD_VAR 0 8
60591: PUSH
60592: FOR_IN
60593: IFFALSE 60835
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
60595: LD_VAR 0 3
60599: PUSH
60600: LD_EXP 88
60604: PUSH
60605: LD_VAR 0 2
60609: ARRAY
60610: IN
60611: NOT
60612: PUSH
60613: LD_EXP 88
60617: PUSH
60618: LD_VAR 0 2
60622: ARRAY
60623: PUSH
60624: LD_INT 3
60626: LESS
60627: AND
60628: IFFALSE 60686
// begin SetTag ( j , 121 ) ;
60630: LD_VAR 0 3
60634: PPUSH
60635: LD_INT 121
60637: PPUSH
60638: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
60642: LD_ADDR_EXP 88
60646: PUSH
60647: LD_EXP 88
60651: PPUSH
60652: LD_VAR 0 2
60656: PUSH
60657: LD_EXP 88
60661: PUSH
60662: LD_VAR 0 2
60666: ARRAY
60667: PUSH
60668: LD_INT 1
60670: PLUS
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PPUSH
60676: LD_VAR 0 3
60680: PPUSH
60681: CALL 19022 0 3
60685: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
60686: LD_VAR 0 3
60690: PUSH
60691: LD_EXP 88
60695: PUSH
60696: LD_VAR 0 2
60700: ARRAY
60701: IN
60702: IFFALSE 60833
// begin if IsInUnit ( j ) then
60704: LD_VAR 0 3
60708: PPUSH
60709: CALL_OW 310
60713: IFFALSE 60724
// ComExitBuilding ( j ) ;
60715: LD_VAR 0 3
60719: PPUSH
60720: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
60724: LD_ADDR_VAR 0 6
60728: PUSH
60729: LD_VAR 0 7
60733: PPUSH
60734: LD_VAR 0 3
60738: PPUSH
60739: CALL_OW 74
60743: ST_TO_ADDR
// if not ape then
60744: LD_VAR 0 6
60748: NOT
60749: IFFALSE 60753
// break ;
60751: GO 60835
// x := GetX ( ape ) ;
60753: LD_ADDR_VAR 0 4
60757: PUSH
60758: LD_VAR 0 6
60762: PPUSH
60763: CALL_OW 250
60767: ST_TO_ADDR
// y := GetY ( ape ) ;
60768: LD_ADDR_VAR 0 5
60772: PUSH
60773: LD_VAR 0 6
60777: PPUSH
60778: CALL_OW 251
60782: ST_TO_ADDR
// if not ValidHex ( x , y ) then
60783: LD_VAR 0 4
60787: PPUSH
60788: LD_VAR 0 5
60792: PPUSH
60793: CALL_OW 488
60797: NOT
60798: IFFALSE 60802
// break ;
60800: GO 60835
// if not HasTask ( j ) then
60802: LD_VAR 0 3
60806: PPUSH
60807: CALL_OW 314
60811: NOT
60812: IFFALSE 60833
// ComTameXY ( j , x , y ) ;
60814: LD_VAR 0 3
60818: PPUSH
60819: LD_VAR 0 4
60823: PPUSH
60824: LD_VAR 0 5
60828: PPUSH
60829: CALL_OW 131
// end ; end ;
60833: GO 60592
60835: POP
60836: POP
// end ;
60837: GO 60323
60839: POP
60840: POP
// end ;
60841: LD_VAR 0 1
60845: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
60846: LD_INT 0
60848: PPUSH
60849: PPUSH
60850: PPUSH
60851: PPUSH
60852: PPUSH
60853: PPUSH
60854: PPUSH
60855: PPUSH
// if not mc_bases then
60856: LD_EXP 57
60860: NOT
60861: IFFALSE 60865
// exit ;
60863: GO 61475
// for i = 1 to mc_bases do
60865: LD_ADDR_VAR 0 2
60869: PUSH
60870: DOUBLE
60871: LD_INT 1
60873: DEC
60874: ST_TO_ADDR
60875: LD_EXP 57
60879: PUSH
60880: FOR_TO
60881: IFFALSE 61473
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
60883: LD_EXP 86
60887: PUSH
60888: LD_VAR 0 2
60892: ARRAY
60893: NOT
60894: PUSH
60895: LD_EXP 86
60899: PUSH
60900: LD_VAR 0 2
60904: ARRAY
60905: PPUSH
60906: LD_INT 25
60908: PUSH
60909: LD_INT 12
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PPUSH
60916: CALL_OW 72
60920: NOT
60921: OR
60922: IFFALSE 60926
// continue ;
60924: GO 60880
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
60926: LD_ADDR_VAR 0 5
60930: PUSH
60931: LD_EXP 86
60935: PUSH
60936: LD_VAR 0 2
60940: ARRAY
60941: PUSH
60942: LD_INT 1
60944: ARRAY
60945: PPUSH
60946: CALL_OW 255
60950: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
60951: LD_VAR 0 5
60955: PPUSH
60956: LD_INT 2
60958: PPUSH
60959: CALL_OW 325
60963: IFFALSE 61208
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
60965: LD_ADDR_VAR 0 4
60969: PUSH
60970: LD_EXP 86
60974: PUSH
60975: LD_VAR 0 2
60979: ARRAY
60980: PPUSH
60981: LD_INT 25
60983: PUSH
60984: LD_INT 16
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PPUSH
60991: CALL_OW 72
60995: ST_TO_ADDR
// if tmp < 6 then
60996: LD_VAR 0 4
61000: PUSH
61001: LD_INT 6
61003: LESS
61004: IFFALSE 61208
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
61006: LD_ADDR_VAR 0 6
61010: PUSH
61011: LD_EXP 57
61015: PUSH
61016: LD_VAR 0 2
61020: ARRAY
61021: PPUSH
61022: LD_INT 2
61024: PUSH
61025: LD_INT 30
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 30
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: LIST
61049: PPUSH
61050: CALL_OW 72
61054: ST_TO_ADDR
// if depot then
61055: LD_VAR 0 6
61059: IFFALSE 61208
// begin for j in depot do
61061: LD_ADDR_VAR 0 3
61065: PUSH
61066: LD_VAR 0 6
61070: PUSH
61071: FOR_IN
61072: IFFALSE 61103
// begin if UnitsInside ( j ) < 6 then
61074: LD_VAR 0 3
61078: PPUSH
61079: CALL_OW 313
61083: PUSH
61084: LD_INT 6
61086: LESS
61087: IFFALSE 61101
// begin selected := j ;
61089: LD_ADDR_VAR 0 7
61093: PUSH
61094: LD_VAR 0 3
61098: ST_TO_ADDR
// break ;
61099: GO 61103
// end ; end ;
61101: GO 61071
61103: POP
61104: POP
// if selected then
61105: LD_VAR 0 7
61109: IFFALSE 61208
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
61111: LD_ADDR_VAR 0 3
61115: PUSH
61116: LD_EXP 86
61120: PUSH
61121: LD_VAR 0 2
61125: ARRAY
61126: PPUSH
61127: LD_INT 25
61129: PUSH
61130: LD_INT 12
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PPUSH
61137: CALL_OW 72
61141: PUSH
61142: FOR_IN
61143: IFFALSE 61206
// if not HasTask ( j ) then
61145: LD_VAR 0 3
61149: PPUSH
61150: CALL_OW 314
61154: NOT
61155: IFFALSE 61204
// begin if not IsInUnit ( j ) then
61157: LD_VAR 0 3
61161: PPUSH
61162: CALL_OW 310
61166: NOT
61167: IFFALSE 61183
// ComEnterUnit ( j , selected ) ;
61169: LD_VAR 0 3
61173: PPUSH
61174: LD_VAR 0 7
61178: PPUSH
61179: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
61183: LD_VAR 0 3
61187: PPUSH
61188: LD_INT 16
61190: PPUSH
61191: CALL_OW 183
// AddComExitBuilding ( j ) ;
61195: LD_VAR 0 3
61199: PPUSH
61200: CALL_OW 182
// end ;
61204: GO 61142
61206: POP
61207: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
61208: LD_VAR 0 5
61212: PPUSH
61213: LD_INT 11
61215: PPUSH
61216: CALL_OW 325
61220: IFFALSE 61471
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
61222: LD_ADDR_VAR 0 4
61226: PUSH
61227: LD_EXP 86
61231: PUSH
61232: LD_VAR 0 2
61236: ARRAY
61237: PPUSH
61238: LD_INT 25
61240: PUSH
61241: LD_INT 16
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PPUSH
61248: CALL_OW 72
61252: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
61253: LD_VAR 0 4
61257: PUSH
61258: LD_INT 6
61260: GREATEREQUAL
61261: PUSH
61262: LD_VAR 0 5
61266: PPUSH
61267: LD_INT 2
61269: PPUSH
61270: CALL_OW 325
61274: NOT
61275: OR
61276: IFFALSE 61471
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
61278: LD_ADDR_VAR 0 8
61282: PUSH
61283: LD_EXP 57
61287: PUSH
61288: LD_VAR 0 2
61292: ARRAY
61293: PPUSH
61294: LD_INT 2
61296: PUSH
61297: LD_INT 30
61299: PUSH
61300: LD_INT 4
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 30
61309: PUSH
61310: LD_INT 5
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: LIST
61321: PPUSH
61322: CALL_OW 72
61326: ST_TO_ADDR
// if barracks then
61327: LD_VAR 0 8
61331: IFFALSE 61471
// begin for j in barracks do
61333: LD_ADDR_VAR 0 3
61337: PUSH
61338: LD_VAR 0 8
61342: PUSH
61343: FOR_IN
61344: IFFALSE 61375
// begin if UnitsInside ( j ) < 6 then
61346: LD_VAR 0 3
61350: PPUSH
61351: CALL_OW 313
61355: PUSH
61356: LD_INT 6
61358: LESS
61359: IFFALSE 61373
// begin selected := j ;
61361: LD_ADDR_VAR 0 7
61365: PUSH
61366: LD_VAR 0 3
61370: ST_TO_ADDR
// break ;
61371: GO 61375
// end ; end ;
61373: GO 61343
61375: POP
61376: POP
// if selected then
61377: LD_VAR 0 7
61381: IFFALSE 61471
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
61383: LD_ADDR_VAR 0 3
61387: PUSH
61388: LD_EXP 86
61392: PUSH
61393: LD_VAR 0 2
61397: ARRAY
61398: PPUSH
61399: LD_INT 25
61401: PUSH
61402: LD_INT 12
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PPUSH
61409: CALL_OW 72
61413: PUSH
61414: FOR_IN
61415: IFFALSE 61469
// if not IsInUnit ( j ) and not HasTask ( j ) then
61417: LD_VAR 0 3
61421: PPUSH
61422: CALL_OW 310
61426: NOT
61427: PUSH
61428: LD_VAR 0 3
61432: PPUSH
61433: CALL_OW 314
61437: NOT
61438: AND
61439: IFFALSE 61467
// begin ComEnterUnit ( j , selected ) ;
61441: LD_VAR 0 3
61445: PPUSH
61446: LD_VAR 0 7
61450: PPUSH
61451: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
61455: LD_VAR 0 3
61459: PPUSH
61460: LD_INT 15
61462: PPUSH
61463: CALL_OW 183
// end ;
61467: GO 61414
61469: POP
61470: POP
// end ; end ; end ; end ; end ;
61471: GO 60880
61473: POP
61474: POP
// end ;
61475: LD_VAR 0 1
61479: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
61480: LD_INT 0
61482: PPUSH
61483: PPUSH
61484: PPUSH
61485: PPUSH
// if not mc_bases then
61486: LD_EXP 57
61490: NOT
61491: IFFALSE 61495
// exit ;
61493: GO 61673
// for i = 1 to mc_bases do
61495: LD_ADDR_VAR 0 2
61499: PUSH
61500: DOUBLE
61501: LD_INT 1
61503: DEC
61504: ST_TO_ADDR
61505: LD_EXP 57
61509: PUSH
61510: FOR_TO
61511: IFFALSE 61671
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
61513: LD_ADDR_VAR 0 4
61517: PUSH
61518: LD_EXP 57
61522: PUSH
61523: LD_VAR 0 2
61527: ARRAY
61528: PPUSH
61529: LD_INT 25
61531: PUSH
61532: LD_INT 9
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PPUSH
61539: CALL_OW 72
61543: ST_TO_ADDR
// if not tmp then
61544: LD_VAR 0 4
61548: NOT
61549: IFFALSE 61553
// continue ;
61551: GO 61510
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
61553: LD_EXP 83
61557: PUSH
61558: LD_VAR 0 2
61562: ARRAY
61563: PPUSH
61564: LD_INT 29
61566: PPUSH
61567: CALL_OW 325
61571: NOT
61572: PUSH
61573: LD_EXP 83
61577: PUSH
61578: LD_VAR 0 2
61582: ARRAY
61583: PPUSH
61584: LD_INT 28
61586: PPUSH
61587: CALL_OW 325
61591: NOT
61592: AND
61593: IFFALSE 61597
// continue ;
61595: GO 61510
// for j in tmp do
61597: LD_ADDR_VAR 0 3
61601: PUSH
61602: LD_VAR 0 4
61606: PUSH
61607: FOR_IN
61608: IFFALSE 61667
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
61610: LD_VAR 0 3
61614: PUSH
61615: LD_EXP 60
61619: PUSH
61620: LD_VAR 0 2
61624: ARRAY
61625: PUSH
61626: LD_INT 1
61628: ARRAY
61629: IN
61630: NOT
61631: PUSH
61632: LD_VAR 0 3
61636: PUSH
61637: LD_EXP 60
61641: PUSH
61642: LD_VAR 0 2
61646: ARRAY
61647: PUSH
61648: LD_INT 2
61650: ARRAY
61651: IN
61652: NOT
61653: AND
61654: IFFALSE 61665
// ComSpaceTimeShoot ( j ) ;
61656: LD_VAR 0 3
61660: PPUSH
61661: CALL 13184 0 1
61665: GO 61607
61667: POP
61668: POP
// end ;
61669: GO 61510
61671: POP
61672: POP
// end ;
61673: LD_VAR 0 1
61677: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
61678: LD_INT 0
61680: PPUSH
61681: PPUSH
61682: PPUSH
61683: PPUSH
// if not mc_bases then
61684: LD_EXP 57
61688: NOT
61689: IFFALSE 61693
// exit ;
61691: GO 61715
// for i = 1 to mc_bases do
61693: LD_ADDR_VAR 0 2
61697: PUSH
61698: DOUBLE
61699: LD_INT 1
61701: DEC
61702: ST_TO_ADDR
61703: LD_EXP 57
61707: PUSH
61708: FOR_TO
61709: IFFALSE 61713
// begin end ;
61711: GO 61708
61713: POP
61714: POP
// end ;
61715: LD_VAR 0 1
61719: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
61720: LD_INT 0
61722: PPUSH
61723: PPUSH
61724: PPUSH
61725: PPUSH
61726: PPUSH
61727: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
61728: LD_VAR 0 1
61732: NOT
61733: PUSH
61734: LD_VAR 0 2
61738: NOT
61739: OR
61740: PUSH
61741: LD_VAR 0 3
61745: NOT
61746: OR
61747: PUSH
61748: LD_VAR 0 4
61752: PUSH
61753: LD_INT 1
61755: PUSH
61756: LD_INT 2
61758: PUSH
61759: LD_INT 3
61761: PUSH
61762: LD_INT 4
61764: PUSH
61765: LD_INT 5
61767: PUSH
61768: LD_INT 8
61770: PUSH
61771: LD_INT 9
61773: PUSH
61774: LD_INT 15
61776: PUSH
61777: LD_INT 16
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: IN
61791: NOT
61792: OR
61793: IFFALSE 61797
// exit ;
61795: GO 62697
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
61797: LD_ADDR_VAR 0 2
61801: PUSH
61802: LD_VAR 0 2
61806: PPUSH
61807: LD_INT 21
61809: PUSH
61810: LD_INT 3
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 24
61819: PUSH
61820: LD_INT 250
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PPUSH
61831: CALL_OW 72
61835: ST_TO_ADDR
// case class of 1 , 15 :
61836: LD_VAR 0 4
61840: PUSH
61841: LD_INT 1
61843: DOUBLE
61844: EQUAL
61845: IFTRUE 61855
61847: LD_INT 15
61849: DOUBLE
61850: EQUAL
61851: IFTRUE 61855
61853: GO 61940
61855: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
61856: LD_ADDR_VAR 0 8
61860: PUSH
61861: LD_VAR 0 2
61865: PPUSH
61866: LD_INT 2
61868: PUSH
61869: LD_INT 30
61871: PUSH
61872: LD_INT 32
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 30
61881: PUSH
61882: LD_INT 31
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: LIST
61893: PPUSH
61894: CALL_OW 72
61898: PUSH
61899: LD_VAR 0 2
61903: PPUSH
61904: LD_INT 2
61906: PUSH
61907: LD_INT 30
61909: PUSH
61910: LD_INT 4
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 30
61919: PUSH
61920: LD_INT 5
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: LIST
61931: PPUSH
61932: CALL_OW 72
61936: ADD
61937: ST_TO_ADDR
61938: GO 62186
61940: LD_INT 2
61942: DOUBLE
61943: EQUAL
61944: IFTRUE 61954
61946: LD_INT 16
61948: DOUBLE
61949: EQUAL
61950: IFTRUE 61954
61952: GO 62000
61954: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
61955: LD_ADDR_VAR 0 8
61959: PUSH
61960: LD_VAR 0 2
61964: PPUSH
61965: LD_INT 2
61967: PUSH
61968: LD_INT 30
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 30
61980: PUSH
61981: LD_INT 1
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: LIST
61992: PPUSH
61993: CALL_OW 72
61997: ST_TO_ADDR
61998: GO 62186
62000: LD_INT 3
62002: DOUBLE
62003: EQUAL
62004: IFTRUE 62008
62006: GO 62054
62008: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
62009: LD_ADDR_VAR 0 8
62013: PUSH
62014: LD_VAR 0 2
62018: PPUSH
62019: LD_INT 2
62021: PUSH
62022: LD_INT 30
62024: PUSH
62025: LD_INT 2
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 30
62034: PUSH
62035: LD_INT 3
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: LIST
62046: PPUSH
62047: CALL_OW 72
62051: ST_TO_ADDR
62052: GO 62186
62054: LD_INT 4
62056: DOUBLE
62057: EQUAL
62058: IFTRUE 62062
62060: GO 62119
62062: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
62063: LD_ADDR_VAR 0 8
62067: PUSH
62068: LD_VAR 0 2
62072: PPUSH
62073: LD_INT 2
62075: PUSH
62076: LD_INT 30
62078: PUSH
62079: LD_INT 6
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 30
62088: PUSH
62089: LD_INT 7
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 30
62098: PUSH
62099: LD_INT 8
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: PPUSH
62112: CALL_OW 72
62116: ST_TO_ADDR
62117: GO 62186
62119: LD_INT 5
62121: DOUBLE
62122: EQUAL
62123: IFTRUE 62139
62125: LD_INT 8
62127: DOUBLE
62128: EQUAL
62129: IFTRUE 62139
62131: LD_INT 9
62133: DOUBLE
62134: EQUAL
62135: IFTRUE 62139
62137: GO 62185
62139: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
62140: LD_ADDR_VAR 0 8
62144: PUSH
62145: LD_VAR 0 2
62149: PPUSH
62150: LD_INT 2
62152: PUSH
62153: LD_INT 30
62155: PUSH
62156: LD_INT 4
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 30
62165: PUSH
62166: LD_INT 5
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: LIST
62177: PPUSH
62178: CALL_OW 72
62182: ST_TO_ADDR
62183: GO 62186
62185: POP
// if not tmp then
62186: LD_VAR 0 8
62190: NOT
62191: IFFALSE 62195
// exit ;
62193: GO 62697
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
62195: LD_VAR 0 4
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: LD_INT 15
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: IN
62210: PUSH
62211: LD_EXP 66
62215: PUSH
62216: LD_VAR 0 1
62220: ARRAY
62221: AND
62222: IFFALSE 62378
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
62224: LD_ADDR_VAR 0 9
62228: PUSH
62229: LD_EXP 66
62233: PUSH
62234: LD_VAR 0 1
62238: ARRAY
62239: PUSH
62240: LD_INT 1
62242: ARRAY
62243: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
62244: LD_VAR 0 9
62248: PUSH
62249: LD_EXP 67
62253: PUSH
62254: LD_VAR 0 1
62258: ARRAY
62259: IN
62260: NOT
62261: IFFALSE 62376
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
62263: LD_ADDR_EXP 67
62267: PUSH
62268: LD_EXP 67
62272: PPUSH
62273: LD_VAR 0 1
62277: PUSH
62278: LD_EXP 67
62282: PUSH
62283: LD_VAR 0 1
62287: ARRAY
62288: PUSH
62289: LD_INT 1
62291: PLUS
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PPUSH
62297: LD_VAR 0 9
62301: PPUSH
62302: CALL 19022 0 3
62306: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
62307: LD_ADDR_EXP 66
62311: PUSH
62312: LD_EXP 66
62316: PPUSH
62317: LD_VAR 0 1
62321: PPUSH
62322: LD_EXP 66
62326: PUSH
62327: LD_VAR 0 1
62331: ARRAY
62332: PUSH
62333: LD_VAR 0 9
62337: DIFF
62338: PPUSH
62339: CALL_OW 1
62343: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
62344: LD_VAR 0 3
62348: PPUSH
62349: LD_EXP 67
62353: PUSH
62354: LD_VAR 0 1
62358: ARRAY
62359: PUSH
62360: LD_EXP 67
62364: PUSH
62365: LD_VAR 0 1
62369: ARRAY
62370: ARRAY
62371: PPUSH
62372: CALL_OW 120
// end ; exit ;
62376: GO 62697
// end ; if tmp > 1 then
62378: LD_VAR 0 8
62382: PUSH
62383: LD_INT 1
62385: GREATER
62386: IFFALSE 62490
// for i = 2 to tmp do
62388: LD_ADDR_VAR 0 6
62392: PUSH
62393: DOUBLE
62394: LD_INT 2
62396: DEC
62397: ST_TO_ADDR
62398: LD_VAR 0 8
62402: PUSH
62403: FOR_TO
62404: IFFALSE 62488
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
62406: LD_VAR 0 8
62410: PUSH
62411: LD_VAR 0 6
62415: ARRAY
62416: PPUSH
62417: CALL_OW 461
62421: PUSH
62422: LD_INT 6
62424: EQUAL
62425: IFFALSE 62486
// begin x := tmp [ i ] ;
62427: LD_ADDR_VAR 0 9
62431: PUSH
62432: LD_VAR 0 8
62436: PUSH
62437: LD_VAR 0 6
62441: ARRAY
62442: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
62443: LD_ADDR_VAR 0 8
62447: PUSH
62448: LD_VAR 0 8
62452: PPUSH
62453: LD_VAR 0 6
62457: PPUSH
62458: CALL_OW 3
62462: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
62463: LD_ADDR_VAR 0 8
62467: PUSH
62468: LD_VAR 0 8
62472: PPUSH
62473: LD_INT 1
62475: PPUSH
62476: LD_VAR 0 9
62480: PPUSH
62481: CALL_OW 2
62485: ST_TO_ADDR
// end ;
62486: GO 62403
62488: POP
62489: POP
// for i in tmp do
62490: LD_ADDR_VAR 0 6
62494: PUSH
62495: LD_VAR 0 8
62499: PUSH
62500: FOR_IN
62501: IFFALSE 62570
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
62503: LD_VAR 0 6
62507: PPUSH
62508: CALL_OW 313
62512: PUSH
62513: LD_INT 6
62515: LESS
62516: PUSH
62517: LD_VAR 0 6
62521: PPUSH
62522: CALL_OW 266
62526: PUSH
62527: LD_INT 31
62529: PUSH
62530: LD_INT 32
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: IN
62537: NOT
62538: AND
62539: PUSH
62540: LD_VAR 0 6
62544: PPUSH
62545: CALL_OW 313
62549: PUSH
62550: LD_INT 0
62552: EQUAL
62553: OR
62554: IFFALSE 62568
// begin j := i ;
62556: LD_ADDR_VAR 0 7
62560: PUSH
62561: LD_VAR 0 6
62565: ST_TO_ADDR
// break ;
62566: GO 62570
// end ; end ;
62568: GO 62500
62570: POP
62571: POP
// if j then
62572: LD_VAR 0 7
62576: IFFALSE 62594
// ComEnterUnit ( unit , j ) else
62578: LD_VAR 0 3
62582: PPUSH
62583: LD_VAR 0 7
62587: PPUSH
62588: CALL_OW 120
62592: GO 62697
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
62594: LD_ADDR_VAR 0 10
62598: PUSH
62599: LD_VAR 0 2
62603: PPUSH
62604: LD_INT 2
62606: PUSH
62607: LD_INT 30
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 30
62619: PUSH
62620: LD_INT 1
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: LIST
62631: PPUSH
62632: CALL_OW 72
62636: ST_TO_ADDR
// if depot then
62637: LD_VAR 0 10
62641: IFFALSE 62697
// begin depot := NearestUnitToUnit ( depot , unit ) ;
62643: LD_ADDR_VAR 0 10
62647: PUSH
62648: LD_VAR 0 10
62652: PPUSH
62653: LD_VAR 0 3
62657: PPUSH
62658: CALL_OW 74
62662: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
62663: LD_VAR 0 3
62667: PPUSH
62668: LD_VAR 0 10
62672: PPUSH
62673: CALL_OW 296
62677: PUSH
62678: LD_INT 10
62680: GREATER
62681: IFFALSE 62697
// ComStandNearbyBuilding ( unit , depot ) ;
62683: LD_VAR 0 3
62687: PPUSH
62688: LD_VAR 0 10
62692: PPUSH
62693: CALL 13801 0 2
// end ; end ; end ;
62697: LD_VAR 0 5
62701: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
62702: LD_INT 0
62704: PPUSH
62705: PPUSH
62706: PPUSH
62707: PPUSH
// if not mc_bases then
62708: LD_EXP 57
62712: NOT
62713: IFFALSE 62717
// exit ;
62715: GO 62956
// for i = 1 to mc_bases do
62717: LD_ADDR_VAR 0 2
62721: PUSH
62722: DOUBLE
62723: LD_INT 1
62725: DEC
62726: ST_TO_ADDR
62727: LD_EXP 57
62731: PUSH
62732: FOR_TO
62733: IFFALSE 62954
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
62735: LD_ADDR_VAR 0 4
62739: PUSH
62740: LD_EXP 57
62744: PUSH
62745: LD_VAR 0 2
62749: ARRAY
62750: PPUSH
62751: LD_INT 21
62753: PUSH
62754: LD_INT 1
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PPUSH
62761: CALL_OW 72
62765: PUSH
62766: LD_EXP 86
62770: PUSH
62771: LD_VAR 0 2
62775: ARRAY
62776: UNION
62777: ST_TO_ADDR
// if not tmp then
62778: LD_VAR 0 4
62782: NOT
62783: IFFALSE 62787
// continue ;
62785: GO 62732
// for j in tmp do
62787: LD_ADDR_VAR 0 3
62791: PUSH
62792: LD_VAR 0 4
62796: PUSH
62797: FOR_IN
62798: IFFALSE 62950
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
62800: LD_VAR 0 3
62804: PPUSH
62805: CALL_OW 110
62809: NOT
62810: PUSH
62811: LD_VAR 0 3
62815: PPUSH
62816: CALL_OW 314
62820: NOT
62821: AND
62822: PUSH
62823: LD_VAR 0 3
62827: PPUSH
62828: CALL_OW 311
62832: NOT
62833: AND
62834: PUSH
62835: LD_VAR 0 3
62839: PPUSH
62840: CALL_OW 310
62844: NOT
62845: AND
62846: PUSH
62847: LD_VAR 0 3
62851: PUSH
62852: LD_EXP 60
62856: PUSH
62857: LD_VAR 0 2
62861: ARRAY
62862: PUSH
62863: LD_INT 1
62865: ARRAY
62866: IN
62867: NOT
62868: AND
62869: PUSH
62870: LD_VAR 0 3
62874: PUSH
62875: LD_EXP 60
62879: PUSH
62880: LD_VAR 0 2
62884: ARRAY
62885: PUSH
62886: LD_INT 2
62888: ARRAY
62889: IN
62890: NOT
62891: AND
62892: PUSH
62893: LD_VAR 0 3
62897: PUSH
62898: LD_EXP 69
62902: PUSH
62903: LD_VAR 0 2
62907: ARRAY
62908: IN
62909: NOT
62910: AND
62911: IFFALSE 62948
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
62913: LD_VAR 0 2
62917: PPUSH
62918: LD_EXP 57
62922: PUSH
62923: LD_VAR 0 2
62927: ARRAY
62928: PPUSH
62929: LD_VAR 0 3
62933: PPUSH
62934: LD_VAR 0 3
62938: PPUSH
62939: CALL_OW 257
62943: PPUSH
62944: CALL 61720 0 4
// end ;
62948: GO 62797
62950: POP
62951: POP
// end ;
62952: GO 62732
62954: POP
62955: POP
// end ;
62956: LD_VAR 0 1
62960: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
62961: LD_INT 0
62963: PPUSH
62964: PPUSH
62965: PPUSH
62966: PPUSH
62967: PPUSH
62968: PPUSH
// if not mc_bases [ base ] then
62969: LD_EXP 57
62973: PUSH
62974: LD_VAR 0 1
62978: ARRAY
62979: NOT
62980: IFFALSE 62984
// exit ;
62982: GO 63166
// tmp := [ ] ;
62984: LD_ADDR_VAR 0 6
62988: PUSH
62989: EMPTY
62990: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
62991: LD_ADDR_VAR 0 7
62995: PUSH
62996: LD_VAR 0 3
63000: PPUSH
63001: LD_INT 0
63003: PPUSH
63004: CALL_OW 517
63008: ST_TO_ADDR
// if not list then
63009: LD_VAR 0 7
63013: NOT
63014: IFFALSE 63018
// exit ;
63016: GO 63166
// for i = 1 to amount do
63018: LD_ADDR_VAR 0 5
63022: PUSH
63023: DOUBLE
63024: LD_INT 1
63026: DEC
63027: ST_TO_ADDR
63028: LD_VAR 0 2
63032: PUSH
63033: FOR_TO
63034: IFFALSE 63114
// begin x := rand ( 1 , list [ 1 ] ) ;
63036: LD_ADDR_VAR 0 8
63040: PUSH
63041: LD_INT 1
63043: PPUSH
63044: LD_VAR 0 7
63048: PUSH
63049: LD_INT 1
63051: ARRAY
63052: PPUSH
63053: CALL_OW 12
63057: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
63058: LD_ADDR_VAR 0 6
63062: PUSH
63063: LD_VAR 0 6
63067: PPUSH
63068: LD_VAR 0 5
63072: PPUSH
63073: LD_VAR 0 7
63077: PUSH
63078: LD_INT 1
63080: ARRAY
63081: PUSH
63082: LD_VAR 0 8
63086: ARRAY
63087: PUSH
63088: LD_VAR 0 7
63092: PUSH
63093: LD_INT 2
63095: ARRAY
63096: PUSH
63097: LD_VAR 0 8
63101: ARRAY
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PPUSH
63107: CALL_OW 1
63111: ST_TO_ADDR
// end ;
63112: GO 63033
63114: POP
63115: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
63116: LD_ADDR_EXP 70
63120: PUSH
63121: LD_EXP 70
63125: PPUSH
63126: LD_VAR 0 1
63130: PPUSH
63131: LD_VAR 0 6
63135: PPUSH
63136: CALL_OW 1
63140: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
63141: LD_ADDR_EXP 72
63145: PUSH
63146: LD_EXP 72
63150: PPUSH
63151: LD_VAR 0 1
63155: PPUSH
63156: LD_VAR 0 3
63160: PPUSH
63161: CALL_OW 1
63165: ST_TO_ADDR
// end ;
63166: LD_VAR 0 4
63170: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
63171: LD_INT 0
63173: PPUSH
// if not mc_bases [ base ] then
63174: LD_EXP 57
63178: PUSH
63179: LD_VAR 0 1
63183: ARRAY
63184: NOT
63185: IFFALSE 63189
// exit ;
63187: GO 63214
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
63189: LD_ADDR_EXP 62
63193: PUSH
63194: LD_EXP 62
63198: PPUSH
63199: LD_VAR 0 1
63203: PPUSH
63204: LD_VAR 0 2
63208: PPUSH
63209: CALL_OW 1
63213: ST_TO_ADDR
// end ;
63214: LD_VAR 0 3
63218: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
63219: LD_INT 0
63221: PPUSH
// if not mc_bases [ base ] then
63222: LD_EXP 57
63226: PUSH
63227: LD_VAR 0 1
63231: ARRAY
63232: NOT
63233: IFFALSE 63237
// exit ;
63235: GO 63262
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
63237: LD_ADDR_EXP 78
63241: PUSH
63242: LD_EXP 78
63246: PPUSH
63247: LD_VAR 0 1
63251: PPUSH
63252: LD_VAR 0 2
63256: PPUSH
63257: CALL_OW 1
63261: ST_TO_ADDR
// end ;
63262: LD_VAR 0 3
63266: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
63267: LD_INT 0
63269: PPUSH
// if not mc_bases [ base ] then
63270: LD_EXP 57
63274: PUSH
63275: LD_VAR 0 1
63279: ARRAY
63280: NOT
63281: IFFALSE 63285
// exit ;
63283: GO 63325
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
63285: LD_ADDR_EXP 78
63289: PUSH
63290: LD_EXP 78
63294: PPUSH
63295: LD_VAR 0 1
63299: PPUSH
63300: LD_EXP 78
63304: PUSH
63305: LD_VAR 0 1
63309: ARRAY
63310: PUSH
63311: LD_VAR 0 2
63315: PUSH
63316: EMPTY
63317: LIST
63318: ADD
63319: PPUSH
63320: CALL_OW 1
63324: ST_TO_ADDR
// end ;
63325: LD_VAR 0 3
63329: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
63330: LD_INT 0
63332: PPUSH
// if not mc_bases [ base ] then
63333: LD_EXP 57
63337: PUSH
63338: LD_VAR 0 1
63342: ARRAY
63343: NOT
63344: IFFALSE 63348
// exit ;
63346: GO 63460
// mc_defender := Replace ( mc_defender , base , deflist ) ;
63348: LD_ADDR_EXP 79
63352: PUSH
63353: LD_EXP 79
63357: PPUSH
63358: LD_VAR 0 1
63362: PPUSH
63363: LD_VAR 0 2
63367: PPUSH
63368: CALL_OW 1
63372: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
63373: LD_ADDR_EXP 68
63377: PUSH
63378: LD_EXP 68
63382: PPUSH
63383: LD_VAR 0 1
63387: PPUSH
63388: LD_VAR 0 2
63392: PUSH
63393: LD_INT 0
63395: PLUS
63396: PPUSH
63397: CALL_OW 1
63401: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
63402: LD_ADDR_EXP 76
63406: PUSH
63407: LD_EXP 76
63411: PPUSH
63412: LD_VAR 0 1
63416: PPUSH
63417: LD_EXP 76
63421: PUSH
63422: LD_VAR 0 1
63426: ARRAY
63427: PUSH
63428: LD_EXP 79
63432: PUSH
63433: LD_VAR 0 1
63437: ARRAY
63438: PPUSH
63439: LD_INT 21
63441: PUSH
63442: LD_INT 2
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PPUSH
63449: CALL_OW 72
63453: UNION
63454: PPUSH
63455: CALL_OW 1
63459: ST_TO_ADDR
// end ;
63460: LD_VAR 0 3
63464: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
63465: LD_INT 0
63467: PPUSH
63468: PPUSH
63469: PPUSH
63470: PPUSH
// if not mc_bases [ base ] then
63471: LD_EXP 57
63475: PUSH
63476: LD_VAR 0 1
63480: ARRAY
63481: NOT
63482: IFFALSE 63486
// exit ;
63484: GO 63551
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
63486: LD_ADDR_EXP 77
63490: PUSH
63491: LD_EXP 77
63495: PPUSH
63496: LD_VAR 0 1
63500: PUSH
63501: LD_EXP 77
63505: PUSH
63506: LD_VAR 0 1
63510: ARRAY
63511: PUSH
63512: LD_INT 1
63514: PLUS
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PPUSH
63520: LD_VAR 0 1
63524: PUSH
63525: LD_VAR 0 2
63529: PUSH
63530: LD_VAR 0 3
63534: PUSH
63535: LD_VAR 0 4
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: PPUSH
63546: CALL 19022 0 3
63550: ST_TO_ADDR
// end ;
63551: LD_VAR 0 5
63555: RET
// export function MC_GetMinesField ( base ) ; begin
63556: LD_INT 0
63558: PPUSH
// result := mc_mines [ base ] ;
63559: LD_ADDR_VAR 0 2
63563: PUSH
63564: LD_EXP 70
63568: PUSH
63569: LD_VAR 0 1
63573: ARRAY
63574: ST_TO_ADDR
// end ;
63575: LD_VAR 0 2
63579: RET
// export function MC_GetProduceList ( base ) ; begin
63580: LD_INT 0
63582: PPUSH
// result := mc_produce [ base ] ;
63583: LD_ADDR_VAR 0 2
63587: PUSH
63588: LD_EXP 78
63592: PUSH
63593: LD_VAR 0 1
63597: ARRAY
63598: ST_TO_ADDR
// end ;
63599: LD_VAR 0 2
63603: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
63604: LD_INT 0
63606: PPUSH
63607: PPUSH
// if not mc_bases then
63608: LD_EXP 57
63612: NOT
63613: IFFALSE 63617
// exit ;
63615: GO 63682
// if mc_bases [ base ] then
63617: LD_EXP 57
63621: PUSH
63622: LD_VAR 0 1
63626: ARRAY
63627: IFFALSE 63682
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
63629: LD_ADDR_VAR 0 3
63633: PUSH
63634: LD_EXP 57
63638: PUSH
63639: LD_VAR 0 1
63643: ARRAY
63644: PPUSH
63645: LD_INT 30
63647: PUSH
63648: LD_VAR 0 2
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PPUSH
63657: CALL_OW 72
63661: ST_TO_ADDR
// if result then
63662: LD_VAR 0 3
63666: IFFALSE 63682
// result := result [ 1 ] ;
63668: LD_ADDR_VAR 0 3
63672: PUSH
63673: LD_VAR 0 3
63677: PUSH
63678: LD_INT 1
63680: ARRAY
63681: ST_TO_ADDR
// end ; end ;
63682: LD_VAR 0 3
63686: RET
// export function MC_SetTame ( base , area ) ; begin
63687: LD_INT 0
63689: PPUSH
// if not mc_bases or not base then
63690: LD_EXP 57
63694: NOT
63695: PUSH
63696: LD_VAR 0 1
63700: NOT
63701: OR
63702: IFFALSE 63706
// exit ;
63704: GO 63731
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
63706: LD_ADDR_EXP 85
63710: PUSH
63711: LD_EXP 85
63715: PPUSH
63716: LD_VAR 0 1
63720: PPUSH
63721: LD_VAR 0 2
63725: PPUSH
63726: CALL_OW 1
63730: ST_TO_ADDR
// end ;
63731: LD_VAR 0 3
63735: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
63736: LD_INT 0
63738: PPUSH
63739: PPUSH
// if not mc_bases or not base or not kinds then
63740: LD_EXP 57
63744: NOT
63745: PUSH
63746: LD_VAR 0 1
63750: NOT
63751: OR
63752: PUSH
63753: LD_VAR 0 2
63757: NOT
63758: OR
63759: IFFALSE 63763
// exit ;
63761: GO 63824
// for i in kinds do
63763: LD_ADDR_VAR 0 4
63767: PUSH
63768: LD_VAR 0 2
63772: PUSH
63773: FOR_IN
63774: IFFALSE 63822
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
63776: LD_ADDR_EXP 91
63780: PUSH
63781: LD_EXP 91
63785: PPUSH
63786: LD_VAR 0 1
63790: PUSH
63791: LD_EXP 91
63795: PUSH
63796: LD_VAR 0 1
63800: ARRAY
63801: PUSH
63802: LD_INT 1
63804: PLUS
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PPUSH
63810: LD_VAR 0 4
63814: PPUSH
63815: CALL 19022 0 3
63819: ST_TO_ADDR
63820: GO 63773
63822: POP
63823: POP
// end ;
63824: LD_VAR 0 3
63828: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
63829: LD_INT 0
63831: PPUSH
// if not mc_bases or not base or not areas then
63832: LD_EXP 57
63836: NOT
63837: PUSH
63838: LD_VAR 0 1
63842: NOT
63843: OR
63844: PUSH
63845: LD_VAR 0 2
63849: NOT
63850: OR
63851: IFFALSE 63855
// exit ;
63853: GO 63880
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
63855: LD_ADDR_EXP 75
63859: PUSH
63860: LD_EXP 75
63864: PPUSH
63865: LD_VAR 0 1
63869: PPUSH
63870: LD_VAR 0 2
63874: PPUSH
63875: CALL_OW 1
63879: ST_TO_ADDR
// end ;
63880: LD_VAR 0 3
63884: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
63885: LD_INT 0
63887: PPUSH
// if not mc_bases or not base then
63888: LD_EXP 57
63892: NOT
63893: PUSH
63894: LD_VAR 0 1
63898: NOT
63899: OR
63900: IFFALSE 63904
// exit ;
63902: GO 63938
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
63904: LD_ADDR_EXP 92
63908: PUSH
63909: LD_EXP 92
63913: PPUSH
63914: LD_VAR 0 1
63918: PPUSH
63919: LD_VAR 0 2
63923: PUSH
63924: LD_VAR 0 3
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PPUSH
63933: CALL_OW 1
63937: ST_TO_ADDR
// end ; end_of_file
63938: LD_VAR 0 4
63942: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
63943: LD_INT 0
63945: PPUSH
63946: PPUSH
63947: PPUSH
// if not mc_bases then
63948: LD_EXP 57
63952: NOT
63953: IFFALSE 63957
// exit ;
63955: GO 64122
// for i = 1 to mc_bases do
63957: LD_ADDR_VAR 0 4
63961: PUSH
63962: DOUBLE
63963: LD_INT 1
63965: DEC
63966: ST_TO_ADDR
63967: LD_EXP 57
63971: PUSH
63972: FOR_TO
63973: IFFALSE 64120
// begin if sci in mc_bases [ i ] then
63975: LD_VAR 0 2
63979: PUSH
63980: LD_EXP 57
63984: PUSH
63985: LD_VAR 0 4
63989: ARRAY
63990: IN
63991: IFFALSE 64118
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
63993: LD_ADDR_EXP 86
63997: PUSH
63998: LD_EXP 86
64002: PPUSH
64003: LD_VAR 0 4
64007: PUSH
64008: LD_EXP 86
64012: PUSH
64013: LD_VAR 0 4
64017: ARRAY
64018: PUSH
64019: LD_INT 1
64021: PLUS
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PPUSH
64027: LD_VAR 0 1
64031: PPUSH
64032: CALL 19022 0 3
64036: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
64037: LD_ADDR_VAR 0 5
64041: PUSH
64042: LD_EXP 57
64046: PUSH
64047: LD_VAR 0 4
64051: ARRAY
64052: PPUSH
64053: LD_INT 2
64055: PUSH
64056: LD_INT 30
64058: PUSH
64059: LD_INT 0
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 30
64068: PUSH
64069: LD_INT 1
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: LIST
64080: PPUSH
64081: CALL_OW 72
64085: PPUSH
64086: LD_VAR 0 1
64090: PPUSH
64091: CALL_OW 74
64095: ST_TO_ADDR
// if tmp then
64096: LD_VAR 0 5
64100: IFFALSE 64116
// ComStandNearbyBuilding ( ape , tmp ) ;
64102: LD_VAR 0 1
64106: PPUSH
64107: LD_VAR 0 5
64111: PPUSH
64112: CALL 13801 0 2
// break ;
64116: GO 64120
// end ; end ;
64118: GO 63972
64120: POP
64121: POP
// end ;
64122: LD_VAR 0 3
64126: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
64127: LD_INT 0
64129: PPUSH
64130: PPUSH
64131: PPUSH
// if not mc_bases then
64132: LD_EXP 57
64136: NOT
64137: IFFALSE 64141
// exit ;
64139: GO 64230
// for i = 1 to mc_bases do
64141: LD_ADDR_VAR 0 4
64145: PUSH
64146: DOUBLE
64147: LD_INT 1
64149: DEC
64150: ST_TO_ADDR
64151: LD_EXP 57
64155: PUSH
64156: FOR_TO
64157: IFFALSE 64228
// begin if building in mc_busy_turret_list [ i ] then
64159: LD_VAR 0 1
64163: PUSH
64164: LD_EXP 67
64168: PUSH
64169: LD_VAR 0 4
64173: ARRAY
64174: IN
64175: IFFALSE 64226
// begin tmp := mc_busy_turret_list [ i ] diff building ;
64177: LD_ADDR_VAR 0 5
64181: PUSH
64182: LD_EXP 67
64186: PUSH
64187: LD_VAR 0 4
64191: ARRAY
64192: PUSH
64193: LD_VAR 0 1
64197: DIFF
64198: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
64199: LD_ADDR_EXP 67
64203: PUSH
64204: LD_EXP 67
64208: PPUSH
64209: LD_VAR 0 4
64213: PPUSH
64214: LD_VAR 0 5
64218: PPUSH
64219: CALL_OW 1
64223: ST_TO_ADDR
// break ;
64224: GO 64228
// end ; end ;
64226: GO 64156
64228: POP
64229: POP
// end ;
64230: LD_VAR 0 3
64234: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
64235: LD_INT 0
64237: PPUSH
64238: PPUSH
64239: PPUSH
// if not mc_bases then
64240: LD_EXP 57
64244: NOT
64245: IFFALSE 64249
// exit ;
64247: GO 64448
// for i = 1 to mc_bases do
64249: LD_ADDR_VAR 0 5
64253: PUSH
64254: DOUBLE
64255: LD_INT 1
64257: DEC
64258: ST_TO_ADDR
64259: LD_EXP 57
64263: PUSH
64264: FOR_TO
64265: IFFALSE 64446
// if building in mc_bases [ i ] then
64267: LD_VAR 0 1
64271: PUSH
64272: LD_EXP 57
64276: PUSH
64277: LD_VAR 0 5
64281: ARRAY
64282: IN
64283: IFFALSE 64444
// begin tmp := mc_bases [ i ] diff building ;
64285: LD_ADDR_VAR 0 6
64289: PUSH
64290: LD_EXP 57
64294: PUSH
64295: LD_VAR 0 5
64299: ARRAY
64300: PUSH
64301: LD_VAR 0 1
64305: DIFF
64306: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
64307: LD_ADDR_EXP 57
64311: PUSH
64312: LD_EXP 57
64316: PPUSH
64317: LD_VAR 0 5
64321: PPUSH
64322: LD_VAR 0 6
64326: PPUSH
64327: CALL_OW 1
64331: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
64332: LD_VAR 0 1
64336: PUSH
64337: LD_EXP 65
64341: PUSH
64342: LD_VAR 0 5
64346: ARRAY
64347: IN
64348: IFFALSE 64387
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
64350: LD_ADDR_EXP 65
64354: PUSH
64355: LD_EXP 65
64359: PPUSH
64360: LD_VAR 0 5
64364: PPUSH
64365: LD_EXP 65
64369: PUSH
64370: LD_VAR 0 5
64374: ARRAY
64375: PUSH
64376: LD_VAR 0 1
64380: DIFF
64381: PPUSH
64382: CALL_OW 1
64386: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
64387: LD_VAR 0 1
64391: PUSH
64392: LD_EXP 66
64396: PUSH
64397: LD_VAR 0 5
64401: ARRAY
64402: IN
64403: IFFALSE 64442
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
64405: LD_ADDR_EXP 66
64409: PUSH
64410: LD_EXP 66
64414: PPUSH
64415: LD_VAR 0 5
64419: PPUSH
64420: LD_EXP 66
64424: PUSH
64425: LD_VAR 0 5
64429: ARRAY
64430: PUSH
64431: LD_VAR 0 1
64435: DIFF
64436: PPUSH
64437: CALL_OW 1
64441: ST_TO_ADDR
// break ;
64442: GO 64446
// end ;
64444: GO 64264
64446: POP
64447: POP
// end ;
64448: LD_VAR 0 4
64452: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
64453: LD_INT 0
64455: PPUSH
64456: PPUSH
64457: PPUSH
// if not mc_bases or not side in mc_sides then
64458: LD_EXP 57
64462: NOT
64463: PUSH
64464: LD_VAR 0 3
64468: PUSH
64469: LD_EXP 83
64473: IN
64474: NOT
64475: OR
64476: IFFALSE 64480
// exit ;
64478: GO 64603
// for i = 1 to mc_vehicles do
64480: LD_ADDR_VAR 0 6
64484: PUSH
64485: DOUBLE
64486: LD_INT 1
64488: DEC
64489: ST_TO_ADDR
64490: LD_EXP 76
64494: PUSH
64495: FOR_TO
64496: IFFALSE 64601
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
64498: LD_VAR 0 2
64502: PUSH
64503: LD_EXP 76
64507: PUSH
64508: LD_VAR 0 6
64512: ARRAY
64513: IN
64514: PUSH
64515: LD_VAR 0 1
64519: PUSH
64520: LD_EXP 76
64524: PUSH
64525: LD_VAR 0 6
64529: ARRAY
64530: IN
64531: OR
64532: IFFALSE 64599
// begin tmp := mc_vehicles [ i ] diff old ;
64534: LD_ADDR_VAR 0 7
64538: PUSH
64539: LD_EXP 76
64543: PUSH
64544: LD_VAR 0 6
64548: ARRAY
64549: PUSH
64550: LD_VAR 0 2
64554: DIFF
64555: ST_TO_ADDR
// tmp := tmp diff new ;
64556: LD_ADDR_VAR 0 7
64560: PUSH
64561: LD_VAR 0 7
64565: PUSH
64566: LD_VAR 0 1
64570: DIFF
64571: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
64572: LD_ADDR_EXP 76
64576: PUSH
64577: LD_EXP 76
64581: PPUSH
64582: LD_VAR 0 6
64586: PPUSH
64587: LD_VAR 0 7
64591: PPUSH
64592: CALL_OW 1
64596: ST_TO_ADDR
// break ;
64597: GO 64601
// end ;
64599: GO 64495
64601: POP
64602: POP
// end ;
64603: LD_VAR 0 5
64607: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
64608: LD_INT 0
64610: PPUSH
64611: PPUSH
64612: PPUSH
64613: PPUSH
// if not mc_bases then
64614: LD_EXP 57
64618: NOT
64619: IFFALSE 64623
// exit ;
64621: GO 64915
// side := GetSide ( vehicle ) ;
64623: LD_ADDR_VAR 0 5
64627: PUSH
64628: LD_VAR 0 1
64632: PPUSH
64633: CALL_OW 255
64637: ST_TO_ADDR
// for i = 1 to mc_bases do
64638: LD_ADDR_VAR 0 4
64642: PUSH
64643: DOUBLE
64644: LD_INT 1
64646: DEC
64647: ST_TO_ADDR
64648: LD_EXP 57
64652: PUSH
64653: FOR_TO
64654: IFFALSE 64913
// begin if factory in mc_bases [ i ] then
64656: LD_VAR 0 2
64660: PUSH
64661: LD_EXP 57
64665: PUSH
64666: LD_VAR 0 4
64670: ARRAY
64671: IN
64672: IFFALSE 64911
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
64674: LD_EXP 79
64678: PUSH
64679: LD_VAR 0 4
64683: ARRAY
64684: PUSH
64685: LD_EXP 68
64689: PUSH
64690: LD_VAR 0 4
64694: ARRAY
64695: LESS
64696: IFFALSE 64867
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
64698: LD_ADDR_EXP 79
64702: PUSH
64703: LD_EXP 79
64707: PPUSH
64708: LD_VAR 0 4
64712: PPUSH
64713: LD_EXP 79
64717: PUSH
64718: LD_VAR 0 4
64722: ARRAY
64723: PUSH
64724: LD_VAR 0 1
64728: ADD
64729: PPUSH
64730: CALL_OW 1
64734: ST_TO_ADDR
// if not mc_scan [ i ] then
64735: LD_EXP 80
64739: PUSH
64740: LD_VAR 0 4
64744: ARRAY
64745: NOT
64746: IFFALSE 64865
// begin if GetControl ( vehicle ) = control_remote then
64748: LD_VAR 0 1
64752: PPUSH
64753: CALL_OW 263
64757: PUSH
64758: LD_INT 2
64760: EQUAL
64761: IFFALSE 64781
// repeat wait ( 0 0$1 ) ;
64763: LD_INT 35
64765: PPUSH
64766: CALL_OW 67
// until IsControledBy ( vehicle ) ;
64770: LD_VAR 0 1
64774: PPUSH
64775: CALL_OW 312
64779: IFFALSE 64763
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
64781: LD_VAR 0 1
64785: PPUSH
64786: LD_EXP 81
64790: PUSH
64791: LD_VAR 0 4
64795: ARRAY
64796: PPUSH
64797: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
64801: LD_VAR 0 1
64805: PPUSH
64806: CALL_OW 263
64810: PUSH
64811: LD_INT 1
64813: NONEQUAL
64814: IFFALSE 64818
// break ;
64816: GO 64913
// repeat wait ( 0 0$1 ) ;
64818: LD_INT 35
64820: PPUSH
64821: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
64825: LD_VAR 0 1
64829: PPUSH
64830: LD_EXP 81
64834: PUSH
64835: LD_VAR 0 4
64839: ARRAY
64840: PPUSH
64841: CALL_OW 308
64845: IFFALSE 64818
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
64847: LD_VAR 0 1
64851: PPUSH
64852: CALL_OW 311
64856: PPUSH
64857: CALL_OW 121
// exit ;
64861: POP
64862: POP
64863: GO 64915
// end ; end else
64865: GO 64911
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
64867: LD_ADDR_EXP 76
64871: PUSH
64872: LD_EXP 76
64876: PPUSH
64877: LD_VAR 0 4
64881: PUSH
64882: LD_EXP 76
64886: PUSH
64887: LD_VAR 0 4
64891: ARRAY
64892: PUSH
64893: LD_INT 1
64895: PLUS
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PPUSH
64901: LD_VAR 0 1
64905: PPUSH
64906: CALL 19022 0 3
64910: ST_TO_ADDR
// end ; end ;
64911: GO 64653
64913: POP
64914: POP
// end ;
64915: LD_VAR 0 3
64919: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
64920: LD_INT 0
64922: PPUSH
64923: PPUSH
64924: PPUSH
64925: PPUSH
// if not mc_bases then
64926: LD_EXP 57
64930: NOT
64931: IFFALSE 64935
// exit ;
64933: GO 65288
// repeat wait ( 0 0$1 ) ;
64935: LD_INT 35
64937: PPUSH
64938: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
64942: LD_VAR 0 2
64946: PPUSH
64947: LD_VAR 0 3
64951: PPUSH
64952: CALL_OW 284
64956: IFFALSE 64935
// if GetResourceTypeXY ( x , y ) = mat_artefact then
64958: LD_VAR 0 2
64962: PPUSH
64963: LD_VAR 0 3
64967: PPUSH
64968: CALL_OW 283
64972: PUSH
64973: LD_INT 4
64975: EQUAL
64976: IFFALSE 64980
// exit ;
64978: GO 65288
// for i = 1 to mc_bases do
64980: LD_ADDR_VAR 0 7
64984: PUSH
64985: DOUBLE
64986: LD_INT 1
64988: DEC
64989: ST_TO_ADDR
64990: LD_EXP 57
64994: PUSH
64995: FOR_TO
64996: IFFALSE 65286
// begin if mc_crates_area [ i ] then
64998: LD_EXP 75
65002: PUSH
65003: LD_VAR 0 7
65007: ARRAY
65008: IFFALSE 65119
// for j in mc_crates_area [ i ] do
65010: LD_ADDR_VAR 0 8
65014: PUSH
65015: LD_EXP 75
65019: PUSH
65020: LD_VAR 0 7
65024: ARRAY
65025: PUSH
65026: FOR_IN
65027: IFFALSE 65117
// if InArea ( x , y , j ) then
65029: LD_VAR 0 2
65033: PPUSH
65034: LD_VAR 0 3
65038: PPUSH
65039: LD_VAR 0 8
65043: PPUSH
65044: CALL_OW 309
65048: IFFALSE 65115
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
65050: LD_ADDR_EXP 73
65054: PUSH
65055: LD_EXP 73
65059: PPUSH
65060: LD_VAR 0 7
65064: PUSH
65065: LD_EXP 73
65069: PUSH
65070: LD_VAR 0 7
65074: ARRAY
65075: PUSH
65076: LD_INT 1
65078: PLUS
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PPUSH
65084: LD_VAR 0 4
65088: PUSH
65089: LD_VAR 0 2
65093: PUSH
65094: LD_VAR 0 3
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: LIST
65103: PPUSH
65104: CALL 19022 0 3
65108: ST_TO_ADDR
// exit ;
65109: POP
65110: POP
65111: POP
65112: POP
65113: GO 65288
// end ;
65115: GO 65026
65117: POP
65118: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65119: LD_ADDR_VAR 0 9
65123: PUSH
65124: LD_EXP 57
65128: PUSH
65129: LD_VAR 0 7
65133: ARRAY
65134: PPUSH
65135: LD_INT 2
65137: PUSH
65138: LD_INT 30
65140: PUSH
65141: LD_INT 0
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 30
65150: PUSH
65151: LD_INT 1
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: LIST
65162: PPUSH
65163: CALL_OW 72
65167: ST_TO_ADDR
// if not depot then
65168: LD_VAR 0 9
65172: NOT
65173: IFFALSE 65177
// continue ;
65175: GO 64995
// for j in depot do
65177: LD_ADDR_VAR 0 8
65181: PUSH
65182: LD_VAR 0 9
65186: PUSH
65187: FOR_IN
65188: IFFALSE 65282
// if GetDistUnitXY ( j , x , y ) < 30 then
65190: LD_VAR 0 8
65194: PPUSH
65195: LD_VAR 0 2
65199: PPUSH
65200: LD_VAR 0 3
65204: PPUSH
65205: CALL_OW 297
65209: PUSH
65210: LD_INT 30
65212: LESS
65213: IFFALSE 65280
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
65215: LD_ADDR_EXP 73
65219: PUSH
65220: LD_EXP 73
65224: PPUSH
65225: LD_VAR 0 7
65229: PUSH
65230: LD_EXP 73
65234: PUSH
65235: LD_VAR 0 7
65239: ARRAY
65240: PUSH
65241: LD_INT 1
65243: PLUS
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PPUSH
65249: LD_VAR 0 4
65253: PUSH
65254: LD_VAR 0 2
65258: PUSH
65259: LD_VAR 0 3
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: LIST
65268: PPUSH
65269: CALL 19022 0 3
65273: ST_TO_ADDR
// exit ;
65274: POP
65275: POP
65276: POP
65277: POP
65278: GO 65288
// end ;
65280: GO 65187
65282: POP
65283: POP
// end ;
65284: GO 64995
65286: POP
65287: POP
// end ;
65288: LD_VAR 0 6
65292: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
65293: LD_INT 0
65295: PPUSH
65296: PPUSH
65297: PPUSH
65298: PPUSH
// side := GetSide ( lab ) ;
65299: LD_ADDR_VAR 0 4
65303: PUSH
65304: LD_VAR 0 2
65308: PPUSH
65309: CALL_OW 255
65313: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
65314: LD_VAR 0 4
65318: PUSH
65319: LD_EXP 83
65323: IN
65324: NOT
65325: PUSH
65326: LD_EXP 84
65330: NOT
65331: OR
65332: PUSH
65333: LD_EXP 57
65337: NOT
65338: OR
65339: IFFALSE 65343
// exit ;
65341: GO 65576
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
65343: LD_ADDR_EXP 84
65347: PUSH
65348: LD_EXP 84
65352: PPUSH
65353: LD_VAR 0 4
65357: PPUSH
65358: LD_EXP 84
65362: PUSH
65363: LD_VAR 0 4
65367: ARRAY
65368: PUSH
65369: LD_VAR 0 1
65373: DIFF
65374: PPUSH
65375: CALL_OW 1
65379: ST_TO_ADDR
// for i = 1 to mc_bases do
65380: LD_ADDR_VAR 0 5
65384: PUSH
65385: DOUBLE
65386: LD_INT 1
65388: DEC
65389: ST_TO_ADDR
65390: LD_EXP 57
65394: PUSH
65395: FOR_TO
65396: IFFALSE 65574
// begin if lab in mc_bases [ i ] then
65398: LD_VAR 0 2
65402: PUSH
65403: LD_EXP 57
65407: PUSH
65408: LD_VAR 0 5
65412: ARRAY
65413: IN
65414: IFFALSE 65572
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
65416: LD_VAR 0 1
65420: PUSH
65421: LD_INT 11
65423: PUSH
65424: LD_INT 4
65426: PUSH
65427: LD_INT 3
65429: PUSH
65430: LD_INT 2
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: IN
65439: PUSH
65440: LD_EXP 87
65444: PUSH
65445: LD_VAR 0 5
65449: ARRAY
65450: AND
65451: IFFALSE 65572
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
65453: LD_ADDR_VAR 0 6
65457: PUSH
65458: LD_EXP 87
65462: PUSH
65463: LD_VAR 0 5
65467: ARRAY
65468: PUSH
65469: LD_INT 1
65471: ARRAY
65472: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
65473: LD_ADDR_EXP 87
65477: PUSH
65478: LD_EXP 87
65482: PPUSH
65483: LD_VAR 0 5
65487: PPUSH
65488: EMPTY
65489: PPUSH
65490: CALL_OW 1
65494: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
65495: LD_VAR 0 6
65499: PPUSH
65500: LD_INT 0
65502: PPUSH
65503: CALL_OW 109
// ComExitBuilding ( tmp ) ;
65507: LD_VAR 0 6
65511: PPUSH
65512: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
65516: LD_ADDR_EXP 86
65520: PUSH
65521: LD_EXP 86
65525: PPUSH
65526: LD_VAR 0 5
65530: PPUSH
65531: LD_EXP 86
65535: PUSH
65536: LD_VAR 0 5
65540: ARRAY
65541: PPUSH
65542: LD_INT 1
65544: PPUSH
65545: LD_VAR 0 6
65549: PPUSH
65550: CALL_OW 2
65554: PPUSH
65555: CALL_OW 1
65559: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
65560: LD_VAR 0 5
65564: PPUSH
65565: LD_INT 112
65567: PPUSH
65568: CALL 51464 0 2
// end ; end ; end ;
65572: GO 65395
65574: POP
65575: POP
// end ;
65576: LD_VAR 0 3
65580: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
65581: LD_INT 0
65583: PPUSH
65584: PPUSH
65585: PPUSH
65586: PPUSH
65587: PPUSH
65588: PPUSH
65589: PPUSH
65590: PPUSH
// if not mc_bases then
65591: LD_EXP 57
65595: NOT
65596: IFFALSE 65600
// exit ;
65598: GO 66525
// for i = 1 to mc_bases do
65600: LD_ADDR_VAR 0 3
65604: PUSH
65605: DOUBLE
65606: LD_INT 1
65608: DEC
65609: ST_TO_ADDR
65610: LD_EXP 57
65614: PUSH
65615: FOR_TO
65616: IFFALSE 66523
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
65618: LD_VAR 0 1
65622: PUSH
65623: LD_EXP 57
65627: PUSH
65628: LD_VAR 0 3
65632: ARRAY
65633: IN
65634: PUSH
65635: LD_VAR 0 1
65639: PUSH
65640: LD_EXP 64
65644: PUSH
65645: LD_VAR 0 3
65649: ARRAY
65650: IN
65651: OR
65652: PUSH
65653: LD_VAR 0 1
65657: PUSH
65658: LD_EXP 76
65662: PUSH
65663: LD_VAR 0 3
65667: ARRAY
65668: IN
65669: OR
65670: PUSH
65671: LD_VAR 0 1
65675: PUSH
65676: LD_EXP 86
65680: PUSH
65681: LD_VAR 0 3
65685: ARRAY
65686: IN
65687: OR
65688: PUSH
65689: LD_VAR 0 1
65693: PUSH
65694: LD_EXP 87
65698: PUSH
65699: LD_VAR 0 3
65703: ARRAY
65704: IN
65705: OR
65706: IFFALSE 66521
// begin if un in mc_ape [ i ] then
65708: LD_VAR 0 1
65712: PUSH
65713: LD_EXP 86
65717: PUSH
65718: LD_VAR 0 3
65722: ARRAY
65723: IN
65724: IFFALSE 65763
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
65726: LD_ADDR_EXP 86
65730: PUSH
65731: LD_EXP 86
65735: PPUSH
65736: LD_VAR 0 3
65740: PPUSH
65741: LD_EXP 86
65745: PUSH
65746: LD_VAR 0 3
65750: ARRAY
65751: PUSH
65752: LD_VAR 0 1
65756: DIFF
65757: PPUSH
65758: CALL_OW 1
65762: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
65763: LD_VAR 0 1
65767: PUSH
65768: LD_EXP 87
65772: PUSH
65773: LD_VAR 0 3
65777: ARRAY
65778: IN
65779: IFFALSE 65803
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
65781: LD_ADDR_EXP 87
65785: PUSH
65786: LD_EXP 87
65790: PPUSH
65791: LD_VAR 0 3
65795: PPUSH
65796: EMPTY
65797: PPUSH
65798: CALL_OW 1
65802: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
65803: LD_VAR 0 1
65807: PPUSH
65808: CALL_OW 247
65812: PUSH
65813: LD_INT 2
65815: EQUAL
65816: PUSH
65817: LD_VAR 0 1
65821: PPUSH
65822: CALL_OW 110
65826: PUSH
65827: LD_INT 20
65829: EQUAL
65830: AND
65831: IFFALSE 65934
// begin fac := MC_GetBuilding ( i , b_factory ) ;
65833: LD_ADDR_VAR 0 8
65837: PUSH
65838: LD_VAR 0 3
65842: PPUSH
65843: LD_INT 3
65845: PPUSH
65846: CALL 63604 0 2
65850: ST_TO_ADDR
// if fac then
65851: LD_VAR 0 8
65855: IFFALSE 65934
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
65857: LD_ADDR_VAR 0 9
65861: PUSH
65862: LD_VAR 0 8
65866: PPUSH
65867: LD_VAR 0 1
65871: PPUSH
65872: CALL_OW 265
65876: PPUSH
65877: LD_VAR 0 1
65881: PPUSH
65882: CALL_OW 262
65886: PPUSH
65887: LD_VAR 0 1
65891: PPUSH
65892: CALL_OW 263
65896: PPUSH
65897: LD_VAR 0 1
65901: PPUSH
65902: CALL_OW 264
65906: PPUSH
65907: CALL 16187 0 5
65911: ST_TO_ADDR
// if components then
65912: LD_VAR 0 9
65916: IFFALSE 65932
// MC_InsertProduceList ( i , components ) ;
65918: LD_VAR 0 3
65922: PPUSH
65923: LD_VAR 0 9
65927: PPUSH
65928: CALL 63267 0 2
// break ;
65932: GO 66523
// end ; end ; if GetType ( un ) = unit_building then
65934: LD_VAR 0 1
65938: PPUSH
65939: CALL_OW 247
65943: PUSH
65944: LD_INT 3
65946: EQUAL
65947: IFFALSE 66244
// begin btype := GetBType ( un ) ;
65949: LD_ADDR_VAR 0 5
65953: PUSH
65954: LD_VAR 0 1
65958: PPUSH
65959: CALL_OW 266
65963: ST_TO_ADDR
// if btype = b_warehouse then
65964: LD_VAR 0 5
65968: PUSH
65969: LD_INT 1
65971: EQUAL
65972: IFFALSE 65990
// begin btype := b_depot ;
65974: LD_ADDR_VAR 0 5
65978: PUSH
65979: LD_INT 0
65981: ST_TO_ADDR
// pos := 1 ;
65982: LD_ADDR_VAR 0 6
65986: PUSH
65987: LD_INT 1
65989: ST_TO_ADDR
// end ; if btype = b_factory then
65990: LD_VAR 0 5
65994: PUSH
65995: LD_INT 3
65997: EQUAL
65998: IFFALSE 66016
// begin btype := b_workshop ;
66000: LD_ADDR_VAR 0 5
66004: PUSH
66005: LD_INT 2
66007: ST_TO_ADDR
// pos := 1 ;
66008: LD_ADDR_VAR 0 6
66012: PUSH
66013: LD_INT 1
66015: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
66016: LD_VAR 0 5
66020: PUSH
66021: LD_INT 7
66023: PUSH
66024: LD_INT 8
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: IN
66031: IFFALSE 66041
// btype := b_lab ;
66033: LD_ADDR_VAR 0 5
66037: PUSH
66038: LD_INT 6
66040: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
66041: LD_ADDR_EXP 62
66045: PUSH
66046: LD_EXP 62
66050: PPUSH
66051: LD_VAR 0 3
66055: PUSH
66056: LD_EXP 62
66060: PUSH
66061: LD_VAR 0 3
66065: ARRAY
66066: PUSH
66067: LD_INT 1
66069: PLUS
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PPUSH
66075: LD_VAR 0 5
66079: PUSH
66080: LD_VAR 0 1
66084: PPUSH
66085: CALL_OW 250
66089: PUSH
66090: LD_VAR 0 1
66094: PPUSH
66095: CALL_OW 251
66099: PUSH
66100: LD_VAR 0 1
66104: PPUSH
66105: CALL_OW 254
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: PPUSH
66116: CALL 19022 0 3
66120: ST_TO_ADDR
// if pos = 1 then
66121: LD_VAR 0 6
66125: PUSH
66126: LD_INT 1
66128: EQUAL
66129: IFFALSE 66244
// begin tmp := mc_build_list [ i ] ;
66131: LD_ADDR_VAR 0 7
66135: PUSH
66136: LD_EXP 62
66140: PUSH
66141: LD_VAR 0 3
66145: ARRAY
66146: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
66147: LD_VAR 0 7
66151: PPUSH
66152: LD_INT 2
66154: PUSH
66155: LD_INT 30
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 30
66167: PUSH
66168: LD_INT 1
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: LIST
66179: PPUSH
66180: CALL_OW 72
66184: IFFALSE 66194
// pos := 2 ;
66186: LD_ADDR_VAR 0 6
66190: PUSH
66191: LD_INT 2
66193: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
66194: LD_ADDR_VAR 0 7
66198: PUSH
66199: LD_VAR 0 7
66203: PPUSH
66204: LD_VAR 0 6
66208: PPUSH
66209: LD_VAR 0 7
66213: PPUSH
66214: CALL 18913 0 3
66218: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
66219: LD_ADDR_EXP 62
66223: PUSH
66224: LD_EXP 62
66228: PPUSH
66229: LD_VAR 0 3
66233: PPUSH
66234: LD_VAR 0 7
66238: PPUSH
66239: CALL_OW 1
66243: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
66244: LD_VAR 0 1
66248: PUSH
66249: LD_EXP 57
66253: PUSH
66254: LD_VAR 0 3
66258: ARRAY
66259: IN
66260: IFFALSE 66299
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
66262: LD_ADDR_EXP 57
66266: PUSH
66267: LD_EXP 57
66271: PPUSH
66272: LD_VAR 0 3
66276: PPUSH
66277: LD_EXP 57
66281: PUSH
66282: LD_VAR 0 3
66286: ARRAY
66287: PUSH
66288: LD_VAR 0 1
66292: DIFF
66293: PPUSH
66294: CALL_OW 1
66298: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
66299: LD_VAR 0 1
66303: PUSH
66304: LD_EXP 64
66308: PUSH
66309: LD_VAR 0 3
66313: ARRAY
66314: IN
66315: IFFALSE 66354
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
66317: LD_ADDR_EXP 64
66321: PUSH
66322: LD_EXP 64
66326: PPUSH
66327: LD_VAR 0 3
66331: PPUSH
66332: LD_EXP 64
66336: PUSH
66337: LD_VAR 0 3
66341: ARRAY
66342: PUSH
66343: LD_VAR 0 1
66347: DIFF
66348: PPUSH
66349: CALL_OW 1
66353: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
66354: LD_VAR 0 1
66358: PUSH
66359: LD_EXP 76
66363: PUSH
66364: LD_VAR 0 3
66368: ARRAY
66369: IN
66370: IFFALSE 66409
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
66372: LD_ADDR_EXP 76
66376: PUSH
66377: LD_EXP 76
66381: PPUSH
66382: LD_VAR 0 3
66386: PPUSH
66387: LD_EXP 76
66391: PUSH
66392: LD_VAR 0 3
66396: ARRAY
66397: PUSH
66398: LD_VAR 0 1
66402: DIFF
66403: PPUSH
66404: CALL_OW 1
66408: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
66409: LD_VAR 0 1
66413: PUSH
66414: LD_EXP 66
66418: PUSH
66419: LD_VAR 0 3
66423: ARRAY
66424: IN
66425: IFFALSE 66464
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
66427: LD_ADDR_EXP 66
66431: PUSH
66432: LD_EXP 66
66436: PPUSH
66437: LD_VAR 0 3
66441: PPUSH
66442: LD_EXP 66
66446: PUSH
66447: LD_VAR 0 3
66451: ARRAY
66452: PUSH
66453: LD_VAR 0 1
66457: DIFF
66458: PPUSH
66459: CALL_OW 1
66463: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
66464: LD_VAR 0 1
66468: PUSH
66469: LD_EXP 65
66473: PUSH
66474: LD_VAR 0 3
66478: ARRAY
66479: IN
66480: IFFALSE 66519
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
66482: LD_ADDR_EXP 65
66486: PUSH
66487: LD_EXP 65
66491: PPUSH
66492: LD_VAR 0 3
66496: PPUSH
66497: LD_EXP 65
66501: PUSH
66502: LD_VAR 0 3
66506: ARRAY
66507: PUSH
66508: LD_VAR 0 1
66512: DIFF
66513: PPUSH
66514: CALL_OW 1
66518: ST_TO_ADDR
// end ; break ;
66519: GO 66523
// end ;
66521: GO 65615
66523: POP
66524: POP
// end ;
66525: LD_VAR 0 2
66529: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
66530: LD_INT 0
66532: PPUSH
66533: PPUSH
66534: PPUSH
// if not mc_bases then
66535: LD_EXP 57
66539: NOT
66540: IFFALSE 66544
// exit ;
66542: GO 66759
// for i = 1 to mc_bases do
66544: LD_ADDR_VAR 0 3
66548: PUSH
66549: DOUBLE
66550: LD_INT 1
66552: DEC
66553: ST_TO_ADDR
66554: LD_EXP 57
66558: PUSH
66559: FOR_TO
66560: IFFALSE 66757
// begin if building in mc_construct_list [ i ] then
66562: LD_VAR 0 1
66566: PUSH
66567: LD_EXP 64
66571: PUSH
66572: LD_VAR 0 3
66576: ARRAY
66577: IN
66578: IFFALSE 66755
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
66580: LD_ADDR_EXP 64
66584: PUSH
66585: LD_EXP 64
66589: PPUSH
66590: LD_VAR 0 3
66594: PPUSH
66595: LD_EXP 64
66599: PUSH
66600: LD_VAR 0 3
66604: ARRAY
66605: PUSH
66606: LD_VAR 0 1
66610: DIFF
66611: PPUSH
66612: CALL_OW 1
66616: ST_TO_ADDR
// if building in mc_lab [ i ] then
66617: LD_VAR 0 1
66621: PUSH
66622: LD_EXP 90
66626: PUSH
66627: LD_VAR 0 3
66631: ARRAY
66632: IN
66633: IFFALSE 66688
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
66635: LD_ADDR_EXP 91
66639: PUSH
66640: LD_EXP 91
66644: PPUSH
66645: LD_VAR 0 3
66649: PPUSH
66650: LD_EXP 91
66654: PUSH
66655: LD_VAR 0 3
66659: ARRAY
66660: PPUSH
66661: LD_INT 1
66663: PPUSH
66664: LD_EXP 91
66668: PUSH
66669: LD_VAR 0 3
66673: ARRAY
66674: PPUSH
66675: LD_INT 0
66677: PPUSH
66678: CALL 18005 0 4
66682: PPUSH
66683: CALL_OW 1
66687: ST_TO_ADDR
// if not building in mc_bases [ i ] then
66688: LD_VAR 0 1
66692: PUSH
66693: LD_EXP 57
66697: PUSH
66698: LD_VAR 0 3
66702: ARRAY
66703: IN
66704: NOT
66705: IFFALSE 66751
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
66707: LD_ADDR_EXP 57
66711: PUSH
66712: LD_EXP 57
66716: PPUSH
66717: LD_VAR 0 3
66721: PUSH
66722: LD_EXP 57
66726: PUSH
66727: LD_VAR 0 3
66731: ARRAY
66732: PUSH
66733: LD_INT 1
66735: PLUS
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PPUSH
66741: LD_VAR 0 1
66745: PPUSH
66746: CALL 19022 0 3
66750: ST_TO_ADDR
// exit ;
66751: POP
66752: POP
66753: GO 66759
// end ; end ;
66755: GO 66559
66757: POP
66758: POP
// end ;
66759: LD_VAR 0 2
66763: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
66764: LD_INT 0
66766: PPUSH
66767: PPUSH
66768: PPUSH
66769: PPUSH
66770: PPUSH
66771: PPUSH
66772: PPUSH
// if not mc_bases then
66773: LD_EXP 57
66777: NOT
66778: IFFALSE 66782
// exit ;
66780: GO 67443
// for i = 1 to mc_bases do
66782: LD_ADDR_VAR 0 3
66786: PUSH
66787: DOUBLE
66788: LD_INT 1
66790: DEC
66791: ST_TO_ADDR
66792: LD_EXP 57
66796: PUSH
66797: FOR_TO
66798: IFFALSE 67441
// begin if building in mc_construct_list [ i ] then
66800: LD_VAR 0 1
66804: PUSH
66805: LD_EXP 64
66809: PUSH
66810: LD_VAR 0 3
66814: ARRAY
66815: IN
66816: IFFALSE 67439
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
66818: LD_ADDR_EXP 64
66822: PUSH
66823: LD_EXP 64
66827: PPUSH
66828: LD_VAR 0 3
66832: PPUSH
66833: LD_EXP 64
66837: PUSH
66838: LD_VAR 0 3
66842: ARRAY
66843: PUSH
66844: LD_VAR 0 1
66848: DIFF
66849: PPUSH
66850: CALL_OW 1
66854: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
66855: LD_ADDR_EXP 57
66859: PUSH
66860: LD_EXP 57
66864: PPUSH
66865: LD_VAR 0 3
66869: PUSH
66870: LD_EXP 57
66874: PUSH
66875: LD_VAR 0 3
66879: ARRAY
66880: PUSH
66881: LD_INT 1
66883: PLUS
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PPUSH
66889: LD_VAR 0 1
66893: PPUSH
66894: CALL 19022 0 3
66898: ST_TO_ADDR
// btype := GetBType ( building ) ;
66899: LD_ADDR_VAR 0 5
66903: PUSH
66904: LD_VAR 0 1
66908: PPUSH
66909: CALL_OW 266
66913: ST_TO_ADDR
// side := GetSide ( building ) ;
66914: LD_ADDR_VAR 0 8
66918: PUSH
66919: LD_VAR 0 1
66923: PPUSH
66924: CALL_OW 255
66928: ST_TO_ADDR
// if btype = b_lab then
66929: LD_VAR 0 5
66933: PUSH
66934: LD_INT 6
66936: EQUAL
66937: IFFALSE 66987
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
66939: LD_ADDR_EXP 90
66943: PUSH
66944: LD_EXP 90
66948: PPUSH
66949: LD_VAR 0 3
66953: PUSH
66954: LD_EXP 90
66958: PUSH
66959: LD_VAR 0 3
66963: ARRAY
66964: PUSH
66965: LD_INT 1
66967: PLUS
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PPUSH
66973: LD_VAR 0 1
66977: PPUSH
66978: CALL 19022 0 3
66982: ST_TO_ADDR
// exit ;
66983: POP
66984: POP
66985: GO 67443
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
66987: LD_VAR 0 5
66991: PUSH
66992: LD_INT 0
66994: PUSH
66995: LD_INT 2
66997: PUSH
66998: LD_INT 4
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: LIST
67005: IN
67006: IFFALSE 67130
// begin if btype = b_armoury then
67008: LD_VAR 0 5
67012: PUSH
67013: LD_INT 4
67015: EQUAL
67016: IFFALSE 67026
// btype := b_barracks ;
67018: LD_ADDR_VAR 0 5
67022: PUSH
67023: LD_INT 5
67025: ST_TO_ADDR
// if btype = b_depot then
67026: LD_VAR 0 5
67030: PUSH
67031: LD_INT 0
67033: EQUAL
67034: IFFALSE 67044
// btype := b_warehouse ;
67036: LD_ADDR_VAR 0 5
67040: PUSH
67041: LD_INT 1
67043: ST_TO_ADDR
// if btype = b_workshop then
67044: LD_VAR 0 5
67048: PUSH
67049: LD_INT 2
67051: EQUAL
67052: IFFALSE 67062
// btype := b_factory ;
67054: LD_ADDR_VAR 0 5
67058: PUSH
67059: LD_INT 3
67061: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
67062: LD_VAR 0 5
67066: PPUSH
67067: LD_VAR 0 8
67071: PPUSH
67072: CALL_OW 323
67076: PUSH
67077: LD_INT 1
67079: EQUAL
67080: IFFALSE 67126
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
67082: LD_ADDR_EXP 89
67086: PUSH
67087: LD_EXP 89
67091: PPUSH
67092: LD_VAR 0 3
67096: PUSH
67097: LD_EXP 89
67101: PUSH
67102: LD_VAR 0 3
67106: ARRAY
67107: PUSH
67108: LD_INT 1
67110: PLUS
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PPUSH
67116: LD_VAR 0 1
67120: PPUSH
67121: CALL 19022 0 3
67125: ST_TO_ADDR
// exit ;
67126: POP
67127: POP
67128: GO 67443
// end ; if btype in [ b_bunker , b_turret ] then
67130: LD_VAR 0 5
67134: PUSH
67135: LD_INT 32
67137: PUSH
67138: LD_INT 33
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: IN
67145: IFFALSE 67435
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
67147: LD_ADDR_EXP 65
67151: PUSH
67152: LD_EXP 65
67156: PPUSH
67157: LD_VAR 0 3
67161: PUSH
67162: LD_EXP 65
67166: PUSH
67167: LD_VAR 0 3
67171: ARRAY
67172: PUSH
67173: LD_INT 1
67175: PLUS
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PPUSH
67181: LD_VAR 0 1
67185: PPUSH
67186: CALL 19022 0 3
67190: ST_TO_ADDR
// if btype = b_bunker then
67191: LD_VAR 0 5
67195: PUSH
67196: LD_INT 32
67198: EQUAL
67199: IFFALSE 67435
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
67201: LD_ADDR_EXP 66
67205: PUSH
67206: LD_EXP 66
67210: PPUSH
67211: LD_VAR 0 3
67215: PUSH
67216: LD_EXP 66
67220: PUSH
67221: LD_VAR 0 3
67225: ARRAY
67226: PUSH
67227: LD_INT 1
67229: PLUS
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PPUSH
67235: LD_VAR 0 1
67239: PPUSH
67240: CALL 19022 0 3
67244: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
67245: LD_ADDR_VAR 0 6
67249: PUSH
67250: LD_EXP 57
67254: PUSH
67255: LD_VAR 0 3
67259: ARRAY
67260: PPUSH
67261: LD_INT 25
67263: PUSH
67264: LD_INT 1
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 3
67273: PUSH
67274: LD_INT 54
67276: PUSH
67277: EMPTY
67278: LIST
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PPUSH
67288: CALL_OW 72
67292: ST_TO_ADDR
// if tmp then
67293: LD_VAR 0 6
67297: IFFALSE 67303
// exit ;
67299: POP
67300: POP
67301: GO 67443
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67303: LD_ADDR_VAR 0 6
67307: PUSH
67308: LD_EXP 57
67312: PUSH
67313: LD_VAR 0 3
67317: ARRAY
67318: PPUSH
67319: LD_INT 2
67321: PUSH
67322: LD_INT 30
67324: PUSH
67325: LD_INT 4
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 30
67334: PUSH
67335: LD_INT 5
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: LIST
67346: PPUSH
67347: CALL_OW 72
67351: ST_TO_ADDR
// if not tmp then
67352: LD_VAR 0 6
67356: NOT
67357: IFFALSE 67363
// exit ;
67359: POP
67360: POP
67361: GO 67443
// for j in tmp do
67363: LD_ADDR_VAR 0 4
67367: PUSH
67368: LD_VAR 0 6
67372: PUSH
67373: FOR_IN
67374: IFFALSE 67433
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
67376: LD_ADDR_VAR 0 7
67380: PUSH
67381: LD_VAR 0 4
67385: PPUSH
67386: CALL_OW 313
67390: PPUSH
67391: LD_INT 25
67393: PUSH
67394: LD_INT 1
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PPUSH
67401: CALL_OW 72
67405: ST_TO_ADDR
// if units then
67406: LD_VAR 0 7
67410: IFFALSE 67431
// begin ComExitBuilding ( units [ 1 ] ) ;
67412: LD_VAR 0 7
67416: PUSH
67417: LD_INT 1
67419: ARRAY
67420: PPUSH
67421: CALL_OW 122
// exit ;
67425: POP
67426: POP
67427: POP
67428: POP
67429: GO 67443
// end ; end ;
67431: GO 67373
67433: POP
67434: POP
// end ; end ; exit ;
67435: POP
67436: POP
67437: GO 67443
// end ; end ;
67439: GO 66797
67441: POP
67442: POP
// end ;
67443: LD_VAR 0 2
67447: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
67448: LD_INT 0
67450: PPUSH
67451: PPUSH
67452: PPUSH
67453: PPUSH
67454: PPUSH
67455: PPUSH
67456: PPUSH
// if not mc_bases then
67457: LD_EXP 57
67461: NOT
67462: IFFALSE 67466
// exit ;
67464: GO 67697
// btype := GetBType ( building ) ;
67466: LD_ADDR_VAR 0 6
67470: PUSH
67471: LD_VAR 0 1
67475: PPUSH
67476: CALL_OW 266
67480: ST_TO_ADDR
// x := GetX ( building ) ;
67481: LD_ADDR_VAR 0 7
67485: PUSH
67486: LD_VAR 0 1
67490: PPUSH
67491: CALL_OW 250
67495: ST_TO_ADDR
// y := GetY ( building ) ;
67496: LD_ADDR_VAR 0 8
67500: PUSH
67501: LD_VAR 0 1
67505: PPUSH
67506: CALL_OW 251
67510: ST_TO_ADDR
// d := GetDir ( building ) ;
67511: LD_ADDR_VAR 0 9
67515: PUSH
67516: LD_VAR 0 1
67520: PPUSH
67521: CALL_OW 254
67525: ST_TO_ADDR
// for i = 1 to mc_bases do
67526: LD_ADDR_VAR 0 4
67530: PUSH
67531: DOUBLE
67532: LD_INT 1
67534: DEC
67535: ST_TO_ADDR
67536: LD_EXP 57
67540: PUSH
67541: FOR_TO
67542: IFFALSE 67695
// begin if not mc_build_list [ i ] then
67544: LD_EXP 62
67548: PUSH
67549: LD_VAR 0 4
67553: ARRAY
67554: NOT
67555: IFFALSE 67559
// continue ;
67557: GO 67541
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
67559: LD_VAR 0 6
67563: PUSH
67564: LD_VAR 0 7
67568: PUSH
67569: LD_VAR 0 8
67573: PUSH
67574: LD_VAR 0 9
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: PPUSH
67585: LD_EXP 62
67589: PUSH
67590: LD_VAR 0 4
67594: ARRAY
67595: PUSH
67596: LD_INT 1
67598: ARRAY
67599: PPUSH
67600: CALL 24620 0 2
67604: IFFALSE 67693
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
67606: LD_ADDR_EXP 62
67610: PUSH
67611: LD_EXP 62
67615: PPUSH
67616: LD_VAR 0 4
67620: PPUSH
67621: LD_EXP 62
67625: PUSH
67626: LD_VAR 0 4
67630: ARRAY
67631: PPUSH
67632: LD_INT 1
67634: PPUSH
67635: CALL_OW 3
67639: PPUSH
67640: CALL_OW 1
67644: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
67645: LD_ADDR_EXP 64
67649: PUSH
67650: LD_EXP 64
67654: PPUSH
67655: LD_VAR 0 4
67659: PUSH
67660: LD_EXP 64
67664: PUSH
67665: LD_VAR 0 4
67669: ARRAY
67670: PUSH
67671: LD_INT 1
67673: PLUS
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PPUSH
67679: LD_VAR 0 1
67683: PPUSH
67684: CALL 19022 0 3
67688: ST_TO_ADDR
// exit ;
67689: POP
67690: POP
67691: GO 67697
// end ; end ;
67693: GO 67541
67695: POP
67696: POP
// end ;
67697: LD_VAR 0 3
67701: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
67702: LD_INT 0
67704: PPUSH
67705: PPUSH
67706: PPUSH
// if not mc_bases then
67707: LD_EXP 57
67711: NOT
67712: IFFALSE 67716
// exit ;
67714: GO 67906
// for i = 1 to mc_bases do
67716: LD_ADDR_VAR 0 4
67720: PUSH
67721: DOUBLE
67722: LD_INT 1
67724: DEC
67725: ST_TO_ADDR
67726: LD_EXP 57
67730: PUSH
67731: FOR_TO
67732: IFFALSE 67819
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
67734: LD_VAR 0 1
67738: PUSH
67739: LD_EXP 65
67743: PUSH
67744: LD_VAR 0 4
67748: ARRAY
67749: IN
67750: PUSH
67751: LD_VAR 0 1
67755: PUSH
67756: LD_EXP 66
67760: PUSH
67761: LD_VAR 0 4
67765: ARRAY
67766: IN
67767: NOT
67768: AND
67769: IFFALSE 67817
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
67771: LD_ADDR_EXP 66
67775: PUSH
67776: LD_EXP 66
67780: PPUSH
67781: LD_VAR 0 4
67785: PUSH
67786: LD_EXP 66
67790: PUSH
67791: LD_VAR 0 4
67795: ARRAY
67796: PUSH
67797: LD_INT 1
67799: PLUS
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PPUSH
67805: LD_VAR 0 1
67809: PPUSH
67810: CALL 19022 0 3
67814: ST_TO_ADDR
// break ;
67815: GO 67819
// end ; end ;
67817: GO 67731
67819: POP
67820: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
67821: LD_VAR 0 1
67825: PPUSH
67826: CALL_OW 257
67830: PUSH
67831: LD_EXP 83
67835: IN
67836: PUSH
67837: LD_VAR 0 1
67841: PPUSH
67842: CALL_OW 266
67846: PUSH
67847: LD_INT 5
67849: EQUAL
67850: AND
67851: PUSH
67852: LD_VAR 0 2
67856: PPUSH
67857: CALL_OW 110
67861: PUSH
67862: LD_INT 18
67864: NONEQUAL
67865: AND
67866: IFFALSE 67906
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
67868: LD_VAR 0 2
67872: PPUSH
67873: CALL_OW 257
67877: PUSH
67878: LD_INT 5
67880: PUSH
67881: LD_INT 8
67883: PUSH
67884: LD_INT 9
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: LIST
67891: IN
67892: IFFALSE 67906
// SetClass ( unit , 1 ) ;
67894: LD_VAR 0 2
67898: PPUSH
67899: LD_INT 1
67901: PPUSH
67902: CALL_OW 336
// end ;
67906: LD_VAR 0 3
67910: RET
// export function MCE_EvacuteVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
67911: LD_INT 0
67913: PPUSH
67914: PPUSH
// if not mc_bases then
67915: LD_EXP 57
67919: NOT
67920: IFFALSE 67924
// exit ;
67922: GO 68040
// if GetLives ( abandoned_vehicle ) > 250 then
67924: LD_VAR 0 2
67928: PPUSH
67929: CALL_OW 256
67933: PUSH
67934: LD_INT 250
67936: GREATER
67937: IFFALSE 67941
// exit ;
67939: GO 68040
// for i = 1 to mc_bases do
67941: LD_ADDR_VAR 0 6
67945: PUSH
67946: DOUBLE
67947: LD_INT 1
67949: DEC
67950: ST_TO_ADDR
67951: LD_EXP 57
67955: PUSH
67956: FOR_TO
67957: IFFALSE 68038
// begin if driver in mc_bases [ i ] then
67959: LD_VAR 0 1
67963: PUSH
67964: LD_EXP 57
67968: PUSH
67969: LD_VAR 0 6
67973: ARRAY
67974: IN
67975: IFFALSE 68036
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
67977: LD_VAR 0 1
67981: PPUSH
67982: LD_EXP 57
67986: PUSH
67987: LD_VAR 0 6
67991: ARRAY
67992: PPUSH
67993: LD_INT 2
67995: PUSH
67996: LD_INT 30
67998: PUSH
67999: LD_INT 0
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 30
68008: PUSH
68009: LD_INT 1
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: LIST
68020: PPUSH
68021: CALL_OW 72
68025: PUSH
68026: LD_INT 1
68028: ARRAY
68029: PPUSH
68030: CALL_OW 112
// break ;
68034: GO 68038
// end ; end ;
68036: GO 67956
68038: POP
68039: POP
// end ;
68040: LD_VAR 0 5
68044: RET
