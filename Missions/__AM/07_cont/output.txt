// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 25 0 0
// DebugMode ;
  12: CALL 65 0 0
// PrepareRussians ;
  16: CALL 1515 0 0
// PrepareAmericans ;
  20: CALL 470 0 0
// end ;
  24: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := 1 ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// mission_prefix := 07c_ ;
  36: LD_ADDR_EXP 3
  40: PUSH
  41: LD_STRING 07c_
  43: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// buildings_counter := 0 ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ;
  60: LD_VAR 0 1
  64: RET
// function DebugMode ; begin
  65: LD_INT 0
  67: PPUSH
// if not debug then
  68: LD_EXP 1
  72: NOT
  73: IFFALSE 77
// exit ;
  75: GO 84
// FogOff ( 1 ) ;
  77: LD_INT 1
  79: PPUSH
  80: CALL_OW 344
// end ; end_of_file
  84: LD_VAR 0 1
  88: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
  89: LD_INT 0
  91: PPUSH
  92: PPUSH
// if exist_mode then
  93: LD_VAR 0 2
  97: IFFALSE 122
// unit := CreateCharacter ( mission_prev_prefix & ident ) else
  99: LD_ADDR_VAR 0 4
 103: PUSH
 104: LD_EXP 2
 108: PUSH
 109: LD_VAR 0 1
 113: STR
 114: PPUSH
 115: CALL_OW 34
 119: ST_TO_ADDR
 120: GO 137
// unit := NewCharacter ( ident ) ;
 122: LD_ADDR_VAR 0 4
 126: PUSH
 127: LD_VAR 0 1
 131: PPUSH
 132: CALL_OW 25
 136: ST_TO_ADDR
// result := unit ;
 137: LD_ADDR_VAR 0 3
 141: PUSH
 142: LD_VAR 0 4
 146: ST_TO_ADDR
// end ;
 147: LD_VAR 0 3
 151: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 152: LD_INT 0
 154: PPUSH
// uc_side := side ;
 155: LD_ADDR_OWVAR 20
 159: PUSH
 160: LD_VAR 0 1
 164: ST_TO_ADDR
// uc_nation := nation ;
 165: LD_ADDR_OWVAR 21
 169: PUSH
 170: LD_VAR 0 2
 174: ST_TO_ADDR
// vc_chassis := chassis ;
 175: LD_ADDR_OWVAR 37
 179: PUSH
 180: LD_VAR 0 3
 184: ST_TO_ADDR
// vc_engine := engine ;
 185: LD_ADDR_OWVAR 39
 189: PUSH
 190: LD_VAR 0 4
 194: ST_TO_ADDR
// vc_control := control ;
 195: LD_ADDR_OWVAR 38
 199: PUSH
 200: LD_VAR 0 5
 204: ST_TO_ADDR
// vc_weapon := weapon ;
 205: LD_ADDR_OWVAR 40
 209: PUSH
 210: LD_VAR 0 6
 214: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 215: LD_ADDR_OWVAR 41
 219: PUSH
 220: LD_VAR 0 7
 224: ST_TO_ADDR
// result := CreateVehicle ;
 225: LD_ADDR_VAR 0 8
 229: PUSH
 230: CALL_OW 45
 234: ST_TO_ADDR
// end ;
 235: LD_VAR 0 8
 239: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 240: LD_INT 0
 242: PPUSH
 243: PPUSH
 244: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_INT 22
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 21
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 50
 272: PUSH
 273: EMPTY
 274: LIST
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: LIST
 280: PPUSH
 281: CALL_OW 69
 285: PUSH
 286: LD_EXP 5
 290: PUSH
 291: LD_EXP 6
 295: PUSH
 296: LD_EXP 7
 300: PUSH
 301: LD_EXP 8
 305: PUSH
 306: LD_EXP 9
 310: PUSH
 311: LD_EXP 10
 315: PUSH
 316: LD_EXP 11
 320: PUSH
 321: LD_EXP 12
 325: PUSH
 326: LD_EXP 14
 330: PUSH
 331: LD_EXP 13
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: LIST
 347: DIFF
 348: ST_TO_ADDR
// if not filter then
 349: LD_VAR 0 4
 353: NOT
 354: IFFALSE 358
// exit ;
 356: GO 385
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 358: LD_ADDR_VAR 0 2
 362: PUSH
 363: LD_VAR 0 4
 367: PPUSH
 368: LD_INT 26
 370: PUSH
 371: LD_VAR 0 1
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PPUSH
 380: CALL_OW 72
 384: ST_TO_ADDR
// end ;
 385: LD_VAR 0 2
 389: RET
// export function SayX ( units , ident ) ; var i ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
// result := false ;
 394: LD_ADDR_VAR 0 3
 398: PUSH
 399: LD_INT 0
 401: ST_TO_ADDR
// if not units then
 402: LD_VAR 0 1
 406: NOT
 407: IFFALSE 411
// exit ;
 409: GO 465
// for i in units do
 411: LD_ADDR_VAR 0 4
 415: PUSH
 416: LD_VAR 0 1
 420: PUSH
 421: FOR_IN
 422: IFFALSE 463
// if IsOk ( i ) then
 424: LD_VAR 0 4
 428: PPUSH
 429: CALL_OW 302
 433: IFFALSE 461
// begin Say ( i , ident ) ;
 435: LD_VAR 0 4
 439: PPUSH
 440: LD_VAR 0 2
 444: PPUSH
 445: CALL_OW 88
// result := i ;
 449: LD_ADDR_VAR 0 3
 453: PUSH
 454: LD_VAR 0 4
 458: ST_TO_ADDR
// break ;
 459: GO 463
// end ;
 461: GO 421
 463: POP
 464: POP
// end ; end_of_file
 465: LD_VAR 0 3
 469: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
 470: LD_INT 0
 472: PPUSH
 473: PPUSH
 474: PPUSH
 475: PPUSH
 476: PPUSH
 477: PPUSH
// uc_side := 1 ;
 478: LD_ADDR_OWVAR 20
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// uc_nation := 1 ;
 486: LD_ADDR_OWVAR 21
 490: PUSH
 491: LD_INT 1
 493: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 494: LD_ADDR_EXP 5
 498: PUSH
 499: LD_STRING JMM
 501: PPUSH
 502: LD_EXP 1
 506: NOT
 507: PPUSH
 508: CALL 89 0 2
 512: ST_TO_ADDR
// team := [ JMM ] ;
 513: LD_ADDR_VAR 0 3
 517: PUSH
 518: LD_EXP 5
 522: PUSH
 523: EMPTY
 524: LIST
 525: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
 526: LD_STRING BrownIn07
 528: PPUSH
 529: LD_EXP 1
 533: PPUSH
 534: CALL_OW 30
 538: IFFALSE 559
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 540: LD_ADDR_EXP 6
 544: PUSH
 545: LD_STRING Brown
 547: PPUSH
 548: LD_EXP 1
 552: NOT
 553: PPUSH
 554: CALL 89 0 2
 558: ST_TO_ADDR
// if Brown then
 559: LD_EXP 6
 563: IFFALSE 581
// team := team ^ Brown ;
 565: LD_ADDR_VAR 0 3
 569: PUSH
 570: LD_VAR 0 3
 574: PUSH
 575: LD_EXP 6
 579: ADD
 580: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
 581: LD_STRING DonaldsonIn07
 583: PPUSH
 584: LD_EXP 1
 588: PPUSH
 589: CALL_OW 30
 593: IFFALSE 614
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 595: LD_ADDR_EXP 7
 599: PUSH
 600: LD_STRING Donaldson
 602: PPUSH
 603: LD_EXP 1
 607: NOT
 608: PPUSH
 609: CALL 89 0 2
 613: ST_TO_ADDR
// if Donaldson then
 614: LD_EXP 7
 618: IFFALSE 636
// team := team ^ Donaldson ;
 620: LD_ADDR_VAR 0 3
 624: PUSH
 625: LD_VAR 0 3
 629: PUSH
 630: LD_EXP 7
 634: ADD
 635: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
 636: LD_STRING BobbyIn07
 638: PPUSH
 639: LD_EXP 1
 643: PPUSH
 644: CALL_OW 30
 648: IFFALSE 669
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 650: LD_ADDR_EXP 8
 654: PUSH
 655: LD_STRING Bobby
 657: PPUSH
 658: LD_EXP 1
 662: NOT
 663: PPUSH
 664: CALL 89 0 2
 668: ST_TO_ADDR
// if Bobby then
 669: LD_EXP 8
 673: IFFALSE 691
// team := team ^ Bobby ;
 675: LD_ADDR_VAR 0 3
 679: PUSH
 680: LD_VAR 0 3
 684: PUSH
 685: LD_EXP 8
 689: ADD
 690: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
 691: LD_STRING CyrusIn07
 693: PPUSH
 694: LD_EXP 1
 698: PPUSH
 699: CALL_OW 30
 703: IFFALSE 724
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 705: LD_ADDR_EXP 9
 709: PUSH
 710: LD_STRING Cyrus
 712: PPUSH
 713: LD_EXP 1
 717: NOT
 718: PPUSH
 719: CALL 89 0 2
 723: ST_TO_ADDR
// if Cyrus then
 724: LD_EXP 9
 728: IFFALSE 746
// team := team ^ Cyrus ;
 730: LD_ADDR_VAR 0 3
 734: PUSH
 735: LD_VAR 0 3
 739: PUSH
 740: LD_EXP 9
 744: ADD
 745: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
 746: LD_STRING LisaIn07
 748: PPUSH
 749: LD_EXP 1
 753: PPUSH
 754: CALL_OW 30
 758: IFFALSE 779
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 760: LD_ADDR_EXP 10
 764: PUSH
 765: LD_STRING Lisa
 767: PPUSH
 768: LD_EXP 1
 772: NOT
 773: PPUSH
 774: CALL 89 0 2
 778: ST_TO_ADDR
// if Lisa then
 779: LD_EXP 10
 783: IFFALSE 801
// team := team ^ Lisa ;
 785: LD_ADDR_VAR 0 3
 789: PUSH
 790: LD_VAR 0 3
 794: PUSH
 795: LD_EXP 10
 799: ADD
 800: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
 801: LD_STRING GladstoneIn07
 803: PPUSH
 804: LD_EXP 1
 808: PPUSH
 809: CALL_OW 30
 813: IFFALSE 834
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 815: LD_ADDR_EXP 12
 819: PUSH
 820: LD_STRING Gladstone
 822: PPUSH
 823: LD_EXP 1
 827: NOT
 828: PPUSH
 829: CALL 89 0 2
 833: ST_TO_ADDR
// if Gladstone then
 834: LD_EXP 12
 838: IFFALSE 856
// team := team ^ Gladstone ;
 840: LD_ADDR_VAR 0 3
 844: PUSH
 845: LD_VAR 0 3
 849: PUSH
 850: LD_EXP 12
 854: ADD
 855: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
 856: LD_STRING KhatamIn07
 858: PPUSH
 859: LD_EXP 1
 863: PPUSH
 864: CALL_OW 30
 868: IFFALSE 889
// Khatam := PrepareUnit ( Khatam , ( not debug ) ) ;
 870: LD_ADDR_EXP 13
 874: PUSH
 875: LD_STRING Khatam
 877: PPUSH
 878: LD_EXP 1
 882: NOT
 883: PPUSH
 884: CALL 89 0 2
 888: ST_TO_ADDR
// if Khatam then
 889: LD_EXP 13
 893: IFFALSE 911
// team := team ^ Khatam ;
 895: LD_ADDR_VAR 0 3
 899: PUSH
 900: LD_VAR 0 3
 904: PUSH
 905: LD_EXP 13
 909: ADD
 910: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
 911: LD_ADDR_VAR 0 4
 915: PUSH
 916: LD_STRING 07_others
 918: PPUSH
 919: CALL_OW 31
 923: ST_TO_ADDR
// if others then
 924: LD_VAR 0 4
 928: IFFALSE 946
// team := team ^ others ;
 930: LD_ADDR_VAR 0 3
 934: PUSH
 935: LD_VAR 0 3
 939: PUSH
 940: LD_VAR 0 4
 944: ADD
 945: ST_TO_ADDR
// if debug then
 946: LD_EXP 1
 950: IFFALSE 1024
// begin InitHc ;
 952: CALL_OW 19
// for i = 1 to 4 do
 956: LD_ADDR_VAR 0 2
 960: PUSH
 961: DOUBLE
 962: LD_INT 1
 964: DEC
 965: ST_TO_ADDR
 966: LD_INT 4
 968: PUSH
 969: FOR_TO
 970: IFFALSE 1022
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
 972: LD_INT 0
 974: PPUSH
 975: LD_INT 1
 977: PUSH
 978: LD_INT 3
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PUSH
 985: LD_INT 1
 987: PPUSH
 988: LD_INT 2
 990: PPUSH
 991: CALL_OW 12
 995: ARRAY
 996: PPUSH
 997: LD_INT 4
 999: PPUSH
1000: CALL_OW 380
// team := team ^ CreateHuman ;
1004: LD_ADDR_VAR 0 3
1008: PUSH
1009: LD_VAR 0 3
1013: PUSH
1014: CALL_OW 44
1018: ADD
1019: ST_TO_ADDR
// end ;
1020: GO 969
1022: POP
1023: POP
// end ; m := 0 ;
1024: LD_ADDR_VAR 0 6
1028: PUSH
1029: LD_INT 0
1031: ST_TO_ADDR
// for i in team do
1032: LD_ADDR_VAR 0 2
1036: PUSH
1037: LD_VAR 0 3
1041: PUSH
1042: FOR_IN
1043: IFFALSE 1223
// if GetClass ( i ) = 3 then
1045: LD_VAR 0 2
1049: PPUSH
1050: CALL_OW 257
1054: PUSH
1055: LD_INT 3
1057: EQUAL
1058: IFFALSE 1206
// begin m := m + 1 ;
1060: LD_ADDR_VAR 0 6
1064: PUSH
1065: LD_VAR 0 6
1069: PUSH
1070: LD_INT 1
1072: PLUS
1073: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
1074: LD_ADDR_VAR 0 5
1078: PUSH
1079: LD_INT 1
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_INT 2
1087: PUSH
1088: LD_INT 3
1090: PUSH
1091: LD_INT 2
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: PUSH
1103: LD_VAR 0 6
1107: PUSH
1108: LD_INT 4
1110: MOD
1111: PUSH
1112: LD_INT 1
1114: PLUS
1115: ARRAY
1116: PPUSH
1117: LD_INT 2
1119: PPUSH
1120: LD_INT 1
1122: PPUSH
1123: LD_INT 4
1125: PUSH
1126: LD_INT 5
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: LD_INT 11
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_VAR 0 6
1145: PUSH
1146: LD_INT 4
1148: MOD
1149: PUSH
1150: LD_INT 1
1152: PLUS
1153: ARRAY
1154: PPUSH
1155: LD_INT 60
1157: PPUSH
1158: CALL 152 0 7
1162: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1163: LD_VAR 0 5
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
1175: LD_VAR 0 5
1179: PPUSH
1180: LD_INT 1
1182: PPUSH
1183: LD_INT 0
1185: PPUSH
1186: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
1190: LD_VAR 0 2
1194: PPUSH
1195: LD_VAR 0 5
1199: PPUSH
1200: CALL_OW 52
// end else
1204: GO 1221
// PlaceUnitArea ( i , startArea , false ) ;
1206: LD_VAR 0 2
1210: PPUSH
1211: LD_INT 1
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 49
1221: GO 1042
1223: POP
1224: POP
// uc_side := 4 ;
1225: LD_ADDR_OWVAR 20
1229: PUSH
1230: LD_INT 4
1232: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ) ;
1233: LD_ADDR_EXP 15
1237: PUSH
1238: LD_STRING Harisson
1240: PPUSH
1241: LD_INT 0
1243: PPUSH
1244: CALL 89 0 2
1248: ST_TO_ADDR
// PrepareScout ;
1249: CALL 1258 0 0
// end ;
1253: LD_VAR 0 1
1257: RET
// function PrepareScout ; var ape ; begin
1258: LD_INT 0
1260: PPUSH
1261: PPUSH
// uc_side := 4 ;
1262: LD_ADDR_OWVAR 20
1266: PUSH
1267: LD_INT 4
1269: ST_TO_ADDR
// uc_nation := 1 ;
1270: LD_ADDR_OWVAR 21
1274: PUSH
1275: LD_INT 1
1277: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
1278: LD_STRING FrankIn06
1280: PPUSH
1281: LD_INT 0
1283: PPUSH
1284: CALL_OW 30
1288: IFFALSE 1305
// Frank := CreateCharacter ( 06c_Frank ) else
1290: LD_ADDR_EXP 11
1294: PUSH
1295: LD_STRING 06c_Frank
1297: PPUSH
1298: CALL_OW 34
1302: ST_TO_ADDR
1303: GO 1345
// if LoadVariable ( FrankInDelta , 0 ) then
1305: LD_STRING FrankInDelta
1307: PPUSH
1308: LD_INT 0
1310: PPUSH
1311: CALL_OW 30
1315: IFFALSE 1332
// Frank := CreateCharacter ( 05_Frank ) else
1317: LD_ADDR_EXP 11
1321: PUSH
1322: LD_STRING 05_Frank
1324: PPUSH
1325: CALL_OW 34
1329: ST_TO_ADDR
1330: GO 1345
// Frank := CreateCharacter ( 04_Frank ) ;
1332: LD_ADDR_EXP 11
1336: PUSH
1337: LD_STRING 04_Frank
1339: PPUSH
1340: CALL_OW 34
1344: ST_TO_ADDR
// if Frank then
1345: LD_EXP 11
1349: IFFALSE 1470
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
1351: LD_EXP 11
1355: PPUSH
1356: LD_INT 2
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 49
// uc_side := 0 ;
1366: LD_ADDR_OWVAR 20
1370: PUSH
1371: LD_INT 0
1373: ST_TO_ADDR
// uc_nation := 0 ;
1374: LD_ADDR_OWVAR 21
1378: PUSH
1379: LD_INT 0
1381: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
1382: LD_INT 0
1384: PPUSH
1385: LD_INT 12
1387: PPUSH
1388: LD_INT 0
1390: PPUSH
1391: CALL_OW 380
// ape := CreateHuman ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: CALL_OW 44
1404: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
1405: LD_VAR 0 2
1409: PPUSH
1410: LD_EXP 11
1414: PPUSH
1415: CALL_OW 250
1419: PPUSH
1420: LD_EXP 11
1424: PPUSH
1425: CALL_OW 251
1429: PPUSH
1430: LD_INT 5
1432: PPUSH
1433: LD_INT 0
1435: PPUSH
1436: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
1440: LD_VAR 0 2
1444: PPUSH
1445: LD_EXP 11
1449: PPUSH
1450: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
1454: LD_EXP 11
1458: PPUSH
1459: LD_VAR 0 2
1463: PPUSH
1464: CALL_OW 119
// exit ;
1468: GO 1510
// end ; Kikuchi := PrepareUnit ( Yamoko , false ) ;
1470: LD_ADDR_EXP 14
1474: PUSH
1475: LD_STRING Yamoko
1477: PPUSH
1478: LD_INT 0
1480: PPUSH
1481: CALL 89 0 2
1485: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
1486: LD_EXP 14
1490: PPUSH
1491: LD_INT 2
1493: PPUSH
1494: LD_INT 0
1496: PPUSH
1497: CALL_OW 49
// ComHold ( Kikuchi ) ;
1501: LD_EXP 14
1505: PPUSH
1506: CALL_OW 140
// end ; end_of_file
1510: LD_VAR 0 1
1514: RET
// export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
1515: LD_INT 0
1517: PPUSH
1518: PPUSH
1519: PPUSH
1520: PPUSH
1521: PPUSH
1522: PPUSH
1523: PPUSH
1524: PPUSH
1525: PPUSH
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
1532: PPUSH
// uc_side := 3 ;
1533: LD_ADDR_OWVAR 20
1537: PUSH
1538: LD_INT 3
1540: ST_TO_ADDR
// uc_nation := 3 ;
1541: LD_ADDR_OWVAR 21
1545: PUSH
1546: LD_INT 3
1548: ST_TO_ADDR
// if Difficulty > 1 then
1549: LD_OWVAR 67
1553: PUSH
1554: LD_INT 1
1556: GREATER
1557: IFFALSE 1614
// begin bc_type := b_breastwork ;
1559: LD_ADDR_OWVAR 42
1563: PUSH
1564: LD_INT 31
1566: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
1567: LD_INT 78
1569: PPUSH
1570: LD_INT 74
1572: PPUSH
1573: LD_INT 2
1575: PPUSH
1576: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
1580: LD_INT 171
1582: PPUSH
1583: LD_INT 193
1585: PPUSH
1586: LD_INT 4
1588: PPUSH
1589: CALL_OW 47
// bc_type := b_turret ;
1593: LD_ADDR_OWVAR 42
1597: PUSH
1598: LD_INT 33
1600: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
1601: LD_INT 129
1603: PPUSH
1604: LD_INT 96
1606: PPUSH
1607: LD_INT 3
1609: PPUSH
1610: CALL_OW 47
// end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1614: LD_ADDR_VAR 0 9
1618: PUSH
1619: LD_INT 22
1621: PUSH
1622: LD_INT 3
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: LD_INT 2
1631: PUSH
1632: LD_INT 30
1634: PUSH
1635: LD_INT 0
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 30
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1666: LD_ADDR_VAR 0 10
1670: PUSH
1671: LD_INT 22
1673: PUSH
1674: LD_INT 3
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 30
1686: PUSH
1687: LD_INT 6
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 30
1696: PUSH
1697: LD_INT 7
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 30
1706: PUSH
1707: LD_INT 8
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: PPUSH
1724: CALL_OW 69
1728: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
1729: LD_ADDR_VAR 0 11
1733: PUSH
1734: LD_INT 22
1736: PUSH
1737: LD_INT 3
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 30
1746: PUSH
1747: LD_INT 3
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
1763: LD_ADDR_VAR 0 12
1767: PUSH
1768: LD_INT 22
1770: PUSH
1771: LD_INT 3
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 30
1780: PUSH
1781: LD_INT 31
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: PPUSH
1792: CALL_OW 69
1796: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
1797: LD_ADDR_VAR 0 13
1801: PUSH
1802: LD_INT 22
1804: PUSH
1805: LD_INT 3
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 30
1814: PUSH
1815: LD_INT 32
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: PPUSH
1826: CALL_OW 69
1830: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
1831: LD_ADDR_VAR 0 14
1835: PUSH
1836: LD_INT 22
1838: PUSH
1839: LD_INT 3
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 30
1848: PUSH
1849: LD_INT 33
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PPUSH
1860: CALL_OW 69
1864: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
1865: LD_ADDR_VAR 0 15
1869: PUSH
1870: LD_INT 42
1872: PUSH
1873: LD_INT 5
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 43
1882: PUSH
1883: LD_INT 50
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 44
1892: PUSH
1893: LD_INT 30
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: PUSH
1900: LD_INT 46
1902: PUSH
1903: LD_INT 15
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 4 , 3 ] ;
1916: LD_ADDR_VAR 0 16
1920: PUSH
1921: LD_INT 0
1923: PUSH
1924: LD_INT 4
1926: PUSH
1927: LD_INT 4
1929: PUSH
1930: LD_INT 3
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
1939: LD_ADDR_VAR 0 6
1943: PUSH
1944: LD_INT 4
1946: PUSH
1947: LD_INT 5
1949: PUSH
1950: LD_INT 6
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: PUSH
1958: LD_OWVAR 67
1962: ARRAY
1963: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
1964: LD_INT 16
1966: PPUSH
1967: LD_STRING am_tukh
1969: PPUSH
1970: CALL_OW 500
// for i in dep_list do
1974: LD_ADDR_VAR 0 2
1978: PUSH
1979: LD_VAR 0 9
1983: PUSH
1984: FOR_IN
1985: IFFALSE 2029
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
1987: LD_VAR 0 2
1991: PPUSH
1992: CALL_OW 274
1996: PPUSH
1997: LD_INT 1
1999: PPUSH
2000: LD_INT 1000
2002: PPUSH
2003: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2007: LD_VAR 0 2
2011: PPUSH
2012: CALL_OW 274
2016: PPUSH
2017: LD_INT 2
2019: PPUSH
2020: LD_INT 1000
2022: PPUSH
2023: CALL_OW 277
// end ;
2027: GO 1984
2029: POP
2030: POP
// InitHc ;
2031: CALL_OW 19
// tmp := bunker_list * [ 50 , 70 , 85 ] [ Difficulty ] div 100 ;
2035: LD_ADDR_VAR 0 8
2039: PUSH
2040: LD_VAR 0 13
2044: PUSH
2045: LD_INT 50
2047: PUSH
2048: LD_INT 70
2050: PUSH
2051: LD_INT 85
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: LIST
2058: PUSH
2059: LD_OWVAR 67
2063: ARRAY
2064: MUL
2065: PUSH
2066: LD_INT 100
2068: DIV
2069: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
2070: LD_ADDR_VAR 0 16
2074: PUSH
2075: LD_VAR 0 16
2079: PPUSH
2080: LD_INT 1
2082: PPUSH
2083: LD_VAR 0 8
2087: PPUSH
2088: CALL_OW 1
2092: ST_TO_ADDR
// tmp := [ ] ;
2093: LD_ADDR_VAR 0 8
2097: PUSH
2098: EMPTY
2099: ST_TO_ADDR
// for i in bunker_list do
2100: LD_ADDR_VAR 0 2
2104: PUSH
2105: LD_VAR 0 13
2109: PUSH
2110: FOR_IN
2111: IFFALSE 2207
// if i mod 10 + 1 < tmp then
2113: LD_VAR 0 2
2117: PUSH
2118: LD_INT 10
2120: MOD
2121: PUSH
2122: LD_INT 1
2124: PLUS
2125: PUSH
2126: LD_VAR 0 8
2130: LESS
2131: IFFALSE 2176
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
2133: LD_ADDR_VAR 0 8
2137: PUSH
2138: LD_VAR 0 8
2142: PPUSH
2143: LD_VAR 0 2
2147: PUSH
2148: LD_INT 3
2150: PPUSH
2151: LD_INT 5
2153: PPUSH
2154: CALL_OW 12
2158: MOD
2159: PUSH
2160: LD_INT 1
2162: PLUS
2163: PPUSH
2164: LD_VAR 0 2
2168: PPUSH
2169: CALL_OW 2
2173: ST_TO_ADDR
2174: GO 2205
// tmp := Insert ( tmp , tmp + 1 , i ) ;
2176: LD_ADDR_VAR 0 8
2180: PUSH
2181: LD_VAR 0 8
2185: PPUSH
2186: LD_VAR 0 8
2190: PUSH
2191: LD_INT 1
2193: PLUS
2194: PPUSH
2195: LD_VAR 0 2
2199: PPUSH
2200: CALL_OW 2
2204: ST_TO_ADDR
2205: GO 2110
2207: POP
2208: POP
// bunker_list := tmp ;
2209: LD_ADDR_VAR 0 13
2213: PUSH
2214: LD_VAR 0 8
2218: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
2219: LD_ADDR_VAR 0 2
2223: PUSH
2224: LD_VAR 0 13
2228: PUSH
2229: LD_VAR 0 14
2233: ADD
2234: PUSH
2235: FOR_IN
2236: IFFALSE 2333
// begin tmp := rand ( 0 , 100 ) ;
2238: LD_ADDR_VAR 0 8
2242: PUSH
2243: LD_INT 0
2245: PPUSH
2246: LD_INT 100
2248: PPUSH
2249: CALL_OW 12
2253: ST_TO_ADDR
// r := 0 ;
2254: LD_ADDR_VAR 0 4
2258: PUSH
2259: LD_INT 0
2261: ST_TO_ADDR
// for j in weapons_list do
2262: LD_ADDR_VAR 0 3
2266: PUSH
2267: LD_VAR 0 15
2271: PUSH
2272: FOR_IN
2273: IFFALSE 2329
// begin r := r + j [ 2 ] ;
2275: LD_ADDR_VAR 0 4
2279: PUSH
2280: LD_VAR 0 4
2284: PUSH
2285: LD_VAR 0 3
2289: PUSH
2290: LD_INT 2
2292: ARRAY
2293: PLUS
2294: ST_TO_ADDR
// if r >= tmp then
2295: LD_VAR 0 4
2299: PUSH
2300: LD_VAR 0 8
2304: GREATEREQUAL
2305: IFFALSE 2327
// begin PlaceWeaponTurret ( i , j [ 1 ] ) ;
2307: LD_VAR 0 2
2311: PPUSH
2312: LD_VAR 0 3
2316: PUSH
2317: LD_INT 1
2319: ARRAY
2320: PPUSH
2321: CALL_OW 431
// break ;
2325: GO 2329
// end ; end ;
2327: GO 2272
2329: POP
2330: POP
// end ;
2331: GO 2235
2333: POP
2334: POP
// while ( personel_counter [ 1 ] ) do
2335: LD_VAR 0 16
2339: PUSH
2340: LD_INT 1
2342: ARRAY
2343: IFFALSE 2451
// begin i := rand ( 1 , bunker_list ) ;
2345: LD_ADDR_VAR 0 2
2349: PUSH
2350: LD_INT 1
2352: PPUSH
2353: LD_VAR 0 13
2357: PPUSH
2358: CALL_OW 12
2362: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2363: LD_INT 0
2365: PPUSH
2366: LD_INT 1
2368: PPUSH
2369: LD_VAR 0 6
2373: PPUSH
2374: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
2378: CALL_OW 44
2382: PPUSH
2383: LD_VAR 0 13
2387: PUSH
2388: LD_VAR 0 2
2392: ARRAY
2393: PPUSH
2394: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
2398: LD_ADDR_VAR 0 13
2402: PUSH
2403: LD_VAR 0 13
2407: PPUSH
2408: LD_VAR 0 2
2412: PPUSH
2413: CALL_OW 3
2417: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
2418: LD_ADDR_VAR 0 16
2422: PUSH
2423: LD_VAR 0 16
2427: PPUSH
2428: LD_INT 1
2430: PPUSH
2431: LD_VAR 0 16
2435: PUSH
2436: LD_INT 1
2438: ARRAY
2439: PUSH
2440: LD_INT 1
2442: MINUS
2443: PPUSH
2444: CALL_OW 1
2448: ST_TO_ADDR
// end ;
2449: GO 2335
// for i = 1 to personel_counter [ 2 ] do
2451: LD_ADDR_VAR 0 2
2455: PUSH
2456: DOUBLE
2457: LD_INT 1
2459: DEC
2460: ST_TO_ADDR
2461: LD_VAR 0 16
2465: PUSH
2466: LD_INT 2
2468: ARRAY
2469: PUSH
2470: FOR_TO
2471: IFFALSE 2502
// begin PrepareHuman ( false , 2 , skill ) ;
2473: LD_INT 0
2475: PPUSH
2476: LD_INT 2
2478: PPUSH
2479: LD_VAR 0 6
2483: PPUSH
2484: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
2488: CALL_OW 44
2492: PPUSH
2493: LD_INT 16
2495: PPUSH
2496: CALL_OW 52
// end ;
2500: GO 2470
2502: POP
2503: POP
// for i = 1 to personel_counter [ 3 ] do
2504: LD_ADDR_VAR 0 2
2508: PUSH
2509: DOUBLE
2510: LD_INT 1
2512: DEC
2513: ST_TO_ADDR
2514: LD_VAR 0 16
2518: PUSH
2519: LD_INT 3
2521: ARRAY
2522: PUSH
2523: FOR_TO
2524: IFFALSE 2561
// begin PrepareHuman ( false , 3 , skill ) ;
2526: LD_INT 0
2528: PPUSH
2529: LD_INT 3
2531: PPUSH
2532: LD_VAR 0 6
2536: PPUSH
2537: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ 1 ] ) ;
2541: CALL_OW 44
2545: PPUSH
2546: LD_VAR 0 11
2550: PUSH
2551: LD_INT 1
2553: ARRAY
2554: PPUSH
2555: CALL_OW 52
// end ;
2559: GO 2523
2561: POP
2562: POP
// for i = 1 to personel_counter [ 4 ] do
2563: LD_ADDR_VAR 0 2
2567: PUSH
2568: DOUBLE
2569: LD_INT 1
2571: DEC
2572: ST_TO_ADDR
2573: LD_VAR 0 16
2577: PUSH
2578: LD_INT 4
2580: ARRAY
2581: PUSH
2582: FOR_TO
2583: IFFALSE 2620
// begin PrepareHuman ( false , 4 , skill ) ;
2585: LD_INT 0
2587: PPUSH
2588: LD_INT 4
2590: PPUSH
2591: LD_VAR 0 6
2595: PPUSH
2596: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
2600: CALL_OW 44
2604: PPUSH
2605: LD_VAR 0 10
2609: PUSH
2610: LD_INT 1
2612: ARRAY
2613: PPUSH
2614: CALL_OW 52
// end ;
2618: GO 2582
2620: POP
2621: POP
// for i in breastworks_list do
2622: LD_ADDR_VAR 0 2
2626: PUSH
2627: LD_VAR 0 12
2631: PUSH
2632: FOR_IN
2633: IFFALSE 2745
// begin r := GetDir ( i ) ;
2635: LD_ADDR_VAR 0 4
2639: PUSH
2640: LD_VAR 0 2
2644: PPUSH
2645: CALL_OW 254
2649: ST_TO_ADDR
// if r > 3 then
2650: LD_VAR 0 4
2654: PUSH
2655: LD_INT 3
2657: GREATER
2658: IFFALSE 2676
// r := r - 3 else
2660: LD_ADDR_VAR 0 4
2664: PUSH
2665: LD_VAR 0 4
2669: PUSH
2670: LD_INT 3
2672: MINUS
2673: ST_TO_ADDR
2674: GO 2690
// r := r + 3 ;
2676: LD_ADDR_VAR 0 4
2680: PUSH
2681: LD_VAR 0 4
2685: PUSH
2686: LD_INT 3
2688: PLUS
2689: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2690: LD_INT 0
2692: PPUSH
2693: LD_INT 1
2695: PPUSH
2696: LD_VAR 0 6
2700: PPUSH
2701: CALL_OW 380
// un := CreateHuman ;
2705: LD_ADDR_VAR 0 5
2709: PUSH
2710: CALL_OW 44
2714: ST_TO_ADDR
// SetDir ( un , r ) ;
2715: LD_VAR 0 5
2719: PPUSH
2720: LD_VAR 0 4
2724: PPUSH
2725: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2729: LD_VAR 0 5
2733: PPUSH
2734: LD_VAR 0 2
2738: PPUSH
2739: CALL_OW 52
// end ;
2743: GO 2632
2745: POP
2746: POP
// r := [ 4 , 5 , 6 ] [ Difficulty ] ;
2747: LD_ADDR_VAR 0 4
2751: PUSH
2752: LD_INT 4
2754: PUSH
2755: LD_INT 5
2757: PUSH
2758: LD_INT 6
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: LIST
2765: PUSH
2766: LD_OWVAR 67
2770: ARRAY
2771: ST_TO_ADDR
// for i = 1 to r do
2772: LD_ADDR_VAR 0 2
2776: PUSH
2777: DOUBLE
2778: LD_INT 1
2780: DEC
2781: ST_TO_ADDR
2782: LD_VAR 0 4
2786: PUSH
2787: FOR_TO
2788: IFFALSE 2883
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
2790: LD_ADDR_VAR 0 5
2794: PUSH
2795: LD_INT 3
2797: PPUSH
2798: LD_INT 3
2800: PPUSH
2801: LD_INT 22
2803: PPUSH
2804: LD_INT 1
2806: PPUSH
2807: LD_INT 1
2809: PPUSH
2810: LD_INT 43
2812: PUSH
2813: LD_INT 44
2815: PUSH
2816: LD_INT 42
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: PUSH
2824: LD_VAR 0 2
2828: PUSH
2829: LD_INT 3
2831: MOD
2832: PUSH
2833: LD_INT 1
2835: PLUS
2836: ARRAY
2837: PPUSH
2838: LD_INT 100
2840: PPUSH
2841: CALL 152 0 7
2845: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2846: LD_VAR 0 5
2850: PPUSH
2851: LD_INT 0
2853: PPUSH
2854: LD_INT 5
2856: PPUSH
2857: CALL_OW 12
2861: PPUSH
2862: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
2866: LD_VAR 0 5
2870: PPUSH
2871: LD_INT 5
2873: PPUSH
2874: LD_INT 0
2876: PPUSH
2877: CALL_OW 49
// end ;
2881: GO 2787
2883: POP
2884: POP
// end ;
2885: LD_VAR 0 1
2889: RET
// every 0 0$1 do
2890: GO 2892
2892: DISABLE
// begin end ; end_of_file
2893: END
// export function Action ; begin
2894: LD_INT 0
2896: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
2897: LD_INT 28
2899: PPUSH
2900: LD_INT 3
2902: PPUSH
2903: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
2907: LD_INT 41
2909: PPUSH
2910: LD_INT 76
2912: PPUSH
2913: LD_INT 1
2915: PPUSH
2916: LD_INT 10
2918: PPUSH
2919: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
2923: LD_INT 41
2925: PPUSH
2926: LD_INT 76
2928: PPUSH
2929: LD_INT 1
2931: PPUSH
2932: CALL_OW 331
// InGameOn ;
2936: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
2940: LD_EXP 15
2944: PPUSH
2945: LD_STRING D2-Har-1
2947: PPUSH
2948: CALL_OW 94
// InGameOff ;
2952: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2956: LD_STRING M1
2958: PPUSH
2959: CALL_OW 337
// end ;
2963: LD_VAR 0 1
2967: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
2968: LD_EXP 4
2972: PUSH
2973: LD_INT 1
2975: GREATER
2976: IFFALSE 3067
2978: GO 2980
2980: DISABLE
2981: LD_INT 0
2983: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
2984: LD_ADDR_VAR 0 1
2988: PUSH
2989: LD_INT 1
2991: PPUSH
2992: CALL 240 0 1
2996: PUSH
2997: LD_INT 1
2999: ARRAY
3000: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
3001: LD_VAR 0 1
3005: PPUSH
3006: LD_STRING D2a-Sol1-1
3008: PPUSH
3009: CALL_OW 88
// if not un then
3013: LD_VAR 0 1
3017: NOT
3018: IFFALSE 3049
// begin un := GetRandom ( sex_female ) [ 1 ] ;
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 2
3027: PPUSH
3028: CALL 240 0 1
3032: PUSH
3033: LD_INT 1
3035: ARRAY
3036: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
3037: LD_VAR 0 1
3041: PPUSH
3042: LD_STRING D2a-FSol1-1
3044: PPUSH
3045: CALL_OW 88
// end ; if Khatam then
3049: LD_EXP 13
3053: IFFALSE 3067
// Say ( Khatam , D3b-Khat-3 ) ;
3055: LD_EXP 13
3059: PPUSH
3060: LD_STRING D3b-Khat-3
3062: PPUSH
3063: CALL_OW 88
// end ;
3067: PPOPN 1
3069: END
// every 0 0$1 trigger Frank and GetDistUnits ( JMM , Frank ) < 5 and not InBattle ( 1 ) do var i , ape ;
3070: LD_EXP 11
3074: PUSH
3075: LD_EXP 5
3079: PPUSH
3080: LD_EXP 11
3084: PPUSH
3085: CALL_OW 296
3089: PUSH
3090: LD_INT 5
3092: LESS
3093: AND
3094: PUSH
3095: LD_INT 1
3097: PPUSH
3098: CALL_OW 463
3102: NOT
3103: AND
3104: IFFALSE 3691
3106: GO 3108
3108: DISABLE
3109: LD_INT 0
3111: PPUSH
3112: PPUSH
// begin InGameOn ;
3113: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
3117: LD_ADDR_VAR 0 2
3121: PUSH
3122: LD_INT 22
3124: PUSH
3125: LD_INT 0
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PUSH
3132: LD_INT 25
3134: PUSH
3135: LD_INT 12
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
3151: LD_ADDR_VAR 0 2
3155: PUSH
3156: LD_VAR 0 2
3160: PPUSH
3161: LD_EXP 11
3165: PPUSH
3166: CALL_OW 74
3170: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
3171: LD_ADDR_VAR 0 1
3175: PUSH
3176: LD_INT 22
3178: PUSH
3179: LD_INT 1
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PUSH
3186: LD_INT 21
3188: PUSH
3189: LD_INT 1
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: PUSH
3196: LD_INT 91
3198: PUSH
3199: LD_EXP 11
3203: PUSH
3204: LD_INT 20
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: LIST
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: LIST
3216: PPUSH
3217: CALL_OW 69
3221: PUSH
3222: FOR_IN
3223: IFFALSE 3241
// ComTurnUnit ( i , Frank ) ;
3225: LD_VAR 0 1
3229: PPUSH
3230: LD_EXP 11
3234: PPUSH
3235: CALL_OW 119
3239: GO 3222
3241: POP
3242: POP
// SetSide ( Frank , 1 ) ;
3243: LD_EXP 11
3247: PPUSH
3248: LD_INT 1
3250: PPUSH
3251: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
3255: LD_EXP 5
3259: PPUSH
3260: LD_EXP 11
3264: PPUSH
3265: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
3269: LD_EXP 5
3273: PPUSH
3274: LD_EXP 11
3278: PPUSH
3279: CALL_OW 179
// CenterOnUnits ( Frank ) ;
3283: LD_EXP 11
3287: PPUSH
3288: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
3292: LD_EXP 11
3296: PPUSH
3297: LD_STRING D3a-Frank-1
3299: PPUSH
3300: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
3304: LD_VAR 0 2
3308: PPUSH
3309: LD_INT 42
3311: PPUSH
3312: LD_INT 78
3314: PPUSH
3315: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
3319: LD_VAR 0 2
3323: PPUSH
3324: LD_EXP 11
3328: PPUSH
3329: CALL_OW 179
// if Lisa then
3333: LD_EXP 10
3337: IFFALSE 3351
// Say ( Lisa , D3a-Lisa-1 ) ;
3339: LD_EXP 10
3343: PPUSH
3344: LD_STRING D3a-Lisa-1
3346: PPUSH
3347: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
3351: LD_EXP 5
3355: PPUSH
3356: LD_STRING D3a-JMM-1
3358: PPUSH
3359: CALL_OW 88
// if Cyrus then
3363: LD_EXP 9
3367: IFFALSE 3381
// Say ( Cyrus , D3a-Cyrus-1 ) ;
3369: LD_EXP 9
3373: PPUSH
3374: LD_STRING D3a-Cyrus-1
3376: PPUSH
3377: CALL_OW 88
// if GetRandom ( sex_male ) then
3381: LD_INT 1
3383: PPUSH
3384: CALL 240 0 1
3388: IFFALSE 3409
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
3390: LD_INT 1
3392: PPUSH
3393: CALL 240 0 1
3397: PUSH
3398: LD_INT 1
3400: ARRAY
3401: PPUSH
3402: LD_STRING D3a-Sol1-1
3404: PPUSH
3405: CALL_OW 88
// if GetRandom ( sex_female ) then
3409: LD_INT 2
3411: PPUSH
3412: CALL 240 0 1
3416: IFFALSE 3437
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
3418: LD_INT 2
3420: PPUSH
3421: CALL 240 0 1
3425: PUSH
3426: LD_INT 1
3428: ARRAY
3429: PPUSH
3430: LD_STRING D3a-FSol1-1
3432: PPUSH
3433: CALL_OW 88
// if Gladstone then
3437: LD_EXP 12
3441: IFFALSE 3455
// Say ( Gladstone , D3a-Glad-1 ) ;
3443: LD_EXP 12
3447: PPUSH
3448: LD_STRING D3a-Glad-1
3450: PPUSH
3451: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
3455: LD_VAR 0 2
3459: PPUSH
3460: LD_INT 60
3462: PPUSH
3463: LD_INT 113
3465: PPUSH
3466: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
3470: LD_EXP 11
3474: PPUSH
3475: LD_STRING D3a-Frank-2
3477: PPUSH
3478: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
3482: LD_EXP 11
3486: PPUSH
3487: LD_EXP 5
3491: PPUSH
3492: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
3496: LD_EXP 5
3500: PPUSH
3501: LD_STRING D3a-JMM-2
3503: PPUSH
3504: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
3508: LD_INT 1
3510: PPUSH
3511: LD_INT 4
3513: PPUSH
3514: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
3518: LD_INT 85
3520: PPUSH
3521: LD_INT 134
3523: PPUSH
3524: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
3528: LD_EXP 11
3532: PPUSH
3533: LD_STRING D3a-Frank-3
3535: PPUSH
3536: CALL_OW 88
// Wait ( 0 0$01 ) ;
3540: LD_INT 35
3542: PPUSH
3543: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
3547: LD_INT 166
3549: PPUSH
3550: LD_INT 136
3552: PPUSH
3553: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
3557: LD_EXP 5
3561: PPUSH
3562: LD_STRING D3a-JMM-3
3564: PPUSH
3565: CALL_OW 88
// Wait ( 0 0$01 ) ;
3569: LD_INT 35
3571: PPUSH
3572: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
3576: LD_EXP 11
3580: PPUSH
3581: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
3585: LD_EXP 11
3589: PPUSH
3590: LD_STRING D3a-Frank-4
3592: PPUSH
3593: CALL_OW 88
// if Lisa then
3597: LD_EXP 10
3601: IFFALSE 3615
// Say ( Lisa , D3a-Lisa-4 ) ;
3603: LD_EXP 10
3607: PPUSH
3608: LD_STRING D3a-Lisa-4
3610: PPUSH
3611: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
3615: LD_EXP 5
3619: PPUSH
3620: LD_STRING D3a-JMM-4
3622: PPUSH
3623: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
3627: LD_EXP 11
3631: PPUSH
3632: LD_STRING D3a-Frank-5
3634: PPUSH
3635: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
3639: LD_EXP 5
3643: PPUSH
3644: LD_STRING D3a-JMM-5
3646: PPUSH
3647: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
3651: LD_EXP 11
3655: PPUSH
3656: LD_STRING D3a-Frank-6
3658: PPUSH
3659: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
3663: LD_EXP 5
3667: PPUSH
3668: LD_STRING D3a-JMM-6
3670: PPUSH
3671: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
3675: LD_EXP 11
3679: PPUSH
3680: LD_STRING D3a-Frank-7
3682: PPUSH
3683: CALL_OW 88
// InGameOff ;
3687: CALL_OW 9
// end ;
3691: PPOPN 2
3693: END
// every 0 0$1 trigger Kikuchi and GetDistUnits ( JMM , Kikuchi ) < 5 and not InBattle ( 1 ) do
3694: LD_EXP 14
3698: PUSH
3699: LD_EXP 5
3703: PPUSH
3704: LD_EXP 14
3708: PPUSH
3709: CALL_OW 296
3713: PUSH
3714: LD_INT 5
3716: LESS
3717: AND
3718: PUSH
3719: LD_INT 1
3721: PPUSH
3722: CALL_OW 463
3726: NOT
3727: AND
3728: IFFALSE 3908
3730: GO 3732
3732: DISABLE
// begin InGameOn ;
3733: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
3737: LD_EXP 5
3741: PPUSH
3742: LD_EXP 14
3746: PPUSH
3747: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
3751: LD_EXP 14
3755: PPUSH
3756: LD_EXP 5
3760: PPUSH
3761: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
3765: LD_EXP 14
3769: PPUSH
3770: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
3774: LD_EXP 14
3778: PPUSH
3779: LD_STRING D3b-Yam-1
3781: PPUSH
3782: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
3786: LD_EXP 5
3790: PPUSH
3791: LD_STRING D3b-JMM-1
3793: PPUSH
3794: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
3798: LD_INT 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
3808: LD_INT 85
3810: PPUSH
3811: LD_INT 134
3813: PPUSH
3814: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
3818: LD_EXP 14
3822: PPUSH
3823: LD_STRING D3b-Yam-2
3825: PPUSH
3826: CALL_OW 88
// Wait ( 0 0$01 ) ;
3830: LD_INT 35
3832: PPUSH
3833: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
3837: LD_EXP 5
3841: PPUSH
3842: LD_STRING D3b-JMM-2
3844: PPUSH
3845: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
3849: LD_INT 166
3851: PPUSH
3852: LD_INT 136
3854: PPUSH
3855: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
3859: LD_EXP 14
3863: PPUSH
3864: LD_STRING D3b-Yam-3
3866: PPUSH
3867: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
3871: LD_EXP 5
3875: PPUSH
3876: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
3880: LD_EXP 5
3884: PPUSH
3885: LD_STRING D3b-JMM-3a
3887: PPUSH
3888: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
3892: LD_EXP 14
3896: PPUSH
3897: LD_INT 1
3899: PPUSH
3900: CALL_OW 235
// InGameOff ;
3904: CALL_OW 9
// end ; end_of_file
3908: END
// on UnitDestroyed ( un ) do begin if un = JMM then
3909: LD_VAR 0 1
3913: PUSH
3914: LD_EXP 5
3918: EQUAL
3919: IFFALSE 3928
// YouLost ( JMM ) ;
3921: LD_STRING JMM
3923: PPUSH
3924: CALL_OW 104
// if GetType ( un ) = unit_building then
3928: LD_VAR 0 1
3932: PPUSH
3933: CALL_OW 247
3937: PUSH
3938: LD_INT 3
3940: EQUAL
3941: IFFALSE 3957
// buildings_counter := buildings_counter + 1 ;
3943: LD_ADDR_EXP 4
3947: PUSH
3948: LD_EXP 4
3952: PUSH
3953: LD_INT 1
3955: PLUS
3956: ST_TO_ADDR
// end ;
3957: PPOPN 1
3959: END
// on LeaveBuilding ( b , un ) do begin end ;
3960: PPOPN 2
3962: END
