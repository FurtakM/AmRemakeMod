// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 29 0 0
// DebugMode ;
  12: CALL 230 0 0
// PrepareRussians ;
  16: CALL 2593 0 0
// PrepareAmericans ;
  20: CALL 1548 0 0
// Action ;
  24: CALL 5215 0 0
// end ;
  28: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end ; function Init ; begin
  29: LD_INT 0
  31: PPUSH
// debug := false ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// mission_prefix := 07c_ ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 07c_
  47: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  48: LD_ADDR_EXP 2
  52: PUSH
  53: LD_STRING 07_
  55: ST_TO_ADDR
// buildings_counter := 0 ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// time_to_end := [ [ 33 33$00 , 30 30$00 , 27 27$00 ] [ Difficulty ] , [ 39 39$00 , 36 36$00 , 33 33$00 ] [ Difficulty ] , [ 45 45$00 , 42 42$00 , 39 39$00 ] [ Difficulty ] ] ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 69300
  71: PUSH
  72: LD_INT 63000
  74: PUSH
  75: LD_INT 56700
  77: PUSH
  78: EMPTY
  79: LIST
  80: LIST
  81: LIST
  82: PUSH
  83: LD_OWVAR 67
  87: ARRAY
  88: PUSH
  89: LD_INT 81900
  91: PUSH
  92: LD_INT 75600
  94: PUSH
  95: LD_INT 69300
  97: PUSH
  98: EMPTY
  99: LIST
 100: LIST
 101: LIST
 102: PUSH
 103: LD_OWVAR 67
 107: ARRAY
 108: PUSH
 109: LD_INT 94500
 111: PUSH
 112: LD_INT 88200
 114: PUSH
 115: LD_INT 81900
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: LIST
 122: PUSH
 123: LD_OWVAR 67
 127: ARRAY
 128: PUSH
 129: EMPTY
 130: LIST
 131: LIST
 132: LIST
 133: ST_TO_ADDR
// can_end := false ;
 134: LD_ADDR_EXP 6
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// must_end := false ;
 142: LD_ADDR_EXP 7
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// end ;
 150: LD_VAR 0 1
 154: RET
// every 0 0$01 trigger not debug do
 155: LD_EXP 1
 159: NOT
 160: IFFALSE 229
 162: GO 164
 164: DISABLE
// begin enable ;
 165: ENABLE
// if not must_end then
 166: LD_EXP 7
 170: NOT
 171: IFFALSE 192
// display_strings := [ #Am07-1 , tick ] else
 173: LD_ADDR_OWVAR 47
 177: PUSH
 178: LD_STRING #Am07-1
 180: PUSH
 181: LD_OWVAR 1
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: ST_TO_ADDR
 190: GO 229
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 192: LD_ADDR_OWVAR 47
 196: PUSH
 197: LD_STRING #Am07-1
 199: PUSH
 200: LD_OWVAR 1
 204: PUSH
 205: LD_STRING #Am07-2
 207: PUSH
 208: LD_EXP 5
 212: PUSH
 213: LD_INT 3
 215: ARRAY
 216: PUSH
 217: LD_OWVAR 1
 221: MINUS
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: ST_TO_ADDR
// end ;
 229: END
// function DebugMode ; begin
 230: LD_INT 0
 232: PPUSH
// if not debug then
 233: LD_EXP 1
 237: NOT
 238: IFFALSE 242
// exit ;
 240: GO 249
// FogOff ( 1 ) ;
 242: LD_INT 1
 244: PPUSH
 245: CALL_OW 344
// end ;
 249: LD_VAR 0 1
 253: RET
// every 3 trigger debug do var i , filter ;
 254: LD_EXP 1
 258: IFFALSE 347
 260: GO 262
 262: DISABLE
 263: LD_INT 0
 265: PPUSH
 266: PPUSH
// begin enable ;
 267: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: LD_INT 22
 275: PUSH
 276: LD_INT 1
 278: PUSH
 279: EMPTY
 280: LIST
 281: LIST
 282: PUSH
 283: LD_INT 3
 285: PUSH
 286: LD_INT 24
 288: PUSH
 289: LD_INT 500
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PPUSH
 304: CALL_OW 69
 308: ST_TO_ADDR
// if not filter then
 309: LD_VAR 0 2
 313: NOT
 314: IFFALSE 318
// exit ;
 316: GO 347
// for i in filter do
 318: LD_ADDR_VAR 0 1
 322: PUSH
 323: LD_VAR 0 2
 327: PUSH
 328: FOR_IN
 329: IFFALSE 345
// SetLives ( i , 1000 ) ;
 331: LD_VAR 0 1
 335: PPUSH
 336: LD_INT 1000
 338: PPUSH
 339: CALL_OW 234
 343: GO 328
 345: POP
 346: POP
// end ; end_of_file
 347: PPOPN 2
 349: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 350: LD_INT 0
 352: PPUSH
 353: PPUSH
// if exist_mode then
 354: LD_VAR 0 2
 358: IFFALSE 383
// unit := CreateCharacter ( mission_prev_prefix & ident ) else
 360: LD_ADDR_VAR 0 4
 364: PUSH
 365: LD_EXP 2
 369: PUSH
 370: LD_VAR 0 1
 374: STR
 375: PPUSH
 376: CALL_OW 34
 380: ST_TO_ADDR
 381: GO 398
// unit := NewCharacter ( ident ) ;
 383: LD_ADDR_VAR 0 4
 387: PUSH
 388: LD_VAR 0 1
 392: PPUSH
 393: CALL_OW 25
 397: ST_TO_ADDR
// result := unit ;
 398: LD_ADDR_VAR 0 3
 402: PUSH
 403: LD_VAR 0 4
 407: ST_TO_ADDR
// end ;
 408: LD_VAR 0 3
 412: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 413: LD_INT 0
 415: PPUSH
// uc_side := side ;
 416: LD_ADDR_OWVAR 20
 420: PUSH
 421: LD_VAR 0 1
 425: ST_TO_ADDR
// uc_nation := nation ;
 426: LD_ADDR_OWVAR 21
 430: PUSH
 431: LD_VAR 0 2
 435: ST_TO_ADDR
// vc_chassis := chassis ;
 436: LD_ADDR_OWVAR 37
 440: PUSH
 441: LD_VAR 0 3
 445: ST_TO_ADDR
// vc_engine := engine ;
 446: LD_ADDR_OWVAR 39
 450: PUSH
 451: LD_VAR 0 4
 455: ST_TO_ADDR
// vc_control := control ;
 456: LD_ADDR_OWVAR 38
 460: PUSH
 461: LD_VAR 0 5
 465: ST_TO_ADDR
// vc_weapon := weapon ;
 466: LD_ADDR_OWVAR 40
 470: PUSH
 471: LD_VAR 0 6
 475: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 476: LD_ADDR_OWVAR 41
 480: PUSH
 481: LD_VAR 0 7
 485: ST_TO_ADDR
// result := CreateVehicle ;
 486: LD_ADDR_VAR 0 8
 490: PUSH
 491: CALL_OW 45
 495: ST_TO_ADDR
// end ;
 496: LD_VAR 0 8
 500: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 506: LD_ADDR_VAR 0 4
 510: PUSH
 511: LD_INT 22
 513: PUSH
 514: LD_INT 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 21
 523: PUSH
 524: LD_INT 1
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 50
 533: PUSH
 534: EMPTY
 535: LIST
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: LIST
 541: PPUSH
 542: CALL_OW 69
 546: PUSH
 547: LD_EXP 8
 551: PUSH
 552: LD_EXP 9
 556: PUSH
 557: LD_EXP 10
 561: PUSH
 562: LD_EXP 11
 566: PUSH
 567: LD_EXP 12
 571: PUSH
 572: LD_EXP 13
 576: PUSH
 577: LD_EXP 14
 581: PUSH
 582: LD_EXP 15
 586: PUSH
 587: LD_EXP 17
 591: PUSH
 592: LD_EXP 16
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: DIFF
 609: ST_TO_ADDR
// if not filter then
 610: LD_VAR 0 4
 614: NOT
 615: IFFALSE 619
// exit ;
 617: GO 646
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 619: LD_ADDR_VAR 0 2
 623: PUSH
 624: LD_VAR 0 4
 628: PPUSH
 629: LD_INT 26
 631: PUSH
 632: LD_VAR 0 1
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PPUSH
 641: CALL_OW 72
 645: ST_TO_ADDR
// end ;
 646: LD_VAR 0 2
 650: RET
// export function SayX ( units , ident ) ; var i ; begin
 651: LD_INT 0
 653: PPUSH
 654: PPUSH
// result := false ;
 655: LD_ADDR_VAR 0 3
 659: PUSH
 660: LD_INT 0
 662: ST_TO_ADDR
// if not units then
 663: LD_VAR 0 1
 667: NOT
 668: IFFALSE 672
// exit ;
 670: GO 726
// for i in units do
 672: LD_ADDR_VAR 0 4
 676: PUSH
 677: LD_VAR 0 1
 681: PUSH
 682: FOR_IN
 683: IFFALSE 724
// if IsOk ( i ) then
 685: LD_VAR 0 4
 689: PPUSH
 690: CALL_OW 302
 694: IFFALSE 722
// begin Say ( i , ident ) ;
 696: LD_VAR 0 4
 700: PPUSH
 701: LD_VAR 0 2
 705: PPUSH
 706: CALL_OW 88
// result := i ;
 710: LD_ADDR_VAR 0 3
 714: PUSH
 715: LD_VAR 0 4
 719: ST_TO_ADDR
// break ;
 720: GO 724
// end ;
 722: GO 682
 724: POP
 725: POP
// end ;
 726: LD_VAR 0 3
 730: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , t , side ; begin
 731: LD_INT 0
 733: PPUSH
 734: PPUSH
 735: PPUSH
 736: PPUSH
 737: PPUSH
// if not un or not IsOk ( un ) then
 738: LD_VAR 0 1
 742: NOT
 743: PUSH
 744: LD_VAR 0 1
 748: PPUSH
 749: CALL_OW 302
 753: NOT
 754: OR
 755: IFFALSE 759
// exit ;
 757: GO 1153
// side := GetSide ( un ) ;
 759: LD_ADDR_VAR 0 9
 763: PUSH
 764: LD_VAR 0 1
 768: PPUSH
 769: CALL_OW 255
 773: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 774: LD_ADDR_VAR 0 7
 778: PUSH
 779: LD_INT 22
 781: PUSH
 782: LD_VAR 0 9
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: PUSH
 791: LD_INT 30
 793: PUSH
 794: LD_INT 32
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 50
 803: PUSH
 804: EMPTY
 805: LIST
 806: PUSH
 807: LD_INT 58
 809: PUSH
 810: EMPTY
 811: LIST
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: PPUSH
 819: CALL_OW 69
 823: PUSH
 824: LD_VAR 0 2
 828: DIFF
 829: ST_TO_ADDR
// if not filter then
 830: LD_VAR 0 7
 834: NOT
 835: IFFALSE 1018
// begin filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 837: LD_ADDR_VAR 0 7
 841: PUSH
 842: LD_INT 22
 844: PUSH
 845: LD_VAR 0 9
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: LD_INT 30
 856: PUSH
 857: LD_INT 5
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: PPUSH
 868: CALL_OW 69
 872: ST_TO_ADDR
// if not filter then
 873: LD_VAR 0 7
 877: NOT
 878: IFFALSE 901
// begin ComMoveXY ( un , x , y ) ;
 880: LD_VAR 0 1
 884: PPUSH
 885: LD_VAR 0 3
 889: PPUSH
 890: LD_VAR 0 4
 894: PPUSH
 895: CALL_OW 111
// exit ;
 899: GO 1153
// end ; repeat t := NearestUnitToUnit ( filter , un ) ;
 901: LD_ADDR_VAR 0 8
 905: PUSH
 906: LD_VAR 0 7
 910: PPUSH
 911: LD_VAR 0 1
 915: PPUSH
 916: CALL_OW 74
 920: ST_TO_ADDR
// if UnitsInside ( t ) = 6 then
 921: LD_VAR 0 8
 925: PPUSH
 926: CALL_OW 313
 930: PUSH
 931: LD_INT 6
 933: EQUAL
 934: IFFALSE 952
// filter := filter diff t ;
 936: LD_ADDR_VAR 0 7
 940: PUSH
 941: LD_VAR 0 7
 945: PUSH
 946: LD_VAR 0 8
 950: DIFF
 951: ST_TO_ADDR
// until UnitsInside ( t ) < 6 or not filter ;
 952: LD_VAR 0 8
 956: PPUSH
 957: CALL_OW 313
 961: PUSH
 962: LD_INT 6
 964: LESS
 965: PUSH
 966: LD_VAR 0 7
 970: NOT
 971: OR
 972: IFFALSE 901
// if not filter then
 974: LD_VAR 0 7
 978: NOT
 979: IFFALSE 1002
// ComMoveXY ( un , x , y ) else
 981: LD_VAR 0 1
 985: PPUSH
 986: LD_VAR 0 3
 990: PPUSH
 991: LD_VAR 0 4
 995: PPUSH
 996: CALL_OW 111
1000: GO 1016
// ComEnterUnit ( un , t ) ;
1002: LD_VAR 0 1
1006: PPUSH
1007: LD_VAR 0 8
1011: PPUSH
1012: CALL_OW 120
// end else
1016: GO 1153
// begin repeat t := NearestUnitToUnit ( filter , un ) ;
1018: LD_ADDR_VAR 0 8
1022: PUSH
1023: LD_VAR 0 7
1027: PPUSH
1028: LD_VAR 0 1
1032: PPUSH
1033: CALL_OW 74
1037: ST_TO_ADDR
// if ( GetTag ( t ) = 7 ) then
1038: LD_VAR 0 8
1042: PPUSH
1043: CALL_OW 110
1047: PUSH
1048: LD_INT 7
1050: EQUAL
1051: IFFALSE 1069
// filter := filter diff t ;
1053: LD_ADDR_VAR 0 7
1057: PUSH
1058: LD_VAR 0 7
1062: PUSH
1063: LD_VAR 0 8
1067: DIFF
1068: ST_TO_ADDR
// until GetTag ( t ) <> 7 or not filter ;
1069: LD_VAR 0 8
1073: PPUSH
1074: CALL_OW 110
1078: PUSH
1079: LD_INT 7
1081: NONEQUAL
1082: PUSH
1083: LD_VAR 0 7
1087: NOT
1088: OR
1089: IFFALSE 1018
// if GetTag ( t ) <> 7 then
1091: LD_VAR 0 8
1095: PPUSH
1096: CALL_OW 110
1100: PUSH
1101: LD_INT 7
1103: NONEQUAL
1104: IFFALSE 1134
// begin SetTag ( t , 7 ) ;
1106: LD_VAR 0 8
1110: PPUSH
1111: LD_INT 7
1113: PPUSH
1114: CALL_OW 109
// ComEnterUnit ( un , t ) ;
1118: LD_VAR 0 1
1122: PPUSH
1123: LD_VAR 0 8
1127: PPUSH
1128: CALL_OW 120
// end else
1132: GO 1153
// ComMoveXY ( un , x , y ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 3
1143: PPUSH
1144: LD_VAR 0 4
1148: PPUSH
1149: CALL_OW 111
// end ; end ;
1153: LD_VAR 0 5
1157: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1158: LD_INT 0
1160: PPUSH
1161: PPUSH
1162: PPUSH
// if not base then
1163: LD_VAR 0 1
1167: NOT
1168: IFFALSE 1172
// exit ;
1170: GO 1230
// tmp := GetEnergy ( GetBase ( base ) ) ;
1172: LD_ADDR_VAR 0 4
1176: PUSH
1177: LD_VAR 0 1
1181: PPUSH
1182: CALL_OW 274
1186: PPUSH
1187: CALL_OW 278
1191: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1192: LD_VAR 0 4
1196: PUSH
1197: LD_INT 1
1199: ARRAY
1200: PUSH
1201: LD_VAR 0 4
1205: PUSH
1206: LD_INT 4
1208: ARRAY
1209: GREATER
1210: IFFALSE 1222
// result := true else
1212: LD_ADDR_VAR 0 2
1216: PUSH
1217: LD_INT 1
1219: ST_TO_ADDR
1220: GO 1230
// result := false ;
1222: LD_ADDR_VAR 0 2
1226: PUSH
1227: LD_INT 0
1229: ST_TO_ADDR
// end ;
1230: LD_VAR 0 2
1234: RET
// export function FilterPeople ( side ) ; begin
1235: LD_INT 0
1237: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1238: LD_ADDR_VAR 0 2
1242: PUSH
1243: LD_INT 22
1245: PUSH
1246: LD_VAR 0 1
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PUSH
1255: LD_INT 21
1257: PUSH
1258: LD_INT 1
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: PUSH
1265: EMPTY
1266: LIST
1267: LIST
1268: PPUSH
1269: CALL_OW 69
1273: ST_TO_ADDR
// end ;
1274: LD_VAR 0 2
1278: RET
// export function FilterDrivers ( side ) ; begin
1279: LD_INT 0
1281: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1282: LD_ADDR_VAR 0 2
1286: PUSH
1287: LD_INT 22
1289: PUSH
1290: LD_VAR 0 1
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PUSH
1299: LD_INT 3
1301: PUSH
1302: LD_INT 56
1304: PUSH
1305: EMPTY
1306: LIST
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: PPUSH
1316: CALL_OW 69
1320: ST_TO_ADDR
// end ;
1321: LD_VAR 0 2
1325: RET
// export function FilterPeopleArea ( side , area ) ; begin
1326: LD_INT 0
1328: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1329: LD_ADDR_VAR 0 3
1333: PUSH
1334: LD_VAR 0 2
1338: PPUSH
1339: LD_INT 22
1341: PUSH
1342: LD_INT 1
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 21
1351: PUSH
1352: LD_INT 1
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PPUSH
1363: CALL_OW 70
1367: ST_TO_ADDR
// end ;
1368: LD_VAR 0 3
1372: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1373: LD_INT 0
1375: PPUSH
1376: PPUSH
1377: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1378: LD_ADDR_VAR 0 5
1382: PUSH
1383: LD_VAR 0 2
1387: PPUSH
1388: LD_INT 22
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: LD_INT 21
1400: PUSH
1401: LD_INT 2
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 3
1410: PUSH
1411: LD_INT 58
1413: PUSH
1414: EMPTY
1415: LIST
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: PPUSH
1426: CALL_OW 70
1430: ST_TO_ADDR
// result := [ ] ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: EMPTY
1437: ST_TO_ADDR
// if not tmp then
1438: LD_VAR 0 5
1442: NOT
1443: IFFALSE 1447
// exit ;
1445: GO 1499
// for i in tmp do
1447: LD_ADDR_VAR 0 4
1451: PUSH
1452: LD_VAR 0 5
1456: PUSH
1457: FOR_IN
1458: IFFALSE 1483
// result := result ^ IsDrivenBy ( i ) ;
1460: LD_ADDR_VAR 0 3
1464: PUSH
1465: LD_VAR 0 3
1469: PUSH
1470: LD_VAR 0 4
1474: PPUSH
1475: CALL_OW 311
1479: ADD
1480: ST_TO_ADDR
1481: GO 1457
1483: POP
1484: POP
// result := result diff 0 ;
1485: LD_ADDR_VAR 0 3
1489: PUSH
1490: LD_VAR 0 3
1494: PUSH
1495: LD_INT 0
1497: DIFF
1498: ST_TO_ADDR
// end ;
1499: LD_VAR 0 3
1503: RET
// export function FilterBuildings ( side ) ; begin
1504: LD_INT 0
1506: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 22
1514: PUSH
1515: LD_VAR 0 1
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 21
1526: PUSH
1527: LD_INT 3
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: ST_TO_ADDR
// end ; end_of_file
1543: LD_VAR 0 2
1547: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
1548: LD_INT 0
1550: PPUSH
1551: PPUSH
1552: PPUSH
1553: PPUSH
1554: PPUSH
1555: PPUSH
// uc_side := 1 ;
1556: LD_ADDR_OWVAR 20
1560: PUSH
1561: LD_INT 1
1563: ST_TO_ADDR
// uc_nation := 1 ;
1564: LD_ADDR_OWVAR 21
1568: PUSH
1569: LD_INT 1
1571: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
1572: LD_ADDR_EXP 8
1576: PUSH
1577: LD_STRING JMM
1579: PPUSH
1580: LD_EXP 1
1584: NOT
1585: PPUSH
1586: CALL 350 0 2
1590: ST_TO_ADDR
// team := [ JMM ] ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: LD_EXP 8
1600: PUSH
1601: EMPTY
1602: LIST
1603: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
1604: LD_STRING BrownIn07
1606: PPUSH
1607: LD_EXP 1
1611: PPUSH
1612: CALL_OW 30
1616: IFFALSE 1637
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
1618: LD_ADDR_EXP 9
1622: PUSH
1623: LD_STRING Brown
1625: PPUSH
1626: LD_EXP 1
1630: NOT
1631: PPUSH
1632: CALL 350 0 2
1636: ST_TO_ADDR
// if Brown then
1637: LD_EXP 9
1641: IFFALSE 1659
// team := team ^ Brown ;
1643: LD_ADDR_VAR 0 3
1647: PUSH
1648: LD_VAR 0 3
1652: PUSH
1653: LD_EXP 9
1657: ADD
1658: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
1659: LD_STRING DonaldsonIn07
1661: PPUSH
1662: LD_EXP 1
1666: PPUSH
1667: CALL_OW 30
1671: IFFALSE 1692
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
1673: LD_ADDR_EXP 10
1677: PUSH
1678: LD_STRING Donaldson
1680: PPUSH
1681: LD_EXP 1
1685: NOT
1686: PPUSH
1687: CALL 350 0 2
1691: ST_TO_ADDR
// if Donaldson then
1692: LD_EXP 10
1696: IFFALSE 1714
// team := team ^ Donaldson ;
1698: LD_ADDR_VAR 0 3
1702: PUSH
1703: LD_VAR 0 3
1707: PUSH
1708: LD_EXP 10
1712: ADD
1713: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
1714: LD_STRING BobbyIn07
1716: PPUSH
1717: LD_EXP 1
1721: PPUSH
1722: CALL_OW 30
1726: IFFALSE 1747
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
1728: LD_ADDR_EXP 11
1732: PUSH
1733: LD_STRING Bobby
1735: PPUSH
1736: LD_EXP 1
1740: NOT
1741: PPUSH
1742: CALL 350 0 2
1746: ST_TO_ADDR
// if Bobby then
1747: LD_EXP 11
1751: IFFALSE 1769
// team := team ^ Bobby ;
1753: LD_ADDR_VAR 0 3
1757: PUSH
1758: LD_VAR 0 3
1762: PUSH
1763: LD_EXP 11
1767: ADD
1768: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
1769: LD_STRING CyrusIn07
1771: PPUSH
1772: LD_EXP 1
1776: PPUSH
1777: CALL_OW 30
1781: IFFALSE 1802
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
1783: LD_ADDR_EXP 12
1787: PUSH
1788: LD_STRING Cyrus
1790: PPUSH
1791: LD_EXP 1
1795: NOT
1796: PPUSH
1797: CALL 350 0 2
1801: ST_TO_ADDR
// if Cyrus then
1802: LD_EXP 12
1806: IFFALSE 1824
// team := team ^ Cyrus ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: LD_VAR 0 3
1817: PUSH
1818: LD_EXP 12
1822: ADD
1823: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
1824: LD_STRING LisaIn07
1826: PPUSH
1827: LD_EXP 1
1831: PPUSH
1832: CALL_OW 30
1836: IFFALSE 1857
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
1838: LD_ADDR_EXP 13
1842: PUSH
1843: LD_STRING Lisa
1845: PPUSH
1846: LD_EXP 1
1850: NOT
1851: PPUSH
1852: CALL 350 0 2
1856: ST_TO_ADDR
// if Lisa then
1857: LD_EXP 13
1861: IFFALSE 1879
// team := team ^ Lisa ;
1863: LD_ADDR_VAR 0 3
1867: PUSH
1868: LD_VAR 0 3
1872: PUSH
1873: LD_EXP 13
1877: ADD
1878: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
1879: LD_STRING GladstoneIn07
1881: PPUSH
1882: LD_EXP 1
1886: PPUSH
1887: CALL_OW 30
1891: IFFALSE 1912
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
1893: LD_ADDR_EXP 15
1897: PUSH
1898: LD_STRING Gladstone
1900: PPUSH
1901: LD_EXP 1
1905: NOT
1906: PPUSH
1907: CALL 350 0 2
1911: ST_TO_ADDR
// if Gladstone then
1912: LD_EXP 15
1916: IFFALSE 1934
// team := team ^ Gladstone ;
1918: LD_ADDR_VAR 0 3
1922: PUSH
1923: LD_VAR 0 3
1927: PUSH
1928: LD_EXP 15
1932: ADD
1933: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
1934: LD_STRING KhatamIn07
1936: PPUSH
1937: LD_EXP 1
1941: PPUSH
1942: CALL_OW 30
1946: IFFALSE 1967
// Khatam := PrepareUnit ( Khatam , ( not debug ) ) ;
1948: LD_ADDR_EXP 16
1952: PUSH
1953: LD_STRING Khatam
1955: PPUSH
1956: LD_EXP 1
1960: NOT
1961: PPUSH
1962: CALL 350 0 2
1966: ST_TO_ADDR
// if Khatam then
1967: LD_EXP 16
1971: IFFALSE 1989
// team := team ^ Khatam ;
1973: LD_ADDR_VAR 0 3
1977: PUSH
1978: LD_VAR 0 3
1982: PUSH
1983: LD_EXP 16
1987: ADD
1988: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
1989: LD_ADDR_VAR 0 4
1993: PUSH
1994: LD_STRING 07_others
1996: PPUSH
1997: CALL_OW 31
2001: ST_TO_ADDR
// if others then
2002: LD_VAR 0 4
2006: IFFALSE 2024
// team := team ^ others ;
2008: LD_ADDR_VAR 0 3
2012: PUSH
2013: LD_VAR 0 3
2017: PUSH
2018: LD_VAR 0 4
2022: ADD
2023: ST_TO_ADDR
// if debug then
2024: LD_EXP 1
2028: IFFALSE 2102
// begin InitHc ;
2030: CALL_OW 19
// for i = 1 to 4 do
2034: LD_ADDR_VAR 0 2
2038: PUSH
2039: DOUBLE
2040: LD_INT 1
2042: DEC
2043: ST_TO_ADDR
2044: LD_INT 4
2046: PUSH
2047: FOR_TO
2048: IFFALSE 2100
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
2050: LD_INT 0
2052: PPUSH
2053: LD_INT 1
2055: PUSH
2056: LD_INT 3
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PUSH
2063: LD_INT 1
2065: PPUSH
2066: LD_INT 2
2068: PPUSH
2069: CALL_OW 12
2073: ARRAY
2074: PPUSH
2075: LD_INT 4
2077: PPUSH
2078: CALL_OW 380
// team := team ^ CreateHuman ;
2082: LD_ADDR_VAR 0 3
2086: PUSH
2087: LD_VAR 0 3
2091: PUSH
2092: CALL_OW 44
2096: ADD
2097: ST_TO_ADDR
// end ;
2098: GO 2047
2100: POP
2101: POP
// end ; m := 0 ;
2102: LD_ADDR_VAR 0 6
2106: PUSH
2107: LD_INT 0
2109: ST_TO_ADDR
// for i in team do
2110: LD_ADDR_VAR 0 2
2114: PUSH
2115: LD_VAR 0 3
2119: PUSH
2120: FOR_IN
2121: IFFALSE 2301
// if GetClass ( i ) = 3 then
2123: LD_VAR 0 2
2127: PPUSH
2128: CALL_OW 257
2132: PUSH
2133: LD_INT 3
2135: EQUAL
2136: IFFALSE 2284
// begin m := m + 1 ;
2138: LD_ADDR_VAR 0 6
2142: PUSH
2143: LD_VAR 0 6
2147: PUSH
2148: LD_INT 1
2150: PLUS
2151: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
2152: LD_ADDR_VAR 0 5
2156: PUSH
2157: LD_INT 1
2159: PPUSH
2160: LD_INT 1
2162: PPUSH
2163: LD_INT 2
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: LD_INT 2
2171: PUSH
2172: LD_INT 1
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: PUSH
2181: LD_VAR 0 6
2185: PUSH
2186: LD_INT 4
2188: MOD
2189: PUSH
2190: LD_INT 1
2192: PLUS
2193: ARRAY
2194: PPUSH
2195: LD_INT 2
2197: PPUSH
2198: LD_INT 1
2200: PPUSH
2201: LD_INT 4
2203: PUSH
2204: LD_INT 5
2206: PUSH
2207: LD_INT 3
2209: PUSH
2210: LD_INT 11
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: PUSH
2219: LD_VAR 0 6
2223: PUSH
2224: LD_INT 4
2226: MOD
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ARRAY
2232: PPUSH
2233: LD_INT 60
2235: PPUSH
2236: CALL 413 0 7
2240: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2241: LD_VAR 0 5
2245: PPUSH
2246: LD_INT 2
2248: PPUSH
2249: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
2253: LD_VAR 0 5
2257: PPUSH
2258: LD_INT 1
2260: PPUSH
2261: LD_INT 0
2263: PPUSH
2264: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2268: LD_VAR 0 2
2272: PPUSH
2273: LD_VAR 0 5
2277: PPUSH
2278: CALL_OW 52
// end else
2282: GO 2299
// PlaceUnitArea ( i , startArea , false ) ;
2284: LD_VAR 0 2
2288: PPUSH
2289: LD_INT 1
2291: PPUSH
2292: LD_INT 0
2294: PPUSH
2295: CALL_OW 49
2299: GO 2120
2301: POP
2302: POP
// uc_side := 4 ;
2303: LD_ADDR_OWVAR 20
2307: PUSH
2308: LD_INT 4
2310: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ) ;
2311: LD_ADDR_EXP 18
2315: PUSH
2316: LD_STRING Harisson
2318: PPUSH
2319: LD_INT 0
2321: PPUSH
2322: CALL 350 0 2
2326: ST_TO_ADDR
// PrepareScout ;
2327: CALL 2336 0 0
// end ;
2331: LD_VAR 0 1
2335: RET
// function PrepareScout ; var ape ; begin
2336: LD_INT 0
2338: PPUSH
2339: PPUSH
// uc_side := 4 ;
2340: LD_ADDR_OWVAR 20
2344: PUSH
2345: LD_INT 4
2347: ST_TO_ADDR
// uc_nation := 1 ;
2348: LD_ADDR_OWVAR 21
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
2356: LD_STRING FrankIn06
2358: PPUSH
2359: LD_INT 0
2361: PPUSH
2362: CALL_OW 30
2366: IFFALSE 2383
// Frank := CreateCharacter ( 06c_Frank ) else
2368: LD_ADDR_EXP 14
2372: PUSH
2373: LD_STRING 06c_Frank
2375: PPUSH
2376: CALL_OW 34
2380: ST_TO_ADDR
2381: GO 2423
// if LoadVariable ( FrankInDelta , 0 ) then
2383: LD_STRING FrankInDelta
2385: PPUSH
2386: LD_INT 0
2388: PPUSH
2389: CALL_OW 30
2393: IFFALSE 2410
// Frank := CreateCharacter ( 05_Frank ) else
2395: LD_ADDR_EXP 14
2399: PUSH
2400: LD_STRING 05_Frank
2402: PPUSH
2403: CALL_OW 34
2407: ST_TO_ADDR
2408: GO 2423
// Frank := CreateCharacter ( 04_Frank ) ;
2410: LD_ADDR_EXP 14
2414: PUSH
2415: LD_STRING 04_Frank
2417: PPUSH
2418: CALL_OW 34
2422: ST_TO_ADDR
// if Frank then
2423: LD_EXP 14
2427: IFFALSE 2548
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
2429: LD_EXP 14
2433: PPUSH
2434: LD_INT 2
2436: PPUSH
2437: LD_INT 0
2439: PPUSH
2440: CALL_OW 49
// uc_side := 0 ;
2444: LD_ADDR_OWVAR 20
2448: PUSH
2449: LD_INT 0
2451: ST_TO_ADDR
// uc_nation := 0 ;
2452: LD_ADDR_OWVAR 21
2456: PUSH
2457: LD_INT 0
2459: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
2460: LD_INT 0
2462: PPUSH
2463: LD_INT 12
2465: PPUSH
2466: LD_INT 0
2468: PPUSH
2469: CALL_OW 380
// ape := CreateHuman ;
2473: LD_ADDR_VAR 0 2
2477: PUSH
2478: CALL_OW 44
2482: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
2483: LD_VAR 0 2
2487: PPUSH
2488: LD_EXP 14
2492: PPUSH
2493: CALL_OW 250
2497: PPUSH
2498: LD_EXP 14
2502: PPUSH
2503: CALL_OW 251
2507: PPUSH
2508: LD_INT 5
2510: PPUSH
2511: LD_INT 0
2513: PPUSH
2514: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
2518: LD_VAR 0 2
2522: PPUSH
2523: LD_EXP 14
2527: PPUSH
2528: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
2532: LD_EXP 14
2536: PPUSH
2537: LD_VAR 0 2
2541: PPUSH
2542: CALL_OW 119
// exit ;
2546: GO 2588
// end ; Kikuchi := PrepareUnit ( Yamoko , false ) ;
2548: LD_ADDR_EXP 17
2552: PUSH
2553: LD_STRING Yamoko
2555: PPUSH
2556: LD_INT 0
2558: PPUSH
2559: CALL 350 0 2
2563: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
2564: LD_EXP 17
2568: PPUSH
2569: LD_INT 2
2571: PPUSH
2572: LD_INT 0
2574: PPUSH
2575: CALL_OW 49
// ComHold ( Kikuchi ) ;
2579: LD_EXP 17
2583: PPUSH
2584: CALL_OW 140
// end ; end_of_file
2588: LD_VAR 0 1
2592: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
2593: LD_INT 0
2595: PPUSH
2596: PPUSH
2597: PPUSH
2598: PPUSH
2599: PPUSH
2600: PPUSH
2601: PPUSH
2602: PPUSH
2603: PPUSH
2604: PPUSH
2605: PPUSH
2606: PPUSH
2607: PPUSH
2608: PPUSH
2609: PPUSH
2610: PPUSH
// ru_rebuild_list := [ ] ;
2611: LD_ADDR_EXP 19
2615: PUSH
2616: EMPTY
2617: ST_TO_ADDR
// uc_side := 3 ;
2618: LD_ADDR_OWVAR 20
2622: PUSH
2623: LD_INT 3
2625: ST_TO_ADDR
// uc_nation := 3 ;
2626: LD_ADDR_OWVAR 21
2630: PUSH
2631: LD_INT 3
2633: ST_TO_ADDR
// if Difficulty > 1 then
2634: LD_OWVAR 67
2638: PUSH
2639: LD_INT 1
2641: GREATER
2642: IFFALSE 2778
// begin bc_type := b_breastwork ;
2644: LD_ADDR_OWVAR 42
2648: PUSH
2649: LD_INT 31
2651: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
2652: LD_INT 78
2654: PPUSH
2655: LD_INT 74
2657: PPUSH
2658: LD_INT 2
2660: PPUSH
2661: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
2665: LD_INT 171
2667: PPUSH
2668: LD_INT 193
2670: PPUSH
2671: LD_INT 4
2673: PPUSH
2674: CALL_OW 47
// bc_type := b_turret ;
2678: LD_ADDR_OWVAR 42
2682: PUSH
2683: LD_INT 33
2685: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
2686: LD_INT 129
2688: PPUSH
2689: LD_INT 96
2691: PPUSH
2692: LD_INT 3
2694: PPUSH
2695: CALL_OW 47
// if Difficulty > 2 then
2699: LD_OWVAR 67
2703: PUSH
2704: LD_INT 2
2706: GREATER
2707: IFFALSE 2778
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
2709: LD_INT 83
2711: PPUSH
2712: LD_INT 141
2714: PPUSH
2715: CALL_OW 428
2719: PPUSH
2720: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
2724: LD_INT 78
2726: PPUSH
2727: LD_INT 133
2729: PPUSH
2730: CALL_OW 428
2734: PPUSH
2735: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
2739: LD_INT 83
2741: PPUSH
2742: LD_INT 141
2744: PPUSH
2745: LD_INT 2
2747: PPUSH
2748: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
2752: LD_INT 78
2754: PPUSH
2755: LD_INT 133
2757: PPUSH
2758: LD_INT 2
2760: PPUSH
2761: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
2765: LD_INT 145
2767: PPUSH
2768: LD_INT 112
2770: PPUSH
2771: LD_INT 3
2773: PPUSH
2774: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
2778: LD_ADDR_VAR 0 9
2782: PUSH
2783: LD_INT 22
2785: PUSH
2786: LD_INT 3
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 2
2795: PUSH
2796: LD_INT 30
2798: PUSH
2799: LD_INT 0
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: LD_INT 30
2808: PUSH
2809: LD_INT 1
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: LIST
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PPUSH
2825: CALL_OW 69
2829: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2830: LD_ADDR_VAR 0 10
2834: PUSH
2835: LD_INT 22
2837: PUSH
2838: LD_INT 3
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PUSH
2845: LD_INT 2
2847: PUSH
2848: LD_INT 30
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: LD_INT 30
2860: PUSH
2861: LD_INT 7
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PUSH
2868: LD_INT 30
2870: PUSH
2871: LD_INT 8
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
2893: LD_ADDR_VAR 0 11
2897: PUSH
2898: LD_INT 22
2900: PUSH
2901: LD_INT 3
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: LD_INT 30
2910: PUSH
2911: LD_INT 3
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PPUSH
2922: CALL_OW 69
2926: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
2927: LD_ADDR_VAR 0 12
2931: PUSH
2932: LD_INT 22
2934: PUSH
2935: LD_INT 3
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PUSH
2942: LD_INT 30
2944: PUSH
2945: LD_INT 31
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PPUSH
2956: CALL_OW 69
2960: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
2961: LD_ADDR_VAR 0 13
2965: PUSH
2966: LD_INT 22
2968: PUSH
2969: LD_INT 3
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 30
2978: PUSH
2979: LD_INT 32
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PPUSH
2990: CALL_OW 69
2994: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
2995: LD_ADDR_VAR 0 14
2999: PUSH
3000: LD_INT 22
3002: PUSH
3003: LD_INT 3
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PUSH
3010: LD_INT 30
3012: PUSH
3013: LD_INT 33
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 69
3028: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
3029: LD_ADDR_VAR 0 15
3033: PUSH
3034: LD_INT 42
3036: PUSH
3037: LD_INT 5
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: LD_INT 43
3046: PUSH
3047: LD_INT 50
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PUSH
3054: LD_INT 44
3056: PUSH
3057: LD_INT 30
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 46
3066: PUSH
3067: LD_INT 15
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 4 , 3 ] ;
3080: LD_ADDR_VAR 0 16
3084: PUSH
3085: LD_INT 0
3087: PUSH
3088: LD_INT 4
3090: PUSH
3091: LD_INT 4
3093: PUSH
3094: LD_INT 3
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
3103: LD_ADDR_VAR 0 6
3107: PUSH
3108: LD_INT 4
3110: PUSH
3111: LD_INT 5
3113: PUSH
3114: LD_INT 6
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: LIST
3121: PUSH
3122: LD_OWVAR 67
3126: ARRAY
3127: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
3128: LD_INT 16
3130: PPUSH
3131: LD_STRING am_tukh
3133: PPUSH
3134: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
3138: LD_ADDR_VAR 0 2
3142: PUSH
3143: LD_INT 21
3145: PUSH
3146: LD_INT 3
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: PPUSH
3153: CALL_OW 69
3157: PUSH
3158: FOR_IN
3159: IFFALSE 3192
// SetBLevel ( i , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
3161: LD_VAR 0 2
3165: PPUSH
3166: LD_INT 4
3168: PUSH
3169: LD_INT 5
3171: PUSH
3172: LD_INT 6
3174: PUSH
3175: EMPTY
3176: LIST
3177: LIST
3178: LIST
3179: PUSH
3180: LD_OWVAR 67
3184: ARRAY
3185: PPUSH
3186: CALL_OW 241
3190: GO 3158
3192: POP
3193: POP
// for i in dep_list do
3194: LD_ADDR_VAR 0 2
3198: PUSH
3199: LD_VAR 0 9
3203: PUSH
3204: FOR_IN
3205: IFFALSE 3249
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3207: LD_VAR 0 2
3211: PPUSH
3212: CALL_OW 274
3216: PPUSH
3217: LD_INT 1
3219: PPUSH
3220: LD_INT 1000
3222: PPUSH
3223: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
3227: LD_VAR 0 2
3231: PPUSH
3232: CALL_OW 274
3236: PPUSH
3237: LD_INT 2
3239: PPUSH
3240: LD_INT 1000
3242: PPUSH
3243: CALL_OW 277
// end ;
3247: GO 3204
3249: POP
3250: POP
// InitHc ;
3251: CALL_OW 19
// tmp := bunker_list * [ 50 , 70 , 85 ] [ Difficulty ] div 100 ;
3255: LD_ADDR_VAR 0 8
3259: PUSH
3260: LD_VAR 0 13
3264: PUSH
3265: LD_INT 50
3267: PUSH
3268: LD_INT 70
3270: PUSH
3271: LD_INT 85
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: PUSH
3279: LD_OWVAR 67
3283: ARRAY
3284: MUL
3285: PUSH
3286: LD_INT 100
3288: DIV
3289: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
3290: LD_ADDR_VAR 0 16
3294: PUSH
3295: LD_VAR 0 16
3299: PPUSH
3300: LD_INT 1
3302: PPUSH
3303: LD_VAR 0 8
3307: PPUSH
3308: CALL_OW 1
3312: ST_TO_ADDR
// tmp := [ ] ;
3313: LD_ADDR_VAR 0 8
3317: PUSH
3318: EMPTY
3319: ST_TO_ADDR
// for i in bunker_list do
3320: LD_ADDR_VAR 0 2
3324: PUSH
3325: LD_VAR 0 13
3329: PUSH
3330: FOR_IN
3331: IFFALSE 3427
// if i mod 10 + 1 < tmp then
3333: LD_VAR 0 2
3337: PUSH
3338: LD_INT 10
3340: MOD
3341: PUSH
3342: LD_INT 1
3344: PLUS
3345: PUSH
3346: LD_VAR 0 8
3350: LESS
3351: IFFALSE 3396
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
3353: LD_ADDR_VAR 0 8
3357: PUSH
3358: LD_VAR 0 8
3362: PPUSH
3363: LD_VAR 0 2
3367: PUSH
3368: LD_INT 3
3370: PPUSH
3371: LD_INT 5
3373: PPUSH
3374: CALL_OW 12
3378: MOD
3379: PUSH
3380: LD_INT 1
3382: PLUS
3383: PPUSH
3384: LD_VAR 0 2
3388: PPUSH
3389: CALL_OW 2
3393: ST_TO_ADDR
3394: GO 3425
// tmp := Insert ( tmp , tmp + 1 , i ) ;
3396: LD_ADDR_VAR 0 8
3400: PUSH
3401: LD_VAR 0 8
3405: PPUSH
3406: LD_VAR 0 8
3410: PUSH
3411: LD_INT 1
3413: PLUS
3414: PPUSH
3415: LD_VAR 0 2
3419: PPUSH
3420: CALL_OW 2
3424: ST_TO_ADDR
3425: GO 3330
3427: POP
3428: POP
// bunker_list := tmp ;
3429: LD_ADDR_VAR 0 13
3433: PUSH
3434: LD_VAR 0 8
3438: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
3439: LD_ADDR_VAR 0 2
3443: PUSH
3444: LD_VAR 0 13
3448: PUSH
3449: LD_VAR 0 14
3453: ADD
3454: PUSH
3455: FOR_IN
3456: IFFALSE 3553
// begin tmp := rand ( 0 , 100 ) ;
3458: LD_ADDR_VAR 0 8
3462: PUSH
3463: LD_INT 0
3465: PPUSH
3466: LD_INT 100
3468: PPUSH
3469: CALL_OW 12
3473: ST_TO_ADDR
// r := 0 ;
3474: LD_ADDR_VAR 0 4
3478: PUSH
3479: LD_INT 0
3481: ST_TO_ADDR
// for j in weapons_list do
3482: LD_ADDR_VAR 0 3
3486: PUSH
3487: LD_VAR 0 15
3491: PUSH
3492: FOR_IN
3493: IFFALSE 3549
// begin r := r + j [ 2 ] ;
3495: LD_ADDR_VAR 0 4
3499: PUSH
3500: LD_VAR 0 4
3504: PUSH
3505: LD_VAR 0 3
3509: PUSH
3510: LD_INT 2
3512: ARRAY
3513: PLUS
3514: ST_TO_ADDR
// if r >= tmp then
3515: LD_VAR 0 4
3519: PUSH
3520: LD_VAR 0 8
3524: GREATEREQUAL
3525: IFFALSE 3547
// begin PlaceWeaponTurret ( i , j [ 1 ] ) ;
3527: LD_VAR 0 2
3531: PPUSH
3532: LD_VAR 0 3
3536: PUSH
3537: LD_INT 1
3539: ARRAY
3540: PPUSH
3541: CALL_OW 431
// break ;
3545: GO 3549
// end ; end ;
3547: GO 3492
3549: POP
3550: POP
// end ;
3551: GO 3455
3553: POP
3554: POP
// while ( personel_counter [ 1 ] ) do
3555: LD_VAR 0 16
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: IFFALSE 3671
// begin i := rand ( 1 , bunker_list ) ;
3565: LD_ADDR_VAR 0 2
3569: PUSH
3570: LD_INT 1
3572: PPUSH
3573: LD_VAR 0 13
3577: PPUSH
3578: CALL_OW 12
3582: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3583: LD_INT 0
3585: PPUSH
3586: LD_INT 1
3588: PPUSH
3589: LD_VAR 0 6
3593: PPUSH
3594: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
3598: CALL_OW 44
3602: PPUSH
3603: LD_VAR 0 13
3607: PUSH
3608: LD_VAR 0 2
3612: ARRAY
3613: PPUSH
3614: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
3618: LD_ADDR_VAR 0 13
3622: PUSH
3623: LD_VAR 0 13
3627: PPUSH
3628: LD_VAR 0 2
3632: PPUSH
3633: CALL_OW 3
3637: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
3638: LD_ADDR_VAR 0 16
3642: PUSH
3643: LD_VAR 0 16
3647: PPUSH
3648: LD_INT 1
3650: PPUSH
3651: LD_VAR 0 16
3655: PUSH
3656: LD_INT 1
3658: ARRAY
3659: PUSH
3660: LD_INT 1
3662: MINUS
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// end ;
3669: GO 3555
// for i = 1 to personel_counter [ 2 ] do
3671: LD_ADDR_VAR 0 2
3675: PUSH
3676: DOUBLE
3677: LD_INT 1
3679: DEC
3680: ST_TO_ADDR
3681: LD_VAR 0 16
3685: PUSH
3686: LD_INT 2
3688: ARRAY
3689: PUSH
3690: FOR_TO
3691: IFFALSE 3722
// begin PrepareHuman ( false , 2 , skill ) ;
3693: LD_INT 0
3695: PPUSH
3696: LD_INT 2
3698: PPUSH
3699: LD_VAR 0 6
3703: PPUSH
3704: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
3708: CALL_OW 44
3712: PPUSH
3713: LD_INT 16
3715: PPUSH
3716: CALL_OW 52
// end ;
3720: GO 3690
3722: POP
3723: POP
// for i = 1 to personel_counter [ 3 ] do
3724: LD_ADDR_VAR 0 2
3728: PUSH
3729: DOUBLE
3730: LD_INT 1
3732: DEC
3733: ST_TO_ADDR
3734: LD_VAR 0 16
3738: PUSH
3739: LD_INT 3
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3781
// begin PrepareHuman ( false , 3 , skill ) ;
3746: LD_INT 0
3748: PPUSH
3749: LD_INT 3
3751: PPUSH
3752: LD_VAR 0 6
3756: PPUSH
3757: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ 1 ] ) ;
3761: CALL_OW 44
3765: PPUSH
3766: LD_VAR 0 11
3770: PUSH
3771: LD_INT 1
3773: ARRAY
3774: PPUSH
3775: CALL_OW 52
// end ;
3779: GO 3743
3781: POP
3782: POP
// for i = 1 to personel_counter [ 4 ] do
3783: LD_ADDR_VAR 0 2
3787: PUSH
3788: DOUBLE
3789: LD_INT 1
3791: DEC
3792: ST_TO_ADDR
3793: LD_VAR 0 16
3797: PUSH
3798: LD_INT 4
3800: ARRAY
3801: PUSH
3802: FOR_TO
3803: IFFALSE 3840
// begin PrepareHuman ( false , 4 , skill ) ;
3805: LD_INT 0
3807: PPUSH
3808: LD_INT 4
3810: PPUSH
3811: LD_VAR 0 6
3815: PPUSH
3816: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
3820: CALL_OW 44
3824: PPUSH
3825: LD_VAR 0 10
3829: PUSH
3830: LD_INT 1
3832: ARRAY
3833: PPUSH
3834: CALL_OW 52
// end ;
3838: GO 3802
3840: POP
3841: POP
// for i in breastworks_list do
3842: LD_ADDR_VAR 0 2
3846: PUSH
3847: LD_VAR 0 12
3851: PUSH
3852: FOR_IN
3853: IFFALSE 3965
// begin r := GetDir ( i ) ;
3855: LD_ADDR_VAR 0 4
3859: PUSH
3860: LD_VAR 0 2
3864: PPUSH
3865: CALL_OW 254
3869: ST_TO_ADDR
// if r > 3 then
3870: LD_VAR 0 4
3874: PUSH
3875: LD_INT 3
3877: GREATER
3878: IFFALSE 3896
// r := r - 3 else
3880: LD_ADDR_VAR 0 4
3884: PUSH
3885: LD_VAR 0 4
3889: PUSH
3890: LD_INT 3
3892: MINUS
3893: ST_TO_ADDR
3894: GO 3910
// r := r + 3 ;
3896: LD_ADDR_VAR 0 4
3900: PUSH
3901: LD_VAR 0 4
3905: PUSH
3906: LD_INT 3
3908: PLUS
3909: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3910: LD_INT 0
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: LD_VAR 0 6
3920: PPUSH
3921: CALL_OW 380
// un := CreateHuman ;
3925: LD_ADDR_VAR 0 5
3929: PUSH
3930: CALL_OW 44
3934: ST_TO_ADDR
// SetDir ( un , r ) ;
3935: LD_VAR 0 5
3939: PPUSH
3940: LD_VAR 0 4
3944: PPUSH
3945: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
3949: LD_VAR 0 5
3953: PPUSH
3954: LD_VAR 0 2
3958: PPUSH
3959: CALL_OW 52
// end ;
3963: GO 3852
3965: POP
3966: POP
// r := [ 4 , 5 , 6 ] [ Difficulty ] ;
3967: LD_ADDR_VAR 0 4
3971: PUSH
3972: LD_INT 4
3974: PUSH
3975: LD_INT 5
3977: PUSH
3978: LD_INT 6
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: LIST
3985: PUSH
3986: LD_OWVAR 67
3990: ARRAY
3991: ST_TO_ADDR
// for i = 1 to r do
3992: LD_ADDR_VAR 0 2
3996: PUSH
3997: DOUBLE
3998: LD_INT 1
4000: DEC
4001: ST_TO_ADDR
4002: LD_VAR 0 4
4006: PUSH
4007: FOR_TO
4008: IFFALSE 4103
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4010: LD_ADDR_VAR 0 5
4014: PUSH
4015: LD_INT 3
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 22
4023: PPUSH
4024: LD_INT 1
4026: PPUSH
4027: LD_INT 1
4029: PPUSH
4030: LD_INT 43
4032: PUSH
4033: LD_INT 44
4035: PUSH
4036: LD_INT 42
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: PUSH
4044: LD_VAR 0 2
4048: PUSH
4049: LD_INT 3
4051: MOD
4052: PUSH
4053: LD_INT 1
4055: PLUS
4056: ARRAY
4057: PPUSH
4058: LD_INT 100
4060: PPUSH
4061: CALL 413 0 7
4065: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4066: LD_VAR 0 5
4070: PPUSH
4071: LD_INT 0
4073: PPUSH
4074: LD_INT 5
4076: PPUSH
4077: CALL_OW 12
4081: PPUSH
4082: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
4086: LD_VAR 0 5
4090: PPUSH
4091: LD_INT 5
4093: PPUSH
4094: LD_INT 0
4096: PPUSH
4097: CALL_OW 49
// end ;
4101: GO 4007
4103: POP
4104: POP
// end ;
4105: LD_VAR 0 1
4109: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] , [ f_ok ] ] ) do var i , filter , tmp , engs , enemy ;
4110: LD_INT 22
4112: PUSH
4113: LD_INT 3
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PUSH
4120: LD_INT 25
4122: PUSH
4123: LD_INT 2
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PUSH
4130: LD_INT 50
4132: PUSH
4133: EMPTY
4134: LIST
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: PPUSH
4141: CALL_OW 69
4145: IFFALSE 4841
4147: GO 4149
4149: DISABLE
4150: LD_INT 0
4152: PPUSH
4153: PPUSH
4154: PPUSH
4155: PPUSH
4156: PPUSH
// begin enable ;
4157: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4158: LD_ADDR_VAR 0 2
4162: PUSH
4163: LD_INT 6
4165: PPUSH
4166: LD_INT 3
4168: PUSH
4169: LD_INT 24
4171: PUSH
4172: LD_INT 1000
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 21
4185: PUSH
4186: LD_INT 3
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: PPUSH
4197: CALL_OW 70
4201: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ) ;
4202: LD_ADDR_VAR 0 4
4206: PUSH
4207: LD_INT 22
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 25
4219: PUSH
4220: LD_INT 2
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 24
4229: PUSH
4230: LD_INT 650
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: LIST
4241: PPUSH
4242: CALL_OW 69
4246: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
4247: LD_VAR 0 2
4251: NOT
4252: PUSH
4253: LD_EXP 19
4257: NOT
4258: AND
4259: IFFALSE 4291
// begin if not IsInUnit ( engs [ 1 ] ) then
4261: LD_VAR 0 4
4265: PUSH
4266: LD_INT 1
4268: ARRAY
4269: PPUSH
4270: CALL_OW 310
4274: NOT
4275: IFFALSE 4289
// ComEnterUnit ( engs , ru_dep_main ) ;
4277: LD_VAR 0 4
4281: PPUSH
4282: LD_INT 16
4284: PPUSH
4285: CALL_OW 120
// exit ;
4289: GO 4841
// end ; if debug then
4291: LD_EXP 1
4295: IFFALSE 4316
// display_strings := [ engs , filter ] ;
4297: LD_ADDR_OWVAR 47
4301: PUSH
4302: LD_VAR 0 4
4306: PUSH
4307: LD_VAR 0 2
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: ST_TO_ADDR
// if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
4316: LD_VAR 0 4
4320: PPUSH
4321: LD_INT 3
4323: PUSH
4324: LD_INT 24
4326: PUSH
4327: LD_INT 650
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: PPUSH
4338: CALL_OW 72
4342: IFFALSE 4435
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
4344: LD_ADDR_VAR 0 3
4348: PUSH
4349: LD_VAR 0 4
4353: PPUSH
4354: LD_INT 3
4356: PUSH
4357: LD_INT 24
4359: PUSH
4360: LD_INT 650
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PPUSH
4371: CALL_OW 72
4375: ST_TO_ADDR
// for i in tmp do
4376: LD_ADDR_VAR 0 1
4380: PUSH
4381: LD_VAR 0 3
4385: PUSH
4386: FOR_IN
4387: IFFALSE 4433
// if not IsInArea ( i , mainBaseArea ) then
4389: LD_VAR 0 1
4393: PPUSH
4394: LD_INT 14
4396: PPUSH
4397: CALL_OW 308
4401: NOT
4402: IFFALSE 4431
// begin ComMoveXY ( i , 129 , 125 ) ;
4404: LD_VAR 0 1
4408: PPUSH
4409: LD_INT 129
4411: PPUSH
4412: LD_INT 125
4414: PPUSH
4415: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
4419: LD_VAR 0 1
4423: PPUSH
4424: LD_INT 1050
4426: PPUSH
4427: CALL_OW 202
// end ;
4431: GO 4386
4433: POP
4434: POP
// end ; if filter then
4435: LD_VAR 0 2
4439: IFFALSE 4698
// begin for i in engs do
4441: LD_ADDR_VAR 0 1
4445: PUSH
4446: LD_VAR 0 4
4450: PUSH
4451: FOR_IN
4452: IFFALSE 4476
// if IsInUnit ( i ) then
4454: LD_VAR 0 1
4458: PPUSH
4459: CALL_OW 310
4463: IFFALSE 4474
// ComExitBuilding ( i ) ;
4465: LD_VAR 0 1
4469: PPUSH
4470: CALL_OW 122
4474: GO 4451
4476: POP
4477: POP
// wait ( 3 ) ;
4478: LD_INT 3
4480: PPUSH
4481: CALL_OW 67
// if filter >= 2 and engs >= 2 then
4485: LD_VAR 0 2
4489: PUSH
4490: LD_INT 2
4492: GREATEREQUAL
4493: PUSH
4494: LD_VAR 0 4
4498: PUSH
4499: LD_INT 2
4501: GREATEREQUAL
4502: AND
4503: IFFALSE 4651
// begin for i = 1 to engs / 2 do
4505: LD_ADDR_VAR 0 1
4509: PUSH
4510: DOUBLE
4511: LD_INT 1
4513: DEC
4514: ST_TO_ADDR
4515: LD_VAR 0 4
4519: PUSH
4520: LD_INT 2
4522: DIVREAL
4523: PUSH
4524: FOR_TO
4525: IFFALSE 4571
// if not HasTask ( engs [ i ] ) then
4527: LD_VAR 0 4
4531: PUSH
4532: LD_VAR 0 1
4536: ARRAY
4537: PPUSH
4538: CALL_OW 314
4542: NOT
4543: IFFALSE 4569
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
4545: LD_VAR 0 4
4549: PUSH
4550: LD_VAR 0 1
4554: ARRAY
4555: PPUSH
4556: LD_VAR 0 2
4560: PUSH
4561: LD_INT 1
4563: ARRAY
4564: PPUSH
4565: CALL_OW 130
4569: GO 4524
4571: POP
4572: POP
// for i = engs / 2 + 1 to engs do
4573: LD_ADDR_VAR 0 1
4577: PUSH
4578: DOUBLE
4579: LD_VAR 0 4
4583: PUSH
4584: LD_INT 2
4586: DIVREAL
4587: PUSH
4588: LD_INT 1
4590: PLUS
4591: DEC
4592: ST_TO_ADDR
4593: LD_VAR 0 4
4597: PUSH
4598: FOR_TO
4599: IFFALSE 4647
// if not HasTask ( engs [ i ] ) then
4601: LD_VAR 0 4
4605: PUSH
4606: LD_VAR 0 1
4610: ARRAY
4611: PPUSH
4612: CALL_OW 314
4616: NOT
4617: IFFALSE 4645
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
4619: LD_VAR 0 4
4623: PUSH
4624: LD_VAR 0 1
4628: ARRAY
4629: PPUSH
4630: LD_VAR 0 2
4634: PUSH
4635: LD_VAR 0 2
4639: ARRAY
4640: PPUSH
4641: CALL_OW 130
4645: GO 4598
4647: POP
4648: POP
// end else
4649: GO 4698
// for i in engs do
4651: LD_ADDR_VAR 0 1
4655: PUSH
4656: LD_VAR 0 4
4660: PUSH
4661: FOR_IN
4662: IFFALSE 4696
// if not HasTask ( i ) then
4664: LD_VAR 0 1
4668: PPUSH
4669: CALL_OW 314
4673: NOT
4674: IFFALSE 4694
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4676: LD_VAR 0 1
4680: PPUSH
4681: LD_VAR 0 2
4685: PUSH
4686: LD_INT 1
4688: ARRAY
4689: PPUSH
4690: CALL_OW 130
4694: GO 4661
4696: POP
4697: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
4698: LD_ADDR_VAR 0 5
4702: PUSH
4703: LD_INT 81
4705: PUSH
4706: LD_INT 3
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: PPUSH
4713: CALL_OW 69
4717: ST_TO_ADDR
// if ru_rebuild_list and not filter then
4718: LD_EXP 19
4722: PUSH
4723: LD_VAR 0 2
4727: NOT
4728: AND
4729: IFFALSE 4841
// begin ComExitBuilding ( engs ) ;
4731: LD_VAR 0 4
4735: PPUSH
4736: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
4740: LD_VAR 0 5
4744: PPUSH
4745: LD_EXP 19
4749: PUSH
4750: LD_INT 2
4752: ARRAY
4753: PPUSH
4754: LD_EXP 19
4758: PUSH
4759: LD_INT 3
4761: ARRAY
4762: PPUSH
4763: CALL_OW 73
4767: PPUSH
4768: LD_EXP 19
4772: PUSH
4773: LD_INT 2
4775: ARRAY
4776: PPUSH
4777: LD_EXP 19
4781: PUSH
4782: LD_INT 3
4784: ARRAY
4785: PPUSH
4786: CALL_OW 297
4790: PUSH
4791: LD_INT 10
4793: GREATER
4794: IFFALSE 4841
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
4796: LD_VAR 0 4
4800: PPUSH
4801: LD_EXP 19
4805: PUSH
4806: LD_INT 1
4808: ARRAY
4809: PPUSH
4810: LD_EXP 19
4814: PUSH
4815: LD_INT 2
4817: ARRAY
4818: PPUSH
4819: LD_EXP 19
4823: PUSH
4824: LD_INT 3
4826: ARRAY
4827: PPUSH
4828: LD_EXP 19
4832: PUSH
4833: LD_INT 4
4835: ARRAY
4836: PPUSH
4837: CALL_OW 145
// end ; end ;
4841: PPOPN 5
4843: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 650 do var tmp ;
4844: LD_INT 16
4846: PPUSH
4847: CALL_OW 256
4851: PUSH
4852: LD_INT 650
4854: LESS
4855: IFFALSE 4938
4857: GO 4859
4859: DISABLE
4860: LD_INT 0
4862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
4863: LD_ADDR_VAR 0 1
4867: PUSH
4868: LD_INT 22
4870: PUSH
4871: LD_INT 3
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: LD_INT 25
4880: PUSH
4881: LD_INT 1
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PPUSH
4892: CALL_OW 69
4896: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
4897: LD_VAR 0 1
4901: PPUSH
4902: CALL_OW 122
// wait ( 3 ) ;
4906: LD_INT 3
4908: PPUSH
4909: CALL_OW 67
// ComAgressiveMove ( tmp , GetX ( ru_dep_main ) , GetY ( ru_dep_main ) ) ;
4913: LD_VAR 0 1
4917: PPUSH
4918: LD_INT 16
4920: PPUSH
4921: CALL_OW 250
4925: PPUSH
4926: LD_INT 16
4928: PPUSH
4929: CALL_OW 251
4933: PPUSH
4934: CALL_OW 114
// end ;
4938: PPOPN 1
4940: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
4941: LD_INT 22
4943: PUSH
4944: LD_INT 3
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: IFFALSE 5212
4971: GO 4973
4973: DISABLE
4974: LD_INT 0
4976: PPUSH
4977: PPUSH
4978: PPUSH
// begin enable ;
4979: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4980: LD_ADDR_VAR 0 2
4984: PUSH
4985: LD_INT 14
4987: PPUSH
4988: LD_INT 21
4990: PUSH
4991: LD_INT 1
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: LD_INT 3
5000: PUSH
5001: LD_INT 24
5003: PUSH
5004: LD_INT 1000
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PPUSH
5019: CALL_OW 70
5023: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
5024: LD_ADDR_VAR 0 3
5028: PUSH
5029: LD_INT 22
5031: PUSH
5032: LD_INT 3
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 25
5041: PUSH
5042: LD_INT 4
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PPUSH
5053: CALL_OW 69
5057: ST_TO_ADDR
// if not doc then
5058: LD_VAR 0 3
5062: NOT
5063: IFFALSE 5067
// exit ;
5065: GO 5212
// if not tmp then
5067: LD_VAR 0 2
5071: NOT
5072: IFFALSE 5163
// begin if not IsInUnit ( doc [ 1 ] ) then
5074: LD_VAR 0 3
5078: PUSH
5079: LD_INT 1
5081: ARRAY
5082: PPUSH
5083: CALL_OW 310
5087: NOT
5088: IFFALSE 5161
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
5090: LD_VAR 0 3
5094: PPUSH
5095: LD_INT 22
5097: PUSH
5098: LD_INT 3
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: PUSH
5105: LD_INT 2
5107: PUSH
5108: LD_INT 30
5110: PUSH
5111: LD_INT 6
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: LD_INT 30
5120: PUSH
5121: LD_INT 7
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: PUSH
5128: LD_INT 30
5130: PUSH
5131: LD_INT 8
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: EMPTY
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PPUSH
5148: CALL_OW 69
5152: PUSH
5153: LD_INT 1
5155: ARRAY
5156: PPUSH
5157: CALL_OW 120
// exit ;
5161: GO 5212
// end ; if IsInUnit ( doc [ 1 ] ) then
5163: LD_VAR 0 3
5167: PUSH
5168: LD_INT 1
5170: ARRAY
5171: PPUSH
5172: CALL_OW 310
5176: IFFALSE 5187
// ComExitBuilding ( doc ) ;
5178: LD_VAR 0 3
5182: PPUSH
5183: CALL_OW 122
// wait ( 3 ) ;
5187: LD_INT 3
5189: PPUSH
5190: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
5194: LD_VAR 0 3
5198: PPUSH
5199: LD_VAR 0 2
5203: PUSH
5204: LD_INT 1
5206: ARRAY
5207: PPUSH
5208: CALL_OW 128
// end ; end_of_file
5212: PPOPN 3
5214: END
// export function Action ; begin
5215: LD_INT 0
5217: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
5218: LD_INT 28
5220: PPUSH
5221: LD_INT 3
5223: PPUSH
5224: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
5228: LD_INT 41
5230: PPUSH
5231: LD_INT 76
5233: PPUSH
5234: LD_INT 1
5236: PPUSH
5237: LD_INT 10
5239: PPUSH
5240: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
5244: LD_INT 41
5246: PPUSH
5247: LD_INT 76
5249: PPUSH
5250: LD_INT 1
5252: PPUSH
5253: CALL_OW 331
// InGameOn ;
5257: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
5261: LD_EXP 18
5265: PPUSH
5266: LD_STRING D2-Har-1
5268: PPUSH
5269: CALL_OW 94
// InGameOff ;
5273: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5277: LD_STRING M1
5279: PPUSH
5280: CALL_OW 337
// end ;
5284: LD_VAR 0 1
5288: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
5289: LD_EXP 4
5293: PUSH
5294: LD_INT 1
5296: GREATER
5297: IFFALSE 5388
5299: GO 5301
5301: DISABLE
5302: LD_INT 0
5304: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
5305: LD_ADDR_VAR 0 1
5309: PUSH
5310: LD_INT 1
5312: PPUSH
5313: CALL 501 0 1
5317: PUSH
5318: LD_INT 1
5320: ARRAY
5321: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
5322: LD_VAR 0 1
5326: PPUSH
5327: LD_STRING D2a-Sol1-1
5329: PPUSH
5330: CALL_OW 88
// if not un then
5334: LD_VAR 0 1
5338: NOT
5339: IFFALSE 5370
// begin un := GetRandom ( sex_female ) [ 1 ] ;
5341: LD_ADDR_VAR 0 1
5345: PUSH
5346: LD_INT 2
5348: PPUSH
5349: CALL 501 0 1
5353: PUSH
5354: LD_INT 1
5356: ARRAY
5357: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
5358: LD_VAR 0 1
5362: PPUSH
5363: LD_STRING D2a-FSol1-1
5365: PPUSH
5366: CALL_OW 88
// end ; if Khatam then
5370: LD_EXP 16
5374: IFFALSE 5388
// Say ( Khatam , D3b-Khat-3 ) ;
5376: LD_EXP 16
5380: PPUSH
5381: LD_STRING D3b-Khat-3
5383: PPUSH
5384: CALL_OW 88
// end ;
5388: PPOPN 1
5390: END
// every 0 0$1 trigger Frank and GetDistUnits ( JMM , Frank ) < 5 and not InBattle ( 1 ) do var i , ape ;
5391: LD_EXP 14
5395: PUSH
5396: LD_EXP 8
5400: PPUSH
5401: LD_EXP 14
5405: PPUSH
5406: CALL_OW 296
5410: PUSH
5411: LD_INT 5
5413: LESS
5414: AND
5415: PUSH
5416: LD_INT 1
5418: PPUSH
5419: CALL_OW 463
5423: NOT
5424: AND
5425: IFFALSE 6012
5427: GO 5429
5429: DISABLE
5430: LD_INT 0
5432: PPUSH
5433: PPUSH
// begin InGameOn ;
5434: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
5438: LD_ADDR_VAR 0 2
5442: PUSH
5443: LD_INT 22
5445: PUSH
5446: LD_INT 0
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 25
5455: PUSH
5456: LD_INT 12
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PPUSH
5467: CALL_OW 69
5471: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
5472: LD_ADDR_VAR 0 2
5476: PUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: LD_EXP 14
5486: PPUSH
5487: CALL_OW 74
5491: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
5492: LD_ADDR_VAR 0 1
5496: PUSH
5497: LD_INT 22
5499: PUSH
5500: LD_INT 1
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PUSH
5507: LD_INT 21
5509: PUSH
5510: LD_INT 1
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PUSH
5517: LD_INT 91
5519: PUSH
5520: LD_EXP 14
5524: PUSH
5525: LD_INT 20
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: LIST
5537: PPUSH
5538: CALL_OW 69
5542: PUSH
5543: FOR_IN
5544: IFFALSE 5562
// ComTurnUnit ( i , Frank ) ;
5546: LD_VAR 0 1
5550: PPUSH
5551: LD_EXP 14
5555: PPUSH
5556: CALL_OW 119
5560: GO 5543
5562: POP
5563: POP
// SetSide ( Frank , 1 ) ;
5564: LD_EXP 14
5568: PPUSH
5569: LD_INT 1
5571: PPUSH
5572: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
5576: LD_EXP 8
5580: PPUSH
5581: LD_EXP 14
5585: PPUSH
5586: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
5590: LD_EXP 8
5594: PPUSH
5595: LD_EXP 14
5599: PPUSH
5600: CALL_OW 179
// CenterOnUnits ( Frank ) ;
5604: LD_EXP 14
5608: PPUSH
5609: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
5613: LD_EXP 14
5617: PPUSH
5618: LD_STRING D3a-Frank-1
5620: PPUSH
5621: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
5625: LD_VAR 0 2
5629: PPUSH
5630: LD_INT 42
5632: PPUSH
5633: LD_INT 78
5635: PPUSH
5636: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
5640: LD_VAR 0 2
5644: PPUSH
5645: LD_EXP 14
5649: PPUSH
5650: CALL_OW 179
// if Lisa then
5654: LD_EXP 13
5658: IFFALSE 5672
// Say ( Lisa , D3a-Lisa-1 ) ;
5660: LD_EXP 13
5664: PPUSH
5665: LD_STRING D3a-Lisa-1
5667: PPUSH
5668: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
5672: LD_EXP 8
5676: PPUSH
5677: LD_STRING D3a-JMM-1
5679: PPUSH
5680: CALL_OW 88
// if Cyrus then
5684: LD_EXP 12
5688: IFFALSE 5702
// Say ( Cyrus , D3a-Cyrus-1 ) ;
5690: LD_EXP 12
5694: PPUSH
5695: LD_STRING D3a-Cyrus-1
5697: PPUSH
5698: CALL_OW 88
// if GetRandom ( sex_male ) then
5702: LD_INT 1
5704: PPUSH
5705: CALL 501 0 1
5709: IFFALSE 5730
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
5711: LD_INT 1
5713: PPUSH
5714: CALL 501 0 1
5718: PUSH
5719: LD_INT 1
5721: ARRAY
5722: PPUSH
5723: LD_STRING D3a-Sol1-1
5725: PPUSH
5726: CALL_OW 88
// if GetRandom ( sex_female ) then
5730: LD_INT 2
5732: PPUSH
5733: CALL 501 0 1
5737: IFFALSE 5758
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
5739: LD_INT 2
5741: PPUSH
5742: CALL 501 0 1
5746: PUSH
5747: LD_INT 1
5749: ARRAY
5750: PPUSH
5751: LD_STRING D3a-FSol1-1
5753: PPUSH
5754: CALL_OW 88
// if Gladstone then
5758: LD_EXP 15
5762: IFFALSE 5776
// Say ( Gladstone , D3a-Glad-1 ) ;
5764: LD_EXP 15
5768: PPUSH
5769: LD_STRING D3a-Glad-1
5771: PPUSH
5772: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
5776: LD_VAR 0 2
5780: PPUSH
5781: LD_INT 60
5783: PPUSH
5784: LD_INT 113
5786: PPUSH
5787: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
5791: LD_EXP 14
5795: PPUSH
5796: LD_STRING D3a-Frank-2
5798: PPUSH
5799: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
5803: LD_EXP 14
5807: PPUSH
5808: LD_EXP 8
5812: PPUSH
5813: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
5817: LD_EXP 8
5821: PPUSH
5822: LD_STRING D3a-JMM-2
5824: PPUSH
5825: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
5829: LD_INT 1
5831: PPUSH
5832: LD_INT 4
5834: PPUSH
5835: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
5839: LD_INT 85
5841: PPUSH
5842: LD_INT 134
5844: PPUSH
5845: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
5849: LD_EXP 14
5853: PPUSH
5854: LD_STRING D3a-Frank-3
5856: PPUSH
5857: CALL_OW 88
// Wait ( 0 0$01 ) ;
5861: LD_INT 35
5863: PPUSH
5864: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
5868: LD_INT 166
5870: PPUSH
5871: LD_INT 136
5873: PPUSH
5874: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
5878: LD_EXP 8
5882: PPUSH
5883: LD_STRING D3a-JMM-3
5885: PPUSH
5886: CALL_OW 88
// Wait ( 0 0$01 ) ;
5890: LD_INT 35
5892: PPUSH
5893: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
5897: LD_EXP 14
5901: PPUSH
5902: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
5906: LD_EXP 14
5910: PPUSH
5911: LD_STRING D3a-Frank-4
5913: PPUSH
5914: CALL_OW 88
// if Lisa then
5918: LD_EXP 13
5922: IFFALSE 5936
// Say ( Lisa , D3a-Lisa-4 ) ;
5924: LD_EXP 13
5928: PPUSH
5929: LD_STRING D3a-Lisa-4
5931: PPUSH
5932: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
5936: LD_EXP 8
5940: PPUSH
5941: LD_STRING D3a-JMM-4
5943: PPUSH
5944: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
5948: LD_EXP 14
5952: PPUSH
5953: LD_STRING D3a-Frank-5
5955: PPUSH
5956: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
5960: LD_EXP 8
5964: PPUSH
5965: LD_STRING D3a-JMM-5
5967: PPUSH
5968: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
5972: LD_EXP 14
5976: PPUSH
5977: LD_STRING D3a-Frank-6
5979: PPUSH
5980: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
5984: LD_EXP 8
5988: PPUSH
5989: LD_STRING D3a-JMM-6
5991: PPUSH
5992: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
5996: LD_EXP 14
6000: PPUSH
6001: LD_STRING D3a-Frank-7
6003: PPUSH
6004: CALL_OW 88
// InGameOff ;
6008: CALL_OW 9
// end ;
6012: PPOPN 2
6014: END
// every 0 0$1 trigger Kikuchi and GetDistUnits ( JMM , Kikuchi ) < 5 and not InBattle ( 1 ) do
6015: LD_EXP 17
6019: PUSH
6020: LD_EXP 8
6024: PPUSH
6025: LD_EXP 17
6029: PPUSH
6030: CALL_OW 296
6034: PUSH
6035: LD_INT 5
6037: LESS
6038: AND
6039: PUSH
6040: LD_INT 1
6042: PPUSH
6043: CALL_OW 463
6047: NOT
6048: AND
6049: IFFALSE 6229
6051: GO 6053
6053: DISABLE
// begin InGameOn ;
6054: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
6058: LD_EXP 8
6062: PPUSH
6063: LD_EXP 17
6067: PPUSH
6068: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
6072: LD_EXP 17
6076: PPUSH
6077: LD_EXP 8
6081: PPUSH
6082: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
6086: LD_EXP 17
6090: PPUSH
6091: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
6095: LD_EXP 17
6099: PPUSH
6100: LD_STRING D3b-Yam-1
6102: PPUSH
6103: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
6107: LD_EXP 8
6111: PPUSH
6112: LD_STRING D3b-JMM-1
6114: PPUSH
6115: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
6119: LD_INT 1
6121: PPUSH
6122: LD_INT 4
6124: PPUSH
6125: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
6129: LD_INT 85
6131: PPUSH
6132: LD_INT 134
6134: PPUSH
6135: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
6139: LD_EXP 17
6143: PPUSH
6144: LD_STRING D3b-Yam-2
6146: PPUSH
6147: CALL_OW 88
// Wait ( 0 0$01 ) ;
6151: LD_INT 35
6153: PPUSH
6154: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
6158: LD_EXP 8
6162: PPUSH
6163: LD_STRING D3b-JMM-2
6165: PPUSH
6166: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
6170: LD_INT 166
6172: PPUSH
6173: LD_INT 136
6175: PPUSH
6176: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
6180: LD_EXP 17
6184: PPUSH
6185: LD_STRING D3b-Yam-3
6187: PPUSH
6188: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
6192: LD_EXP 8
6196: PPUSH
6197: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
6201: LD_EXP 8
6205: PPUSH
6206: LD_STRING D3b-JMM-3a
6208: PPUSH
6209: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
6213: LD_EXP 17
6217: PPUSH
6218: LD_INT 1
6220: PPUSH
6221: CALL_OW 235
// InGameOff ;
6225: CALL_OW 9
// end ;
6229: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , i ;
6230: LD_INT 7
6232: PPUSH
6233: LD_INT 22
6235: PUSH
6236: LD_INT 1
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: LD_INT 3
6245: PUSH
6246: LD_INT 24
6248: PUSH
6249: LD_INT 1000
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: PPUSH
6264: CALL_OW 70
6268: IFFALSE 6686
6270: GO 6272
6272: DISABLE
6273: LD_INT 0
6275: PPUSH
6276: PPUSH
6277: PPUSH
// begin un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
6278: LD_ADDR_VAR 0 1
6282: PUSH
6283: LD_INT 7
6285: PPUSH
6286: LD_INT 22
6288: PUSH
6289: LD_INT 1
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: PUSH
6296: LD_INT 3
6298: PUSH
6299: LD_INT 24
6301: PUSH
6302: LD_INT 1000
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: PPUSH
6317: CALL_OW 70
6321: PUSH
6322: LD_INT 1
6324: ARRAY
6325: ST_TO_ADDR
// DialogueOn ;
6326: CALL_OW 6
// CenterNowOnUnits ( un ) ;
6330: LD_VAR 0 1
6334: PPUSH
6335: CALL_OW 87
// if Lisa then
6339: LD_EXP 13
6343: IFFALSE 6371
// begin Say ( Lisa , D5-Lisa-1 ) ;
6345: LD_EXP 13
6349: PPUSH
6350: LD_STRING D5-Lisa-1
6352: PPUSH
6353: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
6357: LD_EXP 8
6361: PPUSH
6362: LD_STRING D5-JMM-1a
6364: PPUSH
6365: CALL_OW 88
// end else
6369: GO 6383
// Say ( JMM , D5-JMM-1 ) ;
6371: LD_EXP 8
6375: PPUSH
6376: LD_STRING D5-JMM-1
6378: PPUSH
6379: CALL_OW 88
// DialogueOff ;
6383: CALL_OW 7
// while ( true ) do
6387: LD_INT 1
6389: IFFALSE 6445
// begin wait ( 0 0$01 ) ;
6391: LD_INT 35
6393: PPUSH
6394: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
6398: LD_ADDR_VAR 0 2
6402: PUSH
6403: LD_INT 8
6405: PPUSH
6406: LD_INT 30
6408: PUSH
6409: LD_INT 26
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 101
6418: PUSH
6419: LD_INT 1
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: PPUSH
6430: CALL_OW 71
6434: ST_TO_ADDR
// if x then
6435: LD_VAR 0 2
6439: IFFALSE 6443
// break ;
6441: GO 6445
// end ;
6443: GO 6387
// CenterOnUnits ( x [ 1 ] ) ;
6445: LD_VAR 0 2
6449: PUSH
6450: LD_INT 1
6452: ARRAY
6453: PPUSH
6454: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
6458: LD_EXP 14
6462: PUSH
6463: LD_EXP 14
6467: PPUSH
6468: CALL_OW 255
6472: PUSH
6473: LD_INT 1
6475: EQUAL
6476: AND
6477: IFFALSE 6493
// Say ( Frank , D5a-Frank-1 ) else
6479: LD_EXP 14
6483: PPUSH
6484: LD_STRING D5a-Frank-1
6486: PPUSH
6487: CALL_OW 88
6491: GO 6547
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
6493: LD_EXP 17
6497: PUSH
6498: LD_EXP 17
6502: PPUSH
6503: CALL_OW 255
6507: PUSH
6508: LD_INT 1
6510: EQUAL
6511: AND
6512: IFFALSE 6528
// Say ( Kikuchi , D5a-Yam-1 ) else
6514: LD_EXP 17
6518: PPUSH
6519: LD_STRING D5a-Yam-1
6521: PPUSH
6522: CALL_OW 88
6526: GO 6547
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
6528: LD_INT 1
6530: PPUSH
6531: CALL 501 0 1
6535: PUSH
6536: LD_INT 1
6538: ARRAY
6539: PPUSH
6540: LD_STRING D5a-Sol1-1
6542: PPUSH
6543: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
6547: LD_EXP 8
6551: PPUSH
6552: LD_STRING D5a-JMM-1
6554: PPUSH
6555: CALL_OW 88
// if Cyrus then
6559: LD_EXP 12
6563: IFFALSE 6577
// Say ( Cyrus , D5a-Cyrus-1 ) ;
6565: LD_EXP 12
6569: PPUSH
6570: LD_STRING D5a-Cyrus-1
6572: PPUSH
6573: CALL_OW 88
// x := false ;
6577: LD_ADDR_VAR 0 2
6581: PUSH
6582: LD_INT 0
6584: ST_TO_ADDR
// while ( true ) do
6585: LD_INT 1
6587: IFFALSE 6674
// begin wait ( 0 0$01 ) ;
6589: LD_INT 35
6591: PPUSH
6592: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
6596: LD_ADDR_VAR 0 3
6600: PUSH
6601: LD_INT 2
6603: PUSH
6604: LD_INT 30
6606: PUSH
6607: LD_INT 0
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 30
6616: PUSH
6617: LD_INT 1
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: LIST
6628: PPUSH
6629: CALL_OW 69
6633: PUSH
6634: LD_INT 1
6636: DIFF
6637: PUSH
6638: FOR_IN
6639: IFFALSE 6662
// if BaseNeedEnergy ( i ) then
6641: LD_VAR 0 3
6645: PPUSH
6646: CALL 1158 0 1
6650: IFFALSE 6660
// x := true ;
6652: LD_ADDR_VAR 0 2
6656: PUSH
6657: LD_INT 1
6659: ST_TO_ADDR
6660: GO 6638
6662: POP
6663: POP
// if x then
6664: LD_VAR 0 2
6668: IFFALSE 6672
// break ;
6670: GO 6674
// end ;
6672: GO 6585
// Say ( JMM , D5b-JMM-1 ) ;
6674: LD_EXP 8
6678: PPUSH
6679: LD_STRING D5b-JMM-1
6681: PPUSH
6682: CALL_OW 88
// end ;
6686: PPOPN 3
6688: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick do
6689: LD_EXP 5
6693: PUSH
6694: LD_INT 1
6696: ARRAY
6697: PUSH
6698: LD_OWVAR 1
6702: LESS
6703: IFFALSE 6903
6705: GO 6707
6707: DISABLE
// begin if not IsDead ( ru_dep_main ) then
6708: LD_INT 16
6710: PPUSH
6711: CALL_OW 301
6715: NOT
6716: IFFALSE 6739
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
6718: LD_EXP 18
6722: PPUSH
6723: LD_STRING D3b-Har-3
6725: PPUSH
6726: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
6730: LD_STRING M2a
6732: PPUSH
6733: CALL_OW 337
// end else
6737: GO 6758
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
6739: LD_EXP 18
6743: PPUSH
6744: LD_STRING D3b-Har-3a
6746: PPUSH
6747: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
6751: LD_STRING M2
6753: PPUSH
6754: CALL_OW 337
// end ; can_end := true ;
6758: LD_ADDR_EXP 6
6762: PUSH
6763: LD_INT 1
6765: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
6766: LD_INT 9
6768: PPUSH
6769: LD_INT 1
6771: PPUSH
6772: CALL_OW 424
// Wait ( 0 0$02 ) ;
6776: LD_INT 70
6778: PPUSH
6779: CALL_OW 67
// if Lisa then
6783: LD_EXP 13
6787: IFFALSE 6801
// Say ( Lisa , D3b-Lisa ) ;
6789: LD_EXP 13
6793: PPUSH
6794: LD_STRING D3b-Lisa
6796: PPUSH
6797: CALL_OW 88
// if Bobby then
6801: LD_EXP 11
6805: IFFALSE 6819
// Say ( Bobby , D3b-Bobby-3 ) ;
6807: LD_EXP 11
6811: PPUSH
6812: LD_STRING D3b-Bobby-3
6814: PPUSH
6815: CALL_OW 88
// if Cyrus then
6819: LD_EXP 12
6823: IFFALSE 6837
// Say ( Cyrus , D3b-Cyrus-3 ) ;
6825: LD_EXP 12
6829: PPUSH
6830: LD_STRING D3b-Cyrus-3
6832: PPUSH
6833: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
6837: LD_EXP 14
6841: PUSH
6842: LD_EXP 14
6846: PPUSH
6847: CALL_OW 255
6851: PUSH
6852: LD_INT 1
6854: EQUAL
6855: AND
6856: IFFALSE 6870
// Say ( Frank , D3b-Frank-3 ) ;
6858: LD_EXP 14
6862: PPUSH
6863: LD_STRING D3b-Frank-3
6865: PPUSH
6866: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
6870: LD_EXP 17
6874: PUSH
6875: LD_EXP 17
6879: PPUSH
6880: CALL_OW 255
6884: PUSH
6885: LD_INT 1
6887: EQUAL
6888: AND
6889: IFFALSE 6903
// Say ( Kikuchi , D3b-Yam-4 ) ;
6891: LD_EXP 17
6895: PPUSH
6896: LD_STRING D3b-Yam-4
6898: PPUSH
6899: CALL_OW 88
// end ;
6903: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
6904: LD_EXP 5
6908: PUSH
6909: LD_INT 2
6911: ARRAY
6912: PUSH
6913: LD_OWVAR 1
6917: LESS
6918: IFFALSE 6950
6920: GO 6922
6922: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
6923: LD_EXP 18
6927: PPUSH
6928: LD_STRING D4-Har-1
6930: PPUSH
6931: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6935: LD_STRING M3
6937: PPUSH
6938: CALL_OW 337
// must_end := true ;
6942: LD_ADDR_EXP 7
6946: PUSH
6947: LD_INT 1
6949: ST_TO_ADDR
// end ;
6950: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
6951: LD_EXP 5
6955: PUSH
6956: LD_INT 3
6958: ARRAY
6959: PUSH
6960: LD_OWVAR 1
6964: LESS
6965: IFFALSE 6996
6967: GO 6969
6969: DISABLE
// begin if not IsDead ( ru_dep_main ) then
6970: LD_INT 16
6972: PPUSH
6973: CALL_OW 301
6977: NOT
6978: IFFALSE 6989
// YouLost ( TimeOut1 ) else
6980: LD_STRING TimeOut1
6982: PPUSH
6983: CALL_OW 104
6987: GO 6996
// YouLost ( TimeOut2 ) ;
6989: LD_STRING TimeOut2
6991: PPUSH
6992: CALL_OW 104
// end ;
6996: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp ;
6997: LD_EXP 8
7001: PPUSH
7002: LD_INT 9
7004: PPUSH
7005: CALL_OW 308
7009: PUSH
7010: LD_EXP 6
7014: AND
7015: IFFALSE 8000
7017: GO 7019
7019: DISABLE
7020: LD_INT 0
7022: PPUSH
7023: PPUSH
7024: PPUSH
// begin wait_on := false ;
7025: LD_ADDR_VAR 0 1
7029: PUSH
7030: LD_INT 0
7032: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
7033: LD_INT 1
7035: PPUSH
7036: CALL 1235 0 1
7040: PUSH
7041: LD_INT 0
7043: PLUS
7044: PUSH
7045: LD_INT 1
7047: PPUSH
7048: LD_INT 9
7050: PPUSH
7051: CALL 1326 0 2
7055: PUSH
7056: LD_INT 1
7058: PPUSH
7059: LD_INT 9
7061: PPUSH
7062: CALL 1373 0 2
7066: ADD
7067: PUSH
7068: LD_INT 0
7070: PLUS
7071: GREATER
7072: IFFALSE 7121
// case Query ( Q1 ) of 1 :
7074: LD_STRING Q1
7076: PPUSH
7077: CALL_OW 97
7081: PUSH
7082: LD_INT 1
7084: DOUBLE
7085: EQUAL
7086: IFTRUE 7090
7088: GO 7101
7090: POP
// wait_on := true ; 2 :
7091: LD_ADDR_VAR 0 1
7095: PUSH
7096: LD_INT 1
7098: ST_TO_ADDR
7099: GO 7121
7101: LD_INT 2
7103: DOUBLE
7104: EQUAL
7105: IFTRUE 7109
7107: GO 7120
7109: POP
// wait_on := false ; end ;
7110: LD_ADDR_VAR 0 1
7114: PUSH
7115: LD_INT 0
7117: ST_TO_ADDR
7118: GO 7121
7120: POP
// repeat wait ( 0 0$01 ) ;
7121: LD_INT 35
7123: PPUSH
7124: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
7128: LD_VAR 0 1
7132: NOT
7133: PUSH
7134: LD_INT 1
7136: PPUSH
7137: CALL 1235 0 1
7141: PUSH
7142: LD_INT 0
7144: PLUS
7145: PUSH
7146: LD_INT 1
7148: PPUSH
7149: LD_INT 9
7151: PPUSH
7152: CALL 1326 0 2
7156: PUSH
7157: LD_INT 1
7159: PPUSH
7160: LD_INT 9
7162: PPUSH
7163: CALL 1373 0 2
7167: ADD
7168: PUSH
7169: LD_INT 0
7171: PLUS
7172: EQUAL
7173: OR
7174: IFFALSE 7121
// DialogueOn ;
7176: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
7180: LD_EXP 8
7184: PPUSH
7185: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
7189: LD_EXP 8
7193: PPUSH
7194: LD_STRING D6-JMM-1
7196: PPUSH
7197: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
7201: LD_EXP 18
7205: PPUSH
7206: LD_STRING D6-Har-1
7208: PPUSH
7209: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
7213: LD_EXP 8
7217: PPUSH
7218: LD_STRING D6-JMM-2
7220: PPUSH
7221: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
7225: LD_EXP 18
7229: PPUSH
7230: LD_STRING D6-Har-2
7232: PPUSH
7233: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
7237: LD_EXP 8
7241: PPUSH
7242: LD_STRING D6-JMM-3
7244: PPUSH
7245: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
7249: LD_EXP 18
7253: PPUSH
7254: LD_STRING D6-Har-3
7256: PPUSH
7257: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
7261: LD_EXP 8
7265: PPUSH
7266: LD_STRING D6-JMM-4
7268: PPUSH
7269: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
7273: LD_EXP 18
7277: PPUSH
7278: LD_STRING D6-Har-4
7280: PPUSH
7281: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
7285: LD_EXP 8
7289: PPUSH
7290: LD_STRING D6-JMM-5
7292: PPUSH
7293: CALL_OW 88
// DialogueOff ;
7297: CALL_OW 7
// tmp := FilterBuildings ( 3 ) ;
7301: LD_ADDR_VAR 0 3
7305: PUSH
7306: LD_INT 3
7308: PPUSH
7309: CALL 1504 0 1
7313: ST_TO_ADDR
// if tmp >= 35 then
7314: LD_VAR 0 3
7318: PUSH
7319: LD_INT 35
7321: GREATEREQUAL
7322: IFFALSE 7359
// begin AddMedal ( Destroy1 , - 1 ) ;
7324: LD_STRING Destroy1
7326: PPUSH
7327: LD_INT 1
7329: NEG
7330: PPUSH
7331: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
7335: LD_STRING Destroy2
7337: PPUSH
7338: LD_INT 1
7340: NEG
7341: PPUSH
7342: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
7346: LD_STRING Destroy3
7348: PPUSH
7349: LD_INT 1
7351: NEG
7352: PPUSH
7353: CALL_OW 101
// end else
7357: GO 7446
// begin AddMedal ( Destroy1 , 1 ) ;
7359: LD_STRING Destroy1
7361: PPUSH
7362: LD_INT 1
7364: PPUSH
7365: CALL_OW 101
// if tmp >= 25 then
7369: LD_VAR 0 3
7373: PUSH
7374: LD_INT 25
7376: GREATEREQUAL
7377: IFFALSE 7403
// begin AddMedal ( Destroy2 , - 1 ) ;
7379: LD_STRING Destroy2
7381: PPUSH
7382: LD_INT 1
7384: NEG
7385: PPUSH
7386: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
7390: LD_STRING Destroy3
7392: PPUSH
7393: LD_INT 1
7395: NEG
7396: PPUSH
7397: CALL_OW 101
// end else
7401: GO 7446
// begin AddMedal ( Destroy2 , 1 ) ;
7403: LD_STRING Destroy2
7405: PPUSH
7406: LD_INT 1
7408: PPUSH
7409: CALL_OW 101
// if tmp >= 15 then
7413: LD_VAR 0 3
7417: PUSH
7418: LD_INT 15
7420: GREATEREQUAL
7421: IFFALSE 7436
// AddMedal ( Destroy3 , - 1 ) else
7423: LD_STRING Destroy3
7425: PPUSH
7426: LD_INT 1
7428: NEG
7429: PPUSH
7430: CALL_OW 101
7434: GO 7446
// AddMedal ( Destroy3 , 1 ) ;
7436: LD_STRING Destroy3
7438: PPUSH
7439: LD_INT 1
7441: PPUSH
7442: CALL_OW 101
// end ; end ; GiveMedals ( MAIN ) ;
7446: LD_STRING MAIN
7448: PPUSH
7449: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ;
7453: LD_ADDR_VAR 0 3
7457: PUSH
7458: LD_INT 1
7460: PPUSH
7461: LD_INT 9
7463: PPUSH
7464: CALL 1326 0 2
7468: PUSH
7469: LD_INT 1
7471: PPUSH
7472: LD_INT 9
7474: PPUSH
7475: CALL 1373 0 2
7479: ADD
7480: ST_TO_ADDR
// RewardPeople ( tmp ) ;
7481: LD_VAR 0 3
7485: PPUSH
7486: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
7490: LD_EXP 8
7494: PPUSH
7495: LD_EXP 3
7499: PUSH
7500: LD_STRING JMM
7502: STR
7503: PPUSH
7504: CALL_OW 38
// if Brown in tmp then
7508: LD_EXP 9
7512: PUSH
7513: LD_VAR 0 3
7517: IN
7518: IFFALSE 7538
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
7520: LD_EXP 9
7524: PPUSH
7525: LD_EXP 3
7529: PUSH
7530: LD_STRING Brown
7532: STR
7533: PPUSH
7534: CALL_OW 38
// if Donaldson in tmp then
7538: LD_EXP 10
7542: PUSH
7543: LD_VAR 0 3
7547: IN
7548: IFFALSE 7568
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
7550: LD_EXP 10
7554: PPUSH
7555: LD_EXP 3
7559: PUSH
7560: LD_STRING Donaldson
7562: STR
7563: PPUSH
7564: CALL_OW 38
// if Bobby in tmp then
7568: LD_EXP 11
7572: PUSH
7573: LD_VAR 0 3
7577: IN
7578: IFFALSE 7598
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
7580: LD_EXP 11
7584: PPUSH
7585: LD_EXP 3
7589: PUSH
7590: LD_STRING Bobby
7592: STR
7593: PPUSH
7594: CALL_OW 38
// if Cyrus in tmp then
7598: LD_EXP 12
7602: PUSH
7603: LD_VAR 0 3
7607: IN
7608: IFFALSE 7628
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
7610: LD_EXP 12
7614: PPUSH
7615: LD_EXP 3
7619: PUSH
7620: LD_STRING Cyrus
7622: STR
7623: PPUSH
7624: CALL_OW 38
// if Lisa in tmp then
7628: LD_EXP 13
7632: PUSH
7633: LD_VAR 0 3
7637: IN
7638: IFFALSE 7658
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
7640: LD_EXP 13
7644: PPUSH
7645: LD_EXP 3
7649: PUSH
7650: LD_STRING Lisa
7652: STR
7653: PPUSH
7654: CALL_OW 38
// if Frank in tmp then
7658: LD_EXP 14
7662: PUSH
7663: LD_VAR 0 3
7667: IN
7668: IFFALSE 7688
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
7670: LD_EXP 14
7674: PPUSH
7675: LD_EXP 3
7679: PUSH
7680: LD_STRING Frank
7682: STR
7683: PPUSH
7684: CALL_OW 38
// if Gladstone in tmp then
7688: LD_EXP 15
7692: PUSH
7693: LD_VAR 0 3
7697: IN
7698: IFFALSE 7718
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
7700: LD_EXP 15
7704: PPUSH
7705: LD_EXP 3
7709: PUSH
7710: LD_STRING Gladstone
7712: STR
7713: PPUSH
7714: CALL_OW 38
// if Khatam in tmp then
7718: LD_EXP 16
7722: PUSH
7723: LD_VAR 0 3
7727: IN
7728: IFFALSE 7748
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
7730: LD_EXP 16
7734: PPUSH
7735: LD_EXP 3
7739: PUSH
7740: LD_STRING Khatam
7742: STR
7743: PPUSH
7744: CALL_OW 38
// if Kikuchi in tmp then
7748: LD_EXP 17
7752: PUSH
7753: LD_VAR 0 3
7757: IN
7758: IFFALSE 7778
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
7760: LD_EXP 17
7764: PPUSH
7765: LD_EXP 3
7769: PUSH
7770: LD_STRING Kikuchi
7772: STR
7773: PPUSH
7774: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi ] , mission_prefix & others ) ;
7778: LD_VAR 0 3
7782: PUSH
7783: LD_EXP 8
7787: PUSH
7788: LD_EXP 9
7792: PUSH
7793: LD_EXP 10
7797: PUSH
7798: LD_EXP 11
7802: PUSH
7803: LD_EXP 12
7807: PUSH
7808: LD_EXP 13
7812: PUSH
7813: LD_EXP 14
7817: PUSH
7818: LD_EXP 15
7822: PUSH
7823: LD_EXP 17
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: DIFF
7839: PPUSH
7840: LD_EXP 3
7844: PUSH
7845: LD_STRING others
7847: STR
7848: PPUSH
7849: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
7853: LD_OWVAR 1
7857: PPUSH
7858: LD_STRING 07_time
7860: PPUSH
7861: CALL_OW 39
// tmp := [ ] ;
7865: LD_ADDR_VAR 0 3
7869: PUSH
7870: EMPTY
7871: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
7872: LD_ADDR_VAR 0 2
7876: PUSH
7877: LD_INT 22
7879: PUSH
7880: LD_INT 1
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 23
7889: PUSH
7890: LD_INT 1
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 21
7899: PUSH
7900: LD_INT 2
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: LIST
7911: PUSH
7912: EMPTY
7913: LIST
7914: PPUSH
7915: CALL_OW 69
7919: PUSH
7920: FOR_IN
7921: IFFALSE 7982
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
7923: LD_ADDR_VAR 0 3
7927: PUSH
7928: LD_VAR 0 3
7932: PUSH
7933: LD_VAR 0 2
7937: PPUSH
7938: CALL_OW 265
7942: PUSH
7943: LD_VAR 0 2
7947: PPUSH
7948: CALL_OW 262
7952: PUSH
7953: LD_VAR 0 2
7957: PPUSH
7958: CALL_OW 263
7962: PUSH
7963: LD_VAR 0 2
7967: PPUSH
7968: CALL_OW 264
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: ADD
7979: ST_TO_ADDR
7980: GO 7920
7982: POP
7983: POP
// SaveVariable ( tmp , 07_vehicles ) ;
7984: LD_VAR 0 3
7988: PPUSH
7989: LD_STRING 07_vehicles
7991: PPUSH
7992: CALL_OW 39
// YouWin ;
7996: CALL_OW 103
// end ; end_of_file
8000: PPOPN 3
8002: END
// on UnitDestroyed ( un ) do begin if un = JMM then
8003: LD_VAR 0 1
8007: PUSH
8008: LD_EXP 8
8012: EQUAL
8013: IFFALSE 8022
// YouLost ( JMM ) ;
8015: LD_STRING JMM
8017: PPUSH
8018: CALL_OW 104
// if GetType ( un ) = unit_building then
8022: LD_VAR 0 1
8026: PPUSH
8027: CALL_OW 247
8031: PUSH
8032: LD_INT 3
8034: EQUAL
8035: IFFALSE 8051
// buildings_counter := buildings_counter + 1 ;
8037: LD_ADDR_EXP 4
8041: PUSH
8042: LD_EXP 4
8046: PUSH
8047: LD_INT 1
8049: PLUS
8050: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
8051: LD_VAR 0 1
8055: PUSH
8056: LD_INT 6
8058: PPUSH
8059: LD_INT 2
8061: PUSH
8062: LD_INT 30
8064: PUSH
8065: LD_INT 33
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: LD_INT 30
8074: PUSH
8075: LD_INT 32
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: PPUSH
8087: CALL_OW 70
8091: IN
8092: IFFALSE 8151
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
8094: LD_ADDR_EXP 19
8098: PUSH
8099: LD_EXP 19
8103: PUSH
8104: LD_VAR 0 1
8108: PPUSH
8109: CALL_OW 266
8113: PUSH
8114: LD_VAR 0 1
8118: PPUSH
8119: CALL_OW 250
8123: PUSH
8124: LD_VAR 0 1
8128: PPUSH
8129: CALL_OW 251
8133: PUSH
8134: LD_VAR 0 1
8138: PPUSH
8139: CALL_OW 254
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: ADD
8150: ST_TO_ADDR
// if un = ru_dep_main then
8151: LD_VAR 0 1
8155: PUSH
8156: LD_INT 16
8158: EQUAL
8159: IFFALSE 8168
// ChangeMissionObjectives ( M1a ) ;
8161: LD_STRING M1a
8163: PPUSH
8164: CALL_OW 337
// end ;
8168: PPOPN 1
8170: END
// on BuildingStarted ( b , builder ) do var i ;
8171: LD_INT 0
8173: PPUSH
// begin if GetSide ( b ) = 3 then
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 255
8183: PUSH
8184: LD_INT 3
8186: EQUAL
8187: IFFALSE 8227
// for i = 1 to 4 do
8189: LD_ADDR_VAR 0 3
8193: PUSH
8194: DOUBLE
8195: LD_INT 1
8197: DEC
8198: ST_TO_ADDR
8199: LD_INT 4
8201: PUSH
8202: FOR_TO
8203: IFFALSE 8225
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
8205: LD_ADDR_EXP 19
8209: PUSH
8210: LD_EXP 19
8214: PPUSH
8215: LD_INT 1
8217: PPUSH
8218: CALL_OW 3
8222: ST_TO_ADDR
8223: GO 8202
8225: POP
8226: POP
// end ;
8227: PPOPN 3
8229: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
8230: LD_VAR 0 1
8234: PPUSH
8235: CALL_OW 266
8239: PUSH
8240: LD_INT 32
8242: PUSH
8243: LD_INT 33
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: IN
8250: IFFALSE 8264
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
8252: LD_VAR 0 1
8256: PPUSH
8257: LD_INT 43
8259: PPUSH
8260: CALL_OW 148
8264: PPOPN 1
8266: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
8267: LD_VAR 0 1
8271: PUSH
8272: LD_INT 22
8274: PUSH
8275: LD_INT 3
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 2
8284: PUSH
8285: LD_INT 30
8287: PUSH
8288: LD_INT 31
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PUSH
8295: LD_INT 30
8297: PUSH
8298: LD_INT 32
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PPUSH
8314: CALL_OW 69
8318: IN
8319: IFFALSE 8341
// GoToAnotherTower ( un , b , 143 , 143 ) ;
8321: LD_VAR 0 2
8325: PPUSH
8326: LD_VAR 0 1
8330: PPUSH
8331: LD_INT 143
8333: PPUSH
8334: LD_INT 143
8336: PPUSH
8337: CALL 731 0 4
// end ;
8341: PPOPN 2
8343: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
8344: LD_VAR 0 1
8348: PUSH
8349: LD_INT 22
8351: PUSH
8352: LD_INT 3
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_INT 30
8361: PUSH
8362: LD_INT 32
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PPUSH
8373: CALL_OW 69
8377: IN
8378: IFFALSE 8392
// SetTag ( b , 0 ) ;
8380: LD_VAR 0 1
8384: PPUSH
8385: LD_INT 0
8387: PPUSH
8388: CALL_OW 109
// end ;
8392: PPOPN 2
8394: END
