// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 29 0 0
// DebugMode ;
  12: CALL 69 0 0
// PrepareRussians ;
  16: CALL 1519 0 0
// PrepareAmericans ;
  20: CALL 474 0 0
// Action ;
  24: CALL 2508 0 0
// end ;
  28: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter ; function Init ; begin
  29: LD_INT 0
  31: PPUSH
// debug := 1 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// mission_prefix := 07c_ ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 07c_
  47: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  48: LD_ADDR_EXP 2
  52: PUSH
  53: LD_STRING 07_
  55: ST_TO_ADDR
// buildings_counter := 0 ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// end ;
  64: LD_VAR 0 1
  68: RET
// function DebugMode ; begin
  69: LD_INT 0
  71: PPUSH
// if not debug then
  72: LD_EXP 1
  76: NOT
  77: IFFALSE 81
// exit ;
  79: GO 88
// FogOff ( 1 ) ;
  81: LD_INT 1
  83: PPUSH
  84: CALL_OW 344
// end ; end_of_file
  88: LD_VAR 0 1
  92: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
  93: LD_INT 0
  95: PPUSH
  96: PPUSH
// if exist_mode then
  97: LD_VAR 0 2
 101: IFFALSE 126
// unit := CreateCharacter ( mission_prev_prefix & ident ) else
 103: LD_ADDR_VAR 0 4
 107: PUSH
 108: LD_EXP 2
 112: PUSH
 113: LD_VAR 0 1
 117: STR
 118: PPUSH
 119: CALL_OW 34
 123: ST_TO_ADDR
 124: GO 141
// unit := NewCharacter ( ident ) ;
 126: LD_ADDR_VAR 0 4
 130: PUSH
 131: LD_VAR 0 1
 135: PPUSH
 136: CALL_OW 25
 140: ST_TO_ADDR
// result := unit ;
 141: LD_ADDR_VAR 0 3
 145: PUSH
 146: LD_VAR 0 4
 150: ST_TO_ADDR
// end ;
 151: LD_VAR 0 3
 155: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 156: LD_INT 0
 158: PPUSH
// uc_side := side ;
 159: LD_ADDR_OWVAR 20
 163: PUSH
 164: LD_VAR 0 1
 168: ST_TO_ADDR
// uc_nation := nation ;
 169: LD_ADDR_OWVAR 21
 173: PUSH
 174: LD_VAR 0 2
 178: ST_TO_ADDR
// vc_chassis := chassis ;
 179: LD_ADDR_OWVAR 37
 183: PUSH
 184: LD_VAR 0 3
 188: ST_TO_ADDR
// vc_engine := engine ;
 189: LD_ADDR_OWVAR 39
 193: PUSH
 194: LD_VAR 0 4
 198: ST_TO_ADDR
// vc_control := control ;
 199: LD_ADDR_OWVAR 38
 203: PUSH
 204: LD_VAR 0 5
 208: ST_TO_ADDR
// vc_weapon := weapon ;
 209: LD_ADDR_OWVAR 40
 213: PUSH
 214: LD_VAR 0 6
 218: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 219: LD_ADDR_OWVAR 41
 223: PUSH
 224: LD_VAR 0 7
 228: ST_TO_ADDR
// result := CreateVehicle ;
 229: LD_ADDR_VAR 0 8
 233: PUSH
 234: CALL_OW 45
 238: ST_TO_ADDR
// end ;
 239: LD_VAR 0 8
 243: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 244: LD_INT 0
 246: PPUSH
 247: PPUSH
 248: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 249: LD_ADDR_VAR 0 4
 253: PUSH
 254: LD_INT 22
 256: PUSH
 257: LD_INT 1
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 21
 266: PUSH
 267: LD_INT 1
 269: PUSH
 270: EMPTY
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 50
 276: PUSH
 277: EMPTY
 278: LIST
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: LIST
 284: PPUSH
 285: CALL_OW 69
 289: PUSH
 290: LD_EXP 5
 294: PUSH
 295: LD_EXP 6
 299: PUSH
 300: LD_EXP 7
 304: PUSH
 305: LD_EXP 8
 309: PUSH
 310: LD_EXP 9
 314: PUSH
 315: LD_EXP 10
 319: PUSH
 320: LD_EXP 11
 324: PUSH
 325: LD_EXP 12
 329: PUSH
 330: LD_EXP 14
 334: PUSH
 335: LD_EXP 13
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: DIFF
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 4
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 389
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 362: LD_ADDR_VAR 0 2
 366: PUSH
 367: LD_VAR 0 4
 371: PPUSH
 372: LD_INT 26
 374: PUSH
 375: LD_VAR 0 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PPUSH
 384: CALL_OW 72
 388: ST_TO_ADDR
// end ;
 389: LD_VAR 0 2
 393: RET
// export function SayX ( units , ident ) ; var i ; begin
 394: LD_INT 0
 396: PPUSH
 397: PPUSH
// result := false ;
 398: LD_ADDR_VAR 0 3
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// if not units then
 406: LD_VAR 0 1
 410: NOT
 411: IFFALSE 415
// exit ;
 413: GO 469
// for i in units do
 415: LD_ADDR_VAR 0 4
 419: PUSH
 420: LD_VAR 0 1
 424: PUSH
 425: FOR_IN
 426: IFFALSE 467
// if IsOk ( i ) then
 428: LD_VAR 0 4
 432: PPUSH
 433: CALL_OW 302
 437: IFFALSE 465
// begin Say ( i , ident ) ;
 439: LD_VAR 0 4
 443: PPUSH
 444: LD_VAR 0 2
 448: PPUSH
 449: CALL_OW 88
// result := i ;
 453: LD_ADDR_VAR 0 3
 457: PUSH
 458: LD_VAR 0 4
 462: ST_TO_ADDR
// break ;
 463: GO 467
// end ;
 465: GO 425
 467: POP
 468: POP
// end ; end_of_file
 469: LD_VAR 0 3
 473: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
 478: PPUSH
 479: PPUSH
 480: PPUSH
 481: PPUSH
// uc_side := 1 ;
 482: LD_ADDR_OWVAR 20
 486: PUSH
 487: LD_INT 1
 489: ST_TO_ADDR
// uc_nation := 1 ;
 490: LD_ADDR_OWVAR 21
 494: PUSH
 495: LD_INT 1
 497: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 498: LD_ADDR_EXP 5
 502: PUSH
 503: LD_STRING JMM
 505: PPUSH
 506: LD_EXP 1
 510: NOT
 511: PPUSH
 512: CALL 93 0 2
 516: ST_TO_ADDR
// team := [ JMM ] ;
 517: LD_ADDR_VAR 0 3
 521: PUSH
 522: LD_EXP 5
 526: PUSH
 527: EMPTY
 528: LIST
 529: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
 530: LD_STRING BrownIn07
 532: PPUSH
 533: LD_EXP 1
 537: PPUSH
 538: CALL_OW 30
 542: IFFALSE 563
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 544: LD_ADDR_EXP 6
 548: PUSH
 549: LD_STRING Brown
 551: PPUSH
 552: LD_EXP 1
 556: NOT
 557: PPUSH
 558: CALL 93 0 2
 562: ST_TO_ADDR
// if Brown then
 563: LD_EXP 6
 567: IFFALSE 585
// team := team ^ Brown ;
 569: LD_ADDR_VAR 0 3
 573: PUSH
 574: LD_VAR 0 3
 578: PUSH
 579: LD_EXP 6
 583: ADD
 584: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
 585: LD_STRING DonaldsonIn07
 587: PPUSH
 588: LD_EXP 1
 592: PPUSH
 593: CALL_OW 30
 597: IFFALSE 618
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 599: LD_ADDR_EXP 7
 603: PUSH
 604: LD_STRING Donaldson
 606: PPUSH
 607: LD_EXP 1
 611: NOT
 612: PPUSH
 613: CALL 93 0 2
 617: ST_TO_ADDR
// if Donaldson then
 618: LD_EXP 7
 622: IFFALSE 640
// team := team ^ Donaldson ;
 624: LD_ADDR_VAR 0 3
 628: PUSH
 629: LD_VAR 0 3
 633: PUSH
 634: LD_EXP 7
 638: ADD
 639: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
 640: LD_STRING BobbyIn07
 642: PPUSH
 643: LD_EXP 1
 647: PPUSH
 648: CALL_OW 30
 652: IFFALSE 673
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 654: LD_ADDR_EXP 8
 658: PUSH
 659: LD_STRING Bobby
 661: PPUSH
 662: LD_EXP 1
 666: NOT
 667: PPUSH
 668: CALL 93 0 2
 672: ST_TO_ADDR
// if Bobby then
 673: LD_EXP 8
 677: IFFALSE 695
// team := team ^ Bobby ;
 679: LD_ADDR_VAR 0 3
 683: PUSH
 684: LD_VAR 0 3
 688: PUSH
 689: LD_EXP 8
 693: ADD
 694: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
 695: LD_STRING CyrusIn07
 697: PPUSH
 698: LD_EXP 1
 702: PPUSH
 703: CALL_OW 30
 707: IFFALSE 728
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 709: LD_ADDR_EXP 9
 713: PUSH
 714: LD_STRING Cyrus
 716: PPUSH
 717: LD_EXP 1
 721: NOT
 722: PPUSH
 723: CALL 93 0 2
 727: ST_TO_ADDR
// if Cyrus then
 728: LD_EXP 9
 732: IFFALSE 750
// team := team ^ Cyrus ;
 734: LD_ADDR_VAR 0 3
 738: PUSH
 739: LD_VAR 0 3
 743: PUSH
 744: LD_EXP 9
 748: ADD
 749: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
 750: LD_STRING LisaIn07
 752: PPUSH
 753: LD_EXP 1
 757: PPUSH
 758: CALL_OW 30
 762: IFFALSE 783
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 764: LD_ADDR_EXP 10
 768: PUSH
 769: LD_STRING Lisa
 771: PPUSH
 772: LD_EXP 1
 776: NOT
 777: PPUSH
 778: CALL 93 0 2
 782: ST_TO_ADDR
// if Lisa then
 783: LD_EXP 10
 787: IFFALSE 805
// team := team ^ Lisa ;
 789: LD_ADDR_VAR 0 3
 793: PUSH
 794: LD_VAR 0 3
 798: PUSH
 799: LD_EXP 10
 803: ADD
 804: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
 805: LD_STRING GladstoneIn07
 807: PPUSH
 808: LD_EXP 1
 812: PPUSH
 813: CALL_OW 30
 817: IFFALSE 838
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 819: LD_ADDR_EXP 12
 823: PUSH
 824: LD_STRING Gladstone
 826: PPUSH
 827: LD_EXP 1
 831: NOT
 832: PPUSH
 833: CALL 93 0 2
 837: ST_TO_ADDR
// if Gladstone then
 838: LD_EXP 12
 842: IFFALSE 860
// team := team ^ Gladstone ;
 844: LD_ADDR_VAR 0 3
 848: PUSH
 849: LD_VAR 0 3
 853: PUSH
 854: LD_EXP 12
 858: ADD
 859: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
 860: LD_STRING KhatamIn07
 862: PPUSH
 863: LD_EXP 1
 867: PPUSH
 868: CALL_OW 30
 872: IFFALSE 893
// Khatam := PrepareUnit ( Khatam , ( not debug ) ) ;
 874: LD_ADDR_EXP 13
 878: PUSH
 879: LD_STRING Khatam
 881: PPUSH
 882: LD_EXP 1
 886: NOT
 887: PPUSH
 888: CALL 93 0 2
 892: ST_TO_ADDR
// if Khatam then
 893: LD_EXP 13
 897: IFFALSE 915
// team := team ^ Khatam ;
 899: LD_ADDR_VAR 0 3
 903: PUSH
 904: LD_VAR 0 3
 908: PUSH
 909: LD_EXP 13
 913: ADD
 914: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
 915: LD_ADDR_VAR 0 4
 919: PUSH
 920: LD_STRING 07_others
 922: PPUSH
 923: CALL_OW 31
 927: ST_TO_ADDR
// if others then
 928: LD_VAR 0 4
 932: IFFALSE 950
// team := team ^ others ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_VAR 0 3
 943: PUSH
 944: LD_VAR 0 4
 948: ADD
 949: ST_TO_ADDR
// if debug then
 950: LD_EXP 1
 954: IFFALSE 1028
// begin InitHc ;
 956: CALL_OW 19
// for i = 1 to 4 do
 960: LD_ADDR_VAR 0 2
 964: PUSH
 965: DOUBLE
 966: LD_INT 1
 968: DEC
 969: ST_TO_ADDR
 970: LD_INT 4
 972: PUSH
 973: FOR_TO
 974: IFFALSE 1026
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
 976: LD_INT 0
 978: PPUSH
 979: LD_INT 1
 981: PUSH
 982: LD_INT 3
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PUSH
 989: LD_INT 1
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: CALL_OW 12
 999: ARRAY
1000: PPUSH
1001: LD_INT 4
1003: PPUSH
1004: CALL_OW 380
// team := team ^ CreateHuman ;
1008: LD_ADDR_VAR 0 3
1012: PUSH
1013: LD_VAR 0 3
1017: PUSH
1018: CALL_OW 44
1022: ADD
1023: ST_TO_ADDR
// end ;
1024: GO 973
1026: POP
1027: POP
// end ; m := 0 ;
1028: LD_ADDR_VAR 0 6
1032: PUSH
1033: LD_INT 0
1035: ST_TO_ADDR
// for i in team do
1036: LD_ADDR_VAR 0 2
1040: PUSH
1041: LD_VAR 0 3
1045: PUSH
1046: FOR_IN
1047: IFFALSE 1227
// if GetClass ( i ) = 3 then
1049: LD_VAR 0 2
1053: PPUSH
1054: CALL_OW 257
1058: PUSH
1059: LD_INT 3
1061: EQUAL
1062: IFFALSE 1210
// begin m := m + 1 ;
1064: LD_ADDR_VAR 0 6
1068: PUSH
1069: LD_VAR 0 6
1073: PUSH
1074: LD_INT 1
1076: PLUS
1077: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
1078: LD_ADDR_VAR 0 5
1082: PUSH
1083: LD_INT 1
1085: PPUSH
1086: LD_INT 1
1088: PPUSH
1089: LD_INT 2
1091: PUSH
1092: LD_INT 3
1094: PUSH
1095: LD_INT 2
1097: PUSH
1098: LD_INT 1
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: LD_VAR 0 6
1111: PUSH
1112: LD_INT 4
1114: MOD
1115: PUSH
1116: LD_INT 1
1118: PLUS
1119: ARRAY
1120: PPUSH
1121: LD_INT 2
1123: PPUSH
1124: LD_INT 1
1126: PPUSH
1127: LD_INT 4
1129: PUSH
1130: LD_INT 5
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: LD_INT 11
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: PUSH
1145: LD_VAR 0 6
1149: PUSH
1150: LD_INT 4
1152: MOD
1153: PUSH
1154: LD_INT 1
1156: PLUS
1157: ARRAY
1158: PPUSH
1159: LD_INT 60
1161: PPUSH
1162: CALL 156 0 7
1166: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1167: LD_VAR 0 5
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
1179: LD_VAR 0 5
1183: PPUSH
1184: LD_INT 1
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
1194: LD_VAR 0 2
1198: PPUSH
1199: LD_VAR 0 5
1203: PPUSH
1204: CALL_OW 52
// end else
1208: GO 1225
// PlaceUnitArea ( i , startArea , false ) ;
1210: LD_VAR 0 2
1214: PPUSH
1215: LD_INT 1
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 49
1225: GO 1046
1227: POP
1228: POP
// uc_side := 4 ;
1229: LD_ADDR_OWVAR 20
1233: PUSH
1234: LD_INT 4
1236: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ) ;
1237: LD_ADDR_EXP 15
1241: PUSH
1242: LD_STRING Harisson
1244: PPUSH
1245: LD_INT 0
1247: PPUSH
1248: CALL 93 0 2
1252: ST_TO_ADDR
// PrepareScout ;
1253: CALL 1262 0 0
// end ;
1257: LD_VAR 0 1
1261: RET
// function PrepareScout ; var ape ; begin
1262: LD_INT 0
1264: PPUSH
1265: PPUSH
// uc_side := 4 ;
1266: LD_ADDR_OWVAR 20
1270: PUSH
1271: LD_INT 4
1273: ST_TO_ADDR
// uc_nation := 1 ;
1274: LD_ADDR_OWVAR 21
1278: PUSH
1279: LD_INT 1
1281: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
1282: LD_STRING FrankIn06
1284: PPUSH
1285: LD_INT 0
1287: PPUSH
1288: CALL_OW 30
1292: IFFALSE 1309
// Frank := CreateCharacter ( 06c_Frank ) else
1294: LD_ADDR_EXP 11
1298: PUSH
1299: LD_STRING 06c_Frank
1301: PPUSH
1302: CALL_OW 34
1306: ST_TO_ADDR
1307: GO 1349
// if LoadVariable ( FrankInDelta , 0 ) then
1309: LD_STRING FrankInDelta
1311: PPUSH
1312: LD_INT 0
1314: PPUSH
1315: CALL_OW 30
1319: IFFALSE 1336
// Frank := CreateCharacter ( 05_Frank ) else
1321: LD_ADDR_EXP 11
1325: PUSH
1326: LD_STRING 05_Frank
1328: PPUSH
1329: CALL_OW 34
1333: ST_TO_ADDR
1334: GO 1349
// Frank := CreateCharacter ( 04_Frank ) ;
1336: LD_ADDR_EXP 11
1340: PUSH
1341: LD_STRING 04_Frank
1343: PPUSH
1344: CALL_OW 34
1348: ST_TO_ADDR
// if Frank then
1349: LD_EXP 11
1353: IFFALSE 1474
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
1355: LD_EXP 11
1359: PPUSH
1360: LD_INT 2
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// uc_side := 0 ;
1370: LD_ADDR_OWVAR 20
1374: PUSH
1375: LD_INT 0
1377: ST_TO_ADDR
// uc_nation := 0 ;
1378: LD_ADDR_OWVAR 21
1382: PUSH
1383: LD_INT 0
1385: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
1386: LD_INT 0
1388: PPUSH
1389: LD_INT 12
1391: PPUSH
1392: LD_INT 0
1394: PPUSH
1395: CALL_OW 380
// ape := CreateHuman ;
1399: LD_ADDR_VAR 0 2
1403: PUSH
1404: CALL_OW 44
1408: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_EXP 11
1418: PPUSH
1419: CALL_OW 250
1423: PPUSH
1424: LD_EXP 11
1428: PPUSH
1429: CALL_OW 251
1433: PPUSH
1434: LD_INT 5
1436: PPUSH
1437: LD_INT 0
1439: PPUSH
1440: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
1444: LD_VAR 0 2
1448: PPUSH
1449: LD_EXP 11
1453: PPUSH
1454: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
1458: LD_EXP 11
1462: PPUSH
1463: LD_VAR 0 2
1467: PPUSH
1468: CALL_OW 119
// exit ;
1472: GO 1514
// end ; Kikuchi := PrepareUnit ( Yamoko , false ) ;
1474: LD_ADDR_EXP 14
1478: PUSH
1479: LD_STRING Yamoko
1481: PPUSH
1482: LD_INT 0
1484: PPUSH
1485: CALL 93 0 2
1489: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
1490: LD_EXP 14
1494: PPUSH
1495: LD_INT 2
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 49
// ComHold ( Kikuchi ) ;
1505: LD_EXP 14
1509: PPUSH
1510: CALL_OW 140
// end ; end_of_file
1514: LD_VAR 0 1
1518: RET
// export function PrepareRussians ; var i , j , r , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
1519: LD_INT 0
1521: PPUSH
1522: PPUSH
1523: PPUSH
1524: PPUSH
1525: PPUSH
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
// dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1536: LD_ADDR_VAR 0 8
1540: PUSH
1541: LD_INT 22
1543: PUSH
1544: LD_INT 3
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: PUSH
1551: LD_INT 2
1553: PUSH
1554: LD_INT 30
1556: PUSH
1557: LD_INT 0
1559: PUSH
1560: EMPTY
1561: LIST
1562: LIST
1563: PUSH
1564: LD_INT 30
1566: PUSH
1567: LD_INT 1
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: LIST
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PPUSH
1583: CALL_OW 69
1587: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1588: LD_ADDR_VAR 0 9
1592: PUSH
1593: LD_INT 22
1595: PUSH
1596: LD_INT 3
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 2
1605: PUSH
1606: LD_INT 30
1608: PUSH
1609: LD_INT 6
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 30
1618: PUSH
1619: LD_INT 7
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 30
1628: PUSH
1629: LD_INT 8
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PPUSH
1646: CALL_OW 69
1650: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
1651: LD_ADDR_VAR 0 10
1655: PUSH
1656: LD_INT 22
1658: PUSH
1659: LD_INT 3
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 30
1668: PUSH
1669: LD_INT 3
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PPUSH
1680: CALL_OW 69
1684: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
1685: LD_ADDR_VAR 0 11
1689: PUSH
1690: LD_INT 22
1692: PUSH
1693: LD_INT 3
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: PUSH
1700: LD_INT 30
1702: PUSH
1703: LD_INT 31
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PPUSH
1714: CALL_OW 69
1718: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
1719: LD_ADDR_VAR 0 12
1723: PUSH
1724: LD_INT 22
1726: PUSH
1727: LD_INT 3
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 30
1736: PUSH
1737: LD_INT 32
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PPUSH
1748: CALL_OW 69
1752: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
1753: LD_ADDR_VAR 0 13
1757: PUSH
1758: LD_INT 22
1760: PUSH
1761: LD_INT 3
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 30
1770: PUSH
1771: LD_INT 33
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 69
1786: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
1787: LD_ADDR_VAR 0 14
1791: PUSH
1792: LD_INT 42
1794: PUSH
1795: LD_INT 5
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PUSH
1802: LD_INT 43
1804: PUSH
1805: LD_INT 50
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 44
1814: PUSH
1815: LD_INT 30
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 46
1824: PUSH
1825: LD_INT 15
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 4 , 3 ] ;
1838: LD_ADDR_VAR 0 15
1842: PUSH
1843: LD_INT 0
1845: PUSH
1846: LD_INT 4
1848: PUSH
1849: LD_INT 4
1851: PUSH
1852: LD_INT 3
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
1861: LD_ADDR_VAR 0 5
1865: PUSH
1866: LD_INT 4
1868: PUSH
1869: LD_INT 5
1871: PUSH
1872: LD_INT 6
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: PUSH
1880: LD_OWVAR 67
1884: ARRAY
1885: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
1886: LD_INT 16
1888: PPUSH
1889: LD_STRING am_tukh
1891: PPUSH
1892: CALL_OW 500
// uc_side := 3 ;
1896: LD_ADDR_OWVAR 20
1900: PUSH
1901: LD_INT 3
1903: ST_TO_ADDR
// uc_nation := 3 ;
1904: LD_ADDR_OWVAR 21
1908: PUSH
1909: LD_INT 3
1911: ST_TO_ADDR
// InitHc ;
1912: CALL_OW 19
// tmp := bunker_list * [ 50 , 70 , 85 ] [ Difficulty ] div 100 ;
1916: LD_ADDR_VAR 0 7
1920: PUSH
1921: LD_VAR 0 12
1925: PUSH
1926: LD_INT 50
1928: PUSH
1929: LD_INT 70
1931: PUSH
1932: LD_INT 85
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: LIST
1939: PUSH
1940: LD_OWVAR 67
1944: ARRAY
1945: MUL
1946: PUSH
1947: LD_INT 100
1949: DIV
1950: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
1951: LD_ADDR_VAR 0 15
1955: PUSH
1956: LD_VAR 0 15
1960: PPUSH
1961: LD_INT 1
1963: PPUSH
1964: LD_VAR 0 7
1968: PPUSH
1969: CALL_OW 1
1973: ST_TO_ADDR
// tmp := [ ] ;
1974: LD_ADDR_VAR 0 7
1978: PUSH
1979: EMPTY
1980: ST_TO_ADDR
// for i in bunker_list do
1981: LD_ADDR_VAR 0 2
1985: PUSH
1986: LD_VAR 0 12
1990: PUSH
1991: FOR_IN
1992: IFFALSE 2088
// if i mod 10 + 1 < tmp then
1994: LD_VAR 0 2
1998: PUSH
1999: LD_INT 10
2001: MOD
2002: PUSH
2003: LD_INT 1
2005: PLUS
2006: PUSH
2007: LD_VAR 0 7
2011: LESS
2012: IFFALSE 2057
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
2014: LD_ADDR_VAR 0 7
2018: PUSH
2019: LD_VAR 0 7
2023: PPUSH
2024: LD_VAR 0 2
2028: PUSH
2029: LD_INT 3
2031: PPUSH
2032: LD_INT 5
2034: PPUSH
2035: CALL_OW 12
2039: MOD
2040: PUSH
2041: LD_INT 1
2043: PLUS
2044: PPUSH
2045: LD_VAR 0 2
2049: PPUSH
2050: CALL_OW 2
2054: ST_TO_ADDR
2055: GO 2086
// tmp := Insert ( tmp , tmp + 1 , i ) ;
2057: LD_ADDR_VAR 0 7
2061: PUSH
2062: LD_VAR 0 7
2066: PPUSH
2067: LD_VAR 0 7
2071: PUSH
2072: LD_INT 1
2074: PLUS
2075: PPUSH
2076: LD_VAR 0 2
2080: PPUSH
2081: CALL_OW 2
2085: ST_TO_ADDR
2086: GO 1991
2088: POP
2089: POP
// bunker_list := tmp ;
2090: LD_ADDR_VAR 0 12
2094: PUSH
2095: LD_VAR 0 7
2099: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
2100: LD_ADDR_VAR 0 2
2104: PUSH
2105: LD_VAR 0 12
2109: PUSH
2110: LD_VAR 0 13
2114: ADD
2115: PUSH
2116: FOR_IN
2117: IFFALSE 2214
// begin tmp := rand ( 0 , 100 ) ;
2119: LD_ADDR_VAR 0 7
2123: PUSH
2124: LD_INT 0
2126: PPUSH
2127: LD_INT 100
2129: PPUSH
2130: CALL_OW 12
2134: ST_TO_ADDR
// r := 0 ;
2135: LD_ADDR_VAR 0 4
2139: PUSH
2140: LD_INT 0
2142: ST_TO_ADDR
// for j in weapons_list do
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 14
2152: PUSH
2153: FOR_IN
2154: IFFALSE 2210
// begin r := r + j [ 2 ] ;
2156: LD_ADDR_VAR 0 4
2160: PUSH
2161: LD_VAR 0 4
2165: PUSH
2166: LD_VAR 0 3
2170: PUSH
2171: LD_INT 2
2173: ARRAY
2174: PLUS
2175: ST_TO_ADDR
// if r >= tmp then
2176: LD_VAR 0 4
2180: PUSH
2181: LD_VAR 0 7
2185: GREATEREQUAL
2186: IFFALSE 2208
// begin PlaceWeaponTurret ( i , j [ 1 ] ) ;
2188: LD_VAR 0 2
2192: PPUSH
2193: LD_VAR 0 3
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: PPUSH
2202: CALL_OW 431
// break ;
2206: GO 2210
// end ; end ;
2208: GO 2153
2210: POP
2211: POP
// end ;
2212: GO 2116
2214: POP
2215: POP
// while ( personel_counter [ 1 ] ) do
2216: LD_VAR 0 15
2220: PUSH
2221: LD_INT 1
2223: ARRAY
2224: IFFALSE 2332
// begin i := rand ( 1 , bunker_list ) ;
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: LD_INT 1
2233: PPUSH
2234: LD_VAR 0 12
2238: PPUSH
2239: CALL_OW 12
2243: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2244: LD_INT 0
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: LD_VAR 0 5
2254: PPUSH
2255: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
2259: CALL_OW 44
2263: PPUSH
2264: LD_VAR 0 12
2268: PUSH
2269: LD_VAR 0 2
2273: ARRAY
2274: PPUSH
2275: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
2279: LD_ADDR_VAR 0 12
2283: PUSH
2284: LD_VAR 0 12
2288: PPUSH
2289: LD_VAR 0 2
2293: PPUSH
2294: CALL_OW 3
2298: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
2299: LD_ADDR_VAR 0 15
2303: PUSH
2304: LD_VAR 0 15
2308: PPUSH
2309: LD_INT 1
2311: PPUSH
2312: LD_VAR 0 15
2316: PUSH
2317: LD_INT 1
2319: ARRAY
2320: PUSH
2321: LD_INT 1
2323: MINUS
2324: PPUSH
2325: CALL_OW 1
2329: ST_TO_ADDR
// end ;
2330: GO 2216
// for i = 1 to personel_counter [ 2 ] do
2332: LD_ADDR_VAR 0 2
2336: PUSH
2337: DOUBLE
2338: LD_INT 1
2340: DEC
2341: ST_TO_ADDR
2342: LD_VAR 0 15
2346: PUSH
2347: LD_INT 2
2349: ARRAY
2350: PUSH
2351: FOR_TO
2352: IFFALSE 2383
// begin PrepareHuman ( false , 2 , skill ) ;
2354: LD_INT 0
2356: PPUSH
2357: LD_INT 2
2359: PPUSH
2360: LD_VAR 0 5
2364: PPUSH
2365: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
2369: CALL_OW 44
2373: PPUSH
2374: LD_INT 16
2376: PPUSH
2377: CALL_OW 52
// end ;
2381: GO 2351
2383: POP
2384: POP
// for i = 1 to personel_counter [ 3 ] do
2385: LD_ADDR_VAR 0 2
2389: PUSH
2390: DOUBLE
2391: LD_INT 1
2393: DEC
2394: ST_TO_ADDR
2395: LD_VAR 0 15
2399: PUSH
2400: LD_INT 3
2402: ARRAY
2403: PUSH
2404: FOR_TO
2405: IFFALSE 2442
// begin PrepareHuman ( false , 3 , skill ) ;
2407: LD_INT 0
2409: PPUSH
2410: LD_INT 3
2412: PPUSH
2413: LD_VAR 0 5
2417: PPUSH
2418: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ 1 ] ) ;
2422: CALL_OW 44
2426: PPUSH
2427: LD_VAR 0 10
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 52
// end ;
2440: GO 2404
2442: POP
2443: POP
// for i = 1 to personel_counter [ 4 ] do
2444: LD_ADDR_VAR 0 2
2448: PUSH
2449: DOUBLE
2450: LD_INT 1
2452: DEC
2453: ST_TO_ADDR
2454: LD_VAR 0 15
2458: PUSH
2459: LD_INT 4
2461: ARRAY
2462: PUSH
2463: FOR_TO
2464: IFFALSE 2501
// begin PrepareHuman ( false , 4 , skill ) ;
2466: LD_INT 0
2468: PPUSH
2469: LD_INT 4
2471: PPUSH
2472: LD_VAR 0 5
2476: PPUSH
2477: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
2481: CALL_OW 44
2485: PPUSH
2486: LD_VAR 0 9
2490: PUSH
2491: LD_INT 1
2493: ARRAY
2494: PPUSH
2495: CALL_OW 52
// end ;
2499: GO 2463
2501: POP
2502: POP
// end ; end_of_file
2503: LD_VAR 0 1
2507: RET
// export function Action ; begin
2508: LD_INT 0
2510: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
2511: LD_INT 28
2513: PPUSH
2514: LD_INT 3
2516: PPUSH
2517: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
2521: LD_INT 41
2523: PPUSH
2524: LD_INT 76
2526: PPUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 10
2532: PPUSH
2533: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
2537: LD_INT 41
2539: PPUSH
2540: LD_INT 76
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: CALL_OW 331
// InGameOn ;
2550: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
2554: LD_EXP 15
2558: PPUSH
2559: LD_STRING D2-Har-1
2561: PPUSH
2562: CALL_OW 94
// InGameOff ;
2566: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2570: LD_STRING M1
2572: PPUSH
2573: CALL_OW 337
// end ;
2577: LD_VAR 0 1
2581: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
2582: LD_EXP 4
2586: PUSH
2587: LD_INT 1
2589: GREATER
2590: IFFALSE 2681
2592: GO 2594
2594: DISABLE
2595: LD_INT 0
2597: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
2598: LD_ADDR_VAR 0 1
2602: PUSH
2603: LD_INT 1
2605: PPUSH
2606: CALL 244 0 1
2610: PUSH
2611: LD_INT 1
2613: ARRAY
2614: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
2615: LD_VAR 0 1
2619: PPUSH
2620: LD_STRING D2a-Sol1-1
2622: PPUSH
2623: CALL_OW 88
// if not un then
2627: LD_VAR 0 1
2631: NOT
2632: IFFALSE 2663
// begin un := GetRandom ( sex_female ) [ 1 ] ;
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: LD_INT 2
2641: PPUSH
2642: CALL 244 0 1
2646: PUSH
2647: LD_INT 1
2649: ARRAY
2650: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
2651: LD_VAR 0 1
2655: PPUSH
2656: LD_STRING D2a-FSol1-1
2658: PPUSH
2659: CALL_OW 88
// end ; if Khatam then
2663: LD_EXP 13
2667: IFFALSE 2681
// Say ( Khatam , D3b-Khat-3 ) ;
2669: LD_EXP 13
2673: PPUSH
2674: LD_STRING D3b-Khat-3
2676: PPUSH
2677: CALL_OW 88
// end ;
2681: PPOPN 1
2683: END
// every 0 0$1 trigger Frank and GetDistUnits ( JMM , Frank ) < 5 and not InBattle ( 1 ) do var i , ape ;
2684: LD_EXP 11
2688: PUSH
2689: LD_EXP 5
2693: PPUSH
2694: LD_EXP 11
2698: PPUSH
2699: CALL_OW 296
2703: PUSH
2704: LD_INT 5
2706: LESS
2707: AND
2708: PUSH
2709: LD_INT 1
2711: PPUSH
2712: CALL_OW 463
2716: NOT
2717: AND
2718: IFFALSE 3305
2720: GO 2722
2722: DISABLE
2723: LD_INT 0
2725: PPUSH
2726: PPUSH
// begin InGameOn ;
2727: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
2731: LD_ADDR_VAR 0 2
2735: PUSH
2736: LD_INT 22
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: LD_INT 25
2748: PUSH
2749: LD_INT 12
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PPUSH
2760: CALL_OW 69
2764: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
2765: LD_ADDR_VAR 0 2
2769: PUSH
2770: LD_VAR 0 2
2774: PPUSH
2775: LD_EXP 11
2779: PPUSH
2780: CALL_OW 74
2784: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
2785: LD_ADDR_VAR 0 1
2789: PUSH
2790: LD_INT 22
2792: PUSH
2793: LD_INT 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 21
2802: PUSH
2803: LD_INT 1
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: LD_INT 91
2812: PUSH
2813: LD_EXP 11
2817: PUSH
2818: LD_INT 20
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: LIST
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: PPUSH
2831: CALL_OW 69
2835: PUSH
2836: FOR_IN
2837: IFFALSE 2855
// ComTurnUnit ( i , Frank ) ;
2839: LD_VAR 0 1
2843: PPUSH
2844: LD_EXP 11
2848: PPUSH
2849: CALL_OW 119
2853: GO 2836
2855: POP
2856: POP
// SetSide ( Frank , 1 ) ;
2857: LD_EXP 11
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
2869: LD_EXP 5
2873: PPUSH
2874: LD_EXP 11
2878: PPUSH
2879: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
2883: LD_EXP 5
2887: PPUSH
2888: LD_EXP 11
2892: PPUSH
2893: CALL_OW 179
// CenterOnUnits ( Frank ) ;
2897: LD_EXP 11
2901: PPUSH
2902: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
2906: LD_EXP 11
2910: PPUSH
2911: LD_STRING D3a-Frank-1
2913: PPUSH
2914: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
2918: LD_VAR 0 2
2922: PPUSH
2923: LD_INT 42
2925: PPUSH
2926: LD_INT 78
2928: PPUSH
2929: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
2933: LD_VAR 0 2
2937: PPUSH
2938: LD_EXP 11
2942: PPUSH
2943: CALL_OW 179
// if Lisa then
2947: LD_EXP 10
2951: IFFALSE 2965
// Say ( Lisa , D3a-Lisa-1 ) ;
2953: LD_EXP 10
2957: PPUSH
2958: LD_STRING D3a-Lisa-1
2960: PPUSH
2961: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
2965: LD_EXP 5
2969: PPUSH
2970: LD_STRING D3a-JMM-1
2972: PPUSH
2973: CALL_OW 88
// if Cyrus then
2977: LD_EXP 9
2981: IFFALSE 2995
// Say ( Cyrus , D3a-Cyrus-1 ) ;
2983: LD_EXP 9
2987: PPUSH
2988: LD_STRING D3a-Cyrus-1
2990: PPUSH
2991: CALL_OW 88
// if GetRandom ( sex_male ) then
2995: LD_INT 1
2997: PPUSH
2998: CALL 244 0 1
3002: IFFALSE 3023
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
3004: LD_INT 1
3006: PPUSH
3007: CALL 244 0 1
3011: PUSH
3012: LD_INT 1
3014: ARRAY
3015: PPUSH
3016: LD_STRING D3a-Sol1-1
3018: PPUSH
3019: CALL_OW 88
// if GetRandom ( sex_female ) then
3023: LD_INT 2
3025: PPUSH
3026: CALL 244 0 1
3030: IFFALSE 3051
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
3032: LD_INT 2
3034: PPUSH
3035: CALL 244 0 1
3039: PUSH
3040: LD_INT 1
3042: ARRAY
3043: PPUSH
3044: LD_STRING D3a-FSol1-1
3046: PPUSH
3047: CALL_OW 88
// if Gladstone then
3051: LD_EXP 12
3055: IFFALSE 3069
// Say ( Gladstone , D3a-Glad-1 ) ;
3057: LD_EXP 12
3061: PPUSH
3062: LD_STRING D3a-Glad-1
3064: PPUSH
3065: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
3069: LD_VAR 0 2
3073: PPUSH
3074: LD_INT 60
3076: PPUSH
3077: LD_INT 113
3079: PPUSH
3080: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
3084: LD_EXP 11
3088: PPUSH
3089: LD_STRING D3a-Frank-2
3091: PPUSH
3092: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
3096: LD_EXP 11
3100: PPUSH
3101: LD_EXP 5
3105: PPUSH
3106: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
3110: LD_EXP 5
3114: PPUSH
3115: LD_STRING D3a-JMM-2
3117: PPUSH
3118: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 4
3127: PPUSH
3128: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
3132: LD_INT 85
3134: PPUSH
3135: LD_INT 134
3137: PPUSH
3138: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
3142: LD_EXP 11
3146: PPUSH
3147: LD_STRING D3a-Frank-3
3149: PPUSH
3150: CALL_OW 88
// Wait ( 0 0$01 ) ;
3154: LD_INT 35
3156: PPUSH
3157: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
3161: LD_INT 166
3163: PPUSH
3164: LD_INT 136
3166: PPUSH
3167: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
3171: LD_EXP 5
3175: PPUSH
3176: LD_STRING D3a-JMM-3
3178: PPUSH
3179: CALL_OW 88
// Wait ( 0 0$01 ) ;
3183: LD_INT 35
3185: PPUSH
3186: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
3190: LD_EXP 11
3194: PPUSH
3195: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
3199: LD_EXP 11
3203: PPUSH
3204: LD_STRING D3a-Frank-4
3206: PPUSH
3207: CALL_OW 88
// if Lisa then
3211: LD_EXP 10
3215: IFFALSE 3229
// Say ( Lisa , D3a-Lisa-4 ) ;
3217: LD_EXP 10
3221: PPUSH
3222: LD_STRING D3a-Lisa-4
3224: PPUSH
3225: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
3229: LD_EXP 5
3233: PPUSH
3234: LD_STRING D3a-JMM-4
3236: PPUSH
3237: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
3241: LD_EXP 11
3245: PPUSH
3246: LD_STRING D3a-Frank-5
3248: PPUSH
3249: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
3253: LD_EXP 5
3257: PPUSH
3258: LD_STRING D3a-JMM-5
3260: PPUSH
3261: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
3265: LD_EXP 11
3269: PPUSH
3270: LD_STRING D3a-Frank-6
3272: PPUSH
3273: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
3277: LD_EXP 5
3281: PPUSH
3282: LD_STRING D3a-JMM-6
3284: PPUSH
3285: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
3289: LD_EXP 11
3293: PPUSH
3294: LD_STRING D3a-Frank-7
3296: PPUSH
3297: CALL_OW 88
// InGameOff ;
3301: CALL_OW 9
// end ;
3305: PPOPN 2
3307: END
// every 0 0$1 trigger Kikuchi and GetDistUnits ( JMM , Kikuchi ) < 5 and not InBattle ( 1 ) do
3308: LD_EXP 14
3312: PUSH
3313: LD_EXP 5
3317: PPUSH
3318: LD_EXP 14
3322: PPUSH
3323: CALL_OW 296
3327: PUSH
3328: LD_INT 5
3330: LESS
3331: AND
3332: PUSH
3333: LD_INT 1
3335: PPUSH
3336: CALL_OW 463
3340: NOT
3341: AND
3342: IFFALSE 3522
3344: GO 3346
3346: DISABLE
// begin InGameOn ;
3347: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
3351: LD_EXP 5
3355: PPUSH
3356: LD_EXP 14
3360: PPUSH
3361: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
3365: LD_EXP 14
3369: PPUSH
3370: LD_EXP 5
3374: PPUSH
3375: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
3379: LD_EXP 14
3383: PPUSH
3384: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
3388: LD_EXP 14
3392: PPUSH
3393: LD_STRING D3b-Yam-1
3395: PPUSH
3396: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
3400: LD_EXP 5
3404: PPUSH
3405: LD_STRING D3b-JMM-1
3407: PPUSH
3408: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
3412: LD_INT 1
3414: PPUSH
3415: LD_INT 4
3417: PPUSH
3418: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
3422: LD_INT 85
3424: PPUSH
3425: LD_INT 134
3427: PPUSH
3428: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
3432: LD_EXP 14
3436: PPUSH
3437: LD_STRING D3b-Yam-2
3439: PPUSH
3440: CALL_OW 88
// Wait ( 0 0$01 ) ;
3444: LD_INT 35
3446: PPUSH
3447: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
3451: LD_EXP 5
3455: PPUSH
3456: LD_STRING D3b-JMM-2
3458: PPUSH
3459: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
3463: LD_INT 166
3465: PPUSH
3466: LD_INT 136
3468: PPUSH
3469: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
3473: LD_EXP 14
3477: PPUSH
3478: LD_STRING D3b-Yam-3
3480: PPUSH
3481: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
3485: LD_EXP 5
3489: PPUSH
3490: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
3494: LD_EXP 5
3498: PPUSH
3499: LD_STRING D3b-JMM-3a
3501: PPUSH
3502: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
3506: LD_EXP 14
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: CALL_OW 235
// InGameOff ;
3518: CALL_OW 9
// end ; end_of_file
3522: END
// on UnitDestroyed ( un ) do begin if un = JMM then
3523: LD_VAR 0 1
3527: PUSH
3528: LD_EXP 5
3532: EQUAL
3533: IFFALSE 3542
// YouLost ( JMM ) ;
3535: LD_STRING JMM
3537: PPUSH
3538: CALL_OW 104
// if GetType ( un ) = unit_building then
3542: LD_VAR 0 1
3546: PPUSH
3547: CALL_OW 247
3551: PUSH
3552: LD_INT 3
3554: EQUAL
3555: IFFALSE 3571
// buildings_counter := buildings_counter + 1 ;
3557: LD_ADDR_EXP 4
3561: PUSH
3562: LD_EXP 4
3566: PUSH
3567: LD_INT 1
3569: PLUS
3570: ST_TO_ADDR
// end ;
3571: PPOPN 1
3573: END
