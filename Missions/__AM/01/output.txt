// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin am = 1 ;
   0: LD_ADDR_LOC 1
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// oth = 4 ;
   8: LD_ADDR_LOC 2
  12: PUSH
  13: LD_INT 4
  15: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  16: LD_LOC 1
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: CALL_OW 332
// ingame_video = true ;
  28: LD_ADDR_OWVAR 52
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// interface_hidden = true ;
  36: LD_ADDR_OWVAR 54
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// debug = false ;
  44: LD_ADDR_LOC 19
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// joanok = true ;
  52: LD_ADDR_LOC 13
  56: PUSH
  57: LD_INT 1
  59: ST_TO_ADDR
// oothersok = true ;
  60: LD_ADDR_LOC 14
  64: PUSH
  65: LD_INT 1
  67: ST_TO_ADDR
// buildingsok = true ;
  68: LD_ADDR_LOC 15
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// killhim = false ;
  76: LD_ADDR_LOC 16
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  84: LD_ADDR_LOC 12
  88: PUSH
  89: LD_INT 9
  91: PUSH
  92: LD_INT 10
  94: PUSH
  95: LD_INT 11
  97: PUSH
  98: LD_INT 8
 100: PUSH
 101: LD_INT 12
 103: PUSH
 104: LD_INT 13
 106: PUSH
 107: LD_INT 14
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: LIST
 115: LIST
 116: LIST
 117: LIST
 118: ST_TO_ADDR
// CreatePersonnel ;
 119: CALL 3653 0 0
// disable ( 01 ) ;
 123: LD_INT 1
 125: DISABLE_MARKED
// disable ( 02 ) ;
 126: LD_INT 2
 128: DISABLE_MARKED
// disable ( 03 ) ;
 129: LD_INT 3
 131: DISABLE_MARKED
// disable ( 04 ) ;
 132: LD_INT 4
 134: DISABLE_MARKED
// disable ( 05 ) ;
 135: LD_INT 5
 137: DISABLE_MARKED
// disable_07 = false ;
 138: LD_ADDR_LOC 18
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// uc_side = am ;
 146: LD_ADDR_OWVAR 20
 150: PUSH
 151: LD_LOC 1
 155: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 156: LD_ADDR_LOC 3
 160: PUSH
 161: LD_STRING JMM
 163: PPUSH
 164: CALL_OW 25
 168: ST_TO_ADDR
// uc_side = oth ;
 169: LD_ADDR_OWVAR 20
 173: PUSH
 174: LD_LOC 2
 178: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 179: LD_ADDR_LOC 4
 183: PUSH
 184: LD_STRING Joan
 186: PPUSH
 187: CALL_OW 25
 191: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 192: LD_ADDR_LOC 6
 196: PUSH
 197: LD_STRING Donaldson
 199: PPUSH
 200: CALL_OW 25
 204: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 205: LD_ADDR_LOC 7
 209: PUSH
 210: LD_STRING Gary
 212: PPUSH
 213: CALL_OW 25
 217: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 218: LD_ADDR_LOC 5
 222: PUSH
 223: LD_STRING Sikorski
 225: PPUSH
 226: CALL_OW 25
 230: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 231: LD_ADDR_LOC 8
 235: PUSH
 236: LD_STRING Williams
 238: PPUSH
 239: CALL_OW 25
 243: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 244: LD_ADDR_LOC 9
 248: PUSH
 249: LD_STRING Phillips
 251: PPUSH
 252: CALL_OW 25
 256: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 257: LD_ADDR_LOC 10
 261: PUSH
 262: LD_STRING Officer
 264: PPUSH
 265: CALL_OW 25
 269: ST_TO_ADDR
// CreateOfficer2 ;
 270: CALL 3510 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 274: LD_ADDR_LOC 11
 278: PUSH
 279: LD_LOC 6
 283: PUSH
 284: LD_LOC 7
 288: PUSH
 289: LD_LOC 5
 293: PUSH
 294: LD_LOC 8
 298: PUSH
 299: LD_LOC 9
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: LIST
 308: LIST
 309: LIST
 310: ST_TO_ADDR
// placeunitxy ( off , 43 , 39 , false ) ;
 311: LD_LOC 10
 315: PPUSH
 316: LD_INT 43
 318: PPUSH
 319: LD_INT 39
 321: PPUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 329: LD_EXP 1
 333: PPUSH
 334: LD_INT 74
 336: PPUSH
 337: LD_INT 32
 339: PPUSH
 340: LD_INT 3
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 350: LD_LOC 3
 354: PPUSH
 355: LD_INT 12
 357: PPUSH
 358: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 362: LD_LOC 6
 366: PPUSH
 367: LD_INT 12
 369: PPUSH
 370: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 374: LD_LOC 7
 378: PPUSH
 379: LD_INT 12
 381: PPUSH
 382: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 386: LD_LOC 5
 390: PPUSH
 391: LD_INT 12
 393: PPUSH
 394: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 398: LD_LOC 8
 402: PPUSH
 403: LD_INT 12
 405: PPUSH
 406: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 410: LD_LOC 9
 414: PPUSH
 415: LD_INT 12
 417: PPUSH
 418: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 422: LD_LOC 11
 426: PUSH
 427: LD_LOC 10
 431: PUSH
 432: LD_EXP 1
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: ADD
 441: PPUSH
 442: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 446: LD_EXP 1
 450: PPUSH
 451: LD_INT 67
 453: PPUSH
 454: LD_INT 52
 456: PPUSH
 457: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 461: LD_LOC 4
 465: PPUSH
 466: LD_INT 40
 468: PPUSH
 469: LD_INT 32
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 479: LD_LOC 4
 483: PUSH
 484: LD_LOC 3
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: PPUSH
 493: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 497: LD_INT 48
 499: PPUSH
 500: LD_INT 38
 502: PPUSH
 503: CALL_OW 86
// ComMoveXY ( off , 49 , 41 ) ;
 507: LD_LOC 10
 511: PPUSH
 512: LD_INT 49
 514: PPUSH
 515: LD_INT 41
 517: PPUSH
 518: CALL_OW 111
// wait ( 0 0$3 ) ;
 522: LD_INT 105
 524: PPUSH
 525: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 529: LD_LOC 10
 533: PPUSH
 534: LD_STRING DX1-Off-1
 536: PPUSH
 537: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 541: LD_LOC 10
 545: PPUSH
 546: LD_INT 51
 548: PPUSH
 549: LD_INT 38
 551: PPUSH
 552: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 556: LD_LOC 3
 560: PPUSH
 561: LD_INT 50
 563: PPUSH
 564: LD_INT 39
 566: PPUSH
 567: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 571: LD_LOC 6
 575: PPUSH
 576: LD_INT 51
 578: PPUSH
 579: LD_INT 40
 581: PPUSH
 582: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 586: LD_LOC 7
 590: PPUSH
 591: LD_INT 52
 593: PPUSH
 594: LD_INT 41
 596: PPUSH
 597: CALL_OW 111
// wait ( 0 0$1 ) ;
 601: LD_INT 35
 603: PPUSH
 604: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 608: LD_LOC 5
 612: PPUSH
 613: LD_INT 50
 615: PPUSH
 616: LD_INT 40
 618: PPUSH
 619: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 623: LD_LOC 8
 627: PPUSH
 628: LD_INT 51
 630: PPUSH
 631: LD_INT 41
 633: PPUSH
 634: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 638: LD_LOC 9
 642: PPUSH
 643: LD_INT 52
 645: PPUSH
 646: LD_INT 42
 648: PPUSH
 649: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 653: LD_LOC 10
 657: PPUSH
 658: LD_INT 50
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 668: LD_LOC 3
 672: PPUSH
 673: LD_INT 65
 675: PPUSH
 676: LD_INT 25
 678: PPUSH
 679: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 683: LD_LOC 6
 687: PPUSH
 688: LD_INT 65
 690: PPUSH
 691: LD_INT 25
 693: PPUSH
 694: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 698: LD_LOC 7
 702: PPUSH
 703: LD_INT 65
 705: PPUSH
 706: LD_INT 25
 708: PPUSH
 709: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 713: LD_LOC 5
 717: PPUSH
 718: LD_INT 65
 720: PPUSH
 721: LD_INT 25
 723: PPUSH
 724: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 728: LD_LOC 8
 732: PPUSH
 733: LD_INT 65
 735: PPUSH
 736: LD_INT 25
 738: PPUSH
 739: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 743: LD_LOC 9
 747: PPUSH
 748: LD_INT 65
 750: PPUSH
 751: LD_INT 25
 753: PPUSH
 754: CALL_OW 178
// wait ( 0 0$2 ) ;
 758: LD_INT 70
 760: PPUSH
 761: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 765: LD_LOC 10
 769: PPUSH
 770: LD_STRING DX1-Off-1a
 772: PPUSH
 773: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 777: LD_LOC 11
 781: PPUSH
 782: LD_INT 75
 784: PPUSH
 785: LD_INT 36
 787: PPUSH
 788: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 792: LD_LOC 10
 796: PPUSH
 797: LD_INT 71
 799: PPUSH
 800: LD_INT 34
 802: PPUSH
 803: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 807: LD_LOC 3
 811: PPUSH
 812: LD_INT 53
 814: PPUSH
 815: LD_INT 44
 817: PPUSH
 818: CALL_OW 111
// commovexy ( joan , 52 , 43 ) ;
 822: LD_LOC 4
 826: PPUSH
 827: LD_INT 52
 829: PPUSH
 830: LD_INT 43
 832: PPUSH
 833: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 837: LD_LOC 3
 841: PPUSH
 842: LD_LOC 4
 846: PPUSH
 847: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 851: LD_LOC 4
 855: PPUSH
 856: LD_LOC 3
 860: PPUSH
 861: CALL_OW 179
// wait ( 0 0$7 ) ;
 865: LD_INT 245
 867: PPUSH
 868: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 872: LD_LOC 3
 876: PPUSH
 877: LD_STRING DX1-JMM-1
 879: PPUSH
 880: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 884: LD_LOC 4
 888: PPUSH
 889: LD_STRING DX1-Joan-1
 891: PPUSH
 892: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 896: LD_LOC 3
 900: PPUSH
 901: LD_STRING DX1-JMM-2
 903: PPUSH
 904: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 908: LD_LOC 4
 912: PPUSH
 913: LD_STRING DX1-Joan-2
 915: PPUSH
 916: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 920: LD_LOC 3
 924: PPUSH
 925: LD_STRING DX1-JMM-3
 927: PPUSH
 928: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 932: LD_LOC 4
 936: PPUSH
 937: LD_STRING DX1-Joan-3
 939: PPUSH
 940: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 944: LD_LOC 3
 948: PPUSH
 949: LD_STRING DX1-JMM-4
 951: PPUSH
 952: CALL_OW 88
// follow = true ;
 956: LD_ADDR_LOC 20
 960: PUSH
 961: LD_INT 1
 963: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
 964: LD_INT 10
 966: PPUSH
 967: CALL_OW 67
// changemissionobjectives ( M0 ) ;
 971: LD_STRING M0
 973: PPUSH
 974: CALL_OW 337
// ingame_video = false ;
 978: LD_ADDR_OWVAR 52
 982: PUSH
 983: LD_INT 0
 985: ST_TO_ADDR
// interface_hidden = false ;
 986: LD_ADDR_OWVAR 54
 990: PUSH
 991: LD_INT 0
 993: ST_TO_ADDR
// hintSpec ( Hints , 3 ) ;
 994: LD_STRING Hints
 996: PPUSH
 997: LD_INT 3
 999: PPUSH
1000: CALL_OW 338
// wait ( 0 0$1 ) ;
1004: LD_INT 35
1006: PPUSH
1007: CALL_OW 67
// hint ( Character ) ;
1011: LD_STRING Character
1013: PPUSH
1014: CALL_OW 339
// wait ( 0 0$1 ) ;
1018: LD_INT 35
1020: PPUSH
1021: CALL_OW 67
// enable ( 01 ) ;
1025: LD_INT 1
1027: ENABLE_MARKED
// enable ( 02 ) ;
1028: LD_INT 2
1030: ENABLE_MARKED
// enable ( 03 ) ;
1031: LD_INT 3
1033: ENABLE_MARKED
// enable ( 04 ) ;
1034: LD_INT 4
1036: ENABLE_MARKED
// enable ( 05 ) ;
1037: LD_INT 5
1039: ENABLE_MARKED
// end ;
1040: END
// every 3 trigger isselected ( john ) marked 01 do
1041: LD_LOC 3
1045: PPUSH
1046: CALL_OW 306
1050: IFFALSE 1076
1052: GO 1054
1054: DISABLE
// begin hint ( Selection ) ;
1055: LD_STRING Selection
1057: PPUSH
1058: CALL_OW 339
// wait ( 0 0$1 ) ;
1062: LD_INT 35
1064: PPUSH
1065: CALL_OW 67
// hint ( Commands ) ;
1069: LD_STRING Commands
1071: PPUSH
1072: CALL_OW 339
// end ;
1076: END
// every 3 + 1 trigger isselected ( others ^ allmen ^ [ joan , off ] ) marked 02 do
1077: LD_LOC 11
1081: PUSH
1082: LD_EXP 14
1086: ADD
1087: PUSH
1088: LD_LOC 4
1092: PUSH
1093: LD_LOC 10
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: ADD
1102: PPUSH
1103: CALL_OW 306
1107: IFFALSE 1119
1109: GO 1111
1111: DISABLE
// hint ( NPC ) ;
1112: LD_STRING NPC
1114: PPUSH
1115: CALL_OW 339
1119: END
// every 5 trigger isinarea ( john , vis ) marked 03 do
1120: LD_LOC 3
1124: PPUSH
1125: LD_INT 1
1127: PPUSH
1128: CALL_OW 308
1132: IFFALSE 1144
1134: GO 1136
1136: DISABLE
// hint ( Visibility ) ;
1137: LD_STRING Visibility
1139: PPUSH
1140: CALL_OW 339
1144: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1145: LD_LOC 16
1149: NOT
1150: PUSH
1151: LD_LOC 20
1155: AND
1156: IFFALSE 1449
1158: GO 1160
1160: DISABLE
1161: LD_INT 0
1163: PPUSH
1164: PPUSH
1165: PPUSH
1166: PPUSH
1167: PPUSH
1168: PPUSH
1169: PPUSH
1170: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1171: LD_ADDR_VAR 0 1
1175: PUSH
1176: LD_LOC 3
1180: PPUSH
1181: LD_LOC 4
1185: PPUSH
1186: CALL_OW 296
1190: ST_TO_ADDR
// x = getx ( john ) ;
1191: LD_ADDR_VAR 0 4
1195: PUSH
1196: LD_LOC 3
1200: PPUSH
1201: CALL_OW 250
1205: ST_TO_ADDR
// y = gety ( john ) ;
1206: LD_ADDR_VAR 0 5
1210: PUSH
1211: LD_LOC 3
1215: PPUSH
1216: CALL_OW 251
1220: ST_TO_ADDR
// tmp2 = [ ] ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: EMPTY
1227: ST_TO_ADDR
// tmp3 = [ ] ;
1228: LD_ADDR_VAR 0 3
1232: PUSH
1233: EMPTY
1234: ST_TO_ADDR
// if tmp >= 7 then
1235: LD_VAR 0 1
1239: PUSH
1240: LD_INT 7
1242: GREATEREQUAL
1243: IFFALSE 1448
// begin for dir = 0 to 5 do
1245: LD_ADDR_VAR 0 8
1249: PUSH
1250: DOUBLE
1251: LD_INT 0
1253: DEC
1254: ST_TO_ADDR
1255: LD_INT 5
1257: PUSH
1258: FOR_TO
1259: IFFALSE 1399
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1261: LD_ADDR_VAR 0 6
1265: PUSH
1266: LD_VAR 0 4
1270: PPUSH
1271: LD_VAR 0 8
1275: PPUSH
1276: LD_VAR 0 1
1280: PUSH
1281: LD_INT 2
1283: MINUS
1284: PPUSH
1285: CALL_OW 272
1289: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1290: LD_ADDR_VAR 0 7
1294: PUSH
1295: LD_VAR 0 5
1299: PPUSH
1300: LD_VAR 0 8
1304: PPUSH
1305: LD_VAR 0 1
1309: PUSH
1310: LD_INT 2
1312: MINUS
1313: PPUSH
1314: CALL_OW 273
1318: ST_TO_ADDR
// if ValidHex ( px , py ) then
1319: LD_VAR 0 6
1323: PPUSH
1324: LD_VAR 0 7
1328: PPUSH
1329: CALL_OW 488
1333: IFFALSE 1397
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1335: LD_ADDR_VAR 0 2
1339: PUSH
1340: LD_VAR 0 2
1344: PUSH
1345: LD_VAR 0 6
1349: PUSH
1350: LD_VAR 0 7
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: EMPTY
1360: LIST
1361: ADD
1362: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1363: LD_ADDR_VAR 0 3
1367: PUSH
1368: LD_VAR 0 3
1372: PUSH
1373: LD_LOC 4
1377: PPUSH
1378: LD_VAR 0 6
1382: PPUSH
1383: LD_VAR 0 7
1387: PPUSH
1388: CALL_OW 297
1392: PUSH
1393: EMPTY
1394: LIST
1395: ADD
1396: ST_TO_ADDR
// end end ;
1397: GO 1258
1399: POP
1400: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1401: LD_ADDR_VAR 0 1
1405: PUSH
1406: LD_VAR 0 2
1410: PPUSH
1411: LD_VAR 0 3
1415: PPUSH
1416: CALL_OW 79
1420: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1421: LD_LOC 4
1425: PPUSH
1426: LD_VAR 0 1
1430: PUSH
1431: LD_INT 1
1433: ARRAY
1434: PPUSH
1435: LD_VAR 0 1
1439: PUSH
1440: LD_INT 2
1442: ARRAY
1443: PPUSH
1444: CALL_OW 111
// end ; enable ;
1448: ENABLE
// end ;
1449: PPOPN 8
1451: END
// on destinationunreachable ( un ) do if un = joan then
1452: LD_VAR 0 1
1456: PUSH
1457: LD_LOC 4
1461: EQUAL
1462: IFFALSE 1493
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1464: LD_LOC 4
1468: PPUSH
1469: LD_LOC 3
1473: PPUSH
1474: CALL_OW 250
1478: PPUSH
1479: LD_LOC 3
1483: PPUSH
1484: CALL_OW 251
1488: PPUSH
1489: CALL_OW 111
1493: PPOPN 1
1495: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1496: LD_LOC 3
1500: PPUSH
1501: CALL_OW 318
1505: IFFALSE 1529
1507: GO 1509
1509: DISABLE
// begin if not killhim then
1510: LD_LOC 16
1514: NOT
1515: IFFALSE 1529
// say ( joan , DXComments-Joan-1 ) ;
1517: LD_LOC 4
1521: PPUSH
1522: LD_STRING DXComments-Joan-1
1524: PPUSH
1525: CALL_OW 88
// end ;
1529: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1530: LD_LOC 3
1534: PPUSH
1535: LD_INT 2
1537: PPUSH
1538: CALL_OW 308
1542: IFFALSE 1566
1544: GO 1546
1546: DISABLE
// begin if not killhim then
1547: LD_LOC 16
1551: NOT
1552: IFFALSE 1566
// say ( joan , DXComments-Joan-1a ) ;
1554: LD_LOC 4
1558: PPUSH
1559: LD_STRING DXComments-Joan-1a
1561: PPUSH
1562: CALL_OW 88
// end ;
1566: END
// every 0 0$1 + 1 1$10 marked 29 do
1567: GO 1569
1569: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1570: LD_LOC 3
1574: PPUSH
1575: LD_INT 3
1577: PPUSH
1578: CALL_OW 308
1582: NOT
1583: IFFALSE 1606
// begin if not killhim then
1585: LD_LOC 16
1589: NOT
1590: IFFALSE 1604
// say ( joan , DXComments-Joan-1b ) ;
1592: LD_LOC 4
1596: PPUSH
1597: LD_STRING DXComments-Joan-1b
1599: PPUSH
1600: CALL_OW 88
// end else
1604: GO 1607
// enable ;
1606: ENABLE
// end ;
1607: END
// every 0 0$0.3 trigger not killhim marked 097 do
1608: LD_LOC 16
1612: NOT
1613: IFFALSE 2153
1615: GO 1617
1617: DISABLE
// begin if joanok then
1618: LD_LOC 13
1622: IFFALSE 1817
// if getlives ( joan ) < 1000 then
1624: LD_LOC 4
1628: PPUSH
1629: CALL_OW 256
1633: PUSH
1634: LD_INT 1000
1636: LESS
1637: IFFALSE 1817
// begin if debug then
1639: LD_LOC 19
1643: IFFALSE 1663
// msg ( joan:  & getlives ( joan ) ) ;
1645: LD_STRING joan: 
1647: PUSH
1648: LD_LOC 4
1652: PPUSH
1653: CALL_OW 256
1657: STR
1658: PPUSH
1659: CALL_OW 100
// comhold ( joan ) ;
1663: LD_LOC 4
1667: PPUSH
1668: CALL_OW 140
// dialogueon ;
1672: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1676: LD_LOC 4
1680: PPUSH
1681: LD_STRING DXAttack-Joan-1
1683: PPUSH
1684: CALL_OW 88
// killhim = true ;
1688: LD_ADDR_LOC 16
1692: PUSH
1693: LD_INT 1
1695: ST_TO_ADDR
// SA_OnAttackFriends ;
1696: CALL 3465 0 0
// music_class = 1 ;
1700: LD_ADDR_OWVAR 72
1704: PUSH
1705: LD_INT 1
1707: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1708: LD_LOC 4
1712: PPUSH
1713: LD_LOC 5
1717: PPUSH
1718: CALL_OW 250
1722: PPUSH
1723: LD_LOC 5
1727: PPUSH
1728: CALL_OW 251
1732: PPUSH
1733: CALL_OW 111
// wait ( 0 0$1 ) ;
1737: LD_INT 35
1739: PPUSH
1740: CALL_OW 67
// say ( sik , DXAttack-Sik-1 ) ;
1744: LD_LOC 5
1748: PPUSH
1749: LD_STRING DXAttack-Sik-1
1751: PPUSH
1752: CALL_OW 88
// dialogueoff ;
1756: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1760: LD_LOC 1
1764: PPUSH
1765: LD_LOC 2
1769: PPUSH
1770: LD_INT 2
1772: PPUSH
1773: LD_INT 1
1775: PPUSH
1776: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1780: LD_LOC 11
1784: PUSH
1785: LD_LOC 10
1789: PUSH
1790: LD_EXP 1
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: ADD
1799: PPUSH
1800: LD_LOC 3
1804: PPUSH
1805: CALL_OW 115
// joanok = false ;
1809: LD_ADDR_LOC 13
1813: PUSH
1814: LD_INT 0
1816: ST_TO_ADDR
// end ; if oothersok then
1817: LD_LOC 14
1821: IFFALSE 2020
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1823: LD_LOC 11
1827: PUSH
1828: LD_LOC 10
1832: PUSH
1833: LD_EXP 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: ADD
1842: PPUSH
1843: CALL_OW 256
1847: PUSH
1848: LD_INT 1000
1850: LESS
1851: IFFALSE 2020
// begin if debug then
1853: LD_LOC 19
1857: IFFALSE 1886
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1859: LD_STRING others+off: 
1861: PUSH
1862: LD_LOC 11
1866: PUSH
1867: LD_LOC 10
1871: PUSH
1872: EMPTY
1873: LIST
1874: ADD
1875: PPUSH
1876: CALL_OW 256
1880: STR
1881: PPUSH
1882: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1886: LD_LOC 11
1890: PUSH
1891: LD_LOC 10
1895: PUSH
1896: EMPTY
1897: LIST
1898: ADD
1899: PPUSH
1900: CALL_OW 140
// dialogueon ;
1904: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1908: LD_LOC 4
1912: PPUSH
1913: LD_STRING DXAttack-Joan-1a
1915: PPUSH
1916: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1920: LD_INT 24
1922: PPUSH
1923: CALL_OW 67
// killhim = true ;
1927: LD_ADDR_LOC 16
1931: PUSH
1932: LD_INT 1
1934: ST_TO_ADDR
// SA_OnAttackFriends ;
1935: CALL 3465 0 0
// music_class = 1 ;
1939: LD_ADDR_OWVAR 72
1943: PUSH
1944: LD_INT 1
1946: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1947: LD_LOC 5
1951: PPUSH
1952: LD_STRING DXAttack-Sik-1
1954: PPUSH
1955: CALL_OW 88
// dialogueoff ;
1959: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1963: LD_LOC 1
1967: PPUSH
1968: LD_LOC 2
1972: PPUSH
1973: LD_INT 2
1975: PPUSH
1976: LD_INT 1
1978: PPUSH
1979: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1983: LD_LOC 11
1987: PUSH
1988: LD_LOC 10
1992: PUSH
1993: LD_EXP 1
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: ADD
2002: PPUSH
2003: LD_LOC 3
2007: PPUSH
2008: CALL_OW 115
// oothersok = false ;
2012: LD_ADDR_LOC 14
2016: PUSH
2017: LD_INT 0
2019: ST_TO_ADDR
// end ; if buildingsok then
2020: LD_LOC 15
2024: IFFALSE 2145
// if getlives ( budovy ) < 1000 then
2026: LD_LOC 12
2030: PPUSH
2031: CALL_OW 256
2035: PUSH
2036: LD_INT 1000
2038: LESS
2039: IFFALSE 2145
// begin if debug then
2041: LD_LOC 19
2045: IFFALSE 2065
// msg ( budovy:  & getlives ( budovy ) ) ;
2047: LD_STRING budovy: 
2049: PUSH
2050: LD_LOC 12
2054: PPUSH
2055: CALL_OW 256
2059: STR
2060: PPUSH
2061: CALL_OW 100
// dialogueon ;
2065: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2069: LD_LOC 4
2073: PPUSH
2074: LD_STRING DXAttack-Joan-1b
2076: PPUSH
2077: CALL_OW 88
// dialogueoff ;
2081: CALL_OW 7
// follow = false ;
2085: LD_ADDR_LOC 20
2089: PUSH
2090: LD_INT 0
2092: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2093: LD_LOC 4
2097: PPUSH
2098: LD_LOC 5
2102: PPUSH
2103: CALL_OW 250
2107: PPUSH
2108: LD_LOC 5
2112: PPUSH
2113: CALL_OW 251
2117: PPUSH
2118: CALL_OW 111
// buildingsok = false ;
2122: LD_ADDR_LOC 15
2126: PUSH
2127: LD_INT 0
2129: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2130: LD_ADDR_LOC 17
2134: PUSH
2135: LD_LOC 12
2139: PPUSH
2140: CALL_OW 256
2144: ST_TO_ADDR
// end ; if not killhim then
2145: LD_LOC 16
2149: NOT
2150: IFFALSE 2153
// enable ;
2152: ENABLE
// end ;
2153: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2154: LD_LOC 15
2158: NOT
2159: PUSH
2160: LD_LOC 16
2164: NOT
2165: AND
2166: IFFALSE 2293
2168: GO 2170
2170: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2171: LD_LOC 17
2175: PUSH
2176: LD_LOC 12
2180: PPUSH
2181: CALL_OW 256
2185: MINUS
2186: PUSH
2187: LD_INT 7
2189: GREATER
2190: IFFALSE 2292
// begin disable ( 097 ) ;
2192: LD_INT 97
2194: DISABLE_MARKED
// disable_07 = true ;
2195: LD_ADDR_LOC 18
2199: PUSH
2200: LD_INT 1
2202: ST_TO_ADDR
// dialogueon ;
2203: CALL_OW 6
// music_class = 1 ;
2207: LD_ADDR_OWVAR 72
2211: PUSH
2212: LD_INT 1
2214: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2215: LD_LOC 5
2219: PPUSH
2220: LD_STRING DXAttack-Sik-1
2222: PPUSH
2223: CALL_OW 88
// dialogueoff ;
2227: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2231: LD_LOC 1
2235: PPUSH
2236: LD_LOC 2
2240: PPUSH
2241: LD_INT 2
2243: PPUSH
2244: LD_INT 1
2246: PPUSH
2247: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2251: LD_LOC 11
2255: PUSH
2256: LD_LOC 10
2260: PUSH
2261: LD_EXP 1
2265: PUSH
2266: EMPTY
2267: LIST
2268: LIST
2269: ADD
2270: PPUSH
2271: LD_LOC 3
2275: PPUSH
2276: CALL_OW 115
// killhim = true ;
2280: LD_ADDR_LOC 16
2284: PUSH
2285: LD_INT 1
2287: ST_TO_ADDR
// SA_OnAttackFriends ;
2288: CALL 3465 0 0
// end ; enable ;
2292: ENABLE
// end ;
2293: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2294: LD_LOC 3
2298: PPUSH
2299: CALL_OW 310
2303: PUSH
2304: LD_INT 27
2306: EQUAL
2307: PUSH
2308: LD_LOC 16
2312: NOT
2313: AND
2314: IFFALSE 2419
2316: GO 2318
2318: DISABLE
// begin disable ( 097 ) ;
2319: LD_INT 97
2321: DISABLE_MARKED
// disable_07 = true ;
2322: LD_ADDR_LOC 18
2326: PUSH
2327: LD_INT 1
2329: ST_TO_ADDR
// dialogueon ;
2330: CALL_OW 6
// music_class = 1 ;
2334: LD_ADDR_OWVAR 72
2338: PUSH
2339: LD_INT 1
2341: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2342: LD_LOC 5
2346: PPUSH
2347: LD_STRING DXAttack-Sik-1
2349: PPUSH
2350: CALL_OW 88
// dialogueoff ;
2354: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2358: LD_LOC 1
2362: PPUSH
2363: LD_LOC 2
2367: PPUSH
2368: LD_INT 2
2370: PPUSH
2371: LD_INT 1
2373: PPUSH
2374: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2378: LD_LOC 11
2382: PUSH
2383: LD_LOC 10
2387: PUSH
2388: LD_EXP 1
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: ADD
2397: PPUSH
2398: LD_LOC 3
2402: PPUSH
2403: CALL_OW 115
// killhim = true ;
2407: LD_ADDR_LOC 16
2411: PUSH
2412: LD_INT 1
2414: ST_TO_ADDR
// SA_OnAttackFriends ;
2415: CALL 3465 0 0
// end ;
2419: END
// on unitgoestored ( un ) do if un = john then
2420: LD_VAR 0 1
2424: PUSH
2425: LD_LOC 3
2429: EQUAL
2430: IFFALSE 2521
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2432: LD_LOC 10
2436: PPUSH
2437: LD_LOC 3
2441: PPUSH
2442: CALL_OW 250
2446: PPUSH
2447: LD_LOC 3
2451: PPUSH
2452: CALL_OW 251
2456: PPUSH
2457: CALL_OW 111
// wait ( 0 0$1 ) ;
2461: LD_INT 35
2463: PPUSH
2464: CALL_OW 67
// InGameOn ;
2468: CALL_OW 8
// SetLives ( john , 240 ) ;
2472: LD_LOC 3
2476: PPUSH
2477: LD_INT 240
2479: PPUSH
2480: CALL_OW 234
// SetSide ( john , 8 ) ;
2484: LD_LOC 3
2488: PPUSH
2489: LD_INT 8
2491: PPUSH
2492: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2496: LD_LOC 10
2500: PPUSH
2501: LD_STRING DXAttack-Off-1
2503: PPUSH
2504: CALL_OW 88
// InGameOff ;
2508: CALL_OW 9
// youlost ( Dissmiss ) ;
2512: LD_STRING Dissmiss
2514: PPUSH
2515: CALL_OW 104
// end else
2519: GO 2649
// if not disable_07 then
2521: LD_LOC 18
2525: NOT
2526: IFFALSE 2649
// if ( not killhim ) then
2528: LD_LOC 16
2532: NOT
2533: IFFALSE 2649
// if ( gettype ( un ) = unit_human ) then
2535: LD_VAR 0 1
2539: PPUSH
2540: CALL_OW 247
2544: PUSH
2545: LD_INT 1
2547: EQUAL
2548: IFFALSE 2649
// begin disable ( 06 ) ;
2550: LD_INT 6
2552: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2553: LD_INT 18
2555: PPUSH
2556: CALL_OW 67
// dialogueon ;
2560: CALL_OW 6
// music_class = 1 ;
2564: LD_ADDR_OWVAR 72
2568: PUSH
2569: LD_INT 1
2571: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2572: LD_LOC 5
2576: PPUSH
2577: LD_STRING DXAttack-Sik-1
2579: PPUSH
2580: CALL_OW 88
// dialogueoff ;
2584: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2588: LD_LOC 1
2592: PPUSH
2593: LD_LOC 2
2597: PPUSH
2598: LD_INT 2
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2608: LD_LOC 11
2612: PUSH
2613: LD_LOC 10
2617: PUSH
2618: LD_EXP 1
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: ADD
2627: PPUSH
2628: LD_LOC 3
2632: PPUSH
2633: CALL_OW 115
// killhim = true ;
2637: LD_ADDR_LOC 16
2641: PUSH
2642: LD_INT 1
2644: ST_TO_ADDR
// SA_OnAttackFriends ;
2645: CALL 3465 0 0
// end ;
2649: PPOPN 1
2651: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2652: LD_LOC 3
2656: PPUSH
2657: LD_INT 4
2659: PPUSH
2660: CALL_OW 308
2664: PUSH
2665: LD_LOC 16
2669: NOT
2670: AND
2671: IFFALSE 3344
2673: GO 2675
2675: DISABLE
// begin follow = false ;
2676: LD_ADDR_LOC 20
2680: PUSH
2681: LD_INT 0
2683: ST_TO_ADDR
// centernowonunits ( [ eon ] ) ;
2684: LD_INT 14
2686: PUSH
2687: EMPTY
2688: LIST
2689: PPUSH
2690: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2694: LD_LOC 3
2698: PPUSH
2699: LD_INT 75
2701: PPUSH
2702: LD_INT 36
2704: PPUSH
2705: CALL_OW 111
// InGameOn ;
2709: CALL_OW 8
// say ( off , DXReady-Off-1 ) ;
2713: LD_LOC 10
2717: PPUSH
2718: LD_STRING DXReady-Off-1
2720: PPUSH
2721: CALL_OW 88
// say ( sik , DXReady-Sik-1 ) ;
2725: LD_LOC 5
2729: PPUSH
2730: LD_STRING DXReady-Sik-1
2732: PPUSH
2733: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2737: LD_STRING DXReady-All-1
2739: PPUSH
2740: CALL_OW 96
// wait ( 0 0$2 ) ;
2744: LD_INT 70
2746: PPUSH
2747: CALL_OW 67
// say ( lucy , DXReady-Don-1 ) ;
2751: LD_LOC 6
2755: PPUSH
2756: LD_STRING DXReady-Don-1
2758: PPUSH
2759: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2763: LD_STRING DXReady-All-2
2765: PPUSH
2766: CALL_OW 96
// wait ( 0 0$2 ) ;
2770: LD_INT 70
2772: PPUSH
2773: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2777: LD_EXP 1
2781: PPUSH
2782: LD_STRING DXReady-Off2-1
2784: PPUSH
2785: CALL_OW 88
// wait ( 0 0$1 ) ;
2789: LD_INT 35
2791: PPUSH
2792: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2796: LD_EXP 1
2800: PPUSH
2801: LD_STRING DXReady-Off2-2
2803: PPUSH
2804: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2808: LD_LOC 10
2812: PPUSH
2813: LD_INT 72
2815: PPUSH
2816: LD_INT 29
2818: PPUSH
2819: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2823: LD_EXP 1
2827: PPUSH
2828: LD_INT 73
2830: PPUSH
2831: LD_INT 31
2833: PPUSH
2834: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2838: LD_LOC 3
2842: PPUSH
2843: LD_INT 67
2845: PPUSH
2846: LD_INT 28
2848: PPUSH
2849: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2853: LD_LOC 6
2857: PPUSH
2858: LD_INT 68
2860: PPUSH
2861: LD_INT 30
2863: PPUSH
2864: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2868: LD_LOC 7
2872: PPUSH
2873: LD_INT 69
2875: PPUSH
2876: LD_INT 32
2878: PPUSH
2879: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2883: LD_LOC 5
2887: PPUSH
2888: LD_INT 66
2890: PPUSH
2891: LD_INT 28
2893: PPUSH
2894: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2898: LD_LOC 8
2902: PPUSH
2903: LD_INT 67
2905: PPUSH
2906: LD_INT 30
2908: PPUSH
2909: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2913: LD_LOC 9
2917: PPUSH
2918: LD_INT 68
2920: PPUSH
2921: LD_INT 32
2923: PPUSH
2924: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2928: LD_LOC 10
2932: PPUSH
2933: LD_INT 49
2935: PPUSH
2936: LD_INT 27
2938: PPUSH
2939: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2943: LD_EXP 1
2947: PPUSH
2948: LD_INT 49
2950: PPUSH
2951: LD_INT 27
2953: PPUSH
2954: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
2958: LD_LOC 3
2962: PPUSH
2963: LD_INT 85
2965: PPUSH
2966: LD_INT 33
2968: PPUSH
2969: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
2973: LD_LOC 6
2977: PPUSH
2978: LD_INT 85
2980: PPUSH
2981: LD_INT 33
2983: PPUSH
2984: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
2988: LD_LOC 7
2992: PPUSH
2993: LD_INT 85
2995: PPUSH
2996: LD_INT 33
2998: PPUSH
2999: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3003: LD_LOC 5
3007: PPUSH
3008: LD_INT 85
3010: PPUSH
3011: LD_INT 33
3013: PPUSH
3014: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3018: LD_LOC 8
3022: PPUSH
3023: LD_INT 85
3025: PPUSH
3026: LD_INT 33
3028: PPUSH
3029: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3033: LD_LOC 9
3037: PPUSH
3038: LD_INT 85
3040: PPUSH
3041: LD_INT 33
3043: PPUSH
3044: CALL_OW 178
// wait ( 0 0$9 ) ;
3048: LD_INT 315
3050: PPUSH
3051: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3055: LD_EXP 1
3059: PPUSH
3060: LD_STRING DXReady-Off2-3
3062: PPUSH
3063: CALL_OW 88
// wait ( 0 0$1 ) ;
3067: LD_INT 35
3069: PPUSH
3070: CALL_OW 67
// case query ( QQuit ) of 1 :
3074: LD_STRING QQuit
3076: PPUSH
3077: CALL_OW 97
3081: PUSH
3082: LD_INT 1
3084: DOUBLE
3085: EQUAL
3086: IFTRUE 3090
3088: GO 3163
3090: POP
// begin SA_OnNotEonEnter ;
3091: CALL 3495 0 0
// say ( off2 , DQrQuit#1-Off2-1 ) ;
3095: LD_EXP 1
3099: PPUSH
3100: LD_STRING DQrQuit#1-Off2-1
3102: PPUSH
3103: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3107: LD_LOC 3
3111: PPUSH
3112: LD_STRING DQrQuit#1-JMM-1a
3114: PPUSH
3115: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3119: LD_EXP 1
3123: PPUSH
3124: LD_STRING DQrQuit#1-Off2-2
3126: PPUSH
3127: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3131: LD_LOC 3
3135: PPUSH
3136: LD_INT 73
3138: PPUSH
3139: LD_INT 49
3141: PPUSH
3142: CALL_OW 111
// wait ( 0 0$3 ) ;
3146: LD_INT 105
3148: PPUSH
3149: CALL_OW 67
// ingameoff ;
3153: CALL_OW 9
// YouDidSomethingExtraordinary ;
3157: CALL_OW 105
// end ; 2 :
3161: GO 3344
3163: LD_INT 2
3165: DOUBLE
3166: EQUAL
3167: IFTRUE 3171
3169: GO 3343
3171: POP
// begin SA_OnEonEnter ;
3172: CALL 3480 0 0
// disable ( 29 ) ;
3176: LD_INT 29
3178: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3179: LD_INT 35
3181: PPUSH
3182: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3186: LD_EXP 1
3190: PPUSH
3191: LD_STRING DXReady-Off2-4
3193: PPUSH
3194: CALL_OW 88
// wait ( 0 0$1 ) ;
3198: LD_INT 35
3200: PPUSH
3201: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3205: LD_LOC 10
3209: PPUSH
3210: LD_STRING DXReady-Off-2
3212: PPUSH
3213: CALL_OW 88
// comenterunit ( will , eon ) ;
3217: LD_LOC 8
3221: PPUSH
3222: LD_INT 14
3224: PPUSH
3225: CALL_OW 120
// wait ( 0 0$3 ) ;
3229: LD_INT 105
3231: PPUSH
3232: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3236: LD_LOC 10
3240: PPUSH
3241: LD_STRING DXReady-Off-3
3243: PPUSH
3244: CALL_OW 88
// comenterunit ( sik , eon ) ;
3248: LD_LOC 5
3252: PPUSH
3253: LD_INT 14
3255: PPUSH
3256: CALL_OW 120
// wait ( 0 0$3 ) ;
3260: LD_INT 105
3262: PPUSH
3263: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3267: LD_LOC 10
3271: PPUSH
3272: LD_STRING DXReady-Off-4
3274: PPUSH
3275: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3279: LD_LOC 6
3283: PPUSH
3284: LD_INT 14
3286: PPUSH
3287: CALL_OW 120
// wait ( 0 0$3 ) ;
3291: LD_INT 105
3293: PPUSH
3294: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3298: LD_LOC 10
3302: PPUSH
3303: LD_STRING DXReady-Off-5
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3317: LD_LOC 3
3321: PPUSH
3322: LD_STRING DQrQuit#2-JMM-1
3324: PPUSH
3325: CALL_OW 88
// comenterunit ( john , eon ) ;
3329: LD_LOC 3
3333: PPUSH
3334: LD_INT 14
3336: PPUSH
3337: CALL_OW 120
// end ; end ;
3341: GO 3344
3343: POP
// end ;
3344: END
// on enterbuilding ( b , un ) do begin if b = eon then
3345: LD_VAR 0 1
3349: PUSH
3350: LD_INT 14
3352: EQUAL
3353: IFFALSE 3462
// case un of john :
3355: LD_VAR 0 2
3359: PUSH
3360: LD_LOC 3
3364: DOUBLE
3365: EQUAL
3366: IFTRUE 3370
3368: GO 3452
3370: POP
// if not killhim then
3371: LD_LOC 16
3375: NOT
3376: IFFALSE 3409
// begin wait ( 0 0$1.3 ) ;
3378: LD_INT 46
3380: PPUSH
3381: CALL_OW 67
// savecharacters ( john , JMM ) ;
3385: LD_LOC 3
3389: PPUSH
3390: LD_STRING JMM
3392: PPUSH
3393: CALL_OW 38
// changemap ( 1 , %_cont ) ;
3397: LD_STRING 1
3399: PPUSH
3400: LD_STRING %_cont
3402: PPUSH
3403: CALL_OW 340
// end else
3407: GO 3450
// begin placeunitxy ( john , 76 , 34 , false ) ;
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 76
3416: PPUSH
3417: LD_INT 34
3419: PPUSH
3420: LD_INT 0
3422: PPUSH
3423: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3427: LD_LOC 11
3431: PUSH
3432: LD_LOC 10
3436: PUSH
3437: EMPTY
3438: LIST
3439: ADD
3440: PPUSH
3441: LD_LOC 3
3445: PPUSH
3446: CALL_OW 115
// end ; else
3450: GO 3462
3452: POP
// RemoveUnit ( un ) ; end ;
3453: LD_VAR 0 2
3457: PPUSH
3458: CALL_OW 64
// end ; end_of_file
3462: PPOPN 2
3464: END
// export function SA_OnAttackFriends ; begin
3465: LD_INT 0
3467: PPUSH
// SetAchievement ( ACH_MAD ) ;
3468: LD_STRING ACH_MAD
3470: PPUSH
3471: CALL_OW 543
// end ;
3475: LD_VAR 0 1
3479: RET
// export function SA_OnEonEnter ; begin
3480: LD_INT 0
3482: PPUSH
// SetAchievement ( ACH_EON ) ;
3483: LD_STRING ACH_EON
3485: PPUSH
3486: CALL_OW 543
// end ;
3490: LD_VAR 0 1
3494: RET
// export function SA_OnNotEonEnter ; begin
3495: LD_INT 0
3497: PPUSH
// SetAchievement ( ACH_CF ) ;
3498: LD_STRING ACH_CF
3500: PPUSH
3501: CALL_OW 543
// end ; end_of_file
3505: LD_VAR 0 1
3509: RET
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3510: LD_INT 0
3512: PPUSH
// uc_side := 4 ;
3513: LD_ADDR_OWVAR 20
3517: PUSH
3518: LD_INT 4
3520: ST_TO_ADDR
// uc_nation := nation_american ;
3521: LD_ADDR_OWVAR 21
3525: PUSH
3526: LD_INT 1
3528: ST_TO_ADDR
// hc_importance = 50 ;
3529: LD_ADDR_OWVAR 32
3533: PUSH
3534: LD_INT 50
3536: ST_TO_ADDR
// hc_sex = sex_male ;
3537: LD_ADDR_OWVAR 27
3541: PUSH
3542: LD_INT 1
3544: ST_TO_ADDR
// hc_class = 1 ;
3545: LD_ADDR_OWVAR 28
3549: PUSH
3550: LD_INT 1
3552: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3553: LD_ADDR_OWVAR 30
3557: PUSH
3558: LD_INT 7
3560: PUSH
3561: LD_INT 3
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3576: LD_ADDR_OWVAR 31
3580: PUSH
3581: LD_INT 7
3583: PUSH
3584: LD_INT 3
3586: PUSH
3587: LD_INT 2
3589: PUSH
3590: LD_INT 2
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3599: LD_ADDR_OWVAR 29
3603: PUSH
3604: LD_INT 11
3606: PUSH
3607: LD_INT 11
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: ST_TO_ADDR
// hc_name := Officer2 ;
3614: LD_ADDR_OWVAR 26
3618: PUSH
3619: LD_STRING Officer2
3621: ST_TO_ADDR
// hc_gallery := us_old ;
3622: LD_ADDR_OWVAR 33
3626: PUSH
3627: LD_STRING us_old
3629: ST_TO_ADDR
// hc_face_number := 6 ;
3630: LD_ADDR_OWVAR 34
3634: PUSH
3635: LD_INT 6
3637: ST_TO_ADDR
// off2 := CreateHuman ;
3638: LD_ADDR_EXP 1
3642: PUSH
3643: CALL_OW 44
3647: ST_TO_ADDR
// end ;
3648: LD_VAR 0 1
3652: RET
// export function CreatePersonnel ; begin
3653: LD_INT 0
3655: PPUSH
// uc_side := 4 ;
3656: LD_ADDR_OWVAR 20
3660: PUSH
3661: LD_INT 4
3663: ST_TO_ADDR
// uc_nation := nation_american ;
3664: LD_ADDR_OWVAR 21
3668: PUSH
3669: LD_INT 1
3671: ST_TO_ADDR
// hc_importance = 10 ;
3672: LD_ADDR_OWVAR 32
3676: PUSH
3677: LD_INT 10
3679: ST_TO_ADDR
// hc_name :=  ;
3680: LD_ADDR_OWVAR 26
3684: PUSH
3685: LD_STRING 
3687: ST_TO_ADDR
// hc_gallery :=  ;
3688: LD_ADDR_OWVAR 33
3692: PUSH
3693: LD_STRING 
3695: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3696: LD_INT 1
3698: PPUSH
3699: LD_INT 2
3701: NEG
3702: PPUSH
3703: CALL_OW 382
// engi1 := CreateHuman ;
3707: LD_ADDR_EXP 2
3711: PUSH
3712: CALL_OW 44
3716: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3717: LD_INT 1
3719: PPUSH
3720: LD_INT 2
3722: NEG
3723: PPUSH
3724: CALL_OW 382
// engi2 := CreateHuman ;
3728: LD_ADDR_EXP 3
3732: PUSH
3733: CALL_OW 44
3737: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
3738: LD_EXP 2
3742: PPUSH
3743: LD_INT 10
3745: PPUSH
3746: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
3750: LD_EXP 3
3754: PPUSH
3755: LD_INT 10
3757: PPUSH
3758: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
3762: LD_INT 1
3764: PPUSH
3765: LD_INT 1
3767: NEG
3768: PPUSH
3769: CALL_OW 383
// truckdriver := CreateHuman ;
3773: LD_ADDR_EXP 4
3777: PUSH
3778: CALL_OW 44
3782: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
3783: LD_EXP 4
3787: PPUSH
3788: LD_INT 27
3790: PPUSH
3791: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
3795: LD_INT 27
3797: PPUSH
3798: LD_INT 1
3800: PPUSH
3801: LD_INT 100
3803: PPUSH
3804: CALL_OW 290
// PrepareMechanic ( 1 , - 3 ) ;
3808: LD_INT 1
3810: PPUSH
3811: LD_INT 3
3813: NEG
3814: PPUSH
3815: CALL_OW 383
// tankdriver := CreateHuman ;
3819: LD_ADDR_EXP 5
3823: PUSH
3824: CALL_OW 44
3828: ST_TO_ADDR
// PlaceHumanInUnit ( tankdriver , tank1 ) ;
3829: LD_EXP 5
3833: PPUSH
3834: LD_INT 19
3836: PPUSH
3837: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
3841: LD_INT 1
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: CALL_OW 381
// hc_class = class_sniper ;
3851: LD_ADDR_OWVAR 28
3855: PUSH
3856: LD_INT 5
3858: ST_TO_ADDR
// snip1 := CreateHuman ;
3859: LD_ADDR_EXP 6
3863: PUSH
3864: CALL_OW 44
3868: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
3869: LD_INT 2
3871: PPUSH
3872: LD_INT 3
3874: PPUSH
3875: CALL_OW 381
// hc_class = class_sniper ;
3879: LD_ADDR_OWVAR 28
3883: PUSH
3884: LD_INT 5
3886: ST_TO_ADDR
// snip2 := CreateHuman ;
3887: LD_ADDR_EXP 7
3891: PUSH
3892: CALL_OW 44
3896: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
3897: LD_EXP 6
3901: PPUSH
3902: LD_INT 47
3904: PPUSH
3905: LD_INT 17
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
3915: LD_EXP 7
3919: PPUSH
3920: LD_INT 29
3922: PPUSH
3923: LD_INT 31
3925: PPUSH
3926: LD_INT 0
3928: PPUSH
3929: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
3933: LD_EXP 6
3937: PUSH
3938: LD_EXP 7
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: PPUSH
3947: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
3951: LD_INT 1
3953: PPUSH
3954: LD_INT 3
3956: PPUSH
3957: CALL_OW 381
// sol1 := CreateHuman ;
3961: LD_ADDR_EXP 8
3965: PUSH
3966: CALL_OW 44
3970: ST_TO_ADDR
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
3971: LD_EXP 8
3975: PPUSH
3976: LD_INT 15
3978: PPUSH
3979: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
3983: LD_INT 1
3985: PPUSH
3986: LD_INT 3
3988: PPUSH
3989: CALL_OW 381
// sol2 := CreateHuman ;
3993: LD_ADDR_EXP 9
3997: PUSH
3998: CALL_OW 44
4002: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 3
4008: PPUSH
4009: CALL_OW 381
// sol3 := CreateHuman ;
4013: LD_ADDR_EXP 10
4017: PUSH
4018: CALL_OW 44
4022: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4023: LD_EXP 9
4027: PPUSH
4028: LD_INT 40
4030: PPUSH
4031: LD_INT 42
4033: PPUSH
4034: LD_INT 0
4036: PPUSH
4037: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4041: LD_EXP 10
4045: PPUSH
4046: LD_INT 53
4048: PPUSH
4049: LD_INT 34
4051: PPUSH
4052: LD_INT 0
4054: PPUSH
4055: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4059: LD_INT 1
4061: PPUSH
4062: LD_INT 3
4064: PPUSH
4065: CALL_OW 381
// pat1 := CreateHuman ;
4069: LD_ADDR_EXP 11
4073: PUSH
4074: CALL_OW 44
4078: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4079: LD_INT 1
4081: PPUSH
4082: LD_INT 3
4084: PPUSH
4085: CALL_OW 381
// pat2 := CreateHuman ;
4089: LD_ADDR_EXP 12
4093: PUSH
4094: CALL_OW 44
4098: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4099: LD_EXP 11
4103: PPUSH
4104: LD_INT 29
4106: PPUSH
4107: LD_INT 6
4109: PPUSH
4110: LD_INT 0
4112: PPUSH
4113: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4117: LD_EXP 12
4121: PPUSH
4122: LD_INT 30
4124: PPUSH
4125: LD_INT 7
4127: PPUSH
4128: LD_INT 0
4130: PPUSH
4131: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4135: LD_ADDR_EXP 13
4139: PUSH
4140: LD_EXP 11
4144: PUSH
4145: LD_EXP 12
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , tank1 , truckdriver ] ;
4154: LD_ADDR_EXP 14
4158: PUSH
4159: LD_EXP 2
4163: PUSH
4164: LD_EXP 3
4168: PUSH
4169: LD_EXP 8
4173: PUSH
4174: LD_EXP 9
4178: PUSH
4179: LD_EXP 10
4183: PUSH
4184: LD_EXP 6
4188: PUSH
4189: LD_EXP 7
4193: PUSH
4194: LD_EXP 13
4198: PUSH
4199: LD_INT 19
4201: PUSH
4202: LD_EXP 4
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: ST_TO_ADDR
// end ;
4219: LD_VAR 0 1
4223: RET
// every 0 0$1 do
4224: GO 4226
4226: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4227: LD_EXP 13
4231: PPUSH
4232: LD_INT 64
4234: PPUSH
4235: LD_INT 22
4237: PPUSH
4238: CALL_OW 171
// wait ( 0 0$25 ) ;
4242: LD_INT 875
4244: PPUSH
4245: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4249: LD_EXP 13
4253: PPUSH
4254: LD_INT 30
4256: PPUSH
4257: LD_INT 8
4259: PPUSH
4260: CALL_OW 171
// wait ( 0 0$25 ) ;
4264: LD_INT 875
4266: PPUSH
4267: CALL_OW 67
// enable ;
4271: ENABLE
// end ;
4272: END
// every 0 0$1 do
4273: GO 4275
4275: DISABLE
// begin SetLives ( truck , 550 ) ;
4276: LD_INT 27
4278: PPUSH
4279: LD_INT 550
4281: PPUSH
4282: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4286: LD_INT 27
4288: PPUSH
4289: LD_INT 42
4291: PPUSH
4292: LD_INT 35
4294: PPUSH
4295: CALL_OW 111
// AddComUnload ( truck ) ;
4299: LD_INT 27
4301: PPUSH
4302: CALL_OW 219
// Wait ( 0 0$8 ) ;
4306: LD_INT 280
4308: PPUSH
4309: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4313: LD_EXP 2
4317: PUSH
4318: LD_EXP 3
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PPUSH
4327: LD_INT 45
4329: PPUSH
4330: LD_INT 36
4332: PPUSH
4333: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4337: LD_EXP 4
4341: PPUSH
4342: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4346: LD_EXP 4
4350: PPUSH
4351: LD_INT 40
4353: PPUSH
4354: LD_INT 33
4356: PPUSH
4357: CALL_OW 171
// AddComRepairVehicle ( truckdriver , truck ) ;
4361: LD_EXP 4
4365: PPUSH
4366: LD_INT 27
4368: PPUSH
4369: CALL_OW 189
// Wait ( 0 0$15 ) ;
4373: LD_INT 525
4375: PPUSH
4376: CALL_OW 67
// SetLives ( truck , 1000 ) ;
4380: LD_INT 27
4382: PPUSH
4383: LD_INT 1000
4385: PPUSH
4386: CALL_OW 234
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4390: LD_EXP 2
4394: PUSH
4395: LD_EXP 3
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PPUSH
4404: LD_INT 10
4406: PPUSH
4407: CALL_OW 120
// ComEnterUnit ( truckdriver , truck ) ;
4411: LD_EXP 4
4415: PPUSH
4416: LD_INT 27
4418: PPUSH
4419: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4423: LD_EXP 4
4427: PPUSH
4428: LD_INT 74
4430: PPUSH
4431: LD_INT 52
4433: PPUSH
4434: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4438: LD_EXP 4
4442: PPUSH
4443: LD_INT 90
4445: PPUSH
4446: LD_INT 58
4448: PPUSH
4449: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4453: LD_EXP 4
4457: PPUSH
4458: LD_INT 98
4460: PPUSH
4461: LD_INT 61
4463: PPUSH
4464: CALL_OW 171
// end ;
4468: END
// every 0 0$1 trigger IsInArea ( truck , ExitArea ) do
4469: LD_INT 27
4471: PPUSH
4472: LD_INT 7
4474: PPUSH
4475: CALL_OW 308
4479: IFFALSE 4500
4481: GO 4483
4483: DISABLE
// begin RemoveUnit ( truckdriver ) ;
4484: LD_EXP 4
4488: PPUSH
4489: CALL_OW 64
// RemoveUnit ( truck ) ;
4493: LD_INT 27
4495: PPUSH
4496: CALL_OW 64
// end ;
4500: END
