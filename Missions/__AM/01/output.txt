// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3781 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3638 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 43 , 39 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 43
 322: PPUSH
 323: LD_INT 39
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// ComMoveXY ( off , 49 , 41 ) ;
 511: LD_LOC 10
 515: PPUSH
 516: LD_INT 49
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// wait ( 0 0$3 ) ;
 526: LD_INT 105
 528: PPUSH
 529: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 533: LD_LOC 10
 537: PPUSH
 538: LD_STRING DX1-Off-1
 540: PPUSH
 541: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 545: LD_LOC 10
 549: PPUSH
 550: LD_INT 51
 552: PPUSH
 553: LD_INT 38
 555: PPUSH
 556: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 560: LD_LOC 3
 564: PPUSH
 565: LD_INT 50
 567: PPUSH
 568: LD_INT 39
 570: PPUSH
 571: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 575: LD_LOC 6
 579: PPUSH
 580: LD_INT 51
 582: PPUSH
 583: LD_INT 40
 585: PPUSH
 586: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 590: LD_LOC 7
 594: PPUSH
 595: LD_INT 52
 597: PPUSH
 598: LD_INT 41
 600: PPUSH
 601: CALL_OW 111
// wait ( 0 0$1 ) ;
 605: LD_INT 35
 607: PPUSH
 608: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 612: LD_LOC 5
 616: PPUSH
 617: LD_INT 50
 619: PPUSH
 620: LD_INT 40
 622: PPUSH
 623: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 627: LD_LOC 8
 631: PPUSH
 632: LD_INT 51
 634: PPUSH
 635: LD_INT 41
 637: PPUSH
 638: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 642: LD_LOC 9
 646: PPUSH
 647: LD_INT 52
 649: PPUSH
 650: LD_INT 42
 652: PPUSH
 653: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 657: LD_LOC 10
 661: PPUSH
 662: LD_INT 50
 664: PPUSH
 665: LD_INT 47
 667: PPUSH
 668: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 672: LD_LOC 3
 676: PPUSH
 677: LD_INT 65
 679: PPUSH
 680: LD_INT 25
 682: PPUSH
 683: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 687: LD_LOC 6
 691: PPUSH
 692: LD_INT 65
 694: PPUSH
 695: LD_INT 25
 697: PPUSH
 698: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 702: LD_LOC 7
 706: PPUSH
 707: LD_INT 65
 709: PPUSH
 710: LD_INT 25
 712: PPUSH
 713: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 717: LD_LOC 5
 721: PPUSH
 722: LD_INT 65
 724: PPUSH
 725: LD_INT 25
 727: PPUSH
 728: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 732: LD_LOC 8
 736: PPUSH
 737: LD_INT 65
 739: PPUSH
 740: LD_INT 25
 742: PPUSH
 743: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 747: LD_LOC 9
 751: PPUSH
 752: LD_INT 65
 754: PPUSH
 755: LD_INT 25
 757: PPUSH
 758: CALL_OW 178
// wait ( 0 0$2 ) ;
 762: LD_INT 70
 764: PPUSH
 765: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 769: LD_LOC 10
 773: PPUSH
 774: LD_STRING DX1-Off-1a
 776: PPUSH
 777: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 781: LD_LOC 11
 785: PPUSH
 786: LD_INT 75
 788: PPUSH
 789: LD_INT 36
 791: PPUSH
 792: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 796: LD_LOC 10
 800: PPUSH
 801: LD_INT 71
 803: PPUSH
 804: LD_INT 34
 806: PPUSH
 807: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 811: LD_LOC 3
 815: PPUSH
 816: LD_INT 53
 818: PPUSH
 819: LD_INT 44
 821: PPUSH
 822: CALL_OW 111
// commovexy ( joan , 52 , 43 ) ;
 826: LD_LOC 4
 830: PPUSH
 831: LD_INT 52
 833: PPUSH
 834: LD_INT 43
 836: PPUSH
 837: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 841: LD_LOC 3
 845: PPUSH
 846: LD_LOC 4
 850: PPUSH
 851: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 855: LD_LOC 4
 859: PPUSH
 860: LD_LOC 3
 864: PPUSH
 865: CALL_OW 179
// wait ( 0 0$7 ) ;
 869: LD_INT 245
 871: PPUSH
 872: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 876: LD_LOC 3
 880: PPUSH
 881: LD_STRING DX1-JMM-1
 883: PPUSH
 884: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 888: LD_LOC 4
 892: PPUSH
 893: LD_STRING DX1-Joan-1
 895: PPUSH
 896: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 900: LD_LOC 3
 904: PPUSH
 905: LD_STRING DX1-JMM-2
 907: PPUSH
 908: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 912: LD_LOC 4
 916: PPUSH
 917: LD_STRING DX1-Joan-2
 919: PPUSH
 920: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 924: LD_LOC 3
 928: PPUSH
 929: LD_STRING DX1-JMM-3
 931: PPUSH
 932: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 936: LD_LOC 4
 940: PPUSH
 941: LD_STRING DX1-Joan-3
 943: PPUSH
 944: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 948: LD_LOC 3
 952: PPUSH
 953: LD_STRING DX1-JMM-4
 955: PPUSH
 956: CALL_OW 88
// follow = true ;
 960: LD_ADDR_LOC 20
 964: PUSH
 965: LD_INT 1
 967: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
 968: LD_INT 10
 970: PPUSH
 971: CALL_OW 67
// changemissionobjectives ( M0 ) ;
 975: LD_STRING M0
 977: PPUSH
 978: CALL_OW 337
// ingame_video = false ;
 982: LD_ADDR_OWVAR 52
 986: PUSH
 987: LD_INT 0
 989: ST_TO_ADDR
// interface_hidden = false ;
 990: LD_ADDR_OWVAR 54
 994: PUSH
 995: LD_INT 0
 997: ST_TO_ADDR
// hintSpec ( Hints , 3 ) ;
 998: LD_STRING Hints
1000: PPUSH
1001: LD_INT 3
1003: PPUSH
1004: CALL_OW 338
// wait ( 0 0$1 ) ;
1008: LD_INT 35
1010: PPUSH
1011: CALL_OW 67
// hint ( Character ) ;
1015: LD_STRING Character
1017: PPUSH
1018: CALL_OW 339
// wait ( 0 0$1 ) ;
1022: LD_INT 35
1024: PPUSH
1025: CALL_OW 67
// enable ( 01 ) ;
1029: LD_INT 1
1031: ENABLE_MARKED
// enable ( 02 ) ;
1032: LD_INT 2
1034: ENABLE_MARKED
// enable ( 03 ) ;
1035: LD_INT 3
1037: ENABLE_MARKED
// enable ( 04 ) ;
1038: LD_INT 4
1040: ENABLE_MARKED
// enable ( 05 ) ;
1041: LD_INT 5
1043: ENABLE_MARKED
// end ;
1044: END
// every 3 trigger isselected ( john ) marked 01 do
1045: LD_LOC 3
1049: PPUSH
1050: CALL_OW 306
1054: IFFALSE 1080
1056: GO 1058
1058: DISABLE
// begin hint ( Selection ) ;
1059: LD_STRING Selection
1061: PPUSH
1062: CALL_OW 339
// wait ( 0 0$1 ) ;
1066: LD_INT 35
1068: PPUSH
1069: CALL_OW 67
// hint ( Commands ) ;
1073: LD_STRING Commands
1075: PPUSH
1076: CALL_OW 339
// end ;
1080: END
// every 3 + 1 trigger isselected ( others ^ allmen ^ [ joan , off ] ) marked 02 do
1081: LD_LOC 11
1085: PUSH
1086: LD_EXP 14
1090: ADD
1091: PUSH
1092: LD_LOC 4
1096: PUSH
1097: LD_LOC 10
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: ADD
1106: PPUSH
1107: CALL_OW 306
1111: IFFALSE 1123
1113: GO 1115
1115: DISABLE
// hint ( NPC ) ;
1116: LD_STRING NPC
1118: PPUSH
1119: CALL_OW 339
1123: END
// every 5 trigger isinarea ( john , vis ) marked 03 do
1124: LD_LOC 3
1128: PPUSH
1129: LD_INT 1
1131: PPUSH
1132: CALL_OW 308
1136: IFFALSE 1148
1138: GO 1140
1140: DISABLE
// hint ( Visibility ) ;
1141: LD_STRING Visibility
1143: PPUSH
1144: CALL_OW 339
1148: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1149: LD_LOC 16
1153: NOT
1154: PUSH
1155: LD_LOC 20
1159: AND
1160: IFFALSE 1453
1162: GO 1164
1164: DISABLE
1165: LD_INT 0
1167: PPUSH
1168: PPUSH
1169: PPUSH
1170: PPUSH
1171: PPUSH
1172: PPUSH
1173: PPUSH
1174: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1175: LD_ADDR_VAR 0 1
1179: PUSH
1180: LD_LOC 3
1184: PPUSH
1185: LD_LOC 4
1189: PPUSH
1190: CALL_OW 296
1194: ST_TO_ADDR
// x = getx ( john ) ;
1195: LD_ADDR_VAR 0 4
1199: PUSH
1200: LD_LOC 3
1204: PPUSH
1205: CALL_OW 250
1209: ST_TO_ADDR
// y = gety ( john ) ;
1210: LD_ADDR_VAR 0 5
1214: PUSH
1215: LD_LOC 3
1219: PPUSH
1220: CALL_OW 251
1224: ST_TO_ADDR
// tmp2 = [ ] ;
1225: LD_ADDR_VAR 0 2
1229: PUSH
1230: EMPTY
1231: ST_TO_ADDR
// tmp3 = [ ] ;
1232: LD_ADDR_VAR 0 3
1236: PUSH
1237: EMPTY
1238: ST_TO_ADDR
// if tmp >= 7 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 7
1246: GREATEREQUAL
1247: IFFALSE 1452
// begin for dir = 0 to 5 do
1249: LD_ADDR_VAR 0 8
1253: PUSH
1254: DOUBLE
1255: LD_INT 0
1257: DEC
1258: ST_TO_ADDR
1259: LD_INT 5
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1403
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1265: LD_ADDR_VAR 0 6
1269: PUSH
1270: LD_VAR 0 4
1274: PPUSH
1275: LD_VAR 0 8
1279: PPUSH
1280: LD_VAR 0 1
1284: PUSH
1285: LD_INT 2
1287: MINUS
1288: PPUSH
1289: CALL_OW 272
1293: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1294: LD_ADDR_VAR 0 7
1298: PUSH
1299: LD_VAR 0 5
1303: PPUSH
1304: LD_VAR 0 8
1308: PPUSH
1309: LD_VAR 0 1
1313: PUSH
1314: LD_INT 2
1316: MINUS
1317: PPUSH
1318: CALL_OW 273
1322: ST_TO_ADDR
// if ValidHex ( px , py ) then
1323: LD_VAR 0 6
1327: PPUSH
1328: LD_VAR 0 7
1332: PPUSH
1333: CALL_OW 488
1337: IFFALSE 1401
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1339: LD_ADDR_VAR 0 2
1343: PUSH
1344: LD_VAR 0 2
1348: PUSH
1349: LD_VAR 0 6
1353: PUSH
1354: LD_VAR 0 7
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: EMPTY
1364: LIST
1365: ADD
1366: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1367: LD_ADDR_VAR 0 3
1371: PUSH
1372: LD_VAR 0 3
1376: PUSH
1377: LD_LOC 4
1381: PPUSH
1382: LD_VAR 0 6
1386: PPUSH
1387: LD_VAR 0 7
1391: PPUSH
1392: CALL_OW 297
1396: PUSH
1397: EMPTY
1398: LIST
1399: ADD
1400: ST_TO_ADDR
// end end ;
1401: GO 1262
1403: POP
1404: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1405: LD_ADDR_VAR 0 1
1409: PUSH
1410: LD_VAR 0 2
1414: PPUSH
1415: LD_VAR 0 3
1419: PPUSH
1420: CALL_OW 79
1424: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1425: LD_LOC 4
1429: PPUSH
1430: LD_VAR 0 1
1434: PUSH
1435: LD_INT 1
1437: ARRAY
1438: PPUSH
1439: LD_VAR 0 1
1443: PUSH
1444: LD_INT 2
1446: ARRAY
1447: PPUSH
1448: CALL_OW 111
// end ; enable ;
1452: ENABLE
// end ;
1453: PPOPN 8
1455: END
// on destinationunreachable ( un ) do if un = joan then
1456: LD_VAR 0 1
1460: PUSH
1461: LD_LOC 4
1465: EQUAL
1466: IFFALSE 1497
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1468: LD_LOC 4
1472: PPUSH
1473: LD_LOC 3
1477: PPUSH
1478: CALL_OW 250
1482: PPUSH
1483: LD_LOC 3
1487: PPUSH
1488: CALL_OW 251
1492: PPUSH
1493: CALL_OW 111
1497: PPOPN 1
1499: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1500: LD_LOC 3
1504: PPUSH
1505: CALL_OW 318
1509: IFFALSE 1533
1511: GO 1513
1513: DISABLE
// begin if not killhim then
1514: LD_LOC 16
1518: NOT
1519: IFFALSE 1533
// say ( joan , DXComments-Joan-1 ) ;
1521: LD_LOC 4
1525: PPUSH
1526: LD_STRING DXComments-Joan-1
1528: PPUSH
1529: CALL_OW 88
// end ;
1533: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1534: LD_LOC 3
1538: PPUSH
1539: LD_INT 2
1541: PPUSH
1542: CALL_OW 308
1546: IFFALSE 1570
1548: GO 1550
1550: DISABLE
// begin if not killhim then
1551: LD_LOC 16
1555: NOT
1556: IFFALSE 1570
// say ( joan , DXComments-Joan-1a ) ;
1558: LD_LOC 4
1562: PPUSH
1563: LD_STRING DXComments-Joan-1a
1565: PPUSH
1566: CALL_OW 88
// end ;
1570: END
// every 0 0$1 + 1 1$10 marked 29 do
1571: GO 1573
1573: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1574: LD_LOC 3
1578: PPUSH
1579: LD_INT 3
1581: PPUSH
1582: CALL_OW 308
1586: NOT
1587: IFFALSE 1610
// begin if not killhim then
1589: LD_LOC 16
1593: NOT
1594: IFFALSE 1608
// say ( joan , DXComments-Joan-1b ) ;
1596: LD_LOC 4
1600: PPUSH
1601: LD_STRING DXComments-Joan-1b
1603: PPUSH
1604: CALL_OW 88
// end else
1608: GO 1611
// enable ;
1610: ENABLE
// end ;
1611: END
// every 0 0$0.3 trigger not killhim marked 097 do
1612: LD_LOC 16
1616: NOT
1617: IFFALSE 2141
1619: GO 1621
1621: DISABLE
// begin if joanok then
1622: LD_LOC 13
1626: IFFALSE 1805
// if getlives ( joan ) < 1000 then
1628: LD_LOC 4
1632: PPUSH
1633: CALL_OW 256
1637: PUSH
1638: LD_INT 1000
1640: LESS
1641: IFFALSE 1805
// begin if debug then
1643: LD_LOC 19
1647: IFFALSE 1667
// msg ( joan:  & getlives ( joan ) ) ;
1649: LD_STRING joan: 
1651: PUSH
1652: LD_LOC 4
1656: PPUSH
1657: CALL_OW 256
1661: STR
1662: PPUSH
1663: CALL_OW 100
// comhold ( joan ) ;
1667: LD_LOC 4
1671: PPUSH
1672: CALL_OW 140
// dialogueon ;
1676: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1680: LD_LOC 4
1684: PPUSH
1685: LD_STRING DXAttack-Joan-1
1687: PPUSH
1688: CALL_OW 88
// killhim = true ;
1692: LD_ADDR_LOC 16
1696: PUSH
1697: LD_INT 1
1699: ST_TO_ADDR
// SA_OnAttackFriends ;
1700: CALL 3593 0 0
// music_class = 1 ;
1704: LD_ADDR_OWVAR 72
1708: PUSH
1709: LD_INT 1
1711: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1712: LD_LOC 4
1716: PPUSH
1717: LD_LOC 5
1721: PPUSH
1722: CALL_OW 250
1726: PPUSH
1727: LD_LOC 5
1731: PPUSH
1732: CALL_OW 251
1736: PPUSH
1737: CALL_OW 111
// wait ( 0 0$1 ) ;
1741: LD_INT 35
1743: PPUSH
1744: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1748: LD_LOC 1
1752: PPUSH
1753: LD_LOC 2
1757: PPUSH
1758: LD_INT 2
1760: PPUSH
1761: LD_INT 1
1763: PPUSH
1764: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1768: LD_LOC 11
1772: PUSH
1773: LD_LOC 10
1777: PUSH
1778: LD_EXP 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: ADD
1787: PPUSH
1788: LD_LOC 3
1792: PPUSH
1793: CALL_OW 115
// joanok = false ;
1797: LD_ADDR_LOC 13
1801: PUSH
1802: LD_INT 0
1804: ST_TO_ADDR
// end ; if oothersok then
1805: LD_LOC 14
1809: IFFALSE 2008
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1811: LD_LOC 11
1815: PUSH
1816: LD_LOC 10
1820: PUSH
1821: LD_EXP 1
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: ADD
1830: PPUSH
1831: CALL_OW 256
1835: PUSH
1836: LD_INT 1000
1838: LESS
1839: IFFALSE 2008
// begin if debug then
1841: LD_LOC 19
1845: IFFALSE 1874
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1847: LD_STRING others+off: 
1849: PUSH
1850: LD_LOC 11
1854: PUSH
1855: LD_LOC 10
1859: PUSH
1860: EMPTY
1861: LIST
1862: ADD
1863: PPUSH
1864: CALL_OW 256
1868: STR
1869: PPUSH
1870: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1874: LD_LOC 11
1878: PUSH
1879: LD_LOC 10
1883: PUSH
1884: EMPTY
1885: LIST
1886: ADD
1887: PPUSH
1888: CALL_OW 140
// dialogueon ;
1892: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1896: LD_LOC 4
1900: PPUSH
1901: LD_STRING DXAttack-Joan-1a
1903: PPUSH
1904: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1908: LD_INT 24
1910: PPUSH
1911: CALL_OW 67
// killhim = true ;
1915: LD_ADDR_LOC 16
1919: PUSH
1920: LD_INT 1
1922: ST_TO_ADDR
// SA_OnAttackFriends ;
1923: CALL 3593 0 0
// music_class = 1 ;
1927: LD_ADDR_OWVAR 72
1931: PUSH
1932: LD_INT 1
1934: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1935: LD_LOC 5
1939: PPUSH
1940: LD_STRING DXAttack-Sik-1
1942: PPUSH
1943: CALL_OW 88
// dialogueoff ;
1947: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1951: LD_LOC 1
1955: PPUSH
1956: LD_LOC 2
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: LD_INT 1
1966: PPUSH
1967: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1971: LD_LOC 11
1975: PUSH
1976: LD_LOC 10
1980: PUSH
1981: LD_EXP 1
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: ADD
1990: PPUSH
1991: LD_LOC 3
1995: PPUSH
1996: CALL_OW 115
// oothersok = false ;
2000: LD_ADDR_LOC 14
2004: PUSH
2005: LD_INT 0
2007: ST_TO_ADDR
// end ; if buildingsok then
2008: LD_LOC 15
2012: IFFALSE 2133
// if getlives ( budovy ) < 1000 then
2014: LD_LOC 12
2018: PPUSH
2019: CALL_OW 256
2023: PUSH
2024: LD_INT 1000
2026: LESS
2027: IFFALSE 2133
// begin if debug then
2029: LD_LOC 19
2033: IFFALSE 2053
// msg ( budovy:  & getlives ( budovy ) ) ;
2035: LD_STRING budovy: 
2037: PUSH
2038: LD_LOC 12
2042: PPUSH
2043: CALL_OW 256
2047: STR
2048: PPUSH
2049: CALL_OW 100
// dialogueon ;
2053: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2057: LD_LOC 4
2061: PPUSH
2062: LD_STRING DXAttack-Joan-1b
2064: PPUSH
2065: CALL_OW 88
// dialogueoff ;
2069: CALL_OW 7
// follow = false ;
2073: LD_ADDR_LOC 20
2077: PUSH
2078: LD_INT 0
2080: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2081: LD_LOC 4
2085: PPUSH
2086: LD_LOC 5
2090: PPUSH
2091: CALL_OW 250
2095: PPUSH
2096: LD_LOC 5
2100: PPUSH
2101: CALL_OW 251
2105: PPUSH
2106: CALL_OW 111
// buildingsok = false ;
2110: LD_ADDR_LOC 15
2114: PUSH
2115: LD_INT 0
2117: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2118: LD_ADDR_LOC 17
2122: PUSH
2123: LD_LOC 12
2127: PPUSH
2128: CALL_OW 256
2132: ST_TO_ADDR
// end ; if not killhim then
2133: LD_LOC 16
2137: NOT
2138: IFFALSE 2141
// enable ;
2140: ENABLE
// end ;
2141: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2142: LD_LOC 15
2146: NOT
2147: PUSH
2148: LD_LOC 16
2152: NOT
2153: AND
2154: IFFALSE 2281
2156: GO 2158
2158: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2159: LD_LOC 17
2163: PUSH
2164: LD_LOC 12
2168: PPUSH
2169: CALL_OW 256
2173: MINUS
2174: PUSH
2175: LD_INT 7
2177: GREATER
2178: IFFALSE 2280
// begin disable ( 097 ) ;
2180: LD_INT 97
2182: DISABLE_MARKED
// disable_07 = true ;
2183: LD_ADDR_LOC 18
2187: PUSH
2188: LD_INT 1
2190: ST_TO_ADDR
// dialogueon ;
2191: CALL_OW 6
// music_class = 1 ;
2195: LD_ADDR_OWVAR 72
2199: PUSH
2200: LD_INT 1
2202: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2203: LD_LOC 5
2207: PPUSH
2208: LD_STRING DXAttack-Sik-1
2210: PPUSH
2211: CALL_OW 88
// dialogueoff ;
2215: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2219: LD_LOC 1
2223: PPUSH
2224: LD_LOC 2
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2239: LD_LOC 11
2243: PUSH
2244: LD_LOC 10
2248: PUSH
2249: LD_EXP 1
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: ADD
2258: PPUSH
2259: LD_LOC 3
2263: PPUSH
2264: CALL_OW 115
// killhim = true ;
2268: LD_ADDR_LOC 16
2272: PUSH
2273: LD_INT 1
2275: ST_TO_ADDR
// SA_OnAttackFriends ;
2276: CALL 3593 0 0
// end ; enable ;
2280: ENABLE
// end ;
2281: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2282: LD_LOC 3
2286: PPUSH
2287: CALL_OW 310
2291: PUSH
2292: LD_INT 27
2294: EQUAL
2295: PUSH
2296: LD_LOC 16
2300: NOT
2301: AND
2302: IFFALSE 2407
2304: GO 2306
2306: DISABLE
// begin disable ( 097 ) ;
2307: LD_INT 97
2309: DISABLE_MARKED
// disable_07 = true ;
2310: LD_ADDR_LOC 18
2314: PUSH
2315: LD_INT 1
2317: ST_TO_ADDR
// dialogueon ;
2318: CALL_OW 6
// music_class = 1 ;
2322: LD_ADDR_OWVAR 72
2326: PUSH
2327: LD_INT 1
2329: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2330: LD_LOC 5
2334: PPUSH
2335: LD_STRING DXAttack-Sik-1
2337: PPUSH
2338: CALL_OW 88
// dialogueoff ;
2342: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2346: LD_LOC 1
2350: PPUSH
2351: LD_LOC 2
2355: PPUSH
2356: LD_INT 2
2358: PPUSH
2359: LD_INT 1
2361: PPUSH
2362: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2366: LD_LOC 11
2370: PUSH
2371: LD_LOC 10
2375: PUSH
2376: LD_EXP 1
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: ADD
2385: PPUSH
2386: LD_LOC 3
2390: PPUSH
2391: CALL_OW 115
// killhim = true ;
2395: LD_ADDR_LOC 16
2399: PUSH
2400: LD_INT 1
2402: ST_TO_ADDR
// SA_OnAttackFriends ;
2403: CALL 3593 0 0
// end ;
2407: END
// on unitgoestored ( un ) do if un = john then
2408: LD_VAR 0 1
2412: PUSH
2413: LD_LOC 3
2417: EQUAL
2418: IFFALSE 2509
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2420: LD_LOC 10
2424: PPUSH
2425: LD_LOC 3
2429: PPUSH
2430: CALL_OW 250
2434: PPUSH
2435: LD_LOC 3
2439: PPUSH
2440: CALL_OW 251
2444: PPUSH
2445: CALL_OW 111
// wait ( 0 0$1 ) ;
2449: LD_INT 35
2451: PPUSH
2452: CALL_OW 67
// InGameOn ;
2456: CALL_OW 8
// SetLives ( john , 240 ) ;
2460: LD_LOC 3
2464: PPUSH
2465: LD_INT 240
2467: PPUSH
2468: CALL_OW 234
// SetSide ( john , 8 ) ;
2472: LD_LOC 3
2476: PPUSH
2477: LD_INT 8
2479: PPUSH
2480: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2484: LD_LOC 10
2488: PPUSH
2489: LD_STRING DXAttack-Off-1
2491: PPUSH
2492: CALL_OW 88
// InGameOff ;
2496: CALL_OW 9
// youlost ( Dissmiss ) ;
2500: LD_STRING Dissmiss
2502: PPUSH
2503: CALL_OW 104
// end else
2507: GO 2637
// if not disable_07 then
2509: LD_LOC 18
2513: NOT
2514: IFFALSE 2637
// if ( not killhim ) then
2516: LD_LOC 16
2520: NOT
2521: IFFALSE 2637
// if ( gettype ( un ) = unit_human ) then
2523: LD_VAR 0 1
2527: PPUSH
2528: CALL_OW 247
2532: PUSH
2533: LD_INT 1
2535: EQUAL
2536: IFFALSE 2637
// begin disable ( 06 ) ;
2538: LD_INT 6
2540: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2541: LD_INT 18
2543: PPUSH
2544: CALL_OW 67
// dialogueon ;
2548: CALL_OW 6
// music_class = 1 ;
2552: LD_ADDR_OWVAR 72
2556: PUSH
2557: LD_INT 1
2559: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2560: LD_LOC 5
2564: PPUSH
2565: LD_STRING DXAttack-Sik-1
2567: PPUSH
2568: CALL_OW 88
// dialogueoff ;
2572: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2576: LD_LOC 1
2580: PPUSH
2581: LD_LOC 2
2585: PPUSH
2586: LD_INT 2
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2596: LD_LOC 11
2600: PUSH
2601: LD_LOC 10
2605: PUSH
2606: LD_EXP 1
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: ADD
2615: PPUSH
2616: LD_LOC 3
2620: PPUSH
2621: CALL_OW 115
// killhim = true ;
2625: LD_ADDR_LOC 16
2629: PUSH
2630: LD_INT 1
2632: ST_TO_ADDR
// SA_OnAttackFriends ;
2633: CALL 3593 0 0
// end ;
2637: PPOPN 1
2639: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2640: LD_LOC 3
2644: PPUSH
2645: LD_INT 4
2647: PPUSH
2648: CALL_OW 308
2652: PUSH
2653: LD_LOC 16
2657: NOT
2658: AND
2659: IFFALSE 3347
2661: GO 2663
2663: DISABLE
// begin follow = false ;
2664: LD_ADDR_LOC 20
2668: PUSH
2669: LD_INT 0
2671: ST_TO_ADDR
// centernowonunits ( [ eon ] ) ;
2672: LD_INT 14
2674: PUSH
2675: EMPTY
2676: LIST
2677: PPUSH
2678: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2682: LD_LOC 3
2686: PPUSH
2687: LD_INT 75
2689: PPUSH
2690: LD_INT 36
2692: PPUSH
2693: CALL_OW 111
// InGameOn ;
2697: CALL_OW 8
// say ( off , DXReady-Off-1 ) ;
2701: LD_LOC 10
2705: PPUSH
2706: LD_STRING DXReady-Off-1
2708: PPUSH
2709: CALL_OW 88
// say ( sik , DXReady-Sik-1 ) ;
2713: LD_LOC 5
2717: PPUSH
2718: LD_STRING DXReady-Sik-1
2720: PPUSH
2721: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2725: LD_STRING DXReady-All-1
2727: PPUSH
2728: CALL_OW 96
// wait ( 0 0$2 ) ;
2732: LD_INT 70
2734: PPUSH
2735: CALL_OW 67
// say ( lucy , DXReady-Don-1 ) ;
2739: LD_LOC 6
2743: PPUSH
2744: LD_STRING DXReady-Don-1
2746: PPUSH
2747: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2751: LD_STRING DXReady-All-2
2753: PPUSH
2754: CALL_OW 96
// wait ( 0 0$2 ) ;
2758: LD_INT 70
2760: PPUSH
2761: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2765: LD_EXP 1
2769: PPUSH
2770: LD_STRING DXReady-Off2-1
2772: PPUSH
2773: CALL_OW 88
// wait ( 0 0$1 ) ;
2777: LD_INT 35
2779: PPUSH
2780: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2784: LD_EXP 1
2788: PPUSH
2789: LD_STRING DXReady-Off2-2
2791: PPUSH
2792: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2796: LD_LOC 10
2800: PPUSH
2801: LD_INT 72
2803: PPUSH
2804: LD_INT 29
2806: PPUSH
2807: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2811: LD_EXP 1
2815: PPUSH
2816: LD_INT 73
2818: PPUSH
2819: LD_INT 31
2821: PPUSH
2822: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2826: LD_LOC 3
2830: PPUSH
2831: LD_INT 67
2833: PPUSH
2834: LD_INT 28
2836: PPUSH
2837: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2841: LD_LOC 6
2845: PPUSH
2846: LD_INT 68
2848: PPUSH
2849: LD_INT 30
2851: PPUSH
2852: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2856: LD_LOC 7
2860: PPUSH
2861: LD_INT 69
2863: PPUSH
2864: LD_INT 32
2866: PPUSH
2867: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2871: LD_LOC 5
2875: PPUSH
2876: LD_INT 66
2878: PPUSH
2879: LD_INT 28
2881: PPUSH
2882: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2886: LD_LOC 8
2890: PPUSH
2891: LD_INT 67
2893: PPUSH
2894: LD_INT 30
2896: PPUSH
2897: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2901: LD_LOC 9
2905: PPUSH
2906: LD_INT 68
2908: PPUSH
2909: LD_INT 32
2911: PPUSH
2912: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2916: LD_LOC 10
2920: PPUSH
2921: LD_INT 49
2923: PPUSH
2924: LD_INT 27
2926: PPUSH
2927: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2931: LD_EXP 1
2935: PPUSH
2936: LD_INT 49
2938: PPUSH
2939: LD_INT 27
2941: PPUSH
2942: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
2946: LD_LOC 3
2950: PPUSH
2951: LD_INT 85
2953: PPUSH
2954: LD_INT 33
2956: PPUSH
2957: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
2961: LD_LOC 6
2965: PPUSH
2966: LD_INT 85
2968: PPUSH
2969: LD_INT 33
2971: PPUSH
2972: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
2976: LD_LOC 7
2980: PPUSH
2981: LD_INT 85
2983: PPUSH
2984: LD_INT 33
2986: PPUSH
2987: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
2991: LD_LOC 5
2995: PPUSH
2996: LD_INT 85
2998: PPUSH
2999: LD_INT 33
3001: PPUSH
3002: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3006: LD_LOC 8
3010: PPUSH
3011: LD_INT 85
3013: PPUSH
3014: LD_INT 33
3016: PPUSH
3017: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3021: LD_LOC 9
3025: PPUSH
3026: LD_INT 85
3028: PPUSH
3029: LD_INT 33
3031: PPUSH
3032: CALL_OW 178
// wait ( 0 0$9 ) ;
3036: LD_INT 315
3038: PPUSH
3039: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3043: LD_EXP 1
3047: PPUSH
3048: LD_STRING DXReady-Off2-3
3050: PPUSH
3051: CALL_OW 88
// wait ( 0 0$1 ) ;
3055: LD_INT 35
3057: PPUSH
3058: CALL_OW 67
// case query ( QQuit ) of 1 :
3062: LD_STRING QQuit
3064: PPUSH
3065: CALL_OW 97
3069: PUSH
3070: LD_INT 1
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3151
3078: POP
// begin SA_OnNotEonEnter ;
3079: CALL 3623 0 0
// say ( off2 , DQrQuit#1-Off2-1 ) ;
3083: LD_EXP 1
3087: PPUSH
3088: LD_STRING DQrQuit#1-Off2-1
3090: PPUSH
3091: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3095: LD_LOC 3
3099: PPUSH
3100: LD_STRING DQrQuit#1-JMM-1a
3102: PPUSH
3103: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3107: LD_EXP 1
3111: PPUSH
3112: LD_STRING DQrQuit#1-Off2-2
3114: PPUSH
3115: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3119: LD_LOC 3
3123: PPUSH
3124: LD_INT 73
3126: PPUSH
3127: LD_INT 49
3129: PPUSH
3130: CALL_OW 111
// wait ( 0 0$3 ) ;
3134: LD_INT 105
3136: PPUSH
3137: CALL_OW 67
// ingameoff ;
3141: CALL_OW 9
// YouDidSomethingExtraordinary ;
3145: CALL_OW 105
// end ; 2 :
3149: GO 3347
3151: LD_INT 2
3153: DOUBLE
3154: EQUAL
3155: IFTRUE 3159
3157: GO 3346
3159: POP
// begin SA_OnEonEnter ;
3160: CALL 3608 0 0
// disable ( 29 ) ;
3164: LD_INT 29
3166: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3167: LD_INT 35
3169: PPUSH
3170: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3174: LD_EXP 1
3178: PPUSH
3179: LD_STRING DXReady-Off2-4
3181: PPUSH
3182: CALL_OW 88
// wait ( 0 0$1 ) ;
3186: LD_INT 35
3188: PPUSH
3189: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3193: LD_LOC 10
3197: PPUSH
3198: LD_STRING DXReady-Off-2
3200: PPUSH
3201: CALL_OW 88
// comenterunit ( will , eon ) ;
3205: LD_LOC 8
3209: PPUSH
3210: LD_INT 14
3212: PPUSH
3213: CALL_OW 120
// wait ( 0 0$3 ) ;
3217: LD_INT 105
3219: PPUSH
3220: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3224: LD_LOC 10
3228: PPUSH
3229: LD_STRING DXReady-Off-3
3231: PPUSH
3232: CALL_OW 88
// comenterunit ( sik , eon ) ;
3236: LD_LOC 5
3240: PPUSH
3241: LD_INT 14
3243: PPUSH
3244: CALL_OW 120
// wait ( 0 0$3 ) ;
3248: LD_INT 105
3250: PPUSH
3251: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3255: LD_LOC 10
3259: PPUSH
3260: LD_STRING DXReady-Off-4
3262: PPUSH
3263: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3267: LD_LOC 6
3271: PPUSH
3272: LD_INT 14
3274: PPUSH
3275: CALL_OW 120
// wait ( 0 0$3 ) ;
3279: LD_INT 105
3281: PPUSH
3282: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3286: LD_LOC 10
3290: PPUSH
3291: LD_STRING DXReady-Off-5
3293: PPUSH
3294: CALL_OW 88
// ComMoveXY ( john , 75 , 34 ) ;
3298: LD_LOC 3
3302: PPUSH
3303: LD_INT 75
3305: PPUSH
3306: LD_INT 34
3308: PPUSH
3309: CALL_OW 111
// wait ( 0 0$4 ) ;
3313: LD_INT 140
3315: PPUSH
3316: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3320: LD_LOC 3
3324: PPUSH
3325: LD_STRING DQrQuit#2-JMM-1
3327: PPUSH
3328: CALL_OW 88
// comenterunit ( john , eon ) ;
3332: LD_LOC 3
3336: PPUSH
3337: LD_INT 14
3339: PPUSH
3340: CALL_OW 120
// end ; end ;
3344: GO 3347
3346: POP
// end ;
3347: END
// on enterbuilding ( b , un ) do begin if b = eon then
3348: LD_VAR 0 1
3352: PUSH
3353: LD_INT 14
3355: EQUAL
3356: IFFALSE 3465
// case un of john :
3358: LD_VAR 0 2
3362: PUSH
3363: LD_LOC 3
3367: DOUBLE
3368: EQUAL
3369: IFTRUE 3373
3371: GO 3455
3373: POP
// if not killhim then
3374: LD_LOC 16
3378: NOT
3379: IFFALSE 3412
// begin wait ( 0 0$1.3 ) ;
3381: LD_INT 46
3383: PPUSH
3384: CALL_OW 67
// savecharacters ( john , JMM ) ;
3388: LD_LOC 3
3392: PPUSH
3393: LD_STRING JMM
3395: PPUSH
3396: CALL_OW 38
// changemap ( 1 , %_cont ) ;
3400: LD_STRING 1
3402: PPUSH
3403: LD_STRING %_cont
3405: PPUSH
3406: CALL_OW 340
// end else
3410: GO 3453
// begin placeunitxy ( john , 76 , 34 , false ) ;
3412: LD_LOC 3
3416: PPUSH
3417: LD_INT 76
3419: PPUSH
3420: LD_INT 34
3422: PPUSH
3423: LD_INT 0
3425: PPUSH
3426: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3430: LD_LOC 11
3434: PUSH
3435: LD_LOC 10
3439: PUSH
3440: EMPTY
3441: LIST
3442: ADD
3443: PPUSH
3444: LD_LOC 3
3448: PPUSH
3449: CALL_OW 115
// end ; else
3453: GO 3465
3455: POP
// RemoveUnit ( un ) ; end ;
3456: LD_VAR 0 2
3460: PPUSH
3461: CALL_OW 64
// end ;
3465: PPOPN 2
3467: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3468: LD_VAR 0 1
3472: PUSH
3473: LD_INT 1
3475: EQUAL
3476: PUSH
3477: LD_VAR 0 2
3481: PUSH
3482: LD_INT 4
3484: EQUAL
3485: AND
3486: PUSH
3487: LD_LOC 16
3491: PUSH
3492: LD_INT 0
3494: EQUAL
3495: AND
3496: IFFALSE 3590
// begin wait ( 0 0$1 ) ;
3498: LD_INT 35
3500: PPUSH
3501: CALL_OW 67
// music_class = 1 ;
3505: LD_ADDR_OWVAR 72
3509: PUSH
3510: LD_INT 1
3512: ST_TO_ADDR
// DialogueOn ;
3513: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3517: LD_LOC 5
3521: PPUSH
3522: LD_STRING DXAttack-Sik-1
3524: PPUSH
3525: CALL_OW 88
// dialogueoff ;
3529: CALL_OW 7
// killhim = true ;
3533: LD_ADDR_LOC 16
3537: PUSH
3538: LD_INT 1
3540: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3541: LD_LOC 1
3545: PPUSH
3546: LD_LOC 2
3550: PPUSH
3551: LD_INT 2
3553: PPUSH
3554: LD_INT 1
3556: PPUSH
3557: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3561: LD_LOC 11
3565: PUSH
3566: LD_LOC 10
3570: PUSH
3571: LD_EXP 1
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: ADD
3580: PPUSH
3581: LD_LOC 3
3585: PPUSH
3586: CALL_OW 115
// end ; end ; end_of_file
3590: PPOPN 2
3592: END
// export function SA_OnAttackFriends ; begin
3593: LD_INT 0
3595: PPUSH
// SetAchievement ( ACH_MAD ) ;
3596: LD_STRING ACH_MAD
3598: PPUSH
3599: CALL_OW 543
// end ;
3603: LD_VAR 0 1
3607: RET
// export function SA_OnEonEnter ; begin
3608: LD_INT 0
3610: PPUSH
// SetAchievement ( ACH_EON ) ;
3611: LD_STRING ACH_EON
3613: PPUSH
3614: CALL_OW 543
// end ;
3618: LD_VAR 0 1
3622: RET
// export function SA_OnNotEonEnter ; begin
3623: LD_INT 0
3625: PPUSH
// SetAchievement ( ACH_CF ) ;
3626: LD_STRING ACH_CF
3628: PPUSH
3629: CALL_OW 543
// end ; end_of_file
3633: LD_VAR 0 1
3637: RET
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3638: LD_INT 0
3640: PPUSH
// uc_side := 4 ;
3641: LD_ADDR_OWVAR 20
3645: PUSH
3646: LD_INT 4
3648: ST_TO_ADDR
// uc_nation := nation_american ;
3649: LD_ADDR_OWVAR 21
3653: PUSH
3654: LD_INT 1
3656: ST_TO_ADDR
// hc_importance = 50 ;
3657: LD_ADDR_OWVAR 32
3661: PUSH
3662: LD_INT 50
3664: ST_TO_ADDR
// hc_sex = sex_male ;
3665: LD_ADDR_OWVAR 27
3669: PUSH
3670: LD_INT 1
3672: ST_TO_ADDR
// hc_class = 1 ;
3673: LD_ADDR_OWVAR 28
3677: PUSH
3678: LD_INT 1
3680: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3681: LD_ADDR_OWVAR 30
3685: PUSH
3686: LD_INT 7
3688: PUSH
3689: LD_INT 3
3691: PUSH
3692: LD_INT 2
3694: PUSH
3695: LD_INT 2
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3704: LD_ADDR_OWVAR 31
3708: PUSH
3709: LD_INT 7
3711: PUSH
3712: LD_INT 3
3714: PUSH
3715: LD_INT 2
3717: PUSH
3718: LD_INT 2
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3727: LD_ADDR_OWVAR 29
3731: PUSH
3732: LD_INT 11
3734: PUSH
3735: LD_INT 11
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: ST_TO_ADDR
// hc_name := Officer2 ;
3742: LD_ADDR_OWVAR 26
3746: PUSH
3747: LD_STRING Officer2
3749: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3750: LD_ADDR_OWVAR 33
3754: PUSH
3755: LD_STRING AmGalRemake
3757: ST_TO_ADDR
// hc_face_number := 3 ;
3758: LD_ADDR_OWVAR 34
3762: PUSH
3763: LD_INT 3
3765: ST_TO_ADDR
// off2 := CreateHuman ;
3766: LD_ADDR_EXP 1
3770: PUSH
3771: CALL_OW 44
3775: ST_TO_ADDR
// end ;
3776: LD_VAR 0 1
3780: RET
// export function CreatePersonnel ; begin
3781: LD_INT 0
3783: PPUSH
// uc_side := 4 ;
3784: LD_ADDR_OWVAR 20
3788: PUSH
3789: LD_INT 4
3791: ST_TO_ADDR
// uc_nation := nation_american ;
3792: LD_ADDR_OWVAR 21
3796: PUSH
3797: LD_INT 1
3799: ST_TO_ADDR
// hc_importance = 10 ;
3800: LD_ADDR_OWVAR 32
3804: PUSH
3805: LD_INT 10
3807: ST_TO_ADDR
// hc_name :=  ;
3808: LD_ADDR_OWVAR 26
3812: PUSH
3813: LD_STRING 
3815: ST_TO_ADDR
// hc_gallery :=  ;
3816: LD_ADDR_OWVAR 33
3820: PUSH
3821: LD_STRING 
3823: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3824: LD_INT 1
3826: PPUSH
3827: LD_INT 2
3829: NEG
3830: PPUSH
3831: CALL_OW 382
// engi1 := CreateHuman ;
3835: LD_ADDR_EXP 2
3839: PUSH
3840: CALL_OW 44
3844: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3845: LD_INT 1
3847: PPUSH
3848: LD_INT 2
3850: NEG
3851: PPUSH
3852: CALL_OW 382
// engi2 := CreateHuman ;
3856: LD_ADDR_EXP 3
3860: PUSH
3861: CALL_OW 44
3865: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
3866: LD_EXP 2
3870: PPUSH
3871: LD_INT 10
3873: PPUSH
3874: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
3878: LD_EXP 3
3882: PPUSH
3883: LD_INT 10
3885: PPUSH
3886: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
3890: LD_INT 1
3892: PPUSH
3893: LD_INT 1
3895: NEG
3896: PPUSH
3897: CALL_OW 383
// truckdriver := CreateHuman ;
3901: LD_ADDR_EXP 4
3905: PUSH
3906: CALL_OW 44
3910: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
3911: LD_EXP 4
3915: PPUSH
3916: LD_INT 27
3918: PPUSH
3919: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
3923: LD_INT 27
3925: PPUSH
3926: LD_INT 1
3928: PPUSH
3929: LD_INT 100
3931: PPUSH
3932: CALL_OW 290
// PrepareMechanic ( 1 , - 3 ) ;
3936: LD_INT 1
3938: PPUSH
3939: LD_INT 3
3941: NEG
3942: PPUSH
3943: CALL_OW 383
// tankdriver := CreateHuman ;
3947: LD_ADDR_EXP 5
3951: PUSH
3952: CALL_OW 44
3956: ST_TO_ADDR
// PlaceHumanInUnit ( tankdriver , tank1 ) ;
3957: LD_EXP 5
3961: PPUSH
3962: LD_INT 19
3964: PPUSH
3965: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
3969: LD_INT 1
3971: PPUSH
3972: LD_INT 3
3974: PPUSH
3975: CALL_OW 381
// hc_class = class_sniper ;
3979: LD_ADDR_OWVAR 28
3983: PUSH
3984: LD_INT 5
3986: ST_TO_ADDR
// snip1 := CreateHuman ;
3987: LD_ADDR_EXP 6
3991: PUSH
3992: CALL_OW 44
3996: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
3997: LD_INT 2
3999: PPUSH
4000: LD_INT 3
4002: PPUSH
4003: CALL_OW 381
// hc_class = class_sniper ;
4007: LD_ADDR_OWVAR 28
4011: PUSH
4012: LD_INT 5
4014: ST_TO_ADDR
// snip2 := CreateHuman ;
4015: LD_ADDR_EXP 7
4019: PUSH
4020: CALL_OW 44
4024: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4025: LD_EXP 6
4029: PPUSH
4030: LD_INT 47
4032: PPUSH
4033: LD_INT 17
4035: PPUSH
4036: LD_INT 0
4038: PPUSH
4039: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4043: LD_EXP 7
4047: PPUSH
4048: LD_INT 29
4050: PPUSH
4051: LD_INT 31
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4061: LD_EXP 6
4065: PUSH
4066: LD_EXP 7
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PPUSH
4075: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4079: LD_INT 1
4081: PPUSH
4082: LD_INT 3
4084: PPUSH
4085: CALL_OW 381
// sol1 := CreateHuman ;
4089: LD_ADDR_EXP 8
4093: PUSH
4094: CALL_OW 44
4098: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4099: LD_EXP 8
4103: PPUSH
4104: LD_INT 2
4106: PPUSH
4107: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4111: LD_EXP 8
4115: PPUSH
4116: LD_INT 15
4118: PPUSH
4119: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4123: LD_INT 1
4125: PPUSH
4126: LD_INT 3
4128: PPUSH
4129: CALL_OW 381
// sol2 := CreateHuman ;
4133: LD_ADDR_EXP 9
4137: PUSH
4138: CALL_OW 44
4142: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4143: LD_INT 1
4145: PPUSH
4146: LD_INT 3
4148: PPUSH
4149: CALL_OW 381
// sol3 := CreateHuman ;
4153: LD_ADDR_EXP 10
4157: PUSH
4158: CALL_OW 44
4162: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4163: LD_EXP 9
4167: PPUSH
4168: LD_INT 40
4170: PPUSH
4171: LD_INT 42
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4181: LD_EXP 10
4185: PPUSH
4186: LD_INT 53
4188: PPUSH
4189: LD_INT 34
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4199: LD_INT 1
4201: PPUSH
4202: LD_INT 3
4204: PPUSH
4205: CALL_OW 381
// pat1 := CreateHuman ;
4209: LD_ADDR_EXP 11
4213: PUSH
4214: CALL_OW 44
4218: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4219: LD_INT 1
4221: PPUSH
4222: LD_INT 3
4224: PPUSH
4225: CALL_OW 381
// pat2 := CreateHuman ;
4229: LD_ADDR_EXP 12
4233: PUSH
4234: CALL_OW 44
4238: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4239: LD_EXP 11
4243: PPUSH
4244: LD_INT 29
4246: PPUSH
4247: LD_INT 6
4249: PPUSH
4250: LD_INT 0
4252: PPUSH
4253: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4257: LD_EXP 12
4261: PPUSH
4262: LD_INT 30
4264: PPUSH
4265: LD_INT 7
4267: PPUSH
4268: LD_INT 0
4270: PPUSH
4271: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4275: LD_ADDR_EXP 13
4279: PUSH
4280: LD_EXP 11
4284: PUSH
4285: LD_EXP 12
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , tank1 , truckdriver ] ;
4294: LD_ADDR_EXP 14
4298: PUSH
4299: LD_EXP 2
4303: PUSH
4304: LD_EXP 3
4308: PUSH
4309: LD_EXP 8
4313: PUSH
4314: LD_EXP 9
4318: PUSH
4319: LD_EXP 10
4323: PUSH
4324: LD_EXP 6
4328: PUSH
4329: LD_EXP 7
4333: PUSH
4334: LD_EXP 13
4338: PUSH
4339: LD_INT 19
4341: PUSH
4342: LD_EXP 4
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: ST_TO_ADDR
// end ;
4359: LD_VAR 0 1
4363: RET
// every 0 0$1 do
4364: GO 4366
4366: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4367: LD_EXP 13
4371: PPUSH
4372: LD_INT 64
4374: PPUSH
4375: LD_INT 22
4377: PPUSH
4378: CALL_OW 171
// wait ( 0 0$25 ) ;
4382: LD_INT 875
4384: PPUSH
4385: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4389: LD_EXP 13
4393: PPUSH
4394: LD_INT 30
4396: PPUSH
4397: LD_INT 8
4399: PPUSH
4400: CALL_OW 171
// wait ( 0 0$25 ) ;
4404: LD_INT 875
4406: PPUSH
4407: CALL_OW 67
// enable ;
4411: ENABLE
// end ;
4412: END
// every 0 0$1 do
4413: GO 4415
4415: DISABLE
// begin SetLives ( truck , 550 ) ;
4416: LD_INT 27
4418: PPUSH
4419: LD_INT 550
4421: PPUSH
4422: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4426: LD_INT 27
4428: PPUSH
4429: LD_INT 42
4431: PPUSH
4432: LD_INT 35
4434: PPUSH
4435: CALL_OW 111
// AddComUnload ( truck ) ;
4439: LD_INT 27
4441: PPUSH
4442: CALL_OW 219
// Wait ( 0 0$8 ) ;
4446: LD_INT 280
4448: PPUSH
4449: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4453: LD_EXP 2
4457: PUSH
4458: LD_EXP 3
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: PPUSH
4467: LD_INT 45
4469: PPUSH
4470: LD_INT 36
4472: PPUSH
4473: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4477: LD_EXP 4
4481: PPUSH
4482: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4486: LD_EXP 4
4490: PPUSH
4491: LD_INT 40
4493: PPUSH
4494: LD_INT 33
4496: PPUSH
4497: CALL_OW 171
// AddComRepairVehicle ( truckdriver , truck ) ;
4501: LD_EXP 4
4505: PPUSH
4506: LD_INT 27
4508: PPUSH
4509: CALL_OW 189
// Wait ( 0 0$15 ) ;
4513: LD_INT 525
4515: PPUSH
4516: CALL_OW 67
// SetLives ( truck , 1000 ) ;
4520: LD_INT 27
4522: PPUSH
4523: LD_INT 1000
4525: PPUSH
4526: CALL_OW 234
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4530: LD_EXP 2
4534: PUSH
4535: LD_EXP 3
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: PPUSH
4544: LD_INT 10
4546: PPUSH
4547: CALL_OW 120
// ComEnterUnit ( truckdriver , truck ) ;
4551: LD_EXP 4
4555: PPUSH
4556: LD_INT 27
4558: PPUSH
4559: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4563: LD_EXP 4
4567: PPUSH
4568: LD_INT 74
4570: PPUSH
4571: LD_INT 52
4573: PPUSH
4574: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4578: LD_EXP 4
4582: PPUSH
4583: LD_INT 90
4585: PPUSH
4586: LD_INT 58
4588: PPUSH
4589: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4593: LD_EXP 4
4597: PPUSH
4598: LD_INT 98
4600: PPUSH
4601: LD_INT 61
4603: PPUSH
4604: CALL_OW 171
// end ;
4608: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4609: LD_INT 7
4611: PPUSH
4612: LD_INT 22
4614: PUSH
4615: LD_INT 4
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PPUSH
4622: CALL_OW 70
4626: IFFALSE 4674
4628: GO 4630
4630: DISABLE
4631: LD_INT 0
4633: PPUSH
// begin enable ;
4634: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4635: LD_ADDR_VAR 0 1
4639: PUSH
4640: LD_INT 7
4642: PPUSH
4643: LD_INT 22
4645: PUSH
4646: LD_INT 4
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: PPUSH
4653: CALL_OW 70
4657: PUSH
4658: FOR_IN
4659: IFFALSE 4672
// RemoveUnit ( i ) ;
4661: LD_VAR 0 1
4665: PPUSH
4666: CALL_OW 64
4670: GO 4658
4672: POP
4673: POP
// end ;
4674: PPOPN 1
4676: END
// every 0 0$1 trigger GetDistUnits ( truck , tank1 ) < 5 do
4677: LD_INT 27
4679: PPUSH
4680: LD_INT 19
4682: PPUSH
4683: CALL_OW 296
4687: PUSH
4688: LD_INT 5
4690: LESS
4691: IFFALSE 4748
4693: GO 4695
4695: DISABLE
// begin AddComMoveXY ( tank1 , 79 , 53 ) ;
4696: LD_INT 19
4698: PPUSH
4699: LD_INT 79
4701: PPUSH
4702: LD_INT 53
4704: PPUSH
4705: CALL_OW 171
// AddComMoveXY ( tank1 , 87 , 57 ) ;
4709: LD_INT 19
4711: PPUSH
4712: LD_INT 87
4714: PPUSH
4715: LD_INT 57
4717: PPUSH
4718: CALL_OW 171
// AddComMoveXY ( tank1 , 95 , 60 ) ;
4722: LD_INT 19
4724: PPUSH
4725: LD_INT 95
4727: PPUSH
4728: LD_INT 60
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( tank1 , 96 , 60 ) ;
4735: LD_INT 19
4737: PPUSH
4738: LD_INT 96
4740: PPUSH
4741: LD_INT 60
4743: PPUSH
4744: CALL_OW 171
// end ;
4748: END
