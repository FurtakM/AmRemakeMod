// Functions writed by Nefarem

// Function is used to call the dialogue spoken by random male or female characters
// Example: DialogRandom(FilterAllUnits([[f_side, 1], [f_type, unit_human]]), 'DAtt1-Sol1-1', 'DAtt1-FSol1-1');

Export function DialogRandom(characters, dialogMID, dialogFID);
var i, rnd;
begin
    rnd = rand(1, characters);  

    for i = 1 to characters do
    begin

       if i = rnd AND GetSex(characters[i]) = 1 then Say(characters[i], dialogMID);
       if i = rnd AND GetSex(characters[i]) = 2 then Say(characters[i], dialogFID);

    end;
  
end;

// Support function to fast spawn people in building
// Example: RespawnInside(1, 3, ardepot1, 8, 2, 3);

Export function RespawnInside(side, nation, build, skill, class, count);
var i,l, un;
begin

   for i = 1 to count do
   begin

      uc_side = side;
      uc_nation = nation;

      hc_gallery = '';
      hc_name = '';
      PrepareHuman(false, class, skill);

      un = CreateHuman;
      PlaceHumanInUnit(un,build);

   end;

END;

// Save characters if he live else delete from characters list.
// Example: EnchancedSaveCharacters(JMM, 'JMM');

Export function EnchancedSaveCharacters(charactersList, ident);
var i;
begin

    for i in charactersList do
    begin
         if IsOk(i) then
         begin
              SaveCharacters(i, ident);
         end else
         begin
              DeleteCharacters(ident);
        end;
    end;
end;


// AI Functions:

// Spawn vehicle and attack
// Function to respawn vehicles with many options and send to fight.
// Example: RespawnAttackVehicle(SpawnEnemyArea, 2, 10, 6, 2, 3, 1, [], [ar_gun, ar_rocket_launcher, ar_flamethrower], [], 1);

export function RespawnAttackVehicle(area, side, vehCount, mehskill, nation, vehEngine, vehControl, RUWeapons, ARWeapons, AMWeapon);
var i, j, un, veh, ruChassisTab, arChassisTab, amChassisTab, vehicleOK_list, target1, target2;
begin

  amChassisTab = [];
  arChassisTab = [];
  ruChassisTab = [];

  if nation = 1 then
  begin

    for i := 1 to vehCount do
    begin
      uc_side = side;
      uc_nation = nation;

      vc_engine = vehengine;
      vc_control = vehcontrol;
      vc_weapon = AMWeapon[Rand(1, AMWeapon)];

        IF vc_weapon = 2 or vc_weapon = 3 then
        begin
            amChassisTab = [1, 2, 3, 4, 5];
            vc_chassis = amChassisTab[Rand(1, amChassisTab)];
        end;

        IF vc_weapon = 4 or vc_weapon = 5 or vc_weapon = 9 or vc_weapon = 11 or vc_weapon = 7 then
        begin
            amChassisTab = [2, 3, 4, 5];
            vc_chassis = amChassisTab[Rand(1, amChassisTab)];
        end;

        IF vc_weapon = 8 or vc_weapon = 6 or vc_weapon = 10 then
        begin
            amChassisTab = [4, 5];
            vc_chassis = amChassisTab[Rand(1, amChassisTab)];
        end;

        veh = CreateVehicle;
        PlaceUnitArea(veh, area, false);

        if vehcontrol = 1 then
        begin

          hc_gallery = '';
          hc_name = '';
          PrepareHuman(false, 3, mehskill);

          un = CreateHuman;
          PlaceHumanInUnit(un, veh);
        end;   
      end;
    end;

  if nation = 2 then
  begin

    for i := 1 to vehCount do
    begin
      
      uc_side = side;
      uc_nation = nation;

      vc_engine = vehengine;
      vc_control = vehcontrol;
      vc_weapon = ARWeapons[Rand(1, ARWeapons)];

        IF vc_weapon = 24 or vc_weapon = 22 or vc_weapon = 23 or vc_weapon = 30 then
        begin
            arChassisTab = [11, 12, 13, 14];
            vc_chassis = arChassisTab[Rand(1, arChassisTab)];
        end;

        IF vc_weapon = 29 or vc_weapon = 28 or vc_weapon = 27 or vc_weapon = 26 or vc_weapon = 25 then
        begin
            arChassisTab = [13, 14];
            vc_chassis = arChassisTab[Rand(1, arChassisTab)];
        end;

      veh = CreateVehicle;
      PlaceUnitArea(veh, area, false);

      IF vehcontrol = 1 then
      begin

          hc_gallery = '';
          hc_name = '';
          PrepareHuman(false, 3, mehskill);

          un = CreateHuman;
          PlaceHumanInUnit(un, veh);
      end;
    end;
  end;

  IF nation = 3 then
  begin

    for i := 1 to vehCount do
    begin
        uc_side = side;
        uc_nation = nation;

        vc_engine = vehengine;
        vc_control = vehcontrol;
        vc_weapon = RUWeapons[Rand(1, RUWeapons)];

        for j = 1 to RuWeapons do
        begin

            IF vc_weapon = 42 or vc_weapon = 43 or vc_weapon = 44 or vc_weapon = 45 or vc_weapon = 49 then
            begin
                ruChassisTab = [21, 22, 23, 24];
                vc_chassis = ruChassisTab[Rand(1, ruChassisTab)];
            end;

            IF vc_weapon = 46 or vc_weapon = 47 then
            begin
                ruChassisTab = [23, 24];
                vc_chassis = ruChassisTab[Rand(1, ruChassisTab)];
            end;
        end;

        veh = CreateVehicle;
        PlaceUnitArea(veh, area, false);

        IF vehcontrol = 1 then
        begin

            hc_gallery = '';
            hc_name = '';
            PrepareHuman(false, 3, mehskill);

            un = CreateHuman;
            PlaceHumanInUnit(un, veh);
        end;
      end;
    end;

  repeat
    wait(0$1);
    vehicleOK_list = FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 650]]);

    IF vehicleOK_list > 0 then
    begin

      for i in vehicleOK_list  do
      begin

        target1 := NearestUnitToUnit(FilterAllUnits([f_enemy, side]), i);
        target2 := NearestUnitToUnit(FilterAllUnits([[[f_enemy, side], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

        If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then ComAttackUnit(i, target1)
        else ComAttackUnit(i, target2);

      end;
    end;

  until FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 250], [f_empty]]) = 0;


END;

every 0$1 do 
begin
    //display_strings = ['w polu: ', CPU1Tanks, 'uszkodzone: ', CPU1DamageTanks, 'wylosowane: 4'];
    enable;
end;

Export function BuildingVehicle(side, fabric, vehCount, weaponTab, engine, control, chassis);
var i;
begin

    if FilterAllUnits([[f_side, side], [f_type, unit_vehicle]]) <= vehCount then
        for i = 1 to vehCount do AddComConstruct(fabric, chassis, engine, control, weaponTab[Rand(1, weaponTab)]);
    
END;

Export function RepairVehicles(side, area, repX, repY);
var i, j, damageVehicles;
begin
    damageVehicles = FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_not, [f_lives, 650]]]);

    if damageVehicles > 0 then ComMoveXY(damageVehicles, repX, repY);

    if UnitFilter(damageVehicles, [[f_inarea, area], [f_not, [f_empty]]]) > 0 then
        for i in UnitFilter(damageVehicles, [[f_inarea, area], [f_not, [f_empty]]]) do ComExitVehicle(UnitsInside(i));
end;

Export function AttackVehicles(side, meetArea, wayX, wayY);
var i, j, vehiclesOK, target1, target2, seeEnemy;
begin
    vehiclesOK = FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 650]]);

    if FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 1000]]) = 5 then
        repeat
            wait(0$1);
            display_strings = seeEnemy;
            vehiclesOK = FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 650]]);

            if not FilterAllUnits([[f_side, side], [f_inarea, meetArea]]) and seeEnemy = 0 then for i := 1 to wayX do AddComAgressiveMove(vehiclesOK, wayX[i], wayY[i]);

            if FilterAllUnits([[f_side, side], [f_inarea, meetArea]]) then
            begin
                seeEnemy = 1;

                for j in vehiclesOK do
                begin  
                    target1 := NearestUnitToUnit(FilterAllUnits([[f_enemy, side], [f_see, 1]]), j);
                    target2 := NearestUnitToUnit(FilterAllUnits([[[f_enemy, side], [f_see, 1], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), j);

                    If GetDistUnits(j, target1)+8 < GetDistUnits(j, target2) then ComAttackUnit(j, target1)
                    else ComAttackUnit(j, target2);
                end;
            end;

            
        until FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 1000]]) = 0;
        seeEnemy = 0;
end;


Export function RebuildBuildings(side, destroyedBuildings);
var i;
begin
    if FilterAllUnits([[f_side, side], [f_class, 2]]) > 0 and FilterAllUnits([[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]) = 0 and destroyedBuildings > 0  then
    begin
        for i in FilterAllUnits([[f_side, side], [f_class, 2]]) do 
        begin
            AddComExitBuilding(i);
            AddComBuild(i, destroyedBuildings[1], destroyedBuildings[2], destroyedBuildings[3], destroyedBuildings[4]);
        end;
    end;
END;

Export function AttackNearBuildings(side, enemySide);
var i, j, turretsList, enemyBuildings;
begin
    turretsList = FilterAllUnits([[f_side, side], [f_or, [f_btype, 31], [f_btype, 32], [f_btype, 33], [f_btype, 4], [f_btype, 5]]]);
    enemyBuildings = FilterAllUnits([[f_side, enemySide], [f_type, unit_building], [f_empty]]);

    if turretsList > 0 and enemyBuildings > 0 then
    begin
        for i in turretsList do
        begin
            for j in enemyBuildings do
            begin
                if GetDistUnits(i, j) < 20 then
                begin
                    ComAttackUnit(i, j);
                end;
            end;
        end;
    end;

END;

Export Function IntBazooka(side, targetSide);
var ta, c, i, list, filter;
begin

      list   := FilterAllUnits([[f_side, side], [f_class, class_bazooker]]);
      filter := FilterAllUnits([[f_side, targetSide], [f_not, [f_type, unit_building]]]);

      c := Rand(1, 3);

         for i = 1 to list do
         for ta in filter do
             begin

              if GetDistUnits(list[i], ta) <= 13 then
                 begin

                      Case c of
                      1: ComTimeShift(list[i], GetX(ta), GetY(ta));
                      2: ComSpaceShift(list[i], GetX(ta) + Rand(-1,1), GetY(ta) + Rand(-1,1));
                      3: ;
                      end;

                 end;
             end;

End;

Export function RepairBuilding(side, building);
var buildings_list, i,engineerOkInside, engineerOkOutside, j;
begin

  engineerOkInside = UnitsInside(building);
  engineerOkOutside = FilterAllUnits([[f_side, side], [f_class, 2], [f_lives, 1000], [f_not, [f_inside]]]);
  buildings_list = FilterAllUnits([[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

  if not buildings_list and not engineerOkOutside and not destroyedBuildings then exit;

  if buildings_list > 0 and engineerOkInside then
     for i in UnitsInside(building) do ComExitBuilding(i);

  if buildings_list > 0  and engineerOkOutside > 0 then
  begin

    for i in engineerOkOutside do
      for j in buildings_list do
          ComRepairBuilding(i, j[1]);

  end; 

  //if buildings_list = 0 and engineerOkOutside > 0 then
  //    for i in engineerOkOutside do ComEnterUnit(i, building);

END;

Export function HealUnitInBase(side, healArea, baseArea, build);
var sci_list, sci_listOutside,  i, j, damageUnits, unitsToHeal;
begin

  sci_list = FilterAllUnits([[f_side, side], [f_class, 4], [f_lives, 251]]);
  sci_listOutside = FilterUnitsInArea(baseArea, [[f_side, side], [f_class, 4], [f_ok]]);
  damageUnits = FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_human], [f_not, [f_lives, 750]]]);
  unitsToHeal = FilterUnitsInArea(healArea,[[f_side, side], [f_type, unit_human], [f_not, [f_lives, 1000]]]);

  if not damageUnits and not sci_listOutside and not unitsToHeal then exit;

  if damageUnits > 0 and sci_list > 0 then
    for i in damageUnits do ComMoveToArea(i, healArea);

  if unitsToHeal > 0 and sci_list > 0 then
  begin
    for i in sci_list do
    begin

      ComExitBuilding(i);

      for j in unitsToHeal do AddComHeal(i, j);
    end;
  end;

  if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
      for i in sci_listOutside do ComEnterUnit(i, build);

END;