// export destroyedBuildings ; export cargoTest ; export vehicleDriverTab ; export arabianMines ; export JMM ; starting var i ; begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// destroyedBuildings = [ ] ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// cargoTest = [ ] ;
  15: LD_ADDR_EXP 2
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// arabianMines = [ ] ;
  22: LD_ADDR_EXP 4
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// end ;
  29: END
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
  30: LD_INT 0
  32: PPUSH
  33: PPUSH
  34: PPUSH
  35: PPUSH
// if not list then
  36: LD_VAR 0 1
  40: NOT
  41: IFFALSE 45
// exit ;
  43: GO 392
// result := [ ] ;
  45: LD_ADDR_VAR 0 3
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// for i in list do
  52: LD_ADDR_VAR 0 4
  56: PUSH
  57: LD_VAR 0 1
  61: PUSH
  62: FOR_IN
  63: IFFALSE 304
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
  65: LD_ADDR_VAR 0 6
  69: PUSH
  70: LD_VAR 0 4
  74: PPUSH
  75: LD_INT 1
  77: PPUSH
  78: CALL_OW 259
  82: PUSH
  83: LD_VAR 0 4
  87: PPUSH
  88: LD_INT 2
  90: PPUSH
  91: CALL_OW 259
  95: PLUS
  96: PUSH
  97: LD_VAR 0 4
 101: PPUSH
 102: LD_INT 3
 104: PPUSH
 105: CALL_OW 259
 109: PLUS
 110: PUSH
 111: LD_VAR 0 4
 115: PPUSH
 116: LD_INT 4
 118: PPUSH
 119: CALL_OW 259
 123: PLUS
 124: PUSH
 125: LD_INT 4
 127: DIV
 128: ST_TO_ADDR
// if not result then
 129: LD_VAR 0 3
 133: NOT
 134: IFFALSE 160
// result := [ [ i , tmp ] ] else
 136: LD_ADDR_VAR 0 3
 140: PUSH
 141: LD_VAR 0 4
 145: PUSH
 146: LD_VAR 0 6
 150: PUSH
 151: EMPTY
 152: LIST
 153: LIST
 154: PUSH
 155: EMPTY
 156: LIST
 157: ST_TO_ADDR
 158: GO 302
// begin if result [ result ] [ 2 ] <= tmp then
 160: LD_VAR 0 3
 164: PUSH
 165: LD_VAR 0 3
 169: ARRAY
 170: PUSH
 171: LD_INT 2
 173: ARRAY
 174: PUSH
 175: LD_VAR 0 6
 179: LESSEQUAL
 180: IFFALSE 222
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
 182: LD_ADDR_VAR 0 3
 186: PUSH
 187: LD_VAR 0 3
 191: PPUSH
 192: LD_VAR 0 3
 196: PUSH
 197: LD_INT 1
 199: PLUS
 200: PPUSH
 201: LD_VAR 0 4
 205: PUSH
 206: LD_VAR 0 6
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: PPUSH
 215: CALL_OW 2
 219: ST_TO_ADDR
 220: GO 302
// for j = 1 to result do
 222: LD_ADDR_VAR 0 5
 226: PUSH
 227: DOUBLE
 228: LD_INT 1
 230: DEC
 231: ST_TO_ADDR
 232: LD_VAR 0 3
 236: PUSH
 237: FOR_TO
 238: IFFALSE 300
// begin if tmp < result [ j ] [ 2 ] then
 240: LD_VAR 0 6
 244: PUSH
 245: LD_VAR 0 3
 249: PUSH
 250: LD_VAR 0 5
 254: ARRAY
 255: PUSH
 256: LD_INT 2
 258: ARRAY
 259: LESS
 260: IFFALSE 298
// begin result := Insert ( result , j , [ i , tmp ] ) ;
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: LD_VAR 0 3
 271: PPUSH
 272: LD_VAR 0 5
 276: PPUSH
 277: LD_VAR 0 4
 281: PUSH
 282: LD_VAR 0 6
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PPUSH
 291: CALL_OW 2
 295: ST_TO_ADDR
// break ;
 296: GO 300
// end ; end ;
 298: GO 237
 300: POP
 301: POP
// end ; end ;
 302: GO 62
 304: POP
 305: POP
// if result and not asc then
 306: LD_VAR 0 3
 310: PUSH
 311: LD_VAR 0 2
 315: NOT
 316: AND
 317: IFFALSE 392
// begin tmp := result ;
 319: LD_ADDR_VAR 0 6
 323: PUSH
 324: LD_VAR 0 3
 328: ST_TO_ADDR
// for i = tmp downto 1 do
 329: LD_ADDR_VAR 0 4
 333: PUSH
 334: DOUBLE
 335: LD_VAR 0 6
 339: INC
 340: ST_TO_ADDR
 341: LD_INT 1
 343: PUSH
 344: FOR_DOWNTO
 345: IFFALSE 390
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
 347: LD_ADDR_VAR 0 3
 351: PUSH
 352: LD_VAR 0 3
 356: PPUSH
 357: LD_VAR 0 6
 361: PUSH
 362: LD_VAR 0 4
 366: MINUS
 367: PUSH
 368: LD_INT 1
 370: PLUS
 371: PPUSH
 372: LD_VAR 0 6
 376: PUSH
 377: LD_VAR 0 4
 381: ARRAY
 382: PPUSH
 383: CALL_OW 1
 387: ST_TO_ADDR
 388: GO 344
 390: POP
 391: POP
// end ; end ;
 392: LD_VAR 0 3
 396: RET
// export function ReverseNumber ( number ) ; var i ; begin
 397: LD_INT 0
 399: PPUSH
 400: PPUSH
// result :=  ;
 401: LD_ADDR_VAR 0 2
 405: PUSH
 406: LD_STRING 
 408: ST_TO_ADDR
// while ( number ) do
 409: LD_VAR 0 1
 413: IFFALSE 451
// begin result := result & ( number mod 10 ) ;
 415: LD_ADDR_VAR 0 2
 419: PUSH
 420: LD_VAR 0 2
 424: PUSH
 425: LD_VAR 0 1
 429: PUSH
 430: LD_INT 10
 432: MOD
 433: STR
 434: ST_TO_ADDR
// number := number div 10 ;
 435: LD_ADDR_VAR 0 1
 439: PUSH
 440: LD_VAR 0 1
 444: PUSH
 445: LD_INT 10
 447: DIV
 448: ST_TO_ADDR
// end ;
 449: GO 409
// end ;
 451: LD_VAR 0 2
 455: RET
// export d ; every 0 0$01 do var un , un2 ;
 456: GO 458
 458: DISABLE
 459: LD_INT 0
 461: PPUSH
 462: PPUSH
// begin uc_side := 1 ;
 463: LD_ADDR_OWVAR 20
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// uc_nation := 2 ;
 471: LD_ADDR_OWVAR 21
 475: PUSH
 476: LD_INT 2
 478: ST_TO_ADDR
// hc_class := 1 ;
 479: LD_ADDR_OWVAR 28
 483: PUSH
 484: LD_INT 1
 486: ST_TO_ADDR
// hc_gallery :=  ;
 487: LD_ADDR_OWVAR 33
 491: PUSH
 492: LD_STRING 
 494: ST_TO_ADDR
// un := CreateHuman ;
 495: LD_ADDR_VAR 0 1
 499: PUSH
 500: CALL_OW 44
 504: ST_TO_ADDR
// d := CreateHuman ;
 505: LD_ADDR_EXP 6
 509: PUSH
 510: CALL_OW 44
 514: ST_TO_ADDR
// PlaceUnitXY ( un , 192 , 25 , false ) ;
 515: LD_VAR 0 1
 519: PPUSH
 520: LD_INT 192
 522: PPUSH
 523: LD_INT 25
 525: PPUSH
 526: LD_INT 0
 528: PPUSH
 529: CALL_OW 48
// PlaceUnitXY ( d , 190 , 25 , false ) ;
 533: LD_EXP 6
 537: PPUSH
 538: LD_INT 190
 540: PPUSH
 541: LD_INT 25
 543: PPUSH
 544: LD_INT 0
 546: PPUSH
 547: CALL_OW 48
// end ;
 551: PPOPN 2
 553: END
// export function WantPlant ( unit ) ; var task ; begin
 554: LD_INT 0
 556: PPUSH
 557: PPUSH
// result := false ;
 558: LD_ADDR_VAR 0 2
 562: PUSH
 563: LD_INT 0
 565: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
 566: LD_ADDR_VAR 0 3
 570: PUSH
 571: LD_VAR 0 1
 575: PPUSH
 576: CALL_OW 437
 580: ST_TO_ADDR
// if task then
 581: LD_VAR 0 3
 585: IFFALSE 613
// if task [ 1 ] [ 1 ] = p then
 587: LD_VAR 0 3
 591: PUSH
 592: LD_INT 1
 594: ARRAY
 595: PUSH
 596: LD_INT 1
 598: ARRAY
 599: PUSH
 600: LD_STRING p
 602: EQUAL
 603: IFFALSE 613
// result := true ;
 605: LD_ADDR_VAR 0 2
 609: PUSH
 610: LD_INT 1
 612: ST_TO_ADDR
// end ;
 613: LD_VAR 0 2
 617: RET
// export function RemoveResourcesFromArea ( area , materials ) ; var amount , i , tmp ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
 622: PPUSH
 623: PPUSH
// for i = 1 to 3 do
 624: LD_ADDR_VAR 0 5
 628: PUSH
 629: DOUBLE
 630: LD_INT 1
 632: DEC
 633: ST_TO_ADDR
 634: LD_INT 3
 636: PUSH
 637: FOR_TO
 638: IFFALSE 668
// amount := amount + GetResourceArea ( area , i ) ;
 640: LD_ADDR_VAR 0 4
 644: PUSH
 645: LD_VAR 0 4
 649: PUSH
 650: LD_VAR 0 1
 654: PPUSH
 655: LD_VAR 0 5
 659: PPUSH
 660: CALL_OW 287
 664: PLUS
 665: ST_TO_ADDR
 666: GO 637
 668: POP
 669: POP
// if amount < materials then
 670: LD_VAR 0 4
 674: PUSH
 675: LD_VAR 0 2
 679: LESS
 680: IFFALSE 684
// exit ;
 682: GO 718
// for i = 1 to 3 do
 684: LD_ADDR_VAR 0 5
 688: PUSH
 689: DOUBLE
 690: LD_INT 1
 692: DEC
 693: ST_TO_ADDR
 694: LD_INT 3
 696: PUSH
 697: FOR_TO
 698: IFFALSE 716
// EraseResourceArea ( area , i ) ;
 700: LD_VAR 0 1
 704: PPUSH
 705: LD_VAR 0 5
 709: PPUSH
 710: CALL_OW 286
 714: GO 697
 716: POP
 717: POP
// end ; end_of_file
 718: LD_VAR 0 3
 722: RET
// every 0 0$1 do
 723: GO 725
 725: DISABLE
// begin enable ;
 726: ENABLE
// CraneRepairBuild ( 3 , craneRepair , destroyedBuildings ) ;
 727: LD_INT 3
 729: PPUSH
 730: LD_INT 8
 732: PPUSH
 733: LD_EXP 1
 737: PPUSH
 738: CALL 5152 0 3
// end ;
 742: END
// every 5 5$1 do
 743: GO 745
 745: DISABLE
// begin end ;
 746: END
// every 0 0$1 do
 747: GO 749
 749: DISABLE
// begin end ;
 750: END
// every 0 0$01 trigger arabianMines do var i , p ;
 751: LD_EXP 4
 755: IFFALSE 958
 757: GO 759
 759: DISABLE
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
// begin enable ;
 764: ENABLE
// p := 1 ;
 765: LD_ADDR_VAR 0 2
 769: PUSH
 770: LD_INT 1
 772: ST_TO_ADDR
// for i = 1 to arabianMines / 2 do
 773: LD_ADDR_VAR 0 1
 777: PUSH
 778: DOUBLE
 779: LD_INT 1
 781: DEC
 782: ST_TO_ADDR
 783: LD_EXP 4
 787: PUSH
 788: LD_INT 2
 790: DIVREAL
 791: PUSH
 792: FOR_TO
 793: IFFALSE 956
// begin if FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_distxy , arabianMines [ p ] , arabianMines [ p + 1 ] , 2 ] ] ) then
 795: LD_INT 81
 797: PUSH
 798: LD_INT 2
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: PUSH
 805: LD_INT 92
 807: PUSH
 808: LD_EXP 4
 812: PUSH
 813: LD_VAR 0 2
 817: ARRAY
 818: PUSH
 819: LD_EXP 4
 823: PUSH
 824: LD_VAR 0 2
 828: PUSH
 829: LD_INT 1
 831: PLUS
 832: ARRAY
 833: PUSH
 834: LD_INT 2
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: PPUSH
 847: CALL_OW 69
 851: IFFALSE 940
// begin LaunchMineAtPos ( arabianMines [ p ] , arabianMines [ p + 1 ] , 2 ) ;
 853: LD_EXP 4
 857: PUSH
 858: LD_VAR 0 2
 862: ARRAY
 863: PPUSH
 864: LD_EXP 4
 868: PUSH
 869: LD_VAR 0 2
 873: PUSH
 874: LD_INT 1
 876: PLUS
 877: ARRAY
 878: PPUSH
 879: LD_INT 2
 881: PPUSH
 882: CALL_OW 456
// arabianMines := Delete ( arabianMines , p ) ;
 886: LD_ADDR_EXP 4
 890: PUSH
 891: LD_EXP 4
 895: PPUSH
 896: LD_VAR 0 2
 900: PPUSH
 901: CALL_OW 3
 905: ST_TO_ADDR
// arabianMines := Delete ( arabianMines , p ) ;
 906: LD_ADDR_EXP 4
 910: PUSH
 911: LD_EXP 4
 915: PPUSH
 916: LD_VAR 0 2
 920: PPUSH
 921: CALL_OW 3
 925: ST_TO_ADDR
// p := p - 2 ;
 926: LD_ADDR_VAR 0 2
 930: PUSH
 931: LD_VAR 0 2
 935: PUSH
 936: LD_INT 2
 938: MINUS
 939: ST_TO_ADDR
// end ; p := p + 2 ;
 940: LD_ADDR_VAR 0 2
 944: PUSH
 945: LD_VAR 0 2
 949: PUSH
 950: LD_INT 2
 952: PLUS
 953: ST_TO_ADDR
// end ;
 954: GO 792
 956: POP
 957: POP
// end ; end_of_file
 958: PPOPN 2
 960: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
 961: LD_INT 0
 963: PPUSH
 964: PPUSH
 965: PPUSH
// rnd = rand ( 1 , characters ) ;
 966: LD_ADDR_VAR 0 6
 970: PUSH
 971: LD_INT 1
 973: PPUSH
 974: LD_VAR 0 1
 978: PPUSH
 979: CALL_OW 12
 983: ST_TO_ADDR
// for i = 1 to characters do
 984: LD_ADDR_VAR 0 5
 988: PUSH
 989: DOUBLE
 990: LD_INT 1
 992: DEC
 993: ST_TO_ADDR
 994: LD_VAR 0 1
 998: PUSH
 999: FOR_TO
1000: IFFALSE 1110
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
1002: LD_VAR 0 5
1006: PUSH
1007: LD_VAR 0 6
1011: EQUAL
1012: PUSH
1013: LD_VAR 0 1
1017: PUSH
1018: LD_VAR 0 5
1022: ARRAY
1023: PPUSH
1024: CALL_OW 258
1028: PUSH
1029: LD_INT 1
1031: EQUAL
1032: AND
1033: IFFALSE 1055
// Say ( characters [ i ] , dialogMID ) ;
1035: LD_VAR 0 1
1039: PUSH
1040: LD_VAR 0 5
1044: ARRAY
1045: PPUSH
1046: LD_VAR 0 2
1050: PPUSH
1051: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
1055: LD_VAR 0 5
1059: PUSH
1060: LD_VAR 0 6
1064: EQUAL
1065: PUSH
1066: LD_VAR 0 1
1070: PUSH
1071: LD_VAR 0 5
1075: ARRAY
1076: PPUSH
1077: CALL_OW 258
1081: PUSH
1082: LD_INT 2
1084: EQUAL
1085: AND
1086: IFFALSE 1108
// Say ( characters [ i ] , dialogFID ) ;
1088: LD_VAR 0 1
1092: PUSH
1093: LD_VAR 0 5
1097: ARRAY
1098: PPUSH
1099: LD_VAR 0 3
1103: PPUSH
1104: CALL_OW 88
// end ;
1108: GO 999
1110: POP
1111: POP
// end ;
1112: LD_VAR 0 4
1116: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1117: LD_INT 0
1119: PPUSH
1120: PPUSH
1121: PPUSH
1122: PPUSH
// for i = 1 to count do
1123: LD_ADDR_VAR 0 8
1127: PUSH
1128: DOUBLE
1129: LD_INT 1
1131: DEC
1132: ST_TO_ADDR
1133: LD_VAR 0 6
1137: PUSH
1138: FOR_TO
1139: IFFALSE 1220
// begin uc_side = side ;
1141: LD_ADDR_OWVAR 20
1145: PUSH
1146: LD_VAR 0 1
1150: ST_TO_ADDR
// uc_nation = nation ;
1151: LD_ADDR_OWVAR 21
1155: PUSH
1156: LD_VAR 0 2
1160: ST_TO_ADDR
// hc_gallery =  ;
1161: LD_ADDR_OWVAR 33
1165: PUSH
1166: LD_STRING 
1168: ST_TO_ADDR
// hc_name =  ;
1169: LD_ADDR_OWVAR 26
1173: PUSH
1174: LD_STRING 
1176: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1177: LD_INT 0
1179: PPUSH
1180: LD_VAR 0 5
1184: PPUSH
1185: LD_VAR 0 4
1189: PPUSH
1190: CALL_OW 380
// un = CreateHuman ;
1194: LD_ADDR_VAR 0 10
1198: PUSH
1199: CALL_OW 44
1203: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1204: LD_VAR 0 10
1208: PPUSH
1209: LD_VAR 0 3
1213: PPUSH
1214: CALL_OW 52
// end ;
1218: GO 1138
1220: POP
1221: POP
// end ;
1222: LD_VAR 0 7
1226: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1227: LD_INT 0
1229: PPUSH
1230: PPUSH
// for i in charactersList do
1231: LD_ADDR_VAR 0 4
1235: PUSH
1236: LD_VAR 0 1
1240: PUSH
1241: FOR_IN
1242: IFFALSE 1282
// begin if IsOk ( i ) then
1244: LD_VAR 0 4
1248: PPUSH
1249: CALL_OW 302
1253: IFFALSE 1271
// begin SaveCharacters ( i , ident ) ;
1255: LD_VAR 0 4
1259: PPUSH
1260: LD_VAR 0 2
1264: PPUSH
1265: CALL_OW 38
// end else
1269: GO 1280
// begin DeleteCharacters ( ident ) ;
1271: LD_VAR 0 2
1275: PPUSH
1276: CALL_OW 40
// end ; end ;
1280: GO 1241
1282: POP
1283: POP
// end ;
1284: LD_VAR 0 3
1288: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
1289: LD_INT 0
1291: PPUSH
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
1297: PPUSH
1298: PPUSH
1299: PPUSH
1300: PPUSH
1301: PPUSH
// amChassisTab = [ ] ;
1302: LD_ADDR_VAR 0 18
1306: PUSH
1307: EMPTY
1308: ST_TO_ADDR
// arChassisTab = [ ] ;
1309: LD_ADDR_VAR 0 17
1313: PUSH
1314: EMPTY
1315: ST_TO_ADDR
// ruChassisTab = [ ] ;
1316: LD_ADDR_VAR 0 16
1320: PUSH
1321: EMPTY
1322: ST_TO_ADDR
// if nation = 1 then
1323: LD_VAR 0 5
1327: PUSH
1328: LD_INT 1
1330: EQUAL
1331: IFFALSE 1748
// begin for i := 1 to vehCount do
1333: LD_ADDR_VAR 0 12
1337: PUSH
1338: DOUBLE
1339: LD_INT 1
1341: DEC
1342: ST_TO_ADDR
1343: LD_VAR 0 3
1347: PUSH
1348: FOR_TO
1349: IFFALSE 1746
// begin uc_side = side ;
1351: LD_ADDR_OWVAR 20
1355: PUSH
1356: LD_VAR 0 2
1360: ST_TO_ADDR
// uc_nation = nation ;
1361: LD_ADDR_OWVAR 21
1365: PUSH
1366: LD_VAR 0 5
1370: ST_TO_ADDR
// vc_engine = vehengine ;
1371: LD_ADDR_OWVAR 39
1375: PUSH
1376: LD_VAR 0 6
1380: ST_TO_ADDR
// vc_control = vehcontrol ;
1381: LD_ADDR_OWVAR 38
1385: PUSH
1386: LD_VAR 0 7
1390: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
1391: LD_ADDR_OWVAR 40
1395: PUSH
1396: LD_VAR 0 10
1400: PUSH
1401: LD_INT 1
1403: PPUSH
1404: LD_VAR 0 10
1408: PPUSH
1409: CALL_OW 12
1413: ARRAY
1414: ST_TO_ADDR
// if vc_weapon = 2 or vc_weapon = 3 then
1415: LD_OWVAR 40
1419: PUSH
1420: LD_INT 2
1422: EQUAL
1423: PUSH
1424: LD_OWVAR 40
1428: PUSH
1429: LD_INT 3
1431: EQUAL
1432: OR
1433: IFFALSE 1486
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
1435: LD_ADDR_VAR 0 18
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 2
1445: PUSH
1446: LD_INT 3
1448: PUSH
1449: LD_INT 4
1451: PUSH
1452: LD_INT 5
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
1462: LD_ADDR_OWVAR 37
1466: PUSH
1467: LD_VAR 0 18
1471: PUSH
1472: LD_INT 1
1474: PPUSH
1475: LD_VAR 0 18
1479: PPUSH
1480: CALL_OW 12
1484: ARRAY
1485: ST_TO_ADDR
// end ; if vc_weapon = 4 or vc_weapon = 5 or vc_weapon = 9 or vc_weapon = 11 or vc_weapon = 7 then
1486: LD_OWVAR 40
1490: PUSH
1491: LD_INT 4
1493: EQUAL
1494: PUSH
1495: LD_OWVAR 40
1499: PUSH
1500: LD_INT 5
1502: EQUAL
1503: OR
1504: PUSH
1505: LD_OWVAR 40
1509: PUSH
1510: LD_INT 9
1512: EQUAL
1513: OR
1514: PUSH
1515: LD_OWVAR 40
1519: PUSH
1520: LD_INT 11
1522: EQUAL
1523: OR
1524: PUSH
1525: LD_OWVAR 40
1529: PUSH
1530: LD_INT 7
1532: EQUAL
1533: OR
1534: IFFALSE 1583
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
1536: LD_ADDR_VAR 0 18
1540: PUSH
1541: LD_INT 2
1543: PUSH
1544: LD_INT 3
1546: PUSH
1547: LD_INT 4
1549: PUSH
1550: LD_INT 5
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
1559: LD_ADDR_OWVAR 37
1563: PUSH
1564: LD_VAR 0 18
1568: PUSH
1569: LD_INT 1
1571: PPUSH
1572: LD_VAR 0 18
1576: PPUSH
1577: CALL_OW 12
1581: ARRAY
1582: ST_TO_ADDR
// end ; if vc_weapon = 8 or vc_weapon = 6 or vc_weapon = 10 then
1583: LD_OWVAR 40
1587: PUSH
1588: LD_INT 8
1590: EQUAL
1591: PUSH
1592: LD_OWVAR 40
1596: PUSH
1597: LD_INT 6
1599: EQUAL
1600: OR
1601: PUSH
1602: LD_OWVAR 40
1606: PUSH
1607: LD_INT 10
1609: EQUAL
1610: OR
1611: IFFALSE 1652
// begin amChassisTab = [ 4 , 5 ] ;
1613: LD_ADDR_VAR 0 18
1617: PUSH
1618: LD_INT 4
1620: PUSH
1621: LD_INT 5
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
1628: LD_ADDR_OWVAR 37
1632: PUSH
1633: LD_VAR 0 18
1637: PUSH
1638: LD_INT 1
1640: PPUSH
1641: LD_VAR 0 18
1645: PPUSH
1646: CALL_OW 12
1650: ARRAY
1651: ST_TO_ADDR
// end ; veh = CreateVehicle ;
1652: LD_ADDR_VAR 0 15
1656: PUSH
1657: CALL_OW 45
1661: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1662: LD_VAR 0 15
1666: PPUSH
1667: LD_VAR 0 1
1671: PPUSH
1672: LD_INT 0
1674: PPUSH
1675: CALL_OW 49
// if vehcontrol = 1 then
1679: LD_VAR 0 7
1683: PUSH
1684: LD_INT 1
1686: EQUAL
1687: IFFALSE 1744
// begin hc_gallery =  ;
1689: LD_ADDR_OWVAR 33
1693: PUSH
1694: LD_STRING 
1696: ST_TO_ADDR
// hc_name =  ;
1697: LD_ADDR_OWVAR 26
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
1705: LD_INT 0
1707: PPUSH
1708: LD_INT 3
1710: PPUSH
1711: LD_VAR 0 4
1715: PPUSH
1716: CALL_OW 380
// un = CreateHuman ;
1720: LD_ADDR_VAR 0 14
1724: PUSH
1725: CALL_OW 44
1729: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1730: LD_VAR 0 14
1734: PPUSH
1735: LD_VAR 0 15
1739: PPUSH
1740: CALL_OW 52
// end ; end ;
1744: GO 1348
1746: POP
1747: POP
// end ; if nation = 2 then
1748: LD_VAR 0 5
1752: PUSH
1753: LD_INT 2
1755: EQUAL
1756: IFFALSE 2112
// begin for i := 1 to vehCount do
1758: LD_ADDR_VAR 0 12
1762: PUSH
1763: DOUBLE
1764: LD_INT 1
1766: DEC
1767: ST_TO_ADDR
1768: LD_VAR 0 3
1772: PUSH
1773: FOR_TO
1774: IFFALSE 2110
// begin uc_side = side ;
1776: LD_ADDR_OWVAR 20
1780: PUSH
1781: LD_VAR 0 2
1785: ST_TO_ADDR
// uc_nation = nation ;
1786: LD_ADDR_OWVAR 21
1790: PUSH
1791: LD_VAR 0 5
1795: ST_TO_ADDR
// vc_engine = vehengine ;
1796: LD_ADDR_OWVAR 39
1800: PUSH
1801: LD_VAR 0 6
1805: ST_TO_ADDR
// vc_control = vehcontrol ;
1806: LD_ADDR_OWVAR 38
1810: PUSH
1811: LD_VAR 0 7
1815: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
1816: LD_ADDR_OWVAR 40
1820: PUSH
1821: LD_VAR 0 9
1825: PUSH
1826: LD_INT 1
1828: PPUSH
1829: LD_VAR 0 9
1833: PPUSH
1834: CALL_OW 12
1838: ARRAY
1839: ST_TO_ADDR
// if vc_weapon = 24 or vc_weapon = 22 or vc_weapon = 23 or vc_weapon = 30 then
1840: LD_OWVAR 40
1844: PUSH
1845: LD_INT 24
1847: EQUAL
1848: PUSH
1849: LD_OWVAR 40
1853: PUSH
1854: LD_INT 22
1856: EQUAL
1857: OR
1858: PUSH
1859: LD_OWVAR 40
1863: PUSH
1864: LD_INT 23
1866: EQUAL
1867: OR
1868: PUSH
1869: LD_OWVAR 40
1873: PUSH
1874: LD_INT 30
1876: EQUAL
1877: OR
1878: IFFALSE 1927
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
1880: LD_ADDR_VAR 0 17
1884: PUSH
1885: LD_INT 11
1887: PUSH
1888: LD_INT 12
1890: PUSH
1891: LD_INT 13
1893: PUSH
1894: LD_INT 14
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
1903: LD_ADDR_OWVAR 37
1907: PUSH
1908: LD_VAR 0 17
1912: PUSH
1913: LD_INT 1
1915: PPUSH
1916: LD_VAR 0 17
1920: PPUSH
1921: CALL_OW 12
1925: ARRAY
1926: ST_TO_ADDR
// end ; if vc_weapon = 29 or vc_weapon = 28 or vc_weapon = 27 or vc_weapon = 26 or vc_weapon = 25 then
1927: LD_OWVAR 40
1931: PUSH
1932: LD_INT 29
1934: EQUAL
1935: PUSH
1936: LD_OWVAR 40
1940: PUSH
1941: LD_INT 28
1943: EQUAL
1944: OR
1945: PUSH
1946: LD_OWVAR 40
1950: PUSH
1951: LD_INT 27
1953: EQUAL
1954: OR
1955: PUSH
1956: LD_OWVAR 40
1960: PUSH
1961: LD_INT 26
1963: EQUAL
1964: OR
1965: PUSH
1966: LD_OWVAR 40
1970: PUSH
1971: LD_INT 25
1973: EQUAL
1974: OR
1975: IFFALSE 2016
// begin arChassisTab = [ 13 , 14 ] ;
1977: LD_ADDR_VAR 0 17
1981: PUSH
1982: LD_INT 13
1984: PUSH
1985: LD_INT 14
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
1992: LD_ADDR_OWVAR 37
1996: PUSH
1997: LD_VAR 0 17
2001: PUSH
2002: LD_INT 1
2004: PPUSH
2005: LD_VAR 0 17
2009: PPUSH
2010: CALL_OW 12
2014: ARRAY
2015: ST_TO_ADDR
// end ; veh = CreateVehicle ;
2016: LD_ADDR_VAR 0 15
2020: PUSH
2021: CALL_OW 45
2025: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
2026: LD_VAR 0 15
2030: PPUSH
2031: LD_VAR 0 1
2035: PPUSH
2036: LD_INT 0
2038: PPUSH
2039: CALL_OW 49
// if vehcontrol = 1 then
2043: LD_VAR 0 7
2047: PUSH
2048: LD_INT 1
2050: EQUAL
2051: IFFALSE 2108
// begin hc_gallery =  ;
2053: LD_ADDR_OWVAR 33
2057: PUSH
2058: LD_STRING 
2060: ST_TO_ADDR
// hc_name =  ;
2061: LD_ADDR_OWVAR 26
2065: PUSH
2066: LD_STRING 
2068: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
2069: LD_INT 0
2071: PPUSH
2072: LD_INT 3
2074: PPUSH
2075: LD_VAR 0 4
2079: PPUSH
2080: CALL_OW 380
// un = CreateHuman ;
2084: LD_ADDR_VAR 0 14
2088: PUSH
2089: CALL_OW 44
2093: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2094: LD_VAR 0 14
2098: PPUSH
2099: LD_VAR 0 15
2103: PPUSH
2104: CALL_OW 52
// end ; end ;
2108: GO 1773
2110: POP
2111: POP
// end ; if nation = 3 then
2112: LD_VAR 0 5
2116: PUSH
2117: LD_INT 3
2119: EQUAL
2120: IFFALSE 2478
// begin for i := 1 to vehCount do
2122: LD_ADDR_VAR 0 12
2126: PUSH
2127: DOUBLE
2128: LD_INT 1
2130: DEC
2131: ST_TO_ADDR
2132: LD_VAR 0 3
2136: PUSH
2137: FOR_TO
2138: IFFALSE 2476
// begin uc_side = side ;
2140: LD_ADDR_OWVAR 20
2144: PUSH
2145: LD_VAR 0 2
2149: ST_TO_ADDR
// uc_nation = nation ;
2150: LD_ADDR_OWVAR 21
2154: PUSH
2155: LD_VAR 0 5
2159: ST_TO_ADDR
// vc_engine = vehengine ;
2160: LD_ADDR_OWVAR 39
2164: PUSH
2165: LD_VAR 0 6
2169: ST_TO_ADDR
// vc_control = vehcontrol ;
2170: LD_ADDR_OWVAR 38
2174: PUSH
2175: LD_VAR 0 7
2179: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
2180: LD_ADDR_OWVAR 40
2184: PUSH
2185: LD_VAR 0 8
2189: PUSH
2190: LD_INT 1
2192: PPUSH
2193: LD_VAR 0 8
2197: PPUSH
2198: CALL_OW 12
2202: ARRAY
2203: ST_TO_ADDR
// for j = 1 to RuWeapons do
2204: LD_ADDR_VAR 0 13
2208: PUSH
2209: DOUBLE
2210: LD_INT 1
2212: DEC
2213: ST_TO_ADDR
2214: LD_VAR 0 8
2218: PUSH
2219: FOR_TO
2220: IFFALSE 2380
// begin if vc_weapon = 42 or vc_weapon = 43 or vc_weapon = 44 or vc_weapon = 45 or vc_weapon = 49 then
2222: LD_OWVAR 40
2226: PUSH
2227: LD_INT 42
2229: EQUAL
2230: PUSH
2231: LD_OWVAR 40
2235: PUSH
2236: LD_INT 43
2238: EQUAL
2239: OR
2240: PUSH
2241: LD_OWVAR 40
2245: PUSH
2246: LD_INT 44
2248: EQUAL
2249: OR
2250: PUSH
2251: LD_OWVAR 40
2255: PUSH
2256: LD_INT 45
2258: EQUAL
2259: OR
2260: PUSH
2261: LD_OWVAR 40
2265: PUSH
2266: LD_INT 49
2268: EQUAL
2269: OR
2270: IFFALSE 2319
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
2272: LD_ADDR_VAR 0 16
2276: PUSH
2277: LD_INT 21
2279: PUSH
2280: LD_INT 22
2282: PUSH
2283: LD_INT 23
2285: PUSH
2286: LD_INT 24
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
2295: LD_ADDR_OWVAR 37
2299: PUSH
2300: LD_VAR 0 16
2304: PUSH
2305: LD_INT 1
2307: PPUSH
2308: LD_VAR 0 16
2312: PPUSH
2313: CALL_OW 12
2317: ARRAY
2318: ST_TO_ADDR
// end ; if vc_weapon = 46 or vc_weapon = 47 then
2319: LD_OWVAR 40
2323: PUSH
2324: LD_INT 46
2326: EQUAL
2327: PUSH
2328: LD_OWVAR 40
2332: PUSH
2333: LD_INT 47
2335: EQUAL
2336: OR
2337: IFFALSE 2378
// begin ruChassisTab = [ 23 , 24 ] ;
2339: LD_ADDR_VAR 0 16
2343: PUSH
2344: LD_INT 23
2346: PUSH
2347: LD_INT 24
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
2354: LD_ADDR_OWVAR 37
2358: PUSH
2359: LD_VAR 0 16
2363: PUSH
2364: LD_INT 1
2366: PPUSH
2367: LD_VAR 0 16
2371: PPUSH
2372: CALL_OW 12
2376: ARRAY
2377: ST_TO_ADDR
// end ; end ;
2378: GO 2219
2380: POP
2381: POP
// veh = CreateVehicle ;
2382: LD_ADDR_VAR 0 15
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
2392: LD_VAR 0 15
2396: PPUSH
2397: LD_VAR 0 1
2401: PPUSH
2402: LD_INT 0
2404: PPUSH
2405: CALL_OW 49
// if vehcontrol = 1 then
2409: LD_VAR 0 7
2413: PUSH
2414: LD_INT 1
2416: EQUAL
2417: IFFALSE 2474
// begin hc_gallery =  ;
2419: LD_ADDR_OWVAR 33
2423: PUSH
2424: LD_STRING 
2426: ST_TO_ADDR
// hc_name =  ;
2427: LD_ADDR_OWVAR 26
2431: PUSH
2432: LD_STRING 
2434: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
2435: LD_INT 0
2437: PPUSH
2438: LD_INT 3
2440: PPUSH
2441: LD_VAR 0 4
2445: PPUSH
2446: CALL_OW 380
// un = CreateHuman ;
2450: LD_ADDR_VAR 0 14
2454: PUSH
2455: CALL_OW 44
2459: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2460: LD_VAR 0 14
2464: PPUSH
2465: LD_VAR 0 15
2469: PPUSH
2470: CALL_OW 52
// end ; end ;
2474: GO 2137
2476: POP
2477: POP
// end ; repeat wait ( 0 0$1 ) ;
2478: LD_INT 35
2480: PPUSH
2481: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
2485: LD_ADDR_VAR 0 19
2489: PUSH
2490: LD_INT 22
2492: PUSH
2493: LD_VAR 0 2
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 24
2514: PUSH
2515: LD_INT 650
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: LIST
2526: PPUSH
2527: CALL_OW 69
2531: ST_TO_ADDR
// if vehicleOK_list > 0 then
2532: LD_VAR 0 19
2536: PUSH
2537: LD_INT 0
2539: GREATER
2540: IFFALSE 2731
// begin for i in vehicleOK_list do
2542: LD_ADDR_VAR 0 12
2546: PUSH
2547: LD_VAR 0 19
2551: PUSH
2552: FOR_IN
2553: IFFALSE 2729
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , side ] ) , i ) ;
2555: LD_ADDR_VAR 0 20
2559: PUSH
2560: LD_INT 81
2562: PUSH
2563: LD_VAR 0 2
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PPUSH
2572: CALL_OW 69
2576: PPUSH
2577: LD_VAR 0 12
2581: PPUSH
2582: CALL_OW 74
2586: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
2587: LD_ADDR_VAR 0 21
2591: PUSH
2592: LD_INT 81
2594: PUSH
2595: LD_VAR 0 2
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 2
2606: PUSH
2607: LD_INT 59
2609: PUSH
2610: EMPTY
2611: LIST
2612: PUSH
2613: LD_INT 21
2615: PUSH
2616: LD_INT 1
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: LD_INT 21
2625: PUSH
2626: LD_INT 2
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: LIST
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: EMPTY
2644: LIST
2645: PPUSH
2646: CALL_OW 69
2650: PPUSH
2651: LD_VAR 0 12
2655: PPUSH
2656: CALL_OW 74
2660: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
2661: LD_VAR 0 12
2665: PPUSH
2666: LD_VAR 0 20
2670: PPUSH
2671: CALL_OW 296
2675: PUSH
2676: LD_INT 8
2678: PLUS
2679: PUSH
2680: LD_VAR 0 12
2684: PPUSH
2685: LD_VAR 0 21
2689: PPUSH
2690: CALL_OW 296
2694: LESS
2695: IFFALSE 2713
// ComAttackUnit ( i , target1 ) else
2697: LD_VAR 0 12
2701: PPUSH
2702: LD_VAR 0 20
2706: PPUSH
2707: CALL_OW 115
2711: GO 2727
// ComAttackUnit ( i , target2 ) ;
2713: LD_VAR 0 12
2717: PPUSH
2718: LD_VAR 0 21
2722: PPUSH
2723: CALL_OW 115
// end ;
2727: GO 2552
2729: POP
2730: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_empty ] ] ) = 0 ;
2731: LD_INT 22
2733: PUSH
2734: LD_VAR 0 2
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PUSH
2743: LD_INT 21
2745: PUSH
2746: LD_INT 2
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 24
2755: PUSH
2756: LD_INT 250
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 58
2765: PUSH
2766: EMPTY
2767: LIST
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: LIST
2773: LIST
2774: PPUSH
2775: CALL_OW 69
2779: PUSH
2780: LD_INT 0
2782: EQUAL
2783: IFFALSE 2478
// end ;
2785: LD_VAR 0 11
2789: RET
// every 0 0$1 do
2790: GO 2792
2792: DISABLE
// begin enable ;
2793: ENABLE
// end ;
2794: END
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
2795: LD_INT 0
2797: PPUSH
2798: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
2799: LD_INT 22
2801: PUSH
2802: LD_VAR 0 1
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: LD_INT 21
2813: PUSH
2814: LD_INT 2
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PPUSH
2825: CALL_OW 69
2829: PUSH
2830: LD_VAR 0 3
2834: LESSEQUAL
2835: IFFALSE 2902
// for i = 1 to vehCount do
2837: LD_ADDR_VAR 0 9
2841: PUSH
2842: DOUBLE
2843: LD_INT 1
2845: DEC
2846: ST_TO_ADDR
2847: LD_VAR 0 3
2851: PUSH
2852: FOR_TO
2853: IFFALSE 2900
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
2855: LD_VAR 0 2
2859: PPUSH
2860: LD_VAR 0 7
2864: PPUSH
2865: LD_VAR 0 5
2869: PPUSH
2870: LD_VAR 0 6
2874: PPUSH
2875: LD_VAR 0 4
2879: PUSH
2880: LD_INT 1
2882: PPUSH
2883: LD_VAR 0 4
2887: PPUSH
2888: CALL_OW 12
2892: ARRAY
2893: PPUSH
2894: CALL_OW 185
2898: GO 2852
2900: POP
2901: POP
// end ;
2902: LD_VAR 0 8
2906: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
2907: LD_INT 0
2909: PPUSH
2910: PPUSH
2911: PPUSH
2912: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
2913: LD_ADDR_VAR 0 8
2917: PUSH
2918: LD_INT 22
2920: PUSH
2921: LD_VAR 0 1
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: PUSH
2930: LD_INT 21
2932: PUSH
2933: LD_INT 2
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: PUSH
2940: LD_INT 3
2942: PUSH
2943: LD_INT 24
2945: PUSH
2946: LD_INT 650
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: LIST
2961: PPUSH
2962: CALL_OW 69
2966: ST_TO_ADDR
// if damageVehicles > 0 then
2967: LD_VAR 0 8
2971: PUSH
2972: LD_INT 0
2974: GREATER
2975: IFFALSE 2996
// ComMoveXY ( damageVehicles , repX , repY ) ;
2977: LD_VAR 0 8
2981: PPUSH
2982: LD_VAR 0 3
2986: PPUSH
2987: LD_VAR 0 4
2991: PPUSH
2992: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
2996: LD_VAR 0 8
3000: PPUSH
3001: LD_INT 95
3003: PUSH
3004: LD_VAR 0 2
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: PUSH
3013: LD_INT 3
3015: PUSH
3016: LD_INT 58
3018: PUSH
3019: EMPTY
3020: LIST
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PPUSH
3030: CALL_OW 72
3034: PUSH
3035: LD_INT 0
3037: GREATER
3038: IFFALSE 3105
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
3040: LD_ADDR_VAR 0 6
3044: PUSH
3045: LD_VAR 0 8
3049: PPUSH
3050: LD_INT 95
3052: PUSH
3053: LD_VAR 0 2
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 3
3064: PUSH
3065: LD_INT 58
3067: PUSH
3068: EMPTY
3069: LIST
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PPUSH
3079: CALL_OW 72
3083: PUSH
3084: FOR_IN
3085: IFFALSE 3103
// ComExitVehicle ( UnitsInside ( i ) ) ;
3087: LD_VAR 0 6
3091: PPUSH
3092: CALL_OW 313
3096: PPUSH
3097: CALL_OW 121
3101: GO 3084
3103: POP
3104: POP
// end ;
3105: LD_VAR 0 5
3109: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
3110: LD_INT 0
3112: PPUSH
3113: PPUSH
3114: PPUSH
3115: PPUSH
3116: PPUSH
3117: PPUSH
3118: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
3119: LD_ADDR_VAR 0 8
3123: PUSH
3124: LD_INT 22
3126: PUSH
3127: LD_VAR 0 1
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 21
3138: PUSH
3139: LD_INT 2
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: LD_INT 24
3148: PUSH
3149: LD_INT 650
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: LIST
3160: PPUSH
3161: CALL_OW 69
3165: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 5 then
3166: LD_INT 22
3168: PUSH
3169: LD_VAR 0 1
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: LD_INT 21
3180: PUSH
3181: LD_INT 2
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 24
3190: PUSH
3191: LD_INT 1000
3193: PUSH
3194: EMPTY
3195: LIST
3196: LIST
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: LIST
3202: PPUSH
3203: CALL_OW 69
3207: PUSH
3208: LD_INT 5
3210: EQUAL
3211: IFFALSE 3668
// repeat wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
3220: LD_ADDR_VAR 0 8
3224: PUSH
3225: LD_INT 22
3227: PUSH
3228: LD_VAR 0 1
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: LD_INT 21
3239: PUSH
3240: LD_INT 2
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: LD_INT 24
3249: PUSH
3250: LD_INT 650
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: PPUSH
3262: CALL_OW 69
3266: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
3267: LD_INT 22
3269: PUSH
3270: LD_VAR 0 1
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PUSH
3279: LD_INT 95
3281: PUSH
3282: LD_VAR 0 2
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: NOT
3300: PUSH
3301: LD_VAR 0 11
3305: PUSH
3306: LD_INT 0
3308: EQUAL
3309: AND
3310: IFFALSE 3365
// for i := 1 to wayX do
3312: LD_ADDR_VAR 0 6
3316: PUSH
3317: DOUBLE
3318: LD_INT 1
3320: DEC
3321: ST_TO_ADDR
3322: LD_VAR 0 3
3326: PUSH
3327: FOR_TO
3328: IFFALSE 3363
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
3330: LD_VAR 0 8
3334: PPUSH
3335: LD_VAR 0 3
3339: PUSH
3340: LD_VAR 0 6
3344: ARRAY
3345: PPUSH
3346: LD_VAR 0 4
3350: PUSH
3351: LD_VAR 0 6
3355: ARRAY
3356: PPUSH
3357: CALL_OW 174
3361: GO 3327
3363: POP
3364: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
3365: LD_INT 22
3367: PUSH
3368: LD_VAR 0 1
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 95
3379: PUSH
3380: LD_VAR 0 2
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PPUSH
3393: CALL_OW 69
3397: IFFALSE 3621
// begin seeEnemy = 1 ;
3399: LD_ADDR_VAR 0 11
3403: PUSH
3404: LD_INT 1
3406: ST_TO_ADDR
// for j in vehiclesOK do
3407: LD_ADDR_VAR 0 7
3411: PUSH
3412: LD_VAR 0 8
3416: PUSH
3417: FOR_IN
3418: IFFALSE 3619
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3420: LD_ADDR_VAR 0 9
3424: PUSH
3425: LD_INT 81
3427: PUSH
3428: LD_VAR 0 1
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 101
3439: PUSH
3440: LD_INT 1
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: PPUSH
3456: LD_VAR 0 7
3460: PPUSH
3461: CALL_OW 74
3465: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
3466: LD_ADDR_VAR 0 10
3470: PUSH
3471: LD_INT 81
3473: PUSH
3474: LD_VAR 0 1
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PUSH
3483: LD_INT 101
3485: PUSH
3486: LD_INT 1
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 2
3495: PUSH
3496: LD_INT 59
3498: PUSH
3499: EMPTY
3500: LIST
3501: PUSH
3502: LD_INT 21
3504: PUSH
3505: LD_INT 1
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: PUSH
3512: LD_INT 21
3514: PUSH
3515: LD_INT 2
3517: PUSH
3518: EMPTY
3519: LIST
3520: LIST
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: LIST
3532: PUSH
3533: EMPTY
3534: LIST
3535: PPUSH
3536: CALL_OW 69
3540: PPUSH
3541: LD_VAR 0 7
3545: PPUSH
3546: CALL_OW 74
3550: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
3551: LD_VAR 0 7
3555: PPUSH
3556: LD_VAR 0 9
3560: PPUSH
3561: CALL_OW 296
3565: PUSH
3566: LD_INT 8
3568: PLUS
3569: PUSH
3570: LD_VAR 0 7
3574: PPUSH
3575: LD_VAR 0 10
3579: PPUSH
3580: CALL_OW 296
3584: LESS
3585: IFFALSE 3603
// ComAttackUnit ( j , target1 ) else
3587: LD_VAR 0 7
3591: PPUSH
3592: LD_VAR 0 9
3596: PPUSH
3597: CALL_OW 115
3601: GO 3617
// ComAttackUnit ( j , target2 ) ;
3603: LD_VAR 0 7
3607: PPUSH
3608: LD_VAR 0 10
3612: PPUSH
3613: CALL_OW 115
// end ;
3617: GO 3417
3619: POP
3620: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
3621: LD_INT 22
3623: PUSH
3624: LD_VAR 0 1
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: PUSH
3633: LD_INT 21
3635: PUSH
3636: LD_INT 2
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 24
3645: PUSH
3646: LD_INT 1000
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: LIST
3657: PPUSH
3658: CALL_OW 69
3662: PUSH
3663: LD_INT 0
3665: EQUAL
3666: IFFALSE 3213
// seeEnemy = 0 ;
3668: LD_ADDR_VAR 0 11
3672: PUSH
3673: LD_INT 0
3675: ST_TO_ADDR
// end ;
3676: LD_VAR 0 5
3680: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
3681: LD_INT 0
3683: PPUSH
3684: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
3685: LD_INT 22
3687: PUSH
3688: LD_VAR 0 1
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 25
3699: PUSH
3700: LD_INT 2
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: PPUSH
3711: CALL_OW 69
3715: PUSH
3716: LD_INT 0
3718: GREATER
3719: PUSH
3720: LD_INT 22
3722: PUSH
3723: LD_VAR 0 1
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: PUSH
3732: LD_INT 21
3734: PUSH
3735: LD_INT 3
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: PUSH
3742: LD_INT 3
3744: PUSH
3745: LD_INT 24
3747: PUSH
3748: LD_INT 1000
3750: PUSH
3751: EMPTY
3752: LIST
3753: LIST
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: LIST
3763: PPUSH
3764: CALL_OW 69
3768: PUSH
3769: LD_INT 0
3771: EQUAL
3772: AND
3773: PUSH
3774: LD_VAR 0 2
3778: PUSH
3779: LD_INT 0
3781: GREATER
3782: AND
3783: IFFALSE 3882
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
3785: LD_ADDR_VAR 0 4
3789: PUSH
3790: LD_INT 22
3792: PUSH
3793: LD_VAR 0 1
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 25
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PPUSH
3816: CALL_OW 69
3820: PUSH
3821: FOR_IN
3822: IFFALSE 3880
// begin AddComExitBuilding ( i ) ;
3824: LD_VAR 0 4
3828: PPUSH
3829: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
3833: LD_VAR 0 4
3837: PPUSH
3838: LD_VAR 0 2
3842: PUSH
3843: LD_INT 1
3845: ARRAY
3846: PPUSH
3847: LD_VAR 0 2
3851: PUSH
3852: LD_INT 2
3854: ARRAY
3855: PPUSH
3856: LD_VAR 0 2
3860: PUSH
3861: LD_INT 3
3863: ARRAY
3864: PPUSH
3865: LD_VAR 0 2
3869: PUSH
3870: LD_INT 4
3872: ARRAY
3873: PPUSH
3874: CALL_OW 205
// end ;
3878: GO 3821
3880: POP
3881: POP
// end ; end ;
3882: LD_VAR 0 3
3886: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
3887: LD_INT 0
3889: PPUSH
3890: PPUSH
3891: PPUSH
3892: PPUSH
3893: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
3894: LD_ADDR_VAR 0 6
3898: PUSH
3899: LD_INT 22
3901: PUSH
3902: LD_VAR 0 1
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: PUSH
3911: LD_INT 2
3913: PUSH
3914: LD_INT 30
3916: PUSH
3917: LD_INT 31
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PUSH
3924: LD_INT 30
3926: PUSH
3927: LD_INT 32
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PUSH
3934: LD_INT 30
3936: PUSH
3937: LD_INT 33
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 30
3946: PUSH
3947: LD_INT 4
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 30
3956: PUSH
3957: LD_INT 5
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: PPUSH
3976: CALL_OW 69
3980: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
3981: LD_ADDR_VAR 0 7
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_VAR 0 2
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: PUSH
3998: LD_INT 21
4000: PUSH
4001: LD_INT 3
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PUSH
4008: LD_INT 58
4010: PUSH
4011: EMPTY
4012: LIST
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: LIST
4018: PPUSH
4019: CALL_OW 69
4023: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
4024: LD_VAR 0 6
4028: PUSH
4029: LD_INT 0
4031: GREATER
4032: PUSH
4033: LD_VAR 0 7
4037: PUSH
4038: LD_INT 0
4040: GREATER
4041: AND
4042: IFFALSE 4112
// begin for i in turretsList do
4044: LD_ADDR_VAR 0 4
4048: PUSH
4049: LD_VAR 0 6
4053: PUSH
4054: FOR_IN
4055: IFFALSE 4110
// begin for j in enemyBuildings do
4057: LD_ADDR_VAR 0 5
4061: PUSH
4062: LD_VAR 0 7
4066: PUSH
4067: FOR_IN
4068: IFFALSE 4106
// begin if GetDistUnits ( i , j ) < 20 then
4070: LD_VAR 0 4
4074: PPUSH
4075: LD_VAR 0 5
4079: PPUSH
4080: CALL_OW 296
4084: PUSH
4085: LD_INT 20
4087: LESS
4088: IFFALSE 4104
// begin ComAttackUnit ( i , j ) ;
4090: LD_VAR 0 4
4094: PPUSH
4095: LD_VAR 0 5
4099: PPUSH
4100: CALL_OW 115
// end ; end ;
4104: GO 4067
4106: POP
4107: POP
// end ;
4108: GO 4054
4110: POP
4111: POP
// end ; end ;
4112: LD_VAR 0 3
4116: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
4121: PPUSH
4122: PPUSH
4123: PPUSH
4124: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
4125: LD_ADDR_VAR 0 7
4129: PUSH
4130: LD_INT 22
4132: PUSH
4133: LD_VAR 0 1
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 25
4144: PUSH
4145: LD_INT 9
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PPUSH
4156: CALL_OW 69
4160: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4161: LD_ADDR_VAR 0 8
4165: PUSH
4166: LD_INT 22
4168: PUSH
4169: LD_VAR 0 2
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: LD_INT 3
4180: PUSH
4181: LD_INT 21
4183: PUSH
4184: LD_INT 3
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: PPUSH
4199: CALL_OW 69
4203: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
4204: LD_ADDR_VAR 0 5
4208: PUSH
4209: LD_INT 1
4211: PPUSH
4212: LD_INT 3
4214: PPUSH
4215: CALL_OW 12
4219: ST_TO_ADDR
// for i = 1 to list do
4220: LD_ADDR_VAR 0 6
4224: PUSH
4225: DOUBLE
4226: LD_INT 1
4228: DEC
4229: ST_TO_ADDR
4230: LD_VAR 0 7
4234: PUSH
4235: FOR_TO
4236: IFFALSE 4418
// for ta in filter do
4238: LD_ADDR_VAR 0 4
4242: PUSH
4243: LD_VAR 0 8
4247: PUSH
4248: FOR_IN
4249: IFFALSE 4414
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
4251: LD_VAR 0 7
4255: PUSH
4256: LD_VAR 0 6
4260: ARRAY
4261: PPUSH
4262: LD_VAR 0 4
4266: PPUSH
4267: CALL_OW 296
4271: PUSH
4272: LD_INT 13
4274: LESSEQUAL
4275: IFFALSE 4412
// begin case c of 1 :
4277: LD_VAR 0 5
4281: PUSH
4282: LD_INT 1
4284: DOUBLE
4285: EQUAL
4286: IFTRUE 4290
4288: GO 4328
4290: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
4291: LD_VAR 0 7
4295: PUSH
4296: LD_VAR 0 6
4300: ARRAY
4301: PPUSH
4302: LD_VAR 0 4
4306: PPUSH
4307: CALL_OW 250
4311: PPUSH
4312: LD_VAR 0 4
4316: PPUSH
4317: CALL_OW 251
4321: PPUSH
4322: CALL_OW 154
4326: GO 4412
4328: LD_INT 2
4330: DOUBLE
4331: EQUAL
4332: IFTRUE 4336
4334: GO 4400
4336: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
4337: LD_VAR 0 7
4341: PUSH
4342: LD_VAR 0 6
4346: ARRAY
4347: PPUSH
4348: LD_VAR 0 4
4352: PPUSH
4353: CALL_OW 250
4357: PUSH
4358: LD_INT 1
4360: NEG
4361: PPUSH
4362: LD_INT 1
4364: PPUSH
4365: CALL_OW 12
4369: PLUS
4370: PPUSH
4371: LD_VAR 0 4
4375: PPUSH
4376: CALL_OW 251
4380: PUSH
4381: LD_INT 1
4383: NEG
4384: PPUSH
4385: LD_INT 1
4387: PPUSH
4388: CALL_OW 12
4392: PLUS
4393: PPUSH
4394: CALL_OW 153
4398: GO 4412
4400: LD_INT 3
4402: DOUBLE
4403: EQUAL
4404: IFTRUE 4408
4406: GO 4411
4408: POP
// ; end ;
4409: GO 4412
4411: POP
// end ; end ;
4412: GO 4248
4414: POP
4415: POP
4416: GO 4235
4418: POP
4419: POP
// end ;
4420: LD_VAR 0 3
4424: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
4425: LD_INT 0
4427: PPUSH
4428: PPUSH
4429: PPUSH
4430: PPUSH
4431: PPUSH
4432: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
4433: LD_ADDR_VAR 0 6
4437: PUSH
4438: LD_VAR 0 2
4442: PPUSH
4443: CALL_OW 313
4447: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
4448: LD_ADDR_VAR 0 7
4452: PUSH
4453: LD_INT 22
4455: PUSH
4456: LD_VAR 0 1
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 25
4467: PUSH
4468: LD_INT 2
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: LD_INT 24
4477: PUSH
4478: LD_INT 1000
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 54
4490: PUSH
4491: EMPTY
4492: LIST
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 69
4508: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4509: LD_ADDR_VAR 0 4
4513: PUSH
4514: LD_INT 22
4516: PUSH
4517: LD_VAR 0 1
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: PUSH
4526: LD_INT 21
4528: PUSH
4529: LD_INT 3
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PUSH
4536: LD_INT 3
4538: PUSH
4539: LD_INT 24
4541: PUSH
4542: LD_INT 1000
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: LIST
4557: PUSH
4558: EMPTY
4559: LIST
4560: PPUSH
4561: CALL_OW 69
4565: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not destroyedBuildings then
4566: LD_VAR 0 4
4570: NOT
4571: PUSH
4572: LD_VAR 0 7
4576: NOT
4577: AND
4578: PUSH
4579: LD_EXP 1
4583: NOT
4584: AND
4585: IFFALSE 4589
// exit ;
4587: GO 4708
// if buildings_list > 0 and engineerOkInside then
4589: LD_VAR 0 4
4593: PUSH
4594: LD_INT 0
4596: GREATER
4597: PUSH
4598: LD_VAR 0 6
4602: AND
4603: IFFALSE 4636
// for i in UnitsInside ( building ) do
4605: LD_ADDR_VAR 0 5
4609: PUSH
4610: LD_VAR 0 2
4614: PPUSH
4615: CALL_OW 313
4619: PUSH
4620: FOR_IN
4621: IFFALSE 4634
// ComExitBuilding ( i ) ;
4623: LD_VAR 0 5
4627: PPUSH
4628: CALL_OW 122
4632: GO 4620
4634: POP
4635: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
4636: LD_VAR 0 4
4640: PUSH
4641: LD_INT 0
4643: GREATER
4644: PUSH
4645: LD_VAR 0 7
4649: PUSH
4650: LD_INT 0
4652: GREATER
4653: AND
4654: IFFALSE 4708
// begin for i in engineerOkOutside do
4656: LD_ADDR_VAR 0 5
4660: PUSH
4661: LD_VAR 0 7
4665: PUSH
4666: FOR_IN
4667: IFFALSE 4706
// for j in buildings_list do
4669: LD_ADDR_VAR 0 8
4673: PUSH
4674: LD_VAR 0 4
4678: PUSH
4679: FOR_IN
4680: IFFALSE 4702
// ComRepairBuilding ( i , j [ 1 ] ) ;
4682: LD_VAR 0 5
4686: PPUSH
4687: LD_VAR 0 8
4691: PUSH
4692: LD_INT 1
4694: ARRAY
4695: PPUSH
4696: CALL_OW 130
4700: GO 4679
4702: POP
4703: POP
4704: GO 4666
4706: POP
4707: POP
// end ; end ;
4708: LD_VAR 0 3
4712: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal ; begin
4713: LD_INT 0
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
4719: PPUSH
4720: PPUSH
4721: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
4722: LD_ADDR_VAR 0 6
4726: PUSH
4727: LD_INT 22
4729: PUSH
4730: LD_VAR 0 1
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: PUSH
4739: LD_INT 25
4741: PUSH
4742: LD_INT 4
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PUSH
4749: LD_INT 24
4751: PUSH
4752: LD_INT 251
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: LIST
4763: PPUSH
4764: CALL_OW 69
4768: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
4769: LD_ADDR_VAR 0 7
4773: PUSH
4774: LD_VAR 0 3
4778: PPUSH
4779: LD_INT 22
4781: PUSH
4782: LD_VAR 0 1
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 25
4793: PUSH
4794: LD_INT 4
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: LD_INT 50
4803: PUSH
4804: EMPTY
4805: LIST
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: LIST
4811: PPUSH
4812: CALL_OW 70
4816: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
4817: LD_ADDR_VAR 0 10
4821: PUSH
4822: LD_VAR 0 3
4826: PPUSH
4827: LD_INT 22
4829: PUSH
4830: LD_VAR 0 1
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: LD_INT 21
4841: PUSH
4842: LD_INT 1
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 3
4851: PUSH
4852: LD_INT 24
4854: PUSH
4855: LD_INT 750
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: LIST
4870: PPUSH
4871: CALL_OW 70
4875: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4876: LD_ADDR_VAR 0 11
4880: PUSH
4881: LD_VAR 0 2
4885: PPUSH
4886: LD_INT 22
4888: PUSH
4889: LD_VAR 0 1
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 21
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 3
4910: PUSH
4911: LD_INT 24
4913: PUSH
4914: LD_INT 1000
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: PPUSH
4930: CALL_OW 70
4934: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
4935: LD_VAR 0 10
4939: NOT
4940: PUSH
4941: LD_VAR 0 7
4945: NOT
4946: AND
4947: PUSH
4948: LD_VAR 0 11
4952: NOT
4953: AND
4954: IFFALSE 4958
// exit ;
4956: GO 5147
// if damageUnits > 0 and sci_list > 0 then
4958: LD_VAR 0 10
4962: PUSH
4963: LD_INT 0
4965: GREATER
4966: PUSH
4967: LD_VAR 0 6
4971: PUSH
4972: LD_INT 0
4974: GREATER
4975: AND
4976: IFFALSE 5009
// for i in damageUnits do
4978: LD_ADDR_VAR 0 8
4982: PUSH
4983: LD_VAR 0 10
4987: PUSH
4988: FOR_IN
4989: IFFALSE 5007
// ComMoveToArea ( i , healArea ) ;
4991: LD_VAR 0 8
4995: PPUSH
4996: LD_VAR 0 2
5000: PPUSH
5001: CALL_OW 113
5005: GO 4988
5007: POP
5008: POP
// if unitsToHeal > 0 and sci_list > 0 then
5009: LD_VAR 0 11
5013: PUSH
5014: LD_INT 0
5016: GREATER
5017: PUSH
5018: LD_VAR 0 6
5022: PUSH
5023: LD_INT 0
5025: GREATER
5026: AND
5027: IFFALSE 5086
// begin for i in sci_list do
5029: LD_ADDR_VAR 0 8
5033: PUSH
5034: LD_VAR 0 6
5038: PUSH
5039: FOR_IN
5040: IFFALSE 5084
// begin ComExitBuilding ( i ) ;
5042: LD_VAR 0 8
5046: PPUSH
5047: CALL_OW 122
// for j in unitsToHeal do
5051: LD_ADDR_VAR 0 9
5055: PUSH
5056: LD_VAR 0 11
5060: PUSH
5061: FOR_IN
5062: IFFALSE 5080
// AddComHeal ( i , j ) ;
5064: LD_VAR 0 8
5068: PPUSH
5069: LD_VAR 0 9
5073: PPUSH
5074: CALL_OW 188
5078: GO 5061
5080: POP
5081: POP
// end ;
5082: GO 5039
5084: POP
5085: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
5086: LD_VAR 0 10
5090: PUSH
5091: LD_INT 0
5093: EQUAL
5094: PUSH
5095: LD_VAR 0 11
5099: PUSH
5100: LD_INT 0
5102: EQUAL
5103: AND
5104: PUSH
5105: LD_VAR 0 7
5109: PUSH
5110: LD_INT 0
5112: GREATER
5113: AND
5114: IFFALSE 5147
// for i in sci_listOutside do
5116: LD_ADDR_VAR 0 8
5120: PUSH
5121: LD_VAR 0 7
5125: PUSH
5126: FOR_IN
5127: IFFALSE 5145
// ComEnterUnit ( i , build ) ;
5129: LD_VAR 0 8
5133: PPUSH
5134: LD_VAR 0 4
5138: PPUSH
5139: CALL_OW 120
5143: GO 5126
5145: POP
5146: POP
// end ;
5147: LD_VAR 0 5
5151: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
5152: LD_INT 0
5154: PPUSH
5155: PPUSH
5156: PPUSH
5157: PPUSH
5158: PPUSH
5159: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
5160: LD_ADDR_VAR 0 8
5164: PUSH
5165: LD_INT 22
5167: PUSH
5168: LD_VAR 0 1
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 21
5179: PUSH
5180: LD_INT 2
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 34
5189: PUSH
5190: LD_INT 52
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: LIST
5201: PPUSH
5202: CALL_OW 69
5206: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5207: LD_ADDR_VAR 0 9
5211: PUSH
5212: LD_INT 22
5214: PUSH
5215: LD_VAR 0 1
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PUSH
5224: LD_INT 21
5226: PUSH
5227: LD_INT 3
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PUSH
5234: LD_INT 3
5236: PUSH
5237: LD_INT 24
5239: PUSH
5240: LD_INT 1000
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: LIST
5255: PUSH
5256: EMPTY
5257: LIST
5258: PPUSH
5259: CALL_OW 69
5263: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
5264: LD_VAR 0 9
5268: PUSH
5269: LD_INT 0
5271: GREATER
5272: PUSH
5273: LD_VAR 0 8
5277: PPUSH
5278: LD_INT 24
5280: PUSH
5281: LD_INT 750
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PPUSH
5288: CALL_OW 72
5292: PUSH
5293: LD_INT 0
5295: GREATER
5296: AND
5297: IFFALSE 5332
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
5299: LD_VAR 0 8
5303: PPUSH
5304: LD_INT 24
5306: PUSH
5307: LD_INT 750
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PPUSH
5314: CALL_OW 72
5318: PPUSH
5319: LD_VAR 0 9
5323: PUSH
5324: LD_INT 1
5326: ARRAY
5327: PPUSH
5328: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
5332: LD_VAR 0 8
5336: PPUSH
5337: LD_INT 3
5339: PUSH
5340: LD_INT 24
5342: PUSH
5343: LD_INT 750
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PPUSH
5354: CALL_OW 72
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5400
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
5364: LD_VAR 0 8
5368: PPUSH
5369: LD_INT 3
5371: PUSH
5372: LD_INT 24
5374: PUSH
5375: LD_INT 750
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PPUSH
5386: CALL_OW 72
5390: PPUSH
5391: LD_VAR 0 2
5395: PPUSH
5396: CALL_OW 113
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
5400: LD_VAR 0 2
5404: PPUSH
5405: LD_INT 22
5407: PUSH
5408: LD_VAR 0 1
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: LD_INT 21
5419: PUSH
5420: LD_INT 2
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PUSH
5427: LD_INT 34
5429: PUSH
5430: LD_INT 52
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: LD_INT 3
5439: PUSH
5440: LD_INT 24
5442: PUSH
5443: LD_INT 750
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: PPUSH
5460: CALL_OW 70
5464: PUSH
5465: LD_INT 0
5467: GREATER
5468: IFFALSE 5670
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
5470: LD_ADDR_VAR 0 5
5474: PUSH
5475: LD_VAR 0 2
5479: PPUSH
5480: LD_INT 22
5482: PUSH
5483: LD_VAR 0 1
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: LD_INT 21
5494: PUSH
5495: LD_INT 2
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 34
5504: PUSH
5505: LD_INT 52
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 3
5514: PUSH
5515: LD_INT 24
5517: PUSH
5518: LD_INT 750
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: PPUSH
5535: CALL_OW 70
5539: PUSH
5540: FOR_IN
5541: IFFALSE 5668
// begin mechTmp = UnitsInside ( i ) ;
5543: LD_ADDR_VAR 0 6
5547: PUSH
5548: LD_VAR 0 5
5552: PPUSH
5553: CALL_OW 313
5557: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
5558: LD_VAR 0 6
5562: PPUSH
5563: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
5567: LD_VAR 0 6
5571: PPUSH
5572: LD_VAR 0 7
5576: PPUSH
5577: CALL_OW 189
// wait ( 0 0$2 ) ;
5581: LD_INT 70
5583: PPUSH
5584: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
5588: LD_VAR 0 6
5592: PPUSH
5593: LD_VAR 0 2
5597: PPUSH
5598: LD_INT 22
5600: PUSH
5601: LD_VAR 0 1
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: PUSH
5610: LD_INT 21
5612: PUSH
5613: LD_INT 2
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PUSH
5620: LD_INT 34
5622: PUSH
5623: LD_INT 52
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: PUSH
5630: LD_INT 24
5632: PUSH
5633: LD_INT 1000
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: PUSH
5640: LD_INT 58
5642: PUSH
5643: EMPTY
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 70
5657: PUSH
5658: LD_INT 1
5660: ARRAY
5661: PPUSH
5662: CALL_OW 180
// end ;
5666: GO 5540
5668: POP
5669: POP
// end ; end ; end_of_file
5670: LD_VAR 0 4
5674: RET
// on UnitDestroyed ( un ) do var i ;
5675: LD_INT 0
5677: PPUSH
// begin if GetSide ( un ) = 3 and GetType ( un ) = unit_building then
5678: LD_VAR 0 1
5682: PPUSH
5683: CALL_OW 255
5687: PUSH
5688: LD_INT 3
5690: EQUAL
5691: PUSH
5692: LD_VAR 0 1
5696: PPUSH
5697: CALL_OW 247
5701: PUSH
5702: LD_INT 3
5704: EQUAL
5705: AND
5706: IFFALSE 6398
// begin if GetBType ( un ) = 31 or GetBType ( un ) = 32 or GetBType ( un ) = 36 or GetBType ( un ) = 0 or GetBType ( un ) = 24 or GetBType ( un ) = 17 or GetBType ( un ) = 25 or GetBType ( un ) = 19 or GetBType ( un ) = 20 or GetBType ( un ) = 18 or GetBType ( un ) = 21 or GetBType ( un ) = 23 or GetBType ( un ) = 16 or GetBType ( un ) = 6 or GetBType ( un ) = 29 or GetBType ( un ) = 26 or GetBType ( un ) = 30 or GetBType ( un ) = 28 or GetBType ( un ) = 27 or GetBType ( un ) = 33 or GetBType ( un ) = 2 or GetBType ( un ) = 4 then
5708: LD_VAR 0 1
5712: PPUSH
5713: CALL_OW 266
5717: PUSH
5718: LD_INT 31
5720: EQUAL
5721: PUSH
5722: LD_VAR 0 1
5726: PPUSH
5727: CALL_OW 266
5731: PUSH
5732: LD_INT 32
5734: EQUAL
5735: OR
5736: PUSH
5737: LD_VAR 0 1
5741: PPUSH
5742: CALL_OW 266
5746: PUSH
5747: LD_INT 36
5749: EQUAL
5750: OR
5751: PUSH
5752: LD_VAR 0 1
5756: PPUSH
5757: CALL_OW 266
5761: PUSH
5762: LD_INT 0
5764: EQUAL
5765: OR
5766: PUSH
5767: LD_VAR 0 1
5771: PPUSH
5772: CALL_OW 266
5776: PUSH
5777: LD_INT 24
5779: EQUAL
5780: OR
5781: PUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: CALL_OW 266
5791: PUSH
5792: LD_INT 17
5794: EQUAL
5795: OR
5796: PUSH
5797: LD_VAR 0 1
5801: PPUSH
5802: CALL_OW 266
5806: PUSH
5807: LD_INT 25
5809: EQUAL
5810: OR
5811: PUSH
5812: LD_VAR 0 1
5816: PPUSH
5817: CALL_OW 266
5821: PUSH
5822: LD_INT 19
5824: EQUAL
5825: OR
5826: PUSH
5827: LD_VAR 0 1
5831: PPUSH
5832: CALL_OW 266
5836: PUSH
5837: LD_INT 20
5839: EQUAL
5840: OR
5841: PUSH
5842: LD_VAR 0 1
5846: PPUSH
5847: CALL_OW 266
5851: PUSH
5852: LD_INT 18
5854: EQUAL
5855: OR
5856: PUSH
5857: LD_VAR 0 1
5861: PPUSH
5862: CALL_OW 266
5866: PUSH
5867: LD_INT 21
5869: EQUAL
5870: OR
5871: PUSH
5872: LD_VAR 0 1
5876: PPUSH
5877: CALL_OW 266
5881: PUSH
5882: LD_INT 23
5884: EQUAL
5885: OR
5886: PUSH
5887: LD_VAR 0 1
5891: PPUSH
5892: CALL_OW 266
5896: PUSH
5897: LD_INT 16
5899: EQUAL
5900: OR
5901: PUSH
5902: LD_VAR 0 1
5906: PPUSH
5907: CALL_OW 266
5911: PUSH
5912: LD_INT 6
5914: EQUAL
5915: OR
5916: PUSH
5917: LD_VAR 0 1
5921: PPUSH
5922: CALL_OW 266
5926: PUSH
5927: LD_INT 29
5929: EQUAL
5930: OR
5931: PUSH
5932: LD_VAR 0 1
5936: PPUSH
5937: CALL_OW 266
5941: PUSH
5942: LD_INT 26
5944: EQUAL
5945: OR
5946: PUSH
5947: LD_VAR 0 1
5951: PPUSH
5952: CALL_OW 266
5956: PUSH
5957: LD_INT 30
5959: EQUAL
5960: OR
5961: PUSH
5962: LD_VAR 0 1
5966: PPUSH
5967: CALL_OW 266
5971: PUSH
5972: LD_INT 28
5974: EQUAL
5975: OR
5976: PUSH
5977: LD_VAR 0 1
5981: PPUSH
5982: CALL_OW 266
5986: PUSH
5987: LD_INT 27
5989: EQUAL
5990: OR
5991: PUSH
5992: LD_VAR 0 1
5996: PPUSH
5997: CALL_OW 266
6001: PUSH
6002: LD_INT 33
6004: EQUAL
6005: OR
6006: PUSH
6007: LD_VAR 0 1
6011: PPUSH
6012: CALL_OW 266
6016: PUSH
6017: LD_INT 2
6019: EQUAL
6020: OR
6021: PUSH
6022: LD_VAR 0 1
6026: PPUSH
6027: CALL_OW 266
6031: PUSH
6032: LD_INT 4
6034: EQUAL
6035: OR
6036: IFFALSE 6122
// begin destroyedBuildings = destroyedBuildings ^ GetBType ( un ) ;
6038: LD_ADDR_EXP 1
6042: PUSH
6043: LD_EXP 1
6047: PUSH
6048: LD_VAR 0 1
6052: PPUSH
6053: CALL_OW 266
6057: ADD
6058: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetX ( un ) ;
6059: LD_ADDR_EXP 1
6063: PUSH
6064: LD_EXP 1
6068: PUSH
6069: LD_VAR 0 1
6073: PPUSH
6074: CALL_OW 250
6078: ADD
6079: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetY ( un ) ;
6080: LD_ADDR_EXP 1
6084: PUSH
6085: LD_EXP 1
6089: PUSH
6090: LD_VAR 0 1
6094: PPUSH
6095: CALL_OW 251
6099: ADD
6100: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetDir ( un ) ;
6101: LD_ADDR_EXP 1
6105: PUSH
6106: LD_EXP 1
6110: PUSH
6111: LD_VAR 0 1
6115: PPUSH
6116: CALL_OW 254
6120: ADD
6121: ST_TO_ADDR
// end ; if GetBType ( un ) = 1 then
6122: LD_VAR 0 1
6126: PPUSH
6127: CALL_OW 266
6131: PUSH
6132: LD_INT 1
6134: EQUAL
6135: IFFALSE 6214
// begin destroyedBuildings = destroyedBuildings ^ 0 ;
6137: LD_ADDR_EXP 1
6141: PUSH
6142: LD_EXP 1
6146: PUSH
6147: LD_INT 0
6149: ADD
6150: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetX ( un ) ;
6151: LD_ADDR_EXP 1
6155: PUSH
6156: LD_EXP 1
6160: PUSH
6161: LD_VAR 0 1
6165: PPUSH
6166: CALL_OW 250
6170: ADD
6171: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetY ( un ) ;
6172: LD_ADDR_EXP 1
6176: PUSH
6177: LD_EXP 1
6181: PUSH
6182: LD_VAR 0 1
6186: PPUSH
6187: CALL_OW 251
6191: ADD
6192: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetDir ( un ) ;
6193: LD_ADDR_EXP 1
6197: PUSH
6198: LD_EXP 1
6202: PUSH
6203: LD_VAR 0 1
6207: PPUSH
6208: CALL_OW 254
6212: ADD
6213: ST_TO_ADDR
// end ; if GetBType ( un ) = 3 then
6214: LD_VAR 0 1
6218: PPUSH
6219: CALL_OW 266
6223: PUSH
6224: LD_INT 3
6226: EQUAL
6227: IFFALSE 6306
// begin destroyedBuildings = destroyedBuildings ^ 2 ;
6229: LD_ADDR_EXP 1
6233: PUSH
6234: LD_EXP 1
6238: PUSH
6239: LD_INT 2
6241: ADD
6242: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetX ( un ) ;
6243: LD_ADDR_EXP 1
6247: PUSH
6248: LD_EXP 1
6252: PUSH
6253: LD_VAR 0 1
6257: PPUSH
6258: CALL_OW 250
6262: ADD
6263: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetY ( un ) ;
6264: LD_ADDR_EXP 1
6268: PUSH
6269: LD_EXP 1
6273: PUSH
6274: LD_VAR 0 1
6278: PPUSH
6279: CALL_OW 251
6283: ADD
6284: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetDir ( un ) ;
6285: LD_ADDR_EXP 1
6289: PUSH
6290: LD_EXP 1
6294: PUSH
6295: LD_VAR 0 1
6299: PPUSH
6300: CALL_OW 254
6304: ADD
6305: ST_TO_ADDR
// end ; if GetBType ( un ) = 5 then
6306: LD_VAR 0 1
6310: PPUSH
6311: CALL_OW 266
6315: PUSH
6316: LD_INT 5
6318: EQUAL
6319: IFFALSE 6398
// begin destroyedBuildings = destroyedBuildings ^ 4 ;
6321: LD_ADDR_EXP 1
6325: PUSH
6326: LD_EXP 1
6330: PUSH
6331: LD_INT 4
6333: ADD
6334: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetX ( un ) ;
6335: LD_ADDR_EXP 1
6339: PUSH
6340: LD_EXP 1
6344: PUSH
6345: LD_VAR 0 1
6349: PPUSH
6350: CALL_OW 250
6354: ADD
6355: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetY ( un ) ;
6356: LD_ADDR_EXP 1
6360: PUSH
6361: LD_EXP 1
6365: PUSH
6366: LD_VAR 0 1
6370: PPUSH
6371: CALL_OW 251
6375: ADD
6376: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetDir ( un ) ;
6377: LD_ADDR_EXP 1
6381: PUSH
6382: LD_EXP 1
6386: PUSH
6387: LD_VAR 0 1
6391: PPUSH
6392: CALL_OW 254
6396: ADD
6397: ST_TO_ADDR
// end ; end ; end ;
6398: PPOPN 2
6400: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
6401: LD_VAR 0 1
6405: PPUSH
6406: CALL_OW 255
6410: PUSH
6411: LD_INT 3
6413: EQUAL
6414: IFFALSE 6488
// begin destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
6416: LD_ADDR_EXP 1
6420: PUSH
6421: LD_EXP 1
6425: PPUSH
6426: LD_INT 1
6428: PPUSH
6429: CALL_OW 3
6433: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
6434: LD_ADDR_EXP 1
6438: PUSH
6439: LD_EXP 1
6443: PPUSH
6444: LD_INT 1
6446: PPUSH
6447: CALL_OW 3
6451: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
6452: LD_ADDR_EXP 1
6456: PUSH
6457: LD_EXP 1
6461: PPUSH
6462: LD_INT 1
6464: PPUSH
6465: CALL_OW 3
6469: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
6470: LD_ADDR_EXP 1
6474: PUSH
6475: LD_EXP 1
6479: PPUSH
6480: LD_INT 1
6482: PPUSH
6483: CALL_OW 3
6487: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
6488: LD_VAR 0 1
6492: PPUSH
6493: CALL_OW 255
6497: PUSH
6498: LD_INT 3
6500: EQUAL
6501: PUSH
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL_OW 266
6511: PUSH
6512: LD_INT 0
6514: EQUAL
6515: PUSH
6516: LD_VAR 0 1
6520: PPUSH
6521: CALL_OW 266
6525: PUSH
6526: LD_INT 2
6528: EQUAL
6529: OR
6530: PUSH
6531: LD_VAR 0 1
6535: PPUSH
6536: CALL_OW 266
6540: PUSH
6541: LD_INT 4
6543: EQUAL
6544: OR
6545: PUSH
6546: EMPTY
6547: LIST
6548: AND
6549: IFFALSE 6560
// ComUpgrade ( building ) ;
6551: LD_VAR 0 1
6555: PPUSH
6556: CALL_OW 146
// end ;
6560: PPOPN 1
6562: END
// on LeaveVehicle ( vehicle , human ) do begin ComRepairVehicle ( human , vehicle ) ;
6563: LD_VAR 0 2
6567: PPUSH
6568: LD_VAR 0 1
6572: PPUSH
6573: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
6577: LD_VAR 0 2
6581: PPUSH
6582: LD_VAR 0 1
6586: PPUSH
6587: CALL_OW 180
// end ;
6591: PPOPN 2
6593: END
// on VehicleConstructed ( vehicle , building ) do begin end ;
6594: PPOPN 2
6596: END
// on Command ( command_id ) do begin end ;
6597: PPOPN 1
6599: END
