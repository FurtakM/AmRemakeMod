// export destroyedBuildings ; export cargoTest ; export vehicleDriverTab ; export arabianMines ; export JMM ; starting var i ; begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// destroyedBuildings = [ ] ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// cargoTest = [ ] ;
  15: LD_ADDR_EXP 2
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// arabianMines = [ ] ;
  22: LD_ADDR_EXP 4
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// end ;
  29: END
// export function ReverseNumber ( number ) ; var i ; begin
  30: LD_INT 0
  32: PPUSH
  33: PPUSH
// result :=  ;
  34: LD_ADDR_VAR 0 2
  38: PUSH
  39: LD_STRING 
  41: ST_TO_ADDR
// while ( number ) do
  42: LD_VAR 0 1
  46: IFFALSE 84
// begin result := result & ( number mod 10 ) ;
  48: LD_ADDR_VAR 0 2
  52: PUSH
  53: LD_VAR 0 2
  57: PUSH
  58: LD_VAR 0 1
  62: PUSH
  63: LD_INT 10
  65: MOD
  66: STR
  67: ST_TO_ADDR
// number := number div 10 ;
  68: LD_ADDR_VAR 0 1
  72: PUSH
  73: LD_VAR 0 1
  77: PUSH
  78: LD_INT 10
  80: DIV
  81: ST_TO_ADDR
// end ;
  82: GO 42
// end ;
  84: LD_VAR 0 2
  88: RET
// export d ; every 0 0$01 do var un , un2 ;
  89: GO 91
  91: DISABLE
  92: LD_INT 0
  94: PPUSH
  95: PPUSH
// begin uc_side := 1 ;
  96: LD_ADDR_OWVAR 20
 100: PUSH
 101: LD_INT 1
 103: ST_TO_ADDR
// uc_nation := 2 ;
 104: LD_ADDR_OWVAR 21
 108: PUSH
 109: LD_INT 2
 111: ST_TO_ADDR
// hc_class := 1 ;
 112: LD_ADDR_OWVAR 28
 116: PUSH
 117: LD_INT 1
 119: ST_TO_ADDR
// hc_gallery :=  ;
 120: LD_ADDR_OWVAR 33
 124: PUSH
 125: LD_STRING 
 127: ST_TO_ADDR
// un := CreateHuman ;
 128: LD_ADDR_VAR 0 1
 132: PUSH
 133: CALL_OW 44
 137: ST_TO_ADDR
// d := CreateHuman ;
 138: LD_ADDR_EXP 6
 142: PUSH
 143: CALL_OW 44
 147: ST_TO_ADDR
// PlaceUnitXY ( un , 192 , 25 , false ) ;
 148: LD_VAR 0 1
 152: PPUSH
 153: LD_INT 192
 155: PPUSH
 156: LD_INT 25
 158: PPUSH
 159: LD_INT 0
 161: PPUSH
 162: CALL_OW 48
// PlaceUnitXY ( d , 190 , 25 , false ) ;
 166: LD_EXP 6
 170: PPUSH
 171: LD_INT 190
 173: PPUSH
 174: LD_INT 25
 176: PPUSH
 177: LD_INT 0
 179: PPUSH
 180: CALL_OW 48
// end ;
 184: PPOPN 2
 186: END
// export function WantPlant ( unit ) ; var task ; begin
 187: LD_INT 0
 189: PPUSH
 190: PPUSH
// result := false ;
 191: LD_ADDR_VAR 0 2
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
 199: LD_ADDR_VAR 0 3
 203: PUSH
 204: LD_VAR 0 1
 208: PPUSH
 209: CALL_OW 437
 213: ST_TO_ADDR
// if task then
 214: LD_VAR 0 3
 218: IFFALSE 246
// if task [ 1 ] [ 1 ] = p then
 220: LD_VAR 0 3
 224: PUSH
 225: LD_INT 1
 227: ARRAY
 228: PUSH
 229: LD_INT 1
 231: ARRAY
 232: PUSH
 233: LD_STRING p
 235: EQUAL
 236: IFFALSE 246
// result := true ;
 238: LD_ADDR_VAR 0 2
 242: PUSH
 243: LD_INT 1
 245: ST_TO_ADDR
// end ;
 246: LD_VAR 0 2
 250: RET
// export function RemoveResourcesFromArea ( area , materials ) ; var amount , i , tmp ; begin
 251: LD_INT 0
 253: PPUSH
 254: PPUSH
 255: PPUSH
 256: PPUSH
// for i = 1 to 3 do
 257: LD_ADDR_VAR 0 5
 261: PUSH
 262: DOUBLE
 263: LD_INT 1
 265: DEC
 266: ST_TO_ADDR
 267: LD_INT 3
 269: PUSH
 270: FOR_TO
 271: IFFALSE 301
// amount := amount + GetResourceArea ( area , i ) ;
 273: LD_ADDR_VAR 0 4
 277: PUSH
 278: LD_VAR 0 4
 282: PUSH
 283: LD_VAR 0 1
 287: PPUSH
 288: LD_VAR 0 5
 292: PPUSH
 293: CALL_OW 287
 297: PLUS
 298: ST_TO_ADDR
 299: GO 270
 301: POP
 302: POP
// if amount < materials then
 303: LD_VAR 0 4
 307: PUSH
 308: LD_VAR 0 2
 312: LESS
 313: IFFALSE 317
// exit ;
 315: GO 351
// for i = 1 to 3 do
 317: LD_ADDR_VAR 0 5
 321: PUSH
 322: DOUBLE
 323: LD_INT 1
 325: DEC
 326: ST_TO_ADDR
 327: LD_INT 3
 329: PUSH
 330: FOR_TO
 331: IFFALSE 349
// EraseResourceArea ( area , i ) ;
 333: LD_VAR 0 1
 337: PPUSH
 338: LD_VAR 0 5
 342: PPUSH
 343: CALL_OW 286
 347: GO 330
 349: POP
 350: POP
// end ; end_of_file
 351: LD_VAR 0 3
 355: RET
// every 0 0$1 do
 356: GO 358
 358: DISABLE
// begin enable ;
 359: ENABLE
// end ;
 360: END
// every 5 5$1 do
 361: GO 363
 363: DISABLE
// begin end ;
 364: END
// every 0 0$1 do
 365: GO 367
 367: DISABLE
// begin end ;
 368: END
// every 0 0$01 trigger arabianMines do var i , p ;
 369: LD_EXP 4
 373: IFFALSE 576
 375: GO 377
 377: DISABLE
 378: LD_INT 0
 380: PPUSH
 381: PPUSH
// begin enable ;
 382: ENABLE
// p := 1 ;
 383: LD_ADDR_VAR 0 2
 387: PUSH
 388: LD_INT 1
 390: ST_TO_ADDR
// for i = 1 to arabianMines / 2 do
 391: LD_ADDR_VAR 0 1
 395: PUSH
 396: DOUBLE
 397: LD_INT 1
 399: DEC
 400: ST_TO_ADDR
 401: LD_EXP 4
 405: PUSH
 406: LD_INT 2
 408: DIVREAL
 409: PUSH
 410: FOR_TO
 411: IFFALSE 574
// begin if FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_distxy , arabianMines [ p ] , arabianMines [ p + 1 ] , 2 ] ] ) then
 413: LD_INT 81
 415: PUSH
 416: LD_INT 2
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PUSH
 423: LD_INT 92
 425: PUSH
 426: LD_EXP 4
 430: PUSH
 431: LD_VAR 0 2
 435: ARRAY
 436: PUSH
 437: LD_EXP 4
 441: PUSH
 442: LD_VAR 0 2
 446: PUSH
 447: LD_INT 1
 449: PLUS
 450: ARRAY
 451: PUSH
 452: LD_INT 2
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: LIST
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PPUSH
 465: CALL_OW 69
 469: IFFALSE 558
// begin LaunchMineAtPos ( arabianMines [ p ] , arabianMines [ p + 1 ] , 2 ) ;
 471: LD_EXP 4
 475: PUSH
 476: LD_VAR 0 2
 480: ARRAY
 481: PPUSH
 482: LD_EXP 4
 486: PUSH
 487: LD_VAR 0 2
 491: PUSH
 492: LD_INT 1
 494: PLUS
 495: ARRAY
 496: PPUSH
 497: LD_INT 2
 499: PPUSH
 500: CALL_OW 456
// arabianMines := Delete ( arabianMines , p ) ;
 504: LD_ADDR_EXP 4
 508: PUSH
 509: LD_EXP 4
 513: PPUSH
 514: LD_VAR 0 2
 518: PPUSH
 519: CALL_OW 3
 523: ST_TO_ADDR
// arabianMines := Delete ( arabianMines , p ) ;
 524: LD_ADDR_EXP 4
 528: PUSH
 529: LD_EXP 4
 533: PPUSH
 534: LD_VAR 0 2
 538: PPUSH
 539: CALL_OW 3
 543: ST_TO_ADDR
// p := p - 2 ;
 544: LD_ADDR_VAR 0 2
 548: PUSH
 549: LD_VAR 0 2
 553: PUSH
 554: LD_INT 2
 556: MINUS
 557: ST_TO_ADDR
// end ; p := p + 2 ;
 558: LD_ADDR_VAR 0 2
 562: PUSH
 563: LD_VAR 0 2
 567: PUSH
 568: LD_INT 2
 570: PLUS
 571: ST_TO_ADDR
// end ;
 572: GO 410
 574: POP
 575: POP
// end ;
 576: PPOPN 2
 578: END
