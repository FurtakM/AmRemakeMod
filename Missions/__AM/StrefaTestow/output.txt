// export destroyedBuildings ; export JMM ; starting var i ; begin Resetfog ;
   0: CALL_OW 335
// FogOff ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 344
// RandomizeAll ;
  11: CALL_OW 11
// destroyedBuildings = [ ] ;
  15: LD_ADDR_EXP 1
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// end ;
  22: END
// every 0 0$1 do
  23: GO 25
  25: DISABLE
// ComEnterUnit ( eng1 , ee1 ) ;
  26: LD_INT 95
  28: PPUSH
  29: LD_INT 94
  31: PPUSH
  32: CALL_OW 120
  36: END
// every 0 0$1 do
  37: GO 39
  39: DISABLE
// begin enable ;
  40: ENABLE
// display_strings := GetTaskList ( eng1 ) ;
  41: LD_ADDR_OWVAR 47
  45: PUSH
  46: LD_INT 95
  48: PPUSH
  49: CALL_OW 437
  53: ST_TO_ADDR
// end ; end_of_file
  54: END
// every 0 0$1 do
  55: GO 57
  57: DISABLE
// begin enable ;
  58: ENABLE
// RepairVehicle ( 1 , reparea , 26 , 13 ) ;
  59: LD_INT 1
  61: PPUSH
  62: LD_INT 1
  64: PPUSH
  65: LD_INT 26
  67: PPUSH
  68: LD_INT 13
  70: PPUSH
  71: CALL 358 0 4
// RebuildBuildings ( 3 , destroyedBuildings ) ;
  75: LD_INT 3
  77: PPUSH
  78: LD_EXP 1
  82: PPUSH
  83: CALL 3059 0 2
// end ;
  87: END
// every 5 5$1 do
  88: GO 90
  90: DISABLE
// begin end ; end_of_file
  91: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
  92: LD_INT 0
  94: PPUSH
  95: PPUSH
  96: PPUSH
// rnd = rand ( 1 , characters ) ;
  97: LD_ADDR_VAR 0 6
 101: PUSH
 102: LD_INT 1
 104: PPUSH
 105: LD_VAR 0 1
 109: PPUSH
 110: CALL_OW 12
 114: ST_TO_ADDR
// for i = 1 to characters do
 115: LD_ADDR_VAR 0 5
 119: PUSH
 120: DOUBLE
 121: LD_INT 1
 123: DEC
 124: ST_TO_ADDR
 125: LD_VAR 0 1
 129: PUSH
 130: FOR_TO
 131: IFFALSE 241
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
 133: LD_VAR 0 5
 137: PUSH
 138: LD_VAR 0 6
 142: EQUAL
 143: PUSH
 144: LD_VAR 0 1
 148: PUSH
 149: LD_VAR 0 5
 153: ARRAY
 154: PPUSH
 155: CALL_OW 258
 159: PUSH
 160: LD_INT 1
 162: EQUAL
 163: AND
 164: IFFALSE 186
// Say ( characters [ i ] , dialogMID ) ;
 166: LD_VAR 0 1
 170: PUSH
 171: LD_VAR 0 5
 175: ARRAY
 176: PPUSH
 177: LD_VAR 0 2
 181: PPUSH
 182: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
 186: LD_VAR 0 5
 190: PUSH
 191: LD_VAR 0 6
 195: EQUAL
 196: PUSH
 197: LD_VAR 0 1
 201: PUSH
 202: LD_VAR 0 5
 206: ARRAY
 207: PPUSH
 208: CALL_OW 258
 212: PUSH
 213: LD_INT 2
 215: EQUAL
 216: AND
 217: IFFALSE 239
// Say ( characters [ i ] , dialogFID ) ;
 219: LD_VAR 0 1
 223: PUSH
 224: LD_VAR 0 5
 228: ARRAY
 229: PPUSH
 230: LD_VAR 0 3
 234: PPUSH
 235: CALL_OW 88
// end ;
 239: GO 130
 241: POP
 242: POP
// end ;
 243: LD_VAR 0 4
 247: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 248: LD_INT 0
 250: PPUSH
 251: PPUSH
 252: PPUSH
 253: PPUSH
// for i = 1 to count do
 254: LD_ADDR_VAR 0 8
 258: PUSH
 259: DOUBLE
 260: LD_INT 1
 262: DEC
 263: ST_TO_ADDR
 264: LD_VAR 0 6
 268: PUSH
 269: FOR_TO
 270: IFFALSE 351
// begin uc_side = side ;
 272: LD_ADDR_OWVAR 20
 276: PUSH
 277: LD_VAR 0 1
 281: ST_TO_ADDR
// uc_nation = nation ;
 282: LD_ADDR_OWVAR 21
 286: PUSH
 287: LD_VAR 0 2
 291: ST_TO_ADDR
// hc_gallery =  ;
 292: LD_ADDR_OWVAR 33
 296: PUSH
 297: LD_STRING 
 299: ST_TO_ADDR
// hc_name =  ;
 300: LD_ADDR_OWVAR 26
 304: PUSH
 305: LD_STRING 
 307: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 308: LD_INT 0
 310: PPUSH
 311: LD_VAR 0 5
 315: PPUSH
 316: LD_VAR 0 4
 320: PPUSH
 321: CALL_OW 380
// un = CreateHuman ;
 325: LD_ADDR_VAR 0 10
 329: PUSH
 330: CALL_OW 44
 334: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 335: LD_VAR 0 10
 339: PPUSH
 340: LD_VAR 0 3
 344: PPUSH
 345: CALL_OW 52
// end ;
 349: GO 269
 351: POP
 352: POP
// end ;
 353: LD_VAR 0 7
 357: RET
// export function RepairVehicle ( side , repairArea , repX , repY ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list ; begin
 358: LD_INT 0
 360: PPUSH
 361: PPUSH
 362: PPUSH
 363: PPUSH
 364: PPUSH
 365: PPUSH
 366: PPUSH
 367: PPUSH
 368: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] ] ) ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_INT 22
 376: PUSH
 377: LD_VAR 0 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 21
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 24
 398: PUSH
 399: LD_INT 660
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: LD_INT 3
 408: PUSH
 409: LD_INT 58
 411: PUSH
 412: EMPTY
 413: LIST
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: PPUSH
 425: CALL_OW 69
 429: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
 430: LD_ADDR_VAR 0 9
 434: PUSH
 435: LD_INT 22
 437: PUSH
 438: LD_VAR 0 1
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: PUSH
 447: LD_INT 21
 449: PUSH
 450: LD_INT 2
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: PUSH
 457: LD_INT 3
 459: PUSH
 460: LD_INT 24
 462: PUSH
 463: LD_INT 660
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
 484: LD_ADDR_VAR 0 10
 488: PUSH
 489: LD_VAR 0 2
 493: PPUSH
 494: LD_INT 22
 496: PUSH
 497: LD_VAR 0 1
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PUSH
 506: LD_INT 21
 508: PUSH
 509: LD_INT 2
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 3
 518: PUSH
 519: LD_INT 24
 521: PUSH
 522: LD_INT 1000
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: LIST
 537: PPUSH
 538: CALL_OW 70
 542: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
 543: LD_ADDR_VAR 0 11
 547: PUSH
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 22
 555: PUSH
 556: LD_VAR 0 1
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: LD_INT 21
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: EMPTY
 572: LIST
 573: LIST
 574: PUSH
 575: LD_INT 24
 577: PUSH
 578: LD_INT 1000
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 58
 587: PUSH
 588: EMPTY
 589: LIST
 590: PUSH
 591: EMPTY
 592: LIST
 593: LIST
 594: LIST
 595: LIST
 596: PPUSH
 597: CALL_OW 70
 601: ST_TO_ADDR
// mechanicInside_list = [ ] ;
 602: LD_ADDR_VAR 0 12
 606: PUSH
 607: EMPTY
 608: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
 609: LD_ADDR_VAR 0 13
 613: PUSH
 614: LD_VAR 0 2
 618: PPUSH
 619: LD_INT 22
 621: PUSH
 622: LD_VAR 0 1
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: PUSH
 631: LD_INT 25
 633: PUSH
 634: LD_INT 3
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: PPUSH
 645: CALL_OW 70
 649: ST_TO_ADDR
// if damageVehicle_list > 0 then
 650: LD_VAR 0 9
 654: PUSH
 655: LD_INT 0
 657: GREATER
 658: IFFALSE 717
// begin for i in damageVehicle_list do
 660: LD_ADDR_VAR 0 6
 664: PUSH
 665: LD_VAR 0 9
 669: PUSH
 670: FOR_IN
 671: IFFALSE 715
// begin ComMoveXY ( i , repX , repY ) ;
 673: LD_VAR 0 6
 677: PPUSH
 678: LD_VAR 0 3
 682: PPUSH
 683: LD_VAR 0 4
 687: PPUSH
 688: CALL_OW 111
// mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
 692: LD_ADDR_VAR 0 12
 696: PUSH
 697: LD_VAR 0 12
 701: PUSH
 702: LD_VAR 0 6
 706: PPUSH
 707: CALL_OW 313
 711: ADD
 712: ST_TO_ADDR
// end ;
 713: GO 670
 715: POP
 716: POP
// end ; if vehicleNeedRepair_list > 0 then
 717: LD_VAR 0 10
 721: PUSH
 722: LD_INT 0
 724: GREATER
 725: IFFALSE 791
// begin for i in mechanicInside_list do
 727: LD_ADDR_VAR 0 6
 731: PUSH
 732: LD_VAR 0 12
 736: PUSH
 737: FOR_IN
 738: IFFALSE 789
// begin for j in vehicleNeedRepair_list do
 740: LD_ADDR_VAR 0 7
 744: PUSH
 745: LD_VAR 0 10
 749: PUSH
 750: FOR_IN
 751: IFFALSE 785
// begin AddComExitVehicle ( i ) ;
 753: LD_VAR 0 6
 757: PPUSH
 758: CALL_OW 181
// wait ( 0 0$1 ) ;
 762: LD_INT 35
 764: PPUSH
 765: CALL_OW 67
// AddComRepairVehicle ( i , j ) ;
 769: LD_VAR 0 6
 773: PPUSH
 774: LD_VAR 0 7
 778: PPUSH
 779: CALL_OW 189
// end ;
 783: GO 750
 785: POP
 786: POP
// end ;
 787: GO 737
 789: POP
 790: POP
// end ; if vehicleDontNeedRepair_list > 0 then
 791: LD_VAR 0 11
 795: PUSH
 796: LD_INT 0
 798: GREATER
 799: IFFALSE 823
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
 801: LD_VAR 0 13
 805: PUSH
 806: LD_INT 1
 808: ARRAY
 809: PPUSH
 810: LD_VAR 0 11
 814: PUSH
 815: LD_INT 1
 817: ARRAY
 818: PPUSH
 819: CALL_OW 120
// end ; if vehicleOK_list > 0 then
 823: LD_VAR 0 8
 827: PUSH
 828: LD_INT 0
 830: GREATER
 831: IFFALSE 865
// begin for i in vehicleOK_list do
 833: LD_ADDR_VAR 0 6
 837: PUSH
 838: LD_VAR 0 8
 842: PUSH
 843: FOR_IN
 844: IFFALSE 863
// ComAgressiveMove ( i , 50 , 50 ) ;
 846: LD_VAR 0 6
 850: PPUSH
 851: LD_INT 50
 853: PPUSH
 854: LD_INT 50
 856: PPUSH
 857: CALL_OW 114
 861: GO 843
 863: POP
 864: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
 865: LD_ADDR_VAR 0 6
 869: PUSH
 870: LD_VAR 0 2
 874: PPUSH
 875: LD_INT 22
 877: PUSH
 878: LD_VAR 0 1
 882: PUSH
 883: EMPTY
 884: LIST
 885: LIST
 886: PUSH
 887: LD_INT 25
 889: PUSH
 890: LD_INT 3
 892: PUSH
 893: EMPTY
 894: LIST
 895: LIST
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: PPUSH
 901: CALL_OW 70
 905: NOT
 906: PUSH
 907: FOR_IN
 908: IFFALSE 931
// ComMoveXY ( i , repX , repY ) ;
 910: LD_VAR 0 6
 914: PPUSH
 915: LD_VAR 0 3
 919: PPUSH
 920: LD_VAR 0 4
 924: PPUSH
 925: CALL_OW 111
 929: GO 907
 931: POP
 932: POP
// end ;
 933: LD_VAR 0 5
 937: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
 938: LD_INT 0
 940: PPUSH
 941: PPUSH
 942: PPUSH
 943: PPUSH
 944: PPUSH
 945: PPUSH
 946: PPUSH
 947: PPUSH
 948: PPUSH
 949: PPUSH
 950: PPUSH
// amChassisTab = [ ] ;
 951: LD_ADDR_VAR 0 19
 955: PUSH
 956: EMPTY
 957: ST_TO_ADDR
// arChassisTab = [ ] ;
 958: LD_ADDR_VAR 0 18
 962: PUSH
 963: EMPTY
 964: ST_TO_ADDR
// ruChassisTab = [ ] ;
 965: LD_ADDR_VAR 0 17
 969: PUSH
 970: EMPTY
 971: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
 972: LD_INT 35
 974: PPUSH
 975: CALL_OW 67
// if nation = 1 then
 979: LD_VAR 0 5
 983: PUSH
 984: LD_INT 1
 986: EQUAL
 987: IFFALSE 1478
// begin uc_side = side ;
 989: LD_ADDR_OWVAR 20
 993: PUSH
 994: LD_VAR 0 2
 998: ST_TO_ADDR
// uc_nation = nation ;
 999: LD_ADDR_OWVAR 21
1003: PUSH
1004: LD_VAR 0 5
1008: ST_TO_ADDR
// vc_engine = vehengine ;
1009: LD_ADDR_OWVAR 39
1013: PUSH
1014: LD_VAR 0 6
1018: ST_TO_ADDR
// vc_control = vehcontrol ;
1019: LD_ADDR_OWVAR 38
1023: PUSH
1024: LD_VAR 0 7
1028: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
1029: LD_ADDR_OWVAR 40
1033: PUSH
1034: LD_VAR 0 10
1038: PUSH
1039: LD_INT 1
1041: PPUSH
1042: LD_VAR 0 10
1046: PPUSH
1047: CALL_OW 12
1051: ARRAY
1052: ST_TO_ADDR
// for j = 1 to AMWeapon do
1053: LD_ADDR_VAR 0 14
1057: PUSH
1058: DOUBLE
1059: LD_INT 1
1061: DEC
1062: ST_TO_ADDR
1063: LD_VAR 0 10
1067: PUSH
1068: FOR_TO
1069: IFFALSE 1370
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
1071: LD_VAR 0 10
1075: PUSH
1076: LD_VAR 0 14
1080: ARRAY
1081: PUSH
1082: LD_INT 2
1084: EQUAL
1085: PUSH
1086: LD_VAR 0 10
1090: PUSH
1091: LD_VAR 0 14
1095: ARRAY
1096: PUSH
1097: LD_INT 3
1099: EQUAL
1100: OR
1101: IFFALSE 1154
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
1103: LD_ADDR_VAR 0 19
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 2
1113: PUSH
1114: LD_INT 3
1116: PUSH
1117: LD_INT 4
1119: PUSH
1120: LD_INT 5
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
1130: LD_ADDR_OWVAR 37
1134: PUSH
1135: LD_VAR 0 19
1139: PUSH
1140: LD_INT 1
1142: PPUSH
1143: LD_VAR 0 19
1147: PPUSH
1148: CALL_OW 12
1152: ARRAY
1153: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
1154: LD_VAR 0 10
1158: PUSH
1159: LD_VAR 0 14
1163: ARRAY
1164: PUSH
1165: LD_INT 4
1167: EQUAL
1168: PUSH
1169: LD_VAR 0 10
1173: PUSH
1174: LD_VAR 0 14
1178: ARRAY
1179: PUSH
1180: LD_INT 5
1182: EQUAL
1183: OR
1184: PUSH
1185: LD_VAR 0 10
1189: PUSH
1190: LD_VAR 0 14
1194: ARRAY
1195: PUSH
1196: LD_INT 9
1198: EQUAL
1199: OR
1200: PUSH
1201: LD_VAR 0 10
1205: PUSH
1206: LD_VAR 0 14
1210: ARRAY
1211: PUSH
1212: LD_INT 11
1214: EQUAL
1215: OR
1216: PUSH
1217: LD_VAR 0 10
1221: PUSH
1222: LD_VAR 0 14
1226: ARRAY
1227: PUSH
1228: LD_INT 7
1230: EQUAL
1231: OR
1232: IFFALSE 1281
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
1234: LD_ADDR_VAR 0 19
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: LD_INT 3
1244: PUSH
1245: LD_INT 4
1247: PUSH
1248: LD_INT 5
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
1257: LD_ADDR_OWVAR 37
1261: PUSH
1262: LD_VAR 0 19
1266: PUSH
1267: LD_INT 1
1269: PPUSH
1270: LD_VAR 0 19
1274: PPUSH
1275: CALL_OW 12
1279: ARRAY
1280: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
1281: LD_VAR 0 10
1285: PUSH
1286: LD_VAR 0 14
1290: ARRAY
1291: PUSH
1292: LD_INT 8
1294: EQUAL
1295: PUSH
1296: LD_VAR 0 10
1300: PUSH
1301: LD_VAR 0 14
1305: ARRAY
1306: PUSH
1307: LD_INT 6
1309: EQUAL
1310: OR
1311: PUSH
1312: LD_VAR 0 10
1316: PUSH
1317: LD_VAR 0 14
1321: ARRAY
1322: PUSH
1323: LD_INT 10
1325: EQUAL
1326: OR
1327: IFFALSE 1368
// begin amChassisTab = [ 4 , 5 ] ;
1329: LD_ADDR_VAR 0 19
1333: PUSH
1334: LD_INT 4
1336: PUSH
1337: LD_INT 5
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
1344: LD_ADDR_OWVAR 37
1348: PUSH
1349: LD_VAR 0 19
1353: PUSH
1354: LD_INT 1
1356: PPUSH
1357: LD_VAR 0 19
1361: PPUSH
1362: CALL_OW 12
1366: ARRAY
1367: ST_TO_ADDR
// end ; end ;
1368: GO 1068
1370: POP
1371: POP
// veh = CreateVehicle ;
1372: LD_ADDR_VAR 0 16
1376: PUSH
1377: CALL_OW 45
1381: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1382: LD_VAR 0 16
1386: PPUSH
1387: LD_VAR 0 1
1391: PPUSH
1392: LD_INT 0
1394: PPUSH
1395: CALL_OW 49
// if vehControl = 1 then
1399: LD_VAR 0 7
1403: PUSH
1404: LD_INT 1
1406: EQUAL
1407: IFFALSE 1464
// begin hc_gallery =  ;
1409: LD_ADDR_OWVAR 33
1413: PUSH
1414: LD_STRING 
1416: ST_TO_ADDR
// hc_name =  ;
1417: LD_ADDR_OWVAR 26
1421: PUSH
1422: LD_STRING 
1424: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
1425: LD_INT 0
1427: PPUSH
1428: LD_INT 3
1430: PPUSH
1431: LD_VAR 0 4
1435: PPUSH
1436: CALL_OW 380
// un = CreateHuman ;
1440: LD_ADDR_VAR 0 15
1444: PUSH
1445: CALL_OW 44
1449: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1450: LD_VAR 0 15
1454: PPUSH
1455: LD_VAR 0 16
1459: PPUSH
1460: CALL_OW 52
// end ; i = i + 1 ;
1464: LD_ADDR_VAR 0 13
1468: PUSH
1469: LD_VAR 0 13
1473: PUSH
1474: LD_INT 1
1476: PLUS
1477: ST_TO_ADDR
// end ; if nation = 2 then
1478: LD_VAR 0 5
1482: PUSH
1483: LD_INT 2
1485: EQUAL
1486: IFFALSE 1910
// begin uc_side = side ;
1488: LD_ADDR_OWVAR 20
1492: PUSH
1493: LD_VAR 0 2
1497: ST_TO_ADDR
// uc_nation = nation ;
1498: LD_ADDR_OWVAR 21
1502: PUSH
1503: LD_VAR 0 5
1507: ST_TO_ADDR
// vc_engine = vehengine ;
1508: LD_ADDR_OWVAR 39
1512: PUSH
1513: LD_VAR 0 6
1517: ST_TO_ADDR
// vc_control = vehcontrol ;
1518: LD_ADDR_OWVAR 38
1522: PUSH
1523: LD_VAR 0 7
1527: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
1528: LD_ADDR_OWVAR 40
1532: PUSH
1533: LD_VAR 0 9
1537: PUSH
1538: LD_INT 1
1540: PPUSH
1541: LD_VAR 0 9
1545: PPUSH
1546: CALL_OW 12
1550: ARRAY
1551: ST_TO_ADDR
// for j = 1 to ARWeapons do
1552: LD_ADDR_VAR 0 14
1556: PUSH
1557: DOUBLE
1558: LD_INT 1
1560: DEC
1561: ST_TO_ADDR
1562: LD_VAR 0 9
1566: PUSH
1567: FOR_TO
1568: IFFALSE 1802
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
1570: LD_VAR 0 9
1574: PUSH
1575: LD_VAR 0 14
1579: ARRAY
1580: PUSH
1581: LD_INT 24
1583: EQUAL
1584: PUSH
1585: LD_VAR 0 9
1589: PUSH
1590: LD_VAR 0 14
1594: ARRAY
1595: PUSH
1596: LD_INT 22
1598: EQUAL
1599: OR
1600: PUSH
1601: LD_VAR 0 9
1605: PUSH
1606: LD_VAR 0 14
1610: ARRAY
1611: PUSH
1612: LD_INT 23
1614: EQUAL
1615: OR
1616: PUSH
1617: LD_VAR 0 9
1621: PUSH
1622: LD_VAR 0 14
1626: ARRAY
1627: PUSH
1628: LD_INT 30
1630: EQUAL
1631: OR
1632: IFFALSE 1681
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
1634: LD_ADDR_VAR 0 18
1638: PUSH
1639: LD_INT 11
1641: PUSH
1642: LD_INT 12
1644: PUSH
1645: LD_INT 13
1647: PUSH
1648: LD_INT 14
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
1657: LD_ADDR_OWVAR 37
1661: PUSH
1662: LD_VAR 0 18
1666: PUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_VAR 0 18
1674: PPUSH
1675: CALL_OW 12
1679: ARRAY
1680: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
1681: LD_VAR 0 9
1685: PUSH
1686: LD_VAR 0 14
1690: ARRAY
1691: PUSH
1692: LD_INT 29
1694: EQUAL
1695: PUSH
1696: LD_VAR 0 9
1700: PUSH
1701: LD_VAR 0 14
1705: ARRAY
1706: PUSH
1707: LD_INT 28
1709: EQUAL
1710: OR
1711: PUSH
1712: LD_VAR 0 9
1716: PUSH
1717: LD_VAR 0 14
1721: ARRAY
1722: PUSH
1723: LD_INT 27
1725: EQUAL
1726: OR
1727: PUSH
1728: LD_VAR 0 9
1732: PUSH
1733: LD_VAR 0 14
1737: ARRAY
1738: PUSH
1739: LD_INT 26
1741: EQUAL
1742: OR
1743: PUSH
1744: LD_VAR 0 9
1748: PUSH
1749: LD_VAR 0 14
1753: ARRAY
1754: PUSH
1755: LD_INT 25
1757: EQUAL
1758: OR
1759: IFFALSE 1800
// begin arChassisTab = [ 13 , 14 ] ;
1761: LD_ADDR_VAR 0 18
1765: PUSH
1766: LD_INT 13
1768: PUSH
1769: LD_INT 14
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
1776: LD_ADDR_OWVAR 37
1780: PUSH
1781: LD_VAR 0 18
1785: PUSH
1786: LD_INT 1
1788: PPUSH
1789: LD_VAR 0 18
1793: PPUSH
1794: CALL_OW 12
1798: ARRAY
1799: ST_TO_ADDR
// end ; end ;
1800: GO 1567
1802: POP
1803: POP
// veh = CreateVehicle ;
1804: LD_ADDR_VAR 0 16
1808: PUSH
1809: CALL_OW 45
1813: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1814: LD_VAR 0 16
1818: PPUSH
1819: LD_VAR 0 1
1823: PPUSH
1824: LD_INT 0
1826: PPUSH
1827: CALL_OW 49
// if vehcontrol = 1 then
1831: LD_VAR 0 7
1835: PUSH
1836: LD_INT 1
1838: EQUAL
1839: IFFALSE 1896
// begin hc_gallery =  ;
1841: LD_ADDR_OWVAR 33
1845: PUSH
1846: LD_STRING 
1848: ST_TO_ADDR
// hc_name =  ;
1849: LD_ADDR_OWVAR 26
1853: PUSH
1854: LD_STRING 
1856: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
1857: LD_INT 0
1859: PPUSH
1860: LD_INT 3
1862: PPUSH
1863: LD_VAR 0 4
1867: PPUSH
1868: CALL_OW 380
// un = CreateHuman ;
1872: LD_ADDR_VAR 0 15
1876: PUSH
1877: CALL_OW 44
1881: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1882: LD_VAR 0 15
1886: PPUSH
1887: LD_VAR 0 16
1891: PPUSH
1892: CALL_OW 52
// end ; i = i + 1 ;
1896: LD_ADDR_VAR 0 13
1900: PUSH
1901: LD_VAR 0 13
1905: PUSH
1906: LD_INT 1
1908: PLUS
1909: ST_TO_ADDR
// end ; if nation = 3 then
1910: LD_VAR 0 5
1914: PUSH
1915: LD_INT 3
1917: EQUAL
1918: IFFALSE 2310
// begin uc_side = side ;
1920: LD_ADDR_OWVAR 20
1924: PUSH
1925: LD_VAR 0 2
1929: ST_TO_ADDR
// uc_nation = nation ;
1930: LD_ADDR_OWVAR 21
1934: PUSH
1935: LD_VAR 0 5
1939: ST_TO_ADDR
// vc_engine = vehengine ;
1940: LD_ADDR_OWVAR 39
1944: PUSH
1945: LD_VAR 0 6
1949: ST_TO_ADDR
// vc_control = vehcontrol ;
1950: LD_ADDR_OWVAR 38
1954: PUSH
1955: LD_VAR 0 7
1959: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
1960: LD_ADDR_OWVAR 40
1964: PUSH
1965: LD_VAR 0 8
1969: PUSH
1970: LD_INT 1
1972: PPUSH
1973: LD_VAR 0 8
1977: PPUSH
1978: CALL_OW 12
1982: ARRAY
1983: ST_TO_ADDR
// for j = 1 to RuWeapons do
1984: LD_ADDR_VAR 0 14
1988: PUSH
1989: DOUBLE
1990: LD_INT 1
1992: DEC
1993: ST_TO_ADDR
1994: LD_VAR 0 8
1998: PUSH
1999: FOR_TO
2000: IFFALSE 2202
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
2002: LD_VAR 0 8
2006: PUSH
2007: LD_VAR 0 14
2011: ARRAY
2012: PUSH
2013: LD_INT 42
2015: EQUAL
2016: PUSH
2017: LD_VAR 0 8
2021: PUSH
2022: LD_VAR 0 14
2026: ARRAY
2027: PUSH
2028: LD_INT 43
2030: EQUAL
2031: OR
2032: PUSH
2033: LD_VAR 0 8
2037: PUSH
2038: LD_VAR 0 14
2042: ARRAY
2043: PUSH
2044: LD_INT 44
2046: EQUAL
2047: OR
2048: PUSH
2049: LD_VAR 0 8
2053: PUSH
2054: LD_VAR 0 14
2058: ARRAY
2059: PUSH
2060: LD_INT 45
2062: EQUAL
2063: OR
2064: PUSH
2065: LD_VAR 0 8
2069: PUSH
2070: LD_VAR 0 14
2074: ARRAY
2075: PUSH
2076: LD_INT 49
2078: EQUAL
2079: OR
2080: IFFALSE 2129
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
2082: LD_ADDR_VAR 0 17
2086: PUSH
2087: LD_INT 21
2089: PUSH
2090: LD_INT 22
2092: PUSH
2093: LD_INT 23
2095: PUSH
2096: LD_INT 24
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
2105: LD_ADDR_OWVAR 37
2109: PUSH
2110: LD_VAR 0 17
2114: PUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_VAR 0 17
2122: PPUSH
2123: CALL_OW 12
2127: ARRAY
2128: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
2129: LD_VAR 0 8
2133: PUSH
2134: LD_VAR 0 14
2138: ARRAY
2139: PUSH
2140: LD_INT 46
2142: EQUAL
2143: PUSH
2144: LD_VAR 0 8
2148: PUSH
2149: LD_VAR 0 14
2153: ARRAY
2154: PUSH
2155: LD_INT 47
2157: EQUAL
2158: OR
2159: IFFALSE 2200
// begin ruChassisTab = [ 23 , 24 ] ;
2161: LD_ADDR_VAR 0 17
2165: PUSH
2166: LD_INT 23
2168: PUSH
2169: LD_INT 24
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
2176: LD_ADDR_OWVAR 37
2180: PUSH
2181: LD_VAR 0 17
2185: PUSH
2186: LD_INT 1
2188: PPUSH
2189: LD_VAR 0 17
2193: PPUSH
2194: CALL_OW 12
2198: ARRAY
2199: ST_TO_ADDR
// end ; end ;
2200: GO 1999
2202: POP
2203: POP
// veh = CreateVehicle ;
2204: LD_ADDR_VAR 0 16
2208: PUSH
2209: CALL_OW 45
2213: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
2214: LD_VAR 0 16
2218: PPUSH
2219: LD_VAR 0 1
2223: PPUSH
2224: LD_INT 0
2226: PPUSH
2227: CALL_OW 49
// if vehcontrol = 1 then
2231: LD_VAR 0 7
2235: PUSH
2236: LD_INT 1
2238: EQUAL
2239: IFFALSE 2296
// begin hc_gallery =  ;
2241: LD_ADDR_OWVAR 33
2245: PUSH
2246: LD_STRING 
2248: ST_TO_ADDR
// hc_name =  ;
2249: LD_ADDR_OWVAR 26
2253: PUSH
2254: LD_STRING 
2256: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
2257: LD_INT 0
2259: PPUSH
2260: LD_INT 3
2262: PPUSH
2263: LD_VAR 0 4
2267: PPUSH
2268: CALL_OW 380
// un = CreateHuman ;
2272: LD_ADDR_VAR 0 15
2276: PUSH
2277: CALL_OW 44
2281: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2282: LD_VAR 0 15
2286: PPUSH
2287: LD_VAR 0 16
2291: PPUSH
2292: CALL_OW 52
// end ; i = i + 1 ;
2296: LD_ADDR_VAR 0 13
2300: PUSH
2301: LD_VAR 0 13
2305: PUSH
2306: LD_INT 1
2308: PLUS
2309: ST_TO_ADDR
// end ; until i = vehCount ;
2310: LD_VAR 0 13
2314: PUSH
2315: LD_VAR 0 3
2319: EQUAL
2320: IFFALSE 972
// repeat wait ( 0 0$1 ) ;
2322: LD_INT 35
2324: PPUSH
2325: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
2329: LD_ADDR_VAR 0 20
2333: PUSH
2334: LD_INT 22
2336: PUSH
2337: LD_VAR 0 2
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 21
2348: PUSH
2349: LD_INT 2
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PUSH
2356: LD_INT 24
2358: PUSH
2359: LD_INT 650
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: PPUSH
2371: CALL_OW 69
2375: ST_TO_ADDR
// if vehicleOK_list > 0 then
2376: LD_VAR 0 20
2380: PUSH
2381: LD_INT 0
2383: GREATER
2384: IFFALSE 2575
// begin for i in vehicleOK_list do
2386: LD_ADDR_VAR 0 13
2390: PUSH
2391: LD_VAR 0 20
2395: PUSH
2396: FOR_IN
2397: IFFALSE 2573
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
2399: LD_ADDR_VAR 0 21
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_VAR 0 11
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: CALL_OW 69
2420: PPUSH
2421: LD_VAR 0 13
2425: PPUSH
2426: CALL_OW 74
2430: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
2431: LD_ADDR_VAR 0 22
2435: PUSH
2436: LD_INT 22
2438: PUSH
2439: LD_VAR 0 11
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 2
2450: PUSH
2451: LD_INT 59
2453: PUSH
2454: EMPTY
2455: LIST
2456: PUSH
2457: LD_INT 21
2459: PUSH
2460: LD_INT 1
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PUSH
2467: LD_INT 21
2469: PUSH
2470: LD_INT 2
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: EMPTY
2488: LIST
2489: PPUSH
2490: CALL_OW 69
2494: PPUSH
2495: LD_VAR 0 13
2499: PPUSH
2500: CALL_OW 74
2504: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
2505: LD_VAR 0 13
2509: PPUSH
2510: LD_VAR 0 21
2514: PPUSH
2515: CALL_OW 296
2519: PUSH
2520: LD_INT 8
2522: PLUS
2523: PUSH
2524: LD_VAR 0 13
2528: PPUSH
2529: LD_VAR 0 22
2533: PPUSH
2534: CALL_OW 296
2538: LESS
2539: IFFALSE 2557
// begin ComAttackUnit ( i , target1 ) ;
2541: LD_VAR 0 13
2545: PPUSH
2546: LD_VAR 0 21
2550: PPUSH
2551: CALL_OW 115
// end else
2555: GO 2571
// begin ComAttackUnit ( i , target2 ) ;
2557: LD_VAR 0 13
2561: PPUSH
2562: LD_VAR 0 22
2566: PPUSH
2567: CALL_OW 115
// end ; end ;
2571: GO 2396
2573: POP
2574: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
2575: LD_INT 22
2577: PUSH
2578: LD_VAR 0 2
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: LD_INT 21
2589: PUSH
2590: LD_INT 2
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PPUSH
2601: CALL_OW 69
2605: PUSH
2606: LD_INT 0
2608: EQUAL
2609: IFFALSE 2322
// end ;
2611: LD_VAR 0 12
2615: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , temp , target1 , target2 ; begin
2616: LD_INT 0
2618: PPUSH
2619: PPUSH
2620: PPUSH
2621: PPUSH
2622: PPUSH
2623: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
2624: LD_INT 22
2626: PUSH
2627: LD_VAR 0 1
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PUSH
2636: LD_INT 21
2638: PUSH
2639: LD_INT 2
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PPUSH
2650: CALL_OW 69
2654: PUSH
2655: LD_VAR 0 3
2659: LESSEQUAL
2660: IFFALSE 2727
// for i = 1 to vehCount do
2662: LD_ADDR_VAR 0 10
2666: PUSH
2667: DOUBLE
2668: LD_INT 1
2670: DEC
2671: ST_TO_ADDR
2672: LD_VAR 0 3
2676: PUSH
2677: FOR_TO
2678: IFFALSE 2725
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
2680: LD_VAR 0 2
2684: PPUSH
2685: LD_VAR 0 8
2689: PPUSH
2690: LD_VAR 0 6
2694: PPUSH
2695: LD_VAR 0 7
2699: PPUSH
2700: LD_VAR 0 5
2704: PUSH
2705: LD_INT 1
2707: PPUSH
2708: LD_VAR 0 5
2712: PPUSH
2713: CALL_OW 12
2717: ARRAY
2718: PPUSH
2719: CALL_OW 185
2723: GO 2677
2725: POP
2726: POP
// repeat wait ( 0 0$1 ) ;
2727: LD_INT 35
2729: PPUSH
2730: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
2734: LD_INT 22
2736: PUSH
2737: LD_VAR 0 1
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: LD_INT 21
2748: PUSH
2749: LD_INT 2
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 24
2758: PUSH
2759: LD_INT 250
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: LIST
2770: PPUSH
2771: CALL_OW 69
2775: PUSH
2776: LD_VAR 0 3
2780: GREATEREQUAL
2781: IFFALSE 2727
// repeat begin wait ( 0 0$1 ) ;
2783: LD_INT 35
2785: PPUSH
2786: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
2790: LD_ADDR_VAR 0 10
2794: PUSH
2795: LD_INT 22
2797: PUSH
2798: LD_VAR 0 1
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 21
2809: PUSH
2810: LD_INT 2
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PUSH
2817: LD_INT 24
2819: PUSH
2820: LD_INT 651
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: LIST
2831: PPUSH
2832: CALL_OW 69
2836: PUSH
2837: FOR_IN
2838: IFFALSE 3014
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
2840: LD_ADDR_VAR 0 13
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_VAR 0 4
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PPUSH
2857: CALL_OW 69
2861: PPUSH
2862: LD_VAR 0 10
2866: PPUSH
2867: CALL_OW 74
2871: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
2872: LD_ADDR_VAR 0 14
2876: PUSH
2877: LD_INT 22
2879: PUSH
2880: LD_VAR 0 4
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PUSH
2889: LD_INT 2
2891: PUSH
2892: LD_INT 59
2894: PUSH
2895: EMPTY
2896: LIST
2897: PUSH
2898: LD_INT 21
2900: PUSH
2901: LD_INT 1
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: LD_INT 21
2910: PUSH
2911: LD_INT 2
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: LIST
2922: LIST
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: PUSH
2928: EMPTY
2929: LIST
2930: PPUSH
2931: CALL_OW 69
2935: PPUSH
2936: LD_VAR 0 10
2940: PPUSH
2941: CALL_OW 74
2945: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
2946: LD_VAR 0 10
2950: PPUSH
2951: LD_VAR 0 13
2955: PPUSH
2956: CALL_OW 296
2960: PUSH
2961: LD_INT 8
2963: PLUS
2964: PUSH
2965: LD_VAR 0 10
2969: PPUSH
2970: LD_VAR 0 14
2974: PPUSH
2975: CALL_OW 296
2979: LESS
2980: IFFALSE 2998
// begin ComAttackUnit ( i , target1 ) ;
2982: LD_VAR 0 10
2986: PPUSH
2987: LD_VAR 0 13
2991: PPUSH
2992: CALL_OW 115
// end else
2996: GO 3012
// begin ComAttackUnit ( i , target2 ) ;
2998: LD_VAR 0 10
3002: PPUSH
3003: LD_VAR 0 14
3007: PPUSH
3008: CALL_OW 115
// end ; end ;
3012: GO 2837
3014: POP
3015: POP
// end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount ;
3016: LD_INT 22
3018: PUSH
3019: LD_VAR 0 1
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: PUSH
3028: LD_INT 21
3030: PUSH
3031: LD_INT 2
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PPUSH
3042: CALL_OW 69
3046: PUSH
3047: LD_VAR 0 3
3051: LESSEQUAL
3052: IFFALSE 2783
// end ;
3054: LD_VAR 0 9
3058: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
3059: LD_INT 0
3061: PPUSH
3062: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
3063: LD_INT 22
3065: PUSH
3066: LD_VAR 0 1
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: LD_INT 25
3077: PUSH
3078: LD_INT 2
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PPUSH
3089: CALL_OW 69
3093: PUSH
3094: LD_INT 0
3096: GREATER
3097: PUSH
3098: LD_INT 22
3100: PUSH
3101: LD_VAR 0 1
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PUSH
3110: LD_INT 21
3112: PUSH
3113: LD_INT 3
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 3
3122: PUSH
3123: LD_INT 24
3125: PUSH
3126: LD_INT 1000
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: LIST
3141: PPUSH
3142: CALL_OW 69
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: AND
3151: PUSH
3152: LD_VAR 0 2
3156: PUSH
3157: LD_INT 0
3159: GREATER
3160: AND
3161: IFFALSE 3260
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
3163: LD_ADDR_VAR 0 4
3167: PUSH
3168: LD_INT 22
3170: PUSH
3171: LD_VAR 0 1
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: LD_INT 25
3182: PUSH
3183: LD_INT 2
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: PPUSH
3194: CALL_OW 69
3198: PUSH
3199: FOR_IN
3200: IFFALSE 3258
// begin AddComExitBuilding ( i ) ;
3202: LD_VAR 0 4
3206: PPUSH
3207: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
3211: LD_VAR 0 4
3215: PPUSH
3216: LD_VAR 0 2
3220: PUSH
3221: LD_INT 1
3223: ARRAY
3224: PPUSH
3225: LD_VAR 0 2
3229: PUSH
3230: LD_INT 2
3232: ARRAY
3233: PPUSH
3234: LD_VAR 0 2
3238: PUSH
3239: LD_INT 3
3241: ARRAY
3242: PPUSH
3243: LD_VAR 0 2
3247: PUSH
3248: LD_INT 4
3250: ARRAY
3251: PPUSH
3252: CALL_OW 205
// end ;
3256: GO 3199
3258: POP
3259: POP
// end ; end ; end_of_file
3260: LD_VAR 0 3
3264: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3265: LD_INT 0
3267: PPUSH
3268: PPUSH
// if exist_mode then
3269: LD_VAR 0 2
3273: IFFALSE 3292
// unit := CreateCharacter ( ident ) else
3275: LD_ADDR_VAR 0 4
3279: PUSH
3280: LD_VAR 0 1
3284: PPUSH
3285: CALL_OW 34
3289: ST_TO_ADDR
3290: GO 3307
// unit := NewCharacter ( ident ) ;
3292: LD_ADDR_VAR 0 4
3296: PUSH
3297: LD_VAR 0 1
3301: PPUSH
3302: CALL_OW 25
3306: ST_TO_ADDR
// result := unit ;
3307: LD_ADDR_VAR 0 3
3311: PUSH
3312: LD_VAR 0 4
3316: ST_TO_ADDR
// end ;
3317: LD_VAR 0 3
3321: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3322: LD_INT 0
3324: PPUSH
3325: PPUSH
3326: PPUSH
// uc_side := GetSide ( b ) ;
3327: LD_ADDR_OWVAR 20
3331: PUSH
3332: LD_VAR 0 2
3336: PPUSH
3337: CALL_OW 255
3341: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3342: LD_ADDR_OWVAR 21
3346: PUSH
3347: LD_VAR 0 2
3351: PPUSH
3352: CALL_OW 248
3356: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3357: LD_INT 0
3359: PPUSH
3360: LD_INT 1
3362: PPUSH
3363: LD_VAR 0 1
3367: PPUSH
3368: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
3372: LD_ADDR_VAR 0 5
3376: PUSH
3377: LD_VAR 0 2
3381: PPUSH
3382: CALL_OW 254
3386: PUSH
3387: LD_INT 3
3389: MINUS
3390: ST_TO_ADDR
// if dir < 0 then
3391: LD_VAR 0 5
3395: PUSH
3396: LD_INT 0
3398: LESS
3399: IFFALSE 3415
// dir := 6 + dir ;
3401: LD_ADDR_VAR 0 5
3405: PUSH
3406: LD_INT 6
3408: PUSH
3409: LD_VAR 0 5
3413: PLUS
3414: ST_TO_ADDR
// un := CreateHuman ;
3415: LD_ADDR_VAR 0 4
3419: PUSH
3420: CALL_OW 44
3424: ST_TO_ADDR
// SetDir ( un , dir ) ;
3425: LD_VAR 0 4
3429: PPUSH
3430: LD_VAR 0 5
3434: PPUSH
3435: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3439: LD_VAR 0 4
3443: PPUSH
3444: LD_VAR 0 2
3448: PPUSH
3449: CALL_OW 52
// end ; end_of_file
3453: LD_VAR 0 3
3457: RET
// on UnitDestroyed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_building then
3458: LD_VAR 0 1
3462: PPUSH
3463: CALL_OW 255
3467: PUSH
3468: LD_INT 3
3470: EQUAL
3471: PUSH
3472: LD_VAR 0 1
3476: PPUSH
3477: CALL_OW 247
3481: PUSH
3482: LD_INT 3
3484: EQUAL
3485: AND
3486: IFFALSE 4178
// begin if GetBType ( un ) = 31 or GetBType ( un ) = 32 or GetBType ( un ) = 36 or GetBType ( un ) = 0 or GetBType ( un ) = 24 or GetBType ( un ) = 17 or GetBType ( un ) = 25 or GetBType ( un ) = 19 or GetBType ( un ) = 20 or GetBType ( un ) = 18 or GetBType ( un ) = 21 or GetBType ( un ) = 23 or GetBType ( un ) = 16 or GetBType ( un ) = 6 or GetBType ( un ) = 29 or GetBType ( un ) = 26 or GetBType ( un ) = 30 or GetBType ( un ) = 28 or GetBType ( un ) = 27 or GetBType ( un ) = 33 or GetBType ( un ) = 2 or GetBType ( un ) = 4 then
3488: LD_VAR 0 1
3492: PPUSH
3493: CALL_OW 266
3497: PUSH
3498: LD_INT 31
3500: EQUAL
3501: PUSH
3502: LD_VAR 0 1
3506: PPUSH
3507: CALL_OW 266
3511: PUSH
3512: LD_INT 32
3514: EQUAL
3515: OR
3516: PUSH
3517: LD_VAR 0 1
3521: PPUSH
3522: CALL_OW 266
3526: PUSH
3527: LD_INT 36
3529: EQUAL
3530: OR
3531: PUSH
3532: LD_VAR 0 1
3536: PPUSH
3537: CALL_OW 266
3541: PUSH
3542: LD_INT 0
3544: EQUAL
3545: OR
3546: PUSH
3547: LD_VAR 0 1
3551: PPUSH
3552: CALL_OW 266
3556: PUSH
3557: LD_INT 24
3559: EQUAL
3560: OR
3561: PUSH
3562: LD_VAR 0 1
3566: PPUSH
3567: CALL_OW 266
3571: PUSH
3572: LD_INT 17
3574: EQUAL
3575: OR
3576: PUSH
3577: LD_VAR 0 1
3581: PPUSH
3582: CALL_OW 266
3586: PUSH
3587: LD_INT 25
3589: EQUAL
3590: OR
3591: PUSH
3592: LD_VAR 0 1
3596: PPUSH
3597: CALL_OW 266
3601: PUSH
3602: LD_INT 19
3604: EQUAL
3605: OR
3606: PUSH
3607: LD_VAR 0 1
3611: PPUSH
3612: CALL_OW 266
3616: PUSH
3617: LD_INT 20
3619: EQUAL
3620: OR
3621: PUSH
3622: LD_VAR 0 1
3626: PPUSH
3627: CALL_OW 266
3631: PUSH
3632: LD_INT 18
3634: EQUAL
3635: OR
3636: PUSH
3637: LD_VAR 0 1
3641: PPUSH
3642: CALL_OW 266
3646: PUSH
3647: LD_INT 21
3649: EQUAL
3650: OR
3651: PUSH
3652: LD_VAR 0 1
3656: PPUSH
3657: CALL_OW 266
3661: PUSH
3662: LD_INT 23
3664: EQUAL
3665: OR
3666: PUSH
3667: LD_VAR 0 1
3671: PPUSH
3672: CALL_OW 266
3676: PUSH
3677: LD_INT 16
3679: EQUAL
3680: OR
3681: PUSH
3682: LD_VAR 0 1
3686: PPUSH
3687: CALL_OW 266
3691: PUSH
3692: LD_INT 6
3694: EQUAL
3695: OR
3696: PUSH
3697: LD_VAR 0 1
3701: PPUSH
3702: CALL_OW 266
3706: PUSH
3707: LD_INT 29
3709: EQUAL
3710: OR
3711: PUSH
3712: LD_VAR 0 1
3716: PPUSH
3717: CALL_OW 266
3721: PUSH
3722: LD_INT 26
3724: EQUAL
3725: OR
3726: PUSH
3727: LD_VAR 0 1
3731: PPUSH
3732: CALL_OW 266
3736: PUSH
3737: LD_INT 30
3739: EQUAL
3740: OR
3741: PUSH
3742: LD_VAR 0 1
3746: PPUSH
3747: CALL_OW 266
3751: PUSH
3752: LD_INT 28
3754: EQUAL
3755: OR
3756: PUSH
3757: LD_VAR 0 1
3761: PPUSH
3762: CALL_OW 266
3766: PUSH
3767: LD_INT 27
3769: EQUAL
3770: OR
3771: PUSH
3772: LD_VAR 0 1
3776: PPUSH
3777: CALL_OW 266
3781: PUSH
3782: LD_INT 33
3784: EQUAL
3785: OR
3786: PUSH
3787: LD_VAR 0 1
3791: PPUSH
3792: CALL_OW 266
3796: PUSH
3797: LD_INT 2
3799: EQUAL
3800: OR
3801: PUSH
3802: LD_VAR 0 1
3806: PPUSH
3807: CALL_OW 266
3811: PUSH
3812: LD_INT 4
3814: EQUAL
3815: OR
3816: IFFALSE 3902
// begin destroyedBuildings = destroyedBuildings ^ GetBType ( un ) ;
3818: LD_ADDR_EXP 1
3822: PUSH
3823: LD_EXP 1
3827: PUSH
3828: LD_VAR 0 1
3832: PPUSH
3833: CALL_OW 266
3837: ADD
3838: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetX ( un ) ;
3839: LD_ADDR_EXP 1
3843: PUSH
3844: LD_EXP 1
3848: PUSH
3849: LD_VAR 0 1
3853: PPUSH
3854: CALL_OW 250
3858: ADD
3859: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetY ( un ) ;
3860: LD_ADDR_EXP 1
3864: PUSH
3865: LD_EXP 1
3869: PUSH
3870: LD_VAR 0 1
3874: PPUSH
3875: CALL_OW 251
3879: ADD
3880: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetDir ( un ) ;
3881: LD_ADDR_EXP 1
3885: PUSH
3886: LD_EXP 1
3890: PUSH
3891: LD_VAR 0 1
3895: PPUSH
3896: CALL_OW 254
3900: ADD
3901: ST_TO_ADDR
// end ; if GetBType ( un ) = 1 then
3902: LD_VAR 0 1
3906: PPUSH
3907: CALL_OW 266
3911: PUSH
3912: LD_INT 1
3914: EQUAL
3915: IFFALSE 3994
// begin destroyedBuildings = destroyedBuildings ^ 0 ;
3917: LD_ADDR_EXP 1
3921: PUSH
3922: LD_EXP 1
3926: PUSH
3927: LD_INT 0
3929: ADD
3930: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetX ( un ) ;
3931: LD_ADDR_EXP 1
3935: PUSH
3936: LD_EXP 1
3940: PUSH
3941: LD_VAR 0 1
3945: PPUSH
3946: CALL_OW 250
3950: ADD
3951: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetY ( un ) ;
3952: LD_ADDR_EXP 1
3956: PUSH
3957: LD_EXP 1
3961: PUSH
3962: LD_VAR 0 1
3966: PPUSH
3967: CALL_OW 251
3971: ADD
3972: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetDir ( un ) ;
3973: LD_ADDR_EXP 1
3977: PUSH
3978: LD_EXP 1
3982: PUSH
3983: LD_VAR 0 1
3987: PPUSH
3988: CALL_OW 254
3992: ADD
3993: ST_TO_ADDR
// end ; if GetBType ( un ) = 3 then
3994: LD_VAR 0 1
3998: PPUSH
3999: CALL_OW 266
4003: PUSH
4004: LD_INT 3
4006: EQUAL
4007: IFFALSE 4086
// begin destroyedBuildings = destroyedBuildings ^ 2 ;
4009: LD_ADDR_EXP 1
4013: PUSH
4014: LD_EXP 1
4018: PUSH
4019: LD_INT 2
4021: ADD
4022: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetX ( un ) ;
4023: LD_ADDR_EXP 1
4027: PUSH
4028: LD_EXP 1
4032: PUSH
4033: LD_VAR 0 1
4037: PPUSH
4038: CALL_OW 250
4042: ADD
4043: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetY ( un ) ;
4044: LD_ADDR_EXP 1
4048: PUSH
4049: LD_EXP 1
4053: PUSH
4054: LD_VAR 0 1
4058: PPUSH
4059: CALL_OW 251
4063: ADD
4064: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetDir ( un ) ;
4065: LD_ADDR_EXP 1
4069: PUSH
4070: LD_EXP 1
4074: PUSH
4075: LD_VAR 0 1
4079: PPUSH
4080: CALL_OW 254
4084: ADD
4085: ST_TO_ADDR
// end ; if GetBType ( un ) = 5 then
4086: LD_VAR 0 1
4090: PPUSH
4091: CALL_OW 266
4095: PUSH
4096: LD_INT 5
4098: EQUAL
4099: IFFALSE 4178
// begin destroyedBuildings = destroyedBuildings ^ 4 ;
4101: LD_ADDR_EXP 1
4105: PUSH
4106: LD_EXP 1
4110: PUSH
4111: LD_INT 4
4113: ADD
4114: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetX ( un ) ;
4115: LD_ADDR_EXP 1
4119: PUSH
4120: LD_EXP 1
4124: PUSH
4125: LD_VAR 0 1
4129: PPUSH
4130: CALL_OW 250
4134: ADD
4135: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetY ( un ) ;
4136: LD_ADDR_EXP 1
4140: PUSH
4141: LD_EXP 1
4145: PUSH
4146: LD_VAR 0 1
4150: PPUSH
4151: CALL_OW 251
4155: ADD
4156: ST_TO_ADDR
// destroyedBuildings = destroyedBuildings ^ GetDir ( un ) ;
4157: LD_ADDR_EXP 1
4161: PUSH
4162: LD_EXP 1
4166: PUSH
4167: LD_VAR 0 1
4171: PPUSH
4172: CALL_OW 254
4176: ADD
4177: ST_TO_ADDR
// end ; end ; end ;
4178: PPOPN 1
4180: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
4181: LD_VAR 0 1
4185: PPUSH
4186: CALL_OW 255
4190: PUSH
4191: LD_INT 3
4193: EQUAL
4194: IFFALSE 4268
// begin destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
4196: LD_ADDR_EXP 1
4200: PUSH
4201: LD_EXP 1
4205: PPUSH
4206: LD_INT 1
4208: PPUSH
4209: CALL_OW 3
4213: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
4214: LD_ADDR_EXP 1
4218: PUSH
4219: LD_EXP 1
4223: PPUSH
4224: LD_INT 1
4226: PPUSH
4227: CALL_OW 3
4231: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
4232: LD_ADDR_EXP 1
4236: PUSH
4237: LD_EXP 1
4241: PPUSH
4242: LD_INT 1
4244: PPUSH
4245: CALL_OW 3
4249: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
4250: LD_ADDR_EXP 1
4254: PUSH
4255: LD_EXP 1
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: CALL_OW 3
4267: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL_OW 255
4277: PUSH
4278: LD_INT 3
4280: EQUAL
4281: PUSH
4282: LD_VAR 0 1
4286: PPUSH
4287: CALL_OW 266
4291: PUSH
4292: LD_INT 0
4294: EQUAL
4295: PUSH
4296: LD_VAR 0 1
4300: PPUSH
4301: CALL_OW 266
4305: PUSH
4306: LD_INT 2
4308: EQUAL
4309: OR
4310: PUSH
4311: LD_VAR 0 1
4315: PPUSH
4316: CALL_OW 266
4320: PUSH
4321: LD_INT 4
4323: EQUAL
4324: OR
4325: PUSH
4326: EMPTY
4327: LIST
4328: AND
4329: IFFALSE 4340
// ComUpgrade ( building ) ;
4331: LD_VAR 0 1
4335: PPUSH
4336: CALL_OW 146
// end ;
4340: PPOPN 1
4342: END
