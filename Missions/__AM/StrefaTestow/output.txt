// export destroyedBuildings ; export cargoTest ; export vehicleDriverTab ; export arabianMines ; export JMM ; starting var i ; begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// destroyedBuildings = [ ] ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// cargoTest = [ ] ;
  15: LD_ADDR_EXP 2
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// arabianMines = [ ] ;
  22: LD_ADDR_EXP 4
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// end ;
  29: END
// export d ; every 0 0$01 do var un , un2 ;
  30: GO 32
  32: DISABLE
  33: LD_INT 0
  35: PPUSH
  36: PPUSH
// begin uc_side := 1 ;
  37: LD_ADDR_OWVAR 20
  41: PUSH
  42: LD_INT 1
  44: ST_TO_ADDR
// uc_nation := 2 ;
  45: LD_ADDR_OWVAR 21
  49: PUSH
  50: LD_INT 2
  52: ST_TO_ADDR
// hc_class := 1 ;
  53: LD_ADDR_OWVAR 28
  57: PUSH
  58: LD_INT 1
  60: ST_TO_ADDR
// hc_gallery :=  ;
  61: LD_ADDR_OWVAR 33
  65: PUSH
  66: LD_STRING 
  68: ST_TO_ADDR
// un := CreateHuman ;
  69: LD_ADDR_VAR 0 1
  73: PUSH
  74: CALL_OW 44
  78: ST_TO_ADDR
// d := CreateHuman ;
  79: LD_ADDR_EXP 6
  83: PUSH
  84: CALL_OW 44
  88: ST_TO_ADDR
// PlaceUnitXY ( un , 192 , 25 , false ) ;
  89: LD_VAR 0 1
  93: PPUSH
  94: LD_INT 192
  96: PPUSH
  97: LD_INT 25
  99: PPUSH
 100: LD_INT 0
 102: PPUSH
 103: CALL_OW 48
// PlaceUnitXY ( d , 190 , 25 , false ) ;
 107: LD_EXP 6
 111: PPUSH
 112: LD_INT 190
 114: PPUSH
 115: LD_INT 25
 117: PPUSH
 118: LD_INT 0
 120: PPUSH
 121: CALL_OW 48
// end ;
 125: PPOPN 2
 127: END
// every 0 0$01 do
 128: GO 130
 130: DISABLE
// begin enable ;
 131: ENABLE
// display_strings := WantPlant ( d ) ;
 132: LD_ADDR_OWVAR 47
 136: PUSH
 137: LD_EXP 6
 141: PPUSH
 142: CALL 148 0 1
 146: ST_TO_ADDR
// end ;
 147: END
// export function WantPlant ( unit ) ; var task ; begin
 148: LD_INT 0
 150: PPUSH
 151: PPUSH
// result := false ;
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
 160: LD_ADDR_VAR 0 3
 164: PUSH
 165: LD_VAR 0 1
 169: PPUSH
 170: CALL_OW 437
 174: ST_TO_ADDR
// if task then
 175: LD_VAR 0 3
 179: IFFALSE 207
// if task [ 1 ] [ 1 ] = p then
 181: LD_VAR 0 3
 185: PUSH
 186: LD_INT 1
 188: ARRAY
 189: PUSH
 190: LD_INT 1
 192: ARRAY
 193: PUSH
 194: LD_STRING p
 196: EQUAL
 197: IFFALSE 207
// result := true ;
 199: LD_ADDR_VAR 0 2
 203: PUSH
 204: LD_INT 1
 206: ST_TO_ADDR
// end ;
 207: LD_VAR 0 2
 211: RET
// export function RemoveResourcesFromArea ( area , materials ) ; var amount , i , tmp ; begin
 212: LD_INT 0
 214: PPUSH
 215: PPUSH
 216: PPUSH
 217: PPUSH
// for i = 1 to 3 do
 218: LD_ADDR_VAR 0 5
 222: PUSH
 223: DOUBLE
 224: LD_INT 1
 226: DEC
 227: ST_TO_ADDR
 228: LD_INT 3
 230: PUSH
 231: FOR_TO
 232: IFFALSE 262
// amount := amount + GetResourceArea ( area , i ) ;
 234: LD_ADDR_VAR 0 4
 238: PUSH
 239: LD_VAR 0 4
 243: PUSH
 244: LD_VAR 0 1
 248: PPUSH
 249: LD_VAR 0 5
 253: PPUSH
 254: CALL_OW 287
 258: PLUS
 259: ST_TO_ADDR
 260: GO 231
 262: POP
 263: POP
// if amount < materials then
 264: LD_VAR 0 4
 268: PUSH
 269: LD_VAR 0 2
 273: LESS
 274: IFFALSE 278
// exit ;
 276: GO 312
// for i = 1 to 3 do
 278: LD_ADDR_VAR 0 5
 282: PUSH
 283: DOUBLE
 284: LD_INT 1
 286: DEC
 287: ST_TO_ADDR
 288: LD_INT 3
 290: PUSH
 291: FOR_TO
 292: IFFALSE 310
// EraseResourceArea ( area , i ) ;
 294: LD_VAR 0 1
 298: PPUSH
 299: LD_VAR 0 5
 303: PPUSH
 304: CALL_OW 286
 308: GO 291
 310: POP
 311: POP
// end ; end_of_file
 312: LD_VAR 0 3
 316: RET
// every 0 0$1 do
 317: GO 319
 319: DISABLE
// begin enable ;
 320: ENABLE
// end ;
 321: END
// every 5 5$1 do
 322: GO 324
 324: DISABLE
// begin end ;
 325: END
// every 0 0$1 do
 326: GO 328
 328: DISABLE
// begin end ;
 329: END
// every 0 0$01 trigger arabianMines do var i , p ;
 330: LD_EXP 4
 334: IFFALSE 537
 336: GO 338
 338: DISABLE
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
// begin enable ;
 343: ENABLE
// p := 1 ;
 344: LD_ADDR_VAR 0 2
 348: PUSH
 349: LD_INT 1
 351: ST_TO_ADDR
// for i = 1 to arabianMines / 2 do
 352: LD_ADDR_VAR 0 1
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_EXP 4
 366: PUSH
 367: LD_INT 2
 369: DIVREAL
 370: PUSH
 371: FOR_TO
 372: IFFALSE 535
// begin if FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_distxy , arabianMines [ p ] , arabianMines [ p + 1 ] , 2 ] ] ) then
 374: LD_INT 81
 376: PUSH
 377: LD_INT 2
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 92
 386: PUSH
 387: LD_EXP 4
 391: PUSH
 392: LD_VAR 0 2
 396: ARRAY
 397: PUSH
 398: LD_EXP 4
 402: PUSH
 403: LD_VAR 0 2
 407: PUSH
 408: LD_INT 1
 410: PLUS
 411: ARRAY
 412: PUSH
 413: LD_INT 2
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 69
 430: IFFALSE 519
// begin LaunchMineAtPos ( arabianMines [ p ] , arabianMines [ p + 1 ] , 2 ) ;
 432: LD_EXP 4
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: PPUSH
 443: LD_EXP 4
 447: PUSH
 448: LD_VAR 0 2
 452: PUSH
 453: LD_INT 1
 455: PLUS
 456: ARRAY
 457: PPUSH
 458: LD_INT 2
 460: PPUSH
 461: CALL_OW 456
// arabianMines := Delete ( arabianMines , p ) ;
 465: LD_ADDR_EXP 4
 469: PUSH
 470: LD_EXP 4
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: CALL_OW 3
 484: ST_TO_ADDR
// arabianMines := Delete ( arabianMines , p ) ;
 485: LD_ADDR_EXP 4
 489: PUSH
 490: LD_EXP 4
 494: PPUSH
 495: LD_VAR 0 2
 499: PPUSH
 500: CALL_OW 3
 504: ST_TO_ADDR
// p := p - 2 ;
 505: LD_ADDR_VAR 0 2
 509: PUSH
 510: LD_VAR 0 2
 514: PUSH
 515: LD_INT 2
 517: MINUS
 518: ST_TO_ADDR
// end ; p := p + 2 ;
 519: LD_ADDR_VAR 0 2
 523: PUSH
 524: LD_VAR 0 2
 528: PUSH
 529: LD_INT 2
 531: PLUS
 532: ST_TO_ADDR
// end ;
 533: GO 371
 535: POP
 536: POP
// end ;
 537: PPOPN 2
 539: END
// every 0 0$1 trigger IsDying ( labek ) do var i , j , vehy , sci ;
 540: LD_INT 138
 542: PPUSH
 543: CALL_OW 303
 547: IFFALSE 704
 549: GO 551
 551: DISABLE
 552: LD_INT 0
 554: PPUSH
 555: PPUSH
 556: PPUSH
 557: PPUSH
// begin sci = [ s1 , s2 , s3 , s4 , s5 , s6 ] ;
 558: LD_ADDR_VAR 0 4
 562: PUSH
 563: LD_INT 142
 565: PUSH
 566: LD_INT 143
 568: PUSH
 569: LD_INT 144
 571: PUSH
 572: LD_INT 145
 574: PUSH
 575: LD_INT 146
 577: PUSH
 578: LD_INT 147
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: ST_TO_ADDR
// for i in sci do
 589: LD_ADDR_VAR 0 1
 593: PUSH
 594: LD_VAR 0 4
 598: PUSH
 599: FOR_IN
 600: IFFALSE 702
// begin display_strings = vehy ;
 602: LD_ADDR_OWVAR 47
 606: PUSH
 607: LD_VAR 0 3
 611: ST_TO_ADDR
// vehy = FilterUnitsInArea ( PojazdyArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: LD_INT 7
 619: PPUSH
 620: LD_INT 22
 622: PUSH
 623: LD_INT 3
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 21
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 58
 642: PUSH
 643: EMPTY
 644: LIST
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: PPUSH
 651: CALL_OW 70
 655: ST_TO_ADDR
// AddComEnterUnit ( i , vehy ) ;
 656: LD_VAR 0 1
 660: PPUSH
 661: LD_VAR 0 3
 665: PPUSH
 666: CALL_OW 180
// AddComMoveXY ( i , 217 , 35 ) ;
 670: LD_VAR 0 1
 674: PPUSH
 675: LD_INT 217
 677: PPUSH
 678: LD_INT 35
 680: PPUSH
 681: CALL_OW 171
// ComMoveXY ( vehy , 217 , 35 ) ;
 685: LD_VAR 0 3
 689: PPUSH
 690: LD_INT 217
 692: PPUSH
 693: LD_INT 35
 695: PPUSH
 696: CALL_OW 111
// end ;
 700: GO 599
 702: POP
 703: POP
// end ;
 704: PPOPN 4
 706: END
