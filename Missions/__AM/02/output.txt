// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// PrepareDifficulty ;
 161: CALL 10435 0 0
// PrepareRussianCommander ;
 165: CALL 11879 0 0
// PrepareSouthBase ;
 169: CALL 11962 0 0
// PrepareNorthBase ;
 173: CALL 12301 0 0
// PrepareOtherRussians ;
 177: CALL 12667 0 0
// PrepareHeroes ;
 181: CALL 10750 0 0
// PrepareLisSquad ;
 185: CALL 11078 0 0
// PrepareOtherAmericans ;
 189: CALL 11423 0 0
// end ; end_of_file
 193: END
// every 1 do var tmp ;
 194: GO 196
 196: DISABLE
 197: LD_INT 0
 199: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 209: LD_ADDR_VAR 0 1
 213: PUSH
 214: LD_INT 22
 216: PUSH
 217: LD_INT 4
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 21
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PPUSH
 238: CALL_OW 69
 242: PUSH
 243: LD_EXP 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: DIFF
 251: ST_TO_ADDR
// if Cyrus and Bobby then
 252: LD_EXP 3
 256: PUSH
 257: LD_EXP 2
 261: AND
 262: IFFALSE 592
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 264: LD_EXP 3
 268: PPUSH
 269: LD_INT 43
 271: PPUSH
 272: LD_INT 72
 274: PPUSH
 275: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_INT 44
 286: PPUSH
 287: LD_INT 70
 289: PPUSH
 290: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 294: LD_EXP 1
 298: PPUSH
 299: LD_INT 46
 301: PPUSH
 302: LD_INT 73
 304: PPUSH
 305: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 309: LD_EXP 3
 313: PPUSH
 314: LD_STRING D1a-Cyrus-1
 316: PPUSH
 317: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_STRING D1a-JMM-1
 328: PPUSH
 329: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 333: LD_EXP 3
 337: PPUSH
 338: LD_INT 37
 340: PPUSH
 341: LD_INT 66
 343: PPUSH
 344: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 348: LD_EXP 2
 352: PPUSH
 353: LD_INT 41
 355: PPUSH
 356: LD_INT 67
 358: PPUSH
 359: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 363: LD_EXP 1
 367: PPUSH
 368: LD_INT 38
 370: PPUSH
 371: LD_INT 64
 373: PPUSH
 374: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 378: LD_EXP 2
 382: PPUSH
 383: LD_STRING D1a-Bobby-2
 385: PPUSH
 386: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 390: LD_EXP 3
 394: PPUSH
 395: LD_INT 35
 397: PPUSH
 398: LD_INT 62
 400: PPUSH
 401: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 405: LD_EXP 2
 409: PPUSH
 410: LD_INT 32
 412: PPUSH
 413: LD_INT 60
 415: PPUSH
 416: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 420: LD_EXP 1
 424: PPUSH
 425: LD_INT 35
 427: PPUSH
 428: LD_INT 60
 430: PPUSH
 431: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 435: LD_EXP 1
 439: PPUSH
 440: LD_STRING D1a-JMM-2
 442: PPUSH
 443: CALL_OW 88
// ComWalk ( Lisa ) ;
 447: LD_EXP 4
 451: PPUSH
 452: CALL_OW 138
// wait ( 0 0$1 ) ;
 456: LD_INT 35
 458: PPUSH
 459: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 463: LD_EXP 4
 467: PPUSH
 468: LD_EXP 1
 472: PPUSH
 473: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 477: LD_EXP 1
 481: PUSH
 482: LD_EXP 3
 486: PUSH
 487: LD_EXP 2
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PPUSH
 497: LD_EXP 4
 501: PPUSH
 502: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 506: LD_VAR 0 1
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: LD_INT 33
 517: PPUSH
 518: LD_INT 55
 520: PPUSH
 521: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 525: LD_VAR 0 1
 529: PUSH
 530: LD_INT 2
 532: ARRAY
 533: PPUSH
 534: LD_INT 30
 536: PPUSH
 537: LD_INT 54
 539: PPUSH
 540: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 544: LD_VAR 0 1
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: LD_EXP 1
 557: PPUSH
 558: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 562: LD_VAR 0 1
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 1
 575: PPUSH
 576: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 580: LD_EXP 4
 584: PPUSH
 585: LD_STRING D1a-Lisa-2
 587: PPUSH
 588: CALL_OW 88
// end ; if Cyrus and not Bobby then
 592: LD_EXP 3
 596: PUSH
 597: LD_EXP 2
 601: NOT
 602: AND
 603: IFFALSE 808
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 605: LD_EXP 3
 609: PPUSH
 610: LD_INT 43
 612: PPUSH
 613: LD_INT 72
 615: PPUSH
 616: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 46
 627: PPUSH
 628: LD_INT 73
 630: PPUSH
 631: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 635: LD_EXP 3
 639: PPUSH
 640: LD_STRING D1a-Cyrus-1
 642: PPUSH
 643: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 647: LD_EXP 1
 651: PPUSH
 652: LD_STRING D1a-JMM-1
 654: PPUSH
 655: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 659: LD_EXP 3
 663: PPUSH
 664: LD_INT 37
 666: PPUSH
 667: LD_INT 66
 669: PPUSH
 670: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 674: LD_EXP 1
 678: PPUSH
 679: LD_INT 38
 681: PPUSH
 682: LD_INT 64
 684: PPUSH
 685: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 689: LD_EXP 3
 693: PPUSH
 694: LD_STRING D1a-Cyrus-2
 696: PPUSH
 697: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 701: LD_EXP 3
 705: PPUSH
 706: LD_INT 35
 708: PPUSH
 709: LD_INT 62
 711: PPUSH
 712: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 716: LD_EXP 1
 720: PPUSH
 721: LD_INT 35
 723: PPUSH
 724: LD_INT 60
 726: PPUSH
 727: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 731: LD_EXP 1
 735: PPUSH
 736: LD_STRING D1a-JMM-2
 738: PPUSH
 739: CALL_OW 88
// ComWalk ( Lisa ) ;
 743: LD_EXP 4
 747: PPUSH
 748: CALL_OW 138
// wait ( 0 0$1 ) ;
 752: LD_INT 35
 754: PPUSH
 755: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 759: LD_EXP 4
 763: PPUSH
 764: LD_EXP 1
 768: PPUSH
 769: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 773: LD_EXP 4
 777: PPUSH
 778: LD_STRING D1a-Lisa-2
 780: PPUSH
 781: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 785: LD_EXP 1
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PPUSH
 799: LD_EXP 4
 803: PPUSH
 804: CALL_OW 119
// end ; if not Cyrus and Bobby then
 808: LD_EXP 3
 812: NOT
 813: PUSH
 814: LD_EXP 2
 818: AND
 819: IFFALSE 1098
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 821: LD_EXP 2
 825: PPUSH
 826: LD_INT 44
 828: PPUSH
 829: LD_INT 70
 831: PPUSH
 832: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 836: LD_EXP 1
 840: PPUSH
 841: LD_INT 46
 843: PPUSH
 844: LD_INT 73
 846: PPUSH
 847: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 851: LD_EXP 2
 855: PPUSH
 856: LD_STRING D1a-Bobby-1
 858: PPUSH
 859: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 863: LD_EXP 1
 867: PPUSH
 868: LD_STRING D1a-JMM-1
 870: PPUSH
 871: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 875: LD_EXP 2
 879: PPUSH
 880: LD_INT 37
 882: PPUSH
 883: LD_INT 66
 885: PPUSH
 886: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 890: LD_EXP 1
 894: PPUSH
 895: LD_INT 38
 897: PPUSH
 898: LD_INT 64
 900: PPUSH
 901: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 905: LD_EXP 2
 909: PPUSH
 910: LD_STRING D1a-Bobby-2
 912: PPUSH
 913: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 917: LD_EXP 2
 921: PPUSH
 922: LD_INT 35
 924: PPUSH
 925: LD_INT 62
 927: PPUSH
 928: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 932: LD_EXP 1
 936: PPUSH
 937: LD_INT 35
 939: PPUSH
 940: LD_INT 60
 942: PPUSH
 943: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 947: LD_EXP 1
 951: PPUSH
 952: LD_STRING D1a-JMM-2
 954: PPUSH
 955: CALL_OW 88
// ComWalk ( Lisa ) ;
 959: LD_EXP 4
 963: PPUSH
 964: CALL_OW 138
// wait ( 0 0$1 ) ;
 968: LD_INT 35
 970: PPUSH
 971: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 975: LD_EXP 4
 979: PPUSH
 980: LD_EXP 1
 984: PPUSH
 985: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 989: LD_EXP 1
 993: PUSH
 994: LD_EXP 3
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PPUSH
1003: LD_EXP 4
1007: PPUSH
1008: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1012: LD_VAR 0 1
1016: PUSH
1017: LD_INT 1
1019: ARRAY
1020: PPUSH
1021: LD_INT 33
1023: PPUSH
1024: LD_INT 55
1026: PPUSH
1027: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1031: LD_VAR 0 1
1035: PUSH
1036: LD_INT 2
1038: ARRAY
1039: PPUSH
1040: LD_INT 30
1042: PPUSH
1043: LD_INT 54
1045: PPUSH
1046: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1050: LD_VAR 0 1
1054: PUSH
1055: LD_INT 1
1057: ARRAY
1058: PPUSH
1059: LD_EXP 1
1063: PPUSH
1064: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1068: LD_VAR 0 1
1072: PUSH
1073: LD_INT 2
1075: ARRAY
1076: PPUSH
1077: LD_EXP 1
1081: PPUSH
1082: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1086: LD_EXP 4
1090: PPUSH
1091: LD_STRING D1a-Lisa-2
1093: PPUSH
1094: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1098: LD_EXP 3
1102: NOT
1103: PUSH
1104: LD_EXP 2
1108: NOT
1109: AND
1110: IFFALSE 1324
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1112: LD_EXP 1
1116: PPUSH
1117: LD_INT 37
1119: PPUSH
1120: LD_INT 66
1122: PPUSH
1123: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1127: LD_EXP 1
1131: PPUSH
1132: LD_STRING D1b-JMM-1
1134: PPUSH
1135: CALL_OW 88
// ComCrawl ( JMM ) ;
1139: LD_EXP 1
1143: PPUSH
1144: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1148: LD_EXP 1
1152: PPUSH
1153: LD_INT 35
1155: PPUSH
1156: LD_INT 60
1158: PPUSH
1159: CALL_OW 171
// wait ( 0 0$8 ) ;
1163: LD_INT 280
1165: PPUSH
1166: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_STRING D1b-JMM-1a
1177: PPUSH
1178: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1182: LD_EXP 1
1186: PUSH
1187: LD_EXP 4
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PPUSH
1196: CALL_OW 138
// wait ( 0 0$1 ) ;
1200: LD_INT 35
1202: PPUSH
1203: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1207: LD_EXP 4
1211: PPUSH
1212: LD_EXP 1
1216: PPUSH
1217: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1221: LD_EXP 1
1225: PUSH
1226: EMPTY
1227: LIST
1228: PPUSH
1229: LD_EXP 4
1233: PPUSH
1234: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1238: LD_VAR 0 1
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: LD_INT 33
1249: PPUSH
1250: LD_INT 55
1252: PPUSH
1253: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1257: LD_VAR 0 1
1261: PUSH
1262: LD_INT 2
1264: ARRAY
1265: PPUSH
1266: LD_INT 30
1268: PPUSH
1269: LD_INT 54
1271: PPUSH
1272: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1276: LD_VAR 0 1
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_EXP 1
1289: PPUSH
1290: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1294: LD_VAR 0 1
1298: PUSH
1299: LD_INT 2
1301: ARRAY
1302: PPUSH
1303: LD_EXP 1
1307: PPUSH
1308: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1312: LD_EXP 4
1316: PPUSH
1317: LD_STRING D1b-Lisa-1
1319: PPUSH
1320: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1324: LD_EXP 1
1328: PPUSH
1329: LD_STRING D1-JMM-1
1331: PPUSH
1332: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1336: LD_EXP 4
1340: PPUSH
1341: LD_STRING D1-Lisa-1
1343: PPUSH
1344: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1348: LD_EXP 1
1352: PPUSH
1353: LD_STRING D1-JMM-2
1355: PPUSH
1356: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1360: LD_EXP 9
1364: PPUSH
1365: LD_STRING D1-Pow-2
1367: PPUSH
1368: CALL_OW 94
// if Cyrus then
1372: LD_EXP 3
1376: IFFALSE 1402
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1378: LD_EXP 3
1382: PPUSH
1383: LD_STRING D1-Cyrus-2
1385: PPUSH
1386: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-3
1397: PPUSH
1398: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1402: LD_EXP 9
1406: PPUSH
1407: LD_STRING D1-Pow-3
1409: PPUSH
1410: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1414: LD_EXP 1
1418: PPUSH
1419: LD_STRING D1-JMM-4
1421: PPUSH
1422: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1426: LD_EXP 9
1430: PPUSH
1431: LD_STRING D1-Pow-4
1433: PPUSH
1434: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1438: LD_EXP 9
1442: PPUSH
1443: LD_STRING D1-Pow-4a
1445: PPUSH
1446: CALL_OW 94
// if Cyrus then
1450: LD_EXP 3
1454: IFFALSE 1468
// Say ( Cyrus , D1-Cyrus-4 ) ;
1456: LD_EXP 3
1460: PPUSH
1461: LD_STRING D1-Cyrus-4
1463: PPUSH
1464: CALL_OW 88
// if Bobby then
1468: LD_EXP 2
1472: IFFALSE 1510
// begin Say ( Bobby , D1-Bobby-4 ) ;
1474: LD_EXP 2
1478: PPUSH
1479: LD_STRING D1-Bobby-4
1481: PPUSH
1482: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1486: LD_EXP 4
1490: PPUSH
1491: LD_STRING D1-Lisa-4
1493: PPUSH
1494: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1498: LD_EXP 1
1502: PPUSH
1503: LD_STRING D1-JMM-5
1505: PPUSH
1506: CALL_OW 88
// end ; InGameOff ;
1510: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1514: LD_INT 22
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 69
1528: PUSH
1529: LD_EXP 6
1533: PUSH
1534: LD_EXP 7
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: DIFF
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1551: LD_STRING M1
1553: PPUSH
1554: CALL_OW 337
// SaveForQuickRestart ;
1558: CALL_OW 22
// end ;
1562: PPOPN 1
1564: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1565: LD_INT 7
1567: PPUSH
1568: LD_INT 22
1570: PUSH
1571: LD_INT 1
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 70
1582: PUSH
1583: LD_INT 0
1585: GREATER
1586: IFFALSE 2003
1588: GO 1590
1590: DISABLE
// begin InGameOn ;
1591: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1595: LD_INT 22
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 21
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PPUSH
1619: CALL_OW 69
1623: PPUSH
1624: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1628: LD_INT 24
1630: PPUSH
1631: LD_INT 32
1633: PPUSH
1634: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1638: LD_EXP 5
1642: PPUSH
1643: LD_INT 4
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 4
1660: PPUSH
1661: CALL_OW 336
// wait ( 0 0$1 ) ;
1665: LD_INT 35
1667: PPUSH
1668: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1672: LD_EXP 5
1676: PPUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_INT 38
1682: PPUSH
1683: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1687: LD_EXP 5
1691: PPUSH
1692: LD_EXP 1
1696: PPUSH
1697: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1701: LD_INT 22
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 21
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PPUSH
1725: CALL_OW 69
1729: PUSH
1730: LD_EXP 5
1734: PUSH
1735: EMPTY
1736: LIST
1737: DIFF
1738: PPUSH
1739: LD_EXP 5
1743: PPUSH
1744: CALL_OW 119
// wait ( 0 0$1 ) ;
1748: LD_INT 35
1750: PPUSH
1751: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1755: LD_EXP 5
1759: PPUSH
1760: LD_STRING D2a-Khat-1
1762: PPUSH
1763: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1767: LD_EXP 1
1771: PPUSH
1772: LD_STRING D2a-JMM-1
1774: PPUSH
1775: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1779: LD_EXP 5
1783: PPUSH
1784: LD_STRING D2a-Khat-2
1786: PPUSH
1787: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1791: LD_EXP 1
1795: PPUSH
1796: LD_STRING D2a-JMM-2
1798: PPUSH
1799: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1803: LD_EXP 5
1807: PPUSH
1808: LD_STRING D2a-Khat-3
1810: PPUSH
1811: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1815: LD_EXP 1
1819: PPUSH
1820: LD_STRING D2a-JMM-3
1822: PPUSH
1823: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1827: LD_EXP 5
1831: PPUSH
1832: LD_STRING D2a-Khat-4
1834: PPUSH
1835: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1839: LD_EXP 1
1843: PPUSH
1844: LD_STRING D2a-JMM-4
1846: PPUSH
1847: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1851: LD_EXP 5
1855: PPUSH
1856: LD_STRING D2a-Khat-5
1858: PPUSH
1859: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_STRING D2a-JMM-5
1870: PPUSH
1871: CALL_OW 88
// InGameOff ;
1875: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1879: LD_INT 22
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 21
1891: PUSH
1892: LD_INT 1
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 3
1901: PUSH
1902: LD_INT 24
1904: PUSH
1905: LD_INT 800
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: PUSH
1926: LD_INT 0
1928: GREATER
1929: IFFALSE 2003
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1931: LD_EXP 5
1935: PPUSH
1936: LD_INT 22
1938: PUSH
1939: LD_INT 1
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 21
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 3
1958: PUSH
1959: LD_INT 24
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: PPUSH
1978: CALL_OW 69
1982: PUSH
1983: LD_INT 1
1985: ARRAY
1986: PPUSH
1987: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1991: LD_EXP 5
1995: PPUSH
1996: LD_STRING D2b-Khat-1
1998: PPUSH
1999: CALL_OW 88
// end ; end ;
2003: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
2004: LD_INT 15
2006: PPUSH
2007: LD_INT 22
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PPUSH
2017: CALL_OW 70
2021: PUSH
2022: LD_INT 0
2024: GREATER
2025: IFFALSE 3182
2027: GO 2029
2029: DISABLE
2030: LD_INT 0
2032: PPUSH
2033: PPUSH
2034: PPUSH
2035: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: LD_INT 999
2043: PUSH
2044: LD_INT 999
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2054: LD_ADDR_VAR 0 4
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 1
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PPUSH
2083: CALL_OW 69
2087: PUSH
2088: LD_EXP 1
2092: PUSH
2093: LD_EXP 2
2097: PUSH
2098: LD_EXP 3
2102: PUSH
2103: LD_EXP 4
2107: PUSH
2108: LD_EXP 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: DIFF
2120: ST_TO_ADDR
// PrepareDeadSoldiers ;
2121: CALL 11581 0 0
// spotCorpses = 1 ;
2125: LD_ADDR_EXP 32
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
// InGameOn ;
2133: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2137: LD_INT 23
2139: PPUSH
2140: LD_INT 12
2142: PPUSH
2143: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2147: LD_ADDR_VAR 0 3
2151: PUSH
2152: LD_VAR 0 2
2156: PUSH
2157: LD_INT 1
2159: ARRAY
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2165: LD_ADDR_VAR 0 1
2169: PUSH
2170: LD_INT 22
2172: PUSH
2173: LD_INT 1
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 21
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PPUSH
2194: CALL_OW 69
2198: PUSH
2199: LD_EXP 1
2203: PUSH
2204: LD_EXP 5
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: DIFF
2213: PUSH
2214: FOR_IN
2215: IFFALSE 2266
// if IsOK ( i ) then
2217: LD_VAR 0 1
2221: PPUSH
2222: CALL_OW 302
2226: IFFALSE 2264
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2228: LD_ADDR_VAR 0 2
2232: PUSH
2233: LD_VAR 0 2
2237: PUSH
2238: LD_VAR 0 1
2242: PUSH
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 16
2250: PPUSH
2251: CALL_OW 299
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: ADD
2263: ST_TO_ADDR
2264: GO 2214
2266: POP
2267: POP
// for i = 2 to distanceTab do
2268: LD_ADDR_VAR 0 1
2272: PUSH
2273: DOUBLE
2274: LD_INT 2
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2330
// if distanceTab [ i ] [ 2 ] < min then
2286: LD_VAR 0 2
2290: PUSH
2291: LD_VAR 0 1
2295: ARRAY
2296: PUSH
2297: LD_INT 2
2299: ARRAY
2300: PUSH
2301: LD_VAR 0 3
2305: LESS
2306: IFFALSE 2328
// min = distanceTab [ i ] [ 2 ] ;
2308: LD_ADDR_VAR 0 3
2312: PUSH
2313: LD_VAR 0 2
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: PUSH
2324: LD_INT 2
2326: ARRAY
2327: ST_TO_ADDR
2328: GO 2283
2330: POP
2331: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2332: LD_ADDR_VAR 0 1
2336: PUSH
2337: LD_INT 22
2339: PUSH
2340: LD_INT 1
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 21
2349: PUSH
2350: LD_INT 1
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PPUSH
2361: CALL_OW 69
2365: PUSH
2366: LD_EXP 1
2370: PUSH
2371: EMPTY
2372: LIST
2373: DIFF
2374: PUSH
2375: FOR_IN
2376: IFFALSE 2446
// begin ComMoveToArea ( i , DeadCutscene ) ;
2378: LD_VAR 0 1
2382: PPUSH
2383: LD_INT 28
2385: PPUSH
2386: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2390: LD_EXP 1
2394: PPUSH
2395: LD_INT 30
2397: PPUSH
2398: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2402: LD_VAR 0 1
2406: PPUSH
2407: LD_INT 23
2409: PPUSH
2410: LD_INT 11
2412: PPUSH
2413: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2417: LD_EXP 1
2421: PPUSH
2422: LD_INT 23
2424: PPUSH
2425: LD_INT 11
2427: PPUSH
2428: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2432: LD_EXP 34
2436: PPUSH
2437: LD_INT 250
2439: PPUSH
2440: CALL_OW 234
// end ;
2444: GO 2375
2446: POP
2447: POP
// for i = 2 to distanceTab do
2448: LD_ADDR_VAR 0 1
2452: PUSH
2453: DOUBLE
2454: LD_INT 2
2456: DEC
2457: ST_TO_ADDR
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_TO
2464: IFFALSE 2850
// begin if distanceTab [ i ] [ 2 ] = min then
2466: LD_VAR 0 2
2470: PUSH
2471: LD_VAR 0 1
2475: ARRAY
2476: PUSH
2477: LD_INT 2
2479: ARRAY
2480: PUSH
2481: LD_VAR 0 3
2485: EQUAL
2486: IFFALSE 2848
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2488: LD_VAR 0 2
2492: PUSH
2493: LD_VAR 0 1
2497: ARRAY
2498: PUSH
2499: LD_INT 1
2501: ARRAY
2502: PUSH
2503: LD_EXP 2
2507: EQUAL
2508: IFFALSE 2522
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2510: LD_EXP 2
2514: PPUSH
2515: LD_STRING DCorpses-Bobby-1
2517: PPUSH
2518: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2522: LD_VAR 0 2
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PUSH
2537: LD_EXP 3
2541: EQUAL
2542: IFFALSE 2556
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2544: LD_EXP 3
2548: PPUSH
2549: LD_STRING DCorpses-Cyrus-1
2551: PPUSH
2552: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2556: LD_VAR 0 2
2560: PUSH
2561: LD_VAR 0 1
2565: ARRAY
2566: PUSH
2567: LD_INT 1
2569: ARRAY
2570: PUSH
2571: LD_EXP 4
2575: EQUAL
2576: IFFALSE 2590
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2578: LD_EXP 4
2582: PPUSH
2583: LD_STRING DCorpses-Lisa-1
2585: PPUSH
2586: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2590: LD_VAR 0 2
2594: PUSH
2595: LD_VAR 0 1
2599: ARRAY
2600: PUSH
2601: LD_INT 1
2603: ARRAY
2604: PUSH
2605: LD_VAR 0 4
2609: PUSH
2610: LD_INT 1
2612: ARRAY
2613: EQUAL
2614: PUSH
2615: LD_VAR 0 4
2619: PUSH
2620: LD_INT 1
2622: ARRAY
2623: PPUSH
2624: CALL_OW 258
2628: PUSH
2629: LD_INT 1
2631: EQUAL
2632: AND
2633: IFFALSE 2651
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2635: LD_VAR 0 4
2639: PUSH
2640: LD_INT 1
2642: ARRAY
2643: PPUSH
2644: LD_STRING DCorpses-Sol1-1
2646: PPUSH
2647: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2651: LD_VAR 0 2
2655: PUSH
2656: LD_VAR 0 1
2660: ARRAY
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PUSH
2666: LD_VAR 0 4
2670: PUSH
2671: LD_INT 1
2673: ARRAY
2674: EQUAL
2675: PUSH
2676: LD_VAR 0 4
2680: PUSH
2681: LD_INT 1
2683: ARRAY
2684: PPUSH
2685: CALL_OW 258
2689: PUSH
2690: LD_INT 2
2692: EQUAL
2693: AND
2694: IFFALSE 2712
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2696: LD_VAR 0 4
2700: PUSH
2701: LD_INT 1
2703: ARRAY
2704: PPUSH
2705: LD_STRING DCorpses-FSol1-1
2707: PPUSH
2708: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2712: LD_VAR 0 2
2716: PUSH
2717: LD_VAR 0 1
2721: ARRAY
2722: PUSH
2723: LD_INT 1
2725: ARRAY
2726: PUSH
2727: LD_VAR 0 4
2731: PUSH
2732: LD_INT 2
2734: ARRAY
2735: EQUAL
2736: PUSH
2737: LD_VAR 0 4
2741: PUSH
2742: LD_INT 2
2744: ARRAY
2745: PPUSH
2746: CALL_OW 258
2750: PUSH
2751: LD_INT 1
2753: EQUAL
2754: AND
2755: IFFALSE 2773
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2757: LD_VAR 0 4
2761: PUSH
2762: LD_INT 2
2764: ARRAY
2765: PPUSH
2766: LD_STRING DCorpses-Sol1-1
2768: PPUSH
2769: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2773: LD_VAR 0 2
2777: PUSH
2778: LD_VAR 0 1
2782: ARRAY
2783: PUSH
2784: LD_INT 1
2786: ARRAY
2787: PUSH
2788: LD_VAR 0 4
2792: PUSH
2793: LD_INT 2
2795: ARRAY
2796: EQUAL
2797: PUSH
2798: LD_VAR 0 4
2802: PUSH
2803: LD_INT 2
2805: ARRAY
2806: PPUSH
2807: CALL_OW 258
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: AND
2816: IFFALSE 2834
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2818: LD_VAR 0 4
2822: PUSH
2823: LD_INT 2
2825: ARRAY
2826: PPUSH
2827: LD_STRING DCorpses-FSol1-1
2829: PPUSH
2830: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2834: LD_EXP 34
2838: PPUSH
2839: LD_INT 150
2841: PPUSH
2842: CALL_OW 234
// break ;
2846: GO 2850
// end ; end ;
2848: GO 2463
2850: POP
2851: POP
// repeat wait ( 0 0$1 ) ;
2852: LD_INT 35
2854: PPUSH
2855: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2859: LD_ADDR_VAR 0 1
2863: PUSH
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 21
2876: PUSH
2877: LD_INT 1
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_EXP 1
2897: PUSH
2898: EMPTY
2899: LIST
2900: DIFF
2901: PUSH
2902: FOR_IN
2903: IFFALSE 2973
// begin ComMoveToArea ( i , DeadCutscene ) ;
2905: LD_VAR 0 1
2909: PPUSH
2910: LD_INT 28
2912: PPUSH
2913: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2917: LD_EXP 1
2921: PPUSH
2922: LD_INT 30
2924: PPUSH
2925: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2929: LD_VAR 0 1
2933: PPUSH
2934: LD_INT 23
2936: PPUSH
2937: LD_INT 11
2939: PPUSH
2940: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2944: LD_EXP 1
2948: PPUSH
2949: LD_INT 23
2951: PPUSH
2952: LD_INT 11
2954: PPUSH
2955: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2959: LD_EXP 34
2963: PPUSH
2964: LD_INT 250
2966: PPUSH
2967: CALL_OW 234
// end ;
2971: GO 2902
2973: POP
2974: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2975: LD_EXP 1
2979: PPUSH
2980: LD_INT 30
2982: PPUSH
2983: CALL_OW 308
2987: IFFALSE 2852
// wait ( 0 0$3 ) ;
2989: LD_INT 105
2991: PPUSH
2992: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2996: LD_EXP 1
3000: PPUSH
3001: LD_STRING DCorpses-JMM-1
3003: PPUSH
3004: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3008: LD_EXP 34
3012: PPUSH
3013: LD_INT 100
3015: PPUSH
3016: CALL_OW 234
// if IsOK ( Khatam ) then
3020: LD_EXP 5
3024: PPUSH
3025: CALL_OW 302
3029: IFFALSE 3166
// begin repeat wait ( 0 0$1 ) ;
3031: LD_INT 35
3033: PPUSH
3034: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3038: LD_EXP 5
3042: PPUSH
3043: LD_EXP 34
3047: PPUSH
3048: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3052: LD_EXP 5
3056: PPUSH
3057: LD_EXP 34
3061: PPUSH
3062: CALL_OW 296
3066: PUSH
3067: LD_INT 2
3069: LESS
3070: IFFALSE 3031
// spotCorpses = 0 ;
3072: LD_ADDR_EXP 32
3076: PUSH
3077: LD_INT 0
3079: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3080: LD_EXP 34
3084: PPUSH
3085: LD_INT 10
3087: PPUSH
3088: CALL_OW 234
// wait ( 0 0$3 ) ;
3092: LD_INT 105
3094: PPUSH
3095: CALL_OW 67
// KillUnit ( DyingSold ) ;
3099: LD_EXP 34
3103: PPUSH
3104: CALL_OW 66
// wait ( 0 0$1 ) ;
3108: LD_INT 35
3110: PPUSH
3111: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3115: LD_EXP 1
3119: PUSH
3120: LD_EXP 5
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PPUSH
3129: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3133: LD_EXP 5
3137: PPUSH
3138: LD_EXP 1
3142: PPUSH
3143: CALL_OW 119
// wait ( 0 0$1 ) ;
3147: LD_INT 35
3149: PPUSH
3150: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3154: LD_EXP 5
3158: PPUSH
3159: LD_STRING DCorpses-Khat-1
3161: PPUSH
3162: CALL_OW 88
// end ; InGameOff ;
3166: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3170: LD_EXP 1
3174: PPUSH
3175: LD_STRING DCorpses-JMM-2
3177: PPUSH
3178: CALL_OW 88
// end ;
3182: PPOPN 4
3184: END
// every 0 0$1 trigger spotCorpses = 1 do
3185: LD_EXP 32
3189: PUSH
3190: LD_INT 1
3192: EQUAL
3193: IFFALSE 3211
3195: GO 3197
3197: DISABLE
// begin enable ;
3198: ENABLE
// SetLives ( DyingSold , 10 ) ;
3199: LD_EXP 34
3203: PPUSH
3204: LD_INT 10
3206: PPUSH
3207: CALL_OW 234
// end ;
3211: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 15 ) do var i ;
3212: LD_INT 8
3214: PPUSH
3215: LD_INT 22
3217: PUSH
3218: LD_INT 1
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: CALL_OW 70
3229: PUSH
3230: LD_INT 0
3232: GREATER
3233: PUSH
3234: LD_INT 22
3236: PUSH
3237: LD_INT 1
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PPUSH
3244: CALL_OW 69
3248: PPUSH
3249: LD_EXP 7
3253: PPUSH
3254: CALL_OW 74
3258: PPUSH
3259: LD_EXP 7
3263: PPUSH
3264: CALL_OW 296
3268: PUSH
3269: LD_INT 15
3271: LESS
3272: OR
3273: IFFALSE 3497
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
// begin InGameOn ;
3281: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3285: LD_EXP 7
3289: PPUSH
3290: LD_INT 250
3292: PPUSH
3293: CALL_OW 234
// SetLives ( Brian , 750 ) ;
3297: LD_EXP 6
3301: PPUSH
3302: LD_INT 750
3304: PPUSH
3305: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3309: LD_INT 3
3311: PPUSH
3312: LD_INT 4
3314: PPUSH
3315: LD_INT 2
3317: PPUSH
3318: LD_INT 1
3320: PPUSH
3321: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3325: LD_EXP 6
3329: PUSH
3330: LD_EXP 7
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PPUSH
3339: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3343: LD_ADDR_VAR 0 1
3347: PUSH
3348: LD_INT 9
3350: PPUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 3
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PPUSH
3361: CALL_OW 70
3365: PUSH
3366: FOR_IN
3367: IFFALSE 3380
// ComFree ( i ) ;
3369: LD_VAR 0 1
3373: PPUSH
3374: CALL_OW 139
3378: GO 3366
3380: POP
3381: POP
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3382: LD_ADDR_VAR 0 1
3386: PUSH
3387: LD_INT 9
3389: PPUSH
3390: LD_INT 22
3392: PUSH
3393: LD_INT 3
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PPUSH
3400: CALL_OW 70
3404: PUSH
3405: FOR_IN
3406: IFFALSE 3424
// AddComAttackUnit ( i , Brian ) ;
3408: LD_VAR 0 1
3412: PPUSH
3413: LD_EXP 6
3417: PPUSH
3418: CALL_OW 175
3422: GO 3405
3424: POP
3425: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3426: LD_ADDR_VAR 0 1
3430: PUSH
3431: LD_INT 22
3433: PUSH
3434: LD_INT 4
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PPUSH
3441: CALL_OW 69
3445: PUSH
3446: FOR_IN
3447: IFFALSE 3460
// ComFree ( i ) ;
3449: LD_VAR 0 1
3453: PPUSH
3454: CALL_OW 139
3458: GO 3446
3460: POP
3461: POP
// wait ( 0 0$1 ) ;
3462: LD_INT 35
3464: PPUSH
3465: CALL_OW 67
// InGameOff ;
3469: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3473: LD_EXP 6
3477: PPUSH
3478: LD_STRING DF-Sol1-1
3480: PPUSH
3481: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3485: LD_EXP 1
3489: PPUSH
3490: LD_STRING DF-JMM-1
3492: PPUSH
3493: CALL_OW 88
// end ;
3497: PPOPN 1
3499: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3500: LD_INT 19
3502: PPUSH
3503: LD_INT 22
3505: PUSH
3506: LD_INT 3
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 70
3517: PUSH
3518: LD_INT 0
3520: EQUAL
3521: IFFALSE 3634
3523: GO 3525
3525: DISABLE
// begin if not IsDead ( Brian ) then
3526: LD_EXP 6
3530: PPUSH
3531: CALL_OW 301
3535: NOT
3536: IFFALSE 3550
// SetSide ( Brian , 1 ) ;
3538: LD_EXP 6
3542: PPUSH
3543: LD_INT 1
3545: PPUSH
3546: CALL_OW 235
// if not IsDead ( Jerry ) then
3550: LD_EXP 7
3554: PPUSH
3555: CALL_OW 301
3559: NOT
3560: IFFALSE 3574
// SetSide ( Jerry , 1 ) ;
3562: LD_EXP 7
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3574: LD_INT 22
3576: PUSH
3577: LD_INT 1
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PUSH
3584: LD_INT 25
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PPUSH
3598: CALL_OW 69
3602: PUSH
3603: LD_INT 0
3605: GREATER
3606: IFFALSE 3622
// begin Say ( JMM , DFa-JMM-1 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING DFa-JMM-1
3615: PPUSH
3616: CALL_OW 88
// end else
3620: GO 3634
// begin Say ( JMM , DFa-JMM-1a ) ;
3622: LD_EXP 1
3626: PPUSH
3627: LD_STRING DFa-JMM-1a
3629: PPUSH
3630: CALL_OW 88
// end ; end ;
3634: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3635: LD_INT 19
3637: PPUSH
3638: LD_INT 22
3640: PUSH
3641: LD_INT 3
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL_OW 70
3652: PUSH
3653: LD_INT 0
3655: EQUAL
3656: PUSH
3657: LD_EXP 6
3661: PPUSH
3662: CALL_OW 302
3666: NOT
3667: AND
3668: IFFALSE 3745
3670: GO 3672
3672: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3673: LD_INT 35
3675: PPUSH
3676: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3680: LD_EXP 6
3684: PPUSH
3685: CALL_OW 256
3689: PUSH
3690: LD_INT 250
3692: GREATER
3693: IFFALSE 3673
// Say ( Brian , DFb-Sol1-1 ) ;
3695: LD_EXP 6
3699: PPUSH
3700: LD_STRING DFb-Sol1-1
3702: PPUSH
3703: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3707: LD_EXP 6
3711: PPUSH
3712: LD_INT 78
3714: PPUSH
3715: LD_INT 74
3717: PPUSH
3718: CALL_OW 111
// if IsDead ( Jerry ) then
3722: LD_EXP 7
3726: PPUSH
3727: CALL_OW 301
3731: IFFALSE 3745
// Say ( Brian , DFb-Sol1-1a ) end ;
3733: LD_EXP 6
3737: PPUSH
3738: LD_STRING DFb-Sol1-1a
3740: PPUSH
3741: CALL_OW 88
3745: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3746: LD_INT 22
3748: PUSH
3749: LD_INT 1
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_INT 21
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PPUSH
3770: CALL_OW 69
3774: PUSH
3775: LD_INT 0
3777: EQUAL
3778: IFFALSE 3866
3780: GO 3782
3782: DISABLE
3783: LD_INT 0
3785: PPUSH
// begin enable ;
3786: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3787: LD_ADDR_VAR 0 1
3791: PUSH
3792: LD_INT 22
3794: PUSH
3795: LD_INT 3
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 3
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PUSH
3812: LD_INT 30
3814: PUSH
3815: LD_INT 31
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: LIST
3826: PPUSH
3827: CALL_OW 69
3831: PUSH
3832: FOR_IN
3833: IFFALSE 3864
// begin if See ( 1 , i ) then
3835: LD_INT 1
3837: PPUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: CALL_OW 292
3847: IFFALSE 3862
// begin disable ;
3849: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3850: LD_EXP 1
3854: PPUSH
3855: LD_STRING DX1-JMM-1
3857: PPUSH
3858: CALL_OW 88
// end ; end ;
3862: GO 3832
3864: POP
3865: POP
// end ;
3866: PPOPN 1
3868: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3869: LD_INT 1
3871: PPUSH
3872: LD_INT 11
3874: PPUSH
3875: CALL_OW 294
3879: IFFALSE 4293
3881: GO 3883
3883: DISABLE
3884: LD_INT 0
3886: PPUSH
3887: PPUSH
// begin DialogueOn ;
3888: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3892: LD_INT 11
3894: PPUSH
3895: LD_INT 22
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: PUSH
3905: LD_INT 21
3907: PUSH
3908: LD_INT 1
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PPUSH
3919: CALL_OW 70
3923: PUSH
3924: LD_INT 1
3926: ARRAY
3927: PPUSH
3928: LD_STRING DX3-Rus1-1
3930: PPUSH
3931: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING DX3-JMM-1
3942: PPUSH
3943: CALL_OW 88
// DialogueOff ;
3947: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3951: LD_ADDR_VAR 0 1
3955: PUSH
3956: LD_INT 11
3958: PPUSH
3959: LD_INT 22
3961: PUSH
3962: LD_INT 3
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 21
3971: PUSH
3972: LD_INT 1
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: PPUSH
3983: CALL_OW 70
3987: PUSH
3988: FOR_IN
3989: IFFALSE 4009
// southBaseDefenders = southBaseDefenders ^ i ;
3991: LD_ADDR_EXP 25
3995: PUSH
3996: LD_EXP 25
4000: PUSH
4001: LD_VAR 0 1
4005: ADD
4006: ST_TO_ADDR
4007: GO 3988
4009: POP
4010: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
4011: LD_INT 455
4013: PUSH
4014: LD_INT 420
4016: PUSH
4017: LD_INT 315
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: PUSH
4025: LD_OWVAR 67
4029: ARRAY
4030: PPUSH
4031: CALL_OW 67
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ) ;
4035: LD_INT 22
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: LD_INT 21
4047: PUSH
4048: LD_INT 1
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 25
4057: PUSH
4058: LD_INT 3
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 69
4074: PPUSH
4075: CALL_OW 122
// wait ( 0 0$1 ) ;
4079: LD_INT 35
4081: PPUSH
4082: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
4086: LD_INT 35
4088: PPUSH
4089: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
4093: LD_ADDR_VAR 0 1
4097: PUSH
4098: LD_INT 22
4100: PUSH
4101: LD_INT 3
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 21
4110: PUSH
4111: LD_INT 2
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 58
4120: PUSH
4121: EMPTY
4122: LIST
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: LIST
4128: PPUSH
4129: CALL_OW 69
4133: PUSH
4134: FOR_IN
4135: IFFALSE 4205
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: LD_INT 22
4144: PUSH
4145: LD_INT 3
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 21
4154: PUSH
4155: LD_INT 1
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 3
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 69
4181: PUSH
4182: FOR_IN
4183: IFFALSE 4201
// begin ComEnterUnit ( j , i ) ;
4185: LD_VAR 0 2
4189: PPUSH
4190: LD_VAR 0 1
4194: PPUSH
4195: CALL_OW 120
// end ;
4199: GO 4182
4201: POP
4202: POP
// end ;
4203: GO 4134
4205: POP
4206: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4207: LD_INT 22
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 21
4219: PUSH
4220: LD_INT 2
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 58
4229: PUSH
4230: EMPTY
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 69
4242: PUSH
4243: LD_INT 0
4245: EQUAL
4246: PUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 21
4259: PUSH
4260: LD_INT 1
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: LD_INT 25
4269: PUSH
4270: LD_INT 3
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 69
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: OR
4291: IFFALSE 4086
// end ;
4293: PPOPN 2
4295: END
// every 0 0$1 do var i , tmp ;
4296: GO 4298
4298: DISABLE
4299: LD_INT 0
4301: PPUSH
4302: PPUSH
// begin enable ;
4303: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4304: LD_ADDR_VAR 0 2
4308: PUSH
4309: LD_INT 22
4311: PUSH
4312: LD_INT 1
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: LD_INT 21
4321: PUSH
4322: LD_INT 1
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PPUSH
4333: CALL_OW 69
4337: ST_TO_ADDR
// for i in tmp do
4338: LD_ADDR_VAR 0 1
4342: PUSH
4343: LD_VAR 0 2
4347: PUSH
4348: FOR_IN
4349: IFFALSE 4471
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_INT 5
4358: PPUSH
4359: CALL_OW 296
4363: PUSH
4364: LD_INT 4
4366: LESS
4367: PUSH
4368: LD_VAR 0 1
4372: PPUSH
4373: LD_INT 4
4375: PPUSH
4376: CALL_OW 296
4380: PUSH
4381: LD_INT 4
4383: LESS
4384: OR
4385: IFFALSE 4469
// begin disable ;
4387: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4388: LD_INT 5
4390: PUSH
4391: LD_INT 4
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PPUSH
4398: CALL_OW 85
// if IsOK ( Bobby ) then
4402: LD_EXP 2
4406: PPUSH
4407: CALL_OW 302
4411: IFFALSE 4448
// begin DialogueOn ;
4413: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4417: LD_EXP 2
4421: PPUSH
4422: LD_STRING DX2-Bobby-1
4424: PPUSH
4425: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4429: LD_EXP 1
4433: PPUSH
4434: LD_STRING DX2-JMM-1a
4436: PPUSH
4437: CALL_OW 88
// DialogueOff ;
4441: CALL_OW 7
// disable ;
4445: DISABLE
// end else
4446: GO 4469
// begin DialogueOn ;
4448: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4452: LD_EXP 1
4456: PPUSH
4457: LD_STRING DX2-JMM-1
4459: PPUSH
4460: CALL_OW 88
// DialogueOff ;
4464: CALL_OW 7
// disable ;
4468: DISABLE
// end ; end ; end ;
4469: GO 4348
4471: POP
4472: POP
// end ;
4473: PPOPN 2
4475: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4476: LD_INT 22
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 23
4488: PUSH
4489: LD_INT 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 21
4498: PUSH
4499: LD_INT 2
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 34
4508: PUSH
4509: LD_INT 42
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: PPUSH
4522: CALL_OW 69
4526: IFFALSE 4947
4528: GO 4530
4530: DISABLE
4531: LD_INT 0
4533: PPUSH
4534: PPUSH
4535: PPUSH
4536: PPUSH
4537: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4538: LD_ADDR_VAR 0 1
4542: PUSH
4543: LD_INT 22
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 23
4555: PUSH
4556: LD_INT 3
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: LD_INT 21
4565: PUSH
4566: LD_INT 2
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 34
4575: PUSH
4576: LD_INT 42
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: PPUSH
4589: CALL_OW 69
4593: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4594: LD_ADDR_VAR 0 3
4598: PUSH
4599: LD_INT 22
4601: PUSH
4602: LD_INT 1
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: LD_INT 21
4611: PUSH
4612: LD_INT 1
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PUSH
4619: LD_INT 26
4621: PUSH
4622: LD_INT 1
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: LIST
4633: PPUSH
4634: CALL_OW 69
4638: PUSH
4639: LD_EXP 1
4643: PUSH
4644: LD_EXP 3
4648: PUSH
4649: LD_EXP 2
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: LIST
4658: DIFF
4659: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4660: LD_ADDR_VAR 0 4
4664: PUSH
4665: LD_INT 22
4667: PUSH
4668: LD_INT 1
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 26
4687: PUSH
4688: LD_INT 2
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: LIST
4699: PPUSH
4700: CALL_OW 69
4704: PUSH
4705: LD_EXP 4
4709: PUSH
4710: EMPTY
4711: LIST
4712: DIFF
4713: ST_TO_ADDR
// if not tmp then
4714: LD_VAR 0 1
4718: NOT
4719: IFFALSE 4723
// exit ;
4721: GO 4947
// DialogueOn ;
4723: CALL_OW 6
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4727: LD_ADDR_VAR 0 2
4731: PUSH
4732: LD_VAR 0 1
4736: PUSH
4737: LD_INT 1
4739: ARRAY
4740: PPUSH
4741: CALL_OW 311
4745: ST_TO_ADDR
// if not speaker then
4746: LD_VAR 0 2
4750: NOT
4751: IFFALSE 4755
// exit ;
4753: GO 4947
// if speaker = JMM then
4755: LD_VAR 0 2
4759: PUSH
4760: LD_EXP 1
4764: EQUAL
4765: IFFALSE 4799
// begin if Lisa then
4767: LD_EXP 4
4771: IFFALSE 4785
// Say ( Lisa , DX2b-Lisa-1 ) ;
4773: LD_EXP 4
4777: PPUSH
4778: LD_STRING DX2b-Lisa-1
4780: PPUSH
4781: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4785: LD_EXP 1
4789: PPUSH
4790: LD_STRING DX2b-JMM-1
4792: PPUSH
4793: CALL_OW 88
// end else
4797: GO 4943
// begin Say ( JMM , DX2a-JMM-1 ) ;
4799: LD_EXP 1
4803: PPUSH
4804: LD_STRING DX2a-JMM-1
4806: PPUSH
4807: CALL_OW 88
// if speaker = Bobby then
4811: LD_VAR 0 2
4815: PUSH
4816: LD_EXP 2
4820: EQUAL
4821: IFFALSE 4835
// Say ( Bobby , DX2a-Bobby-1 ) ;
4823: LD_EXP 2
4827: PPUSH
4828: LD_STRING DX2a-Bobby-1
4830: PPUSH
4831: CALL_OW 88
// if speaker = Cyrus then
4835: LD_VAR 0 2
4839: PUSH
4840: LD_EXP 3
4844: EQUAL
4845: IFFALSE 4859
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4847: LD_EXP 3
4851: PPUSH
4852: LD_STRING DX2a-Cyrus-1
4854: PPUSH
4855: CALL_OW 88
// if speaker = Lisa then
4859: LD_VAR 0 2
4863: PUSH
4864: LD_EXP 4
4868: EQUAL
4869: IFFALSE 4883
// Say ( Lisa , DX2a-Lisa-1 ) ;
4871: LD_EXP 4
4875: PPUSH
4876: LD_STRING DX2a-Lisa-1
4878: PPUSH
4879: CALL_OW 88
// if speaker in temp1 then
4883: LD_VAR 0 2
4887: PUSH
4888: LD_VAR 0 3
4892: IN
4893: IFFALSE 4907
// Say ( speaker , DX2a-Sol1-1 ) ;
4895: LD_VAR 0 2
4899: PPUSH
4900: LD_STRING DX2a-Sol1-1
4902: PPUSH
4903: CALL_OW 88
// if speaker in temp2 then
4907: LD_VAR 0 2
4911: PUSH
4912: LD_VAR 0 4
4916: IN
4917: IFFALSE 4931
// Say ( speaker , DX2a-FSol1-1 ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_STRING DX2a-FSol1-1
4926: PPUSH
4927: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4931: LD_EXP 1
4935: PPUSH
4936: LD_STRING DX2a-JMM-2
4938: PPUSH
4939: CALL_OW 88
// end ; DialogueOff ;
4943: CALL_OW 7
// end ;
4947: PPOPN 5
4949: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4950: LD_INT 1
4952: PPUSH
4953: CALL_OW 255
4957: PUSH
4958: LD_INT 1
4960: EQUAL
4961: PUSH
4962: LD_INT 10
4964: PPUSH
4965: CALL_OW 255
4969: PUSH
4970: LD_INT 1
4972: EQUAL
4973: OR
4974: IFFALSE 5034
4976: GO 4978
4978: DISABLE
// begin DialogueOn ;
4979: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4983: LD_EXP 1
4987: PPUSH
4988: LD_STRING D3-JMM-1
4990: PPUSH
4991: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4995: LD_EXP 9
4999: PPUSH
5000: LD_STRING D3-Pow-1
5002: PPUSH
5003: CALL_OW 94
// if IsOK ( Cyrus ) then
5007: LD_EXP 3
5011: PPUSH
5012: CALL_OW 302
5016: IFFALSE 5030
// Say ( Cyrus , D3-Cyrus-1 ) ;
5018: LD_EXP 3
5022: PPUSH
5023: LD_STRING D3-Cyrus-1
5025: PPUSH
5026: CALL_OW 88
// DialogueOff ;
5030: CALL_OW 7
// end ;
5034: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < 2 do var temp , i ;
5035: LD_INT 1
5037: PPUSH
5038: CALL_OW 255
5042: PUSH
5043: LD_INT 1
5045: EQUAL
5046: PUSH
5047: LD_INT 10
5049: PPUSH
5050: CALL_OW 255
5054: PUSH
5055: LD_INT 1
5057: EQUAL
5058: AND
5059: PUSH
5060: LD_INT 22
5062: PUSH
5063: LD_INT 3
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PUSH
5070: LD_INT 21
5072: PUSH
5073: LD_INT 1
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PPUSH
5084: CALL_OW 69
5088: PUSH
5089: LD_INT 2
5091: LESS
5092: AND
5093: IFFALSE 6345
5095: GO 5097
5097: DISABLE
5098: LD_INT 0
5100: PPUSH
5101: PPUSH
// begin wait ( 0 0$03 ) ;
5102: LD_INT 105
5104: PPUSH
5105: CALL_OW 67
// DialogueOn ;
5109: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5113: LD_EXP 1
5117: PPUSH
5118: LD_STRING D3a-JMM-1
5120: PPUSH
5121: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5125: LD_EXP 9
5129: PPUSH
5130: LD_STRING D3a-Pow-1
5132: PPUSH
5133: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5137: LD_EXP 1
5141: PPUSH
5142: LD_STRING D3a-JMM-2
5144: PPUSH
5145: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5149: LD_EXP 9
5153: PPUSH
5154: LD_STRING D3a-Pow-2
5156: PPUSH
5157: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5161: LD_EXP 1
5165: PPUSH
5166: LD_STRING D3a-JMM-3
5168: PPUSH
5169: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5173: LD_EXP 9
5177: PPUSH
5178: LD_STRING D3a-Pow-3
5180: PPUSH
5181: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5185: LD_EXP 1
5189: PPUSH
5190: LD_STRING D3a-JMM-4
5192: PPUSH
5193: CALL_OW 88
// DialogueOff ;
5197: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5201: LD_STRING M2
5203: PPUSH
5204: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5208: LD_EXP 1
5212: PPUSH
5213: LD_STRING D3b-JMM-1
5215: PPUSH
5216: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5220: LD_INT 35
5222: PPUSH
5223: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5227: LD_INT 22
5229: PPUSH
5230: LD_INT 22
5232: PUSH
5233: LD_INT 1
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PUSH
5240: LD_INT 25
5242: PUSH
5243: LD_INT 2
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 70
5258: IFFALSE 5220
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5260: LD_ADDR_VAR 0 1
5264: PUSH
5265: LD_INT 22
5267: PUSH
5268: LD_INT 1
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: LD_INT 23
5277: PUSH
5278: LD_INT 1
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: PUSH
5285: LD_INT 25
5287: PUSH
5288: LD_INT 2
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PUSH
5295: LD_INT 50
5297: PUSH
5298: EMPTY
5299: LIST
5300: PUSH
5301: LD_INT 56
5303: PUSH
5304: EMPTY
5305: LIST
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: PPUSH
5314: CALL_OW 69
5318: PUSH
5319: LD_EXP 1
5323: PUSH
5324: LD_EXP 5
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: DIFF
5333: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5334: LD_INT 35
5336: PPUSH
5337: CALL_OW 67
// until temp > 0 ;
5341: LD_VAR 0 1
5345: PUSH
5346: LD_INT 0
5348: GREATER
5349: IFFALSE 5260
// wait ( 0 0$5 ) ;
5351: LD_INT 175
5353: PPUSH
5354: CALL_OW 67
// PrepareRussianHeroes ;
5358: CALL 11738 0 0
// InGameOn ;
5362: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5366: LD_EXP 8
5370: PPUSH
5371: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5375: LD_EXP 1
5379: PUSH
5380: LD_VAR 0 1
5384: PUSH
5385: LD_INT 1
5387: ARRAY
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: PPUSH
5393: LD_EXP 8
5397: PPUSH
5398: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5402: LD_EXP 8
5406: PPUSH
5407: LD_VAR 0 1
5411: PUSH
5412: LD_INT 1
5414: ARRAY
5415: PPUSH
5416: CALL_OW 119
// Wait ( 0 0$02 ) ;
5420: LD_INT 70
5422: PPUSH
5423: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5427: LD_EXP 8
5431: PPUSH
5432: LD_STRING D4-Mikh-1
5434: PPUSH
5435: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5439: LD_VAR 0 1
5443: PUSH
5444: LD_INT 1
5446: ARRAY
5447: PPUSH
5448: CALL_OW 258
5452: PUSH
5453: LD_INT 1
5455: EQUAL
5456: IFFALSE 5474
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5458: LD_VAR 0 1
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: LD_STRING D4-Sol1-1
5469: PPUSH
5470: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5474: LD_VAR 0 1
5478: PUSH
5479: LD_INT 1
5481: ARRAY
5482: PPUSH
5483: CALL_OW 258
5487: PUSH
5488: LD_INT 2
5490: EQUAL
5491: IFFALSE 5509
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5493: LD_VAR 0 1
5497: PUSH
5498: LD_INT 1
5500: ARRAY
5501: PPUSH
5502: LD_STRING D4-FSol1-1
5504: PPUSH
5505: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5509: LD_EXP 8
5513: PPUSH
5514: LD_STRING D4-Mikh-2
5516: PPUSH
5517: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5521: LD_VAR 0 1
5525: PUSH
5526: LD_INT 1
5528: ARRAY
5529: PPUSH
5530: CALL_OW 258
5534: PUSH
5535: LD_INT 1
5537: EQUAL
5538: IFFALSE 5556
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5540: LD_VAR 0 1
5544: PUSH
5545: LD_INT 1
5547: ARRAY
5548: PPUSH
5549: LD_STRING D4-Sol1-2
5551: PPUSH
5552: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5556: LD_VAR 0 1
5560: PUSH
5561: LD_INT 1
5563: ARRAY
5564: PPUSH
5565: CALL_OW 258
5569: PUSH
5570: LD_INT 2
5572: EQUAL
5573: IFFALSE 5591
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5575: LD_VAR 0 1
5579: PUSH
5580: LD_INT 1
5582: ARRAY
5583: PPUSH
5584: LD_STRING D4-FSol1-2
5586: PPUSH
5587: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5591: LD_EXP 8
5595: PPUSH
5596: LD_STRING D4-Mikh-3
5598: PPUSH
5599: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5603: LD_VAR 0 1
5607: PUSH
5608: LD_INT 1
5610: ARRAY
5611: PPUSH
5612: CALL_OW 258
5616: PUSH
5617: LD_INT 1
5619: EQUAL
5620: IFFALSE 5638
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5622: LD_VAR 0 1
5626: PUSH
5627: LD_INT 1
5629: ARRAY
5630: PPUSH
5631: LD_STRING D4-Sol1-3
5633: PPUSH
5634: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5638: LD_VAR 0 1
5642: PUSH
5643: LD_INT 1
5645: ARRAY
5646: PPUSH
5647: CALL_OW 258
5651: PUSH
5652: LD_INT 2
5654: EQUAL
5655: IFFALSE 5673
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5657: LD_VAR 0 1
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: LD_STRING D4-FSol1-3
5668: PPUSH
5669: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5673: LD_EXP 8
5677: PPUSH
5678: LD_STRING D4-Mikh-4
5680: PPUSH
5681: CALL_OW 88
// case query ( Qs1 ) of 1 :
5685: LD_STRING Qs1
5687: PPUSH
5688: CALL_OW 97
5692: PUSH
5693: LD_INT 1
5695: DOUBLE
5696: EQUAL
5697: IFTRUE 5701
5699: GO 5736
5701: POP
// begin InGameOff ;
5702: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 6
5711: PPUSH
5712: LD_INT 2
5714: PPUSH
5715: LD_INT 1
5717: PPUSH
5718: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5722: LD_EXP 8
5726: PPUSH
5727: LD_INT 17
5729: PPUSH
5730: CALL_OW 113
// end ; 2 :
5734: GO 6329
5736: LD_INT 2
5738: DOUBLE
5739: EQUAL
5740: IFTRUE 5744
5742: GO 6294
5744: POP
// begin repeat wait ( 0 0$1 ) ;
5745: LD_INT 35
5747: PPUSH
5748: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5752: LD_VAR 0 1
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: PPUSH
5761: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: LD_EXP 1
5778: PPUSH
5779: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5783: LD_EXP 8
5787: PPUSH
5788: LD_EXP 1
5792: PPUSH
5793: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5797: LD_EXP 1
5801: PPUSH
5802: LD_EXP 8
5806: PPUSH
5807: CALL_OW 296
5811: PUSH
5812: LD_INT 5
5814: LESS
5815: IFFALSE 5745
// ComTurnUnit ( Mikhail , JMM ) ;
5817: LD_EXP 8
5821: PPUSH
5822: LD_EXP 1
5826: PPUSH
5827: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5831: LD_EXP 1
5835: PPUSH
5836: LD_STRING D4b-JMM-1
5838: PPUSH
5839: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5843: LD_EXP 8
5847: PPUSH
5848: LD_STRING D4b-Mikh-1
5850: PPUSH
5851: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5855: LD_EXP 1
5859: PPUSH
5860: LD_STRING D4b-JMM-2
5862: PPUSH
5863: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5867: LD_EXP 8
5871: PPUSH
5872: LD_STRING D4b-Mikh-2
5874: PPUSH
5875: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5879: LD_EXP 1
5883: PPUSH
5884: LD_STRING D4b-JMM-3
5886: PPUSH
5887: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5891: LD_EXP 8
5895: PPUSH
5896: LD_STRING D4b-Mikh-3
5898: PPUSH
5899: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_STRING D4b-JMM-4
5910: PPUSH
5911: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5915: LD_EXP 8
5919: PPUSH
5920: LD_STRING D4b-Mikh-4
5922: PPUSH
5923: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_STRING D4b-JMM-5
5934: PPUSH
5935: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5939: LD_EXP 8
5943: PPUSH
5944: LD_STRING D4b-Mikh-5
5946: PPUSH
5947: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5951: LD_EXP 1
5955: PPUSH
5956: LD_STRING D4b-JMM-6
5958: PPUSH
5959: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5963: LD_EXP 8
5967: PPUSH
5968: LD_STRING D4b-Mikh-6
5970: PPUSH
5971: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5975: LD_EXP 1
5979: PPUSH
5980: LD_STRING D4b-JMM-7
5982: PPUSH
5983: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5987: LD_EXP 8
5991: PPUSH
5992: LD_STRING D4b-Mikh-7
5994: PPUSH
5995: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5999: LD_VAR 0 1
6003: PUSH
6004: LD_INT 1
6006: ARRAY
6007: PPUSH
6008: CALL_OW 258
6012: PUSH
6013: LD_INT 1
6015: EQUAL
6016: IFFALSE 6034
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6018: LD_VAR 0 1
6022: PUSH
6023: LD_INT 1
6025: ARRAY
6026: PPUSH
6027: LD_STRING D4b-Sol1-7
6029: PPUSH
6030: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6034: LD_VAR 0 1
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PPUSH
6043: CALL_OW 258
6047: PUSH
6048: LD_INT 2
6050: EQUAL
6051: IFFALSE 6069
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6053: LD_VAR 0 1
6057: PUSH
6058: LD_INT 1
6060: ARRAY
6061: PPUSH
6062: LD_STRING D4b-FSol1-7
6064: PPUSH
6065: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6069: LD_EXP 1
6073: PPUSH
6074: LD_STRING D4b-JMM-8
6076: PPUSH
6077: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6081: LD_VAR 0 1
6085: PUSH
6086: LD_INT 1
6088: ARRAY
6089: PPUSH
6090: CALL_OW 258
6094: PUSH
6095: LD_INT 1
6097: EQUAL
6098: IFFALSE 6116
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6100: LD_VAR 0 1
6104: PUSH
6105: LD_INT 1
6107: ARRAY
6108: PPUSH
6109: LD_STRING D4b-Sol1-8
6111: PPUSH
6112: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6116: LD_VAR 0 1
6120: PUSH
6121: LD_INT 1
6123: ARRAY
6124: PPUSH
6125: CALL_OW 258
6129: PUSH
6130: LD_INT 2
6132: EQUAL
6133: IFFALSE 6151
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6135: LD_VAR 0 1
6139: PUSH
6140: LD_INT 1
6142: ARRAY
6143: PPUSH
6144: LD_STRING D4b-FSol1-8
6146: PPUSH
6147: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6151: LD_EXP 1
6155: PPUSH
6156: LD_STRING D4b-JMM-9
6158: PPUSH
6159: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6163: LD_EXP 8
6167: PPUSH
6168: LD_INT 1
6170: PPUSH
6171: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6175: LD_ADDR_VAR 0 2
6179: PUSH
6180: LD_INT 22
6182: PUSH
6183: LD_INT 1
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: EMPTY
6191: LIST
6192: PPUSH
6193: CALL_OW 69
6197: PUSH
6198: FOR_IN
6199: IFFALSE 6212
// ComFree ( i ) ;
6201: LD_VAR 0 2
6205: PPUSH
6206: CALL_OW 139
6210: GO 6198
6212: POP
6213: POP
// repeat wait ( 0 0$1 ) ;
6214: LD_INT 35
6216: PPUSH
6217: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6221: LD_EXP 8
6225: PPUSH
6226: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6230: LD_EXP 8
6234: PUSH
6235: LD_VAR 0 1
6239: PUSH
6240: LD_INT 1
6242: ARRAY
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PPUSH
6248: LD_INT 1
6250: PPUSH
6251: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6255: LD_EXP 8
6259: PPUSH
6260: CALL_OW 310
6264: IFFALSE 6214
// mikhailDepot = IsInUnit ( Mikhail ) ;
6266: LD_ADDR_EXP 23
6270: PUSH
6271: LD_EXP 8
6275: PPUSH
6276: CALL_OW 310
6280: ST_TO_ADDR
// InGameOff ;
6281: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6285: LD_STRING M3
6287: PPUSH
6288: CALL_OW 337
// end ; 3 :
6292: GO 6329
6294: LD_INT 3
6296: DOUBLE
6297: EQUAL
6298: IFTRUE 6302
6300: GO 6328
6302: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6303: LD_EXP 8
6307: PPUSH
6308: LD_INT 17
6310: PPUSH
6311: CALL_OW 113
// wait ( 0 0$3 ) ;
6315: LD_INT 105
6317: PPUSH
6318: CALL_OW 67
// InGameOff ;
6322: CALL_OW 9
// end ; end ;
6326: GO 6329
6328: POP
// PrepareTigers ;
6329: CALL 14405 0 0
// RussianTrap ;
6333: CALL 10134 0 0
// tigersRespawn = 1 ;
6337: LD_ADDR_EXP 30
6341: PUSH
6342: LD_INT 1
6344: ST_TO_ADDR
// end ;
6345: PPOPN 2
6347: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6348: LD_INT 1
6350: PPUSH
6351: CALL_OW 255
6355: PUSH
6356: LD_INT 1
6358: EQUAL
6359: PUSH
6360: LD_INT 10
6362: PPUSH
6363: CALL_OW 255
6367: PUSH
6368: LD_INT 1
6370: EQUAL
6371: AND
6372: PUSH
6373: LD_INT 1
6375: PPUSH
6376: CALL_OW 274
6380: PPUSH
6381: LD_INT 1
6383: PPUSH
6384: CALL_OW 275
6388: PUSH
6389: LD_INT 100
6391: GREATEREQUAL
6392: AND
6393: IFFALSE 6556
6395: GO 6397
6397: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6398: LD_INT 2100
6400: PPUSH
6401: LD_INT 4200
6403: PPUSH
6404: CALL_OW 12
6408: PUSH
6409: LD_INT 1050
6411: PLUS
6412: PPUSH
6413: CALL_OW 67
// PrepareCargoBays ;
6417: CALL 12859 0 0
// cargoRespawn = 1 ;
6421: LD_ADDR_EXP 28
6425: PUSH
6426: LD_INT 1
6428: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6429: LD_EXP 15
6433: PUSH
6434: LD_EXP 16
6438: PUSH
6439: LD_EXP 17
6443: PUSH
6444: LD_EXP 18
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PPUSH
6455: LD_INT 36
6457: PPUSH
6458: LD_INT 13
6460: PPUSH
6461: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6465: LD_EXP 15
6469: PUSH
6470: LD_EXP 16
6474: PUSH
6475: LD_EXP 17
6479: PUSH
6480: LD_EXP 18
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: PPUSH
6491: LD_INT 40
6493: PPUSH
6494: LD_INT 20
6496: PPUSH
6497: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6501: LD_EXP 15
6505: PUSH
6506: LD_EXP 16
6510: PUSH
6511: LD_EXP 17
6515: PUSH
6516: LD_EXP 18
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: PPUSH
6527: LD_INT 53
6529: PPUSH
6530: LD_INT 16
6532: PPUSH
6533: CALL_OW 171
// wait ( 0 0$5 ) ;
6537: LD_INT 175
6539: PPUSH
6540: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6544: LD_EXP 17
6548: PPUSH
6549: LD_STRING D5-Rus2-1
6551: PPUSH
6552: CALL_OW 88
// end ;
6556: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6557: LD_EXP 28
6561: PUSH
6562: LD_INT 1
6564: EQUAL
6565: IFFALSE 6797
6567: GO 6569
6569: DISABLE
6570: LD_INT 0
6572: PPUSH
6573: PPUSH
6574: PPUSH
6575: PPUSH
// begin enable ;
6576: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6577: LD_ADDR_VAR 0 3
6581: PUSH
6582: LD_INT 22
6584: PUSH
6585: LD_INT 3
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 21
6594: PUSH
6595: LD_INT 2
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 34
6604: PUSH
6605: LD_INT 51
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: PPUSH
6617: CALL_OW 69
6621: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_nation , 1 ] , [ f_btype , b_depot ] ] ] ) ;
6622: LD_ADDR_VAR 0 4
6626: PUSH
6627: LD_INT 22
6629: PUSH
6630: LD_INT 1
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: PUSH
6637: LD_INT 2
6639: PUSH
6640: LD_INT 23
6642: PUSH
6643: LD_INT 1
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PUSH
6650: LD_INT 30
6652: PUSH
6653: LD_INT 0
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PPUSH
6669: CALL_OW 69
6673: ST_TO_ADDR
// for i in tmp1 do
6674: LD_ADDR_VAR 0 1
6678: PUSH
6679: LD_VAR 0 3
6683: PUSH
6684: FOR_IN
6685: IFFALSE 6795
// begin for j in tmp2 do
6687: LD_ADDR_VAR 0 2
6691: PUSH
6692: LD_VAR 0 4
6696: PUSH
6697: FOR_IN
6698: IFFALSE 6791
// begin if GetDistUnits ( i , j ) < 7 then
6700: LD_VAR 0 1
6704: PPUSH
6705: LD_VAR 0 2
6709: PPUSH
6710: CALL_OW 296
6714: PUSH
6715: LD_INT 7
6717: LESS
6718: IFFALSE 6789
// begin disable ;
6720: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6721: LD_EXP 15
6725: PUSH
6726: LD_EXP 16
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PPUSH
6735: LD_INT 7
6737: PPUSH
6738: LD_INT 9
6740: PPUSH
6741: CALL_OW 111
// if cargoSee = 0 then
6745: LD_EXP 29
6749: PUSH
6750: LD_INT 0
6752: EQUAL
6753: IFFALSE 6789
// begin cargoSee = 1 ;
6755: LD_ADDR_EXP 29
6759: PUSH
6760: LD_INT 1
6762: ST_TO_ADDR
// cargoEscape = 1 ;
6763: LD_ADDR_EXP 20
6767: PUSH
6768: LD_INT 1
6770: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6771: LD_EXP 17
6775: PPUSH
6776: LD_STRING D5-Rus2-1a
6778: PPUSH
6779: CALL_OW 88
// exit ;
6783: POP
6784: POP
6785: POP
6786: POP
6787: GO 6797
// end ; end ; end ;
6789: GO 6697
6791: POP
6792: POP
// end ;
6793: GO 6684
6795: POP
6796: POP
// end ;
6797: PPOPN 4
6799: END
// every 0 0$1 trigger cargoEscape > 0 do
6800: LD_EXP 20
6804: PUSH
6805: LD_INT 0
6807: GREATER
6808: IFFALSE 6955
6810: GO 6812
6812: DISABLE
// begin enable ;
6813: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6814: LD_EXP 15
6818: PUSH
6819: LD_EXP 16
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: LD_INT 13
6830: PPUSH
6831: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6835: LD_EXP 15
6839: PPUSH
6840: LD_INT 13
6842: PPUSH
6843: CALL_OW 308
6847: PUSH
6848: LD_EXP 17
6852: PPUSH
6853: LD_INT 13
6855: PPUSH
6856: CALL_OW 308
6860: OR
6861: IFFALSE 6895
// begin RemoveUnit ( cargo1 ) ;
6863: LD_EXP 15
6867: PPUSH
6868: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6872: LD_EXP 17
6876: PPUSH
6877: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6881: LD_ADDR_EXP 20
6885: PUSH
6886: LD_EXP 20
6890: PUSH
6891: LD_INT 1
6893: PLUS
6894: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6895: LD_EXP 16
6899: PPUSH
6900: LD_INT 13
6902: PPUSH
6903: CALL_OW 308
6907: PUSH
6908: LD_EXP 18
6912: PPUSH
6913: LD_INT 13
6915: PPUSH
6916: CALL_OW 308
6920: OR
6921: IFFALSE 6955
// begin RemoveUnit ( cargo2 ) ;
6923: LD_EXP 16
6927: PPUSH
6928: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6932: LD_EXP 18
6936: PPUSH
6937: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6941: LD_ADDR_EXP 20
6945: PUSH
6946: LD_EXP 20
6950: PUSH
6951: LD_INT 1
6953: PLUS
6954: ST_TO_ADDR
// end ; end ;
6955: END
// every 0 0$1 trigger cargoEscape > 1 do
6956: LD_EXP 20
6960: PUSH
6961: LD_INT 1
6963: GREATER
6964: IFFALSE 7128
6966: GO 6968
6968: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
6969: LD_INT 4
6971: PPUSH
6972: LD_INT 1
6974: PPUSH
6975: LD_INT 1
6977: PPUSH
6978: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6982: LD_INT 31
6984: PPUSH
6985: LD_INT 1
6987: PPUSH
6988: LD_INT 1
6990: PPUSH
6991: CALL_OW 324
// if IsOK ( Jerry ) then
6995: LD_EXP 7
6999: PPUSH
7000: CALL_OW 302
7004: IFFALSE 7020
// begin Say ( Jerry , D5a-Sol1-1 ) ;
7006: LD_EXP 7
7010: PPUSH
7011: LD_STRING D5a-Sol1-1
7013: PPUSH
7014: CALL_OW 88
// end else
7018: GO 7116
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
7020: LD_INT 22
7022: PUSH
7023: LD_INT 1
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 23
7032: PUSH
7033: LD_INT 1
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: LD_INT 26
7042: PUSH
7043: LD_INT 1
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: PPUSH
7055: CALL_OW 69
7059: PUSH
7060: LD_INT 2
7062: PPUSH
7063: LD_INT 22
7065: PUSH
7066: LD_INT 1
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PUSH
7073: LD_INT 23
7075: PUSH
7076: LD_INT 1
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_INT 26
7085: PUSH
7086: LD_INT 1
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: LIST
7097: PPUSH
7098: CALL_OW 69
7102: PPUSH
7103: CALL_OW 12
7107: ARRAY
7108: PPUSH
7109: LD_STRING D5a-Sol1-1
7111: PPUSH
7112: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7116: LD_EXP 1
7120: PPUSH
7121: LD_STRING D5a-JMM-1
7123: PPUSH
7124: CALL_OW 88
// end ;
7128: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7129: LD_INT 1
7131: PPUSH
7132: CALL_OW 255
7136: PUSH
7137: LD_INT 3
7139: EQUAL
7140: PUSH
7141: LD_INT 1
7143: PPUSH
7144: CALL_OW 256
7148: PUSH
7149: LD_INT 1000
7151: LESS
7152: AND
7153: PUSH
7154: LD_INT 10
7156: PPUSH
7157: CALL_OW 255
7161: PUSH
7162: LD_INT 3
7164: EQUAL
7165: PUSH
7166: LD_INT 10
7168: PPUSH
7169: CALL_OW 256
7173: PUSH
7174: LD_INT 1000
7176: LESS
7177: AND
7178: OR
7179: IFFALSE 7196
7181: GO 7183
7183: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
7184: LD_EXP 1
7188: PPUSH
7189: LD_STRING D8-JMM-1
7191: PPUSH
7192: CALL_OW 88
// end ;
7196: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7197: LD_EXP 8
7201: PPUSH
7202: CALL_OW 310
7206: PUSH
7207: LD_INT 1
7209: EQUAL
7210: PUSH
7211: LD_EXP 22
7215: PUSH
7216: LD_INT 3
7218: EQUAL
7219: NOT
7220: AND
7221: IFFALSE 7243
7223: GO 7225
7225: DISABLE
// begin mikhailInBase = 1 ;
7226: LD_ADDR_EXP 22
7230: PUSH
7231: LD_INT 1
7233: ST_TO_ADDR
// mikhailStatus = 1 ;
7234: LD_ADDR_EXP 21
7238: PUSH
7239: LD_INT 1
7241: ST_TO_ADDR
// enable ;
7242: ENABLE
// end ;
7243: END
// export function AskMikhail ; begin
7244: LD_INT 0
7246: PPUSH
// case query ( QMikh2 ) of 1 :
7247: LD_STRING QMikh2
7249: PPUSH
7250: CALL_OW 97
7254: PUSH
7255: LD_INT 1
7257: DOUBLE
7258: EQUAL
7259: IFTRUE 7263
7261: GO 7330
7263: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7264: LD_INT 1
7266: PPUSH
7267: LD_INT 6
7269: PPUSH
7270: LD_INT 2
7272: PPUSH
7273: LD_INT 1
7275: PPUSH
7276: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7280: LD_EXP 8
7284: PPUSH
7285: LD_INT 6
7287: PPUSH
7288: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7292: LD_EXP 8
7296: PPUSH
7297: CALL_OW 122
// wait ( 0 0$1 ) ;
7301: LD_INT 35
7303: PPUSH
7304: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7308: LD_EXP 8
7312: PPUSH
7313: LD_INT 17
7315: PPUSH
7316: CALL_OW 113
// mikhailInbase = 0 ;
7320: LD_ADDR_EXP 22
7324: PUSH
7325: LD_INT 0
7327: ST_TO_ADDR
// end ; 2 :
7328: GO 7571
7330: LD_INT 2
7332: DOUBLE
7333: EQUAL
7334: IFTRUE 7338
7336: GO 7511
7338: POP
// begin mikhailInBase = 2 ;
7339: LD_ADDR_EXP 22
7343: PUSH
7344: LD_INT 2
7346: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7347: LD_EXP 8
7351: PPUSH
7352: LD_INT 6
7354: PPUSH
7355: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7359: LD_EXP 8
7363: PPUSH
7364: CALL_OW 122
// wait ( 0 0$1 ) ;
7368: LD_INT 35
7370: PPUSH
7371: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7375: LD_EXP 8
7379: PPUSH
7380: LD_EXP 8
7384: PPUSH
7385: CALL_OW 250
7389: PUSH
7390: LD_INT 2
7392: PLUS
7393: PPUSH
7394: LD_EXP 8
7398: PPUSH
7399: CALL_OW 251
7403: PUSH
7404: LD_INT 2
7406: PLUS
7407: PPUSH
7408: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7412: LD_EXP 8
7416: PPUSH
7417: LD_EXP 8
7421: PPUSH
7422: CALL_OW 250
7426: PUSH
7427: LD_INT 1
7429: PLUS
7430: PPUSH
7431: LD_EXP 8
7435: PPUSH
7436: CALL_OW 251
7440: PUSH
7441: LD_INT 2
7443: PLUS
7444: PPUSH
7445: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7449: LD_EXP 8
7453: PPUSH
7454: LD_EXP 8
7458: PPUSH
7459: CALL_OW 250
7463: PUSH
7464: LD_INT 2
7466: PLUS
7467: PPUSH
7468: LD_EXP 8
7472: PPUSH
7473: CALL_OW 251
7477: PPUSH
7478: CALL_OW 171
// wait ( 0 0$5 ) ;
7482: LD_INT 175
7484: PPUSH
7485: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7489: LD_EXP 8
7493: PPUSH
7494: LD_INT 25
7496: PPUSH
7497: CALL_OW 113
// mikhailInBase = 4 ;
7501: LD_ADDR_EXP 22
7505: PUSH
7506: LD_INT 4
7508: ST_TO_ADDR
// end ; 3 :
7509: GO 7571
7511: LD_INT 3
7513: DOUBLE
7514: EQUAL
7515: IFTRUE 7519
7517: GO 7570
7519: POP
// begin SetSide ( Mikhail , 6 ) ;
7520: LD_EXP 8
7524: PPUSH
7525: LD_INT 6
7527: PPUSH
7528: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7532: LD_EXP 8
7536: PPUSH
7537: CALL_OW 122
// wait ( 0 0$1 ) ;
7541: LD_INT 35
7543: PPUSH
7544: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7548: LD_EXP 8
7552: PPUSH
7553: LD_INT 17
7555: PPUSH
7556: CALL_OW 113
// mikhailInbase = 3 ;
7560: LD_ADDR_EXP 22
7564: PUSH
7565: LD_INT 3
7567: ST_TO_ADDR
// end ; end ;
7568: GO 7571
7570: POP
// end ;
7571: LD_VAR 0 1
7575: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7576: LD_EXP 8
7580: PPUSH
7581: LD_INT 25
7583: PPUSH
7584: CALL_OW 308
7588: PUSH
7589: LD_EXP 22
7593: PUSH
7594: LD_INT 4
7596: EQUAL
7597: AND
7598: IFFALSE 7702
7600: GO 7602
7602: DISABLE
// begin enable ;
7603: ENABLE
// mikhailInBase = 1 ;
7604: LD_ADDR_EXP 22
7608: PUSH
7609: LD_INT 1
7611: ST_TO_ADDR
// InGameOn ;
7612: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7616: LD_INT 1
7618: PPUSH
7619: LD_INT 6
7621: PPUSH
7622: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7626: LD_INT 35
7628: PPUSH
7629: CALL_OW 67
// if Carry ( Mikhail ) then
7633: LD_EXP 8
7637: PPUSH
7638: CALL_OW 281
7642: IFFALSE 7653
// ComUnload ( Mikhail ) ;
7644: LD_EXP 8
7648: PPUSH
7649: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7653: LD_EXP 8
7657: PPUSH
7658: LD_INT 1
7660: PPUSH
7661: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7665: LD_EXP 8
7669: PPUSH
7670: CALL_OW 310
7674: IFFALSE 7626
// SetSide ( dep1 , 1 ) ;
7676: LD_INT 1
7678: PPUSH
7679: LD_INT 1
7681: PPUSH
7682: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7686: LD_EXP 8
7690: PPUSH
7691: LD_INT 1
7693: PPUSH
7694: CALL_OW 235
// InGameOff ;
7698: CALL_OW 9
// end ;
7702: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7703: LD_EXP 8
7707: PPUSH
7708: CALL_OW 310
7712: PUSH
7713: LD_EXP 22
7717: PUSH
7718: LD_INT 3
7720: EQUAL
7721: NOT
7722: AND
7723: IFFALSE 7858
7725: GO 7727
7727: DISABLE
// begin enable ;
7728: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7729: LD_INT 22
7731: PUSH
7732: LD_INT 1
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 21
7741: PUSH
7742: LD_INT 1
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 91
7751: PUSH
7752: LD_EXP 8
7756: PPUSH
7757: CALL_OW 310
7761: PUSH
7762: LD_INT 10
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: LIST
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: LIST
7774: PPUSH
7775: CALL_OW 69
7779: PUSH
7780: LD_INT 1
7782: EQUAL
7783: IFFALSE 7858
// begin mikhailStatus = 4 ;
7785: LD_ADDR_EXP 21
7789: PUSH
7790: LD_INT 4
7792: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7793: LD_INT 1
7795: PPUSH
7796: LD_INT 6
7798: PPUSH
7799: LD_INT 2
7801: PPUSH
7802: LD_INT 1
7804: PPUSH
7805: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7809: LD_EXP 8
7813: PPUSH
7814: LD_INT 6
7816: PPUSH
7817: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7821: LD_EXP 8
7825: PPUSH
7826: CALL_OW 122
// wait ( 0 0$1 ) ;
7830: LD_INT 35
7832: PPUSH
7833: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7837: LD_EXP 8
7841: PPUSH
7842: LD_INT 17
7844: PPUSH
7845: CALL_OW 113
// mikhailStatus = 3 ;
7849: LD_ADDR_EXP 21
7853: PUSH
7854: LD_INT 3
7856: ST_TO_ADDR
// disable ;
7857: DISABLE
// end ; end ;
7858: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7859: LD_EXP 1
7863: PPUSH
7864: LD_EXP 23
7868: PPUSH
7869: CALL_OW 296
7873: PUSH
7874: LD_INT 5
7876: LESS
7877: PUSH
7878: LD_EXP 21
7882: PUSH
7883: LD_INT 3
7885: EQUAL
7886: AND
7887: PUSH
7888: LD_EXP 22
7892: PUSH
7893: LD_INT 3
7895: EQUAL
7896: NOT
7897: AND
7898: IFFALSE 8120
7900: GO 7902
7902: DISABLE
7903: LD_INT 0
7905: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7906: LD_ADDR_VAR 0 1
7910: PUSH
7911: LD_INT 22
7913: PUSH
7914: LD_INT 1
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PUSH
7921: LD_INT 21
7923: PUSH
7924: LD_INT 1
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: PUSH
7931: LD_INT 26
7933: PUSH
7934: LD_INT 1
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: LIST
7945: PPUSH
7946: CALL_OW 69
7950: PUSH
7951: LD_EXP 1
7955: PUSH
7956: LD_EXP 5
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: DIFF
7965: ST_TO_ADDR
// DialogueOn ;
7966: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7970: LD_EXP 1
7974: PPUSH
7975: LD_STRING D7-JMM-1
7977: PPUSH
7978: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7982: LD_VAR 0 1
7986: PUSH
7987: LD_INT 1
7989: ARRAY
7990: PPUSH
7991: LD_STRING D7-Sol1-1
7993: PPUSH
7994: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7998: LD_EXP 1
8002: PPUSH
8003: LD_STRING D7-JMM-2
8005: PPUSH
8006: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8010: LD_VAR 0 1
8014: PUSH
8015: LD_INT 1
8017: ARRAY
8018: PPUSH
8019: LD_STRING D7-Sol1-2
8021: PPUSH
8022: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8026: LD_EXP 1
8030: PPUSH
8031: LD_STRING D7-JMM-3
8033: PPUSH
8034: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8038: LD_VAR 0 1
8042: PUSH
8043: LD_INT 1
8045: ARRAY
8046: PPUSH
8047: LD_STRING D7-Sol1-3
8049: PPUSH
8050: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8054: LD_EXP 3
8058: PPUSH
8059: CALL_OW 302
8063: PUSH
8064: LD_EXP 4
8068: PPUSH
8069: CALL_OW 302
8073: AND
8074: IFFALSE 8116
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8076: LD_EXP 3
8080: PPUSH
8081: LD_STRING D7-Cyrus-3
8083: PPUSH
8084: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8088: LD_VAR 0 1
8092: PUSH
8093: LD_INT 1
8095: ARRAY
8096: PPUSH
8097: LD_STRING D7-Sol1-4
8099: PPUSH
8100: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8104: LD_EXP 4
8108: PPUSH
8109: LD_STRING D7-Lisa-4
8111: PPUSH
8112: CALL_OW 88
// end ; DialogueOff ;
8116: CALL_OW 7
// end ;
8120: PPOPN 1
8122: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8123: LD_EXP 8
8127: PPUSH
8128: CALL_OW 303
8132: PUSH
8133: LD_EXP 21
8137: PUSH
8138: LD_INT 3
8140: EQUAL
8141: AND
8142: IFFALSE 8156
8144: GO 8146
8146: DISABLE
// begin enable ;
8147: ENABLE
// mikhailStatus = 2 ;
8148: LD_ADDR_EXP 21
8152: PUSH
8153: LD_INT 2
8155: ST_TO_ADDR
// end ;
8156: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8157: LD_EXP 8
8161: PPUSH
8162: LD_INT 17
8164: PPUSH
8165: CALL_OW 308
8169: PUSH
8170: LD_EXP 8
8174: PPUSH
8175: CALL_OW 255
8179: PUSH
8180: LD_INT 6
8182: EQUAL
8183: AND
8184: IFFALSE 8217
8186: GO 8188
8188: DISABLE
// begin if not mikhailInBase = 3 then
8189: LD_EXP 22
8193: PUSH
8194: LD_INT 3
8196: EQUAL
8197: NOT
8198: IFFALSE 8208
// mikhailStatus = 3 ;
8200: LD_ADDR_EXP 21
8204: PUSH
8205: LD_INT 3
8207: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8208: LD_EXP 8
8212: PPUSH
8213: CALL_OW 64
// end ;
8217: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8218: LD_EXP 21
8222: PUSH
8223: LD_INT 3
8225: EQUAL
8226: PUSH
8227: LD_EXP 8
8231: PPUSH
8232: CALL_OW 255
8236: PUSH
8237: LD_INT 6
8239: EQUAL
8240: AND
8241: IFFALSE 8407
8243: GO 8245
8245: DISABLE
8246: LD_INT 0
8248: PPUSH
8249: PPUSH
// begin enable ;
8250: ENABLE
// if IsOk ( Mikhail ) then
8251: LD_EXP 8
8255: PPUSH
8256: CALL_OW 302
8260: IFFALSE 8407
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8262: LD_ADDR_VAR 0 2
8266: PUSH
8267: LD_EXP 8
8271: PPUSH
8272: LD_INT 22
8274: PUSH
8275: LD_INT 1
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 21
8284: PUSH
8285: LD_INT 1
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PPUSH
8296: CALL_OW 69
8300: PPUSH
8301: CALL 10326 0 2
8305: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8306: LD_VAR 0 2
8310: PPUSH
8311: LD_EXP 8
8315: PPUSH
8316: CALL_OW 296
8320: PUSH
8321: LD_INT 8
8323: LESS
8324: IFFALSE 8407
// begin if GetSex ( attacker ) = sex_male then
8326: LD_VAR 0 2
8330: PPUSH
8331: CALL_OW 258
8335: PUSH
8336: LD_INT 1
8338: EQUAL
8339: IFFALSE 8375
// begin disable ;
8341: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8342: LD_VAR 0 2
8346: PPUSH
8347: LD_STRING D7a-Sol1-1
8349: PPUSH
8350: CALL_OW 88
// wait ( 0 0$2 ) ;
8354: LD_INT 70
8356: PPUSH
8357: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8361: LD_VAR 0 2
8365: PPUSH
8366: LD_STRING D7a-Sol1-1a
8368: PPUSH
8369: CALL_OW 88
// end else
8373: GO 8407
// begin disable ;
8375: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8376: LD_VAR 0 2
8380: PPUSH
8381: LD_STRING D7a-FSol1-1
8383: PPUSH
8384: CALL_OW 88
// wait ( 0 0$2 ) ;
8388: LD_INT 70
8390: PPUSH
8391: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8395: LD_VAR 0 2
8399: PPUSH
8400: LD_STRING D7a-FSol1-1a
8402: PPUSH
8403: CALL_OW 88
// end ; end ; end ; end ;
8407: PPOPN 2
8409: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8410: LD_EXP 27
8414: PUSH
8415: LD_INT 1
8417: EQUAL
8418: PUSH
8419: LD_INT 22
8421: PPUSH
8422: LD_INT 22
8424: PUSH
8425: LD_INT 3
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: LD_INT 21
8434: PUSH
8435: LD_INT 1
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 70
8450: PUSH
8451: LD_INT 2
8453: GREATER
8454: AND
8455: PUSH
8456: LD_INT 22
8458: PPUSH
8459: LD_INT 22
8461: PUSH
8462: LD_INT 1
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 2
8471: PUSH
8472: LD_INT 21
8474: PUSH
8475: LD_INT 1
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: PUSH
8482: LD_INT 59
8484: PUSH
8485: EMPTY
8486: LIST
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: LIST
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PPUSH
8497: CALL_OW 70
8501: PUSH
8502: LD_INT 0
8504: EQUAL
8505: AND
8506: IFFALSE 8521
8508: GO 8510
8510: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8511: LD_INT 1
8513: PPUSH
8514: LD_INT 3
8516: PPUSH
8517: CALL_OW 235
// end ;
8521: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8522: LD_EXP 30
8526: PUSH
8527: LD_INT 1
8529: EQUAL
8530: PUSH
8531: LD_INT 22
8533: PUSH
8534: LD_INT 0
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: LD_INT 25
8543: PUSH
8544: LD_INT 14
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PPUSH
8555: CALL_OW 69
8559: PUSH
8560: LD_INT 0
8562: EQUAL
8563: AND
8564: IFFALSE 8658
8566: GO 8568
8568: DISABLE
8569: LD_INT 0
8571: PPUSH
8572: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8573: LD_ADDR_VAR 0 2
8577: PUSH
8578: LD_INT 22
8580: PUSH
8581: LD_INT 1
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 21
8590: PUSH
8591: LD_INT 1
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 23
8600: PUSH
8601: LD_INT 1
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: PPUSH
8613: CALL_OW 69
8617: ST_TO_ADDR
// for i in tmp do
8618: LD_ADDR_VAR 0 1
8622: PUSH
8623: LD_VAR 0 2
8627: PUSH
8628: FOR_IN
8629: IFFALSE 8656
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8631: LD_VAR 0 1
8635: PPUSH
8636: LD_INT 1
8638: PPUSH
8639: LD_INT 4
8641: PPUSH
8642: CALL_OW 12
8646: PPUSH
8647: LD_INT 300
8649: PPUSH
8650: CALL_OW 492
// end ;
8654: GO 8628
8656: POP
8657: POP
// end ; end_of_file
8658: PPOPN 2
8660: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8661: LD_INT 0
8663: PPUSH
8664: PPUSH
8665: PPUSH
8666: PPUSH
// for i = 1 to count do
8667: LD_ADDR_VAR 0 8
8671: PUSH
8672: DOUBLE
8673: LD_INT 1
8675: DEC
8676: ST_TO_ADDR
8677: LD_VAR 0 6
8681: PUSH
8682: FOR_TO
8683: IFFALSE 8764
// begin uc_side = side ;
8685: LD_ADDR_OWVAR 20
8689: PUSH
8690: LD_VAR 0 1
8694: ST_TO_ADDR
// uc_nation = nation ;
8695: LD_ADDR_OWVAR 21
8699: PUSH
8700: LD_VAR 0 2
8704: ST_TO_ADDR
// hc_gallery =  ;
8705: LD_ADDR_OWVAR 33
8709: PUSH
8710: LD_STRING 
8712: ST_TO_ADDR
// hc_name =  ;
8713: LD_ADDR_OWVAR 26
8717: PUSH
8718: LD_STRING 
8720: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8721: LD_INT 0
8723: PPUSH
8724: LD_VAR 0 5
8728: PPUSH
8729: LD_VAR 0 4
8733: PPUSH
8734: CALL_OW 380
// un = CreateHuman ;
8738: LD_ADDR_VAR 0 10
8742: PUSH
8743: CALL_OW 44
8747: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8748: LD_VAR 0 10
8752: PPUSH
8753: LD_VAR 0 3
8757: PPUSH
8758: CALL_OW 52
// end ;
8762: GO 8682
8764: POP
8765: POP
// end ;
8766: LD_VAR 0 7
8770: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8771: LD_INT 0
8773: PPUSH
8774: PPUSH
8775: PPUSH
// uc_side := GetSide ( b ) ;
8776: LD_ADDR_OWVAR 20
8780: PUSH
8781: LD_VAR 0 2
8785: PPUSH
8786: CALL_OW 255
8790: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8791: LD_ADDR_OWVAR 21
8795: PUSH
8796: LD_VAR 0 2
8800: PPUSH
8801: CALL_OW 248
8805: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8806: LD_INT 0
8808: PPUSH
8809: LD_INT 1
8811: PPUSH
8812: LD_VAR 0 1
8816: PPUSH
8817: CALL_OW 380
// un = CreateHuman ;
8821: LD_ADDR_VAR 0 4
8825: PUSH
8826: CALL_OW 44
8830: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8831: LD_ADDR_VAR 0 5
8835: PUSH
8836: LD_VAR 0 2
8840: PPUSH
8841: CALL_OW 254
8845: PUSH
8846: LD_INT 3
8848: MINUS
8849: ST_TO_ADDR
// if dir < 0 then
8850: LD_VAR 0 5
8854: PUSH
8855: LD_INT 0
8857: LESS
8858: IFFALSE 8874
// dir := 6 + dir ;
8860: LD_ADDR_VAR 0 5
8864: PUSH
8865: LD_INT 6
8867: PUSH
8868: LD_VAR 0 5
8872: PLUS
8873: ST_TO_ADDR
// SetDir ( un , dir ) ;
8874: LD_VAR 0 4
8878: PPUSH
8879: LD_VAR 0 5
8883: PPUSH
8884: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8888: LD_VAR 0 4
8892: PPUSH
8893: LD_VAR 0 2
8897: PPUSH
8898: CALL_OW 52
// end ;
8902: LD_VAR 0 3
8906: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8907: LD_INT 0
8909: PPUSH
8910: PPUSH
8911: PPUSH
8912: PPUSH
8913: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8914: LD_ADDR_VAR 0 7
8918: PUSH
8919: LD_INT 22
8921: PUSH
8922: LD_VAR 0 1
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 25
8933: PUSH
8934: LD_INT 2
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: LD_INT 24
8943: PUSH
8944: LD_INT 1000
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: LIST
8955: PPUSH
8956: CALL_OW 69
8960: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8961: LD_ADDR_VAR 0 5
8965: PUSH
8966: LD_VAR 0 3
8970: PPUSH
8971: LD_INT 22
8973: PUSH
8974: LD_VAR 0 1
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 21
8985: PUSH
8986: LD_INT 3
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: LD_INT 3
8995: PUSH
8996: LD_INT 24
8998: PUSH
8999: LD_INT 1000
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: LIST
9014: PUSH
9015: EMPTY
9016: LIST
9017: PPUSH
9018: CALL_OW 70
9022: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
9023: LD_VAR 0 5
9027: PUSH
9028: LD_INT 0
9030: GREATER
9031: PUSH
9032: LD_VAR 0 7
9036: PUSH
9037: LD_INT 0
9039: GREATER
9040: AND
9041: IFFALSE 9107
// begin for i in engineerOk_list do
9043: LD_ADDR_VAR 0 6
9047: PUSH
9048: LD_VAR 0 7
9052: PUSH
9053: FOR_IN
9054: IFFALSE 9105
// begin for j in buildings_list do
9056: LD_ADDR_VAR 0 8
9060: PUSH
9061: LD_VAR 0 5
9065: PUSH
9066: FOR_IN
9067: IFFALSE 9101
// begin AddComExitBuilding ( i ) ;
9069: LD_VAR 0 6
9073: PPUSH
9074: CALL_OW 182
// wait ( 0 0$1 ) ;
9078: LD_INT 35
9080: PPUSH
9081: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
9085: LD_VAR 0 6
9089: PPUSH
9090: LD_VAR 0 8
9094: PPUSH
9095: CALL_OW 190
// end ;
9099: GO 9066
9101: POP
9102: POP
// end ;
9103: GO 9053
9105: POP
9106: POP
// end ; if buildings_list = 0 then
9107: LD_VAR 0 5
9111: PUSH
9112: LD_INT 0
9114: EQUAL
9115: IFFALSE 9148
// begin for i in engineerOK_list do
9117: LD_ADDR_VAR 0 6
9121: PUSH
9122: LD_VAR 0 7
9126: PUSH
9127: FOR_IN
9128: IFFALSE 9146
// begin ComEnterUnit ( i , building ) ;
9130: LD_VAR 0 6
9134: PPUSH
9135: LD_VAR 0 2
9139: PPUSH
9140: CALL_OW 120
// end ;
9144: GO 9127
9146: POP
9147: POP
// end ; end ;
9148: LD_VAR 0 4
9152: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9153: LD_INT 0
9155: PPUSH
9156: PPUSH
9157: PPUSH
9158: PPUSH
9159: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9160: LD_ADDR_VAR 0 6
9164: PUSH
9165: LD_INT 22
9167: PUSH
9168: LD_VAR 0 1
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: PUSH
9177: LD_INT 25
9179: PUSH
9180: LD_INT 4
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PUSH
9187: LD_INT 24
9189: PUSH
9190: LD_INT 250
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: LIST
9201: PPUSH
9202: CALL_OW 69
9206: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9207: LD_ADDR_VAR 0 9
9211: PUSH
9212: LD_VAR 0 3
9216: PPUSH
9217: LD_INT 22
9219: PUSH
9220: LD_VAR 0 1
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PUSH
9229: LD_INT 21
9231: PUSH
9232: LD_INT 1
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: PUSH
9239: LD_INT 3
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: LD_INT 650
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: LIST
9260: PPUSH
9261: CALL_OW 70
9265: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9266: LD_VAR 0 9
9270: PUSH
9271: LD_INT 0
9273: GREATER
9274: PUSH
9275: LD_VAR 0 6
9279: PUSH
9280: LD_INT 0
9282: GREATER
9283: AND
9284: IFFALSE 9411
// begin for i = 1 to damageUnits do
9286: LD_ADDR_VAR 0 7
9290: PUSH
9291: DOUBLE
9292: LD_INT 1
9294: DEC
9295: ST_TO_ADDR
9296: LD_VAR 0 9
9300: PUSH
9301: FOR_TO
9302: IFFALSE 9326
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9304: LD_VAR 0 9
9308: PUSH
9309: LD_VAR 0 7
9313: ARRAY
9314: PPUSH
9315: LD_VAR 0 2
9319: PPUSH
9320: CALL_OW 113
9324: GO 9301
9326: POP
9327: POP
// for i in sci_list do
9328: LD_ADDR_VAR 0 7
9332: PUSH
9333: LD_VAR 0 6
9337: PUSH
9338: FOR_IN
9339: IFFALSE 9407
// begin ComExitBuilding ( i ) ;
9341: LD_VAR 0 7
9345: PPUSH
9346: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9350: LD_ADDR_VAR 0 8
9354: PUSH
9355: LD_VAR 0 2
9359: PPUSH
9360: LD_INT 22
9362: PUSH
9363: LD_VAR 0 1
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PPUSH
9372: CALL_OW 70
9376: PUSH
9377: FOR_IN
9378: IFFALSE 9403
// begin AddComHeal ( i , j ) ;
9380: LD_VAR 0 7
9384: PPUSH
9385: LD_VAR 0 8
9389: PPUSH
9390: CALL_OW 188
// wait ( 1 1$0 ) ;
9394: LD_INT 2100
9396: PPUSH
9397: CALL_OW 67
// end ;
9401: GO 9377
9403: POP
9404: POP
// end ;
9405: GO 9338
9407: POP
9408: POP
// end else
9409: GO 9425
// begin AddComEnterUnit ( sci_list , build ) ;
9411: LD_VAR 0 6
9415: PPUSH
9416: LD_VAR 0 4
9420: PPUSH
9421: CALL_OW 180
// end ; end ;
9425: LD_VAR 0 5
9429: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9430: LD_INT 0
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
9436: PPUSH
9437: PPUSH
9438: PPUSH
9439: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9440: LD_ADDR_VAR 0 7
9444: PUSH
9445: LD_VAR 0 3
9449: PPUSH
9450: LD_INT 22
9452: PUSH
9453: LD_VAR 0 1
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: LD_INT 21
9464: PUSH
9465: LD_INT 2
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: LD_INT 24
9474: PUSH
9475: LD_INT 550
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: PUSH
9482: LD_INT 34
9484: PUSH
9485: LD_INT 46
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: PPUSH
9498: CALL_OW 70
9502: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9503: LD_ADDR_VAR 0 8
9507: PUSH
9508: LD_VAR 0 3
9512: PPUSH
9513: LD_INT 22
9515: PUSH
9516: LD_VAR 0 1
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: LD_INT 21
9527: PUSH
9528: LD_INT 2
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: LD_INT 34
9537: PUSH
9538: LD_INT 46
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PUSH
9545: LD_INT 3
9547: PUSH
9548: LD_INT 24
9550: PUSH
9551: LD_INT 550
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: PPUSH
9568: CALL_OW 70
9572: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9573: LD_ADDR_VAR 0 9
9577: PUSH
9578: LD_VAR 0 2
9582: PPUSH
9583: LD_INT 22
9585: PUSH
9586: LD_VAR 0 1
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 21
9597: PUSH
9598: LD_INT 2
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: LD_INT 34
9607: PUSH
9608: LD_INT 46
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 24
9617: PUSH
9618: LD_INT 1000
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: LD_INT 58
9627: PUSH
9628: EMPTY
9629: LIST
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: PPUSH
9638: CALL_OW 70
9642: ST_TO_ADDR
// for i in damageVehicle_list do
9643: LD_ADDR_VAR 0 5
9647: PUSH
9648: LD_VAR 0 8
9652: PUSH
9653: FOR_IN
9654: IFFALSE 9673
// mechanicInside_list = UnitsInside ( i ) ;
9656: LD_ADDR_VAR 0 10
9660: PUSH
9661: LD_VAR 0 5
9665: PPUSH
9666: CALL_OW 313
9670: ST_TO_ADDR
9671: GO 9653
9673: POP
9674: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9675: LD_ADDR_VAR 0 11
9679: PUSH
9680: LD_VAR 0 2
9684: PPUSH
9685: LD_INT 22
9687: PUSH
9688: LD_VAR 0 1
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 25
9699: PUSH
9700: LD_INT 3
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PPUSH
9711: CALL_OW 70
9715: ST_TO_ADDR
// if damageVehicle_list > 0 then
9716: LD_VAR 0 8
9720: PUSH
9721: LD_INT 0
9723: GREATER
9724: IFFALSE 9797
// begin for i in damageVehicle_list do
9726: LD_ADDR_VAR 0 5
9730: PUSH
9731: LD_VAR 0 8
9735: PUSH
9736: FOR_IN
9737: IFFALSE 9795
// begin for j in mechanicInside_list do
9739: LD_ADDR_VAR 0 6
9743: PUSH
9744: LD_VAR 0 10
9748: PUSH
9749: FOR_IN
9750: IFFALSE 9791
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9752: LD_VAR 0 8
9756: PPUSH
9757: LD_VAR 0 2
9761: PPUSH
9762: CALL_OW 113
// AddComExitVehicle ( j ) ;
9766: LD_VAR 0 6
9770: PPUSH
9771: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9775: LD_VAR 0 6
9779: PPUSH
9780: LD_VAR 0 5
9784: PPUSH
9785: CALL_OW 189
// end ;
9789: GO 9749
9791: POP
9792: POP
// end ;
9793: GO 9736
9795: POP
9796: POP
// end ; if emptyVehicle_list > 0 then
9797: LD_VAR 0 9
9801: PUSH
9802: LD_INT 0
9804: GREATER
9805: IFFALSE 9855
// begin for i in emptyVehicle_list do
9807: LD_ADDR_VAR 0 5
9811: PUSH
9812: LD_VAR 0 9
9816: PUSH
9817: FOR_IN
9818: IFFALSE 9853
// begin for j in mechanicOutside_list do
9820: LD_ADDR_VAR 0 6
9824: PUSH
9825: LD_VAR 0 11
9829: PUSH
9830: FOR_IN
9831: IFFALSE 9849
// begin AddComEnterUnit ( j , i ) ;
9833: LD_VAR 0 6
9837: PPUSH
9838: LD_VAR 0 5
9842: PPUSH
9843: CALL_OW 180
// end ;
9847: GO 9830
9849: POP
9850: POP
// end ;
9851: GO 9817
9853: POP
9854: POP
// end ; if VehicleOK_list > 0 then
9855: LD_VAR 0 7
9859: PUSH
9860: LD_INT 0
9862: GREATER
9863: IFFALSE 9897
// begin for i in VehicleOK_list do
9865: LD_ADDR_VAR 0 5
9869: PUSH
9870: LD_VAR 0 7
9874: PUSH
9875: FOR_IN
9876: IFFALSE 9895
// ComAgressiveMove ( i , 110 , 29 ) ;
9878: LD_VAR 0 5
9882: PPUSH
9883: LD_INT 110
9885: PPUSH
9886: LD_INT 29
9888: PPUSH
9889: CALL_OW 114
9893: GO 9875
9895: POP
9896: POP
// end ; end ;
9897: LD_VAR 0 4
9901: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9902: LD_INT 0
9904: PPUSH
9905: PPUSH
9906: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9907: LD_VAR 0 1
9911: PPUSH
9912: LD_INT 22
9914: PUSH
9915: LD_VAR 0 2
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 2
9926: PUSH
9927: LD_INT 21
9929: PUSH
9930: LD_INT 2
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: LD_INT 21
9939: PUSH
9940: LD_INT 1
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: LIST
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PPUSH
9956: CALL_OW 70
9960: PUSH
9961: LD_VAR 0 5
9965: GREATER
9966: IFFALSE 10098
// begin for i in defendersList do
9968: LD_ADDR_VAR 0 7
9972: PUSH
9973: LD_VAR 0 3
9977: PUSH
9978: FOR_IN
9979: IFFALSE 10094
// begin AddComExitBuilding ( i ) ;
9981: LD_VAR 0 7
9985: PPUSH
9986: CALL_OW 182
// wait ( 0 0$1 ) ;
9990: LD_INT 35
9992: PPUSH
9993: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9997: LD_ADDR_VAR 0 8
10001: PUSH
10002: LD_VAR 0 1
10006: PPUSH
10007: LD_INT 22
10009: PUSH
10010: LD_VAR 0 2
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 2
10021: PUSH
10022: LD_INT 21
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: PUSH
10032: LD_INT 21
10034: PUSH
10035: LD_INT 1
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PPUSH
10051: CALL_OW 70
10055: PUSH
10056: FOR_IN
10057: IFFALSE 10090
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
10059: LD_VAR 0 7
10063: PPUSH
10064: LD_VAR 0 8
10068: PPUSH
10069: CALL_OW 250
10073: PPUSH
10074: LD_VAR 0 8
10078: PPUSH
10079: CALL_OW 251
10083: PPUSH
10084: CALL_OW 174
10088: GO 10056
10090: POP
10091: POP
// end ;
10092: GO 9978
10094: POP
10095: POP
// end else
10096: GO 10129
// begin for i in defendersList do
10098: LD_ADDR_VAR 0 7
10102: PUSH
10103: LD_VAR 0 3
10107: PUSH
10108: FOR_IN
10109: IFFALSE 10127
// ComEnterUnit ( i , build ) ;
10111: LD_VAR 0 7
10115: PPUSH
10116: LD_VAR 0 4
10120: PPUSH
10121: CALL_OW 120
10125: GO 10108
10127: POP
10128: POP
// end ; end ;
10129: LD_VAR 0 6
10133: RET
// export function RussianTrap ; var i ; begin
10134: LD_INT 0
10136: PPUSH
10137: PPUSH
// if GetSide ( Brian ) = 4 then
10138: LD_EXP 6
10142: PPUSH
10143: CALL_OW 255
10147: PUSH
10148: LD_INT 4
10150: EQUAL
10151: IFFALSE 10174
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10153: LD_EXP 6
10157: PUSH
10158: LD_EXP 7
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PPUSH
10167: LD_INT 0
10169: PPUSH
10170: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10174: LD_ADDR_VAR 0 2
10178: PUSH
10179: LD_INT 22
10181: PUSH
10182: LD_INT 3
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PUSH
10189: LD_INT 21
10191: PUSH
10192: LD_INT 1
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PPUSH
10203: CALL_OW 69
10207: PUSH
10208: FOR_IN
10209: IFFALSE 10319
// begin ComExitBuilding ( i ) ;
10211: LD_VAR 0 2
10215: PPUSH
10216: CALL_OW 122
// wait ( 0 0$1 ) ;
10220: LD_INT 35
10222: PPUSH
10223: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10227: LD_VAR 0 2
10231: PPUSH
10232: LD_INT 120
10234: PPUSH
10235: LD_INT 56
10237: PPUSH
10238: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10242: LD_VAR 0 2
10246: PPUSH
10247: LD_INT 111
10249: PPUSH
10250: LD_INT 37
10252: PPUSH
10253: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10257: LD_INT 33
10259: PPUSH
10260: CALL_OW 255
10264: PUSH
10265: LD_INT 3
10267: EQUAL
10268: PUSH
10269: LD_INT 33
10271: PPUSH
10272: CALL_OW 302
10276: AND
10277: IFFALSE 10293
// begin AddComEnterUnit ( i , arm2 ) ;
10279: LD_VAR 0 2
10283: PPUSH
10284: LD_INT 33
10286: PPUSH
10287: CALL_OW 180
// end else
10291: GO 10317
// begin AddComCrawl ( i ) ;
10293: LD_VAR 0 2
10297: PPUSH
10298: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10302: LD_VAR 0 2
10306: PPUSH
10307: LD_INT 109
10309: PPUSH
10310: LD_INT 30
10312: PPUSH
10313: CALL_OW 174
// end ; end ;
10317: GO 10208
10319: POP
10320: POP
// end ;
10321: LD_VAR 0 1
10325: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
10330: PPUSH
10331: PPUSH
10332: PPUSH
// nearest_dist = 1000 ;
10333: LD_ADDR_VAR 0 4
10337: PUSH
10338: LD_INT 1000
10340: ST_TO_ADDR
// nearest_un = un ;
10341: LD_ADDR_VAR 0 5
10345: PUSH
10346: LD_VAR 0 1
10350: ST_TO_ADDR
// for sold in units do
10351: LD_ADDR_VAR 0 6
10355: PUSH
10356: LD_VAR 0 2
10360: PUSH
10361: FOR_IN
10362: IFFALSE 10418
// begin dist = GetDistUnits ( un , sold ) ;
10364: LD_ADDR_VAR 0 7
10368: PUSH
10369: LD_VAR 0 1
10373: PPUSH
10374: LD_VAR 0 6
10378: PPUSH
10379: CALL_OW 296
10383: ST_TO_ADDR
// if dist < nearest_dist then
10384: LD_VAR 0 7
10388: PUSH
10389: LD_VAR 0 4
10393: LESS
10394: IFFALSE 10416
// begin nearest_un = sold ;
10396: LD_ADDR_VAR 0 5
10400: PUSH
10401: LD_VAR 0 6
10405: ST_TO_ADDR
// nearest_dist = dist ;
10406: LD_ADDR_VAR 0 4
10410: PUSH
10411: LD_VAR 0 7
10415: ST_TO_ADDR
// end ; end ;
10416: GO 10361
10418: POP
10419: POP
// result := nearest_un ;
10420: LD_ADDR_VAR 0 3
10424: PUSH
10425: LD_VAR 0 5
10429: ST_TO_ADDR
// end ;
10430: LD_VAR 0 3
10434: RET
// export function PrepareDifficulty ; begin
10435: LD_INT 0
10437: PPUSH
// if Difficulty = 1 then
10438: LD_OWVAR 67
10442: PUSH
10443: LD_INT 1
10445: EQUAL
10446: IFFALSE 10509
// begin RemoveUnit ( brw2 ) ;
10448: LD_INT 9
10450: PPUSH
10451: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10455: LD_INT 30
10457: PPUSH
10458: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10462: LD_INT 52
10464: PPUSH
10465: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10469: LD_INT 63
10471: PPUSH
10472: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10476: LD_INT 5
10478: PUSH
10479: LD_INT 4
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PPUSH
10486: LD_INT 60
10488: PPUSH
10489: CALL_OW 240
// RuSoldMinLevel = 0 ;
10493: LD_ADDR_EXP 13
10497: PUSH
10498: LD_INT 0
10500: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10501: LD_ADDR_EXP 14
10505: PUSH
10506: LD_INT 1
10508: ST_TO_ADDR
// end ; if Difficulty = 2 then
10509: LD_OWVAR 67
10513: PUSH
10514: LD_INT 2
10516: EQUAL
10517: IFFALSE 10559
// begin RemoveUnit ( brw4 ) ;
10519: LD_INT 52
10521: PPUSH
10522: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10526: LD_INT 5
10528: PUSH
10529: LD_INT 4
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PPUSH
10536: LD_INT 50
10538: PPUSH
10539: CALL_OW 240
// RuSoldMinLevel = 1 ;
10543: LD_ADDR_EXP 13
10547: PUSH
10548: LD_INT 1
10550: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10551: LD_ADDR_EXP 14
10555: PUSH
10556: LD_INT 2
10558: ST_TO_ADDR
// end ; if Difficulty = 3 then
10559: LD_OWVAR 67
10563: PUSH
10564: LD_INT 3
10566: EQUAL
10567: IFFALSE 10602
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10569: LD_INT 5
10571: PUSH
10572: LD_INT 4
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PPUSH
10579: LD_INT 40
10581: PPUSH
10582: CALL_OW 240
// RuSoldMinLevel = 2 ;
10586: LD_ADDR_EXP 13
10590: PUSH
10591: LD_INT 2
10593: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10594: LD_ADDR_EXP 14
10598: PUSH
10599: LD_INT 3
10601: ST_TO_ADDR
// end ; end ;
10602: LD_VAR 0 1
10606: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10607: LD_INT 0
10609: PPUSH
10610: PPUSH
10611: PPUSH
// tmp = [ ] ;
10612: LD_ADDR_VAR 0 5
10616: PUSH
10617: EMPTY
10618: ST_TO_ADDR
// if not vehicles then
10619: LD_VAR 0 1
10623: NOT
10624: IFFALSE 10628
// exit ;
10626: GO 10745
// for i in vehicles do
10628: LD_ADDR_VAR 0 4
10632: PUSH
10633: LD_VAR 0 1
10637: PUSH
10638: FOR_IN
10639: IFFALSE 10729
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10641: LD_ADDR_VAR 0 5
10645: PUSH
10646: LD_VAR 0 5
10650: PPUSH
10651: LD_INT 1
10653: PPUSH
10654: LD_VAR 0 4
10658: PPUSH
10659: CALL_OW 265
10663: PUSH
10664: LD_VAR 0 4
10668: PPUSH
10669: CALL_OW 262
10673: PUSH
10674: LD_VAR 0 4
10678: PPUSH
10679: CALL_OW 263
10683: PUSH
10684: LD_VAR 0 4
10688: PPUSH
10689: CALL_OW 264
10693: PUSH
10694: LD_VAR 0 4
10698: PPUSH
10699: CALL_OW 261
10703: PUSH
10704: LD_VAR 0 4
10708: PPUSH
10709: CALL_OW 256
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: PPUSH
10722: CALL_OW 2
10726: ST_TO_ADDR
// end ;
10727: GO 10638
10729: POP
10730: POP
// SaveVariable ( tmp , ident ) ;
10731: LD_VAR 0 5
10735: PPUSH
10736: LD_VAR 0 2
10740: PPUSH
10741: CALL_OW 39
// end ; end_of_file
10745: LD_VAR 0 3
10749: RET
// export function PrepareHeroes ; var plive ; begin
10750: LD_INT 0
10752: PPUSH
10753: PPUSH
// uc_side = 1 ;
10754: LD_ADDR_OWVAR 20
10758: PUSH
10759: LD_INT 1
10761: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10762: LD_ADDR_EXP 1
10766: PUSH
10767: LD_STRING 01_JMM
10769: PPUSH
10770: CALL_OW 34
10774: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10775: LD_ADDR_VAR 0 2
10779: PUSH
10780: LD_STRING 01_JMMLifePoints_1
10782: PPUSH
10783: LD_INT 1000
10785: PPUSH
10786: CALL_OW 30
10790: ST_TO_ADDR
// if plive < 250 then
10791: LD_VAR 0 2
10795: PUSH
10796: LD_INT 250
10798: LESS
10799: IFFALSE 10809
// plive := 300 ;
10801: LD_ADDR_VAR 0 2
10805: PUSH
10806: LD_INT 300
10808: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10809: LD_EXP 1
10813: PPUSH
10814: LD_VAR 0 2
10818: PPUSH
10819: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10823: LD_ADDR_EXP 9
10827: PUSH
10828: LD_STRING Powell
10830: PPUSH
10831: CALL_OW 25
10835: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10836: LD_ADDR_EXP 2
10840: PUSH
10841: LD_STRING 01_Bobby
10843: PPUSH
10844: CALL_OW 34
10848: ST_TO_ADDR
// if Bobby then
10849: LD_EXP 2
10853: IFFALSE 10903
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10855: LD_ADDR_VAR 0 2
10859: PUSH
10860: LD_STRING 01_BobbyLifePoints_1
10862: PPUSH
10863: LD_INT 1000
10865: PPUSH
10866: CALL_OW 30
10870: ST_TO_ADDR
// if plive < 250 then
10871: LD_VAR 0 2
10875: PUSH
10876: LD_INT 250
10878: LESS
10879: IFFALSE 10889
// plive := 300 ;
10881: LD_ADDR_VAR 0 2
10885: PUSH
10886: LD_INT 300
10888: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10889: LD_EXP 2
10893: PPUSH
10894: LD_VAR 0 2
10898: PPUSH
10899: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10903: LD_ADDR_EXP 3
10907: PUSH
10908: LD_STRING 01_Cyrus
10910: PPUSH
10911: CALL_OW 34
10915: ST_TO_ADDR
// if Cyrus then
10916: LD_EXP 3
10920: IFFALSE 10970
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10922: LD_ADDR_VAR 0 2
10926: PUSH
10927: LD_STRING 01_CyrusLifePoints_1
10929: PPUSH
10930: LD_INT 1000
10932: PPUSH
10933: CALL_OW 30
10937: ST_TO_ADDR
// if plive < 250 then
10938: LD_VAR 0 2
10942: PUSH
10943: LD_INT 250
10945: LESS
10946: IFFALSE 10956
// plive := 300 ;
10948: LD_ADDR_VAR 0 2
10952: PUSH
10953: LD_INT 300
10955: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10956: LD_EXP 3
10960: PPUSH
10961: LD_VAR 0 2
10965: PPUSH
10966: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
10970: LD_ADDR_EXP 5
10974: PUSH
10975: LD_STRING Khatam
10977: PPUSH
10978: CALL_OW 25
10982: ST_TO_ADDR
// uc_side = 4 ;
10983: LD_ADDR_OWVAR 20
10987: PUSH
10988: LD_INT 4
10990: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10991: LD_ADDR_EXP 4
10995: PUSH
10996: LD_STRING Lisa
10998: PPUSH
10999: CALL_OW 25
11003: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11004: LD_EXP 1
11008: PPUSH
11009: LD_INT 3
11011: PPUSH
11012: LD_INT 0
11014: PPUSH
11015: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11019: LD_EXP 2
11023: PPUSH
11024: LD_INT 3
11026: PPUSH
11027: LD_INT 0
11029: PPUSH
11030: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11034: LD_EXP 3
11038: PPUSH
11039: LD_INT 3
11041: PPUSH
11042: LD_INT 0
11044: PPUSH
11045: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11049: LD_EXP 4
11053: PPUSH
11054: LD_INT 5
11056: PPUSH
11057: LD_INT 0
11059: PPUSH
11060: CALL_OW 49
// ComCrawl ( Lisa ) ;
11064: LD_EXP 4
11068: PPUSH
11069: CALL_OW 137
// end ;
11073: LD_VAR 0 1
11077: RET
// export function PrepareLisSquad ; var i , un ; begin
11078: LD_INT 0
11080: PPUSH
11081: PPUSH
11082: PPUSH
// uc_side = 4 ;
11083: LD_ADDR_OWVAR 20
11087: PUSH
11088: LD_INT 4
11090: ST_TO_ADDR
// uc_nation = 1 ;
11091: LD_ADDR_OWVAR 21
11095: PUSH
11096: LD_INT 1
11098: ST_TO_ADDR
// hc_class := 2 ;
11099: LD_ADDR_OWVAR 28
11103: PUSH
11104: LD_INT 2
11106: ST_TO_ADDR
// hc_sex := sex_male ;
11107: LD_ADDR_OWVAR 27
11111: PUSH
11112: LD_INT 1
11114: ST_TO_ADDR
// hc_gallery :=  ;
11115: LD_ADDR_OWVAR 33
11119: PUSH
11120: LD_STRING 
11122: ST_TO_ADDR
// hc_name :=  ;
11123: LD_ADDR_OWVAR 26
11127: PUSH
11128: LD_STRING 
11130: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11131: LD_ADDR_OWVAR 30
11135: PUSH
11136: LD_INT 0
11138: PUSH
11139: LD_INT 1
11141: PUSH
11142: LD_INT 0
11144: PUSH
11145: LD_INT 0
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11154: LD_ADDR_OWVAR 31
11158: PUSH
11159: LD_INT 1
11161: PUSH
11162: LD_INT 2
11164: PUSH
11165: LD_INT 0
11167: PUSH
11168: LD_INT 0
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: ST_TO_ADDR
// un := CreateHuman ;
11177: LD_ADDR_VAR 0 3
11181: PUSH
11182: CALL_OW 44
11186: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11187: LD_VAR 0 3
11191: PPUSH
11192: LD_INT 6
11194: PPUSH
11195: LD_INT 0
11197: PPUSH
11198: CALL_OW 49
// hc_sex := sex_female ;
11202: LD_ADDR_OWVAR 27
11206: PUSH
11207: LD_INT 2
11209: ST_TO_ADDR
// hc_gallery :=  ;
11210: LD_ADDR_OWVAR 33
11214: PUSH
11215: LD_STRING 
11217: ST_TO_ADDR
// hc_name :=  ;
11218: LD_ADDR_OWVAR 26
11222: PUSH
11223: LD_STRING 
11225: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11226: LD_ADDR_OWVAR 30
11230: PUSH
11231: LD_INT 0
11233: PUSH
11234: LD_INT 0
11236: PUSH
11237: LD_INT 0
11239: PUSH
11240: LD_INT 1
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11249: LD_ADDR_OWVAR 31
11253: PUSH
11254: LD_INT 0
11256: PUSH
11257: LD_INT 1
11259: PUSH
11260: LD_INT 0
11262: PUSH
11263: LD_INT 1
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: ST_TO_ADDR
// un := CreateHuman ;
11272: LD_ADDR_VAR 0 3
11276: PUSH
11277: CALL_OW 44
11281: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11282: LD_VAR 0 3
11286: PPUSH
11287: LD_INT 6
11289: PPUSH
11290: LD_INT 0
11292: PPUSH
11293: CALL_OW 49
// if not Bobby and not Cyrus then
11297: LD_EXP 2
11301: NOT
11302: PUSH
11303: LD_EXP 3
11307: NOT
11308: AND
11309: IFFALSE 11414
// begin hc_class := 1 ;
11311: LD_ADDR_OWVAR 28
11315: PUSH
11316: LD_INT 1
11318: ST_TO_ADDR
// hc_sex := sex_male ;
11319: LD_ADDR_OWVAR 27
11323: PUSH
11324: LD_INT 1
11326: ST_TO_ADDR
// hc_gallery :=  ;
11327: LD_ADDR_OWVAR 33
11331: PUSH
11332: LD_STRING 
11334: ST_TO_ADDR
// hc_name :=  ;
11335: LD_ADDR_OWVAR 26
11339: PUSH
11340: LD_STRING 
11342: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11343: LD_ADDR_OWVAR 30
11347: PUSH
11348: LD_INT 2
11350: PUSH
11351: LD_INT 3
11353: PUSH
11354: LD_INT 1
11356: PUSH
11357: LD_INT 0
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11366: LD_ADDR_OWVAR 31
11370: PUSH
11371: LD_INT 2
11373: PUSH
11374: LD_INT 3
11376: PUSH
11377: LD_INT 1
11379: PUSH
11380: LD_INT 0
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: ST_TO_ADDR
// un := CreateHuman ;
11389: LD_ADDR_VAR 0 3
11393: PUSH
11394: CALL_OW 44
11398: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11399: LD_VAR 0 3
11403: PPUSH
11404: LD_INT 31
11406: PPUSH
11407: LD_INT 0
11409: PPUSH
11410: CALL_OW 49
// end ; InitHc ;
11414: CALL_OW 19
// end ;
11418: LD_VAR 0 1
11422: RET
// export function PrepareOtherAmericans ; begin
11423: LD_INT 0
11425: PPUSH
// uc_side = 4 ;
11426: LD_ADDR_OWVAR 20
11430: PUSH
11431: LD_INT 4
11433: ST_TO_ADDR
// uc_nation = 1 ;
11434: LD_ADDR_OWVAR 21
11438: PUSH
11439: LD_INT 1
11441: ST_TO_ADDR
// hc_gallery =  ;
11442: LD_ADDR_OWVAR 33
11446: PUSH
11447: LD_STRING 
11449: ST_TO_ADDR
// hc_name = Tom Garvin ;
11450: LD_ADDR_OWVAR 26
11454: PUSH
11455: LD_STRING Tom Garvin
11457: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11458: LD_INT 1
11460: PPUSH
11461: LD_INT 1
11463: PPUSH
11464: LD_INT 1
11466: PPUSH
11467: LD_INT 2
11469: PPUSH
11470: CALL_OW 12
11474: PPUSH
11475: CALL_OW 380
// Brian = CreateHuman ;
11479: LD_ADDR_EXP 6
11483: PUSH
11484: CALL_OW 44
11488: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11489: LD_EXP 6
11493: PPUSH
11494: LD_INT 10
11496: PPUSH
11497: LD_INT 0
11499: PPUSH
11500: CALL_OW 49
// hc_name = Jerry White ;
11504: LD_ADDR_OWVAR 26
11508: PUSH
11509: LD_STRING Jerry White
11511: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11512: LD_INT 1
11514: PPUSH
11515: LD_INT 3
11517: PPUSH
11518: LD_INT 1
11520: PPUSH
11521: LD_INT 2
11523: PPUSH
11524: CALL_OW 12
11528: PPUSH
11529: CALL_OW 380
// Jerry = CreateHuman ;
11533: LD_ADDR_EXP 7
11537: PUSH
11538: CALL_OW 44
11542: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11543: LD_EXP 7
11547: PPUSH
11548: LD_INT 10
11550: PPUSH
11551: LD_INT 0
11553: PPUSH
11554: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11558: LD_EXP 6
11562: PUSH
11563: LD_EXP 7
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PPUSH
11572: CALL_OW 140
// end ;
11576: LD_VAR 0 1
11580: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11581: LD_INT 0
11583: PPUSH
11584: PPUSH
11585: PPUSH
// for i = 1 to 6 do
11586: LD_ADDR_VAR 0 2
11590: PUSH
11591: DOUBLE
11592: LD_INT 1
11594: DEC
11595: ST_TO_ADDR
11596: LD_INT 6
11598: PUSH
11599: FOR_TO
11600: IFFALSE 11694
// begin uc_side = 4 ;
11602: LD_ADDR_OWVAR 20
11606: PUSH
11607: LD_INT 4
11609: ST_TO_ADDR
// uc_nation = 1 ;
11610: LD_ADDR_OWVAR 21
11614: PUSH
11615: LD_INT 1
11617: ST_TO_ADDR
// hc_gallery =  ;
11618: LD_ADDR_OWVAR 33
11622: PUSH
11623: LD_STRING 
11625: ST_TO_ADDR
// hc_name =  ;
11626: LD_ADDR_OWVAR 26
11630: PUSH
11631: LD_STRING 
11633: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11634: LD_INT 0
11636: PPUSH
11637: LD_INT 1
11639: PPUSH
11640: LD_INT 4
11642: PPUSH
11643: CALL_OW 12
11647: PPUSH
11648: LD_INT 1
11650: PPUSH
11651: CALL_OW 380
// un = CreateHuman ;
11655: LD_ADDR_VAR 0 3
11659: PUSH
11660: CALL_OW 44
11664: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11665: LD_VAR 0 3
11669: PPUSH
11670: LD_INT 16
11672: PPUSH
11673: LD_INT 0
11675: PPUSH
11676: CALL_OW 49
// SetLives ( un , 1 ) ;
11680: LD_VAR 0 3
11684: PPUSH
11685: LD_INT 1
11687: PPUSH
11688: CALL_OW 234
// end ;
11692: GO 11599
11694: POP
11695: POP
// DyingSold = CreateHuman ;
11696: LD_ADDR_EXP 34
11700: PUSH
11701: CALL_OW 44
11705: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11706: LD_EXP 34
11710: PPUSH
11711: LD_INT 16
11713: PPUSH
11714: LD_INT 0
11716: PPUSH
11717: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11721: LD_EXP 34
11725: PPUSH
11726: LD_INT 250
11728: PPUSH
11729: CALL_OW 234
// end ; end_of_file
11733: LD_VAR 0 1
11737: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11738: LD_INT 0
11740: PPUSH
11741: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11742: LD_ADDR_VAR 0 2
11746: PUSH
11747: LD_INT 22
11749: PUSH
11750: LD_INT 1
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: LD_INT 23
11759: PUSH
11760: LD_INT 1
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PUSH
11767: LD_INT 25
11769: PUSH
11770: LD_INT 2
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 50
11779: PUSH
11780: EMPTY
11781: LIST
11782: PUSH
11783: LD_INT 56
11785: PUSH
11786: EMPTY
11787: LIST
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: PPUSH
11796: CALL_OW 69
11800: PUSH
11801: LD_EXP 1
11805: PUSH
11806: EMPTY
11807: LIST
11808: DIFF
11809: ST_TO_ADDR
// uc_side = 6 ;
11810: LD_ADDR_OWVAR 20
11814: PUSH
11815: LD_INT 6
11817: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11818: LD_ADDR_EXP 8
11822: PUSH
11823: LD_STRING Mikhail
11825: PPUSH
11826: CALL_OW 25
11830: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11831: LD_EXP 8
11835: PPUSH
11836: LD_VAR 0 2
11840: PUSH
11841: LD_INT 1
11843: ARRAY
11844: PPUSH
11845: CALL_OW 250
11849: PPUSH
11850: LD_VAR 0 2
11854: PUSH
11855: LD_INT 1
11857: ARRAY
11858: PPUSH
11859: CALL_OW 251
11863: PPUSH
11864: LD_INT 5
11866: PPUSH
11867: LD_INT 1
11869: PPUSH
11870: CALL_OW 50
// end ;
11874: LD_VAR 0 1
11878: RET
// export function PrepareRussianCommander ; begin
11879: LD_INT 0
11881: PPUSH
// uc_side = 3 ;
11882: LD_ADDR_OWVAR 20
11886: PUSH
11887: LD_INT 3
11889: ST_TO_ADDR
// uc_nation = 3 ;
11890: LD_ADDR_OWVAR 21
11894: PUSH
11895: LD_INT 3
11897: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11898: LD_ADDR_EXP 19
11902: PUSH
11903: LD_STRING Natasza
11905: PPUSH
11906: CALL_OW 25
11910: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11911: LD_EXP 19
11915: PPUSH
11916: LD_INT 24
11918: PPUSH
11919: LD_INT 0
11921: PPUSH
11922: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11926: LD_EXP 19
11930: PPUSH
11931: LD_INT 56
11933: PPUSH
11934: LD_INT 16
11936: PPUSH
11937: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11941: LD_ADDR_EXP 24
11945: PUSH
11946: LD_EXP 24
11950: PUSH
11951: LD_EXP 19
11955: ADD
11956: ST_TO_ADDR
// end ;
11957: LD_VAR 0 1
11961: RET
// export function PrepareSouthBase ; var i , un ; begin
11962: LD_INT 0
11964: PPUSH
11965: PPUSH
11966: PPUSH
// for i = 1 to 2 do
11967: LD_ADDR_VAR 0 2
11971: PUSH
11972: DOUBLE
11973: LD_INT 1
11975: DEC
11976: ST_TO_ADDR
11977: LD_INT 2
11979: PUSH
11980: FOR_TO
11981: IFFALSE 12090
// begin uc_side = 3 ;
11983: LD_ADDR_OWVAR 20
11987: PUSH
11988: LD_INT 3
11990: ST_TO_ADDR
// uc_nation = 3 ;
11991: LD_ADDR_OWVAR 21
11995: PUSH
11996: LD_INT 3
11998: ST_TO_ADDR
// hc_gallery =  ;
11999: LD_ADDR_OWVAR 33
12003: PUSH
12004: LD_STRING 
12006: ST_TO_ADDR
// hc_name =  ;
12007: LD_ADDR_OWVAR 26
12011: PUSH
12012: LD_STRING 
12014: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12015: LD_INT 1
12017: PPUSH
12018: LD_INT 1
12020: PPUSH
12021: LD_EXP 13
12025: PPUSH
12026: LD_EXP 14
12030: PPUSH
12031: CALL_OW 12
12035: PPUSH
12036: CALL_OW 380
// hc_importance = 0 ;
12040: LD_ADDR_OWVAR 32
12044: PUSH
12045: LD_INT 0
12047: ST_TO_ADDR
// un = CreateHuman ;
12048: LD_ADDR_VAR 0 3
12052: PUSH
12053: CALL_OW 44
12057: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12058: LD_VAR 0 3
12062: PPUSH
12063: LD_INT 11
12065: PPUSH
12066: LD_INT 0
12068: PPUSH
12069: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12073: LD_VAR 0 3
12077: PPUSH
12078: LD_INT 111
12080: PPUSH
12081: LD_INT 38
12083: PPUSH
12084: CALL_OW 118
// end ;
12088: GO 11980
12090: POP
12091: POP
// for i = 1 to Difficulty do
12092: LD_ADDR_VAR 0 2
12096: PUSH
12097: DOUBLE
12098: LD_INT 1
12100: DEC
12101: ST_TO_ADDR
12102: LD_OWVAR 67
12106: PUSH
12107: FOR_TO
12108: IFFALSE 12191
// begin uc_side = 3 ;
12110: LD_ADDR_OWVAR 20
12114: PUSH
12115: LD_INT 3
12117: ST_TO_ADDR
// uc_nation = 3 ;
12118: LD_ADDR_OWVAR 21
12122: PUSH
12123: LD_INT 3
12125: ST_TO_ADDR
// hc_gallery =  ;
12126: LD_ADDR_OWVAR 33
12130: PUSH
12131: LD_STRING 
12133: ST_TO_ADDR
// hc_name =  ;
12134: LD_ADDR_OWVAR 26
12138: PUSH
12139: LD_STRING 
12141: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12142: LD_INT 0
12144: PPUSH
12145: LD_INT 3
12147: PPUSH
12148: LD_EXP 13
12152: PPUSH
12153: LD_EXP 14
12157: PPUSH
12158: CALL_OW 12
12162: PPUSH
12163: CALL_OW 380
// un = CreateHuman ;
12167: LD_ADDR_VAR 0 3
12171: PUSH
12172: CALL_OW 44
12176: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12177: LD_VAR 0 3
12181: PPUSH
12182: LD_INT 10
12184: PPUSH
12185: CALL_OW 52
// end ;
12189: GO 12107
12191: POP
12192: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12193: LD_INT 3
12195: PPUSH
12196: LD_INT 3
12198: PPUSH
12199: LD_INT 33
12201: PPUSH
12202: LD_EXP 13
12206: PPUSH
12207: LD_EXP 14
12211: PPUSH
12212: CALL_OW 12
12216: PPUSH
12217: LD_INT 1
12219: PPUSH
12220: LD_INT 1
12222: PUSH
12223: LD_INT 1
12225: PPUSH
12226: LD_INT 2
12228: PPUSH
12229: CALL_OW 12
12233: PUSH
12234: LD_INT 1
12236: PPUSH
12237: LD_INT 2
12239: PPUSH
12240: CALL_OW 12
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: PUSH
12250: LD_OWVAR 67
12254: ARRAY
12255: PPUSH
12256: CALL 8661 0 6
// for i in UnitsInside ( arm2 ) do
12260: LD_ADDR_VAR 0 2
12264: PUSH
12265: LD_INT 33
12267: PPUSH
12268: CALL_OW 313
12272: PUSH
12273: FOR_IN
12274: IFFALSE 12294
// southBaseDefenders = southBaseDefenders ^ i ;
12276: LD_ADDR_EXP 25
12280: PUSH
12281: LD_EXP 25
12285: PUSH
12286: LD_VAR 0 2
12290: ADD
12291: ST_TO_ADDR
12292: GO 12273
12294: POP
12295: POP
// end ;
12296: LD_VAR 0 1
12300: RET
// export function PrepareNorthBase ; var i , un ; begin
12301: LD_INT 0
12303: PPUSH
12304: PPUSH
12305: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12306: LD_ADDR_VAR 0 2
12310: PUSH
12311: DOUBLE
12312: LD_INT 1
12314: DEC
12315: ST_TO_ADDR
12316: LD_INT 1
12318: PPUSH
12319: LD_INT 2
12321: PPUSH
12322: CALL_OW 12
12326: PUSH
12327: LD_INT 2
12329: PPUSH
12330: LD_INT 3
12332: PPUSH
12333: CALL_OW 12
12337: PUSH
12338: LD_INT 3
12340: PPUSH
12341: LD_INT 4
12343: PPUSH
12344: CALL_OW 12
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: PUSH
12354: LD_OWVAR 67
12358: ARRAY
12359: PUSH
12360: FOR_TO
12361: IFFALSE 12447
// begin uc_side = 3 ;
12363: LD_ADDR_OWVAR 20
12367: PUSH
12368: LD_INT 3
12370: ST_TO_ADDR
// uc_nation = 3 ;
12371: LD_ADDR_OWVAR 21
12375: PUSH
12376: LD_INT 3
12378: ST_TO_ADDR
// hc_gallery =  ;
12379: LD_ADDR_OWVAR 33
12383: PUSH
12384: LD_STRING 
12386: ST_TO_ADDR
// hc_name =  ;
12387: LD_ADDR_OWVAR 26
12391: PUSH
12392: LD_STRING 
12394: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12395: LD_INT 0
12397: PPUSH
12398: LD_INT 1
12400: PPUSH
12401: LD_EXP 13
12405: PPUSH
12406: LD_EXP 14
12410: PPUSH
12411: CALL_OW 12
12415: PPUSH
12416: CALL_OW 380
// un = CreateHuman ;
12420: LD_ADDR_VAR 0 3
12424: PUSH
12425: CALL_OW 44
12429: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12430: LD_VAR 0 3
12434: PPUSH
12435: LD_INT 14
12437: PPUSH
12438: LD_INT 0
12440: PPUSH
12441: CALL_OW 49
// end ;
12445: GO 12360
12447: POP
12448: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12449: LD_INT 3
12451: PPUSH
12452: LD_INT 3
12454: PPUSH
12455: LD_INT 2
12457: PPUSH
12458: LD_EXP 13
12462: PPUSH
12463: LD_EXP 14
12467: PPUSH
12468: CALL_OW 12
12472: PPUSH
12473: LD_INT 1
12475: PPUSH
12476: LD_INT 1
12478: PPUSH
12479: LD_INT 2
12481: PPUSH
12482: CALL_OW 12
12486: PUSH
12487: LD_INT 1
12489: PPUSH
12490: LD_INT 3
12492: PPUSH
12493: CALL_OW 12
12497: PUSH
12498: LD_INT 1
12500: PPUSH
12501: LD_INT 3
12503: PPUSH
12504: CALL_OW 12
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: PUSH
12514: LD_OWVAR 67
12518: ARRAY
12519: PPUSH
12520: CALL 8661 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12524: LD_INT 3
12526: PPUSH
12527: LD_INT 3
12529: PPUSH
12530: LD_INT 23
12532: PPUSH
12533: LD_EXP 13
12537: PPUSH
12538: LD_EXP 14
12542: PPUSH
12543: CALL_OW 12
12547: PPUSH
12548: LD_INT 4
12550: PPUSH
12551: LD_INT 0
12553: PUSH
12554: LD_INT 1
12556: PUSH
12557: LD_INT 2
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: PUSH
12565: LD_OWVAR 67
12569: ARRAY
12570: PPUSH
12571: CALL 8661 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12575: LD_INT 3
12577: PPUSH
12578: LD_INT 3
12580: PPUSH
12581: LD_INT 1
12583: PPUSH
12584: LD_EXP 13
12588: PPUSH
12589: LD_EXP 14
12593: PPUSH
12594: CALL_OW 12
12598: PPUSH
12599: LD_INT 2
12601: PPUSH
12602: LD_INT 1
12604: PUSH
12605: LD_INT 2
12607: PUSH
12608: LD_INT 2
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: LIST
12615: PUSH
12616: LD_OWVAR 67
12620: ARRAY
12621: PPUSH
12622: CALL 8661 0 6
// for i in UnitsInside ( arm1 ) do
12626: LD_ADDR_VAR 0 2
12630: PUSH
12631: LD_INT 2
12633: PPUSH
12634: CALL_OW 313
12638: PUSH
12639: FOR_IN
12640: IFFALSE 12660
// northBaseDefenders = northBaseDefenders ^ i ;
12642: LD_ADDR_EXP 24
12646: PUSH
12647: LD_EXP 24
12651: PUSH
12652: LD_VAR 0 2
12656: ADD
12657: ST_TO_ADDR
12658: GO 12639
12660: POP
12661: POP
// end ;
12662: LD_VAR 0 1
12666: RET
// export function PrepareOtherRussians ; var i , un ; begin
12667: LD_INT 0
12669: PPUSH
12670: PPUSH
12671: PPUSH
// for i = 1 to 2 do
12672: LD_ADDR_VAR 0 2
12676: PUSH
12677: DOUBLE
12678: LD_INT 1
12680: DEC
12681: ST_TO_ADDR
12682: LD_INT 2
12684: PUSH
12685: FOR_TO
12686: IFFALSE 12787
// begin uc_side = 3 ;
12688: LD_ADDR_OWVAR 20
12692: PUSH
12693: LD_INT 3
12695: ST_TO_ADDR
// uc_nation = 3 ;
12696: LD_ADDR_OWVAR 21
12700: PUSH
12701: LD_INT 3
12703: ST_TO_ADDR
// hc_gallery =  ;
12704: LD_ADDR_OWVAR 33
12708: PUSH
12709: LD_STRING 
12711: ST_TO_ADDR
// hc_name =  ;
12712: LD_ADDR_OWVAR 26
12716: PUSH
12717: LD_STRING 
12719: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12720: LD_INT 0
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: LD_EXP 13
12730: PPUSH
12731: LD_EXP 14
12735: PPUSH
12736: CALL_OW 12
12740: PPUSH
12741: CALL_OW 380
// un = CreateHuman ;
12745: LD_ADDR_VAR 0 3
12749: PUSH
12750: CALL_OW 44
12754: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12755: LD_VAR 0 3
12759: PPUSH
12760: LD_INT 9
12762: PPUSH
12763: LD_INT 0
12765: PPUSH
12766: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12770: LD_VAR 0 3
12774: PPUSH
12775: LD_INT 80
12777: PPUSH
12778: LD_INT 73
12780: PPUSH
12781: CALL_OW 118
// end ;
12785: GO 12685
12787: POP
12788: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12789: LD_ADDR_VAR 0 2
12793: PUSH
12794: LD_INT 22
12796: PUSH
12797: LD_INT 3
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 30
12806: PUSH
12807: LD_INT 31
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PPUSH
12818: CALL_OW 69
12822: PUSH
12823: FOR_IN
12824: IFFALSE 12852
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12826: LD_EXP 13
12830: PPUSH
12831: LD_EXP 14
12835: PPUSH
12836: CALL_OW 12
12840: PPUSH
12841: LD_VAR 0 2
12845: PPUSH
12846: CALL 8771 0 2
12850: GO 12823
12852: POP
12853: POP
// end ;
12854: LD_VAR 0 1
12858: RET
// export function PrepareCargoBays ; begin
12859: LD_INT 0
12861: PPUSH
// uc_side = 3 ;
12862: LD_ADDR_OWVAR 20
12866: PUSH
12867: LD_INT 3
12869: ST_TO_ADDR
// uc_nation = 3 ;
12870: LD_ADDR_OWVAR 21
12874: PUSH
12875: LD_INT 3
12877: ST_TO_ADDR
// vc_engine = 1 ;
12878: LD_ADDR_OWVAR 39
12882: PUSH
12883: LD_INT 1
12885: ST_TO_ADDR
// vc_control = 1 ;
12886: LD_ADDR_OWVAR 38
12890: PUSH
12891: LD_INT 1
12893: ST_TO_ADDR
// vc_weapon = 51 ;
12894: LD_ADDR_OWVAR 40
12898: PUSH
12899: LD_INT 51
12901: ST_TO_ADDR
// vc_chassis = 22 ;
12902: LD_ADDR_OWVAR 37
12906: PUSH
12907: LD_INT 22
12909: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12910: LD_ADDR_EXP 15
12914: PUSH
12915: CALL_OW 45
12919: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12920: LD_ADDR_EXP 16
12924: PUSH
12925: CALL_OW 45
12929: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12930: LD_EXP 15
12934: PPUSH
12935: LD_INT 13
12937: PPUSH
12938: LD_INT 0
12940: PPUSH
12941: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12945: LD_EXP 16
12949: PPUSH
12950: LD_INT 13
12952: PPUSH
12953: LD_INT 0
12955: PPUSH
12956: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12960: LD_EXP 15
12964: PPUSH
12965: LD_INT 2
12967: PPUSH
12968: LD_INT 70
12970: PUSH
12971: LD_INT 50
12973: PUSH
12974: LD_INT 30
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: LIST
12981: PUSH
12982: LD_OWVAR 67
12986: ARRAY
12987: PPUSH
12988: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12992: LD_EXP 16
12996: PPUSH
12997: LD_INT 2
12999: PPUSH
13000: LD_INT 70
13002: PUSH
13003: LD_INT 50
13005: PUSH
13006: LD_INT 30
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: LIST
13013: PUSH
13014: LD_OWVAR 67
13018: ARRAY
13019: PPUSH
13020: CALL_OW 291
// hc_gallery =  ;
13024: LD_ADDR_OWVAR 33
13028: PUSH
13029: LD_STRING 
13031: ST_TO_ADDR
// hc_name =  ;
13032: LD_ADDR_OWVAR 26
13036: PUSH
13037: LD_STRING 
13039: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13040: LD_INT 1
13042: PPUSH
13043: LD_INT 3
13045: PPUSH
13046: LD_INT 1
13048: PPUSH
13049: LD_INT 2
13051: PPUSH
13052: CALL_OW 12
13056: PPUSH
13057: CALL_OW 380
// driver1 = CreateHuman ;
13061: LD_ADDR_EXP 17
13065: PUSH
13066: CALL_OW 44
13070: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13071: LD_EXP 17
13075: PPUSH
13076: LD_EXP 15
13080: PPUSH
13081: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13085: LD_ADDR_OWVAR 26
13089: PUSH
13090: LD_STRING Nikolai Andreyev
13092: ST_TO_ADDR
// driver2 = CreateHuman ;
13093: LD_ADDR_EXP 18
13097: PUSH
13098: CALL_OW 44
13102: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13103: LD_EXP 18
13107: PPUSH
13108: LD_EXP 16
13112: PPUSH
13113: CALL_OW 52
// end ;
13117: LD_VAR 0 1
13121: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
13122: LD_INT 0
13124: PPUSH
13125: PPUSH
13126: PPUSH
13127: PPUSH
13128: PPUSH
13129: PPUSH
13130: PPUSH
// uc_side = 3 ;
13131: LD_ADDR_OWVAR 20
13135: PUSH
13136: LD_INT 3
13138: ST_TO_ADDR
// uc_nation = 3 ;
13139: LD_ADDR_OWVAR 21
13143: PUSH
13144: LD_INT 3
13146: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13147: LD_ADDR_VAR 0 4
13151: PUSH
13152: DOUBLE
13153: LD_INT 1
13155: DEC
13156: ST_TO_ADDR
13157: LD_VAR 0 1
13161: PUSH
13162: LD_INT 1
13164: PPUSH
13165: LD_INT 3
13167: PPUSH
13168: CALL_OW 12
13172: PLUS
13173: PUSH
13174: FOR_TO
13175: IFFALSE 13352
// begin vc_engine = 1 ;
13177: LD_ADDR_OWVAR 39
13181: PUSH
13182: LD_INT 1
13184: ST_TO_ADDR
// vc_control = 1 ;
13185: LD_ADDR_OWVAR 38
13189: PUSH
13190: LD_INT 1
13192: ST_TO_ADDR
// vc_weapon = 42 ;
13193: LD_ADDR_OWVAR 40
13197: PUSH
13198: LD_INT 42
13200: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13201: LD_ADDR_OWVAR 37
13205: PUSH
13206: LD_INT 21
13208: PUSH
13209: LD_INT 22
13211: PUSH
13212: LD_INT 22
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: LIST
13219: PUSH
13220: LD_OWVAR 67
13224: ARRAY
13225: ST_TO_ADDR
// veh = CreateVehicle ;
13226: LD_ADDR_VAR 0 5
13230: PUSH
13231: CALL_OW 45
13235: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13236: LD_VAR 0 5
13240: PPUSH
13241: LD_VAR 0 2
13245: PPUSH
13246: LD_INT 0
13248: PPUSH
13249: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13253: LD_ADDR_EXP 26
13257: PUSH
13258: LD_EXP 26
13262: PUSH
13263: LD_VAR 0 5
13267: ADD
13268: ST_TO_ADDR
// hc_gallery =  ;
13269: LD_ADDR_OWVAR 33
13273: PUSH
13274: LD_STRING 
13276: ST_TO_ADDR
// hc_name =  ;
13277: LD_ADDR_OWVAR 26
13281: PUSH
13282: LD_STRING 
13284: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13285: LD_INT 0
13287: PPUSH
13288: LD_INT 3
13290: PPUSH
13291: LD_EXP 13
13295: PPUSH
13296: LD_EXP 14
13300: PPUSH
13301: CALL_OW 12
13305: PPUSH
13306: CALL_OW 380
// un = CreateHuman ;
13310: LD_ADDR_VAR 0 6
13314: PUSH
13315: CALL_OW 44
13319: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13320: LD_VAR 0 6
13324: PPUSH
13325: LD_VAR 0 5
13329: PPUSH
13330: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13334: LD_ADDR_EXP 26
13338: PUSH
13339: LD_EXP 26
13343: PUSH
13344: LD_VAR 0 6
13348: ADD
13349: ST_TO_ADDR
// end ;
13350: GO 13174
13352: POP
13353: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13354: LD_INT 0
13356: PPUSH
13357: LD_INT 2
13359: PPUSH
13360: LD_EXP 13
13364: PPUSH
13365: LD_EXP 14
13369: PPUSH
13370: CALL_OW 12
13374: PPUSH
13375: CALL_OW 380
// un = CreateHuman ;
13379: LD_ADDR_VAR 0 6
13383: PUSH
13384: CALL_OW 44
13388: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13389: LD_ADDR_VAR 0 4
13393: PUSH
13394: DOUBLE
13395: LD_INT 1
13397: DEC
13398: ST_TO_ADDR
13399: LD_VAR 0 1
13403: PUSH
13404: LD_INT 2
13406: PUSH
13407: LD_INT 2
13409: MUL
13410: PLUS
13411: PUSH
13412: FOR_TO
13413: IFFALSE 13501
// begin hc_gallery =  ;
13415: LD_ADDR_OWVAR 33
13419: PUSH
13420: LD_STRING 
13422: ST_TO_ADDR
// hc_name =  ;
13423: LD_ADDR_OWVAR 26
13427: PUSH
13428: LD_STRING 
13430: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13431: LD_INT 1
13433: PPUSH
13434: LD_INT 1
13436: PPUSH
13437: LD_EXP 13
13441: PPUSH
13442: LD_EXP 14
13446: PPUSH
13447: CALL_OW 12
13451: PPUSH
13452: CALL_OW 380
// un = CreateHuman ;
13456: LD_ADDR_VAR 0 6
13460: PUSH
13461: CALL_OW 44
13465: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13466: LD_VAR 0 6
13470: PPUSH
13471: LD_VAR 0 2
13475: PPUSH
13476: LD_INT 0
13478: PPUSH
13479: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13483: LD_ADDR_EXP 26
13487: PUSH
13488: LD_EXP 26
13492: PUSH
13493: LD_VAR 0 6
13497: ADD
13498: ST_TO_ADDR
// end ;
13499: GO 13412
13501: POP
13502: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13503: LD_ADDR_VAR 0 7
13507: PUSH
13508: LD_INT 26
13510: PPUSH
13511: LD_INT 22
13513: PUSH
13514: LD_INT 3
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 21
13523: PUSH
13524: LD_INT 1
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 26
13533: PUSH
13534: LD_INT 1
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: PPUSH
13546: CALL_OW 70
13550: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13551: LD_VAR 0 7
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PPUSH
13560: LD_STRING D9-Rus3-1
13562: PPUSH
13563: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13567: LD_VAR 0 7
13571: PUSH
13572: LD_INT 2
13574: ARRAY
13575: PPUSH
13576: LD_STRING D9-Russ-1
13578: PPUSH
13579: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13583: LD_INT 35
13585: PPUSH
13586: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13590: LD_ADDR_VAR 0 4
13594: PUSH
13595: LD_INT 26
13597: PPUSH
13598: LD_INT 22
13600: PUSH
13601: LD_INT 3
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: PPUSH
13611: CALL_OW 70
13615: PUSH
13616: FOR_IN
13617: IFFALSE 13789
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13619: LD_ADDR_VAR 0 8
13623: PUSH
13624: LD_INT 22
13626: PUSH
13627: LD_INT 1
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PPUSH
13634: CALL_OW 69
13638: PPUSH
13639: LD_VAR 0 4
13643: PPUSH
13644: CALL_OW 74
13648: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13649: LD_ADDR_VAR 0 9
13653: PUSH
13654: LD_INT 22
13656: PUSH
13657: LD_INT 1
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: LD_INT 59
13669: PUSH
13670: EMPTY
13671: LIST
13672: PUSH
13673: LD_INT 21
13675: PUSH
13676: LD_INT 1
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 21
13685: PUSH
13686: LD_INT 2
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: PPUSH
13706: CALL_OW 69
13710: PPUSH
13711: LD_VAR 0 4
13715: PPUSH
13716: CALL_OW 74
13720: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13721: LD_VAR 0 4
13725: PPUSH
13726: LD_VAR 0 8
13730: PPUSH
13731: CALL_OW 296
13735: PUSH
13736: LD_INT 8
13738: PLUS
13739: PUSH
13740: LD_VAR 0 4
13744: PPUSH
13745: LD_VAR 0 9
13749: PPUSH
13750: CALL_OW 296
13754: LESS
13755: IFFALSE 13773
// begin ComAttackUnit ( i , target1 ) ;
13757: LD_VAR 0 4
13761: PPUSH
13762: LD_VAR 0 8
13766: PPUSH
13767: CALL_OW 115
// end else
13771: GO 13787
// begin ComAttackUnit ( i , target2 ) ;
13773: LD_VAR 0 4
13777: PPUSH
13778: LD_VAR 0 9
13782: PPUSH
13783: CALL_OW 115
// end ; end ;
13787: GO 13616
13789: POP
13790: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13791: LD_INT 26
13793: PPUSH
13794: LD_INT 22
13796: PUSH
13797: LD_INT 3
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: LD_INT 2
13806: PUSH
13807: LD_INT 21
13809: PUSH
13810: LD_INT 1
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PUSH
13817: LD_INT 21
13819: PUSH
13820: LD_INT 2
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PUSH
13827: LD_INT 59
13829: PUSH
13830: EMPTY
13831: LIST
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PPUSH
13843: CALL_OW 70
13847: PUSH
13848: LD_INT 0
13850: EQUAL
13851: IFFALSE 13583
// end ; end_of_file
13853: LD_VAR 0 3
13857: RET
// every 0 0$1 do
13858: GO 13860
13860: DISABLE
// begin enable ;
13861: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13862: LD_INT 3
13864: PPUSH
13865: LD_INT 1
13867: PPUSH
13868: LD_INT 22
13870: PPUSH
13871: CALL 8907 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13875: LD_INT 3
13877: PPUSH
13878: LD_INT 20
13880: PPUSH
13881: LD_INT 22
13883: PPUSH
13884: LD_INT 23
13886: PPUSH
13887: CALL 9153 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13891: LD_INT 3
13893: PPUSH
13894: LD_INT 21
13896: PPUSH
13897: LD_INT 23
13899: PPUSH
13900: CALL 9430 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13904: LD_INT 22
13906: PPUSH
13907: LD_INT 1
13909: PPUSH
13910: LD_EXP 24
13914: PPUSH
13915: LD_INT 2
13917: PPUSH
13918: LD_INT 3
13920: PPUSH
13921: CALL 9902 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13925: LD_INT 23
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: LD_EXP 25
13935: PPUSH
13936: LD_INT 33
13938: PPUSH
13939: LD_INT 1
13941: PPUSH
13942: CALL 9902 0 5
// end ; end_of_file
13946: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13947: LD_VAR 0 1
13951: PPUSH
13952: CALL_OW 255
13956: PUSH
13957: LD_INT 1
13959: EQUAL
13960: PUSH
13961: LD_VAR 0 1
13965: PPUSH
13966: CALL_OW 247
13970: PUSH
13971: LD_INT 1
13973: EQUAL
13974: AND
13975: IFFALSE 13991
// deadsCounter = deadsCounter + 1 ;
13977: LD_ADDR_EXP 31
13981: PUSH
13982: LD_EXP 31
13986: PUSH
13987: LD_INT 1
13989: PLUS
13990: ST_TO_ADDR
// end ;
13991: PPOPN 1
13993: END
// on Command ( comandid ) do var i , j , tmp ;
13994: LD_INT 0
13996: PPUSH
13997: PPUSH
13998: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13999: LD_ADDR_VAR 0 2
14003: PUSH
14004: LD_INT 22
14006: PUSH
14007: LD_INT 1
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PUSH
14014: LD_INT 21
14016: PUSH
14017: LD_INT 2
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PPUSH
14028: CALL_OW 69
14032: PUSH
14033: FOR_IN
14034: IFFALSE 14159
// begin if GetTaskList ( i ) > 0 then
14036: LD_VAR 0 2
14040: PPUSH
14041: CALL_OW 437
14045: PUSH
14046: LD_INT 0
14048: GREATER
14049: IFFALSE 14157
// begin for j = 1 to GetTaskList ( i ) do
14051: LD_ADDR_VAR 0 3
14055: PUSH
14056: DOUBLE
14057: LD_INT 1
14059: DEC
14060: ST_TO_ADDR
14061: LD_VAR 0 2
14065: PPUSH
14066: CALL_OW 437
14070: PUSH
14071: FOR_TO
14072: IFFALSE 14155
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14074: LD_ADDR_VAR 0 4
14078: PUSH
14079: LD_VAR 0 2
14083: PPUSH
14084: CALL_OW 437
14088: PUSH
14089: LD_VAR 0 3
14093: ARRAY
14094: PUSH
14095: LD_INT 4
14097: ARRAY
14098: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14099: LD_VAR 0 4
14103: PPUSH
14104: CALL_OW 255
14108: PUSH
14109: LD_INT 3
14111: EQUAL
14112: PUSH
14113: LD_VAR 0 4
14117: PPUSH
14118: CALL_OW 247
14122: PUSH
14123: LD_INT 2
14125: EQUAL
14126: AND
14127: PUSH
14128: LD_VAR 0 4
14132: PPUSH
14133: CALL_OW 264
14137: PUSH
14138: LD_INT 51
14140: EQUAL
14141: AND
14142: IFFALSE 14153
// ComStop ( i ) ;
14144: LD_VAR 0 2
14148: PPUSH
14149: CALL_OW 141
// end ;
14153: GO 14071
14155: POP
14156: POP
// end ; end ;
14157: GO 14033
14159: POP
14160: POP
// end ;
14161: PPOPN 4
14163: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14164: LD_VAR 0 2
14168: PUSH
14169: LD_EXP 8
14173: EQUAL
14174: PUSH
14175: LD_EXP 21
14179: PUSH
14180: LD_INT 4
14182: NONEQUAL
14183: AND
14184: IFFALSE 14190
// AskMikhail ;
14186: CALL 7244 0 0
// end ; end_of_file
14190: PPOPN 2
14192: END
// every 0 0$1 trigger IsDead ( JMM ) do
14193: LD_EXP 1
14197: PPUSH
14198: CALL_OW 301
14202: IFFALSE 14214
14204: GO 14206
14206: DISABLE
// YouLost ( JMM ) ;
14207: LD_STRING JMM
14209: PPUSH
14210: CALL_OW 104
14214: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
14215: LD_INT 1
14217: PPUSH
14218: CALL_OW 301
14222: PUSH
14223: LD_INT 10
14225: PPUSH
14226: CALL_OW 301
14230: OR
14231: IFFALSE 14243
14233: GO 14235
14235: DISABLE
// YouLost ( DepotDestroyed ) ;
14236: LD_STRING DepotDestroyed
14238: PPUSH
14239: CALL_OW 104
14243: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14244: LD_INT 22
14246: PUSH
14247: LD_INT 1
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 21
14256: PUSH
14257: LD_INT 1
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: LD_INT 25
14266: PUSH
14267: LD_INT 2
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: PPUSH
14279: CALL_OW 69
14283: PUSH
14284: LD_INT 0
14286: EQUAL
14287: PUSH
14288: LD_INT 22
14290: PUSH
14291: LD_INT 4
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 21
14300: PUSH
14301: LD_INT 1
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 25
14310: PUSH
14311: LD_INT 2
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 69
14327: PUSH
14328: LD_INT 0
14330: EQUAL
14331: AND
14332: PUSH
14333: LD_INT 1
14335: PPUSH
14336: CALL_OW 255
14340: PUSH
14341: LD_INT 3
14343: EQUAL
14344: AND
14345: PUSH
14346: LD_INT 10
14348: PPUSH
14349: CALL_OW 255
14353: PUSH
14354: LD_INT 3
14356: EQUAL
14357: AND
14358: IFFALSE 14370
14360: GO 14362
14362: DISABLE
// YouLost ( Engineer ) ;
14363: LD_STRING Engineer
14365: PPUSH
14366: CALL_OW 104
14370: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14371: LD_INT 1
14373: PPUSH
14374: CALL_OW 255
14378: PUSH
14379: LD_INT 3
14381: EQUAL
14382: PUSH
14383: LD_EXP 27
14387: PUSH
14388: LD_INT 1
14390: EQUAL
14391: AND
14392: IFFALSE 14404
14394: GO 14396
14396: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14397: LD_STRING DepotCaptured
14399: PPUSH
14400: CALL_OW 104
14404: END
// export function PrepareTigers ; var i , un ; begin
14405: LD_INT 0
14407: PPUSH
14408: PPUSH
14409: PPUSH
// for i = 1 to Difficulty do
14410: LD_ADDR_VAR 0 2
14414: PUSH
14415: DOUBLE
14416: LD_INT 1
14418: DEC
14419: ST_TO_ADDR
14420: LD_OWVAR 67
14424: PUSH
14425: FOR_TO
14426: IFFALSE 14561
// begin hc_sex = sex_male ;
14428: LD_ADDR_OWVAR 27
14432: PUSH
14433: LD_INT 1
14435: ST_TO_ADDR
// uc_side = 0 ;
14436: LD_ADDR_OWVAR 20
14440: PUSH
14441: LD_INT 0
14443: ST_TO_ADDR
// uc_nation = nation_nature ;
14444: LD_ADDR_OWVAR 21
14448: PUSH
14449: LD_INT 0
14451: ST_TO_ADDR
// hc_class = class_tiger ;
14452: LD_ADDR_OWVAR 28
14456: PUSH
14457: LD_INT 14
14459: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14460: LD_ADDR_OWVAR 31
14464: PUSH
14465: LD_EXP 14
14469: PUSH
14470: LD_INT 0
14472: PUSH
14473: LD_INT 0
14475: PUSH
14476: LD_INT 0
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14485: LD_ADDR_OWVAR 35
14489: PUSH
14490: LD_INT 30
14492: PPUSH
14493: LD_INT 40
14495: PPUSH
14496: CALL_OW 12
14500: PUSH
14501: LD_INT 40
14503: PPUSH
14504: LD_INT 50
14506: PPUSH
14507: CALL_OW 12
14511: PUSH
14512: LD_INT 50
14514: PPUSH
14515: LD_INT 60
14517: PPUSH
14518: CALL_OW 12
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: LIST
14527: PUSH
14528: LD_OWVAR 67
14532: ARRAY
14533: ST_TO_ADDR
// un = CreateHuman ;
14534: LD_ADDR_VAR 0 3
14538: PUSH
14539: CALL_OW 44
14543: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14544: LD_VAR 0 3
14548: PPUSH
14549: LD_INT 27
14551: PPUSH
14552: LD_INT 0
14554: PPUSH
14555: CALL_OW 49
// end ;
14559: GO 14425
14561: POP
14562: POP
// end ; end_of_file
14563: LD_VAR 0 1
14567: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14568: LD_INT 1
14570: PPUSH
14571: CALL_OW 255
14575: PUSH
14576: LD_INT 1
14578: EQUAL
14579: PUSH
14580: LD_INT 10
14582: PPUSH
14583: CALL_OW 255
14587: PUSH
14588: LD_INT 1
14590: EQUAL
14591: AND
14592: PUSH
14593: LD_EXP 20
14597: PUSH
14598: LD_INT 1
14600: EQUAL
14601: AND
14602: PUSH
14603: LD_INT 22
14605: PUSH
14606: LD_INT 3
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PUSH
14613: LD_INT 21
14615: PUSH
14616: LD_INT 2
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 34
14625: PUSH
14626: LD_INT 51
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: LD_INT 3
14635: PUSH
14636: LD_INT 58
14638: PUSH
14639: EMPTY
14640: LIST
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: PPUSH
14652: CALL_OW 69
14656: PUSH
14657: LD_INT 0
14659: EQUAL
14660: AND
14661: IFFALSE 14752
14663: GO 14665
14665: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14666: LD_INT 9450
14668: PUSH
14669: LD_INT 8400
14671: PUSH
14672: LD_INT 6300
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: LIST
14679: PUSH
14680: LD_OWVAR 67
14684: ARRAY
14685: PPUSH
14686: CALL_OW 67
// if cargoEscape = 1 then
14690: LD_EXP 20
14694: PUSH
14695: LD_INT 1
14697: EQUAL
14698: IFFALSE 14752
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14700: LD_EXP 9
14704: PPUSH
14705: LD_STRING D6-Pow-1
14707: PPUSH
14708: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14712: LD_EXP 1
14716: PPUSH
14717: LD_STRING D6-JMM-1
14719: PPUSH
14720: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14724: LD_EXP 9
14728: PPUSH
14729: LD_STRING D6-Pow-2
14731: PPUSH
14732: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14736: LD_EXP 1
14740: PPUSH
14741: LD_STRING D6-JMM-2
14743: PPUSH
14744: CALL_OW 88
// FinishMission ;
14748: CALL 14960 0 0
// end ; end ;
14752: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14753: LD_INT 1
14755: PPUSH
14756: CALL_OW 255
14760: PUSH
14761: LD_INT 1
14763: EQUAL
14764: PUSH
14765: LD_INT 10
14767: PPUSH
14768: CALL_OW 255
14772: PUSH
14773: LD_INT 1
14775: EQUAL
14776: AND
14777: PUSH
14778: LD_EXP 20
14782: PUSH
14783: LD_INT 1
14785: GREATER
14786: AND
14787: IFFALSE 14854
14789: GO 14791
14791: DISABLE
14792: LD_INT 0
14794: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14795: LD_INT 11550
14797: PUSH
14798: LD_INT 10500
14800: PUSH
14801: LD_INT 9450
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: LIST
14808: PUSH
14809: LD_OWVAR 67
14813: ARRAY
14814: PPUSH
14815: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14819: LD_INT 1
14821: PUSH
14822: LD_INT 2
14824: PUSH
14825: LD_INT 3
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: LIST
14832: PUSH
14833: LD_OWVAR 67
14837: ARRAY
14838: PPUSH
14839: LD_INT 13
14841: PPUSH
14842: CALL 13122 0 2
// lastBattle = 1 ;
14846: LD_ADDR_EXP 27
14850: PUSH
14851: LD_INT 1
14853: ST_TO_ADDR
// end ;
14854: PPOPN 1
14856: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14857: LD_EXP 27
14861: PUSH
14862: LD_INT 1
14864: EQUAL
14865: PUSH
14866: LD_INT 26
14868: PPUSH
14869: LD_INT 22
14871: PUSH
14872: LD_INT 3
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 21
14881: PUSH
14882: LD_INT 1
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PPUSH
14893: CALL_OW 70
14897: PUSH
14898: LD_INT 0
14900: EQUAL
14901: AND
14902: IFFALSE 14959
14904: GO 14906
14906: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14907: LD_EXP 9
14911: PPUSH
14912: LD_STRING D6-Pow-1
14914: PPUSH
14915: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14919: LD_EXP 1
14923: PPUSH
14924: LD_STRING D6-JMM-1
14926: PPUSH
14927: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14931: LD_EXP 9
14935: PPUSH
14936: LD_STRING D6-Pow-2
14938: PPUSH
14939: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14943: LD_EXP 1
14947: PPUSH
14948: LD_STRING D6-JMM-2
14950: PPUSH
14951: CALL_OW 88
// FinishMission ;
14955: CALL 14960 0 0
// end ;
14959: END
// export function FinishMission ; var tmp ; begin
14960: LD_INT 0
14962: PPUSH
14963: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14964: LD_ADDR_VAR 0 2
14968: PUSH
14969: LD_INT 22
14971: PUSH
14972: LD_INT 1
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 21
14981: PUSH
14982: LD_INT 2
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 24
14991: PUSH
14992: LD_INT 251
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: LIST
15003: PPUSH
15004: CALL_OW 69
15008: ST_TO_ADDR
// if tmp then
15009: LD_VAR 0 2
15013: IFFALSE 15027
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15015: LD_VAR 0 2
15019: PPUSH
15020: LD_STRING 02_tanks_1
15022: PPUSH
15023: CALL 10607 0 2
// if mikhailStatus = 1 then
15027: LD_EXP 21
15031: PUSH
15032: LD_INT 1
15034: EQUAL
15035: IFFALSE 15049
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15037: LD_EXP 21
15041: PPUSH
15042: LD_STRING 02_mikhailStatus_1
15044: PPUSH
15045: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15049: LD_INT 1
15051: PPUSH
15052: CALL_OW 274
15056: PPUSH
15057: LD_INT 1
15059: PPUSH
15060: CALL_OW 275
15064: PPUSH
15065: LD_STRING 02_resources_4
15067: PPUSH
15068: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15072: LD_INT 1
15074: PPUSH
15075: CALL_OW 274
15079: PPUSH
15080: LD_INT 1
15082: PPUSH
15083: CALL_OW 275
15087: PUSH
15088: LD_INT 200
15090: GREATEREQUAL
15091: IFFALSE 15105
// begin AddMedal ( Cans , 1 ) ;
15093: LD_STRING Cans
15095: PPUSH
15096: LD_INT 1
15098: PPUSH
15099: CALL_OW 101
// end else
15103: GO 15116
// begin AddMedal ( Cans , - 1 ) ;
15105: LD_STRING Cans
15107: PPUSH
15108: LD_INT 1
15110: NEG
15111: PPUSH
15112: CALL_OW 101
// end ; if deadsCounter < 2 then
15116: LD_EXP 31
15120: PUSH
15121: LD_INT 2
15123: LESS
15124: IFFALSE 15138
// begin AddMedal ( Deaths , 1 ) ;
15126: LD_STRING Deaths
15128: PPUSH
15129: LD_INT 1
15131: PPUSH
15132: CALL_OW 101
// end else
15136: GO 15149
// begin AddMedal ( Deaths , - 1 ) ;
15138: LD_STRING Deaths
15140: PPUSH
15141: LD_INT 1
15143: NEG
15144: PPUSH
15145: CALL_OW 101
// end ; if mikhailStatus = 0 then
15149: LD_EXP 21
15153: PUSH
15154: LD_INT 0
15156: EQUAL
15157: IFFALSE 15170
// AddMedal ( Prisoner , - 1 ) ;
15159: LD_STRING Prisoner
15161: PPUSH
15162: LD_INT 1
15164: NEG
15165: PPUSH
15166: CALL_OW 101
// if mikhailStatus = 1 then
15170: LD_EXP 21
15174: PUSH
15175: LD_INT 1
15177: EQUAL
15178: IFFALSE 15190
// AddMedal ( Prisoner , 1 ) ;
15180: LD_STRING Prisoner
15182: PPUSH
15183: LD_INT 1
15185: PPUSH
15186: CALL_OW 101
// if mikhailStatus = 2 then
15190: LD_EXP 21
15194: PUSH
15195: LD_INT 2
15197: EQUAL
15198: IFFALSE 15210
// AddMedal ( Prisoner , 2 ) ;
15200: LD_STRING Prisoner
15202: PPUSH
15203: LD_INT 2
15205: PPUSH
15206: CALL_OW 101
// if mikhailStatus = 3 then
15210: LD_EXP 21
15214: PUSH
15215: LD_INT 3
15217: EQUAL
15218: IFFALSE 15231
// AddMedal ( Prisoner , - 2 ) ;
15220: LD_STRING Prisoner
15222: PPUSH
15223: LD_INT 2
15225: NEG
15226: PPUSH
15227: CALL_OW 101
// GiveMedals ( MAIN ) ;
15231: LD_STRING MAIN
15233: PPUSH
15234: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15238: LD_INT 22
15240: PUSH
15241: LD_INT 1
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 23
15250: PUSH
15251: LD_INT 1
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PUSH
15258: LD_INT 21
15260: PUSH
15261: LD_INT 1
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: LIST
15272: PPUSH
15273: CALL_OW 69
15277: PPUSH
15278: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15282: LD_EXP 1
15286: PPUSH
15287: LD_EXP 33
15291: PUSH
15292: LD_STRING JMM
15294: STR
15295: PPUSH
15296: CALL_OW 38
// if IsOK ( Bobby ) then
15300: LD_EXP 2
15304: PPUSH
15305: CALL_OW 302
15309: IFFALSE 15329
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15311: LD_EXP 2
15315: PPUSH
15316: LD_EXP 33
15320: PUSH
15321: LD_STRING Bobby
15323: STR
15324: PPUSH
15325: CALL_OW 38
// if IsOK ( Cyrus ) then
15329: LD_EXP 3
15333: PPUSH
15334: CALL_OW 302
15338: IFFALSE 15358
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15340: LD_EXP 3
15344: PPUSH
15345: LD_EXP 33
15349: PUSH
15350: LD_STRING Cyrus
15352: STR
15353: PPUSH
15354: CALL_OW 38
// if IsOK ( Lisa ) then
15358: LD_EXP 4
15362: PPUSH
15363: CALL_OW 302
15367: IFFALSE 15387
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15369: LD_EXP 4
15373: PPUSH
15374: LD_EXP 33
15378: PUSH
15379: LD_STRING Lisa
15381: STR
15382: PPUSH
15383: CALL_OW 38
// if IsOK ( Khatam ) then
15387: LD_EXP 5
15391: PPUSH
15392: CALL_OW 302
15396: IFFALSE 15416
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15398: LD_EXP 5
15402: PPUSH
15403: LD_EXP 33
15407: PUSH
15408: LD_STRING Khatam
15410: STR
15411: PPUSH
15412: CALL_OW 38
// if IsOK ( Brian ) then
15416: LD_EXP 6
15420: PPUSH
15421: CALL_OW 302
15425: IFFALSE 15445
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15427: LD_EXP 6
15431: PPUSH
15432: LD_EXP 33
15436: PUSH
15437: LD_STRING Brian
15439: STR
15440: PPUSH
15441: CALL_OW 38
// if IsOk ( Jerry ) then
15445: LD_EXP 7
15449: PPUSH
15450: CALL_OW 302
15454: IFFALSE 15474
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15456: LD_EXP 7
15460: PPUSH
15461: LD_EXP 33
15465: PUSH
15466: LD_STRING Jerry
15468: STR
15469: PPUSH
15470: CALL_OW 38
// if mikhailStatus = 1 then
15474: LD_EXP 21
15478: PUSH
15479: LD_INT 1
15481: EQUAL
15482: IFFALSE 15502
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15484: LD_EXP 8
15488: PPUSH
15489: LD_EXP 33
15493: PUSH
15494: LD_STRING Mikhail
15496: STR
15497: PPUSH
15498: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15502: LD_INT 50
15504: PUSH
15505: EMPTY
15506: LIST
15507: PUSH
15508: LD_INT 22
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 21
15520: PUSH
15521: LD_INT 1
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: LIST
15532: PPUSH
15533: CALL_OW 69
15537: PUSH
15538: LD_EXP 1
15542: PUSH
15543: LD_EXP 2
15547: PUSH
15548: LD_EXP 3
15552: PUSH
15553: LD_EXP 4
15557: PUSH
15558: LD_EXP 5
15562: PUSH
15563: LD_EXP 6
15567: PUSH
15568: LD_EXP 7
15572: PUSH
15573: LD_EXP 8
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: DIFF
15588: PPUSH
15589: LD_STRING 02_other_survivors
15591: PPUSH
15592: CALL_OW 38
// YouWin ;
15596: CALL_OW 103
// end ;
15600: LD_VAR 0 1
15604: RET
