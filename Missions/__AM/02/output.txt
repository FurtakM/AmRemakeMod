// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; starting begin RuSoldMinLevel = 0 ;
   0: LD_ADDR_EXP 13
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
   8: LD_ADDR_EXP 14
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// hpJMM = 0 ;
  16: LD_ADDR_EXP 10
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpBobby = 0 ;
  24: LD_ADDR_EXP 11
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpCyrus = 0 ;
  32: LD_ADDR_EXP 12
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// cargoEscape = 0 ;
  40: LD_ADDR_EXP 20
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// mikhailStatus = 0 ;
  48: LD_ADDR_EXP 21
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailInBase = 0 ;
  56: LD_ADDR_EXP 22
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailDepot = 0 ;
  64: LD_ADDR_EXP 23
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// tigersRespawn = 0 ;
  72: LD_ADDR_EXP 29
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// cargoRespawn = 0 ;
  80: LD_ADDR_EXP 28
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// lastBattle = 0 ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// deadsCounter = 0 ;
  96: LD_ADDR_EXP 30
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// spotCorpses = 0 ;
 104: LD_ADDR_EXP 31
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 112: LD_ADDR_EXP 25
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// attackGroup = [ ] ;
 126: LD_ADDR_EXP 26
 130: PUSH
 131: EMPTY
 132: ST_TO_ADDR
// RandomizeAll ;
 133: CALL_OW 11
// InGameOn ;
 137: CALL_OW 8
// Resetfog ;
 141: CALL_OW 335
// PrepareDifficulty ;
 145: CALL 10083 0 0
// PrepareRussianCommander ;
 149: CALL 11302 0 0
// PrepareSouthBase ;
 153: CALL 11385 0 0
// PrepareNorthBase ;
 157: CALL 11742 0 0
// PrepareOtherRussians ;
 161: CALL 12108 0 0
// PrepareHeroes ;
 165: CALL 10398 0 0
// PrepareLisSquad ;
 169: CALL 10641 0 0
// PrepareOtherAmericans ;
 173: CALL 10869 0 0
// end ; end_of_file
 177: END
// every 1 do var tmp ;
 178: GO 180
 180: DISABLE
 181: LD_INT 0
 183: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 184: LD_EXP 1
 188: PPUSH
 189: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 193: LD_ADDR_VAR 0 1
 197: PUSH
 198: LD_INT 22
 200: PUSH
 201: LD_INT 4
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: PPUSH
 222: CALL_OW 69
 226: PUSH
 227: LD_EXP 4
 231: PUSH
 232: EMPTY
 233: LIST
 234: DIFF
 235: ST_TO_ADDR
// if Cyrus and Bobby then
 236: LD_EXP 3
 240: PUSH
 241: LD_EXP 2
 245: AND
 246: IFFALSE 576
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 248: LD_EXP 3
 252: PPUSH
 253: LD_INT 43
 255: PPUSH
 256: LD_INT 72
 258: PPUSH
 259: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 263: LD_EXP 2
 267: PPUSH
 268: LD_INT 44
 270: PPUSH
 271: LD_INT 70
 273: PPUSH
 274: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 278: LD_EXP 1
 282: PPUSH
 283: LD_INT 46
 285: PPUSH
 286: LD_INT 73
 288: PPUSH
 289: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 293: LD_EXP 3
 297: PPUSH
 298: LD_STRING D1a-Cyrus-1
 300: PPUSH
 301: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 305: LD_EXP 1
 309: PPUSH
 310: LD_STRING D1a-JMM-1
 312: PPUSH
 313: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 317: LD_EXP 3
 321: PPUSH
 322: LD_INT 37
 324: PPUSH
 325: LD_INT 66
 327: PPUSH
 328: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 332: LD_EXP 2
 336: PPUSH
 337: LD_INT 41
 339: PPUSH
 340: LD_INT 67
 342: PPUSH
 343: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 347: LD_EXP 1
 351: PPUSH
 352: LD_INT 38
 354: PPUSH
 355: LD_INT 64
 357: PPUSH
 358: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 362: LD_EXP 2
 366: PPUSH
 367: LD_STRING D1a-Bobby-2
 369: PPUSH
 370: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 374: LD_EXP 3
 378: PPUSH
 379: LD_INT 35
 381: PPUSH
 382: LD_INT 62
 384: PPUSH
 385: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 389: LD_EXP 2
 393: PPUSH
 394: LD_INT 32
 396: PPUSH
 397: LD_INT 60
 399: PPUSH
 400: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 404: LD_EXP 1
 408: PPUSH
 409: LD_INT 35
 411: PPUSH
 412: LD_INT 60
 414: PPUSH
 415: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 419: LD_EXP 1
 423: PPUSH
 424: LD_STRING D1a-JMM-2
 426: PPUSH
 427: CALL_OW 88
// ComWalk ( Lisa ) ;
 431: LD_EXP 4
 435: PPUSH
 436: CALL_OW 138
// wait ( 0 0$1 ) ;
 440: LD_INT 35
 442: PPUSH
 443: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 447: LD_EXP 4
 451: PPUSH
 452: LD_EXP 1
 456: PPUSH
 457: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 461: LD_EXP 1
 465: PUSH
 466: LD_EXP 3
 470: PUSH
 471: LD_EXP 2
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: PPUSH
 481: LD_EXP 4
 485: PPUSH
 486: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 490: LD_VAR 0 1
 494: PUSH
 495: LD_INT 1
 497: ARRAY
 498: PPUSH
 499: LD_INT 33
 501: PPUSH
 502: LD_INT 55
 504: PPUSH
 505: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 509: LD_VAR 0 1
 513: PUSH
 514: LD_INT 2
 516: ARRAY
 517: PPUSH
 518: LD_INT 30
 520: PPUSH
 521: LD_INT 54
 523: PPUSH
 524: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 528: LD_VAR 0 1
 532: PUSH
 533: LD_INT 1
 535: ARRAY
 536: PPUSH
 537: LD_EXP 1
 541: PPUSH
 542: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 546: LD_VAR 0 1
 550: PUSH
 551: LD_INT 2
 553: ARRAY
 554: PPUSH
 555: LD_EXP 1
 559: PPUSH
 560: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 564: LD_EXP 4
 568: PPUSH
 569: LD_STRING D1a-Lisa-2
 571: PPUSH
 572: CALL_OW 88
// end ; if Cyrus and not Bobby then
 576: LD_EXP 3
 580: PUSH
 581: LD_EXP 2
 585: NOT
 586: AND
 587: IFFALSE 792
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 589: LD_EXP 3
 593: PPUSH
 594: LD_INT 43
 596: PPUSH
 597: LD_INT 72
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 604: LD_EXP 1
 608: PPUSH
 609: LD_INT 46
 611: PPUSH
 612: LD_INT 73
 614: PPUSH
 615: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 619: LD_EXP 3
 623: PPUSH
 624: LD_STRING D1a-Cyrus-1
 626: PPUSH
 627: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 631: LD_EXP 1
 635: PPUSH
 636: LD_STRING D1a-JMM-1
 638: PPUSH
 639: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 643: LD_EXP 3
 647: PPUSH
 648: LD_INT 37
 650: PPUSH
 651: LD_INT 66
 653: PPUSH
 654: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 658: LD_EXP 1
 662: PPUSH
 663: LD_INT 38
 665: PPUSH
 666: LD_INT 64
 668: PPUSH
 669: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 673: LD_EXP 3
 677: PPUSH
 678: LD_STRING D1a-Cyrus-2
 680: PPUSH
 681: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 685: LD_EXP 3
 689: PPUSH
 690: LD_INT 35
 692: PPUSH
 693: LD_INT 62
 695: PPUSH
 696: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 700: LD_EXP 1
 704: PPUSH
 705: LD_INT 35
 707: PPUSH
 708: LD_INT 60
 710: PPUSH
 711: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 715: LD_EXP 1
 719: PPUSH
 720: LD_STRING D1a-JMM-2
 722: PPUSH
 723: CALL_OW 88
// ComWalk ( Lisa ) ;
 727: LD_EXP 4
 731: PPUSH
 732: CALL_OW 138
// wait ( 0 0$1 ) ;
 736: LD_INT 35
 738: PPUSH
 739: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 743: LD_EXP 4
 747: PPUSH
 748: LD_EXP 1
 752: PPUSH
 753: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 757: LD_EXP 4
 761: PPUSH
 762: LD_STRING D1a-Lisa-2
 764: PPUSH
 765: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 769: LD_EXP 1
 773: PUSH
 774: LD_EXP 3
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: LD_EXP 4
 787: PPUSH
 788: CALL_OW 119
// end ; if not Cyrus and Bobby then
 792: LD_EXP 3
 796: NOT
 797: PUSH
 798: LD_EXP 2
 802: AND
 803: IFFALSE 1082
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 805: LD_EXP 2
 809: PPUSH
 810: LD_INT 44
 812: PPUSH
 813: LD_INT 70
 815: PPUSH
 816: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 820: LD_EXP 1
 824: PPUSH
 825: LD_INT 46
 827: PPUSH
 828: LD_INT 73
 830: PPUSH
 831: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 835: LD_EXP 2
 839: PPUSH
 840: LD_STRING D1a-Bobby-1
 842: PPUSH
 843: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 847: LD_EXP 1
 851: PPUSH
 852: LD_STRING D1a-JMM-1
 854: PPUSH
 855: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 859: LD_EXP 2
 863: PPUSH
 864: LD_INT 37
 866: PPUSH
 867: LD_INT 66
 869: PPUSH
 870: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 874: LD_EXP 1
 878: PPUSH
 879: LD_INT 38
 881: PPUSH
 882: LD_INT 64
 884: PPUSH
 885: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 889: LD_EXP 2
 893: PPUSH
 894: LD_STRING D1a-Bobby-2
 896: PPUSH
 897: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 901: LD_EXP 2
 905: PPUSH
 906: LD_INT 35
 908: PPUSH
 909: LD_INT 62
 911: PPUSH
 912: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 916: LD_EXP 1
 920: PPUSH
 921: LD_INT 35
 923: PPUSH
 924: LD_INT 60
 926: PPUSH
 927: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 931: LD_EXP 1
 935: PPUSH
 936: LD_STRING D1a-JMM-2
 938: PPUSH
 939: CALL_OW 88
// ComWalk ( Lisa ) ;
 943: LD_EXP 4
 947: PPUSH
 948: CALL_OW 138
// wait ( 0 0$1 ) ;
 952: LD_INT 35
 954: PPUSH
 955: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 959: LD_EXP 4
 963: PPUSH
 964: LD_EXP 1
 968: PPUSH
 969: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 973: LD_EXP 1
 977: PUSH
 978: LD_EXP 3
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: PPUSH
 987: LD_EXP 4
 991: PPUSH
 992: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 996: LD_VAR 0 1
1000: PUSH
1001: LD_INT 1
1003: ARRAY
1004: PPUSH
1005: LD_INT 33
1007: PPUSH
1008: LD_INT 55
1010: PPUSH
1011: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1015: LD_VAR 0 1
1019: PUSH
1020: LD_INT 2
1022: ARRAY
1023: PPUSH
1024: LD_INT 30
1026: PPUSH
1027: LD_INT 54
1029: PPUSH
1030: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1034: LD_VAR 0 1
1038: PUSH
1039: LD_INT 1
1041: ARRAY
1042: PPUSH
1043: LD_EXP 1
1047: PPUSH
1048: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1052: LD_VAR 0 1
1056: PUSH
1057: LD_INT 2
1059: ARRAY
1060: PPUSH
1061: LD_EXP 1
1065: PPUSH
1066: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1070: LD_EXP 4
1074: PPUSH
1075: LD_STRING D1a-Lisa-2
1077: PPUSH
1078: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1082: LD_EXP 3
1086: NOT
1087: PUSH
1088: LD_EXP 2
1092: NOT
1093: AND
1094: IFFALSE 1308
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1096: LD_EXP 1
1100: PPUSH
1101: LD_INT 37
1103: PPUSH
1104: LD_INT 66
1106: PPUSH
1107: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1111: LD_EXP 1
1115: PPUSH
1116: LD_STRING D1b-JMM-1
1118: PPUSH
1119: CALL_OW 88
// ComCrawl ( JMM ) ;
1123: LD_EXP 1
1127: PPUSH
1128: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1132: LD_EXP 1
1136: PPUSH
1137: LD_INT 35
1139: PPUSH
1140: LD_INT 60
1142: PPUSH
1143: CALL_OW 171
// wait ( 0 0$8 ) ;
1147: LD_INT 280
1149: PPUSH
1150: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1154: LD_EXP 1
1158: PPUSH
1159: LD_STRING D1b-JMM-1a
1161: PPUSH
1162: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1166: LD_EXP 1
1170: PUSH
1171: LD_EXP 4
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PPUSH
1180: CALL_OW 138
// wait ( 0 0$1 ) ;
1184: LD_INT 35
1186: PPUSH
1187: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1191: LD_EXP 4
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1205: LD_EXP 1
1209: PUSH
1210: EMPTY
1211: LIST
1212: PPUSH
1213: LD_EXP 4
1217: PPUSH
1218: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1222: LD_VAR 0 1
1226: PUSH
1227: LD_INT 1
1229: ARRAY
1230: PPUSH
1231: LD_INT 33
1233: PPUSH
1234: LD_INT 55
1236: PPUSH
1237: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1241: LD_VAR 0 1
1245: PUSH
1246: LD_INT 2
1248: ARRAY
1249: PPUSH
1250: LD_INT 30
1252: PPUSH
1253: LD_INT 54
1255: PPUSH
1256: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1260: LD_VAR 0 1
1264: PUSH
1265: LD_INT 1
1267: ARRAY
1268: PPUSH
1269: LD_EXP 1
1273: PPUSH
1274: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1278: LD_VAR 0 1
1282: PUSH
1283: LD_INT 2
1285: ARRAY
1286: PPUSH
1287: LD_EXP 1
1291: PPUSH
1292: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1296: LD_EXP 4
1300: PPUSH
1301: LD_STRING D1b-Lisa-1
1303: PPUSH
1304: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1308: LD_EXP 1
1312: PPUSH
1313: LD_STRING D1-JMM-1
1315: PPUSH
1316: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1320: LD_EXP 4
1324: PPUSH
1325: LD_STRING D1-Lisa-1
1327: PPUSH
1328: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1332: LD_EXP 1
1336: PPUSH
1337: LD_STRING D1-JMM-2
1339: PPUSH
1340: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1344: LD_EXP 9
1348: PPUSH
1349: LD_STRING D1-Pow-2
1351: PPUSH
1352: CALL_OW 94
// if Cyrus then
1356: LD_EXP 3
1360: IFFALSE 1386
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1362: LD_EXP 3
1366: PPUSH
1367: LD_STRING D1-Cyrus-2
1369: PPUSH
1370: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1374: LD_EXP 1
1378: PPUSH
1379: LD_STRING D1-JMM-3
1381: PPUSH
1382: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1386: LD_EXP 9
1390: PPUSH
1391: LD_STRING D1-Pow-3
1393: PPUSH
1394: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1398: LD_EXP 1
1402: PPUSH
1403: LD_STRING D1-JMM-4
1405: PPUSH
1406: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1410: LD_EXP 9
1414: PPUSH
1415: LD_STRING D1-Pow-4
1417: PPUSH
1418: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1422: LD_EXP 9
1426: PPUSH
1427: LD_STRING D1-Pow-4a
1429: PPUSH
1430: CALL_OW 94
// if Cyrus then
1434: LD_EXP 3
1438: IFFALSE 1452
// Say ( Cyrus , D1-Cyrus-4 ) ;
1440: LD_EXP 3
1444: PPUSH
1445: LD_STRING D1-Cyrus-4
1447: PPUSH
1448: CALL_OW 88
// if Bobby then
1452: LD_EXP 2
1456: IFFALSE 1494
// begin Say ( Bobby , D1-Bobby-4 ) ;
1458: LD_EXP 2
1462: PPUSH
1463: LD_STRING D1-Bobby-4
1465: PPUSH
1466: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1470: LD_EXP 4
1474: PPUSH
1475: LD_STRING D1-Lisa-4
1477: PPUSH
1478: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1482: LD_EXP 1
1486: PPUSH
1487: LD_STRING D1-JMM-5
1489: PPUSH
1490: CALL_OW 88
// end ; InGameOff ;
1494: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1498: LD_INT 22
1500: PUSH
1501: LD_INT 4
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PPUSH
1508: CALL_OW 69
1512: PUSH
1513: LD_EXP 6
1517: PUSH
1518: LD_EXP 7
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: DIFF
1527: PPUSH
1528: LD_INT 1
1530: PPUSH
1531: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1535: LD_STRING M1
1537: PPUSH
1538: CALL_OW 337
// SaveForQuickRestart ;
1542: CALL_OW 22
// end ;
1546: PPOPN 1
1548: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1549: LD_INT 7
1551: PPUSH
1552: LD_INT 22
1554: PUSH
1555: LD_INT 1
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PPUSH
1562: CALL_OW 70
1566: PUSH
1567: LD_INT 0
1569: GREATER
1570: IFFALSE 1940
1572: GO 1574
1574: DISABLE
// begin InGameOn ;
1575: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1579: LD_INT 22
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 21
1591: PUSH
1592: LD_INT 1
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PPUSH
1603: CALL_OW 69
1607: PPUSH
1608: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1612: LD_INT 24
1614: PPUSH
1615: LD_INT 32
1617: PPUSH
1618: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1622: LD_EXP 5
1626: PPUSH
1627: LD_INT 4
1629: PPUSH
1630: LD_INT 1
1632: PPUSH
1633: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1637: LD_EXP 5
1641: PPUSH
1642: LD_INT 4
1644: PPUSH
1645: CALL_OW 336
// wait ( 0 0$1 ) ;
1649: LD_INT 35
1651: PPUSH
1652: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1656: LD_EXP 5
1660: PPUSH
1661: LD_INT 27
1663: PPUSH
1664: LD_INT 38
1666: PPUSH
1667: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1671: LD_EXP 5
1675: PPUSH
1676: LD_EXP 1
1680: PPUSH
1681: CALL_OW 179
// wait ( 0 0$1 ) ;
1685: LD_INT 35
1687: PPUSH
1688: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1692: LD_EXP 5
1696: PPUSH
1697: LD_STRING D2a-Khat-1
1699: PPUSH
1700: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1704: LD_EXP 1
1708: PPUSH
1709: LD_STRING D2a-JMM-1
1711: PPUSH
1712: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1716: LD_EXP 5
1720: PPUSH
1721: LD_STRING D2a-Khat-2
1723: PPUSH
1724: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1728: LD_EXP 1
1732: PPUSH
1733: LD_STRING D2a-JMM-2
1735: PPUSH
1736: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1740: LD_EXP 5
1744: PPUSH
1745: LD_STRING D2a-Khat-3
1747: PPUSH
1748: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1752: LD_EXP 1
1756: PPUSH
1757: LD_STRING D2a-JMM-3
1759: PPUSH
1760: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1764: LD_EXP 5
1768: PPUSH
1769: LD_STRING D2a-Khat-4
1771: PPUSH
1772: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1776: LD_EXP 1
1780: PPUSH
1781: LD_STRING D2a-JMM-4
1783: PPUSH
1784: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1788: LD_EXP 5
1792: PPUSH
1793: LD_STRING D2a-Khat-5
1795: PPUSH
1796: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1800: LD_EXP 1
1804: PPUSH
1805: LD_STRING D2a-JMM-5
1807: PPUSH
1808: CALL_OW 88
// InGameOff ;
1812: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1816: LD_INT 22
1818: PUSH
1819: LD_INT 1
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: PUSH
1826: LD_INT 21
1828: PUSH
1829: LD_INT 1
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 3
1838: PUSH
1839: LD_INT 24
1841: PUSH
1842: LD_INT 800
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: PUSH
1863: LD_INT 0
1865: GREATER
1866: IFFALSE 1940
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1868: LD_EXP 5
1872: PPUSH
1873: LD_INT 22
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: PUSH
1883: LD_INT 21
1885: PUSH
1886: LD_INT 1
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 3
1895: PUSH
1896: LD_INT 24
1898: PUSH
1899: LD_INT 1000
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: PPUSH
1915: CALL_OW 69
1919: PUSH
1920: LD_INT 1
1922: ARRAY
1923: PPUSH
1924: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1928: LD_EXP 5
1932: PPUSH
1933: LD_STRING D2b-Khat-1
1935: PPUSH
1936: CALL_OW 88
// end ; end ;
1940: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
1941: LD_INT 15
1943: PPUSH
1944: LD_INT 22
1946: PUSH
1947: LD_INT 1
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PPUSH
1954: CALL_OW 70
1958: PUSH
1959: LD_INT 0
1961: GREATER
1962: IFFALSE 3122
1964: GO 1966
1966: DISABLE
1967: LD_INT 0
1969: PPUSH
1970: PPUSH
1971: PPUSH
1972: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
1973: LD_ADDR_VAR 0 2
1977: PUSH
1978: LD_INT 999
1980: PUSH
1981: LD_INT 999
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
1991: LD_ADDR_VAR 0 4
1995: PUSH
1996: LD_INT 22
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 21
2008: PUSH
2009: LD_INT 1
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PPUSH
2020: CALL_OW 69
2024: PUSH
2025: LD_EXP 1
2029: PUSH
2030: LD_EXP 2
2034: PUSH
2035: LD_EXP 3
2039: PUSH
2040: LD_EXP 4
2044: PUSH
2045: LD_EXP 5
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: DIFF
2057: ST_TO_ADDR
// PrepareDeadSoldiers ;
2058: CALL 11027 0 0
// spotCorpses = 1 ;
2062: LD_ADDR_EXP 31
2066: PUSH
2067: LD_INT 1
2069: ST_TO_ADDR
// InGameOn ;
2070: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2074: LD_INT 23
2076: PPUSH
2077: LD_INT 12
2079: PPUSH
2080: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2084: LD_ADDR_VAR 0 3
2088: PUSH
2089: LD_VAR 0 2
2093: PUSH
2094: LD_INT 1
2096: ARRAY
2097: PUSH
2098: LD_INT 2
2100: ARRAY
2101: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2102: LD_ADDR_VAR 0 1
2106: PUSH
2107: LD_INT 22
2109: PUSH
2110: LD_INT 1
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 21
2119: PUSH
2120: LD_INT 1
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PPUSH
2131: CALL_OW 69
2135: PUSH
2136: LD_EXP 1
2140: PUSH
2141: LD_EXP 5
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: DIFF
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2203
// if IsOK ( i ) then
2154: LD_VAR 0 1
2158: PPUSH
2159: CALL_OW 302
2163: IFFALSE 2201
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2165: LD_ADDR_VAR 0 2
2169: PUSH
2170: LD_VAR 0 2
2174: PUSH
2175: LD_VAR 0 1
2179: PUSH
2180: LD_VAR 0 1
2184: PPUSH
2185: LD_INT 16
2187: PPUSH
2188: CALL_OW 299
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: PUSH
2197: EMPTY
2198: LIST
2199: ADD
2200: ST_TO_ADDR
2201: GO 2151
2203: POP
2204: POP
// for i = 2 to distanceTab do
2205: LD_ADDR_VAR 0 1
2209: PUSH
2210: DOUBLE
2211: LD_INT 2
2213: DEC
2214: ST_TO_ADDR
2215: LD_VAR 0 2
2219: PUSH
2220: FOR_TO
2221: IFFALSE 2267
// if distanceTab [ i ] [ 2 ] < min then
2223: LD_VAR 0 2
2227: PUSH
2228: LD_VAR 0 1
2232: ARRAY
2233: PUSH
2234: LD_INT 2
2236: ARRAY
2237: PUSH
2238: LD_VAR 0 3
2242: LESS
2243: IFFALSE 2265
// min = distanceTab [ i ] [ 2 ] ;
2245: LD_ADDR_VAR 0 3
2249: PUSH
2250: LD_VAR 0 2
2254: PUSH
2255: LD_VAR 0 1
2259: ARRAY
2260: PUSH
2261: LD_INT 2
2263: ARRAY
2264: ST_TO_ADDR
2265: GO 2220
2267: POP
2268: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2269: LD_ADDR_VAR 0 1
2273: PUSH
2274: LD_INT 22
2276: PUSH
2277: LD_INT 1
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: PUSH
2284: LD_INT 21
2286: PUSH
2287: LD_INT 1
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PUSH
2294: EMPTY
2295: LIST
2296: LIST
2297: PPUSH
2298: CALL_OW 69
2302: PUSH
2303: LD_EXP 1
2307: PUSH
2308: EMPTY
2309: LIST
2310: DIFF
2311: PUSH
2312: FOR_IN
2313: IFFALSE 2383
// begin ComMoveToArea ( i , DeadCutscene ) ;
2315: LD_VAR 0 1
2319: PPUSH
2320: LD_INT 28
2322: PPUSH
2323: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2327: LD_EXP 1
2331: PPUSH
2332: LD_INT 30
2334: PPUSH
2335: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2339: LD_VAR 0 1
2343: PPUSH
2344: LD_INT 23
2346: PPUSH
2347: LD_INT 11
2349: PPUSH
2350: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2354: LD_EXP 1
2358: PPUSH
2359: LD_INT 23
2361: PPUSH
2362: LD_INT 11
2364: PPUSH
2365: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2369: LD_EXP 32
2373: PPUSH
2374: LD_INT 250
2376: PPUSH
2377: CALL_OW 234
// end ;
2381: GO 2312
2383: POP
2384: POP
// for i = 2 to distanceTab do
2385: LD_ADDR_VAR 0 1
2389: PUSH
2390: DOUBLE
2391: LD_INT 2
2393: DEC
2394: ST_TO_ADDR
2395: LD_VAR 0 2
2399: PUSH
2400: FOR_TO
2401: IFFALSE 2787
// begin if distanceTab [ i ] [ 2 ] = min then
2403: LD_VAR 0 2
2407: PUSH
2408: LD_VAR 0 1
2412: ARRAY
2413: PUSH
2414: LD_INT 2
2416: ARRAY
2417: PUSH
2418: LD_VAR 0 3
2422: EQUAL
2423: IFFALSE 2785
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 1
2438: ARRAY
2439: PUSH
2440: LD_EXP 2
2444: EQUAL
2445: IFFALSE 2459
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2447: LD_EXP 2
2451: PPUSH
2452: LD_STRING DCorpses-Bobby-1
2454: PPUSH
2455: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2459: LD_VAR 0 2
2463: PUSH
2464: LD_VAR 0 1
2468: ARRAY
2469: PUSH
2470: LD_INT 1
2472: ARRAY
2473: PUSH
2474: LD_EXP 3
2478: EQUAL
2479: IFFALSE 2493
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2481: LD_EXP 3
2485: PPUSH
2486: LD_STRING DCorpses-Cyrus-1
2488: PPUSH
2489: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2493: LD_VAR 0 2
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PUSH
2504: LD_INT 1
2506: ARRAY
2507: PUSH
2508: LD_EXP 4
2512: EQUAL
2513: IFFALSE 2527
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2515: LD_EXP 4
2519: PPUSH
2520: LD_STRING DCorpses-Lisa-1
2522: PPUSH
2523: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2527: LD_VAR 0 2
2531: PUSH
2532: LD_VAR 0 1
2536: ARRAY
2537: PUSH
2538: LD_INT 1
2540: ARRAY
2541: PUSH
2542: LD_VAR 0 4
2546: PUSH
2547: LD_INT 1
2549: ARRAY
2550: EQUAL
2551: PUSH
2552: LD_VAR 0 4
2556: PUSH
2557: LD_INT 1
2559: ARRAY
2560: PPUSH
2561: CALL_OW 258
2565: PUSH
2566: LD_INT 1
2568: EQUAL
2569: AND
2570: IFFALSE 2588
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2572: LD_VAR 0 4
2576: PUSH
2577: LD_INT 1
2579: ARRAY
2580: PPUSH
2581: LD_STRING DCorpses-Sol1-1
2583: PPUSH
2584: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2588: LD_VAR 0 2
2592: PUSH
2593: LD_VAR 0 1
2597: ARRAY
2598: PUSH
2599: LD_INT 1
2601: ARRAY
2602: PUSH
2603: LD_VAR 0 4
2607: PUSH
2608: LD_INT 1
2610: ARRAY
2611: EQUAL
2612: PUSH
2613: LD_VAR 0 4
2617: PUSH
2618: LD_INT 1
2620: ARRAY
2621: PPUSH
2622: CALL_OW 258
2626: PUSH
2627: LD_INT 2
2629: EQUAL
2630: AND
2631: IFFALSE 2649
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2633: LD_VAR 0 4
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PPUSH
2642: LD_STRING DCorpses-FSol1-1
2644: PPUSH
2645: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2649: LD_VAR 0 2
2653: PUSH
2654: LD_VAR 0 1
2658: ARRAY
2659: PUSH
2660: LD_INT 1
2662: ARRAY
2663: PUSH
2664: LD_VAR 0 4
2668: PUSH
2669: LD_INT 2
2671: ARRAY
2672: EQUAL
2673: PUSH
2674: LD_VAR 0 4
2678: PUSH
2679: LD_INT 2
2681: ARRAY
2682: PPUSH
2683: CALL_OW 258
2687: PUSH
2688: LD_INT 1
2690: EQUAL
2691: AND
2692: IFFALSE 2710
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2694: LD_VAR 0 4
2698: PUSH
2699: LD_INT 2
2701: ARRAY
2702: PPUSH
2703: LD_STRING DCorpses-Sol1-1
2705: PPUSH
2706: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2710: LD_VAR 0 2
2714: PUSH
2715: LD_VAR 0 1
2719: ARRAY
2720: PUSH
2721: LD_INT 1
2723: ARRAY
2724: PUSH
2725: LD_VAR 0 4
2729: PUSH
2730: LD_INT 2
2732: ARRAY
2733: EQUAL
2734: PUSH
2735: LD_VAR 0 4
2739: PUSH
2740: LD_INT 2
2742: ARRAY
2743: PPUSH
2744: CALL_OW 258
2748: PUSH
2749: LD_INT 2
2751: EQUAL
2752: AND
2753: IFFALSE 2771
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2755: LD_VAR 0 4
2759: PUSH
2760: LD_INT 2
2762: ARRAY
2763: PPUSH
2764: LD_STRING DCorpses-FSol1-1
2766: PPUSH
2767: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2771: LD_EXP 32
2775: PPUSH
2776: LD_INT 150
2778: PPUSH
2779: CALL_OW 234
// break ;
2783: GO 2787
// end ; end ;
2785: GO 2400
2787: POP
2788: POP
// repeat wait ( 0 0$1 ) ;
2789: LD_INT 35
2791: PPUSH
2792: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2796: LD_ADDR_VAR 0 1
2800: PUSH
2801: LD_INT 22
2803: PUSH
2804: LD_INT 1
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: LD_INT 21
2813: PUSH
2814: LD_INT 1
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PPUSH
2825: CALL_OW 69
2829: PUSH
2830: LD_EXP 1
2834: PUSH
2835: EMPTY
2836: LIST
2837: DIFF
2838: PUSH
2839: FOR_IN
2840: IFFALSE 2910
// begin ComMoveToArea ( i , DeadCutscene ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: LD_INT 28
2849: PPUSH
2850: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2854: LD_EXP 1
2858: PPUSH
2859: LD_INT 30
2861: PPUSH
2862: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2866: LD_VAR 0 1
2870: PPUSH
2871: LD_INT 23
2873: PPUSH
2874: LD_INT 11
2876: PPUSH
2877: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2881: LD_EXP 1
2885: PPUSH
2886: LD_INT 23
2888: PPUSH
2889: LD_INT 11
2891: PPUSH
2892: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2896: LD_EXP 32
2900: PPUSH
2901: LD_INT 250
2903: PPUSH
2904: CALL_OW 234
// end ;
2908: GO 2839
2910: POP
2911: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2912: LD_EXP 1
2916: PPUSH
2917: LD_INT 30
2919: PPUSH
2920: CALL_OW 308
2924: IFFALSE 2789
// wait ( 0 0$3 ) ;
2926: LD_INT 105
2928: PPUSH
2929: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2933: LD_EXP 1
2937: PPUSH
2938: LD_STRING DCorpses-JMM-1
2940: PPUSH
2941: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2945: LD_EXP 32
2949: PPUSH
2950: LD_INT 150
2952: PPUSH
2953: CALL_OW 234
// if IsOK ( Khatam ) then
2957: LD_EXP 5
2961: PPUSH
2962: CALL_OW 302
2966: IFFALSE 3106
// begin repeat wait ( 0 0$1 ) ;
2968: LD_INT 35
2970: PPUSH
2971: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
2975: LD_EXP 5
2979: PPUSH
2980: LD_EXP 32
2984: PPUSH
2985: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
2989: LD_EXP 5
2993: PPUSH
2994: LD_EXP 32
2998: PPUSH
2999: CALL_OW 296
3003: PUSH
3004: LD_INT 2
3006: LESS
3007: IFFALSE 2968
// spotCorpses = 0 ;
3009: LD_ADDR_EXP 31
3013: PUSH
3014: LD_INT 0
3016: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3017: LD_EXP 32
3021: PPUSH
3022: LD_INT 10
3024: PPUSH
3025: CALL_OW 234
// wait ( 0 0$3 ) ;
3029: LD_INT 105
3031: PPUSH
3032: CALL_OW 67
// SetLives ( DyingSold , 0 ) ;
3036: LD_EXP 32
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 234
// wait ( 0 0$1 ) ;
3048: LD_INT 35
3050: PPUSH
3051: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3055: LD_EXP 1
3059: PUSH
3060: LD_EXP 5
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: PPUSH
3069: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3073: LD_EXP 5
3077: PPUSH
3078: LD_EXP 1
3082: PPUSH
3083: CALL_OW 119
// wait ( 0 0$1 ) ;
3087: LD_INT 35
3089: PPUSH
3090: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3094: LD_EXP 5
3098: PPUSH
3099: LD_STRING DCorpses-Khat-1
3101: PPUSH
3102: CALL_OW 88
// end ; InGameOff ;
3106: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3110: LD_EXP 1
3114: PPUSH
3115: LD_STRING DCorpses-JMM-2
3117: PPUSH
3118: CALL_OW 88
// end ;
3122: PPOPN 4
3124: END
// every 0 0$1 trigger spotCorpses = 1 do
3125: LD_EXP 31
3129: PUSH
3130: LD_INT 1
3132: EQUAL
3133: IFFALSE 3151
3135: GO 3137
3137: DISABLE
// begin enable ;
3138: ENABLE
// SetLives ( DyingSold , 150 ) ;
3139: LD_EXP 32
3143: PPUSH
3144: LD_INT 150
3146: PPUSH
3147: CALL_OW 234
// end ;
3151: END
// every 1 trigger FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do var i ;
3152: LD_INT 8
3154: PPUSH
3155: LD_INT 22
3157: PUSH
3158: LD_INT 1
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: PPUSH
3165: CALL_OW 70
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: PUSH
3174: LD_INT 1
3176: PPUSH
3177: CALL_OW 255
3181: PUSH
3182: LD_INT 1
3184: EQUAL
3185: NOT
3186: AND
3187: PUSH
3188: LD_INT 10
3190: PPUSH
3191: CALL_OW 255
3195: PUSH
3196: LD_INT 1
3198: EQUAL
3199: NOT
3200: AND
3201: IFFALSE 3369
3203: GO 3205
3205: DISABLE
3206: LD_INT 0
3208: PPUSH
// begin InGameOn ;
3209: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3213: LD_EXP 7
3217: PPUSH
3218: LD_INT 250
3220: PPUSH
3221: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3225: LD_INT 3
3227: PPUSH
3228: LD_INT 4
3230: PPUSH
3231: LD_INT 2
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3241: LD_EXP 6
3245: PUSH
3246: LD_EXP 7
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PPUSH
3255: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: LD_INT 9
3266: PPUSH
3267: LD_INT 22
3269: PUSH
3270: LD_INT 3
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PPUSH
3277: CALL_OW 70
3281: PUSH
3282: FOR_IN
3283: IFFALSE 3296
// ComFree ( i ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: CALL_OW 139
3294: GO 3282
3296: POP
3297: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3298: LD_ADDR_VAR 0 1
3302: PUSH
3303: LD_INT 22
3305: PUSH
3306: LD_INT 4
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PPUSH
3313: CALL_OW 69
3317: PUSH
3318: FOR_IN
3319: IFFALSE 3332
// ComFree ( i ) ;
3321: LD_VAR 0 1
3325: PPUSH
3326: CALL_OW 139
3330: GO 3318
3332: POP
3333: POP
// wait ( 0 0$1 ) ;
3334: LD_INT 35
3336: PPUSH
3337: CALL_OW 67
// InGameOff ;
3341: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3345: LD_EXP 6
3349: PPUSH
3350: LD_STRING DF-Sol1-1
3352: PPUSH
3353: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3357: LD_EXP 1
3361: PPUSH
3362: LD_STRING DF-JMM-1
3364: PPUSH
3365: CALL_OW 88
// end ;
3369: PPOPN 1
3371: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do
3372: LD_INT 19
3374: PPUSH
3375: LD_INT 22
3377: PUSH
3378: LD_INT 3
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PPUSH
3385: CALL_OW 70
3389: PUSH
3390: LD_INT 0
3392: EQUAL
3393: PUSH
3394: LD_INT 1
3396: PPUSH
3397: CALL_OW 255
3401: PUSH
3402: LD_INT 1
3404: EQUAL
3405: NOT
3406: AND
3407: PUSH
3408: LD_INT 10
3410: PPUSH
3411: CALL_OW 255
3415: PUSH
3416: LD_INT 1
3418: EQUAL
3419: NOT
3420: AND
3421: IFFALSE 3534
3423: GO 3425
3425: DISABLE
// begin if not IsDead ( Brian ) then
3426: LD_EXP 6
3430: PPUSH
3431: CALL_OW 301
3435: NOT
3436: IFFALSE 3450
// SetSide ( Brian , 1 ) ;
3438: LD_EXP 6
3442: PPUSH
3443: LD_INT 1
3445: PPUSH
3446: CALL_OW 235
// if not IsDead ( Jerry ) then
3450: LD_EXP 7
3454: PPUSH
3455: CALL_OW 301
3459: NOT
3460: IFFALSE 3474
// SetSide ( Jerry , 1 ) ;
3462: LD_EXP 7
3466: PPUSH
3467: LD_INT 1
3469: PPUSH
3470: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3474: LD_INT 22
3476: PUSH
3477: LD_INT 1
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 25
3486: PUSH
3487: LD_INT 4
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PPUSH
3498: CALL_OW 69
3502: PUSH
3503: LD_INT 0
3505: GREATER
3506: IFFALSE 3522
// begin Say ( JMM , DFa-JMM-1 ) ;
3508: LD_EXP 1
3512: PPUSH
3513: LD_STRING DFa-JMM-1
3515: PPUSH
3516: CALL_OW 88
// end else
3520: GO 3534
// begin Say ( JMM , DFa-JMM-1a ) ;
3522: LD_EXP 1
3526: PPUSH
3527: LD_STRING DFa-JMM-1a
3529: PPUSH
3530: CALL_OW 88
// end ; end ;
3534: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3535: LD_INT 19
3537: PPUSH
3538: LD_INT 22
3540: PUSH
3541: LD_INT 3
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: PPUSH
3548: CALL_OW 70
3552: PUSH
3553: LD_INT 0
3555: EQUAL
3556: PUSH
3557: LD_EXP 6
3561: PPUSH
3562: CALL_OW 302
3566: NOT
3567: AND
3568: IFFALSE 3645
3570: GO 3572
3572: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3573: LD_INT 35
3575: PPUSH
3576: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3580: LD_EXP 6
3584: PPUSH
3585: CALL_OW 256
3589: PUSH
3590: LD_INT 250
3592: GREATER
3593: IFFALSE 3573
// Say ( Brian , DFb-Sol1-1 ) ;
3595: LD_EXP 6
3599: PPUSH
3600: LD_STRING DFb-Sol1-1
3602: PPUSH
3603: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3607: LD_EXP 6
3611: PPUSH
3612: LD_INT 78
3614: PPUSH
3615: LD_INT 74
3617: PPUSH
3618: CALL_OW 111
// if IsDead ( Jerry ) then
3622: LD_EXP 7
3626: PPUSH
3627: CALL_OW 301
3631: IFFALSE 3645
// Say ( Brian , DFb-Sol1-1a ) end ;
3633: LD_EXP 6
3637: PPUSH
3638: LD_STRING DFb-Sol1-1a
3640: PPUSH
3641: CALL_OW 88
3645: END
// every 0 0$1 do var i ;
3646: GO 3648
3648: DISABLE
3649: LD_INT 0
3651: PPUSH
// begin enable ;
3652: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3653: LD_ADDR_VAR 0 1
3657: PUSH
3658: LD_INT 22
3660: PUSH
3661: LD_INT 3
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 21
3670: PUSH
3671: LD_INT 3
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 30
3680: PUSH
3681: LD_INT 31
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: LIST
3692: PPUSH
3693: CALL_OW 69
3697: PUSH
3698: FOR_IN
3699: IFFALSE 3730
// begin if See ( 1 , i ) then
3701: LD_INT 1
3703: PPUSH
3704: LD_VAR 0 1
3708: PPUSH
3709: CALL_OW 292
3713: IFFALSE 3728
// begin disable ;
3715: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3716: LD_EXP 1
3720: PPUSH
3721: LD_STRING DX1-JMM-1
3723: PPUSH
3724: CALL_OW 88
// end ; end ;
3728: GO 3698
3730: POP
3731: POP
// end ;
3732: PPOPN 1
3734: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3735: LD_INT 1
3737: PPUSH
3738: LD_INT 11
3740: PPUSH
3741: CALL_OW 294
3745: IFFALSE 4108
3747: GO 3749
3749: DISABLE
3750: LD_INT 0
3752: PPUSH
3753: PPUSH
// begin DialogueOn ;
3754: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3758: LD_INT 11
3760: PPUSH
3761: LD_INT 22
3763: PUSH
3764: LD_INT 3
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 21
3773: PUSH
3774: LD_INT 1
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PPUSH
3785: CALL_OW 70
3789: PUSH
3790: LD_INT 1
3792: ARRAY
3793: PPUSH
3794: LD_STRING DX3-Rus1-1
3796: PPUSH
3797: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3801: LD_EXP 1
3805: PPUSH
3806: LD_STRING DX3-JMM-1
3808: PPUSH
3809: CALL_OW 88
// DialogueOff ;
3813: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3817: LD_ADDR_VAR 0 1
3821: PUSH
3822: LD_INT 11
3824: PPUSH
3825: LD_INT 22
3827: PUSH
3828: LD_INT 3
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 21
3837: PUSH
3838: LD_INT 1
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: PPUSH
3849: CALL_OW 70
3853: PUSH
3854: FOR_IN
3855: IFFALSE 3875
// southBaseDefenders = southBaseDefenders ^ i ;
3857: LD_ADDR_EXP 25
3861: PUSH
3862: LD_EXP 25
3866: PUSH
3867: LD_VAR 0 1
3871: ADD
3872: ST_TO_ADDR
3873: GO 3854
3875: POP
3876: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
3877: LD_INT 455
3879: PUSH
3880: LD_INT 420
3882: PUSH
3883: LD_INT 315
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: LIST
3890: PUSH
3891: LD_OWVAR 67
3895: ARRAY
3896: PPUSH
3897: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3901: LD_INT 35
3903: PPUSH
3904: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
3908: LD_ADDR_VAR 0 1
3912: PUSH
3913: LD_INT 22
3915: PUSH
3916: LD_INT 3
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: PUSH
3923: LD_INT 21
3925: PUSH
3926: LD_INT 2
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: PUSH
3933: LD_INT 58
3935: PUSH
3936: EMPTY
3937: LIST
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: LIST
3943: PPUSH
3944: CALL_OW 69
3948: PUSH
3949: FOR_IN
3950: IFFALSE 4020
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
3952: LD_ADDR_VAR 0 2
3956: PUSH
3957: LD_INT 22
3959: PUSH
3960: LD_INT 3
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PUSH
3967: LD_INT 21
3969: PUSH
3970: LD_INT 1
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PUSH
3977: LD_INT 25
3979: PUSH
3980: LD_INT 3
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: LIST
3991: PPUSH
3992: CALL_OW 69
3996: PUSH
3997: FOR_IN
3998: IFFALSE 4016
// begin ComEnterUnit ( j , i ) ;
4000: LD_VAR 0 2
4004: PPUSH
4005: LD_VAR 0 1
4009: PPUSH
4010: CALL_OW 120
// end ;
4014: GO 3997
4016: POP
4017: POP
// end ;
4018: GO 3949
4020: POP
4021: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4022: LD_INT 22
4024: PUSH
4025: LD_INT 3
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: PUSH
4032: LD_INT 21
4034: PUSH
4035: LD_INT 2
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: LD_INT 58
4044: PUSH
4045: EMPTY
4046: LIST
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 69
4057: PUSH
4058: LD_INT 0
4060: EQUAL
4061: PUSH
4062: LD_INT 22
4064: PUSH
4065: LD_INT 3
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 21
4074: PUSH
4075: LD_INT 1
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 25
4084: PUSH
4085: LD_INT 3
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: LIST
4096: PPUSH
4097: CALL_OW 69
4101: PUSH
4102: LD_INT 0
4104: EQUAL
4105: OR
4106: IFFALSE 3901
// end ;
4108: PPOPN 2
4110: END
// every 0 0$1 do var i , tmp ;
4111: GO 4113
4113: DISABLE
4114: LD_INT 0
4116: PPUSH
4117: PPUSH
// begin enable ;
4118: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4119: LD_ADDR_VAR 0 2
4123: PUSH
4124: LD_INT 22
4126: PUSH
4127: LD_INT 1
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 21
4136: PUSH
4137: LD_INT 1
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: PPUSH
4148: CALL_OW 69
4152: ST_TO_ADDR
// for i in tmp do
4153: LD_ADDR_VAR 0 1
4157: PUSH
4158: LD_VAR 0 2
4162: PUSH
4163: FOR_IN
4164: IFFALSE 4286
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4166: LD_VAR 0 1
4170: PPUSH
4171: LD_INT 5
4173: PPUSH
4174: CALL_OW 296
4178: PUSH
4179: LD_INT 4
4181: LESS
4182: PUSH
4183: LD_VAR 0 1
4187: PPUSH
4188: LD_INT 4
4190: PPUSH
4191: CALL_OW 296
4195: PUSH
4196: LD_INT 4
4198: LESS
4199: OR
4200: IFFALSE 4284
// begin disable ;
4202: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4203: LD_INT 5
4205: PUSH
4206: LD_INT 4
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 85
// if IsOK ( Bobby ) then
4217: LD_EXP 2
4221: PPUSH
4222: CALL_OW 302
4226: IFFALSE 4263
// begin DialogueOn ;
4228: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4232: LD_EXP 2
4236: PPUSH
4237: LD_STRING DX2-Bobby-1
4239: PPUSH
4240: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4244: LD_EXP 1
4248: PPUSH
4249: LD_STRING DX2-JMM-1a
4251: PPUSH
4252: CALL_OW 88
// DialogueOff ;
4256: CALL_OW 7
// disable ;
4260: DISABLE
// end else
4261: GO 4284
// begin DialogueOn ;
4263: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4267: LD_EXP 1
4271: PPUSH
4272: LD_STRING DX2-JMM-1
4274: PPUSH
4275: CALL_OW 88
// DialogueOff ;
4279: CALL_OW 7
// disable ;
4283: DISABLE
// end ; end ; end ;
4284: GO 4163
4286: POP
4287: POP
// end ;
4288: PPOPN 2
4290: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4291: LD_INT 22
4293: PUSH
4294: LD_INT 1
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: LD_INT 23
4303: PUSH
4304: LD_INT 3
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 21
4313: PUSH
4314: LD_INT 2
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: LD_INT 34
4323: PUSH
4324: LD_INT 42
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: PPUSH
4337: CALL_OW 69
4341: PUSH
4342: LD_INT 1
4344: GREATEREQUAL
4345: IFFALSE 4812
4347: GO 4349
4349: DISABLE
4350: LD_INT 0
4352: PPUSH
4353: PPUSH
4354: PPUSH
4355: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4356: LD_ADDR_VAR 0 1
4360: PUSH
4361: LD_INT 22
4363: PUSH
4364: LD_INT 1
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 23
4373: PUSH
4374: LD_INT 3
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 21
4383: PUSH
4384: LD_INT 2
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 34
4393: PUSH
4394: LD_INT 42
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: PPUSH
4407: CALL_OW 69
4411: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4412: LD_ADDR_VAR 0 2
4416: PUSH
4417: LD_INT 22
4419: PUSH
4420: LD_INT 1
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: LD_INT 21
4429: PUSH
4430: LD_INT 1
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: PUSH
4437: LD_INT 26
4439: PUSH
4440: LD_INT 1
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: LIST
4451: PPUSH
4452: CALL_OW 69
4456: PUSH
4457: LD_EXP 1
4461: PUSH
4462: LD_EXP 3
4466: PUSH
4467: LD_EXP 2
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: LIST
4476: DIFF
4477: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4478: LD_ADDR_VAR 0 3
4482: PUSH
4483: LD_INT 22
4485: PUSH
4486: LD_INT 1
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 21
4495: PUSH
4496: LD_INT 1
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 26
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: PUSH
4523: LD_EXP 4
4527: PUSH
4528: EMPTY
4529: LIST
4530: DIFF
4531: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
4532: LD_EXP 1
4536: PPUSH
4537: CALL_OW 310
4541: NOT
4542: IFFALSE 4556
// Say ( JMM , DX2a-JMM-1 ) ;
4544: LD_EXP 1
4548: PPUSH
4549: LD_STRING DX2a-JMM-1
4551: PPUSH
4552: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4556: LD_EXP 2
4560: PPUSH
4561: CALL_OW 310
4565: PUSH
4566: LD_VAR 0 1
4570: PUSH
4571: LD_INT 1
4573: ARRAY
4574: EQUAL
4575: IFFALSE 4589
// Say ( Bobby , DX2a-Bobby-1 ) ;
4577: LD_EXP 2
4581: PPUSH
4582: LD_STRING DX2a-Bobby-1
4584: PPUSH
4585: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4589: LD_EXP 3
4593: PPUSH
4594: CALL_OW 310
4598: PUSH
4599: LD_VAR 0 1
4603: PUSH
4604: LD_INT 1
4606: ARRAY
4607: EQUAL
4608: IFFALSE 4622
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4610: LD_EXP 3
4614: PPUSH
4615: LD_STRING DX2a-Cyrus-1
4617: PPUSH
4618: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4622: LD_EXP 4
4626: PPUSH
4627: CALL_OW 310
4631: PUSH
4632: LD_VAR 0 1
4636: PUSH
4637: LD_INT 1
4639: ARRAY
4640: EQUAL
4641: IFFALSE 4655
// Say ( Lisa , DX2a-Lisa-1 ) ;
4643: LD_EXP 4
4647: PPUSH
4648: LD_STRING DX2a-Lisa-1
4650: PPUSH
4651: CALL_OW 88
// for i in temp1 do
4655: LD_ADDR_VAR 0 4
4659: PUSH
4660: LD_VAR 0 2
4664: PUSH
4665: FOR_IN
4666: IFFALSE 4703
// if IsInUnit ( i ) = tmp [ 1 ] then
4668: LD_VAR 0 4
4672: PPUSH
4673: CALL_OW 310
4677: PUSH
4678: LD_VAR 0 1
4682: PUSH
4683: LD_INT 1
4685: ARRAY
4686: EQUAL
4687: IFFALSE 4701
// Say ( i , DX2a-Sol1-1 ) ;
4689: LD_VAR 0 4
4693: PPUSH
4694: LD_STRING DX2a-Sol1-1
4696: PPUSH
4697: CALL_OW 88
4701: GO 4665
4703: POP
4704: POP
// for i in temp2 do
4705: LD_ADDR_VAR 0 4
4709: PUSH
4710: LD_VAR 0 3
4714: PUSH
4715: FOR_IN
4716: IFFALSE 4753
// if IsInUnit ( i ) = tmp [ 1 ] then
4718: LD_VAR 0 4
4722: PPUSH
4723: CALL_OW 310
4727: PUSH
4728: LD_VAR 0 1
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: EQUAL
4737: IFFALSE 4751
// Say ( i , DX2a-FSol1-1 ) ;
4739: LD_VAR 0 4
4743: PPUSH
4744: LD_STRING DX2a-FSol1-1
4746: PPUSH
4747: CALL_OW 88
4751: GO 4715
4753: POP
4754: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4755: LD_EXP 1
4759: PPUSH
4760: CALL_OW 310
4764: PUSH
4765: LD_VAR 0 1
4769: PUSH
4770: LD_INT 1
4772: ARRAY
4773: EQUAL
4774: IFFALSE 4788
// Say ( JMM , DX2b-JMM-1 ) ;
4776: LD_EXP 1
4780: PPUSH
4781: LD_STRING DX2b-JMM-1
4783: PPUSH
4784: CALL_OW 88
// if not IsInUnit ( JMM ) then
4788: LD_EXP 1
4792: PPUSH
4793: CALL_OW 310
4797: NOT
4798: IFFALSE 4812
// Say ( JMM , DX2a-JMM-2 ) ;
4800: LD_EXP 1
4804: PPUSH
4805: LD_STRING DX2a-JMM-2
4807: PPUSH
4808: CALL_OW 88
// end ;
4812: PPOPN 4
4814: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4815: LD_INT 1
4817: PPUSH
4818: CALL_OW 255
4822: PUSH
4823: LD_INT 1
4825: EQUAL
4826: PUSH
4827: LD_INT 10
4829: PPUSH
4830: CALL_OW 255
4834: PUSH
4835: LD_INT 1
4837: EQUAL
4838: OR
4839: IFFALSE 4899
4841: GO 4843
4843: DISABLE
// begin DialogueOn ;
4844: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4848: LD_EXP 1
4852: PPUSH
4853: LD_STRING D3-JMM-1
4855: PPUSH
4856: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4860: LD_EXP 9
4864: PPUSH
4865: LD_STRING D3-Pow-1
4867: PPUSH
4868: CALL_OW 94
// if IsOK ( Cyrus ) then
4872: LD_EXP 3
4876: PPUSH
4877: CALL_OW 302
4881: IFFALSE 4895
// Say ( Cyrus , D3-Cyrus-1 ) ;
4883: LD_EXP 3
4887: PPUSH
4888: LD_STRING D3-Cyrus-1
4890: PPUSH
4891: CALL_OW 88
// DialogueOff ;
4895: CALL_OW 7
// end ;
4899: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , i ;
4900: LD_INT 1
4902: PPUSH
4903: CALL_OW 255
4907: PUSH
4908: LD_INT 1
4910: EQUAL
4911: PUSH
4912: LD_INT 10
4914: PPUSH
4915: CALL_OW 255
4919: PUSH
4920: LD_INT 1
4922: EQUAL
4923: AND
4924: IFFALSE 6114
4926: GO 4928
4928: DISABLE
4929: LD_INT 0
4931: PPUSH
4932: PPUSH
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) diff [ JMM ] ;
4933: LD_ADDR_VAR 0 1
4937: PUSH
4938: LD_INT 22
4940: PUSH
4941: LD_INT 1
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 23
4950: PUSH
4951: LD_INT 1
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 25
4960: PUSH
4961: LD_INT 2
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: PPUSH
4973: CALL_OW 69
4977: PUSH
4978: LD_EXP 1
4982: PUSH
4983: EMPTY
4984: LIST
4985: DIFF
4986: ST_TO_ADDR
// DialogueOn ;
4987: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
4991: LD_EXP 1
4995: PPUSH
4996: LD_STRING D3a-JMM-1
4998: PPUSH
4999: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5003: LD_EXP 9
5007: PPUSH
5008: LD_STRING D3a-Pow-1
5010: PPUSH
5011: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5015: LD_EXP 1
5019: PPUSH
5020: LD_STRING D3a-JMM-2
5022: PPUSH
5023: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5027: LD_EXP 9
5031: PPUSH
5032: LD_STRING D3a-Pow-2
5034: PPUSH
5035: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5039: LD_EXP 1
5043: PPUSH
5044: LD_STRING D3a-JMM-3
5046: PPUSH
5047: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5051: LD_EXP 9
5055: PPUSH
5056: LD_STRING D3a-Pow-3
5058: PPUSH
5059: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5063: LD_EXP 1
5067: PPUSH
5068: LD_STRING D3a-JMM-4
5070: PPUSH
5071: CALL_OW 88
// DialogueOff ;
5075: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5079: LD_STRING M2
5081: PPUSH
5082: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5086: LD_EXP 1
5090: PPUSH
5091: LD_STRING D3b-JMM-1
5093: PPUSH
5094: CALL_OW 88
// wait ( 0 0$5 ) ;
5098: LD_INT 175
5100: PPUSH
5101: CALL_OW 67
// InGameOn ;
5105: CALL_OW 8
// PrepareRussianHeroes ;
5109: CALL 11184 0 0
// CenterNowOnUnits ( Mikhail ) ;
5113: LD_EXP 8
5117: PPUSH
5118: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5122: LD_EXP 1
5126: PUSH
5127: LD_VAR 0 1
5131: PUSH
5132: LD_INT 1
5134: ARRAY
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PPUSH
5140: LD_EXP 8
5144: PPUSH
5145: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5149: LD_EXP 8
5153: PPUSH
5154: LD_VAR 0 1
5158: PUSH
5159: LD_INT 1
5161: ARRAY
5162: PPUSH
5163: CALL_OW 119
// Say ( Mikhail , D4-Mikh-1 ) ;
5167: LD_EXP 8
5171: PPUSH
5172: LD_STRING D4-Mikh-1
5174: PPUSH
5175: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5179: LD_VAR 0 1
5183: PUSH
5184: LD_INT 1
5186: ARRAY
5187: PPUSH
5188: CALL_OW 258
5192: PUSH
5193: LD_INT 1
5195: EQUAL
5196: IFFALSE 5214
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5198: LD_VAR 0 1
5202: PUSH
5203: LD_INT 1
5205: ARRAY
5206: PPUSH
5207: LD_STRING D4-Sol1-1
5209: PPUSH
5210: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5214: LD_VAR 0 1
5218: PUSH
5219: LD_INT 1
5221: ARRAY
5222: PPUSH
5223: CALL_OW 258
5227: PUSH
5228: LD_INT 2
5230: EQUAL
5231: IFFALSE 5249
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5233: LD_VAR 0 1
5237: PUSH
5238: LD_INT 1
5240: ARRAY
5241: PPUSH
5242: LD_STRING D4-FSol1-1
5244: PPUSH
5245: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5249: LD_EXP 8
5253: PPUSH
5254: LD_STRING D4-Mikh-2
5256: PPUSH
5257: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5261: LD_VAR 0 1
5265: PUSH
5266: LD_INT 1
5268: ARRAY
5269: PPUSH
5270: CALL_OW 258
5274: PUSH
5275: LD_INT 1
5277: EQUAL
5278: IFFALSE 5296
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5280: LD_VAR 0 1
5284: PUSH
5285: LD_INT 1
5287: ARRAY
5288: PPUSH
5289: LD_STRING D4-Sol1-2
5291: PPUSH
5292: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5296: LD_VAR 0 1
5300: PUSH
5301: LD_INT 1
5303: ARRAY
5304: PPUSH
5305: CALL_OW 258
5309: PUSH
5310: LD_INT 2
5312: EQUAL
5313: IFFALSE 5331
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5315: LD_VAR 0 1
5319: PUSH
5320: LD_INT 1
5322: ARRAY
5323: PPUSH
5324: LD_STRING D4-FSol1-2
5326: PPUSH
5327: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5331: LD_EXP 8
5335: PPUSH
5336: LD_STRING D4-Mikh-3
5338: PPUSH
5339: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5343: LD_VAR 0 1
5347: PUSH
5348: LD_INT 1
5350: ARRAY
5351: PPUSH
5352: CALL_OW 258
5356: PUSH
5357: LD_INT 1
5359: EQUAL
5360: IFFALSE 5378
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5362: LD_VAR 0 1
5366: PUSH
5367: LD_INT 1
5369: ARRAY
5370: PPUSH
5371: LD_STRING D4-Sol1-3
5373: PPUSH
5374: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5378: LD_VAR 0 1
5382: PUSH
5383: LD_INT 1
5385: ARRAY
5386: PPUSH
5387: CALL_OW 258
5391: PUSH
5392: LD_INT 2
5394: EQUAL
5395: IFFALSE 5413
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5397: LD_VAR 0 1
5401: PUSH
5402: LD_INT 1
5404: ARRAY
5405: PPUSH
5406: LD_STRING D4-FSol1-3
5408: PPUSH
5409: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5413: LD_EXP 8
5417: PPUSH
5418: LD_STRING D4-Mikh-4
5420: PPUSH
5421: CALL_OW 88
// case query ( Qs1 ) of 1 :
5425: LD_STRING Qs1
5427: PPUSH
5428: CALL_OW 97
5432: PUSH
5433: LD_INT 1
5435: DOUBLE
5436: EQUAL
5437: IFTRUE 5441
5439: GO 5476
5441: POP
// begin InGameOff ;
5442: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5446: LD_INT 1
5448: PPUSH
5449: LD_INT 6
5451: PPUSH
5452: LD_INT 2
5454: PPUSH
5455: LD_INT 1
5457: PPUSH
5458: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5462: LD_EXP 8
5466: PPUSH
5467: LD_INT 17
5469: PPUSH
5470: CALL_OW 113
// end ; 2 :
5474: GO 6098
5476: LD_INT 2
5478: DOUBLE
5479: EQUAL
5480: IFTRUE 5484
5482: GO 6063
5484: POP
// begin repeat wait ( 0 0$1 ) ;
5485: LD_INT 35
5487: PPUSH
5488: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5492: LD_VAR 0 1
5496: PUSH
5497: LD_INT 1
5499: ARRAY
5500: PPUSH
5501: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5505: LD_VAR 0 1
5509: PUSH
5510: LD_INT 1
5512: ARRAY
5513: PPUSH
5514: LD_EXP 1
5518: PPUSH
5519: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5523: LD_EXP 8
5527: PPUSH
5528: LD_EXP 1
5532: PPUSH
5533: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5537: LD_EXP 1
5541: PPUSH
5542: LD_EXP 8
5546: PPUSH
5547: CALL_OW 296
5551: PUSH
5552: LD_INT 5
5554: LESS
5555: IFFALSE 5485
// ComTurnUnit ( Mikhail , JMM ) ;
5557: LD_EXP 8
5561: PPUSH
5562: LD_EXP 1
5566: PPUSH
5567: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5571: LD_EXP 1
5575: PPUSH
5576: LD_STRING D4b-JMM-1
5578: PPUSH
5579: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5583: LD_EXP 8
5587: PPUSH
5588: LD_STRING D4b-Mikh-1
5590: PPUSH
5591: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5595: LD_EXP 1
5599: PPUSH
5600: LD_STRING D4b-JMM-2
5602: PPUSH
5603: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5607: LD_EXP 8
5611: PPUSH
5612: LD_STRING D4b-Mikh-2
5614: PPUSH
5615: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5619: LD_EXP 1
5623: PPUSH
5624: LD_STRING D4b-JMM-3
5626: PPUSH
5627: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5631: LD_EXP 8
5635: PPUSH
5636: LD_STRING D4b-Mikh-3
5638: PPUSH
5639: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5643: LD_EXP 1
5647: PPUSH
5648: LD_STRING D4b-JMM-4
5650: PPUSH
5651: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5655: LD_EXP 8
5659: PPUSH
5660: LD_STRING D4b-Mikh-4
5662: PPUSH
5663: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5667: LD_EXP 1
5671: PPUSH
5672: LD_STRING D4b-JMM-5
5674: PPUSH
5675: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5679: LD_EXP 8
5683: PPUSH
5684: LD_STRING D4b-Mikh-5
5686: PPUSH
5687: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5691: LD_EXP 1
5695: PPUSH
5696: LD_STRING D4b-JMM-6
5698: PPUSH
5699: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5703: LD_EXP 8
5707: PPUSH
5708: LD_STRING D4b-Mikh-6
5710: PPUSH
5711: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5715: LD_EXP 1
5719: PPUSH
5720: LD_STRING D4b-JMM-7
5722: PPUSH
5723: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5727: LD_EXP 8
5731: PPUSH
5732: LD_STRING D4b-Mikh-7
5734: PPUSH
5735: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5739: LD_VAR 0 1
5743: PUSH
5744: LD_INT 1
5746: ARRAY
5747: PPUSH
5748: CALL_OW 258
5752: PUSH
5753: LD_INT 1
5755: EQUAL
5756: IFFALSE 5774
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5758: LD_VAR 0 1
5762: PUSH
5763: LD_INT 1
5765: ARRAY
5766: PPUSH
5767: LD_STRING D4b-Sol1-7
5769: PPUSH
5770: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5774: LD_VAR 0 1
5778: PUSH
5779: LD_INT 1
5781: ARRAY
5782: PPUSH
5783: CALL_OW 258
5787: PUSH
5788: LD_INT 2
5790: EQUAL
5791: IFFALSE 5809
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5793: LD_VAR 0 1
5797: PUSH
5798: LD_INT 1
5800: ARRAY
5801: PPUSH
5802: LD_STRING D4b-FSol1-7
5804: PPUSH
5805: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5809: LD_EXP 1
5813: PPUSH
5814: LD_STRING D4b-JMM-8
5816: PPUSH
5817: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5821: LD_VAR 0 1
5825: PUSH
5826: LD_INT 1
5828: ARRAY
5829: PPUSH
5830: CALL_OW 258
5834: PUSH
5835: LD_INT 1
5837: EQUAL
5838: IFFALSE 5856
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5840: LD_VAR 0 1
5844: PUSH
5845: LD_INT 1
5847: ARRAY
5848: PPUSH
5849: LD_STRING D4b-Sol1-8
5851: PPUSH
5852: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5856: LD_VAR 0 1
5860: PUSH
5861: LD_INT 1
5863: ARRAY
5864: PPUSH
5865: CALL_OW 258
5869: PUSH
5870: LD_INT 2
5872: EQUAL
5873: IFFALSE 5891
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
5875: LD_VAR 0 1
5879: PUSH
5880: LD_INT 1
5882: ARRAY
5883: PPUSH
5884: LD_STRING D4b-FSol1-8
5886: PPUSH
5887: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
5891: LD_EXP 1
5895: PPUSH
5896: LD_STRING D4b-JMM-9
5898: PPUSH
5899: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
5903: LD_EXP 8
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5915: LD_ADDR_VAR 0 2
5919: PUSH
5920: LD_INT 22
5922: PUSH
5923: LD_INT 1
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: EMPTY
5931: LIST
5932: PPUSH
5933: CALL_OW 69
5937: PUSH
5938: FOR_IN
5939: IFFALSE 5952
// ComFree ( i ) ;
5941: LD_VAR 0 2
5945: PPUSH
5946: CALL_OW 139
5950: GO 5938
5952: POP
5953: POP
// repeat wait ( 0 0$1 ) ;
5954: LD_INT 35
5956: PPUSH
5957: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
5961: LD_EXP 8
5965: PPUSH
5966: CALL_OW 87
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
5970: LD_EXP 8
5974: PPUSH
5975: LD_INT 1
5977: PPUSH
5978: CALL_OW 296
5982: PUSH
5983: LD_EXP 8
5987: PPUSH
5988: LD_INT 10
5990: PPUSH
5991: CALL_OW 296
5995: LESS
5996: IFFALSE 6012
// begin ComEnterUnit ( Mikhail , dep1 ) ;
5998: LD_EXP 8
6002: PPUSH
6003: LD_INT 1
6005: PPUSH
6006: CALL_OW 120
// end else
6010: GO 6024
// begin ComEnterUnit ( Mikhail , dep2 ) ;
6012: LD_EXP 8
6016: PPUSH
6017: LD_INT 10
6019: PPUSH
6020: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
6024: LD_EXP 8
6028: PPUSH
6029: CALL_OW 310
6033: IFFALSE 5954
// mikhailDepot = IsInUnit ( Mikhail ) ;
6035: LD_ADDR_EXP 23
6039: PUSH
6040: LD_EXP 8
6044: PPUSH
6045: CALL_OW 310
6049: ST_TO_ADDR
// InGameOff ;
6050: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6054: LD_STRING M3
6056: PPUSH
6057: CALL_OW 337
// end ; 3 :
6061: GO 6098
6063: LD_INT 3
6065: DOUBLE
6066: EQUAL
6067: IFTRUE 6071
6069: GO 6097
6071: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6072: LD_EXP 8
6076: PPUSH
6077: LD_INT 17
6079: PPUSH
6080: CALL_OW 113
// wait ( 0 0$3 ) ;
6084: LD_INT 105
6086: PPUSH
6087: CALL_OW 67
// InGameOff ;
6091: CALL_OW 9
// end ; end ;
6095: GO 6098
6097: POP
// PrepareTigers ;
6098: CALL 13632 0 0
// RussianTrap ;
6102: CALL 9818 0 0
// tigersRespawn = 1 ;
6106: LD_ADDR_EXP 29
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// end ;
6114: PPOPN 2
6116: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6117: LD_INT 1
6119: PPUSH
6120: CALL_OW 255
6124: PUSH
6125: LD_INT 1
6127: EQUAL
6128: PUSH
6129: LD_INT 10
6131: PPUSH
6132: CALL_OW 255
6136: PUSH
6137: LD_INT 1
6139: EQUAL
6140: AND
6141: PUSH
6142: LD_INT 1
6144: PPUSH
6145: CALL_OW 274
6149: PPUSH
6150: LD_INT 1
6152: PPUSH
6153: CALL_OW 275
6157: PUSH
6158: LD_INT 100
6160: GREATEREQUAL
6161: AND
6162: IFFALSE 6325
6164: GO 6166
6166: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6167: LD_INT 2100
6169: PPUSH
6170: LD_INT 4200
6172: PPUSH
6173: CALL_OW 12
6177: PUSH
6178: LD_INT 1050
6180: PLUS
6181: PPUSH
6182: CALL_OW 67
// PrepareCargoBays ;
6186: CALL 12300 0 0
// cargoRespawn = 1 ;
6190: LD_ADDR_EXP 28
6194: PUSH
6195: LD_INT 1
6197: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6198: LD_EXP 15
6202: PUSH
6203: LD_EXP 16
6207: PUSH
6208: LD_EXP 17
6212: PUSH
6213: LD_EXP 18
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: LIST
6223: PPUSH
6224: LD_INT 36
6226: PPUSH
6227: LD_INT 13
6229: PPUSH
6230: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6234: LD_EXP 15
6238: PUSH
6239: LD_EXP 16
6243: PUSH
6244: LD_EXP 17
6248: PUSH
6249: LD_EXP 18
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: PPUSH
6260: LD_INT 40
6262: PPUSH
6263: LD_INT 20
6265: PPUSH
6266: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6270: LD_EXP 15
6274: PUSH
6275: LD_EXP 16
6279: PUSH
6280: LD_EXP 17
6284: PUSH
6285: LD_EXP 18
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: PPUSH
6296: LD_INT 53
6298: PPUSH
6299: LD_INT 16
6301: PPUSH
6302: CALL_OW 171
// wait ( 0 0$5 ) ;
6306: LD_INT 175
6308: PPUSH
6309: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6313: LD_EXP 17
6317: PPUSH
6318: LD_STRING D5-Rus2-1
6320: PPUSH
6321: CALL_OW 88
// end ;
6325: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6326: LD_EXP 28
6330: PUSH
6331: LD_INT 1
6333: EQUAL
6334: IFFALSE 6524
6336: GO 6338
6338: DISABLE
6339: LD_INT 0
6341: PPUSH
6342: PPUSH
6343: PPUSH
6344: PPUSH
// begin enable ;
6345: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_INT 22
6353: PUSH
6354: LD_INT 3
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: LD_INT 21
6363: PUSH
6364: LD_INT 2
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 34
6373: PUSH
6374: LD_INT 51
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 69
6390: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
6391: LD_ADDR_VAR 0 4
6395: PUSH
6396: LD_INT 22
6398: PUSH
6399: LD_INT 1
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: PUSH
6406: LD_INT 23
6408: PUSH
6409: LD_INT 1
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PPUSH
6420: CALL_OW 69
6424: ST_TO_ADDR
// for i in tmp1 do
6425: LD_ADDR_VAR 0 1
6429: PUSH
6430: LD_VAR 0 3
6434: PUSH
6435: FOR_IN
6436: IFFALSE 6522
// begin for j in tmp2 do
6438: LD_ADDR_VAR 0 2
6442: PUSH
6443: LD_VAR 0 4
6447: PUSH
6448: FOR_IN
6449: IFFALSE 6518
// begin if GetDistUnits ( i , j ) < 7 then
6451: LD_VAR 0 1
6455: PPUSH
6456: LD_VAR 0 2
6460: PPUSH
6461: CALL_OW 296
6465: PUSH
6466: LD_INT 7
6468: LESS
6469: IFFALSE 6516
// begin disable ;
6471: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6472: LD_EXP 15
6476: PUSH
6477: LD_EXP 16
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: PPUSH
6486: LD_INT 7
6488: PPUSH
6489: LD_INT 9
6491: PPUSH
6492: CALL_OW 111
// Say ( driver1 , D5-Rus2-1a ) ;
6496: LD_EXP 17
6500: PPUSH
6501: LD_STRING D5-Rus2-1a
6503: PPUSH
6504: CALL_OW 88
// cargoEscape = 1 ;
6508: LD_ADDR_EXP 20
6512: PUSH
6513: LD_INT 1
6515: ST_TO_ADDR
// end ; end ;
6516: GO 6448
6518: POP
6519: POP
// end ;
6520: GO 6435
6522: POP
6523: POP
// end ;
6524: PPOPN 4
6526: END
// every 0 0$1 trigger cargoEscape > 0 do
6527: LD_EXP 20
6531: PUSH
6532: LD_INT 0
6534: GREATER
6535: IFFALSE 6661
6537: GO 6539
6539: DISABLE
// begin enable ;
6540: ENABLE
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6541: LD_EXP 15
6545: PPUSH
6546: LD_INT 13
6548: PPUSH
6549: CALL_OW 308
6553: PUSH
6554: LD_EXP 17
6558: PPUSH
6559: LD_INT 13
6561: PPUSH
6562: CALL_OW 308
6566: OR
6567: IFFALSE 6601
// begin RemoveUnit ( cargo1 ) ;
6569: LD_EXP 15
6573: PPUSH
6574: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6578: LD_EXP 17
6582: PPUSH
6583: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6587: LD_ADDR_EXP 20
6591: PUSH
6592: LD_EXP 20
6596: PUSH
6597: LD_INT 1
6599: PLUS
6600: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6601: LD_EXP 16
6605: PPUSH
6606: LD_INT 13
6608: PPUSH
6609: CALL_OW 308
6613: PUSH
6614: LD_EXP 18
6618: PPUSH
6619: LD_INT 13
6621: PPUSH
6622: CALL_OW 308
6626: OR
6627: IFFALSE 6661
// begin RemoveUnit ( cargo2 ) ;
6629: LD_EXP 16
6633: PPUSH
6634: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6638: LD_EXP 18
6642: PPUSH
6643: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6647: LD_ADDR_EXP 20
6651: PUSH
6652: LD_EXP 20
6656: PUSH
6657: LD_INT 1
6659: PLUS
6660: ST_TO_ADDR
// end ; end ;
6661: END
// every 0 0$1 trigger cargoEscape > 1 do
6662: LD_EXP 20
6666: PUSH
6667: LD_INT 1
6669: GREATER
6670: IFFALSE 6834
6672: GO 6674
6674: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
6675: LD_INT 4
6677: PPUSH
6678: LD_INT 1
6680: PPUSH
6681: LD_INT 1
6683: PPUSH
6684: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6688: LD_INT 31
6690: PPUSH
6691: LD_INT 1
6693: PPUSH
6694: LD_INT 1
6696: PPUSH
6697: CALL_OW 324
// if IsOK ( Jerry ) then
6701: LD_EXP 7
6705: PPUSH
6706: CALL_OW 302
6710: IFFALSE 6726
// begin Say ( Jerry , D5a-Sol1-1 ) ;
6712: LD_EXP 7
6716: PPUSH
6717: LD_STRING D5a-Sol1-1
6719: PPUSH
6720: CALL_OW 88
// end else
6724: GO 6822
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
6726: LD_INT 22
6728: PUSH
6729: LD_INT 1
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: LD_INT 23
6738: PUSH
6739: LD_INT 1
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: PUSH
6746: LD_INT 26
6748: PUSH
6749: LD_INT 1
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: PPUSH
6761: CALL_OW 69
6765: PUSH
6766: LD_INT 2
6768: PPUSH
6769: LD_INT 22
6771: PUSH
6772: LD_INT 1
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PUSH
6779: LD_INT 23
6781: PUSH
6782: LD_INT 1
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 26
6791: PUSH
6792: LD_INT 1
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: LIST
6803: PPUSH
6804: CALL_OW 69
6808: PPUSH
6809: CALL_OW 12
6813: ARRAY
6814: PPUSH
6815: LD_STRING D5a-Sol1-1
6817: PPUSH
6818: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6822: LD_EXP 1
6826: PPUSH
6827: LD_STRING D5a-JMM-1
6829: PPUSH
6830: CALL_OW 88
// end ;
6834: END
// every 0 0$1 trigger GetLives ( dep1 ) < 1000 or GetLives ( dep2 ) < 1000 do
6835: LD_INT 1
6837: PPUSH
6838: CALL_OW 256
6842: PUSH
6843: LD_INT 1000
6845: LESS
6846: PUSH
6847: LD_INT 10
6849: PPUSH
6850: CALL_OW 256
6854: PUSH
6855: LD_INT 1000
6857: LESS
6858: OR
6859: IFFALSE 6876
6861: GO 6863
6863: DISABLE
// Say ( JMM ,  D8-JMM-1 ) ;
6864: LD_EXP 1
6868: PPUSH
6869: LD_STRING  D8-JMM-1
6871: PPUSH
6872: CALL_OW 88
6876: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6877: LD_EXP 8
6881: PPUSH
6882: CALL_OW 310
6886: PUSH
6887: LD_INT 1
6889: EQUAL
6890: PUSH
6891: LD_EXP 22
6895: PUSH
6896: LD_INT 3
6898: EQUAL
6899: NOT
6900: AND
6901: IFFALSE 6923
6903: GO 6905
6905: DISABLE
// begin mikhailInBase = 1 ;
6906: LD_ADDR_EXP 22
6910: PUSH
6911: LD_INT 1
6913: ST_TO_ADDR
// mikhailStatus = 1 ;
6914: LD_ADDR_EXP 21
6918: PUSH
6919: LD_INT 1
6921: ST_TO_ADDR
// enable ;
6922: ENABLE
// end ;
6923: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
6924: LD_EXP 8
6928: PPUSH
6929: LD_INT 25
6931: PPUSH
6932: CALL_OW 308
6936: PUSH
6937: LD_EXP 22
6941: PUSH
6942: LD_INT 1
6944: EQUAL
6945: AND
6946: PUSH
6947: LD_EXP 8
6951: PPUSH
6952: CALL_OW 255
6956: PUSH
6957: LD_INT 1
6959: EQUAL
6960: AND
6961: IFFALSE 7291
6963: GO 6965
6965: DISABLE
// begin enable ;
6966: ENABLE
// case query ( QMikh2 ) of 1 :
6967: LD_STRING QMikh2
6969: PPUSH
6970: CALL_OW 97
6974: PUSH
6975: LD_INT 1
6977: DOUBLE
6978: EQUAL
6979: IFTRUE 6983
6981: GO 7050
6983: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
6984: LD_INT 1
6986: PPUSH
6987: LD_INT 6
6989: PPUSH
6990: LD_INT 2
6992: PPUSH
6993: LD_INT 1
6995: PPUSH
6996: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7000: LD_EXP 8
7004: PPUSH
7005: LD_INT 6
7007: PPUSH
7008: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7012: LD_EXP 8
7016: PPUSH
7017: CALL_OW 122
// wait ( 0 0$1 ) ;
7021: LD_INT 35
7023: PPUSH
7024: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7028: LD_EXP 8
7032: PPUSH
7033: LD_INT 17
7035: PPUSH
7036: CALL_OW 113
// mikhailInbase = 0 ;
7040: LD_ADDR_EXP 22
7044: PUSH
7045: LD_INT 0
7047: ST_TO_ADDR
// end ; 2 :
7048: GO 7291
7050: LD_INT 2
7052: DOUBLE
7053: EQUAL
7054: IFTRUE 7058
7056: GO 7231
7058: POP
// begin mikhailInBase = 2 ;
7059: LD_ADDR_EXP 22
7063: PUSH
7064: LD_INT 2
7066: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7067: LD_EXP 8
7071: PPUSH
7072: LD_INT 6
7074: PPUSH
7075: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7079: LD_EXP 8
7083: PPUSH
7084: CALL_OW 122
// wait ( 0 0$1 ) ;
7088: LD_INT 35
7090: PPUSH
7091: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7095: LD_EXP 8
7099: PPUSH
7100: LD_EXP 8
7104: PPUSH
7105: CALL_OW 250
7109: PUSH
7110: LD_INT 2
7112: PLUS
7113: PPUSH
7114: LD_EXP 8
7118: PPUSH
7119: CALL_OW 251
7123: PUSH
7124: LD_INT 2
7126: PLUS
7127: PPUSH
7128: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7132: LD_EXP 8
7136: PPUSH
7137: LD_EXP 8
7141: PPUSH
7142: CALL_OW 250
7146: PUSH
7147: LD_INT 1
7149: PLUS
7150: PPUSH
7151: LD_EXP 8
7155: PPUSH
7156: CALL_OW 251
7160: PUSH
7161: LD_INT 2
7163: PLUS
7164: PPUSH
7165: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7169: LD_EXP 8
7173: PPUSH
7174: LD_EXP 8
7178: PPUSH
7179: CALL_OW 250
7183: PUSH
7184: LD_INT 2
7186: PLUS
7187: PPUSH
7188: LD_EXP 8
7192: PPUSH
7193: CALL_OW 251
7197: PPUSH
7198: CALL_OW 171
// wait ( 0 0$5 ) ;
7202: LD_INT 175
7204: PPUSH
7205: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7209: LD_EXP 8
7213: PPUSH
7214: LD_INT 25
7216: PPUSH
7217: CALL_OW 113
// mikhailInBase = 4 ;
7221: LD_ADDR_EXP 22
7225: PUSH
7226: LD_INT 4
7228: ST_TO_ADDR
// end ; 3 :
7229: GO 7291
7231: LD_INT 3
7233: DOUBLE
7234: EQUAL
7235: IFTRUE 7239
7237: GO 7290
7239: POP
// begin SetSide ( Mikhail , 6 ) ;
7240: LD_EXP 8
7244: PPUSH
7245: LD_INT 6
7247: PPUSH
7248: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7252: LD_EXP 8
7256: PPUSH
7257: CALL_OW 122
// wait ( 0 0$1 ) ;
7261: LD_INT 35
7263: PPUSH
7264: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7268: LD_EXP 8
7272: PPUSH
7273: LD_INT 17
7275: PPUSH
7276: CALL_OW 113
// mikhailInbase = 3 ;
7280: LD_ADDR_EXP 22
7284: PUSH
7285: LD_INT 3
7287: ST_TO_ADDR
// end ; end ;
7288: GO 7291
7290: POP
// end ;
7291: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7292: LD_EXP 8
7296: PPUSH
7297: LD_INT 25
7299: PPUSH
7300: CALL_OW 308
7304: PUSH
7305: LD_EXP 22
7309: PUSH
7310: LD_INT 4
7312: EQUAL
7313: AND
7314: IFFALSE 7412
7316: GO 7318
7318: DISABLE
// begin enable ;
7319: ENABLE
// SetSide ( Mikhail , 1 ) ;
7320: LD_EXP 8
7324: PPUSH
7325: LD_INT 1
7327: PPUSH
7328: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7332: LD_INT 35
7334: PPUSH
7335: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
7339: LD_EXP 8
7343: PPUSH
7344: LD_INT 1
7346: PPUSH
7347: CALL_OW 296
7351: PUSH
7352: LD_EXP 8
7356: PPUSH
7357: LD_INT 10
7359: PPUSH
7360: CALL_OW 296
7364: LESS
7365: IFFALSE 7381
// begin ComEnterUnit ( Mikhail , dep1 ) ;
7367: LD_EXP 8
7371: PPUSH
7372: LD_INT 1
7374: PPUSH
7375: CALL_OW 120
// end else
7379: GO 7393
// begin ComEnterUnit ( Mikhail , dep2 ) ;
7381: LD_EXP 8
7385: PPUSH
7386: LD_INT 10
7388: PPUSH
7389: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
7393: LD_EXP 8
7397: PPUSH
7398: CALL_OW 310
7402: IFFALSE 7332
// mikhailInBase = 1 ;
7404: LD_ADDR_EXP 22
7408: PUSH
7409: LD_INT 1
7411: ST_TO_ADDR
// end ;
7412: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7413: LD_EXP 8
7417: PPUSH
7418: CALL_OW 310
7422: PUSH
7423: LD_EXP 22
7427: PUSH
7428: LD_INT 3
7430: EQUAL
7431: NOT
7432: AND
7433: IFFALSE 7559
7435: GO 7437
7437: DISABLE
// begin enable ;
7438: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7439: LD_INT 22
7441: PUSH
7442: LD_INT 1
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PUSH
7449: LD_INT 21
7451: PUSH
7452: LD_INT 1
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: PUSH
7459: LD_INT 91
7461: PUSH
7462: LD_EXP 8
7466: PPUSH
7467: CALL_OW 310
7471: PUSH
7472: LD_INT 10
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: LIST
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: LIST
7484: PPUSH
7485: CALL_OW 69
7489: PUSH
7490: LD_INT 1
7492: EQUAL
7493: IFFALSE 7559
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7495: LD_INT 1
7497: PPUSH
7498: LD_INT 6
7500: PPUSH
7501: LD_INT 2
7503: PPUSH
7504: LD_INT 1
7506: PPUSH
7507: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7511: LD_EXP 8
7515: PPUSH
7516: LD_INT 6
7518: PPUSH
7519: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7523: LD_EXP 8
7527: PPUSH
7528: CALL_OW 122
// wait ( 0 0$1 ) ;
7532: LD_INT 35
7534: PPUSH
7535: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7539: LD_EXP 8
7543: PPUSH
7544: LD_INT 17
7546: PPUSH
7547: CALL_OW 113
// mikhailStatus = 3 ;
7551: LD_ADDR_EXP 21
7555: PUSH
7556: LD_INT 3
7558: ST_TO_ADDR
// end ; end ;
7559: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7560: LD_EXP 1
7564: PPUSH
7565: LD_EXP 23
7569: PPUSH
7570: CALL_OW 296
7574: PUSH
7575: LD_INT 5
7577: LESS
7578: PUSH
7579: LD_EXP 21
7583: PUSH
7584: LD_INT 3
7586: EQUAL
7587: AND
7588: PUSH
7589: LD_EXP 22
7593: PUSH
7594: LD_INT 3
7596: EQUAL
7597: NOT
7598: AND
7599: IFFALSE 7815
7601: GO 7603
7603: DISABLE
7604: LD_INT 0
7606: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
7607: LD_ADDR_VAR 0 1
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 1
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 1
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 26
7634: PUSH
7635: LD_INT 1
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: PPUSH
7647: CALL_OW 69
7651: PUSH
7652: LD_EXP 1
7656: PUSH
7657: EMPTY
7658: LIST
7659: DIFF
7660: ST_TO_ADDR
// DialogueOn ;
7661: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7665: LD_EXP 1
7669: PPUSH
7670: LD_STRING D7-JMM-1
7672: PPUSH
7673: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7677: LD_VAR 0 1
7681: PUSH
7682: LD_INT 1
7684: ARRAY
7685: PPUSH
7686: LD_STRING D7-Sol1-1
7688: PPUSH
7689: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7693: LD_EXP 1
7697: PPUSH
7698: LD_STRING D7-JMM-2
7700: PPUSH
7701: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7705: LD_VAR 0 1
7709: PUSH
7710: LD_INT 1
7712: ARRAY
7713: PPUSH
7714: LD_STRING D7-Sol1-2
7716: PPUSH
7717: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7721: LD_EXP 1
7725: PPUSH
7726: LD_STRING D7-JMM-3
7728: PPUSH
7729: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7733: LD_VAR 0 1
7737: PUSH
7738: LD_INT 1
7740: ARRAY
7741: PPUSH
7742: LD_STRING D7-Sol1-3
7744: PPUSH
7745: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7749: LD_EXP 3
7753: PPUSH
7754: CALL_OW 302
7758: PUSH
7759: LD_EXP 4
7763: PPUSH
7764: CALL_OW 302
7768: AND
7769: IFFALSE 7811
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7771: LD_EXP 3
7775: PPUSH
7776: LD_STRING D7-Cyrus-3
7778: PPUSH
7779: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7783: LD_VAR 0 1
7787: PUSH
7788: LD_INT 1
7790: ARRAY
7791: PPUSH
7792: LD_STRING D7-Sol1-4
7794: PPUSH
7795: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7799: LD_EXP 4
7803: PPUSH
7804: LD_STRING D7-Lisa-4
7806: PPUSH
7807: CALL_OW 88
// end ; DialogueOff ;
7811: CALL_OW 7
// end ;
7815: PPOPN 1
7817: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7818: LD_EXP 8
7822: PPUSH
7823: CALL_OW 303
7827: PUSH
7828: LD_EXP 21
7832: PUSH
7833: LD_INT 3
7835: EQUAL
7836: AND
7837: IFFALSE 7851
7839: GO 7841
7841: DISABLE
// begin enable ;
7842: ENABLE
// mikhailStatus = 2 ;
7843: LD_ADDR_EXP 21
7847: PUSH
7848: LD_INT 2
7850: ST_TO_ADDR
// end ;
7851: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7852: LD_EXP 8
7856: PPUSH
7857: LD_INT 17
7859: PPUSH
7860: CALL_OW 308
7864: PUSH
7865: LD_EXP 8
7869: PPUSH
7870: CALL_OW 255
7874: PUSH
7875: LD_INT 6
7877: EQUAL
7878: AND
7879: IFFALSE 7912
7881: GO 7883
7883: DISABLE
// begin if not mikhailInBase = 3 then
7884: LD_EXP 22
7888: PUSH
7889: LD_INT 3
7891: EQUAL
7892: NOT
7893: IFFALSE 7903
// mikhailStatus = 3 ;
7895: LD_ADDR_EXP 21
7899: PUSH
7900: LD_INT 3
7902: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
7903: LD_EXP 8
7907: PPUSH
7908: CALL_OW 64
// end ;
7912: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
7913: LD_EXP 21
7917: PUSH
7918: LD_INT 3
7920: EQUAL
7921: PUSH
7922: LD_EXP 8
7926: PPUSH
7927: CALL_OW 255
7931: PUSH
7932: LD_INT 6
7934: EQUAL
7935: AND
7936: IFFALSE 8102
7938: GO 7940
7940: DISABLE
7941: LD_INT 0
7943: PPUSH
7944: PPUSH
// begin enable ;
7945: ENABLE
// if IsOk ( Mikhail ) then
7946: LD_EXP 8
7950: PPUSH
7951: CALL_OW 302
7955: IFFALSE 8102
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_EXP 8
7966: PPUSH
7967: LD_INT 22
7969: PUSH
7970: LD_INT 1
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: PUSH
7977: LD_INT 21
7979: PUSH
7980: LD_INT 1
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PPUSH
7991: CALL_OW 69
7995: PPUSH
7996: CALL 9974 0 2
8000: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8001: LD_VAR 0 2
8005: PPUSH
8006: LD_EXP 8
8010: PPUSH
8011: CALL_OW 296
8015: PUSH
8016: LD_INT 8
8018: LESS
8019: IFFALSE 8102
// begin if GetSex ( attacker ) = sex_male then
8021: LD_VAR 0 2
8025: PPUSH
8026: CALL_OW 258
8030: PUSH
8031: LD_INT 1
8033: EQUAL
8034: IFFALSE 8070
// begin disable ;
8036: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8037: LD_VAR 0 2
8041: PPUSH
8042: LD_STRING D7a-Sol1-1
8044: PPUSH
8045: CALL_OW 88
// wait ( 0 0$2 ) ;
8049: LD_INT 70
8051: PPUSH
8052: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8056: LD_VAR 0 2
8060: PPUSH
8061: LD_STRING D7a-Sol1-1a
8063: PPUSH
8064: CALL_OW 88
// end else
8068: GO 8102
// begin disable ;
8070: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8071: LD_VAR 0 2
8075: PPUSH
8076: LD_STRING D7a-FSol1-1
8078: PPUSH
8079: CALL_OW 88
// wait ( 0 0$2 ) ;
8083: LD_INT 70
8085: PPUSH
8086: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_STRING D7a-FSol1-1a
8097: PPUSH
8098: CALL_OW 88
// end ; end ; end ; end ;
8102: PPOPN 2
8104: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8105: LD_EXP 27
8109: PUSH
8110: LD_INT 1
8112: EQUAL
8113: PUSH
8114: LD_INT 22
8116: PPUSH
8117: LD_INT 22
8119: PUSH
8120: LD_INT 3
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 21
8129: PUSH
8130: LD_INT 1
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PPUSH
8141: CALL_OW 70
8145: PUSH
8146: LD_INT 2
8148: GREATER
8149: AND
8150: PUSH
8151: LD_INT 22
8153: PPUSH
8154: LD_INT 22
8156: PUSH
8157: LD_INT 1
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 2
8166: PUSH
8167: LD_INT 21
8169: PUSH
8170: LD_INT 1
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 59
8179: PUSH
8180: EMPTY
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PPUSH
8192: CALL_OW 70
8196: PUSH
8197: LD_INT 0
8199: EQUAL
8200: AND
8201: IFFALSE 8216
8203: GO 8205
8205: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8206: LD_INT 1
8208: PPUSH
8209: LD_INT 3
8211: PPUSH
8212: CALL_OW 235
// end ;
8216: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8217: LD_EXP 29
8221: PUSH
8222: LD_INT 1
8224: EQUAL
8225: PUSH
8226: LD_INT 22
8228: PUSH
8229: LD_INT 0
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: PUSH
8236: LD_INT 25
8238: PUSH
8239: LD_INT 14
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: PPUSH
8250: CALL_OW 69
8254: PUSH
8255: LD_INT 0
8257: EQUAL
8258: AND
8259: IFFALSE 8353
8261: GO 8263
8263: DISABLE
8264: LD_INT 0
8266: PPUSH
8267: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8268: LD_ADDR_VAR 0 2
8272: PUSH
8273: LD_INT 22
8275: PUSH
8276: LD_INT 1
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: LD_INT 21
8285: PUSH
8286: LD_INT 1
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: LD_INT 23
8295: PUSH
8296: LD_INT 1
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: LIST
8307: PPUSH
8308: CALL_OW 69
8312: ST_TO_ADDR
// for i in tmp do
8313: LD_ADDR_VAR 0 1
8317: PUSH
8318: LD_VAR 0 2
8322: PUSH
8323: FOR_IN
8324: IFFALSE 8351
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8326: LD_VAR 0 1
8330: PPUSH
8331: LD_INT 1
8333: PPUSH
8334: LD_INT 4
8336: PPUSH
8337: CALL_OW 12
8341: PPUSH
8342: LD_INT 300
8344: PPUSH
8345: CALL_OW 492
// end ;
8349: GO 8323
8351: POP
8352: POP
// end ; end_of_file
8353: PPOPN 2
8355: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8356: LD_INT 0
8358: PPUSH
8359: PPUSH
8360: PPUSH
8361: PPUSH
// for i = 1 to count do
8362: LD_ADDR_VAR 0 8
8366: PUSH
8367: DOUBLE
8368: LD_INT 1
8370: DEC
8371: ST_TO_ADDR
8372: LD_VAR 0 6
8376: PUSH
8377: FOR_TO
8378: IFFALSE 8459
// begin uc_side = side ;
8380: LD_ADDR_OWVAR 20
8384: PUSH
8385: LD_VAR 0 1
8389: ST_TO_ADDR
// uc_nation = nation ;
8390: LD_ADDR_OWVAR 21
8394: PUSH
8395: LD_VAR 0 2
8399: ST_TO_ADDR
// hc_gallery =  ;
8400: LD_ADDR_OWVAR 33
8404: PUSH
8405: LD_STRING 
8407: ST_TO_ADDR
// hc_name =  ;
8408: LD_ADDR_OWVAR 26
8412: PUSH
8413: LD_STRING 
8415: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8416: LD_INT 0
8418: PPUSH
8419: LD_VAR 0 5
8423: PPUSH
8424: LD_VAR 0 4
8428: PPUSH
8429: CALL_OW 380
// un = CreateHuman ;
8433: LD_ADDR_VAR 0 10
8437: PUSH
8438: CALL_OW 44
8442: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8443: LD_VAR 0 10
8447: PPUSH
8448: LD_VAR 0 3
8452: PPUSH
8453: CALL_OW 52
// end ;
8457: GO 8377
8459: POP
8460: POP
// end ;
8461: LD_VAR 0 7
8465: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8466: LD_INT 0
8468: PPUSH
8469: PPUSH
8470: PPUSH
// uc_side := GetSide ( b ) ;
8471: LD_ADDR_OWVAR 20
8475: PUSH
8476: LD_VAR 0 2
8480: PPUSH
8481: CALL_OW 255
8485: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8486: LD_ADDR_OWVAR 21
8490: PUSH
8491: LD_VAR 0 2
8495: PPUSH
8496: CALL_OW 248
8500: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8501: LD_INT 0
8503: PPUSH
8504: LD_INT 1
8506: PPUSH
8507: LD_VAR 0 1
8511: PPUSH
8512: CALL_OW 380
// un = CreateHuman ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: CALL_OW 44
8525: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8526: LD_ADDR_VAR 0 5
8530: PUSH
8531: LD_VAR 0 2
8535: PPUSH
8536: CALL_OW 254
8540: PUSH
8541: LD_INT 3
8543: MINUS
8544: ST_TO_ADDR
// if dir < 0 then
8545: LD_VAR 0 5
8549: PUSH
8550: LD_INT 0
8552: LESS
8553: IFFALSE 8569
// dir := 6 + dir ;
8555: LD_ADDR_VAR 0 5
8559: PUSH
8560: LD_INT 6
8562: PUSH
8563: LD_VAR 0 5
8567: PLUS
8568: ST_TO_ADDR
// SetDir ( un , dir ) ;
8569: LD_VAR 0 4
8573: PPUSH
8574: LD_VAR 0 5
8578: PPUSH
8579: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8583: LD_VAR 0 4
8587: PPUSH
8588: LD_VAR 0 2
8592: PPUSH
8593: CALL_OW 52
// end ;
8597: LD_VAR 0 3
8601: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8602: LD_INT 0
8604: PPUSH
8605: PPUSH
8606: PPUSH
8607: PPUSH
8608: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8609: LD_ADDR_VAR 0 7
8613: PUSH
8614: LD_INT 22
8616: PUSH
8617: LD_VAR 0 1
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: PUSH
8626: LD_INT 25
8628: PUSH
8629: LD_INT 2
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: LD_INT 24
8638: PUSH
8639: LD_INT 1000
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 69
8655: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8656: LD_ADDR_VAR 0 5
8660: PUSH
8661: LD_VAR 0 3
8665: PPUSH
8666: LD_INT 22
8668: PUSH
8669: LD_VAR 0 1
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 21
8680: PUSH
8681: LD_INT 3
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 3
8690: PUSH
8691: LD_INT 24
8693: PUSH
8694: LD_INT 1000
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: PPUSH
8713: CALL_OW 70
8717: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8718: LD_VAR 0 5
8722: PUSH
8723: LD_INT 0
8725: GREATER
8726: PUSH
8727: LD_VAR 0 7
8731: PUSH
8732: LD_INT 0
8734: GREATER
8735: AND
8736: IFFALSE 8802
// begin for i in engineerOk_list do
8738: LD_ADDR_VAR 0 6
8742: PUSH
8743: LD_VAR 0 7
8747: PUSH
8748: FOR_IN
8749: IFFALSE 8800
// begin for j in buildings_list do
8751: LD_ADDR_VAR 0 8
8755: PUSH
8756: LD_VAR 0 5
8760: PUSH
8761: FOR_IN
8762: IFFALSE 8796
// begin AddComExitBuilding ( i ) ;
8764: LD_VAR 0 6
8768: PPUSH
8769: CALL_OW 182
// wait ( 0 0$1 ) ;
8773: LD_INT 35
8775: PPUSH
8776: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8780: LD_VAR 0 6
8784: PPUSH
8785: LD_VAR 0 8
8789: PPUSH
8790: CALL_OW 190
// end ;
8794: GO 8761
8796: POP
8797: POP
// end ;
8798: GO 8748
8800: POP
8801: POP
// end ; if buildings_list = 0 then
8802: LD_VAR 0 5
8806: PUSH
8807: LD_INT 0
8809: EQUAL
8810: IFFALSE 8843
// begin for i in engineerOK_list do
8812: LD_ADDR_VAR 0 6
8816: PUSH
8817: LD_VAR 0 7
8821: PUSH
8822: FOR_IN
8823: IFFALSE 8841
// begin ComEnterUnit ( i , building ) ;
8825: LD_VAR 0 6
8829: PPUSH
8830: LD_VAR 0 2
8834: PPUSH
8835: CALL_OW 120
// end ;
8839: GO 8822
8841: POP
8842: POP
// end ; end ;
8843: LD_VAR 0 4
8847: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8848: LD_INT 0
8850: PPUSH
8851: PPUSH
8852: PPUSH
8853: PPUSH
8854: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8855: LD_ADDR_VAR 0 6
8859: PUSH
8860: LD_INT 22
8862: PUSH
8863: LD_VAR 0 1
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 25
8874: PUSH
8875: LD_INT 4
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PPUSH
8886: CALL_OW 69
8890: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
8891: LD_ADDR_VAR 0 9
8895: PUSH
8896: LD_VAR 0 3
8900: PPUSH
8901: LD_INT 22
8903: PUSH
8904: LD_VAR 0 1
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: LD_INT 21
8915: PUSH
8916: LD_INT 1
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: LD_INT 24
8928: PUSH
8929: LD_INT 650
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: PPUSH
8945: CALL_OW 70
8949: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
8950: LD_VAR 0 9
8954: PUSH
8955: LD_INT 0
8957: GREATER
8958: PUSH
8959: LD_VAR 0 6
8963: PUSH
8964: LD_INT 0
8966: GREATER
8967: AND
8968: IFFALSE 9095
// begin for i = 1 to damageUnits do
8970: LD_ADDR_VAR 0 7
8974: PUSH
8975: DOUBLE
8976: LD_INT 1
8978: DEC
8979: ST_TO_ADDR
8980: LD_VAR 0 9
8984: PUSH
8985: FOR_TO
8986: IFFALSE 9010
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
8988: LD_VAR 0 9
8992: PUSH
8993: LD_VAR 0 7
8997: ARRAY
8998: PPUSH
8999: LD_VAR 0 2
9003: PPUSH
9004: CALL_OW 113
9008: GO 8985
9010: POP
9011: POP
// for i in sci_list do
9012: LD_ADDR_VAR 0 7
9016: PUSH
9017: LD_VAR 0 6
9021: PUSH
9022: FOR_IN
9023: IFFALSE 9091
// begin ComExitBuilding ( i ) ;
9025: LD_VAR 0 7
9029: PPUSH
9030: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9034: LD_ADDR_VAR 0 8
9038: PUSH
9039: LD_VAR 0 2
9043: PPUSH
9044: LD_INT 22
9046: PUSH
9047: LD_VAR 0 1
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PPUSH
9056: CALL_OW 70
9060: PUSH
9061: FOR_IN
9062: IFFALSE 9087
// begin AddComHeal ( i , j ) ;
9064: LD_VAR 0 7
9068: PPUSH
9069: LD_VAR 0 8
9073: PPUSH
9074: CALL_OW 188
// wait ( 1 1$0 ) ;
9078: LD_INT 2100
9080: PPUSH
9081: CALL_OW 67
// end ;
9085: GO 9061
9087: POP
9088: POP
// end ;
9089: GO 9022
9091: POP
9092: POP
// end else
9093: GO 9109
// begin AddComEnterUnit ( sci_list , build ) ;
9095: LD_VAR 0 6
9099: PPUSH
9100: LD_VAR 0 4
9104: PPUSH
9105: CALL_OW 180
// end ; end ;
9109: LD_VAR 0 5
9113: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9114: LD_INT 0
9116: PPUSH
9117: PPUSH
9118: PPUSH
9119: PPUSH
9120: PPUSH
9121: PPUSH
9122: PPUSH
9123: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9124: LD_ADDR_VAR 0 7
9128: PUSH
9129: LD_VAR 0 3
9133: PPUSH
9134: LD_INT 22
9136: PUSH
9137: LD_VAR 0 1
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PUSH
9146: LD_INT 21
9148: PUSH
9149: LD_INT 2
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: LD_INT 24
9158: PUSH
9159: LD_INT 550
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: PUSH
9166: LD_INT 34
9168: PUSH
9169: LD_INT 46
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: PPUSH
9182: CALL_OW 70
9186: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9187: LD_ADDR_VAR 0 8
9191: PUSH
9192: LD_VAR 0 3
9196: PPUSH
9197: LD_INT 22
9199: PUSH
9200: LD_VAR 0 1
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PUSH
9209: LD_INT 21
9211: PUSH
9212: LD_INT 2
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: PUSH
9219: LD_INT 34
9221: PUSH
9222: LD_INT 46
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PUSH
9229: LD_INT 3
9231: PUSH
9232: LD_INT 24
9234: PUSH
9235: LD_INT 550
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: PPUSH
9252: CALL_OW 70
9256: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9257: LD_ADDR_VAR 0 9
9261: PUSH
9262: LD_VAR 0 2
9266: PPUSH
9267: LD_INT 22
9269: PUSH
9270: LD_VAR 0 1
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 21
9281: PUSH
9282: LD_INT 2
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 34
9291: PUSH
9292: LD_INT 46
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 24
9301: PUSH
9302: LD_INT 1000
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: LD_INT 58
9311: PUSH
9312: EMPTY
9313: LIST
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: PPUSH
9322: CALL_OW 70
9326: ST_TO_ADDR
// for i in damageVehicle_list do
9327: LD_ADDR_VAR 0 5
9331: PUSH
9332: LD_VAR 0 8
9336: PUSH
9337: FOR_IN
9338: IFFALSE 9357
// mechanicInside_list = UnitsInside ( i ) ;
9340: LD_ADDR_VAR 0 10
9344: PUSH
9345: LD_VAR 0 5
9349: PPUSH
9350: CALL_OW 313
9354: ST_TO_ADDR
9355: GO 9337
9357: POP
9358: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9359: LD_ADDR_VAR 0 11
9363: PUSH
9364: LD_VAR 0 2
9368: PPUSH
9369: LD_INT 22
9371: PUSH
9372: LD_VAR 0 1
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 25
9383: PUSH
9384: LD_INT 3
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PPUSH
9395: CALL_OW 70
9399: ST_TO_ADDR
// if damageVehicle_list > 0 then
9400: LD_VAR 0 8
9404: PUSH
9405: LD_INT 0
9407: GREATER
9408: IFFALSE 9481
// begin for i in damageVehicle_list do
9410: LD_ADDR_VAR 0 5
9414: PUSH
9415: LD_VAR 0 8
9419: PUSH
9420: FOR_IN
9421: IFFALSE 9479
// begin for j in mechanicInside_list do
9423: LD_ADDR_VAR 0 6
9427: PUSH
9428: LD_VAR 0 10
9432: PUSH
9433: FOR_IN
9434: IFFALSE 9475
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9436: LD_VAR 0 8
9440: PPUSH
9441: LD_VAR 0 2
9445: PPUSH
9446: CALL_OW 113
// AddComExitVehicle ( j ) ;
9450: LD_VAR 0 6
9454: PPUSH
9455: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9459: LD_VAR 0 6
9463: PPUSH
9464: LD_VAR 0 5
9468: PPUSH
9469: CALL_OW 189
// end ;
9473: GO 9433
9475: POP
9476: POP
// end ;
9477: GO 9420
9479: POP
9480: POP
// end ; if emptyVehicle_list > 0 then
9481: LD_VAR 0 9
9485: PUSH
9486: LD_INT 0
9488: GREATER
9489: IFFALSE 9539
// begin for i in emptyVehicle_list do
9491: LD_ADDR_VAR 0 5
9495: PUSH
9496: LD_VAR 0 9
9500: PUSH
9501: FOR_IN
9502: IFFALSE 9537
// begin for j in mechanicOutside_list do
9504: LD_ADDR_VAR 0 6
9508: PUSH
9509: LD_VAR 0 11
9513: PUSH
9514: FOR_IN
9515: IFFALSE 9533
// begin AddComEnterUnit ( j , i ) ;
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_VAR 0 5
9526: PPUSH
9527: CALL_OW 180
// end ;
9531: GO 9514
9533: POP
9534: POP
// end ;
9535: GO 9501
9537: POP
9538: POP
// end ; if VehicleOK_list > 0 then
9539: LD_VAR 0 7
9543: PUSH
9544: LD_INT 0
9546: GREATER
9547: IFFALSE 9581
// begin for i in VehicleOK_list do
9549: LD_ADDR_VAR 0 5
9553: PUSH
9554: LD_VAR 0 7
9558: PUSH
9559: FOR_IN
9560: IFFALSE 9579
// ComAgressiveMove ( i , 110 , 29 ) ;
9562: LD_VAR 0 5
9566: PPUSH
9567: LD_INT 110
9569: PPUSH
9570: LD_INT 29
9572: PPUSH
9573: CALL_OW 114
9577: GO 9559
9579: POP
9580: POP
// end ; end ;
9581: LD_VAR 0 4
9585: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9586: LD_INT 0
9588: PPUSH
9589: PPUSH
9590: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9591: LD_VAR 0 1
9595: PPUSH
9596: LD_INT 22
9598: PUSH
9599: LD_VAR 0 2
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 2
9610: PUSH
9611: LD_INT 21
9613: PUSH
9614: LD_INT 2
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: LD_INT 21
9623: PUSH
9624: LD_INT 1
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: LIST
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PPUSH
9640: CALL_OW 70
9644: PUSH
9645: LD_VAR 0 5
9649: GREATER
9650: IFFALSE 9782
// begin for i in defendersList do
9652: LD_ADDR_VAR 0 7
9656: PUSH
9657: LD_VAR 0 3
9661: PUSH
9662: FOR_IN
9663: IFFALSE 9778
// begin AddComExitBuilding ( i ) ;
9665: LD_VAR 0 7
9669: PPUSH
9670: CALL_OW 182
// wait ( 0 0$1 ) ;
9674: LD_INT 35
9676: PPUSH
9677: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9681: LD_ADDR_VAR 0 8
9685: PUSH
9686: LD_VAR 0 1
9690: PPUSH
9691: LD_INT 22
9693: PUSH
9694: LD_VAR 0 2
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: LD_INT 2
9705: PUSH
9706: LD_INT 21
9708: PUSH
9709: LD_INT 2
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: LD_INT 21
9718: PUSH
9719: LD_INT 1
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: LIST
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PPUSH
9735: CALL_OW 70
9739: PUSH
9740: FOR_IN
9741: IFFALSE 9774
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9743: LD_VAR 0 7
9747: PPUSH
9748: LD_VAR 0 8
9752: PPUSH
9753: CALL_OW 250
9757: PPUSH
9758: LD_VAR 0 8
9762: PPUSH
9763: CALL_OW 251
9767: PPUSH
9768: CALL_OW 174
9772: GO 9740
9774: POP
9775: POP
// end ;
9776: GO 9662
9778: POP
9779: POP
// end else
9780: GO 9813
// begin for i in defendersList do
9782: LD_ADDR_VAR 0 7
9786: PUSH
9787: LD_VAR 0 3
9791: PUSH
9792: FOR_IN
9793: IFFALSE 9811
// ComEnterUnit ( i , build ) ;
9795: LD_VAR 0 7
9799: PPUSH
9800: LD_VAR 0 4
9804: PPUSH
9805: CALL_OW 120
9809: GO 9792
9811: POP
9812: POP
// end ; end ;
9813: LD_VAR 0 6
9817: RET
// export function RussianTrap ; var i ; begin
9818: LD_INT 0
9820: PPUSH
9821: PPUSH
// if GetSide ( Brian ) = 4 then
9822: LD_EXP 6
9826: PPUSH
9827: CALL_OW 255
9831: PUSH
9832: LD_INT 4
9834: EQUAL
9835: IFFALSE 9858
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9837: LD_EXP 6
9841: PUSH
9842: LD_EXP 7
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PPUSH
9851: LD_INT 0
9853: PPUSH
9854: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
9858: LD_ADDR_VAR 0 2
9862: PUSH
9863: LD_INT 22
9865: PUSH
9866: LD_INT 3
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 21
9875: PUSH
9876: LD_INT 1
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PPUSH
9887: CALL_OW 69
9891: PUSH
9892: FOR_IN
9893: IFFALSE 9967
// begin ComExitBuilding ( i ) ;
9895: LD_VAR 0 2
9899: PPUSH
9900: CALL_OW 122
// wait ( 0 0$1 ) ;
9904: LD_INT 35
9906: PPUSH
9907: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
9911: LD_VAR 0 2
9915: PPUSH
9916: LD_INT 120
9918: PPUSH
9919: LD_INT 56
9921: PPUSH
9922: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
9926: LD_VAR 0 2
9930: PPUSH
9931: LD_INT 111
9933: PPUSH
9934: LD_INT 37
9936: PPUSH
9937: CALL_OW 174
// AddComCrawl ( i ) ;
9941: LD_VAR 0 2
9945: PPUSH
9946: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
9950: LD_VAR 0 2
9954: PPUSH
9955: LD_INT 109
9957: PPUSH
9958: LD_INT 30
9960: PPUSH
9961: CALL_OW 174
// end ;
9965: GO 9892
9967: POP
9968: POP
// end ;
9969: LD_VAR 0 1
9973: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
9974: LD_INT 0
9976: PPUSH
9977: PPUSH
9978: PPUSH
9979: PPUSH
9980: PPUSH
// nearest_dist = 1000 ;
9981: LD_ADDR_VAR 0 4
9985: PUSH
9986: LD_INT 1000
9988: ST_TO_ADDR
// nearest_un = un ;
9989: LD_ADDR_VAR 0 5
9993: PUSH
9994: LD_VAR 0 1
9998: ST_TO_ADDR
// for sold in units do
9999: LD_ADDR_VAR 0 6
10003: PUSH
10004: LD_VAR 0 2
10008: PUSH
10009: FOR_IN
10010: IFFALSE 10066
// begin dist = GetDistUnits ( un , sold ) ;
10012: LD_ADDR_VAR 0 7
10016: PUSH
10017: LD_VAR 0 1
10021: PPUSH
10022: LD_VAR 0 6
10026: PPUSH
10027: CALL_OW 296
10031: ST_TO_ADDR
// if dist < nearest_dist then
10032: LD_VAR 0 7
10036: PUSH
10037: LD_VAR 0 4
10041: LESS
10042: IFFALSE 10064
// begin nearest_un = sold ;
10044: LD_ADDR_VAR 0 5
10048: PUSH
10049: LD_VAR 0 6
10053: ST_TO_ADDR
// nearest_dist = dist ;
10054: LD_ADDR_VAR 0 4
10058: PUSH
10059: LD_VAR 0 7
10063: ST_TO_ADDR
// end ; end ;
10064: GO 10009
10066: POP
10067: POP
// result := nearest_un ;
10068: LD_ADDR_VAR 0 3
10072: PUSH
10073: LD_VAR 0 5
10077: ST_TO_ADDR
// end ;
10078: LD_VAR 0 3
10082: RET
// export function PrepareDifficulty ; begin
10083: LD_INT 0
10085: PPUSH
// if Difficulty = 1 then
10086: LD_OWVAR 67
10090: PUSH
10091: LD_INT 1
10093: EQUAL
10094: IFFALSE 10157
// begin RemoveUnit ( brw2 ) ;
10096: LD_INT 9
10098: PPUSH
10099: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10103: LD_INT 30
10105: PPUSH
10106: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10110: LD_INT 52
10112: PPUSH
10113: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10117: LD_INT 63
10119: PPUSH
10120: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10124: LD_INT 5
10126: PUSH
10127: LD_INT 4
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PPUSH
10134: LD_INT 60
10136: PPUSH
10137: CALL_OW 240
// RuSoldMinLevel = 0 ;
10141: LD_ADDR_EXP 13
10145: PUSH
10146: LD_INT 0
10148: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10149: LD_ADDR_EXP 14
10153: PUSH
10154: LD_INT 1
10156: ST_TO_ADDR
// end ; if Difficulty = 2 then
10157: LD_OWVAR 67
10161: PUSH
10162: LD_INT 2
10164: EQUAL
10165: IFFALSE 10207
// begin RemoveUnit ( brw4 ) ;
10167: LD_INT 52
10169: PPUSH
10170: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10174: LD_INT 5
10176: PUSH
10177: LD_INT 4
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PPUSH
10184: LD_INT 50
10186: PPUSH
10187: CALL_OW 240
// RuSoldMinLevel = 1 ;
10191: LD_ADDR_EXP 13
10195: PUSH
10196: LD_INT 1
10198: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10199: LD_ADDR_EXP 14
10203: PUSH
10204: LD_INT 2
10206: ST_TO_ADDR
// end ; if Difficulty = 3 then
10207: LD_OWVAR 67
10211: PUSH
10212: LD_INT 3
10214: EQUAL
10215: IFFALSE 10250
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10217: LD_INT 5
10219: PUSH
10220: LD_INT 4
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PPUSH
10227: LD_INT 40
10229: PPUSH
10230: CALL_OW 240
// RuSoldMinLevel = 2 ;
10234: LD_ADDR_EXP 13
10238: PUSH
10239: LD_INT 2
10241: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10242: LD_ADDR_EXP 14
10246: PUSH
10247: LD_INT 3
10249: ST_TO_ADDR
// end ; end ;
10250: LD_VAR 0 1
10254: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10255: LD_INT 0
10257: PPUSH
10258: PPUSH
10259: PPUSH
// tmp = [ ] ;
10260: LD_ADDR_VAR 0 5
10264: PUSH
10265: EMPTY
10266: ST_TO_ADDR
// if not vehicles then
10267: LD_VAR 0 1
10271: NOT
10272: IFFALSE 10276
// exit ;
10274: GO 10393
// for i in vehicles do
10276: LD_ADDR_VAR 0 4
10280: PUSH
10281: LD_VAR 0 1
10285: PUSH
10286: FOR_IN
10287: IFFALSE 10377
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10289: LD_ADDR_VAR 0 5
10293: PUSH
10294: LD_VAR 0 5
10298: PPUSH
10299: LD_INT 1
10301: PPUSH
10302: LD_VAR 0 4
10306: PPUSH
10307: CALL_OW 265
10311: PUSH
10312: LD_VAR 0 4
10316: PPUSH
10317: CALL_OW 262
10321: PUSH
10322: LD_VAR 0 4
10326: PPUSH
10327: CALL_OW 263
10331: PUSH
10332: LD_VAR 0 4
10336: PPUSH
10337: CALL_OW 264
10341: PUSH
10342: LD_VAR 0 4
10346: PPUSH
10347: CALL_OW 261
10351: PUSH
10352: LD_VAR 0 4
10356: PPUSH
10357: CALL_OW 256
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: PPUSH
10370: CALL_OW 2
10374: ST_TO_ADDR
// end ;
10375: GO 10286
10377: POP
10378: POP
// SaveVariable ( tmp , ident ) ;
10379: LD_VAR 0 5
10383: PPUSH
10384: LD_VAR 0 2
10388: PPUSH
10389: CALL_OW 39
// end ; end_of_file
10393: LD_VAR 0 3
10397: RET
// export function PrepareHeroes ; begin
10398: LD_INT 0
10400: PPUSH
// uc_side = 1 ;
10401: LD_ADDR_OWVAR 20
10405: PUSH
10406: LD_INT 1
10408: ST_TO_ADDR
// JMM = CreateCharacter ( JMM ) ;
10409: LD_ADDR_EXP 1
10413: PUSH
10414: LD_STRING JMM
10416: PPUSH
10417: CALL_OW 34
10421: ST_TO_ADDR
// SetLives ( JMM , LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ) ;
10422: LD_EXP 1
10426: PPUSH
10427: LD_STRING 01_JMMLifePoints_1
10429: PPUSH
10430: LD_INT 1000
10432: PPUSH
10433: CALL_OW 30
10437: PPUSH
10438: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10442: LD_ADDR_EXP 9
10446: PUSH
10447: LD_STRING Powell
10449: PPUSH
10450: CALL_OW 25
10454: ST_TO_ADDR
// Bobby = CreateCharacter ( Bobby ) ;
10455: LD_ADDR_EXP 2
10459: PUSH
10460: LD_STRING Bobby
10462: PPUSH
10463: CALL_OW 34
10467: ST_TO_ADDR
// if Bobby then
10468: LD_EXP 2
10472: IFFALSE 10494
// SetLives ( Bobby , LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ) ;
10474: LD_EXP 2
10478: PPUSH
10479: LD_STRING 01_BobbyLifePoints_1
10481: PPUSH
10482: LD_INT 1000
10484: PPUSH
10485: CALL_OW 30
10489: PPUSH
10490: CALL_OW 234
// Cyrus = CreateCharacter ( Cyrus ) ;
10494: LD_ADDR_EXP 3
10498: PUSH
10499: LD_STRING Cyrus
10501: PPUSH
10502: CALL_OW 34
10506: ST_TO_ADDR
// if Cyrus then
10507: LD_EXP 3
10511: IFFALSE 10533
// SetLives ( Cyrus , LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ) ;
10513: LD_EXP 3
10517: PPUSH
10518: LD_STRING 01_CyrusLifePoints_1
10520: PPUSH
10521: LD_INT 1000
10523: PPUSH
10524: CALL_OW 30
10528: PPUSH
10529: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
10533: LD_ADDR_EXP 5
10537: PUSH
10538: LD_STRING Khatam
10540: PPUSH
10541: CALL_OW 25
10545: ST_TO_ADDR
// uc_side = 4 ;
10546: LD_ADDR_OWVAR 20
10550: PUSH
10551: LD_INT 4
10553: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10554: LD_ADDR_EXP 4
10558: PUSH
10559: LD_STRING Lisa
10561: PPUSH
10562: CALL_OW 25
10566: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10567: LD_EXP 1
10571: PPUSH
10572: LD_INT 3
10574: PPUSH
10575: LD_INT 0
10577: PPUSH
10578: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10582: LD_EXP 2
10586: PPUSH
10587: LD_INT 3
10589: PPUSH
10590: LD_INT 0
10592: PPUSH
10593: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10597: LD_EXP 3
10601: PPUSH
10602: LD_INT 3
10604: PPUSH
10605: LD_INT 0
10607: PPUSH
10608: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10612: LD_EXP 4
10616: PPUSH
10617: LD_INT 5
10619: PPUSH
10620: LD_INT 0
10622: PPUSH
10623: CALL_OW 49
// ComCrawl ( Lisa ) ;
10627: LD_EXP 4
10631: PPUSH
10632: CALL_OW 137
// end ;
10636: LD_VAR 0 1
10640: RET
// export function PrepareLisSquad ; var i , un ; begin
10641: LD_INT 0
10643: PPUSH
10644: PPUSH
10645: PPUSH
// uc_side = 4 ;
10646: LD_ADDR_OWVAR 20
10650: PUSH
10651: LD_INT 4
10653: ST_TO_ADDR
// uc_nation = 1 ;
10654: LD_ADDR_OWVAR 21
10658: PUSH
10659: LD_INT 1
10661: ST_TO_ADDR
// hc_class := 2 ;
10662: LD_ADDR_OWVAR 28
10666: PUSH
10667: LD_INT 2
10669: ST_TO_ADDR
// hc_sex := sex_male ;
10670: LD_ADDR_OWVAR 27
10674: PUSH
10675: LD_INT 1
10677: ST_TO_ADDR
// hc_gallery :=  ;
10678: LD_ADDR_OWVAR 33
10682: PUSH
10683: LD_STRING 
10685: ST_TO_ADDR
// hc_name :=  ;
10686: LD_ADDR_OWVAR 26
10690: PUSH
10691: LD_STRING 
10693: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10694: LD_ADDR_OWVAR 30
10698: PUSH
10699: LD_INT 0
10701: PUSH
10702: LD_INT 1
10704: PUSH
10705: LD_INT 0
10707: PUSH
10708: LD_INT 0
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
10717: LD_ADDR_OWVAR 31
10721: PUSH
10722: LD_INT 1
10724: PUSH
10725: LD_INT 2
10727: PUSH
10728: LD_INT 0
10730: PUSH
10731: LD_INT 0
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: ST_TO_ADDR
// un := CreateHuman ;
10740: LD_ADDR_VAR 0 3
10744: PUSH
10745: CALL_OW 44
10749: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10750: LD_VAR 0 3
10754: PPUSH
10755: LD_INT 6
10757: PPUSH
10758: LD_INT 0
10760: PPUSH
10761: CALL_OW 49
// hc_sex := sex_female ;
10765: LD_ADDR_OWVAR 27
10769: PUSH
10770: LD_INT 2
10772: ST_TO_ADDR
// hc_gallery :=  ;
10773: LD_ADDR_OWVAR 33
10777: PUSH
10778: LD_STRING 
10780: ST_TO_ADDR
// hc_name :=  ;
10781: LD_ADDR_OWVAR 26
10785: PUSH
10786: LD_STRING 
10788: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
10789: LD_ADDR_OWVAR 30
10793: PUSH
10794: LD_INT 0
10796: PUSH
10797: LD_INT 0
10799: PUSH
10800: LD_INT 0
10802: PUSH
10803: LD_INT 1
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
10812: LD_ADDR_OWVAR 31
10816: PUSH
10817: LD_INT 0
10819: PUSH
10820: LD_INT 1
10822: PUSH
10823: LD_INT 0
10825: PUSH
10826: LD_INT 1
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: ST_TO_ADDR
// un := CreateHuman ;
10835: LD_ADDR_VAR 0 3
10839: PUSH
10840: CALL_OW 44
10844: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10845: LD_VAR 0 3
10849: PPUSH
10850: LD_INT 6
10852: PPUSH
10853: LD_INT 0
10855: PPUSH
10856: CALL_OW 49
// InitHc ;
10860: CALL_OW 19
// end ;
10864: LD_VAR 0 1
10868: RET
// export function PrepareOtherAmericans ; begin
10869: LD_INT 0
10871: PPUSH
// uc_side = 4 ;
10872: LD_ADDR_OWVAR 20
10876: PUSH
10877: LD_INT 4
10879: ST_TO_ADDR
// uc_nation = 1 ;
10880: LD_ADDR_OWVAR 21
10884: PUSH
10885: LD_INT 1
10887: ST_TO_ADDR
// hc_gallery =  ;
10888: LD_ADDR_OWVAR 33
10892: PUSH
10893: LD_STRING 
10895: ST_TO_ADDR
// hc_name = Brian Garvin ;
10896: LD_ADDR_OWVAR 26
10900: PUSH
10901: LD_STRING Brian Garvin
10903: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
10904: LD_INT 1
10906: PPUSH
10907: LD_INT 1
10909: PPUSH
10910: LD_INT 1
10912: PPUSH
10913: LD_INT 2
10915: PPUSH
10916: CALL_OW 12
10920: PPUSH
10921: CALL_OW 380
// Brian = CreateHuman ;
10925: LD_ADDR_EXP 6
10929: PUSH
10930: CALL_OW 44
10934: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
10935: LD_EXP 6
10939: PPUSH
10940: LD_INT 10
10942: PPUSH
10943: LD_INT 0
10945: PPUSH
10946: CALL_OW 49
// hc_name = Jerry White ;
10950: LD_ADDR_OWVAR 26
10954: PUSH
10955: LD_STRING Jerry White
10957: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
10958: LD_INT 1
10960: PPUSH
10961: LD_INT 3
10963: PPUSH
10964: LD_INT 1
10966: PPUSH
10967: LD_INT 2
10969: PPUSH
10970: CALL_OW 12
10974: PPUSH
10975: CALL_OW 380
// Jerry = CreateHuman ;
10979: LD_ADDR_EXP 7
10983: PUSH
10984: CALL_OW 44
10988: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
10989: LD_EXP 7
10993: PPUSH
10994: LD_INT 10
10996: PPUSH
10997: LD_INT 0
10999: PPUSH
11000: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11004: LD_EXP 6
11008: PUSH
11009: LD_EXP 7
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PPUSH
11018: CALL_OW 140
// end ;
11022: LD_VAR 0 1
11026: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11027: LD_INT 0
11029: PPUSH
11030: PPUSH
11031: PPUSH
// for i = 1 to 6 do
11032: LD_ADDR_VAR 0 2
11036: PUSH
11037: DOUBLE
11038: LD_INT 1
11040: DEC
11041: ST_TO_ADDR
11042: LD_INT 6
11044: PUSH
11045: FOR_TO
11046: IFFALSE 11140
// begin uc_side = 4 ;
11048: LD_ADDR_OWVAR 20
11052: PUSH
11053: LD_INT 4
11055: ST_TO_ADDR
// uc_nation = 1 ;
11056: LD_ADDR_OWVAR 21
11060: PUSH
11061: LD_INT 1
11063: ST_TO_ADDR
// hc_gallery =  ;
11064: LD_ADDR_OWVAR 33
11068: PUSH
11069: LD_STRING 
11071: ST_TO_ADDR
// hc_name =  ;
11072: LD_ADDR_OWVAR 26
11076: PUSH
11077: LD_STRING 
11079: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11080: LD_INT 0
11082: PPUSH
11083: LD_INT 1
11085: PPUSH
11086: LD_INT 4
11088: PPUSH
11089: CALL_OW 12
11093: PPUSH
11094: LD_INT 1
11096: PPUSH
11097: CALL_OW 380
// un = CreateHuman ;
11101: LD_ADDR_VAR 0 3
11105: PUSH
11106: CALL_OW 44
11110: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11111: LD_VAR 0 3
11115: PPUSH
11116: LD_INT 16
11118: PPUSH
11119: LD_INT 0
11121: PPUSH
11122: CALL_OW 49
// SetLives ( un , 1 ) ;
11126: LD_VAR 0 3
11130: PPUSH
11131: LD_INT 1
11133: PPUSH
11134: CALL_OW 234
// end ;
11138: GO 11045
11140: POP
11141: POP
// DyingSold = CreateHuman ;
11142: LD_ADDR_EXP 32
11146: PUSH
11147: CALL_OW 44
11151: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11152: LD_EXP 32
11156: PPUSH
11157: LD_INT 16
11159: PPUSH
11160: LD_INT 0
11162: PPUSH
11163: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11167: LD_EXP 32
11171: PPUSH
11172: LD_INT 250
11174: PPUSH
11175: CALL_OW 234
// end ; end_of_file
11179: LD_VAR 0 1
11183: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11184: LD_INT 0
11186: PPUSH
11187: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) ;
11188: LD_ADDR_VAR 0 2
11192: PUSH
11193: LD_INT 22
11195: PUSH
11196: LD_INT 1
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 23
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 25
11215: PUSH
11216: LD_INT 2
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: LIST
11227: PPUSH
11228: CALL_OW 69
11232: ST_TO_ADDR
// uc_side = 6 ;
11233: LD_ADDR_OWVAR 20
11237: PUSH
11238: LD_INT 6
11240: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11241: LD_ADDR_EXP 8
11245: PUSH
11246: LD_STRING Mikhail
11248: PPUSH
11249: CALL_OW 25
11253: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
11254: LD_EXP 8
11258: PPUSH
11259: LD_VAR 0 2
11263: PUSH
11264: LD_INT 1
11266: ARRAY
11267: PPUSH
11268: CALL_OW 250
11272: PPUSH
11273: LD_VAR 0 2
11277: PUSH
11278: LD_INT 1
11280: ARRAY
11281: PPUSH
11282: CALL_OW 251
11286: PPUSH
11287: LD_INT 3
11289: PPUSH
11290: LD_INT 1
11292: PPUSH
11293: CALL_OW 50
// end ;
11297: LD_VAR 0 1
11301: RET
// export function PrepareRussianCommander ; begin
11302: LD_INT 0
11304: PPUSH
// uc_side = 3 ;
11305: LD_ADDR_OWVAR 20
11309: PUSH
11310: LD_INT 3
11312: ST_TO_ADDR
// uc_nation = 3 ;
11313: LD_ADDR_OWVAR 21
11317: PUSH
11318: LD_INT 3
11320: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11321: LD_ADDR_EXP 19
11325: PUSH
11326: LD_STRING Natasza
11328: PPUSH
11329: CALL_OW 25
11333: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11334: LD_EXP 19
11338: PPUSH
11339: LD_INT 24
11341: PPUSH
11342: LD_INT 0
11344: PPUSH
11345: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11349: LD_EXP 19
11353: PPUSH
11354: LD_INT 56
11356: PPUSH
11357: LD_INT 16
11359: PPUSH
11360: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11364: LD_ADDR_EXP 24
11368: PUSH
11369: LD_EXP 24
11373: PUSH
11374: LD_EXP 19
11378: ADD
11379: ST_TO_ADDR
// end ;
11380: LD_VAR 0 1
11384: RET
// export function PrepareSouthBase ; var i , un ; begin
11385: LD_INT 0
11387: PPUSH
11388: PPUSH
11389: PPUSH
// for i = 1 to 2 do
11390: LD_ADDR_VAR 0 2
11394: PUSH
11395: DOUBLE
11396: LD_INT 1
11398: DEC
11399: ST_TO_ADDR
11400: LD_INT 2
11402: PUSH
11403: FOR_TO
11404: IFFALSE 11513
// begin uc_side = 3 ;
11406: LD_ADDR_OWVAR 20
11410: PUSH
11411: LD_INT 3
11413: ST_TO_ADDR
// uc_nation = 3 ;
11414: LD_ADDR_OWVAR 21
11418: PUSH
11419: LD_INT 3
11421: ST_TO_ADDR
// hc_gallery =  ;
11422: LD_ADDR_OWVAR 33
11426: PUSH
11427: LD_STRING 
11429: ST_TO_ADDR
// hc_name =  ;
11430: LD_ADDR_OWVAR 26
11434: PUSH
11435: LD_STRING 
11437: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11438: LD_INT 1
11440: PPUSH
11441: LD_INT 1
11443: PPUSH
11444: LD_EXP 13
11448: PPUSH
11449: LD_EXP 14
11453: PPUSH
11454: CALL_OW 12
11458: PPUSH
11459: CALL_OW 380
// hc_importance = 0 ;
11463: LD_ADDR_OWVAR 32
11467: PUSH
11468: LD_INT 0
11470: ST_TO_ADDR
// un = CreateHuman ;
11471: LD_ADDR_VAR 0 3
11475: PUSH
11476: CALL_OW 44
11480: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11481: LD_VAR 0 3
11485: PPUSH
11486: LD_INT 11
11488: PPUSH
11489: LD_INT 0
11491: PPUSH
11492: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 111
11503: PPUSH
11504: LD_INT 38
11506: PPUSH
11507: CALL_OW 118
// end ;
11511: GO 11403
11513: POP
11514: POP
// for i = 1 to Difficulty do
11515: LD_ADDR_VAR 0 2
11519: PUSH
11520: DOUBLE
11521: LD_INT 1
11523: DEC
11524: ST_TO_ADDR
11525: LD_OWVAR 67
11529: PUSH
11530: FOR_TO
11531: IFFALSE 11632
// begin uc_side = 3 ;
11533: LD_ADDR_OWVAR 20
11537: PUSH
11538: LD_INT 3
11540: ST_TO_ADDR
// uc_nation = 3 ;
11541: LD_ADDR_OWVAR 21
11545: PUSH
11546: LD_INT 3
11548: ST_TO_ADDR
// hc_gallery =  ;
11549: LD_ADDR_OWVAR 33
11553: PUSH
11554: LD_STRING 
11556: ST_TO_ADDR
// hc_name =  ;
11557: LD_ADDR_OWVAR 26
11561: PUSH
11562: LD_STRING 
11564: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11565: LD_INT 0
11567: PPUSH
11568: LD_INT 3
11570: PPUSH
11571: LD_EXP 13
11575: PPUSH
11576: LD_EXP 14
11580: PPUSH
11581: CALL_OW 12
11585: PPUSH
11586: CALL_OW 380
// un = CreateHuman ;
11590: LD_ADDR_VAR 0 3
11594: PUSH
11595: CALL_OW 44
11599: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
11600: LD_VAR 0 3
11604: PPUSH
11605: LD_INT 12
11607: PPUSH
11608: LD_INT 0
11610: PPUSH
11611: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
11615: LD_VAR 0 3
11619: PPUSH
11620: LD_INT 111
11622: PPUSH
11623: LD_INT 28
11625: PPUSH
11626: CALL_OW 118
// end ;
11630: GO 11530
11632: POP
11633: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
11634: LD_INT 3
11636: PPUSH
11637: LD_INT 3
11639: PPUSH
11640: LD_INT 33
11642: PPUSH
11643: LD_EXP 13
11647: PPUSH
11648: LD_EXP 14
11652: PPUSH
11653: CALL_OW 12
11657: PPUSH
11658: LD_INT 1
11660: PPUSH
11661: LD_INT 1
11663: PUSH
11664: LD_INT 1
11666: PPUSH
11667: LD_INT 2
11669: PPUSH
11670: CALL_OW 12
11674: PUSH
11675: LD_INT 1
11677: PPUSH
11678: LD_INT 2
11680: PPUSH
11681: CALL_OW 12
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: LIST
11690: PUSH
11691: LD_OWVAR 67
11695: ARRAY
11696: PPUSH
11697: CALL 8356 0 6
// for i in UnitsInside ( arm2 ) do
11701: LD_ADDR_VAR 0 2
11705: PUSH
11706: LD_INT 33
11708: PPUSH
11709: CALL_OW 313
11713: PUSH
11714: FOR_IN
11715: IFFALSE 11735
// southBaseDefenders = southBaseDefenders ^ i ;
11717: LD_ADDR_EXP 25
11721: PUSH
11722: LD_EXP 25
11726: PUSH
11727: LD_VAR 0 2
11731: ADD
11732: ST_TO_ADDR
11733: GO 11714
11735: POP
11736: POP
// end ;
11737: LD_VAR 0 1
11741: RET
// export function PrepareNorthBase ; var i , un ; begin
11742: LD_INT 0
11744: PPUSH
11745: PPUSH
11746: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
11747: LD_ADDR_VAR 0 2
11751: PUSH
11752: DOUBLE
11753: LD_INT 1
11755: DEC
11756: ST_TO_ADDR
11757: LD_INT 1
11759: PPUSH
11760: LD_INT 2
11762: PPUSH
11763: CALL_OW 12
11767: PUSH
11768: LD_INT 2
11770: PPUSH
11771: LD_INT 3
11773: PPUSH
11774: CALL_OW 12
11778: PUSH
11779: LD_INT 3
11781: PPUSH
11782: LD_INT 4
11784: PPUSH
11785: CALL_OW 12
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: LIST
11794: PUSH
11795: LD_OWVAR 67
11799: ARRAY
11800: PUSH
11801: FOR_TO
11802: IFFALSE 11888
// begin uc_side = 3 ;
11804: LD_ADDR_OWVAR 20
11808: PUSH
11809: LD_INT 3
11811: ST_TO_ADDR
// uc_nation = 3 ;
11812: LD_ADDR_OWVAR 21
11816: PUSH
11817: LD_INT 3
11819: ST_TO_ADDR
// hc_gallery =  ;
11820: LD_ADDR_OWVAR 33
11824: PUSH
11825: LD_STRING 
11827: ST_TO_ADDR
// hc_name =  ;
11828: LD_ADDR_OWVAR 26
11832: PUSH
11833: LD_STRING 
11835: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11836: LD_INT 0
11838: PPUSH
11839: LD_INT 1
11841: PPUSH
11842: LD_EXP 13
11846: PPUSH
11847: LD_EXP 14
11851: PPUSH
11852: CALL_OW 12
11856: PPUSH
11857: CALL_OW 380
// un = CreateHuman ;
11861: LD_ADDR_VAR 0 3
11865: PUSH
11866: CALL_OW 44
11870: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
11871: LD_VAR 0 3
11875: PPUSH
11876: LD_INT 14
11878: PPUSH
11879: LD_INT 0
11881: PPUSH
11882: CALL_OW 49
// end ;
11886: GO 11801
11888: POP
11889: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
11890: LD_INT 3
11892: PPUSH
11893: LD_INT 3
11895: PPUSH
11896: LD_INT 2
11898: PPUSH
11899: LD_EXP 13
11903: PPUSH
11904: LD_EXP 14
11908: PPUSH
11909: CALL_OW 12
11913: PPUSH
11914: LD_INT 1
11916: PPUSH
11917: LD_INT 1
11919: PPUSH
11920: LD_INT 2
11922: PPUSH
11923: CALL_OW 12
11927: PUSH
11928: LD_INT 1
11930: PPUSH
11931: LD_INT 3
11933: PPUSH
11934: CALL_OW 12
11938: PUSH
11939: LD_INT 1
11941: PPUSH
11942: LD_INT 3
11944: PPUSH
11945: CALL_OW 12
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: PUSH
11955: LD_OWVAR 67
11959: ARRAY
11960: PPUSH
11961: CALL 8356 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
11965: LD_INT 3
11967: PPUSH
11968: LD_INT 3
11970: PPUSH
11971: LD_INT 23
11973: PPUSH
11974: LD_EXP 13
11978: PPUSH
11979: LD_EXP 14
11983: PPUSH
11984: CALL_OW 12
11988: PPUSH
11989: LD_INT 4
11991: PPUSH
11992: LD_INT 0
11994: PUSH
11995: LD_INT 1
11997: PUSH
11998: LD_INT 2
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: LIST
12005: PUSH
12006: LD_OWVAR 67
12010: ARRAY
12011: PPUSH
12012: CALL 8356 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12016: LD_INT 3
12018: PPUSH
12019: LD_INT 3
12021: PPUSH
12022: LD_INT 1
12024: PPUSH
12025: LD_EXP 13
12029: PPUSH
12030: LD_EXP 14
12034: PPUSH
12035: CALL_OW 12
12039: PPUSH
12040: LD_INT 2
12042: PPUSH
12043: LD_INT 1
12045: PUSH
12046: LD_INT 2
12048: PUSH
12049: LD_INT 2
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: PUSH
12057: LD_OWVAR 67
12061: ARRAY
12062: PPUSH
12063: CALL 8356 0 6
// for i in UnitsInside ( arm1 ) do
12067: LD_ADDR_VAR 0 2
12071: PUSH
12072: LD_INT 2
12074: PPUSH
12075: CALL_OW 313
12079: PUSH
12080: FOR_IN
12081: IFFALSE 12101
// northBaseDefenders = northBaseDefenders ^ i ;
12083: LD_ADDR_EXP 24
12087: PUSH
12088: LD_EXP 24
12092: PUSH
12093: LD_VAR 0 2
12097: ADD
12098: ST_TO_ADDR
12099: GO 12080
12101: POP
12102: POP
// end ;
12103: LD_VAR 0 1
12107: RET
// export function PrepareOtherRussians ; var i , un ; begin
12108: LD_INT 0
12110: PPUSH
12111: PPUSH
12112: PPUSH
// for i = 1 to 2 do
12113: LD_ADDR_VAR 0 2
12117: PUSH
12118: DOUBLE
12119: LD_INT 1
12121: DEC
12122: ST_TO_ADDR
12123: LD_INT 2
12125: PUSH
12126: FOR_TO
12127: IFFALSE 12228
// begin uc_side = 3 ;
12129: LD_ADDR_OWVAR 20
12133: PUSH
12134: LD_INT 3
12136: ST_TO_ADDR
// uc_nation = 3 ;
12137: LD_ADDR_OWVAR 21
12141: PUSH
12142: LD_INT 3
12144: ST_TO_ADDR
// hc_gallery =  ;
12145: LD_ADDR_OWVAR 33
12149: PUSH
12150: LD_STRING 
12152: ST_TO_ADDR
// hc_name =  ;
12153: LD_ADDR_OWVAR 26
12157: PUSH
12158: LD_STRING 
12160: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12161: LD_INT 0
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: LD_EXP 13
12171: PPUSH
12172: LD_EXP 14
12176: PPUSH
12177: CALL_OW 12
12181: PPUSH
12182: CALL_OW 380
// un = CreateHuman ;
12186: LD_ADDR_VAR 0 3
12190: PUSH
12191: CALL_OW 44
12195: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12196: LD_VAR 0 3
12200: PPUSH
12201: LD_INT 9
12203: PPUSH
12204: LD_INT 0
12206: PPUSH
12207: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12211: LD_VAR 0 3
12215: PPUSH
12216: LD_INT 80
12218: PPUSH
12219: LD_INT 73
12221: PPUSH
12222: CALL_OW 118
// end ;
12226: GO 12126
12228: POP
12229: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12230: LD_ADDR_VAR 0 2
12234: PUSH
12235: LD_INT 22
12237: PUSH
12238: LD_INT 3
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: LD_INT 30
12247: PUSH
12248: LD_INT 31
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PPUSH
12259: CALL_OW 69
12263: PUSH
12264: FOR_IN
12265: IFFALSE 12293
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12267: LD_EXP 13
12271: PPUSH
12272: LD_EXP 14
12276: PPUSH
12277: CALL_OW 12
12281: PPUSH
12282: LD_VAR 0 2
12286: PPUSH
12287: CALL 8466 0 2
12291: GO 12264
12293: POP
12294: POP
// end ;
12295: LD_VAR 0 1
12299: RET
// export function PrepareCargoBays ; begin
12300: LD_INT 0
12302: PPUSH
// uc_side = 3 ;
12303: LD_ADDR_OWVAR 20
12307: PUSH
12308: LD_INT 3
12310: ST_TO_ADDR
// uc_nation = 3 ;
12311: LD_ADDR_OWVAR 21
12315: PUSH
12316: LD_INT 3
12318: ST_TO_ADDR
// vc_engine = 1 ;
12319: LD_ADDR_OWVAR 39
12323: PUSH
12324: LD_INT 1
12326: ST_TO_ADDR
// vc_control = 1 ;
12327: LD_ADDR_OWVAR 38
12331: PUSH
12332: LD_INT 1
12334: ST_TO_ADDR
// vc_weapon = 51 ;
12335: LD_ADDR_OWVAR 40
12339: PUSH
12340: LD_INT 51
12342: ST_TO_ADDR
// vc_chassis = 22 ;
12343: LD_ADDR_OWVAR 37
12347: PUSH
12348: LD_INT 22
12350: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12351: LD_ADDR_EXP 15
12355: PUSH
12356: CALL_OW 45
12360: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12361: LD_ADDR_EXP 16
12365: PUSH
12366: CALL_OW 45
12370: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12371: LD_EXP 15
12375: PPUSH
12376: LD_INT 13
12378: PPUSH
12379: LD_INT 0
12381: PPUSH
12382: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12386: LD_EXP 16
12390: PPUSH
12391: LD_INT 13
12393: PPUSH
12394: LD_INT 0
12396: PPUSH
12397: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12401: LD_EXP 15
12405: PPUSH
12406: LD_INT 2
12408: PPUSH
12409: LD_INT 70
12411: PUSH
12412: LD_INT 50
12414: PUSH
12415: LD_INT 30
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: LIST
12422: PUSH
12423: LD_OWVAR 67
12427: ARRAY
12428: PPUSH
12429: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12433: LD_EXP 16
12437: PPUSH
12438: LD_INT 2
12440: PPUSH
12441: LD_INT 70
12443: PUSH
12444: LD_INT 50
12446: PUSH
12447: LD_INT 30
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: LIST
12454: PUSH
12455: LD_OWVAR 67
12459: ARRAY
12460: PPUSH
12461: CALL_OW 291
// hc_gallery =  ;
12465: LD_ADDR_OWVAR 33
12469: PUSH
12470: LD_STRING 
12472: ST_TO_ADDR
// hc_name =  ;
12473: LD_ADDR_OWVAR 26
12477: PUSH
12478: LD_STRING 
12480: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12481: LD_INT 1
12483: PPUSH
12484: LD_INT 3
12486: PPUSH
12487: LD_INT 1
12489: PPUSH
12490: LD_INT 2
12492: PPUSH
12493: CALL_OW 12
12497: PPUSH
12498: CALL_OW 380
// driver1 = CreateHuman ;
12502: LD_ADDR_EXP 17
12506: PUSH
12507: CALL_OW 44
12511: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12512: LD_EXP 17
12516: PPUSH
12517: LD_EXP 15
12521: PPUSH
12522: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12526: LD_ADDR_OWVAR 26
12530: PUSH
12531: LD_STRING Nikolai Andreyev
12533: ST_TO_ADDR
// driver2 = CreateHuman ;
12534: LD_ADDR_EXP 18
12538: PUSH
12539: CALL_OW 44
12543: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12544: LD_EXP 18
12548: PPUSH
12549: LD_EXP 16
12553: PPUSH
12554: CALL_OW 52
// end ;
12558: LD_VAR 0 1
12562: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12563: LD_INT 0
12565: PPUSH
12566: PPUSH
12567: PPUSH
12568: PPUSH
12569: PPUSH
12570: PPUSH
12571: PPUSH
// uc_side = 3 ;
12572: LD_ADDR_OWVAR 20
12576: PUSH
12577: LD_INT 3
12579: ST_TO_ADDR
// uc_nation = 3 ;
12580: LD_ADDR_OWVAR 21
12584: PUSH
12585: LD_INT 3
12587: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
12588: LD_ADDR_VAR 0 4
12592: PUSH
12593: DOUBLE
12594: LD_INT 1
12596: DEC
12597: ST_TO_ADDR
12598: LD_VAR 0 1
12602: PUSH
12603: LD_INT 1
12605: PPUSH
12606: LD_INT 3
12608: PPUSH
12609: CALL_OW 12
12613: PLUS
12614: PUSH
12615: FOR_TO
12616: IFFALSE 12793
// begin vc_engine = 1 ;
12618: LD_ADDR_OWVAR 39
12622: PUSH
12623: LD_INT 1
12625: ST_TO_ADDR
// vc_control = 1 ;
12626: LD_ADDR_OWVAR 38
12630: PUSH
12631: LD_INT 1
12633: ST_TO_ADDR
// vc_weapon = 42 ;
12634: LD_ADDR_OWVAR 40
12638: PUSH
12639: LD_INT 42
12641: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
12642: LD_ADDR_OWVAR 37
12646: PUSH
12647: LD_INT 21
12649: PUSH
12650: LD_INT 22
12652: PUSH
12653: LD_INT 22
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: LIST
12660: PUSH
12661: LD_OWVAR 67
12665: ARRAY
12666: ST_TO_ADDR
// veh = CreateVehicle ;
12667: LD_ADDR_VAR 0 5
12671: PUSH
12672: CALL_OW 45
12676: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12677: LD_VAR 0 5
12681: PPUSH
12682: LD_VAR 0 2
12686: PPUSH
12687: LD_INT 0
12689: PPUSH
12690: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
12694: LD_ADDR_EXP 26
12698: PUSH
12699: LD_EXP 26
12703: PUSH
12704: LD_VAR 0 5
12708: ADD
12709: ST_TO_ADDR
// hc_gallery =  ;
12710: LD_ADDR_OWVAR 33
12714: PUSH
12715: LD_STRING 
12717: ST_TO_ADDR
// hc_name =  ;
12718: LD_ADDR_OWVAR 26
12722: PUSH
12723: LD_STRING 
12725: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12726: LD_INT 0
12728: PPUSH
12729: LD_INT 3
12731: PPUSH
12732: LD_EXP 13
12736: PPUSH
12737: LD_EXP 14
12741: PPUSH
12742: CALL_OW 12
12746: PPUSH
12747: CALL_OW 380
// un = CreateHuman ;
12751: LD_ADDR_VAR 0 6
12755: PUSH
12756: CALL_OW 44
12760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12761: LD_VAR 0 6
12765: PPUSH
12766: LD_VAR 0 5
12770: PPUSH
12771: CALL_OW 52
// attackGroup = attackGroup ^ un ;
12775: LD_ADDR_EXP 26
12779: PUSH
12780: LD_EXP 26
12784: PUSH
12785: LD_VAR 0 6
12789: ADD
12790: ST_TO_ADDR
// end ;
12791: GO 12615
12793: POP
12794: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12795: LD_INT 0
12797: PPUSH
12798: LD_INT 2
12800: PPUSH
12801: LD_EXP 13
12805: PPUSH
12806: LD_EXP 14
12810: PPUSH
12811: CALL_OW 12
12815: PPUSH
12816: CALL_OW 380
// un = CreateHuman ;
12820: LD_ADDR_VAR 0 6
12824: PUSH
12825: CALL_OW 44
12829: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
12830: LD_ADDR_VAR 0 4
12834: PUSH
12835: DOUBLE
12836: LD_INT 1
12838: DEC
12839: ST_TO_ADDR
12840: LD_VAR 0 1
12844: PUSH
12845: LD_INT 2
12847: PUSH
12848: LD_INT 2
12850: MUL
12851: PLUS
12852: PUSH
12853: FOR_TO
12854: IFFALSE 12942
// begin hc_gallery =  ;
12856: LD_ADDR_OWVAR 33
12860: PUSH
12861: LD_STRING 
12863: ST_TO_ADDR
// hc_name =  ;
12864: LD_ADDR_OWVAR 26
12868: PUSH
12869: LD_STRING 
12871: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12872: LD_INT 1
12874: PPUSH
12875: LD_INT 1
12877: PPUSH
12878: LD_EXP 13
12882: PPUSH
12883: LD_EXP 14
12887: PPUSH
12888: CALL_OW 12
12892: PPUSH
12893: CALL_OW 380
// un = CreateHuman ;
12897: LD_ADDR_VAR 0 6
12901: PUSH
12902: CALL_OW 44
12906: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
12907: LD_VAR 0 6
12911: PPUSH
12912: LD_VAR 0 2
12916: PPUSH
12917: LD_INT 0
12919: PPUSH
12920: CALL_OW 49
// attackGroup = attackGroup ^ un ;
12924: LD_ADDR_EXP 26
12928: PUSH
12929: LD_EXP 26
12933: PUSH
12934: LD_VAR 0 6
12938: ADD
12939: ST_TO_ADDR
// end ;
12940: GO 12853
12942: POP
12943: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
12944: LD_ADDR_VAR 0 7
12948: PUSH
12949: LD_INT 26
12951: PPUSH
12952: LD_INT 22
12954: PUSH
12955: LD_INT 3
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 21
12964: PUSH
12965: LD_INT 1
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 26
12974: PUSH
12975: LD_INT 1
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: LIST
12986: PPUSH
12987: CALL_OW 70
12991: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
12992: LD_VAR 0 7
12996: PUSH
12997: LD_INT 1
12999: ARRAY
13000: PPUSH
13001: LD_STRING D9-Rus3-1
13003: PPUSH
13004: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13008: LD_VAR 0 7
13012: PUSH
13013: LD_INT 2
13015: ARRAY
13016: PPUSH
13017: LD_STRING D9-Russ-1
13019: PPUSH
13020: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13024: LD_INT 35
13026: PPUSH
13027: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13031: LD_ADDR_VAR 0 4
13035: PUSH
13036: LD_INT 26
13038: PPUSH
13039: LD_INT 22
13041: PUSH
13042: LD_INT 3
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PUSH
13049: EMPTY
13050: LIST
13051: PPUSH
13052: CALL_OW 70
13056: PUSH
13057: FOR_IN
13058: IFFALSE 13230
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13060: LD_ADDR_VAR 0 8
13064: PUSH
13065: LD_INT 22
13067: PUSH
13068: LD_INT 1
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PPUSH
13075: CALL_OW 69
13079: PPUSH
13080: LD_VAR 0 4
13084: PPUSH
13085: CALL_OW 74
13089: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13090: LD_ADDR_VAR 0 9
13094: PUSH
13095: LD_INT 22
13097: PUSH
13098: LD_INT 1
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 2
13107: PUSH
13108: LD_INT 59
13110: PUSH
13111: EMPTY
13112: LIST
13113: PUSH
13114: LD_INT 21
13116: PUSH
13117: LD_INT 1
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 21
13126: PUSH
13127: LD_INT 2
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: PUSH
13144: EMPTY
13145: LIST
13146: PPUSH
13147: CALL_OW 69
13151: PPUSH
13152: LD_VAR 0 4
13156: PPUSH
13157: CALL_OW 74
13161: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13162: LD_VAR 0 4
13166: PPUSH
13167: LD_VAR 0 8
13171: PPUSH
13172: CALL_OW 296
13176: PUSH
13177: LD_INT 8
13179: PLUS
13180: PUSH
13181: LD_VAR 0 4
13185: PPUSH
13186: LD_VAR 0 9
13190: PPUSH
13191: CALL_OW 296
13195: LESS
13196: IFFALSE 13214
// begin ComAttackUnit ( i , target1 ) ;
13198: LD_VAR 0 4
13202: PPUSH
13203: LD_VAR 0 8
13207: PPUSH
13208: CALL_OW 115
// end else
13212: GO 13228
// begin ComAttackUnit ( i , target2 ) ;
13214: LD_VAR 0 4
13218: PPUSH
13219: LD_VAR 0 9
13223: PPUSH
13224: CALL_OW 115
// end ; end ;
13228: GO 13057
13230: POP
13231: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13232: LD_INT 26
13234: PPUSH
13235: LD_INT 22
13237: PUSH
13238: LD_INT 3
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: LD_INT 21
13250: PUSH
13251: LD_INT 1
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 21
13260: PUSH
13261: LD_INT 2
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 59
13270: PUSH
13271: EMPTY
13272: LIST
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PPUSH
13284: CALL_OW 70
13288: PUSH
13289: LD_INT 0
13291: EQUAL
13292: IFFALSE 13024
// end ; end_of_file
13294: LD_VAR 0 3
13298: RET
// every 0 0$1 do
13299: GO 13301
13301: DISABLE
// begin enable ;
13302: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13303: LD_INT 3
13305: PPUSH
13306: LD_INT 1
13308: PPUSH
13309: LD_INT 22
13311: PPUSH
13312: CALL 8602 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13316: LD_INT 3
13318: PPUSH
13319: LD_INT 20
13321: PPUSH
13322: LD_INT 22
13324: PPUSH
13325: LD_INT 23
13327: PPUSH
13328: CALL 8848 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13332: LD_INT 3
13334: PPUSH
13335: LD_INT 21
13337: PPUSH
13338: LD_INT 23
13340: PPUSH
13341: CALL 9114 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13345: LD_INT 22
13347: PPUSH
13348: LD_INT 1
13350: PPUSH
13351: LD_EXP 24
13355: PPUSH
13356: LD_INT 2
13358: PPUSH
13359: LD_INT 3
13361: PPUSH
13362: CALL 9586 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13366: LD_INT 23
13368: PPUSH
13369: LD_INT 1
13371: PPUSH
13372: LD_EXP 25
13376: PPUSH
13377: LD_INT 33
13379: PPUSH
13380: LD_INT 1
13382: PPUSH
13383: CALL 9586 0 5
// end ; end_of_file
13387: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 then
13388: LD_VAR 0 1
13392: PPUSH
13393: CALL_OW 255
13397: PUSH
13398: LD_INT 1
13400: EQUAL
13401: IFFALSE 13417
// deadsCounter = deadsCounter + 1 ;
13403: LD_ADDR_EXP 30
13407: PUSH
13408: LD_EXP 30
13412: PUSH
13413: LD_INT 1
13415: PLUS
13416: ST_TO_ADDR
// end ; end_of_file
13417: PPOPN 1
13419: END
// every 0 0$1 trigger IsDead ( JMM ) do
13420: LD_EXP 1
13424: PPUSH
13425: CALL_OW 301
13429: IFFALSE 13441
13431: GO 13433
13433: DISABLE
// YouLost ( JMM ) ;
13434: LD_STRING JMM
13436: PPUSH
13437: CALL_OW 104
13441: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
13442: LD_INT 1
13444: PPUSH
13445: CALL_OW 301
13449: PUSH
13450: LD_INT 10
13452: PPUSH
13453: CALL_OW 301
13457: OR
13458: IFFALSE 13470
13460: GO 13462
13462: DISABLE
// YouLost ( DepotDestroyed ) ;
13463: LD_STRING DepotDestroyed
13465: PPUSH
13466: CALL_OW 104
13470: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
13471: LD_INT 22
13473: PUSH
13474: LD_INT 1
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: LD_INT 21
13483: PUSH
13484: LD_INT 1
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 25
13493: PUSH
13494: LD_INT 2
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: PPUSH
13506: CALL_OW 69
13510: PUSH
13511: LD_INT 0
13513: EQUAL
13514: PUSH
13515: LD_INT 22
13517: PUSH
13518: LD_INT 4
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: LD_INT 21
13527: PUSH
13528: LD_INT 1
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: LD_INT 25
13537: PUSH
13538: LD_INT 2
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: PPUSH
13550: CALL_OW 69
13554: PUSH
13555: LD_INT 0
13557: EQUAL
13558: AND
13559: PUSH
13560: LD_INT 1
13562: PPUSH
13563: CALL_OW 255
13567: PUSH
13568: LD_INT 3
13570: EQUAL
13571: AND
13572: PUSH
13573: LD_INT 10
13575: PPUSH
13576: CALL_OW 255
13580: PUSH
13581: LD_INT 3
13583: EQUAL
13584: AND
13585: IFFALSE 13597
13587: GO 13589
13589: DISABLE
// YouLost ( Engineer ) ;
13590: LD_STRING Engineer
13592: PPUSH
13593: CALL_OW 104
13597: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
13598: LD_INT 1
13600: PPUSH
13601: CALL_OW 255
13605: PUSH
13606: LD_INT 3
13608: EQUAL
13609: PUSH
13610: LD_EXP 27
13614: PUSH
13615: LD_INT 1
13617: EQUAL
13618: AND
13619: IFFALSE 13631
13621: GO 13623
13623: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
13624: LD_STRING DepotCaptured
13626: PPUSH
13627: CALL_OW 104
13631: END
// export function PrepareTigers ; var i , un ; begin
13632: LD_INT 0
13634: PPUSH
13635: PPUSH
13636: PPUSH
// for i = 1 to Difficulty do
13637: LD_ADDR_VAR 0 2
13641: PUSH
13642: DOUBLE
13643: LD_INT 1
13645: DEC
13646: ST_TO_ADDR
13647: LD_OWVAR 67
13651: PUSH
13652: FOR_TO
13653: IFFALSE 13788
// begin hc_sex = sex_male ;
13655: LD_ADDR_OWVAR 27
13659: PUSH
13660: LD_INT 1
13662: ST_TO_ADDR
// uc_side = 0 ;
13663: LD_ADDR_OWVAR 20
13667: PUSH
13668: LD_INT 0
13670: ST_TO_ADDR
// uc_nation = nation_nature ;
13671: LD_ADDR_OWVAR 21
13675: PUSH
13676: LD_INT 0
13678: ST_TO_ADDR
// hc_class = class_tiger ;
13679: LD_ADDR_OWVAR 28
13683: PUSH
13684: LD_INT 14
13686: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
13687: LD_ADDR_OWVAR 31
13691: PUSH
13692: LD_EXP 14
13696: PUSH
13697: LD_INT 0
13699: PUSH
13700: LD_INT 0
13702: PUSH
13703: LD_INT 0
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
13712: LD_ADDR_OWVAR 35
13716: PUSH
13717: LD_INT 30
13719: PPUSH
13720: LD_INT 40
13722: PPUSH
13723: CALL_OW 12
13727: PUSH
13728: LD_INT 40
13730: PPUSH
13731: LD_INT 50
13733: PPUSH
13734: CALL_OW 12
13738: PUSH
13739: LD_INT 50
13741: PPUSH
13742: LD_INT 60
13744: PPUSH
13745: CALL_OW 12
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: LIST
13754: PUSH
13755: LD_OWVAR 67
13759: ARRAY
13760: ST_TO_ADDR
// un = CreateHuman ;
13761: LD_ADDR_VAR 0 3
13765: PUSH
13766: CALL_OW 44
13770: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13771: LD_VAR 0 3
13775: PPUSH
13776: LD_INT 27
13778: PPUSH
13779: LD_INT 0
13781: PPUSH
13782: CALL_OW 49
// end ;
13786: GO 13652
13788: POP
13789: POP
// end ; end_of_file
13790: LD_VAR 0 1
13794: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 do
13795: LD_INT 1
13797: PPUSH
13798: CALL_OW 255
13802: PUSH
13803: LD_INT 1
13805: EQUAL
13806: PUSH
13807: LD_INT 10
13809: PPUSH
13810: CALL_OW 255
13814: PUSH
13815: LD_INT 1
13817: EQUAL
13818: AND
13819: PUSH
13820: LD_EXP 20
13824: PUSH
13825: LD_INT 1
13827: EQUAL
13828: AND
13829: IFFALSE 13920
13831: GO 13833
13833: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
13834: LD_INT 9450
13836: PUSH
13837: LD_INT 8400
13839: PUSH
13840: LD_INT 6300
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: LIST
13847: PUSH
13848: LD_OWVAR 67
13852: ARRAY
13853: PPUSH
13854: CALL_OW 67
// if cargoEscape = 1 then
13858: LD_EXP 20
13862: PUSH
13863: LD_INT 1
13865: EQUAL
13866: IFFALSE 13920
// begin SayRadio ( Powell , D6-Pow-1 ) ;
13868: LD_EXP 9
13872: PPUSH
13873: LD_STRING D6-Pow-1
13875: PPUSH
13876: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
13880: LD_EXP 1
13884: PPUSH
13885: LD_STRING D6-JMM-1
13887: PPUSH
13888: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
13892: LD_EXP 9
13896: PPUSH
13897: LD_STRING D6-Pow-2
13899: PPUSH
13900: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
13904: LD_EXP 1
13908: PPUSH
13909: LD_STRING D6-JMM-2
13911: PPUSH
13912: CALL_OW 88
// FinishMission ;
13916: CALL 14128 0 0
// end ; end ;
13920: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
13921: LD_INT 1
13923: PPUSH
13924: CALL_OW 255
13928: PUSH
13929: LD_INT 1
13931: EQUAL
13932: PUSH
13933: LD_INT 10
13935: PPUSH
13936: CALL_OW 255
13940: PUSH
13941: LD_INT 1
13943: EQUAL
13944: AND
13945: PUSH
13946: LD_EXP 20
13950: PUSH
13951: LD_INT 1
13953: GREATER
13954: AND
13955: IFFALSE 14022
13957: GO 13959
13959: DISABLE
13960: LD_INT 0
13962: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
13963: LD_INT 11550
13965: PUSH
13966: LD_INT 10500
13968: PUSH
13969: LD_INT 9450
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: LIST
13976: PUSH
13977: LD_OWVAR 67
13981: ARRAY
13982: PPUSH
13983: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
13987: LD_INT 1
13989: PUSH
13990: LD_INT 2
13992: PUSH
13993: LD_INT 3
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: LIST
14000: PUSH
14001: LD_OWVAR 67
14005: ARRAY
14006: PPUSH
14007: LD_INT 13
14009: PPUSH
14010: CALL 12563 0 2
// lastBattle = 1 ;
14014: LD_ADDR_EXP 27
14018: PUSH
14019: LD_INT 1
14021: ST_TO_ADDR
// end ;
14022: PPOPN 1
14024: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14025: LD_EXP 27
14029: PUSH
14030: LD_INT 1
14032: EQUAL
14033: PUSH
14034: LD_INT 26
14036: PPUSH
14037: LD_INT 22
14039: PUSH
14040: LD_INT 3
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: LD_INT 21
14049: PUSH
14050: LD_INT 1
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PPUSH
14061: CALL_OW 70
14065: PUSH
14066: LD_INT 0
14068: EQUAL
14069: AND
14070: IFFALSE 14127
14072: GO 14074
14074: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14075: LD_EXP 9
14079: PPUSH
14080: LD_STRING D6-Pow-1
14082: PPUSH
14083: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14087: LD_EXP 1
14091: PPUSH
14092: LD_STRING D6-JMM-1
14094: PPUSH
14095: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14099: LD_EXP 9
14103: PPUSH
14104: LD_STRING D6-Pow-2
14106: PPUSH
14107: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14111: LD_EXP 1
14115: PPUSH
14116: LD_STRING D6-JMM-2
14118: PPUSH
14119: CALL_OW 88
// FinishMission ;
14123: CALL 14128 0 0
// end ;
14127: END
// export function FinishMission ; var tmp ; begin
14128: LD_INT 0
14130: PPUSH
14131: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14132: LD_ADDR_VAR 0 2
14136: PUSH
14137: LD_INT 22
14139: PUSH
14140: LD_INT 1
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 21
14149: PUSH
14150: LD_INT 2
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 24
14159: PUSH
14160: LD_INT 251
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: PPUSH
14172: CALL_OW 69
14176: ST_TO_ADDR
// if tmp then
14177: LD_VAR 0 2
14181: IFFALSE 14195
// SaveVehicles ( tmp , 02_tanks_1 ) ;
14183: LD_VAR 0 2
14187: PPUSH
14188: LD_STRING 02_tanks_1
14190: PPUSH
14191: CALL 10255 0 2
// if mikhailStatus = 1 then
14195: LD_EXP 21
14199: PUSH
14200: LD_INT 1
14202: EQUAL
14203: IFFALSE 14217
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
14205: LD_EXP 21
14209: PPUSH
14210: LD_STRING 02_mikhailStatus_1
14212: PPUSH
14213: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
14217: LD_INT 1
14219: PPUSH
14220: CALL_OW 274
14224: PPUSH
14225: LD_INT 1
14227: PPUSH
14228: CALL_OW 275
14232: PPUSH
14233: LD_STRING 02_resources_4
14235: PPUSH
14236: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
14240: LD_INT 1
14242: PPUSH
14243: CALL_OW 274
14247: PPUSH
14248: LD_INT 1
14250: PPUSH
14251: CALL_OW 275
14255: PUSH
14256: LD_INT 200
14258: GREATEREQUAL
14259: IFFALSE 14273
// begin AddMedal ( Cans , 1 ) ;
14261: LD_STRING Cans
14263: PPUSH
14264: LD_INT 1
14266: PPUSH
14267: CALL_OW 101
// end else
14271: GO 14284
// begin AddMedal ( Cans , - 1 ) ;
14273: LD_STRING Cans
14275: PPUSH
14276: LD_INT 1
14278: NEG
14279: PPUSH
14280: CALL_OW 101
// end ; if deadsCounter <= 3 then
14284: LD_EXP 30
14288: PUSH
14289: LD_INT 3
14291: LESSEQUAL
14292: IFFALSE 14306
// begin AddMedal ( Deaths , 1 ) ;
14294: LD_STRING Deaths
14296: PPUSH
14297: LD_INT 1
14299: PPUSH
14300: CALL_OW 101
// end else
14304: GO 14317
// begin AddMedal ( Deaths , - 1 ) ;
14306: LD_STRING Deaths
14308: PPUSH
14309: LD_INT 1
14311: NEG
14312: PPUSH
14313: CALL_OW 101
// end ; if mikhailStatus = 0 then
14317: LD_EXP 21
14321: PUSH
14322: LD_INT 0
14324: EQUAL
14325: IFFALSE 14338
// AddMedal ( Prisoner , - 1 ) ;
14327: LD_STRING Prisoner
14329: PPUSH
14330: LD_INT 1
14332: NEG
14333: PPUSH
14334: CALL_OW 101
// if mikhailStatus = 1 then
14338: LD_EXP 21
14342: PUSH
14343: LD_INT 1
14345: EQUAL
14346: IFFALSE 14358
// AddMedal ( Prisoner , 1 ) ;
14348: LD_STRING Prisoner
14350: PPUSH
14351: LD_INT 1
14353: PPUSH
14354: CALL_OW 101
// if mikhailStatus = 2 then
14358: LD_EXP 21
14362: PUSH
14363: LD_INT 2
14365: EQUAL
14366: IFFALSE 14378
// AddMedal ( Prisoner , 2 ) ;
14368: LD_STRING Prisoner
14370: PPUSH
14371: LD_INT 2
14373: PPUSH
14374: CALL_OW 101
// if mikhailStatus = 3 then
14378: LD_EXP 21
14382: PUSH
14383: LD_INT 3
14385: EQUAL
14386: IFFALSE 14399
// AddMedal ( Prisoner , - 2 ) ;
14388: LD_STRING Prisoner
14390: PPUSH
14391: LD_INT 2
14393: NEG
14394: PPUSH
14395: CALL_OW 101
// GiveMedals ( MAIN ) ;
14399: LD_STRING MAIN
14401: PPUSH
14402: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
14406: LD_INT 22
14408: PUSH
14409: LD_INT 1
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 23
14418: PUSH
14419: LD_INT 1
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 21
14428: PUSH
14429: LD_INT 1
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: PPUSH
14441: CALL_OW 69
14445: PPUSH
14446: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
14450: LD_EXP 1
14454: PPUSH
14455: LD_STRING JMM
14457: PPUSH
14458: CALL_OW 38
// SaveCharacters ( Bobby , Bobby ) ;
14462: LD_EXP 2
14466: PPUSH
14467: LD_STRING Bobby
14469: PPUSH
14470: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
14474: LD_EXP 3
14478: PPUSH
14479: LD_STRING Cyrus
14481: PPUSH
14482: CALL_OW 38
// SaveCharacters ( Lisa , Lisa ) ;
14486: LD_EXP 4
14490: PPUSH
14491: LD_STRING Lisa
14493: PPUSH
14494: CALL_OW 38
// SaveCharacters ( Khatam , Khatam ) ;
14498: LD_EXP 5
14502: PPUSH
14503: LD_STRING Khatam
14505: PPUSH
14506: CALL_OW 38
// if IsOK ( Brian ) then
14510: LD_EXP 6
14514: PPUSH
14515: CALL_OW 302
14519: IFFALSE 14533
// SaveCharacters ( Brian , Brian ) ;
14521: LD_EXP 6
14525: PPUSH
14526: LD_STRING Brian
14528: PPUSH
14529: CALL_OW 38
// if IsOk ( Jerry ) then
14533: LD_EXP 7
14537: PPUSH
14538: CALL_OW 302
14542: IFFALSE 14556
// SaveCharacters ( Jerry , Jerry ) ;
14544: LD_EXP 7
14548: PPUSH
14549: LD_STRING Jerry
14551: PPUSH
14552: CALL_OW 38
// if mikhailStatus = 1 then
14556: LD_EXP 21
14560: PUSH
14561: LD_INT 1
14563: EQUAL
14564: IFFALSE 14578
// SaveCharacters ( Mikhail , Mikhail ) ;
14566: LD_EXP 8
14570: PPUSH
14571: LD_STRING Mikhail
14573: PPUSH
14574: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
14578: LD_INT 50
14580: PUSH
14581: EMPTY
14582: LIST
14583: PUSH
14584: LD_INT 22
14586: PUSH
14587: LD_INT 1
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: LD_INT 21
14596: PUSH
14597: LD_INT 1
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: LIST
14608: PPUSH
14609: CALL_OW 69
14613: PUSH
14614: LD_EXP 1
14618: PUSH
14619: LD_EXP 2
14623: PUSH
14624: LD_EXP 3
14628: PUSH
14629: LD_EXP 4
14633: PUSH
14634: LD_EXP 5
14638: PUSH
14639: LD_EXP 6
14643: PUSH
14644: LD_EXP 7
14648: PUSH
14649: LD_EXP 8
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: DIFF
14664: PPUSH
14665: LD_STRING 02_other_survivors
14667: PPUSH
14668: CALL_OW 38
// YouWin ;
14672: CALL_OW 103
// end ;
14676: LD_VAR 0 1
14680: RET
