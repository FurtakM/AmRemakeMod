// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// PrepareDifficulty ;
 161: CALL 10502 0 0
// PrepareRussianCommander ;
 165: CALL 11946 0 0
// PrepareSouthBase ;
 169: CALL 12029 0 0
// PrepareNorthBase ;
 173: CALL 12368 0 0
// PrepareOtherRussians ;
 177: CALL 12734 0 0
// PrepareHeroes ;
 181: CALL 10817 0 0
// PrepareLisSquad ;
 185: CALL 11145 0 0
// PrepareOtherAmericans ;
 189: CALL 11490 0 0
// end ; end_of_file
 193: END
// every 1 do var tmp ;
 194: GO 196
 196: DISABLE
 197: LD_INT 0
 199: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 209: LD_ADDR_VAR 0 1
 213: PUSH
 214: LD_INT 22
 216: PUSH
 217: LD_INT 4
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 21
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PPUSH
 238: CALL_OW 69
 242: PUSH
 243: LD_EXP 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: DIFF
 251: ST_TO_ADDR
// if Cyrus and Bobby then
 252: LD_EXP 3
 256: PUSH
 257: LD_EXP 2
 261: AND
 262: IFFALSE 592
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 264: LD_EXP 3
 268: PPUSH
 269: LD_INT 43
 271: PPUSH
 272: LD_INT 72
 274: PPUSH
 275: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_INT 44
 286: PPUSH
 287: LD_INT 70
 289: PPUSH
 290: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 294: LD_EXP 1
 298: PPUSH
 299: LD_INT 46
 301: PPUSH
 302: LD_INT 73
 304: PPUSH
 305: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 309: LD_EXP 3
 313: PPUSH
 314: LD_STRING D1a-Cyrus-1
 316: PPUSH
 317: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_STRING D1a-JMM-1
 328: PPUSH
 329: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 333: LD_EXP 3
 337: PPUSH
 338: LD_INT 37
 340: PPUSH
 341: LD_INT 66
 343: PPUSH
 344: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 348: LD_EXP 2
 352: PPUSH
 353: LD_INT 41
 355: PPUSH
 356: LD_INT 67
 358: PPUSH
 359: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 363: LD_EXP 1
 367: PPUSH
 368: LD_INT 38
 370: PPUSH
 371: LD_INT 64
 373: PPUSH
 374: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 378: LD_EXP 2
 382: PPUSH
 383: LD_STRING D1a-Bobby-2
 385: PPUSH
 386: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 390: LD_EXP 3
 394: PPUSH
 395: LD_INT 35
 397: PPUSH
 398: LD_INT 62
 400: PPUSH
 401: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 405: LD_EXP 2
 409: PPUSH
 410: LD_INT 32
 412: PPUSH
 413: LD_INT 60
 415: PPUSH
 416: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 420: LD_EXP 1
 424: PPUSH
 425: LD_INT 35
 427: PPUSH
 428: LD_INT 60
 430: PPUSH
 431: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 435: LD_EXP 1
 439: PPUSH
 440: LD_STRING D1a-JMM-2
 442: PPUSH
 443: CALL_OW 88
// ComWalk ( Lisa ) ;
 447: LD_EXP 4
 451: PPUSH
 452: CALL_OW 138
// wait ( 0 0$1 ) ;
 456: LD_INT 35
 458: PPUSH
 459: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 463: LD_EXP 4
 467: PPUSH
 468: LD_EXP 1
 472: PPUSH
 473: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 477: LD_EXP 1
 481: PUSH
 482: LD_EXP 3
 486: PUSH
 487: LD_EXP 2
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PPUSH
 497: LD_EXP 4
 501: PPUSH
 502: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 506: LD_VAR 0 1
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: LD_INT 33
 517: PPUSH
 518: LD_INT 55
 520: PPUSH
 521: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 525: LD_VAR 0 1
 529: PUSH
 530: LD_INT 2
 532: ARRAY
 533: PPUSH
 534: LD_INT 30
 536: PPUSH
 537: LD_INT 54
 539: PPUSH
 540: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 544: LD_VAR 0 1
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: LD_EXP 1
 557: PPUSH
 558: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 562: LD_VAR 0 1
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 1
 575: PPUSH
 576: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 580: LD_EXP 4
 584: PPUSH
 585: LD_STRING D1a-Lisa-2
 587: PPUSH
 588: CALL_OW 88
// end ; if Cyrus and not Bobby then
 592: LD_EXP 3
 596: PUSH
 597: LD_EXP 2
 601: NOT
 602: AND
 603: IFFALSE 808
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 605: LD_EXP 3
 609: PPUSH
 610: LD_INT 43
 612: PPUSH
 613: LD_INT 72
 615: PPUSH
 616: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 46
 627: PPUSH
 628: LD_INT 73
 630: PPUSH
 631: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 635: LD_EXP 3
 639: PPUSH
 640: LD_STRING D1a-Cyrus-1
 642: PPUSH
 643: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 647: LD_EXP 1
 651: PPUSH
 652: LD_STRING D1a-JMM-1
 654: PPUSH
 655: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 659: LD_EXP 3
 663: PPUSH
 664: LD_INT 37
 666: PPUSH
 667: LD_INT 66
 669: PPUSH
 670: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 674: LD_EXP 1
 678: PPUSH
 679: LD_INT 38
 681: PPUSH
 682: LD_INT 64
 684: PPUSH
 685: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 689: LD_EXP 3
 693: PPUSH
 694: LD_STRING D1a-Cyrus-2
 696: PPUSH
 697: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 701: LD_EXP 3
 705: PPUSH
 706: LD_INT 35
 708: PPUSH
 709: LD_INT 62
 711: PPUSH
 712: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 716: LD_EXP 1
 720: PPUSH
 721: LD_INT 35
 723: PPUSH
 724: LD_INT 60
 726: PPUSH
 727: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 731: LD_EXP 1
 735: PPUSH
 736: LD_STRING D1a-JMM-2
 738: PPUSH
 739: CALL_OW 88
// ComWalk ( Lisa ) ;
 743: LD_EXP 4
 747: PPUSH
 748: CALL_OW 138
// wait ( 0 0$1 ) ;
 752: LD_INT 35
 754: PPUSH
 755: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 759: LD_EXP 4
 763: PPUSH
 764: LD_EXP 1
 768: PPUSH
 769: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 773: LD_EXP 4
 777: PPUSH
 778: LD_STRING D1a-Lisa-2
 780: PPUSH
 781: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 785: LD_EXP 1
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PPUSH
 799: LD_EXP 4
 803: PPUSH
 804: CALL_OW 119
// end ; if not Cyrus and Bobby then
 808: LD_EXP 3
 812: NOT
 813: PUSH
 814: LD_EXP 2
 818: AND
 819: IFFALSE 1098
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 821: LD_EXP 2
 825: PPUSH
 826: LD_INT 44
 828: PPUSH
 829: LD_INT 70
 831: PPUSH
 832: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 836: LD_EXP 1
 840: PPUSH
 841: LD_INT 46
 843: PPUSH
 844: LD_INT 73
 846: PPUSH
 847: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 851: LD_EXP 2
 855: PPUSH
 856: LD_STRING D1a-Bobby-1
 858: PPUSH
 859: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 863: LD_EXP 1
 867: PPUSH
 868: LD_STRING D1a-JMM-1
 870: PPUSH
 871: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 875: LD_EXP 2
 879: PPUSH
 880: LD_INT 37
 882: PPUSH
 883: LD_INT 66
 885: PPUSH
 886: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 890: LD_EXP 1
 894: PPUSH
 895: LD_INT 38
 897: PPUSH
 898: LD_INT 64
 900: PPUSH
 901: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 905: LD_EXP 2
 909: PPUSH
 910: LD_STRING D1a-Bobby-2
 912: PPUSH
 913: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 917: LD_EXP 2
 921: PPUSH
 922: LD_INT 35
 924: PPUSH
 925: LD_INT 62
 927: PPUSH
 928: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 932: LD_EXP 1
 936: PPUSH
 937: LD_INT 35
 939: PPUSH
 940: LD_INT 60
 942: PPUSH
 943: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 947: LD_EXP 1
 951: PPUSH
 952: LD_STRING D1a-JMM-2
 954: PPUSH
 955: CALL_OW 88
// ComWalk ( Lisa ) ;
 959: LD_EXP 4
 963: PPUSH
 964: CALL_OW 138
// wait ( 0 0$1 ) ;
 968: LD_INT 35
 970: PPUSH
 971: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 975: LD_EXP 4
 979: PPUSH
 980: LD_EXP 1
 984: PPUSH
 985: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 989: LD_EXP 1
 993: PUSH
 994: LD_EXP 3
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PPUSH
1003: LD_EXP 4
1007: PPUSH
1008: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1012: LD_VAR 0 1
1016: PUSH
1017: LD_INT 1
1019: ARRAY
1020: PPUSH
1021: LD_INT 33
1023: PPUSH
1024: LD_INT 55
1026: PPUSH
1027: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1031: LD_VAR 0 1
1035: PUSH
1036: LD_INT 2
1038: ARRAY
1039: PPUSH
1040: LD_INT 30
1042: PPUSH
1043: LD_INT 54
1045: PPUSH
1046: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1050: LD_VAR 0 1
1054: PUSH
1055: LD_INT 1
1057: ARRAY
1058: PPUSH
1059: LD_EXP 1
1063: PPUSH
1064: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1068: LD_VAR 0 1
1072: PUSH
1073: LD_INT 2
1075: ARRAY
1076: PPUSH
1077: LD_EXP 1
1081: PPUSH
1082: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1086: LD_EXP 4
1090: PPUSH
1091: LD_STRING D1a-Lisa-2
1093: PPUSH
1094: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1098: LD_EXP 3
1102: NOT
1103: PUSH
1104: LD_EXP 2
1108: NOT
1109: AND
1110: IFFALSE 1324
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1112: LD_EXP 1
1116: PPUSH
1117: LD_INT 37
1119: PPUSH
1120: LD_INT 66
1122: PPUSH
1123: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1127: LD_EXP 1
1131: PPUSH
1132: LD_STRING D1b-JMM-1
1134: PPUSH
1135: CALL_OW 88
// ComCrawl ( JMM ) ;
1139: LD_EXP 1
1143: PPUSH
1144: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1148: LD_EXP 1
1152: PPUSH
1153: LD_INT 35
1155: PPUSH
1156: LD_INT 60
1158: PPUSH
1159: CALL_OW 171
// wait ( 0 0$8 ) ;
1163: LD_INT 280
1165: PPUSH
1166: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_STRING D1b-JMM-1a
1177: PPUSH
1178: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1182: LD_EXP 1
1186: PUSH
1187: LD_EXP 4
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PPUSH
1196: CALL_OW 138
// wait ( 0 0$1 ) ;
1200: LD_INT 35
1202: PPUSH
1203: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1207: LD_EXP 4
1211: PPUSH
1212: LD_EXP 1
1216: PPUSH
1217: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1221: LD_EXP 1
1225: PUSH
1226: EMPTY
1227: LIST
1228: PPUSH
1229: LD_EXP 4
1233: PPUSH
1234: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1238: LD_VAR 0 1
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: LD_INT 33
1249: PPUSH
1250: LD_INT 55
1252: PPUSH
1253: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1257: LD_VAR 0 1
1261: PUSH
1262: LD_INT 2
1264: ARRAY
1265: PPUSH
1266: LD_INT 30
1268: PPUSH
1269: LD_INT 54
1271: PPUSH
1272: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1276: LD_VAR 0 1
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_EXP 1
1289: PPUSH
1290: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1294: LD_VAR 0 1
1298: PUSH
1299: LD_INT 2
1301: ARRAY
1302: PPUSH
1303: LD_EXP 1
1307: PPUSH
1308: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1312: LD_EXP 4
1316: PPUSH
1317: LD_STRING D1b-Lisa-1
1319: PPUSH
1320: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1324: LD_EXP 1
1328: PPUSH
1329: LD_STRING D1-JMM-1
1331: PPUSH
1332: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1336: LD_EXP 4
1340: PPUSH
1341: LD_STRING D1-Lisa-1
1343: PPUSH
1344: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1348: LD_EXP 1
1352: PPUSH
1353: LD_STRING D1-JMM-2
1355: PPUSH
1356: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1360: LD_EXP 9
1364: PPUSH
1365: LD_STRING D1-Pow-2
1367: PPUSH
1368: CALL_OW 94
// if Cyrus then
1372: LD_EXP 3
1376: IFFALSE 1402
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1378: LD_EXP 3
1382: PPUSH
1383: LD_STRING D1-Cyrus-2
1385: PPUSH
1386: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-3
1397: PPUSH
1398: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1402: LD_EXP 9
1406: PPUSH
1407: LD_STRING D1-Pow-3
1409: PPUSH
1410: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1414: LD_EXP 1
1418: PPUSH
1419: LD_STRING D1-JMM-4
1421: PPUSH
1422: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1426: LD_EXP 9
1430: PPUSH
1431: LD_STRING D1-Pow-4
1433: PPUSH
1434: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1438: LD_EXP 9
1442: PPUSH
1443: LD_STRING D1-Pow-4a
1445: PPUSH
1446: CALL_OW 94
// if Cyrus then
1450: LD_EXP 3
1454: IFFALSE 1468
// Say ( Cyrus , D1-Cyrus-4 ) ;
1456: LD_EXP 3
1460: PPUSH
1461: LD_STRING D1-Cyrus-4
1463: PPUSH
1464: CALL_OW 88
// if Bobby then
1468: LD_EXP 2
1472: IFFALSE 1510
// begin Say ( Bobby , D1-Bobby-4 ) ;
1474: LD_EXP 2
1478: PPUSH
1479: LD_STRING D1-Bobby-4
1481: PPUSH
1482: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1486: LD_EXP 4
1490: PPUSH
1491: LD_STRING D1-Lisa-4
1493: PPUSH
1494: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1498: LD_EXP 1
1502: PPUSH
1503: LD_STRING D1-JMM-5
1505: PPUSH
1506: CALL_OW 88
// end ; InGameOff ;
1510: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1514: LD_INT 22
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 69
1528: PUSH
1529: LD_EXP 6
1533: PUSH
1534: LD_EXP 7
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: DIFF
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1551: LD_STRING M1
1553: PPUSH
1554: CALL_OW 337
// SaveForQuickRestart ;
1558: CALL_OW 22
// end ;
1562: PPOPN 1
1564: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1565: LD_INT 7
1567: PPUSH
1568: LD_INT 22
1570: PUSH
1571: LD_INT 1
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 70
1582: PUSH
1583: LD_INT 0
1585: GREATER
1586: IFFALSE 2003
1588: GO 1590
1590: DISABLE
// begin InGameOn ;
1591: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1595: LD_INT 22
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 21
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PPUSH
1619: CALL_OW 69
1623: PPUSH
1624: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1628: LD_INT 24
1630: PPUSH
1631: LD_INT 32
1633: PPUSH
1634: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1638: LD_EXP 5
1642: PPUSH
1643: LD_INT 4
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 4
1660: PPUSH
1661: CALL_OW 336
// wait ( 0 0$1 ) ;
1665: LD_INT 35
1667: PPUSH
1668: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1672: LD_EXP 5
1676: PPUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_INT 38
1682: PPUSH
1683: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1687: LD_EXP 5
1691: PPUSH
1692: LD_EXP 1
1696: PPUSH
1697: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1701: LD_INT 22
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 21
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PPUSH
1725: CALL_OW 69
1729: PUSH
1730: LD_EXP 5
1734: PUSH
1735: EMPTY
1736: LIST
1737: DIFF
1738: PPUSH
1739: LD_EXP 5
1743: PPUSH
1744: CALL_OW 119
// wait ( 0 0$1 ) ;
1748: LD_INT 35
1750: PPUSH
1751: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1755: LD_EXP 5
1759: PPUSH
1760: LD_STRING D2a-Khat-1
1762: PPUSH
1763: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1767: LD_EXP 1
1771: PPUSH
1772: LD_STRING D2a-JMM-1
1774: PPUSH
1775: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1779: LD_EXP 5
1783: PPUSH
1784: LD_STRING D2a-Khat-2
1786: PPUSH
1787: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1791: LD_EXP 1
1795: PPUSH
1796: LD_STRING D2a-JMM-2
1798: PPUSH
1799: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1803: LD_EXP 5
1807: PPUSH
1808: LD_STRING D2a-Khat-3
1810: PPUSH
1811: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1815: LD_EXP 1
1819: PPUSH
1820: LD_STRING D2a-JMM-3
1822: PPUSH
1823: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1827: LD_EXP 5
1831: PPUSH
1832: LD_STRING D2a-Khat-4
1834: PPUSH
1835: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1839: LD_EXP 1
1843: PPUSH
1844: LD_STRING D2a-JMM-4
1846: PPUSH
1847: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1851: LD_EXP 5
1855: PPUSH
1856: LD_STRING D2a-Khat-5
1858: PPUSH
1859: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_STRING D2a-JMM-5
1870: PPUSH
1871: CALL_OW 88
// InGameOff ;
1875: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1879: LD_INT 22
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 21
1891: PUSH
1892: LD_INT 1
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 3
1901: PUSH
1902: LD_INT 24
1904: PUSH
1905: LD_INT 800
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: PUSH
1926: LD_INT 0
1928: GREATER
1929: IFFALSE 2003
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1931: LD_EXP 5
1935: PPUSH
1936: LD_INT 22
1938: PUSH
1939: LD_INT 1
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 21
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 3
1958: PUSH
1959: LD_INT 24
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: PPUSH
1978: CALL_OW 69
1982: PUSH
1983: LD_INT 1
1985: ARRAY
1986: PPUSH
1987: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1991: LD_EXP 5
1995: PPUSH
1996: LD_STRING D2b-Khat-1
1998: PPUSH
1999: CALL_OW 88
// end ; end ;
2003: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
2004: LD_INT 15
2006: PPUSH
2007: LD_INT 22
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PPUSH
2017: CALL_OW 70
2021: PUSH
2022: LD_INT 0
2024: GREATER
2025: IFFALSE 3182
2027: GO 2029
2029: DISABLE
2030: LD_INT 0
2032: PPUSH
2033: PPUSH
2034: PPUSH
2035: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: LD_INT 999
2043: PUSH
2044: LD_INT 999
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2054: LD_ADDR_VAR 0 4
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 1
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PPUSH
2083: CALL_OW 69
2087: PUSH
2088: LD_EXP 1
2092: PUSH
2093: LD_EXP 2
2097: PUSH
2098: LD_EXP 3
2102: PUSH
2103: LD_EXP 4
2107: PUSH
2108: LD_EXP 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: DIFF
2120: ST_TO_ADDR
// PrepareDeadSoldiers ;
2121: CALL 11648 0 0
// spotCorpses = 1 ;
2125: LD_ADDR_EXP 32
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
// InGameOn ;
2133: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2137: LD_INT 23
2139: PPUSH
2140: LD_INT 12
2142: PPUSH
2143: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2147: LD_ADDR_VAR 0 3
2151: PUSH
2152: LD_VAR 0 2
2156: PUSH
2157: LD_INT 1
2159: ARRAY
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2165: LD_ADDR_VAR 0 1
2169: PUSH
2170: LD_INT 22
2172: PUSH
2173: LD_INT 1
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 21
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PPUSH
2194: CALL_OW 69
2198: PUSH
2199: LD_EXP 1
2203: PUSH
2204: LD_EXP 5
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: DIFF
2213: PUSH
2214: FOR_IN
2215: IFFALSE 2266
// if IsOK ( i ) then
2217: LD_VAR 0 1
2221: PPUSH
2222: CALL_OW 302
2226: IFFALSE 2264
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2228: LD_ADDR_VAR 0 2
2232: PUSH
2233: LD_VAR 0 2
2237: PUSH
2238: LD_VAR 0 1
2242: PUSH
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 16
2250: PPUSH
2251: CALL_OW 299
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: ADD
2263: ST_TO_ADDR
2264: GO 2214
2266: POP
2267: POP
// for i = 2 to distanceTab do
2268: LD_ADDR_VAR 0 1
2272: PUSH
2273: DOUBLE
2274: LD_INT 2
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2330
// if distanceTab [ i ] [ 2 ] < min then
2286: LD_VAR 0 2
2290: PUSH
2291: LD_VAR 0 1
2295: ARRAY
2296: PUSH
2297: LD_INT 2
2299: ARRAY
2300: PUSH
2301: LD_VAR 0 3
2305: LESS
2306: IFFALSE 2328
// min = distanceTab [ i ] [ 2 ] ;
2308: LD_ADDR_VAR 0 3
2312: PUSH
2313: LD_VAR 0 2
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: PUSH
2324: LD_INT 2
2326: ARRAY
2327: ST_TO_ADDR
2328: GO 2283
2330: POP
2331: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2332: LD_ADDR_VAR 0 1
2336: PUSH
2337: LD_INT 22
2339: PUSH
2340: LD_INT 1
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 21
2349: PUSH
2350: LD_INT 1
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PPUSH
2361: CALL_OW 69
2365: PUSH
2366: LD_EXP 1
2370: PUSH
2371: EMPTY
2372: LIST
2373: DIFF
2374: PUSH
2375: FOR_IN
2376: IFFALSE 2446
// begin ComMoveToArea ( i , DeadCutscene ) ;
2378: LD_VAR 0 1
2382: PPUSH
2383: LD_INT 28
2385: PPUSH
2386: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2390: LD_EXP 1
2394: PPUSH
2395: LD_INT 30
2397: PPUSH
2398: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2402: LD_VAR 0 1
2406: PPUSH
2407: LD_INT 23
2409: PPUSH
2410: LD_INT 11
2412: PPUSH
2413: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2417: LD_EXP 1
2421: PPUSH
2422: LD_INT 23
2424: PPUSH
2425: LD_INT 11
2427: PPUSH
2428: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2432: LD_EXP 34
2436: PPUSH
2437: LD_INT 250
2439: PPUSH
2440: CALL_OW 234
// end ;
2444: GO 2375
2446: POP
2447: POP
// for i = 2 to distanceTab do
2448: LD_ADDR_VAR 0 1
2452: PUSH
2453: DOUBLE
2454: LD_INT 2
2456: DEC
2457: ST_TO_ADDR
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_TO
2464: IFFALSE 2850
// begin if distanceTab [ i ] [ 2 ] = min then
2466: LD_VAR 0 2
2470: PUSH
2471: LD_VAR 0 1
2475: ARRAY
2476: PUSH
2477: LD_INT 2
2479: ARRAY
2480: PUSH
2481: LD_VAR 0 3
2485: EQUAL
2486: IFFALSE 2848
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2488: LD_VAR 0 2
2492: PUSH
2493: LD_VAR 0 1
2497: ARRAY
2498: PUSH
2499: LD_INT 1
2501: ARRAY
2502: PUSH
2503: LD_EXP 2
2507: EQUAL
2508: IFFALSE 2522
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2510: LD_EXP 2
2514: PPUSH
2515: LD_STRING DCorpses-Bobby-1
2517: PPUSH
2518: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2522: LD_VAR 0 2
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PUSH
2537: LD_EXP 3
2541: EQUAL
2542: IFFALSE 2556
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2544: LD_EXP 3
2548: PPUSH
2549: LD_STRING DCorpses-Cyrus-1
2551: PPUSH
2552: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2556: LD_VAR 0 2
2560: PUSH
2561: LD_VAR 0 1
2565: ARRAY
2566: PUSH
2567: LD_INT 1
2569: ARRAY
2570: PUSH
2571: LD_EXP 4
2575: EQUAL
2576: IFFALSE 2590
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2578: LD_EXP 4
2582: PPUSH
2583: LD_STRING DCorpses-Lisa-1
2585: PPUSH
2586: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2590: LD_VAR 0 2
2594: PUSH
2595: LD_VAR 0 1
2599: ARRAY
2600: PUSH
2601: LD_INT 1
2603: ARRAY
2604: PUSH
2605: LD_VAR 0 4
2609: PUSH
2610: LD_INT 1
2612: ARRAY
2613: EQUAL
2614: PUSH
2615: LD_VAR 0 4
2619: PUSH
2620: LD_INT 1
2622: ARRAY
2623: PPUSH
2624: CALL_OW 258
2628: PUSH
2629: LD_INT 1
2631: EQUAL
2632: AND
2633: IFFALSE 2651
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2635: LD_VAR 0 4
2639: PUSH
2640: LD_INT 1
2642: ARRAY
2643: PPUSH
2644: LD_STRING DCorpses-Sol1-1
2646: PPUSH
2647: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2651: LD_VAR 0 2
2655: PUSH
2656: LD_VAR 0 1
2660: ARRAY
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PUSH
2666: LD_VAR 0 4
2670: PUSH
2671: LD_INT 1
2673: ARRAY
2674: EQUAL
2675: PUSH
2676: LD_VAR 0 4
2680: PUSH
2681: LD_INT 1
2683: ARRAY
2684: PPUSH
2685: CALL_OW 258
2689: PUSH
2690: LD_INT 2
2692: EQUAL
2693: AND
2694: IFFALSE 2712
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2696: LD_VAR 0 4
2700: PUSH
2701: LD_INT 1
2703: ARRAY
2704: PPUSH
2705: LD_STRING DCorpses-FSol1-1
2707: PPUSH
2708: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2712: LD_VAR 0 2
2716: PUSH
2717: LD_VAR 0 1
2721: ARRAY
2722: PUSH
2723: LD_INT 1
2725: ARRAY
2726: PUSH
2727: LD_VAR 0 4
2731: PUSH
2732: LD_INT 2
2734: ARRAY
2735: EQUAL
2736: PUSH
2737: LD_VAR 0 4
2741: PUSH
2742: LD_INT 2
2744: ARRAY
2745: PPUSH
2746: CALL_OW 258
2750: PUSH
2751: LD_INT 1
2753: EQUAL
2754: AND
2755: IFFALSE 2773
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2757: LD_VAR 0 4
2761: PUSH
2762: LD_INT 2
2764: ARRAY
2765: PPUSH
2766: LD_STRING DCorpses-Sol1-1
2768: PPUSH
2769: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2773: LD_VAR 0 2
2777: PUSH
2778: LD_VAR 0 1
2782: ARRAY
2783: PUSH
2784: LD_INT 1
2786: ARRAY
2787: PUSH
2788: LD_VAR 0 4
2792: PUSH
2793: LD_INT 2
2795: ARRAY
2796: EQUAL
2797: PUSH
2798: LD_VAR 0 4
2802: PUSH
2803: LD_INT 2
2805: ARRAY
2806: PPUSH
2807: CALL_OW 258
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: AND
2816: IFFALSE 2834
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2818: LD_VAR 0 4
2822: PUSH
2823: LD_INT 2
2825: ARRAY
2826: PPUSH
2827: LD_STRING DCorpses-FSol1-1
2829: PPUSH
2830: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2834: LD_EXP 34
2838: PPUSH
2839: LD_INT 150
2841: PPUSH
2842: CALL_OW 234
// break ;
2846: GO 2850
// end ; end ;
2848: GO 2463
2850: POP
2851: POP
// repeat wait ( 0 0$1 ) ;
2852: LD_INT 35
2854: PPUSH
2855: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2859: LD_ADDR_VAR 0 1
2863: PUSH
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 21
2876: PUSH
2877: LD_INT 1
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_EXP 1
2897: PUSH
2898: EMPTY
2899: LIST
2900: DIFF
2901: PUSH
2902: FOR_IN
2903: IFFALSE 2973
// begin ComMoveToArea ( i , DeadCutscene ) ;
2905: LD_VAR 0 1
2909: PPUSH
2910: LD_INT 28
2912: PPUSH
2913: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2917: LD_EXP 1
2921: PPUSH
2922: LD_INT 30
2924: PPUSH
2925: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2929: LD_VAR 0 1
2933: PPUSH
2934: LD_INT 23
2936: PPUSH
2937: LD_INT 11
2939: PPUSH
2940: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2944: LD_EXP 1
2948: PPUSH
2949: LD_INT 23
2951: PPUSH
2952: LD_INT 11
2954: PPUSH
2955: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2959: LD_EXP 34
2963: PPUSH
2964: LD_INT 250
2966: PPUSH
2967: CALL_OW 234
// end ;
2971: GO 2902
2973: POP
2974: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2975: LD_EXP 1
2979: PPUSH
2980: LD_INT 30
2982: PPUSH
2983: CALL_OW 308
2987: IFFALSE 2852
// wait ( 0 0$3 ) ;
2989: LD_INT 105
2991: PPUSH
2992: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2996: LD_EXP 1
3000: PPUSH
3001: LD_STRING DCorpses-JMM-1
3003: PPUSH
3004: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3008: LD_EXP 34
3012: PPUSH
3013: LD_INT 100
3015: PPUSH
3016: CALL_OW 234
// if IsOK ( Khatam ) then
3020: LD_EXP 5
3024: PPUSH
3025: CALL_OW 302
3029: IFFALSE 3166
// begin repeat wait ( 0 0$1 ) ;
3031: LD_INT 35
3033: PPUSH
3034: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3038: LD_EXP 5
3042: PPUSH
3043: LD_EXP 34
3047: PPUSH
3048: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3052: LD_EXP 5
3056: PPUSH
3057: LD_EXP 34
3061: PPUSH
3062: CALL_OW 296
3066: PUSH
3067: LD_INT 2
3069: LESS
3070: IFFALSE 3031
// spotCorpses = 0 ;
3072: LD_ADDR_EXP 32
3076: PUSH
3077: LD_INT 0
3079: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3080: LD_EXP 34
3084: PPUSH
3085: LD_INT 10
3087: PPUSH
3088: CALL_OW 234
// wait ( 0 0$3 ) ;
3092: LD_INT 105
3094: PPUSH
3095: CALL_OW 67
// KillUnit ( DyingSold ) ;
3099: LD_EXP 34
3103: PPUSH
3104: CALL_OW 66
// wait ( 0 0$1 ) ;
3108: LD_INT 35
3110: PPUSH
3111: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3115: LD_EXP 1
3119: PUSH
3120: LD_EXP 5
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PPUSH
3129: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3133: LD_EXP 5
3137: PPUSH
3138: LD_EXP 1
3142: PPUSH
3143: CALL_OW 119
// wait ( 0 0$1 ) ;
3147: LD_INT 35
3149: PPUSH
3150: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3154: LD_EXP 5
3158: PPUSH
3159: LD_STRING DCorpses-Khat-1
3161: PPUSH
3162: CALL_OW 88
// end ; InGameOff ;
3166: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3170: LD_EXP 1
3174: PPUSH
3175: LD_STRING DCorpses-JMM-2
3177: PPUSH
3178: CALL_OW 88
// end ;
3182: PPOPN 4
3184: END
// every 0 0$1 trigger spotCorpses = 1 do
3185: LD_EXP 32
3189: PUSH
3190: LD_INT 1
3192: EQUAL
3193: IFFALSE 3211
3195: GO 3197
3197: DISABLE
// begin enable ;
3198: ENABLE
// SetLives ( DyingSold , 10 ) ;
3199: LD_EXP 34
3203: PPUSH
3204: LD_INT 10
3206: PPUSH
3207: CALL_OW 234
// end ;
3211: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 15 ) do var i ;
3212: LD_INT 8
3214: PPUSH
3215: LD_INT 22
3217: PUSH
3218: LD_INT 1
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: CALL_OW 70
3229: PUSH
3230: LD_INT 0
3232: GREATER
3233: PUSH
3234: LD_INT 22
3236: PUSH
3237: LD_INT 1
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PPUSH
3244: CALL_OW 69
3248: PPUSH
3249: LD_EXP 7
3253: PPUSH
3254: CALL_OW 74
3258: PPUSH
3259: LD_EXP 7
3263: PPUSH
3264: CALL_OW 296
3268: PUSH
3269: LD_INT 15
3271: LESS
3272: OR
3273: IFFALSE 3497
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
// begin InGameOn ;
3281: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3285: LD_EXP 7
3289: PPUSH
3290: LD_INT 250
3292: PPUSH
3293: CALL_OW 234
// SetLives ( Brian , 750 ) ;
3297: LD_EXP 6
3301: PPUSH
3302: LD_INT 750
3304: PPUSH
3305: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3309: LD_INT 3
3311: PPUSH
3312: LD_INT 4
3314: PPUSH
3315: LD_INT 2
3317: PPUSH
3318: LD_INT 1
3320: PPUSH
3321: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3325: LD_EXP 6
3329: PUSH
3330: LD_EXP 7
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PPUSH
3339: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3343: LD_ADDR_VAR 0 1
3347: PUSH
3348: LD_INT 9
3350: PPUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 3
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PPUSH
3361: CALL_OW 70
3365: PUSH
3366: FOR_IN
3367: IFFALSE 3380
// ComFree ( i ) ;
3369: LD_VAR 0 1
3373: PPUSH
3374: CALL_OW 139
3378: GO 3366
3380: POP
3381: POP
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3382: LD_ADDR_VAR 0 1
3386: PUSH
3387: LD_INT 9
3389: PPUSH
3390: LD_INT 22
3392: PUSH
3393: LD_INT 3
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PPUSH
3400: CALL_OW 70
3404: PUSH
3405: FOR_IN
3406: IFFALSE 3424
// AddComAttackUnit ( i , Brian ) ;
3408: LD_VAR 0 1
3412: PPUSH
3413: LD_EXP 6
3417: PPUSH
3418: CALL_OW 175
3422: GO 3405
3424: POP
3425: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3426: LD_ADDR_VAR 0 1
3430: PUSH
3431: LD_INT 22
3433: PUSH
3434: LD_INT 4
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PPUSH
3441: CALL_OW 69
3445: PUSH
3446: FOR_IN
3447: IFFALSE 3460
// ComFree ( i ) ;
3449: LD_VAR 0 1
3453: PPUSH
3454: CALL_OW 139
3458: GO 3446
3460: POP
3461: POP
// wait ( 0 0$1 ) ;
3462: LD_INT 35
3464: PPUSH
3465: CALL_OW 67
// InGameOff ;
3469: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3473: LD_EXP 6
3477: PPUSH
3478: LD_STRING DF-Sol1-1
3480: PPUSH
3481: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3485: LD_EXP 1
3489: PPUSH
3490: LD_STRING DF-JMM-1
3492: PPUSH
3493: CALL_OW 88
// end ;
3497: PPOPN 1
3499: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3500: LD_INT 19
3502: PPUSH
3503: LD_INT 22
3505: PUSH
3506: LD_INT 3
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 70
3517: PUSH
3518: LD_INT 0
3520: EQUAL
3521: IFFALSE 3634
3523: GO 3525
3525: DISABLE
// begin if not IsDead ( Brian ) then
3526: LD_EXP 6
3530: PPUSH
3531: CALL_OW 301
3535: NOT
3536: IFFALSE 3550
// SetSide ( Brian , 1 ) ;
3538: LD_EXP 6
3542: PPUSH
3543: LD_INT 1
3545: PPUSH
3546: CALL_OW 235
// if not IsDead ( Jerry ) then
3550: LD_EXP 7
3554: PPUSH
3555: CALL_OW 301
3559: NOT
3560: IFFALSE 3574
// SetSide ( Jerry , 1 ) ;
3562: LD_EXP 7
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3574: LD_INT 22
3576: PUSH
3577: LD_INT 1
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PUSH
3584: LD_INT 25
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PPUSH
3598: CALL_OW 69
3602: PUSH
3603: LD_INT 0
3605: GREATER
3606: IFFALSE 3622
// begin Say ( JMM , DFa-JMM-1 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING DFa-JMM-1
3615: PPUSH
3616: CALL_OW 88
// end else
3620: GO 3634
// begin Say ( JMM , DFa-JMM-1a ) ;
3622: LD_EXP 1
3626: PPUSH
3627: LD_STRING DFa-JMM-1a
3629: PPUSH
3630: CALL_OW 88
// end ; end ;
3634: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3635: LD_INT 19
3637: PPUSH
3638: LD_INT 22
3640: PUSH
3641: LD_INT 3
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL_OW 70
3652: PUSH
3653: LD_INT 0
3655: EQUAL
3656: PUSH
3657: LD_EXP 6
3661: PPUSH
3662: CALL_OW 302
3666: NOT
3667: AND
3668: IFFALSE 3745
3670: GO 3672
3672: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3673: LD_INT 35
3675: PPUSH
3676: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3680: LD_EXP 6
3684: PPUSH
3685: CALL_OW 256
3689: PUSH
3690: LD_INT 250
3692: GREATER
3693: IFFALSE 3673
// Say ( Brian , DFb-Sol1-1 ) ;
3695: LD_EXP 6
3699: PPUSH
3700: LD_STRING DFb-Sol1-1
3702: PPUSH
3703: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3707: LD_EXP 6
3711: PPUSH
3712: LD_INT 78
3714: PPUSH
3715: LD_INT 74
3717: PPUSH
3718: CALL_OW 111
// if IsDead ( Jerry ) then
3722: LD_EXP 7
3726: PPUSH
3727: CALL_OW 301
3731: IFFALSE 3745
// Say ( Brian , DFb-Sol1-1a ) end ;
3733: LD_EXP 6
3737: PPUSH
3738: LD_STRING DFb-Sol1-1a
3740: PPUSH
3741: CALL_OW 88
3745: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3746: LD_INT 22
3748: PUSH
3749: LD_INT 1
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_INT 21
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PPUSH
3770: CALL_OW 69
3774: PUSH
3775: LD_INT 0
3777: EQUAL
3778: IFFALSE 3866
3780: GO 3782
3782: DISABLE
3783: LD_INT 0
3785: PPUSH
// begin enable ;
3786: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3787: LD_ADDR_VAR 0 1
3791: PUSH
3792: LD_INT 22
3794: PUSH
3795: LD_INT 3
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 3
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PUSH
3812: LD_INT 30
3814: PUSH
3815: LD_INT 31
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: LIST
3826: PPUSH
3827: CALL_OW 69
3831: PUSH
3832: FOR_IN
3833: IFFALSE 3864
// begin if See ( 1 , i ) then
3835: LD_INT 1
3837: PPUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: CALL_OW 292
3847: IFFALSE 3862
// begin disable ;
3849: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3850: LD_EXP 1
3854: PPUSH
3855: LD_STRING DX1-JMM-1
3857: PPUSH
3858: CALL_OW 88
// end ; end ;
3862: GO 3832
3864: POP
3865: POP
// end ;
3866: PPOPN 1
3868: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3869: LD_INT 1
3871: PPUSH
3872: LD_INT 11
3874: PPUSH
3875: CALL_OW 294
3879: IFFALSE 4293
3881: GO 3883
3883: DISABLE
3884: LD_INT 0
3886: PPUSH
3887: PPUSH
// begin DialogueOn ;
3888: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3892: LD_INT 11
3894: PPUSH
3895: LD_INT 22
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: PUSH
3905: LD_INT 21
3907: PUSH
3908: LD_INT 1
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PPUSH
3919: CALL_OW 70
3923: PUSH
3924: LD_INT 1
3926: ARRAY
3927: PPUSH
3928: LD_STRING DX3-Rus1-1
3930: PPUSH
3931: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING DX3-JMM-1
3942: PPUSH
3943: CALL_OW 88
// DialogueOff ;
3947: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3951: LD_ADDR_VAR 0 1
3955: PUSH
3956: LD_INT 11
3958: PPUSH
3959: LD_INT 22
3961: PUSH
3962: LD_INT 3
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 21
3971: PUSH
3972: LD_INT 1
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: PPUSH
3983: CALL_OW 70
3987: PUSH
3988: FOR_IN
3989: IFFALSE 4009
// southBaseDefenders = southBaseDefenders ^ i ;
3991: LD_ADDR_EXP 25
3995: PUSH
3996: LD_EXP 25
4000: PUSH
4001: LD_VAR 0 1
4005: ADD
4006: ST_TO_ADDR
4007: GO 3988
4009: POP
4010: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
4011: LD_INT 455
4013: PUSH
4014: LD_INT 420
4016: PUSH
4017: LD_INT 315
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: PUSH
4025: LD_OWVAR 67
4029: ARRAY
4030: PPUSH
4031: CALL_OW 67
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ) ;
4035: LD_INT 22
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: LD_INT 21
4047: PUSH
4048: LD_INT 1
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 25
4057: PUSH
4058: LD_INT 3
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 69
4074: PPUSH
4075: CALL_OW 122
// wait ( 0 0$1 ) ;
4079: LD_INT 35
4081: PPUSH
4082: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
4086: LD_INT 35
4088: PPUSH
4089: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
4093: LD_ADDR_VAR 0 1
4097: PUSH
4098: LD_INT 22
4100: PUSH
4101: LD_INT 3
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 21
4110: PUSH
4111: LD_INT 2
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 58
4120: PUSH
4121: EMPTY
4122: LIST
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: LIST
4128: PPUSH
4129: CALL_OW 69
4133: PUSH
4134: FOR_IN
4135: IFFALSE 4205
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: LD_INT 22
4144: PUSH
4145: LD_INT 3
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 21
4154: PUSH
4155: LD_INT 1
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 3
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 69
4181: PUSH
4182: FOR_IN
4183: IFFALSE 4201
// begin ComEnterUnit ( j , i ) ;
4185: LD_VAR 0 2
4189: PPUSH
4190: LD_VAR 0 1
4194: PPUSH
4195: CALL_OW 120
// end ;
4199: GO 4182
4201: POP
4202: POP
// end ;
4203: GO 4134
4205: POP
4206: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4207: LD_INT 22
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 21
4219: PUSH
4220: LD_INT 2
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 58
4229: PUSH
4230: EMPTY
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 69
4242: PUSH
4243: LD_INT 0
4245: EQUAL
4246: PUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 21
4259: PUSH
4260: LD_INT 1
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: LD_INT 25
4269: PUSH
4270: LD_INT 3
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 69
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: OR
4291: IFFALSE 4086
// end ;
4293: PPOPN 2
4295: END
// every 0 0$1 do var i , tmp ;
4296: GO 4298
4298: DISABLE
4299: LD_INT 0
4301: PPUSH
4302: PPUSH
// begin enable ;
4303: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4304: LD_ADDR_VAR 0 2
4308: PUSH
4309: LD_INT 22
4311: PUSH
4312: LD_INT 1
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: LD_INT 21
4321: PUSH
4322: LD_INT 1
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PPUSH
4333: CALL_OW 69
4337: ST_TO_ADDR
// for i in tmp do
4338: LD_ADDR_VAR 0 1
4342: PUSH
4343: LD_VAR 0 2
4347: PUSH
4348: FOR_IN
4349: IFFALSE 4471
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_INT 5
4358: PPUSH
4359: CALL_OW 296
4363: PUSH
4364: LD_INT 4
4366: LESS
4367: PUSH
4368: LD_VAR 0 1
4372: PPUSH
4373: LD_INT 4
4375: PPUSH
4376: CALL_OW 296
4380: PUSH
4381: LD_INT 4
4383: LESS
4384: OR
4385: IFFALSE 4469
// begin disable ;
4387: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4388: LD_INT 5
4390: PUSH
4391: LD_INT 4
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PPUSH
4398: CALL_OW 85
// if IsOK ( Bobby ) then
4402: LD_EXP 2
4406: PPUSH
4407: CALL_OW 302
4411: IFFALSE 4448
// begin DialogueOn ;
4413: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4417: LD_EXP 2
4421: PPUSH
4422: LD_STRING DX2-Bobby-1
4424: PPUSH
4425: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4429: LD_EXP 1
4433: PPUSH
4434: LD_STRING DX2-JMM-1a
4436: PPUSH
4437: CALL_OW 88
// DialogueOff ;
4441: CALL_OW 7
// disable ;
4445: DISABLE
// end else
4446: GO 4469
// begin DialogueOn ;
4448: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4452: LD_EXP 1
4456: PPUSH
4457: LD_STRING DX2-JMM-1
4459: PPUSH
4460: CALL_OW 88
// DialogueOff ;
4464: CALL_OW 7
// disable ;
4468: DISABLE
// end ; end ; end ;
4469: GO 4348
4471: POP
4472: POP
// end ;
4473: PPOPN 2
4475: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4476: LD_INT 22
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 23
4488: PUSH
4489: LD_INT 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 21
4498: PUSH
4499: LD_INT 2
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 34
4508: PUSH
4509: LD_INT 42
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: PPUSH
4522: CALL_OW 69
4526: PUSH
4527: LD_INT 1
4529: GREATEREQUAL
4530: IFFALSE 5011
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
4540: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4541: LD_ADDR_VAR 0 1
4545: PUSH
4546: LD_INT 22
4548: PUSH
4549: LD_INT 1
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 23
4558: PUSH
4559: LD_INT 3
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 21
4568: PUSH
4569: LD_INT 2
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 34
4578: PUSH
4579: LD_INT 42
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: PPUSH
4592: CALL_OW 69
4596: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby , Khatam ] ;
4597: LD_ADDR_VAR 0 2
4601: PUSH
4602: LD_INT 22
4604: PUSH
4605: LD_INT 1
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: LD_INT 21
4614: PUSH
4615: LD_INT 1
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 26
4624: PUSH
4625: LD_INT 1
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: PPUSH
4637: CALL_OW 69
4641: PUSH
4642: LD_EXP 1
4646: PUSH
4647: LD_EXP 3
4651: PUSH
4652: LD_EXP 2
4656: PUSH
4657: LD_EXP 5
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: DIFF
4668: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4669: LD_ADDR_VAR 0 3
4673: PUSH
4674: LD_INT 22
4676: PUSH
4677: LD_INT 1
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_INT 21
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 26
4696: PUSH
4697: LD_INT 2
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: PPUSH
4709: CALL_OW 69
4713: PUSH
4714: LD_EXP 4
4718: PUSH
4719: EMPTY
4720: LIST
4721: DIFF
4722: ST_TO_ADDR
// DialogueOn ;
4723: CALL_OW 6
// if not IsInUnit ( JMM ) then
4727: LD_EXP 1
4731: PPUSH
4732: CALL_OW 310
4736: NOT
4737: IFFALSE 4751
// Say ( JMM , DX2a-JMM-1 ) ;
4739: LD_EXP 1
4743: PPUSH
4744: LD_STRING DX2a-JMM-1
4746: PPUSH
4747: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4751: LD_EXP 2
4755: PPUSH
4756: CALL_OW 310
4760: PUSH
4761: LD_VAR 0 1
4765: PUSH
4766: LD_INT 1
4768: ARRAY
4769: EQUAL
4770: IFFALSE 4784
// Say ( Bobby , DX2a-Bobby-1 ) ;
4772: LD_EXP 2
4776: PPUSH
4777: LD_STRING DX2a-Bobby-1
4779: PPUSH
4780: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4784: LD_EXP 3
4788: PPUSH
4789: CALL_OW 310
4793: PUSH
4794: LD_VAR 0 1
4798: PUSH
4799: LD_INT 1
4801: ARRAY
4802: EQUAL
4803: IFFALSE 4817
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4805: LD_EXP 3
4809: PPUSH
4810: LD_STRING DX2a-Cyrus-1
4812: PPUSH
4813: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4817: LD_EXP 4
4821: PPUSH
4822: CALL_OW 310
4826: PUSH
4827: LD_VAR 0 1
4831: PUSH
4832: LD_INT 1
4834: ARRAY
4835: EQUAL
4836: IFFALSE 4850
// Say ( Lisa , DX2a-Lisa-1 ) ;
4838: LD_EXP 4
4842: PPUSH
4843: LD_STRING DX2a-Lisa-1
4845: PPUSH
4846: CALL_OW 88
// for i in temp1 do
4850: LD_ADDR_VAR 0 4
4854: PUSH
4855: LD_VAR 0 2
4859: PUSH
4860: FOR_IN
4861: IFFALSE 4898
// if IsInUnit ( i ) = tmp [ 1 ] then
4863: LD_VAR 0 4
4867: PPUSH
4868: CALL_OW 310
4872: PUSH
4873: LD_VAR 0 1
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: EQUAL
4882: IFFALSE 4896
// Say ( i , DX2a-Sol1-1 ) ;
4884: LD_VAR 0 4
4888: PPUSH
4889: LD_STRING DX2a-Sol1-1
4891: PPUSH
4892: CALL_OW 88
4896: GO 4860
4898: POP
4899: POP
// for i in temp2 do
4900: LD_ADDR_VAR 0 4
4904: PUSH
4905: LD_VAR 0 3
4909: PUSH
4910: FOR_IN
4911: IFFALSE 4948
// if IsInUnit ( i ) = tmp [ 1 ] then
4913: LD_VAR 0 4
4917: PPUSH
4918: CALL_OW 310
4922: PUSH
4923: LD_VAR 0 1
4927: PUSH
4928: LD_INT 1
4930: ARRAY
4931: EQUAL
4932: IFFALSE 4946
// Say ( i , DX2a-FSol1-1 ) ;
4934: LD_VAR 0 4
4938: PPUSH
4939: LD_STRING DX2a-FSol1-1
4941: PPUSH
4942: CALL_OW 88
4946: GO 4910
4948: POP
4949: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4950: LD_EXP 1
4954: PPUSH
4955: CALL_OW 310
4959: PUSH
4960: LD_VAR 0 1
4964: PUSH
4965: LD_INT 1
4967: ARRAY
4968: EQUAL
4969: IFFALSE 4983
// Say ( JMM , DX2b-JMM-1 ) ;
4971: LD_EXP 1
4975: PPUSH
4976: LD_STRING DX2b-JMM-1
4978: PPUSH
4979: CALL_OW 88
// if not IsInUnit ( JMM ) then
4983: LD_EXP 1
4987: PPUSH
4988: CALL_OW 310
4992: NOT
4993: IFFALSE 5007
// Say ( JMM , DX2a-JMM-2 ) ;
4995: LD_EXP 1
4999: PPUSH
5000: LD_STRING DX2a-JMM-2
5002: PPUSH
5003: CALL_OW 88
// DialogueOff ;
5007: CALL_OW 7
// end ;
5011: PPOPN 4
5013: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
5014: LD_INT 1
5016: PPUSH
5017: CALL_OW 255
5021: PUSH
5022: LD_INT 1
5024: EQUAL
5025: PUSH
5026: LD_INT 10
5028: PPUSH
5029: CALL_OW 255
5033: PUSH
5034: LD_INT 1
5036: EQUAL
5037: OR
5038: IFFALSE 5098
5040: GO 5042
5042: DISABLE
// begin DialogueOn ;
5043: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
5047: LD_EXP 1
5051: PPUSH
5052: LD_STRING D3-JMM-1
5054: PPUSH
5055: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
5059: LD_EXP 9
5063: PPUSH
5064: LD_STRING D3-Pow-1
5066: PPUSH
5067: CALL_OW 94
// if IsOK ( Cyrus ) then
5071: LD_EXP 3
5075: PPUSH
5076: CALL_OW 302
5080: IFFALSE 5094
// Say ( Cyrus , D3-Cyrus-1 ) ;
5082: LD_EXP 3
5086: PPUSH
5087: LD_STRING D3-Cyrus-1
5089: PPUSH
5090: CALL_OW 88
// DialogueOff ;
5094: CALL_OW 7
// end ;
5098: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var temp , i ;
5099: LD_INT 1
5101: PPUSH
5102: CALL_OW 255
5106: PUSH
5107: LD_INT 1
5109: EQUAL
5110: PUSH
5111: LD_INT 10
5113: PPUSH
5114: CALL_OW 255
5118: PUSH
5119: LD_INT 1
5121: EQUAL
5122: AND
5123: PUSH
5124: LD_INT 22
5126: PPUSH
5127: LD_INT 22
5129: PUSH
5130: LD_INT 3
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 21
5139: PUSH
5140: LD_INT 1
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PPUSH
5151: CALL_OW 70
5155: PUSH
5156: LD_INT 0
5158: EQUAL
5159: AND
5160: IFFALSE 6405
5162: GO 5164
5164: DISABLE
5165: LD_INT 0
5167: PPUSH
5168: PPUSH
// begin DialogueOn ;
5169: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5173: LD_EXP 1
5177: PPUSH
5178: LD_STRING D3a-JMM-1
5180: PPUSH
5181: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5185: LD_EXP 9
5189: PPUSH
5190: LD_STRING D3a-Pow-1
5192: PPUSH
5193: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5197: LD_EXP 1
5201: PPUSH
5202: LD_STRING D3a-JMM-2
5204: PPUSH
5205: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5209: LD_EXP 9
5213: PPUSH
5214: LD_STRING D3a-Pow-2
5216: PPUSH
5217: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5221: LD_EXP 1
5225: PPUSH
5226: LD_STRING D3a-JMM-3
5228: PPUSH
5229: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5233: LD_EXP 9
5237: PPUSH
5238: LD_STRING D3a-Pow-3
5240: PPUSH
5241: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5245: LD_EXP 1
5249: PPUSH
5250: LD_STRING D3a-JMM-4
5252: PPUSH
5253: CALL_OW 88
// DialogueOff ;
5257: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5261: LD_STRING M2
5263: PPUSH
5264: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5268: LD_EXP 1
5272: PPUSH
5273: LD_STRING D3b-JMM-1
5275: PPUSH
5276: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5280: LD_INT 35
5282: PPUSH
5283: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5287: LD_INT 22
5289: PPUSH
5290: LD_INT 22
5292: PUSH
5293: LD_INT 1
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PUSH
5300: LD_INT 25
5302: PUSH
5303: LD_INT 2
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PPUSH
5314: CALL_OW 70
5318: IFFALSE 5280
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5320: LD_ADDR_VAR 0 1
5324: PUSH
5325: LD_INT 22
5327: PUSH
5328: LD_INT 1
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: LD_INT 23
5337: PUSH
5338: LD_INT 1
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PUSH
5345: LD_INT 25
5347: PUSH
5348: LD_INT 2
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: PUSH
5355: LD_INT 50
5357: PUSH
5358: EMPTY
5359: LIST
5360: PUSH
5361: LD_INT 56
5363: PUSH
5364: EMPTY
5365: LIST
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: PPUSH
5374: CALL_OW 69
5378: PUSH
5379: LD_EXP 1
5383: PUSH
5384: LD_EXP 5
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: DIFF
5393: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5394: LD_INT 35
5396: PPUSH
5397: CALL_OW 67
// until temp > 0 ;
5401: LD_VAR 0 1
5405: PUSH
5406: LD_INT 0
5408: GREATER
5409: IFFALSE 5320
// wait ( 0 0$5 ) ;
5411: LD_INT 175
5413: PPUSH
5414: CALL_OW 67
// PrepareRussianHeroes ;
5418: CALL 11805 0 0
// InGameOn ;
5422: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5426: LD_EXP 8
5430: PPUSH
5431: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5435: LD_EXP 1
5439: PUSH
5440: LD_VAR 0 1
5444: PUSH
5445: LD_INT 1
5447: ARRAY
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PPUSH
5453: LD_EXP 8
5457: PPUSH
5458: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5462: LD_EXP 8
5466: PPUSH
5467: LD_VAR 0 1
5471: PUSH
5472: LD_INT 1
5474: ARRAY
5475: PPUSH
5476: CALL_OW 119
// Wait ( 0 0$02 ) ;
5480: LD_INT 70
5482: PPUSH
5483: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5487: LD_EXP 8
5491: PPUSH
5492: LD_STRING D4-Mikh-1
5494: PPUSH
5495: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5499: LD_VAR 0 1
5503: PUSH
5504: LD_INT 1
5506: ARRAY
5507: PPUSH
5508: CALL_OW 258
5512: PUSH
5513: LD_INT 1
5515: EQUAL
5516: IFFALSE 5534
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5518: LD_VAR 0 1
5522: PUSH
5523: LD_INT 1
5525: ARRAY
5526: PPUSH
5527: LD_STRING D4-Sol1-1
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 2
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-FSol1-1
5564: PPUSH
5565: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5569: LD_EXP 8
5573: PPUSH
5574: LD_STRING D4-Mikh-2
5576: PPUSH
5577: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5581: LD_VAR 0 1
5585: PUSH
5586: LD_INT 1
5588: ARRAY
5589: PPUSH
5590: CALL_OW 258
5594: PUSH
5595: LD_INT 1
5597: EQUAL
5598: IFFALSE 5616
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5600: LD_VAR 0 1
5604: PUSH
5605: LD_INT 1
5607: ARRAY
5608: PPUSH
5609: LD_STRING D4-Sol1-2
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 2
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-FSol1-2
5646: PPUSH
5647: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5651: LD_EXP 8
5655: PPUSH
5656: LD_STRING D4-Mikh-3
5658: PPUSH
5659: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5663: LD_VAR 0 1
5667: PUSH
5668: LD_INT 1
5670: ARRAY
5671: PPUSH
5672: CALL_OW 258
5676: PUSH
5677: LD_INT 1
5679: EQUAL
5680: IFFALSE 5698
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5682: LD_VAR 0 1
5686: PUSH
5687: LD_INT 1
5689: ARRAY
5690: PPUSH
5691: LD_STRING D4-Sol1-3
5693: PPUSH
5694: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5698: LD_VAR 0 1
5702: PUSH
5703: LD_INT 1
5705: ARRAY
5706: PPUSH
5707: CALL_OW 258
5711: PUSH
5712: LD_INT 2
5714: EQUAL
5715: IFFALSE 5733
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5717: LD_VAR 0 1
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PPUSH
5726: LD_STRING D4-FSol1-3
5728: PPUSH
5729: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5733: LD_EXP 8
5737: PPUSH
5738: LD_STRING D4-Mikh-4
5740: PPUSH
5741: CALL_OW 88
// case query ( Qs1 ) of 1 :
5745: LD_STRING Qs1
5747: PPUSH
5748: CALL_OW 97
5752: PUSH
5753: LD_INT 1
5755: DOUBLE
5756: EQUAL
5757: IFTRUE 5761
5759: GO 5796
5761: POP
// begin InGameOff ;
5762: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5766: LD_INT 1
5768: PPUSH
5769: LD_INT 6
5771: PPUSH
5772: LD_INT 2
5774: PPUSH
5775: LD_INT 1
5777: PPUSH
5778: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5782: LD_EXP 8
5786: PPUSH
5787: LD_INT 17
5789: PPUSH
5790: CALL_OW 113
// end ; 2 :
5794: GO 6389
5796: LD_INT 2
5798: DOUBLE
5799: EQUAL
5800: IFTRUE 5804
5802: GO 6354
5804: POP
// begin repeat wait ( 0 0$1 ) ;
5805: LD_INT 35
5807: PPUSH
5808: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5812: LD_VAR 0 1
5816: PUSH
5817: LD_INT 1
5819: ARRAY
5820: PPUSH
5821: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5825: LD_VAR 0 1
5829: PUSH
5830: LD_INT 1
5832: ARRAY
5833: PPUSH
5834: LD_EXP 1
5838: PPUSH
5839: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5843: LD_EXP 8
5847: PPUSH
5848: LD_EXP 1
5852: PPUSH
5853: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5857: LD_EXP 1
5861: PPUSH
5862: LD_EXP 8
5866: PPUSH
5867: CALL_OW 296
5871: PUSH
5872: LD_INT 5
5874: LESS
5875: IFFALSE 5805
// ComTurnUnit ( Mikhail , JMM ) ;
5877: LD_EXP 8
5881: PPUSH
5882: LD_EXP 1
5886: PPUSH
5887: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5891: LD_EXP 1
5895: PPUSH
5896: LD_STRING D4b-JMM-1
5898: PPUSH
5899: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5903: LD_EXP 8
5907: PPUSH
5908: LD_STRING D4b-Mikh-1
5910: PPUSH
5911: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5915: LD_EXP 1
5919: PPUSH
5920: LD_STRING D4b-JMM-2
5922: PPUSH
5923: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5927: LD_EXP 8
5931: PPUSH
5932: LD_STRING D4b-Mikh-2
5934: PPUSH
5935: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5939: LD_EXP 1
5943: PPUSH
5944: LD_STRING D4b-JMM-3
5946: PPUSH
5947: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5951: LD_EXP 8
5955: PPUSH
5956: LD_STRING D4b-Mikh-3
5958: PPUSH
5959: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5963: LD_EXP 1
5967: PPUSH
5968: LD_STRING D4b-JMM-4
5970: PPUSH
5971: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5975: LD_EXP 8
5979: PPUSH
5980: LD_STRING D4b-Mikh-4
5982: PPUSH
5983: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5987: LD_EXP 1
5991: PPUSH
5992: LD_STRING D4b-JMM-5
5994: PPUSH
5995: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5999: LD_EXP 8
6003: PPUSH
6004: LD_STRING D4b-Mikh-5
6006: PPUSH
6007: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
6011: LD_EXP 1
6015: PPUSH
6016: LD_STRING D4b-JMM-6
6018: PPUSH
6019: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
6023: LD_EXP 8
6027: PPUSH
6028: LD_STRING D4b-Mikh-6
6030: PPUSH
6031: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
6035: LD_EXP 1
6039: PPUSH
6040: LD_STRING D4b-JMM-7
6042: PPUSH
6043: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6047: LD_EXP 8
6051: PPUSH
6052: LD_STRING D4b-Mikh-7
6054: PPUSH
6055: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6059: LD_VAR 0 1
6063: PUSH
6064: LD_INT 1
6066: ARRAY
6067: PPUSH
6068: CALL_OW 258
6072: PUSH
6073: LD_INT 1
6075: EQUAL
6076: IFFALSE 6094
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6078: LD_VAR 0 1
6082: PUSH
6083: LD_INT 1
6085: ARRAY
6086: PPUSH
6087: LD_STRING D4b-Sol1-7
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 2
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-FSol1-7
6124: PPUSH
6125: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6129: LD_EXP 1
6133: PPUSH
6134: LD_STRING D4b-JMM-8
6136: PPUSH
6137: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6141: LD_VAR 0 1
6145: PUSH
6146: LD_INT 1
6148: ARRAY
6149: PPUSH
6150: CALL_OW 258
6154: PUSH
6155: LD_INT 1
6157: EQUAL
6158: IFFALSE 6176
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6160: LD_VAR 0 1
6164: PUSH
6165: LD_INT 1
6167: ARRAY
6168: PPUSH
6169: LD_STRING D4b-Sol1-8
6171: PPUSH
6172: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6176: LD_VAR 0 1
6180: PUSH
6181: LD_INT 1
6183: ARRAY
6184: PPUSH
6185: CALL_OW 258
6189: PUSH
6190: LD_INT 2
6192: EQUAL
6193: IFFALSE 6211
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6195: LD_VAR 0 1
6199: PUSH
6200: LD_INT 1
6202: ARRAY
6203: PPUSH
6204: LD_STRING D4b-FSol1-8
6206: PPUSH
6207: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6211: LD_EXP 1
6215: PPUSH
6216: LD_STRING D4b-JMM-9
6218: PPUSH
6219: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6223: LD_EXP 8
6227: PPUSH
6228: LD_INT 1
6230: PPUSH
6231: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6235: LD_ADDR_VAR 0 2
6239: PUSH
6240: LD_INT 22
6242: PUSH
6243: LD_INT 1
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: PPUSH
6253: CALL_OW 69
6257: PUSH
6258: FOR_IN
6259: IFFALSE 6272
// ComFree ( i ) ;
6261: LD_VAR 0 2
6265: PPUSH
6266: CALL_OW 139
6270: GO 6258
6272: POP
6273: POP
// repeat wait ( 0 0$1 ) ;
6274: LD_INT 35
6276: PPUSH
6277: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6281: LD_EXP 8
6285: PPUSH
6286: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6290: LD_EXP 8
6294: PUSH
6295: LD_VAR 0 1
6299: PUSH
6300: LD_INT 1
6302: ARRAY
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6315: LD_EXP 8
6319: PPUSH
6320: CALL_OW 310
6324: IFFALSE 6274
// mikhailDepot = IsInUnit ( Mikhail ) ;
6326: LD_ADDR_EXP 23
6330: PUSH
6331: LD_EXP 8
6335: PPUSH
6336: CALL_OW 310
6340: ST_TO_ADDR
// InGameOff ;
6341: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6345: LD_STRING M3
6347: PPUSH
6348: CALL_OW 337
// end ; 3 :
6352: GO 6389
6354: LD_INT 3
6356: DOUBLE
6357: EQUAL
6358: IFTRUE 6362
6360: GO 6388
6362: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6363: LD_EXP 8
6367: PPUSH
6368: LD_INT 17
6370: PPUSH
6371: CALL_OW 113
// wait ( 0 0$3 ) ;
6375: LD_INT 105
6377: PPUSH
6378: CALL_OW 67
// InGameOff ;
6382: CALL_OW 9
// end ; end ;
6386: GO 6389
6388: POP
// PrepareTigers ;
6389: CALL 14443 0 0
// RussianTrap ;
6393: CALL 10201 0 0
// tigersRespawn = 1 ;
6397: LD_ADDR_EXP 30
6401: PUSH
6402: LD_INT 1
6404: ST_TO_ADDR
// end ;
6405: PPOPN 2
6407: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6408: LD_INT 1
6410: PPUSH
6411: CALL_OW 255
6415: PUSH
6416: LD_INT 1
6418: EQUAL
6419: PUSH
6420: LD_INT 10
6422: PPUSH
6423: CALL_OW 255
6427: PUSH
6428: LD_INT 1
6430: EQUAL
6431: AND
6432: PUSH
6433: LD_INT 1
6435: PPUSH
6436: CALL_OW 274
6440: PPUSH
6441: LD_INT 1
6443: PPUSH
6444: CALL_OW 275
6448: PUSH
6449: LD_INT 100
6451: GREATEREQUAL
6452: AND
6453: IFFALSE 6616
6455: GO 6457
6457: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6458: LD_INT 2100
6460: PPUSH
6461: LD_INT 4200
6463: PPUSH
6464: CALL_OW 12
6468: PUSH
6469: LD_INT 1050
6471: PLUS
6472: PPUSH
6473: CALL_OW 67
// PrepareCargoBays ;
6477: CALL 12926 0 0
// cargoRespawn = 1 ;
6481: LD_ADDR_EXP 28
6485: PUSH
6486: LD_INT 1
6488: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6489: LD_EXP 15
6493: PUSH
6494: LD_EXP 16
6498: PUSH
6499: LD_EXP 17
6503: PUSH
6504: LD_EXP 18
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: PPUSH
6515: LD_INT 36
6517: PPUSH
6518: LD_INT 13
6520: PPUSH
6521: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6525: LD_EXP 15
6529: PUSH
6530: LD_EXP 16
6534: PUSH
6535: LD_EXP 17
6539: PUSH
6540: LD_EXP 18
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: PPUSH
6551: LD_INT 40
6553: PPUSH
6554: LD_INT 20
6556: PPUSH
6557: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6561: LD_EXP 15
6565: PUSH
6566: LD_EXP 16
6570: PUSH
6571: LD_EXP 17
6575: PUSH
6576: LD_EXP 18
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: PPUSH
6587: LD_INT 53
6589: PPUSH
6590: LD_INT 16
6592: PPUSH
6593: CALL_OW 171
// wait ( 0 0$5 ) ;
6597: LD_INT 175
6599: PPUSH
6600: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6604: LD_EXP 17
6608: PPUSH
6609: LD_STRING D5-Rus2-1
6611: PPUSH
6612: CALL_OW 88
// end ;
6616: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6617: LD_EXP 28
6621: PUSH
6622: LD_INT 1
6624: EQUAL
6625: IFFALSE 6857
6627: GO 6629
6629: DISABLE
6630: LD_INT 0
6632: PPUSH
6633: PPUSH
6634: PPUSH
6635: PPUSH
// begin enable ;
6636: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6637: LD_ADDR_VAR 0 3
6641: PUSH
6642: LD_INT 22
6644: PUSH
6645: LD_INT 3
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 21
6654: PUSH
6655: LD_INT 2
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: LD_INT 34
6664: PUSH
6665: LD_INT 51
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 69
6681: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_nation , 1 ] , [ f_btype , b_depot ] ] ] ) ;
6682: LD_ADDR_VAR 0 4
6686: PUSH
6687: LD_INT 22
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 2
6699: PUSH
6700: LD_INT 23
6702: PUSH
6703: LD_INT 1
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 30
6712: PUSH
6713: LD_INT 0
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PPUSH
6729: CALL_OW 69
6733: ST_TO_ADDR
// for i in tmp1 do
6734: LD_ADDR_VAR 0 1
6738: PUSH
6739: LD_VAR 0 3
6743: PUSH
6744: FOR_IN
6745: IFFALSE 6855
// begin for j in tmp2 do
6747: LD_ADDR_VAR 0 2
6751: PUSH
6752: LD_VAR 0 4
6756: PUSH
6757: FOR_IN
6758: IFFALSE 6851
// begin if GetDistUnits ( i , j ) < 7 then
6760: LD_VAR 0 1
6764: PPUSH
6765: LD_VAR 0 2
6769: PPUSH
6770: CALL_OW 296
6774: PUSH
6775: LD_INT 7
6777: LESS
6778: IFFALSE 6849
// begin disable ;
6780: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6781: LD_EXP 15
6785: PUSH
6786: LD_EXP 16
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PPUSH
6795: LD_INT 7
6797: PPUSH
6798: LD_INT 9
6800: PPUSH
6801: CALL_OW 111
// if cargoSee = 0 then
6805: LD_EXP 29
6809: PUSH
6810: LD_INT 0
6812: EQUAL
6813: IFFALSE 6849
// begin cargoSee = 1 ;
6815: LD_ADDR_EXP 29
6819: PUSH
6820: LD_INT 1
6822: ST_TO_ADDR
// cargoEscape = 1 ;
6823: LD_ADDR_EXP 20
6827: PUSH
6828: LD_INT 1
6830: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6831: LD_EXP 17
6835: PPUSH
6836: LD_STRING D5-Rus2-1a
6838: PPUSH
6839: CALL_OW 88
// exit ;
6843: POP
6844: POP
6845: POP
6846: POP
6847: GO 6857
// end ; end ; end ;
6849: GO 6757
6851: POP
6852: POP
// end ;
6853: GO 6744
6855: POP
6856: POP
// end ;
6857: PPOPN 4
6859: END
// every 0 0$1 trigger cargoEscape > 0 do
6860: LD_EXP 20
6864: PUSH
6865: LD_INT 0
6867: GREATER
6868: IFFALSE 7015
6870: GO 6872
6872: DISABLE
// begin enable ;
6873: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6874: LD_EXP 15
6878: PUSH
6879: LD_EXP 16
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PPUSH
6888: LD_INT 13
6890: PPUSH
6891: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6895: LD_EXP 15
6899: PPUSH
6900: LD_INT 13
6902: PPUSH
6903: CALL_OW 308
6907: PUSH
6908: LD_EXP 17
6912: PPUSH
6913: LD_INT 13
6915: PPUSH
6916: CALL_OW 308
6920: OR
6921: IFFALSE 6955
// begin RemoveUnit ( cargo1 ) ;
6923: LD_EXP 15
6927: PPUSH
6928: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6932: LD_EXP 17
6936: PPUSH
6937: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6941: LD_ADDR_EXP 20
6945: PUSH
6946: LD_EXP 20
6950: PUSH
6951: LD_INT 1
6953: PLUS
6954: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6955: LD_EXP 16
6959: PPUSH
6960: LD_INT 13
6962: PPUSH
6963: CALL_OW 308
6967: PUSH
6968: LD_EXP 18
6972: PPUSH
6973: LD_INT 13
6975: PPUSH
6976: CALL_OW 308
6980: OR
6981: IFFALSE 7015
// begin RemoveUnit ( cargo2 ) ;
6983: LD_EXP 16
6987: PPUSH
6988: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6992: LD_EXP 18
6996: PPUSH
6997: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
7001: LD_ADDR_EXP 20
7005: PUSH
7006: LD_EXP 20
7010: PUSH
7011: LD_INT 1
7013: PLUS
7014: ST_TO_ADDR
// end ; end ;
7015: END
// every 0 0$1 trigger cargoEscape > 1 do
7016: LD_EXP 20
7020: PUSH
7021: LD_INT 1
7023: GREATER
7024: IFFALSE 7188
7026: GO 7028
7028: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
7029: LD_INT 4
7031: PPUSH
7032: LD_INT 1
7034: PPUSH
7035: LD_INT 1
7037: PPUSH
7038: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7042: LD_INT 31
7044: PPUSH
7045: LD_INT 1
7047: PPUSH
7048: LD_INT 1
7050: PPUSH
7051: CALL_OW 324
// if IsOK ( Jerry ) then
7055: LD_EXP 7
7059: PPUSH
7060: CALL_OW 302
7064: IFFALSE 7080
// begin Say ( Jerry , D5a-Sol1-1 ) ;
7066: LD_EXP 7
7070: PPUSH
7071: LD_STRING D5a-Sol1-1
7073: PPUSH
7074: CALL_OW 88
// end else
7078: GO 7176
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
7080: LD_INT 22
7082: PUSH
7083: LD_INT 1
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 23
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 26
7102: PUSH
7103: LD_INT 1
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: PPUSH
7115: CALL_OW 69
7119: PUSH
7120: LD_INT 2
7122: PPUSH
7123: LD_INT 22
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 23
7135: PUSH
7136: LD_INT 1
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PUSH
7143: LD_INT 26
7145: PUSH
7146: LD_INT 1
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: PPUSH
7158: CALL_OW 69
7162: PPUSH
7163: CALL_OW 12
7167: ARRAY
7168: PPUSH
7169: LD_STRING D5a-Sol1-1
7171: PPUSH
7172: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7176: LD_EXP 1
7180: PPUSH
7181: LD_STRING D5a-JMM-1
7183: PPUSH
7184: CALL_OW 88
// end ;
7188: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7189: LD_INT 1
7191: PPUSH
7192: CALL_OW 255
7196: PUSH
7197: LD_INT 3
7199: EQUAL
7200: PUSH
7201: LD_INT 1
7203: PPUSH
7204: CALL_OW 256
7208: PUSH
7209: LD_INT 1000
7211: LESS
7212: AND
7213: PUSH
7214: LD_INT 10
7216: PPUSH
7217: CALL_OW 255
7221: PUSH
7222: LD_INT 3
7224: EQUAL
7225: PUSH
7226: LD_INT 10
7228: PPUSH
7229: CALL_OW 256
7233: PUSH
7234: LD_INT 1000
7236: LESS
7237: AND
7238: OR
7239: IFFALSE 7256
7241: GO 7243
7243: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
7244: LD_EXP 1
7248: PPUSH
7249: LD_STRING D8-JMM-1
7251: PPUSH
7252: CALL_OW 88
// end ;
7256: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7257: LD_EXP 8
7261: PPUSH
7262: CALL_OW 310
7266: PUSH
7267: LD_INT 1
7269: EQUAL
7270: PUSH
7271: LD_EXP 22
7275: PUSH
7276: LD_INT 3
7278: EQUAL
7279: NOT
7280: AND
7281: IFFALSE 7303
7283: GO 7285
7285: DISABLE
// begin mikhailInBase = 1 ;
7286: LD_ADDR_EXP 22
7290: PUSH
7291: LD_INT 1
7293: ST_TO_ADDR
// mikhailStatus = 1 ;
7294: LD_ADDR_EXP 21
7298: PUSH
7299: LD_INT 1
7301: ST_TO_ADDR
// enable ;
7302: ENABLE
// end ;
7303: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
7304: LD_EXP 8
7308: PPUSH
7309: LD_INT 25
7311: PPUSH
7312: CALL_OW 308
7316: PUSH
7317: LD_EXP 22
7321: PUSH
7322: LD_INT 1
7324: EQUAL
7325: AND
7326: PUSH
7327: LD_EXP 8
7331: PPUSH
7332: CALL_OW 255
7336: PUSH
7337: LD_INT 1
7339: EQUAL
7340: AND
7341: IFFALSE 7671
7343: GO 7345
7345: DISABLE
// begin enable ;
7346: ENABLE
// case query ( QMikh2 ) of 1 :
7347: LD_STRING QMikh2
7349: PPUSH
7350: CALL_OW 97
7354: PUSH
7355: LD_INT 1
7357: DOUBLE
7358: EQUAL
7359: IFTRUE 7363
7361: GO 7430
7363: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7364: LD_INT 1
7366: PPUSH
7367: LD_INT 6
7369: PPUSH
7370: LD_INT 2
7372: PPUSH
7373: LD_INT 1
7375: PPUSH
7376: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7380: LD_EXP 8
7384: PPUSH
7385: LD_INT 6
7387: PPUSH
7388: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7392: LD_EXP 8
7396: PPUSH
7397: CALL_OW 122
// wait ( 0 0$1 ) ;
7401: LD_INT 35
7403: PPUSH
7404: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7408: LD_EXP 8
7412: PPUSH
7413: LD_INT 17
7415: PPUSH
7416: CALL_OW 113
// mikhailInbase = 0 ;
7420: LD_ADDR_EXP 22
7424: PUSH
7425: LD_INT 0
7427: ST_TO_ADDR
// end ; 2 :
7428: GO 7671
7430: LD_INT 2
7432: DOUBLE
7433: EQUAL
7434: IFTRUE 7438
7436: GO 7611
7438: POP
// begin mikhailInBase = 2 ;
7439: LD_ADDR_EXP 22
7443: PUSH
7444: LD_INT 2
7446: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7447: LD_EXP 8
7451: PPUSH
7452: LD_INT 6
7454: PPUSH
7455: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7459: LD_EXP 8
7463: PPUSH
7464: CALL_OW 122
// wait ( 0 0$1 ) ;
7468: LD_INT 35
7470: PPUSH
7471: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7475: LD_EXP 8
7479: PPUSH
7480: LD_EXP 8
7484: PPUSH
7485: CALL_OW 250
7489: PUSH
7490: LD_INT 2
7492: PLUS
7493: PPUSH
7494: LD_EXP 8
7498: PPUSH
7499: CALL_OW 251
7503: PUSH
7504: LD_INT 2
7506: PLUS
7507: PPUSH
7508: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7512: LD_EXP 8
7516: PPUSH
7517: LD_EXP 8
7521: PPUSH
7522: CALL_OW 250
7526: PUSH
7527: LD_INT 1
7529: PLUS
7530: PPUSH
7531: LD_EXP 8
7535: PPUSH
7536: CALL_OW 251
7540: PUSH
7541: LD_INT 2
7543: PLUS
7544: PPUSH
7545: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7549: LD_EXP 8
7553: PPUSH
7554: LD_EXP 8
7558: PPUSH
7559: CALL_OW 250
7563: PUSH
7564: LD_INT 2
7566: PLUS
7567: PPUSH
7568: LD_EXP 8
7572: PPUSH
7573: CALL_OW 251
7577: PPUSH
7578: CALL_OW 171
// wait ( 0 0$5 ) ;
7582: LD_INT 175
7584: PPUSH
7585: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7589: LD_EXP 8
7593: PPUSH
7594: LD_INT 25
7596: PPUSH
7597: CALL_OW 113
// mikhailInBase = 4 ;
7601: LD_ADDR_EXP 22
7605: PUSH
7606: LD_INT 4
7608: ST_TO_ADDR
// end ; 3 :
7609: GO 7671
7611: LD_INT 3
7613: DOUBLE
7614: EQUAL
7615: IFTRUE 7619
7617: GO 7670
7619: POP
// begin SetSide ( Mikhail , 6 ) ;
7620: LD_EXP 8
7624: PPUSH
7625: LD_INT 6
7627: PPUSH
7628: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7632: LD_EXP 8
7636: PPUSH
7637: CALL_OW 122
// wait ( 0 0$1 ) ;
7641: LD_INT 35
7643: PPUSH
7644: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7648: LD_EXP 8
7652: PPUSH
7653: LD_INT 17
7655: PPUSH
7656: CALL_OW 113
// mikhailInbase = 3 ;
7660: LD_ADDR_EXP 22
7664: PUSH
7665: LD_INT 3
7667: ST_TO_ADDR
// end ; end ;
7668: GO 7671
7670: POP
// end ;
7671: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7672: LD_EXP 8
7676: PPUSH
7677: LD_INT 25
7679: PPUSH
7680: CALL_OW 308
7684: PUSH
7685: LD_EXP 22
7689: PUSH
7690: LD_INT 4
7692: EQUAL
7693: AND
7694: IFFALSE 7778
7696: GO 7698
7698: DISABLE
// begin enable ;
7699: ENABLE
// InGameOn ;
7700: CALL_OW 8
// SetSide ( Mikhail , 1 ) ;
7704: LD_EXP 8
7708: PPUSH
7709: LD_INT 1
7711: PPUSH
7712: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7716: LD_INT 35
7718: PPUSH
7719: CALL_OW 67
// if Carry ( Mikhail ) then
7723: LD_EXP 8
7727: PPUSH
7728: CALL_OW 281
7732: IFFALSE 7743
// ComUnload ( Mikhail ) ;
7734: LD_EXP 8
7738: PPUSH
7739: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7743: LD_EXP 8
7747: PPUSH
7748: LD_INT 1
7750: PPUSH
7751: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7755: LD_EXP 8
7759: PPUSH
7760: CALL_OW 310
7764: IFFALSE 7716
// InGameOff ;
7766: CALL_OW 9
// mikhailInBase = 1 ;
7770: LD_ADDR_EXP 22
7774: PUSH
7775: LD_INT 1
7777: ST_TO_ADDR
// end ;
7778: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7779: LD_EXP 8
7783: PPUSH
7784: CALL_OW 310
7788: PUSH
7789: LD_EXP 22
7793: PUSH
7794: LD_INT 3
7796: EQUAL
7797: NOT
7798: AND
7799: IFFALSE 7925
7801: GO 7803
7803: DISABLE
// begin enable ;
7804: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7805: LD_INT 22
7807: PUSH
7808: LD_INT 1
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: LD_INT 21
7817: PUSH
7818: LD_INT 1
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PUSH
7825: LD_INT 91
7827: PUSH
7828: LD_EXP 8
7832: PPUSH
7833: CALL_OW 310
7837: PUSH
7838: LD_INT 10
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: LIST
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: PUSH
7856: LD_INT 1
7858: EQUAL
7859: IFFALSE 7925
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7861: LD_INT 1
7863: PPUSH
7864: LD_INT 6
7866: PPUSH
7867: LD_INT 2
7869: PPUSH
7870: LD_INT 1
7872: PPUSH
7873: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7877: LD_EXP 8
7881: PPUSH
7882: LD_INT 6
7884: PPUSH
7885: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7889: LD_EXP 8
7893: PPUSH
7894: CALL_OW 122
// wait ( 0 0$1 ) ;
7898: LD_INT 35
7900: PPUSH
7901: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7905: LD_EXP 8
7909: PPUSH
7910: LD_INT 17
7912: PPUSH
7913: CALL_OW 113
// mikhailStatus = 3 ;
7917: LD_ADDR_EXP 21
7921: PUSH
7922: LD_INT 3
7924: ST_TO_ADDR
// end ; end ;
7925: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7926: LD_EXP 1
7930: PPUSH
7931: LD_EXP 23
7935: PPUSH
7936: CALL_OW 296
7940: PUSH
7941: LD_INT 5
7943: LESS
7944: PUSH
7945: LD_EXP 21
7949: PUSH
7950: LD_INT 3
7952: EQUAL
7953: AND
7954: PUSH
7955: LD_EXP 22
7959: PUSH
7960: LD_INT 3
7962: EQUAL
7963: NOT
7964: AND
7965: IFFALSE 8187
7967: GO 7969
7969: DISABLE
7970: LD_INT 0
7972: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7973: LD_ADDR_VAR 0 1
7977: PUSH
7978: LD_INT 22
7980: PUSH
7981: LD_INT 1
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 21
7990: PUSH
7991: LD_INT 1
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PUSH
7998: LD_INT 26
8000: PUSH
8001: LD_INT 1
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: LIST
8012: PPUSH
8013: CALL_OW 69
8017: PUSH
8018: LD_EXP 1
8022: PUSH
8023: LD_EXP 5
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: DIFF
8032: ST_TO_ADDR
// DialogueOn ;
8033: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8037: LD_EXP 1
8041: PPUSH
8042: LD_STRING D7-JMM-1
8044: PPUSH
8045: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8049: LD_VAR 0 1
8053: PUSH
8054: LD_INT 1
8056: ARRAY
8057: PPUSH
8058: LD_STRING D7-Sol1-1
8060: PPUSH
8061: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8065: LD_EXP 1
8069: PPUSH
8070: LD_STRING D7-JMM-2
8072: PPUSH
8073: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8077: LD_VAR 0 1
8081: PUSH
8082: LD_INT 1
8084: ARRAY
8085: PPUSH
8086: LD_STRING D7-Sol1-2
8088: PPUSH
8089: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8093: LD_EXP 1
8097: PPUSH
8098: LD_STRING D7-JMM-3
8100: PPUSH
8101: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8105: LD_VAR 0 1
8109: PUSH
8110: LD_INT 1
8112: ARRAY
8113: PPUSH
8114: LD_STRING D7-Sol1-3
8116: PPUSH
8117: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8121: LD_EXP 3
8125: PPUSH
8126: CALL_OW 302
8130: PUSH
8131: LD_EXP 4
8135: PPUSH
8136: CALL_OW 302
8140: AND
8141: IFFALSE 8183
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8143: LD_EXP 3
8147: PPUSH
8148: LD_STRING D7-Cyrus-3
8150: PPUSH
8151: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8155: LD_VAR 0 1
8159: PUSH
8160: LD_INT 1
8162: ARRAY
8163: PPUSH
8164: LD_STRING D7-Sol1-4
8166: PPUSH
8167: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8171: LD_EXP 4
8175: PPUSH
8176: LD_STRING D7-Lisa-4
8178: PPUSH
8179: CALL_OW 88
// end ; DialogueOff ;
8183: CALL_OW 7
// end ;
8187: PPOPN 1
8189: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8190: LD_EXP 8
8194: PPUSH
8195: CALL_OW 303
8199: PUSH
8200: LD_EXP 21
8204: PUSH
8205: LD_INT 3
8207: EQUAL
8208: AND
8209: IFFALSE 8223
8211: GO 8213
8213: DISABLE
// begin enable ;
8214: ENABLE
// mikhailStatus = 2 ;
8215: LD_ADDR_EXP 21
8219: PUSH
8220: LD_INT 2
8222: ST_TO_ADDR
// end ;
8223: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8224: LD_EXP 8
8228: PPUSH
8229: LD_INT 17
8231: PPUSH
8232: CALL_OW 308
8236: PUSH
8237: LD_EXP 8
8241: PPUSH
8242: CALL_OW 255
8246: PUSH
8247: LD_INT 6
8249: EQUAL
8250: AND
8251: IFFALSE 8284
8253: GO 8255
8255: DISABLE
// begin if not mikhailInBase = 3 then
8256: LD_EXP 22
8260: PUSH
8261: LD_INT 3
8263: EQUAL
8264: NOT
8265: IFFALSE 8275
// mikhailStatus = 3 ;
8267: LD_ADDR_EXP 21
8271: PUSH
8272: LD_INT 3
8274: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8275: LD_EXP 8
8279: PPUSH
8280: CALL_OW 64
// end ;
8284: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8285: LD_EXP 21
8289: PUSH
8290: LD_INT 3
8292: EQUAL
8293: PUSH
8294: LD_EXP 8
8298: PPUSH
8299: CALL_OW 255
8303: PUSH
8304: LD_INT 6
8306: EQUAL
8307: AND
8308: IFFALSE 8474
8310: GO 8312
8312: DISABLE
8313: LD_INT 0
8315: PPUSH
8316: PPUSH
// begin enable ;
8317: ENABLE
// if IsOk ( Mikhail ) then
8318: LD_EXP 8
8322: PPUSH
8323: CALL_OW 302
8327: IFFALSE 8474
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8329: LD_ADDR_VAR 0 2
8333: PUSH
8334: LD_EXP 8
8338: PPUSH
8339: LD_INT 22
8341: PUSH
8342: LD_INT 1
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 21
8351: PUSH
8352: LD_INT 1
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PPUSH
8363: CALL_OW 69
8367: PPUSH
8368: CALL 10393 0 2
8372: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8373: LD_VAR 0 2
8377: PPUSH
8378: LD_EXP 8
8382: PPUSH
8383: CALL_OW 296
8387: PUSH
8388: LD_INT 8
8390: LESS
8391: IFFALSE 8474
// begin if GetSex ( attacker ) = sex_male then
8393: LD_VAR 0 2
8397: PPUSH
8398: CALL_OW 258
8402: PUSH
8403: LD_INT 1
8405: EQUAL
8406: IFFALSE 8442
// begin disable ;
8408: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8409: LD_VAR 0 2
8413: PPUSH
8414: LD_STRING D7a-Sol1-1
8416: PPUSH
8417: CALL_OW 88
// wait ( 0 0$2 ) ;
8421: LD_INT 70
8423: PPUSH
8424: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8428: LD_VAR 0 2
8432: PPUSH
8433: LD_STRING D7a-Sol1-1a
8435: PPUSH
8436: CALL_OW 88
// end else
8440: GO 8474
// begin disable ;
8442: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8443: LD_VAR 0 2
8447: PPUSH
8448: LD_STRING D7a-FSol1-1
8450: PPUSH
8451: CALL_OW 88
// wait ( 0 0$2 ) ;
8455: LD_INT 70
8457: PPUSH
8458: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8462: LD_VAR 0 2
8466: PPUSH
8467: LD_STRING D7a-FSol1-1a
8469: PPUSH
8470: CALL_OW 88
// end ; end ; end ; end ;
8474: PPOPN 2
8476: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8477: LD_EXP 27
8481: PUSH
8482: LD_INT 1
8484: EQUAL
8485: PUSH
8486: LD_INT 22
8488: PPUSH
8489: LD_INT 22
8491: PUSH
8492: LD_INT 3
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PUSH
8499: LD_INT 21
8501: PUSH
8502: LD_INT 1
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PPUSH
8513: CALL_OW 70
8517: PUSH
8518: LD_INT 2
8520: GREATER
8521: AND
8522: PUSH
8523: LD_INT 22
8525: PPUSH
8526: LD_INT 22
8528: PUSH
8529: LD_INT 1
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: PUSH
8536: LD_INT 2
8538: PUSH
8539: LD_INT 21
8541: PUSH
8542: LD_INT 1
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: PUSH
8549: LD_INT 59
8551: PUSH
8552: EMPTY
8553: LIST
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: LIST
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 70
8568: PUSH
8569: LD_INT 0
8571: EQUAL
8572: AND
8573: IFFALSE 8588
8575: GO 8577
8577: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8578: LD_INT 1
8580: PPUSH
8581: LD_INT 3
8583: PPUSH
8584: CALL_OW 235
// end ;
8588: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8589: LD_EXP 30
8593: PUSH
8594: LD_INT 1
8596: EQUAL
8597: PUSH
8598: LD_INT 22
8600: PUSH
8601: LD_INT 0
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PUSH
8608: LD_INT 25
8610: PUSH
8611: LD_INT 14
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PPUSH
8622: CALL_OW 69
8626: PUSH
8627: LD_INT 0
8629: EQUAL
8630: AND
8631: IFFALSE 8725
8633: GO 8635
8635: DISABLE
8636: LD_INT 0
8638: PPUSH
8639: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8640: LD_ADDR_VAR 0 2
8644: PUSH
8645: LD_INT 22
8647: PUSH
8648: LD_INT 1
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 21
8657: PUSH
8658: LD_INT 1
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: PUSH
8665: LD_INT 23
8667: PUSH
8668: LD_INT 1
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: LIST
8679: PPUSH
8680: CALL_OW 69
8684: ST_TO_ADDR
// for i in tmp do
8685: LD_ADDR_VAR 0 1
8689: PUSH
8690: LD_VAR 0 2
8694: PUSH
8695: FOR_IN
8696: IFFALSE 8723
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8698: LD_VAR 0 1
8702: PPUSH
8703: LD_INT 1
8705: PPUSH
8706: LD_INT 4
8708: PPUSH
8709: CALL_OW 12
8713: PPUSH
8714: LD_INT 300
8716: PPUSH
8717: CALL_OW 492
// end ;
8721: GO 8695
8723: POP
8724: POP
// end ; end_of_file
8725: PPOPN 2
8727: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8728: LD_INT 0
8730: PPUSH
8731: PPUSH
8732: PPUSH
8733: PPUSH
// for i = 1 to count do
8734: LD_ADDR_VAR 0 8
8738: PUSH
8739: DOUBLE
8740: LD_INT 1
8742: DEC
8743: ST_TO_ADDR
8744: LD_VAR 0 6
8748: PUSH
8749: FOR_TO
8750: IFFALSE 8831
// begin uc_side = side ;
8752: LD_ADDR_OWVAR 20
8756: PUSH
8757: LD_VAR 0 1
8761: ST_TO_ADDR
// uc_nation = nation ;
8762: LD_ADDR_OWVAR 21
8766: PUSH
8767: LD_VAR 0 2
8771: ST_TO_ADDR
// hc_gallery =  ;
8772: LD_ADDR_OWVAR 33
8776: PUSH
8777: LD_STRING 
8779: ST_TO_ADDR
// hc_name =  ;
8780: LD_ADDR_OWVAR 26
8784: PUSH
8785: LD_STRING 
8787: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8788: LD_INT 0
8790: PPUSH
8791: LD_VAR 0 5
8795: PPUSH
8796: LD_VAR 0 4
8800: PPUSH
8801: CALL_OW 380
// un = CreateHuman ;
8805: LD_ADDR_VAR 0 10
8809: PUSH
8810: CALL_OW 44
8814: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8815: LD_VAR 0 10
8819: PPUSH
8820: LD_VAR 0 3
8824: PPUSH
8825: CALL_OW 52
// end ;
8829: GO 8749
8831: POP
8832: POP
// end ;
8833: LD_VAR 0 7
8837: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8838: LD_INT 0
8840: PPUSH
8841: PPUSH
8842: PPUSH
// uc_side := GetSide ( b ) ;
8843: LD_ADDR_OWVAR 20
8847: PUSH
8848: LD_VAR 0 2
8852: PPUSH
8853: CALL_OW 255
8857: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8858: LD_ADDR_OWVAR 21
8862: PUSH
8863: LD_VAR 0 2
8867: PPUSH
8868: CALL_OW 248
8872: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8873: LD_INT 0
8875: PPUSH
8876: LD_INT 1
8878: PPUSH
8879: LD_VAR 0 1
8883: PPUSH
8884: CALL_OW 380
// un = CreateHuman ;
8888: LD_ADDR_VAR 0 4
8892: PUSH
8893: CALL_OW 44
8897: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8898: LD_ADDR_VAR 0 5
8902: PUSH
8903: LD_VAR 0 2
8907: PPUSH
8908: CALL_OW 254
8912: PUSH
8913: LD_INT 3
8915: MINUS
8916: ST_TO_ADDR
// if dir < 0 then
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 0
8924: LESS
8925: IFFALSE 8941
// dir := 6 + dir ;
8927: LD_ADDR_VAR 0 5
8931: PUSH
8932: LD_INT 6
8934: PUSH
8935: LD_VAR 0 5
8939: PLUS
8940: ST_TO_ADDR
// SetDir ( un , dir ) ;
8941: LD_VAR 0 4
8945: PPUSH
8946: LD_VAR 0 5
8950: PPUSH
8951: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8955: LD_VAR 0 4
8959: PPUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: CALL_OW 52
// end ;
8969: LD_VAR 0 3
8973: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8974: LD_INT 0
8976: PPUSH
8977: PPUSH
8978: PPUSH
8979: PPUSH
8980: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8981: LD_ADDR_VAR 0 7
8985: PUSH
8986: LD_INT 22
8988: PUSH
8989: LD_VAR 0 1
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 25
9000: PUSH
9001: LD_INT 2
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: LD_INT 24
9010: PUSH
9011: LD_INT 1000
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: LIST
9022: PPUSH
9023: CALL_OW 69
9027: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9028: LD_ADDR_VAR 0 5
9032: PUSH
9033: LD_VAR 0 3
9037: PPUSH
9038: LD_INT 22
9040: PUSH
9041: LD_VAR 0 1
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: LD_INT 21
9052: PUSH
9053: LD_INT 3
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: LD_INT 3
9062: PUSH
9063: LD_INT 24
9065: PUSH
9066: LD_INT 1000
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: LIST
9081: PUSH
9082: EMPTY
9083: LIST
9084: PPUSH
9085: CALL_OW 70
9089: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
9090: LD_VAR 0 5
9094: PUSH
9095: LD_INT 0
9097: GREATER
9098: PUSH
9099: LD_VAR 0 7
9103: PUSH
9104: LD_INT 0
9106: GREATER
9107: AND
9108: IFFALSE 9174
// begin for i in engineerOk_list do
9110: LD_ADDR_VAR 0 6
9114: PUSH
9115: LD_VAR 0 7
9119: PUSH
9120: FOR_IN
9121: IFFALSE 9172
// begin for j in buildings_list do
9123: LD_ADDR_VAR 0 8
9127: PUSH
9128: LD_VAR 0 5
9132: PUSH
9133: FOR_IN
9134: IFFALSE 9168
// begin AddComExitBuilding ( i ) ;
9136: LD_VAR 0 6
9140: PPUSH
9141: CALL_OW 182
// wait ( 0 0$1 ) ;
9145: LD_INT 35
9147: PPUSH
9148: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
9152: LD_VAR 0 6
9156: PPUSH
9157: LD_VAR 0 8
9161: PPUSH
9162: CALL_OW 190
// end ;
9166: GO 9133
9168: POP
9169: POP
// end ;
9170: GO 9120
9172: POP
9173: POP
// end ; if buildings_list = 0 then
9174: LD_VAR 0 5
9178: PUSH
9179: LD_INT 0
9181: EQUAL
9182: IFFALSE 9215
// begin for i in engineerOK_list do
9184: LD_ADDR_VAR 0 6
9188: PUSH
9189: LD_VAR 0 7
9193: PUSH
9194: FOR_IN
9195: IFFALSE 9213
// begin ComEnterUnit ( i , building ) ;
9197: LD_VAR 0 6
9201: PPUSH
9202: LD_VAR 0 2
9206: PPUSH
9207: CALL_OW 120
// end ;
9211: GO 9194
9213: POP
9214: POP
// end ; end ;
9215: LD_VAR 0 4
9219: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9220: LD_INT 0
9222: PPUSH
9223: PPUSH
9224: PPUSH
9225: PPUSH
9226: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9227: LD_ADDR_VAR 0 6
9231: PUSH
9232: LD_INT 22
9234: PUSH
9235: LD_VAR 0 1
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 25
9246: PUSH
9247: LD_INT 4
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: PUSH
9254: LD_INT 24
9256: PUSH
9257: LD_INT 250
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: LIST
9268: PPUSH
9269: CALL_OW 69
9273: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9274: LD_ADDR_VAR 0 9
9278: PUSH
9279: LD_VAR 0 3
9283: PPUSH
9284: LD_INT 22
9286: PUSH
9287: LD_VAR 0 1
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 21
9298: PUSH
9299: LD_INT 1
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: LD_INT 3
9308: PUSH
9309: LD_INT 24
9311: PUSH
9312: LD_INT 650
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: LIST
9327: PPUSH
9328: CALL_OW 70
9332: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9333: LD_VAR 0 9
9337: PUSH
9338: LD_INT 0
9340: GREATER
9341: PUSH
9342: LD_VAR 0 6
9346: PUSH
9347: LD_INT 0
9349: GREATER
9350: AND
9351: IFFALSE 9478
// begin for i = 1 to damageUnits do
9353: LD_ADDR_VAR 0 7
9357: PUSH
9358: DOUBLE
9359: LD_INT 1
9361: DEC
9362: ST_TO_ADDR
9363: LD_VAR 0 9
9367: PUSH
9368: FOR_TO
9369: IFFALSE 9393
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9371: LD_VAR 0 9
9375: PUSH
9376: LD_VAR 0 7
9380: ARRAY
9381: PPUSH
9382: LD_VAR 0 2
9386: PPUSH
9387: CALL_OW 113
9391: GO 9368
9393: POP
9394: POP
// for i in sci_list do
9395: LD_ADDR_VAR 0 7
9399: PUSH
9400: LD_VAR 0 6
9404: PUSH
9405: FOR_IN
9406: IFFALSE 9474
// begin ComExitBuilding ( i ) ;
9408: LD_VAR 0 7
9412: PPUSH
9413: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9417: LD_ADDR_VAR 0 8
9421: PUSH
9422: LD_VAR 0 2
9426: PPUSH
9427: LD_INT 22
9429: PUSH
9430: LD_VAR 0 1
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PPUSH
9439: CALL_OW 70
9443: PUSH
9444: FOR_IN
9445: IFFALSE 9470
// begin AddComHeal ( i , j ) ;
9447: LD_VAR 0 7
9451: PPUSH
9452: LD_VAR 0 8
9456: PPUSH
9457: CALL_OW 188
// wait ( 1 1$0 ) ;
9461: LD_INT 2100
9463: PPUSH
9464: CALL_OW 67
// end ;
9468: GO 9444
9470: POP
9471: POP
// end ;
9472: GO 9405
9474: POP
9475: POP
// end else
9476: GO 9492
// begin AddComEnterUnit ( sci_list , build ) ;
9478: LD_VAR 0 6
9482: PPUSH
9483: LD_VAR 0 4
9487: PPUSH
9488: CALL_OW 180
// end ; end ;
9492: LD_VAR 0 5
9496: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9497: LD_INT 0
9499: PPUSH
9500: PPUSH
9501: PPUSH
9502: PPUSH
9503: PPUSH
9504: PPUSH
9505: PPUSH
9506: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9507: LD_ADDR_VAR 0 7
9511: PUSH
9512: LD_VAR 0 3
9516: PPUSH
9517: LD_INT 22
9519: PUSH
9520: LD_VAR 0 1
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 21
9531: PUSH
9532: LD_INT 2
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: LD_INT 24
9541: PUSH
9542: LD_INT 550
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 34
9551: PUSH
9552: LD_INT 46
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: PPUSH
9565: CALL_OW 70
9569: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9570: LD_ADDR_VAR 0 8
9574: PUSH
9575: LD_VAR 0 3
9579: PPUSH
9580: LD_INT 22
9582: PUSH
9583: LD_VAR 0 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 2
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 34
9604: PUSH
9605: LD_INT 46
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: LD_INT 3
9614: PUSH
9615: LD_INT 24
9617: PUSH
9618: LD_INT 550
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: PPUSH
9635: CALL_OW 70
9639: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9640: LD_ADDR_VAR 0 9
9644: PUSH
9645: LD_VAR 0 2
9649: PPUSH
9650: LD_INT 22
9652: PUSH
9653: LD_VAR 0 1
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PUSH
9662: LD_INT 21
9664: PUSH
9665: LD_INT 2
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: PUSH
9672: LD_INT 34
9674: PUSH
9675: LD_INT 46
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PUSH
9682: LD_INT 24
9684: PUSH
9685: LD_INT 1000
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PUSH
9692: LD_INT 58
9694: PUSH
9695: EMPTY
9696: LIST
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: PPUSH
9705: CALL_OW 70
9709: ST_TO_ADDR
// for i in damageVehicle_list do
9710: LD_ADDR_VAR 0 5
9714: PUSH
9715: LD_VAR 0 8
9719: PUSH
9720: FOR_IN
9721: IFFALSE 9740
// mechanicInside_list = UnitsInside ( i ) ;
9723: LD_ADDR_VAR 0 10
9727: PUSH
9728: LD_VAR 0 5
9732: PPUSH
9733: CALL_OW 313
9737: ST_TO_ADDR
9738: GO 9720
9740: POP
9741: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9742: LD_ADDR_VAR 0 11
9746: PUSH
9747: LD_VAR 0 2
9751: PPUSH
9752: LD_INT 22
9754: PUSH
9755: LD_VAR 0 1
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 25
9766: PUSH
9767: LD_INT 3
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PPUSH
9778: CALL_OW 70
9782: ST_TO_ADDR
// if damageVehicle_list > 0 then
9783: LD_VAR 0 8
9787: PUSH
9788: LD_INT 0
9790: GREATER
9791: IFFALSE 9864
// begin for i in damageVehicle_list do
9793: LD_ADDR_VAR 0 5
9797: PUSH
9798: LD_VAR 0 8
9802: PUSH
9803: FOR_IN
9804: IFFALSE 9862
// begin for j in mechanicInside_list do
9806: LD_ADDR_VAR 0 6
9810: PUSH
9811: LD_VAR 0 10
9815: PUSH
9816: FOR_IN
9817: IFFALSE 9858
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9819: LD_VAR 0 8
9823: PPUSH
9824: LD_VAR 0 2
9828: PPUSH
9829: CALL_OW 113
// AddComExitVehicle ( j ) ;
9833: LD_VAR 0 6
9837: PPUSH
9838: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9842: LD_VAR 0 6
9846: PPUSH
9847: LD_VAR 0 5
9851: PPUSH
9852: CALL_OW 189
// end ;
9856: GO 9816
9858: POP
9859: POP
// end ;
9860: GO 9803
9862: POP
9863: POP
// end ; if emptyVehicle_list > 0 then
9864: LD_VAR 0 9
9868: PUSH
9869: LD_INT 0
9871: GREATER
9872: IFFALSE 9922
// begin for i in emptyVehicle_list do
9874: LD_ADDR_VAR 0 5
9878: PUSH
9879: LD_VAR 0 9
9883: PUSH
9884: FOR_IN
9885: IFFALSE 9920
// begin for j in mechanicOutside_list do
9887: LD_ADDR_VAR 0 6
9891: PUSH
9892: LD_VAR 0 11
9896: PUSH
9897: FOR_IN
9898: IFFALSE 9916
// begin AddComEnterUnit ( j , i ) ;
9900: LD_VAR 0 6
9904: PPUSH
9905: LD_VAR 0 5
9909: PPUSH
9910: CALL_OW 180
// end ;
9914: GO 9897
9916: POP
9917: POP
// end ;
9918: GO 9884
9920: POP
9921: POP
// end ; if VehicleOK_list > 0 then
9922: LD_VAR 0 7
9926: PUSH
9927: LD_INT 0
9929: GREATER
9930: IFFALSE 9964
// begin for i in VehicleOK_list do
9932: LD_ADDR_VAR 0 5
9936: PUSH
9937: LD_VAR 0 7
9941: PUSH
9942: FOR_IN
9943: IFFALSE 9962
// ComAgressiveMove ( i , 110 , 29 ) ;
9945: LD_VAR 0 5
9949: PPUSH
9950: LD_INT 110
9952: PPUSH
9953: LD_INT 29
9955: PPUSH
9956: CALL_OW 114
9960: GO 9942
9962: POP
9963: POP
// end ; end ;
9964: LD_VAR 0 4
9968: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9969: LD_INT 0
9971: PPUSH
9972: PPUSH
9973: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9974: LD_VAR 0 1
9978: PPUSH
9979: LD_INT 22
9981: PUSH
9982: LD_VAR 0 2
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PUSH
9991: LD_INT 2
9993: PUSH
9994: LD_INT 21
9996: PUSH
9997: LD_INT 2
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: LD_INT 21
10006: PUSH
10007: LD_INT 1
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: LIST
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PPUSH
10023: CALL_OW 70
10027: PUSH
10028: LD_VAR 0 5
10032: GREATER
10033: IFFALSE 10165
// begin for i in defendersList do
10035: LD_ADDR_VAR 0 7
10039: PUSH
10040: LD_VAR 0 3
10044: PUSH
10045: FOR_IN
10046: IFFALSE 10161
// begin AddComExitBuilding ( i ) ;
10048: LD_VAR 0 7
10052: PPUSH
10053: CALL_OW 182
// wait ( 0 0$1 ) ;
10057: LD_INT 35
10059: PPUSH
10060: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
10064: LD_ADDR_VAR 0 8
10068: PUSH
10069: LD_VAR 0 1
10073: PPUSH
10074: LD_INT 22
10076: PUSH
10077: LD_VAR 0 2
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: LD_INT 2
10088: PUSH
10089: LD_INT 21
10091: PUSH
10092: LD_INT 2
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: LD_INT 21
10101: PUSH
10102: LD_INT 1
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: LIST
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PPUSH
10118: CALL_OW 70
10122: PUSH
10123: FOR_IN
10124: IFFALSE 10157
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
10126: LD_VAR 0 7
10130: PPUSH
10131: LD_VAR 0 8
10135: PPUSH
10136: CALL_OW 250
10140: PPUSH
10141: LD_VAR 0 8
10145: PPUSH
10146: CALL_OW 251
10150: PPUSH
10151: CALL_OW 174
10155: GO 10123
10157: POP
10158: POP
// end ;
10159: GO 10045
10161: POP
10162: POP
// end else
10163: GO 10196
// begin for i in defendersList do
10165: LD_ADDR_VAR 0 7
10169: PUSH
10170: LD_VAR 0 3
10174: PUSH
10175: FOR_IN
10176: IFFALSE 10194
// ComEnterUnit ( i , build ) ;
10178: LD_VAR 0 7
10182: PPUSH
10183: LD_VAR 0 4
10187: PPUSH
10188: CALL_OW 120
10192: GO 10175
10194: POP
10195: POP
// end ; end ;
10196: LD_VAR 0 6
10200: RET
// export function RussianTrap ; var i ; begin
10201: LD_INT 0
10203: PPUSH
10204: PPUSH
// if GetSide ( Brian ) = 4 then
10205: LD_EXP 6
10209: PPUSH
10210: CALL_OW 255
10214: PUSH
10215: LD_INT 4
10217: EQUAL
10218: IFFALSE 10241
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10220: LD_EXP 6
10224: PUSH
10225: LD_EXP 7
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PPUSH
10234: LD_INT 0
10236: PPUSH
10237: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10241: LD_ADDR_VAR 0 2
10245: PUSH
10246: LD_INT 22
10248: PUSH
10249: LD_INT 3
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 21
10258: PUSH
10259: LD_INT 1
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PPUSH
10270: CALL_OW 69
10274: PUSH
10275: FOR_IN
10276: IFFALSE 10386
// begin ComExitBuilding ( i ) ;
10278: LD_VAR 0 2
10282: PPUSH
10283: CALL_OW 122
// wait ( 0 0$1 ) ;
10287: LD_INT 35
10289: PPUSH
10290: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10294: LD_VAR 0 2
10298: PPUSH
10299: LD_INT 120
10301: PPUSH
10302: LD_INT 56
10304: PPUSH
10305: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10309: LD_VAR 0 2
10313: PPUSH
10314: LD_INT 111
10316: PPUSH
10317: LD_INT 37
10319: PPUSH
10320: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10324: LD_INT 33
10326: PPUSH
10327: CALL_OW 255
10331: PUSH
10332: LD_INT 3
10334: EQUAL
10335: PUSH
10336: LD_INT 33
10338: PPUSH
10339: CALL_OW 302
10343: AND
10344: IFFALSE 10360
// begin AddComEnterUnit ( i , arm2 ) ;
10346: LD_VAR 0 2
10350: PPUSH
10351: LD_INT 33
10353: PPUSH
10354: CALL_OW 180
// end else
10358: GO 10384
// begin AddComCrawl ( i ) ;
10360: LD_VAR 0 2
10364: PPUSH
10365: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10369: LD_VAR 0 2
10373: PPUSH
10374: LD_INT 109
10376: PPUSH
10377: LD_INT 30
10379: PPUSH
10380: CALL_OW 174
// end ; end ;
10384: GO 10275
10386: POP
10387: POP
// end ;
10388: LD_VAR 0 1
10392: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10393: LD_INT 0
10395: PPUSH
10396: PPUSH
10397: PPUSH
10398: PPUSH
10399: PPUSH
// nearest_dist = 1000 ;
10400: LD_ADDR_VAR 0 4
10404: PUSH
10405: LD_INT 1000
10407: ST_TO_ADDR
// nearest_un = un ;
10408: LD_ADDR_VAR 0 5
10412: PUSH
10413: LD_VAR 0 1
10417: ST_TO_ADDR
// for sold in units do
10418: LD_ADDR_VAR 0 6
10422: PUSH
10423: LD_VAR 0 2
10427: PUSH
10428: FOR_IN
10429: IFFALSE 10485
// begin dist = GetDistUnits ( un , sold ) ;
10431: LD_ADDR_VAR 0 7
10435: PUSH
10436: LD_VAR 0 1
10440: PPUSH
10441: LD_VAR 0 6
10445: PPUSH
10446: CALL_OW 296
10450: ST_TO_ADDR
// if dist < nearest_dist then
10451: LD_VAR 0 7
10455: PUSH
10456: LD_VAR 0 4
10460: LESS
10461: IFFALSE 10483
// begin nearest_un = sold ;
10463: LD_ADDR_VAR 0 5
10467: PUSH
10468: LD_VAR 0 6
10472: ST_TO_ADDR
// nearest_dist = dist ;
10473: LD_ADDR_VAR 0 4
10477: PUSH
10478: LD_VAR 0 7
10482: ST_TO_ADDR
// end ; end ;
10483: GO 10428
10485: POP
10486: POP
// result := nearest_un ;
10487: LD_ADDR_VAR 0 3
10491: PUSH
10492: LD_VAR 0 5
10496: ST_TO_ADDR
// end ;
10497: LD_VAR 0 3
10501: RET
// export function PrepareDifficulty ; begin
10502: LD_INT 0
10504: PPUSH
// if Difficulty = 1 then
10505: LD_OWVAR 67
10509: PUSH
10510: LD_INT 1
10512: EQUAL
10513: IFFALSE 10576
// begin RemoveUnit ( brw2 ) ;
10515: LD_INT 9
10517: PPUSH
10518: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10522: LD_INT 30
10524: PPUSH
10525: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10529: LD_INT 52
10531: PPUSH
10532: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10536: LD_INT 63
10538: PPUSH
10539: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10543: LD_INT 5
10545: PUSH
10546: LD_INT 4
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PPUSH
10553: LD_INT 60
10555: PPUSH
10556: CALL_OW 240
// RuSoldMinLevel = 0 ;
10560: LD_ADDR_EXP 13
10564: PUSH
10565: LD_INT 0
10567: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10568: LD_ADDR_EXP 14
10572: PUSH
10573: LD_INT 1
10575: ST_TO_ADDR
// end ; if Difficulty = 2 then
10576: LD_OWVAR 67
10580: PUSH
10581: LD_INT 2
10583: EQUAL
10584: IFFALSE 10626
// begin RemoveUnit ( brw4 ) ;
10586: LD_INT 52
10588: PPUSH
10589: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10593: LD_INT 5
10595: PUSH
10596: LD_INT 4
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PPUSH
10603: LD_INT 50
10605: PPUSH
10606: CALL_OW 240
// RuSoldMinLevel = 1 ;
10610: LD_ADDR_EXP 13
10614: PUSH
10615: LD_INT 1
10617: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10618: LD_ADDR_EXP 14
10622: PUSH
10623: LD_INT 2
10625: ST_TO_ADDR
// end ; if Difficulty = 3 then
10626: LD_OWVAR 67
10630: PUSH
10631: LD_INT 3
10633: EQUAL
10634: IFFALSE 10669
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10636: LD_INT 5
10638: PUSH
10639: LD_INT 4
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PPUSH
10646: LD_INT 40
10648: PPUSH
10649: CALL_OW 240
// RuSoldMinLevel = 2 ;
10653: LD_ADDR_EXP 13
10657: PUSH
10658: LD_INT 2
10660: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10661: LD_ADDR_EXP 14
10665: PUSH
10666: LD_INT 3
10668: ST_TO_ADDR
// end ; end ;
10669: LD_VAR 0 1
10673: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10674: LD_INT 0
10676: PPUSH
10677: PPUSH
10678: PPUSH
// tmp = [ ] ;
10679: LD_ADDR_VAR 0 5
10683: PUSH
10684: EMPTY
10685: ST_TO_ADDR
// if not vehicles then
10686: LD_VAR 0 1
10690: NOT
10691: IFFALSE 10695
// exit ;
10693: GO 10812
// for i in vehicles do
10695: LD_ADDR_VAR 0 4
10699: PUSH
10700: LD_VAR 0 1
10704: PUSH
10705: FOR_IN
10706: IFFALSE 10796
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10708: LD_ADDR_VAR 0 5
10712: PUSH
10713: LD_VAR 0 5
10717: PPUSH
10718: LD_INT 1
10720: PPUSH
10721: LD_VAR 0 4
10725: PPUSH
10726: CALL_OW 265
10730: PUSH
10731: LD_VAR 0 4
10735: PPUSH
10736: CALL_OW 262
10740: PUSH
10741: LD_VAR 0 4
10745: PPUSH
10746: CALL_OW 263
10750: PUSH
10751: LD_VAR 0 4
10755: PPUSH
10756: CALL_OW 264
10760: PUSH
10761: LD_VAR 0 4
10765: PPUSH
10766: CALL_OW 261
10770: PUSH
10771: LD_VAR 0 4
10775: PPUSH
10776: CALL_OW 256
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: PPUSH
10789: CALL_OW 2
10793: ST_TO_ADDR
// end ;
10794: GO 10705
10796: POP
10797: POP
// SaveVariable ( tmp , ident ) ;
10798: LD_VAR 0 5
10802: PPUSH
10803: LD_VAR 0 2
10807: PPUSH
10808: CALL_OW 39
// end ; end_of_file
10812: LD_VAR 0 3
10816: RET
// export function PrepareHeroes ; var plive ; begin
10817: LD_INT 0
10819: PPUSH
10820: PPUSH
// uc_side = 1 ;
10821: LD_ADDR_OWVAR 20
10825: PUSH
10826: LD_INT 1
10828: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10829: LD_ADDR_EXP 1
10833: PUSH
10834: LD_STRING 01_JMM
10836: PPUSH
10837: CALL_OW 34
10841: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10842: LD_ADDR_VAR 0 2
10846: PUSH
10847: LD_STRING 01_JMMLifePoints_1
10849: PPUSH
10850: LD_INT 1000
10852: PPUSH
10853: CALL_OW 30
10857: ST_TO_ADDR
// if plive < 250 then
10858: LD_VAR 0 2
10862: PUSH
10863: LD_INT 250
10865: LESS
10866: IFFALSE 10876
// plive := 300 ;
10868: LD_ADDR_VAR 0 2
10872: PUSH
10873: LD_INT 300
10875: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10876: LD_EXP 1
10880: PPUSH
10881: LD_VAR 0 2
10885: PPUSH
10886: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10890: LD_ADDR_EXP 9
10894: PUSH
10895: LD_STRING Powell
10897: PPUSH
10898: CALL_OW 25
10902: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10903: LD_ADDR_EXP 2
10907: PUSH
10908: LD_STRING 01_Bobby
10910: PPUSH
10911: CALL_OW 34
10915: ST_TO_ADDR
// if Bobby then
10916: LD_EXP 2
10920: IFFALSE 10970
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10922: LD_ADDR_VAR 0 2
10926: PUSH
10927: LD_STRING 01_BobbyLifePoints_1
10929: PPUSH
10930: LD_INT 1000
10932: PPUSH
10933: CALL_OW 30
10937: ST_TO_ADDR
// if plive < 250 then
10938: LD_VAR 0 2
10942: PUSH
10943: LD_INT 250
10945: LESS
10946: IFFALSE 10956
// plive := 300 ;
10948: LD_ADDR_VAR 0 2
10952: PUSH
10953: LD_INT 300
10955: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10956: LD_EXP 2
10960: PPUSH
10961: LD_VAR 0 2
10965: PPUSH
10966: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10970: LD_ADDR_EXP 3
10974: PUSH
10975: LD_STRING 01_Cyrus
10977: PPUSH
10978: CALL_OW 34
10982: ST_TO_ADDR
// if Cyrus then
10983: LD_EXP 3
10987: IFFALSE 11037
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10989: LD_ADDR_VAR 0 2
10993: PUSH
10994: LD_STRING 01_CyrusLifePoints_1
10996: PPUSH
10997: LD_INT 1000
10999: PPUSH
11000: CALL_OW 30
11004: ST_TO_ADDR
// if plive < 250 then
11005: LD_VAR 0 2
11009: PUSH
11010: LD_INT 250
11012: LESS
11013: IFFALSE 11023
// plive := 300 ;
11015: LD_ADDR_VAR 0 2
11019: PUSH
11020: LD_INT 300
11022: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11023: LD_EXP 3
11027: PPUSH
11028: LD_VAR 0 2
11032: PPUSH
11033: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
11037: LD_ADDR_EXP 5
11041: PUSH
11042: LD_STRING Khatam
11044: PPUSH
11045: CALL_OW 25
11049: ST_TO_ADDR
// uc_side = 4 ;
11050: LD_ADDR_OWVAR 20
11054: PUSH
11055: LD_INT 4
11057: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11058: LD_ADDR_EXP 4
11062: PUSH
11063: LD_STRING Lisa
11065: PPUSH
11066: CALL_OW 25
11070: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11071: LD_EXP 1
11075: PPUSH
11076: LD_INT 3
11078: PPUSH
11079: LD_INT 0
11081: PPUSH
11082: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11086: LD_EXP 2
11090: PPUSH
11091: LD_INT 3
11093: PPUSH
11094: LD_INT 0
11096: PPUSH
11097: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11101: LD_EXP 3
11105: PPUSH
11106: LD_INT 3
11108: PPUSH
11109: LD_INT 0
11111: PPUSH
11112: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11116: LD_EXP 4
11120: PPUSH
11121: LD_INT 5
11123: PPUSH
11124: LD_INT 0
11126: PPUSH
11127: CALL_OW 49
// ComCrawl ( Lisa ) ;
11131: LD_EXP 4
11135: PPUSH
11136: CALL_OW 137
// end ;
11140: LD_VAR 0 1
11144: RET
// export function PrepareLisSquad ; var i , un ; begin
11145: LD_INT 0
11147: PPUSH
11148: PPUSH
11149: PPUSH
// uc_side = 4 ;
11150: LD_ADDR_OWVAR 20
11154: PUSH
11155: LD_INT 4
11157: ST_TO_ADDR
// uc_nation = 1 ;
11158: LD_ADDR_OWVAR 21
11162: PUSH
11163: LD_INT 1
11165: ST_TO_ADDR
// hc_class := 2 ;
11166: LD_ADDR_OWVAR 28
11170: PUSH
11171: LD_INT 2
11173: ST_TO_ADDR
// hc_sex := sex_male ;
11174: LD_ADDR_OWVAR 27
11178: PUSH
11179: LD_INT 1
11181: ST_TO_ADDR
// hc_gallery :=  ;
11182: LD_ADDR_OWVAR 33
11186: PUSH
11187: LD_STRING 
11189: ST_TO_ADDR
// hc_name :=  ;
11190: LD_ADDR_OWVAR 26
11194: PUSH
11195: LD_STRING 
11197: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11198: LD_ADDR_OWVAR 30
11202: PUSH
11203: LD_INT 0
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: LD_INT 0
11211: PUSH
11212: LD_INT 0
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11221: LD_ADDR_OWVAR 31
11225: PUSH
11226: LD_INT 1
11228: PUSH
11229: LD_INT 2
11231: PUSH
11232: LD_INT 0
11234: PUSH
11235: LD_INT 0
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: ST_TO_ADDR
// un := CreateHuman ;
11244: LD_ADDR_VAR 0 3
11248: PUSH
11249: CALL_OW 44
11253: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11254: LD_VAR 0 3
11258: PPUSH
11259: LD_INT 6
11261: PPUSH
11262: LD_INT 0
11264: PPUSH
11265: CALL_OW 49
// hc_sex := sex_female ;
11269: LD_ADDR_OWVAR 27
11273: PUSH
11274: LD_INT 2
11276: ST_TO_ADDR
// hc_gallery :=  ;
11277: LD_ADDR_OWVAR 33
11281: PUSH
11282: LD_STRING 
11284: ST_TO_ADDR
// hc_name :=  ;
11285: LD_ADDR_OWVAR 26
11289: PUSH
11290: LD_STRING 
11292: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11293: LD_ADDR_OWVAR 30
11297: PUSH
11298: LD_INT 0
11300: PUSH
11301: LD_INT 0
11303: PUSH
11304: LD_INT 0
11306: PUSH
11307: LD_INT 1
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11316: LD_ADDR_OWVAR 31
11320: PUSH
11321: LD_INT 0
11323: PUSH
11324: LD_INT 1
11326: PUSH
11327: LD_INT 0
11329: PUSH
11330: LD_INT 1
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: ST_TO_ADDR
// un := CreateHuman ;
11339: LD_ADDR_VAR 0 3
11343: PUSH
11344: CALL_OW 44
11348: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11349: LD_VAR 0 3
11353: PPUSH
11354: LD_INT 6
11356: PPUSH
11357: LD_INT 0
11359: PPUSH
11360: CALL_OW 49
// if not Bobby and not Cyrus then
11364: LD_EXP 2
11368: NOT
11369: PUSH
11370: LD_EXP 3
11374: NOT
11375: AND
11376: IFFALSE 11481
// begin hc_class := 1 ;
11378: LD_ADDR_OWVAR 28
11382: PUSH
11383: LD_INT 1
11385: ST_TO_ADDR
// hc_sex := sex_male ;
11386: LD_ADDR_OWVAR 27
11390: PUSH
11391: LD_INT 1
11393: ST_TO_ADDR
// hc_gallery :=  ;
11394: LD_ADDR_OWVAR 33
11398: PUSH
11399: LD_STRING 
11401: ST_TO_ADDR
// hc_name :=  ;
11402: LD_ADDR_OWVAR 26
11406: PUSH
11407: LD_STRING 
11409: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11410: LD_ADDR_OWVAR 30
11414: PUSH
11415: LD_INT 2
11417: PUSH
11418: LD_INT 3
11420: PUSH
11421: LD_INT 1
11423: PUSH
11424: LD_INT 0
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11433: LD_ADDR_OWVAR 31
11437: PUSH
11438: LD_INT 2
11440: PUSH
11441: LD_INT 3
11443: PUSH
11444: LD_INT 1
11446: PUSH
11447: LD_INT 0
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: ST_TO_ADDR
// un := CreateHuman ;
11456: LD_ADDR_VAR 0 3
11460: PUSH
11461: CALL_OW 44
11465: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11466: LD_VAR 0 3
11470: PPUSH
11471: LD_INT 31
11473: PPUSH
11474: LD_INT 0
11476: PPUSH
11477: CALL_OW 49
// end ; InitHc ;
11481: CALL_OW 19
// end ;
11485: LD_VAR 0 1
11489: RET
// export function PrepareOtherAmericans ; begin
11490: LD_INT 0
11492: PPUSH
// uc_side = 4 ;
11493: LD_ADDR_OWVAR 20
11497: PUSH
11498: LD_INT 4
11500: ST_TO_ADDR
// uc_nation = 1 ;
11501: LD_ADDR_OWVAR 21
11505: PUSH
11506: LD_INT 1
11508: ST_TO_ADDR
// hc_gallery =  ;
11509: LD_ADDR_OWVAR 33
11513: PUSH
11514: LD_STRING 
11516: ST_TO_ADDR
// hc_name = Tom Garvin ;
11517: LD_ADDR_OWVAR 26
11521: PUSH
11522: LD_STRING Tom Garvin
11524: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11525: LD_INT 1
11527: PPUSH
11528: LD_INT 1
11530: PPUSH
11531: LD_INT 1
11533: PPUSH
11534: LD_INT 2
11536: PPUSH
11537: CALL_OW 12
11541: PPUSH
11542: CALL_OW 380
// Brian = CreateHuman ;
11546: LD_ADDR_EXP 6
11550: PUSH
11551: CALL_OW 44
11555: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11556: LD_EXP 6
11560: PPUSH
11561: LD_INT 10
11563: PPUSH
11564: LD_INT 0
11566: PPUSH
11567: CALL_OW 49
// hc_name = Jerry White ;
11571: LD_ADDR_OWVAR 26
11575: PUSH
11576: LD_STRING Jerry White
11578: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11579: LD_INT 1
11581: PPUSH
11582: LD_INT 3
11584: PPUSH
11585: LD_INT 1
11587: PPUSH
11588: LD_INT 2
11590: PPUSH
11591: CALL_OW 12
11595: PPUSH
11596: CALL_OW 380
// Jerry = CreateHuman ;
11600: LD_ADDR_EXP 7
11604: PUSH
11605: CALL_OW 44
11609: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11610: LD_EXP 7
11614: PPUSH
11615: LD_INT 10
11617: PPUSH
11618: LD_INT 0
11620: PPUSH
11621: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11625: LD_EXP 6
11629: PUSH
11630: LD_EXP 7
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PPUSH
11639: CALL_OW 140
// end ;
11643: LD_VAR 0 1
11647: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11648: LD_INT 0
11650: PPUSH
11651: PPUSH
11652: PPUSH
// for i = 1 to 6 do
11653: LD_ADDR_VAR 0 2
11657: PUSH
11658: DOUBLE
11659: LD_INT 1
11661: DEC
11662: ST_TO_ADDR
11663: LD_INT 6
11665: PUSH
11666: FOR_TO
11667: IFFALSE 11761
// begin uc_side = 4 ;
11669: LD_ADDR_OWVAR 20
11673: PUSH
11674: LD_INT 4
11676: ST_TO_ADDR
// uc_nation = 1 ;
11677: LD_ADDR_OWVAR 21
11681: PUSH
11682: LD_INT 1
11684: ST_TO_ADDR
// hc_gallery =  ;
11685: LD_ADDR_OWVAR 33
11689: PUSH
11690: LD_STRING 
11692: ST_TO_ADDR
// hc_name =  ;
11693: LD_ADDR_OWVAR 26
11697: PUSH
11698: LD_STRING 
11700: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11701: LD_INT 0
11703: PPUSH
11704: LD_INT 1
11706: PPUSH
11707: LD_INT 4
11709: PPUSH
11710: CALL_OW 12
11714: PPUSH
11715: LD_INT 1
11717: PPUSH
11718: CALL_OW 380
// un = CreateHuman ;
11722: LD_ADDR_VAR 0 3
11726: PUSH
11727: CALL_OW 44
11731: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11732: LD_VAR 0 3
11736: PPUSH
11737: LD_INT 16
11739: PPUSH
11740: LD_INT 0
11742: PPUSH
11743: CALL_OW 49
// SetLives ( un , 1 ) ;
11747: LD_VAR 0 3
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: CALL_OW 234
// end ;
11759: GO 11666
11761: POP
11762: POP
// DyingSold = CreateHuman ;
11763: LD_ADDR_EXP 34
11767: PUSH
11768: CALL_OW 44
11772: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11773: LD_EXP 34
11777: PPUSH
11778: LD_INT 16
11780: PPUSH
11781: LD_INT 0
11783: PPUSH
11784: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11788: LD_EXP 34
11792: PPUSH
11793: LD_INT 250
11795: PPUSH
11796: CALL_OW 234
// end ; end_of_file
11800: LD_VAR 0 1
11804: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11805: LD_INT 0
11807: PPUSH
11808: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11809: LD_ADDR_VAR 0 2
11813: PUSH
11814: LD_INT 22
11816: PUSH
11817: LD_INT 1
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: LD_INT 23
11826: PUSH
11827: LD_INT 1
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: LD_INT 25
11836: PUSH
11837: LD_INT 2
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 50
11846: PUSH
11847: EMPTY
11848: LIST
11849: PUSH
11850: LD_INT 56
11852: PUSH
11853: EMPTY
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: PPUSH
11863: CALL_OW 69
11867: PUSH
11868: LD_EXP 1
11872: PUSH
11873: EMPTY
11874: LIST
11875: DIFF
11876: ST_TO_ADDR
// uc_side = 6 ;
11877: LD_ADDR_OWVAR 20
11881: PUSH
11882: LD_INT 6
11884: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11885: LD_ADDR_EXP 8
11889: PUSH
11890: LD_STRING Mikhail
11892: PPUSH
11893: CALL_OW 25
11897: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
11898: LD_EXP 8
11902: PPUSH
11903: LD_VAR 0 2
11907: PUSH
11908: LD_INT 1
11910: ARRAY
11911: PPUSH
11912: CALL_OW 250
11916: PPUSH
11917: LD_VAR 0 2
11921: PUSH
11922: LD_INT 1
11924: ARRAY
11925: PPUSH
11926: CALL_OW 251
11930: PPUSH
11931: LD_INT 3
11933: PPUSH
11934: LD_INT 1
11936: PPUSH
11937: CALL_OW 50
// end ;
11941: LD_VAR 0 1
11945: RET
// export function PrepareRussianCommander ; begin
11946: LD_INT 0
11948: PPUSH
// uc_side = 3 ;
11949: LD_ADDR_OWVAR 20
11953: PUSH
11954: LD_INT 3
11956: ST_TO_ADDR
// uc_nation = 3 ;
11957: LD_ADDR_OWVAR 21
11961: PUSH
11962: LD_INT 3
11964: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11965: LD_ADDR_EXP 19
11969: PUSH
11970: LD_STRING Natasza
11972: PPUSH
11973: CALL_OW 25
11977: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11978: LD_EXP 19
11982: PPUSH
11983: LD_INT 24
11985: PPUSH
11986: LD_INT 0
11988: PPUSH
11989: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11993: LD_EXP 19
11997: PPUSH
11998: LD_INT 56
12000: PPUSH
12001: LD_INT 16
12003: PPUSH
12004: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
12008: LD_ADDR_EXP 24
12012: PUSH
12013: LD_EXP 24
12017: PUSH
12018: LD_EXP 19
12022: ADD
12023: ST_TO_ADDR
// end ;
12024: LD_VAR 0 1
12028: RET
// export function PrepareSouthBase ; var i , un ; begin
12029: LD_INT 0
12031: PPUSH
12032: PPUSH
12033: PPUSH
// for i = 1 to 2 do
12034: LD_ADDR_VAR 0 2
12038: PUSH
12039: DOUBLE
12040: LD_INT 1
12042: DEC
12043: ST_TO_ADDR
12044: LD_INT 2
12046: PUSH
12047: FOR_TO
12048: IFFALSE 12157
// begin uc_side = 3 ;
12050: LD_ADDR_OWVAR 20
12054: PUSH
12055: LD_INT 3
12057: ST_TO_ADDR
// uc_nation = 3 ;
12058: LD_ADDR_OWVAR 21
12062: PUSH
12063: LD_INT 3
12065: ST_TO_ADDR
// hc_gallery =  ;
12066: LD_ADDR_OWVAR 33
12070: PUSH
12071: LD_STRING 
12073: ST_TO_ADDR
// hc_name =  ;
12074: LD_ADDR_OWVAR 26
12078: PUSH
12079: LD_STRING 
12081: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12082: LD_INT 1
12084: PPUSH
12085: LD_INT 1
12087: PPUSH
12088: LD_EXP 13
12092: PPUSH
12093: LD_EXP 14
12097: PPUSH
12098: CALL_OW 12
12102: PPUSH
12103: CALL_OW 380
// hc_importance = 0 ;
12107: LD_ADDR_OWVAR 32
12111: PUSH
12112: LD_INT 0
12114: ST_TO_ADDR
// un = CreateHuman ;
12115: LD_ADDR_VAR 0 3
12119: PUSH
12120: CALL_OW 44
12124: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12125: LD_VAR 0 3
12129: PPUSH
12130: LD_INT 11
12132: PPUSH
12133: LD_INT 0
12135: PPUSH
12136: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12140: LD_VAR 0 3
12144: PPUSH
12145: LD_INT 111
12147: PPUSH
12148: LD_INT 38
12150: PPUSH
12151: CALL_OW 118
// end ;
12155: GO 12047
12157: POP
12158: POP
// for i = 1 to Difficulty do
12159: LD_ADDR_VAR 0 2
12163: PUSH
12164: DOUBLE
12165: LD_INT 1
12167: DEC
12168: ST_TO_ADDR
12169: LD_OWVAR 67
12173: PUSH
12174: FOR_TO
12175: IFFALSE 12258
// begin uc_side = 3 ;
12177: LD_ADDR_OWVAR 20
12181: PUSH
12182: LD_INT 3
12184: ST_TO_ADDR
// uc_nation = 3 ;
12185: LD_ADDR_OWVAR 21
12189: PUSH
12190: LD_INT 3
12192: ST_TO_ADDR
// hc_gallery =  ;
12193: LD_ADDR_OWVAR 33
12197: PUSH
12198: LD_STRING 
12200: ST_TO_ADDR
// hc_name =  ;
12201: LD_ADDR_OWVAR 26
12205: PUSH
12206: LD_STRING 
12208: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12209: LD_INT 0
12211: PPUSH
12212: LD_INT 3
12214: PPUSH
12215: LD_EXP 13
12219: PPUSH
12220: LD_EXP 14
12224: PPUSH
12225: CALL_OW 12
12229: PPUSH
12230: CALL_OW 380
// un = CreateHuman ;
12234: LD_ADDR_VAR 0 3
12238: PUSH
12239: CALL_OW 44
12243: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12244: LD_VAR 0 3
12248: PPUSH
12249: LD_INT 10
12251: PPUSH
12252: CALL_OW 52
// end ;
12256: GO 12174
12258: POP
12259: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12260: LD_INT 3
12262: PPUSH
12263: LD_INT 3
12265: PPUSH
12266: LD_INT 33
12268: PPUSH
12269: LD_EXP 13
12273: PPUSH
12274: LD_EXP 14
12278: PPUSH
12279: CALL_OW 12
12283: PPUSH
12284: LD_INT 1
12286: PPUSH
12287: LD_INT 1
12289: PUSH
12290: LD_INT 1
12292: PPUSH
12293: LD_INT 2
12295: PPUSH
12296: CALL_OW 12
12300: PUSH
12301: LD_INT 1
12303: PPUSH
12304: LD_INT 2
12306: PPUSH
12307: CALL_OW 12
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: LIST
12316: PUSH
12317: LD_OWVAR 67
12321: ARRAY
12322: PPUSH
12323: CALL 8728 0 6
// for i in UnitsInside ( arm2 ) do
12327: LD_ADDR_VAR 0 2
12331: PUSH
12332: LD_INT 33
12334: PPUSH
12335: CALL_OW 313
12339: PUSH
12340: FOR_IN
12341: IFFALSE 12361
// southBaseDefenders = southBaseDefenders ^ i ;
12343: LD_ADDR_EXP 25
12347: PUSH
12348: LD_EXP 25
12352: PUSH
12353: LD_VAR 0 2
12357: ADD
12358: ST_TO_ADDR
12359: GO 12340
12361: POP
12362: POP
// end ;
12363: LD_VAR 0 1
12367: RET
// export function PrepareNorthBase ; var i , un ; begin
12368: LD_INT 0
12370: PPUSH
12371: PPUSH
12372: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12373: LD_ADDR_VAR 0 2
12377: PUSH
12378: DOUBLE
12379: LD_INT 1
12381: DEC
12382: ST_TO_ADDR
12383: LD_INT 1
12385: PPUSH
12386: LD_INT 2
12388: PPUSH
12389: CALL_OW 12
12393: PUSH
12394: LD_INT 2
12396: PPUSH
12397: LD_INT 3
12399: PPUSH
12400: CALL_OW 12
12404: PUSH
12405: LD_INT 3
12407: PPUSH
12408: LD_INT 4
12410: PPUSH
12411: CALL_OW 12
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: LIST
12420: PUSH
12421: LD_OWVAR 67
12425: ARRAY
12426: PUSH
12427: FOR_TO
12428: IFFALSE 12514
// begin uc_side = 3 ;
12430: LD_ADDR_OWVAR 20
12434: PUSH
12435: LD_INT 3
12437: ST_TO_ADDR
// uc_nation = 3 ;
12438: LD_ADDR_OWVAR 21
12442: PUSH
12443: LD_INT 3
12445: ST_TO_ADDR
// hc_gallery =  ;
12446: LD_ADDR_OWVAR 33
12450: PUSH
12451: LD_STRING 
12453: ST_TO_ADDR
// hc_name =  ;
12454: LD_ADDR_OWVAR 26
12458: PUSH
12459: LD_STRING 
12461: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12462: LD_INT 0
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: LD_EXP 13
12472: PPUSH
12473: LD_EXP 14
12477: PPUSH
12478: CALL_OW 12
12482: PPUSH
12483: CALL_OW 380
// un = CreateHuman ;
12487: LD_ADDR_VAR 0 3
12491: PUSH
12492: CALL_OW 44
12496: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12497: LD_VAR 0 3
12501: PPUSH
12502: LD_INT 14
12504: PPUSH
12505: LD_INT 0
12507: PPUSH
12508: CALL_OW 49
// end ;
12512: GO 12427
12514: POP
12515: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12516: LD_INT 3
12518: PPUSH
12519: LD_INT 3
12521: PPUSH
12522: LD_INT 2
12524: PPUSH
12525: LD_EXP 13
12529: PPUSH
12530: LD_EXP 14
12534: PPUSH
12535: CALL_OW 12
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: LD_INT 1
12545: PPUSH
12546: LD_INT 2
12548: PPUSH
12549: CALL_OW 12
12553: PUSH
12554: LD_INT 1
12556: PPUSH
12557: LD_INT 3
12559: PPUSH
12560: CALL_OW 12
12564: PUSH
12565: LD_INT 1
12567: PPUSH
12568: LD_INT 3
12570: PPUSH
12571: CALL_OW 12
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: LIST
12580: PUSH
12581: LD_OWVAR 67
12585: ARRAY
12586: PPUSH
12587: CALL 8728 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12591: LD_INT 3
12593: PPUSH
12594: LD_INT 3
12596: PPUSH
12597: LD_INT 23
12599: PPUSH
12600: LD_EXP 13
12604: PPUSH
12605: LD_EXP 14
12609: PPUSH
12610: CALL_OW 12
12614: PPUSH
12615: LD_INT 4
12617: PPUSH
12618: LD_INT 0
12620: PUSH
12621: LD_INT 1
12623: PUSH
12624: LD_INT 2
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: LD_OWVAR 67
12636: ARRAY
12637: PPUSH
12638: CALL 8728 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12642: LD_INT 3
12644: PPUSH
12645: LD_INT 3
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: LD_EXP 13
12655: PPUSH
12656: LD_EXP 14
12660: PPUSH
12661: CALL_OW 12
12665: PPUSH
12666: LD_INT 2
12668: PPUSH
12669: LD_INT 1
12671: PUSH
12672: LD_INT 2
12674: PUSH
12675: LD_INT 2
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: LIST
12682: PUSH
12683: LD_OWVAR 67
12687: ARRAY
12688: PPUSH
12689: CALL 8728 0 6
// for i in UnitsInside ( arm1 ) do
12693: LD_ADDR_VAR 0 2
12697: PUSH
12698: LD_INT 2
12700: PPUSH
12701: CALL_OW 313
12705: PUSH
12706: FOR_IN
12707: IFFALSE 12727
// northBaseDefenders = northBaseDefenders ^ i ;
12709: LD_ADDR_EXP 24
12713: PUSH
12714: LD_EXP 24
12718: PUSH
12719: LD_VAR 0 2
12723: ADD
12724: ST_TO_ADDR
12725: GO 12706
12727: POP
12728: POP
// end ;
12729: LD_VAR 0 1
12733: RET
// export function PrepareOtherRussians ; var i , un ; begin
12734: LD_INT 0
12736: PPUSH
12737: PPUSH
12738: PPUSH
// for i = 1 to 2 do
12739: LD_ADDR_VAR 0 2
12743: PUSH
12744: DOUBLE
12745: LD_INT 1
12747: DEC
12748: ST_TO_ADDR
12749: LD_INT 2
12751: PUSH
12752: FOR_TO
12753: IFFALSE 12854
// begin uc_side = 3 ;
12755: LD_ADDR_OWVAR 20
12759: PUSH
12760: LD_INT 3
12762: ST_TO_ADDR
// uc_nation = 3 ;
12763: LD_ADDR_OWVAR 21
12767: PUSH
12768: LD_INT 3
12770: ST_TO_ADDR
// hc_gallery =  ;
12771: LD_ADDR_OWVAR 33
12775: PUSH
12776: LD_STRING 
12778: ST_TO_ADDR
// hc_name =  ;
12779: LD_ADDR_OWVAR 26
12783: PUSH
12784: LD_STRING 
12786: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12787: LD_INT 0
12789: PPUSH
12790: LD_INT 1
12792: PPUSH
12793: LD_EXP 13
12797: PPUSH
12798: LD_EXP 14
12802: PPUSH
12803: CALL_OW 12
12807: PPUSH
12808: CALL_OW 380
// un = CreateHuman ;
12812: LD_ADDR_VAR 0 3
12816: PUSH
12817: CALL_OW 44
12821: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12822: LD_VAR 0 3
12826: PPUSH
12827: LD_INT 9
12829: PPUSH
12830: LD_INT 0
12832: PPUSH
12833: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12837: LD_VAR 0 3
12841: PPUSH
12842: LD_INT 80
12844: PPUSH
12845: LD_INT 73
12847: PPUSH
12848: CALL_OW 118
// end ;
12852: GO 12752
12854: POP
12855: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12856: LD_ADDR_VAR 0 2
12860: PUSH
12861: LD_INT 22
12863: PUSH
12864: LD_INT 3
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PUSH
12871: LD_INT 30
12873: PUSH
12874: LD_INT 31
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PPUSH
12885: CALL_OW 69
12889: PUSH
12890: FOR_IN
12891: IFFALSE 12919
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12893: LD_EXP 13
12897: PPUSH
12898: LD_EXP 14
12902: PPUSH
12903: CALL_OW 12
12907: PPUSH
12908: LD_VAR 0 2
12912: PPUSH
12913: CALL 8838 0 2
12917: GO 12890
12919: POP
12920: POP
// end ;
12921: LD_VAR 0 1
12925: RET
// export function PrepareCargoBays ; begin
12926: LD_INT 0
12928: PPUSH
// uc_side = 3 ;
12929: LD_ADDR_OWVAR 20
12933: PUSH
12934: LD_INT 3
12936: ST_TO_ADDR
// uc_nation = 3 ;
12937: LD_ADDR_OWVAR 21
12941: PUSH
12942: LD_INT 3
12944: ST_TO_ADDR
// vc_engine = 1 ;
12945: LD_ADDR_OWVAR 39
12949: PUSH
12950: LD_INT 1
12952: ST_TO_ADDR
// vc_control = 1 ;
12953: LD_ADDR_OWVAR 38
12957: PUSH
12958: LD_INT 1
12960: ST_TO_ADDR
// vc_weapon = 51 ;
12961: LD_ADDR_OWVAR 40
12965: PUSH
12966: LD_INT 51
12968: ST_TO_ADDR
// vc_chassis = 22 ;
12969: LD_ADDR_OWVAR 37
12973: PUSH
12974: LD_INT 22
12976: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12977: LD_ADDR_EXP 15
12981: PUSH
12982: CALL_OW 45
12986: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12987: LD_ADDR_EXP 16
12991: PUSH
12992: CALL_OW 45
12996: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12997: LD_EXP 15
13001: PPUSH
13002: LD_INT 13
13004: PPUSH
13005: LD_INT 0
13007: PPUSH
13008: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13012: LD_EXP 16
13016: PPUSH
13017: LD_INT 13
13019: PPUSH
13020: LD_INT 0
13022: PPUSH
13023: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
13027: LD_EXP 15
13031: PPUSH
13032: LD_INT 2
13034: PPUSH
13035: LD_INT 70
13037: PUSH
13038: LD_INT 50
13040: PUSH
13041: LD_INT 30
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: LIST
13048: PUSH
13049: LD_OWVAR 67
13053: ARRAY
13054: PPUSH
13055: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
13059: LD_EXP 16
13063: PPUSH
13064: LD_INT 2
13066: PPUSH
13067: LD_INT 70
13069: PUSH
13070: LD_INT 50
13072: PUSH
13073: LD_INT 30
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: LIST
13080: PUSH
13081: LD_OWVAR 67
13085: ARRAY
13086: PPUSH
13087: CALL_OW 291
// hc_gallery =  ;
13091: LD_ADDR_OWVAR 33
13095: PUSH
13096: LD_STRING 
13098: ST_TO_ADDR
// hc_name =  ;
13099: LD_ADDR_OWVAR 26
13103: PUSH
13104: LD_STRING 
13106: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13107: LD_INT 1
13109: PPUSH
13110: LD_INT 3
13112: PPUSH
13113: LD_INT 1
13115: PPUSH
13116: LD_INT 2
13118: PPUSH
13119: CALL_OW 12
13123: PPUSH
13124: CALL_OW 380
// driver1 = CreateHuman ;
13128: LD_ADDR_EXP 17
13132: PUSH
13133: CALL_OW 44
13137: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13138: LD_EXP 17
13142: PPUSH
13143: LD_EXP 15
13147: PPUSH
13148: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13152: LD_ADDR_OWVAR 26
13156: PUSH
13157: LD_STRING Nikolai Andreyev
13159: ST_TO_ADDR
// driver2 = CreateHuman ;
13160: LD_ADDR_EXP 18
13164: PUSH
13165: CALL_OW 44
13169: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13170: LD_EXP 18
13174: PPUSH
13175: LD_EXP 16
13179: PPUSH
13180: CALL_OW 52
// end ;
13184: LD_VAR 0 1
13188: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
13189: LD_INT 0
13191: PPUSH
13192: PPUSH
13193: PPUSH
13194: PPUSH
13195: PPUSH
13196: PPUSH
13197: PPUSH
// uc_side = 3 ;
13198: LD_ADDR_OWVAR 20
13202: PUSH
13203: LD_INT 3
13205: ST_TO_ADDR
// uc_nation = 3 ;
13206: LD_ADDR_OWVAR 21
13210: PUSH
13211: LD_INT 3
13213: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13214: LD_ADDR_VAR 0 4
13218: PUSH
13219: DOUBLE
13220: LD_INT 1
13222: DEC
13223: ST_TO_ADDR
13224: LD_VAR 0 1
13228: PUSH
13229: LD_INT 1
13231: PPUSH
13232: LD_INT 3
13234: PPUSH
13235: CALL_OW 12
13239: PLUS
13240: PUSH
13241: FOR_TO
13242: IFFALSE 13419
// begin vc_engine = 1 ;
13244: LD_ADDR_OWVAR 39
13248: PUSH
13249: LD_INT 1
13251: ST_TO_ADDR
// vc_control = 1 ;
13252: LD_ADDR_OWVAR 38
13256: PUSH
13257: LD_INT 1
13259: ST_TO_ADDR
// vc_weapon = 42 ;
13260: LD_ADDR_OWVAR 40
13264: PUSH
13265: LD_INT 42
13267: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13268: LD_ADDR_OWVAR 37
13272: PUSH
13273: LD_INT 21
13275: PUSH
13276: LD_INT 22
13278: PUSH
13279: LD_INT 22
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: LIST
13286: PUSH
13287: LD_OWVAR 67
13291: ARRAY
13292: ST_TO_ADDR
// veh = CreateVehicle ;
13293: LD_ADDR_VAR 0 5
13297: PUSH
13298: CALL_OW 45
13302: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13303: LD_VAR 0 5
13307: PPUSH
13308: LD_VAR 0 2
13312: PPUSH
13313: LD_INT 0
13315: PPUSH
13316: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13320: LD_ADDR_EXP 26
13324: PUSH
13325: LD_EXP 26
13329: PUSH
13330: LD_VAR 0 5
13334: ADD
13335: ST_TO_ADDR
// hc_gallery =  ;
13336: LD_ADDR_OWVAR 33
13340: PUSH
13341: LD_STRING 
13343: ST_TO_ADDR
// hc_name =  ;
13344: LD_ADDR_OWVAR 26
13348: PUSH
13349: LD_STRING 
13351: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13352: LD_INT 0
13354: PPUSH
13355: LD_INT 3
13357: PPUSH
13358: LD_EXP 13
13362: PPUSH
13363: LD_EXP 14
13367: PPUSH
13368: CALL_OW 12
13372: PPUSH
13373: CALL_OW 380
// un = CreateHuman ;
13377: LD_ADDR_VAR 0 6
13381: PUSH
13382: CALL_OW 44
13386: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13387: LD_VAR 0 6
13391: PPUSH
13392: LD_VAR 0 5
13396: PPUSH
13397: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13401: LD_ADDR_EXP 26
13405: PUSH
13406: LD_EXP 26
13410: PUSH
13411: LD_VAR 0 6
13415: ADD
13416: ST_TO_ADDR
// end ;
13417: GO 13241
13419: POP
13420: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13421: LD_INT 0
13423: PPUSH
13424: LD_INT 2
13426: PPUSH
13427: LD_EXP 13
13431: PPUSH
13432: LD_EXP 14
13436: PPUSH
13437: CALL_OW 12
13441: PPUSH
13442: CALL_OW 380
// un = CreateHuman ;
13446: LD_ADDR_VAR 0 6
13450: PUSH
13451: CALL_OW 44
13455: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13456: LD_ADDR_VAR 0 4
13460: PUSH
13461: DOUBLE
13462: LD_INT 1
13464: DEC
13465: ST_TO_ADDR
13466: LD_VAR 0 1
13470: PUSH
13471: LD_INT 2
13473: PUSH
13474: LD_INT 2
13476: MUL
13477: PLUS
13478: PUSH
13479: FOR_TO
13480: IFFALSE 13568
// begin hc_gallery =  ;
13482: LD_ADDR_OWVAR 33
13486: PUSH
13487: LD_STRING 
13489: ST_TO_ADDR
// hc_name =  ;
13490: LD_ADDR_OWVAR 26
13494: PUSH
13495: LD_STRING 
13497: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13498: LD_INT 1
13500: PPUSH
13501: LD_INT 1
13503: PPUSH
13504: LD_EXP 13
13508: PPUSH
13509: LD_EXP 14
13513: PPUSH
13514: CALL_OW 12
13518: PPUSH
13519: CALL_OW 380
// un = CreateHuman ;
13523: LD_ADDR_VAR 0 6
13527: PUSH
13528: CALL_OW 44
13532: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13533: LD_VAR 0 6
13537: PPUSH
13538: LD_VAR 0 2
13542: PPUSH
13543: LD_INT 0
13545: PPUSH
13546: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13550: LD_ADDR_EXP 26
13554: PUSH
13555: LD_EXP 26
13559: PUSH
13560: LD_VAR 0 6
13564: ADD
13565: ST_TO_ADDR
// end ;
13566: GO 13479
13568: POP
13569: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13570: LD_ADDR_VAR 0 7
13574: PUSH
13575: LD_INT 26
13577: PPUSH
13578: LD_INT 22
13580: PUSH
13581: LD_INT 3
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: LD_INT 21
13590: PUSH
13591: LD_INT 1
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 26
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: PPUSH
13613: CALL_OW 70
13617: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13618: LD_VAR 0 7
13622: PUSH
13623: LD_INT 1
13625: ARRAY
13626: PPUSH
13627: LD_STRING D9-Rus3-1
13629: PPUSH
13630: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13634: LD_VAR 0 7
13638: PUSH
13639: LD_INT 2
13641: ARRAY
13642: PPUSH
13643: LD_STRING D9-Russ-1
13645: PPUSH
13646: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13650: LD_INT 35
13652: PPUSH
13653: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13657: LD_ADDR_VAR 0 4
13661: PUSH
13662: LD_INT 26
13664: PPUSH
13665: LD_INT 22
13667: PUSH
13668: LD_INT 3
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: EMPTY
13676: LIST
13677: PPUSH
13678: CALL_OW 70
13682: PUSH
13683: FOR_IN
13684: IFFALSE 13856
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13686: LD_ADDR_VAR 0 8
13690: PUSH
13691: LD_INT 22
13693: PUSH
13694: LD_INT 1
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PPUSH
13701: CALL_OW 69
13705: PPUSH
13706: LD_VAR 0 4
13710: PPUSH
13711: CALL_OW 74
13715: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13716: LD_ADDR_VAR 0 9
13720: PUSH
13721: LD_INT 22
13723: PUSH
13724: LD_INT 1
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: LD_INT 2
13733: PUSH
13734: LD_INT 59
13736: PUSH
13737: EMPTY
13738: LIST
13739: PUSH
13740: LD_INT 21
13742: PUSH
13743: LD_INT 1
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 21
13752: PUSH
13753: LD_INT 2
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: EMPTY
13771: LIST
13772: PPUSH
13773: CALL_OW 69
13777: PPUSH
13778: LD_VAR 0 4
13782: PPUSH
13783: CALL_OW 74
13787: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13788: LD_VAR 0 4
13792: PPUSH
13793: LD_VAR 0 8
13797: PPUSH
13798: CALL_OW 296
13802: PUSH
13803: LD_INT 8
13805: PLUS
13806: PUSH
13807: LD_VAR 0 4
13811: PPUSH
13812: LD_VAR 0 9
13816: PPUSH
13817: CALL_OW 296
13821: LESS
13822: IFFALSE 13840
// begin ComAttackUnit ( i , target1 ) ;
13824: LD_VAR 0 4
13828: PPUSH
13829: LD_VAR 0 8
13833: PPUSH
13834: CALL_OW 115
// end else
13838: GO 13854
// begin ComAttackUnit ( i , target2 ) ;
13840: LD_VAR 0 4
13844: PPUSH
13845: LD_VAR 0 9
13849: PPUSH
13850: CALL_OW 115
// end ; end ;
13854: GO 13683
13856: POP
13857: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13858: LD_INT 26
13860: PPUSH
13861: LD_INT 22
13863: PUSH
13864: LD_INT 3
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PUSH
13871: LD_INT 2
13873: PUSH
13874: LD_INT 21
13876: PUSH
13877: LD_INT 1
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 21
13886: PUSH
13887: LD_INT 2
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 59
13896: PUSH
13897: EMPTY
13898: LIST
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PPUSH
13910: CALL_OW 70
13914: PUSH
13915: LD_INT 0
13917: EQUAL
13918: IFFALSE 13650
// end ; end_of_file
13920: LD_VAR 0 3
13924: RET
// every 0 0$1 do
13925: GO 13927
13927: DISABLE
// begin enable ;
13928: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13929: LD_INT 3
13931: PPUSH
13932: LD_INT 1
13934: PPUSH
13935: LD_INT 22
13937: PPUSH
13938: CALL 8974 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13942: LD_INT 3
13944: PPUSH
13945: LD_INT 20
13947: PPUSH
13948: LD_INT 22
13950: PPUSH
13951: LD_INT 23
13953: PPUSH
13954: CALL 9220 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13958: LD_INT 3
13960: PPUSH
13961: LD_INT 21
13963: PPUSH
13964: LD_INT 23
13966: PPUSH
13967: CALL 9497 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13971: LD_INT 22
13973: PPUSH
13974: LD_INT 1
13976: PPUSH
13977: LD_EXP 24
13981: PPUSH
13982: LD_INT 2
13984: PPUSH
13985: LD_INT 3
13987: PPUSH
13988: CALL 9969 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13992: LD_INT 23
13994: PPUSH
13995: LD_INT 1
13997: PPUSH
13998: LD_EXP 25
14002: PPUSH
14003: LD_INT 33
14005: PPUSH
14006: LD_INT 1
14008: PPUSH
14009: CALL 9969 0 5
// end ; end_of_file
14013: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14014: LD_VAR 0 1
14018: PPUSH
14019: CALL_OW 255
14023: PUSH
14024: LD_INT 1
14026: EQUAL
14027: PUSH
14028: LD_VAR 0 1
14032: PPUSH
14033: CALL_OW 247
14037: PUSH
14038: LD_INT 1
14040: EQUAL
14041: AND
14042: IFFALSE 14058
// deadsCounter = deadsCounter + 1 ;
14044: LD_ADDR_EXP 31
14048: PUSH
14049: LD_EXP 31
14053: PUSH
14054: LD_INT 1
14056: PLUS
14057: ST_TO_ADDR
// end ;
14058: PPOPN 1
14060: END
// on Command ( comandid ) do var i , j , tmp ;
14061: LD_INT 0
14063: PPUSH
14064: PPUSH
14065: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14066: LD_ADDR_VAR 0 2
14070: PUSH
14071: LD_INT 22
14073: PUSH
14074: LD_INT 1
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: LD_INT 21
14083: PUSH
14084: LD_INT 2
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL_OW 69
14099: PUSH
14100: FOR_IN
14101: IFFALSE 14226
// begin if GetTaskList ( i ) > 0 then
14103: LD_VAR 0 2
14107: PPUSH
14108: CALL_OW 437
14112: PUSH
14113: LD_INT 0
14115: GREATER
14116: IFFALSE 14224
// begin for j = 1 to GetTaskList ( i ) do
14118: LD_ADDR_VAR 0 3
14122: PUSH
14123: DOUBLE
14124: LD_INT 1
14126: DEC
14127: ST_TO_ADDR
14128: LD_VAR 0 2
14132: PPUSH
14133: CALL_OW 437
14137: PUSH
14138: FOR_TO
14139: IFFALSE 14222
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14141: LD_ADDR_VAR 0 4
14145: PUSH
14146: LD_VAR 0 2
14150: PPUSH
14151: CALL_OW 437
14155: PUSH
14156: LD_VAR 0 3
14160: ARRAY
14161: PUSH
14162: LD_INT 4
14164: ARRAY
14165: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14166: LD_VAR 0 4
14170: PPUSH
14171: CALL_OW 255
14175: PUSH
14176: LD_INT 3
14178: EQUAL
14179: PUSH
14180: LD_VAR 0 4
14184: PPUSH
14185: CALL_OW 247
14189: PUSH
14190: LD_INT 2
14192: EQUAL
14193: AND
14194: PUSH
14195: LD_VAR 0 4
14199: PPUSH
14200: CALL_OW 264
14204: PUSH
14205: LD_INT 51
14207: EQUAL
14208: AND
14209: IFFALSE 14220
// ComStop ( i ) ;
14211: LD_VAR 0 2
14215: PPUSH
14216: CALL_OW 141
// end ;
14220: GO 14138
14222: POP
14223: POP
// end ; end ;
14224: GO 14100
14226: POP
14227: POP
// end ; end_of_file
14228: PPOPN 4
14230: END
// every 0 0$1 trigger IsDead ( JMM ) do
14231: LD_EXP 1
14235: PPUSH
14236: CALL_OW 301
14240: IFFALSE 14252
14242: GO 14244
14244: DISABLE
// YouLost ( JMM ) ;
14245: LD_STRING JMM
14247: PPUSH
14248: CALL_OW 104
14252: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
14253: LD_INT 1
14255: PPUSH
14256: CALL_OW 301
14260: PUSH
14261: LD_INT 10
14263: PPUSH
14264: CALL_OW 301
14268: OR
14269: IFFALSE 14281
14271: GO 14273
14273: DISABLE
// YouLost ( DepotDestroyed ) ;
14274: LD_STRING DepotDestroyed
14276: PPUSH
14277: CALL_OW 104
14281: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14282: LD_INT 22
14284: PUSH
14285: LD_INT 1
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 21
14294: PUSH
14295: LD_INT 1
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 25
14304: PUSH
14305: LD_INT 2
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: LIST
14316: PPUSH
14317: CALL_OW 69
14321: PUSH
14322: LD_INT 0
14324: EQUAL
14325: PUSH
14326: LD_INT 22
14328: PUSH
14329: LD_INT 4
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: LD_INT 21
14338: PUSH
14339: LD_INT 1
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: LD_INT 25
14348: PUSH
14349: LD_INT 2
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 69
14365: PUSH
14366: LD_INT 0
14368: EQUAL
14369: AND
14370: PUSH
14371: LD_INT 1
14373: PPUSH
14374: CALL_OW 255
14378: PUSH
14379: LD_INT 3
14381: EQUAL
14382: AND
14383: PUSH
14384: LD_INT 10
14386: PPUSH
14387: CALL_OW 255
14391: PUSH
14392: LD_INT 3
14394: EQUAL
14395: AND
14396: IFFALSE 14408
14398: GO 14400
14400: DISABLE
// YouLost ( Engineer ) ;
14401: LD_STRING Engineer
14403: PPUSH
14404: CALL_OW 104
14408: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14409: LD_INT 1
14411: PPUSH
14412: CALL_OW 255
14416: PUSH
14417: LD_INT 3
14419: EQUAL
14420: PUSH
14421: LD_EXP 27
14425: PUSH
14426: LD_INT 1
14428: EQUAL
14429: AND
14430: IFFALSE 14442
14432: GO 14434
14434: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14435: LD_STRING DepotCaptured
14437: PPUSH
14438: CALL_OW 104
14442: END
// export function PrepareTigers ; var i , un ; begin
14443: LD_INT 0
14445: PPUSH
14446: PPUSH
14447: PPUSH
// for i = 1 to Difficulty do
14448: LD_ADDR_VAR 0 2
14452: PUSH
14453: DOUBLE
14454: LD_INT 1
14456: DEC
14457: ST_TO_ADDR
14458: LD_OWVAR 67
14462: PUSH
14463: FOR_TO
14464: IFFALSE 14599
// begin hc_sex = sex_male ;
14466: LD_ADDR_OWVAR 27
14470: PUSH
14471: LD_INT 1
14473: ST_TO_ADDR
// uc_side = 0 ;
14474: LD_ADDR_OWVAR 20
14478: PUSH
14479: LD_INT 0
14481: ST_TO_ADDR
// uc_nation = nation_nature ;
14482: LD_ADDR_OWVAR 21
14486: PUSH
14487: LD_INT 0
14489: ST_TO_ADDR
// hc_class = class_tiger ;
14490: LD_ADDR_OWVAR 28
14494: PUSH
14495: LD_INT 14
14497: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14498: LD_ADDR_OWVAR 31
14502: PUSH
14503: LD_EXP 14
14507: PUSH
14508: LD_INT 0
14510: PUSH
14511: LD_INT 0
14513: PUSH
14514: LD_INT 0
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14523: LD_ADDR_OWVAR 35
14527: PUSH
14528: LD_INT 30
14530: PPUSH
14531: LD_INT 40
14533: PPUSH
14534: CALL_OW 12
14538: PUSH
14539: LD_INT 40
14541: PPUSH
14542: LD_INT 50
14544: PPUSH
14545: CALL_OW 12
14549: PUSH
14550: LD_INT 50
14552: PPUSH
14553: LD_INT 60
14555: PPUSH
14556: CALL_OW 12
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: LIST
14565: PUSH
14566: LD_OWVAR 67
14570: ARRAY
14571: ST_TO_ADDR
// un = CreateHuman ;
14572: LD_ADDR_VAR 0 3
14576: PUSH
14577: CALL_OW 44
14581: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14582: LD_VAR 0 3
14586: PPUSH
14587: LD_INT 27
14589: PPUSH
14590: LD_INT 0
14592: PPUSH
14593: CALL_OW 49
// end ;
14597: GO 14463
14599: POP
14600: POP
// end ; end_of_file
14601: LD_VAR 0 1
14605: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14606: LD_INT 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: PUSH
14618: LD_INT 10
14620: PPUSH
14621: CALL_OW 255
14625: PUSH
14626: LD_INT 1
14628: EQUAL
14629: AND
14630: PUSH
14631: LD_EXP 20
14635: PUSH
14636: LD_INT 1
14638: EQUAL
14639: AND
14640: PUSH
14641: LD_INT 22
14643: PUSH
14644: LD_INT 3
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 21
14653: PUSH
14654: LD_INT 2
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: LD_INT 34
14663: PUSH
14664: LD_INT 51
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PUSH
14671: LD_INT 3
14673: PUSH
14674: LD_INT 58
14676: PUSH
14677: EMPTY
14678: LIST
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: PPUSH
14690: CALL_OW 69
14694: PUSH
14695: LD_INT 0
14697: EQUAL
14698: AND
14699: IFFALSE 14790
14701: GO 14703
14703: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14704: LD_INT 9450
14706: PUSH
14707: LD_INT 8400
14709: PUSH
14710: LD_INT 6300
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: LIST
14717: PUSH
14718: LD_OWVAR 67
14722: ARRAY
14723: PPUSH
14724: CALL_OW 67
// if cargoEscape = 1 then
14728: LD_EXP 20
14732: PUSH
14733: LD_INT 1
14735: EQUAL
14736: IFFALSE 14790
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14738: LD_EXP 9
14742: PPUSH
14743: LD_STRING D6-Pow-1
14745: PPUSH
14746: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14750: LD_EXP 1
14754: PPUSH
14755: LD_STRING D6-JMM-1
14757: PPUSH
14758: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14762: LD_EXP 9
14766: PPUSH
14767: LD_STRING D6-Pow-2
14769: PPUSH
14770: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14774: LD_EXP 1
14778: PPUSH
14779: LD_STRING D6-JMM-2
14781: PPUSH
14782: CALL_OW 88
// FinishMission ;
14786: CALL 14998 0 0
// end ; end ;
14790: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14791: LD_INT 1
14793: PPUSH
14794: CALL_OW 255
14798: PUSH
14799: LD_INT 1
14801: EQUAL
14802: PUSH
14803: LD_INT 10
14805: PPUSH
14806: CALL_OW 255
14810: PUSH
14811: LD_INT 1
14813: EQUAL
14814: AND
14815: PUSH
14816: LD_EXP 20
14820: PUSH
14821: LD_INT 1
14823: GREATER
14824: AND
14825: IFFALSE 14892
14827: GO 14829
14829: DISABLE
14830: LD_INT 0
14832: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14833: LD_INT 11550
14835: PUSH
14836: LD_INT 10500
14838: PUSH
14839: LD_INT 9450
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: LIST
14846: PUSH
14847: LD_OWVAR 67
14851: ARRAY
14852: PPUSH
14853: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14857: LD_INT 1
14859: PUSH
14860: LD_INT 2
14862: PUSH
14863: LD_INT 3
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: LIST
14870: PUSH
14871: LD_OWVAR 67
14875: ARRAY
14876: PPUSH
14877: LD_INT 13
14879: PPUSH
14880: CALL 13189 0 2
// lastBattle = 1 ;
14884: LD_ADDR_EXP 27
14888: PUSH
14889: LD_INT 1
14891: ST_TO_ADDR
// end ;
14892: PPOPN 1
14894: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14895: LD_EXP 27
14899: PUSH
14900: LD_INT 1
14902: EQUAL
14903: PUSH
14904: LD_INT 26
14906: PPUSH
14907: LD_INT 22
14909: PUSH
14910: LD_INT 3
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 21
14919: PUSH
14920: LD_INT 1
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PPUSH
14931: CALL_OW 70
14935: PUSH
14936: LD_INT 0
14938: EQUAL
14939: AND
14940: IFFALSE 14997
14942: GO 14944
14944: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14945: LD_EXP 9
14949: PPUSH
14950: LD_STRING D6-Pow-1
14952: PPUSH
14953: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14957: LD_EXP 1
14961: PPUSH
14962: LD_STRING D6-JMM-1
14964: PPUSH
14965: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14969: LD_EXP 9
14973: PPUSH
14974: LD_STRING D6-Pow-2
14976: PPUSH
14977: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14981: LD_EXP 1
14985: PPUSH
14986: LD_STRING D6-JMM-2
14988: PPUSH
14989: CALL_OW 88
// FinishMission ;
14993: CALL 14998 0 0
// end ;
14997: END
// export function FinishMission ; var tmp ; begin
14998: LD_INT 0
15000: PPUSH
15001: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15002: LD_ADDR_VAR 0 2
15006: PUSH
15007: LD_INT 22
15009: PUSH
15010: LD_INT 1
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: LD_INT 21
15019: PUSH
15020: LD_INT 2
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 24
15029: PUSH
15030: LD_INT 251
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: LIST
15041: PPUSH
15042: CALL_OW 69
15046: ST_TO_ADDR
// if tmp then
15047: LD_VAR 0 2
15051: IFFALSE 15065
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15053: LD_VAR 0 2
15057: PPUSH
15058: LD_STRING 02_tanks_1
15060: PPUSH
15061: CALL 10674 0 2
// if mikhailStatus = 1 then
15065: LD_EXP 21
15069: PUSH
15070: LD_INT 1
15072: EQUAL
15073: IFFALSE 15087
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15075: LD_EXP 21
15079: PPUSH
15080: LD_STRING 02_mikhailStatus_1
15082: PPUSH
15083: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15087: LD_INT 1
15089: PPUSH
15090: CALL_OW 274
15094: PPUSH
15095: LD_INT 1
15097: PPUSH
15098: CALL_OW 275
15102: PPUSH
15103: LD_STRING 02_resources_4
15105: PPUSH
15106: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15110: LD_INT 1
15112: PPUSH
15113: CALL_OW 274
15117: PPUSH
15118: LD_INT 1
15120: PPUSH
15121: CALL_OW 275
15125: PUSH
15126: LD_INT 200
15128: GREATEREQUAL
15129: IFFALSE 15143
// begin AddMedal ( Cans , 1 ) ;
15131: LD_STRING Cans
15133: PPUSH
15134: LD_INT 1
15136: PPUSH
15137: CALL_OW 101
// end else
15141: GO 15154
// begin AddMedal ( Cans , - 1 ) ;
15143: LD_STRING Cans
15145: PPUSH
15146: LD_INT 1
15148: NEG
15149: PPUSH
15150: CALL_OW 101
// end ; if deadsCounter < 2 then
15154: LD_EXP 31
15158: PUSH
15159: LD_INT 2
15161: LESS
15162: IFFALSE 15176
// begin AddMedal ( Deaths , 1 ) ;
15164: LD_STRING Deaths
15166: PPUSH
15167: LD_INT 1
15169: PPUSH
15170: CALL_OW 101
// end else
15174: GO 15187
// begin AddMedal ( Deaths , - 1 ) ;
15176: LD_STRING Deaths
15178: PPUSH
15179: LD_INT 1
15181: NEG
15182: PPUSH
15183: CALL_OW 101
// end ; if mikhailStatus = 0 then
15187: LD_EXP 21
15191: PUSH
15192: LD_INT 0
15194: EQUAL
15195: IFFALSE 15208
// AddMedal ( Prisoner , - 1 ) ;
15197: LD_STRING Prisoner
15199: PPUSH
15200: LD_INT 1
15202: NEG
15203: PPUSH
15204: CALL_OW 101
// if mikhailStatus = 1 then
15208: LD_EXP 21
15212: PUSH
15213: LD_INT 1
15215: EQUAL
15216: IFFALSE 15228
// AddMedal ( Prisoner , 1 ) ;
15218: LD_STRING Prisoner
15220: PPUSH
15221: LD_INT 1
15223: PPUSH
15224: CALL_OW 101
// if mikhailStatus = 2 then
15228: LD_EXP 21
15232: PUSH
15233: LD_INT 2
15235: EQUAL
15236: IFFALSE 15248
// AddMedal ( Prisoner , 2 ) ;
15238: LD_STRING Prisoner
15240: PPUSH
15241: LD_INT 2
15243: PPUSH
15244: CALL_OW 101
// if mikhailStatus = 3 then
15248: LD_EXP 21
15252: PUSH
15253: LD_INT 3
15255: EQUAL
15256: IFFALSE 15269
// AddMedal ( Prisoner , - 2 ) ;
15258: LD_STRING Prisoner
15260: PPUSH
15261: LD_INT 2
15263: NEG
15264: PPUSH
15265: CALL_OW 101
// GiveMedals ( MAIN ) ;
15269: LD_STRING MAIN
15271: PPUSH
15272: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15276: LD_INT 22
15278: PUSH
15279: LD_INT 1
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 23
15288: PUSH
15289: LD_INT 1
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT 21
15298: PUSH
15299: LD_INT 1
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: LIST
15310: PPUSH
15311: CALL_OW 69
15315: PPUSH
15316: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15320: LD_EXP 1
15324: PPUSH
15325: LD_EXP 33
15329: PUSH
15330: LD_STRING JMM
15332: STR
15333: PPUSH
15334: CALL_OW 38
// if IsOK ( Bobby ) then
15338: LD_EXP 2
15342: PPUSH
15343: CALL_OW 302
15347: IFFALSE 15367
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15349: LD_EXP 2
15353: PPUSH
15354: LD_EXP 33
15358: PUSH
15359: LD_STRING Bobby
15361: STR
15362: PPUSH
15363: CALL_OW 38
// if IsOK ( Cyrus ) then
15367: LD_EXP 3
15371: PPUSH
15372: CALL_OW 302
15376: IFFALSE 15396
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15378: LD_EXP 3
15382: PPUSH
15383: LD_EXP 33
15387: PUSH
15388: LD_STRING Cyrus
15390: STR
15391: PPUSH
15392: CALL_OW 38
// if IsOK ( Lisa ) then
15396: LD_EXP 4
15400: PPUSH
15401: CALL_OW 302
15405: IFFALSE 15425
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15407: LD_EXP 4
15411: PPUSH
15412: LD_EXP 33
15416: PUSH
15417: LD_STRING Lisa
15419: STR
15420: PPUSH
15421: CALL_OW 38
// if IsOK ( Khatam ) then
15425: LD_EXP 5
15429: PPUSH
15430: CALL_OW 302
15434: IFFALSE 15454
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15436: LD_EXP 5
15440: PPUSH
15441: LD_EXP 33
15445: PUSH
15446: LD_STRING Khatam
15448: STR
15449: PPUSH
15450: CALL_OW 38
// if IsOK ( Brian ) then
15454: LD_EXP 6
15458: PPUSH
15459: CALL_OW 302
15463: IFFALSE 15483
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15465: LD_EXP 6
15469: PPUSH
15470: LD_EXP 33
15474: PUSH
15475: LD_STRING Brian
15477: STR
15478: PPUSH
15479: CALL_OW 38
// if IsOk ( Jerry ) then
15483: LD_EXP 7
15487: PPUSH
15488: CALL_OW 302
15492: IFFALSE 15512
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15494: LD_EXP 7
15498: PPUSH
15499: LD_EXP 33
15503: PUSH
15504: LD_STRING Jerry
15506: STR
15507: PPUSH
15508: CALL_OW 38
// if mikhailStatus = 1 then
15512: LD_EXP 21
15516: PUSH
15517: LD_INT 1
15519: EQUAL
15520: IFFALSE 15540
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15522: LD_EXP 8
15526: PPUSH
15527: LD_EXP 33
15531: PUSH
15532: LD_STRING Mikhail
15534: STR
15535: PPUSH
15536: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15540: LD_INT 50
15542: PUSH
15543: EMPTY
15544: LIST
15545: PUSH
15546: LD_INT 22
15548: PUSH
15549: LD_INT 1
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 21
15558: PUSH
15559: LD_INT 1
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: LIST
15570: PPUSH
15571: CALL_OW 69
15575: PUSH
15576: LD_EXP 1
15580: PUSH
15581: LD_EXP 2
15585: PUSH
15586: LD_EXP 3
15590: PUSH
15591: LD_EXP 4
15595: PUSH
15596: LD_EXP 5
15600: PUSH
15601: LD_EXP 6
15605: PUSH
15606: LD_EXP 7
15610: PUSH
15611: LD_EXP 8
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: DIFF
15626: PPUSH
15627: LD_STRING 02_other_survivors
15629: PPUSH
15630: CALL_OW 38
// YouWin ;
15634: CALL_OW 103
// end ;
15638: LD_VAR 0 1
15642: RET
