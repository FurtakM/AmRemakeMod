// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export deadsCounter ; export spotCorpses ; starting begin RuSoldMinLevel = 0 ;
   0: LD_ADDR_EXP 13
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
   8: LD_ADDR_EXP 14
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// hpJMM = 0 ;
  16: LD_ADDR_EXP 10
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpBobby = 0 ;
  24: LD_ADDR_EXP 11
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpCyrus = 0 ;
  32: LD_ADDR_EXP 12
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// cargoEscape = 0 ;
  40: LD_ADDR_EXP 20
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// mikhailStatus = 0 ;
  48: LD_ADDR_EXP 21
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailInBase = 0 ;
  56: LD_ADDR_EXP 22
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailDepot = 0 ;
  64: LD_ADDR_EXP 23
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// lastBattle = 0 ;
  72: LD_ADDR_EXP 27
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// deadsCounter = 0 ;
  80: LD_ADDR_EXP 28
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// spotCorpses = 0 ;
  88: LD_ADDR_EXP 29
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// southBaseDefenders = [ ] ;
  96: LD_ADDR_EXP 25
 100: PUSH
 101: EMPTY
 102: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 103: LD_ADDR_EXP 24
 107: PUSH
 108: EMPTY
 109: ST_TO_ADDR
// attackGroup = [ ] ;
 110: LD_ADDR_EXP 26
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// RandomizeAll ;
 117: CALL_OW 11
// InGameOn ;
 121: CALL_OW 8
// Resetfog ;
 125: CALL_OW 335
// PrepareDifficulty ;
 129: CALL 9395 0 0
// PrepareRussianCommander ;
 133: CALL 10630 0 0
// PrepareSouthBase ;
 137: CALL 10713 0 0
// PrepareNorthBase ;
 141: CALL 11070 0 0
// PrepareOtherRussians ;
 145: CALL 11436 0 0
// PrepareHeroes ;
 149: CALL 9710 0 0
// PrepareLisSquad ;
 153: CALL 9953 0 0
// PrepareOtherAmericans ;
 157: CALL 10197 0 0
// end ; end_of_file
 161: END
// every 1 do var tmp ;
 162: GO 164
 164: DISABLE
 165: LD_INT 0
 167: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 168: LD_EXP 1
 172: PPUSH
 173: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 177: LD_ADDR_VAR 0 1
 181: PUSH
 182: LD_INT 22
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 21
 194: PUSH
 195: LD_INT 1
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: PPUSH
 206: CALL_OW 69
 210: PUSH
 211: LD_EXP 4
 215: PUSH
 216: EMPTY
 217: LIST
 218: DIFF
 219: ST_TO_ADDR
// if Cyrus and Bobby then
 220: LD_EXP 3
 224: PUSH
 225: LD_EXP 2
 229: AND
 230: IFFALSE 560
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 232: LD_EXP 3
 236: PPUSH
 237: LD_INT 43
 239: PPUSH
 240: LD_INT 72
 242: PPUSH
 243: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 247: LD_EXP 2
 251: PPUSH
 252: LD_INT 44
 254: PPUSH
 255: LD_INT 70
 257: PPUSH
 258: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 262: LD_EXP 1
 266: PPUSH
 267: LD_INT 46
 269: PPUSH
 270: LD_INT 73
 272: PPUSH
 273: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 277: LD_EXP 3
 281: PPUSH
 282: LD_STRING D1a-Cyrus-1
 284: PPUSH
 285: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 289: LD_EXP 1
 293: PPUSH
 294: LD_STRING D1a-JMM-1
 296: PPUSH
 297: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 301: LD_EXP 3
 305: PPUSH
 306: LD_INT 37
 308: PPUSH
 309: LD_INT 66
 311: PPUSH
 312: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 316: LD_EXP 2
 320: PPUSH
 321: LD_INT 41
 323: PPUSH
 324: LD_INT 67
 326: PPUSH
 327: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 331: LD_EXP 1
 335: PPUSH
 336: LD_INT 38
 338: PPUSH
 339: LD_INT 64
 341: PPUSH
 342: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 346: LD_EXP 2
 350: PPUSH
 351: LD_STRING D1a-Bobby-2
 353: PPUSH
 354: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 358: LD_EXP 3
 362: PPUSH
 363: LD_INT 35
 365: PPUSH
 366: LD_INT 62
 368: PPUSH
 369: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 373: LD_EXP 2
 377: PPUSH
 378: LD_INT 32
 380: PPUSH
 381: LD_INT 60
 383: PPUSH
 384: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 388: LD_EXP 1
 392: PPUSH
 393: LD_INT 35
 395: PPUSH
 396: LD_INT 60
 398: PPUSH
 399: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 403: LD_EXP 1
 407: PPUSH
 408: LD_STRING D1a-JMM-2
 410: PPUSH
 411: CALL_OW 88
// ComWalk ( Lisa ) ;
 415: LD_EXP 4
 419: PPUSH
 420: CALL_OW 138
// wait ( 0 0$1 ) ;
 424: LD_INT 35
 426: PPUSH
 427: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 431: LD_EXP 4
 435: PPUSH
 436: LD_EXP 1
 440: PPUSH
 441: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 445: LD_EXP 1
 449: PUSH
 450: LD_EXP 3
 454: PUSH
 455: LD_EXP 2
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: LIST
 464: PPUSH
 465: LD_EXP 4
 469: PPUSH
 470: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 474: LD_VAR 0 1
 478: PUSH
 479: LD_INT 1
 481: ARRAY
 482: PPUSH
 483: LD_INT 33
 485: PPUSH
 486: LD_INT 55
 488: PPUSH
 489: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 493: LD_VAR 0 1
 497: PUSH
 498: LD_INT 2
 500: ARRAY
 501: PPUSH
 502: LD_INT 30
 504: PPUSH
 505: LD_INT 54
 507: PPUSH
 508: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 512: LD_VAR 0 1
 516: PUSH
 517: LD_INT 1
 519: ARRAY
 520: PPUSH
 521: LD_EXP 1
 525: PPUSH
 526: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 530: LD_VAR 0 1
 534: PUSH
 535: LD_INT 2
 537: ARRAY
 538: PPUSH
 539: LD_EXP 1
 543: PPUSH
 544: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 548: LD_EXP 4
 552: PPUSH
 553: LD_STRING D1a-Lisa-2
 555: PPUSH
 556: CALL_OW 88
// end ; if Cyrus and not Bobby then
 560: LD_EXP 3
 564: PUSH
 565: LD_EXP 2
 569: NOT
 570: AND
 571: IFFALSE 776
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 573: LD_EXP 3
 577: PPUSH
 578: LD_INT 43
 580: PPUSH
 581: LD_INT 72
 583: PPUSH
 584: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 588: LD_EXP 1
 592: PPUSH
 593: LD_INT 46
 595: PPUSH
 596: LD_INT 73
 598: PPUSH
 599: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 603: LD_EXP 3
 607: PPUSH
 608: LD_STRING D1a-Cyrus-1
 610: PPUSH
 611: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 615: LD_EXP 1
 619: PPUSH
 620: LD_STRING D1a-JMM-1
 622: PPUSH
 623: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 627: LD_EXP 3
 631: PPUSH
 632: LD_INT 37
 634: PPUSH
 635: LD_INT 66
 637: PPUSH
 638: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 642: LD_EXP 1
 646: PPUSH
 647: LD_INT 38
 649: PPUSH
 650: LD_INT 64
 652: PPUSH
 653: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 657: LD_EXP 3
 661: PPUSH
 662: LD_STRING D1a-Cyrus-2
 664: PPUSH
 665: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 669: LD_EXP 3
 673: PPUSH
 674: LD_INT 35
 676: PPUSH
 677: LD_INT 62
 679: PPUSH
 680: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 684: LD_EXP 1
 688: PPUSH
 689: LD_INT 35
 691: PPUSH
 692: LD_INT 60
 694: PPUSH
 695: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 699: LD_EXP 1
 703: PPUSH
 704: LD_STRING D1a-JMM-2
 706: PPUSH
 707: CALL_OW 88
// ComWalk ( Lisa ) ;
 711: LD_EXP 4
 715: PPUSH
 716: CALL_OW 138
// wait ( 0 0$1 ) ;
 720: LD_INT 35
 722: PPUSH
 723: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 727: LD_EXP 4
 731: PPUSH
 732: LD_EXP 1
 736: PPUSH
 737: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 741: LD_EXP 4
 745: PPUSH
 746: LD_STRING D1a-Lisa-2
 748: PPUSH
 749: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 753: LD_EXP 1
 757: PUSH
 758: LD_EXP 3
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: PPUSH
 767: LD_EXP 4
 771: PPUSH
 772: CALL_OW 119
// end ; if not Cyrus and Bobby then
 776: LD_EXP 3
 780: NOT
 781: PUSH
 782: LD_EXP 2
 786: AND
 787: IFFALSE 1066
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 789: LD_EXP 2
 793: PPUSH
 794: LD_INT 44
 796: PPUSH
 797: LD_INT 70
 799: PPUSH
 800: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 804: LD_EXP 1
 808: PPUSH
 809: LD_INT 46
 811: PPUSH
 812: LD_INT 73
 814: PPUSH
 815: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 819: LD_EXP 2
 823: PPUSH
 824: LD_STRING D1a-Bobby-1
 826: PPUSH
 827: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 831: LD_EXP 1
 835: PPUSH
 836: LD_STRING D1a-JMM-1
 838: PPUSH
 839: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 843: LD_EXP 2
 847: PPUSH
 848: LD_INT 37
 850: PPUSH
 851: LD_INT 66
 853: PPUSH
 854: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 858: LD_EXP 1
 862: PPUSH
 863: LD_INT 38
 865: PPUSH
 866: LD_INT 64
 868: PPUSH
 869: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 873: LD_EXP 2
 877: PPUSH
 878: LD_STRING D1a-Bobby-2
 880: PPUSH
 881: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 885: LD_EXP 2
 889: PPUSH
 890: LD_INT 35
 892: PPUSH
 893: LD_INT 62
 895: PPUSH
 896: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 900: LD_EXP 1
 904: PPUSH
 905: LD_INT 35
 907: PPUSH
 908: LD_INT 60
 910: PPUSH
 911: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 915: LD_EXP 1
 919: PPUSH
 920: LD_STRING D1a-JMM-2
 922: PPUSH
 923: CALL_OW 88
// ComWalk ( Lisa ) ;
 927: LD_EXP 4
 931: PPUSH
 932: CALL_OW 138
// wait ( 0 0$1 ) ;
 936: LD_INT 35
 938: PPUSH
 939: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 943: LD_EXP 4
 947: PPUSH
 948: LD_EXP 1
 952: PPUSH
 953: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 957: LD_EXP 1
 961: PUSH
 962: LD_EXP 3
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PPUSH
 971: LD_EXP 4
 975: PPUSH
 976: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 980: LD_VAR 0 1
 984: PUSH
 985: LD_INT 1
 987: ARRAY
 988: PPUSH
 989: LD_INT 33
 991: PPUSH
 992: LD_INT 55
 994: PPUSH
 995: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 999: LD_VAR 0 1
1003: PUSH
1004: LD_INT 2
1006: ARRAY
1007: PPUSH
1008: LD_INT 30
1010: PPUSH
1011: LD_INT 54
1013: PPUSH
1014: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1018: LD_VAR 0 1
1022: PUSH
1023: LD_INT 1
1025: ARRAY
1026: PPUSH
1027: LD_EXP 1
1031: PPUSH
1032: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1036: LD_VAR 0 1
1040: PUSH
1041: LD_INT 2
1043: ARRAY
1044: PPUSH
1045: LD_EXP 1
1049: PPUSH
1050: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1054: LD_EXP 4
1058: PPUSH
1059: LD_STRING D1a-Lisa-2
1061: PPUSH
1062: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1066: LD_EXP 3
1070: NOT
1071: PUSH
1072: LD_EXP 2
1076: NOT
1077: AND
1078: IFFALSE 1292
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1080: LD_EXP 1
1084: PPUSH
1085: LD_INT 37
1087: PPUSH
1088: LD_INT 66
1090: PPUSH
1091: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1095: LD_EXP 1
1099: PPUSH
1100: LD_STRING D1b-JMM-1
1102: PPUSH
1103: CALL_OW 88
// ComCrawl ( JMM ) ;
1107: LD_EXP 1
1111: PPUSH
1112: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1116: LD_EXP 1
1120: PPUSH
1121: LD_INT 35
1123: PPUSH
1124: LD_INT 60
1126: PPUSH
1127: CALL_OW 171
// wait ( 0 0$8 ) ;
1131: LD_INT 280
1133: PPUSH
1134: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1138: LD_EXP 1
1142: PPUSH
1143: LD_STRING D1b-JMM-1a
1145: PPUSH
1146: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1150: LD_EXP 1
1154: PUSH
1155: LD_EXP 4
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: PPUSH
1164: CALL_OW 138
// wait ( 0 0$1 ) ;
1168: LD_INT 35
1170: PPUSH
1171: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1175: LD_EXP 4
1179: PPUSH
1180: LD_EXP 1
1184: PPUSH
1185: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1189: LD_EXP 1
1193: PUSH
1194: EMPTY
1195: LIST
1196: PPUSH
1197: LD_EXP 4
1201: PPUSH
1202: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1206: LD_VAR 0 1
1210: PUSH
1211: LD_INT 1
1213: ARRAY
1214: PPUSH
1215: LD_INT 33
1217: PPUSH
1218: LD_INT 55
1220: PPUSH
1221: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1225: LD_VAR 0 1
1229: PUSH
1230: LD_INT 2
1232: ARRAY
1233: PPUSH
1234: LD_INT 30
1236: PPUSH
1237: LD_INT 54
1239: PPUSH
1240: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1244: LD_VAR 0 1
1248: PUSH
1249: LD_INT 1
1251: ARRAY
1252: PPUSH
1253: LD_EXP 1
1257: PPUSH
1258: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1262: LD_VAR 0 1
1266: PUSH
1267: LD_INT 2
1269: ARRAY
1270: PPUSH
1271: LD_EXP 1
1275: PPUSH
1276: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1280: LD_EXP 4
1284: PPUSH
1285: LD_STRING D1b-Lisa-1
1287: PPUSH
1288: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1292: LD_EXP 1
1296: PPUSH
1297: LD_STRING D1-JMM-1
1299: PPUSH
1300: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1304: LD_EXP 4
1308: PPUSH
1309: LD_STRING D1-Lisa-1
1311: PPUSH
1312: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1316: LD_EXP 1
1320: PPUSH
1321: LD_STRING D1-JMM-2
1323: PPUSH
1324: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1328: LD_EXP 9
1332: PPUSH
1333: LD_STRING D1-Pow-2
1335: PPUSH
1336: CALL_OW 94
// if Cyrus then
1340: LD_EXP 3
1344: IFFALSE 1370
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1346: LD_EXP 3
1350: PPUSH
1351: LD_STRING D1-Cyrus-2
1353: PPUSH
1354: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1358: LD_EXP 1
1362: PPUSH
1363: LD_STRING D1-JMM-3
1365: PPUSH
1366: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1370: LD_EXP 9
1374: PPUSH
1375: LD_STRING D1-Pow-3
1377: PPUSH
1378: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1382: LD_EXP 1
1386: PPUSH
1387: LD_STRING D1-JMM-4
1389: PPUSH
1390: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1394: LD_EXP 9
1398: PPUSH
1399: LD_STRING D1-Pow-4
1401: PPUSH
1402: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1406: LD_EXP 9
1410: PPUSH
1411: LD_STRING D1-Pow-4a
1413: PPUSH
1414: CALL_OW 94
// if Cyrus then
1418: LD_EXP 3
1422: IFFALSE 1436
// Say ( Cyrus , D1-Cyrus-4 ) ;
1424: LD_EXP 3
1428: PPUSH
1429: LD_STRING D1-Cyrus-4
1431: PPUSH
1432: CALL_OW 88
// if Bobby then
1436: LD_EXP 2
1440: IFFALSE 1478
// begin Say ( Bobby , D1-Bobby-4 ) ;
1442: LD_EXP 2
1446: PPUSH
1447: LD_STRING D1-Bobby-4
1449: PPUSH
1450: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1454: LD_EXP 4
1458: PPUSH
1459: LD_STRING D1-Lisa-4
1461: PPUSH
1462: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1466: LD_EXP 1
1470: PPUSH
1471: LD_STRING D1-JMM-5
1473: PPUSH
1474: CALL_OW 88
// end ; InGameOff ;
1478: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1482: LD_INT 22
1484: PUSH
1485: LD_INT 4
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_EXP 6
1501: PUSH
1502: LD_EXP 7
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: DIFF
1511: PPUSH
1512: LD_INT 1
1514: PPUSH
1515: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1519: LD_STRING M1
1521: PPUSH
1522: CALL_OW 337
// SaveForQuickRestart ;
1526: CALL_OW 22
// end ;
1530: PPOPN 1
1532: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1533: LD_INT 7
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 1
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: PUSH
1551: LD_INT 0
1553: GREATER
1554: IFFALSE 1924
1556: GO 1558
1558: DISABLE
// begin InGameOn ;
1559: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1563: LD_INT 22
1565: PUSH
1566: LD_INT 1
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 21
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PPUSH
1587: CALL_OW 69
1591: PPUSH
1592: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1596: LD_INT 24
1598: PPUSH
1599: LD_INT 32
1601: PPUSH
1602: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1606: LD_EXP 5
1610: PPUSH
1611: LD_INT 4
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1621: LD_EXP 5
1625: PPUSH
1626: LD_INT 4
1628: PPUSH
1629: CALL_OW 336
// wait ( 0 0$1 ) ;
1633: LD_INT 35
1635: PPUSH
1636: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1640: LD_EXP 5
1644: PPUSH
1645: LD_INT 27
1647: PPUSH
1648: LD_INT 38
1650: PPUSH
1651: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1655: LD_EXP 5
1659: PPUSH
1660: LD_EXP 1
1664: PPUSH
1665: CALL_OW 179
// wait ( 0 0$1 ) ;
1669: LD_INT 35
1671: PPUSH
1672: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1676: LD_EXP 5
1680: PPUSH
1681: LD_STRING D2a-Khat-1
1683: PPUSH
1684: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1688: LD_EXP 1
1692: PPUSH
1693: LD_STRING D2a-JMM-1
1695: PPUSH
1696: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1700: LD_EXP 5
1704: PPUSH
1705: LD_STRING D2a-Khat-2
1707: PPUSH
1708: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1712: LD_EXP 1
1716: PPUSH
1717: LD_STRING D2a-JMM-2
1719: PPUSH
1720: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1724: LD_EXP 5
1728: PPUSH
1729: LD_STRING D2a-Khat-3
1731: PPUSH
1732: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1736: LD_EXP 1
1740: PPUSH
1741: LD_STRING D2a-JMM-3
1743: PPUSH
1744: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1748: LD_EXP 5
1752: PPUSH
1753: LD_STRING D2a-Khat-4
1755: PPUSH
1756: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1760: LD_EXP 1
1764: PPUSH
1765: LD_STRING D2a-JMM-4
1767: PPUSH
1768: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1772: LD_EXP 5
1776: PPUSH
1777: LD_STRING D2a-Khat-5
1779: PPUSH
1780: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1784: LD_EXP 1
1788: PPUSH
1789: LD_STRING D2a-JMM-5
1791: PPUSH
1792: CALL_OW 88
// InGameOff ;
1796: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1800: LD_INT 22
1802: PUSH
1803: LD_INT 1
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: LD_INT 21
1812: PUSH
1813: LD_INT 1
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: PUSH
1820: LD_INT 3
1822: PUSH
1823: LD_INT 24
1825: PUSH
1826: LD_INT 800
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: PPUSH
1842: CALL_OW 69
1846: PUSH
1847: LD_INT 0
1849: GREATER
1850: IFFALSE 1924
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1852: LD_EXP 5
1856: PPUSH
1857: LD_INT 22
1859: PUSH
1860: LD_INT 1
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PUSH
1867: LD_INT 21
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 3
1879: PUSH
1880: LD_INT 24
1882: PUSH
1883: LD_INT 1000
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PPUSH
1899: CALL_OW 69
1903: PUSH
1904: LD_INT 1
1906: ARRAY
1907: PPUSH
1908: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1912: LD_EXP 5
1916: PPUSH
1917: LD_STRING D2b-Khat-1
1919: PPUSH
1920: CALL_OW 88
// end ; end ;
1924: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
1925: LD_INT 15
1927: PPUSH
1928: LD_INT 22
1930: PUSH
1931: LD_INT 1
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PPUSH
1938: CALL_OW 70
1942: PUSH
1943: LD_INT 0
1945: GREATER
1946: IFFALSE 3018
1948: GO 1950
1950: DISABLE
1951: LD_INT 0
1953: PPUSH
1954: PPUSH
1955: PPUSH
1956: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: LD_INT 999
1964: PUSH
1965: LD_INT 999
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: EMPTY
1973: LIST
1974: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
1975: LD_ADDR_VAR 0 4
1979: PUSH
1980: LD_INT 22
1982: PUSH
1983: LD_INT 1
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 21
1992: PUSH
1993: LD_INT 1
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: PPUSH
2004: CALL_OW 69
2008: PUSH
2009: LD_EXP 1
2013: PUSH
2014: LD_EXP 2
2018: PUSH
2019: LD_EXP 3
2023: PUSH
2024: LD_EXP 4
2028: PUSH
2029: LD_EXP 5
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: DIFF
2041: ST_TO_ADDR
// PrepareDeadSoldiers ;
2042: CALL 10355 0 0
// spotCorpses = 1 ;
2046: LD_ADDR_EXP 29
2050: PUSH
2051: LD_INT 1
2053: ST_TO_ADDR
// InGameOn ;
2054: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2058: LD_INT 23
2060: PPUSH
2061: LD_INT 12
2063: PPUSH
2064: CALL_OW 84
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] ] ) , 23 , 12 ) ;
2068: LD_INT 22
2070: PUSH
2071: LD_INT 1
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: PUSH
2078: EMPTY
2079: LIST
2080: PPUSH
2081: CALL_OW 69
2085: PPUSH
2086: LD_INT 23
2088: PPUSH
2089: LD_INT 12
2091: PPUSH
2092: CALL_OW 111
// min = distanceTab [ 1 ] [ 2 ] ;
2096: LD_ADDR_VAR 0 3
2100: PUSH
2101: LD_VAR 0 2
2105: PUSH
2106: LD_INT 1
2108: ARRAY
2109: PUSH
2110: LD_INT 2
2112: ARRAY
2113: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2114: LD_ADDR_VAR 0 1
2118: PUSH
2119: LD_INT 22
2121: PUSH
2122: LD_INT 1
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 21
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 69
2147: PUSH
2148: LD_EXP 1
2152: PUSH
2153: LD_EXP 5
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: DIFF
2162: PUSH
2163: FOR_IN
2164: IFFALSE 2215
// if IsOK ( i ) then
2166: LD_VAR 0 1
2170: PPUSH
2171: CALL_OW 302
2175: IFFALSE 2213
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: LD_VAR 0 2
2186: PUSH
2187: LD_VAR 0 1
2191: PUSH
2192: LD_VAR 0 1
2196: PPUSH
2197: LD_INT 16
2199: PPUSH
2200: CALL_OW 299
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PUSH
2209: EMPTY
2210: LIST
2211: ADD
2212: ST_TO_ADDR
2213: GO 2163
2215: POP
2216: POP
// for i = 2 to distanceTab do
2217: LD_ADDR_VAR 0 1
2221: PUSH
2222: DOUBLE
2223: LD_INT 2
2225: DEC
2226: ST_TO_ADDR
2227: LD_VAR 0 2
2231: PUSH
2232: FOR_TO
2233: IFFALSE 2279
// if distanceTab [ i ] [ 2 ] < min then
2235: LD_VAR 0 2
2239: PUSH
2240: LD_VAR 0 1
2244: ARRAY
2245: PUSH
2246: LD_INT 2
2248: ARRAY
2249: PUSH
2250: LD_VAR 0 3
2254: LESS
2255: IFFALSE 2277
// min = distanceTab [ i ] [ 2 ] ;
2257: LD_ADDR_VAR 0 3
2261: PUSH
2262: LD_VAR 0 2
2266: PUSH
2267: LD_VAR 0 1
2271: ARRAY
2272: PUSH
2273: LD_INT 2
2275: ARRAY
2276: ST_TO_ADDR
2277: GO 2232
2279: POP
2280: POP
// for i = 2 to distanceTab do
2281: LD_ADDR_VAR 0 1
2285: PUSH
2286: DOUBLE
2287: LD_INT 2
2289: DEC
2290: ST_TO_ADDR
2291: LD_VAR 0 2
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2683
// begin if distanceTab [ i ] [ 2 ] = min then
2299: LD_VAR 0 2
2303: PUSH
2304: LD_VAR 0 1
2308: ARRAY
2309: PUSH
2310: LD_INT 2
2312: ARRAY
2313: PUSH
2314: LD_VAR 0 3
2318: EQUAL
2319: IFFALSE 2681
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2321: LD_VAR 0 2
2325: PUSH
2326: LD_VAR 0 1
2330: ARRAY
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PUSH
2336: LD_EXP 2
2340: EQUAL
2341: IFFALSE 2355
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2343: LD_EXP 2
2347: PPUSH
2348: LD_STRING DCorpses-Bobby-1
2350: PPUSH
2351: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2355: LD_VAR 0 2
2359: PUSH
2360: LD_VAR 0 1
2364: ARRAY
2365: PUSH
2366: LD_INT 1
2368: ARRAY
2369: PUSH
2370: LD_EXP 3
2374: EQUAL
2375: IFFALSE 2389
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2377: LD_EXP 3
2381: PPUSH
2382: LD_STRING DCorpses-Cyrus-1
2384: PPUSH
2385: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2389: LD_VAR 0 2
2393: PUSH
2394: LD_VAR 0 1
2398: ARRAY
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: PUSH
2404: LD_EXP 4
2408: EQUAL
2409: IFFALSE 2423
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2411: LD_EXP 4
2415: PPUSH
2416: LD_STRING DCorpses-Lisa-1
2418: PPUSH
2419: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 1
2432: ARRAY
2433: PUSH
2434: LD_INT 1
2436: ARRAY
2437: PUSH
2438: LD_VAR 0 4
2442: PUSH
2443: LD_INT 1
2445: ARRAY
2446: EQUAL
2447: PUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: ARRAY
2456: PPUSH
2457: CALL_OW 258
2461: PUSH
2462: LD_INT 1
2464: EQUAL
2465: AND
2466: IFFALSE 2484
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2468: LD_VAR 0 4
2472: PUSH
2473: LD_INT 1
2475: ARRAY
2476: PPUSH
2477: LD_STRING DCorpses-Sol1-1
2479: PPUSH
2480: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2484: LD_VAR 0 2
2488: PUSH
2489: LD_VAR 0 1
2493: ARRAY
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: PUSH
2499: LD_VAR 0 4
2503: PUSH
2504: LD_INT 1
2506: ARRAY
2507: EQUAL
2508: PUSH
2509: LD_VAR 0 4
2513: PUSH
2514: LD_INT 1
2516: ARRAY
2517: PPUSH
2518: CALL_OW 258
2522: PUSH
2523: LD_INT 2
2525: EQUAL
2526: AND
2527: IFFALSE 2545
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2529: LD_VAR 0 4
2533: PUSH
2534: LD_INT 1
2536: ARRAY
2537: PPUSH
2538: LD_STRING DCorpses-FSol1-1
2540: PPUSH
2541: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2545: LD_VAR 0 2
2549: PUSH
2550: LD_VAR 0 1
2554: ARRAY
2555: PUSH
2556: LD_INT 1
2558: ARRAY
2559: PUSH
2560: LD_VAR 0 4
2564: PUSH
2565: LD_INT 2
2567: ARRAY
2568: EQUAL
2569: PUSH
2570: LD_VAR 0 4
2574: PUSH
2575: LD_INT 2
2577: ARRAY
2578: PPUSH
2579: CALL_OW 258
2583: PUSH
2584: LD_INT 1
2586: EQUAL
2587: AND
2588: IFFALSE 2606
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 2
2597: ARRAY
2598: PPUSH
2599: LD_STRING DCorpses-Sol1-1
2601: PPUSH
2602: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2606: LD_VAR 0 2
2610: PUSH
2611: LD_VAR 0 1
2615: ARRAY
2616: PUSH
2617: LD_INT 1
2619: ARRAY
2620: PUSH
2621: LD_VAR 0 4
2625: PUSH
2626: LD_INT 2
2628: ARRAY
2629: EQUAL
2630: PUSH
2631: LD_VAR 0 4
2635: PUSH
2636: LD_INT 2
2638: ARRAY
2639: PPUSH
2640: CALL_OW 258
2644: PUSH
2645: LD_INT 2
2647: EQUAL
2648: AND
2649: IFFALSE 2667
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2651: LD_VAR 0 4
2655: PUSH
2656: LD_INT 2
2658: ARRAY
2659: PPUSH
2660: LD_STRING DCorpses-FSol1-1
2662: PPUSH
2663: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2667: LD_EXP 30
2671: PPUSH
2672: LD_INT 150
2674: PPUSH
2675: CALL_OW 234
// break ;
2679: GO 2683
// end ; end ;
2681: GO 2296
2683: POP
2684: POP
// repeat wait ( 0 0$1 ) ;
2685: LD_INT 35
2687: PPUSH
2688: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2692: LD_ADDR_VAR 0 1
2696: PUSH
2697: LD_INT 22
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 21
2709: PUSH
2710: LD_INT 1
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PPUSH
2721: CALL_OW 69
2725: PUSH
2726: LD_EXP 1
2730: PUSH
2731: EMPTY
2732: LIST
2733: DIFF
2734: PUSH
2735: FOR_IN
2736: IFFALSE 2806
// begin ComMoveToArea ( i , DeadCutscene ) ;
2738: LD_VAR 0 1
2742: PPUSH
2743: LD_INT 28
2745: PPUSH
2746: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2750: LD_EXP 1
2754: PPUSH
2755: LD_INT 30
2757: PPUSH
2758: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2762: LD_VAR 0 1
2766: PPUSH
2767: LD_INT 23
2769: PPUSH
2770: LD_INT 11
2772: PPUSH
2773: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2777: LD_EXP 1
2781: PPUSH
2782: LD_INT 23
2784: PPUSH
2785: LD_INT 11
2787: PPUSH
2788: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2792: LD_EXP 30
2796: PPUSH
2797: LD_INT 250
2799: PPUSH
2800: CALL_OW 234
// end ;
2804: GO 2735
2806: POP
2807: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2808: LD_EXP 1
2812: PPUSH
2813: LD_INT 30
2815: PPUSH
2816: CALL_OW 308
2820: IFFALSE 2685
// wait ( 0 0$3 ) ;
2822: LD_INT 105
2824: PPUSH
2825: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2829: LD_EXP 1
2833: PPUSH
2834: LD_STRING DCorpses-JMM-1
2836: PPUSH
2837: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2841: LD_EXP 30
2845: PPUSH
2846: LD_INT 150
2848: PPUSH
2849: CALL_OW 234
// if IsOK ( Khatam ) then
2853: LD_EXP 5
2857: PPUSH
2858: CALL_OW 302
2862: IFFALSE 3002
// begin repeat wait ( 0 0$1 ) ;
2864: LD_INT 35
2866: PPUSH
2867: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
2871: LD_EXP 5
2875: PPUSH
2876: LD_EXP 30
2880: PPUSH
2881: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
2885: LD_EXP 5
2889: PPUSH
2890: LD_EXP 30
2894: PPUSH
2895: CALL_OW 296
2899: PUSH
2900: LD_INT 2
2902: LESS
2903: IFFALSE 2864
// spotCorpses = 0 ;
2905: LD_ADDR_EXP 29
2909: PUSH
2910: LD_INT 0
2912: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
2913: LD_EXP 30
2917: PPUSH
2918: LD_INT 10
2920: PPUSH
2921: CALL_OW 234
// wait ( 0 0$3 ) ;
2925: LD_INT 105
2927: PPUSH
2928: CALL_OW 67
// SetLives ( DyingSold , 0 ) ;
2932: LD_EXP 30
2936: PPUSH
2937: LD_INT 0
2939: PPUSH
2940: CALL_OW 234
// wait ( 0 0$1 ) ;
2944: LD_INT 35
2946: PPUSH
2947: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
2951: LD_EXP 1
2955: PUSH
2956: LD_EXP 5
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PPUSH
2965: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
2969: LD_EXP 5
2973: PPUSH
2974: LD_EXP 1
2978: PPUSH
2979: CALL_OW 119
// wait ( 0 0$1 ) ;
2983: LD_INT 35
2985: PPUSH
2986: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
2990: LD_EXP 5
2994: PPUSH
2995: LD_STRING DCorpses-Khat-1
2997: PPUSH
2998: CALL_OW 88
// end ; InGameOff ;
3002: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3006: LD_EXP 1
3010: PPUSH
3011: LD_STRING DCorpses-JMM-2
3013: PPUSH
3014: CALL_OW 88
// end ;
3018: PPOPN 4
3020: END
// every 0 0$1 trigger spotCorpses = 1 do
3021: LD_EXP 29
3025: PUSH
3026: LD_INT 1
3028: EQUAL
3029: IFFALSE 3047
3031: GO 3033
3033: DISABLE
// begin enable ;
3034: ENABLE
// SetLives ( DyingSold , 150 ) ;
3035: LD_EXP 30
3039: PPUSH
3040: LD_INT 150
3042: PPUSH
3043: CALL_OW 234
// end ;
3047: END
// every 1 trigger FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do var i ;
3048: LD_INT 8
3050: PPUSH
3051: LD_INT 22
3053: PUSH
3054: LD_INT 1
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PPUSH
3061: CALL_OW 70
3065: PUSH
3066: LD_INT 0
3068: GREATER
3069: PUSH
3070: LD_INT 1
3072: PPUSH
3073: CALL_OW 255
3077: PUSH
3078: LD_INT 1
3080: EQUAL
3081: NOT
3082: AND
3083: PUSH
3084: LD_INT 10
3086: PPUSH
3087: CALL_OW 255
3091: PUSH
3092: LD_INT 1
3094: EQUAL
3095: NOT
3096: AND
3097: IFFALSE 3349
3099: GO 3101
3101: DISABLE
3102: LD_INT 0
3104: PPUSH
// begin InGameOn ;
3105: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3109: LD_EXP 7
3113: PPUSH
3114: LD_INT 250
3116: PPUSH
3117: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3121: LD_INT 3
3123: PPUSH
3124: LD_INT 4
3126: PPUSH
3127: LD_INT 2
3129: PPUSH
3130: LD_INT 1
3132: PPUSH
3133: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3137: LD_EXP 6
3141: PUSH
3142: LD_EXP 7
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3155: LD_ADDR_VAR 0 1
3159: PUSH
3160: LD_INT 9
3162: PPUSH
3163: LD_INT 22
3165: PUSH
3166: LD_INT 3
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: PPUSH
3173: CALL_OW 70
3177: PUSH
3178: FOR_IN
3179: IFFALSE 3192
// ComFree ( i ) ;
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 139
3190: GO 3178
3192: POP
3193: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3194: LD_ADDR_VAR 0 1
3198: PUSH
3199: LD_INT 22
3201: PUSH
3202: LD_INT 4
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PPUSH
3209: CALL_OW 69
3213: PUSH
3214: FOR_IN
3215: IFFALSE 3228
// ComFree ( i ) ;
3217: LD_VAR 0 1
3221: PPUSH
3222: CALL_OW 139
3226: GO 3214
3228: POP
3229: POP
// wait ( 0 0$1 ) ;
3230: LD_INT 35
3232: PPUSH
3233: CALL_OW 67
// InGameOff ;
3237: CALL_OW 9
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) ) ] , DF-Sol1-1 ) ;
3241: LD_INT 22
3243: PUSH
3244: LD_INT 1
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: PUSH
3251: LD_INT 21
3253: PUSH
3254: LD_INT 1
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 26
3263: PUSH
3264: LD_INT 1
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: LIST
3275: PPUSH
3276: CALL_OW 69
3280: PUSH
3281: LD_INT 2
3283: PPUSH
3284: LD_INT 22
3286: PUSH
3287: LD_INT 1
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: LD_INT 21
3296: PUSH
3297: LD_INT 1
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 26
3306: PUSH
3307: LD_INT 1
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: LIST
3318: PPUSH
3319: CALL_OW 69
3323: PPUSH
3324: CALL_OW 12
3328: ARRAY
3329: PPUSH
3330: LD_STRING DF-Sol1-1
3332: PPUSH
3333: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3337: LD_EXP 1
3341: PPUSH
3342: LD_STRING DF-JMM-1
3344: PPUSH
3345: CALL_OW 88
// end ;
3349: PPOPN 1
3351: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do
3352: LD_INT 19
3354: PPUSH
3355: LD_INT 22
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PPUSH
3365: CALL_OW 70
3369: PUSH
3370: LD_INT 0
3372: EQUAL
3373: PUSH
3374: LD_INT 1
3376: PPUSH
3377: CALL_OW 255
3381: PUSH
3382: LD_INT 1
3384: EQUAL
3385: NOT
3386: AND
3387: PUSH
3388: LD_INT 10
3390: PPUSH
3391: CALL_OW 255
3395: PUSH
3396: LD_INT 1
3398: EQUAL
3399: NOT
3400: AND
3401: IFFALSE 3514
3403: GO 3405
3405: DISABLE
// begin if not IsDead ( Brian ) then
3406: LD_EXP 6
3410: PPUSH
3411: CALL_OW 301
3415: NOT
3416: IFFALSE 3430
// SetSide ( Brian , 1 ) ;
3418: LD_EXP 6
3422: PPUSH
3423: LD_INT 1
3425: PPUSH
3426: CALL_OW 235
// if not IsDead ( Jerry ) then
3430: LD_EXP 7
3434: PPUSH
3435: CALL_OW 301
3439: NOT
3440: IFFALSE 3454
// SetSide ( Jerry , 1 ) ;
3442: LD_EXP 7
3446: PPUSH
3447: LD_INT 1
3449: PPUSH
3450: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3454: LD_INT 22
3456: PUSH
3457: LD_INT 1
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: PUSH
3464: LD_INT 25
3466: PUSH
3467: LD_INT 4
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: PPUSH
3478: CALL_OW 69
3482: PUSH
3483: LD_INT 0
3485: GREATER
3486: IFFALSE 3502
// begin Say ( JMM , DFa-JMM-1 ) ;
3488: LD_EXP 1
3492: PPUSH
3493: LD_STRING DFa-JMM-1
3495: PPUSH
3496: CALL_OW 88
// end else
3500: GO 3514
// begin Say ( JMM , DFa-JMM-1a ) ;
3502: LD_EXP 1
3506: PPUSH
3507: LD_STRING DFa-JMM-1a
3509: PPUSH
3510: CALL_OW 88
// end ; end ;
3514: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3515: LD_INT 19
3517: PPUSH
3518: LD_INT 22
3520: PUSH
3521: LD_INT 3
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PPUSH
3528: CALL_OW 70
3532: PUSH
3533: LD_INT 0
3535: EQUAL
3536: PUSH
3537: LD_EXP 6
3541: PPUSH
3542: CALL_OW 302
3546: NOT
3547: AND
3548: IFFALSE 3625
3550: GO 3552
3552: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3553: LD_INT 35
3555: PPUSH
3556: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3560: LD_EXP 6
3564: PPUSH
3565: CALL_OW 256
3569: PUSH
3570: LD_INT 250
3572: GREATER
3573: IFFALSE 3553
// Say ( Brian , DFb-Sol1-1 ) ;
3575: LD_EXP 6
3579: PPUSH
3580: LD_STRING DFb-Sol1-1
3582: PPUSH
3583: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3587: LD_EXP 6
3591: PPUSH
3592: LD_INT 78
3594: PPUSH
3595: LD_INT 74
3597: PPUSH
3598: CALL_OW 111
// if IsDead ( Jerry ) then
3602: LD_EXP 7
3606: PPUSH
3607: CALL_OW 301
3611: IFFALSE 3625
// Say ( Brian , DFb-Sol1-1a ) end ;
3613: LD_EXP 6
3617: PPUSH
3618: LD_STRING DFb-Sol1-1a
3620: PPUSH
3621: CALL_OW 88
3625: END
// every 0 0$1 do var i ;
3626: GO 3628
3628: DISABLE
3629: LD_INT 0
3631: PPUSH
// begin enable ;
3632: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3633: LD_ADDR_VAR 0 1
3637: PUSH
3638: LD_INT 22
3640: PUSH
3641: LD_INT 3
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PUSH
3648: LD_INT 21
3650: PUSH
3651: LD_INT 3
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PUSH
3658: LD_INT 30
3660: PUSH
3661: LD_INT 31
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: LIST
3672: PPUSH
3673: CALL_OW 69
3677: PUSH
3678: FOR_IN
3679: IFFALSE 3710
// begin if See ( 1 , i ) then
3681: LD_INT 1
3683: PPUSH
3684: LD_VAR 0 1
3688: PPUSH
3689: CALL_OW 292
3693: IFFALSE 3708
// begin disable ;
3695: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3696: LD_EXP 1
3700: PPUSH
3701: LD_STRING DX1-JMM-1
3703: PPUSH
3704: CALL_OW 88
// end ; end ;
3708: GO 3678
3710: POP
3711: POP
// end ;
3712: PPOPN 1
3714: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 11
3720: PPUSH
3721: CALL_OW 294
3725: IFFALSE 4088
3727: GO 3729
3729: DISABLE
3730: LD_INT 0
3732: PPUSH
3733: PPUSH
// begin DialogueOn ;
3734: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3738: LD_INT 11
3740: PPUSH
3741: LD_INT 22
3743: PUSH
3744: LD_INT 3
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 21
3753: PUSH
3754: LD_INT 1
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: PPUSH
3765: CALL_OW 70
3769: PUSH
3770: LD_INT 1
3772: ARRAY
3773: PPUSH
3774: LD_STRING DX3-Rus1-1
3776: PPUSH
3777: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3781: LD_EXP 1
3785: PPUSH
3786: LD_STRING DX3-JMM-1
3788: PPUSH
3789: CALL_OW 88
// DialogueOff ;
3793: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3797: LD_ADDR_VAR 0 1
3801: PUSH
3802: LD_INT 11
3804: PPUSH
3805: LD_INT 22
3807: PUSH
3808: LD_INT 3
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: LD_INT 21
3817: PUSH
3818: LD_INT 1
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: PPUSH
3829: CALL_OW 70
3833: PUSH
3834: FOR_IN
3835: IFFALSE 3855
// southBaseDefenders = southBaseDefenders ^ i ;
3837: LD_ADDR_EXP 25
3841: PUSH
3842: LD_EXP 25
3846: PUSH
3847: LD_VAR 0 1
3851: ADD
3852: ST_TO_ADDR
3853: GO 3834
3855: POP
3856: POP
// wait ( [ 0 0$10 , 0 0$15 , 0 0$20 ] [ Difficulty ] ) ;
3857: LD_INT 350
3859: PUSH
3860: LD_INT 525
3862: PUSH
3863: LD_INT 700
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: LIST
3870: PUSH
3871: LD_OWVAR 67
3875: ARRAY
3876: PPUSH
3877: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3881: LD_INT 35
3883: PPUSH
3884: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
3888: LD_ADDR_VAR 0 1
3892: PUSH
3893: LD_INT 22
3895: PUSH
3896: LD_INT 3
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: PUSH
3903: LD_INT 21
3905: PUSH
3906: LD_INT 2
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: LD_INT 58
3915: PUSH
3916: EMPTY
3917: LIST
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: LIST
3923: PPUSH
3924: CALL_OW 69
3928: PUSH
3929: FOR_IN
3930: IFFALSE 4000
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
3932: LD_ADDR_VAR 0 2
3936: PUSH
3937: LD_INT 22
3939: PUSH
3940: LD_INT 3
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: PUSH
3947: LD_INT 21
3949: PUSH
3950: LD_INT 1
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: PUSH
3957: LD_INT 25
3959: PUSH
3960: LD_INT 3
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: LIST
3971: PPUSH
3972: CALL_OW 69
3976: PUSH
3977: FOR_IN
3978: IFFALSE 3996
// begin ComEnterUnit ( j , i ) ;
3980: LD_VAR 0 2
3984: PPUSH
3985: LD_VAR 0 1
3989: PPUSH
3990: CALL_OW 120
// end ;
3994: GO 3977
3996: POP
3997: POP
// end ;
3998: GO 3929
4000: POP
4001: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4002: LD_INT 22
4004: PUSH
4005: LD_INT 3
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_INT 21
4014: PUSH
4015: LD_INT 2
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: LD_INT 58
4024: PUSH
4025: EMPTY
4026: LIST
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: PPUSH
4033: CALL_OW 69
4037: PUSH
4038: LD_INT 0
4040: EQUAL
4041: PUSH
4042: LD_INT 22
4044: PUSH
4045: LD_INT 3
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: PUSH
4052: LD_INT 21
4054: PUSH
4055: LD_INT 1
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 3
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: LIST
4076: PPUSH
4077: CALL_OW 69
4081: PUSH
4082: LD_INT 0
4084: EQUAL
4085: OR
4086: IFFALSE 3881
// end ;
4088: PPOPN 2
4090: END
// every 0 0$1 trigger FilterUnitsInArea ( SouthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 do
4091: LD_INT 23
4093: PPUSH
4094: LD_INT 22
4096: PUSH
4097: LD_INT 3
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: LD_INT 21
4106: PUSH
4107: LD_INT 1
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 25
4116: PUSH
4117: LD_INT 3
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: LIST
4128: PPUSH
4129: CALL_OW 70
4133: PUSH
4134: LD_INT 0
4136: EQUAL
4137: IFFALSE 4191
4139: GO 4141
4141: DISABLE
// begin if IsOK ( Bobby ) then
4142: LD_EXP 2
4146: PPUSH
4147: CALL_OW 302
4151: IFFALSE 4179
// begin Say ( Bobby , DX2-Bobby-1 ) ;
4153: LD_EXP 2
4157: PPUSH
4158: LD_STRING DX2-Bobby-1
4160: PPUSH
4161: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4165: LD_EXP 1
4169: PPUSH
4170: LD_STRING DX2-JMM-1a
4172: PPUSH
4173: CALL_OW 88
// end else
4177: GO 4191
// begin Say ( JMM , DX2-JMM-1 ) ;
4179: LD_EXP 1
4183: PPUSH
4184: LD_STRING DX2-JMM-1
4186: PPUSH
4187: CALL_OW 88
// end ; end ;
4191: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4192: LD_INT 22
4194: PUSH
4195: LD_INT 1
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PUSH
4202: LD_INT 23
4204: PUSH
4205: LD_INT 3
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 21
4214: PUSH
4215: LD_INT 2
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PUSH
4222: LD_INT 34
4224: PUSH
4225: LD_INT 42
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 69
4242: PUSH
4243: LD_INT 1
4245: GREATEREQUAL
4246: IFFALSE 4689
4248: GO 4250
4250: DISABLE
4251: LD_INT 0
4253: PPUSH
4254: PPUSH
4255: PPUSH
4256: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4257: LD_ADDR_VAR 0 1
4261: PUSH
4262: LD_INT 22
4264: PUSH
4265: LD_INT 1
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: PUSH
4272: LD_INT 23
4274: PUSH
4275: LD_INT 3
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 21
4284: PUSH
4285: LD_INT 2
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PUSH
4292: LD_INT 34
4294: PUSH
4295: LD_INT 42
4297: PUSH
4298: EMPTY
4299: LIST
4300: LIST
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: PPUSH
4308: CALL_OW 69
4312: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4313: LD_ADDR_VAR 0 2
4317: PUSH
4318: LD_INT 22
4320: PUSH
4321: LD_INT 1
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: PUSH
4328: LD_INT 21
4330: PUSH
4331: LD_INT 1
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: PUSH
4338: LD_INT 26
4340: PUSH
4341: LD_INT 1
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: LIST
4352: PPUSH
4353: CALL_OW 69
4357: PUSH
4358: LD_EXP 1
4362: PUSH
4363: LD_EXP 3
4367: PUSH
4368: LD_EXP 2
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: DIFF
4378: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4379: LD_ADDR_VAR 0 3
4383: PUSH
4384: LD_INT 22
4386: PUSH
4387: LD_INT 1
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: PUSH
4394: LD_INT 21
4396: PUSH
4397: LD_INT 1
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PUSH
4404: LD_INT 26
4406: PUSH
4407: LD_INT 2
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: LIST
4418: PPUSH
4419: CALL_OW 69
4423: PUSH
4424: LD_EXP 4
4428: PUSH
4429: EMPTY
4430: LIST
4431: DIFF
4432: ST_TO_ADDR
// Say ( JMM , DX2a-JMM-1 ) ;
4433: LD_EXP 1
4437: PPUSH
4438: LD_STRING DX2a-JMM-1
4440: PPUSH
4441: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4445: LD_EXP 2
4449: PPUSH
4450: CALL_OW 310
4454: PUSH
4455: LD_VAR 0 1
4459: PUSH
4460: LD_INT 1
4462: ARRAY
4463: EQUAL
4464: IFFALSE 4478
// Say ( Bobby , DX2a-Bobby-1 ) ;
4466: LD_EXP 2
4470: PPUSH
4471: LD_STRING DX2a-Bobby-1
4473: PPUSH
4474: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4478: LD_EXP 3
4482: PPUSH
4483: CALL_OW 310
4487: PUSH
4488: LD_VAR 0 1
4492: PUSH
4493: LD_INT 1
4495: ARRAY
4496: EQUAL
4497: IFFALSE 4511
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4499: LD_EXP 3
4503: PPUSH
4504: LD_STRING DX2a-Cyrus-1
4506: PPUSH
4507: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4511: LD_EXP 4
4515: PPUSH
4516: CALL_OW 310
4520: PUSH
4521: LD_VAR 0 1
4525: PUSH
4526: LD_INT 1
4528: ARRAY
4529: EQUAL
4530: IFFALSE 4544
// Say ( Lisa , DX2a-Lisa-1 ) ;
4532: LD_EXP 4
4536: PPUSH
4537: LD_STRING DX2a-Lisa-1
4539: PPUSH
4540: CALL_OW 88
// for i in temp1 do
4544: LD_ADDR_VAR 0 4
4548: PUSH
4549: LD_VAR 0 2
4553: PUSH
4554: FOR_IN
4555: IFFALSE 4592
// if IsInUnit ( i ) = tmp [ 1 ] then
4557: LD_VAR 0 4
4561: PPUSH
4562: CALL_OW 310
4566: PUSH
4567: LD_VAR 0 1
4571: PUSH
4572: LD_INT 1
4574: ARRAY
4575: EQUAL
4576: IFFALSE 4590
// Say ( i , DX2a-Sol1-1 ) ;
4578: LD_VAR 0 4
4582: PPUSH
4583: LD_STRING DX2a-Sol1-1
4585: PPUSH
4586: CALL_OW 88
4590: GO 4554
4592: POP
4593: POP
// for i in temp2 do
4594: LD_ADDR_VAR 0 4
4598: PUSH
4599: LD_VAR 0 3
4603: PUSH
4604: FOR_IN
4605: IFFALSE 4642
// if IsInUnit ( i ) = tmp [ 1 ] then
4607: LD_VAR 0 4
4611: PPUSH
4612: CALL_OW 310
4616: PUSH
4617: LD_VAR 0 1
4621: PUSH
4622: LD_INT 1
4624: ARRAY
4625: EQUAL
4626: IFFALSE 4640
// Say ( i , DX2a-FSol1-1 ) ;
4628: LD_VAR 0 4
4632: PPUSH
4633: LD_STRING DX2a-FSol1-1
4635: PPUSH
4636: CALL_OW 88
4640: GO 4604
4642: POP
4643: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4644: LD_EXP 1
4648: PPUSH
4649: CALL_OW 310
4653: PUSH
4654: LD_VAR 0 1
4658: PUSH
4659: LD_INT 1
4661: ARRAY
4662: EQUAL
4663: IFFALSE 4677
// Say ( JMM , DX2b-JMM-1 ) ;
4665: LD_EXP 1
4669: PPUSH
4670: LD_STRING DX2b-JMM-1
4672: PPUSH
4673: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4677: LD_EXP 1
4681: PPUSH
4682: LD_STRING DX2a-JMM-2
4684: PPUSH
4685: CALL_OW 88
// end ;
4689: PPOPN 4
4691: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4692: LD_INT 1
4694: PPUSH
4695: CALL_OW 255
4699: PUSH
4700: LD_INT 1
4702: EQUAL
4703: PUSH
4704: LD_INT 10
4706: PPUSH
4707: CALL_OW 255
4711: PUSH
4712: LD_INT 1
4714: EQUAL
4715: OR
4716: IFFALSE 4776
4718: GO 4720
4720: DISABLE
// begin DialogueOn ;
4721: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4725: LD_EXP 1
4729: PPUSH
4730: LD_STRING D3-JMM-1
4732: PPUSH
4733: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4737: LD_EXP 9
4741: PPUSH
4742: LD_STRING D3-Pow-1
4744: PPUSH
4745: CALL_OW 94
// if IsOK ( Cyrus ) then
4749: LD_EXP 3
4753: PPUSH
4754: CALL_OW 302
4758: IFFALSE 4772
// Say ( Cyrus , D3-Cyrus-1 ) ;
4760: LD_EXP 3
4764: PPUSH
4765: LD_STRING D3-Cyrus-1
4767: PPUSH
4768: CALL_OW 88
// DialogueOff ;
4772: CALL_OW 7
// end ;
4776: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , i ;
4777: LD_INT 1
4779: PPUSH
4780: CALL_OW 255
4784: PUSH
4785: LD_INT 1
4787: EQUAL
4788: PUSH
4789: LD_INT 10
4791: PPUSH
4792: CALL_OW 255
4796: PUSH
4797: LD_INT 1
4799: EQUAL
4800: AND
4801: IFFALSE 5983
4803: GO 4805
4805: DISABLE
4806: LD_INT 0
4808: PPUSH
4809: PPUSH
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) diff [ JMM ] ;
4810: LD_ADDR_VAR 0 1
4814: PUSH
4815: LD_INT 22
4817: PUSH
4818: LD_INT 1
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: LD_INT 23
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: LD_INT 25
4837: PUSH
4838: LD_INT 2
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: LIST
4849: PPUSH
4850: CALL_OW 69
4854: PUSH
4855: LD_EXP 1
4859: PUSH
4860: EMPTY
4861: LIST
4862: DIFF
4863: ST_TO_ADDR
// DialogueOn ;
4864: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
4868: LD_EXP 1
4872: PPUSH
4873: LD_STRING D3a-JMM-1
4875: PPUSH
4876: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
4880: LD_EXP 9
4884: PPUSH
4885: LD_STRING D3a-Pow-1
4887: PPUSH
4888: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3a-JMM-2
4899: PPUSH
4900: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3a-Pow-2
4911: PPUSH
4912: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
4916: LD_EXP 1
4920: PPUSH
4921: LD_STRING D3a-JMM-3
4923: PPUSH
4924: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
4928: LD_EXP 9
4932: PPUSH
4933: LD_STRING D3a-Pow-3
4935: PPUSH
4936: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
4940: LD_EXP 1
4944: PPUSH
4945: LD_STRING D3a-JMM-4
4947: PPUSH
4948: CALL_OW 88
// DialogueOff ;
4952: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4956: LD_STRING M2
4958: PPUSH
4959: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
4963: LD_EXP 1
4967: PPUSH
4968: LD_STRING D3b-JMM-1
4970: PPUSH
4971: CALL_OW 88
// wait ( 0 0$5 ) ;
4975: LD_INT 175
4977: PPUSH
4978: CALL_OW 67
// InGameOn ;
4982: CALL_OW 8
// PrepareRussianHeroes ;
4986: CALL 10512 0 0
// CenterNowOnUnits ( Mikhail ) ;
4990: LD_EXP 8
4994: PPUSH
4995: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
4999: LD_EXP 1
5003: PUSH
5004: LD_VAR 0 1
5008: PUSH
5009: LD_INT 1
5011: ARRAY
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PPUSH
5017: LD_EXP 8
5021: PPUSH
5022: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5026: LD_EXP 8
5030: PPUSH
5031: LD_VAR 0 1
5035: PUSH
5036: LD_INT 1
5038: ARRAY
5039: PPUSH
5040: CALL_OW 119
// Say ( Mikhail , D4-Mikh-1 ) ;
5044: LD_EXP 8
5048: PPUSH
5049: LD_STRING D4-Mikh-1
5051: PPUSH
5052: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5056: LD_VAR 0 1
5060: PUSH
5061: LD_INT 1
5063: ARRAY
5064: PPUSH
5065: CALL_OW 258
5069: PUSH
5070: LD_INT 1
5072: EQUAL
5073: IFFALSE 5091
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5075: LD_VAR 0 1
5079: PUSH
5080: LD_INT 1
5082: ARRAY
5083: PPUSH
5084: LD_STRING D4-Sol1-1
5086: PPUSH
5087: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5091: LD_VAR 0 1
5095: PUSH
5096: LD_INT 1
5098: ARRAY
5099: PPUSH
5100: CALL_OW 258
5104: PUSH
5105: LD_INT 2
5107: EQUAL
5108: IFFALSE 5126
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5110: LD_VAR 0 1
5114: PUSH
5115: LD_INT 1
5117: ARRAY
5118: PPUSH
5119: LD_STRING D4-FSol1-1
5121: PPUSH
5122: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5126: LD_EXP 8
5130: PPUSH
5131: LD_STRING D4-Mikh-2
5133: PPUSH
5134: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5138: LD_VAR 0 1
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: CALL_OW 258
5151: PUSH
5152: LD_INT 1
5154: EQUAL
5155: IFFALSE 5173
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5157: LD_VAR 0 1
5161: PUSH
5162: LD_INT 1
5164: ARRAY
5165: PPUSH
5166: LD_STRING D4-Sol1-2
5168: PPUSH
5169: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5173: LD_VAR 0 1
5177: PUSH
5178: LD_INT 1
5180: ARRAY
5181: PPUSH
5182: CALL_OW 258
5186: PUSH
5187: LD_INT 2
5189: EQUAL
5190: IFFALSE 5208
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5192: LD_VAR 0 1
5196: PUSH
5197: LD_INT 1
5199: ARRAY
5200: PPUSH
5201: LD_STRING D4-FSol1-2
5203: PPUSH
5204: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5208: LD_EXP 8
5212: PPUSH
5213: LD_STRING D4-Mikh-3
5215: PPUSH
5216: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5220: LD_VAR 0 1
5224: PUSH
5225: LD_INT 1
5227: ARRAY
5228: PPUSH
5229: CALL_OW 258
5233: PUSH
5234: LD_INT 1
5236: EQUAL
5237: IFFALSE 5255
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5239: LD_VAR 0 1
5243: PUSH
5244: LD_INT 1
5246: ARRAY
5247: PPUSH
5248: LD_STRING D4-Sol1-3
5250: PPUSH
5251: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5255: LD_VAR 0 1
5259: PUSH
5260: LD_INT 1
5262: ARRAY
5263: PPUSH
5264: CALL_OW 258
5268: PUSH
5269: LD_INT 2
5271: EQUAL
5272: IFFALSE 5290
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5274: LD_VAR 0 1
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PPUSH
5283: LD_STRING D4-FSol1-3
5285: PPUSH
5286: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5290: LD_EXP 8
5294: PPUSH
5295: LD_STRING D4-Mikh-4
5297: PPUSH
5298: CALL_OW 88
// case query ( Qs1 ) of 1 :
5302: LD_STRING Qs1
5304: PPUSH
5305: CALL_OW 97
5309: PUSH
5310: LD_INT 1
5312: DOUBLE
5313: EQUAL
5314: IFTRUE 5318
5316: GO 5353
5318: POP
// begin InGameOff ;
5319: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5323: LD_INT 1
5325: PPUSH
5326: LD_INT 6
5328: PPUSH
5329: LD_INT 2
5331: PPUSH
5332: LD_INT 1
5334: PPUSH
5335: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5339: LD_EXP 8
5343: PPUSH
5344: LD_INT 17
5346: PPUSH
5347: CALL_OW 113
// end ; 2 :
5351: GO 5975
5353: LD_INT 2
5355: DOUBLE
5356: EQUAL
5357: IFTRUE 5361
5359: GO 5940
5361: POP
// begin repeat wait ( 0 0$1 ) ;
5362: LD_INT 35
5364: PPUSH
5365: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5369: LD_VAR 0 1
5373: PUSH
5374: LD_INT 1
5376: ARRAY
5377: PPUSH
5378: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5382: LD_VAR 0 1
5386: PUSH
5387: LD_INT 1
5389: ARRAY
5390: PPUSH
5391: LD_EXP 1
5395: PPUSH
5396: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5400: LD_EXP 8
5404: PPUSH
5405: LD_EXP 1
5409: PPUSH
5410: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5414: LD_EXP 1
5418: PPUSH
5419: LD_EXP 8
5423: PPUSH
5424: CALL_OW 296
5428: PUSH
5429: LD_INT 5
5431: LESS
5432: IFFALSE 5362
// ComTurnUnit ( Mikhail , JMM ) ;
5434: LD_EXP 8
5438: PPUSH
5439: LD_EXP 1
5443: PPUSH
5444: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5448: LD_EXP 1
5452: PPUSH
5453: LD_STRING D4b-JMM-1
5455: PPUSH
5456: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5460: LD_EXP 8
5464: PPUSH
5465: LD_STRING D4b-Mikh-1
5467: PPUSH
5468: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5472: LD_EXP 1
5476: PPUSH
5477: LD_STRING D4b-JMM-2
5479: PPUSH
5480: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5484: LD_EXP 8
5488: PPUSH
5489: LD_STRING D4b-Mikh-2
5491: PPUSH
5492: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5496: LD_EXP 1
5500: PPUSH
5501: LD_STRING D4b-JMM-3
5503: PPUSH
5504: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5508: LD_EXP 8
5512: PPUSH
5513: LD_STRING D4b-Mikh-3
5515: PPUSH
5516: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5520: LD_EXP 1
5524: PPUSH
5525: LD_STRING D4b-JMM-4
5527: PPUSH
5528: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5532: LD_EXP 8
5536: PPUSH
5537: LD_STRING D4b-Mikh-4
5539: PPUSH
5540: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5544: LD_EXP 1
5548: PPUSH
5549: LD_STRING D4b-JMM-5
5551: PPUSH
5552: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5556: LD_EXP 8
5560: PPUSH
5561: LD_STRING D4b-Mikh-5
5563: PPUSH
5564: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5568: LD_EXP 1
5572: PPUSH
5573: LD_STRING D4b-JMM-6
5575: PPUSH
5576: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5580: LD_EXP 8
5584: PPUSH
5585: LD_STRING D4b-Mikh-6
5587: PPUSH
5588: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5592: LD_EXP 1
5596: PPUSH
5597: LD_STRING D4b-JMM-7
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4b-Mikh-7
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4b-Sol1-7
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4b-FSol1-7
5681: PPUSH
5682: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5686: LD_EXP 1
5690: PPUSH
5691: LD_STRING D4b-JMM-8
5693: PPUSH
5694: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5698: LD_VAR 0 1
5702: PUSH
5703: LD_INT 1
5705: ARRAY
5706: PPUSH
5707: CALL_OW 258
5711: PUSH
5712: LD_INT 1
5714: EQUAL
5715: IFFALSE 5733
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5717: LD_VAR 0 1
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PPUSH
5726: LD_STRING D4b-Sol1-8
5728: PPUSH
5729: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5733: LD_VAR 0 1
5737: PUSH
5738: LD_INT 1
5740: ARRAY
5741: PPUSH
5742: CALL_OW 258
5746: PUSH
5747: LD_INT 2
5749: EQUAL
5750: IFFALSE 5768
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
5752: LD_VAR 0 1
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: PPUSH
5761: LD_STRING D4b-FSol1-8
5763: PPUSH
5764: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
5768: LD_EXP 1
5772: PPUSH
5773: LD_STRING D4b-JMM-9
5775: PPUSH
5776: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
5780: LD_EXP 8
5784: PPUSH
5785: LD_INT 1
5787: PPUSH
5788: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5792: LD_ADDR_VAR 0 2
5796: PUSH
5797: LD_INT 22
5799: PUSH
5800: LD_INT 1
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: EMPTY
5808: LIST
5809: PPUSH
5810: CALL_OW 69
5814: PUSH
5815: FOR_IN
5816: IFFALSE 5829
// ComFree ( i ) ;
5818: LD_VAR 0 2
5822: PPUSH
5823: CALL_OW 139
5827: GO 5815
5829: POP
5830: POP
// repeat wait ( 0 0$1 ) ;
5831: LD_INT 35
5833: PPUSH
5834: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
5838: LD_EXP 8
5842: PPUSH
5843: CALL_OW 87
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
5847: LD_EXP 8
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 296
5859: PUSH
5860: LD_EXP 8
5864: PPUSH
5865: LD_INT 10
5867: PPUSH
5868: CALL_OW 296
5872: LESS
5873: IFFALSE 5889
// begin ComEnterUnit ( Mikhail , dep1 ) ;
5875: LD_EXP 8
5879: PPUSH
5880: LD_INT 1
5882: PPUSH
5883: CALL_OW 120
// end else
5887: GO 5901
// begin ComEnterUnit ( Mikhail , dep2 ) ;
5889: LD_EXP 8
5893: PPUSH
5894: LD_INT 10
5896: PPUSH
5897: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
5901: LD_EXP 8
5905: PPUSH
5906: CALL_OW 310
5910: IFFALSE 5831
// mikhailDepot = IsInUnit ( Mikhail ) ;
5912: LD_ADDR_EXP 23
5916: PUSH
5917: LD_EXP 8
5921: PPUSH
5922: CALL_OW 310
5926: ST_TO_ADDR
// InGameOff ;
5927: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
5931: LD_STRING M3
5933: PPUSH
5934: CALL_OW 337
// end ; 3 :
5938: GO 5975
5940: LD_INT 3
5942: DOUBLE
5943: EQUAL
5944: IFTRUE 5948
5946: GO 5974
5948: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
5949: LD_EXP 8
5953: PPUSH
5954: LD_INT 17
5956: PPUSH
5957: CALL_OW 113
// wait ( 0 0$3 ) ;
5961: LD_INT 105
5963: PPUSH
5964: CALL_OW 67
// InGameOff ;
5968: CALL_OW 9
// end ; end ;
5972: GO 5975
5974: POP
// PrepareTigers ;
5975: CALL 12763 0 0
// RussianTrap ;
5979: CALL 9130 0 0
// end ;
5983: PPOPN 2
5985: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
5986: LD_INT 1
5988: PPUSH
5989: CALL_OW 255
5993: PUSH
5994: LD_INT 1
5996: EQUAL
5997: PUSH
5998: LD_INT 10
6000: PPUSH
6001: CALL_OW 255
6005: PUSH
6006: LD_INT 1
6008: EQUAL
6009: AND
6010: PUSH
6011: LD_INT 1
6013: PPUSH
6014: CALL_OW 274
6018: PPUSH
6019: LD_INT 1
6021: PPUSH
6022: CALL_OW 275
6026: PUSH
6027: LD_INT 100
6029: GREATEREQUAL
6030: AND
6031: IFFALSE 6165
6033: GO 6035
6035: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6036: LD_INT 2100
6038: PPUSH
6039: LD_INT 4200
6041: PPUSH
6042: CALL_OW 12
6046: PUSH
6047: LD_INT 1050
6049: PLUS
6050: PPUSH
6051: CALL_OW 67
// PrepareCargoBays ;
6055: CALL 11628 0 0
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6059: LD_EXP 15
6063: PUSH
6064: LD_EXP 16
6068: PUSH
6069: LD_EXP 17
6073: PUSH
6074: LD_EXP 18
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: PPUSH
6085: LD_INT 53
6087: PPUSH
6088: LD_INT 16
6090: PPUSH
6091: CALL_OW 111
// wait ( 0 0$5 ) ;
6095: LD_INT 175
6097: PPUSH
6098: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6102: LD_EXP 17
6106: PPUSH
6107: LD_STRING D5-Rus2-1
6109: PPUSH
6110: CALL_OW 88
// wait ( 0 0$9 ) ;
6114: LD_INT 315
6116: PPUSH
6117: CALL_OW 67
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6121: LD_EXP 15
6125: PUSH
6126: LD_EXP 16
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PPUSH
6135: LD_INT 7
6137: PPUSH
6138: LD_INT 9
6140: PPUSH
6141: CALL_OW 111
// Say ( driver1 , D5-Rus2-1a ) ;
6145: LD_EXP 17
6149: PPUSH
6150: LD_STRING D5-Rus2-1a
6152: PPUSH
6153: CALL_OW 88
// cargoEscape = 1 ;
6157: LD_ADDR_EXP 20
6161: PUSH
6162: LD_INT 1
6164: ST_TO_ADDR
// end ;
6165: END
// every 0 0$1 trigger cargoEscape > 0 do
6166: LD_EXP 20
6170: PUSH
6171: LD_INT 0
6173: GREATER
6174: IFFALSE 6300
6176: GO 6178
6178: DISABLE
// begin enable ;
6179: ENABLE
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6180: LD_EXP 15
6184: PPUSH
6185: LD_INT 13
6187: PPUSH
6188: CALL_OW 308
6192: PUSH
6193: LD_EXP 17
6197: PPUSH
6198: LD_INT 13
6200: PPUSH
6201: CALL_OW 308
6205: OR
6206: IFFALSE 6240
// begin RemoveUnit ( cargo1 ) ;
6208: LD_EXP 15
6212: PPUSH
6213: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6217: LD_EXP 17
6221: PPUSH
6222: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6226: LD_ADDR_EXP 20
6230: PUSH
6231: LD_EXP 20
6235: PUSH
6236: LD_INT 1
6238: PLUS
6239: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6240: LD_EXP 16
6244: PPUSH
6245: LD_INT 13
6247: PPUSH
6248: CALL_OW 308
6252: PUSH
6253: LD_EXP 18
6257: PPUSH
6258: LD_INT 13
6260: PPUSH
6261: CALL_OW 308
6265: OR
6266: IFFALSE 6300
// begin RemoveUnit ( cargo2 ) ;
6268: LD_EXP 16
6272: PPUSH
6273: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6277: LD_EXP 18
6281: PPUSH
6282: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6286: LD_ADDR_EXP 20
6290: PUSH
6291: LD_EXP 20
6295: PUSH
6296: LD_INT 1
6298: PLUS
6299: ST_TO_ADDR
// end ; end ;
6300: END
// every 0 0$1 trigger cargoEscape > 1 do
6301: LD_EXP 20
6305: PUSH
6306: LD_INT 1
6308: GREATER
6309: IFFALSE 6422
6311: GO 6313
6313: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
6314: LD_INT 22
6316: PUSH
6317: LD_INT 1
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: PUSH
6324: LD_INT 23
6326: PUSH
6327: LD_INT 1
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 26
6336: PUSH
6337: LD_INT 1
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: PPUSH
6349: CALL_OW 69
6353: PUSH
6354: LD_INT 2
6356: PPUSH
6357: LD_INT 22
6359: PUSH
6360: LD_INT 1
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: LD_INT 23
6369: PUSH
6370: LD_INT 1
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 26
6379: PUSH
6380: LD_INT 1
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: LIST
6391: PPUSH
6392: CALL_OW 69
6396: PPUSH
6397: CALL_OW 12
6401: ARRAY
6402: PPUSH
6403: LD_STRING D5a-Sol1-1
6405: PPUSH
6406: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
6410: LD_EXP 1
6414: PPUSH
6415: LD_STRING D5a-JMM-1
6417: PPUSH
6418: CALL_OW 88
// end ;
6422: END
// every 0 0$1 trigger GetLives ( dep1 ) < 1000 or GetLives ( dep2 ) < 1000 do
6423: LD_INT 1
6425: PPUSH
6426: CALL_OW 256
6430: PUSH
6431: LD_INT 1000
6433: LESS
6434: PUSH
6435: LD_INT 10
6437: PPUSH
6438: CALL_OW 256
6442: PUSH
6443: LD_INT 1000
6445: LESS
6446: OR
6447: IFFALSE 6464
6449: GO 6451
6451: DISABLE
// Say ( JMM ,  D8-JMM-1 ) ;
6452: LD_EXP 1
6456: PPUSH
6457: LD_STRING  D8-JMM-1
6459: PPUSH
6460: CALL_OW 88
6464: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6465: LD_EXP 8
6469: PPUSH
6470: CALL_OW 310
6474: PUSH
6475: LD_INT 1
6477: EQUAL
6478: PUSH
6479: LD_EXP 22
6483: PUSH
6484: LD_INT 3
6486: EQUAL
6487: NOT
6488: AND
6489: IFFALSE 6511
6491: GO 6493
6493: DISABLE
// begin mikhailInBase = 1 ;
6494: LD_ADDR_EXP 22
6498: PUSH
6499: LD_INT 1
6501: ST_TO_ADDR
// mikhailStatus = 1 ;
6502: LD_ADDR_EXP 21
6506: PUSH
6507: LD_INT 1
6509: ST_TO_ADDR
// enable ;
6510: ENABLE
// end ;
6511: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
6512: LD_EXP 8
6516: PPUSH
6517: LD_INT 25
6519: PPUSH
6520: CALL_OW 308
6524: PUSH
6525: LD_EXP 22
6529: PUSH
6530: LD_INT 1
6532: EQUAL
6533: AND
6534: PUSH
6535: LD_EXP 8
6539: PPUSH
6540: CALL_OW 255
6544: PUSH
6545: LD_INT 1
6547: EQUAL
6548: AND
6549: IFFALSE 6879
6551: GO 6553
6553: DISABLE
// begin enable ;
6554: ENABLE
// case query ( QMikh2 ) of 1 :
6555: LD_STRING QMikh2
6557: PPUSH
6558: CALL_OW 97
6562: PUSH
6563: LD_INT 1
6565: DOUBLE
6566: EQUAL
6567: IFTRUE 6571
6569: GO 6638
6571: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
6572: LD_INT 1
6574: PPUSH
6575: LD_INT 6
6577: PPUSH
6578: LD_INT 2
6580: PPUSH
6581: LD_INT 1
6583: PPUSH
6584: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
6588: LD_EXP 8
6592: PPUSH
6593: LD_INT 6
6595: PPUSH
6596: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6600: LD_EXP 8
6604: PPUSH
6605: CALL_OW 122
// wait ( 0 0$1 ) ;
6609: LD_INT 35
6611: PPUSH
6612: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
6616: LD_EXP 8
6620: PPUSH
6621: LD_INT 17
6623: PPUSH
6624: CALL_OW 113
// mikhailInbase = 0 ;
6628: LD_ADDR_EXP 22
6632: PUSH
6633: LD_INT 0
6635: ST_TO_ADDR
// end ; 2 :
6636: GO 6879
6638: LD_INT 2
6640: DOUBLE
6641: EQUAL
6642: IFTRUE 6646
6644: GO 6819
6646: POP
// begin mikhailInBase = 2 ;
6647: LD_ADDR_EXP 22
6651: PUSH
6652: LD_INT 2
6654: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
6655: LD_EXP 8
6659: PPUSH
6660: LD_INT 6
6662: PPUSH
6663: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6667: LD_EXP 8
6671: PPUSH
6672: CALL_OW 122
// wait ( 0 0$1 ) ;
6676: LD_INT 35
6678: PPUSH
6679: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
6683: LD_EXP 8
6687: PPUSH
6688: LD_EXP 8
6692: PPUSH
6693: CALL_OW 250
6697: PUSH
6698: LD_INT 2
6700: PLUS
6701: PPUSH
6702: LD_EXP 8
6706: PPUSH
6707: CALL_OW 251
6711: PUSH
6712: LD_INT 2
6714: PLUS
6715: PPUSH
6716: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
6720: LD_EXP 8
6724: PPUSH
6725: LD_EXP 8
6729: PPUSH
6730: CALL_OW 250
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: PPUSH
6739: LD_EXP 8
6743: PPUSH
6744: CALL_OW 251
6748: PUSH
6749: LD_INT 2
6751: PLUS
6752: PPUSH
6753: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
6757: LD_EXP 8
6761: PPUSH
6762: LD_EXP 8
6766: PPUSH
6767: CALL_OW 250
6771: PUSH
6772: LD_INT 2
6774: PLUS
6775: PPUSH
6776: LD_EXP 8
6780: PPUSH
6781: CALL_OW 251
6785: PPUSH
6786: CALL_OW 171
// wait ( 0 0$5 ) ;
6790: LD_INT 175
6792: PPUSH
6793: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
6797: LD_EXP 8
6801: PPUSH
6802: LD_INT 25
6804: PPUSH
6805: CALL_OW 113
// mikhailInBase = 4 ;
6809: LD_ADDR_EXP 22
6813: PUSH
6814: LD_INT 4
6816: ST_TO_ADDR
// end ; 3 :
6817: GO 6879
6819: LD_INT 3
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 6878
6827: POP
// begin SetSide ( Mikhail , 6 ) ;
6828: LD_EXP 8
6832: PPUSH
6833: LD_INT 6
6835: PPUSH
6836: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6840: LD_EXP 8
6844: PPUSH
6845: CALL_OW 122
// wait ( 0 0$1 ) ;
6849: LD_INT 35
6851: PPUSH
6852: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
6856: LD_EXP 8
6860: PPUSH
6861: LD_INT 17
6863: PPUSH
6864: CALL_OW 113
// mikhailInbase = 3 ;
6868: LD_ADDR_EXP 22
6872: PUSH
6873: LD_INT 3
6875: ST_TO_ADDR
// end ; end ;
6876: GO 6879
6878: POP
// end ;
6879: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
6880: LD_EXP 8
6884: PPUSH
6885: LD_INT 25
6887: PPUSH
6888: CALL_OW 308
6892: PUSH
6893: LD_EXP 22
6897: PUSH
6898: LD_INT 4
6900: EQUAL
6901: AND
6902: IFFALSE 7000
6904: GO 6906
6906: DISABLE
// begin enable ;
6907: ENABLE
// SetSide ( Mikhail , 1 ) ;
6908: LD_EXP 8
6912: PPUSH
6913: LD_INT 1
6915: PPUSH
6916: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
6920: LD_INT 35
6922: PPUSH
6923: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
6927: LD_EXP 8
6931: PPUSH
6932: LD_INT 1
6934: PPUSH
6935: CALL_OW 296
6939: PUSH
6940: LD_EXP 8
6944: PPUSH
6945: LD_INT 10
6947: PPUSH
6948: CALL_OW 296
6952: LESS
6953: IFFALSE 6969
// begin ComEnterUnit ( Mikhail , dep1 ) ;
6955: LD_EXP 8
6959: PPUSH
6960: LD_INT 1
6962: PPUSH
6963: CALL_OW 120
// end else
6967: GO 6981
// begin ComEnterUnit ( Mikhail , dep2 ) ;
6969: LD_EXP 8
6973: PPUSH
6974: LD_INT 10
6976: PPUSH
6977: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
6981: LD_EXP 8
6985: PPUSH
6986: CALL_OW 310
6990: IFFALSE 6920
// mikhailInBase = 1 ;
6992: LD_ADDR_EXP 22
6996: PUSH
6997: LD_INT 1
6999: ST_TO_ADDR
// end ;
7000: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7001: LD_EXP 8
7005: PPUSH
7006: CALL_OW 310
7010: PUSH
7011: LD_EXP 22
7015: PUSH
7016: LD_INT 3
7018: EQUAL
7019: NOT
7020: AND
7021: IFFALSE 7147
7023: GO 7025
7025: DISABLE
// begin enable ;
7026: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7027: LD_INT 22
7029: PUSH
7030: LD_INT 1
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 21
7039: PUSH
7040: LD_INT 1
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 91
7049: PUSH
7050: LD_EXP 8
7054: PPUSH
7055: CALL_OW 310
7059: PUSH
7060: LD_INT 10
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: PPUSH
7073: CALL_OW 69
7077: PUSH
7078: LD_INT 1
7080: EQUAL
7081: IFFALSE 7147
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7083: LD_INT 1
7085: PPUSH
7086: LD_INT 6
7088: PPUSH
7089: LD_INT 2
7091: PPUSH
7092: LD_INT 1
7094: PPUSH
7095: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7099: LD_EXP 8
7103: PPUSH
7104: LD_INT 6
7106: PPUSH
7107: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7111: LD_EXP 8
7115: PPUSH
7116: CALL_OW 122
// wait ( 0 0$1 ) ;
7120: LD_INT 35
7122: PPUSH
7123: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7127: LD_EXP 8
7131: PPUSH
7132: LD_INT 17
7134: PPUSH
7135: CALL_OW 113
// mikhailStatus = 3 ;
7139: LD_ADDR_EXP 21
7143: PUSH
7144: LD_INT 3
7146: ST_TO_ADDR
// end ; end ;
7147: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7148: LD_EXP 1
7152: PPUSH
7153: LD_EXP 23
7157: PPUSH
7158: CALL_OW 296
7162: PUSH
7163: LD_INT 5
7165: LESS
7166: PUSH
7167: LD_EXP 21
7171: PUSH
7172: LD_INT 3
7174: EQUAL
7175: AND
7176: PUSH
7177: LD_EXP 22
7181: PUSH
7182: LD_INT 3
7184: EQUAL
7185: NOT
7186: AND
7187: IFFALSE 7403
7189: GO 7191
7191: DISABLE
7192: LD_INT 0
7194: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
7195: LD_ADDR_VAR 0 1
7199: PUSH
7200: LD_INT 22
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: LD_INT 21
7212: PUSH
7213: LD_INT 1
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: LD_INT 26
7222: PUSH
7223: LD_INT 1
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: PPUSH
7235: CALL_OW 69
7239: PUSH
7240: LD_EXP 1
7244: PUSH
7245: EMPTY
7246: LIST
7247: DIFF
7248: ST_TO_ADDR
// DialogueOn ;
7249: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7253: LD_EXP 1
7257: PPUSH
7258: LD_STRING D7-JMM-1
7260: PPUSH
7261: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7265: LD_VAR 0 1
7269: PUSH
7270: LD_INT 1
7272: ARRAY
7273: PPUSH
7274: LD_STRING D7-Sol1-1
7276: PPUSH
7277: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7281: LD_EXP 1
7285: PPUSH
7286: LD_STRING D7-JMM-2
7288: PPUSH
7289: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7293: LD_VAR 0 1
7297: PUSH
7298: LD_INT 1
7300: ARRAY
7301: PPUSH
7302: LD_STRING D7-Sol1-2
7304: PPUSH
7305: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7309: LD_EXP 1
7313: PPUSH
7314: LD_STRING D7-JMM-3
7316: PPUSH
7317: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7321: LD_VAR 0 1
7325: PUSH
7326: LD_INT 1
7328: ARRAY
7329: PPUSH
7330: LD_STRING D7-Sol1-3
7332: PPUSH
7333: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7337: LD_EXP 3
7341: PPUSH
7342: CALL_OW 302
7346: PUSH
7347: LD_EXP 4
7351: PPUSH
7352: CALL_OW 302
7356: AND
7357: IFFALSE 7399
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7359: LD_EXP 3
7363: PPUSH
7364: LD_STRING D7-Cyrus-3
7366: PPUSH
7367: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7371: LD_VAR 0 1
7375: PUSH
7376: LD_INT 1
7378: ARRAY
7379: PPUSH
7380: LD_STRING D7-Sol1-4
7382: PPUSH
7383: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7387: LD_EXP 4
7391: PPUSH
7392: LD_STRING D7-Lisa-4
7394: PPUSH
7395: CALL_OW 88
// end ; DialogueOff ;
7399: CALL_OW 7
// end ;
7403: PPOPN 1
7405: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7406: LD_EXP 8
7410: PPUSH
7411: CALL_OW 303
7415: PUSH
7416: LD_EXP 21
7420: PUSH
7421: LD_INT 3
7423: EQUAL
7424: AND
7425: IFFALSE 7439
7427: GO 7429
7429: DISABLE
// begin enable ;
7430: ENABLE
// mikhailStatus = 2 ;
7431: LD_ADDR_EXP 21
7435: PUSH
7436: LD_INT 2
7438: ST_TO_ADDR
// end ;
7439: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7440: LD_EXP 8
7444: PPUSH
7445: LD_INT 17
7447: PPUSH
7448: CALL_OW 308
7452: PUSH
7453: LD_EXP 8
7457: PPUSH
7458: CALL_OW 255
7462: PUSH
7463: LD_INT 6
7465: EQUAL
7466: AND
7467: IFFALSE 7500
7469: GO 7471
7471: DISABLE
// begin if not mikhailInBase = 3 then
7472: LD_EXP 22
7476: PUSH
7477: LD_INT 3
7479: EQUAL
7480: NOT
7481: IFFALSE 7491
// mikhailStatus = 3 ;
7483: LD_ADDR_EXP 21
7487: PUSH
7488: LD_INT 3
7490: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
7491: LD_EXP 8
7495: PPUSH
7496: CALL_OW 64
// end ;
7500: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
7501: LD_EXP 21
7505: PUSH
7506: LD_INT 3
7508: EQUAL
7509: PUSH
7510: LD_EXP 8
7514: PPUSH
7515: CALL_OW 255
7519: PUSH
7520: LD_INT 6
7522: EQUAL
7523: AND
7524: IFFALSE 7690
7526: GO 7528
7528: DISABLE
7529: LD_INT 0
7531: PPUSH
7532: PPUSH
// begin enable ;
7533: ENABLE
// if IsOk ( Mikhail ) then
7534: LD_EXP 8
7538: PPUSH
7539: CALL_OW 302
7543: IFFALSE 7690
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
7545: LD_ADDR_VAR 0 2
7549: PUSH
7550: LD_EXP 8
7554: PPUSH
7555: LD_INT 22
7557: PUSH
7558: LD_INT 1
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PUSH
7565: LD_INT 21
7567: PUSH
7568: LD_INT 1
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PPUSH
7579: CALL_OW 69
7583: PPUSH
7584: CALL 9286 0 2
7588: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
7589: LD_VAR 0 2
7593: PPUSH
7594: LD_EXP 8
7598: PPUSH
7599: CALL_OW 296
7603: PUSH
7604: LD_INT 8
7606: LESS
7607: IFFALSE 7690
// begin if GetSex ( attacker ) = sex_male then
7609: LD_VAR 0 2
7613: PPUSH
7614: CALL_OW 258
7618: PUSH
7619: LD_INT 1
7621: EQUAL
7622: IFFALSE 7658
// begin disable ;
7624: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
7625: LD_VAR 0 2
7629: PPUSH
7630: LD_STRING D7a-Sol1-1
7632: PPUSH
7633: CALL_OW 88
// wait ( 0 0$2 ) ;
7637: LD_INT 70
7639: PPUSH
7640: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
7644: LD_VAR 0 2
7648: PPUSH
7649: LD_STRING D7a-Sol1-1a
7651: PPUSH
7652: CALL_OW 88
// end else
7656: GO 7690
// begin disable ;
7658: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
7659: LD_VAR 0 2
7663: PPUSH
7664: LD_STRING D7a-FSol1-1
7666: PPUSH
7667: CALL_OW 88
// wait ( 0 0$2 ) ;
7671: LD_INT 70
7673: PPUSH
7674: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
7678: LD_VAR 0 2
7682: PPUSH
7683: LD_STRING D7a-FSol1-1a
7685: PPUSH
7686: CALL_OW 88
// end ; end ; end ; end ; end_of_file
7690: PPOPN 2
7692: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7693: LD_INT 0
7695: PPUSH
7696: PPUSH
7697: PPUSH
7698: PPUSH
// for i = 1 to count do
7699: LD_ADDR_VAR 0 8
7703: PUSH
7704: DOUBLE
7705: LD_INT 1
7707: DEC
7708: ST_TO_ADDR
7709: LD_VAR 0 6
7713: PUSH
7714: FOR_TO
7715: IFFALSE 7796
// begin uc_side = side ;
7717: LD_ADDR_OWVAR 20
7721: PUSH
7722: LD_VAR 0 1
7726: ST_TO_ADDR
// uc_nation = nation ;
7727: LD_ADDR_OWVAR 21
7731: PUSH
7732: LD_VAR 0 2
7736: ST_TO_ADDR
// hc_gallery =  ;
7737: LD_ADDR_OWVAR 33
7741: PUSH
7742: LD_STRING 
7744: ST_TO_ADDR
// hc_name =  ;
7745: LD_ADDR_OWVAR 26
7749: PUSH
7750: LD_STRING 
7752: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7753: LD_INT 0
7755: PPUSH
7756: LD_VAR 0 5
7760: PPUSH
7761: LD_VAR 0 4
7765: PPUSH
7766: CALL_OW 380
// un = CreateHuman ;
7770: LD_ADDR_VAR 0 10
7774: PUSH
7775: CALL_OW 44
7779: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7780: LD_VAR 0 10
7784: PPUSH
7785: LD_VAR 0 3
7789: PPUSH
7790: CALL_OW 52
// end ;
7794: GO 7714
7796: POP
7797: POP
// end ;
7798: LD_VAR 0 7
7802: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7803: LD_INT 0
7805: PPUSH
7806: PPUSH
7807: PPUSH
// uc_side := GetSide ( b ) ;
7808: LD_ADDR_OWVAR 20
7812: PUSH
7813: LD_VAR 0 2
7817: PPUSH
7818: CALL_OW 255
7822: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7823: LD_ADDR_OWVAR 21
7827: PUSH
7828: LD_VAR 0 2
7832: PPUSH
7833: CALL_OW 248
7837: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7838: LD_INT 0
7840: PPUSH
7841: LD_INT 1
7843: PPUSH
7844: LD_VAR 0 1
7848: PPUSH
7849: CALL_OW 380
// un = CreateHuman ;
7853: LD_ADDR_VAR 0 4
7857: PUSH
7858: CALL_OW 44
7862: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
7863: LD_ADDR_VAR 0 5
7867: PUSH
7868: LD_VAR 0 2
7872: PPUSH
7873: CALL_OW 254
7877: PUSH
7878: LD_INT 3
7880: MINUS
7881: ST_TO_ADDR
// if dir < 0 then
7882: LD_VAR 0 5
7886: PUSH
7887: LD_INT 0
7889: LESS
7890: IFFALSE 7906
// dir := 6 + dir ;
7892: LD_ADDR_VAR 0 5
7896: PUSH
7897: LD_INT 6
7899: PUSH
7900: LD_VAR 0 5
7904: PLUS
7905: ST_TO_ADDR
// SetDir ( un , dir ) ;
7906: LD_VAR 0 4
7910: PPUSH
7911: LD_VAR 0 5
7915: PPUSH
7916: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7920: LD_VAR 0 4
7924: PPUSH
7925: LD_VAR 0 2
7929: PPUSH
7930: CALL_OW 52
// end ;
7934: LD_VAR 0 3
7938: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
7939: LD_INT 0
7941: PPUSH
7942: PPUSH
7943: PPUSH
7944: PPUSH
7945: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
7946: LD_ADDR_VAR 0 7
7950: PUSH
7951: LD_INT 22
7953: PUSH
7954: LD_VAR 0 1
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 25
7965: PUSH
7966: LD_INT 2
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 24
7975: PUSH
7976: LD_INT 1000
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: LIST
7987: PPUSH
7988: CALL_OW 69
7992: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7993: LD_ADDR_VAR 0 5
7997: PUSH
7998: LD_VAR 0 3
8002: PPUSH
8003: LD_INT 22
8005: PUSH
8006: LD_VAR 0 1
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 21
8017: PUSH
8018: LD_INT 3
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PUSH
8025: LD_INT 3
8027: PUSH
8028: LD_INT 24
8030: PUSH
8031: LD_INT 1000
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: PPUSH
8050: CALL_OW 70
8054: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8055: LD_VAR 0 5
8059: PUSH
8060: LD_INT 0
8062: GREATER
8063: PUSH
8064: LD_VAR 0 7
8068: PUSH
8069: LD_INT 0
8071: GREATER
8072: AND
8073: IFFALSE 8139
// begin for i in engineerOk_list do
8075: LD_ADDR_VAR 0 6
8079: PUSH
8080: LD_VAR 0 7
8084: PUSH
8085: FOR_IN
8086: IFFALSE 8137
// begin for j in buildings_list do
8088: LD_ADDR_VAR 0 8
8092: PUSH
8093: LD_VAR 0 5
8097: PUSH
8098: FOR_IN
8099: IFFALSE 8133
// begin AddComExitBuilding ( i ) ;
8101: LD_VAR 0 6
8105: PPUSH
8106: CALL_OW 182
// wait ( 0 0$1 ) ;
8110: LD_INT 35
8112: PPUSH
8113: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8117: LD_VAR 0 6
8121: PPUSH
8122: LD_VAR 0 8
8126: PPUSH
8127: CALL_OW 190
// end ;
8131: GO 8098
8133: POP
8134: POP
// end ;
8135: GO 8085
8137: POP
8138: POP
// end ; if buildings_list = 0 then
8139: LD_VAR 0 5
8143: PUSH
8144: LD_INT 0
8146: EQUAL
8147: IFFALSE 8180
// begin for i in engineerOK_list do
8149: LD_ADDR_VAR 0 6
8153: PUSH
8154: LD_VAR 0 7
8158: PUSH
8159: FOR_IN
8160: IFFALSE 8178
// begin ComEnterUnit ( i , building ) ;
8162: LD_VAR 0 6
8166: PPUSH
8167: LD_VAR 0 2
8171: PPUSH
8172: CALL_OW 120
// end ;
8176: GO 8159
8178: POP
8179: POP
// end ; end ;
8180: LD_VAR 0 4
8184: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8185: LD_INT 0
8187: PPUSH
8188: PPUSH
8189: PPUSH
8190: PPUSH
8191: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8192: LD_ADDR_VAR 0 6
8196: PUSH
8197: LD_INT 22
8199: PUSH
8200: LD_VAR 0 1
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 25
8211: PUSH
8212: LD_INT 4
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PPUSH
8223: CALL_OW 69
8227: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
8228: LD_ADDR_VAR 0 9
8232: PUSH
8233: LD_VAR 0 3
8237: PPUSH
8238: LD_INT 22
8240: PUSH
8241: LD_VAR 0 1
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: PUSH
8250: LD_INT 21
8252: PUSH
8253: LD_INT 1
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 3
8262: PUSH
8263: LD_INT 24
8265: PUSH
8266: LD_INT 650
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: LIST
8281: PPUSH
8282: CALL_OW 70
8286: ST_TO_ADDR
// if damageUnits > 0 then
8287: LD_VAR 0 9
8291: PUSH
8292: LD_INT 0
8294: GREATER
8295: IFFALSE 8445
// begin for i = 1 to damageUnits do
8297: LD_ADDR_VAR 0 7
8301: PUSH
8302: DOUBLE
8303: LD_INT 1
8305: DEC
8306: ST_TO_ADDR
8307: LD_VAR 0 9
8311: PUSH
8312: FOR_TO
8313: IFFALSE 8337
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
8315: LD_VAR 0 9
8319: PUSH
8320: LD_VAR 0 7
8324: ARRAY
8325: PPUSH
8326: LD_VAR 0 2
8330: PPUSH
8331: CALL_OW 113
8335: GO 8312
8337: POP
8338: POP
// for i = 1 to sci_list do
8339: LD_ADDR_VAR 0 7
8343: PUSH
8344: DOUBLE
8345: LD_INT 1
8347: DEC
8348: ST_TO_ADDR
8349: LD_VAR 0 6
8353: PUSH
8354: FOR_TO
8355: IFFALSE 8441
// begin ComExitBuilding ( sci_list [ i ] ) ;
8357: LD_VAR 0 6
8361: PUSH
8362: LD_VAR 0 7
8366: ARRAY
8367: PPUSH
8368: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
8372: LD_ADDR_VAR 0 8
8376: PUSH
8377: LD_VAR 0 2
8381: PPUSH
8382: LD_INT 22
8384: PUSH
8385: LD_VAR 0 1
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PPUSH
8394: CALL_OW 70
8398: PUSH
8399: FOR_IN
8400: IFFALSE 8437
// begin AddComHeal ( sci_list [ i ] , j [ j ] ) ;
8402: LD_VAR 0 6
8406: PUSH
8407: LD_VAR 0 7
8411: ARRAY
8412: PPUSH
8413: LD_VAR 0 8
8417: PUSH
8418: LD_VAR 0 8
8422: ARRAY
8423: PPUSH
8424: CALL_OW 188
// wait ( 1 1$0 ) ;
8428: LD_INT 2100
8430: PPUSH
8431: CALL_OW 67
// end ;
8435: GO 8399
8437: POP
8438: POP
// end ;
8439: GO 8354
8441: POP
8442: POP
// end else
8443: GO 8459
// begin AddComEnterUnit ( sci_list , build ) ;
8445: LD_VAR 0 6
8449: PPUSH
8450: LD_VAR 0 4
8454: PPUSH
8455: CALL_OW 180
// end ; end ;
8459: LD_VAR 0 5
8463: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
8464: LD_INT 0
8466: PPUSH
8467: PPUSH
8468: PPUSH
8469: PPUSH
8470: PPUSH
8471: PPUSH
8472: PPUSH
8473: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
8474: LD_ADDR_VAR 0 7
8478: PUSH
8479: LD_VAR 0 3
8483: PPUSH
8484: LD_INT 22
8486: PUSH
8487: LD_VAR 0 1
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: LD_INT 21
8498: PUSH
8499: LD_INT 2
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: PUSH
8506: LD_INT 24
8508: PUSH
8509: LD_INT 550
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PUSH
8516: LD_INT 34
8518: PUSH
8519: LD_INT 46
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: PPUSH
8532: CALL_OW 70
8536: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
8537: LD_ADDR_VAR 0 8
8541: PUSH
8542: LD_VAR 0 3
8546: PPUSH
8547: LD_INT 22
8549: PUSH
8550: LD_VAR 0 1
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 21
8561: PUSH
8562: LD_INT 2
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: LD_INT 34
8571: PUSH
8572: LD_INT 46
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: LD_INT 3
8581: PUSH
8582: LD_INT 24
8584: PUSH
8585: LD_INT 550
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: PPUSH
8602: CALL_OW 70
8606: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
8607: LD_ADDR_VAR 0 9
8611: PUSH
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_INT 22
8619: PUSH
8620: LD_VAR 0 1
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: LD_INT 21
8631: PUSH
8632: LD_INT 2
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PUSH
8639: LD_INT 34
8641: PUSH
8642: LD_INT 46
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: LD_INT 24
8651: PUSH
8652: LD_INT 1000
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: LD_INT 58
8661: PUSH
8662: EMPTY
8663: LIST
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: PPUSH
8672: CALL_OW 70
8676: ST_TO_ADDR
// for i in damageVehicle_list do
8677: LD_ADDR_VAR 0 5
8681: PUSH
8682: LD_VAR 0 8
8686: PUSH
8687: FOR_IN
8688: IFFALSE 8707
// mechanicInside_list = UnitsInside ( i ) ;
8690: LD_ADDR_VAR 0 10
8694: PUSH
8695: LD_VAR 0 5
8699: PPUSH
8700: CALL_OW 313
8704: ST_TO_ADDR
8705: GO 8687
8707: POP
8708: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8709: LD_ADDR_VAR 0 11
8713: PUSH
8714: LD_VAR 0 2
8718: PPUSH
8719: LD_INT 22
8721: PUSH
8722: LD_VAR 0 1
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 25
8733: PUSH
8734: LD_INT 3
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PPUSH
8745: CALL_OW 70
8749: ST_TO_ADDR
// if damageVehicle_list > 0 then
8750: LD_VAR 0 8
8754: PUSH
8755: LD_INT 0
8757: GREATER
8758: IFFALSE 8831
// begin for i in damageVehicle_list do
8760: LD_ADDR_VAR 0 5
8764: PUSH
8765: LD_VAR 0 8
8769: PUSH
8770: FOR_IN
8771: IFFALSE 8829
// begin for j in mechanicInside_list do
8773: LD_ADDR_VAR 0 6
8777: PUSH
8778: LD_VAR 0 10
8782: PUSH
8783: FOR_IN
8784: IFFALSE 8825
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
8786: LD_VAR 0 8
8790: PPUSH
8791: LD_VAR 0 2
8795: PPUSH
8796: CALL_OW 113
// AddComExitVehicle ( j ) ;
8800: LD_VAR 0 6
8804: PPUSH
8805: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
8809: LD_VAR 0 6
8813: PPUSH
8814: LD_VAR 0 5
8818: PPUSH
8819: CALL_OW 189
// end ;
8823: GO 8783
8825: POP
8826: POP
// end ;
8827: GO 8770
8829: POP
8830: POP
// end ; if emptyVehicle_list > 0 then
8831: LD_VAR 0 9
8835: PUSH
8836: LD_INT 0
8838: GREATER
8839: IFFALSE 8889
// begin for i in emptyVehicle_list do
8841: LD_ADDR_VAR 0 5
8845: PUSH
8846: LD_VAR 0 9
8850: PUSH
8851: FOR_IN
8852: IFFALSE 8887
// begin for j in mechanicOutside_list do
8854: LD_ADDR_VAR 0 6
8858: PUSH
8859: LD_VAR 0 11
8863: PUSH
8864: FOR_IN
8865: IFFALSE 8883
// begin AddComEnterUnit ( j , i ) ;
8867: LD_VAR 0 6
8871: PPUSH
8872: LD_VAR 0 5
8876: PPUSH
8877: CALL_OW 180
// end ;
8881: GO 8864
8883: POP
8884: POP
// end ;
8885: GO 8851
8887: POP
8888: POP
// end ; if VehicleOK_list > 0 then
8889: LD_VAR 0 7
8893: PUSH
8894: LD_INT 0
8896: GREATER
8897: IFFALSE 8931
// begin for i in VehicleOK_list do
8899: LD_ADDR_VAR 0 5
8903: PUSH
8904: LD_VAR 0 7
8908: PUSH
8909: FOR_IN
8910: IFFALSE 8929
// ComAgressiveMove ( i , 110 , 29 ) ;
8912: LD_VAR 0 5
8916: PPUSH
8917: LD_INT 110
8919: PPUSH
8920: LD_INT 29
8922: PPUSH
8923: CALL_OW 114
8927: GO 8909
8929: POP
8930: POP
// end ; end ;
8931: LD_VAR 0 4
8935: RET
// export function DefendBases ( area , enemySide , defendersList , build ) ; var i , j ; begin
8936: LD_INT 0
8938: PPUSH
8939: PPUSH
8940: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_type , unit_human ] ] ) > 0 then
8941: LD_VAR 0 1
8945: PPUSH
8946: LD_INT 22
8948: PUSH
8949: LD_VAR 0 2
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: LD_INT 21
8960: PUSH
8961: LD_INT 1
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: PPUSH
8972: CALL_OW 70
8976: PUSH
8977: LD_INT 0
8979: GREATER
8980: IFFALSE 9094
// begin for i in defendersList do
8982: LD_ADDR_VAR 0 6
8986: PUSH
8987: LD_VAR 0 3
8991: PUSH
8992: FOR_IN
8993: IFFALSE 9090
// begin AddComExitBuilding ( i ) ;
8995: LD_VAR 0 6
8999: PPUSH
9000: CALL_OW 182
// wait ( 0 0$1 ) ;
9004: LD_INT 35
9006: PPUSH
9007: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_type , unit_human ] ] ) do
9011: LD_ADDR_VAR 0 7
9015: PUSH
9016: LD_VAR 0 1
9020: PPUSH
9021: LD_INT 22
9023: PUSH
9024: LD_VAR 0 2
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PUSH
9033: LD_INT 21
9035: PUSH
9036: LD_INT 1
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PPUSH
9047: CALL_OW 70
9051: PUSH
9052: FOR_IN
9053: IFFALSE 9086
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9055: LD_VAR 0 6
9059: PPUSH
9060: LD_VAR 0 7
9064: PPUSH
9065: CALL_OW 250
9069: PPUSH
9070: LD_VAR 0 7
9074: PPUSH
9075: CALL_OW 251
9079: PPUSH
9080: CALL_OW 174
9084: GO 9052
9086: POP
9087: POP
// end ;
9088: GO 8992
9090: POP
9091: POP
// end else
9092: GO 9125
// begin for i in defendersList do
9094: LD_ADDR_VAR 0 6
9098: PUSH
9099: LD_VAR 0 3
9103: PUSH
9104: FOR_IN
9105: IFFALSE 9123
// ComEnterUnit ( i , build ) ;
9107: LD_VAR 0 6
9111: PPUSH
9112: LD_VAR 0 4
9116: PPUSH
9117: CALL_OW 120
9121: GO 9104
9123: POP
9124: POP
// end ; end ;
9125: LD_VAR 0 5
9129: RET
// export function RussianTrap ; var i ; begin
9130: LD_INT 0
9132: PPUSH
9133: PPUSH
// if GetSide ( Brian ) = 4 then
9134: LD_EXP 6
9138: PPUSH
9139: CALL_OW 255
9143: PUSH
9144: LD_INT 4
9146: EQUAL
9147: IFFALSE 9170
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9149: LD_EXP 6
9153: PUSH
9154: LD_EXP 7
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: LD_INT 0
9165: PPUSH
9166: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
9170: LD_ADDR_VAR 0 2
9174: PUSH
9175: LD_INT 22
9177: PUSH
9178: LD_INT 3
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 21
9187: PUSH
9188: LD_INT 1
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PPUSH
9199: CALL_OW 69
9203: PUSH
9204: FOR_IN
9205: IFFALSE 9279
// begin ComExitBuilding ( i ) ;
9207: LD_VAR 0 2
9211: PPUSH
9212: CALL_OW 122
// wait ( 0 0$1 ) ;
9216: LD_INT 35
9218: PPUSH
9219: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
9223: LD_VAR 0 2
9227: PPUSH
9228: LD_INT 120
9230: PPUSH
9231: LD_INT 56
9233: PPUSH
9234: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
9238: LD_VAR 0 2
9242: PPUSH
9243: LD_INT 111
9245: PPUSH
9246: LD_INT 37
9248: PPUSH
9249: CALL_OW 174
// AddComCrawl ( i ) ;
9253: LD_VAR 0 2
9257: PPUSH
9258: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
9262: LD_VAR 0 2
9266: PPUSH
9267: LD_INT 109
9269: PPUSH
9270: LD_INT 30
9272: PPUSH
9273: CALL_OW 174
// end ;
9277: GO 9204
9279: POP
9280: POP
// end ;
9281: LD_VAR 0 1
9285: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
9286: LD_INT 0
9288: PPUSH
9289: PPUSH
9290: PPUSH
9291: PPUSH
9292: PPUSH
// nearest_dist = 1000 ;
9293: LD_ADDR_VAR 0 4
9297: PUSH
9298: LD_INT 1000
9300: ST_TO_ADDR
// nearest_un = un ;
9301: LD_ADDR_VAR 0 5
9305: PUSH
9306: LD_VAR 0 1
9310: ST_TO_ADDR
// for sold in units do
9311: LD_ADDR_VAR 0 6
9315: PUSH
9316: LD_VAR 0 2
9320: PUSH
9321: FOR_IN
9322: IFFALSE 9378
// begin dist = GetDistUnits ( un , sold ) ;
9324: LD_ADDR_VAR 0 7
9328: PUSH
9329: LD_VAR 0 1
9333: PPUSH
9334: LD_VAR 0 6
9338: PPUSH
9339: CALL_OW 296
9343: ST_TO_ADDR
// if dist < nearest_dist then
9344: LD_VAR 0 7
9348: PUSH
9349: LD_VAR 0 4
9353: LESS
9354: IFFALSE 9376
// begin nearest_un = sold ;
9356: LD_ADDR_VAR 0 5
9360: PUSH
9361: LD_VAR 0 6
9365: ST_TO_ADDR
// nearest_dist = dist ;
9366: LD_ADDR_VAR 0 4
9370: PUSH
9371: LD_VAR 0 7
9375: ST_TO_ADDR
// end ; end ;
9376: GO 9321
9378: POP
9379: POP
// result := nearest_un ;
9380: LD_ADDR_VAR 0 3
9384: PUSH
9385: LD_VAR 0 5
9389: ST_TO_ADDR
// end ;
9390: LD_VAR 0 3
9394: RET
// export function PrepareDifficulty ; begin
9395: LD_INT 0
9397: PPUSH
// if Difficulty = 1 then
9398: LD_OWVAR 67
9402: PUSH
9403: LD_INT 1
9405: EQUAL
9406: IFFALSE 9469
// begin RemoveUnit ( brw2 ) ;
9408: LD_INT 9
9410: PPUSH
9411: CALL_OW 64
// RemoveUnit ( brw3 ) ;
9415: LD_INT 30
9417: PPUSH
9418: CALL_OW 64
// RemoveUnit ( brw4 ) ;
9422: LD_INT 52
9424: PPUSH
9425: CALL_OW 64
// RemoveUnit ( brw5 ) ;
9429: LD_INT 63
9431: PPUSH
9432: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
9436: LD_INT 5
9438: PUSH
9439: LD_INT 4
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PPUSH
9446: LD_INT 60
9448: PPUSH
9449: CALL_OW 240
// RuSoldMinLevel = 0 ;
9453: LD_ADDR_EXP 13
9457: PUSH
9458: LD_INT 0
9460: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
9461: LD_ADDR_EXP 14
9465: PUSH
9466: LD_INT 1
9468: ST_TO_ADDR
// end ; if Difficulty = 2 then
9469: LD_OWVAR 67
9473: PUSH
9474: LD_INT 2
9476: EQUAL
9477: IFFALSE 9526
// begin RemoveUnit ( brw3 ) ;
9479: LD_INT 30
9481: PPUSH
9482: CALL_OW 64
// RemoveUnit ( brw4 ) ;
9486: LD_INT 52
9488: PPUSH
9489: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
9493: LD_INT 5
9495: PUSH
9496: LD_INT 4
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PPUSH
9503: LD_INT 50
9505: PPUSH
9506: CALL_OW 240
// RuSoldMinLevel = 1 ;
9510: LD_ADDR_EXP 13
9514: PUSH
9515: LD_INT 1
9517: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
9518: LD_ADDR_EXP 14
9522: PUSH
9523: LD_INT 2
9525: ST_TO_ADDR
// end ; if Difficulty = 3 then
9526: LD_OWVAR 67
9530: PUSH
9531: LD_INT 3
9533: EQUAL
9534: IFFALSE 9569
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
9536: LD_INT 5
9538: PUSH
9539: LD_INT 4
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PPUSH
9546: LD_INT 40
9548: PPUSH
9549: CALL_OW 240
// RuSoldMinLevel = 2 ;
9553: LD_ADDR_EXP 13
9557: PUSH
9558: LD_INT 2
9560: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
9561: LD_ADDR_EXP 14
9565: PUSH
9566: LD_INT 3
9568: ST_TO_ADDR
// end ; end ;
9569: LD_VAR 0 1
9573: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
9574: LD_INT 0
9576: PPUSH
9577: PPUSH
9578: PPUSH
// if not vehicles then
9579: LD_VAR 0 1
9583: NOT
9584: IFFALSE 9588
// exit ;
9586: GO 9705
// for i in tmp do
9588: LD_ADDR_VAR 0 4
9592: PUSH
9593: LD_VAR 0 5
9597: PUSH
9598: FOR_IN
9599: IFFALSE 9689
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
9601: LD_ADDR_VAR 0 5
9605: PUSH
9606: LD_VAR 0 5
9610: PPUSH
9611: LD_INT 1
9613: PPUSH
9614: LD_VAR 0 4
9618: PPUSH
9619: CALL_OW 265
9623: PUSH
9624: LD_VAR 0 4
9628: PPUSH
9629: CALL_OW 262
9633: PUSH
9634: LD_VAR 0 4
9638: PPUSH
9639: CALL_OW 263
9643: PUSH
9644: LD_VAR 0 4
9648: PPUSH
9649: CALL_OW 264
9653: PUSH
9654: LD_VAR 0 4
9658: PPUSH
9659: CALL_OW 261
9663: PUSH
9664: LD_VAR 0 4
9668: PPUSH
9669: CALL_OW 256
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: PPUSH
9682: CALL_OW 2
9686: ST_TO_ADDR
// end ;
9687: GO 9598
9689: POP
9690: POP
// SaveVariable ( tmp , ident ) ;
9691: LD_VAR 0 5
9695: PPUSH
9696: LD_VAR 0 2
9700: PPUSH
9701: CALL_OW 39
// end ; end_of_file
9705: LD_VAR 0 3
9709: RET
// export function PrepareHeroes ; begin
9710: LD_INT 0
9712: PPUSH
// uc_side = 1 ;
9713: LD_ADDR_OWVAR 20
9717: PUSH
9718: LD_INT 1
9720: ST_TO_ADDR
// JMM = CreateCharacter ( JMM ) ;
9721: LD_ADDR_EXP 1
9725: PUSH
9726: LD_STRING JMM
9728: PPUSH
9729: CALL_OW 34
9733: ST_TO_ADDR
// SetLives ( JMM , LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ) ;
9734: LD_EXP 1
9738: PPUSH
9739: LD_STRING 01_JMMLifePoints_1
9741: PPUSH
9742: LD_INT 1000
9744: PPUSH
9745: CALL_OW 30
9749: PPUSH
9750: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
9754: LD_ADDR_EXP 9
9758: PUSH
9759: LD_STRING Powell
9761: PPUSH
9762: CALL_OW 25
9766: ST_TO_ADDR
// Bobby = CreateCharacter ( Bobby ) ;
9767: LD_ADDR_EXP 2
9771: PUSH
9772: LD_STRING Bobby
9774: PPUSH
9775: CALL_OW 34
9779: ST_TO_ADDR
// if Bobby then
9780: LD_EXP 2
9784: IFFALSE 9806
// SetLives ( Bobby , LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ) ;
9786: LD_EXP 2
9790: PPUSH
9791: LD_STRING 01_BobbyLifePoints_1
9793: PPUSH
9794: LD_INT 1000
9796: PPUSH
9797: CALL_OW 30
9801: PPUSH
9802: CALL_OW 234
// Cyrus = CreateCharacter ( Cyrus ) ;
9806: LD_ADDR_EXP 3
9810: PUSH
9811: LD_STRING Cyrus
9813: PPUSH
9814: CALL_OW 34
9818: ST_TO_ADDR
// if Cyrus then
9819: LD_EXP 3
9823: IFFALSE 9845
// SetLives ( Cyrus , LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ) ;
9825: LD_EXP 3
9829: PPUSH
9830: LD_STRING 01_CyrusLifePoints_1
9832: PPUSH
9833: LD_INT 1000
9835: PPUSH
9836: CALL_OW 30
9840: PPUSH
9841: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
9845: LD_ADDR_EXP 5
9849: PUSH
9850: LD_STRING Khatam
9852: PPUSH
9853: CALL_OW 25
9857: ST_TO_ADDR
// uc_side = 4 ;
9858: LD_ADDR_OWVAR 20
9862: PUSH
9863: LD_INT 4
9865: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
9866: LD_ADDR_EXP 4
9870: PUSH
9871: LD_STRING Lisa
9873: PPUSH
9874: CALL_OW 25
9878: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
9879: LD_EXP 1
9883: PPUSH
9884: LD_INT 3
9886: PPUSH
9887: LD_INT 0
9889: PPUSH
9890: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
9894: LD_EXP 2
9898: PPUSH
9899: LD_INT 3
9901: PPUSH
9902: LD_INT 0
9904: PPUSH
9905: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
9909: LD_EXP 3
9913: PPUSH
9914: LD_INT 3
9916: PPUSH
9917: LD_INT 0
9919: PPUSH
9920: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
9924: LD_EXP 4
9928: PPUSH
9929: LD_INT 5
9931: PPUSH
9932: LD_INT 0
9934: PPUSH
9935: CALL_OW 49
// ComCrawl ( Lisa ) ;
9939: LD_EXP 4
9943: PPUSH
9944: CALL_OW 137
// end ;
9948: LD_VAR 0 1
9952: RET
// export function PrepareLisSquad ; var i , un ; begin
9953: LD_INT 0
9955: PPUSH
9956: PPUSH
9957: PPUSH
// uc_side = 4 ;
9958: LD_ADDR_OWVAR 20
9962: PUSH
9963: LD_INT 4
9965: ST_TO_ADDR
// uc_nation = 1 ;
9966: LD_ADDR_OWVAR 21
9970: PUSH
9971: LD_INT 1
9973: ST_TO_ADDR
// hc_class := 2 ;
9974: LD_ADDR_OWVAR 28
9978: PUSH
9979: LD_INT 2
9981: ST_TO_ADDR
// hc_sex := sex_male ;
9982: LD_ADDR_OWVAR 27
9986: PUSH
9987: LD_INT 1
9989: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
9990: LD_ADDR_OWVAR 33
9994: PUSH
9995: LD_STRING SecondCharsGal
9997: ST_TO_ADDR
// hc_face_number := 62 ;
9998: LD_ADDR_OWVAR 34
10002: PUSH
10003: LD_INT 62
10005: ST_TO_ADDR
// hc_name := Mike Turner ;
10006: LD_ADDR_OWVAR 26
10010: PUSH
10011: LD_STRING Mike Turner
10013: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10014: LD_ADDR_OWVAR 30
10018: PUSH
10019: LD_INT 0
10021: PUSH
10022: LD_INT 1
10024: PUSH
10025: LD_INT 0
10027: PUSH
10028: LD_INT 0
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
10037: LD_ADDR_OWVAR 31
10041: PUSH
10042: LD_INT 1
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: LD_INT 0
10050: PUSH
10051: LD_INT 0
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: ST_TO_ADDR
// un := CreateHuman ;
10060: LD_ADDR_VAR 0 3
10064: PUSH
10065: CALL_OW 44
10069: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10070: LD_VAR 0 3
10074: PPUSH
10075: LD_INT 6
10077: PPUSH
10078: LD_INT 0
10080: PPUSH
10081: CALL_OW 49
// hc_sex := sex_female ;
10085: LD_ADDR_OWVAR 27
10089: PUSH
10090: LD_INT 2
10092: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
10093: LD_ADDR_OWVAR 33
10097: PUSH
10098: LD_STRING SecondCharsGal
10100: ST_TO_ADDR
// hc_face_number := 39 ;
10101: LD_ADDR_OWVAR 34
10105: PUSH
10106: LD_INT 39
10108: ST_TO_ADDR
// hc_name := Hallie Jillian ;
10109: LD_ADDR_OWVAR 26
10113: PUSH
10114: LD_STRING Hallie Jillian
10116: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
10117: LD_ADDR_OWVAR 30
10121: PUSH
10122: LD_INT 0
10124: PUSH
10125: LD_INT 0
10127: PUSH
10128: LD_INT 0
10130: PUSH
10131: LD_INT 1
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
10140: LD_ADDR_OWVAR 31
10144: PUSH
10145: LD_INT 0
10147: PUSH
10148: LD_INT 1
10150: PUSH
10151: LD_INT 0
10153: PUSH
10154: LD_INT 1
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: ST_TO_ADDR
// un := CreateHuman ;
10163: LD_ADDR_VAR 0 3
10167: PUSH
10168: CALL_OW 44
10172: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10173: LD_VAR 0 3
10177: PPUSH
10178: LD_INT 6
10180: PPUSH
10181: LD_INT 0
10183: PPUSH
10184: CALL_OW 49
// InitHc ;
10188: CALL_OW 19
// end ;
10192: LD_VAR 0 1
10196: RET
// export function PrepareOtherAmericans ; begin
10197: LD_INT 0
10199: PPUSH
// uc_side = 4 ;
10200: LD_ADDR_OWVAR 20
10204: PUSH
10205: LD_INT 4
10207: ST_TO_ADDR
// uc_nation = 1 ;
10208: LD_ADDR_OWVAR 21
10212: PUSH
10213: LD_INT 1
10215: ST_TO_ADDR
// hc_gallery =  ;
10216: LD_ADDR_OWVAR 33
10220: PUSH
10221: LD_STRING 
10223: ST_TO_ADDR
// hc_name = Brian Garvin ;
10224: LD_ADDR_OWVAR 26
10228: PUSH
10229: LD_STRING Brian Garvin
10231: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
10232: LD_INT 1
10234: PPUSH
10235: LD_INT 1
10237: PPUSH
10238: LD_INT 1
10240: PPUSH
10241: LD_INT 2
10243: PPUSH
10244: CALL_OW 12
10248: PPUSH
10249: CALL_OW 380
// Brian = CreateHuman ;
10253: LD_ADDR_EXP 6
10257: PUSH
10258: CALL_OW 44
10262: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
10263: LD_EXP 6
10267: PPUSH
10268: LD_INT 10
10270: PPUSH
10271: LD_INT 0
10273: PPUSH
10274: CALL_OW 49
// hc_name = Jerry White ;
10278: LD_ADDR_OWVAR 26
10282: PUSH
10283: LD_STRING Jerry White
10285: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
10286: LD_INT 1
10288: PPUSH
10289: LD_INT 3
10291: PPUSH
10292: LD_INT 1
10294: PPUSH
10295: LD_INT 2
10297: PPUSH
10298: CALL_OW 12
10302: PPUSH
10303: CALL_OW 380
// Jerry = CreateHuman ;
10307: LD_ADDR_EXP 7
10311: PUSH
10312: CALL_OW 44
10316: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
10317: LD_EXP 7
10321: PPUSH
10322: LD_INT 10
10324: PPUSH
10325: LD_INT 0
10327: PPUSH
10328: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
10332: LD_EXP 6
10336: PUSH
10337: LD_EXP 7
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PPUSH
10346: CALL_OW 140
// end ;
10350: LD_VAR 0 1
10354: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
10355: LD_INT 0
10357: PPUSH
10358: PPUSH
10359: PPUSH
// for i = 1 to 6 do
10360: LD_ADDR_VAR 0 2
10364: PUSH
10365: DOUBLE
10366: LD_INT 1
10368: DEC
10369: ST_TO_ADDR
10370: LD_INT 6
10372: PUSH
10373: FOR_TO
10374: IFFALSE 10468
// begin uc_side = 4 ;
10376: LD_ADDR_OWVAR 20
10380: PUSH
10381: LD_INT 4
10383: ST_TO_ADDR
// uc_nation = 1 ;
10384: LD_ADDR_OWVAR 21
10388: PUSH
10389: LD_INT 1
10391: ST_TO_ADDR
// hc_gallery =  ;
10392: LD_ADDR_OWVAR 33
10396: PUSH
10397: LD_STRING 
10399: ST_TO_ADDR
// hc_name =  ;
10400: LD_ADDR_OWVAR 26
10404: PUSH
10405: LD_STRING 
10407: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
10408: LD_INT 0
10410: PPUSH
10411: LD_INT 1
10413: PPUSH
10414: LD_INT 4
10416: PPUSH
10417: CALL_OW 12
10421: PPUSH
10422: LD_INT 1
10424: PPUSH
10425: CALL_OW 380
// un = CreateHuman ;
10429: LD_ADDR_VAR 0 3
10433: PUSH
10434: CALL_OW 44
10438: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
10439: LD_VAR 0 3
10443: PPUSH
10444: LD_INT 16
10446: PPUSH
10447: LD_INT 0
10449: PPUSH
10450: CALL_OW 49
// SetLives ( un , 1 ) ;
10454: LD_VAR 0 3
10458: PPUSH
10459: LD_INT 1
10461: PPUSH
10462: CALL_OW 234
// end ;
10466: GO 10373
10468: POP
10469: POP
// DyingSold = CreateHuman ;
10470: LD_ADDR_EXP 30
10474: PUSH
10475: CALL_OW 44
10479: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
10480: LD_EXP 30
10484: PPUSH
10485: LD_INT 16
10487: PPUSH
10488: LD_INT 0
10490: PPUSH
10491: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
10495: LD_EXP 30
10499: PPUSH
10500: LD_INT 250
10502: PPUSH
10503: CALL_OW 234
// end ; end_of_file
10507: LD_VAR 0 1
10511: RET
// export function PrepareRussianHeroes ; var tmp ; begin
10512: LD_INT 0
10514: PPUSH
10515: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) ;
10516: LD_ADDR_VAR 0 2
10520: PUSH
10521: LD_INT 22
10523: PUSH
10524: LD_INT 1
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 23
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 2
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: PPUSH
10556: CALL_OW 69
10560: ST_TO_ADDR
// uc_side = 6 ;
10561: LD_ADDR_OWVAR 20
10565: PUSH
10566: LD_INT 6
10568: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
10569: LD_ADDR_EXP 8
10573: PUSH
10574: LD_STRING Mikhail
10576: PPUSH
10577: CALL_OW 25
10581: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
10582: LD_EXP 8
10586: PPUSH
10587: LD_VAR 0 2
10591: PUSH
10592: LD_INT 1
10594: ARRAY
10595: PPUSH
10596: CALL_OW 250
10600: PPUSH
10601: LD_VAR 0 2
10605: PUSH
10606: LD_INT 1
10608: ARRAY
10609: PPUSH
10610: CALL_OW 251
10614: PPUSH
10615: LD_INT 3
10617: PPUSH
10618: LD_INT 1
10620: PPUSH
10621: CALL_OW 50
// end ;
10625: LD_VAR 0 1
10629: RET
// export function PrepareRussianCommander ; begin
10630: LD_INT 0
10632: PPUSH
// uc_side = 3 ;
10633: LD_ADDR_OWVAR 20
10637: PUSH
10638: LD_INT 3
10640: ST_TO_ADDR
// uc_nation = 3 ;
10641: LD_ADDR_OWVAR 21
10645: PUSH
10646: LD_INT 3
10648: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
10649: LD_ADDR_EXP 19
10653: PUSH
10654: LD_STRING Natasza
10656: PPUSH
10657: CALL_OW 25
10661: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
10662: LD_EXP 19
10666: PPUSH
10667: LD_INT 24
10669: PPUSH
10670: LD_INT 0
10672: PPUSH
10673: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
10677: LD_EXP 19
10681: PPUSH
10682: LD_INT 56
10684: PPUSH
10685: LD_INT 16
10687: PPUSH
10688: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
10692: LD_ADDR_EXP 24
10696: PUSH
10697: LD_EXP 24
10701: PUSH
10702: LD_EXP 19
10706: ADD
10707: ST_TO_ADDR
// end ;
10708: LD_VAR 0 1
10712: RET
// export function PrepareSouthBase ; var i , un ; begin
10713: LD_INT 0
10715: PPUSH
10716: PPUSH
10717: PPUSH
// for i = 1 to 2 do
10718: LD_ADDR_VAR 0 2
10722: PUSH
10723: DOUBLE
10724: LD_INT 1
10726: DEC
10727: ST_TO_ADDR
10728: LD_INT 2
10730: PUSH
10731: FOR_TO
10732: IFFALSE 10841
// begin uc_side = 3 ;
10734: LD_ADDR_OWVAR 20
10738: PUSH
10739: LD_INT 3
10741: ST_TO_ADDR
// uc_nation = 3 ;
10742: LD_ADDR_OWVAR 21
10746: PUSH
10747: LD_INT 3
10749: ST_TO_ADDR
// hc_gallery =  ;
10750: LD_ADDR_OWVAR 33
10754: PUSH
10755: LD_STRING 
10757: ST_TO_ADDR
// hc_name =  ;
10758: LD_ADDR_OWVAR 26
10762: PUSH
10763: LD_STRING 
10765: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
10766: LD_INT 1
10768: PPUSH
10769: LD_INT 1
10771: PPUSH
10772: LD_EXP 13
10776: PPUSH
10777: LD_EXP 14
10781: PPUSH
10782: CALL_OW 12
10786: PPUSH
10787: CALL_OW 380
// hc_importance = 0 ;
10791: LD_ADDR_OWVAR 32
10795: PUSH
10796: LD_INT 0
10798: ST_TO_ADDR
// un = CreateHuman ;
10799: LD_ADDR_VAR 0 3
10803: PUSH
10804: CALL_OW 44
10808: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
10809: LD_VAR 0 3
10813: PPUSH
10814: LD_INT 11
10816: PPUSH
10817: LD_INT 0
10819: PPUSH
10820: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
10824: LD_VAR 0 3
10828: PPUSH
10829: LD_INT 111
10831: PPUSH
10832: LD_INT 38
10834: PPUSH
10835: CALL_OW 118
// end ;
10839: GO 10731
10841: POP
10842: POP
// for i = 1 to Difficulty do
10843: LD_ADDR_VAR 0 2
10847: PUSH
10848: DOUBLE
10849: LD_INT 1
10851: DEC
10852: ST_TO_ADDR
10853: LD_OWVAR 67
10857: PUSH
10858: FOR_TO
10859: IFFALSE 10960
// begin uc_side = 3 ;
10861: LD_ADDR_OWVAR 20
10865: PUSH
10866: LD_INT 3
10868: ST_TO_ADDR
// uc_nation = 3 ;
10869: LD_ADDR_OWVAR 21
10873: PUSH
10874: LD_INT 3
10876: ST_TO_ADDR
// hc_gallery =  ;
10877: LD_ADDR_OWVAR 33
10881: PUSH
10882: LD_STRING 
10884: ST_TO_ADDR
// hc_name =  ;
10885: LD_ADDR_OWVAR 26
10889: PUSH
10890: LD_STRING 
10892: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
10893: LD_INT 0
10895: PPUSH
10896: LD_INT 3
10898: PPUSH
10899: LD_EXP 13
10903: PPUSH
10904: LD_EXP 14
10908: PPUSH
10909: CALL_OW 12
10913: PPUSH
10914: CALL_OW 380
// un = CreateHuman ;
10918: LD_ADDR_VAR 0 3
10922: PUSH
10923: CALL_OW 44
10927: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
10928: LD_VAR 0 3
10932: PPUSH
10933: LD_INT 12
10935: PPUSH
10936: LD_INT 0
10938: PPUSH
10939: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
10943: LD_VAR 0 3
10947: PPUSH
10948: LD_INT 111
10950: PPUSH
10951: LD_INT 28
10953: PPUSH
10954: CALL_OW 118
// end ;
10958: GO 10858
10960: POP
10961: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
10962: LD_INT 3
10964: PPUSH
10965: LD_INT 3
10967: PPUSH
10968: LD_INT 33
10970: PPUSH
10971: LD_EXP 13
10975: PPUSH
10976: LD_EXP 14
10980: PPUSH
10981: CALL_OW 12
10985: PPUSH
10986: LD_INT 1
10988: PPUSH
10989: LD_INT 1
10991: PUSH
10992: LD_INT 1
10994: PPUSH
10995: LD_INT 2
10997: PPUSH
10998: CALL_OW 12
11002: PUSH
11003: LD_INT 1
11005: PPUSH
11006: LD_INT 2
11008: PPUSH
11009: CALL_OW 12
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: LIST
11018: PUSH
11019: LD_OWVAR 67
11023: ARRAY
11024: PPUSH
11025: CALL 7693 0 6
// for i in UnitsInside ( arm2 ) do
11029: LD_ADDR_VAR 0 2
11033: PUSH
11034: LD_INT 33
11036: PPUSH
11037: CALL_OW 313
11041: PUSH
11042: FOR_IN
11043: IFFALSE 11063
// southBaseDefenders = southBaseDefenders ^ i ;
11045: LD_ADDR_EXP 25
11049: PUSH
11050: LD_EXP 25
11054: PUSH
11055: LD_VAR 0 2
11059: ADD
11060: ST_TO_ADDR
11061: GO 11042
11063: POP
11064: POP
// end ;
11065: LD_VAR 0 1
11069: RET
// export function PrepareNorthBase ; var i , un ; begin
11070: LD_INT 0
11072: PPUSH
11073: PPUSH
11074: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
11075: LD_ADDR_VAR 0 2
11079: PUSH
11080: DOUBLE
11081: LD_INT 1
11083: DEC
11084: ST_TO_ADDR
11085: LD_INT 1
11087: PPUSH
11088: LD_INT 2
11090: PPUSH
11091: CALL_OW 12
11095: PUSH
11096: LD_INT 2
11098: PPUSH
11099: LD_INT 3
11101: PPUSH
11102: CALL_OW 12
11106: PUSH
11107: LD_INT 3
11109: PPUSH
11110: LD_INT 4
11112: PPUSH
11113: CALL_OW 12
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: PUSH
11123: LD_OWVAR 67
11127: ARRAY
11128: PUSH
11129: FOR_TO
11130: IFFALSE 11216
// begin uc_side = 3 ;
11132: LD_ADDR_OWVAR 20
11136: PUSH
11137: LD_INT 3
11139: ST_TO_ADDR
// uc_nation = 3 ;
11140: LD_ADDR_OWVAR 21
11144: PUSH
11145: LD_INT 3
11147: ST_TO_ADDR
// hc_gallery =  ;
11148: LD_ADDR_OWVAR 33
11152: PUSH
11153: LD_STRING 
11155: ST_TO_ADDR
// hc_name =  ;
11156: LD_ADDR_OWVAR 26
11160: PUSH
11161: LD_STRING 
11163: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11164: LD_INT 0
11166: PPUSH
11167: LD_INT 1
11169: PPUSH
11170: LD_EXP 13
11174: PPUSH
11175: LD_EXP 14
11179: PPUSH
11180: CALL_OW 12
11184: PPUSH
11185: CALL_OW 380
// un = CreateHuman ;
11189: LD_ADDR_VAR 0 3
11193: PUSH
11194: CALL_OW 44
11198: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
11199: LD_VAR 0 3
11203: PPUSH
11204: LD_INT 14
11206: PPUSH
11207: LD_INT 0
11209: PPUSH
11210: CALL_OW 49
// end ;
11214: GO 11129
11216: POP
11217: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
11218: LD_INT 3
11220: PPUSH
11221: LD_INT 3
11223: PPUSH
11224: LD_INT 2
11226: PPUSH
11227: LD_EXP 13
11231: PPUSH
11232: LD_EXP 14
11236: PPUSH
11237: CALL_OW 12
11241: PPUSH
11242: LD_INT 1
11244: PPUSH
11245: LD_INT 1
11247: PPUSH
11248: LD_INT 2
11250: PPUSH
11251: CALL_OW 12
11255: PUSH
11256: LD_INT 1
11258: PPUSH
11259: LD_INT 3
11261: PPUSH
11262: CALL_OW 12
11266: PUSH
11267: LD_INT 1
11269: PPUSH
11270: LD_INT 3
11272: PPUSH
11273: CALL_OW 12
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: LIST
11282: PUSH
11283: LD_OWVAR 67
11287: ARRAY
11288: PPUSH
11289: CALL 7693 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
11293: LD_INT 3
11295: PPUSH
11296: LD_INT 3
11298: PPUSH
11299: LD_INT 23
11301: PPUSH
11302: LD_EXP 13
11306: PPUSH
11307: LD_EXP 14
11311: PPUSH
11312: CALL_OW 12
11316: PPUSH
11317: LD_INT 4
11319: PPUSH
11320: LD_INT 0
11322: PUSH
11323: LD_INT 1
11325: PUSH
11326: LD_INT 2
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: LD_OWVAR 67
11338: ARRAY
11339: PPUSH
11340: CALL 7693 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
11344: LD_INT 3
11346: PPUSH
11347: LD_INT 3
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: LD_EXP 13
11357: PPUSH
11358: LD_EXP 14
11362: PPUSH
11363: CALL_OW 12
11367: PPUSH
11368: LD_INT 2
11370: PPUSH
11371: LD_INT 1
11373: PUSH
11374: LD_INT 2
11376: PUSH
11377: LD_INT 2
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: LIST
11384: PUSH
11385: LD_OWVAR 67
11389: ARRAY
11390: PPUSH
11391: CALL 7693 0 6
// for i in UnitsInside ( arm1 ) do
11395: LD_ADDR_VAR 0 2
11399: PUSH
11400: LD_INT 2
11402: PPUSH
11403: CALL_OW 313
11407: PUSH
11408: FOR_IN
11409: IFFALSE 11429
// northBaseDefenders = northBaseDefenders ^ i ;
11411: LD_ADDR_EXP 24
11415: PUSH
11416: LD_EXP 24
11420: PUSH
11421: LD_VAR 0 2
11425: ADD
11426: ST_TO_ADDR
11427: GO 11408
11429: POP
11430: POP
// end ;
11431: LD_VAR 0 1
11435: RET
// export function PrepareOtherRussians ; var i , un ; begin
11436: LD_INT 0
11438: PPUSH
11439: PPUSH
11440: PPUSH
// for i = 1 to 2 do
11441: LD_ADDR_VAR 0 2
11445: PUSH
11446: DOUBLE
11447: LD_INT 1
11449: DEC
11450: ST_TO_ADDR
11451: LD_INT 2
11453: PUSH
11454: FOR_TO
11455: IFFALSE 11556
// begin uc_side = 3 ;
11457: LD_ADDR_OWVAR 20
11461: PUSH
11462: LD_INT 3
11464: ST_TO_ADDR
// uc_nation = 3 ;
11465: LD_ADDR_OWVAR 21
11469: PUSH
11470: LD_INT 3
11472: ST_TO_ADDR
// hc_gallery =  ;
11473: LD_ADDR_OWVAR 33
11477: PUSH
11478: LD_STRING 
11480: ST_TO_ADDR
// hc_name =  ;
11481: LD_ADDR_OWVAR 26
11485: PUSH
11486: LD_STRING 
11488: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11489: LD_INT 0
11491: PPUSH
11492: LD_INT 1
11494: PPUSH
11495: LD_EXP 13
11499: PPUSH
11500: LD_EXP 14
11504: PPUSH
11505: CALL_OW 12
11509: PPUSH
11510: CALL_OW 380
// un = CreateHuman ;
11514: LD_ADDR_VAR 0 3
11518: PUSH
11519: CALL_OW 44
11523: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
11524: LD_VAR 0 3
11528: PPUSH
11529: LD_INT 9
11531: PPUSH
11532: LD_INT 0
11534: PPUSH
11535: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
11539: LD_VAR 0 3
11543: PPUSH
11544: LD_INT 80
11546: PPUSH
11547: LD_INT 73
11549: PPUSH
11550: CALL_OW 118
// end ;
11554: GO 11454
11556: POP
11557: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
11558: LD_ADDR_VAR 0 2
11562: PUSH
11563: LD_INT 22
11565: PUSH
11566: LD_INT 3
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 30
11575: PUSH
11576: LD_INT 31
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 69
11591: PUSH
11592: FOR_IN
11593: IFFALSE 11621
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
11595: LD_EXP 13
11599: PPUSH
11600: LD_EXP 14
11604: PPUSH
11605: CALL_OW 12
11609: PPUSH
11610: LD_VAR 0 2
11614: PPUSH
11615: CALL 7803 0 2
11619: GO 11592
11621: POP
11622: POP
// end ;
11623: LD_VAR 0 1
11627: RET
// export function PrepareCargoBays ; begin
11628: LD_INT 0
11630: PPUSH
// uc_side = 3 ;
11631: LD_ADDR_OWVAR 20
11635: PUSH
11636: LD_INT 3
11638: ST_TO_ADDR
// uc_nation = 3 ;
11639: LD_ADDR_OWVAR 21
11643: PUSH
11644: LD_INT 3
11646: ST_TO_ADDR
// vc_engine = 1 ;
11647: LD_ADDR_OWVAR 39
11651: PUSH
11652: LD_INT 1
11654: ST_TO_ADDR
// vc_control = 1 ;
11655: LD_ADDR_OWVAR 38
11659: PUSH
11660: LD_INT 1
11662: ST_TO_ADDR
// vc_weapon = 51 ;
11663: LD_ADDR_OWVAR 40
11667: PUSH
11668: LD_INT 51
11670: ST_TO_ADDR
// vc_chassis = 22 ;
11671: LD_ADDR_OWVAR 37
11675: PUSH
11676: LD_INT 22
11678: ST_TO_ADDR
// cargo1 = CreateVehicle ;
11679: LD_ADDR_EXP 15
11683: PUSH
11684: CALL_OW 45
11688: ST_TO_ADDR
// cargo2 = CreateVehicle ;
11689: LD_ADDR_EXP 16
11693: PUSH
11694: CALL_OW 45
11698: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
11699: LD_EXP 15
11703: PPUSH
11704: LD_INT 13
11706: PPUSH
11707: LD_INT 0
11709: PPUSH
11710: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
11714: LD_EXP 16
11718: PPUSH
11719: LD_INT 13
11721: PPUSH
11722: LD_INT 0
11724: PPUSH
11725: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
11729: LD_EXP 15
11733: PPUSH
11734: LD_INT 2
11736: PPUSH
11737: LD_INT 70
11739: PUSH
11740: LD_INT 50
11742: PUSH
11743: LD_INT 30
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: LIST
11750: PUSH
11751: LD_OWVAR 67
11755: ARRAY
11756: PPUSH
11757: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
11761: LD_EXP 16
11765: PPUSH
11766: LD_INT 2
11768: PPUSH
11769: LD_INT 70
11771: PUSH
11772: LD_INT 50
11774: PUSH
11775: LD_INT 30
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: LIST
11782: PUSH
11783: LD_OWVAR 67
11787: ARRAY
11788: PPUSH
11789: CALL_OW 291
// hc_gallery =  ;
11793: LD_ADDR_OWVAR 33
11797: PUSH
11798: LD_STRING 
11800: ST_TO_ADDR
// hc_name =  ;
11801: LD_ADDR_OWVAR 26
11805: PUSH
11806: LD_STRING 
11808: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11809: LD_INT 1
11811: PPUSH
11812: LD_INT 3
11814: PPUSH
11815: LD_INT 1
11817: PPUSH
11818: LD_INT 2
11820: PPUSH
11821: CALL_OW 12
11825: PPUSH
11826: CALL_OW 380
// driver1 = CreateHuman ;
11830: LD_ADDR_EXP 17
11834: PUSH
11835: CALL_OW 44
11839: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
11840: LD_EXP 17
11844: PPUSH
11845: LD_EXP 15
11849: PPUSH
11850: CALL_OW 52
// hc_name = Nikolai Andreyev ;
11854: LD_ADDR_OWVAR 26
11858: PUSH
11859: LD_STRING Nikolai Andreyev
11861: ST_TO_ADDR
// driver2 = CreateHuman ;
11862: LD_ADDR_EXP 18
11866: PUSH
11867: CALL_OW 44
11871: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
11872: LD_EXP 18
11876: PPUSH
11877: LD_EXP 16
11881: PPUSH
11882: CALL_OW 52
// end ;
11886: LD_VAR 0 1
11890: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp ; begin
11891: LD_INT 0
11893: PPUSH
11894: PPUSH
11895: PPUSH
11896: PPUSH
11897: PPUSH
// uc_side = 3 ;
11898: LD_ADDR_OWVAR 20
11902: PUSH
11903: LD_INT 3
11905: ST_TO_ADDR
// uc_nation = 3 ;
11906: LD_ADDR_OWVAR 21
11910: PUSH
11911: LD_INT 3
11913: ST_TO_ADDR
// for i := 1 to count do
11914: LD_ADDR_VAR 0 4
11918: PUSH
11919: DOUBLE
11920: LD_INT 1
11922: DEC
11923: ST_TO_ADDR
11924: LD_VAR 0 1
11928: PUSH
11929: FOR_TO
11930: IFFALSE 12107
// begin vc_engine = 1 ;
11932: LD_ADDR_OWVAR 39
11936: PUSH
11937: LD_INT 1
11939: ST_TO_ADDR
// vc_control = 1 ;
11940: LD_ADDR_OWVAR 38
11944: PUSH
11945: LD_INT 1
11947: ST_TO_ADDR
// vc_weapon = 42 ;
11948: LD_ADDR_OWVAR 40
11952: PUSH
11953: LD_INT 42
11955: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
11956: LD_ADDR_OWVAR 37
11960: PUSH
11961: LD_INT 21
11963: PUSH
11964: LD_INT 22
11966: PUSH
11967: LD_INT 22
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: PUSH
11975: LD_OWVAR 67
11979: ARRAY
11980: ST_TO_ADDR
// veh = CreateVehicle ;
11981: LD_ADDR_VAR 0 5
11985: PUSH
11986: CALL_OW 45
11990: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
11991: LD_VAR 0 5
11995: PPUSH
11996: LD_VAR 0 2
12000: PPUSH
12001: LD_INT 0
12003: PPUSH
12004: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
12008: LD_ADDR_EXP 26
12012: PUSH
12013: LD_EXP 26
12017: PUSH
12018: LD_VAR 0 5
12022: ADD
12023: ST_TO_ADDR
// hc_gallery =  ;
12024: LD_ADDR_OWVAR 33
12028: PUSH
12029: LD_STRING 
12031: ST_TO_ADDR
// hc_name =  ;
12032: LD_ADDR_OWVAR 26
12036: PUSH
12037: LD_STRING 
12039: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12040: LD_INT 0
12042: PPUSH
12043: LD_INT 3
12045: PPUSH
12046: LD_EXP 13
12050: PPUSH
12051: LD_EXP 14
12055: PPUSH
12056: CALL_OW 12
12060: PPUSH
12061: CALL_OW 380
// un = CreateHuman ;
12065: LD_ADDR_VAR 0 6
12069: PUSH
12070: CALL_OW 44
12074: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12075: LD_VAR 0 6
12079: PPUSH
12080: LD_VAR 0 5
12084: PPUSH
12085: CALL_OW 52
// attackGroup = attackGroup ^ un ;
12089: LD_ADDR_EXP 26
12093: PUSH
12094: LD_EXP 26
12098: PUSH
12099: LD_VAR 0 6
12103: ADD
12104: ST_TO_ADDR
// end ;
12105: GO 11929
12107: POP
12108: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12109: LD_INT 0
12111: PPUSH
12112: LD_INT 2
12114: PPUSH
12115: LD_EXP 13
12119: PPUSH
12120: LD_EXP 14
12124: PPUSH
12125: CALL_OW 12
12129: PPUSH
12130: CALL_OW 380
// un = CreateHuman ;
12134: LD_ADDR_VAR 0 6
12138: PUSH
12139: CALL_OW 44
12143: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
12144: LD_ADDR_VAR 0 4
12148: PUSH
12149: DOUBLE
12150: LD_INT 1
12152: DEC
12153: ST_TO_ADDR
12154: LD_VAR 0 1
12158: PUSH
12159: LD_INT 2
12161: PUSH
12162: LD_INT 2
12164: MUL
12165: PLUS
12166: PUSH
12167: FOR_TO
12168: IFFALSE 12256
// begin hc_gallery =  ;
12170: LD_ADDR_OWVAR 33
12174: PUSH
12175: LD_STRING 
12177: ST_TO_ADDR
// hc_name =  ;
12178: LD_ADDR_OWVAR 26
12182: PUSH
12183: LD_STRING 
12185: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12186: LD_INT 1
12188: PPUSH
12189: LD_INT 1
12191: PPUSH
12192: LD_EXP 13
12196: PPUSH
12197: LD_EXP 14
12201: PPUSH
12202: CALL_OW 12
12206: PPUSH
12207: CALL_OW 380
// un = CreateHuman ;
12211: LD_ADDR_VAR 0 6
12215: PUSH
12216: CALL_OW 44
12220: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
12221: LD_VAR 0 6
12225: PPUSH
12226: LD_VAR 0 2
12230: PPUSH
12231: LD_INT 0
12233: PPUSH
12234: CALL_OW 49
// attackGroup = attackGroup ^ un ;
12238: LD_ADDR_EXP 26
12242: PUSH
12243: LD_EXP 26
12247: PUSH
12248: LD_VAR 0 6
12252: ADD
12253: ST_TO_ADDR
// end ;
12254: GO 12167
12256: POP
12257: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
12258: LD_ADDR_VAR 0 7
12262: PUSH
12263: LD_INT 26
12265: PPUSH
12266: LD_INT 22
12268: PUSH
12269: LD_INT 3
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 21
12278: PUSH
12279: LD_INT 1
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: LD_INT 26
12288: PUSH
12289: LD_INT 1
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: LIST
12300: PPUSH
12301: CALL_OW 70
12305: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
12306: LD_VAR 0 7
12310: PUSH
12311: LD_INT 1
12313: ARRAY
12314: PPUSH
12315: LD_STRING D9-Rus3-1
12317: PPUSH
12318: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
12322: LD_VAR 0 7
12326: PUSH
12327: LD_INT 2
12329: ARRAY
12330: PPUSH
12331: LD_STRING D9-Russ-1
12333: PPUSH
12334: CALL_OW 88
// for i in attackGroup do
12338: LD_ADDR_VAR 0 4
12342: PUSH
12343: LD_EXP 26
12347: PUSH
12348: FOR_IN
12349: IFFALSE 12368
// ComAgressiveMove ( i , 54 , 19 ) ;
12351: LD_VAR 0 4
12355: PPUSH
12356: LD_INT 54
12358: PPUSH
12359: LD_INT 19
12361: PPUSH
12362: CALL_OW 114
12366: GO 12348
12368: POP
12369: POP
// end ; end_of_file
12370: LD_VAR 0 3
12374: RET
// every 0 0$1 do
12375: GO 12377
12377: DISABLE
// begin enable ;
12378: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
12379: LD_INT 3
12381: PPUSH
12382: LD_INT 1
12384: PPUSH
12385: LD_INT 22
12387: PPUSH
12388: CALL 7939 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
12392: LD_INT 3
12394: PPUSH
12395: LD_INT 20
12397: PPUSH
12398: LD_INT 22
12400: PPUSH
12401: LD_INT 23
12403: PPUSH
12404: CALL 8185 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
12408: LD_INT 3
12410: PPUSH
12411: LD_INT 21
12413: PPUSH
12414: LD_INT 23
12416: PPUSH
12417: CALL 8464 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
12421: LD_INT 22
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: LD_EXP 24
12431: PPUSH
12432: LD_INT 2
12434: PPUSH
12435: CALL 8936 0 4
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
12439: LD_INT 23
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: LD_EXP 25
12449: PPUSH
12450: LD_INT 33
12452: PPUSH
12453: CALL 8936 0 4
// end ; end_of_file
12457: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 then
12458: LD_VAR 0 1
12462: PPUSH
12463: CALL_OW 255
12467: PUSH
12468: LD_INT 1
12470: EQUAL
12471: IFFALSE 12487
// deadsCounter = deadsCounter + 1 ;
12473: LD_ADDR_EXP 28
12477: PUSH
12478: LD_EXP 28
12482: PUSH
12483: LD_INT 1
12485: PLUS
12486: ST_TO_ADDR
// end ; end_of_file
12487: PPOPN 1
12489: END
// every 0 0$1 trigger IsDead ( JMM ) do
12490: LD_EXP 1
12494: PPUSH
12495: CALL_OW 301
12499: IFFALSE 12511
12501: GO 12503
12503: DISABLE
// YouLost ( JMM ) ;
12504: LD_STRING JMM
12506: PPUSH
12507: CALL_OW 104
12511: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
12512: LD_INT 1
12514: PPUSH
12515: CALL_OW 301
12519: PUSH
12520: LD_INT 10
12522: PPUSH
12523: CALL_OW 301
12527: OR
12528: IFFALSE 12540
12530: GO 12532
12532: DISABLE
// YouLost ( DepotDestroyed ) ;
12533: LD_STRING DepotDestroyed
12535: PPUSH
12536: CALL_OW 104
12540: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
12541: LD_INT 22
12543: PUSH
12544: LD_INT 1
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 21
12553: PUSH
12554: LD_INT 1
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: LD_INT 25
12563: PUSH
12564: LD_INT 2
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: PPUSH
12576: CALL_OW 69
12580: PUSH
12581: LD_INT 0
12583: EQUAL
12584: PUSH
12585: LD_INT 22
12587: PUSH
12588: LD_INT 4
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PUSH
12595: LD_INT 21
12597: PUSH
12598: LD_INT 1
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 25
12607: PUSH
12608: LD_INT 2
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: LIST
12619: PPUSH
12620: CALL_OW 69
12624: PUSH
12625: LD_INT 0
12627: EQUAL
12628: AND
12629: PUSH
12630: LD_INT 1
12632: PPUSH
12633: CALL_OW 255
12637: PUSH
12638: LD_INT 3
12640: EQUAL
12641: AND
12642: PUSH
12643: LD_INT 10
12645: PPUSH
12646: CALL_OW 255
12650: PUSH
12651: LD_INT 3
12653: EQUAL
12654: AND
12655: IFFALSE 12667
12657: GO 12659
12659: DISABLE
// YouLost ( Engineer ) ;
12660: LD_STRING Engineer
12662: PPUSH
12663: CALL_OW 104
12667: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and LastBattle = 1 do
12668: LD_INT 22
12670: PPUSH
12671: LD_INT 22
12673: PUSH
12674: LD_INT 1
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: LD_INT 21
12683: PUSH
12684: LD_INT 1
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PPUSH
12695: CALL_OW 70
12699: PUSH
12700: LD_INT 0
12702: EQUAL
12703: PUSH
12704: LD_INT 22
12706: PPUSH
12707: LD_INT 22
12709: PUSH
12710: LD_INT 3
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: LD_INT 21
12719: PUSH
12720: LD_INT 1
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PPUSH
12731: CALL_OW 70
12735: PUSH
12736: LD_INT 0
12738: GREATER
12739: AND
12740: PUSH
12741: LD_EXP 27
12745: PUSH
12746: LD_INT 1
12748: EQUAL
12749: AND
12750: IFFALSE 12762
12752: GO 12754
12754: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
12755: LD_STRING DepotCaptured
12757: PPUSH
12758: CALL_OW 104
12762: END
// export function PrepareTigers ; var i , un ; begin
12763: LD_INT 0
12765: PPUSH
12766: PPUSH
12767: PPUSH
// for i = 1 to Difficulty do
12768: LD_ADDR_VAR 0 2
12772: PUSH
12773: DOUBLE
12774: LD_INT 1
12776: DEC
12777: ST_TO_ADDR
12778: LD_OWVAR 67
12782: PUSH
12783: FOR_TO
12784: IFFALSE 12919
// begin hc_sex = sex_male ;
12786: LD_ADDR_OWVAR 27
12790: PUSH
12791: LD_INT 1
12793: ST_TO_ADDR
// uc_side = 0 ;
12794: LD_ADDR_OWVAR 20
12798: PUSH
12799: LD_INT 0
12801: ST_TO_ADDR
// uc_nation = nation_nature ;
12802: LD_ADDR_OWVAR 21
12806: PUSH
12807: LD_INT 0
12809: ST_TO_ADDR
// hc_class = class_tiger ;
12810: LD_ADDR_OWVAR 28
12814: PUSH
12815: LD_INT 14
12817: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
12818: LD_ADDR_OWVAR 31
12822: PUSH
12823: LD_EXP 14
12827: PUSH
12828: LD_INT 0
12830: PUSH
12831: LD_INT 0
12833: PUSH
12834: LD_INT 0
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
12843: LD_ADDR_OWVAR 35
12847: PUSH
12848: LD_INT 30
12850: PPUSH
12851: LD_INT 40
12853: PPUSH
12854: CALL_OW 12
12858: PUSH
12859: LD_INT 40
12861: PPUSH
12862: LD_INT 50
12864: PPUSH
12865: CALL_OW 12
12869: PUSH
12870: LD_INT 50
12872: PPUSH
12873: LD_INT 60
12875: PPUSH
12876: CALL_OW 12
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: LIST
12885: PUSH
12886: LD_OWVAR 67
12890: ARRAY
12891: ST_TO_ADDR
// un = CreateHuman ;
12892: LD_ADDR_VAR 0 3
12896: PUSH
12897: CALL_OW 44
12901: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12902: LD_VAR 0 3
12906: PPUSH
12907: LD_INT 27
12909: PPUSH
12910: LD_INT 0
12912: PPUSH
12913: CALL_OW 49
// end ;
12917: GO 12783
12919: POP
12920: POP
// end ; end_of_file
12921: LD_VAR 0 1
12925: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 do
12926: LD_INT 1
12928: PPUSH
12929: CALL_OW 255
12933: PUSH
12934: LD_INT 1
12936: EQUAL
12937: PUSH
12938: LD_INT 10
12940: PPUSH
12941: CALL_OW 255
12945: PUSH
12946: LD_INT 1
12948: EQUAL
12949: AND
12950: PUSH
12951: LD_EXP 20
12955: PUSH
12956: LD_INT 1
12958: EQUAL
12959: AND
12960: IFFALSE 13051
12962: GO 12964
12964: DISABLE
// begin wait ( [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ) ;
12965: LD_INT 8400
12967: PUSH
12968: LD_INT 6300
12970: PUSH
12971: LD_INT 4200
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: PUSH
12979: LD_OWVAR 67
12983: ARRAY
12984: PPUSH
12985: CALL_OW 67
// if cargoEscape = 1 then
12989: LD_EXP 20
12993: PUSH
12994: LD_INT 1
12996: EQUAL
12997: IFFALSE 13051
// begin SayRadio ( Powell , D6-Pow-1 ) ;
12999: LD_EXP 9
13003: PPUSH
13004: LD_STRING D6-Pow-1
13006: PPUSH
13007: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
13011: LD_EXP 1
13015: PPUSH
13016: LD_STRING D6-JMM-1
13018: PPUSH
13019: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
13023: LD_EXP 9
13027: PPUSH
13028: LD_STRING D6-Pow-2
13030: PPUSH
13031: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
13035: LD_EXP 1
13039: PPUSH
13040: LD_STRING D6-JMM-2
13042: PPUSH
13043: CALL_OW 88
// FinishMission ;
13047: CALL 13259 0 0
// end ; end ;
13051: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
13052: LD_INT 1
13054: PPUSH
13055: CALL_OW 255
13059: PUSH
13060: LD_INT 1
13062: EQUAL
13063: PUSH
13064: LD_INT 10
13066: PPUSH
13067: CALL_OW 255
13071: PUSH
13072: LD_INT 1
13074: EQUAL
13075: AND
13076: PUSH
13077: LD_EXP 20
13081: PUSH
13082: LD_INT 1
13084: GREATER
13085: AND
13086: IFFALSE 13153
13088: GO 13090
13090: DISABLE
13091: LD_INT 0
13093: PPUSH
// begin wait ( [ 9 9$0 , 8 8$0 , 7 7$0 ] [ Difficulty ] ) ;
13094: LD_INT 18900
13096: PUSH
13097: LD_INT 16800
13099: PUSH
13100: LD_INT 14700
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: LIST
13107: PUSH
13108: LD_OWVAR 67
13112: ARRAY
13113: PPUSH
13114: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
13118: LD_INT 1
13120: PUSH
13121: LD_INT 2
13123: PUSH
13124: LD_INT 3
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: LIST
13131: PUSH
13132: LD_OWVAR 67
13136: ARRAY
13137: PPUSH
13138: LD_INT 13
13140: PPUSH
13141: CALL 11891 0 2
// lastBattle = 1 ;
13145: LD_ADDR_EXP 27
13149: PUSH
13150: LD_INT 1
13152: ST_TO_ADDR
// end ;
13153: PPOPN 1
13155: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
13156: LD_EXP 27
13160: PUSH
13161: LD_INT 1
13163: EQUAL
13164: PUSH
13165: LD_INT 26
13167: PPUSH
13168: LD_INT 22
13170: PUSH
13171: LD_INT 3
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 21
13180: PUSH
13181: LD_INT 1
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PPUSH
13192: CALL_OW 70
13196: PUSH
13197: LD_INT 0
13199: EQUAL
13200: AND
13201: IFFALSE 13258
13203: GO 13205
13205: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
13206: LD_EXP 9
13210: PPUSH
13211: LD_STRING D6-Pow-1
13213: PPUSH
13214: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
13218: LD_EXP 1
13222: PPUSH
13223: LD_STRING D6-JMM-1
13225: PPUSH
13226: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
13230: LD_EXP 9
13234: PPUSH
13235: LD_STRING D6-Pow-2
13237: PPUSH
13238: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
13242: LD_EXP 1
13246: PPUSH
13247: LD_STRING D6-JMM-2
13249: PPUSH
13250: CALL_OW 88
// FinishMission ;
13254: CALL 13259 0 0
// end ;
13258: END
// export function FinishMission ; var tmp ; begin
13259: LD_INT 0
13261: PPUSH
13262: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] , [ f_lives , 251 ] ] ) ;
13263: LD_ADDR_VAR 0 2
13267: PUSH
13268: LD_INT 22
13270: PUSH
13271: LD_INT 1
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 21
13280: PUSH
13281: LD_INT 2
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 34
13290: PUSH
13291: LD_INT 42
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: LD_INT 24
13300: PUSH
13301: LD_INT 251
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: PPUSH
13314: CALL_OW 69
13318: ST_TO_ADDR
// if tmp then
13319: LD_VAR 0 2
13323: IFFALSE 13337
// SaveVehicles ( tmp , 02_tanks_1 ) ;
13325: LD_VAR 0 2
13329: PPUSH
13330: LD_STRING 02_tanks_1
13332: PPUSH
13333: CALL 9574 0 2
// if mikhailStatus = 1 then
13337: LD_EXP 21
13341: PUSH
13342: LD_INT 1
13344: EQUAL
13345: IFFALSE 13359
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
13347: LD_EXP 21
13351: PPUSH
13352: LD_STRING 02_mikhailStatus_1
13354: PPUSH
13355: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
13359: LD_INT 1
13361: PPUSH
13362: CALL_OW 274
13366: PPUSH
13367: LD_INT 1
13369: PPUSH
13370: CALL_OW 275
13374: PPUSH
13375: LD_STRING 02_resources_4
13377: PPUSH
13378: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
13382: LD_INT 1
13384: PPUSH
13385: CALL_OW 274
13389: PPUSH
13390: LD_INT 1
13392: PPUSH
13393: CALL_OW 275
13397: PUSH
13398: LD_INT 200
13400: GREATEREQUAL
13401: IFFALSE 13415
// begin AddMedal ( Cans , 1 ) ;
13403: LD_STRING Cans
13405: PPUSH
13406: LD_INT 1
13408: PPUSH
13409: CALL_OW 101
// end else
13413: GO 13426
// begin AddMedal ( Cans , - 1 ) ;
13415: LD_STRING Cans
13417: PPUSH
13418: LD_INT 1
13420: NEG
13421: PPUSH
13422: CALL_OW 101
// end ; if deadsCounter <= 3 then
13426: LD_EXP 28
13430: PUSH
13431: LD_INT 3
13433: LESSEQUAL
13434: IFFALSE 13448
// begin AddMedal ( Deaths , 1 ) ;
13436: LD_STRING Deaths
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: CALL_OW 101
// end else
13446: GO 13459
// begin AddMedal ( Deaths , - 1 ) ;
13448: LD_STRING Deaths
13450: PPUSH
13451: LD_INT 1
13453: NEG
13454: PPUSH
13455: CALL_OW 101
// end ; if mikhailStatus = 0 then
13459: LD_EXP 21
13463: PUSH
13464: LD_INT 0
13466: EQUAL
13467: IFFALSE 13480
// AddMedal ( Prisoner , - 1 ) ;
13469: LD_STRING Prisoner
13471: PPUSH
13472: LD_INT 1
13474: NEG
13475: PPUSH
13476: CALL_OW 101
// if mikhailStatus = 1 then
13480: LD_EXP 21
13484: PUSH
13485: LD_INT 1
13487: EQUAL
13488: IFFALSE 13500
// AddMedal ( Prisoner , 1 ) ;
13490: LD_STRING Prisoner
13492: PPUSH
13493: LD_INT 1
13495: PPUSH
13496: CALL_OW 101
// if mikhailStatus = 2 then
13500: LD_EXP 21
13504: PUSH
13505: LD_INT 2
13507: EQUAL
13508: IFFALSE 13520
// AddMedal ( Prisoner , 2 ) ;
13510: LD_STRING Prisoner
13512: PPUSH
13513: LD_INT 2
13515: PPUSH
13516: CALL_OW 101
// if mikhailStatus = 3 then
13520: LD_EXP 21
13524: PUSH
13525: LD_INT 3
13527: EQUAL
13528: IFFALSE 13541
// AddMedal ( Prisoner , - 2 ) ;
13530: LD_STRING Prisoner
13532: PPUSH
13533: LD_INT 2
13535: NEG
13536: PPUSH
13537: CALL_OW 101
// GiveMedals ( MAIN ) ;
13541: LD_STRING MAIN
13543: PPUSH
13544: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
13548: LD_INT 22
13550: PUSH
13551: LD_INT 1
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 23
13560: PUSH
13561: LD_INT 1
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: LD_INT 21
13570: PUSH
13571: LD_INT 1
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: LIST
13582: PPUSH
13583: CALL_OW 69
13587: PPUSH
13588: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
13592: LD_EXP 1
13596: PPUSH
13597: LD_STRING JMM
13599: PPUSH
13600: CALL_OW 38
// SaveCharacters ( Bobby , Bobby ) ;
13604: LD_EXP 2
13608: PPUSH
13609: LD_STRING Bobby
13611: PPUSH
13612: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
13616: LD_EXP 3
13620: PPUSH
13621: LD_STRING Cyrus
13623: PPUSH
13624: CALL_OW 38
// SaveCharacters ( Lisa , Lisa ) ;
13628: LD_EXP 4
13632: PPUSH
13633: LD_STRING Lisa
13635: PPUSH
13636: CALL_OW 38
// SaveCharacters ( Khatam , Khatam ) ;
13640: LD_EXP 5
13644: PPUSH
13645: LD_STRING Khatam
13647: PPUSH
13648: CALL_OW 38
// if IsOK ( Brian ) then
13652: LD_EXP 6
13656: PPUSH
13657: CALL_OW 302
13661: IFFALSE 13675
// SaveCharacters ( Brian , Brian ) ;
13663: LD_EXP 6
13667: PPUSH
13668: LD_STRING Brian
13670: PPUSH
13671: CALL_OW 38
// if IsOk ( Jerry ) then
13675: LD_EXP 7
13679: PPUSH
13680: CALL_OW 302
13684: IFFALSE 13698
// SaveCharacters ( Jerry , Jerry ) ;
13686: LD_EXP 7
13690: PPUSH
13691: LD_STRING Jerry
13693: PPUSH
13694: CALL_OW 38
// if mikhailStatus = 1 then
13698: LD_EXP 21
13702: PUSH
13703: LD_INT 1
13705: EQUAL
13706: IFFALSE 13720
// SaveCharacters ( Mikhail , Mikhail ) ;
13708: LD_EXP 8
13712: PPUSH
13713: LD_STRING Mikhail
13715: PPUSH
13716: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
13720: LD_INT 50
13722: PUSH
13723: EMPTY
13724: LIST
13725: PUSH
13726: LD_INT 22
13728: PUSH
13729: LD_INT 1
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 21
13738: PUSH
13739: LD_INT 1
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: PPUSH
13751: CALL_OW 69
13755: PUSH
13756: LD_EXP 1
13760: PUSH
13761: LD_EXP 2
13765: PUSH
13766: LD_EXP 3
13770: PUSH
13771: LD_EXP 4
13775: PUSH
13776: LD_EXP 5
13780: PUSH
13781: LD_EXP 6
13785: PUSH
13786: LD_EXP 7
13790: PUSH
13791: LD_EXP 8
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: DIFF
13806: PPUSH
13807: LD_STRING 02_other_survivors
13809: PPUSH
13810: CALL_OW 38
// YouWin ;
13814: CALL_OW 103
// end ;
13818: LD_VAR 0 1
13822: RET
