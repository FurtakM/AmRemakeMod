// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export deadsCounter ; export spotCorpses ; starting begin RuSoldMinLevel = 0 ;
   0: LD_ADDR_EXP 13
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
   8: LD_ADDR_EXP 14
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// hpJMM = 0 ;
  16: LD_ADDR_EXP 10
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpBobby = 0 ;
  24: LD_ADDR_EXP 11
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpCyrus = 0 ;
  32: LD_ADDR_EXP 12
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// cargoEscape = 0 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// mikhailStatus = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailInBase = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailDepot = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// lastBattle = 0 ;
  72: LD_ADDR_EXP 26
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// deadsCounter = 0 ;
  80: LD_ADDR_EXP 27
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// spotCorpses = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// southBaseDefenders = [ ] ;
  96: LD_ADDR_EXP 24
 100: PUSH
 101: EMPTY
 102: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 103: LD_ADDR_EXP 23
 107: PUSH
 108: EMPTY
 109: ST_TO_ADDR
// attackGroup = [ ] ;
 110: LD_ADDR_EXP 25
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// RandomizeAll ;
 117: CALL_OW 11
// InGameOn ;
 121: CALL_OW 8
// Resetfog ;
 125: CALL_OW 335
// PrepareDifficulty ;
 129: CALL 9262 0 0
// PrepareRussianCommander ;
 133: CALL 10820 0 0
// PrepareSouthBase ;
 137: CALL 10946 0 0
// PrepareNorthBase ;
 141: CALL 11303 0 0
// PrepareOtherRussians ;
 145: CALL 11669 0 0
// PrepareHeroes ;
 149: CALL 10042 0 0
// PrepareLisSquad ;
 153: CALL 10285 0 0
// end ; end_of_file
 157: END
// every 1 do var tmp ;
 158: GO 160
 160: DISABLE
 161: LD_INT 0
 163: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 164: LD_EXP 1
 168: PPUSH
 169: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 173: LD_ADDR_VAR 0 1
 177: PUSH
 178: LD_INT 22
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 21
 190: PUSH
 191: LD_INT 1
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PPUSH
 202: CALL_OW 69
 206: PUSH
 207: LD_EXP 4
 211: PUSH
 212: EMPTY
 213: LIST
 214: DIFF
 215: ST_TO_ADDR
// if Cyrus and Bobby then
 216: LD_EXP 3
 220: PUSH
 221: LD_EXP 2
 225: AND
 226: IFFALSE 556
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 228: LD_EXP 3
 232: PPUSH
 233: LD_INT 43
 235: PPUSH
 236: LD_INT 72
 238: PPUSH
 239: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 243: LD_EXP 2
 247: PPUSH
 248: LD_INT 44
 250: PPUSH
 251: LD_INT 70
 253: PPUSH
 254: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 258: LD_EXP 1
 262: PPUSH
 263: LD_INT 46
 265: PPUSH
 266: LD_INT 73
 268: PPUSH
 269: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 273: LD_EXP 3
 277: PPUSH
 278: LD_STRING D1a-Cyrus-1
 280: PPUSH
 281: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 285: LD_EXP 1
 289: PPUSH
 290: LD_STRING D1a-JMM-1
 292: PPUSH
 293: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 297: LD_EXP 3
 301: PPUSH
 302: LD_INT 37
 304: PPUSH
 305: LD_INT 66
 307: PPUSH
 308: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 312: LD_EXP 2
 316: PPUSH
 317: LD_INT 41
 319: PPUSH
 320: LD_INT 67
 322: PPUSH
 323: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_INT 38
 334: PPUSH
 335: LD_INT 64
 337: PPUSH
 338: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 342: LD_EXP 2
 346: PPUSH
 347: LD_STRING D1a-Bobby-2
 349: PPUSH
 350: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 354: LD_EXP 3
 358: PPUSH
 359: LD_INT 35
 361: PPUSH
 362: LD_INT 62
 364: PPUSH
 365: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 369: LD_EXP 2
 373: PPUSH
 374: LD_INT 32
 376: PPUSH
 377: LD_INT 60
 379: PPUSH
 380: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 384: LD_EXP 1
 388: PPUSH
 389: LD_INT 35
 391: PPUSH
 392: LD_INT 60
 394: PPUSH
 395: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 399: LD_EXP 1
 403: PPUSH
 404: LD_STRING D1a-JMM-2
 406: PPUSH
 407: CALL_OW 88
// ComWalk ( Lisa ) ;
 411: LD_EXP 4
 415: PPUSH
 416: CALL_OW 138
// wait ( 0 0$1 ) ;
 420: LD_INT 35
 422: PPUSH
 423: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 427: LD_EXP 4
 431: PPUSH
 432: LD_EXP 1
 436: PPUSH
 437: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 441: LD_EXP 1
 445: PUSH
 446: LD_EXP 3
 450: PUSH
 451: LD_EXP 2
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: PPUSH
 461: LD_EXP 4
 465: PPUSH
 466: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 470: LD_VAR 0 1
 474: PUSH
 475: LD_INT 1
 477: ARRAY
 478: PPUSH
 479: LD_INT 33
 481: PPUSH
 482: LD_INT 55
 484: PPUSH
 485: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 489: LD_VAR 0 1
 493: PUSH
 494: LD_INT 2
 496: ARRAY
 497: PPUSH
 498: LD_INT 30
 500: PPUSH
 501: LD_INT 54
 503: PPUSH
 504: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 508: LD_VAR 0 1
 512: PUSH
 513: LD_INT 1
 515: ARRAY
 516: PPUSH
 517: LD_EXP 1
 521: PPUSH
 522: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 526: LD_VAR 0 1
 530: PUSH
 531: LD_INT 2
 533: ARRAY
 534: PPUSH
 535: LD_EXP 1
 539: PPUSH
 540: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 544: LD_EXP 4
 548: PPUSH
 549: LD_STRING D1a-Lisa-2
 551: PPUSH
 552: CALL_OW 88
// end ; if Cyrus and not Bobby then
 556: LD_EXP 3
 560: PUSH
 561: LD_EXP 2
 565: NOT
 566: AND
 567: IFFALSE 772
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 569: LD_EXP 3
 573: PPUSH
 574: LD_INT 43
 576: PPUSH
 577: LD_INT 72
 579: PPUSH
 580: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 584: LD_EXP 1
 588: PPUSH
 589: LD_INT 46
 591: PPUSH
 592: LD_INT 73
 594: PPUSH
 595: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 599: LD_EXP 3
 603: PPUSH
 604: LD_STRING D1a-Cyrus-1
 606: PPUSH
 607: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 611: LD_EXP 1
 615: PPUSH
 616: LD_STRING D1a-JMM-1
 618: PPUSH
 619: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 623: LD_EXP 3
 627: PPUSH
 628: LD_INT 37
 630: PPUSH
 631: LD_INT 66
 633: PPUSH
 634: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 638: LD_EXP 1
 642: PPUSH
 643: LD_INT 38
 645: PPUSH
 646: LD_INT 64
 648: PPUSH
 649: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 653: LD_EXP 3
 657: PPUSH
 658: LD_STRING D1a-Cyrus-2
 660: PPUSH
 661: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 665: LD_EXP 3
 669: PPUSH
 670: LD_INT 35
 672: PPUSH
 673: LD_INT 62
 675: PPUSH
 676: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 680: LD_EXP 1
 684: PPUSH
 685: LD_INT 35
 687: PPUSH
 688: LD_INT 60
 690: PPUSH
 691: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 695: LD_EXP 1
 699: PPUSH
 700: LD_STRING D1a-JMM-2
 702: PPUSH
 703: CALL_OW 88
// ComWalk ( Lisa ) ;
 707: LD_EXP 4
 711: PPUSH
 712: CALL_OW 138
// wait ( 0 0$1 ) ;
 716: LD_INT 35
 718: PPUSH
 719: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 723: LD_EXP 4
 727: PPUSH
 728: LD_EXP 1
 732: PPUSH
 733: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 737: LD_EXP 4
 741: PPUSH
 742: LD_STRING D1a-Lisa-2
 744: PPUSH
 745: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 749: LD_EXP 1
 753: PUSH
 754: LD_EXP 3
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PPUSH
 763: LD_EXP 4
 767: PPUSH
 768: CALL_OW 119
// end ; if not Cyrus and Bobby then
 772: LD_EXP 3
 776: NOT
 777: PUSH
 778: LD_EXP 2
 782: AND
 783: IFFALSE 1062
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 785: LD_EXP 2
 789: PPUSH
 790: LD_INT 44
 792: PPUSH
 793: LD_INT 70
 795: PPUSH
 796: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 800: LD_EXP 1
 804: PPUSH
 805: LD_INT 46
 807: PPUSH
 808: LD_INT 73
 810: PPUSH
 811: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 815: LD_EXP 2
 819: PPUSH
 820: LD_STRING D1a-Bobby-1
 822: PPUSH
 823: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 827: LD_EXP 1
 831: PPUSH
 832: LD_STRING D1a-JMM-1
 834: PPUSH
 835: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 839: LD_EXP 2
 843: PPUSH
 844: LD_INT 37
 846: PPUSH
 847: LD_INT 66
 849: PPUSH
 850: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 854: LD_EXP 1
 858: PPUSH
 859: LD_INT 38
 861: PPUSH
 862: LD_INT 64
 864: PPUSH
 865: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 869: LD_EXP 2
 873: PPUSH
 874: LD_STRING D1a-Bobby-2
 876: PPUSH
 877: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 881: LD_EXP 2
 885: PPUSH
 886: LD_INT 35
 888: PPUSH
 889: LD_INT 62
 891: PPUSH
 892: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 896: LD_EXP 1
 900: PPUSH
 901: LD_INT 35
 903: PPUSH
 904: LD_INT 60
 906: PPUSH
 907: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 911: LD_EXP 1
 915: PPUSH
 916: LD_STRING D1a-JMM-2
 918: PPUSH
 919: CALL_OW 88
// ComWalk ( Lisa ) ;
 923: LD_EXP 4
 927: PPUSH
 928: CALL_OW 138
// wait ( 0 0$1 ) ;
 932: LD_INT 35
 934: PPUSH
 935: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 939: LD_EXP 4
 943: PPUSH
 944: LD_EXP 1
 948: PPUSH
 949: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 953: LD_EXP 1
 957: PUSH
 958: LD_EXP 3
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PPUSH
 967: LD_EXP 4
 971: PPUSH
 972: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 976: LD_VAR 0 1
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_INT 33
 987: PPUSH
 988: LD_INT 55
 990: PPUSH
 991: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 995: LD_VAR 0 1
 999: PUSH
1000: LD_INT 2
1002: ARRAY
1003: PPUSH
1004: LD_INT 30
1006: PPUSH
1007: LD_INT 54
1009: PPUSH
1010: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1014: LD_VAR 0 1
1018: PUSH
1019: LD_INT 1
1021: ARRAY
1022: PPUSH
1023: LD_EXP 1
1027: PPUSH
1028: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1032: LD_VAR 0 1
1036: PUSH
1037: LD_INT 2
1039: ARRAY
1040: PPUSH
1041: LD_EXP 1
1045: PPUSH
1046: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1050: LD_EXP 4
1054: PPUSH
1055: LD_STRING D1a-Lisa-2
1057: PPUSH
1058: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1062: LD_EXP 3
1066: NOT
1067: PUSH
1068: LD_EXP 2
1072: NOT
1073: AND
1074: IFFALSE 1288
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1076: LD_EXP 1
1080: PPUSH
1081: LD_INT 37
1083: PPUSH
1084: LD_INT 66
1086: PPUSH
1087: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1091: LD_EXP 1
1095: PPUSH
1096: LD_STRING D1b-JMM-1
1098: PPUSH
1099: CALL_OW 88
// ComCrawl ( JMM ) ;
1103: LD_EXP 1
1107: PPUSH
1108: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1112: LD_EXP 1
1116: PPUSH
1117: LD_INT 35
1119: PPUSH
1120: LD_INT 60
1122: PPUSH
1123: CALL_OW 171
// wait ( 0 0$8 ) ;
1127: LD_INT 280
1129: PPUSH
1130: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_STRING D1b-JMM-1a
1141: PPUSH
1142: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1146: LD_EXP 1
1150: PUSH
1151: LD_EXP 4
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PPUSH
1160: CALL_OW 138
// wait ( 0 0$1 ) ;
1164: LD_INT 35
1166: PPUSH
1167: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1171: LD_EXP 4
1175: PPUSH
1176: LD_EXP 1
1180: PPUSH
1181: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1185: LD_EXP 1
1189: PUSH
1190: EMPTY
1191: LIST
1192: PPUSH
1193: LD_EXP 4
1197: PPUSH
1198: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1202: LD_VAR 0 1
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: LD_INT 33
1213: PPUSH
1214: LD_INT 55
1216: PPUSH
1217: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1221: LD_VAR 0 1
1225: PUSH
1226: LD_INT 2
1228: ARRAY
1229: PPUSH
1230: LD_INT 30
1232: PPUSH
1233: LD_INT 54
1235: PPUSH
1236: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1240: LD_VAR 0 1
1244: PUSH
1245: LD_INT 1
1247: ARRAY
1248: PPUSH
1249: LD_EXP 1
1253: PPUSH
1254: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1258: LD_VAR 0 1
1262: PUSH
1263: LD_INT 2
1265: ARRAY
1266: PPUSH
1267: LD_EXP 1
1271: PPUSH
1272: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1276: LD_EXP 4
1280: PPUSH
1281: LD_STRING D1b-Lisa-1
1283: PPUSH
1284: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1288: LD_EXP 1
1292: PPUSH
1293: LD_STRING D1-JMM-1
1295: PPUSH
1296: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1300: LD_EXP 4
1304: PPUSH
1305: LD_STRING D1-Lisa-1
1307: PPUSH
1308: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1312: LD_EXP 1
1316: PPUSH
1317: LD_STRING D1-JMM-2
1319: PPUSH
1320: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1324: LD_EXP 9
1328: PPUSH
1329: LD_STRING D1-Pow-2
1331: PPUSH
1332: CALL_OW 94
// if Cyrus then
1336: LD_EXP 3
1340: IFFALSE 1366
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1342: LD_EXP 3
1346: PPUSH
1347: LD_STRING D1-Cyrus-2
1349: PPUSH
1350: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1354: LD_EXP 1
1358: PPUSH
1359: LD_STRING D1-JMM-3
1361: PPUSH
1362: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1366: LD_EXP 9
1370: PPUSH
1371: LD_STRING D1-Pow-3
1373: PPUSH
1374: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1378: LD_EXP 1
1382: PPUSH
1383: LD_STRING D1-JMM-4
1385: PPUSH
1386: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1390: LD_EXP 9
1394: PPUSH
1395: LD_STRING D1-Pow-4
1397: PPUSH
1398: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1402: LD_EXP 9
1406: PPUSH
1407: LD_STRING D1-Pow-4a
1409: PPUSH
1410: CALL_OW 94
// if Cyrus then
1414: LD_EXP 3
1418: IFFALSE 1432
// Say ( Cyrus , D1-Cyrus-4 ) ;
1420: LD_EXP 3
1424: PPUSH
1425: LD_STRING D1-Cyrus-4
1427: PPUSH
1428: CALL_OW 88
// if Bobby then
1432: LD_EXP 2
1436: IFFALSE 1474
// begin Say ( Bobby , D1-Bobby-4 ) ;
1438: LD_EXP 2
1442: PPUSH
1443: LD_STRING D1-Bobby-4
1445: PPUSH
1446: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1450: LD_EXP 4
1454: PPUSH
1455: LD_STRING D1-Lisa-4
1457: PPUSH
1458: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1462: LD_EXP 1
1466: PPUSH
1467: LD_STRING D1-JMM-5
1469: PPUSH
1470: CALL_OW 88
// end ; InGameOff ;
1474: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1478: LD_INT 22
1480: PUSH
1481: LD_INT 4
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 69
1492: PPUSH
1493: LD_INT 1
1495: PPUSH
1496: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1500: LD_STRING M1
1502: PPUSH
1503: CALL_OW 337
// SaveForQuickRestart ;
1507: CALL_OW 22
// end ;
1511: PPOPN 1
1513: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1514: LD_INT 7
1516: PPUSH
1517: LD_INT 22
1519: PUSH
1520: LD_INT 1
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PPUSH
1527: CALL_OW 70
1531: PUSH
1532: LD_INT 0
1534: GREATER
1535: IFFALSE 1905
1537: GO 1539
1539: DISABLE
// begin InGameOn ;
1540: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1544: LD_INT 22
1546: PUSH
1547: LD_INT 1
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 21
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: EMPTY
1561: LIST
1562: LIST
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PPUSH
1568: CALL_OW 69
1572: PPUSH
1573: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1577: LD_INT 24
1579: PPUSH
1580: LD_INT 32
1582: PPUSH
1583: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1587: LD_EXP 5
1591: PPUSH
1592: LD_INT 4
1594: PPUSH
1595: LD_INT 1
1597: PPUSH
1598: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1602: LD_EXP 5
1606: PPUSH
1607: LD_INT 4
1609: PPUSH
1610: CALL_OW 336
// wait ( 0 0$1 ) ;
1614: LD_INT 35
1616: PPUSH
1617: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1621: LD_EXP 5
1625: PPUSH
1626: LD_INT 27
1628: PPUSH
1629: LD_INT 38
1631: PPUSH
1632: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1636: LD_EXP 5
1640: PPUSH
1641: LD_EXP 1
1645: PPUSH
1646: CALL_OW 179
// wait ( 0 0$1 ) ;
1650: LD_INT 35
1652: PPUSH
1653: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1657: LD_EXP 5
1661: PPUSH
1662: LD_STRING D2a-Khat-1
1664: PPUSH
1665: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1669: LD_EXP 1
1673: PPUSH
1674: LD_STRING D2a-JMM-1
1676: PPUSH
1677: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1681: LD_EXP 5
1685: PPUSH
1686: LD_STRING D2a-Khat-2
1688: PPUSH
1689: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1693: LD_EXP 1
1697: PPUSH
1698: LD_STRING D2a-JMM-2
1700: PPUSH
1701: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1705: LD_EXP 5
1709: PPUSH
1710: LD_STRING D2a-Khat-3
1712: PPUSH
1713: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1717: LD_EXP 1
1721: PPUSH
1722: LD_STRING D2a-JMM-3
1724: PPUSH
1725: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1729: LD_EXP 5
1733: PPUSH
1734: LD_STRING D2a-Khat-4
1736: PPUSH
1737: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1741: LD_EXP 1
1745: PPUSH
1746: LD_STRING D2a-JMM-4
1748: PPUSH
1749: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1753: LD_EXP 5
1757: PPUSH
1758: LD_STRING D2a-Khat-5
1760: PPUSH
1761: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1765: LD_EXP 1
1769: PPUSH
1770: LD_STRING D2a-JMM-5
1772: PPUSH
1773: CALL_OW 88
// InGameOff ;
1777: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
1781: LD_INT 22
1783: PUSH
1784: LD_INT 1
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 21
1793: PUSH
1794: LD_INT 1
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 3
1803: PUSH
1804: LD_INT 24
1806: PUSH
1807: LD_INT 1000
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: LIST
1822: PPUSH
1823: CALL_OW 69
1827: PUSH
1828: LD_INT 0
1830: GREATER
1831: IFFALSE 1905
// begin Say ( Khatam , D2b-Khat-1 ) ;
1833: LD_EXP 5
1837: PPUSH
1838: LD_STRING D2b-Khat-1
1840: PPUSH
1841: CALL_OW 88
// ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1845: LD_EXP 5
1849: PPUSH
1850: LD_INT 22
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: LD_INT 21
1862: PUSH
1863: LD_INT 1
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: PUSH
1870: LD_INT 3
1872: PUSH
1873: LD_INT 24
1875: PUSH
1876: LD_INT 1000
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: PPUSH
1892: CALL_OW 69
1896: PUSH
1897: LD_INT 1
1899: ARRAY
1900: PPUSH
1901: CALL_OW 128
// end ; end ;
1905: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
1906: LD_INT 15
1908: PPUSH
1909: LD_INT 22
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PPUSH
1919: CALL_OW 70
1923: PUSH
1924: LD_INT 0
1926: GREATER
1927: IFFALSE 2999
1929: GO 1931
1931: DISABLE
1932: LD_INT 0
1934: PPUSH
1935: PPUSH
1936: PPUSH
1937: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
1938: LD_ADDR_VAR 0 2
1942: PUSH
1943: LD_INT 999
1945: PUSH
1946: LD_INT 999
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: EMPTY
1954: LIST
1955: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_INT 22
1963: PUSH
1964: LD_INT 1
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 21
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: PPUSH
1985: CALL_OW 69
1989: PUSH
1990: LD_EXP 1
1994: PUSH
1995: LD_EXP 2
1999: PUSH
2000: LD_EXP 3
2004: PUSH
2005: LD_EXP 4
2009: PUSH
2010: LD_EXP 5
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: DIFF
2022: ST_TO_ADDR
// PrepareDeadSoldiers ;
2023: CALL 10545 0 0
// spotCorpses = 1 ;
2027: LD_ADDR_EXP 28
2031: PUSH
2032: LD_INT 1
2034: ST_TO_ADDR
// InGameOn ;
2035: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2039: LD_INT 23
2041: PPUSH
2042: LD_INT 12
2044: PPUSH
2045: CALL_OW 84
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] ] ) , 23 , 12 ) ;
2049: LD_INT 22
2051: PUSH
2052: LD_INT 1
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: PPUSH
2062: CALL_OW 69
2066: PPUSH
2067: LD_INT 23
2069: PPUSH
2070: LD_INT 12
2072: PPUSH
2073: CALL_OW 111
// min = distanceTab [ 1 ] [ 2 ] ;
2077: LD_ADDR_VAR 0 3
2081: PUSH
2082: LD_VAR 0 2
2086: PUSH
2087: LD_INT 1
2089: ARRAY
2090: PUSH
2091: LD_INT 2
2093: ARRAY
2094: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2095: LD_ADDR_VAR 0 1
2099: PUSH
2100: LD_INT 22
2102: PUSH
2103: LD_INT 1
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: LD_INT 21
2112: PUSH
2113: LD_INT 1
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PPUSH
2124: CALL_OW 69
2128: PUSH
2129: LD_EXP 1
2133: PUSH
2134: LD_EXP 5
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: DIFF
2143: PUSH
2144: FOR_IN
2145: IFFALSE 2196
// if IsOK ( i ) then
2147: LD_VAR 0 1
2151: PPUSH
2152: CALL_OW 302
2156: IFFALSE 2194
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2158: LD_ADDR_VAR 0 2
2162: PUSH
2163: LD_VAR 0 2
2167: PUSH
2168: LD_VAR 0 1
2172: PUSH
2173: LD_VAR 0 1
2177: PPUSH
2178: LD_INT 16
2180: PPUSH
2181: CALL_OW 299
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: ADD
2193: ST_TO_ADDR
2194: GO 2144
2196: POP
2197: POP
// for i = 2 to distanceTab do
2198: LD_ADDR_VAR 0 1
2202: PUSH
2203: DOUBLE
2204: LD_INT 2
2206: DEC
2207: ST_TO_ADDR
2208: LD_VAR 0 2
2212: PUSH
2213: FOR_TO
2214: IFFALSE 2260
// if distanceTab [ i ] [ 2 ] < min then
2216: LD_VAR 0 2
2220: PUSH
2221: LD_VAR 0 1
2225: ARRAY
2226: PUSH
2227: LD_INT 2
2229: ARRAY
2230: PUSH
2231: LD_VAR 0 3
2235: LESS
2236: IFFALSE 2258
// min = distanceTab [ i ] [ 2 ] ;
2238: LD_ADDR_VAR 0 3
2242: PUSH
2243: LD_VAR 0 2
2247: PUSH
2248: LD_VAR 0 1
2252: ARRAY
2253: PUSH
2254: LD_INT 2
2256: ARRAY
2257: ST_TO_ADDR
2258: GO 2213
2260: POP
2261: POP
// for i = 2 to distanceTab do
2262: LD_ADDR_VAR 0 1
2266: PUSH
2267: DOUBLE
2268: LD_INT 2
2270: DEC
2271: ST_TO_ADDR
2272: LD_VAR 0 2
2276: PUSH
2277: FOR_TO
2278: IFFALSE 2664
// begin if distanceTab [ i ] [ 2 ] = min then
2280: LD_VAR 0 2
2284: PUSH
2285: LD_VAR 0 1
2289: ARRAY
2290: PUSH
2291: LD_INT 2
2293: ARRAY
2294: PUSH
2295: LD_VAR 0 3
2299: EQUAL
2300: IFFALSE 2662
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2302: LD_VAR 0 2
2306: PUSH
2307: LD_VAR 0 1
2311: ARRAY
2312: PUSH
2313: LD_INT 1
2315: ARRAY
2316: PUSH
2317: LD_EXP 2
2321: EQUAL
2322: IFFALSE 2336
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2324: LD_EXP 2
2328: PPUSH
2329: LD_STRING DCorpses-Bobby-1
2331: PPUSH
2332: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2336: LD_VAR 0 2
2340: PUSH
2341: LD_VAR 0 1
2345: ARRAY
2346: PUSH
2347: LD_INT 1
2349: ARRAY
2350: PUSH
2351: LD_EXP 3
2355: EQUAL
2356: IFFALSE 2370
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2358: LD_EXP 3
2362: PPUSH
2363: LD_STRING DCorpses-Cyrus-1
2365: PPUSH
2366: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2370: LD_VAR 0 2
2374: PUSH
2375: LD_VAR 0 1
2379: ARRAY
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PUSH
2385: LD_EXP 4
2389: EQUAL
2390: IFFALSE 2404
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2392: LD_EXP 4
2396: PPUSH
2397: LD_STRING DCorpses-Lisa-1
2399: PPUSH
2400: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2404: LD_VAR 0 2
2408: PUSH
2409: LD_VAR 0 1
2413: ARRAY
2414: PUSH
2415: LD_INT 1
2417: ARRAY
2418: PUSH
2419: LD_VAR 0 4
2423: PUSH
2424: LD_INT 1
2426: ARRAY
2427: EQUAL
2428: PUSH
2429: LD_VAR 0 4
2433: PUSH
2434: LD_INT 1
2436: ARRAY
2437: PPUSH
2438: CALL_OW 258
2442: PUSH
2443: LD_INT 1
2445: EQUAL
2446: AND
2447: IFFALSE 2465
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2449: LD_VAR 0 4
2453: PUSH
2454: LD_INT 1
2456: ARRAY
2457: PPUSH
2458: LD_STRING DCorpses-Sol1-1
2460: PPUSH
2461: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2465: LD_VAR 0 2
2469: PUSH
2470: LD_VAR 0 1
2474: ARRAY
2475: PUSH
2476: LD_INT 1
2478: ARRAY
2479: PUSH
2480: LD_VAR 0 4
2484: PUSH
2485: LD_INT 1
2487: ARRAY
2488: EQUAL
2489: PUSH
2490: LD_VAR 0 4
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: PPUSH
2499: CALL_OW 258
2503: PUSH
2504: LD_INT 2
2506: EQUAL
2507: AND
2508: IFFALSE 2526
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2510: LD_VAR 0 4
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: PPUSH
2519: LD_STRING DCorpses-FSol1-1
2521: PPUSH
2522: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2526: LD_VAR 0 2
2530: PUSH
2531: LD_VAR 0 1
2535: ARRAY
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PUSH
2541: LD_VAR 0 4
2545: PUSH
2546: LD_INT 2
2548: ARRAY
2549: EQUAL
2550: PUSH
2551: LD_VAR 0 4
2555: PUSH
2556: LD_INT 2
2558: ARRAY
2559: PPUSH
2560: CALL_OW 258
2564: PUSH
2565: LD_INT 1
2567: EQUAL
2568: AND
2569: IFFALSE 2587
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2571: LD_VAR 0 4
2575: PUSH
2576: LD_INT 2
2578: ARRAY
2579: PPUSH
2580: LD_STRING DCorpses-Sol1-1
2582: PPUSH
2583: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2587: LD_VAR 0 2
2591: PUSH
2592: LD_VAR 0 1
2596: ARRAY
2597: PUSH
2598: LD_INT 1
2600: ARRAY
2601: PUSH
2602: LD_VAR 0 4
2606: PUSH
2607: LD_INT 2
2609: ARRAY
2610: EQUAL
2611: PUSH
2612: LD_VAR 0 4
2616: PUSH
2617: LD_INT 2
2619: ARRAY
2620: PPUSH
2621: CALL_OW 258
2625: PUSH
2626: LD_INT 2
2628: EQUAL
2629: AND
2630: IFFALSE 2648
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2632: LD_VAR 0 4
2636: PUSH
2637: LD_INT 2
2639: ARRAY
2640: PPUSH
2641: LD_STRING DCorpses-FSol1-1
2643: PPUSH
2644: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2648: LD_EXP 29
2652: PPUSH
2653: LD_INT 150
2655: PPUSH
2656: CALL_OW 234
// break ;
2660: GO 2664
// end ; end ;
2662: GO 2277
2664: POP
2665: POP
// repeat wait ( 0 0$1 ) ;
2666: LD_INT 35
2668: PPUSH
2669: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2673: LD_ADDR_VAR 0 1
2677: PUSH
2678: LD_INT 22
2680: PUSH
2681: LD_INT 1
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 21
2690: PUSH
2691: LD_INT 1
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PPUSH
2702: CALL_OW 69
2706: PUSH
2707: LD_EXP 1
2711: PUSH
2712: EMPTY
2713: LIST
2714: DIFF
2715: PUSH
2716: FOR_IN
2717: IFFALSE 2787
// begin ComMoveToArea ( i , DeadCutscene ) ;
2719: LD_VAR 0 1
2723: PPUSH
2724: LD_INT 28
2726: PPUSH
2727: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2731: LD_EXP 1
2735: PPUSH
2736: LD_INT 30
2738: PPUSH
2739: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2743: LD_VAR 0 1
2747: PPUSH
2748: LD_INT 23
2750: PPUSH
2751: LD_INT 11
2753: PPUSH
2754: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2758: LD_EXP 1
2762: PPUSH
2763: LD_INT 23
2765: PPUSH
2766: LD_INT 11
2768: PPUSH
2769: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2773: LD_EXP 29
2777: PPUSH
2778: LD_INT 250
2780: PPUSH
2781: CALL_OW 234
// end ;
2785: GO 2716
2787: POP
2788: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2789: LD_EXP 1
2793: PPUSH
2794: LD_INT 30
2796: PPUSH
2797: CALL_OW 308
2801: IFFALSE 2666
// wait ( 0 0$3 ) ;
2803: LD_INT 105
2805: PPUSH
2806: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2810: LD_EXP 1
2814: PPUSH
2815: LD_STRING DCorpses-JMM-1
2817: PPUSH
2818: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2822: LD_EXP 29
2826: PPUSH
2827: LD_INT 150
2829: PPUSH
2830: CALL_OW 234
// if IsOK ( Khatam ) then
2834: LD_EXP 5
2838: PPUSH
2839: CALL_OW 302
2843: IFFALSE 2983
// begin repeat wait ( 0 0$1 ) ;
2845: LD_INT 35
2847: PPUSH
2848: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
2852: LD_EXP 5
2856: PPUSH
2857: LD_EXP 29
2861: PPUSH
2862: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
2866: LD_EXP 5
2870: PPUSH
2871: LD_EXP 29
2875: PPUSH
2876: CALL_OW 296
2880: PUSH
2881: LD_INT 2
2883: LESS
2884: IFFALSE 2845
// spotCorpses = 0 ;
2886: LD_ADDR_EXP 28
2890: PUSH
2891: LD_INT 0
2893: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
2894: LD_EXP 29
2898: PPUSH
2899: LD_INT 10
2901: PPUSH
2902: CALL_OW 234
// wait ( 0 0$3 ) ;
2906: LD_INT 105
2908: PPUSH
2909: CALL_OW 67
// SetLives ( DyingSold , 0 ) ;
2913: LD_EXP 29
2917: PPUSH
2918: LD_INT 0
2920: PPUSH
2921: CALL_OW 234
// wait ( 0 0$1 ) ;
2925: LD_INT 35
2927: PPUSH
2928: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
2932: LD_EXP 1
2936: PUSH
2937: LD_EXP 5
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PPUSH
2946: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
2950: LD_EXP 5
2954: PPUSH
2955: LD_EXP 1
2959: PPUSH
2960: CALL_OW 119
// wait ( 0 0$1 ) ;
2964: LD_INT 35
2966: PPUSH
2967: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
2971: LD_EXP 5
2975: PPUSH
2976: LD_STRING DCorpses-Khat-1
2978: PPUSH
2979: CALL_OW 88
// end ; InGameOff ;
2983: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
2987: LD_EXP 1
2991: PPUSH
2992: LD_STRING DCorpses-JMM-2
2994: PPUSH
2995: CALL_OW 88
// end ;
2999: PPOPN 4
3001: END
// every 0 0$1 trigger spotCorpses = 1 do
3002: LD_EXP 28
3006: PUSH
3007: LD_INT 1
3009: EQUAL
3010: IFFALSE 3028
3012: GO 3014
3014: DISABLE
// begin enable ;
3015: ENABLE
// SetLives ( DyingSold , 150 ) ;
3016: LD_EXP 29
3020: PPUSH
3021: LD_INT 150
3023: PPUSH
3024: CALL_OW 234
// end ;
3028: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do var i ;
3029: LD_INT 8
3031: PPUSH
3032: LD_INT 22
3034: PUSH
3035: LD_INT 1
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PPUSH
3042: CALL_OW 70
3046: PUSH
3047: LD_INT 0
3049: GREATER
3050: PUSH
3051: LD_INT 1
3053: PPUSH
3054: CALL_OW 255
3058: PUSH
3059: LD_INT 1
3061: EQUAL
3062: NOT
3063: AND
3064: PUSH
3065: LD_INT 10
3067: PPUSH
3068: CALL_OW 255
3072: PUSH
3073: LD_INT 1
3075: EQUAL
3076: NOT
3077: AND
3078: IFFALSE 3341
3080: GO 3082
3082: DISABLE
3083: LD_INT 0
3085: PPUSH
// begin InGameOn ;
3086: CALL_OW 8
// ComTurnXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 72 , 77 ) ;
3090: LD_INT 22
3092: PUSH
3093: LD_INT 1
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 21
3102: PUSH
3103: LD_INT 1
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: PPUSH
3114: CALL_OW 69
3118: PPUSH
3119: LD_INT 72
3121: PPUSH
3122: LD_INT 77
3124: PPUSH
3125: CALL_OW 118
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3129: LD_EXP 6
3133: PUSH
3134: LD_EXP 7
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PPUSH
3143: CALL_OW 85
// PrepareOtherAmericans ;
3147: CALL 10393 0 0
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3151: LD_INT 3
3153: PPUSH
3154: LD_INT 4
3156: PPUSH
3157: LD_INT 2
3159: PPUSH
3160: LD_INT 1
3162: PPUSH
3163: CALL_OW 80
// SetAttitude ( 4 , 3 , att_enemy , true ) ;
3167: LD_INT 4
3169: PPUSH
3170: LD_INT 3
3172: PPUSH
3173: LD_INT 2
3175: PPUSH
3176: LD_INT 1
3178: PPUSH
3179: CALL_OW 80
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3183: LD_ADDR_VAR 0 1
3187: PUSH
3188: LD_INT 9
3190: PPUSH
3191: LD_INT 22
3193: PUSH
3194: LD_INT 3
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: PPUSH
3201: CALL_OW 70
3205: PUSH
3206: FOR_IN
3207: IFFALSE 3220
// ComFree ( i ) ;
3209: LD_VAR 0 1
3213: PPUSH
3214: CALL_OW 139
3218: GO 3206
3220: POP
3221: POP
// wait ( 0 0$1 ) ;
3222: LD_INT 35
3224: PPUSH
3225: CALL_OW 67
// InGameOff ;
3229: CALL_OW 9
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) ) ] , DF-Sol1-1 ) ;
3233: LD_INT 22
3235: PUSH
3236: LD_INT 1
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 21
3245: PUSH
3246: LD_INT 1
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PUSH
3253: LD_INT 26
3255: PUSH
3256: LD_INT 1
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: LIST
3267: PPUSH
3268: CALL_OW 69
3272: PUSH
3273: LD_INT 2
3275: PPUSH
3276: LD_INT 22
3278: PUSH
3279: LD_INT 1
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PUSH
3286: LD_INT 21
3288: PUSH
3289: LD_INT 1
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: PUSH
3296: LD_INT 26
3298: PUSH
3299: LD_INT 1
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: PPUSH
3311: CALL_OW 69
3315: PPUSH
3316: CALL_OW 12
3320: ARRAY
3321: PPUSH
3322: LD_STRING DF-Sol1-1
3324: PPUSH
3325: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3329: LD_EXP 1
3333: PPUSH
3334: LD_STRING DF-JMM-1
3336: PPUSH
3337: CALL_OW 88
// end ;
3341: PPOPN 1
3343: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do
3344: LD_INT 19
3346: PPUSH
3347: LD_INT 22
3349: PUSH
3350: LD_INT 3
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 70
3361: PUSH
3362: LD_INT 0
3364: EQUAL
3365: PUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 255
3373: PUSH
3374: LD_INT 1
3376: EQUAL
3377: NOT
3378: AND
3379: PUSH
3380: LD_INT 10
3382: PPUSH
3383: CALL_OW 255
3387: PUSH
3388: LD_INT 1
3390: EQUAL
3391: NOT
3392: AND
3393: IFFALSE 3506
3395: GO 3397
3397: DISABLE
// begin if not IsDead ( Brian ) then
3398: LD_EXP 6
3402: PPUSH
3403: CALL_OW 301
3407: NOT
3408: IFFALSE 3422
// SetSide ( Brian , 1 ) ;
3410: LD_EXP 6
3414: PPUSH
3415: LD_INT 1
3417: PPUSH
3418: CALL_OW 235
// if not IsDead ( Jerry ) then
3422: LD_EXP 7
3426: PPUSH
3427: CALL_OW 301
3431: NOT
3432: IFFALSE 3446
// SetSide ( Jerry , 1 ) ;
3434: LD_EXP 7
3438: PPUSH
3439: LD_INT 1
3441: PPUSH
3442: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3446: LD_INT 22
3448: PUSH
3449: LD_INT 1
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PUSH
3456: LD_INT 25
3458: PUSH
3459: LD_INT 4
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 69
3474: PUSH
3475: LD_INT 0
3477: GREATER
3478: IFFALSE 3494
// begin Say ( JMM , DFa-JMM-1 ) ;
3480: LD_EXP 1
3484: PPUSH
3485: LD_STRING DFa-JMM-1
3487: PPUSH
3488: CALL_OW 88
// end else
3492: GO 3506
// begin Say ( JMM , DFa-JMM-1a ) ;
3494: LD_EXP 1
3498: PPUSH
3499: LD_STRING DFa-JMM-1a
3501: PPUSH
3502: CALL_OW 88
// end ; end ;
3506: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and GetLives ( Brian ) > 250 do
3507: LD_INT 19
3509: PPUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 3
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PPUSH
3520: CALL_OW 70
3524: PUSH
3525: LD_INT 0
3527: EQUAL
3528: PUSH
3529: LD_EXP 6
3533: PPUSH
3534: CALL_OW 256
3538: PUSH
3539: LD_INT 250
3541: GREATER
3542: AND
3543: IFFALSE 3598
3545: GO 3547
3547: DISABLE
// begin Say ( Brian , DFb-Sol1-1 ) ;
3548: LD_EXP 6
3552: PPUSH
3553: LD_STRING DFb-Sol1-1
3555: PPUSH
3556: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3560: LD_EXP 6
3564: PPUSH
3565: LD_INT 78
3567: PPUSH
3568: LD_INT 74
3570: PPUSH
3571: CALL_OW 111
// if IsDead ( Jerry ) then
3575: LD_EXP 7
3579: PPUSH
3580: CALL_OW 301
3584: IFFALSE 3598
// Say ( Brian , DFb-Sol1-1a ) end ;
3586: LD_EXP 6
3590: PPUSH
3591: LD_STRING DFb-Sol1-1a
3593: PPUSH
3594: CALL_OW 88
3598: END
// every 0 0$1 do var i ;
3599: GO 3601
3601: DISABLE
3602: LD_INT 0
3604: PPUSH
// begin enable ;
3605: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3606: LD_ADDR_VAR 0 1
3610: PUSH
3611: LD_INT 22
3613: PUSH
3614: LD_INT 3
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: PUSH
3621: LD_INT 21
3623: PUSH
3624: LD_INT 3
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: PUSH
3631: LD_INT 30
3633: PUSH
3634: LD_INT 31
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: LIST
3645: PPUSH
3646: CALL_OW 69
3650: PUSH
3651: FOR_IN
3652: IFFALSE 3683
// begin if See ( 1 , i ) then
3654: LD_INT 1
3656: PPUSH
3657: LD_VAR 0 1
3661: PPUSH
3662: CALL_OW 292
3666: IFFALSE 3681
// begin disable ;
3668: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3669: LD_EXP 1
3673: PPUSH
3674: LD_STRING DX1-JMM-1
3676: PPUSH
3677: CALL_OW 88
// end ; end ;
3681: GO 3651
3683: POP
3684: POP
// end ;
3685: PPOPN 1
3687: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3688: LD_INT 1
3690: PPUSH
3691: LD_INT 11
3693: PPUSH
3694: CALL_OW 294
3698: IFFALSE 4061
3700: GO 3702
3702: DISABLE
3703: LD_INT 0
3705: PPUSH
3706: PPUSH
// begin DialogueOn ;
3707: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3711: LD_INT 11
3713: PPUSH
3714: LD_INT 22
3716: PUSH
3717: LD_INT 3
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 21
3726: PUSH
3727: LD_INT 1
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PPUSH
3738: CALL_OW 70
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: PPUSH
3747: LD_STRING DX3-Rus1-1
3749: PPUSH
3750: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3754: LD_EXP 1
3758: PPUSH
3759: LD_STRING DX3-JMM-1
3761: PPUSH
3762: CALL_OW 88
// DialogueOff ;
3766: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3770: LD_ADDR_VAR 0 1
3774: PUSH
3775: LD_INT 11
3777: PPUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 3
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 21
3790: PUSH
3791: LD_INT 1
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PPUSH
3802: CALL_OW 70
3806: PUSH
3807: FOR_IN
3808: IFFALSE 3828
// southBaseDefenders = southBaseDefenders ^ i ;
3810: LD_ADDR_EXP 24
3814: PUSH
3815: LD_EXP 24
3819: PUSH
3820: LD_VAR 0 1
3824: ADD
3825: ST_TO_ADDR
3826: GO 3807
3828: POP
3829: POP
// wait ( [ 0 0$10 , 0 0$15 , 0 0$20 ] [ Difficulty ] ) ;
3830: LD_INT 350
3832: PUSH
3833: LD_INT 525
3835: PUSH
3836: LD_INT 700
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: LIST
3843: PUSH
3844: LD_OWVAR 67
3848: ARRAY
3849: PPUSH
3850: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3854: LD_INT 35
3856: PPUSH
3857: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
3861: LD_ADDR_VAR 0 1
3865: PUSH
3866: LD_INT 22
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: PUSH
3876: LD_INT 21
3878: PUSH
3879: LD_INT 2
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PUSH
3886: LD_INT 58
3888: PUSH
3889: EMPTY
3890: LIST
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: PPUSH
3897: CALL_OW 69
3901: PUSH
3902: FOR_IN
3903: IFFALSE 3973
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
3905: LD_ADDR_VAR 0 2
3909: PUSH
3910: LD_INT 22
3912: PUSH
3913: LD_INT 3
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: LD_INT 21
3922: PUSH
3923: LD_INT 1
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PUSH
3930: LD_INT 25
3932: PUSH
3933: LD_INT 3
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: LIST
3944: PPUSH
3945: CALL_OW 69
3949: PUSH
3950: FOR_IN
3951: IFFALSE 3969
// begin ComEnterUnit ( j , i ) ;
3953: LD_VAR 0 2
3957: PPUSH
3958: LD_VAR 0 1
3962: PPUSH
3963: CALL_OW 120
// end ;
3967: GO 3950
3969: POP
3970: POP
// end ;
3971: GO 3902
3973: POP
3974: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
3975: LD_INT 22
3977: PUSH
3978: LD_INT 3
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: LD_INT 21
3987: PUSH
3988: LD_INT 2
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: LD_INT 58
3997: PUSH
3998: EMPTY
3999: LIST
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: LIST
4005: PPUSH
4006: CALL_OW 69
4010: PUSH
4011: LD_INT 0
4013: EQUAL
4014: PUSH
4015: LD_INT 22
4017: PUSH
4018: LD_INT 3
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PUSH
4025: LD_INT 21
4027: PUSH
4028: LD_INT 1
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: PUSH
4035: LD_INT 25
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: LIST
4049: PPUSH
4050: CALL_OW 69
4054: PUSH
4055: LD_INT 0
4057: EQUAL
4058: OR
4059: IFFALSE 3854
// end ;
4061: PPOPN 2
4063: END
// every 0 0$1 trigger FilterUnitsInArea ( SouthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 do
4064: LD_INT 23
4066: PPUSH
4067: LD_INT 22
4069: PUSH
4070: LD_INT 3
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PUSH
4077: LD_INT 21
4079: PUSH
4080: LD_INT 1
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: PUSH
4087: LD_INT 25
4089: PUSH
4090: LD_INT 3
4092: PUSH
4093: EMPTY
4094: LIST
4095: LIST
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 70
4106: PUSH
4107: LD_INT 0
4109: EQUAL
4110: IFFALSE 4164
4112: GO 4114
4114: DISABLE
// begin if IsOK ( Bobby ) then
4115: LD_EXP 2
4119: PPUSH
4120: CALL_OW 302
4124: IFFALSE 4152
// begin Say ( Bobby , DX2-Bobby-1 ) ;
4126: LD_EXP 2
4130: PPUSH
4131: LD_STRING DX2-Bobby-1
4133: PPUSH
4134: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4138: LD_EXP 1
4142: PPUSH
4143: LD_STRING DX2-JMM-1a
4145: PPUSH
4146: CALL_OW 88
// end else
4150: GO 4164
// begin Say ( JMM , DX2-JMM-1 ) ;
4152: LD_EXP 1
4156: PPUSH
4157: LD_STRING DX2-JMM-1
4159: PPUSH
4160: CALL_OW 88
// end ; end ;
4164: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4165: LD_INT 22
4167: PUSH
4168: LD_INT 1
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: LD_INT 23
4177: PUSH
4178: LD_INT 3
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: LD_INT 21
4187: PUSH
4188: LD_INT 2
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PUSH
4195: LD_INT 34
4197: PUSH
4198: LD_INT 42
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: PPUSH
4211: CALL_OW 69
4215: PUSH
4216: LD_INT 1
4218: GREATEREQUAL
4219: IFFALSE 4662
4221: GO 4223
4223: DISABLE
4224: LD_INT 0
4226: PPUSH
4227: PPUSH
4228: PPUSH
4229: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4230: LD_ADDR_VAR 0 1
4234: PUSH
4235: LD_INT 22
4237: PUSH
4238: LD_INT 1
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: PUSH
4245: LD_INT 23
4247: PUSH
4248: LD_INT 3
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PUSH
4255: LD_INT 21
4257: PUSH
4258: LD_INT 2
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 34
4267: PUSH
4268: LD_INT 42
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: PPUSH
4281: CALL_OW 69
4285: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4286: LD_ADDR_VAR 0 2
4290: PUSH
4291: LD_INT 22
4293: PUSH
4294: LD_INT 1
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: LD_INT 21
4303: PUSH
4304: LD_INT 1
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 26
4313: PUSH
4314: LD_INT 1
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: PPUSH
4326: CALL_OW 69
4330: PUSH
4331: LD_EXP 1
4335: PUSH
4336: LD_EXP 3
4340: PUSH
4341: LD_EXP 2
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: DIFF
4351: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4352: LD_ADDR_VAR 0 3
4356: PUSH
4357: LD_INT 22
4359: PUSH
4360: LD_INT 1
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PUSH
4367: LD_INT 21
4369: PUSH
4370: LD_INT 1
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: PUSH
4377: LD_INT 26
4379: PUSH
4380: LD_INT 2
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: PPUSH
4392: CALL_OW 69
4396: PUSH
4397: LD_EXP 4
4401: PUSH
4402: EMPTY
4403: LIST
4404: DIFF
4405: ST_TO_ADDR
// Say ( JMM , DX2a-JMM-1 ) ;
4406: LD_EXP 1
4410: PPUSH
4411: LD_STRING DX2a-JMM-1
4413: PPUSH
4414: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4418: LD_EXP 2
4422: PPUSH
4423: CALL_OW 310
4427: PUSH
4428: LD_VAR 0 1
4432: PUSH
4433: LD_INT 1
4435: ARRAY
4436: EQUAL
4437: IFFALSE 4451
// Say ( Bobby , DX2a-Bobby-1 ) ;
4439: LD_EXP 2
4443: PPUSH
4444: LD_STRING DX2a-Bobby-1
4446: PPUSH
4447: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4451: LD_EXP 3
4455: PPUSH
4456: CALL_OW 310
4460: PUSH
4461: LD_VAR 0 1
4465: PUSH
4466: LD_INT 1
4468: ARRAY
4469: EQUAL
4470: IFFALSE 4484
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4472: LD_EXP 3
4476: PPUSH
4477: LD_STRING DX2a-Cyrus-1
4479: PPUSH
4480: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4484: LD_EXP 4
4488: PPUSH
4489: CALL_OW 310
4493: PUSH
4494: LD_VAR 0 1
4498: PUSH
4499: LD_INT 1
4501: ARRAY
4502: EQUAL
4503: IFFALSE 4517
// Say ( Lisa , DX2a-Lisa-1 ) ;
4505: LD_EXP 4
4509: PPUSH
4510: LD_STRING DX2a-Lisa-1
4512: PPUSH
4513: CALL_OW 88
// for i in temp1 do
4517: LD_ADDR_VAR 0 4
4521: PUSH
4522: LD_VAR 0 2
4526: PUSH
4527: FOR_IN
4528: IFFALSE 4565
// if IsInUnit ( i ) = tmp [ 1 ] then
4530: LD_VAR 0 4
4534: PPUSH
4535: CALL_OW 310
4539: PUSH
4540: LD_VAR 0 1
4544: PUSH
4545: LD_INT 1
4547: ARRAY
4548: EQUAL
4549: IFFALSE 4563
// Say ( i , DX2a-Sol1-1 ) ;
4551: LD_VAR 0 4
4555: PPUSH
4556: LD_STRING DX2a-Sol1-1
4558: PPUSH
4559: CALL_OW 88
4563: GO 4527
4565: POP
4566: POP
// for i in temp2 do
4567: LD_ADDR_VAR 0 4
4571: PUSH
4572: LD_VAR 0 3
4576: PUSH
4577: FOR_IN
4578: IFFALSE 4615
// if IsInUnit ( i ) = tmp [ 1 ] then
4580: LD_VAR 0 4
4584: PPUSH
4585: CALL_OW 310
4589: PUSH
4590: LD_VAR 0 1
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: EQUAL
4599: IFFALSE 4613
// Say ( i , DX2a-FSol1-1 ) ;
4601: LD_VAR 0 4
4605: PPUSH
4606: LD_STRING DX2a-FSol1-1
4608: PPUSH
4609: CALL_OW 88
4613: GO 4577
4615: POP
4616: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4617: LD_EXP 1
4621: PPUSH
4622: CALL_OW 310
4626: PUSH
4627: LD_VAR 0 1
4631: PUSH
4632: LD_INT 1
4634: ARRAY
4635: EQUAL
4636: IFFALSE 4650
// Say ( JMM , DX2b-JMM-1 ) ;
4638: LD_EXP 1
4642: PPUSH
4643: LD_STRING DX2b-JMM-1
4645: PPUSH
4646: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4650: LD_EXP 1
4654: PPUSH
4655: LD_STRING DX2a-JMM-2
4657: PPUSH
4658: CALL_OW 88
// end ;
4662: PPOPN 4
4664: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4665: LD_INT 1
4667: PPUSH
4668: CALL_OW 255
4672: PUSH
4673: LD_INT 1
4675: EQUAL
4676: PUSH
4677: LD_INT 10
4679: PPUSH
4680: CALL_OW 255
4684: PUSH
4685: LD_INT 1
4687: EQUAL
4688: OR
4689: IFFALSE 4749
4691: GO 4693
4693: DISABLE
// begin DialogueOn ;
4694: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4698: LD_EXP 1
4702: PPUSH
4703: LD_STRING D3-JMM-1
4705: PPUSH
4706: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4710: LD_EXP 9
4714: PPUSH
4715: LD_STRING D3-Pow-1
4717: PPUSH
4718: CALL_OW 94
// if IsOK ( Cyrus ) then
4722: LD_EXP 3
4726: PPUSH
4727: CALL_OW 302
4731: IFFALSE 4745
// Say ( Cyrus , D3-Cyrus-1 ) ;
4733: LD_EXP 3
4737: PPUSH
4738: LD_STRING D3-Cyrus-1
4740: PPUSH
4741: CALL_OW 88
// DialogueOff ;
4745: CALL_OW 7
// end ;
4749: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , i ;
4750: LD_INT 1
4752: PPUSH
4753: CALL_OW 255
4757: PUSH
4758: LD_INT 1
4760: EQUAL
4761: PUSH
4762: LD_INT 10
4764: PPUSH
4765: CALL_OW 255
4769: PUSH
4770: LD_INT 1
4772: EQUAL
4773: AND
4774: IFFALSE 5956
4776: GO 4778
4778: DISABLE
4779: LD_INT 0
4781: PPUSH
4782: PPUSH
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) diff [ JMM ] ;
4783: LD_ADDR_VAR 0 1
4787: PUSH
4788: LD_INT 22
4790: PUSH
4791: LD_INT 1
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PUSH
4798: LD_INT 23
4800: PUSH
4801: LD_INT 1
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PUSH
4808: LD_INT 25
4810: PUSH
4811: LD_INT 2
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: LIST
4822: PPUSH
4823: CALL_OW 69
4827: PUSH
4828: LD_EXP 1
4832: PUSH
4833: EMPTY
4834: LIST
4835: DIFF
4836: ST_TO_ADDR
// DialogueOn ;
4837: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
4841: LD_EXP 1
4845: PPUSH
4846: LD_STRING D3a-JMM-1
4848: PPUSH
4849: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
4853: LD_EXP 9
4857: PPUSH
4858: LD_STRING D3a-Pow-1
4860: PPUSH
4861: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
4865: LD_EXP 1
4869: PPUSH
4870: LD_STRING D3a-JMM-2
4872: PPUSH
4873: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
4877: LD_EXP 9
4881: PPUSH
4882: LD_STRING D3a-Pow-2
4884: PPUSH
4885: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
4889: LD_EXP 1
4893: PPUSH
4894: LD_STRING D3a-JMM-3
4896: PPUSH
4897: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
4901: LD_EXP 9
4905: PPUSH
4906: LD_STRING D3a-Pow-3
4908: PPUSH
4909: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
4913: LD_EXP 1
4917: PPUSH
4918: LD_STRING D3a-JMM-4
4920: PPUSH
4921: CALL_OW 88
// DialogueOff ;
4925: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4929: LD_STRING M2
4931: PPUSH
4932: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
4936: LD_EXP 1
4940: PPUSH
4941: LD_STRING D3b-JMM-1
4943: PPUSH
4944: CALL_OW 88
// wait ( 0 0$5 ) ;
4948: LD_INT 175
4950: PPUSH
4951: CALL_OW 67
// InGameOn ;
4955: CALL_OW 8
// PrepareRussianHeroes ;
4959: CALL 10702 0 0
// CenterNowOnUnits ( Mikhail ) ;
4963: LD_EXP 8
4967: PPUSH
4968: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
4972: LD_EXP 1
4976: PUSH
4977: LD_VAR 0 1
4981: PUSH
4982: LD_INT 1
4984: ARRAY
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PPUSH
4990: LD_EXP 8
4994: PPUSH
4995: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
4999: LD_EXP 8
5003: PPUSH
5004: LD_VAR 0 1
5008: PUSH
5009: LD_INT 1
5011: ARRAY
5012: PPUSH
5013: CALL_OW 119
// Say ( Mikhail , D4-Mikh-1 ) ;
5017: LD_EXP 8
5021: PPUSH
5022: LD_STRING D4-Mikh-1
5024: PPUSH
5025: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5029: LD_VAR 0 1
5033: PUSH
5034: LD_INT 1
5036: ARRAY
5037: PPUSH
5038: CALL_OW 258
5042: PUSH
5043: LD_INT 1
5045: EQUAL
5046: IFFALSE 5064
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5048: LD_VAR 0 1
5052: PUSH
5053: LD_INT 1
5055: ARRAY
5056: PPUSH
5057: LD_STRING D4-Sol1-1
5059: PPUSH
5060: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5064: LD_VAR 0 1
5068: PUSH
5069: LD_INT 1
5071: ARRAY
5072: PPUSH
5073: CALL_OW 258
5077: PUSH
5078: LD_INT 2
5080: EQUAL
5081: IFFALSE 5099
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5083: LD_VAR 0 1
5087: PUSH
5088: LD_INT 1
5090: ARRAY
5091: PPUSH
5092: LD_STRING D4-FSol1-1
5094: PPUSH
5095: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5099: LD_EXP 8
5103: PPUSH
5104: LD_STRING D4-Mikh-2
5106: PPUSH
5107: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5111: LD_VAR 0 1
5115: PUSH
5116: LD_INT 1
5118: ARRAY
5119: PPUSH
5120: CALL_OW 258
5124: PUSH
5125: LD_INT 1
5127: EQUAL
5128: IFFALSE 5146
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5130: LD_VAR 0 1
5134: PUSH
5135: LD_INT 1
5137: ARRAY
5138: PPUSH
5139: LD_STRING D4-Sol1-2
5141: PPUSH
5142: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5146: LD_VAR 0 1
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PPUSH
5155: CALL_OW 258
5159: PUSH
5160: LD_INT 2
5162: EQUAL
5163: IFFALSE 5181
// Say ( temp [ 2 ] , D4-FSol1-2 ) ;
5165: LD_VAR 0 1
5169: PUSH
5170: LD_INT 2
5172: ARRAY
5173: PPUSH
5174: LD_STRING D4-FSol1-2
5176: PPUSH
5177: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5181: LD_EXP 8
5185: PPUSH
5186: LD_STRING D4-Mikh-3
5188: PPUSH
5189: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5193: LD_VAR 0 1
5197: PUSH
5198: LD_INT 1
5200: ARRAY
5201: PPUSH
5202: CALL_OW 258
5206: PUSH
5207: LD_INT 1
5209: EQUAL
5210: IFFALSE 5228
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5212: LD_VAR 0 1
5216: PUSH
5217: LD_INT 1
5219: ARRAY
5220: PPUSH
5221: LD_STRING D4-Sol1-3
5223: PPUSH
5224: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5228: LD_VAR 0 1
5232: PUSH
5233: LD_INT 1
5235: ARRAY
5236: PPUSH
5237: CALL_OW 258
5241: PUSH
5242: LD_INT 2
5244: EQUAL
5245: IFFALSE 5263
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5247: LD_VAR 0 1
5251: PUSH
5252: LD_INT 1
5254: ARRAY
5255: PPUSH
5256: LD_STRING D4-FSol1-3
5258: PPUSH
5259: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5263: LD_EXP 8
5267: PPUSH
5268: LD_STRING D4-Mikh-4
5270: PPUSH
5271: CALL_OW 88
// case query ( Qs1 ) of 1 :
5275: LD_STRING Qs1
5277: PPUSH
5278: CALL_OW 97
5282: PUSH
5283: LD_INT 1
5285: DOUBLE
5286: EQUAL
5287: IFTRUE 5291
5289: GO 5326
5291: POP
// begin InGameOff ;
5292: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5296: LD_INT 1
5298: PPUSH
5299: LD_INT 6
5301: PPUSH
5302: LD_INT 2
5304: PPUSH
5305: LD_INT 1
5307: PPUSH
5308: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5312: LD_EXP 8
5316: PPUSH
5317: LD_INT 17
5319: PPUSH
5320: CALL_OW 113
// end ; 2 :
5324: GO 5948
5326: LD_INT 2
5328: DOUBLE
5329: EQUAL
5330: IFTRUE 5334
5332: GO 5913
5334: POP
// begin repeat wait ( 0 0$1 ) ;
5335: LD_INT 35
5337: PPUSH
5338: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5342: LD_VAR 0 1
5346: PUSH
5347: LD_INT 1
5349: ARRAY
5350: PPUSH
5351: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5355: LD_VAR 0 1
5359: PUSH
5360: LD_INT 1
5362: ARRAY
5363: PPUSH
5364: LD_EXP 1
5368: PPUSH
5369: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5373: LD_EXP 8
5377: PPUSH
5378: LD_EXP 1
5382: PPUSH
5383: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5387: LD_EXP 1
5391: PPUSH
5392: LD_EXP 8
5396: PPUSH
5397: CALL_OW 296
5401: PUSH
5402: LD_INT 5
5404: LESS
5405: IFFALSE 5335
// ComTurnUnit ( Mikhail , JMM ) ;
5407: LD_EXP 8
5411: PPUSH
5412: LD_EXP 1
5416: PPUSH
5417: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5421: LD_EXP 1
5425: PPUSH
5426: LD_STRING D4b-JMM-1
5428: PPUSH
5429: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5433: LD_EXP 8
5437: PPUSH
5438: LD_STRING D4b-Mikh-1
5440: PPUSH
5441: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5445: LD_EXP 1
5449: PPUSH
5450: LD_STRING D4b-JMM-2
5452: PPUSH
5453: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5457: LD_EXP 8
5461: PPUSH
5462: LD_STRING D4b-Mikh-2
5464: PPUSH
5465: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5469: LD_EXP 1
5473: PPUSH
5474: LD_STRING D4b-JMM-3
5476: PPUSH
5477: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5481: LD_EXP 8
5485: PPUSH
5486: LD_STRING D4b-Mikh-3
5488: PPUSH
5489: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5493: LD_EXP 1
5497: PPUSH
5498: LD_STRING D4b-JMM-4
5500: PPUSH
5501: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5505: LD_EXP 8
5509: PPUSH
5510: LD_STRING D4b-Mikh-4
5512: PPUSH
5513: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5517: LD_EXP 1
5521: PPUSH
5522: LD_STRING D4b-JMM-5
5524: PPUSH
5525: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5529: LD_EXP 8
5533: PPUSH
5534: LD_STRING D4b-Mikh-5
5536: PPUSH
5537: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5541: LD_EXP 1
5545: PPUSH
5546: LD_STRING D4b-JMM-6
5548: PPUSH
5549: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5553: LD_EXP 8
5557: PPUSH
5558: LD_STRING D4b-Mikh-6
5560: PPUSH
5561: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5565: LD_EXP 1
5569: PPUSH
5570: LD_STRING D4b-JMM-7
5572: PPUSH
5573: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5577: LD_EXP 8
5581: PPUSH
5582: LD_STRING D4b-Mikh-7
5584: PPUSH
5585: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5589: LD_VAR 0 1
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: CALL_OW 258
5602: PUSH
5603: LD_INT 1
5605: EQUAL
5606: IFFALSE 5624
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5608: LD_VAR 0 1
5612: PUSH
5613: LD_INT 1
5615: ARRAY
5616: PPUSH
5617: LD_STRING D4b-Sol1-7
5619: PPUSH
5620: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5624: LD_VAR 0 1
5628: PUSH
5629: LD_INT 1
5631: ARRAY
5632: PPUSH
5633: CALL_OW 258
5637: PUSH
5638: LD_INT 2
5640: EQUAL
5641: IFFALSE 5659
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5643: LD_VAR 0 1
5647: PUSH
5648: LD_INT 1
5650: ARRAY
5651: PPUSH
5652: LD_STRING D4b-FSol1-7
5654: PPUSH
5655: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5659: LD_EXP 1
5663: PPUSH
5664: LD_STRING D4b-JMM-8
5666: PPUSH
5667: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5671: LD_VAR 0 1
5675: PUSH
5676: LD_INT 1
5678: ARRAY
5679: PPUSH
5680: CALL_OW 258
5684: PUSH
5685: LD_INT 1
5687: EQUAL
5688: IFFALSE 5706
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5690: LD_VAR 0 1
5694: PUSH
5695: LD_INT 1
5697: ARRAY
5698: PPUSH
5699: LD_STRING D4b-Sol1-8
5701: PPUSH
5702: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5706: LD_VAR 0 1
5710: PUSH
5711: LD_INT 1
5713: ARRAY
5714: PPUSH
5715: CALL_OW 258
5719: PUSH
5720: LD_INT 2
5722: EQUAL
5723: IFFALSE 5741
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
5725: LD_VAR 0 1
5729: PUSH
5730: LD_INT 1
5732: ARRAY
5733: PPUSH
5734: LD_STRING D4b-FSol1-8
5736: PPUSH
5737: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
5741: LD_EXP 1
5745: PPUSH
5746: LD_STRING D4b-JMM-9
5748: PPUSH
5749: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
5753: LD_EXP 8
5757: PPUSH
5758: LD_INT 1
5760: PPUSH
5761: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5765: LD_ADDR_VAR 0 2
5769: PUSH
5770: LD_INT 22
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: EMPTY
5781: LIST
5782: PPUSH
5783: CALL_OW 69
5787: PUSH
5788: FOR_IN
5789: IFFALSE 5802
// ComFree ( i ) ;
5791: LD_VAR 0 2
5795: PPUSH
5796: CALL_OW 139
5800: GO 5788
5802: POP
5803: POP
// repeat wait ( 0 0$1 ) ;
5804: LD_INT 35
5806: PPUSH
5807: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
5811: LD_EXP 8
5815: PPUSH
5816: CALL_OW 87
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
5820: LD_EXP 8
5824: PPUSH
5825: LD_INT 1
5827: PPUSH
5828: CALL_OW 296
5832: PUSH
5833: LD_EXP 8
5837: PPUSH
5838: LD_INT 10
5840: PPUSH
5841: CALL_OW 296
5845: LESS
5846: IFFALSE 5862
// begin ComEnterUnit ( Mikhail , dep1 ) ;
5848: LD_EXP 8
5852: PPUSH
5853: LD_INT 1
5855: PPUSH
5856: CALL_OW 120
// end else
5860: GO 5874
// begin ComEnterUnit ( Mikhail , dep2 ) ;
5862: LD_EXP 8
5866: PPUSH
5867: LD_INT 10
5869: PPUSH
5870: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
5874: LD_EXP 8
5878: PPUSH
5879: CALL_OW 310
5883: IFFALSE 5804
// mikhailDepot = IsInUnit ( Mikhail ) ;
5885: LD_ADDR_EXP 22
5889: PUSH
5890: LD_EXP 8
5894: PPUSH
5895: CALL_OW 310
5899: ST_TO_ADDR
// InGameOff ;
5900: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
5904: LD_STRING M3
5906: PPUSH
5907: CALL_OW 337
// end ; 3 :
5911: GO 5948
5913: LD_INT 3
5915: DOUBLE
5916: EQUAL
5917: IFTRUE 5921
5919: GO 5947
5921: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
5922: LD_EXP 8
5926: PPUSH
5927: LD_INT 17
5929: PPUSH
5930: CALL_OW 113
// wait ( 0 0$3 ) ;
5934: LD_INT 105
5936: PPUSH
5937: CALL_OW 67
// InGameOff ;
5941: CALL_OW 9
// end ; end ;
5945: GO 5948
5947: POP
// PrepareTigers ;
5948: CALL 12996 0 0
// RussianTrap ;
5952: CALL 9033 0 0
// end ;
5956: PPOPN 2
5958: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
5959: LD_INT 1
5961: PPUSH
5962: CALL_OW 255
5966: PUSH
5967: LD_INT 1
5969: EQUAL
5970: PUSH
5971: LD_INT 10
5973: PPUSH
5974: CALL_OW 255
5978: PUSH
5979: LD_INT 1
5981: EQUAL
5982: AND
5983: PUSH
5984: LD_INT 1
5986: PPUSH
5987: CALL_OW 274
5991: PPUSH
5992: LD_INT 1
5994: PPUSH
5995: CALL_OW 275
5999: PUSH
6000: LD_INT 100
6002: GREATEREQUAL
6003: AND
6004: IFFALSE 6138
6006: GO 6008
6008: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6009: LD_INT 2100
6011: PPUSH
6012: LD_INT 4200
6014: PPUSH
6015: CALL_OW 12
6019: PUSH
6020: LD_INT 1050
6022: PLUS
6023: PPUSH
6024: CALL_OW 67
// PrepareCargoBays ;
6028: CALL 11861 0 0
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6032: LD_EXP 15
6036: PUSH
6037: LD_EXP 16
6041: PUSH
6042: LD_EXP 17
6046: PUSH
6047: LD_EXP 18
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: PPUSH
6058: LD_INT 53
6060: PPUSH
6061: LD_INT 16
6063: PPUSH
6064: CALL_OW 111
// wait ( 0 0$5 ) ;
6068: LD_INT 175
6070: PPUSH
6071: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6075: LD_EXP 17
6079: PPUSH
6080: LD_STRING D5-Rus2-1
6082: PPUSH
6083: CALL_OW 88
// wait ( 0 0$7 ) ;
6087: LD_INT 245
6089: PPUSH
6090: CALL_OW 67
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6094: LD_EXP 15
6098: PUSH
6099: LD_EXP 16
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PPUSH
6108: LD_INT 7
6110: PPUSH
6111: LD_INT 9
6113: PPUSH
6114: CALL_OW 111
// Say ( driver1 , D5-Rus2-1a ) ;
6118: LD_EXP 17
6122: PPUSH
6123: LD_STRING D5-Rus2-1a
6125: PPUSH
6126: CALL_OW 88
// cargoEscape = 1 ;
6130: LD_ADDR_EXP 19
6134: PUSH
6135: LD_INT 1
6137: ST_TO_ADDR
// end ;
6138: END
// every 0 0$1 trigger cargoEscape > 0 do
6139: LD_EXP 19
6143: PUSH
6144: LD_INT 0
6146: GREATER
6147: IFFALSE 6273
6149: GO 6151
6151: DISABLE
// begin enable ;
6152: ENABLE
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6153: LD_EXP 15
6157: PPUSH
6158: LD_INT 13
6160: PPUSH
6161: CALL_OW 308
6165: PUSH
6166: LD_EXP 17
6170: PPUSH
6171: LD_INT 13
6173: PPUSH
6174: CALL_OW 308
6178: OR
6179: IFFALSE 6213
// begin RemoveUnit ( cargo1 ) ;
6181: LD_EXP 15
6185: PPUSH
6186: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6190: LD_EXP 17
6194: PPUSH
6195: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6199: LD_ADDR_EXP 19
6203: PUSH
6204: LD_EXP 19
6208: PUSH
6209: LD_INT 1
6211: PLUS
6212: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6213: LD_EXP 16
6217: PPUSH
6218: LD_INT 13
6220: PPUSH
6221: CALL_OW 308
6225: PUSH
6226: LD_EXP 18
6230: PPUSH
6231: LD_INT 13
6233: PPUSH
6234: CALL_OW 308
6238: OR
6239: IFFALSE 6273
// begin RemoveUnit ( cargo2 ) ;
6241: LD_EXP 16
6245: PPUSH
6246: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6250: LD_EXP 18
6254: PPUSH
6255: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6259: LD_ADDR_EXP 19
6263: PUSH
6264: LD_EXP 19
6268: PUSH
6269: LD_INT 1
6271: PLUS
6272: ST_TO_ADDR
// end ; end ;
6273: END
// every 0 0$1 trigger cargoEscape > 1 do
6274: LD_EXP 19
6278: PUSH
6279: LD_INT 1
6281: GREATER
6282: IFFALSE 6395
6284: GO 6286
6286: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
6287: LD_INT 22
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 23
6299: PUSH
6300: LD_INT 1
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: LD_INT 26
6309: PUSH
6310: LD_INT 1
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: LIST
6321: PPUSH
6322: CALL_OW 69
6326: PUSH
6327: LD_INT 2
6329: PPUSH
6330: LD_INT 22
6332: PUSH
6333: LD_INT 1
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 23
6342: PUSH
6343: LD_INT 1
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PUSH
6350: LD_INT 26
6352: PUSH
6353: LD_INT 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: EMPTY
6361: LIST
6362: LIST
6363: LIST
6364: PPUSH
6365: CALL_OW 69
6369: PPUSH
6370: CALL_OW 12
6374: ARRAY
6375: PPUSH
6376: LD_STRING D5a-Sol1-1
6378: PPUSH
6379: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
6383: LD_EXP 1
6387: PPUSH
6388: LD_STRING D5a-JMM-1
6390: PPUSH
6391: CALL_OW 88
// end ;
6395: END
// every 0 0$1 trigger GetLives ( dep1 ) < 1000 or GetLives ( dep2 ) < 1000 do
6396: LD_INT 1
6398: PPUSH
6399: CALL_OW 256
6403: PUSH
6404: LD_INT 1000
6406: LESS
6407: PUSH
6408: LD_INT 10
6410: PPUSH
6411: CALL_OW 256
6415: PUSH
6416: LD_INT 1000
6418: LESS
6419: OR
6420: IFFALSE 6437
6422: GO 6424
6424: DISABLE
// Say ( JMM ,  D8-JMM-1 ) ;
6425: LD_EXP 1
6429: PPUSH
6430: LD_STRING  D8-JMM-1
6432: PPUSH
6433: CALL_OW 88
6437: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 do
6438: LD_EXP 8
6442: PPUSH
6443: CALL_OW 310
6447: PUSH
6448: LD_INT 1
6450: EQUAL
6451: IFFALSE 6473
6453: GO 6455
6455: DISABLE
// begin mikhailInBase = 1 ;
6456: LD_ADDR_EXP 21
6460: PUSH
6461: LD_INT 1
6463: ST_TO_ADDR
// mikhailStatus = 1 ;
6464: LD_ADDR_EXP 20
6468: PUSH
6469: LD_INT 1
6471: ST_TO_ADDR
// enable ;
6472: ENABLE
// end ;
6473: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
6474: LD_EXP 8
6478: PPUSH
6479: LD_INT 25
6481: PPUSH
6482: CALL_OW 308
6486: PUSH
6487: LD_EXP 21
6491: PUSH
6492: LD_INT 1
6494: EQUAL
6495: AND
6496: PUSH
6497: LD_EXP 8
6501: PPUSH
6502: CALL_OW 255
6506: PUSH
6507: LD_INT 1
6509: EQUAL
6510: AND
6511: IFFALSE 6849
6513: GO 6515
6515: DISABLE
// begin mikhailInBase = 4 ;
6516: LD_ADDR_EXP 21
6520: PUSH
6521: LD_INT 4
6523: ST_TO_ADDR
// enable ;
6524: ENABLE
// case query ( QMikh2 ) of 1 :
6525: LD_STRING QMikh2
6527: PPUSH
6528: CALL_OW 97
6532: PUSH
6533: LD_INT 1
6535: DOUBLE
6536: EQUAL
6537: IFTRUE 6541
6539: GO 6608
6541: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
6542: LD_INT 1
6544: PPUSH
6545: LD_INT 6
6547: PPUSH
6548: LD_INT 2
6550: PPUSH
6551: LD_INT 1
6553: PPUSH
6554: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
6558: LD_EXP 8
6562: PPUSH
6563: LD_INT 6
6565: PPUSH
6566: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6570: LD_EXP 8
6574: PPUSH
6575: CALL_OW 122
// wait ( 0 0$1 ) ;
6579: LD_INT 35
6581: PPUSH
6582: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
6586: LD_EXP 8
6590: PPUSH
6591: LD_INT 17
6593: PPUSH
6594: CALL_OW 113
// mikhailInbase = 0 ;
6598: LD_ADDR_EXP 21
6602: PUSH
6603: LD_INT 0
6605: ST_TO_ADDR
// end ; 2 :
6606: GO 6849
6608: LD_INT 2
6610: DOUBLE
6611: EQUAL
6612: IFTRUE 6616
6614: GO 6789
6616: POP
// begin mikhailInBase = 2 ;
6617: LD_ADDR_EXP 21
6621: PUSH
6622: LD_INT 2
6624: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
6625: LD_EXP 8
6629: PPUSH
6630: LD_INT 6
6632: PPUSH
6633: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6637: LD_EXP 8
6641: PPUSH
6642: CALL_OW 122
// wait ( 0 0$1 ) ;
6646: LD_INT 35
6648: PPUSH
6649: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
6653: LD_EXP 8
6657: PPUSH
6658: LD_EXP 8
6662: PPUSH
6663: CALL_OW 250
6667: PUSH
6668: LD_INT 2
6670: PLUS
6671: PPUSH
6672: LD_EXP 8
6676: PPUSH
6677: CALL_OW 251
6681: PUSH
6682: LD_INT 2
6684: PLUS
6685: PPUSH
6686: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
6690: LD_EXP 8
6694: PPUSH
6695: LD_EXP 8
6699: PPUSH
6700: CALL_OW 250
6704: PUSH
6705: LD_INT 1
6707: PLUS
6708: PPUSH
6709: LD_EXP 8
6713: PPUSH
6714: CALL_OW 251
6718: PUSH
6719: LD_INT 2
6721: PLUS
6722: PPUSH
6723: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
6727: LD_EXP 8
6731: PPUSH
6732: LD_EXP 8
6736: PPUSH
6737: CALL_OW 250
6741: PUSH
6742: LD_INT 2
6744: PLUS
6745: PPUSH
6746: LD_EXP 8
6750: PPUSH
6751: CALL_OW 251
6755: PPUSH
6756: CALL_OW 171
// wait ( 0 0$5 ) ;
6760: LD_INT 175
6762: PPUSH
6763: CALL_OW 67
// AddComMoveToArea ( Mikhail , MikhailEnter ) ;
6767: LD_EXP 8
6771: PPUSH
6772: LD_INT 25
6774: PPUSH
6775: CALL_OW 173
// mikhailStatus = 1 ;
6779: LD_ADDR_EXP 20
6783: PUSH
6784: LD_INT 1
6786: ST_TO_ADDR
// end ; 3 :
6787: GO 6849
6789: LD_INT 3
6791: DOUBLE
6792: EQUAL
6793: IFTRUE 6797
6795: GO 6848
6797: POP
// begin SetSide ( Mikhail , 6 ) ;
6798: LD_EXP 8
6802: PPUSH
6803: LD_INT 6
6805: PPUSH
6806: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6810: LD_EXP 8
6814: PPUSH
6815: CALL_OW 122
// wait ( 0 0$1 ) ;
6819: LD_INT 35
6821: PPUSH
6822: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
6826: LD_EXP 8
6830: PPUSH
6831: LD_INT 17
6833: PPUSH
6834: CALL_OW 113
// mikhailInbase = 0 ;
6838: LD_ADDR_EXP 21
6842: PUSH
6843: LD_INT 0
6845: ST_TO_ADDR
// end ; end ;
6846: GO 6849
6848: POP
// end ;
6849: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 2 do
6850: LD_EXP 8
6854: PPUSH
6855: LD_INT 25
6857: PPUSH
6858: CALL_OW 308
6862: PUSH
6863: LD_EXP 21
6867: PUSH
6868: LD_INT 2
6870: EQUAL
6871: AND
6872: IFFALSE 6970
6874: GO 6876
6876: DISABLE
// begin enable ;
6877: ENABLE
// SetSide ( Mikhail , 1 ) ;
6878: LD_EXP 8
6882: PPUSH
6883: LD_INT 1
6885: PPUSH
6886: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
6890: LD_INT 35
6892: PPUSH
6893: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
6897: LD_EXP 8
6901: PPUSH
6902: LD_INT 1
6904: PPUSH
6905: CALL_OW 296
6909: PUSH
6910: LD_EXP 8
6914: PPUSH
6915: LD_INT 10
6917: PPUSH
6918: CALL_OW 296
6922: LESS
6923: IFFALSE 6939
// begin ComEnterUnit ( Mikhail , dep1 ) ;
6925: LD_EXP 8
6929: PPUSH
6930: LD_INT 1
6932: PPUSH
6933: CALL_OW 120
// end else
6937: GO 6951
// begin ComEnterUnit ( Mikhail , dep2 ) ;
6939: LD_EXP 8
6943: PPUSH
6944: LD_INT 10
6946: PPUSH
6947: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
6951: LD_EXP 8
6955: PPUSH
6956: CALL_OW 310
6960: IFFALSE 6890
// mikhailInBase = 1 ;
6962: LD_ADDR_EXP 21
6966: PUSH
6967: LD_INT 1
6969: ST_TO_ADDR
// end ;
6970: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) do
6971: LD_EXP 8
6975: PPUSH
6976: CALL_OW 310
6980: IFFALSE 7106
6982: GO 6984
6984: DISABLE
// begin enable ;
6985: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
6986: LD_INT 22
6988: PUSH
6989: LD_INT 1
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: LD_INT 21
6998: PUSH
6999: LD_INT 1
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 91
7008: PUSH
7009: LD_EXP 8
7013: PPUSH
7014: CALL_OW 310
7018: PUSH
7019: LD_INT 10
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: LIST
7031: PPUSH
7032: CALL_OW 69
7036: PUSH
7037: LD_INT 1
7039: EQUAL
7040: IFFALSE 7106
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7042: LD_INT 1
7044: PPUSH
7045: LD_INT 6
7047: PPUSH
7048: LD_INT 2
7050: PPUSH
7051: LD_INT 1
7053: PPUSH
7054: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7058: LD_EXP 8
7062: PPUSH
7063: LD_INT 6
7065: PPUSH
7066: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7070: LD_EXP 8
7074: PPUSH
7075: CALL_OW 122
// wait ( 0 0$1 ) ;
7079: LD_INT 35
7081: PPUSH
7082: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7086: LD_EXP 8
7090: PPUSH
7091: LD_INT 17
7093: PPUSH
7094: CALL_OW 113
// mikhailStatus = 3 ;
7098: LD_ADDR_EXP 20
7102: PUSH
7103: LD_INT 3
7105: ST_TO_ADDR
// end ; end ;
7106: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 do var tmp ;
7107: LD_EXP 1
7111: PPUSH
7112: LD_EXP 22
7116: PPUSH
7117: CALL_OW 296
7121: PUSH
7122: LD_INT 5
7124: LESS
7125: PUSH
7126: LD_EXP 20
7130: PUSH
7131: LD_INT 3
7133: EQUAL
7134: AND
7135: IFFALSE 7351
7137: GO 7139
7139: DISABLE
7140: LD_INT 0
7142: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
7143: LD_ADDR_VAR 0 1
7147: PUSH
7148: LD_INT 22
7150: PUSH
7151: LD_INT 1
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: LD_INT 21
7160: PUSH
7161: LD_INT 1
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: LD_INT 26
7170: PUSH
7171: LD_INT 1
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: PPUSH
7183: CALL_OW 69
7187: PUSH
7188: LD_EXP 1
7192: PUSH
7193: EMPTY
7194: LIST
7195: DIFF
7196: ST_TO_ADDR
// DialogueOn ;
7197: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7201: LD_EXP 1
7205: PPUSH
7206: LD_STRING D7-JMM-1
7208: PPUSH
7209: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7213: LD_VAR 0 1
7217: PUSH
7218: LD_INT 1
7220: ARRAY
7221: PPUSH
7222: LD_STRING D7-Sol1-1
7224: PPUSH
7225: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7229: LD_EXP 1
7233: PPUSH
7234: LD_STRING D7-JMM-2
7236: PPUSH
7237: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7241: LD_VAR 0 1
7245: PUSH
7246: LD_INT 1
7248: ARRAY
7249: PPUSH
7250: LD_STRING D7-Sol1-2
7252: PPUSH
7253: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7257: LD_EXP 1
7261: PPUSH
7262: LD_STRING D7-JMM-3
7264: PPUSH
7265: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7269: LD_VAR 0 1
7273: PUSH
7274: LD_INT 1
7276: ARRAY
7277: PPUSH
7278: LD_STRING D7-Sol1-3
7280: PPUSH
7281: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7285: LD_EXP 3
7289: PPUSH
7290: CALL_OW 302
7294: PUSH
7295: LD_EXP 4
7299: PPUSH
7300: CALL_OW 302
7304: AND
7305: IFFALSE 7347
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7307: LD_EXP 3
7311: PPUSH
7312: LD_STRING D7-Cyrus-3
7314: PPUSH
7315: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7319: LD_VAR 0 1
7323: PUSH
7324: LD_INT 1
7326: ARRAY
7327: PPUSH
7328: LD_STRING D7-Sol1-4
7330: PPUSH
7331: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7335: LD_EXP 4
7339: PPUSH
7340: LD_STRING D7-Lisa-4
7342: PPUSH
7343: CALL_OW 88
// end ; DialogueOff ;
7347: CALL_OW 7
// end ;
7351: PPOPN 1
7353: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7354: LD_EXP 8
7358: PPUSH
7359: LD_INT 17
7361: PPUSH
7362: CALL_OW 308
7366: PUSH
7367: LD_EXP 8
7371: PPUSH
7372: CALL_OW 255
7376: PUSH
7377: LD_INT 6
7379: EQUAL
7380: AND
7381: IFFALSE 7403
7383: GO 7385
7385: DISABLE
// begin mikhailStatus = 3 ;
7386: LD_ADDR_EXP 20
7390: PUSH
7391: LD_INT 3
7393: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
7394: LD_EXP 8
7398: PPUSH
7399: CALL_OW 64
// end ;
7403: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
7404: LD_EXP 20
7408: PUSH
7409: LD_INT 3
7411: EQUAL
7412: PUSH
7413: LD_EXP 8
7417: PPUSH
7418: CALL_OW 255
7422: PUSH
7423: LD_INT 6
7425: EQUAL
7426: AND
7427: IFFALSE 7593
7429: GO 7431
7431: DISABLE
7432: LD_INT 0
7434: PPUSH
7435: PPUSH
// begin enable ;
7436: ENABLE
// if IsOk ( Mikhail ) then
7437: LD_EXP 8
7441: PPUSH
7442: CALL_OW 302
7446: IFFALSE 7593
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
7448: LD_ADDR_VAR 0 2
7452: PUSH
7453: LD_EXP 8
7457: PPUSH
7458: LD_INT 22
7460: PUSH
7461: LD_INT 1
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 21
7470: PUSH
7471: LD_INT 1
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: PPUSH
7482: CALL_OW 69
7486: PPUSH
7487: CALL 9153 0 2
7491: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
7492: LD_VAR 0 2
7496: PPUSH
7497: LD_EXP 8
7501: PPUSH
7502: CALL_OW 296
7506: PUSH
7507: LD_INT 8
7509: LESS
7510: IFFALSE 7593
// begin if GetSex ( attacker ) = sex_male then
7512: LD_VAR 0 2
7516: PPUSH
7517: CALL_OW 258
7521: PUSH
7522: LD_INT 1
7524: EQUAL
7525: IFFALSE 7561
// begin disable ;
7527: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
7528: LD_VAR 0 2
7532: PPUSH
7533: LD_STRING D7a-Sol1-1
7535: PPUSH
7536: CALL_OW 88
// wait ( 0 0$2 ) ;
7540: LD_INT 70
7542: PPUSH
7543: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
7547: LD_VAR 0 2
7551: PPUSH
7552: LD_STRING D7a-Sol1-1a
7554: PPUSH
7555: CALL_OW 88
// end else
7559: GO 7593
// begin disable ;
7561: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
7562: LD_VAR 0 2
7566: PPUSH
7567: LD_STRING D7a-FSol1-1
7569: PPUSH
7570: CALL_OW 88
// wait ( 0 0$2 ) ;
7574: LD_INT 70
7576: PPUSH
7577: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
7581: LD_VAR 0 2
7585: PPUSH
7586: LD_STRING D7a-FSol1-1a
7588: PPUSH
7589: CALL_OW 88
// end ; end ; end ; end ; end_of_file
7593: PPOPN 2
7595: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7596: LD_INT 0
7598: PPUSH
7599: PPUSH
7600: PPUSH
7601: PPUSH
// for i = 1 to count do
7602: LD_ADDR_VAR 0 8
7606: PUSH
7607: DOUBLE
7608: LD_INT 1
7610: DEC
7611: ST_TO_ADDR
7612: LD_VAR 0 6
7616: PUSH
7617: FOR_TO
7618: IFFALSE 7699
// begin uc_side = side ;
7620: LD_ADDR_OWVAR 20
7624: PUSH
7625: LD_VAR 0 1
7629: ST_TO_ADDR
// uc_nation = nation ;
7630: LD_ADDR_OWVAR 21
7634: PUSH
7635: LD_VAR 0 2
7639: ST_TO_ADDR
// hc_gallery =  ;
7640: LD_ADDR_OWVAR 33
7644: PUSH
7645: LD_STRING 
7647: ST_TO_ADDR
// hc_name =  ;
7648: LD_ADDR_OWVAR 26
7652: PUSH
7653: LD_STRING 
7655: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7656: LD_INT 0
7658: PPUSH
7659: LD_VAR 0 5
7663: PPUSH
7664: LD_VAR 0 4
7668: PPUSH
7669: CALL_OW 380
// un = CreateHuman ;
7673: LD_ADDR_VAR 0 10
7677: PUSH
7678: CALL_OW 44
7682: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7683: LD_VAR 0 10
7687: PPUSH
7688: LD_VAR 0 3
7692: PPUSH
7693: CALL_OW 52
// end ;
7697: GO 7617
7699: POP
7700: POP
// end ;
7701: LD_VAR 0 7
7705: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7706: LD_INT 0
7708: PPUSH
7709: PPUSH
7710: PPUSH
// uc_side := GetSide ( b ) ;
7711: LD_ADDR_OWVAR 20
7715: PUSH
7716: LD_VAR 0 2
7720: PPUSH
7721: CALL_OW 255
7725: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7726: LD_ADDR_OWVAR 21
7730: PUSH
7731: LD_VAR 0 2
7735: PPUSH
7736: CALL_OW 248
7740: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7741: LD_INT 0
7743: PPUSH
7744: LD_INT 1
7746: PPUSH
7747: LD_VAR 0 1
7751: PPUSH
7752: CALL_OW 380
// un = CreateHuman ;
7756: LD_ADDR_VAR 0 4
7760: PUSH
7761: CALL_OW 44
7765: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
7766: LD_ADDR_VAR 0 5
7770: PUSH
7771: LD_VAR 0 2
7775: PPUSH
7776: CALL_OW 254
7780: PUSH
7781: LD_INT 3
7783: MINUS
7784: ST_TO_ADDR
// if dir < 0 then
7785: LD_VAR 0 5
7789: PUSH
7790: LD_INT 0
7792: LESS
7793: IFFALSE 7809
// dir := 6 + dir ;
7795: LD_ADDR_VAR 0 5
7799: PUSH
7800: LD_INT 6
7802: PUSH
7803: LD_VAR 0 5
7807: PLUS
7808: ST_TO_ADDR
// SetDir ( un , dir ) ;
7809: LD_VAR 0 4
7813: PPUSH
7814: LD_VAR 0 5
7818: PPUSH
7819: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7823: LD_VAR 0 4
7827: PPUSH
7828: LD_VAR 0 2
7832: PPUSH
7833: CALL_OW 52
// end ;
7837: LD_VAR 0 3
7841: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
7842: LD_INT 0
7844: PPUSH
7845: PPUSH
7846: PPUSH
7847: PPUSH
7848: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
7849: LD_ADDR_VAR 0 7
7853: PUSH
7854: LD_INT 22
7856: PUSH
7857: LD_VAR 0 1
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 25
7868: PUSH
7869: LD_INT 2
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: PUSH
7876: LD_INT 24
7878: PUSH
7879: LD_INT 1000
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: LIST
7890: PPUSH
7891: CALL_OW 69
7895: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7896: LD_ADDR_VAR 0 5
7900: PUSH
7901: LD_VAR 0 3
7905: PPUSH
7906: LD_INT 22
7908: PUSH
7909: LD_VAR 0 1
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: LD_INT 21
7920: PUSH
7921: LD_INT 3
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 3
7930: PUSH
7931: LD_INT 24
7933: PUSH
7934: LD_INT 1000
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: LIST
7949: PUSH
7950: EMPTY
7951: LIST
7952: PPUSH
7953: CALL_OW 70
7957: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
7958: LD_VAR 0 5
7962: PUSH
7963: LD_INT 0
7965: GREATER
7966: PUSH
7967: LD_VAR 0 7
7971: PUSH
7972: LD_INT 0
7974: GREATER
7975: AND
7976: IFFALSE 8042
// begin for i in engineerOk_list do
7978: LD_ADDR_VAR 0 6
7982: PUSH
7983: LD_VAR 0 7
7987: PUSH
7988: FOR_IN
7989: IFFALSE 8040
// begin for j in buildings_list do
7991: LD_ADDR_VAR 0 8
7995: PUSH
7996: LD_VAR 0 5
8000: PUSH
8001: FOR_IN
8002: IFFALSE 8036
// begin AddComExitBuilding ( i ) ;
8004: LD_VAR 0 6
8008: PPUSH
8009: CALL_OW 182
// wait ( 0 0$1 ) ;
8013: LD_INT 35
8015: PPUSH
8016: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8020: LD_VAR 0 6
8024: PPUSH
8025: LD_VAR 0 8
8029: PPUSH
8030: CALL_OW 190
// end ;
8034: GO 8001
8036: POP
8037: POP
// end ;
8038: GO 7988
8040: POP
8041: POP
// end ; if buildings_list = 0 then
8042: LD_VAR 0 5
8046: PUSH
8047: LD_INT 0
8049: EQUAL
8050: IFFALSE 8083
// begin for i in engineerOK_list do
8052: LD_ADDR_VAR 0 6
8056: PUSH
8057: LD_VAR 0 7
8061: PUSH
8062: FOR_IN
8063: IFFALSE 8081
// begin ComEnterUnit ( i , building ) ;
8065: LD_VAR 0 6
8069: PPUSH
8070: LD_VAR 0 2
8074: PPUSH
8075: CALL_OW 120
// end ;
8079: GO 8062
8081: POP
8082: POP
// end ; end ;
8083: LD_VAR 0 4
8087: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8088: LD_INT 0
8090: PPUSH
8091: PPUSH
8092: PPUSH
8093: PPUSH
8094: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8095: LD_ADDR_VAR 0 6
8099: PUSH
8100: LD_INT 22
8102: PUSH
8103: LD_VAR 0 1
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 25
8114: PUSH
8115: LD_INT 4
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PPUSH
8126: CALL_OW 69
8130: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
8131: LD_ADDR_VAR 0 9
8135: PUSH
8136: LD_VAR 0 3
8140: PPUSH
8141: LD_INT 22
8143: PUSH
8144: LD_VAR 0 1
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PUSH
8153: LD_INT 21
8155: PUSH
8156: LD_INT 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 3
8165: PUSH
8166: LD_INT 24
8168: PUSH
8169: LD_INT 650
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: LIST
8184: PPUSH
8185: CALL_OW 70
8189: ST_TO_ADDR
// if damageUnits > 0 then
8190: LD_VAR 0 9
8194: PUSH
8195: LD_INT 0
8197: GREATER
8198: IFFALSE 8348
// begin for i = 1 to damageUnits do
8200: LD_ADDR_VAR 0 7
8204: PUSH
8205: DOUBLE
8206: LD_INT 1
8208: DEC
8209: ST_TO_ADDR
8210: LD_VAR 0 9
8214: PUSH
8215: FOR_TO
8216: IFFALSE 8240
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
8218: LD_VAR 0 9
8222: PUSH
8223: LD_VAR 0 7
8227: ARRAY
8228: PPUSH
8229: LD_VAR 0 2
8233: PPUSH
8234: CALL_OW 113
8238: GO 8215
8240: POP
8241: POP
// for i = 1 to sci_list do
8242: LD_ADDR_VAR 0 7
8246: PUSH
8247: DOUBLE
8248: LD_INT 1
8250: DEC
8251: ST_TO_ADDR
8252: LD_VAR 0 6
8256: PUSH
8257: FOR_TO
8258: IFFALSE 8344
// begin ComExitBuilding ( sci_list [ i ] ) ;
8260: LD_VAR 0 6
8264: PUSH
8265: LD_VAR 0 7
8269: ARRAY
8270: PPUSH
8271: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
8275: LD_ADDR_VAR 0 8
8279: PUSH
8280: LD_VAR 0 2
8284: PPUSH
8285: LD_INT 22
8287: PUSH
8288: LD_VAR 0 1
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PPUSH
8297: CALL_OW 70
8301: PUSH
8302: FOR_IN
8303: IFFALSE 8340
// begin AddComHeal ( sci_list [ i ] , j [ j ] ) ;
8305: LD_VAR 0 6
8309: PUSH
8310: LD_VAR 0 7
8314: ARRAY
8315: PPUSH
8316: LD_VAR 0 8
8320: PUSH
8321: LD_VAR 0 8
8325: ARRAY
8326: PPUSH
8327: CALL_OW 188
// wait ( 1 1$0 ) ;
8331: LD_INT 2100
8333: PPUSH
8334: CALL_OW 67
// end ;
8338: GO 8302
8340: POP
8341: POP
// end ;
8342: GO 8257
8344: POP
8345: POP
// end else
8346: GO 8362
// begin AddComEnterUnit ( sci_list , build ) ;
8348: LD_VAR 0 6
8352: PPUSH
8353: LD_VAR 0 4
8357: PPUSH
8358: CALL_OW 180
// end ; end ;
8362: LD_VAR 0 5
8366: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
8367: LD_INT 0
8369: PPUSH
8370: PPUSH
8371: PPUSH
8372: PPUSH
8373: PPUSH
8374: PPUSH
8375: PPUSH
8376: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
8377: LD_ADDR_VAR 0 7
8381: PUSH
8382: LD_VAR 0 3
8386: PPUSH
8387: LD_INT 22
8389: PUSH
8390: LD_VAR 0 1
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: LD_INT 21
8401: PUSH
8402: LD_INT 2
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 24
8411: PUSH
8412: LD_INT 550
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: LD_INT 34
8421: PUSH
8422: LD_INT 46
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: PPUSH
8435: CALL_OW 70
8439: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
8440: LD_ADDR_VAR 0 8
8444: PUSH
8445: LD_VAR 0 3
8449: PPUSH
8450: LD_INT 22
8452: PUSH
8453: LD_VAR 0 1
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PUSH
8462: LD_INT 21
8464: PUSH
8465: LD_INT 2
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PUSH
8472: LD_INT 34
8474: PUSH
8475: LD_INT 46
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: PUSH
8482: LD_INT 3
8484: PUSH
8485: LD_INT 24
8487: PUSH
8488: LD_INT 550
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: PPUSH
8505: CALL_OW 70
8509: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
8510: LD_ADDR_VAR 0 9
8514: PUSH
8515: LD_VAR 0 2
8519: PPUSH
8520: LD_INT 22
8522: PUSH
8523: LD_VAR 0 1
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 21
8534: PUSH
8535: LD_INT 2
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 34
8544: PUSH
8545: LD_INT 46
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: LD_INT 24
8554: PUSH
8555: LD_INT 1000
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 58
8564: PUSH
8565: EMPTY
8566: LIST
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: PPUSH
8575: CALL_OW 70
8579: ST_TO_ADDR
// for i in damageVehicle_list do
8580: LD_ADDR_VAR 0 5
8584: PUSH
8585: LD_VAR 0 8
8589: PUSH
8590: FOR_IN
8591: IFFALSE 8610
// mechanicInside_list = UnitsInside ( i ) ;
8593: LD_ADDR_VAR 0 10
8597: PUSH
8598: LD_VAR 0 5
8602: PPUSH
8603: CALL_OW 313
8607: ST_TO_ADDR
8608: GO 8590
8610: POP
8611: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8612: LD_ADDR_VAR 0 11
8616: PUSH
8617: LD_VAR 0 2
8621: PPUSH
8622: LD_INT 22
8624: PUSH
8625: LD_VAR 0 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 25
8636: PUSH
8637: LD_INT 3
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PPUSH
8648: CALL_OW 70
8652: ST_TO_ADDR
// if damageVehicle_list > 0 then
8653: LD_VAR 0 8
8657: PUSH
8658: LD_INT 0
8660: GREATER
8661: IFFALSE 8734
// begin for i in damageVehicle_list do
8663: LD_ADDR_VAR 0 5
8667: PUSH
8668: LD_VAR 0 8
8672: PUSH
8673: FOR_IN
8674: IFFALSE 8732
// begin for j in mechanicInside_list do
8676: LD_ADDR_VAR 0 6
8680: PUSH
8681: LD_VAR 0 10
8685: PUSH
8686: FOR_IN
8687: IFFALSE 8728
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
8689: LD_VAR 0 8
8693: PPUSH
8694: LD_VAR 0 2
8698: PPUSH
8699: CALL_OW 113
// AddComExitVehicle ( j ) ;
8703: LD_VAR 0 6
8707: PPUSH
8708: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
8712: LD_VAR 0 6
8716: PPUSH
8717: LD_VAR 0 5
8721: PPUSH
8722: CALL_OW 189
// end ;
8726: GO 8686
8728: POP
8729: POP
// end ;
8730: GO 8673
8732: POP
8733: POP
// end ; if emptyVehicle_list > 0 then
8734: LD_VAR 0 9
8738: PUSH
8739: LD_INT 0
8741: GREATER
8742: IFFALSE 8792
// begin for i in emptyVehicle_list do
8744: LD_ADDR_VAR 0 5
8748: PUSH
8749: LD_VAR 0 9
8753: PUSH
8754: FOR_IN
8755: IFFALSE 8790
// begin for j in mechanicOutside_list do
8757: LD_ADDR_VAR 0 6
8761: PUSH
8762: LD_VAR 0 11
8766: PUSH
8767: FOR_IN
8768: IFFALSE 8786
// begin AddComEnterUnit ( j , i ) ;
8770: LD_VAR 0 6
8774: PPUSH
8775: LD_VAR 0 5
8779: PPUSH
8780: CALL_OW 180
// end ;
8784: GO 8767
8786: POP
8787: POP
// end ;
8788: GO 8754
8790: POP
8791: POP
// end ; if VehicleOK_list > 0 then
8792: LD_VAR 0 7
8796: PUSH
8797: LD_INT 0
8799: GREATER
8800: IFFALSE 8834
// begin for i in VehicleOK_list do
8802: LD_ADDR_VAR 0 5
8806: PUSH
8807: LD_VAR 0 7
8811: PUSH
8812: FOR_IN
8813: IFFALSE 8832
// ComAgressiveMove ( i , 110 , 29 ) ;
8815: LD_VAR 0 5
8819: PPUSH
8820: LD_INT 110
8822: PPUSH
8823: LD_INT 29
8825: PPUSH
8826: CALL_OW 114
8830: GO 8812
8832: POP
8833: POP
// end ; end ;
8834: LD_VAR 0 4
8838: RET
// export function DefendBases ( area , enemySide , defendersList , build ) ; var i , j ; begin
8839: LD_INT 0
8841: PPUSH
8842: PPUSH
8843: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_type , unit_human ] ] ) > 0 then
8844: LD_VAR 0 1
8848: PPUSH
8849: LD_INT 22
8851: PUSH
8852: LD_VAR 0 2
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: LD_INT 21
8863: PUSH
8864: LD_INT 1
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 70
8879: PUSH
8880: LD_INT 0
8882: GREATER
8883: IFFALSE 8997
// begin for i in defendersList do
8885: LD_ADDR_VAR 0 6
8889: PUSH
8890: LD_VAR 0 3
8894: PUSH
8895: FOR_IN
8896: IFFALSE 8993
// begin AddComExitBuilding ( i ) ;
8898: LD_VAR 0 6
8902: PPUSH
8903: CALL_OW 182
// wait ( 0 0$1 ) ;
8907: LD_INT 35
8909: PPUSH
8910: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_type , unit_human ] ] ) do
8914: LD_ADDR_VAR 0 7
8918: PUSH
8919: LD_VAR 0 1
8923: PPUSH
8924: LD_INT 22
8926: PUSH
8927: LD_VAR 0 2
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: LD_INT 21
8938: PUSH
8939: LD_INT 1
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PPUSH
8950: CALL_OW 70
8954: PUSH
8955: FOR_IN
8956: IFFALSE 8989
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
8958: LD_VAR 0 6
8962: PPUSH
8963: LD_VAR 0 7
8967: PPUSH
8968: CALL_OW 250
8972: PPUSH
8973: LD_VAR 0 7
8977: PPUSH
8978: CALL_OW 251
8982: PPUSH
8983: CALL_OW 174
8987: GO 8955
8989: POP
8990: POP
// end ;
8991: GO 8895
8993: POP
8994: POP
// end else
8995: GO 9028
// begin for i in defendersList do
8997: LD_ADDR_VAR 0 6
9001: PUSH
9002: LD_VAR 0 3
9006: PUSH
9007: FOR_IN
9008: IFFALSE 9026
// ComEnterUnit ( i , build ) ;
9010: LD_VAR 0 6
9014: PPUSH
9015: LD_VAR 0 4
9019: PPUSH
9020: CALL_OW 120
9024: GO 9007
9026: POP
9027: POP
// end ; end ;
9028: LD_VAR 0 5
9032: RET
// export function RussianTrap ; var i ; begin
9033: LD_INT 0
9035: PPUSH
9036: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
9037: LD_ADDR_VAR 0 2
9041: PUSH
9042: LD_INT 22
9044: PUSH
9045: LD_INT 3
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: LD_INT 21
9054: PUSH
9055: LD_INT 1
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: PPUSH
9066: CALL_OW 69
9070: PUSH
9071: FOR_IN
9072: IFFALSE 9146
// begin ComExitBuilding ( i ) ;
9074: LD_VAR 0 2
9078: PPUSH
9079: CALL_OW 122
// wait ( 0 0$1 ) ;
9083: LD_INT 35
9085: PPUSH
9086: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
9090: LD_VAR 0 2
9094: PPUSH
9095: LD_INT 120
9097: PPUSH
9098: LD_INT 56
9100: PPUSH
9101: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
9105: LD_VAR 0 2
9109: PPUSH
9110: LD_INT 111
9112: PPUSH
9113: LD_INT 37
9115: PPUSH
9116: CALL_OW 174
// AddComCrawl ( i ) ;
9120: LD_VAR 0 2
9124: PPUSH
9125: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
9129: LD_VAR 0 2
9133: PPUSH
9134: LD_INT 109
9136: PPUSH
9137: LD_INT 30
9139: PPUSH
9140: CALL_OW 174
// end ;
9144: GO 9071
9146: POP
9147: POP
// end ;
9148: LD_VAR 0 1
9152: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
9153: LD_INT 0
9155: PPUSH
9156: PPUSH
9157: PPUSH
9158: PPUSH
9159: PPUSH
// nearest_dist = 1000 ;
9160: LD_ADDR_VAR 0 4
9164: PUSH
9165: LD_INT 1000
9167: ST_TO_ADDR
// nearest_un = un ;
9168: LD_ADDR_VAR 0 5
9172: PUSH
9173: LD_VAR 0 1
9177: ST_TO_ADDR
// for sold in units do
9178: LD_ADDR_VAR 0 6
9182: PUSH
9183: LD_VAR 0 2
9187: PUSH
9188: FOR_IN
9189: IFFALSE 9245
// begin dist = GetDistUnits ( un , sold ) ;
9191: LD_ADDR_VAR 0 7
9195: PUSH
9196: LD_VAR 0 1
9200: PPUSH
9201: LD_VAR 0 6
9205: PPUSH
9206: CALL_OW 296
9210: ST_TO_ADDR
// if dist < nearest_dist then
9211: LD_VAR 0 7
9215: PUSH
9216: LD_VAR 0 4
9220: LESS
9221: IFFALSE 9243
// begin nearest_un = sold ;
9223: LD_ADDR_VAR 0 5
9227: PUSH
9228: LD_VAR 0 6
9232: ST_TO_ADDR
// nearest_dist = dist ;
9233: LD_ADDR_VAR 0 4
9237: PUSH
9238: LD_VAR 0 7
9242: ST_TO_ADDR
// end ; end ;
9243: GO 9188
9245: POP
9246: POP
// result := nearest_un ;
9247: LD_ADDR_VAR 0 3
9251: PUSH
9252: LD_VAR 0 5
9256: ST_TO_ADDR
// end ;
9257: LD_VAR 0 3
9261: RET
// export function PrepareDifficulty ; begin
9262: LD_INT 0
9264: PPUSH
// if Difficulty = 1 then
9265: LD_OWVAR 67
9269: PUSH
9270: LD_INT 1
9272: EQUAL
9273: IFFALSE 9336
// begin RemoveUnit ( brw2 ) ;
9275: LD_INT 9
9277: PPUSH
9278: CALL_OW 64
// RemoveUnit ( brw3 ) ;
9282: LD_INT 30
9284: PPUSH
9285: CALL_OW 64
// RemoveUnit ( brw4 ) ;
9289: LD_INT 52
9291: PPUSH
9292: CALL_OW 64
// RemoveUnit ( brw5 ) ;
9296: LD_INT 63
9298: PPUSH
9299: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
9303: LD_INT 5
9305: PUSH
9306: LD_INT 4
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PPUSH
9313: LD_INT 60
9315: PPUSH
9316: CALL_OW 240
// RuSoldMinLevel = 0 ;
9320: LD_ADDR_EXP 13
9324: PUSH
9325: LD_INT 0
9327: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
9328: LD_ADDR_EXP 14
9332: PUSH
9333: LD_INT 1
9335: ST_TO_ADDR
// end ; if Difficulty = 2 then
9336: LD_OWVAR 67
9340: PUSH
9341: LD_INT 2
9343: EQUAL
9344: IFFALSE 9393
// begin RemoveUnit ( brw3 ) ;
9346: LD_INT 30
9348: PPUSH
9349: CALL_OW 64
// RemoveUnit ( brw4 ) ;
9353: LD_INT 52
9355: PPUSH
9356: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
9360: LD_INT 5
9362: PUSH
9363: LD_INT 4
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: PPUSH
9370: LD_INT 50
9372: PPUSH
9373: CALL_OW 240
// RuSoldMinLevel = 1 ;
9377: LD_ADDR_EXP 13
9381: PUSH
9382: LD_INT 1
9384: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
9385: LD_ADDR_EXP 14
9389: PUSH
9390: LD_INT 2
9392: ST_TO_ADDR
// end ; if Difficulty = 3 then
9393: LD_OWVAR 67
9397: PUSH
9398: LD_INT 3
9400: EQUAL
9401: IFFALSE 9436
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
9403: LD_INT 5
9405: PUSH
9406: LD_INT 4
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PPUSH
9413: LD_INT 40
9415: PPUSH
9416: CALL_OW 240
// RuSoldMinLevel = 2 ;
9420: LD_ADDR_EXP 13
9424: PUSH
9425: LD_INT 2
9427: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
9428: LD_ADDR_EXP 14
9432: PUSH
9433: LD_INT 3
9435: ST_TO_ADDR
// end ; end ;
9436: LD_VAR 0 1
9440: RET
// export function FinishMission ; begin
9441: LD_INT 0
9443: PPUSH
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
9444: LD_INT 1
9446: PPUSH
9447: CALL_OW 274
9451: PPUSH
9452: LD_INT 1
9454: PPUSH
9455: CALL_OW 275
9459: PUSH
9460: LD_INT 200
9462: GREATEREQUAL
9463: IFFALSE 9477
// begin AddMedal ( Cans , 1 ) ;
9465: LD_STRING Cans
9467: PPUSH
9468: LD_INT 1
9470: PPUSH
9471: CALL_OW 101
// end else
9475: GO 9488
// begin AddMedal ( Cans , - 1 ) ;
9477: LD_STRING Cans
9479: PPUSH
9480: LD_INT 1
9482: NEG
9483: PPUSH
9484: CALL_OW 101
// end ; if deadsCounter <= 3 then
9488: LD_EXP 27
9492: PUSH
9493: LD_INT 3
9495: LESSEQUAL
9496: IFFALSE 9510
// begin AddMedal ( Deaths , 1 ) ;
9498: LD_STRING Deaths
9500: PPUSH
9501: LD_INT 1
9503: PPUSH
9504: CALL_OW 101
// end else
9508: GO 9521
// begin AddMedal ( Deaths , - 1 ) ;
9510: LD_STRING Deaths
9512: PPUSH
9513: LD_INT 1
9515: NEG
9516: PPUSH
9517: CALL_OW 101
// end ; if mikhailStatus = 0 then
9521: LD_EXP 20
9525: PUSH
9526: LD_INT 0
9528: EQUAL
9529: IFFALSE 9542
// AddMedal ( Prisoner , - 1 ) ;
9531: LD_STRING Prisoner
9533: PPUSH
9534: LD_INT 1
9536: NEG
9537: PPUSH
9538: CALL_OW 101
// if mikhailStatus = 1 then
9542: LD_EXP 20
9546: PUSH
9547: LD_INT 1
9549: EQUAL
9550: IFFALSE 9562
// AddMedal ( Prisoner , 1 ) ;
9552: LD_STRING Prisoner
9554: PPUSH
9555: LD_INT 1
9557: PPUSH
9558: CALL_OW 101
// if mikhailStatus = 2 then
9562: LD_EXP 20
9566: PUSH
9567: LD_INT 2
9569: EQUAL
9570: IFFALSE 9582
// AddMedal ( Prisoner , 2 ) ;
9572: LD_STRING Prisoner
9574: PPUSH
9575: LD_INT 2
9577: PPUSH
9578: CALL_OW 101
// if mikhailStatus = 3 then
9582: LD_EXP 20
9586: PUSH
9587: LD_INT 3
9589: EQUAL
9590: IFFALSE 9603
// AddMedal ( Prisoner , - 2 ) ;
9592: LD_STRING Prisoner
9594: PPUSH
9595: LD_INT 2
9597: NEG
9598: PPUSH
9599: CALL_OW 101
// if mikhailStatus = 1 then
9603: LD_EXP 20
9607: PUSH
9608: LD_INT 1
9610: EQUAL
9611: IFFALSE 9625
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
9613: LD_EXP 20
9617: PPUSH
9618: LD_STRING 02_mikhailStatus_1
9620: PPUSH
9621: CALL_OW 39
// if IsOK ( vehicle1 ) and GetSide ( vehicle1 ) = 1 then
9625: LD_INT 5
9627: PPUSH
9628: CALL_OW 302
9632: PUSH
9633: LD_INT 5
9635: PPUSH
9636: CALL_OW 255
9640: PUSH
9641: LD_INT 1
9643: EQUAL
9644: AND
9645: IFFALSE 9701
// SaveVariable ( [ GetChassis ( vehicle1 ) , GetEngine ( vehicle1 ) , GetControl ( vehicle1 ) , GetWeapon ( vehicle1 ) , GetLives ( vehicle1 ) ] , 02_tank1_2 ) ;
9647: LD_INT 5
9649: PPUSH
9650: CALL_OW 265
9654: PUSH
9655: LD_INT 5
9657: PPUSH
9658: CALL_OW 262
9662: PUSH
9663: LD_INT 5
9665: PPUSH
9666: CALL_OW 263
9670: PUSH
9671: LD_INT 5
9673: PPUSH
9674: CALL_OW 264
9678: PUSH
9679: LD_INT 5
9681: PPUSH
9682: CALL_OW 256
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: PPUSH
9694: LD_STRING 02_tank1_2
9696: PPUSH
9697: CALL_OW 39
// if IsOK ( vehicle2 ) and GetSide ( vehicle2 ) = 1 then
9701: LD_INT 4
9703: PPUSH
9704: CALL_OW 302
9708: PUSH
9709: LD_INT 4
9711: PPUSH
9712: CALL_OW 255
9716: PUSH
9717: LD_INT 1
9719: EQUAL
9720: AND
9721: IFFALSE 9777
// SaveVariable ( [ GetChassis ( vehicle2 ) , GetEngine ( vehicle2 ) , GetControl ( vehicle2 ) , GetWeapon ( vehicle2 ) , GetLives ( vehicle2 ) ] , 02_tank2_3 ) ;
9723: LD_INT 4
9725: PPUSH
9726: CALL_OW 265
9730: PUSH
9731: LD_INT 4
9733: PPUSH
9734: CALL_OW 262
9738: PUSH
9739: LD_INT 4
9741: PPUSH
9742: CALL_OW 263
9746: PUSH
9747: LD_INT 4
9749: PPUSH
9750: CALL_OW 264
9754: PUSH
9755: LD_INT 4
9757: PPUSH
9758: CALL_OW 256
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: PPUSH
9770: LD_STRING 02_tank2_3
9772: PPUSH
9773: CALL_OW 39
// GiveMedals ( MAIN ) ;
9777: LD_STRING MAIN
9779: PPUSH
9780: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
9784: LD_INT 22
9786: PUSH
9787: LD_INT 1
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 21
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 69
9812: PPUSH
9813: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
9817: LD_EXP 1
9821: PPUSH
9822: LD_STRING JMM
9824: PPUSH
9825: CALL_OW 38
// SaveCharacters ( Bobby , Bobby ) ;
9829: LD_EXP 2
9833: PPUSH
9834: LD_STRING Bobby
9836: PPUSH
9837: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
9841: LD_EXP 3
9845: PPUSH
9846: LD_STRING Cyrus
9848: PPUSH
9849: CALL_OW 38
// SaveCharacters ( Lisa , Lisa ) ;
9853: LD_EXP 4
9857: PPUSH
9858: LD_STRING Lisa
9860: PPUSH
9861: CALL_OW 38
// SaveCharacters ( Khatam , Khatam ) ;
9865: LD_EXP 5
9869: PPUSH
9870: LD_STRING Khatam
9872: PPUSH
9873: CALL_OW 38
// if IsOK ( Brian ) then
9877: LD_EXP 6
9881: PPUSH
9882: CALL_OW 302
9886: IFFALSE 9900
// SaveCharacters ( Brian , Brian ) ;
9888: LD_EXP 6
9892: PPUSH
9893: LD_STRING Brian
9895: PPUSH
9896: CALL_OW 38
// if IsOk ( Jerry ) then
9900: LD_EXP 7
9904: PPUSH
9905: CALL_OW 302
9909: IFFALSE 9923
// SaveCharacters ( Jerry , Jerry ) ;
9911: LD_EXP 7
9915: PPUSH
9916: LD_STRING Jerry
9918: PPUSH
9919: CALL_OW 38
// if mikhailStatus = 1 then
9923: LD_EXP 20
9927: PUSH
9928: LD_INT 1
9930: EQUAL
9931: IFFALSE 9945
// SaveCharacters ( Mikhail , Mikhail ) ;
9933: LD_EXP 8
9937: PPUSH
9938: LD_STRING Mikhail
9940: PPUSH
9941: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry ] , 02_other_survivors ) ;
9945: LD_INT 50
9947: PUSH
9948: EMPTY
9949: LIST
9950: PUSH
9951: LD_INT 22
9953: PUSH
9954: LD_INT 1
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: LD_INT 21
9963: PUSH
9964: LD_INT 1
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: LIST
9975: PPUSH
9976: CALL_OW 69
9980: PUSH
9981: LD_EXP 1
9985: PUSH
9986: LD_EXP 2
9990: PUSH
9991: LD_EXP 3
9995: PUSH
9996: LD_EXP 4
10000: PUSH
10001: LD_EXP 5
10005: PUSH
10006: LD_EXP 6
10010: PUSH
10011: LD_EXP 7
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: DIFF
10025: PPUSH
10026: LD_STRING 02_other_survivors
10028: PPUSH
10029: CALL_OW 38
// YouWin ;
10033: CALL_OW 103
// end ; end_of_file
10037: LD_VAR 0 1
10041: RET
// export function PrepareHeroes ; begin
10042: LD_INT 0
10044: PPUSH
// uc_side = 1 ;
10045: LD_ADDR_OWVAR 20
10049: PUSH
10050: LD_INT 1
10052: ST_TO_ADDR
// JMM = CreateCharacter ( JMM ) ;
10053: LD_ADDR_EXP 1
10057: PUSH
10058: LD_STRING JMM
10060: PPUSH
10061: CALL_OW 34
10065: ST_TO_ADDR
// SetLives ( JMM , LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ) ;
10066: LD_EXP 1
10070: PPUSH
10071: LD_STRING 01_JMMLifePoints_1
10073: PPUSH
10074: LD_INT 1000
10076: PPUSH
10077: CALL_OW 30
10081: PPUSH
10082: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10086: LD_ADDR_EXP 9
10090: PUSH
10091: LD_STRING Powell
10093: PPUSH
10094: CALL_OW 25
10098: ST_TO_ADDR
// Bobby = CreateCharacter ( Bobby ) ;
10099: LD_ADDR_EXP 2
10103: PUSH
10104: LD_STRING Bobby
10106: PPUSH
10107: CALL_OW 34
10111: ST_TO_ADDR
// if Bobby then
10112: LD_EXP 2
10116: IFFALSE 10138
// SetLives ( Bobby , LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ) ;
10118: LD_EXP 2
10122: PPUSH
10123: LD_STRING 01_BobbyLifePoints_1
10125: PPUSH
10126: LD_INT 1000
10128: PPUSH
10129: CALL_OW 30
10133: PPUSH
10134: CALL_OW 234
// Cyrus = CreateCharacter ( Cyrus ) ;
10138: LD_ADDR_EXP 3
10142: PUSH
10143: LD_STRING Cyrus
10145: PPUSH
10146: CALL_OW 34
10150: ST_TO_ADDR
// if Cyrus then
10151: LD_EXP 3
10155: IFFALSE 10177
// SetLives ( Cyrus , LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ) ;
10157: LD_EXP 3
10161: PPUSH
10162: LD_STRING 01_CyrusLifePoints_1
10164: PPUSH
10165: LD_INT 1000
10167: PPUSH
10168: CALL_OW 30
10172: PPUSH
10173: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
10177: LD_ADDR_EXP 5
10181: PUSH
10182: LD_STRING Khatam
10184: PPUSH
10185: CALL_OW 25
10189: ST_TO_ADDR
// uc_side = 4 ;
10190: LD_ADDR_OWVAR 20
10194: PUSH
10195: LD_INT 4
10197: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10198: LD_ADDR_EXP 4
10202: PUSH
10203: LD_STRING Lisa
10205: PPUSH
10206: CALL_OW 25
10210: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10211: LD_EXP 1
10215: PPUSH
10216: LD_INT 3
10218: PPUSH
10219: LD_INT 0
10221: PPUSH
10222: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10226: LD_EXP 2
10230: PPUSH
10231: LD_INT 3
10233: PPUSH
10234: LD_INT 0
10236: PPUSH
10237: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10241: LD_EXP 3
10245: PPUSH
10246: LD_INT 3
10248: PPUSH
10249: LD_INT 0
10251: PPUSH
10252: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10256: LD_EXP 4
10260: PPUSH
10261: LD_INT 5
10263: PPUSH
10264: LD_INT 0
10266: PPUSH
10267: CALL_OW 49
// ComCrawl ( Lisa ) ;
10271: LD_EXP 4
10275: PPUSH
10276: CALL_OW 137
// end ;
10280: LD_VAR 0 1
10284: RET
// export function PrepareLisSquad ; var i , un ; begin
10285: LD_INT 0
10287: PPUSH
10288: PPUSH
10289: PPUSH
// for i = 1 to 2 do
10290: LD_ADDR_VAR 0 2
10294: PUSH
10295: DOUBLE
10296: LD_INT 1
10298: DEC
10299: ST_TO_ADDR
10300: LD_INT 2
10302: PUSH
10303: FOR_TO
10304: IFFALSE 10386
// begin uc_side = 4 ;
10306: LD_ADDR_OWVAR 20
10310: PUSH
10311: LD_INT 4
10313: ST_TO_ADDR
// uc_nation = 1 ;
10314: LD_ADDR_OWVAR 21
10318: PUSH
10319: LD_INT 1
10321: ST_TO_ADDR
// hc_gallery =  ;
10322: LD_ADDR_OWVAR 33
10326: PUSH
10327: LD_STRING 
10329: ST_TO_ADDR
// hc_name =  ;
10330: LD_ADDR_OWVAR 26
10334: PUSH
10335: LD_STRING 
10337: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( 0 , 1 ) ) ;
10338: LD_INT 0
10340: PPUSH
10341: LD_INT 2
10343: PPUSH
10344: LD_INT 0
10346: PPUSH
10347: LD_INT 1
10349: PPUSH
10350: CALL_OW 12
10354: PPUSH
10355: CALL_OW 380
// un = CreateHuman ;
10359: LD_ADDR_VAR 0 3
10363: PUSH
10364: CALL_OW 44
10368: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10369: LD_VAR 0 3
10373: PPUSH
10374: LD_INT 6
10376: PPUSH
10377: LD_INT 0
10379: PPUSH
10380: CALL_OW 49
// end ;
10384: GO 10303
10386: POP
10387: POP
// end ;
10388: LD_VAR 0 1
10392: RET
// export function PrepareOtherAmericans ; begin
10393: LD_INT 0
10395: PPUSH
// uc_side = 4 ;
10396: LD_ADDR_OWVAR 20
10400: PUSH
10401: LD_INT 4
10403: ST_TO_ADDR
// uc_nation = 1 ;
10404: LD_ADDR_OWVAR 21
10408: PUSH
10409: LD_INT 1
10411: ST_TO_ADDR
// hc_gallery =  ;
10412: LD_ADDR_OWVAR 33
10416: PUSH
10417: LD_STRING 
10419: ST_TO_ADDR
// hc_name = Brian Garvin ;
10420: LD_ADDR_OWVAR 26
10424: PUSH
10425: LD_STRING Brian Garvin
10427: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
10428: LD_INT 1
10430: PPUSH
10431: LD_INT 1
10433: PPUSH
10434: LD_INT 1
10436: PPUSH
10437: LD_INT 2
10439: PPUSH
10440: CALL_OW 12
10444: PPUSH
10445: CALL_OW 380
// Brian = CreateHuman ;
10449: LD_ADDR_EXP 6
10453: PUSH
10454: CALL_OW 44
10458: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
10459: LD_EXP 6
10463: PPUSH
10464: LD_INT 10
10466: PPUSH
10467: LD_INT 0
10469: PPUSH
10470: CALL_OW 49
// hc_name = Jerry White ;
10474: LD_ADDR_OWVAR 26
10478: PUSH
10479: LD_STRING Jerry White
10481: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
10482: LD_INT 1
10484: PPUSH
10485: LD_INT 3
10487: PPUSH
10488: LD_INT 1
10490: PPUSH
10491: LD_INT 2
10493: PPUSH
10494: CALL_OW 12
10498: PPUSH
10499: CALL_OW 380
// Jerry = CreateHuman ;
10503: LD_ADDR_EXP 7
10507: PUSH
10508: CALL_OW 44
10512: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
10513: LD_EXP 7
10517: PPUSH
10518: LD_INT 10
10520: PPUSH
10521: LD_INT 0
10523: PPUSH
10524: CALL_OW 49
// SetLives ( Jerry , 250 ) ;
10528: LD_EXP 7
10532: PPUSH
10533: LD_INT 250
10535: PPUSH
10536: CALL_OW 234
// end ;
10540: LD_VAR 0 1
10544: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
10545: LD_INT 0
10547: PPUSH
10548: PPUSH
10549: PPUSH
// for i = 1 to 6 do
10550: LD_ADDR_VAR 0 2
10554: PUSH
10555: DOUBLE
10556: LD_INT 1
10558: DEC
10559: ST_TO_ADDR
10560: LD_INT 6
10562: PUSH
10563: FOR_TO
10564: IFFALSE 10658
// begin uc_side = 4 ;
10566: LD_ADDR_OWVAR 20
10570: PUSH
10571: LD_INT 4
10573: ST_TO_ADDR
// uc_nation = 1 ;
10574: LD_ADDR_OWVAR 21
10578: PUSH
10579: LD_INT 1
10581: ST_TO_ADDR
// hc_gallery =  ;
10582: LD_ADDR_OWVAR 33
10586: PUSH
10587: LD_STRING 
10589: ST_TO_ADDR
// hc_name =  ;
10590: LD_ADDR_OWVAR 26
10594: PUSH
10595: LD_STRING 
10597: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
10598: LD_INT 0
10600: PPUSH
10601: LD_INT 1
10603: PPUSH
10604: LD_INT 4
10606: PPUSH
10607: CALL_OW 12
10611: PPUSH
10612: LD_INT 1
10614: PPUSH
10615: CALL_OW 380
// un = CreateHuman ;
10619: LD_ADDR_VAR 0 3
10623: PUSH
10624: CALL_OW 44
10628: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
10629: LD_VAR 0 3
10633: PPUSH
10634: LD_INT 16
10636: PPUSH
10637: LD_INT 0
10639: PPUSH
10640: CALL_OW 49
// SetLives ( un , 1 ) ;
10644: LD_VAR 0 3
10648: PPUSH
10649: LD_INT 1
10651: PPUSH
10652: CALL_OW 234
// end ;
10656: GO 10563
10658: POP
10659: POP
// DyingSold = CreateHuman ;
10660: LD_ADDR_EXP 29
10664: PUSH
10665: CALL_OW 44
10669: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
10670: LD_EXP 29
10674: PPUSH
10675: LD_INT 16
10677: PPUSH
10678: LD_INT 0
10680: PPUSH
10681: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
10685: LD_EXP 29
10689: PPUSH
10690: LD_INT 250
10692: PPUSH
10693: CALL_OW 234
// end ; end_of_file
10697: LD_VAR 0 1
10701: RET
// export function PrepareRussianHeroes ; var tmp ; begin
10702: LD_INT 0
10704: PPUSH
10705: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) ;
10706: LD_ADDR_VAR 0 2
10710: PUSH
10711: LD_INT 22
10713: PUSH
10714: LD_INT 1
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 23
10723: PUSH
10724: LD_INT 1
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: LD_INT 25
10733: PUSH
10734: LD_INT 2
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: LIST
10745: PPUSH
10746: CALL_OW 69
10750: ST_TO_ADDR
// uc_side = 6 ;
10751: LD_ADDR_OWVAR 20
10755: PUSH
10756: LD_INT 6
10758: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
10759: LD_ADDR_EXP 8
10763: PUSH
10764: LD_STRING Mikhail
10766: PPUSH
10767: CALL_OW 25
10771: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
10772: LD_EXP 8
10776: PPUSH
10777: LD_VAR 0 2
10781: PUSH
10782: LD_INT 1
10784: ARRAY
10785: PPUSH
10786: CALL_OW 250
10790: PPUSH
10791: LD_VAR 0 2
10795: PUSH
10796: LD_INT 1
10798: ARRAY
10799: PPUSH
10800: CALL_OW 251
10804: PPUSH
10805: LD_INT 3
10807: PPUSH
10808: LD_INT 1
10810: PPUSH
10811: CALL_OW 50
// end ;
10815: LD_VAR 0 1
10819: RET
// export function PrepareRussianCommander ; var un ; begin
10820: LD_INT 0
10822: PPUSH
10823: PPUSH
// uc_side = 3 ;
10824: LD_ADDR_OWVAR 20
10828: PUSH
10829: LD_INT 3
10831: ST_TO_ADDR
// uc_nation = 3 ;
10832: LD_ADDR_OWVAR 21
10836: PUSH
10837: LD_INT 3
10839: ST_TO_ADDR
// hc_gallery =  ;
10840: LD_ADDR_OWVAR 33
10844: PUSH
10845: LD_STRING 
10847: ST_TO_ADDR
// hc_name = Natasza Stjepanowna ;
10848: LD_ADDR_OWVAR 26
10852: PUSH
10853: LD_STRING Natasza Stjepanowna
10855: ST_TO_ADDR
// PrepareHuman ( 2 , 1 , rand ( 2 , 4 ) ) ;
10856: LD_INT 2
10858: PPUSH
10859: LD_INT 1
10861: PPUSH
10862: LD_INT 2
10864: PPUSH
10865: LD_INT 4
10867: PPUSH
10868: CALL_OW 12
10872: PPUSH
10873: CALL_OW 380
// hc_importance = 110 ;
10877: LD_ADDR_OWVAR 32
10881: PUSH
10882: LD_INT 110
10884: ST_TO_ADDR
// un = CreateHuman ;
10885: LD_ADDR_VAR 0 2
10889: PUSH
10890: CALL_OW 44
10894: ST_TO_ADDR
// PlaceUnitArea ( un , NataszaSpawn , false ) ;
10895: LD_VAR 0 2
10899: PPUSH
10900: LD_INT 24
10902: PPUSH
10903: LD_INT 0
10905: PPUSH
10906: CALL_OW 49
// ComTurnXY ( un , 56 , 16 ) ;
10910: LD_VAR 0 2
10914: PPUSH
10915: LD_INT 56
10917: PPUSH
10918: LD_INT 16
10920: PPUSH
10921: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ un ;
10925: LD_ADDR_EXP 23
10929: PUSH
10930: LD_EXP 23
10934: PUSH
10935: LD_VAR 0 2
10939: ADD
10940: ST_TO_ADDR
// end ;
10941: LD_VAR 0 1
10945: RET
// export function PrepareSouthBase ; var i , un ; begin
10946: LD_INT 0
10948: PPUSH
10949: PPUSH
10950: PPUSH
// for i = 1 to 2 do
10951: LD_ADDR_VAR 0 2
10955: PUSH
10956: DOUBLE
10957: LD_INT 1
10959: DEC
10960: ST_TO_ADDR
10961: LD_INT 2
10963: PUSH
10964: FOR_TO
10965: IFFALSE 11074
// begin uc_side = 3 ;
10967: LD_ADDR_OWVAR 20
10971: PUSH
10972: LD_INT 3
10974: ST_TO_ADDR
// uc_nation = 3 ;
10975: LD_ADDR_OWVAR 21
10979: PUSH
10980: LD_INT 3
10982: ST_TO_ADDR
// hc_gallery =  ;
10983: LD_ADDR_OWVAR 33
10987: PUSH
10988: LD_STRING 
10990: ST_TO_ADDR
// hc_name =  ;
10991: LD_ADDR_OWVAR 26
10995: PUSH
10996: LD_STRING 
10998: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
10999: LD_INT 1
11001: PPUSH
11002: LD_INT 1
11004: PPUSH
11005: LD_EXP 13
11009: PPUSH
11010: LD_EXP 14
11014: PPUSH
11015: CALL_OW 12
11019: PPUSH
11020: CALL_OW 380
// hc_importance = 0 ;
11024: LD_ADDR_OWVAR 32
11028: PUSH
11029: LD_INT 0
11031: ST_TO_ADDR
// un = CreateHuman ;
11032: LD_ADDR_VAR 0 3
11036: PUSH
11037: CALL_OW 44
11041: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11042: LD_VAR 0 3
11046: PPUSH
11047: LD_INT 11
11049: PPUSH
11050: LD_INT 0
11052: PPUSH
11053: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11057: LD_VAR 0 3
11061: PPUSH
11062: LD_INT 111
11064: PPUSH
11065: LD_INT 38
11067: PPUSH
11068: CALL_OW 118
// end ;
11072: GO 10964
11074: POP
11075: POP
// for i = 1 to Difficulty do
11076: LD_ADDR_VAR 0 2
11080: PUSH
11081: DOUBLE
11082: LD_INT 1
11084: DEC
11085: ST_TO_ADDR
11086: LD_OWVAR 67
11090: PUSH
11091: FOR_TO
11092: IFFALSE 11193
// begin uc_side = 3 ;
11094: LD_ADDR_OWVAR 20
11098: PUSH
11099: LD_INT 3
11101: ST_TO_ADDR
// uc_nation = 3 ;
11102: LD_ADDR_OWVAR 21
11106: PUSH
11107: LD_INT 3
11109: ST_TO_ADDR
// hc_gallery =  ;
11110: LD_ADDR_OWVAR 33
11114: PUSH
11115: LD_STRING 
11117: ST_TO_ADDR
// hc_name =  ;
11118: LD_ADDR_OWVAR 26
11122: PUSH
11123: LD_STRING 
11125: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11126: LD_INT 0
11128: PPUSH
11129: LD_INT 3
11131: PPUSH
11132: LD_EXP 13
11136: PPUSH
11137: LD_EXP 14
11141: PPUSH
11142: CALL_OW 12
11146: PPUSH
11147: CALL_OW 380
// un = CreateHuman ;
11151: LD_ADDR_VAR 0 3
11155: PUSH
11156: CALL_OW 44
11160: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
11161: LD_VAR 0 3
11165: PPUSH
11166: LD_INT 12
11168: PPUSH
11169: LD_INT 0
11171: PPUSH
11172: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
11176: LD_VAR 0 3
11180: PPUSH
11181: LD_INT 111
11183: PPUSH
11184: LD_INT 28
11186: PPUSH
11187: CALL_OW 118
// end ;
11191: GO 11091
11193: POP
11194: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
11195: LD_INT 3
11197: PPUSH
11198: LD_INT 3
11200: PPUSH
11201: LD_INT 33
11203: PPUSH
11204: LD_EXP 13
11208: PPUSH
11209: LD_EXP 14
11213: PPUSH
11214: CALL_OW 12
11218: PPUSH
11219: LD_INT 1
11221: PPUSH
11222: LD_INT 1
11224: PUSH
11225: LD_INT 1
11227: PPUSH
11228: LD_INT 2
11230: PPUSH
11231: CALL_OW 12
11235: PUSH
11236: LD_INT 1
11238: PPUSH
11239: LD_INT 2
11241: PPUSH
11242: CALL_OW 12
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: LIST
11251: PUSH
11252: LD_OWVAR 67
11256: ARRAY
11257: PPUSH
11258: CALL 7596 0 6
// for i in UnitsInside ( arm2 ) do
11262: LD_ADDR_VAR 0 2
11266: PUSH
11267: LD_INT 33
11269: PPUSH
11270: CALL_OW 313
11274: PUSH
11275: FOR_IN
11276: IFFALSE 11296
// southBaseDefenders = southBaseDefenders ^ i ;
11278: LD_ADDR_EXP 24
11282: PUSH
11283: LD_EXP 24
11287: PUSH
11288: LD_VAR 0 2
11292: ADD
11293: ST_TO_ADDR
11294: GO 11275
11296: POP
11297: POP
// end ;
11298: LD_VAR 0 1
11302: RET
// export function PrepareNorthBase ; var i , un ; begin
11303: LD_INT 0
11305: PPUSH
11306: PPUSH
11307: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
11308: LD_ADDR_VAR 0 2
11312: PUSH
11313: DOUBLE
11314: LD_INT 1
11316: DEC
11317: ST_TO_ADDR
11318: LD_INT 1
11320: PPUSH
11321: LD_INT 2
11323: PPUSH
11324: CALL_OW 12
11328: PUSH
11329: LD_INT 2
11331: PPUSH
11332: LD_INT 3
11334: PPUSH
11335: CALL_OW 12
11339: PUSH
11340: LD_INT 3
11342: PPUSH
11343: LD_INT 4
11345: PPUSH
11346: CALL_OW 12
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: PUSH
11356: LD_OWVAR 67
11360: ARRAY
11361: PUSH
11362: FOR_TO
11363: IFFALSE 11449
// begin uc_side = 3 ;
11365: LD_ADDR_OWVAR 20
11369: PUSH
11370: LD_INT 3
11372: ST_TO_ADDR
// uc_nation = 3 ;
11373: LD_ADDR_OWVAR 21
11377: PUSH
11378: LD_INT 3
11380: ST_TO_ADDR
// hc_gallery =  ;
11381: LD_ADDR_OWVAR 33
11385: PUSH
11386: LD_STRING 
11388: ST_TO_ADDR
// hc_name =  ;
11389: LD_ADDR_OWVAR 26
11393: PUSH
11394: LD_STRING 
11396: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11397: LD_INT 0
11399: PPUSH
11400: LD_INT 1
11402: PPUSH
11403: LD_EXP 13
11407: PPUSH
11408: LD_EXP 14
11412: PPUSH
11413: CALL_OW 12
11417: PPUSH
11418: CALL_OW 380
// un = CreateHuman ;
11422: LD_ADDR_VAR 0 3
11426: PUSH
11427: CALL_OW 44
11431: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
11432: LD_VAR 0 3
11436: PPUSH
11437: LD_INT 14
11439: PPUSH
11440: LD_INT 0
11442: PPUSH
11443: CALL_OW 49
// end ;
11447: GO 11362
11449: POP
11450: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
11451: LD_INT 3
11453: PPUSH
11454: LD_INT 3
11456: PPUSH
11457: LD_INT 2
11459: PPUSH
11460: LD_EXP 13
11464: PPUSH
11465: LD_EXP 14
11469: PPUSH
11470: CALL_OW 12
11474: PPUSH
11475: LD_INT 1
11477: PPUSH
11478: LD_INT 1
11480: PPUSH
11481: LD_INT 2
11483: PPUSH
11484: CALL_OW 12
11488: PUSH
11489: LD_INT 1
11491: PPUSH
11492: LD_INT 3
11494: PPUSH
11495: CALL_OW 12
11499: PUSH
11500: LD_INT 1
11502: PPUSH
11503: LD_INT 3
11505: PPUSH
11506: CALL_OW 12
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: LIST
11515: PUSH
11516: LD_OWVAR 67
11520: ARRAY
11521: PPUSH
11522: CALL 7596 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
11526: LD_INT 3
11528: PPUSH
11529: LD_INT 3
11531: PPUSH
11532: LD_INT 23
11534: PPUSH
11535: LD_EXP 13
11539: PPUSH
11540: LD_EXP 14
11544: PPUSH
11545: CALL_OW 12
11549: PPUSH
11550: LD_INT 4
11552: PPUSH
11553: LD_INT 0
11555: PUSH
11556: LD_INT 1
11558: PUSH
11559: LD_INT 2
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: LIST
11566: PUSH
11567: LD_OWVAR 67
11571: ARRAY
11572: PPUSH
11573: CALL 7596 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
11577: LD_INT 3
11579: PPUSH
11580: LD_INT 3
11582: PPUSH
11583: LD_INT 1
11585: PPUSH
11586: LD_EXP 13
11590: PPUSH
11591: LD_EXP 14
11595: PPUSH
11596: CALL_OW 12
11600: PPUSH
11601: LD_INT 2
11603: PPUSH
11604: LD_INT 1
11606: PUSH
11607: LD_INT 2
11609: PUSH
11610: LD_INT 2
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: LIST
11617: PUSH
11618: LD_OWVAR 67
11622: ARRAY
11623: PPUSH
11624: CALL 7596 0 6
// for i in UnitsInside ( arm1 ) do
11628: LD_ADDR_VAR 0 2
11632: PUSH
11633: LD_INT 2
11635: PPUSH
11636: CALL_OW 313
11640: PUSH
11641: FOR_IN
11642: IFFALSE 11662
// northBaseDefenders = northBaseDefenders ^ i ;
11644: LD_ADDR_EXP 23
11648: PUSH
11649: LD_EXP 23
11653: PUSH
11654: LD_VAR 0 2
11658: ADD
11659: ST_TO_ADDR
11660: GO 11641
11662: POP
11663: POP
// end ;
11664: LD_VAR 0 1
11668: RET
// export function PrepareOtherRussians ; var i , un ; begin
11669: LD_INT 0
11671: PPUSH
11672: PPUSH
11673: PPUSH
// for i = 1 to 2 do
11674: LD_ADDR_VAR 0 2
11678: PUSH
11679: DOUBLE
11680: LD_INT 1
11682: DEC
11683: ST_TO_ADDR
11684: LD_INT 2
11686: PUSH
11687: FOR_TO
11688: IFFALSE 11789
// begin uc_side = 3 ;
11690: LD_ADDR_OWVAR 20
11694: PUSH
11695: LD_INT 3
11697: ST_TO_ADDR
// uc_nation = 3 ;
11698: LD_ADDR_OWVAR 21
11702: PUSH
11703: LD_INT 3
11705: ST_TO_ADDR
// hc_gallery =  ;
11706: LD_ADDR_OWVAR 33
11710: PUSH
11711: LD_STRING 
11713: ST_TO_ADDR
// hc_name =  ;
11714: LD_ADDR_OWVAR 26
11718: PUSH
11719: LD_STRING 
11721: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11722: LD_INT 0
11724: PPUSH
11725: LD_INT 1
11727: PPUSH
11728: LD_EXP 13
11732: PPUSH
11733: LD_EXP 14
11737: PPUSH
11738: CALL_OW 12
11742: PPUSH
11743: CALL_OW 380
// un = CreateHuman ;
11747: LD_ADDR_VAR 0 3
11751: PUSH
11752: CALL_OW 44
11756: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
11757: LD_VAR 0 3
11761: PPUSH
11762: LD_INT 9
11764: PPUSH
11765: LD_INT 0
11767: PPUSH
11768: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
11772: LD_VAR 0 3
11776: PPUSH
11777: LD_INT 80
11779: PPUSH
11780: LD_INT 73
11782: PPUSH
11783: CALL_OW 118
// end ;
11787: GO 11687
11789: POP
11790: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
11791: LD_ADDR_VAR 0 2
11795: PUSH
11796: LD_INT 22
11798: PUSH
11799: LD_INT 3
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: LD_INT 30
11808: PUSH
11809: LD_INT 31
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: PPUSH
11820: CALL_OW 69
11824: PUSH
11825: FOR_IN
11826: IFFALSE 11854
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
11828: LD_EXP 13
11832: PPUSH
11833: LD_EXP 14
11837: PPUSH
11838: CALL_OW 12
11842: PPUSH
11843: LD_VAR 0 2
11847: PPUSH
11848: CALL 7706 0 2
11852: GO 11825
11854: POP
11855: POP
// end ;
11856: LD_VAR 0 1
11860: RET
// export function PrepareCargoBays ; begin
11861: LD_INT 0
11863: PPUSH
// uc_side = 3 ;
11864: LD_ADDR_OWVAR 20
11868: PUSH
11869: LD_INT 3
11871: ST_TO_ADDR
// uc_nation = 3 ;
11872: LD_ADDR_OWVAR 21
11876: PUSH
11877: LD_INT 3
11879: ST_TO_ADDR
// vc_engine = 1 ;
11880: LD_ADDR_OWVAR 39
11884: PUSH
11885: LD_INT 1
11887: ST_TO_ADDR
// vc_control = 1 ;
11888: LD_ADDR_OWVAR 38
11892: PUSH
11893: LD_INT 1
11895: ST_TO_ADDR
// vc_weapon = 51 ;
11896: LD_ADDR_OWVAR 40
11900: PUSH
11901: LD_INT 51
11903: ST_TO_ADDR
// vc_chassis = 22 ;
11904: LD_ADDR_OWVAR 37
11908: PUSH
11909: LD_INT 22
11911: ST_TO_ADDR
// cargo1 = CreateVehicle ;
11912: LD_ADDR_EXP 15
11916: PUSH
11917: CALL_OW 45
11921: ST_TO_ADDR
// cargo2 = CreateVehicle ;
11922: LD_ADDR_EXP 16
11926: PUSH
11927: CALL_OW 45
11931: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
11932: LD_EXP 15
11936: PPUSH
11937: LD_INT 13
11939: PPUSH
11940: LD_INT 0
11942: PPUSH
11943: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
11947: LD_EXP 16
11951: PPUSH
11952: LD_INT 13
11954: PPUSH
11955: LD_INT 0
11957: PPUSH
11958: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
11962: LD_EXP 15
11966: PPUSH
11967: LD_INT 2
11969: PPUSH
11970: LD_INT 70
11972: PUSH
11973: LD_INT 50
11975: PUSH
11976: LD_INT 30
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: LIST
11983: PUSH
11984: LD_OWVAR 67
11988: ARRAY
11989: PPUSH
11990: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
11994: LD_EXP 16
11998: PPUSH
11999: LD_INT 2
12001: PPUSH
12002: LD_INT 70
12004: PUSH
12005: LD_INT 50
12007: PUSH
12008: LD_INT 30
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: PUSH
12016: LD_OWVAR 67
12020: ARRAY
12021: PPUSH
12022: CALL_OW 291
// hc_gallery =  ;
12026: LD_ADDR_OWVAR 33
12030: PUSH
12031: LD_STRING 
12033: ST_TO_ADDR
// hc_name =  ;
12034: LD_ADDR_OWVAR 26
12038: PUSH
12039: LD_STRING 
12041: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12042: LD_INT 1
12044: PPUSH
12045: LD_INT 3
12047: PPUSH
12048: LD_INT 1
12050: PPUSH
12051: LD_INT 2
12053: PPUSH
12054: CALL_OW 12
12058: PPUSH
12059: CALL_OW 380
// driver1 = CreateHuman ;
12063: LD_ADDR_EXP 17
12067: PUSH
12068: CALL_OW 44
12072: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12073: LD_EXP 17
12077: PPUSH
12078: LD_EXP 15
12082: PPUSH
12083: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12087: LD_ADDR_OWVAR 26
12091: PUSH
12092: LD_STRING Nikolai Andreyev
12094: ST_TO_ADDR
// driver2 = CreateHuman ;
12095: LD_ADDR_EXP 18
12099: PUSH
12100: CALL_OW 44
12104: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12105: LD_EXP 18
12109: PPUSH
12110: LD_EXP 16
12114: PPUSH
12115: CALL_OW 52
// end ;
12119: LD_VAR 0 1
12123: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp ; begin
12124: LD_INT 0
12126: PPUSH
12127: PPUSH
12128: PPUSH
12129: PPUSH
12130: PPUSH
// uc_side = 3 ;
12131: LD_ADDR_OWVAR 20
12135: PUSH
12136: LD_INT 3
12138: ST_TO_ADDR
// uc_nation = 3 ;
12139: LD_ADDR_OWVAR 21
12143: PUSH
12144: LD_INT 3
12146: ST_TO_ADDR
// for i := 1 to count do
12147: LD_ADDR_VAR 0 4
12151: PUSH
12152: DOUBLE
12153: LD_INT 1
12155: DEC
12156: ST_TO_ADDR
12157: LD_VAR 0 1
12161: PUSH
12162: FOR_TO
12163: IFFALSE 12340
// begin vc_engine = 1 ;
12165: LD_ADDR_OWVAR 39
12169: PUSH
12170: LD_INT 1
12172: ST_TO_ADDR
// vc_control = 1 ;
12173: LD_ADDR_OWVAR 38
12177: PUSH
12178: LD_INT 1
12180: ST_TO_ADDR
// vc_weapon = 42 ;
12181: LD_ADDR_OWVAR 40
12185: PUSH
12186: LD_INT 42
12188: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
12189: LD_ADDR_OWVAR 37
12193: PUSH
12194: LD_INT 21
12196: PUSH
12197: LD_INT 22
12199: PUSH
12200: LD_INT 22
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: LIST
12207: PUSH
12208: LD_OWVAR 67
12212: ARRAY
12213: ST_TO_ADDR
// veh = CreateVehicle ;
12214: LD_ADDR_VAR 0 5
12218: PUSH
12219: CALL_OW 45
12223: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12224: LD_VAR 0 5
12228: PPUSH
12229: LD_VAR 0 2
12233: PPUSH
12234: LD_INT 0
12236: PPUSH
12237: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
12241: LD_ADDR_EXP 25
12245: PUSH
12246: LD_EXP 25
12250: PUSH
12251: LD_VAR 0 5
12255: ADD
12256: ST_TO_ADDR
// hc_gallery =  ;
12257: LD_ADDR_OWVAR 33
12261: PUSH
12262: LD_STRING 
12264: ST_TO_ADDR
// hc_name =  ;
12265: LD_ADDR_OWVAR 26
12269: PUSH
12270: LD_STRING 
12272: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12273: LD_INT 0
12275: PPUSH
12276: LD_INT 3
12278: PPUSH
12279: LD_EXP 13
12283: PPUSH
12284: LD_EXP 14
12288: PPUSH
12289: CALL_OW 12
12293: PPUSH
12294: CALL_OW 380
// un = CreateHuman ;
12298: LD_ADDR_VAR 0 6
12302: PUSH
12303: CALL_OW 44
12307: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12308: LD_VAR 0 6
12312: PPUSH
12313: LD_VAR 0 5
12317: PPUSH
12318: CALL_OW 52
// attackGroup = attackGroup ^ un ;
12322: LD_ADDR_EXP 25
12326: PUSH
12327: LD_EXP 25
12331: PUSH
12332: LD_VAR 0 6
12336: ADD
12337: ST_TO_ADDR
// end ;
12338: GO 12162
12340: POP
12341: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12342: LD_INT 0
12344: PPUSH
12345: LD_INT 2
12347: PPUSH
12348: LD_EXP 13
12352: PPUSH
12353: LD_EXP 14
12357: PPUSH
12358: CALL_OW 12
12362: PPUSH
12363: CALL_OW 380
// un = CreateHuman ;
12367: LD_ADDR_VAR 0 6
12371: PUSH
12372: CALL_OW 44
12376: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
12377: LD_ADDR_VAR 0 4
12381: PUSH
12382: DOUBLE
12383: LD_INT 1
12385: DEC
12386: ST_TO_ADDR
12387: LD_VAR 0 1
12391: PUSH
12392: LD_INT 2
12394: PUSH
12395: LD_INT 2
12397: MUL
12398: PLUS
12399: PUSH
12400: FOR_TO
12401: IFFALSE 12489
// begin hc_gallery =  ;
12403: LD_ADDR_OWVAR 33
12407: PUSH
12408: LD_STRING 
12410: ST_TO_ADDR
// hc_name =  ;
12411: LD_ADDR_OWVAR 26
12415: PUSH
12416: LD_STRING 
12418: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12419: LD_INT 1
12421: PPUSH
12422: LD_INT 1
12424: PPUSH
12425: LD_EXP 13
12429: PPUSH
12430: LD_EXP 14
12434: PPUSH
12435: CALL_OW 12
12439: PPUSH
12440: CALL_OW 380
// un = CreateHuman ;
12444: LD_ADDR_VAR 0 6
12448: PUSH
12449: CALL_OW 44
12453: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
12454: LD_VAR 0 6
12458: PPUSH
12459: LD_VAR 0 2
12463: PPUSH
12464: LD_INT 0
12466: PPUSH
12467: CALL_OW 49
// attackGroup = attackGroup ^ un ;
12471: LD_ADDR_EXP 25
12475: PUSH
12476: LD_EXP 25
12480: PUSH
12481: LD_VAR 0 6
12485: ADD
12486: ST_TO_ADDR
// end ;
12487: GO 12400
12489: POP
12490: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
12491: LD_ADDR_VAR 0 7
12495: PUSH
12496: LD_INT 26
12498: PPUSH
12499: LD_INT 22
12501: PUSH
12502: LD_INT 3
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: LD_INT 21
12511: PUSH
12512: LD_INT 1
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PUSH
12519: LD_INT 26
12521: PUSH
12522: LD_INT 1
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: LIST
12533: PPUSH
12534: CALL_OW 70
12538: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
12539: LD_VAR 0 7
12543: PUSH
12544: LD_INT 1
12546: ARRAY
12547: PPUSH
12548: LD_STRING D9-Rus3-1
12550: PPUSH
12551: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
12555: LD_VAR 0 7
12559: PUSH
12560: LD_INT 2
12562: ARRAY
12563: PPUSH
12564: LD_STRING D9-Russ-1
12566: PPUSH
12567: CALL_OW 88
// for i in attackGroup do
12571: LD_ADDR_VAR 0 4
12575: PUSH
12576: LD_EXP 25
12580: PUSH
12581: FOR_IN
12582: IFFALSE 12601
// ComAgressiveMove ( i , 54 , 19 ) ;
12584: LD_VAR 0 4
12588: PPUSH
12589: LD_INT 54
12591: PPUSH
12592: LD_INT 19
12594: PPUSH
12595: CALL_OW 114
12599: GO 12581
12601: POP
12602: POP
// end ; end_of_file
12603: LD_VAR 0 3
12607: RET
// every 0 0$1 do
12608: GO 12610
12610: DISABLE
// begin enable ;
12611: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
12612: LD_INT 3
12614: PPUSH
12615: LD_INT 1
12617: PPUSH
12618: LD_INT 22
12620: PPUSH
12621: CALL 7842 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
12625: LD_INT 3
12627: PPUSH
12628: LD_INT 20
12630: PPUSH
12631: LD_INT 22
12633: PPUSH
12634: LD_INT 23
12636: PPUSH
12637: CALL 8088 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
12641: LD_INT 3
12643: PPUSH
12644: LD_INT 21
12646: PPUSH
12647: LD_INT 23
12649: PPUSH
12650: CALL 8367 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
12654: LD_INT 22
12656: PPUSH
12657: LD_INT 1
12659: PPUSH
12660: LD_EXP 23
12664: PPUSH
12665: LD_INT 2
12667: PPUSH
12668: CALL 8839 0 4
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
12672: LD_INT 23
12674: PPUSH
12675: LD_INT 1
12677: PPUSH
12678: LD_EXP 24
12682: PPUSH
12683: LD_INT 33
12685: PPUSH
12686: CALL 8839 0 4
// end ; end_of_file
12690: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 then
12691: LD_VAR 0 1
12695: PPUSH
12696: CALL_OW 255
12700: PUSH
12701: LD_INT 1
12703: EQUAL
12704: IFFALSE 12720
// deadsCounter = deadsCounter + 1 ;
12706: LD_ADDR_EXP 27
12710: PUSH
12711: LD_EXP 27
12715: PUSH
12716: LD_INT 1
12718: PLUS
12719: ST_TO_ADDR
// end ; end_of_file
12720: PPOPN 1
12722: END
// every 0 0$1 trigger IsDead ( JMM ) do
12723: LD_EXP 1
12727: PPUSH
12728: CALL_OW 301
12732: IFFALSE 12744
12734: GO 12736
12736: DISABLE
// YouLost ( JMM ) ;
12737: LD_STRING JMM
12739: PPUSH
12740: CALL_OW 104
12744: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
12745: LD_INT 1
12747: PPUSH
12748: CALL_OW 301
12752: PUSH
12753: LD_INT 10
12755: PPUSH
12756: CALL_OW 301
12760: OR
12761: IFFALSE 12773
12763: GO 12765
12765: DISABLE
// YouLost ( DepotDestroyed ) ;
12766: LD_STRING DepotDestroyed
12768: PPUSH
12769: CALL_OW 104
12773: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
12774: LD_INT 22
12776: PUSH
12777: LD_INT 1
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: LD_INT 21
12786: PUSH
12787: LD_INT 1
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 25
12796: PUSH
12797: LD_INT 2
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: LIST
12808: PPUSH
12809: CALL_OW 69
12813: PUSH
12814: LD_INT 0
12816: EQUAL
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 4
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 21
12830: PUSH
12831: LD_INT 1
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 25
12840: PUSH
12841: LD_INT 2
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: PPUSH
12853: CALL_OW 69
12857: PUSH
12858: LD_INT 0
12860: EQUAL
12861: AND
12862: PUSH
12863: LD_INT 1
12865: PPUSH
12866: CALL_OW 255
12870: PUSH
12871: LD_INT 3
12873: EQUAL
12874: AND
12875: PUSH
12876: LD_INT 10
12878: PPUSH
12879: CALL_OW 255
12883: PUSH
12884: LD_INT 3
12886: EQUAL
12887: AND
12888: IFFALSE 12900
12890: GO 12892
12892: DISABLE
// YouLost ( Engineer ) ;
12893: LD_STRING Engineer
12895: PPUSH
12896: CALL_OW 104
12900: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and LastBattle = 1 do
12901: LD_INT 22
12903: PPUSH
12904: LD_INT 22
12906: PUSH
12907: LD_INT 1
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 21
12916: PUSH
12917: LD_INT 1
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 70
12932: PUSH
12933: LD_INT 0
12935: EQUAL
12936: PUSH
12937: LD_INT 22
12939: PPUSH
12940: LD_INT 22
12942: PUSH
12943: LD_INT 3
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PUSH
12950: LD_INT 21
12952: PUSH
12953: LD_INT 1
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PPUSH
12964: CALL_OW 70
12968: PUSH
12969: LD_INT 0
12971: GREATER
12972: AND
12973: PUSH
12974: LD_EXP 26
12978: PUSH
12979: LD_INT 1
12981: EQUAL
12982: AND
12983: IFFALSE 12995
12985: GO 12987
12987: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
12988: LD_STRING DepotCaptured
12990: PPUSH
12991: CALL_OW 104
12995: END
// export function PrepareTigers ; var i , un ; begin
12996: LD_INT 0
12998: PPUSH
12999: PPUSH
13000: PPUSH
// for i = 1 to Difficulty do
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: DOUBLE
13007: LD_INT 1
13009: DEC
13010: ST_TO_ADDR
13011: LD_OWVAR 67
13015: PUSH
13016: FOR_TO
13017: IFFALSE 13152
// begin hc_sex = sex_male ;
13019: LD_ADDR_OWVAR 27
13023: PUSH
13024: LD_INT 1
13026: ST_TO_ADDR
// uc_side = 0 ;
13027: LD_ADDR_OWVAR 20
13031: PUSH
13032: LD_INT 0
13034: ST_TO_ADDR
// uc_nation = nation_nature ;
13035: LD_ADDR_OWVAR 21
13039: PUSH
13040: LD_INT 0
13042: ST_TO_ADDR
// hc_class = class_tiger ;
13043: LD_ADDR_OWVAR 28
13047: PUSH
13048: LD_INT 14
13050: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
13051: LD_ADDR_OWVAR 31
13055: PUSH
13056: LD_EXP 14
13060: PUSH
13061: LD_INT 0
13063: PUSH
13064: LD_INT 0
13066: PUSH
13067: LD_INT 0
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: ST_TO_ADDR
// hc_agressivity = [ rand ( 10 , 20 ) , rand ( 20 , 30 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
13076: LD_ADDR_OWVAR 35
13080: PUSH
13081: LD_INT 10
13083: PPUSH
13084: LD_INT 20
13086: PPUSH
13087: CALL_OW 12
13091: PUSH
13092: LD_INT 20
13094: PPUSH
13095: LD_INT 30
13097: PPUSH
13098: CALL_OW 12
13102: PUSH
13103: LD_INT 40
13105: PPUSH
13106: LD_INT 50
13108: PPUSH
13109: CALL_OW 12
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: LIST
13118: PUSH
13119: LD_OWVAR 67
13123: ARRAY
13124: ST_TO_ADDR
// un = CreateHuman ;
13125: LD_ADDR_VAR 0 3
13129: PUSH
13130: CALL_OW 44
13134: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13135: LD_VAR 0 3
13139: PPUSH
13140: LD_INT 27
13142: PPUSH
13143: LD_INT 0
13145: PPUSH
13146: CALL_OW 49
// end ;
13150: GO 13016
13152: POP
13153: POP
// end ; end_of_file
13154: LD_VAR 0 1
13158: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 do
13159: LD_INT 1
13161: PPUSH
13162: CALL_OW 255
13166: PUSH
13167: LD_INT 1
13169: EQUAL
13170: PUSH
13171: LD_INT 10
13173: PPUSH
13174: CALL_OW 255
13178: PUSH
13179: LD_INT 1
13181: EQUAL
13182: AND
13183: PUSH
13184: LD_EXP 19
13188: PUSH
13189: LD_INT 1
13191: EQUAL
13192: AND
13193: IFFALSE 13284
13195: GO 13197
13197: DISABLE
// begin wait ( [ 9 9$0 , 8 8$0 , 7 7$0 ] [ Difficulty ] ) ;
13198: LD_INT 18900
13200: PUSH
13201: LD_INT 16800
13203: PUSH
13204: LD_INT 14700
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: LIST
13211: PUSH
13212: LD_OWVAR 67
13216: ARRAY
13217: PPUSH
13218: CALL_OW 67
// if cargoEscape = 1 then
13222: LD_EXP 19
13226: PUSH
13227: LD_INT 1
13229: EQUAL
13230: IFFALSE 13284
// begin SayRadio ( Powell , D6-Pow-1 ) ;
13232: LD_EXP 9
13236: PPUSH
13237: LD_STRING D6-Pow-1
13239: PPUSH
13240: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
13244: LD_EXP 1
13248: PPUSH
13249: LD_STRING D6-JMM-1
13251: PPUSH
13252: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
13256: LD_EXP 9
13260: PPUSH
13261: LD_STRING D6-Pow-2
13263: PPUSH
13264: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
13268: LD_EXP 1
13272: PPUSH
13273: LD_STRING D6-JMM-2
13275: PPUSH
13276: CALL_OW 88
// FinishMission ;
13280: CALL 9441 0 0
// end ; end ;
13284: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
13285: LD_INT 1
13287: PPUSH
13288: CALL_OW 255
13292: PUSH
13293: LD_INT 1
13295: EQUAL
13296: PUSH
13297: LD_INT 10
13299: PPUSH
13300: CALL_OW 255
13304: PUSH
13305: LD_INT 1
13307: EQUAL
13308: AND
13309: PUSH
13310: LD_EXP 19
13314: PUSH
13315: LD_INT 1
13317: GREATER
13318: AND
13319: IFFALSE 13386
13321: GO 13323
13323: DISABLE
13324: LD_INT 0
13326: PPUSH
// begin wait ( [ 9 9$0 , 8 8$0 , 7 7$0 ] [ Difficulty ] ) ;
13327: LD_INT 18900
13329: PUSH
13330: LD_INT 16800
13332: PUSH
13333: LD_INT 14700
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: LIST
13340: PUSH
13341: LD_OWVAR 67
13345: ARRAY
13346: PPUSH
13347: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
13351: LD_INT 1
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: LD_INT 3
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: LIST
13364: PUSH
13365: LD_OWVAR 67
13369: ARRAY
13370: PPUSH
13371: LD_INT 13
13373: PPUSH
13374: CALL 12124 0 2
// lastBattle = 1 ;
13378: LD_ADDR_EXP 26
13382: PUSH
13383: LD_INT 1
13385: ST_TO_ADDR
// end ;
13386: PPOPN 1
13388: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
13389: LD_EXP 26
13393: PUSH
13394: LD_INT 1
13396: EQUAL
13397: PUSH
13398: LD_INT 26
13400: PPUSH
13401: LD_INT 22
13403: PUSH
13404: LD_INT 3
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 21
13413: PUSH
13414: LD_INT 1
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PPUSH
13425: CALL_OW 70
13429: PUSH
13430: LD_INT 0
13432: EQUAL
13433: AND
13434: IFFALSE 13491
13436: GO 13438
13438: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
13439: LD_EXP 9
13443: PPUSH
13444: LD_STRING D6-Pow-1
13446: PPUSH
13447: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
13451: LD_EXP 1
13455: PPUSH
13456: LD_STRING D6-JMM-1
13458: PPUSH
13459: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
13463: LD_EXP 9
13467: PPUSH
13468: LD_STRING D6-Pow-2
13470: PPUSH
13471: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
13475: LD_EXP 1
13479: PPUSH
13480: LD_STRING D6-JMM-2
13482: PPUSH
13483: CALL_OW 88
// FinishMission ;
13487: CALL 9441 0 0
// end ;
13491: END
