// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// PrepareDifficulty ;
 161: CALL 10281 0 0
// PrepareRussianCommander ;
 165: CALL 11617 0 0
// PrepareSouthBase ;
 169: CALL 11700 0 0
// PrepareNorthBase ;
 173: CALL 12057 0 0
// PrepareOtherRussians ;
 177: CALL 12423 0 0
// PrepareHeroes ;
 181: CALL 10596 0 0
// PrepareLisSquad ;
 185: CALL 10839 0 0
// PrepareOtherAmericans ;
 189: CALL 11184 0 0
// end ; end_of_file
 193: END
// every 1 do var tmp ;
 194: GO 196
 196: DISABLE
 197: LD_INT 0
 199: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 209: LD_ADDR_VAR 0 1
 213: PUSH
 214: LD_INT 22
 216: PUSH
 217: LD_INT 4
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 21
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PPUSH
 238: CALL_OW 69
 242: PUSH
 243: LD_EXP 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: DIFF
 251: ST_TO_ADDR
// if Cyrus and Bobby then
 252: LD_EXP 3
 256: PUSH
 257: LD_EXP 2
 261: AND
 262: IFFALSE 592
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 264: LD_EXP 3
 268: PPUSH
 269: LD_INT 43
 271: PPUSH
 272: LD_INT 72
 274: PPUSH
 275: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_INT 44
 286: PPUSH
 287: LD_INT 70
 289: PPUSH
 290: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 294: LD_EXP 1
 298: PPUSH
 299: LD_INT 46
 301: PPUSH
 302: LD_INT 73
 304: PPUSH
 305: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 309: LD_EXP 3
 313: PPUSH
 314: LD_STRING D1a-Cyrus-1
 316: PPUSH
 317: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_STRING D1a-JMM-1
 328: PPUSH
 329: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 333: LD_EXP 3
 337: PPUSH
 338: LD_INT 37
 340: PPUSH
 341: LD_INT 66
 343: PPUSH
 344: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 348: LD_EXP 2
 352: PPUSH
 353: LD_INT 41
 355: PPUSH
 356: LD_INT 67
 358: PPUSH
 359: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 363: LD_EXP 1
 367: PPUSH
 368: LD_INT 38
 370: PPUSH
 371: LD_INT 64
 373: PPUSH
 374: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 378: LD_EXP 2
 382: PPUSH
 383: LD_STRING D1a-Bobby-2
 385: PPUSH
 386: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 390: LD_EXP 3
 394: PPUSH
 395: LD_INT 35
 397: PPUSH
 398: LD_INT 62
 400: PPUSH
 401: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 405: LD_EXP 2
 409: PPUSH
 410: LD_INT 32
 412: PPUSH
 413: LD_INT 60
 415: PPUSH
 416: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 420: LD_EXP 1
 424: PPUSH
 425: LD_INT 35
 427: PPUSH
 428: LD_INT 60
 430: PPUSH
 431: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 435: LD_EXP 1
 439: PPUSH
 440: LD_STRING D1a-JMM-2
 442: PPUSH
 443: CALL_OW 88
// ComWalk ( Lisa ) ;
 447: LD_EXP 4
 451: PPUSH
 452: CALL_OW 138
// wait ( 0 0$1 ) ;
 456: LD_INT 35
 458: PPUSH
 459: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 463: LD_EXP 4
 467: PPUSH
 468: LD_EXP 1
 472: PPUSH
 473: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 477: LD_EXP 1
 481: PUSH
 482: LD_EXP 3
 486: PUSH
 487: LD_EXP 2
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PPUSH
 497: LD_EXP 4
 501: PPUSH
 502: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 506: LD_VAR 0 1
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: LD_INT 33
 517: PPUSH
 518: LD_INT 55
 520: PPUSH
 521: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 525: LD_VAR 0 1
 529: PUSH
 530: LD_INT 2
 532: ARRAY
 533: PPUSH
 534: LD_INT 30
 536: PPUSH
 537: LD_INT 54
 539: PPUSH
 540: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 544: LD_VAR 0 1
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: LD_EXP 1
 557: PPUSH
 558: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 562: LD_VAR 0 1
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 1
 575: PPUSH
 576: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 580: LD_EXP 4
 584: PPUSH
 585: LD_STRING D1a-Lisa-2
 587: PPUSH
 588: CALL_OW 88
// end ; if Cyrus and not Bobby then
 592: LD_EXP 3
 596: PUSH
 597: LD_EXP 2
 601: NOT
 602: AND
 603: IFFALSE 808
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 605: LD_EXP 3
 609: PPUSH
 610: LD_INT 43
 612: PPUSH
 613: LD_INT 72
 615: PPUSH
 616: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 46
 627: PPUSH
 628: LD_INT 73
 630: PPUSH
 631: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 635: LD_EXP 3
 639: PPUSH
 640: LD_STRING D1a-Cyrus-1
 642: PPUSH
 643: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 647: LD_EXP 1
 651: PPUSH
 652: LD_STRING D1a-JMM-1
 654: PPUSH
 655: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 659: LD_EXP 3
 663: PPUSH
 664: LD_INT 37
 666: PPUSH
 667: LD_INT 66
 669: PPUSH
 670: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 674: LD_EXP 1
 678: PPUSH
 679: LD_INT 38
 681: PPUSH
 682: LD_INT 64
 684: PPUSH
 685: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 689: LD_EXP 3
 693: PPUSH
 694: LD_STRING D1a-Cyrus-2
 696: PPUSH
 697: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 701: LD_EXP 3
 705: PPUSH
 706: LD_INT 35
 708: PPUSH
 709: LD_INT 62
 711: PPUSH
 712: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 716: LD_EXP 1
 720: PPUSH
 721: LD_INT 35
 723: PPUSH
 724: LD_INT 60
 726: PPUSH
 727: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 731: LD_EXP 1
 735: PPUSH
 736: LD_STRING D1a-JMM-2
 738: PPUSH
 739: CALL_OW 88
// ComWalk ( Lisa ) ;
 743: LD_EXP 4
 747: PPUSH
 748: CALL_OW 138
// wait ( 0 0$1 ) ;
 752: LD_INT 35
 754: PPUSH
 755: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 759: LD_EXP 4
 763: PPUSH
 764: LD_EXP 1
 768: PPUSH
 769: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 773: LD_EXP 4
 777: PPUSH
 778: LD_STRING D1a-Lisa-2
 780: PPUSH
 781: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 785: LD_EXP 1
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PPUSH
 799: LD_EXP 4
 803: PPUSH
 804: CALL_OW 119
// end ; if not Cyrus and Bobby then
 808: LD_EXP 3
 812: NOT
 813: PUSH
 814: LD_EXP 2
 818: AND
 819: IFFALSE 1098
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 821: LD_EXP 2
 825: PPUSH
 826: LD_INT 44
 828: PPUSH
 829: LD_INT 70
 831: PPUSH
 832: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 836: LD_EXP 1
 840: PPUSH
 841: LD_INT 46
 843: PPUSH
 844: LD_INT 73
 846: PPUSH
 847: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 851: LD_EXP 2
 855: PPUSH
 856: LD_STRING D1a-Bobby-1
 858: PPUSH
 859: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 863: LD_EXP 1
 867: PPUSH
 868: LD_STRING D1a-JMM-1
 870: PPUSH
 871: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 875: LD_EXP 2
 879: PPUSH
 880: LD_INT 37
 882: PPUSH
 883: LD_INT 66
 885: PPUSH
 886: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 890: LD_EXP 1
 894: PPUSH
 895: LD_INT 38
 897: PPUSH
 898: LD_INT 64
 900: PPUSH
 901: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 905: LD_EXP 2
 909: PPUSH
 910: LD_STRING D1a-Bobby-2
 912: PPUSH
 913: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 917: LD_EXP 2
 921: PPUSH
 922: LD_INT 35
 924: PPUSH
 925: LD_INT 62
 927: PPUSH
 928: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 932: LD_EXP 1
 936: PPUSH
 937: LD_INT 35
 939: PPUSH
 940: LD_INT 60
 942: PPUSH
 943: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 947: LD_EXP 1
 951: PPUSH
 952: LD_STRING D1a-JMM-2
 954: PPUSH
 955: CALL_OW 88
// ComWalk ( Lisa ) ;
 959: LD_EXP 4
 963: PPUSH
 964: CALL_OW 138
// wait ( 0 0$1 ) ;
 968: LD_INT 35
 970: PPUSH
 971: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 975: LD_EXP 4
 979: PPUSH
 980: LD_EXP 1
 984: PPUSH
 985: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 989: LD_EXP 1
 993: PUSH
 994: LD_EXP 3
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PPUSH
1003: LD_EXP 4
1007: PPUSH
1008: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1012: LD_VAR 0 1
1016: PUSH
1017: LD_INT 1
1019: ARRAY
1020: PPUSH
1021: LD_INT 33
1023: PPUSH
1024: LD_INT 55
1026: PPUSH
1027: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1031: LD_VAR 0 1
1035: PUSH
1036: LD_INT 2
1038: ARRAY
1039: PPUSH
1040: LD_INT 30
1042: PPUSH
1043: LD_INT 54
1045: PPUSH
1046: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1050: LD_VAR 0 1
1054: PUSH
1055: LD_INT 1
1057: ARRAY
1058: PPUSH
1059: LD_EXP 1
1063: PPUSH
1064: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1068: LD_VAR 0 1
1072: PUSH
1073: LD_INT 2
1075: ARRAY
1076: PPUSH
1077: LD_EXP 1
1081: PPUSH
1082: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1086: LD_EXP 4
1090: PPUSH
1091: LD_STRING D1a-Lisa-2
1093: PPUSH
1094: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1098: LD_EXP 3
1102: NOT
1103: PUSH
1104: LD_EXP 2
1108: NOT
1109: AND
1110: IFFALSE 1324
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1112: LD_EXP 1
1116: PPUSH
1117: LD_INT 37
1119: PPUSH
1120: LD_INT 66
1122: PPUSH
1123: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1127: LD_EXP 1
1131: PPUSH
1132: LD_STRING D1b-JMM-1
1134: PPUSH
1135: CALL_OW 88
// ComCrawl ( JMM ) ;
1139: LD_EXP 1
1143: PPUSH
1144: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1148: LD_EXP 1
1152: PPUSH
1153: LD_INT 35
1155: PPUSH
1156: LD_INT 60
1158: PPUSH
1159: CALL_OW 171
// wait ( 0 0$8 ) ;
1163: LD_INT 280
1165: PPUSH
1166: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_STRING D1b-JMM-1a
1177: PPUSH
1178: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1182: LD_EXP 1
1186: PUSH
1187: LD_EXP 4
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PPUSH
1196: CALL_OW 138
// wait ( 0 0$1 ) ;
1200: LD_INT 35
1202: PPUSH
1203: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1207: LD_EXP 4
1211: PPUSH
1212: LD_EXP 1
1216: PPUSH
1217: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1221: LD_EXP 1
1225: PUSH
1226: EMPTY
1227: LIST
1228: PPUSH
1229: LD_EXP 4
1233: PPUSH
1234: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1238: LD_VAR 0 1
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: LD_INT 33
1249: PPUSH
1250: LD_INT 55
1252: PPUSH
1253: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1257: LD_VAR 0 1
1261: PUSH
1262: LD_INT 2
1264: ARRAY
1265: PPUSH
1266: LD_INT 30
1268: PPUSH
1269: LD_INT 54
1271: PPUSH
1272: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1276: LD_VAR 0 1
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_EXP 1
1289: PPUSH
1290: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1294: LD_VAR 0 1
1298: PUSH
1299: LD_INT 2
1301: ARRAY
1302: PPUSH
1303: LD_EXP 1
1307: PPUSH
1308: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1312: LD_EXP 4
1316: PPUSH
1317: LD_STRING D1b-Lisa-1
1319: PPUSH
1320: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1324: LD_EXP 1
1328: PPUSH
1329: LD_STRING D1-JMM-1
1331: PPUSH
1332: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1336: LD_EXP 4
1340: PPUSH
1341: LD_STRING D1-Lisa-1
1343: PPUSH
1344: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1348: LD_EXP 1
1352: PPUSH
1353: LD_STRING D1-JMM-2
1355: PPUSH
1356: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1360: LD_EXP 9
1364: PPUSH
1365: LD_STRING D1-Pow-2
1367: PPUSH
1368: CALL_OW 94
// if Cyrus then
1372: LD_EXP 3
1376: IFFALSE 1402
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1378: LD_EXP 3
1382: PPUSH
1383: LD_STRING D1-Cyrus-2
1385: PPUSH
1386: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-3
1397: PPUSH
1398: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1402: LD_EXP 9
1406: PPUSH
1407: LD_STRING D1-Pow-3
1409: PPUSH
1410: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1414: LD_EXP 1
1418: PPUSH
1419: LD_STRING D1-JMM-4
1421: PPUSH
1422: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1426: LD_EXP 9
1430: PPUSH
1431: LD_STRING D1-Pow-4
1433: PPUSH
1434: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1438: LD_EXP 9
1442: PPUSH
1443: LD_STRING D1-Pow-4a
1445: PPUSH
1446: CALL_OW 94
// if Cyrus then
1450: LD_EXP 3
1454: IFFALSE 1468
// Say ( Cyrus , D1-Cyrus-4 ) ;
1456: LD_EXP 3
1460: PPUSH
1461: LD_STRING D1-Cyrus-4
1463: PPUSH
1464: CALL_OW 88
// if Bobby then
1468: LD_EXP 2
1472: IFFALSE 1510
// begin Say ( Bobby , D1-Bobby-4 ) ;
1474: LD_EXP 2
1478: PPUSH
1479: LD_STRING D1-Bobby-4
1481: PPUSH
1482: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1486: LD_EXP 4
1490: PPUSH
1491: LD_STRING D1-Lisa-4
1493: PPUSH
1494: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1498: LD_EXP 1
1502: PPUSH
1503: LD_STRING D1-JMM-5
1505: PPUSH
1506: CALL_OW 88
// end ; InGameOff ;
1510: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1514: LD_INT 22
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 69
1528: PUSH
1529: LD_EXP 6
1533: PUSH
1534: LD_EXP 7
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: DIFF
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1551: LD_STRING M1
1553: PPUSH
1554: CALL_OW 337
// SaveForQuickRestart ;
1558: CALL_OW 22
// end ;
1562: PPOPN 1
1564: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1565: LD_INT 7
1567: PPUSH
1568: LD_INT 22
1570: PUSH
1571: LD_INT 1
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 70
1582: PUSH
1583: LD_INT 0
1585: GREATER
1586: IFFALSE 1956
1588: GO 1590
1590: DISABLE
// begin InGameOn ;
1591: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1595: LD_INT 22
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 21
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PPUSH
1619: CALL_OW 69
1623: PPUSH
1624: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1628: LD_INT 24
1630: PPUSH
1631: LD_INT 32
1633: PPUSH
1634: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1638: LD_EXP 5
1642: PPUSH
1643: LD_INT 4
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 4
1660: PPUSH
1661: CALL_OW 336
// wait ( 0 0$1 ) ;
1665: LD_INT 35
1667: PPUSH
1668: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1672: LD_EXP 5
1676: PPUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_INT 38
1682: PPUSH
1683: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1687: LD_EXP 5
1691: PPUSH
1692: LD_EXP 1
1696: PPUSH
1697: CALL_OW 179
// wait ( 0 0$1 ) ;
1701: LD_INT 35
1703: PPUSH
1704: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1708: LD_EXP 5
1712: PPUSH
1713: LD_STRING D2a-Khat-1
1715: PPUSH
1716: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1720: LD_EXP 1
1724: PPUSH
1725: LD_STRING D2a-JMM-1
1727: PPUSH
1728: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1732: LD_EXP 5
1736: PPUSH
1737: LD_STRING D2a-Khat-2
1739: PPUSH
1740: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1744: LD_EXP 1
1748: PPUSH
1749: LD_STRING D2a-JMM-2
1751: PPUSH
1752: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1756: LD_EXP 5
1760: PPUSH
1761: LD_STRING D2a-Khat-3
1763: PPUSH
1764: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1768: LD_EXP 1
1772: PPUSH
1773: LD_STRING D2a-JMM-3
1775: PPUSH
1776: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1780: LD_EXP 5
1784: PPUSH
1785: LD_STRING D2a-Khat-4
1787: PPUSH
1788: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1792: LD_EXP 1
1796: PPUSH
1797: LD_STRING D2a-JMM-4
1799: PPUSH
1800: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1804: LD_EXP 5
1808: PPUSH
1809: LD_STRING D2a-Khat-5
1811: PPUSH
1812: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1816: LD_EXP 1
1820: PPUSH
1821: LD_STRING D2a-JMM-5
1823: PPUSH
1824: CALL_OW 88
// InGameOff ;
1828: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1832: LD_INT 22
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 21
1844: PUSH
1845: LD_INT 1
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 3
1854: PUSH
1855: LD_INT 24
1857: PUSH
1858: LD_INT 800
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: LIST
1873: PPUSH
1874: CALL_OW 69
1878: PUSH
1879: LD_INT 0
1881: GREATER
1882: IFFALSE 1956
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1884: LD_EXP 5
1888: PPUSH
1889: LD_INT 22
1891: PUSH
1892: LD_INT 1
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 21
1901: PUSH
1902: LD_INT 1
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PUSH
1909: LD_INT 3
1911: PUSH
1912: LD_INT 24
1914: PUSH
1915: LD_INT 1000
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_INT 1
1938: ARRAY
1939: PPUSH
1940: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1944: LD_EXP 5
1948: PPUSH
1949: LD_STRING D2b-Khat-1
1951: PPUSH
1952: CALL_OW 88
// end ; end ;
1956: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
1957: LD_INT 15
1959: PPUSH
1960: LD_INT 22
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PPUSH
1970: CALL_OW 70
1974: PUSH
1975: LD_INT 0
1977: GREATER
1978: IFFALSE 3135
1980: GO 1982
1982: DISABLE
1983: LD_INT 0
1985: PPUSH
1986: PPUSH
1987: PPUSH
1988: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
1989: LD_ADDR_VAR 0 2
1993: PUSH
1994: LD_INT 999
1996: PUSH
1997: LD_INT 999
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2007: LD_ADDR_VAR 0 4
2011: PUSH
2012: LD_INT 22
2014: PUSH
2015: LD_INT 1
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 21
2024: PUSH
2025: LD_INT 1
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PPUSH
2036: CALL_OW 69
2040: PUSH
2041: LD_EXP 1
2045: PUSH
2046: LD_EXP 2
2050: PUSH
2051: LD_EXP 3
2055: PUSH
2056: LD_EXP 4
2060: PUSH
2061: LD_EXP 5
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: DIFF
2073: ST_TO_ADDR
// PrepareDeadSoldiers ;
2074: CALL 11342 0 0
// spotCorpses = 1 ;
2078: LD_ADDR_EXP 32
2082: PUSH
2083: LD_INT 1
2085: ST_TO_ADDR
// InGameOn ;
2086: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2090: LD_INT 23
2092: PPUSH
2093: LD_INT 12
2095: PPUSH
2096: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2100: LD_ADDR_VAR 0 3
2104: PUSH
2105: LD_VAR 0 2
2109: PUSH
2110: LD_INT 1
2112: ARRAY
2113: PUSH
2114: LD_INT 2
2116: ARRAY
2117: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2118: LD_ADDR_VAR 0 1
2122: PUSH
2123: LD_INT 22
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: LD_INT 21
2135: PUSH
2136: LD_INT 1
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: PPUSH
2147: CALL_OW 69
2151: PUSH
2152: LD_EXP 1
2156: PUSH
2157: LD_EXP 5
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: DIFF
2166: PUSH
2167: FOR_IN
2168: IFFALSE 2219
// if IsOK ( i ) then
2170: LD_VAR 0 1
2174: PPUSH
2175: CALL_OW 302
2179: IFFALSE 2217
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_VAR 0 2
2190: PUSH
2191: LD_VAR 0 1
2195: PUSH
2196: LD_VAR 0 1
2200: PPUSH
2201: LD_INT 16
2203: PPUSH
2204: CALL_OW 299
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: PUSH
2213: EMPTY
2214: LIST
2215: ADD
2216: ST_TO_ADDR
2217: GO 2167
2219: POP
2220: POP
// for i = 2 to distanceTab do
2221: LD_ADDR_VAR 0 1
2225: PUSH
2226: DOUBLE
2227: LD_INT 2
2229: DEC
2230: ST_TO_ADDR
2231: LD_VAR 0 2
2235: PUSH
2236: FOR_TO
2237: IFFALSE 2283
// if distanceTab [ i ] [ 2 ] < min then
2239: LD_VAR 0 2
2243: PUSH
2244: LD_VAR 0 1
2248: ARRAY
2249: PUSH
2250: LD_INT 2
2252: ARRAY
2253: PUSH
2254: LD_VAR 0 3
2258: LESS
2259: IFFALSE 2281
// min = distanceTab [ i ] [ 2 ] ;
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PUSH
2277: LD_INT 2
2279: ARRAY
2280: ST_TO_ADDR
2281: GO 2236
2283: POP
2284: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2285: LD_ADDR_VAR 0 1
2289: PUSH
2290: LD_INT 22
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 21
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 69
2318: PUSH
2319: LD_EXP 1
2323: PUSH
2324: EMPTY
2325: LIST
2326: DIFF
2327: PUSH
2328: FOR_IN
2329: IFFALSE 2399
// begin ComMoveToArea ( i , DeadCutscene ) ;
2331: LD_VAR 0 1
2335: PPUSH
2336: LD_INT 28
2338: PPUSH
2339: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2343: LD_EXP 1
2347: PPUSH
2348: LD_INT 30
2350: PPUSH
2351: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2355: LD_VAR 0 1
2359: PPUSH
2360: LD_INT 23
2362: PPUSH
2363: LD_INT 11
2365: PPUSH
2366: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2370: LD_EXP 1
2374: PPUSH
2375: LD_INT 23
2377: PPUSH
2378: LD_INT 11
2380: PPUSH
2381: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2385: LD_EXP 34
2389: PPUSH
2390: LD_INT 250
2392: PPUSH
2393: CALL_OW 234
// end ;
2397: GO 2328
2399: POP
2400: POP
// for i = 2 to distanceTab do
2401: LD_ADDR_VAR 0 1
2405: PUSH
2406: DOUBLE
2407: LD_INT 2
2409: DEC
2410: ST_TO_ADDR
2411: LD_VAR 0 2
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2803
// begin if distanceTab [ i ] [ 2 ] = min then
2419: LD_VAR 0 2
2423: PUSH
2424: LD_VAR 0 1
2428: ARRAY
2429: PUSH
2430: LD_INT 2
2432: ARRAY
2433: PUSH
2434: LD_VAR 0 3
2438: EQUAL
2439: IFFALSE 2801
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2441: LD_VAR 0 2
2445: PUSH
2446: LD_VAR 0 1
2450: ARRAY
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: PUSH
2456: LD_EXP 2
2460: EQUAL
2461: IFFALSE 2475
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2463: LD_EXP 2
2467: PPUSH
2468: LD_STRING DCorpses-Bobby-1
2470: PPUSH
2471: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2475: LD_VAR 0 2
2479: PUSH
2480: LD_VAR 0 1
2484: ARRAY
2485: PUSH
2486: LD_INT 1
2488: ARRAY
2489: PUSH
2490: LD_EXP 3
2494: EQUAL
2495: IFFALSE 2509
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2497: LD_EXP 3
2501: PPUSH
2502: LD_STRING DCorpses-Cyrus-1
2504: PPUSH
2505: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2509: LD_VAR 0 2
2513: PUSH
2514: LD_VAR 0 1
2518: ARRAY
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: PUSH
2524: LD_EXP 4
2528: EQUAL
2529: IFFALSE 2543
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2531: LD_EXP 4
2535: PPUSH
2536: LD_STRING DCorpses-Lisa-1
2538: PPUSH
2539: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2543: LD_VAR 0 2
2547: PUSH
2548: LD_VAR 0 1
2552: ARRAY
2553: PUSH
2554: LD_INT 1
2556: ARRAY
2557: PUSH
2558: LD_VAR 0 4
2562: PUSH
2563: LD_INT 1
2565: ARRAY
2566: EQUAL
2567: PUSH
2568: LD_VAR 0 4
2572: PUSH
2573: LD_INT 1
2575: ARRAY
2576: PPUSH
2577: CALL_OW 258
2581: PUSH
2582: LD_INT 1
2584: EQUAL
2585: AND
2586: IFFALSE 2604
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2588: LD_VAR 0 4
2592: PUSH
2593: LD_INT 1
2595: ARRAY
2596: PPUSH
2597: LD_STRING DCorpses-Sol1-1
2599: PPUSH
2600: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_VAR 0 1
2613: ARRAY
2614: PUSH
2615: LD_INT 1
2617: ARRAY
2618: PUSH
2619: LD_VAR 0 4
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: EQUAL
2628: PUSH
2629: LD_VAR 0 4
2633: PUSH
2634: LD_INT 1
2636: ARRAY
2637: PPUSH
2638: CALL_OW 258
2642: PUSH
2643: LD_INT 2
2645: EQUAL
2646: AND
2647: IFFALSE 2665
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2649: LD_VAR 0 4
2653: PUSH
2654: LD_INT 1
2656: ARRAY
2657: PPUSH
2658: LD_STRING DCorpses-FSol1-1
2660: PPUSH
2661: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2665: LD_VAR 0 2
2669: PUSH
2670: LD_VAR 0 1
2674: ARRAY
2675: PUSH
2676: LD_INT 1
2678: ARRAY
2679: PUSH
2680: LD_VAR 0 4
2684: PUSH
2685: LD_INT 2
2687: ARRAY
2688: EQUAL
2689: PUSH
2690: LD_VAR 0 4
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: CALL_OW 258
2703: PUSH
2704: LD_INT 1
2706: EQUAL
2707: AND
2708: IFFALSE 2726
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2710: LD_VAR 0 4
2714: PUSH
2715: LD_INT 2
2717: ARRAY
2718: PPUSH
2719: LD_STRING DCorpses-Sol1-1
2721: PPUSH
2722: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2726: LD_VAR 0 2
2730: PUSH
2731: LD_VAR 0 1
2735: ARRAY
2736: PUSH
2737: LD_INT 1
2739: ARRAY
2740: PUSH
2741: LD_VAR 0 4
2745: PUSH
2746: LD_INT 2
2748: ARRAY
2749: EQUAL
2750: PUSH
2751: LD_VAR 0 4
2755: PUSH
2756: LD_INT 2
2758: ARRAY
2759: PPUSH
2760: CALL_OW 258
2764: PUSH
2765: LD_INT 2
2767: EQUAL
2768: AND
2769: IFFALSE 2787
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2771: LD_VAR 0 4
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_STRING DCorpses-FSol1-1
2782: PPUSH
2783: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2787: LD_EXP 34
2791: PPUSH
2792: LD_INT 150
2794: PPUSH
2795: CALL_OW 234
// break ;
2799: GO 2803
// end ; end ;
2801: GO 2416
2803: POP
2804: POP
// repeat wait ( 0 0$1 ) ;
2805: LD_INT 35
2807: PPUSH
2808: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2812: LD_ADDR_VAR 0 1
2816: PUSH
2817: LD_INT 22
2819: PUSH
2820: LD_INT 1
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 21
2829: PUSH
2830: LD_INT 1
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PPUSH
2841: CALL_OW 69
2845: PUSH
2846: LD_EXP 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: DIFF
2854: PUSH
2855: FOR_IN
2856: IFFALSE 2926
// begin ComMoveToArea ( i , DeadCutscene ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: LD_INT 28
2865: PPUSH
2866: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2870: LD_EXP 1
2874: PPUSH
2875: LD_INT 30
2877: PPUSH
2878: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2882: LD_VAR 0 1
2886: PPUSH
2887: LD_INT 23
2889: PPUSH
2890: LD_INT 11
2892: PPUSH
2893: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2897: LD_EXP 1
2901: PPUSH
2902: LD_INT 23
2904: PPUSH
2905: LD_INT 11
2907: PPUSH
2908: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2912: LD_EXP 34
2916: PPUSH
2917: LD_INT 250
2919: PPUSH
2920: CALL_OW 234
// end ;
2924: GO 2855
2926: POP
2927: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2928: LD_EXP 1
2932: PPUSH
2933: LD_INT 30
2935: PPUSH
2936: CALL_OW 308
2940: IFFALSE 2805
// wait ( 0 0$3 ) ;
2942: LD_INT 105
2944: PPUSH
2945: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2949: LD_EXP 1
2953: PPUSH
2954: LD_STRING DCorpses-JMM-1
2956: PPUSH
2957: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
2961: LD_EXP 34
2965: PPUSH
2966: LD_INT 100
2968: PPUSH
2969: CALL_OW 234
// if IsOK ( Khatam ) then
2973: LD_EXP 5
2977: PPUSH
2978: CALL_OW 302
2982: IFFALSE 3119
// begin repeat wait ( 0 0$1 ) ;
2984: LD_INT 35
2986: PPUSH
2987: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
2991: LD_EXP 5
2995: PPUSH
2996: LD_EXP 34
3000: PPUSH
3001: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3005: LD_EXP 5
3009: PPUSH
3010: LD_EXP 34
3014: PPUSH
3015: CALL_OW 296
3019: PUSH
3020: LD_INT 2
3022: LESS
3023: IFFALSE 2984
// spotCorpses = 0 ;
3025: LD_ADDR_EXP 32
3029: PUSH
3030: LD_INT 0
3032: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3033: LD_EXP 34
3037: PPUSH
3038: LD_INT 10
3040: PPUSH
3041: CALL_OW 234
// wait ( 0 0$3 ) ;
3045: LD_INT 105
3047: PPUSH
3048: CALL_OW 67
// KillUnit ( DyingSold ) ;
3052: LD_EXP 34
3056: PPUSH
3057: CALL_OW 66
// wait ( 0 0$1 ) ;
3061: LD_INT 35
3063: PPUSH
3064: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3068: LD_EXP 1
3072: PUSH
3073: LD_EXP 5
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3086: LD_EXP 5
3090: PPUSH
3091: LD_EXP 1
3095: PPUSH
3096: CALL_OW 119
// wait ( 0 0$1 ) ;
3100: LD_INT 35
3102: PPUSH
3103: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3107: LD_EXP 5
3111: PPUSH
3112: LD_STRING DCorpses-Khat-1
3114: PPUSH
3115: CALL_OW 88
// end ; InGameOff ;
3119: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3123: LD_EXP 1
3127: PPUSH
3128: LD_STRING DCorpses-JMM-2
3130: PPUSH
3131: CALL_OW 88
// end ;
3135: PPOPN 4
3137: END
// every 0 0$1 trigger spotCorpses = 1 do
3138: LD_EXP 32
3142: PUSH
3143: LD_INT 1
3145: EQUAL
3146: IFFALSE 3164
3148: GO 3150
3150: DISABLE
// begin enable ;
3151: ENABLE
// SetLives ( DyingSold , 10 ) ;
3152: LD_EXP 34
3156: PPUSH
3157: LD_INT 10
3159: PPUSH
3160: CALL_OW 234
// end ;
3164: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 15 ) do var i ;
3165: LD_INT 8
3167: PPUSH
3168: LD_INT 22
3170: PUSH
3171: LD_INT 1
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PPUSH
3178: CALL_OW 70
3182: PUSH
3183: LD_INT 0
3185: GREATER
3186: PUSH
3187: LD_INT 22
3189: PUSH
3190: LD_INT 1
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PPUSH
3197: CALL_OW 69
3201: PPUSH
3202: LD_EXP 7
3206: PPUSH
3207: CALL_OW 74
3211: PPUSH
3212: LD_EXP 7
3216: PPUSH
3217: CALL_OW 296
3221: PUSH
3222: LD_INT 15
3224: LESS
3225: OR
3226: IFFALSE 3394
3228: GO 3230
3230: DISABLE
3231: LD_INT 0
3233: PPUSH
// begin InGameOn ;
3234: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3238: LD_EXP 7
3242: PPUSH
3243: LD_INT 250
3245: PPUSH
3246: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3250: LD_INT 3
3252: PPUSH
3253: LD_INT 4
3255: PPUSH
3256: LD_INT 2
3258: PPUSH
3259: LD_INT 1
3261: PPUSH
3262: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3266: LD_EXP 6
3270: PUSH
3271: LD_EXP 7
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PPUSH
3280: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3284: LD_ADDR_VAR 0 1
3288: PUSH
3289: LD_INT 9
3291: PPUSH
3292: LD_INT 22
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: PPUSH
3302: CALL_OW 70
3306: PUSH
3307: FOR_IN
3308: IFFALSE 3321
// ComFree ( i ) ;
3310: LD_VAR 0 1
3314: PPUSH
3315: CALL_OW 139
3319: GO 3307
3321: POP
3322: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3323: LD_ADDR_VAR 0 1
3327: PUSH
3328: LD_INT 22
3330: PUSH
3331: LD_INT 4
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: PPUSH
3338: CALL_OW 69
3342: PUSH
3343: FOR_IN
3344: IFFALSE 3357
// ComFree ( i ) ;
3346: LD_VAR 0 1
3350: PPUSH
3351: CALL_OW 139
3355: GO 3343
3357: POP
3358: POP
// wait ( 0 0$1 ) ;
3359: LD_INT 35
3361: PPUSH
3362: CALL_OW 67
// InGameOff ;
3366: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3370: LD_EXP 6
3374: PPUSH
3375: LD_STRING DF-Sol1-1
3377: PPUSH
3378: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3382: LD_EXP 1
3386: PPUSH
3387: LD_STRING DF-JMM-1
3389: PPUSH
3390: CALL_OW 88
// end ;
3394: PPOPN 1
3396: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3397: LD_INT 19
3399: PPUSH
3400: LD_INT 22
3402: PUSH
3403: LD_INT 3
3405: PUSH
3406: EMPTY
3407: LIST
3408: LIST
3409: PPUSH
3410: CALL_OW 70
3414: PUSH
3415: LD_INT 0
3417: EQUAL
3418: IFFALSE 3531
3420: GO 3422
3422: DISABLE
// begin if not IsDead ( Brian ) then
3423: LD_EXP 6
3427: PPUSH
3428: CALL_OW 301
3432: NOT
3433: IFFALSE 3447
// SetSide ( Brian , 1 ) ;
3435: LD_EXP 6
3439: PPUSH
3440: LD_INT 1
3442: PPUSH
3443: CALL_OW 235
// if not IsDead ( Jerry ) then
3447: LD_EXP 7
3451: PPUSH
3452: CALL_OW 301
3456: NOT
3457: IFFALSE 3471
// SetSide ( Jerry , 1 ) ;
3459: LD_EXP 7
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3471: LD_INT 22
3473: PUSH
3474: LD_INT 1
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: PUSH
3481: LD_INT 25
3483: PUSH
3484: LD_INT 4
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PPUSH
3495: CALL_OW 69
3499: PUSH
3500: LD_INT 0
3502: GREATER
3503: IFFALSE 3519
// begin Say ( JMM , DFa-JMM-1 ) ;
3505: LD_EXP 1
3509: PPUSH
3510: LD_STRING DFa-JMM-1
3512: PPUSH
3513: CALL_OW 88
// end else
3517: GO 3531
// begin Say ( JMM , DFa-JMM-1a ) ;
3519: LD_EXP 1
3523: PPUSH
3524: LD_STRING DFa-JMM-1a
3526: PPUSH
3527: CALL_OW 88
// end ; end ;
3531: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3532: LD_INT 19
3534: PPUSH
3535: LD_INT 22
3537: PUSH
3538: LD_INT 3
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PPUSH
3545: CALL_OW 70
3549: PUSH
3550: LD_INT 0
3552: EQUAL
3553: PUSH
3554: LD_EXP 6
3558: PPUSH
3559: CALL_OW 302
3563: NOT
3564: AND
3565: IFFALSE 3642
3567: GO 3569
3569: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3570: LD_INT 35
3572: PPUSH
3573: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3577: LD_EXP 6
3581: PPUSH
3582: CALL_OW 256
3586: PUSH
3587: LD_INT 250
3589: GREATER
3590: IFFALSE 3570
// Say ( Brian , DFb-Sol1-1 ) ;
3592: LD_EXP 6
3596: PPUSH
3597: LD_STRING DFb-Sol1-1
3599: PPUSH
3600: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3604: LD_EXP 6
3608: PPUSH
3609: LD_INT 78
3611: PPUSH
3612: LD_INT 74
3614: PPUSH
3615: CALL_OW 111
// if IsDead ( Jerry ) then
3619: LD_EXP 7
3623: PPUSH
3624: CALL_OW 301
3628: IFFALSE 3642
// Say ( Brian , DFb-Sol1-1a ) end ;
3630: LD_EXP 6
3634: PPUSH
3635: LD_STRING DFb-Sol1-1a
3637: PPUSH
3638: CALL_OW 88
3642: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3643: LD_INT 22
3645: PUSH
3646: LD_INT 1
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: PUSH
3653: LD_INT 21
3655: PUSH
3656: LD_INT 2
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PPUSH
3667: CALL_OW 69
3671: PUSH
3672: LD_INT 0
3674: EQUAL
3675: IFFALSE 3763
3677: GO 3679
3679: DISABLE
3680: LD_INT 0
3682: PPUSH
// begin enable ;
3683: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3684: LD_ADDR_VAR 0 1
3688: PUSH
3689: LD_INT 22
3691: PUSH
3692: LD_INT 3
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PUSH
3699: LD_INT 21
3701: PUSH
3702: LD_INT 3
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: LD_INT 30
3711: PUSH
3712: LD_INT 31
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: LIST
3723: PPUSH
3724: CALL_OW 69
3728: PUSH
3729: FOR_IN
3730: IFFALSE 3761
// begin if See ( 1 , i ) then
3732: LD_INT 1
3734: PPUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 292
3744: IFFALSE 3759
// begin disable ;
3746: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3747: LD_EXP 1
3751: PPUSH
3752: LD_STRING DX1-JMM-1
3754: PPUSH
3755: CALL_OW 88
// end ; end ;
3759: GO 3729
3761: POP
3762: POP
// end ;
3763: PPOPN 1
3765: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3766: LD_INT 1
3768: PPUSH
3769: LD_INT 11
3771: PPUSH
3772: CALL_OW 294
3776: IFFALSE 4139
3778: GO 3780
3780: DISABLE
3781: LD_INT 0
3783: PPUSH
3784: PPUSH
// begin DialogueOn ;
3785: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3789: LD_INT 11
3791: PPUSH
3792: LD_INT 22
3794: PUSH
3795: LD_INT 3
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 1
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PPUSH
3816: CALL_OW 70
3820: PUSH
3821: LD_INT 1
3823: ARRAY
3824: PPUSH
3825: LD_STRING DX3-Rus1-1
3827: PPUSH
3828: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3832: LD_EXP 1
3836: PPUSH
3837: LD_STRING DX3-JMM-1
3839: PPUSH
3840: CALL_OW 88
// DialogueOff ;
3844: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3848: LD_ADDR_VAR 0 1
3852: PUSH
3853: LD_INT 11
3855: PPUSH
3856: LD_INT 22
3858: PUSH
3859: LD_INT 3
3861: PUSH
3862: EMPTY
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 21
3868: PUSH
3869: LD_INT 1
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: PPUSH
3880: CALL_OW 70
3884: PUSH
3885: FOR_IN
3886: IFFALSE 3906
// southBaseDefenders = southBaseDefenders ^ i ;
3888: LD_ADDR_EXP 25
3892: PUSH
3893: LD_EXP 25
3897: PUSH
3898: LD_VAR 0 1
3902: ADD
3903: ST_TO_ADDR
3904: GO 3885
3906: POP
3907: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
3908: LD_INT 455
3910: PUSH
3911: LD_INT 420
3913: PUSH
3914: LD_INT 315
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: LIST
3921: PUSH
3922: LD_OWVAR 67
3926: ARRAY
3927: PPUSH
3928: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3932: LD_INT 35
3934: PPUSH
3935: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
3939: LD_ADDR_VAR 0 1
3943: PUSH
3944: LD_INT 22
3946: PUSH
3947: LD_INT 3
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 21
3956: PUSH
3957: LD_INT 2
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: PUSH
3964: LD_INT 58
3966: PUSH
3967: EMPTY
3968: LIST
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 69
3979: PUSH
3980: FOR_IN
3981: IFFALSE 4051
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
3983: LD_ADDR_VAR 0 2
3987: PUSH
3988: LD_INT 22
3990: PUSH
3991: LD_INT 3
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: PUSH
3998: LD_INT 21
4000: PUSH
4001: LD_INT 1
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PUSH
4008: LD_INT 25
4010: PUSH
4011: LD_INT 3
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: LIST
4022: PPUSH
4023: CALL_OW 69
4027: PUSH
4028: FOR_IN
4029: IFFALSE 4047
// begin ComEnterUnit ( j , i ) ;
4031: LD_VAR 0 2
4035: PPUSH
4036: LD_VAR 0 1
4040: PPUSH
4041: CALL_OW 120
// end ;
4045: GO 4028
4047: POP
4048: POP
// end ;
4049: GO 3980
4051: POP
4052: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4053: LD_INT 22
4055: PUSH
4056: LD_INT 3
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: PUSH
4063: LD_INT 21
4065: PUSH
4066: LD_INT 2
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PUSH
4073: LD_INT 58
4075: PUSH
4076: EMPTY
4077: LIST
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: PPUSH
4084: CALL_OW 69
4088: PUSH
4089: LD_INT 0
4091: EQUAL
4092: PUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 21
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: LD_INT 25
4115: PUSH
4116: LD_INT 3
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: LIST
4127: PPUSH
4128: CALL_OW 69
4132: PUSH
4133: LD_INT 0
4135: EQUAL
4136: OR
4137: IFFALSE 3932
// end ;
4139: PPOPN 2
4141: END
// every 0 0$1 do var i , tmp ;
4142: GO 4144
4144: DISABLE
4145: LD_INT 0
4147: PPUSH
4148: PPUSH
// begin enable ;
4149: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4150: LD_ADDR_VAR 0 2
4154: PUSH
4155: LD_INT 22
4157: PUSH
4158: LD_INT 1
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 21
4167: PUSH
4168: LD_INT 1
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 69
4183: ST_TO_ADDR
// for i in tmp do
4184: LD_ADDR_VAR 0 1
4188: PUSH
4189: LD_VAR 0 2
4193: PUSH
4194: FOR_IN
4195: IFFALSE 4317
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4197: LD_VAR 0 1
4201: PPUSH
4202: LD_INT 5
4204: PPUSH
4205: CALL_OW 296
4209: PUSH
4210: LD_INT 4
4212: LESS
4213: PUSH
4214: LD_VAR 0 1
4218: PPUSH
4219: LD_INT 4
4221: PPUSH
4222: CALL_OW 296
4226: PUSH
4227: LD_INT 4
4229: LESS
4230: OR
4231: IFFALSE 4315
// begin disable ;
4233: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4234: LD_INT 5
4236: PUSH
4237: LD_INT 4
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PPUSH
4244: CALL_OW 85
// if IsOK ( Bobby ) then
4248: LD_EXP 2
4252: PPUSH
4253: CALL_OW 302
4257: IFFALSE 4294
// begin DialogueOn ;
4259: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4263: LD_EXP 2
4267: PPUSH
4268: LD_STRING DX2-Bobby-1
4270: PPUSH
4271: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4275: LD_EXP 1
4279: PPUSH
4280: LD_STRING DX2-JMM-1a
4282: PPUSH
4283: CALL_OW 88
// DialogueOff ;
4287: CALL_OW 7
// disable ;
4291: DISABLE
// end else
4292: GO 4315
// begin DialogueOn ;
4294: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4298: LD_EXP 1
4302: PPUSH
4303: LD_STRING DX2-JMM-1
4305: PPUSH
4306: CALL_OW 88
// DialogueOff ;
4310: CALL_OW 7
// disable ;
4314: DISABLE
// end ; end ; end ;
4315: GO 4194
4317: POP
4318: POP
// end ;
4319: PPOPN 2
4321: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4322: LD_INT 22
4324: PUSH
4325: LD_INT 1
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: LD_INT 23
4334: PUSH
4335: LD_INT 3
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PUSH
4342: LD_INT 21
4344: PUSH
4345: LD_INT 2
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: PUSH
4352: LD_INT 34
4354: PUSH
4355: LD_INT 42
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: PUSH
4362: EMPTY
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: PPUSH
4368: CALL_OW 69
4372: PUSH
4373: LD_INT 1
4375: GREATEREQUAL
4376: IFFALSE 4843
4378: GO 4380
4380: DISABLE
4381: LD_INT 0
4383: PPUSH
4384: PPUSH
4385: PPUSH
4386: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4387: LD_ADDR_VAR 0 1
4391: PUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 23
4404: PUSH
4405: LD_INT 3
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 21
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 34
4424: PUSH
4425: LD_INT 42
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: PPUSH
4438: CALL_OW 69
4442: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4443: LD_ADDR_VAR 0 2
4447: PUSH
4448: LD_INT 22
4450: PUSH
4451: LD_INT 1
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: LD_INT 21
4460: PUSH
4461: LD_INT 1
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PUSH
4468: LD_INT 26
4470: PUSH
4471: LD_INT 1
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: PPUSH
4483: CALL_OW 69
4487: PUSH
4488: LD_EXP 1
4492: PUSH
4493: LD_EXP 3
4497: PUSH
4498: LD_EXP 2
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: LIST
4507: DIFF
4508: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4509: LD_ADDR_VAR 0 3
4513: PUSH
4514: LD_INT 22
4516: PUSH
4517: LD_INT 1
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 21
4526: PUSH
4527: LD_INT 1
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: PUSH
4534: LD_INT 26
4536: PUSH
4537: LD_INT 2
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 69
4553: PUSH
4554: LD_EXP 4
4558: PUSH
4559: EMPTY
4560: LIST
4561: DIFF
4562: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
4563: LD_EXP 1
4567: PPUSH
4568: CALL_OW 310
4572: NOT
4573: IFFALSE 4587
// Say ( JMM , DX2a-JMM-1 ) ;
4575: LD_EXP 1
4579: PPUSH
4580: LD_STRING DX2a-JMM-1
4582: PPUSH
4583: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4587: LD_EXP 2
4591: PPUSH
4592: CALL_OW 310
4596: PUSH
4597: LD_VAR 0 1
4601: PUSH
4602: LD_INT 1
4604: ARRAY
4605: EQUAL
4606: IFFALSE 4620
// Say ( Bobby , DX2a-Bobby-1 ) ;
4608: LD_EXP 2
4612: PPUSH
4613: LD_STRING DX2a-Bobby-1
4615: PPUSH
4616: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4620: LD_EXP 3
4624: PPUSH
4625: CALL_OW 310
4629: PUSH
4630: LD_VAR 0 1
4634: PUSH
4635: LD_INT 1
4637: ARRAY
4638: EQUAL
4639: IFFALSE 4653
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4641: LD_EXP 3
4645: PPUSH
4646: LD_STRING DX2a-Cyrus-1
4648: PPUSH
4649: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4653: LD_EXP 4
4657: PPUSH
4658: CALL_OW 310
4662: PUSH
4663: LD_VAR 0 1
4667: PUSH
4668: LD_INT 1
4670: ARRAY
4671: EQUAL
4672: IFFALSE 4686
// Say ( Lisa , DX2a-Lisa-1 ) ;
4674: LD_EXP 4
4678: PPUSH
4679: LD_STRING DX2a-Lisa-1
4681: PPUSH
4682: CALL_OW 88
// for i in temp1 do
4686: LD_ADDR_VAR 0 4
4690: PUSH
4691: LD_VAR 0 2
4695: PUSH
4696: FOR_IN
4697: IFFALSE 4734
// if IsInUnit ( i ) = tmp [ 1 ] then
4699: LD_VAR 0 4
4703: PPUSH
4704: CALL_OW 310
4708: PUSH
4709: LD_VAR 0 1
4713: PUSH
4714: LD_INT 1
4716: ARRAY
4717: EQUAL
4718: IFFALSE 4732
// Say ( i , DX2a-Sol1-1 ) ;
4720: LD_VAR 0 4
4724: PPUSH
4725: LD_STRING DX2a-Sol1-1
4727: PPUSH
4728: CALL_OW 88
4732: GO 4696
4734: POP
4735: POP
// for i in temp2 do
4736: LD_ADDR_VAR 0 4
4740: PUSH
4741: LD_VAR 0 3
4745: PUSH
4746: FOR_IN
4747: IFFALSE 4784
// if IsInUnit ( i ) = tmp [ 1 ] then
4749: LD_VAR 0 4
4753: PPUSH
4754: CALL_OW 310
4758: PUSH
4759: LD_VAR 0 1
4763: PUSH
4764: LD_INT 1
4766: ARRAY
4767: EQUAL
4768: IFFALSE 4782
// Say ( i , DX2a-FSol1-1 ) ;
4770: LD_VAR 0 4
4774: PPUSH
4775: LD_STRING DX2a-FSol1-1
4777: PPUSH
4778: CALL_OW 88
4782: GO 4746
4784: POP
4785: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4786: LD_EXP 1
4790: PPUSH
4791: CALL_OW 310
4795: PUSH
4796: LD_VAR 0 1
4800: PUSH
4801: LD_INT 1
4803: ARRAY
4804: EQUAL
4805: IFFALSE 4819
// Say ( JMM , DX2b-JMM-1 ) ;
4807: LD_EXP 1
4811: PPUSH
4812: LD_STRING DX2b-JMM-1
4814: PPUSH
4815: CALL_OW 88
// if not IsInUnit ( JMM ) then
4819: LD_EXP 1
4823: PPUSH
4824: CALL_OW 310
4828: NOT
4829: IFFALSE 4843
// Say ( JMM , DX2a-JMM-2 ) ;
4831: LD_EXP 1
4835: PPUSH
4836: LD_STRING DX2a-JMM-2
4838: PPUSH
4839: CALL_OW 88
// end ;
4843: PPOPN 4
4845: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4846: LD_INT 1
4848: PPUSH
4849: CALL_OW 255
4853: PUSH
4854: LD_INT 1
4856: EQUAL
4857: PUSH
4858: LD_INT 10
4860: PPUSH
4861: CALL_OW 255
4865: PUSH
4866: LD_INT 1
4868: EQUAL
4869: OR
4870: IFFALSE 4930
4872: GO 4874
4874: DISABLE
// begin DialogueOn ;
4875: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4879: LD_EXP 1
4883: PPUSH
4884: LD_STRING D3-JMM-1
4886: PPUSH
4887: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4891: LD_EXP 9
4895: PPUSH
4896: LD_STRING D3-Pow-1
4898: PPUSH
4899: CALL_OW 94
// if IsOK ( Cyrus ) then
4903: LD_EXP 3
4907: PPUSH
4908: CALL_OW 302
4912: IFFALSE 4926
// Say ( Cyrus , D3-Cyrus-1 ) ;
4914: LD_EXP 3
4918: PPUSH
4919: LD_STRING D3-Cyrus-1
4921: PPUSH
4922: CALL_OW 88
// DialogueOff ;
4926: CALL_OW 7
// end ;
4930: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and FilterUnitsInArea ( NorthBase , [ f_side , 3 ] ) = 0 do var temp , i ;
4931: LD_INT 1
4933: PPUSH
4934: CALL_OW 255
4938: PUSH
4939: LD_INT 1
4941: EQUAL
4942: PUSH
4943: LD_INT 10
4945: PPUSH
4946: CALL_OW 255
4950: PUSH
4951: LD_INT 1
4953: EQUAL
4954: AND
4955: PUSH
4956: LD_INT 22
4958: PPUSH
4959: LD_INT 22
4961: PUSH
4962: LD_INT 3
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: PPUSH
4969: CALL_OW 70
4973: PUSH
4974: LD_INT 0
4976: EQUAL
4977: AND
4978: IFFALSE 6186
4980: GO 4982
4982: DISABLE
4983: LD_INT 0
4985: PPUSH
4986: PPUSH
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) diff [ JMM ] ;
4987: LD_ADDR_VAR 0 1
4991: PUSH
4992: LD_INT 22
4994: PUSH
4995: LD_INT 1
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 23
5004: PUSH
5005: LD_INT 1
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 25
5014: PUSH
5015: LD_INT 2
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: LIST
5026: PPUSH
5027: CALL_OW 69
5031: PUSH
5032: LD_EXP 1
5036: PUSH
5037: EMPTY
5038: LIST
5039: DIFF
5040: ST_TO_ADDR
// DialogueOn ;
5041: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5045: LD_EXP 1
5049: PPUSH
5050: LD_STRING D3a-JMM-1
5052: PPUSH
5053: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5057: LD_EXP 9
5061: PPUSH
5062: LD_STRING D3a-Pow-1
5064: PPUSH
5065: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5069: LD_EXP 1
5073: PPUSH
5074: LD_STRING D3a-JMM-2
5076: PPUSH
5077: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5081: LD_EXP 9
5085: PPUSH
5086: LD_STRING D3a-Pow-2
5088: PPUSH
5089: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5093: LD_EXP 1
5097: PPUSH
5098: LD_STRING D3a-JMM-3
5100: PPUSH
5101: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5105: LD_EXP 9
5109: PPUSH
5110: LD_STRING D3a-Pow-3
5112: PPUSH
5113: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5117: LD_EXP 1
5121: PPUSH
5122: LD_STRING D3a-JMM-4
5124: PPUSH
5125: CALL_OW 88
// DialogueOff ;
5129: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5133: LD_STRING M2
5135: PPUSH
5136: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5140: LD_EXP 1
5144: PPUSH
5145: LD_STRING D3b-JMM-1
5147: PPUSH
5148: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5152: LD_INT 35
5154: PPUSH
5155: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5159: LD_INT 22
5161: PPUSH
5162: LD_INT 22
5164: PUSH
5165: LD_INT 1
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: PUSH
5172: LD_INT 25
5174: PUSH
5175: LD_INT 2
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PPUSH
5186: CALL_OW 70
5190: IFFALSE 5152
// wait ( 0 0$5 ) ;
5192: LD_INT 175
5194: PPUSH
5195: CALL_OW 67
// InGameOn ;
5199: CALL_OW 8
// PrepareRussianHeroes ;
5203: CALL 11499 0 0
// CenterNowOnUnits ( Mikhail ) ;
5207: LD_EXP 8
5211: PPUSH
5212: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5216: LD_EXP 1
5220: PUSH
5221: LD_VAR 0 1
5225: PUSH
5226: LD_INT 1
5228: ARRAY
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PPUSH
5234: LD_EXP 8
5238: PPUSH
5239: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5243: LD_EXP 8
5247: PPUSH
5248: LD_VAR 0 1
5252: PUSH
5253: LD_INT 1
5255: ARRAY
5256: PPUSH
5257: CALL_OW 119
// Wait ( 0 0$02 ) ;
5261: LD_INT 70
5263: PPUSH
5264: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5268: LD_EXP 8
5272: PPUSH
5273: LD_STRING D4-Mikh-1
5275: PPUSH
5276: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5280: LD_VAR 0 1
5284: PUSH
5285: LD_INT 1
5287: ARRAY
5288: PPUSH
5289: CALL_OW 258
5293: PUSH
5294: LD_INT 1
5296: EQUAL
5297: IFFALSE 5315
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5299: LD_VAR 0 1
5303: PUSH
5304: LD_INT 1
5306: ARRAY
5307: PPUSH
5308: LD_STRING D4-Sol1-1
5310: PPUSH
5311: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5315: LD_VAR 0 1
5319: PUSH
5320: LD_INT 1
5322: ARRAY
5323: PPUSH
5324: CALL_OW 258
5328: PUSH
5329: LD_INT 2
5331: EQUAL
5332: IFFALSE 5350
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5334: LD_VAR 0 1
5338: PUSH
5339: LD_INT 1
5341: ARRAY
5342: PPUSH
5343: LD_STRING D4-FSol1-1
5345: PPUSH
5346: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5350: LD_EXP 8
5354: PPUSH
5355: LD_STRING D4-Mikh-2
5357: PPUSH
5358: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5362: LD_VAR 0 1
5366: PUSH
5367: LD_INT 1
5369: ARRAY
5370: PPUSH
5371: CALL_OW 258
5375: PUSH
5376: LD_INT 1
5378: EQUAL
5379: IFFALSE 5397
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5381: LD_VAR 0 1
5385: PUSH
5386: LD_INT 1
5388: ARRAY
5389: PPUSH
5390: LD_STRING D4-Sol1-2
5392: PPUSH
5393: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5397: LD_VAR 0 1
5401: PUSH
5402: LD_INT 1
5404: ARRAY
5405: PPUSH
5406: CALL_OW 258
5410: PUSH
5411: LD_INT 2
5413: EQUAL
5414: IFFALSE 5432
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5416: LD_VAR 0 1
5420: PUSH
5421: LD_INT 1
5423: ARRAY
5424: PPUSH
5425: LD_STRING D4-FSol1-2
5427: PPUSH
5428: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5432: LD_EXP 8
5436: PPUSH
5437: LD_STRING D4-Mikh-3
5439: PPUSH
5440: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5444: LD_VAR 0 1
5448: PUSH
5449: LD_INT 1
5451: ARRAY
5452: PPUSH
5453: CALL_OW 258
5457: PUSH
5458: LD_INT 1
5460: EQUAL
5461: IFFALSE 5479
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5463: LD_VAR 0 1
5467: PUSH
5468: LD_INT 1
5470: ARRAY
5471: PPUSH
5472: LD_STRING D4-Sol1-3
5474: PPUSH
5475: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5479: LD_VAR 0 1
5483: PUSH
5484: LD_INT 1
5486: ARRAY
5487: PPUSH
5488: CALL_OW 258
5492: PUSH
5493: LD_INT 2
5495: EQUAL
5496: IFFALSE 5514
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5498: LD_VAR 0 1
5502: PUSH
5503: LD_INT 1
5505: ARRAY
5506: PPUSH
5507: LD_STRING D4-FSol1-3
5509: PPUSH
5510: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5514: LD_EXP 8
5518: PPUSH
5519: LD_STRING D4-Mikh-4
5521: PPUSH
5522: CALL_OW 88
// case query ( Qs1 ) of 1 :
5526: LD_STRING Qs1
5528: PPUSH
5529: CALL_OW 97
5533: PUSH
5534: LD_INT 1
5536: DOUBLE
5537: EQUAL
5538: IFTRUE 5542
5540: GO 5577
5542: POP
// begin InGameOff ;
5543: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5547: LD_INT 1
5549: PPUSH
5550: LD_INT 6
5552: PPUSH
5553: LD_INT 2
5555: PPUSH
5556: LD_INT 1
5558: PPUSH
5559: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5563: LD_EXP 8
5567: PPUSH
5568: LD_INT 17
5570: PPUSH
5571: CALL_OW 113
// end ; 2 :
5575: GO 6170
5577: LD_INT 2
5579: DOUBLE
5580: EQUAL
5581: IFTRUE 5585
5583: GO 6135
5585: POP
// begin repeat wait ( 0 0$1 ) ;
5586: LD_INT 35
5588: PPUSH
5589: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5593: LD_VAR 0 1
5597: PUSH
5598: LD_INT 1
5600: ARRAY
5601: PPUSH
5602: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5606: LD_VAR 0 1
5610: PUSH
5611: LD_INT 1
5613: ARRAY
5614: PPUSH
5615: LD_EXP 1
5619: PPUSH
5620: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5624: LD_EXP 8
5628: PPUSH
5629: LD_EXP 1
5633: PPUSH
5634: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5638: LD_EXP 1
5642: PPUSH
5643: LD_EXP 8
5647: PPUSH
5648: CALL_OW 296
5652: PUSH
5653: LD_INT 5
5655: LESS
5656: IFFALSE 5586
// ComTurnUnit ( Mikhail , JMM ) ;
5658: LD_EXP 8
5662: PPUSH
5663: LD_EXP 1
5667: PPUSH
5668: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5672: LD_EXP 1
5676: PPUSH
5677: LD_STRING D4b-JMM-1
5679: PPUSH
5680: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5684: LD_EXP 8
5688: PPUSH
5689: LD_STRING D4b-Mikh-1
5691: PPUSH
5692: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5696: LD_EXP 1
5700: PPUSH
5701: LD_STRING D4b-JMM-2
5703: PPUSH
5704: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5708: LD_EXP 8
5712: PPUSH
5713: LD_STRING D4b-Mikh-2
5715: PPUSH
5716: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5720: LD_EXP 1
5724: PPUSH
5725: LD_STRING D4b-JMM-3
5727: PPUSH
5728: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5732: LD_EXP 8
5736: PPUSH
5737: LD_STRING D4b-Mikh-3
5739: PPUSH
5740: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5744: LD_EXP 1
5748: PPUSH
5749: LD_STRING D4b-JMM-4
5751: PPUSH
5752: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5756: LD_EXP 8
5760: PPUSH
5761: LD_STRING D4b-Mikh-4
5763: PPUSH
5764: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5768: LD_EXP 1
5772: PPUSH
5773: LD_STRING D4b-JMM-5
5775: PPUSH
5776: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5780: LD_EXP 8
5784: PPUSH
5785: LD_STRING D4b-Mikh-5
5787: PPUSH
5788: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5792: LD_EXP 1
5796: PPUSH
5797: LD_STRING D4b-JMM-6
5799: PPUSH
5800: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5804: LD_EXP 8
5808: PPUSH
5809: LD_STRING D4b-Mikh-6
5811: PPUSH
5812: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5816: LD_EXP 1
5820: PPUSH
5821: LD_STRING D4b-JMM-7
5823: PPUSH
5824: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5828: LD_EXP 8
5832: PPUSH
5833: LD_STRING D4b-Mikh-7
5835: PPUSH
5836: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5840: LD_VAR 0 1
5844: PUSH
5845: LD_INT 1
5847: ARRAY
5848: PPUSH
5849: CALL_OW 258
5853: PUSH
5854: LD_INT 1
5856: EQUAL
5857: IFFALSE 5875
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5859: LD_VAR 0 1
5863: PUSH
5864: LD_INT 1
5866: ARRAY
5867: PPUSH
5868: LD_STRING D4b-Sol1-7
5870: PPUSH
5871: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5875: LD_VAR 0 1
5879: PUSH
5880: LD_INT 1
5882: ARRAY
5883: PPUSH
5884: CALL_OW 258
5888: PUSH
5889: LD_INT 2
5891: EQUAL
5892: IFFALSE 5910
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5894: LD_VAR 0 1
5898: PUSH
5899: LD_INT 1
5901: ARRAY
5902: PPUSH
5903: LD_STRING D4b-FSol1-7
5905: PPUSH
5906: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5910: LD_EXP 1
5914: PPUSH
5915: LD_STRING D4b-JMM-8
5917: PPUSH
5918: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5922: LD_VAR 0 1
5926: PUSH
5927: LD_INT 1
5929: ARRAY
5930: PPUSH
5931: CALL_OW 258
5935: PUSH
5936: LD_INT 1
5938: EQUAL
5939: IFFALSE 5957
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5941: LD_VAR 0 1
5945: PUSH
5946: LD_INT 1
5948: ARRAY
5949: PPUSH
5950: LD_STRING D4b-Sol1-8
5952: PPUSH
5953: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5957: LD_VAR 0 1
5961: PUSH
5962: LD_INT 1
5964: ARRAY
5965: PPUSH
5966: CALL_OW 258
5970: PUSH
5971: LD_INT 2
5973: EQUAL
5974: IFFALSE 5992
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
5976: LD_VAR 0 1
5980: PUSH
5981: LD_INT 1
5983: ARRAY
5984: PPUSH
5985: LD_STRING D4b-FSol1-8
5987: PPUSH
5988: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
5992: LD_EXP 1
5996: PPUSH
5997: LD_STRING D4b-JMM-9
5999: PPUSH
6000: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6004: LD_EXP 8
6008: PPUSH
6009: LD_INT 1
6011: PPUSH
6012: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6016: LD_ADDR_VAR 0 2
6020: PUSH
6021: LD_INT 22
6023: PUSH
6024: LD_INT 1
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: EMPTY
6032: LIST
6033: PPUSH
6034: CALL_OW 69
6038: PUSH
6039: FOR_IN
6040: IFFALSE 6053
// ComFree ( i ) ;
6042: LD_VAR 0 2
6046: PPUSH
6047: CALL_OW 139
6051: GO 6039
6053: POP
6054: POP
// repeat wait ( 0 0$1 ) ;
6055: LD_INT 35
6057: PPUSH
6058: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6062: LD_EXP 8
6066: PPUSH
6067: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6071: LD_EXP 8
6075: PUSH
6076: LD_VAR 0 1
6080: PUSH
6081: LD_INT 1
6083: ARRAY
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PPUSH
6089: LD_INT 1
6091: PPUSH
6092: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6096: LD_EXP 8
6100: PPUSH
6101: CALL_OW 310
6105: IFFALSE 6055
// mikhailDepot = IsInUnit ( Mikhail ) ;
6107: LD_ADDR_EXP 23
6111: PUSH
6112: LD_EXP 8
6116: PPUSH
6117: CALL_OW 310
6121: ST_TO_ADDR
// InGameOff ;
6122: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6126: LD_STRING M3
6128: PPUSH
6129: CALL_OW 337
// end ; 3 :
6133: GO 6170
6135: LD_INT 3
6137: DOUBLE
6138: EQUAL
6139: IFTRUE 6143
6141: GO 6169
6143: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6144: LD_EXP 8
6148: PPUSH
6149: LD_INT 17
6151: PPUSH
6152: CALL_OW 113
// wait ( 0 0$3 ) ;
6156: LD_INT 105
6158: PPUSH
6159: CALL_OW 67
// InGameOff ;
6163: CALL_OW 9
// end ; end ;
6167: GO 6170
6169: POP
// PrepareTigers ;
6170: CALL 14132 0 0
// RussianTrap ;
6174: CALL 9980 0 0
// tigersRespawn = 1 ;
6178: LD_ADDR_EXP 30
6182: PUSH
6183: LD_INT 1
6185: ST_TO_ADDR
// end ;
6186: PPOPN 2
6188: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6189: LD_INT 1
6191: PPUSH
6192: CALL_OW 255
6196: PUSH
6197: LD_INT 1
6199: EQUAL
6200: PUSH
6201: LD_INT 10
6203: PPUSH
6204: CALL_OW 255
6208: PUSH
6209: LD_INT 1
6211: EQUAL
6212: AND
6213: PUSH
6214: LD_INT 1
6216: PPUSH
6217: CALL_OW 274
6221: PPUSH
6222: LD_INT 1
6224: PPUSH
6225: CALL_OW 275
6229: PUSH
6230: LD_INT 100
6232: GREATEREQUAL
6233: AND
6234: IFFALSE 6397
6236: GO 6238
6238: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6239: LD_INT 2100
6241: PPUSH
6242: LD_INT 4200
6244: PPUSH
6245: CALL_OW 12
6249: PUSH
6250: LD_INT 1050
6252: PLUS
6253: PPUSH
6254: CALL_OW 67
// PrepareCargoBays ;
6258: CALL 12615 0 0
// cargoRespawn = 1 ;
6262: LD_ADDR_EXP 28
6266: PUSH
6267: LD_INT 1
6269: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6270: LD_EXP 15
6274: PUSH
6275: LD_EXP 16
6279: PUSH
6280: LD_EXP 17
6284: PUSH
6285: LD_EXP 18
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: PPUSH
6296: LD_INT 36
6298: PPUSH
6299: LD_INT 13
6301: PPUSH
6302: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6306: LD_EXP 15
6310: PUSH
6311: LD_EXP 16
6315: PUSH
6316: LD_EXP 17
6320: PUSH
6321: LD_EXP 18
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: PPUSH
6332: LD_INT 40
6334: PPUSH
6335: LD_INT 20
6337: PPUSH
6338: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6342: LD_EXP 15
6346: PUSH
6347: LD_EXP 16
6351: PUSH
6352: LD_EXP 17
6356: PUSH
6357: LD_EXP 18
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: PPUSH
6368: LD_INT 53
6370: PPUSH
6371: LD_INT 16
6373: PPUSH
6374: CALL_OW 171
// wait ( 0 0$5 ) ;
6378: LD_INT 175
6380: PPUSH
6381: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6385: LD_EXP 17
6389: PPUSH
6390: LD_STRING D5-Rus2-1
6392: PPUSH
6393: CALL_OW 88
// end ;
6397: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6398: LD_EXP 28
6402: PUSH
6403: LD_INT 1
6405: EQUAL
6406: IFFALSE 6620
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
6414: PPUSH
6415: PPUSH
6416: PPUSH
// begin enable ;
6417: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6418: LD_ADDR_VAR 0 3
6422: PUSH
6423: LD_INT 22
6425: PUSH
6426: LD_INT 3
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 21
6435: PUSH
6436: LD_INT 2
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 34
6445: PUSH
6446: LD_INT 51
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: LIST
6457: PPUSH
6458: CALL_OW 69
6462: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
6463: LD_ADDR_VAR 0 4
6467: PUSH
6468: LD_INT 22
6470: PUSH
6471: LD_INT 1
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: LD_INT 23
6480: PUSH
6481: LD_INT 1
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 69
6496: ST_TO_ADDR
// for i in tmp1 do
6497: LD_ADDR_VAR 0 1
6501: PUSH
6502: LD_VAR 0 3
6506: PUSH
6507: FOR_IN
6508: IFFALSE 6618
// begin for j in tmp2 do
6510: LD_ADDR_VAR 0 2
6514: PUSH
6515: LD_VAR 0 4
6519: PUSH
6520: FOR_IN
6521: IFFALSE 6614
// begin if GetDistUnits ( i , j ) < 7 then
6523: LD_VAR 0 1
6527: PPUSH
6528: LD_VAR 0 2
6532: PPUSH
6533: CALL_OW 296
6537: PUSH
6538: LD_INT 7
6540: LESS
6541: IFFALSE 6612
// begin disable ;
6543: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6544: LD_EXP 15
6548: PUSH
6549: LD_EXP 16
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PPUSH
6558: LD_INT 7
6560: PPUSH
6561: LD_INT 9
6563: PPUSH
6564: CALL_OW 111
// if cargoSee = 0 then
6568: LD_EXP 29
6572: PUSH
6573: LD_INT 0
6575: EQUAL
6576: IFFALSE 6612
// begin cargoSee = 1 ;
6578: LD_ADDR_EXP 29
6582: PUSH
6583: LD_INT 1
6585: ST_TO_ADDR
// cargoEscape = 1 ;
6586: LD_ADDR_EXP 20
6590: PUSH
6591: LD_INT 1
6593: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6594: LD_EXP 17
6598: PPUSH
6599: LD_STRING D5-Rus2-1a
6601: PPUSH
6602: CALL_OW 88
// exit ;
6606: POP
6607: POP
6608: POP
6609: POP
6610: GO 6620
// end ; end ; end ;
6612: GO 6520
6614: POP
6615: POP
// end ;
6616: GO 6507
6618: POP
6619: POP
// end ;
6620: PPOPN 4
6622: END
// every 0 0$1 trigger cargoEscape > 0 do
6623: LD_EXP 20
6627: PUSH
6628: LD_INT 0
6630: GREATER
6631: IFFALSE 6778
6633: GO 6635
6635: DISABLE
// begin enable ;
6636: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6637: LD_EXP 15
6641: PUSH
6642: LD_EXP 16
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PPUSH
6651: LD_INT 13
6653: PPUSH
6654: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6658: LD_EXP 15
6662: PPUSH
6663: LD_INT 13
6665: PPUSH
6666: CALL_OW 308
6670: PUSH
6671: LD_EXP 17
6675: PPUSH
6676: LD_INT 13
6678: PPUSH
6679: CALL_OW 308
6683: OR
6684: IFFALSE 6718
// begin RemoveUnit ( cargo1 ) ;
6686: LD_EXP 15
6690: PPUSH
6691: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6695: LD_EXP 17
6699: PPUSH
6700: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6704: LD_ADDR_EXP 20
6708: PUSH
6709: LD_EXP 20
6713: PUSH
6714: LD_INT 1
6716: PLUS
6717: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6718: LD_EXP 16
6722: PPUSH
6723: LD_INT 13
6725: PPUSH
6726: CALL_OW 308
6730: PUSH
6731: LD_EXP 18
6735: PPUSH
6736: LD_INT 13
6738: PPUSH
6739: CALL_OW 308
6743: OR
6744: IFFALSE 6778
// begin RemoveUnit ( cargo2 ) ;
6746: LD_EXP 16
6750: PPUSH
6751: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6755: LD_EXP 18
6759: PPUSH
6760: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6764: LD_ADDR_EXP 20
6768: PUSH
6769: LD_EXP 20
6773: PUSH
6774: LD_INT 1
6776: PLUS
6777: ST_TO_ADDR
// end ; end ;
6778: END
// every 0 0$1 trigger cargoEscape > 1 do
6779: LD_EXP 20
6783: PUSH
6784: LD_INT 1
6786: GREATER
6787: IFFALSE 6951
6789: GO 6791
6791: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
6792: LD_INT 4
6794: PPUSH
6795: LD_INT 1
6797: PPUSH
6798: LD_INT 1
6800: PPUSH
6801: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6805: LD_INT 31
6807: PPUSH
6808: LD_INT 1
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: CALL_OW 324
// if IsOK ( Jerry ) then
6818: LD_EXP 7
6822: PPUSH
6823: CALL_OW 302
6827: IFFALSE 6843
// begin Say ( Jerry , D5a-Sol1-1 ) ;
6829: LD_EXP 7
6833: PPUSH
6834: LD_STRING D5a-Sol1-1
6836: PPUSH
6837: CALL_OW 88
// end else
6841: GO 6939
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
6843: LD_INT 22
6845: PUSH
6846: LD_INT 1
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 23
6855: PUSH
6856: LD_INT 1
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: PUSH
6863: LD_INT 26
6865: PUSH
6866: LD_INT 1
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: PUSH
6883: LD_INT 2
6885: PPUSH
6886: LD_INT 22
6888: PUSH
6889: LD_INT 1
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 23
6898: PUSH
6899: LD_INT 1
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 26
6908: PUSH
6909: LD_INT 1
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: LIST
6920: PPUSH
6921: CALL_OW 69
6925: PPUSH
6926: CALL_OW 12
6930: ARRAY
6931: PPUSH
6932: LD_STRING D5a-Sol1-1
6934: PPUSH
6935: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6939: LD_EXP 1
6943: PPUSH
6944: LD_STRING D5a-JMM-1
6946: PPUSH
6947: CALL_OW 88
// end ;
6951: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
6952: LD_INT 1
6954: PPUSH
6955: CALL_OW 255
6959: PUSH
6960: LD_INT 3
6962: EQUAL
6963: PUSH
6964: LD_INT 1
6966: PPUSH
6967: CALL_OW 256
6971: PUSH
6972: LD_INT 1000
6974: LESS
6975: AND
6976: PUSH
6977: LD_INT 10
6979: PPUSH
6980: CALL_OW 255
6984: PUSH
6985: LD_INT 3
6987: EQUAL
6988: PUSH
6989: LD_INT 10
6991: PPUSH
6992: CALL_OW 256
6996: PUSH
6997: LD_INT 1000
6999: LESS
7000: AND
7001: OR
7002: IFFALSE 7019
7004: GO 7006
7006: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
7007: LD_EXP 1
7011: PPUSH
7012: LD_STRING D8-JMM-1
7014: PPUSH
7015: CALL_OW 88
// end ;
7019: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7020: LD_EXP 8
7024: PPUSH
7025: CALL_OW 310
7029: PUSH
7030: LD_INT 1
7032: EQUAL
7033: PUSH
7034: LD_EXP 22
7038: PUSH
7039: LD_INT 3
7041: EQUAL
7042: NOT
7043: AND
7044: IFFALSE 7066
7046: GO 7048
7048: DISABLE
// begin mikhailInBase = 1 ;
7049: LD_ADDR_EXP 22
7053: PUSH
7054: LD_INT 1
7056: ST_TO_ADDR
// mikhailStatus = 1 ;
7057: LD_ADDR_EXP 21
7061: PUSH
7062: LD_INT 1
7064: ST_TO_ADDR
// enable ;
7065: ENABLE
// end ;
7066: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
7067: LD_EXP 8
7071: PPUSH
7072: LD_INT 25
7074: PPUSH
7075: CALL_OW 308
7079: PUSH
7080: LD_EXP 22
7084: PUSH
7085: LD_INT 1
7087: EQUAL
7088: AND
7089: PUSH
7090: LD_EXP 8
7094: PPUSH
7095: CALL_OW 255
7099: PUSH
7100: LD_INT 1
7102: EQUAL
7103: AND
7104: IFFALSE 7434
7106: GO 7108
7108: DISABLE
// begin enable ;
7109: ENABLE
// case query ( QMikh2 ) of 1 :
7110: LD_STRING QMikh2
7112: PPUSH
7113: CALL_OW 97
7117: PUSH
7118: LD_INT 1
7120: DOUBLE
7121: EQUAL
7122: IFTRUE 7126
7124: GO 7193
7126: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7127: LD_INT 1
7129: PPUSH
7130: LD_INT 6
7132: PPUSH
7133: LD_INT 2
7135: PPUSH
7136: LD_INT 1
7138: PPUSH
7139: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7143: LD_EXP 8
7147: PPUSH
7148: LD_INT 6
7150: PPUSH
7151: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7155: LD_EXP 8
7159: PPUSH
7160: CALL_OW 122
// wait ( 0 0$1 ) ;
7164: LD_INT 35
7166: PPUSH
7167: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7171: LD_EXP 8
7175: PPUSH
7176: LD_INT 17
7178: PPUSH
7179: CALL_OW 113
// mikhailInbase = 0 ;
7183: LD_ADDR_EXP 22
7187: PUSH
7188: LD_INT 0
7190: ST_TO_ADDR
// end ; 2 :
7191: GO 7434
7193: LD_INT 2
7195: DOUBLE
7196: EQUAL
7197: IFTRUE 7201
7199: GO 7374
7201: POP
// begin mikhailInBase = 2 ;
7202: LD_ADDR_EXP 22
7206: PUSH
7207: LD_INT 2
7209: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7210: LD_EXP 8
7214: PPUSH
7215: LD_INT 6
7217: PPUSH
7218: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7222: LD_EXP 8
7226: PPUSH
7227: CALL_OW 122
// wait ( 0 0$1 ) ;
7231: LD_INT 35
7233: PPUSH
7234: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7238: LD_EXP 8
7242: PPUSH
7243: LD_EXP 8
7247: PPUSH
7248: CALL_OW 250
7252: PUSH
7253: LD_INT 2
7255: PLUS
7256: PPUSH
7257: LD_EXP 8
7261: PPUSH
7262: CALL_OW 251
7266: PUSH
7267: LD_INT 2
7269: PLUS
7270: PPUSH
7271: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7275: LD_EXP 8
7279: PPUSH
7280: LD_EXP 8
7284: PPUSH
7285: CALL_OW 250
7289: PUSH
7290: LD_INT 1
7292: PLUS
7293: PPUSH
7294: LD_EXP 8
7298: PPUSH
7299: CALL_OW 251
7303: PUSH
7304: LD_INT 2
7306: PLUS
7307: PPUSH
7308: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7312: LD_EXP 8
7316: PPUSH
7317: LD_EXP 8
7321: PPUSH
7322: CALL_OW 250
7326: PUSH
7327: LD_INT 2
7329: PLUS
7330: PPUSH
7331: LD_EXP 8
7335: PPUSH
7336: CALL_OW 251
7340: PPUSH
7341: CALL_OW 171
// wait ( 0 0$5 ) ;
7345: LD_INT 175
7347: PPUSH
7348: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7352: LD_EXP 8
7356: PPUSH
7357: LD_INT 25
7359: PPUSH
7360: CALL_OW 113
// mikhailInBase = 4 ;
7364: LD_ADDR_EXP 22
7368: PUSH
7369: LD_INT 4
7371: ST_TO_ADDR
// end ; 3 :
7372: GO 7434
7374: LD_INT 3
7376: DOUBLE
7377: EQUAL
7378: IFTRUE 7382
7380: GO 7433
7382: POP
// begin SetSide ( Mikhail , 6 ) ;
7383: LD_EXP 8
7387: PPUSH
7388: LD_INT 6
7390: PPUSH
7391: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7395: LD_EXP 8
7399: PPUSH
7400: CALL_OW 122
// wait ( 0 0$1 ) ;
7404: LD_INT 35
7406: PPUSH
7407: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7411: LD_EXP 8
7415: PPUSH
7416: LD_INT 17
7418: PPUSH
7419: CALL_OW 113
// mikhailInbase = 3 ;
7423: LD_ADDR_EXP 22
7427: PUSH
7428: LD_INT 3
7430: ST_TO_ADDR
// end ; end ;
7431: GO 7434
7433: POP
// end ;
7434: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7435: LD_EXP 8
7439: PPUSH
7440: LD_INT 25
7442: PPUSH
7443: CALL_OW 308
7447: PUSH
7448: LD_EXP 22
7452: PUSH
7453: LD_INT 4
7455: EQUAL
7456: AND
7457: IFFALSE 7563
7459: GO 7461
7461: DISABLE
// begin enable ;
7462: ENABLE
// InGameOn ;
7463: CALL_OW 8
// SetSide ( Mikhail , 1 ) ;
7467: LD_EXP 8
7471: PPUSH
7472: LD_INT 1
7474: PPUSH
7475: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7479: LD_INT 35
7481: PPUSH
7482: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
7486: LD_EXP 8
7490: PPUSH
7491: LD_INT 1
7493: PPUSH
7494: CALL_OW 296
7498: PUSH
7499: LD_EXP 8
7503: PPUSH
7504: LD_INT 10
7506: PPUSH
7507: CALL_OW 296
7511: LESS
7512: IFFALSE 7528
// begin ComEnterUnit ( Mikhail , dep1 ) ;
7514: LD_EXP 8
7518: PPUSH
7519: LD_INT 1
7521: PPUSH
7522: CALL_OW 120
// end else
7526: GO 7540
// begin ComEnterUnit ( Mikhail , dep2 ) ;
7528: LD_EXP 8
7532: PPUSH
7533: LD_INT 10
7535: PPUSH
7536: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
7540: LD_EXP 8
7544: PPUSH
7545: CALL_OW 310
7549: IFFALSE 7479
// InGameOff ;
7551: CALL_OW 9
// mikhailInBase = 1 ;
7555: LD_ADDR_EXP 22
7559: PUSH
7560: LD_INT 1
7562: ST_TO_ADDR
// end ;
7563: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7564: LD_EXP 8
7568: PPUSH
7569: CALL_OW 310
7573: PUSH
7574: LD_EXP 22
7578: PUSH
7579: LD_INT 3
7581: EQUAL
7582: NOT
7583: AND
7584: IFFALSE 7710
7586: GO 7588
7588: DISABLE
// begin enable ;
7589: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7590: LD_INT 22
7592: PUSH
7593: LD_INT 1
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 21
7602: PUSH
7603: LD_INT 1
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 91
7612: PUSH
7613: LD_EXP 8
7617: PPUSH
7618: CALL_OW 310
7622: PUSH
7623: LD_INT 10
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: LIST
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 69
7640: PUSH
7641: LD_INT 1
7643: EQUAL
7644: IFFALSE 7710
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7646: LD_INT 1
7648: PPUSH
7649: LD_INT 6
7651: PPUSH
7652: LD_INT 2
7654: PPUSH
7655: LD_INT 1
7657: PPUSH
7658: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7662: LD_EXP 8
7666: PPUSH
7667: LD_INT 6
7669: PPUSH
7670: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7674: LD_EXP 8
7678: PPUSH
7679: CALL_OW 122
// wait ( 0 0$1 ) ;
7683: LD_INT 35
7685: PPUSH
7686: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7690: LD_EXP 8
7694: PPUSH
7695: LD_INT 17
7697: PPUSH
7698: CALL_OW 113
// mikhailStatus = 3 ;
7702: LD_ADDR_EXP 21
7706: PUSH
7707: LD_INT 3
7709: ST_TO_ADDR
// end ; end ;
7710: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7711: LD_EXP 1
7715: PPUSH
7716: LD_EXP 23
7720: PPUSH
7721: CALL_OW 296
7725: PUSH
7726: LD_INT 5
7728: LESS
7729: PUSH
7730: LD_EXP 21
7734: PUSH
7735: LD_INT 3
7737: EQUAL
7738: AND
7739: PUSH
7740: LD_EXP 22
7744: PUSH
7745: LD_INT 3
7747: EQUAL
7748: NOT
7749: AND
7750: IFFALSE 7966
7752: GO 7754
7754: DISABLE
7755: LD_INT 0
7757: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
7758: LD_ADDR_VAR 0 1
7762: PUSH
7763: LD_INT 22
7765: PUSH
7766: LD_INT 1
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 21
7775: PUSH
7776: LD_INT 1
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 26
7785: PUSH
7786: LD_INT 1
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: PPUSH
7798: CALL_OW 69
7802: PUSH
7803: LD_EXP 1
7807: PUSH
7808: EMPTY
7809: LIST
7810: DIFF
7811: ST_TO_ADDR
// DialogueOn ;
7812: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7816: LD_EXP 1
7820: PPUSH
7821: LD_STRING D7-JMM-1
7823: PPUSH
7824: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7828: LD_VAR 0 1
7832: PUSH
7833: LD_INT 1
7835: ARRAY
7836: PPUSH
7837: LD_STRING D7-Sol1-1
7839: PPUSH
7840: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7844: LD_EXP 1
7848: PPUSH
7849: LD_STRING D7-JMM-2
7851: PPUSH
7852: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7856: LD_VAR 0 1
7860: PUSH
7861: LD_INT 1
7863: ARRAY
7864: PPUSH
7865: LD_STRING D7-Sol1-2
7867: PPUSH
7868: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7872: LD_EXP 1
7876: PPUSH
7877: LD_STRING D7-JMM-3
7879: PPUSH
7880: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7884: LD_VAR 0 1
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: PPUSH
7893: LD_STRING D7-Sol1-3
7895: PPUSH
7896: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7900: LD_EXP 3
7904: PPUSH
7905: CALL_OW 302
7909: PUSH
7910: LD_EXP 4
7914: PPUSH
7915: CALL_OW 302
7919: AND
7920: IFFALSE 7962
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7922: LD_EXP 3
7926: PPUSH
7927: LD_STRING D7-Cyrus-3
7929: PPUSH
7930: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7934: LD_VAR 0 1
7938: PUSH
7939: LD_INT 1
7941: ARRAY
7942: PPUSH
7943: LD_STRING D7-Sol1-4
7945: PPUSH
7946: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7950: LD_EXP 4
7954: PPUSH
7955: LD_STRING D7-Lisa-4
7957: PPUSH
7958: CALL_OW 88
// end ; DialogueOff ;
7962: CALL_OW 7
// end ;
7966: PPOPN 1
7968: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7969: LD_EXP 8
7973: PPUSH
7974: CALL_OW 303
7978: PUSH
7979: LD_EXP 21
7983: PUSH
7984: LD_INT 3
7986: EQUAL
7987: AND
7988: IFFALSE 8002
7990: GO 7992
7992: DISABLE
// begin enable ;
7993: ENABLE
// mikhailStatus = 2 ;
7994: LD_ADDR_EXP 21
7998: PUSH
7999: LD_INT 2
8001: ST_TO_ADDR
// end ;
8002: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8003: LD_EXP 8
8007: PPUSH
8008: LD_INT 17
8010: PPUSH
8011: CALL_OW 308
8015: PUSH
8016: LD_EXP 8
8020: PPUSH
8021: CALL_OW 255
8025: PUSH
8026: LD_INT 6
8028: EQUAL
8029: AND
8030: IFFALSE 8063
8032: GO 8034
8034: DISABLE
// begin if not mikhailInBase = 3 then
8035: LD_EXP 22
8039: PUSH
8040: LD_INT 3
8042: EQUAL
8043: NOT
8044: IFFALSE 8054
// mikhailStatus = 3 ;
8046: LD_ADDR_EXP 21
8050: PUSH
8051: LD_INT 3
8053: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8054: LD_EXP 8
8058: PPUSH
8059: CALL_OW 64
// end ;
8063: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8064: LD_EXP 21
8068: PUSH
8069: LD_INT 3
8071: EQUAL
8072: PUSH
8073: LD_EXP 8
8077: PPUSH
8078: CALL_OW 255
8082: PUSH
8083: LD_INT 6
8085: EQUAL
8086: AND
8087: IFFALSE 8253
8089: GO 8091
8091: DISABLE
8092: LD_INT 0
8094: PPUSH
8095: PPUSH
// begin enable ;
8096: ENABLE
// if IsOk ( Mikhail ) then
8097: LD_EXP 8
8101: PPUSH
8102: CALL_OW 302
8106: IFFALSE 8253
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8108: LD_ADDR_VAR 0 2
8112: PUSH
8113: LD_EXP 8
8117: PPUSH
8118: LD_INT 22
8120: PUSH
8121: LD_INT 1
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: PUSH
8128: LD_INT 21
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PPUSH
8142: CALL_OW 69
8146: PPUSH
8147: CALL 10172 0 2
8151: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8152: LD_VAR 0 2
8156: PPUSH
8157: LD_EXP 8
8161: PPUSH
8162: CALL_OW 296
8166: PUSH
8167: LD_INT 8
8169: LESS
8170: IFFALSE 8253
// begin if GetSex ( attacker ) = sex_male then
8172: LD_VAR 0 2
8176: PPUSH
8177: CALL_OW 258
8181: PUSH
8182: LD_INT 1
8184: EQUAL
8185: IFFALSE 8221
// begin disable ;
8187: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8188: LD_VAR 0 2
8192: PPUSH
8193: LD_STRING D7a-Sol1-1
8195: PPUSH
8196: CALL_OW 88
// wait ( 0 0$2 ) ;
8200: LD_INT 70
8202: PPUSH
8203: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8207: LD_VAR 0 2
8211: PPUSH
8212: LD_STRING D7a-Sol1-1a
8214: PPUSH
8215: CALL_OW 88
// end else
8219: GO 8253
// begin disable ;
8221: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8222: LD_VAR 0 2
8226: PPUSH
8227: LD_STRING D7a-FSol1-1
8229: PPUSH
8230: CALL_OW 88
// wait ( 0 0$2 ) ;
8234: LD_INT 70
8236: PPUSH
8237: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8241: LD_VAR 0 2
8245: PPUSH
8246: LD_STRING D7a-FSol1-1a
8248: PPUSH
8249: CALL_OW 88
// end ; end ; end ; end ;
8253: PPOPN 2
8255: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8256: LD_EXP 27
8260: PUSH
8261: LD_INT 1
8263: EQUAL
8264: PUSH
8265: LD_INT 22
8267: PPUSH
8268: LD_INT 22
8270: PUSH
8271: LD_INT 3
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PUSH
8278: LD_INT 21
8280: PUSH
8281: LD_INT 1
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PPUSH
8292: CALL_OW 70
8296: PUSH
8297: LD_INT 2
8299: GREATER
8300: AND
8301: PUSH
8302: LD_INT 22
8304: PPUSH
8305: LD_INT 22
8307: PUSH
8308: LD_INT 1
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: PUSH
8315: LD_INT 2
8317: PUSH
8318: LD_INT 21
8320: PUSH
8321: LD_INT 1
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PUSH
8328: LD_INT 59
8330: PUSH
8331: EMPTY
8332: LIST
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: LIST
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 70
8347: PUSH
8348: LD_INT 0
8350: EQUAL
8351: AND
8352: IFFALSE 8367
8354: GO 8356
8356: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8357: LD_INT 1
8359: PPUSH
8360: LD_INT 3
8362: PPUSH
8363: CALL_OW 235
// end ;
8367: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8368: LD_EXP 30
8372: PUSH
8373: LD_INT 1
8375: EQUAL
8376: PUSH
8377: LD_INT 22
8379: PUSH
8380: LD_INT 0
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PUSH
8387: LD_INT 25
8389: PUSH
8390: LD_INT 14
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PPUSH
8401: CALL_OW 69
8405: PUSH
8406: LD_INT 0
8408: EQUAL
8409: AND
8410: IFFALSE 8504
8412: GO 8414
8414: DISABLE
8415: LD_INT 0
8417: PPUSH
8418: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8419: LD_ADDR_VAR 0 2
8423: PUSH
8424: LD_INT 22
8426: PUSH
8427: LD_INT 1
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: PUSH
8434: LD_INT 21
8436: PUSH
8437: LD_INT 1
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 23
8446: PUSH
8447: LD_INT 1
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: LIST
8458: PPUSH
8459: CALL_OW 69
8463: ST_TO_ADDR
// for i in tmp do
8464: LD_ADDR_VAR 0 1
8468: PUSH
8469: LD_VAR 0 2
8473: PUSH
8474: FOR_IN
8475: IFFALSE 8502
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8477: LD_VAR 0 1
8481: PPUSH
8482: LD_INT 1
8484: PPUSH
8485: LD_INT 4
8487: PPUSH
8488: CALL_OW 12
8492: PPUSH
8493: LD_INT 300
8495: PPUSH
8496: CALL_OW 492
// end ;
8500: GO 8474
8502: POP
8503: POP
// end ; end_of_file
8504: PPOPN 2
8506: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8507: LD_INT 0
8509: PPUSH
8510: PPUSH
8511: PPUSH
8512: PPUSH
// for i = 1 to count do
8513: LD_ADDR_VAR 0 8
8517: PUSH
8518: DOUBLE
8519: LD_INT 1
8521: DEC
8522: ST_TO_ADDR
8523: LD_VAR 0 6
8527: PUSH
8528: FOR_TO
8529: IFFALSE 8610
// begin uc_side = side ;
8531: LD_ADDR_OWVAR 20
8535: PUSH
8536: LD_VAR 0 1
8540: ST_TO_ADDR
// uc_nation = nation ;
8541: LD_ADDR_OWVAR 21
8545: PUSH
8546: LD_VAR 0 2
8550: ST_TO_ADDR
// hc_gallery =  ;
8551: LD_ADDR_OWVAR 33
8555: PUSH
8556: LD_STRING 
8558: ST_TO_ADDR
// hc_name =  ;
8559: LD_ADDR_OWVAR 26
8563: PUSH
8564: LD_STRING 
8566: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8567: LD_INT 0
8569: PPUSH
8570: LD_VAR 0 5
8574: PPUSH
8575: LD_VAR 0 4
8579: PPUSH
8580: CALL_OW 380
// un = CreateHuman ;
8584: LD_ADDR_VAR 0 10
8588: PUSH
8589: CALL_OW 44
8593: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8594: LD_VAR 0 10
8598: PPUSH
8599: LD_VAR 0 3
8603: PPUSH
8604: CALL_OW 52
// end ;
8608: GO 8528
8610: POP
8611: POP
// end ;
8612: LD_VAR 0 7
8616: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8617: LD_INT 0
8619: PPUSH
8620: PPUSH
8621: PPUSH
// uc_side := GetSide ( b ) ;
8622: LD_ADDR_OWVAR 20
8626: PUSH
8627: LD_VAR 0 2
8631: PPUSH
8632: CALL_OW 255
8636: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8637: LD_ADDR_OWVAR 21
8641: PUSH
8642: LD_VAR 0 2
8646: PPUSH
8647: CALL_OW 248
8651: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8652: LD_INT 0
8654: PPUSH
8655: LD_INT 1
8657: PPUSH
8658: LD_VAR 0 1
8662: PPUSH
8663: CALL_OW 380
// un = CreateHuman ;
8667: LD_ADDR_VAR 0 4
8671: PUSH
8672: CALL_OW 44
8676: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8677: LD_ADDR_VAR 0 5
8681: PUSH
8682: LD_VAR 0 2
8686: PPUSH
8687: CALL_OW 254
8691: PUSH
8692: LD_INT 3
8694: MINUS
8695: ST_TO_ADDR
// if dir < 0 then
8696: LD_VAR 0 5
8700: PUSH
8701: LD_INT 0
8703: LESS
8704: IFFALSE 8720
// dir := 6 + dir ;
8706: LD_ADDR_VAR 0 5
8710: PUSH
8711: LD_INT 6
8713: PUSH
8714: LD_VAR 0 5
8718: PLUS
8719: ST_TO_ADDR
// SetDir ( un , dir ) ;
8720: LD_VAR 0 4
8724: PPUSH
8725: LD_VAR 0 5
8729: PPUSH
8730: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8734: LD_VAR 0 4
8738: PPUSH
8739: LD_VAR 0 2
8743: PPUSH
8744: CALL_OW 52
// end ;
8748: LD_VAR 0 3
8752: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8753: LD_INT 0
8755: PPUSH
8756: PPUSH
8757: PPUSH
8758: PPUSH
8759: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8760: LD_ADDR_VAR 0 7
8764: PUSH
8765: LD_INT 22
8767: PUSH
8768: LD_VAR 0 1
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: LD_INT 25
8779: PUSH
8780: LD_INT 2
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: PUSH
8787: LD_INT 24
8789: PUSH
8790: LD_INT 1000
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: LIST
8801: PPUSH
8802: CALL_OW 69
8806: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8807: LD_ADDR_VAR 0 5
8811: PUSH
8812: LD_VAR 0 3
8816: PPUSH
8817: LD_INT 22
8819: PUSH
8820: LD_VAR 0 1
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: LD_INT 21
8831: PUSH
8832: LD_INT 3
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 3
8841: PUSH
8842: LD_INT 24
8844: PUSH
8845: LD_INT 1000
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: LIST
8860: PUSH
8861: EMPTY
8862: LIST
8863: PPUSH
8864: CALL_OW 70
8868: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8869: LD_VAR 0 5
8873: PUSH
8874: LD_INT 0
8876: GREATER
8877: PUSH
8878: LD_VAR 0 7
8882: PUSH
8883: LD_INT 0
8885: GREATER
8886: AND
8887: IFFALSE 8953
// begin for i in engineerOk_list do
8889: LD_ADDR_VAR 0 6
8893: PUSH
8894: LD_VAR 0 7
8898: PUSH
8899: FOR_IN
8900: IFFALSE 8951
// begin for j in buildings_list do
8902: LD_ADDR_VAR 0 8
8906: PUSH
8907: LD_VAR 0 5
8911: PUSH
8912: FOR_IN
8913: IFFALSE 8947
// begin AddComExitBuilding ( i ) ;
8915: LD_VAR 0 6
8919: PPUSH
8920: CALL_OW 182
// wait ( 0 0$1 ) ;
8924: LD_INT 35
8926: PPUSH
8927: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8931: LD_VAR 0 6
8935: PPUSH
8936: LD_VAR 0 8
8940: PPUSH
8941: CALL_OW 190
// end ;
8945: GO 8912
8947: POP
8948: POP
// end ;
8949: GO 8899
8951: POP
8952: POP
// end ; if buildings_list = 0 then
8953: LD_VAR 0 5
8957: PUSH
8958: LD_INT 0
8960: EQUAL
8961: IFFALSE 8994
// begin for i in engineerOK_list do
8963: LD_ADDR_VAR 0 6
8967: PUSH
8968: LD_VAR 0 7
8972: PUSH
8973: FOR_IN
8974: IFFALSE 8992
// begin ComEnterUnit ( i , building ) ;
8976: LD_VAR 0 6
8980: PPUSH
8981: LD_VAR 0 2
8985: PPUSH
8986: CALL_OW 120
// end ;
8990: GO 8973
8992: POP
8993: POP
// end ; end ;
8994: LD_VAR 0 4
8998: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8999: LD_INT 0
9001: PPUSH
9002: PPUSH
9003: PPUSH
9004: PPUSH
9005: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9006: LD_ADDR_VAR 0 6
9010: PUSH
9011: LD_INT 22
9013: PUSH
9014: LD_VAR 0 1
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: LD_INT 25
9025: PUSH
9026: LD_INT 4
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PUSH
9033: LD_INT 24
9035: PUSH
9036: LD_INT 250
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: LIST
9047: PPUSH
9048: CALL_OW 69
9052: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9053: LD_ADDR_VAR 0 9
9057: PUSH
9058: LD_VAR 0 3
9062: PPUSH
9063: LD_INT 22
9065: PUSH
9066: LD_VAR 0 1
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: PUSH
9075: LD_INT 21
9077: PUSH
9078: LD_INT 1
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: PUSH
9085: LD_INT 3
9087: PUSH
9088: LD_INT 24
9090: PUSH
9091: LD_INT 650
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: PPUSH
9107: CALL_OW 70
9111: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9112: LD_VAR 0 9
9116: PUSH
9117: LD_INT 0
9119: GREATER
9120: PUSH
9121: LD_VAR 0 6
9125: PUSH
9126: LD_INT 0
9128: GREATER
9129: AND
9130: IFFALSE 9257
// begin for i = 1 to damageUnits do
9132: LD_ADDR_VAR 0 7
9136: PUSH
9137: DOUBLE
9138: LD_INT 1
9140: DEC
9141: ST_TO_ADDR
9142: LD_VAR 0 9
9146: PUSH
9147: FOR_TO
9148: IFFALSE 9172
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9150: LD_VAR 0 9
9154: PUSH
9155: LD_VAR 0 7
9159: ARRAY
9160: PPUSH
9161: LD_VAR 0 2
9165: PPUSH
9166: CALL_OW 113
9170: GO 9147
9172: POP
9173: POP
// for i in sci_list do
9174: LD_ADDR_VAR 0 7
9178: PUSH
9179: LD_VAR 0 6
9183: PUSH
9184: FOR_IN
9185: IFFALSE 9253
// begin ComExitBuilding ( i ) ;
9187: LD_VAR 0 7
9191: PPUSH
9192: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9196: LD_ADDR_VAR 0 8
9200: PUSH
9201: LD_VAR 0 2
9205: PPUSH
9206: LD_INT 22
9208: PUSH
9209: LD_VAR 0 1
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PPUSH
9218: CALL_OW 70
9222: PUSH
9223: FOR_IN
9224: IFFALSE 9249
// begin AddComHeal ( i , j ) ;
9226: LD_VAR 0 7
9230: PPUSH
9231: LD_VAR 0 8
9235: PPUSH
9236: CALL_OW 188
// wait ( 1 1$0 ) ;
9240: LD_INT 2100
9242: PPUSH
9243: CALL_OW 67
// end ;
9247: GO 9223
9249: POP
9250: POP
// end ;
9251: GO 9184
9253: POP
9254: POP
// end else
9255: GO 9271
// begin AddComEnterUnit ( sci_list , build ) ;
9257: LD_VAR 0 6
9261: PPUSH
9262: LD_VAR 0 4
9266: PPUSH
9267: CALL_OW 180
// end ; end ;
9271: LD_VAR 0 5
9275: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9276: LD_INT 0
9278: PPUSH
9279: PPUSH
9280: PPUSH
9281: PPUSH
9282: PPUSH
9283: PPUSH
9284: PPUSH
9285: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9286: LD_ADDR_VAR 0 7
9290: PUSH
9291: LD_VAR 0 3
9295: PPUSH
9296: LD_INT 22
9298: PUSH
9299: LD_VAR 0 1
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: LD_INT 21
9310: PUSH
9311: LD_INT 2
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: PUSH
9318: LD_INT 24
9320: PUSH
9321: LD_INT 550
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PUSH
9328: LD_INT 34
9330: PUSH
9331: LD_INT 46
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: PPUSH
9344: CALL_OW 70
9348: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9349: LD_ADDR_VAR 0 8
9353: PUSH
9354: LD_VAR 0 3
9358: PPUSH
9359: LD_INT 22
9361: PUSH
9362: LD_VAR 0 1
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 21
9373: PUSH
9374: LD_INT 2
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 34
9383: PUSH
9384: LD_INT 46
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 3
9393: PUSH
9394: LD_INT 24
9396: PUSH
9397: LD_INT 550
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: PPUSH
9414: CALL_OW 70
9418: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9419: LD_ADDR_VAR 0 9
9423: PUSH
9424: LD_VAR 0 2
9428: PPUSH
9429: LD_INT 22
9431: PUSH
9432: LD_VAR 0 1
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: LD_INT 21
9443: PUSH
9444: LD_INT 2
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PUSH
9451: LD_INT 34
9453: PUSH
9454: LD_INT 46
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: PUSH
9461: LD_INT 24
9463: PUSH
9464: LD_INT 1000
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PUSH
9471: LD_INT 58
9473: PUSH
9474: EMPTY
9475: LIST
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 70
9488: ST_TO_ADDR
// for i in damageVehicle_list do
9489: LD_ADDR_VAR 0 5
9493: PUSH
9494: LD_VAR 0 8
9498: PUSH
9499: FOR_IN
9500: IFFALSE 9519
// mechanicInside_list = UnitsInside ( i ) ;
9502: LD_ADDR_VAR 0 10
9506: PUSH
9507: LD_VAR 0 5
9511: PPUSH
9512: CALL_OW 313
9516: ST_TO_ADDR
9517: GO 9499
9519: POP
9520: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9521: LD_ADDR_VAR 0 11
9525: PUSH
9526: LD_VAR 0 2
9530: PPUSH
9531: LD_INT 22
9533: PUSH
9534: LD_VAR 0 1
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PUSH
9543: LD_INT 25
9545: PUSH
9546: LD_INT 3
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PPUSH
9557: CALL_OW 70
9561: ST_TO_ADDR
// if damageVehicle_list > 0 then
9562: LD_VAR 0 8
9566: PUSH
9567: LD_INT 0
9569: GREATER
9570: IFFALSE 9643
// begin for i in damageVehicle_list do
9572: LD_ADDR_VAR 0 5
9576: PUSH
9577: LD_VAR 0 8
9581: PUSH
9582: FOR_IN
9583: IFFALSE 9641
// begin for j in mechanicInside_list do
9585: LD_ADDR_VAR 0 6
9589: PUSH
9590: LD_VAR 0 10
9594: PUSH
9595: FOR_IN
9596: IFFALSE 9637
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9598: LD_VAR 0 8
9602: PPUSH
9603: LD_VAR 0 2
9607: PPUSH
9608: CALL_OW 113
// AddComExitVehicle ( j ) ;
9612: LD_VAR 0 6
9616: PPUSH
9617: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9621: LD_VAR 0 6
9625: PPUSH
9626: LD_VAR 0 5
9630: PPUSH
9631: CALL_OW 189
// end ;
9635: GO 9595
9637: POP
9638: POP
// end ;
9639: GO 9582
9641: POP
9642: POP
// end ; if emptyVehicle_list > 0 then
9643: LD_VAR 0 9
9647: PUSH
9648: LD_INT 0
9650: GREATER
9651: IFFALSE 9701
// begin for i in emptyVehicle_list do
9653: LD_ADDR_VAR 0 5
9657: PUSH
9658: LD_VAR 0 9
9662: PUSH
9663: FOR_IN
9664: IFFALSE 9699
// begin for j in mechanicOutside_list do
9666: LD_ADDR_VAR 0 6
9670: PUSH
9671: LD_VAR 0 11
9675: PUSH
9676: FOR_IN
9677: IFFALSE 9695
// begin AddComEnterUnit ( j , i ) ;
9679: LD_VAR 0 6
9683: PPUSH
9684: LD_VAR 0 5
9688: PPUSH
9689: CALL_OW 180
// end ;
9693: GO 9676
9695: POP
9696: POP
// end ;
9697: GO 9663
9699: POP
9700: POP
// end ; if VehicleOK_list > 0 then
9701: LD_VAR 0 7
9705: PUSH
9706: LD_INT 0
9708: GREATER
9709: IFFALSE 9743
// begin for i in VehicleOK_list do
9711: LD_ADDR_VAR 0 5
9715: PUSH
9716: LD_VAR 0 7
9720: PUSH
9721: FOR_IN
9722: IFFALSE 9741
// ComAgressiveMove ( i , 110 , 29 ) ;
9724: LD_VAR 0 5
9728: PPUSH
9729: LD_INT 110
9731: PPUSH
9732: LD_INT 29
9734: PPUSH
9735: CALL_OW 114
9739: GO 9721
9741: POP
9742: POP
// end ; end ;
9743: LD_VAR 0 4
9747: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9748: LD_INT 0
9750: PPUSH
9751: PPUSH
9752: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9753: LD_VAR 0 1
9757: PPUSH
9758: LD_INT 22
9760: PUSH
9761: LD_VAR 0 2
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PUSH
9770: LD_INT 2
9772: PUSH
9773: LD_INT 21
9775: PUSH
9776: LD_INT 2
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 21
9785: PUSH
9786: LD_INT 1
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: LIST
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: PPUSH
9802: CALL_OW 70
9806: PUSH
9807: LD_VAR 0 5
9811: GREATER
9812: IFFALSE 9944
// begin for i in defendersList do
9814: LD_ADDR_VAR 0 7
9818: PUSH
9819: LD_VAR 0 3
9823: PUSH
9824: FOR_IN
9825: IFFALSE 9940
// begin AddComExitBuilding ( i ) ;
9827: LD_VAR 0 7
9831: PPUSH
9832: CALL_OW 182
// wait ( 0 0$1 ) ;
9836: LD_INT 35
9838: PPUSH
9839: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9843: LD_ADDR_VAR 0 8
9847: PUSH
9848: LD_VAR 0 1
9852: PPUSH
9853: LD_INT 22
9855: PUSH
9856: LD_VAR 0 2
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 2
9867: PUSH
9868: LD_INT 21
9870: PUSH
9871: LD_INT 2
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: PUSH
9878: LD_INT 21
9880: PUSH
9881: LD_INT 1
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PPUSH
9897: CALL_OW 70
9901: PUSH
9902: FOR_IN
9903: IFFALSE 9936
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9905: LD_VAR 0 7
9909: PPUSH
9910: LD_VAR 0 8
9914: PPUSH
9915: CALL_OW 250
9919: PPUSH
9920: LD_VAR 0 8
9924: PPUSH
9925: CALL_OW 251
9929: PPUSH
9930: CALL_OW 174
9934: GO 9902
9936: POP
9937: POP
// end ;
9938: GO 9824
9940: POP
9941: POP
// end else
9942: GO 9975
// begin for i in defendersList do
9944: LD_ADDR_VAR 0 7
9948: PUSH
9949: LD_VAR 0 3
9953: PUSH
9954: FOR_IN
9955: IFFALSE 9973
// ComEnterUnit ( i , build ) ;
9957: LD_VAR 0 7
9961: PPUSH
9962: LD_VAR 0 4
9966: PPUSH
9967: CALL_OW 120
9971: GO 9954
9973: POP
9974: POP
// end ; end ;
9975: LD_VAR 0 6
9979: RET
// export function RussianTrap ; var i ; begin
9980: LD_INT 0
9982: PPUSH
9983: PPUSH
// if GetSide ( Brian ) = 4 then
9984: LD_EXP 6
9988: PPUSH
9989: CALL_OW 255
9993: PUSH
9994: LD_INT 4
9996: EQUAL
9997: IFFALSE 10020
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9999: LD_EXP 6
10003: PUSH
10004: LD_EXP 7
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: LD_INT 0
10015: PPUSH
10016: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_INT 3
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 21
10037: PUSH
10038: LD_INT 1
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PPUSH
10049: CALL_OW 69
10053: PUSH
10054: FOR_IN
10055: IFFALSE 10165
// begin ComExitBuilding ( i ) ;
10057: LD_VAR 0 2
10061: PPUSH
10062: CALL_OW 122
// wait ( 0 0$1 ) ;
10066: LD_INT 35
10068: PPUSH
10069: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10073: LD_VAR 0 2
10077: PPUSH
10078: LD_INT 120
10080: PPUSH
10081: LD_INT 56
10083: PPUSH
10084: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_INT 111
10095: PPUSH
10096: LD_INT 37
10098: PPUSH
10099: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10103: LD_INT 33
10105: PPUSH
10106: CALL_OW 255
10110: PUSH
10111: LD_INT 3
10113: EQUAL
10114: PUSH
10115: LD_INT 33
10117: PPUSH
10118: CALL_OW 302
10122: AND
10123: IFFALSE 10139
// begin AddComEnterUnit ( i , arm2 ) ;
10125: LD_VAR 0 2
10129: PPUSH
10130: LD_INT 33
10132: PPUSH
10133: CALL_OW 180
// end else
10137: GO 10163
// begin AddComCrawl ( i ) ;
10139: LD_VAR 0 2
10143: PPUSH
10144: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10148: LD_VAR 0 2
10152: PPUSH
10153: LD_INT 109
10155: PPUSH
10156: LD_INT 30
10158: PPUSH
10159: CALL_OW 174
// end ; end ;
10163: GO 10054
10165: POP
10166: POP
// end ;
10167: LD_VAR 0 1
10171: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10172: LD_INT 0
10174: PPUSH
10175: PPUSH
10176: PPUSH
10177: PPUSH
10178: PPUSH
// nearest_dist = 1000 ;
10179: LD_ADDR_VAR 0 4
10183: PUSH
10184: LD_INT 1000
10186: ST_TO_ADDR
// nearest_un = un ;
10187: LD_ADDR_VAR 0 5
10191: PUSH
10192: LD_VAR 0 1
10196: ST_TO_ADDR
// for sold in units do
10197: LD_ADDR_VAR 0 6
10201: PUSH
10202: LD_VAR 0 2
10206: PUSH
10207: FOR_IN
10208: IFFALSE 10264
// begin dist = GetDistUnits ( un , sold ) ;
10210: LD_ADDR_VAR 0 7
10214: PUSH
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_VAR 0 6
10224: PPUSH
10225: CALL_OW 296
10229: ST_TO_ADDR
// if dist < nearest_dist then
10230: LD_VAR 0 7
10234: PUSH
10235: LD_VAR 0 4
10239: LESS
10240: IFFALSE 10262
// begin nearest_un = sold ;
10242: LD_ADDR_VAR 0 5
10246: PUSH
10247: LD_VAR 0 6
10251: ST_TO_ADDR
// nearest_dist = dist ;
10252: LD_ADDR_VAR 0 4
10256: PUSH
10257: LD_VAR 0 7
10261: ST_TO_ADDR
// end ; end ;
10262: GO 10207
10264: POP
10265: POP
// result := nearest_un ;
10266: LD_ADDR_VAR 0 3
10270: PUSH
10271: LD_VAR 0 5
10275: ST_TO_ADDR
// end ;
10276: LD_VAR 0 3
10280: RET
// export function PrepareDifficulty ; begin
10281: LD_INT 0
10283: PPUSH
// if Difficulty = 1 then
10284: LD_OWVAR 67
10288: PUSH
10289: LD_INT 1
10291: EQUAL
10292: IFFALSE 10355
// begin RemoveUnit ( brw2 ) ;
10294: LD_INT 9
10296: PPUSH
10297: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10301: LD_INT 30
10303: PPUSH
10304: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10308: LD_INT 52
10310: PPUSH
10311: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10315: LD_INT 63
10317: PPUSH
10318: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10322: LD_INT 5
10324: PUSH
10325: LD_INT 4
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: LD_INT 60
10334: PPUSH
10335: CALL_OW 240
// RuSoldMinLevel = 0 ;
10339: LD_ADDR_EXP 13
10343: PUSH
10344: LD_INT 0
10346: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10347: LD_ADDR_EXP 14
10351: PUSH
10352: LD_INT 1
10354: ST_TO_ADDR
// end ; if Difficulty = 2 then
10355: LD_OWVAR 67
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: IFFALSE 10405
// begin RemoveUnit ( brw4 ) ;
10365: LD_INT 52
10367: PPUSH
10368: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10372: LD_INT 5
10374: PUSH
10375: LD_INT 4
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: LD_INT 50
10384: PPUSH
10385: CALL_OW 240
// RuSoldMinLevel = 1 ;
10389: LD_ADDR_EXP 13
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10397: LD_ADDR_EXP 14
10401: PUSH
10402: LD_INT 2
10404: ST_TO_ADDR
// end ; if Difficulty = 3 then
10405: LD_OWVAR 67
10409: PUSH
10410: LD_INT 3
10412: EQUAL
10413: IFFALSE 10448
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10415: LD_INT 5
10417: PUSH
10418: LD_INT 4
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PPUSH
10425: LD_INT 40
10427: PPUSH
10428: CALL_OW 240
// RuSoldMinLevel = 2 ;
10432: LD_ADDR_EXP 13
10436: PUSH
10437: LD_INT 2
10439: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10440: LD_ADDR_EXP 14
10444: PUSH
10445: LD_INT 3
10447: ST_TO_ADDR
// end ; end ;
10448: LD_VAR 0 1
10452: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10453: LD_INT 0
10455: PPUSH
10456: PPUSH
10457: PPUSH
// tmp = [ ] ;
10458: LD_ADDR_VAR 0 5
10462: PUSH
10463: EMPTY
10464: ST_TO_ADDR
// if not vehicles then
10465: LD_VAR 0 1
10469: NOT
10470: IFFALSE 10474
// exit ;
10472: GO 10591
// for i in vehicles do
10474: LD_ADDR_VAR 0 4
10478: PUSH
10479: LD_VAR 0 1
10483: PUSH
10484: FOR_IN
10485: IFFALSE 10575
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10487: LD_ADDR_VAR 0 5
10491: PUSH
10492: LD_VAR 0 5
10496: PPUSH
10497: LD_INT 1
10499: PPUSH
10500: LD_VAR 0 4
10504: PPUSH
10505: CALL_OW 265
10509: PUSH
10510: LD_VAR 0 4
10514: PPUSH
10515: CALL_OW 262
10519: PUSH
10520: LD_VAR 0 4
10524: PPUSH
10525: CALL_OW 263
10529: PUSH
10530: LD_VAR 0 4
10534: PPUSH
10535: CALL_OW 264
10539: PUSH
10540: LD_VAR 0 4
10544: PPUSH
10545: CALL_OW 261
10549: PUSH
10550: LD_VAR 0 4
10554: PPUSH
10555: CALL_OW 256
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: PPUSH
10568: CALL_OW 2
10572: ST_TO_ADDR
// end ;
10573: GO 10484
10575: POP
10576: POP
// SaveVariable ( tmp , ident ) ;
10577: LD_VAR 0 5
10581: PPUSH
10582: LD_VAR 0 2
10586: PPUSH
10587: CALL_OW 39
// end ; end_of_file
10591: LD_VAR 0 3
10595: RET
// export function PrepareHeroes ; begin
10596: LD_INT 0
10598: PPUSH
// uc_side = 1 ;
10599: LD_ADDR_OWVAR 20
10603: PUSH
10604: LD_INT 1
10606: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10607: LD_ADDR_EXP 1
10611: PUSH
10612: LD_STRING 01_JMM
10614: PPUSH
10615: CALL_OW 34
10619: ST_TO_ADDR
// SetLives ( JMM , LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ) ;
10620: LD_EXP 1
10624: PPUSH
10625: LD_STRING 01_JMMLifePoints_1
10627: PPUSH
10628: LD_INT 1000
10630: PPUSH
10631: CALL_OW 30
10635: PPUSH
10636: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10640: LD_ADDR_EXP 9
10644: PUSH
10645: LD_STRING Powell
10647: PPUSH
10648: CALL_OW 25
10652: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10653: LD_ADDR_EXP 2
10657: PUSH
10658: LD_STRING 01_Bobby
10660: PPUSH
10661: CALL_OW 34
10665: ST_TO_ADDR
// if Bobby then
10666: LD_EXP 2
10670: IFFALSE 10692
// SetLives ( Bobby , LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ) ;
10672: LD_EXP 2
10676: PPUSH
10677: LD_STRING 01_BobbyLifePoints_1
10679: PPUSH
10680: LD_INT 1000
10682: PPUSH
10683: CALL_OW 30
10687: PPUSH
10688: CALL_OW 234
// Cyrus = CreateCharacter ( 01_Cyrus ) ;
10692: LD_ADDR_EXP 3
10696: PUSH
10697: LD_STRING 01_Cyrus
10699: PPUSH
10700: CALL_OW 34
10704: ST_TO_ADDR
// if Cyrus then
10705: LD_EXP 3
10709: IFFALSE 10731
// SetLives ( Cyrus , LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ) ;
10711: LD_EXP 3
10715: PPUSH
10716: LD_STRING 01_CyrusLifePoints_1
10718: PPUSH
10719: LD_INT 1000
10721: PPUSH
10722: CALL_OW 30
10726: PPUSH
10727: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
10731: LD_ADDR_EXP 5
10735: PUSH
10736: LD_STRING Khatam
10738: PPUSH
10739: CALL_OW 25
10743: ST_TO_ADDR
// uc_side = 4 ;
10744: LD_ADDR_OWVAR 20
10748: PUSH
10749: LD_INT 4
10751: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10752: LD_ADDR_EXP 4
10756: PUSH
10757: LD_STRING Lisa
10759: PPUSH
10760: CALL_OW 25
10764: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10765: LD_EXP 1
10769: PPUSH
10770: LD_INT 3
10772: PPUSH
10773: LD_INT 0
10775: PPUSH
10776: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10780: LD_EXP 2
10784: PPUSH
10785: LD_INT 3
10787: PPUSH
10788: LD_INT 0
10790: PPUSH
10791: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10795: LD_EXP 3
10799: PPUSH
10800: LD_INT 3
10802: PPUSH
10803: LD_INT 0
10805: PPUSH
10806: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10810: LD_EXP 4
10814: PPUSH
10815: LD_INT 5
10817: PPUSH
10818: LD_INT 0
10820: PPUSH
10821: CALL_OW 49
// ComCrawl ( Lisa ) ;
10825: LD_EXP 4
10829: PPUSH
10830: CALL_OW 137
// end ;
10834: LD_VAR 0 1
10838: RET
// export function PrepareLisSquad ; var i , un ; begin
10839: LD_INT 0
10841: PPUSH
10842: PPUSH
10843: PPUSH
// uc_side = 4 ;
10844: LD_ADDR_OWVAR 20
10848: PUSH
10849: LD_INT 4
10851: ST_TO_ADDR
// uc_nation = 1 ;
10852: LD_ADDR_OWVAR 21
10856: PUSH
10857: LD_INT 1
10859: ST_TO_ADDR
// hc_class := 2 ;
10860: LD_ADDR_OWVAR 28
10864: PUSH
10865: LD_INT 2
10867: ST_TO_ADDR
// hc_sex := sex_male ;
10868: LD_ADDR_OWVAR 27
10872: PUSH
10873: LD_INT 1
10875: ST_TO_ADDR
// hc_gallery :=  ;
10876: LD_ADDR_OWVAR 33
10880: PUSH
10881: LD_STRING 
10883: ST_TO_ADDR
// hc_name :=  ;
10884: LD_ADDR_OWVAR 26
10888: PUSH
10889: LD_STRING 
10891: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10892: LD_ADDR_OWVAR 30
10896: PUSH
10897: LD_INT 0
10899: PUSH
10900: LD_INT 1
10902: PUSH
10903: LD_INT 0
10905: PUSH
10906: LD_INT 0
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
10915: LD_ADDR_OWVAR 31
10919: PUSH
10920: LD_INT 1
10922: PUSH
10923: LD_INT 2
10925: PUSH
10926: LD_INT 0
10928: PUSH
10929: LD_INT 0
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: ST_TO_ADDR
// un := CreateHuman ;
10938: LD_ADDR_VAR 0 3
10942: PUSH
10943: CALL_OW 44
10947: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10948: LD_VAR 0 3
10952: PPUSH
10953: LD_INT 6
10955: PPUSH
10956: LD_INT 0
10958: PPUSH
10959: CALL_OW 49
// hc_sex := sex_female ;
10963: LD_ADDR_OWVAR 27
10967: PUSH
10968: LD_INT 2
10970: ST_TO_ADDR
// hc_gallery :=  ;
10971: LD_ADDR_OWVAR 33
10975: PUSH
10976: LD_STRING 
10978: ST_TO_ADDR
// hc_name :=  ;
10979: LD_ADDR_OWVAR 26
10983: PUSH
10984: LD_STRING 
10986: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
10987: LD_ADDR_OWVAR 30
10991: PUSH
10992: LD_INT 0
10994: PUSH
10995: LD_INT 0
10997: PUSH
10998: LD_INT 0
11000: PUSH
11001: LD_INT 1
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11010: LD_ADDR_OWVAR 31
11014: PUSH
11015: LD_INT 0
11017: PUSH
11018: LD_INT 1
11020: PUSH
11021: LD_INT 0
11023: PUSH
11024: LD_INT 1
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: ST_TO_ADDR
// un := CreateHuman ;
11033: LD_ADDR_VAR 0 3
11037: PUSH
11038: CALL_OW 44
11042: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11043: LD_VAR 0 3
11047: PPUSH
11048: LD_INT 6
11050: PPUSH
11051: LD_INT 0
11053: PPUSH
11054: CALL_OW 49
// if not Bobby and not Cyrus then
11058: LD_EXP 2
11062: NOT
11063: PUSH
11064: LD_EXP 3
11068: NOT
11069: AND
11070: IFFALSE 11175
// begin hc_class := 1 ;
11072: LD_ADDR_OWVAR 28
11076: PUSH
11077: LD_INT 1
11079: ST_TO_ADDR
// hc_sex := sex_male ;
11080: LD_ADDR_OWVAR 27
11084: PUSH
11085: LD_INT 1
11087: ST_TO_ADDR
// hc_gallery :=  ;
11088: LD_ADDR_OWVAR 33
11092: PUSH
11093: LD_STRING 
11095: ST_TO_ADDR
// hc_name :=  ;
11096: LD_ADDR_OWVAR 26
11100: PUSH
11101: LD_STRING 
11103: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11104: LD_ADDR_OWVAR 30
11108: PUSH
11109: LD_INT 2
11111: PUSH
11112: LD_INT 3
11114: PUSH
11115: LD_INT 1
11117: PUSH
11118: LD_INT 0
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11127: LD_ADDR_OWVAR 31
11131: PUSH
11132: LD_INT 2
11134: PUSH
11135: LD_INT 3
11137: PUSH
11138: LD_INT 1
11140: PUSH
11141: LD_INT 0
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: ST_TO_ADDR
// un := CreateHuman ;
11150: LD_ADDR_VAR 0 3
11154: PUSH
11155: CALL_OW 44
11159: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11160: LD_VAR 0 3
11164: PPUSH
11165: LD_INT 31
11167: PPUSH
11168: LD_INT 0
11170: PPUSH
11171: CALL_OW 49
// end ; InitHc ;
11175: CALL_OW 19
// end ;
11179: LD_VAR 0 1
11183: RET
// export function PrepareOtherAmericans ; begin
11184: LD_INT 0
11186: PPUSH
// uc_side = 4 ;
11187: LD_ADDR_OWVAR 20
11191: PUSH
11192: LD_INT 4
11194: ST_TO_ADDR
// uc_nation = 1 ;
11195: LD_ADDR_OWVAR 21
11199: PUSH
11200: LD_INT 1
11202: ST_TO_ADDR
// hc_gallery =  ;
11203: LD_ADDR_OWVAR 33
11207: PUSH
11208: LD_STRING 
11210: ST_TO_ADDR
// hc_name = Brian Garvin ;
11211: LD_ADDR_OWVAR 26
11215: PUSH
11216: LD_STRING Brian Garvin
11218: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11219: LD_INT 1
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: LD_INT 1
11227: PPUSH
11228: LD_INT 2
11230: PPUSH
11231: CALL_OW 12
11235: PPUSH
11236: CALL_OW 380
// Brian = CreateHuman ;
11240: LD_ADDR_EXP 6
11244: PUSH
11245: CALL_OW 44
11249: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11250: LD_EXP 6
11254: PPUSH
11255: LD_INT 10
11257: PPUSH
11258: LD_INT 0
11260: PPUSH
11261: CALL_OW 49
// hc_name = Jerry White ;
11265: LD_ADDR_OWVAR 26
11269: PUSH
11270: LD_STRING Jerry White
11272: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11273: LD_INT 1
11275: PPUSH
11276: LD_INT 3
11278: PPUSH
11279: LD_INT 1
11281: PPUSH
11282: LD_INT 2
11284: PPUSH
11285: CALL_OW 12
11289: PPUSH
11290: CALL_OW 380
// Jerry = CreateHuman ;
11294: LD_ADDR_EXP 7
11298: PUSH
11299: CALL_OW 44
11303: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11304: LD_EXP 7
11308: PPUSH
11309: LD_INT 10
11311: PPUSH
11312: LD_INT 0
11314: PPUSH
11315: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11319: LD_EXP 6
11323: PUSH
11324: LD_EXP 7
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PPUSH
11333: CALL_OW 140
// end ;
11337: LD_VAR 0 1
11341: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11342: LD_INT 0
11344: PPUSH
11345: PPUSH
11346: PPUSH
// for i = 1 to 6 do
11347: LD_ADDR_VAR 0 2
11351: PUSH
11352: DOUBLE
11353: LD_INT 1
11355: DEC
11356: ST_TO_ADDR
11357: LD_INT 6
11359: PUSH
11360: FOR_TO
11361: IFFALSE 11455
// begin uc_side = 4 ;
11363: LD_ADDR_OWVAR 20
11367: PUSH
11368: LD_INT 4
11370: ST_TO_ADDR
// uc_nation = 1 ;
11371: LD_ADDR_OWVAR 21
11375: PUSH
11376: LD_INT 1
11378: ST_TO_ADDR
// hc_gallery =  ;
11379: LD_ADDR_OWVAR 33
11383: PUSH
11384: LD_STRING 
11386: ST_TO_ADDR
// hc_name =  ;
11387: LD_ADDR_OWVAR 26
11391: PUSH
11392: LD_STRING 
11394: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11395: LD_INT 0
11397: PPUSH
11398: LD_INT 1
11400: PPUSH
11401: LD_INT 4
11403: PPUSH
11404: CALL_OW 12
11408: PPUSH
11409: LD_INT 1
11411: PPUSH
11412: CALL_OW 380
// un = CreateHuman ;
11416: LD_ADDR_VAR 0 3
11420: PUSH
11421: CALL_OW 44
11425: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11426: LD_VAR 0 3
11430: PPUSH
11431: LD_INT 16
11433: PPUSH
11434: LD_INT 0
11436: PPUSH
11437: CALL_OW 49
// SetLives ( un , 1 ) ;
11441: LD_VAR 0 3
11445: PPUSH
11446: LD_INT 1
11448: PPUSH
11449: CALL_OW 234
// end ;
11453: GO 11360
11455: POP
11456: POP
// DyingSold = CreateHuman ;
11457: LD_ADDR_EXP 34
11461: PUSH
11462: CALL_OW 44
11466: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11467: LD_EXP 34
11471: PPUSH
11472: LD_INT 16
11474: PPUSH
11475: LD_INT 0
11477: PPUSH
11478: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11482: LD_EXP 34
11486: PPUSH
11487: LD_INT 250
11489: PPUSH
11490: CALL_OW 234
// end ; end_of_file
11494: LD_VAR 0 1
11498: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11499: LD_INT 0
11501: PPUSH
11502: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) ;
11503: LD_ADDR_VAR 0 2
11507: PUSH
11508: LD_INT 22
11510: PUSH
11511: LD_INT 1
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 23
11520: PUSH
11521: LD_INT 1
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 25
11530: PUSH
11531: LD_INT 2
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: LIST
11542: PPUSH
11543: CALL_OW 69
11547: ST_TO_ADDR
// uc_side = 6 ;
11548: LD_ADDR_OWVAR 20
11552: PUSH
11553: LD_INT 6
11555: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11556: LD_ADDR_EXP 8
11560: PUSH
11561: LD_STRING Mikhail
11563: PPUSH
11564: CALL_OW 25
11568: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
11569: LD_EXP 8
11573: PPUSH
11574: LD_VAR 0 2
11578: PUSH
11579: LD_INT 1
11581: ARRAY
11582: PPUSH
11583: CALL_OW 250
11587: PPUSH
11588: LD_VAR 0 2
11592: PUSH
11593: LD_INT 1
11595: ARRAY
11596: PPUSH
11597: CALL_OW 251
11601: PPUSH
11602: LD_INT 3
11604: PPUSH
11605: LD_INT 1
11607: PPUSH
11608: CALL_OW 50
// end ;
11612: LD_VAR 0 1
11616: RET
// export function PrepareRussianCommander ; begin
11617: LD_INT 0
11619: PPUSH
// uc_side = 3 ;
11620: LD_ADDR_OWVAR 20
11624: PUSH
11625: LD_INT 3
11627: ST_TO_ADDR
// uc_nation = 3 ;
11628: LD_ADDR_OWVAR 21
11632: PUSH
11633: LD_INT 3
11635: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11636: LD_ADDR_EXP 19
11640: PUSH
11641: LD_STRING Natasza
11643: PPUSH
11644: CALL_OW 25
11648: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11649: LD_EXP 19
11653: PPUSH
11654: LD_INT 24
11656: PPUSH
11657: LD_INT 0
11659: PPUSH
11660: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11664: LD_EXP 19
11668: PPUSH
11669: LD_INT 56
11671: PPUSH
11672: LD_INT 16
11674: PPUSH
11675: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11679: LD_ADDR_EXP 24
11683: PUSH
11684: LD_EXP 24
11688: PUSH
11689: LD_EXP 19
11693: ADD
11694: ST_TO_ADDR
// end ;
11695: LD_VAR 0 1
11699: RET
// export function PrepareSouthBase ; var i , un ; begin
11700: LD_INT 0
11702: PPUSH
11703: PPUSH
11704: PPUSH
// for i = 1 to 2 do
11705: LD_ADDR_VAR 0 2
11709: PUSH
11710: DOUBLE
11711: LD_INT 1
11713: DEC
11714: ST_TO_ADDR
11715: LD_INT 2
11717: PUSH
11718: FOR_TO
11719: IFFALSE 11828
// begin uc_side = 3 ;
11721: LD_ADDR_OWVAR 20
11725: PUSH
11726: LD_INT 3
11728: ST_TO_ADDR
// uc_nation = 3 ;
11729: LD_ADDR_OWVAR 21
11733: PUSH
11734: LD_INT 3
11736: ST_TO_ADDR
// hc_gallery =  ;
11737: LD_ADDR_OWVAR 33
11741: PUSH
11742: LD_STRING 
11744: ST_TO_ADDR
// hc_name =  ;
11745: LD_ADDR_OWVAR 26
11749: PUSH
11750: LD_STRING 
11752: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11753: LD_INT 1
11755: PPUSH
11756: LD_INT 1
11758: PPUSH
11759: LD_EXP 13
11763: PPUSH
11764: LD_EXP 14
11768: PPUSH
11769: CALL_OW 12
11773: PPUSH
11774: CALL_OW 380
// hc_importance = 0 ;
11778: LD_ADDR_OWVAR 32
11782: PUSH
11783: LD_INT 0
11785: ST_TO_ADDR
// un = CreateHuman ;
11786: LD_ADDR_VAR 0 3
11790: PUSH
11791: CALL_OW 44
11795: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11796: LD_VAR 0 3
11800: PPUSH
11801: LD_INT 11
11803: PPUSH
11804: LD_INT 0
11806: PPUSH
11807: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11811: LD_VAR 0 3
11815: PPUSH
11816: LD_INT 111
11818: PPUSH
11819: LD_INT 38
11821: PPUSH
11822: CALL_OW 118
// end ;
11826: GO 11718
11828: POP
11829: POP
// for i = 1 to Difficulty do
11830: LD_ADDR_VAR 0 2
11834: PUSH
11835: DOUBLE
11836: LD_INT 1
11838: DEC
11839: ST_TO_ADDR
11840: LD_OWVAR 67
11844: PUSH
11845: FOR_TO
11846: IFFALSE 11947
// begin uc_side = 3 ;
11848: LD_ADDR_OWVAR 20
11852: PUSH
11853: LD_INT 3
11855: ST_TO_ADDR
// uc_nation = 3 ;
11856: LD_ADDR_OWVAR 21
11860: PUSH
11861: LD_INT 3
11863: ST_TO_ADDR
// hc_gallery =  ;
11864: LD_ADDR_OWVAR 33
11868: PUSH
11869: LD_STRING 
11871: ST_TO_ADDR
// hc_name =  ;
11872: LD_ADDR_OWVAR 26
11876: PUSH
11877: LD_STRING 
11879: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11880: LD_INT 0
11882: PPUSH
11883: LD_INT 3
11885: PPUSH
11886: LD_EXP 13
11890: PPUSH
11891: LD_EXP 14
11895: PPUSH
11896: CALL_OW 12
11900: PPUSH
11901: CALL_OW 380
// un = CreateHuman ;
11905: LD_ADDR_VAR 0 3
11909: PUSH
11910: CALL_OW 44
11914: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
11915: LD_VAR 0 3
11919: PPUSH
11920: LD_INT 12
11922: PPUSH
11923: LD_INT 0
11925: PPUSH
11926: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
11930: LD_VAR 0 3
11934: PPUSH
11935: LD_INT 111
11937: PPUSH
11938: LD_INT 28
11940: PPUSH
11941: CALL_OW 118
// end ;
11945: GO 11845
11947: POP
11948: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
11949: LD_INT 3
11951: PPUSH
11952: LD_INT 3
11954: PPUSH
11955: LD_INT 33
11957: PPUSH
11958: LD_EXP 13
11962: PPUSH
11963: LD_EXP 14
11967: PPUSH
11968: CALL_OW 12
11972: PPUSH
11973: LD_INT 1
11975: PPUSH
11976: LD_INT 1
11978: PUSH
11979: LD_INT 1
11981: PPUSH
11982: LD_INT 2
11984: PPUSH
11985: CALL_OW 12
11989: PUSH
11990: LD_INT 1
11992: PPUSH
11993: LD_INT 2
11995: PPUSH
11996: CALL_OW 12
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: LIST
12005: PUSH
12006: LD_OWVAR 67
12010: ARRAY
12011: PPUSH
12012: CALL 8507 0 6
// for i in UnitsInside ( arm2 ) do
12016: LD_ADDR_VAR 0 2
12020: PUSH
12021: LD_INT 33
12023: PPUSH
12024: CALL_OW 313
12028: PUSH
12029: FOR_IN
12030: IFFALSE 12050
// southBaseDefenders = southBaseDefenders ^ i ;
12032: LD_ADDR_EXP 25
12036: PUSH
12037: LD_EXP 25
12041: PUSH
12042: LD_VAR 0 2
12046: ADD
12047: ST_TO_ADDR
12048: GO 12029
12050: POP
12051: POP
// end ;
12052: LD_VAR 0 1
12056: RET
// export function PrepareNorthBase ; var i , un ; begin
12057: LD_INT 0
12059: PPUSH
12060: PPUSH
12061: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12062: LD_ADDR_VAR 0 2
12066: PUSH
12067: DOUBLE
12068: LD_INT 1
12070: DEC
12071: ST_TO_ADDR
12072: LD_INT 1
12074: PPUSH
12075: LD_INT 2
12077: PPUSH
12078: CALL_OW 12
12082: PUSH
12083: LD_INT 2
12085: PPUSH
12086: LD_INT 3
12088: PPUSH
12089: CALL_OW 12
12093: PUSH
12094: LD_INT 3
12096: PPUSH
12097: LD_INT 4
12099: PPUSH
12100: CALL_OW 12
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: PUSH
12110: LD_OWVAR 67
12114: ARRAY
12115: PUSH
12116: FOR_TO
12117: IFFALSE 12203
// begin uc_side = 3 ;
12119: LD_ADDR_OWVAR 20
12123: PUSH
12124: LD_INT 3
12126: ST_TO_ADDR
// uc_nation = 3 ;
12127: LD_ADDR_OWVAR 21
12131: PUSH
12132: LD_INT 3
12134: ST_TO_ADDR
// hc_gallery =  ;
12135: LD_ADDR_OWVAR 33
12139: PUSH
12140: LD_STRING 
12142: ST_TO_ADDR
// hc_name =  ;
12143: LD_ADDR_OWVAR 26
12147: PUSH
12148: LD_STRING 
12150: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12151: LD_INT 0
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: LD_EXP 13
12161: PPUSH
12162: LD_EXP 14
12166: PPUSH
12167: CALL_OW 12
12171: PPUSH
12172: CALL_OW 380
// un = CreateHuman ;
12176: LD_ADDR_VAR 0 3
12180: PUSH
12181: CALL_OW 44
12185: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12186: LD_VAR 0 3
12190: PPUSH
12191: LD_INT 14
12193: PPUSH
12194: LD_INT 0
12196: PPUSH
12197: CALL_OW 49
// end ;
12201: GO 12116
12203: POP
12204: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12205: LD_INT 3
12207: PPUSH
12208: LD_INT 3
12210: PPUSH
12211: LD_INT 2
12213: PPUSH
12214: LD_EXP 13
12218: PPUSH
12219: LD_EXP 14
12223: PPUSH
12224: CALL_OW 12
12228: PPUSH
12229: LD_INT 1
12231: PPUSH
12232: LD_INT 1
12234: PPUSH
12235: LD_INT 2
12237: PPUSH
12238: CALL_OW 12
12242: PUSH
12243: LD_INT 1
12245: PPUSH
12246: LD_INT 3
12248: PPUSH
12249: CALL_OW 12
12253: PUSH
12254: LD_INT 1
12256: PPUSH
12257: LD_INT 3
12259: PPUSH
12260: CALL_OW 12
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: LIST
12269: PUSH
12270: LD_OWVAR 67
12274: ARRAY
12275: PPUSH
12276: CALL 8507 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12280: LD_INT 3
12282: PPUSH
12283: LD_INT 3
12285: PPUSH
12286: LD_INT 23
12288: PPUSH
12289: LD_EXP 13
12293: PPUSH
12294: LD_EXP 14
12298: PPUSH
12299: CALL_OW 12
12303: PPUSH
12304: LD_INT 4
12306: PPUSH
12307: LD_INT 0
12309: PUSH
12310: LD_INT 1
12312: PUSH
12313: LD_INT 2
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: PUSH
12321: LD_OWVAR 67
12325: ARRAY
12326: PPUSH
12327: CALL 8507 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12331: LD_INT 3
12333: PPUSH
12334: LD_INT 3
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: LD_EXP 13
12344: PPUSH
12345: LD_EXP 14
12349: PPUSH
12350: CALL_OW 12
12354: PPUSH
12355: LD_INT 2
12357: PPUSH
12358: LD_INT 1
12360: PUSH
12361: LD_INT 2
12363: PUSH
12364: LD_INT 2
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: LIST
12371: PUSH
12372: LD_OWVAR 67
12376: ARRAY
12377: PPUSH
12378: CALL 8507 0 6
// for i in UnitsInside ( arm1 ) do
12382: LD_ADDR_VAR 0 2
12386: PUSH
12387: LD_INT 2
12389: PPUSH
12390: CALL_OW 313
12394: PUSH
12395: FOR_IN
12396: IFFALSE 12416
// northBaseDefenders = northBaseDefenders ^ i ;
12398: LD_ADDR_EXP 24
12402: PUSH
12403: LD_EXP 24
12407: PUSH
12408: LD_VAR 0 2
12412: ADD
12413: ST_TO_ADDR
12414: GO 12395
12416: POP
12417: POP
// end ;
12418: LD_VAR 0 1
12422: RET
// export function PrepareOtherRussians ; var i , un ; begin
12423: LD_INT 0
12425: PPUSH
12426: PPUSH
12427: PPUSH
// for i = 1 to 2 do
12428: LD_ADDR_VAR 0 2
12432: PUSH
12433: DOUBLE
12434: LD_INT 1
12436: DEC
12437: ST_TO_ADDR
12438: LD_INT 2
12440: PUSH
12441: FOR_TO
12442: IFFALSE 12543
// begin uc_side = 3 ;
12444: LD_ADDR_OWVAR 20
12448: PUSH
12449: LD_INT 3
12451: ST_TO_ADDR
// uc_nation = 3 ;
12452: LD_ADDR_OWVAR 21
12456: PUSH
12457: LD_INT 3
12459: ST_TO_ADDR
// hc_gallery =  ;
12460: LD_ADDR_OWVAR 33
12464: PUSH
12465: LD_STRING 
12467: ST_TO_ADDR
// hc_name =  ;
12468: LD_ADDR_OWVAR 26
12472: PUSH
12473: LD_STRING 
12475: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12476: LD_INT 0
12478: PPUSH
12479: LD_INT 1
12481: PPUSH
12482: LD_EXP 13
12486: PPUSH
12487: LD_EXP 14
12491: PPUSH
12492: CALL_OW 12
12496: PPUSH
12497: CALL_OW 380
// un = CreateHuman ;
12501: LD_ADDR_VAR 0 3
12505: PUSH
12506: CALL_OW 44
12510: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12511: LD_VAR 0 3
12515: PPUSH
12516: LD_INT 9
12518: PPUSH
12519: LD_INT 0
12521: PPUSH
12522: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12526: LD_VAR 0 3
12530: PPUSH
12531: LD_INT 80
12533: PPUSH
12534: LD_INT 73
12536: PPUSH
12537: CALL_OW 118
// end ;
12541: GO 12441
12543: POP
12544: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12545: LD_ADDR_VAR 0 2
12549: PUSH
12550: LD_INT 22
12552: PUSH
12553: LD_INT 3
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 30
12562: PUSH
12563: LD_INT 31
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PPUSH
12574: CALL_OW 69
12578: PUSH
12579: FOR_IN
12580: IFFALSE 12608
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12582: LD_EXP 13
12586: PPUSH
12587: LD_EXP 14
12591: PPUSH
12592: CALL_OW 12
12596: PPUSH
12597: LD_VAR 0 2
12601: PPUSH
12602: CALL 8617 0 2
12606: GO 12579
12608: POP
12609: POP
// end ;
12610: LD_VAR 0 1
12614: RET
// export function PrepareCargoBays ; begin
12615: LD_INT 0
12617: PPUSH
// uc_side = 3 ;
12618: LD_ADDR_OWVAR 20
12622: PUSH
12623: LD_INT 3
12625: ST_TO_ADDR
// uc_nation = 3 ;
12626: LD_ADDR_OWVAR 21
12630: PUSH
12631: LD_INT 3
12633: ST_TO_ADDR
// vc_engine = 1 ;
12634: LD_ADDR_OWVAR 39
12638: PUSH
12639: LD_INT 1
12641: ST_TO_ADDR
// vc_control = 1 ;
12642: LD_ADDR_OWVAR 38
12646: PUSH
12647: LD_INT 1
12649: ST_TO_ADDR
// vc_weapon = 51 ;
12650: LD_ADDR_OWVAR 40
12654: PUSH
12655: LD_INT 51
12657: ST_TO_ADDR
// vc_chassis = 22 ;
12658: LD_ADDR_OWVAR 37
12662: PUSH
12663: LD_INT 22
12665: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12666: LD_ADDR_EXP 15
12670: PUSH
12671: CALL_OW 45
12675: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12676: LD_ADDR_EXP 16
12680: PUSH
12681: CALL_OW 45
12685: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12686: LD_EXP 15
12690: PPUSH
12691: LD_INT 13
12693: PPUSH
12694: LD_INT 0
12696: PPUSH
12697: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12701: LD_EXP 16
12705: PPUSH
12706: LD_INT 13
12708: PPUSH
12709: LD_INT 0
12711: PPUSH
12712: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12716: LD_EXP 15
12720: PPUSH
12721: LD_INT 2
12723: PPUSH
12724: LD_INT 70
12726: PUSH
12727: LD_INT 50
12729: PUSH
12730: LD_INT 30
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: PUSH
12738: LD_OWVAR 67
12742: ARRAY
12743: PPUSH
12744: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12748: LD_EXP 16
12752: PPUSH
12753: LD_INT 2
12755: PPUSH
12756: LD_INT 70
12758: PUSH
12759: LD_INT 50
12761: PUSH
12762: LD_INT 30
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: PUSH
12770: LD_OWVAR 67
12774: ARRAY
12775: PPUSH
12776: CALL_OW 291
// hc_gallery =  ;
12780: LD_ADDR_OWVAR 33
12784: PUSH
12785: LD_STRING 
12787: ST_TO_ADDR
// hc_name =  ;
12788: LD_ADDR_OWVAR 26
12792: PUSH
12793: LD_STRING 
12795: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12796: LD_INT 1
12798: PPUSH
12799: LD_INT 3
12801: PPUSH
12802: LD_INT 1
12804: PPUSH
12805: LD_INT 2
12807: PPUSH
12808: CALL_OW 12
12812: PPUSH
12813: CALL_OW 380
// driver1 = CreateHuman ;
12817: LD_ADDR_EXP 17
12821: PUSH
12822: CALL_OW 44
12826: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12827: LD_EXP 17
12831: PPUSH
12832: LD_EXP 15
12836: PPUSH
12837: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12841: LD_ADDR_OWVAR 26
12845: PUSH
12846: LD_STRING Nikolai Andreyev
12848: ST_TO_ADDR
// driver2 = CreateHuman ;
12849: LD_ADDR_EXP 18
12853: PUSH
12854: CALL_OW 44
12858: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12859: LD_EXP 18
12863: PPUSH
12864: LD_EXP 16
12868: PPUSH
12869: CALL_OW 52
// end ;
12873: LD_VAR 0 1
12877: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12878: LD_INT 0
12880: PPUSH
12881: PPUSH
12882: PPUSH
12883: PPUSH
12884: PPUSH
12885: PPUSH
12886: PPUSH
// uc_side = 3 ;
12887: LD_ADDR_OWVAR 20
12891: PUSH
12892: LD_INT 3
12894: ST_TO_ADDR
// uc_nation = 3 ;
12895: LD_ADDR_OWVAR 21
12899: PUSH
12900: LD_INT 3
12902: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
12903: LD_ADDR_VAR 0 4
12907: PUSH
12908: DOUBLE
12909: LD_INT 1
12911: DEC
12912: ST_TO_ADDR
12913: LD_VAR 0 1
12917: PUSH
12918: LD_INT 1
12920: PPUSH
12921: LD_INT 3
12923: PPUSH
12924: CALL_OW 12
12928: PLUS
12929: PUSH
12930: FOR_TO
12931: IFFALSE 13108
// begin vc_engine = 1 ;
12933: LD_ADDR_OWVAR 39
12937: PUSH
12938: LD_INT 1
12940: ST_TO_ADDR
// vc_control = 1 ;
12941: LD_ADDR_OWVAR 38
12945: PUSH
12946: LD_INT 1
12948: ST_TO_ADDR
// vc_weapon = 42 ;
12949: LD_ADDR_OWVAR 40
12953: PUSH
12954: LD_INT 42
12956: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
12957: LD_ADDR_OWVAR 37
12961: PUSH
12962: LD_INT 21
12964: PUSH
12965: LD_INT 22
12967: PUSH
12968: LD_INT 22
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: LIST
12975: PUSH
12976: LD_OWVAR 67
12980: ARRAY
12981: ST_TO_ADDR
// veh = CreateVehicle ;
12982: LD_ADDR_VAR 0 5
12986: PUSH
12987: CALL_OW 45
12991: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12992: LD_VAR 0 5
12996: PPUSH
12997: LD_VAR 0 2
13001: PPUSH
13002: LD_INT 0
13004: PPUSH
13005: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13009: LD_ADDR_EXP 26
13013: PUSH
13014: LD_EXP 26
13018: PUSH
13019: LD_VAR 0 5
13023: ADD
13024: ST_TO_ADDR
// hc_gallery =  ;
13025: LD_ADDR_OWVAR 33
13029: PUSH
13030: LD_STRING 
13032: ST_TO_ADDR
// hc_name =  ;
13033: LD_ADDR_OWVAR 26
13037: PUSH
13038: LD_STRING 
13040: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13041: LD_INT 0
13043: PPUSH
13044: LD_INT 3
13046: PPUSH
13047: LD_EXP 13
13051: PPUSH
13052: LD_EXP 14
13056: PPUSH
13057: CALL_OW 12
13061: PPUSH
13062: CALL_OW 380
// un = CreateHuman ;
13066: LD_ADDR_VAR 0 6
13070: PUSH
13071: CALL_OW 44
13075: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13076: LD_VAR 0 6
13080: PPUSH
13081: LD_VAR 0 5
13085: PPUSH
13086: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13090: LD_ADDR_EXP 26
13094: PUSH
13095: LD_EXP 26
13099: PUSH
13100: LD_VAR 0 6
13104: ADD
13105: ST_TO_ADDR
// end ;
13106: GO 12930
13108: POP
13109: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13110: LD_INT 0
13112: PPUSH
13113: LD_INT 2
13115: PPUSH
13116: LD_EXP 13
13120: PPUSH
13121: LD_EXP 14
13125: PPUSH
13126: CALL_OW 12
13130: PPUSH
13131: CALL_OW 380
// un = CreateHuman ;
13135: LD_ADDR_VAR 0 6
13139: PUSH
13140: CALL_OW 44
13144: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13145: LD_ADDR_VAR 0 4
13149: PUSH
13150: DOUBLE
13151: LD_INT 1
13153: DEC
13154: ST_TO_ADDR
13155: LD_VAR 0 1
13159: PUSH
13160: LD_INT 2
13162: PUSH
13163: LD_INT 2
13165: MUL
13166: PLUS
13167: PUSH
13168: FOR_TO
13169: IFFALSE 13257
// begin hc_gallery =  ;
13171: LD_ADDR_OWVAR 33
13175: PUSH
13176: LD_STRING 
13178: ST_TO_ADDR
// hc_name =  ;
13179: LD_ADDR_OWVAR 26
13183: PUSH
13184: LD_STRING 
13186: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13187: LD_INT 1
13189: PPUSH
13190: LD_INT 1
13192: PPUSH
13193: LD_EXP 13
13197: PPUSH
13198: LD_EXP 14
13202: PPUSH
13203: CALL_OW 12
13207: PPUSH
13208: CALL_OW 380
// un = CreateHuman ;
13212: LD_ADDR_VAR 0 6
13216: PUSH
13217: CALL_OW 44
13221: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13222: LD_VAR 0 6
13226: PPUSH
13227: LD_VAR 0 2
13231: PPUSH
13232: LD_INT 0
13234: PPUSH
13235: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13239: LD_ADDR_EXP 26
13243: PUSH
13244: LD_EXP 26
13248: PUSH
13249: LD_VAR 0 6
13253: ADD
13254: ST_TO_ADDR
// end ;
13255: GO 13168
13257: POP
13258: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13259: LD_ADDR_VAR 0 7
13263: PUSH
13264: LD_INT 26
13266: PPUSH
13267: LD_INT 22
13269: PUSH
13270: LD_INT 3
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 21
13279: PUSH
13280: LD_INT 1
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 26
13289: PUSH
13290: LD_INT 1
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: PPUSH
13302: CALL_OW 70
13306: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13307: LD_VAR 0 7
13311: PUSH
13312: LD_INT 1
13314: ARRAY
13315: PPUSH
13316: LD_STRING D9-Rus3-1
13318: PPUSH
13319: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13323: LD_VAR 0 7
13327: PUSH
13328: LD_INT 2
13330: ARRAY
13331: PPUSH
13332: LD_STRING D9-Russ-1
13334: PPUSH
13335: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13339: LD_INT 35
13341: PPUSH
13342: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13346: LD_ADDR_VAR 0 4
13350: PUSH
13351: LD_INT 26
13353: PPUSH
13354: LD_INT 22
13356: PUSH
13357: LD_INT 3
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: PUSH
13364: EMPTY
13365: LIST
13366: PPUSH
13367: CALL_OW 70
13371: PUSH
13372: FOR_IN
13373: IFFALSE 13545
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13375: LD_ADDR_VAR 0 8
13379: PUSH
13380: LD_INT 22
13382: PUSH
13383: LD_INT 1
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PPUSH
13390: CALL_OW 69
13394: PPUSH
13395: LD_VAR 0 4
13399: PPUSH
13400: CALL_OW 74
13404: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13405: LD_ADDR_VAR 0 9
13409: PUSH
13410: LD_INT 22
13412: PUSH
13413: LD_INT 1
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 2
13422: PUSH
13423: LD_INT 59
13425: PUSH
13426: EMPTY
13427: LIST
13428: PUSH
13429: LD_INT 21
13431: PUSH
13432: LD_INT 1
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 21
13441: PUSH
13442: LD_INT 2
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: PPUSH
13462: CALL_OW 69
13466: PPUSH
13467: LD_VAR 0 4
13471: PPUSH
13472: CALL_OW 74
13476: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13477: LD_VAR 0 4
13481: PPUSH
13482: LD_VAR 0 8
13486: PPUSH
13487: CALL_OW 296
13491: PUSH
13492: LD_INT 8
13494: PLUS
13495: PUSH
13496: LD_VAR 0 4
13500: PPUSH
13501: LD_VAR 0 9
13505: PPUSH
13506: CALL_OW 296
13510: LESS
13511: IFFALSE 13529
// begin ComAttackUnit ( i , target1 ) ;
13513: LD_VAR 0 4
13517: PPUSH
13518: LD_VAR 0 8
13522: PPUSH
13523: CALL_OW 115
// end else
13527: GO 13543
// begin ComAttackUnit ( i , target2 ) ;
13529: LD_VAR 0 4
13533: PPUSH
13534: LD_VAR 0 9
13538: PPUSH
13539: CALL_OW 115
// end ; end ;
13543: GO 13372
13545: POP
13546: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13547: LD_INT 26
13549: PPUSH
13550: LD_INT 22
13552: PUSH
13553: LD_INT 3
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 2
13562: PUSH
13563: LD_INT 21
13565: PUSH
13566: LD_INT 1
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: LD_INT 21
13575: PUSH
13576: LD_INT 2
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 59
13585: PUSH
13586: EMPTY
13587: LIST
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PPUSH
13599: CALL_OW 70
13603: PUSH
13604: LD_INT 0
13606: EQUAL
13607: IFFALSE 13339
// end ; end_of_file
13609: LD_VAR 0 3
13613: RET
// every 0 0$1 do
13614: GO 13616
13616: DISABLE
// begin enable ;
13617: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13618: LD_INT 3
13620: PPUSH
13621: LD_INT 1
13623: PPUSH
13624: LD_INT 22
13626: PPUSH
13627: CALL 8753 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13631: LD_INT 3
13633: PPUSH
13634: LD_INT 20
13636: PPUSH
13637: LD_INT 22
13639: PPUSH
13640: LD_INT 23
13642: PPUSH
13643: CALL 8999 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13647: LD_INT 3
13649: PPUSH
13650: LD_INT 21
13652: PPUSH
13653: LD_INT 23
13655: PPUSH
13656: CALL 9276 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13660: LD_INT 22
13662: PPUSH
13663: LD_INT 1
13665: PPUSH
13666: LD_EXP 24
13670: PPUSH
13671: LD_INT 2
13673: PPUSH
13674: LD_INT 3
13676: PPUSH
13677: CALL 9748 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13681: LD_INT 23
13683: PPUSH
13684: LD_INT 1
13686: PPUSH
13687: LD_EXP 25
13691: PPUSH
13692: LD_INT 33
13694: PPUSH
13695: LD_INT 1
13697: PPUSH
13698: CALL 9748 0 5
// end ; end_of_file
13702: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13703: LD_VAR 0 1
13707: PPUSH
13708: CALL_OW 255
13712: PUSH
13713: LD_INT 1
13715: EQUAL
13716: PUSH
13717: LD_VAR 0 1
13721: PPUSH
13722: CALL_OW 247
13726: PUSH
13727: LD_INT 1
13729: EQUAL
13730: AND
13731: IFFALSE 13747
// deadsCounter = deadsCounter + 1 ;
13733: LD_ADDR_EXP 31
13737: PUSH
13738: LD_EXP 31
13742: PUSH
13743: LD_INT 1
13745: PLUS
13746: ST_TO_ADDR
// end ;
13747: PPOPN 1
13749: END
// on Command ( comandid ) do var i , j , tmp ;
13750: LD_INT 0
13752: PPUSH
13753: PPUSH
13754: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_INT 22
13762: PUSH
13763: LD_INT 1
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 21
13772: PUSH
13773: LD_INT 2
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PPUSH
13784: CALL_OW 69
13788: PUSH
13789: FOR_IN
13790: IFFALSE 13915
// begin if GetTaskList ( i ) > 0 then
13792: LD_VAR 0 2
13796: PPUSH
13797: CALL_OW 437
13801: PUSH
13802: LD_INT 0
13804: GREATER
13805: IFFALSE 13913
// begin for j = 1 to GetTaskList ( i ) do
13807: LD_ADDR_VAR 0 3
13811: PUSH
13812: DOUBLE
13813: LD_INT 1
13815: DEC
13816: ST_TO_ADDR
13817: LD_VAR 0 2
13821: PPUSH
13822: CALL_OW 437
13826: PUSH
13827: FOR_TO
13828: IFFALSE 13911
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13830: LD_ADDR_VAR 0 4
13834: PUSH
13835: LD_VAR 0 2
13839: PPUSH
13840: CALL_OW 437
13844: PUSH
13845: LD_VAR 0 3
13849: ARRAY
13850: PUSH
13851: LD_INT 4
13853: ARRAY
13854: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
13855: LD_VAR 0 4
13859: PPUSH
13860: CALL_OW 255
13864: PUSH
13865: LD_INT 3
13867: EQUAL
13868: PUSH
13869: LD_VAR 0 4
13873: PPUSH
13874: CALL_OW 247
13878: PUSH
13879: LD_INT 2
13881: EQUAL
13882: AND
13883: PUSH
13884: LD_VAR 0 4
13888: PPUSH
13889: CALL_OW 264
13893: PUSH
13894: LD_INT 51
13896: EQUAL
13897: AND
13898: IFFALSE 13909
// ComStop ( i ) ;
13900: LD_VAR 0 2
13904: PPUSH
13905: CALL_OW 141
// end ;
13909: GO 13827
13911: POP
13912: POP
// end ; end ;
13913: GO 13789
13915: POP
13916: POP
// end ; end_of_file
13917: PPOPN 4
13919: END
// every 0 0$1 trigger IsDead ( JMM ) do
13920: LD_EXP 1
13924: PPUSH
13925: CALL_OW 301
13929: IFFALSE 13941
13931: GO 13933
13933: DISABLE
// YouLost ( JMM ) ;
13934: LD_STRING JMM
13936: PPUSH
13937: CALL_OW 104
13941: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
13942: LD_INT 1
13944: PPUSH
13945: CALL_OW 301
13949: PUSH
13950: LD_INT 10
13952: PPUSH
13953: CALL_OW 301
13957: OR
13958: IFFALSE 13970
13960: GO 13962
13962: DISABLE
// YouLost ( DepotDestroyed ) ;
13963: LD_STRING DepotDestroyed
13965: PPUSH
13966: CALL_OW 104
13970: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
13971: LD_INT 22
13973: PUSH
13974: LD_INT 1
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 21
13983: PUSH
13984: LD_INT 1
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: LD_INT 25
13993: PUSH
13994: LD_INT 2
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: PPUSH
14006: CALL_OW 69
14010: PUSH
14011: LD_INT 0
14013: EQUAL
14014: PUSH
14015: LD_INT 22
14017: PUSH
14018: LD_INT 4
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: LD_INT 21
14027: PUSH
14028: LD_INT 1
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 25
14037: PUSH
14038: LD_INT 2
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: LIST
14049: PPUSH
14050: CALL_OW 69
14054: PUSH
14055: LD_INT 0
14057: EQUAL
14058: AND
14059: PUSH
14060: LD_INT 1
14062: PPUSH
14063: CALL_OW 255
14067: PUSH
14068: LD_INT 3
14070: EQUAL
14071: AND
14072: PUSH
14073: LD_INT 10
14075: PPUSH
14076: CALL_OW 255
14080: PUSH
14081: LD_INT 3
14083: EQUAL
14084: AND
14085: IFFALSE 14097
14087: GO 14089
14089: DISABLE
// YouLost ( Engineer ) ;
14090: LD_STRING Engineer
14092: PPUSH
14093: CALL_OW 104
14097: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14098: LD_INT 1
14100: PPUSH
14101: CALL_OW 255
14105: PUSH
14106: LD_INT 3
14108: EQUAL
14109: PUSH
14110: LD_EXP 27
14114: PUSH
14115: LD_INT 1
14117: EQUAL
14118: AND
14119: IFFALSE 14131
14121: GO 14123
14123: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14124: LD_STRING DepotCaptured
14126: PPUSH
14127: CALL_OW 104
14131: END
// export function PrepareTigers ; var i , un ; begin
14132: LD_INT 0
14134: PPUSH
14135: PPUSH
14136: PPUSH
// for i = 1 to Difficulty do
14137: LD_ADDR_VAR 0 2
14141: PUSH
14142: DOUBLE
14143: LD_INT 1
14145: DEC
14146: ST_TO_ADDR
14147: LD_OWVAR 67
14151: PUSH
14152: FOR_TO
14153: IFFALSE 14288
// begin hc_sex = sex_male ;
14155: LD_ADDR_OWVAR 27
14159: PUSH
14160: LD_INT 1
14162: ST_TO_ADDR
// uc_side = 0 ;
14163: LD_ADDR_OWVAR 20
14167: PUSH
14168: LD_INT 0
14170: ST_TO_ADDR
// uc_nation = nation_nature ;
14171: LD_ADDR_OWVAR 21
14175: PUSH
14176: LD_INT 0
14178: ST_TO_ADDR
// hc_class = class_tiger ;
14179: LD_ADDR_OWVAR 28
14183: PUSH
14184: LD_INT 14
14186: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14187: LD_ADDR_OWVAR 31
14191: PUSH
14192: LD_EXP 14
14196: PUSH
14197: LD_INT 0
14199: PUSH
14200: LD_INT 0
14202: PUSH
14203: LD_INT 0
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14212: LD_ADDR_OWVAR 35
14216: PUSH
14217: LD_INT 30
14219: PPUSH
14220: LD_INT 40
14222: PPUSH
14223: CALL_OW 12
14227: PUSH
14228: LD_INT 40
14230: PPUSH
14231: LD_INT 50
14233: PPUSH
14234: CALL_OW 12
14238: PUSH
14239: LD_INT 50
14241: PPUSH
14242: LD_INT 60
14244: PPUSH
14245: CALL_OW 12
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: LIST
14254: PUSH
14255: LD_OWVAR 67
14259: ARRAY
14260: ST_TO_ADDR
// un = CreateHuman ;
14261: LD_ADDR_VAR 0 3
14265: PUSH
14266: CALL_OW 44
14270: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14271: LD_VAR 0 3
14275: PPUSH
14276: LD_INT 27
14278: PPUSH
14279: LD_INT 0
14281: PPUSH
14282: CALL_OW 49
// end ;
14286: GO 14152
14288: POP
14289: POP
// end ; end_of_file
14290: LD_VAR 0 1
14294: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 do
14295: LD_INT 1
14297: PPUSH
14298: CALL_OW 255
14302: PUSH
14303: LD_INT 1
14305: EQUAL
14306: PUSH
14307: LD_INT 10
14309: PPUSH
14310: CALL_OW 255
14314: PUSH
14315: LD_INT 1
14317: EQUAL
14318: AND
14319: PUSH
14320: LD_EXP 20
14324: PUSH
14325: LD_INT 1
14327: EQUAL
14328: AND
14329: IFFALSE 14420
14331: GO 14333
14333: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14334: LD_INT 9450
14336: PUSH
14337: LD_INT 8400
14339: PUSH
14340: LD_INT 6300
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: LIST
14347: PUSH
14348: LD_OWVAR 67
14352: ARRAY
14353: PPUSH
14354: CALL_OW 67
// if cargoEscape = 1 then
14358: LD_EXP 20
14362: PUSH
14363: LD_INT 1
14365: EQUAL
14366: IFFALSE 14420
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14368: LD_EXP 9
14372: PPUSH
14373: LD_STRING D6-Pow-1
14375: PPUSH
14376: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14380: LD_EXP 1
14384: PPUSH
14385: LD_STRING D6-JMM-1
14387: PPUSH
14388: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14392: LD_EXP 9
14396: PPUSH
14397: LD_STRING D6-Pow-2
14399: PPUSH
14400: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14404: LD_EXP 1
14408: PPUSH
14409: LD_STRING D6-JMM-2
14411: PPUSH
14412: CALL_OW 88
// FinishMission ;
14416: CALL 14628 0 0
// end ; end ;
14420: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14421: LD_INT 1
14423: PPUSH
14424: CALL_OW 255
14428: PUSH
14429: LD_INT 1
14431: EQUAL
14432: PUSH
14433: LD_INT 10
14435: PPUSH
14436: CALL_OW 255
14440: PUSH
14441: LD_INT 1
14443: EQUAL
14444: AND
14445: PUSH
14446: LD_EXP 20
14450: PUSH
14451: LD_INT 1
14453: GREATER
14454: AND
14455: IFFALSE 14522
14457: GO 14459
14459: DISABLE
14460: LD_INT 0
14462: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14463: LD_INT 11550
14465: PUSH
14466: LD_INT 10500
14468: PUSH
14469: LD_INT 9450
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: LIST
14476: PUSH
14477: LD_OWVAR 67
14481: ARRAY
14482: PPUSH
14483: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14487: LD_INT 1
14489: PUSH
14490: LD_INT 2
14492: PUSH
14493: LD_INT 3
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: LIST
14500: PUSH
14501: LD_OWVAR 67
14505: ARRAY
14506: PPUSH
14507: LD_INT 13
14509: PPUSH
14510: CALL 12878 0 2
// lastBattle = 1 ;
14514: LD_ADDR_EXP 27
14518: PUSH
14519: LD_INT 1
14521: ST_TO_ADDR
// end ;
14522: PPOPN 1
14524: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14525: LD_EXP 27
14529: PUSH
14530: LD_INT 1
14532: EQUAL
14533: PUSH
14534: LD_INT 26
14536: PPUSH
14537: LD_INT 22
14539: PUSH
14540: LD_INT 3
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PUSH
14547: LD_INT 21
14549: PUSH
14550: LD_INT 1
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PPUSH
14561: CALL_OW 70
14565: PUSH
14566: LD_INT 0
14568: EQUAL
14569: AND
14570: IFFALSE 14627
14572: GO 14574
14574: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14575: LD_EXP 9
14579: PPUSH
14580: LD_STRING D6-Pow-1
14582: PPUSH
14583: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14587: LD_EXP 1
14591: PPUSH
14592: LD_STRING D6-JMM-1
14594: PPUSH
14595: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14599: LD_EXP 9
14603: PPUSH
14604: LD_STRING D6-Pow-2
14606: PPUSH
14607: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14611: LD_EXP 1
14615: PPUSH
14616: LD_STRING D6-JMM-2
14618: PPUSH
14619: CALL_OW 88
// FinishMission ;
14623: CALL 14628 0 0
// end ;
14627: END
// export function FinishMission ; var tmp ; begin
14628: LD_INT 0
14630: PPUSH
14631: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14632: LD_ADDR_VAR 0 2
14636: PUSH
14637: LD_INT 22
14639: PUSH
14640: LD_INT 1
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 21
14649: PUSH
14650: LD_INT 2
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: LD_INT 24
14659: PUSH
14660: LD_INT 251
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: LIST
14671: PPUSH
14672: CALL_OW 69
14676: ST_TO_ADDR
// if tmp then
14677: LD_VAR 0 2
14681: IFFALSE 14695
// SaveVehicles ( tmp , 02_tanks_1 ) ;
14683: LD_VAR 0 2
14687: PPUSH
14688: LD_STRING 02_tanks_1
14690: PPUSH
14691: CALL 10453 0 2
// if mikhailStatus = 1 then
14695: LD_EXP 21
14699: PUSH
14700: LD_INT 1
14702: EQUAL
14703: IFFALSE 14717
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
14705: LD_EXP 21
14709: PPUSH
14710: LD_STRING 02_mikhailStatus_1
14712: PPUSH
14713: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
14717: LD_INT 1
14719: PPUSH
14720: CALL_OW 274
14724: PPUSH
14725: LD_INT 1
14727: PPUSH
14728: CALL_OW 275
14732: PPUSH
14733: LD_STRING 02_resources_4
14735: PPUSH
14736: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 274
14747: PPUSH
14748: LD_INT 1
14750: PPUSH
14751: CALL_OW 275
14755: PUSH
14756: LD_INT 200
14758: GREATEREQUAL
14759: IFFALSE 14773
// begin AddMedal ( Cans , 1 ) ;
14761: LD_STRING Cans
14763: PPUSH
14764: LD_INT 1
14766: PPUSH
14767: CALL_OW 101
// end else
14771: GO 14784
// begin AddMedal ( Cans , - 1 ) ;
14773: LD_STRING Cans
14775: PPUSH
14776: LD_INT 1
14778: NEG
14779: PPUSH
14780: CALL_OW 101
// end ; if deadsCounter < 2 then
14784: LD_EXP 31
14788: PUSH
14789: LD_INT 2
14791: LESS
14792: IFFALSE 14806
// begin AddMedal ( Deaths , 1 ) ;
14794: LD_STRING Deaths
14796: PPUSH
14797: LD_INT 1
14799: PPUSH
14800: CALL_OW 101
// end else
14804: GO 14817
// begin AddMedal ( Deaths , - 1 ) ;
14806: LD_STRING Deaths
14808: PPUSH
14809: LD_INT 1
14811: NEG
14812: PPUSH
14813: CALL_OW 101
// end ; if mikhailStatus = 0 then
14817: LD_EXP 21
14821: PUSH
14822: LD_INT 0
14824: EQUAL
14825: IFFALSE 14838
// AddMedal ( Prisoner , - 1 ) ;
14827: LD_STRING Prisoner
14829: PPUSH
14830: LD_INT 1
14832: NEG
14833: PPUSH
14834: CALL_OW 101
// if mikhailStatus = 1 then
14838: LD_EXP 21
14842: PUSH
14843: LD_INT 1
14845: EQUAL
14846: IFFALSE 14858
// AddMedal ( Prisoner , 1 ) ;
14848: LD_STRING Prisoner
14850: PPUSH
14851: LD_INT 1
14853: PPUSH
14854: CALL_OW 101
// if mikhailStatus = 2 then
14858: LD_EXP 21
14862: PUSH
14863: LD_INT 2
14865: EQUAL
14866: IFFALSE 14878
// AddMedal ( Prisoner , 2 ) ;
14868: LD_STRING Prisoner
14870: PPUSH
14871: LD_INT 2
14873: PPUSH
14874: CALL_OW 101
// if mikhailStatus = 3 then
14878: LD_EXP 21
14882: PUSH
14883: LD_INT 3
14885: EQUAL
14886: IFFALSE 14899
// AddMedal ( Prisoner , - 2 ) ;
14888: LD_STRING Prisoner
14890: PPUSH
14891: LD_INT 2
14893: NEG
14894: PPUSH
14895: CALL_OW 101
// GiveMedals ( MAIN ) ;
14899: LD_STRING MAIN
14901: PPUSH
14902: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
14906: LD_INT 22
14908: PUSH
14909: LD_INT 1
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: PUSH
14916: LD_INT 23
14918: PUSH
14919: LD_INT 1
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PUSH
14926: LD_INT 21
14928: PUSH
14929: LD_INT 1
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: LIST
14940: PPUSH
14941: CALL_OW 69
14945: PPUSH
14946: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
14950: LD_EXP 1
14954: PPUSH
14955: LD_EXP 33
14959: PUSH
14960: LD_STRING JMM
14962: STR
14963: PPUSH
14964: CALL_OW 38
// if IsOK ( Bobby ) then
14968: LD_EXP 2
14972: PPUSH
14973: CALL_OW 302
14977: IFFALSE 14997
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
14979: LD_EXP 2
14983: PPUSH
14984: LD_EXP 33
14988: PUSH
14989: LD_STRING Bobby
14991: STR
14992: PPUSH
14993: CALL_OW 38
// if IsOK ( Cyrus ) then
14997: LD_EXP 3
15001: PPUSH
15002: CALL_OW 302
15006: IFFALSE 15026
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15008: LD_EXP 3
15012: PPUSH
15013: LD_EXP 33
15017: PUSH
15018: LD_STRING Cyrus
15020: STR
15021: PPUSH
15022: CALL_OW 38
// if IsOK ( Lisa ) then
15026: LD_EXP 4
15030: PPUSH
15031: CALL_OW 302
15035: IFFALSE 15055
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15037: LD_EXP 4
15041: PPUSH
15042: LD_EXP 33
15046: PUSH
15047: LD_STRING Lisa
15049: STR
15050: PPUSH
15051: CALL_OW 38
// if IsOK ( Khatam ) then
15055: LD_EXP 5
15059: PPUSH
15060: CALL_OW 302
15064: IFFALSE 15084
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15066: LD_EXP 5
15070: PPUSH
15071: LD_EXP 33
15075: PUSH
15076: LD_STRING Khatam
15078: STR
15079: PPUSH
15080: CALL_OW 38
// if IsOK ( Brian ) then
15084: LD_EXP 6
15088: PPUSH
15089: CALL_OW 302
15093: IFFALSE 15113
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15095: LD_EXP 6
15099: PPUSH
15100: LD_EXP 33
15104: PUSH
15105: LD_STRING Brian
15107: STR
15108: PPUSH
15109: CALL_OW 38
// if IsOk ( Jerry ) then
15113: LD_EXP 7
15117: PPUSH
15118: CALL_OW 302
15122: IFFALSE 15142
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15124: LD_EXP 7
15128: PPUSH
15129: LD_EXP 33
15133: PUSH
15134: LD_STRING Jerry
15136: STR
15137: PPUSH
15138: CALL_OW 38
// if mikhailStatus = 1 then
15142: LD_EXP 21
15146: PUSH
15147: LD_INT 1
15149: EQUAL
15150: IFFALSE 15170
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15152: LD_EXP 8
15156: PPUSH
15157: LD_EXP 33
15161: PUSH
15162: LD_STRING Mikhail
15164: STR
15165: PPUSH
15166: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15170: LD_INT 50
15172: PUSH
15173: EMPTY
15174: LIST
15175: PUSH
15176: LD_INT 22
15178: PUSH
15179: LD_INT 1
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 21
15188: PUSH
15189: LD_INT 1
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: LIST
15200: PPUSH
15201: CALL_OW 69
15205: PUSH
15206: LD_EXP 1
15210: PUSH
15211: LD_EXP 2
15215: PUSH
15216: LD_EXP 3
15220: PUSH
15221: LD_EXP 4
15225: PUSH
15226: LD_EXP 5
15230: PUSH
15231: LD_EXP 6
15235: PUSH
15236: LD_EXP 7
15240: PUSH
15241: LD_EXP 8
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: DIFF
15256: PPUSH
15257: LD_STRING 02_other_survivors
15259: PPUSH
15260: CALL_OW 38
// YouWin ;
15264: CALL_OW 103
// end ;
15268: LD_VAR 0 1
15272: RET
