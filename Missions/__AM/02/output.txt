// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// PrepareDifficulty ;
 161: CALL 10432 0 0
// PrepareRussianCommander ;
 165: CALL 11791 0 0
// PrepareSouthBase ;
 169: CALL 11874 0 0
// PrepareNorthBase ;
 173: CALL 12213 0 0
// PrepareOtherRussians ;
 177: CALL 12579 0 0
// PrepareHeroes ;
 181: CALL 10747 0 0
// PrepareLisSquad ;
 185: CALL 10990 0 0
// PrepareOtherAmericans ;
 189: CALL 11335 0 0
// end ; end_of_file
 193: END
// every 1 do var tmp ;
 194: GO 196
 196: DISABLE
 197: LD_INT 0
 199: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 209: LD_ADDR_VAR 0 1
 213: PUSH
 214: LD_INT 22
 216: PUSH
 217: LD_INT 4
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 21
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PPUSH
 238: CALL_OW 69
 242: PUSH
 243: LD_EXP 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: DIFF
 251: ST_TO_ADDR
// if Cyrus and Bobby then
 252: LD_EXP 3
 256: PUSH
 257: LD_EXP 2
 261: AND
 262: IFFALSE 592
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 264: LD_EXP 3
 268: PPUSH
 269: LD_INT 43
 271: PPUSH
 272: LD_INT 72
 274: PPUSH
 275: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_INT 44
 286: PPUSH
 287: LD_INT 70
 289: PPUSH
 290: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 294: LD_EXP 1
 298: PPUSH
 299: LD_INT 46
 301: PPUSH
 302: LD_INT 73
 304: PPUSH
 305: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 309: LD_EXP 3
 313: PPUSH
 314: LD_STRING D1a-Cyrus-1
 316: PPUSH
 317: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_STRING D1a-JMM-1
 328: PPUSH
 329: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 333: LD_EXP 3
 337: PPUSH
 338: LD_INT 37
 340: PPUSH
 341: LD_INT 66
 343: PPUSH
 344: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 348: LD_EXP 2
 352: PPUSH
 353: LD_INT 41
 355: PPUSH
 356: LD_INT 67
 358: PPUSH
 359: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 363: LD_EXP 1
 367: PPUSH
 368: LD_INT 38
 370: PPUSH
 371: LD_INT 64
 373: PPUSH
 374: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 378: LD_EXP 2
 382: PPUSH
 383: LD_STRING D1a-Bobby-2
 385: PPUSH
 386: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 390: LD_EXP 3
 394: PPUSH
 395: LD_INT 35
 397: PPUSH
 398: LD_INT 62
 400: PPUSH
 401: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 405: LD_EXP 2
 409: PPUSH
 410: LD_INT 32
 412: PPUSH
 413: LD_INT 60
 415: PPUSH
 416: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 420: LD_EXP 1
 424: PPUSH
 425: LD_INT 35
 427: PPUSH
 428: LD_INT 60
 430: PPUSH
 431: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 435: LD_EXP 1
 439: PPUSH
 440: LD_STRING D1a-JMM-2
 442: PPUSH
 443: CALL_OW 88
// ComWalk ( Lisa ) ;
 447: LD_EXP 4
 451: PPUSH
 452: CALL_OW 138
// wait ( 0 0$1 ) ;
 456: LD_INT 35
 458: PPUSH
 459: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 463: LD_EXP 4
 467: PPUSH
 468: LD_EXP 1
 472: PPUSH
 473: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 477: LD_EXP 1
 481: PUSH
 482: LD_EXP 3
 486: PUSH
 487: LD_EXP 2
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PPUSH
 497: LD_EXP 4
 501: PPUSH
 502: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 506: LD_VAR 0 1
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: LD_INT 33
 517: PPUSH
 518: LD_INT 55
 520: PPUSH
 521: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 525: LD_VAR 0 1
 529: PUSH
 530: LD_INT 2
 532: ARRAY
 533: PPUSH
 534: LD_INT 30
 536: PPUSH
 537: LD_INT 54
 539: PPUSH
 540: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 544: LD_VAR 0 1
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: LD_EXP 1
 557: PPUSH
 558: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 562: LD_VAR 0 1
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 1
 575: PPUSH
 576: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 580: LD_EXP 4
 584: PPUSH
 585: LD_STRING D1a-Lisa-2
 587: PPUSH
 588: CALL_OW 88
// end ; if Cyrus and not Bobby then
 592: LD_EXP 3
 596: PUSH
 597: LD_EXP 2
 601: NOT
 602: AND
 603: IFFALSE 808
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 605: LD_EXP 3
 609: PPUSH
 610: LD_INT 43
 612: PPUSH
 613: LD_INT 72
 615: PPUSH
 616: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 46
 627: PPUSH
 628: LD_INT 73
 630: PPUSH
 631: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 635: LD_EXP 3
 639: PPUSH
 640: LD_STRING D1a-Cyrus-1
 642: PPUSH
 643: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 647: LD_EXP 1
 651: PPUSH
 652: LD_STRING D1a-JMM-1
 654: PPUSH
 655: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 659: LD_EXP 3
 663: PPUSH
 664: LD_INT 37
 666: PPUSH
 667: LD_INT 66
 669: PPUSH
 670: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 674: LD_EXP 1
 678: PPUSH
 679: LD_INT 38
 681: PPUSH
 682: LD_INT 64
 684: PPUSH
 685: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 689: LD_EXP 3
 693: PPUSH
 694: LD_STRING D1a-Cyrus-2
 696: PPUSH
 697: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 701: LD_EXP 3
 705: PPUSH
 706: LD_INT 35
 708: PPUSH
 709: LD_INT 62
 711: PPUSH
 712: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 716: LD_EXP 1
 720: PPUSH
 721: LD_INT 35
 723: PPUSH
 724: LD_INT 60
 726: PPUSH
 727: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 731: LD_EXP 1
 735: PPUSH
 736: LD_STRING D1a-JMM-2
 738: PPUSH
 739: CALL_OW 88
// ComWalk ( Lisa ) ;
 743: LD_EXP 4
 747: PPUSH
 748: CALL_OW 138
// wait ( 0 0$1 ) ;
 752: LD_INT 35
 754: PPUSH
 755: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 759: LD_EXP 4
 763: PPUSH
 764: LD_EXP 1
 768: PPUSH
 769: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 773: LD_EXP 4
 777: PPUSH
 778: LD_STRING D1a-Lisa-2
 780: PPUSH
 781: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 785: LD_EXP 1
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PPUSH
 799: LD_EXP 4
 803: PPUSH
 804: CALL_OW 119
// end ; if not Cyrus and Bobby then
 808: LD_EXP 3
 812: NOT
 813: PUSH
 814: LD_EXP 2
 818: AND
 819: IFFALSE 1098
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 821: LD_EXP 2
 825: PPUSH
 826: LD_INT 44
 828: PPUSH
 829: LD_INT 70
 831: PPUSH
 832: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 836: LD_EXP 1
 840: PPUSH
 841: LD_INT 46
 843: PPUSH
 844: LD_INT 73
 846: PPUSH
 847: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 851: LD_EXP 2
 855: PPUSH
 856: LD_STRING D1a-Bobby-1
 858: PPUSH
 859: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 863: LD_EXP 1
 867: PPUSH
 868: LD_STRING D1a-JMM-1
 870: PPUSH
 871: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 875: LD_EXP 2
 879: PPUSH
 880: LD_INT 37
 882: PPUSH
 883: LD_INT 66
 885: PPUSH
 886: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 890: LD_EXP 1
 894: PPUSH
 895: LD_INT 38
 897: PPUSH
 898: LD_INT 64
 900: PPUSH
 901: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 905: LD_EXP 2
 909: PPUSH
 910: LD_STRING D1a-Bobby-2
 912: PPUSH
 913: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 917: LD_EXP 2
 921: PPUSH
 922: LD_INT 35
 924: PPUSH
 925: LD_INT 62
 927: PPUSH
 928: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 932: LD_EXP 1
 936: PPUSH
 937: LD_INT 35
 939: PPUSH
 940: LD_INT 60
 942: PPUSH
 943: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 947: LD_EXP 1
 951: PPUSH
 952: LD_STRING D1a-JMM-2
 954: PPUSH
 955: CALL_OW 88
// ComWalk ( Lisa ) ;
 959: LD_EXP 4
 963: PPUSH
 964: CALL_OW 138
// wait ( 0 0$1 ) ;
 968: LD_INT 35
 970: PPUSH
 971: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 975: LD_EXP 4
 979: PPUSH
 980: LD_EXP 1
 984: PPUSH
 985: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 989: LD_EXP 1
 993: PUSH
 994: LD_EXP 3
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PPUSH
1003: LD_EXP 4
1007: PPUSH
1008: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1012: LD_VAR 0 1
1016: PUSH
1017: LD_INT 1
1019: ARRAY
1020: PPUSH
1021: LD_INT 33
1023: PPUSH
1024: LD_INT 55
1026: PPUSH
1027: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1031: LD_VAR 0 1
1035: PUSH
1036: LD_INT 2
1038: ARRAY
1039: PPUSH
1040: LD_INT 30
1042: PPUSH
1043: LD_INT 54
1045: PPUSH
1046: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1050: LD_VAR 0 1
1054: PUSH
1055: LD_INT 1
1057: ARRAY
1058: PPUSH
1059: LD_EXP 1
1063: PPUSH
1064: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1068: LD_VAR 0 1
1072: PUSH
1073: LD_INT 2
1075: ARRAY
1076: PPUSH
1077: LD_EXP 1
1081: PPUSH
1082: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1086: LD_EXP 4
1090: PPUSH
1091: LD_STRING D1a-Lisa-2
1093: PPUSH
1094: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1098: LD_EXP 3
1102: NOT
1103: PUSH
1104: LD_EXP 2
1108: NOT
1109: AND
1110: IFFALSE 1324
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1112: LD_EXP 1
1116: PPUSH
1117: LD_INT 37
1119: PPUSH
1120: LD_INT 66
1122: PPUSH
1123: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1127: LD_EXP 1
1131: PPUSH
1132: LD_STRING D1b-JMM-1
1134: PPUSH
1135: CALL_OW 88
// ComCrawl ( JMM ) ;
1139: LD_EXP 1
1143: PPUSH
1144: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1148: LD_EXP 1
1152: PPUSH
1153: LD_INT 35
1155: PPUSH
1156: LD_INT 60
1158: PPUSH
1159: CALL_OW 171
// wait ( 0 0$8 ) ;
1163: LD_INT 280
1165: PPUSH
1166: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_STRING D1b-JMM-1a
1177: PPUSH
1178: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1182: LD_EXP 1
1186: PUSH
1187: LD_EXP 4
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PPUSH
1196: CALL_OW 138
// wait ( 0 0$1 ) ;
1200: LD_INT 35
1202: PPUSH
1203: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1207: LD_EXP 4
1211: PPUSH
1212: LD_EXP 1
1216: PPUSH
1217: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1221: LD_EXP 1
1225: PUSH
1226: EMPTY
1227: LIST
1228: PPUSH
1229: LD_EXP 4
1233: PPUSH
1234: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1238: LD_VAR 0 1
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: LD_INT 33
1249: PPUSH
1250: LD_INT 55
1252: PPUSH
1253: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1257: LD_VAR 0 1
1261: PUSH
1262: LD_INT 2
1264: ARRAY
1265: PPUSH
1266: LD_INT 30
1268: PPUSH
1269: LD_INT 54
1271: PPUSH
1272: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1276: LD_VAR 0 1
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_EXP 1
1289: PPUSH
1290: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1294: LD_VAR 0 1
1298: PUSH
1299: LD_INT 2
1301: ARRAY
1302: PPUSH
1303: LD_EXP 1
1307: PPUSH
1308: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1312: LD_EXP 4
1316: PPUSH
1317: LD_STRING D1b-Lisa-1
1319: PPUSH
1320: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1324: LD_EXP 1
1328: PPUSH
1329: LD_STRING D1-JMM-1
1331: PPUSH
1332: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1336: LD_EXP 4
1340: PPUSH
1341: LD_STRING D1-Lisa-1
1343: PPUSH
1344: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1348: LD_EXP 1
1352: PPUSH
1353: LD_STRING D1-JMM-2
1355: PPUSH
1356: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1360: LD_EXP 9
1364: PPUSH
1365: LD_STRING D1-Pow-2
1367: PPUSH
1368: CALL_OW 94
// if Cyrus then
1372: LD_EXP 3
1376: IFFALSE 1402
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1378: LD_EXP 3
1382: PPUSH
1383: LD_STRING D1-Cyrus-2
1385: PPUSH
1386: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-3
1397: PPUSH
1398: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1402: LD_EXP 9
1406: PPUSH
1407: LD_STRING D1-Pow-3
1409: PPUSH
1410: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1414: LD_EXP 1
1418: PPUSH
1419: LD_STRING D1-JMM-4
1421: PPUSH
1422: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1426: LD_EXP 9
1430: PPUSH
1431: LD_STRING D1-Pow-4
1433: PPUSH
1434: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1438: LD_EXP 9
1442: PPUSH
1443: LD_STRING D1-Pow-4a
1445: PPUSH
1446: CALL_OW 94
// if Cyrus then
1450: LD_EXP 3
1454: IFFALSE 1468
// Say ( Cyrus , D1-Cyrus-4 ) ;
1456: LD_EXP 3
1460: PPUSH
1461: LD_STRING D1-Cyrus-4
1463: PPUSH
1464: CALL_OW 88
// if Bobby then
1468: LD_EXP 2
1472: IFFALSE 1510
// begin Say ( Bobby , D1-Bobby-4 ) ;
1474: LD_EXP 2
1478: PPUSH
1479: LD_STRING D1-Bobby-4
1481: PPUSH
1482: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1486: LD_EXP 4
1490: PPUSH
1491: LD_STRING D1-Lisa-4
1493: PPUSH
1494: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1498: LD_EXP 1
1502: PPUSH
1503: LD_STRING D1-JMM-5
1505: PPUSH
1506: CALL_OW 88
// end ; InGameOff ;
1510: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1514: LD_INT 22
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 69
1528: PUSH
1529: LD_EXP 6
1533: PUSH
1534: LD_EXP 7
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: DIFF
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1551: LD_STRING M1
1553: PPUSH
1554: CALL_OW 337
// SaveForQuickRestart ;
1558: CALL_OW 22
// end ;
1562: PPOPN 1
1564: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1565: LD_INT 7
1567: PPUSH
1568: LD_INT 22
1570: PUSH
1571: LD_INT 1
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 70
1582: PUSH
1583: LD_INT 0
1585: GREATER
1586: IFFALSE 2003
1588: GO 1590
1590: DISABLE
// begin InGameOn ;
1591: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1595: LD_INT 22
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 21
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PPUSH
1619: CALL_OW 69
1623: PPUSH
1624: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1628: LD_INT 24
1630: PPUSH
1631: LD_INT 32
1633: PPUSH
1634: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1638: LD_EXP 5
1642: PPUSH
1643: LD_INT 4
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 4
1660: PPUSH
1661: CALL_OW 336
// wait ( 0 0$1 ) ;
1665: LD_INT 35
1667: PPUSH
1668: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1672: LD_EXP 5
1676: PPUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_INT 38
1682: PPUSH
1683: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1687: LD_EXP 5
1691: PPUSH
1692: LD_EXP 1
1696: PPUSH
1697: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1701: LD_INT 22
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 21
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PPUSH
1725: CALL_OW 69
1729: PUSH
1730: LD_EXP 5
1734: PUSH
1735: EMPTY
1736: LIST
1737: DIFF
1738: PPUSH
1739: LD_EXP 5
1743: PPUSH
1744: CALL_OW 119
// wait ( 0 0$1 ) ;
1748: LD_INT 35
1750: PPUSH
1751: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1755: LD_EXP 5
1759: PPUSH
1760: LD_STRING D2a-Khat-1
1762: PPUSH
1763: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1767: LD_EXP 1
1771: PPUSH
1772: LD_STRING D2a-JMM-1
1774: PPUSH
1775: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1779: LD_EXP 5
1783: PPUSH
1784: LD_STRING D2a-Khat-2
1786: PPUSH
1787: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1791: LD_EXP 1
1795: PPUSH
1796: LD_STRING D2a-JMM-2
1798: PPUSH
1799: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1803: LD_EXP 5
1807: PPUSH
1808: LD_STRING D2a-Khat-3
1810: PPUSH
1811: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1815: LD_EXP 1
1819: PPUSH
1820: LD_STRING D2a-JMM-3
1822: PPUSH
1823: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1827: LD_EXP 5
1831: PPUSH
1832: LD_STRING D2a-Khat-4
1834: PPUSH
1835: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1839: LD_EXP 1
1843: PPUSH
1844: LD_STRING D2a-JMM-4
1846: PPUSH
1847: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1851: LD_EXP 5
1855: PPUSH
1856: LD_STRING D2a-Khat-5
1858: PPUSH
1859: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_STRING D2a-JMM-5
1870: PPUSH
1871: CALL_OW 88
// InGameOff ;
1875: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1879: LD_INT 22
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 21
1891: PUSH
1892: LD_INT 1
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 3
1901: PUSH
1902: LD_INT 24
1904: PUSH
1905: LD_INT 800
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: PUSH
1926: LD_INT 0
1928: GREATER
1929: IFFALSE 2003
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1931: LD_EXP 5
1935: PPUSH
1936: LD_INT 22
1938: PUSH
1939: LD_INT 1
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 21
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 3
1958: PUSH
1959: LD_INT 24
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: PPUSH
1978: CALL_OW 69
1982: PUSH
1983: LD_INT 1
1985: ARRAY
1986: PPUSH
1987: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1991: LD_EXP 5
1995: PPUSH
1996: LD_STRING D2b-Khat-1
1998: PPUSH
1999: CALL_OW 88
// end ; end ;
2003: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
2004: LD_INT 15
2006: PPUSH
2007: LD_INT 22
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PPUSH
2017: CALL_OW 70
2021: PUSH
2022: LD_INT 0
2024: GREATER
2025: IFFALSE 3182
2027: GO 2029
2029: DISABLE
2030: LD_INT 0
2032: PPUSH
2033: PPUSH
2034: PPUSH
2035: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: LD_INT 999
2043: PUSH
2044: LD_INT 999
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2054: LD_ADDR_VAR 0 4
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 1
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PPUSH
2083: CALL_OW 69
2087: PUSH
2088: LD_EXP 1
2092: PUSH
2093: LD_EXP 2
2097: PUSH
2098: LD_EXP 3
2102: PUSH
2103: LD_EXP 4
2107: PUSH
2108: LD_EXP 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: DIFF
2120: ST_TO_ADDR
// PrepareDeadSoldiers ;
2121: CALL 11493 0 0
// spotCorpses = 1 ;
2125: LD_ADDR_EXP 32
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
// InGameOn ;
2133: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2137: LD_INT 23
2139: PPUSH
2140: LD_INT 12
2142: PPUSH
2143: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2147: LD_ADDR_VAR 0 3
2151: PUSH
2152: LD_VAR 0 2
2156: PUSH
2157: LD_INT 1
2159: ARRAY
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2165: LD_ADDR_VAR 0 1
2169: PUSH
2170: LD_INT 22
2172: PUSH
2173: LD_INT 1
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 21
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PPUSH
2194: CALL_OW 69
2198: PUSH
2199: LD_EXP 1
2203: PUSH
2204: LD_EXP 5
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: DIFF
2213: PUSH
2214: FOR_IN
2215: IFFALSE 2266
// if IsOK ( i ) then
2217: LD_VAR 0 1
2221: PPUSH
2222: CALL_OW 302
2226: IFFALSE 2264
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2228: LD_ADDR_VAR 0 2
2232: PUSH
2233: LD_VAR 0 2
2237: PUSH
2238: LD_VAR 0 1
2242: PUSH
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 16
2250: PPUSH
2251: CALL_OW 299
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: ADD
2263: ST_TO_ADDR
2264: GO 2214
2266: POP
2267: POP
// for i = 2 to distanceTab do
2268: LD_ADDR_VAR 0 1
2272: PUSH
2273: DOUBLE
2274: LD_INT 2
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2330
// if distanceTab [ i ] [ 2 ] < min then
2286: LD_VAR 0 2
2290: PUSH
2291: LD_VAR 0 1
2295: ARRAY
2296: PUSH
2297: LD_INT 2
2299: ARRAY
2300: PUSH
2301: LD_VAR 0 3
2305: LESS
2306: IFFALSE 2328
// min = distanceTab [ i ] [ 2 ] ;
2308: LD_ADDR_VAR 0 3
2312: PUSH
2313: LD_VAR 0 2
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: PUSH
2324: LD_INT 2
2326: ARRAY
2327: ST_TO_ADDR
2328: GO 2283
2330: POP
2331: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2332: LD_ADDR_VAR 0 1
2336: PUSH
2337: LD_INT 22
2339: PUSH
2340: LD_INT 1
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 21
2349: PUSH
2350: LD_INT 1
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PPUSH
2361: CALL_OW 69
2365: PUSH
2366: LD_EXP 1
2370: PUSH
2371: EMPTY
2372: LIST
2373: DIFF
2374: PUSH
2375: FOR_IN
2376: IFFALSE 2446
// begin ComMoveToArea ( i , DeadCutscene ) ;
2378: LD_VAR 0 1
2382: PPUSH
2383: LD_INT 28
2385: PPUSH
2386: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2390: LD_EXP 1
2394: PPUSH
2395: LD_INT 30
2397: PPUSH
2398: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2402: LD_VAR 0 1
2406: PPUSH
2407: LD_INT 23
2409: PPUSH
2410: LD_INT 11
2412: PPUSH
2413: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2417: LD_EXP 1
2421: PPUSH
2422: LD_INT 23
2424: PPUSH
2425: LD_INT 11
2427: PPUSH
2428: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2432: LD_EXP 34
2436: PPUSH
2437: LD_INT 250
2439: PPUSH
2440: CALL_OW 234
// end ;
2444: GO 2375
2446: POP
2447: POP
// for i = 2 to distanceTab do
2448: LD_ADDR_VAR 0 1
2452: PUSH
2453: DOUBLE
2454: LD_INT 2
2456: DEC
2457: ST_TO_ADDR
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_TO
2464: IFFALSE 2850
// begin if distanceTab [ i ] [ 2 ] = min then
2466: LD_VAR 0 2
2470: PUSH
2471: LD_VAR 0 1
2475: ARRAY
2476: PUSH
2477: LD_INT 2
2479: ARRAY
2480: PUSH
2481: LD_VAR 0 3
2485: EQUAL
2486: IFFALSE 2848
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2488: LD_VAR 0 2
2492: PUSH
2493: LD_VAR 0 1
2497: ARRAY
2498: PUSH
2499: LD_INT 1
2501: ARRAY
2502: PUSH
2503: LD_EXP 2
2507: EQUAL
2508: IFFALSE 2522
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2510: LD_EXP 2
2514: PPUSH
2515: LD_STRING DCorpses-Bobby-1
2517: PPUSH
2518: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2522: LD_VAR 0 2
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PUSH
2537: LD_EXP 3
2541: EQUAL
2542: IFFALSE 2556
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2544: LD_EXP 3
2548: PPUSH
2549: LD_STRING DCorpses-Cyrus-1
2551: PPUSH
2552: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2556: LD_VAR 0 2
2560: PUSH
2561: LD_VAR 0 1
2565: ARRAY
2566: PUSH
2567: LD_INT 1
2569: ARRAY
2570: PUSH
2571: LD_EXP 4
2575: EQUAL
2576: IFFALSE 2590
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2578: LD_EXP 4
2582: PPUSH
2583: LD_STRING DCorpses-Lisa-1
2585: PPUSH
2586: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2590: LD_VAR 0 2
2594: PUSH
2595: LD_VAR 0 1
2599: ARRAY
2600: PUSH
2601: LD_INT 1
2603: ARRAY
2604: PUSH
2605: LD_VAR 0 4
2609: PUSH
2610: LD_INT 1
2612: ARRAY
2613: EQUAL
2614: PUSH
2615: LD_VAR 0 4
2619: PUSH
2620: LD_INT 1
2622: ARRAY
2623: PPUSH
2624: CALL_OW 258
2628: PUSH
2629: LD_INT 1
2631: EQUAL
2632: AND
2633: IFFALSE 2651
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2635: LD_VAR 0 4
2639: PUSH
2640: LD_INT 1
2642: ARRAY
2643: PPUSH
2644: LD_STRING DCorpses-Sol1-1
2646: PPUSH
2647: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2651: LD_VAR 0 2
2655: PUSH
2656: LD_VAR 0 1
2660: ARRAY
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PUSH
2666: LD_VAR 0 4
2670: PUSH
2671: LD_INT 1
2673: ARRAY
2674: EQUAL
2675: PUSH
2676: LD_VAR 0 4
2680: PUSH
2681: LD_INT 1
2683: ARRAY
2684: PPUSH
2685: CALL_OW 258
2689: PUSH
2690: LD_INT 2
2692: EQUAL
2693: AND
2694: IFFALSE 2712
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2696: LD_VAR 0 4
2700: PUSH
2701: LD_INT 1
2703: ARRAY
2704: PPUSH
2705: LD_STRING DCorpses-FSol1-1
2707: PPUSH
2708: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2712: LD_VAR 0 2
2716: PUSH
2717: LD_VAR 0 1
2721: ARRAY
2722: PUSH
2723: LD_INT 1
2725: ARRAY
2726: PUSH
2727: LD_VAR 0 4
2731: PUSH
2732: LD_INT 2
2734: ARRAY
2735: EQUAL
2736: PUSH
2737: LD_VAR 0 4
2741: PUSH
2742: LD_INT 2
2744: ARRAY
2745: PPUSH
2746: CALL_OW 258
2750: PUSH
2751: LD_INT 1
2753: EQUAL
2754: AND
2755: IFFALSE 2773
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2757: LD_VAR 0 4
2761: PUSH
2762: LD_INT 2
2764: ARRAY
2765: PPUSH
2766: LD_STRING DCorpses-Sol1-1
2768: PPUSH
2769: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2773: LD_VAR 0 2
2777: PUSH
2778: LD_VAR 0 1
2782: ARRAY
2783: PUSH
2784: LD_INT 1
2786: ARRAY
2787: PUSH
2788: LD_VAR 0 4
2792: PUSH
2793: LD_INT 2
2795: ARRAY
2796: EQUAL
2797: PUSH
2798: LD_VAR 0 4
2802: PUSH
2803: LD_INT 2
2805: ARRAY
2806: PPUSH
2807: CALL_OW 258
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: AND
2816: IFFALSE 2834
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2818: LD_VAR 0 4
2822: PUSH
2823: LD_INT 2
2825: ARRAY
2826: PPUSH
2827: LD_STRING DCorpses-FSol1-1
2829: PPUSH
2830: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2834: LD_EXP 34
2838: PPUSH
2839: LD_INT 150
2841: PPUSH
2842: CALL_OW 234
// break ;
2846: GO 2850
// end ; end ;
2848: GO 2463
2850: POP
2851: POP
// repeat wait ( 0 0$1 ) ;
2852: LD_INT 35
2854: PPUSH
2855: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2859: LD_ADDR_VAR 0 1
2863: PUSH
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 21
2876: PUSH
2877: LD_INT 1
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_EXP 1
2897: PUSH
2898: EMPTY
2899: LIST
2900: DIFF
2901: PUSH
2902: FOR_IN
2903: IFFALSE 2973
// begin ComMoveToArea ( i , DeadCutscene ) ;
2905: LD_VAR 0 1
2909: PPUSH
2910: LD_INT 28
2912: PPUSH
2913: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2917: LD_EXP 1
2921: PPUSH
2922: LD_INT 30
2924: PPUSH
2925: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2929: LD_VAR 0 1
2933: PPUSH
2934: LD_INT 23
2936: PPUSH
2937: LD_INT 11
2939: PPUSH
2940: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2944: LD_EXP 1
2948: PPUSH
2949: LD_INT 23
2951: PPUSH
2952: LD_INT 11
2954: PPUSH
2955: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2959: LD_EXP 34
2963: PPUSH
2964: LD_INT 250
2966: PPUSH
2967: CALL_OW 234
// end ;
2971: GO 2902
2973: POP
2974: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2975: LD_EXP 1
2979: PPUSH
2980: LD_INT 30
2982: PPUSH
2983: CALL_OW 308
2987: IFFALSE 2852
// wait ( 0 0$3 ) ;
2989: LD_INT 105
2991: PPUSH
2992: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2996: LD_EXP 1
3000: PPUSH
3001: LD_STRING DCorpses-JMM-1
3003: PPUSH
3004: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3008: LD_EXP 34
3012: PPUSH
3013: LD_INT 100
3015: PPUSH
3016: CALL_OW 234
// if IsOK ( Khatam ) then
3020: LD_EXP 5
3024: PPUSH
3025: CALL_OW 302
3029: IFFALSE 3166
// begin repeat wait ( 0 0$1 ) ;
3031: LD_INT 35
3033: PPUSH
3034: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3038: LD_EXP 5
3042: PPUSH
3043: LD_EXP 34
3047: PPUSH
3048: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3052: LD_EXP 5
3056: PPUSH
3057: LD_EXP 34
3061: PPUSH
3062: CALL_OW 296
3066: PUSH
3067: LD_INT 2
3069: LESS
3070: IFFALSE 3031
// spotCorpses = 0 ;
3072: LD_ADDR_EXP 32
3076: PUSH
3077: LD_INT 0
3079: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3080: LD_EXP 34
3084: PPUSH
3085: LD_INT 10
3087: PPUSH
3088: CALL_OW 234
// wait ( 0 0$3 ) ;
3092: LD_INT 105
3094: PPUSH
3095: CALL_OW 67
// KillUnit ( DyingSold ) ;
3099: LD_EXP 34
3103: PPUSH
3104: CALL_OW 66
// wait ( 0 0$1 ) ;
3108: LD_INT 35
3110: PPUSH
3111: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3115: LD_EXP 1
3119: PUSH
3120: LD_EXP 5
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PPUSH
3129: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3133: LD_EXP 5
3137: PPUSH
3138: LD_EXP 1
3142: PPUSH
3143: CALL_OW 119
// wait ( 0 0$1 ) ;
3147: LD_INT 35
3149: PPUSH
3150: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3154: LD_EXP 5
3158: PPUSH
3159: LD_STRING DCorpses-Khat-1
3161: PPUSH
3162: CALL_OW 88
// end ; InGameOff ;
3166: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3170: LD_EXP 1
3174: PPUSH
3175: LD_STRING DCorpses-JMM-2
3177: PPUSH
3178: CALL_OW 88
// end ;
3182: PPOPN 4
3184: END
// every 0 0$1 trigger spotCorpses = 1 do
3185: LD_EXP 32
3189: PUSH
3190: LD_INT 1
3192: EQUAL
3193: IFFALSE 3211
3195: GO 3197
3197: DISABLE
// begin enable ;
3198: ENABLE
// SetLives ( DyingSold , 10 ) ;
3199: LD_EXP 34
3203: PPUSH
3204: LD_INT 10
3206: PPUSH
3207: CALL_OW 234
// end ;
3211: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 15 ) do var i ;
3212: LD_INT 8
3214: PPUSH
3215: LD_INT 22
3217: PUSH
3218: LD_INT 1
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: CALL_OW 70
3229: PUSH
3230: LD_INT 0
3232: GREATER
3233: PUSH
3234: LD_INT 22
3236: PUSH
3237: LD_INT 1
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PPUSH
3244: CALL_OW 69
3248: PPUSH
3249: LD_EXP 7
3253: PPUSH
3254: CALL_OW 74
3258: PPUSH
3259: LD_EXP 7
3263: PPUSH
3264: CALL_OW 296
3268: PUSH
3269: LD_INT 15
3271: LESS
3272: OR
3273: IFFALSE 3441
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
// begin InGameOn ;
3281: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3285: LD_EXP 7
3289: PPUSH
3290: LD_INT 250
3292: PPUSH
3293: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3297: LD_INT 3
3299: PPUSH
3300: LD_INT 4
3302: PPUSH
3303: LD_INT 2
3305: PPUSH
3306: LD_INT 1
3308: PPUSH
3309: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3313: LD_EXP 6
3317: PUSH
3318: LD_EXP 7
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: PPUSH
3327: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3331: LD_ADDR_VAR 0 1
3335: PUSH
3336: LD_INT 9
3338: PPUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PPUSH
3349: CALL_OW 70
3353: PUSH
3354: FOR_IN
3355: IFFALSE 3368
// ComFree ( i ) ;
3357: LD_VAR 0 1
3361: PPUSH
3362: CALL_OW 139
3366: GO 3354
3368: POP
3369: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3370: LD_ADDR_VAR 0 1
3374: PUSH
3375: LD_INT 22
3377: PUSH
3378: LD_INT 4
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PPUSH
3385: CALL_OW 69
3389: PUSH
3390: FOR_IN
3391: IFFALSE 3404
// ComFree ( i ) ;
3393: LD_VAR 0 1
3397: PPUSH
3398: CALL_OW 139
3402: GO 3390
3404: POP
3405: POP
// wait ( 0 0$1 ) ;
3406: LD_INT 35
3408: PPUSH
3409: CALL_OW 67
// InGameOff ;
3413: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3417: LD_EXP 6
3421: PPUSH
3422: LD_STRING DF-Sol1-1
3424: PPUSH
3425: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3429: LD_EXP 1
3433: PPUSH
3434: LD_STRING DF-JMM-1
3436: PPUSH
3437: CALL_OW 88
// end ;
3441: PPOPN 1
3443: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3444: LD_INT 19
3446: PPUSH
3447: LD_INT 22
3449: PUSH
3450: LD_INT 3
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PPUSH
3457: CALL_OW 70
3461: PUSH
3462: LD_INT 0
3464: EQUAL
3465: IFFALSE 3578
3467: GO 3469
3469: DISABLE
// begin if not IsDead ( Brian ) then
3470: LD_EXP 6
3474: PPUSH
3475: CALL_OW 301
3479: NOT
3480: IFFALSE 3494
// SetSide ( Brian , 1 ) ;
3482: LD_EXP 6
3486: PPUSH
3487: LD_INT 1
3489: PPUSH
3490: CALL_OW 235
// if not IsDead ( Jerry ) then
3494: LD_EXP 7
3498: PPUSH
3499: CALL_OW 301
3503: NOT
3504: IFFALSE 3518
// SetSide ( Jerry , 1 ) ;
3506: LD_EXP 7
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3518: LD_INT 22
3520: PUSH
3521: LD_INT 1
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PUSH
3528: LD_INT 25
3530: PUSH
3531: LD_INT 4
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PPUSH
3542: CALL_OW 69
3546: PUSH
3547: LD_INT 0
3549: GREATER
3550: IFFALSE 3566
// begin Say ( JMM , DFa-JMM-1 ) ;
3552: LD_EXP 1
3556: PPUSH
3557: LD_STRING DFa-JMM-1
3559: PPUSH
3560: CALL_OW 88
// end else
3564: GO 3578
// begin Say ( JMM , DFa-JMM-1a ) ;
3566: LD_EXP 1
3570: PPUSH
3571: LD_STRING DFa-JMM-1a
3573: PPUSH
3574: CALL_OW 88
// end ; end ;
3578: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3579: LD_INT 19
3581: PPUSH
3582: LD_INT 22
3584: PUSH
3585: LD_INT 3
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: PPUSH
3592: CALL_OW 70
3596: PUSH
3597: LD_INT 0
3599: EQUAL
3600: PUSH
3601: LD_EXP 6
3605: PPUSH
3606: CALL_OW 302
3610: NOT
3611: AND
3612: IFFALSE 3689
3614: GO 3616
3616: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3617: LD_INT 35
3619: PPUSH
3620: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3624: LD_EXP 6
3628: PPUSH
3629: CALL_OW 256
3633: PUSH
3634: LD_INT 250
3636: GREATER
3637: IFFALSE 3617
// Say ( Brian , DFb-Sol1-1 ) ;
3639: LD_EXP 6
3643: PPUSH
3644: LD_STRING DFb-Sol1-1
3646: PPUSH
3647: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3651: LD_EXP 6
3655: PPUSH
3656: LD_INT 78
3658: PPUSH
3659: LD_INT 74
3661: PPUSH
3662: CALL_OW 111
// if IsDead ( Jerry ) then
3666: LD_EXP 7
3670: PPUSH
3671: CALL_OW 301
3675: IFFALSE 3689
// Say ( Brian , DFb-Sol1-1a ) end ;
3677: LD_EXP 6
3681: PPUSH
3682: LD_STRING DFb-Sol1-1a
3684: PPUSH
3685: CALL_OW 88
3689: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3690: LD_INT 22
3692: PUSH
3693: LD_INT 1
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: PUSH
3700: LD_INT 21
3702: PUSH
3703: LD_INT 2
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: PPUSH
3714: CALL_OW 69
3718: PUSH
3719: LD_INT 0
3721: EQUAL
3722: IFFALSE 3810
3724: GO 3726
3726: DISABLE
3727: LD_INT 0
3729: PPUSH
// begin enable ;
3730: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3731: LD_ADDR_VAR 0 1
3735: PUSH
3736: LD_INT 22
3738: PUSH
3739: LD_INT 3
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: PUSH
3746: LD_INT 21
3748: PUSH
3749: LD_INT 3
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_INT 30
3758: PUSH
3759: LD_INT 31
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: LIST
3770: PPUSH
3771: CALL_OW 69
3775: PUSH
3776: FOR_IN
3777: IFFALSE 3808
// begin if See ( 1 , i ) then
3779: LD_INT 1
3781: PPUSH
3782: LD_VAR 0 1
3786: PPUSH
3787: CALL_OW 292
3791: IFFALSE 3806
// begin disable ;
3793: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3794: LD_EXP 1
3798: PPUSH
3799: LD_STRING DX1-JMM-1
3801: PPUSH
3802: CALL_OW 88
// end ; end ;
3806: GO 3776
3808: POP
3809: POP
// end ;
3810: PPOPN 1
3812: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3813: LD_INT 1
3815: PPUSH
3816: LD_INT 11
3818: PPUSH
3819: CALL_OW 294
3823: IFFALSE 4237
3825: GO 3827
3827: DISABLE
3828: LD_INT 0
3830: PPUSH
3831: PPUSH
// begin DialogueOn ;
3832: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3836: LD_INT 11
3838: PPUSH
3839: LD_INT 22
3841: PUSH
3842: LD_INT 3
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: PUSH
3849: LD_INT 21
3851: PUSH
3852: LD_INT 1
3854: PUSH
3855: EMPTY
3856: LIST
3857: LIST
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: PPUSH
3863: CALL_OW 70
3867: PUSH
3868: LD_INT 1
3870: ARRAY
3871: PPUSH
3872: LD_STRING DX3-Rus1-1
3874: PPUSH
3875: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3879: LD_EXP 1
3883: PPUSH
3884: LD_STRING DX3-JMM-1
3886: PPUSH
3887: CALL_OW 88
// DialogueOff ;
3891: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_INT 11
3902: PPUSH
3903: LD_INT 22
3905: PUSH
3906: LD_INT 3
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: LD_INT 21
3915: PUSH
3916: LD_INT 1
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PPUSH
3927: CALL_OW 70
3931: PUSH
3932: FOR_IN
3933: IFFALSE 3953
// southBaseDefenders = southBaseDefenders ^ i ;
3935: LD_ADDR_EXP 25
3939: PUSH
3940: LD_EXP 25
3944: PUSH
3945: LD_VAR 0 1
3949: ADD
3950: ST_TO_ADDR
3951: GO 3932
3953: POP
3954: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
3955: LD_INT 455
3957: PUSH
3958: LD_INT 420
3960: PUSH
3961: LD_INT 315
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: LIST
3968: PUSH
3969: LD_OWVAR 67
3973: ARRAY
3974: PPUSH
3975: CALL_OW 67
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ) ;
3979: LD_INT 22
3981: PUSH
3982: LD_INT 3
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: PUSH
3989: LD_INT 21
3991: PUSH
3992: LD_INT 1
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 25
4001: PUSH
4002: LD_INT 3
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: LIST
4013: PPUSH
4014: CALL_OW 69
4018: PPUSH
4019: CALL_OW 122
// wait ( 0 0$1 ) ;
4023: LD_INT 35
4025: PPUSH
4026: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
4030: LD_INT 35
4032: PPUSH
4033: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
4037: LD_ADDR_VAR 0 1
4041: PUSH
4042: LD_INT 22
4044: PUSH
4045: LD_INT 3
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: PUSH
4052: LD_INT 21
4054: PUSH
4055: LD_INT 2
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 58
4064: PUSH
4065: EMPTY
4066: LIST
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 69
4077: PUSH
4078: FOR_IN
4079: IFFALSE 4149
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
4081: LD_ADDR_VAR 0 2
4085: PUSH
4086: LD_INT 22
4088: PUSH
4089: LD_INT 3
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: LD_INT 21
4098: PUSH
4099: LD_INT 1
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 25
4108: PUSH
4109: LD_INT 3
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: LIST
4120: PPUSH
4121: CALL_OW 69
4125: PUSH
4126: FOR_IN
4127: IFFALSE 4145
// begin ComEnterUnit ( j , i ) ;
4129: LD_VAR 0 2
4133: PPUSH
4134: LD_VAR 0 1
4138: PPUSH
4139: CALL_OW 120
// end ;
4143: GO 4126
4145: POP
4146: POP
// end ;
4147: GO 4078
4149: POP
4150: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4151: LD_INT 22
4153: PUSH
4154: LD_INT 3
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: LD_INT 21
4163: PUSH
4164: LD_INT 2
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: PUSH
4171: LD_INT 58
4173: PUSH
4174: EMPTY
4175: LIST
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: LIST
4181: PPUSH
4182: CALL_OW 69
4186: PUSH
4187: LD_INT 0
4189: EQUAL
4190: PUSH
4191: LD_INT 22
4193: PUSH
4194: LD_INT 3
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PUSH
4201: LD_INT 21
4203: PUSH
4204: LD_INT 1
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 25
4213: PUSH
4214: LD_INT 3
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: LIST
4225: PPUSH
4226: CALL_OW 69
4230: PUSH
4231: LD_INT 0
4233: EQUAL
4234: OR
4235: IFFALSE 4030
// end ;
4237: PPOPN 2
4239: END
// every 0 0$1 do var i , tmp ;
4240: GO 4242
4242: DISABLE
4243: LD_INT 0
4245: PPUSH
4246: PPUSH
// begin enable ;
4247: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4248: LD_ADDR_VAR 0 2
4252: PUSH
4253: LD_INT 22
4255: PUSH
4256: LD_INT 1
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PUSH
4263: LD_INT 21
4265: PUSH
4266: LD_INT 1
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PPUSH
4277: CALL_OW 69
4281: ST_TO_ADDR
// for i in tmp do
4282: LD_ADDR_VAR 0 1
4286: PUSH
4287: LD_VAR 0 2
4291: PUSH
4292: FOR_IN
4293: IFFALSE 4415
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4295: LD_VAR 0 1
4299: PPUSH
4300: LD_INT 5
4302: PPUSH
4303: CALL_OW 296
4307: PUSH
4308: LD_INT 4
4310: LESS
4311: PUSH
4312: LD_VAR 0 1
4316: PPUSH
4317: LD_INT 4
4319: PPUSH
4320: CALL_OW 296
4324: PUSH
4325: LD_INT 4
4327: LESS
4328: OR
4329: IFFALSE 4413
// begin disable ;
4331: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4332: LD_INT 5
4334: PUSH
4335: LD_INT 4
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PPUSH
4342: CALL_OW 85
// if IsOK ( Bobby ) then
4346: LD_EXP 2
4350: PPUSH
4351: CALL_OW 302
4355: IFFALSE 4392
// begin DialogueOn ;
4357: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4361: LD_EXP 2
4365: PPUSH
4366: LD_STRING DX2-Bobby-1
4368: PPUSH
4369: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4373: LD_EXP 1
4377: PPUSH
4378: LD_STRING DX2-JMM-1a
4380: PPUSH
4381: CALL_OW 88
// DialogueOff ;
4385: CALL_OW 7
// disable ;
4389: DISABLE
// end else
4390: GO 4413
// begin DialogueOn ;
4392: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4396: LD_EXP 1
4400: PPUSH
4401: LD_STRING DX2-JMM-1
4403: PPUSH
4404: CALL_OW 88
// DialogueOff ;
4408: CALL_OW 7
// disable ;
4412: DISABLE
// end ; end ; end ;
4413: GO 4292
4415: POP
4416: POP
// end ;
4417: PPOPN 2
4419: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4420: LD_INT 22
4422: PUSH
4423: LD_INT 1
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: LD_INT 23
4432: PUSH
4433: LD_INT 3
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: LD_INT 21
4442: PUSH
4443: LD_INT 2
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: LD_INT 34
4452: PUSH
4453: LD_INT 42
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: PPUSH
4466: CALL_OW 69
4470: PUSH
4471: LD_INT 1
4473: GREATEREQUAL
4474: IFFALSE 4949
4476: GO 4478
4478: DISABLE
4479: LD_INT 0
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4485: LD_ADDR_VAR 0 1
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: LD_INT 1
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 23
4502: PUSH
4503: LD_INT 3
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PUSH
4510: LD_INT 21
4512: PUSH
4513: LD_INT 2
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: PUSH
4520: LD_INT 34
4522: PUSH
4523: LD_INT 42
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4541: LD_ADDR_VAR 0 2
4545: PUSH
4546: LD_INT 22
4548: PUSH
4549: LD_INT 1
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 21
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 26
4568: PUSH
4569: LD_INT 1
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: LIST
4580: PPUSH
4581: CALL_OW 69
4585: PUSH
4586: LD_EXP 1
4590: PUSH
4591: LD_EXP 3
4595: PUSH
4596: LD_EXP 2
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: LIST
4605: DIFF
4606: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4607: LD_ADDR_VAR 0 3
4611: PUSH
4612: LD_INT 22
4614: PUSH
4615: LD_INT 1
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 21
4624: PUSH
4625: LD_INT 1
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: LD_INT 26
4634: PUSH
4635: LD_INT 2
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 69
4651: PUSH
4652: LD_EXP 4
4656: PUSH
4657: EMPTY
4658: LIST
4659: DIFF
4660: ST_TO_ADDR
// DialogueOn ;
4661: CALL_OW 6
// if not IsInUnit ( JMM ) then
4665: LD_EXP 1
4669: PPUSH
4670: CALL_OW 310
4674: NOT
4675: IFFALSE 4689
// Say ( JMM , DX2a-JMM-1 ) ;
4677: LD_EXP 1
4681: PPUSH
4682: LD_STRING DX2a-JMM-1
4684: PPUSH
4685: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4689: LD_EXP 2
4693: PPUSH
4694: CALL_OW 310
4698: PUSH
4699: LD_VAR 0 1
4703: PUSH
4704: LD_INT 1
4706: ARRAY
4707: EQUAL
4708: IFFALSE 4722
// Say ( Bobby , DX2a-Bobby-1 ) ;
4710: LD_EXP 2
4714: PPUSH
4715: LD_STRING DX2a-Bobby-1
4717: PPUSH
4718: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4722: LD_EXP 3
4726: PPUSH
4727: CALL_OW 310
4731: PUSH
4732: LD_VAR 0 1
4736: PUSH
4737: LD_INT 1
4739: ARRAY
4740: EQUAL
4741: IFFALSE 4755
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4743: LD_EXP 3
4747: PPUSH
4748: LD_STRING DX2a-Cyrus-1
4750: PPUSH
4751: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4755: LD_EXP 4
4759: PPUSH
4760: CALL_OW 310
4764: PUSH
4765: LD_VAR 0 1
4769: PUSH
4770: LD_INT 1
4772: ARRAY
4773: EQUAL
4774: IFFALSE 4788
// Say ( Lisa , DX2a-Lisa-1 ) ;
4776: LD_EXP 4
4780: PPUSH
4781: LD_STRING DX2a-Lisa-1
4783: PPUSH
4784: CALL_OW 88
// for i in temp1 do
4788: LD_ADDR_VAR 0 4
4792: PUSH
4793: LD_VAR 0 2
4797: PUSH
4798: FOR_IN
4799: IFFALSE 4836
// if IsInUnit ( i ) = tmp [ 1 ] then
4801: LD_VAR 0 4
4805: PPUSH
4806: CALL_OW 310
4810: PUSH
4811: LD_VAR 0 1
4815: PUSH
4816: LD_INT 1
4818: ARRAY
4819: EQUAL
4820: IFFALSE 4834
// Say ( i , DX2a-Sol1-1 ) ;
4822: LD_VAR 0 4
4826: PPUSH
4827: LD_STRING DX2a-Sol1-1
4829: PPUSH
4830: CALL_OW 88
4834: GO 4798
4836: POP
4837: POP
// for i in temp2 do
4838: LD_ADDR_VAR 0 4
4842: PUSH
4843: LD_VAR 0 3
4847: PUSH
4848: FOR_IN
4849: IFFALSE 4886
// if IsInUnit ( i ) = tmp [ 1 ] then
4851: LD_VAR 0 4
4855: PPUSH
4856: CALL_OW 310
4860: PUSH
4861: LD_VAR 0 1
4865: PUSH
4866: LD_INT 1
4868: ARRAY
4869: EQUAL
4870: IFFALSE 4884
// Say ( i , DX2a-FSol1-1 ) ;
4872: LD_VAR 0 4
4876: PPUSH
4877: LD_STRING DX2a-FSol1-1
4879: PPUSH
4880: CALL_OW 88
4884: GO 4848
4886: POP
4887: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4888: LD_EXP 1
4892: PPUSH
4893: CALL_OW 310
4897: PUSH
4898: LD_VAR 0 1
4902: PUSH
4903: LD_INT 1
4905: ARRAY
4906: EQUAL
4907: IFFALSE 4921
// Say ( JMM , DX2b-JMM-1 ) ;
4909: LD_EXP 1
4913: PPUSH
4914: LD_STRING DX2b-JMM-1
4916: PPUSH
4917: CALL_OW 88
// if not IsInUnit ( JMM ) then
4921: LD_EXP 1
4925: PPUSH
4926: CALL_OW 310
4930: NOT
4931: IFFALSE 4945
// Say ( JMM , DX2a-JMM-2 ) ;
4933: LD_EXP 1
4937: PPUSH
4938: LD_STRING DX2a-JMM-2
4940: PPUSH
4941: CALL_OW 88
// DialogueOff ;
4945: CALL_OW 7
// end ;
4949: PPOPN 4
4951: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4952: LD_INT 1
4954: PPUSH
4955: CALL_OW 255
4959: PUSH
4960: LD_INT 1
4962: EQUAL
4963: PUSH
4964: LD_INT 10
4966: PPUSH
4967: CALL_OW 255
4971: PUSH
4972: LD_INT 1
4974: EQUAL
4975: OR
4976: IFFALSE 5036
4978: GO 4980
4980: DISABLE
// begin DialogueOn ;
4981: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4985: LD_EXP 1
4989: PPUSH
4990: LD_STRING D3-JMM-1
4992: PPUSH
4993: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4997: LD_EXP 9
5001: PPUSH
5002: LD_STRING D3-Pow-1
5004: PPUSH
5005: CALL_OW 94
// if IsOK ( Cyrus ) then
5009: LD_EXP 3
5013: PPUSH
5014: CALL_OW 302
5018: IFFALSE 5032
// Say ( Cyrus , D3-Cyrus-1 ) ;
5020: LD_EXP 3
5024: PPUSH
5025: LD_STRING D3-Cyrus-1
5027: PPUSH
5028: CALL_OW 88
// DialogueOff ;
5032: CALL_OW 7
// end ;
5036: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var temp , i ;
5037: LD_INT 1
5039: PPUSH
5040: CALL_OW 255
5044: PUSH
5045: LD_INT 1
5047: EQUAL
5048: PUSH
5049: LD_INT 10
5051: PPUSH
5052: CALL_OW 255
5056: PUSH
5057: LD_INT 1
5059: EQUAL
5060: AND
5061: PUSH
5062: LD_INT 22
5064: PPUSH
5065: LD_INT 22
5067: PUSH
5068: LD_INT 3
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PUSH
5075: LD_INT 21
5077: PUSH
5078: LD_INT 1
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PPUSH
5089: CALL_OW 70
5093: PUSH
5094: LD_INT 0
5096: EQUAL
5097: AND
5098: IFFALSE 6337
5100: GO 5102
5102: DISABLE
5103: LD_INT 0
5105: PPUSH
5106: PPUSH
// begin DialogueOn ;
5107: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5111: LD_EXP 1
5115: PPUSH
5116: LD_STRING D3a-JMM-1
5118: PPUSH
5119: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5123: LD_EXP 9
5127: PPUSH
5128: LD_STRING D3a-Pow-1
5130: PPUSH
5131: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5135: LD_EXP 1
5139: PPUSH
5140: LD_STRING D3a-JMM-2
5142: PPUSH
5143: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5147: LD_EXP 9
5151: PPUSH
5152: LD_STRING D3a-Pow-2
5154: PPUSH
5155: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5159: LD_EXP 1
5163: PPUSH
5164: LD_STRING D3a-JMM-3
5166: PPUSH
5167: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5171: LD_EXP 9
5175: PPUSH
5176: LD_STRING D3a-Pow-3
5178: PPUSH
5179: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3a-JMM-4
5190: PPUSH
5191: CALL_OW 88
// DialogueOff ;
5195: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5199: LD_STRING M2
5201: PPUSH
5202: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5206: LD_EXP 1
5210: PPUSH
5211: LD_STRING D3b-JMM-1
5213: PPUSH
5214: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5218: LD_INT 35
5220: PPUSH
5221: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5225: LD_INT 22
5227: PPUSH
5228: LD_INT 22
5230: PUSH
5231: LD_INT 1
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: PUSH
5238: LD_INT 25
5240: PUSH
5241: LD_INT 2
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PPUSH
5252: CALL_OW 70
5256: IFFALSE 5218
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
5258: LD_ADDR_VAR 0 1
5262: PUSH
5263: LD_INT 22
5265: PUSH
5266: LD_INT 1
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: PUSH
5273: LD_INT 23
5275: PUSH
5276: LD_INT 1
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PUSH
5283: LD_INT 25
5285: PUSH
5286: LD_INT 2
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: LD_INT 50
5295: PUSH
5296: EMPTY
5297: LIST
5298: PUSH
5299: LD_INT 56
5301: PUSH
5302: EMPTY
5303: LIST
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: PPUSH
5312: CALL_OW 69
5316: PUSH
5317: LD_EXP 1
5321: PUSH
5322: EMPTY
5323: LIST
5324: DIFF
5325: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5326: LD_INT 35
5328: PPUSH
5329: CALL_OW 67
// until temp > 0 ;
5333: LD_VAR 0 1
5337: PUSH
5338: LD_INT 0
5340: GREATER
5341: IFFALSE 5258
// wait ( 0 0$5 ) ;
5343: LD_INT 175
5345: PPUSH
5346: CALL_OW 67
// PrepareRussianHeroes ;
5350: CALL 11650 0 0
// InGameOn ;
5354: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5358: LD_EXP 8
5362: PPUSH
5363: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5367: LD_EXP 1
5371: PUSH
5372: LD_VAR 0 1
5376: PUSH
5377: LD_INT 1
5379: ARRAY
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PPUSH
5385: LD_EXP 8
5389: PPUSH
5390: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5394: LD_EXP 8
5398: PPUSH
5399: LD_VAR 0 1
5403: PUSH
5404: LD_INT 1
5406: ARRAY
5407: PPUSH
5408: CALL_OW 119
// Wait ( 0 0$02 ) ;
5412: LD_INT 70
5414: PPUSH
5415: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5419: LD_EXP 8
5423: PPUSH
5424: LD_STRING D4-Mikh-1
5426: PPUSH
5427: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5431: LD_VAR 0 1
5435: PUSH
5436: LD_INT 1
5438: ARRAY
5439: PPUSH
5440: CALL_OW 258
5444: PUSH
5445: LD_INT 1
5447: EQUAL
5448: IFFALSE 5466
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5450: LD_VAR 0 1
5454: PUSH
5455: LD_INT 1
5457: ARRAY
5458: PPUSH
5459: LD_STRING D4-Sol1-1
5461: PPUSH
5462: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5466: LD_VAR 0 1
5470: PUSH
5471: LD_INT 1
5473: ARRAY
5474: PPUSH
5475: CALL_OW 258
5479: PUSH
5480: LD_INT 2
5482: EQUAL
5483: IFFALSE 5501
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5485: LD_VAR 0 1
5489: PUSH
5490: LD_INT 1
5492: ARRAY
5493: PPUSH
5494: LD_STRING D4-FSol1-1
5496: PPUSH
5497: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5501: LD_EXP 8
5505: PPUSH
5506: LD_STRING D4-Mikh-2
5508: PPUSH
5509: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5513: LD_VAR 0 1
5517: PUSH
5518: LD_INT 1
5520: ARRAY
5521: PPUSH
5522: CALL_OW 258
5526: PUSH
5527: LD_INT 1
5529: EQUAL
5530: IFFALSE 5548
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5532: LD_VAR 0 1
5536: PUSH
5537: LD_INT 1
5539: ARRAY
5540: PPUSH
5541: LD_STRING D4-Sol1-2
5543: PPUSH
5544: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5548: LD_VAR 0 1
5552: PUSH
5553: LD_INT 1
5555: ARRAY
5556: PPUSH
5557: CALL_OW 258
5561: PUSH
5562: LD_INT 2
5564: EQUAL
5565: IFFALSE 5583
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5567: LD_VAR 0 1
5571: PUSH
5572: LD_INT 1
5574: ARRAY
5575: PPUSH
5576: LD_STRING D4-FSol1-2
5578: PPUSH
5579: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5583: LD_EXP 8
5587: PPUSH
5588: LD_STRING D4-Mikh-3
5590: PPUSH
5591: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5595: LD_VAR 0 1
5599: PUSH
5600: LD_INT 1
5602: ARRAY
5603: PPUSH
5604: CALL_OW 258
5608: PUSH
5609: LD_INT 1
5611: EQUAL
5612: IFFALSE 5630
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5614: LD_VAR 0 1
5618: PUSH
5619: LD_INT 1
5621: ARRAY
5622: PPUSH
5623: LD_STRING D4-Sol1-3
5625: PPUSH
5626: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5630: LD_VAR 0 1
5634: PUSH
5635: LD_INT 1
5637: ARRAY
5638: PPUSH
5639: CALL_OW 258
5643: PUSH
5644: LD_INT 2
5646: EQUAL
5647: IFFALSE 5665
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5649: LD_VAR 0 1
5653: PUSH
5654: LD_INT 1
5656: ARRAY
5657: PPUSH
5658: LD_STRING D4-FSol1-3
5660: PPUSH
5661: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5665: LD_EXP 8
5669: PPUSH
5670: LD_STRING D4-Mikh-4
5672: PPUSH
5673: CALL_OW 88
// case query ( Qs1 ) of 1 :
5677: LD_STRING Qs1
5679: PPUSH
5680: CALL_OW 97
5684: PUSH
5685: LD_INT 1
5687: DOUBLE
5688: EQUAL
5689: IFTRUE 5693
5691: GO 5728
5693: POP
// begin InGameOff ;
5694: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5698: LD_INT 1
5700: PPUSH
5701: LD_INT 6
5703: PPUSH
5704: LD_INT 2
5706: PPUSH
5707: LD_INT 1
5709: PPUSH
5710: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5714: LD_EXP 8
5718: PPUSH
5719: LD_INT 17
5721: PPUSH
5722: CALL_OW 113
// end ; 2 :
5726: GO 6321
5728: LD_INT 2
5730: DOUBLE
5731: EQUAL
5732: IFTRUE 5736
5734: GO 6286
5736: POP
// begin repeat wait ( 0 0$1 ) ;
5737: LD_INT 35
5739: PPUSH
5740: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5744: LD_VAR 0 1
5748: PUSH
5749: LD_INT 1
5751: ARRAY
5752: PPUSH
5753: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5757: LD_VAR 0 1
5761: PUSH
5762: LD_INT 1
5764: ARRAY
5765: PPUSH
5766: LD_EXP 1
5770: PPUSH
5771: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5775: LD_EXP 8
5779: PPUSH
5780: LD_EXP 1
5784: PPUSH
5785: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5789: LD_EXP 1
5793: PPUSH
5794: LD_EXP 8
5798: PPUSH
5799: CALL_OW 296
5803: PUSH
5804: LD_INT 5
5806: LESS
5807: IFFALSE 5737
// ComTurnUnit ( Mikhail , JMM ) ;
5809: LD_EXP 8
5813: PPUSH
5814: LD_EXP 1
5818: PPUSH
5819: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5823: LD_EXP 1
5827: PPUSH
5828: LD_STRING D4b-JMM-1
5830: PPUSH
5831: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5835: LD_EXP 8
5839: PPUSH
5840: LD_STRING D4b-Mikh-1
5842: PPUSH
5843: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5847: LD_EXP 1
5851: PPUSH
5852: LD_STRING D4b-JMM-2
5854: PPUSH
5855: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5859: LD_EXP 8
5863: PPUSH
5864: LD_STRING D4b-Mikh-2
5866: PPUSH
5867: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5871: LD_EXP 1
5875: PPUSH
5876: LD_STRING D4b-JMM-3
5878: PPUSH
5879: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5883: LD_EXP 8
5887: PPUSH
5888: LD_STRING D4b-Mikh-3
5890: PPUSH
5891: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5895: LD_EXP 1
5899: PPUSH
5900: LD_STRING D4b-JMM-4
5902: PPUSH
5903: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5907: LD_EXP 8
5911: PPUSH
5912: LD_STRING D4b-Mikh-4
5914: PPUSH
5915: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5919: LD_EXP 1
5923: PPUSH
5924: LD_STRING D4b-JMM-5
5926: PPUSH
5927: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5931: LD_EXP 8
5935: PPUSH
5936: LD_STRING D4b-Mikh-5
5938: PPUSH
5939: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5943: LD_EXP 1
5947: PPUSH
5948: LD_STRING D4b-JMM-6
5950: PPUSH
5951: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5955: LD_EXP 8
5959: PPUSH
5960: LD_STRING D4b-Mikh-6
5962: PPUSH
5963: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5967: LD_EXP 1
5971: PPUSH
5972: LD_STRING D4b-JMM-7
5974: PPUSH
5975: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5979: LD_EXP 8
5983: PPUSH
5984: LD_STRING D4b-Mikh-7
5986: PPUSH
5987: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5991: LD_VAR 0 1
5995: PUSH
5996: LD_INT 1
5998: ARRAY
5999: PPUSH
6000: CALL_OW 258
6004: PUSH
6005: LD_INT 1
6007: EQUAL
6008: IFFALSE 6026
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6010: LD_VAR 0 1
6014: PUSH
6015: LD_INT 1
6017: ARRAY
6018: PPUSH
6019: LD_STRING D4b-Sol1-7
6021: PPUSH
6022: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6026: LD_VAR 0 1
6030: PUSH
6031: LD_INT 1
6033: ARRAY
6034: PPUSH
6035: CALL_OW 258
6039: PUSH
6040: LD_INT 2
6042: EQUAL
6043: IFFALSE 6061
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6045: LD_VAR 0 1
6049: PUSH
6050: LD_INT 1
6052: ARRAY
6053: PPUSH
6054: LD_STRING D4b-FSol1-7
6056: PPUSH
6057: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6061: LD_EXP 1
6065: PPUSH
6066: LD_STRING D4b-JMM-8
6068: PPUSH
6069: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6073: LD_VAR 0 1
6077: PUSH
6078: LD_INT 1
6080: ARRAY
6081: PPUSH
6082: CALL_OW 258
6086: PUSH
6087: LD_INT 1
6089: EQUAL
6090: IFFALSE 6108
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6092: LD_VAR 0 1
6096: PUSH
6097: LD_INT 1
6099: ARRAY
6100: PPUSH
6101: LD_STRING D4b-Sol1-8
6103: PPUSH
6104: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6108: LD_VAR 0 1
6112: PUSH
6113: LD_INT 1
6115: ARRAY
6116: PPUSH
6117: CALL_OW 258
6121: PUSH
6122: LD_INT 2
6124: EQUAL
6125: IFFALSE 6143
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6127: LD_VAR 0 1
6131: PUSH
6132: LD_INT 1
6134: ARRAY
6135: PPUSH
6136: LD_STRING D4b-FSol1-8
6138: PPUSH
6139: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6143: LD_EXP 1
6147: PPUSH
6148: LD_STRING D4b-JMM-9
6150: PPUSH
6151: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6155: LD_EXP 8
6159: PPUSH
6160: LD_INT 1
6162: PPUSH
6163: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6167: LD_ADDR_VAR 0 2
6171: PUSH
6172: LD_INT 22
6174: PUSH
6175: LD_INT 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: PPUSH
6185: CALL_OW 69
6189: PUSH
6190: FOR_IN
6191: IFFALSE 6204
// ComFree ( i ) ;
6193: LD_VAR 0 2
6197: PPUSH
6198: CALL_OW 139
6202: GO 6190
6204: POP
6205: POP
// repeat wait ( 0 0$1 ) ;
6206: LD_INT 35
6208: PPUSH
6209: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6213: LD_EXP 8
6217: PPUSH
6218: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6222: LD_EXP 8
6226: PUSH
6227: LD_VAR 0 1
6231: PUSH
6232: LD_INT 1
6234: ARRAY
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PPUSH
6240: LD_INT 1
6242: PPUSH
6243: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6247: LD_EXP 8
6251: PPUSH
6252: CALL_OW 310
6256: IFFALSE 6206
// mikhailDepot = IsInUnit ( Mikhail ) ;
6258: LD_ADDR_EXP 23
6262: PUSH
6263: LD_EXP 8
6267: PPUSH
6268: CALL_OW 310
6272: ST_TO_ADDR
// InGameOff ;
6273: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6277: LD_STRING M3
6279: PPUSH
6280: CALL_OW 337
// end ; 3 :
6284: GO 6321
6286: LD_INT 3
6288: DOUBLE
6289: EQUAL
6290: IFTRUE 6294
6292: GO 6320
6294: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6295: LD_EXP 8
6299: PPUSH
6300: LD_INT 17
6302: PPUSH
6303: CALL_OW 113
// wait ( 0 0$3 ) ;
6307: LD_INT 105
6309: PPUSH
6310: CALL_OW 67
// InGameOff ;
6314: CALL_OW 9
// end ; end ;
6318: GO 6321
6320: POP
// PrepareTigers ;
6321: CALL 14288 0 0
// RussianTrap ;
6325: CALL 10131 0 0
// tigersRespawn = 1 ;
6329: LD_ADDR_EXP 30
6333: PUSH
6334: LD_INT 1
6336: ST_TO_ADDR
// end ;
6337: PPOPN 2
6339: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6340: LD_INT 1
6342: PPUSH
6343: CALL_OW 255
6347: PUSH
6348: LD_INT 1
6350: EQUAL
6351: PUSH
6352: LD_INT 10
6354: PPUSH
6355: CALL_OW 255
6359: PUSH
6360: LD_INT 1
6362: EQUAL
6363: AND
6364: PUSH
6365: LD_INT 1
6367: PPUSH
6368: CALL_OW 274
6372: PPUSH
6373: LD_INT 1
6375: PPUSH
6376: CALL_OW 275
6380: PUSH
6381: LD_INT 100
6383: GREATEREQUAL
6384: AND
6385: IFFALSE 6548
6387: GO 6389
6389: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6390: LD_INT 2100
6392: PPUSH
6393: LD_INT 4200
6395: PPUSH
6396: CALL_OW 12
6400: PUSH
6401: LD_INT 1050
6403: PLUS
6404: PPUSH
6405: CALL_OW 67
// PrepareCargoBays ;
6409: CALL 12771 0 0
// cargoRespawn = 1 ;
6413: LD_ADDR_EXP 28
6417: PUSH
6418: LD_INT 1
6420: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6421: LD_EXP 15
6425: PUSH
6426: LD_EXP 16
6430: PUSH
6431: LD_EXP 17
6435: PUSH
6436: LD_EXP 18
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: PPUSH
6447: LD_INT 36
6449: PPUSH
6450: LD_INT 13
6452: PPUSH
6453: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6457: LD_EXP 15
6461: PUSH
6462: LD_EXP 16
6466: PUSH
6467: LD_EXP 17
6471: PUSH
6472: LD_EXP 18
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: PPUSH
6483: LD_INT 40
6485: PPUSH
6486: LD_INT 20
6488: PPUSH
6489: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6493: LD_EXP 15
6497: PUSH
6498: LD_EXP 16
6502: PUSH
6503: LD_EXP 17
6507: PUSH
6508: LD_EXP 18
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: PPUSH
6519: LD_INT 53
6521: PPUSH
6522: LD_INT 16
6524: PPUSH
6525: CALL_OW 171
// wait ( 0 0$5 ) ;
6529: LD_INT 175
6531: PPUSH
6532: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6536: LD_EXP 17
6540: PPUSH
6541: LD_STRING D5-Rus2-1
6543: PPUSH
6544: CALL_OW 88
// end ;
6548: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6549: LD_EXP 28
6553: PUSH
6554: LD_INT 1
6556: EQUAL
6557: IFFALSE 6771
6559: GO 6561
6561: DISABLE
6562: LD_INT 0
6564: PPUSH
6565: PPUSH
6566: PPUSH
6567: PPUSH
// begin enable ;
6568: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6569: LD_ADDR_VAR 0 3
6573: PUSH
6574: LD_INT 22
6576: PUSH
6577: LD_INT 3
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: PUSH
6584: LD_INT 21
6586: PUSH
6587: LD_INT 2
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 34
6596: PUSH
6597: LD_INT 51
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 69
6613: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
6614: LD_ADDR_VAR 0 4
6618: PUSH
6619: LD_INT 22
6621: PUSH
6622: LD_INT 1
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 23
6631: PUSH
6632: LD_INT 1
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PPUSH
6643: CALL_OW 69
6647: ST_TO_ADDR
// for i in tmp1 do
6648: LD_ADDR_VAR 0 1
6652: PUSH
6653: LD_VAR 0 3
6657: PUSH
6658: FOR_IN
6659: IFFALSE 6769
// begin for j in tmp2 do
6661: LD_ADDR_VAR 0 2
6665: PUSH
6666: LD_VAR 0 4
6670: PUSH
6671: FOR_IN
6672: IFFALSE 6765
// begin if GetDistUnits ( i , j ) < 7 then
6674: LD_VAR 0 1
6678: PPUSH
6679: LD_VAR 0 2
6683: PPUSH
6684: CALL_OW 296
6688: PUSH
6689: LD_INT 7
6691: LESS
6692: IFFALSE 6763
// begin disable ;
6694: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6695: LD_EXP 15
6699: PUSH
6700: LD_EXP 16
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PPUSH
6709: LD_INT 7
6711: PPUSH
6712: LD_INT 9
6714: PPUSH
6715: CALL_OW 111
// if cargoSee = 0 then
6719: LD_EXP 29
6723: PUSH
6724: LD_INT 0
6726: EQUAL
6727: IFFALSE 6763
// begin cargoSee = 1 ;
6729: LD_ADDR_EXP 29
6733: PUSH
6734: LD_INT 1
6736: ST_TO_ADDR
// cargoEscape = 1 ;
6737: LD_ADDR_EXP 20
6741: PUSH
6742: LD_INT 1
6744: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6745: LD_EXP 17
6749: PPUSH
6750: LD_STRING D5-Rus2-1a
6752: PPUSH
6753: CALL_OW 88
// exit ;
6757: POP
6758: POP
6759: POP
6760: POP
6761: GO 6771
// end ; end ; end ;
6763: GO 6671
6765: POP
6766: POP
// end ;
6767: GO 6658
6769: POP
6770: POP
// end ;
6771: PPOPN 4
6773: END
// every 0 0$1 trigger cargoEscape > 0 do
6774: LD_EXP 20
6778: PUSH
6779: LD_INT 0
6781: GREATER
6782: IFFALSE 6929
6784: GO 6786
6786: DISABLE
// begin enable ;
6787: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6788: LD_EXP 15
6792: PUSH
6793: LD_EXP 16
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: PPUSH
6802: LD_INT 13
6804: PPUSH
6805: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6809: LD_EXP 15
6813: PPUSH
6814: LD_INT 13
6816: PPUSH
6817: CALL_OW 308
6821: PUSH
6822: LD_EXP 17
6826: PPUSH
6827: LD_INT 13
6829: PPUSH
6830: CALL_OW 308
6834: OR
6835: IFFALSE 6869
// begin RemoveUnit ( cargo1 ) ;
6837: LD_EXP 15
6841: PPUSH
6842: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6846: LD_EXP 17
6850: PPUSH
6851: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6855: LD_ADDR_EXP 20
6859: PUSH
6860: LD_EXP 20
6864: PUSH
6865: LD_INT 1
6867: PLUS
6868: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6869: LD_EXP 16
6873: PPUSH
6874: LD_INT 13
6876: PPUSH
6877: CALL_OW 308
6881: PUSH
6882: LD_EXP 18
6886: PPUSH
6887: LD_INT 13
6889: PPUSH
6890: CALL_OW 308
6894: OR
6895: IFFALSE 6929
// begin RemoveUnit ( cargo2 ) ;
6897: LD_EXP 16
6901: PPUSH
6902: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6906: LD_EXP 18
6910: PPUSH
6911: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6915: LD_ADDR_EXP 20
6919: PUSH
6920: LD_EXP 20
6924: PUSH
6925: LD_INT 1
6927: PLUS
6928: ST_TO_ADDR
// end ; end ;
6929: END
// every 0 0$1 trigger cargoEscape > 1 do
6930: LD_EXP 20
6934: PUSH
6935: LD_INT 1
6937: GREATER
6938: IFFALSE 7102
6940: GO 6942
6942: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
6943: LD_INT 4
6945: PPUSH
6946: LD_INT 1
6948: PPUSH
6949: LD_INT 1
6951: PPUSH
6952: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6956: LD_INT 31
6958: PPUSH
6959: LD_INT 1
6961: PPUSH
6962: LD_INT 1
6964: PPUSH
6965: CALL_OW 324
// if IsOK ( Jerry ) then
6969: LD_EXP 7
6973: PPUSH
6974: CALL_OW 302
6978: IFFALSE 6994
// begin Say ( Jerry , D5a-Sol1-1 ) ;
6980: LD_EXP 7
6984: PPUSH
6985: LD_STRING D5a-Sol1-1
6987: PPUSH
6988: CALL_OW 88
// end else
6992: GO 7090
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
6994: LD_INT 22
6996: PUSH
6997: LD_INT 1
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 23
7006: PUSH
7007: LD_INT 1
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 26
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL_OW 69
7033: PUSH
7034: LD_INT 2
7036: PPUSH
7037: LD_INT 22
7039: PUSH
7040: LD_INT 1
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 23
7049: PUSH
7050: LD_INT 1
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: LD_INT 26
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: LIST
7071: PPUSH
7072: CALL_OW 69
7076: PPUSH
7077: CALL_OW 12
7081: ARRAY
7082: PPUSH
7083: LD_STRING D5a-Sol1-1
7085: PPUSH
7086: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7090: LD_EXP 1
7094: PPUSH
7095: LD_STRING D5a-JMM-1
7097: PPUSH
7098: CALL_OW 88
// end ;
7102: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7103: LD_INT 1
7105: PPUSH
7106: CALL_OW 255
7110: PUSH
7111: LD_INT 3
7113: EQUAL
7114: PUSH
7115: LD_INT 1
7117: PPUSH
7118: CALL_OW 256
7122: PUSH
7123: LD_INT 1000
7125: LESS
7126: AND
7127: PUSH
7128: LD_INT 10
7130: PPUSH
7131: CALL_OW 255
7135: PUSH
7136: LD_INT 3
7138: EQUAL
7139: PUSH
7140: LD_INT 10
7142: PPUSH
7143: CALL_OW 256
7147: PUSH
7148: LD_INT 1000
7150: LESS
7151: AND
7152: OR
7153: IFFALSE 7170
7155: GO 7157
7157: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
7158: LD_EXP 1
7162: PPUSH
7163: LD_STRING D8-JMM-1
7165: PPUSH
7166: CALL_OW 88
// end ;
7170: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7171: LD_EXP 8
7175: PPUSH
7176: CALL_OW 310
7180: PUSH
7181: LD_INT 1
7183: EQUAL
7184: PUSH
7185: LD_EXP 22
7189: PUSH
7190: LD_INT 3
7192: EQUAL
7193: NOT
7194: AND
7195: IFFALSE 7217
7197: GO 7199
7199: DISABLE
// begin mikhailInBase = 1 ;
7200: LD_ADDR_EXP 22
7204: PUSH
7205: LD_INT 1
7207: ST_TO_ADDR
// mikhailStatus = 1 ;
7208: LD_ADDR_EXP 21
7212: PUSH
7213: LD_INT 1
7215: ST_TO_ADDR
// enable ;
7216: ENABLE
// end ;
7217: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
7218: LD_EXP 8
7222: PPUSH
7223: LD_INT 25
7225: PPUSH
7226: CALL_OW 308
7230: PUSH
7231: LD_EXP 22
7235: PUSH
7236: LD_INT 1
7238: EQUAL
7239: AND
7240: PUSH
7241: LD_EXP 8
7245: PPUSH
7246: CALL_OW 255
7250: PUSH
7251: LD_INT 1
7253: EQUAL
7254: AND
7255: IFFALSE 7585
7257: GO 7259
7259: DISABLE
// begin enable ;
7260: ENABLE
// case query ( QMikh2 ) of 1 :
7261: LD_STRING QMikh2
7263: PPUSH
7264: CALL_OW 97
7268: PUSH
7269: LD_INT 1
7271: DOUBLE
7272: EQUAL
7273: IFTRUE 7277
7275: GO 7344
7277: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7278: LD_INT 1
7280: PPUSH
7281: LD_INT 6
7283: PPUSH
7284: LD_INT 2
7286: PPUSH
7287: LD_INT 1
7289: PPUSH
7290: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7294: LD_EXP 8
7298: PPUSH
7299: LD_INT 6
7301: PPUSH
7302: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7306: LD_EXP 8
7310: PPUSH
7311: CALL_OW 122
// wait ( 0 0$1 ) ;
7315: LD_INT 35
7317: PPUSH
7318: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7322: LD_EXP 8
7326: PPUSH
7327: LD_INT 17
7329: PPUSH
7330: CALL_OW 113
// mikhailInbase = 0 ;
7334: LD_ADDR_EXP 22
7338: PUSH
7339: LD_INT 0
7341: ST_TO_ADDR
// end ; 2 :
7342: GO 7585
7344: LD_INT 2
7346: DOUBLE
7347: EQUAL
7348: IFTRUE 7352
7350: GO 7525
7352: POP
// begin mikhailInBase = 2 ;
7353: LD_ADDR_EXP 22
7357: PUSH
7358: LD_INT 2
7360: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7361: LD_EXP 8
7365: PPUSH
7366: LD_INT 6
7368: PPUSH
7369: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7373: LD_EXP 8
7377: PPUSH
7378: CALL_OW 122
// wait ( 0 0$1 ) ;
7382: LD_INT 35
7384: PPUSH
7385: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7389: LD_EXP 8
7393: PPUSH
7394: LD_EXP 8
7398: PPUSH
7399: CALL_OW 250
7403: PUSH
7404: LD_INT 2
7406: PLUS
7407: PPUSH
7408: LD_EXP 8
7412: PPUSH
7413: CALL_OW 251
7417: PUSH
7418: LD_INT 2
7420: PLUS
7421: PPUSH
7422: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7426: LD_EXP 8
7430: PPUSH
7431: LD_EXP 8
7435: PPUSH
7436: CALL_OW 250
7440: PUSH
7441: LD_INT 1
7443: PLUS
7444: PPUSH
7445: LD_EXP 8
7449: PPUSH
7450: CALL_OW 251
7454: PUSH
7455: LD_INT 2
7457: PLUS
7458: PPUSH
7459: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7463: LD_EXP 8
7467: PPUSH
7468: LD_EXP 8
7472: PPUSH
7473: CALL_OW 250
7477: PUSH
7478: LD_INT 2
7480: PLUS
7481: PPUSH
7482: LD_EXP 8
7486: PPUSH
7487: CALL_OW 251
7491: PPUSH
7492: CALL_OW 171
// wait ( 0 0$5 ) ;
7496: LD_INT 175
7498: PPUSH
7499: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7503: LD_EXP 8
7507: PPUSH
7508: LD_INT 25
7510: PPUSH
7511: CALL_OW 113
// mikhailInBase = 4 ;
7515: LD_ADDR_EXP 22
7519: PUSH
7520: LD_INT 4
7522: ST_TO_ADDR
// end ; 3 :
7523: GO 7585
7525: LD_INT 3
7527: DOUBLE
7528: EQUAL
7529: IFTRUE 7533
7531: GO 7584
7533: POP
// begin SetSide ( Mikhail , 6 ) ;
7534: LD_EXP 8
7538: PPUSH
7539: LD_INT 6
7541: PPUSH
7542: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7546: LD_EXP 8
7550: PPUSH
7551: CALL_OW 122
// wait ( 0 0$1 ) ;
7555: LD_INT 35
7557: PPUSH
7558: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7562: LD_EXP 8
7566: PPUSH
7567: LD_INT 17
7569: PPUSH
7570: CALL_OW 113
// mikhailInbase = 3 ;
7574: LD_ADDR_EXP 22
7578: PUSH
7579: LD_INT 3
7581: ST_TO_ADDR
// end ; end ;
7582: GO 7585
7584: POP
// end ;
7585: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7586: LD_EXP 8
7590: PPUSH
7591: LD_INT 25
7593: PPUSH
7594: CALL_OW 308
7598: PUSH
7599: LD_EXP 22
7603: PUSH
7604: LD_INT 4
7606: EQUAL
7607: AND
7608: IFFALSE 7714
7610: GO 7612
7612: DISABLE
// begin enable ;
7613: ENABLE
// InGameOn ;
7614: CALL_OW 8
// SetSide ( Mikhail , 1 ) ;
7618: LD_EXP 8
7622: PPUSH
7623: LD_INT 1
7625: PPUSH
7626: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7630: LD_INT 35
7632: PPUSH
7633: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
7637: LD_EXP 8
7641: PPUSH
7642: LD_INT 1
7644: PPUSH
7645: CALL_OW 296
7649: PUSH
7650: LD_EXP 8
7654: PPUSH
7655: LD_INT 10
7657: PPUSH
7658: CALL_OW 296
7662: LESS
7663: IFFALSE 7679
// begin ComEnterUnit ( Mikhail , dep1 ) ;
7665: LD_EXP 8
7669: PPUSH
7670: LD_INT 1
7672: PPUSH
7673: CALL_OW 120
// end else
7677: GO 7691
// begin ComEnterUnit ( Mikhail , dep2 ) ;
7679: LD_EXP 8
7683: PPUSH
7684: LD_INT 10
7686: PPUSH
7687: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
7691: LD_EXP 8
7695: PPUSH
7696: CALL_OW 310
7700: IFFALSE 7630
// InGameOff ;
7702: CALL_OW 9
// mikhailInBase = 1 ;
7706: LD_ADDR_EXP 22
7710: PUSH
7711: LD_INT 1
7713: ST_TO_ADDR
// end ;
7714: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7715: LD_EXP 8
7719: PPUSH
7720: CALL_OW 310
7724: PUSH
7725: LD_EXP 22
7729: PUSH
7730: LD_INT 3
7732: EQUAL
7733: NOT
7734: AND
7735: IFFALSE 7861
7737: GO 7739
7739: DISABLE
// begin enable ;
7740: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7741: LD_INT 22
7743: PUSH
7744: LD_INT 1
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 21
7753: PUSH
7754: LD_INT 1
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 91
7763: PUSH
7764: LD_EXP 8
7768: PPUSH
7769: CALL_OW 310
7773: PUSH
7774: LD_INT 10
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: PPUSH
7787: CALL_OW 69
7791: PUSH
7792: LD_INT 1
7794: EQUAL
7795: IFFALSE 7861
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 6
7802: PPUSH
7803: LD_INT 2
7805: PPUSH
7806: LD_INT 1
7808: PPUSH
7809: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7813: LD_EXP 8
7817: PPUSH
7818: LD_INT 6
7820: PPUSH
7821: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7825: LD_EXP 8
7829: PPUSH
7830: CALL_OW 122
// wait ( 0 0$1 ) ;
7834: LD_INT 35
7836: PPUSH
7837: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7841: LD_EXP 8
7845: PPUSH
7846: LD_INT 17
7848: PPUSH
7849: CALL_OW 113
// mikhailStatus = 3 ;
7853: LD_ADDR_EXP 21
7857: PUSH
7858: LD_INT 3
7860: ST_TO_ADDR
// end ; end ;
7861: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7862: LD_EXP 1
7866: PPUSH
7867: LD_EXP 23
7871: PPUSH
7872: CALL_OW 296
7876: PUSH
7877: LD_INT 5
7879: LESS
7880: PUSH
7881: LD_EXP 21
7885: PUSH
7886: LD_INT 3
7888: EQUAL
7889: AND
7890: PUSH
7891: LD_EXP 22
7895: PUSH
7896: LD_INT 3
7898: EQUAL
7899: NOT
7900: AND
7901: IFFALSE 8117
7903: GO 7905
7905: DISABLE
7906: LD_INT 0
7908: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
7909: LD_ADDR_VAR 0 1
7913: PUSH
7914: LD_INT 22
7916: PUSH
7917: LD_INT 1
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PUSH
7924: LD_INT 21
7926: PUSH
7927: LD_INT 1
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PUSH
7934: LD_INT 26
7936: PUSH
7937: LD_INT 1
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: LIST
7948: PPUSH
7949: CALL_OW 69
7953: PUSH
7954: LD_EXP 1
7958: PUSH
7959: EMPTY
7960: LIST
7961: DIFF
7962: ST_TO_ADDR
// DialogueOn ;
7963: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7967: LD_EXP 1
7971: PPUSH
7972: LD_STRING D7-JMM-1
7974: PPUSH
7975: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7979: LD_VAR 0 1
7983: PUSH
7984: LD_INT 1
7986: ARRAY
7987: PPUSH
7988: LD_STRING D7-Sol1-1
7990: PPUSH
7991: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7995: LD_EXP 1
7999: PPUSH
8000: LD_STRING D7-JMM-2
8002: PPUSH
8003: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8007: LD_VAR 0 1
8011: PUSH
8012: LD_INT 1
8014: ARRAY
8015: PPUSH
8016: LD_STRING D7-Sol1-2
8018: PPUSH
8019: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8023: LD_EXP 1
8027: PPUSH
8028: LD_STRING D7-JMM-3
8030: PPUSH
8031: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8035: LD_VAR 0 1
8039: PUSH
8040: LD_INT 1
8042: ARRAY
8043: PPUSH
8044: LD_STRING D7-Sol1-3
8046: PPUSH
8047: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8051: LD_EXP 3
8055: PPUSH
8056: CALL_OW 302
8060: PUSH
8061: LD_EXP 4
8065: PPUSH
8066: CALL_OW 302
8070: AND
8071: IFFALSE 8113
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8073: LD_EXP 3
8077: PPUSH
8078: LD_STRING D7-Cyrus-3
8080: PPUSH
8081: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8085: LD_VAR 0 1
8089: PUSH
8090: LD_INT 1
8092: ARRAY
8093: PPUSH
8094: LD_STRING D7-Sol1-4
8096: PPUSH
8097: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8101: LD_EXP 4
8105: PPUSH
8106: LD_STRING D7-Lisa-4
8108: PPUSH
8109: CALL_OW 88
// end ; DialogueOff ;
8113: CALL_OW 7
// end ;
8117: PPOPN 1
8119: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8120: LD_EXP 8
8124: PPUSH
8125: CALL_OW 303
8129: PUSH
8130: LD_EXP 21
8134: PUSH
8135: LD_INT 3
8137: EQUAL
8138: AND
8139: IFFALSE 8153
8141: GO 8143
8143: DISABLE
// begin enable ;
8144: ENABLE
// mikhailStatus = 2 ;
8145: LD_ADDR_EXP 21
8149: PUSH
8150: LD_INT 2
8152: ST_TO_ADDR
// end ;
8153: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8154: LD_EXP 8
8158: PPUSH
8159: LD_INT 17
8161: PPUSH
8162: CALL_OW 308
8166: PUSH
8167: LD_EXP 8
8171: PPUSH
8172: CALL_OW 255
8176: PUSH
8177: LD_INT 6
8179: EQUAL
8180: AND
8181: IFFALSE 8214
8183: GO 8185
8185: DISABLE
// begin if not mikhailInBase = 3 then
8186: LD_EXP 22
8190: PUSH
8191: LD_INT 3
8193: EQUAL
8194: NOT
8195: IFFALSE 8205
// mikhailStatus = 3 ;
8197: LD_ADDR_EXP 21
8201: PUSH
8202: LD_INT 3
8204: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8205: LD_EXP 8
8209: PPUSH
8210: CALL_OW 64
// end ;
8214: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8215: LD_EXP 21
8219: PUSH
8220: LD_INT 3
8222: EQUAL
8223: PUSH
8224: LD_EXP 8
8228: PPUSH
8229: CALL_OW 255
8233: PUSH
8234: LD_INT 6
8236: EQUAL
8237: AND
8238: IFFALSE 8404
8240: GO 8242
8242: DISABLE
8243: LD_INT 0
8245: PPUSH
8246: PPUSH
// begin enable ;
8247: ENABLE
// if IsOk ( Mikhail ) then
8248: LD_EXP 8
8252: PPUSH
8253: CALL_OW 302
8257: IFFALSE 8404
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8259: LD_ADDR_VAR 0 2
8263: PUSH
8264: LD_EXP 8
8268: PPUSH
8269: LD_INT 22
8271: PUSH
8272: LD_INT 1
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: LD_INT 21
8281: PUSH
8282: LD_INT 1
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PPUSH
8293: CALL_OW 69
8297: PPUSH
8298: CALL 10323 0 2
8302: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8303: LD_VAR 0 2
8307: PPUSH
8308: LD_EXP 8
8312: PPUSH
8313: CALL_OW 296
8317: PUSH
8318: LD_INT 8
8320: LESS
8321: IFFALSE 8404
// begin if GetSex ( attacker ) = sex_male then
8323: LD_VAR 0 2
8327: PPUSH
8328: CALL_OW 258
8332: PUSH
8333: LD_INT 1
8335: EQUAL
8336: IFFALSE 8372
// begin disable ;
8338: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8339: LD_VAR 0 2
8343: PPUSH
8344: LD_STRING D7a-Sol1-1
8346: PPUSH
8347: CALL_OW 88
// wait ( 0 0$2 ) ;
8351: LD_INT 70
8353: PPUSH
8354: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8358: LD_VAR 0 2
8362: PPUSH
8363: LD_STRING D7a-Sol1-1a
8365: PPUSH
8366: CALL_OW 88
// end else
8370: GO 8404
// begin disable ;
8372: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8373: LD_VAR 0 2
8377: PPUSH
8378: LD_STRING D7a-FSol1-1
8380: PPUSH
8381: CALL_OW 88
// wait ( 0 0$2 ) ;
8385: LD_INT 70
8387: PPUSH
8388: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8392: LD_VAR 0 2
8396: PPUSH
8397: LD_STRING D7a-FSol1-1a
8399: PPUSH
8400: CALL_OW 88
// end ; end ; end ; end ;
8404: PPOPN 2
8406: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8407: LD_EXP 27
8411: PUSH
8412: LD_INT 1
8414: EQUAL
8415: PUSH
8416: LD_INT 22
8418: PPUSH
8419: LD_INT 22
8421: PUSH
8422: LD_INT 3
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: PUSH
8429: LD_INT 21
8431: PUSH
8432: LD_INT 1
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: PPUSH
8443: CALL_OW 70
8447: PUSH
8448: LD_INT 2
8450: GREATER
8451: AND
8452: PUSH
8453: LD_INT 22
8455: PPUSH
8456: LD_INT 22
8458: PUSH
8459: LD_INT 1
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: PUSH
8466: LD_INT 2
8468: PUSH
8469: LD_INT 21
8471: PUSH
8472: LD_INT 1
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 59
8481: PUSH
8482: EMPTY
8483: LIST
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: LIST
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PPUSH
8494: CALL_OW 70
8498: PUSH
8499: LD_INT 0
8501: EQUAL
8502: AND
8503: IFFALSE 8518
8505: GO 8507
8507: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8508: LD_INT 1
8510: PPUSH
8511: LD_INT 3
8513: PPUSH
8514: CALL_OW 235
// end ;
8518: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8519: LD_EXP 30
8523: PUSH
8524: LD_INT 1
8526: EQUAL
8527: PUSH
8528: LD_INT 22
8530: PUSH
8531: LD_INT 0
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 25
8540: PUSH
8541: LD_INT 14
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PPUSH
8552: CALL_OW 69
8556: PUSH
8557: LD_INT 0
8559: EQUAL
8560: AND
8561: IFFALSE 8655
8563: GO 8565
8565: DISABLE
8566: LD_INT 0
8568: PPUSH
8569: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8570: LD_ADDR_VAR 0 2
8574: PUSH
8575: LD_INT 22
8577: PUSH
8578: LD_INT 1
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 21
8587: PUSH
8588: LD_INT 1
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: LD_INT 23
8597: PUSH
8598: LD_INT 1
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: LIST
8609: PPUSH
8610: CALL_OW 69
8614: ST_TO_ADDR
// for i in tmp do
8615: LD_ADDR_VAR 0 1
8619: PUSH
8620: LD_VAR 0 2
8624: PUSH
8625: FOR_IN
8626: IFFALSE 8653
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8628: LD_VAR 0 1
8632: PPUSH
8633: LD_INT 1
8635: PPUSH
8636: LD_INT 4
8638: PPUSH
8639: CALL_OW 12
8643: PPUSH
8644: LD_INT 300
8646: PPUSH
8647: CALL_OW 492
// end ;
8651: GO 8625
8653: POP
8654: POP
// end ; end_of_file
8655: PPOPN 2
8657: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8658: LD_INT 0
8660: PPUSH
8661: PPUSH
8662: PPUSH
8663: PPUSH
// for i = 1 to count do
8664: LD_ADDR_VAR 0 8
8668: PUSH
8669: DOUBLE
8670: LD_INT 1
8672: DEC
8673: ST_TO_ADDR
8674: LD_VAR 0 6
8678: PUSH
8679: FOR_TO
8680: IFFALSE 8761
// begin uc_side = side ;
8682: LD_ADDR_OWVAR 20
8686: PUSH
8687: LD_VAR 0 1
8691: ST_TO_ADDR
// uc_nation = nation ;
8692: LD_ADDR_OWVAR 21
8696: PUSH
8697: LD_VAR 0 2
8701: ST_TO_ADDR
// hc_gallery =  ;
8702: LD_ADDR_OWVAR 33
8706: PUSH
8707: LD_STRING 
8709: ST_TO_ADDR
// hc_name =  ;
8710: LD_ADDR_OWVAR 26
8714: PUSH
8715: LD_STRING 
8717: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8718: LD_INT 0
8720: PPUSH
8721: LD_VAR 0 5
8725: PPUSH
8726: LD_VAR 0 4
8730: PPUSH
8731: CALL_OW 380
// un = CreateHuman ;
8735: LD_ADDR_VAR 0 10
8739: PUSH
8740: CALL_OW 44
8744: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8745: LD_VAR 0 10
8749: PPUSH
8750: LD_VAR 0 3
8754: PPUSH
8755: CALL_OW 52
// end ;
8759: GO 8679
8761: POP
8762: POP
// end ;
8763: LD_VAR 0 7
8767: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8768: LD_INT 0
8770: PPUSH
8771: PPUSH
8772: PPUSH
// uc_side := GetSide ( b ) ;
8773: LD_ADDR_OWVAR 20
8777: PUSH
8778: LD_VAR 0 2
8782: PPUSH
8783: CALL_OW 255
8787: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8788: LD_ADDR_OWVAR 21
8792: PUSH
8793: LD_VAR 0 2
8797: PPUSH
8798: CALL_OW 248
8802: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8803: LD_INT 0
8805: PPUSH
8806: LD_INT 1
8808: PPUSH
8809: LD_VAR 0 1
8813: PPUSH
8814: CALL_OW 380
// un = CreateHuman ;
8818: LD_ADDR_VAR 0 4
8822: PUSH
8823: CALL_OW 44
8827: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8828: LD_ADDR_VAR 0 5
8832: PUSH
8833: LD_VAR 0 2
8837: PPUSH
8838: CALL_OW 254
8842: PUSH
8843: LD_INT 3
8845: MINUS
8846: ST_TO_ADDR
// if dir < 0 then
8847: LD_VAR 0 5
8851: PUSH
8852: LD_INT 0
8854: LESS
8855: IFFALSE 8871
// dir := 6 + dir ;
8857: LD_ADDR_VAR 0 5
8861: PUSH
8862: LD_INT 6
8864: PUSH
8865: LD_VAR 0 5
8869: PLUS
8870: ST_TO_ADDR
// SetDir ( un , dir ) ;
8871: LD_VAR 0 4
8875: PPUSH
8876: LD_VAR 0 5
8880: PPUSH
8881: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8885: LD_VAR 0 4
8889: PPUSH
8890: LD_VAR 0 2
8894: PPUSH
8895: CALL_OW 52
// end ;
8899: LD_VAR 0 3
8903: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8904: LD_INT 0
8906: PPUSH
8907: PPUSH
8908: PPUSH
8909: PPUSH
8910: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8911: LD_ADDR_VAR 0 7
8915: PUSH
8916: LD_INT 22
8918: PUSH
8919: LD_VAR 0 1
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 25
8930: PUSH
8931: LD_INT 2
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 24
8940: PUSH
8941: LD_INT 1000
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: LIST
8952: PPUSH
8953: CALL_OW 69
8957: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8958: LD_ADDR_VAR 0 5
8962: PUSH
8963: LD_VAR 0 3
8967: PPUSH
8968: LD_INT 22
8970: PUSH
8971: LD_VAR 0 1
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: LD_INT 21
8982: PUSH
8983: LD_INT 3
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PUSH
8990: LD_INT 3
8992: PUSH
8993: LD_INT 24
8995: PUSH
8996: LD_INT 1000
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: LIST
9011: PUSH
9012: EMPTY
9013: LIST
9014: PPUSH
9015: CALL_OW 70
9019: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
9020: LD_VAR 0 5
9024: PUSH
9025: LD_INT 0
9027: GREATER
9028: PUSH
9029: LD_VAR 0 7
9033: PUSH
9034: LD_INT 0
9036: GREATER
9037: AND
9038: IFFALSE 9104
// begin for i in engineerOk_list do
9040: LD_ADDR_VAR 0 6
9044: PUSH
9045: LD_VAR 0 7
9049: PUSH
9050: FOR_IN
9051: IFFALSE 9102
// begin for j in buildings_list do
9053: LD_ADDR_VAR 0 8
9057: PUSH
9058: LD_VAR 0 5
9062: PUSH
9063: FOR_IN
9064: IFFALSE 9098
// begin AddComExitBuilding ( i ) ;
9066: LD_VAR 0 6
9070: PPUSH
9071: CALL_OW 182
// wait ( 0 0$1 ) ;
9075: LD_INT 35
9077: PPUSH
9078: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
9082: LD_VAR 0 6
9086: PPUSH
9087: LD_VAR 0 8
9091: PPUSH
9092: CALL_OW 190
// end ;
9096: GO 9063
9098: POP
9099: POP
// end ;
9100: GO 9050
9102: POP
9103: POP
// end ; if buildings_list = 0 then
9104: LD_VAR 0 5
9108: PUSH
9109: LD_INT 0
9111: EQUAL
9112: IFFALSE 9145
// begin for i in engineerOK_list do
9114: LD_ADDR_VAR 0 6
9118: PUSH
9119: LD_VAR 0 7
9123: PUSH
9124: FOR_IN
9125: IFFALSE 9143
// begin ComEnterUnit ( i , building ) ;
9127: LD_VAR 0 6
9131: PPUSH
9132: LD_VAR 0 2
9136: PPUSH
9137: CALL_OW 120
// end ;
9141: GO 9124
9143: POP
9144: POP
// end ; end ;
9145: LD_VAR 0 4
9149: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9150: LD_INT 0
9152: PPUSH
9153: PPUSH
9154: PPUSH
9155: PPUSH
9156: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9157: LD_ADDR_VAR 0 6
9161: PUSH
9162: LD_INT 22
9164: PUSH
9165: LD_VAR 0 1
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PUSH
9174: LD_INT 25
9176: PUSH
9177: LD_INT 4
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: PUSH
9184: LD_INT 24
9186: PUSH
9187: LD_INT 250
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: LIST
9198: PPUSH
9199: CALL_OW 69
9203: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9204: LD_ADDR_VAR 0 9
9208: PUSH
9209: LD_VAR 0 3
9213: PPUSH
9214: LD_INT 22
9216: PUSH
9217: LD_VAR 0 1
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: LD_INT 21
9228: PUSH
9229: LD_INT 1
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PUSH
9236: LD_INT 3
9238: PUSH
9239: LD_INT 24
9241: PUSH
9242: LD_INT 650
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: LIST
9257: PPUSH
9258: CALL_OW 70
9262: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9263: LD_VAR 0 9
9267: PUSH
9268: LD_INT 0
9270: GREATER
9271: PUSH
9272: LD_VAR 0 6
9276: PUSH
9277: LD_INT 0
9279: GREATER
9280: AND
9281: IFFALSE 9408
// begin for i = 1 to damageUnits do
9283: LD_ADDR_VAR 0 7
9287: PUSH
9288: DOUBLE
9289: LD_INT 1
9291: DEC
9292: ST_TO_ADDR
9293: LD_VAR 0 9
9297: PUSH
9298: FOR_TO
9299: IFFALSE 9323
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9301: LD_VAR 0 9
9305: PUSH
9306: LD_VAR 0 7
9310: ARRAY
9311: PPUSH
9312: LD_VAR 0 2
9316: PPUSH
9317: CALL_OW 113
9321: GO 9298
9323: POP
9324: POP
// for i in sci_list do
9325: LD_ADDR_VAR 0 7
9329: PUSH
9330: LD_VAR 0 6
9334: PUSH
9335: FOR_IN
9336: IFFALSE 9404
// begin ComExitBuilding ( i ) ;
9338: LD_VAR 0 7
9342: PPUSH
9343: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9347: LD_ADDR_VAR 0 8
9351: PUSH
9352: LD_VAR 0 2
9356: PPUSH
9357: LD_INT 22
9359: PUSH
9360: LD_VAR 0 1
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PPUSH
9369: CALL_OW 70
9373: PUSH
9374: FOR_IN
9375: IFFALSE 9400
// begin AddComHeal ( i , j ) ;
9377: LD_VAR 0 7
9381: PPUSH
9382: LD_VAR 0 8
9386: PPUSH
9387: CALL_OW 188
// wait ( 1 1$0 ) ;
9391: LD_INT 2100
9393: PPUSH
9394: CALL_OW 67
// end ;
9398: GO 9374
9400: POP
9401: POP
// end ;
9402: GO 9335
9404: POP
9405: POP
// end else
9406: GO 9422
// begin AddComEnterUnit ( sci_list , build ) ;
9408: LD_VAR 0 6
9412: PPUSH
9413: LD_VAR 0 4
9417: PPUSH
9418: CALL_OW 180
// end ; end ;
9422: LD_VAR 0 5
9426: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9427: LD_INT 0
9429: PPUSH
9430: PPUSH
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
9436: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9437: LD_ADDR_VAR 0 7
9441: PUSH
9442: LD_VAR 0 3
9446: PPUSH
9447: LD_INT 22
9449: PUSH
9450: LD_VAR 0 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 2
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 24
9471: PUSH
9472: LD_INT 550
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 34
9481: PUSH
9482: LD_INT 46
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 70
9499: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9500: LD_ADDR_VAR 0 8
9504: PUSH
9505: LD_VAR 0 3
9509: PPUSH
9510: LD_INT 22
9512: PUSH
9513: LD_VAR 0 1
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 21
9524: PUSH
9525: LD_INT 2
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: LD_INT 34
9534: PUSH
9535: LD_INT 46
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 3
9544: PUSH
9545: LD_INT 24
9547: PUSH
9548: LD_INT 550
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: PPUSH
9565: CALL_OW 70
9569: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9570: LD_ADDR_VAR 0 9
9574: PUSH
9575: LD_VAR 0 2
9579: PPUSH
9580: LD_INT 22
9582: PUSH
9583: LD_VAR 0 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 2
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 34
9604: PUSH
9605: LD_INT 46
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: LD_INT 24
9614: PUSH
9615: LD_INT 1000
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 58
9624: PUSH
9625: EMPTY
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: PPUSH
9635: CALL_OW 70
9639: ST_TO_ADDR
// for i in damageVehicle_list do
9640: LD_ADDR_VAR 0 5
9644: PUSH
9645: LD_VAR 0 8
9649: PUSH
9650: FOR_IN
9651: IFFALSE 9670
// mechanicInside_list = UnitsInside ( i ) ;
9653: LD_ADDR_VAR 0 10
9657: PUSH
9658: LD_VAR 0 5
9662: PPUSH
9663: CALL_OW 313
9667: ST_TO_ADDR
9668: GO 9650
9670: POP
9671: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9672: LD_ADDR_VAR 0 11
9676: PUSH
9677: LD_VAR 0 2
9681: PPUSH
9682: LD_INT 22
9684: PUSH
9685: LD_VAR 0 1
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 25
9696: PUSH
9697: LD_INT 3
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PPUSH
9708: CALL_OW 70
9712: ST_TO_ADDR
// if damageVehicle_list > 0 then
9713: LD_VAR 0 8
9717: PUSH
9718: LD_INT 0
9720: GREATER
9721: IFFALSE 9794
// begin for i in damageVehicle_list do
9723: LD_ADDR_VAR 0 5
9727: PUSH
9728: LD_VAR 0 8
9732: PUSH
9733: FOR_IN
9734: IFFALSE 9792
// begin for j in mechanicInside_list do
9736: LD_ADDR_VAR 0 6
9740: PUSH
9741: LD_VAR 0 10
9745: PUSH
9746: FOR_IN
9747: IFFALSE 9788
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9749: LD_VAR 0 8
9753: PPUSH
9754: LD_VAR 0 2
9758: PPUSH
9759: CALL_OW 113
// AddComExitVehicle ( j ) ;
9763: LD_VAR 0 6
9767: PPUSH
9768: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9772: LD_VAR 0 6
9776: PPUSH
9777: LD_VAR 0 5
9781: PPUSH
9782: CALL_OW 189
// end ;
9786: GO 9746
9788: POP
9789: POP
// end ;
9790: GO 9733
9792: POP
9793: POP
// end ; if emptyVehicle_list > 0 then
9794: LD_VAR 0 9
9798: PUSH
9799: LD_INT 0
9801: GREATER
9802: IFFALSE 9852
// begin for i in emptyVehicle_list do
9804: LD_ADDR_VAR 0 5
9808: PUSH
9809: LD_VAR 0 9
9813: PUSH
9814: FOR_IN
9815: IFFALSE 9850
// begin for j in mechanicOutside_list do
9817: LD_ADDR_VAR 0 6
9821: PUSH
9822: LD_VAR 0 11
9826: PUSH
9827: FOR_IN
9828: IFFALSE 9846
// begin AddComEnterUnit ( j , i ) ;
9830: LD_VAR 0 6
9834: PPUSH
9835: LD_VAR 0 5
9839: PPUSH
9840: CALL_OW 180
// end ;
9844: GO 9827
9846: POP
9847: POP
// end ;
9848: GO 9814
9850: POP
9851: POP
// end ; if VehicleOK_list > 0 then
9852: LD_VAR 0 7
9856: PUSH
9857: LD_INT 0
9859: GREATER
9860: IFFALSE 9894
// begin for i in VehicleOK_list do
9862: LD_ADDR_VAR 0 5
9866: PUSH
9867: LD_VAR 0 7
9871: PUSH
9872: FOR_IN
9873: IFFALSE 9892
// ComAgressiveMove ( i , 110 , 29 ) ;
9875: LD_VAR 0 5
9879: PPUSH
9880: LD_INT 110
9882: PPUSH
9883: LD_INT 29
9885: PPUSH
9886: CALL_OW 114
9890: GO 9872
9892: POP
9893: POP
// end ; end ;
9894: LD_VAR 0 4
9898: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9899: LD_INT 0
9901: PPUSH
9902: PPUSH
9903: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9904: LD_VAR 0 1
9908: PPUSH
9909: LD_INT 22
9911: PUSH
9912: LD_VAR 0 2
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PUSH
9921: LD_INT 2
9923: PUSH
9924: LD_INT 21
9926: PUSH
9927: LD_INT 2
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 21
9936: PUSH
9937: LD_INT 1
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: LIST
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PPUSH
9953: CALL_OW 70
9957: PUSH
9958: LD_VAR 0 5
9962: GREATER
9963: IFFALSE 10095
// begin for i in defendersList do
9965: LD_ADDR_VAR 0 7
9969: PUSH
9970: LD_VAR 0 3
9974: PUSH
9975: FOR_IN
9976: IFFALSE 10091
// begin AddComExitBuilding ( i ) ;
9978: LD_VAR 0 7
9982: PPUSH
9983: CALL_OW 182
// wait ( 0 0$1 ) ;
9987: LD_INT 35
9989: PPUSH
9990: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9994: LD_ADDR_VAR 0 8
9998: PUSH
9999: LD_VAR 0 1
10003: PPUSH
10004: LD_INT 22
10006: PUSH
10007: LD_VAR 0 2
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 2
10018: PUSH
10019: LD_INT 21
10021: PUSH
10022: LD_INT 2
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: LD_INT 21
10031: PUSH
10032: LD_INT 1
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 70
10052: PUSH
10053: FOR_IN
10054: IFFALSE 10087
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
10056: LD_VAR 0 7
10060: PPUSH
10061: LD_VAR 0 8
10065: PPUSH
10066: CALL_OW 250
10070: PPUSH
10071: LD_VAR 0 8
10075: PPUSH
10076: CALL_OW 251
10080: PPUSH
10081: CALL_OW 174
10085: GO 10053
10087: POP
10088: POP
// end ;
10089: GO 9975
10091: POP
10092: POP
// end else
10093: GO 10126
// begin for i in defendersList do
10095: LD_ADDR_VAR 0 7
10099: PUSH
10100: LD_VAR 0 3
10104: PUSH
10105: FOR_IN
10106: IFFALSE 10124
// ComEnterUnit ( i , build ) ;
10108: LD_VAR 0 7
10112: PPUSH
10113: LD_VAR 0 4
10117: PPUSH
10118: CALL_OW 120
10122: GO 10105
10124: POP
10125: POP
// end ; end ;
10126: LD_VAR 0 6
10130: RET
// export function RussianTrap ; var i ; begin
10131: LD_INT 0
10133: PPUSH
10134: PPUSH
// if GetSide ( Brian ) = 4 then
10135: LD_EXP 6
10139: PPUSH
10140: CALL_OW 255
10144: PUSH
10145: LD_INT 4
10147: EQUAL
10148: IFFALSE 10171
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10150: LD_EXP 6
10154: PUSH
10155: LD_EXP 7
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PPUSH
10164: LD_INT 0
10166: PPUSH
10167: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10171: LD_ADDR_VAR 0 2
10175: PUSH
10176: LD_INT 22
10178: PUSH
10179: LD_INT 3
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PUSH
10186: LD_INT 21
10188: PUSH
10189: LD_INT 1
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PPUSH
10200: CALL_OW 69
10204: PUSH
10205: FOR_IN
10206: IFFALSE 10316
// begin ComExitBuilding ( i ) ;
10208: LD_VAR 0 2
10212: PPUSH
10213: CALL_OW 122
// wait ( 0 0$1 ) ;
10217: LD_INT 35
10219: PPUSH
10220: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10224: LD_VAR 0 2
10228: PPUSH
10229: LD_INT 120
10231: PPUSH
10232: LD_INT 56
10234: PPUSH
10235: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10239: LD_VAR 0 2
10243: PPUSH
10244: LD_INT 111
10246: PPUSH
10247: LD_INT 37
10249: PPUSH
10250: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10254: LD_INT 33
10256: PPUSH
10257: CALL_OW 255
10261: PUSH
10262: LD_INT 3
10264: EQUAL
10265: PUSH
10266: LD_INT 33
10268: PPUSH
10269: CALL_OW 302
10273: AND
10274: IFFALSE 10290
// begin AddComEnterUnit ( i , arm2 ) ;
10276: LD_VAR 0 2
10280: PPUSH
10281: LD_INT 33
10283: PPUSH
10284: CALL_OW 180
// end else
10288: GO 10314
// begin AddComCrawl ( i ) ;
10290: LD_VAR 0 2
10294: PPUSH
10295: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10299: LD_VAR 0 2
10303: PPUSH
10304: LD_INT 109
10306: PPUSH
10307: LD_INT 30
10309: PPUSH
10310: CALL_OW 174
// end ; end ;
10314: GO 10205
10316: POP
10317: POP
// end ;
10318: LD_VAR 0 1
10322: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10323: LD_INT 0
10325: PPUSH
10326: PPUSH
10327: PPUSH
10328: PPUSH
10329: PPUSH
// nearest_dist = 1000 ;
10330: LD_ADDR_VAR 0 4
10334: PUSH
10335: LD_INT 1000
10337: ST_TO_ADDR
// nearest_un = un ;
10338: LD_ADDR_VAR 0 5
10342: PUSH
10343: LD_VAR 0 1
10347: ST_TO_ADDR
// for sold in units do
10348: LD_ADDR_VAR 0 6
10352: PUSH
10353: LD_VAR 0 2
10357: PUSH
10358: FOR_IN
10359: IFFALSE 10415
// begin dist = GetDistUnits ( un , sold ) ;
10361: LD_ADDR_VAR 0 7
10365: PUSH
10366: LD_VAR 0 1
10370: PPUSH
10371: LD_VAR 0 6
10375: PPUSH
10376: CALL_OW 296
10380: ST_TO_ADDR
// if dist < nearest_dist then
10381: LD_VAR 0 7
10385: PUSH
10386: LD_VAR 0 4
10390: LESS
10391: IFFALSE 10413
// begin nearest_un = sold ;
10393: LD_ADDR_VAR 0 5
10397: PUSH
10398: LD_VAR 0 6
10402: ST_TO_ADDR
// nearest_dist = dist ;
10403: LD_ADDR_VAR 0 4
10407: PUSH
10408: LD_VAR 0 7
10412: ST_TO_ADDR
// end ; end ;
10413: GO 10358
10415: POP
10416: POP
// result := nearest_un ;
10417: LD_ADDR_VAR 0 3
10421: PUSH
10422: LD_VAR 0 5
10426: ST_TO_ADDR
// end ;
10427: LD_VAR 0 3
10431: RET
// export function PrepareDifficulty ; begin
10432: LD_INT 0
10434: PPUSH
// if Difficulty = 1 then
10435: LD_OWVAR 67
10439: PUSH
10440: LD_INT 1
10442: EQUAL
10443: IFFALSE 10506
// begin RemoveUnit ( brw2 ) ;
10445: LD_INT 9
10447: PPUSH
10448: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10452: LD_INT 30
10454: PPUSH
10455: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10459: LD_INT 52
10461: PPUSH
10462: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10466: LD_INT 63
10468: PPUSH
10469: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10473: LD_INT 5
10475: PUSH
10476: LD_INT 4
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PPUSH
10483: LD_INT 60
10485: PPUSH
10486: CALL_OW 240
// RuSoldMinLevel = 0 ;
10490: LD_ADDR_EXP 13
10494: PUSH
10495: LD_INT 0
10497: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10498: LD_ADDR_EXP 14
10502: PUSH
10503: LD_INT 1
10505: ST_TO_ADDR
// end ; if Difficulty = 2 then
10506: LD_OWVAR 67
10510: PUSH
10511: LD_INT 2
10513: EQUAL
10514: IFFALSE 10556
// begin RemoveUnit ( brw4 ) ;
10516: LD_INT 52
10518: PPUSH
10519: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10523: LD_INT 5
10525: PUSH
10526: LD_INT 4
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PPUSH
10533: LD_INT 50
10535: PPUSH
10536: CALL_OW 240
// RuSoldMinLevel = 1 ;
10540: LD_ADDR_EXP 13
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10548: LD_ADDR_EXP 14
10552: PUSH
10553: LD_INT 2
10555: ST_TO_ADDR
// end ; if Difficulty = 3 then
10556: LD_OWVAR 67
10560: PUSH
10561: LD_INT 3
10563: EQUAL
10564: IFFALSE 10599
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10566: LD_INT 5
10568: PUSH
10569: LD_INT 4
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PPUSH
10576: LD_INT 40
10578: PPUSH
10579: CALL_OW 240
// RuSoldMinLevel = 2 ;
10583: LD_ADDR_EXP 13
10587: PUSH
10588: LD_INT 2
10590: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10591: LD_ADDR_EXP 14
10595: PUSH
10596: LD_INT 3
10598: ST_TO_ADDR
// end ; end ;
10599: LD_VAR 0 1
10603: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10604: LD_INT 0
10606: PPUSH
10607: PPUSH
10608: PPUSH
// tmp = [ ] ;
10609: LD_ADDR_VAR 0 5
10613: PUSH
10614: EMPTY
10615: ST_TO_ADDR
// if not vehicles then
10616: LD_VAR 0 1
10620: NOT
10621: IFFALSE 10625
// exit ;
10623: GO 10742
// for i in vehicles do
10625: LD_ADDR_VAR 0 4
10629: PUSH
10630: LD_VAR 0 1
10634: PUSH
10635: FOR_IN
10636: IFFALSE 10726
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10638: LD_ADDR_VAR 0 5
10642: PUSH
10643: LD_VAR 0 5
10647: PPUSH
10648: LD_INT 1
10650: PPUSH
10651: LD_VAR 0 4
10655: PPUSH
10656: CALL_OW 265
10660: PUSH
10661: LD_VAR 0 4
10665: PPUSH
10666: CALL_OW 262
10670: PUSH
10671: LD_VAR 0 4
10675: PPUSH
10676: CALL_OW 263
10680: PUSH
10681: LD_VAR 0 4
10685: PPUSH
10686: CALL_OW 264
10690: PUSH
10691: LD_VAR 0 4
10695: PPUSH
10696: CALL_OW 261
10700: PUSH
10701: LD_VAR 0 4
10705: PPUSH
10706: CALL_OW 256
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: PPUSH
10719: CALL_OW 2
10723: ST_TO_ADDR
// end ;
10724: GO 10635
10726: POP
10727: POP
// SaveVariable ( tmp , ident ) ;
10728: LD_VAR 0 5
10732: PPUSH
10733: LD_VAR 0 2
10737: PPUSH
10738: CALL_OW 39
// end ; end_of_file
10742: LD_VAR 0 3
10746: RET
// export function PrepareHeroes ; begin
10747: LD_INT 0
10749: PPUSH
// uc_side = 1 ;
10750: LD_ADDR_OWVAR 20
10754: PUSH
10755: LD_INT 1
10757: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10758: LD_ADDR_EXP 1
10762: PUSH
10763: LD_STRING 01_JMM
10765: PPUSH
10766: CALL_OW 34
10770: ST_TO_ADDR
// SetLives ( JMM , LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ) ;
10771: LD_EXP 1
10775: PPUSH
10776: LD_STRING 01_JMMLifePoints_1
10778: PPUSH
10779: LD_INT 1000
10781: PPUSH
10782: CALL_OW 30
10786: PPUSH
10787: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10791: LD_ADDR_EXP 9
10795: PUSH
10796: LD_STRING Powell
10798: PPUSH
10799: CALL_OW 25
10803: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10804: LD_ADDR_EXP 2
10808: PUSH
10809: LD_STRING 01_Bobby
10811: PPUSH
10812: CALL_OW 34
10816: ST_TO_ADDR
// if Bobby then
10817: LD_EXP 2
10821: IFFALSE 10843
// SetLives ( Bobby , LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ) ;
10823: LD_EXP 2
10827: PPUSH
10828: LD_STRING 01_BobbyLifePoints_1
10830: PPUSH
10831: LD_INT 1000
10833: PPUSH
10834: CALL_OW 30
10838: PPUSH
10839: CALL_OW 234
// Cyrus = CreateCharacter ( 01_Cyrus ) ;
10843: LD_ADDR_EXP 3
10847: PUSH
10848: LD_STRING 01_Cyrus
10850: PPUSH
10851: CALL_OW 34
10855: ST_TO_ADDR
// if Cyrus then
10856: LD_EXP 3
10860: IFFALSE 10882
// SetLives ( Cyrus , LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ) ;
10862: LD_EXP 3
10866: PPUSH
10867: LD_STRING 01_CyrusLifePoints_1
10869: PPUSH
10870: LD_INT 1000
10872: PPUSH
10873: CALL_OW 30
10877: PPUSH
10878: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
10882: LD_ADDR_EXP 5
10886: PUSH
10887: LD_STRING Khatam
10889: PPUSH
10890: CALL_OW 25
10894: ST_TO_ADDR
// uc_side = 4 ;
10895: LD_ADDR_OWVAR 20
10899: PUSH
10900: LD_INT 4
10902: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10903: LD_ADDR_EXP 4
10907: PUSH
10908: LD_STRING Lisa
10910: PPUSH
10911: CALL_OW 25
10915: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10916: LD_EXP 1
10920: PPUSH
10921: LD_INT 3
10923: PPUSH
10924: LD_INT 0
10926: PPUSH
10927: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10931: LD_EXP 2
10935: PPUSH
10936: LD_INT 3
10938: PPUSH
10939: LD_INT 0
10941: PPUSH
10942: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10946: LD_EXP 3
10950: PPUSH
10951: LD_INT 3
10953: PPUSH
10954: LD_INT 0
10956: PPUSH
10957: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10961: LD_EXP 4
10965: PPUSH
10966: LD_INT 5
10968: PPUSH
10969: LD_INT 0
10971: PPUSH
10972: CALL_OW 49
// ComCrawl ( Lisa ) ;
10976: LD_EXP 4
10980: PPUSH
10981: CALL_OW 137
// end ;
10985: LD_VAR 0 1
10989: RET
// export function PrepareLisSquad ; var i , un ; begin
10990: LD_INT 0
10992: PPUSH
10993: PPUSH
10994: PPUSH
// uc_side = 4 ;
10995: LD_ADDR_OWVAR 20
10999: PUSH
11000: LD_INT 4
11002: ST_TO_ADDR
// uc_nation = 1 ;
11003: LD_ADDR_OWVAR 21
11007: PUSH
11008: LD_INT 1
11010: ST_TO_ADDR
// hc_class := 2 ;
11011: LD_ADDR_OWVAR 28
11015: PUSH
11016: LD_INT 2
11018: ST_TO_ADDR
// hc_sex := sex_male ;
11019: LD_ADDR_OWVAR 27
11023: PUSH
11024: LD_INT 1
11026: ST_TO_ADDR
// hc_gallery :=  ;
11027: LD_ADDR_OWVAR 33
11031: PUSH
11032: LD_STRING 
11034: ST_TO_ADDR
// hc_name :=  ;
11035: LD_ADDR_OWVAR 26
11039: PUSH
11040: LD_STRING 
11042: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11043: LD_ADDR_OWVAR 30
11047: PUSH
11048: LD_INT 0
11050: PUSH
11051: LD_INT 1
11053: PUSH
11054: LD_INT 0
11056: PUSH
11057: LD_INT 0
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11066: LD_ADDR_OWVAR 31
11070: PUSH
11071: LD_INT 1
11073: PUSH
11074: LD_INT 2
11076: PUSH
11077: LD_INT 0
11079: PUSH
11080: LD_INT 0
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: ST_TO_ADDR
// un := CreateHuman ;
11089: LD_ADDR_VAR 0 3
11093: PUSH
11094: CALL_OW 44
11098: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11099: LD_VAR 0 3
11103: PPUSH
11104: LD_INT 6
11106: PPUSH
11107: LD_INT 0
11109: PPUSH
11110: CALL_OW 49
// hc_sex := sex_female ;
11114: LD_ADDR_OWVAR 27
11118: PUSH
11119: LD_INT 2
11121: ST_TO_ADDR
// hc_gallery :=  ;
11122: LD_ADDR_OWVAR 33
11126: PUSH
11127: LD_STRING 
11129: ST_TO_ADDR
// hc_name :=  ;
11130: LD_ADDR_OWVAR 26
11134: PUSH
11135: LD_STRING 
11137: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11138: LD_ADDR_OWVAR 30
11142: PUSH
11143: LD_INT 0
11145: PUSH
11146: LD_INT 0
11148: PUSH
11149: LD_INT 0
11151: PUSH
11152: LD_INT 1
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11161: LD_ADDR_OWVAR 31
11165: PUSH
11166: LD_INT 0
11168: PUSH
11169: LD_INT 1
11171: PUSH
11172: LD_INT 0
11174: PUSH
11175: LD_INT 1
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: ST_TO_ADDR
// un := CreateHuman ;
11184: LD_ADDR_VAR 0 3
11188: PUSH
11189: CALL_OW 44
11193: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11194: LD_VAR 0 3
11198: PPUSH
11199: LD_INT 6
11201: PPUSH
11202: LD_INT 0
11204: PPUSH
11205: CALL_OW 49
// if not Bobby and not Cyrus then
11209: LD_EXP 2
11213: NOT
11214: PUSH
11215: LD_EXP 3
11219: NOT
11220: AND
11221: IFFALSE 11326
// begin hc_class := 1 ;
11223: LD_ADDR_OWVAR 28
11227: PUSH
11228: LD_INT 1
11230: ST_TO_ADDR
// hc_sex := sex_male ;
11231: LD_ADDR_OWVAR 27
11235: PUSH
11236: LD_INT 1
11238: ST_TO_ADDR
// hc_gallery :=  ;
11239: LD_ADDR_OWVAR 33
11243: PUSH
11244: LD_STRING 
11246: ST_TO_ADDR
// hc_name :=  ;
11247: LD_ADDR_OWVAR 26
11251: PUSH
11252: LD_STRING 
11254: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11255: LD_ADDR_OWVAR 30
11259: PUSH
11260: LD_INT 2
11262: PUSH
11263: LD_INT 3
11265: PUSH
11266: LD_INT 1
11268: PUSH
11269: LD_INT 0
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11278: LD_ADDR_OWVAR 31
11282: PUSH
11283: LD_INT 2
11285: PUSH
11286: LD_INT 3
11288: PUSH
11289: LD_INT 1
11291: PUSH
11292: LD_INT 0
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: ST_TO_ADDR
// un := CreateHuman ;
11301: LD_ADDR_VAR 0 3
11305: PUSH
11306: CALL_OW 44
11310: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11311: LD_VAR 0 3
11315: PPUSH
11316: LD_INT 31
11318: PPUSH
11319: LD_INT 0
11321: PPUSH
11322: CALL_OW 49
// end ; InitHc ;
11326: CALL_OW 19
// end ;
11330: LD_VAR 0 1
11334: RET
// export function PrepareOtherAmericans ; begin
11335: LD_INT 0
11337: PPUSH
// uc_side = 4 ;
11338: LD_ADDR_OWVAR 20
11342: PUSH
11343: LD_INT 4
11345: ST_TO_ADDR
// uc_nation = 1 ;
11346: LD_ADDR_OWVAR 21
11350: PUSH
11351: LD_INT 1
11353: ST_TO_ADDR
// hc_gallery =  ;
11354: LD_ADDR_OWVAR 33
11358: PUSH
11359: LD_STRING 
11361: ST_TO_ADDR
// hc_name = Brian Garvin ;
11362: LD_ADDR_OWVAR 26
11366: PUSH
11367: LD_STRING Brian Garvin
11369: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11370: LD_INT 1
11372: PPUSH
11373: LD_INT 1
11375: PPUSH
11376: LD_INT 1
11378: PPUSH
11379: LD_INT 2
11381: PPUSH
11382: CALL_OW 12
11386: PPUSH
11387: CALL_OW 380
// Brian = CreateHuman ;
11391: LD_ADDR_EXP 6
11395: PUSH
11396: CALL_OW 44
11400: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11401: LD_EXP 6
11405: PPUSH
11406: LD_INT 10
11408: PPUSH
11409: LD_INT 0
11411: PPUSH
11412: CALL_OW 49
// hc_name = Jerry White ;
11416: LD_ADDR_OWVAR 26
11420: PUSH
11421: LD_STRING Jerry White
11423: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11424: LD_INT 1
11426: PPUSH
11427: LD_INT 3
11429: PPUSH
11430: LD_INT 1
11432: PPUSH
11433: LD_INT 2
11435: PPUSH
11436: CALL_OW 12
11440: PPUSH
11441: CALL_OW 380
// Jerry = CreateHuman ;
11445: LD_ADDR_EXP 7
11449: PUSH
11450: CALL_OW 44
11454: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11455: LD_EXP 7
11459: PPUSH
11460: LD_INT 10
11462: PPUSH
11463: LD_INT 0
11465: PPUSH
11466: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11470: LD_EXP 6
11474: PUSH
11475: LD_EXP 7
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PPUSH
11484: CALL_OW 140
// end ;
11488: LD_VAR 0 1
11492: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11493: LD_INT 0
11495: PPUSH
11496: PPUSH
11497: PPUSH
// for i = 1 to 6 do
11498: LD_ADDR_VAR 0 2
11502: PUSH
11503: DOUBLE
11504: LD_INT 1
11506: DEC
11507: ST_TO_ADDR
11508: LD_INT 6
11510: PUSH
11511: FOR_TO
11512: IFFALSE 11606
// begin uc_side = 4 ;
11514: LD_ADDR_OWVAR 20
11518: PUSH
11519: LD_INT 4
11521: ST_TO_ADDR
// uc_nation = 1 ;
11522: LD_ADDR_OWVAR 21
11526: PUSH
11527: LD_INT 1
11529: ST_TO_ADDR
// hc_gallery =  ;
11530: LD_ADDR_OWVAR 33
11534: PUSH
11535: LD_STRING 
11537: ST_TO_ADDR
// hc_name =  ;
11538: LD_ADDR_OWVAR 26
11542: PUSH
11543: LD_STRING 
11545: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11546: LD_INT 0
11548: PPUSH
11549: LD_INT 1
11551: PPUSH
11552: LD_INT 4
11554: PPUSH
11555: CALL_OW 12
11559: PPUSH
11560: LD_INT 1
11562: PPUSH
11563: CALL_OW 380
// un = CreateHuman ;
11567: LD_ADDR_VAR 0 3
11571: PUSH
11572: CALL_OW 44
11576: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11577: LD_VAR 0 3
11581: PPUSH
11582: LD_INT 16
11584: PPUSH
11585: LD_INT 0
11587: PPUSH
11588: CALL_OW 49
// SetLives ( un , 1 ) ;
11592: LD_VAR 0 3
11596: PPUSH
11597: LD_INT 1
11599: PPUSH
11600: CALL_OW 234
// end ;
11604: GO 11511
11606: POP
11607: POP
// DyingSold = CreateHuman ;
11608: LD_ADDR_EXP 34
11612: PUSH
11613: CALL_OW 44
11617: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11618: LD_EXP 34
11622: PPUSH
11623: LD_INT 16
11625: PPUSH
11626: LD_INT 0
11628: PPUSH
11629: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11633: LD_EXP 34
11637: PPUSH
11638: LD_INT 250
11640: PPUSH
11641: CALL_OW 234
// end ; end_of_file
11645: LD_VAR 0 1
11649: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11650: LD_INT 0
11652: PPUSH
11653: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11654: LD_ADDR_VAR 0 2
11658: PUSH
11659: LD_INT 22
11661: PUSH
11662: LD_INT 1
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 23
11671: PUSH
11672: LD_INT 1
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PUSH
11679: LD_INT 25
11681: PUSH
11682: LD_INT 2
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: PUSH
11689: LD_INT 50
11691: PUSH
11692: EMPTY
11693: LIST
11694: PUSH
11695: LD_INT 56
11697: PUSH
11698: EMPTY
11699: LIST
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: PPUSH
11708: CALL_OW 69
11712: PUSH
11713: LD_EXP 1
11717: PUSH
11718: EMPTY
11719: LIST
11720: DIFF
11721: ST_TO_ADDR
// uc_side = 6 ;
11722: LD_ADDR_OWVAR 20
11726: PUSH
11727: LD_INT 6
11729: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11730: LD_ADDR_EXP 8
11734: PUSH
11735: LD_STRING Mikhail
11737: PPUSH
11738: CALL_OW 25
11742: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
11743: LD_EXP 8
11747: PPUSH
11748: LD_VAR 0 2
11752: PUSH
11753: LD_INT 1
11755: ARRAY
11756: PPUSH
11757: CALL_OW 250
11761: PPUSH
11762: LD_VAR 0 2
11766: PUSH
11767: LD_INT 1
11769: ARRAY
11770: PPUSH
11771: CALL_OW 251
11775: PPUSH
11776: LD_INT 3
11778: PPUSH
11779: LD_INT 1
11781: PPUSH
11782: CALL_OW 50
// end ;
11786: LD_VAR 0 1
11790: RET
// export function PrepareRussianCommander ; begin
11791: LD_INT 0
11793: PPUSH
// uc_side = 3 ;
11794: LD_ADDR_OWVAR 20
11798: PUSH
11799: LD_INT 3
11801: ST_TO_ADDR
// uc_nation = 3 ;
11802: LD_ADDR_OWVAR 21
11806: PUSH
11807: LD_INT 3
11809: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11810: LD_ADDR_EXP 19
11814: PUSH
11815: LD_STRING Natasza
11817: PPUSH
11818: CALL_OW 25
11822: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11823: LD_EXP 19
11827: PPUSH
11828: LD_INT 24
11830: PPUSH
11831: LD_INT 0
11833: PPUSH
11834: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11838: LD_EXP 19
11842: PPUSH
11843: LD_INT 56
11845: PPUSH
11846: LD_INT 16
11848: PPUSH
11849: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11853: LD_ADDR_EXP 24
11857: PUSH
11858: LD_EXP 24
11862: PUSH
11863: LD_EXP 19
11867: ADD
11868: ST_TO_ADDR
// end ;
11869: LD_VAR 0 1
11873: RET
// export function PrepareSouthBase ; var i , un ; begin
11874: LD_INT 0
11876: PPUSH
11877: PPUSH
11878: PPUSH
// for i = 1 to 2 do
11879: LD_ADDR_VAR 0 2
11883: PUSH
11884: DOUBLE
11885: LD_INT 1
11887: DEC
11888: ST_TO_ADDR
11889: LD_INT 2
11891: PUSH
11892: FOR_TO
11893: IFFALSE 12002
// begin uc_side = 3 ;
11895: LD_ADDR_OWVAR 20
11899: PUSH
11900: LD_INT 3
11902: ST_TO_ADDR
// uc_nation = 3 ;
11903: LD_ADDR_OWVAR 21
11907: PUSH
11908: LD_INT 3
11910: ST_TO_ADDR
// hc_gallery =  ;
11911: LD_ADDR_OWVAR 33
11915: PUSH
11916: LD_STRING 
11918: ST_TO_ADDR
// hc_name =  ;
11919: LD_ADDR_OWVAR 26
11923: PUSH
11924: LD_STRING 
11926: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11927: LD_INT 1
11929: PPUSH
11930: LD_INT 1
11932: PPUSH
11933: LD_EXP 13
11937: PPUSH
11938: LD_EXP 14
11942: PPUSH
11943: CALL_OW 12
11947: PPUSH
11948: CALL_OW 380
// hc_importance = 0 ;
11952: LD_ADDR_OWVAR 32
11956: PUSH
11957: LD_INT 0
11959: ST_TO_ADDR
// un = CreateHuman ;
11960: LD_ADDR_VAR 0 3
11964: PUSH
11965: CALL_OW 44
11969: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11970: LD_VAR 0 3
11974: PPUSH
11975: LD_INT 11
11977: PPUSH
11978: LD_INT 0
11980: PPUSH
11981: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11985: LD_VAR 0 3
11989: PPUSH
11990: LD_INT 111
11992: PPUSH
11993: LD_INT 38
11995: PPUSH
11996: CALL_OW 118
// end ;
12000: GO 11892
12002: POP
12003: POP
// for i = 1 to Difficulty do
12004: LD_ADDR_VAR 0 2
12008: PUSH
12009: DOUBLE
12010: LD_INT 1
12012: DEC
12013: ST_TO_ADDR
12014: LD_OWVAR 67
12018: PUSH
12019: FOR_TO
12020: IFFALSE 12103
// begin uc_side = 3 ;
12022: LD_ADDR_OWVAR 20
12026: PUSH
12027: LD_INT 3
12029: ST_TO_ADDR
// uc_nation = 3 ;
12030: LD_ADDR_OWVAR 21
12034: PUSH
12035: LD_INT 3
12037: ST_TO_ADDR
// hc_gallery =  ;
12038: LD_ADDR_OWVAR 33
12042: PUSH
12043: LD_STRING 
12045: ST_TO_ADDR
// hc_name =  ;
12046: LD_ADDR_OWVAR 26
12050: PUSH
12051: LD_STRING 
12053: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12054: LD_INT 0
12056: PPUSH
12057: LD_INT 3
12059: PPUSH
12060: LD_EXP 13
12064: PPUSH
12065: LD_EXP 14
12069: PPUSH
12070: CALL_OW 12
12074: PPUSH
12075: CALL_OW 380
// un = CreateHuman ;
12079: LD_ADDR_VAR 0 3
12083: PUSH
12084: CALL_OW 44
12088: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12089: LD_VAR 0 3
12093: PPUSH
12094: LD_INT 10
12096: PPUSH
12097: CALL_OW 52
// end ;
12101: GO 12019
12103: POP
12104: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12105: LD_INT 3
12107: PPUSH
12108: LD_INT 3
12110: PPUSH
12111: LD_INT 33
12113: PPUSH
12114: LD_EXP 13
12118: PPUSH
12119: LD_EXP 14
12123: PPUSH
12124: CALL_OW 12
12128: PPUSH
12129: LD_INT 1
12131: PPUSH
12132: LD_INT 1
12134: PUSH
12135: LD_INT 1
12137: PPUSH
12138: LD_INT 2
12140: PPUSH
12141: CALL_OW 12
12145: PUSH
12146: LD_INT 1
12148: PPUSH
12149: LD_INT 2
12151: PPUSH
12152: CALL_OW 12
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: LIST
12161: PUSH
12162: LD_OWVAR 67
12166: ARRAY
12167: PPUSH
12168: CALL 8658 0 6
// for i in UnitsInside ( arm2 ) do
12172: LD_ADDR_VAR 0 2
12176: PUSH
12177: LD_INT 33
12179: PPUSH
12180: CALL_OW 313
12184: PUSH
12185: FOR_IN
12186: IFFALSE 12206
// southBaseDefenders = southBaseDefenders ^ i ;
12188: LD_ADDR_EXP 25
12192: PUSH
12193: LD_EXP 25
12197: PUSH
12198: LD_VAR 0 2
12202: ADD
12203: ST_TO_ADDR
12204: GO 12185
12206: POP
12207: POP
// end ;
12208: LD_VAR 0 1
12212: RET
// export function PrepareNorthBase ; var i , un ; begin
12213: LD_INT 0
12215: PPUSH
12216: PPUSH
12217: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12218: LD_ADDR_VAR 0 2
12222: PUSH
12223: DOUBLE
12224: LD_INT 1
12226: DEC
12227: ST_TO_ADDR
12228: LD_INT 1
12230: PPUSH
12231: LD_INT 2
12233: PPUSH
12234: CALL_OW 12
12238: PUSH
12239: LD_INT 2
12241: PPUSH
12242: LD_INT 3
12244: PPUSH
12245: CALL_OW 12
12249: PUSH
12250: LD_INT 3
12252: PPUSH
12253: LD_INT 4
12255: PPUSH
12256: CALL_OW 12
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: LIST
12265: PUSH
12266: LD_OWVAR 67
12270: ARRAY
12271: PUSH
12272: FOR_TO
12273: IFFALSE 12359
// begin uc_side = 3 ;
12275: LD_ADDR_OWVAR 20
12279: PUSH
12280: LD_INT 3
12282: ST_TO_ADDR
// uc_nation = 3 ;
12283: LD_ADDR_OWVAR 21
12287: PUSH
12288: LD_INT 3
12290: ST_TO_ADDR
// hc_gallery =  ;
12291: LD_ADDR_OWVAR 33
12295: PUSH
12296: LD_STRING 
12298: ST_TO_ADDR
// hc_name =  ;
12299: LD_ADDR_OWVAR 26
12303: PUSH
12304: LD_STRING 
12306: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12307: LD_INT 0
12309: PPUSH
12310: LD_INT 1
12312: PPUSH
12313: LD_EXP 13
12317: PPUSH
12318: LD_EXP 14
12322: PPUSH
12323: CALL_OW 12
12327: PPUSH
12328: CALL_OW 380
// un = CreateHuman ;
12332: LD_ADDR_VAR 0 3
12336: PUSH
12337: CALL_OW 44
12341: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12342: LD_VAR 0 3
12346: PPUSH
12347: LD_INT 14
12349: PPUSH
12350: LD_INT 0
12352: PPUSH
12353: CALL_OW 49
// end ;
12357: GO 12272
12359: POP
12360: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12361: LD_INT 3
12363: PPUSH
12364: LD_INT 3
12366: PPUSH
12367: LD_INT 2
12369: PPUSH
12370: LD_EXP 13
12374: PPUSH
12375: LD_EXP 14
12379: PPUSH
12380: CALL_OW 12
12384: PPUSH
12385: LD_INT 1
12387: PPUSH
12388: LD_INT 1
12390: PPUSH
12391: LD_INT 2
12393: PPUSH
12394: CALL_OW 12
12398: PUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_INT 3
12404: PPUSH
12405: CALL_OW 12
12409: PUSH
12410: LD_INT 1
12412: PPUSH
12413: LD_INT 3
12415: PPUSH
12416: CALL_OW 12
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: LIST
12425: PUSH
12426: LD_OWVAR 67
12430: ARRAY
12431: PPUSH
12432: CALL 8658 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12436: LD_INT 3
12438: PPUSH
12439: LD_INT 3
12441: PPUSH
12442: LD_INT 23
12444: PPUSH
12445: LD_EXP 13
12449: PPUSH
12450: LD_EXP 14
12454: PPUSH
12455: CALL_OW 12
12459: PPUSH
12460: LD_INT 4
12462: PPUSH
12463: LD_INT 0
12465: PUSH
12466: LD_INT 1
12468: PUSH
12469: LD_INT 2
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: LIST
12476: PUSH
12477: LD_OWVAR 67
12481: ARRAY
12482: PPUSH
12483: CALL 8658 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12487: LD_INT 3
12489: PPUSH
12490: LD_INT 3
12492: PPUSH
12493: LD_INT 1
12495: PPUSH
12496: LD_EXP 13
12500: PPUSH
12501: LD_EXP 14
12505: PPUSH
12506: CALL_OW 12
12510: PPUSH
12511: LD_INT 2
12513: PPUSH
12514: LD_INT 1
12516: PUSH
12517: LD_INT 2
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: LIST
12527: PUSH
12528: LD_OWVAR 67
12532: ARRAY
12533: PPUSH
12534: CALL 8658 0 6
// for i in UnitsInside ( arm1 ) do
12538: LD_ADDR_VAR 0 2
12542: PUSH
12543: LD_INT 2
12545: PPUSH
12546: CALL_OW 313
12550: PUSH
12551: FOR_IN
12552: IFFALSE 12572
// northBaseDefenders = northBaseDefenders ^ i ;
12554: LD_ADDR_EXP 24
12558: PUSH
12559: LD_EXP 24
12563: PUSH
12564: LD_VAR 0 2
12568: ADD
12569: ST_TO_ADDR
12570: GO 12551
12572: POP
12573: POP
// end ;
12574: LD_VAR 0 1
12578: RET
// export function PrepareOtherRussians ; var i , un ; begin
12579: LD_INT 0
12581: PPUSH
12582: PPUSH
12583: PPUSH
// for i = 1 to 2 do
12584: LD_ADDR_VAR 0 2
12588: PUSH
12589: DOUBLE
12590: LD_INT 1
12592: DEC
12593: ST_TO_ADDR
12594: LD_INT 2
12596: PUSH
12597: FOR_TO
12598: IFFALSE 12699
// begin uc_side = 3 ;
12600: LD_ADDR_OWVAR 20
12604: PUSH
12605: LD_INT 3
12607: ST_TO_ADDR
// uc_nation = 3 ;
12608: LD_ADDR_OWVAR 21
12612: PUSH
12613: LD_INT 3
12615: ST_TO_ADDR
// hc_gallery =  ;
12616: LD_ADDR_OWVAR 33
12620: PUSH
12621: LD_STRING 
12623: ST_TO_ADDR
// hc_name =  ;
12624: LD_ADDR_OWVAR 26
12628: PUSH
12629: LD_STRING 
12631: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12632: LD_INT 0
12634: PPUSH
12635: LD_INT 1
12637: PPUSH
12638: LD_EXP 13
12642: PPUSH
12643: LD_EXP 14
12647: PPUSH
12648: CALL_OW 12
12652: PPUSH
12653: CALL_OW 380
// un = CreateHuman ;
12657: LD_ADDR_VAR 0 3
12661: PUSH
12662: CALL_OW 44
12666: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12667: LD_VAR 0 3
12671: PPUSH
12672: LD_INT 9
12674: PPUSH
12675: LD_INT 0
12677: PPUSH
12678: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12682: LD_VAR 0 3
12686: PPUSH
12687: LD_INT 80
12689: PPUSH
12690: LD_INT 73
12692: PPUSH
12693: CALL_OW 118
// end ;
12697: GO 12597
12699: POP
12700: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12701: LD_ADDR_VAR 0 2
12705: PUSH
12706: LD_INT 22
12708: PUSH
12709: LD_INT 3
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: PUSH
12716: LD_INT 30
12718: PUSH
12719: LD_INT 31
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PPUSH
12730: CALL_OW 69
12734: PUSH
12735: FOR_IN
12736: IFFALSE 12764
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12738: LD_EXP 13
12742: PPUSH
12743: LD_EXP 14
12747: PPUSH
12748: CALL_OW 12
12752: PPUSH
12753: LD_VAR 0 2
12757: PPUSH
12758: CALL 8768 0 2
12762: GO 12735
12764: POP
12765: POP
// end ;
12766: LD_VAR 0 1
12770: RET
// export function PrepareCargoBays ; begin
12771: LD_INT 0
12773: PPUSH
// uc_side = 3 ;
12774: LD_ADDR_OWVAR 20
12778: PUSH
12779: LD_INT 3
12781: ST_TO_ADDR
// uc_nation = 3 ;
12782: LD_ADDR_OWVAR 21
12786: PUSH
12787: LD_INT 3
12789: ST_TO_ADDR
// vc_engine = 1 ;
12790: LD_ADDR_OWVAR 39
12794: PUSH
12795: LD_INT 1
12797: ST_TO_ADDR
// vc_control = 1 ;
12798: LD_ADDR_OWVAR 38
12802: PUSH
12803: LD_INT 1
12805: ST_TO_ADDR
// vc_weapon = 51 ;
12806: LD_ADDR_OWVAR 40
12810: PUSH
12811: LD_INT 51
12813: ST_TO_ADDR
// vc_chassis = 22 ;
12814: LD_ADDR_OWVAR 37
12818: PUSH
12819: LD_INT 22
12821: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12822: LD_ADDR_EXP 15
12826: PUSH
12827: CALL_OW 45
12831: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12832: LD_ADDR_EXP 16
12836: PUSH
12837: CALL_OW 45
12841: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12842: LD_EXP 15
12846: PPUSH
12847: LD_INT 13
12849: PPUSH
12850: LD_INT 0
12852: PPUSH
12853: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12857: LD_EXP 16
12861: PPUSH
12862: LD_INT 13
12864: PPUSH
12865: LD_INT 0
12867: PPUSH
12868: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12872: LD_EXP 15
12876: PPUSH
12877: LD_INT 2
12879: PPUSH
12880: LD_INT 70
12882: PUSH
12883: LD_INT 50
12885: PUSH
12886: LD_INT 30
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: LIST
12893: PUSH
12894: LD_OWVAR 67
12898: ARRAY
12899: PPUSH
12900: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12904: LD_EXP 16
12908: PPUSH
12909: LD_INT 2
12911: PPUSH
12912: LD_INT 70
12914: PUSH
12915: LD_INT 50
12917: PUSH
12918: LD_INT 30
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_OWVAR 67
12930: ARRAY
12931: PPUSH
12932: CALL_OW 291
// hc_gallery =  ;
12936: LD_ADDR_OWVAR 33
12940: PUSH
12941: LD_STRING 
12943: ST_TO_ADDR
// hc_name =  ;
12944: LD_ADDR_OWVAR 26
12948: PUSH
12949: LD_STRING 
12951: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12952: LD_INT 1
12954: PPUSH
12955: LD_INT 3
12957: PPUSH
12958: LD_INT 1
12960: PPUSH
12961: LD_INT 2
12963: PPUSH
12964: CALL_OW 12
12968: PPUSH
12969: CALL_OW 380
// driver1 = CreateHuman ;
12973: LD_ADDR_EXP 17
12977: PUSH
12978: CALL_OW 44
12982: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12983: LD_EXP 17
12987: PPUSH
12988: LD_EXP 15
12992: PPUSH
12993: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12997: LD_ADDR_OWVAR 26
13001: PUSH
13002: LD_STRING Nikolai Andreyev
13004: ST_TO_ADDR
// driver2 = CreateHuman ;
13005: LD_ADDR_EXP 18
13009: PUSH
13010: CALL_OW 44
13014: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13015: LD_EXP 18
13019: PPUSH
13020: LD_EXP 16
13024: PPUSH
13025: CALL_OW 52
// end ;
13029: LD_VAR 0 1
13033: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
13034: LD_INT 0
13036: PPUSH
13037: PPUSH
13038: PPUSH
13039: PPUSH
13040: PPUSH
13041: PPUSH
13042: PPUSH
// uc_side = 3 ;
13043: LD_ADDR_OWVAR 20
13047: PUSH
13048: LD_INT 3
13050: ST_TO_ADDR
// uc_nation = 3 ;
13051: LD_ADDR_OWVAR 21
13055: PUSH
13056: LD_INT 3
13058: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13059: LD_ADDR_VAR 0 4
13063: PUSH
13064: DOUBLE
13065: LD_INT 1
13067: DEC
13068: ST_TO_ADDR
13069: LD_VAR 0 1
13073: PUSH
13074: LD_INT 1
13076: PPUSH
13077: LD_INT 3
13079: PPUSH
13080: CALL_OW 12
13084: PLUS
13085: PUSH
13086: FOR_TO
13087: IFFALSE 13264
// begin vc_engine = 1 ;
13089: LD_ADDR_OWVAR 39
13093: PUSH
13094: LD_INT 1
13096: ST_TO_ADDR
// vc_control = 1 ;
13097: LD_ADDR_OWVAR 38
13101: PUSH
13102: LD_INT 1
13104: ST_TO_ADDR
// vc_weapon = 42 ;
13105: LD_ADDR_OWVAR 40
13109: PUSH
13110: LD_INT 42
13112: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13113: LD_ADDR_OWVAR 37
13117: PUSH
13118: LD_INT 21
13120: PUSH
13121: LD_INT 22
13123: PUSH
13124: LD_INT 22
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: LIST
13131: PUSH
13132: LD_OWVAR 67
13136: ARRAY
13137: ST_TO_ADDR
// veh = CreateVehicle ;
13138: LD_ADDR_VAR 0 5
13142: PUSH
13143: CALL_OW 45
13147: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13148: LD_VAR 0 5
13152: PPUSH
13153: LD_VAR 0 2
13157: PPUSH
13158: LD_INT 0
13160: PPUSH
13161: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13165: LD_ADDR_EXP 26
13169: PUSH
13170: LD_EXP 26
13174: PUSH
13175: LD_VAR 0 5
13179: ADD
13180: ST_TO_ADDR
// hc_gallery =  ;
13181: LD_ADDR_OWVAR 33
13185: PUSH
13186: LD_STRING 
13188: ST_TO_ADDR
// hc_name =  ;
13189: LD_ADDR_OWVAR 26
13193: PUSH
13194: LD_STRING 
13196: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13197: LD_INT 0
13199: PPUSH
13200: LD_INT 3
13202: PPUSH
13203: LD_EXP 13
13207: PPUSH
13208: LD_EXP 14
13212: PPUSH
13213: CALL_OW 12
13217: PPUSH
13218: CALL_OW 380
// un = CreateHuman ;
13222: LD_ADDR_VAR 0 6
13226: PUSH
13227: CALL_OW 44
13231: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13232: LD_VAR 0 6
13236: PPUSH
13237: LD_VAR 0 5
13241: PPUSH
13242: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13246: LD_ADDR_EXP 26
13250: PUSH
13251: LD_EXP 26
13255: PUSH
13256: LD_VAR 0 6
13260: ADD
13261: ST_TO_ADDR
// end ;
13262: GO 13086
13264: POP
13265: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13266: LD_INT 0
13268: PPUSH
13269: LD_INT 2
13271: PPUSH
13272: LD_EXP 13
13276: PPUSH
13277: LD_EXP 14
13281: PPUSH
13282: CALL_OW 12
13286: PPUSH
13287: CALL_OW 380
// un = CreateHuman ;
13291: LD_ADDR_VAR 0 6
13295: PUSH
13296: CALL_OW 44
13300: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13301: LD_ADDR_VAR 0 4
13305: PUSH
13306: DOUBLE
13307: LD_INT 1
13309: DEC
13310: ST_TO_ADDR
13311: LD_VAR 0 1
13315: PUSH
13316: LD_INT 2
13318: PUSH
13319: LD_INT 2
13321: MUL
13322: PLUS
13323: PUSH
13324: FOR_TO
13325: IFFALSE 13413
// begin hc_gallery =  ;
13327: LD_ADDR_OWVAR 33
13331: PUSH
13332: LD_STRING 
13334: ST_TO_ADDR
// hc_name =  ;
13335: LD_ADDR_OWVAR 26
13339: PUSH
13340: LD_STRING 
13342: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13343: LD_INT 1
13345: PPUSH
13346: LD_INT 1
13348: PPUSH
13349: LD_EXP 13
13353: PPUSH
13354: LD_EXP 14
13358: PPUSH
13359: CALL_OW 12
13363: PPUSH
13364: CALL_OW 380
// un = CreateHuman ;
13368: LD_ADDR_VAR 0 6
13372: PUSH
13373: CALL_OW 44
13377: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13378: LD_VAR 0 6
13382: PPUSH
13383: LD_VAR 0 2
13387: PPUSH
13388: LD_INT 0
13390: PPUSH
13391: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13395: LD_ADDR_EXP 26
13399: PUSH
13400: LD_EXP 26
13404: PUSH
13405: LD_VAR 0 6
13409: ADD
13410: ST_TO_ADDR
// end ;
13411: GO 13324
13413: POP
13414: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13415: LD_ADDR_VAR 0 7
13419: PUSH
13420: LD_INT 26
13422: PPUSH
13423: LD_INT 22
13425: PUSH
13426: LD_INT 3
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 21
13435: PUSH
13436: LD_INT 1
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: LD_INT 26
13445: PUSH
13446: LD_INT 1
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: PPUSH
13458: CALL_OW 70
13462: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13463: LD_VAR 0 7
13467: PUSH
13468: LD_INT 1
13470: ARRAY
13471: PPUSH
13472: LD_STRING D9-Rus3-1
13474: PPUSH
13475: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13479: LD_VAR 0 7
13483: PUSH
13484: LD_INT 2
13486: ARRAY
13487: PPUSH
13488: LD_STRING D9-Russ-1
13490: PPUSH
13491: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13495: LD_INT 35
13497: PPUSH
13498: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13502: LD_ADDR_VAR 0 4
13506: PUSH
13507: LD_INT 26
13509: PPUSH
13510: LD_INT 22
13512: PUSH
13513: LD_INT 3
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: EMPTY
13521: LIST
13522: PPUSH
13523: CALL_OW 70
13527: PUSH
13528: FOR_IN
13529: IFFALSE 13701
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13531: LD_ADDR_VAR 0 8
13535: PUSH
13536: LD_INT 22
13538: PUSH
13539: LD_INT 1
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PPUSH
13546: CALL_OW 69
13550: PPUSH
13551: LD_VAR 0 4
13555: PPUSH
13556: CALL_OW 74
13560: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13561: LD_ADDR_VAR 0 9
13565: PUSH
13566: LD_INT 22
13568: PUSH
13569: LD_INT 1
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: LD_INT 2
13578: PUSH
13579: LD_INT 59
13581: PUSH
13582: EMPTY
13583: LIST
13584: PUSH
13585: LD_INT 21
13587: PUSH
13588: LD_INT 1
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: LD_INT 21
13597: PUSH
13598: LD_INT 2
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: EMPTY
13616: LIST
13617: PPUSH
13618: CALL_OW 69
13622: PPUSH
13623: LD_VAR 0 4
13627: PPUSH
13628: CALL_OW 74
13632: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13633: LD_VAR 0 4
13637: PPUSH
13638: LD_VAR 0 8
13642: PPUSH
13643: CALL_OW 296
13647: PUSH
13648: LD_INT 8
13650: PLUS
13651: PUSH
13652: LD_VAR 0 4
13656: PPUSH
13657: LD_VAR 0 9
13661: PPUSH
13662: CALL_OW 296
13666: LESS
13667: IFFALSE 13685
// begin ComAttackUnit ( i , target1 ) ;
13669: LD_VAR 0 4
13673: PPUSH
13674: LD_VAR 0 8
13678: PPUSH
13679: CALL_OW 115
// end else
13683: GO 13699
// begin ComAttackUnit ( i , target2 ) ;
13685: LD_VAR 0 4
13689: PPUSH
13690: LD_VAR 0 9
13694: PPUSH
13695: CALL_OW 115
// end ; end ;
13699: GO 13528
13701: POP
13702: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13703: LD_INT 26
13705: PPUSH
13706: LD_INT 22
13708: PUSH
13709: LD_INT 3
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 2
13718: PUSH
13719: LD_INT 21
13721: PUSH
13722: LD_INT 1
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 21
13731: PUSH
13732: LD_INT 2
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: LD_INT 59
13741: PUSH
13742: EMPTY
13743: LIST
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PPUSH
13755: CALL_OW 70
13759: PUSH
13760: LD_INT 0
13762: EQUAL
13763: IFFALSE 13495
// end ; end_of_file
13765: LD_VAR 0 3
13769: RET
// every 0 0$1 do
13770: GO 13772
13772: DISABLE
// begin enable ;
13773: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13774: LD_INT 3
13776: PPUSH
13777: LD_INT 1
13779: PPUSH
13780: LD_INT 22
13782: PPUSH
13783: CALL 8904 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13787: LD_INT 3
13789: PPUSH
13790: LD_INT 20
13792: PPUSH
13793: LD_INT 22
13795: PPUSH
13796: LD_INT 23
13798: PPUSH
13799: CALL 9150 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13803: LD_INT 3
13805: PPUSH
13806: LD_INT 21
13808: PPUSH
13809: LD_INT 23
13811: PPUSH
13812: CALL 9427 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13816: LD_INT 22
13818: PPUSH
13819: LD_INT 1
13821: PPUSH
13822: LD_EXP 24
13826: PPUSH
13827: LD_INT 2
13829: PPUSH
13830: LD_INT 3
13832: PPUSH
13833: CALL 9899 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13837: LD_INT 23
13839: PPUSH
13840: LD_INT 1
13842: PPUSH
13843: LD_EXP 25
13847: PPUSH
13848: LD_INT 33
13850: PPUSH
13851: LD_INT 1
13853: PPUSH
13854: CALL 9899 0 5
// end ; end_of_file
13858: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13859: LD_VAR 0 1
13863: PPUSH
13864: CALL_OW 255
13868: PUSH
13869: LD_INT 1
13871: EQUAL
13872: PUSH
13873: LD_VAR 0 1
13877: PPUSH
13878: CALL_OW 247
13882: PUSH
13883: LD_INT 1
13885: EQUAL
13886: AND
13887: IFFALSE 13903
// deadsCounter = deadsCounter + 1 ;
13889: LD_ADDR_EXP 31
13893: PUSH
13894: LD_EXP 31
13898: PUSH
13899: LD_INT 1
13901: PLUS
13902: ST_TO_ADDR
// end ;
13903: PPOPN 1
13905: END
// on Command ( comandid ) do var i , j , tmp ;
13906: LD_INT 0
13908: PPUSH
13909: PPUSH
13910: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13911: LD_ADDR_VAR 0 2
13915: PUSH
13916: LD_INT 22
13918: PUSH
13919: LD_INT 1
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 21
13928: PUSH
13929: LD_INT 2
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PPUSH
13940: CALL_OW 69
13944: PUSH
13945: FOR_IN
13946: IFFALSE 14071
// begin if GetTaskList ( i ) > 0 then
13948: LD_VAR 0 2
13952: PPUSH
13953: CALL_OW 437
13957: PUSH
13958: LD_INT 0
13960: GREATER
13961: IFFALSE 14069
// begin for j = 1 to GetTaskList ( i ) do
13963: LD_ADDR_VAR 0 3
13967: PUSH
13968: DOUBLE
13969: LD_INT 1
13971: DEC
13972: ST_TO_ADDR
13973: LD_VAR 0 2
13977: PPUSH
13978: CALL_OW 437
13982: PUSH
13983: FOR_TO
13984: IFFALSE 14067
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13986: LD_ADDR_VAR 0 4
13990: PUSH
13991: LD_VAR 0 2
13995: PPUSH
13996: CALL_OW 437
14000: PUSH
14001: LD_VAR 0 3
14005: ARRAY
14006: PUSH
14007: LD_INT 4
14009: ARRAY
14010: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14011: LD_VAR 0 4
14015: PPUSH
14016: CALL_OW 255
14020: PUSH
14021: LD_INT 3
14023: EQUAL
14024: PUSH
14025: LD_VAR 0 4
14029: PPUSH
14030: CALL_OW 247
14034: PUSH
14035: LD_INT 2
14037: EQUAL
14038: AND
14039: PUSH
14040: LD_VAR 0 4
14044: PPUSH
14045: CALL_OW 264
14049: PUSH
14050: LD_INT 51
14052: EQUAL
14053: AND
14054: IFFALSE 14065
// ComStop ( i ) ;
14056: LD_VAR 0 2
14060: PPUSH
14061: CALL_OW 141
// end ;
14065: GO 13983
14067: POP
14068: POP
// end ; end ;
14069: GO 13945
14071: POP
14072: POP
// end ; end_of_file
14073: PPOPN 4
14075: END
// every 0 0$1 trigger IsDead ( JMM ) do
14076: LD_EXP 1
14080: PPUSH
14081: CALL_OW 301
14085: IFFALSE 14097
14087: GO 14089
14089: DISABLE
// YouLost ( JMM ) ;
14090: LD_STRING JMM
14092: PPUSH
14093: CALL_OW 104
14097: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
14098: LD_INT 1
14100: PPUSH
14101: CALL_OW 301
14105: PUSH
14106: LD_INT 10
14108: PPUSH
14109: CALL_OW 301
14113: OR
14114: IFFALSE 14126
14116: GO 14118
14118: DISABLE
// YouLost ( DepotDestroyed ) ;
14119: LD_STRING DepotDestroyed
14121: PPUSH
14122: CALL_OW 104
14126: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14127: LD_INT 22
14129: PUSH
14130: LD_INT 1
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 21
14139: PUSH
14140: LD_INT 1
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 25
14149: PUSH
14150: LD_INT 2
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: PPUSH
14162: CALL_OW 69
14166: PUSH
14167: LD_INT 0
14169: EQUAL
14170: PUSH
14171: LD_INT 22
14173: PUSH
14174: LD_INT 4
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: PUSH
14181: LD_INT 21
14183: PUSH
14184: LD_INT 1
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: PUSH
14191: LD_INT 25
14193: PUSH
14194: LD_INT 2
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: LIST
14205: PPUSH
14206: CALL_OW 69
14210: PUSH
14211: LD_INT 0
14213: EQUAL
14214: AND
14215: PUSH
14216: LD_INT 1
14218: PPUSH
14219: CALL_OW 255
14223: PUSH
14224: LD_INT 3
14226: EQUAL
14227: AND
14228: PUSH
14229: LD_INT 10
14231: PPUSH
14232: CALL_OW 255
14236: PUSH
14237: LD_INT 3
14239: EQUAL
14240: AND
14241: IFFALSE 14253
14243: GO 14245
14245: DISABLE
// YouLost ( Engineer ) ;
14246: LD_STRING Engineer
14248: PPUSH
14249: CALL_OW 104
14253: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14254: LD_INT 1
14256: PPUSH
14257: CALL_OW 255
14261: PUSH
14262: LD_INT 3
14264: EQUAL
14265: PUSH
14266: LD_EXP 27
14270: PUSH
14271: LD_INT 1
14273: EQUAL
14274: AND
14275: IFFALSE 14287
14277: GO 14279
14279: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14280: LD_STRING DepotCaptured
14282: PPUSH
14283: CALL_OW 104
14287: END
// export function PrepareTigers ; var i , un ; begin
14288: LD_INT 0
14290: PPUSH
14291: PPUSH
14292: PPUSH
// for i = 1 to Difficulty do
14293: LD_ADDR_VAR 0 2
14297: PUSH
14298: DOUBLE
14299: LD_INT 1
14301: DEC
14302: ST_TO_ADDR
14303: LD_OWVAR 67
14307: PUSH
14308: FOR_TO
14309: IFFALSE 14444
// begin hc_sex = sex_male ;
14311: LD_ADDR_OWVAR 27
14315: PUSH
14316: LD_INT 1
14318: ST_TO_ADDR
// uc_side = 0 ;
14319: LD_ADDR_OWVAR 20
14323: PUSH
14324: LD_INT 0
14326: ST_TO_ADDR
// uc_nation = nation_nature ;
14327: LD_ADDR_OWVAR 21
14331: PUSH
14332: LD_INT 0
14334: ST_TO_ADDR
// hc_class = class_tiger ;
14335: LD_ADDR_OWVAR 28
14339: PUSH
14340: LD_INT 14
14342: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14343: LD_ADDR_OWVAR 31
14347: PUSH
14348: LD_EXP 14
14352: PUSH
14353: LD_INT 0
14355: PUSH
14356: LD_INT 0
14358: PUSH
14359: LD_INT 0
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14368: LD_ADDR_OWVAR 35
14372: PUSH
14373: LD_INT 30
14375: PPUSH
14376: LD_INT 40
14378: PPUSH
14379: CALL_OW 12
14383: PUSH
14384: LD_INT 40
14386: PPUSH
14387: LD_INT 50
14389: PPUSH
14390: CALL_OW 12
14394: PUSH
14395: LD_INT 50
14397: PPUSH
14398: LD_INT 60
14400: PPUSH
14401: CALL_OW 12
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: LIST
14410: PUSH
14411: LD_OWVAR 67
14415: ARRAY
14416: ST_TO_ADDR
// un = CreateHuman ;
14417: LD_ADDR_VAR 0 3
14421: PUSH
14422: CALL_OW 44
14426: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14427: LD_VAR 0 3
14431: PPUSH
14432: LD_INT 27
14434: PPUSH
14435: LD_INT 0
14437: PPUSH
14438: CALL_OW 49
// end ;
14442: GO 14308
14444: POP
14445: POP
// end ; end_of_file
14446: LD_VAR 0 1
14450: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14451: LD_INT 1
14453: PPUSH
14454: CALL_OW 255
14458: PUSH
14459: LD_INT 1
14461: EQUAL
14462: PUSH
14463: LD_INT 10
14465: PPUSH
14466: CALL_OW 255
14470: PUSH
14471: LD_INT 1
14473: EQUAL
14474: AND
14475: PUSH
14476: LD_EXP 20
14480: PUSH
14481: LD_INT 1
14483: EQUAL
14484: AND
14485: PUSH
14486: LD_INT 22
14488: PUSH
14489: LD_INT 3
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PUSH
14496: LD_INT 21
14498: PUSH
14499: LD_INT 2
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 34
14508: PUSH
14509: LD_INT 51
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: LD_INT 3
14518: PUSH
14519: LD_INT 58
14521: PUSH
14522: EMPTY
14523: LIST
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: PPUSH
14535: CALL_OW 69
14539: PUSH
14540: LD_INT 0
14542: EQUAL
14543: AND
14544: IFFALSE 14635
14546: GO 14548
14548: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14549: LD_INT 9450
14551: PUSH
14552: LD_INT 8400
14554: PUSH
14555: LD_INT 6300
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: LD_OWVAR 67
14567: ARRAY
14568: PPUSH
14569: CALL_OW 67
// if cargoEscape = 1 then
14573: LD_EXP 20
14577: PUSH
14578: LD_INT 1
14580: EQUAL
14581: IFFALSE 14635
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14583: LD_EXP 9
14587: PPUSH
14588: LD_STRING D6-Pow-1
14590: PPUSH
14591: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14595: LD_EXP 1
14599: PPUSH
14600: LD_STRING D6-JMM-1
14602: PPUSH
14603: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14607: LD_EXP 9
14611: PPUSH
14612: LD_STRING D6-Pow-2
14614: PPUSH
14615: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14619: LD_EXP 1
14623: PPUSH
14624: LD_STRING D6-JMM-2
14626: PPUSH
14627: CALL_OW 88
// FinishMission ;
14631: CALL 14843 0 0
// end ; end ;
14635: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14636: LD_INT 1
14638: PPUSH
14639: CALL_OW 255
14643: PUSH
14644: LD_INT 1
14646: EQUAL
14647: PUSH
14648: LD_INT 10
14650: PPUSH
14651: CALL_OW 255
14655: PUSH
14656: LD_INT 1
14658: EQUAL
14659: AND
14660: PUSH
14661: LD_EXP 20
14665: PUSH
14666: LD_INT 1
14668: GREATER
14669: AND
14670: IFFALSE 14737
14672: GO 14674
14674: DISABLE
14675: LD_INT 0
14677: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14678: LD_INT 11550
14680: PUSH
14681: LD_INT 10500
14683: PUSH
14684: LD_INT 9450
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: LIST
14691: PUSH
14692: LD_OWVAR 67
14696: ARRAY
14697: PPUSH
14698: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14702: LD_INT 1
14704: PUSH
14705: LD_INT 2
14707: PUSH
14708: LD_INT 3
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: LIST
14715: PUSH
14716: LD_OWVAR 67
14720: ARRAY
14721: PPUSH
14722: LD_INT 13
14724: PPUSH
14725: CALL 13034 0 2
// lastBattle = 1 ;
14729: LD_ADDR_EXP 27
14733: PUSH
14734: LD_INT 1
14736: ST_TO_ADDR
// end ;
14737: PPOPN 1
14739: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14740: LD_EXP 27
14744: PUSH
14745: LD_INT 1
14747: EQUAL
14748: PUSH
14749: LD_INT 26
14751: PPUSH
14752: LD_INT 22
14754: PUSH
14755: LD_INT 3
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PUSH
14762: LD_INT 21
14764: PUSH
14765: LD_INT 1
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PPUSH
14776: CALL_OW 70
14780: PUSH
14781: LD_INT 0
14783: EQUAL
14784: AND
14785: IFFALSE 14842
14787: GO 14789
14789: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14790: LD_EXP 9
14794: PPUSH
14795: LD_STRING D6-Pow-1
14797: PPUSH
14798: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14802: LD_EXP 1
14806: PPUSH
14807: LD_STRING D6-JMM-1
14809: PPUSH
14810: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14814: LD_EXP 9
14818: PPUSH
14819: LD_STRING D6-Pow-2
14821: PPUSH
14822: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14826: LD_EXP 1
14830: PPUSH
14831: LD_STRING D6-JMM-2
14833: PPUSH
14834: CALL_OW 88
// FinishMission ;
14838: CALL 14843 0 0
// end ;
14842: END
// export function FinishMission ; var tmp ; begin
14843: LD_INT 0
14845: PPUSH
14846: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14847: LD_ADDR_VAR 0 2
14851: PUSH
14852: LD_INT 22
14854: PUSH
14855: LD_INT 1
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 21
14864: PUSH
14865: LD_INT 2
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 24
14874: PUSH
14875: LD_INT 251
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: PPUSH
14887: CALL_OW 69
14891: ST_TO_ADDR
// if tmp then
14892: LD_VAR 0 2
14896: IFFALSE 14910
// SaveVehicles ( tmp , 02_tanks_1 ) ;
14898: LD_VAR 0 2
14902: PPUSH
14903: LD_STRING 02_tanks_1
14905: PPUSH
14906: CALL 10604 0 2
// if mikhailStatus = 1 then
14910: LD_EXP 21
14914: PUSH
14915: LD_INT 1
14917: EQUAL
14918: IFFALSE 14932
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
14920: LD_EXP 21
14924: PPUSH
14925: LD_STRING 02_mikhailStatus_1
14927: PPUSH
14928: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
14932: LD_INT 1
14934: PPUSH
14935: CALL_OW 274
14939: PPUSH
14940: LD_INT 1
14942: PPUSH
14943: CALL_OW 275
14947: PPUSH
14948: LD_STRING 02_resources_4
14950: PPUSH
14951: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
14955: LD_INT 1
14957: PPUSH
14958: CALL_OW 274
14962: PPUSH
14963: LD_INT 1
14965: PPUSH
14966: CALL_OW 275
14970: PUSH
14971: LD_INT 200
14973: GREATEREQUAL
14974: IFFALSE 14988
// begin AddMedal ( Cans , 1 ) ;
14976: LD_STRING Cans
14978: PPUSH
14979: LD_INT 1
14981: PPUSH
14982: CALL_OW 101
// end else
14986: GO 14999
// begin AddMedal ( Cans , - 1 ) ;
14988: LD_STRING Cans
14990: PPUSH
14991: LD_INT 1
14993: NEG
14994: PPUSH
14995: CALL_OW 101
// end ; if deadsCounter < 2 then
14999: LD_EXP 31
15003: PUSH
15004: LD_INT 2
15006: LESS
15007: IFFALSE 15021
// begin AddMedal ( Deaths , 1 ) ;
15009: LD_STRING Deaths
15011: PPUSH
15012: LD_INT 1
15014: PPUSH
15015: CALL_OW 101
// end else
15019: GO 15032
// begin AddMedal ( Deaths , - 1 ) ;
15021: LD_STRING Deaths
15023: PPUSH
15024: LD_INT 1
15026: NEG
15027: PPUSH
15028: CALL_OW 101
// end ; if mikhailStatus = 0 then
15032: LD_EXP 21
15036: PUSH
15037: LD_INT 0
15039: EQUAL
15040: IFFALSE 15053
// AddMedal ( Prisoner , - 1 ) ;
15042: LD_STRING Prisoner
15044: PPUSH
15045: LD_INT 1
15047: NEG
15048: PPUSH
15049: CALL_OW 101
// if mikhailStatus = 1 then
15053: LD_EXP 21
15057: PUSH
15058: LD_INT 1
15060: EQUAL
15061: IFFALSE 15073
// AddMedal ( Prisoner , 1 ) ;
15063: LD_STRING Prisoner
15065: PPUSH
15066: LD_INT 1
15068: PPUSH
15069: CALL_OW 101
// if mikhailStatus = 2 then
15073: LD_EXP 21
15077: PUSH
15078: LD_INT 2
15080: EQUAL
15081: IFFALSE 15093
// AddMedal ( Prisoner , 2 ) ;
15083: LD_STRING Prisoner
15085: PPUSH
15086: LD_INT 2
15088: PPUSH
15089: CALL_OW 101
// if mikhailStatus = 3 then
15093: LD_EXP 21
15097: PUSH
15098: LD_INT 3
15100: EQUAL
15101: IFFALSE 15114
// AddMedal ( Prisoner , - 2 ) ;
15103: LD_STRING Prisoner
15105: PPUSH
15106: LD_INT 2
15108: NEG
15109: PPUSH
15110: CALL_OW 101
// GiveMedals ( MAIN ) ;
15114: LD_STRING MAIN
15116: PPUSH
15117: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15121: LD_INT 22
15123: PUSH
15124: LD_INT 1
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 23
15133: PUSH
15134: LD_INT 1
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 21
15143: PUSH
15144: LD_INT 1
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: LIST
15155: PPUSH
15156: CALL_OW 69
15160: PPUSH
15161: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15165: LD_EXP 1
15169: PPUSH
15170: LD_EXP 33
15174: PUSH
15175: LD_STRING JMM
15177: STR
15178: PPUSH
15179: CALL_OW 38
// if IsOK ( Bobby ) then
15183: LD_EXP 2
15187: PPUSH
15188: CALL_OW 302
15192: IFFALSE 15212
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15194: LD_EXP 2
15198: PPUSH
15199: LD_EXP 33
15203: PUSH
15204: LD_STRING Bobby
15206: STR
15207: PPUSH
15208: CALL_OW 38
// if IsOK ( Cyrus ) then
15212: LD_EXP 3
15216: PPUSH
15217: CALL_OW 302
15221: IFFALSE 15241
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15223: LD_EXP 3
15227: PPUSH
15228: LD_EXP 33
15232: PUSH
15233: LD_STRING Cyrus
15235: STR
15236: PPUSH
15237: CALL_OW 38
// if IsOK ( Lisa ) then
15241: LD_EXP 4
15245: PPUSH
15246: CALL_OW 302
15250: IFFALSE 15270
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15252: LD_EXP 4
15256: PPUSH
15257: LD_EXP 33
15261: PUSH
15262: LD_STRING Lisa
15264: STR
15265: PPUSH
15266: CALL_OW 38
// if IsOK ( Khatam ) then
15270: LD_EXP 5
15274: PPUSH
15275: CALL_OW 302
15279: IFFALSE 15299
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15281: LD_EXP 5
15285: PPUSH
15286: LD_EXP 33
15290: PUSH
15291: LD_STRING Khatam
15293: STR
15294: PPUSH
15295: CALL_OW 38
// if IsOK ( Brian ) then
15299: LD_EXP 6
15303: PPUSH
15304: CALL_OW 302
15308: IFFALSE 15328
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15310: LD_EXP 6
15314: PPUSH
15315: LD_EXP 33
15319: PUSH
15320: LD_STRING Brian
15322: STR
15323: PPUSH
15324: CALL_OW 38
// if IsOk ( Jerry ) then
15328: LD_EXP 7
15332: PPUSH
15333: CALL_OW 302
15337: IFFALSE 15357
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15339: LD_EXP 7
15343: PPUSH
15344: LD_EXP 33
15348: PUSH
15349: LD_STRING Jerry
15351: STR
15352: PPUSH
15353: CALL_OW 38
// if mikhailStatus = 1 then
15357: LD_EXP 21
15361: PUSH
15362: LD_INT 1
15364: EQUAL
15365: IFFALSE 15385
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15367: LD_EXP 8
15371: PPUSH
15372: LD_EXP 33
15376: PUSH
15377: LD_STRING Mikhail
15379: STR
15380: PPUSH
15381: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15385: LD_INT 50
15387: PUSH
15388: EMPTY
15389: LIST
15390: PUSH
15391: LD_INT 22
15393: PUSH
15394: LD_INT 1
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 21
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: PPUSH
15416: CALL_OW 69
15420: PUSH
15421: LD_EXP 1
15425: PUSH
15426: LD_EXP 2
15430: PUSH
15431: LD_EXP 3
15435: PUSH
15436: LD_EXP 4
15440: PUSH
15441: LD_EXP 5
15445: PUSH
15446: LD_EXP 6
15450: PUSH
15451: LD_EXP 7
15455: PUSH
15456: LD_EXP 8
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: DIFF
15471: PPUSH
15472: LD_STRING 02_other_survivors
15474: PPUSH
15475: CALL_OW 38
// YouWin ;
15479: CALL_OW 103
// end ;
15483: LD_VAR 0 1
15487: RET
