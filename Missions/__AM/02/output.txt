// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; starting begin RuSoldMinLevel = 0 ;
   0: LD_ADDR_EXP 13
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
   8: LD_ADDR_EXP 14
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// hpJMM = 0 ;
  16: LD_ADDR_EXP 10
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpBobby = 0 ;
  24: LD_ADDR_EXP 11
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpCyrus = 0 ;
  32: LD_ADDR_EXP 12
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// RandomizeAll ;
  40: CALL_OW 11
// InGameOn ;
  44: CALL_OW 8
// Resetfog ;
  48: CALL_OW 335
// PrepareDifficulty ;
  52: CALL 1813 0 0
// PrepareSouthBase ;
  56: CALL 2590 0 0
// PrepareNorthBase ;
  60: CALL 2911 0 0
// PrepareOtherRussians ;
  64: CALL 3256 0 0
// PrepareHeroes ;
  68: CALL 1986 0 0
// end ; end_of_file
  72: END
// every 1 do
  73: GO 75
  75: DISABLE
// begin if Cyrus and Bobby then
  76: LD_EXP 3
  80: PUSH
  81: LD_EXP 2
  85: AND
  86: IFFALSE 200
// begin Say ( Cyrus , D1a-Cyrus-1 ) ;
  88: LD_EXP 3
  92: PPUSH
  93: LD_STRING D1a-Cyrus-1
  95: PPUSH
  96: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 100: LD_EXP 1
 104: PPUSH
 105: LD_STRING D1a-JMM-1
 107: PPUSH
 108: CALL_OW 88
// Say ( Bobby , D1a-Bobby-2 ) ;
 112: LD_EXP 2
 116: PPUSH
 117: LD_STRING D1a-Bobby-2
 119: PPUSH
 120: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
 124: LD_EXP 1
 128: PPUSH
 129: LD_STRING D1a-JMM-2
 131: PPUSH
 132: CALL_OW 88
// ComStand ( Lisa ) ;
 136: LD_EXP 4
 140: PPUSH
 141: CALL_OW 165
// AddComTurnUnit ( Lisa , JMM ) ;
 145: LD_EXP 4
 149: PPUSH
 150: LD_EXP 1
 154: PPUSH
 155: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 159: LD_EXP 1
 163: PUSH
 164: LD_EXP 3
 168: PUSH
 169: LD_EXP 2
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: PPUSH
 179: LD_EXP 4
 183: PPUSH
 184: CALL_OW 119
// Say ( Lisa , D1a-Lisa-2 ) ;
 188: LD_EXP 4
 192: PPUSH
 193: LD_STRING D1a-Lisa-2
 195: PPUSH
 196: CALL_OW 88
// end ; if Cyrus and not Bobby then
 200: LD_EXP 3
 204: PUSH
 205: LD_EXP 2
 209: NOT
 210: AND
 211: IFFALSE 319
// begin Say ( Cyrus , D1a-Cyrus-1 ) ;
 213: LD_EXP 3
 217: PPUSH
 218: LD_STRING D1a-Cyrus-1
 220: PPUSH
 221: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 225: LD_EXP 1
 229: PPUSH
 230: LD_STRING D1a-JMM-1
 232: PPUSH
 233: CALL_OW 88
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 237: LD_EXP 3
 241: PPUSH
 242: LD_STRING D1a-Cyrus-2
 244: PPUSH
 245: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
 249: LD_EXP 1
 253: PPUSH
 254: LD_STRING D1a-JMM-2
 256: PPUSH
 257: CALL_OW 88
// ComStand ( Lisa ) ;
 261: LD_EXP 4
 265: PPUSH
 266: CALL_OW 165
// AddComTurnUnit ( Lisa , JMM ) ;
 270: LD_EXP 4
 274: PPUSH
 275: LD_EXP 1
 279: PPUSH
 280: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 284: LD_EXP 4
 288: PPUSH
 289: LD_STRING D1a-Lisa-2
 291: PPUSH
 292: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 296: LD_EXP 1
 300: PUSH
 301: LD_EXP 3
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PPUSH
 310: LD_EXP 4
 314: PPUSH
 315: CALL_OW 119
// end ; if not Cyrus and Bobby then
 319: LD_EXP 3
 323: NOT
 324: PUSH
 325: LD_EXP 2
 329: AND
 330: IFFALSE 438
// begin Say ( Bobby , D1a-Bobby-1 ) ;
 332: LD_EXP 2
 336: PPUSH
 337: LD_STRING D1a-Bobby-1
 339: PPUSH
 340: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 344: LD_EXP 1
 348: PPUSH
 349: LD_STRING D1a-JMM-1
 351: PPUSH
 352: CALL_OW 88
// Say ( Bobby , D1a-Bobby-2 ) ;
 356: LD_EXP 2
 360: PPUSH
 361: LD_STRING D1a-Bobby-2
 363: PPUSH
 364: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
 368: LD_EXP 1
 372: PPUSH
 373: LD_STRING D1a-JMM-2
 375: PPUSH
 376: CALL_OW 88
// ComStand ( Lisa ) ;
 380: LD_EXP 4
 384: PPUSH
 385: CALL_OW 165
// AddComTurnUnit ( Lisa , JMM ) ;
 389: LD_EXP 4
 393: PPUSH
 394: LD_EXP 1
 398: PPUSH
 399: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 403: LD_EXP 1
 407: PUSH
 408: LD_EXP 3
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: LD_EXP 4
 421: PPUSH
 422: CALL_OW 119
// Say ( Lisa , D1a-Lisa-2 ) ;
 426: LD_EXP 4
 430: PPUSH
 431: LD_STRING D1a-Lisa-2
 433: PPUSH
 434: CALL_OW 88
// end ; if not Cyrus and not Bobby then
 438: LD_EXP 3
 442: NOT
 443: PUSH
 444: LD_EXP 2
 448: NOT
 449: AND
 450: IFFALSE 528
// begin Say ( JMM , D1b-JMM-1 ) ;
 452: LD_EXP 1
 456: PPUSH
 457: LD_STRING D1b-JMM-1
 459: PPUSH
 460: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
 464: LD_EXP 1
 468: PPUSH
 469: LD_STRING D1b-JMM-2
 471: PPUSH
 472: CALL_OW 88
// ComStand ( Lisa ) ;
 476: LD_EXP 4
 480: PPUSH
 481: CALL_OW 165
// AddComTurnUnit ( Lisa , JMM ) ;
 485: LD_EXP 4
 489: PPUSH
 490: LD_EXP 1
 494: PPUSH
 495: CALL_OW 179
// ComTurnUnit ( [ JMM ] , Lisa ) ;
 499: LD_EXP 1
 503: PUSH
 504: EMPTY
 505: LIST
 506: PPUSH
 507: LD_EXP 4
 511: PPUSH
 512: CALL_OW 119
// Say ( Lisa , D1b-Lisa-1 ) ;
 516: LD_EXP 4
 520: PPUSH
 521: LD_STRING D1b-Lisa-1
 523: PPUSH
 524: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
 528: LD_EXP 1
 532: PPUSH
 533: LD_STRING D1-JMM-1
 535: PPUSH
 536: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
 540: LD_EXP 4
 544: PPUSH
 545: LD_STRING D1-Lisa-1
 547: PPUSH
 548: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
 552: LD_EXP 1
 556: PPUSH
 557: LD_STRING D1-JMM-2
 559: PPUSH
 560: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
 564: LD_EXP 9
 568: PPUSH
 569: LD_STRING D1-Pow-2
 571: PPUSH
 572: CALL_OW 94
// if Cyrus then
 576: LD_EXP 3
 580: IFFALSE 606
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
 582: LD_EXP 3
 586: PPUSH
 587: LD_STRING D1-Cyrus-2
 589: PPUSH
 590: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
 594: LD_EXP 1
 598: PPUSH
 599: LD_STRING D1-JMM-3
 601: PPUSH
 602: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
 606: LD_EXP 9
 610: PPUSH
 611: LD_STRING D1-Pow-3
 613: PPUSH
 614: CALL_OW 94
// SayRadio ( JMM , D1-JMM-4 ) ;
 618: LD_EXP 1
 622: PPUSH
 623: LD_STRING D1-JMM-4
 625: PPUSH
 626: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4 ) ;
 630: LD_EXP 9
 634: PPUSH
 635: LD_STRING D1-Pow-4
 637: PPUSH
 638: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
 642: LD_EXP 9
 646: PPUSH
 647: LD_STRING D1-Pow-4a
 649: PPUSH
 650: CALL_OW 94
// if Cyrus then
 654: LD_EXP 3
 658: IFFALSE 672
// Say ( Cyrus , D1-Cyrus-4 ) ;
 660: LD_EXP 3
 664: PPUSH
 665: LD_STRING D1-Cyrus-4
 667: PPUSH
 668: CALL_OW 88
// if Bobby then
 672: LD_EXP 2
 676: IFFALSE 714
// begin Say ( Bobby , D1-Bobby-4 ) ;
 678: LD_EXP 2
 682: PPUSH
 683: LD_STRING D1-Bobby-4
 685: PPUSH
 686: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
 690: LD_EXP 4
 694: PPUSH
 695: LD_STRING D1-Lisa-4
 697: PPUSH
 698: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
 702: LD_EXP 1
 706: PPUSH
 707: LD_STRING D1-JMM-5
 709: PPUSH
 710: CALL_OW 88
// end ; InGameOff ;
 714: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
 718: LD_INT 22
 720: PUSH
 721: LD_INT 4
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: PPUSH
 728: CALL_OW 69
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
 740: LD_STRING M1
 742: PPUSH
 743: CALL_OW 337
// SaveForQuickRestart ;
 747: CALL_OW 22
// end ;
 751: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
 752: LD_INT 7
 754: PPUSH
 755: LD_INT 22
 757: PUSH
 758: LD_INT 1
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PPUSH
 765: CALL_OW 70
 769: PUSH
 770: LD_INT 0
 772: GREATER
 773: IFFALSE 1131
 775: GO 777
 777: DISABLE
// begin InGameOn ;
 778: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
 782: LD_INT 22
 784: PUSH
 785: LD_INT 1
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 21
 794: PUSH
 795: LD_INT 1
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PPUSH
 806: CALL_OW 69
 810: PPUSH
 811: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
 815: LD_INT 24
 817: PPUSH
 818: LD_INT 32
 820: PPUSH
 821: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
 825: LD_EXP 5
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: CALL_OW 49
// wait ( 0 0$1 ) ;
 840: LD_INT 35
 842: PPUSH
 843: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
 847: LD_EXP 5
 851: PPUSH
 852: LD_INT 27
 854: PPUSH
 855: LD_INT 38
 857: PPUSH
 858: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
 862: LD_EXP 5
 866: PPUSH
 867: LD_EXP 1
 871: PPUSH
 872: CALL_OW 179
// wait ( 0 0$1 ) ;
 876: LD_INT 35
 878: PPUSH
 879: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
 883: LD_EXP 5
 887: PPUSH
 888: LD_STRING D2a-Khat-1
 890: PPUSH
 891: CALL_OW 88
// Say ( Khatam , D2a-JMM-1 ) ;
 895: LD_EXP 5
 899: PPUSH
 900: LD_STRING D2a-JMM-1
 902: PPUSH
 903: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
 907: LD_EXP 5
 911: PPUSH
 912: LD_STRING D2a-Khat-2
 914: PPUSH
 915: CALL_OW 88
// Say ( Khatam , D2a-JMM-2 ) ;
 919: LD_EXP 5
 923: PPUSH
 924: LD_STRING D2a-JMM-2
 926: PPUSH
 927: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
 931: LD_EXP 5
 935: PPUSH
 936: LD_STRING D2a-Khat-3
 938: PPUSH
 939: CALL_OW 88
// Say ( Khatam , D2a-JMM-3 ) ;
 943: LD_EXP 5
 947: PPUSH
 948: LD_STRING D2a-JMM-3
 950: PPUSH
 951: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
 955: LD_EXP 5
 959: PPUSH
 960: LD_STRING D2a-Khat-4
 962: PPUSH
 963: CALL_OW 88
// Say ( Khatam , D2a-JMM-4 ) ;
 967: LD_EXP 5
 971: PPUSH
 972: LD_STRING D2a-JMM-4
 974: PPUSH
 975: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
 979: LD_EXP 5
 983: PPUSH
 984: LD_STRING D2a-Khat-5
 986: PPUSH
 987: CALL_OW 88
// Say ( Khatam , D2a-JMM-5 ) ;
 991: LD_EXP 5
 995: PPUSH
 996: LD_STRING D2a-JMM-5
 998: PPUSH
 999: CALL_OW 88
// InGameOff ;
1003: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
1007: LD_INT 22
1009: PUSH
1010: LD_INT 1
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PUSH
1017: LD_INT 21
1019: PUSH
1020: LD_INT 1
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: PUSH
1027: LD_INT 3
1029: PUSH
1030: LD_INT 24
1032: PUSH
1033: LD_INT 1000
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: LIST
1048: PPUSH
1049: CALL_OW 69
1053: PUSH
1054: LD_INT 0
1056: GREATER
1057: IFFALSE 1131
// begin Say ( Khatam , D2a-Khat-6 ) ;
1059: LD_EXP 5
1063: PPUSH
1064: LD_STRING D2a-Khat-6
1066: PPUSH
1067: CALL_OW 88
// ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1071: LD_EXP 5
1075: PPUSH
1076: LD_INT 22
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 21
1088: PUSH
1089: LD_INT 1
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 3
1098: PUSH
1099: LD_INT 24
1101: PUSH
1102: LD_INT 1000
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: PPUSH
1118: CALL_OW 69
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: CALL_OW 128
// end ; end ;
1131: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var distanceTab , min , i ;
1132: LD_INT 15
1134: PPUSH
1135: LD_INT 22
1137: PUSH
1138: LD_INT 1
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: PPUSH
1145: CALL_OW 70
1149: PUSH
1150: LD_INT 0
1152: GREATER
1153: IFFALSE 1412
1155: GO 1157
1157: DISABLE
1158: LD_INT 0
1160: PPUSH
1161: PPUSH
1162: PPUSH
// begin min = 0 ;
1163: LD_ADDR_VAR 0 2
1167: PUSH
1168: LD_INT 0
1170: ST_TO_ADDR
// distanceTab = [ [ Bobby , GetDistUnitArea ( Bobby , DeadsSpawn ) ] , [ Cyrus , GetDistUnitArea ( Bobby , DeadsSpawn ) ] , [ Lisa , GetDistUnitArea ( Bobby , DeadsSpawn ) ] ] ;
1171: LD_ADDR_VAR 0 1
1175: PUSH
1176: LD_EXP 2
1180: PUSH
1181: LD_EXP 2
1185: PPUSH
1186: LD_INT 16
1188: PPUSH
1189: CALL_OW 299
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: PUSH
1198: LD_EXP 3
1202: PUSH
1203: LD_EXP 2
1207: PPUSH
1208: LD_INT 16
1210: PPUSH
1211: CALL_OW 299
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PUSH
1220: LD_EXP 4
1224: PUSH
1225: LD_EXP 2
1229: PPUSH
1230: LD_INT 16
1232: PPUSH
1233: CALL_OW 299
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: ST_TO_ADDR
// InGameOn ;
1247: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
1251: LD_INT 23
1253: PPUSH
1254: LD_INT 12
1256: PPUSH
1257: CALL_OW 84
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] ] ) , 23 , 12 ) ;
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: EMPTY
1272: LIST
1273: PPUSH
1274: CALL_OW 69
1278: PPUSH
1279: LD_INT 23
1281: PPUSH
1282: LD_INT 12
1284: PPUSH
1285: CALL_OW 111
// for i = 1 to distanceTab do
1289: LD_ADDR_VAR 0 3
1293: PUSH
1294: DOUBLE
1295: LD_INT 1
1297: DEC
1298: ST_TO_ADDR
1299: LD_VAR 0 1
1303: PUSH
1304: FOR_TO
1305: IFFALSE 1359
// if distanceTab [ 1 ] [ i + 1 ] > min then
1307: LD_VAR 0 1
1311: PUSH
1312: LD_INT 1
1314: ARRAY
1315: PUSH
1316: LD_VAR 0 3
1320: PUSH
1321: LD_INT 1
1323: PLUS
1324: ARRAY
1325: PUSH
1326: LD_VAR 0 2
1330: GREATER
1331: IFFALSE 1357
// min = distanceTab [ 1 ] [ i + 1 ] ;
1333: LD_ADDR_VAR 0 2
1337: PUSH
1338: LD_VAR 0 1
1342: PUSH
1343: LD_INT 1
1345: ARRAY
1346: PUSH
1347: LD_VAR 0 3
1351: PUSH
1352: LD_INT 1
1354: PLUS
1355: ARRAY
1356: ST_TO_ADDR
1357: GO 1304
1359: POP
1360: POP
// Say ( JMM , DCorpses-JMM-1 ) ;
1361: LD_EXP 1
1365: PPUSH
1366: LD_STRING DCorpses-JMM-1
1368: PPUSH
1369: CALL_OW 88
// if IsOK ( Khatam ) then
1373: LD_EXP 5
1377: PPUSH
1378: CALL_OW 302
1382: IFFALSE 1396
// Say ( Khatam , DCorpses-Khat-1 ) ;
1384: LD_EXP 5
1388: PPUSH
1389: LD_STRING DCorpses-Khat-1
1391: PPUSH
1392: CALL_OW 88
// InGameOff ;
1396: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
1400: LD_EXP 1
1404: PPUSH
1405: LD_STRING DCorpses-JMM-2
1407: PPUSH
1408: CALL_OW 88
// end ;
1412: PPOPN 3
1414: END
// every 0 0$1 do var i ;
1415: GO 1417
1417: DISABLE
1418: LD_INT 0
1420: PPUSH
// begin enable ;
1421: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
1422: LD_ADDR_VAR 0 1
1426: PUSH
1427: LD_INT 22
1429: PUSH
1430: LD_INT 3
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: PUSH
1437: LD_INT 21
1439: PUSH
1440: LD_INT 3
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: LD_INT 30
1449: PUSH
1450: LD_INT 31
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: LIST
1461: PPUSH
1462: CALL_OW 69
1466: PUSH
1467: FOR_IN
1468: IFFALSE 1499
// begin if See ( 1 , i ) then
1470: LD_INT 1
1472: PPUSH
1473: LD_VAR 0 1
1477: PPUSH
1478: CALL_OW 292
1482: IFFALSE 1497
// begin disable ;
1484: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING DX1-JMM-1
1492: PPUSH
1493: CALL_OW 88
// end ; end ;
1497: GO 1467
1499: POP
1500: POP
// end ;
1501: PPOPN 1
1503: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
1504: LD_INT 1
1506: PPUSH
1507: LD_INT 11
1509: PPUSH
1510: CALL_OW 294
1514: IFFALSE 1700
1516: GO 1518
1518: DISABLE
1519: LD_INT 0
1521: PPUSH
1522: PPUSH
// begin DialogueOn ;
1523: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
1527: LD_INT 11
1529: PPUSH
1530: LD_INT 22
1532: PUSH
1533: LD_INT 3
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 21
1542: PUSH
1543: LD_INT 1
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PPUSH
1554: CALL_OW 70
1558: PUSH
1559: LD_INT 1
1561: ARRAY
1562: PPUSH
1563: LD_STRING DX3-Rus1-1
1565: PPUSH
1566: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
1570: LD_EXP 1
1574: PPUSH
1575: LD_STRING DX3-JMM-1
1577: PPUSH
1578: CALL_OW 88
// DialogueOff ;
1582: CALL_OW 7
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
1586: LD_ADDR_VAR 0 1
1590: PUSH
1591: LD_INT 22
1593: PUSH
1594: LD_INT 3
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 21
1603: PUSH
1604: LD_INT 2
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PUSH
1611: LD_INT 58
1613: PUSH
1614: EMPTY
1615: LIST
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: PPUSH
1622: CALL_OW 69
1626: PUSH
1627: FOR_IN
1628: IFFALSE 1698
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
1630: LD_ADDR_VAR 0 2
1634: PUSH
1635: LD_INT 22
1637: PUSH
1638: LD_INT 3
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 21
1647: PUSH
1648: LD_INT 1
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 25
1657: PUSH
1658: LD_INT 3
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PPUSH
1670: CALL_OW 69
1674: PUSH
1675: FOR_IN
1676: IFFALSE 1694
// begin ComEnterUnit ( j , i ) ;
1678: LD_VAR 0 2
1682: PPUSH
1683: LD_VAR 0 1
1687: PPUSH
1688: CALL_OW 120
// end ;
1692: GO 1675
1694: POP
1695: POP
// end ;
1696: GO 1627
1698: POP
1699: POP
// end ; end_of_file
1700: PPOPN 2
1702: END
// export function RespawnInside ( side , nation , build , skill , clas , count ) ; var i , l , un ; begin
1703: LD_INT 0
1705: PPUSH
1706: PPUSH
1707: PPUSH
1708: PPUSH
// for i = 1 to count do
1709: LD_ADDR_VAR 0 8
1713: PUSH
1714: DOUBLE
1715: LD_INT 1
1717: DEC
1718: ST_TO_ADDR
1719: LD_VAR 0 6
1723: PUSH
1724: FOR_TO
1725: IFFALSE 1806
// begin uc_side = side ;
1727: LD_ADDR_OWVAR 20
1731: PUSH
1732: LD_VAR 0 1
1736: ST_TO_ADDR
// uc_nation = nation ;
1737: LD_ADDR_OWVAR 21
1741: PUSH
1742: LD_VAR 0 2
1746: ST_TO_ADDR
// hc_gallery =  ;
1747: LD_ADDR_OWVAR 33
1751: PUSH
1752: LD_STRING 
1754: ST_TO_ADDR
// hc_name =  ;
1755: LD_ADDR_OWVAR 26
1759: PUSH
1760: LD_STRING 
1762: ST_TO_ADDR
// PrepareHuman ( false , clas , skill ) ;
1763: LD_INT 0
1765: PPUSH
1766: LD_VAR 0 5
1770: PPUSH
1771: LD_VAR 0 4
1775: PPUSH
1776: CALL_OW 380
// un = CreateHuman ;
1780: LD_ADDR_VAR 0 10
1784: PUSH
1785: CALL_OW 44
1789: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1790: LD_VAR 0 10
1794: PPUSH
1795: LD_VAR 0 3
1799: PPUSH
1800: CALL_OW 52
// end ;
1804: GO 1724
1806: POP
1807: POP
// end ;
1808: LD_VAR 0 7
1812: RET
// export function PrepareDifficulty ; begin
1813: LD_INT 0
1815: PPUSH
// if Difficulty = 1 then
1816: LD_OWVAR 67
1820: PUSH
1821: LD_INT 1
1823: EQUAL
1824: IFFALSE 1881
// begin RemoveUnit ( [ brw2 , brw3 , brw4 , brw5 ] ) ;
1826: LD_INT 9
1828: PUSH
1829: LD_INT 30
1831: PUSH
1832: LD_INT 52
1834: PUSH
1835: LD_INT 63
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: PPUSH
1844: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
1848: LD_INT 5
1850: PUSH
1851: LD_INT 4
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PPUSH
1858: LD_INT 50
1860: PPUSH
1861: CALL_OW 240
// RuSoldMinLevel = 0 ;
1865: LD_ADDR_EXP 13
1869: PUSH
1870: LD_INT 0
1872: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
1873: LD_ADDR_EXP 14
1877: PUSH
1878: LD_INT 1
1880: ST_TO_ADDR
// end ; if Difficulty = 2 then
1881: LD_OWVAR 67
1885: PUSH
1886: LD_INT 2
1888: EQUAL
1889: IFFALSE 1938
// begin RemoveUnit ( [ brw3 , brw4 ] ) ;
1891: LD_INT 30
1893: PUSH
1894: LD_INT 52
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PPUSH
1901: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 35 ) ;
1905: LD_INT 5
1907: PUSH
1908: LD_INT 4
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: PPUSH
1915: LD_INT 35
1917: PPUSH
1918: CALL_OW 240
// RuSoldMinLevel = 1 ;
1922: LD_ADDR_EXP 13
1926: PUSH
1927: LD_INT 1
1929: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
1930: LD_ADDR_EXP 14
1934: PUSH
1935: LD_INT 2
1937: ST_TO_ADDR
// end ; if Difficulty = 3 then
1938: LD_OWVAR 67
1942: PUSH
1943: LD_INT 3
1945: EQUAL
1946: IFFALSE 1981
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 20 ) ;
1948: LD_INT 5
1950: PUSH
1951: LD_INT 4
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PPUSH
1958: LD_INT 20
1960: PPUSH
1961: CALL_OW 240
// RuSoldMinLevel = 2 ;
1965: LD_ADDR_EXP 13
1969: PUSH
1970: LD_INT 2
1972: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
1973: LD_ADDR_EXP 14
1977: PUSH
1978: LD_INT 3
1980: ST_TO_ADDR
// end ; end ; end_of_file
1981: LD_VAR 0 1
1985: RET
// export function PrepareHeroes ; begin
1986: LD_INT 0
1988: PPUSH
// uc_side = 1 ;
1989: LD_ADDR_OWVAR 20
1993: PUSH
1994: LD_INT 1
1996: ST_TO_ADDR
// JMM = CreateCharacter ( JMM ) ;
1997: LD_ADDR_EXP 1
2001: PUSH
2002: LD_STRING JMM
2004: PPUSH
2005: CALL_OW 34
2009: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
2010: LD_ADDR_EXP 9
2014: PUSH
2015: LD_STRING Powell
2017: PPUSH
2018: CALL_OW 25
2022: ST_TO_ADDR
// Bobby = CreateCharacter ( Bobby ) ;
2023: LD_ADDR_EXP 2
2027: PUSH
2028: LD_STRING Bobby
2030: PPUSH
2031: CALL_OW 34
2035: ST_TO_ADDR
// if Bobby then
2036: LD_EXP 2
2040: IFFALSE 2054
// SetLives ( Bobby , 900 ) ;
2042: LD_EXP 2
2046: PPUSH
2047: LD_INT 900
2049: PPUSH
2050: CALL_OW 234
// Cyrus = CreateCharacter ( Cyrus ) ;
2054: LD_ADDR_EXP 3
2058: PUSH
2059: LD_STRING Cyrus
2061: PPUSH
2062: CALL_OW 34
2066: ST_TO_ADDR
// if Cyrus then
2067: LD_EXP 3
2071: IFFALSE 2085
// SetLives ( Cyrus , 900 ) ;
2073: LD_EXP 3
2077: PPUSH
2078: LD_INT 900
2080: PPUSH
2081: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
2085: LD_ADDR_EXP 5
2089: PUSH
2090: LD_STRING Khatam
2092: PPUSH
2093: CALL_OW 25
2097: ST_TO_ADDR
// uc_side = 4 ;
2098: LD_ADDR_OWVAR 20
2102: PUSH
2103: LD_INT 4
2105: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
2106: LD_ADDR_EXP 4
2110: PUSH
2111: LD_STRING Lisa
2113: PPUSH
2114: CALL_OW 25
2118: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
2119: LD_EXP 1
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
2134: LD_EXP 2
2138: PPUSH
2139: LD_INT 3
2141: PPUSH
2142: LD_INT 0
2144: PPUSH
2145: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
2149: LD_EXP 3
2153: PPUSH
2154: LD_INT 3
2156: PPUSH
2157: LD_INT 0
2159: PPUSH
2160: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
2164: LD_EXP 4
2168: PPUSH
2169: LD_INT 5
2171: PPUSH
2172: LD_INT 0
2174: PPUSH
2175: CALL_OW 49
// ComCrawl ( Lisa ) ;
2179: LD_EXP 4
2183: PPUSH
2184: CALL_OW 137
// end ;
2188: LD_VAR 0 1
2192: RET
// export function PrepareLisSquad ; var i , un ; begin
2193: LD_INT 0
2195: PPUSH
2196: PPUSH
2197: PPUSH
// for i = 1 to 2 do
2198: LD_ADDR_VAR 0 2
2202: PUSH
2203: DOUBLE
2204: LD_INT 1
2206: DEC
2207: ST_TO_ADDR
2208: LD_INT 2
2210: PUSH
2211: FOR_TO
2212: IFFALSE 2294
// begin uc_side = 4 ;
2214: LD_ADDR_OWVAR 20
2218: PUSH
2219: LD_INT 4
2221: ST_TO_ADDR
// uc_nation = 1 ;
2222: LD_ADDR_OWVAR 21
2226: PUSH
2227: LD_INT 1
2229: ST_TO_ADDR
// hc_gallery =  ;
2230: LD_ADDR_OWVAR 33
2234: PUSH
2235: LD_STRING 
2237: ST_TO_ADDR
// hc_name =  ;
2238: LD_ADDR_OWVAR 26
2242: PUSH
2243: LD_STRING 
2245: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( 0 , 1 ) ) ;
2246: LD_INT 0
2248: PPUSH
2249: LD_INT 2
2251: PPUSH
2252: LD_INT 0
2254: PPUSH
2255: LD_INT 1
2257: PPUSH
2258: CALL_OW 12
2262: PPUSH
2263: CALL_OW 380
// un = CreateHuman ;
2267: LD_ADDR_VAR 0 3
2271: PUSH
2272: CALL_OW 44
2276: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
2277: LD_VAR 0 3
2281: PPUSH
2282: LD_INT 6
2284: PPUSH
2285: LD_INT 0
2287: PPUSH
2288: CALL_OW 49
// end ;
2292: GO 2211
2294: POP
2295: POP
// end ;
2296: LD_VAR 0 1
2300: RET
// export function PrepareOtherAmericans ; begin
2301: LD_INT 0
2303: PPUSH
// uc_side = 4 ;
2304: LD_ADDR_OWVAR 20
2308: PUSH
2309: LD_INT 4
2311: ST_TO_ADDR
// uc_nation = 1 ;
2312: LD_ADDR_OWVAR 21
2316: PUSH
2317: LD_INT 1
2319: ST_TO_ADDR
// hc_gallery =  ;
2320: LD_ADDR_OWVAR 33
2324: PUSH
2325: LD_STRING 
2327: ST_TO_ADDR
// hc_name = Brian Garvin ;
2328: LD_ADDR_OWVAR 26
2332: PUSH
2333: LD_STRING Brian Garvin
2335: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( 1 , 2 ) ) ;
2336: LD_INT 0
2338: PPUSH
2339: LD_INT 1
2341: PPUSH
2342: LD_INT 1
2344: PPUSH
2345: LD_INT 2
2347: PPUSH
2348: CALL_OW 12
2352: PPUSH
2353: CALL_OW 380
// Brian = CreateHuman ;
2357: LD_ADDR_EXP 6
2361: PUSH
2362: CALL_OW 44
2366: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , true ) ;
2367: LD_EXP 6
2371: PPUSH
2372: LD_INT 10
2374: PPUSH
2375: LD_INT 1
2377: PPUSH
2378: CALL_OW 49
// hc_name = Jerry White ;
2382: LD_ADDR_OWVAR 26
2386: PUSH
2387: LD_STRING Jerry White
2389: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( 1 , 2 ) ) ;
2390: LD_INT 0
2392: PPUSH
2393: LD_INT 2
2395: PPUSH
2396: LD_INT 1
2398: PPUSH
2399: LD_INT 2
2401: PPUSH
2402: CALL_OW 12
2406: PPUSH
2407: CALL_OW 380
// Jerry = CreateHuman ;
2411: LD_ADDR_EXP 7
2415: PUSH
2416: CALL_OW 44
2420: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , true ) ;
2421: LD_EXP 7
2425: PPUSH
2426: LD_INT 10
2428: PPUSH
2429: LD_INT 1
2431: PPUSH
2432: CALL_OW 49
// end ;
2436: LD_VAR 0 1
2440: RET
// export function PrepareDeadSoldiers ; var i , un ; begin
2441: LD_INT 0
2443: PPUSH
2444: PPUSH
2445: PPUSH
// for i = 1 to 6 do
2446: LD_ADDR_VAR 0 2
2450: PUSH
2451: DOUBLE
2452: LD_INT 1
2454: DEC
2455: ST_TO_ADDR
2456: LD_INT 6
2458: PUSH
2459: FOR_TO
2460: IFFALSE 2554
// begin uc_side = 4 ;
2462: LD_ADDR_OWVAR 20
2466: PUSH
2467: LD_INT 4
2469: ST_TO_ADDR
// uc_nation = 1 ;
2470: LD_ADDR_OWVAR 21
2474: PUSH
2475: LD_INT 1
2477: ST_TO_ADDR
// hc_gallery =  ;
2478: LD_ADDR_OWVAR 33
2482: PUSH
2483: LD_STRING 
2485: ST_TO_ADDR
// hc_name =  ;
2486: LD_ADDR_OWVAR 26
2490: PUSH
2491: LD_STRING 
2493: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
2494: LD_INT 0
2496: PPUSH
2497: LD_INT 1
2499: PPUSH
2500: LD_INT 4
2502: PPUSH
2503: CALL_OW 12
2507: PPUSH
2508: LD_INT 1
2510: PPUSH
2511: CALL_OW 380
// un = CreateHuman ;
2515: LD_ADDR_VAR 0 3
2519: PUSH
2520: CALL_OW 44
2524: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
2525: LD_VAR 0 3
2529: PPUSH
2530: LD_INT 16
2532: PPUSH
2533: LD_INT 0
2535: PPUSH
2536: CALL_OW 49
// SetLives ( un , 0 ) ;
2540: LD_VAR 0 3
2544: PPUSH
2545: LD_INT 0
2547: PPUSH
2548: CALL_OW 234
// end ;
2552: GO 2459
2554: POP
2555: POP
// end ; end_of_file
2556: LD_VAR 0 1
2560: RET
// export function PrepareRussianHeroes ; begin
2561: LD_INT 0
2563: PPUSH
// uc_side = 6 ;
2564: LD_ADDR_OWVAR 20
2568: PUSH
2569: LD_INT 6
2571: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
2572: LD_ADDR_EXP 8
2576: PUSH
2577: LD_STRING Mikhail
2579: PPUSH
2580: CALL_OW 25
2584: ST_TO_ADDR
// end ;
2585: LD_VAR 0 1
2589: RET
// export function PrepareSouthBase ; var i , un ; begin
2590: LD_INT 0
2592: PPUSH
2593: PPUSH
2594: PPUSH
// for i = 1 to 2 do
2595: LD_ADDR_VAR 0 2
2599: PUSH
2600: DOUBLE
2601: LD_INT 1
2603: DEC
2604: ST_TO_ADDR
2605: LD_INT 2
2607: PUSH
2608: FOR_TO
2609: IFFALSE 2710
// begin uc_side = 3 ;
2611: LD_ADDR_OWVAR 20
2615: PUSH
2616: LD_INT 3
2618: ST_TO_ADDR
// uc_nation = 3 ;
2619: LD_ADDR_OWVAR 21
2623: PUSH
2624: LD_INT 3
2626: ST_TO_ADDR
// hc_gallery =  ;
2627: LD_ADDR_OWVAR 33
2631: PUSH
2632: LD_STRING 
2634: ST_TO_ADDR
// hc_name =  ;
2635: LD_ADDR_OWVAR 26
2639: PUSH
2640: LD_STRING 
2642: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2643: LD_INT 0
2645: PPUSH
2646: LD_INT 1
2648: PPUSH
2649: LD_EXP 13
2653: PPUSH
2654: LD_EXP 14
2658: PPUSH
2659: CALL_OW 12
2663: PPUSH
2664: CALL_OW 380
// un = CreateHuman ;
2668: LD_ADDR_VAR 0 3
2672: PUSH
2673: CALL_OW 44
2677: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
2678: LD_VAR 0 3
2682: PPUSH
2683: LD_INT 11
2685: PPUSH
2686: LD_INT 0
2688: PPUSH
2689: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
2693: LD_VAR 0 3
2697: PPUSH
2698: LD_INT 111
2700: PPUSH
2701: LD_INT 38
2703: PPUSH
2704: CALL_OW 118
// end ;
2708: GO 2608
2710: POP
2711: POP
// for i = 1 to Difficulty do
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: DOUBLE
2718: LD_INT 1
2720: DEC
2721: ST_TO_ADDR
2722: LD_OWVAR 67
2726: PUSH
2727: FOR_TO
2728: IFFALSE 2829
// begin uc_side = 3 ;
2730: LD_ADDR_OWVAR 20
2734: PUSH
2735: LD_INT 3
2737: ST_TO_ADDR
// uc_nation = 3 ;
2738: LD_ADDR_OWVAR 21
2742: PUSH
2743: LD_INT 3
2745: ST_TO_ADDR
// hc_gallery =  ;
2746: LD_ADDR_OWVAR 33
2750: PUSH
2751: LD_STRING 
2753: ST_TO_ADDR
// hc_name =  ;
2754: LD_ADDR_OWVAR 26
2758: PUSH
2759: LD_STRING 
2761: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2762: LD_INT 0
2764: PPUSH
2765: LD_INT 3
2767: PPUSH
2768: LD_EXP 13
2772: PPUSH
2773: LD_EXP 14
2777: PPUSH
2778: CALL_OW 12
2782: PPUSH
2783: CALL_OW 380
// un = CreateHuman ;
2787: LD_ADDR_VAR 0 3
2791: PUSH
2792: CALL_OW 44
2796: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
2797: LD_VAR 0 3
2801: PPUSH
2802: LD_INT 12
2804: PPUSH
2805: LD_INT 0
2807: PPUSH
2808: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
2812: LD_VAR 0 3
2816: PPUSH
2817: LD_INT 111
2819: PPUSH
2820: LD_INT 28
2822: PPUSH
2823: CALL_OW 118
// end ;
2827: GO 2727
2829: POP
2830: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] ) ;
2831: LD_INT 3
2833: PPUSH
2834: LD_INT 3
2836: PPUSH
2837: LD_INT 33
2839: PPUSH
2840: LD_EXP 13
2844: PPUSH
2845: LD_EXP 14
2849: PPUSH
2850: CALL_OW 12
2854: PPUSH
2855: LD_INT 1
2857: PPUSH
2858: LD_INT 1
2860: PPUSH
2861: LD_INT 2
2863: PPUSH
2864: CALL_OW 12
2868: PUSH
2869: LD_INT 2
2871: PPUSH
2872: LD_INT 3
2874: PPUSH
2875: CALL_OW 12
2879: PUSH
2880: LD_INT 3
2882: PPUSH
2883: LD_INT 4
2885: PPUSH
2886: CALL_OW 12
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: LIST
2895: PUSH
2896: LD_OWVAR 67
2900: ARRAY
2901: PPUSH
2902: CALL 1703 0 6
// end ;
2906: LD_VAR 0 1
2910: RET
// export function PrepareNorthBase ; var i , un ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
2916: LD_ADDR_VAR 0 2
2920: PUSH
2921: DOUBLE
2922: LD_INT 1
2924: DEC
2925: ST_TO_ADDR
2926: LD_INT 1
2928: PPUSH
2929: LD_INT 2
2931: PPUSH
2932: CALL_OW 12
2936: PUSH
2937: LD_INT 2
2939: PPUSH
2940: LD_INT 3
2942: PPUSH
2943: CALL_OW 12
2947: PUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 4
2953: PPUSH
2954: CALL_OW 12
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: LIST
2963: PUSH
2964: LD_OWVAR 67
2968: ARRAY
2969: PUSH
2970: FOR_TO
2971: IFFALSE 3072
// begin uc_side = 3 ;
2973: LD_ADDR_OWVAR 20
2977: PUSH
2978: LD_INT 3
2980: ST_TO_ADDR
// uc_nation = 3 ;
2981: LD_ADDR_OWVAR 21
2985: PUSH
2986: LD_INT 3
2988: ST_TO_ADDR
// hc_gallery =  ;
2989: LD_ADDR_OWVAR 33
2993: PUSH
2994: LD_STRING 
2996: ST_TO_ADDR
// hc_name =  ;
2997: LD_ADDR_OWVAR 26
3001: PUSH
3002: LD_STRING 
3004: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3005: LD_INT 0
3007: PPUSH
3008: LD_INT 1
3010: PPUSH
3011: LD_EXP 13
3015: PPUSH
3016: LD_EXP 14
3020: PPUSH
3021: CALL_OW 12
3025: PPUSH
3026: CALL_OW 380
// un = CreateHuman ;
3030: LD_ADDR_VAR 0 3
3034: PUSH
3035: CALL_OW 44
3039: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
3040: LD_VAR 0 3
3044: PPUSH
3045: LD_INT 14
3047: PPUSH
3048: LD_INT 0
3050: PPUSH
3051: CALL_OW 49
// ComTurnXY ( un , 54 , 16 ) ;
3055: LD_VAR 0 3
3059: PPUSH
3060: LD_INT 54
3062: PPUSH
3063: LD_INT 16
3065: PPUSH
3066: CALL_OW 118
// end ;
3070: GO 2970
3072: POP
3073: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 2 , 3 ) , Rand ( 3 , 4 ) ] [ Difficulty ] ) ;
3074: LD_INT 3
3076: PPUSH
3077: LD_INT 3
3079: PPUSH
3080: LD_INT 2
3082: PPUSH
3083: LD_EXP 13
3087: PPUSH
3088: LD_EXP 14
3092: PPUSH
3093: CALL_OW 12
3097: PPUSH
3098: LD_INT 1
3100: PPUSH
3101: LD_INT 1
3103: PPUSH
3104: LD_INT 2
3106: PPUSH
3107: CALL_OW 12
3111: PUSH
3112: LD_INT 2
3114: PPUSH
3115: LD_INT 3
3117: PPUSH
3118: CALL_OW 12
3122: PUSH
3123: LD_INT 3
3125: PPUSH
3126: LD_INT 4
3128: PPUSH
3129: CALL_OW 12
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PUSH
3139: LD_OWVAR 67
3143: ARRAY
3144: PPUSH
3145: CALL 1703 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
3149: LD_INT 3
3151: PPUSH
3152: LD_INT 3
3154: PPUSH
3155: LD_INT 23
3157: PPUSH
3158: LD_EXP 13
3162: PPUSH
3163: LD_EXP 14
3167: PPUSH
3168: CALL_OW 12
3172: PPUSH
3173: LD_INT 4
3175: PPUSH
3176: LD_INT 0
3178: PUSH
3179: LD_INT 1
3181: PUSH
3182: LD_INT 2
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: PUSH
3190: LD_OWVAR 67
3194: ARRAY
3195: PPUSH
3196: CALL 1703 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
3200: LD_INT 3
3202: PPUSH
3203: LD_INT 3
3205: PPUSH
3206: LD_INT 1
3208: PPUSH
3209: LD_EXP 13
3213: PPUSH
3214: LD_EXP 14
3218: PPUSH
3219: CALL_OW 12
3223: PPUSH
3224: LD_INT 2
3226: PPUSH
3227: LD_INT 1
3229: PUSH
3230: LD_INT 2
3232: PUSH
3233: LD_INT 2
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: LIST
3240: PUSH
3241: LD_OWVAR 67
3245: ARRAY
3246: PPUSH
3247: CALL 1703 0 6
// end ;
3251: LD_VAR 0 1
3255: RET
// export function PrepareOtherRussians ; var i , un ; begin
3256: LD_INT 0
3258: PPUSH
3259: PPUSH
3260: PPUSH
// for i = 1 to 2 do
3261: LD_ADDR_VAR 0 2
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_INT 2
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3376
// begin uc_side = 3 ;
3277: LD_ADDR_OWVAR 20
3281: PUSH
3282: LD_INT 3
3284: ST_TO_ADDR
// uc_nation = 3 ;
3285: LD_ADDR_OWVAR 21
3289: PUSH
3290: LD_INT 3
3292: ST_TO_ADDR
// hc_gallery =  ;
3293: LD_ADDR_OWVAR 33
3297: PUSH
3298: LD_STRING 
3300: ST_TO_ADDR
// hc_name =  ;
3301: LD_ADDR_OWVAR 26
3305: PUSH
3306: LD_STRING 
3308: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3309: LD_INT 0
3311: PPUSH
3312: LD_INT 1
3314: PPUSH
3315: LD_EXP 13
3319: PPUSH
3320: LD_EXP 14
3324: PPUSH
3325: CALL_OW 12
3329: PPUSH
3330: CALL_OW 380
// un = CreateHuman ;
3334: LD_ADDR_VAR 0 3
3338: PUSH
3339: CALL_OW 44
3343: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
3344: LD_VAR 0 3
3348: PPUSH
3349: LD_INT 9
3351: PPUSH
3352: LD_INT 0
3354: PPUSH
3355: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
3359: LD_VAR 0 3
3363: PPUSH
3364: LD_INT 80
3366: PPUSH
3367: LD_INT 73
3369: PPUSH
3370: CALL_OW 118
// end ;
3374: GO 3274
3376: POP
3377: POP
// end ;
3378: LD_VAR 0 1
3382: RET
