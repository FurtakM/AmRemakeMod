// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; starting begin RuSoldMinLevel = 0 ;
   0: LD_ADDR_EXP 13
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
   8: LD_ADDR_EXP 14
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// hpJMM = 0 ;
  16: LD_ADDR_EXP 10
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpBobby = 0 ;
  24: LD_ADDR_EXP 11
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpCyrus = 0 ;
  32: LD_ADDR_EXP 12
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// cargoEscape = 0 ;
  40: LD_ADDR_EXP 20
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// mikhailStatus = 0 ;
  48: LD_ADDR_EXP 21
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailInBase = 0 ;
  56: LD_ADDR_EXP 22
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailDepot = 0 ;
  64: LD_ADDR_EXP 23
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// tigersRespawn = 0 ;
  72: LD_ADDR_EXP 29
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// cargoRespawn = 0 ;
  80: LD_ADDR_EXP 28
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// lastBattle = 0 ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// deadsCounter = 0 ;
  96: LD_ADDR_EXP 30
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// spotCorpses = 0 ;
 104: LD_ADDR_EXP 31
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 112: LD_ADDR_EXP 25
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// attackGroup = [ ] ;
 126: LD_ADDR_EXP 26
 130: PUSH
 131: EMPTY
 132: ST_TO_ADDR
// RandomizeAll ;
 133: CALL_OW 11
// InGameOn ;
 137: CALL_OW 8
// Resetfog ;
 141: CALL_OW 335
// PrepareDifficulty ;
 145: CALL 10128 0 0
// PrepareRussianCommander ;
 149: CALL 11347 0 0
// PrepareSouthBase ;
 153: CALL 11430 0 0
// PrepareNorthBase ;
 157: CALL 11787 0 0
// PrepareOtherRussians ;
 161: CALL 12153 0 0
// PrepareHeroes ;
 165: CALL 10443 0 0
// PrepareLisSquad ;
 169: CALL 10686 0 0
// PrepareOtherAmericans ;
 173: CALL 10914 0 0
// end ; end_of_file
 177: END
// every 1 do var tmp ;
 178: GO 180
 180: DISABLE
 181: LD_INT 0
 183: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 184: LD_EXP 1
 188: PPUSH
 189: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 193: LD_ADDR_VAR 0 1
 197: PUSH
 198: LD_INT 22
 200: PUSH
 201: LD_INT 4
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: PPUSH
 222: CALL_OW 69
 226: PUSH
 227: LD_EXP 4
 231: PUSH
 232: EMPTY
 233: LIST
 234: DIFF
 235: ST_TO_ADDR
// if Cyrus and Bobby then
 236: LD_EXP 3
 240: PUSH
 241: LD_EXP 2
 245: AND
 246: IFFALSE 576
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 248: LD_EXP 3
 252: PPUSH
 253: LD_INT 43
 255: PPUSH
 256: LD_INT 72
 258: PPUSH
 259: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 263: LD_EXP 2
 267: PPUSH
 268: LD_INT 44
 270: PPUSH
 271: LD_INT 70
 273: PPUSH
 274: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 278: LD_EXP 1
 282: PPUSH
 283: LD_INT 46
 285: PPUSH
 286: LD_INT 73
 288: PPUSH
 289: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 293: LD_EXP 3
 297: PPUSH
 298: LD_STRING D1a-Cyrus-1
 300: PPUSH
 301: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 305: LD_EXP 1
 309: PPUSH
 310: LD_STRING D1a-JMM-1
 312: PPUSH
 313: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 317: LD_EXP 3
 321: PPUSH
 322: LD_INT 37
 324: PPUSH
 325: LD_INT 66
 327: PPUSH
 328: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 332: LD_EXP 2
 336: PPUSH
 337: LD_INT 41
 339: PPUSH
 340: LD_INT 67
 342: PPUSH
 343: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 347: LD_EXP 1
 351: PPUSH
 352: LD_INT 38
 354: PPUSH
 355: LD_INT 64
 357: PPUSH
 358: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 362: LD_EXP 2
 366: PPUSH
 367: LD_STRING D1a-Bobby-2
 369: PPUSH
 370: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 374: LD_EXP 3
 378: PPUSH
 379: LD_INT 35
 381: PPUSH
 382: LD_INT 62
 384: PPUSH
 385: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 389: LD_EXP 2
 393: PPUSH
 394: LD_INT 32
 396: PPUSH
 397: LD_INT 60
 399: PPUSH
 400: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 404: LD_EXP 1
 408: PPUSH
 409: LD_INT 35
 411: PPUSH
 412: LD_INT 60
 414: PPUSH
 415: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 419: LD_EXP 1
 423: PPUSH
 424: LD_STRING D1a-JMM-2
 426: PPUSH
 427: CALL_OW 88
// ComWalk ( Lisa ) ;
 431: LD_EXP 4
 435: PPUSH
 436: CALL_OW 138
// wait ( 0 0$1 ) ;
 440: LD_INT 35
 442: PPUSH
 443: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 447: LD_EXP 4
 451: PPUSH
 452: LD_EXP 1
 456: PPUSH
 457: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 461: LD_EXP 1
 465: PUSH
 466: LD_EXP 3
 470: PUSH
 471: LD_EXP 2
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: PPUSH
 481: LD_EXP 4
 485: PPUSH
 486: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 490: LD_VAR 0 1
 494: PUSH
 495: LD_INT 1
 497: ARRAY
 498: PPUSH
 499: LD_INT 33
 501: PPUSH
 502: LD_INT 55
 504: PPUSH
 505: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 509: LD_VAR 0 1
 513: PUSH
 514: LD_INT 2
 516: ARRAY
 517: PPUSH
 518: LD_INT 30
 520: PPUSH
 521: LD_INT 54
 523: PPUSH
 524: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 528: LD_VAR 0 1
 532: PUSH
 533: LD_INT 1
 535: ARRAY
 536: PPUSH
 537: LD_EXP 1
 541: PPUSH
 542: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 546: LD_VAR 0 1
 550: PUSH
 551: LD_INT 2
 553: ARRAY
 554: PPUSH
 555: LD_EXP 1
 559: PPUSH
 560: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 564: LD_EXP 4
 568: PPUSH
 569: LD_STRING D1a-Lisa-2
 571: PPUSH
 572: CALL_OW 88
// end ; if Cyrus and not Bobby then
 576: LD_EXP 3
 580: PUSH
 581: LD_EXP 2
 585: NOT
 586: AND
 587: IFFALSE 792
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 589: LD_EXP 3
 593: PPUSH
 594: LD_INT 43
 596: PPUSH
 597: LD_INT 72
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 604: LD_EXP 1
 608: PPUSH
 609: LD_INT 46
 611: PPUSH
 612: LD_INT 73
 614: PPUSH
 615: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 619: LD_EXP 3
 623: PPUSH
 624: LD_STRING D1a-Cyrus-1
 626: PPUSH
 627: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 631: LD_EXP 1
 635: PPUSH
 636: LD_STRING D1a-JMM-1
 638: PPUSH
 639: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 643: LD_EXP 3
 647: PPUSH
 648: LD_INT 37
 650: PPUSH
 651: LD_INT 66
 653: PPUSH
 654: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 658: LD_EXP 1
 662: PPUSH
 663: LD_INT 38
 665: PPUSH
 666: LD_INT 64
 668: PPUSH
 669: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 673: LD_EXP 3
 677: PPUSH
 678: LD_STRING D1a-Cyrus-2
 680: PPUSH
 681: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 685: LD_EXP 3
 689: PPUSH
 690: LD_INT 35
 692: PPUSH
 693: LD_INT 62
 695: PPUSH
 696: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 700: LD_EXP 1
 704: PPUSH
 705: LD_INT 35
 707: PPUSH
 708: LD_INT 60
 710: PPUSH
 711: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 715: LD_EXP 1
 719: PPUSH
 720: LD_STRING D1a-JMM-2
 722: PPUSH
 723: CALL_OW 88
// ComWalk ( Lisa ) ;
 727: LD_EXP 4
 731: PPUSH
 732: CALL_OW 138
// wait ( 0 0$1 ) ;
 736: LD_INT 35
 738: PPUSH
 739: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 743: LD_EXP 4
 747: PPUSH
 748: LD_EXP 1
 752: PPUSH
 753: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 757: LD_EXP 4
 761: PPUSH
 762: LD_STRING D1a-Lisa-2
 764: PPUSH
 765: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 769: LD_EXP 1
 773: PUSH
 774: LD_EXP 3
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: LD_EXP 4
 787: PPUSH
 788: CALL_OW 119
// end ; if not Cyrus and Bobby then
 792: LD_EXP 3
 796: NOT
 797: PUSH
 798: LD_EXP 2
 802: AND
 803: IFFALSE 1082
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 805: LD_EXP 2
 809: PPUSH
 810: LD_INT 44
 812: PPUSH
 813: LD_INT 70
 815: PPUSH
 816: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 820: LD_EXP 1
 824: PPUSH
 825: LD_INT 46
 827: PPUSH
 828: LD_INT 73
 830: PPUSH
 831: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 835: LD_EXP 2
 839: PPUSH
 840: LD_STRING D1a-Bobby-1
 842: PPUSH
 843: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 847: LD_EXP 1
 851: PPUSH
 852: LD_STRING D1a-JMM-1
 854: PPUSH
 855: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 859: LD_EXP 2
 863: PPUSH
 864: LD_INT 37
 866: PPUSH
 867: LD_INT 66
 869: PPUSH
 870: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 874: LD_EXP 1
 878: PPUSH
 879: LD_INT 38
 881: PPUSH
 882: LD_INT 64
 884: PPUSH
 885: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 889: LD_EXP 2
 893: PPUSH
 894: LD_STRING D1a-Bobby-2
 896: PPUSH
 897: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 901: LD_EXP 2
 905: PPUSH
 906: LD_INT 35
 908: PPUSH
 909: LD_INT 62
 911: PPUSH
 912: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 916: LD_EXP 1
 920: PPUSH
 921: LD_INT 35
 923: PPUSH
 924: LD_INT 60
 926: PPUSH
 927: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 931: LD_EXP 1
 935: PPUSH
 936: LD_STRING D1a-JMM-2
 938: PPUSH
 939: CALL_OW 88
// ComWalk ( Lisa ) ;
 943: LD_EXP 4
 947: PPUSH
 948: CALL_OW 138
// wait ( 0 0$1 ) ;
 952: LD_INT 35
 954: PPUSH
 955: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 959: LD_EXP 4
 963: PPUSH
 964: LD_EXP 1
 968: PPUSH
 969: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 973: LD_EXP 1
 977: PUSH
 978: LD_EXP 3
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: PPUSH
 987: LD_EXP 4
 991: PPUSH
 992: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 996: LD_VAR 0 1
1000: PUSH
1001: LD_INT 1
1003: ARRAY
1004: PPUSH
1005: LD_INT 33
1007: PPUSH
1008: LD_INT 55
1010: PPUSH
1011: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1015: LD_VAR 0 1
1019: PUSH
1020: LD_INT 2
1022: ARRAY
1023: PPUSH
1024: LD_INT 30
1026: PPUSH
1027: LD_INT 54
1029: PPUSH
1030: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1034: LD_VAR 0 1
1038: PUSH
1039: LD_INT 1
1041: ARRAY
1042: PPUSH
1043: LD_EXP 1
1047: PPUSH
1048: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1052: LD_VAR 0 1
1056: PUSH
1057: LD_INT 2
1059: ARRAY
1060: PPUSH
1061: LD_EXP 1
1065: PPUSH
1066: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1070: LD_EXP 4
1074: PPUSH
1075: LD_STRING D1a-Lisa-2
1077: PPUSH
1078: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1082: LD_EXP 3
1086: NOT
1087: PUSH
1088: LD_EXP 2
1092: NOT
1093: AND
1094: IFFALSE 1308
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1096: LD_EXP 1
1100: PPUSH
1101: LD_INT 37
1103: PPUSH
1104: LD_INT 66
1106: PPUSH
1107: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1111: LD_EXP 1
1115: PPUSH
1116: LD_STRING D1b-JMM-1
1118: PPUSH
1119: CALL_OW 88
// ComCrawl ( JMM ) ;
1123: LD_EXP 1
1127: PPUSH
1128: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1132: LD_EXP 1
1136: PPUSH
1137: LD_INT 35
1139: PPUSH
1140: LD_INT 60
1142: PPUSH
1143: CALL_OW 171
// wait ( 0 0$8 ) ;
1147: LD_INT 280
1149: PPUSH
1150: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1154: LD_EXP 1
1158: PPUSH
1159: LD_STRING D1b-JMM-1a
1161: PPUSH
1162: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1166: LD_EXP 1
1170: PUSH
1171: LD_EXP 4
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PPUSH
1180: CALL_OW 138
// wait ( 0 0$1 ) ;
1184: LD_INT 35
1186: PPUSH
1187: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1191: LD_EXP 4
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1205: LD_EXP 1
1209: PUSH
1210: EMPTY
1211: LIST
1212: PPUSH
1213: LD_EXP 4
1217: PPUSH
1218: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1222: LD_VAR 0 1
1226: PUSH
1227: LD_INT 1
1229: ARRAY
1230: PPUSH
1231: LD_INT 33
1233: PPUSH
1234: LD_INT 55
1236: PPUSH
1237: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1241: LD_VAR 0 1
1245: PUSH
1246: LD_INT 2
1248: ARRAY
1249: PPUSH
1250: LD_INT 30
1252: PPUSH
1253: LD_INT 54
1255: PPUSH
1256: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1260: LD_VAR 0 1
1264: PUSH
1265: LD_INT 1
1267: ARRAY
1268: PPUSH
1269: LD_EXP 1
1273: PPUSH
1274: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1278: LD_VAR 0 1
1282: PUSH
1283: LD_INT 2
1285: ARRAY
1286: PPUSH
1287: LD_EXP 1
1291: PPUSH
1292: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1296: LD_EXP 4
1300: PPUSH
1301: LD_STRING D1b-Lisa-1
1303: PPUSH
1304: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1308: LD_EXP 1
1312: PPUSH
1313: LD_STRING D1-JMM-1
1315: PPUSH
1316: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1320: LD_EXP 4
1324: PPUSH
1325: LD_STRING D1-Lisa-1
1327: PPUSH
1328: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1332: LD_EXP 1
1336: PPUSH
1337: LD_STRING D1-JMM-2
1339: PPUSH
1340: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1344: LD_EXP 9
1348: PPUSH
1349: LD_STRING D1-Pow-2
1351: PPUSH
1352: CALL_OW 94
// if Cyrus then
1356: LD_EXP 3
1360: IFFALSE 1386
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1362: LD_EXP 3
1366: PPUSH
1367: LD_STRING D1-Cyrus-2
1369: PPUSH
1370: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1374: LD_EXP 1
1378: PPUSH
1379: LD_STRING D1-JMM-3
1381: PPUSH
1382: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1386: LD_EXP 9
1390: PPUSH
1391: LD_STRING D1-Pow-3
1393: PPUSH
1394: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1398: LD_EXP 1
1402: PPUSH
1403: LD_STRING D1-JMM-4
1405: PPUSH
1406: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1410: LD_EXP 9
1414: PPUSH
1415: LD_STRING D1-Pow-4
1417: PPUSH
1418: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1422: LD_EXP 9
1426: PPUSH
1427: LD_STRING D1-Pow-4a
1429: PPUSH
1430: CALL_OW 94
// if Cyrus then
1434: LD_EXP 3
1438: IFFALSE 1452
// Say ( Cyrus , D1-Cyrus-4 ) ;
1440: LD_EXP 3
1444: PPUSH
1445: LD_STRING D1-Cyrus-4
1447: PPUSH
1448: CALL_OW 88
// if Bobby then
1452: LD_EXP 2
1456: IFFALSE 1494
// begin Say ( Bobby , D1-Bobby-4 ) ;
1458: LD_EXP 2
1462: PPUSH
1463: LD_STRING D1-Bobby-4
1465: PPUSH
1466: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1470: LD_EXP 4
1474: PPUSH
1475: LD_STRING D1-Lisa-4
1477: PPUSH
1478: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1482: LD_EXP 1
1486: PPUSH
1487: LD_STRING D1-JMM-5
1489: PPUSH
1490: CALL_OW 88
// end ; InGameOff ;
1494: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1498: LD_INT 22
1500: PUSH
1501: LD_INT 4
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PPUSH
1508: CALL_OW 69
1512: PUSH
1513: LD_EXP 6
1517: PUSH
1518: LD_EXP 7
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: DIFF
1527: PPUSH
1528: LD_INT 1
1530: PPUSH
1531: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1535: LD_STRING M1
1537: PPUSH
1538: CALL_OW 337
// SaveForQuickRestart ;
1542: CALL_OW 22
// end ;
1546: PPOPN 1
1548: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1549: LD_INT 7
1551: PPUSH
1552: LD_INT 22
1554: PUSH
1555: LD_INT 1
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PPUSH
1562: CALL_OW 70
1566: PUSH
1567: LD_INT 0
1569: GREATER
1570: IFFALSE 1940
1572: GO 1574
1574: DISABLE
// begin InGameOn ;
1575: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1579: LD_INT 22
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 21
1591: PUSH
1592: LD_INT 1
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PPUSH
1603: CALL_OW 69
1607: PPUSH
1608: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1612: LD_INT 24
1614: PPUSH
1615: LD_INT 32
1617: PPUSH
1618: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1622: LD_EXP 5
1626: PPUSH
1627: LD_INT 4
1629: PPUSH
1630: LD_INT 1
1632: PPUSH
1633: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1637: LD_EXP 5
1641: PPUSH
1642: LD_INT 4
1644: PPUSH
1645: CALL_OW 336
// wait ( 0 0$1 ) ;
1649: LD_INT 35
1651: PPUSH
1652: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1656: LD_EXP 5
1660: PPUSH
1661: LD_INT 27
1663: PPUSH
1664: LD_INT 38
1666: PPUSH
1667: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1671: LD_EXP 5
1675: PPUSH
1676: LD_EXP 1
1680: PPUSH
1681: CALL_OW 179
// wait ( 0 0$1 ) ;
1685: LD_INT 35
1687: PPUSH
1688: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1692: LD_EXP 5
1696: PPUSH
1697: LD_STRING D2a-Khat-1
1699: PPUSH
1700: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1704: LD_EXP 1
1708: PPUSH
1709: LD_STRING D2a-JMM-1
1711: PPUSH
1712: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1716: LD_EXP 5
1720: PPUSH
1721: LD_STRING D2a-Khat-2
1723: PPUSH
1724: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1728: LD_EXP 1
1732: PPUSH
1733: LD_STRING D2a-JMM-2
1735: PPUSH
1736: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1740: LD_EXP 5
1744: PPUSH
1745: LD_STRING D2a-Khat-3
1747: PPUSH
1748: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1752: LD_EXP 1
1756: PPUSH
1757: LD_STRING D2a-JMM-3
1759: PPUSH
1760: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1764: LD_EXP 5
1768: PPUSH
1769: LD_STRING D2a-Khat-4
1771: PPUSH
1772: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1776: LD_EXP 1
1780: PPUSH
1781: LD_STRING D2a-JMM-4
1783: PPUSH
1784: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1788: LD_EXP 5
1792: PPUSH
1793: LD_STRING D2a-Khat-5
1795: PPUSH
1796: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1800: LD_EXP 1
1804: PPUSH
1805: LD_STRING D2a-JMM-5
1807: PPUSH
1808: CALL_OW 88
// InGameOff ;
1812: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1816: LD_INT 22
1818: PUSH
1819: LD_INT 1
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: PUSH
1826: LD_INT 21
1828: PUSH
1829: LD_INT 1
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 3
1838: PUSH
1839: LD_INT 24
1841: PUSH
1842: LD_INT 800
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: PUSH
1863: LD_INT 0
1865: GREATER
1866: IFFALSE 1940
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1868: LD_EXP 5
1872: PPUSH
1873: LD_INT 22
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: PUSH
1883: LD_INT 21
1885: PUSH
1886: LD_INT 1
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 3
1895: PUSH
1896: LD_INT 24
1898: PUSH
1899: LD_INT 1000
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: PPUSH
1915: CALL_OW 69
1919: PUSH
1920: LD_INT 1
1922: ARRAY
1923: PPUSH
1924: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1928: LD_EXP 5
1932: PPUSH
1933: LD_STRING D2b-Khat-1
1935: PPUSH
1936: CALL_OW 88
// end ; end ;
1940: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
1941: LD_INT 15
1943: PPUSH
1944: LD_INT 22
1946: PUSH
1947: LD_INT 1
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PPUSH
1954: CALL_OW 70
1958: PUSH
1959: LD_INT 0
1961: GREATER
1962: IFFALSE 3122
1964: GO 1966
1966: DISABLE
1967: LD_INT 0
1969: PPUSH
1970: PPUSH
1971: PPUSH
1972: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
1973: LD_ADDR_VAR 0 2
1977: PUSH
1978: LD_INT 999
1980: PUSH
1981: LD_INT 999
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
1991: LD_ADDR_VAR 0 4
1995: PUSH
1996: LD_INT 22
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 21
2008: PUSH
2009: LD_INT 1
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PPUSH
2020: CALL_OW 69
2024: PUSH
2025: LD_EXP 1
2029: PUSH
2030: LD_EXP 2
2034: PUSH
2035: LD_EXP 3
2039: PUSH
2040: LD_EXP 4
2044: PUSH
2045: LD_EXP 5
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: DIFF
2057: ST_TO_ADDR
// PrepareDeadSoldiers ;
2058: CALL 11072 0 0
// spotCorpses = 1 ;
2062: LD_ADDR_EXP 31
2066: PUSH
2067: LD_INT 1
2069: ST_TO_ADDR
// InGameOn ;
2070: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2074: LD_INT 23
2076: PPUSH
2077: LD_INT 12
2079: PPUSH
2080: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2084: LD_ADDR_VAR 0 3
2088: PUSH
2089: LD_VAR 0 2
2093: PUSH
2094: LD_INT 1
2096: ARRAY
2097: PUSH
2098: LD_INT 2
2100: ARRAY
2101: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2102: LD_ADDR_VAR 0 1
2106: PUSH
2107: LD_INT 22
2109: PUSH
2110: LD_INT 1
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 21
2119: PUSH
2120: LD_INT 1
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PPUSH
2131: CALL_OW 69
2135: PUSH
2136: LD_EXP 1
2140: PUSH
2141: LD_EXP 5
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: DIFF
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2203
// if IsOK ( i ) then
2154: LD_VAR 0 1
2158: PPUSH
2159: CALL_OW 302
2163: IFFALSE 2201
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2165: LD_ADDR_VAR 0 2
2169: PUSH
2170: LD_VAR 0 2
2174: PUSH
2175: LD_VAR 0 1
2179: PUSH
2180: LD_VAR 0 1
2184: PPUSH
2185: LD_INT 16
2187: PPUSH
2188: CALL_OW 299
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: PUSH
2197: EMPTY
2198: LIST
2199: ADD
2200: ST_TO_ADDR
2201: GO 2151
2203: POP
2204: POP
// for i = 2 to distanceTab do
2205: LD_ADDR_VAR 0 1
2209: PUSH
2210: DOUBLE
2211: LD_INT 2
2213: DEC
2214: ST_TO_ADDR
2215: LD_VAR 0 2
2219: PUSH
2220: FOR_TO
2221: IFFALSE 2267
// if distanceTab [ i ] [ 2 ] < min then
2223: LD_VAR 0 2
2227: PUSH
2228: LD_VAR 0 1
2232: ARRAY
2233: PUSH
2234: LD_INT 2
2236: ARRAY
2237: PUSH
2238: LD_VAR 0 3
2242: LESS
2243: IFFALSE 2265
// min = distanceTab [ i ] [ 2 ] ;
2245: LD_ADDR_VAR 0 3
2249: PUSH
2250: LD_VAR 0 2
2254: PUSH
2255: LD_VAR 0 1
2259: ARRAY
2260: PUSH
2261: LD_INT 2
2263: ARRAY
2264: ST_TO_ADDR
2265: GO 2220
2267: POP
2268: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2269: LD_ADDR_VAR 0 1
2273: PUSH
2274: LD_INT 22
2276: PUSH
2277: LD_INT 1
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: PUSH
2284: LD_INT 21
2286: PUSH
2287: LD_INT 1
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PUSH
2294: EMPTY
2295: LIST
2296: LIST
2297: PPUSH
2298: CALL_OW 69
2302: PUSH
2303: LD_EXP 1
2307: PUSH
2308: EMPTY
2309: LIST
2310: DIFF
2311: PUSH
2312: FOR_IN
2313: IFFALSE 2383
// begin ComMoveToArea ( i , DeadCutscene ) ;
2315: LD_VAR 0 1
2319: PPUSH
2320: LD_INT 28
2322: PPUSH
2323: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2327: LD_EXP 1
2331: PPUSH
2332: LD_INT 30
2334: PPUSH
2335: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2339: LD_VAR 0 1
2343: PPUSH
2344: LD_INT 23
2346: PPUSH
2347: LD_INT 11
2349: PPUSH
2350: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2354: LD_EXP 1
2358: PPUSH
2359: LD_INT 23
2361: PPUSH
2362: LD_INT 11
2364: PPUSH
2365: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2369: LD_EXP 32
2373: PPUSH
2374: LD_INT 250
2376: PPUSH
2377: CALL_OW 234
// end ;
2381: GO 2312
2383: POP
2384: POP
// for i = 2 to distanceTab do
2385: LD_ADDR_VAR 0 1
2389: PUSH
2390: DOUBLE
2391: LD_INT 2
2393: DEC
2394: ST_TO_ADDR
2395: LD_VAR 0 2
2399: PUSH
2400: FOR_TO
2401: IFFALSE 2787
// begin if distanceTab [ i ] [ 2 ] = min then
2403: LD_VAR 0 2
2407: PUSH
2408: LD_VAR 0 1
2412: ARRAY
2413: PUSH
2414: LD_INT 2
2416: ARRAY
2417: PUSH
2418: LD_VAR 0 3
2422: EQUAL
2423: IFFALSE 2785
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 1
2438: ARRAY
2439: PUSH
2440: LD_EXP 2
2444: EQUAL
2445: IFFALSE 2459
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2447: LD_EXP 2
2451: PPUSH
2452: LD_STRING DCorpses-Bobby-1
2454: PPUSH
2455: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2459: LD_VAR 0 2
2463: PUSH
2464: LD_VAR 0 1
2468: ARRAY
2469: PUSH
2470: LD_INT 1
2472: ARRAY
2473: PUSH
2474: LD_EXP 3
2478: EQUAL
2479: IFFALSE 2493
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2481: LD_EXP 3
2485: PPUSH
2486: LD_STRING DCorpses-Cyrus-1
2488: PPUSH
2489: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2493: LD_VAR 0 2
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PUSH
2504: LD_INT 1
2506: ARRAY
2507: PUSH
2508: LD_EXP 4
2512: EQUAL
2513: IFFALSE 2527
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2515: LD_EXP 4
2519: PPUSH
2520: LD_STRING DCorpses-Lisa-1
2522: PPUSH
2523: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2527: LD_VAR 0 2
2531: PUSH
2532: LD_VAR 0 1
2536: ARRAY
2537: PUSH
2538: LD_INT 1
2540: ARRAY
2541: PUSH
2542: LD_VAR 0 4
2546: PUSH
2547: LD_INT 1
2549: ARRAY
2550: EQUAL
2551: PUSH
2552: LD_VAR 0 4
2556: PUSH
2557: LD_INT 1
2559: ARRAY
2560: PPUSH
2561: CALL_OW 258
2565: PUSH
2566: LD_INT 1
2568: EQUAL
2569: AND
2570: IFFALSE 2588
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2572: LD_VAR 0 4
2576: PUSH
2577: LD_INT 1
2579: ARRAY
2580: PPUSH
2581: LD_STRING DCorpses-Sol1-1
2583: PPUSH
2584: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2588: LD_VAR 0 2
2592: PUSH
2593: LD_VAR 0 1
2597: ARRAY
2598: PUSH
2599: LD_INT 1
2601: ARRAY
2602: PUSH
2603: LD_VAR 0 4
2607: PUSH
2608: LD_INT 1
2610: ARRAY
2611: EQUAL
2612: PUSH
2613: LD_VAR 0 4
2617: PUSH
2618: LD_INT 1
2620: ARRAY
2621: PPUSH
2622: CALL_OW 258
2626: PUSH
2627: LD_INT 2
2629: EQUAL
2630: AND
2631: IFFALSE 2649
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2633: LD_VAR 0 4
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PPUSH
2642: LD_STRING DCorpses-FSol1-1
2644: PPUSH
2645: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2649: LD_VAR 0 2
2653: PUSH
2654: LD_VAR 0 1
2658: ARRAY
2659: PUSH
2660: LD_INT 1
2662: ARRAY
2663: PUSH
2664: LD_VAR 0 4
2668: PUSH
2669: LD_INT 2
2671: ARRAY
2672: EQUAL
2673: PUSH
2674: LD_VAR 0 4
2678: PUSH
2679: LD_INT 2
2681: ARRAY
2682: PPUSH
2683: CALL_OW 258
2687: PUSH
2688: LD_INT 1
2690: EQUAL
2691: AND
2692: IFFALSE 2710
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2694: LD_VAR 0 4
2698: PUSH
2699: LD_INT 2
2701: ARRAY
2702: PPUSH
2703: LD_STRING DCorpses-Sol1-1
2705: PPUSH
2706: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2710: LD_VAR 0 2
2714: PUSH
2715: LD_VAR 0 1
2719: ARRAY
2720: PUSH
2721: LD_INT 1
2723: ARRAY
2724: PUSH
2725: LD_VAR 0 4
2729: PUSH
2730: LD_INT 2
2732: ARRAY
2733: EQUAL
2734: PUSH
2735: LD_VAR 0 4
2739: PUSH
2740: LD_INT 2
2742: ARRAY
2743: PPUSH
2744: CALL_OW 258
2748: PUSH
2749: LD_INT 2
2751: EQUAL
2752: AND
2753: IFFALSE 2771
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2755: LD_VAR 0 4
2759: PUSH
2760: LD_INT 2
2762: ARRAY
2763: PPUSH
2764: LD_STRING DCorpses-FSol1-1
2766: PPUSH
2767: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2771: LD_EXP 32
2775: PPUSH
2776: LD_INT 150
2778: PPUSH
2779: CALL_OW 234
// break ;
2783: GO 2787
// end ; end ;
2785: GO 2400
2787: POP
2788: POP
// repeat wait ( 0 0$1 ) ;
2789: LD_INT 35
2791: PPUSH
2792: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2796: LD_ADDR_VAR 0 1
2800: PUSH
2801: LD_INT 22
2803: PUSH
2804: LD_INT 1
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: LD_INT 21
2813: PUSH
2814: LD_INT 1
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PPUSH
2825: CALL_OW 69
2829: PUSH
2830: LD_EXP 1
2834: PUSH
2835: EMPTY
2836: LIST
2837: DIFF
2838: PUSH
2839: FOR_IN
2840: IFFALSE 2910
// begin ComMoveToArea ( i , DeadCutscene ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: LD_INT 28
2849: PPUSH
2850: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2854: LD_EXP 1
2858: PPUSH
2859: LD_INT 30
2861: PPUSH
2862: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2866: LD_VAR 0 1
2870: PPUSH
2871: LD_INT 23
2873: PPUSH
2874: LD_INT 11
2876: PPUSH
2877: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2881: LD_EXP 1
2885: PPUSH
2886: LD_INT 23
2888: PPUSH
2889: LD_INT 11
2891: PPUSH
2892: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2896: LD_EXP 32
2900: PPUSH
2901: LD_INT 250
2903: PPUSH
2904: CALL_OW 234
// end ;
2908: GO 2839
2910: POP
2911: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2912: LD_EXP 1
2916: PPUSH
2917: LD_INT 30
2919: PPUSH
2920: CALL_OW 308
2924: IFFALSE 2789
// wait ( 0 0$3 ) ;
2926: LD_INT 105
2928: PPUSH
2929: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2933: LD_EXP 1
2937: PPUSH
2938: LD_STRING DCorpses-JMM-1
2940: PPUSH
2941: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2945: LD_EXP 32
2949: PPUSH
2950: LD_INT 150
2952: PPUSH
2953: CALL_OW 234
// if IsOK ( Khatam ) then
2957: LD_EXP 5
2961: PPUSH
2962: CALL_OW 302
2966: IFFALSE 3106
// begin repeat wait ( 0 0$1 ) ;
2968: LD_INT 35
2970: PPUSH
2971: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
2975: LD_EXP 5
2979: PPUSH
2980: LD_EXP 32
2984: PPUSH
2985: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
2989: LD_EXP 5
2993: PPUSH
2994: LD_EXP 32
2998: PPUSH
2999: CALL_OW 296
3003: PUSH
3004: LD_INT 2
3006: LESS
3007: IFFALSE 2968
// spotCorpses = 0 ;
3009: LD_ADDR_EXP 31
3013: PUSH
3014: LD_INT 0
3016: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3017: LD_EXP 32
3021: PPUSH
3022: LD_INT 10
3024: PPUSH
3025: CALL_OW 234
// wait ( 0 0$3 ) ;
3029: LD_INT 105
3031: PPUSH
3032: CALL_OW 67
// SetLives ( DyingSold , 0 ) ;
3036: LD_EXP 32
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 234
// wait ( 0 0$1 ) ;
3048: LD_INT 35
3050: PPUSH
3051: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3055: LD_EXP 1
3059: PUSH
3060: LD_EXP 5
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: PPUSH
3069: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3073: LD_EXP 5
3077: PPUSH
3078: LD_EXP 1
3082: PPUSH
3083: CALL_OW 119
// wait ( 0 0$1 ) ;
3087: LD_INT 35
3089: PPUSH
3090: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3094: LD_EXP 5
3098: PPUSH
3099: LD_STRING DCorpses-Khat-1
3101: PPUSH
3102: CALL_OW 88
// end ; InGameOff ;
3106: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3110: LD_EXP 1
3114: PPUSH
3115: LD_STRING DCorpses-JMM-2
3117: PPUSH
3118: CALL_OW 88
// end ;
3122: PPOPN 4
3124: END
// every 0 0$1 trigger spotCorpses = 1 do
3125: LD_EXP 31
3129: PUSH
3130: LD_INT 1
3132: EQUAL
3133: IFFALSE 3151
3135: GO 3137
3137: DISABLE
// begin enable ;
3138: ENABLE
// SetLives ( DyingSold , 150 ) ;
3139: LD_EXP 32
3143: PPUSH
3144: LD_INT 150
3146: PPUSH
3147: CALL_OW 234
// end ;
3151: END
// every 1 trigger FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do var i ;
3152: LD_INT 8
3154: PPUSH
3155: LD_INT 22
3157: PUSH
3158: LD_INT 1
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: PPUSH
3165: CALL_OW 70
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: PUSH
3174: LD_INT 1
3176: PPUSH
3177: CALL_OW 255
3181: PUSH
3182: LD_INT 1
3184: EQUAL
3185: NOT
3186: AND
3187: PUSH
3188: LD_INT 10
3190: PPUSH
3191: CALL_OW 255
3195: PUSH
3196: LD_INT 1
3198: EQUAL
3199: NOT
3200: AND
3201: IFFALSE 3369
3203: GO 3205
3205: DISABLE
3206: LD_INT 0
3208: PPUSH
// begin InGameOn ;
3209: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3213: LD_EXP 7
3217: PPUSH
3218: LD_INT 250
3220: PPUSH
3221: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3225: LD_INT 3
3227: PPUSH
3228: LD_INT 4
3230: PPUSH
3231: LD_INT 2
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3241: LD_EXP 6
3245: PUSH
3246: LD_EXP 7
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PPUSH
3255: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: LD_INT 9
3266: PPUSH
3267: LD_INT 22
3269: PUSH
3270: LD_INT 3
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PPUSH
3277: CALL_OW 70
3281: PUSH
3282: FOR_IN
3283: IFFALSE 3296
// ComFree ( i ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: CALL_OW 139
3294: GO 3282
3296: POP
3297: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3298: LD_ADDR_VAR 0 1
3302: PUSH
3303: LD_INT 22
3305: PUSH
3306: LD_INT 4
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PPUSH
3313: CALL_OW 69
3317: PUSH
3318: FOR_IN
3319: IFFALSE 3332
// ComFree ( i ) ;
3321: LD_VAR 0 1
3325: PPUSH
3326: CALL_OW 139
3330: GO 3318
3332: POP
3333: POP
// wait ( 0 0$1 ) ;
3334: LD_INT 35
3336: PPUSH
3337: CALL_OW 67
// InGameOff ;
3341: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3345: LD_EXP 6
3349: PPUSH
3350: LD_STRING DF-Sol1-1
3352: PPUSH
3353: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3357: LD_EXP 1
3361: PPUSH
3362: LD_STRING DF-JMM-1
3364: PPUSH
3365: CALL_OW 88
// end ;
3369: PPOPN 1
3371: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do
3372: LD_INT 19
3374: PPUSH
3375: LD_INT 22
3377: PUSH
3378: LD_INT 3
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PPUSH
3385: CALL_OW 70
3389: PUSH
3390: LD_INT 0
3392: EQUAL
3393: PUSH
3394: LD_INT 1
3396: PPUSH
3397: CALL_OW 255
3401: PUSH
3402: LD_INT 1
3404: EQUAL
3405: NOT
3406: AND
3407: PUSH
3408: LD_INT 10
3410: PPUSH
3411: CALL_OW 255
3415: PUSH
3416: LD_INT 1
3418: EQUAL
3419: NOT
3420: AND
3421: IFFALSE 3534
3423: GO 3425
3425: DISABLE
// begin if not IsDead ( Brian ) then
3426: LD_EXP 6
3430: PPUSH
3431: CALL_OW 301
3435: NOT
3436: IFFALSE 3450
// SetSide ( Brian , 1 ) ;
3438: LD_EXP 6
3442: PPUSH
3443: LD_INT 1
3445: PPUSH
3446: CALL_OW 235
// if not IsDead ( Jerry ) then
3450: LD_EXP 7
3454: PPUSH
3455: CALL_OW 301
3459: NOT
3460: IFFALSE 3474
// SetSide ( Jerry , 1 ) ;
3462: LD_EXP 7
3466: PPUSH
3467: LD_INT 1
3469: PPUSH
3470: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3474: LD_INT 22
3476: PUSH
3477: LD_INT 1
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 25
3486: PUSH
3487: LD_INT 4
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PPUSH
3498: CALL_OW 69
3502: PUSH
3503: LD_INT 0
3505: GREATER
3506: IFFALSE 3522
// begin Say ( JMM , DFa-JMM-1 ) ;
3508: LD_EXP 1
3512: PPUSH
3513: LD_STRING DFa-JMM-1
3515: PPUSH
3516: CALL_OW 88
// end else
3520: GO 3534
// begin Say ( JMM , DFa-JMM-1a ) ;
3522: LD_EXP 1
3526: PPUSH
3527: LD_STRING DFa-JMM-1a
3529: PPUSH
3530: CALL_OW 88
// end ; end ;
3534: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3535: LD_INT 19
3537: PPUSH
3538: LD_INT 22
3540: PUSH
3541: LD_INT 3
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: PPUSH
3548: CALL_OW 70
3552: PUSH
3553: LD_INT 0
3555: EQUAL
3556: PUSH
3557: LD_EXP 6
3561: PPUSH
3562: CALL_OW 302
3566: NOT
3567: AND
3568: IFFALSE 3645
3570: GO 3572
3572: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3573: LD_INT 35
3575: PPUSH
3576: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3580: LD_EXP 6
3584: PPUSH
3585: CALL_OW 256
3589: PUSH
3590: LD_INT 250
3592: GREATER
3593: IFFALSE 3573
// Say ( Brian , DFb-Sol1-1 ) ;
3595: LD_EXP 6
3599: PPUSH
3600: LD_STRING DFb-Sol1-1
3602: PPUSH
3603: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3607: LD_EXP 6
3611: PPUSH
3612: LD_INT 78
3614: PPUSH
3615: LD_INT 74
3617: PPUSH
3618: CALL_OW 111
// if IsDead ( Jerry ) then
3622: LD_EXP 7
3626: PPUSH
3627: CALL_OW 301
3631: IFFALSE 3645
// Say ( Brian , DFb-Sol1-1a ) end ;
3633: LD_EXP 6
3637: PPUSH
3638: LD_STRING DFb-Sol1-1a
3640: PPUSH
3641: CALL_OW 88
3645: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3646: LD_INT 22
3648: PUSH
3649: LD_INT 1
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: PUSH
3656: LD_INT 21
3658: PUSH
3659: LD_INT 2
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: PPUSH
3670: CALL_OW 69
3674: PUSH
3675: LD_INT 0
3677: EQUAL
3678: IFFALSE 3766
3680: GO 3682
3682: DISABLE
3683: LD_INT 0
3685: PPUSH
// begin enable ;
3686: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3687: LD_ADDR_VAR 0 1
3691: PUSH
3692: LD_INT 22
3694: PUSH
3695: LD_INT 3
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: LD_INT 21
3704: PUSH
3705: LD_INT 3
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: LD_INT 30
3714: PUSH
3715: LD_INT 31
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: PPUSH
3727: CALL_OW 69
3731: PUSH
3732: FOR_IN
3733: IFFALSE 3764
// begin if See ( 1 , i ) then
3735: LD_INT 1
3737: PPUSH
3738: LD_VAR 0 1
3742: PPUSH
3743: CALL_OW 292
3747: IFFALSE 3762
// begin disable ;
3749: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3750: LD_EXP 1
3754: PPUSH
3755: LD_STRING DX1-JMM-1
3757: PPUSH
3758: CALL_OW 88
// end ; end ;
3762: GO 3732
3764: POP
3765: POP
// end ;
3766: PPOPN 1
3768: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3769: LD_INT 1
3771: PPUSH
3772: LD_INT 11
3774: PPUSH
3775: CALL_OW 294
3779: IFFALSE 4142
3781: GO 3783
3783: DISABLE
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
// begin DialogueOn ;
3788: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3792: LD_INT 11
3794: PPUSH
3795: LD_INT 22
3797: PUSH
3798: LD_INT 3
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: PUSH
3805: LD_INT 21
3807: PUSH
3808: LD_INT 1
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: PPUSH
3819: CALL_OW 70
3823: PUSH
3824: LD_INT 1
3826: ARRAY
3827: PPUSH
3828: LD_STRING DX3-Rus1-1
3830: PPUSH
3831: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3835: LD_EXP 1
3839: PPUSH
3840: LD_STRING DX3-JMM-1
3842: PPUSH
3843: CALL_OW 88
// DialogueOff ;
3847: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3851: LD_ADDR_VAR 0 1
3855: PUSH
3856: LD_INT 11
3858: PPUSH
3859: LD_INT 22
3861: PUSH
3862: LD_INT 3
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: PUSH
3869: LD_INT 21
3871: PUSH
3872: LD_INT 1
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PPUSH
3883: CALL_OW 70
3887: PUSH
3888: FOR_IN
3889: IFFALSE 3909
// southBaseDefenders = southBaseDefenders ^ i ;
3891: LD_ADDR_EXP 25
3895: PUSH
3896: LD_EXP 25
3900: PUSH
3901: LD_VAR 0 1
3905: ADD
3906: ST_TO_ADDR
3907: GO 3888
3909: POP
3910: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
3911: LD_INT 455
3913: PUSH
3914: LD_INT 420
3916: PUSH
3917: LD_INT 315
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: LIST
3924: PUSH
3925: LD_OWVAR 67
3929: ARRAY
3930: PPUSH
3931: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3935: LD_INT 35
3937: PPUSH
3938: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
3942: LD_ADDR_VAR 0 1
3946: PUSH
3947: LD_INT 22
3949: PUSH
3950: LD_INT 3
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: PUSH
3957: LD_INT 21
3959: PUSH
3960: LD_INT 2
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PUSH
3967: LD_INT 58
3969: PUSH
3970: EMPTY
3971: LIST
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: LIST
3977: PPUSH
3978: CALL_OW 69
3982: PUSH
3983: FOR_IN
3984: IFFALSE 4054
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
3986: LD_ADDR_VAR 0 2
3990: PUSH
3991: LD_INT 22
3993: PUSH
3994: LD_INT 3
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: PUSH
4001: LD_INT 21
4003: PUSH
4004: LD_INT 1
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PUSH
4011: LD_INT 25
4013: PUSH
4014: LD_INT 3
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: PPUSH
4026: CALL_OW 69
4030: PUSH
4031: FOR_IN
4032: IFFALSE 4050
// begin ComEnterUnit ( j , i ) ;
4034: LD_VAR 0 2
4038: PPUSH
4039: LD_VAR 0 1
4043: PPUSH
4044: CALL_OW 120
// end ;
4048: GO 4031
4050: POP
4051: POP
// end ;
4052: GO 3983
4054: POP
4055: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4056: LD_INT 22
4058: PUSH
4059: LD_INT 3
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: PUSH
4066: LD_INT 21
4068: PUSH
4069: LD_INT 2
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 58
4078: PUSH
4079: EMPTY
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: PPUSH
4087: CALL_OW 69
4091: PUSH
4092: LD_INT 0
4094: EQUAL
4095: PUSH
4096: LD_INT 22
4098: PUSH
4099: LD_INT 3
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 21
4108: PUSH
4109: LD_INT 1
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 25
4118: PUSH
4119: LD_INT 3
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: PPUSH
4131: CALL_OW 69
4135: PUSH
4136: LD_INT 0
4138: EQUAL
4139: OR
4140: IFFALSE 3935
// end ;
4142: PPOPN 2
4144: END
// every 0 0$1 do var i , tmp ;
4145: GO 4147
4147: DISABLE
4148: LD_INT 0
4150: PPUSH
4151: PPUSH
// begin enable ;
4152: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4153: LD_ADDR_VAR 0 2
4157: PUSH
4158: LD_INT 22
4160: PUSH
4161: LD_INT 1
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PUSH
4168: LD_INT 21
4170: PUSH
4171: LD_INT 1
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PPUSH
4182: CALL_OW 69
4186: ST_TO_ADDR
// for i in tmp do
4187: LD_ADDR_VAR 0 1
4191: PUSH
4192: LD_VAR 0 2
4196: PUSH
4197: FOR_IN
4198: IFFALSE 4320
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4200: LD_VAR 0 1
4204: PPUSH
4205: LD_INT 5
4207: PPUSH
4208: CALL_OW 296
4212: PUSH
4213: LD_INT 4
4215: LESS
4216: PUSH
4217: LD_VAR 0 1
4221: PPUSH
4222: LD_INT 4
4224: PPUSH
4225: CALL_OW 296
4229: PUSH
4230: LD_INT 4
4232: LESS
4233: OR
4234: IFFALSE 4318
// begin disable ;
4236: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4237: LD_INT 5
4239: PUSH
4240: LD_INT 4
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: PPUSH
4247: CALL_OW 85
// if IsOK ( Bobby ) then
4251: LD_EXP 2
4255: PPUSH
4256: CALL_OW 302
4260: IFFALSE 4297
// begin DialogueOn ;
4262: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4266: LD_EXP 2
4270: PPUSH
4271: LD_STRING DX2-Bobby-1
4273: PPUSH
4274: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4278: LD_EXP 1
4282: PPUSH
4283: LD_STRING DX2-JMM-1a
4285: PPUSH
4286: CALL_OW 88
// DialogueOff ;
4290: CALL_OW 7
// disable ;
4294: DISABLE
// end else
4295: GO 4318
// begin DialogueOn ;
4297: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4301: LD_EXP 1
4305: PPUSH
4306: LD_STRING DX2-JMM-1
4308: PPUSH
4309: CALL_OW 88
// DialogueOff ;
4313: CALL_OW 7
// disable ;
4317: DISABLE
// end ; end ; end ;
4318: GO 4197
4320: POP
4321: POP
// end ;
4322: PPOPN 2
4324: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4325: LD_INT 22
4327: PUSH
4328: LD_INT 1
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: LD_INT 23
4337: PUSH
4338: LD_INT 3
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: PUSH
4345: LD_INT 21
4347: PUSH
4348: LD_INT 2
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: PUSH
4355: LD_INT 34
4357: PUSH
4358: LD_INT 42
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: PPUSH
4371: CALL_OW 69
4375: PUSH
4376: LD_INT 1
4378: GREATEREQUAL
4379: IFFALSE 4846
4381: GO 4383
4383: DISABLE
4384: LD_INT 0
4386: PPUSH
4387: PPUSH
4388: PPUSH
4389: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4390: LD_ADDR_VAR 0 1
4394: PUSH
4395: LD_INT 22
4397: PUSH
4398: LD_INT 1
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 23
4407: PUSH
4408: LD_INT 3
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 21
4417: PUSH
4418: LD_INT 2
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: LD_INT 34
4427: PUSH
4428: LD_INT 42
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: PPUSH
4441: CALL_OW 69
4445: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4446: LD_ADDR_VAR 0 2
4450: PUSH
4451: LD_INT 22
4453: PUSH
4454: LD_INT 1
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 21
4463: PUSH
4464: LD_INT 1
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: LD_INT 26
4473: PUSH
4474: LD_INT 1
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: LIST
4485: PPUSH
4486: CALL_OW 69
4490: PUSH
4491: LD_EXP 1
4495: PUSH
4496: LD_EXP 3
4500: PUSH
4501: LD_EXP 2
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: LIST
4510: DIFF
4511: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4512: LD_ADDR_VAR 0 3
4516: PUSH
4517: LD_INT 22
4519: PUSH
4520: LD_INT 1
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 21
4529: PUSH
4530: LD_INT 1
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PUSH
4537: LD_INT 26
4539: PUSH
4540: LD_INT 2
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: PPUSH
4552: CALL_OW 69
4556: PUSH
4557: LD_EXP 4
4561: PUSH
4562: EMPTY
4563: LIST
4564: DIFF
4565: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
4566: LD_EXP 1
4570: PPUSH
4571: CALL_OW 310
4575: NOT
4576: IFFALSE 4590
// Say ( JMM , DX2a-JMM-1 ) ;
4578: LD_EXP 1
4582: PPUSH
4583: LD_STRING DX2a-JMM-1
4585: PPUSH
4586: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4590: LD_EXP 2
4594: PPUSH
4595: CALL_OW 310
4599: PUSH
4600: LD_VAR 0 1
4604: PUSH
4605: LD_INT 1
4607: ARRAY
4608: EQUAL
4609: IFFALSE 4623
// Say ( Bobby , DX2a-Bobby-1 ) ;
4611: LD_EXP 2
4615: PPUSH
4616: LD_STRING DX2a-Bobby-1
4618: PPUSH
4619: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4623: LD_EXP 3
4627: PPUSH
4628: CALL_OW 310
4632: PUSH
4633: LD_VAR 0 1
4637: PUSH
4638: LD_INT 1
4640: ARRAY
4641: EQUAL
4642: IFFALSE 4656
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4644: LD_EXP 3
4648: PPUSH
4649: LD_STRING DX2a-Cyrus-1
4651: PPUSH
4652: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4656: LD_EXP 4
4660: PPUSH
4661: CALL_OW 310
4665: PUSH
4666: LD_VAR 0 1
4670: PUSH
4671: LD_INT 1
4673: ARRAY
4674: EQUAL
4675: IFFALSE 4689
// Say ( Lisa , DX2a-Lisa-1 ) ;
4677: LD_EXP 4
4681: PPUSH
4682: LD_STRING DX2a-Lisa-1
4684: PPUSH
4685: CALL_OW 88
// for i in temp1 do
4689: LD_ADDR_VAR 0 4
4693: PUSH
4694: LD_VAR 0 2
4698: PUSH
4699: FOR_IN
4700: IFFALSE 4737
// if IsInUnit ( i ) = tmp [ 1 ] then
4702: LD_VAR 0 4
4706: PPUSH
4707: CALL_OW 310
4711: PUSH
4712: LD_VAR 0 1
4716: PUSH
4717: LD_INT 1
4719: ARRAY
4720: EQUAL
4721: IFFALSE 4735
// Say ( i , DX2a-Sol1-1 ) ;
4723: LD_VAR 0 4
4727: PPUSH
4728: LD_STRING DX2a-Sol1-1
4730: PPUSH
4731: CALL_OW 88
4735: GO 4699
4737: POP
4738: POP
// for i in temp2 do
4739: LD_ADDR_VAR 0 4
4743: PUSH
4744: LD_VAR 0 3
4748: PUSH
4749: FOR_IN
4750: IFFALSE 4787
// if IsInUnit ( i ) = tmp [ 1 ] then
4752: LD_VAR 0 4
4756: PPUSH
4757: CALL_OW 310
4761: PUSH
4762: LD_VAR 0 1
4766: PUSH
4767: LD_INT 1
4769: ARRAY
4770: EQUAL
4771: IFFALSE 4785
// Say ( i , DX2a-FSol1-1 ) ;
4773: LD_VAR 0 4
4777: PPUSH
4778: LD_STRING DX2a-FSol1-1
4780: PPUSH
4781: CALL_OW 88
4785: GO 4749
4787: POP
4788: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4789: LD_EXP 1
4793: PPUSH
4794: CALL_OW 310
4798: PUSH
4799: LD_VAR 0 1
4803: PUSH
4804: LD_INT 1
4806: ARRAY
4807: EQUAL
4808: IFFALSE 4822
// Say ( JMM , DX2b-JMM-1 ) ;
4810: LD_EXP 1
4814: PPUSH
4815: LD_STRING DX2b-JMM-1
4817: PPUSH
4818: CALL_OW 88
// if not IsInUnit ( JMM ) then
4822: LD_EXP 1
4826: PPUSH
4827: CALL_OW 310
4831: NOT
4832: IFFALSE 4846
// Say ( JMM , DX2a-JMM-2 ) ;
4834: LD_EXP 1
4838: PPUSH
4839: LD_STRING DX2a-JMM-2
4841: PPUSH
4842: CALL_OW 88
// end ;
4846: PPOPN 4
4848: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4849: LD_INT 1
4851: PPUSH
4852: CALL_OW 255
4856: PUSH
4857: LD_INT 1
4859: EQUAL
4860: PUSH
4861: LD_INT 10
4863: PPUSH
4864: CALL_OW 255
4868: PUSH
4869: LD_INT 1
4871: EQUAL
4872: OR
4873: IFFALSE 4933
4875: GO 4877
4877: DISABLE
// begin DialogueOn ;
4878: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4882: LD_EXP 1
4886: PPUSH
4887: LD_STRING D3-JMM-1
4889: PPUSH
4890: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4894: LD_EXP 9
4898: PPUSH
4899: LD_STRING D3-Pow-1
4901: PPUSH
4902: CALL_OW 94
// if IsOK ( Cyrus ) then
4906: LD_EXP 3
4910: PPUSH
4911: CALL_OW 302
4915: IFFALSE 4929
// Say ( Cyrus , D3-Cyrus-1 ) ;
4917: LD_EXP 3
4921: PPUSH
4922: LD_STRING D3-Cyrus-1
4924: PPUSH
4925: CALL_OW 88
// DialogueOff ;
4929: CALL_OW 7
// end ;
4933: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , i ;
4934: LD_INT 1
4936: PPUSH
4937: CALL_OW 255
4941: PUSH
4942: LD_INT 1
4944: EQUAL
4945: PUSH
4946: LD_INT 10
4948: PPUSH
4949: CALL_OW 255
4953: PUSH
4954: LD_INT 1
4956: EQUAL
4957: AND
4958: IFFALSE 6148
4960: GO 4962
4962: DISABLE
4963: LD_INT 0
4965: PPUSH
4966: PPUSH
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) diff [ JMM ] ;
4967: LD_ADDR_VAR 0 1
4971: PUSH
4972: LD_INT 22
4974: PUSH
4975: LD_INT 1
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: LD_INT 23
4984: PUSH
4985: LD_INT 1
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 25
4994: PUSH
4995: LD_INT 2
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: PUSH
5012: LD_EXP 1
5016: PUSH
5017: EMPTY
5018: LIST
5019: DIFF
5020: ST_TO_ADDR
// DialogueOn ;
5021: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5025: LD_EXP 1
5029: PPUSH
5030: LD_STRING D3a-JMM-1
5032: PPUSH
5033: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5037: LD_EXP 9
5041: PPUSH
5042: LD_STRING D3a-Pow-1
5044: PPUSH
5045: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5049: LD_EXP 1
5053: PPUSH
5054: LD_STRING D3a-JMM-2
5056: PPUSH
5057: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5061: LD_EXP 9
5065: PPUSH
5066: LD_STRING D3a-Pow-2
5068: PPUSH
5069: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5073: LD_EXP 1
5077: PPUSH
5078: LD_STRING D3a-JMM-3
5080: PPUSH
5081: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5085: LD_EXP 9
5089: PPUSH
5090: LD_STRING D3a-Pow-3
5092: PPUSH
5093: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5097: LD_EXP 1
5101: PPUSH
5102: LD_STRING D3a-JMM-4
5104: PPUSH
5105: CALL_OW 88
// DialogueOff ;
5109: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5113: LD_STRING M2
5115: PPUSH
5116: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5120: LD_EXP 1
5124: PPUSH
5125: LD_STRING D3b-JMM-1
5127: PPUSH
5128: CALL_OW 88
// wait ( 0 0$5 ) ;
5132: LD_INT 175
5134: PPUSH
5135: CALL_OW 67
// InGameOn ;
5139: CALL_OW 8
// PrepareRussianHeroes ;
5143: CALL 11229 0 0
// CenterNowOnUnits ( Mikhail ) ;
5147: LD_EXP 8
5151: PPUSH
5152: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5156: LD_EXP 1
5160: PUSH
5161: LD_VAR 0 1
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: PPUSH
5174: LD_EXP 8
5178: PPUSH
5179: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5183: LD_EXP 8
5187: PPUSH
5188: LD_VAR 0 1
5192: PUSH
5193: LD_INT 1
5195: ARRAY
5196: PPUSH
5197: CALL_OW 119
// Say ( Mikhail , D4-Mikh-1 ) ;
5201: LD_EXP 8
5205: PPUSH
5206: LD_STRING D4-Mikh-1
5208: PPUSH
5209: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5213: LD_VAR 0 1
5217: PUSH
5218: LD_INT 1
5220: ARRAY
5221: PPUSH
5222: CALL_OW 258
5226: PUSH
5227: LD_INT 1
5229: EQUAL
5230: IFFALSE 5248
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5232: LD_VAR 0 1
5236: PUSH
5237: LD_INT 1
5239: ARRAY
5240: PPUSH
5241: LD_STRING D4-Sol1-1
5243: PPUSH
5244: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5248: LD_VAR 0 1
5252: PUSH
5253: LD_INT 1
5255: ARRAY
5256: PPUSH
5257: CALL_OW 258
5261: PUSH
5262: LD_INT 2
5264: EQUAL
5265: IFFALSE 5283
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5267: LD_VAR 0 1
5271: PUSH
5272: LD_INT 1
5274: ARRAY
5275: PPUSH
5276: LD_STRING D4-FSol1-1
5278: PPUSH
5279: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5283: LD_EXP 8
5287: PPUSH
5288: LD_STRING D4-Mikh-2
5290: PPUSH
5291: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5295: LD_VAR 0 1
5299: PUSH
5300: LD_INT 1
5302: ARRAY
5303: PPUSH
5304: CALL_OW 258
5308: PUSH
5309: LD_INT 1
5311: EQUAL
5312: IFFALSE 5330
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5314: LD_VAR 0 1
5318: PUSH
5319: LD_INT 1
5321: ARRAY
5322: PPUSH
5323: LD_STRING D4-Sol1-2
5325: PPUSH
5326: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5330: LD_VAR 0 1
5334: PUSH
5335: LD_INT 1
5337: ARRAY
5338: PPUSH
5339: CALL_OW 258
5343: PUSH
5344: LD_INT 2
5346: EQUAL
5347: IFFALSE 5365
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5349: LD_VAR 0 1
5353: PUSH
5354: LD_INT 1
5356: ARRAY
5357: PPUSH
5358: LD_STRING D4-FSol1-2
5360: PPUSH
5361: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5365: LD_EXP 8
5369: PPUSH
5370: LD_STRING D4-Mikh-3
5372: PPUSH
5373: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5377: LD_VAR 0 1
5381: PUSH
5382: LD_INT 1
5384: ARRAY
5385: PPUSH
5386: CALL_OW 258
5390: PUSH
5391: LD_INT 1
5393: EQUAL
5394: IFFALSE 5412
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5396: LD_VAR 0 1
5400: PUSH
5401: LD_INT 1
5403: ARRAY
5404: PPUSH
5405: LD_STRING D4-Sol1-3
5407: PPUSH
5408: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5412: LD_VAR 0 1
5416: PUSH
5417: LD_INT 1
5419: ARRAY
5420: PPUSH
5421: CALL_OW 258
5425: PUSH
5426: LD_INT 2
5428: EQUAL
5429: IFFALSE 5447
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5431: LD_VAR 0 1
5435: PUSH
5436: LD_INT 1
5438: ARRAY
5439: PPUSH
5440: LD_STRING D4-FSol1-3
5442: PPUSH
5443: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5447: LD_EXP 8
5451: PPUSH
5452: LD_STRING D4-Mikh-4
5454: PPUSH
5455: CALL_OW 88
// case query ( Qs1 ) of 1 :
5459: LD_STRING Qs1
5461: PPUSH
5462: CALL_OW 97
5466: PUSH
5467: LD_INT 1
5469: DOUBLE
5470: EQUAL
5471: IFTRUE 5475
5473: GO 5510
5475: POP
// begin InGameOff ;
5476: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5480: LD_INT 1
5482: PPUSH
5483: LD_INT 6
5485: PPUSH
5486: LD_INT 2
5488: PPUSH
5489: LD_INT 1
5491: PPUSH
5492: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5496: LD_EXP 8
5500: PPUSH
5501: LD_INT 17
5503: PPUSH
5504: CALL_OW 113
// end ; 2 :
5508: GO 6132
5510: LD_INT 2
5512: DOUBLE
5513: EQUAL
5514: IFTRUE 5518
5516: GO 6097
5518: POP
// begin repeat wait ( 0 0$1 ) ;
5519: LD_INT 35
5521: PPUSH
5522: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5526: LD_VAR 0 1
5530: PUSH
5531: LD_INT 1
5533: ARRAY
5534: PPUSH
5535: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5539: LD_VAR 0 1
5543: PUSH
5544: LD_INT 1
5546: ARRAY
5547: PPUSH
5548: LD_EXP 1
5552: PPUSH
5553: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5557: LD_EXP 8
5561: PPUSH
5562: LD_EXP 1
5566: PPUSH
5567: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5571: LD_EXP 1
5575: PPUSH
5576: LD_EXP 8
5580: PPUSH
5581: CALL_OW 296
5585: PUSH
5586: LD_INT 5
5588: LESS
5589: IFFALSE 5519
// ComTurnUnit ( Mikhail , JMM ) ;
5591: LD_EXP 8
5595: PPUSH
5596: LD_EXP 1
5600: PPUSH
5601: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5605: LD_EXP 1
5609: PPUSH
5610: LD_STRING D4b-JMM-1
5612: PPUSH
5613: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5617: LD_EXP 8
5621: PPUSH
5622: LD_STRING D4b-Mikh-1
5624: PPUSH
5625: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5629: LD_EXP 1
5633: PPUSH
5634: LD_STRING D4b-JMM-2
5636: PPUSH
5637: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5641: LD_EXP 8
5645: PPUSH
5646: LD_STRING D4b-Mikh-2
5648: PPUSH
5649: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5653: LD_EXP 1
5657: PPUSH
5658: LD_STRING D4b-JMM-3
5660: PPUSH
5661: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5665: LD_EXP 8
5669: PPUSH
5670: LD_STRING D4b-Mikh-3
5672: PPUSH
5673: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5677: LD_EXP 1
5681: PPUSH
5682: LD_STRING D4b-JMM-4
5684: PPUSH
5685: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5689: LD_EXP 8
5693: PPUSH
5694: LD_STRING D4b-Mikh-4
5696: PPUSH
5697: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5701: LD_EXP 1
5705: PPUSH
5706: LD_STRING D4b-JMM-5
5708: PPUSH
5709: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5713: LD_EXP 8
5717: PPUSH
5718: LD_STRING D4b-Mikh-5
5720: PPUSH
5721: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5725: LD_EXP 1
5729: PPUSH
5730: LD_STRING D4b-JMM-6
5732: PPUSH
5733: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5737: LD_EXP 8
5741: PPUSH
5742: LD_STRING D4b-Mikh-6
5744: PPUSH
5745: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5749: LD_EXP 1
5753: PPUSH
5754: LD_STRING D4b-JMM-7
5756: PPUSH
5757: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5761: LD_EXP 8
5765: PPUSH
5766: LD_STRING D4b-Mikh-7
5768: PPUSH
5769: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5773: LD_VAR 0 1
5777: PUSH
5778: LD_INT 1
5780: ARRAY
5781: PPUSH
5782: CALL_OW 258
5786: PUSH
5787: LD_INT 1
5789: EQUAL
5790: IFFALSE 5808
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5792: LD_VAR 0 1
5796: PUSH
5797: LD_INT 1
5799: ARRAY
5800: PPUSH
5801: LD_STRING D4b-Sol1-7
5803: PPUSH
5804: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5808: LD_VAR 0 1
5812: PUSH
5813: LD_INT 1
5815: ARRAY
5816: PPUSH
5817: CALL_OW 258
5821: PUSH
5822: LD_INT 2
5824: EQUAL
5825: IFFALSE 5843
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5827: LD_VAR 0 1
5831: PUSH
5832: LD_INT 1
5834: ARRAY
5835: PPUSH
5836: LD_STRING D4b-FSol1-7
5838: PPUSH
5839: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5843: LD_EXP 1
5847: PPUSH
5848: LD_STRING D4b-JMM-8
5850: PPUSH
5851: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5855: LD_VAR 0 1
5859: PUSH
5860: LD_INT 1
5862: ARRAY
5863: PPUSH
5864: CALL_OW 258
5868: PUSH
5869: LD_INT 1
5871: EQUAL
5872: IFFALSE 5890
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5874: LD_VAR 0 1
5878: PUSH
5879: LD_INT 1
5881: ARRAY
5882: PPUSH
5883: LD_STRING D4b-Sol1-8
5885: PPUSH
5886: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5890: LD_VAR 0 1
5894: PUSH
5895: LD_INT 1
5897: ARRAY
5898: PPUSH
5899: CALL_OW 258
5903: PUSH
5904: LD_INT 2
5906: EQUAL
5907: IFFALSE 5925
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
5909: LD_VAR 0 1
5913: PUSH
5914: LD_INT 1
5916: ARRAY
5917: PPUSH
5918: LD_STRING D4b-FSol1-8
5920: PPUSH
5921: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
5925: LD_EXP 1
5929: PPUSH
5930: LD_STRING D4b-JMM-9
5932: PPUSH
5933: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
5937: LD_EXP 8
5941: PPUSH
5942: LD_INT 1
5944: PPUSH
5945: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5949: LD_ADDR_VAR 0 2
5953: PUSH
5954: LD_INT 22
5956: PUSH
5957: LD_INT 1
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: EMPTY
5965: LIST
5966: PPUSH
5967: CALL_OW 69
5971: PUSH
5972: FOR_IN
5973: IFFALSE 5986
// ComFree ( i ) ;
5975: LD_VAR 0 2
5979: PPUSH
5980: CALL_OW 139
5984: GO 5972
5986: POP
5987: POP
// repeat wait ( 0 0$1 ) ;
5988: LD_INT 35
5990: PPUSH
5991: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
5995: LD_EXP 8
5999: PPUSH
6000: CALL_OW 87
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
6004: LD_EXP 8
6008: PPUSH
6009: LD_INT 1
6011: PPUSH
6012: CALL_OW 296
6016: PUSH
6017: LD_EXP 8
6021: PPUSH
6022: LD_INT 10
6024: PPUSH
6025: CALL_OW 296
6029: LESS
6030: IFFALSE 6046
// begin ComEnterUnit ( Mikhail , dep1 ) ;
6032: LD_EXP 8
6036: PPUSH
6037: LD_INT 1
6039: PPUSH
6040: CALL_OW 120
// end else
6044: GO 6058
// begin ComEnterUnit ( Mikhail , dep2 ) ;
6046: LD_EXP 8
6050: PPUSH
6051: LD_INT 10
6053: PPUSH
6054: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
6058: LD_EXP 8
6062: PPUSH
6063: CALL_OW 310
6067: IFFALSE 5988
// mikhailDepot = IsInUnit ( Mikhail ) ;
6069: LD_ADDR_EXP 23
6073: PUSH
6074: LD_EXP 8
6078: PPUSH
6079: CALL_OW 310
6083: ST_TO_ADDR
// InGameOff ;
6084: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6088: LD_STRING M3
6090: PPUSH
6091: CALL_OW 337
// end ; 3 :
6095: GO 6132
6097: LD_INT 3
6099: DOUBLE
6100: EQUAL
6101: IFTRUE 6105
6103: GO 6131
6105: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6106: LD_EXP 8
6110: PPUSH
6111: LD_INT 17
6113: PPUSH
6114: CALL_OW 113
// wait ( 0 0$3 ) ;
6118: LD_INT 105
6120: PPUSH
6121: CALL_OW 67
// InGameOff ;
6125: CALL_OW 9
// end ; end ;
6129: GO 6132
6131: POP
// PrepareTigers ;
6132: CALL 13847 0 0
// RussianTrap ;
6136: CALL 9863 0 0
// tigersRespawn = 1 ;
6140: LD_ADDR_EXP 29
6144: PUSH
6145: LD_INT 1
6147: ST_TO_ADDR
// end ;
6148: PPOPN 2
6150: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6151: LD_INT 1
6153: PPUSH
6154: CALL_OW 255
6158: PUSH
6159: LD_INT 1
6161: EQUAL
6162: PUSH
6163: LD_INT 10
6165: PPUSH
6166: CALL_OW 255
6170: PUSH
6171: LD_INT 1
6173: EQUAL
6174: AND
6175: PUSH
6176: LD_INT 1
6178: PPUSH
6179: CALL_OW 274
6183: PPUSH
6184: LD_INT 1
6186: PPUSH
6187: CALL_OW 275
6191: PUSH
6192: LD_INT 100
6194: GREATEREQUAL
6195: AND
6196: IFFALSE 6359
6198: GO 6200
6200: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6201: LD_INT 2100
6203: PPUSH
6204: LD_INT 4200
6206: PPUSH
6207: CALL_OW 12
6211: PUSH
6212: LD_INT 1050
6214: PLUS
6215: PPUSH
6216: CALL_OW 67
// PrepareCargoBays ;
6220: CALL 12345 0 0
// cargoRespawn = 1 ;
6224: LD_ADDR_EXP 28
6228: PUSH
6229: LD_INT 1
6231: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6232: LD_EXP 15
6236: PUSH
6237: LD_EXP 16
6241: PUSH
6242: LD_EXP 17
6246: PUSH
6247: LD_EXP 18
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: PPUSH
6258: LD_INT 36
6260: PPUSH
6261: LD_INT 13
6263: PPUSH
6264: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6268: LD_EXP 15
6272: PUSH
6273: LD_EXP 16
6277: PUSH
6278: LD_EXP 17
6282: PUSH
6283: LD_EXP 18
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: PPUSH
6294: LD_INT 40
6296: PPUSH
6297: LD_INT 20
6299: PPUSH
6300: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6304: LD_EXP 15
6308: PUSH
6309: LD_EXP 16
6313: PUSH
6314: LD_EXP 17
6318: PUSH
6319: LD_EXP 18
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: PPUSH
6330: LD_INT 53
6332: PPUSH
6333: LD_INT 16
6335: PPUSH
6336: CALL_OW 171
// wait ( 0 0$5 ) ;
6340: LD_INT 175
6342: PPUSH
6343: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6347: LD_EXP 17
6351: PPUSH
6352: LD_STRING D5-Rus2-1
6354: PPUSH
6355: CALL_OW 88
// end ;
6359: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6360: LD_EXP 28
6364: PUSH
6365: LD_INT 1
6367: EQUAL
6368: IFFALSE 6558
6370: GO 6372
6372: DISABLE
6373: LD_INT 0
6375: PPUSH
6376: PPUSH
6377: PPUSH
6378: PPUSH
// begin enable ;
6379: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6380: LD_ADDR_VAR 0 3
6384: PUSH
6385: LD_INT 22
6387: PUSH
6388: LD_INT 3
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 21
6397: PUSH
6398: LD_INT 2
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 34
6407: PUSH
6408: LD_INT 51
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: PPUSH
6420: CALL_OW 69
6424: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
6425: LD_ADDR_VAR 0 4
6429: PUSH
6430: LD_INT 22
6432: PUSH
6433: LD_INT 1
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: PUSH
6440: LD_INT 23
6442: PUSH
6443: LD_INT 1
6445: PUSH
6446: EMPTY
6447: LIST
6448: LIST
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PPUSH
6454: CALL_OW 69
6458: ST_TO_ADDR
// for i in tmp1 do
6459: LD_ADDR_VAR 0 1
6463: PUSH
6464: LD_VAR 0 3
6468: PUSH
6469: FOR_IN
6470: IFFALSE 6556
// begin for j in tmp2 do
6472: LD_ADDR_VAR 0 2
6476: PUSH
6477: LD_VAR 0 4
6481: PUSH
6482: FOR_IN
6483: IFFALSE 6552
// begin if GetDistUnits ( i , j ) < 7 then
6485: LD_VAR 0 1
6489: PPUSH
6490: LD_VAR 0 2
6494: PPUSH
6495: CALL_OW 296
6499: PUSH
6500: LD_INT 7
6502: LESS
6503: IFFALSE 6550
// begin disable ;
6505: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6506: LD_EXP 15
6510: PUSH
6511: LD_EXP 16
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: PPUSH
6520: LD_INT 7
6522: PPUSH
6523: LD_INT 9
6525: PPUSH
6526: CALL_OW 111
// Say ( driver1 , D5-Rus2-1a ) ;
6530: LD_EXP 17
6534: PPUSH
6535: LD_STRING D5-Rus2-1a
6537: PPUSH
6538: CALL_OW 88
// cargoEscape = 1 ;
6542: LD_ADDR_EXP 20
6546: PUSH
6547: LD_INT 1
6549: ST_TO_ADDR
// end ; end ;
6550: GO 6482
6552: POP
6553: POP
// end ;
6554: GO 6469
6556: POP
6557: POP
// end ;
6558: PPOPN 4
6560: END
// every 0 0$1 trigger cargoEscape > 0 do
6561: LD_EXP 20
6565: PUSH
6566: LD_INT 0
6568: GREATER
6569: IFFALSE 6695
6571: GO 6573
6573: DISABLE
// begin enable ;
6574: ENABLE
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6575: LD_EXP 15
6579: PPUSH
6580: LD_INT 13
6582: PPUSH
6583: CALL_OW 308
6587: PUSH
6588: LD_EXP 17
6592: PPUSH
6593: LD_INT 13
6595: PPUSH
6596: CALL_OW 308
6600: OR
6601: IFFALSE 6635
// begin RemoveUnit ( cargo1 ) ;
6603: LD_EXP 15
6607: PPUSH
6608: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6612: LD_EXP 17
6616: PPUSH
6617: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6621: LD_ADDR_EXP 20
6625: PUSH
6626: LD_EXP 20
6630: PUSH
6631: LD_INT 1
6633: PLUS
6634: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6635: LD_EXP 16
6639: PPUSH
6640: LD_INT 13
6642: PPUSH
6643: CALL_OW 308
6647: PUSH
6648: LD_EXP 18
6652: PPUSH
6653: LD_INT 13
6655: PPUSH
6656: CALL_OW 308
6660: OR
6661: IFFALSE 6695
// begin RemoveUnit ( cargo2 ) ;
6663: LD_EXP 16
6667: PPUSH
6668: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6672: LD_EXP 18
6676: PPUSH
6677: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6681: LD_ADDR_EXP 20
6685: PUSH
6686: LD_EXP 20
6690: PUSH
6691: LD_INT 1
6693: PLUS
6694: ST_TO_ADDR
// end ; end ;
6695: END
// every 0 0$1 trigger cargoEscape > 1 do
6696: LD_EXP 20
6700: PUSH
6701: LD_INT 1
6703: GREATER
6704: IFFALSE 6868
6706: GO 6708
6708: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
6709: LD_INT 4
6711: PPUSH
6712: LD_INT 1
6714: PPUSH
6715: LD_INT 1
6717: PPUSH
6718: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6722: LD_INT 31
6724: PPUSH
6725: LD_INT 1
6727: PPUSH
6728: LD_INT 1
6730: PPUSH
6731: CALL_OW 324
// if IsOK ( Jerry ) then
6735: LD_EXP 7
6739: PPUSH
6740: CALL_OW 302
6744: IFFALSE 6760
// begin Say ( Jerry , D5a-Sol1-1 ) ;
6746: LD_EXP 7
6750: PPUSH
6751: LD_STRING D5a-Sol1-1
6753: PPUSH
6754: CALL_OW 88
// end else
6758: GO 6856
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
6760: LD_INT 22
6762: PUSH
6763: LD_INT 1
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: LD_INT 23
6772: PUSH
6773: LD_INT 1
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 26
6782: PUSH
6783: LD_INT 1
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: LIST
6794: PPUSH
6795: CALL_OW 69
6799: PUSH
6800: LD_INT 2
6802: PPUSH
6803: LD_INT 22
6805: PUSH
6806: LD_INT 1
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 23
6815: PUSH
6816: LD_INT 1
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: LD_INT 26
6825: PUSH
6826: LD_INT 1
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: PPUSH
6838: CALL_OW 69
6842: PPUSH
6843: CALL_OW 12
6847: ARRAY
6848: PPUSH
6849: LD_STRING D5a-Sol1-1
6851: PPUSH
6852: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6856: LD_EXP 1
6860: PPUSH
6861: LD_STRING D5a-JMM-1
6863: PPUSH
6864: CALL_OW 88
// end ;
6868: END
// every 0 0$1 trigger GetLives ( dep1 ) < 1000 or GetLives ( dep2 ) < 1000 do
6869: LD_INT 1
6871: PPUSH
6872: CALL_OW 256
6876: PUSH
6877: LD_INT 1000
6879: LESS
6880: PUSH
6881: LD_INT 10
6883: PPUSH
6884: CALL_OW 256
6888: PUSH
6889: LD_INT 1000
6891: LESS
6892: OR
6893: IFFALSE 6910
6895: GO 6897
6897: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
6898: LD_EXP 1
6902: PPUSH
6903: LD_STRING D8-JMM-1
6905: PPUSH
6906: CALL_OW 88
// end ;
6910: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6911: LD_EXP 8
6915: PPUSH
6916: CALL_OW 310
6920: PUSH
6921: LD_INT 1
6923: EQUAL
6924: PUSH
6925: LD_EXP 22
6929: PUSH
6930: LD_INT 3
6932: EQUAL
6933: NOT
6934: AND
6935: IFFALSE 6957
6937: GO 6939
6939: DISABLE
// begin mikhailInBase = 1 ;
6940: LD_ADDR_EXP 22
6944: PUSH
6945: LD_INT 1
6947: ST_TO_ADDR
// mikhailStatus = 1 ;
6948: LD_ADDR_EXP 21
6952: PUSH
6953: LD_INT 1
6955: ST_TO_ADDR
// enable ;
6956: ENABLE
// end ;
6957: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
6958: LD_EXP 8
6962: PPUSH
6963: LD_INT 25
6965: PPUSH
6966: CALL_OW 308
6970: PUSH
6971: LD_EXP 22
6975: PUSH
6976: LD_INT 1
6978: EQUAL
6979: AND
6980: PUSH
6981: LD_EXP 8
6985: PPUSH
6986: CALL_OW 255
6990: PUSH
6991: LD_INT 1
6993: EQUAL
6994: AND
6995: IFFALSE 7325
6997: GO 6999
6999: DISABLE
// begin enable ;
7000: ENABLE
// case query ( QMikh2 ) of 1 :
7001: LD_STRING QMikh2
7003: PPUSH
7004: CALL_OW 97
7008: PUSH
7009: LD_INT 1
7011: DOUBLE
7012: EQUAL
7013: IFTRUE 7017
7015: GO 7084
7017: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7018: LD_INT 1
7020: PPUSH
7021: LD_INT 6
7023: PPUSH
7024: LD_INT 2
7026: PPUSH
7027: LD_INT 1
7029: PPUSH
7030: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7034: LD_EXP 8
7038: PPUSH
7039: LD_INT 6
7041: PPUSH
7042: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7046: LD_EXP 8
7050: PPUSH
7051: CALL_OW 122
// wait ( 0 0$1 ) ;
7055: LD_INT 35
7057: PPUSH
7058: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7062: LD_EXP 8
7066: PPUSH
7067: LD_INT 17
7069: PPUSH
7070: CALL_OW 113
// mikhailInbase = 0 ;
7074: LD_ADDR_EXP 22
7078: PUSH
7079: LD_INT 0
7081: ST_TO_ADDR
// end ; 2 :
7082: GO 7325
7084: LD_INT 2
7086: DOUBLE
7087: EQUAL
7088: IFTRUE 7092
7090: GO 7265
7092: POP
// begin mikhailInBase = 2 ;
7093: LD_ADDR_EXP 22
7097: PUSH
7098: LD_INT 2
7100: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7101: LD_EXP 8
7105: PPUSH
7106: LD_INT 6
7108: PPUSH
7109: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7113: LD_EXP 8
7117: PPUSH
7118: CALL_OW 122
// wait ( 0 0$1 ) ;
7122: LD_INT 35
7124: PPUSH
7125: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7129: LD_EXP 8
7133: PPUSH
7134: LD_EXP 8
7138: PPUSH
7139: CALL_OW 250
7143: PUSH
7144: LD_INT 2
7146: PLUS
7147: PPUSH
7148: LD_EXP 8
7152: PPUSH
7153: CALL_OW 251
7157: PUSH
7158: LD_INT 2
7160: PLUS
7161: PPUSH
7162: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7166: LD_EXP 8
7170: PPUSH
7171: LD_EXP 8
7175: PPUSH
7176: CALL_OW 250
7180: PUSH
7181: LD_INT 1
7183: PLUS
7184: PPUSH
7185: LD_EXP 8
7189: PPUSH
7190: CALL_OW 251
7194: PUSH
7195: LD_INT 2
7197: PLUS
7198: PPUSH
7199: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7203: LD_EXP 8
7207: PPUSH
7208: LD_EXP 8
7212: PPUSH
7213: CALL_OW 250
7217: PUSH
7218: LD_INT 2
7220: PLUS
7221: PPUSH
7222: LD_EXP 8
7226: PPUSH
7227: CALL_OW 251
7231: PPUSH
7232: CALL_OW 171
// wait ( 0 0$5 ) ;
7236: LD_INT 175
7238: PPUSH
7239: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7243: LD_EXP 8
7247: PPUSH
7248: LD_INT 25
7250: PPUSH
7251: CALL_OW 113
// mikhailInBase = 4 ;
7255: LD_ADDR_EXP 22
7259: PUSH
7260: LD_INT 4
7262: ST_TO_ADDR
// end ; 3 :
7263: GO 7325
7265: LD_INT 3
7267: DOUBLE
7268: EQUAL
7269: IFTRUE 7273
7271: GO 7324
7273: POP
// begin SetSide ( Mikhail , 6 ) ;
7274: LD_EXP 8
7278: PPUSH
7279: LD_INT 6
7281: PPUSH
7282: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7286: LD_EXP 8
7290: PPUSH
7291: CALL_OW 122
// wait ( 0 0$1 ) ;
7295: LD_INT 35
7297: PPUSH
7298: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7302: LD_EXP 8
7306: PPUSH
7307: LD_INT 17
7309: PPUSH
7310: CALL_OW 113
// mikhailInbase = 3 ;
7314: LD_ADDR_EXP 22
7318: PUSH
7319: LD_INT 3
7321: ST_TO_ADDR
// end ; end ;
7322: GO 7325
7324: POP
// end ;
7325: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7326: LD_EXP 8
7330: PPUSH
7331: LD_INT 25
7333: PPUSH
7334: CALL_OW 308
7338: PUSH
7339: LD_EXP 22
7343: PUSH
7344: LD_INT 4
7346: EQUAL
7347: AND
7348: IFFALSE 7446
7350: GO 7352
7352: DISABLE
// begin enable ;
7353: ENABLE
// SetSide ( Mikhail , 1 ) ;
7354: LD_EXP 8
7358: PPUSH
7359: LD_INT 1
7361: PPUSH
7362: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7366: LD_INT 35
7368: PPUSH
7369: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
7373: LD_EXP 8
7377: PPUSH
7378: LD_INT 1
7380: PPUSH
7381: CALL_OW 296
7385: PUSH
7386: LD_EXP 8
7390: PPUSH
7391: LD_INT 10
7393: PPUSH
7394: CALL_OW 296
7398: LESS
7399: IFFALSE 7415
// begin ComEnterUnit ( Mikhail , dep1 ) ;
7401: LD_EXP 8
7405: PPUSH
7406: LD_INT 1
7408: PPUSH
7409: CALL_OW 120
// end else
7413: GO 7427
// begin ComEnterUnit ( Mikhail , dep2 ) ;
7415: LD_EXP 8
7419: PPUSH
7420: LD_INT 10
7422: PPUSH
7423: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
7427: LD_EXP 8
7431: PPUSH
7432: CALL_OW 310
7436: IFFALSE 7366
// mikhailInBase = 1 ;
7438: LD_ADDR_EXP 22
7442: PUSH
7443: LD_INT 1
7445: ST_TO_ADDR
// end ;
7446: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7447: LD_EXP 8
7451: PPUSH
7452: CALL_OW 310
7456: PUSH
7457: LD_EXP 22
7461: PUSH
7462: LD_INT 3
7464: EQUAL
7465: NOT
7466: AND
7467: IFFALSE 7593
7469: GO 7471
7471: DISABLE
// begin enable ;
7472: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7473: LD_INT 22
7475: PUSH
7476: LD_INT 1
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 21
7485: PUSH
7486: LD_INT 1
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 91
7495: PUSH
7496: LD_EXP 8
7500: PPUSH
7501: CALL_OW 310
7505: PUSH
7506: LD_INT 10
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: LIST
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: PPUSH
7519: CALL_OW 69
7523: PUSH
7524: LD_INT 1
7526: EQUAL
7527: IFFALSE 7593
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7529: LD_INT 1
7531: PPUSH
7532: LD_INT 6
7534: PPUSH
7535: LD_INT 2
7537: PPUSH
7538: LD_INT 1
7540: PPUSH
7541: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7545: LD_EXP 8
7549: PPUSH
7550: LD_INT 6
7552: PPUSH
7553: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7557: LD_EXP 8
7561: PPUSH
7562: CALL_OW 122
// wait ( 0 0$1 ) ;
7566: LD_INT 35
7568: PPUSH
7569: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7573: LD_EXP 8
7577: PPUSH
7578: LD_INT 17
7580: PPUSH
7581: CALL_OW 113
// mikhailStatus = 3 ;
7585: LD_ADDR_EXP 21
7589: PUSH
7590: LD_INT 3
7592: ST_TO_ADDR
// end ; end ;
7593: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7594: LD_EXP 1
7598: PPUSH
7599: LD_EXP 23
7603: PPUSH
7604: CALL_OW 296
7608: PUSH
7609: LD_INT 5
7611: LESS
7612: PUSH
7613: LD_EXP 21
7617: PUSH
7618: LD_INT 3
7620: EQUAL
7621: AND
7622: PUSH
7623: LD_EXP 22
7627: PUSH
7628: LD_INT 3
7630: EQUAL
7631: NOT
7632: AND
7633: IFFALSE 7849
7635: GO 7637
7637: DISABLE
7638: LD_INT 0
7640: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
7641: LD_ADDR_VAR 0 1
7645: PUSH
7646: LD_INT 22
7648: PUSH
7649: LD_INT 1
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: LD_INT 21
7658: PUSH
7659: LD_INT 1
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PUSH
7666: LD_INT 26
7668: PUSH
7669: LD_INT 1
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: LIST
7680: PPUSH
7681: CALL_OW 69
7685: PUSH
7686: LD_EXP 1
7690: PUSH
7691: EMPTY
7692: LIST
7693: DIFF
7694: ST_TO_ADDR
// DialogueOn ;
7695: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7699: LD_EXP 1
7703: PPUSH
7704: LD_STRING D7-JMM-1
7706: PPUSH
7707: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7711: LD_VAR 0 1
7715: PUSH
7716: LD_INT 1
7718: ARRAY
7719: PPUSH
7720: LD_STRING D7-Sol1-1
7722: PPUSH
7723: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7727: LD_EXP 1
7731: PPUSH
7732: LD_STRING D7-JMM-2
7734: PPUSH
7735: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7739: LD_VAR 0 1
7743: PUSH
7744: LD_INT 1
7746: ARRAY
7747: PPUSH
7748: LD_STRING D7-Sol1-2
7750: PPUSH
7751: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7755: LD_EXP 1
7759: PPUSH
7760: LD_STRING D7-JMM-3
7762: PPUSH
7763: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7767: LD_VAR 0 1
7771: PUSH
7772: LD_INT 1
7774: ARRAY
7775: PPUSH
7776: LD_STRING D7-Sol1-3
7778: PPUSH
7779: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7783: LD_EXP 3
7787: PPUSH
7788: CALL_OW 302
7792: PUSH
7793: LD_EXP 4
7797: PPUSH
7798: CALL_OW 302
7802: AND
7803: IFFALSE 7845
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7805: LD_EXP 3
7809: PPUSH
7810: LD_STRING D7-Cyrus-3
7812: PPUSH
7813: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7817: LD_VAR 0 1
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PPUSH
7826: LD_STRING D7-Sol1-4
7828: PPUSH
7829: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7833: LD_EXP 4
7837: PPUSH
7838: LD_STRING D7-Lisa-4
7840: PPUSH
7841: CALL_OW 88
// end ; DialogueOff ;
7845: CALL_OW 7
// end ;
7849: PPOPN 1
7851: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7852: LD_EXP 8
7856: PPUSH
7857: CALL_OW 303
7861: PUSH
7862: LD_EXP 21
7866: PUSH
7867: LD_INT 3
7869: EQUAL
7870: AND
7871: IFFALSE 7885
7873: GO 7875
7875: DISABLE
// begin enable ;
7876: ENABLE
// mikhailStatus = 2 ;
7877: LD_ADDR_EXP 21
7881: PUSH
7882: LD_INT 2
7884: ST_TO_ADDR
// end ;
7885: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7886: LD_EXP 8
7890: PPUSH
7891: LD_INT 17
7893: PPUSH
7894: CALL_OW 308
7898: PUSH
7899: LD_EXP 8
7903: PPUSH
7904: CALL_OW 255
7908: PUSH
7909: LD_INT 6
7911: EQUAL
7912: AND
7913: IFFALSE 7946
7915: GO 7917
7917: DISABLE
// begin if not mikhailInBase = 3 then
7918: LD_EXP 22
7922: PUSH
7923: LD_INT 3
7925: EQUAL
7926: NOT
7927: IFFALSE 7937
// mikhailStatus = 3 ;
7929: LD_ADDR_EXP 21
7933: PUSH
7934: LD_INT 3
7936: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
7937: LD_EXP 8
7941: PPUSH
7942: CALL_OW 64
// end ;
7946: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
7947: LD_EXP 21
7951: PUSH
7952: LD_INT 3
7954: EQUAL
7955: PUSH
7956: LD_EXP 8
7960: PPUSH
7961: CALL_OW 255
7965: PUSH
7966: LD_INT 6
7968: EQUAL
7969: AND
7970: IFFALSE 8136
7972: GO 7974
7974: DISABLE
7975: LD_INT 0
7977: PPUSH
7978: PPUSH
// begin enable ;
7979: ENABLE
// if IsOk ( Mikhail ) then
7980: LD_EXP 8
7984: PPUSH
7985: CALL_OW 302
7989: IFFALSE 8136
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
7991: LD_ADDR_VAR 0 2
7995: PUSH
7996: LD_EXP 8
8000: PPUSH
8001: LD_INT 22
8003: PUSH
8004: LD_INT 1
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: PUSH
8011: LD_INT 21
8013: PUSH
8014: LD_INT 1
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PPUSH
8025: CALL_OW 69
8029: PPUSH
8030: CALL 10019 0 2
8034: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8035: LD_VAR 0 2
8039: PPUSH
8040: LD_EXP 8
8044: PPUSH
8045: CALL_OW 296
8049: PUSH
8050: LD_INT 8
8052: LESS
8053: IFFALSE 8136
// begin if GetSex ( attacker ) = sex_male then
8055: LD_VAR 0 2
8059: PPUSH
8060: CALL_OW 258
8064: PUSH
8065: LD_INT 1
8067: EQUAL
8068: IFFALSE 8104
// begin disable ;
8070: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8071: LD_VAR 0 2
8075: PPUSH
8076: LD_STRING D7a-Sol1-1
8078: PPUSH
8079: CALL_OW 88
// wait ( 0 0$2 ) ;
8083: LD_INT 70
8085: PPUSH
8086: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_STRING D7a-Sol1-1a
8097: PPUSH
8098: CALL_OW 88
// end else
8102: GO 8136
// begin disable ;
8104: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8105: LD_VAR 0 2
8109: PPUSH
8110: LD_STRING D7a-FSol1-1
8112: PPUSH
8113: CALL_OW 88
// wait ( 0 0$2 ) ;
8117: LD_INT 70
8119: PPUSH
8120: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8124: LD_VAR 0 2
8128: PPUSH
8129: LD_STRING D7a-FSol1-1a
8131: PPUSH
8132: CALL_OW 88
// end ; end ; end ; end ;
8136: PPOPN 2
8138: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8139: LD_EXP 27
8143: PUSH
8144: LD_INT 1
8146: EQUAL
8147: PUSH
8148: LD_INT 22
8150: PPUSH
8151: LD_INT 22
8153: PUSH
8154: LD_INT 3
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: LD_INT 21
8163: PUSH
8164: LD_INT 1
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: PPUSH
8175: CALL_OW 70
8179: PUSH
8180: LD_INT 2
8182: GREATER
8183: AND
8184: PUSH
8185: LD_INT 22
8187: PPUSH
8188: LD_INT 22
8190: PUSH
8191: LD_INT 1
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PUSH
8198: LD_INT 2
8200: PUSH
8201: LD_INT 21
8203: PUSH
8204: LD_INT 1
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: PUSH
8211: LD_INT 59
8213: PUSH
8214: EMPTY
8215: LIST
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: PPUSH
8226: CALL_OW 70
8230: PUSH
8231: LD_INT 0
8233: EQUAL
8234: AND
8235: IFFALSE 8250
8237: GO 8239
8239: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8240: LD_INT 1
8242: PPUSH
8243: LD_INT 3
8245: PPUSH
8246: CALL_OW 235
// end ;
8250: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8251: LD_EXP 29
8255: PUSH
8256: LD_INT 1
8258: EQUAL
8259: PUSH
8260: LD_INT 22
8262: PUSH
8263: LD_INT 0
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: LD_INT 25
8272: PUSH
8273: LD_INT 14
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PPUSH
8284: CALL_OW 69
8288: PUSH
8289: LD_INT 0
8291: EQUAL
8292: AND
8293: IFFALSE 8387
8295: GO 8297
8297: DISABLE
8298: LD_INT 0
8300: PPUSH
8301: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8302: LD_ADDR_VAR 0 2
8306: PUSH
8307: LD_INT 22
8309: PUSH
8310: LD_INT 1
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 21
8319: PUSH
8320: LD_INT 1
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: PUSH
8327: LD_INT 23
8329: PUSH
8330: LD_INT 1
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: PPUSH
8342: CALL_OW 69
8346: ST_TO_ADDR
// for i in tmp do
8347: LD_ADDR_VAR 0 1
8351: PUSH
8352: LD_VAR 0 2
8356: PUSH
8357: FOR_IN
8358: IFFALSE 8385
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8360: LD_VAR 0 1
8364: PPUSH
8365: LD_INT 1
8367: PPUSH
8368: LD_INT 4
8370: PPUSH
8371: CALL_OW 12
8375: PPUSH
8376: LD_INT 300
8378: PPUSH
8379: CALL_OW 492
// end ;
8383: GO 8357
8385: POP
8386: POP
// end ; end_of_file
8387: PPOPN 2
8389: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8390: LD_INT 0
8392: PPUSH
8393: PPUSH
8394: PPUSH
8395: PPUSH
// for i = 1 to count do
8396: LD_ADDR_VAR 0 8
8400: PUSH
8401: DOUBLE
8402: LD_INT 1
8404: DEC
8405: ST_TO_ADDR
8406: LD_VAR 0 6
8410: PUSH
8411: FOR_TO
8412: IFFALSE 8493
// begin uc_side = side ;
8414: LD_ADDR_OWVAR 20
8418: PUSH
8419: LD_VAR 0 1
8423: ST_TO_ADDR
// uc_nation = nation ;
8424: LD_ADDR_OWVAR 21
8428: PUSH
8429: LD_VAR 0 2
8433: ST_TO_ADDR
// hc_gallery =  ;
8434: LD_ADDR_OWVAR 33
8438: PUSH
8439: LD_STRING 
8441: ST_TO_ADDR
// hc_name =  ;
8442: LD_ADDR_OWVAR 26
8446: PUSH
8447: LD_STRING 
8449: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8450: LD_INT 0
8452: PPUSH
8453: LD_VAR 0 5
8457: PPUSH
8458: LD_VAR 0 4
8462: PPUSH
8463: CALL_OW 380
// un = CreateHuman ;
8467: LD_ADDR_VAR 0 10
8471: PUSH
8472: CALL_OW 44
8476: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8477: LD_VAR 0 10
8481: PPUSH
8482: LD_VAR 0 3
8486: PPUSH
8487: CALL_OW 52
// end ;
8491: GO 8411
8493: POP
8494: POP
// end ;
8495: LD_VAR 0 7
8499: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8500: LD_INT 0
8502: PPUSH
8503: PPUSH
8504: PPUSH
// uc_side := GetSide ( b ) ;
8505: LD_ADDR_OWVAR 20
8509: PUSH
8510: LD_VAR 0 2
8514: PPUSH
8515: CALL_OW 255
8519: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8520: LD_ADDR_OWVAR 21
8524: PUSH
8525: LD_VAR 0 2
8529: PPUSH
8530: CALL_OW 248
8534: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8535: LD_INT 0
8537: PPUSH
8538: LD_INT 1
8540: PPUSH
8541: LD_VAR 0 1
8545: PPUSH
8546: CALL_OW 380
// un = CreateHuman ;
8550: LD_ADDR_VAR 0 4
8554: PUSH
8555: CALL_OW 44
8559: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8560: LD_ADDR_VAR 0 5
8564: PUSH
8565: LD_VAR 0 2
8569: PPUSH
8570: CALL_OW 254
8574: PUSH
8575: LD_INT 3
8577: MINUS
8578: ST_TO_ADDR
// if dir < 0 then
8579: LD_VAR 0 5
8583: PUSH
8584: LD_INT 0
8586: LESS
8587: IFFALSE 8603
// dir := 6 + dir ;
8589: LD_ADDR_VAR 0 5
8593: PUSH
8594: LD_INT 6
8596: PUSH
8597: LD_VAR 0 5
8601: PLUS
8602: ST_TO_ADDR
// SetDir ( un , dir ) ;
8603: LD_VAR 0 4
8607: PPUSH
8608: LD_VAR 0 5
8612: PPUSH
8613: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8617: LD_VAR 0 4
8621: PPUSH
8622: LD_VAR 0 2
8626: PPUSH
8627: CALL_OW 52
// end ;
8631: LD_VAR 0 3
8635: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8636: LD_INT 0
8638: PPUSH
8639: PPUSH
8640: PPUSH
8641: PPUSH
8642: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8643: LD_ADDR_VAR 0 7
8647: PUSH
8648: LD_INT 22
8650: PUSH
8651: LD_VAR 0 1
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PUSH
8660: LD_INT 25
8662: PUSH
8663: LD_INT 2
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: PUSH
8670: LD_INT 24
8672: PUSH
8673: LD_INT 1000
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: LIST
8684: PPUSH
8685: CALL_OW 69
8689: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8690: LD_ADDR_VAR 0 5
8694: PUSH
8695: LD_VAR 0 3
8699: PPUSH
8700: LD_INT 22
8702: PUSH
8703: LD_VAR 0 1
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PUSH
8712: LD_INT 21
8714: PUSH
8715: LD_INT 3
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PUSH
8722: LD_INT 3
8724: PUSH
8725: LD_INT 24
8727: PUSH
8728: LD_INT 1000
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: PPUSH
8747: CALL_OW 70
8751: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8752: LD_VAR 0 5
8756: PUSH
8757: LD_INT 0
8759: GREATER
8760: PUSH
8761: LD_VAR 0 7
8765: PUSH
8766: LD_INT 0
8768: GREATER
8769: AND
8770: IFFALSE 8836
// begin for i in engineerOk_list do
8772: LD_ADDR_VAR 0 6
8776: PUSH
8777: LD_VAR 0 7
8781: PUSH
8782: FOR_IN
8783: IFFALSE 8834
// begin for j in buildings_list do
8785: LD_ADDR_VAR 0 8
8789: PUSH
8790: LD_VAR 0 5
8794: PUSH
8795: FOR_IN
8796: IFFALSE 8830
// begin AddComExitBuilding ( i ) ;
8798: LD_VAR 0 6
8802: PPUSH
8803: CALL_OW 182
// wait ( 0 0$1 ) ;
8807: LD_INT 35
8809: PPUSH
8810: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8814: LD_VAR 0 6
8818: PPUSH
8819: LD_VAR 0 8
8823: PPUSH
8824: CALL_OW 190
// end ;
8828: GO 8795
8830: POP
8831: POP
// end ;
8832: GO 8782
8834: POP
8835: POP
// end ; if buildings_list = 0 then
8836: LD_VAR 0 5
8840: PUSH
8841: LD_INT 0
8843: EQUAL
8844: IFFALSE 8877
// begin for i in engineerOK_list do
8846: LD_ADDR_VAR 0 6
8850: PUSH
8851: LD_VAR 0 7
8855: PUSH
8856: FOR_IN
8857: IFFALSE 8875
// begin ComEnterUnit ( i , building ) ;
8859: LD_VAR 0 6
8863: PPUSH
8864: LD_VAR 0 2
8868: PPUSH
8869: CALL_OW 120
// end ;
8873: GO 8856
8875: POP
8876: POP
// end ; end ;
8877: LD_VAR 0 4
8881: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8882: LD_INT 0
8884: PPUSH
8885: PPUSH
8886: PPUSH
8887: PPUSH
8888: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
8889: LD_ADDR_VAR 0 6
8893: PUSH
8894: LD_INT 22
8896: PUSH
8897: LD_VAR 0 1
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 25
8908: PUSH
8909: LD_INT 4
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: LD_INT 24
8918: PUSH
8919: LD_INT 250
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: LIST
8930: PPUSH
8931: CALL_OW 69
8935: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
8936: LD_ADDR_VAR 0 9
8940: PUSH
8941: LD_VAR 0 3
8945: PPUSH
8946: LD_INT 22
8948: PUSH
8949: LD_VAR 0 1
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: LD_INT 21
8960: PUSH
8961: LD_INT 1
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: LD_INT 3
8970: PUSH
8971: LD_INT 24
8973: PUSH
8974: LD_INT 650
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: LIST
8989: PPUSH
8990: CALL_OW 70
8994: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
8995: LD_VAR 0 9
8999: PUSH
9000: LD_INT 0
9002: GREATER
9003: PUSH
9004: LD_VAR 0 6
9008: PUSH
9009: LD_INT 0
9011: GREATER
9012: AND
9013: IFFALSE 9140
// begin for i = 1 to damageUnits do
9015: LD_ADDR_VAR 0 7
9019: PUSH
9020: DOUBLE
9021: LD_INT 1
9023: DEC
9024: ST_TO_ADDR
9025: LD_VAR 0 9
9029: PUSH
9030: FOR_TO
9031: IFFALSE 9055
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9033: LD_VAR 0 9
9037: PUSH
9038: LD_VAR 0 7
9042: ARRAY
9043: PPUSH
9044: LD_VAR 0 2
9048: PPUSH
9049: CALL_OW 113
9053: GO 9030
9055: POP
9056: POP
// for i in sci_list do
9057: LD_ADDR_VAR 0 7
9061: PUSH
9062: LD_VAR 0 6
9066: PUSH
9067: FOR_IN
9068: IFFALSE 9136
// begin ComExitBuilding ( i ) ;
9070: LD_VAR 0 7
9074: PPUSH
9075: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9079: LD_ADDR_VAR 0 8
9083: PUSH
9084: LD_VAR 0 2
9088: PPUSH
9089: LD_INT 22
9091: PUSH
9092: LD_VAR 0 1
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: PPUSH
9101: CALL_OW 70
9105: PUSH
9106: FOR_IN
9107: IFFALSE 9132
// begin AddComHeal ( i , j ) ;
9109: LD_VAR 0 7
9113: PPUSH
9114: LD_VAR 0 8
9118: PPUSH
9119: CALL_OW 188
// wait ( 1 1$0 ) ;
9123: LD_INT 2100
9125: PPUSH
9126: CALL_OW 67
// end ;
9130: GO 9106
9132: POP
9133: POP
// end ;
9134: GO 9067
9136: POP
9137: POP
// end else
9138: GO 9154
// begin AddComEnterUnit ( sci_list , build ) ;
9140: LD_VAR 0 6
9144: PPUSH
9145: LD_VAR 0 4
9149: PPUSH
9150: CALL_OW 180
// end ; end ;
9154: LD_VAR 0 5
9158: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9159: LD_INT 0
9161: PPUSH
9162: PPUSH
9163: PPUSH
9164: PPUSH
9165: PPUSH
9166: PPUSH
9167: PPUSH
9168: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9169: LD_ADDR_VAR 0 7
9173: PUSH
9174: LD_VAR 0 3
9178: PPUSH
9179: LD_INT 22
9181: PUSH
9182: LD_VAR 0 1
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: LD_INT 21
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 24
9203: PUSH
9204: LD_INT 550
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: LD_INT 34
9213: PUSH
9214: LD_INT 46
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: PPUSH
9227: CALL_OW 70
9231: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9232: LD_ADDR_VAR 0 8
9236: PUSH
9237: LD_VAR 0 3
9241: PPUSH
9242: LD_INT 22
9244: PUSH
9245: LD_VAR 0 1
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: PUSH
9254: LD_INT 21
9256: PUSH
9257: LD_INT 2
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 34
9266: PUSH
9267: LD_INT 46
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 3
9276: PUSH
9277: LD_INT 24
9279: PUSH
9280: LD_INT 550
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: PPUSH
9297: CALL_OW 70
9301: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9302: LD_ADDR_VAR 0 9
9306: PUSH
9307: LD_VAR 0 2
9311: PPUSH
9312: LD_INT 22
9314: PUSH
9315: LD_VAR 0 1
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 21
9326: PUSH
9327: LD_INT 2
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 34
9336: PUSH
9337: LD_INT 46
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PUSH
9344: LD_INT 24
9346: PUSH
9347: LD_INT 1000
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PUSH
9354: LD_INT 58
9356: PUSH
9357: EMPTY
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PPUSH
9367: CALL_OW 70
9371: ST_TO_ADDR
// for i in damageVehicle_list do
9372: LD_ADDR_VAR 0 5
9376: PUSH
9377: LD_VAR 0 8
9381: PUSH
9382: FOR_IN
9383: IFFALSE 9402
// mechanicInside_list = UnitsInside ( i ) ;
9385: LD_ADDR_VAR 0 10
9389: PUSH
9390: LD_VAR 0 5
9394: PPUSH
9395: CALL_OW 313
9399: ST_TO_ADDR
9400: GO 9382
9402: POP
9403: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9404: LD_ADDR_VAR 0 11
9408: PUSH
9409: LD_VAR 0 2
9413: PPUSH
9414: LD_INT 22
9416: PUSH
9417: LD_VAR 0 1
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 25
9428: PUSH
9429: LD_INT 3
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: PPUSH
9440: CALL_OW 70
9444: ST_TO_ADDR
// if damageVehicle_list > 0 then
9445: LD_VAR 0 8
9449: PUSH
9450: LD_INT 0
9452: GREATER
9453: IFFALSE 9526
// begin for i in damageVehicle_list do
9455: LD_ADDR_VAR 0 5
9459: PUSH
9460: LD_VAR 0 8
9464: PUSH
9465: FOR_IN
9466: IFFALSE 9524
// begin for j in mechanicInside_list do
9468: LD_ADDR_VAR 0 6
9472: PUSH
9473: LD_VAR 0 10
9477: PUSH
9478: FOR_IN
9479: IFFALSE 9520
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9481: LD_VAR 0 8
9485: PPUSH
9486: LD_VAR 0 2
9490: PPUSH
9491: CALL_OW 113
// AddComExitVehicle ( j ) ;
9495: LD_VAR 0 6
9499: PPUSH
9500: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9504: LD_VAR 0 6
9508: PPUSH
9509: LD_VAR 0 5
9513: PPUSH
9514: CALL_OW 189
// end ;
9518: GO 9478
9520: POP
9521: POP
// end ;
9522: GO 9465
9524: POP
9525: POP
// end ; if emptyVehicle_list > 0 then
9526: LD_VAR 0 9
9530: PUSH
9531: LD_INT 0
9533: GREATER
9534: IFFALSE 9584
// begin for i in emptyVehicle_list do
9536: LD_ADDR_VAR 0 5
9540: PUSH
9541: LD_VAR 0 9
9545: PUSH
9546: FOR_IN
9547: IFFALSE 9582
// begin for j in mechanicOutside_list do
9549: LD_ADDR_VAR 0 6
9553: PUSH
9554: LD_VAR 0 11
9558: PUSH
9559: FOR_IN
9560: IFFALSE 9578
// begin AddComEnterUnit ( j , i ) ;
9562: LD_VAR 0 6
9566: PPUSH
9567: LD_VAR 0 5
9571: PPUSH
9572: CALL_OW 180
// end ;
9576: GO 9559
9578: POP
9579: POP
// end ;
9580: GO 9546
9582: POP
9583: POP
// end ; if VehicleOK_list > 0 then
9584: LD_VAR 0 7
9588: PUSH
9589: LD_INT 0
9591: GREATER
9592: IFFALSE 9626
// begin for i in VehicleOK_list do
9594: LD_ADDR_VAR 0 5
9598: PUSH
9599: LD_VAR 0 7
9603: PUSH
9604: FOR_IN
9605: IFFALSE 9624
// ComAgressiveMove ( i , 110 , 29 ) ;
9607: LD_VAR 0 5
9611: PPUSH
9612: LD_INT 110
9614: PPUSH
9615: LD_INT 29
9617: PPUSH
9618: CALL_OW 114
9622: GO 9604
9624: POP
9625: POP
// end ; end ;
9626: LD_VAR 0 4
9630: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9631: LD_INT 0
9633: PPUSH
9634: PPUSH
9635: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9636: LD_VAR 0 1
9640: PPUSH
9641: LD_INT 22
9643: PUSH
9644: LD_VAR 0 2
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: LD_INT 2
9655: PUSH
9656: LD_INT 21
9658: PUSH
9659: LD_INT 2
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: LD_INT 21
9668: PUSH
9669: LD_INT 1
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: LIST
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: PPUSH
9685: CALL_OW 70
9689: PUSH
9690: LD_VAR 0 5
9694: GREATER
9695: IFFALSE 9827
// begin for i in defendersList do
9697: LD_ADDR_VAR 0 7
9701: PUSH
9702: LD_VAR 0 3
9706: PUSH
9707: FOR_IN
9708: IFFALSE 9823
// begin AddComExitBuilding ( i ) ;
9710: LD_VAR 0 7
9714: PPUSH
9715: CALL_OW 182
// wait ( 0 0$1 ) ;
9719: LD_INT 35
9721: PPUSH
9722: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9726: LD_ADDR_VAR 0 8
9730: PUSH
9731: LD_VAR 0 1
9735: PPUSH
9736: LD_INT 22
9738: PUSH
9739: LD_VAR 0 2
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: LD_INT 2
9750: PUSH
9751: LD_INT 21
9753: PUSH
9754: LD_INT 2
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PUSH
9761: LD_INT 21
9763: PUSH
9764: LD_INT 1
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PPUSH
9780: CALL_OW 70
9784: PUSH
9785: FOR_IN
9786: IFFALSE 9819
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9788: LD_VAR 0 7
9792: PPUSH
9793: LD_VAR 0 8
9797: PPUSH
9798: CALL_OW 250
9802: PPUSH
9803: LD_VAR 0 8
9807: PPUSH
9808: CALL_OW 251
9812: PPUSH
9813: CALL_OW 174
9817: GO 9785
9819: POP
9820: POP
// end ;
9821: GO 9707
9823: POP
9824: POP
// end else
9825: GO 9858
// begin for i in defendersList do
9827: LD_ADDR_VAR 0 7
9831: PUSH
9832: LD_VAR 0 3
9836: PUSH
9837: FOR_IN
9838: IFFALSE 9856
// ComEnterUnit ( i , build ) ;
9840: LD_VAR 0 7
9844: PPUSH
9845: LD_VAR 0 4
9849: PPUSH
9850: CALL_OW 120
9854: GO 9837
9856: POP
9857: POP
// end ; end ;
9858: LD_VAR 0 6
9862: RET
// export function RussianTrap ; var i ; begin
9863: LD_INT 0
9865: PPUSH
9866: PPUSH
// if GetSide ( Brian ) = 4 then
9867: LD_EXP 6
9871: PPUSH
9872: CALL_OW 255
9876: PUSH
9877: LD_INT 4
9879: EQUAL
9880: IFFALSE 9903
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9882: LD_EXP 6
9886: PUSH
9887: LD_EXP 7
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PPUSH
9896: LD_INT 0
9898: PPUSH
9899: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
9903: LD_ADDR_VAR 0 2
9907: PUSH
9908: LD_INT 22
9910: PUSH
9911: LD_INT 3
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: LD_INT 21
9920: PUSH
9921: LD_INT 1
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PPUSH
9932: CALL_OW 69
9936: PUSH
9937: FOR_IN
9938: IFFALSE 10012
// begin ComExitBuilding ( i ) ;
9940: LD_VAR 0 2
9944: PPUSH
9945: CALL_OW 122
// wait ( 0 0$1 ) ;
9949: LD_INT 35
9951: PPUSH
9952: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
9956: LD_VAR 0 2
9960: PPUSH
9961: LD_INT 120
9963: PPUSH
9964: LD_INT 56
9966: PPUSH
9967: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
9971: LD_VAR 0 2
9975: PPUSH
9976: LD_INT 111
9978: PPUSH
9979: LD_INT 37
9981: PPUSH
9982: CALL_OW 174
// AddComCrawl ( i ) ;
9986: LD_VAR 0 2
9990: PPUSH
9991: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
9995: LD_VAR 0 2
9999: PPUSH
10000: LD_INT 109
10002: PPUSH
10003: LD_INT 30
10005: PPUSH
10006: CALL_OW 174
// end ;
10010: GO 9937
10012: POP
10013: POP
// end ;
10014: LD_VAR 0 1
10018: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10019: LD_INT 0
10021: PPUSH
10022: PPUSH
10023: PPUSH
10024: PPUSH
10025: PPUSH
// nearest_dist = 1000 ;
10026: LD_ADDR_VAR 0 4
10030: PUSH
10031: LD_INT 1000
10033: ST_TO_ADDR
// nearest_un = un ;
10034: LD_ADDR_VAR 0 5
10038: PUSH
10039: LD_VAR 0 1
10043: ST_TO_ADDR
// for sold in units do
10044: LD_ADDR_VAR 0 6
10048: PUSH
10049: LD_VAR 0 2
10053: PUSH
10054: FOR_IN
10055: IFFALSE 10111
// begin dist = GetDistUnits ( un , sold ) ;
10057: LD_ADDR_VAR 0 7
10061: PUSH
10062: LD_VAR 0 1
10066: PPUSH
10067: LD_VAR 0 6
10071: PPUSH
10072: CALL_OW 296
10076: ST_TO_ADDR
// if dist < nearest_dist then
10077: LD_VAR 0 7
10081: PUSH
10082: LD_VAR 0 4
10086: LESS
10087: IFFALSE 10109
// begin nearest_un = sold ;
10089: LD_ADDR_VAR 0 5
10093: PUSH
10094: LD_VAR 0 6
10098: ST_TO_ADDR
// nearest_dist = dist ;
10099: LD_ADDR_VAR 0 4
10103: PUSH
10104: LD_VAR 0 7
10108: ST_TO_ADDR
// end ; end ;
10109: GO 10054
10111: POP
10112: POP
// result := nearest_un ;
10113: LD_ADDR_VAR 0 3
10117: PUSH
10118: LD_VAR 0 5
10122: ST_TO_ADDR
// end ;
10123: LD_VAR 0 3
10127: RET
// export function PrepareDifficulty ; begin
10128: LD_INT 0
10130: PPUSH
// if Difficulty = 1 then
10131: LD_OWVAR 67
10135: PUSH
10136: LD_INT 1
10138: EQUAL
10139: IFFALSE 10202
// begin RemoveUnit ( brw2 ) ;
10141: LD_INT 9
10143: PPUSH
10144: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10148: LD_INT 30
10150: PPUSH
10151: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10155: LD_INT 52
10157: PPUSH
10158: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10162: LD_INT 63
10164: PPUSH
10165: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10169: LD_INT 5
10171: PUSH
10172: LD_INT 4
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PPUSH
10179: LD_INT 60
10181: PPUSH
10182: CALL_OW 240
// RuSoldMinLevel = 0 ;
10186: LD_ADDR_EXP 13
10190: PUSH
10191: LD_INT 0
10193: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10194: LD_ADDR_EXP 14
10198: PUSH
10199: LD_INT 1
10201: ST_TO_ADDR
// end ; if Difficulty = 2 then
10202: LD_OWVAR 67
10206: PUSH
10207: LD_INT 2
10209: EQUAL
10210: IFFALSE 10252
// begin RemoveUnit ( brw4 ) ;
10212: LD_INT 52
10214: PPUSH
10215: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10219: LD_INT 5
10221: PUSH
10222: LD_INT 4
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PPUSH
10229: LD_INT 50
10231: PPUSH
10232: CALL_OW 240
// RuSoldMinLevel = 1 ;
10236: LD_ADDR_EXP 13
10240: PUSH
10241: LD_INT 1
10243: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10244: LD_ADDR_EXP 14
10248: PUSH
10249: LD_INT 2
10251: ST_TO_ADDR
// end ; if Difficulty = 3 then
10252: LD_OWVAR 67
10256: PUSH
10257: LD_INT 3
10259: EQUAL
10260: IFFALSE 10295
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10262: LD_INT 5
10264: PUSH
10265: LD_INT 4
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PPUSH
10272: LD_INT 40
10274: PPUSH
10275: CALL_OW 240
// RuSoldMinLevel = 2 ;
10279: LD_ADDR_EXP 13
10283: PUSH
10284: LD_INT 2
10286: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10287: LD_ADDR_EXP 14
10291: PUSH
10292: LD_INT 3
10294: ST_TO_ADDR
// end ; end ;
10295: LD_VAR 0 1
10299: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10300: LD_INT 0
10302: PPUSH
10303: PPUSH
10304: PPUSH
// tmp = [ ] ;
10305: LD_ADDR_VAR 0 5
10309: PUSH
10310: EMPTY
10311: ST_TO_ADDR
// if not vehicles then
10312: LD_VAR 0 1
10316: NOT
10317: IFFALSE 10321
// exit ;
10319: GO 10438
// for i in vehicles do
10321: LD_ADDR_VAR 0 4
10325: PUSH
10326: LD_VAR 0 1
10330: PUSH
10331: FOR_IN
10332: IFFALSE 10422
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10334: LD_ADDR_VAR 0 5
10338: PUSH
10339: LD_VAR 0 5
10343: PPUSH
10344: LD_INT 1
10346: PPUSH
10347: LD_VAR 0 4
10351: PPUSH
10352: CALL_OW 265
10356: PUSH
10357: LD_VAR 0 4
10361: PPUSH
10362: CALL_OW 262
10366: PUSH
10367: LD_VAR 0 4
10371: PPUSH
10372: CALL_OW 263
10376: PUSH
10377: LD_VAR 0 4
10381: PPUSH
10382: CALL_OW 264
10386: PUSH
10387: LD_VAR 0 4
10391: PPUSH
10392: CALL_OW 261
10396: PUSH
10397: LD_VAR 0 4
10401: PPUSH
10402: CALL_OW 256
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: PPUSH
10415: CALL_OW 2
10419: ST_TO_ADDR
// end ;
10420: GO 10331
10422: POP
10423: POP
// SaveVariable ( tmp , ident ) ;
10424: LD_VAR 0 5
10428: PPUSH
10429: LD_VAR 0 2
10433: PPUSH
10434: CALL_OW 39
// end ; end_of_file
10438: LD_VAR 0 3
10442: RET
// export function PrepareHeroes ; begin
10443: LD_INT 0
10445: PPUSH
// uc_side = 1 ;
10446: LD_ADDR_OWVAR 20
10450: PUSH
10451: LD_INT 1
10453: ST_TO_ADDR
// JMM = CreateCharacter ( JMM ) ;
10454: LD_ADDR_EXP 1
10458: PUSH
10459: LD_STRING JMM
10461: PPUSH
10462: CALL_OW 34
10466: ST_TO_ADDR
// SetLives ( JMM , LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ) ;
10467: LD_EXP 1
10471: PPUSH
10472: LD_STRING 01_JMMLifePoints_1
10474: PPUSH
10475: LD_INT 1000
10477: PPUSH
10478: CALL_OW 30
10482: PPUSH
10483: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10487: LD_ADDR_EXP 9
10491: PUSH
10492: LD_STRING Powell
10494: PPUSH
10495: CALL_OW 25
10499: ST_TO_ADDR
// Bobby = CreateCharacter ( Bobby ) ;
10500: LD_ADDR_EXP 2
10504: PUSH
10505: LD_STRING Bobby
10507: PPUSH
10508: CALL_OW 34
10512: ST_TO_ADDR
// if Bobby then
10513: LD_EXP 2
10517: IFFALSE 10539
// SetLives ( Bobby , LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ) ;
10519: LD_EXP 2
10523: PPUSH
10524: LD_STRING 01_BobbyLifePoints_1
10526: PPUSH
10527: LD_INT 1000
10529: PPUSH
10530: CALL_OW 30
10534: PPUSH
10535: CALL_OW 234
// Cyrus = CreateCharacter ( Cyrus ) ;
10539: LD_ADDR_EXP 3
10543: PUSH
10544: LD_STRING Cyrus
10546: PPUSH
10547: CALL_OW 34
10551: ST_TO_ADDR
// if Cyrus then
10552: LD_EXP 3
10556: IFFALSE 10578
// SetLives ( Cyrus , LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ) ;
10558: LD_EXP 3
10562: PPUSH
10563: LD_STRING 01_CyrusLifePoints_1
10565: PPUSH
10566: LD_INT 1000
10568: PPUSH
10569: CALL_OW 30
10573: PPUSH
10574: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
10578: LD_ADDR_EXP 5
10582: PUSH
10583: LD_STRING Khatam
10585: PPUSH
10586: CALL_OW 25
10590: ST_TO_ADDR
// uc_side = 4 ;
10591: LD_ADDR_OWVAR 20
10595: PUSH
10596: LD_INT 4
10598: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10599: LD_ADDR_EXP 4
10603: PUSH
10604: LD_STRING Lisa
10606: PPUSH
10607: CALL_OW 25
10611: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10612: LD_EXP 1
10616: PPUSH
10617: LD_INT 3
10619: PPUSH
10620: LD_INT 0
10622: PPUSH
10623: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10627: LD_EXP 2
10631: PPUSH
10632: LD_INT 3
10634: PPUSH
10635: LD_INT 0
10637: PPUSH
10638: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10642: LD_EXP 3
10646: PPUSH
10647: LD_INT 3
10649: PPUSH
10650: LD_INT 0
10652: PPUSH
10653: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10657: LD_EXP 4
10661: PPUSH
10662: LD_INT 5
10664: PPUSH
10665: LD_INT 0
10667: PPUSH
10668: CALL_OW 49
// ComCrawl ( Lisa ) ;
10672: LD_EXP 4
10676: PPUSH
10677: CALL_OW 137
// end ;
10681: LD_VAR 0 1
10685: RET
// export function PrepareLisSquad ; var i , un ; begin
10686: LD_INT 0
10688: PPUSH
10689: PPUSH
10690: PPUSH
// uc_side = 4 ;
10691: LD_ADDR_OWVAR 20
10695: PUSH
10696: LD_INT 4
10698: ST_TO_ADDR
// uc_nation = 1 ;
10699: LD_ADDR_OWVAR 21
10703: PUSH
10704: LD_INT 1
10706: ST_TO_ADDR
// hc_class := 2 ;
10707: LD_ADDR_OWVAR 28
10711: PUSH
10712: LD_INT 2
10714: ST_TO_ADDR
// hc_sex := sex_male ;
10715: LD_ADDR_OWVAR 27
10719: PUSH
10720: LD_INT 1
10722: ST_TO_ADDR
// hc_gallery :=  ;
10723: LD_ADDR_OWVAR 33
10727: PUSH
10728: LD_STRING 
10730: ST_TO_ADDR
// hc_name :=  ;
10731: LD_ADDR_OWVAR 26
10735: PUSH
10736: LD_STRING 
10738: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10739: LD_ADDR_OWVAR 30
10743: PUSH
10744: LD_INT 0
10746: PUSH
10747: LD_INT 1
10749: PUSH
10750: LD_INT 0
10752: PUSH
10753: LD_INT 0
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
10762: LD_ADDR_OWVAR 31
10766: PUSH
10767: LD_INT 1
10769: PUSH
10770: LD_INT 2
10772: PUSH
10773: LD_INT 0
10775: PUSH
10776: LD_INT 0
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: ST_TO_ADDR
// un := CreateHuman ;
10785: LD_ADDR_VAR 0 3
10789: PUSH
10790: CALL_OW 44
10794: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10795: LD_VAR 0 3
10799: PPUSH
10800: LD_INT 6
10802: PPUSH
10803: LD_INT 0
10805: PPUSH
10806: CALL_OW 49
// hc_sex := sex_female ;
10810: LD_ADDR_OWVAR 27
10814: PUSH
10815: LD_INT 2
10817: ST_TO_ADDR
// hc_gallery :=  ;
10818: LD_ADDR_OWVAR 33
10822: PUSH
10823: LD_STRING 
10825: ST_TO_ADDR
// hc_name :=  ;
10826: LD_ADDR_OWVAR 26
10830: PUSH
10831: LD_STRING 
10833: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
10834: LD_ADDR_OWVAR 30
10838: PUSH
10839: LD_INT 0
10841: PUSH
10842: LD_INT 0
10844: PUSH
10845: LD_INT 0
10847: PUSH
10848: LD_INT 1
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
10857: LD_ADDR_OWVAR 31
10861: PUSH
10862: LD_INT 0
10864: PUSH
10865: LD_INT 1
10867: PUSH
10868: LD_INT 0
10870: PUSH
10871: LD_INT 1
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: ST_TO_ADDR
// un := CreateHuman ;
10880: LD_ADDR_VAR 0 3
10884: PUSH
10885: CALL_OW 44
10889: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10890: LD_VAR 0 3
10894: PPUSH
10895: LD_INT 6
10897: PPUSH
10898: LD_INT 0
10900: PPUSH
10901: CALL_OW 49
// InitHc ;
10905: CALL_OW 19
// end ;
10909: LD_VAR 0 1
10913: RET
// export function PrepareOtherAmericans ; begin
10914: LD_INT 0
10916: PPUSH
// uc_side = 4 ;
10917: LD_ADDR_OWVAR 20
10921: PUSH
10922: LD_INT 4
10924: ST_TO_ADDR
// uc_nation = 1 ;
10925: LD_ADDR_OWVAR 21
10929: PUSH
10930: LD_INT 1
10932: ST_TO_ADDR
// hc_gallery =  ;
10933: LD_ADDR_OWVAR 33
10937: PUSH
10938: LD_STRING 
10940: ST_TO_ADDR
// hc_name = Brian Garvin ;
10941: LD_ADDR_OWVAR 26
10945: PUSH
10946: LD_STRING Brian Garvin
10948: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
10949: LD_INT 1
10951: PPUSH
10952: LD_INT 1
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: LD_INT 2
10960: PPUSH
10961: CALL_OW 12
10965: PPUSH
10966: CALL_OW 380
// Brian = CreateHuman ;
10970: LD_ADDR_EXP 6
10974: PUSH
10975: CALL_OW 44
10979: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
10980: LD_EXP 6
10984: PPUSH
10985: LD_INT 10
10987: PPUSH
10988: LD_INT 0
10990: PPUSH
10991: CALL_OW 49
// hc_name = Jerry White ;
10995: LD_ADDR_OWVAR 26
10999: PUSH
11000: LD_STRING Jerry White
11002: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11003: LD_INT 1
11005: PPUSH
11006: LD_INT 3
11008: PPUSH
11009: LD_INT 1
11011: PPUSH
11012: LD_INT 2
11014: PPUSH
11015: CALL_OW 12
11019: PPUSH
11020: CALL_OW 380
// Jerry = CreateHuman ;
11024: LD_ADDR_EXP 7
11028: PUSH
11029: CALL_OW 44
11033: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11034: LD_EXP 7
11038: PPUSH
11039: LD_INT 10
11041: PPUSH
11042: LD_INT 0
11044: PPUSH
11045: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11049: LD_EXP 6
11053: PUSH
11054: LD_EXP 7
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PPUSH
11063: CALL_OW 140
// end ;
11067: LD_VAR 0 1
11071: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11072: LD_INT 0
11074: PPUSH
11075: PPUSH
11076: PPUSH
// for i = 1 to 6 do
11077: LD_ADDR_VAR 0 2
11081: PUSH
11082: DOUBLE
11083: LD_INT 1
11085: DEC
11086: ST_TO_ADDR
11087: LD_INT 6
11089: PUSH
11090: FOR_TO
11091: IFFALSE 11185
// begin uc_side = 4 ;
11093: LD_ADDR_OWVAR 20
11097: PUSH
11098: LD_INT 4
11100: ST_TO_ADDR
// uc_nation = 1 ;
11101: LD_ADDR_OWVAR 21
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// hc_gallery =  ;
11109: LD_ADDR_OWVAR 33
11113: PUSH
11114: LD_STRING 
11116: ST_TO_ADDR
// hc_name =  ;
11117: LD_ADDR_OWVAR 26
11121: PUSH
11122: LD_STRING 
11124: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11125: LD_INT 0
11127: PPUSH
11128: LD_INT 1
11130: PPUSH
11131: LD_INT 4
11133: PPUSH
11134: CALL_OW 12
11138: PPUSH
11139: LD_INT 1
11141: PPUSH
11142: CALL_OW 380
// un = CreateHuman ;
11146: LD_ADDR_VAR 0 3
11150: PUSH
11151: CALL_OW 44
11155: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11156: LD_VAR 0 3
11160: PPUSH
11161: LD_INT 16
11163: PPUSH
11164: LD_INT 0
11166: PPUSH
11167: CALL_OW 49
// SetLives ( un , 1 ) ;
11171: LD_VAR 0 3
11175: PPUSH
11176: LD_INT 1
11178: PPUSH
11179: CALL_OW 234
// end ;
11183: GO 11090
11185: POP
11186: POP
// DyingSold = CreateHuman ;
11187: LD_ADDR_EXP 32
11191: PUSH
11192: CALL_OW 44
11196: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11197: LD_EXP 32
11201: PPUSH
11202: LD_INT 16
11204: PPUSH
11205: LD_INT 0
11207: PPUSH
11208: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11212: LD_EXP 32
11216: PPUSH
11217: LD_INT 250
11219: PPUSH
11220: CALL_OW 234
// end ; end_of_file
11224: LD_VAR 0 1
11228: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11229: LD_INT 0
11231: PPUSH
11232: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) ;
11233: LD_ADDR_VAR 0 2
11237: PUSH
11238: LD_INT 22
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 23
11250: PUSH
11251: LD_INT 1
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 25
11260: PUSH
11261: LD_INT 2
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: LIST
11272: PPUSH
11273: CALL_OW 69
11277: ST_TO_ADDR
// uc_side = 6 ;
11278: LD_ADDR_OWVAR 20
11282: PUSH
11283: LD_INT 6
11285: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11286: LD_ADDR_EXP 8
11290: PUSH
11291: LD_STRING Mikhail
11293: PPUSH
11294: CALL_OW 25
11298: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
11299: LD_EXP 8
11303: PPUSH
11304: LD_VAR 0 2
11308: PUSH
11309: LD_INT 1
11311: ARRAY
11312: PPUSH
11313: CALL_OW 250
11317: PPUSH
11318: LD_VAR 0 2
11322: PUSH
11323: LD_INT 1
11325: ARRAY
11326: PPUSH
11327: CALL_OW 251
11331: PPUSH
11332: LD_INT 3
11334: PPUSH
11335: LD_INT 1
11337: PPUSH
11338: CALL_OW 50
// end ;
11342: LD_VAR 0 1
11346: RET
// export function PrepareRussianCommander ; begin
11347: LD_INT 0
11349: PPUSH
// uc_side = 3 ;
11350: LD_ADDR_OWVAR 20
11354: PUSH
11355: LD_INT 3
11357: ST_TO_ADDR
// uc_nation = 3 ;
11358: LD_ADDR_OWVAR 21
11362: PUSH
11363: LD_INT 3
11365: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11366: LD_ADDR_EXP 19
11370: PUSH
11371: LD_STRING Natasza
11373: PPUSH
11374: CALL_OW 25
11378: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11379: LD_EXP 19
11383: PPUSH
11384: LD_INT 24
11386: PPUSH
11387: LD_INT 0
11389: PPUSH
11390: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11394: LD_EXP 19
11398: PPUSH
11399: LD_INT 56
11401: PPUSH
11402: LD_INT 16
11404: PPUSH
11405: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11409: LD_ADDR_EXP 24
11413: PUSH
11414: LD_EXP 24
11418: PUSH
11419: LD_EXP 19
11423: ADD
11424: ST_TO_ADDR
// end ;
11425: LD_VAR 0 1
11429: RET
// export function PrepareSouthBase ; var i , un ; begin
11430: LD_INT 0
11432: PPUSH
11433: PPUSH
11434: PPUSH
// for i = 1 to 2 do
11435: LD_ADDR_VAR 0 2
11439: PUSH
11440: DOUBLE
11441: LD_INT 1
11443: DEC
11444: ST_TO_ADDR
11445: LD_INT 2
11447: PUSH
11448: FOR_TO
11449: IFFALSE 11558
// begin uc_side = 3 ;
11451: LD_ADDR_OWVAR 20
11455: PUSH
11456: LD_INT 3
11458: ST_TO_ADDR
// uc_nation = 3 ;
11459: LD_ADDR_OWVAR 21
11463: PUSH
11464: LD_INT 3
11466: ST_TO_ADDR
// hc_gallery =  ;
11467: LD_ADDR_OWVAR 33
11471: PUSH
11472: LD_STRING 
11474: ST_TO_ADDR
// hc_name =  ;
11475: LD_ADDR_OWVAR 26
11479: PUSH
11480: LD_STRING 
11482: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11483: LD_INT 1
11485: PPUSH
11486: LD_INT 1
11488: PPUSH
11489: LD_EXP 13
11493: PPUSH
11494: LD_EXP 14
11498: PPUSH
11499: CALL_OW 12
11503: PPUSH
11504: CALL_OW 380
// hc_importance = 0 ;
11508: LD_ADDR_OWVAR 32
11512: PUSH
11513: LD_INT 0
11515: ST_TO_ADDR
// un = CreateHuman ;
11516: LD_ADDR_VAR 0 3
11520: PUSH
11521: CALL_OW 44
11525: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11526: LD_VAR 0 3
11530: PPUSH
11531: LD_INT 11
11533: PPUSH
11534: LD_INT 0
11536: PPUSH
11537: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11541: LD_VAR 0 3
11545: PPUSH
11546: LD_INT 111
11548: PPUSH
11549: LD_INT 38
11551: PPUSH
11552: CALL_OW 118
// end ;
11556: GO 11448
11558: POP
11559: POP
// for i = 1 to Difficulty do
11560: LD_ADDR_VAR 0 2
11564: PUSH
11565: DOUBLE
11566: LD_INT 1
11568: DEC
11569: ST_TO_ADDR
11570: LD_OWVAR 67
11574: PUSH
11575: FOR_TO
11576: IFFALSE 11677
// begin uc_side = 3 ;
11578: LD_ADDR_OWVAR 20
11582: PUSH
11583: LD_INT 3
11585: ST_TO_ADDR
// uc_nation = 3 ;
11586: LD_ADDR_OWVAR 21
11590: PUSH
11591: LD_INT 3
11593: ST_TO_ADDR
// hc_gallery =  ;
11594: LD_ADDR_OWVAR 33
11598: PUSH
11599: LD_STRING 
11601: ST_TO_ADDR
// hc_name =  ;
11602: LD_ADDR_OWVAR 26
11606: PUSH
11607: LD_STRING 
11609: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11610: LD_INT 0
11612: PPUSH
11613: LD_INT 3
11615: PPUSH
11616: LD_EXP 13
11620: PPUSH
11621: LD_EXP 14
11625: PPUSH
11626: CALL_OW 12
11630: PPUSH
11631: CALL_OW 380
// un = CreateHuman ;
11635: LD_ADDR_VAR 0 3
11639: PUSH
11640: CALL_OW 44
11644: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
11645: LD_VAR 0 3
11649: PPUSH
11650: LD_INT 12
11652: PPUSH
11653: LD_INT 0
11655: PPUSH
11656: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
11660: LD_VAR 0 3
11664: PPUSH
11665: LD_INT 111
11667: PPUSH
11668: LD_INT 28
11670: PPUSH
11671: CALL_OW 118
// end ;
11675: GO 11575
11677: POP
11678: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
11679: LD_INT 3
11681: PPUSH
11682: LD_INT 3
11684: PPUSH
11685: LD_INT 33
11687: PPUSH
11688: LD_EXP 13
11692: PPUSH
11693: LD_EXP 14
11697: PPUSH
11698: CALL_OW 12
11702: PPUSH
11703: LD_INT 1
11705: PPUSH
11706: LD_INT 1
11708: PUSH
11709: LD_INT 1
11711: PPUSH
11712: LD_INT 2
11714: PPUSH
11715: CALL_OW 12
11719: PUSH
11720: LD_INT 1
11722: PPUSH
11723: LD_INT 2
11725: PPUSH
11726: CALL_OW 12
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: LIST
11735: PUSH
11736: LD_OWVAR 67
11740: ARRAY
11741: PPUSH
11742: CALL 8390 0 6
// for i in UnitsInside ( arm2 ) do
11746: LD_ADDR_VAR 0 2
11750: PUSH
11751: LD_INT 33
11753: PPUSH
11754: CALL_OW 313
11758: PUSH
11759: FOR_IN
11760: IFFALSE 11780
// southBaseDefenders = southBaseDefenders ^ i ;
11762: LD_ADDR_EXP 25
11766: PUSH
11767: LD_EXP 25
11771: PUSH
11772: LD_VAR 0 2
11776: ADD
11777: ST_TO_ADDR
11778: GO 11759
11780: POP
11781: POP
// end ;
11782: LD_VAR 0 1
11786: RET
// export function PrepareNorthBase ; var i , un ; begin
11787: LD_INT 0
11789: PPUSH
11790: PPUSH
11791: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
11792: LD_ADDR_VAR 0 2
11796: PUSH
11797: DOUBLE
11798: LD_INT 1
11800: DEC
11801: ST_TO_ADDR
11802: LD_INT 1
11804: PPUSH
11805: LD_INT 2
11807: PPUSH
11808: CALL_OW 12
11812: PUSH
11813: LD_INT 2
11815: PPUSH
11816: LD_INT 3
11818: PPUSH
11819: CALL_OW 12
11823: PUSH
11824: LD_INT 3
11826: PPUSH
11827: LD_INT 4
11829: PPUSH
11830: CALL_OW 12
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: LIST
11839: PUSH
11840: LD_OWVAR 67
11844: ARRAY
11845: PUSH
11846: FOR_TO
11847: IFFALSE 11933
// begin uc_side = 3 ;
11849: LD_ADDR_OWVAR 20
11853: PUSH
11854: LD_INT 3
11856: ST_TO_ADDR
// uc_nation = 3 ;
11857: LD_ADDR_OWVAR 21
11861: PUSH
11862: LD_INT 3
11864: ST_TO_ADDR
// hc_gallery =  ;
11865: LD_ADDR_OWVAR 33
11869: PUSH
11870: LD_STRING 
11872: ST_TO_ADDR
// hc_name =  ;
11873: LD_ADDR_OWVAR 26
11877: PUSH
11878: LD_STRING 
11880: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11881: LD_INT 0
11883: PPUSH
11884: LD_INT 1
11886: PPUSH
11887: LD_EXP 13
11891: PPUSH
11892: LD_EXP 14
11896: PPUSH
11897: CALL_OW 12
11901: PPUSH
11902: CALL_OW 380
// un = CreateHuman ;
11906: LD_ADDR_VAR 0 3
11910: PUSH
11911: CALL_OW 44
11915: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
11916: LD_VAR 0 3
11920: PPUSH
11921: LD_INT 14
11923: PPUSH
11924: LD_INT 0
11926: PPUSH
11927: CALL_OW 49
// end ;
11931: GO 11846
11933: POP
11934: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
11935: LD_INT 3
11937: PPUSH
11938: LD_INT 3
11940: PPUSH
11941: LD_INT 2
11943: PPUSH
11944: LD_EXP 13
11948: PPUSH
11949: LD_EXP 14
11953: PPUSH
11954: CALL_OW 12
11958: PPUSH
11959: LD_INT 1
11961: PPUSH
11962: LD_INT 1
11964: PPUSH
11965: LD_INT 2
11967: PPUSH
11968: CALL_OW 12
11972: PUSH
11973: LD_INT 1
11975: PPUSH
11976: LD_INT 3
11978: PPUSH
11979: CALL_OW 12
11983: PUSH
11984: LD_INT 1
11986: PPUSH
11987: LD_INT 3
11989: PPUSH
11990: CALL_OW 12
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: LIST
11999: PUSH
12000: LD_OWVAR 67
12004: ARRAY
12005: PPUSH
12006: CALL 8390 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12010: LD_INT 3
12012: PPUSH
12013: LD_INT 3
12015: PPUSH
12016: LD_INT 23
12018: PPUSH
12019: LD_EXP 13
12023: PPUSH
12024: LD_EXP 14
12028: PPUSH
12029: CALL_OW 12
12033: PPUSH
12034: LD_INT 4
12036: PPUSH
12037: LD_INT 0
12039: PUSH
12040: LD_INT 1
12042: PUSH
12043: LD_INT 2
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: LIST
12050: PUSH
12051: LD_OWVAR 67
12055: ARRAY
12056: PPUSH
12057: CALL 8390 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12061: LD_INT 3
12063: PPUSH
12064: LD_INT 3
12066: PPUSH
12067: LD_INT 1
12069: PPUSH
12070: LD_EXP 13
12074: PPUSH
12075: LD_EXP 14
12079: PPUSH
12080: CALL_OW 12
12084: PPUSH
12085: LD_INT 2
12087: PPUSH
12088: LD_INT 1
12090: PUSH
12091: LD_INT 2
12093: PUSH
12094: LD_INT 2
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: LIST
12101: PUSH
12102: LD_OWVAR 67
12106: ARRAY
12107: PPUSH
12108: CALL 8390 0 6
// for i in UnitsInside ( arm1 ) do
12112: LD_ADDR_VAR 0 2
12116: PUSH
12117: LD_INT 2
12119: PPUSH
12120: CALL_OW 313
12124: PUSH
12125: FOR_IN
12126: IFFALSE 12146
// northBaseDefenders = northBaseDefenders ^ i ;
12128: LD_ADDR_EXP 24
12132: PUSH
12133: LD_EXP 24
12137: PUSH
12138: LD_VAR 0 2
12142: ADD
12143: ST_TO_ADDR
12144: GO 12125
12146: POP
12147: POP
// end ;
12148: LD_VAR 0 1
12152: RET
// export function PrepareOtherRussians ; var i , un ; begin
12153: LD_INT 0
12155: PPUSH
12156: PPUSH
12157: PPUSH
// for i = 1 to 2 do
12158: LD_ADDR_VAR 0 2
12162: PUSH
12163: DOUBLE
12164: LD_INT 1
12166: DEC
12167: ST_TO_ADDR
12168: LD_INT 2
12170: PUSH
12171: FOR_TO
12172: IFFALSE 12273
// begin uc_side = 3 ;
12174: LD_ADDR_OWVAR 20
12178: PUSH
12179: LD_INT 3
12181: ST_TO_ADDR
// uc_nation = 3 ;
12182: LD_ADDR_OWVAR 21
12186: PUSH
12187: LD_INT 3
12189: ST_TO_ADDR
// hc_gallery =  ;
12190: LD_ADDR_OWVAR 33
12194: PUSH
12195: LD_STRING 
12197: ST_TO_ADDR
// hc_name =  ;
12198: LD_ADDR_OWVAR 26
12202: PUSH
12203: LD_STRING 
12205: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12206: LD_INT 0
12208: PPUSH
12209: LD_INT 1
12211: PPUSH
12212: LD_EXP 13
12216: PPUSH
12217: LD_EXP 14
12221: PPUSH
12222: CALL_OW 12
12226: PPUSH
12227: CALL_OW 380
// un = CreateHuman ;
12231: LD_ADDR_VAR 0 3
12235: PUSH
12236: CALL_OW 44
12240: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12241: LD_VAR 0 3
12245: PPUSH
12246: LD_INT 9
12248: PPUSH
12249: LD_INT 0
12251: PPUSH
12252: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12256: LD_VAR 0 3
12260: PPUSH
12261: LD_INT 80
12263: PPUSH
12264: LD_INT 73
12266: PPUSH
12267: CALL_OW 118
// end ;
12271: GO 12171
12273: POP
12274: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12275: LD_ADDR_VAR 0 2
12279: PUSH
12280: LD_INT 22
12282: PUSH
12283: LD_INT 3
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 30
12292: PUSH
12293: LD_INT 31
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PPUSH
12304: CALL_OW 69
12308: PUSH
12309: FOR_IN
12310: IFFALSE 12338
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12312: LD_EXP 13
12316: PPUSH
12317: LD_EXP 14
12321: PPUSH
12322: CALL_OW 12
12326: PPUSH
12327: LD_VAR 0 2
12331: PPUSH
12332: CALL 8500 0 2
12336: GO 12309
12338: POP
12339: POP
// end ;
12340: LD_VAR 0 1
12344: RET
// export function PrepareCargoBays ; begin
12345: LD_INT 0
12347: PPUSH
// uc_side = 3 ;
12348: LD_ADDR_OWVAR 20
12352: PUSH
12353: LD_INT 3
12355: ST_TO_ADDR
// uc_nation = 3 ;
12356: LD_ADDR_OWVAR 21
12360: PUSH
12361: LD_INT 3
12363: ST_TO_ADDR
// vc_engine = 1 ;
12364: LD_ADDR_OWVAR 39
12368: PUSH
12369: LD_INT 1
12371: ST_TO_ADDR
// vc_control = 1 ;
12372: LD_ADDR_OWVAR 38
12376: PUSH
12377: LD_INT 1
12379: ST_TO_ADDR
// vc_weapon = 51 ;
12380: LD_ADDR_OWVAR 40
12384: PUSH
12385: LD_INT 51
12387: ST_TO_ADDR
// vc_chassis = 22 ;
12388: LD_ADDR_OWVAR 37
12392: PUSH
12393: LD_INT 22
12395: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12396: LD_ADDR_EXP 15
12400: PUSH
12401: CALL_OW 45
12405: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12406: LD_ADDR_EXP 16
12410: PUSH
12411: CALL_OW 45
12415: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12416: LD_EXP 15
12420: PPUSH
12421: LD_INT 13
12423: PPUSH
12424: LD_INT 0
12426: PPUSH
12427: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12431: LD_EXP 16
12435: PPUSH
12436: LD_INT 13
12438: PPUSH
12439: LD_INT 0
12441: PPUSH
12442: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12446: LD_EXP 15
12450: PPUSH
12451: LD_INT 2
12453: PPUSH
12454: LD_INT 70
12456: PUSH
12457: LD_INT 50
12459: PUSH
12460: LD_INT 30
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: PUSH
12468: LD_OWVAR 67
12472: ARRAY
12473: PPUSH
12474: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12478: LD_EXP 16
12482: PPUSH
12483: LD_INT 2
12485: PPUSH
12486: LD_INT 70
12488: PUSH
12489: LD_INT 50
12491: PUSH
12492: LD_INT 30
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: PUSH
12500: LD_OWVAR 67
12504: ARRAY
12505: PPUSH
12506: CALL_OW 291
// hc_gallery =  ;
12510: LD_ADDR_OWVAR 33
12514: PUSH
12515: LD_STRING 
12517: ST_TO_ADDR
// hc_name =  ;
12518: LD_ADDR_OWVAR 26
12522: PUSH
12523: LD_STRING 
12525: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12526: LD_INT 1
12528: PPUSH
12529: LD_INT 3
12531: PPUSH
12532: LD_INT 1
12534: PPUSH
12535: LD_INT 2
12537: PPUSH
12538: CALL_OW 12
12542: PPUSH
12543: CALL_OW 380
// driver1 = CreateHuman ;
12547: LD_ADDR_EXP 17
12551: PUSH
12552: CALL_OW 44
12556: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12557: LD_EXP 17
12561: PPUSH
12562: LD_EXP 15
12566: PPUSH
12567: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12571: LD_ADDR_OWVAR 26
12575: PUSH
12576: LD_STRING Nikolai Andreyev
12578: ST_TO_ADDR
// driver2 = CreateHuman ;
12579: LD_ADDR_EXP 18
12583: PUSH
12584: CALL_OW 44
12588: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12589: LD_EXP 18
12593: PPUSH
12594: LD_EXP 16
12598: PPUSH
12599: CALL_OW 52
// end ;
12603: LD_VAR 0 1
12607: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12608: LD_INT 0
12610: PPUSH
12611: PPUSH
12612: PPUSH
12613: PPUSH
12614: PPUSH
12615: PPUSH
12616: PPUSH
// uc_side = 3 ;
12617: LD_ADDR_OWVAR 20
12621: PUSH
12622: LD_INT 3
12624: ST_TO_ADDR
// uc_nation = 3 ;
12625: LD_ADDR_OWVAR 21
12629: PUSH
12630: LD_INT 3
12632: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
12633: LD_ADDR_VAR 0 4
12637: PUSH
12638: DOUBLE
12639: LD_INT 1
12641: DEC
12642: ST_TO_ADDR
12643: LD_VAR 0 1
12647: PUSH
12648: LD_INT 1
12650: PPUSH
12651: LD_INT 3
12653: PPUSH
12654: CALL_OW 12
12658: PLUS
12659: PUSH
12660: FOR_TO
12661: IFFALSE 12838
// begin vc_engine = 1 ;
12663: LD_ADDR_OWVAR 39
12667: PUSH
12668: LD_INT 1
12670: ST_TO_ADDR
// vc_control = 1 ;
12671: LD_ADDR_OWVAR 38
12675: PUSH
12676: LD_INT 1
12678: ST_TO_ADDR
// vc_weapon = 42 ;
12679: LD_ADDR_OWVAR 40
12683: PUSH
12684: LD_INT 42
12686: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
12687: LD_ADDR_OWVAR 37
12691: PUSH
12692: LD_INT 21
12694: PUSH
12695: LD_INT 22
12697: PUSH
12698: LD_INT 22
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: LIST
12705: PUSH
12706: LD_OWVAR 67
12710: ARRAY
12711: ST_TO_ADDR
// veh = CreateVehicle ;
12712: LD_ADDR_VAR 0 5
12716: PUSH
12717: CALL_OW 45
12721: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12722: LD_VAR 0 5
12726: PPUSH
12727: LD_VAR 0 2
12731: PPUSH
12732: LD_INT 0
12734: PPUSH
12735: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
12739: LD_ADDR_EXP 26
12743: PUSH
12744: LD_EXP 26
12748: PUSH
12749: LD_VAR 0 5
12753: ADD
12754: ST_TO_ADDR
// hc_gallery =  ;
12755: LD_ADDR_OWVAR 33
12759: PUSH
12760: LD_STRING 
12762: ST_TO_ADDR
// hc_name =  ;
12763: LD_ADDR_OWVAR 26
12767: PUSH
12768: LD_STRING 
12770: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12771: LD_INT 0
12773: PPUSH
12774: LD_INT 3
12776: PPUSH
12777: LD_EXP 13
12781: PPUSH
12782: LD_EXP 14
12786: PPUSH
12787: CALL_OW 12
12791: PPUSH
12792: CALL_OW 380
// un = CreateHuman ;
12796: LD_ADDR_VAR 0 6
12800: PUSH
12801: CALL_OW 44
12805: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12806: LD_VAR 0 6
12810: PPUSH
12811: LD_VAR 0 5
12815: PPUSH
12816: CALL_OW 52
// attackGroup = attackGroup ^ un ;
12820: LD_ADDR_EXP 26
12824: PUSH
12825: LD_EXP 26
12829: PUSH
12830: LD_VAR 0 6
12834: ADD
12835: ST_TO_ADDR
// end ;
12836: GO 12660
12838: POP
12839: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12840: LD_INT 0
12842: PPUSH
12843: LD_INT 2
12845: PPUSH
12846: LD_EXP 13
12850: PPUSH
12851: LD_EXP 14
12855: PPUSH
12856: CALL_OW 12
12860: PPUSH
12861: CALL_OW 380
// un = CreateHuman ;
12865: LD_ADDR_VAR 0 6
12869: PUSH
12870: CALL_OW 44
12874: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
12875: LD_ADDR_VAR 0 4
12879: PUSH
12880: DOUBLE
12881: LD_INT 1
12883: DEC
12884: ST_TO_ADDR
12885: LD_VAR 0 1
12889: PUSH
12890: LD_INT 2
12892: PUSH
12893: LD_INT 2
12895: MUL
12896: PLUS
12897: PUSH
12898: FOR_TO
12899: IFFALSE 12987
// begin hc_gallery =  ;
12901: LD_ADDR_OWVAR 33
12905: PUSH
12906: LD_STRING 
12908: ST_TO_ADDR
// hc_name =  ;
12909: LD_ADDR_OWVAR 26
12913: PUSH
12914: LD_STRING 
12916: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12917: LD_INT 1
12919: PPUSH
12920: LD_INT 1
12922: PPUSH
12923: LD_EXP 13
12927: PPUSH
12928: LD_EXP 14
12932: PPUSH
12933: CALL_OW 12
12937: PPUSH
12938: CALL_OW 380
// un = CreateHuman ;
12942: LD_ADDR_VAR 0 6
12946: PUSH
12947: CALL_OW 44
12951: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
12952: LD_VAR 0 6
12956: PPUSH
12957: LD_VAR 0 2
12961: PPUSH
12962: LD_INT 0
12964: PPUSH
12965: CALL_OW 49
// attackGroup = attackGroup ^ un ;
12969: LD_ADDR_EXP 26
12973: PUSH
12974: LD_EXP 26
12978: PUSH
12979: LD_VAR 0 6
12983: ADD
12984: ST_TO_ADDR
// end ;
12985: GO 12898
12987: POP
12988: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
12989: LD_ADDR_VAR 0 7
12993: PUSH
12994: LD_INT 26
12996: PPUSH
12997: LD_INT 22
12999: PUSH
13000: LD_INT 3
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PUSH
13007: LD_INT 21
13009: PUSH
13010: LD_INT 1
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: PUSH
13017: LD_INT 26
13019: PUSH
13020: LD_INT 1
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: LIST
13031: PPUSH
13032: CALL_OW 70
13036: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13037: LD_VAR 0 7
13041: PUSH
13042: LD_INT 1
13044: ARRAY
13045: PPUSH
13046: LD_STRING D9-Rus3-1
13048: PPUSH
13049: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13053: LD_VAR 0 7
13057: PUSH
13058: LD_INT 2
13060: ARRAY
13061: PPUSH
13062: LD_STRING D9-Russ-1
13064: PPUSH
13065: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13069: LD_INT 35
13071: PPUSH
13072: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13076: LD_ADDR_VAR 0 4
13080: PUSH
13081: LD_INT 26
13083: PPUSH
13084: LD_INT 22
13086: PUSH
13087: LD_INT 3
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: PUSH
13094: EMPTY
13095: LIST
13096: PPUSH
13097: CALL_OW 70
13101: PUSH
13102: FOR_IN
13103: IFFALSE 13275
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13105: LD_ADDR_VAR 0 8
13109: PUSH
13110: LD_INT 22
13112: PUSH
13113: LD_INT 1
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PPUSH
13120: CALL_OW 69
13124: PPUSH
13125: LD_VAR 0 4
13129: PPUSH
13130: CALL_OW 74
13134: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13135: LD_ADDR_VAR 0 9
13139: PUSH
13140: LD_INT 22
13142: PUSH
13143: LD_INT 1
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 2
13152: PUSH
13153: LD_INT 59
13155: PUSH
13156: EMPTY
13157: LIST
13158: PUSH
13159: LD_INT 21
13161: PUSH
13162: LD_INT 1
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 21
13171: PUSH
13172: LD_INT 2
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: EMPTY
13190: LIST
13191: PPUSH
13192: CALL_OW 69
13196: PPUSH
13197: LD_VAR 0 4
13201: PPUSH
13202: CALL_OW 74
13206: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13207: LD_VAR 0 4
13211: PPUSH
13212: LD_VAR 0 8
13216: PPUSH
13217: CALL_OW 296
13221: PUSH
13222: LD_INT 8
13224: PLUS
13225: PUSH
13226: LD_VAR 0 4
13230: PPUSH
13231: LD_VAR 0 9
13235: PPUSH
13236: CALL_OW 296
13240: LESS
13241: IFFALSE 13259
// begin ComAttackUnit ( i , target1 ) ;
13243: LD_VAR 0 4
13247: PPUSH
13248: LD_VAR 0 8
13252: PPUSH
13253: CALL_OW 115
// end else
13257: GO 13273
// begin ComAttackUnit ( i , target2 ) ;
13259: LD_VAR 0 4
13263: PPUSH
13264: LD_VAR 0 9
13268: PPUSH
13269: CALL_OW 115
// end ; end ;
13273: GO 13102
13275: POP
13276: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13277: LD_INT 26
13279: PPUSH
13280: LD_INT 22
13282: PUSH
13283: LD_INT 3
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: LD_INT 2
13292: PUSH
13293: LD_INT 21
13295: PUSH
13296: LD_INT 1
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PUSH
13303: LD_INT 21
13305: PUSH
13306: LD_INT 2
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PUSH
13313: LD_INT 59
13315: PUSH
13316: EMPTY
13317: LIST
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PPUSH
13329: CALL_OW 70
13333: PUSH
13334: LD_INT 0
13336: EQUAL
13337: IFFALSE 13069
// end ; end_of_file
13339: LD_VAR 0 3
13343: RET
// every 0 0$1 do
13344: GO 13346
13346: DISABLE
// begin enable ;
13347: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13348: LD_INT 3
13350: PPUSH
13351: LD_INT 1
13353: PPUSH
13354: LD_INT 22
13356: PPUSH
13357: CALL 8636 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13361: LD_INT 3
13363: PPUSH
13364: LD_INT 20
13366: PPUSH
13367: LD_INT 22
13369: PPUSH
13370: LD_INT 23
13372: PPUSH
13373: CALL 8882 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13377: LD_INT 3
13379: PPUSH
13380: LD_INT 21
13382: PPUSH
13383: LD_INT 23
13385: PPUSH
13386: CALL 9159 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13390: LD_INT 22
13392: PPUSH
13393: LD_INT 1
13395: PPUSH
13396: LD_EXP 24
13400: PPUSH
13401: LD_INT 2
13403: PPUSH
13404: LD_INT 3
13406: PPUSH
13407: CALL 9631 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13411: LD_INT 23
13413: PPUSH
13414: LD_INT 1
13416: PPUSH
13417: LD_EXP 25
13421: PPUSH
13422: LD_INT 33
13424: PPUSH
13425: LD_INT 1
13427: PPUSH
13428: CALL 9631 0 5
// end ; end_of_file
13432: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 then
13433: LD_VAR 0 1
13437: PPUSH
13438: CALL_OW 255
13442: PUSH
13443: LD_INT 1
13445: EQUAL
13446: IFFALSE 13462
// deadsCounter = deadsCounter + 1 ;
13448: LD_ADDR_EXP 30
13452: PUSH
13453: LD_EXP 30
13457: PUSH
13458: LD_INT 1
13460: PLUS
13461: ST_TO_ADDR
// end ;
13462: PPOPN 1
13464: END
// on Command ( comandid ) do var i , j , tmp ;
13465: LD_INT 0
13467: PPUSH
13468: PPUSH
13469: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13470: LD_ADDR_VAR 0 2
13474: PUSH
13475: LD_INT 22
13477: PUSH
13478: LD_INT 1
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PUSH
13485: LD_INT 21
13487: PUSH
13488: LD_INT 2
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PPUSH
13499: CALL_OW 69
13503: PUSH
13504: FOR_IN
13505: IFFALSE 13630
// begin if GetTaskList ( i ) > 0 then
13507: LD_VAR 0 2
13511: PPUSH
13512: CALL_OW 437
13516: PUSH
13517: LD_INT 0
13519: GREATER
13520: IFFALSE 13628
// begin for j = 1 to GetTaskList ( i ) do
13522: LD_ADDR_VAR 0 3
13526: PUSH
13527: DOUBLE
13528: LD_INT 1
13530: DEC
13531: ST_TO_ADDR
13532: LD_VAR 0 2
13536: PPUSH
13537: CALL_OW 437
13541: PUSH
13542: FOR_TO
13543: IFFALSE 13626
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13545: LD_ADDR_VAR 0 4
13549: PUSH
13550: LD_VAR 0 2
13554: PPUSH
13555: CALL_OW 437
13559: PUSH
13560: LD_VAR 0 3
13564: ARRAY
13565: PUSH
13566: LD_INT 4
13568: ARRAY
13569: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
13570: LD_VAR 0 4
13574: PPUSH
13575: CALL_OW 255
13579: PUSH
13580: LD_INT 3
13582: EQUAL
13583: PUSH
13584: LD_VAR 0 4
13588: PPUSH
13589: CALL_OW 247
13593: PUSH
13594: LD_INT 2
13596: EQUAL
13597: AND
13598: PUSH
13599: LD_VAR 0 4
13603: PPUSH
13604: CALL_OW 264
13608: PUSH
13609: LD_INT 51
13611: EQUAL
13612: AND
13613: IFFALSE 13624
// ComStop ( i ) ;
13615: LD_VAR 0 2
13619: PPUSH
13620: CALL_OW 141
// end ;
13624: GO 13542
13626: POP
13627: POP
// end ; end ;
13628: GO 13504
13630: POP
13631: POP
// end ; end_of_file
13632: PPOPN 4
13634: END
// every 0 0$1 trigger IsDead ( JMM ) do
13635: LD_EXP 1
13639: PPUSH
13640: CALL_OW 301
13644: IFFALSE 13656
13646: GO 13648
13648: DISABLE
// YouLost ( JMM ) ;
13649: LD_STRING JMM
13651: PPUSH
13652: CALL_OW 104
13656: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
13657: LD_INT 1
13659: PPUSH
13660: CALL_OW 301
13664: PUSH
13665: LD_INT 10
13667: PPUSH
13668: CALL_OW 301
13672: OR
13673: IFFALSE 13685
13675: GO 13677
13677: DISABLE
// YouLost ( DepotDestroyed ) ;
13678: LD_STRING DepotDestroyed
13680: PPUSH
13681: CALL_OW 104
13685: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
13686: LD_INT 22
13688: PUSH
13689: LD_INT 1
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: LD_INT 21
13698: PUSH
13699: LD_INT 1
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PUSH
13706: LD_INT 25
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: PPUSH
13721: CALL_OW 69
13725: PUSH
13726: LD_INT 0
13728: EQUAL
13729: PUSH
13730: LD_INT 22
13732: PUSH
13733: LD_INT 4
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: LD_INT 21
13742: PUSH
13743: LD_INT 1
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 25
13752: PUSH
13753: LD_INT 2
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: LIST
13764: PPUSH
13765: CALL_OW 69
13769: PUSH
13770: LD_INT 0
13772: EQUAL
13773: AND
13774: PUSH
13775: LD_INT 1
13777: PPUSH
13778: CALL_OW 255
13782: PUSH
13783: LD_INT 3
13785: EQUAL
13786: AND
13787: PUSH
13788: LD_INT 10
13790: PPUSH
13791: CALL_OW 255
13795: PUSH
13796: LD_INT 3
13798: EQUAL
13799: AND
13800: IFFALSE 13812
13802: GO 13804
13804: DISABLE
// YouLost ( Engineer ) ;
13805: LD_STRING Engineer
13807: PPUSH
13808: CALL_OW 104
13812: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
13813: LD_INT 1
13815: PPUSH
13816: CALL_OW 255
13820: PUSH
13821: LD_INT 3
13823: EQUAL
13824: PUSH
13825: LD_EXP 27
13829: PUSH
13830: LD_INT 1
13832: EQUAL
13833: AND
13834: IFFALSE 13846
13836: GO 13838
13838: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
13839: LD_STRING DepotCaptured
13841: PPUSH
13842: CALL_OW 104
13846: END
// export function PrepareTigers ; var i , un ; begin
13847: LD_INT 0
13849: PPUSH
13850: PPUSH
13851: PPUSH
// for i = 1 to Difficulty do
13852: LD_ADDR_VAR 0 2
13856: PUSH
13857: DOUBLE
13858: LD_INT 1
13860: DEC
13861: ST_TO_ADDR
13862: LD_OWVAR 67
13866: PUSH
13867: FOR_TO
13868: IFFALSE 14003
// begin hc_sex = sex_male ;
13870: LD_ADDR_OWVAR 27
13874: PUSH
13875: LD_INT 1
13877: ST_TO_ADDR
// uc_side = 0 ;
13878: LD_ADDR_OWVAR 20
13882: PUSH
13883: LD_INT 0
13885: ST_TO_ADDR
// uc_nation = nation_nature ;
13886: LD_ADDR_OWVAR 21
13890: PUSH
13891: LD_INT 0
13893: ST_TO_ADDR
// hc_class = class_tiger ;
13894: LD_ADDR_OWVAR 28
13898: PUSH
13899: LD_INT 14
13901: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
13902: LD_ADDR_OWVAR 31
13906: PUSH
13907: LD_EXP 14
13911: PUSH
13912: LD_INT 0
13914: PUSH
13915: LD_INT 0
13917: PUSH
13918: LD_INT 0
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
13927: LD_ADDR_OWVAR 35
13931: PUSH
13932: LD_INT 30
13934: PPUSH
13935: LD_INT 40
13937: PPUSH
13938: CALL_OW 12
13942: PUSH
13943: LD_INT 40
13945: PPUSH
13946: LD_INT 50
13948: PPUSH
13949: CALL_OW 12
13953: PUSH
13954: LD_INT 50
13956: PPUSH
13957: LD_INT 60
13959: PPUSH
13960: CALL_OW 12
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: LIST
13969: PUSH
13970: LD_OWVAR 67
13974: ARRAY
13975: ST_TO_ADDR
// un = CreateHuman ;
13976: LD_ADDR_VAR 0 3
13980: PUSH
13981: CALL_OW 44
13985: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13986: LD_VAR 0 3
13990: PPUSH
13991: LD_INT 27
13993: PPUSH
13994: LD_INT 0
13996: PPUSH
13997: CALL_OW 49
// end ;
14001: GO 13867
14003: POP
14004: POP
// end ; end_of_file
14005: LD_VAR 0 1
14009: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 do
14010: LD_INT 1
14012: PPUSH
14013: CALL_OW 255
14017: PUSH
14018: LD_INT 1
14020: EQUAL
14021: PUSH
14022: LD_INT 10
14024: PPUSH
14025: CALL_OW 255
14029: PUSH
14030: LD_INT 1
14032: EQUAL
14033: AND
14034: PUSH
14035: LD_EXP 20
14039: PUSH
14040: LD_INT 1
14042: EQUAL
14043: AND
14044: IFFALSE 14135
14046: GO 14048
14048: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14049: LD_INT 9450
14051: PUSH
14052: LD_INT 8400
14054: PUSH
14055: LD_INT 6300
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: LIST
14062: PUSH
14063: LD_OWVAR 67
14067: ARRAY
14068: PPUSH
14069: CALL_OW 67
// if cargoEscape = 1 then
14073: LD_EXP 20
14077: PUSH
14078: LD_INT 1
14080: EQUAL
14081: IFFALSE 14135
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14083: LD_EXP 9
14087: PPUSH
14088: LD_STRING D6-Pow-1
14090: PPUSH
14091: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14095: LD_EXP 1
14099: PPUSH
14100: LD_STRING D6-JMM-1
14102: PPUSH
14103: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14107: LD_EXP 9
14111: PPUSH
14112: LD_STRING D6-Pow-2
14114: PPUSH
14115: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14119: LD_EXP 1
14123: PPUSH
14124: LD_STRING D6-JMM-2
14126: PPUSH
14127: CALL_OW 88
// FinishMission ;
14131: CALL 14343 0 0
// end ; end ;
14135: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14136: LD_INT 1
14138: PPUSH
14139: CALL_OW 255
14143: PUSH
14144: LD_INT 1
14146: EQUAL
14147: PUSH
14148: LD_INT 10
14150: PPUSH
14151: CALL_OW 255
14155: PUSH
14156: LD_INT 1
14158: EQUAL
14159: AND
14160: PUSH
14161: LD_EXP 20
14165: PUSH
14166: LD_INT 1
14168: GREATER
14169: AND
14170: IFFALSE 14237
14172: GO 14174
14174: DISABLE
14175: LD_INT 0
14177: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14178: LD_INT 11550
14180: PUSH
14181: LD_INT 10500
14183: PUSH
14184: LD_INT 9450
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: LIST
14191: PUSH
14192: LD_OWVAR 67
14196: ARRAY
14197: PPUSH
14198: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14202: LD_INT 1
14204: PUSH
14205: LD_INT 2
14207: PUSH
14208: LD_INT 3
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: PUSH
14216: LD_OWVAR 67
14220: ARRAY
14221: PPUSH
14222: LD_INT 13
14224: PPUSH
14225: CALL 12608 0 2
// lastBattle = 1 ;
14229: LD_ADDR_EXP 27
14233: PUSH
14234: LD_INT 1
14236: ST_TO_ADDR
// end ;
14237: PPOPN 1
14239: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14240: LD_EXP 27
14244: PUSH
14245: LD_INT 1
14247: EQUAL
14248: PUSH
14249: LD_INT 26
14251: PPUSH
14252: LD_INT 22
14254: PUSH
14255: LD_INT 3
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 21
14264: PUSH
14265: LD_INT 1
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PPUSH
14276: CALL_OW 70
14280: PUSH
14281: LD_INT 0
14283: EQUAL
14284: AND
14285: IFFALSE 14342
14287: GO 14289
14289: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14290: LD_EXP 9
14294: PPUSH
14295: LD_STRING D6-Pow-1
14297: PPUSH
14298: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14302: LD_EXP 1
14306: PPUSH
14307: LD_STRING D6-JMM-1
14309: PPUSH
14310: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14314: LD_EXP 9
14318: PPUSH
14319: LD_STRING D6-Pow-2
14321: PPUSH
14322: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14326: LD_EXP 1
14330: PPUSH
14331: LD_STRING D6-JMM-2
14333: PPUSH
14334: CALL_OW 88
// FinishMission ;
14338: CALL 14343 0 0
// end ;
14342: END
// export function FinishMission ; var tmp ; begin
14343: LD_INT 0
14345: PPUSH
14346: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14347: LD_ADDR_VAR 0 2
14351: PUSH
14352: LD_INT 22
14354: PUSH
14355: LD_INT 1
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 21
14364: PUSH
14365: LD_INT 2
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: LD_INT 24
14374: PUSH
14375: LD_INT 251
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: LIST
14386: PPUSH
14387: CALL_OW 69
14391: ST_TO_ADDR
// if tmp then
14392: LD_VAR 0 2
14396: IFFALSE 14410
// SaveVehicles ( tmp , 02_tanks_1 ) ;
14398: LD_VAR 0 2
14402: PPUSH
14403: LD_STRING 02_tanks_1
14405: PPUSH
14406: CALL 10300 0 2
// if mikhailStatus = 1 then
14410: LD_EXP 21
14414: PUSH
14415: LD_INT 1
14417: EQUAL
14418: IFFALSE 14432
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
14420: LD_EXP 21
14424: PPUSH
14425: LD_STRING 02_mikhailStatus_1
14427: PPUSH
14428: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
14432: LD_INT 1
14434: PPUSH
14435: CALL_OW 274
14439: PPUSH
14440: LD_INT 1
14442: PPUSH
14443: CALL_OW 275
14447: PPUSH
14448: LD_STRING 02_resources_4
14450: PPUSH
14451: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
14455: LD_INT 1
14457: PPUSH
14458: CALL_OW 274
14462: PPUSH
14463: LD_INT 1
14465: PPUSH
14466: CALL_OW 275
14470: PUSH
14471: LD_INT 200
14473: GREATEREQUAL
14474: IFFALSE 14488
// begin AddMedal ( Cans , 1 ) ;
14476: LD_STRING Cans
14478: PPUSH
14479: LD_INT 1
14481: PPUSH
14482: CALL_OW 101
// end else
14486: GO 14499
// begin AddMedal ( Cans , - 1 ) ;
14488: LD_STRING Cans
14490: PPUSH
14491: LD_INT 1
14493: NEG
14494: PPUSH
14495: CALL_OW 101
// end ; if deadsCounter < 2 then
14499: LD_EXP 30
14503: PUSH
14504: LD_INT 2
14506: LESS
14507: IFFALSE 14521
// begin AddMedal ( Deaths , 1 ) ;
14509: LD_STRING Deaths
14511: PPUSH
14512: LD_INT 1
14514: PPUSH
14515: CALL_OW 101
// end else
14519: GO 14532
// begin AddMedal ( Deaths , - 1 ) ;
14521: LD_STRING Deaths
14523: PPUSH
14524: LD_INT 1
14526: NEG
14527: PPUSH
14528: CALL_OW 101
// end ; if mikhailStatus = 0 then
14532: LD_EXP 21
14536: PUSH
14537: LD_INT 0
14539: EQUAL
14540: IFFALSE 14553
// AddMedal ( Prisoner , - 1 ) ;
14542: LD_STRING Prisoner
14544: PPUSH
14545: LD_INT 1
14547: NEG
14548: PPUSH
14549: CALL_OW 101
// if mikhailStatus = 1 then
14553: LD_EXP 21
14557: PUSH
14558: LD_INT 1
14560: EQUAL
14561: IFFALSE 14573
// AddMedal ( Prisoner , 1 ) ;
14563: LD_STRING Prisoner
14565: PPUSH
14566: LD_INT 1
14568: PPUSH
14569: CALL_OW 101
// if mikhailStatus = 2 then
14573: LD_EXP 21
14577: PUSH
14578: LD_INT 2
14580: EQUAL
14581: IFFALSE 14593
// AddMedal ( Prisoner , 2 ) ;
14583: LD_STRING Prisoner
14585: PPUSH
14586: LD_INT 2
14588: PPUSH
14589: CALL_OW 101
// if mikhailStatus = 3 then
14593: LD_EXP 21
14597: PUSH
14598: LD_INT 3
14600: EQUAL
14601: IFFALSE 14614
// AddMedal ( Prisoner , - 2 ) ;
14603: LD_STRING Prisoner
14605: PPUSH
14606: LD_INT 2
14608: NEG
14609: PPUSH
14610: CALL_OW 101
// GiveMedals ( MAIN ) ;
14614: LD_STRING MAIN
14616: PPUSH
14617: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
14621: LD_INT 22
14623: PUSH
14624: LD_INT 1
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 23
14633: PUSH
14634: LD_INT 1
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 21
14643: PUSH
14644: LD_INT 1
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: LIST
14655: PPUSH
14656: CALL_OW 69
14660: PPUSH
14661: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
14665: LD_EXP 1
14669: PPUSH
14670: LD_STRING JMM
14672: PPUSH
14673: CALL_OW 38
// if IsOK ( Bobby ) then
14677: LD_EXP 2
14681: PPUSH
14682: CALL_OW 302
14686: IFFALSE 14700
// SaveCharacters ( Bobby , Bobby ) ;
14688: LD_EXP 2
14692: PPUSH
14693: LD_STRING Bobby
14695: PPUSH
14696: CALL_OW 38
// if IsOK ( Cyrus ) then
14700: LD_EXP 3
14704: PPUSH
14705: CALL_OW 302
14709: IFFALSE 14723
// SaveCharacters ( Cyrus , Cyrus ) ;
14711: LD_EXP 3
14715: PPUSH
14716: LD_STRING Cyrus
14718: PPUSH
14719: CALL_OW 38
// if IsOK ( Lisa ) then
14723: LD_EXP 4
14727: PPUSH
14728: CALL_OW 302
14732: IFFALSE 14746
// SaveCharacters ( Lisa , Lisa ) ;
14734: LD_EXP 4
14738: PPUSH
14739: LD_STRING Lisa
14741: PPUSH
14742: CALL_OW 38
// if IsOK ( Khatam ) then
14746: LD_EXP 5
14750: PPUSH
14751: CALL_OW 302
14755: IFFALSE 14769
// SaveCharacters ( Khatam , Khatam ) ;
14757: LD_EXP 5
14761: PPUSH
14762: LD_STRING Khatam
14764: PPUSH
14765: CALL_OW 38
// if IsOK ( Brian ) then
14769: LD_EXP 6
14773: PPUSH
14774: CALL_OW 302
14778: IFFALSE 14792
// SaveCharacters ( Brian , Brian ) ;
14780: LD_EXP 6
14784: PPUSH
14785: LD_STRING Brian
14787: PPUSH
14788: CALL_OW 38
// if IsOk ( Jerry ) then
14792: LD_EXP 7
14796: PPUSH
14797: CALL_OW 302
14801: IFFALSE 14815
// SaveCharacters ( Jerry , Jerry ) ;
14803: LD_EXP 7
14807: PPUSH
14808: LD_STRING Jerry
14810: PPUSH
14811: CALL_OW 38
// if mikhailStatus = 1 then
14815: LD_EXP 21
14819: PUSH
14820: LD_INT 1
14822: EQUAL
14823: IFFALSE 14837
// SaveCharacters ( Mikhail , Mikhail ) ;
14825: LD_EXP 8
14829: PPUSH
14830: LD_STRING Mikhail
14832: PPUSH
14833: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
14837: LD_INT 50
14839: PUSH
14840: EMPTY
14841: LIST
14842: PUSH
14843: LD_INT 22
14845: PUSH
14846: LD_INT 1
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 21
14855: PUSH
14856: LD_INT 1
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: LIST
14867: PPUSH
14868: CALL_OW 69
14872: PUSH
14873: LD_EXP 1
14877: PUSH
14878: LD_EXP 2
14882: PUSH
14883: LD_EXP 3
14887: PUSH
14888: LD_EXP 4
14892: PUSH
14893: LD_EXP 5
14897: PUSH
14898: LD_EXP 6
14902: PUSH
14903: LD_EXP 7
14907: PUSH
14908: LD_EXP 8
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: DIFF
14923: PPUSH
14924: LD_STRING 02_other_survivors
14926: PPUSH
14927: CALL_OW 38
// YouWin ;
14931: CALL_OW 103
// end ;
14935: LD_VAR 0 1
14939: RET
