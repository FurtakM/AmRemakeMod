// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// PrepareDifficulty ;
 161: CALL 10290 0 0
// PrepareRussianCommander ;
 165: CALL 11626 0 0
// PrepareSouthBase ;
 169: CALL 11709 0 0
// PrepareNorthBase ;
 173: CALL 12066 0 0
// PrepareOtherRussians ;
 177: CALL 12432 0 0
// PrepareHeroes ;
 181: CALL 10605 0 0
// PrepareLisSquad ;
 185: CALL 10848 0 0
// PrepareOtherAmericans ;
 189: CALL 11193 0 0
// end ; end_of_file
 193: END
// every 1 do var tmp ;
 194: GO 196
 196: DISABLE
 197: LD_INT 0
 199: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 209: LD_ADDR_VAR 0 1
 213: PUSH
 214: LD_INT 22
 216: PUSH
 217: LD_INT 4
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 21
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PPUSH
 238: CALL_OW 69
 242: PUSH
 243: LD_EXP 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: DIFF
 251: ST_TO_ADDR
// if Cyrus and Bobby then
 252: LD_EXP 3
 256: PUSH
 257: LD_EXP 2
 261: AND
 262: IFFALSE 592
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 264: LD_EXP 3
 268: PPUSH
 269: LD_INT 43
 271: PPUSH
 272: LD_INT 72
 274: PPUSH
 275: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_INT 44
 286: PPUSH
 287: LD_INT 70
 289: PPUSH
 290: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 294: LD_EXP 1
 298: PPUSH
 299: LD_INT 46
 301: PPUSH
 302: LD_INT 73
 304: PPUSH
 305: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 309: LD_EXP 3
 313: PPUSH
 314: LD_STRING D1a-Cyrus-1
 316: PPUSH
 317: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_STRING D1a-JMM-1
 328: PPUSH
 329: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 333: LD_EXP 3
 337: PPUSH
 338: LD_INT 37
 340: PPUSH
 341: LD_INT 66
 343: PPUSH
 344: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 348: LD_EXP 2
 352: PPUSH
 353: LD_INT 41
 355: PPUSH
 356: LD_INT 67
 358: PPUSH
 359: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 363: LD_EXP 1
 367: PPUSH
 368: LD_INT 38
 370: PPUSH
 371: LD_INT 64
 373: PPUSH
 374: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 378: LD_EXP 2
 382: PPUSH
 383: LD_STRING D1a-Bobby-2
 385: PPUSH
 386: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 390: LD_EXP 3
 394: PPUSH
 395: LD_INT 35
 397: PPUSH
 398: LD_INT 62
 400: PPUSH
 401: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 405: LD_EXP 2
 409: PPUSH
 410: LD_INT 32
 412: PPUSH
 413: LD_INT 60
 415: PPUSH
 416: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 420: LD_EXP 1
 424: PPUSH
 425: LD_INT 35
 427: PPUSH
 428: LD_INT 60
 430: PPUSH
 431: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 435: LD_EXP 1
 439: PPUSH
 440: LD_STRING D1a-JMM-2
 442: PPUSH
 443: CALL_OW 88
// ComWalk ( Lisa ) ;
 447: LD_EXP 4
 451: PPUSH
 452: CALL_OW 138
// wait ( 0 0$1 ) ;
 456: LD_INT 35
 458: PPUSH
 459: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 463: LD_EXP 4
 467: PPUSH
 468: LD_EXP 1
 472: PPUSH
 473: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 477: LD_EXP 1
 481: PUSH
 482: LD_EXP 3
 486: PUSH
 487: LD_EXP 2
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PPUSH
 497: LD_EXP 4
 501: PPUSH
 502: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 506: LD_VAR 0 1
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: LD_INT 33
 517: PPUSH
 518: LD_INT 55
 520: PPUSH
 521: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 525: LD_VAR 0 1
 529: PUSH
 530: LD_INT 2
 532: ARRAY
 533: PPUSH
 534: LD_INT 30
 536: PPUSH
 537: LD_INT 54
 539: PPUSH
 540: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 544: LD_VAR 0 1
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: LD_EXP 1
 557: PPUSH
 558: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 562: LD_VAR 0 1
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 1
 575: PPUSH
 576: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 580: LD_EXP 4
 584: PPUSH
 585: LD_STRING D1a-Lisa-2
 587: PPUSH
 588: CALL_OW 88
// end ; if Cyrus and not Bobby then
 592: LD_EXP 3
 596: PUSH
 597: LD_EXP 2
 601: NOT
 602: AND
 603: IFFALSE 808
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 605: LD_EXP 3
 609: PPUSH
 610: LD_INT 43
 612: PPUSH
 613: LD_INT 72
 615: PPUSH
 616: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 46
 627: PPUSH
 628: LD_INT 73
 630: PPUSH
 631: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 635: LD_EXP 3
 639: PPUSH
 640: LD_STRING D1a-Cyrus-1
 642: PPUSH
 643: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 647: LD_EXP 1
 651: PPUSH
 652: LD_STRING D1a-JMM-1
 654: PPUSH
 655: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 659: LD_EXP 3
 663: PPUSH
 664: LD_INT 37
 666: PPUSH
 667: LD_INT 66
 669: PPUSH
 670: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 674: LD_EXP 1
 678: PPUSH
 679: LD_INT 38
 681: PPUSH
 682: LD_INT 64
 684: PPUSH
 685: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 689: LD_EXP 3
 693: PPUSH
 694: LD_STRING D1a-Cyrus-2
 696: PPUSH
 697: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 701: LD_EXP 3
 705: PPUSH
 706: LD_INT 35
 708: PPUSH
 709: LD_INT 62
 711: PPUSH
 712: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 716: LD_EXP 1
 720: PPUSH
 721: LD_INT 35
 723: PPUSH
 724: LD_INT 60
 726: PPUSH
 727: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 731: LD_EXP 1
 735: PPUSH
 736: LD_STRING D1a-JMM-2
 738: PPUSH
 739: CALL_OW 88
// ComWalk ( Lisa ) ;
 743: LD_EXP 4
 747: PPUSH
 748: CALL_OW 138
// wait ( 0 0$1 ) ;
 752: LD_INT 35
 754: PPUSH
 755: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 759: LD_EXP 4
 763: PPUSH
 764: LD_EXP 1
 768: PPUSH
 769: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 773: LD_EXP 4
 777: PPUSH
 778: LD_STRING D1a-Lisa-2
 780: PPUSH
 781: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 785: LD_EXP 1
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PPUSH
 799: LD_EXP 4
 803: PPUSH
 804: CALL_OW 119
// end ; if not Cyrus and Bobby then
 808: LD_EXP 3
 812: NOT
 813: PUSH
 814: LD_EXP 2
 818: AND
 819: IFFALSE 1098
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 821: LD_EXP 2
 825: PPUSH
 826: LD_INT 44
 828: PPUSH
 829: LD_INT 70
 831: PPUSH
 832: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 836: LD_EXP 1
 840: PPUSH
 841: LD_INT 46
 843: PPUSH
 844: LD_INT 73
 846: PPUSH
 847: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 851: LD_EXP 2
 855: PPUSH
 856: LD_STRING D1a-Bobby-1
 858: PPUSH
 859: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 863: LD_EXP 1
 867: PPUSH
 868: LD_STRING D1a-JMM-1
 870: PPUSH
 871: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 875: LD_EXP 2
 879: PPUSH
 880: LD_INT 37
 882: PPUSH
 883: LD_INT 66
 885: PPUSH
 886: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 890: LD_EXP 1
 894: PPUSH
 895: LD_INT 38
 897: PPUSH
 898: LD_INT 64
 900: PPUSH
 901: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 905: LD_EXP 2
 909: PPUSH
 910: LD_STRING D1a-Bobby-2
 912: PPUSH
 913: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 917: LD_EXP 2
 921: PPUSH
 922: LD_INT 35
 924: PPUSH
 925: LD_INT 62
 927: PPUSH
 928: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 932: LD_EXP 1
 936: PPUSH
 937: LD_INT 35
 939: PPUSH
 940: LD_INT 60
 942: PPUSH
 943: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 947: LD_EXP 1
 951: PPUSH
 952: LD_STRING D1a-JMM-2
 954: PPUSH
 955: CALL_OW 88
// ComWalk ( Lisa ) ;
 959: LD_EXP 4
 963: PPUSH
 964: CALL_OW 138
// wait ( 0 0$1 ) ;
 968: LD_INT 35
 970: PPUSH
 971: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 975: LD_EXP 4
 979: PPUSH
 980: LD_EXP 1
 984: PPUSH
 985: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 989: LD_EXP 1
 993: PUSH
 994: LD_EXP 3
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PPUSH
1003: LD_EXP 4
1007: PPUSH
1008: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1012: LD_VAR 0 1
1016: PUSH
1017: LD_INT 1
1019: ARRAY
1020: PPUSH
1021: LD_INT 33
1023: PPUSH
1024: LD_INT 55
1026: PPUSH
1027: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1031: LD_VAR 0 1
1035: PUSH
1036: LD_INT 2
1038: ARRAY
1039: PPUSH
1040: LD_INT 30
1042: PPUSH
1043: LD_INT 54
1045: PPUSH
1046: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1050: LD_VAR 0 1
1054: PUSH
1055: LD_INT 1
1057: ARRAY
1058: PPUSH
1059: LD_EXP 1
1063: PPUSH
1064: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1068: LD_VAR 0 1
1072: PUSH
1073: LD_INT 2
1075: ARRAY
1076: PPUSH
1077: LD_EXP 1
1081: PPUSH
1082: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1086: LD_EXP 4
1090: PPUSH
1091: LD_STRING D1a-Lisa-2
1093: PPUSH
1094: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1098: LD_EXP 3
1102: NOT
1103: PUSH
1104: LD_EXP 2
1108: NOT
1109: AND
1110: IFFALSE 1324
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1112: LD_EXP 1
1116: PPUSH
1117: LD_INT 37
1119: PPUSH
1120: LD_INT 66
1122: PPUSH
1123: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1127: LD_EXP 1
1131: PPUSH
1132: LD_STRING D1b-JMM-1
1134: PPUSH
1135: CALL_OW 88
// ComCrawl ( JMM ) ;
1139: LD_EXP 1
1143: PPUSH
1144: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1148: LD_EXP 1
1152: PPUSH
1153: LD_INT 35
1155: PPUSH
1156: LD_INT 60
1158: PPUSH
1159: CALL_OW 171
// wait ( 0 0$8 ) ;
1163: LD_INT 280
1165: PPUSH
1166: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_STRING D1b-JMM-1a
1177: PPUSH
1178: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1182: LD_EXP 1
1186: PUSH
1187: LD_EXP 4
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PPUSH
1196: CALL_OW 138
// wait ( 0 0$1 ) ;
1200: LD_INT 35
1202: PPUSH
1203: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1207: LD_EXP 4
1211: PPUSH
1212: LD_EXP 1
1216: PPUSH
1217: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1221: LD_EXP 1
1225: PUSH
1226: EMPTY
1227: LIST
1228: PPUSH
1229: LD_EXP 4
1233: PPUSH
1234: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1238: LD_VAR 0 1
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: LD_INT 33
1249: PPUSH
1250: LD_INT 55
1252: PPUSH
1253: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1257: LD_VAR 0 1
1261: PUSH
1262: LD_INT 2
1264: ARRAY
1265: PPUSH
1266: LD_INT 30
1268: PPUSH
1269: LD_INT 54
1271: PPUSH
1272: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1276: LD_VAR 0 1
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_EXP 1
1289: PPUSH
1290: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1294: LD_VAR 0 1
1298: PUSH
1299: LD_INT 2
1301: ARRAY
1302: PPUSH
1303: LD_EXP 1
1307: PPUSH
1308: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1312: LD_EXP 4
1316: PPUSH
1317: LD_STRING D1b-Lisa-1
1319: PPUSH
1320: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1324: LD_EXP 1
1328: PPUSH
1329: LD_STRING D1-JMM-1
1331: PPUSH
1332: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1336: LD_EXP 4
1340: PPUSH
1341: LD_STRING D1-Lisa-1
1343: PPUSH
1344: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1348: LD_EXP 1
1352: PPUSH
1353: LD_STRING D1-JMM-2
1355: PPUSH
1356: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1360: LD_EXP 9
1364: PPUSH
1365: LD_STRING D1-Pow-2
1367: PPUSH
1368: CALL_OW 94
// if Cyrus then
1372: LD_EXP 3
1376: IFFALSE 1402
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1378: LD_EXP 3
1382: PPUSH
1383: LD_STRING D1-Cyrus-2
1385: PPUSH
1386: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-3
1397: PPUSH
1398: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1402: LD_EXP 9
1406: PPUSH
1407: LD_STRING D1-Pow-3
1409: PPUSH
1410: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1414: LD_EXP 1
1418: PPUSH
1419: LD_STRING D1-JMM-4
1421: PPUSH
1422: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1426: LD_EXP 9
1430: PPUSH
1431: LD_STRING D1-Pow-4
1433: PPUSH
1434: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1438: LD_EXP 9
1442: PPUSH
1443: LD_STRING D1-Pow-4a
1445: PPUSH
1446: CALL_OW 94
// if Cyrus then
1450: LD_EXP 3
1454: IFFALSE 1468
// Say ( Cyrus , D1-Cyrus-4 ) ;
1456: LD_EXP 3
1460: PPUSH
1461: LD_STRING D1-Cyrus-4
1463: PPUSH
1464: CALL_OW 88
// if Bobby then
1468: LD_EXP 2
1472: IFFALSE 1510
// begin Say ( Bobby , D1-Bobby-4 ) ;
1474: LD_EXP 2
1478: PPUSH
1479: LD_STRING D1-Bobby-4
1481: PPUSH
1482: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1486: LD_EXP 4
1490: PPUSH
1491: LD_STRING D1-Lisa-4
1493: PPUSH
1494: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1498: LD_EXP 1
1502: PPUSH
1503: LD_STRING D1-JMM-5
1505: PPUSH
1506: CALL_OW 88
// end ; InGameOff ;
1510: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1514: LD_INT 22
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 69
1528: PUSH
1529: LD_EXP 6
1533: PUSH
1534: LD_EXP 7
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: DIFF
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1551: LD_STRING M1
1553: PPUSH
1554: CALL_OW 337
// SaveForQuickRestart ;
1558: CALL_OW 22
// end ;
1562: PPOPN 1
1564: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1565: LD_INT 7
1567: PPUSH
1568: LD_INT 22
1570: PUSH
1571: LD_INT 1
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 70
1582: PUSH
1583: LD_INT 0
1585: GREATER
1586: IFFALSE 1956
1588: GO 1590
1590: DISABLE
// begin InGameOn ;
1591: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1595: LD_INT 22
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 21
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PPUSH
1619: CALL_OW 69
1623: PPUSH
1624: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1628: LD_INT 24
1630: PPUSH
1631: LD_INT 32
1633: PPUSH
1634: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1638: LD_EXP 5
1642: PPUSH
1643: LD_INT 4
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 4
1660: PPUSH
1661: CALL_OW 336
// wait ( 0 0$1 ) ;
1665: LD_INT 35
1667: PPUSH
1668: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1672: LD_EXP 5
1676: PPUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_INT 38
1682: PPUSH
1683: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1687: LD_EXP 5
1691: PPUSH
1692: LD_EXP 1
1696: PPUSH
1697: CALL_OW 179
// wait ( 0 0$1 ) ;
1701: LD_INT 35
1703: PPUSH
1704: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1708: LD_EXP 5
1712: PPUSH
1713: LD_STRING D2a-Khat-1
1715: PPUSH
1716: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1720: LD_EXP 1
1724: PPUSH
1725: LD_STRING D2a-JMM-1
1727: PPUSH
1728: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1732: LD_EXP 5
1736: PPUSH
1737: LD_STRING D2a-Khat-2
1739: PPUSH
1740: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1744: LD_EXP 1
1748: PPUSH
1749: LD_STRING D2a-JMM-2
1751: PPUSH
1752: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1756: LD_EXP 5
1760: PPUSH
1761: LD_STRING D2a-Khat-3
1763: PPUSH
1764: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1768: LD_EXP 1
1772: PPUSH
1773: LD_STRING D2a-JMM-3
1775: PPUSH
1776: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1780: LD_EXP 5
1784: PPUSH
1785: LD_STRING D2a-Khat-4
1787: PPUSH
1788: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1792: LD_EXP 1
1796: PPUSH
1797: LD_STRING D2a-JMM-4
1799: PPUSH
1800: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1804: LD_EXP 5
1808: PPUSH
1809: LD_STRING D2a-Khat-5
1811: PPUSH
1812: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1816: LD_EXP 1
1820: PPUSH
1821: LD_STRING D2a-JMM-5
1823: PPUSH
1824: CALL_OW 88
// InGameOff ;
1828: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1832: LD_INT 22
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 21
1844: PUSH
1845: LD_INT 1
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 3
1854: PUSH
1855: LD_INT 24
1857: PUSH
1858: LD_INT 800
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: LIST
1873: PPUSH
1874: CALL_OW 69
1878: PUSH
1879: LD_INT 0
1881: GREATER
1882: IFFALSE 1956
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1884: LD_EXP 5
1888: PPUSH
1889: LD_INT 22
1891: PUSH
1892: LD_INT 1
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 21
1901: PUSH
1902: LD_INT 1
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PUSH
1909: LD_INT 3
1911: PUSH
1912: LD_INT 24
1914: PUSH
1915: LD_INT 1000
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_INT 1
1938: ARRAY
1939: PPUSH
1940: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1944: LD_EXP 5
1948: PPUSH
1949: LD_STRING D2b-Khat-1
1951: PPUSH
1952: CALL_OW 88
// end ; end ;
1956: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
1957: LD_INT 15
1959: PPUSH
1960: LD_INT 22
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PPUSH
1970: CALL_OW 70
1974: PUSH
1975: LD_INT 0
1977: GREATER
1978: IFFALSE 3135
1980: GO 1982
1982: DISABLE
1983: LD_INT 0
1985: PPUSH
1986: PPUSH
1987: PPUSH
1988: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
1989: LD_ADDR_VAR 0 2
1993: PUSH
1994: LD_INT 999
1996: PUSH
1997: LD_INT 999
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2007: LD_ADDR_VAR 0 4
2011: PUSH
2012: LD_INT 22
2014: PUSH
2015: LD_INT 1
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 21
2024: PUSH
2025: LD_INT 1
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PPUSH
2036: CALL_OW 69
2040: PUSH
2041: LD_EXP 1
2045: PUSH
2046: LD_EXP 2
2050: PUSH
2051: LD_EXP 3
2055: PUSH
2056: LD_EXP 4
2060: PUSH
2061: LD_EXP 5
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: DIFF
2073: ST_TO_ADDR
// PrepareDeadSoldiers ;
2074: CALL 11351 0 0
// spotCorpses = 1 ;
2078: LD_ADDR_EXP 32
2082: PUSH
2083: LD_INT 1
2085: ST_TO_ADDR
// InGameOn ;
2086: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2090: LD_INT 23
2092: PPUSH
2093: LD_INT 12
2095: PPUSH
2096: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2100: LD_ADDR_VAR 0 3
2104: PUSH
2105: LD_VAR 0 2
2109: PUSH
2110: LD_INT 1
2112: ARRAY
2113: PUSH
2114: LD_INT 2
2116: ARRAY
2117: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2118: LD_ADDR_VAR 0 1
2122: PUSH
2123: LD_INT 22
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: LD_INT 21
2135: PUSH
2136: LD_INT 1
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: PPUSH
2147: CALL_OW 69
2151: PUSH
2152: LD_EXP 1
2156: PUSH
2157: LD_EXP 5
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: DIFF
2166: PUSH
2167: FOR_IN
2168: IFFALSE 2219
// if IsOK ( i ) then
2170: LD_VAR 0 1
2174: PPUSH
2175: CALL_OW 302
2179: IFFALSE 2217
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_VAR 0 2
2190: PUSH
2191: LD_VAR 0 1
2195: PUSH
2196: LD_VAR 0 1
2200: PPUSH
2201: LD_INT 16
2203: PPUSH
2204: CALL_OW 299
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: PUSH
2213: EMPTY
2214: LIST
2215: ADD
2216: ST_TO_ADDR
2217: GO 2167
2219: POP
2220: POP
// for i = 2 to distanceTab do
2221: LD_ADDR_VAR 0 1
2225: PUSH
2226: DOUBLE
2227: LD_INT 2
2229: DEC
2230: ST_TO_ADDR
2231: LD_VAR 0 2
2235: PUSH
2236: FOR_TO
2237: IFFALSE 2283
// if distanceTab [ i ] [ 2 ] < min then
2239: LD_VAR 0 2
2243: PUSH
2244: LD_VAR 0 1
2248: ARRAY
2249: PUSH
2250: LD_INT 2
2252: ARRAY
2253: PUSH
2254: LD_VAR 0 3
2258: LESS
2259: IFFALSE 2281
// min = distanceTab [ i ] [ 2 ] ;
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PUSH
2277: LD_INT 2
2279: ARRAY
2280: ST_TO_ADDR
2281: GO 2236
2283: POP
2284: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2285: LD_ADDR_VAR 0 1
2289: PUSH
2290: LD_INT 22
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 21
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 69
2318: PUSH
2319: LD_EXP 1
2323: PUSH
2324: EMPTY
2325: LIST
2326: DIFF
2327: PUSH
2328: FOR_IN
2329: IFFALSE 2399
// begin ComMoveToArea ( i , DeadCutscene ) ;
2331: LD_VAR 0 1
2335: PPUSH
2336: LD_INT 28
2338: PPUSH
2339: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2343: LD_EXP 1
2347: PPUSH
2348: LD_INT 30
2350: PPUSH
2351: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2355: LD_VAR 0 1
2359: PPUSH
2360: LD_INT 23
2362: PPUSH
2363: LD_INT 11
2365: PPUSH
2366: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2370: LD_EXP 1
2374: PPUSH
2375: LD_INT 23
2377: PPUSH
2378: LD_INT 11
2380: PPUSH
2381: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2385: LD_EXP 34
2389: PPUSH
2390: LD_INT 250
2392: PPUSH
2393: CALL_OW 234
// end ;
2397: GO 2328
2399: POP
2400: POP
// for i = 2 to distanceTab do
2401: LD_ADDR_VAR 0 1
2405: PUSH
2406: DOUBLE
2407: LD_INT 2
2409: DEC
2410: ST_TO_ADDR
2411: LD_VAR 0 2
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2803
// begin if distanceTab [ i ] [ 2 ] = min then
2419: LD_VAR 0 2
2423: PUSH
2424: LD_VAR 0 1
2428: ARRAY
2429: PUSH
2430: LD_INT 2
2432: ARRAY
2433: PUSH
2434: LD_VAR 0 3
2438: EQUAL
2439: IFFALSE 2801
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2441: LD_VAR 0 2
2445: PUSH
2446: LD_VAR 0 1
2450: ARRAY
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: PUSH
2456: LD_EXP 2
2460: EQUAL
2461: IFFALSE 2475
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2463: LD_EXP 2
2467: PPUSH
2468: LD_STRING DCorpses-Bobby-1
2470: PPUSH
2471: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2475: LD_VAR 0 2
2479: PUSH
2480: LD_VAR 0 1
2484: ARRAY
2485: PUSH
2486: LD_INT 1
2488: ARRAY
2489: PUSH
2490: LD_EXP 3
2494: EQUAL
2495: IFFALSE 2509
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2497: LD_EXP 3
2501: PPUSH
2502: LD_STRING DCorpses-Cyrus-1
2504: PPUSH
2505: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2509: LD_VAR 0 2
2513: PUSH
2514: LD_VAR 0 1
2518: ARRAY
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: PUSH
2524: LD_EXP 4
2528: EQUAL
2529: IFFALSE 2543
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2531: LD_EXP 4
2535: PPUSH
2536: LD_STRING DCorpses-Lisa-1
2538: PPUSH
2539: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2543: LD_VAR 0 2
2547: PUSH
2548: LD_VAR 0 1
2552: ARRAY
2553: PUSH
2554: LD_INT 1
2556: ARRAY
2557: PUSH
2558: LD_VAR 0 4
2562: PUSH
2563: LD_INT 1
2565: ARRAY
2566: EQUAL
2567: PUSH
2568: LD_VAR 0 4
2572: PUSH
2573: LD_INT 1
2575: ARRAY
2576: PPUSH
2577: CALL_OW 258
2581: PUSH
2582: LD_INT 1
2584: EQUAL
2585: AND
2586: IFFALSE 2604
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2588: LD_VAR 0 4
2592: PUSH
2593: LD_INT 1
2595: ARRAY
2596: PPUSH
2597: LD_STRING DCorpses-Sol1-1
2599: PPUSH
2600: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_VAR 0 1
2613: ARRAY
2614: PUSH
2615: LD_INT 1
2617: ARRAY
2618: PUSH
2619: LD_VAR 0 4
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: EQUAL
2628: PUSH
2629: LD_VAR 0 4
2633: PUSH
2634: LD_INT 1
2636: ARRAY
2637: PPUSH
2638: CALL_OW 258
2642: PUSH
2643: LD_INT 2
2645: EQUAL
2646: AND
2647: IFFALSE 2665
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2649: LD_VAR 0 4
2653: PUSH
2654: LD_INT 1
2656: ARRAY
2657: PPUSH
2658: LD_STRING DCorpses-FSol1-1
2660: PPUSH
2661: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2665: LD_VAR 0 2
2669: PUSH
2670: LD_VAR 0 1
2674: ARRAY
2675: PUSH
2676: LD_INT 1
2678: ARRAY
2679: PUSH
2680: LD_VAR 0 4
2684: PUSH
2685: LD_INT 2
2687: ARRAY
2688: EQUAL
2689: PUSH
2690: LD_VAR 0 4
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: CALL_OW 258
2703: PUSH
2704: LD_INT 1
2706: EQUAL
2707: AND
2708: IFFALSE 2726
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2710: LD_VAR 0 4
2714: PUSH
2715: LD_INT 2
2717: ARRAY
2718: PPUSH
2719: LD_STRING DCorpses-Sol1-1
2721: PPUSH
2722: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2726: LD_VAR 0 2
2730: PUSH
2731: LD_VAR 0 1
2735: ARRAY
2736: PUSH
2737: LD_INT 1
2739: ARRAY
2740: PUSH
2741: LD_VAR 0 4
2745: PUSH
2746: LD_INT 2
2748: ARRAY
2749: EQUAL
2750: PUSH
2751: LD_VAR 0 4
2755: PUSH
2756: LD_INT 2
2758: ARRAY
2759: PPUSH
2760: CALL_OW 258
2764: PUSH
2765: LD_INT 2
2767: EQUAL
2768: AND
2769: IFFALSE 2787
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2771: LD_VAR 0 4
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_STRING DCorpses-FSol1-1
2782: PPUSH
2783: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2787: LD_EXP 34
2791: PPUSH
2792: LD_INT 150
2794: PPUSH
2795: CALL_OW 234
// break ;
2799: GO 2803
// end ; end ;
2801: GO 2416
2803: POP
2804: POP
// repeat wait ( 0 0$1 ) ;
2805: LD_INT 35
2807: PPUSH
2808: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2812: LD_ADDR_VAR 0 1
2816: PUSH
2817: LD_INT 22
2819: PUSH
2820: LD_INT 1
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 21
2829: PUSH
2830: LD_INT 1
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PPUSH
2841: CALL_OW 69
2845: PUSH
2846: LD_EXP 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: DIFF
2854: PUSH
2855: FOR_IN
2856: IFFALSE 2926
// begin ComMoveToArea ( i , DeadCutscene ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: LD_INT 28
2865: PPUSH
2866: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2870: LD_EXP 1
2874: PPUSH
2875: LD_INT 30
2877: PPUSH
2878: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2882: LD_VAR 0 1
2886: PPUSH
2887: LD_INT 23
2889: PPUSH
2890: LD_INT 11
2892: PPUSH
2893: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2897: LD_EXP 1
2901: PPUSH
2902: LD_INT 23
2904: PPUSH
2905: LD_INT 11
2907: PPUSH
2908: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2912: LD_EXP 34
2916: PPUSH
2917: LD_INT 250
2919: PPUSH
2920: CALL_OW 234
// end ;
2924: GO 2855
2926: POP
2927: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2928: LD_EXP 1
2932: PPUSH
2933: LD_INT 30
2935: PPUSH
2936: CALL_OW 308
2940: IFFALSE 2805
// wait ( 0 0$3 ) ;
2942: LD_INT 105
2944: PPUSH
2945: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2949: LD_EXP 1
2953: PPUSH
2954: LD_STRING DCorpses-JMM-1
2956: PPUSH
2957: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
2961: LD_EXP 34
2965: PPUSH
2966: LD_INT 100
2968: PPUSH
2969: CALL_OW 234
// if IsOK ( Khatam ) then
2973: LD_EXP 5
2977: PPUSH
2978: CALL_OW 302
2982: IFFALSE 3119
// begin repeat wait ( 0 0$1 ) ;
2984: LD_INT 35
2986: PPUSH
2987: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
2991: LD_EXP 5
2995: PPUSH
2996: LD_EXP 34
3000: PPUSH
3001: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3005: LD_EXP 5
3009: PPUSH
3010: LD_EXP 34
3014: PPUSH
3015: CALL_OW 296
3019: PUSH
3020: LD_INT 2
3022: LESS
3023: IFFALSE 2984
// spotCorpses = 0 ;
3025: LD_ADDR_EXP 32
3029: PUSH
3030: LD_INT 0
3032: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3033: LD_EXP 34
3037: PPUSH
3038: LD_INT 10
3040: PPUSH
3041: CALL_OW 234
// wait ( 0 0$3 ) ;
3045: LD_INT 105
3047: PPUSH
3048: CALL_OW 67
// KillUnit ( DyingSold ) ;
3052: LD_EXP 34
3056: PPUSH
3057: CALL_OW 66
// wait ( 0 0$1 ) ;
3061: LD_INT 35
3063: PPUSH
3064: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3068: LD_EXP 1
3072: PUSH
3073: LD_EXP 5
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3086: LD_EXP 5
3090: PPUSH
3091: LD_EXP 1
3095: PPUSH
3096: CALL_OW 119
// wait ( 0 0$1 ) ;
3100: LD_INT 35
3102: PPUSH
3103: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3107: LD_EXP 5
3111: PPUSH
3112: LD_STRING DCorpses-Khat-1
3114: PPUSH
3115: CALL_OW 88
// end ; InGameOff ;
3119: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3123: LD_EXP 1
3127: PPUSH
3128: LD_STRING DCorpses-JMM-2
3130: PPUSH
3131: CALL_OW 88
// end ;
3135: PPOPN 4
3137: END
// every 0 0$1 trigger spotCorpses = 1 do
3138: LD_EXP 32
3142: PUSH
3143: LD_INT 1
3145: EQUAL
3146: IFFALSE 3164
3148: GO 3150
3150: DISABLE
// begin enable ;
3151: ENABLE
// SetLives ( DyingSold , 10 ) ;
3152: LD_EXP 34
3156: PPUSH
3157: LD_INT 10
3159: PPUSH
3160: CALL_OW 234
// end ;
3164: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 15 ) and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do var i ;
3165: LD_INT 8
3167: PPUSH
3168: LD_INT 22
3170: PUSH
3171: LD_INT 1
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PPUSH
3178: CALL_OW 70
3182: PUSH
3183: LD_INT 0
3185: GREATER
3186: PUSH
3187: LD_INT 22
3189: PUSH
3190: LD_INT 1
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PPUSH
3197: CALL_OW 69
3201: PPUSH
3202: LD_EXP 7
3206: PPUSH
3207: CALL_OW 74
3211: PPUSH
3212: LD_EXP 7
3216: PPUSH
3217: CALL_OW 296
3221: PUSH
3222: LD_INT 15
3224: LESS
3225: OR
3226: PUSH
3227: LD_INT 1
3229: PPUSH
3230: CALL_OW 255
3234: PUSH
3235: LD_INT 1
3237: EQUAL
3238: NOT
3239: AND
3240: PUSH
3241: LD_INT 10
3243: PPUSH
3244: CALL_OW 255
3248: PUSH
3249: LD_INT 1
3251: EQUAL
3252: NOT
3253: AND
3254: IFFALSE 3422
3256: GO 3258
3258: DISABLE
3259: LD_INT 0
3261: PPUSH
// begin InGameOn ;
3262: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3266: LD_EXP 7
3270: PPUSH
3271: LD_INT 250
3273: PPUSH
3274: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3278: LD_INT 3
3280: PPUSH
3281: LD_INT 4
3283: PPUSH
3284: LD_INT 2
3286: PPUSH
3287: LD_INT 1
3289: PPUSH
3290: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3294: LD_EXP 6
3298: PUSH
3299: LD_EXP 7
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PPUSH
3308: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3312: LD_ADDR_VAR 0 1
3316: PUSH
3317: LD_INT 9
3319: PPUSH
3320: LD_INT 22
3322: PUSH
3323: LD_INT 3
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: PPUSH
3330: CALL_OW 70
3334: PUSH
3335: FOR_IN
3336: IFFALSE 3349
// ComFree ( i ) ;
3338: LD_VAR 0 1
3342: PPUSH
3343: CALL_OW 139
3347: GO 3335
3349: POP
3350: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3351: LD_ADDR_VAR 0 1
3355: PUSH
3356: LD_INT 22
3358: PUSH
3359: LD_INT 4
3361: PUSH
3362: EMPTY
3363: LIST
3364: LIST
3365: PPUSH
3366: CALL_OW 69
3370: PUSH
3371: FOR_IN
3372: IFFALSE 3385
// ComFree ( i ) ;
3374: LD_VAR 0 1
3378: PPUSH
3379: CALL_OW 139
3383: GO 3371
3385: POP
3386: POP
// wait ( 0 0$1 ) ;
3387: LD_INT 35
3389: PPUSH
3390: CALL_OW 67
// InGameOff ;
3394: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3398: LD_EXP 6
3402: PPUSH
3403: LD_STRING DF-Sol1-1
3405: PPUSH
3406: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3410: LD_EXP 1
3414: PPUSH
3415: LD_STRING DF-JMM-1
3417: PPUSH
3418: CALL_OW 88
// end ;
3422: PPOPN 1
3424: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do
3425: LD_INT 19
3427: PPUSH
3428: LD_INT 22
3430: PUSH
3431: LD_INT 3
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: PPUSH
3438: CALL_OW 70
3442: PUSH
3443: LD_INT 0
3445: EQUAL
3446: PUSH
3447: LD_INT 1
3449: PPUSH
3450: CALL_OW 255
3454: PUSH
3455: LD_INT 1
3457: EQUAL
3458: NOT
3459: AND
3460: PUSH
3461: LD_INT 10
3463: PPUSH
3464: CALL_OW 255
3468: PUSH
3469: LD_INT 1
3471: EQUAL
3472: NOT
3473: AND
3474: IFFALSE 3587
3476: GO 3478
3478: DISABLE
// begin if not IsDead ( Brian ) then
3479: LD_EXP 6
3483: PPUSH
3484: CALL_OW 301
3488: NOT
3489: IFFALSE 3503
// SetSide ( Brian , 1 ) ;
3491: LD_EXP 6
3495: PPUSH
3496: LD_INT 1
3498: PPUSH
3499: CALL_OW 235
// if not IsDead ( Jerry ) then
3503: LD_EXP 7
3507: PPUSH
3508: CALL_OW 301
3512: NOT
3513: IFFALSE 3527
// SetSide ( Jerry , 1 ) ;
3515: LD_EXP 7
3519: PPUSH
3520: LD_INT 1
3522: PPUSH
3523: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3527: LD_INT 22
3529: PUSH
3530: LD_INT 1
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 25
3539: PUSH
3540: LD_INT 4
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PPUSH
3551: CALL_OW 69
3555: PUSH
3556: LD_INT 0
3558: GREATER
3559: IFFALSE 3575
// begin Say ( JMM , DFa-JMM-1 ) ;
3561: LD_EXP 1
3565: PPUSH
3566: LD_STRING DFa-JMM-1
3568: PPUSH
3569: CALL_OW 88
// end else
3573: GO 3587
// begin Say ( JMM , DFa-JMM-1a ) ;
3575: LD_EXP 1
3579: PPUSH
3580: LD_STRING DFa-JMM-1a
3582: PPUSH
3583: CALL_OW 88
// end ; end ;
3587: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3588: LD_INT 19
3590: PPUSH
3591: LD_INT 22
3593: PUSH
3594: LD_INT 3
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PPUSH
3601: CALL_OW 70
3605: PUSH
3606: LD_INT 0
3608: EQUAL
3609: PUSH
3610: LD_EXP 6
3614: PPUSH
3615: CALL_OW 302
3619: NOT
3620: AND
3621: IFFALSE 3698
3623: GO 3625
3625: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3626: LD_INT 35
3628: PPUSH
3629: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3633: LD_EXP 6
3637: PPUSH
3638: CALL_OW 256
3642: PUSH
3643: LD_INT 250
3645: GREATER
3646: IFFALSE 3626
// Say ( Brian , DFb-Sol1-1 ) ;
3648: LD_EXP 6
3652: PPUSH
3653: LD_STRING DFb-Sol1-1
3655: PPUSH
3656: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3660: LD_EXP 6
3664: PPUSH
3665: LD_INT 78
3667: PPUSH
3668: LD_INT 74
3670: PPUSH
3671: CALL_OW 111
// if IsDead ( Jerry ) then
3675: LD_EXP 7
3679: PPUSH
3680: CALL_OW 301
3684: IFFALSE 3698
// Say ( Brian , DFb-Sol1-1a ) end ;
3686: LD_EXP 6
3690: PPUSH
3691: LD_STRING DFb-Sol1-1a
3693: PPUSH
3694: CALL_OW 88
3698: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3699: LD_INT 22
3701: PUSH
3702: LD_INT 1
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: LD_INT 21
3711: PUSH
3712: LD_INT 2
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PPUSH
3723: CALL_OW 69
3727: PUSH
3728: LD_INT 0
3730: EQUAL
3731: IFFALSE 3819
3733: GO 3735
3735: DISABLE
3736: LD_INT 0
3738: PPUSH
// begin enable ;
3739: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3740: LD_ADDR_VAR 0 1
3744: PUSH
3745: LD_INT 22
3747: PUSH
3748: LD_INT 3
3750: PUSH
3751: EMPTY
3752: LIST
3753: LIST
3754: PUSH
3755: LD_INT 21
3757: PUSH
3758: LD_INT 3
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: PUSH
3765: LD_INT 30
3767: PUSH
3768: LD_INT 31
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: LIST
3779: PPUSH
3780: CALL_OW 69
3784: PUSH
3785: FOR_IN
3786: IFFALSE 3817
// begin if See ( 1 , i ) then
3788: LD_INT 1
3790: PPUSH
3791: LD_VAR 0 1
3795: PPUSH
3796: CALL_OW 292
3800: IFFALSE 3815
// begin disable ;
3802: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3803: LD_EXP 1
3807: PPUSH
3808: LD_STRING DX1-JMM-1
3810: PPUSH
3811: CALL_OW 88
// end ; end ;
3815: GO 3785
3817: POP
3818: POP
// end ;
3819: PPOPN 1
3821: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3822: LD_INT 1
3824: PPUSH
3825: LD_INT 11
3827: PPUSH
3828: CALL_OW 294
3832: IFFALSE 4195
3834: GO 3836
3836: DISABLE
3837: LD_INT 0
3839: PPUSH
3840: PPUSH
// begin DialogueOn ;
3841: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3845: LD_INT 11
3847: PPUSH
3848: LD_INT 22
3850: PUSH
3851: LD_INT 3
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PUSH
3858: LD_INT 21
3860: PUSH
3861: LD_INT 1
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: PPUSH
3872: CALL_OW 70
3876: PUSH
3877: LD_INT 1
3879: ARRAY
3880: PPUSH
3881: LD_STRING DX3-Rus1-1
3883: PPUSH
3884: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING DX3-JMM-1
3895: PPUSH
3896: CALL_OW 88
// DialogueOff ;
3900: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3904: LD_ADDR_VAR 0 1
3908: PUSH
3909: LD_INT 11
3911: PPUSH
3912: LD_INT 22
3914: PUSH
3915: LD_INT 3
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_INT 21
3924: PUSH
3925: LD_INT 1
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: PPUSH
3936: CALL_OW 70
3940: PUSH
3941: FOR_IN
3942: IFFALSE 3962
// southBaseDefenders = southBaseDefenders ^ i ;
3944: LD_ADDR_EXP 25
3948: PUSH
3949: LD_EXP 25
3953: PUSH
3954: LD_VAR 0 1
3958: ADD
3959: ST_TO_ADDR
3960: GO 3941
3962: POP
3963: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
3964: LD_INT 455
3966: PUSH
3967: LD_INT 420
3969: PUSH
3970: LD_INT 315
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: LIST
3977: PUSH
3978: LD_OWVAR 67
3982: ARRAY
3983: PPUSH
3984: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3988: LD_INT 35
3990: PPUSH
3991: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
3995: LD_ADDR_VAR 0 1
3999: PUSH
4000: LD_INT 22
4002: PUSH
4003: LD_INT 3
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: PUSH
4010: LD_INT 21
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: EMPTY
4017: LIST
4018: LIST
4019: PUSH
4020: LD_INT 58
4022: PUSH
4023: EMPTY
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: LIST
4030: PPUSH
4031: CALL_OW 69
4035: PUSH
4036: FOR_IN
4037: IFFALSE 4107
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
4039: LD_ADDR_VAR 0 2
4043: PUSH
4044: LD_INT 22
4046: PUSH
4047: LD_INT 3
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: PUSH
4054: LD_INT 21
4056: PUSH
4057: LD_INT 1
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: LD_INT 25
4066: PUSH
4067: LD_INT 3
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: LIST
4078: PPUSH
4079: CALL_OW 69
4083: PUSH
4084: FOR_IN
4085: IFFALSE 4103
// begin ComEnterUnit ( j , i ) ;
4087: LD_VAR 0 2
4091: PPUSH
4092: LD_VAR 0 1
4096: PPUSH
4097: CALL_OW 120
// end ;
4101: GO 4084
4103: POP
4104: POP
// end ;
4105: GO 4036
4107: POP
4108: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4109: LD_INT 22
4111: PUSH
4112: LD_INT 3
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PUSH
4119: LD_INT 21
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: PUSH
4129: LD_INT 58
4131: PUSH
4132: EMPTY
4133: LIST
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: PPUSH
4140: CALL_OW 69
4144: PUSH
4145: LD_INT 0
4147: EQUAL
4148: PUSH
4149: LD_INT 22
4151: PUSH
4152: LD_INT 3
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PUSH
4159: LD_INT 21
4161: PUSH
4162: LD_INT 1
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: PUSH
4169: LD_INT 25
4171: PUSH
4172: LD_INT 3
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 69
4188: PUSH
4189: LD_INT 0
4191: EQUAL
4192: OR
4193: IFFALSE 3988
// end ;
4195: PPOPN 2
4197: END
// every 0 0$1 do var i , tmp ;
4198: GO 4200
4200: DISABLE
4201: LD_INT 0
4203: PPUSH
4204: PPUSH
// begin enable ;
4205: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4206: LD_ADDR_VAR 0 2
4210: PUSH
4211: LD_INT 22
4213: PUSH
4214: LD_INT 1
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: LD_INT 21
4223: PUSH
4224: LD_INT 1
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: PPUSH
4235: CALL_OW 69
4239: ST_TO_ADDR
// for i in tmp do
4240: LD_ADDR_VAR 0 1
4244: PUSH
4245: LD_VAR 0 2
4249: PUSH
4250: FOR_IN
4251: IFFALSE 4373
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4253: LD_VAR 0 1
4257: PPUSH
4258: LD_INT 5
4260: PPUSH
4261: CALL_OW 296
4265: PUSH
4266: LD_INT 4
4268: LESS
4269: PUSH
4270: LD_VAR 0 1
4274: PPUSH
4275: LD_INT 4
4277: PPUSH
4278: CALL_OW 296
4282: PUSH
4283: LD_INT 4
4285: LESS
4286: OR
4287: IFFALSE 4371
// begin disable ;
4289: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4290: LD_INT 5
4292: PUSH
4293: LD_INT 4
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: PPUSH
4300: CALL_OW 85
// if IsOK ( Bobby ) then
4304: LD_EXP 2
4308: PPUSH
4309: CALL_OW 302
4313: IFFALSE 4350
// begin DialogueOn ;
4315: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4319: LD_EXP 2
4323: PPUSH
4324: LD_STRING DX2-Bobby-1
4326: PPUSH
4327: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4331: LD_EXP 1
4335: PPUSH
4336: LD_STRING DX2-JMM-1a
4338: PPUSH
4339: CALL_OW 88
// DialogueOff ;
4343: CALL_OW 7
// disable ;
4347: DISABLE
// end else
4348: GO 4371
// begin DialogueOn ;
4350: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4354: LD_EXP 1
4358: PPUSH
4359: LD_STRING DX2-JMM-1
4361: PPUSH
4362: CALL_OW 88
// DialogueOff ;
4366: CALL_OW 7
// disable ;
4370: DISABLE
// end ; end ; end ;
4371: GO 4250
4373: POP
4374: POP
// end ;
4375: PPOPN 2
4377: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4378: LD_INT 22
4380: PUSH
4381: LD_INT 1
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: PUSH
4388: LD_INT 23
4390: PUSH
4391: LD_INT 3
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PUSH
4398: LD_INT 21
4400: PUSH
4401: LD_INT 2
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: LD_INT 34
4410: PUSH
4411: LD_INT 42
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: PPUSH
4424: CALL_OW 69
4428: PUSH
4429: LD_INT 1
4431: GREATEREQUAL
4432: IFFALSE 4899
4434: GO 4436
4436: DISABLE
4437: LD_INT 0
4439: PPUSH
4440: PPUSH
4441: PPUSH
4442: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4443: LD_ADDR_VAR 0 1
4447: PUSH
4448: LD_INT 22
4450: PUSH
4451: LD_INT 1
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: LD_INT 23
4460: PUSH
4461: LD_INT 3
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PUSH
4468: LD_INT 21
4470: PUSH
4471: LD_INT 2
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 34
4480: PUSH
4481: LD_INT 42
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 69
4498: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4499: LD_ADDR_VAR 0 2
4503: PUSH
4504: LD_INT 22
4506: PUSH
4507: LD_INT 1
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: LD_INT 21
4516: PUSH
4517: LD_INT 1
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 26
4526: PUSH
4527: LD_INT 1
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: PPUSH
4539: CALL_OW 69
4543: PUSH
4544: LD_EXP 1
4548: PUSH
4549: LD_EXP 3
4553: PUSH
4554: LD_EXP 2
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: DIFF
4564: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4565: LD_ADDR_VAR 0 3
4569: PUSH
4570: LD_INT 22
4572: PUSH
4573: LD_INT 1
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: LD_INT 21
4582: PUSH
4583: LD_INT 1
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: PUSH
4590: LD_INT 26
4592: PUSH
4593: LD_INT 2
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: PPUSH
4605: CALL_OW 69
4609: PUSH
4610: LD_EXP 4
4614: PUSH
4615: EMPTY
4616: LIST
4617: DIFF
4618: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
4619: LD_EXP 1
4623: PPUSH
4624: CALL_OW 310
4628: NOT
4629: IFFALSE 4643
// Say ( JMM , DX2a-JMM-1 ) ;
4631: LD_EXP 1
4635: PPUSH
4636: LD_STRING DX2a-JMM-1
4638: PPUSH
4639: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4643: LD_EXP 2
4647: PPUSH
4648: CALL_OW 310
4652: PUSH
4653: LD_VAR 0 1
4657: PUSH
4658: LD_INT 1
4660: ARRAY
4661: EQUAL
4662: IFFALSE 4676
// Say ( Bobby , DX2a-Bobby-1 ) ;
4664: LD_EXP 2
4668: PPUSH
4669: LD_STRING DX2a-Bobby-1
4671: PPUSH
4672: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4676: LD_EXP 3
4680: PPUSH
4681: CALL_OW 310
4685: PUSH
4686: LD_VAR 0 1
4690: PUSH
4691: LD_INT 1
4693: ARRAY
4694: EQUAL
4695: IFFALSE 4709
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4697: LD_EXP 3
4701: PPUSH
4702: LD_STRING DX2a-Cyrus-1
4704: PPUSH
4705: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4709: LD_EXP 4
4713: PPUSH
4714: CALL_OW 310
4718: PUSH
4719: LD_VAR 0 1
4723: PUSH
4724: LD_INT 1
4726: ARRAY
4727: EQUAL
4728: IFFALSE 4742
// Say ( Lisa , DX2a-Lisa-1 ) ;
4730: LD_EXP 4
4734: PPUSH
4735: LD_STRING DX2a-Lisa-1
4737: PPUSH
4738: CALL_OW 88
// for i in temp1 do
4742: LD_ADDR_VAR 0 4
4746: PUSH
4747: LD_VAR 0 2
4751: PUSH
4752: FOR_IN
4753: IFFALSE 4790
// if IsInUnit ( i ) = tmp [ 1 ] then
4755: LD_VAR 0 4
4759: PPUSH
4760: CALL_OW 310
4764: PUSH
4765: LD_VAR 0 1
4769: PUSH
4770: LD_INT 1
4772: ARRAY
4773: EQUAL
4774: IFFALSE 4788
// Say ( i , DX2a-Sol1-1 ) ;
4776: LD_VAR 0 4
4780: PPUSH
4781: LD_STRING DX2a-Sol1-1
4783: PPUSH
4784: CALL_OW 88
4788: GO 4752
4790: POP
4791: POP
// for i in temp2 do
4792: LD_ADDR_VAR 0 4
4796: PUSH
4797: LD_VAR 0 3
4801: PUSH
4802: FOR_IN
4803: IFFALSE 4840
// if IsInUnit ( i ) = tmp [ 1 ] then
4805: LD_VAR 0 4
4809: PPUSH
4810: CALL_OW 310
4814: PUSH
4815: LD_VAR 0 1
4819: PUSH
4820: LD_INT 1
4822: ARRAY
4823: EQUAL
4824: IFFALSE 4838
// Say ( i , DX2a-FSol1-1 ) ;
4826: LD_VAR 0 4
4830: PPUSH
4831: LD_STRING DX2a-FSol1-1
4833: PPUSH
4834: CALL_OW 88
4838: GO 4802
4840: POP
4841: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4842: LD_EXP 1
4846: PPUSH
4847: CALL_OW 310
4851: PUSH
4852: LD_VAR 0 1
4856: PUSH
4857: LD_INT 1
4859: ARRAY
4860: EQUAL
4861: IFFALSE 4875
// Say ( JMM , DX2b-JMM-1 ) ;
4863: LD_EXP 1
4867: PPUSH
4868: LD_STRING DX2b-JMM-1
4870: PPUSH
4871: CALL_OW 88
// if not IsInUnit ( JMM ) then
4875: LD_EXP 1
4879: PPUSH
4880: CALL_OW 310
4884: NOT
4885: IFFALSE 4899
// Say ( JMM , DX2a-JMM-2 ) ;
4887: LD_EXP 1
4891: PPUSH
4892: LD_STRING DX2a-JMM-2
4894: PPUSH
4895: CALL_OW 88
// end ;
4899: PPOPN 4
4901: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4902: LD_INT 1
4904: PPUSH
4905: CALL_OW 255
4909: PUSH
4910: LD_INT 1
4912: EQUAL
4913: PUSH
4914: LD_INT 10
4916: PPUSH
4917: CALL_OW 255
4921: PUSH
4922: LD_INT 1
4924: EQUAL
4925: OR
4926: IFFALSE 4986
4928: GO 4930
4930: DISABLE
// begin DialogueOn ;
4931: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4935: LD_EXP 1
4939: PPUSH
4940: LD_STRING D3-JMM-1
4942: PPUSH
4943: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4947: LD_EXP 9
4951: PPUSH
4952: LD_STRING D3-Pow-1
4954: PPUSH
4955: CALL_OW 94
// if IsOK ( Cyrus ) then
4959: LD_EXP 3
4963: PPUSH
4964: CALL_OW 302
4968: IFFALSE 4982
// Say ( Cyrus , D3-Cyrus-1 ) ;
4970: LD_EXP 3
4974: PPUSH
4975: LD_STRING D3-Cyrus-1
4977: PPUSH
4978: CALL_OW 88
// DialogueOff ;
4982: CALL_OW 7
// end ;
4986: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and FilterUnitsInArea ( NorthBase , [ f_side , 3 ] ) = 0 do var temp , i ;
4987: LD_INT 1
4989: PPUSH
4990: CALL_OW 255
4994: PUSH
4995: LD_INT 1
4997: EQUAL
4998: PUSH
4999: LD_INT 10
5001: PPUSH
5002: CALL_OW 255
5006: PUSH
5007: LD_INT 1
5009: EQUAL
5010: AND
5011: PUSH
5012: LD_INT 22
5014: PPUSH
5015: LD_INT 22
5017: PUSH
5018: LD_INT 3
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PPUSH
5025: CALL_OW 70
5029: PUSH
5030: LD_INT 0
5032: EQUAL
5033: AND
5034: IFFALSE 6242
5036: GO 5038
5038: DISABLE
5039: LD_INT 0
5041: PPUSH
5042: PPUSH
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) diff [ JMM ] ;
5043: LD_ADDR_VAR 0 1
5047: PUSH
5048: LD_INT 22
5050: PUSH
5051: LD_INT 1
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PUSH
5058: LD_INT 23
5060: PUSH
5061: LD_INT 1
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PUSH
5068: LD_INT 25
5070: PUSH
5071: LD_INT 2
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: LIST
5082: PPUSH
5083: CALL_OW 69
5087: PUSH
5088: LD_EXP 1
5092: PUSH
5093: EMPTY
5094: LIST
5095: DIFF
5096: ST_TO_ADDR
// DialogueOn ;
5097: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5101: LD_EXP 1
5105: PPUSH
5106: LD_STRING D3a-JMM-1
5108: PPUSH
5109: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5113: LD_EXP 9
5117: PPUSH
5118: LD_STRING D3a-Pow-1
5120: PPUSH
5121: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5125: LD_EXP 1
5129: PPUSH
5130: LD_STRING D3a-JMM-2
5132: PPUSH
5133: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5137: LD_EXP 9
5141: PPUSH
5142: LD_STRING D3a-Pow-2
5144: PPUSH
5145: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5149: LD_EXP 1
5153: PPUSH
5154: LD_STRING D3a-JMM-3
5156: PPUSH
5157: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5161: LD_EXP 9
5165: PPUSH
5166: LD_STRING D3a-Pow-3
5168: PPUSH
5169: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5173: LD_EXP 1
5177: PPUSH
5178: LD_STRING D3a-JMM-4
5180: PPUSH
5181: CALL_OW 88
// DialogueOff ;
5185: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5189: LD_STRING M2
5191: PPUSH
5192: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5196: LD_EXP 1
5200: PPUSH
5201: LD_STRING D3b-JMM-1
5203: PPUSH
5204: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5208: LD_INT 35
5210: PPUSH
5211: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5215: LD_INT 22
5217: PPUSH
5218: LD_INT 22
5220: PUSH
5221: LD_INT 1
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: LD_INT 25
5230: PUSH
5231: LD_INT 2
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PPUSH
5242: CALL_OW 70
5246: IFFALSE 5208
// wait ( 0 0$5 ) ;
5248: LD_INT 175
5250: PPUSH
5251: CALL_OW 67
// InGameOn ;
5255: CALL_OW 8
// PrepareRussianHeroes ;
5259: CALL 11508 0 0
// CenterNowOnUnits ( Mikhail ) ;
5263: LD_EXP 8
5267: PPUSH
5268: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5272: LD_EXP 1
5276: PUSH
5277: LD_VAR 0 1
5281: PUSH
5282: LD_INT 1
5284: ARRAY
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: PPUSH
5290: LD_EXP 8
5294: PPUSH
5295: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5299: LD_EXP 8
5303: PPUSH
5304: LD_VAR 0 1
5308: PUSH
5309: LD_INT 1
5311: ARRAY
5312: PPUSH
5313: CALL_OW 119
// Wait ( 0 0$02 ) ;
5317: LD_INT 70
5319: PPUSH
5320: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5324: LD_EXP 8
5328: PPUSH
5329: LD_STRING D4-Mikh-1
5331: PPUSH
5332: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5336: LD_VAR 0 1
5340: PUSH
5341: LD_INT 1
5343: ARRAY
5344: PPUSH
5345: CALL_OW 258
5349: PUSH
5350: LD_INT 1
5352: EQUAL
5353: IFFALSE 5371
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5355: LD_VAR 0 1
5359: PUSH
5360: LD_INT 1
5362: ARRAY
5363: PPUSH
5364: LD_STRING D4-Sol1-1
5366: PPUSH
5367: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5371: LD_VAR 0 1
5375: PUSH
5376: LD_INT 1
5378: ARRAY
5379: PPUSH
5380: CALL_OW 258
5384: PUSH
5385: LD_INT 2
5387: EQUAL
5388: IFFALSE 5406
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5390: LD_VAR 0 1
5394: PUSH
5395: LD_INT 1
5397: ARRAY
5398: PPUSH
5399: LD_STRING D4-FSol1-1
5401: PPUSH
5402: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5406: LD_EXP 8
5410: PPUSH
5411: LD_STRING D4-Mikh-2
5413: PPUSH
5414: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5418: LD_VAR 0 1
5422: PUSH
5423: LD_INT 1
5425: ARRAY
5426: PPUSH
5427: CALL_OW 258
5431: PUSH
5432: LD_INT 1
5434: EQUAL
5435: IFFALSE 5453
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5437: LD_VAR 0 1
5441: PUSH
5442: LD_INT 1
5444: ARRAY
5445: PPUSH
5446: LD_STRING D4-Sol1-2
5448: PPUSH
5449: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5453: LD_VAR 0 1
5457: PUSH
5458: LD_INT 1
5460: ARRAY
5461: PPUSH
5462: CALL_OW 258
5466: PUSH
5467: LD_INT 2
5469: EQUAL
5470: IFFALSE 5488
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5472: LD_VAR 0 1
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PPUSH
5481: LD_STRING D4-FSol1-2
5483: PPUSH
5484: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5488: LD_EXP 8
5492: PPUSH
5493: LD_STRING D4-Mikh-3
5495: PPUSH
5496: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5500: LD_VAR 0 1
5504: PUSH
5505: LD_INT 1
5507: ARRAY
5508: PPUSH
5509: CALL_OW 258
5513: PUSH
5514: LD_INT 1
5516: EQUAL
5517: IFFALSE 5535
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5519: LD_VAR 0 1
5523: PUSH
5524: LD_INT 1
5526: ARRAY
5527: PPUSH
5528: LD_STRING D4-Sol1-3
5530: PPUSH
5531: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5535: LD_VAR 0 1
5539: PUSH
5540: LD_INT 1
5542: ARRAY
5543: PPUSH
5544: CALL_OW 258
5548: PUSH
5549: LD_INT 2
5551: EQUAL
5552: IFFALSE 5570
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5554: LD_VAR 0 1
5558: PUSH
5559: LD_INT 1
5561: ARRAY
5562: PPUSH
5563: LD_STRING D4-FSol1-3
5565: PPUSH
5566: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5570: LD_EXP 8
5574: PPUSH
5575: LD_STRING D4-Mikh-4
5577: PPUSH
5578: CALL_OW 88
// case query ( Qs1 ) of 1 :
5582: LD_STRING Qs1
5584: PPUSH
5585: CALL_OW 97
5589: PUSH
5590: LD_INT 1
5592: DOUBLE
5593: EQUAL
5594: IFTRUE 5598
5596: GO 5633
5598: POP
// begin InGameOff ;
5599: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5603: LD_INT 1
5605: PPUSH
5606: LD_INT 6
5608: PPUSH
5609: LD_INT 2
5611: PPUSH
5612: LD_INT 1
5614: PPUSH
5615: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5619: LD_EXP 8
5623: PPUSH
5624: LD_INT 17
5626: PPUSH
5627: CALL_OW 113
// end ; 2 :
5631: GO 6226
5633: LD_INT 2
5635: DOUBLE
5636: EQUAL
5637: IFTRUE 5641
5639: GO 6191
5641: POP
// begin repeat wait ( 0 0$1 ) ;
5642: LD_INT 35
5644: PPUSH
5645: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5649: LD_VAR 0 1
5653: PUSH
5654: LD_INT 1
5656: ARRAY
5657: PPUSH
5658: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5662: LD_VAR 0 1
5666: PUSH
5667: LD_INT 1
5669: ARRAY
5670: PPUSH
5671: LD_EXP 1
5675: PPUSH
5676: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5680: LD_EXP 8
5684: PPUSH
5685: LD_EXP 1
5689: PPUSH
5690: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5694: LD_EXP 1
5698: PPUSH
5699: LD_EXP 8
5703: PPUSH
5704: CALL_OW 296
5708: PUSH
5709: LD_INT 5
5711: LESS
5712: IFFALSE 5642
// ComTurnUnit ( Mikhail , JMM ) ;
5714: LD_EXP 8
5718: PPUSH
5719: LD_EXP 1
5723: PPUSH
5724: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5728: LD_EXP 1
5732: PPUSH
5733: LD_STRING D4b-JMM-1
5735: PPUSH
5736: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5740: LD_EXP 8
5744: PPUSH
5745: LD_STRING D4b-Mikh-1
5747: PPUSH
5748: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5752: LD_EXP 1
5756: PPUSH
5757: LD_STRING D4b-JMM-2
5759: PPUSH
5760: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5764: LD_EXP 8
5768: PPUSH
5769: LD_STRING D4b-Mikh-2
5771: PPUSH
5772: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5776: LD_EXP 1
5780: PPUSH
5781: LD_STRING D4b-JMM-3
5783: PPUSH
5784: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5788: LD_EXP 8
5792: PPUSH
5793: LD_STRING D4b-Mikh-3
5795: PPUSH
5796: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5800: LD_EXP 1
5804: PPUSH
5805: LD_STRING D4b-JMM-4
5807: PPUSH
5808: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5812: LD_EXP 8
5816: PPUSH
5817: LD_STRING D4b-Mikh-4
5819: PPUSH
5820: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5824: LD_EXP 1
5828: PPUSH
5829: LD_STRING D4b-JMM-5
5831: PPUSH
5832: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5836: LD_EXP 8
5840: PPUSH
5841: LD_STRING D4b-Mikh-5
5843: PPUSH
5844: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5848: LD_EXP 1
5852: PPUSH
5853: LD_STRING D4b-JMM-6
5855: PPUSH
5856: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5860: LD_EXP 8
5864: PPUSH
5865: LD_STRING D4b-Mikh-6
5867: PPUSH
5868: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5872: LD_EXP 1
5876: PPUSH
5877: LD_STRING D4b-JMM-7
5879: PPUSH
5880: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5884: LD_EXP 8
5888: PPUSH
5889: LD_STRING D4b-Mikh-7
5891: PPUSH
5892: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5896: LD_VAR 0 1
5900: PUSH
5901: LD_INT 1
5903: ARRAY
5904: PPUSH
5905: CALL_OW 258
5909: PUSH
5910: LD_INT 1
5912: EQUAL
5913: IFFALSE 5931
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5915: LD_VAR 0 1
5919: PUSH
5920: LD_INT 1
5922: ARRAY
5923: PPUSH
5924: LD_STRING D4b-Sol1-7
5926: PPUSH
5927: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5931: LD_VAR 0 1
5935: PUSH
5936: LD_INT 1
5938: ARRAY
5939: PPUSH
5940: CALL_OW 258
5944: PUSH
5945: LD_INT 2
5947: EQUAL
5948: IFFALSE 5966
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5950: LD_VAR 0 1
5954: PUSH
5955: LD_INT 1
5957: ARRAY
5958: PPUSH
5959: LD_STRING D4b-FSol1-7
5961: PPUSH
5962: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5966: LD_EXP 1
5970: PPUSH
5971: LD_STRING D4b-JMM-8
5973: PPUSH
5974: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5978: LD_VAR 0 1
5982: PUSH
5983: LD_INT 1
5985: ARRAY
5986: PPUSH
5987: CALL_OW 258
5991: PUSH
5992: LD_INT 1
5994: EQUAL
5995: IFFALSE 6013
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5997: LD_VAR 0 1
6001: PUSH
6002: LD_INT 1
6004: ARRAY
6005: PPUSH
6006: LD_STRING D4b-Sol1-8
6008: PPUSH
6009: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6013: LD_VAR 0 1
6017: PUSH
6018: LD_INT 1
6020: ARRAY
6021: PPUSH
6022: CALL_OW 258
6026: PUSH
6027: LD_INT 2
6029: EQUAL
6030: IFFALSE 6048
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6032: LD_VAR 0 1
6036: PUSH
6037: LD_INT 1
6039: ARRAY
6040: PPUSH
6041: LD_STRING D4b-FSol1-8
6043: PPUSH
6044: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6048: LD_EXP 1
6052: PPUSH
6053: LD_STRING D4b-JMM-9
6055: PPUSH
6056: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6060: LD_EXP 8
6064: PPUSH
6065: LD_INT 1
6067: PPUSH
6068: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6072: LD_ADDR_VAR 0 2
6076: PUSH
6077: LD_INT 22
6079: PUSH
6080: LD_INT 1
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: PPUSH
6090: CALL_OW 69
6094: PUSH
6095: FOR_IN
6096: IFFALSE 6109
// ComFree ( i ) ;
6098: LD_VAR 0 2
6102: PPUSH
6103: CALL_OW 139
6107: GO 6095
6109: POP
6110: POP
// repeat wait ( 0 0$1 ) ;
6111: LD_INT 35
6113: PPUSH
6114: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6118: LD_EXP 8
6122: PPUSH
6123: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6127: LD_EXP 8
6131: PUSH
6132: LD_VAR 0 1
6136: PUSH
6137: LD_INT 1
6139: ARRAY
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PPUSH
6145: LD_INT 1
6147: PPUSH
6148: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6152: LD_EXP 8
6156: PPUSH
6157: CALL_OW 310
6161: IFFALSE 6111
// mikhailDepot = IsInUnit ( Mikhail ) ;
6163: LD_ADDR_EXP 23
6167: PUSH
6168: LD_EXP 8
6172: PPUSH
6173: CALL_OW 310
6177: ST_TO_ADDR
// InGameOff ;
6178: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6182: LD_STRING M3
6184: PPUSH
6185: CALL_OW 337
// end ; 3 :
6189: GO 6226
6191: LD_INT 3
6193: DOUBLE
6194: EQUAL
6195: IFTRUE 6199
6197: GO 6225
6199: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6200: LD_EXP 8
6204: PPUSH
6205: LD_INT 17
6207: PPUSH
6208: CALL_OW 113
// wait ( 0 0$3 ) ;
6212: LD_INT 105
6214: PPUSH
6215: CALL_OW 67
// InGameOff ;
6219: CALL_OW 9
// end ; end ;
6223: GO 6226
6225: POP
// PrepareTigers ;
6226: CALL 14141 0 0
// RussianTrap ;
6230: CALL 9989 0 0
// tigersRespawn = 1 ;
6234: LD_ADDR_EXP 30
6238: PUSH
6239: LD_INT 1
6241: ST_TO_ADDR
// end ;
6242: PPOPN 2
6244: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6245: LD_INT 1
6247: PPUSH
6248: CALL_OW 255
6252: PUSH
6253: LD_INT 1
6255: EQUAL
6256: PUSH
6257: LD_INT 10
6259: PPUSH
6260: CALL_OW 255
6264: PUSH
6265: LD_INT 1
6267: EQUAL
6268: AND
6269: PUSH
6270: LD_INT 1
6272: PPUSH
6273: CALL_OW 274
6277: PPUSH
6278: LD_INT 1
6280: PPUSH
6281: CALL_OW 275
6285: PUSH
6286: LD_INT 100
6288: GREATEREQUAL
6289: AND
6290: IFFALSE 6453
6292: GO 6294
6294: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6295: LD_INT 2100
6297: PPUSH
6298: LD_INT 4200
6300: PPUSH
6301: CALL_OW 12
6305: PUSH
6306: LD_INT 1050
6308: PLUS
6309: PPUSH
6310: CALL_OW 67
// PrepareCargoBays ;
6314: CALL 12624 0 0
// cargoRespawn = 1 ;
6318: LD_ADDR_EXP 28
6322: PUSH
6323: LD_INT 1
6325: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6326: LD_EXP 15
6330: PUSH
6331: LD_EXP 16
6335: PUSH
6336: LD_EXP 17
6340: PUSH
6341: LD_EXP 18
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: PPUSH
6352: LD_INT 36
6354: PPUSH
6355: LD_INT 13
6357: PPUSH
6358: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6362: LD_EXP 15
6366: PUSH
6367: LD_EXP 16
6371: PUSH
6372: LD_EXP 17
6376: PUSH
6377: LD_EXP 18
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: PPUSH
6388: LD_INT 40
6390: PPUSH
6391: LD_INT 20
6393: PPUSH
6394: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6398: LD_EXP 15
6402: PUSH
6403: LD_EXP 16
6407: PUSH
6408: LD_EXP 17
6412: PUSH
6413: LD_EXP 18
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: PPUSH
6424: LD_INT 53
6426: PPUSH
6427: LD_INT 16
6429: PPUSH
6430: CALL_OW 171
// wait ( 0 0$5 ) ;
6434: LD_INT 175
6436: PPUSH
6437: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6441: LD_EXP 17
6445: PPUSH
6446: LD_STRING D5-Rus2-1
6448: PPUSH
6449: CALL_OW 88
// end ;
6453: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6454: LD_EXP 28
6458: PUSH
6459: LD_INT 1
6461: EQUAL
6462: IFFALSE 6676
6464: GO 6466
6466: DISABLE
6467: LD_INT 0
6469: PPUSH
6470: PPUSH
6471: PPUSH
6472: PPUSH
// begin enable ;
6473: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6474: LD_ADDR_VAR 0 3
6478: PUSH
6479: LD_INT 22
6481: PUSH
6482: LD_INT 3
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: PUSH
6489: LD_INT 21
6491: PUSH
6492: LD_INT 2
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PUSH
6499: LD_INT 34
6501: PUSH
6502: LD_INT 51
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: LIST
6513: PPUSH
6514: CALL_OW 69
6518: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
6519: LD_ADDR_VAR 0 4
6523: PUSH
6524: LD_INT 22
6526: PUSH
6527: LD_INT 1
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: LD_INT 23
6536: PUSH
6537: LD_INT 1
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PPUSH
6548: CALL_OW 69
6552: ST_TO_ADDR
// for i in tmp1 do
6553: LD_ADDR_VAR 0 1
6557: PUSH
6558: LD_VAR 0 3
6562: PUSH
6563: FOR_IN
6564: IFFALSE 6674
// begin for j in tmp2 do
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: LD_VAR 0 4
6575: PUSH
6576: FOR_IN
6577: IFFALSE 6670
// begin if GetDistUnits ( i , j ) < 7 then
6579: LD_VAR 0 1
6583: PPUSH
6584: LD_VAR 0 2
6588: PPUSH
6589: CALL_OW 296
6593: PUSH
6594: LD_INT 7
6596: LESS
6597: IFFALSE 6668
// begin disable ;
6599: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6600: LD_EXP 15
6604: PUSH
6605: LD_EXP 16
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PPUSH
6614: LD_INT 7
6616: PPUSH
6617: LD_INT 9
6619: PPUSH
6620: CALL_OW 111
// if cargoSee = 0 then
6624: LD_EXP 29
6628: PUSH
6629: LD_INT 0
6631: EQUAL
6632: IFFALSE 6660
// begin cargoSee = 1 ;
6634: LD_ADDR_EXP 29
6638: PUSH
6639: LD_INT 1
6641: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6642: LD_EXP 17
6646: PPUSH
6647: LD_STRING D5-Rus2-1a
6649: PPUSH
6650: CALL_OW 88
// exit ;
6654: POP
6655: POP
6656: POP
6657: POP
6658: GO 6676
// end ; cargoEscape = 1 ;
6660: LD_ADDR_EXP 20
6664: PUSH
6665: LD_INT 1
6667: ST_TO_ADDR
// end ; end ;
6668: GO 6576
6670: POP
6671: POP
// end ;
6672: GO 6563
6674: POP
6675: POP
// end ;
6676: PPOPN 4
6678: END
// every 0 0$1 trigger cargoEscape > 0 do
6679: LD_EXP 20
6683: PUSH
6684: LD_INT 0
6686: GREATER
6687: IFFALSE 6813
6689: GO 6691
6691: DISABLE
// begin enable ;
6692: ENABLE
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6693: LD_EXP 15
6697: PPUSH
6698: LD_INT 13
6700: PPUSH
6701: CALL_OW 308
6705: PUSH
6706: LD_EXP 17
6710: PPUSH
6711: LD_INT 13
6713: PPUSH
6714: CALL_OW 308
6718: OR
6719: IFFALSE 6753
// begin RemoveUnit ( cargo1 ) ;
6721: LD_EXP 15
6725: PPUSH
6726: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6730: LD_EXP 17
6734: PPUSH
6735: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6739: LD_ADDR_EXP 20
6743: PUSH
6744: LD_EXP 20
6748: PUSH
6749: LD_INT 1
6751: PLUS
6752: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6753: LD_EXP 16
6757: PPUSH
6758: LD_INT 13
6760: PPUSH
6761: CALL_OW 308
6765: PUSH
6766: LD_EXP 18
6770: PPUSH
6771: LD_INT 13
6773: PPUSH
6774: CALL_OW 308
6778: OR
6779: IFFALSE 6813
// begin RemoveUnit ( cargo2 ) ;
6781: LD_EXP 16
6785: PPUSH
6786: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6790: LD_EXP 18
6794: PPUSH
6795: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6799: LD_ADDR_EXP 20
6803: PUSH
6804: LD_EXP 20
6808: PUSH
6809: LD_INT 1
6811: PLUS
6812: ST_TO_ADDR
// end ; end ;
6813: END
// every 0 0$1 trigger cargoEscape > 1 do
6814: LD_EXP 20
6818: PUSH
6819: LD_INT 1
6821: GREATER
6822: IFFALSE 6986
6824: GO 6826
6826: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
6827: LD_INT 4
6829: PPUSH
6830: LD_INT 1
6832: PPUSH
6833: LD_INT 1
6835: PPUSH
6836: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6840: LD_INT 31
6842: PPUSH
6843: LD_INT 1
6845: PPUSH
6846: LD_INT 1
6848: PPUSH
6849: CALL_OW 324
// if IsOK ( Jerry ) then
6853: LD_EXP 7
6857: PPUSH
6858: CALL_OW 302
6862: IFFALSE 6878
// begin Say ( Jerry , D5a-Sol1-1 ) ;
6864: LD_EXP 7
6868: PPUSH
6869: LD_STRING D5a-Sol1-1
6871: PPUSH
6872: CALL_OW 88
// end else
6876: GO 6974
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
6878: LD_INT 22
6880: PUSH
6881: LD_INT 1
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 23
6890: PUSH
6891: LD_INT 1
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 26
6900: PUSH
6901: LD_INT 1
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: LIST
6912: PPUSH
6913: CALL_OW 69
6917: PUSH
6918: LD_INT 2
6920: PPUSH
6921: LD_INT 22
6923: PUSH
6924: LD_INT 1
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: PUSH
6931: LD_INT 23
6933: PUSH
6934: LD_INT 1
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PUSH
6941: LD_INT 26
6943: PUSH
6944: LD_INT 1
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: PPUSH
6956: CALL_OW 69
6960: PPUSH
6961: CALL_OW 12
6965: ARRAY
6966: PPUSH
6967: LD_STRING D5a-Sol1-1
6969: PPUSH
6970: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6974: LD_EXP 1
6978: PPUSH
6979: LD_STRING D5a-JMM-1
6981: PPUSH
6982: CALL_OW 88
// end ;
6986: END
// every 0 0$1 trigger GetLives ( dep1 ) < 1000 or GetLives ( dep2 ) < 1000 do
6987: LD_INT 1
6989: PPUSH
6990: CALL_OW 256
6994: PUSH
6995: LD_INT 1000
6997: LESS
6998: PUSH
6999: LD_INT 10
7001: PPUSH
7002: CALL_OW 256
7006: PUSH
7007: LD_INT 1000
7009: LESS
7010: OR
7011: IFFALSE 7028
7013: GO 7015
7015: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
7016: LD_EXP 1
7020: PPUSH
7021: LD_STRING D8-JMM-1
7023: PPUSH
7024: CALL_OW 88
// end ;
7028: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7029: LD_EXP 8
7033: PPUSH
7034: CALL_OW 310
7038: PUSH
7039: LD_INT 1
7041: EQUAL
7042: PUSH
7043: LD_EXP 22
7047: PUSH
7048: LD_INT 3
7050: EQUAL
7051: NOT
7052: AND
7053: IFFALSE 7075
7055: GO 7057
7057: DISABLE
// begin mikhailInBase = 1 ;
7058: LD_ADDR_EXP 22
7062: PUSH
7063: LD_INT 1
7065: ST_TO_ADDR
// mikhailStatus = 1 ;
7066: LD_ADDR_EXP 21
7070: PUSH
7071: LD_INT 1
7073: ST_TO_ADDR
// enable ;
7074: ENABLE
// end ;
7075: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
7076: LD_EXP 8
7080: PPUSH
7081: LD_INT 25
7083: PPUSH
7084: CALL_OW 308
7088: PUSH
7089: LD_EXP 22
7093: PUSH
7094: LD_INT 1
7096: EQUAL
7097: AND
7098: PUSH
7099: LD_EXP 8
7103: PPUSH
7104: CALL_OW 255
7108: PUSH
7109: LD_INT 1
7111: EQUAL
7112: AND
7113: IFFALSE 7443
7115: GO 7117
7117: DISABLE
// begin enable ;
7118: ENABLE
// case query ( QMikh2 ) of 1 :
7119: LD_STRING QMikh2
7121: PPUSH
7122: CALL_OW 97
7126: PUSH
7127: LD_INT 1
7129: DOUBLE
7130: EQUAL
7131: IFTRUE 7135
7133: GO 7202
7135: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7136: LD_INT 1
7138: PPUSH
7139: LD_INT 6
7141: PPUSH
7142: LD_INT 2
7144: PPUSH
7145: LD_INT 1
7147: PPUSH
7148: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7152: LD_EXP 8
7156: PPUSH
7157: LD_INT 6
7159: PPUSH
7160: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7164: LD_EXP 8
7168: PPUSH
7169: CALL_OW 122
// wait ( 0 0$1 ) ;
7173: LD_INT 35
7175: PPUSH
7176: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7180: LD_EXP 8
7184: PPUSH
7185: LD_INT 17
7187: PPUSH
7188: CALL_OW 113
// mikhailInbase = 0 ;
7192: LD_ADDR_EXP 22
7196: PUSH
7197: LD_INT 0
7199: ST_TO_ADDR
// end ; 2 :
7200: GO 7443
7202: LD_INT 2
7204: DOUBLE
7205: EQUAL
7206: IFTRUE 7210
7208: GO 7383
7210: POP
// begin mikhailInBase = 2 ;
7211: LD_ADDR_EXP 22
7215: PUSH
7216: LD_INT 2
7218: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7219: LD_EXP 8
7223: PPUSH
7224: LD_INT 6
7226: PPUSH
7227: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7231: LD_EXP 8
7235: PPUSH
7236: CALL_OW 122
// wait ( 0 0$1 ) ;
7240: LD_INT 35
7242: PPUSH
7243: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7247: LD_EXP 8
7251: PPUSH
7252: LD_EXP 8
7256: PPUSH
7257: CALL_OW 250
7261: PUSH
7262: LD_INT 2
7264: PLUS
7265: PPUSH
7266: LD_EXP 8
7270: PPUSH
7271: CALL_OW 251
7275: PUSH
7276: LD_INT 2
7278: PLUS
7279: PPUSH
7280: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7284: LD_EXP 8
7288: PPUSH
7289: LD_EXP 8
7293: PPUSH
7294: CALL_OW 250
7298: PUSH
7299: LD_INT 1
7301: PLUS
7302: PPUSH
7303: LD_EXP 8
7307: PPUSH
7308: CALL_OW 251
7312: PUSH
7313: LD_INT 2
7315: PLUS
7316: PPUSH
7317: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7321: LD_EXP 8
7325: PPUSH
7326: LD_EXP 8
7330: PPUSH
7331: CALL_OW 250
7335: PUSH
7336: LD_INT 2
7338: PLUS
7339: PPUSH
7340: LD_EXP 8
7344: PPUSH
7345: CALL_OW 251
7349: PPUSH
7350: CALL_OW 171
// wait ( 0 0$5 ) ;
7354: LD_INT 175
7356: PPUSH
7357: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7361: LD_EXP 8
7365: PPUSH
7366: LD_INT 25
7368: PPUSH
7369: CALL_OW 113
// mikhailInBase = 4 ;
7373: LD_ADDR_EXP 22
7377: PUSH
7378: LD_INT 4
7380: ST_TO_ADDR
// end ; 3 :
7381: GO 7443
7383: LD_INT 3
7385: DOUBLE
7386: EQUAL
7387: IFTRUE 7391
7389: GO 7442
7391: POP
// begin SetSide ( Mikhail , 6 ) ;
7392: LD_EXP 8
7396: PPUSH
7397: LD_INT 6
7399: PPUSH
7400: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7404: LD_EXP 8
7408: PPUSH
7409: CALL_OW 122
// wait ( 0 0$1 ) ;
7413: LD_INT 35
7415: PPUSH
7416: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7420: LD_EXP 8
7424: PPUSH
7425: LD_INT 17
7427: PPUSH
7428: CALL_OW 113
// mikhailInbase = 3 ;
7432: LD_ADDR_EXP 22
7436: PUSH
7437: LD_INT 3
7439: ST_TO_ADDR
// end ; end ;
7440: GO 7443
7442: POP
// end ;
7443: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7444: LD_EXP 8
7448: PPUSH
7449: LD_INT 25
7451: PPUSH
7452: CALL_OW 308
7456: PUSH
7457: LD_EXP 22
7461: PUSH
7462: LD_INT 4
7464: EQUAL
7465: AND
7466: IFFALSE 7572
7468: GO 7470
7470: DISABLE
// begin enable ;
7471: ENABLE
// InGameOn ;
7472: CALL_OW 8
// SetSide ( Mikhail , 1 ) ;
7476: LD_EXP 8
7480: PPUSH
7481: LD_INT 1
7483: PPUSH
7484: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7488: LD_INT 35
7490: PPUSH
7491: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
7495: LD_EXP 8
7499: PPUSH
7500: LD_INT 1
7502: PPUSH
7503: CALL_OW 296
7507: PUSH
7508: LD_EXP 8
7512: PPUSH
7513: LD_INT 10
7515: PPUSH
7516: CALL_OW 296
7520: LESS
7521: IFFALSE 7537
// begin ComEnterUnit ( Mikhail , dep1 ) ;
7523: LD_EXP 8
7527: PPUSH
7528: LD_INT 1
7530: PPUSH
7531: CALL_OW 120
// end else
7535: GO 7549
// begin ComEnterUnit ( Mikhail , dep2 ) ;
7537: LD_EXP 8
7541: PPUSH
7542: LD_INT 10
7544: PPUSH
7545: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
7549: LD_EXP 8
7553: PPUSH
7554: CALL_OW 310
7558: IFFALSE 7488
// InGameOff ;
7560: CALL_OW 9
// mikhailInBase = 1 ;
7564: LD_ADDR_EXP 22
7568: PUSH
7569: LD_INT 1
7571: ST_TO_ADDR
// end ;
7572: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7573: LD_EXP 8
7577: PPUSH
7578: CALL_OW 310
7582: PUSH
7583: LD_EXP 22
7587: PUSH
7588: LD_INT 3
7590: EQUAL
7591: NOT
7592: AND
7593: IFFALSE 7719
7595: GO 7597
7597: DISABLE
// begin enable ;
7598: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7599: LD_INT 22
7601: PUSH
7602: LD_INT 1
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 1
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: LD_INT 91
7621: PUSH
7622: LD_EXP 8
7626: PPUSH
7627: CALL_OW 310
7631: PUSH
7632: LD_INT 10
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: LIST
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: PPUSH
7645: CALL_OW 69
7649: PUSH
7650: LD_INT 1
7652: EQUAL
7653: IFFALSE 7719
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7655: LD_INT 1
7657: PPUSH
7658: LD_INT 6
7660: PPUSH
7661: LD_INT 2
7663: PPUSH
7664: LD_INT 1
7666: PPUSH
7667: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7671: LD_EXP 8
7675: PPUSH
7676: LD_INT 6
7678: PPUSH
7679: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7683: LD_EXP 8
7687: PPUSH
7688: CALL_OW 122
// wait ( 0 0$1 ) ;
7692: LD_INT 35
7694: PPUSH
7695: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7699: LD_EXP 8
7703: PPUSH
7704: LD_INT 17
7706: PPUSH
7707: CALL_OW 113
// mikhailStatus = 3 ;
7711: LD_ADDR_EXP 21
7715: PUSH
7716: LD_INT 3
7718: ST_TO_ADDR
// end ; end ;
7719: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7720: LD_EXP 1
7724: PPUSH
7725: LD_EXP 23
7729: PPUSH
7730: CALL_OW 296
7734: PUSH
7735: LD_INT 5
7737: LESS
7738: PUSH
7739: LD_EXP 21
7743: PUSH
7744: LD_INT 3
7746: EQUAL
7747: AND
7748: PUSH
7749: LD_EXP 22
7753: PUSH
7754: LD_INT 3
7756: EQUAL
7757: NOT
7758: AND
7759: IFFALSE 7975
7761: GO 7763
7763: DISABLE
7764: LD_INT 0
7766: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
7767: LD_ADDR_VAR 0 1
7771: PUSH
7772: LD_INT 22
7774: PUSH
7775: LD_INT 1
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: LD_INT 21
7784: PUSH
7785: LD_INT 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 26
7794: PUSH
7795: LD_INT 1
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: PPUSH
7807: CALL_OW 69
7811: PUSH
7812: LD_EXP 1
7816: PUSH
7817: EMPTY
7818: LIST
7819: DIFF
7820: ST_TO_ADDR
// DialogueOn ;
7821: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7825: LD_EXP 1
7829: PPUSH
7830: LD_STRING D7-JMM-1
7832: PPUSH
7833: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7837: LD_VAR 0 1
7841: PUSH
7842: LD_INT 1
7844: ARRAY
7845: PPUSH
7846: LD_STRING D7-Sol1-1
7848: PPUSH
7849: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7853: LD_EXP 1
7857: PPUSH
7858: LD_STRING D7-JMM-2
7860: PPUSH
7861: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7865: LD_VAR 0 1
7869: PUSH
7870: LD_INT 1
7872: ARRAY
7873: PPUSH
7874: LD_STRING D7-Sol1-2
7876: PPUSH
7877: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7881: LD_EXP 1
7885: PPUSH
7886: LD_STRING D7-JMM-3
7888: PPUSH
7889: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7893: LD_VAR 0 1
7897: PUSH
7898: LD_INT 1
7900: ARRAY
7901: PPUSH
7902: LD_STRING D7-Sol1-3
7904: PPUSH
7905: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7909: LD_EXP 3
7913: PPUSH
7914: CALL_OW 302
7918: PUSH
7919: LD_EXP 4
7923: PPUSH
7924: CALL_OW 302
7928: AND
7929: IFFALSE 7971
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7931: LD_EXP 3
7935: PPUSH
7936: LD_STRING D7-Cyrus-3
7938: PPUSH
7939: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7943: LD_VAR 0 1
7947: PUSH
7948: LD_INT 1
7950: ARRAY
7951: PPUSH
7952: LD_STRING D7-Sol1-4
7954: PPUSH
7955: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7959: LD_EXP 4
7963: PPUSH
7964: LD_STRING D7-Lisa-4
7966: PPUSH
7967: CALL_OW 88
// end ; DialogueOff ;
7971: CALL_OW 7
// end ;
7975: PPOPN 1
7977: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7978: LD_EXP 8
7982: PPUSH
7983: CALL_OW 303
7987: PUSH
7988: LD_EXP 21
7992: PUSH
7993: LD_INT 3
7995: EQUAL
7996: AND
7997: IFFALSE 8011
7999: GO 8001
8001: DISABLE
// begin enable ;
8002: ENABLE
// mikhailStatus = 2 ;
8003: LD_ADDR_EXP 21
8007: PUSH
8008: LD_INT 2
8010: ST_TO_ADDR
// end ;
8011: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8012: LD_EXP 8
8016: PPUSH
8017: LD_INT 17
8019: PPUSH
8020: CALL_OW 308
8024: PUSH
8025: LD_EXP 8
8029: PPUSH
8030: CALL_OW 255
8034: PUSH
8035: LD_INT 6
8037: EQUAL
8038: AND
8039: IFFALSE 8072
8041: GO 8043
8043: DISABLE
// begin if not mikhailInBase = 3 then
8044: LD_EXP 22
8048: PUSH
8049: LD_INT 3
8051: EQUAL
8052: NOT
8053: IFFALSE 8063
// mikhailStatus = 3 ;
8055: LD_ADDR_EXP 21
8059: PUSH
8060: LD_INT 3
8062: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8063: LD_EXP 8
8067: PPUSH
8068: CALL_OW 64
// end ;
8072: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8073: LD_EXP 21
8077: PUSH
8078: LD_INT 3
8080: EQUAL
8081: PUSH
8082: LD_EXP 8
8086: PPUSH
8087: CALL_OW 255
8091: PUSH
8092: LD_INT 6
8094: EQUAL
8095: AND
8096: IFFALSE 8262
8098: GO 8100
8100: DISABLE
8101: LD_INT 0
8103: PPUSH
8104: PPUSH
// begin enable ;
8105: ENABLE
// if IsOk ( Mikhail ) then
8106: LD_EXP 8
8110: PPUSH
8111: CALL_OW 302
8115: IFFALSE 8262
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8117: LD_ADDR_VAR 0 2
8121: PUSH
8122: LD_EXP 8
8126: PPUSH
8127: LD_INT 22
8129: PUSH
8130: LD_INT 1
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 21
8139: PUSH
8140: LD_INT 1
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PPUSH
8151: CALL_OW 69
8155: PPUSH
8156: CALL 10181 0 2
8160: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8161: LD_VAR 0 2
8165: PPUSH
8166: LD_EXP 8
8170: PPUSH
8171: CALL_OW 296
8175: PUSH
8176: LD_INT 8
8178: LESS
8179: IFFALSE 8262
// begin if GetSex ( attacker ) = sex_male then
8181: LD_VAR 0 2
8185: PPUSH
8186: CALL_OW 258
8190: PUSH
8191: LD_INT 1
8193: EQUAL
8194: IFFALSE 8230
// begin disable ;
8196: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8197: LD_VAR 0 2
8201: PPUSH
8202: LD_STRING D7a-Sol1-1
8204: PPUSH
8205: CALL_OW 88
// wait ( 0 0$2 ) ;
8209: LD_INT 70
8211: PPUSH
8212: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8216: LD_VAR 0 2
8220: PPUSH
8221: LD_STRING D7a-Sol1-1a
8223: PPUSH
8224: CALL_OW 88
// end else
8228: GO 8262
// begin disable ;
8230: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8231: LD_VAR 0 2
8235: PPUSH
8236: LD_STRING D7a-FSol1-1
8238: PPUSH
8239: CALL_OW 88
// wait ( 0 0$2 ) ;
8243: LD_INT 70
8245: PPUSH
8246: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8250: LD_VAR 0 2
8254: PPUSH
8255: LD_STRING D7a-FSol1-1a
8257: PPUSH
8258: CALL_OW 88
// end ; end ; end ; end ;
8262: PPOPN 2
8264: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8265: LD_EXP 27
8269: PUSH
8270: LD_INT 1
8272: EQUAL
8273: PUSH
8274: LD_INT 22
8276: PPUSH
8277: LD_INT 22
8279: PUSH
8280: LD_INT 3
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: PUSH
8287: LD_INT 21
8289: PUSH
8290: LD_INT 1
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PPUSH
8301: CALL_OW 70
8305: PUSH
8306: LD_INT 2
8308: GREATER
8309: AND
8310: PUSH
8311: LD_INT 22
8313: PPUSH
8314: LD_INT 22
8316: PUSH
8317: LD_INT 1
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PUSH
8324: LD_INT 2
8326: PUSH
8327: LD_INT 21
8329: PUSH
8330: LD_INT 1
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PUSH
8337: LD_INT 59
8339: PUSH
8340: EMPTY
8341: LIST
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 70
8356: PUSH
8357: LD_INT 0
8359: EQUAL
8360: AND
8361: IFFALSE 8376
8363: GO 8365
8365: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8366: LD_INT 1
8368: PPUSH
8369: LD_INT 3
8371: PPUSH
8372: CALL_OW 235
// end ;
8376: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8377: LD_EXP 30
8381: PUSH
8382: LD_INT 1
8384: EQUAL
8385: PUSH
8386: LD_INT 22
8388: PUSH
8389: LD_INT 0
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PUSH
8396: LD_INT 25
8398: PUSH
8399: LD_INT 14
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PPUSH
8410: CALL_OW 69
8414: PUSH
8415: LD_INT 0
8417: EQUAL
8418: AND
8419: IFFALSE 8513
8421: GO 8423
8423: DISABLE
8424: LD_INT 0
8426: PPUSH
8427: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8428: LD_ADDR_VAR 0 2
8432: PUSH
8433: LD_INT 22
8435: PUSH
8436: LD_INT 1
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: PUSH
8443: LD_INT 21
8445: PUSH
8446: LD_INT 1
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: LD_INT 23
8455: PUSH
8456: LD_INT 1
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: LIST
8467: PPUSH
8468: CALL_OW 69
8472: ST_TO_ADDR
// for i in tmp do
8473: LD_ADDR_VAR 0 1
8477: PUSH
8478: LD_VAR 0 2
8482: PUSH
8483: FOR_IN
8484: IFFALSE 8511
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8486: LD_VAR 0 1
8490: PPUSH
8491: LD_INT 1
8493: PPUSH
8494: LD_INT 4
8496: PPUSH
8497: CALL_OW 12
8501: PPUSH
8502: LD_INT 300
8504: PPUSH
8505: CALL_OW 492
// end ;
8509: GO 8483
8511: POP
8512: POP
// end ; end_of_file
8513: PPOPN 2
8515: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8516: LD_INT 0
8518: PPUSH
8519: PPUSH
8520: PPUSH
8521: PPUSH
// for i = 1 to count do
8522: LD_ADDR_VAR 0 8
8526: PUSH
8527: DOUBLE
8528: LD_INT 1
8530: DEC
8531: ST_TO_ADDR
8532: LD_VAR 0 6
8536: PUSH
8537: FOR_TO
8538: IFFALSE 8619
// begin uc_side = side ;
8540: LD_ADDR_OWVAR 20
8544: PUSH
8545: LD_VAR 0 1
8549: ST_TO_ADDR
// uc_nation = nation ;
8550: LD_ADDR_OWVAR 21
8554: PUSH
8555: LD_VAR 0 2
8559: ST_TO_ADDR
// hc_gallery =  ;
8560: LD_ADDR_OWVAR 33
8564: PUSH
8565: LD_STRING 
8567: ST_TO_ADDR
// hc_name =  ;
8568: LD_ADDR_OWVAR 26
8572: PUSH
8573: LD_STRING 
8575: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8576: LD_INT 0
8578: PPUSH
8579: LD_VAR 0 5
8583: PPUSH
8584: LD_VAR 0 4
8588: PPUSH
8589: CALL_OW 380
// un = CreateHuman ;
8593: LD_ADDR_VAR 0 10
8597: PUSH
8598: CALL_OW 44
8602: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8603: LD_VAR 0 10
8607: PPUSH
8608: LD_VAR 0 3
8612: PPUSH
8613: CALL_OW 52
// end ;
8617: GO 8537
8619: POP
8620: POP
// end ;
8621: LD_VAR 0 7
8625: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8626: LD_INT 0
8628: PPUSH
8629: PPUSH
8630: PPUSH
// uc_side := GetSide ( b ) ;
8631: LD_ADDR_OWVAR 20
8635: PUSH
8636: LD_VAR 0 2
8640: PPUSH
8641: CALL_OW 255
8645: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8646: LD_ADDR_OWVAR 21
8650: PUSH
8651: LD_VAR 0 2
8655: PPUSH
8656: CALL_OW 248
8660: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8661: LD_INT 0
8663: PPUSH
8664: LD_INT 1
8666: PPUSH
8667: LD_VAR 0 1
8671: PPUSH
8672: CALL_OW 380
// un = CreateHuman ;
8676: LD_ADDR_VAR 0 4
8680: PUSH
8681: CALL_OW 44
8685: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8686: LD_ADDR_VAR 0 5
8690: PUSH
8691: LD_VAR 0 2
8695: PPUSH
8696: CALL_OW 254
8700: PUSH
8701: LD_INT 3
8703: MINUS
8704: ST_TO_ADDR
// if dir < 0 then
8705: LD_VAR 0 5
8709: PUSH
8710: LD_INT 0
8712: LESS
8713: IFFALSE 8729
// dir := 6 + dir ;
8715: LD_ADDR_VAR 0 5
8719: PUSH
8720: LD_INT 6
8722: PUSH
8723: LD_VAR 0 5
8727: PLUS
8728: ST_TO_ADDR
// SetDir ( un , dir ) ;
8729: LD_VAR 0 4
8733: PPUSH
8734: LD_VAR 0 5
8738: PPUSH
8739: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8743: LD_VAR 0 4
8747: PPUSH
8748: LD_VAR 0 2
8752: PPUSH
8753: CALL_OW 52
// end ;
8757: LD_VAR 0 3
8761: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8762: LD_INT 0
8764: PPUSH
8765: PPUSH
8766: PPUSH
8767: PPUSH
8768: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8769: LD_ADDR_VAR 0 7
8773: PUSH
8774: LD_INT 22
8776: PUSH
8777: LD_VAR 0 1
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 25
8788: PUSH
8789: LD_INT 2
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: LD_INT 24
8798: PUSH
8799: LD_INT 1000
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: LIST
8810: PPUSH
8811: CALL_OW 69
8815: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8816: LD_ADDR_VAR 0 5
8820: PUSH
8821: LD_VAR 0 3
8825: PPUSH
8826: LD_INT 22
8828: PUSH
8829: LD_VAR 0 1
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PUSH
8838: LD_INT 21
8840: PUSH
8841: LD_INT 3
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 3
8850: PUSH
8851: LD_INT 24
8853: PUSH
8854: LD_INT 1000
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: LIST
8869: PUSH
8870: EMPTY
8871: LIST
8872: PPUSH
8873: CALL_OW 70
8877: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8878: LD_VAR 0 5
8882: PUSH
8883: LD_INT 0
8885: GREATER
8886: PUSH
8887: LD_VAR 0 7
8891: PUSH
8892: LD_INT 0
8894: GREATER
8895: AND
8896: IFFALSE 8962
// begin for i in engineerOk_list do
8898: LD_ADDR_VAR 0 6
8902: PUSH
8903: LD_VAR 0 7
8907: PUSH
8908: FOR_IN
8909: IFFALSE 8960
// begin for j in buildings_list do
8911: LD_ADDR_VAR 0 8
8915: PUSH
8916: LD_VAR 0 5
8920: PUSH
8921: FOR_IN
8922: IFFALSE 8956
// begin AddComExitBuilding ( i ) ;
8924: LD_VAR 0 6
8928: PPUSH
8929: CALL_OW 182
// wait ( 0 0$1 ) ;
8933: LD_INT 35
8935: PPUSH
8936: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8940: LD_VAR 0 6
8944: PPUSH
8945: LD_VAR 0 8
8949: PPUSH
8950: CALL_OW 190
// end ;
8954: GO 8921
8956: POP
8957: POP
// end ;
8958: GO 8908
8960: POP
8961: POP
// end ; if buildings_list = 0 then
8962: LD_VAR 0 5
8966: PUSH
8967: LD_INT 0
8969: EQUAL
8970: IFFALSE 9003
// begin for i in engineerOK_list do
8972: LD_ADDR_VAR 0 6
8976: PUSH
8977: LD_VAR 0 7
8981: PUSH
8982: FOR_IN
8983: IFFALSE 9001
// begin ComEnterUnit ( i , building ) ;
8985: LD_VAR 0 6
8989: PPUSH
8990: LD_VAR 0 2
8994: PPUSH
8995: CALL_OW 120
// end ;
8999: GO 8982
9001: POP
9002: POP
// end ; end ;
9003: LD_VAR 0 4
9007: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9008: LD_INT 0
9010: PPUSH
9011: PPUSH
9012: PPUSH
9013: PPUSH
9014: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9015: LD_ADDR_VAR 0 6
9019: PUSH
9020: LD_INT 22
9022: PUSH
9023: LD_VAR 0 1
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PUSH
9032: LD_INT 25
9034: PUSH
9035: LD_INT 4
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 24
9044: PUSH
9045: LD_INT 250
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: LIST
9056: PPUSH
9057: CALL_OW 69
9061: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9062: LD_ADDR_VAR 0 9
9066: PUSH
9067: LD_VAR 0 3
9071: PPUSH
9072: LD_INT 22
9074: PUSH
9075: LD_VAR 0 1
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: LD_INT 21
9086: PUSH
9087: LD_INT 1
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: LD_INT 3
9096: PUSH
9097: LD_INT 24
9099: PUSH
9100: LD_INT 650
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: PPUSH
9116: CALL_OW 70
9120: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9121: LD_VAR 0 9
9125: PUSH
9126: LD_INT 0
9128: GREATER
9129: PUSH
9130: LD_VAR 0 6
9134: PUSH
9135: LD_INT 0
9137: GREATER
9138: AND
9139: IFFALSE 9266
// begin for i = 1 to damageUnits do
9141: LD_ADDR_VAR 0 7
9145: PUSH
9146: DOUBLE
9147: LD_INT 1
9149: DEC
9150: ST_TO_ADDR
9151: LD_VAR 0 9
9155: PUSH
9156: FOR_TO
9157: IFFALSE 9181
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9159: LD_VAR 0 9
9163: PUSH
9164: LD_VAR 0 7
9168: ARRAY
9169: PPUSH
9170: LD_VAR 0 2
9174: PPUSH
9175: CALL_OW 113
9179: GO 9156
9181: POP
9182: POP
// for i in sci_list do
9183: LD_ADDR_VAR 0 7
9187: PUSH
9188: LD_VAR 0 6
9192: PUSH
9193: FOR_IN
9194: IFFALSE 9262
// begin ComExitBuilding ( i ) ;
9196: LD_VAR 0 7
9200: PPUSH
9201: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9205: LD_ADDR_VAR 0 8
9209: PUSH
9210: LD_VAR 0 2
9214: PPUSH
9215: LD_INT 22
9217: PUSH
9218: LD_VAR 0 1
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PPUSH
9227: CALL_OW 70
9231: PUSH
9232: FOR_IN
9233: IFFALSE 9258
// begin AddComHeal ( i , j ) ;
9235: LD_VAR 0 7
9239: PPUSH
9240: LD_VAR 0 8
9244: PPUSH
9245: CALL_OW 188
// wait ( 1 1$0 ) ;
9249: LD_INT 2100
9251: PPUSH
9252: CALL_OW 67
// end ;
9256: GO 9232
9258: POP
9259: POP
// end ;
9260: GO 9193
9262: POP
9263: POP
// end else
9264: GO 9280
// begin AddComEnterUnit ( sci_list , build ) ;
9266: LD_VAR 0 6
9270: PPUSH
9271: LD_VAR 0 4
9275: PPUSH
9276: CALL_OW 180
// end ; end ;
9280: LD_VAR 0 5
9284: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9285: LD_INT 0
9287: PPUSH
9288: PPUSH
9289: PPUSH
9290: PPUSH
9291: PPUSH
9292: PPUSH
9293: PPUSH
9294: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9295: LD_ADDR_VAR 0 7
9299: PUSH
9300: LD_VAR 0 3
9304: PPUSH
9305: LD_INT 22
9307: PUSH
9308: LD_VAR 0 1
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: PUSH
9317: LD_INT 21
9319: PUSH
9320: LD_INT 2
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PUSH
9327: LD_INT 24
9329: PUSH
9330: LD_INT 550
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PUSH
9337: LD_INT 34
9339: PUSH
9340: LD_INT 46
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: PPUSH
9353: CALL_OW 70
9357: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9358: LD_ADDR_VAR 0 8
9362: PUSH
9363: LD_VAR 0 3
9367: PPUSH
9368: LD_INT 22
9370: PUSH
9371: LD_VAR 0 1
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: LD_INT 21
9382: PUSH
9383: LD_INT 2
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PUSH
9390: LD_INT 34
9392: PUSH
9393: LD_INT 46
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PUSH
9400: LD_INT 3
9402: PUSH
9403: LD_INT 24
9405: PUSH
9406: LD_INT 550
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: PPUSH
9423: CALL_OW 70
9427: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9428: LD_ADDR_VAR 0 9
9432: PUSH
9433: LD_VAR 0 2
9437: PPUSH
9438: LD_INT 22
9440: PUSH
9441: LD_VAR 0 1
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: PUSH
9450: LD_INT 21
9452: PUSH
9453: LD_INT 2
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: PUSH
9460: LD_INT 34
9462: PUSH
9463: LD_INT 46
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PUSH
9470: LD_INT 24
9472: PUSH
9473: LD_INT 1000
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 58
9482: PUSH
9483: EMPTY
9484: LIST
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: PPUSH
9493: CALL_OW 70
9497: ST_TO_ADDR
// for i in damageVehicle_list do
9498: LD_ADDR_VAR 0 5
9502: PUSH
9503: LD_VAR 0 8
9507: PUSH
9508: FOR_IN
9509: IFFALSE 9528
// mechanicInside_list = UnitsInside ( i ) ;
9511: LD_ADDR_VAR 0 10
9515: PUSH
9516: LD_VAR 0 5
9520: PPUSH
9521: CALL_OW 313
9525: ST_TO_ADDR
9526: GO 9508
9528: POP
9529: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9530: LD_ADDR_VAR 0 11
9534: PUSH
9535: LD_VAR 0 2
9539: PPUSH
9540: LD_INT 22
9542: PUSH
9543: LD_VAR 0 1
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 25
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PPUSH
9566: CALL_OW 70
9570: ST_TO_ADDR
// if damageVehicle_list > 0 then
9571: LD_VAR 0 8
9575: PUSH
9576: LD_INT 0
9578: GREATER
9579: IFFALSE 9652
// begin for i in damageVehicle_list do
9581: LD_ADDR_VAR 0 5
9585: PUSH
9586: LD_VAR 0 8
9590: PUSH
9591: FOR_IN
9592: IFFALSE 9650
// begin for j in mechanicInside_list do
9594: LD_ADDR_VAR 0 6
9598: PUSH
9599: LD_VAR 0 10
9603: PUSH
9604: FOR_IN
9605: IFFALSE 9646
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9607: LD_VAR 0 8
9611: PPUSH
9612: LD_VAR 0 2
9616: PPUSH
9617: CALL_OW 113
// AddComExitVehicle ( j ) ;
9621: LD_VAR 0 6
9625: PPUSH
9626: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9630: LD_VAR 0 6
9634: PPUSH
9635: LD_VAR 0 5
9639: PPUSH
9640: CALL_OW 189
// end ;
9644: GO 9604
9646: POP
9647: POP
// end ;
9648: GO 9591
9650: POP
9651: POP
// end ; if emptyVehicle_list > 0 then
9652: LD_VAR 0 9
9656: PUSH
9657: LD_INT 0
9659: GREATER
9660: IFFALSE 9710
// begin for i in emptyVehicle_list do
9662: LD_ADDR_VAR 0 5
9666: PUSH
9667: LD_VAR 0 9
9671: PUSH
9672: FOR_IN
9673: IFFALSE 9708
// begin for j in mechanicOutside_list do
9675: LD_ADDR_VAR 0 6
9679: PUSH
9680: LD_VAR 0 11
9684: PUSH
9685: FOR_IN
9686: IFFALSE 9704
// begin AddComEnterUnit ( j , i ) ;
9688: LD_VAR 0 6
9692: PPUSH
9693: LD_VAR 0 5
9697: PPUSH
9698: CALL_OW 180
// end ;
9702: GO 9685
9704: POP
9705: POP
// end ;
9706: GO 9672
9708: POP
9709: POP
// end ; if VehicleOK_list > 0 then
9710: LD_VAR 0 7
9714: PUSH
9715: LD_INT 0
9717: GREATER
9718: IFFALSE 9752
// begin for i in VehicleOK_list do
9720: LD_ADDR_VAR 0 5
9724: PUSH
9725: LD_VAR 0 7
9729: PUSH
9730: FOR_IN
9731: IFFALSE 9750
// ComAgressiveMove ( i , 110 , 29 ) ;
9733: LD_VAR 0 5
9737: PPUSH
9738: LD_INT 110
9740: PPUSH
9741: LD_INT 29
9743: PPUSH
9744: CALL_OW 114
9748: GO 9730
9750: POP
9751: POP
// end ; end ;
9752: LD_VAR 0 4
9756: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9757: LD_INT 0
9759: PPUSH
9760: PPUSH
9761: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9762: LD_VAR 0 1
9766: PPUSH
9767: LD_INT 22
9769: PUSH
9770: LD_VAR 0 2
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: LD_INT 2
9781: PUSH
9782: LD_INT 21
9784: PUSH
9785: LD_INT 2
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: LD_INT 21
9794: PUSH
9795: LD_INT 1
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: LIST
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PPUSH
9811: CALL_OW 70
9815: PUSH
9816: LD_VAR 0 5
9820: GREATER
9821: IFFALSE 9953
// begin for i in defendersList do
9823: LD_ADDR_VAR 0 7
9827: PUSH
9828: LD_VAR 0 3
9832: PUSH
9833: FOR_IN
9834: IFFALSE 9949
// begin AddComExitBuilding ( i ) ;
9836: LD_VAR 0 7
9840: PPUSH
9841: CALL_OW 182
// wait ( 0 0$1 ) ;
9845: LD_INT 35
9847: PPUSH
9848: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9852: LD_ADDR_VAR 0 8
9856: PUSH
9857: LD_VAR 0 1
9861: PPUSH
9862: LD_INT 22
9864: PUSH
9865: LD_VAR 0 2
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: LD_INT 2
9876: PUSH
9877: LD_INT 21
9879: PUSH
9880: LD_INT 2
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: LD_INT 21
9889: PUSH
9890: LD_INT 1
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PPUSH
9906: CALL_OW 70
9910: PUSH
9911: FOR_IN
9912: IFFALSE 9945
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9914: LD_VAR 0 7
9918: PPUSH
9919: LD_VAR 0 8
9923: PPUSH
9924: CALL_OW 250
9928: PPUSH
9929: LD_VAR 0 8
9933: PPUSH
9934: CALL_OW 251
9938: PPUSH
9939: CALL_OW 174
9943: GO 9911
9945: POP
9946: POP
// end ;
9947: GO 9833
9949: POP
9950: POP
// end else
9951: GO 9984
// begin for i in defendersList do
9953: LD_ADDR_VAR 0 7
9957: PUSH
9958: LD_VAR 0 3
9962: PUSH
9963: FOR_IN
9964: IFFALSE 9982
// ComEnterUnit ( i , build ) ;
9966: LD_VAR 0 7
9970: PPUSH
9971: LD_VAR 0 4
9975: PPUSH
9976: CALL_OW 120
9980: GO 9963
9982: POP
9983: POP
// end ; end ;
9984: LD_VAR 0 6
9988: RET
// export function RussianTrap ; var i ; begin
9989: LD_INT 0
9991: PPUSH
9992: PPUSH
// if GetSide ( Brian ) = 4 then
9993: LD_EXP 6
9997: PPUSH
9998: CALL_OW 255
10002: PUSH
10003: LD_INT 4
10005: EQUAL
10006: IFFALSE 10029
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10008: LD_EXP 6
10012: PUSH
10013: LD_EXP 7
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PPUSH
10022: LD_INT 0
10024: PPUSH
10025: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10029: LD_ADDR_VAR 0 2
10033: PUSH
10034: LD_INT 22
10036: PUSH
10037: LD_INT 3
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: LD_INT 21
10046: PUSH
10047: LD_INT 1
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PPUSH
10058: CALL_OW 69
10062: PUSH
10063: FOR_IN
10064: IFFALSE 10174
// begin ComExitBuilding ( i ) ;
10066: LD_VAR 0 2
10070: PPUSH
10071: CALL_OW 122
// wait ( 0 0$1 ) ;
10075: LD_INT 35
10077: PPUSH
10078: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10082: LD_VAR 0 2
10086: PPUSH
10087: LD_INT 120
10089: PPUSH
10090: LD_INT 56
10092: PPUSH
10093: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10097: LD_VAR 0 2
10101: PPUSH
10102: LD_INT 111
10104: PPUSH
10105: LD_INT 37
10107: PPUSH
10108: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10112: LD_INT 33
10114: PPUSH
10115: CALL_OW 255
10119: PUSH
10120: LD_INT 3
10122: EQUAL
10123: PUSH
10124: LD_INT 33
10126: PPUSH
10127: CALL_OW 302
10131: AND
10132: IFFALSE 10148
// begin AddComEnterUnit ( i , arm2 ) ;
10134: LD_VAR 0 2
10138: PPUSH
10139: LD_INT 33
10141: PPUSH
10142: CALL_OW 180
// end else
10146: GO 10172
// begin AddComCrawl ( i ) ;
10148: LD_VAR 0 2
10152: PPUSH
10153: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10157: LD_VAR 0 2
10161: PPUSH
10162: LD_INT 109
10164: PPUSH
10165: LD_INT 30
10167: PPUSH
10168: CALL_OW 174
// end ; end ;
10172: GO 10063
10174: POP
10175: POP
// end ;
10176: LD_VAR 0 1
10180: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10181: LD_INT 0
10183: PPUSH
10184: PPUSH
10185: PPUSH
10186: PPUSH
10187: PPUSH
// nearest_dist = 1000 ;
10188: LD_ADDR_VAR 0 4
10192: PUSH
10193: LD_INT 1000
10195: ST_TO_ADDR
// nearest_un = un ;
10196: LD_ADDR_VAR 0 5
10200: PUSH
10201: LD_VAR 0 1
10205: ST_TO_ADDR
// for sold in units do
10206: LD_ADDR_VAR 0 6
10210: PUSH
10211: LD_VAR 0 2
10215: PUSH
10216: FOR_IN
10217: IFFALSE 10273
// begin dist = GetDistUnits ( un , sold ) ;
10219: LD_ADDR_VAR 0 7
10223: PUSH
10224: LD_VAR 0 1
10228: PPUSH
10229: LD_VAR 0 6
10233: PPUSH
10234: CALL_OW 296
10238: ST_TO_ADDR
// if dist < nearest_dist then
10239: LD_VAR 0 7
10243: PUSH
10244: LD_VAR 0 4
10248: LESS
10249: IFFALSE 10271
// begin nearest_un = sold ;
10251: LD_ADDR_VAR 0 5
10255: PUSH
10256: LD_VAR 0 6
10260: ST_TO_ADDR
// nearest_dist = dist ;
10261: LD_ADDR_VAR 0 4
10265: PUSH
10266: LD_VAR 0 7
10270: ST_TO_ADDR
// end ; end ;
10271: GO 10216
10273: POP
10274: POP
// result := nearest_un ;
10275: LD_ADDR_VAR 0 3
10279: PUSH
10280: LD_VAR 0 5
10284: ST_TO_ADDR
// end ;
10285: LD_VAR 0 3
10289: RET
// export function PrepareDifficulty ; begin
10290: LD_INT 0
10292: PPUSH
// if Difficulty = 1 then
10293: LD_OWVAR 67
10297: PUSH
10298: LD_INT 1
10300: EQUAL
10301: IFFALSE 10364
// begin RemoveUnit ( brw2 ) ;
10303: LD_INT 9
10305: PPUSH
10306: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10310: LD_INT 30
10312: PPUSH
10313: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10317: LD_INT 52
10319: PPUSH
10320: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10324: LD_INT 63
10326: PPUSH
10327: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10331: LD_INT 5
10333: PUSH
10334: LD_INT 4
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PPUSH
10341: LD_INT 60
10343: PPUSH
10344: CALL_OW 240
// RuSoldMinLevel = 0 ;
10348: LD_ADDR_EXP 13
10352: PUSH
10353: LD_INT 0
10355: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10356: LD_ADDR_EXP 14
10360: PUSH
10361: LD_INT 1
10363: ST_TO_ADDR
// end ; if Difficulty = 2 then
10364: LD_OWVAR 67
10368: PUSH
10369: LD_INT 2
10371: EQUAL
10372: IFFALSE 10414
// begin RemoveUnit ( brw4 ) ;
10374: LD_INT 52
10376: PPUSH
10377: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10381: LD_INT 5
10383: PUSH
10384: LD_INT 4
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PPUSH
10391: LD_INT 50
10393: PPUSH
10394: CALL_OW 240
// RuSoldMinLevel = 1 ;
10398: LD_ADDR_EXP 13
10402: PUSH
10403: LD_INT 1
10405: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10406: LD_ADDR_EXP 14
10410: PUSH
10411: LD_INT 2
10413: ST_TO_ADDR
// end ; if Difficulty = 3 then
10414: LD_OWVAR 67
10418: PUSH
10419: LD_INT 3
10421: EQUAL
10422: IFFALSE 10457
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10424: LD_INT 5
10426: PUSH
10427: LD_INT 4
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PPUSH
10434: LD_INT 40
10436: PPUSH
10437: CALL_OW 240
// RuSoldMinLevel = 2 ;
10441: LD_ADDR_EXP 13
10445: PUSH
10446: LD_INT 2
10448: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10449: LD_ADDR_EXP 14
10453: PUSH
10454: LD_INT 3
10456: ST_TO_ADDR
// end ; end ;
10457: LD_VAR 0 1
10461: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10462: LD_INT 0
10464: PPUSH
10465: PPUSH
10466: PPUSH
// tmp = [ ] ;
10467: LD_ADDR_VAR 0 5
10471: PUSH
10472: EMPTY
10473: ST_TO_ADDR
// if not vehicles then
10474: LD_VAR 0 1
10478: NOT
10479: IFFALSE 10483
// exit ;
10481: GO 10600
// for i in vehicles do
10483: LD_ADDR_VAR 0 4
10487: PUSH
10488: LD_VAR 0 1
10492: PUSH
10493: FOR_IN
10494: IFFALSE 10584
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10496: LD_ADDR_VAR 0 5
10500: PUSH
10501: LD_VAR 0 5
10505: PPUSH
10506: LD_INT 1
10508: PPUSH
10509: LD_VAR 0 4
10513: PPUSH
10514: CALL_OW 265
10518: PUSH
10519: LD_VAR 0 4
10523: PPUSH
10524: CALL_OW 262
10528: PUSH
10529: LD_VAR 0 4
10533: PPUSH
10534: CALL_OW 263
10538: PUSH
10539: LD_VAR 0 4
10543: PPUSH
10544: CALL_OW 264
10548: PUSH
10549: LD_VAR 0 4
10553: PPUSH
10554: CALL_OW 261
10558: PUSH
10559: LD_VAR 0 4
10563: PPUSH
10564: CALL_OW 256
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: PPUSH
10577: CALL_OW 2
10581: ST_TO_ADDR
// end ;
10582: GO 10493
10584: POP
10585: POP
// SaveVariable ( tmp , ident ) ;
10586: LD_VAR 0 5
10590: PPUSH
10591: LD_VAR 0 2
10595: PPUSH
10596: CALL_OW 39
// end ; end_of_file
10600: LD_VAR 0 3
10604: RET
// export function PrepareHeroes ; begin
10605: LD_INT 0
10607: PPUSH
// uc_side = 1 ;
10608: LD_ADDR_OWVAR 20
10612: PUSH
10613: LD_INT 1
10615: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10616: LD_ADDR_EXP 1
10620: PUSH
10621: LD_STRING 01_JMM
10623: PPUSH
10624: CALL_OW 34
10628: ST_TO_ADDR
// SetLives ( JMM , LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ) ;
10629: LD_EXP 1
10633: PPUSH
10634: LD_STRING 01_JMMLifePoints_1
10636: PPUSH
10637: LD_INT 1000
10639: PPUSH
10640: CALL_OW 30
10644: PPUSH
10645: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10649: LD_ADDR_EXP 9
10653: PUSH
10654: LD_STRING Powell
10656: PPUSH
10657: CALL_OW 25
10661: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10662: LD_ADDR_EXP 2
10666: PUSH
10667: LD_STRING 01_Bobby
10669: PPUSH
10670: CALL_OW 34
10674: ST_TO_ADDR
// if Bobby then
10675: LD_EXP 2
10679: IFFALSE 10701
// SetLives ( Bobby , LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ) ;
10681: LD_EXP 2
10685: PPUSH
10686: LD_STRING 01_BobbyLifePoints_1
10688: PPUSH
10689: LD_INT 1000
10691: PPUSH
10692: CALL_OW 30
10696: PPUSH
10697: CALL_OW 234
// Cyrus = CreateCharacter ( 01_Cyrus ) ;
10701: LD_ADDR_EXP 3
10705: PUSH
10706: LD_STRING 01_Cyrus
10708: PPUSH
10709: CALL_OW 34
10713: ST_TO_ADDR
// if Cyrus then
10714: LD_EXP 3
10718: IFFALSE 10740
// SetLives ( Cyrus , LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ) ;
10720: LD_EXP 3
10724: PPUSH
10725: LD_STRING 01_CyrusLifePoints_1
10727: PPUSH
10728: LD_INT 1000
10730: PPUSH
10731: CALL_OW 30
10735: PPUSH
10736: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
10740: LD_ADDR_EXP 5
10744: PUSH
10745: LD_STRING Khatam
10747: PPUSH
10748: CALL_OW 25
10752: ST_TO_ADDR
// uc_side = 4 ;
10753: LD_ADDR_OWVAR 20
10757: PUSH
10758: LD_INT 4
10760: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10761: LD_ADDR_EXP 4
10765: PUSH
10766: LD_STRING Lisa
10768: PPUSH
10769: CALL_OW 25
10773: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10774: LD_EXP 1
10778: PPUSH
10779: LD_INT 3
10781: PPUSH
10782: LD_INT 0
10784: PPUSH
10785: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10789: LD_EXP 2
10793: PPUSH
10794: LD_INT 3
10796: PPUSH
10797: LD_INT 0
10799: PPUSH
10800: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10804: LD_EXP 3
10808: PPUSH
10809: LD_INT 3
10811: PPUSH
10812: LD_INT 0
10814: PPUSH
10815: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10819: LD_EXP 4
10823: PPUSH
10824: LD_INT 5
10826: PPUSH
10827: LD_INT 0
10829: PPUSH
10830: CALL_OW 49
// ComCrawl ( Lisa ) ;
10834: LD_EXP 4
10838: PPUSH
10839: CALL_OW 137
// end ;
10843: LD_VAR 0 1
10847: RET
// export function PrepareLisSquad ; var i , un ; begin
10848: LD_INT 0
10850: PPUSH
10851: PPUSH
10852: PPUSH
// uc_side = 4 ;
10853: LD_ADDR_OWVAR 20
10857: PUSH
10858: LD_INT 4
10860: ST_TO_ADDR
// uc_nation = 1 ;
10861: LD_ADDR_OWVAR 21
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
// hc_class := 2 ;
10869: LD_ADDR_OWVAR 28
10873: PUSH
10874: LD_INT 2
10876: ST_TO_ADDR
// hc_sex := sex_male ;
10877: LD_ADDR_OWVAR 27
10881: PUSH
10882: LD_INT 1
10884: ST_TO_ADDR
// hc_gallery :=  ;
10885: LD_ADDR_OWVAR 33
10889: PUSH
10890: LD_STRING 
10892: ST_TO_ADDR
// hc_name :=  ;
10893: LD_ADDR_OWVAR 26
10897: PUSH
10898: LD_STRING 
10900: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10901: LD_ADDR_OWVAR 30
10905: PUSH
10906: LD_INT 0
10908: PUSH
10909: LD_INT 1
10911: PUSH
10912: LD_INT 0
10914: PUSH
10915: LD_INT 0
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
10924: LD_ADDR_OWVAR 31
10928: PUSH
10929: LD_INT 1
10931: PUSH
10932: LD_INT 2
10934: PUSH
10935: LD_INT 0
10937: PUSH
10938: LD_INT 0
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: ST_TO_ADDR
// un := CreateHuman ;
10947: LD_ADDR_VAR 0 3
10951: PUSH
10952: CALL_OW 44
10956: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10957: LD_VAR 0 3
10961: PPUSH
10962: LD_INT 6
10964: PPUSH
10965: LD_INT 0
10967: PPUSH
10968: CALL_OW 49
// hc_sex := sex_female ;
10972: LD_ADDR_OWVAR 27
10976: PUSH
10977: LD_INT 2
10979: ST_TO_ADDR
// hc_gallery :=  ;
10980: LD_ADDR_OWVAR 33
10984: PUSH
10985: LD_STRING 
10987: ST_TO_ADDR
// hc_name :=  ;
10988: LD_ADDR_OWVAR 26
10992: PUSH
10993: LD_STRING 
10995: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
10996: LD_ADDR_OWVAR 30
11000: PUSH
11001: LD_INT 0
11003: PUSH
11004: LD_INT 0
11006: PUSH
11007: LD_INT 0
11009: PUSH
11010: LD_INT 1
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11019: LD_ADDR_OWVAR 31
11023: PUSH
11024: LD_INT 0
11026: PUSH
11027: LD_INT 1
11029: PUSH
11030: LD_INT 0
11032: PUSH
11033: LD_INT 1
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: ST_TO_ADDR
// un := CreateHuman ;
11042: LD_ADDR_VAR 0 3
11046: PUSH
11047: CALL_OW 44
11051: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11052: LD_VAR 0 3
11056: PPUSH
11057: LD_INT 6
11059: PPUSH
11060: LD_INT 0
11062: PPUSH
11063: CALL_OW 49
// if not Bobby and not Cyrus then
11067: LD_EXP 2
11071: NOT
11072: PUSH
11073: LD_EXP 3
11077: NOT
11078: AND
11079: IFFALSE 11184
// begin hc_class := 1 ;
11081: LD_ADDR_OWVAR 28
11085: PUSH
11086: LD_INT 1
11088: ST_TO_ADDR
// hc_sex := sex_male ;
11089: LD_ADDR_OWVAR 27
11093: PUSH
11094: LD_INT 1
11096: ST_TO_ADDR
// hc_gallery :=  ;
11097: LD_ADDR_OWVAR 33
11101: PUSH
11102: LD_STRING 
11104: ST_TO_ADDR
// hc_name :=  ;
11105: LD_ADDR_OWVAR 26
11109: PUSH
11110: LD_STRING 
11112: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11113: LD_ADDR_OWVAR 30
11117: PUSH
11118: LD_INT 2
11120: PUSH
11121: LD_INT 3
11123: PUSH
11124: LD_INT 1
11126: PUSH
11127: LD_INT 0
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11136: LD_ADDR_OWVAR 31
11140: PUSH
11141: LD_INT 2
11143: PUSH
11144: LD_INT 3
11146: PUSH
11147: LD_INT 1
11149: PUSH
11150: LD_INT 0
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: ST_TO_ADDR
// un := CreateHuman ;
11159: LD_ADDR_VAR 0 3
11163: PUSH
11164: CALL_OW 44
11168: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11169: LD_VAR 0 3
11173: PPUSH
11174: LD_INT 31
11176: PPUSH
11177: LD_INT 0
11179: PPUSH
11180: CALL_OW 49
// end ; InitHc ;
11184: CALL_OW 19
// end ;
11188: LD_VAR 0 1
11192: RET
// export function PrepareOtherAmericans ; begin
11193: LD_INT 0
11195: PPUSH
// uc_side = 4 ;
11196: LD_ADDR_OWVAR 20
11200: PUSH
11201: LD_INT 4
11203: ST_TO_ADDR
// uc_nation = 1 ;
11204: LD_ADDR_OWVAR 21
11208: PUSH
11209: LD_INT 1
11211: ST_TO_ADDR
// hc_gallery =  ;
11212: LD_ADDR_OWVAR 33
11216: PUSH
11217: LD_STRING 
11219: ST_TO_ADDR
// hc_name = Brian Garvin ;
11220: LD_ADDR_OWVAR 26
11224: PUSH
11225: LD_STRING Brian Garvin
11227: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11228: LD_INT 1
11230: PPUSH
11231: LD_INT 1
11233: PPUSH
11234: LD_INT 1
11236: PPUSH
11237: LD_INT 2
11239: PPUSH
11240: CALL_OW 12
11244: PPUSH
11245: CALL_OW 380
// Brian = CreateHuman ;
11249: LD_ADDR_EXP 6
11253: PUSH
11254: CALL_OW 44
11258: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11259: LD_EXP 6
11263: PPUSH
11264: LD_INT 10
11266: PPUSH
11267: LD_INT 0
11269: PPUSH
11270: CALL_OW 49
// hc_name = Jerry White ;
11274: LD_ADDR_OWVAR 26
11278: PUSH
11279: LD_STRING Jerry White
11281: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11282: LD_INT 1
11284: PPUSH
11285: LD_INT 3
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: LD_INT 2
11293: PPUSH
11294: CALL_OW 12
11298: PPUSH
11299: CALL_OW 380
// Jerry = CreateHuman ;
11303: LD_ADDR_EXP 7
11307: PUSH
11308: CALL_OW 44
11312: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11313: LD_EXP 7
11317: PPUSH
11318: LD_INT 10
11320: PPUSH
11321: LD_INT 0
11323: PPUSH
11324: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11328: LD_EXP 6
11332: PUSH
11333: LD_EXP 7
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PPUSH
11342: CALL_OW 140
// end ;
11346: LD_VAR 0 1
11350: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11351: LD_INT 0
11353: PPUSH
11354: PPUSH
11355: PPUSH
// for i = 1 to 6 do
11356: LD_ADDR_VAR 0 2
11360: PUSH
11361: DOUBLE
11362: LD_INT 1
11364: DEC
11365: ST_TO_ADDR
11366: LD_INT 6
11368: PUSH
11369: FOR_TO
11370: IFFALSE 11464
// begin uc_side = 4 ;
11372: LD_ADDR_OWVAR 20
11376: PUSH
11377: LD_INT 4
11379: ST_TO_ADDR
// uc_nation = 1 ;
11380: LD_ADDR_OWVAR 21
11384: PUSH
11385: LD_INT 1
11387: ST_TO_ADDR
// hc_gallery =  ;
11388: LD_ADDR_OWVAR 33
11392: PUSH
11393: LD_STRING 
11395: ST_TO_ADDR
// hc_name =  ;
11396: LD_ADDR_OWVAR 26
11400: PUSH
11401: LD_STRING 
11403: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11404: LD_INT 0
11406: PPUSH
11407: LD_INT 1
11409: PPUSH
11410: LD_INT 4
11412: PPUSH
11413: CALL_OW 12
11417: PPUSH
11418: LD_INT 1
11420: PPUSH
11421: CALL_OW 380
// un = CreateHuman ;
11425: LD_ADDR_VAR 0 3
11429: PUSH
11430: CALL_OW 44
11434: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11435: LD_VAR 0 3
11439: PPUSH
11440: LD_INT 16
11442: PPUSH
11443: LD_INT 0
11445: PPUSH
11446: CALL_OW 49
// SetLives ( un , 1 ) ;
11450: LD_VAR 0 3
11454: PPUSH
11455: LD_INT 1
11457: PPUSH
11458: CALL_OW 234
// end ;
11462: GO 11369
11464: POP
11465: POP
// DyingSold = CreateHuman ;
11466: LD_ADDR_EXP 34
11470: PUSH
11471: CALL_OW 44
11475: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11476: LD_EXP 34
11480: PPUSH
11481: LD_INT 16
11483: PPUSH
11484: LD_INT 0
11486: PPUSH
11487: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11491: LD_EXP 34
11495: PPUSH
11496: LD_INT 250
11498: PPUSH
11499: CALL_OW 234
// end ; end_of_file
11503: LD_VAR 0 1
11507: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11508: LD_INT 0
11510: PPUSH
11511: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) ;
11512: LD_ADDR_VAR 0 2
11516: PUSH
11517: LD_INT 22
11519: PUSH
11520: LD_INT 1
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: PUSH
11527: LD_INT 23
11529: PUSH
11530: LD_INT 1
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PUSH
11537: LD_INT 25
11539: PUSH
11540: LD_INT 2
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: LIST
11551: PPUSH
11552: CALL_OW 69
11556: ST_TO_ADDR
// uc_side = 6 ;
11557: LD_ADDR_OWVAR 20
11561: PUSH
11562: LD_INT 6
11564: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11565: LD_ADDR_EXP 8
11569: PUSH
11570: LD_STRING Mikhail
11572: PPUSH
11573: CALL_OW 25
11577: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
11578: LD_EXP 8
11582: PPUSH
11583: LD_VAR 0 2
11587: PUSH
11588: LD_INT 1
11590: ARRAY
11591: PPUSH
11592: CALL_OW 250
11596: PPUSH
11597: LD_VAR 0 2
11601: PUSH
11602: LD_INT 1
11604: ARRAY
11605: PPUSH
11606: CALL_OW 251
11610: PPUSH
11611: LD_INT 3
11613: PPUSH
11614: LD_INT 1
11616: PPUSH
11617: CALL_OW 50
// end ;
11621: LD_VAR 0 1
11625: RET
// export function PrepareRussianCommander ; begin
11626: LD_INT 0
11628: PPUSH
// uc_side = 3 ;
11629: LD_ADDR_OWVAR 20
11633: PUSH
11634: LD_INT 3
11636: ST_TO_ADDR
// uc_nation = 3 ;
11637: LD_ADDR_OWVAR 21
11641: PUSH
11642: LD_INT 3
11644: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11645: LD_ADDR_EXP 19
11649: PUSH
11650: LD_STRING Natasza
11652: PPUSH
11653: CALL_OW 25
11657: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11658: LD_EXP 19
11662: PPUSH
11663: LD_INT 24
11665: PPUSH
11666: LD_INT 0
11668: PPUSH
11669: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11673: LD_EXP 19
11677: PPUSH
11678: LD_INT 56
11680: PPUSH
11681: LD_INT 16
11683: PPUSH
11684: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11688: LD_ADDR_EXP 24
11692: PUSH
11693: LD_EXP 24
11697: PUSH
11698: LD_EXP 19
11702: ADD
11703: ST_TO_ADDR
// end ;
11704: LD_VAR 0 1
11708: RET
// export function PrepareSouthBase ; var i , un ; begin
11709: LD_INT 0
11711: PPUSH
11712: PPUSH
11713: PPUSH
// for i = 1 to 2 do
11714: LD_ADDR_VAR 0 2
11718: PUSH
11719: DOUBLE
11720: LD_INT 1
11722: DEC
11723: ST_TO_ADDR
11724: LD_INT 2
11726: PUSH
11727: FOR_TO
11728: IFFALSE 11837
// begin uc_side = 3 ;
11730: LD_ADDR_OWVAR 20
11734: PUSH
11735: LD_INT 3
11737: ST_TO_ADDR
// uc_nation = 3 ;
11738: LD_ADDR_OWVAR 21
11742: PUSH
11743: LD_INT 3
11745: ST_TO_ADDR
// hc_gallery =  ;
11746: LD_ADDR_OWVAR 33
11750: PUSH
11751: LD_STRING 
11753: ST_TO_ADDR
// hc_name =  ;
11754: LD_ADDR_OWVAR 26
11758: PUSH
11759: LD_STRING 
11761: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11762: LD_INT 1
11764: PPUSH
11765: LD_INT 1
11767: PPUSH
11768: LD_EXP 13
11772: PPUSH
11773: LD_EXP 14
11777: PPUSH
11778: CALL_OW 12
11782: PPUSH
11783: CALL_OW 380
// hc_importance = 0 ;
11787: LD_ADDR_OWVAR 32
11791: PUSH
11792: LD_INT 0
11794: ST_TO_ADDR
// un = CreateHuman ;
11795: LD_ADDR_VAR 0 3
11799: PUSH
11800: CALL_OW 44
11804: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11805: LD_VAR 0 3
11809: PPUSH
11810: LD_INT 11
11812: PPUSH
11813: LD_INT 0
11815: PPUSH
11816: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11820: LD_VAR 0 3
11824: PPUSH
11825: LD_INT 111
11827: PPUSH
11828: LD_INT 38
11830: PPUSH
11831: CALL_OW 118
// end ;
11835: GO 11727
11837: POP
11838: POP
// for i = 1 to Difficulty do
11839: LD_ADDR_VAR 0 2
11843: PUSH
11844: DOUBLE
11845: LD_INT 1
11847: DEC
11848: ST_TO_ADDR
11849: LD_OWVAR 67
11853: PUSH
11854: FOR_TO
11855: IFFALSE 11956
// begin uc_side = 3 ;
11857: LD_ADDR_OWVAR 20
11861: PUSH
11862: LD_INT 3
11864: ST_TO_ADDR
// uc_nation = 3 ;
11865: LD_ADDR_OWVAR 21
11869: PUSH
11870: LD_INT 3
11872: ST_TO_ADDR
// hc_gallery =  ;
11873: LD_ADDR_OWVAR 33
11877: PUSH
11878: LD_STRING 
11880: ST_TO_ADDR
// hc_name =  ;
11881: LD_ADDR_OWVAR 26
11885: PUSH
11886: LD_STRING 
11888: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11889: LD_INT 0
11891: PPUSH
11892: LD_INT 3
11894: PPUSH
11895: LD_EXP 13
11899: PPUSH
11900: LD_EXP 14
11904: PPUSH
11905: CALL_OW 12
11909: PPUSH
11910: CALL_OW 380
// un = CreateHuman ;
11914: LD_ADDR_VAR 0 3
11918: PUSH
11919: CALL_OW 44
11923: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
11924: LD_VAR 0 3
11928: PPUSH
11929: LD_INT 12
11931: PPUSH
11932: LD_INT 0
11934: PPUSH
11935: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
11939: LD_VAR 0 3
11943: PPUSH
11944: LD_INT 111
11946: PPUSH
11947: LD_INT 28
11949: PPUSH
11950: CALL_OW 118
// end ;
11954: GO 11854
11956: POP
11957: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
11958: LD_INT 3
11960: PPUSH
11961: LD_INT 3
11963: PPUSH
11964: LD_INT 33
11966: PPUSH
11967: LD_EXP 13
11971: PPUSH
11972: LD_EXP 14
11976: PPUSH
11977: CALL_OW 12
11981: PPUSH
11982: LD_INT 1
11984: PPUSH
11985: LD_INT 1
11987: PUSH
11988: LD_INT 1
11990: PPUSH
11991: LD_INT 2
11993: PPUSH
11994: CALL_OW 12
11998: PUSH
11999: LD_INT 1
12001: PPUSH
12002: LD_INT 2
12004: PPUSH
12005: CALL_OW 12
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: LIST
12014: PUSH
12015: LD_OWVAR 67
12019: ARRAY
12020: PPUSH
12021: CALL 8516 0 6
// for i in UnitsInside ( arm2 ) do
12025: LD_ADDR_VAR 0 2
12029: PUSH
12030: LD_INT 33
12032: PPUSH
12033: CALL_OW 313
12037: PUSH
12038: FOR_IN
12039: IFFALSE 12059
// southBaseDefenders = southBaseDefenders ^ i ;
12041: LD_ADDR_EXP 25
12045: PUSH
12046: LD_EXP 25
12050: PUSH
12051: LD_VAR 0 2
12055: ADD
12056: ST_TO_ADDR
12057: GO 12038
12059: POP
12060: POP
// end ;
12061: LD_VAR 0 1
12065: RET
// export function PrepareNorthBase ; var i , un ; begin
12066: LD_INT 0
12068: PPUSH
12069: PPUSH
12070: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12071: LD_ADDR_VAR 0 2
12075: PUSH
12076: DOUBLE
12077: LD_INT 1
12079: DEC
12080: ST_TO_ADDR
12081: LD_INT 1
12083: PPUSH
12084: LD_INT 2
12086: PPUSH
12087: CALL_OW 12
12091: PUSH
12092: LD_INT 2
12094: PPUSH
12095: LD_INT 3
12097: PPUSH
12098: CALL_OW 12
12102: PUSH
12103: LD_INT 3
12105: PPUSH
12106: LD_INT 4
12108: PPUSH
12109: CALL_OW 12
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: LIST
12118: PUSH
12119: LD_OWVAR 67
12123: ARRAY
12124: PUSH
12125: FOR_TO
12126: IFFALSE 12212
// begin uc_side = 3 ;
12128: LD_ADDR_OWVAR 20
12132: PUSH
12133: LD_INT 3
12135: ST_TO_ADDR
// uc_nation = 3 ;
12136: LD_ADDR_OWVAR 21
12140: PUSH
12141: LD_INT 3
12143: ST_TO_ADDR
// hc_gallery =  ;
12144: LD_ADDR_OWVAR 33
12148: PUSH
12149: LD_STRING 
12151: ST_TO_ADDR
// hc_name =  ;
12152: LD_ADDR_OWVAR 26
12156: PUSH
12157: LD_STRING 
12159: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12160: LD_INT 0
12162: PPUSH
12163: LD_INT 1
12165: PPUSH
12166: LD_EXP 13
12170: PPUSH
12171: LD_EXP 14
12175: PPUSH
12176: CALL_OW 12
12180: PPUSH
12181: CALL_OW 380
// un = CreateHuman ;
12185: LD_ADDR_VAR 0 3
12189: PUSH
12190: CALL_OW 44
12194: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12195: LD_VAR 0 3
12199: PPUSH
12200: LD_INT 14
12202: PPUSH
12203: LD_INT 0
12205: PPUSH
12206: CALL_OW 49
// end ;
12210: GO 12125
12212: POP
12213: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12214: LD_INT 3
12216: PPUSH
12217: LD_INT 3
12219: PPUSH
12220: LD_INT 2
12222: PPUSH
12223: LD_EXP 13
12227: PPUSH
12228: LD_EXP 14
12232: PPUSH
12233: CALL_OW 12
12237: PPUSH
12238: LD_INT 1
12240: PPUSH
12241: LD_INT 1
12243: PPUSH
12244: LD_INT 2
12246: PPUSH
12247: CALL_OW 12
12251: PUSH
12252: LD_INT 1
12254: PPUSH
12255: LD_INT 3
12257: PPUSH
12258: CALL_OW 12
12262: PUSH
12263: LD_INT 1
12265: PPUSH
12266: LD_INT 3
12268: PPUSH
12269: CALL_OW 12
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: LD_OWVAR 67
12283: ARRAY
12284: PPUSH
12285: CALL 8516 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12289: LD_INT 3
12291: PPUSH
12292: LD_INT 3
12294: PPUSH
12295: LD_INT 23
12297: PPUSH
12298: LD_EXP 13
12302: PPUSH
12303: LD_EXP 14
12307: PPUSH
12308: CALL_OW 12
12312: PPUSH
12313: LD_INT 4
12315: PPUSH
12316: LD_INT 0
12318: PUSH
12319: LD_INT 1
12321: PUSH
12322: LD_INT 2
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: PUSH
12330: LD_OWVAR 67
12334: ARRAY
12335: PPUSH
12336: CALL 8516 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12340: LD_INT 3
12342: PPUSH
12343: LD_INT 3
12345: PPUSH
12346: LD_INT 1
12348: PPUSH
12349: LD_EXP 13
12353: PPUSH
12354: LD_EXP 14
12358: PPUSH
12359: CALL_OW 12
12363: PPUSH
12364: LD_INT 2
12366: PPUSH
12367: LD_INT 1
12369: PUSH
12370: LD_INT 2
12372: PUSH
12373: LD_INT 2
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: LIST
12380: PUSH
12381: LD_OWVAR 67
12385: ARRAY
12386: PPUSH
12387: CALL 8516 0 6
// for i in UnitsInside ( arm1 ) do
12391: LD_ADDR_VAR 0 2
12395: PUSH
12396: LD_INT 2
12398: PPUSH
12399: CALL_OW 313
12403: PUSH
12404: FOR_IN
12405: IFFALSE 12425
// northBaseDefenders = northBaseDefenders ^ i ;
12407: LD_ADDR_EXP 24
12411: PUSH
12412: LD_EXP 24
12416: PUSH
12417: LD_VAR 0 2
12421: ADD
12422: ST_TO_ADDR
12423: GO 12404
12425: POP
12426: POP
// end ;
12427: LD_VAR 0 1
12431: RET
// export function PrepareOtherRussians ; var i , un ; begin
12432: LD_INT 0
12434: PPUSH
12435: PPUSH
12436: PPUSH
// for i = 1 to 2 do
12437: LD_ADDR_VAR 0 2
12441: PUSH
12442: DOUBLE
12443: LD_INT 1
12445: DEC
12446: ST_TO_ADDR
12447: LD_INT 2
12449: PUSH
12450: FOR_TO
12451: IFFALSE 12552
// begin uc_side = 3 ;
12453: LD_ADDR_OWVAR 20
12457: PUSH
12458: LD_INT 3
12460: ST_TO_ADDR
// uc_nation = 3 ;
12461: LD_ADDR_OWVAR 21
12465: PUSH
12466: LD_INT 3
12468: ST_TO_ADDR
// hc_gallery =  ;
12469: LD_ADDR_OWVAR 33
12473: PUSH
12474: LD_STRING 
12476: ST_TO_ADDR
// hc_name =  ;
12477: LD_ADDR_OWVAR 26
12481: PUSH
12482: LD_STRING 
12484: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12485: LD_INT 0
12487: PPUSH
12488: LD_INT 1
12490: PPUSH
12491: LD_EXP 13
12495: PPUSH
12496: LD_EXP 14
12500: PPUSH
12501: CALL_OW 12
12505: PPUSH
12506: CALL_OW 380
// un = CreateHuman ;
12510: LD_ADDR_VAR 0 3
12514: PUSH
12515: CALL_OW 44
12519: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12520: LD_VAR 0 3
12524: PPUSH
12525: LD_INT 9
12527: PPUSH
12528: LD_INT 0
12530: PPUSH
12531: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12535: LD_VAR 0 3
12539: PPUSH
12540: LD_INT 80
12542: PPUSH
12543: LD_INT 73
12545: PPUSH
12546: CALL_OW 118
// end ;
12550: GO 12450
12552: POP
12553: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12554: LD_ADDR_VAR 0 2
12558: PUSH
12559: LD_INT 22
12561: PUSH
12562: LD_INT 3
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: LD_INT 30
12571: PUSH
12572: LD_INT 31
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PPUSH
12583: CALL_OW 69
12587: PUSH
12588: FOR_IN
12589: IFFALSE 12617
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12591: LD_EXP 13
12595: PPUSH
12596: LD_EXP 14
12600: PPUSH
12601: CALL_OW 12
12605: PPUSH
12606: LD_VAR 0 2
12610: PPUSH
12611: CALL 8626 0 2
12615: GO 12588
12617: POP
12618: POP
// end ;
12619: LD_VAR 0 1
12623: RET
// export function PrepareCargoBays ; begin
12624: LD_INT 0
12626: PPUSH
// uc_side = 3 ;
12627: LD_ADDR_OWVAR 20
12631: PUSH
12632: LD_INT 3
12634: ST_TO_ADDR
// uc_nation = 3 ;
12635: LD_ADDR_OWVAR 21
12639: PUSH
12640: LD_INT 3
12642: ST_TO_ADDR
// vc_engine = 1 ;
12643: LD_ADDR_OWVAR 39
12647: PUSH
12648: LD_INT 1
12650: ST_TO_ADDR
// vc_control = 1 ;
12651: LD_ADDR_OWVAR 38
12655: PUSH
12656: LD_INT 1
12658: ST_TO_ADDR
// vc_weapon = 51 ;
12659: LD_ADDR_OWVAR 40
12663: PUSH
12664: LD_INT 51
12666: ST_TO_ADDR
// vc_chassis = 22 ;
12667: LD_ADDR_OWVAR 37
12671: PUSH
12672: LD_INT 22
12674: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12675: LD_ADDR_EXP 15
12679: PUSH
12680: CALL_OW 45
12684: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12685: LD_ADDR_EXP 16
12689: PUSH
12690: CALL_OW 45
12694: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12695: LD_EXP 15
12699: PPUSH
12700: LD_INT 13
12702: PPUSH
12703: LD_INT 0
12705: PPUSH
12706: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12710: LD_EXP 16
12714: PPUSH
12715: LD_INT 13
12717: PPUSH
12718: LD_INT 0
12720: PPUSH
12721: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12725: LD_EXP 15
12729: PPUSH
12730: LD_INT 2
12732: PPUSH
12733: LD_INT 70
12735: PUSH
12736: LD_INT 50
12738: PUSH
12739: LD_INT 30
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: PUSH
12747: LD_OWVAR 67
12751: ARRAY
12752: PPUSH
12753: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12757: LD_EXP 16
12761: PPUSH
12762: LD_INT 2
12764: PPUSH
12765: LD_INT 70
12767: PUSH
12768: LD_INT 50
12770: PUSH
12771: LD_INT 30
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: LIST
12778: PUSH
12779: LD_OWVAR 67
12783: ARRAY
12784: PPUSH
12785: CALL_OW 291
// hc_gallery =  ;
12789: LD_ADDR_OWVAR 33
12793: PUSH
12794: LD_STRING 
12796: ST_TO_ADDR
// hc_name =  ;
12797: LD_ADDR_OWVAR 26
12801: PUSH
12802: LD_STRING 
12804: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12805: LD_INT 1
12807: PPUSH
12808: LD_INT 3
12810: PPUSH
12811: LD_INT 1
12813: PPUSH
12814: LD_INT 2
12816: PPUSH
12817: CALL_OW 12
12821: PPUSH
12822: CALL_OW 380
// driver1 = CreateHuman ;
12826: LD_ADDR_EXP 17
12830: PUSH
12831: CALL_OW 44
12835: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12836: LD_EXP 17
12840: PPUSH
12841: LD_EXP 15
12845: PPUSH
12846: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12850: LD_ADDR_OWVAR 26
12854: PUSH
12855: LD_STRING Nikolai Andreyev
12857: ST_TO_ADDR
// driver2 = CreateHuman ;
12858: LD_ADDR_EXP 18
12862: PUSH
12863: CALL_OW 44
12867: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12868: LD_EXP 18
12872: PPUSH
12873: LD_EXP 16
12877: PPUSH
12878: CALL_OW 52
// end ;
12882: LD_VAR 0 1
12886: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12887: LD_INT 0
12889: PPUSH
12890: PPUSH
12891: PPUSH
12892: PPUSH
12893: PPUSH
12894: PPUSH
12895: PPUSH
// uc_side = 3 ;
12896: LD_ADDR_OWVAR 20
12900: PUSH
12901: LD_INT 3
12903: ST_TO_ADDR
// uc_nation = 3 ;
12904: LD_ADDR_OWVAR 21
12908: PUSH
12909: LD_INT 3
12911: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
12912: LD_ADDR_VAR 0 4
12916: PUSH
12917: DOUBLE
12918: LD_INT 1
12920: DEC
12921: ST_TO_ADDR
12922: LD_VAR 0 1
12926: PUSH
12927: LD_INT 1
12929: PPUSH
12930: LD_INT 3
12932: PPUSH
12933: CALL_OW 12
12937: PLUS
12938: PUSH
12939: FOR_TO
12940: IFFALSE 13117
// begin vc_engine = 1 ;
12942: LD_ADDR_OWVAR 39
12946: PUSH
12947: LD_INT 1
12949: ST_TO_ADDR
// vc_control = 1 ;
12950: LD_ADDR_OWVAR 38
12954: PUSH
12955: LD_INT 1
12957: ST_TO_ADDR
// vc_weapon = 42 ;
12958: LD_ADDR_OWVAR 40
12962: PUSH
12963: LD_INT 42
12965: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
12966: LD_ADDR_OWVAR 37
12970: PUSH
12971: LD_INT 21
12973: PUSH
12974: LD_INT 22
12976: PUSH
12977: LD_INT 22
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: LIST
12984: PUSH
12985: LD_OWVAR 67
12989: ARRAY
12990: ST_TO_ADDR
// veh = CreateVehicle ;
12991: LD_ADDR_VAR 0 5
12995: PUSH
12996: CALL_OW 45
13000: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13001: LD_VAR 0 5
13005: PPUSH
13006: LD_VAR 0 2
13010: PPUSH
13011: LD_INT 0
13013: PPUSH
13014: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13018: LD_ADDR_EXP 26
13022: PUSH
13023: LD_EXP 26
13027: PUSH
13028: LD_VAR 0 5
13032: ADD
13033: ST_TO_ADDR
// hc_gallery =  ;
13034: LD_ADDR_OWVAR 33
13038: PUSH
13039: LD_STRING 
13041: ST_TO_ADDR
// hc_name =  ;
13042: LD_ADDR_OWVAR 26
13046: PUSH
13047: LD_STRING 
13049: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13050: LD_INT 0
13052: PPUSH
13053: LD_INT 3
13055: PPUSH
13056: LD_EXP 13
13060: PPUSH
13061: LD_EXP 14
13065: PPUSH
13066: CALL_OW 12
13070: PPUSH
13071: CALL_OW 380
// un = CreateHuman ;
13075: LD_ADDR_VAR 0 6
13079: PUSH
13080: CALL_OW 44
13084: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13085: LD_VAR 0 6
13089: PPUSH
13090: LD_VAR 0 5
13094: PPUSH
13095: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13099: LD_ADDR_EXP 26
13103: PUSH
13104: LD_EXP 26
13108: PUSH
13109: LD_VAR 0 6
13113: ADD
13114: ST_TO_ADDR
// end ;
13115: GO 12939
13117: POP
13118: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13119: LD_INT 0
13121: PPUSH
13122: LD_INT 2
13124: PPUSH
13125: LD_EXP 13
13129: PPUSH
13130: LD_EXP 14
13134: PPUSH
13135: CALL_OW 12
13139: PPUSH
13140: CALL_OW 380
// un = CreateHuman ;
13144: LD_ADDR_VAR 0 6
13148: PUSH
13149: CALL_OW 44
13153: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13154: LD_ADDR_VAR 0 4
13158: PUSH
13159: DOUBLE
13160: LD_INT 1
13162: DEC
13163: ST_TO_ADDR
13164: LD_VAR 0 1
13168: PUSH
13169: LD_INT 2
13171: PUSH
13172: LD_INT 2
13174: MUL
13175: PLUS
13176: PUSH
13177: FOR_TO
13178: IFFALSE 13266
// begin hc_gallery =  ;
13180: LD_ADDR_OWVAR 33
13184: PUSH
13185: LD_STRING 
13187: ST_TO_ADDR
// hc_name =  ;
13188: LD_ADDR_OWVAR 26
13192: PUSH
13193: LD_STRING 
13195: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13196: LD_INT 1
13198: PPUSH
13199: LD_INT 1
13201: PPUSH
13202: LD_EXP 13
13206: PPUSH
13207: LD_EXP 14
13211: PPUSH
13212: CALL_OW 12
13216: PPUSH
13217: CALL_OW 380
// un = CreateHuman ;
13221: LD_ADDR_VAR 0 6
13225: PUSH
13226: CALL_OW 44
13230: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13231: LD_VAR 0 6
13235: PPUSH
13236: LD_VAR 0 2
13240: PPUSH
13241: LD_INT 0
13243: PPUSH
13244: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13248: LD_ADDR_EXP 26
13252: PUSH
13253: LD_EXP 26
13257: PUSH
13258: LD_VAR 0 6
13262: ADD
13263: ST_TO_ADDR
// end ;
13264: GO 13177
13266: POP
13267: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13268: LD_ADDR_VAR 0 7
13272: PUSH
13273: LD_INT 26
13275: PPUSH
13276: LD_INT 22
13278: PUSH
13279: LD_INT 3
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 21
13288: PUSH
13289: LD_INT 1
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: LD_INT 26
13298: PUSH
13299: LD_INT 1
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: LIST
13310: PPUSH
13311: CALL_OW 70
13315: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13316: LD_VAR 0 7
13320: PUSH
13321: LD_INT 1
13323: ARRAY
13324: PPUSH
13325: LD_STRING D9-Rus3-1
13327: PPUSH
13328: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13332: LD_VAR 0 7
13336: PUSH
13337: LD_INT 2
13339: ARRAY
13340: PPUSH
13341: LD_STRING D9-Russ-1
13343: PPUSH
13344: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13348: LD_INT 35
13350: PPUSH
13351: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13355: LD_ADDR_VAR 0 4
13359: PUSH
13360: LD_INT 26
13362: PPUSH
13363: LD_INT 22
13365: PUSH
13366: LD_INT 3
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: EMPTY
13374: LIST
13375: PPUSH
13376: CALL_OW 70
13380: PUSH
13381: FOR_IN
13382: IFFALSE 13554
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13384: LD_ADDR_VAR 0 8
13388: PUSH
13389: LD_INT 22
13391: PUSH
13392: LD_INT 1
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL_OW 69
13403: PPUSH
13404: LD_VAR 0 4
13408: PPUSH
13409: CALL_OW 74
13413: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13414: LD_ADDR_VAR 0 9
13418: PUSH
13419: LD_INT 22
13421: PUSH
13422: LD_INT 1
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: LD_INT 2
13431: PUSH
13432: LD_INT 59
13434: PUSH
13435: EMPTY
13436: LIST
13437: PUSH
13438: LD_INT 21
13440: PUSH
13441: LD_INT 1
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 21
13450: PUSH
13451: LD_INT 2
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: EMPTY
13469: LIST
13470: PPUSH
13471: CALL_OW 69
13475: PPUSH
13476: LD_VAR 0 4
13480: PPUSH
13481: CALL_OW 74
13485: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13486: LD_VAR 0 4
13490: PPUSH
13491: LD_VAR 0 8
13495: PPUSH
13496: CALL_OW 296
13500: PUSH
13501: LD_INT 8
13503: PLUS
13504: PUSH
13505: LD_VAR 0 4
13509: PPUSH
13510: LD_VAR 0 9
13514: PPUSH
13515: CALL_OW 296
13519: LESS
13520: IFFALSE 13538
// begin ComAttackUnit ( i , target1 ) ;
13522: LD_VAR 0 4
13526: PPUSH
13527: LD_VAR 0 8
13531: PPUSH
13532: CALL_OW 115
// end else
13536: GO 13552
// begin ComAttackUnit ( i , target2 ) ;
13538: LD_VAR 0 4
13542: PPUSH
13543: LD_VAR 0 9
13547: PPUSH
13548: CALL_OW 115
// end ; end ;
13552: GO 13381
13554: POP
13555: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13556: LD_INT 26
13558: PPUSH
13559: LD_INT 22
13561: PUSH
13562: LD_INT 3
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 2
13571: PUSH
13572: LD_INT 21
13574: PUSH
13575: LD_INT 1
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 21
13584: PUSH
13585: LD_INT 2
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 59
13594: PUSH
13595: EMPTY
13596: LIST
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PPUSH
13608: CALL_OW 70
13612: PUSH
13613: LD_INT 0
13615: EQUAL
13616: IFFALSE 13348
// end ; end_of_file
13618: LD_VAR 0 3
13622: RET
// every 0 0$1 do
13623: GO 13625
13625: DISABLE
// begin enable ;
13626: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13627: LD_INT 3
13629: PPUSH
13630: LD_INT 1
13632: PPUSH
13633: LD_INT 22
13635: PPUSH
13636: CALL 8762 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13640: LD_INT 3
13642: PPUSH
13643: LD_INT 20
13645: PPUSH
13646: LD_INT 22
13648: PPUSH
13649: LD_INT 23
13651: PPUSH
13652: CALL 9008 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13656: LD_INT 3
13658: PPUSH
13659: LD_INT 21
13661: PPUSH
13662: LD_INT 23
13664: PPUSH
13665: CALL 9285 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13669: LD_INT 22
13671: PPUSH
13672: LD_INT 1
13674: PPUSH
13675: LD_EXP 24
13679: PPUSH
13680: LD_INT 2
13682: PPUSH
13683: LD_INT 3
13685: PPUSH
13686: CALL 9757 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13690: LD_INT 23
13692: PPUSH
13693: LD_INT 1
13695: PPUSH
13696: LD_EXP 25
13700: PPUSH
13701: LD_INT 33
13703: PPUSH
13704: LD_INT 1
13706: PPUSH
13707: CALL 9757 0 5
// end ; end_of_file
13711: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13712: LD_VAR 0 1
13716: PPUSH
13717: CALL_OW 255
13721: PUSH
13722: LD_INT 1
13724: EQUAL
13725: PUSH
13726: LD_VAR 0 1
13730: PPUSH
13731: CALL_OW 247
13735: PUSH
13736: LD_INT 1
13738: EQUAL
13739: AND
13740: IFFALSE 13756
// deadsCounter = deadsCounter + 1 ;
13742: LD_ADDR_EXP 31
13746: PUSH
13747: LD_EXP 31
13751: PUSH
13752: LD_INT 1
13754: PLUS
13755: ST_TO_ADDR
// end ;
13756: PPOPN 1
13758: END
// on Command ( comandid ) do var i , j , tmp ;
13759: LD_INT 0
13761: PPUSH
13762: PPUSH
13763: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13764: LD_ADDR_VAR 0 2
13768: PUSH
13769: LD_INT 22
13771: PUSH
13772: LD_INT 1
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PUSH
13779: LD_INT 21
13781: PUSH
13782: LD_INT 2
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PPUSH
13793: CALL_OW 69
13797: PUSH
13798: FOR_IN
13799: IFFALSE 13924
// begin if GetTaskList ( i ) > 0 then
13801: LD_VAR 0 2
13805: PPUSH
13806: CALL_OW 437
13810: PUSH
13811: LD_INT 0
13813: GREATER
13814: IFFALSE 13922
// begin for j = 1 to GetTaskList ( i ) do
13816: LD_ADDR_VAR 0 3
13820: PUSH
13821: DOUBLE
13822: LD_INT 1
13824: DEC
13825: ST_TO_ADDR
13826: LD_VAR 0 2
13830: PPUSH
13831: CALL_OW 437
13835: PUSH
13836: FOR_TO
13837: IFFALSE 13920
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13839: LD_ADDR_VAR 0 4
13843: PUSH
13844: LD_VAR 0 2
13848: PPUSH
13849: CALL_OW 437
13853: PUSH
13854: LD_VAR 0 3
13858: ARRAY
13859: PUSH
13860: LD_INT 4
13862: ARRAY
13863: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
13864: LD_VAR 0 4
13868: PPUSH
13869: CALL_OW 255
13873: PUSH
13874: LD_INT 3
13876: EQUAL
13877: PUSH
13878: LD_VAR 0 4
13882: PPUSH
13883: CALL_OW 247
13887: PUSH
13888: LD_INT 2
13890: EQUAL
13891: AND
13892: PUSH
13893: LD_VAR 0 4
13897: PPUSH
13898: CALL_OW 264
13902: PUSH
13903: LD_INT 51
13905: EQUAL
13906: AND
13907: IFFALSE 13918
// ComStop ( i ) ;
13909: LD_VAR 0 2
13913: PPUSH
13914: CALL_OW 141
// end ;
13918: GO 13836
13920: POP
13921: POP
// end ; end ;
13922: GO 13798
13924: POP
13925: POP
// end ; end_of_file
13926: PPOPN 4
13928: END
// every 0 0$1 trigger IsDead ( JMM ) do
13929: LD_EXP 1
13933: PPUSH
13934: CALL_OW 301
13938: IFFALSE 13950
13940: GO 13942
13942: DISABLE
// YouLost ( JMM ) ;
13943: LD_STRING JMM
13945: PPUSH
13946: CALL_OW 104
13950: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
13951: LD_INT 1
13953: PPUSH
13954: CALL_OW 301
13958: PUSH
13959: LD_INT 10
13961: PPUSH
13962: CALL_OW 301
13966: OR
13967: IFFALSE 13979
13969: GO 13971
13971: DISABLE
// YouLost ( DepotDestroyed ) ;
13972: LD_STRING DepotDestroyed
13974: PPUSH
13975: CALL_OW 104
13979: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
13980: LD_INT 22
13982: PUSH
13983: LD_INT 1
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PUSH
13990: LD_INT 21
13992: PUSH
13993: LD_INT 1
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 25
14002: PUSH
14003: LD_INT 2
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: LIST
14014: PPUSH
14015: CALL_OW 69
14019: PUSH
14020: LD_INT 0
14022: EQUAL
14023: PUSH
14024: LD_INT 22
14026: PUSH
14027: LD_INT 4
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: LD_INT 21
14036: PUSH
14037: LD_INT 1
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 25
14046: PUSH
14047: LD_INT 2
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: PPUSH
14059: CALL_OW 69
14063: PUSH
14064: LD_INT 0
14066: EQUAL
14067: AND
14068: PUSH
14069: LD_INT 1
14071: PPUSH
14072: CALL_OW 255
14076: PUSH
14077: LD_INT 3
14079: EQUAL
14080: AND
14081: PUSH
14082: LD_INT 10
14084: PPUSH
14085: CALL_OW 255
14089: PUSH
14090: LD_INT 3
14092: EQUAL
14093: AND
14094: IFFALSE 14106
14096: GO 14098
14098: DISABLE
// YouLost ( Engineer ) ;
14099: LD_STRING Engineer
14101: PPUSH
14102: CALL_OW 104
14106: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14107: LD_INT 1
14109: PPUSH
14110: CALL_OW 255
14114: PUSH
14115: LD_INT 3
14117: EQUAL
14118: PUSH
14119: LD_EXP 27
14123: PUSH
14124: LD_INT 1
14126: EQUAL
14127: AND
14128: IFFALSE 14140
14130: GO 14132
14132: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14133: LD_STRING DepotCaptured
14135: PPUSH
14136: CALL_OW 104
14140: END
// export function PrepareTigers ; var i , un ; begin
14141: LD_INT 0
14143: PPUSH
14144: PPUSH
14145: PPUSH
// for i = 1 to Difficulty do
14146: LD_ADDR_VAR 0 2
14150: PUSH
14151: DOUBLE
14152: LD_INT 1
14154: DEC
14155: ST_TO_ADDR
14156: LD_OWVAR 67
14160: PUSH
14161: FOR_TO
14162: IFFALSE 14297
// begin hc_sex = sex_male ;
14164: LD_ADDR_OWVAR 27
14168: PUSH
14169: LD_INT 1
14171: ST_TO_ADDR
// uc_side = 0 ;
14172: LD_ADDR_OWVAR 20
14176: PUSH
14177: LD_INT 0
14179: ST_TO_ADDR
// uc_nation = nation_nature ;
14180: LD_ADDR_OWVAR 21
14184: PUSH
14185: LD_INT 0
14187: ST_TO_ADDR
// hc_class = class_tiger ;
14188: LD_ADDR_OWVAR 28
14192: PUSH
14193: LD_INT 14
14195: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14196: LD_ADDR_OWVAR 31
14200: PUSH
14201: LD_EXP 14
14205: PUSH
14206: LD_INT 0
14208: PUSH
14209: LD_INT 0
14211: PUSH
14212: LD_INT 0
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14221: LD_ADDR_OWVAR 35
14225: PUSH
14226: LD_INT 30
14228: PPUSH
14229: LD_INT 40
14231: PPUSH
14232: CALL_OW 12
14236: PUSH
14237: LD_INT 40
14239: PPUSH
14240: LD_INT 50
14242: PPUSH
14243: CALL_OW 12
14247: PUSH
14248: LD_INT 50
14250: PPUSH
14251: LD_INT 60
14253: PPUSH
14254: CALL_OW 12
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: PUSH
14264: LD_OWVAR 67
14268: ARRAY
14269: ST_TO_ADDR
// un = CreateHuman ;
14270: LD_ADDR_VAR 0 3
14274: PUSH
14275: CALL_OW 44
14279: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14280: LD_VAR 0 3
14284: PPUSH
14285: LD_INT 27
14287: PPUSH
14288: LD_INT 0
14290: PPUSH
14291: CALL_OW 49
// end ;
14295: GO 14161
14297: POP
14298: POP
// end ; end_of_file
14299: LD_VAR 0 1
14303: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 do
14304: LD_INT 1
14306: PPUSH
14307: CALL_OW 255
14311: PUSH
14312: LD_INT 1
14314: EQUAL
14315: PUSH
14316: LD_INT 10
14318: PPUSH
14319: CALL_OW 255
14323: PUSH
14324: LD_INT 1
14326: EQUAL
14327: AND
14328: PUSH
14329: LD_EXP 20
14333: PUSH
14334: LD_INT 1
14336: EQUAL
14337: AND
14338: IFFALSE 14429
14340: GO 14342
14342: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14343: LD_INT 9450
14345: PUSH
14346: LD_INT 8400
14348: PUSH
14349: LD_INT 6300
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: LIST
14356: PUSH
14357: LD_OWVAR 67
14361: ARRAY
14362: PPUSH
14363: CALL_OW 67
// if cargoEscape = 1 then
14367: LD_EXP 20
14371: PUSH
14372: LD_INT 1
14374: EQUAL
14375: IFFALSE 14429
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14377: LD_EXP 9
14381: PPUSH
14382: LD_STRING D6-Pow-1
14384: PPUSH
14385: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14389: LD_EXP 1
14393: PPUSH
14394: LD_STRING D6-JMM-1
14396: PPUSH
14397: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14401: LD_EXP 9
14405: PPUSH
14406: LD_STRING D6-Pow-2
14408: PPUSH
14409: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14413: LD_EXP 1
14417: PPUSH
14418: LD_STRING D6-JMM-2
14420: PPUSH
14421: CALL_OW 88
// FinishMission ;
14425: CALL 14637 0 0
// end ; end ;
14429: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14430: LD_INT 1
14432: PPUSH
14433: CALL_OW 255
14437: PUSH
14438: LD_INT 1
14440: EQUAL
14441: PUSH
14442: LD_INT 10
14444: PPUSH
14445: CALL_OW 255
14449: PUSH
14450: LD_INT 1
14452: EQUAL
14453: AND
14454: PUSH
14455: LD_EXP 20
14459: PUSH
14460: LD_INT 1
14462: GREATER
14463: AND
14464: IFFALSE 14531
14466: GO 14468
14468: DISABLE
14469: LD_INT 0
14471: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14472: LD_INT 11550
14474: PUSH
14475: LD_INT 10500
14477: PUSH
14478: LD_INT 9450
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: LIST
14485: PUSH
14486: LD_OWVAR 67
14490: ARRAY
14491: PPUSH
14492: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14496: LD_INT 1
14498: PUSH
14499: LD_INT 2
14501: PUSH
14502: LD_INT 3
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: LIST
14509: PUSH
14510: LD_OWVAR 67
14514: ARRAY
14515: PPUSH
14516: LD_INT 13
14518: PPUSH
14519: CALL 12887 0 2
// lastBattle = 1 ;
14523: LD_ADDR_EXP 27
14527: PUSH
14528: LD_INT 1
14530: ST_TO_ADDR
// end ;
14531: PPOPN 1
14533: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14534: LD_EXP 27
14538: PUSH
14539: LD_INT 1
14541: EQUAL
14542: PUSH
14543: LD_INT 26
14545: PPUSH
14546: LD_INT 22
14548: PUSH
14549: LD_INT 3
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 21
14558: PUSH
14559: LD_INT 1
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PPUSH
14570: CALL_OW 70
14574: PUSH
14575: LD_INT 0
14577: EQUAL
14578: AND
14579: IFFALSE 14636
14581: GO 14583
14583: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14584: LD_EXP 9
14588: PPUSH
14589: LD_STRING D6-Pow-1
14591: PPUSH
14592: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14596: LD_EXP 1
14600: PPUSH
14601: LD_STRING D6-JMM-1
14603: PPUSH
14604: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14608: LD_EXP 9
14612: PPUSH
14613: LD_STRING D6-Pow-2
14615: PPUSH
14616: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14620: LD_EXP 1
14624: PPUSH
14625: LD_STRING D6-JMM-2
14627: PPUSH
14628: CALL_OW 88
// FinishMission ;
14632: CALL 14637 0 0
// end ;
14636: END
// export function FinishMission ; var tmp ; begin
14637: LD_INT 0
14639: PPUSH
14640: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14641: LD_ADDR_VAR 0 2
14645: PUSH
14646: LD_INT 22
14648: PUSH
14649: LD_INT 1
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 21
14658: PUSH
14659: LD_INT 2
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: PUSH
14666: LD_INT 24
14668: PUSH
14669: LD_INT 251
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: LIST
14680: PPUSH
14681: CALL_OW 69
14685: ST_TO_ADDR
// if tmp then
14686: LD_VAR 0 2
14690: IFFALSE 14704
// SaveVehicles ( tmp , 02_tanks_1 ) ;
14692: LD_VAR 0 2
14696: PPUSH
14697: LD_STRING 02_tanks_1
14699: PPUSH
14700: CALL 10462 0 2
// if mikhailStatus = 1 then
14704: LD_EXP 21
14708: PUSH
14709: LD_INT 1
14711: EQUAL
14712: IFFALSE 14726
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
14714: LD_EXP 21
14718: PPUSH
14719: LD_STRING 02_mikhailStatus_1
14721: PPUSH
14722: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
14726: LD_INT 1
14728: PPUSH
14729: CALL_OW 274
14733: PPUSH
14734: LD_INT 1
14736: PPUSH
14737: CALL_OW 275
14741: PPUSH
14742: LD_STRING 02_resources_4
14744: PPUSH
14745: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
14749: LD_INT 1
14751: PPUSH
14752: CALL_OW 274
14756: PPUSH
14757: LD_INT 1
14759: PPUSH
14760: CALL_OW 275
14764: PUSH
14765: LD_INT 200
14767: GREATEREQUAL
14768: IFFALSE 14782
// begin AddMedal ( Cans , 1 ) ;
14770: LD_STRING Cans
14772: PPUSH
14773: LD_INT 1
14775: PPUSH
14776: CALL_OW 101
// end else
14780: GO 14793
// begin AddMedal ( Cans , - 1 ) ;
14782: LD_STRING Cans
14784: PPUSH
14785: LD_INT 1
14787: NEG
14788: PPUSH
14789: CALL_OW 101
// end ; if deadsCounter < 2 then
14793: LD_EXP 31
14797: PUSH
14798: LD_INT 2
14800: LESS
14801: IFFALSE 14815
// begin AddMedal ( Deaths , 1 ) ;
14803: LD_STRING Deaths
14805: PPUSH
14806: LD_INT 1
14808: PPUSH
14809: CALL_OW 101
// end else
14813: GO 14826
// begin AddMedal ( Deaths , - 1 ) ;
14815: LD_STRING Deaths
14817: PPUSH
14818: LD_INT 1
14820: NEG
14821: PPUSH
14822: CALL_OW 101
// end ; if mikhailStatus = 0 then
14826: LD_EXP 21
14830: PUSH
14831: LD_INT 0
14833: EQUAL
14834: IFFALSE 14847
// AddMedal ( Prisoner , - 1 ) ;
14836: LD_STRING Prisoner
14838: PPUSH
14839: LD_INT 1
14841: NEG
14842: PPUSH
14843: CALL_OW 101
// if mikhailStatus = 1 then
14847: LD_EXP 21
14851: PUSH
14852: LD_INT 1
14854: EQUAL
14855: IFFALSE 14867
// AddMedal ( Prisoner , 1 ) ;
14857: LD_STRING Prisoner
14859: PPUSH
14860: LD_INT 1
14862: PPUSH
14863: CALL_OW 101
// if mikhailStatus = 2 then
14867: LD_EXP 21
14871: PUSH
14872: LD_INT 2
14874: EQUAL
14875: IFFALSE 14887
// AddMedal ( Prisoner , 2 ) ;
14877: LD_STRING Prisoner
14879: PPUSH
14880: LD_INT 2
14882: PPUSH
14883: CALL_OW 101
// if mikhailStatus = 3 then
14887: LD_EXP 21
14891: PUSH
14892: LD_INT 3
14894: EQUAL
14895: IFFALSE 14908
// AddMedal ( Prisoner , - 2 ) ;
14897: LD_STRING Prisoner
14899: PPUSH
14900: LD_INT 2
14902: NEG
14903: PPUSH
14904: CALL_OW 101
// GiveMedals ( MAIN ) ;
14908: LD_STRING MAIN
14910: PPUSH
14911: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
14915: LD_INT 22
14917: PUSH
14918: LD_INT 1
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 23
14927: PUSH
14928: LD_INT 1
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PUSH
14935: LD_INT 21
14937: PUSH
14938: LD_INT 1
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: LIST
14949: PPUSH
14950: CALL_OW 69
14954: PPUSH
14955: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
14959: LD_EXP 1
14963: PPUSH
14964: LD_EXP 33
14968: PUSH
14969: LD_STRING JMM
14971: STR
14972: PPUSH
14973: CALL_OW 38
// if IsOK ( Bobby ) then
14977: LD_EXP 2
14981: PPUSH
14982: CALL_OW 302
14986: IFFALSE 15006
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
14988: LD_EXP 2
14992: PPUSH
14993: LD_EXP 33
14997: PUSH
14998: LD_STRING Bobby
15000: STR
15001: PPUSH
15002: CALL_OW 38
// if IsOK ( Cyrus ) then
15006: LD_EXP 3
15010: PPUSH
15011: CALL_OW 302
15015: IFFALSE 15035
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15017: LD_EXP 3
15021: PPUSH
15022: LD_EXP 33
15026: PUSH
15027: LD_STRING Cyrus
15029: STR
15030: PPUSH
15031: CALL_OW 38
// if IsOK ( Lisa ) then
15035: LD_EXP 4
15039: PPUSH
15040: CALL_OW 302
15044: IFFALSE 15064
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15046: LD_EXP 4
15050: PPUSH
15051: LD_EXP 33
15055: PUSH
15056: LD_STRING Lisa
15058: STR
15059: PPUSH
15060: CALL_OW 38
// if IsOK ( Khatam ) then
15064: LD_EXP 5
15068: PPUSH
15069: CALL_OW 302
15073: IFFALSE 15093
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15075: LD_EXP 5
15079: PPUSH
15080: LD_EXP 33
15084: PUSH
15085: LD_STRING Khatam
15087: STR
15088: PPUSH
15089: CALL_OW 38
// if IsOK ( Brian ) then
15093: LD_EXP 6
15097: PPUSH
15098: CALL_OW 302
15102: IFFALSE 15122
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15104: LD_EXP 6
15108: PPUSH
15109: LD_EXP 33
15113: PUSH
15114: LD_STRING Brian
15116: STR
15117: PPUSH
15118: CALL_OW 38
// if IsOk ( Jerry ) then
15122: LD_EXP 7
15126: PPUSH
15127: CALL_OW 302
15131: IFFALSE 15151
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15133: LD_EXP 7
15137: PPUSH
15138: LD_EXP 33
15142: PUSH
15143: LD_STRING Jerry
15145: STR
15146: PPUSH
15147: CALL_OW 38
// if mikhailStatus = 1 then
15151: LD_EXP 21
15155: PUSH
15156: LD_INT 1
15158: EQUAL
15159: IFFALSE 15179
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15161: LD_EXP 8
15165: PPUSH
15166: LD_EXP 33
15170: PUSH
15171: LD_STRING Mikhail
15173: STR
15174: PPUSH
15175: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15179: LD_INT 50
15181: PUSH
15182: EMPTY
15183: LIST
15184: PUSH
15185: LD_INT 22
15187: PUSH
15188: LD_INT 1
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 21
15197: PUSH
15198: LD_INT 1
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: LIST
15209: PPUSH
15210: CALL_OW 69
15214: PUSH
15215: LD_EXP 1
15219: PUSH
15220: LD_EXP 2
15224: PUSH
15225: LD_EXP 3
15229: PUSH
15230: LD_EXP 4
15234: PUSH
15235: LD_EXP 5
15239: PUSH
15240: LD_EXP 6
15244: PUSH
15245: LD_EXP 7
15249: PUSH
15250: LD_EXP 8
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: DIFF
15265: PPUSH
15266: LD_STRING 02_other_survivors
15268: PPUSH
15269: CALL_OW 38
// YouWin ;
15273: CALL_OW 103
// end ;
15277: LD_VAR 0 1
15281: RET
