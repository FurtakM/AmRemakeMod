// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// PrepareDifficulty ;
 161: CALL 10464 0 0
// PrepareRussianCommander ;
 165: CALL 11908 0 0
// PrepareSouthBase ;
 169: CALL 11991 0 0
// PrepareNorthBase ;
 173: CALL 12330 0 0
// PrepareOtherRussians ;
 177: CALL 12696 0 0
// PrepareHeroes ;
 181: CALL 10779 0 0
// PrepareLisSquad ;
 185: CALL 11107 0 0
// PrepareOtherAmericans ;
 189: CALL 11452 0 0
// end ; end_of_file
 193: END
// every 1 do var tmp ;
 194: GO 196
 196: DISABLE
 197: LD_INT 0
 199: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 209: LD_ADDR_VAR 0 1
 213: PUSH
 214: LD_INT 22
 216: PUSH
 217: LD_INT 4
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 21
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PPUSH
 238: CALL_OW 69
 242: PUSH
 243: LD_EXP 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: DIFF
 251: ST_TO_ADDR
// if Cyrus and Bobby then
 252: LD_EXP 3
 256: PUSH
 257: LD_EXP 2
 261: AND
 262: IFFALSE 592
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 264: LD_EXP 3
 268: PPUSH
 269: LD_INT 43
 271: PPUSH
 272: LD_INT 72
 274: PPUSH
 275: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_INT 44
 286: PPUSH
 287: LD_INT 70
 289: PPUSH
 290: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 294: LD_EXP 1
 298: PPUSH
 299: LD_INT 46
 301: PPUSH
 302: LD_INT 73
 304: PPUSH
 305: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 309: LD_EXP 3
 313: PPUSH
 314: LD_STRING D1a-Cyrus-1
 316: PPUSH
 317: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_STRING D1a-JMM-1
 328: PPUSH
 329: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 333: LD_EXP 3
 337: PPUSH
 338: LD_INT 37
 340: PPUSH
 341: LD_INT 66
 343: PPUSH
 344: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 348: LD_EXP 2
 352: PPUSH
 353: LD_INT 41
 355: PPUSH
 356: LD_INT 67
 358: PPUSH
 359: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 363: LD_EXP 1
 367: PPUSH
 368: LD_INT 38
 370: PPUSH
 371: LD_INT 64
 373: PPUSH
 374: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 378: LD_EXP 2
 382: PPUSH
 383: LD_STRING D1a-Bobby-2
 385: PPUSH
 386: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 390: LD_EXP 3
 394: PPUSH
 395: LD_INT 35
 397: PPUSH
 398: LD_INT 62
 400: PPUSH
 401: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 405: LD_EXP 2
 409: PPUSH
 410: LD_INT 32
 412: PPUSH
 413: LD_INT 60
 415: PPUSH
 416: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 420: LD_EXP 1
 424: PPUSH
 425: LD_INT 35
 427: PPUSH
 428: LD_INT 60
 430: PPUSH
 431: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 435: LD_EXP 1
 439: PPUSH
 440: LD_STRING D1a-JMM-2
 442: PPUSH
 443: CALL_OW 88
// ComWalk ( Lisa ) ;
 447: LD_EXP 4
 451: PPUSH
 452: CALL_OW 138
// wait ( 0 0$1 ) ;
 456: LD_INT 35
 458: PPUSH
 459: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 463: LD_EXP 4
 467: PPUSH
 468: LD_EXP 1
 472: PPUSH
 473: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 477: LD_EXP 1
 481: PUSH
 482: LD_EXP 3
 486: PUSH
 487: LD_EXP 2
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PPUSH
 497: LD_EXP 4
 501: PPUSH
 502: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 506: LD_VAR 0 1
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: LD_INT 33
 517: PPUSH
 518: LD_INT 55
 520: PPUSH
 521: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 525: LD_VAR 0 1
 529: PUSH
 530: LD_INT 2
 532: ARRAY
 533: PPUSH
 534: LD_INT 30
 536: PPUSH
 537: LD_INT 54
 539: PPUSH
 540: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 544: LD_VAR 0 1
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: LD_EXP 1
 557: PPUSH
 558: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 562: LD_VAR 0 1
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 1
 575: PPUSH
 576: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 580: LD_EXP 4
 584: PPUSH
 585: LD_STRING D1a-Lisa-2
 587: PPUSH
 588: CALL_OW 88
// end ; if Cyrus and not Bobby then
 592: LD_EXP 3
 596: PUSH
 597: LD_EXP 2
 601: NOT
 602: AND
 603: IFFALSE 808
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 605: LD_EXP 3
 609: PPUSH
 610: LD_INT 43
 612: PPUSH
 613: LD_INT 72
 615: PPUSH
 616: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 46
 627: PPUSH
 628: LD_INT 73
 630: PPUSH
 631: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 635: LD_EXP 3
 639: PPUSH
 640: LD_STRING D1a-Cyrus-1
 642: PPUSH
 643: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 647: LD_EXP 1
 651: PPUSH
 652: LD_STRING D1a-JMM-1
 654: PPUSH
 655: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 659: LD_EXP 3
 663: PPUSH
 664: LD_INT 37
 666: PPUSH
 667: LD_INT 66
 669: PPUSH
 670: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 674: LD_EXP 1
 678: PPUSH
 679: LD_INT 38
 681: PPUSH
 682: LD_INT 64
 684: PPUSH
 685: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 689: LD_EXP 3
 693: PPUSH
 694: LD_STRING D1a-Cyrus-2
 696: PPUSH
 697: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 701: LD_EXP 3
 705: PPUSH
 706: LD_INT 35
 708: PPUSH
 709: LD_INT 62
 711: PPUSH
 712: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 716: LD_EXP 1
 720: PPUSH
 721: LD_INT 35
 723: PPUSH
 724: LD_INT 60
 726: PPUSH
 727: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 731: LD_EXP 1
 735: PPUSH
 736: LD_STRING D1a-JMM-2
 738: PPUSH
 739: CALL_OW 88
// ComWalk ( Lisa ) ;
 743: LD_EXP 4
 747: PPUSH
 748: CALL_OW 138
// wait ( 0 0$1 ) ;
 752: LD_INT 35
 754: PPUSH
 755: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 759: LD_EXP 4
 763: PPUSH
 764: LD_EXP 1
 768: PPUSH
 769: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 773: LD_EXP 4
 777: PPUSH
 778: LD_STRING D1a-Lisa-2
 780: PPUSH
 781: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 785: LD_EXP 1
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PPUSH
 799: LD_EXP 4
 803: PPUSH
 804: CALL_OW 119
// end ; if not Cyrus and Bobby then
 808: LD_EXP 3
 812: NOT
 813: PUSH
 814: LD_EXP 2
 818: AND
 819: IFFALSE 1098
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 821: LD_EXP 2
 825: PPUSH
 826: LD_INT 44
 828: PPUSH
 829: LD_INT 70
 831: PPUSH
 832: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 836: LD_EXP 1
 840: PPUSH
 841: LD_INT 46
 843: PPUSH
 844: LD_INT 73
 846: PPUSH
 847: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 851: LD_EXP 2
 855: PPUSH
 856: LD_STRING D1a-Bobby-1
 858: PPUSH
 859: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 863: LD_EXP 1
 867: PPUSH
 868: LD_STRING D1a-JMM-1
 870: PPUSH
 871: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 875: LD_EXP 2
 879: PPUSH
 880: LD_INT 37
 882: PPUSH
 883: LD_INT 66
 885: PPUSH
 886: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 890: LD_EXP 1
 894: PPUSH
 895: LD_INT 38
 897: PPUSH
 898: LD_INT 64
 900: PPUSH
 901: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 905: LD_EXP 2
 909: PPUSH
 910: LD_STRING D1a-Bobby-2
 912: PPUSH
 913: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 917: LD_EXP 2
 921: PPUSH
 922: LD_INT 35
 924: PPUSH
 925: LD_INT 62
 927: PPUSH
 928: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 932: LD_EXP 1
 936: PPUSH
 937: LD_INT 35
 939: PPUSH
 940: LD_INT 60
 942: PPUSH
 943: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 947: LD_EXP 1
 951: PPUSH
 952: LD_STRING D1a-JMM-2
 954: PPUSH
 955: CALL_OW 88
// ComWalk ( Lisa ) ;
 959: LD_EXP 4
 963: PPUSH
 964: CALL_OW 138
// wait ( 0 0$1 ) ;
 968: LD_INT 35
 970: PPUSH
 971: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 975: LD_EXP 4
 979: PPUSH
 980: LD_EXP 1
 984: PPUSH
 985: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 989: LD_EXP 1
 993: PUSH
 994: LD_EXP 3
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PPUSH
1003: LD_EXP 4
1007: PPUSH
1008: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1012: LD_VAR 0 1
1016: PUSH
1017: LD_INT 1
1019: ARRAY
1020: PPUSH
1021: LD_INT 33
1023: PPUSH
1024: LD_INT 55
1026: PPUSH
1027: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1031: LD_VAR 0 1
1035: PUSH
1036: LD_INT 2
1038: ARRAY
1039: PPUSH
1040: LD_INT 30
1042: PPUSH
1043: LD_INT 54
1045: PPUSH
1046: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1050: LD_VAR 0 1
1054: PUSH
1055: LD_INT 1
1057: ARRAY
1058: PPUSH
1059: LD_EXP 1
1063: PPUSH
1064: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1068: LD_VAR 0 1
1072: PUSH
1073: LD_INT 2
1075: ARRAY
1076: PPUSH
1077: LD_EXP 1
1081: PPUSH
1082: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1086: LD_EXP 4
1090: PPUSH
1091: LD_STRING D1a-Lisa-2
1093: PPUSH
1094: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1098: LD_EXP 3
1102: NOT
1103: PUSH
1104: LD_EXP 2
1108: NOT
1109: AND
1110: IFFALSE 1324
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1112: LD_EXP 1
1116: PPUSH
1117: LD_INT 37
1119: PPUSH
1120: LD_INT 66
1122: PPUSH
1123: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1127: LD_EXP 1
1131: PPUSH
1132: LD_STRING D1b-JMM-1
1134: PPUSH
1135: CALL_OW 88
// ComCrawl ( JMM ) ;
1139: LD_EXP 1
1143: PPUSH
1144: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1148: LD_EXP 1
1152: PPUSH
1153: LD_INT 35
1155: PPUSH
1156: LD_INT 60
1158: PPUSH
1159: CALL_OW 171
// wait ( 0 0$8 ) ;
1163: LD_INT 280
1165: PPUSH
1166: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_STRING D1b-JMM-1a
1177: PPUSH
1178: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1182: LD_EXP 1
1186: PUSH
1187: LD_EXP 4
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PPUSH
1196: CALL_OW 138
// wait ( 0 0$1 ) ;
1200: LD_INT 35
1202: PPUSH
1203: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1207: LD_EXP 4
1211: PPUSH
1212: LD_EXP 1
1216: PPUSH
1217: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1221: LD_EXP 1
1225: PUSH
1226: EMPTY
1227: LIST
1228: PPUSH
1229: LD_EXP 4
1233: PPUSH
1234: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1238: LD_VAR 0 1
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: LD_INT 33
1249: PPUSH
1250: LD_INT 55
1252: PPUSH
1253: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1257: LD_VAR 0 1
1261: PUSH
1262: LD_INT 2
1264: ARRAY
1265: PPUSH
1266: LD_INT 30
1268: PPUSH
1269: LD_INT 54
1271: PPUSH
1272: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1276: LD_VAR 0 1
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_EXP 1
1289: PPUSH
1290: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1294: LD_VAR 0 1
1298: PUSH
1299: LD_INT 2
1301: ARRAY
1302: PPUSH
1303: LD_EXP 1
1307: PPUSH
1308: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1312: LD_EXP 4
1316: PPUSH
1317: LD_STRING D1b-Lisa-1
1319: PPUSH
1320: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1324: LD_EXP 1
1328: PPUSH
1329: LD_STRING D1-JMM-1
1331: PPUSH
1332: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1336: LD_EXP 4
1340: PPUSH
1341: LD_STRING D1-Lisa-1
1343: PPUSH
1344: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1348: LD_EXP 1
1352: PPUSH
1353: LD_STRING D1-JMM-2
1355: PPUSH
1356: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1360: LD_EXP 9
1364: PPUSH
1365: LD_STRING D1-Pow-2
1367: PPUSH
1368: CALL_OW 94
// if Cyrus then
1372: LD_EXP 3
1376: IFFALSE 1402
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1378: LD_EXP 3
1382: PPUSH
1383: LD_STRING D1-Cyrus-2
1385: PPUSH
1386: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-3
1397: PPUSH
1398: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1402: LD_EXP 9
1406: PPUSH
1407: LD_STRING D1-Pow-3
1409: PPUSH
1410: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1414: LD_EXP 1
1418: PPUSH
1419: LD_STRING D1-JMM-4
1421: PPUSH
1422: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1426: LD_EXP 9
1430: PPUSH
1431: LD_STRING D1-Pow-4
1433: PPUSH
1434: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1438: LD_EXP 9
1442: PPUSH
1443: LD_STRING D1-Pow-4a
1445: PPUSH
1446: CALL_OW 94
// if Cyrus then
1450: LD_EXP 3
1454: IFFALSE 1468
// Say ( Cyrus , D1-Cyrus-4 ) ;
1456: LD_EXP 3
1460: PPUSH
1461: LD_STRING D1-Cyrus-4
1463: PPUSH
1464: CALL_OW 88
// if Bobby then
1468: LD_EXP 2
1472: IFFALSE 1510
// begin Say ( Bobby , D1-Bobby-4 ) ;
1474: LD_EXP 2
1478: PPUSH
1479: LD_STRING D1-Bobby-4
1481: PPUSH
1482: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1486: LD_EXP 4
1490: PPUSH
1491: LD_STRING D1-Lisa-4
1493: PPUSH
1494: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1498: LD_EXP 1
1502: PPUSH
1503: LD_STRING D1-JMM-5
1505: PPUSH
1506: CALL_OW 88
// end ; InGameOff ;
1510: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1514: LD_INT 22
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 69
1528: PUSH
1529: LD_EXP 6
1533: PUSH
1534: LD_EXP 7
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: DIFF
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1551: LD_STRING M1
1553: PPUSH
1554: CALL_OW 337
// SaveForQuickRestart ;
1558: CALL_OW 22
// end ;
1562: PPOPN 1
1564: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1565: LD_INT 7
1567: PPUSH
1568: LD_INT 22
1570: PUSH
1571: LD_INT 1
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 70
1582: PUSH
1583: LD_INT 0
1585: GREATER
1586: IFFALSE 2003
1588: GO 1590
1590: DISABLE
// begin InGameOn ;
1591: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1595: LD_INT 22
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 21
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PPUSH
1619: CALL_OW 69
1623: PPUSH
1624: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1628: LD_INT 24
1630: PPUSH
1631: LD_INT 32
1633: PPUSH
1634: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1638: LD_EXP 5
1642: PPUSH
1643: LD_INT 4
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 4
1660: PPUSH
1661: CALL_OW 336
// wait ( 0 0$1 ) ;
1665: LD_INT 35
1667: PPUSH
1668: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1672: LD_EXP 5
1676: PPUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_INT 38
1682: PPUSH
1683: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1687: LD_EXP 5
1691: PPUSH
1692: LD_EXP 1
1696: PPUSH
1697: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1701: LD_INT 22
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 21
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PPUSH
1725: CALL_OW 69
1729: PUSH
1730: LD_EXP 5
1734: PUSH
1735: EMPTY
1736: LIST
1737: DIFF
1738: PPUSH
1739: LD_EXP 5
1743: PPUSH
1744: CALL_OW 119
// wait ( 0 0$1 ) ;
1748: LD_INT 35
1750: PPUSH
1751: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1755: LD_EXP 5
1759: PPUSH
1760: LD_STRING D2a-Khat-1
1762: PPUSH
1763: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1767: LD_EXP 1
1771: PPUSH
1772: LD_STRING D2a-JMM-1
1774: PPUSH
1775: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1779: LD_EXP 5
1783: PPUSH
1784: LD_STRING D2a-Khat-2
1786: PPUSH
1787: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1791: LD_EXP 1
1795: PPUSH
1796: LD_STRING D2a-JMM-2
1798: PPUSH
1799: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1803: LD_EXP 5
1807: PPUSH
1808: LD_STRING D2a-Khat-3
1810: PPUSH
1811: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1815: LD_EXP 1
1819: PPUSH
1820: LD_STRING D2a-JMM-3
1822: PPUSH
1823: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1827: LD_EXP 5
1831: PPUSH
1832: LD_STRING D2a-Khat-4
1834: PPUSH
1835: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1839: LD_EXP 1
1843: PPUSH
1844: LD_STRING D2a-JMM-4
1846: PPUSH
1847: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1851: LD_EXP 5
1855: PPUSH
1856: LD_STRING D2a-Khat-5
1858: PPUSH
1859: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_STRING D2a-JMM-5
1870: PPUSH
1871: CALL_OW 88
// InGameOff ;
1875: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1879: LD_INT 22
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 21
1891: PUSH
1892: LD_INT 1
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 3
1901: PUSH
1902: LD_INT 24
1904: PUSH
1905: LD_INT 800
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: PUSH
1926: LD_INT 0
1928: GREATER
1929: IFFALSE 2003
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1931: LD_EXP 5
1935: PPUSH
1936: LD_INT 22
1938: PUSH
1939: LD_INT 1
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 21
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 3
1958: PUSH
1959: LD_INT 24
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: PPUSH
1978: CALL_OW 69
1982: PUSH
1983: LD_INT 1
1985: ARRAY
1986: PPUSH
1987: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1991: LD_EXP 5
1995: PPUSH
1996: LD_STRING D2b-Khat-1
1998: PPUSH
1999: CALL_OW 88
// end ; end ;
2003: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
2004: LD_INT 15
2006: PPUSH
2007: LD_INT 22
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PPUSH
2017: CALL_OW 70
2021: PUSH
2022: LD_INT 0
2024: GREATER
2025: IFFALSE 3182
2027: GO 2029
2029: DISABLE
2030: LD_INT 0
2032: PPUSH
2033: PPUSH
2034: PPUSH
2035: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: LD_INT 999
2043: PUSH
2044: LD_INT 999
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2054: LD_ADDR_VAR 0 4
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 1
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PPUSH
2083: CALL_OW 69
2087: PUSH
2088: LD_EXP 1
2092: PUSH
2093: LD_EXP 2
2097: PUSH
2098: LD_EXP 3
2102: PUSH
2103: LD_EXP 4
2107: PUSH
2108: LD_EXP 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: DIFF
2120: ST_TO_ADDR
// PrepareDeadSoldiers ;
2121: CALL 11610 0 0
// spotCorpses = 1 ;
2125: LD_ADDR_EXP 32
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
// InGameOn ;
2133: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2137: LD_INT 23
2139: PPUSH
2140: LD_INT 12
2142: PPUSH
2143: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2147: LD_ADDR_VAR 0 3
2151: PUSH
2152: LD_VAR 0 2
2156: PUSH
2157: LD_INT 1
2159: ARRAY
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2165: LD_ADDR_VAR 0 1
2169: PUSH
2170: LD_INT 22
2172: PUSH
2173: LD_INT 1
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 21
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PPUSH
2194: CALL_OW 69
2198: PUSH
2199: LD_EXP 1
2203: PUSH
2204: LD_EXP 5
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: DIFF
2213: PUSH
2214: FOR_IN
2215: IFFALSE 2266
// if IsOK ( i ) then
2217: LD_VAR 0 1
2221: PPUSH
2222: CALL_OW 302
2226: IFFALSE 2264
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2228: LD_ADDR_VAR 0 2
2232: PUSH
2233: LD_VAR 0 2
2237: PUSH
2238: LD_VAR 0 1
2242: PUSH
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 16
2250: PPUSH
2251: CALL_OW 299
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: ADD
2263: ST_TO_ADDR
2264: GO 2214
2266: POP
2267: POP
// for i = 2 to distanceTab do
2268: LD_ADDR_VAR 0 1
2272: PUSH
2273: DOUBLE
2274: LD_INT 2
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2330
// if distanceTab [ i ] [ 2 ] < min then
2286: LD_VAR 0 2
2290: PUSH
2291: LD_VAR 0 1
2295: ARRAY
2296: PUSH
2297: LD_INT 2
2299: ARRAY
2300: PUSH
2301: LD_VAR 0 3
2305: LESS
2306: IFFALSE 2328
// min = distanceTab [ i ] [ 2 ] ;
2308: LD_ADDR_VAR 0 3
2312: PUSH
2313: LD_VAR 0 2
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: PUSH
2324: LD_INT 2
2326: ARRAY
2327: ST_TO_ADDR
2328: GO 2283
2330: POP
2331: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2332: LD_ADDR_VAR 0 1
2336: PUSH
2337: LD_INT 22
2339: PUSH
2340: LD_INT 1
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 21
2349: PUSH
2350: LD_INT 1
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PPUSH
2361: CALL_OW 69
2365: PUSH
2366: LD_EXP 1
2370: PUSH
2371: EMPTY
2372: LIST
2373: DIFF
2374: PUSH
2375: FOR_IN
2376: IFFALSE 2446
// begin ComMoveToArea ( i , DeadCutscene ) ;
2378: LD_VAR 0 1
2382: PPUSH
2383: LD_INT 28
2385: PPUSH
2386: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2390: LD_EXP 1
2394: PPUSH
2395: LD_INT 30
2397: PPUSH
2398: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2402: LD_VAR 0 1
2406: PPUSH
2407: LD_INT 23
2409: PPUSH
2410: LD_INT 11
2412: PPUSH
2413: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2417: LD_EXP 1
2421: PPUSH
2422: LD_INT 23
2424: PPUSH
2425: LD_INT 11
2427: PPUSH
2428: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2432: LD_EXP 34
2436: PPUSH
2437: LD_INT 250
2439: PPUSH
2440: CALL_OW 234
// end ;
2444: GO 2375
2446: POP
2447: POP
// for i = 2 to distanceTab do
2448: LD_ADDR_VAR 0 1
2452: PUSH
2453: DOUBLE
2454: LD_INT 2
2456: DEC
2457: ST_TO_ADDR
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_TO
2464: IFFALSE 2850
// begin if distanceTab [ i ] [ 2 ] = min then
2466: LD_VAR 0 2
2470: PUSH
2471: LD_VAR 0 1
2475: ARRAY
2476: PUSH
2477: LD_INT 2
2479: ARRAY
2480: PUSH
2481: LD_VAR 0 3
2485: EQUAL
2486: IFFALSE 2848
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2488: LD_VAR 0 2
2492: PUSH
2493: LD_VAR 0 1
2497: ARRAY
2498: PUSH
2499: LD_INT 1
2501: ARRAY
2502: PUSH
2503: LD_EXP 2
2507: EQUAL
2508: IFFALSE 2522
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2510: LD_EXP 2
2514: PPUSH
2515: LD_STRING DCorpses-Bobby-1
2517: PPUSH
2518: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2522: LD_VAR 0 2
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PUSH
2537: LD_EXP 3
2541: EQUAL
2542: IFFALSE 2556
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2544: LD_EXP 3
2548: PPUSH
2549: LD_STRING DCorpses-Cyrus-1
2551: PPUSH
2552: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2556: LD_VAR 0 2
2560: PUSH
2561: LD_VAR 0 1
2565: ARRAY
2566: PUSH
2567: LD_INT 1
2569: ARRAY
2570: PUSH
2571: LD_EXP 4
2575: EQUAL
2576: IFFALSE 2590
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2578: LD_EXP 4
2582: PPUSH
2583: LD_STRING DCorpses-Lisa-1
2585: PPUSH
2586: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2590: LD_VAR 0 2
2594: PUSH
2595: LD_VAR 0 1
2599: ARRAY
2600: PUSH
2601: LD_INT 1
2603: ARRAY
2604: PUSH
2605: LD_VAR 0 4
2609: PUSH
2610: LD_INT 1
2612: ARRAY
2613: EQUAL
2614: PUSH
2615: LD_VAR 0 4
2619: PUSH
2620: LD_INT 1
2622: ARRAY
2623: PPUSH
2624: CALL_OW 258
2628: PUSH
2629: LD_INT 1
2631: EQUAL
2632: AND
2633: IFFALSE 2651
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2635: LD_VAR 0 4
2639: PUSH
2640: LD_INT 1
2642: ARRAY
2643: PPUSH
2644: LD_STRING DCorpses-Sol1-1
2646: PPUSH
2647: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2651: LD_VAR 0 2
2655: PUSH
2656: LD_VAR 0 1
2660: ARRAY
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PUSH
2666: LD_VAR 0 4
2670: PUSH
2671: LD_INT 1
2673: ARRAY
2674: EQUAL
2675: PUSH
2676: LD_VAR 0 4
2680: PUSH
2681: LD_INT 1
2683: ARRAY
2684: PPUSH
2685: CALL_OW 258
2689: PUSH
2690: LD_INT 2
2692: EQUAL
2693: AND
2694: IFFALSE 2712
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2696: LD_VAR 0 4
2700: PUSH
2701: LD_INT 1
2703: ARRAY
2704: PPUSH
2705: LD_STRING DCorpses-FSol1-1
2707: PPUSH
2708: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2712: LD_VAR 0 2
2716: PUSH
2717: LD_VAR 0 1
2721: ARRAY
2722: PUSH
2723: LD_INT 1
2725: ARRAY
2726: PUSH
2727: LD_VAR 0 4
2731: PUSH
2732: LD_INT 2
2734: ARRAY
2735: EQUAL
2736: PUSH
2737: LD_VAR 0 4
2741: PUSH
2742: LD_INT 2
2744: ARRAY
2745: PPUSH
2746: CALL_OW 258
2750: PUSH
2751: LD_INT 1
2753: EQUAL
2754: AND
2755: IFFALSE 2773
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2757: LD_VAR 0 4
2761: PUSH
2762: LD_INT 2
2764: ARRAY
2765: PPUSH
2766: LD_STRING DCorpses-Sol1-1
2768: PPUSH
2769: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2773: LD_VAR 0 2
2777: PUSH
2778: LD_VAR 0 1
2782: ARRAY
2783: PUSH
2784: LD_INT 1
2786: ARRAY
2787: PUSH
2788: LD_VAR 0 4
2792: PUSH
2793: LD_INT 2
2795: ARRAY
2796: EQUAL
2797: PUSH
2798: LD_VAR 0 4
2802: PUSH
2803: LD_INT 2
2805: ARRAY
2806: PPUSH
2807: CALL_OW 258
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: AND
2816: IFFALSE 2834
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2818: LD_VAR 0 4
2822: PUSH
2823: LD_INT 2
2825: ARRAY
2826: PPUSH
2827: LD_STRING DCorpses-FSol1-1
2829: PPUSH
2830: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2834: LD_EXP 34
2838: PPUSH
2839: LD_INT 150
2841: PPUSH
2842: CALL_OW 234
// break ;
2846: GO 2850
// end ; end ;
2848: GO 2463
2850: POP
2851: POP
// repeat wait ( 0 0$1 ) ;
2852: LD_INT 35
2854: PPUSH
2855: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2859: LD_ADDR_VAR 0 1
2863: PUSH
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 21
2876: PUSH
2877: LD_INT 1
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_EXP 1
2897: PUSH
2898: EMPTY
2899: LIST
2900: DIFF
2901: PUSH
2902: FOR_IN
2903: IFFALSE 2973
// begin ComMoveToArea ( i , DeadCutscene ) ;
2905: LD_VAR 0 1
2909: PPUSH
2910: LD_INT 28
2912: PPUSH
2913: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2917: LD_EXP 1
2921: PPUSH
2922: LD_INT 30
2924: PPUSH
2925: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2929: LD_VAR 0 1
2933: PPUSH
2934: LD_INT 23
2936: PPUSH
2937: LD_INT 11
2939: PPUSH
2940: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2944: LD_EXP 1
2948: PPUSH
2949: LD_INT 23
2951: PPUSH
2952: LD_INT 11
2954: PPUSH
2955: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2959: LD_EXP 34
2963: PPUSH
2964: LD_INT 250
2966: PPUSH
2967: CALL_OW 234
// end ;
2971: GO 2902
2973: POP
2974: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2975: LD_EXP 1
2979: PPUSH
2980: LD_INT 30
2982: PPUSH
2983: CALL_OW 308
2987: IFFALSE 2852
// wait ( 0 0$3 ) ;
2989: LD_INT 105
2991: PPUSH
2992: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2996: LD_EXP 1
3000: PPUSH
3001: LD_STRING DCorpses-JMM-1
3003: PPUSH
3004: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3008: LD_EXP 34
3012: PPUSH
3013: LD_INT 100
3015: PPUSH
3016: CALL_OW 234
// if IsOK ( Khatam ) then
3020: LD_EXP 5
3024: PPUSH
3025: CALL_OW 302
3029: IFFALSE 3166
// begin repeat wait ( 0 0$1 ) ;
3031: LD_INT 35
3033: PPUSH
3034: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3038: LD_EXP 5
3042: PPUSH
3043: LD_EXP 34
3047: PPUSH
3048: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3052: LD_EXP 5
3056: PPUSH
3057: LD_EXP 34
3061: PPUSH
3062: CALL_OW 296
3066: PUSH
3067: LD_INT 2
3069: LESS
3070: IFFALSE 3031
// spotCorpses = 0 ;
3072: LD_ADDR_EXP 32
3076: PUSH
3077: LD_INT 0
3079: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3080: LD_EXP 34
3084: PPUSH
3085: LD_INT 10
3087: PPUSH
3088: CALL_OW 234
// wait ( 0 0$3 ) ;
3092: LD_INT 105
3094: PPUSH
3095: CALL_OW 67
// KillUnit ( DyingSold ) ;
3099: LD_EXP 34
3103: PPUSH
3104: CALL_OW 66
// wait ( 0 0$1 ) ;
3108: LD_INT 35
3110: PPUSH
3111: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3115: LD_EXP 1
3119: PUSH
3120: LD_EXP 5
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PPUSH
3129: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3133: LD_EXP 5
3137: PPUSH
3138: LD_EXP 1
3142: PPUSH
3143: CALL_OW 119
// wait ( 0 0$1 ) ;
3147: LD_INT 35
3149: PPUSH
3150: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3154: LD_EXP 5
3158: PPUSH
3159: LD_STRING DCorpses-Khat-1
3161: PPUSH
3162: CALL_OW 88
// end ; InGameOff ;
3166: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3170: LD_EXP 1
3174: PPUSH
3175: LD_STRING DCorpses-JMM-2
3177: PPUSH
3178: CALL_OW 88
// end ;
3182: PPOPN 4
3184: END
// every 0 0$1 trigger spotCorpses = 1 do
3185: LD_EXP 32
3189: PUSH
3190: LD_INT 1
3192: EQUAL
3193: IFFALSE 3211
3195: GO 3197
3197: DISABLE
// begin enable ;
3198: ENABLE
// SetLives ( DyingSold , 10 ) ;
3199: LD_EXP 34
3203: PPUSH
3204: LD_INT 10
3206: PPUSH
3207: CALL_OW 234
// end ;
3211: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 15 ) do var i ;
3212: LD_INT 8
3214: PPUSH
3215: LD_INT 22
3217: PUSH
3218: LD_INT 1
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: CALL_OW 70
3229: PUSH
3230: LD_INT 0
3232: GREATER
3233: PUSH
3234: LD_INT 22
3236: PUSH
3237: LD_INT 1
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PPUSH
3244: CALL_OW 69
3248: PPUSH
3249: LD_EXP 7
3253: PPUSH
3254: CALL_OW 74
3258: PPUSH
3259: LD_EXP 7
3263: PPUSH
3264: CALL_OW 296
3268: PUSH
3269: LD_INT 15
3271: LESS
3272: OR
3273: IFFALSE 3497
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
// begin InGameOn ;
3281: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3285: LD_EXP 7
3289: PPUSH
3290: LD_INT 250
3292: PPUSH
3293: CALL_OW 234
// SetLives ( Brian , 750 ) ;
3297: LD_EXP 6
3301: PPUSH
3302: LD_INT 750
3304: PPUSH
3305: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3309: LD_INT 3
3311: PPUSH
3312: LD_INT 4
3314: PPUSH
3315: LD_INT 2
3317: PPUSH
3318: LD_INT 1
3320: PPUSH
3321: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3325: LD_EXP 6
3329: PUSH
3330: LD_EXP 7
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PPUSH
3339: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3343: LD_ADDR_VAR 0 1
3347: PUSH
3348: LD_INT 9
3350: PPUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 3
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PPUSH
3361: CALL_OW 70
3365: PUSH
3366: FOR_IN
3367: IFFALSE 3380
// ComFree ( i ) ;
3369: LD_VAR 0 1
3373: PPUSH
3374: CALL_OW 139
3378: GO 3366
3380: POP
3381: POP
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3382: LD_ADDR_VAR 0 1
3386: PUSH
3387: LD_INT 9
3389: PPUSH
3390: LD_INT 22
3392: PUSH
3393: LD_INT 3
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PPUSH
3400: CALL_OW 70
3404: PUSH
3405: FOR_IN
3406: IFFALSE 3424
// AddComAttackUnit ( i , Brian ) ;
3408: LD_VAR 0 1
3412: PPUSH
3413: LD_EXP 6
3417: PPUSH
3418: CALL_OW 175
3422: GO 3405
3424: POP
3425: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3426: LD_ADDR_VAR 0 1
3430: PUSH
3431: LD_INT 22
3433: PUSH
3434: LD_INT 4
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PPUSH
3441: CALL_OW 69
3445: PUSH
3446: FOR_IN
3447: IFFALSE 3460
// ComFree ( i ) ;
3449: LD_VAR 0 1
3453: PPUSH
3454: CALL_OW 139
3458: GO 3446
3460: POP
3461: POP
// wait ( 0 0$1 ) ;
3462: LD_INT 35
3464: PPUSH
3465: CALL_OW 67
// InGameOff ;
3469: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3473: LD_EXP 6
3477: PPUSH
3478: LD_STRING DF-Sol1-1
3480: PPUSH
3481: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3485: LD_EXP 1
3489: PPUSH
3490: LD_STRING DF-JMM-1
3492: PPUSH
3493: CALL_OW 88
// end ;
3497: PPOPN 1
3499: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3500: LD_INT 19
3502: PPUSH
3503: LD_INT 22
3505: PUSH
3506: LD_INT 3
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 70
3517: PUSH
3518: LD_INT 0
3520: EQUAL
3521: IFFALSE 3634
3523: GO 3525
3525: DISABLE
// begin if not IsDead ( Brian ) then
3526: LD_EXP 6
3530: PPUSH
3531: CALL_OW 301
3535: NOT
3536: IFFALSE 3550
// SetSide ( Brian , 1 ) ;
3538: LD_EXP 6
3542: PPUSH
3543: LD_INT 1
3545: PPUSH
3546: CALL_OW 235
// if not IsDead ( Jerry ) then
3550: LD_EXP 7
3554: PPUSH
3555: CALL_OW 301
3559: NOT
3560: IFFALSE 3574
// SetSide ( Jerry , 1 ) ;
3562: LD_EXP 7
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3574: LD_INT 22
3576: PUSH
3577: LD_INT 1
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PUSH
3584: LD_INT 25
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PPUSH
3598: CALL_OW 69
3602: PUSH
3603: LD_INT 0
3605: GREATER
3606: IFFALSE 3622
// begin Say ( JMM , DFa-JMM-1 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING DFa-JMM-1
3615: PPUSH
3616: CALL_OW 88
// end else
3620: GO 3634
// begin Say ( JMM , DFa-JMM-1a ) ;
3622: LD_EXP 1
3626: PPUSH
3627: LD_STRING DFa-JMM-1a
3629: PPUSH
3630: CALL_OW 88
// end ; end ;
3634: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3635: LD_INT 19
3637: PPUSH
3638: LD_INT 22
3640: PUSH
3641: LD_INT 3
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL_OW 70
3652: PUSH
3653: LD_INT 0
3655: EQUAL
3656: PUSH
3657: LD_EXP 6
3661: PPUSH
3662: CALL_OW 302
3666: NOT
3667: AND
3668: IFFALSE 3745
3670: GO 3672
3672: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3673: LD_INT 35
3675: PPUSH
3676: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3680: LD_EXP 6
3684: PPUSH
3685: CALL_OW 256
3689: PUSH
3690: LD_INT 250
3692: GREATER
3693: IFFALSE 3673
// Say ( Brian , DFb-Sol1-1 ) ;
3695: LD_EXP 6
3699: PPUSH
3700: LD_STRING DFb-Sol1-1
3702: PPUSH
3703: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3707: LD_EXP 6
3711: PPUSH
3712: LD_INT 78
3714: PPUSH
3715: LD_INT 74
3717: PPUSH
3718: CALL_OW 111
// if IsDead ( Jerry ) then
3722: LD_EXP 7
3726: PPUSH
3727: CALL_OW 301
3731: IFFALSE 3745
// Say ( Brian , DFb-Sol1-1a ) end ;
3733: LD_EXP 6
3737: PPUSH
3738: LD_STRING DFb-Sol1-1a
3740: PPUSH
3741: CALL_OW 88
3745: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3746: LD_INT 22
3748: PUSH
3749: LD_INT 1
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_INT 21
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PPUSH
3770: CALL_OW 69
3774: PUSH
3775: LD_INT 0
3777: EQUAL
3778: IFFALSE 3866
3780: GO 3782
3782: DISABLE
3783: LD_INT 0
3785: PPUSH
// begin enable ;
3786: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3787: LD_ADDR_VAR 0 1
3791: PUSH
3792: LD_INT 22
3794: PUSH
3795: LD_INT 3
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 3
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PUSH
3812: LD_INT 30
3814: PUSH
3815: LD_INT 31
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: LIST
3826: PPUSH
3827: CALL_OW 69
3831: PUSH
3832: FOR_IN
3833: IFFALSE 3864
// begin if See ( 1 , i ) then
3835: LD_INT 1
3837: PPUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: CALL_OW 292
3847: IFFALSE 3862
// begin disable ;
3849: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3850: LD_EXP 1
3854: PPUSH
3855: LD_STRING DX1-JMM-1
3857: PPUSH
3858: CALL_OW 88
// end ; end ;
3862: GO 3832
3864: POP
3865: POP
// end ;
3866: PPOPN 1
3868: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3869: LD_INT 1
3871: PPUSH
3872: LD_INT 11
3874: PPUSH
3875: CALL_OW 294
3879: IFFALSE 4293
3881: GO 3883
3883: DISABLE
3884: LD_INT 0
3886: PPUSH
3887: PPUSH
// begin DialogueOn ;
3888: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3892: LD_INT 11
3894: PPUSH
3895: LD_INT 22
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: PUSH
3905: LD_INT 21
3907: PUSH
3908: LD_INT 1
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PPUSH
3919: CALL_OW 70
3923: PUSH
3924: LD_INT 1
3926: ARRAY
3927: PPUSH
3928: LD_STRING DX3-Rus1-1
3930: PPUSH
3931: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING DX3-JMM-1
3942: PPUSH
3943: CALL_OW 88
// DialogueOff ;
3947: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3951: LD_ADDR_VAR 0 1
3955: PUSH
3956: LD_INT 11
3958: PPUSH
3959: LD_INT 22
3961: PUSH
3962: LD_INT 3
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 21
3971: PUSH
3972: LD_INT 1
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: PPUSH
3983: CALL_OW 70
3987: PUSH
3988: FOR_IN
3989: IFFALSE 4009
// southBaseDefenders = southBaseDefenders ^ i ;
3991: LD_ADDR_EXP 25
3995: PUSH
3996: LD_EXP 25
4000: PUSH
4001: LD_VAR 0 1
4005: ADD
4006: ST_TO_ADDR
4007: GO 3988
4009: POP
4010: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
4011: LD_INT 455
4013: PUSH
4014: LD_INT 420
4016: PUSH
4017: LD_INT 315
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: PUSH
4025: LD_OWVAR 67
4029: ARRAY
4030: PPUSH
4031: CALL_OW 67
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ) ;
4035: LD_INT 22
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: LD_INT 21
4047: PUSH
4048: LD_INT 1
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 25
4057: PUSH
4058: LD_INT 3
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 69
4074: PPUSH
4075: CALL_OW 122
// wait ( 0 0$1 ) ;
4079: LD_INT 35
4081: PPUSH
4082: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
4086: LD_INT 35
4088: PPUSH
4089: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
4093: LD_ADDR_VAR 0 1
4097: PUSH
4098: LD_INT 22
4100: PUSH
4101: LD_INT 3
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 21
4110: PUSH
4111: LD_INT 2
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 58
4120: PUSH
4121: EMPTY
4122: LIST
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: LIST
4128: PPUSH
4129: CALL_OW 69
4133: PUSH
4134: FOR_IN
4135: IFFALSE 4205
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: LD_INT 22
4144: PUSH
4145: LD_INT 3
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 21
4154: PUSH
4155: LD_INT 1
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 3
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 69
4181: PUSH
4182: FOR_IN
4183: IFFALSE 4201
// begin ComEnterUnit ( j , i ) ;
4185: LD_VAR 0 2
4189: PPUSH
4190: LD_VAR 0 1
4194: PPUSH
4195: CALL_OW 120
// end ;
4199: GO 4182
4201: POP
4202: POP
// end ;
4203: GO 4134
4205: POP
4206: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4207: LD_INT 22
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 21
4219: PUSH
4220: LD_INT 2
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 58
4229: PUSH
4230: EMPTY
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 69
4242: PUSH
4243: LD_INT 0
4245: EQUAL
4246: PUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 21
4259: PUSH
4260: LD_INT 1
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: LD_INT 25
4269: PUSH
4270: LD_INT 3
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 69
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: OR
4291: IFFALSE 4086
// end ;
4293: PPOPN 2
4295: END
// every 0 0$1 do var i , tmp ;
4296: GO 4298
4298: DISABLE
4299: LD_INT 0
4301: PPUSH
4302: PPUSH
// begin enable ;
4303: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4304: LD_ADDR_VAR 0 2
4308: PUSH
4309: LD_INT 22
4311: PUSH
4312: LD_INT 1
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: LD_INT 21
4321: PUSH
4322: LD_INT 1
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PPUSH
4333: CALL_OW 69
4337: ST_TO_ADDR
// for i in tmp do
4338: LD_ADDR_VAR 0 1
4342: PUSH
4343: LD_VAR 0 2
4347: PUSH
4348: FOR_IN
4349: IFFALSE 4471
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_INT 5
4358: PPUSH
4359: CALL_OW 296
4363: PUSH
4364: LD_INT 4
4366: LESS
4367: PUSH
4368: LD_VAR 0 1
4372: PPUSH
4373: LD_INT 4
4375: PPUSH
4376: CALL_OW 296
4380: PUSH
4381: LD_INT 4
4383: LESS
4384: OR
4385: IFFALSE 4469
// begin disable ;
4387: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4388: LD_INT 5
4390: PUSH
4391: LD_INT 4
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PPUSH
4398: CALL_OW 85
// if IsOK ( Bobby ) then
4402: LD_EXP 2
4406: PPUSH
4407: CALL_OW 302
4411: IFFALSE 4448
// begin DialogueOn ;
4413: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4417: LD_EXP 2
4421: PPUSH
4422: LD_STRING DX2-Bobby-1
4424: PPUSH
4425: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4429: LD_EXP 1
4433: PPUSH
4434: LD_STRING DX2-JMM-1a
4436: PPUSH
4437: CALL_OW 88
// DialogueOff ;
4441: CALL_OW 7
// disable ;
4445: DISABLE
// end else
4446: GO 4469
// begin DialogueOn ;
4448: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4452: LD_EXP 1
4456: PPUSH
4457: LD_STRING DX2-JMM-1
4459: PPUSH
4460: CALL_OW 88
// DialogueOff ;
4464: CALL_OW 7
// disable ;
4468: DISABLE
// end ; end ; end ;
4469: GO 4348
4471: POP
4472: POP
// end ;
4473: PPOPN 2
4475: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4476: LD_INT 22
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 23
4488: PUSH
4489: LD_INT 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 21
4498: PUSH
4499: LD_INT 2
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 34
4508: PUSH
4509: LD_INT 42
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: PPUSH
4522: CALL_OW 69
4526: PUSH
4527: LD_INT 1
4529: GREATEREQUAL
4530: IFFALSE 5011
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
4540: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4541: LD_ADDR_VAR 0 1
4545: PUSH
4546: LD_INT 22
4548: PUSH
4549: LD_INT 1
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 23
4558: PUSH
4559: LD_INT 3
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 21
4568: PUSH
4569: LD_INT 2
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 34
4578: PUSH
4579: LD_INT 42
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: PPUSH
4592: CALL_OW 69
4596: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby , Khatam ] ;
4597: LD_ADDR_VAR 0 2
4601: PUSH
4602: LD_INT 22
4604: PUSH
4605: LD_INT 1
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: LD_INT 21
4614: PUSH
4615: LD_INT 1
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 26
4624: PUSH
4625: LD_INT 1
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: PPUSH
4637: CALL_OW 69
4641: PUSH
4642: LD_EXP 1
4646: PUSH
4647: LD_EXP 3
4651: PUSH
4652: LD_EXP 2
4656: PUSH
4657: LD_EXP 5
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: DIFF
4668: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4669: LD_ADDR_VAR 0 3
4673: PUSH
4674: LD_INT 22
4676: PUSH
4677: LD_INT 1
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_INT 21
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 26
4696: PUSH
4697: LD_INT 2
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: PPUSH
4709: CALL_OW 69
4713: PUSH
4714: LD_EXP 4
4718: PUSH
4719: EMPTY
4720: LIST
4721: DIFF
4722: ST_TO_ADDR
// DialogueOn ;
4723: CALL_OW 6
// if not IsInUnit ( JMM ) then
4727: LD_EXP 1
4731: PPUSH
4732: CALL_OW 310
4736: NOT
4737: IFFALSE 4751
// Say ( JMM , DX2a-JMM-1 ) ;
4739: LD_EXP 1
4743: PPUSH
4744: LD_STRING DX2a-JMM-1
4746: PPUSH
4747: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4751: LD_EXP 2
4755: PPUSH
4756: CALL_OW 310
4760: PUSH
4761: LD_VAR 0 1
4765: PUSH
4766: LD_INT 1
4768: ARRAY
4769: EQUAL
4770: IFFALSE 4784
// Say ( Bobby , DX2a-Bobby-1 ) ;
4772: LD_EXP 2
4776: PPUSH
4777: LD_STRING DX2a-Bobby-1
4779: PPUSH
4780: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4784: LD_EXP 3
4788: PPUSH
4789: CALL_OW 310
4793: PUSH
4794: LD_VAR 0 1
4798: PUSH
4799: LD_INT 1
4801: ARRAY
4802: EQUAL
4803: IFFALSE 4817
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4805: LD_EXP 3
4809: PPUSH
4810: LD_STRING DX2a-Cyrus-1
4812: PPUSH
4813: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4817: LD_EXP 4
4821: PPUSH
4822: CALL_OW 310
4826: PUSH
4827: LD_VAR 0 1
4831: PUSH
4832: LD_INT 1
4834: ARRAY
4835: EQUAL
4836: IFFALSE 4850
// Say ( Lisa , DX2a-Lisa-1 ) ;
4838: LD_EXP 4
4842: PPUSH
4843: LD_STRING DX2a-Lisa-1
4845: PPUSH
4846: CALL_OW 88
// for i in temp1 do
4850: LD_ADDR_VAR 0 4
4854: PUSH
4855: LD_VAR 0 2
4859: PUSH
4860: FOR_IN
4861: IFFALSE 4898
// if IsInUnit ( i ) = tmp [ 1 ] then
4863: LD_VAR 0 4
4867: PPUSH
4868: CALL_OW 310
4872: PUSH
4873: LD_VAR 0 1
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: EQUAL
4882: IFFALSE 4896
// Say ( i , DX2a-Sol1-1 ) ;
4884: LD_VAR 0 4
4888: PPUSH
4889: LD_STRING DX2a-Sol1-1
4891: PPUSH
4892: CALL_OW 88
4896: GO 4860
4898: POP
4899: POP
// for i in temp2 do
4900: LD_ADDR_VAR 0 4
4904: PUSH
4905: LD_VAR 0 3
4909: PUSH
4910: FOR_IN
4911: IFFALSE 4948
// if IsInUnit ( i ) = tmp [ 1 ] then
4913: LD_VAR 0 4
4917: PPUSH
4918: CALL_OW 310
4922: PUSH
4923: LD_VAR 0 1
4927: PUSH
4928: LD_INT 1
4930: ARRAY
4931: EQUAL
4932: IFFALSE 4946
// Say ( i , DX2a-FSol1-1 ) ;
4934: LD_VAR 0 4
4938: PPUSH
4939: LD_STRING DX2a-FSol1-1
4941: PPUSH
4942: CALL_OW 88
4946: GO 4910
4948: POP
4949: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4950: LD_EXP 1
4954: PPUSH
4955: CALL_OW 310
4959: PUSH
4960: LD_VAR 0 1
4964: PUSH
4965: LD_INT 1
4967: ARRAY
4968: EQUAL
4969: IFFALSE 4983
// Say ( JMM , DX2b-JMM-1 ) ;
4971: LD_EXP 1
4975: PPUSH
4976: LD_STRING DX2b-JMM-1
4978: PPUSH
4979: CALL_OW 88
// if not IsInUnit ( JMM ) then
4983: LD_EXP 1
4987: PPUSH
4988: CALL_OW 310
4992: NOT
4993: IFFALSE 5007
// Say ( JMM , DX2a-JMM-2 ) ;
4995: LD_EXP 1
4999: PPUSH
5000: LD_STRING DX2a-JMM-2
5002: PPUSH
5003: CALL_OW 88
// DialogueOff ;
5007: CALL_OW 7
// end ;
5011: PPOPN 4
5013: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
5014: LD_INT 1
5016: PPUSH
5017: CALL_OW 255
5021: PUSH
5022: LD_INT 1
5024: EQUAL
5025: PUSH
5026: LD_INT 10
5028: PPUSH
5029: CALL_OW 255
5033: PUSH
5034: LD_INT 1
5036: EQUAL
5037: OR
5038: IFFALSE 5098
5040: GO 5042
5042: DISABLE
// begin DialogueOn ;
5043: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
5047: LD_EXP 1
5051: PPUSH
5052: LD_STRING D3-JMM-1
5054: PPUSH
5055: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
5059: LD_EXP 9
5063: PPUSH
5064: LD_STRING D3-Pow-1
5066: PPUSH
5067: CALL_OW 94
// if IsOK ( Cyrus ) then
5071: LD_EXP 3
5075: PPUSH
5076: CALL_OW 302
5080: IFFALSE 5094
// Say ( Cyrus , D3-Cyrus-1 ) ;
5082: LD_EXP 3
5086: PPUSH
5087: LD_STRING D3-Cyrus-1
5089: PPUSH
5090: CALL_OW 88
// DialogueOff ;
5094: CALL_OW 7
// end ;
5098: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var temp , i ;
5099: LD_INT 1
5101: PPUSH
5102: CALL_OW 255
5106: PUSH
5107: LD_INT 1
5109: EQUAL
5110: PUSH
5111: LD_INT 10
5113: PPUSH
5114: CALL_OW 255
5118: PUSH
5119: LD_INT 1
5121: EQUAL
5122: AND
5123: PUSH
5124: LD_INT 22
5126: PPUSH
5127: LD_INT 22
5129: PUSH
5130: LD_INT 3
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 21
5139: PUSH
5140: LD_INT 1
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PPUSH
5151: CALL_OW 70
5155: PUSH
5156: LD_INT 0
5158: EQUAL
5159: AND
5160: IFFALSE 6405
5162: GO 5164
5164: DISABLE
5165: LD_INT 0
5167: PPUSH
5168: PPUSH
// begin DialogueOn ;
5169: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5173: LD_EXP 1
5177: PPUSH
5178: LD_STRING D3a-JMM-1
5180: PPUSH
5181: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5185: LD_EXP 9
5189: PPUSH
5190: LD_STRING D3a-Pow-1
5192: PPUSH
5193: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5197: LD_EXP 1
5201: PPUSH
5202: LD_STRING D3a-JMM-2
5204: PPUSH
5205: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5209: LD_EXP 9
5213: PPUSH
5214: LD_STRING D3a-Pow-2
5216: PPUSH
5217: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5221: LD_EXP 1
5225: PPUSH
5226: LD_STRING D3a-JMM-3
5228: PPUSH
5229: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5233: LD_EXP 9
5237: PPUSH
5238: LD_STRING D3a-Pow-3
5240: PPUSH
5241: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5245: LD_EXP 1
5249: PPUSH
5250: LD_STRING D3a-JMM-4
5252: PPUSH
5253: CALL_OW 88
// DialogueOff ;
5257: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5261: LD_STRING M2
5263: PPUSH
5264: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5268: LD_EXP 1
5272: PPUSH
5273: LD_STRING D3b-JMM-1
5275: PPUSH
5276: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5280: LD_INT 35
5282: PPUSH
5283: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5287: LD_INT 22
5289: PPUSH
5290: LD_INT 22
5292: PUSH
5293: LD_INT 1
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PUSH
5300: LD_INT 25
5302: PUSH
5303: LD_INT 2
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PPUSH
5314: CALL_OW 70
5318: IFFALSE 5280
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5320: LD_ADDR_VAR 0 1
5324: PUSH
5325: LD_INT 22
5327: PUSH
5328: LD_INT 1
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: LD_INT 23
5337: PUSH
5338: LD_INT 1
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PUSH
5345: LD_INT 25
5347: PUSH
5348: LD_INT 2
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: PUSH
5355: LD_INT 50
5357: PUSH
5358: EMPTY
5359: LIST
5360: PUSH
5361: LD_INT 56
5363: PUSH
5364: EMPTY
5365: LIST
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: PPUSH
5374: CALL_OW 69
5378: PUSH
5379: LD_EXP 1
5383: PUSH
5384: LD_EXP 5
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: DIFF
5393: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5394: LD_INT 35
5396: PPUSH
5397: CALL_OW 67
// until temp > 0 ;
5401: LD_VAR 0 1
5405: PUSH
5406: LD_INT 0
5408: GREATER
5409: IFFALSE 5320
// wait ( 0 0$5 ) ;
5411: LD_INT 175
5413: PPUSH
5414: CALL_OW 67
// PrepareRussianHeroes ;
5418: CALL 11767 0 0
// InGameOn ;
5422: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5426: LD_EXP 8
5430: PPUSH
5431: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5435: LD_EXP 1
5439: PUSH
5440: LD_VAR 0 1
5444: PUSH
5445: LD_INT 1
5447: ARRAY
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PPUSH
5453: LD_EXP 8
5457: PPUSH
5458: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5462: LD_EXP 8
5466: PPUSH
5467: LD_VAR 0 1
5471: PUSH
5472: LD_INT 1
5474: ARRAY
5475: PPUSH
5476: CALL_OW 119
// Wait ( 0 0$02 ) ;
5480: LD_INT 70
5482: PPUSH
5483: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5487: LD_EXP 8
5491: PPUSH
5492: LD_STRING D4-Mikh-1
5494: PPUSH
5495: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5499: LD_VAR 0 1
5503: PUSH
5504: LD_INT 1
5506: ARRAY
5507: PPUSH
5508: CALL_OW 258
5512: PUSH
5513: LD_INT 1
5515: EQUAL
5516: IFFALSE 5534
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5518: LD_VAR 0 1
5522: PUSH
5523: LD_INT 1
5525: ARRAY
5526: PPUSH
5527: LD_STRING D4-Sol1-1
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 2
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-FSol1-1
5564: PPUSH
5565: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5569: LD_EXP 8
5573: PPUSH
5574: LD_STRING D4-Mikh-2
5576: PPUSH
5577: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5581: LD_VAR 0 1
5585: PUSH
5586: LD_INT 1
5588: ARRAY
5589: PPUSH
5590: CALL_OW 258
5594: PUSH
5595: LD_INT 1
5597: EQUAL
5598: IFFALSE 5616
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5600: LD_VAR 0 1
5604: PUSH
5605: LD_INT 1
5607: ARRAY
5608: PPUSH
5609: LD_STRING D4-Sol1-2
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 2
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-FSol1-2
5646: PPUSH
5647: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5651: LD_EXP 8
5655: PPUSH
5656: LD_STRING D4-Mikh-3
5658: PPUSH
5659: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5663: LD_VAR 0 1
5667: PUSH
5668: LD_INT 1
5670: ARRAY
5671: PPUSH
5672: CALL_OW 258
5676: PUSH
5677: LD_INT 1
5679: EQUAL
5680: IFFALSE 5698
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5682: LD_VAR 0 1
5686: PUSH
5687: LD_INT 1
5689: ARRAY
5690: PPUSH
5691: LD_STRING D4-Sol1-3
5693: PPUSH
5694: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5698: LD_VAR 0 1
5702: PUSH
5703: LD_INT 1
5705: ARRAY
5706: PPUSH
5707: CALL_OW 258
5711: PUSH
5712: LD_INT 2
5714: EQUAL
5715: IFFALSE 5733
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5717: LD_VAR 0 1
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PPUSH
5726: LD_STRING D4-FSol1-3
5728: PPUSH
5729: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5733: LD_EXP 8
5737: PPUSH
5738: LD_STRING D4-Mikh-4
5740: PPUSH
5741: CALL_OW 88
// case query ( Qs1 ) of 1 :
5745: LD_STRING Qs1
5747: PPUSH
5748: CALL_OW 97
5752: PUSH
5753: LD_INT 1
5755: DOUBLE
5756: EQUAL
5757: IFTRUE 5761
5759: GO 5796
5761: POP
// begin InGameOff ;
5762: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5766: LD_INT 1
5768: PPUSH
5769: LD_INT 6
5771: PPUSH
5772: LD_INT 2
5774: PPUSH
5775: LD_INT 1
5777: PPUSH
5778: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5782: LD_EXP 8
5786: PPUSH
5787: LD_INT 17
5789: PPUSH
5790: CALL_OW 113
// end ; 2 :
5794: GO 6389
5796: LD_INT 2
5798: DOUBLE
5799: EQUAL
5800: IFTRUE 5804
5802: GO 6354
5804: POP
// begin repeat wait ( 0 0$1 ) ;
5805: LD_INT 35
5807: PPUSH
5808: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5812: LD_VAR 0 1
5816: PUSH
5817: LD_INT 1
5819: ARRAY
5820: PPUSH
5821: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5825: LD_VAR 0 1
5829: PUSH
5830: LD_INT 1
5832: ARRAY
5833: PPUSH
5834: LD_EXP 1
5838: PPUSH
5839: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5843: LD_EXP 8
5847: PPUSH
5848: LD_EXP 1
5852: PPUSH
5853: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5857: LD_EXP 1
5861: PPUSH
5862: LD_EXP 8
5866: PPUSH
5867: CALL_OW 296
5871: PUSH
5872: LD_INT 5
5874: LESS
5875: IFFALSE 5805
// ComTurnUnit ( Mikhail , JMM ) ;
5877: LD_EXP 8
5881: PPUSH
5882: LD_EXP 1
5886: PPUSH
5887: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5891: LD_EXP 1
5895: PPUSH
5896: LD_STRING D4b-JMM-1
5898: PPUSH
5899: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5903: LD_EXP 8
5907: PPUSH
5908: LD_STRING D4b-Mikh-1
5910: PPUSH
5911: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5915: LD_EXP 1
5919: PPUSH
5920: LD_STRING D4b-JMM-2
5922: PPUSH
5923: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5927: LD_EXP 8
5931: PPUSH
5932: LD_STRING D4b-Mikh-2
5934: PPUSH
5935: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5939: LD_EXP 1
5943: PPUSH
5944: LD_STRING D4b-JMM-3
5946: PPUSH
5947: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5951: LD_EXP 8
5955: PPUSH
5956: LD_STRING D4b-Mikh-3
5958: PPUSH
5959: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5963: LD_EXP 1
5967: PPUSH
5968: LD_STRING D4b-JMM-4
5970: PPUSH
5971: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5975: LD_EXP 8
5979: PPUSH
5980: LD_STRING D4b-Mikh-4
5982: PPUSH
5983: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5987: LD_EXP 1
5991: PPUSH
5992: LD_STRING D4b-JMM-5
5994: PPUSH
5995: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5999: LD_EXP 8
6003: PPUSH
6004: LD_STRING D4b-Mikh-5
6006: PPUSH
6007: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
6011: LD_EXP 1
6015: PPUSH
6016: LD_STRING D4b-JMM-6
6018: PPUSH
6019: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
6023: LD_EXP 8
6027: PPUSH
6028: LD_STRING D4b-Mikh-6
6030: PPUSH
6031: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
6035: LD_EXP 1
6039: PPUSH
6040: LD_STRING D4b-JMM-7
6042: PPUSH
6043: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6047: LD_EXP 8
6051: PPUSH
6052: LD_STRING D4b-Mikh-7
6054: PPUSH
6055: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6059: LD_VAR 0 1
6063: PUSH
6064: LD_INT 1
6066: ARRAY
6067: PPUSH
6068: CALL_OW 258
6072: PUSH
6073: LD_INT 1
6075: EQUAL
6076: IFFALSE 6094
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6078: LD_VAR 0 1
6082: PUSH
6083: LD_INT 1
6085: ARRAY
6086: PPUSH
6087: LD_STRING D4b-Sol1-7
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 2
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-FSol1-7
6124: PPUSH
6125: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6129: LD_EXP 1
6133: PPUSH
6134: LD_STRING D4b-JMM-8
6136: PPUSH
6137: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6141: LD_VAR 0 1
6145: PUSH
6146: LD_INT 1
6148: ARRAY
6149: PPUSH
6150: CALL_OW 258
6154: PUSH
6155: LD_INT 1
6157: EQUAL
6158: IFFALSE 6176
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6160: LD_VAR 0 1
6164: PUSH
6165: LD_INT 1
6167: ARRAY
6168: PPUSH
6169: LD_STRING D4b-Sol1-8
6171: PPUSH
6172: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6176: LD_VAR 0 1
6180: PUSH
6181: LD_INT 1
6183: ARRAY
6184: PPUSH
6185: CALL_OW 258
6189: PUSH
6190: LD_INT 2
6192: EQUAL
6193: IFFALSE 6211
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6195: LD_VAR 0 1
6199: PUSH
6200: LD_INT 1
6202: ARRAY
6203: PPUSH
6204: LD_STRING D4b-FSol1-8
6206: PPUSH
6207: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6211: LD_EXP 1
6215: PPUSH
6216: LD_STRING D4b-JMM-9
6218: PPUSH
6219: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6223: LD_EXP 8
6227: PPUSH
6228: LD_INT 1
6230: PPUSH
6231: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6235: LD_ADDR_VAR 0 2
6239: PUSH
6240: LD_INT 22
6242: PUSH
6243: LD_INT 1
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: PPUSH
6253: CALL_OW 69
6257: PUSH
6258: FOR_IN
6259: IFFALSE 6272
// ComFree ( i ) ;
6261: LD_VAR 0 2
6265: PPUSH
6266: CALL_OW 139
6270: GO 6258
6272: POP
6273: POP
// repeat wait ( 0 0$1 ) ;
6274: LD_INT 35
6276: PPUSH
6277: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6281: LD_EXP 8
6285: PPUSH
6286: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6290: LD_EXP 8
6294: PUSH
6295: LD_VAR 0 1
6299: PUSH
6300: LD_INT 1
6302: ARRAY
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6315: LD_EXP 8
6319: PPUSH
6320: CALL_OW 310
6324: IFFALSE 6274
// mikhailDepot = IsInUnit ( Mikhail ) ;
6326: LD_ADDR_EXP 23
6330: PUSH
6331: LD_EXP 8
6335: PPUSH
6336: CALL_OW 310
6340: ST_TO_ADDR
// InGameOff ;
6341: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6345: LD_STRING M3
6347: PPUSH
6348: CALL_OW 337
// end ; 3 :
6352: GO 6389
6354: LD_INT 3
6356: DOUBLE
6357: EQUAL
6358: IFTRUE 6362
6360: GO 6388
6362: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6363: LD_EXP 8
6367: PPUSH
6368: LD_INT 17
6370: PPUSH
6371: CALL_OW 113
// wait ( 0 0$3 ) ;
6375: LD_INT 105
6377: PPUSH
6378: CALL_OW 67
// InGameOff ;
6382: CALL_OW 9
// end ; end ;
6386: GO 6389
6388: POP
// PrepareTigers ;
6389: CALL 14405 0 0
// RussianTrap ;
6393: CALL 10163 0 0
// tigersRespawn = 1 ;
6397: LD_ADDR_EXP 30
6401: PUSH
6402: LD_INT 1
6404: ST_TO_ADDR
// end ;
6405: PPOPN 2
6407: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6408: LD_INT 1
6410: PPUSH
6411: CALL_OW 255
6415: PUSH
6416: LD_INT 1
6418: EQUAL
6419: PUSH
6420: LD_INT 10
6422: PPUSH
6423: CALL_OW 255
6427: PUSH
6428: LD_INT 1
6430: EQUAL
6431: AND
6432: PUSH
6433: LD_INT 1
6435: PPUSH
6436: CALL_OW 274
6440: PPUSH
6441: LD_INT 1
6443: PPUSH
6444: CALL_OW 275
6448: PUSH
6449: LD_INT 100
6451: GREATEREQUAL
6452: AND
6453: IFFALSE 6616
6455: GO 6457
6457: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6458: LD_INT 2100
6460: PPUSH
6461: LD_INT 4200
6463: PPUSH
6464: CALL_OW 12
6468: PUSH
6469: LD_INT 1050
6471: PLUS
6472: PPUSH
6473: CALL_OW 67
// PrepareCargoBays ;
6477: CALL 12888 0 0
// cargoRespawn = 1 ;
6481: LD_ADDR_EXP 28
6485: PUSH
6486: LD_INT 1
6488: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6489: LD_EXP 15
6493: PUSH
6494: LD_EXP 16
6498: PUSH
6499: LD_EXP 17
6503: PUSH
6504: LD_EXP 18
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: PPUSH
6515: LD_INT 36
6517: PPUSH
6518: LD_INT 13
6520: PPUSH
6521: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6525: LD_EXP 15
6529: PUSH
6530: LD_EXP 16
6534: PUSH
6535: LD_EXP 17
6539: PUSH
6540: LD_EXP 18
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: PPUSH
6551: LD_INT 40
6553: PPUSH
6554: LD_INT 20
6556: PPUSH
6557: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6561: LD_EXP 15
6565: PUSH
6566: LD_EXP 16
6570: PUSH
6571: LD_EXP 17
6575: PUSH
6576: LD_EXP 18
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: PPUSH
6587: LD_INT 53
6589: PPUSH
6590: LD_INT 16
6592: PPUSH
6593: CALL_OW 171
// wait ( 0 0$5 ) ;
6597: LD_INT 175
6599: PPUSH
6600: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6604: LD_EXP 17
6608: PPUSH
6609: LD_STRING D5-Rus2-1
6611: PPUSH
6612: CALL_OW 88
// end ;
6616: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6617: LD_EXP 28
6621: PUSH
6622: LD_INT 1
6624: EQUAL
6625: IFFALSE 6839
6627: GO 6629
6629: DISABLE
6630: LD_INT 0
6632: PPUSH
6633: PPUSH
6634: PPUSH
6635: PPUSH
// begin enable ;
6636: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6637: LD_ADDR_VAR 0 3
6641: PUSH
6642: LD_INT 22
6644: PUSH
6645: LD_INT 3
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 21
6654: PUSH
6655: LD_INT 2
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: LD_INT 34
6664: PUSH
6665: LD_INT 51
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 69
6681: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
6682: LD_ADDR_VAR 0 4
6686: PUSH
6687: LD_INT 22
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 23
6699: PUSH
6700: LD_INT 1
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: PPUSH
6711: CALL_OW 69
6715: ST_TO_ADDR
// for i in tmp1 do
6716: LD_ADDR_VAR 0 1
6720: PUSH
6721: LD_VAR 0 3
6725: PUSH
6726: FOR_IN
6727: IFFALSE 6837
// begin for j in tmp2 do
6729: LD_ADDR_VAR 0 2
6733: PUSH
6734: LD_VAR 0 4
6738: PUSH
6739: FOR_IN
6740: IFFALSE 6833
// begin if GetDistUnits ( i , j ) < 7 then
6742: LD_VAR 0 1
6746: PPUSH
6747: LD_VAR 0 2
6751: PPUSH
6752: CALL_OW 296
6756: PUSH
6757: LD_INT 7
6759: LESS
6760: IFFALSE 6831
// begin disable ;
6762: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6763: LD_EXP 15
6767: PUSH
6768: LD_EXP 16
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PPUSH
6777: LD_INT 7
6779: PPUSH
6780: LD_INT 9
6782: PPUSH
6783: CALL_OW 111
// if cargoSee = 0 then
6787: LD_EXP 29
6791: PUSH
6792: LD_INT 0
6794: EQUAL
6795: IFFALSE 6831
// begin cargoSee = 1 ;
6797: LD_ADDR_EXP 29
6801: PUSH
6802: LD_INT 1
6804: ST_TO_ADDR
// cargoEscape = 1 ;
6805: LD_ADDR_EXP 20
6809: PUSH
6810: LD_INT 1
6812: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6813: LD_EXP 17
6817: PPUSH
6818: LD_STRING D5-Rus2-1a
6820: PPUSH
6821: CALL_OW 88
// exit ;
6825: POP
6826: POP
6827: POP
6828: POP
6829: GO 6839
// end ; end ; end ;
6831: GO 6739
6833: POP
6834: POP
// end ;
6835: GO 6726
6837: POP
6838: POP
// end ;
6839: PPOPN 4
6841: END
// every 0 0$1 trigger cargoEscape > 0 do
6842: LD_EXP 20
6846: PUSH
6847: LD_INT 0
6849: GREATER
6850: IFFALSE 6997
6852: GO 6854
6854: DISABLE
// begin enable ;
6855: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6856: LD_EXP 15
6860: PUSH
6861: LD_EXP 16
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PPUSH
6870: LD_INT 13
6872: PPUSH
6873: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6877: LD_EXP 15
6881: PPUSH
6882: LD_INT 13
6884: PPUSH
6885: CALL_OW 308
6889: PUSH
6890: LD_EXP 17
6894: PPUSH
6895: LD_INT 13
6897: PPUSH
6898: CALL_OW 308
6902: OR
6903: IFFALSE 6937
// begin RemoveUnit ( cargo1 ) ;
6905: LD_EXP 15
6909: PPUSH
6910: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6914: LD_EXP 17
6918: PPUSH
6919: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6923: LD_ADDR_EXP 20
6927: PUSH
6928: LD_EXP 20
6932: PUSH
6933: LD_INT 1
6935: PLUS
6936: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6937: LD_EXP 16
6941: PPUSH
6942: LD_INT 13
6944: PPUSH
6945: CALL_OW 308
6949: PUSH
6950: LD_EXP 18
6954: PPUSH
6955: LD_INT 13
6957: PPUSH
6958: CALL_OW 308
6962: OR
6963: IFFALSE 6997
// begin RemoveUnit ( cargo2 ) ;
6965: LD_EXP 16
6969: PPUSH
6970: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6974: LD_EXP 18
6978: PPUSH
6979: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6983: LD_ADDR_EXP 20
6987: PUSH
6988: LD_EXP 20
6992: PUSH
6993: LD_INT 1
6995: PLUS
6996: ST_TO_ADDR
// end ; end ;
6997: END
// every 0 0$1 trigger cargoEscape > 1 do
6998: LD_EXP 20
7002: PUSH
7003: LD_INT 1
7005: GREATER
7006: IFFALSE 7170
7008: GO 7010
7010: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
7011: LD_INT 4
7013: PPUSH
7014: LD_INT 1
7016: PPUSH
7017: LD_INT 1
7019: PPUSH
7020: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7024: LD_INT 31
7026: PPUSH
7027: LD_INT 1
7029: PPUSH
7030: LD_INT 1
7032: PPUSH
7033: CALL_OW 324
// if IsOK ( Jerry ) then
7037: LD_EXP 7
7041: PPUSH
7042: CALL_OW 302
7046: IFFALSE 7062
// begin Say ( Jerry , D5a-Sol1-1 ) ;
7048: LD_EXP 7
7052: PPUSH
7053: LD_STRING D5a-Sol1-1
7055: PPUSH
7056: CALL_OW 88
// end else
7060: GO 7158
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
7062: LD_INT 22
7064: PUSH
7065: LD_INT 1
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: LD_INT 23
7074: PUSH
7075: LD_INT 1
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PUSH
7082: LD_INT 26
7084: PUSH
7085: LD_INT 1
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: PPUSH
7097: CALL_OW 69
7101: PUSH
7102: LD_INT 2
7104: PPUSH
7105: LD_INT 22
7107: PUSH
7108: LD_INT 1
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 23
7117: PUSH
7118: LD_INT 1
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 26
7127: PUSH
7128: LD_INT 1
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: LIST
7139: PPUSH
7140: CALL_OW 69
7144: PPUSH
7145: CALL_OW 12
7149: ARRAY
7150: PPUSH
7151: LD_STRING D5a-Sol1-1
7153: PPUSH
7154: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7158: LD_EXP 1
7162: PPUSH
7163: LD_STRING D5a-JMM-1
7165: PPUSH
7166: CALL_OW 88
// end ;
7170: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7171: LD_INT 1
7173: PPUSH
7174: CALL_OW 255
7178: PUSH
7179: LD_INT 3
7181: EQUAL
7182: PUSH
7183: LD_INT 1
7185: PPUSH
7186: CALL_OW 256
7190: PUSH
7191: LD_INT 1000
7193: LESS
7194: AND
7195: PUSH
7196: LD_INT 10
7198: PPUSH
7199: CALL_OW 255
7203: PUSH
7204: LD_INT 3
7206: EQUAL
7207: PUSH
7208: LD_INT 10
7210: PPUSH
7211: CALL_OW 256
7215: PUSH
7216: LD_INT 1000
7218: LESS
7219: AND
7220: OR
7221: IFFALSE 7238
7223: GO 7225
7225: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
7226: LD_EXP 1
7230: PPUSH
7231: LD_STRING D8-JMM-1
7233: PPUSH
7234: CALL_OW 88
// end ;
7238: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7239: LD_EXP 8
7243: PPUSH
7244: CALL_OW 310
7248: PUSH
7249: LD_INT 1
7251: EQUAL
7252: PUSH
7253: LD_EXP 22
7257: PUSH
7258: LD_INT 3
7260: EQUAL
7261: NOT
7262: AND
7263: IFFALSE 7285
7265: GO 7267
7267: DISABLE
// begin mikhailInBase = 1 ;
7268: LD_ADDR_EXP 22
7272: PUSH
7273: LD_INT 1
7275: ST_TO_ADDR
// mikhailStatus = 1 ;
7276: LD_ADDR_EXP 21
7280: PUSH
7281: LD_INT 1
7283: ST_TO_ADDR
// enable ;
7284: ENABLE
// end ;
7285: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
7286: LD_EXP 8
7290: PPUSH
7291: LD_INT 25
7293: PPUSH
7294: CALL_OW 308
7298: PUSH
7299: LD_EXP 22
7303: PUSH
7304: LD_INT 1
7306: EQUAL
7307: AND
7308: PUSH
7309: LD_EXP 8
7313: PPUSH
7314: CALL_OW 255
7318: PUSH
7319: LD_INT 1
7321: EQUAL
7322: AND
7323: IFFALSE 7653
7325: GO 7327
7327: DISABLE
// begin enable ;
7328: ENABLE
// case query ( QMikh2 ) of 1 :
7329: LD_STRING QMikh2
7331: PPUSH
7332: CALL_OW 97
7336: PUSH
7337: LD_INT 1
7339: DOUBLE
7340: EQUAL
7341: IFTRUE 7345
7343: GO 7412
7345: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7346: LD_INT 1
7348: PPUSH
7349: LD_INT 6
7351: PPUSH
7352: LD_INT 2
7354: PPUSH
7355: LD_INT 1
7357: PPUSH
7358: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7362: LD_EXP 8
7366: PPUSH
7367: LD_INT 6
7369: PPUSH
7370: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7374: LD_EXP 8
7378: PPUSH
7379: CALL_OW 122
// wait ( 0 0$1 ) ;
7383: LD_INT 35
7385: PPUSH
7386: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7390: LD_EXP 8
7394: PPUSH
7395: LD_INT 17
7397: PPUSH
7398: CALL_OW 113
// mikhailInbase = 0 ;
7402: LD_ADDR_EXP 22
7406: PUSH
7407: LD_INT 0
7409: ST_TO_ADDR
// end ; 2 :
7410: GO 7653
7412: LD_INT 2
7414: DOUBLE
7415: EQUAL
7416: IFTRUE 7420
7418: GO 7593
7420: POP
// begin mikhailInBase = 2 ;
7421: LD_ADDR_EXP 22
7425: PUSH
7426: LD_INT 2
7428: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7429: LD_EXP 8
7433: PPUSH
7434: LD_INT 6
7436: PPUSH
7437: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7441: LD_EXP 8
7445: PPUSH
7446: CALL_OW 122
// wait ( 0 0$1 ) ;
7450: LD_INT 35
7452: PPUSH
7453: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7457: LD_EXP 8
7461: PPUSH
7462: LD_EXP 8
7466: PPUSH
7467: CALL_OW 250
7471: PUSH
7472: LD_INT 2
7474: PLUS
7475: PPUSH
7476: LD_EXP 8
7480: PPUSH
7481: CALL_OW 251
7485: PUSH
7486: LD_INT 2
7488: PLUS
7489: PPUSH
7490: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7494: LD_EXP 8
7498: PPUSH
7499: LD_EXP 8
7503: PPUSH
7504: CALL_OW 250
7508: PUSH
7509: LD_INT 1
7511: PLUS
7512: PPUSH
7513: LD_EXP 8
7517: PPUSH
7518: CALL_OW 251
7522: PUSH
7523: LD_INT 2
7525: PLUS
7526: PPUSH
7527: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7531: LD_EXP 8
7535: PPUSH
7536: LD_EXP 8
7540: PPUSH
7541: CALL_OW 250
7545: PUSH
7546: LD_INT 2
7548: PLUS
7549: PPUSH
7550: LD_EXP 8
7554: PPUSH
7555: CALL_OW 251
7559: PPUSH
7560: CALL_OW 171
// wait ( 0 0$5 ) ;
7564: LD_INT 175
7566: PPUSH
7567: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7571: LD_EXP 8
7575: PPUSH
7576: LD_INT 25
7578: PPUSH
7579: CALL_OW 113
// mikhailInBase = 4 ;
7583: LD_ADDR_EXP 22
7587: PUSH
7588: LD_INT 4
7590: ST_TO_ADDR
// end ; 3 :
7591: GO 7653
7593: LD_INT 3
7595: DOUBLE
7596: EQUAL
7597: IFTRUE 7601
7599: GO 7652
7601: POP
// begin SetSide ( Mikhail , 6 ) ;
7602: LD_EXP 8
7606: PPUSH
7607: LD_INT 6
7609: PPUSH
7610: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7614: LD_EXP 8
7618: PPUSH
7619: CALL_OW 122
// wait ( 0 0$1 ) ;
7623: LD_INT 35
7625: PPUSH
7626: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7630: LD_EXP 8
7634: PPUSH
7635: LD_INT 17
7637: PPUSH
7638: CALL_OW 113
// mikhailInbase = 3 ;
7642: LD_ADDR_EXP 22
7646: PUSH
7647: LD_INT 3
7649: ST_TO_ADDR
// end ; end ;
7650: GO 7653
7652: POP
// end ;
7653: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7654: LD_EXP 8
7658: PPUSH
7659: LD_INT 25
7661: PPUSH
7662: CALL_OW 308
7666: PUSH
7667: LD_EXP 22
7671: PUSH
7672: LD_INT 4
7674: EQUAL
7675: AND
7676: IFFALSE 7740
7678: GO 7680
7680: DISABLE
// begin enable ;
7681: ENABLE
// InGameOn ;
7682: CALL_OW 8
// SetSide ( Mikhail , 1 ) ;
7686: LD_EXP 8
7690: PPUSH
7691: LD_INT 1
7693: PPUSH
7694: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7698: LD_INT 35
7700: PPUSH
7701: CALL_OW 67
// ComEnterUnit ( Mikhail , dep1 ) ;
7705: LD_EXP 8
7709: PPUSH
7710: LD_INT 1
7712: PPUSH
7713: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
7717: LD_EXP 8
7721: PPUSH
7722: CALL_OW 310
7726: IFFALSE 7698
// InGameOff ;
7728: CALL_OW 9
// mikhailInBase = 1 ;
7732: LD_ADDR_EXP 22
7736: PUSH
7737: LD_INT 1
7739: ST_TO_ADDR
// end ;
7740: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7741: LD_EXP 8
7745: PPUSH
7746: CALL_OW 310
7750: PUSH
7751: LD_EXP 22
7755: PUSH
7756: LD_INT 3
7758: EQUAL
7759: NOT
7760: AND
7761: IFFALSE 7887
7763: GO 7765
7765: DISABLE
// begin enable ;
7766: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7767: LD_INT 22
7769: PUSH
7770: LD_INT 1
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PUSH
7777: LD_INT 21
7779: PUSH
7780: LD_INT 1
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PUSH
7787: LD_INT 91
7789: PUSH
7790: LD_EXP 8
7794: PPUSH
7795: CALL_OW 310
7799: PUSH
7800: LD_INT 10
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: LIST
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: LIST
7812: PPUSH
7813: CALL_OW 69
7817: PUSH
7818: LD_INT 1
7820: EQUAL
7821: IFFALSE 7887
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7823: LD_INT 1
7825: PPUSH
7826: LD_INT 6
7828: PPUSH
7829: LD_INT 2
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7839: LD_EXP 8
7843: PPUSH
7844: LD_INT 6
7846: PPUSH
7847: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7851: LD_EXP 8
7855: PPUSH
7856: CALL_OW 122
// wait ( 0 0$1 ) ;
7860: LD_INT 35
7862: PPUSH
7863: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7867: LD_EXP 8
7871: PPUSH
7872: LD_INT 17
7874: PPUSH
7875: CALL_OW 113
// mikhailStatus = 3 ;
7879: LD_ADDR_EXP 21
7883: PUSH
7884: LD_INT 3
7886: ST_TO_ADDR
// end ; end ;
7887: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7888: LD_EXP 1
7892: PPUSH
7893: LD_EXP 23
7897: PPUSH
7898: CALL_OW 296
7902: PUSH
7903: LD_INT 5
7905: LESS
7906: PUSH
7907: LD_EXP 21
7911: PUSH
7912: LD_INT 3
7914: EQUAL
7915: AND
7916: PUSH
7917: LD_EXP 22
7921: PUSH
7922: LD_INT 3
7924: EQUAL
7925: NOT
7926: AND
7927: IFFALSE 8149
7929: GO 7931
7931: DISABLE
7932: LD_INT 0
7934: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7935: LD_ADDR_VAR 0 1
7939: PUSH
7940: LD_INT 22
7942: PUSH
7943: LD_INT 1
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 21
7952: PUSH
7953: LD_INT 1
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: LD_INT 26
7962: PUSH
7963: LD_INT 1
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: LIST
7974: PPUSH
7975: CALL_OW 69
7979: PUSH
7980: LD_EXP 1
7984: PUSH
7985: LD_EXP 5
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: DIFF
7994: ST_TO_ADDR
// DialogueOn ;
7995: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7999: LD_EXP 1
8003: PPUSH
8004: LD_STRING D7-JMM-1
8006: PPUSH
8007: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8011: LD_VAR 0 1
8015: PUSH
8016: LD_INT 1
8018: ARRAY
8019: PPUSH
8020: LD_STRING D7-Sol1-1
8022: PPUSH
8023: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8027: LD_EXP 1
8031: PPUSH
8032: LD_STRING D7-JMM-2
8034: PPUSH
8035: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8039: LD_VAR 0 1
8043: PUSH
8044: LD_INT 1
8046: ARRAY
8047: PPUSH
8048: LD_STRING D7-Sol1-2
8050: PPUSH
8051: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8055: LD_EXP 1
8059: PPUSH
8060: LD_STRING D7-JMM-3
8062: PPUSH
8063: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8067: LD_VAR 0 1
8071: PUSH
8072: LD_INT 1
8074: ARRAY
8075: PPUSH
8076: LD_STRING D7-Sol1-3
8078: PPUSH
8079: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8083: LD_EXP 3
8087: PPUSH
8088: CALL_OW 302
8092: PUSH
8093: LD_EXP 4
8097: PPUSH
8098: CALL_OW 302
8102: AND
8103: IFFALSE 8145
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8105: LD_EXP 3
8109: PPUSH
8110: LD_STRING D7-Cyrus-3
8112: PPUSH
8113: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8117: LD_VAR 0 1
8121: PUSH
8122: LD_INT 1
8124: ARRAY
8125: PPUSH
8126: LD_STRING D7-Sol1-4
8128: PPUSH
8129: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8133: LD_EXP 4
8137: PPUSH
8138: LD_STRING D7-Lisa-4
8140: PPUSH
8141: CALL_OW 88
// end ; DialogueOff ;
8145: CALL_OW 7
// end ;
8149: PPOPN 1
8151: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8152: LD_EXP 8
8156: PPUSH
8157: CALL_OW 303
8161: PUSH
8162: LD_EXP 21
8166: PUSH
8167: LD_INT 3
8169: EQUAL
8170: AND
8171: IFFALSE 8185
8173: GO 8175
8175: DISABLE
// begin enable ;
8176: ENABLE
// mikhailStatus = 2 ;
8177: LD_ADDR_EXP 21
8181: PUSH
8182: LD_INT 2
8184: ST_TO_ADDR
// end ;
8185: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8186: LD_EXP 8
8190: PPUSH
8191: LD_INT 17
8193: PPUSH
8194: CALL_OW 308
8198: PUSH
8199: LD_EXP 8
8203: PPUSH
8204: CALL_OW 255
8208: PUSH
8209: LD_INT 6
8211: EQUAL
8212: AND
8213: IFFALSE 8246
8215: GO 8217
8217: DISABLE
// begin if not mikhailInBase = 3 then
8218: LD_EXP 22
8222: PUSH
8223: LD_INT 3
8225: EQUAL
8226: NOT
8227: IFFALSE 8237
// mikhailStatus = 3 ;
8229: LD_ADDR_EXP 21
8233: PUSH
8234: LD_INT 3
8236: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8237: LD_EXP 8
8241: PPUSH
8242: CALL_OW 64
// end ;
8246: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8247: LD_EXP 21
8251: PUSH
8252: LD_INT 3
8254: EQUAL
8255: PUSH
8256: LD_EXP 8
8260: PPUSH
8261: CALL_OW 255
8265: PUSH
8266: LD_INT 6
8268: EQUAL
8269: AND
8270: IFFALSE 8436
8272: GO 8274
8274: DISABLE
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
// begin enable ;
8279: ENABLE
// if IsOk ( Mikhail ) then
8280: LD_EXP 8
8284: PPUSH
8285: CALL_OW 302
8289: IFFALSE 8436
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8291: LD_ADDR_VAR 0 2
8295: PUSH
8296: LD_EXP 8
8300: PPUSH
8301: LD_INT 22
8303: PUSH
8304: LD_INT 1
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PUSH
8311: LD_INT 21
8313: PUSH
8314: LD_INT 1
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PPUSH
8325: CALL_OW 69
8329: PPUSH
8330: CALL 10355 0 2
8334: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8335: LD_VAR 0 2
8339: PPUSH
8340: LD_EXP 8
8344: PPUSH
8345: CALL_OW 296
8349: PUSH
8350: LD_INT 8
8352: LESS
8353: IFFALSE 8436
// begin if GetSex ( attacker ) = sex_male then
8355: LD_VAR 0 2
8359: PPUSH
8360: CALL_OW 258
8364: PUSH
8365: LD_INT 1
8367: EQUAL
8368: IFFALSE 8404
// begin disable ;
8370: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8371: LD_VAR 0 2
8375: PPUSH
8376: LD_STRING D7a-Sol1-1
8378: PPUSH
8379: CALL_OW 88
// wait ( 0 0$2 ) ;
8383: LD_INT 70
8385: PPUSH
8386: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8390: LD_VAR 0 2
8394: PPUSH
8395: LD_STRING D7a-Sol1-1a
8397: PPUSH
8398: CALL_OW 88
// end else
8402: GO 8436
// begin disable ;
8404: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8405: LD_VAR 0 2
8409: PPUSH
8410: LD_STRING D7a-FSol1-1
8412: PPUSH
8413: CALL_OW 88
// wait ( 0 0$2 ) ;
8417: LD_INT 70
8419: PPUSH
8420: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8424: LD_VAR 0 2
8428: PPUSH
8429: LD_STRING D7a-FSol1-1a
8431: PPUSH
8432: CALL_OW 88
// end ; end ; end ; end ;
8436: PPOPN 2
8438: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8439: LD_EXP 27
8443: PUSH
8444: LD_INT 1
8446: EQUAL
8447: PUSH
8448: LD_INT 22
8450: PPUSH
8451: LD_INT 22
8453: PUSH
8454: LD_INT 3
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 21
8463: PUSH
8464: LD_INT 1
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PPUSH
8475: CALL_OW 70
8479: PUSH
8480: LD_INT 2
8482: GREATER
8483: AND
8484: PUSH
8485: LD_INT 22
8487: PPUSH
8488: LD_INT 22
8490: PUSH
8491: LD_INT 1
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 2
8500: PUSH
8501: LD_INT 21
8503: PUSH
8504: LD_INT 1
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 59
8513: PUSH
8514: EMPTY
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PPUSH
8526: CALL_OW 70
8530: PUSH
8531: LD_INT 0
8533: EQUAL
8534: AND
8535: IFFALSE 8550
8537: GO 8539
8539: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8540: LD_INT 1
8542: PPUSH
8543: LD_INT 3
8545: PPUSH
8546: CALL_OW 235
// end ;
8550: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8551: LD_EXP 30
8555: PUSH
8556: LD_INT 1
8558: EQUAL
8559: PUSH
8560: LD_INT 22
8562: PUSH
8563: LD_INT 0
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: LD_INT 25
8572: PUSH
8573: LD_INT 14
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PPUSH
8584: CALL_OW 69
8588: PUSH
8589: LD_INT 0
8591: EQUAL
8592: AND
8593: IFFALSE 8687
8595: GO 8597
8597: DISABLE
8598: LD_INT 0
8600: PPUSH
8601: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8602: LD_ADDR_VAR 0 2
8606: PUSH
8607: LD_INT 22
8609: PUSH
8610: LD_INT 1
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PUSH
8617: LD_INT 21
8619: PUSH
8620: LD_INT 1
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: PUSH
8627: LD_INT 23
8629: PUSH
8630: LD_INT 1
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: LIST
8641: PPUSH
8642: CALL_OW 69
8646: ST_TO_ADDR
// for i in tmp do
8647: LD_ADDR_VAR 0 1
8651: PUSH
8652: LD_VAR 0 2
8656: PUSH
8657: FOR_IN
8658: IFFALSE 8685
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8660: LD_VAR 0 1
8664: PPUSH
8665: LD_INT 1
8667: PPUSH
8668: LD_INT 4
8670: PPUSH
8671: CALL_OW 12
8675: PPUSH
8676: LD_INT 300
8678: PPUSH
8679: CALL_OW 492
// end ;
8683: GO 8657
8685: POP
8686: POP
// end ; end_of_file
8687: PPOPN 2
8689: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8690: LD_INT 0
8692: PPUSH
8693: PPUSH
8694: PPUSH
8695: PPUSH
// for i = 1 to count do
8696: LD_ADDR_VAR 0 8
8700: PUSH
8701: DOUBLE
8702: LD_INT 1
8704: DEC
8705: ST_TO_ADDR
8706: LD_VAR 0 6
8710: PUSH
8711: FOR_TO
8712: IFFALSE 8793
// begin uc_side = side ;
8714: LD_ADDR_OWVAR 20
8718: PUSH
8719: LD_VAR 0 1
8723: ST_TO_ADDR
// uc_nation = nation ;
8724: LD_ADDR_OWVAR 21
8728: PUSH
8729: LD_VAR 0 2
8733: ST_TO_ADDR
// hc_gallery =  ;
8734: LD_ADDR_OWVAR 33
8738: PUSH
8739: LD_STRING 
8741: ST_TO_ADDR
// hc_name =  ;
8742: LD_ADDR_OWVAR 26
8746: PUSH
8747: LD_STRING 
8749: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8750: LD_INT 0
8752: PPUSH
8753: LD_VAR 0 5
8757: PPUSH
8758: LD_VAR 0 4
8762: PPUSH
8763: CALL_OW 380
// un = CreateHuman ;
8767: LD_ADDR_VAR 0 10
8771: PUSH
8772: CALL_OW 44
8776: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8777: LD_VAR 0 10
8781: PPUSH
8782: LD_VAR 0 3
8786: PPUSH
8787: CALL_OW 52
// end ;
8791: GO 8711
8793: POP
8794: POP
// end ;
8795: LD_VAR 0 7
8799: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8800: LD_INT 0
8802: PPUSH
8803: PPUSH
8804: PPUSH
// uc_side := GetSide ( b ) ;
8805: LD_ADDR_OWVAR 20
8809: PUSH
8810: LD_VAR 0 2
8814: PPUSH
8815: CALL_OW 255
8819: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8820: LD_ADDR_OWVAR 21
8824: PUSH
8825: LD_VAR 0 2
8829: PPUSH
8830: CALL_OW 248
8834: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8835: LD_INT 0
8837: PPUSH
8838: LD_INT 1
8840: PPUSH
8841: LD_VAR 0 1
8845: PPUSH
8846: CALL_OW 380
// un = CreateHuman ;
8850: LD_ADDR_VAR 0 4
8854: PUSH
8855: CALL_OW 44
8859: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8860: LD_ADDR_VAR 0 5
8864: PUSH
8865: LD_VAR 0 2
8869: PPUSH
8870: CALL_OW 254
8874: PUSH
8875: LD_INT 3
8877: MINUS
8878: ST_TO_ADDR
// if dir < 0 then
8879: LD_VAR 0 5
8883: PUSH
8884: LD_INT 0
8886: LESS
8887: IFFALSE 8903
// dir := 6 + dir ;
8889: LD_ADDR_VAR 0 5
8893: PUSH
8894: LD_INT 6
8896: PUSH
8897: LD_VAR 0 5
8901: PLUS
8902: ST_TO_ADDR
// SetDir ( un , dir ) ;
8903: LD_VAR 0 4
8907: PPUSH
8908: LD_VAR 0 5
8912: PPUSH
8913: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8917: LD_VAR 0 4
8921: PPUSH
8922: LD_VAR 0 2
8926: PPUSH
8927: CALL_OW 52
// end ;
8931: LD_VAR 0 3
8935: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8936: LD_INT 0
8938: PPUSH
8939: PPUSH
8940: PPUSH
8941: PPUSH
8942: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8943: LD_ADDR_VAR 0 7
8947: PUSH
8948: LD_INT 22
8950: PUSH
8951: LD_VAR 0 1
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 25
8962: PUSH
8963: LD_INT 2
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 24
8972: PUSH
8973: LD_INT 1000
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: PPUSH
8985: CALL_OW 69
8989: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8990: LD_ADDR_VAR 0 5
8994: PUSH
8995: LD_VAR 0 3
8999: PPUSH
9000: LD_INT 22
9002: PUSH
9003: LD_VAR 0 1
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: LD_INT 21
9014: PUSH
9015: LD_INT 3
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 3
9024: PUSH
9025: LD_INT 24
9027: PUSH
9028: LD_INT 1000
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: PPUSH
9047: CALL_OW 70
9051: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
9052: LD_VAR 0 5
9056: PUSH
9057: LD_INT 0
9059: GREATER
9060: PUSH
9061: LD_VAR 0 7
9065: PUSH
9066: LD_INT 0
9068: GREATER
9069: AND
9070: IFFALSE 9136
// begin for i in engineerOk_list do
9072: LD_ADDR_VAR 0 6
9076: PUSH
9077: LD_VAR 0 7
9081: PUSH
9082: FOR_IN
9083: IFFALSE 9134
// begin for j in buildings_list do
9085: LD_ADDR_VAR 0 8
9089: PUSH
9090: LD_VAR 0 5
9094: PUSH
9095: FOR_IN
9096: IFFALSE 9130
// begin AddComExitBuilding ( i ) ;
9098: LD_VAR 0 6
9102: PPUSH
9103: CALL_OW 182
// wait ( 0 0$1 ) ;
9107: LD_INT 35
9109: PPUSH
9110: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
9114: LD_VAR 0 6
9118: PPUSH
9119: LD_VAR 0 8
9123: PPUSH
9124: CALL_OW 190
// end ;
9128: GO 9095
9130: POP
9131: POP
// end ;
9132: GO 9082
9134: POP
9135: POP
// end ; if buildings_list = 0 then
9136: LD_VAR 0 5
9140: PUSH
9141: LD_INT 0
9143: EQUAL
9144: IFFALSE 9177
// begin for i in engineerOK_list do
9146: LD_ADDR_VAR 0 6
9150: PUSH
9151: LD_VAR 0 7
9155: PUSH
9156: FOR_IN
9157: IFFALSE 9175
// begin ComEnterUnit ( i , building ) ;
9159: LD_VAR 0 6
9163: PPUSH
9164: LD_VAR 0 2
9168: PPUSH
9169: CALL_OW 120
// end ;
9173: GO 9156
9175: POP
9176: POP
// end ; end ;
9177: LD_VAR 0 4
9181: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9182: LD_INT 0
9184: PPUSH
9185: PPUSH
9186: PPUSH
9187: PPUSH
9188: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9189: LD_ADDR_VAR 0 6
9193: PUSH
9194: LD_INT 22
9196: PUSH
9197: LD_VAR 0 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: LD_INT 25
9208: PUSH
9209: LD_INT 4
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 24
9218: PUSH
9219: LD_INT 250
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: PPUSH
9231: CALL_OW 69
9235: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9236: LD_ADDR_VAR 0 9
9240: PUSH
9241: LD_VAR 0 3
9245: PPUSH
9246: LD_INT 22
9248: PUSH
9249: LD_VAR 0 1
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: PUSH
9258: LD_INT 21
9260: PUSH
9261: LD_INT 1
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: PUSH
9268: LD_INT 3
9270: PUSH
9271: LD_INT 24
9273: PUSH
9274: LD_INT 650
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: LIST
9289: PPUSH
9290: CALL_OW 70
9294: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9295: LD_VAR 0 9
9299: PUSH
9300: LD_INT 0
9302: GREATER
9303: PUSH
9304: LD_VAR 0 6
9308: PUSH
9309: LD_INT 0
9311: GREATER
9312: AND
9313: IFFALSE 9440
// begin for i = 1 to damageUnits do
9315: LD_ADDR_VAR 0 7
9319: PUSH
9320: DOUBLE
9321: LD_INT 1
9323: DEC
9324: ST_TO_ADDR
9325: LD_VAR 0 9
9329: PUSH
9330: FOR_TO
9331: IFFALSE 9355
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9333: LD_VAR 0 9
9337: PUSH
9338: LD_VAR 0 7
9342: ARRAY
9343: PPUSH
9344: LD_VAR 0 2
9348: PPUSH
9349: CALL_OW 113
9353: GO 9330
9355: POP
9356: POP
// for i in sci_list do
9357: LD_ADDR_VAR 0 7
9361: PUSH
9362: LD_VAR 0 6
9366: PUSH
9367: FOR_IN
9368: IFFALSE 9436
// begin ComExitBuilding ( i ) ;
9370: LD_VAR 0 7
9374: PPUSH
9375: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9379: LD_ADDR_VAR 0 8
9383: PUSH
9384: LD_VAR 0 2
9388: PPUSH
9389: LD_INT 22
9391: PUSH
9392: LD_VAR 0 1
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PPUSH
9401: CALL_OW 70
9405: PUSH
9406: FOR_IN
9407: IFFALSE 9432
// begin AddComHeal ( i , j ) ;
9409: LD_VAR 0 7
9413: PPUSH
9414: LD_VAR 0 8
9418: PPUSH
9419: CALL_OW 188
// wait ( 1 1$0 ) ;
9423: LD_INT 2100
9425: PPUSH
9426: CALL_OW 67
// end ;
9430: GO 9406
9432: POP
9433: POP
// end ;
9434: GO 9367
9436: POP
9437: POP
// end else
9438: GO 9454
// begin AddComEnterUnit ( sci_list , build ) ;
9440: LD_VAR 0 6
9444: PPUSH
9445: LD_VAR 0 4
9449: PPUSH
9450: CALL_OW 180
// end ; end ;
9454: LD_VAR 0 5
9458: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9459: LD_INT 0
9461: PPUSH
9462: PPUSH
9463: PPUSH
9464: PPUSH
9465: PPUSH
9466: PPUSH
9467: PPUSH
9468: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9469: LD_ADDR_VAR 0 7
9473: PUSH
9474: LD_VAR 0 3
9478: PPUSH
9479: LD_INT 22
9481: PUSH
9482: LD_VAR 0 1
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 21
9493: PUSH
9494: LD_INT 2
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 24
9503: PUSH
9504: LD_INT 550
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 34
9513: PUSH
9514: LD_INT 46
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: PPUSH
9527: CALL_OW 70
9531: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9532: LD_ADDR_VAR 0 8
9536: PUSH
9537: LD_VAR 0 3
9541: PPUSH
9542: LD_INT 22
9544: PUSH
9545: LD_VAR 0 1
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PUSH
9554: LD_INT 21
9556: PUSH
9557: LD_INT 2
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 34
9566: PUSH
9567: LD_INT 46
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 3
9576: PUSH
9577: LD_INT 24
9579: PUSH
9580: LD_INT 550
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: PPUSH
9597: CALL_OW 70
9601: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9602: LD_ADDR_VAR 0 9
9606: PUSH
9607: LD_VAR 0 2
9611: PPUSH
9612: LD_INT 22
9614: PUSH
9615: LD_VAR 0 1
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 21
9626: PUSH
9627: LD_INT 2
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 34
9636: PUSH
9637: LD_INT 46
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 24
9646: PUSH
9647: LD_INT 1000
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: LD_INT 58
9656: PUSH
9657: EMPTY
9658: LIST
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: PPUSH
9667: CALL_OW 70
9671: ST_TO_ADDR
// for i in damageVehicle_list do
9672: LD_ADDR_VAR 0 5
9676: PUSH
9677: LD_VAR 0 8
9681: PUSH
9682: FOR_IN
9683: IFFALSE 9702
// mechanicInside_list = UnitsInside ( i ) ;
9685: LD_ADDR_VAR 0 10
9689: PUSH
9690: LD_VAR 0 5
9694: PPUSH
9695: CALL_OW 313
9699: ST_TO_ADDR
9700: GO 9682
9702: POP
9703: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9704: LD_ADDR_VAR 0 11
9708: PUSH
9709: LD_VAR 0 2
9713: PPUSH
9714: LD_INT 22
9716: PUSH
9717: LD_VAR 0 1
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PUSH
9726: LD_INT 25
9728: PUSH
9729: LD_INT 3
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: PPUSH
9740: CALL_OW 70
9744: ST_TO_ADDR
// if damageVehicle_list > 0 then
9745: LD_VAR 0 8
9749: PUSH
9750: LD_INT 0
9752: GREATER
9753: IFFALSE 9826
// begin for i in damageVehicle_list do
9755: LD_ADDR_VAR 0 5
9759: PUSH
9760: LD_VAR 0 8
9764: PUSH
9765: FOR_IN
9766: IFFALSE 9824
// begin for j in mechanicInside_list do
9768: LD_ADDR_VAR 0 6
9772: PUSH
9773: LD_VAR 0 10
9777: PUSH
9778: FOR_IN
9779: IFFALSE 9820
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9781: LD_VAR 0 8
9785: PPUSH
9786: LD_VAR 0 2
9790: PPUSH
9791: CALL_OW 113
// AddComExitVehicle ( j ) ;
9795: LD_VAR 0 6
9799: PPUSH
9800: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9804: LD_VAR 0 6
9808: PPUSH
9809: LD_VAR 0 5
9813: PPUSH
9814: CALL_OW 189
// end ;
9818: GO 9778
9820: POP
9821: POP
// end ;
9822: GO 9765
9824: POP
9825: POP
// end ; if emptyVehicle_list > 0 then
9826: LD_VAR 0 9
9830: PUSH
9831: LD_INT 0
9833: GREATER
9834: IFFALSE 9884
// begin for i in emptyVehicle_list do
9836: LD_ADDR_VAR 0 5
9840: PUSH
9841: LD_VAR 0 9
9845: PUSH
9846: FOR_IN
9847: IFFALSE 9882
// begin for j in mechanicOutside_list do
9849: LD_ADDR_VAR 0 6
9853: PUSH
9854: LD_VAR 0 11
9858: PUSH
9859: FOR_IN
9860: IFFALSE 9878
// begin AddComEnterUnit ( j , i ) ;
9862: LD_VAR 0 6
9866: PPUSH
9867: LD_VAR 0 5
9871: PPUSH
9872: CALL_OW 180
// end ;
9876: GO 9859
9878: POP
9879: POP
// end ;
9880: GO 9846
9882: POP
9883: POP
// end ; if VehicleOK_list > 0 then
9884: LD_VAR 0 7
9888: PUSH
9889: LD_INT 0
9891: GREATER
9892: IFFALSE 9926
// begin for i in VehicleOK_list do
9894: LD_ADDR_VAR 0 5
9898: PUSH
9899: LD_VAR 0 7
9903: PUSH
9904: FOR_IN
9905: IFFALSE 9924
// ComAgressiveMove ( i , 110 , 29 ) ;
9907: LD_VAR 0 5
9911: PPUSH
9912: LD_INT 110
9914: PPUSH
9915: LD_INT 29
9917: PPUSH
9918: CALL_OW 114
9922: GO 9904
9924: POP
9925: POP
// end ; end ;
9926: LD_VAR 0 4
9930: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9931: LD_INT 0
9933: PPUSH
9934: PPUSH
9935: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9936: LD_VAR 0 1
9940: PPUSH
9941: LD_INT 22
9943: PUSH
9944: LD_VAR 0 2
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PUSH
9953: LD_INT 2
9955: PUSH
9956: LD_INT 21
9958: PUSH
9959: LD_INT 2
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 21
9968: PUSH
9969: LD_INT 1
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: LIST
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PPUSH
9985: CALL_OW 70
9989: PUSH
9990: LD_VAR 0 5
9994: GREATER
9995: IFFALSE 10127
// begin for i in defendersList do
9997: LD_ADDR_VAR 0 7
10001: PUSH
10002: LD_VAR 0 3
10006: PUSH
10007: FOR_IN
10008: IFFALSE 10123
// begin AddComExitBuilding ( i ) ;
10010: LD_VAR 0 7
10014: PPUSH
10015: CALL_OW 182
// wait ( 0 0$1 ) ;
10019: LD_INT 35
10021: PPUSH
10022: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
10026: LD_ADDR_VAR 0 8
10030: PUSH
10031: LD_VAR 0 1
10035: PPUSH
10036: LD_INT 22
10038: PUSH
10039: LD_VAR 0 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 2
10050: PUSH
10051: LD_INT 21
10053: PUSH
10054: LD_INT 2
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PUSH
10061: LD_INT 21
10063: PUSH
10064: LD_INT 1
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: LIST
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 70
10084: PUSH
10085: FOR_IN
10086: IFFALSE 10119
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
10088: LD_VAR 0 7
10092: PPUSH
10093: LD_VAR 0 8
10097: PPUSH
10098: CALL_OW 250
10102: PPUSH
10103: LD_VAR 0 8
10107: PPUSH
10108: CALL_OW 251
10112: PPUSH
10113: CALL_OW 174
10117: GO 10085
10119: POP
10120: POP
// end ;
10121: GO 10007
10123: POP
10124: POP
// end else
10125: GO 10158
// begin for i in defendersList do
10127: LD_ADDR_VAR 0 7
10131: PUSH
10132: LD_VAR 0 3
10136: PUSH
10137: FOR_IN
10138: IFFALSE 10156
// ComEnterUnit ( i , build ) ;
10140: LD_VAR 0 7
10144: PPUSH
10145: LD_VAR 0 4
10149: PPUSH
10150: CALL_OW 120
10154: GO 10137
10156: POP
10157: POP
// end ; end ;
10158: LD_VAR 0 6
10162: RET
// export function RussianTrap ; var i ; begin
10163: LD_INT 0
10165: PPUSH
10166: PPUSH
// if GetSide ( Brian ) = 4 then
10167: LD_EXP 6
10171: PPUSH
10172: CALL_OW 255
10176: PUSH
10177: LD_INT 4
10179: EQUAL
10180: IFFALSE 10203
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10182: LD_EXP 6
10186: PUSH
10187: LD_EXP 7
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PPUSH
10196: LD_INT 0
10198: PPUSH
10199: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10203: LD_ADDR_VAR 0 2
10207: PUSH
10208: LD_INT 22
10210: PUSH
10211: LD_INT 3
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: PUSH
10218: LD_INT 21
10220: PUSH
10221: LD_INT 1
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PPUSH
10232: CALL_OW 69
10236: PUSH
10237: FOR_IN
10238: IFFALSE 10348
// begin ComExitBuilding ( i ) ;
10240: LD_VAR 0 2
10244: PPUSH
10245: CALL_OW 122
// wait ( 0 0$1 ) ;
10249: LD_INT 35
10251: PPUSH
10252: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10256: LD_VAR 0 2
10260: PPUSH
10261: LD_INT 120
10263: PPUSH
10264: LD_INT 56
10266: PPUSH
10267: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10271: LD_VAR 0 2
10275: PPUSH
10276: LD_INT 111
10278: PPUSH
10279: LD_INT 37
10281: PPUSH
10282: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10286: LD_INT 33
10288: PPUSH
10289: CALL_OW 255
10293: PUSH
10294: LD_INT 3
10296: EQUAL
10297: PUSH
10298: LD_INT 33
10300: PPUSH
10301: CALL_OW 302
10305: AND
10306: IFFALSE 10322
// begin AddComEnterUnit ( i , arm2 ) ;
10308: LD_VAR 0 2
10312: PPUSH
10313: LD_INT 33
10315: PPUSH
10316: CALL_OW 180
// end else
10320: GO 10346
// begin AddComCrawl ( i ) ;
10322: LD_VAR 0 2
10326: PPUSH
10327: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10331: LD_VAR 0 2
10335: PPUSH
10336: LD_INT 109
10338: PPUSH
10339: LD_INT 30
10341: PPUSH
10342: CALL_OW 174
// end ; end ;
10346: GO 10237
10348: POP
10349: POP
// end ;
10350: LD_VAR 0 1
10354: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10355: LD_INT 0
10357: PPUSH
10358: PPUSH
10359: PPUSH
10360: PPUSH
10361: PPUSH
// nearest_dist = 1000 ;
10362: LD_ADDR_VAR 0 4
10366: PUSH
10367: LD_INT 1000
10369: ST_TO_ADDR
// nearest_un = un ;
10370: LD_ADDR_VAR 0 5
10374: PUSH
10375: LD_VAR 0 1
10379: ST_TO_ADDR
// for sold in units do
10380: LD_ADDR_VAR 0 6
10384: PUSH
10385: LD_VAR 0 2
10389: PUSH
10390: FOR_IN
10391: IFFALSE 10447
// begin dist = GetDistUnits ( un , sold ) ;
10393: LD_ADDR_VAR 0 7
10397: PUSH
10398: LD_VAR 0 1
10402: PPUSH
10403: LD_VAR 0 6
10407: PPUSH
10408: CALL_OW 296
10412: ST_TO_ADDR
// if dist < nearest_dist then
10413: LD_VAR 0 7
10417: PUSH
10418: LD_VAR 0 4
10422: LESS
10423: IFFALSE 10445
// begin nearest_un = sold ;
10425: LD_ADDR_VAR 0 5
10429: PUSH
10430: LD_VAR 0 6
10434: ST_TO_ADDR
// nearest_dist = dist ;
10435: LD_ADDR_VAR 0 4
10439: PUSH
10440: LD_VAR 0 7
10444: ST_TO_ADDR
// end ; end ;
10445: GO 10390
10447: POP
10448: POP
// result := nearest_un ;
10449: LD_ADDR_VAR 0 3
10453: PUSH
10454: LD_VAR 0 5
10458: ST_TO_ADDR
// end ;
10459: LD_VAR 0 3
10463: RET
// export function PrepareDifficulty ; begin
10464: LD_INT 0
10466: PPUSH
// if Difficulty = 1 then
10467: LD_OWVAR 67
10471: PUSH
10472: LD_INT 1
10474: EQUAL
10475: IFFALSE 10538
// begin RemoveUnit ( brw2 ) ;
10477: LD_INT 9
10479: PPUSH
10480: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10484: LD_INT 30
10486: PPUSH
10487: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10491: LD_INT 52
10493: PPUSH
10494: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10498: LD_INT 63
10500: PPUSH
10501: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10505: LD_INT 5
10507: PUSH
10508: LD_INT 4
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PPUSH
10515: LD_INT 60
10517: PPUSH
10518: CALL_OW 240
// RuSoldMinLevel = 0 ;
10522: LD_ADDR_EXP 13
10526: PUSH
10527: LD_INT 0
10529: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10530: LD_ADDR_EXP 14
10534: PUSH
10535: LD_INT 1
10537: ST_TO_ADDR
// end ; if Difficulty = 2 then
10538: LD_OWVAR 67
10542: PUSH
10543: LD_INT 2
10545: EQUAL
10546: IFFALSE 10588
// begin RemoveUnit ( brw4 ) ;
10548: LD_INT 52
10550: PPUSH
10551: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10555: LD_INT 5
10557: PUSH
10558: LD_INT 4
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PPUSH
10565: LD_INT 50
10567: PPUSH
10568: CALL_OW 240
// RuSoldMinLevel = 1 ;
10572: LD_ADDR_EXP 13
10576: PUSH
10577: LD_INT 1
10579: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10580: LD_ADDR_EXP 14
10584: PUSH
10585: LD_INT 2
10587: ST_TO_ADDR
// end ; if Difficulty = 3 then
10588: LD_OWVAR 67
10592: PUSH
10593: LD_INT 3
10595: EQUAL
10596: IFFALSE 10631
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10598: LD_INT 5
10600: PUSH
10601: LD_INT 4
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PPUSH
10608: LD_INT 40
10610: PPUSH
10611: CALL_OW 240
// RuSoldMinLevel = 2 ;
10615: LD_ADDR_EXP 13
10619: PUSH
10620: LD_INT 2
10622: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10623: LD_ADDR_EXP 14
10627: PUSH
10628: LD_INT 3
10630: ST_TO_ADDR
// end ; end ;
10631: LD_VAR 0 1
10635: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10636: LD_INT 0
10638: PPUSH
10639: PPUSH
10640: PPUSH
// tmp = [ ] ;
10641: LD_ADDR_VAR 0 5
10645: PUSH
10646: EMPTY
10647: ST_TO_ADDR
// if not vehicles then
10648: LD_VAR 0 1
10652: NOT
10653: IFFALSE 10657
// exit ;
10655: GO 10774
// for i in vehicles do
10657: LD_ADDR_VAR 0 4
10661: PUSH
10662: LD_VAR 0 1
10666: PUSH
10667: FOR_IN
10668: IFFALSE 10758
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10670: LD_ADDR_VAR 0 5
10674: PUSH
10675: LD_VAR 0 5
10679: PPUSH
10680: LD_INT 1
10682: PPUSH
10683: LD_VAR 0 4
10687: PPUSH
10688: CALL_OW 265
10692: PUSH
10693: LD_VAR 0 4
10697: PPUSH
10698: CALL_OW 262
10702: PUSH
10703: LD_VAR 0 4
10707: PPUSH
10708: CALL_OW 263
10712: PUSH
10713: LD_VAR 0 4
10717: PPUSH
10718: CALL_OW 264
10722: PUSH
10723: LD_VAR 0 4
10727: PPUSH
10728: CALL_OW 261
10732: PUSH
10733: LD_VAR 0 4
10737: PPUSH
10738: CALL_OW 256
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: PPUSH
10751: CALL_OW 2
10755: ST_TO_ADDR
// end ;
10756: GO 10667
10758: POP
10759: POP
// SaveVariable ( tmp , ident ) ;
10760: LD_VAR 0 5
10764: PPUSH
10765: LD_VAR 0 2
10769: PPUSH
10770: CALL_OW 39
// end ; end_of_file
10774: LD_VAR 0 3
10778: RET
// export function PrepareHeroes ; var plive ; begin
10779: LD_INT 0
10781: PPUSH
10782: PPUSH
// uc_side = 1 ;
10783: LD_ADDR_OWVAR 20
10787: PUSH
10788: LD_INT 1
10790: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10791: LD_ADDR_EXP 1
10795: PUSH
10796: LD_STRING 01_JMM
10798: PPUSH
10799: CALL_OW 34
10803: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10804: LD_ADDR_VAR 0 2
10808: PUSH
10809: LD_STRING 01_JMMLifePoints_1
10811: PPUSH
10812: LD_INT 1000
10814: PPUSH
10815: CALL_OW 30
10819: ST_TO_ADDR
// if plive < 250 then
10820: LD_VAR 0 2
10824: PUSH
10825: LD_INT 250
10827: LESS
10828: IFFALSE 10838
// plive := 300 ;
10830: LD_ADDR_VAR 0 2
10834: PUSH
10835: LD_INT 300
10837: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10838: LD_EXP 1
10842: PPUSH
10843: LD_VAR 0 2
10847: PPUSH
10848: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10852: LD_ADDR_EXP 9
10856: PUSH
10857: LD_STRING Powell
10859: PPUSH
10860: CALL_OW 25
10864: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10865: LD_ADDR_EXP 2
10869: PUSH
10870: LD_STRING 01_Bobby
10872: PPUSH
10873: CALL_OW 34
10877: ST_TO_ADDR
// if Bobby then
10878: LD_EXP 2
10882: IFFALSE 10932
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10884: LD_ADDR_VAR 0 2
10888: PUSH
10889: LD_STRING 01_BobbyLifePoints_1
10891: PPUSH
10892: LD_INT 1000
10894: PPUSH
10895: CALL_OW 30
10899: ST_TO_ADDR
// if plive < 250 then
10900: LD_VAR 0 2
10904: PUSH
10905: LD_INT 250
10907: LESS
10908: IFFALSE 10918
// plive := 300 ;
10910: LD_ADDR_VAR 0 2
10914: PUSH
10915: LD_INT 300
10917: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10918: LD_EXP 2
10922: PPUSH
10923: LD_VAR 0 2
10927: PPUSH
10928: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10932: LD_ADDR_EXP 3
10936: PUSH
10937: LD_STRING 01_Cyrus
10939: PPUSH
10940: CALL_OW 34
10944: ST_TO_ADDR
// if Cyrus then
10945: LD_EXP 3
10949: IFFALSE 10999
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10951: LD_ADDR_VAR 0 2
10955: PUSH
10956: LD_STRING 01_CyrusLifePoints_1
10958: PPUSH
10959: LD_INT 1000
10961: PPUSH
10962: CALL_OW 30
10966: ST_TO_ADDR
// if plive < 250 then
10967: LD_VAR 0 2
10971: PUSH
10972: LD_INT 250
10974: LESS
10975: IFFALSE 10985
// plive := 300 ;
10977: LD_ADDR_VAR 0 2
10981: PUSH
10982: LD_INT 300
10984: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10985: LD_EXP 3
10989: PPUSH
10990: LD_VAR 0 2
10994: PPUSH
10995: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
10999: LD_ADDR_EXP 5
11003: PUSH
11004: LD_STRING Khatam
11006: PPUSH
11007: CALL_OW 25
11011: ST_TO_ADDR
// uc_side = 4 ;
11012: LD_ADDR_OWVAR 20
11016: PUSH
11017: LD_INT 4
11019: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11020: LD_ADDR_EXP 4
11024: PUSH
11025: LD_STRING Lisa
11027: PPUSH
11028: CALL_OW 25
11032: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11033: LD_EXP 1
11037: PPUSH
11038: LD_INT 3
11040: PPUSH
11041: LD_INT 0
11043: PPUSH
11044: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11048: LD_EXP 2
11052: PPUSH
11053: LD_INT 3
11055: PPUSH
11056: LD_INT 0
11058: PPUSH
11059: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11063: LD_EXP 3
11067: PPUSH
11068: LD_INT 3
11070: PPUSH
11071: LD_INT 0
11073: PPUSH
11074: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11078: LD_EXP 4
11082: PPUSH
11083: LD_INT 5
11085: PPUSH
11086: LD_INT 0
11088: PPUSH
11089: CALL_OW 49
// ComCrawl ( Lisa ) ;
11093: LD_EXP 4
11097: PPUSH
11098: CALL_OW 137
// end ;
11102: LD_VAR 0 1
11106: RET
// export function PrepareLisSquad ; var i , un ; begin
11107: LD_INT 0
11109: PPUSH
11110: PPUSH
11111: PPUSH
// uc_side = 4 ;
11112: LD_ADDR_OWVAR 20
11116: PUSH
11117: LD_INT 4
11119: ST_TO_ADDR
// uc_nation = 1 ;
11120: LD_ADDR_OWVAR 21
11124: PUSH
11125: LD_INT 1
11127: ST_TO_ADDR
// hc_class := 2 ;
11128: LD_ADDR_OWVAR 28
11132: PUSH
11133: LD_INT 2
11135: ST_TO_ADDR
// hc_sex := sex_male ;
11136: LD_ADDR_OWVAR 27
11140: PUSH
11141: LD_INT 1
11143: ST_TO_ADDR
// hc_gallery :=  ;
11144: LD_ADDR_OWVAR 33
11148: PUSH
11149: LD_STRING 
11151: ST_TO_ADDR
// hc_name :=  ;
11152: LD_ADDR_OWVAR 26
11156: PUSH
11157: LD_STRING 
11159: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11160: LD_ADDR_OWVAR 30
11164: PUSH
11165: LD_INT 0
11167: PUSH
11168: LD_INT 1
11170: PUSH
11171: LD_INT 0
11173: PUSH
11174: LD_INT 0
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11183: LD_ADDR_OWVAR 31
11187: PUSH
11188: LD_INT 1
11190: PUSH
11191: LD_INT 2
11193: PUSH
11194: LD_INT 0
11196: PUSH
11197: LD_INT 0
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: ST_TO_ADDR
// un := CreateHuman ;
11206: LD_ADDR_VAR 0 3
11210: PUSH
11211: CALL_OW 44
11215: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11216: LD_VAR 0 3
11220: PPUSH
11221: LD_INT 6
11223: PPUSH
11224: LD_INT 0
11226: PPUSH
11227: CALL_OW 49
// hc_sex := sex_female ;
11231: LD_ADDR_OWVAR 27
11235: PUSH
11236: LD_INT 2
11238: ST_TO_ADDR
// hc_gallery :=  ;
11239: LD_ADDR_OWVAR 33
11243: PUSH
11244: LD_STRING 
11246: ST_TO_ADDR
// hc_name :=  ;
11247: LD_ADDR_OWVAR 26
11251: PUSH
11252: LD_STRING 
11254: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11255: LD_ADDR_OWVAR 30
11259: PUSH
11260: LD_INT 0
11262: PUSH
11263: LD_INT 0
11265: PUSH
11266: LD_INT 0
11268: PUSH
11269: LD_INT 1
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11278: LD_ADDR_OWVAR 31
11282: PUSH
11283: LD_INT 0
11285: PUSH
11286: LD_INT 1
11288: PUSH
11289: LD_INT 0
11291: PUSH
11292: LD_INT 1
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: ST_TO_ADDR
// un := CreateHuman ;
11301: LD_ADDR_VAR 0 3
11305: PUSH
11306: CALL_OW 44
11310: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11311: LD_VAR 0 3
11315: PPUSH
11316: LD_INT 6
11318: PPUSH
11319: LD_INT 0
11321: PPUSH
11322: CALL_OW 49
// if not Bobby and not Cyrus then
11326: LD_EXP 2
11330: NOT
11331: PUSH
11332: LD_EXP 3
11336: NOT
11337: AND
11338: IFFALSE 11443
// begin hc_class := 1 ;
11340: LD_ADDR_OWVAR 28
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// hc_sex := sex_male ;
11348: LD_ADDR_OWVAR 27
11352: PUSH
11353: LD_INT 1
11355: ST_TO_ADDR
// hc_gallery :=  ;
11356: LD_ADDR_OWVAR 33
11360: PUSH
11361: LD_STRING 
11363: ST_TO_ADDR
// hc_name :=  ;
11364: LD_ADDR_OWVAR 26
11368: PUSH
11369: LD_STRING 
11371: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11372: LD_ADDR_OWVAR 30
11376: PUSH
11377: LD_INT 2
11379: PUSH
11380: LD_INT 3
11382: PUSH
11383: LD_INT 1
11385: PUSH
11386: LD_INT 0
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11395: LD_ADDR_OWVAR 31
11399: PUSH
11400: LD_INT 2
11402: PUSH
11403: LD_INT 3
11405: PUSH
11406: LD_INT 1
11408: PUSH
11409: LD_INT 0
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: ST_TO_ADDR
// un := CreateHuman ;
11418: LD_ADDR_VAR 0 3
11422: PUSH
11423: CALL_OW 44
11427: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11428: LD_VAR 0 3
11432: PPUSH
11433: LD_INT 31
11435: PPUSH
11436: LD_INT 0
11438: PPUSH
11439: CALL_OW 49
// end ; InitHc ;
11443: CALL_OW 19
// end ;
11447: LD_VAR 0 1
11451: RET
// export function PrepareOtherAmericans ; begin
11452: LD_INT 0
11454: PPUSH
// uc_side = 4 ;
11455: LD_ADDR_OWVAR 20
11459: PUSH
11460: LD_INT 4
11462: ST_TO_ADDR
// uc_nation = 1 ;
11463: LD_ADDR_OWVAR 21
11467: PUSH
11468: LD_INT 1
11470: ST_TO_ADDR
// hc_gallery =  ;
11471: LD_ADDR_OWVAR 33
11475: PUSH
11476: LD_STRING 
11478: ST_TO_ADDR
// hc_name = Tom Garvin ;
11479: LD_ADDR_OWVAR 26
11483: PUSH
11484: LD_STRING Tom Garvin
11486: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11487: LD_INT 1
11489: PPUSH
11490: LD_INT 1
11492: PPUSH
11493: LD_INT 1
11495: PPUSH
11496: LD_INT 2
11498: PPUSH
11499: CALL_OW 12
11503: PPUSH
11504: CALL_OW 380
// Brian = CreateHuman ;
11508: LD_ADDR_EXP 6
11512: PUSH
11513: CALL_OW 44
11517: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11518: LD_EXP 6
11522: PPUSH
11523: LD_INT 10
11525: PPUSH
11526: LD_INT 0
11528: PPUSH
11529: CALL_OW 49
// hc_name = Jerry White ;
11533: LD_ADDR_OWVAR 26
11537: PUSH
11538: LD_STRING Jerry White
11540: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11541: LD_INT 1
11543: PPUSH
11544: LD_INT 3
11546: PPUSH
11547: LD_INT 1
11549: PPUSH
11550: LD_INT 2
11552: PPUSH
11553: CALL_OW 12
11557: PPUSH
11558: CALL_OW 380
// Jerry = CreateHuman ;
11562: LD_ADDR_EXP 7
11566: PUSH
11567: CALL_OW 44
11571: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11572: LD_EXP 7
11576: PPUSH
11577: LD_INT 10
11579: PPUSH
11580: LD_INT 0
11582: PPUSH
11583: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11587: LD_EXP 6
11591: PUSH
11592: LD_EXP 7
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PPUSH
11601: CALL_OW 140
// end ;
11605: LD_VAR 0 1
11609: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11610: LD_INT 0
11612: PPUSH
11613: PPUSH
11614: PPUSH
// for i = 1 to 6 do
11615: LD_ADDR_VAR 0 2
11619: PUSH
11620: DOUBLE
11621: LD_INT 1
11623: DEC
11624: ST_TO_ADDR
11625: LD_INT 6
11627: PUSH
11628: FOR_TO
11629: IFFALSE 11723
// begin uc_side = 4 ;
11631: LD_ADDR_OWVAR 20
11635: PUSH
11636: LD_INT 4
11638: ST_TO_ADDR
// uc_nation = 1 ;
11639: LD_ADDR_OWVAR 21
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// hc_gallery =  ;
11647: LD_ADDR_OWVAR 33
11651: PUSH
11652: LD_STRING 
11654: ST_TO_ADDR
// hc_name =  ;
11655: LD_ADDR_OWVAR 26
11659: PUSH
11660: LD_STRING 
11662: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11663: LD_INT 0
11665: PPUSH
11666: LD_INT 1
11668: PPUSH
11669: LD_INT 4
11671: PPUSH
11672: CALL_OW 12
11676: PPUSH
11677: LD_INT 1
11679: PPUSH
11680: CALL_OW 380
// un = CreateHuman ;
11684: LD_ADDR_VAR 0 3
11688: PUSH
11689: CALL_OW 44
11693: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11694: LD_VAR 0 3
11698: PPUSH
11699: LD_INT 16
11701: PPUSH
11702: LD_INT 0
11704: PPUSH
11705: CALL_OW 49
// SetLives ( un , 1 ) ;
11709: LD_VAR 0 3
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: CALL_OW 234
// end ;
11721: GO 11628
11723: POP
11724: POP
// DyingSold = CreateHuman ;
11725: LD_ADDR_EXP 34
11729: PUSH
11730: CALL_OW 44
11734: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11735: LD_EXP 34
11739: PPUSH
11740: LD_INT 16
11742: PPUSH
11743: LD_INT 0
11745: PPUSH
11746: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11750: LD_EXP 34
11754: PPUSH
11755: LD_INT 250
11757: PPUSH
11758: CALL_OW 234
// end ; end_of_file
11762: LD_VAR 0 1
11766: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11767: LD_INT 0
11769: PPUSH
11770: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11771: LD_ADDR_VAR 0 2
11775: PUSH
11776: LD_INT 22
11778: PUSH
11779: LD_INT 1
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PUSH
11786: LD_INT 23
11788: PUSH
11789: LD_INT 1
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 25
11798: PUSH
11799: LD_INT 2
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: LD_INT 50
11808: PUSH
11809: EMPTY
11810: LIST
11811: PUSH
11812: LD_INT 56
11814: PUSH
11815: EMPTY
11816: LIST
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: PPUSH
11825: CALL_OW 69
11829: PUSH
11830: LD_EXP 1
11834: PUSH
11835: EMPTY
11836: LIST
11837: DIFF
11838: ST_TO_ADDR
// uc_side = 6 ;
11839: LD_ADDR_OWVAR 20
11843: PUSH
11844: LD_INT 6
11846: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11847: LD_ADDR_EXP 8
11851: PUSH
11852: LD_STRING Mikhail
11854: PPUSH
11855: CALL_OW 25
11859: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
11860: LD_EXP 8
11864: PPUSH
11865: LD_VAR 0 2
11869: PUSH
11870: LD_INT 1
11872: ARRAY
11873: PPUSH
11874: CALL_OW 250
11878: PPUSH
11879: LD_VAR 0 2
11883: PUSH
11884: LD_INT 1
11886: ARRAY
11887: PPUSH
11888: CALL_OW 251
11892: PPUSH
11893: LD_INT 3
11895: PPUSH
11896: LD_INT 1
11898: PPUSH
11899: CALL_OW 50
// end ;
11903: LD_VAR 0 1
11907: RET
// export function PrepareRussianCommander ; begin
11908: LD_INT 0
11910: PPUSH
// uc_side = 3 ;
11911: LD_ADDR_OWVAR 20
11915: PUSH
11916: LD_INT 3
11918: ST_TO_ADDR
// uc_nation = 3 ;
11919: LD_ADDR_OWVAR 21
11923: PUSH
11924: LD_INT 3
11926: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11927: LD_ADDR_EXP 19
11931: PUSH
11932: LD_STRING Natasza
11934: PPUSH
11935: CALL_OW 25
11939: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11940: LD_EXP 19
11944: PPUSH
11945: LD_INT 24
11947: PPUSH
11948: LD_INT 0
11950: PPUSH
11951: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11955: LD_EXP 19
11959: PPUSH
11960: LD_INT 56
11962: PPUSH
11963: LD_INT 16
11965: PPUSH
11966: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11970: LD_ADDR_EXP 24
11974: PUSH
11975: LD_EXP 24
11979: PUSH
11980: LD_EXP 19
11984: ADD
11985: ST_TO_ADDR
// end ;
11986: LD_VAR 0 1
11990: RET
// export function PrepareSouthBase ; var i , un ; begin
11991: LD_INT 0
11993: PPUSH
11994: PPUSH
11995: PPUSH
// for i = 1 to 2 do
11996: LD_ADDR_VAR 0 2
12000: PUSH
12001: DOUBLE
12002: LD_INT 1
12004: DEC
12005: ST_TO_ADDR
12006: LD_INT 2
12008: PUSH
12009: FOR_TO
12010: IFFALSE 12119
// begin uc_side = 3 ;
12012: LD_ADDR_OWVAR 20
12016: PUSH
12017: LD_INT 3
12019: ST_TO_ADDR
// uc_nation = 3 ;
12020: LD_ADDR_OWVAR 21
12024: PUSH
12025: LD_INT 3
12027: ST_TO_ADDR
// hc_gallery =  ;
12028: LD_ADDR_OWVAR 33
12032: PUSH
12033: LD_STRING 
12035: ST_TO_ADDR
// hc_name =  ;
12036: LD_ADDR_OWVAR 26
12040: PUSH
12041: LD_STRING 
12043: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12044: LD_INT 1
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: LD_EXP 13
12054: PPUSH
12055: LD_EXP 14
12059: PPUSH
12060: CALL_OW 12
12064: PPUSH
12065: CALL_OW 380
// hc_importance = 0 ;
12069: LD_ADDR_OWVAR 32
12073: PUSH
12074: LD_INT 0
12076: ST_TO_ADDR
// un = CreateHuman ;
12077: LD_ADDR_VAR 0 3
12081: PUSH
12082: CALL_OW 44
12086: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12087: LD_VAR 0 3
12091: PPUSH
12092: LD_INT 11
12094: PPUSH
12095: LD_INT 0
12097: PPUSH
12098: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12102: LD_VAR 0 3
12106: PPUSH
12107: LD_INT 111
12109: PPUSH
12110: LD_INT 38
12112: PPUSH
12113: CALL_OW 118
// end ;
12117: GO 12009
12119: POP
12120: POP
// for i = 1 to Difficulty do
12121: LD_ADDR_VAR 0 2
12125: PUSH
12126: DOUBLE
12127: LD_INT 1
12129: DEC
12130: ST_TO_ADDR
12131: LD_OWVAR 67
12135: PUSH
12136: FOR_TO
12137: IFFALSE 12220
// begin uc_side = 3 ;
12139: LD_ADDR_OWVAR 20
12143: PUSH
12144: LD_INT 3
12146: ST_TO_ADDR
// uc_nation = 3 ;
12147: LD_ADDR_OWVAR 21
12151: PUSH
12152: LD_INT 3
12154: ST_TO_ADDR
// hc_gallery =  ;
12155: LD_ADDR_OWVAR 33
12159: PUSH
12160: LD_STRING 
12162: ST_TO_ADDR
// hc_name =  ;
12163: LD_ADDR_OWVAR 26
12167: PUSH
12168: LD_STRING 
12170: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12171: LD_INT 0
12173: PPUSH
12174: LD_INT 3
12176: PPUSH
12177: LD_EXP 13
12181: PPUSH
12182: LD_EXP 14
12186: PPUSH
12187: CALL_OW 12
12191: PPUSH
12192: CALL_OW 380
// un = CreateHuman ;
12196: LD_ADDR_VAR 0 3
12200: PUSH
12201: CALL_OW 44
12205: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12206: LD_VAR 0 3
12210: PPUSH
12211: LD_INT 10
12213: PPUSH
12214: CALL_OW 52
// end ;
12218: GO 12136
12220: POP
12221: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12222: LD_INT 3
12224: PPUSH
12225: LD_INT 3
12227: PPUSH
12228: LD_INT 33
12230: PPUSH
12231: LD_EXP 13
12235: PPUSH
12236: LD_EXP 14
12240: PPUSH
12241: CALL_OW 12
12245: PPUSH
12246: LD_INT 1
12248: PPUSH
12249: LD_INT 1
12251: PUSH
12252: LD_INT 1
12254: PPUSH
12255: LD_INT 2
12257: PPUSH
12258: CALL_OW 12
12262: PUSH
12263: LD_INT 1
12265: PPUSH
12266: LD_INT 2
12268: PPUSH
12269: CALL_OW 12
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: LD_OWVAR 67
12283: ARRAY
12284: PPUSH
12285: CALL 8690 0 6
// for i in UnitsInside ( arm2 ) do
12289: LD_ADDR_VAR 0 2
12293: PUSH
12294: LD_INT 33
12296: PPUSH
12297: CALL_OW 313
12301: PUSH
12302: FOR_IN
12303: IFFALSE 12323
// southBaseDefenders = southBaseDefenders ^ i ;
12305: LD_ADDR_EXP 25
12309: PUSH
12310: LD_EXP 25
12314: PUSH
12315: LD_VAR 0 2
12319: ADD
12320: ST_TO_ADDR
12321: GO 12302
12323: POP
12324: POP
// end ;
12325: LD_VAR 0 1
12329: RET
// export function PrepareNorthBase ; var i , un ; begin
12330: LD_INT 0
12332: PPUSH
12333: PPUSH
12334: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12335: LD_ADDR_VAR 0 2
12339: PUSH
12340: DOUBLE
12341: LD_INT 1
12343: DEC
12344: ST_TO_ADDR
12345: LD_INT 1
12347: PPUSH
12348: LD_INT 2
12350: PPUSH
12351: CALL_OW 12
12355: PUSH
12356: LD_INT 2
12358: PPUSH
12359: LD_INT 3
12361: PPUSH
12362: CALL_OW 12
12366: PUSH
12367: LD_INT 3
12369: PPUSH
12370: LD_INT 4
12372: PPUSH
12373: CALL_OW 12
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: PUSH
12383: LD_OWVAR 67
12387: ARRAY
12388: PUSH
12389: FOR_TO
12390: IFFALSE 12476
// begin uc_side = 3 ;
12392: LD_ADDR_OWVAR 20
12396: PUSH
12397: LD_INT 3
12399: ST_TO_ADDR
// uc_nation = 3 ;
12400: LD_ADDR_OWVAR 21
12404: PUSH
12405: LD_INT 3
12407: ST_TO_ADDR
// hc_gallery =  ;
12408: LD_ADDR_OWVAR 33
12412: PUSH
12413: LD_STRING 
12415: ST_TO_ADDR
// hc_name =  ;
12416: LD_ADDR_OWVAR 26
12420: PUSH
12421: LD_STRING 
12423: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12424: LD_INT 0
12426: PPUSH
12427: LD_INT 1
12429: PPUSH
12430: LD_EXP 13
12434: PPUSH
12435: LD_EXP 14
12439: PPUSH
12440: CALL_OW 12
12444: PPUSH
12445: CALL_OW 380
// un = CreateHuman ;
12449: LD_ADDR_VAR 0 3
12453: PUSH
12454: CALL_OW 44
12458: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12459: LD_VAR 0 3
12463: PPUSH
12464: LD_INT 14
12466: PPUSH
12467: LD_INT 0
12469: PPUSH
12470: CALL_OW 49
// end ;
12474: GO 12389
12476: POP
12477: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12478: LD_INT 3
12480: PPUSH
12481: LD_INT 3
12483: PPUSH
12484: LD_INT 2
12486: PPUSH
12487: LD_EXP 13
12491: PPUSH
12492: LD_EXP 14
12496: PPUSH
12497: CALL_OW 12
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: LD_INT 1
12507: PPUSH
12508: LD_INT 2
12510: PPUSH
12511: CALL_OW 12
12515: PUSH
12516: LD_INT 1
12518: PPUSH
12519: LD_INT 3
12521: PPUSH
12522: CALL_OW 12
12526: PUSH
12527: LD_INT 1
12529: PPUSH
12530: LD_INT 3
12532: PPUSH
12533: CALL_OW 12
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: PUSH
12543: LD_OWVAR 67
12547: ARRAY
12548: PPUSH
12549: CALL 8690 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12553: LD_INT 3
12555: PPUSH
12556: LD_INT 3
12558: PPUSH
12559: LD_INT 23
12561: PPUSH
12562: LD_EXP 13
12566: PPUSH
12567: LD_EXP 14
12571: PPUSH
12572: CALL_OW 12
12576: PPUSH
12577: LD_INT 4
12579: PPUSH
12580: LD_INT 0
12582: PUSH
12583: LD_INT 1
12585: PUSH
12586: LD_INT 2
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: PUSH
12594: LD_OWVAR 67
12598: ARRAY
12599: PPUSH
12600: CALL 8690 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12604: LD_INT 3
12606: PPUSH
12607: LD_INT 3
12609: PPUSH
12610: LD_INT 1
12612: PPUSH
12613: LD_EXP 13
12617: PPUSH
12618: LD_EXP 14
12622: PPUSH
12623: CALL_OW 12
12627: PPUSH
12628: LD_INT 2
12630: PPUSH
12631: LD_INT 1
12633: PUSH
12634: LD_INT 2
12636: PUSH
12637: LD_INT 2
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: LIST
12644: PUSH
12645: LD_OWVAR 67
12649: ARRAY
12650: PPUSH
12651: CALL 8690 0 6
// for i in UnitsInside ( arm1 ) do
12655: LD_ADDR_VAR 0 2
12659: PUSH
12660: LD_INT 2
12662: PPUSH
12663: CALL_OW 313
12667: PUSH
12668: FOR_IN
12669: IFFALSE 12689
// northBaseDefenders = northBaseDefenders ^ i ;
12671: LD_ADDR_EXP 24
12675: PUSH
12676: LD_EXP 24
12680: PUSH
12681: LD_VAR 0 2
12685: ADD
12686: ST_TO_ADDR
12687: GO 12668
12689: POP
12690: POP
// end ;
12691: LD_VAR 0 1
12695: RET
// export function PrepareOtherRussians ; var i , un ; begin
12696: LD_INT 0
12698: PPUSH
12699: PPUSH
12700: PPUSH
// for i = 1 to 2 do
12701: LD_ADDR_VAR 0 2
12705: PUSH
12706: DOUBLE
12707: LD_INT 1
12709: DEC
12710: ST_TO_ADDR
12711: LD_INT 2
12713: PUSH
12714: FOR_TO
12715: IFFALSE 12816
// begin uc_side = 3 ;
12717: LD_ADDR_OWVAR 20
12721: PUSH
12722: LD_INT 3
12724: ST_TO_ADDR
// uc_nation = 3 ;
12725: LD_ADDR_OWVAR 21
12729: PUSH
12730: LD_INT 3
12732: ST_TO_ADDR
// hc_gallery =  ;
12733: LD_ADDR_OWVAR 33
12737: PUSH
12738: LD_STRING 
12740: ST_TO_ADDR
// hc_name =  ;
12741: LD_ADDR_OWVAR 26
12745: PUSH
12746: LD_STRING 
12748: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12749: LD_INT 0
12751: PPUSH
12752: LD_INT 1
12754: PPUSH
12755: LD_EXP 13
12759: PPUSH
12760: LD_EXP 14
12764: PPUSH
12765: CALL_OW 12
12769: PPUSH
12770: CALL_OW 380
// un = CreateHuman ;
12774: LD_ADDR_VAR 0 3
12778: PUSH
12779: CALL_OW 44
12783: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12784: LD_VAR 0 3
12788: PPUSH
12789: LD_INT 9
12791: PPUSH
12792: LD_INT 0
12794: PPUSH
12795: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12799: LD_VAR 0 3
12803: PPUSH
12804: LD_INT 80
12806: PPUSH
12807: LD_INT 73
12809: PPUSH
12810: CALL_OW 118
// end ;
12814: GO 12714
12816: POP
12817: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12818: LD_ADDR_VAR 0 2
12822: PUSH
12823: LD_INT 22
12825: PUSH
12826: LD_INT 3
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 30
12835: PUSH
12836: LD_INT 31
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PPUSH
12847: CALL_OW 69
12851: PUSH
12852: FOR_IN
12853: IFFALSE 12881
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12855: LD_EXP 13
12859: PPUSH
12860: LD_EXP 14
12864: PPUSH
12865: CALL_OW 12
12869: PPUSH
12870: LD_VAR 0 2
12874: PPUSH
12875: CALL 8800 0 2
12879: GO 12852
12881: POP
12882: POP
// end ;
12883: LD_VAR 0 1
12887: RET
// export function PrepareCargoBays ; begin
12888: LD_INT 0
12890: PPUSH
// uc_side = 3 ;
12891: LD_ADDR_OWVAR 20
12895: PUSH
12896: LD_INT 3
12898: ST_TO_ADDR
// uc_nation = 3 ;
12899: LD_ADDR_OWVAR 21
12903: PUSH
12904: LD_INT 3
12906: ST_TO_ADDR
// vc_engine = 1 ;
12907: LD_ADDR_OWVAR 39
12911: PUSH
12912: LD_INT 1
12914: ST_TO_ADDR
// vc_control = 1 ;
12915: LD_ADDR_OWVAR 38
12919: PUSH
12920: LD_INT 1
12922: ST_TO_ADDR
// vc_weapon = 51 ;
12923: LD_ADDR_OWVAR 40
12927: PUSH
12928: LD_INT 51
12930: ST_TO_ADDR
// vc_chassis = 22 ;
12931: LD_ADDR_OWVAR 37
12935: PUSH
12936: LD_INT 22
12938: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12939: LD_ADDR_EXP 15
12943: PUSH
12944: CALL_OW 45
12948: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12949: LD_ADDR_EXP 16
12953: PUSH
12954: CALL_OW 45
12958: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12959: LD_EXP 15
12963: PPUSH
12964: LD_INT 13
12966: PPUSH
12967: LD_INT 0
12969: PPUSH
12970: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12974: LD_EXP 16
12978: PPUSH
12979: LD_INT 13
12981: PPUSH
12982: LD_INT 0
12984: PPUSH
12985: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12989: LD_EXP 15
12993: PPUSH
12994: LD_INT 2
12996: PPUSH
12997: LD_INT 70
12999: PUSH
13000: LD_INT 50
13002: PUSH
13003: LD_INT 30
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: LIST
13010: PUSH
13011: LD_OWVAR 67
13015: ARRAY
13016: PPUSH
13017: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
13021: LD_EXP 16
13025: PPUSH
13026: LD_INT 2
13028: PPUSH
13029: LD_INT 70
13031: PUSH
13032: LD_INT 50
13034: PUSH
13035: LD_INT 30
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: LIST
13042: PUSH
13043: LD_OWVAR 67
13047: ARRAY
13048: PPUSH
13049: CALL_OW 291
// hc_gallery =  ;
13053: LD_ADDR_OWVAR 33
13057: PUSH
13058: LD_STRING 
13060: ST_TO_ADDR
// hc_name =  ;
13061: LD_ADDR_OWVAR 26
13065: PUSH
13066: LD_STRING 
13068: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13069: LD_INT 1
13071: PPUSH
13072: LD_INT 3
13074: PPUSH
13075: LD_INT 1
13077: PPUSH
13078: LD_INT 2
13080: PPUSH
13081: CALL_OW 12
13085: PPUSH
13086: CALL_OW 380
// driver1 = CreateHuman ;
13090: LD_ADDR_EXP 17
13094: PUSH
13095: CALL_OW 44
13099: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13100: LD_EXP 17
13104: PPUSH
13105: LD_EXP 15
13109: PPUSH
13110: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13114: LD_ADDR_OWVAR 26
13118: PUSH
13119: LD_STRING Nikolai Andreyev
13121: ST_TO_ADDR
// driver2 = CreateHuman ;
13122: LD_ADDR_EXP 18
13126: PUSH
13127: CALL_OW 44
13131: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13132: LD_EXP 18
13136: PPUSH
13137: LD_EXP 16
13141: PPUSH
13142: CALL_OW 52
// end ;
13146: LD_VAR 0 1
13150: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
13151: LD_INT 0
13153: PPUSH
13154: PPUSH
13155: PPUSH
13156: PPUSH
13157: PPUSH
13158: PPUSH
13159: PPUSH
// uc_side = 3 ;
13160: LD_ADDR_OWVAR 20
13164: PUSH
13165: LD_INT 3
13167: ST_TO_ADDR
// uc_nation = 3 ;
13168: LD_ADDR_OWVAR 21
13172: PUSH
13173: LD_INT 3
13175: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13176: LD_ADDR_VAR 0 4
13180: PUSH
13181: DOUBLE
13182: LD_INT 1
13184: DEC
13185: ST_TO_ADDR
13186: LD_VAR 0 1
13190: PUSH
13191: LD_INT 1
13193: PPUSH
13194: LD_INT 3
13196: PPUSH
13197: CALL_OW 12
13201: PLUS
13202: PUSH
13203: FOR_TO
13204: IFFALSE 13381
// begin vc_engine = 1 ;
13206: LD_ADDR_OWVAR 39
13210: PUSH
13211: LD_INT 1
13213: ST_TO_ADDR
// vc_control = 1 ;
13214: LD_ADDR_OWVAR 38
13218: PUSH
13219: LD_INT 1
13221: ST_TO_ADDR
// vc_weapon = 42 ;
13222: LD_ADDR_OWVAR 40
13226: PUSH
13227: LD_INT 42
13229: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13230: LD_ADDR_OWVAR 37
13234: PUSH
13235: LD_INT 21
13237: PUSH
13238: LD_INT 22
13240: PUSH
13241: LD_INT 22
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: PUSH
13249: LD_OWVAR 67
13253: ARRAY
13254: ST_TO_ADDR
// veh = CreateVehicle ;
13255: LD_ADDR_VAR 0 5
13259: PUSH
13260: CALL_OW 45
13264: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13265: LD_VAR 0 5
13269: PPUSH
13270: LD_VAR 0 2
13274: PPUSH
13275: LD_INT 0
13277: PPUSH
13278: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13282: LD_ADDR_EXP 26
13286: PUSH
13287: LD_EXP 26
13291: PUSH
13292: LD_VAR 0 5
13296: ADD
13297: ST_TO_ADDR
// hc_gallery =  ;
13298: LD_ADDR_OWVAR 33
13302: PUSH
13303: LD_STRING 
13305: ST_TO_ADDR
// hc_name =  ;
13306: LD_ADDR_OWVAR 26
13310: PUSH
13311: LD_STRING 
13313: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13314: LD_INT 0
13316: PPUSH
13317: LD_INT 3
13319: PPUSH
13320: LD_EXP 13
13324: PPUSH
13325: LD_EXP 14
13329: PPUSH
13330: CALL_OW 12
13334: PPUSH
13335: CALL_OW 380
// un = CreateHuman ;
13339: LD_ADDR_VAR 0 6
13343: PUSH
13344: CALL_OW 44
13348: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13349: LD_VAR 0 6
13353: PPUSH
13354: LD_VAR 0 5
13358: PPUSH
13359: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13363: LD_ADDR_EXP 26
13367: PUSH
13368: LD_EXP 26
13372: PUSH
13373: LD_VAR 0 6
13377: ADD
13378: ST_TO_ADDR
// end ;
13379: GO 13203
13381: POP
13382: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13383: LD_INT 0
13385: PPUSH
13386: LD_INT 2
13388: PPUSH
13389: LD_EXP 13
13393: PPUSH
13394: LD_EXP 14
13398: PPUSH
13399: CALL_OW 12
13403: PPUSH
13404: CALL_OW 380
// un = CreateHuman ;
13408: LD_ADDR_VAR 0 6
13412: PUSH
13413: CALL_OW 44
13417: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13418: LD_ADDR_VAR 0 4
13422: PUSH
13423: DOUBLE
13424: LD_INT 1
13426: DEC
13427: ST_TO_ADDR
13428: LD_VAR 0 1
13432: PUSH
13433: LD_INT 2
13435: PUSH
13436: LD_INT 2
13438: MUL
13439: PLUS
13440: PUSH
13441: FOR_TO
13442: IFFALSE 13530
// begin hc_gallery =  ;
13444: LD_ADDR_OWVAR 33
13448: PUSH
13449: LD_STRING 
13451: ST_TO_ADDR
// hc_name =  ;
13452: LD_ADDR_OWVAR 26
13456: PUSH
13457: LD_STRING 
13459: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13460: LD_INT 1
13462: PPUSH
13463: LD_INT 1
13465: PPUSH
13466: LD_EXP 13
13470: PPUSH
13471: LD_EXP 14
13475: PPUSH
13476: CALL_OW 12
13480: PPUSH
13481: CALL_OW 380
// un = CreateHuman ;
13485: LD_ADDR_VAR 0 6
13489: PUSH
13490: CALL_OW 44
13494: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13495: LD_VAR 0 6
13499: PPUSH
13500: LD_VAR 0 2
13504: PPUSH
13505: LD_INT 0
13507: PPUSH
13508: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13512: LD_ADDR_EXP 26
13516: PUSH
13517: LD_EXP 26
13521: PUSH
13522: LD_VAR 0 6
13526: ADD
13527: ST_TO_ADDR
// end ;
13528: GO 13441
13530: POP
13531: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13532: LD_ADDR_VAR 0 7
13536: PUSH
13537: LD_INT 26
13539: PPUSH
13540: LD_INT 22
13542: PUSH
13543: LD_INT 3
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 21
13552: PUSH
13553: LD_INT 1
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 26
13562: PUSH
13563: LD_INT 1
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: LIST
13574: PPUSH
13575: CALL_OW 70
13579: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13580: LD_VAR 0 7
13584: PUSH
13585: LD_INT 1
13587: ARRAY
13588: PPUSH
13589: LD_STRING D9-Rus3-1
13591: PPUSH
13592: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13596: LD_VAR 0 7
13600: PUSH
13601: LD_INT 2
13603: ARRAY
13604: PPUSH
13605: LD_STRING D9-Russ-1
13607: PPUSH
13608: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13612: LD_INT 35
13614: PPUSH
13615: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13619: LD_ADDR_VAR 0 4
13623: PUSH
13624: LD_INT 26
13626: PPUSH
13627: LD_INT 22
13629: PUSH
13630: LD_INT 3
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: PPUSH
13640: CALL_OW 70
13644: PUSH
13645: FOR_IN
13646: IFFALSE 13818
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13648: LD_ADDR_VAR 0 8
13652: PUSH
13653: LD_INT 22
13655: PUSH
13656: LD_INT 1
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PPUSH
13663: CALL_OW 69
13667: PPUSH
13668: LD_VAR 0 4
13672: PPUSH
13673: CALL_OW 74
13677: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13678: LD_ADDR_VAR 0 9
13682: PUSH
13683: LD_INT 22
13685: PUSH
13686: LD_INT 1
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: LD_INT 2
13695: PUSH
13696: LD_INT 59
13698: PUSH
13699: EMPTY
13700: LIST
13701: PUSH
13702: LD_INT 21
13704: PUSH
13705: LD_INT 1
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 21
13714: PUSH
13715: LD_INT 2
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: EMPTY
13733: LIST
13734: PPUSH
13735: CALL_OW 69
13739: PPUSH
13740: LD_VAR 0 4
13744: PPUSH
13745: CALL_OW 74
13749: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13750: LD_VAR 0 4
13754: PPUSH
13755: LD_VAR 0 8
13759: PPUSH
13760: CALL_OW 296
13764: PUSH
13765: LD_INT 8
13767: PLUS
13768: PUSH
13769: LD_VAR 0 4
13773: PPUSH
13774: LD_VAR 0 9
13778: PPUSH
13779: CALL_OW 296
13783: LESS
13784: IFFALSE 13802
// begin ComAttackUnit ( i , target1 ) ;
13786: LD_VAR 0 4
13790: PPUSH
13791: LD_VAR 0 8
13795: PPUSH
13796: CALL_OW 115
// end else
13800: GO 13816
// begin ComAttackUnit ( i , target2 ) ;
13802: LD_VAR 0 4
13806: PPUSH
13807: LD_VAR 0 9
13811: PPUSH
13812: CALL_OW 115
// end ; end ;
13816: GO 13645
13818: POP
13819: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13820: LD_INT 26
13822: PPUSH
13823: LD_INT 22
13825: PUSH
13826: LD_INT 3
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PUSH
13833: LD_INT 2
13835: PUSH
13836: LD_INT 21
13838: PUSH
13839: LD_INT 1
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 21
13848: PUSH
13849: LD_INT 2
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 59
13858: PUSH
13859: EMPTY
13860: LIST
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PPUSH
13872: CALL_OW 70
13876: PUSH
13877: LD_INT 0
13879: EQUAL
13880: IFFALSE 13612
// end ; end_of_file
13882: LD_VAR 0 3
13886: RET
// every 0 0$1 do
13887: GO 13889
13889: DISABLE
// begin enable ;
13890: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13891: LD_INT 3
13893: PPUSH
13894: LD_INT 1
13896: PPUSH
13897: LD_INT 22
13899: PPUSH
13900: CALL 8936 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13904: LD_INT 3
13906: PPUSH
13907: LD_INT 20
13909: PPUSH
13910: LD_INT 22
13912: PPUSH
13913: LD_INT 23
13915: PPUSH
13916: CALL 9182 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13920: LD_INT 3
13922: PPUSH
13923: LD_INT 21
13925: PPUSH
13926: LD_INT 23
13928: PPUSH
13929: CALL 9459 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13933: LD_INT 22
13935: PPUSH
13936: LD_INT 1
13938: PPUSH
13939: LD_EXP 24
13943: PPUSH
13944: LD_INT 2
13946: PPUSH
13947: LD_INT 3
13949: PPUSH
13950: CALL 9931 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13954: LD_INT 23
13956: PPUSH
13957: LD_INT 1
13959: PPUSH
13960: LD_EXP 25
13964: PPUSH
13965: LD_INT 33
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: CALL 9931 0 5
// end ; end_of_file
13975: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13976: LD_VAR 0 1
13980: PPUSH
13981: CALL_OW 255
13985: PUSH
13986: LD_INT 1
13988: EQUAL
13989: PUSH
13990: LD_VAR 0 1
13994: PPUSH
13995: CALL_OW 247
13999: PUSH
14000: LD_INT 1
14002: EQUAL
14003: AND
14004: IFFALSE 14020
// deadsCounter = deadsCounter + 1 ;
14006: LD_ADDR_EXP 31
14010: PUSH
14011: LD_EXP 31
14015: PUSH
14016: LD_INT 1
14018: PLUS
14019: ST_TO_ADDR
// end ;
14020: PPOPN 1
14022: END
// on Command ( comandid ) do var i , j , tmp ;
14023: LD_INT 0
14025: PPUSH
14026: PPUSH
14027: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14028: LD_ADDR_VAR 0 2
14032: PUSH
14033: LD_INT 22
14035: PUSH
14036: LD_INT 1
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 21
14045: PUSH
14046: LD_INT 2
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PPUSH
14057: CALL_OW 69
14061: PUSH
14062: FOR_IN
14063: IFFALSE 14188
// begin if GetTaskList ( i ) > 0 then
14065: LD_VAR 0 2
14069: PPUSH
14070: CALL_OW 437
14074: PUSH
14075: LD_INT 0
14077: GREATER
14078: IFFALSE 14186
// begin for j = 1 to GetTaskList ( i ) do
14080: LD_ADDR_VAR 0 3
14084: PUSH
14085: DOUBLE
14086: LD_INT 1
14088: DEC
14089: ST_TO_ADDR
14090: LD_VAR 0 2
14094: PPUSH
14095: CALL_OW 437
14099: PUSH
14100: FOR_TO
14101: IFFALSE 14184
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14103: LD_ADDR_VAR 0 4
14107: PUSH
14108: LD_VAR 0 2
14112: PPUSH
14113: CALL_OW 437
14117: PUSH
14118: LD_VAR 0 3
14122: ARRAY
14123: PUSH
14124: LD_INT 4
14126: ARRAY
14127: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14128: LD_VAR 0 4
14132: PPUSH
14133: CALL_OW 255
14137: PUSH
14138: LD_INT 3
14140: EQUAL
14141: PUSH
14142: LD_VAR 0 4
14146: PPUSH
14147: CALL_OW 247
14151: PUSH
14152: LD_INT 2
14154: EQUAL
14155: AND
14156: PUSH
14157: LD_VAR 0 4
14161: PPUSH
14162: CALL_OW 264
14166: PUSH
14167: LD_INT 51
14169: EQUAL
14170: AND
14171: IFFALSE 14182
// ComStop ( i ) ;
14173: LD_VAR 0 2
14177: PPUSH
14178: CALL_OW 141
// end ;
14182: GO 14100
14184: POP
14185: POP
// end ; end ;
14186: GO 14062
14188: POP
14189: POP
// end ; end_of_file
14190: PPOPN 4
14192: END
// every 0 0$1 trigger IsDead ( JMM ) do
14193: LD_EXP 1
14197: PPUSH
14198: CALL_OW 301
14202: IFFALSE 14214
14204: GO 14206
14206: DISABLE
// YouLost ( JMM ) ;
14207: LD_STRING JMM
14209: PPUSH
14210: CALL_OW 104
14214: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
14215: LD_INT 1
14217: PPUSH
14218: CALL_OW 301
14222: PUSH
14223: LD_INT 10
14225: PPUSH
14226: CALL_OW 301
14230: OR
14231: IFFALSE 14243
14233: GO 14235
14235: DISABLE
// YouLost ( DepotDestroyed ) ;
14236: LD_STRING DepotDestroyed
14238: PPUSH
14239: CALL_OW 104
14243: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14244: LD_INT 22
14246: PUSH
14247: LD_INT 1
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 21
14256: PUSH
14257: LD_INT 1
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: LD_INT 25
14266: PUSH
14267: LD_INT 2
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: PPUSH
14279: CALL_OW 69
14283: PUSH
14284: LD_INT 0
14286: EQUAL
14287: PUSH
14288: LD_INT 22
14290: PUSH
14291: LD_INT 4
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 21
14300: PUSH
14301: LD_INT 1
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 25
14310: PUSH
14311: LD_INT 2
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 69
14327: PUSH
14328: LD_INT 0
14330: EQUAL
14331: AND
14332: PUSH
14333: LD_INT 1
14335: PPUSH
14336: CALL_OW 255
14340: PUSH
14341: LD_INT 3
14343: EQUAL
14344: AND
14345: PUSH
14346: LD_INT 10
14348: PPUSH
14349: CALL_OW 255
14353: PUSH
14354: LD_INT 3
14356: EQUAL
14357: AND
14358: IFFALSE 14370
14360: GO 14362
14362: DISABLE
// YouLost ( Engineer ) ;
14363: LD_STRING Engineer
14365: PPUSH
14366: CALL_OW 104
14370: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14371: LD_INT 1
14373: PPUSH
14374: CALL_OW 255
14378: PUSH
14379: LD_INT 3
14381: EQUAL
14382: PUSH
14383: LD_EXP 27
14387: PUSH
14388: LD_INT 1
14390: EQUAL
14391: AND
14392: IFFALSE 14404
14394: GO 14396
14396: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14397: LD_STRING DepotCaptured
14399: PPUSH
14400: CALL_OW 104
14404: END
// export function PrepareTigers ; var i , un ; begin
14405: LD_INT 0
14407: PPUSH
14408: PPUSH
14409: PPUSH
// for i = 1 to Difficulty do
14410: LD_ADDR_VAR 0 2
14414: PUSH
14415: DOUBLE
14416: LD_INT 1
14418: DEC
14419: ST_TO_ADDR
14420: LD_OWVAR 67
14424: PUSH
14425: FOR_TO
14426: IFFALSE 14561
// begin hc_sex = sex_male ;
14428: LD_ADDR_OWVAR 27
14432: PUSH
14433: LD_INT 1
14435: ST_TO_ADDR
// uc_side = 0 ;
14436: LD_ADDR_OWVAR 20
14440: PUSH
14441: LD_INT 0
14443: ST_TO_ADDR
// uc_nation = nation_nature ;
14444: LD_ADDR_OWVAR 21
14448: PUSH
14449: LD_INT 0
14451: ST_TO_ADDR
// hc_class = class_tiger ;
14452: LD_ADDR_OWVAR 28
14456: PUSH
14457: LD_INT 14
14459: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14460: LD_ADDR_OWVAR 31
14464: PUSH
14465: LD_EXP 14
14469: PUSH
14470: LD_INT 0
14472: PUSH
14473: LD_INT 0
14475: PUSH
14476: LD_INT 0
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14485: LD_ADDR_OWVAR 35
14489: PUSH
14490: LD_INT 30
14492: PPUSH
14493: LD_INT 40
14495: PPUSH
14496: CALL_OW 12
14500: PUSH
14501: LD_INT 40
14503: PPUSH
14504: LD_INT 50
14506: PPUSH
14507: CALL_OW 12
14511: PUSH
14512: LD_INT 50
14514: PPUSH
14515: LD_INT 60
14517: PPUSH
14518: CALL_OW 12
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: LIST
14527: PUSH
14528: LD_OWVAR 67
14532: ARRAY
14533: ST_TO_ADDR
// un = CreateHuman ;
14534: LD_ADDR_VAR 0 3
14538: PUSH
14539: CALL_OW 44
14543: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14544: LD_VAR 0 3
14548: PPUSH
14549: LD_INT 27
14551: PPUSH
14552: LD_INT 0
14554: PPUSH
14555: CALL_OW 49
// end ;
14559: GO 14425
14561: POP
14562: POP
// end ; end_of_file
14563: LD_VAR 0 1
14567: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14568: LD_INT 1
14570: PPUSH
14571: CALL_OW 255
14575: PUSH
14576: LD_INT 1
14578: EQUAL
14579: PUSH
14580: LD_INT 10
14582: PPUSH
14583: CALL_OW 255
14587: PUSH
14588: LD_INT 1
14590: EQUAL
14591: AND
14592: PUSH
14593: LD_EXP 20
14597: PUSH
14598: LD_INT 1
14600: EQUAL
14601: AND
14602: PUSH
14603: LD_INT 22
14605: PUSH
14606: LD_INT 3
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PUSH
14613: LD_INT 21
14615: PUSH
14616: LD_INT 2
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 34
14625: PUSH
14626: LD_INT 51
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: LD_INT 3
14635: PUSH
14636: LD_INT 58
14638: PUSH
14639: EMPTY
14640: LIST
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: PPUSH
14652: CALL_OW 69
14656: PUSH
14657: LD_INT 0
14659: EQUAL
14660: AND
14661: IFFALSE 14752
14663: GO 14665
14665: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14666: LD_INT 9450
14668: PUSH
14669: LD_INT 8400
14671: PUSH
14672: LD_INT 6300
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: LIST
14679: PUSH
14680: LD_OWVAR 67
14684: ARRAY
14685: PPUSH
14686: CALL_OW 67
// if cargoEscape = 1 then
14690: LD_EXP 20
14694: PUSH
14695: LD_INT 1
14697: EQUAL
14698: IFFALSE 14752
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14700: LD_EXP 9
14704: PPUSH
14705: LD_STRING D6-Pow-1
14707: PPUSH
14708: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14712: LD_EXP 1
14716: PPUSH
14717: LD_STRING D6-JMM-1
14719: PPUSH
14720: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14724: LD_EXP 9
14728: PPUSH
14729: LD_STRING D6-Pow-2
14731: PPUSH
14732: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14736: LD_EXP 1
14740: PPUSH
14741: LD_STRING D6-JMM-2
14743: PPUSH
14744: CALL_OW 88
// FinishMission ;
14748: CALL 14960 0 0
// end ; end ;
14752: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14753: LD_INT 1
14755: PPUSH
14756: CALL_OW 255
14760: PUSH
14761: LD_INT 1
14763: EQUAL
14764: PUSH
14765: LD_INT 10
14767: PPUSH
14768: CALL_OW 255
14772: PUSH
14773: LD_INT 1
14775: EQUAL
14776: AND
14777: PUSH
14778: LD_EXP 20
14782: PUSH
14783: LD_INT 1
14785: GREATER
14786: AND
14787: IFFALSE 14854
14789: GO 14791
14791: DISABLE
14792: LD_INT 0
14794: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14795: LD_INT 11550
14797: PUSH
14798: LD_INT 10500
14800: PUSH
14801: LD_INT 9450
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: LIST
14808: PUSH
14809: LD_OWVAR 67
14813: ARRAY
14814: PPUSH
14815: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14819: LD_INT 1
14821: PUSH
14822: LD_INT 2
14824: PUSH
14825: LD_INT 3
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: LIST
14832: PUSH
14833: LD_OWVAR 67
14837: ARRAY
14838: PPUSH
14839: LD_INT 13
14841: PPUSH
14842: CALL 13151 0 2
// lastBattle = 1 ;
14846: LD_ADDR_EXP 27
14850: PUSH
14851: LD_INT 1
14853: ST_TO_ADDR
// end ;
14854: PPOPN 1
14856: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14857: LD_EXP 27
14861: PUSH
14862: LD_INT 1
14864: EQUAL
14865: PUSH
14866: LD_INT 26
14868: PPUSH
14869: LD_INT 22
14871: PUSH
14872: LD_INT 3
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 21
14881: PUSH
14882: LD_INT 1
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PPUSH
14893: CALL_OW 70
14897: PUSH
14898: LD_INT 0
14900: EQUAL
14901: AND
14902: IFFALSE 14959
14904: GO 14906
14906: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14907: LD_EXP 9
14911: PPUSH
14912: LD_STRING D6-Pow-1
14914: PPUSH
14915: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14919: LD_EXP 1
14923: PPUSH
14924: LD_STRING D6-JMM-1
14926: PPUSH
14927: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14931: LD_EXP 9
14935: PPUSH
14936: LD_STRING D6-Pow-2
14938: PPUSH
14939: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14943: LD_EXP 1
14947: PPUSH
14948: LD_STRING D6-JMM-2
14950: PPUSH
14951: CALL_OW 88
// FinishMission ;
14955: CALL 14960 0 0
// end ;
14959: END
// export function FinishMission ; var tmp ; begin
14960: LD_INT 0
14962: PPUSH
14963: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14964: LD_ADDR_VAR 0 2
14968: PUSH
14969: LD_INT 22
14971: PUSH
14972: LD_INT 1
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 21
14981: PUSH
14982: LD_INT 2
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 24
14991: PUSH
14992: LD_INT 251
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: LIST
15003: PPUSH
15004: CALL_OW 69
15008: ST_TO_ADDR
// if tmp then
15009: LD_VAR 0 2
15013: IFFALSE 15027
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15015: LD_VAR 0 2
15019: PPUSH
15020: LD_STRING 02_tanks_1
15022: PPUSH
15023: CALL 10636 0 2
// if mikhailStatus = 1 then
15027: LD_EXP 21
15031: PUSH
15032: LD_INT 1
15034: EQUAL
15035: IFFALSE 15049
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15037: LD_EXP 21
15041: PPUSH
15042: LD_STRING 02_mikhailStatus_1
15044: PPUSH
15045: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15049: LD_INT 1
15051: PPUSH
15052: CALL_OW 274
15056: PPUSH
15057: LD_INT 1
15059: PPUSH
15060: CALL_OW 275
15064: PPUSH
15065: LD_STRING 02_resources_4
15067: PPUSH
15068: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15072: LD_INT 1
15074: PPUSH
15075: CALL_OW 274
15079: PPUSH
15080: LD_INT 1
15082: PPUSH
15083: CALL_OW 275
15087: PUSH
15088: LD_INT 200
15090: GREATEREQUAL
15091: IFFALSE 15105
// begin AddMedal ( Cans , 1 ) ;
15093: LD_STRING Cans
15095: PPUSH
15096: LD_INT 1
15098: PPUSH
15099: CALL_OW 101
// end else
15103: GO 15116
// begin AddMedal ( Cans , - 1 ) ;
15105: LD_STRING Cans
15107: PPUSH
15108: LD_INT 1
15110: NEG
15111: PPUSH
15112: CALL_OW 101
// end ; if deadsCounter < 2 then
15116: LD_EXP 31
15120: PUSH
15121: LD_INT 2
15123: LESS
15124: IFFALSE 15138
// begin AddMedal ( Deaths , 1 ) ;
15126: LD_STRING Deaths
15128: PPUSH
15129: LD_INT 1
15131: PPUSH
15132: CALL_OW 101
// end else
15136: GO 15149
// begin AddMedal ( Deaths , - 1 ) ;
15138: LD_STRING Deaths
15140: PPUSH
15141: LD_INT 1
15143: NEG
15144: PPUSH
15145: CALL_OW 101
// end ; if mikhailStatus = 0 then
15149: LD_EXP 21
15153: PUSH
15154: LD_INT 0
15156: EQUAL
15157: IFFALSE 15170
// AddMedal ( Prisoner , - 1 ) ;
15159: LD_STRING Prisoner
15161: PPUSH
15162: LD_INT 1
15164: NEG
15165: PPUSH
15166: CALL_OW 101
// if mikhailStatus = 1 then
15170: LD_EXP 21
15174: PUSH
15175: LD_INT 1
15177: EQUAL
15178: IFFALSE 15190
// AddMedal ( Prisoner , 1 ) ;
15180: LD_STRING Prisoner
15182: PPUSH
15183: LD_INT 1
15185: PPUSH
15186: CALL_OW 101
// if mikhailStatus = 2 then
15190: LD_EXP 21
15194: PUSH
15195: LD_INT 2
15197: EQUAL
15198: IFFALSE 15210
// AddMedal ( Prisoner , 2 ) ;
15200: LD_STRING Prisoner
15202: PPUSH
15203: LD_INT 2
15205: PPUSH
15206: CALL_OW 101
// if mikhailStatus = 3 then
15210: LD_EXP 21
15214: PUSH
15215: LD_INT 3
15217: EQUAL
15218: IFFALSE 15231
// AddMedal ( Prisoner , - 2 ) ;
15220: LD_STRING Prisoner
15222: PPUSH
15223: LD_INT 2
15225: NEG
15226: PPUSH
15227: CALL_OW 101
// GiveMedals ( MAIN ) ;
15231: LD_STRING MAIN
15233: PPUSH
15234: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15238: LD_INT 22
15240: PUSH
15241: LD_INT 1
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 23
15250: PUSH
15251: LD_INT 1
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PUSH
15258: LD_INT 21
15260: PUSH
15261: LD_INT 1
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: LIST
15272: PPUSH
15273: CALL_OW 69
15277: PPUSH
15278: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15282: LD_EXP 1
15286: PPUSH
15287: LD_EXP 33
15291: PUSH
15292: LD_STRING JMM
15294: STR
15295: PPUSH
15296: CALL_OW 38
// if IsOK ( Bobby ) then
15300: LD_EXP 2
15304: PPUSH
15305: CALL_OW 302
15309: IFFALSE 15329
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15311: LD_EXP 2
15315: PPUSH
15316: LD_EXP 33
15320: PUSH
15321: LD_STRING Bobby
15323: STR
15324: PPUSH
15325: CALL_OW 38
// if IsOK ( Cyrus ) then
15329: LD_EXP 3
15333: PPUSH
15334: CALL_OW 302
15338: IFFALSE 15358
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15340: LD_EXP 3
15344: PPUSH
15345: LD_EXP 33
15349: PUSH
15350: LD_STRING Cyrus
15352: STR
15353: PPUSH
15354: CALL_OW 38
// if IsOK ( Lisa ) then
15358: LD_EXP 4
15362: PPUSH
15363: CALL_OW 302
15367: IFFALSE 15387
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15369: LD_EXP 4
15373: PPUSH
15374: LD_EXP 33
15378: PUSH
15379: LD_STRING Lisa
15381: STR
15382: PPUSH
15383: CALL_OW 38
// if IsOK ( Khatam ) then
15387: LD_EXP 5
15391: PPUSH
15392: CALL_OW 302
15396: IFFALSE 15416
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15398: LD_EXP 5
15402: PPUSH
15403: LD_EXP 33
15407: PUSH
15408: LD_STRING Khatam
15410: STR
15411: PPUSH
15412: CALL_OW 38
// if IsOK ( Brian ) then
15416: LD_EXP 6
15420: PPUSH
15421: CALL_OW 302
15425: IFFALSE 15445
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15427: LD_EXP 6
15431: PPUSH
15432: LD_EXP 33
15436: PUSH
15437: LD_STRING Brian
15439: STR
15440: PPUSH
15441: CALL_OW 38
// if IsOk ( Jerry ) then
15445: LD_EXP 7
15449: PPUSH
15450: CALL_OW 302
15454: IFFALSE 15474
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15456: LD_EXP 7
15460: PPUSH
15461: LD_EXP 33
15465: PUSH
15466: LD_STRING Jerry
15468: STR
15469: PPUSH
15470: CALL_OW 38
// if mikhailStatus = 1 then
15474: LD_EXP 21
15478: PUSH
15479: LD_INT 1
15481: EQUAL
15482: IFFALSE 15502
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15484: LD_EXP 8
15488: PPUSH
15489: LD_EXP 33
15493: PUSH
15494: LD_STRING Mikhail
15496: STR
15497: PPUSH
15498: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15502: LD_INT 50
15504: PUSH
15505: EMPTY
15506: LIST
15507: PUSH
15508: LD_INT 22
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 21
15520: PUSH
15521: LD_INT 1
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: LIST
15532: PPUSH
15533: CALL_OW 69
15537: PUSH
15538: LD_EXP 1
15542: PUSH
15543: LD_EXP 2
15547: PUSH
15548: LD_EXP 3
15552: PUSH
15553: LD_EXP 4
15557: PUSH
15558: LD_EXP 5
15562: PUSH
15563: LD_EXP 6
15567: PUSH
15568: LD_EXP 7
15572: PUSH
15573: LD_EXP 8
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: DIFF
15588: PPUSH
15589: LD_STRING 02_other_survivors
15591: PPUSH
15592: CALL_OW 38
// YouWin ;
15596: CALL_OW 103
// end ;
15600: LD_VAR 0 1
15604: RET
