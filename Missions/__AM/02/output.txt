// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// PrepareDifficulty ;
 161: CALL 10446 0 0
// PrepareRussianCommander ;
 165: CALL 11805 0 0
// PrepareSouthBase ;
 169: CALL 11888 0 0
// PrepareNorthBase ;
 173: CALL 12227 0 0
// PrepareOtherRussians ;
 177: CALL 12593 0 0
// PrepareHeroes ;
 181: CALL 10761 0 0
// PrepareLisSquad ;
 185: CALL 11004 0 0
// PrepareOtherAmericans ;
 189: CALL 11349 0 0
// end ; end_of_file
 193: END
// every 1 do var tmp ;
 194: GO 196
 196: DISABLE
 197: LD_INT 0
 199: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 209: LD_ADDR_VAR 0 1
 213: PUSH
 214: LD_INT 22
 216: PUSH
 217: LD_INT 4
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 21
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PPUSH
 238: CALL_OW 69
 242: PUSH
 243: LD_EXP 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: DIFF
 251: ST_TO_ADDR
// if Cyrus and Bobby then
 252: LD_EXP 3
 256: PUSH
 257: LD_EXP 2
 261: AND
 262: IFFALSE 592
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 264: LD_EXP 3
 268: PPUSH
 269: LD_INT 43
 271: PPUSH
 272: LD_INT 72
 274: PPUSH
 275: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_INT 44
 286: PPUSH
 287: LD_INT 70
 289: PPUSH
 290: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 294: LD_EXP 1
 298: PPUSH
 299: LD_INT 46
 301: PPUSH
 302: LD_INT 73
 304: PPUSH
 305: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 309: LD_EXP 3
 313: PPUSH
 314: LD_STRING D1a-Cyrus-1
 316: PPUSH
 317: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_STRING D1a-JMM-1
 328: PPUSH
 329: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 333: LD_EXP 3
 337: PPUSH
 338: LD_INT 37
 340: PPUSH
 341: LD_INT 66
 343: PPUSH
 344: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 348: LD_EXP 2
 352: PPUSH
 353: LD_INT 41
 355: PPUSH
 356: LD_INT 67
 358: PPUSH
 359: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 363: LD_EXP 1
 367: PPUSH
 368: LD_INT 38
 370: PPUSH
 371: LD_INT 64
 373: PPUSH
 374: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 378: LD_EXP 2
 382: PPUSH
 383: LD_STRING D1a-Bobby-2
 385: PPUSH
 386: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 390: LD_EXP 3
 394: PPUSH
 395: LD_INT 35
 397: PPUSH
 398: LD_INT 62
 400: PPUSH
 401: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 405: LD_EXP 2
 409: PPUSH
 410: LD_INT 32
 412: PPUSH
 413: LD_INT 60
 415: PPUSH
 416: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 420: LD_EXP 1
 424: PPUSH
 425: LD_INT 35
 427: PPUSH
 428: LD_INT 60
 430: PPUSH
 431: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 435: LD_EXP 1
 439: PPUSH
 440: LD_STRING D1a-JMM-2
 442: PPUSH
 443: CALL_OW 88
// ComWalk ( Lisa ) ;
 447: LD_EXP 4
 451: PPUSH
 452: CALL_OW 138
// wait ( 0 0$1 ) ;
 456: LD_INT 35
 458: PPUSH
 459: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 463: LD_EXP 4
 467: PPUSH
 468: LD_EXP 1
 472: PPUSH
 473: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 477: LD_EXP 1
 481: PUSH
 482: LD_EXP 3
 486: PUSH
 487: LD_EXP 2
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PPUSH
 497: LD_EXP 4
 501: PPUSH
 502: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 506: LD_VAR 0 1
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: LD_INT 33
 517: PPUSH
 518: LD_INT 55
 520: PPUSH
 521: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 525: LD_VAR 0 1
 529: PUSH
 530: LD_INT 2
 532: ARRAY
 533: PPUSH
 534: LD_INT 30
 536: PPUSH
 537: LD_INT 54
 539: PPUSH
 540: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 544: LD_VAR 0 1
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: LD_EXP 1
 557: PPUSH
 558: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 562: LD_VAR 0 1
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 1
 575: PPUSH
 576: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 580: LD_EXP 4
 584: PPUSH
 585: LD_STRING D1a-Lisa-2
 587: PPUSH
 588: CALL_OW 88
// end ; if Cyrus and not Bobby then
 592: LD_EXP 3
 596: PUSH
 597: LD_EXP 2
 601: NOT
 602: AND
 603: IFFALSE 808
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 605: LD_EXP 3
 609: PPUSH
 610: LD_INT 43
 612: PPUSH
 613: LD_INT 72
 615: PPUSH
 616: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 46
 627: PPUSH
 628: LD_INT 73
 630: PPUSH
 631: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 635: LD_EXP 3
 639: PPUSH
 640: LD_STRING D1a-Cyrus-1
 642: PPUSH
 643: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 647: LD_EXP 1
 651: PPUSH
 652: LD_STRING D1a-JMM-1
 654: PPUSH
 655: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 659: LD_EXP 3
 663: PPUSH
 664: LD_INT 37
 666: PPUSH
 667: LD_INT 66
 669: PPUSH
 670: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 674: LD_EXP 1
 678: PPUSH
 679: LD_INT 38
 681: PPUSH
 682: LD_INT 64
 684: PPUSH
 685: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 689: LD_EXP 3
 693: PPUSH
 694: LD_STRING D1a-Cyrus-2
 696: PPUSH
 697: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 701: LD_EXP 3
 705: PPUSH
 706: LD_INT 35
 708: PPUSH
 709: LD_INT 62
 711: PPUSH
 712: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 716: LD_EXP 1
 720: PPUSH
 721: LD_INT 35
 723: PPUSH
 724: LD_INT 60
 726: PPUSH
 727: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 731: LD_EXP 1
 735: PPUSH
 736: LD_STRING D1a-JMM-2
 738: PPUSH
 739: CALL_OW 88
// ComWalk ( Lisa ) ;
 743: LD_EXP 4
 747: PPUSH
 748: CALL_OW 138
// wait ( 0 0$1 ) ;
 752: LD_INT 35
 754: PPUSH
 755: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 759: LD_EXP 4
 763: PPUSH
 764: LD_EXP 1
 768: PPUSH
 769: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 773: LD_EXP 4
 777: PPUSH
 778: LD_STRING D1a-Lisa-2
 780: PPUSH
 781: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 785: LD_EXP 1
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PPUSH
 799: LD_EXP 4
 803: PPUSH
 804: CALL_OW 119
// end ; if not Cyrus and Bobby then
 808: LD_EXP 3
 812: NOT
 813: PUSH
 814: LD_EXP 2
 818: AND
 819: IFFALSE 1098
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 821: LD_EXP 2
 825: PPUSH
 826: LD_INT 44
 828: PPUSH
 829: LD_INT 70
 831: PPUSH
 832: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 836: LD_EXP 1
 840: PPUSH
 841: LD_INT 46
 843: PPUSH
 844: LD_INT 73
 846: PPUSH
 847: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 851: LD_EXP 2
 855: PPUSH
 856: LD_STRING D1a-Bobby-1
 858: PPUSH
 859: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 863: LD_EXP 1
 867: PPUSH
 868: LD_STRING D1a-JMM-1
 870: PPUSH
 871: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 875: LD_EXP 2
 879: PPUSH
 880: LD_INT 37
 882: PPUSH
 883: LD_INT 66
 885: PPUSH
 886: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 890: LD_EXP 1
 894: PPUSH
 895: LD_INT 38
 897: PPUSH
 898: LD_INT 64
 900: PPUSH
 901: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 905: LD_EXP 2
 909: PPUSH
 910: LD_STRING D1a-Bobby-2
 912: PPUSH
 913: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 917: LD_EXP 2
 921: PPUSH
 922: LD_INT 35
 924: PPUSH
 925: LD_INT 62
 927: PPUSH
 928: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 932: LD_EXP 1
 936: PPUSH
 937: LD_INT 35
 939: PPUSH
 940: LD_INT 60
 942: PPUSH
 943: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 947: LD_EXP 1
 951: PPUSH
 952: LD_STRING D1a-JMM-2
 954: PPUSH
 955: CALL_OW 88
// ComWalk ( Lisa ) ;
 959: LD_EXP 4
 963: PPUSH
 964: CALL_OW 138
// wait ( 0 0$1 ) ;
 968: LD_INT 35
 970: PPUSH
 971: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 975: LD_EXP 4
 979: PPUSH
 980: LD_EXP 1
 984: PPUSH
 985: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 989: LD_EXP 1
 993: PUSH
 994: LD_EXP 3
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PPUSH
1003: LD_EXP 4
1007: PPUSH
1008: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1012: LD_VAR 0 1
1016: PUSH
1017: LD_INT 1
1019: ARRAY
1020: PPUSH
1021: LD_INT 33
1023: PPUSH
1024: LD_INT 55
1026: PPUSH
1027: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1031: LD_VAR 0 1
1035: PUSH
1036: LD_INT 2
1038: ARRAY
1039: PPUSH
1040: LD_INT 30
1042: PPUSH
1043: LD_INT 54
1045: PPUSH
1046: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1050: LD_VAR 0 1
1054: PUSH
1055: LD_INT 1
1057: ARRAY
1058: PPUSH
1059: LD_EXP 1
1063: PPUSH
1064: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1068: LD_VAR 0 1
1072: PUSH
1073: LD_INT 2
1075: ARRAY
1076: PPUSH
1077: LD_EXP 1
1081: PPUSH
1082: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1086: LD_EXP 4
1090: PPUSH
1091: LD_STRING D1a-Lisa-2
1093: PPUSH
1094: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1098: LD_EXP 3
1102: NOT
1103: PUSH
1104: LD_EXP 2
1108: NOT
1109: AND
1110: IFFALSE 1324
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1112: LD_EXP 1
1116: PPUSH
1117: LD_INT 37
1119: PPUSH
1120: LD_INT 66
1122: PPUSH
1123: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1127: LD_EXP 1
1131: PPUSH
1132: LD_STRING D1b-JMM-1
1134: PPUSH
1135: CALL_OW 88
// ComCrawl ( JMM ) ;
1139: LD_EXP 1
1143: PPUSH
1144: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1148: LD_EXP 1
1152: PPUSH
1153: LD_INT 35
1155: PPUSH
1156: LD_INT 60
1158: PPUSH
1159: CALL_OW 171
// wait ( 0 0$8 ) ;
1163: LD_INT 280
1165: PPUSH
1166: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_STRING D1b-JMM-1a
1177: PPUSH
1178: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1182: LD_EXP 1
1186: PUSH
1187: LD_EXP 4
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PPUSH
1196: CALL_OW 138
// wait ( 0 0$1 ) ;
1200: LD_INT 35
1202: PPUSH
1203: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1207: LD_EXP 4
1211: PPUSH
1212: LD_EXP 1
1216: PPUSH
1217: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1221: LD_EXP 1
1225: PUSH
1226: EMPTY
1227: LIST
1228: PPUSH
1229: LD_EXP 4
1233: PPUSH
1234: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1238: LD_VAR 0 1
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: LD_INT 33
1249: PPUSH
1250: LD_INT 55
1252: PPUSH
1253: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1257: LD_VAR 0 1
1261: PUSH
1262: LD_INT 2
1264: ARRAY
1265: PPUSH
1266: LD_INT 30
1268: PPUSH
1269: LD_INT 54
1271: PPUSH
1272: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1276: LD_VAR 0 1
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_EXP 1
1289: PPUSH
1290: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1294: LD_VAR 0 1
1298: PUSH
1299: LD_INT 2
1301: ARRAY
1302: PPUSH
1303: LD_EXP 1
1307: PPUSH
1308: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1312: LD_EXP 4
1316: PPUSH
1317: LD_STRING D1b-Lisa-1
1319: PPUSH
1320: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1324: LD_EXP 1
1328: PPUSH
1329: LD_STRING D1-JMM-1
1331: PPUSH
1332: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1336: LD_EXP 4
1340: PPUSH
1341: LD_STRING D1-Lisa-1
1343: PPUSH
1344: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1348: LD_EXP 1
1352: PPUSH
1353: LD_STRING D1-JMM-2
1355: PPUSH
1356: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1360: LD_EXP 9
1364: PPUSH
1365: LD_STRING D1-Pow-2
1367: PPUSH
1368: CALL_OW 94
// if Cyrus then
1372: LD_EXP 3
1376: IFFALSE 1402
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1378: LD_EXP 3
1382: PPUSH
1383: LD_STRING D1-Cyrus-2
1385: PPUSH
1386: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-3
1397: PPUSH
1398: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1402: LD_EXP 9
1406: PPUSH
1407: LD_STRING D1-Pow-3
1409: PPUSH
1410: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1414: LD_EXP 1
1418: PPUSH
1419: LD_STRING D1-JMM-4
1421: PPUSH
1422: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1426: LD_EXP 9
1430: PPUSH
1431: LD_STRING D1-Pow-4
1433: PPUSH
1434: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1438: LD_EXP 9
1442: PPUSH
1443: LD_STRING D1-Pow-4a
1445: PPUSH
1446: CALL_OW 94
// if Cyrus then
1450: LD_EXP 3
1454: IFFALSE 1468
// Say ( Cyrus , D1-Cyrus-4 ) ;
1456: LD_EXP 3
1460: PPUSH
1461: LD_STRING D1-Cyrus-4
1463: PPUSH
1464: CALL_OW 88
// if Bobby then
1468: LD_EXP 2
1472: IFFALSE 1510
// begin Say ( Bobby , D1-Bobby-4 ) ;
1474: LD_EXP 2
1478: PPUSH
1479: LD_STRING D1-Bobby-4
1481: PPUSH
1482: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1486: LD_EXP 4
1490: PPUSH
1491: LD_STRING D1-Lisa-4
1493: PPUSH
1494: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1498: LD_EXP 1
1502: PPUSH
1503: LD_STRING D1-JMM-5
1505: PPUSH
1506: CALL_OW 88
// end ; InGameOff ;
1510: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1514: LD_INT 22
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 69
1528: PUSH
1529: LD_EXP 6
1533: PUSH
1534: LD_EXP 7
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: DIFF
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1551: LD_STRING M1
1553: PPUSH
1554: CALL_OW 337
// SaveForQuickRestart ;
1558: CALL_OW 22
// end ;
1562: PPOPN 1
1564: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1565: LD_INT 7
1567: PPUSH
1568: LD_INT 22
1570: PUSH
1571: LD_INT 1
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 70
1582: PUSH
1583: LD_INT 0
1585: GREATER
1586: IFFALSE 2003
1588: GO 1590
1590: DISABLE
// begin InGameOn ;
1591: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1595: LD_INT 22
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 21
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PPUSH
1619: CALL_OW 69
1623: PPUSH
1624: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1628: LD_INT 24
1630: PPUSH
1631: LD_INT 32
1633: PPUSH
1634: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1638: LD_EXP 5
1642: PPUSH
1643: LD_INT 4
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 4
1660: PPUSH
1661: CALL_OW 336
// wait ( 0 0$1 ) ;
1665: LD_INT 35
1667: PPUSH
1668: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1672: LD_EXP 5
1676: PPUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_INT 38
1682: PPUSH
1683: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1687: LD_EXP 5
1691: PPUSH
1692: LD_EXP 1
1696: PPUSH
1697: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1701: LD_INT 22
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 21
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PPUSH
1725: CALL_OW 69
1729: PUSH
1730: LD_EXP 5
1734: PUSH
1735: EMPTY
1736: LIST
1737: DIFF
1738: PPUSH
1739: LD_EXP 5
1743: PPUSH
1744: CALL_OW 119
// wait ( 0 0$1 ) ;
1748: LD_INT 35
1750: PPUSH
1751: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1755: LD_EXP 5
1759: PPUSH
1760: LD_STRING D2a-Khat-1
1762: PPUSH
1763: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1767: LD_EXP 1
1771: PPUSH
1772: LD_STRING D2a-JMM-1
1774: PPUSH
1775: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1779: LD_EXP 5
1783: PPUSH
1784: LD_STRING D2a-Khat-2
1786: PPUSH
1787: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1791: LD_EXP 1
1795: PPUSH
1796: LD_STRING D2a-JMM-2
1798: PPUSH
1799: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1803: LD_EXP 5
1807: PPUSH
1808: LD_STRING D2a-Khat-3
1810: PPUSH
1811: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1815: LD_EXP 1
1819: PPUSH
1820: LD_STRING D2a-JMM-3
1822: PPUSH
1823: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1827: LD_EXP 5
1831: PPUSH
1832: LD_STRING D2a-Khat-4
1834: PPUSH
1835: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1839: LD_EXP 1
1843: PPUSH
1844: LD_STRING D2a-JMM-4
1846: PPUSH
1847: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1851: LD_EXP 5
1855: PPUSH
1856: LD_STRING D2a-Khat-5
1858: PPUSH
1859: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_STRING D2a-JMM-5
1870: PPUSH
1871: CALL_OW 88
// InGameOff ;
1875: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1879: LD_INT 22
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 21
1891: PUSH
1892: LD_INT 1
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 3
1901: PUSH
1902: LD_INT 24
1904: PUSH
1905: LD_INT 800
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: PUSH
1926: LD_INT 0
1928: GREATER
1929: IFFALSE 2003
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1931: LD_EXP 5
1935: PPUSH
1936: LD_INT 22
1938: PUSH
1939: LD_INT 1
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 21
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 3
1958: PUSH
1959: LD_INT 24
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: PPUSH
1978: CALL_OW 69
1982: PUSH
1983: LD_INT 1
1985: ARRAY
1986: PPUSH
1987: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1991: LD_EXP 5
1995: PPUSH
1996: LD_STRING D2b-Khat-1
1998: PPUSH
1999: CALL_OW 88
// end ; end ;
2003: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
2004: LD_INT 15
2006: PPUSH
2007: LD_INT 22
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PPUSH
2017: CALL_OW 70
2021: PUSH
2022: LD_INT 0
2024: GREATER
2025: IFFALSE 3182
2027: GO 2029
2029: DISABLE
2030: LD_INT 0
2032: PPUSH
2033: PPUSH
2034: PPUSH
2035: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: LD_INT 999
2043: PUSH
2044: LD_INT 999
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2054: LD_ADDR_VAR 0 4
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 1
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PPUSH
2083: CALL_OW 69
2087: PUSH
2088: LD_EXP 1
2092: PUSH
2093: LD_EXP 2
2097: PUSH
2098: LD_EXP 3
2102: PUSH
2103: LD_EXP 4
2107: PUSH
2108: LD_EXP 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: DIFF
2120: ST_TO_ADDR
// PrepareDeadSoldiers ;
2121: CALL 11507 0 0
// spotCorpses = 1 ;
2125: LD_ADDR_EXP 32
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
// InGameOn ;
2133: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2137: LD_INT 23
2139: PPUSH
2140: LD_INT 12
2142: PPUSH
2143: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2147: LD_ADDR_VAR 0 3
2151: PUSH
2152: LD_VAR 0 2
2156: PUSH
2157: LD_INT 1
2159: ARRAY
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2165: LD_ADDR_VAR 0 1
2169: PUSH
2170: LD_INT 22
2172: PUSH
2173: LD_INT 1
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 21
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PPUSH
2194: CALL_OW 69
2198: PUSH
2199: LD_EXP 1
2203: PUSH
2204: LD_EXP 5
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: DIFF
2213: PUSH
2214: FOR_IN
2215: IFFALSE 2266
// if IsOK ( i ) then
2217: LD_VAR 0 1
2221: PPUSH
2222: CALL_OW 302
2226: IFFALSE 2264
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2228: LD_ADDR_VAR 0 2
2232: PUSH
2233: LD_VAR 0 2
2237: PUSH
2238: LD_VAR 0 1
2242: PUSH
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 16
2250: PPUSH
2251: CALL_OW 299
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: ADD
2263: ST_TO_ADDR
2264: GO 2214
2266: POP
2267: POP
// for i = 2 to distanceTab do
2268: LD_ADDR_VAR 0 1
2272: PUSH
2273: DOUBLE
2274: LD_INT 2
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2330
// if distanceTab [ i ] [ 2 ] < min then
2286: LD_VAR 0 2
2290: PUSH
2291: LD_VAR 0 1
2295: ARRAY
2296: PUSH
2297: LD_INT 2
2299: ARRAY
2300: PUSH
2301: LD_VAR 0 3
2305: LESS
2306: IFFALSE 2328
// min = distanceTab [ i ] [ 2 ] ;
2308: LD_ADDR_VAR 0 3
2312: PUSH
2313: LD_VAR 0 2
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: PUSH
2324: LD_INT 2
2326: ARRAY
2327: ST_TO_ADDR
2328: GO 2283
2330: POP
2331: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2332: LD_ADDR_VAR 0 1
2336: PUSH
2337: LD_INT 22
2339: PUSH
2340: LD_INT 1
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 21
2349: PUSH
2350: LD_INT 1
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PPUSH
2361: CALL_OW 69
2365: PUSH
2366: LD_EXP 1
2370: PUSH
2371: EMPTY
2372: LIST
2373: DIFF
2374: PUSH
2375: FOR_IN
2376: IFFALSE 2446
// begin ComMoveToArea ( i , DeadCutscene ) ;
2378: LD_VAR 0 1
2382: PPUSH
2383: LD_INT 28
2385: PPUSH
2386: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2390: LD_EXP 1
2394: PPUSH
2395: LD_INT 30
2397: PPUSH
2398: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2402: LD_VAR 0 1
2406: PPUSH
2407: LD_INT 23
2409: PPUSH
2410: LD_INT 11
2412: PPUSH
2413: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2417: LD_EXP 1
2421: PPUSH
2422: LD_INT 23
2424: PPUSH
2425: LD_INT 11
2427: PPUSH
2428: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2432: LD_EXP 34
2436: PPUSH
2437: LD_INT 250
2439: PPUSH
2440: CALL_OW 234
// end ;
2444: GO 2375
2446: POP
2447: POP
// for i = 2 to distanceTab do
2448: LD_ADDR_VAR 0 1
2452: PUSH
2453: DOUBLE
2454: LD_INT 2
2456: DEC
2457: ST_TO_ADDR
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_TO
2464: IFFALSE 2850
// begin if distanceTab [ i ] [ 2 ] = min then
2466: LD_VAR 0 2
2470: PUSH
2471: LD_VAR 0 1
2475: ARRAY
2476: PUSH
2477: LD_INT 2
2479: ARRAY
2480: PUSH
2481: LD_VAR 0 3
2485: EQUAL
2486: IFFALSE 2848
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2488: LD_VAR 0 2
2492: PUSH
2493: LD_VAR 0 1
2497: ARRAY
2498: PUSH
2499: LD_INT 1
2501: ARRAY
2502: PUSH
2503: LD_EXP 2
2507: EQUAL
2508: IFFALSE 2522
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2510: LD_EXP 2
2514: PPUSH
2515: LD_STRING DCorpses-Bobby-1
2517: PPUSH
2518: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2522: LD_VAR 0 2
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PUSH
2537: LD_EXP 3
2541: EQUAL
2542: IFFALSE 2556
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2544: LD_EXP 3
2548: PPUSH
2549: LD_STRING DCorpses-Cyrus-1
2551: PPUSH
2552: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2556: LD_VAR 0 2
2560: PUSH
2561: LD_VAR 0 1
2565: ARRAY
2566: PUSH
2567: LD_INT 1
2569: ARRAY
2570: PUSH
2571: LD_EXP 4
2575: EQUAL
2576: IFFALSE 2590
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2578: LD_EXP 4
2582: PPUSH
2583: LD_STRING DCorpses-Lisa-1
2585: PPUSH
2586: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2590: LD_VAR 0 2
2594: PUSH
2595: LD_VAR 0 1
2599: ARRAY
2600: PUSH
2601: LD_INT 1
2603: ARRAY
2604: PUSH
2605: LD_VAR 0 4
2609: PUSH
2610: LD_INT 1
2612: ARRAY
2613: EQUAL
2614: PUSH
2615: LD_VAR 0 4
2619: PUSH
2620: LD_INT 1
2622: ARRAY
2623: PPUSH
2624: CALL_OW 258
2628: PUSH
2629: LD_INT 1
2631: EQUAL
2632: AND
2633: IFFALSE 2651
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2635: LD_VAR 0 4
2639: PUSH
2640: LD_INT 1
2642: ARRAY
2643: PPUSH
2644: LD_STRING DCorpses-Sol1-1
2646: PPUSH
2647: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2651: LD_VAR 0 2
2655: PUSH
2656: LD_VAR 0 1
2660: ARRAY
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PUSH
2666: LD_VAR 0 4
2670: PUSH
2671: LD_INT 1
2673: ARRAY
2674: EQUAL
2675: PUSH
2676: LD_VAR 0 4
2680: PUSH
2681: LD_INT 1
2683: ARRAY
2684: PPUSH
2685: CALL_OW 258
2689: PUSH
2690: LD_INT 2
2692: EQUAL
2693: AND
2694: IFFALSE 2712
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2696: LD_VAR 0 4
2700: PUSH
2701: LD_INT 1
2703: ARRAY
2704: PPUSH
2705: LD_STRING DCorpses-FSol1-1
2707: PPUSH
2708: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2712: LD_VAR 0 2
2716: PUSH
2717: LD_VAR 0 1
2721: ARRAY
2722: PUSH
2723: LD_INT 1
2725: ARRAY
2726: PUSH
2727: LD_VAR 0 4
2731: PUSH
2732: LD_INT 2
2734: ARRAY
2735: EQUAL
2736: PUSH
2737: LD_VAR 0 4
2741: PUSH
2742: LD_INT 2
2744: ARRAY
2745: PPUSH
2746: CALL_OW 258
2750: PUSH
2751: LD_INT 1
2753: EQUAL
2754: AND
2755: IFFALSE 2773
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2757: LD_VAR 0 4
2761: PUSH
2762: LD_INT 2
2764: ARRAY
2765: PPUSH
2766: LD_STRING DCorpses-Sol1-1
2768: PPUSH
2769: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2773: LD_VAR 0 2
2777: PUSH
2778: LD_VAR 0 1
2782: ARRAY
2783: PUSH
2784: LD_INT 1
2786: ARRAY
2787: PUSH
2788: LD_VAR 0 4
2792: PUSH
2793: LD_INT 2
2795: ARRAY
2796: EQUAL
2797: PUSH
2798: LD_VAR 0 4
2802: PUSH
2803: LD_INT 2
2805: ARRAY
2806: PPUSH
2807: CALL_OW 258
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: AND
2816: IFFALSE 2834
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2818: LD_VAR 0 4
2822: PUSH
2823: LD_INT 2
2825: ARRAY
2826: PPUSH
2827: LD_STRING DCorpses-FSol1-1
2829: PPUSH
2830: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2834: LD_EXP 34
2838: PPUSH
2839: LD_INT 150
2841: PPUSH
2842: CALL_OW 234
// break ;
2846: GO 2850
// end ; end ;
2848: GO 2463
2850: POP
2851: POP
// repeat wait ( 0 0$1 ) ;
2852: LD_INT 35
2854: PPUSH
2855: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2859: LD_ADDR_VAR 0 1
2863: PUSH
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 21
2876: PUSH
2877: LD_INT 1
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_EXP 1
2897: PUSH
2898: EMPTY
2899: LIST
2900: DIFF
2901: PUSH
2902: FOR_IN
2903: IFFALSE 2973
// begin ComMoveToArea ( i , DeadCutscene ) ;
2905: LD_VAR 0 1
2909: PPUSH
2910: LD_INT 28
2912: PPUSH
2913: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2917: LD_EXP 1
2921: PPUSH
2922: LD_INT 30
2924: PPUSH
2925: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2929: LD_VAR 0 1
2933: PPUSH
2934: LD_INT 23
2936: PPUSH
2937: LD_INT 11
2939: PPUSH
2940: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2944: LD_EXP 1
2948: PPUSH
2949: LD_INT 23
2951: PPUSH
2952: LD_INT 11
2954: PPUSH
2955: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2959: LD_EXP 34
2963: PPUSH
2964: LD_INT 250
2966: PPUSH
2967: CALL_OW 234
// end ;
2971: GO 2902
2973: POP
2974: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2975: LD_EXP 1
2979: PPUSH
2980: LD_INT 30
2982: PPUSH
2983: CALL_OW 308
2987: IFFALSE 2852
// wait ( 0 0$3 ) ;
2989: LD_INT 105
2991: PPUSH
2992: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2996: LD_EXP 1
3000: PPUSH
3001: LD_STRING DCorpses-JMM-1
3003: PPUSH
3004: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3008: LD_EXP 34
3012: PPUSH
3013: LD_INT 100
3015: PPUSH
3016: CALL_OW 234
// if IsOK ( Khatam ) then
3020: LD_EXP 5
3024: PPUSH
3025: CALL_OW 302
3029: IFFALSE 3166
// begin repeat wait ( 0 0$1 ) ;
3031: LD_INT 35
3033: PPUSH
3034: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3038: LD_EXP 5
3042: PPUSH
3043: LD_EXP 34
3047: PPUSH
3048: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3052: LD_EXP 5
3056: PPUSH
3057: LD_EXP 34
3061: PPUSH
3062: CALL_OW 296
3066: PUSH
3067: LD_INT 2
3069: LESS
3070: IFFALSE 3031
// spotCorpses = 0 ;
3072: LD_ADDR_EXP 32
3076: PUSH
3077: LD_INT 0
3079: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3080: LD_EXP 34
3084: PPUSH
3085: LD_INT 10
3087: PPUSH
3088: CALL_OW 234
// wait ( 0 0$3 ) ;
3092: LD_INT 105
3094: PPUSH
3095: CALL_OW 67
// KillUnit ( DyingSold ) ;
3099: LD_EXP 34
3103: PPUSH
3104: CALL_OW 66
// wait ( 0 0$1 ) ;
3108: LD_INT 35
3110: PPUSH
3111: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3115: LD_EXP 1
3119: PUSH
3120: LD_EXP 5
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PPUSH
3129: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3133: LD_EXP 5
3137: PPUSH
3138: LD_EXP 1
3142: PPUSH
3143: CALL_OW 119
// wait ( 0 0$1 ) ;
3147: LD_INT 35
3149: PPUSH
3150: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3154: LD_EXP 5
3158: PPUSH
3159: LD_STRING DCorpses-Khat-1
3161: PPUSH
3162: CALL_OW 88
// end ; InGameOff ;
3166: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3170: LD_EXP 1
3174: PPUSH
3175: LD_STRING DCorpses-JMM-2
3177: PPUSH
3178: CALL_OW 88
// end ;
3182: PPOPN 4
3184: END
// every 0 0$1 trigger spotCorpses = 1 do
3185: LD_EXP 32
3189: PUSH
3190: LD_INT 1
3192: EQUAL
3193: IFFALSE 3211
3195: GO 3197
3197: DISABLE
// begin enable ;
3198: ENABLE
// SetLives ( DyingSold , 10 ) ;
3199: LD_EXP 34
3203: PPUSH
3204: LD_INT 10
3206: PPUSH
3207: CALL_OW 234
// end ;
3211: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 15 ) do var i ;
3212: LD_INT 8
3214: PPUSH
3215: LD_INT 22
3217: PUSH
3218: LD_INT 1
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: CALL_OW 70
3229: PUSH
3230: LD_INT 0
3232: GREATER
3233: PUSH
3234: LD_INT 22
3236: PUSH
3237: LD_INT 1
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PPUSH
3244: CALL_OW 69
3248: PPUSH
3249: LD_EXP 7
3253: PPUSH
3254: CALL_OW 74
3258: PPUSH
3259: LD_EXP 7
3263: PPUSH
3264: CALL_OW 296
3268: PUSH
3269: LD_INT 15
3271: LESS
3272: OR
3273: IFFALSE 3497
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
// begin InGameOn ;
3281: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3285: LD_EXP 7
3289: PPUSH
3290: LD_INT 250
3292: PPUSH
3293: CALL_OW 234
// SetLives ( Brian , 750 ) ;
3297: LD_EXP 6
3301: PPUSH
3302: LD_INT 750
3304: PPUSH
3305: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3309: LD_INT 3
3311: PPUSH
3312: LD_INT 4
3314: PPUSH
3315: LD_INT 2
3317: PPUSH
3318: LD_INT 1
3320: PPUSH
3321: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3325: LD_EXP 6
3329: PUSH
3330: LD_EXP 7
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PPUSH
3339: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3343: LD_ADDR_VAR 0 1
3347: PUSH
3348: LD_INT 9
3350: PPUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 3
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PPUSH
3361: CALL_OW 70
3365: PUSH
3366: FOR_IN
3367: IFFALSE 3380
// ComFree ( i ) ;
3369: LD_VAR 0 1
3373: PPUSH
3374: CALL_OW 139
3378: GO 3366
3380: POP
3381: POP
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3382: LD_ADDR_VAR 0 1
3386: PUSH
3387: LD_INT 9
3389: PPUSH
3390: LD_INT 22
3392: PUSH
3393: LD_INT 3
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PPUSH
3400: CALL_OW 70
3404: PUSH
3405: FOR_IN
3406: IFFALSE 3424
// AddComAttackUnit ( i , Brian ) ;
3408: LD_VAR 0 1
3412: PPUSH
3413: LD_EXP 6
3417: PPUSH
3418: CALL_OW 175
3422: GO 3405
3424: POP
3425: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3426: LD_ADDR_VAR 0 1
3430: PUSH
3431: LD_INT 22
3433: PUSH
3434: LD_INT 4
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PPUSH
3441: CALL_OW 69
3445: PUSH
3446: FOR_IN
3447: IFFALSE 3460
// ComFree ( i ) ;
3449: LD_VAR 0 1
3453: PPUSH
3454: CALL_OW 139
3458: GO 3446
3460: POP
3461: POP
// wait ( 0 0$1 ) ;
3462: LD_INT 35
3464: PPUSH
3465: CALL_OW 67
// InGameOff ;
3469: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3473: LD_EXP 6
3477: PPUSH
3478: LD_STRING DF-Sol1-1
3480: PPUSH
3481: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3485: LD_EXP 1
3489: PPUSH
3490: LD_STRING DF-JMM-1
3492: PPUSH
3493: CALL_OW 88
// end ;
3497: PPOPN 1
3499: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3500: LD_INT 19
3502: PPUSH
3503: LD_INT 22
3505: PUSH
3506: LD_INT 3
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 70
3517: PUSH
3518: LD_INT 0
3520: EQUAL
3521: IFFALSE 3634
3523: GO 3525
3525: DISABLE
// begin if not IsDead ( Brian ) then
3526: LD_EXP 6
3530: PPUSH
3531: CALL_OW 301
3535: NOT
3536: IFFALSE 3550
// SetSide ( Brian , 1 ) ;
3538: LD_EXP 6
3542: PPUSH
3543: LD_INT 1
3545: PPUSH
3546: CALL_OW 235
// if not IsDead ( Jerry ) then
3550: LD_EXP 7
3554: PPUSH
3555: CALL_OW 301
3559: NOT
3560: IFFALSE 3574
// SetSide ( Jerry , 1 ) ;
3562: LD_EXP 7
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3574: LD_INT 22
3576: PUSH
3577: LD_INT 1
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PUSH
3584: LD_INT 25
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PPUSH
3598: CALL_OW 69
3602: PUSH
3603: LD_INT 0
3605: GREATER
3606: IFFALSE 3622
// begin Say ( JMM , DFa-JMM-1 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING DFa-JMM-1
3615: PPUSH
3616: CALL_OW 88
// end else
3620: GO 3634
// begin Say ( JMM , DFa-JMM-1a ) ;
3622: LD_EXP 1
3626: PPUSH
3627: LD_STRING DFa-JMM-1a
3629: PPUSH
3630: CALL_OW 88
// end ; end ;
3634: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3635: LD_INT 19
3637: PPUSH
3638: LD_INT 22
3640: PUSH
3641: LD_INT 3
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL_OW 70
3652: PUSH
3653: LD_INT 0
3655: EQUAL
3656: PUSH
3657: LD_EXP 6
3661: PPUSH
3662: CALL_OW 302
3666: NOT
3667: AND
3668: IFFALSE 3745
3670: GO 3672
3672: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3673: LD_INT 35
3675: PPUSH
3676: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3680: LD_EXP 6
3684: PPUSH
3685: CALL_OW 256
3689: PUSH
3690: LD_INT 250
3692: GREATER
3693: IFFALSE 3673
// Say ( Brian , DFb-Sol1-1 ) ;
3695: LD_EXP 6
3699: PPUSH
3700: LD_STRING DFb-Sol1-1
3702: PPUSH
3703: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3707: LD_EXP 6
3711: PPUSH
3712: LD_INT 78
3714: PPUSH
3715: LD_INT 74
3717: PPUSH
3718: CALL_OW 111
// if IsDead ( Jerry ) then
3722: LD_EXP 7
3726: PPUSH
3727: CALL_OW 301
3731: IFFALSE 3745
// Say ( Brian , DFb-Sol1-1a ) end ;
3733: LD_EXP 6
3737: PPUSH
3738: LD_STRING DFb-Sol1-1a
3740: PPUSH
3741: CALL_OW 88
3745: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3746: LD_INT 22
3748: PUSH
3749: LD_INT 1
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_INT 21
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PPUSH
3770: CALL_OW 69
3774: PUSH
3775: LD_INT 0
3777: EQUAL
3778: IFFALSE 3866
3780: GO 3782
3782: DISABLE
3783: LD_INT 0
3785: PPUSH
// begin enable ;
3786: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3787: LD_ADDR_VAR 0 1
3791: PUSH
3792: LD_INT 22
3794: PUSH
3795: LD_INT 3
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 3
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PUSH
3812: LD_INT 30
3814: PUSH
3815: LD_INT 31
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: LIST
3826: PPUSH
3827: CALL_OW 69
3831: PUSH
3832: FOR_IN
3833: IFFALSE 3864
// begin if See ( 1 , i ) then
3835: LD_INT 1
3837: PPUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: CALL_OW 292
3847: IFFALSE 3862
// begin disable ;
3849: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3850: LD_EXP 1
3854: PPUSH
3855: LD_STRING DX1-JMM-1
3857: PPUSH
3858: CALL_OW 88
// end ; end ;
3862: GO 3832
3864: POP
3865: POP
// end ;
3866: PPOPN 1
3868: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3869: LD_INT 1
3871: PPUSH
3872: LD_INT 11
3874: PPUSH
3875: CALL_OW 294
3879: IFFALSE 4293
3881: GO 3883
3883: DISABLE
3884: LD_INT 0
3886: PPUSH
3887: PPUSH
// begin DialogueOn ;
3888: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3892: LD_INT 11
3894: PPUSH
3895: LD_INT 22
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: PUSH
3905: LD_INT 21
3907: PUSH
3908: LD_INT 1
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PPUSH
3919: CALL_OW 70
3923: PUSH
3924: LD_INT 1
3926: ARRAY
3927: PPUSH
3928: LD_STRING DX3-Rus1-1
3930: PPUSH
3931: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING DX3-JMM-1
3942: PPUSH
3943: CALL_OW 88
// DialogueOff ;
3947: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3951: LD_ADDR_VAR 0 1
3955: PUSH
3956: LD_INT 11
3958: PPUSH
3959: LD_INT 22
3961: PUSH
3962: LD_INT 3
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 21
3971: PUSH
3972: LD_INT 1
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: PPUSH
3983: CALL_OW 70
3987: PUSH
3988: FOR_IN
3989: IFFALSE 4009
// southBaseDefenders = southBaseDefenders ^ i ;
3991: LD_ADDR_EXP 25
3995: PUSH
3996: LD_EXP 25
4000: PUSH
4001: LD_VAR 0 1
4005: ADD
4006: ST_TO_ADDR
4007: GO 3988
4009: POP
4010: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
4011: LD_INT 455
4013: PUSH
4014: LD_INT 420
4016: PUSH
4017: LD_INT 315
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: PUSH
4025: LD_OWVAR 67
4029: ARRAY
4030: PPUSH
4031: CALL_OW 67
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ) ;
4035: LD_INT 22
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: LD_INT 21
4047: PUSH
4048: LD_INT 1
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 25
4057: PUSH
4058: LD_INT 3
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 69
4074: PPUSH
4075: CALL_OW 122
// wait ( 0 0$1 ) ;
4079: LD_INT 35
4081: PPUSH
4082: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
4086: LD_INT 35
4088: PPUSH
4089: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
4093: LD_ADDR_VAR 0 1
4097: PUSH
4098: LD_INT 22
4100: PUSH
4101: LD_INT 3
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 21
4110: PUSH
4111: LD_INT 2
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 58
4120: PUSH
4121: EMPTY
4122: LIST
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: LIST
4128: PPUSH
4129: CALL_OW 69
4133: PUSH
4134: FOR_IN
4135: IFFALSE 4205
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: LD_INT 22
4144: PUSH
4145: LD_INT 3
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 21
4154: PUSH
4155: LD_INT 1
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 3
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 69
4181: PUSH
4182: FOR_IN
4183: IFFALSE 4201
// begin ComEnterUnit ( j , i ) ;
4185: LD_VAR 0 2
4189: PPUSH
4190: LD_VAR 0 1
4194: PPUSH
4195: CALL_OW 120
// end ;
4199: GO 4182
4201: POP
4202: POP
// end ;
4203: GO 4134
4205: POP
4206: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4207: LD_INT 22
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 21
4219: PUSH
4220: LD_INT 2
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 58
4229: PUSH
4230: EMPTY
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 69
4242: PUSH
4243: LD_INT 0
4245: EQUAL
4246: PUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 21
4259: PUSH
4260: LD_INT 1
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: LD_INT 25
4269: PUSH
4270: LD_INT 3
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 69
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: OR
4291: IFFALSE 4086
// end ;
4293: PPOPN 2
4295: END
// every 0 0$1 do var i , tmp ;
4296: GO 4298
4298: DISABLE
4299: LD_INT 0
4301: PPUSH
4302: PPUSH
// begin enable ;
4303: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4304: LD_ADDR_VAR 0 2
4308: PUSH
4309: LD_INT 22
4311: PUSH
4312: LD_INT 1
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: LD_INT 21
4321: PUSH
4322: LD_INT 1
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PPUSH
4333: CALL_OW 69
4337: ST_TO_ADDR
// for i in tmp do
4338: LD_ADDR_VAR 0 1
4342: PUSH
4343: LD_VAR 0 2
4347: PUSH
4348: FOR_IN
4349: IFFALSE 4471
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_INT 5
4358: PPUSH
4359: CALL_OW 296
4363: PUSH
4364: LD_INT 4
4366: LESS
4367: PUSH
4368: LD_VAR 0 1
4372: PPUSH
4373: LD_INT 4
4375: PPUSH
4376: CALL_OW 296
4380: PUSH
4381: LD_INT 4
4383: LESS
4384: OR
4385: IFFALSE 4469
// begin disable ;
4387: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4388: LD_INT 5
4390: PUSH
4391: LD_INT 4
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PPUSH
4398: CALL_OW 85
// if IsOK ( Bobby ) then
4402: LD_EXP 2
4406: PPUSH
4407: CALL_OW 302
4411: IFFALSE 4448
// begin DialogueOn ;
4413: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4417: LD_EXP 2
4421: PPUSH
4422: LD_STRING DX2-Bobby-1
4424: PPUSH
4425: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4429: LD_EXP 1
4433: PPUSH
4434: LD_STRING DX2-JMM-1a
4436: PPUSH
4437: CALL_OW 88
// DialogueOff ;
4441: CALL_OW 7
// disable ;
4445: DISABLE
// end else
4446: GO 4469
// begin DialogueOn ;
4448: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4452: LD_EXP 1
4456: PPUSH
4457: LD_STRING DX2-JMM-1
4459: PPUSH
4460: CALL_OW 88
// DialogueOff ;
4464: CALL_OW 7
// disable ;
4468: DISABLE
// end ; end ; end ;
4469: GO 4348
4471: POP
4472: POP
// end ;
4473: PPOPN 2
4475: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4476: LD_INT 22
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 23
4488: PUSH
4489: LD_INT 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 21
4498: PUSH
4499: LD_INT 2
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 34
4508: PUSH
4509: LD_INT 42
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: PPUSH
4522: CALL_OW 69
4526: PUSH
4527: LD_INT 1
4529: GREATEREQUAL
4530: IFFALSE 5005
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
4540: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4541: LD_ADDR_VAR 0 1
4545: PUSH
4546: LD_INT 22
4548: PUSH
4549: LD_INT 1
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 23
4558: PUSH
4559: LD_INT 3
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 21
4568: PUSH
4569: LD_INT 2
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 34
4578: PUSH
4579: LD_INT 42
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: PPUSH
4592: CALL_OW 69
4596: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4597: LD_ADDR_VAR 0 2
4601: PUSH
4602: LD_INT 22
4604: PUSH
4605: LD_INT 1
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: LD_INT 21
4614: PUSH
4615: LD_INT 1
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 26
4624: PUSH
4625: LD_INT 1
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: PPUSH
4637: CALL_OW 69
4641: PUSH
4642: LD_EXP 1
4646: PUSH
4647: LD_EXP 3
4651: PUSH
4652: LD_EXP 2
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: LIST
4661: DIFF
4662: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4663: LD_ADDR_VAR 0 3
4667: PUSH
4668: LD_INT 22
4670: PUSH
4671: LD_INT 1
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: PUSH
4678: LD_INT 21
4680: PUSH
4681: LD_INT 1
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: PUSH
4688: LD_INT 26
4690: PUSH
4691: LD_INT 2
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: PUSH
4708: LD_EXP 4
4712: PUSH
4713: EMPTY
4714: LIST
4715: DIFF
4716: ST_TO_ADDR
// DialogueOn ;
4717: CALL_OW 6
// if not IsInUnit ( JMM ) then
4721: LD_EXP 1
4725: PPUSH
4726: CALL_OW 310
4730: NOT
4731: IFFALSE 4745
// Say ( JMM , DX2a-JMM-1 ) ;
4733: LD_EXP 1
4737: PPUSH
4738: LD_STRING DX2a-JMM-1
4740: PPUSH
4741: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4745: LD_EXP 2
4749: PPUSH
4750: CALL_OW 310
4754: PUSH
4755: LD_VAR 0 1
4759: PUSH
4760: LD_INT 1
4762: ARRAY
4763: EQUAL
4764: IFFALSE 4778
// Say ( Bobby , DX2a-Bobby-1 ) ;
4766: LD_EXP 2
4770: PPUSH
4771: LD_STRING DX2a-Bobby-1
4773: PPUSH
4774: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4778: LD_EXP 3
4782: PPUSH
4783: CALL_OW 310
4787: PUSH
4788: LD_VAR 0 1
4792: PUSH
4793: LD_INT 1
4795: ARRAY
4796: EQUAL
4797: IFFALSE 4811
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4799: LD_EXP 3
4803: PPUSH
4804: LD_STRING DX2a-Cyrus-1
4806: PPUSH
4807: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4811: LD_EXP 4
4815: PPUSH
4816: CALL_OW 310
4820: PUSH
4821: LD_VAR 0 1
4825: PUSH
4826: LD_INT 1
4828: ARRAY
4829: EQUAL
4830: IFFALSE 4844
// Say ( Lisa , DX2a-Lisa-1 ) ;
4832: LD_EXP 4
4836: PPUSH
4837: LD_STRING DX2a-Lisa-1
4839: PPUSH
4840: CALL_OW 88
// for i in temp1 do
4844: LD_ADDR_VAR 0 4
4848: PUSH
4849: LD_VAR 0 2
4853: PUSH
4854: FOR_IN
4855: IFFALSE 4892
// if IsInUnit ( i ) = tmp [ 1 ] then
4857: LD_VAR 0 4
4861: PPUSH
4862: CALL_OW 310
4866: PUSH
4867: LD_VAR 0 1
4871: PUSH
4872: LD_INT 1
4874: ARRAY
4875: EQUAL
4876: IFFALSE 4890
// Say ( i , DX2a-Sol1-1 ) ;
4878: LD_VAR 0 4
4882: PPUSH
4883: LD_STRING DX2a-Sol1-1
4885: PPUSH
4886: CALL_OW 88
4890: GO 4854
4892: POP
4893: POP
// for i in temp2 do
4894: LD_ADDR_VAR 0 4
4898: PUSH
4899: LD_VAR 0 3
4903: PUSH
4904: FOR_IN
4905: IFFALSE 4942
// if IsInUnit ( i ) = tmp [ 1 ] then
4907: LD_VAR 0 4
4911: PPUSH
4912: CALL_OW 310
4916: PUSH
4917: LD_VAR 0 1
4921: PUSH
4922: LD_INT 1
4924: ARRAY
4925: EQUAL
4926: IFFALSE 4940
// Say ( i , DX2a-FSol1-1 ) ;
4928: LD_VAR 0 4
4932: PPUSH
4933: LD_STRING DX2a-FSol1-1
4935: PPUSH
4936: CALL_OW 88
4940: GO 4904
4942: POP
4943: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4944: LD_EXP 1
4948: PPUSH
4949: CALL_OW 310
4953: PUSH
4954: LD_VAR 0 1
4958: PUSH
4959: LD_INT 1
4961: ARRAY
4962: EQUAL
4963: IFFALSE 4977
// Say ( JMM , DX2b-JMM-1 ) ;
4965: LD_EXP 1
4969: PPUSH
4970: LD_STRING DX2b-JMM-1
4972: PPUSH
4973: CALL_OW 88
// if not IsInUnit ( JMM ) then
4977: LD_EXP 1
4981: PPUSH
4982: CALL_OW 310
4986: NOT
4987: IFFALSE 5001
// Say ( JMM , DX2a-JMM-2 ) ;
4989: LD_EXP 1
4993: PPUSH
4994: LD_STRING DX2a-JMM-2
4996: PPUSH
4997: CALL_OW 88
// DialogueOff ;
5001: CALL_OW 7
// end ;
5005: PPOPN 4
5007: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
5008: LD_INT 1
5010: PPUSH
5011: CALL_OW 255
5015: PUSH
5016: LD_INT 1
5018: EQUAL
5019: PUSH
5020: LD_INT 10
5022: PPUSH
5023: CALL_OW 255
5027: PUSH
5028: LD_INT 1
5030: EQUAL
5031: OR
5032: IFFALSE 5092
5034: GO 5036
5036: DISABLE
// begin DialogueOn ;
5037: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
5041: LD_EXP 1
5045: PPUSH
5046: LD_STRING D3-JMM-1
5048: PPUSH
5049: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
5053: LD_EXP 9
5057: PPUSH
5058: LD_STRING D3-Pow-1
5060: PPUSH
5061: CALL_OW 94
// if IsOK ( Cyrus ) then
5065: LD_EXP 3
5069: PPUSH
5070: CALL_OW 302
5074: IFFALSE 5088
// Say ( Cyrus , D3-Cyrus-1 ) ;
5076: LD_EXP 3
5080: PPUSH
5081: LD_STRING D3-Cyrus-1
5083: PPUSH
5084: CALL_OW 88
// DialogueOff ;
5088: CALL_OW 7
// end ;
5092: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var temp , i ;
5093: LD_INT 1
5095: PPUSH
5096: CALL_OW 255
5100: PUSH
5101: LD_INT 1
5103: EQUAL
5104: PUSH
5105: LD_INT 10
5107: PPUSH
5108: CALL_OW 255
5112: PUSH
5113: LD_INT 1
5115: EQUAL
5116: AND
5117: PUSH
5118: LD_INT 22
5120: PPUSH
5121: LD_INT 22
5123: PUSH
5124: LD_INT 3
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: LD_INT 21
5133: PUSH
5134: LD_INT 1
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PPUSH
5145: CALL_OW 70
5149: PUSH
5150: LD_INT 0
5152: EQUAL
5153: AND
5154: IFFALSE 6393
5156: GO 5158
5158: DISABLE
5159: LD_INT 0
5161: PPUSH
5162: PPUSH
// begin DialogueOn ;
5163: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5167: LD_EXP 1
5171: PPUSH
5172: LD_STRING D3a-JMM-1
5174: PPUSH
5175: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5179: LD_EXP 9
5183: PPUSH
5184: LD_STRING D3a-Pow-1
5186: PPUSH
5187: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5191: LD_EXP 1
5195: PPUSH
5196: LD_STRING D3a-JMM-2
5198: PPUSH
5199: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5203: LD_EXP 9
5207: PPUSH
5208: LD_STRING D3a-Pow-2
5210: PPUSH
5211: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5215: LD_EXP 1
5219: PPUSH
5220: LD_STRING D3a-JMM-3
5222: PPUSH
5223: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5227: LD_EXP 9
5231: PPUSH
5232: LD_STRING D3a-Pow-3
5234: PPUSH
5235: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5239: LD_EXP 1
5243: PPUSH
5244: LD_STRING D3a-JMM-4
5246: PPUSH
5247: CALL_OW 88
// DialogueOff ;
5251: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5255: LD_STRING M2
5257: PPUSH
5258: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5262: LD_EXP 1
5266: PPUSH
5267: LD_STRING D3b-JMM-1
5269: PPUSH
5270: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5274: LD_INT 35
5276: PPUSH
5277: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5281: LD_INT 22
5283: PPUSH
5284: LD_INT 22
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 25
5296: PUSH
5297: LD_INT 2
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PPUSH
5308: CALL_OW 70
5312: IFFALSE 5274
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
5314: LD_ADDR_VAR 0 1
5318: PUSH
5319: LD_INT 22
5321: PUSH
5322: LD_INT 1
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: PUSH
5329: LD_INT 23
5331: PUSH
5332: LD_INT 1
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PUSH
5339: LD_INT 25
5341: PUSH
5342: LD_INT 2
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: LD_INT 50
5351: PUSH
5352: EMPTY
5353: LIST
5354: PUSH
5355: LD_INT 56
5357: PUSH
5358: EMPTY
5359: LIST
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PPUSH
5368: CALL_OW 69
5372: PUSH
5373: LD_EXP 1
5377: PUSH
5378: EMPTY
5379: LIST
5380: DIFF
5381: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5382: LD_INT 35
5384: PPUSH
5385: CALL_OW 67
// until temp > 0 ;
5389: LD_VAR 0 1
5393: PUSH
5394: LD_INT 0
5396: GREATER
5397: IFFALSE 5314
// wait ( 0 0$5 ) ;
5399: LD_INT 175
5401: PPUSH
5402: CALL_OW 67
// PrepareRussianHeroes ;
5406: CALL 11664 0 0
// InGameOn ;
5410: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5414: LD_EXP 8
5418: PPUSH
5419: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5423: LD_EXP 1
5427: PUSH
5428: LD_VAR 0 1
5432: PUSH
5433: LD_INT 1
5435: ARRAY
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PPUSH
5441: LD_EXP 8
5445: PPUSH
5446: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5450: LD_EXP 8
5454: PPUSH
5455: LD_VAR 0 1
5459: PUSH
5460: LD_INT 1
5462: ARRAY
5463: PPUSH
5464: CALL_OW 119
// Wait ( 0 0$02 ) ;
5468: LD_INT 70
5470: PPUSH
5471: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5475: LD_EXP 8
5479: PPUSH
5480: LD_STRING D4-Mikh-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 1
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-Sol1-1
5517: PPUSH
5518: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5522: LD_VAR 0 1
5526: PUSH
5527: LD_INT 1
5529: ARRAY
5530: PPUSH
5531: CALL_OW 258
5535: PUSH
5536: LD_INT 2
5538: EQUAL
5539: IFFALSE 5557
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5541: LD_VAR 0 1
5545: PUSH
5546: LD_INT 1
5548: ARRAY
5549: PPUSH
5550: LD_STRING D4-FSol1-1
5552: PPUSH
5553: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5557: LD_EXP 8
5561: PPUSH
5562: LD_STRING D4-Mikh-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 1
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-Sol1-2
5599: PPUSH
5600: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5604: LD_VAR 0 1
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: CALL_OW 258
5617: PUSH
5618: LD_INT 2
5620: EQUAL
5621: IFFALSE 5639
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5623: LD_VAR 0 1
5627: PUSH
5628: LD_INT 1
5630: ARRAY
5631: PPUSH
5632: LD_STRING D4-FSol1-2
5634: PPUSH
5635: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5639: LD_EXP 8
5643: PPUSH
5644: LD_STRING D4-Mikh-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 1
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-Sol1-3
5681: PPUSH
5682: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5686: LD_VAR 0 1
5690: PUSH
5691: LD_INT 1
5693: ARRAY
5694: PPUSH
5695: CALL_OW 258
5699: PUSH
5700: LD_INT 2
5702: EQUAL
5703: IFFALSE 5721
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5705: LD_VAR 0 1
5709: PUSH
5710: LD_INT 1
5712: ARRAY
5713: PPUSH
5714: LD_STRING D4-FSol1-3
5716: PPUSH
5717: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5721: LD_EXP 8
5725: PPUSH
5726: LD_STRING D4-Mikh-4
5728: PPUSH
5729: CALL_OW 88
// case query ( Qs1 ) of 1 :
5733: LD_STRING Qs1
5735: PPUSH
5736: CALL_OW 97
5740: PUSH
5741: LD_INT 1
5743: DOUBLE
5744: EQUAL
5745: IFTRUE 5749
5747: GO 5784
5749: POP
// begin InGameOff ;
5750: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5754: LD_INT 1
5756: PPUSH
5757: LD_INT 6
5759: PPUSH
5760: LD_INT 2
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5770: LD_EXP 8
5774: PPUSH
5775: LD_INT 17
5777: PPUSH
5778: CALL_OW 113
// end ; 2 :
5782: GO 6377
5784: LD_INT 2
5786: DOUBLE
5787: EQUAL
5788: IFTRUE 5792
5790: GO 6342
5792: POP
// begin repeat wait ( 0 0$1 ) ;
5793: LD_INT 35
5795: PPUSH
5796: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5800: LD_VAR 0 1
5804: PUSH
5805: LD_INT 1
5807: ARRAY
5808: PPUSH
5809: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5813: LD_VAR 0 1
5817: PUSH
5818: LD_INT 1
5820: ARRAY
5821: PPUSH
5822: LD_EXP 1
5826: PPUSH
5827: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5831: LD_EXP 8
5835: PPUSH
5836: LD_EXP 1
5840: PPUSH
5841: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5845: LD_EXP 1
5849: PPUSH
5850: LD_EXP 8
5854: PPUSH
5855: CALL_OW 296
5859: PUSH
5860: LD_INT 5
5862: LESS
5863: IFFALSE 5793
// ComTurnUnit ( Mikhail , JMM ) ;
5865: LD_EXP 8
5869: PPUSH
5870: LD_EXP 1
5874: PPUSH
5875: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5879: LD_EXP 1
5883: PPUSH
5884: LD_STRING D4b-JMM-1
5886: PPUSH
5887: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5891: LD_EXP 8
5895: PPUSH
5896: LD_STRING D4b-Mikh-1
5898: PPUSH
5899: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_STRING D4b-JMM-2
5910: PPUSH
5911: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5915: LD_EXP 8
5919: PPUSH
5920: LD_STRING D4b-Mikh-2
5922: PPUSH
5923: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_STRING D4b-JMM-3
5934: PPUSH
5935: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5939: LD_EXP 8
5943: PPUSH
5944: LD_STRING D4b-Mikh-3
5946: PPUSH
5947: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5951: LD_EXP 1
5955: PPUSH
5956: LD_STRING D4b-JMM-4
5958: PPUSH
5959: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5963: LD_EXP 8
5967: PPUSH
5968: LD_STRING D4b-Mikh-4
5970: PPUSH
5971: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5975: LD_EXP 1
5979: PPUSH
5980: LD_STRING D4b-JMM-5
5982: PPUSH
5983: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5987: LD_EXP 8
5991: PPUSH
5992: LD_STRING D4b-Mikh-5
5994: PPUSH
5995: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5999: LD_EXP 1
6003: PPUSH
6004: LD_STRING D4b-JMM-6
6006: PPUSH
6007: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
6011: LD_EXP 8
6015: PPUSH
6016: LD_STRING D4b-Mikh-6
6018: PPUSH
6019: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
6023: LD_EXP 1
6027: PPUSH
6028: LD_STRING D4b-JMM-7
6030: PPUSH
6031: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6035: LD_EXP 8
6039: PPUSH
6040: LD_STRING D4b-Mikh-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 1
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-Sol1-7
6077: PPUSH
6078: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6082: LD_VAR 0 1
6086: PUSH
6087: LD_INT 1
6089: ARRAY
6090: PPUSH
6091: CALL_OW 258
6095: PUSH
6096: LD_INT 2
6098: EQUAL
6099: IFFALSE 6117
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6101: LD_VAR 0 1
6105: PUSH
6106: LD_INT 1
6108: ARRAY
6109: PPUSH
6110: LD_STRING D4b-FSol1-7
6112: PPUSH
6113: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6117: LD_EXP 1
6121: PPUSH
6122: LD_STRING D4b-JMM-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 1
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-Sol1-8
6159: PPUSH
6160: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6164: LD_VAR 0 1
6168: PUSH
6169: LD_INT 1
6171: ARRAY
6172: PPUSH
6173: CALL_OW 258
6177: PUSH
6178: LD_INT 2
6180: EQUAL
6181: IFFALSE 6199
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6183: LD_VAR 0 1
6187: PUSH
6188: LD_INT 1
6190: ARRAY
6191: PPUSH
6192: LD_STRING D4b-FSol1-8
6194: PPUSH
6195: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6199: LD_EXP 1
6203: PPUSH
6204: LD_STRING D4b-JMM-9
6206: PPUSH
6207: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6211: LD_EXP 8
6215: PPUSH
6216: LD_INT 1
6218: PPUSH
6219: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6223: LD_ADDR_VAR 0 2
6227: PUSH
6228: LD_INT 22
6230: PUSH
6231: LD_INT 1
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: EMPTY
6239: LIST
6240: PPUSH
6241: CALL_OW 69
6245: PUSH
6246: FOR_IN
6247: IFFALSE 6260
// ComFree ( i ) ;
6249: LD_VAR 0 2
6253: PPUSH
6254: CALL_OW 139
6258: GO 6246
6260: POP
6261: POP
// repeat wait ( 0 0$1 ) ;
6262: LD_INT 35
6264: PPUSH
6265: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6269: LD_EXP 8
6273: PPUSH
6274: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6278: LD_EXP 8
6282: PUSH
6283: LD_VAR 0 1
6287: PUSH
6288: LD_INT 1
6290: ARRAY
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: PPUSH
6296: LD_INT 1
6298: PPUSH
6299: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6303: LD_EXP 8
6307: PPUSH
6308: CALL_OW 310
6312: IFFALSE 6262
// mikhailDepot = IsInUnit ( Mikhail ) ;
6314: LD_ADDR_EXP 23
6318: PUSH
6319: LD_EXP 8
6323: PPUSH
6324: CALL_OW 310
6328: ST_TO_ADDR
// InGameOff ;
6329: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6333: LD_STRING M3
6335: PPUSH
6336: CALL_OW 337
// end ; 3 :
6340: GO 6377
6342: LD_INT 3
6344: DOUBLE
6345: EQUAL
6346: IFTRUE 6350
6348: GO 6376
6350: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6351: LD_EXP 8
6355: PPUSH
6356: LD_INT 17
6358: PPUSH
6359: CALL_OW 113
// wait ( 0 0$3 ) ;
6363: LD_INT 105
6365: PPUSH
6366: CALL_OW 67
// InGameOff ;
6370: CALL_OW 9
// end ; end ;
6374: GO 6377
6376: POP
// PrepareTigers ;
6377: CALL 14302 0 0
// RussianTrap ;
6381: CALL 10145 0 0
// tigersRespawn = 1 ;
6385: LD_ADDR_EXP 30
6389: PUSH
6390: LD_INT 1
6392: ST_TO_ADDR
// end ;
6393: PPOPN 2
6395: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6396: LD_INT 1
6398: PPUSH
6399: CALL_OW 255
6403: PUSH
6404: LD_INT 1
6406: EQUAL
6407: PUSH
6408: LD_INT 10
6410: PPUSH
6411: CALL_OW 255
6415: PUSH
6416: LD_INT 1
6418: EQUAL
6419: AND
6420: PUSH
6421: LD_INT 1
6423: PPUSH
6424: CALL_OW 274
6428: PPUSH
6429: LD_INT 1
6431: PPUSH
6432: CALL_OW 275
6436: PUSH
6437: LD_INT 100
6439: GREATEREQUAL
6440: AND
6441: IFFALSE 6604
6443: GO 6445
6445: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6446: LD_INT 2100
6448: PPUSH
6449: LD_INT 4200
6451: PPUSH
6452: CALL_OW 12
6456: PUSH
6457: LD_INT 1050
6459: PLUS
6460: PPUSH
6461: CALL_OW 67
// PrepareCargoBays ;
6465: CALL 12785 0 0
// cargoRespawn = 1 ;
6469: LD_ADDR_EXP 28
6473: PUSH
6474: LD_INT 1
6476: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6477: LD_EXP 15
6481: PUSH
6482: LD_EXP 16
6486: PUSH
6487: LD_EXP 17
6491: PUSH
6492: LD_EXP 18
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: PPUSH
6503: LD_INT 36
6505: PPUSH
6506: LD_INT 13
6508: PPUSH
6509: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6513: LD_EXP 15
6517: PUSH
6518: LD_EXP 16
6522: PUSH
6523: LD_EXP 17
6527: PUSH
6528: LD_EXP 18
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: PPUSH
6539: LD_INT 40
6541: PPUSH
6542: LD_INT 20
6544: PPUSH
6545: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6549: LD_EXP 15
6553: PUSH
6554: LD_EXP 16
6558: PUSH
6559: LD_EXP 17
6563: PUSH
6564: LD_EXP 18
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: PPUSH
6575: LD_INT 53
6577: PPUSH
6578: LD_INT 16
6580: PPUSH
6581: CALL_OW 171
// wait ( 0 0$5 ) ;
6585: LD_INT 175
6587: PPUSH
6588: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6592: LD_EXP 17
6596: PPUSH
6597: LD_STRING D5-Rus2-1
6599: PPUSH
6600: CALL_OW 88
// end ;
6604: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6605: LD_EXP 28
6609: PUSH
6610: LD_INT 1
6612: EQUAL
6613: IFFALSE 6827
6615: GO 6617
6617: DISABLE
6618: LD_INT 0
6620: PPUSH
6621: PPUSH
6622: PPUSH
6623: PPUSH
// begin enable ;
6624: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6625: LD_ADDR_VAR 0 3
6629: PUSH
6630: LD_INT 22
6632: PUSH
6633: LD_INT 3
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: PUSH
6640: LD_INT 21
6642: PUSH
6643: LD_INT 2
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PUSH
6650: LD_INT 34
6652: PUSH
6653: LD_INT 51
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: PPUSH
6665: CALL_OW 69
6669: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
6670: LD_ADDR_VAR 0 4
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 1
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PUSH
6685: LD_INT 23
6687: PUSH
6688: LD_INT 1
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: PPUSH
6699: CALL_OW 69
6703: ST_TO_ADDR
// for i in tmp1 do
6704: LD_ADDR_VAR 0 1
6708: PUSH
6709: LD_VAR 0 3
6713: PUSH
6714: FOR_IN
6715: IFFALSE 6825
// begin for j in tmp2 do
6717: LD_ADDR_VAR 0 2
6721: PUSH
6722: LD_VAR 0 4
6726: PUSH
6727: FOR_IN
6728: IFFALSE 6821
// begin if GetDistUnits ( i , j ) < 7 then
6730: LD_VAR 0 1
6734: PPUSH
6735: LD_VAR 0 2
6739: PPUSH
6740: CALL_OW 296
6744: PUSH
6745: LD_INT 7
6747: LESS
6748: IFFALSE 6819
// begin disable ;
6750: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6751: LD_EXP 15
6755: PUSH
6756: LD_EXP 16
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PPUSH
6765: LD_INT 7
6767: PPUSH
6768: LD_INT 9
6770: PPUSH
6771: CALL_OW 111
// if cargoSee = 0 then
6775: LD_EXP 29
6779: PUSH
6780: LD_INT 0
6782: EQUAL
6783: IFFALSE 6819
// begin cargoSee = 1 ;
6785: LD_ADDR_EXP 29
6789: PUSH
6790: LD_INT 1
6792: ST_TO_ADDR
// cargoEscape = 1 ;
6793: LD_ADDR_EXP 20
6797: PUSH
6798: LD_INT 1
6800: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6801: LD_EXP 17
6805: PPUSH
6806: LD_STRING D5-Rus2-1a
6808: PPUSH
6809: CALL_OW 88
// exit ;
6813: POP
6814: POP
6815: POP
6816: POP
6817: GO 6827
// end ; end ; end ;
6819: GO 6727
6821: POP
6822: POP
// end ;
6823: GO 6714
6825: POP
6826: POP
// end ;
6827: PPOPN 4
6829: END
// every 0 0$1 trigger cargoEscape > 0 do
6830: LD_EXP 20
6834: PUSH
6835: LD_INT 0
6837: GREATER
6838: IFFALSE 6985
6840: GO 6842
6842: DISABLE
// begin enable ;
6843: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6844: LD_EXP 15
6848: PUSH
6849: LD_EXP 16
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: LD_INT 13
6860: PPUSH
6861: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6865: LD_EXP 15
6869: PPUSH
6870: LD_INT 13
6872: PPUSH
6873: CALL_OW 308
6877: PUSH
6878: LD_EXP 17
6882: PPUSH
6883: LD_INT 13
6885: PPUSH
6886: CALL_OW 308
6890: OR
6891: IFFALSE 6925
// begin RemoveUnit ( cargo1 ) ;
6893: LD_EXP 15
6897: PPUSH
6898: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6902: LD_EXP 17
6906: PPUSH
6907: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6911: LD_ADDR_EXP 20
6915: PUSH
6916: LD_EXP 20
6920: PUSH
6921: LD_INT 1
6923: PLUS
6924: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6925: LD_EXP 16
6929: PPUSH
6930: LD_INT 13
6932: PPUSH
6933: CALL_OW 308
6937: PUSH
6938: LD_EXP 18
6942: PPUSH
6943: LD_INT 13
6945: PPUSH
6946: CALL_OW 308
6950: OR
6951: IFFALSE 6985
// begin RemoveUnit ( cargo2 ) ;
6953: LD_EXP 16
6957: PPUSH
6958: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6962: LD_EXP 18
6966: PPUSH
6967: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6971: LD_ADDR_EXP 20
6975: PUSH
6976: LD_EXP 20
6980: PUSH
6981: LD_INT 1
6983: PLUS
6984: ST_TO_ADDR
// end ; end ;
6985: END
// every 0 0$1 trigger cargoEscape > 1 do
6986: LD_EXP 20
6990: PUSH
6991: LD_INT 1
6993: GREATER
6994: IFFALSE 7158
6996: GO 6998
6998: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
6999: LD_INT 4
7001: PPUSH
7002: LD_INT 1
7004: PPUSH
7005: LD_INT 1
7007: PPUSH
7008: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7012: LD_INT 31
7014: PPUSH
7015: LD_INT 1
7017: PPUSH
7018: LD_INT 1
7020: PPUSH
7021: CALL_OW 324
// if IsOK ( Jerry ) then
7025: LD_EXP 7
7029: PPUSH
7030: CALL_OW 302
7034: IFFALSE 7050
// begin Say ( Jerry , D5a-Sol1-1 ) ;
7036: LD_EXP 7
7040: PPUSH
7041: LD_STRING D5a-Sol1-1
7043: PPUSH
7044: CALL_OW 88
// end else
7048: GO 7146
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
7050: LD_INT 22
7052: PUSH
7053: LD_INT 1
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 23
7062: PUSH
7063: LD_INT 1
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 26
7072: PUSH
7073: LD_INT 1
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: LIST
7084: PPUSH
7085: CALL_OW 69
7089: PUSH
7090: LD_INT 2
7092: PPUSH
7093: LD_INT 22
7095: PUSH
7096: LD_INT 1
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: LD_INT 23
7105: PUSH
7106: LD_INT 1
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PUSH
7113: LD_INT 26
7115: PUSH
7116: LD_INT 1
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: PPUSH
7133: CALL_OW 12
7137: ARRAY
7138: PPUSH
7139: LD_STRING D5a-Sol1-1
7141: PPUSH
7142: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7146: LD_EXP 1
7150: PPUSH
7151: LD_STRING D5a-JMM-1
7153: PPUSH
7154: CALL_OW 88
// end ;
7158: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7159: LD_INT 1
7161: PPUSH
7162: CALL_OW 255
7166: PUSH
7167: LD_INT 3
7169: EQUAL
7170: PUSH
7171: LD_INT 1
7173: PPUSH
7174: CALL_OW 256
7178: PUSH
7179: LD_INT 1000
7181: LESS
7182: AND
7183: PUSH
7184: LD_INT 10
7186: PPUSH
7187: CALL_OW 255
7191: PUSH
7192: LD_INT 3
7194: EQUAL
7195: PUSH
7196: LD_INT 10
7198: PPUSH
7199: CALL_OW 256
7203: PUSH
7204: LD_INT 1000
7206: LESS
7207: AND
7208: OR
7209: IFFALSE 7226
7211: GO 7213
7213: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
7214: LD_EXP 1
7218: PPUSH
7219: LD_STRING D8-JMM-1
7221: PPUSH
7222: CALL_OW 88
// end ;
7226: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7227: LD_EXP 8
7231: PPUSH
7232: CALL_OW 310
7236: PUSH
7237: LD_INT 1
7239: EQUAL
7240: PUSH
7241: LD_EXP 22
7245: PUSH
7246: LD_INT 3
7248: EQUAL
7249: NOT
7250: AND
7251: IFFALSE 7273
7253: GO 7255
7255: DISABLE
// begin mikhailInBase = 1 ;
7256: LD_ADDR_EXP 22
7260: PUSH
7261: LD_INT 1
7263: ST_TO_ADDR
// mikhailStatus = 1 ;
7264: LD_ADDR_EXP 21
7268: PUSH
7269: LD_INT 1
7271: ST_TO_ADDR
// enable ;
7272: ENABLE
// end ;
7273: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
7274: LD_EXP 8
7278: PPUSH
7279: LD_INT 25
7281: PPUSH
7282: CALL_OW 308
7286: PUSH
7287: LD_EXP 22
7291: PUSH
7292: LD_INT 1
7294: EQUAL
7295: AND
7296: PUSH
7297: LD_EXP 8
7301: PPUSH
7302: CALL_OW 255
7306: PUSH
7307: LD_INT 1
7309: EQUAL
7310: AND
7311: IFFALSE 7641
7313: GO 7315
7315: DISABLE
// begin enable ;
7316: ENABLE
// case query ( QMikh2 ) of 1 :
7317: LD_STRING QMikh2
7319: PPUSH
7320: CALL_OW 97
7324: PUSH
7325: LD_INT 1
7327: DOUBLE
7328: EQUAL
7329: IFTRUE 7333
7331: GO 7400
7333: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7334: LD_INT 1
7336: PPUSH
7337: LD_INT 6
7339: PPUSH
7340: LD_INT 2
7342: PPUSH
7343: LD_INT 1
7345: PPUSH
7346: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7350: LD_EXP 8
7354: PPUSH
7355: LD_INT 6
7357: PPUSH
7358: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7362: LD_EXP 8
7366: PPUSH
7367: CALL_OW 122
// wait ( 0 0$1 ) ;
7371: LD_INT 35
7373: PPUSH
7374: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7378: LD_EXP 8
7382: PPUSH
7383: LD_INT 17
7385: PPUSH
7386: CALL_OW 113
// mikhailInbase = 0 ;
7390: LD_ADDR_EXP 22
7394: PUSH
7395: LD_INT 0
7397: ST_TO_ADDR
// end ; 2 :
7398: GO 7641
7400: LD_INT 2
7402: DOUBLE
7403: EQUAL
7404: IFTRUE 7408
7406: GO 7581
7408: POP
// begin mikhailInBase = 2 ;
7409: LD_ADDR_EXP 22
7413: PUSH
7414: LD_INT 2
7416: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7417: LD_EXP 8
7421: PPUSH
7422: LD_INT 6
7424: PPUSH
7425: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7429: LD_EXP 8
7433: PPUSH
7434: CALL_OW 122
// wait ( 0 0$1 ) ;
7438: LD_INT 35
7440: PPUSH
7441: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7445: LD_EXP 8
7449: PPUSH
7450: LD_EXP 8
7454: PPUSH
7455: CALL_OW 250
7459: PUSH
7460: LD_INT 2
7462: PLUS
7463: PPUSH
7464: LD_EXP 8
7468: PPUSH
7469: CALL_OW 251
7473: PUSH
7474: LD_INT 2
7476: PLUS
7477: PPUSH
7478: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7482: LD_EXP 8
7486: PPUSH
7487: LD_EXP 8
7491: PPUSH
7492: CALL_OW 250
7496: PUSH
7497: LD_INT 1
7499: PLUS
7500: PPUSH
7501: LD_EXP 8
7505: PPUSH
7506: CALL_OW 251
7510: PUSH
7511: LD_INT 2
7513: PLUS
7514: PPUSH
7515: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7519: LD_EXP 8
7523: PPUSH
7524: LD_EXP 8
7528: PPUSH
7529: CALL_OW 250
7533: PUSH
7534: LD_INT 2
7536: PLUS
7537: PPUSH
7538: LD_EXP 8
7542: PPUSH
7543: CALL_OW 251
7547: PPUSH
7548: CALL_OW 171
// wait ( 0 0$5 ) ;
7552: LD_INT 175
7554: PPUSH
7555: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7559: LD_EXP 8
7563: PPUSH
7564: LD_INT 25
7566: PPUSH
7567: CALL_OW 113
// mikhailInBase = 4 ;
7571: LD_ADDR_EXP 22
7575: PUSH
7576: LD_INT 4
7578: ST_TO_ADDR
// end ; 3 :
7579: GO 7641
7581: LD_INT 3
7583: DOUBLE
7584: EQUAL
7585: IFTRUE 7589
7587: GO 7640
7589: POP
// begin SetSide ( Mikhail , 6 ) ;
7590: LD_EXP 8
7594: PPUSH
7595: LD_INT 6
7597: PPUSH
7598: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7602: LD_EXP 8
7606: PPUSH
7607: CALL_OW 122
// wait ( 0 0$1 ) ;
7611: LD_INT 35
7613: PPUSH
7614: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7618: LD_EXP 8
7622: PPUSH
7623: LD_INT 17
7625: PPUSH
7626: CALL_OW 113
// mikhailInbase = 3 ;
7630: LD_ADDR_EXP 22
7634: PUSH
7635: LD_INT 3
7637: ST_TO_ADDR
// end ; end ;
7638: GO 7641
7640: POP
// end ;
7641: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7642: LD_EXP 8
7646: PPUSH
7647: LD_INT 25
7649: PPUSH
7650: CALL_OW 308
7654: PUSH
7655: LD_EXP 22
7659: PUSH
7660: LD_INT 4
7662: EQUAL
7663: AND
7664: IFFALSE 7728
7666: GO 7668
7668: DISABLE
// begin enable ;
7669: ENABLE
// InGameOn ;
7670: CALL_OW 8
// SetSide ( Mikhail , 1 ) ;
7674: LD_EXP 8
7678: PPUSH
7679: LD_INT 1
7681: PPUSH
7682: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7686: LD_INT 35
7688: PPUSH
7689: CALL_OW 67
// ComEnterUnit ( Mikhail , dep1 ) ;
7693: LD_EXP 8
7697: PPUSH
7698: LD_INT 1
7700: PPUSH
7701: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
7705: LD_EXP 8
7709: PPUSH
7710: CALL_OW 310
7714: IFFALSE 7686
// InGameOff ;
7716: CALL_OW 9
// mikhailInBase = 1 ;
7720: LD_ADDR_EXP 22
7724: PUSH
7725: LD_INT 1
7727: ST_TO_ADDR
// end ;
7728: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7729: LD_EXP 8
7733: PPUSH
7734: CALL_OW 310
7738: PUSH
7739: LD_EXP 22
7743: PUSH
7744: LD_INT 3
7746: EQUAL
7747: NOT
7748: AND
7749: IFFALSE 7875
7751: GO 7753
7753: DISABLE
// begin enable ;
7754: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7755: LD_INT 22
7757: PUSH
7758: LD_INT 1
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 21
7767: PUSH
7768: LD_INT 1
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 91
7777: PUSH
7778: LD_EXP 8
7782: PPUSH
7783: CALL_OW 310
7787: PUSH
7788: LD_INT 10
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: LIST
7800: PPUSH
7801: CALL_OW 69
7805: PUSH
7806: LD_INT 1
7808: EQUAL
7809: IFFALSE 7875
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7811: LD_INT 1
7813: PPUSH
7814: LD_INT 6
7816: PPUSH
7817: LD_INT 2
7819: PPUSH
7820: LD_INT 1
7822: PPUSH
7823: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7827: LD_EXP 8
7831: PPUSH
7832: LD_INT 6
7834: PPUSH
7835: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7839: LD_EXP 8
7843: PPUSH
7844: CALL_OW 122
// wait ( 0 0$1 ) ;
7848: LD_INT 35
7850: PPUSH
7851: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7855: LD_EXP 8
7859: PPUSH
7860: LD_INT 17
7862: PPUSH
7863: CALL_OW 113
// mikhailStatus = 3 ;
7867: LD_ADDR_EXP 21
7871: PUSH
7872: LD_INT 3
7874: ST_TO_ADDR
// end ; end ;
7875: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7876: LD_EXP 1
7880: PPUSH
7881: LD_EXP 23
7885: PPUSH
7886: CALL_OW 296
7890: PUSH
7891: LD_INT 5
7893: LESS
7894: PUSH
7895: LD_EXP 21
7899: PUSH
7900: LD_INT 3
7902: EQUAL
7903: AND
7904: PUSH
7905: LD_EXP 22
7909: PUSH
7910: LD_INT 3
7912: EQUAL
7913: NOT
7914: AND
7915: IFFALSE 8131
7917: GO 7919
7919: DISABLE
7920: LD_INT 0
7922: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
7923: LD_ADDR_VAR 0 1
7927: PUSH
7928: LD_INT 22
7930: PUSH
7931: LD_INT 1
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 21
7940: PUSH
7941: LD_INT 1
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: LD_INT 26
7950: PUSH
7951: LD_INT 1
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: LIST
7962: PPUSH
7963: CALL_OW 69
7967: PUSH
7968: LD_EXP 1
7972: PUSH
7973: EMPTY
7974: LIST
7975: DIFF
7976: ST_TO_ADDR
// DialogueOn ;
7977: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7981: LD_EXP 1
7985: PPUSH
7986: LD_STRING D7-JMM-1
7988: PPUSH
7989: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7993: LD_VAR 0 1
7997: PUSH
7998: LD_INT 1
8000: ARRAY
8001: PPUSH
8002: LD_STRING D7-Sol1-1
8004: PPUSH
8005: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8009: LD_EXP 1
8013: PPUSH
8014: LD_STRING D7-JMM-2
8016: PPUSH
8017: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8021: LD_VAR 0 1
8025: PUSH
8026: LD_INT 1
8028: ARRAY
8029: PPUSH
8030: LD_STRING D7-Sol1-2
8032: PPUSH
8033: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8037: LD_EXP 1
8041: PPUSH
8042: LD_STRING D7-JMM-3
8044: PPUSH
8045: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8049: LD_VAR 0 1
8053: PUSH
8054: LD_INT 1
8056: ARRAY
8057: PPUSH
8058: LD_STRING D7-Sol1-3
8060: PPUSH
8061: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8065: LD_EXP 3
8069: PPUSH
8070: CALL_OW 302
8074: PUSH
8075: LD_EXP 4
8079: PPUSH
8080: CALL_OW 302
8084: AND
8085: IFFALSE 8127
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8087: LD_EXP 3
8091: PPUSH
8092: LD_STRING D7-Cyrus-3
8094: PPUSH
8095: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8099: LD_VAR 0 1
8103: PUSH
8104: LD_INT 1
8106: ARRAY
8107: PPUSH
8108: LD_STRING D7-Sol1-4
8110: PPUSH
8111: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8115: LD_EXP 4
8119: PPUSH
8120: LD_STRING D7-Lisa-4
8122: PPUSH
8123: CALL_OW 88
// end ; DialogueOff ;
8127: CALL_OW 7
// end ;
8131: PPOPN 1
8133: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8134: LD_EXP 8
8138: PPUSH
8139: CALL_OW 303
8143: PUSH
8144: LD_EXP 21
8148: PUSH
8149: LD_INT 3
8151: EQUAL
8152: AND
8153: IFFALSE 8167
8155: GO 8157
8157: DISABLE
// begin enable ;
8158: ENABLE
// mikhailStatus = 2 ;
8159: LD_ADDR_EXP 21
8163: PUSH
8164: LD_INT 2
8166: ST_TO_ADDR
// end ;
8167: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8168: LD_EXP 8
8172: PPUSH
8173: LD_INT 17
8175: PPUSH
8176: CALL_OW 308
8180: PUSH
8181: LD_EXP 8
8185: PPUSH
8186: CALL_OW 255
8190: PUSH
8191: LD_INT 6
8193: EQUAL
8194: AND
8195: IFFALSE 8228
8197: GO 8199
8199: DISABLE
// begin if not mikhailInBase = 3 then
8200: LD_EXP 22
8204: PUSH
8205: LD_INT 3
8207: EQUAL
8208: NOT
8209: IFFALSE 8219
// mikhailStatus = 3 ;
8211: LD_ADDR_EXP 21
8215: PUSH
8216: LD_INT 3
8218: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8219: LD_EXP 8
8223: PPUSH
8224: CALL_OW 64
// end ;
8228: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8229: LD_EXP 21
8233: PUSH
8234: LD_INT 3
8236: EQUAL
8237: PUSH
8238: LD_EXP 8
8242: PPUSH
8243: CALL_OW 255
8247: PUSH
8248: LD_INT 6
8250: EQUAL
8251: AND
8252: IFFALSE 8418
8254: GO 8256
8256: DISABLE
8257: LD_INT 0
8259: PPUSH
8260: PPUSH
// begin enable ;
8261: ENABLE
// if IsOk ( Mikhail ) then
8262: LD_EXP 8
8266: PPUSH
8267: CALL_OW 302
8271: IFFALSE 8418
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8273: LD_ADDR_VAR 0 2
8277: PUSH
8278: LD_EXP 8
8282: PPUSH
8283: LD_INT 22
8285: PUSH
8286: LD_INT 1
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: LD_INT 21
8295: PUSH
8296: LD_INT 1
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PPUSH
8307: CALL_OW 69
8311: PPUSH
8312: CALL 10337 0 2
8316: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8317: LD_VAR 0 2
8321: PPUSH
8322: LD_EXP 8
8326: PPUSH
8327: CALL_OW 296
8331: PUSH
8332: LD_INT 8
8334: LESS
8335: IFFALSE 8418
// begin if GetSex ( attacker ) = sex_male then
8337: LD_VAR 0 2
8341: PPUSH
8342: CALL_OW 258
8346: PUSH
8347: LD_INT 1
8349: EQUAL
8350: IFFALSE 8386
// begin disable ;
8352: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8353: LD_VAR 0 2
8357: PPUSH
8358: LD_STRING D7a-Sol1-1
8360: PPUSH
8361: CALL_OW 88
// wait ( 0 0$2 ) ;
8365: LD_INT 70
8367: PPUSH
8368: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8372: LD_VAR 0 2
8376: PPUSH
8377: LD_STRING D7a-Sol1-1a
8379: PPUSH
8380: CALL_OW 88
// end else
8384: GO 8418
// begin disable ;
8386: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8387: LD_VAR 0 2
8391: PPUSH
8392: LD_STRING D7a-FSol1-1
8394: PPUSH
8395: CALL_OW 88
// wait ( 0 0$2 ) ;
8399: LD_INT 70
8401: PPUSH
8402: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8406: LD_VAR 0 2
8410: PPUSH
8411: LD_STRING D7a-FSol1-1a
8413: PPUSH
8414: CALL_OW 88
// end ; end ; end ; end ;
8418: PPOPN 2
8420: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8421: LD_EXP 27
8425: PUSH
8426: LD_INT 1
8428: EQUAL
8429: PUSH
8430: LD_INT 22
8432: PPUSH
8433: LD_INT 22
8435: PUSH
8436: LD_INT 3
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: PUSH
8443: LD_INT 21
8445: PUSH
8446: LD_INT 1
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PPUSH
8457: CALL_OW 70
8461: PUSH
8462: LD_INT 2
8464: GREATER
8465: AND
8466: PUSH
8467: LD_INT 22
8469: PPUSH
8470: LD_INT 22
8472: PUSH
8473: LD_INT 1
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: LD_INT 2
8482: PUSH
8483: LD_INT 21
8485: PUSH
8486: LD_INT 1
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 59
8495: PUSH
8496: EMPTY
8497: LIST
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: LIST
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PPUSH
8508: CALL_OW 70
8512: PUSH
8513: LD_INT 0
8515: EQUAL
8516: AND
8517: IFFALSE 8532
8519: GO 8521
8521: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8522: LD_INT 1
8524: PPUSH
8525: LD_INT 3
8527: PPUSH
8528: CALL_OW 235
// end ;
8532: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8533: LD_EXP 30
8537: PUSH
8538: LD_INT 1
8540: EQUAL
8541: PUSH
8542: LD_INT 22
8544: PUSH
8545: LD_INT 0
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: LD_INT 25
8554: PUSH
8555: LD_INT 14
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PPUSH
8566: CALL_OW 69
8570: PUSH
8571: LD_INT 0
8573: EQUAL
8574: AND
8575: IFFALSE 8669
8577: GO 8579
8579: DISABLE
8580: LD_INT 0
8582: PPUSH
8583: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8584: LD_ADDR_VAR 0 2
8588: PUSH
8589: LD_INT 22
8591: PUSH
8592: LD_INT 1
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: LD_INT 21
8601: PUSH
8602: LD_INT 1
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: LD_INT 23
8611: PUSH
8612: LD_INT 1
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: LIST
8623: PPUSH
8624: CALL_OW 69
8628: ST_TO_ADDR
// for i in tmp do
8629: LD_ADDR_VAR 0 1
8633: PUSH
8634: LD_VAR 0 2
8638: PUSH
8639: FOR_IN
8640: IFFALSE 8667
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8642: LD_VAR 0 1
8646: PPUSH
8647: LD_INT 1
8649: PPUSH
8650: LD_INT 4
8652: PPUSH
8653: CALL_OW 12
8657: PPUSH
8658: LD_INT 300
8660: PPUSH
8661: CALL_OW 492
// end ;
8665: GO 8639
8667: POP
8668: POP
// end ; end_of_file
8669: PPOPN 2
8671: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8672: LD_INT 0
8674: PPUSH
8675: PPUSH
8676: PPUSH
8677: PPUSH
// for i = 1 to count do
8678: LD_ADDR_VAR 0 8
8682: PUSH
8683: DOUBLE
8684: LD_INT 1
8686: DEC
8687: ST_TO_ADDR
8688: LD_VAR 0 6
8692: PUSH
8693: FOR_TO
8694: IFFALSE 8775
// begin uc_side = side ;
8696: LD_ADDR_OWVAR 20
8700: PUSH
8701: LD_VAR 0 1
8705: ST_TO_ADDR
// uc_nation = nation ;
8706: LD_ADDR_OWVAR 21
8710: PUSH
8711: LD_VAR 0 2
8715: ST_TO_ADDR
// hc_gallery =  ;
8716: LD_ADDR_OWVAR 33
8720: PUSH
8721: LD_STRING 
8723: ST_TO_ADDR
// hc_name =  ;
8724: LD_ADDR_OWVAR 26
8728: PUSH
8729: LD_STRING 
8731: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8732: LD_INT 0
8734: PPUSH
8735: LD_VAR 0 5
8739: PPUSH
8740: LD_VAR 0 4
8744: PPUSH
8745: CALL_OW 380
// un = CreateHuman ;
8749: LD_ADDR_VAR 0 10
8753: PUSH
8754: CALL_OW 44
8758: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8759: LD_VAR 0 10
8763: PPUSH
8764: LD_VAR 0 3
8768: PPUSH
8769: CALL_OW 52
// end ;
8773: GO 8693
8775: POP
8776: POP
// end ;
8777: LD_VAR 0 7
8781: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8782: LD_INT 0
8784: PPUSH
8785: PPUSH
8786: PPUSH
// uc_side := GetSide ( b ) ;
8787: LD_ADDR_OWVAR 20
8791: PUSH
8792: LD_VAR 0 2
8796: PPUSH
8797: CALL_OW 255
8801: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8802: LD_ADDR_OWVAR 21
8806: PUSH
8807: LD_VAR 0 2
8811: PPUSH
8812: CALL_OW 248
8816: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8817: LD_INT 0
8819: PPUSH
8820: LD_INT 1
8822: PPUSH
8823: LD_VAR 0 1
8827: PPUSH
8828: CALL_OW 380
// un = CreateHuman ;
8832: LD_ADDR_VAR 0 4
8836: PUSH
8837: CALL_OW 44
8841: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8842: LD_ADDR_VAR 0 5
8846: PUSH
8847: LD_VAR 0 2
8851: PPUSH
8852: CALL_OW 254
8856: PUSH
8857: LD_INT 3
8859: MINUS
8860: ST_TO_ADDR
// if dir < 0 then
8861: LD_VAR 0 5
8865: PUSH
8866: LD_INT 0
8868: LESS
8869: IFFALSE 8885
// dir := 6 + dir ;
8871: LD_ADDR_VAR 0 5
8875: PUSH
8876: LD_INT 6
8878: PUSH
8879: LD_VAR 0 5
8883: PLUS
8884: ST_TO_ADDR
// SetDir ( un , dir ) ;
8885: LD_VAR 0 4
8889: PPUSH
8890: LD_VAR 0 5
8894: PPUSH
8895: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8899: LD_VAR 0 4
8903: PPUSH
8904: LD_VAR 0 2
8908: PPUSH
8909: CALL_OW 52
// end ;
8913: LD_VAR 0 3
8917: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8918: LD_INT 0
8920: PPUSH
8921: PPUSH
8922: PPUSH
8923: PPUSH
8924: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8925: LD_ADDR_VAR 0 7
8929: PUSH
8930: LD_INT 22
8932: PUSH
8933: LD_VAR 0 1
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PUSH
8942: LD_INT 25
8944: PUSH
8945: LD_INT 2
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: PUSH
8952: LD_INT 24
8954: PUSH
8955: LD_INT 1000
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: LIST
8966: PPUSH
8967: CALL_OW 69
8971: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8972: LD_ADDR_VAR 0 5
8976: PUSH
8977: LD_VAR 0 3
8981: PPUSH
8982: LD_INT 22
8984: PUSH
8985: LD_VAR 0 1
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 21
8996: PUSH
8997: LD_INT 3
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PUSH
9004: LD_INT 3
9006: PUSH
9007: LD_INT 24
9009: PUSH
9010: LD_INT 1000
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: PUSH
9026: EMPTY
9027: LIST
9028: PPUSH
9029: CALL_OW 70
9033: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
9034: LD_VAR 0 5
9038: PUSH
9039: LD_INT 0
9041: GREATER
9042: PUSH
9043: LD_VAR 0 7
9047: PUSH
9048: LD_INT 0
9050: GREATER
9051: AND
9052: IFFALSE 9118
// begin for i in engineerOk_list do
9054: LD_ADDR_VAR 0 6
9058: PUSH
9059: LD_VAR 0 7
9063: PUSH
9064: FOR_IN
9065: IFFALSE 9116
// begin for j in buildings_list do
9067: LD_ADDR_VAR 0 8
9071: PUSH
9072: LD_VAR 0 5
9076: PUSH
9077: FOR_IN
9078: IFFALSE 9112
// begin AddComExitBuilding ( i ) ;
9080: LD_VAR 0 6
9084: PPUSH
9085: CALL_OW 182
// wait ( 0 0$1 ) ;
9089: LD_INT 35
9091: PPUSH
9092: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
9096: LD_VAR 0 6
9100: PPUSH
9101: LD_VAR 0 8
9105: PPUSH
9106: CALL_OW 190
// end ;
9110: GO 9077
9112: POP
9113: POP
// end ;
9114: GO 9064
9116: POP
9117: POP
// end ; if buildings_list = 0 then
9118: LD_VAR 0 5
9122: PUSH
9123: LD_INT 0
9125: EQUAL
9126: IFFALSE 9159
// begin for i in engineerOK_list do
9128: LD_ADDR_VAR 0 6
9132: PUSH
9133: LD_VAR 0 7
9137: PUSH
9138: FOR_IN
9139: IFFALSE 9157
// begin ComEnterUnit ( i , building ) ;
9141: LD_VAR 0 6
9145: PPUSH
9146: LD_VAR 0 2
9150: PPUSH
9151: CALL_OW 120
// end ;
9155: GO 9138
9157: POP
9158: POP
// end ; end ;
9159: LD_VAR 0 4
9163: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9164: LD_INT 0
9166: PPUSH
9167: PPUSH
9168: PPUSH
9169: PPUSH
9170: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9171: LD_ADDR_VAR 0 6
9175: PUSH
9176: LD_INT 22
9178: PUSH
9179: LD_VAR 0 1
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: LD_INT 25
9190: PUSH
9191: LD_INT 4
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: LD_INT 24
9200: PUSH
9201: LD_INT 250
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: LIST
9212: PPUSH
9213: CALL_OW 69
9217: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9218: LD_ADDR_VAR 0 9
9222: PUSH
9223: LD_VAR 0 3
9227: PPUSH
9228: LD_INT 22
9230: PUSH
9231: LD_VAR 0 1
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 21
9242: PUSH
9243: LD_INT 1
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: LD_INT 3
9252: PUSH
9253: LD_INT 24
9255: PUSH
9256: LD_INT 650
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: PPUSH
9272: CALL_OW 70
9276: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9277: LD_VAR 0 9
9281: PUSH
9282: LD_INT 0
9284: GREATER
9285: PUSH
9286: LD_VAR 0 6
9290: PUSH
9291: LD_INT 0
9293: GREATER
9294: AND
9295: IFFALSE 9422
// begin for i = 1 to damageUnits do
9297: LD_ADDR_VAR 0 7
9301: PUSH
9302: DOUBLE
9303: LD_INT 1
9305: DEC
9306: ST_TO_ADDR
9307: LD_VAR 0 9
9311: PUSH
9312: FOR_TO
9313: IFFALSE 9337
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9315: LD_VAR 0 9
9319: PUSH
9320: LD_VAR 0 7
9324: ARRAY
9325: PPUSH
9326: LD_VAR 0 2
9330: PPUSH
9331: CALL_OW 113
9335: GO 9312
9337: POP
9338: POP
// for i in sci_list do
9339: LD_ADDR_VAR 0 7
9343: PUSH
9344: LD_VAR 0 6
9348: PUSH
9349: FOR_IN
9350: IFFALSE 9418
// begin ComExitBuilding ( i ) ;
9352: LD_VAR 0 7
9356: PPUSH
9357: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9361: LD_ADDR_VAR 0 8
9365: PUSH
9366: LD_VAR 0 2
9370: PPUSH
9371: LD_INT 22
9373: PUSH
9374: LD_VAR 0 1
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 70
9387: PUSH
9388: FOR_IN
9389: IFFALSE 9414
// begin AddComHeal ( i , j ) ;
9391: LD_VAR 0 7
9395: PPUSH
9396: LD_VAR 0 8
9400: PPUSH
9401: CALL_OW 188
// wait ( 1 1$0 ) ;
9405: LD_INT 2100
9407: PPUSH
9408: CALL_OW 67
// end ;
9412: GO 9388
9414: POP
9415: POP
// end ;
9416: GO 9349
9418: POP
9419: POP
// end else
9420: GO 9436
// begin AddComEnterUnit ( sci_list , build ) ;
9422: LD_VAR 0 6
9426: PPUSH
9427: LD_VAR 0 4
9431: PPUSH
9432: CALL_OW 180
// end ; end ;
9436: LD_VAR 0 5
9440: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9441: LD_INT 0
9443: PPUSH
9444: PPUSH
9445: PPUSH
9446: PPUSH
9447: PPUSH
9448: PPUSH
9449: PPUSH
9450: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9451: LD_ADDR_VAR 0 7
9455: PUSH
9456: LD_VAR 0 3
9460: PPUSH
9461: LD_INT 22
9463: PUSH
9464: LD_VAR 0 1
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: LD_INT 21
9475: PUSH
9476: LD_INT 2
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: LD_INT 24
9485: PUSH
9486: LD_INT 550
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: LD_INT 34
9495: PUSH
9496: LD_INT 46
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 70
9513: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9514: LD_ADDR_VAR 0 8
9518: PUSH
9519: LD_VAR 0 3
9523: PPUSH
9524: LD_INT 22
9526: PUSH
9527: LD_VAR 0 1
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PUSH
9536: LD_INT 21
9538: PUSH
9539: LD_INT 2
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 34
9548: PUSH
9549: LD_INT 46
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: LD_INT 3
9558: PUSH
9559: LD_INT 24
9561: PUSH
9562: LD_INT 550
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: PPUSH
9579: CALL_OW 70
9583: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9584: LD_ADDR_VAR 0 9
9588: PUSH
9589: LD_VAR 0 2
9593: PPUSH
9594: LD_INT 22
9596: PUSH
9597: LD_VAR 0 1
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 21
9608: PUSH
9609: LD_INT 2
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 34
9618: PUSH
9619: LD_INT 46
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 24
9628: PUSH
9629: LD_INT 1000
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: LD_INT 58
9638: PUSH
9639: EMPTY
9640: LIST
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: PPUSH
9649: CALL_OW 70
9653: ST_TO_ADDR
// for i in damageVehicle_list do
9654: LD_ADDR_VAR 0 5
9658: PUSH
9659: LD_VAR 0 8
9663: PUSH
9664: FOR_IN
9665: IFFALSE 9684
// mechanicInside_list = UnitsInside ( i ) ;
9667: LD_ADDR_VAR 0 10
9671: PUSH
9672: LD_VAR 0 5
9676: PPUSH
9677: CALL_OW 313
9681: ST_TO_ADDR
9682: GO 9664
9684: POP
9685: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9686: LD_ADDR_VAR 0 11
9690: PUSH
9691: LD_VAR 0 2
9695: PPUSH
9696: LD_INT 22
9698: PUSH
9699: LD_VAR 0 1
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 25
9710: PUSH
9711: LD_INT 3
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PPUSH
9722: CALL_OW 70
9726: ST_TO_ADDR
// if damageVehicle_list > 0 then
9727: LD_VAR 0 8
9731: PUSH
9732: LD_INT 0
9734: GREATER
9735: IFFALSE 9808
// begin for i in damageVehicle_list do
9737: LD_ADDR_VAR 0 5
9741: PUSH
9742: LD_VAR 0 8
9746: PUSH
9747: FOR_IN
9748: IFFALSE 9806
// begin for j in mechanicInside_list do
9750: LD_ADDR_VAR 0 6
9754: PUSH
9755: LD_VAR 0 10
9759: PUSH
9760: FOR_IN
9761: IFFALSE 9802
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9763: LD_VAR 0 8
9767: PPUSH
9768: LD_VAR 0 2
9772: PPUSH
9773: CALL_OW 113
// AddComExitVehicle ( j ) ;
9777: LD_VAR 0 6
9781: PPUSH
9782: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9786: LD_VAR 0 6
9790: PPUSH
9791: LD_VAR 0 5
9795: PPUSH
9796: CALL_OW 189
// end ;
9800: GO 9760
9802: POP
9803: POP
// end ;
9804: GO 9747
9806: POP
9807: POP
// end ; if emptyVehicle_list > 0 then
9808: LD_VAR 0 9
9812: PUSH
9813: LD_INT 0
9815: GREATER
9816: IFFALSE 9866
// begin for i in emptyVehicle_list do
9818: LD_ADDR_VAR 0 5
9822: PUSH
9823: LD_VAR 0 9
9827: PUSH
9828: FOR_IN
9829: IFFALSE 9864
// begin for j in mechanicOutside_list do
9831: LD_ADDR_VAR 0 6
9835: PUSH
9836: LD_VAR 0 11
9840: PUSH
9841: FOR_IN
9842: IFFALSE 9860
// begin AddComEnterUnit ( j , i ) ;
9844: LD_VAR 0 6
9848: PPUSH
9849: LD_VAR 0 5
9853: PPUSH
9854: CALL_OW 180
// end ;
9858: GO 9841
9860: POP
9861: POP
// end ;
9862: GO 9828
9864: POP
9865: POP
// end ; if VehicleOK_list > 0 then
9866: LD_VAR 0 7
9870: PUSH
9871: LD_INT 0
9873: GREATER
9874: IFFALSE 9908
// begin for i in VehicleOK_list do
9876: LD_ADDR_VAR 0 5
9880: PUSH
9881: LD_VAR 0 7
9885: PUSH
9886: FOR_IN
9887: IFFALSE 9906
// ComAgressiveMove ( i , 110 , 29 ) ;
9889: LD_VAR 0 5
9893: PPUSH
9894: LD_INT 110
9896: PPUSH
9897: LD_INT 29
9899: PPUSH
9900: CALL_OW 114
9904: GO 9886
9906: POP
9907: POP
// end ; end ;
9908: LD_VAR 0 4
9912: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9913: LD_INT 0
9915: PPUSH
9916: PPUSH
9917: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9918: LD_VAR 0 1
9922: PPUSH
9923: LD_INT 22
9925: PUSH
9926: LD_VAR 0 2
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PUSH
9935: LD_INT 2
9937: PUSH
9938: LD_INT 21
9940: PUSH
9941: LD_INT 2
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: LD_INT 21
9950: PUSH
9951: LD_INT 1
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: LIST
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PPUSH
9967: CALL_OW 70
9971: PUSH
9972: LD_VAR 0 5
9976: GREATER
9977: IFFALSE 10109
// begin for i in defendersList do
9979: LD_ADDR_VAR 0 7
9983: PUSH
9984: LD_VAR 0 3
9988: PUSH
9989: FOR_IN
9990: IFFALSE 10105
// begin AddComExitBuilding ( i ) ;
9992: LD_VAR 0 7
9996: PPUSH
9997: CALL_OW 182
// wait ( 0 0$1 ) ;
10001: LD_INT 35
10003: PPUSH
10004: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
10008: LD_ADDR_VAR 0 8
10012: PUSH
10013: LD_VAR 0 1
10017: PPUSH
10018: LD_INT 22
10020: PUSH
10021: LD_VAR 0 2
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 2
10032: PUSH
10033: LD_INT 21
10035: PUSH
10036: LD_INT 2
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: LD_INT 21
10045: PUSH
10046: LD_INT 1
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: LIST
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: CALL_OW 70
10066: PUSH
10067: FOR_IN
10068: IFFALSE 10101
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
10070: LD_VAR 0 7
10074: PPUSH
10075: LD_VAR 0 8
10079: PPUSH
10080: CALL_OW 250
10084: PPUSH
10085: LD_VAR 0 8
10089: PPUSH
10090: CALL_OW 251
10094: PPUSH
10095: CALL_OW 174
10099: GO 10067
10101: POP
10102: POP
// end ;
10103: GO 9989
10105: POP
10106: POP
// end else
10107: GO 10140
// begin for i in defendersList do
10109: LD_ADDR_VAR 0 7
10113: PUSH
10114: LD_VAR 0 3
10118: PUSH
10119: FOR_IN
10120: IFFALSE 10138
// ComEnterUnit ( i , build ) ;
10122: LD_VAR 0 7
10126: PPUSH
10127: LD_VAR 0 4
10131: PPUSH
10132: CALL_OW 120
10136: GO 10119
10138: POP
10139: POP
// end ; end ;
10140: LD_VAR 0 6
10144: RET
// export function RussianTrap ; var i ; begin
10145: LD_INT 0
10147: PPUSH
10148: PPUSH
// if GetSide ( Brian ) = 4 then
10149: LD_EXP 6
10153: PPUSH
10154: CALL_OW 255
10158: PUSH
10159: LD_INT 4
10161: EQUAL
10162: IFFALSE 10185
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10164: LD_EXP 6
10168: PUSH
10169: LD_EXP 7
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PPUSH
10178: LD_INT 0
10180: PPUSH
10181: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10185: LD_ADDR_VAR 0 2
10189: PUSH
10190: LD_INT 22
10192: PUSH
10193: LD_INT 3
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 21
10202: PUSH
10203: LD_INT 1
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PPUSH
10214: CALL_OW 69
10218: PUSH
10219: FOR_IN
10220: IFFALSE 10330
// begin ComExitBuilding ( i ) ;
10222: LD_VAR 0 2
10226: PPUSH
10227: CALL_OW 122
// wait ( 0 0$1 ) ;
10231: LD_INT 35
10233: PPUSH
10234: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10238: LD_VAR 0 2
10242: PPUSH
10243: LD_INT 120
10245: PPUSH
10246: LD_INT 56
10248: PPUSH
10249: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10253: LD_VAR 0 2
10257: PPUSH
10258: LD_INT 111
10260: PPUSH
10261: LD_INT 37
10263: PPUSH
10264: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10268: LD_INT 33
10270: PPUSH
10271: CALL_OW 255
10275: PUSH
10276: LD_INT 3
10278: EQUAL
10279: PUSH
10280: LD_INT 33
10282: PPUSH
10283: CALL_OW 302
10287: AND
10288: IFFALSE 10304
// begin AddComEnterUnit ( i , arm2 ) ;
10290: LD_VAR 0 2
10294: PPUSH
10295: LD_INT 33
10297: PPUSH
10298: CALL_OW 180
// end else
10302: GO 10328
// begin AddComCrawl ( i ) ;
10304: LD_VAR 0 2
10308: PPUSH
10309: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10313: LD_VAR 0 2
10317: PPUSH
10318: LD_INT 109
10320: PPUSH
10321: LD_INT 30
10323: PPUSH
10324: CALL_OW 174
// end ; end ;
10328: GO 10219
10330: POP
10331: POP
// end ;
10332: LD_VAR 0 1
10336: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10337: LD_INT 0
10339: PPUSH
10340: PPUSH
10341: PPUSH
10342: PPUSH
10343: PPUSH
// nearest_dist = 1000 ;
10344: LD_ADDR_VAR 0 4
10348: PUSH
10349: LD_INT 1000
10351: ST_TO_ADDR
// nearest_un = un ;
10352: LD_ADDR_VAR 0 5
10356: PUSH
10357: LD_VAR 0 1
10361: ST_TO_ADDR
// for sold in units do
10362: LD_ADDR_VAR 0 6
10366: PUSH
10367: LD_VAR 0 2
10371: PUSH
10372: FOR_IN
10373: IFFALSE 10429
// begin dist = GetDistUnits ( un , sold ) ;
10375: LD_ADDR_VAR 0 7
10379: PUSH
10380: LD_VAR 0 1
10384: PPUSH
10385: LD_VAR 0 6
10389: PPUSH
10390: CALL_OW 296
10394: ST_TO_ADDR
// if dist < nearest_dist then
10395: LD_VAR 0 7
10399: PUSH
10400: LD_VAR 0 4
10404: LESS
10405: IFFALSE 10427
// begin nearest_un = sold ;
10407: LD_ADDR_VAR 0 5
10411: PUSH
10412: LD_VAR 0 6
10416: ST_TO_ADDR
// nearest_dist = dist ;
10417: LD_ADDR_VAR 0 4
10421: PUSH
10422: LD_VAR 0 7
10426: ST_TO_ADDR
// end ; end ;
10427: GO 10372
10429: POP
10430: POP
// result := nearest_un ;
10431: LD_ADDR_VAR 0 3
10435: PUSH
10436: LD_VAR 0 5
10440: ST_TO_ADDR
// end ;
10441: LD_VAR 0 3
10445: RET
// export function PrepareDifficulty ; begin
10446: LD_INT 0
10448: PPUSH
// if Difficulty = 1 then
10449: LD_OWVAR 67
10453: PUSH
10454: LD_INT 1
10456: EQUAL
10457: IFFALSE 10520
// begin RemoveUnit ( brw2 ) ;
10459: LD_INT 9
10461: PPUSH
10462: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10466: LD_INT 30
10468: PPUSH
10469: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10473: LD_INT 52
10475: PPUSH
10476: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10480: LD_INT 63
10482: PPUSH
10483: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10487: LD_INT 5
10489: PUSH
10490: LD_INT 4
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PPUSH
10497: LD_INT 60
10499: PPUSH
10500: CALL_OW 240
// RuSoldMinLevel = 0 ;
10504: LD_ADDR_EXP 13
10508: PUSH
10509: LD_INT 0
10511: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10512: LD_ADDR_EXP 14
10516: PUSH
10517: LD_INT 1
10519: ST_TO_ADDR
// end ; if Difficulty = 2 then
10520: LD_OWVAR 67
10524: PUSH
10525: LD_INT 2
10527: EQUAL
10528: IFFALSE 10570
// begin RemoveUnit ( brw4 ) ;
10530: LD_INT 52
10532: PPUSH
10533: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10537: LD_INT 5
10539: PUSH
10540: LD_INT 4
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PPUSH
10547: LD_INT 50
10549: PPUSH
10550: CALL_OW 240
// RuSoldMinLevel = 1 ;
10554: LD_ADDR_EXP 13
10558: PUSH
10559: LD_INT 1
10561: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10562: LD_ADDR_EXP 14
10566: PUSH
10567: LD_INT 2
10569: ST_TO_ADDR
// end ; if Difficulty = 3 then
10570: LD_OWVAR 67
10574: PUSH
10575: LD_INT 3
10577: EQUAL
10578: IFFALSE 10613
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10580: LD_INT 5
10582: PUSH
10583: LD_INT 4
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: LD_INT 40
10592: PPUSH
10593: CALL_OW 240
// RuSoldMinLevel = 2 ;
10597: LD_ADDR_EXP 13
10601: PUSH
10602: LD_INT 2
10604: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10605: LD_ADDR_EXP 14
10609: PUSH
10610: LD_INT 3
10612: ST_TO_ADDR
// end ; end ;
10613: LD_VAR 0 1
10617: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10618: LD_INT 0
10620: PPUSH
10621: PPUSH
10622: PPUSH
// tmp = [ ] ;
10623: LD_ADDR_VAR 0 5
10627: PUSH
10628: EMPTY
10629: ST_TO_ADDR
// if not vehicles then
10630: LD_VAR 0 1
10634: NOT
10635: IFFALSE 10639
// exit ;
10637: GO 10756
// for i in vehicles do
10639: LD_ADDR_VAR 0 4
10643: PUSH
10644: LD_VAR 0 1
10648: PUSH
10649: FOR_IN
10650: IFFALSE 10740
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10652: LD_ADDR_VAR 0 5
10656: PUSH
10657: LD_VAR 0 5
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: LD_VAR 0 4
10669: PPUSH
10670: CALL_OW 265
10674: PUSH
10675: LD_VAR 0 4
10679: PPUSH
10680: CALL_OW 262
10684: PUSH
10685: LD_VAR 0 4
10689: PPUSH
10690: CALL_OW 263
10694: PUSH
10695: LD_VAR 0 4
10699: PPUSH
10700: CALL_OW 264
10704: PUSH
10705: LD_VAR 0 4
10709: PPUSH
10710: CALL_OW 261
10714: PUSH
10715: LD_VAR 0 4
10719: PPUSH
10720: CALL_OW 256
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: PPUSH
10733: CALL_OW 2
10737: ST_TO_ADDR
// end ;
10738: GO 10649
10740: POP
10741: POP
// SaveVariable ( tmp , ident ) ;
10742: LD_VAR 0 5
10746: PPUSH
10747: LD_VAR 0 2
10751: PPUSH
10752: CALL_OW 39
// end ; end_of_file
10756: LD_VAR 0 3
10760: RET
// export function PrepareHeroes ; begin
10761: LD_INT 0
10763: PPUSH
// uc_side = 1 ;
10764: LD_ADDR_OWVAR 20
10768: PUSH
10769: LD_INT 1
10771: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10772: LD_ADDR_EXP 1
10776: PUSH
10777: LD_STRING 01_JMM
10779: PPUSH
10780: CALL_OW 34
10784: ST_TO_ADDR
// SetLives ( JMM , LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ) ;
10785: LD_EXP 1
10789: PPUSH
10790: LD_STRING 01_JMMLifePoints_1
10792: PPUSH
10793: LD_INT 1000
10795: PPUSH
10796: CALL_OW 30
10800: PPUSH
10801: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10805: LD_ADDR_EXP 9
10809: PUSH
10810: LD_STRING Powell
10812: PPUSH
10813: CALL_OW 25
10817: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10818: LD_ADDR_EXP 2
10822: PUSH
10823: LD_STRING 01_Bobby
10825: PPUSH
10826: CALL_OW 34
10830: ST_TO_ADDR
// if Bobby then
10831: LD_EXP 2
10835: IFFALSE 10857
// SetLives ( Bobby , LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ) ;
10837: LD_EXP 2
10841: PPUSH
10842: LD_STRING 01_BobbyLifePoints_1
10844: PPUSH
10845: LD_INT 1000
10847: PPUSH
10848: CALL_OW 30
10852: PPUSH
10853: CALL_OW 234
// Cyrus = CreateCharacter ( 01_Cyrus ) ;
10857: LD_ADDR_EXP 3
10861: PUSH
10862: LD_STRING 01_Cyrus
10864: PPUSH
10865: CALL_OW 34
10869: ST_TO_ADDR
// if Cyrus then
10870: LD_EXP 3
10874: IFFALSE 10896
// SetLives ( Cyrus , LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ) ;
10876: LD_EXP 3
10880: PPUSH
10881: LD_STRING 01_CyrusLifePoints_1
10883: PPUSH
10884: LD_INT 1000
10886: PPUSH
10887: CALL_OW 30
10891: PPUSH
10892: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
10896: LD_ADDR_EXP 5
10900: PUSH
10901: LD_STRING Khatam
10903: PPUSH
10904: CALL_OW 25
10908: ST_TO_ADDR
// uc_side = 4 ;
10909: LD_ADDR_OWVAR 20
10913: PUSH
10914: LD_INT 4
10916: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10917: LD_ADDR_EXP 4
10921: PUSH
10922: LD_STRING Lisa
10924: PPUSH
10925: CALL_OW 25
10929: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10930: LD_EXP 1
10934: PPUSH
10935: LD_INT 3
10937: PPUSH
10938: LD_INT 0
10940: PPUSH
10941: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10945: LD_EXP 2
10949: PPUSH
10950: LD_INT 3
10952: PPUSH
10953: LD_INT 0
10955: PPUSH
10956: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10960: LD_EXP 3
10964: PPUSH
10965: LD_INT 3
10967: PPUSH
10968: LD_INT 0
10970: PPUSH
10971: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10975: LD_EXP 4
10979: PPUSH
10980: LD_INT 5
10982: PPUSH
10983: LD_INT 0
10985: PPUSH
10986: CALL_OW 49
// ComCrawl ( Lisa ) ;
10990: LD_EXP 4
10994: PPUSH
10995: CALL_OW 137
// end ;
10999: LD_VAR 0 1
11003: RET
// export function PrepareLisSquad ; var i , un ; begin
11004: LD_INT 0
11006: PPUSH
11007: PPUSH
11008: PPUSH
// uc_side = 4 ;
11009: LD_ADDR_OWVAR 20
11013: PUSH
11014: LD_INT 4
11016: ST_TO_ADDR
// uc_nation = 1 ;
11017: LD_ADDR_OWVAR 21
11021: PUSH
11022: LD_INT 1
11024: ST_TO_ADDR
// hc_class := 2 ;
11025: LD_ADDR_OWVAR 28
11029: PUSH
11030: LD_INT 2
11032: ST_TO_ADDR
// hc_sex := sex_male ;
11033: LD_ADDR_OWVAR 27
11037: PUSH
11038: LD_INT 1
11040: ST_TO_ADDR
// hc_gallery :=  ;
11041: LD_ADDR_OWVAR 33
11045: PUSH
11046: LD_STRING 
11048: ST_TO_ADDR
// hc_name :=  ;
11049: LD_ADDR_OWVAR 26
11053: PUSH
11054: LD_STRING 
11056: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11057: LD_ADDR_OWVAR 30
11061: PUSH
11062: LD_INT 0
11064: PUSH
11065: LD_INT 1
11067: PUSH
11068: LD_INT 0
11070: PUSH
11071: LD_INT 0
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11080: LD_ADDR_OWVAR 31
11084: PUSH
11085: LD_INT 1
11087: PUSH
11088: LD_INT 2
11090: PUSH
11091: LD_INT 0
11093: PUSH
11094: LD_INT 0
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: ST_TO_ADDR
// un := CreateHuman ;
11103: LD_ADDR_VAR 0 3
11107: PUSH
11108: CALL_OW 44
11112: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11113: LD_VAR 0 3
11117: PPUSH
11118: LD_INT 6
11120: PPUSH
11121: LD_INT 0
11123: PPUSH
11124: CALL_OW 49
// hc_sex := sex_female ;
11128: LD_ADDR_OWVAR 27
11132: PUSH
11133: LD_INT 2
11135: ST_TO_ADDR
// hc_gallery :=  ;
11136: LD_ADDR_OWVAR 33
11140: PUSH
11141: LD_STRING 
11143: ST_TO_ADDR
// hc_name :=  ;
11144: LD_ADDR_OWVAR 26
11148: PUSH
11149: LD_STRING 
11151: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11152: LD_ADDR_OWVAR 30
11156: PUSH
11157: LD_INT 0
11159: PUSH
11160: LD_INT 0
11162: PUSH
11163: LD_INT 0
11165: PUSH
11166: LD_INT 1
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11175: LD_ADDR_OWVAR 31
11179: PUSH
11180: LD_INT 0
11182: PUSH
11183: LD_INT 1
11185: PUSH
11186: LD_INT 0
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: ST_TO_ADDR
// un := CreateHuman ;
11198: LD_ADDR_VAR 0 3
11202: PUSH
11203: CALL_OW 44
11207: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11208: LD_VAR 0 3
11212: PPUSH
11213: LD_INT 6
11215: PPUSH
11216: LD_INT 0
11218: PPUSH
11219: CALL_OW 49
// if not Bobby and not Cyrus then
11223: LD_EXP 2
11227: NOT
11228: PUSH
11229: LD_EXP 3
11233: NOT
11234: AND
11235: IFFALSE 11340
// begin hc_class := 1 ;
11237: LD_ADDR_OWVAR 28
11241: PUSH
11242: LD_INT 1
11244: ST_TO_ADDR
// hc_sex := sex_male ;
11245: LD_ADDR_OWVAR 27
11249: PUSH
11250: LD_INT 1
11252: ST_TO_ADDR
// hc_gallery :=  ;
11253: LD_ADDR_OWVAR 33
11257: PUSH
11258: LD_STRING 
11260: ST_TO_ADDR
// hc_name :=  ;
11261: LD_ADDR_OWVAR 26
11265: PUSH
11266: LD_STRING 
11268: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11269: LD_ADDR_OWVAR 30
11273: PUSH
11274: LD_INT 2
11276: PUSH
11277: LD_INT 3
11279: PUSH
11280: LD_INT 1
11282: PUSH
11283: LD_INT 0
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11292: LD_ADDR_OWVAR 31
11296: PUSH
11297: LD_INT 2
11299: PUSH
11300: LD_INT 3
11302: PUSH
11303: LD_INT 1
11305: PUSH
11306: LD_INT 0
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: ST_TO_ADDR
// un := CreateHuman ;
11315: LD_ADDR_VAR 0 3
11319: PUSH
11320: CALL_OW 44
11324: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11325: LD_VAR 0 3
11329: PPUSH
11330: LD_INT 31
11332: PPUSH
11333: LD_INT 0
11335: PPUSH
11336: CALL_OW 49
// end ; InitHc ;
11340: CALL_OW 19
// end ;
11344: LD_VAR 0 1
11348: RET
// export function PrepareOtherAmericans ; begin
11349: LD_INT 0
11351: PPUSH
// uc_side = 4 ;
11352: LD_ADDR_OWVAR 20
11356: PUSH
11357: LD_INT 4
11359: ST_TO_ADDR
// uc_nation = 1 ;
11360: LD_ADDR_OWVAR 21
11364: PUSH
11365: LD_INT 1
11367: ST_TO_ADDR
// hc_gallery =  ;
11368: LD_ADDR_OWVAR 33
11372: PUSH
11373: LD_STRING 
11375: ST_TO_ADDR
// hc_name = Tom Garvin ;
11376: LD_ADDR_OWVAR 26
11380: PUSH
11381: LD_STRING Tom Garvin
11383: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11384: LD_INT 1
11386: PPUSH
11387: LD_INT 1
11389: PPUSH
11390: LD_INT 1
11392: PPUSH
11393: LD_INT 2
11395: PPUSH
11396: CALL_OW 12
11400: PPUSH
11401: CALL_OW 380
// Brian = CreateHuman ;
11405: LD_ADDR_EXP 6
11409: PUSH
11410: CALL_OW 44
11414: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11415: LD_EXP 6
11419: PPUSH
11420: LD_INT 10
11422: PPUSH
11423: LD_INT 0
11425: PPUSH
11426: CALL_OW 49
// hc_name = Jerry White ;
11430: LD_ADDR_OWVAR 26
11434: PUSH
11435: LD_STRING Jerry White
11437: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11438: LD_INT 1
11440: PPUSH
11441: LD_INT 3
11443: PPUSH
11444: LD_INT 1
11446: PPUSH
11447: LD_INT 2
11449: PPUSH
11450: CALL_OW 12
11454: PPUSH
11455: CALL_OW 380
// Jerry = CreateHuman ;
11459: LD_ADDR_EXP 7
11463: PUSH
11464: CALL_OW 44
11468: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11469: LD_EXP 7
11473: PPUSH
11474: LD_INT 10
11476: PPUSH
11477: LD_INT 0
11479: PPUSH
11480: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11484: LD_EXP 6
11488: PUSH
11489: LD_EXP 7
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PPUSH
11498: CALL_OW 140
// end ;
11502: LD_VAR 0 1
11506: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11507: LD_INT 0
11509: PPUSH
11510: PPUSH
11511: PPUSH
// for i = 1 to 6 do
11512: LD_ADDR_VAR 0 2
11516: PUSH
11517: DOUBLE
11518: LD_INT 1
11520: DEC
11521: ST_TO_ADDR
11522: LD_INT 6
11524: PUSH
11525: FOR_TO
11526: IFFALSE 11620
// begin uc_side = 4 ;
11528: LD_ADDR_OWVAR 20
11532: PUSH
11533: LD_INT 4
11535: ST_TO_ADDR
// uc_nation = 1 ;
11536: LD_ADDR_OWVAR 21
11540: PUSH
11541: LD_INT 1
11543: ST_TO_ADDR
// hc_gallery =  ;
11544: LD_ADDR_OWVAR 33
11548: PUSH
11549: LD_STRING 
11551: ST_TO_ADDR
// hc_name =  ;
11552: LD_ADDR_OWVAR 26
11556: PUSH
11557: LD_STRING 
11559: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11560: LD_INT 0
11562: PPUSH
11563: LD_INT 1
11565: PPUSH
11566: LD_INT 4
11568: PPUSH
11569: CALL_OW 12
11573: PPUSH
11574: LD_INT 1
11576: PPUSH
11577: CALL_OW 380
// un = CreateHuman ;
11581: LD_ADDR_VAR 0 3
11585: PUSH
11586: CALL_OW 44
11590: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11591: LD_VAR 0 3
11595: PPUSH
11596: LD_INT 16
11598: PPUSH
11599: LD_INT 0
11601: PPUSH
11602: CALL_OW 49
// SetLives ( un , 1 ) ;
11606: LD_VAR 0 3
11610: PPUSH
11611: LD_INT 1
11613: PPUSH
11614: CALL_OW 234
// end ;
11618: GO 11525
11620: POP
11621: POP
// DyingSold = CreateHuman ;
11622: LD_ADDR_EXP 34
11626: PUSH
11627: CALL_OW 44
11631: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11632: LD_EXP 34
11636: PPUSH
11637: LD_INT 16
11639: PPUSH
11640: LD_INT 0
11642: PPUSH
11643: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11647: LD_EXP 34
11651: PPUSH
11652: LD_INT 250
11654: PPUSH
11655: CALL_OW 234
// end ; end_of_file
11659: LD_VAR 0 1
11663: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11664: LD_INT 0
11666: PPUSH
11667: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11668: LD_ADDR_VAR 0 2
11672: PUSH
11673: LD_INT 22
11675: PUSH
11676: LD_INT 1
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: LD_INT 23
11685: PUSH
11686: LD_INT 1
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 25
11695: PUSH
11696: LD_INT 2
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 50
11705: PUSH
11706: EMPTY
11707: LIST
11708: PUSH
11709: LD_INT 56
11711: PUSH
11712: EMPTY
11713: LIST
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: PPUSH
11722: CALL_OW 69
11726: PUSH
11727: LD_EXP 1
11731: PUSH
11732: EMPTY
11733: LIST
11734: DIFF
11735: ST_TO_ADDR
// uc_side = 6 ;
11736: LD_ADDR_OWVAR 20
11740: PUSH
11741: LD_INT 6
11743: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11744: LD_ADDR_EXP 8
11748: PUSH
11749: LD_STRING Mikhail
11751: PPUSH
11752: CALL_OW 25
11756: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
11757: LD_EXP 8
11761: PPUSH
11762: LD_VAR 0 2
11766: PUSH
11767: LD_INT 1
11769: ARRAY
11770: PPUSH
11771: CALL_OW 250
11775: PPUSH
11776: LD_VAR 0 2
11780: PUSH
11781: LD_INT 1
11783: ARRAY
11784: PPUSH
11785: CALL_OW 251
11789: PPUSH
11790: LD_INT 3
11792: PPUSH
11793: LD_INT 1
11795: PPUSH
11796: CALL_OW 50
// end ;
11800: LD_VAR 0 1
11804: RET
// export function PrepareRussianCommander ; begin
11805: LD_INT 0
11807: PPUSH
// uc_side = 3 ;
11808: LD_ADDR_OWVAR 20
11812: PUSH
11813: LD_INT 3
11815: ST_TO_ADDR
// uc_nation = 3 ;
11816: LD_ADDR_OWVAR 21
11820: PUSH
11821: LD_INT 3
11823: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11824: LD_ADDR_EXP 19
11828: PUSH
11829: LD_STRING Natasza
11831: PPUSH
11832: CALL_OW 25
11836: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11837: LD_EXP 19
11841: PPUSH
11842: LD_INT 24
11844: PPUSH
11845: LD_INT 0
11847: PPUSH
11848: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11852: LD_EXP 19
11856: PPUSH
11857: LD_INT 56
11859: PPUSH
11860: LD_INT 16
11862: PPUSH
11863: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11867: LD_ADDR_EXP 24
11871: PUSH
11872: LD_EXP 24
11876: PUSH
11877: LD_EXP 19
11881: ADD
11882: ST_TO_ADDR
// end ;
11883: LD_VAR 0 1
11887: RET
// export function PrepareSouthBase ; var i , un ; begin
11888: LD_INT 0
11890: PPUSH
11891: PPUSH
11892: PPUSH
// for i = 1 to 2 do
11893: LD_ADDR_VAR 0 2
11897: PUSH
11898: DOUBLE
11899: LD_INT 1
11901: DEC
11902: ST_TO_ADDR
11903: LD_INT 2
11905: PUSH
11906: FOR_TO
11907: IFFALSE 12016
// begin uc_side = 3 ;
11909: LD_ADDR_OWVAR 20
11913: PUSH
11914: LD_INT 3
11916: ST_TO_ADDR
// uc_nation = 3 ;
11917: LD_ADDR_OWVAR 21
11921: PUSH
11922: LD_INT 3
11924: ST_TO_ADDR
// hc_gallery =  ;
11925: LD_ADDR_OWVAR 33
11929: PUSH
11930: LD_STRING 
11932: ST_TO_ADDR
// hc_name =  ;
11933: LD_ADDR_OWVAR 26
11937: PUSH
11938: LD_STRING 
11940: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11941: LD_INT 1
11943: PPUSH
11944: LD_INT 1
11946: PPUSH
11947: LD_EXP 13
11951: PPUSH
11952: LD_EXP 14
11956: PPUSH
11957: CALL_OW 12
11961: PPUSH
11962: CALL_OW 380
// hc_importance = 0 ;
11966: LD_ADDR_OWVAR 32
11970: PUSH
11971: LD_INT 0
11973: ST_TO_ADDR
// un = CreateHuman ;
11974: LD_ADDR_VAR 0 3
11978: PUSH
11979: CALL_OW 44
11983: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11984: LD_VAR 0 3
11988: PPUSH
11989: LD_INT 11
11991: PPUSH
11992: LD_INT 0
11994: PPUSH
11995: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11999: LD_VAR 0 3
12003: PPUSH
12004: LD_INT 111
12006: PPUSH
12007: LD_INT 38
12009: PPUSH
12010: CALL_OW 118
// end ;
12014: GO 11906
12016: POP
12017: POP
// for i = 1 to Difficulty do
12018: LD_ADDR_VAR 0 2
12022: PUSH
12023: DOUBLE
12024: LD_INT 1
12026: DEC
12027: ST_TO_ADDR
12028: LD_OWVAR 67
12032: PUSH
12033: FOR_TO
12034: IFFALSE 12117
// begin uc_side = 3 ;
12036: LD_ADDR_OWVAR 20
12040: PUSH
12041: LD_INT 3
12043: ST_TO_ADDR
// uc_nation = 3 ;
12044: LD_ADDR_OWVAR 21
12048: PUSH
12049: LD_INT 3
12051: ST_TO_ADDR
// hc_gallery =  ;
12052: LD_ADDR_OWVAR 33
12056: PUSH
12057: LD_STRING 
12059: ST_TO_ADDR
// hc_name =  ;
12060: LD_ADDR_OWVAR 26
12064: PUSH
12065: LD_STRING 
12067: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12068: LD_INT 0
12070: PPUSH
12071: LD_INT 3
12073: PPUSH
12074: LD_EXP 13
12078: PPUSH
12079: LD_EXP 14
12083: PPUSH
12084: CALL_OW 12
12088: PPUSH
12089: CALL_OW 380
// un = CreateHuman ;
12093: LD_ADDR_VAR 0 3
12097: PUSH
12098: CALL_OW 44
12102: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12103: LD_VAR 0 3
12107: PPUSH
12108: LD_INT 10
12110: PPUSH
12111: CALL_OW 52
// end ;
12115: GO 12033
12117: POP
12118: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12119: LD_INT 3
12121: PPUSH
12122: LD_INT 3
12124: PPUSH
12125: LD_INT 33
12127: PPUSH
12128: LD_EXP 13
12132: PPUSH
12133: LD_EXP 14
12137: PPUSH
12138: CALL_OW 12
12142: PPUSH
12143: LD_INT 1
12145: PPUSH
12146: LD_INT 1
12148: PUSH
12149: LD_INT 1
12151: PPUSH
12152: LD_INT 2
12154: PPUSH
12155: CALL_OW 12
12159: PUSH
12160: LD_INT 1
12162: PPUSH
12163: LD_INT 2
12165: PPUSH
12166: CALL_OW 12
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: LIST
12175: PUSH
12176: LD_OWVAR 67
12180: ARRAY
12181: PPUSH
12182: CALL 8672 0 6
// for i in UnitsInside ( arm2 ) do
12186: LD_ADDR_VAR 0 2
12190: PUSH
12191: LD_INT 33
12193: PPUSH
12194: CALL_OW 313
12198: PUSH
12199: FOR_IN
12200: IFFALSE 12220
// southBaseDefenders = southBaseDefenders ^ i ;
12202: LD_ADDR_EXP 25
12206: PUSH
12207: LD_EXP 25
12211: PUSH
12212: LD_VAR 0 2
12216: ADD
12217: ST_TO_ADDR
12218: GO 12199
12220: POP
12221: POP
// end ;
12222: LD_VAR 0 1
12226: RET
// export function PrepareNorthBase ; var i , un ; begin
12227: LD_INT 0
12229: PPUSH
12230: PPUSH
12231: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: DOUBLE
12238: LD_INT 1
12240: DEC
12241: ST_TO_ADDR
12242: LD_INT 1
12244: PPUSH
12245: LD_INT 2
12247: PPUSH
12248: CALL_OW 12
12252: PUSH
12253: LD_INT 2
12255: PPUSH
12256: LD_INT 3
12258: PPUSH
12259: CALL_OW 12
12263: PUSH
12264: LD_INT 3
12266: PPUSH
12267: LD_INT 4
12269: PPUSH
12270: CALL_OW 12
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: LIST
12279: PUSH
12280: LD_OWVAR 67
12284: ARRAY
12285: PUSH
12286: FOR_TO
12287: IFFALSE 12373
// begin uc_side = 3 ;
12289: LD_ADDR_OWVAR 20
12293: PUSH
12294: LD_INT 3
12296: ST_TO_ADDR
// uc_nation = 3 ;
12297: LD_ADDR_OWVAR 21
12301: PUSH
12302: LD_INT 3
12304: ST_TO_ADDR
// hc_gallery =  ;
12305: LD_ADDR_OWVAR 33
12309: PUSH
12310: LD_STRING 
12312: ST_TO_ADDR
// hc_name =  ;
12313: LD_ADDR_OWVAR 26
12317: PUSH
12318: LD_STRING 
12320: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12321: LD_INT 0
12323: PPUSH
12324: LD_INT 1
12326: PPUSH
12327: LD_EXP 13
12331: PPUSH
12332: LD_EXP 14
12336: PPUSH
12337: CALL_OW 12
12341: PPUSH
12342: CALL_OW 380
// un = CreateHuman ;
12346: LD_ADDR_VAR 0 3
12350: PUSH
12351: CALL_OW 44
12355: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12356: LD_VAR 0 3
12360: PPUSH
12361: LD_INT 14
12363: PPUSH
12364: LD_INT 0
12366: PPUSH
12367: CALL_OW 49
// end ;
12371: GO 12286
12373: POP
12374: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12375: LD_INT 3
12377: PPUSH
12378: LD_INT 3
12380: PPUSH
12381: LD_INT 2
12383: PPUSH
12384: LD_EXP 13
12388: PPUSH
12389: LD_EXP 14
12393: PPUSH
12394: CALL_OW 12
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_INT 1
12404: PPUSH
12405: LD_INT 2
12407: PPUSH
12408: CALL_OW 12
12412: PUSH
12413: LD_INT 1
12415: PPUSH
12416: LD_INT 3
12418: PPUSH
12419: CALL_OW 12
12423: PUSH
12424: LD_INT 1
12426: PPUSH
12427: LD_INT 3
12429: PPUSH
12430: CALL_OW 12
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: LD_OWVAR 67
12444: ARRAY
12445: PPUSH
12446: CALL 8672 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12450: LD_INT 3
12452: PPUSH
12453: LD_INT 3
12455: PPUSH
12456: LD_INT 23
12458: PPUSH
12459: LD_EXP 13
12463: PPUSH
12464: LD_EXP 14
12468: PPUSH
12469: CALL_OW 12
12473: PPUSH
12474: LD_INT 4
12476: PPUSH
12477: LD_INT 0
12479: PUSH
12480: LD_INT 1
12482: PUSH
12483: LD_INT 2
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: LIST
12490: PUSH
12491: LD_OWVAR 67
12495: ARRAY
12496: PPUSH
12497: CALL 8672 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12501: LD_INT 3
12503: PPUSH
12504: LD_INT 3
12506: PPUSH
12507: LD_INT 1
12509: PPUSH
12510: LD_EXP 13
12514: PPUSH
12515: LD_EXP 14
12519: PPUSH
12520: CALL_OW 12
12524: PPUSH
12525: LD_INT 2
12527: PPUSH
12528: LD_INT 1
12530: PUSH
12531: LD_INT 2
12533: PUSH
12534: LD_INT 2
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: LIST
12541: PUSH
12542: LD_OWVAR 67
12546: ARRAY
12547: PPUSH
12548: CALL 8672 0 6
// for i in UnitsInside ( arm1 ) do
12552: LD_ADDR_VAR 0 2
12556: PUSH
12557: LD_INT 2
12559: PPUSH
12560: CALL_OW 313
12564: PUSH
12565: FOR_IN
12566: IFFALSE 12586
// northBaseDefenders = northBaseDefenders ^ i ;
12568: LD_ADDR_EXP 24
12572: PUSH
12573: LD_EXP 24
12577: PUSH
12578: LD_VAR 0 2
12582: ADD
12583: ST_TO_ADDR
12584: GO 12565
12586: POP
12587: POP
// end ;
12588: LD_VAR 0 1
12592: RET
// export function PrepareOtherRussians ; var i , un ; begin
12593: LD_INT 0
12595: PPUSH
12596: PPUSH
12597: PPUSH
// for i = 1 to 2 do
12598: LD_ADDR_VAR 0 2
12602: PUSH
12603: DOUBLE
12604: LD_INT 1
12606: DEC
12607: ST_TO_ADDR
12608: LD_INT 2
12610: PUSH
12611: FOR_TO
12612: IFFALSE 12713
// begin uc_side = 3 ;
12614: LD_ADDR_OWVAR 20
12618: PUSH
12619: LD_INT 3
12621: ST_TO_ADDR
// uc_nation = 3 ;
12622: LD_ADDR_OWVAR 21
12626: PUSH
12627: LD_INT 3
12629: ST_TO_ADDR
// hc_gallery =  ;
12630: LD_ADDR_OWVAR 33
12634: PUSH
12635: LD_STRING 
12637: ST_TO_ADDR
// hc_name =  ;
12638: LD_ADDR_OWVAR 26
12642: PUSH
12643: LD_STRING 
12645: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12646: LD_INT 0
12648: PPUSH
12649: LD_INT 1
12651: PPUSH
12652: LD_EXP 13
12656: PPUSH
12657: LD_EXP 14
12661: PPUSH
12662: CALL_OW 12
12666: PPUSH
12667: CALL_OW 380
// un = CreateHuman ;
12671: LD_ADDR_VAR 0 3
12675: PUSH
12676: CALL_OW 44
12680: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12681: LD_VAR 0 3
12685: PPUSH
12686: LD_INT 9
12688: PPUSH
12689: LD_INT 0
12691: PPUSH
12692: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12696: LD_VAR 0 3
12700: PPUSH
12701: LD_INT 80
12703: PPUSH
12704: LD_INT 73
12706: PPUSH
12707: CALL_OW 118
// end ;
12711: GO 12611
12713: POP
12714: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12715: LD_ADDR_VAR 0 2
12719: PUSH
12720: LD_INT 22
12722: PUSH
12723: LD_INT 3
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PUSH
12730: LD_INT 30
12732: PUSH
12733: LD_INT 31
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PPUSH
12744: CALL_OW 69
12748: PUSH
12749: FOR_IN
12750: IFFALSE 12778
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12752: LD_EXP 13
12756: PPUSH
12757: LD_EXP 14
12761: PPUSH
12762: CALL_OW 12
12766: PPUSH
12767: LD_VAR 0 2
12771: PPUSH
12772: CALL 8782 0 2
12776: GO 12749
12778: POP
12779: POP
// end ;
12780: LD_VAR 0 1
12784: RET
// export function PrepareCargoBays ; begin
12785: LD_INT 0
12787: PPUSH
// uc_side = 3 ;
12788: LD_ADDR_OWVAR 20
12792: PUSH
12793: LD_INT 3
12795: ST_TO_ADDR
// uc_nation = 3 ;
12796: LD_ADDR_OWVAR 21
12800: PUSH
12801: LD_INT 3
12803: ST_TO_ADDR
// vc_engine = 1 ;
12804: LD_ADDR_OWVAR 39
12808: PUSH
12809: LD_INT 1
12811: ST_TO_ADDR
// vc_control = 1 ;
12812: LD_ADDR_OWVAR 38
12816: PUSH
12817: LD_INT 1
12819: ST_TO_ADDR
// vc_weapon = 51 ;
12820: LD_ADDR_OWVAR 40
12824: PUSH
12825: LD_INT 51
12827: ST_TO_ADDR
// vc_chassis = 22 ;
12828: LD_ADDR_OWVAR 37
12832: PUSH
12833: LD_INT 22
12835: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12836: LD_ADDR_EXP 15
12840: PUSH
12841: CALL_OW 45
12845: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12846: LD_ADDR_EXP 16
12850: PUSH
12851: CALL_OW 45
12855: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12856: LD_EXP 15
12860: PPUSH
12861: LD_INT 13
12863: PPUSH
12864: LD_INT 0
12866: PPUSH
12867: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12871: LD_EXP 16
12875: PPUSH
12876: LD_INT 13
12878: PPUSH
12879: LD_INT 0
12881: PPUSH
12882: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12886: LD_EXP 15
12890: PPUSH
12891: LD_INT 2
12893: PPUSH
12894: LD_INT 70
12896: PUSH
12897: LD_INT 50
12899: PUSH
12900: LD_INT 30
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_OWVAR 67
12912: ARRAY
12913: PPUSH
12914: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12918: LD_EXP 16
12922: PPUSH
12923: LD_INT 2
12925: PPUSH
12926: LD_INT 70
12928: PUSH
12929: LD_INT 50
12931: PUSH
12932: LD_INT 30
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: LIST
12939: PUSH
12940: LD_OWVAR 67
12944: ARRAY
12945: PPUSH
12946: CALL_OW 291
// hc_gallery =  ;
12950: LD_ADDR_OWVAR 33
12954: PUSH
12955: LD_STRING 
12957: ST_TO_ADDR
// hc_name =  ;
12958: LD_ADDR_OWVAR 26
12962: PUSH
12963: LD_STRING 
12965: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12966: LD_INT 1
12968: PPUSH
12969: LD_INT 3
12971: PPUSH
12972: LD_INT 1
12974: PPUSH
12975: LD_INT 2
12977: PPUSH
12978: CALL_OW 12
12982: PPUSH
12983: CALL_OW 380
// driver1 = CreateHuman ;
12987: LD_ADDR_EXP 17
12991: PUSH
12992: CALL_OW 44
12996: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12997: LD_EXP 17
13001: PPUSH
13002: LD_EXP 15
13006: PPUSH
13007: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13011: LD_ADDR_OWVAR 26
13015: PUSH
13016: LD_STRING Nikolai Andreyev
13018: ST_TO_ADDR
// driver2 = CreateHuman ;
13019: LD_ADDR_EXP 18
13023: PUSH
13024: CALL_OW 44
13028: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13029: LD_EXP 18
13033: PPUSH
13034: LD_EXP 16
13038: PPUSH
13039: CALL_OW 52
// end ;
13043: LD_VAR 0 1
13047: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
13048: LD_INT 0
13050: PPUSH
13051: PPUSH
13052: PPUSH
13053: PPUSH
13054: PPUSH
13055: PPUSH
13056: PPUSH
// uc_side = 3 ;
13057: LD_ADDR_OWVAR 20
13061: PUSH
13062: LD_INT 3
13064: ST_TO_ADDR
// uc_nation = 3 ;
13065: LD_ADDR_OWVAR 21
13069: PUSH
13070: LD_INT 3
13072: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13073: LD_ADDR_VAR 0 4
13077: PUSH
13078: DOUBLE
13079: LD_INT 1
13081: DEC
13082: ST_TO_ADDR
13083: LD_VAR 0 1
13087: PUSH
13088: LD_INT 1
13090: PPUSH
13091: LD_INT 3
13093: PPUSH
13094: CALL_OW 12
13098: PLUS
13099: PUSH
13100: FOR_TO
13101: IFFALSE 13278
// begin vc_engine = 1 ;
13103: LD_ADDR_OWVAR 39
13107: PUSH
13108: LD_INT 1
13110: ST_TO_ADDR
// vc_control = 1 ;
13111: LD_ADDR_OWVAR 38
13115: PUSH
13116: LD_INT 1
13118: ST_TO_ADDR
// vc_weapon = 42 ;
13119: LD_ADDR_OWVAR 40
13123: PUSH
13124: LD_INT 42
13126: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13127: LD_ADDR_OWVAR 37
13131: PUSH
13132: LD_INT 21
13134: PUSH
13135: LD_INT 22
13137: PUSH
13138: LD_INT 22
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: LIST
13145: PUSH
13146: LD_OWVAR 67
13150: ARRAY
13151: ST_TO_ADDR
// veh = CreateVehicle ;
13152: LD_ADDR_VAR 0 5
13156: PUSH
13157: CALL_OW 45
13161: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13162: LD_VAR 0 5
13166: PPUSH
13167: LD_VAR 0 2
13171: PPUSH
13172: LD_INT 0
13174: PPUSH
13175: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13179: LD_ADDR_EXP 26
13183: PUSH
13184: LD_EXP 26
13188: PUSH
13189: LD_VAR 0 5
13193: ADD
13194: ST_TO_ADDR
// hc_gallery =  ;
13195: LD_ADDR_OWVAR 33
13199: PUSH
13200: LD_STRING 
13202: ST_TO_ADDR
// hc_name =  ;
13203: LD_ADDR_OWVAR 26
13207: PUSH
13208: LD_STRING 
13210: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13211: LD_INT 0
13213: PPUSH
13214: LD_INT 3
13216: PPUSH
13217: LD_EXP 13
13221: PPUSH
13222: LD_EXP 14
13226: PPUSH
13227: CALL_OW 12
13231: PPUSH
13232: CALL_OW 380
// un = CreateHuman ;
13236: LD_ADDR_VAR 0 6
13240: PUSH
13241: CALL_OW 44
13245: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13246: LD_VAR 0 6
13250: PPUSH
13251: LD_VAR 0 5
13255: PPUSH
13256: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13260: LD_ADDR_EXP 26
13264: PUSH
13265: LD_EXP 26
13269: PUSH
13270: LD_VAR 0 6
13274: ADD
13275: ST_TO_ADDR
// end ;
13276: GO 13100
13278: POP
13279: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13280: LD_INT 0
13282: PPUSH
13283: LD_INT 2
13285: PPUSH
13286: LD_EXP 13
13290: PPUSH
13291: LD_EXP 14
13295: PPUSH
13296: CALL_OW 12
13300: PPUSH
13301: CALL_OW 380
// un = CreateHuman ;
13305: LD_ADDR_VAR 0 6
13309: PUSH
13310: CALL_OW 44
13314: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13315: LD_ADDR_VAR 0 4
13319: PUSH
13320: DOUBLE
13321: LD_INT 1
13323: DEC
13324: ST_TO_ADDR
13325: LD_VAR 0 1
13329: PUSH
13330: LD_INT 2
13332: PUSH
13333: LD_INT 2
13335: MUL
13336: PLUS
13337: PUSH
13338: FOR_TO
13339: IFFALSE 13427
// begin hc_gallery =  ;
13341: LD_ADDR_OWVAR 33
13345: PUSH
13346: LD_STRING 
13348: ST_TO_ADDR
// hc_name =  ;
13349: LD_ADDR_OWVAR 26
13353: PUSH
13354: LD_STRING 
13356: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13357: LD_INT 1
13359: PPUSH
13360: LD_INT 1
13362: PPUSH
13363: LD_EXP 13
13367: PPUSH
13368: LD_EXP 14
13372: PPUSH
13373: CALL_OW 12
13377: PPUSH
13378: CALL_OW 380
// un = CreateHuman ;
13382: LD_ADDR_VAR 0 6
13386: PUSH
13387: CALL_OW 44
13391: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13392: LD_VAR 0 6
13396: PPUSH
13397: LD_VAR 0 2
13401: PPUSH
13402: LD_INT 0
13404: PPUSH
13405: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13409: LD_ADDR_EXP 26
13413: PUSH
13414: LD_EXP 26
13418: PUSH
13419: LD_VAR 0 6
13423: ADD
13424: ST_TO_ADDR
// end ;
13425: GO 13338
13427: POP
13428: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13429: LD_ADDR_VAR 0 7
13433: PUSH
13434: LD_INT 26
13436: PPUSH
13437: LD_INT 22
13439: PUSH
13440: LD_INT 3
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: LD_INT 21
13449: PUSH
13450: LD_INT 1
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 26
13459: PUSH
13460: LD_INT 1
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: PPUSH
13472: CALL_OW 70
13476: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13477: LD_VAR 0 7
13481: PUSH
13482: LD_INT 1
13484: ARRAY
13485: PPUSH
13486: LD_STRING D9-Rus3-1
13488: PPUSH
13489: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13493: LD_VAR 0 7
13497: PUSH
13498: LD_INT 2
13500: ARRAY
13501: PPUSH
13502: LD_STRING D9-Russ-1
13504: PPUSH
13505: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13509: LD_INT 35
13511: PPUSH
13512: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13516: LD_ADDR_VAR 0 4
13520: PUSH
13521: LD_INT 26
13523: PPUSH
13524: LD_INT 22
13526: PUSH
13527: LD_INT 3
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: EMPTY
13535: LIST
13536: PPUSH
13537: CALL_OW 70
13541: PUSH
13542: FOR_IN
13543: IFFALSE 13715
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13545: LD_ADDR_VAR 0 8
13549: PUSH
13550: LD_INT 22
13552: PUSH
13553: LD_INT 1
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 69
13564: PPUSH
13565: LD_VAR 0 4
13569: PPUSH
13570: CALL_OW 74
13574: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13575: LD_ADDR_VAR 0 9
13579: PUSH
13580: LD_INT 22
13582: PUSH
13583: LD_INT 1
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 2
13592: PUSH
13593: LD_INT 59
13595: PUSH
13596: EMPTY
13597: LIST
13598: PUSH
13599: LD_INT 21
13601: PUSH
13602: LD_INT 1
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: PUSH
13609: LD_INT 21
13611: PUSH
13612: LD_INT 2
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: EMPTY
13630: LIST
13631: PPUSH
13632: CALL_OW 69
13636: PPUSH
13637: LD_VAR 0 4
13641: PPUSH
13642: CALL_OW 74
13646: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13647: LD_VAR 0 4
13651: PPUSH
13652: LD_VAR 0 8
13656: PPUSH
13657: CALL_OW 296
13661: PUSH
13662: LD_INT 8
13664: PLUS
13665: PUSH
13666: LD_VAR 0 4
13670: PPUSH
13671: LD_VAR 0 9
13675: PPUSH
13676: CALL_OW 296
13680: LESS
13681: IFFALSE 13699
// begin ComAttackUnit ( i , target1 ) ;
13683: LD_VAR 0 4
13687: PPUSH
13688: LD_VAR 0 8
13692: PPUSH
13693: CALL_OW 115
// end else
13697: GO 13713
// begin ComAttackUnit ( i , target2 ) ;
13699: LD_VAR 0 4
13703: PPUSH
13704: LD_VAR 0 9
13708: PPUSH
13709: CALL_OW 115
// end ; end ;
13713: GO 13542
13715: POP
13716: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13717: LD_INT 26
13719: PPUSH
13720: LD_INT 22
13722: PUSH
13723: LD_INT 3
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 2
13732: PUSH
13733: LD_INT 21
13735: PUSH
13736: LD_INT 1
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 21
13745: PUSH
13746: LD_INT 2
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: LD_INT 59
13755: PUSH
13756: EMPTY
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PPUSH
13769: CALL_OW 70
13773: PUSH
13774: LD_INT 0
13776: EQUAL
13777: IFFALSE 13509
// end ; end_of_file
13779: LD_VAR 0 3
13783: RET
// every 0 0$1 do
13784: GO 13786
13786: DISABLE
// begin enable ;
13787: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13788: LD_INT 3
13790: PPUSH
13791: LD_INT 1
13793: PPUSH
13794: LD_INT 22
13796: PPUSH
13797: CALL 8918 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13801: LD_INT 3
13803: PPUSH
13804: LD_INT 20
13806: PPUSH
13807: LD_INT 22
13809: PPUSH
13810: LD_INT 23
13812: PPUSH
13813: CALL 9164 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13817: LD_INT 3
13819: PPUSH
13820: LD_INT 21
13822: PPUSH
13823: LD_INT 23
13825: PPUSH
13826: CALL 9441 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13830: LD_INT 22
13832: PPUSH
13833: LD_INT 1
13835: PPUSH
13836: LD_EXP 24
13840: PPUSH
13841: LD_INT 2
13843: PPUSH
13844: LD_INT 3
13846: PPUSH
13847: CALL 9913 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13851: LD_INT 23
13853: PPUSH
13854: LD_INT 1
13856: PPUSH
13857: LD_EXP 25
13861: PPUSH
13862: LD_INT 33
13864: PPUSH
13865: LD_INT 1
13867: PPUSH
13868: CALL 9913 0 5
// end ; end_of_file
13872: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13873: LD_VAR 0 1
13877: PPUSH
13878: CALL_OW 255
13882: PUSH
13883: LD_INT 1
13885: EQUAL
13886: PUSH
13887: LD_VAR 0 1
13891: PPUSH
13892: CALL_OW 247
13896: PUSH
13897: LD_INT 1
13899: EQUAL
13900: AND
13901: IFFALSE 13917
// deadsCounter = deadsCounter + 1 ;
13903: LD_ADDR_EXP 31
13907: PUSH
13908: LD_EXP 31
13912: PUSH
13913: LD_INT 1
13915: PLUS
13916: ST_TO_ADDR
// end ;
13917: PPOPN 1
13919: END
// on Command ( comandid ) do var i , j , tmp ;
13920: LD_INT 0
13922: PPUSH
13923: PPUSH
13924: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13925: LD_ADDR_VAR 0 2
13929: PUSH
13930: LD_INT 22
13932: PUSH
13933: LD_INT 1
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: LD_INT 21
13942: PUSH
13943: LD_INT 2
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PPUSH
13954: CALL_OW 69
13958: PUSH
13959: FOR_IN
13960: IFFALSE 14085
// begin if GetTaskList ( i ) > 0 then
13962: LD_VAR 0 2
13966: PPUSH
13967: CALL_OW 437
13971: PUSH
13972: LD_INT 0
13974: GREATER
13975: IFFALSE 14083
// begin for j = 1 to GetTaskList ( i ) do
13977: LD_ADDR_VAR 0 3
13981: PUSH
13982: DOUBLE
13983: LD_INT 1
13985: DEC
13986: ST_TO_ADDR
13987: LD_VAR 0 2
13991: PPUSH
13992: CALL_OW 437
13996: PUSH
13997: FOR_TO
13998: IFFALSE 14081
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14000: LD_ADDR_VAR 0 4
14004: PUSH
14005: LD_VAR 0 2
14009: PPUSH
14010: CALL_OW 437
14014: PUSH
14015: LD_VAR 0 3
14019: ARRAY
14020: PUSH
14021: LD_INT 4
14023: ARRAY
14024: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14025: LD_VAR 0 4
14029: PPUSH
14030: CALL_OW 255
14034: PUSH
14035: LD_INT 3
14037: EQUAL
14038: PUSH
14039: LD_VAR 0 4
14043: PPUSH
14044: CALL_OW 247
14048: PUSH
14049: LD_INT 2
14051: EQUAL
14052: AND
14053: PUSH
14054: LD_VAR 0 4
14058: PPUSH
14059: CALL_OW 264
14063: PUSH
14064: LD_INT 51
14066: EQUAL
14067: AND
14068: IFFALSE 14079
// ComStop ( i ) ;
14070: LD_VAR 0 2
14074: PPUSH
14075: CALL_OW 141
// end ;
14079: GO 13997
14081: POP
14082: POP
// end ; end ;
14083: GO 13959
14085: POP
14086: POP
// end ; end_of_file
14087: PPOPN 4
14089: END
// every 0 0$1 trigger IsDead ( JMM ) do
14090: LD_EXP 1
14094: PPUSH
14095: CALL_OW 301
14099: IFFALSE 14111
14101: GO 14103
14103: DISABLE
// YouLost ( JMM ) ;
14104: LD_STRING JMM
14106: PPUSH
14107: CALL_OW 104
14111: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
14112: LD_INT 1
14114: PPUSH
14115: CALL_OW 301
14119: PUSH
14120: LD_INT 10
14122: PPUSH
14123: CALL_OW 301
14127: OR
14128: IFFALSE 14140
14130: GO 14132
14132: DISABLE
// YouLost ( DepotDestroyed ) ;
14133: LD_STRING DepotDestroyed
14135: PPUSH
14136: CALL_OW 104
14140: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14141: LD_INT 22
14143: PUSH
14144: LD_INT 1
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: LD_INT 21
14153: PUSH
14154: LD_INT 1
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PUSH
14161: LD_INT 25
14163: PUSH
14164: LD_INT 2
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: LIST
14175: PPUSH
14176: CALL_OW 69
14180: PUSH
14181: LD_INT 0
14183: EQUAL
14184: PUSH
14185: LD_INT 22
14187: PUSH
14188: LD_INT 4
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PUSH
14195: LD_INT 21
14197: PUSH
14198: LD_INT 1
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 25
14207: PUSH
14208: LD_INT 2
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: LIST
14219: PPUSH
14220: CALL_OW 69
14224: PUSH
14225: LD_INT 0
14227: EQUAL
14228: AND
14229: PUSH
14230: LD_INT 1
14232: PPUSH
14233: CALL_OW 255
14237: PUSH
14238: LD_INT 3
14240: EQUAL
14241: AND
14242: PUSH
14243: LD_INT 10
14245: PPUSH
14246: CALL_OW 255
14250: PUSH
14251: LD_INT 3
14253: EQUAL
14254: AND
14255: IFFALSE 14267
14257: GO 14259
14259: DISABLE
// YouLost ( Engineer ) ;
14260: LD_STRING Engineer
14262: PPUSH
14263: CALL_OW 104
14267: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14268: LD_INT 1
14270: PPUSH
14271: CALL_OW 255
14275: PUSH
14276: LD_INT 3
14278: EQUAL
14279: PUSH
14280: LD_EXP 27
14284: PUSH
14285: LD_INT 1
14287: EQUAL
14288: AND
14289: IFFALSE 14301
14291: GO 14293
14293: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14294: LD_STRING DepotCaptured
14296: PPUSH
14297: CALL_OW 104
14301: END
// export function PrepareTigers ; var i , un ; begin
14302: LD_INT 0
14304: PPUSH
14305: PPUSH
14306: PPUSH
// for i = 1 to Difficulty do
14307: LD_ADDR_VAR 0 2
14311: PUSH
14312: DOUBLE
14313: LD_INT 1
14315: DEC
14316: ST_TO_ADDR
14317: LD_OWVAR 67
14321: PUSH
14322: FOR_TO
14323: IFFALSE 14458
// begin hc_sex = sex_male ;
14325: LD_ADDR_OWVAR 27
14329: PUSH
14330: LD_INT 1
14332: ST_TO_ADDR
// uc_side = 0 ;
14333: LD_ADDR_OWVAR 20
14337: PUSH
14338: LD_INT 0
14340: ST_TO_ADDR
// uc_nation = nation_nature ;
14341: LD_ADDR_OWVAR 21
14345: PUSH
14346: LD_INT 0
14348: ST_TO_ADDR
// hc_class = class_tiger ;
14349: LD_ADDR_OWVAR 28
14353: PUSH
14354: LD_INT 14
14356: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14357: LD_ADDR_OWVAR 31
14361: PUSH
14362: LD_EXP 14
14366: PUSH
14367: LD_INT 0
14369: PUSH
14370: LD_INT 0
14372: PUSH
14373: LD_INT 0
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14382: LD_ADDR_OWVAR 35
14386: PUSH
14387: LD_INT 30
14389: PPUSH
14390: LD_INT 40
14392: PPUSH
14393: CALL_OW 12
14397: PUSH
14398: LD_INT 40
14400: PPUSH
14401: LD_INT 50
14403: PPUSH
14404: CALL_OW 12
14408: PUSH
14409: LD_INT 50
14411: PPUSH
14412: LD_INT 60
14414: PPUSH
14415: CALL_OW 12
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: LIST
14424: PUSH
14425: LD_OWVAR 67
14429: ARRAY
14430: ST_TO_ADDR
// un = CreateHuman ;
14431: LD_ADDR_VAR 0 3
14435: PUSH
14436: CALL_OW 44
14440: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14441: LD_VAR 0 3
14445: PPUSH
14446: LD_INT 27
14448: PPUSH
14449: LD_INT 0
14451: PPUSH
14452: CALL_OW 49
// end ;
14456: GO 14322
14458: POP
14459: POP
// end ; end_of_file
14460: LD_VAR 0 1
14464: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14465: LD_INT 1
14467: PPUSH
14468: CALL_OW 255
14472: PUSH
14473: LD_INT 1
14475: EQUAL
14476: PUSH
14477: LD_INT 10
14479: PPUSH
14480: CALL_OW 255
14484: PUSH
14485: LD_INT 1
14487: EQUAL
14488: AND
14489: PUSH
14490: LD_EXP 20
14494: PUSH
14495: LD_INT 1
14497: EQUAL
14498: AND
14499: PUSH
14500: LD_INT 22
14502: PUSH
14503: LD_INT 3
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 21
14512: PUSH
14513: LD_INT 2
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 34
14522: PUSH
14523: LD_INT 51
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: LD_INT 3
14532: PUSH
14533: LD_INT 58
14535: PUSH
14536: EMPTY
14537: LIST
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: PPUSH
14549: CALL_OW 69
14553: PUSH
14554: LD_INT 0
14556: EQUAL
14557: AND
14558: IFFALSE 14649
14560: GO 14562
14562: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14563: LD_INT 9450
14565: PUSH
14566: LD_INT 8400
14568: PUSH
14569: LD_INT 6300
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: LIST
14576: PUSH
14577: LD_OWVAR 67
14581: ARRAY
14582: PPUSH
14583: CALL_OW 67
// if cargoEscape = 1 then
14587: LD_EXP 20
14591: PUSH
14592: LD_INT 1
14594: EQUAL
14595: IFFALSE 14649
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14597: LD_EXP 9
14601: PPUSH
14602: LD_STRING D6-Pow-1
14604: PPUSH
14605: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14609: LD_EXP 1
14613: PPUSH
14614: LD_STRING D6-JMM-1
14616: PPUSH
14617: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14621: LD_EXP 9
14625: PPUSH
14626: LD_STRING D6-Pow-2
14628: PPUSH
14629: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14633: LD_EXP 1
14637: PPUSH
14638: LD_STRING D6-JMM-2
14640: PPUSH
14641: CALL_OW 88
// FinishMission ;
14645: CALL 14857 0 0
// end ; end ;
14649: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14650: LD_INT 1
14652: PPUSH
14653: CALL_OW 255
14657: PUSH
14658: LD_INT 1
14660: EQUAL
14661: PUSH
14662: LD_INT 10
14664: PPUSH
14665: CALL_OW 255
14669: PUSH
14670: LD_INT 1
14672: EQUAL
14673: AND
14674: PUSH
14675: LD_EXP 20
14679: PUSH
14680: LD_INT 1
14682: GREATER
14683: AND
14684: IFFALSE 14751
14686: GO 14688
14688: DISABLE
14689: LD_INT 0
14691: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14692: LD_INT 11550
14694: PUSH
14695: LD_INT 10500
14697: PUSH
14698: LD_INT 9450
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: LIST
14705: PUSH
14706: LD_OWVAR 67
14710: ARRAY
14711: PPUSH
14712: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14716: LD_INT 1
14718: PUSH
14719: LD_INT 2
14721: PUSH
14722: LD_INT 3
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: PUSH
14730: LD_OWVAR 67
14734: ARRAY
14735: PPUSH
14736: LD_INT 13
14738: PPUSH
14739: CALL 13048 0 2
// lastBattle = 1 ;
14743: LD_ADDR_EXP 27
14747: PUSH
14748: LD_INT 1
14750: ST_TO_ADDR
// end ;
14751: PPOPN 1
14753: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14754: LD_EXP 27
14758: PUSH
14759: LD_INT 1
14761: EQUAL
14762: PUSH
14763: LD_INT 26
14765: PPUSH
14766: LD_INT 22
14768: PUSH
14769: LD_INT 3
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: LD_INT 21
14778: PUSH
14779: LD_INT 1
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PPUSH
14790: CALL_OW 70
14794: PUSH
14795: LD_INT 0
14797: EQUAL
14798: AND
14799: IFFALSE 14856
14801: GO 14803
14803: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14804: LD_EXP 9
14808: PPUSH
14809: LD_STRING D6-Pow-1
14811: PPUSH
14812: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14816: LD_EXP 1
14820: PPUSH
14821: LD_STRING D6-JMM-1
14823: PPUSH
14824: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14828: LD_EXP 9
14832: PPUSH
14833: LD_STRING D6-Pow-2
14835: PPUSH
14836: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14840: LD_EXP 1
14844: PPUSH
14845: LD_STRING D6-JMM-2
14847: PPUSH
14848: CALL_OW 88
// FinishMission ;
14852: CALL 14857 0 0
// end ;
14856: END
// export function FinishMission ; var tmp ; begin
14857: LD_INT 0
14859: PPUSH
14860: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14861: LD_ADDR_VAR 0 2
14865: PUSH
14866: LD_INT 22
14868: PUSH
14869: LD_INT 1
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 21
14878: PUSH
14879: LD_INT 2
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: LD_INT 24
14888: PUSH
14889: LD_INT 251
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: LIST
14900: PPUSH
14901: CALL_OW 69
14905: ST_TO_ADDR
// if tmp then
14906: LD_VAR 0 2
14910: IFFALSE 14924
// SaveVehicles ( tmp , 02_tanks_1 ) ;
14912: LD_VAR 0 2
14916: PPUSH
14917: LD_STRING 02_tanks_1
14919: PPUSH
14920: CALL 10618 0 2
// if mikhailStatus = 1 then
14924: LD_EXP 21
14928: PUSH
14929: LD_INT 1
14931: EQUAL
14932: IFFALSE 14946
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
14934: LD_EXP 21
14938: PPUSH
14939: LD_STRING 02_mikhailStatus_1
14941: PPUSH
14942: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
14946: LD_INT 1
14948: PPUSH
14949: CALL_OW 274
14953: PPUSH
14954: LD_INT 1
14956: PPUSH
14957: CALL_OW 275
14961: PPUSH
14962: LD_STRING 02_resources_4
14964: PPUSH
14965: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
14969: LD_INT 1
14971: PPUSH
14972: CALL_OW 274
14976: PPUSH
14977: LD_INT 1
14979: PPUSH
14980: CALL_OW 275
14984: PUSH
14985: LD_INT 200
14987: GREATEREQUAL
14988: IFFALSE 15002
// begin AddMedal ( Cans , 1 ) ;
14990: LD_STRING Cans
14992: PPUSH
14993: LD_INT 1
14995: PPUSH
14996: CALL_OW 101
// end else
15000: GO 15013
// begin AddMedal ( Cans , - 1 ) ;
15002: LD_STRING Cans
15004: PPUSH
15005: LD_INT 1
15007: NEG
15008: PPUSH
15009: CALL_OW 101
// end ; if deadsCounter < 2 then
15013: LD_EXP 31
15017: PUSH
15018: LD_INT 2
15020: LESS
15021: IFFALSE 15035
// begin AddMedal ( Deaths , 1 ) ;
15023: LD_STRING Deaths
15025: PPUSH
15026: LD_INT 1
15028: PPUSH
15029: CALL_OW 101
// end else
15033: GO 15046
// begin AddMedal ( Deaths , - 1 ) ;
15035: LD_STRING Deaths
15037: PPUSH
15038: LD_INT 1
15040: NEG
15041: PPUSH
15042: CALL_OW 101
// end ; if mikhailStatus = 0 then
15046: LD_EXP 21
15050: PUSH
15051: LD_INT 0
15053: EQUAL
15054: IFFALSE 15067
// AddMedal ( Prisoner , - 1 ) ;
15056: LD_STRING Prisoner
15058: PPUSH
15059: LD_INT 1
15061: NEG
15062: PPUSH
15063: CALL_OW 101
// if mikhailStatus = 1 then
15067: LD_EXP 21
15071: PUSH
15072: LD_INT 1
15074: EQUAL
15075: IFFALSE 15087
// AddMedal ( Prisoner , 1 ) ;
15077: LD_STRING Prisoner
15079: PPUSH
15080: LD_INT 1
15082: PPUSH
15083: CALL_OW 101
// if mikhailStatus = 2 then
15087: LD_EXP 21
15091: PUSH
15092: LD_INT 2
15094: EQUAL
15095: IFFALSE 15107
// AddMedal ( Prisoner , 2 ) ;
15097: LD_STRING Prisoner
15099: PPUSH
15100: LD_INT 2
15102: PPUSH
15103: CALL_OW 101
// if mikhailStatus = 3 then
15107: LD_EXP 21
15111: PUSH
15112: LD_INT 3
15114: EQUAL
15115: IFFALSE 15128
// AddMedal ( Prisoner , - 2 ) ;
15117: LD_STRING Prisoner
15119: PPUSH
15120: LD_INT 2
15122: NEG
15123: PPUSH
15124: CALL_OW 101
// GiveMedals ( MAIN ) ;
15128: LD_STRING MAIN
15130: PPUSH
15131: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15135: LD_INT 22
15137: PUSH
15138: LD_INT 1
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: LD_INT 23
15147: PUSH
15148: LD_INT 1
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: LD_INT 21
15157: PUSH
15158: LD_INT 1
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: LIST
15169: PPUSH
15170: CALL_OW 69
15174: PPUSH
15175: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15179: LD_EXP 1
15183: PPUSH
15184: LD_EXP 33
15188: PUSH
15189: LD_STRING JMM
15191: STR
15192: PPUSH
15193: CALL_OW 38
// if IsOK ( Bobby ) then
15197: LD_EXP 2
15201: PPUSH
15202: CALL_OW 302
15206: IFFALSE 15226
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15208: LD_EXP 2
15212: PPUSH
15213: LD_EXP 33
15217: PUSH
15218: LD_STRING Bobby
15220: STR
15221: PPUSH
15222: CALL_OW 38
// if IsOK ( Cyrus ) then
15226: LD_EXP 3
15230: PPUSH
15231: CALL_OW 302
15235: IFFALSE 15255
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15237: LD_EXP 3
15241: PPUSH
15242: LD_EXP 33
15246: PUSH
15247: LD_STRING Cyrus
15249: STR
15250: PPUSH
15251: CALL_OW 38
// if IsOK ( Lisa ) then
15255: LD_EXP 4
15259: PPUSH
15260: CALL_OW 302
15264: IFFALSE 15284
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15266: LD_EXP 4
15270: PPUSH
15271: LD_EXP 33
15275: PUSH
15276: LD_STRING Lisa
15278: STR
15279: PPUSH
15280: CALL_OW 38
// if IsOK ( Khatam ) then
15284: LD_EXP 5
15288: PPUSH
15289: CALL_OW 302
15293: IFFALSE 15313
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15295: LD_EXP 5
15299: PPUSH
15300: LD_EXP 33
15304: PUSH
15305: LD_STRING Khatam
15307: STR
15308: PPUSH
15309: CALL_OW 38
// if IsOK ( Brian ) then
15313: LD_EXP 6
15317: PPUSH
15318: CALL_OW 302
15322: IFFALSE 15342
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15324: LD_EXP 6
15328: PPUSH
15329: LD_EXP 33
15333: PUSH
15334: LD_STRING Brian
15336: STR
15337: PPUSH
15338: CALL_OW 38
// if IsOk ( Jerry ) then
15342: LD_EXP 7
15346: PPUSH
15347: CALL_OW 302
15351: IFFALSE 15371
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15353: LD_EXP 7
15357: PPUSH
15358: LD_EXP 33
15362: PUSH
15363: LD_STRING Jerry
15365: STR
15366: PPUSH
15367: CALL_OW 38
// if mikhailStatus = 1 then
15371: LD_EXP 21
15375: PUSH
15376: LD_INT 1
15378: EQUAL
15379: IFFALSE 15399
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15381: LD_EXP 8
15385: PPUSH
15386: LD_EXP 33
15390: PUSH
15391: LD_STRING Mikhail
15393: STR
15394: PPUSH
15395: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15399: LD_INT 50
15401: PUSH
15402: EMPTY
15403: LIST
15404: PUSH
15405: LD_INT 22
15407: PUSH
15408: LD_INT 1
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 21
15417: PUSH
15418: LD_INT 1
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: LIST
15429: PPUSH
15430: CALL_OW 69
15434: PUSH
15435: LD_EXP 1
15439: PUSH
15440: LD_EXP 2
15444: PUSH
15445: LD_EXP 3
15449: PUSH
15450: LD_EXP 4
15454: PUSH
15455: LD_EXP 5
15459: PUSH
15460: LD_EXP 6
15464: PUSH
15465: LD_EXP 7
15469: PUSH
15470: LD_EXP 8
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: DIFF
15485: PPUSH
15486: LD_STRING 02_other_survivors
15488: PPUSH
15489: CALL_OW 38
// YouWin ;
15493: CALL_OW 103
// end ;
15497: LD_VAR 0 1
15501: RET
