// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// PrepareDifficulty ;
 161: CALL 10482 0 0
// PrepareRussianCommander ;
 165: CALL 11926 0 0
// PrepareSouthBase ;
 169: CALL 12009 0 0
// PrepareNorthBase ;
 173: CALL 12348 0 0
// PrepareOtherRussians ;
 177: CALL 12714 0 0
// PrepareHeroes ;
 181: CALL 10797 0 0
// PrepareLisSquad ;
 185: CALL 11125 0 0
// PrepareOtherAmericans ;
 189: CALL 11470 0 0
// end ; end_of_file
 193: END
// every 1 do var tmp ;
 194: GO 196
 196: DISABLE
 197: LD_INT 0
 199: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 209: LD_ADDR_VAR 0 1
 213: PUSH
 214: LD_INT 22
 216: PUSH
 217: LD_INT 4
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 21
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PPUSH
 238: CALL_OW 69
 242: PUSH
 243: LD_EXP 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: DIFF
 251: ST_TO_ADDR
// if Cyrus and Bobby then
 252: LD_EXP 3
 256: PUSH
 257: LD_EXP 2
 261: AND
 262: IFFALSE 592
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 264: LD_EXP 3
 268: PPUSH
 269: LD_INT 43
 271: PPUSH
 272: LD_INT 72
 274: PPUSH
 275: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_INT 44
 286: PPUSH
 287: LD_INT 70
 289: PPUSH
 290: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 294: LD_EXP 1
 298: PPUSH
 299: LD_INT 46
 301: PPUSH
 302: LD_INT 73
 304: PPUSH
 305: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 309: LD_EXP 3
 313: PPUSH
 314: LD_STRING D1a-Cyrus-1
 316: PPUSH
 317: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_STRING D1a-JMM-1
 328: PPUSH
 329: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 333: LD_EXP 3
 337: PPUSH
 338: LD_INT 37
 340: PPUSH
 341: LD_INT 66
 343: PPUSH
 344: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 348: LD_EXP 2
 352: PPUSH
 353: LD_INT 41
 355: PPUSH
 356: LD_INT 67
 358: PPUSH
 359: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 363: LD_EXP 1
 367: PPUSH
 368: LD_INT 38
 370: PPUSH
 371: LD_INT 64
 373: PPUSH
 374: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 378: LD_EXP 2
 382: PPUSH
 383: LD_STRING D1a-Bobby-2
 385: PPUSH
 386: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 390: LD_EXP 3
 394: PPUSH
 395: LD_INT 35
 397: PPUSH
 398: LD_INT 62
 400: PPUSH
 401: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 405: LD_EXP 2
 409: PPUSH
 410: LD_INT 32
 412: PPUSH
 413: LD_INT 60
 415: PPUSH
 416: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 420: LD_EXP 1
 424: PPUSH
 425: LD_INT 35
 427: PPUSH
 428: LD_INT 60
 430: PPUSH
 431: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 435: LD_EXP 1
 439: PPUSH
 440: LD_STRING D1a-JMM-2
 442: PPUSH
 443: CALL_OW 88
// ComWalk ( Lisa ) ;
 447: LD_EXP 4
 451: PPUSH
 452: CALL_OW 138
// wait ( 0 0$1 ) ;
 456: LD_INT 35
 458: PPUSH
 459: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 463: LD_EXP 4
 467: PPUSH
 468: LD_EXP 1
 472: PPUSH
 473: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 477: LD_EXP 1
 481: PUSH
 482: LD_EXP 3
 486: PUSH
 487: LD_EXP 2
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PPUSH
 497: LD_EXP 4
 501: PPUSH
 502: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 506: LD_VAR 0 1
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: LD_INT 33
 517: PPUSH
 518: LD_INT 55
 520: PPUSH
 521: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 525: LD_VAR 0 1
 529: PUSH
 530: LD_INT 2
 532: ARRAY
 533: PPUSH
 534: LD_INT 30
 536: PPUSH
 537: LD_INT 54
 539: PPUSH
 540: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 544: LD_VAR 0 1
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: LD_EXP 1
 557: PPUSH
 558: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 562: LD_VAR 0 1
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 1
 575: PPUSH
 576: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 580: LD_EXP 4
 584: PPUSH
 585: LD_STRING D1a-Lisa-2
 587: PPUSH
 588: CALL_OW 88
// end ; if Cyrus and not Bobby then
 592: LD_EXP 3
 596: PUSH
 597: LD_EXP 2
 601: NOT
 602: AND
 603: IFFALSE 808
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 605: LD_EXP 3
 609: PPUSH
 610: LD_INT 43
 612: PPUSH
 613: LD_INT 72
 615: PPUSH
 616: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 46
 627: PPUSH
 628: LD_INT 73
 630: PPUSH
 631: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 635: LD_EXP 3
 639: PPUSH
 640: LD_STRING D1a-Cyrus-1
 642: PPUSH
 643: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 647: LD_EXP 1
 651: PPUSH
 652: LD_STRING D1a-JMM-1
 654: PPUSH
 655: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 659: LD_EXP 3
 663: PPUSH
 664: LD_INT 37
 666: PPUSH
 667: LD_INT 66
 669: PPUSH
 670: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 674: LD_EXP 1
 678: PPUSH
 679: LD_INT 38
 681: PPUSH
 682: LD_INT 64
 684: PPUSH
 685: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 689: LD_EXP 3
 693: PPUSH
 694: LD_STRING D1a-Cyrus-2
 696: PPUSH
 697: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 701: LD_EXP 3
 705: PPUSH
 706: LD_INT 35
 708: PPUSH
 709: LD_INT 62
 711: PPUSH
 712: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 716: LD_EXP 1
 720: PPUSH
 721: LD_INT 35
 723: PPUSH
 724: LD_INT 60
 726: PPUSH
 727: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 731: LD_EXP 1
 735: PPUSH
 736: LD_STRING D1a-JMM-2
 738: PPUSH
 739: CALL_OW 88
// ComWalk ( Lisa ) ;
 743: LD_EXP 4
 747: PPUSH
 748: CALL_OW 138
// wait ( 0 0$1 ) ;
 752: LD_INT 35
 754: PPUSH
 755: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 759: LD_EXP 4
 763: PPUSH
 764: LD_EXP 1
 768: PPUSH
 769: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 773: LD_EXP 4
 777: PPUSH
 778: LD_STRING D1a-Lisa-2
 780: PPUSH
 781: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 785: LD_EXP 1
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PPUSH
 799: LD_EXP 4
 803: PPUSH
 804: CALL_OW 119
// end ; if not Cyrus and Bobby then
 808: LD_EXP 3
 812: NOT
 813: PUSH
 814: LD_EXP 2
 818: AND
 819: IFFALSE 1098
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 821: LD_EXP 2
 825: PPUSH
 826: LD_INT 44
 828: PPUSH
 829: LD_INT 70
 831: PPUSH
 832: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 836: LD_EXP 1
 840: PPUSH
 841: LD_INT 46
 843: PPUSH
 844: LD_INT 73
 846: PPUSH
 847: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 851: LD_EXP 2
 855: PPUSH
 856: LD_STRING D1a-Bobby-1
 858: PPUSH
 859: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 863: LD_EXP 1
 867: PPUSH
 868: LD_STRING D1a-JMM-1
 870: PPUSH
 871: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 875: LD_EXP 2
 879: PPUSH
 880: LD_INT 37
 882: PPUSH
 883: LD_INT 66
 885: PPUSH
 886: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 890: LD_EXP 1
 894: PPUSH
 895: LD_INT 38
 897: PPUSH
 898: LD_INT 64
 900: PPUSH
 901: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 905: LD_EXP 2
 909: PPUSH
 910: LD_STRING D1a-Bobby-2
 912: PPUSH
 913: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 917: LD_EXP 2
 921: PPUSH
 922: LD_INT 35
 924: PPUSH
 925: LD_INT 62
 927: PPUSH
 928: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 932: LD_EXP 1
 936: PPUSH
 937: LD_INT 35
 939: PPUSH
 940: LD_INT 60
 942: PPUSH
 943: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 947: LD_EXP 1
 951: PPUSH
 952: LD_STRING D1a-JMM-2
 954: PPUSH
 955: CALL_OW 88
// ComWalk ( Lisa ) ;
 959: LD_EXP 4
 963: PPUSH
 964: CALL_OW 138
// wait ( 0 0$1 ) ;
 968: LD_INT 35
 970: PPUSH
 971: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 975: LD_EXP 4
 979: PPUSH
 980: LD_EXP 1
 984: PPUSH
 985: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 989: LD_EXP 1
 993: PUSH
 994: LD_EXP 3
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PPUSH
1003: LD_EXP 4
1007: PPUSH
1008: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1012: LD_VAR 0 1
1016: PUSH
1017: LD_INT 1
1019: ARRAY
1020: PPUSH
1021: LD_INT 33
1023: PPUSH
1024: LD_INT 55
1026: PPUSH
1027: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1031: LD_VAR 0 1
1035: PUSH
1036: LD_INT 2
1038: ARRAY
1039: PPUSH
1040: LD_INT 30
1042: PPUSH
1043: LD_INT 54
1045: PPUSH
1046: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1050: LD_VAR 0 1
1054: PUSH
1055: LD_INT 1
1057: ARRAY
1058: PPUSH
1059: LD_EXP 1
1063: PPUSH
1064: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1068: LD_VAR 0 1
1072: PUSH
1073: LD_INT 2
1075: ARRAY
1076: PPUSH
1077: LD_EXP 1
1081: PPUSH
1082: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1086: LD_EXP 4
1090: PPUSH
1091: LD_STRING D1a-Lisa-2
1093: PPUSH
1094: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1098: LD_EXP 3
1102: NOT
1103: PUSH
1104: LD_EXP 2
1108: NOT
1109: AND
1110: IFFALSE 1324
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1112: LD_EXP 1
1116: PPUSH
1117: LD_INT 37
1119: PPUSH
1120: LD_INT 66
1122: PPUSH
1123: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1127: LD_EXP 1
1131: PPUSH
1132: LD_STRING D1b-JMM-1
1134: PPUSH
1135: CALL_OW 88
// ComCrawl ( JMM ) ;
1139: LD_EXP 1
1143: PPUSH
1144: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1148: LD_EXP 1
1152: PPUSH
1153: LD_INT 35
1155: PPUSH
1156: LD_INT 60
1158: PPUSH
1159: CALL_OW 171
// wait ( 0 0$8 ) ;
1163: LD_INT 280
1165: PPUSH
1166: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_STRING D1b-JMM-1a
1177: PPUSH
1178: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1182: LD_EXP 1
1186: PUSH
1187: LD_EXP 4
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PPUSH
1196: CALL_OW 138
// wait ( 0 0$1 ) ;
1200: LD_INT 35
1202: PPUSH
1203: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1207: LD_EXP 4
1211: PPUSH
1212: LD_EXP 1
1216: PPUSH
1217: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1221: LD_EXP 1
1225: PUSH
1226: EMPTY
1227: LIST
1228: PPUSH
1229: LD_EXP 4
1233: PPUSH
1234: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1238: LD_VAR 0 1
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: LD_INT 33
1249: PPUSH
1250: LD_INT 55
1252: PPUSH
1253: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1257: LD_VAR 0 1
1261: PUSH
1262: LD_INT 2
1264: ARRAY
1265: PPUSH
1266: LD_INT 30
1268: PPUSH
1269: LD_INT 54
1271: PPUSH
1272: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1276: LD_VAR 0 1
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_EXP 1
1289: PPUSH
1290: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1294: LD_VAR 0 1
1298: PUSH
1299: LD_INT 2
1301: ARRAY
1302: PPUSH
1303: LD_EXP 1
1307: PPUSH
1308: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1312: LD_EXP 4
1316: PPUSH
1317: LD_STRING D1b-Lisa-1
1319: PPUSH
1320: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1324: LD_EXP 1
1328: PPUSH
1329: LD_STRING D1-JMM-1
1331: PPUSH
1332: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1336: LD_EXP 4
1340: PPUSH
1341: LD_STRING D1-Lisa-1
1343: PPUSH
1344: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1348: LD_EXP 1
1352: PPUSH
1353: LD_STRING D1-JMM-2
1355: PPUSH
1356: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1360: LD_EXP 9
1364: PPUSH
1365: LD_STRING D1-Pow-2
1367: PPUSH
1368: CALL_OW 94
// if Cyrus then
1372: LD_EXP 3
1376: IFFALSE 1402
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1378: LD_EXP 3
1382: PPUSH
1383: LD_STRING D1-Cyrus-2
1385: PPUSH
1386: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-3
1397: PPUSH
1398: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1402: LD_EXP 9
1406: PPUSH
1407: LD_STRING D1-Pow-3
1409: PPUSH
1410: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1414: LD_EXP 1
1418: PPUSH
1419: LD_STRING D1-JMM-4
1421: PPUSH
1422: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1426: LD_EXP 9
1430: PPUSH
1431: LD_STRING D1-Pow-4
1433: PPUSH
1434: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1438: LD_EXP 9
1442: PPUSH
1443: LD_STRING D1-Pow-4a
1445: PPUSH
1446: CALL_OW 94
// if Cyrus then
1450: LD_EXP 3
1454: IFFALSE 1468
// Say ( Cyrus , D1-Cyrus-4 ) ;
1456: LD_EXP 3
1460: PPUSH
1461: LD_STRING D1-Cyrus-4
1463: PPUSH
1464: CALL_OW 88
// if Bobby then
1468: LD_EXP 2
1472: IFFALSE 1510
// begin Say ( Bobby , D1-Bobby-4 ) ;
1474: LD_EXP 2
1478: PPUSH
1479: LD_STRING D1-Bobby-4
1481: PPUSH
1482: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1486: LD_EXP 4
1490: PPUSH
1491: LD_STRING D1-Lisa-4
1493: PPUSH
1494: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1498: LD_EXP 1
1502: PPUSH
1503: LD_STRING D1-JMM-5
1505: PPUSH
1506: CALL_OW 88
// end ; InGameOff ;
1510: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1514: LD_INT 22
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 69
1528: PUSH
1529: LD_EXP 6
1533: PUSH
1534: LD_EXP 7
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: DIFF
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1551: LD_STRING M1
1553: PPUSH
1554: CALL_OW 337
// SaveForQuickRestart ;
1558: CALL_OW 22
// end ;
1562: PPOPN 1
1564: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1565: LD_INT 7
1567: PPUSH
1568: LD_INT 22
1570: PUSH
1571: LD_INT 1
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 70
1582: PUSH
1583: LD_INT 0
1585: GREATER
1586: IFFALSE 2003
1588: GO 1590
1590: DISABLE
// begin InGameOn ;
1591: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1595: LD_INT 22
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 21
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PPUSH
1619: CALL_OW 69
1623: PPUSH
1624: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1628: LD_INT 24
1630: PPUSH
1631: LD_INT 32
1633: PPUSH
1634: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1638: LD_EXP 5
1642: PPUSH
1643: LD_INT 4
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 4
1660: PPUSH
1661: CALL_OW 336
// wait ( 0 0$1 ) ;
1665: LD_INT 35
1667: PPUSH
1668: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1672: LD_EXP 5
1676: PPUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_INT 38
1682: PPUSH
1683: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1687: LD_EXP 5
1691: PPUSH
1692: LD_EXP 1
1696: PPUSH
1697: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1701: LD_INT 22
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 21
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PPUSH
1725: CALL_OW 69
1729: PUSH
1730: LD_EXP 5
1734: PUSH
1735: EMPTY
1736: LIST
1737: DIFF
1738: PPUSH
1739: LD_EXP 5
1743: PPUSH
1744: CALL_OW 119
// wait ( 0 0$1 ) ;
1748: LD_INT 35
1750: PPUSH
1751: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1755: LD_EXP 5
1759: PPUSH
1760: LD_STRING D2a-Khat-1
1762: PPUSH
1763: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1767: LD_EXP 1
1771: PPUSH
1772: LD_STRING D2a-JMM-1
1774: PPUSH
1775: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1779: LD_EXP 5
1783: PPUSH
1784: LD_STRING D2a-Khat-2
1786: PPUSH
1787: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1791: LD_EXP 1
1795: PPUSH
1796: LD_STRING D2a-JMM-2
1798: PPUSH
1799: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1803: LD_EXP 5
1807: PPUSH
1808: LD_STRING D2a-Khat-3
1810: PPUSH
1811: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1815: LD_EXP 1
1819: PPUSH
1820: LD_STRING D2a-JMM-3
1822: PPUSH
1823: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1827: LD_EXP 5
1831: PPUSH
1832: LD_STRING D2a-Khat-4
1834: PPUSH
1835: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1839: LD_EXP 1
1843: PPUSH
1844: LD_STRING D2a-JMM-4
1846: PPUSH
1847: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1851: LD_EXP 5
1855: PPUSH
1856: LD_STRING D2a-Khat-5
1858: PPUSH
1859: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_STRING D2a-JMM-5
1870: PPUSH
1871: CALL_OW 88
// InGameOff ;
1875: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1879: LD_INT 22
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 21
1891: PUSH
1892: LD_INT 1
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 3
1901: PUSH
1902: LD_INT 24
1904: PUSH
1905: LD_INT 800
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: PUSH
1926: LD_INT 0
1928: GREATER
1929: IFFALSE 2003
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1931: LD_EXP 5
1935: PPUSH
1936: LD_INT 22
1938: PUSH
1939: LD_INT 1
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 21
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 3
1958: PUSH
1959: LD_INT 24
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: PPUSH
1978: CALL_OW 69
1982: PUSH
1983: LD_INT 1
1985: ARRAY
1986: PPUSH
1987: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1991: LD_EXP 5
1995: PPUSH
1996: LD_STRING D2b-Khat-1
1998: PPUSH
1999: CALL_OW 88
// end ; end ;
2003: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
2004: LD_INT 15
2006: PPUSH
2007: LD_INT 22
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PPUSH
2017: CALL_OW 70
2021: PUSH
2022: LD_INT 0
2024: GREATER
2025: IFFALSE 3182
2027: GO 2029
2029: DISABLE
2030: LD_INT 0
2032: PPUSH
2033: PPUSH
2034: PPUSH
2035: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: LD_INT 999
2043: PUSH
2044: LD_INT 999
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2054: LD_ADDR_VAR 0 4
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 1
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PPUSH
2083: CALL_OW 69
2087: PUSH
2088: LD_EXP 1
2092: PUSH
2093: LD_EXP 2
2097: PUSH
2098: LD_EXP 3
2102: PUSH
2103: LD_EXP 4
2107: PUSH
2108: LD_EXP 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: DIFF
2120: ST_TO_ADDR
// PrepareDeadSoldiers ;
2121: CALL 11628 0 0
// spotCorpses = 1 ;
2125: LD_ADDR_EXP 32
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
// InGameOn ;
2133: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2137: LD_INT 23
2139: PPUSH
2140: LD_INT 12
2142: PPUSH
2143: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2147: LD_ADDR_VAR 0 3
2151: PUSH
2152: LD_VAR 0 2
2156: PUSH
2157: LD_INT 1
2159: ARRAY
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2165: LD_ADDR_VAR 0 1
2169: PUSH
2170: LD_INT 22
2172: PUSH
2173: LD_INT 1
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 21
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PPUSH
2194: CALL_OW 69
2198: PUSH
2199: LD_EXP 1
2203: PUSH
2204: LD_EXP 5
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: DIFF
2213: PUSH
2214: FOR_IN
2215: IFFALSE 2266
// if IsOK ( i ) then
2217: LD_VAR 0 1
2221: PPUSH
2222: CALL_OW 302
2226: IFFALSE 2264
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2228: LD_ADDR_VAR 0 2
2232: PUSH
2233: LD_VAR 0 2
2237: PUSH
2238: LD_VAR 0 1
2242: PUSH
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 16
2250: PPUSH
2251: CALL_OW 299
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: ADD
2263: ST_TO_ADDR
2264: GO 2214
2266: POP
2267: POP
// for i = 2 to distanceTab do
2268: LD_ADDR_VAR 0 1
2272: PUSH
2273: DOUBLE
2274: LD_INT 2
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2330
// if distanceTab [ i ] [ 2 ] < min then
2286: LD_VAR 0 2
2290: PUSH
2291: LD_VAR 0 1
2295: ARRAY
2296: PUSH
2297: LD_INT 2
2299: ARRAY
2300: PUSH
2301: LD_VAR 0 3
2305: LESS
2306: IFFALSE 2328
// min = distanceTab [ i ] [ 2 ] ;
2308: LD_ADDR_VAR 0 3
2312: PUSH
2313: LD_VAR 0 2
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: PUSH
2324: LD_INT 2
2326: ARRAY
2327: ST_TO_ADDR
2328: GO 2283
2330: POP
2331: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2332: LD_ADDR_VAR 0 1
2336: PUSH
2337: LD_INT 22
2339: PUSH
2340: LD_INT 1
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 21
2349: PUSH
2350: LD_INT 1
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PPUSH
2361: CALL_OW 69
2365: PUSH
2366: LD_EXP 1
2370: PUSH
2371: EMPTY
2372: LIST
2373: DIFF
2374: PUSH
2375: FOR_IN
2376: IFFALSE 2446
// begin ComMoveToArea ( i , DeadCutscene ) ;
2378: LD_VAR 0 1
2382: PPUSH
2383: LD_INT 28
2385: PPUSH
2386: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2390: LD_EXP 1
2394: PPUSH
2395: LD_INT 30
2397: PPUSH
2398: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2402: LD_VAR 0 1
2406: PPUSH
2407: LD_INT 23
2409: PPUSH
2410: LD_INT 11
2412: PPUSH
2413: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2417: LD_EXP 1
2421: PPUSH
2422: LD_INT 23
2424: PPUSH
2425: LD_INT 11
2427: PPUSH
2428: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2432: LD_EXP 34
2436: PPUSH
2437: LD_INT 250
2439: PPUSH
2440: CALL_OW 234
// end ;
2444: GO 2375
2446: POP
2447: POP
// for i = 2 to distanceTab do
2448: LD_ADDR_VAR 0 1
2452: PUSH
2453: DOUBLE
2454: LD_INT 2
2456: DEC
2457: ST_TO_ADDR
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_TO
2464: IFFALSE 2850
// begin if distanceTab [ i ] [ 2 ] = min then
2466: LD_VAR 0 2
2470: PUSH
2471: LD_VAR 0 1
2475: ARRAY
2476: PUSH
2477: LD_INT 2
2479: ARRAY
2480: PUSH
2481: LD_VAR 0 3
2485: EQUAL
2486: IFFALSE 2848
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2488: LD_VAR 0 2
2492: PUSH
2493: LD_VAR 0 1
2497: ARRAY
2498: PUSH
2499: LD_INT 1
2501: ARRAY
2502: PUSH
2503: LD_EXP 2
2507: EQUAL
2508: IFFALSE 2522
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2510: LD_EXP 2
2514: PPUSH
2515: LD_STRING DCorpses-Bobby-1
2517: PPUSH
2518: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2522: LD_VAR 0 2
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PUSH
2537: LD_EXP 3
2541: EQUAL
2542: IFFALSE 2556
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2544: LD_EXP 3
2548: PPUSH
2549: LD_STRING DCorpses-Cyrus-1
2551: PPUSH
2552: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2556: LD_VAR 0 2
2560: PUSH
2561: LD_VAR 0 1
2565: ARRAY
2566: PUSH
2567: LD_INT 1
2569: ARRAY
2570: PUSH
2571: LD_EXP 4
2575: EQUAL
2576: IFFALSE 2590
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2578: LD_EXP 4
2582: PPUSH
2583: LD_STRING DCorpses-Lisa-1
2585: PPUSH
2586: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2590: LD_VAR 0 2
2594: PUSH
2595: LD_VAR 0 1
2599: ARRAY
2600: PUSH
2601: LD_INT 1
2603: ARRAY
2604: PUSH
2605: LD_VAR 0 4
2609: PUSH
2610: LD_INT 1
2612: ARRAY
2613: EQUAL
2614: PUSH
2615: LD_VAR 0 4
2619: PUSH
2620: LD_INT 1
2622: ARRAY
2623: PPUSH
2624: CALL_OW 258
2628: PUSH
2629: LD_INT 1
2631: EQUAL
2632: AND
2633: IFFALSE 2651
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2635: LD_VAR 0 4
2639: PUSH
2640: LD_INT 1
2642: ARRAY
2643: PPUSH
2644: LD_STRING DCorpses-Sol1-1
2646: PPUSH
2647: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2651: LD_VAR 0 2
2655: PUSH
2656: LD_VAR 0 1
2660: ARRAY
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PUSH
2666: LD_VAR 0 4
2670: PUSH
2671: LD_INT 1
2673: ARRAY
2674: EQUAL
2675: PUSH
2676: LD_VAR 0 4
2680: PUSH
2681: LD_INT 1
2683: ARRAY
2684: PPUSH
2685: CALL_OW 258
2689: PUSH
2690: LD_INT 2
2692: EQUAL
2693: AND
2694: IFFALSE 2712
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2696: LD_VAR 0 4
2700: PUSH
2701: LD_INT 1
2703: ARRAY
2704: PPUSH
2705: LD_STRING DCorpses-FSol1-1
2707: PPUSH
2708: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2712: LD_VAR 0 2
2716: PUSH
2717: LD_VAR 0 1
2721: ARRAY
2722: PUSH
2723: LD_INT 1
2725: ARRAY
2726: PUSH
2727: LD_VAR 0 4
2731: PUSH
2732: LD_INT 2
2734: ARRAY
2735: EQUAL
2736: PUSH
2737: LD_VAR 0 4
2741: PUSH
2742: LD_INT 2
2744: ARRAY
2745: PPUSH
2746: CALL_OW 258
2750: PUSH
2751: LD_INT 1
2753: EQUAL
2754: AND
2755: IFFALSE 2773
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2757: LD_VAR 0 4
2761: PUSH
2762: LD_INT 2
2764: ARRAY
2765: PPUSH
2766: LD_STRING DCorpses-Sol1-1
2768: PPUSH
2769: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2773: LD_VAR 0 2
2777: PUSH
2778: LD_VAR 0 1
2782: ARRAY
2783: PUSH
2784: LD_INT 1
2786: ARRAY
2787: PUSH
2788: LD_VAR 0 4
2792: PUSH
2793: LD_INT 2
2795: ARRAY
2796: EQUAL
2797: PUSH
2798: LD_VAR 0 4
2802: PUSH
2803: LD_INT 2
2805: ARRAY
2806: PPUSH
2807: CALL_OW 258
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: AND
2816: IFFALSE 2834
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2818: LD_VAR 0 4
2822: PUSH
2823: LD_INT 2
2825: ARRAY
2826: PPUSH
2827: LD_STRING DCorpses-FSol1-1
2829: PPUSH
2830: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2834: LD_EXP 34
2838: PPUSH
2839: LD_INT 150
2841: PPUSH
2842: CALL_OW 234
// break ;
2846: GO 2850
// end ; end ;
2848: GO 2463
2850: POP
2851: POP
// repeat wait ( 0 0$1 ) ;
2852: LD_INT 35
2854: PPUSH
2855: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2859: LD_ADDR_VAR 0 1
2863: PUSH
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 21
2876: PUSH
2877: LD_INT 1
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_EXP 1
2897: PUSH
2898: EMPTY
2899: LIST
2900: DIFF
2901: PUSH
2902: FOR_IN
2903: IFFALSE 2973
// begin ComMoveToArea ( i , DeadCutscene ) ;
2905: LD_VAR 0 1
2909: PPUSH
2910: LD_INT 28
2912: PPUSH
2913: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2917: LD_EXP 1
2921: PPUSH
2922: LD_INT 30
2924: PPUSH
2925: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2929: LD_VAR 0 1
2933: PPUSH
2934: LD_INT 23
2936: PPUSH
2937: LD_INT 11
2939: PPUSH
2940: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2944: LD_EXP 1
2948: PPUSH
2949: LD_INT 23
2951: PPUSH
2952: LD_INT 11
2954: PPUSH
2955: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2959: LD_EXP 34
2963: PPUSH
2964: LD_INT 250
2966: PPUSH
2967: CALL_OW 234
// end ;
2971: GO 2902
2973: POP
2974: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2975: LD_EXP 1
2979: PPUSH
2980: LD_INT 30
2982: PPUSH
2983: CALL_OW 308
2987: IFFALSE 2852
// wait ( 0 0$3 ) ;
2989: LD_INT 105
2991: PPUSH
2992: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2996: LD_EXP 1
3000: PPUSH
3001: LD_STRING DCorpses-JMM-1
3003: PPUSH
3004: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3008: LD_EXP 34
3012: PPUSH
3013: LD_INT 100
3015: PPUSH
3016: CALL_OW 234
// if IsOK ( Khatam ) then
3020: LD_EXP 5
3024: PPUSH
3025: CALL_OW 302
3029: IFFALSE 3166
// begin repeat wait ( 0 0$1 ) ;
3031: LD_INT 35
3033: PPUSH
3034: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3038: LD_EXP 5
3042: PPUSH
3043: LD_EXP 34
3047: PPUSH
3048: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3052: LD_EXP 5
3056: PPUSH
3057: LD_EXP 34
3061: PPUSH
3062: CALL_OW 296
3066: PUSH
3067: LD_INT 2
3069: LESS
3070: IFFALSE 3031
// spotCorpses = 0 ;
3072: LD_ADDR_EXP 32
3076: PUSH
3077: LD_INT 0
3079: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3080: LD_EXP 34
3084: PPUSH
3085: LD_INT 10
3087: PPUSH
3088: CALL_OW 234
// wait ( 0 0$3 ) ;
3092: LD_INT 105
3094: PPUSH
3095: CALL_OW 67
// KillUnit ( DyingSold ) ;
3099: LD_EXP 34
3103: PPUSH
3104: CALL_OW 66
// wait ( 0 0$1 ) ;
3108: LD_INT 35
3110: PPUSH
3111: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3115: LD_EXP 1
3119: PUSH
3120: LD_EXP 5
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PPUSH
3129: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3133: LD_EXP 5
3137: PPUSH
3138: LD_EXP 1
3142: PPUSH
3143: CALL_OW 119
// wait ( 0 0$1 ) ;
3147: LD_INT 35
3149: PPUSH
3150: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3154: LD_EXP 5
3158: PPUSH
3159: LD_STRING DCorpses-Khat-1
3161: PPUSH
3162: CALL_OW 88
// end ; InGameOff ;
3166: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3170: LD_EXP 1
3174: PPUSH
3175: LD_STRING DCorpses-JMM-2
3177: PPUSH
3178: CALL_OW 88
// end ;
3182: PPOPN 4
3184: END
// every 0 0$1 trigger spotCorpses = 1 do
3185: LD_EXP 32
3189: PUSH
3190: LD_INT 1
3192: EQUAL
3193: IFFALSE 3211
3195: GO 3197
3197: DISABLE
// begin enable ;
3198: ENABLE
// SetLives ( DyingSold , 10 ) ;
3199: LD_EXP 34
3203: PPUSH
3204: LD_INT 10
3206: PPUSH
3207: CALL_OW 234
// end ;
3211: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 15 ) do var i ;
3212: LD_INT 8
3214: PPUSH
3215: LD_INT 22
3217: PUSH
3218: LD_INT 1
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: CALL_OW 70
3229: PUSH
3230: LD_INT 0
3232: GREATER
3233: PUSH
3234: LD_INT 22
3236: PUSH
3237: LD_INT 1
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PPUSH
3244: CALL_OW 69
3248: PPUSH
3249: LD_EXP 7
3253: PPUSH
3254: CALL_OW 74
3258: PPUSH
3259: LD_EXP 7
3263: PPUSH
3264: CALL_OW 296
3268: PUSH
3269: LD_INT 15
3271: LESS
3272: OR
3273: IFFALSE 3497
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
// begin InGameOn ;
3281: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3285: LD_EXP 7
3289: PPUSH
3290: LD_INT 250
3292: PPUSH
3293: CALL_OW 234
// SetLives ( Brian , 750 ) ;
3297: LD_EXP 6
3301: PPUSH
3302: LD_INT 750
3304: PPUSH
3305: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3309: LD_INT 3
3311: PPUSH
3312: LD_INT 4
3314: PPUSH
3315: LD_INT 2
3317: PPUSH
3318: LD_INT 1
3320: PPUSH
3321: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3325: LD_EXP 6
3329: PUSH
3330: LD_EXP 7
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PPUSH
3339: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3343: LD_ADDR_VAR 0 1
3347: PUSH
3348: LD_INT 9
3350: PPUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 3
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PPUSH
3361: CALL_OW 70
3365: PUSH
3366: FOR_IN
3367: IFFALSE 3380
// ComFree ( i ) ;
3369: LD_VAR 0 1
3373: PPUSH
3374: CALL_OW 139
3378: GO 3366
3380: POP
3381: POP
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3382: LD_ADDR_VAR 0 1
3386: PUSH
3387: LD_INT 9
3389: PPUSH
3390: LD_INT 22
3392: PUSH
3393: LD_INT 3
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PPUSH
3400: CALL_OW 70
3404: PUSH
3405: FOR_IN
3406: IFFALSE 3424
// AddComAttackUnit ( i , Brian ) ;
3408: LD_VAR 0 1
3412: PPUSH
3413: LD_EXP 6
3417: PPUSH
3418: CALL_OW 175
3422: GO 3405
3424: POP
3425: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3426: LD_ADDR_VAR 0 1
3430: PUSH
3431: LD_INT 22
3433: PUSH
3434: LD_INT 4
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PPUSH
3441: CALL_OW 69
3445: PUSH
3446: FOR_IN
3447: IFFALSE 3460
// ComFree ( i ) ;
3449: LD_VAR 0 1
3453: PPUSH
3454: CALL_OW 139
3458: GO 3446
3460: POP
3461: POP
// wait ( 0 0$1 ) ;
3462: LD_INT 35
3464: PPUSH
3465: CALL_OW 67
// InGameOff ;
3469: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3473: LD_EXP 6
3477: PPUSH
3478: LD_STRING DF-Sol1-1
3480: PPUSH
3481: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3485: LD_EXP 1
3489: PPUSH
3490: LD_STRING DF-JMM-1
3492: PPUSH
3493: CALL_OW 88
// end ;
3497: PPOPN 1
3499: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3500: LD_INT 19
3502: PPUSH
3503: LD_INT 22
3505: PUSH
3506: LD_INT 3
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 70
3517: PUSH
3518: LD_INT 0
3520: EQUAL
3521: IFFALSE 3634
3523: GO 3525
3525: DISABLE
// begin if not IsDead ( Brian ) then
3526: LD_EXP 6
3530: PPUSH
3531: CALL_OW 301
3535: NOT
3536: IFFALSE 3550
// SetSide ( Brian , 1 ) ;
3538: LD_EXP 6
3542: PPUSH
3543: LD_INT 1
3545: PPUSH
3546: CALL_OW 235
// if not IsDead ( Jerry ) then
3550: LD_EXP 7
3554: PPUSH
3555: CALL_OW 301
3559: NOT
3560: IFFALSE 3574
// SetSide ( Jerry , 1 ) ;
3562: LD_EXP 7
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3574: LD_INT 22
3576: PUSH
3577: LD_INT 1
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PUSH
3584: LD_INT 25
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PPUSH
3598: CALL_OW 69
3602: PUSH
3603: LD_INT 0
3605: GREATER
3606: IFFALSE 3622
// begin Say ( JMM , DFa-JMM-1 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING DFa-JMM-1
3615: PPUSH
3616: CALL_OW 88
// end else
3620: GO 3634
// begin Say ( JMM , DFa-JMM-1a ) ;
3622: LD_EXP 1
3626: PPUSH
3627: LD_STRING DFa-JMM-1a
3629: PPUSH
3630: CALL_OW 88
// end ; end ;
3634: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3635: LD_INT 19
3637: PPUSH
3638: LD_INT 22
3640: PUSH
3641: LD_INT 3
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL_OW 70
3652: PUSH
3653: LD_INT 0
3655: EQUAL
3656: PUSH
3657: LD_EXP 6
3661: PPUSH
3662: CALL_OW 302
3666: NOT
3667: AND
3668: IFFALSE 3745
3670: GO 3672
3672: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3673: LD_INT 35
3675: PPUSH
3676: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3680: LD_EXP 6
3684: PPUSH
3685: CALL_OW 256
3689: PUSH
3690: LD_INT 250
3692: GREATER
3693: IFFALSE 3673
// Say ( Brian , DFb-Sol1-1 ) ;
3695: LD_EXP 6
3699: PPUSH
3700: LD_STRING DFb-Sol1-1
3702: PPUSH
3703: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3707: LD_EXP 6
3711: PPUSH
3712: LD_INT 78
3714: PPUSH
3715: LD_INT 74
3717: PPUSH
3718: CALL_OW 111
// if IsDead ( Jerry ) then
3722: LD_EXP 7
3726: PPUSH
3727: CALL_OW 301
3731: IFFALSE 3745
// Say ( Brian , DFb-Sol1-1a ) end ;
3733: LD_EXP 6
3737: PPUSH
3738: LD_STRING DFb-Sol1-1a
3740: PPUSH
3741: CALL_OW 88
3745: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3746: LD_INT 22
3748: PUSH
3749: LD_INT 1
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_INT 21
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PPUSH
3770: CALL_OW 69
3774: PUSH
3775: LD_INT 0
3777: EQUAL
3778: IFFALSE 3866
3780: GO 3782
3782: DISABLE
3783: LD_INT 0
3785: PPUSH
// begin enable ;
3786: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3787: LD_ADDR_VAR 0 1
3791: PUSH
3792: LD_INT 22
3794: PUSH
3795: LD_INT 3
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 3
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PUSH
3812: LD_INT 30
3814: PUSH
3815: LD_INT 31
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: LIST
3826: PPUSH
3827: CALL_OW 69
3831: PUSH
3832: FOR_IN
3833: IFFALSE 3864
// begin if See ( 1 , i ) then
3835: LD_INT 1
3837: PPUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: CALL_OW 292
3847: IFFALSE 3862
// begin disable ;
3849: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3850: LD_EXP 1
3854: PPUSH
3855: LD_STRING DX1-JMM-1
3857: PPUSH
3858: CALL_OW 88
// end ; end ;
3862: GO 3832
3864: POP
3865: POP
// end ;
3866: PPOPN 1
3868: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3869: LD_INT 1
3871: PPUSH
3872: LD_INT 11
3874: PPUSH
3875: CALL_OW 294
3879: IFFALSE 4293
3881: GO 3883
3883: DISABLE
3884: LD_INT 0
3886: PPUSH
3887: PPUSH
// begin DialogueOn ;
3888: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3892: LD_INT 11
3894: PPUSH
3895: LD_INT 22
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: PUSH
3905: LD_INT 21
3907: PUSH
3908: LD_INT 1
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PPUSH
3919: CALL_OW 70
3923: PUSH
3924: LD_INT 1
3926: ARRAY
3927: PPUSH
3928: LD_STRING DX3-Rus1-1
3930: PPUSH
3931: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING DX3-JMM-1
3942: PPUSH
3943: CALL_OW 88
// DialogueOff ;
3947: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3951: LD_ADDR_VAR 0 1
3955: PUSH
3956: LD_INT 11
3958: PPUSH
3959: LD_INT 22
3961: PUSH
3962: LD_INT 3
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 21
3971: PUSH
3972: LD_INT 1
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: PPUSH
3983: CALL_OW 70
3987: PUSH
3988: FOR_IN
3989: IFFALSE 4009
// southBaseDefenders = southBaseDefenders ^ i ;
3991: LD_ADDR_EXP 25
3995: PUSH
3996: LD_EXP 25
4000: PUSH
4001: LD_VAR 0 1
4005: ADD
4006: ST_TO_ADDR
4007: GO 3988
4009: POP
4010: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
4011: LD_INT 455
4013: PUSH
4014: LD_INT 420
4016: PUSH
4017: LD_INT 315
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: PUSH
4025: LD_OWVAR 67
4029: ARRAY
4030: PPUSH
4031: CALL_OW 67
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ) ;
4035: LD_INT 22
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: LD_INT 21
4047: PUSH
4048: LD_INT 1
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 25
4057: PUSH
4058: LD_INT 3
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 69
4074: PPUSH
4075: CALL_OW 122
// wait ( 0 0$1 ) ;
4079: LD_INT 35
4081: PPUSH
4082: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
4086: LD_INT 35
4088: PPUSH
4089: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
4093: LD_ADDR_VAR 0 1
4097: PUSH
4098: LD_INT 22
4100: PUSH
4101: LD_INT 3
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 21
4110: PUSH
4111: LD_INT 2
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 58
4120: PUSH
4121: EMPTY
4122: LIST
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: LIST
4128: PPUSH
4129: CALL_OW 69
4133: PUSH
4134: FOR_IN
4135: IFFALSE 4205
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: LD_INT 22
4144: PUSH
4145: LD_INT 3
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 21
4154: PUSH
4155: LD_INT 1
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 3
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 69
4181: PUSH
4182: FOR_IN
4183: IFFALSE 4201
// begin ComEnterUnit ( j , i ) ;
4185: LD_VAR 0 2
4189: PPUSH
4190: LD_VAR 0 1
4194: PPUSH
4195: CALL_OW 120
// end ;
4199: GO 4182
4201: POP
4202: POP
// end ;
4203: GO 4134
4205: POP
4206: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4207: LD_INT 22
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 21
4219: PUSH
4220: LD_INT 2
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 58
4229: PUSH
4230: EMPTY
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 69
4242: PUSH
4243: LD_INT 0
4245: EQUAL
4246: PUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 21
4259: PUSH
4260: LD_INT 1
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: LD_INT 25
4269: PUSH
4270: LD_INT 3
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 69
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: OR
4291: IFFALSE 4086
// end ;
4293: PPOPN 2
4295: END
// every 0 0$1 do var i , tmp ;
4296: GO 4298
4298: DISABLE
4299: LD_INT 0
4301: PPUSH
4302: PPUSH
// begin enable ;
4303: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4304: LD_ADDR_VAR 0 2
4308: PUSH
4309: LD_INT 22
4311: PUSH
4312: LD_INT 1
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: LD_INT 21
4321: PUSH
4322: LD_INT 1
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PPUSH
4333: CALL_OW 69
4337: ST_TO_ADDR
// for i in tmp do
4338: LD_ADDR_VAR 0 1
4342: PUSH
4343: LD_VAR 0 2
4347: PUSH
4348: FOR_IN
4349: IFFALSE 4471
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_INT 5
4358: PPUSH
4359: CALL_OW 296
4363: PUSH
4364: LD_INT 4
4366: LESS
4367: PUSH
4368: LD_VAR 0 1
4372: PPUSH
4373: LD_INT 4
4375: PPUSH
4376: CALL_OW 296
4380: PUSH
4381: LD_INT 4
4383: LESS
4384: OR
4385: IFFALSE 4469
// begin disable ;
4387: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4388: LD_INT 5
4390: PUSH
4391: LD_INT 4
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PPUSH
4398: CALL_OW 85
// if IsOK ( Bobby ) then
4402: LD_EXP 2
4406: PPUSH
4407: CALL_OW 302
4411: IFFALSE 4448
// begin DialogueOn ;
4413: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4417: LD_EXP 2
4421: PPUSH
4422: LD_STRING DX2-Bobby-1
4424: PPUSH
4425: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4429: LD_EXP 1
4433: PPUSH
4434: LD_STRING DX2-JMM-1a
4436: PPUSH
4437: CALL_OW 88
// DialogueOff ;
4441: CALL_OW 7
// disable ;
4445: DISABLE
// end else
4446: GO 4469
// begin DialogueOn ;
4448: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4452: LD_EXP 1
4456: PPUSH
4457: LD_STRING DX2-JMM-1
4459: PPUSH
4460: CALL_OW 88
// DialogueOff ;
4464: CALL_OW 7
// disable ;
4468: DISABLE
// end ; end ; end ;
4469: GO 4348
4471: POP
4472: POP
// end ;
4473: PPOPN 2
4475: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4476: LD_INT 22
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 23
4488: PUSH
4489: LD_INT 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 21
4498: PUSH
4499: LD_INT 2
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 34
4508: PUSH
4509: LD_INT 42
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: PPUSH
4522: CALL_OW 69
4526: PUSH
4527: LD_INT 1
4529: GREATEREQUAL
4530: IFFALSE 5011
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
4540: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4541: LD_ADDR_VAR 0 1
4545: PUSH
4546: LD_INT 22
4548: PUSH
4549: LD_INT 1
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 23
4558: PUSH
4559: LD_INT 3
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 21
4568: PUSH
4569: LD_INT 2
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 34
4578: PUSH
4579: LD_INT 42
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: PPUSH
4592: CALL_OW 69
4596: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby , Khatam ] ;
4597: LD_ADDR_VAR 0 2
4601: PUSH
4602: LD_INT 22
4604: PUSH
4605: LD_INT 1
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: LD_INT 21
4614: PUSH
4615: LD_INT 1
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 26
4624: PUSH
4625: LD_INT 1
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: PPUSH
4637: CALL_OW 69
4641: PUSH
4642: LD_EXP 1
4646: PUSH
4647: LD_EXP 3
4651: PUSH
4652: LD_EXP 2
4656: PUSH
4657: LD_EXP 5
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: DIFF
4668: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4669: LD_ADDR_VAR 0 3
4673: PUSH
4674: LD_INT 22
4676: PUSH
4677: LD_INT 1
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_INT 21
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 26
4696: PUSH
4697: LD_INT 2
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: PPUSH
4709: CALL_OW 69
4713: PUSH
4714: LD_EXP 4
4718: PUSH
4719: EMPTY
4720: LIST
4721: DIFF
4722: ST_TO_ADDR
// DialogueOn ;
4723: CALL_OW 6
// if not IsInUnit ( JMM ) then
4727: LD_EXP 1
4731: PPUSH
4732: CALL_OW 310
4736: NOT
4737: IFFALSE 4751
// Say ( JMM , DX2a-JMM-1 ) ;
4739: LD_EXP 1
4743: PPUSH
4744: LD_STRING DX2a-JMM-1
4746: PPUSH
4747: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4751: LD_EXP 2
4755: PPUSH
4756: CALL_OW 310
4760: PUSH
4761: LD_VAR 0 1
4765: PUSH
4766: LD_INT 1
4768: ARRAY
4769: EQUAL
4770: IFFALSE 4784
// Say ( Bobby , DX2a-Bobby-1 ) ;
4772: LD_EXP 2
4776: PPUSH
4777: LD_STRING DX2a-Bobby-1
4779: PPUSH
4780: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4784: LD_EXP 3
4788: PPUSH
4789: CALL_OW 310
4793: PUSH
4794: LD_VAR 0 1
4798: PUSH
4799: LD_INT 1
4801: ARRAY
4802: EQUAL
4803: IFFALSE 4817
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4805: LD_EXP 3
4809: PPUSH
4810: LD_STRING DX2a-Cyrus-1
4812: PPUSH
4813: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4817: LD_EXP 4
4821: PPUSH
4822: CALL_OW 310
4826: PUSH
4827: LD_VAR 0 1
4831: PUSH
4832: LD_INT 1
4834: ARRAY
4835: EQUAL
4836: IFFALSE 4850
// Say ( Lisa , DX2a-Lisa-1 ) ;
4838: LD_EXP 4
4842: PPUSH
4843: LD_STRING DX2a-Lisa-1
4845: PPUSH
4846: CALL_OW 88
// for i in temp1 do
4850: LD_ADDR_VAR 0 4
4854: PUSH
4855: LD_VAR 0 2
4859: PUSH
4860: FOR_IN
4861: IFFALSE 4898
// if IsInUnit ( i ) = tmp [ 1 ] then
4863: LD_VAR 0 4
4867: PPUSH
4868: CALL_OW 310
4872: PUSH
4873: LD_VAR 0 1
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: EQUAL
4882: IFFALSE 4896
// Say ( i , DX2a-Sol1-1 ) ;
4884: LD_VAR 0 4
4888: PPUSH
4889: LD_STRING DX2a-Sol1-1
4891: PPUSH
4892: CALL_OW 88
4896: GO 4860
4898: POP
4899: POP
// for i in temp2 do
4900: LD_ADDR_VAR 0 4
4904: PUSH
4905: LD_VAR 0 3
4909: PUSH
4910: FOR_IN
4911: IFFALSE 4948
// if IsInUnit ( i ) = tmp [ 1 ] then
4913: LD_VAR 0 4
4917: PPUSH
4918: CALL_OW 310
4922: PUSH
4923: LD_VAR 0 1
4927: PUSH
4928: LD_INT 1
4930: ARRAY
4931: EQUAL
4932: IFFALSE 4946
// Say ( i , DX2a-FSol1-1 ) ;
4934: LD_VAR 0 4
4938: PPUSH
4939: LD_STRING DX2a-FSol1-1
4941: PPUSH
4942: CALL_OW 88
4946: GO 4910
4948: POP
4949: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4950: LD_EXP 1
4954: PPUSH
4955: CALL_OW 310
4959: PUSH
4960: LD_VAR 0 1
4964: PUSH
4965: LD_INT 1
4967: ARRAY
4968: EQUAL
4969: IFFALSE 4983
// Say ( JMM , DX2b-JMM-1 ) ;
4971: LD_EXP 1
4975: PPUSH
4976: LD_STRING DX2b-JMM-1
4978: PPUSH
4979: CALL_OW 88
// if not IsInUnit ( JMM ) then
4983: LD_EXP 1
4987: PPUSH
4988: CALL_OW 310
4992: NOT
4993: IFFALSE 5007
// Say ( JMM , DX2a-JMM-2 ) ;
4995: LD_EXP 1
4999: PPUSH
5000: LD_STRING DX2a-JMM-2
5002: PPUSH
5003: CALL_OW 88
// DialogueOff ;
5007: CALL_OW 7
// end ;
5011: PPOPN 4
5013: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
5014: LD_INT 1
5016: PPUSH
5017: CALL_OW 255
5021: PUSH
5022: LD_INT 1
5024: EQUAL
5025: PUSH
5026: LD_INT 10
5028: PPUSH
5029: CALL_OW 255
5033: PUSH
5034: LD_INT 1
5036: EQUAL
5037: OR
5038: IFFALSE 5098
5040: GO 5042
5042: DISABLE
// begin DialogueOn ;
5043: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
5047: LD_EXP 1
5051: PPUSH
5052: LD_STRING D3-JMM-1
5054: PPUSH
5055: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
5059: LD_EXP 9
5063: PPUSH
5064: LD_STRING D3-Pow-1
5066: PPUSH
5067: CALL_OW 94
// if IsOK ( Cyrus ) then
5071: LD_EXP 3
5075: PPUSH
5076: CALL_OW 302
5080: IFFALSE 5094
// Say ( Cyrus , D3-Cyrus-1 ) ;
5082: LD_EXP 3
5086: PPUSH
5087: LD_STRING D3-Cyrus-1
5089: PPUSH
5090: CALL_OW 88
// DialogueOff ;
5094: CALL_OW 7
// end ;
5098: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var temp , i ;
5099: LD_INT 1
5101: PPUSH
5102: CALL_OW 255
5106: PUSH
5107: LD_INT 1
5109: EQUAL
5110: PUSH
5111: LD_INT 10
5113: PPUSH
5114: CALL_OW 255
5118: PUSH
5119: LD_INT 1
5121: EQUAL
5122: AND
5123: PUSH
5124: LD_INT 22
5126: PPUSH
5127: LD_INT 22
5129: PUSH
5130: LD_INT 3
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 21
5139: PUSH
5140: LD_INT 1
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PPUSH
5151: CALL_OW 70
5155: PUSH
5156: LD_INT 0
5158: EQUAL
5159: AND
5160: IFFALSE 6405
5162: GO 5164
5164: DISABLE
5165: LD_INT 0
5167: PPUSH
5168: PPUSH
// begin DialogueOn ;
5169: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5173: LD_EXP 1
5177: PPUSH
5178: LD_STRING D3a-JMM-1
5180: PPUSH
5181: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5185: LD_EXP 9
5189: PPUSH
5190: LD_STRING D3a-Pow-1
5192: PPUSH
5193: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5197: LD_EXP 1
5201: PPUSH
5202: LD_STRING D3a-JMM-2
5204: PPUSH
5205: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5209: LD_EXP 9
5213: PPUSH
5214: LD_STRING D3a-Pow-2
5216: PPUSH
5217: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5221: LD_EXP 1
5225: PPUSH
5226: LD_STRING D3a-JMM-3
5228: PPUSH
5229: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5233: LD_EXP 9
5237: PPUSH
5238: LD_STRING D3a-Pow-3
5240: PPUSH
5241: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5245: LD_EXP 1
5249: PPUSH
5250: LD_STRING D3a-JMM-4
5252: PPUSH
5253: CALL_OW 88
// DialogueOff ;
5257: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5261: LD_STRING M2
5263: PPUSH
5264: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5268: LD_EXP 1
5272: PPUSH
5273: LD_STRING D3b-JMM-1
5275: PPUSH
5276: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5280: LD_INT 35
5282: PPUSH
5283: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5287: LD_INT 22
5289: PPUSH
5290: LD_INT 22
5292: PUSH
5293: LD_INT 1
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PUSH
5300: LD_INT 25
5302: PUSH
5303: LD_INT 2
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PPUSH
5314: CALL_OW 70
5318: IFFALSE 5280
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5320: LD_ADDR_VAR 0 1
5324: PUSH
5325: LD_INT 22
5327: PUSH
5328: LD_INT 1
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: LD_INT 23
5337: PUSH
5338: LD_INT 1
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PUSH
5345: LD_INT 25
5347: PUSH
5348: LD_INT 2
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: PUSH
5355: LD_INT 50
5357: PUSH
5358: EMPTY
5359: LIST
5360: PUSH
5361: LD_INT 56
5363: PUSH
5364: EMPTY
5365: LIST
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: PPUSH
5374: CALL_OW 69
5378: PUSH
5379: LD_EXP 1
5383: PUSH
5384: LD_EXP 5
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: DIFF
5393: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5394: LD_INT 35
5396: PPUSH
5397: CALL_OW 67
// until temp > 0 ;
5401: LD_VAR 0 1
5405: PUSH
5406: LD_INT 0
5408: GREATER
5409: IFFALSE 5320
// wait ( 0 0$5 ) ;
5411: LD_INT 175
5413: PPUSH
5414: CALL_OW 67
// PrepareRussianHeroes ;
5418: CALL 11785 0 0
// InGameOn ;
5422: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5426: LD_EXP 8
5430: PPUSH
5431: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5435: LD_EXP 1
5439: PUSH
5440: LD_VAR 0 1
5444: PUSH
5445: LD_INT 1
5447: ARRAY
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PPUSH
5453: LD_EXP 8
5457: PPUSH
5458: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5462: LD_EXP 8
5466: PPUSH
5467: LD_VAR 0 1
5471: PUSH
5472: LD_INT 1
5474: ARRAY
5475: PPUSH
5476: CALL_OW 119
// Wait ( 0 0$02 ) ;
5480: LD_INT 70
5482: PPUSH
5483: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5487: LD_EXP 8
5491: PPUSH
5492: LD_STRING D4-Mikh-1
5494: PPUSH
5495: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5499: LD_VAR 0 1
5503: PUSH
5504: LD_INT 1
5506: ARRAY
5507: PPUSH
5508: CALL_OW 258
5512: PUSH
5513: LD_INT 1
5515: EQUAL
5516: IFFALSE 5534
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5518: LD_VAR 0 1
5522: PUSH
5523: LD_INT 1
5525: ARRAY
5526: PPUSH
5527: LD_STRING D4-Sol1-1
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 2
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-FSol1-1
5564: PPUSH
5565: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5569: LD_EXP 8
5573: PPUSH
5574: LD_STRING D4-Mikh-2
5576: PPUSH
5577: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5581: LD_VAR 0 1
5585: PUSH
5586: LD_INT 1
5588: ARRAY
5589: PPUSH
5590: CALL_OW 258
5594: PUSH
5595: LD_INT 1
5597: EQUAL
5598: IFFALSE 5616
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5600: LD_VAR 0 1
5604: PUSH
5605: LD_INT 1
5607: ARRAY
5608: PPUSH
5609: LD_STRING D4-Sol1-2
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 2
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-FSol1-2
5646: PPUSH
5647: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5651: LD_EXP 8
5655: PPUSH
5656: LD_STRING D4-Mikh-3
5658: PPUSH
5659: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5663: LD_VAR 0 1
5667: PUSH
5668: LD_INT 1
5670: ARRAY
5671: PPUSH
5672: CALL_OW 258
5676: PUSH
5677: LD_INT 1
5679: EQUAL
5680: IFFALSE 5698
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5682: LD_VAR 0 1
5686: PUSH
5687: LD_INT 1
5689: ARRAY
5690: PPUSH
5691: LD_STRING D4-Sol1-3
5693: PPUSH
5694: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5698: LD_VAR 0 1
5702: PUSH
5703: LD_INT 1
5705: ARRAY
5706: PPUSH
5707: CALL_OW 258
5711: PUSH
5712: LD_INT 2
5714: EQUAL
5715: IFFALSE 5733
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5717: LD_VAR 0 1
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PPUSH
5726: LD_STRING D4-FSol1-3
5728: PPUSH
5729: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5733: LD_EXP 8
5737: PPUSH
5738: LD_STRING D4-Mikh-4
5740: PPUSH
5741: CALL_OW 88
// case query ( Qs1 ) of 1 :
5745: LD_STRING Qs1
5747: PPUSH
5748: CALL_OW 97
5752: PUSH
5753: LD_INT 1
5755: DOUBLE
5756: EQUAL
5757: IFTRUE 5761
5759: GO 5796
5761: POP
// begin InGameOff ;
5762: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5766: LD_INT 1
5768: PPUSH
5769: LD_INT 6
5771: PPUSH
5772: LD_INT 2
5774: PPUSH
5775: LD_INT 1
5777: PPUSH
5778: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5782: LD_EXP 8
5786: PPUSH
5787: LD_INT 17
5789: PPUSH
5790: CALL_OW 113
// end ; 2 :
5794: GO 6389
5796: LD_INT 2
5798: DOUBLE
5799: EQUAL
5800: IFTRUE 5804
5802: GO 6354
5804: POP
// begin repeat wait ( 0 0$1 ) ;
5805: LD_INT 35
5807: PPUSH
5808: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5812: LD_VAR 0 1
5816: PUSH
5817: LD_INT 1
5819: ARRAY
5820: PPUSH
5821: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5825: LD_VAR 0 1
5829: PUSH
5830: LD_INT 1
5832: ARRAY
5833: PPUSH
5834: LD_EXP 1
5838: PPUSH
5839: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5843: LD_EXP 8
5847: PPUSH
5848: LD_EXP 1
5852: PPUSH
5853: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5857: LD_EXP 1
5861: PPUSH
5862: LD_EXP 8
5866: PPUSH
5867: CALL_OW 296
5871: PUSH
5872: LD_INT 5
5874: LESS
5875: IFFALSE 5805
// ComTurnUnit ( Mikhail , JMM ) ;
5877: LD_EXP 8
5881: PPUSH
5882: LD_EXP 1
5886: PPUSH
5887: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5891: LD_EXP 1
5895: PPUSH
5896: LD_STRING D4b-JMM-1
5898: PPUSH
5899: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5903: LD_EXP 8
5907: PPUSH
5908: LD_STRING D4b-Mikh-1
5910: PPUSH
5911: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5915: LD_EXP 1
5919: PPUSH
5920: LD_STRING D4b-JMM-2
5922: PPUSH
5923: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5927: LD_EXP 8
5931: PPUSH
5932: LD_STRING D4b-Mikh-2
5934: PPUSH
5935: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5939: LD_EXP 1
5943: PPUSH
5944: LD_STRING D4b-JMM-3
5946: PPUSH
5947: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5951: LD_EXP 8
5955: PPUSH
5956: LD_STRING D4b-Mikh-3
5958: PPUSH
5959: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5963: LD_EXP 1
5967: PPUSH
5968: LD_STRING D4b-JMM-4
5970: PPUSH
5971: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5975: LD_EXP 8
5979: PPUSH
5980: LD_STRING D4b-Mikh-4
5982: PPUSH
5983: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5987: LD_EXP 1
5991: PPUSH
5992: LD_STRING D4b-JMM-5
5994: PPUSH
5995: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5999: LD_EXP 8
6003: PPUSH
6004: LD_STRING D4b-Mikh-5
6006: PPUSH
6007: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
6011: LD_EXP 1
6015: PPUSH
6016: LD_STRING D4b-JMM-6
6018: PPUSH
6019: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
6023: LD_EXP 8
6027: PPUSH
6028: LD_STRING D4b-Mikh-6
6030: PPUSH
6031: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
6035: LD_EXP 1
6039: PPUSH
6040: LD_STRING D4b-JMM-7
6042: PPUSH
6043: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6047: LD_EXP 8
6051: PPUSH
6052: LD_STRING D4b-Mikh-7
6054: PPUSH
6055: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6059: LD_VAR 0 1
6063: PUSH
6064: LD_INT 1
6066: ARRAY
6067: PPUSH
6068: CALL_OW 258
6072: PUSH
6073: LD_INT 1
6075: EQUAL
6076: IFFALSE 6094
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6078: LD_VAR 0 1
6082: PUSH
6083: LD_INT 1
6085: ARRAY
6086: PPUSH
6087: LD_STRING D4b-Sol1-7
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 2
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-FSol1-7
6124: PPUSH
6125: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6129: LD_EXP 1
6133: PPUSH
6134: LD_STRING D4b-JMM-8
6136: PPUSH
6137: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6141: LD_VAR 0 1
6145: PUSH
6146: LD_INT 1
6148: ARRAY
6149: PPUSH
6150: CALL_OW 258
6154: PUSH
6155: LD_INT 1
6157: EQUAL
6158: IFFALSE 6176
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6160: LD_VAR 0 1
6164: PUSH
6165: LD_INT 1
6167: ARRAY
6168: PPUSH
6169: LD_STRING D4b-Sol1-8
6171: PPUSH
6172: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6176: LD_VAR 0 1
6180: PUSH
6181: LD_INT 1
6183: ARRAY
6184: PPUSH
6185: CALL_OW 258
6189: PUSH
6190: LD_INT 2
6192: EQUAL
6193: IFFALSE 6211
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6195: LD_VAR 0 1
6199: PUSH
6200: LD_INT 1
6202: ARRAY
6203: PPUSH
6204: LD_STRING D4b-FSol1-8
6206: PPUSH
6207: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6211: LD_EXP 1
6215: PPUSH
6216: LD_STRING D4b-JMM-9
6218: PPUSH
6219: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6223: LD_EXP 8
6227: PPUSH
6228: LD_INT 1
6230: PPUSH
6231: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6235: LD_ADDR_VAR 0 2
6239: PUSH
6240: LD_INT 22
6242: PUSH
6243: LD_INT 1
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: PPUSH
6253: CALL_OW 69
6257: PUSH
6258: FOR_IN
6259: IFFALSE 6272
// ComFree ( i ) ;
6261: LD_VAR 0 2
6265: PPUSH
6266: CALL_OW 139
6270: GO 6258
6272: POP
6273: POP
// repeat wait ( 0 0$1 ) ;
6274: LD_INT 35
6276: PPUSH
6277: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6281: LD_EXP 8
6285: PPUSH
6286: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6290: LD_EXP 8
6294: PUSH
6295: LD_VAR 0 1
6299: PUSH
6300: LD_INT 1
6302: ARRAY
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6315: LD_EXP 8
6319: PPUSH
6320: CALL_OW 310
6324: IFFALSE 6274
// mikhailDepot = IsInUnit ( Mikhail ) ;
6326: LD_ADDR_EXP 23
6330: PUSH
6331: LD_EXP 8
6335: PPUSH
6336: CALL_OW 310
6340: ST_TO_ADDR
// InGameOff ;
6341: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6345: LD_STRING M3
6347: PPUSH
6348: CALL_OW 337
// end ; 3 :
6352: GO 6389
6354: LD_INT 3
6356: DOUBLE
6357: EQUAL
6358: IFTRUE 6362
6360: GO 6388
6362: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6363: LD_EXP 8
6367: PPUSH
6368: LD_INT 17
6370: PPUSH
6371: CALL_OW 113
// wait ( 0 0$3 ) ;
6375: LD_INT 105
6377: PPUSH
6378: CALL_OW 67
// InGameOff ;
6382: CALL_OW 9
// end ; end ;
6386: GO 6389
6388: POP
// PrepareTigers ;
6389: CALL 14423 0 0
// RussianTrap ;
6393: CALL 10181 0 0
// tigersRespawn = 1 ;
6397: LD_ADDR_EXP 30
6401: PUSH
6402: LD_INT 1
6404: ST_TO_ADDR
// end ;
6405: PPOPN 2
6407: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6408: LD_INT 1
6410: PPUSH
6411: CALL_OW 255
6415: PUSH
6416: LD_INT 1
6418: EQUAL
6419: PUSH
6420: LD_INT 10
6422: PPUSH
6423: CALL_OW 255
6427: PUSH
6428: LD_INT 1
6430: EQUAL
6431: AND
6432: PUSH
6433: LD_INT 1
6435: PPUSH
6436: CALL_OW 274
6440: PPUSH
6441: LD_INT 1
6443: PPUSH
6444: CALL_OW 275
6448: PUSH
6449: LD_INT 100
6451: GREATEREQUAL
6452: AND
6453: IFFALSE 6616
6455: GO 6457
6457: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6458: LD_INT 2100
6460: PPUSH
6461: LD_INT 4200
6463: PPUSH
6464: CALL_OW 12
6468: PUSH
6469: LD_INT 1050
6471: PLUS
6472: PPUSH
6473: CALL_OW 67
// PrepareCargoBays ;
6477: CALL 12906 0 0
// cargoRespawn = 1 ;
6481: LD_ADDR_EXP 28
6485: PUSH
6486: LD_INT 1
6488: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6489: LD_EXP 15
6493: PUSH
6494: LD_EXP 16
6498: PUSH
6499: LD_EXP 17
6503: PUSH
6504: LD_EXP 18
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: PPUSH
6515: LD_INT 36
6517: PPUSH
6518: LD_INT 13
6520: PPUSH
6521: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6525: LD_EXP 15
6529: PUSH
6530: LD_EXP 16
6534: PUSH
6535: LD_EXP 17
6539: PUSH
6540: LD_EXP 18
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: PPUSH
6551: LD_INT 40
6553: PPUSH
6554: LD_INT 20
6556: PPUSH
6557: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6561: LD_EXP 15
6565: PUSH
6566: LD_EXP 16
6570: PUSH
6571: LD_EXP 17
6575: PUSH
6576: LD_EXP 18
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: PPUSH
6587: LD_INT 53
6589: PPUSH
6590: LD_INT 16
6592: PPUSH
6593: CALL_OW 171
// wait ( 0 0$5 ) ;
6597: LD_INT 175
6599: PPUSH
6600: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6604: LD_EXP 17
6608: PPUSH
6609: LD_STRING D5-Rus2-1
6611: PPUSH
6612: CALL_OW 88
// end ;
6616: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6617: LD_EXP 28
6621: PUSH
6622: LD_INT 1
6624: EQUAL
6625: IFFALSE 6857
6627: GO 6629
6629: DISABLE
6630: LD_INT 0
6632: PPUSH
6633: PPUSH
6634: PPUSH
6635: PPUSH
// begin enable ;
6636: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6637: LD_ADDR_VAR 0 3
6641: PUSH
6642: LD_INT 22
6644: PUSH
6645: LD_INT 3
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 21
6654: PUSH
6655: LD_INT 2
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: LD_INT 34
6664: PUSH
6665: LD_INT 51
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 69
6681: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_nation , 1 ] , [ f_btype , b_depot ] ] ] ) ;
6682: LD_ADDR_VAR 0 4
6686: PUSH
6687: LD_INT 22
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 2
6699: PUSH
6700: LD_INT 23
6702: PUSH
6703: LD_INT 1
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 30
6712: PUSH
6713: LD_INT 0
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PPUSH
6729: CALL_OW 69
6733: ST_TO_ADDR
// for i in tmp1 do
6734: LD_ADDR_VAR 0 1
6738: PUSH
6739: LD_VAR 0 3
6743: PUSH
6744: FOR_IN
6745: IFFALSE 6855
// begin for j in tmp2 do
6747: LD_ADDR_VAR 0 2
6751: PUSH
6752: LD_VAR 0 4
6756: PUSH
6757: FOR_IN
6758: IFFALSE 6851
// begin if GetDistUnits ( i , j ) < 7 then
6760: LD_VAR 0 1
6764: PPUSH
6765: LD_VAR 0 2
6769: PPUSH
6770: CALL_OW 296
6774: PUSH
6775: LD_INT 7
6777: LESS
6778: IFFALSE 6849
// begin disable ;
6780: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6781: LD_EXP 15
6785: PUSH
6786: LD_EXP 16
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PPUSH
6795: LD_INT 7
6797: PPUSH
6798: LD_INT 9
6800: PPUSH
6801: CALL_OW 111
// if cargoSee = 0 then
6805: LD_EXP 29
6809: PUSH
6810: LD_INT 0
6812: EQUAL
6813: IFFALSE 6849
// begin cargoSee = 1 ;
6815: LD_ADDR_EXP 29
6819: PUSH
6820: LD_INT 1
6822: ST_TO_ADDR
// cargoEscape = 1 ;
6823: LD_ADDR_EXP 20
6827: PUSH
6828: LD_INT 1
6830: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6831: LD_EXP 17
6835: PPUSH
6836: LD_STRING D5-Rus2-1a
6838: PPUSH
6839: CALL_OW 88
// exit ;
6843: POP
6844: POP
6845: POP
6846: POP
6847: GO 6857
// end ; end ; end ;
6849: GO 6757
6851: POP
6852: POP
// end ;
6853: GO 6744
6855: POP
6856: POP
// end ;
6857: PPOPN 4
6859: END
// every 0 0$1 trigger cargoEscape > 0 do
6860: LD_EXP 20
6864: PUSH
6865: LD_INT 0
6867: GREATER
6868: IFFALSE 7015
6870: GO 6872
6872: DISABLE
// begin enable ;
6873: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6874: LD_EXP 15
6878: PUSH
6879: LD_EXP 16
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PPUSH
6888: LD_INT 13
6890: PPUSH
6891: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6895: LD_EXP 15
6899: PPUSH
6900: LD_INT 13
6902: PPUSH
6903: CALL_OW 308
6907: PUSH
6908: LD_EXP 17
6912: PPUSH
6913: LD_INT 13
6915: PPUSH
6916: CALL_OW 308
6920: OR
6921: IFFALSE 6955
// begin RemoveUnit ( cargo1 ) ;
6923: LD_EXP 15
6927: PPUSH
6928: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6932: LD_EXP 17
6936: PPUSH
6937: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6941: LD_ADDR_EXP 20
6945: PUSH
6946: LD_EXP 20
6950: PUSH
6951: LD_INT 1
6953: PLUS
6954: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6955: LD_EXP 16
6959: PPUSH
6960: LD_INT 13
6962: PPUSH
6963: CALL_OW 308
6967: PUSH
6968: LD_EXP 18
6972: PPUSH
6973: LD_INT 13
6975: PPUSH
6976: CALL_OW 308
6980: OR
6981: IFFALSE 7015
// begin RemoveUnit ( cargo2 ) ;
6983: LD_EXP 16
6987: PPUSH
6988: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6992: LD_EXP 18
6996: PPUSH
6997: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
7001: LD_ADDR_EXP 20
7005: PUSH
7006: LD_EXP 20
7010: PUSH
7011: LD_INT 1
7013: PLUS
7014: ST_TO_ADDR
// end ; end ;
7015: END
// every 0 0$1 trigger cargoEscape > 1 do
7016: LD_EXP 20
7020: PUSH
7021: LD_INT 1
7023: GREATER
7024: IFFALSE 7188
7026: GO 7028
7028: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
7029: LD_INT 4
7031: PPUSH
7032: LD_INT 1
7034: PPUSH
7035: LD_INT 1
7037: PPUSH
7038: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7042: LD_INT 31
7044: PPUSH
7045: LD_INT 1
7047: PPUSH
7048: LD_INT 1
7050: PPUSH
7051: CALL_OW 324
// if IsOK ( Jerry ) then
7055: LD_EXP 7
7059: PPUSH
7060: CALL_OW 302
7064: IFFALSE 7080
// begin Say ( Jerry , D5a-Sol1-1 ) ;
7066: LD_EXP 7
7070: PPUSH
7071: LD_STRING D5a-Sol1-1
7073: PPUSH
7074: CALL_OW 88
// end else
7078: GO 7176
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
7080: LD_INT 22
7082: PUSH
7083: LD_INT 1
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 23
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 26
7102: PUSH
7103: LD_INT 1
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: PPUSH
7115: CALL_OW 69
7119: PUSH
7120: LD_INT 2
7122: PPUSH
7123: LD_INT 22
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 23
7135: PUSH
7136: LD_INT 1
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PUSH
7143: LD_INT 26
7145: PUSH
7146: LD_INT 1
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: PPUSH
7158: CALL_OW 69
7162: PPUSH
7163: CALL_OW 12
7167: ARRAY
7168: PPUSH
7169: LD_STRING D5a-Sol1-1
7171: PPUSH
7172: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7176: LD_EXP 1
7180: PPUSH
7181: LD_STRING D5a-JMM-1
7183: PPUSH
7184: CALL_OW 88
// end ;
7188: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7189: LD_INT 1
7191: PPUSH
7192: CALL_OW 255
7196: PUSH
7197: LD_INT 3
7199: EQUAL
7200: PUSH
7201: LD_INT 1
7203: PPUSH
7204: CALL_OW 256
7208: PUSH
7209: LD_INT 1000
7211: LESS
7212: AND
7213: PUSH
7214: LD_INT 10
7216: PPUSH
7217: CALL_OW 255
7221: PUSH
7222: LD_INT 3
7224: EQUAL
7225: PUSH
7226: LD_INT 10
7228: PPUSH
7229: CALL_OW 256
7233: PUSH
7234: LD_INT 1000
7236: LESS
7237: AND
7238: OR
7239: IFFALSE 7256
7241: GO 7243
7243: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
7244: LD_EXP 1
7248: PPUSH
7249: LD_STRING D8-JMM-1
7251: PPUSH
7252: CALL_OW 88
// end ;
7256: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7257: LD_EXP 8
7261: PPUSH
7262: CALL_OW 310
7266: PUSH
7267: LD_INT 1
7269: EQUAL
7270: PUSH
7271: LD_EXP 22
7275: PUSH
7276: LD_INT 3
7278: EQUAL
7279: NOT
7280: AND
7281: IFFALSE 7303
7283: GO 7285
7285: DISABLE
// begin mikhailInBase = 1 ;
7286: LD_ADDR_EXP 22
7290: PUSH
7291: LD_INT 1
7293: ST_TO_ADDR
// mikhailStatus = 1 ;
7294: LD_ADDR_EXP 21
7298: PUSH
7299: LD_INT 1
7301: ST_TO_ADDR
// enable ;
7302: ENABLE
// end ;
7303: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
7304: LD_EXP 8
7308: PPUSH
7309: LD_INT 25
7311: PPUSH
7312: CALL_OW 308
7316: PUSH
7317: LD_EXP 22
7321: PUSH
7322: LD_INT 1
7324: EQUAL
7325: AND
7326: PUSH
7327: LD_EXP 8
7331: PPUSH
7332: CALL_OW 255
7336: PUSH
7337: LD_INT 1
7339: EQUAL
7340: AND
7341: IFFALSE 7671
7343: GO 7345
7345: DISABLE
// begin enable ;
7346: ENABLE
// case query ( QMikh2 ) of 1 :
7347: LD_STRING QMikh2
7349: PPUSH
7350: CALL_OW 97
7354: PUSH
7355: LD_INT 1
7357: DOUBLE
7358: EQUAL
7359: IFTRUE 7363
7361: GO 7430
7363: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7364: LD_INT 1
7366: PPUSH
7367: LD_INT 6
7369: PPUSH
7370: LD_INT 2
7372: PPUSH
7373: LD_INT 1
7375: PPUSH
7376: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7380: LD_EXP 8
7384: PPUSH
7385: LD_INT 6
7387: PPUSH
7388: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7392: LD_EXP 8
7396: PPUSH
7397: CALL_OW 122
// wait ( 0 0$1 ) ;
7401: LD_INT 35
7403: PPUSH
7404: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7408: LD_EXP 8
7412: PPUSH
7413: LD_INT 17
7415: PPUSH
7416: CALL_OW 113
// mikhailInbase = 0 ;
7420: LD_ADDR_EXP 22
7424: PUSH
7425: LD_INT 0
7427: ST_TO_ADDR
// end ; 2 :
7428: GO 7671
7430: LD_INT 2
7432: DOUBLE
7433: EQUAL
7434: IFTRUE 7438
7436: GO 7611
7438: POP
// begin mikhailInBase = 2 ;
7439: LD_ADDR_EXP 22
7443: PUSH
7444: LD_INT 2
7446: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7447: LD_EXP 8
7451: PPUSH
7452: LD_INT 6
7454: PPUSH
7455: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7459: LD_EXP 8
7463: PPUSH
7464: CALL_OW 122
// wait ( 0 0$1 ) ;
7468: LD_INT 35
7470: PPUSH
7471: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7475: LD_EXP 8
7479: PPUSH
7480: LD_EXP 8
7484: PPUSH
7485: CALL_OW 250
7489: PUSH
7490: LD_INT 2
7492: PLUS
7493: PPUSH
7494: LD_EXP 8
7498: PPUSH
7499: CALL_OW 251
7503: PUSH
7504: LD_INT 2
7506: PLUS
7507: PPUSH
7508: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7512: LD_EXP 8
7516: PPUSH
7517: LD_EXP 8
7521: PPUSH
7522: CALL_OW 250
7526: PUSH
7527: LD_INT 1
7529: PLUS
7530: PPUSH
7531: LD_EXP 8
7535: PPUSH
7536: CALL_OW 251
7540: PUSH
7541: LD_INT 2
7543: PLUS
7544: PPUSH
7545: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7549: LD_EXP 8
7553: PPUSH
7554: LD_EXP 8
7558: PPUSH
7559: CALL_OW 250
7563: PUSH
7564: LD_INT 2
7566: PLUS
7567: PPUSH
7568: LD_EXP 8
7572: PPUSH
7573: CALL_OW 251
7577: PPUSH
7578: CALL_OW 171
// wait ( 0 0$5 ) ;
7582: LD_INT 175
7584: PPUSH
7585: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7589: LD_EXP 8
7593: PPUSH
7594: LD_INT 25
7596: PPUSH
7597: CALL_OW 113
// mikhailInBase = 4 ;
7601: LD_ADDR_EXP 22
7605: PUSH
7606: LD_INT 4
7608: ST_TO_ADDR
// end ; 3 :
7609: GO 7671
7611: LD_INT 3
7613: DOUBLE
7614: EQUAL
7615: IFTRUE 7619
7617: GO 7670
7619: POP
// begin SetSide ( Mikhail , 6 ) ;
7620: LD_EXP 8
7624: PPUSH
7625: LD_INT 6
7627: PPUSH
7628: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7632: LD_EXP 8
7636: PPUSH
7637: CALL_OW 122
// wait ( 0 0$1 ) ;
7641: LD_INT 35
7643: PPUSH
7644: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7648: LD_EXP 8
7652: PPUSH
7653: LD_INT 17
7655: PPUSH
7656: CALL_OW 113
// mikhailInbase = 3 ;
7660: LD_ADDR_EXP 22
7664: PUSH
7665: LD_INT 3
7667: ST_TO_ADDR
// end ; end ;
7668: GO 7671
7670: POP
// end ;
7671: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7672: LD_EXP 8
7676: PPUSH
7677: LD_INT 25
7679: PPUSH
7680: CALL_OW 308
7684: PUSH
7685: LD_EXP 22
7689: PUSH
7690: LD_INT 4
7692: EQUAL
7693: AND
7694: IFFALSE 7758
7696: GO 7698
7698: DISABLE
// begin enable ;
7699: ENABLE
// InGameOn ;
7700: CALL_OW 8
// SetSide ( Mikhail , 1 ) ;
7704: LD_EXP 8
7708: PPUSH
7709: LD_INT 1
7711: PPUSH
7712: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7716: LD_INT 35
7718: PPUSH
7719: CALL_OW 67
// ComEnterUnit ( Mikhail , dep1 ) ;
7723: LD_EXP 8
7727: PPUSH
7728: LD_INT 1
7730: PPUSH
7731: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
7735: LD_EXP 8
7739: PPUSH
7740: CALL_OW 310
7744: IFFALSE 7716
// InGameOff ;
7746: CALL_OW 9
// mikhailInBase = 1 ;
7750: LD_ADDR_EXP 22
7754: PUSH
7755: LD_INT 1
7757: ST_TO_ADDR
// end ;
7758: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7759: LD_EXP 8
7763: PPUSH
7764: CALL_OW 310
7768: PUSH
7769: LD_EXP 22
7773: PUSH
7774: LD_INT 3
7776: EQUAL
7777: NOT
7778: AND
7779: IFFALSE 7905
7781: GO 7783
7783: DISABLE
// begin enable ;
7784: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7785: LD_INT 22
7787: PUSH
7788: LD_INT 1
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: LD_INT 21
7797: PUSH
7798: LD_INT 1
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 91
7807: PUSH
7808: LD_EXP 8
7812: PPUSH
7813: CALL_OW 310
7817: PUSH
7818: LD_INT 10
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: LIST
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: LIST
7830: PPUSH
7831: CALL_OW 69
7835: PUSH
7836: LD_INT 1
7838: EQUAL
7839: IFFALSE 7905
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7841: LD_INT 1
7843: PPUSH
7844: LD_INT 6
7846: PPUSH
7847: LD_INT 2
7849: PPUSH
7850: LD_INT 1
7852: PPUSH
7853: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7857: LD_EXP 8
7861: PPUSH
7862: LD_INT 6
7864: PPUSH
7865: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7869: LD_EXP 8
7873: PPUSH
7874: CALL_OW 122
// wait ( 0 0$1 ) ;
7878: LD_INT 35
7880: PPUSH
7881: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7885: LD_EXP 8
7889: PPUSH
7890: LD_INT 17
7892: PPUSH
7893: CALL_OW 113
// mikhailStatus = 3 ;
7897: LD_ADDR_EXP 21
7901: PUSH
7902: LD_INT 3
7904: ST_TO_ADDR
// end ; end ;
7905: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7906: LD_EXP 1
7910: PPUSH
7911: LD_EXP 23
7915: PPUSH
7916: CALL_OW 296
7920: PUSH
7921: LD_INT 5
7923: LESS
7924: PUSH
7925: LD_EXP 21
7929: PUSH
7930: LD_INT 3
7932: EQUAL
7933: AND
7934: PUSH
7935: LD_EXP 22
7939: PUSH
7940: LD_INT 3
7942: EQUAL
7943: NOT
7944: AND
7945: IFFALSE 8167
7947: GO 7949
7949: DISABLE
7950: LD_INT 0
7952: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7953: LD_ADDR_VAR 0 1
7957: PUSH
7958: LD_INT 22
7960: PUSH
7961: LD_INT 1
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 21
7970: PUSH
7971: LD_INT 1
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 26
7980: PUSH
7981: LD_INT 1
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: LIST
7992: PPUSH
7993: CALL_OW 69
7997: PUSH
7998: LD_EXP 1
8002: PUSH
8003: LD_EXP 5
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: DIFF
8012: ST_TO_ADDR
// DialogueOn ;
8013: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8017: LD_EXP 1
8021: PPUSH
8022: LD_STRING D7-JMM-1
8024: PPUSH
8025: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8029: LD_VAR 0 1
8033: PUSH
8034: LD_INT 1
8036: ARRAY
8037: PPUSH
8038: LD_STRING D7-Sol1-1
8040: PPUSH
8041: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8045: LD_EXP 1
8049: PPUSH
8050: LD_STRING D7-JMM-2
8052: PPUSH
8053: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8057: LD_VAR 0 1
8061: PUSH
8062: LD_INT 1
8064: ARRAY
8065: PPUSH
8066: LD_STRING D7-Sol1-2
8068: PPUSH
8069: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8073: LD_EXP 1
8077: PPUSH
8078: LD_STRING D7-JMM-3
8080: PPUSH
8081: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8085: LD_VAR 0 1
8089: PUSH
8090: LD_INT 1
8092: ARRAY
8093: PPUSH
8094: LD_STRING D7-Sol1-3
8096: PPUSH
8097: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8101: LD_EXP 3
8105: PPUSH
8106: CALL_OW 302
8110: PUSH
8111: LD_EXP 4
8115: PPUSH
8116: CALL_OW 302
8120: AND
8121: IFFALSE 8163
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8123: LD_EXP 3
8127: PPUSH
8128: LD_STRING D7-Cyrus-3
8130: PPUSH
8131: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8135: LD_VAR 0 1
8139: PUSH
8140: LD_INT 1
8142: ARRAY
8143: PPUSH
8144: LD_STRING D7-Sol1-4
8146: PPUSH
8147: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8151: LD_EXP 4
8155: PPUSH
8156: LD_STRING D7-Lisa-4
8158: PPUSH
8159: CALL_OW 88
// end ; DialogueOff ;
8163: CALL_OW 7
// end ;
8167: PPOPN 1
8169: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8170: LD_EXP 8
8174: PPUSH
8175: CALL_OW 303
8179: PUSH
8180: LD_EXP 21
8184: PUSH
8185: LD_INT 3
8187: EQUAL
8188: AND
8189: IFFALSE 8203
8191: GO 8193
8193: DISABLE
// begin enable ;
8194: ENABLE
// mikhailStatus = 2 ;
8195: LD_ADDR_EXP 21
8199: PUSH
8200: LD_INT 2
8202: ST_TO_ADDR
// end ;
8203: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8204: LD_EXP 8
8208: PPUSH
8209: LD_INT 17
8211: PPUSH
8212: CALL_OW 308
8216: PUSH
8217: LD_EXP 8
8221: PPUSH
8222: CALL_OW 255
8226: PUSH
8227: LD_INT 6
8229: EQUAL
8230: AND
8231: IFFALSE 8264
8233: GO 8235
8235: DISABLE
// begin if not mikhailInBase = 3 then
8236: LD_EXP 22
8240: PUSH
8241: LD_INT 3
8243: EQUAL
8244: NOT
8245: IFFALSE 8255
// mikhailStatus = 3 ;
8247: LD_ADDR_EXP 21
8251: PUSH
8252: LD_INT 3
8254: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8255: LD_EXP 8
8259: PPUSH
8260: CALL_OW 64
// end ;
8264: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8265: LD_EXP 21
8269: PUSH
8270: LD_INT 3
8272: EQUAL
8273: PUSH
8274: LD_EXP 8
8278: PPUSH
8279: CALL_OW 255
8283: PUSH
8284: LD_INT 6
8286: EQUAL
8287: AND
8288: IFFALSE 8454
8290: GO 8292
8292: DISABLE
8293: LD_INT 0
8295: PPUSH
8296: PPUSH
// begin enable ;
8297: ENABLE
// if IsOk ( Mikhail ) then
8298: LD_EXP 8
8302: PPUSH
8303: CALL_OW 302
8307: IFFALSE 8454
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8309: LD_ADDR_VAR 0 2
8313: PUSH
8314: LD_EXP 8
8318: PPUSH
8319: LD_INT 22
8321: PUSH
8322: LD_INT 1
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 21
8331: PUSH
8332: LD_INT 1
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 69
8347: PPUSH
8348: CALL 10373 0 2
8352: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8353: LD_VAR 0 2
8357: PPUSH
8358: LD_EXP 8
8362: PPUSH
8363: CALL_OW 296
8367: PUSH
8368: LD_INT 8
8370: LESS
8371: IFFALSE 8454
// begin if GetSex ( attacker ) = sex_male then
8373: LD_VAR 0 2
8377: PPUSH
8378: CALL_OW 258
8382: PUSH
8383: LD_INT 1
8385: EQUAL
8386: IFFALSE 8422
// begin disable ;
8388: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8389: LD_VAR 0 2
8393: PPUSH
8394: LD_STRING D7a-Sol1-1
8396: PPUSH
8397: CALL_OW 88
// wait ( 0 0$2 ) ;
8401: LD_INT 70
8403: PPUSH
8404: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8408: LD_VAR 0 2
8412: PPUSH
8413: LD_STRING D7a-Sol1-1a
8415: PPUSH
8416: CALL_OW 88
// end else
8420: GO 8454
// begin disable ;
8422: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8423: LD_VAR 0 2
8427: PPUSH
8428: LD_STRING D7a-FSol1-1
8430: PPUSH
8431: CALL_OW 88
// wait ( 0 0$2 ) ;
8435: LD_INT 70
8437: PPUSH
8438: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8442: LD_VAR 0 2
8446: PPUSH
8447: LD_STRING D7a-FSol1-1a
8449: PPUSH
8450: CALL_OW 88
// end ; end ; end ; end ;
8454: PPOPN 2
8456: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8457: LD_EXP 27
8461: PUSH
8462: LD_INT 1
8464: EQUAL
8465: PUSH
8466: LD_INT 22
8468: PPUSH
8469: LD_INT 22
8471: PUSH
8472: LD_INT 3
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 21
8481: PUSH
8482: LD_INT 1
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PPUSH
8493: CALL_OW 70
8497: PUSH
8498: LD_INT 2
8500: GREATER
8501: AND
8502: PUSH
8503: LD_INT 22
8505: PPUSH
8506: LD_INT 22
8508: PUSH
8509: LD_INT 1
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PUSH
8516: LD_INT 2
8518: PUSH
8519: LD_INT 21
8521: PUSH
8522: LD_INT 1
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 59
8531: PUSH
8532: EMPTY
8533: LIST
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: LIST
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 70
8548: PUSH
8549: LD_INT 0
8551: EQUAL
8552: AND
8553: IFFALSE 8568
8555: GO 8557
8557: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8558: LD_INT 1
8560: PPUSH
8561: LD_INT 3
8563: PPUSH
8564: CALL_OW 235
// end ;
8568: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8569: LD_EXP 30
8573: PUSH
8574: LD_INT 1
8576: EQUAL
8577: PUSH
8578: LD_INT 22
8580: PUSH
8581: LD_INT 0
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 25
8590: PUSH
8591: LD_INT 14
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PPUSH
8602: CALL_OW 69
8606: PUSH
8607: LD_INT 0
8609: EQUAL
8610: AND
8611: IFFALSE 8705
8613: GO 8615
8615: DISABLE
8616: LD_INT 0
8618: PPUSH
8619: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8620: LD_ADDR_VAR 0 2
8624: PUSH
8625: LD_INT 22
8627: PUSH
8628: LD_INT 1
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: PUSH
8635: LD_INT 21
8637: PUSH
8638: LD_INT 1
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: LD_INT 23
8647: PUSH
8648: LD_INT 1
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: LIST
8659: PPUSH
8660: CALL_OW 69
8664: ST_TO_ADDR
// for i in tmp do
8665: LD_ADDR_VAR 0 1
8669: PUSH
8670: LD_VAR 0 2
8674: PUSH
8675: FOR_IN
8676: IFFALSE 8703
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8678: LD_VAR 0 1
8682: PPUSH
8683: LD_INT 1
8685: PPUSH
8686: LD_INT 4
8688: PPUSH
8689: CALL_OW 12
8693: PPUSH
8694: LD_INT 300
8696: PPUSH
8697: CALL_OW 492
// end ;
8701: GO 8675
8703: POP
8704: POP
// end ; end_of_file
8705: PPOPN 2
8707: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8708: LD_INT 0
8710: PPUSH
8711: PPUSH
8712: PPUSH
8713: PPUSH
// for i = 1 to count do
8714: LD_ADDR_VAR 0 8
8718: PUSH
8719: DOUBLE
8720: LD_INT 1
8722: DEC
8723: ST_TO_ADDR
8724: LD_VAR 0 6
8728: PUSH
8729: FOR_TO
8730: IFFALSE 8811
// begin uc_side = side ;
8732: LD_ADDR_OWVAR 20
8736: PUSH
8737: LD_VAR 0 1
8741: ST_TO_ADDR
// uc_nation = nation ;
8742: LD_ADDR_OWVAR 21
8746: PUSH
8747: LD_VAR 0 2
8751: ST_TO_ADDR
// hc_gallery =  ;
8752: LD_ADDR_OWVAR 33
8756: PUSH
8757: LD_STRING 
8759: ST_TO_ADDR
// hc_name =  ;
8760: LD_ADDR_OWVAR 26
8764: PUSH
8765: LD_STRING 
8767: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8768: LD_INT 0
8770: PPUSH
8771: LD_VAR 0 5
8775: PPUSH
8776: LD_VAR 0 4
8780: PPUSH
8781: CALL_OW 380
// un = CreateHuman ;
8785: LD_ADDR_VAR 0 10
8789: PUSH
8790: CALL_OW 44
8794: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8795: LD_VAR 0 10
8799: PPUSH
8800: LD_VAR 0 3
8804: PPUSH
8805: CALL_OW 52
// end ;
8809: GO 8729
8811: POP
8812: POP
// end ;
8813: LD_VAR 0 7
8817: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8818: LD_INT 0
8820: PPUSH
8821: PPUSH
8822: PPUSH
// uc_side := GetSide ( b ) ;
8823: LD_ADDR_OWVAR 20
8827: PUSH
8828: LD_VAR 0 2
8832: PPUSH
8833: CALL_OW 255
8837: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8838: LD_ADDR_OWVAR 21
8842: PUSH
8843: LD_VAR 0 2
8847: PPUSH
8848: CALL_OW 248
8852: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8853: LD_INT 0
8855: PPUSH
8856: LD_INT 1
8858: PPUSH
8859: LD_VAR 0 1
8863: PPUSH
8864: CALL_OW 380
// un = CreateHuman ;
8868: LD_ADDR_VAR 0 4
8872: PUSH
8873: CALL_OW 44
8877: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8878: LD_ADDR_VAR 0 5
8882: PUSH
8883: LD_VAR 0 2
8887: PPUSH
8888: CALL_OW 254
8892: PUSH
8893: LD_INT 3
8895: MINUS
8896: ST_TO_ADDR
// if dir < 0 then
8897: LD_VAR 0 5
8901: PUSH
8902: LD_INT 0
8904: LESS
8905: IFFALSE 8921
// dir := 6 + dir ;
8907: LD_ADDR_VAR 0 5
8911: PUSH
8912: LD_INT 6
8914: PUSH
8915: LD_VAR 0 5
8919: PLUS
8920: ST_TO_ADDR
// SetDir ( un , dir ) ;
8921: LD_VAR 0 4
8925: PPUSH
8926: LD_VAR 0 5
8930: PPUSH
8931: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8935: LD_VAR 0 4
8939: PPUSH
8940: LD_VAR 0 2
8944: PPUSH
8945: CALL_OW 52
// end ;
8949: LD_VAR 0 3
8953: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8954: LD_INT 0
8956: PPUSH
8957: PPUSH
8958: PPUSH
8959: PPUSH
8960: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8961: LD_ADDR_VAR 0 7
8965: PUSH
8966: LD_INT 22
8968: PUSH
8969: LD_VAR 0 1
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 25
8980: PUSH
8981: LD_INT 2
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 24
8990: PUSH
8991: LD_INT 1000
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: LIST
9002: PPUSH
9003: CALL_OW 69
9007: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9008: LD_ADDR_VAR 0 5
9012: PUSH
9013: LD_VAR 0 3
9017: PPUSH
9018: LD_INT 22
9020: PUSH
9021: LD_VAR 0 1
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: LD_INT 21
9032: PUSH
9033: LD_INT 3
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: LD_INT 3
9042: PUSH
9043: LD_INT 24
9045: PUSH
9046: LD_INT 1000
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: LIST
9061: PUSH
9062: EMPTY
9063: LIST
9064: PPUSH
9065: CALL_OW 70
9069: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
9070: LD_VAR 0 5
9074: PUSH
9075: LD_INT 0
9077: GREATER
9078: PUSH
9079: LD_VAR 0 7
9083: PUSH
9084: LD_INT 0
9086: GREATER
9087: AND
9088: IFFALSE 9154
// begin for i in engineerOk_list do
9090: LD_ADDR_VAR 0 6
9094: PUSH
9095: LD_VAR 0 7
9099: PUSH
9100: FOR_IN
9101: IFFALSE 9152
// begin for j in buildings_list do
9103: LD_ADDR_VAR 0 8
9107: PUSH
9108: LD_VAR 0 5
9112: PUSH
9113: FOR_IN
9114: IFFALSE 9148
// begin AddComExitBuilding ( i ) ;
9116: LD_VAR 0 6
9120: PPUSH
9121: CALL_OW 182
// wait ( 0 0$1 ) ;
9125: LD_INT 35
9127: PPUSH
9128: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
9132: LD_VAR 0 6
9136: PPUSH
9137: LD_VAR 0 8
9141: PPUSH
9142: CALL_OW 190
// end ;
9146: GO 9113
9148: POP
9149: POP
// end ;
9150: GO 9100
9152: POP
9153: POP
// end ; if buildings_list = 0 then
9154: LD_VAR 0 5
9158: PUSH
9159: LD_INT 0
9161: EQUAL
9162: IFFALSE 9195
// begin for i in engineerOK_list do
9164: LD_ADDR_VAR 0 6
9168: PUSH
9169: LD_VAR 0 7
9173: PUSH
9174: FOR_IN
9175: IFFALSE 9193
// begin ComEnterUnit ( i , building ) ;
9177: LD_VAR 0 6
9181: PPUSH
9182: LD_VAR 0 2
9186: PPUSH
9187: CALL_OW 120
// end ;
9191: GO 9174
9193: POP
9194: POP
// end ; end ;
9195: LD_VAR 0 4
9199: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9200: LD_INT 0
9202: PPUSH
9203: PPUSH
9204: PPUSH
9205: PPUSH
9206: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9207: LD_ADDR_VAR 0 6
9211: PUSH
9212: LD_INT 22
9214: PUSH
9215: LD_VAR 0 1
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: LD_INT 25
9226: PUSH
9227: LD_INT 4
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PUSH
9234: LD_INT 24
9236: PUSH
9237: LD_INT 250
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: LIST
9248: PPUSH
9249: CALL_OW 69
9253: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9254: LD_ADDR_VAR 0 9
9258: PUSH
9259: LD_VAR 0 3
9263: PPUSH
9264: LD_INT 22
9266: PUSH
9267: LD_VAR 0 1
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 21
9278: PUSH
9279: LD_INT 1
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: PUSH
9286: LD_INT 3
9288: PUSH
9289: LD_INT 24
9291: PUSH
9292: LD_INT 650
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: PPUSH
9308: CALL_OW 70
9312: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9313: LD_VAR 0 9
9317: PUSH
9318: LD_INT 0
9320: GREATER
9321: PUSH
9322: LD_VAR 0 6
9326: PUSH
9327: LD_INT 0
9329: GREATER
9330: AND
9331: IFFALSE 9458
// begin for i = 1 to damageUnits do
9333: LD_ADDR_VAR 0 7
9337: PUSH
9338: DOUBLE
9339: LD_INT 1
9341: DEC
9342: ST_TO_ADDR
9343: LD_VAR 0 9
9347: PUSH
9348: FOR_TO
9349: IFFALSE 9373
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9351: LD_VAR 0 9
9355: PUSH
9356: LD_VAR 0 7
9360: ARRAY
9361: PPUSH
9362: LD_VAR 0 2
9366: PPUSH
9367: CALL_OW 113
9371: GO 9348
9373: POP
9374: POP
// for i in sci_list do
9375: LD_ADDR_VAR 0 7
9379: PUSH
9380: LD_VAR 0 6
9384: PUSH
9385: FOR_IN
9386: IFFALSE 9454
// begin ComExitBuilding ( i ) ;
9388: LD_VAR 0 7
9392: PPUSH
9393: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9397: LD_ADDR_VAR 0 8
9401: PUSH
9402: LD_VAR 0 2
9406: PPUSH
9407: LD_INT 22
9409: PUSH
9410: LD_VAR 0 1
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PPUSH
9419: CALL_OW 70
9423: PUSH
9424: FOR_IN
9425: IFFALSE 9450
// begin AddComHeal ( i , j ) ;
9427: LD_VAR 0 7
9431: PPUSH
9432: LD_VAR 0 8
9436: PPUSH
9437: CALL_OW 188
// wait ( 1 1$0 ) ;
9441: LD_INT 2100
9443: PPUSH
9444: CALL_OW 67
// end ;
9448: GO 9424
9450: POP
9451: POP
// end ;
9452: GO 9385
9454: POP
9455: POP
// end else
9456: GO 9472
// begin AddComEnterUnit ( sci_list , build ) ;
9458: LD_VAR 0 6
9462: PPUSH
9463: LD_VAR 0 4
9467: PPUSH
9468: CALL_OW 180
// end ; end ;
9472: LD_VAR 0 5
9476: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9477: LD_INT 0
9479: PPUSH
9480: PPUSH
9481: PPUSH
9482: PPUSH
9483: PPUSH
9484: PPUSH
9485: PPUSH
9486: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9487: LD_ADDR_VAR 0 7
9491: PUSH
9492: LD_VAR 0 3
9496: PPUSH
9497: LD_INT 22
9499: PUSH
9500: LD_VAR 0 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 21
9511: PUSH
9512: LD_INT 2
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 24
9521: PUSH
9522: LD_INT 550
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 34
9531: PUSH
9532: LD_INT 46
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: PPUSH
9545: CALL_OW 70
9549: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9550: LD_ADDR_VAR 0 8
9554: PUSH
9555: LD_VAR 0 3
9559: PPUSH
9560: LD_INT 22
9562: PUSH
9563: LD_VAR 0 1
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 21
9574: PUSH
9575: LD_INT 2
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 34
9584: PUSH
9585: LD_INT 46
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 3
9594: PUSH
9595: LD_INT 24
9597: PUSH
9598: LD_INT 550
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: PPUSH
9615: CALL_OW 70
9619: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9620: LD_ADDR_VAR 0 9
9624: PUSH
9625: LD_VAR 0 2
9629: PPUSH
9630: LD_INT 22
9632: PUSH
9633: LD_VAR 0 1
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PUSH
9642: LD_INT 21
9644: PUSH
9645: LD_INT 2
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: LD_INT 34
9654: PUSH
9655: LD_INT 46
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PUSH
9662: LD_INT 24
9664: PUSH
9665: LD_INT 1000
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: PUSH
9672: LD_INT 58
9674: PUSH
9675: EMPTY
9676: LIST
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: PPUSH
9685: CALL_OW 70
9689: ST_TO_ADDR
// for i in damageVehicle_list do
9690: LD_ADDR_VAR 0 5
9694: PUSH
9695: LD_VAR 0 8
9699: PUSH
9700: FOR_IN
9701: IFFALSE 9720
// mechanicInside_list = UnitsInside ( i ) ;
9703: LD_ADDR_VAR 0 10
9707: PUSH
9708: LD_VAR 0 5
9712: PPUSH
9713: CALL_OW 313
9717: ST_TO_ADDR
9718: GO 9700
9720: POP
9721: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9722: LD_ADDR_VAR 0 11
9726: PUSH
9727: LD_VAR 0 2
9731: PPUSH
9732: LD_INT 22
9734: PUSH
9735: LD_VAR 0 1
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 25
9746: PUSH
9747: LD_INT 3
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PPUSH
9758: CALL_OW 70
9762: ST_TO_ADDR
// if damageVehicle_list > 0 then
9763: LD_VAR 0 8
9767: PUSH
9768: LD_INT 0
9770: GREATER
9771: IFFALSE 9844
// begin for i in damageVehicle_list do
9773: LD_ADDR_VAR 0 5
9777: PUSH
9778: LD_VAR 0 8
9782: PUSH
9783: FOR_IN
9784: IFFALSE 9842
// begin for j in mechanicInside_list do
9786: LD_ADDR_VAR 0 6
9790: PUSH
9791: LD_VAR 0 10
9795: PUSH
9796: FOR_IN
9797: IFFALSE 9838
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9799: LD_VAR 0 8
9803: PPUSH
9804: LD_VAR 0 2
9808: PPUSH
9809: CALL_OW 113
// AddComExitVehicle ( j ) ;
9813: LD_VAR 0 6
9817: PPUSH
9818: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9822: LD_VAR 0 6
9826: PPUSH
9827: LD_VAR 0 5
9831: PPUSH
9832: CALL_OW 189
// end ;
9836: GO 9796
9838: POP
9839: POP
// end ;
9840: GO 9783
9842: POP
9843: POP
// end ; if emptyVehicle_list > 0 then
9844: LD_VAR 0 9
9848: PUSH
9849: LD_INT 0
9851: GREATER
9852: IFFALSE 9902
// begin for i in emptyVehicle_list do
9854: LD_ADDR_VAR 0 5
9858: PUSH
9859: LD_VAR 0 9
9863: PUSH
9864: FOR_IN
9865: IFFALSE 9900
// begin for j in mechanicOutside_list do
9867: LD_ADDR_VAR 0 6
9871: PUSH
9872: LD_VAR 0 11
9876: PUSH
9877: FOR_IN
9878: IFFALSE 9896
// begin AddComEnterUnit ( j , i ) ;
9880: LD_VAR 0 6
9884: PPUSH
9885: LD_VAR 0 5
9889: PPUSH
9890: CALL_OW 180
// end ;
9894: GO 9877
9896: POP
9897: POP
// end ;
9898: GO 9864
9900: POP
9901: POP
// end ; if VehicleOK_list > 0 then
9902: LD_VAR 0 7
9906: PUSH
9907: LD_INT 0
9909: GREATER
9910: IFFALSE 9944
// begin for i in VehicleOK_list do
9912: LD_ADDR_VAR 0 5
9916: PUSH
9917: LD_VAR 0 7
9921: PUSH
9922: FOR_IN
9923: IFFALSE 9942
// ComAgressiveMove ( i , 110 , 29 ) ;
9925: LD_VAR 0 5
9929: PPUSH
9930: LD_INT 110
9932: PPUSH
9933: LD_INT 29
9935: PPUSH
9936: CALL_OW 114
9940: GO 9922
9942: POP
9943: POP
// end ; end ;
9944: LD_VAR 0 4
9948: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9949: LD_INT 0
9951: PPUSH
9952: PPUSH
9953: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9954: LD_VAR 0 1
9958: PPUSH
9959: LD_INT 22
9961: PUSH
9962: LD_VAR 0 2
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: LD_INT 2
9973: PUSH
9974: LD_INT 21
9976: PUSH
9977: LD_INT 2
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: LD_INT 21
9986: PUSH
9987: LD_INT 1
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 70
10007: PUSH
10008: LD_VAR 0 5
10012: GREATER
10013: IFFALSE 10145
// begin for i in defendersList do
10015: LD_ADDR_VAR 0 7
10019: PUSH
10020: LD_VAR 0 3
10024: PUSH
10025: FOR_IN
10026: IFFALSE 10141
// begin AddComExitBuilding ( i ) ;
10028: LD_VAR 0 7
10032: PPUSH
10033: CALL_OW 182
// wait ( 0 0$1 ) ;
10037: LD_INT 35
10039: PPUSH
10040: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
10044: LD_ADDR_VAR 0 8
10048: PUSH
10049: LD_VAR 0 1
10053: PPUSH
10054: LD_INT 22
10056: PUSH
10057: LD_VAR 0 2
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 2
10068: PUSH
10069: LD_INT 21
10071: PUSH
10072: LD_INT 2
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: LD_INT 21
10081: PUSH
10082: LD_INT 1
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: LIST
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PPUSH
10098: CALL_OW 70
10102: PUSH
10103: FOR_IN
10104: IFFALSE 10137
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
10106: LD_VAR 0 7
10110: PPUSH
10111: LD_VAR 0 8
10115: PPUSH
10116: CALL_OW 250
10120: PPUSH
10121: LD_VAR 0 8
10125: PPUSH
10126: CALL_OW 251
10130: PPUSH
10131: CALL_OW 174
10135: GO 10103
10137: POP
10138: POP
// end ;
10139: GO 10025
10141: POP
10142: POP
// end else
10143: GO 10176
// begin for i in defendersList do
10145: LD_ADDR_VAR 0 7
10149: PUSH
10150: LD_VAR 0 3
10154: PUSH
10155: FOR_IN
10156: IFFALSE 10174
// ComEnterUnit ( i , build ) ;
10158: LD_VAR 0 7
10162: PPUSH
10163: LD_VAR 0 4
10167: PPUSH
10168: CALL_OW 120
10172: GO 10155
10174: POP
10175: POP
// end ; end ;
10176: LD_VAR 0 6
10180: RET
// export function RussianTrap ; var i ; begin
10181: LD_INT 0
10183: PPUSH
10184: PPUSH
// if GetSide ( Brian ) = 4 then
10185: LD_EXP 6
10189: PPUSH
10190: CALL_OW 255
10194: PUSH
10195: LD_INT 4
10197: EQUAL
10198: IFFALSE 10221
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10200: LD_EXP 6
10204: PUSH
10205: LD_EXP 7
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PPUSH
10214: LD_INT 0
10216: PPUSH
10217: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10221: LD_ADDR_VAR 0 2
10225: PUSH
10226: LD_INT 22
10228: PUSH
10229: LD_INT 3
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 21
10238: PUSH
10239: LD_INT 1
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PPUSH
10250: CALL_OW 69
10254: PUSH
10255: FOR_IN
10256: IFFALSE 10366
// begin ComExitBuilding ( i ) ;
10258: LD_VAR 0 2
10262: PPUSH
10263: CALL_OW 122
// wait ( 0 0$1 ) ;
10267: LD_INT 35
10269: PPUSH
10270: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10274: LD_VAR 0 2
10278: PPUSH
10279: LD_INT 120
10281: PPUSH
10282: LD_INT 56
10284: PPUSH
10285: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10289: LD_VAR 0 2
10293: PPUSH
10294: LD_INT 111
10296: PPUSH
10297: LD_INT 37
10299: PPUSH
10300: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10304: LD_INT 33
10306: PPUSH
10307: CALL_OW 255
10311: PUSH
10312: LD_INT 3
10314: EQUAL
10315: PUSH
10316: LD_INT 33
10318: PPUSH
10319: CALL_OW 302
10323: AND
10324: IFFALSE 10340
// begin AddComEnterUnit ( i , arm2 ) ;
10326: LD_VAR 0 2
10330: PPUSH
10331: LD_INT 33
10333: PPUSH
10334: CALL_OW 180
// end else
10338: GO 10364
// begin AddComCrawl ( i ) ;
10340: LD_VAR 0 2
10344: PPUSH
10345: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10349: LD_VAR 0 2
10353: PPUSH
10354: LD_INT 109
10356: PPUSH
10357: LD_INT 30
10359: PPUSH
10360: CALL_OW 174
// end ; end ;
10364: GO 10255
10366: POP
10367: POP
// end ;
10368: LD_VAR 0 1
10372: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10373: LD_INT 0
10375: PPUSH
10376: PPUSH
10377: PPUSH
10378: PPUSH
10379: PPUSH
// nearest_dist = 1000 ;
10380: LD_ADDR_VAR 0 4
10384: PUSH
10385: LD_INT 1000
10387: ST_TO_ADDR
// nearest_un = un ;
10388: LD_ADDR_VAR 0 5
10392: PUSH
10393: LD_VAR 0 1
10397: ST_TO_ADDR
// for sold in units do
10398: LD_ADDR_VAR 0 6
10402: PUSH
10403: LD_VAR 0 2
10407: PUSH
10408: FOR_IN
10409: IFFALSE 10465
// begin dist = GetDistUnits ( un , sold ) ;
10411: LD_ADDR_VAR 0 7
10415: PUSH
10416: LD_VAR 0 1
10420: PPUSH
10421: LD_VAR 0 6
10425: PPUSH
10426: CALL_OW 296
10430: ST_TO_ADDR
// if dist < nearest_dist then
10431: LD_VAR 0 7
10435: PUSH
10436: LD_VAR 0 4
10440: LESS
10441: IFFALSE 10463
// begin nearest_un = sold ;
10443: LD_ADDR_VAR 0 5
10447: PUSH
10448: LD_VAR 0 6
10452: ST_TO_ADDR
// nearest_dist = dist ;
10453: LD_ADDR_VAR 0 4
10457: PUSH
10458: LD_VAR 0 7
10462: ST_TO_ADDR
// end ; end ;
10463: GO 10408
10465: POP
10466: POP
// result := nearest_un ;
10467: LD_ADDR_VAR 0 3
10471: PUSH
10472: LD_VAR 0 5
10476: ST_TO_ADDR
// end ;
10477: LD_VAR 0 3
10481: RET
// export function PrepareDifficulty ; begin
10482: LD_INT 0
10484: PPUSH
// if Difficulty = 1 then
10485: LD_OWVAR 67
10489: PUSH
10490: LD_INT 1
10492: EQUAL
10493: IFFALSE 10556
// begin RemoveUnit ( brw2 ) ;
10495: LD_INT 9
10497: PPUSH
10498: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10502: LD_INT 30
10504: PPUSH
10505: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10509: LD_INT 52
10511: PPUSH
10512: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10516: LD_INT 63
10518: PPUSH
10519: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10523: LD_INT 5
10525: PUSH
10526: LD_INT 4
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PPUSH
10533: LD_INT 60
10535: PPUSH
10536: CALL_OW 240
// RuSoldMinLevel = 0 ;
10540: LD_ADDR_EXP 13
10544: PUSH
10545: LD_INT 0
10547: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10548: LD_ADDR_EXP 14
10552: PUSH
10553: LD_INT 1
10555: ST_TO_ADDR
// end ; if Difficulty = 2 then
10556: LD_OWVAR 67
10560: PUSH
10561: LD_INT 2
10563: EQUAL
10564: IFFALSE 10606
// begin RemoveUnit ( brw4 ) ;
10566: LD_INT 52
10568: PPUSH
10569: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10573: LD_INT 5
10575: PUSH
10576: LD_INT 4
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PPUSH
10583: LD_INT 50
10585: PPUSH
10586: CALL_OW 240
// RuSoldMinLevel = 1 ;
10590: LD_ADDR_EXP 13
10594: PUSH
10595: LD_INT 1
10597: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10598: LD_ADDR_EXP 14
10602: PUSH
10603: LD_INT 2
10605: ST_TO_ADDR
// end ; if Difficulty = 3 then
10606: LD_OWVAR 67
10610: PUSH
10611: LD_INT 3
10613: EQUAL
10614: IFFALSE 10649
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10616: LD_INT 5
10618: PUSH
10619: LD_INT 4
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PPUSH
10626: LD_INT 40
10628: PPUSH
10629: CALL_OW 240
// RuSoldMinLevel = 2 ;
10633: LD_ADDR_EXP 13
10637: PUSH
10638: LD_INT 2
10640: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10641: LD_ADDR_EXP 14
10645: PUSH
10646: LD_INT 3
10648: ST_TO_ADDR
// end ; end ;
10649: LD_VAR 0 1
10653: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10654: LD_INT 0
10656: PPUSH
10657: PPUSH
10658: PPUSH
// tmp = [ ] ;
10659: LD_ADDR_VAR 0 5
10663: PUSH
10664: EMPTY
10665: ST_TO_ADDR
// if not vehicles then
10666: LD_VAR 0 1
10670: NOT
10671: IFFALSE 10675
// exit ;
10673: GO 10792
// for i in vehicles do
10675: LD_ADDR_VAR 0 4
10679: PUSH
10680: LD_VAR 0 1
10684: PUSH
10685: FOR_IN
10686: IFFALSE 10776
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10688: LD_ADDR_VAR 0 5
10692: PUSH
10693: LD_VAR 0 5
10697: PPUSH
10698: LD_INT 1
10700: PPUSH
10701: LD_VAR 0 4
10705: PPUSH
10706: CALL_OW 265
10710: PUSH
10711: LD_VAR 0 4
10715: PPUSH
10716: CALL_OW 262
10720: PUSH
10721: LD_VAR 0 4
10725: PPUSH
10726: CALL_OW 263
10730: PUSH
10731: LD_VAR 0 4
10735: PPUSH
10736: CALL_OW 264
10740: PUSH
10741: LD_VAR 0 4
10745: PPUSH
10746: CALL_OW 261
10750: PUSH
10751: LD_VAR 0 4
10755: PPUSH
10756: CALL_OW 256
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: PPUSH
10769: CALL_OW 2
10773: ST_TO_ADDR
// end ;
10774: GO 10685
10776: POP
10777: POP
// SaveVariable ( tmp , ident ) ;
10778: LD_VAR 0 5
10782: PPUSH
10783: LD_VAR 0 2
10787: PPUSH
10788: CALL_OW 39
// end ; end_of_file
10792: LD_VAR 0 3
10796: RET
// export function PrepareHeroes ; var plive ; begin
10797: LD_INT 0
10799: PPUSH
10800: PPUSH
// uc_side = 1 ;
10801: LD_ADDR_OWVAR 20
10805: PUSH
10806: LD_INT 1
10808: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10809: LD_ADDR_EXP 1
10813: PUSH
10814: LD_STRING 01_JMM
10816: PPUSH
10817: CALL_OW 34
10821: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10822: LD_ADDR_VAR 0 2
10826: PUSH
10827: LD_STRING 01_JMMLifePoints_1
10829: PPUSH
10830: LD_INT 1000
10832: PPUSH
10833: CALL_OW 30
10837: ST_TO_ADDR
// if plive < 250 then
10838: LD_VAR 0 2
10842: PUSH
10843: LD_INT 250
10845: LESS
10846: IFFALSE 10856
// plive := 300 ;
10848: LD_ADDR_VAR 0 2
10852: PUSH
10853: LD_INT 300
10855: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10856: LD_EXP 1
10860: PPUSH
10861: LD_VAR 0 2
10865: PPUSH
10866: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10870: LD_ADDR_EXP 9
10874: PUSH
10875: LD_STRING Powell
10877: PPUSH
10878: CALL_OW 25
10882: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10883: LD_ADDR_EXP 2
10887: PUSH
10888: LD_STRING 01_Bobby
10890: PPUSH
10891: CALL_OW 34
10895: ST_TO_ADDR
// if Bobby then
10896: LD_EXP 2
10900: IFFALSE 10950
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10902: LD_ADDR_VAR 0 2
10906: PUSH
10907: LD_STRING 01_BobbyLifePoints_1
10909: PPUSH
10910: LD_INT 1000
10912: PPUSH
10913: CALL_OW 30
10917: ST_TO_ADDR
// if plive < 250 then
10918: LD_VAR 0 2
10922: PUSH
10923: LD_INT 250
10925: LESS
10926: IFFALSE 10936
// plive := 300 ;
10928: LD_ADDR_VAR 0 2
10932: PUSH
10933: LD_INT 300
10935: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10936: LD_EXP 2
10940: PPUSH
10941: LD_VAR 0 2
10945: PPUSH
10946: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10950: LD_ADDR_EXP 3
10954: PUSH
10955: LD_STRING 01_Cyrus
10957: PPUSH
10958: CALL_OW 34
10962: ST_TO_ADDR
// if Cyrus then
10963: LD_EXP 3
10967: IFFALSE 11017
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10969: LD_ADDR_VAR 0 2
10973: PUSH
10974: LD_STRING 01_CyrusLifePoints_1
10976: PPUSH
10977: LD_INT 1000
10979: PPUSH
10980: CALL_OW 30
10984: ST_TO_ADDR
// if plive < 250 then
10985: LD_VAR 0 2
10989: PUSH
10990: LD_INT 250
10992: LESS
10993: IFFALSE 11003
// plive := 300 ;
10995: LD_ADDR_VAR 0 2
10999: PUSH
11000: LD_INT 300
11002: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11003: LD_EXP 3
11007: PPUSH
11008: LD_VAR 0 2
11012: PPUSH
11013: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
11017: LD_ADDR_EXP 5
11021: PUSH
11022: LD_STRING Khatam
11024: PPUSH
11025: CALL_OW 25
11029: ST_TO_ADDR
// uc_side = 4 ;
11030: LD_ADDR_OWVAR 20
11034: PUSH
11035: LD_INT 4
11037: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11038: LD_ADDR_EXP 4
11042: PUSH
11043: LD_STRING Lisa
11045: PPUSH
11046: CALL_OW 25
11050: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11051: LD_EXP 1
11055: PPUSH
11056: LD_INT 3
11058: PPUSH
11059: LD_INT 0
11061: PPUSH
11062: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11066: LD_EXP 2
11070: PPUSH
11071: LD_INT 3
11073: PPUSH
11074: LD_INT 0
11076: PPUSH
11077: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11081: LD_EXP 3
11085: PPUSH
11086: LD_INT 3
11088: PPUSH
11089: LD_INT 0
11091: PPUSH
11092: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11096: LD_EXP 4
11100: PPUSH
11101: LD_INT 5
11103: PPUSH
11104: LD_INT 0
11106: PPUSH
11107: CALL_OW 49
// ComCrawl ( Lisa ) ;
11111: LD_EXP 4
11115: PPUSH
11116: CALL_OW 137
// end ;
11120: LD_VAR 0 1
11124: RET
// export function PrepareLisSquad ; var i , un ; begin
11125: LD_INT 0
11127: PPUSH
11128: PPUSH
11129: PPUSH
// uc_side = 4 ;
11130: LD_ADDR_OWVAR 20
11134: PUSH
11135: LD_INT 4
11137: ST_TO_ADDR
// uc_nation = 1 ;
11138: LD_ADDR_OWVAR 21
11142: PUSH
11143: LD_INT 1
11145: ST_TO_ADDR
// hc_class := 2 ;
11146: LD_ADDR_OWVAR 28
11150: PUSH
11151: LD_INT 2
11153: ST_TO_ADDR
// hc_sex := sex_male ;
11154: LD_ADDR_OWVAR 27
11158: PUSH
11159: LD_INT 1
11161: ST_TO_ADDR
// hc_gallery :=  ;
11162: LD_ADDR_OWVAR 33
11166: PUSH
11167: LD_STRING 
11169: ST_TO_ADDR
// hc_name :=  ;
11170: LD_ADDR_OWVAR 26
11174: PUSH
11175: LD_STRING 
11177: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11178: LD_ADDR_OWVAR 30
11182: PUSH
11183: LD_INT 0
11185: PUSH
11186: LD_INT 1
11188: PUSH
11189: LD_INT 0
11191: PUSH
11192: LD_INT 0
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11201: LD_ADDR_OWVAR 31
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: LD_INT 2
11211: PUSH
11212: LD_INT 0
11214: PUSH
11215: LD_INT 0
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: ST_TO_ADDR
// un := CreateHuman ;
11224: LD_ADDR_VAR 0 3
11228: PUSH
11229: CALL_OW 44
11233: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11234: LD_VAR 0 3
11238: PPUSH
11239: LD_INT 6
11241: PPUSH
11242: LD_INT 0
11244: PPUSH
11245: CALL_OW 49
// hc_sex := sex_female ;
11249: LD_ADDR_OWVAR 27
11253: PUSH
11254: LD_INT 2
11256: ST_TO_ADDR
// hc_gallery :=  ;
11257: LD_ADDR_OWVAR 33
11261: PUSH
11262: LD_STRING 
11264: ST_TO_ADDR
// hc_name :=  ;
11265: LD_ADDR_OWVAR 26
11269: PUSH
11270: LD_STRING 
11272: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11273: LD_ADDR_OWVAR 30
11277: PUSH
11278: LD_INT 0
11280: PUSH
11281: LD_INT 0
11283: PUSH
11284: LD_INT 0
11286: PUSH
11287: LD_INT 1
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11296: LD_ADDR_OWVAR 31
11300: PUSH
11301: LD_INT 0
11303: PUSH
11304: LD_INT 1
11306: PUSH
11307: LD_INT 0
11309: PUSH
11310: LD_INT 1
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: ST_TO_ADDR
// un := CreateHuman ;
11319: LD_ADDR_VAR 0 3
11323: PUSH
11324: CALL_OW 44
11328: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11329: LD_VAR 0 3
11333: PPUSH
11334: LD_INT 6
11336: PPUSH
11337: LD_INT 0
11339: PPUSH
11340: CALL_OW 49
// if not Bobby and not Cyrus then
11344: LD_EXP 2
11348: NOT
11349: PUSH
11350: LD_EXP 3
11354: NOT
11355: AND
11356: IFFALSE 11461
// begin hc_class := 1 ;
11358: LD_ADDR_OWVAR 28
11362: PUSH
11363: LD_INT 1
11365: ST_TO_ADDR
// hc_sex := sex_male ;
11366: LD_ADDR_OWVAR 27
11370: PUSH
11371: LD_INT 1
11373: ST_TO_ADDR
// hc_gallery :=  ;
11374: LD_ADDR_OWVAR 33
11378: PUSH
11379: LD_STRING 
11381: ST_TO_ADDR
// hc_name :=  ;
11382: LD_ADDR_OWVAR 26
11386: PUSH
11387: LD_STRING 
11389: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11390: LD_ADDR_OWVAR 30
11394: PUSH
11395: LD_INT 2
11397: PUSH
11398: LD_INT 3
11400: PUSH
11401: LD_INT 1
11403: PUSH
11404: LD_INT 0
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11413: LD_ADDR_OWVAR 31
11417: PUSH
11418: LD_INT 2
11420: PUSH
11421: LD_INT 3
11423: PUSH
11424: LD_INT 1
11426: PUSH
11427: LD_INT 0
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: ST_TO_ADDR
// un := CreateHuman ;
11436: LD_ADDR_VAR 0 3
11440: PUSH
11441: CALL_OW 44
11445: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11446: LD_VAR 0 3
11450: PPUSH
11451: LD_INT 31
11453: PPUSH
11454: LD_INT 0
11456: PPUSH
11457: CALL_OW 49
// end ; InitHc ;
11461: CALL_OW 19
// end ;
11465: LD_VAR 0 1
11469: RET
// export function PrepareOtherAmericans ; begin
11470: LD_INT 0
11472: PPUSH
// uc_side = 4 ;
11473: LD_ADDR_OWVAR 20
11477: PUSH
11478: LD_INT 4
11480: ST_TO_ADDR
// uc_nation = 1 ;
11481: LD_ADDR_OWVAR 21
11485: PUSH
11486: LD_INT 1
11488: ST_TO_ADDR
// hc_gallery =  ;
11489: LD_ADDR_OWVAR 33
11493: PUSH
11494: LD_STRING 
11496: ST_TO_ADDR
// hc_name = Tom Garvin ;
11497: LD_ADDR_OWVAR 26
11501: PUSH
11502: LD_STRING Tom Garvin
11504: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11505: LD_INT 1
11507: PPUSH
11508: LD_INT 1
11510: PPUSH
11511: LD_INT 1
11513: PPUSH
11514: LD_INT 2
11516: PPUSH
11517: CALL_OW 12
11521: PPUSH
11522: CALL_OW 380
// Brian = CreateHuman ;
11526: LD_ADDR_EXP 6
11530: PUSH
11531: CALL_OW 44
11535: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11536: LD_EXP 6
11540: PPUSH
11541: LD_INT 10
11543: PPUSH
11544: LD_INT 0
11546: PPUSH
11547: CALL_OW 49
// hc_name = Jerry White ;
11551: LD_ADDR_OWVAR 26
11555: PUSH
11556: LD_STRING Jerry White
11558: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11559: LD_INT 1
11561: PPUSH
11562: LD_INT 3
11564: PPUSH
11565: LD_INT 1
11567: PPUSH
11568: LD_INT 2
11570: PPUSH
11571: CALL_OW 12
11575: PPUSH
11576: CALL_OW 380
// Jerry = CreateHuman ;
11580: LD_ADDR_EXP 7
11584: PUSH
11585: CALL_OW 44
11589: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11590: LD_EXP 7
11594: PPUSH
11595: LD_INT 10
11597: PPUSH
11598: LD_INT 0
11600: PPUSH
11601: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11605: LD_EXP 6
11609: PUSH
11610: LD_EXP 7
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PPUSH
11619: CALL_OW 140
// end ;
11623: LD_VAR 0 1
11627: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11628: LD_INT 0
11630: PPUSH
11631: PPUSH
11632: PPUSH
// for i = 1 to 6 do
11633: LD_ADDR_VAR 0 2
11637: PUSH
11638: DOUBLE
11639: LD_INT 1
11641: DEC
11642: ST_TO_ADDR
11643: LD_INT 6
11645: PUSH
11646: FOR_TO
11647: IFFALSE 11741
// begin uc_side = 4 ;
11649: LD_ADDR_OWVAR 20
11653: PUSH
11654: LD_INT 4
11656: ST_TO_ADDR
// uc_nation = 1 ;
11657: LD_ADDR_OWVAR 21
11661: PUSH
11662: LD_INT 1
11664: ST_TO_ADDR
// hc_gallery =  ;
11665: LD_ADDR_OWVAR 33
11669: PUSH
11670: LD_STRING 
11672: ST_TO_ADDR
// hc_name =  ;
11673: LD_ADDR_OWVAR 26
11677: PUSH
11678: LD_STRING 
11680: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11681: LD_INT 0
11683: PPUSH
11684: LD_INT 1
11686: PPUSH
11687: LD_INT 4
11689: PPUSH
11690: CALL_OW 12
11694: PPUSH
11695: LD_INT 1
11697: PPUSH
11698: CALL_OW 380
// un = CreateHuman ;
11702: LD_ADDR_VAR 0 3
11706: PUSH
11707: CALL_OW 44
11711: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11712: LD_VAR 0 3
11716: PPUSH
11717: LD_INT 16
11719: PPUSH
11720: LD_INT 0
11722: PPUSH
11723: CALL_OW 49
// SetLives ( un , 1 ) ;
11727: LD_VAR 0 3
11731: PPUSH
11732: LD_INT 1
11734: PPUSH
11735: CALL_OW 234
// end ;
11739: GO 11646
11741: POP
11742: POP
// DyingSold = CreateHuman ;
11743: LD_ADDR_EXP 34
11747: PUSH
11748: CALL_OW 44
11752: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11753: LD_EXP 34
11757: PPUSH
11758: LD_INT 16
11760: PPUSH
11761: LD_INT 0
11763: PPUSH
11764: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11768: LD_EXP 34
11772: PPUSH
11773: LD_INT 250
11775: PPUSH
11776: CALL_OW 234
// end ; end_of_file
11780: LD_VAR 0 1
11784: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11785: LD_INT 0
11787: PPUSH
11788: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11789: LD_ADDR_VAR 0 2
11793: PUSH
11794: LD_INT 22
11796: PUSH
11797: LD_INT 1
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 23
11806: PUSH
11807: LD_INT 1
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 25
11816: PUSH
11817: LD_INT 2
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: LD_INT 50
11826: PUSH
11827: EMPTY
11828: LIST
11829: PUSH
11830: LD_INT 56
11832: PUSH
11833: EMPTY
11834: LIST
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: PPUSH
11843: CALL_OW 69
11847: PUSH
11848: LD_EXP 1
11852: PUSH
11853: EMPTY
11854: LIST
11855: DIFF
11856: ST_TO_ADDR
// uc_side = 6 ;
11857: LD_ADDR_OWVAR 20
11861: PUSH
11862: LD_INT 6
11864: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11865: LD_ADDR_EXP 8
11869: PUSH
11870: LD_STRING Mikhail
11872: PPUSH
11873: CALL_OW 25
11877: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
11878: LD_EXP 8
11882: PPUSH
11883: LD_VAR 0 2
11887: PUSH
11888: LD_INT 1
11890: ARRAY
11891: PPUSH
11892: CALL_OW 250
11896: PPUSH
11897: LD_VAR 0 2
11901: PUSH
11902: LD_INT 1
11904: ARRAY
11905: PPUSH
11906: CALL_OW 251
11910: PPUSH
11911: LD_INT 3
11913: PPUSH
11914: LD_INT 1
11916: PPUSH
11917: CALL_OW 50
// end ;
11921: LD_VAR 0 1
11925: RET
// export function PrepareRussianCommander ; begin
11926: LD_INT 0
11928: PPUSH
// uc_side = 3 ;
11929: LD_ADDR_OWVAR 20
11933: PUSH
11934: LD_INT 3
11936: ST_TO_ADDR
// uc_nation = 3 ;
11937: LD_ADDR_OWVAR 21
11941: PUSH
11942: LD_INT 3
11944: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11945: LD_ADDR_EXP 19
11949: PUSH
11950: LD_STRING Natasza
11952: PPUSH
11953: CALL_OW 25
11957: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11958: LD_EXP 19
11962: PPUSH
11963: LD_INT 24
11965: PPUSH
11966: LD_INT 0
11968: PPUSH
11969: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11973: LD_EXP 19
11977: PPUSH
11978: LD_INT 56
11980: PPUSH
11981: LD_INT 16
11983: PPUSH
11984: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11988: LD_ADDR_EXP 24
11992: PUSH
11993: LD_EXP 24
11997: PUSH
11998: LD_EXP 19
12002: ADD
12003: ST_TO_ADDR
// end ;
12004: LD_VAR 0 1
12008: RET
// export function PrepareSouthBase ; var i , un ; begin
12009: LD_INT 0
12011: PPUSH
12012: PPUSH
12013: PPUSH
// for i = 1 to 2 do
12014: LD_ADDR_VAR 0 2
12018: PUSH
12019: DOUBLE
12020: LD_INT 1
12022: DEC
12023: ST_TO_ADDR
12024: LD_INT 2
12026: PUSH
12027: FOR_TO
12028: IFFALSE 12137
// begin uc_side = 3 ;
12030: LD_ADDR_OWVAR 20
12034: PUSH
12035: LD_INT 3
12037: ST_TO_ADDR
// uc_nation = 3 ;
12038: LD_ADDR_OWVAR 21
12042: PUSH
12043: LD_INT 3
12045: ST_TO_ADDR
// hc_gallery =  ;
12046: LD_ADDR_OWVAR 33
12050: PUSH
12051: LD_STRING 
12053: ST_TO_ADDR
// hc_name =  ;
12054: LD_ADDR_OWVAR 26
12058: PUSH
12059: LD_STRING 
12061: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12062: LD_INT 1
12064: PPUSH
12065: LD_INT 1
12067: PPUSH
12068: LD_EXP 13
12072: PPUSH
12073: LD_EXP 14
12077: PPUSH
12078: CALL_OW 12
12082: PPUSH
12083: CALL_OW 380
// hc_importance = 0 ;
12087: LD_ADDR_OWVAR 32
12091: PUSH
12092: LD_INT 0
12094: ST_TO_ADDR
// un = CreateHuman ;
12095: LD_ADDR_VAR 0 3
12099: PUSH
12100: CALL_OW 44
12104: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12105: LD_VAR 0 3
12109: PPUSH
12110: LD_INT 11
12112: PPUSH
12113: LD_INT 0
12115: PPUSH
12116: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12120: LD_VAR 0 3
12124: PPUSH
12125: LD_INT 111
12127: PPUSH
12128: LD_INT 38
12130: PPUSH
12131: CALL_OW 118
// end ;
12135: GO 12027
12137: POP
12138: POP
// for i = 1 to Difficulty do
12139: LD_ADDR_VAR 0 2
12143: PUSH
12144: DOUBLE
12145: LD_INT 1
12147: DEC
12148: ST_TO_ADDR
12149: LD_OWVAR 67
12153: PUSH
12154: FOR_TO
12155: IFFALSE 12238
// begin uc_side = 3 ;
12157: LD_ADDR_OWVAR 20
12161: PUSH
12162: LD_INT 3
12164: ST_TO_ADDR
// uc_nation = 3 ;
12165: LD_ADDR_OWVAR 21
12169: PUSH
12170: LD_INT 3
12172: ST_TO_ADDR
// hc_gallery =  ;
12173: LD_ADDR_OWVAR 33
12177: PUSH
12178: LD_STRING 
12180: ST_TO_ADDR
// hc_name =  ;
12181: LD_ADDR_OWVAR 26
12185: PUSH
12186: LD_STRING 
12188: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12189: LD_INT 0
12191: PPUSH
12192: LD_INT 3
12194: PPUSH
12195: LD_EXP 13
12199: PPUSH
12200: LD_EXP 14
12204: PPUSH
12205: CALL_OW 12
12209: PPUSH
12210: CALL_OW 380
// un = CreateHuman ;
12214: LD_ADDR_VAR 0 3
12218: PUSH
12219: CALL_OW 44
12223: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12224: LD_VAR 0 3
12228: PPUSH
12229: LD_INT 10
12231: PPUSH
12232: CALL_OW 52
// end ;
12236: GO 12154
12238: POP
12239: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12240: LD_INT 3
12242: PPUSH
12243: LD_INT 3
12245: PPUSH
12246: LD_INT 33
12248: PPUSH
12249: LD_EXP 13
12253: PPUSH
12254: LD_EXP 14
12258: PPUSH
12259: CALL_OW 12
12263: PPUSH
12264: LD_INT 1
12266: PPUSH
12267: LD_INT 1
12269: PUSH
12270: LD_INT 1
12272: PPUSH
12273: LD_INT 2
12275: PPUSH
12276: CALL_OW 12
12280: PUSH
12281: LD_INT 1
12283: PPUSH
12284: LD_INT 2
12286: PPUSH
12287: CALL_OW 12
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: LIST
12296: PUSH
12297: LD_OWVAR 67
12301: ARRAY
12302: PPUSH
12303: CALL 8708 0 6
// for i in UnitsInside ( arm2 ) do
12307: LD_ADDR_VAR 0 2
12311: PUSH
12312: LD_INT 33
12314: PPUSH
12315: CALL_OW 313
12319: PUSH
12320: FOR_IN
12321: IFFALSE 12341
// southBaseDefenders = southBaseDefenders ^ i ;
12323: LD_ADDR_EXP 25
12327: PUSH
12328: LD_EXP 25
12332: PUSH
12333: LD_VAR 0 2
12337: ADD
12338: ST_TO_ADDR
12339: GO 12320
12341: POP
12342: POP
// end ;
12343: LD_VAR 0 1
12347: RET
// export function PrepareNorthBase ; var i , un ; begin
12348: LD_INT 0
12350: PPUSH
12351: PPUSH
12352: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12353: LD_ADDR_VAR 0 2
12357: PUSH
12358: DOUBLE
12359: LD_INT 1
12361: DEC
12362: ST_TO_ADDR
12363: LD_INT 1
12365: PPUSH
12366: LD_INT 2
12368: PPUSH
12369: CALL_OW 12
12373: PUSH
12374: LD_INT 2
12376: PPUSH
12377: LD_INT 3
12379: PPUSH
12380: CALL_OW 12
12384: PUSH
12385: LD_INT 3
12387: PPUSH
12388: LD_INT 4
12390: PPUSH
12391: CALL_OW 12
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: PUSH
12401: LD_OWVAR 67
12405: ARRAY
12406: PUSH
12407: FOR_TO
12408: IFFALSE 12494
// begin uc_side = 3 ;
12410: LD_ADDR_OWVAR 20
12414: PUSH
12415: LD_INT 3
12417: ST_TO_ADDR
// uc_nation = 3 ;
12418: LD_ADDR_OWVAR 21
12422: PUSH
12423: LD_INT 3
12425: ST_TO_ADDR
// hc_gallery =  ;
12426: LD_ADDR_OWVAR 33
12430: PUSH
12431: LD_STRING 
12433: ST_TO_ADDR
// hc_name =  ;
12434: LD_ADDR_OWVAR 26
12438: PUSH
12439: LD_STRING 
12441: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12442: LD_INT 0
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: LD_EXP 13
12452: PPUSH
12453: LD_EXP 14
12457: PPUSH
12458: CALL_OW 12
12462: PPUSH
12463: CALL_OW 380
// un = CreateHuman ;
12467: LD_ADDR_VAR 0 3
12471: PUSH
12472: CALL_OW 44
12476: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12477: LD_VAR 0 3
12481: PPUSH
12482: LD_INT 14
12484: PPUSH
12485: LD_INT 0
12487: PPUSH
12488: CALL_OW 49
// end ;
12492: GO 12407
12494: POP
12495: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12496: LD_INT 3
12498: PPUSH
12499: LD_INT 3
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: LD_EXP 13
12509: PPUSH
12510: LD_EXP 14
12514: PPUSH
12515: CALL_OW 12
12519: PPUSH
12520: LD_INT 1
12522: PPUSH
12523: LD_INT 1
12525: PPUSH
12526: LD_INT 2
12528: PPUSH
12529: CALL_OW 12
12533: PUSH
12534: LD_INT 1
12536: PPUSH
12537: LD_INT 3
12539: PPUSH
12540: CALL_OW 12
12544: PUSH
12545: LD_INT 1
12547: PPUSH
12548: LD_INT 3
12550: PPUSH
12551: CALL_OW 12
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: LIST
12560: PUSH
12561: LD_OWVAR 67
12565: ARRAY
12566: PPUSH
12567: CALL 8708 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12571: LD_INT 3
12573: PPUSH
12574: LD_INT 3
12576: PPUSH
12577: LD_INT 23
12579: PPUSH
12580: LD_EXP 13
12584: PPUSH
12585: LD_EXP 14
12589: PPUSH
12590: CALL_OW 12
12594: PPUSH
12595: LD_INT 4
12597: PPUSH
12598: LD_INT 0
12600: PUSH
12601: LD_INT 1
12603: PUSH
12604: LD_INT 2
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: PUSH
12612: LD_OWVAR 67
12616: ARRAY
12617: PPUSH
12618: CALL 8708 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12622: LD_INT 3
12624: PPUSH
12625: LD_INT 3
12627: PPUSH
12628: LD_INT 1
12630: PPUSH
12631: LD_EXP 13
12635: PPUSH
12636: LD_EXP 14
12640: PPUSH
12641: CALL_OW 12
12645: PPUSH
12646: LD_INT 2
12648: PPUSH
12649: LD_INT 1
12651: PUSH
12652: LD_INT 2
12654: PUSH
12655: LD_INT 2
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: LIST
12662: PUSH
12663: LD_OWVAR 67
12667: ARRAY
12668: PPUSH
12669: CALL 8708 0 6
// for i in UnitsInside ( arm1 ) do
12673: LD_ADDR_VAR 0 2
12677: PUSH
12678: LD_INT 2
12680: PPUSH
12681: CALL_OW 313
12685: PUSH
12686: FOR_IN
12687: IFFALSE 12707
// northBaseDefenders = northBaseDefenders ^ i ;
12689: LD_ADDR_EXP 24
12693: PUSH
12694: LD_EXP 24
12698: PUSH
12699: LD_VAR 0 2
12703: ADD
12704: ST_TO_ADDR
12705: GO 12686
12707: POP
12708: POP
// end ;
12709: LD_VAR 0 1
12713: RET
// export function PrepareOtherRussians ; var i , un ; begin
12714: LD_INT 0
12716: PPUSH
12717: PPUSH
12718: PPUSH
// for i = 1 to 2 do
12719: LD_ADDR_VAR 0 2
12723: PUSH
12724: DOUBLE
12725: LD_INT 1
12727: DEC
12728: ST_TO_ADDR
12729: LD_INT 2
12731: PUSH
12732: FOR_TO
12733: IFFALSE 12834
// begin uc_side = 3 ;
12735: LD_ADDR_OWVAR 20
12739: PUSH
12740: LD_INT 3
12742: ST_TO_ADDR
// uc_nation = 3 ;
12743: LD_ADDR_OWVAR 21
12747: PUSH
12748: LD_INT 3
12750: ST_TO_ADDR
// hc_gallery =  ;
12751: LD_ADDR_OWVAR 33
12755: PUSH
12756: LD_STRING 
12758: ST_TO_ADDR
// hc_name =  ;
12759: LD_ADDR_OWVAR 26
12763: PUSH
12764: LD_STRING 
12766: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12767: LD_INT 0
12769: PPUSH
12770: LD_INT 1
12772: PPUSH
12773: LD_EXP 13
12777: PPUSH
12778: LD_EXP 14
12782: PPUSH
12783: CALL_OW 12
12787: PPUSH
12788: CALL_OW 380
// un = CreateHuman ;
12792: LD_ADDR_VAR 0 3
12796: PUSH
12797: CALL_OW 44
12801: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12802: LD_VAR 0 3
12806: PPUSH
12807: LD_INT 9
12809: PPUSH
12810: LD_INT 0
12812: PPUSH
12813: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12817: LD_VAR 0 3
12821: PPUSH
12822: LD_INT 80
12824: PPUSH
12825: LD_INT 73
12827: PPUSH
12828: CALL_OW 118
// end ;
12832: GO 12732
12834: POP
12835: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12836: LD_ADDR_VAR 0 2
12840: PUSH
12841: LD_INT 22
12843: PUSH
12844: LD_INT 3
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PUSH
12851: LD_INT 30
12853: PUSH
12854: LD_INT 31
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PPUSH
12865: CALL_OW 69
12869: PUSH
12870: FOR_IN
12871: IFFALSE 12899
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12873: LD_EXP 13
12877: PPUSH
12878: LD_EXP 14
12882: PPUSH
12883: CALL_OW 12
12887: PPUSH
12888: LD_VAR 0 2
12892: PPUSH
12893: CALL 8818 0 2
12897: GO 12870
12899: POP
12900: POP
// end ;
12901: LD_VAR 0 1
12905: RET
// export function PrepareCargoBays ; begin
12906: LD_INT 0
12908: PPUSH
// uc_side = 3 ;
12909: LD_ADDR_OWVAR 20
12913: PUSH
12914: LD_INT 3
12916: ST_TO_ADDR
// uc_nation = 3 ;
12917: LD_ADDR_OWVAR 21
12921: PUSH
12922: LD_INT 3
12924: ST_TO_ADDR
// vc_engine = 1 ;
12925: LD_ADDR_OWVAR 39
12929: PUSH
12930: LD_INT 1
12932: ST_TO_ADDR
// vc_control = 1 ;
12933: LD_ADDR_OWVAR 38
12937: PUSH
12938: LD_INT 1
12940: ST_TO_ADDR
// vc_weapon = 51 ;
12941: LD_ADDR_OWVAR 40
12945: PUSH
12946: LD_INT 51
12948: ST_TO_ADDR
// vc_chassis = 22 ;
12949: LD_ADDR_OWVAR 37
12953: PUSH
12954: LD_INT 22
12956: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12957: LD_ADDR_EXP 15
12961: PUSH
12962: CALL_OW 45
12966: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12967: LD_ADDR_EXP 16
12971: PUSH
12972: CALL_OW 45
12976: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12977: LD_EXP 15
12981: PPUSH
12982: LD_INT 13
12984: PPUSH
12985: LD_INT 0
12987: PPUSH
12988: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12992: LD_EXP 16
12996: PPUSH
12997: LD_INT 13
12999: PPUSH
13000: LD_INT 0
13002: PPUSH
13003: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
13007: LD_EXP 15
13011: PPUSH
13012: LD_INT 2
13014: PPUSH
13015: LD_INT 70
13017: PUSH
13018: LD_INT 50
13020: PUSH
13021: LD_INT 30
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: LIST
13028: PUSH
13029: LD_OWVAR 67
13033: ARRAY
13034: PPUSH
13035: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
13039: LD_EXP 16
13043: PPUSH
13044: LD_INT 2
13046: PPUSH
13047: LD_INT 70
13049: PUSH
13050: LD_INT 50
13052: PUSH
13053: LD_INT 30
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: PUSH
13061: LD_OWVAR 67
13065: ARRAY
13066: PPUSH
13067: CALL_OW 291
// hc_gallery =  ;
13071: LD_ADDR_OWVAR 33
13075: PUSH
13076: LD_STRING 
13078: ST_TO_ADDR
// hc_name =  ;
13079: LD_ADDR_OWVAR 26
13083: PUSH
13084: LD_STRING 
13086: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13087: LD_INT 1
13089: PPUSH
13090: LD_INT 3
13092: PPUSH
13093: LD_INT 1
13095: PPUSH
13096: LD_INT 2
13098: PPUSH
13099: CALL_OW 12
13103: PPUSH
13104: CALL_OW 380
// driver1 = CreateHuman ;
13108: LD_ADDR_EXP 17
13112: PUSH
13113: CALL_OW 44
13117: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13118: LD_EXP 17
13122: PPUSH
13123: LD_EXP 15
13127: PPUSH
13128: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13132: LD_ADDR_OWVAR 26
13136: PUSH
13137: LD_STRING Nikolai Andreyev
13139: ST_TO_ADDR
// driver2 = CreateHuman ;
13140: LD_ADDR_EXP 18
13144: PUSH
13145: CALL_OW 44
13149: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13150: LD_EXP 18
13154: PPUSH
13155: LD_EXP 16
13159: PPUSH
13160: CALL_OW 52
// end ;
13164: LD_VAR 0 1
13168: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
13169: LD_INT 0
13171: PPUSH
13172: PPUSH
13173: PPUSH
13174: PPUSH
13175: PPUSH
13176: PPUSH
13177: PPUSH
// uc_side = 3 ;
13178: LD_ADDR_OWVAR 20
13182: PUSH
13183: LD_INT 3
13185: ST_TO_ADDR
// uc_nation = 3 ;
13186: LD_ADDR_OWVAR 21
13190: PUSH
13191: LD_INT 3
13193: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13194: LD_ADDR_VAR 0 4
13198: PUSH
13199: DOUBLE
13200: LD_INT 1
13202: DEC
13203: ST_TO_ADDR
13204: LD_VAR 0 1
13208: PUSH
13209: LD_INT 1
13211: PPUSH
13212: LD_INT 3
13214: PPUSH
13215: CALL_OW 12
13219: PLUS
13220: PUSH
13221: FOR_TO
13222: IFFALSE 13399
// begin vc_engine = 1 ;
13224: LD_ADDR_OWVAR 39
13228: PUSH
13229: LD_INT 1
13231: ST_TO_ADDR
// vc_control = 1 ;
13232: LD_ADDR_OWVAR 38
13236: PUSH
13237: LD_INT 1
13239: ST_TO_ADDR
// vc_weapon = 42 ;
13240: LD_ADDR_OWVAR 40
13244: PUSH
13245: LD_INT 42
13247: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13248: LD_ADDR_OWVAR 37
13252: PUSH
13253: LD_INT 21
13255: PUSH
13256: LD_INT 22
13258: PUSH
13259: LD_INT 22
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: PUSH
13267: LD_OWVAR 67
13271: ARRAY
13272: ST_TO_ADDR
// veh = CreateVehicle ;
13273: LD_ADDR_VAR 0 5
13277: PUSH
13278: CALL_OW 45
13282: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13283: LD_VAR 0 5
13287: PPUSH
13288: LD_VAR 0 2
13292: PPUSH
13293: LD_INT 0
13295: PPUSH
13296: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13300: LD_ADDR_EXP 26
13304: PUSH
13305: LD_EXP 26
13309: PUSH
13310: LD_VAR 0 5
13314: ADD
13315: ST_TO_ADDR
// hc_gallery =  ;
13316: LD_ADDR_OWVAR 33
13320: PUSH
13321: LD_STRING 
13323: ST_TO_ADDR
// hc_name =  ;
13324: LD_ADDR_OWVAR 26
13328: PUSH
13329: LD_STRING 
13331: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13332: LD_INT 0
13334: PPUSH
13335: LD_INT 3
13337: PPUSH
13338: LD_EXP 13
13342: PPUSH
13343: LD_EXP 14
13347: PPUSH
13348: CALL_OW 12
13352: PPUSH
13353: CALL_OW 380
// un = CreateHuman ;
13357: LD_ADDR_VAR 0 6
13361: PUSH
13362: CALL_OW 44
13366: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13367: LD_VAR 0 6
13371: PPUSH
13372: LD_VAR 0 5
13376: PPUSH
13377: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13381: LD_ADDR_EXP 26
13385: PUSH
13386: LD_EXP 26
13390: PUSH
13391: LD_VAR 0 6
13395: ADD
13396: ST_TO_ADDR
// end ;
13397: GO 13221
13399: POP
13400: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13401: LD_INT 0
13403: PPUSH
13404: LD_INT 2
13406: PPUSH
13407: LD_EXP 13
13411: PPUSH
13412: LD_EXP 14
13416: PPUSH
13417: CALL_OW 12
13421: PPUSH
13422: CALL_OW 380
// un = CreateHuman ;
13426: LD_ADDR_VAR 0 6
13430: PUSH
13431: CALL_OW 44
13435: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13436: LD_ADDR_VAR 0 4
13440: PUSH
13441: DOUBLE
13442: LD_INT 1
13444: DEC
13445: ST_TO_ADDR
13446: LD_VAR 0 1
13450: PUSH
13451: LD_INT 2
13453: PUSH
13454: LD_INT 2
13456: MUL
13457: PLUS
13458: PUSH
13459: FOR_TO
13460: IFFALSE 13548
// begin hc_gallery =  ;
13462: LD_ADDR_OWVAR 33
13466: PUSH
13467: LD_STRING 
13469: ST_TO_ADDR
// hc_name =  ;
13470: LD_ADDR_OWVAR 26
13474: PUSH
13475: LD_STRING 
13477: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13478: LD_INT 1
13480: PPUSH
13481: LD_INT 1
13483: PPUSH
13484: LD_EXP 13
13488: PPUSH
13489: LD_EXP 14
13493: PPUSH
13494: CALL_OW 12
13498: PPUSH
13499: CALL_OW 380
// un = CreateHuman ;
13503: LD_ADDR_VAR 0 6
13507: PUSH
13508: CALL_OW 44
13512: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13513: LD_VAR 0 6
13517: PPUSH
13518: LD_VAR 0 2
13522: PPUSH
13523: LD_INT 0
13525: PPUSH
13526: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13530: LD_ADDR_EXP 26
13534: PUSH
13535: LD_EXP 26
13539: PUSH
13540: LD_VAR 0 6
13544: ADD
13545: ST_TO_ADDR
// end ;
13546: GO 13459
13548: POP
13549: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13550: LD_ADDR_VAR 0 7
13554: PUSH
13555: LD_INT 26
13557: PPUSH
13558: LD_INT 22
13560: PUSH
13561: LD_INT 3
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: LD_INT 21
13570: PUSH
13571: LD_INT 1
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 26
13580: PUSH
13581: LD_INT 1
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: PPUSH
13593: CALL_OW 70
13597: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13598: LD_VAR 0 7
13602: PUSH
13603: LD_INT 1
13605: ARRAY
13606: PPUSH
13607: LD_STRING D9-Rus3-1
13609: PPUSH
13610: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13614: LD_VAR 0 7
13618: PUSH
13619: LD_INT 2
13621: ARRAY
13622: PPUSH
13623: LD_STRING D9-Russ-1
13625: PPUSH
13626: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13630: LD_INT 35
13632: PPUSH
13633: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13637: LD_ADDR_VAR 0 4
13641: PUSH
13642: LD_INT 26
13644: PPUSH
13645: LD_INT 22
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: EMPTY
13656: LIST
13657: PPUSH
13658: CALL_OW 70
13662: PUSH
13663: FOR_IN
13664: IFFALSE 13836
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13666: LD_ADDR_VAR 0 8
13670: PUSH
13671: LD_INT 22
13673: PUSH
13674: LD_INT 1
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PPUSH
13681: CALL_OW 69
13685: PPUSH
13686: LD_VAR 0 4
13690: PPUSH
13691: CALL_OW 74
13695: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13696: LD_ADDR_VAR 0 9
13700: PUSH
13701: LD_INT 22
13703: PUSH
13704: LD_INT 1
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 2
13713: PUSH
13714: LD_INT 59
13716: PUSH
13717: EMPTY
13718: LIST
13719: PUSH
13720: LD_INT 21
13722: PUSH
13723: LD_INT 1
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 21
13732: PUSH
13733: LD_INT 2
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: EMPTY
13751: LIST
13752: PPUSH
13753: CALL_OW 69
13757: PPUSH
13758: LD_VAR 0 4
13762: PPUSH
13763: CALL_OW 74
13767: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13768: LD_VAR 0 4
13772: PPUSH
13773: LD_VAR 0 8
13777: PPUSH
13778: CALL_OW 296
13782: PUSH
13783: LD_INT 8
13785: PLUS
13786: PUSH
13787: LD_VAR 0 4
13791: PPUSH
13792: LD_VAR 0 9
13796: PPUSH
13797: CALL_OW 296
13801: LESS
13802: IFFALSE 13820
// begin ComAttackUnit ( i , target1 ) ;
13804: LD_VAR 0 4
13808: PPUSH
13809: LD_VAR 0 8
13813: PPUSH
13814: CALL_OW 115
// end else
13818: GO 13834
// begin ComAttackUnit ( i , target2 ) ;
13820: LD_VAR 0 4
13824: PPUSH
13825: LD_VAR 0 9
13829: PPUSH
13830: CALL_OW 115
// end ; end ;
13834: GO 13663
13836: POP
13837: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13838: LD_INT 26
13840: PPUSH
13841: LD_INT 22
13843: PUSH
13844: LD_INT 3
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 2
13853: PUSH
13854: LD_INT 21
13856: PUSH
13857: LD_INT 1
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: LD_INT 21
13866: PUSH
13867: LD_INT 2
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PUSH
13874: LD_INT 59
13876: PUSH
13877: EMPTY
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: PPUSH
13890: CALL_OW 70
13894: PUSH
13895: LD_INT 0
13897: EQUAL
13898: IFFALSE 13630
// end ; end_of_file
13900: LD_VAR 0 3
13904: RET
// every 0 0$1 do
13905: GO 13907
13907: DISABLE
// begin enable ;
13908: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13909: LD_INT 3
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: LD_INT 22
13917: PPUSH
13918: CALL 8954 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13922: LD_INT 3
13924: PPUSH
13925: LD_INT 20
13927: PPUSH
13928: LD_INT 22
13930: PPUSH
13931: LD_INT 23
13933: PPUSH
13934: CALL 9200 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13938: LD_INT 3
13940: PPUSH
13941: LD_INT 21
13943: PPUSH
13944: LD_INT 23
13946: PPUSH
13947: CALL 9477 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13951: LD_INT 22
13953: PPUSH
13954: LD_INT 1
13956: PPUSH
13957: LD_EXP 24
13961: PPUSH
13962: LD_INT 2
13964: PPUSH
13965: LD_INT 3
13967: PPUSH
13968: CALL 9949 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13972: LD_INT 23
13974: PPUSH
13975: LD_INT 1
13977: PPUSH
13978: LD_EXP 25
13982: PPUSH
13983: LD_INT 33
13985: PPUSH
13986: LD_INT 1
13988: PPUSH
13989: CALL 9949 0 5
// end ; end_of_file
13993: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13994: LD_VAR 0 1
13998: PPUSH
13999: CALL_OW 255
14003: PUSH
14004: LD_INT 1
14006: EQUAL
14007: PUSH
14008: LD_VAR 0 1
14012: PPUSH
14013: CALL_OW 247
14017: PUSH
14018: LD_INT 1
14020: EQUAL
14021: AND
14022: IFFALSE 14038
// deadsCounter = deadsCounter + 1 ;
14024: LD_ADDR_EXP 31
14028: PUSH
14029: LD_EXP 31
14033: PUSH
14034: LD_INT 1
14036: PLUS
14037: ST_TO_ADDR
// end ;
14038: PPOPN 1
14040: END
// on Command ( comandid ) do var i , j , tmp ;
14041: LD_INT 0
14043: PPUSH
14044: PPUSH
14045: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14046: LD_ADDR_VAR 0 2
14050: PUSH
14051: LD_INT 22
14053: PUSH
14054: LD_INT 1
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 21
14063: PUSH
14064: LD_INT 2
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PPUSH
14075: CALL_OW 69
14079: PUSH
14080: FOR_IN
14081: IFFALSE 14206
// begin if GetTaskList ( i ) > 0 then
14083: LD_VAR 0 2
14087: PPUSH
14088: CALL_OW 437
14092: PUSH
14093: LD_INT 0
14095: GREATER
14096: IFFALSE 14204
// begin for j = 1 to GetTaskList ( i ) do
14098: LD_ADDR_VAR 0 3
14102: PUSH
14103: DOUBLE
14104: LD_INT 1
14106: DEC
14107: ST_TO_ADDR
14108: LD_VAR 0 2
14112: PPUSH
14113: CALL_OW 437
14117: PUSH
14118: FOR_TO
14119: IFFALSE 14202
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14121: LD_ADDR_VAR 0 4
14125: PUSH
14126: LD_VAR 0 2
14130: PPUSH
14131: CALL_OW 437
14135: PUSH
14136: LD_VAR 0 3
14140: ARRAY
14141: PUSH
14142: LD_INT 4
14144: ARRAY
14145: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14146: LD_VAR 0 4
14150: PPUSH
14151: CALL_OW 255
14155: PUSH
14156: LD_INT 3
14158: EQUAL
14159: PUSH
14160: LD_VAR 0 4
14164: PPUSH
14165: CALL_OW 247
14169: PUSH
14170: LD_INT 2
14172: EQUAL
14173: AND
14174: PUSH
14175: LD_VAR 0 4
14179: PPUSH
14180: CALL_OW 264
14184: PUSH
14185: LD_INT 51
14187: EQUAL
14188: AND
14189: IFFALSE 14200
// ComStop ( i ) ;
14191: LD_VAR 0 2
14195: PPUSH
14196: CALL_OW 141
// end ;
14200: GO 14118
14202: POP
14203: POP
// end ; end ;
14204: GO 14080
14206: POP
14207: POP
// end ; end_of_file
14208: PPOPN 4
14210: END
// every 0 0$1 trigger IsDead ( JMM ) do
14211: LD_EXP 1
14215: PPUSH
14216: CALL_OW 301
14220: IFFALSE 14232
14222: GO 14224
14224: DISABLE
// YouLost ( JMM ) ;
14225: LD_STRING JMM
14227: PPUSH
14228: CALL_OW 104
14232: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
14233: LD_INT 1
14235: PPUSH
14236: CALL_OW 301
14240: PUSH
14241: LD_INT 10
14243: PPUSH
14244: CALL_OW 301
14248: OR
14249: IFFALSE 14261
14251: GO 14253
14253: DISABLE
// YouLost ( DepotDestroyed ) ;
14254: LD_STRING DepotDestroyed
14256: PPUSH
14257: CALL_OW 104
14261: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14262: LD_INT 22
14264: PUSH
14265: LD_INT 1
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: LD_INT 21
14274: PUSH
14275: LD_INT 1
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: LD_INT 25
14284: PUSH
14285: LD_INT 2
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: LIST
14296: PPUSH
14297: CALL_OW 69
14301: PUSH
14302: LD_INT 0
14304: EQUAL
14305: PUSH
14306: LD_INT 22
14308: PUSH
14309: LD_INT 4
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 21
14318: PUSH
14319: LD_INT 1
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 25
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: LIST
14340: PPUSH
14341: CALL_OW 69
14345: PUSH
14346: LD_INT 0
14348: EQUAL
14349: AND
14350: PUSH
14351: LD_INT 1
14353: PPUSH
14354: CALL_OW 255
14358: PUSH
14359: LD_INT 3
14361: EQUAL
14362: AND
14363: PUSH
14364: LD_INT 10
14366: PPUSH
14367: CALL_OW 255
14371: PUSH
14372: LD_INT 3
14374: EQUAL
14375: AND
14376: IFFALSE 14388
14378: GO 14380
14380: DISABLE
// YouLost ( Engineer ) ;
14381: LD_STRING Engineer
14383: PPUSH
14384: CALL_OW 104
14388: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14389: LD_INT 1
14391: PPUSH
14392: CALL_OW 255
14396: PUSH
14397: LD_INT 3
14399: EQUAL
14400: PUSH
14401: LD_EXP 27
14405: PUSH
14406: LD_INT 1
14408: EQUAL
14409: AND
14410: IFFALSE 14422
14412: GO 14414
14414: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14415: LD_STRING DepotCaptured
14417: PPUSH
14418: CALL_OW 104
14422: END
// export function PrepareTigers ; var i , un ; begin
14423: LD_INT 0
14425: PPUSH
14426: PPUSH
14427: PPUSH
// for i = 1 to Difficulty do
14428: LD_ADDR_VAR 0 2
14432: PUSH
14433: DOUBLE
14434: LD_INT 1
14436: DEC
14437: ST_TO_ADDR
14438: LD_OWVAR 67
14442: PUSH
14443: FOR_TO
14444: IFFALSE 14579
// begin hc_sex = sex_male ;
14446: LD_ADDR_OWVAR 27
14450: PUSH
14451: LD_INT 1
14453: ST_TO_ADDR
// uc_side = 0 ;
14454: LD_ADDR_OWVAR 20
14458: PUSH
14459: LD_INT 0
14461: ST_TO_ADDR
// uc_nation = nation_nature ;
14462: LD_ADDR_OWVAR 21
14466: PUSH
14467: LD_INT 0
14469: ST_TO_ADDR
// hc_class = class_tiger ;
14470: LD_ADDR_OWVAR 28
14474: PUSH
14475: LD_INT 14
14477: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14478: LD_ADDR_OWVAR 31
14482: PUSH
14483: LD_EXP 14
14487: PUSH
14488: LD_INT 0
14490: PUSH
14491: LD_INT 0
14493: PUSH
14494: LD_INT 0
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14503: LD_ADDR_OWVAR 35
14507: PUSH
14508: LD_INT 30
14510: PPUSH
14511: LD_INT 40
14513: PPUSH
14514: CALL_OW 12
14518: PUSH
14519: LD_INT 40
14521: PPUSH
14522: LD_INT 50
14524: PPUSH
14525: CALL_OW 12
14529: PUSH
14530: LD_INT 50
14532: PPUSH
14533: LD_INT 60
14535: PPUSH
14536: CALL_OW 12
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: LIST
14545: PUSH
14546: LD_OWVAR 67
14550: ARRAY
14551: ST_TO_ADDR
// un = CreateHuman ;
14552: LD_ADDR_VAR 0 3
14556: PUSH
14557: CALL_OW 44
14561: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14562: LD_VAR 0 3
14566: PPUSH
14567: LD_INT 27
14569: PPUSH
14570: LD_INT 0
14572: PPUSH
14573: CALL_OW 49
// end ;
14577: GO 14443
14579: POP
14580: POP
// end ; end_of_file
14581: LD_VAR 0 1
14585: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14586: LD_INT 1
14588: PPUSH
14589: CALL_OW 255
14593: PUSH
14594: LD_INT 1
14596: EQUAL
14597: PUSH
14598: LD_INT 10
14600: PPUSH
14601: CALL_OW 255
14605: PUSH
14606: LD_INT 1
14608: EQUAL
14609: AND
14610: PUSH
14611: LD_EXP 20
14615: PUSH
14616: LD_INT 1
14618: EQUAL
14619: AND
14620: PUSH
14621: LD_INT 22
14623: PUSH
14624: LD_INT 3
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 21
14633: PUSH
14634: LD_INT 2
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 34
14643: PUSH
14644: LD_INT 51
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 3
14653: PUSH
14654: LD_INT 58
14656: PUSH
14657: EMPTY
14658: LIST
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: PPUSH
14670: CALL_OW 69
14674: PUSH
14675: LD_INT 0
14677: EQUAL
14678: AND
14679: IFFALSE 14770
14681: GO 14683
14683: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14684: LD_INT 9450
14686: PUSH
14687: LD_INT 8400
14689: PUSH
14690: LD_INT 6300
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: LIST
14697: PUSH
14698: LD_OWVAR 67
14702: ARRAY
14703: PPUSH
14704: CALL_OW 67
// if cargoEscape = 1 then
14708: LD_EXP 20
14712: PUSH
14713: LD_INT 1
14715: EQUAL
14716: IFFALSE 14770
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14718: LD_EXP 9
14722: PPUSH
14723: LD_STRING D6-Pow-1
14725: PPUSH
14726: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14730: LD_EXP 1
14734: PPUSH
14735: LD_STRING D6-JMM-1
14737: PPUSH
14738: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14742: LD_EXP 9
14746: PPUSH
14747: LD_STRING D6-Pow-2
14749: PPUSH
14750: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14754: LD_EXP 1
14758: PPUSH
14759: LD_STRING D6-JMM-2
14761: PPUSH
14762: CALL_OW 88
// FinishMission ;
14766: CALL 14978 0 0
// end ; end ;
14770: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14771: LD_INT 1
14773: PPUSH
14774: CALL_OW 255
14778: PUSH
14779: LD_INT 1
14781: EQUAL
14782: PUSH
14783: LD_INT 10
14785: PPUSH
14786: CALL_OW 255
14790: PUSH
14791: LD_INT 1
14793: EQUAL
14794: AND
14795: PUSH
14796: LD_EXP 20
14800: PUSH
14801: LD_INT 1
14803: GREATER
14804: AND
14805: IFFALSE 14872
14807: GO 14809
14809: DISABLE
14810: LD_INT 0
14812: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14813: LD_INT 11550
14815: PUSH
14816: LD_INT 10500
14818: PUSH
14819: LD_INT 9450
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: PUSH
14827: LD_OWVAR 67
14831: ARRAY
14832: PPUSH
14833: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14837: LD_INT 1
14839: PUSH
14840: LD_INT 2
14842: PUSH
14843: LD_INT 3
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: LIST
14850: PUSH
14851: LD_OWVAR 67
14855: ARRAY
14856: PPUSH
14857: LD_INT 13
14859: PPUSH
14860: CALL 13169 0 2
// lastBattle = 1 ;
14864: LD_ADDR_EXP 27
14868: PUSH
14869: LD_INT 1
14871: ST_TO_ADDR
// end ;
14872: PPOPN 1
14874: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14875: LD_EXP 27
14879: PUSH
14880: LD_INT 1
14882: EQUAL
14883: PUSH
14884: LD_INT 26
14886: PPUSH
14887: LD_INT 22
14889: PUSH
14890: LD_INT 3
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 21
14899: PUSH
14900: LD_INT 1
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PPUSH
14911: CALL_OW 70
14915: PUSH
14916: LD_INT 0
14918: EQUAL
14919: AND
14920: IFFALSE 14977
14922: GO 14924
14924: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14925: LD_EXP 9
14929: PPUSH
14930: LD_STRING D6-Pow-1
14932: PPUSH
14933: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14937: LD_EXP 1
14941: PPUSH
14942: LD_STRING D6-JMM-1
14944: PPUSH
14945: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14949: LD_EXP 9
14953: PPUSH
14954: LD_STRING D6-Pow-2
14956: PPUSH
14957: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14961: LD_EXP 1
14965: PPUSH
14966: LD_STRING D6-JMM-2
14968: PPUSH
14969: CALL_OW 88
// FinishMission ;
14973: CALL 14978 0 0
// end ;
14977: END
// export function FinishMission ; var tmp ; begin
14978: LD_INT 0
14980: PPUSH
14981: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14982: LD_ADDR_VAR 0 2
14986: PUSH
14987: LD_INT 22
14989: PUSH
14990: LD_INT 1
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 21
14999: PUSH
15000: LD_INT 2
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 24
15009: PUSH
15010: LD_INT 251
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: PPUSH
15022: CALL_OW 69
15026: ST_TO_ADDR
// if tmp then
15027: LD_VAR 0 2
15031: IFFALSE 15045
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15033: LD_VAR 0 2
15037: PPUSH
15038: LD_STRING 02_tanks_1
15040: PPUSH
15041: CALL 10654 0 2
// if mikhailStatus = 1 then
15045: LD_EXP 21
15049: PUSH
15050: LD_INT 1
15052: EQUAL
15053: IFFALSE 15067
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15055: LD_EXP 21
15059: PPUSH
15060: LD_STRING 02_mikhailStatus_1
15062: PPUSH
15063: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15067: LD_INT 1
15069: PPUSH
15070: CALL_OW 274
15074: PPUSH
15075: LD_INT 1
15077: PPUSH
15078: CALL_OW 275
15082: PPUSH
15083: LD_STRING 02_resources_4
15085: PPUSH
15086: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15090: LD_INT 1
15092: PPUSH
15093: CALL_OW 274
15097: PPUSH
15098: LD_INT 1
15100: PPUSH
15101: CALL_OW 275
15105: PUSH
15106: LD_INT 200
15108: GREATEREQUAL
15109: IFFALSE 15123
// begin AddMedal ( Cans , 1 ) ;
15111: LD_STRING Cans
15113: PPUSH
15114: LD_INT 1
15116: PPUSH
15117: CALL_OW 101
// end else
15121: GO 15134
// begin AddMedal ( Cans , - 1 ) ;
15123: LD_STRING Cans
15125: PPUSH
15126: LD_INT 1
15128: NEG
15129: PPUSH
15130: CALL_OW 101
// end ; if deadsCounter < 2 then
15134: LD_EXP 31
15138: PUSH
15139: LD_INT 2
15141: LESS
15142: IFFALSE 15156
// begin AddMedal ( Deaths , 1 ) ;
15144: LD_STRING Deaths
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL_OW 101
// end else
15154: GO 15167
// begin AddMedal ( Deaths , - 1 ) ;
15156: LD_STRING Deaths
15158: PPUSH
15159: LD_INT 1
15161: NEG
15162: PPUSH
15163: CALL_OW 101
// end ; if mikhailStatus = 0 then
15167: LD_EXP 21
15171: PUSH
15172: LD_INT 0
15174: EQUAL
15175: IFFALSE 15188
// AddMedal ( Prisoner , - 1 ) ;
15177: LD_STRING Prisoner
15179: PPUSH
15180: LD_INT 1
15182: NEG
15183: PPUSH
15184: CALL_OW 101
// if mikhailStatus = 1 then
15188: LD_EXP 21
15192: PUSH
15193: LD_INT 1
15195: EQUAL
15196: IFFALSE 15208
// AddMedal ( Prisoner , 1 ) ;
15198: LD_STRING Prisoner
15200: PPUSH
15201: LD_INT 1
15203: PPUSH
15204: CALL_OW 101
// if mikhailStatus = 2 then
15208: LD_EXP 21
15212: PUSH
15213: LD_INT 2
15215: EQUAL
15216: IFFALSE 15228
// AddMedal ( Prisoner , 2 ) ;
15218: LD_STRING Prisoner
15220: PPUSH
15221: LD_INT 2
15223: PPUSH
15224: CALL_OW 101
// if mikhailStatus = 3 then
15228: LD_EXP 21
15232: PUSH
15233: LD_INT 3
15235: EQUAL
15236: IFFALSE 15249
// AddMedal ( Prisoner , - 2 ) ;
15238: LD_STRING Prisoner
15240: PPUSH
15241: LD_INT 2
15243: NEG
15244: PPUSH
15245: CALL_OW 101
// GiveMedals ( MAIN ) ;
15249: LD_STRING MAIN
15251: PPUSH
15252: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15256: LD_INT 22
15258: PUSH
15259: LD_INT 1
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 23
15268: PUSH
15269: LD_INT 1
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 21
15278: PUSH
15279: LD_INT 1
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: PPUSH
15291: CALL_OW 69
15295: PPUSH
15296: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15300: LD_EXP 1
15304: PPUSH
15305: LD_EXP 33
15309: PUSH
15310: LD_STRING JMM
15312: STR
15313: PPUSH
15314: CALL_OW 38
// if IsOK ( Bobby ) then
15318: LD_EXP 2
15322: PPUSH
15323: CALL_OW 302
15327: IFFALSE 15347
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15329: LD_EXP 2
15333: PPUSH
15334: LD_EXP 33
15338: PUSH
15339: LD_STRING Bobby
15341: STR
15342: PPUSH
15343: CALL_OW 38
// if IsOK ( Cyrus ) then
15347: LD_EXP 3
15351: PPUSH
15352: CALL_OW 302
15356: IFFALSE 15376
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15358: LD_EXP 3
15362: PPUSH
15363: LD_EXP 33
15367: PUSH
15368: LD_STRING Cyrus
15370: STR
15371: PPUSH
15372: CALL_OW 38
// if IsOK ( Lisa ) then
15376: LD_EXP 4
15380: PPUSH
15381: CALL_OW 302
15385: IFFALSE 15405
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15387: LD_EXP 4
15391: PPUSH
15392: LD_EXP 33
15396: PUSH
15397: LD_STRING Lisa
15399: STR
15400: PPUSH
15401: CALL_OW 38
// if IsOK ( Khatam ) then
15405: LD_EXP 5
15409: PPUSH
15410: CALL_OW 302
15414: IFFALSE 15434
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15416: LD_EXP 5
15420: PPUSH
15421: LD_EXP 33
15425: PUSH
15426: LD_STRING Khatam
15428: STR
15429: PPUSH
15430: CALL_OW 38
// if IsOK ( Brian ) then
15434: LD_EXP 6
15438: PPUSH
15439: CALL_OW 302
15443: IFFALSE 15463
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15445: LD_EXP 6
15449: PPUSH
15450: LD_EXP 33
15454: PUSH
15455: LD_STRING Brian
15457: STR
15458: PPUSH
15459: CALL_OW 38
// if IsOk ( Jerry ) then
15463: LD_EXP 7
15467: PPUSH
15468: CALL_OW 302
15472: IFFALSE 15492
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15474: LD_EXP 7
15478: PPUSH
15479: LD_EXP 33
15483: PUSH
15484: LD_STRING Jerry
15486: STR
15487: PPUSH
15488: CALL_OW 38
// if mikhailStatus = 1 then
15492: LD_EXP 21
15496: PUSH
15497: LD_INT 1
15499: EQUAL
15500: IFFALSE 15520
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15502: LD_EXP 8
15506: PPUSH
15507: LD_EXP 33
15511: PUSH
15512: LD_STRING Mikhail
15514: STR
15515: PPUSH
15516: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15520: LD_INT 50
15522: PUSH
15523: EMPTY
15524: LIST
15525: PUSH
15526: LD_INT 22
15528: PUSH
15529: LD_INT 1
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 21
15538: PUSH
15539: LD_INT 1
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: LIST
15550: PPUSH
15551: CALL_OW 69
15555: PUSH
15556: LD_EXP 1
15560: PUSH
15561: LD_EXP 2
15565: PUSH
15566: LD_EXP 3
15570: PUSH
15571: LD_EXP 4
15575: PUSH
15576: LD_EXP 5
15580: PUSH
15581: LD_EXP 6
15585: PUSH
15586: LD_EXP 7
15590: PUSH
15591: LD_EXP 8
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: DIFF
15606: PPUSH
15607: LD_STRING 02_other_survivors
15609: PPUSH
15610: CALL_OW 38
// YouWin ;
15614: CALL_OW 103
// end ;
15618: LD_VAR 0 1
15622: RET
