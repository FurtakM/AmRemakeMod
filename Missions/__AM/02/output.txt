// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// PrepareDifficulty ;
 161: CALL 10431 0 0
// PrepareRussianCommander ;
 165: CALL 11875 0 0
// PrepareSouthBase ;
 169: CALL 11958 0 0
// PrepareNorthBase ;
 173: CALL 12297 0 0
// PrepareOtherRussians ;
 177: CALL 12663 0 0
// PrepareHeroes ;
 181: CALL 10746 0 0
// PrepareLisSquad ;
 185: CALL 11074 0 0
// PrepareOtherAmericans ;
 189: CALL 11419 0 0
// end ; end_of_file
 193: END
// every 1 do var tmp ;
 194: GO 196
 196: DISABLE
 197: LD_INT 0
 199: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 209: LD_ADDR_VAR 0 1
 213: PUSH
 214: LD_INT 22
 216: PUSH
 217: LD_INT 4
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 21
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PPUSH
 238: CALL_OW 69
 242: PUSH
 243: LD_EXP 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: DIFF
 251: ST_TO_ADDR
// if Cyrus and Bobby then
 252: LD_EXP 3
 256: PUSH
 257: LD_EXP 2
 261: AND
 262: IFFALSE 592
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 264: LD_EXP 3
 268: PPUSH
 269: LD_INT 43
 271: PPUSH
 272: LD_INT 72
 274: PPUSH
 275: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_INT 44
 286: PPUSH
 287: LD_INT 70
 289: PPUSH
 290: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 294: LD_EXP 1
 298: PPUSH
 299: LD_INT 46
 301: PPUSH
 302: LD_INT 73
 304: PPUSH
 305: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 309: LD_EXP 3
 313: PPUSH
 314: LD_STRING D1a-Cyrus-1
 316: PPUSH
 317: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_STRING D1a-JMM-1
 328: PPUSH
 329: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 333: LD_EXP 3
 337: PPUSH
 338: LD_INT 37
 340: PPUSH
 341: LD_INT 66
 343: PPUSH
 344: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 348: LD_EXP 2
 352: PPUSH
 353: LD_INT 41
 355: PPUSH
 356: LD_INT 67
 358: PPUSH
 359: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 363: LD_EXP 1
 367: PPUSH
 368: LD_INT 38
 370: PPUSH
 371: LD_INT 64
 373: PPUSH
 374: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 378: LD_EXP 2
 382: PPUSH
 383: LD_STRING D1a-Bobby-2
 385: PPUSH
 386: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 390: LD_EXP 3
 394: PPUSH
 395: LD_INT 35
 397: PPUSH
 398: LD_INT 62
 400: PPUSH
 401: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 405: LD_EXP 2
 409: PPUSH
 410: LD_INT 32
 412: PPUSH
 413: LD_INT 60
 415: PPUSH
 416: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 420: LD_EXP 1
 424: PPUSH
 425: LD_INT 35
 427: PPUSH
 428: LD_INT 60
 430: PPUSH
 431: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 435: LD_EXP 1
 439: PPUSH
 440: LD_STRING D1a-JMM-2
 442: PPUSH
 443: CALL_OW 88
// ComWalk ( Lisa ) ;
 447: LD_EXP 4
 451: PPUSH
 452: CALL_OW 138
// wait ( 0 0$1 ) ;
 456: LD_INT 35
 458: PPUSH
 459: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 463: LD_EXP 4
 467: PPUSH
 468: LD_EXP 1
 472: PPUSH
 473: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 477: LD_EXP 1
 481: PUSH
 482: LD_EXP 3
 486: PUSH
 487: LD_EXP 2
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PPUSH
 497: LD_EXP 4
 501: PPUSH
 502: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 506: LD_VAR 0 1
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: LD_INT 33
 517: PPUSH
 518: LD_INT 55
 520: PPUSH
 521: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 525: LD_VAR 0 1
 529: PUSH
 530: LD_INT 2
 532: ARRAY
 533: PPUSH
 534: LD_INT 30
 536: PPUSH
 537: LD_INT 54
 539: PPUSH
 540: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 544: LD_VAR 0 1
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: LD_EXP 1
 557: PPUSH
 558: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 562: LD_VAR 0 1
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 1
 575: PPUSH
 576: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 580: LD_EXP 4
 584: PPUSH
 585: LD_STRING D1a-Lisa-2
 587: PPUSH
 588: CALL_OW 88
// end ; if Cyrus and not Bobby then
 592: LD_EXP 3
 596: PUSH
 597: LD_EXP 2
 601: NOT
 602: AND
 603: IFFALSE 808
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 605: LD_EXP 3
 609: PPUSH
 610: LD_INT 43
 612: PPUSH
 613: LD_INT 72
 615: PPUSH
 616: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 46
 627: PPUSH
 628: LD_INT 73
 630: PPUSH
 631: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 635: LD_EXP 3
 639: PPUSH
 640: LD_STRING D1a-Cyrus-1
 642: PPUSH
 643: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 647: LD_EXP 1
 651: PPUSH
 652: LD_STRING D1a-JMM-1
 654: PPUSH
 655: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 659: LD_EXP 3
 663: PPUSH
 664: LD_INT 37
 666: PPUSH
 667: LD_INT 66
 669: PPUSH
 670: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 674: LD_EXP 1
 678: PPUSH
 679: LD_INT 38
 681: PPUSH
 682: LD_INT 64
 684: PPUSH
 685: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 689: LD_EXP 3
 693: PPUSH
 694: LD_STRING D1a-Cyrus-2
 696: PPUSH
 697: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 701: LD_EXP 3
 705: PPUSH
 706: LD_INT 35
 708: PPUSH
 709: LD_INT 62
 711: PPUSH
 712: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 716: LD_EXP 1
 720: PPUSH
 721: LD_INT 35
 723: PPUSH
 724: LD_INT 60
 726: PPUSH
 727: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 731: LD_EXP 1
 735: PPUSH
 736: LD_STRING D1a-JMM-2
 738: PPUSH
 739: CALL_OW 88
// ComWalk ( Lisa ) ;
 743: LD_EXP 4
 747: PPUSH
 748: CALL_OW 138
// wait ( 0 0$1 ) ;
 752: LD_INT 35
 754: PPUSH
 755: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 759: LD_EXP 4
 763: PPUSH
 764: LD_EXP 1
 768: PPUSH
 769: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 773: LD_EXP 4
 777: PPUSH
 778: LD_STRING D1a-Lisa-2
 780: PPUSH
 781: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 785: LD_EXP 1
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PPUSH
 799: LD_EXP 4
 803: PPUSH
 804: CALL_OW 119
// end ; if not Cyrus and Bobby then
 808: LD_EXP 3
 812: NOT
 813: PUSH
 814: LD_EXP 2
 818: AND
 819: IFFALSE 1098
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 821: LD_EXP 2
 825: PPUSH
 826: LD_INT 44
 828: PPUSH
 829: LD_INT 70
 831: PPUSH
 832: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 836: LD_EXP 1
 840: PPUSH
 841: LD_INT 46
 843: PPUSH
 844: LD_INT 73
 846: PPUSH
 847: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 851: LD_EXP 2
 855: PPUSH
 856: LD_STRING D1a-Bobby-1
 858: PPUSH
 859: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 863: LD_EXP 1
 867: PPUSH
 868: LD_STRING D1a-JMM-1
 870: PPUSH
 871: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 875: LD_EXP 2
 879: PPUSH
 880: LD_INT 37
 882: PPUSH
 883: LD_INT 66
 885: PPUSH
 886: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 890: LD_EXP 1
 894: PPUSH
 895: LD_INT 38
 897: PPUSH
 898: LD_INT 64
 900: PPUSH
 901: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 905: LD_EXP 2
 909: PPUSH
 910: LD_STRING D1a-Bobby-2
 912: PPUSH
 913: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 917: LD_EXP 2
 921: PPUSH
 922: LD_INT 35
 924: PPUSH
 925: LD_INT 62
 927: PPUSH
 928: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 932: LD_EXP 1
 936: PPUSH
 937: LD_INT 35
 939: PPUSH
 940: LD_INT 60
 942: PPUSH
 943: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 947: LD_EXP 1
 951: PPUSH
 952: LD_STRING D1a-JMM-2
 954: PPUSH
 955: CALL_OW 88
// ComWalk ( Lisa ) ;
 959: LD_EXP 4
 963: PPUSH
 964: CALL_OW 138
// wait ( 0 0$1 ) ;
 968: LD_INT 35
 970: PPUSH
 971: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 975: LD_EXP 4
 979: PPUSH
 980: LD_EXP 1
 984: PPUSH
 985: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 989: LD_EXP 1
 993: PUSH
 994: LD_EXP 3
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PPUSH
1003: LD_EXP 4
1007: PPUSH
1008: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1012: LD_VAR 0 1
1016: PUSH
1017: LD_INT 1
1019: ARRAY
1020: PPUSH
1021: LD_INT 33
1023: PPUSH
1024: LD_INT 55
1026: PPUSH
1027: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1031: LD_VAR 0 1
1035: PUSH
1036: LD_INT 2
1038: ARRAY
1039: PPUSH
1040: LD_INT 30
1042: PPUSH
1043: LD_INT 54
1045: PPUSH
1046: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1050: LD_VAR 0 1
1054: PUSH
1055: LD_INT 1
1057: ARRAY
1058: PPUSH
1059: LD_EXP 1
1063: PPUSH
1064: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1068: LD_VAR 0 1
1072: PUSH
1073: LD_INT 2
1075: ARRAY
1076: PPUSH
1077: LD_EXP 1
1081: PPUSH
1082: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1086: LD_EXP 4
1090: PPUSH
1091: LD_STRING D1a-Lisa-2
1093: PPUSH
1094: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1098: LD_EXP 3
1102: NOT
1103: PUSH
1104: LD_EXP 2
1108: NOT
1109: AND
1110: IFFALSE 1324
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1112: LD_EXP 1
1116: PPUSH
1117: LD_INT 37
1119: PPUSH
1120: LD_INT 66
1122: PPUSH
1123: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1127: LD_EXP 1
1131: PPUSH
1132: LD_STRING D1b-JMM-1
1134: PPUSH
1135: CALL_OW 88
// ComCrawl ( JMM ) ;
1139: LD_EXP 1
1143: PPUSH
1144: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1148: LD_EXP 1
1152: PPUSH
1153: LD_INT 35
1155: PPUSH
1156: LD_INT 60
1158: PPUSH
1159: CALL_OW 171
// wait ( 0 0$8 ) ;
1163: LD_INT 280
1165: PPUSH
1166: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_STRING D1b-JMM-1a
1177: PPUSH
1178: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1182: LD_EXP 1
1186: PUSH
1187: LD_EXP 4
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PPUSH
1196: CALL_OW 138
// wait ( 0 0$1 ) ;
1200: LD_INT 35
1202: PPUSH
1203: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1207: LD_EXP 4
1211: PPUSH
1212: LD_EXP 1
1216: PPUSH
1217: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1221: LD_EXP 1
1225: PUSH
1226: EMPTY
1227: LIST
1228: PPUSH
1229: LD_EXP 4
1233: PPUSH
1234: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1238: LD_VAR 0 1
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: LD_INT 33
1249: PPUSH
1250: LD_INT 55
1252: PPUSH
1253: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1257: LD_VAR 0 1
1261: PUSH
1262: LD_INT 2
1264: ARRAY
1265: PPUSH
1266: LD_INT 30
1268: PPUSH
1269: LD_INT 54
1271: PPUSH
1272: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1276: LD_VAR 0 1
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_EXP 1
1289: PPUSH
1290: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1294: LD_VAR 0 1
1298: PUSH
1299: LD_INT 2
1301: ARRAY
1302: PPUSH
1303: LD_EXP 1
1307: PPUSH
1308: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1312: LD_EXP 4
1316: PPUSH
1317: LD_STRING D1b-Lisa-1
1319: PPUSH
1320: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1324: LD_EXP 1
1328: PPUSH
1329: LD_STRING D1-JMM-1
1331: PPUSH
1332: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1336: LD_EXP 4
1340: PPUSH
1341: LD_STRING D1-Lisa-1
1343: PPUSH
1344: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1348: LD_EXP 1
1352: PPUSH
1353: LD_STRING D1-JMM-2
1355: PPUSH
1356: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1360: LD_EXP 9
1364: PPUSH
1365: LD_STRING D1-Pow-2
1367: PPUSH
1368: CALL_OW 94
// if Cyrus then
1372: LD_EXP 3
1376: IFFALSE 1402
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1378: LD_EXP 3
1382: PPUSH
1383: LD_STRING D1-Cyrus-2
1385: PPUSH
1386: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-3
1397: PPUSH
1398: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1402: LD_EXP 9
1406: PPUSH
1407: LD_STRING D1-Pow-3
1409: PPUSH
1410: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1414: LD_EXP 1
1418: PPUSH
1419: LD_STRING D1-JMM-4
1421: PPUSH
1422: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1426: LD_EXP 9
1430: PPUSH
1431: LD_STRING D1-Pow-4
1433: PPUSH
1434: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1438: LD_EXP 9
1442: PPUSH
1443: LD_STRING D1-Pow-4a
1445: PPUSH
1446: CALL_OW 94
// if Cyrus then
1450: LD_EXP 3
1454: IFFALSE 1468
// Say ( Cyrus , D1-Cyrus-4 ) ;
1456: LD_EXP 3
1460: PPUSH
1461: LD_STRING D1-Cyrus-4
1463: PPUSH
1464: CALL_OW 88
// if Bobby then
1468: LD_EXP 2
1472: IFFALSE 1510
// begin Say ( Bobby , D1-Bobby-4 ) ;
1474: LD_EXP 2
1478: PPUSH
1479: LD_STRING D1-Bobby-4
1481: PPUSH
1482: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1486: LD_EXP 4
1490: PPUSH
1491: LD_STRING D1-Lisa-4
1493: PPUSH
1494: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1498: LD_EXP 1
1502: PPUSH
1503: LD_STRING D1-JMM-5
1505: PPUSH
1506: CALL_OW 88
// end ; InGameOff ;
1510: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1514: LD_INT 22
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 69
1528: PUSH
1529: LD_EXP 6
1533: PUSH
1534: LD_EXP 7
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: DIFF
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1551: LD_STRING M1
1553: PPUSH
1554: CALL_OW 337
// SaveForQuickRestart ;
1558: CALL_OW 22
// end ;
1562: PPOPN 1
1564: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1565: LD_INT 7
1567: PPUSH
1568: LD_INT 22
1570: PUSH
1571: LD_INT 1
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 70
1582: PUSH
1583: LD_INT 0
1585: GREATER
1586: IFFALSE 2003
1588: GO 1590
1590: DISABLE
// begin InGameOn ;
1591: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1595: LD_INT 22
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 21
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PPUSH
1619: CALL_OW 69
1623: PPUSH
1624: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1628: LD_INT 24
1630: PPUSH
1631: LD_INT 32
1633: PPUSH
1634: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1638: LD_EXP 5
1642: PPUSH
1643: LD_INT 4
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 4
1660: PPUSH
1661: CALL_OW 336
// wait ( 0 0$1 ) ;
1665: LD_INT 35
1667: PPUSH
1668: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1672: LD_EXP 5
1676: PPUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_INT 38
1682: PPUSH
1683: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1687: LD_EXP 5
1691: PPUSH
1692: LD_EXP 1
1696: PPUSH
1697: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1701: LD_INT 22
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 21
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PPUSH
1725: CALL_OW 69
1729: PUSH
1730: LD_EXP 5
1734: PUSH
1735: EMPTY
1736: LIST
1737: DIFF
1738: PPUSH
1739: LD_EXP 5
1743: PPUSH
1744: CALL_OW 119
// wait ( 0 0$1 ) ;
1748: LD_INT 35
1750: PPUSH
1751: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1755: LD_EXP 5
1759: PPUSH
1760: LD_STRING D2a-Khat-1
1762: PPUSH
1763: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1767: LD_EXP 1
1771: PPUSH
1772: LD_STRING D2a-JMM-1
1774: PPUSH
1775: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1779: LD_EXP 5
1783: PPUSH
1784: LD_STRING D2a-Khat-2
1786: PPUSH
1787: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1791: LD_EXP 1
1795: PPUSH
1796: LD_STRING D2a-JMM-2
1798: PPUSH
1799: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1803: LD_EXP 5
1807: PPUSH
1808: LD_STRING D2a-Khat-3
1810: PPUSH
1811: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1815: LD_EXP 1
1819: PPUSH
1820: LD_STRING D2a-JMM-3
1822: PPUSH
1823: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1827: LD_EXP 5
1831: PPUSH
1832: LD_STRING D2a-Khat-4
1834: PPUSH
1835: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1839: LD_EXP 1
1843: PPUSH
1844: LD_STRING D2a-JMM-4
1846: PPUSH
1847: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1851: LD_EXP 5
1855: PPUSH
1856: LD_STRING D2a-Khat-5
1858: PPUSH
1859: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_STRING D2a-JMM-5
1870: PPUSH
1871: CALL_OW 88
// InGameOff ;
1875: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1879: LD_INT 22
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 21
1891: PUSH
1892: LD_INT 1
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 3
1901: PUSH
1902: LD_INT 24
1904: PUSH
1905: LD_INT 800
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: PUSH
1926: LD_INT 0
1928: GREATER
1929: IFFALSE 2003
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1931: LD_EXP 5
1935: PPUSH
1936: LD_INT 22
1938: PUSH
1939: LD_INT 1
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 21
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 3
1958: PUSH
1959: LD_INT 24
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: PPUSH
1978: CALL_OW 69
1982: PUSH
1983: LD_INT 1
1985: ARRAY
1986: PPUSH
1987: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1991: LD_EXP 5
1995: PPUSH
1996: LD_STRING D2b-Khat-1
1998: PPUSH
1999: CALL_OW 88
// end ; end ;
2003: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
2004: LD_INT 15
2006: PPUSH
2007: LD_INT 22
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PPUSH
2017: CALL_OW 70
2021: PUSH
2022: LD_INT 0
2024: GREATER
2025: IFFALSE 3182
2027: GO 2029
2029: DISABLE
2030: LD_INT 0
2032: PPUSH
2033: PPUSH
2034: PPUSH
2035: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: LD_INT 999
2043: PUSH
2044: LD_INT 999
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2054: LD_ADDR_VAR 0 4
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 1
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PPUSH
2083: CALL_OW 69
2087: PUSH
2088: LD_EXP 1
2092: PUSH
2093: LD_EXP 2
2097: PUSH
2098: LD_EXP 3
2102: PUSH
2103: LD_EXP 4
2107: PUSH
2108: LD_EXP 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: DIFF
2120: ST_TO_ADDR
// PrepareDeadSoldiers ;
2121: CALL 11577 0 0
// spotCorpses = 1 ;
2125: LD_ADDR_EXP 32
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
// InGameOn ;
2133: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2137: LD_INT 23
2139: PPUSH
2140: LD_INT 12
2142: PPUSH
2143: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2147: LD_ADDR_VAR 0 3
2151: PUSH
2152: LD_VAR 0 2
2156: PUSH
2157: LD_INT 1
2159: ARRAY
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2165: LD_ADDR_VAR 0 1
2169: PUSH
2170: LD_INT 22
2172: PUSH
2173: LD_INT 1
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 21
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PPUSH
2194: CALL_OW 69
2198: PUSH
2199: LD_EXP 1
2203: PUSH
2204: LD_EXP 5
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: DIFF
2213: PUSH
2214: FOR_IN
2215: IFFALSE 2266
// if IsOK ( i ) then
2217: LD_VAR 0 1
2221: PPUSH
2222: CALL_OW 302
2226: IFFALSE 2264
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2228: LD_ADDR_VAR 0 2
2232: PUSH
2233: LD_VAR 0 2
2237: PUSH
2238: LD_VAR 0 1
2242: PUSH
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 16
2250: PPUSH
2251: CALL_OW 299
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: ADD
2263: ST_TO_ADDR
2264: GO 2214
2266: POP
2267: POP
// for i = 2 to distanceTab do
2268: LD_ADDR_VAR 0 1
2272: PUSH
2273: DOUBLE
2274: LD_INT 2
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2330
// if distanceTab [ i ] [ 2 ] < min then
2286: LD_VAR 0 2
2290: PUSH
2291: LD_VAR 0 1
2295: ARRAY
2296: PUSH
2297: LD_INT 2
2299: ARRAY
2300: PUSH
2301: LD_VAR 0 3
2305: LESS
2306: IFFALSE 2328
// min = distanceTab [ i ] [ 2 ] ;
2308: LD_ADDR_VAR 0 3
2312: PUSH
2313: LD_VAR 0 2
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: PUSH
2324: LD_INT 2
2326: ARRAY
2327: ST_TO_ADDR
2328: GO 2283
2330: POP
2331: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2332: LD_ADDR_VAR 0 1
2336: PUSH
2337: LD_INT 22
2339: PUSH
2340: LD_INT 1
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 21
2349: PUSH
2350: LD_INT 1
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PPUSH
2361: CALL_OW 69
2365: PUSH
2366: LD_EXP 1
2370: PUSH
2371: EMPTY
2372: LIST
2373: DIFF
2374: PUSH
2375: FOR_IN
2376: IFFALSE 2446
// begin ComMoveToArea ( i , DeadCutscene ) ;
2378: LD_VAR 0 1
2382: PPUSH
2383: LD_INT 28
2385: PPUSH
2386: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2390: LD_EXP 1
2394: PPUSH
2395: LD_INT 30
2397: PPUSH
2398: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2402: LD_VAR 0 1
2406: PPUSH
2407: LD_INT 23
2409: PPUSH
2410: LD_INT 11
2412: PPUSH
2413: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2417: LD_EXP 1
2421: PPUSH
2422: LD_INT 23
2424: PPUSH
2425: LD_INT 11
2427: PPUSH
2428: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2432: LD_EXP 34
2436: PPUSH
2437: LD_INT 250
2439: PPUSH
2440: CALL_OW 234
// end ;
2444: GO 2375
2446: POP
2447: POP
// for i = 2 to distanceTab do
2448: LD_ADDR_VAR 0 1
2452: PUSH
2453: DOUBLE
2454: LD_INT 2
2456: DEC
2457: ST_TO_ADDR
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_TO
2464: IFFALSE 2850
// begin if distanceTab [ i ] [ 2 ] = min then
2466: LD_VAR 0 2
2470: PUSH
2471: LD_VAR 0 1
2475: ARRAY
2476: PUSH
2477: LD_INT 2
2479: ARRAY
2480: PUSH
2481: LD_VAR 0 3
2485: EQUAL
2486: IFFALSE 2848
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2488: LD_VAR 0 2
2492: PUSH
2493: LD_VAR 0 1
2497: ARRAY
2498: PUSH
2499: LD_INT 1
2501: ARRAY
2502: PUSH
2503: LD_EXP 2
2507: EQUAL
2508: IFFALSE 2522
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2510: LD_EXP 2
2514: PPUSH
2515: LD_STRING DCorpses-Bobby-1
2517: PPUSH
2518: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2522: LD_VAR 0 2
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PUSH
2537: LD_EXP 3
2541: EQUAL
2542: IFFALSE 2556
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2544: LD_EXP 3
2548: PPUSH
2549: LD_STRING DCorpses-Cyrus-1
2551: PPUSH
2552: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2556: LD_VAR 0 2
2560: PUSH
2561: LD_VAR 0 1
2565: ARRAY
2566: PUSH
2567: LD_INT 1
2569: ARRAY
2570: PUSH
2571: LD_EXP 4
2575: EQUAL
2576: IFFALSE 2590
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2578: LD_EXP 4
2582: PPUSH
2583: LD_STRING DCorpses-Lisa-1
2585: PPUSH
2586: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2590: LD_VAR 0 2
2594: PUSH
2595: LD_VAR 0 1
2599: ARRAY
2600: PUSH
2601: LD_INT 1
2603: ARRAY
2604: PUSH
2605: LD_VAR 0 4
2609: PUSH
2610: LD_INT 1
2612: ARRAY
2613: EQUAL
2614: PUSH
2615: LD_VAR 0 4
2619: PUSH
2620: LD_INT 1
2622: ARRAY
2623: PPUSH
2624: CALL_OW 258
2628: PUSH
2629: LD_INT 1
2631: EQUAL
2632: AND
2633: IFFALSE 2651
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2635: LD_VAR 0 4
2639: PUSH
2640: LD_INT 1
2642: ARRAY
2643: PPUSH
2644: LD_STRING DCorpses-Sol1-1
2646: PPUSH
2647: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2651: LD_VAR 0 2
2655: PUSH
2656: LD_VAR 0 1
2660: ARRAY
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PUSH
2666: LD_VAR 0 4
2670: PUSH
2671: LD_INT 1
2673: ARRAY
2674: EQUAL
2675: PUSH
2676: LD_VAR 0 4
2680: PUSH
2681: LD_INT 1
2683: ARRAY
2684: PPUSH
2685: CALL_OW 258
2689: PUSH
2690: LD_INT 2
2692: EQUAL
2693: AND
2694: IFFALSE 2712
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2696: LD_VAR 0 4
2700: PUSH
2701: LD_INT 1
2703: ARRAY
2704: PPUSH
2705: LD_STRING DCorpses-FSol1-1
2707: PPUSH
2708: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2712: LD_VAR 0 2
2716: PUSH
2717: LD_VAR 0 1
2721: ARRAY
2722: PUSH
2723: LD_INT 1
2725: ARRAY
2726: PUSH
2727: LD_VAR 0 4
2731: PUSH
2732: LD_INT 2
2734: ARRAY
2735: EQUAL
2736: PUSH
2737: LD_VAR 0 4
2741: PUSH
2742: LD_INT 2
2744: ARRAY
2745: PPUSH
2746: CALL_OW 258
2750: PUSH
2751: LD_INT 1
2753: EQUAL
2754: AND
2755: IFFALSE 2773
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2757: LD_VAR 0 4
2761: PUSH
2762: LD_INT 2
2764: ARRAY
2765: PPUSH
2766: LD_STRING DCorpses-Sol1-1
2768: PPUSH
2769: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2773: LD_VAR 0 2
2777: PUSH
2778: LD_VAR 0 1
2782: ARRAY
2783: PUSH
2784: LD_INT 1
2786: ARRAY
2787: PUSH
2788: LD_VAR 0 4
2792: PUSH
2793: LD_INT 2
2795: ARRAY
2796: EQUAL
2797: PUSH
2798: LD_VAR 0 4
2802: PUSH
2803: LD_INT 2
2805: ARRAY
2806: PPUSH
2807: CALL_OW 258
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: AND
2816: IFFALSE 2834
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2818: LD_VAR 0 4
2822: PUSH
2823: LD_INT 2
2825: ARRAY
2826: PPUSH
2827: LD_STRING DCorpses-FSol1-1
2829: PPUSH
2830: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2834: LD_EXP 34
2838: PPUSH
2839: LD_INT 150
2841: PPUSH
2842: CALL_OW 234
// break ;
2846: GO 2850
// end ; end ;
2848: GO 2463
2850: POP
2851: POP
// repeat wait ( 0 0$1 ) ;
2852: LD_INT 35
2854: PPUSH
2855: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2859: LD_ADDR_VAR 0 1
2863: PUSH
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 21
2876: PUSH
2877: LD_INT 1
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_EXP 1
2897: PUSH
2898: EMPTY
2899: LIST
2900: DIFF
2901: PUSH
2902: FOR_IN
2903: IFFALSE 2973
// begin ComMoveToArea ( i , DeadCutscene ) ;
2905: LD_VAR 0 1
2909: PPUSH
2910: LD_INT 28
2912: PPUSH
2913: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2917: LD_EXP 1
2921: PPUSH
2922: LD_INT 30
2924: PPUSH
2925: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2929: LD_VAR 0 1
2933: PPUSH
2934: LD_INT 23
2936: PPUSH
2937: LD_INT 11
2939: PPUSH
2940: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2944: LD_EXP 1
2948: PPUSH
2949: LD_INT 23
2951: PPUSH
2952: LD_INT 11
2954: PPUSH
2955: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2959: LD_EXP 34
2963: PPUSH
2964: LD_INT 250
2966: PPUSH
2967: CALL_OW 234
// end ;
2971: GO 2902
2973: POP
2974: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2975: LD_EXP 1
2979: PPUSH
2980: LD_INT 30
2982: PPUSH
2983: CALL_OW 308
2987: IFFALSE 2852
// wait ( 0 0$3 ) ;
2989: LD_INT 105
2991: PPUSH
2992: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2996: LD_EXP 1
3000: PPUSH
3001: LD_STRING DCorpses-JMM-1
3003: PPUSH
3004: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3008: LD_EXP 34
3012: PPUSH
3013: LD_INT 100
3015: PPUSH
3016: CALL_OW 234
// if IsOK ( Khatam ) then
3020: LD_EXP 5
3024: PPUSH
3025: CALL_OW 302
3029: IFFALSE 3166
// begin repeat wait ( 0 0$1 ) ;
3031: LD_INT 35
3033: PPUSH
3034: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3038: LD_EXP 5
3042: PPUSH
3043: LD_EXP 34
3047: PPUSH
3048: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3052: LD_EXP 5
3056: PPUSH
3057: LD_EXP 34
3061: PPUSH
3062: CALL_OW 296
3066: PUSH
3067: LD_INT 2
3069: LESS
3070: IFFALSE 3031
// spotCorpses = 0 ;
3072: LD_ADDR_EXP 32
3076: PUSH
3077: LD_INT 0
3079: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3080: LD_EXP 34
3084: PPUSH
3085: LD_INT 10
3087: PPUSH
3088: CALL_OW 234
// wait ( 0 0$3 ) ;
3092: LD_INT 105
3094: PPUSH
3095: CALL_OW 67
// KillUnit ( DyingSold ) ;
3099: LD_EXP 34
3103: PPUSH
3104: CALL_OW 66
// wait ( 0 0$1 ) ;
3108: LD_INT 35
3110: PPUSH
3111: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3115: LD_EXP 1
3119: PUSH
3120: LD_EXP 5
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PPUSH
3129: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3133: LD_EXP 5
3137: PPUSH
3138: LD_EXP 1
3142: PPUSH
3143: CALL_OW 119
// wait ( 0 0$1 ) ;
3147: LD_INT 35
3149: PPUSH
3150: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3154: LD_EXP 5
3158: PPUSH
3159: LD_STRING DCorpses-Khat-1
3161: PPUSH
3162: CALL_OW 88
// end ; InGameOff ;
3166: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3170: LD_EXP 1
3174: PPUSH
3175: LD_STRING DCorpses-JMM-2
3177: PPUSH
3178: CALL_OW 88
// end ;
3182: PPOPN 4
3184: END
// every 0 0$1 trigger spotCorpses = 1 do
3185: LD_EXP 32
3189: PUSH
3190: LD_INT 1
3192: EQUAL
3193: IFFALSE 3211
3195: GO 3197
3197: DISABLE
// begin enable ;
3198: ENABLE
// SetLives ( DyingSold , 10 ) ;
3199: LD_EXP 34
3203: PPUSH
3204: LD_INT 10
3206: PPUSH
3207: CALL_OW 234
// end ;
3211: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 15 ) do var i ;
3212: LD_INT 8
3214: PPUSH
3215: LD_INT 22
3217: PUSH
3218: LD_INT 1
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: CALL_OW 70
3229: PUSH
3230: LD_INT 0
3232: GREATER
3233: PUSH
3234: LD_INT 22
3236: PUSH
3237: LD_INT 1
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PPUSH
3244: CALL_OW 69
3248: PPUSH
3249: LD_EXP 7
3253: PPUSH
3254: CALL_OW 74
3258: PPUSH
3259: LD_EXP 7
3263: PPUSH
3264: CALL_OW 296
3268: PUSH
3269: LD_INT 15
3271: LESS
3272: OR
3273: IFFALSE 3497
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
// begin InGameOn ;
3281: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3285: LD_EXP 7
3289: PPUSH
3290: LD_INT 250
3292: PPUSH
3293: CALL_OW 234
// SetLives ( Brian , 750 ) ;
3297: LD_EXP 6
3301: PPUSH
3302: LD_INT 750
3304: PPUSH
3305: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3309: LD_INT 3
3311: PPUSH
3312: LD_INT 4
3314: PPUSH
3315: LD_INT 2
3317: PPUSH
3318: LD_INT 1
3320: PPUSH
3321: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3325: LD_EXP 6
3329: PUSH
3330: LD_EXP 7
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PPUSH
3339: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3343: LD_ADDR_VAR 0 1
3347: PUSH
3348: LD_INT 9
3350: PPUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 3
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PPUSH
3361: CALL_OW 70
3365: PUSH
3366: FOR_IN
3367: IFFALSE 3380
// ComFree ( i ) ;
3369: LD_VAR 0 1
3373: PPUSH
3374: CALL_OW 139
3378: GO 3366
3380: POP
3381: POP
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3382: LD_ADDR_VAR 0 1
3386: PUSH
3387: LD_INT 9
3389: PPUSH
3390: LD_INT 22
3392: PUSH
3393: LD_INT 3
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PPUSH
3400: CALL_OW 70
3404: PUSH
3405: FOR_IN
3406: IFFALSE 3424
// AddComAttackUnit ( i , Brian ) ;
3408: LD_VAR 0 1
3412: PPUSH
3413: LD_EXP 6
3417: PPUSH
3418: CALL_OW 175
3422: GO 3405
3424: POP
3425: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3426: LD_ADDR_VAR 0 1
3430: PUSH
3431: LD_INT 22
3433: PUSH
3434: LD_INT 4
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PPUSH
3441: CALL_OW 69
3445: PUSH
3446: FOR_IN
3447: IFFALSE 3460
// ComFree ( i ) ;
3449: LD_VAR 0 1
3453: PPUSH
3454: CALL_OW 139
3458: GO 3446
3460: POP
3461: POP
// wait ( 0 0$1 ) ;
3462: LD_INT 35
3464: PPUSH
3465: CALL_OW 67
// InGameOff ;
3469: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3473: LD_EXP 6
3477: PPUSH
3478: LD_STRING DF-Sol1-1
3480: PPUSH
3481: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3485: LD_EXP 1
3489: PPUSH
3490: LD_STRING DF-JMM-1
3492: PPUSH
3493: CALL_OW 88
// end ;
3497: PPOPN 1
3499: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3500: LD_INT 19
3502: PPUSH
3503: LD_INT 22
3505: PUSH
3506: LD_INT 3
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 70
3517: PUSH
3518: LD_INT 0
3520: EQUAL
3521: IFFALSE 3634
3523: GO 3525
3525: DISABLE
// begin if not IsDead ( Brian ) then
3526: LD_EXP 6
3530: PPUSH
3531: CALL_OW 301
3535: NOT
3536: IFFALSE 3550
// SetSide ( Brian , 1 ) ;
3538: LD_EXP 6
3542: PPUSH
3543: LD_INT 1
3545: PPUSH
3546: CALL_OW 235
// if not IsDead ( Jerry ) then
3550: LD_EXP 7
3554: PPUSH
3555: CALL_OW 301
3559: NOT
3560: IFFALSE 3574
// SetSide ( Jerry , 1 ) ;
3562: LD_EXP 7
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3574: LD_INT 22
3576: PUSH
3577: LD_INT 1
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PUSH
3584: LD_INT 25
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PPUSH
3598: CALL_OW 69
3602: PUSH
3603: LD_INT 0
3605: GREATER
3606: IFFALSE 3622
// begin Say ( JMM , DFa-JMM-1 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING DFa-JMM-1
3615: PPUSH
3616: CALL_OW 88
// end else
3620: GO 3634
// begin Say ( JMM , DFa-JMM-1a ) ;
3622: LD_EXP 1
3626: PPUSH
3627: LD_STRING DFa-JMM-1a
3629: PPUSH
3630: CALL_OW 88
// end ; end ;
3634: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3635: LD_INT 19
3637: PPUSH
3638: LD_INT 22
3640: PUSH
3641: LD_INT 3
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL_OW 70
3652: PUSH
3653: LD_INT 0
3655: EQUAL
3656: PUSH
3657: LD_EXP 6
3661: PPUSH
3662: CALL_OW 302
3666: NOT
3667: AND
3668: IFFALSE 3745
3670: GO 3672
3672: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3673: LD_INT 35
3675: PPUSH
3676: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3680: LD_EXP 6
3684: PPUSH
3685: CALL_OW 256
3689: PUSH
3690: LD_INT 250
3692: GREATER
3693: IFFALSE 3673
// Say ( Brian , DFb-Sol1-1 ) ;
3695: LD_EXP 6
3699: PPUSH
3700: LD_STRING DFb-Sol1-1
3702: PPUSH
3703: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3707: LD_EXP 6
3711: PPUSH
3712: LD_INT 78
3714: PPUSH
3715: LD_INT 74
3717: PPUSH
3718: CALL_OW 111
// if IsDead ( Jerry ) then
3722: LD_EXP 7
3726: PPUSH
3727: CALL_OW 301
3731: IFFALSE 3745
// Say ( Brian , DFb-Sol1-1a ) end ;
3733: LD_EXP 6
3737: PPUSH
3738: LD_STRING DFb-Sol1-1a
3740: PPUSH
3741: CALL_OW 88
3745: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3746: LD_INT 22
3748: PUSH
3749: LD_INT 1
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_INT 21
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PPUSH
3770: CALL_OW 69
3774: PUSH
3775: LD_INT 0
3777: EQUAL
3778: IFFALSE 3866
3780: GO 3782
3782: DISABLE
3783: LD_INT 0
3785: PPUSH
// begin enable ;
3786: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3787: LD_ADDR_VAR 0 1
3791: PUSH
3792: LD_INT 22
3794: PUSH
3795: LD_INT 3
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 3
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PUSH
3812: LD_INT 30
3814: PUSH
3815: LD_INT 31
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: LIST
3826: PPUSH
3827: CALL_OW 69
3831: PUSH
3832: FOR_IN
3833: IFFALSE 3864
// begin if See ( 1 , i ) then
3835: LD_INT 1
3837: PPUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: CALL_OW 292
3847: IFFALSE 3862
// begin disable ;
3849: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3850: LD_EXP 1
3854: PPUSH
3855: LD_STRING DX1-JMM-1
3857: PPUSH
3858: CALL_OW 88
// end ; end ;
3862: GO 3832
3864: POP
3865: POP
// end ;
3866: PPOPN 1
3868: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3869: LD_INT 1
3871: PPUSH
3872: LD_INT 11
3874: PPUSH
3875: CALL_OW 294
3879: IFFALSE 4293
3881: GO 3883
3883: DISABLE
3884: LD_INT 0
3886: PPUSH
3887: PPUSH
// begin DialogueOn ;
3888: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3892: LD_INT 11
3894: PPUSH
3895: LD_INT 22
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: PUSH
3905: LD_INT 21
3907: PUSH
3908: LD_INT 1
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PPUSH
3919: CALL_OW 70
3923: PUSH
3924: LD_INT 1
3926: ARRAY
3927: PPUSH
3928: LD_STRING DX3-Rus1-1
3930: PPUSH
3931: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING DX3-JMM-1
3942: PPUSH
3943: CALL_OW 88
// DialogueOff ;
3947: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3951: LD_ADDR_VAR 0 1
3955: PUSH
3956: LD_INT 11
3958: PPUSH
3959: LD_INT 22
3961: PUSH
3962: LD_INT 3
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 21
3971: PUSH
3972: LD_INT 1
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: PPUSH
3983: CALL_OW 70
3987: PUSH
3988: FOR_IN
3989: IFFALSE 4009
// southBaseDefenders = southBaseDefenders ^ i ;
3991: LD_ADDR_EXP 25
3995: PUSH
3996: LD_EXP 25
4000: PUSH
4001: LD_VAR 0 1
4005: ADD
4006: ST_TO_ADDR
4007: GO 3988
4009: POP
4010: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
4011: LD_INT 455
4013: PUSH
4014: LD_INT 420
4016: PUSH
4017: LD_INT 315
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: PUSH
4025: LD_OWVAR 67
4029: ARRAY
4030: PPUSH
4031: CALL_OW 67
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ) ;
4035: LD_INT 22
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: LD_INT 21
4047: PUSH
4048: LD_INT 1
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 25
4057: PUSH
4058: LD_INT 3
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 69
4074: PPUSH
4075: CALL_OW 122
// wait ( 0 0$1 ) ;
4079: LD_INT 35
4081: PPUSH
4082: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
4086: LD_INT 35
4088: PPUSH
4089: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
4093: LD_ADDR_VAR 0 1
4097: PUSH
4098: LD_INT 22
4100: PUSH
4101: LD_INT 3
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 21
4110: PUSH
4111: LD_INT 2
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 58
4120: PUSH
4121: EMPTY
4122: LIST
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: LIST
4128: PPUSH
4129: CALL_OW 69
4133: PUSH
4134: FOR_IN
4135: IFFALSE 4205
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: LD_INT 22
4144: PUSH
4145: LD_INT 3
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 21
4154: PUSH
4155: LD_INT 1
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 3
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 69
4181: PUSH
4182: FOR_IN
4183: IFFALSE 4201
// begin ComEnterUnit ( j , i ) ;
4185: LD_VAR 0 2
4189: PPUSH
4190: LD_VAR 0 1
4194: PPUSH
4195: CALL_OW 120
// end ;
4199: GO 4182
4201: POP
4202: POP
// end ;
4203: GO 4134
4205: POP
4206: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4207: LD_INT 22
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 21
4219: PUSH
4220: LD_INT 2
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 58
4229: PUSH
4230: EMPTY
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 69
4242: PUSH
4243: LD_INT 0
4245: EQUAL
4246: PUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 21
4259: PUSH
4260: LD_INT 1
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: LD_INT 25
4269: PUSH
4270: LD_INT 3
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 69
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: OR
4291: IFFALSE 4086
// end ;
4293: PPOPN 2
4295: END
// every 0 0$1 do var i , tmp ;
4296: GO 4298
4298: DISABLE
4299: LD_INT 0
4301: PPUSH
4302: PPUSH
// begin enable ;
4303: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4304: LD_ADDR_VAR 0 2
4308: PUSH
4309: LD_INT 22
4311: PUSH
4312: LD_INT 1
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: LD_INT 21
4321: PUSH
4322: LD_INT 1
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PPUSH
4333: CALL_OW 69
4337: ST_TO_ADDR
// for i in tmp do
4338: LD_ADDR_VAR 0 1
4342: PUSH
4343: LD_VAR 0 2
4347: PUSH
4348: FOR_IN
4349: IFFALSE 4471
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_INT 5
4358: PPUSH
4359: CALL_OW 296
4363: PUSH
4364: LD_INT 4
4366: LESS
4367: PUSH
4368: LD_VAR 0 1
4372: PPUSH
4373: LD_INT 4
4375: PPUSH
4376: CALL_OW 296
4380: PUSH
4381: LD_INT 4
4383: LESS
4384: OR
4385: IFFALSE 4469
// begin disable ;
4387: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4388: LD_INT 5
4390: PUSH
4391: LD_INT 4
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PPUSH
4398: CALL_OW 85
// if IsOK ( Bobby ) then
4402: LD_EXP 2
4406: PPUSH
4407: CALL_OW 302
4411: IFFALSE 4448
// begin DialogueOn ;
4413: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4417: LD_EXP 2
4421: PPUSH
4422: LD_STRING DX2-Bobby-1
4424: PPUSH
4425: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4429: LD_EXP 1
4433: PPUSH
4434: LD_STRING DX2-JMM-1a
4436: PPUSH
4437: CALL_OW 88
// DialogueOff ;
4441: CALL_OW 7
// disable ;
4445: DISABLE
// end else
4446: GO 4469
// begin DialogueOn ;
4448: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4452: LD_EXP 1
4456: PPUSH
4457: LD_STRING DX2-JMM-1
4459: PPUSH
4460: CALL_OW 88
// DialogueOff ;
4464: CALL_OW 7
// disable ;
4468: DISABLE
// end ; end ; end ;
4469: GO 4348
4471: POP
4472: POP
// end ;
4473: PPOPN 2
4475: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4476: LD_INT 22
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 23
4488: PUSH
4489: LD_INT 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 21
4498: PUSH
4499: LD_INT 2
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 34
4508: PUSH
4509: LD_INT 42
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: PPUSH
4522: CALL_OW 69
4526: IFFALSE 4947
4528: GO 4530
4530: DISABLE
4531: LD_INT 0
4533: PPUSH
4534: PPUSH
4535: PPUSH
4536: PPUSH
4537: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4538: LD_ADDR_VAR 0 1
4542: PUSH
4543: LD_INT 22
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 23
4555: PUSH
4556: LD_INT 3
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: LD_INT 21
4565: PUSH
4566: LD_INT 2
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 34
4575: PUSH
4576: LD_INT 42
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: PPUSH
4589: CALL_OW 69
4593: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4594: LD_ADDR_VAR 0 3
4598: PUSH
4599: LD_INT 22
4601: PUSH
4602: LD_INT 1
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: LD_INT 21
4611: PUSH
4612: LD_INT 1
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PUSH
4619: LD_INT 26
4621: PUSH
4622: LD_INT 1
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: LIST
4633: PPUSH
4634: CALL_OW 69
4638: PUSH
4639: LD_EXP 1
4643: PUSH
4644: LD_EXP 3
4648: PUSH
4649: LD_EXP 2
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: LIST
4658: DIFF
4659: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4660: LD_ADDR_VAR 0 4
4664: PUSH
4665: LD_INT 22
4667: PUSH
4668: LD_INT 1
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 26
4687: PUSH
4688: LD_INT 2
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: LIST
4699: PPUSH
4700: CALL_OW 69
4704: PUSH
4705: LD_EXP 4
4709: PUSH
4710: EMPTY
4711: LIST
4712: DIFF
4713: ST_TO_ADDR
// if not tmp then
4714: LD_VAR 0 1
4718: NOT
4719: IFFALSE 4723
// exit ;
4721: GO 4947
// DialogueOn ;
4723: CALL_OW 6
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4727: LD_ADDR_VAR 0 2
4731: PUSH
4732: LD_VAR 0 1
4736: PUSH
4737: LD_INT 1
4739: ARRAY
4740: PPUSH
4741: CALL_OW 311
4745: ST_TO_ADDR
// if not speaker then
4746: LD_VAR 0 2
4750: NOT
4751: IFFALSE 4755
// exit ;
4753: GO 4947
// if speaker = JMM then
4755: LD_VAR 0 2
4759: PUSH
4760: LD_EXP 1
4764: EQUAL
4765: IFFALSE 4799
// begin if Lisa then
4767: LD_EXP 4
4771: IFFALSE 4785
// Say ( Lisa , DX2b-Lisa-1 ) ;
4773: LD_EXP 4
4777: PPUSH
4778: LD_STRING DX2b-Lisa-1
4780: PPUSH
4781: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4785: LD_EXP 1
4789: PPUSH
4790: LD_STRING DX2b-JMM-1
4792: PPUSH
4793: CALL_OW 88
// end else
4797: GO 4943
// begin Say ( JMM , DX2a-JMM-1 ) ;
4799: LD_EXP 1
4803: PPUSH
4804: LD_STRING DX2a-JMM-1
4806: PPUSH
4807: CALL_OW 88
// if speaker = Bobby then
4811: LD_VAR 0 2
4815: PUSH
4816: LD_EXP 2
4820: EQUAL
4821: IFFALSE 4835
// Say ( Bobby , DX2a-Bobby-1 ) ;
4823: LD_EXP 2
4827: PPUSH
4828: LD_STRING DX2a-Bobby-1
4830: PPUSH
4831: CALL_OW 88
// if speaker = Cyrus then
4835: LD_VAR 0 2
4839: PUSH
4840: LD_EXP 3
4844: EQUAL
4845: IFFALSE 4859
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4847: LD_EXP 3
4851: PPUSH
4852: LD_STRING DX2a-Cyrus-1
4854: PPUSH
4855: CALL_OW 88
// if speaker = Lisa then
4859: LD_VAR 0 2
4863: PUSH
4864: LD_EXP 4
4868: EQUAL
4869: IFFALSE 4883
// Say ( Lisa , DX2a-Lisa-1 ) ;
4871: LD_EXP 4
4875: PPUSH
4876: LD_STRING DX2a-Lisa-1
4878: PPUSH
4879: CALL_OW 88
// if speaker in temp1 then
4883: LD_VAR 0 2
4887: PUSH
4888: LD_VAR 0 3
4892: IN
4893: IFFALSE 4907
// Say ( speaker , DX2a-Sol1-1 ) ;
4895: LD_VAR 0 2
4899: PPUSH
4900: LD_STRING DX2a-Sol1-1
4902: PPUSH
4903: CALL_OW 88
// if speaker in temp2 then
4907: LD_VAR 0 2
4911: PUSH
4912: LD_VAR 0 4
4916: IN
4917: IFFALSE 4931
// Say ( speaker , DX2a-FSol1-1 ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_STRING DX2a-FSol1-1
4926: PPUSH
4927: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4931: LD_EXP 1
4935: PPUSH
4936: LD_STRING DX2a-JMM-2
4938: PPUSH
4939: CALL_OW 88
// end ; DialogueOff ;
4943: CALL_OW 7
// end ;
4947: PPOPN 5
4949: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4950: LD_INT 1
4952: PPUSH
4953: CALL_OW 255
4957: PUSH
4958: LD_INT 1
4960: EQUAL
4961: PUSH
4962: LD_INT 10
4964: PPUSH
4965: CALL_OW 255
4969: PUSH
4970: LD_INT 1
4972: EQUAL
4973: OR
4974: IFFALSE 5034
4976: GO 4978
4978: DISABLE
// begin DialogueOn ;
4979: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4983: LD_EXP 1
4987: PPUSH
4988: LD_STRING D3-JMM-1
4990: PPUSH
4991: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4995: LD_EXP 9
4999: PPUSH
5000: LD_STRING D3-Pow-1
5002: PPUSH
5003: CALL_OW 94
// if IsOK ( Cyrus ) then
5007: LD_EXP 3
5011: PPUSH
5012: CALL_OW 302
5016: IFFALSE 5030
// Say ( Cyrus , D3-Cyrus-1 ) ;
5018: LD_EXP 3
5022: PPUSH
5023: LD_STRING D3-Cyrus-1
5025: PPUSH
5026: CALL_OW 88
// DialogueOff ;
5030: CALL_OW 7
// end ;
5034: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var temp , i ;
5035: LD_INT 1
5037: PPUSH
5038: CALL_OW 255
5042: PUSH
5043: LD_INT 1
5045: EQUAL
5046: PUSH
5047: LD_INT 10
5049: PPUSH
5050: CALL_OW 255
5054: PUSH
5055: LD_INT 1
5057: EQUAL
5058: AND
5059: PUSH
5060: LD_INT 22
5062: PPUSH
5063: LD_INT 22
5065: PUSH
5066: LD_INT 3
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 21
5075: PUSH
5076: LD_INT 1
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: PPUSH
5087: CALL_OW 70
5091: PUSH
5092: LD_INT 0
5094: EQUAL
5095: AND
5096: IFFALSE 6341
5098: GO 5100
5100: DISABLE
5101: LD_INT 0
5103: PPUSH
5104: PPUSH
// begin DialogueOn ;
5105: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5109: LD_EXP 1
5113: PPUSH
5114: LD_STRING D3a-JMM-1
5116: PPUSH
5117: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5121: LD_EXP 9
5125: PPUSH
5126: LD_STRING D3a-Pow-1
5128: PPUSH
5129: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5133: LD_EXP 1
5137: PPUSH
5138: LD_STRING D3a-JMM-2
5140: PPUSH
5141: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5145: LD_EXP 9
5149: PPUSH
5150: LD_STRING D3a-Pow-2
5152: PPUSH
5153: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5157: LD_EXP 1
5161: PPUSH
5162: LD_STRING D3a-JMM-3
5164: PPUSH
5165: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5169: LD_EXP 9
5173: PPUSH
5174: LD_STRING D3a-Pow-3
5176: PPUSH
5177: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5181: LD_EXP 1
5185: PPUSH
5186: LD_STRING D3a-JMM-4
5188: PPUSH
5189: CALL_OW 88
// DialogueOff ;
5193: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5197: LD_STRING M2
5199: PPUSH
5200: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5204: LD_EXP 1
5208: PPUSH
5209: LD_STRING D3b-JMM-1
5211: PPUSH
5212: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5216: LD_INT 35
5218: PPUSH
5219: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5223: LD_INT 22
5225: PPUSH
5226: LD_INT 22
5228: PUSH
5229: LD_INT 1
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 25
5238: PUSH
5239: LD_INT 2
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PPUSH
5250: CALL_OW 70
5254: IFFALSE 5216
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5256: LD_ADDR_VAR 0 1
5260: PUSH
5261: LD_INT 22
5263: PUSH
5264: LD_INT 1
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PUSH
5271: LD_INT 23
5273: PUSH
5274: LD_INT 1
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PUSH
5281: LD_INT 25
5283: PUSH
5284: LD_INT 2
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PUSH
5291: LD_INT 50
5293: PUSH
5294: EMPTY
5295: LIST
5296: PUSH
5297: LD_INT 56
5299: PUSH
5300: EMPTY
5301: LIST
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: PPUSH
5310: CALL_OW 69
5314: PUSH
5315: LD_EXP 1
5319: PUSH
5320: LD_EXP 5
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: DIFF
5329: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5330: LD_INT 35
5332: PPUSH
5333: CALL_OW 67
// until temp > 0 ;
5337: LD_VAR 0 1
5341: PUSH
5342: LD_INT 0
5344: GREATER
5345: IFFALSE 5256
// wait ( 0 0$5 ) ;
5347: LD_INT 175
5349: PPUSH
5350: CALL_OW 67
// PrepareRussianHeroes ;
5354: CALL 11734 0 0
// InGameOn ;
5358: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5362: LD_EXP 8
5366: PPUSH
5367: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5371: LD_EXP 1
5375: PUSH
5376: LD_VAR 0 1
5380: PUSH
5381: LD_INT 1
5383: ARRAY
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: LD_EXP 8
5393: PPUSH
5394: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5398: LD_EXP 8
5402: PPUSH
5403: LD_VAR 0 1
5407: PUSH
5408: LD_INT 1
5410: ARRAY
5411: PPUSH
5412: CALL_OW 119
// Wait ( 0 0$02 ) ;
5416: LD_INT 70
5418: PPUSH
5419: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5423: LD_EXP 8
5427: PPUSH
5428: LD_STRING D4-Mikh-1
5430: PPUSH
5431: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5435: LD_VAR 0 1
5439: PUSH
5440: LD_INT 1
5442: ARRAY
5443: PPUSH
5444: CALL_OW 258
5448: PUSH
5449: LD_INT 1
5451: EQUAL
5452: IFFALSE 5470
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5454: LD_VAR 0 1
5458: PUSH
5459: LD_INT 1
5461: ARRAY
5462: PPUSH
5463: LD_STRING D4-Sol1-1
5465: PPUSH
5466: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5470: LD_VAR 0 1
5474: PUSH
5475: LD_INT 1
5477: ARRAY
5478: PPUSH
5479: CALL_OW 258
5483: PUSH
5484: LD_INT 2
5486: EQUAL
5487: IFFALSE 5505
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5489: LD_VAR 0 1
5493: PUSH
5494: LD_INT 1
5496: ARRAY
5497: PPUSH
5498: LD_STRING D4-FSol1-1
5500: PPUSH
5501: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5505: LD_EXP 8
5509: PPUSH
5510: LD_STRING D4-Mikh-2
5512: PPUSH
5513: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5517: LD_VAR 0 1
5521: PUSH
5522: LD_INT 1
5524: ARRAY
5525: PPUSH
5526: CALL_OW 258
5530: PUSH
5531: LD_INT 1
5533: EQUAL
5534: IFFALSE 5552
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5536: LD_VAR 0 1
5540: PUSH
5541: LD_INT 1
5543: ARRAY
5544: PPUSH
5545: LD_STRING D4-Sol1-2
5547: PPUSH
5548: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5552: LD_VAR 0 1
5556: PUSH
5557: LD_INT 1
5559: ARRAY
5560: PPUSH
5561: CALL_OW 258
5565: PUSH
5566: LD_INT 2
5568: EQUAL
5569: IFFALSE 5587
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5571: LD_VAR 0 1
5575: PUSH
5576: LD_INT 1
5578: ARRAY
5579: PPUSH
5580: LD_STRING D4-FSol1-2
5582: PPUSH
5583: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5587: LD_EXP 8
5591: PPUSH
5592: LD_STRING D4-Mikh-3
5594: PPUSH
5595: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5599: LD_VAR 0 1
5603: PUSH
5604: LD_INT 1
5606: ARRAY
5607: PPUSH
5608: CALL_OW 258
5612: PUSH
5613: LD_INT 1
5615: EQUAL
5616: IFFALSE 5634
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5618: LD_VAR 0 1
5622: PUSH
5623: LD_INT 1
5625: ARRAY
5626: PPUSH
5627: LD_STRING D4-Sol1-3
5629: PPUSH
5630: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5634: LD_VAR 0 1
5638: PUSH
5639: LD_INT 1
5641: ARRAY
5642: PPUSH
5643: CALL_OW 258
5647: PUSH
5648: LD_INT 2
5650: EQUAL
5651: IFFALSE 5669
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5653: LD_VAR 0 1
5657: PUSH
5658: LD_INT 1
5660: ARRAY
5661: PPUSH
5662: LD_STRING D4-FSol1-3
5664: PPUSH
5665: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5669: LD_EXP 8
5673: PPUSH
5674: LD_STRING D4-Mikh-4
5676: PPUSH
5677: CALL_OW 88
// case query ( Qs1 ) of 1 :
5681: LD_STRING Qs1
5683: PPUSH
5684: CALL_OW 97
5688: PUSH
5689: LD_INT 1
5691: DOUBLE
5692: EQUAL
5693: IFTRUE 5697
5695: GO 5732
5697: POP
// begin InGameOff ;
5698: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5702: LD_INT 1
5704: PPUSH
5705: LD_INT 6
5707: PPUSH
5708: LD_INT 2
5710: PPUSH
5711: LD_INT 1
5713: PPUSH
5714: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5718: LD_EXP 8
5722: PPUSH
5723: LD_INT 17
5725: PPUSH
5726: CALL_OW 113
// end ; 2 :
5730: GO 6325
5732: LD_INT 2
5734: DOUBLE
5735: EQUAL
5736: IFTRUE 5740
5738: GO 6290
5740: POP
// begin repeat wait ( 0 0$1 ) ;
5741: LD_INT 35
5743: PPUSH
5744: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5748: LD_VAR 0 1
5752: PUSH
5753: LD_INT 1
5755: ARRAY
5756: PPUSH
5757: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5761: LD_VAR 0 1
5765: PUSH
5766: LD_INT 1
5768: ARRAY
5769: PPUSH
5770: LD_EXP 1
5774: PPUSH
5775: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5779: LD_EXP 8
5783: PPUSH
5784: LD_EXP 1
5788: PPUSH
5789: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5793: LD_EXP 1
5797: PPUSH
5798: LD_EXP 8
5802: PPUSH
5803: CALL_OW 296
5807: PUSH
5808: LD_INT 5
5810: LESS
5811: IFFALSE 5741
// ComTurnUnit ( Mikhail , JMM ) ;
5813: LD_EXP 8
5817: PPUSH
5818: LD_EXP 1
5822: PPUSH
5823: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5827: LD_EXP 1
5831: PPUSH
5832: LD_STRING D4b-JMM-1
5834: PPUSH
5835: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5839: LD_EXP 8
5843: PPUSH
5844: LD_STRING D4b-Mikh-1
5846: PPUSH
5847: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5851: LD_EXP 1
5855: PPUSH
5856: LD_STRING D4b-JMM-2
5858: PPUSH
5859: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5863: LD_EXP 8
5867: PPUSH
5868: LD_STRING D4b-Mikh-2
5870: PPUSH
5871: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5875: LD_EXP 1
5879: PPUSH
5880: LD_STRING D4b-JMM-3
5882: PPUSH
5883: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5887: LD_EXP 8
5891: PPUSH
5892: LD_STRING D4b-Mikh-3
5894: PPUSH
5895: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5899: LD_EXP 1
5903: PPUSH
5904: LD_STRING D4b-JMM-4
5906: PPUSH
5907: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5911: LD_EXP 8
5915: PPUSH
5916: LD_STRING D4b-Mikh-4
5918: PPUSH
5919: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5923: LD_EXP 1
5927: PPUSH
5928: LD_STRING D4b-JMM-5
5930: PPUSH
5931: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5935: LD_EXP 8
5939: PPUSH
5940: LD_STRING D4b-Mikh-5
5942: PPUSH
5943: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5947: LD_EXP 1
5951: PPUSH
5952: LD_STRING D4b-JMM-6
5954: PPUSH
5955: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5959: LD_EXP 8
5963: PPUSH
5964: LD_STRING D4b-Mikh-6
5966: PPUSH
5967: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5971: LD_EXP 1
5975: PPUSH
5976: LD_STRING D4b-JMM-7
5978: PPUSH
5979: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5983: LD_EXP 8
5987: PPUSH
5988: LD_STRING D4b-Mikh-7
5990: PPUSH
5991: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5995: LD_VAR 0 1
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: PPUSH
6004: CALL_OW 258
6008: PUSH
6009: LD_INT 1
6011: EQUAL
6012: IFFALSE 6030
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6014: LD_VAR 0 1
6018: PUSH
6019: LD_INT 1
6021: ARRAY
6022: PPUSH
6023: LD_STRING D4b-Sol1-7
6025: PPUSH
6026: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6030: LD_VAR 0 1
6034: PUSH
6035: LD_INT 1
6037: ARRAY
6038: PPUSH
6039: CALL_OW 258
6043: PUSH
6044: LD_INT 2
6046: EQUAL
6047: IFFALSE 6065
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6049: LD_VAR 0 1
6053: PUSH
6054: LD_INT 1
6056: ARRAY
6057: PPUSH
6058: LD_STRING D4b-FSol1-7
6060: PPUSH
6061: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6065: LD_EXP 1
6069: PPUSH
6070: LD_STRING D4b-JMM-8
6072: PPUSH
6073: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6077: LD_VAR 0 1
6081: PUSH
6082: LD_INT 1
6084: ARRAY
6085: PPUSH
6086: CALL_OW 258
6090: PUSH
6091: LD_INT 1
6093: EQUAL
6094: IFFALSE 6112
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6096: LD_VAR 0 1
6100: PUSH
6101: LD_INT 1
6103: ARRAY
6104: PPUSH
6105: LD_STRING D4b-Sol1-8
6107: PPUSH
6108: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6112: LD_VAR 0 1
6116: PUSH
6117: LD_INT 1
6119: ARRAY
6120: PPUSH
6121: CALL_OW 258
6125: PUSH
6126: LD_INT 2
6128: EQUAL
6129: IFFALSE 6147
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6131: LD_VAR 0 1
6135: PUSH
6136: LD_INT 1
6138: ARRAY
6139: PPUSH
6140: LD_STRING D4b-FSol1-8
6142: PPUSH
6143: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6147: LD_EXP 1
6151: PPUSH
6152: LD_STRING D4b-JMM-9
6154: PPUSH
6155: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6159: LD_EXP 8
6163: PPUSH
6164: LD_INT 1
6166: PPUSH
6167: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6171: LD_ADDR_VAR 0 2
6175: PUSH
6176: LD_INT 22
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: PPUSH
6189: CALL_OW 69
6193: PUSH
6194: FOR_IN
6195: IFFALSE 6208
// ComFree ( i ) ;
6197: LD_VAR 0 2
6201: PPUSH
6202: CALL_OW 139
6206: GO 6194
6208: POP
6209: POP
// repeat wait ( 0 0$1 ) ;
6210: LD_INT 35
6212: PPUSH
6213: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6217: LD_EXP 8
6221: PPUSH
6222: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6226: LD_EXP 8
6230: PUSH
6231: LD_VAR 0 1
6235: PUSH
6236: LD_INT 1
6238: ARRAY
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PPUSH
6244: LD_INT 1
6246: PPUSH
6247: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6251: LD_EXP 8
6255: PPUSH
6256: CALL_OW 310
6260: IFFALSE 6210
// mikhailDepot = IsInUnit ( Mikhail ) ;
6262: LD_ADDR_EXP 23
6266: PUSH
6267: LD_EXP 8
6271: PPUSH
6272: CALL_OW 310
6276: ST_TO_ADDR
// InGameOff ;
6277: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6281: LD_STRING M3
6283: PPUSH
6284: CALL_OW 337
// end ; 3 :
6288: GO 6325
6290: LD_INT 3
6292: DOUBLE
6293: EQUAL
6294: IFTRUE 6298
6296: GO 6324
6298: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6299: LD_EXP 8
6303: PPUSH
6304: LD_INT 17
6306: PPUSH
6307: CALL_OW 113
// wait ( 0 0$3 ) ;
6311: LD_INT 105
6313: PPUSH
6314: CALL_OW 67
// InGameOff ;
6318: CALL_OW 9
// end ; end ;
6322: GO 6325
6324: POP
// PrepareTigers ;
6325: CALL 14401 0 0
// RussianTrap ;
6329: CALL 10130 0 0
// tigersRespawn = 1 ;
6333: LD_ADDR_EXP 30
6337: PUSH
6338: LD_INT 1
6340: ST_TO_ADDR
// end ;
6341: PPOPN 2
6343: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6344: LD_INT 1
6346: PPUSH
6347: CALL_OW 255
6351: PUSH
6352: LD_INT 1
6354: EQUAL
6355: PUSH
6356: LD_INT 10
6358: PPUSH
6359: CALL_OW 255
6363: PUSH
6364: LD_INT 1
6366: EQUAL
6367: AND
6368: PUSH
6369: LD_INT 1
6371: PPUSH
6372: CALL_OW 274
6376: PPUSH
6377: LD_INT 1
6379: PPUSH
6380: CALL_OW 275
6384: PUSH
6385: LD_INT 100
6387: GREATEREQUAL
6388: AND
6389: IFFALSE 6552
6391: GO 6393
6393: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6394: LD_INT 2100
6396: PPUSH
6397: LD_INT 4200
6399: PPUSH
6400: CALL_OW 12
6404: PUSH
6405: LD_INT 1050
6407: PLUS
6408: PPUSH
6409: CALL_OW 67
// PrepareCargoBays ;
6413: CALL 12855 0 0
// cargoRespawn = 1 ;
6417: LD_ADDR_EXP 28
6421: PUSH
6422: LD_INT 1
6424: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6425: LD_EXP 15
6429: PUSH
6430: LD_EXP 16
6434: PUSH
6435: LD_EXP 17
6439: PUSH
6440: LD_EXP 18
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: PPUSH
6451: LD_INT 36
6453: PPUSH
6454: LD_INT 13
6456: PPUSH
6457: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6461: LD_EXP 15
6465: PUSH
6466: LD_EXP 16
6470: PUSH
6471: LD_EXP 17
6475: PUSH
6476: LD_EXP 18
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: PPUSH
6487: LD_INT 40
6489: PPUSH
6490: LD_INT 20
6492: PPUSH
6493: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6497: LD_EXP 15
6501: PUSH
6502: LD_EXP 16
6506: PUSH
6507: LD_EXP 17
6511: PUSH
6512: LD_EXP 18
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: PPUSH
6523: LD_INT 53
6525: PPUSH
6526: LD_INT 16
6528: PPUSH
6529: CALL_OW 171
// wait ( 0 0$5 ) ;
6533: LD_INT 175
6535: PPUSH
6536: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6540: LD_EXP 17
6544: PPUSH
6545: LD_STRING D5-Rus2-1
6547: PPUSH
6548: CALL_OW 88
// end ;
6552: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6553: LD_EXP 28
6557: PUSH
6558: LD_INT 1
6560: EQUAL
6561: IFFALSE 6793
6563: GO 6565
6565: DISABLE
6566: LD_INT 0
6568: PPUSH
6569: PPUSH
6570: PPUSH
6571: PPUSH
// begin enable ;
6572: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6573: LD_ADDR_VAR 0 3
6577: PUSH
6578: LD_INT 22
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 21
6590: PUSH
6591: LD_INT 2
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: LD_INT 34
6600: PUSH
6601: LD_INT 51
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: PPUSH
6613: CALL_OW 69
6617: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_nation , 1 ] , [ f_btype , b_depot ] ] ] ) ;
6618: LD_ADDR_VAR 0 4
6622: PUSH
6623: LD_INT 22
6625: PUSH
6626: LD_INT 1
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 2
6635: PUSH
6636: LD_INT 23
6638: PUSH
6639: LD_INT 1
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PUSH
6646: LD_INT 30
6648: PUSH
6649: LD_INT 0
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: PPUSH
6665: CALL_OW 69
6669: ST_TO_ADDR
// for i in tmp1 do
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_VAR 0 3
6679: PUSH
6680: FOR_IN
6681: IFFALSE 6791
// begin for j in tmp2 do
6683: LD_ADDR_VAR 0 2
6687: PUSH
6688: LD_VAR 0 4
6692: PUSH
6693: FOR_IN
6694: IFFALSE 6787
// begin if GetDistUnits ( i , j ) < 7 then
6696: LD_VAR 0 1
6700: PPUSH
6701: LD_VAR 0 2
6705: PPUSH
6706: CALL_OW 296
6710: PUSH
6711: LD_INT 7
6713: LESS
6714: IFFALSE 6785
// begin disable ;
6716: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6717: LD_EXP 15
6721: PUSH
6722: LD_EXP 16
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PPUSH
6731: LD_INT 7
6733: PPUSH
6734: LD_INT 9
6736: PPUSH
6737: CALL_OW 111
// if cargoSee = 0 then
6741: LD_EXP 29
6745: PUSH
6746: LD_INT 0
6748: EQUAL
6749: IFFALSE 6785
// begin cargoSee = 1 ;
6751: LD_ADDR_EXP 29
6755: PUSH
6756: LD_INT 1
6758: ST_TO_ADDR
// cargoEscape = 1 ;
6759: LD_ADDR_EXP 20
6763: PUSH
6764: LD_INT 1
6766: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6767: LD_EXP 17
6771: PPUSH
6772: LD_STRING D5-Rus2-1a
6774: PPUSH
6775: CALL_OW 88
// exit ;
6779: POP
6780: POP
6781: POP
6782: POP
6783: GO 6793
// end ; end ; end ;
6785: GO 6693
6787: POP
6788: POP
// end ;
6789: GO 6680
6791: POP
6792: POP
// end ;
6793: PPOPN 4
6795: END
// every 0 0$1 trigger cargoEscape > 0 do
6796: LD_EXP 20
6800: PUSH
6801: LD_INT 0
6803: GREATER
6804: IFFALSE 6951
6806: GO 6808
6808: DISABLE
// begin enable ;
6809: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6810: LD_EXP 15
6814: PUSH
6815: LD_EXP 16
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PPUSH
6824: LD_INT 13
6826: PPUSH
6827: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6831: LD_EXP 15
6835: PPUSH
6836: LD_INT 13
6838: PPUSH
6839: CALL_OW 308
6843: PUSH
6844: LD_EXP 17
6848: PPUSH
6849: LD_INT 13
6851: PPUSH
6852: CALL_OW 308
6856: OR
6857: IFFALSE 6891
// begin RemoveUnit ( cargo1 ) ;
6859: LD_EXP 15
6863: PPUSH
6864: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6868: LD_EXP 17
6872: PPUSH
6873: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6877: LD_ADDR_EXP 20
6881: PUSH
6882: LD_EXP 20
6886: PUSH
6887: LD_INT 1
6889: PLUS
6890: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6891: LD_EXP 16
6895: PPUSH
6896: LD_INT 13
6898: PPUSH
6899: CALL_OW 308
6903: PUSH
6904: LD_EXP 18
6908: PPUSH
6909: LD_INT 13
6911: PPUSH
6912: CALL_OW 308
6916: OR
6917: IFFALSE 6951
// begin RemoveUnit ( cargo2 ) ;
6919: LD_EXP 16
6923: PPUSH
6924: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6928: LD_EXP 18
6932: PPUSH
6933: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6937: LD_ADDR_EXP 20
6941: PUSH
6942: LD_EXP 20
6946: PUSH
6947: LD_INT 1
6949: PLUS
6950: ST_TO_ADDR
// end ; end ;
6951: END
// every 0 0$1 trigger cargoEscape > 1 do
6952: LD_EXP 20
6956: PUSH
6957: LD_INT 1
6959: GREATER
6960: IFFALSE 7124
6962: GO 6964
6964: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
6965: LD_INT 4
6967: PPUSH
6968: LD_INT 1
6970: PPUSH
6971: LD_INT 1
6973: PPUSH
6974: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6978: LD_INT 31
6980: PPUSH
6981: LD_INT 1
6983: PPUSH
6984: LD_INT 1
6986: PPUSH
6987: CALL_OW 324
// if IsOK ( Jerry ) then
6991: LD_EXP 7
6995: PPUSH
6996: CALL_OW 302
7000: IFFALSE 7016
// begin Say ( Jerry , D5a-Sol1-1 ) ;
7002: LD_EXP 7
7006: PPUSH
7007: LD_STRING D5a-Sol1-1
7009: PPUSH
7010: CALL_OW 88
// end else
7014: GO 7112
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
7016: LD_INT 22
7018: PUSH
7019: LD_INT 1
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 23
7028: PUSH
7029: LD_INT 1
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: LD_INT 26
7038: PUSH
7039: LD_INT 1
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: PPUSH
7051: CALL_OW 69
7055: PUSH
7056: LD_INT 2
7058: PPUSH
7059: LD_INT 22
7061: PUSH
7062: LD_INT 1
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 23
7071: PUSH
7072: LD_INT 1
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 26
7081: PUSH
7082: LD_INT 1
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: LIST
7093: PPUSH
7094: CALL_OW 69
7098: PPUSH
7099: CALL_OW 12
7103: ARRAY
7104: PPUSH
7105: LD_STRING D5a-Sol1-1
7107: PPUSH
7108: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7112: LD_EXP 1
7116: PPUSH
7117: LD_STRING D5a-JMM-1
7119: PPUSH
7120: CALL_OW 88
// end ;
7124: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7125: LD_INT 1
7127: PPUSH
7128: CALL_OW 255
7132: PUSH
7133: LD_INT 3
7135: EQUAL
7136: PUSH
7137: LD_INT 1
7139: PPUSH
7140: CALL_OW 256
7144: PUSH
7145: LD_INT 1000
7147: LESS
7148: AND
7149: PUSH
7150: LD_INT 10
7152: PPUSH
7153: CALL_OW 255
7157: PUSH
7158: LD_INT 3
7160: EQUAL
7161: PUSH
7162: LD_INT 10
7164: PPUSH
7165: CALL_OW 256
7169: PUSH
7170: LD_INT 1000
7172: LESS
7173: AND
7174: OR
7175: IFFALSE 7192
7177: GO 7179
7179: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
7180: LD_EXP 1
7184: PPUSH
7185: LD_STRING D8-JMM-1
7187: PPUSH
7188: CALL_OW 88
// end ;
7192: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7193: LD_EXP 8
7197: PPUSH
7198: CALL_OW 310
7202: PUSH
7203: LD_INT 1
7205: EQUAL
7206: PUSH
7207: LD_EXP 22
7211: PUSH
7212: LD_INT 3
7214: EQUAL
7215: NOT
7216: AND
7217: IFFALSE 7239
7219: GO 7221
7221: DISABLE
// begin mikhailInBase = 1 ;
7222: LD_ADDR_EXP 22
7226: PUSH
7227: LD_INT 1
7229: ST_TO_ADDR
// mikhailStatus = 1 ;
7230: LD_ADDR_EXP 21
7234: PUSH
7235: LD_INT 1
7237: ST_TO_ADDR
// enable ;
7238: ENABLE
// end ;
7239: END
// export function AskMikhail ; begin
7240: LD_INT 0
7242: PPUSH
// case query ( QMikh2 ) of 1 :
7243: LD_STRING QMikh2
7245: PPUSH
7246: CALL_OW 97
7250: PUSH
7251: LD_INT 1
7253: DOUBLE
7254: EQUAL
7255: IFTRUE 7259
7257: GO 7326
7259: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7260: LD_INT 1
7262: PPUSH
7263: LD_INT 6
7265: PPUSH
7266: LD_INT 2
7268: PPUSH
7269: LD_INT 1
7271: PPUSH
7272: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7276: LD_EXP 8
7280: PPUSH
7281: LD_INT 6
7283: PPUSH
7284: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7288: LD_EXP 8
7292: PPUSH
7293: CALL_OW 122
// wait ( 0 0$1 ) ;
7297: LD_INT 35
7299: PPUSH
7300: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7304: LD_EXP 8
7308: PPUSH
7309: LD_INT 17
7311: PPUSH
7312: CALL_OW 113
// mikhailInbase = 0 ;
7316: LD_ADDR_EXP 22
7320: PUSH
7321: LD_INT 0
7323: ST_TO_ADDR
// end ; 2 :
7324: GO 7567
7326: LD_INT 2
7328: DOUBLE
7329: EQUAL
7330: IFTRUE 7334
7332: GO 7507
7334: POP
// begin mikhailInBase = 2 ;
7335: LD_ADDR_EXP 22
7339: PUSH
7340: LD_INT 2
7342: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7343: LD_EXP 8
7347: PPUSH
7348: LD_INT 6
7350: PPUSH
7351: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7355: LD_EXP 8
7359: PPUSH
7360: CALL_OW 122
// wait ( 0 0$1 ) ;
7364: LD_INT 35
7366: PPUSH
7367: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7371: LD_EXP 8
7375: PPUSH
7376: LD_EXP 8
7380: PPUSH
7381: CALL_OW 250
7385: PUSH
7386: LD_INT 2
7388: PLUS
7389: PPUSH
7390: LD_EXP 8
7394: PPUSH
7395: CALL_OW 251
7399: PUSH
7400: LD_INT 2
7402: PLUS
7403: PPUSH
7404: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7408: LD_EXP 8
7412: PPUSH
7413: LD_EXP 8
7417: PPUSH
7418: CALL_OW 250
7422: PUSH
7423: LD_INT 1
7425: PLUS
7426: PPUSH
7427: LD_EXP 8
7431: PPUSH
7432: CALL_OW 251
7436: PUSH
7437: LD_INT 2
7439: PLUS
7440: PPUSH
7441: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7445: LD_EXP 8
7449: PPUSH
7450: LD_EXP 8
7454: PPUSH
7455: CALL_OW 250
7459: PUSH
7460: LD_INT 2
7462: PLUS
7463: PPUSH
7464: LD_EXP 8
7468: PPUSH
7469: CALL_OW 251
7473: PPUSH
7474: CALL_OW 171
// wait ( 0 0$5 ) ;
7478: LD_INT 175
7480: PPUSH
7481: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7485: LD_EXP 8
7489: PPUSH
7490: LD_INT 25
7492: PPUSH
7493: CALL_OW 113
// mikhailInBase = 4 ;
7497: LD_ADDR_EXP 22
7501: PUSH
7502: LD_INT 4
7504: ST_TO_ADDR
// end ; 3 :
7505: GO 7567
7507: LD_INT 3
7509: DOUBLE
7510: EQUAL
7511: IFTRUE 7515
7513: GO 7566
7515: POP
// begin SetSide ( Mikhail , 6 ) ;
7516: LD_EXP 8
7520: PPUSH
7521: LD_INT 6
7523: PPUSH
7524: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7528: LD_EXP 8
7532: PPUSH
7533: CALL_OW 122
// wait ( 0 0$1 ) ;
7537: LD_INT 35
7539: PPUSH
7540: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7544: LD_EXP 8
7548: PPUSH
7549: LD_INT 17
7551: PPUSH
7552: CALL_OW 113
// mikhailInbase = 3 ;
7556: LD_ADDR_EXP 22
7560: PUSH
7561: LD_INT 3
7563: ST_TO_ADDR
// end ; end ;
7564: GO 7567
7566: POP
// end ;
7567: LD_VAR 0 1
7571: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7572: LD_EXP 8
7576: PPUSH
7577: LD_INT 25
7579: PPUSH
7580: CALL_OW 308
7584: PUSH
7585: LD_EXP 22
7589: PUSH
7590: LD_INT 4
7592: EQUAL
7593: AND
7594: IFFALSE 7698
7596: GO 7598
7598: DISABLE
// begin enable ;
7599: ENABLE
// mikhailInBase = 1 ;
7600: LD_ADDR_EXP 22
7604: PUSH
7605: LD_INT 1
7607: ST_TO_ADDR
// InGameOn ;
7608: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7612: LD_INT 1
7614: PPUSH
7615: LD_INT 6
7617: PPUSH
7618: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7622: LD_INT 35
7624: PPUSH
7625: CALL_OW 67
// if Carry ( Mikhail ) then
7629: LD_EXP 8
7633: PPUSH
7634: CALL_OW 281
7638: IFFALSE 7649
// ComUnload ( Mikhail ) ;
7640: LD_EXP 8
7644: PPUSH
7645: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7649: LD_EXP 8
7653: PPUSH
7654: LD_INT 1
7656: PPUSH
7657: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7661: LD_EXP 8
7665: PPUSH
7666: CALL_OW 310
7670: IFFALSE 7622
// SetSide ( dep1 , 1 ) ;
7672: LD_INT 1
7674: PPUSH
7675: LD_INT 1
7677: PPUSH
7678: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7682: LD_EXP 8
7686: PPUSH
7687: LD_INT 1
7689: PPUSH
7690: CALL_OW 235
// InGameOff ;
7694: CALL_OW 9
// end ;
7698: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7699: LD_EXP 8
7703: PPUSH
7704: CALL_OW 310
7708: PUSH
7709: LD_EXP 22
7713: PUSH
7714: LD_INT 3
7716: EQUAL
7717: NOT
7718: AND
7719: IFFALSE 7854
7721: GO 7723
7723: DISABLE
// begin enable ;
7724: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7725: LD_INT 22
7727: PUSH
7728: LD_INT 1
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PUSH
7735: LD_INT 21
7737: PUSH
7738: LD_INT 1
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PUSH
7745: LD_INT 91
7747: PUSH
7748: LD_EXP 8
7752: PPUSH
7753: CALL_OW 310
7757: PUSH
7758: LD_INT 10
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: LIST
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: LIST
7770: PPUSH
7771: CALL_OW 69
7775: PUSH
7776: LD_INT 1
7778: EQUAL
7779: IFFALSE 7854
// begin mikhailStatus = 4 ;
7781: LD_ADDR_EXP 21
7785: PUSH
7786: LD_INT 4
7788: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7789: LD_INT 1
7791: PPUSH
7792: LD_INT 6
7794: PPUSH
7795: LD_INT 2
7797: PPUSH
7798: LD_INT 1
7800: PPUSH
7801: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7805: LD_EXP 8
7809: PPUSH
7810: LD_INT 6
7812: PPUSH
7813: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7817: LD_EXP 8
7821: PPUSH
7822: CALL_OW 122
// wait ( 0 0$1 ) ;
7826: LD_INT 35
7828: PPUSH
7829: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7833: LD_EXP 8
7837: PPUSH
7838: LD_INT 17
7840: PPUSH
7841: CALL_OW 113
// mikhailStatus = 3 ;
7845: LD_ADDR_EXP 21
7849: PUSH
7850: LD_INT 3
7852: ST_TO_ADDR
// disable ;
7853: DISABLE
// end ; end ;
7854: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7855: LD_EXP 1
7859: PPUSH
7860: LD_EXP 23
7864: PPUSH
7865: CALL_OW 296
7869: PUSH
7870: LD_INT 5
7872: LESS
7873: PUSH
7874: LD_EXP 21
7878: PUSH
7879: LD_INT 3
7881: EQUAL
7882: AND
7883: PUSH
7884: LD_EXP 22
7888: PUSH
7889: LD_INT 3
7891: EQUAL
7892: NOT
7893: AND
7894: IFFALSE 8116
7896: GO 7898
7898: DISABLE
7899: LD_INT 0
7901: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7902: LD_ADDR_VAR 0 1
7906: PUSH
7907: LD_INT 22
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 21
7919: PUSH
7920: LD_INT 1
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PUSH
7927: LD_INT 26
7929: PUSH
7930: LD_INT 1
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: PPUSH
7942: CALL_OW 69
7946: PUSH
7947: LD_EXP 1
7951: PUSH
7952: LD_EXP 5
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: DIFF
7961: ST_TO_ADDR
// DialogueOn ;
7962: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7966: LD_EXP 1
7970: PPUSH
7971: LD_STRING D7-JMM-1
7973: PPUSH
7974: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7978: LD_VAR 0 1
7982: PUSH
7983: LD_INT 1
7985: ARRAY
7986: PPUSH
7987: LD_STRING D7-Sol1-1
7989: PPUSH
7990: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7994: LD_EXP 1
7998: PPUSH
7999: LD_STRING D7-JMM-2
8001: PPUSH
8002: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8006: LD_VAR 0 1
8010: PUSH
8011: LD_INT 1
8013: ARRAY
8014: PPUSH
8015: LD_STRING D7-Sol1-2
8017: PPUSH
8018: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8022: LD_EXP 1
8026: PPUSH
8027: LD_STRING D7-JMM-3
8029: PPUSH
8030: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8034: LD_VAR 0 1
8038: PUSH
8039: LD_INT 1
8041: ARRAY
8042: PPUSH
8043: LD_STRING D7-Sol1-3
8045: PPUSH
8046: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8050: LD_EXP 3
8054: PPUSH
8055: CALL_OW 302
8059: PUSH
8060: LD_EXP 4
8064: PPUSH
8065: CALL_OW 302
8069: AND
8070: IFFALSE 8112
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8072: LD_EXP 3
8076: PPUSH
8077: LD_STRING D7-Cyrus-3
8079: PPUSH
8080: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8084: LD_VAR 0 1
8088: PUSH
8089: LD_INT 1
8091: ARRAY
8092: PPUSH
8093: LD_STRING D7-Sol1-4
8095: PPUSH
8096: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8100: LD_EXP 4
8104: PPUSH
8105: LD_STRING D7-Lisa-4
8107: PPUSH
8108: CALL_OW 88
// end ; DialogueOff ;
8112: CALL_OW 7
// end ;
8116: PPOPN 1
8118: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8119: LD_EXP 8
8123: PPUSH
8124: CALL_OW 303
8128: PUSH
8129: LD_EXP 21
8133: PUSH
8134: LD_INT 3
8136: EQUAL
8137: AND
8138: IFFALSE 8152
8140: GO 8142
8142: DISABLE
// begin enable ;
8143: ENABLE
// mikhailStatus = 2 ;
8144: LD_ADDR_EXP 21
8148: PUSH
8149: LD_INT 2
8151: ST_TO_ADDR
// end ;
8152: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8153: LD_EXP 8
8157: PPUSH
8158: LD_INT 17
8160: PPUSH
8161: CALL_OW 308
8165: PUSH
8166: LD_EXP 8
8170: PPUSH
8171: CALL_OW 255
8175: PUSH
8176: LD_INT 6
8178: EQUAL
8179: AND
8180: IFFALSE 8213
8182: GO 8184
8184: DISABLE
// begin if not mikhailInBase = 3 then
8185: LD_EXP 22
8189: PUSH
8190: LD_INT 3
8192: EQUAL
8193: NOT
8194: IFFALSE 8204
// mikhailStatus = 3 ;
8196: LD_ADDR_EXP 21
8200: PUSH
8201: LD_INT 3
8203: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8204: LD_EXP 8
8208: PPUSH
8209: CALL_OW 64
// end ;
8213: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8214: LD_EXP 21
8218: PUSH
8219: LD_INT 3
8221: EQUAL
8222: PUSH
8223: LD_EXP 8
8227: PPUSH
8228: CALL_OW 255
8232: PUSH
8233: LD_INT 6
8235: EQUAL
8236: AND
8237: IFFALSE 8403
8239: GO 8241
8241: DISABLE
8242: LD_INT 0
8244: PPUSH
8245: PPUSH
// begin enable ;
8246: ENABLE
// if IsOk ( Mikhail ) then
8247: LD_EXP 8
8251: PPUSH
8252: CALL_OW 302
8256: IFFALSE 8403
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8258: LD_ADDR_VAR 0 2
8262: PUSH
8263: LD_EXP 8
8267: PPUSH
8268: LD_INT 22
8270: PUSH
8271: LD_INT 1
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PUSH
8278: LD_INT 21
8280: PUSH
8281: LD_INT 1
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PPUSH
8292: CALL_OW 69
8296: PPUSH
8297: CALL 10322 0 2
8301: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8302: LD_VAR 0 2
8306: PPUSH
8307: LD_EXP 8
8311: PPUSH
8312: CALL_OW 296
8316: PUSH
8317: LD_INT 8
8319: LESS
8320: IFFALSE 8403
// begin if GetSex ( attacker ) = sex_male then
8322: LD_VAR 0 2
8326: PPUSH
8327: CALL_OW 258
8331: PUSH
8332: LD_INT 1
8334: EQUAL
8335: IFFALSE 8371
// begin disable ;
8337: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8338: LD_VAR 0 2
8342: PPUSH
8343: LD_STRING D7a-Sol1-1
8345: PPUSH
8346: CALL_OW 88
// wait ( 0 0$2 ) ;
8350: LD_INT 70
8352: PPUSH
8353: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8357: LD_VAR 0 2
8361: PPUSH
8362: LD_STRING D7a-Sol1-1a
8364: PPUSH
8365: CALL_OW 88
// end else
8369: GO 8403
// begin disable ;
8371: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8372: LD_VAR 0 2
8376: PPUSH
8377: LD_STRING D7a-FSol1-1
8379: PPUSH
8380: CALL_OW 88
// wait ( 0 0$2 ) ;
8384: LD_INT 70
8386: PPUSH
8387: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8391: LD_VAR 0 2
8395: PPUSH
8396: LD_STRING D7a-FSol1-1a
8398: PPUSH
8399: CALL_OW 88
// end ; end ; end ; end ;
8403: PPOPN 2
8405: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8406: LD_EXP 27
8410: PUSH
8411: LD_INT 1
8413: EQUAL
8414: PUSH
8415: LD_INT 22
8417: PPUSH
8418: LD_INT 22
8420: PUSH
8421: LD_INT 3
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 21
8430: PUSH
8431: LD_INT 1
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PPUSH
8442: CALL_OW 70
8446: PUSH
8447: LD_INT 2
8449: GREATER
8450: AND
8451: PUSH
8452: LD_INT 22
8454: PPUSH
8455: LD_INT 22
8457: PUSH
8458: LD_INT 1
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PUSH
8465: LD_INT 2
8467: PUSH
8468: LD_INT 21
8470: PUSH
8471: LD_INT 1
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: LD_INT 59
8480: PUSH
8481: EMPTY
8482: LIST
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PPUSH
8493: CALL_OW 70
8497: PUSH
8498: LD_INT 0
8500: EQUAL
8501: AND
8502: IFFALSE 8517
8504: GO 8506
8506: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8507: LD_INT 1
8509: PPUSH
8510: LD_INT 3
8512: PPUSH
8513: CALL_OW 235
// end ;
8517: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8518: LD_EXP 30
8522: PUSH
8523: LD_INT 1
8525: EQUAL
8526: PUSH
8527: LD_INT 22
8529: PUSH
8530: LD_INT 0
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: PUSH
8537: LD_INT 25
8539: PUSH
8540: LD_INT 14
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PPUSH
8551: CALL_OW 69
8555: PUSH
8556: LD_INT 0
8558: EQUAL
8559: AND
8560: IFFALSE 8654
8562: GO 8564
8564: DISABLE
8565: LD_INT 0
8567: PPUSH
8568: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8569: LD_ADDR_VAR 0 2
8573: PUSH
8574: LD_INT 22
8576: PUSH
8577: LD_INT 1
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 21
8586: PUSH
8587: LD_INT 1
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: LD_INT 23
8596: PUSH
8597: LD_INT 1
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: PPUSH
8609: CALL_OW 69
8613: ST_TO_ADDR
// for i in tmp do
8614: LD_ADDR_VAR 0 1
8618: PUSH
8619: LD_VAR 0 2
8623: PUSH
8624: FOR_IN
8625: IFFALSE 8652
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8627: LD_VAR 0 1
8631: PPUSH
8632: LD_INT 1
8634: PPUSH
8635: LD_INT 4
8637: PPUSH
8638: CALL_OW 12
8642: PPUSH
8643: LD_INT 300
8645: PPUSH
8646: CALL_OW 492
// end ;
8650: GO 8624
8652: POP
8653: POP
// end ; end_of_file
8654: PPOPN 2
8656: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8657: LD_INT 0
8659: PPUSH
8660: PPUSH
8661: PPUSH
8662: PPUSH
// for i = 1 to count do
8663: LD_ADDR_VAR 0 8
8667: PUSH
8668: DOUBLE
8669: LD_INT 1
8671: DEC
8672: ST_TO_ADDR
8673: LD_VAR 0 6
8677: PUSH
8678: FOR_TO
8679: IFFALSE 8760
// begin uc_side = side ;
8681: LD_ADDR_OWVAR 20
8685: PUSH
8686: LD_VAR 0 1
8690: ST_TO_ADDR
// uc_nation = nation ;
8691: LD_ADDR_OWVAR 21
8695: PUSH
8696: LD_VAR 0 2
8700: ST_TO_ADDR
// hc_gallery =  ;
8701: LD_ADDR_OWVAR 33
8705: PUSH
8706: LD_STRING 
8708: ST_TO_ADDR
// hc_name =  ;
8709: LD_ADDR_OWVAR 26
8713: PUSH
8714: LD_STRING 
8716: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8717: LD_INT 0
8719: PPUSH
8720: LD_VAR 0 5
8724: PPUSH
8725: LD_VAR 0 4
8729: PPUSH
8730: CALL_OW 380
// un = CreateHuman ;
8734: LD_ADDR_VAR 0 10
8738: PUSH
8739: CALL_OW 44
8743: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8744: LD_VAR 0 10
8748: PPUSH
8749: LD_VAR 0 3
8753: PPUSH
8754: CALL_OW 52
// end ;
8758: GO 8678
8760: POP
8761: POP
// end ;
8762: LD_VAR 0 7
8766: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8767: LD_INT 0
8769: PPUSH
8770: PPUSH
8771: PPUSH
// uc_side := GetSide ( b ) ;
8772: LD_ADDR_OWVAR 20
8776: PUSH
8777: LD_VAR 0 2
8781: PPUSH
8782: CALL_OW 255
8786: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8787: LD_ADDR_OWVAR 21
8791: PUSH
8792: LD_VAR 0 2
8796: PPUSH
8797: CALL_OW 248
8801: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8802: LD_INT 0
8804: PPUSH
8805: LD_INT 1
8807: PPUSH
8808: LD_VAR 0 1
8812: PPUSH
8813: CALL_OW 380
// un = CreateHuman ;
8817: LD_ADDR_VAR 0 4
8821: PUSH
8822: CALL_OW 44
8826: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8827: LD_ADDR_VAR 0 5
8831: PUSH
8832: LD_VAR 0 2
8836: PPUSH
8837: CALL_OW 254
8841: PUSH
8842: LD_INT 3
8844: MINUS
8845: ST_TO_ADDR
// if dir < 0 then
8846: LD_VAR 0 5
8850: PUSH
8851: LD_INT 0
8853: LESS
8854: IFFALSE 8870
// dir := 6 + dir ;
8856: LD_ADDR_VAR 0 5
8860: PUSH
8861: LD_INT 6
8863: PUSH
8864: LD_VAR 0 5
8868: PLUS
8869: ST_TO_ADDR
// SetDir ( un , dir ) ;
8870: LD_VAR 0 4
8874: PPUSH
8875: LD_VAR 0 5
8879: PPUSH
8880: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8884: LD_VAR 0 4
8888: PPUSH
8889: LD_VAR 0 2
8893: PPUSH
8894: CALL_OW 52
// end ;
8898: LD_VAR 0 3
8902: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8903: LD_INT 0
8905: PPUSH
8906: PPUSH
8907: PPUSH
8908: PPUSH
8909: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8910: LD_ADDR_VAR 0 7
8914: PUSH
8915: LD_INT 22
8917: PUSH
8918: LD_VAR 0 1
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PUSH
8927: LD_INT 25
8929: PUSH
8930: LD_INT 2
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 24
8939: PUSH
8940: LD_INT 1000
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 69
8956: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8957: LD_ADDR_VAR 0 5
8961: PUSH
8962: LD_VAR 0 3
8966: PPUSH
8967: LD_INT 22
8969: PUSH
8970: LD_VAR 0 1
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: LD_INT 21
8981: PUSH
8982: LD_INT 3
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PUSH
8989: LD_INT 3
8991: PUSH
8992: LD_INT 24
8994: PUSH
8995: LD_INT 1000
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: LIST
9010: PUSH
9011: EMPTY
9012: LIST
9013: PPUSH
9014: CALL_OW 70
9018: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
9019: LD_VAR 0 5
9023: PUSH
9024: LD_INT 0
9026: GREATER
9027: PUSH
9028: LD_VAR 0 7
9032: PUSH
9033: LD_INT 0
9035: GREATER
9036: AND
9037: IFFALSE 9103
// begin for i in engineerOk_list do
9039: LD_ADDR_VAR 0 6
9043: PUSH
9044: LD_VAR 0 7
9048: PUSH
9049: FOR_IN
9050: IFFALSE 9101
// begin for j in buildings_list do
9052: LD_ADDR_VAR 0 8
9056: PUSH
9057: LD_VAR 0 5
9061: PUSH
9062: FOR_IN
9063: IFFALSE 9097
// begin AddComExitBuilding ( i ) ;
9065: LD_VAR 0 6
9069: PPUSH
9070: CALL_OW 182
// wait ( 0 0$1 ) ;
9074: LD_INT 35
9076: PPUSH
9077: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
9081: LD_VAR 0 6
9085: PPUSH
9086: LD_VAR 0 8
9090: PPUSH
9091: CALL_OW 190
// end ;
9095: GO 9062
9097: POP
9098: POP
// end ;
9099: GO 9049
9101: POP
9102: POP
// end ; if buildings_list = 0 then
9103: LD_VAR 0 5
9107: PUSH
9108: LD_INT 0
9110: EQUAL
9111: IFFALSE 9144
// begin for i in engineerOK_list do
9113: LD_ADDR_VAR 0 6
9117: PUSH
9118: LD_VAR 0 7
9122: PUSH
9123: FOR_IN
9124: IFFALSE 9142
// begin ComEnterUnit ( i , building ) ;
9126: LD_VAR 0 6
9130: PPUSH
9131: LD_VAR 0 2
9135: PPUSH
9136: CALL_OW 120
// end ;
9140: GO 9123
9142: POP
9143: POP
// end ; end ;
9144: LD_VAR 0 4
9148: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9149: LD_INT 0
9151: PPUSH
9152: PPUSH
9153: PPUSH
9154: PPUSH
9155: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9156: LD_ADDR_VAR 0 6
9160: PUSH
9161: LD_INT 22
9163: PUSH
9164: LD_VAR 0 1
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PUSH
9173: LD_INT 25
9175: PUSH
9176: LD_INT 4
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: PUSH
9183: LD_INT 24
9185: PUSH
9186: LD_INT 250
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: LIST
9197: PPUSH
9198: CALL_OW 69
9202: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9203: LD_ADDR_VAR 0 9
9207: PUSH
9208: LD_VAR 0 3
9212: PPUSH
9213: LD_INT 22
9215: PUSH
9216: LD_VAR 0 1
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: LD_INT 21
9227: PUSH
9228: LD_INT 1
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PUSH
9235: LD_INT 3
9237: PUSH
9238: LD_INT 24
9240: PUSH
9241: LD_INT 650
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 70
9261: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9262: LD_VAR 0 9
9266: PUSH
9267: LD_INT 0
9269: GREATER
9270: PUSH
9271: LD_VAR 0 6
9275: PUSH
9276: LD_INT 0
9278: GREATER
9279: AND
9280: IFFALSE 9407
// begin for i = 1 to damageUnits do
9282: LD_ADDR_VAR 0 7
9286: PUSH
9287: DOUBLE
9288: LD_INT 1
9290: DEC
9291: ST_TO_ADDR
9292: LD_VAR 0 9
9296: PUSH
9297: FOR_TO
9298: IFFALSE 9322
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9300: LD_VAR 0 9
9304: PUSH
9305: LD_VAR 0 7
9309: ARRAY
9310: PPUSH
9311: LD_VAR 0 2
9315: PPUSH
9316: CALL_OW 113
9320: GO 9297
9322: POP
9323: POP
// for i in sci_list do
9324: LD_ADDR_VAR 0 7
9328: PUSH
9329: LD_VAR 0 6
9333: PUSH
9334: FOR_IN
9335: IFFALSE 9403
// begin ComExitBuilding ( i ) ;
9337: LD_VAR 0 7
9341: PPUSH
9342: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9346: LD_ADDR_VAR 0 8
9350: PUSH
9351: LD_VAR 0 2
9355: PPUSH
9356: LD_INT 22
9358: PUSH
9359: LD_VAR 0 1
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: PPUSH
9368: CALL_OW 70
9372: PUSH
9373: FOR_IN
9374: IFFALSE 9399
// begin AddComHeal ( i , j ) ;
9376: LD_VAR 0 7
9380: PPUSH
9381: LD_VAR 0 8
9385: PPUSH
9386: CALL_OW 188
// wait ( 1 1$0 ) ;
9390: LD_INT 2100
9392: PPUSH
9393: CALL_OW 67
// end ;
9397: GO 9373
9399: POP
9400: POP
// end ;
9401: GO 9334
9403: POP
9404: POP
// end else
9405: GO 9421
// begin AddComEnterUnit ( sci_list , build ) ;
9407: LD_VAR 0 6
9411: PPUSH
9412: LD_VAR 0 4
9416: PPUSH
9417: CALL_OW 180
// end ; end ;
9421: LD_VAR 0 5
9425: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9426: LD_INT 0
9428: PPUSH
9429: PPUSH
9430: PPUSH
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9436: LD_ADDR_VAR 0 7
9440: PUSH
9441: LD_VAR 0 3
9445: PPUSH
9446: LD_INT 22
9448: PUSH
9449: LD_VAR 0 1
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 21
9460: PUSH
9461: LD_INT 2
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: LD_INT 24
9470: PUSH
9471: LD_INT 550
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: LD_INT 34
9480: PUSH
9481: LD_INT 46
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: PPUSH
9494: CALL_OW 70
9498: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9499: LD_ADDR_VAR 0 8
9503: PUSH
9504: LD_VAR 0 3
9508: PPUSH
9509: LD_INT 22
9511: PUSH
9512: LD_VAR 0 1
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 21
9523: PUSH
9524: LD_INT 2
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 34
9533: PUSH
9534: LD_INT 46
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: LD_INT 3
9543: PUSH
9544: LD_INT 24
9546: PUSH
9547: LD_INT 550
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: PPUSH
9564: CALL_OW 70
9568: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9569: LD_ADDR_VAR 0 9
9573: PUSH
9574: LD_VAR 0 2
9578: PPUSH
9579: LD_INT 22
9581: PUSH
9582: LD_VAR 0 1
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: LD_INT 21
9593: PUSH
9594: LD_INT 2
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: LD_INT 34
9603: PUSH
9604: LD_INT 46
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 24
9613: PUSH
9614: LD_INT 1000
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: LD_INT 58
9623: PUSH
9624: EMPTY
9625: LIST
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: PPUSH
9634: CALL_OW 70
9638: ST_TO_ADDR
// for i in damageVehicle_list do
9639: LD_ADDR_VAR 0 5
9643: PUSH
9644: LD_VAR 0 8
9648: PUSH
9649: FOR_IN
9650: IFFALSE 9669
// mechanicInside_list = UnitsInside ( i ) ;
9652: LD_ADDR_VAR 0 10
9656: PUSH
9657: LD_VAR 0 5
9661: PPUSH
9662: CALL_OW 313
9666: ST_TO_ADDR
9667: GO 9649
9669: POP
9670: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9671: LD_ADDR_VAR 0 11
9675: PUSH
9676: LD_VAR 0 2
9680: PPUSH
9681: LD_INT 22
9683: PUSH
9684: LD_VAR 0 1
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 25
9695: PUSH
9696: LD_INT 3
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PPUSH
9707: CALL_OW 70
9711: ST_TO_ADDR
// if damageVehicle_list > 0 then
9712: LD_VAR 0 8
9716: PUSH
9717: LD_INT 0
9719: GREATER
9720: IFFALSE 9793
// begin for i in damageVehicle_list do
9722: LD_ADDR_VAR 0 5
9726: PUSH
9727: LD_VAR 0 8
9731: PUSH
9732: FOR_IN
9733: IFFALSE 9791
// begin for j in mechanicInside_list do
9735: LD_ADDR_VAR 0 6
9739: PUSH
9740: LD_VAR 0 10
9744: PUSH
9745: FOR_IN
9746: IFFALSE 9787
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9748: LD_VAR 0 8
9752: PPUSH
9753: LD_VAR 0 2
9757: PPUSH
9758: CALL_OW 113
// AddComExitVehicle ( j ) ;
9762: LD_VAR 0 6
9766: PPUSH
9767: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9771: LD_VAR 0 6
9775: PPUSH
9776: LD_VAR 0 5
9780: PPUSH
9781: CALL_OW 189
// end ;
9785: GO 9745
9787: POP
9788: POP
// end ;
9789: GO 9732
9791: POP
9792: POP
// end ; if emptyVehicle_list > 0 then
9793: LD_VAR 0 9
9797: PUSH
9798: LD_INT 0
9800: GREATER
9801: IFFALSE 9851
// begin for i in emptyVehicle_list do
9803: LD_ADDR_VAR 0 5
9807: PUSH
9808: LD_VAR 0 9
9812: PUSH
9813: FOR_IN
9814: IFFALSE 9849
// begin for j in mechanicOutside_list do
9816: LD_ADDR_VAR 0 6
9820: PUSH
9821: LD_VAR 0 11
9825: PUSH
9826: FOR_IN
9827: IFFALSE 9845
// begin AddComEnterUnit ( j , i ) ;
9829: LD_VAR 0 6
9833: PPUSH
9834: LD_VAR 0 5
9838: PPUSH
9839: CALL_OW 180
// end ;
9843: GO 9826
9845: POP
9846: POP
// end ;
9847: GO 9813
9849: POP
9850: POP
// end ; if VehicleOK_list > 0 then
9851: LD_VAR 0 7
9855: PUSH
9856: LD_INT 0
9858: GREATER
9859: IFFALSE 9893
// begin for i in VehicleOK_list do
9861: LD_ADDR_VAR 0 5
9865: PUSH
9866: LD_VAR 0 7
9870: PUSH
9871: FOR_IN
9872: IFFALSE 9891
// ComAgressiveMove ( i , 110 , 29 ) ;
9874: LD_VAR 0 5
9878: PPUSH
9879: LD_INT 110
9881: PPUSH
9882: LD_INT 29
9884: PPUSH
9885: CALL_OW 114
9889: GO 9871
9891: POP
9892: POP
// end ; end ;
9893: LD_VAR 0 4
9897: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9898: LD_INT 0
9900: PPUSH
9901: PPUSH
9902: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9903: LD_VAR 0 1
9907: PPUSH
9908: LD_INT 22
9910: PUSH
9911: LD_VAR 0 2
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 2
9922: PUSH
9923: LD_INT 21
9925: PUSH
9926: LD_INT 2
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: LD_INT 21
9935: PUSH
9936: LD_INT 1
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PPUSH
9952: CALL_OW 70
9956: PUSH
9957: LD_VAR 0 5
9961: GREATER
9962: IFFALSE 10094
// begin for i in defendersList do
9964: LD_ADDR_VAR 0 7
9968: PUSH
9969: LD_VAR 0 3
9973: PUSH
9974: FOR_IN
9975: IFFALSE 10090
// begin AddComExitBuilding ( i ) ;
9977: LD_VAR 0 7
9981: PPUSH
9982: CALL_OW 182
// wait ( 0 0$1 ) ;
9986: LD_INT 35
9988: PPUSH
9989: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9993: LD_ADDR_VAR 0 8
9997: PUSH
9998: LD_VAR 0 1
10002: PPUSH
10003: LD_INT 22
10005: PUSH
10006: LD_VAR 0 2
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 2
10017: PUSH
10018: LD_INT 21
10020: PUSH
10021: LD_INT 2
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PUSH
10028: LD_INT 21
10030: PUSH
10031: LD_INT 1
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: LIST
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PPUSH
10047: CALL_OW 70
10051: PUSH
10052: FOR_IN
10053: IFFALSE 10086
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
10055: LD_VAR 0 7
10059: PPUSH
10060: LD_VAR 0 8
10064: PPUSH
10065: CALL_OW 250
10069: PPUSH
10070: LD_VAR 0 8
10074: PPUSH
10075: CALL_OW 251
10079: PPUSH
10080: CALL_OW 174
10084: GO 10052
10086: POP
10087: POP
// end ;
10088: GO 9974
10090: POP
10091: POP
// end else
10092: GO 10125
// begin for i in defendersList do
10094: LD_ADDR_VAR 0 7
10098: PUSH
10099: LD_VAR 0 3
10103: PUSH
10104: FOR_IN
10105: IFFALSE 10123
// ComEnterUnit ( i , build ) ;
10107: LD_VAR 0 7
10111: PPUSH
10112: LD_VAR 0 4
10116: PPUSH
10117: CALL_OW 120
10121: GO 10104
10123: POP
10124: POP
// end ; end ;
10125: LD_VAR 0 6
10129: RET
// export function RussianTrap ; var i ; begin
10130: LD_INT 0
10132: PPUSH
10133: PPUSH
// if GetSide ( Brian ) = 4 then
10134: LD_EXP 6
10138: PPUSH
10139: CALL_OW 255
10143: PUSH
10144: LD_INT 4
10146: EQUAL
10147: IFFALSE 10170
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10149: LD_EXP 6
10153: PUSH
10154: LD_EXP 7
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PPUSH
10163: LD_INT 0
10165: PPUSH
10166: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10170: LD_ADDR_VAR 0 2
10174: PUSH
10175: LD_INT 22
10177: PUSH
10178: LD_INT 3
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PUSH
10185: LD_INT 21
10187: PUSH
10188: LD_INT 1
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PPUSH
10199: CALL_OW 69
10203: PUSH
10204: FOR_IN
10205: IFFALSE 10315
// begin ComExitBuilding ( i ) ;
10207: LD_VAR 0 2
10211: PPUSH
10212: CALL_OW 122
// wait ( 0 0$1 ) ;
10216: LD_INT 35
10218: PPUSH
10219: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10223: LD_VAR 0 2
10227: PPUSH
10228: LD_INT 120
10230: PPUSH
10231: LD_INT 56
10233: PPUSH
10234: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10238: LD_VAR 0 2
10242: PPUSH
10243: LD_INT 111
10245: PPUSH
10246: LD_INT 37
10248: PPUSH
10249: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10253: LD_INT 33
10255: PPUSH
10256: CALL_OW 255
10260: PUSH
10261: LD_INT 3
10263: EQUAL
10264: PUSH
10265: LD_INT 33
10267: PPUSH
10268: CALL_OW 302
10272: AND
10273: IFFALSE 10289
// begin AddComEnterUnit ( i , arm2 ) ;
10275: LD_VAR 0 2
10279: PPUSH
10280: LD_INT 33
10282: PPUSH
10283: CALL_OW 180
// end else
10287: GO 10313
// begin AddComCrawl ( i ) ;
10289: LD_VAR 0 2
10293: PPUSH
10294: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10298: LD_VAR 0 2
10302: PPUSH
10303: LD_INT 109
10305: PPUSH
10306: LD_INT 30
10308: PPUSH
10309: CALL_OW 174
// end ; end ;
10313: GO 10204
10315: POP
10316: POP
// end ;
10317: LD_VAR 0 1
10321: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10322: LD_INT 0
10324: PPUSH
10325: PPUSH
10326: PPUSH
10327: PPUSH
10328: PPUSH
// nearest_dist = 1000 ;
10329: LD_ADDR_VAR 0 4
10333: PUSH
10334: LD_INT 1000
10336: ST_TO_ADDR
// nearest_un = un ;
10337: LD_ADDR_VAR 0 5
10341: PUSH
10342: LD_VAR 0 1
10346: ST_TO_ADDR
// for sold in units do
10347: LD_ADDR_VAR 0 6
10351: PUSH
10352: LD_VAR 0 2
10356: PUSH
10357: FOR_IN
10358: IFFALSE 10414
// begin dist = GetDistUnits ( un , sold ) ;
10360: LD_ADDR_VAR 0 7
10364: PUSH
10365: LD_VAR 0 1
10369: PPUSH
10370: LD_VAR 0 6
10374: PPUSH
10375: CALL_OW 296
10379: ST_TO_ADDR
// if dist < nearest_dist then
10380: LD_VAR 0 7
10384: PUSH
10385: LD_VAR 0 4
10389: LESS
10390: IFFALSE 10412
// begin nearest_un = sold ;
10392: LD_ADDR_VAR 0 5
10396: PUSH
10397: LD_VAR 0 6
10401: ST_TO_ADDR
// nearest_dist = dist ;
10402: LD_ADDR_VAR 0 4
10406: PUSH
10407: LD_VAR 0 7
10411: ST_TO_ADDR
// end ; end ;
10412: GO 10357
10414: POP
10415: POP
// result := nearest_un ;
10416: LD_ADDR_VAR 0 3
10420: PUSH
10421: LD_VAR 0 5
10425: ST_TO_ADDR
// end ;
10426: LD_VAR 0 3
10430: RET
// export function PrepareDifficulty ; begin
10431: LD_INT 0
10433: PPUSH
// if Difficulty = 1 then
10434: LD_OWVAR 67
10438: PUSH
10439: LD_INT 1
10441: EQUAL
10442: IFFALSE 10505
// begin RemoveUnit ( brw2 ) ;
10444: LD_INT 9
10446: PPUSH
10447: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10451: LD_INT 30
10453: PPUSH
10454: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10458: LD_INT 52
10460: PPUSH
10461: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10465: LD_INT 63
10467: PPUSH
10468: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10472: LD_INT 5
10474: PUSH
10475: LD_INT 4
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PPUSH
10482: LD_INT 60
10484: PPUSH
10485: CALL_OW 240
// RuSoldMinLevel = 0 ;
10489: LD_ADDR_EXP 13
10493: PUSH
10494: LD_INT 0
10496: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10497: LD_ADDR_EXP 14
10501: PUSH
10502: LD_INT 1
10504: ST_TO_ADDR
// end ; if Difficulty = 2 then
10505: LD_OWVAR 67
10509: PUSH
10510: LD_INT 2
10512: EQUAL
10513: IFFALSE 10555
// begin RemoveUnit ( brw4 ) ;
10515: LD_INT 52
10517: PPUSH
10518: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10522: LD_INT 5
10524: PUSH
10525: LD_INT 4
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PPUSH
10532: LD_INT 50
10534: PPUSH
10535: CALL_OW 240
// RuSoldMinLevel = 1 ;
10539: LD_ADDR_EXP 13
10543: PUSH
10544: LD_INT 1
10546: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10547: LD_ADDR_EXP 14
10551: PUSH
10552: LD_INT 2
10554: ST_TO_ADDR
// end ; if Difficulty = 3 then
10555: LD_OWVAR 67
10559: PUSH
10560: LD_INT 3
10562: EQUAL
10563: IFFALSE 10598
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10565: LD_INT 5
10567: PUSH
10568: LD_INT 4
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PPUSH
10575: LD_INT 40
10577: PPUSH
10578: CALL_OW 240
// RuSoldMinLevel = 2 ;
10582: LD_ADDR_EXP 13
10586: PUSH
10587: LD_INT 2
10589: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10590: LD_ADDR_EXP 14
10594: PUSH
10595: LD_INT 3
10597: ST_TO_ADDR
// end ; end ;
10598: LD_VAR 0 1
10602: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10603: LD_INT 0
10605: PPUSH
10606: PPUSH
10607: PPUSH
// tmp = [ ] ;
10608: LD_ADDR_VAR 0 5
10612: PUSH
10613: EMPTY
10614: ST_TO_ADDR
// if not vehicles then
10615: LD_VAR 0 1
10619: NOT
10620: IFFALSE 10624
// exit ;
10622: GO 10741
// for i in vehicles do
10624: LD_ADDR_VAR 0 4
10628: PUSH
10629: LD_VAR 0 1
10633: PUSH
10634: FOR_IN
10635: IFFALSE 10725
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10637: LD_ADDR_VAR 0 5
10641: PUSH
10642: LD_VAR 0 5
10646: PPUSH
10647: LD_INT 1
10649: PPUSH
10650: LD_VAR 0 4
10654: PPUSH
10655: CALL_OW 265
10659: PUSH
10660: LD_VAR 0 4
10664: PPUSH
10665: CALL_OW 262
10669: PUSH
10670: LD_VAR 0 4
10674: PPUSH
10675: CALL_OW 263
10679: PUSH
10680: LD_VAR 0 4
10684: PPUSH
10685: CALL_OW 264
10689: PUSH
10690: LD_VAR 0 4
10694: PPUSH
10695: CALL_OW 261
10699: PUSH
10700: LD_VAR 0 4
10704: PPUSH
10705: CALL_OW 256
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: PPUSH
10718: CALL_OW 2
10722: ST_TO_ADDR
// end ;
10723: GO 10634
10725: POP
10726: POP
// SaveVariable ( tmp , ident ) ;
10727: LD_VAR 0 5
10731: PPUSH
10732: LD_VAR 0 2
10736: PPUSH
10737: CALL_OW 39
// end ; end_of_file
10741: LD_VAR 0 3
10745: RET
// export function PrepareHeroes ; var plive ; begin
10746: LD_INT 0
10748: PPUSH
10749: PPUSH
// uc_side = 1 ;
10750: LD_ADDR_OWVAR 20
10754: PUSH
10755: LD_INT 1
10757: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10758: LD_ADDR_EXP 1
10762: PUSH
10763: LD_STRING 01_JMM
10765: PPUSH
10766: CALL_OW 34
10770: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10771: LD_ADDR_VAR 0 2
10775: PUSH
10776: LD_STRING 01_JMMLifePoints_1
10778: PPUSH
10779: LD_INT 1000
10781: PPUSH
10782: CALL_OW 30
10786: ST_TO_ADDR
// if plive < 250 then
10787: LD_VAR 0 2
10791: PUSH
10792: LD_INT 250
10794: LESS
10795: IFFALSE 10805
// plive := 300 ;
10797: LD_ADDR_VAR 0 2
10801: PUSH
10802: LD_INT 300
10804: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10805: LD_EXP 1
10809: PPUSH
10810: LD_VAR 0 2
10814: PPUSH
10815: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10819: LD_ADDR_EXP 9
10823: PUSH
10824: LD_STRING Powell
10826: PPUSH
10827: CALL_OW 25
10831: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10832: LD_ADDR_EXP 2
10836: PUSH
10837: LD_STRING 01_Bobby
10839: PPUSH
10840: CALL_OW 34
10844: ST_TO_ADDR
// if Bobby then
10845: LD_EXP 2
10849: IFFALSE 10899
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10851: LD_ADDR_VAR 0 2
10855: PUSH
10856: LD_STRING 01_BobbyLifePoints_1
10858: PPUSH
10859: LD_INT 1000
10861: PPUSH
10862: CALL_OW 30
10866: ST_TO_ADDR
// if plive < 250 then
10867: LD_VAR 0 2
10871: PUSH
10872: LD_INT 250
10874: LESS
10875: IFFALSE 10885
// plive := 300 ;
10877: LD_ADDR_VAR 0 2
10881: PUSH
10882: LD_INT 300
10884: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10885: LD_EXP 2
10889: PPUSH
10890: LD_VAR 0 2
10894: PPUSH
10895: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10899: LD_ADDR_EXP 3
10903: PUSH
10904: LD_STRING 01_Cyrus
10906: PPUSH
10907: CALL_OW 34
10911: ST_TO_ADDR
// if Cyrus then
10912: LD_EXP 3
10916: IFFALSE 10966
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10918: LD_ADDR_VAR 0 2
10922: PUSH
10923: LD_STRING 01_CyrusLifePoints_1
10925: PPUSH
10926: LD_INT 1000
10928: PPUSH
10929: CALL_OW 30
10933: ST_TO_ADDR
// if plive < 250 then
10934: LD_VAR 0 2
10938: PUSH
10939: LD_INT 250
10941: LESS
10942: IFFALSE 10952
// plive := 300 ;
10944: LD_ADDR_VAR 0 2
10948: PUSH
10949: LD_INT 300
10951: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10952: LD_EXP 3
10956: PPUSH
10957: LD_VAR 0 2
10961: PPUSH
10962: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
10966: LD_ADDR_EXP 5
10970: PUSH
10971: LD_STRING Khatam
10973: PPUSH
10974: CALL_OW 25
10978: ST_TO_ADDR
// uc_side = 4 ;
10979: LD_ADDR_OWVAR 20
10983: PUSH
10984: LD_INT 4
10986: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10987: LD_ADDR_EXP 4
10991: PUSH
10992: LD_STRING Lisa
10994: PPUSH
10995: CALL_OW 25
10999: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11000: LD_EXP 1
11004: PPUSH
11005: LD_INT 3
11007: PPUSH
11008: LD_INT 0
11010: PPUSH
11011: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11015: LD_EXP 2
11019: PPUSH
11020: LD_INT 3
11022: PPUSH
11023: LD_INT 0
11025: PPUSH
11026: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11030: LD_EXP 3
11034: PPUSH
11035: LD_INT 3
11037: PPUSH
11038: LD_INT 0
11040: PPUSH
11041: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11045: LD_EXP 4
11049: PPUSH
11050: LD_INT 5
11052: PPUSH
11053: LD_INT 0
11055: PPUSH
11056: CALL_OW 49
// ComCrawl ( Lisa ) ;
11060: LD_EXP 4
11064: PPUSH
11065: CALL_OW 137
// end ;
11069: LD_VAR 0 1
11073: RET
// export function PrepareLisSquad ; var i , un ; begin
11074: LD_INT 0
11076: PPUSH
11077: PPUSH
11078: PPUSH
// uc_side = 4 ;
11079: LD_ADDR_OWVAR 20
11083: PUSH
11084: LD_INT 4
11086: ST_TO_ADDR
// uc_nation = 1 ;
11087: LD_ADDR_OWVAR 21
11091: PUSH
11092: LD_INT 1
11094: ST_TO_ADDR
// hc_class := 2 ;
11095: LD_ADDR_OWVAR 28
11099: PUSH
11100: LD_INT 2
11102: ST_TO_ADDR
// hc_sex := sex_male ;
11103: LD_ADDR_OWVAR 27
11107: PUSH
11108: LD_INT 1
11110: ST_TO_ADDR
// hc_gallery :=  ;
11111: LD_ADDR_OWVAR 33
11115: PUSH
11116: LD_STRING 
11118: ST_TO_ADDR
// hc_name :=  ;
11119: LD_ADDR_OWVAR 26
11123: PUSH
11124: LD_STRING 
11126: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11127: LD_ADDR_OWVAR 30
11131: PUSH
11132: LD_INT 0
11134: PUSH
11135: LD_INT 1
11137: PUSH
11138: LD_INT 0
11140: PUSH
11141: LD_INT 0
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11150: LD_ADDR_OWVAR 31
11154: PUSH
11155: LD_INT 1
11157: PUSH
11158: LD_INT 2
11160: PUSH
11161: LD_INT 0
11163: PUSH
11164: LD_INT 0
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: ST_TO_ADDR
// un := CreateHuman ;
11173: LD_ADDR_VAR 0 3
11177: PUSH
11178: CALL_OW 44
11182: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11183: LD_VAR 0 3
11187: PPUSH
11188: LD_INT 6
11190: PPUSH
11191: LD_INT 0
11193: PPUSH
11194: CALL_OW 49
// hc_sex := sex_female ;
11198: LD_ADDR_OWVAR 27
11202: PUSH
11203: LD_INT 2
11205: ST_TO_ADDR
// hc_gallery :=  ;
11206: LD_ADDR_OWVAR 33
11210: PUSH
11211: LD_STRING 
11213: ST_TO_ADDR
// hc_name :=  ;
11214: LD_ADDR_OWVAR 26
11218: PUSH
11219: LD_STRING 
11221: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11222: LD_ADDR_OWVAR 30
11226: PUSH
11227: LD_INT 0
11229: PUSH
11230: LD_INT 0
11232: PUSH
11233: LD_INT 0
11235: PUSH
11236: LD_INT 1
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11245: LD_ADDR_OWVAR 31
11249: PUSH
11250: LD_INT 0
11252: PUSH
11253: LD_INT 1
11255: PUSH
11256: LD_INT 0
11258: PUSH
11259: LD_INT 1
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: ST_TO_ADDR
// un := CreateHuman ;
11268: LD_ADDR_VAR 0 3
11272: PUSH
11273: CALL_OW 44
11277: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11278: LD_VAR 0 3
11282: PPUSH
11283: LD_INT 6
11285: PPUSH
11286: LD_INT 0
11288: PPUSH
11289: CALL_OW 49
// if not Bobby and not Cyrus then
11293: LD_EXP 2
11297: NOT
11298: PUSH
11299: LD_EXP 3
11303: NOT
11304: AND
11305: IFFALSE 11410
// begin hc_class := 1 ;
11307: LD_ADDR_OWVAR 28
11311: PUSH
11312: LD_INT 1
11314: ST_TO_ADDR
// hc_sex := sex_male ;
11315: LD_ADDR_OWVAR 27
11319: PUSH
11320: LD_INT 1
11322: ST_TO_ADDR
// hc_gallery :=  ;
11323: LD_ADDR_OWVAR 33
11327: PUSH
11328: LD_STRING 
11330: ST_TO_ADDR
// hc_name :=  ;
11331: LD_ADDR_OWVAR 26
11335: PUSH
11336: LD_STRING 
11338: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11339: LD_ADDR_OWVAR 30
11343: PUSH
11344: LD_INT 2
11346: PUSH
11347: LD_INT 3
11349: PUSH
11350: LD_INT 1
11352: PUSH
11353: LD_INT 0
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11362: LD_ADDR_OWVAR 31
11366: PUSH
11367: LD_INT 2
11369: PUSH
11370: LD_INT 3
11372: PUSH
11373: LD_INT 1
11375: PUSH
11376: LD_INT 0
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: ST_TO_ADDR
// un := CreateHuman ;
11385: LD_ADDR_VAR 0 3
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 31
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// end ; InitHc ;
11410: CALL_OW 19
// end ;
11414: LD_VAR 0 1
11418: RET
// export function PrepareOtherAmericans ; begin
11419: LD_INT 0
11421: PPUSH
// uc_side = 4 ;
11422: LD_ADDR_OWVAR 20
11426: PUSH
11427: LD_INT 4
11429: ST_TO_ADDR
// uc_nation = 1 ;
11430: LD_ADDR_OWVAR 21
11434: PUSH
11435: LD_INT 1
11437: ST_TO_ADDR
// hc_gallery =  ;
11438: LD_ADDR_OWVAR 33
11442: PUSH
11443: LD_STRING 
11445: ST_TO_ADDR
// hc_name = Tom Garvin ;
11446: LD_ADDR_OWVAR 26
11450: PUSH
11451: LD_STRING Tom Garvin
11453: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11454: LD_INT 1
11456: PPUSH
11457: LD_INT 1
11459: PPUSH
11460: LD_INT 1
11462: PPUSH
11463: LD_INT 2
11465: PPUSH
11466: CALL_OW 12
11470: PPUSH
11471: CALL_OW 380
// Brian = CreateHuman ;
11475: LD_ADDR_EXP 6
11479: PUSH
11480: CALL_OW 44
11484: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11485: LD_EXP 6
11489: PPUSH
11490: LD_INT 10
11492: PPUSH
11493: LD_INT 0
11495: PPUSH
11496: CALL_OW 49
// hc_name = Jerry White ;
11500: LD_ADDR_OWVAR 26
11504: PUSH
11505: LD_STRING Jerry White
11507: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11508: LD_INT 1
11510: PPUSH
11511: LD_INT 3
11513: PPUSH
11514: LD_INT 1
11516: PPUSH
11517: LD_INT 2
11519: PPUSH
11520: CALL_OW 12
11524: PPUSH
11525: CALL_OW 380
// Jerry = CreateHuman ;
11529: LD_ADDR_EXP 7
11533: PUSH
11534: CALL_OW 44
11538: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11539: LD_EXP 7
11543: PPUSH
11544: LD_INT 10
11546: PPUSH
11547: LD_INT 0
11549: PPUSH
11550: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11554: LD_EXP 6
11558: PUSH
11559: LD_EXP 7
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PPUSH
11568: CALL_OW 140
// end ;
11572: LD_VAR 0 1
11576: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11577: LD_INT 0
11579: PPUSH
11580: PPUSH
11581: PPUSH
// for i = 1 to 6 do
11582: LD_ADDR_VAR 0 2
11586: PUSH
11587: DOUBLE
11588: LD_INT 1
11590: DEC
11591: ST_TO_ADDR
11592: LD_INT 6
11594: PUSH
11595: FOR_TO
11596: IFFALSE 11690
// begin uc_side = 4 ;
11598: LD_ADDR_OWVAR 20
11602: PUSH
11603: LD_INT 4
11605: ST_TO_ADDR
// uc_nation = 1 ;
11606: LD_ADDR_OWVAR 21
11610: PUSH
11611: LD_INT 1
11613: ST_TO_ADDR
// hc_gallery =  ;
11614: LD_ADDR_OWVAR 33
11618: PUSH
11619: LD_STRING 
11621: ST_TO_ADDR
// hc_name =  ;
11622: LD_ADDR_OWVAR 26
11626: PUSH
11627: LD_STRING 
11629: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11630: LD_INT 0
11632: PPUSH
11633: LD_INT 1
11635: PPUSH
11636: LD_INT 4
11638: PPUSH
11639: CALL_OW 12
11643: PPUSH
11644: LD_INT 1
11646: PPUSH
11647: CALL_OW 380
// un = CreateHuman ;
11651: LD_ADDR_VAR 0 3
11655: PUSH
11656: CALL_OW 44
11660: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11661: LD_VAR 0 3
11665: PPUSH
11666: LD_INT 16
11668: PPUSH
11669: LD_INT 0
11671: PPUSH
11672: CALL_OW 49
// SetLives ( un , 1 ) ;
11676: LD_VAR 0 3
11680: PPUSH
11681: LD_INT 1
11683: PPUSH
11684: CALL_OW 234
// end ;
11688: GO 11595
11690: POP
11691: POP
// DyingSold = CreateHuman ;
11692: LD_ADDR_EXP 34
11696: PUSH
11697: CALL_OW 44
11701: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11702: LD_EXP 34
11706: PPUSH
11707: LD_INT 16
11709: PPUSH
11710: LD_INT 0
11712: PPUSH
11713: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11717: LD_EXP 34
11721: PPUSH
11722: LD_INT 250
11724: PPUSH
11725: CALL_OW 234
// end ; end_of_file
11729: LD_VAR 0 1
11733: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11734: LD_INT 0
11736: PPUSH
11737: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11738: LD_ADDR_VAR 0 2
11742: PUSH
11743: LD_INT 22
11745: PUSH
11746: LD_INT 1
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 23
11755: PUSH
11756: LD_INT 1
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: LD_INT 25
11765: PUSH
11766: LD_INT 2
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 50
11775: PUSH
11776: EMPTY
11777: LIST
11778: PUSH
11779: LD_INT 56
11781: PUSH
11782: EMPTY
11783: LIST
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: PPUSH
11792: CALL_OW 69
11796: PUSH
11797: LD_EXP 1
11801: PUSH
11802: EMPTY
11803: LIST
11804: DIFF
11805: ST_TO_ADDR
// uc_side = 6 ;
11806: LD_ADDR_OWVAR 20
11810: PUSH
11811: LD_INT 6
11813: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11814: LD_ADDR_EXP 8
11818: PUSH
11819: LD_STRING Mikhail
11821: PPUSH
11822: CALL_OW 25
11826: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11827: LD_EXP 8
11831: PPUSH
11832: LD_VAR 0 2
11836: PUSH
11837: LD_INT 1
11839: ARRAY
11840: PPUSH
11841: CALL_OW 250
11845: PPUSH
11846: LD_VAR 0 2
11850: PUSH
11851: LD_INT 1
11853: ARRAY
11854: PPUSH
11855: CALL_OW 251
11859: PPUSH
11860: LD_INT 5
11862: PPUSH
11863: LD_INT 1
11865: PPUSH
11866: CALL_OW 50
// end ;
11870: LD_VAR 0 1
11874: RET
// export function PrepareRussianCommander ; begin
11875: LD_INT 0
11877: PPUSH
// uc_side = 3 ;
11878: LD_ADDR_OWVAR 20
11882: PUSH
11883: LD_INT 3
11885: ST_TO_ADDR
// uc_nation = 3 ;
11886: LD_ADDR_OWVAR 21
11890: PUSH
11891: LD_INT 3
11893: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11894: LD_ADDR_EXP 19
11898: PUSH
11899: LD_STRING Natasza
11901: PPUSH
11902: CALL_OW 25
11906: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11907: LD_EXP 19
11911: PPUSH
11912: LD_INT 24
11914: PPUSH
11915: LD_INT 0
11917: PPUSH
11918: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11922: LD_EXP 19
11926: PPUSH
11927: LD_INT 56
11929: PPUSH
11930: LD_INT 16
11932: PPUSH
11933: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11937: LD_ADDR_EXP 24
11941: PUSH
11942: LD_EXP 24
11946: PUSH
11947: LD_EXP 19
11951: ADD
11952: ST_TO_ADDR
// end ;
11953: LD_VAR 0 1
11957: RET
// export function PrepareSouthBase ; var i , un ; begin
11958: LD_INT 0
11960: PPUSH
11961: PPUSH
11962: PPUSH
// for i = 1 to 2 do
11963: LD_ADDR_VAR 0 2
11967: PUSH
11968: DOUBLE
11969: LD_INT 1
11971: DEC
11972: ST_TO_ADDR
11973: LD_INT 2
11975: PUSH
11976: FOR_TO
11977: IFFALSE 12086
// begin uc_side = 3 ;
11979: LD_ADDR_OWVAR 20
11983: PUSH
11984: LD_INT 3
11986: ST_TO_ADDR
// uc_nation = 3 ;
11987: LD_ADDR_OWVAR 21
11991: PUSH
11992: LD_INT 3
11994: ST_TO_ADDR
// hc_gallery =  ;
11995: LD_ADDR_OWVAR 33
11999: PUSH
12000: LD_STRING 
12002: ST_TO_ADDR
// hc_name =  ;
12003: LD_ADDR_OWVAR 26
12007: PUSH
12008: LD_STRING 
12010: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12011: LD_INT 1
12013: PPUSH
12014: LD_INT 1
12016: PPUSH
12017: LD_EXP 13
12021: PPUSH
12022: LD_EXP 14
12026: PPUSH
12027: CALL_OW 12
12031: PPUSH
12032: CALL_OW 380
// hc_importance = 0 ;
12036: LD_ADDR_OWVAR 32
12040: PUSH
12041: LD_INT 0
12043: ST_TO_ADDR
// un = CreateHuman ;
12044: LD_ADDR_VAR 0 3
12048: PUSH
12049: CALL_OW 44
12053: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12054: LD_VAR 0 3
12058: PPUSH
12059: LD_INT 11
12061: PPUSH
12062: LD_INT 0
12064: PPUSH
12065: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12069: LD_VAR 0 3
12073: PPUSH
12074: LD_INT 111
12076: PPUSH
12077: LD_INT 38
12079: PPUSH
12080: CALL_OW 118
// end ;
12084: GO 11976
12086: POP
12087: POP
// for i = 1 to Difficulty do
12088: LD_ADDR_VAR 0 2
12092: PUSH
12093: DOUBLE
12094: LD_INT 1
12096: DEC
12097: ST_TO_ADDR
12098: LD_OWVAR 67
12102: PUSH
12103: FOR_TO
12104: IFFALSE 12187
// begin uc_side = 3 ;
12106: LD_ADDR_OWVAR 20
12110: PUSH
12111: LD_INT 3
12113: ST_TO_ADDR
// uc_nation = 3 ;
12114: LD_ADDR_OWVAR 21
12118: PUSH
12119: LD_INT 3
12121: ST_TO_ADDR
// hc_gallery =  ;
12122: LD_ADDR_OWVAR 33
12126: PUSH
12127: LD_STRING 
12129: ST_TO_ADDR
// hc_name =  ;
12130: LD_ADDR_OWVAR 26
12134: PUSH
12135: LD_STRING 
12137: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12138: LD_INT 0
12140: PPUSH
12141: LD_INT 3
12143: PPUSH
12144: LD_EXP 13
12148: PPUSH
12149: LD_EXP 14
12153: PPUSH
12154: CALL_OW 12
12158: PPUSH
12159: CALL_OW 380
// un = CreateHuman ;
12163: LD_ADDR_VAR 0 3
12167: PUSH
12168: CALL_OW 44
12172: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12173: LD_VAR 0 3
12177: PPUSH
12178: LD_INT 10
12180: PPUSH
12181: CALL_OW 52
// end ;
12185: GO 12103
12187: POP
12188: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12189: LD_INT 3
12191: PPUSH
12192: LD_INT 3
12194: PPUSH
12195: LD_INT 33
12197: PPUSH
12198: LD_EXP 13
12202: PPUSH
12203: LD_EXP 14
12207: PPUSH
12208: CALL_OW 12
12212: PPUSH
12213: LD_INT 1
12215: PPUSH
12216: LD_INT 1
12218: PUSH
12219: LD_INT 1
12221: PPUSH
12222: LD_INT 2
12224: PPUSH
12225: CALL_OW 12
12229: PUSH
12230: LD_INT 1
12232: PPUSH
12233: LD_INT 2
12235: PPUSH
12236: CALL_OW 12
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: LIST
12245: PUSH
12246: LD_OWVAR 67
12250: ARRAY
12251: PPUSH
12252: CALL 8657 0 6
// for i in UnitsInside ( arm2 ) do
12256: LD_ADDR_VAR 0 2
12260: PUSH
12261: LD_INT 33
12263: PPUSH
12264: CALL_OW 313
12268: PUSH
12269: FOR_IN
12270: IFFALSE 12290
// southBaseDefenders = southBaseDefenders ^ i ;
12272: LD_ADDR_EXP 25
12276: PUSH
12277: LD_EXP 25
12281: PUSH
12282: LD_VAR 0 2
12286: ADD
12287: ST_TO_ADDR
12288: GO 12269
12290: POP
12291: POP
// end ;
12292: LD_VAR 0 1
12296: RET
// export function PrepareNorthBase ; var i , un ; begin
12297: LD_INT 0
12299: PPUSH
12300: PPUSH
12301: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12302: LD_ADDR_VAR 0 2
12306: PUSH
12307: DOUBLE
12308: LD_INT 1
12310: DEC
12311: ST_TO_ADDR
12312: LD_INT 1
12314: PPUSH
12315: LD_INT 2
12317: PPUSH
12318: CALL_OW 12
12322: PUSH
12323: LD_INT 2
12325: PPUSH
12326: LD_INT 3
12328: PPUSH
12329: CALL_OW 12
12333: PUSH
12334: LD_INT 3
12336: PPUSH
12337: LD_INT 4
12339: PPUSH
12340: CALL_OW 12
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: PUSH
12350: LD_OWVAR 67
12354: ARRAY
12355: PUSH
12356: FOR_TO
12357: IFFALSE 12443
// begin uc_side = 3 ;
12359: LD_ADDR_OWVAR 20
12363: PUSH
12364: LD_INT 3
12366: ST_TO_ADDR
// uc_nation = 3 ;
12367: LD_ADDR_OWVAR 21
12371: PUSH
12372: LD_INT 3
12374: ST_TO_ADDR
// hc_gallery =  ;
12375: LD_ADDR_OWVAR 33
12379: PUSH
12380: LD_STRING 
12382: ST_TO_ADDR
// hc_name =  ;
12383: LD_ADDR_OWVAR 26
12387: PUSH
12388: LD_STRING 
12390: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12391: LD_INT 0
12393: PPUSH
12394: LD_INT 1
12396: PPUSH
12397: LD_EXP 13
12401: PPUSH
12402: LD_EXP 14
12406: PPUSH
12407: CALL_OW 12
12411: PPUSH
12412: CALL_OW 380
// un = CreateHuman ;
12416: LD_ADDR_VAR 0 3
12420: PUSH
12421: CALL_OW 44
12425: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12426: LD_VAR 0 3
12430: PPUSH
12431: LD_INT 14
12433: PPUSH
12434: LD_INT 0
12436: PPUSH
12437: CALL_OW 49
// end ;
12441: GO 12356
12443: POP
12444: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12445: LD_INT 3
12447: PPUSH
12448: LD_INT 3
12450: PPUSH
12451: LD_INT 2
12453: PPUSH
12454: LD_EXP 13
12458: PPUSH
12459: LD_EXP 14
12463: PPUSH
12464: CALL_OW 12
12468: PPUSH
12469: LD_INT 1
12471: PPUSH
12472: LD_INT 1
12474: PPUSH
12475: LD_INT 2
12477: PPUSH
12478: CALL_OW 12
12482: PUSH
12483: LD_INT 1
12485: PPUSH
12486: LD_INT 3
12488: PPUSH
12489: CALL_OW 12
12493: PUSH
12494: LD_INT 1
12496: PPUSH
12497: LD_INT 3
12499: PPUSH
12500: CALL_OW 12
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: PUSH
12510: LD_OWVAR 67
12514: ARRAY
12515: PPUSH
12516: CALL 8657 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12520: LD_INT 3
12522: PPUSH
12523: LD_INT 3
12525: PPUSH
12526: LD_INT 23
12528: PPUSH
12529: LD_EXP 13
12533: PPUSH
12534: LD_EXP 14
12538: PPUSH
12539: CALL_OW 12
12543: PPUSH
12544: LD_INT 4
12546: PPUSH
12547: LD_INT 0
12549: PUSH
12550: LD_INT 1
12552: PUSH
12553: LD_INT 2
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: LIST
12560: PUSH
12561: LD_OWVAR 67
12565: ARRAY
12566: PPUSH
12567: CALL 8657 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12571: LD_INT 3
12573: PPUSH
12574: LD_INT 3
12576: PPUSH
12577: LD_INT 1
12579: PPUSH
12580: LD_EXP 13
12584: PPUSH
12585: LD_EXP 14
12589: PPUSH
12590: CALL_OW 12
12594: PPUSH
12595: LD_INT 2
12597: PPUSH
12598: LD_INT 1
12600: PUSH
12601: LD_INT 2
12603: PUSH
12604: LD_INT 2
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: PUSH
12612: LD_OWVAR 67
12616: ARRAY
12617: PPUSH
12618: CALL 8657 0 6
// for i in UnitsInside ( arm1 ) do
12622: LD_ADDR_VAR 0 2
12626: PUSH
12627: LD_INT 2
12629: PPUSH
12630: CALL_OW 313
12634: PUSH
12635: FOR_IN
12636: IFFALSE 12656
// northBaseDefenders = northBaseDefenders ^ i ;
12638: LD_ADDR_EXP 24
12642: PUSH
12643: LD_EXP 24
12647: PUSH
12648: LD_VAR 0 2
12652: ADD
12653: ST_TO_ADDR
12654: GO 12635
12656: POP
12657: POP
// end ;
12658: LD_VAR 0 1
12662: RET
// export function PrepareOtherRussians ; var i , un ; begin
12663: LD_INT 0
12665: PPUSH
12666: PPUSH
12667: PPUSH
// for i = 1 to 2 do
12668: LD_ADDR_VAR 0 2
12672: PUSH
12673: DOUBLE
12674: LD_INT 1
12676: DEC
12677: ST_TO_ADDR
12678: LD_INT 2
12680: PUSH
12681: FOR_TO
12682: IFFALSE 12783
// begin uc_side = 3 ;
12684: LD_ADDR_OWVAR 20
12688: PUSH
12689: LD_INT 3
12691: ST_TO_ADDR
// uc_nation = 3 ;
12692: LD_ADDR_OWVAR 21
12696: PUSH
12697: LD_INT 3
12699: ST_TO_ADDR
// hc_gallery =  ;
12700: LD_ADDR_OWVAR 33
12704: PUSH
12705: LD_STRING 
12707: ST_TO_ADDR
// hc_name =  ;
12708: LD_ADDR_OWVAR 26
12712: PUSH
12713: LD_STRING 
12715: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12716: LD_INT 0
12718: PPUSH
12719: LD_INT 1
12721: PPUSH
12722: LD_EXP 13
12726: PPUSH
12727: LD_EXP 14
12731: PPUSH
12732: CALL_OW 12
12736: PPUSH
12737: CALL_OW 380
// un = CreateHuman ;
12741: LD_ADDR_VAR 0 3
12745: PUSH
12746: CALL_OW 44
12750: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12751: LD_VAR 0 3
12755: PPUSH
12756: LD_INT 9
12758: PPUSH
12759: LD_INT 0
12761: PPUSH
12762: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12766: LD_VAR 0 3
12770: PPUSH
12771: LD_INT 80
12773: PPUSH
12774: LD_INT 73
12776: PPUSH
12777: CALL_OW 118
// end ;
12781: GO 12681
12783: POP
12784: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12785: LD_ADDR_VAR 0 2
12789: PUSH
12790: LD_INT 22
12792: PUSH
12793: LD_INT 3
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: LD_INT 30
12802: PUSH
12803: LD_INT 31
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PPUSH
12814: CALL_OW 69
12818: PUSH
12819: FOR_IN
12820: IFFALSE 12848
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12822: LD_EXP 13
12826: PPUSH
12827: LD_EXP 14
12831: PPUSH
12832: CALL_OW 12
12836: PPUSH
12837: LD_VAR 0 2
12841: PPUSH
12842: CALL 8767 0 2
12846: GO 12819
12848: POP
12849: POP
// end ;
12850: LD_VAR 0 1
12854: RET
// export function PrepareCargoBays ; begin
12855: LD_INT 0
12857: PPUSH
// uc_side = 3 ;
12858: LD_ADDR_OWVAR 20
12862: PUSH
12863: LD_INT 3
12865: ST_TO_ADDR
// uc_nation = 3 ;
12866: LD_ADDR_OWVAR 21
12870: PUSH
12871: LD_INT 3
12873: ST_TO_ADDR
// vc_engine = 1 ;
12874: LD_ADDR_OWVAR 39
12878: PUSH
12879: LD_INT 1
12881: ST_TO_ADDR
// vc_control = 1 ;
12882: LD_ADDR_OWVAR 38
12886: PUSH
12887: LD_INT 1
12889: ST_TO_ADDR
// vc_weapon = 51 ;
12890: LD_ADDR_OWVAR 40
12894: PUSH
12895: LD_INT 51
12897: ST_TO_ADDR
// vc_chassis = 22 ;
12898: LD_ADDR_OWVAR 37
12902: PUSH
12903: LD_INT 22
12905: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12906: LD_ADDR_EXP 15
12910: PUSH
12911: CALL_OW 45
12915: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12916: LD_ADDR_EXP 16
12920: PUSH
12921: CALL_OW 45
12925: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12926: LD_EXP 15
12930: PPUSH
12931: LD_INT 13
12933: PPUSH
12934: LD_INT 0
12936: PPUSH
12937: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12941: LD_EXP 16
12945: PPUSH
12946: LD_INT 13
12948: PPUSH
12949: LD_INT 0
12951: PPUSH
12952: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12956: LD_EXP 15
12960: PPUSH
12961: LD_INT 2
12963: PPUSH
12964: LD_INT 70
12966: PUSH
12967: LD_INT 50
12969: PUSH
12970: LD_INT 30
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: LIST
12977: PUSH
12978: LD_OWVAR 67
12982: ARRAY
12983: PPUSH
12984: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12988: LD_EXP 16
12992: PPUSH
12993: LD_INT 2
12995: PPUSH
12996: LD_INT 70
12998: PUSH
12999: LD_INT 50
13001: PUSH
13002: LD_INT 30
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: LIST
13009: PUSH
13010: LD_OWVAR 67
13014: ARRAY
13015: PPUSH
13016: CALL_OW 291
// hc_gallery =  ;
13020: LD_ADDR_OWVAR 33
13024: PUSH
13025: LD_STRING 
13027: ST_TO_ADDR
// hc_name =  ;
13028: LD_ADDR_OWVAR 26
13032: PUSH
13033: LD_STRING 
13035: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13036: LD_INT 1
13038: PPUSH
13039: LD_INT 3
13041: PPUSH
13042: LD_INT 1
13044: PPUSH
13045: LD_INT 2
13047: PPUSH
13048: CALL_OW 12
13052: PPUSH
13053: CALL_OW 380
// driver1 = CreateHuman ;
13057: LD_ADDR_EXP 17
13061: PUSH
13062: CALL_OW 44
13066: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13067: LD_EXP 17
13071: PPUSH
13072: LD_EXP 15
13076: PPUSH
13077: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13081: LD_ADDR_OWVAR 26
13085: PUSH
13086: LD_STRING Nikolai Andreyev
13088: ST_TO_ADDR
// driver2 = CreateHuman ;
13089: LD_ADDR_EXP 18
13093: PUSH
13094: CALL_OW 44
13098: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13099: LD_EXP 18
13103: PPUSH
13104: LD_EXP 16
13108: PPUSH
13109: CALL_OW 52
// end ;
13113: LD_VAR 0 1
13117: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
13118: LD_INT 0
13120: PPUSH
13121: PPUSH
13122: PPUSH
13123: PPUSH
13124: PPUSH
13125: PPUSH
13126: PPUSH
// uc_side = 3 ;
13127: LD_ADDR_OWVAR 20
13131: PUSH
13132: LD_INT 3
13134: ST_TO_ADDR
// uc_nation = 3 ;
13135: LD_ADDR_OWVAR 21
13139: PUSH
13140: LD_INT 3
13142: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13143: LD_ADDR_VAR 0 4
13147: PUSH
13148: DOUBLE
13149: LD_INT 1
13151: DEC
13152: ST_TO_ADDR
13153: LD_VAR 0 1
13157: PUSH
13158: LD_INT 1
13160: PPUSH
13161: LD_INT 3
13163: PPUSH
13164: CALL_OW 12
13168: PLUS
13169: PUSH
13170: FOR_TO
13171: IFFALSE 13348
// begin vc_engine = 1 ;
13173: LD_ADDR_OWVAR 39
13177: PUSH
13178: LD_INT 1
13180: ST_TO_ADDR
// vc_control = 1 ;
13181: LD_ADDR_OWVAR 38
13185: PUSH
13186: LD_INT 1
13188: ST_TO_ADDR
// vc_weapon = 42 ;
13189: LD_ADDR_OWVAR 40
13193: PUSH
13194: LD_INT 42
13196: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13197: LD_ADDR_OWVAR 37
13201: PUSH
13202: LD_INT 21
13204: PUSH
13205: LD_INT 22
13207: PUSH
13208: LD_INT 22
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: LIST
13215: PUSH
13216: LD_OWVAR 67
13220: ARRAY
13221: ST_TO_ADDR
// veh = CreateVehicle ;
13222: LD_ADDR_VAR 0 5
13226: PUSH
13227: CALL_OW 45
13231: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13232: LD_VAR 0 5
13236: PPUSH
13237: LD_VAR 0 2
13241: PPUSH
13242: LD_INT 0
13244: PPUSH
13245: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13249: LD_ADDR_EXP 26
13253: PUSH
13254: LD_EXP 26
13258: PUSH
13259: LD_VAR 0 5
13263: ADD
13264: ST_TO_ADDR
// hc_gallery =  ;
13265: LD_ADDR_OWVAR 33
13269: PUSH
13270: LD_STRING 
13272: ST_TO_ADDR
// hc_name =  ;
13273: LD_ADDR_OWVAR 26
13277: PUSH
13278: LD_STRING 
13280: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13281: LD_INT 0
13283: PPUSH
13284: LD_INT 3
13286: PPUSH
13287: LD_EXP 13
13291: PPUSH
13292: LD_EXP 14
13296: PPUSH
13297: CALL_OW 12
13301: PPUSH
13302: CALL_OW 380
// un = CreateHuman ;
13306: LD_ADDR_VAR 0 6
13310: PUSH
13311: CALL_OW 44
13315: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13316: LD_VAR 0 6
13320: PPUSH
13321: LD_VAR 0 5
13325: PPUSH
13326: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13330: LD_ADDR_EXP 26
13334: PUSH
13335: LD_EXP 26
13339: PUSH
13340: LD_VAR 0 6
13344: ADD
13345: ST_TO_ADDR
// end ;
13346: GO 13170
13348: POP
13349: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13350: LD_INT 0
13352: PPUSH
13353: LD_INT 2
13355: PPUSH
13356: LD_EXP 13
13360: PPUSH
13361: LD_EXP 14
13365: PPUSH
13366: CALL_OW 12
13370: PPUSH
13371: CALL_OW 380
// un = CreateHuman ;
13375: LD_ADDR_VAR 0 6
13379: PUSH
13380: CALL_OW 44
13384: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13385: LD_ADDR_VAR 0 4
13389: PUSH
13390: DOUBLE
13391: LD_INT 1
13393: DEC
13394: ST_TO_ADDR
13395: LD_VAR 0 1
13399: PUSH
13400: LD_INT 2
13402: PUSH
13403: LD_INT 2
13405: MUL
13406: PLUS
13407: PUSH
13408: FOR_TO
13409: IFFALSE 13497
// begin hc_gallery =  ;
13411: LD_ADDR_OWVAR 33
13415: PUSH
13416: LD_STRING 
13418: ST_TO_ADDR
// hc_name =  ;
13419: LD_ADDR_OWVAR 26
13423: PUSH
13424: LD_STRING 
13426: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13427: LD_INT 1
13429: PPUSH
13430: LD_INT 1
13432: PPUSH
13433: LD_EXP 13
13437: PPUSH
13438: LD_EXP 14
13442: PPUSH
13443: CALL_OW 12
13447: PPUSH
13448: CALL_OW 380
// un = CreateHuman ;
13452: LD_ADDR_VAR 0 6
13456: PUSH
13457: CALL_OW 44
13461: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13462: LD_VAR 0 6
13466: PPUSH
13467: LD_VAR 0 2
13471: PPUSH
13472: LD_INT 0
13474: PPUSH
13475: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13479: LD_ADDR_EXP 26
13483: PUSH
13484: LD_EXP 26
13488: PUSH
13489: LD_VAR 0 6
13493: ADD
13494: ST_TO_ADDR
// end ;
13495: GO 13408
13497: POP
13498: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13499: LD_ADDR_VAR 0 7
13503: PUSH
13504: LD_INT 26
13506: PPUSH
13507: LD_INT 22
13509: PUSH
13510: LD_INT 3
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 21
13519: PUSH
13520: LD_INT 1
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: PUSH
13527: LD_INT 26
13529: PUSH
13530: LD_INT 1
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: LIST
13541: PPUSH
13542: CALL_OW 70
13546: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13547: LD_VAR 0 7
13551: PUSH
13552: LD_INT 1
13554: ARRAY
13555: PPUSH
13556: LD_STRING D9-Rus3-1
13558: PPUSH
13559: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13563: LD_VAR 0 7
13567: PUSH
13568: LD_INT 2
13570: ARRAY
13571: PPUSH
13572: LD_STRING D9-Russ-1
13574: PPUSH
13575: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13579: LD_INT 35
13581: PPUSH
13582: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13586: LD_ADDR_VAR 0 4
13590: PUSH
13591: LD_INT 26
13593: PPUSH
13594: LD_INT 22
13596: PUSH
13597: LD_INT 3
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: EMPTY
13605: LIST
13606: PPUSH
13607: CALL_OW 70
13611: PUSH
13612: FOR_IN
13613: IFFALSE 13785
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13615: LD_ADDR_VAR 0 8
13619: PUSH
13620: LD_INT 22
13622: PUSH
13623: LD_INT 1
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PPUSH
13630: CALL_OW 69
13634: PPUSH
13635: LD_VAR 0 4
13639: PPUSH
13640: CALL_OW 74
13644: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13645: LD_ADDR_VAR 0 9
13649: PUSH
13650: LD_INT 22
13652: PUSH
13653: LD_INT 1
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 2
13662: PUSH
13663: LD_INT 59
13665: PUSH
13666: EMPTY
13667: LIST
13668: PUSH
13669: LD_INT 21
13671: PUSH
13672: LD_INT 1
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: PUSH
13679: LD_INT 21
13681: PUSH
13682: LD_INT 2
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: EMPTY
13700: LIST
13701: PPUSH
13702: CALL_OW 69
13706: PPUSH
13707: LD_VAR 0 4
13711: PPUSH
13712: CALL_OW 74
13716: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13717: LD_VAR 0 4
13721: PPUSH
13722: LD_VAR 0 8
13726: PPUSH
13727: CALL_OW 296
13731: PUSH
13732: LD_INT 8
13734: PLUS
13735: PUSH
13736: LD_VAR 0 4
13740: PPUSH
13741: LD_VAR 0 9
13745: PPUSH
13746: CALL_OW 296
13750: LESS
13751: IFFALSE 13769
// begin ComAttackUnit ( i , target1 ) ;
13753: LD_VAR 0 4
13757: PPUSH
13758: LD_VAR 0 8
13762: PPUSH
13763: CALL_OW 115
// end else
13767: GO 13783
// begin ComAttackUnit ( i , target2 ) ;
13769: LD_VAR 0 4
13773: PPUSH
13774: LD_VAR 0 9
13778: PPUSH
13779: CALL_OW 115
// end ; end ;
13783: GO 13612
13785: POP
13786: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13787: LD_INT 26
13789: PPUSH
13790: LD_INT 22
13792: PUSH
13793: LD_INT 3
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: LD_INT 2
13802: PUSH
13803: LD_INT 21
13805: PUSH
13806: LD_INT 1
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: LD_INT 21
13815: PUSH
13816: LD_INT 2
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: LD_INT 59
13825: PUSH
13826: EMPTY
13827: LIST
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PPUSH
13839: CALL_OW 70
13843: PUSH
13844: LD_INT 0
13846: EQUAL
13847: IFFALSE 13579
// end ; end_of_file
13849: LD_VAR 0 3
13853: RET
// every 0 0$1 do
13854: GO 13856
13856: DISABLE
// begin enable ;
13857: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13858: LD_INT 3
13860: PPUSH
13861: LD_INT 1
13863: PPUSH
13864: LD_INT 22
13866: PPUSH
13867: CALL 8903 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13871: LD_INT 3
13873: PPUSH
13874: LD_INT 20
13876: PPUSH
13877: LD_INT 22
13879: PPUSH
13880: LD_INT 23
13882: PPUSH
13883: CALL 9149 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13887: LD_INT 3
13889: PPUSH
13890: LD_INT 21
13892: PPUSH
13893: LD_INT 23
13895: PPUSH
13896: CALL 9426 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13900: LD_INT 22
13902: PPUSH
13903: LD_INT 1
13905: PPUSH
13906: LD_EXP 24
13910: PPUSH
13911: LD_INT 2
13913: PPUSH
13914: LD_INT 3
13916: PPUSH
13917: CALL 9898 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13921: LD_INT 23
13923: PPUSH
13924: LD_INT 1
13926: PPUSH
13927: LD_EXP 25
13931: PPUSH
13932: LD_INT 33
13934: PPUSH
13935: LD_INT 1
13937: PPUSH
13938: CALL 9898 0 5
// end ; end_of_file
13942: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13943: LD_VAR 0 1
13947: PPUSH
13948: CALL_OW 255
13952: PUSH
13953: LD_INT 1
13955: EQUAL
13956: PUSH
13957: LD_VAR 0 1
13961: PPUSH
13962: CALL_OW 247
13966: PUSH
13967: LD_INT 1
13969: EQUAL
13970: AND
13971: IFFALSE 13987
// deadsCounter = deadsCounter + 1 ;
13973: LD_ADDR_EXP 31
13977: PUSH
13978: LD_EXP 31
13982: PUSH
13983: LD_INT 1
13985: PLUS
13986: ST_TO_ADDR
// end ;
13987: PPOPN 1
13989: END
// on Command ( comandid ) do var i , j , tmp ;
13990: LD_INT 0
13992: PPUSH
13993: PPUSH
13994: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13995: LD_ADDR_VAR 0 2
13999: PUSH
14000: LD_INT 22
14002: PUSH
14003: LD_INT 1
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 21
14012: PUSH
14013: LD_INT 2
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PPUSH
14024: CALL_OW 69
14028: PUSH
14029: FOR_IN
14030: IFFALSE 14155
// begin if GetTaskList ( i ) > 0 then
14032: LD_VAR 0 2
14036: PPUSH
14037: CALL_OW 437
14041: PUSH
14042: LD_INT 0
14044: GREATER
14045: IFFALSE 14153
// begin for j = 1 to GetTaskList ( i ) do
14047: LD_ADDR_VAR 0 3
14051: PUSH
14052: DOUBLE
14053: LD_INT 1
14055: DEC
14056: ST_TO_ADDR
14057: LD_VAR 0 2
14061: PPUSH
14062: CALL_OW 437
14066: PUSH
14067: FOR_TO
14068: IFFALSE 14151
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14070: LD_ADDR_VAR 0 4
14074: PUSH
14075: LD_VAR 0 2
14079: PPUSH
14080: CALL_OW 437
14084: PUSH
14085: LD_VAR 0 3
14089: ARRAY
14090: PUSH
14091: LD_INT 4
14093: ARRAY
14094: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14095: LD_VAR 0 4
14099: PPUSH
14100: CALL_OW 255
14104: PUSH
14105: LD_INT 3
14107: EQUAL
14108: PUSH
14109: LD_VAR 0 4
14113: PPUSH
14114: CALL_OW 247
14118: PUSH
14119: LD_INT 2
14121: EQUAL
14122: AND
14123: PUSH
14124: LD_VAR 0 4
14128: PPUSH
14129: CALL_OW 264
14133: PUSH
14134: LD_INT 51
14136: EQUAL
14137: AND
14138: IFFALSE 14149
// ComStop ( i ) ;
14140: LD_VAR 0 2
14144: PPUSH
14145: CALL_OW 141
// end ;
14149: GO 14067
14151: POP
14152: POP
// end ; end ;
14153: GO 14029
14155: POP
14156: POP
// end ;
14157: PPOPN 4
14159: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14160: LD_VAR 0 2
14164: PUSH
14165: LD_EXP 8
14169: EQUAL
14170: PUSH
14171: LD_EXP 21
14175: PUSH
14176: LD_INT 4
14178: NONEQUAL
14179: AND
14180: IFFALSE 14186
// AskMikhail ;
14182: CALL 7240 0 0
// end ; end_of_file
14186: PPOPN 2
14188: END
// every 0 0$1 trigger IsDead ( JMM ) do
14189: LD_EXP 1
14193: PPUSH
14194: CALL_OW 301
14198: IFFALSE 14210
14200: GO 14202
14202: DISABLE
// YouLost ( JMM ) ;
14203: LD_STRING JMM
14205: PPUSH
14206: CALL_OW 104
14210: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
14211: LD_INT 1
14213: PPUSH
14214: CALL_OW 301
14218: PUSH
14219: LD_INT 10
14221: PPUSH
14222: CALL_OW 301
14226: OR
14227: IFFALSE 14239
14229: GO 14231
14231: DISABLE
// YouLost ( DepotDestroyed ) ;
14232: LD_STRING DepotDestroyed
14234: PPUSH
14235: CALL_OW 104
14239: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14240: LD_INT 22
14242: PUSH
14243: LD_INT 1
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 21
14252: PUSH
14253: LD_INT 1
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 2
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: LIST
14274: PPUSH
14275: CALL_OW 69
14279: PUSH
14280: LD_INT 0
14282: EQUAL
14283: PUSH
14284: LD_INT 22
14286: PUSH
14287: LD_INT 4
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: LD_INT 21
14296: PUSH
14297: LD_INT 1
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: PUSH
14304: LD_INT 25
14306: PUSH
14307: LD_INT 2
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: LIST
14318: PPUSH
14319: CALL_OW 69
14323: PUSH
14324: LD_INT 0
14326: EQUAL
14327: AND
14328: PUSH
14329: LD_INT 1
14331: PPUSH
14332: CALL_OW 255
14336: PUSH
14337: LD_INT 3
14339: EQUAL
14340: AND
14341: PUSH
14342: LD_INT 10
14344: PPUSH
14345: CALL_OW 255
14349: PUSH
14350: LD_INT 3
14352: EQUAL
14353: AND
14354: IFFALSE 14366
14356: GO 14358
14358: DISABLE
// YouLost ( Engineer ) ;
14359: LD_STRING Engineer
14361: PPUSH
14362: CALL_OW 104
14366: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14367: LD_INT 1
14369: PPUSH
14370: CALL_OW 255
14374: PUSH
14375: LD_INT 3
14377: EQUAL
14378: PUSH
14379: LD_EXP 27
14383: PUSH
14384: LD_INT 1
14386: EQUAL
14387: AND
14388: IFFALSE 14400
14390: GO 14392
14392: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14393: LD_STRING DepotCaptured
14395: PPUSH
14396: CALL_OW 104
14400: END
// export function PrepareTigers ; var i , un ; begin
14401: LD_INT 0
14403: PPUSH
14404: PPUSH
14405: PPUSH
// for i = 1 to Difficulty do
14406: LD_ADDR_VAR 0 2
14410: PUSH
14411: DOUBLE
14412: LD_INT 1
14414: DEC
14415: ST_TO_ADDR
14416: LD_OWVAR 67
14420: PUSH
14421: FOR_TO
14422: IFFALSE 14557
// begin hc_sex = sex_male ;
14424: LD_ADDR_OWVAR 27
14428: PUSH
14429: LD_INT 1
14431: ST_TO_ADDR
// uc_side = 0 ;
14432: LD_ADDR_OWVAR 20
14436: PUSH
14437: LD_INT 0
14439: ST_TO_ADDR
// uc_nation = nation_nature ;
14440: LD_ADDR_OWVAR 21
14444: PUSH
14445: LD_INT 0
14447: ST_TO_ADDR
// hc_class = class_tiger ;
14448: LD_ADDR_OWVAR 28
14452: PUSH
14453: LD_INT 14
14455: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14456: LD_ADDR_OWVAR 31
14460: PUSH
14461: LD_EXP 14
14465: PUSH
14466: LD_INT 0
14468: PUSH
14469: LD_INT 0
14471: PUSH
14472: LD_INT 0
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14481: LD_ADDR_OWVAR 35
14485: PUSH
14486: LD_INT 30
14488: PPUSH
14489: LD_INT 40
14491: PPUSH
14492: CALL_OW 12
14496: PUSH
14497: LD_INT 40
14499: PPUSH
14500: LD_INT 50
14502: PPUSH
14503: CALL_OW 12
14507: PUSH
14508: LD_INT 50
14510: PPUSH
14511: LD_INT 60
14513: PPUSH
14514: CALL_OW 12
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: LIST
14523: PUSH
14524: LD_OWVAR 67
14528: ARRAY
14529: ST_TO_ADDR
// un = CreateHuman ;
14530: LD_ADDR_VAR 0 3
14534: PUSH
14535: CALL_OW 44
14539: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14540: LD_VAR 0 3
14544: PPUSH
14545: LD_INT 27
14547: PPUSH
14548: LD_INT 0
14550: PPUSH
14551: CALL_OW 49
// end ;
14555: GO 14421
14557: POP
14558: POP
// end ; end_of_file
14559: LD_VAR 0 1
14563: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14564: LD_INT 1
14566: PPUSH
14567: CALL_OW 255
14571: PUSH
14572: LD_INT 1
14574: EQUAL
14575: PUSH
14576: LD_INT 10
14578: PPUSH
14579: CALL_OW 255
14583: PUSH
14584: LD_INT 1
14586: EQUAL
14587: AND
14588: PUSH
14589: LD_EXP 20
14593: PUSH
14594: LD_INT 1
14596: EQUAL
14597: AND
14598: PUSH
14599: LD_INT 22
14601: PUSH
14602: LD_INT 3
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: LD_INT 21
14611: PUSH
14612: LD_INT 2
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PUSH
14619: LD_INT 34
14621: PUSH
14622: LD_INT 51
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: LD_INT 3
14631: PUSH
14632: LD_INT 58
14634: PUSH
14635: EMPTY
14636: LIST
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: PPUSH
14648: CALL_OW 69
14652: PUSH
14653: LD_INT 0
14655: EQUAL
14656: AND
14657: IFFALSE 14748
14659: GO 14661
14661: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14662: LD_INT 9450
14664: PUSH
14665: LD_INT 8400
14667: PUSH
14668: LD_INT 6300
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: LIST
14675: PUSH
14676: LD_OWVAR 67
14680: ARRAY
14681: PPUSH
14682: CALL_OW 67
// if cargoEscape = 1 then
14686: LD_EXP 20
14690: PUSH
14691: LD_INT 1
14693: EQUAL
14694: IFFALSE 14748
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14696: LD_EXP 9
14700: PPUSH
14701: LD_STRING D6-Pow-1
14703: PPUSH
14704: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14708: LD_EXP 1
14712: PPUSH
14713: LD_STRING D6-JMM-1
14715: PPUSH
14716: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14720: LD_EXP 9
14724: PPUSH
14725: LD_STRING D6-Pow-2
14727: PPUSH
14728: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14732: LD_EXP 1
14736: PPUSH
14737: LD_STRING D6-JMM-2
14739: PPUSH
14740: CALL_OW 88
// FinishMission ;
14744: CALL 14956 0 0
// end ; end ;
14748: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14749: LD_INT 1
14751: PPUSH
14752: CALL_OW 255
14756: PUSH
14757: LD_INT 1
14759: EQUAL
14760: PUSH
14761: LD_INT 10
14763: PPUSH
14764: CALL_OW 255
14768: PUSH
14769: LD_INT 1
14771: EQUAL
14772: AND
14773: PUSH
14774: LD_EXP 20
14778: PUSH
14779: LD_INT 1
14781: GREATER
14782: AND
14783: IFFALSE 14850
14785: GO 14787
14787: DISABLE
14788: LD_INT 0
14790: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14791: LD_INT 11550
14793: PUSH
14794: LD_INT 10500
14796: PUSH
14797: LD_INT 9450
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: LIST
14804: PUSH
14805: LD_OWVAR 67
14809: ARRAY
14810: PPUSH
14811: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14815: LD_INT 1
14817: PUSH
14818: LD_INT 2
14820: PUSH
14821: LD_INT 3
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: LIST
14828: PUSH
14829: LD_OWVAR 67
14833: ARRAY
14834: PPUSH
14835: LD_INT 13
14837: PPUSH
14838: CALL 13118 0 2
// lastBattle = 1 ;
14842: LD_ADDR_EXP 27
14846: PUSH
14847: LD_INT 1
14849: ST_TO_ADDR
// end ;
14850: PPOPN 1
14852: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14853: LD_EXP 27
14857: PUSH
14858: LD_INT 1
14860: EQUAL
14861: PUSH
14862: LD_INT 26
14864: PPUSH
14865: LD_INT 22
14867: PUSH
14868: LD_INT 3
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 21
14877: PUSH
14878: LD_INT 1
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PPUSH
14889: CALL_OW 70
14893: PUSH
14894: LD_INT 0
14896: EQUAL
14897: AND
14898: IFFALSE 14955
14900: GO 14902
14902: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14903: LD_EXP 9
14907: PPUSH
14908: LD_STRING D6-Pow-1
14910: PPUSH
14911: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14915: LD_EXP 1
14919: PPUSH
14920: LD_STRING D6-JMM-1
14922: PPUSH
14923: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14927: LD_EXP 9
14931: PPUSH
14932: LD_STRING D6-Pow-2
14934: PPUSH
14935: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14939: LD_EXP 1
14943: PPUSH
14944: LD_STRING D6-JMM-2
14946: PPUSH
14947: CALL_OW 88
// FinishMission ;
14951: CALL 14956 0 0
// end ;
14955: END
// export function FinishMission ; var tmp ; begin
14956: LD_INT 0
14958: PPUSH
14959: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14960: LD_ADDR_VAR 0 2
14964: PUSH
14965: LD_INT 22
14967: PUSH
14968: LD_INT 1
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PUSH
14975: LD_INT 21
14977: PUSH
14978: LD_INT 2
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: LD_INT 24
14987: PUSH
14988: LD_INT 251
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: LIST
14999: PPUSH
15000: CALL_OW 69
15004: ST_TO_ADDR
// if tmp then
15005: LD_VAR 0 2
15009: IFFALSE 15023
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15011: LD_VAR 0 2
15015: PPUSH
15016: LD_STRING 02_tanks_1
15018: PPUSH
15019: CALL 10603 0 2
// if mikhailStatus = 1 then
15023: LD_EXP 21
15027: PUSH
15028: LD_INT 1
15030: EQUAL
15031: IFFALSE 15045
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15033: LD_EXP 21
15037: PPUSH
15038: LD_STRING 02_mikhailStatus_1
15040: PPUSH
15041: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15045: LD_INT 1
15047: PPUSH
15048: CALL_OW 274
15052: PPUSH
15053: LD_INT 1
15055: PPUSH
15056: CALL_OW 275
15060: PPUSH
15061: LD_STRING 02_resources_4
15063: PPUSH
15064: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15068: LD_INT 1
15070: PPUSH
15071: CALL_OW 274
15075: PPUSH
15076: LD_INT 1
15078: PPUSH
15079: CALL_OW 275
15083: PUSH
15084: LD_INT 200
15086: GREATEREQUAL
15087: IFFALSE 15101
// begin AddMedal ( Cans , 1 ) ;
15089: LD_STRING Cans
15091: PPUSH
15092: LD_INT 1
15094: PPUSH
15095: CALL_OW 101
// end else
15099: GO 15112
// begin AddMedal ( Cans , - 1 ) ;
15101: LD_STRING Cans
15103: PPUSH
15104: LD_INT 1
15106: NEG
15107: PPUSH
15108: CALL_OW 101
// end ; if deadsCounter < 2 then
15112: LD_EXP 31
15116: PUSH
15117: LD_INT 2
15119: LESS
15120: IFFALSE 15134
// begin AddMedal ( Deaths , 1 ) ;
15122: LD_STRING Deaths
15124: PPUSH
15125: LD_INT 1
15127: PPUSH
15128: CALL_OW 101
// end else
15132: GO 15145
// begin AddMedal ( Deaths , - 1 ) ;
15134: LD_STRING Deaths
15136: PPUSH
15137: LD_INT 1
15139: NEG
15140: PPUSH
15141: CALL_OW 101
// end ; if mikhailStatus = 0 then
15145: LD_EXP 21
15149: PUSH
15150: LD_INT 0
15152: EQUAL
15153: IFFALSE 15166
// AddMedal ( Prisoner , - 1 ) ;
15155: LD_STRING Prisoner
15157: PPUSH
15158: LD_INT 1
15160: NEG
15161: PPUSH
15162: CALL_OW 101
// if mikhailStatus = 1 then
15166: LD_EXP 21
15170: PUSH
15171: LD_INT 1
15173: EQUAL
15174: IFFALSE 15186
// AddMedal ( Prisoner , 1 ) ;
15176: LD_STRING Prisoner
15178: PPUSH
15179: LD_INT 1
15181: PPUSH
15182: CALL_OW 101
// if mikhailStatus = 2 then
15186: LD_EXP 21
15190: PUSH
15191: LD_INT 2
15193: EQUAL
15194: IFFALSE 15206
// AddMedal ( Prisoner , 2 ) ;
15196: LD_STRING Prisoner
15198: PPUSH
15199: LD_INT 2
15201: PPUSH
15202: CALL_OW 101
// if mikhailStatus = 3 then
15206: LD_EXP 21
15210: PUSH
15211: LD_INT 3
15213: EQUAL
15214: IFFALSE 15227
// AddMedal ( Prisoner , - 2 ) ;
15216: LD_STRING Prisoner
15218: PPUSH
15219: LD_INT 2
15221: NEG
15222: PPUSH
15223: CALL_OW 101
// GiveMedals ( MAIN ) ;
15227: LD_STRING MAIN
15229: PPUSH
15230: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15234: LD_INT 22
15236: PUSH
15237: LD_INT 1
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: LD_INT 23
15246: PUSH
15247: LD_INT 1
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PUSH
15254: LD_INT 21
15256: PUSH
15257: LD_INT 1
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: LIST
15268: PPUSH
15269: CALL_OW 69
15273: PPUSH
15274: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15278: LD_EXP 1
15282: PPUSH
15283: LD_EXP 33
15287: PUSH
15288: LD_STRING JMM
15290: STR
15291: PPUSH
15292: CALL_OW 38
// if IsOK ( Bobby ) then
15296: LD_EXP 2
15300: PPUSH
15301: CALL_OW 302
15305: IFFALSE 15325
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15307: LD_EXP 2
15311: PPUSH
15312: LD_EXP 33
15316: PUSH
15317: LD_STRING Bobby
15319: STR
15320: PPUSH
15321: CALL_OW 38
// if IsOK ( Cyrus ) then
15325: LD_EXP 3
15329: PPUSH
15330: CALL_OW 302
15334: IFFALSE 15354
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15336: LD_EXP 3
15340: PPUSH
15341: LD_EXP 33
15345: PUSH
15346: LD_STRING Cyrus
15348: STR
15349: PPUSH
15350: CALL_OW 38
// if IsOK ( Lisa ) then
15354: LD_EXP 4
15358: PPUSH
15359: CALL_OW 302
15363: IFFALSE 15383
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15365: LD_EXP 4
15369: PPUSH
15370: LD_EXP 33
15374: PUSH
15375: LD_STRING Lisa
15377: STR
15378: PPUSH
15379: CALL_OW 38
// if IsOK ( Khatam ) then
15383: LD_EXP 5
15387: PPUSH
15388: CALL_OW 302
15392: IFFALSE 15412
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15394: LD_EXP 5
15398: PPUSH
15399: LD_EXP 33
15403: PUSH
15404: LD_STRING Khatam
15406: STR
15407: PPUSH
15408: CALL_OW 38
// if IsOK ( Brian ) then
15412: LD_EXP 6
15416: PPUSH
15417: CALL_OW 302
15421: IFFALSE 15441
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15423: LD_EXP 6
15427: PPUSH
15428: LD_EXP 33
15432: PUSH
15433: LD_STRING Brian
15435: STR
15436: PPUSH
15437: CALL_OW 38
// if IsOk ( Jerry ) then
15441: LD_EXP 7
15445: PPUSH
15446: CALL_OW 302
15450: IFFALSE 15470
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15452: LD_EXP 7
15456: PPUSH
15457: LD_EXP 33
15461: PUSH
15462: LD_STRING Jerry
15464: STR
15465: PPUSH
15466: CALL_OW 38
// if mikhailStatus = 1 then
15470: LD_EXP 21
15474: PUSH
15475: LD_INT 1
15477: EQUAL
15478: IFFALSE 15498
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15480: LD_EXP 8
15484: PPUSH
15485: LD_EXP 33
15489: PUSH
15490: LD_STRING Mikhail
15492: STR
15493: PPUSH
15494: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15498: LD_INT 50
15500: PUSH
15501: EMPTY
15502: LIST
15503: PUSH
15504: LD_INT 22
15506: PUSH
15507: LD_INT 1
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 21
15516: PUSH
15517: LD_INT 1
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: LIST
15528: PPUSH
15529: CALL_OW 69
15533: PUSH
15534: LD_EXP 1
15538: PUSH
15539: LD_EXP 2
15543: PUSH
15544: LD_EXP 3
15548: PUSH
15549: LD_EXP 4
15553: PUSH
15554: LD_EXP 5
15558: PUSH
15559: LD_EXP 6
15563: PUSH
15564: LD_EXP 7
15568: PUSH
15569: LD_EXP 8
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: DIFF
15584: PPUSH
15585: LD_STRING 02_other_survivors
15587: PPUSH
15588: CALL_OW 38
// YouWin ;
15592: CALL_OW 103
// end ;
15596: LD_VAR 0 1
15600: RET
