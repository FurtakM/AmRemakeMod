// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export deadsCounter ; export spotCorpses ; starting begin RuSoldMinLevel = 0 ;
   0: LD_ADDR_EXP 13
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
   8: LD_ADDR_EXP 14
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// hpJMM = 0 ;
  16: LD_ADDR_EXP 10
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpBobby = 0 ;
  24: LD_ADDR_EXP 11
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpCyrus = 0 ;
  32: LD_ADDR_EXP 12
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// cargoEscape = 0 ;
  40: LD_ADDR_EXP 20
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// mikhailStatus = 0 ;
  48: LD_ADDR_EXP 21
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailInBase = 0 ;
  56: LD_ADDR_EXP 22
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailDepot = 0 ;
  64: LD_ADDR_EXP 23
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// lastBattle = 0 ;
  72: LD_ADDR_EXP 27
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// deadsCounter = 0 ;
  80: LD_ADDR_EXP 28
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// spotCorpses = 0 ;
  88: LD_ADDR_EXP 29
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// southBaseDefenders = [ ] ;
  96: LD_ADDR_EXP 25
 100: PUSH
 101: EMPTY
 102: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 103: LD_ADDR_EXP 24
 107: PUSH
 108: EMPTY
 109: ST_TO_ADDR
// attackGroup = [ ] ;
 110: LD_ADDR_EXP 26
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// RandomizeAll ;
 117: CALL_OW 11
// InGameOn ;
 121: CALL_OW 8
// Resetfog ;
 125: CALL_OW 335
// PrepareDifficulty ;
 129: CALL 9411 0 0
// PrepareRussianCommander ;
 133: CALL 10637 0 0
// PrepareSouthBase ;
 137: CALL 10720 0 0
// PrepareNorthBase ;
 141: CALL 11077 0 0
// PrepareOtherRussians ;
 145: CALL 11443 0 0
// PrepareHeroes ;
 149: CALL 9733 0 0
// PrepareLisSquad ;
 153: CALL 9976 0 0
// PrepareOtherAmericans ;
 157: CALL 10204 0 0
// end ; end_of_file
 161: END
// every 1 do var tmp ;
 162: GO 164
 164: DISABLE
 165: LD_INT 0
 167: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 168: LD_EXP 1
 172: PPUSH
 173: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 177: LD_ADDR_VAR 0 1
 181: PUSH
 182: LD_INT 22
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 21
 194: PUSH
 195: LD_INT 1
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: PPUSH
 206: CALL_OW 69
 210: PUSH
 211: LD_EXP 4
 215: PUSH
 216: EMPTY
 217: LIST
 218: DIFF
 219: ST_TO_ADDR
// if Cyrus and Bobby then
 220: LD_EXP 3
 224: PUSH
 225: LD_EXP 2
 229: AND
 230: IFFALSE 560
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 232: LD_EXP 3
 236: PPUSH
 237: LD_INT 43
 239: PPUSH
 240: LD_INT 72
 242: PPUSH
 243: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 247: LD_EXP 2
 251: PPUSH
 252: LD_INT 44
 254: PPUSH
 255: LD_INT 70
 257: PPUSH
 258: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 262: LD_EXP 1
 266: PPUSH
 267: LD_INT 46
 269: PPUSH
 270: LD_INT 73
 272: PPUSH
 273: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 277: LD_EXP 3
 281: PPUSH
 282: LD_STRING D1a-Cyrus-1
 284: PPUSH
 285: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 289: LD_EXP 1
 293: PPUSH
 294: LD_STRING D1a-JMM-1
 296: PPUSH
 297: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 301: LD_EXP 3
 305: PPUSH
 306: LD_INT 37
 308: PPUSH
 309: LD_INT 66
 311: PPUSH
 312: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 316: LD_EXP 2
 320: PPUSH
 321: LD_INT 41
 323: PPUSH
 324: LD_INT 67
 326: PPUSH
 327: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 331: LD_EXP 1
 335: PPUSH
 336: LD_INT 38
 338: PPUSH
 339: LD_INT 64
 341: PPUSH
 342: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 346: LD_EXP 2
 350: PPUSH
 351: LD_STRING D1a-Bobby-2
 353: PPUSH
 354: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 358: LD_EXP 3
 362: PPUSH
 363: LD_INT 35
 365: PPUSH
 366: LD_INT 62
 368: PPUSH
 369: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 373: LD_EXP 2
 377: PPUSH
 378: LD_INT 32
 380: PPUSH
 381: LD_INT 60
 383: PPUSH
 384: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 388: LD_EXP 1
 392: PPUSH
 393: LD_INT 35
 395: PPUSH
 396: LD_INT 60
 398: PPUSH
 399: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 403: LD_EXP 1
 407: PPUSH
 408: LD_STRING D1a-JMM-2
 410: PPUSH
 411: CALL_OW 88
// ComWalk ( Lisa ) ;
 415: LD_EXP 4
 419: PPUSH
 420: CALL_OW 138
// wait ( 0 0$1 ) ;
 424: LD_INT 35
 426: PPUSH
 427: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 431: LD_EXP 4
 435: PPUSH
 436: LD_EXP 1
 440: PPUSH
 441: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 445: LD_EXP 1
 449: PUSH
 450: LD_EXP 3
 454: PUSH
 455: LD_EXP 2
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: LIST
 464: PPUSH
 465: LD_EXP 4
 469: PPUSH
 470: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 474: LD_VAR 0 1
 478: PUSH
 479: LD_INT 1
 481: ARRAY
 482: PPUSH
 483: LD_INT 33
 485: PPUSH
 486: LD_INT 55
 488: PPUSH
 489: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 493: LD_VAR 0 1
 497: PUSH
 498: LD_INT 2
 500: ARRAY
 501: PPUSH
 502: LD_INT 30
 504: PPUSH
 505: LD_INT 54
 507: PPUSH
 508: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 512: LD_VAR 0 1
 516: PUSH
 517: LD_INT 1
 519: ARRAY
 520: PPUSH
 521: LD_EXP 1
 525: PPUSH
 526: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 530: LD_VAR 0 1
 534: PUSH
 535: LD_INT 2
 537: ARRAY
 538: PPUSH
 539: LD_EXP 1
 543: PPUSH
 544: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 548: LD_EXP 4
 552: PPUSH
 553: LD_STRING D1a-Lisa-2
 555: PPUSH
 556: CALL_OW 88
// end ; if Cyrus and not Bobby then
 560: LD_EXP 3
 564: PUSH
 565: LD_EXP 2
 569: NOT
 570: AND
 571: IFFALSE 776
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 573: LD_EXP 3
 577: PPUSH
 578: LD_INT 43
 580: PPUSH
 581: LD_INT 72
 583: PPUSH
 584: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 588: LD_EXP 1
 592: PPUSH
 593: LD_INT 46
 595: PPUSH
 596: LD_INT 73
 598: PPUSH
 599: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 603: LD_EXP 3
 607: PPUSH
 608: LD_STRING D1a-Cyrus-1
 610: PPUSH
 611: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 615: LD_EXP 1
 619: PPUSH
 620: LD_STRING D1a-JMM-1
 622: PPUSH
 623: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 627: LD_EXP 3
 631: PPUSH
 632: LD_INT 37
 634: PPUSH
 635: LD_INT 66
 637: PPUSH
 638: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 642: LD_EXP 1
 646: PPUSH
 647: LD_INT 38
 649: PPUSH
 650: LD_INT 64
 652: PPUSH
 653: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 657: LD_EXP 3
 661: PPUSH
 662: LD_STRING D1a-Cyrus-2
 664: PPUSH
 665: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 669: LD_EXP 3
 673: PPUSH
 674: LD_INT 35
 676: PPUSH
 677: LD_INT 62
 679: PPUSH
 680: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 684: LD_EXP 1
 688: PPUSH
 689: LD_INT 35
 691: PPUSH
 692: LD_INT 60
 694: PPUSH
 695: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 699: LD_EXP 1
 703: PPUSH
 704: LD_STRING D1a-JMM-2
 706: PPUSH
 707: CALL_OW 88
// ComWalk ( Lisa ) ;
 711: LD_EXP 4
 715: PPUSH
 716: CALL_OW 138
// wait ( 0 0$1 ) ;
 720: LD_INT 35
 722: PPUSH
 723: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 727: LD_EXP 4
 731: PPUSH
 732: LD_EXP 1
 736: PPUSH
 737: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 741: LD_EXP 4
 745: PPUSH
 746: LD_STRING D1a-Lisa-2
 748: PPUSH
 749: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 753: LD_EXP 1
 757: PUSH
 758: LD_EXP 3
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: PPUSH
 767: LD_EXP 4
 771: PPUSH
 772: CALL_OW 119
// end ; if not Cyrus and Bobby then
 776: LD_EXP 3
 780: NOT
 781: PUSH
 782: LD_EXP 2
 786: AND
 787: IFFALSE 1066
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 789: LD_EXP 2
 793: PPUSH
 794: LD_INT 44
 796: PPUSH
 797: LD_INT 70
 799: PPUSH
 800: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 804: LD_EXP 1
 808: PPUSH
 809: LD_INT 46
 811: PPUSH
 812: LD_INT 73
 814: PPUSH
 815: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 819: LD_EXP 2
 823: PPUSH
 824: LD_STRING D1a-Bobby-1
 826: PPUSH
 827: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 831: LD_EXP 1
 835: PPUSH
 836: LD_STRING D1a-JMM-1
 838: PPUSH
 839: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 843: LD_EXP 2
 847: PPUSH
 848: LD_INT 37
 850: PPUSH
 851: LD_INT 66
 853: PPUSH
 854: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 858: LD_EXP 1
 862: PPUSH
 863: LD_INT 38
 865: PPUSH
 866: LD_INT 64
 868: PPUSH
 869: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 873: LD_EXP 2
 877: PPUSH
 878: LD_STRING D1a-Bobby-2
 880: PPUSH
 881: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 885: LD_EXP 2
 889: PPUSH
 890: LD_INT 35
 892: PPUSH
 893: LD_INT 62
 895: PPUSH
 896: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 900: LD_EXP 1
 904: PPUSH
 905: LD_INT 35
 907: PPUSH
 908: LD_INT 60
 910: PPUSH
 911: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 915: LD_EXP 1
 919: PPUSH
 920: LD_STRING D1a-JMM-2
 922: PPUSH
 923: CALL_OW 88
// ComWalk ( Lisa ) ;
 927: LD_EXP 4
 931: PPUSH
 932: CALL_OW 138
// wait ( 0 0$1 ) ;
 936: LD_INT 35
 938: PPUSH
 939: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 943: LD_EXP 4
 947: PPUSH
 948: LD_EXP 1
 952: PPUSH
 953: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 957: LD_EXP 1
 961: PUSH
 962: LD_EXP 3
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PPUSH
 971: LD_EXP 4
 975: PPUSH
 976: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 980: LD_VAR 0 1
 984: PUSH
 985: LD_INT 1
 987: ARRAY
 988: PPUSH
 989: LD_INT 33
 991: PPUSH
 992: LD_INT 55
 994: PPUSH
 995: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 999: LD_VAR 0 1
1003: PUSH
1004: LD_INT 2
1006: ARRAY
1007: PPUSH
1008: LD_INT 30
1010: PPUSH
1011: LD_INT 54
1013: PPUSH
1014: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1018: LD_VAR 0 1
1022: PUSH
1023: LD_INT 1
1025: ARRAY
1026: PPUSH
1027: LD_EXP 1
1031: PPUSH
1032: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1036: LD_VAR 0 1
1040: PUSH
1041: LD_INT 2
1043: ARRAY
1044: PPUSH
1045: LD_EXP 1
1049: PPUSH
1050: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1054: LD_EXP 4
1058: PPUSH
1059: LD_STRING D1a-Lisa-2
1061: PPUSH
1062: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1066: LD_EXP 3
1070: NOT
1071: PUSH
1072: LD_EXP 2
1076: NOT
1077: AND
1078: IFFALSE 1292
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1080: LD_EXP 1
1084: PPUSH
1085: LD_INT 37
1087: PPUSH
1088: LD_INT 66
1090: PPUSH
1091: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1095: LD_EXP 1
1099: PPUSH
1100: LD_STRING D1b-JMM-1
1102: PPUSH
1103: CALL_OW 88
// ComCrawl ( JMM ) ;
1107: LD_EXP 1
1111: PPUSH
1112: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1116: LD_EXP 1
1120: PPUSH
1121: LD_INT 35
1123: PPUSH
1124: LD_INT 60
1126: PPUSH
1127: CALL_OW 171
// wait ( 0 0$8 ) ;
1131: LD_INT 280
1133: PPUSH
1134: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1138: LD_EXP 1
1142: PPUSH
1143: LD_STRING D1b-JMM-1a
1145: PPUSH
1146: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1150: LD_EXP 1
1154: PUSH
1155: LD_EXP 4
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: PPUSH
1164: CALL_OW 138
// wait ( 0 0$1 ) ;
1168: LD_INT 35
1170: PPUSH
1171: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1175: LD_EXP 4
1179: PPUSH
1180: LD_EXP 1
1184: PPUSH
1185: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1189: LD_EXP 1
1193: PUSH
1194: EMPTY
1195: LIST
1196: PPUSH
1197: LD_EXP 4
1201: PPUSH
1202: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1206: LD_VAR 0 1
1210: PUSH
1211: LD_INT 1
1213: ARRAY
1214: PPUSH
1215: LD_INT 33
1217: PPUSH
1218: LD_INT 55
1220: PPUSH
1221: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1225: LD_VAR 0 1
1229: PUSH
1230: LD_INT 2
1232: ARRAY
1233: PPUSH
1234: LD_INT 30
1236: PPUSH
1237: LD_INT 54
1239: PPUSH
1240: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1244: LD_VAR 0 1
1248: PUSH
1249: LD_INT 1
1251: ARRAY
1252: PPUSH
1253: LD_EXP 1
1257: PPUSH
1258: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1262: LD_VAR 0 1
1266: PUSH
1267: LD_INT 2
1269: ARRAY
1270: PPUSH
1271: LD_EXP 1
1275: PPUSH
1276: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1280: LD_EXP 4
1284: PPUSH
1285: LD_STRING D1b-Lisa-1
1287: PPUSH
1288: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1292: LD_EXP 1
1296: PPUSH
1297: LD_STRING D1-JMM-1
1299: PPUSH
1300: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1304: LD_EXP 4
1308: PPUSH
1309: LD_STRING D1-Lisa-1
1311: PPUSH
1312: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1316: LD_EXP 1
1320: PPUSH
1321: LD_STRING D1-JMM-2
1323: PPUSH
1324: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1328: LD_EXP 9
1332: PPUSH
1333: LD_STRING D1-Pow-2
1335: PPUSH
1336: CALL_OW 94
// if Cyrus then
1340: LD_EXP 3
1344: IFFALSE 1370
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1346: LD_EXP 3
1350: PPUSH
1351: LD_STRING D1-Cyrus-2
1353: PPUSH
1354: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1358: LD_EXP 1
1362: PPUSH
1363: LD_STRING D1-JMM-3
1365: PPUSH
1366: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1370: LD_EXP 9
1374: PPUSH
1375: LD_STRING D1-Pow-3
1377: PPUSH
1378: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1382: LD_EXP 1
1386: PPUSH
1387: LD_STRING D1-JMM-4
1389: PPUSH
1390: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1394: LD_EXP 9
1398: PPUSH
1399: LD_STRING D1-Pow-4
1401: PPUSH
1402: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1406: LD_EXP 9
1410: PPUSH
1411: LD_STRING D1-Pow-4a
1413: PPUSH
1414: CALL_OW 94
// if Cyrus then
1418: LD_EXP 3
1422: IFFALSE 1436
// Say ( Cyrus , D1-Cyrus-4 ) ;
1424: LD_EXP 3
1428: PPUSH
1429: LD_STRING D1-Cyrus-4
1431: PPUSH
1432: CALL_OW 88
// if Bobby then
1436: LD_EXP 2
1440: IFFALSE 1478
// begin Say ( Bobby , D1-Bobby-4 ) ;
1442: LD_EXP 2
1446: PPUSH
1447: LD_STRING D1-Bobby-4
1449: PPUSH
1450: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1454: LD_EXP 4
1458: PPUSH
1459: LD_STRING D1-Lisa-4
1461: PPUSH
1462: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1466: LD_EXP 1
1470: PPUSH
1471: LD_STRING D1-JMM-5
1473: PPUSH
1474: CALL_OW 88
// end ; InGameOff ;
1478: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1482: LD_INT 22
1484: PUSH
1485: LD_INT 4
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_EXP 6
1501: PUSH
1502: LD_EXP 7
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: DIFF
1511: PPUSH
1512: LD_INT 1
1514: PPUSH
1515: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1519: LD_STRING M1
1521: PPUSH
1522: CALL_OW 337
// SaveForQuickRestart ;
1526: CALL_OW 22
// end ;
1530: PPOPN 1
1532: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1533: LD_INT 7
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 1
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: PUSH
1551: LD_INT 0
1553: GREATER
1554: IFFALSE 1924
1556: GO 1558
1558: DISABLE
// begin InGameOn ;
1559: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1563: LD_INT 22
1565: PUSH
1566: LD_INT 1
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 21
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PPUSH
1587: CALL_OW 69
1591: PPUSH
1592: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1596: LD_INT 24
1598: PPUSH
1599: LD_INT 32
1601: PPUSH
1602: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1606: LD_EXP 5
1610: PPUSH
1611: LD_INT 4
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1621: LD_EXP 5
1625: PPUSH
1626: LD_INT 4
1628: PPUSH
1629: CALL_OW 336
// wait ( 0 0$1 ) ;
1633: LD_INT 35
1635: PPUSH
1636: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1640: LD_EXP 5
1644: PPUSH
1645: LD_INT 27
1647: PPUSH
1648: LD_INT 38
1650: PPUSH
1651: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1655: LD_EXP 5
1659: PPUSH
1660: LD_EXP 1
1664: PPUSH
1665: CALL_OW 179
// wait ( 0 0$1 ) ;
1669: LD_INT 35
1671: PPUSH
1672: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1676: LD_EXP 5
1680: PPUSH
1681: LD_STRING D2a-Khat-1
1683: PPUSH
1684: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1688: LD_EXP 1
1692: PPUSH
1693: LD_STRING D2a-JMM-1
1695: PPUSH
1696: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1700: LD_EXP 5
1704: PPUSH
1705: LD_STRING D2a-Khat-2
1707: PPUSH
1708: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1712: LD_EXP 1
1716: PPUSH
1717: LD_STRING D2a-JMM-2
1719: PPUSH
1720: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1724: LD_EXP 5
1728: PPUSH
1729: LD_STRING D2a-Khat-3
1731: PPUSH
1732: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1736: LD_EXP 1
1740: PPUSH
1741: LD_STRING D2a-JMM-3
1743: PPUSH
1744: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1748: LD_EXP 5
1752: PPUSH
1753: LD_STRING D2a-Khat-4
1755: PPUSH
1756: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1760: LD_EXP 1
1764: PPUSH
1765: LD_STRING D2a-JMM-4
1767: PPUSH
1768: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1772: LD_EXP 5
1776: PPUSH
1777: LD_STRING D2a-Khat-5
1779: PPUSH
1780: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1784: LD_EXP 1
1788: PPUSH
1789: LD_STRING D2a-JMM-5
1791: PPUSH
1792: CALL_OW 88
// InGameOff ;
1796: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1800: LD_INT 22
1802: PUSH
1803: LD_INT 1
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: LD_INT 21
1812: PUSH
1813: LD_INT 1
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: PUSH
1820: LD_INT 3
1822: PUSH
1823: LD_INT 24
1825: PUSH
1826: LD_INT 800
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: PPUSH
1842: CALL_OW 69
1846: PUSH
1847: LD_INT 0
1849: GREATER
1850: IFFALSE 1924
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1852: LD_EXP 5
1856: PPUSH
1857: LD_INT 22
1859: PUSH
1860: LD_INT 1
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PUSH
1867: LD_INT 21
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 3
1879: PUSH
1880: LD_INT 24
1882: PUSH
1883: LD_INT 1000
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PPUSH
1899: CALL_OW 69
1903: PUSH
1904: LD_INT 1
1906: ARRAY
1907: PPUSH
1908: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1912: LD_EXP 5
1916: PPUSH
1917: LD_STRING D2b-Khat-1
1919: PPUSH
1920: CALL_OW 88
// end ; end ;
1924: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
1925: LD_INT 15
1927: PPUSH
1928: LD_INT 22
1930: PUSH
1931: LD_INT 1
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PPUSH
1938: CALL_OW 70
1942: PUSH
1943: LD_INT 0
1945: GREATER
1946: IFFALSE 3106
1948: GO 1950
1950: DISABLE
1951: LD_INT 0
1953: PPUSH
1954: PPUSH
1955: PPUSH
1956: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: LD_INT 999
1964: PUSH
1965: LD_INT 999
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: EMPTY
1973: LIST
1974: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
1975: LD_ADDR_VAR 0 4
1979: PUSH
1980: LD_INT 22
1982: PUSH
1983: LD_INT 1
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 21
1992: PUSH
1993: LD_INT 1
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: PPUSH
2004: CALL_OW 69
2008: PUSH
2009: LD_EXP 1
2013: PUSH
2014: LD_EXP 2
2018: PUSH
2019: LD_EXP 3
2023: PUSH
2024: LD_EXP 4
2028: PUSH
2029: LD_EXP 5
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: DIFF
2041: ST_TO_ADDR
// PrepareDeadSoldiers ;
2042: CALL 10362 0 0
// spotCorpses = 1 ;
2046: LD_ADDR_EXP 29
2050: PUSH
2051: LD_INT 1
2053: ST_TO_ADDR
// InGameOn ;
2054: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2058: LD_INT 23
2060: PPUSH
2061: LD_INT 12
2063: PPUSH
2064: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2068: LD_ADDR_VAR 0 3
2072: PUSH
2073: LD_VAR 0 2
2077: PUSH
2078: LD_INT 1
2080: ARRAY
2081: PUSH
2082: LD_INT 2
2084: ARRAY
2085: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2086: LD_ADDR_VAR 0 1
2090: PUSH
2091: LD_INT 22
2093: PUSH
2094: LD_INT 1
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: PUSH
2101: LD_INT 21
2103: PUSH
2104: LD_INT 1
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PPUSH
2115: CALL_OW 69
2119: PUSH
2120: LD_EXP 1
2124: PUSH
2125: LD_EXP 5
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: DIFF
2134: PUSH
2135: FOR_IN
2136: IFFALSE 2187
// if IsOK ( i ) then
2138: LD_VAR 0 1
2142: PPUSH
2143: CALL_OW 302
2147: IFFALSE 2185
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2149: LD_ADDR_VAR 0 2
2153: PUSH
2154: LD_VAR 0 2
2158: PUSH
2159: LD_VAR 0 1
2163: PUSH
2164: LD_VAR 0 1
2168: PPUSH
2169: LD_INT 16
2171: PPUSH
2172: CALL_OW 299
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: PUSH
2181: EMPTY
2182: LIST
2183: ADD
2184: ST_TO_ADDR
2185: GO 2135
2187: POP
2188: POP
// for i = 2 to distanceTab do
2189: LD_ADDR_VAR 0 1
2193: PUSH
2194: DOUBLE
2195: LD_INT 2
2197: DEC
2198: ST_TO_ADDR
2199: LD_VAR 0 2
2203: PUSH
2204: FOR_TO
2205: IFFALSE 2251
// if distanceTab [ i ] [ 2 ] < min then
2207: LD_VAR 0 2
2211: PUSH
2212: LD_VAR 0 1
2216: ARRAY
2217: PUSH
2218: LD_INT 2
2220: ARRAY
2221: PUSH
2222: LD_VAR 0 3
2226: LESS
2227: IFFALSE 2249
// min = distanceTab [ i ] [ 2 ] ;
2229: LD_ADDR_VAR 0 3
2233: PUSH
2234: LD_VAR 0 2
2238: PUSH
2239: LD_VAR 0 1
2243: ARRAY
2244: PUSH
2245: LD_INT 2
2247: ARRAY
2248: ST_TO_ADDR
2249: GO 2204
2251: POP
2252: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2253: LD_ADDR_VAR 0 1
2257: PUSH
2258: LD_INT 22
2260: PUSH
2261: LD_INT 1
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PUSH
2268: LD_INT 21
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: PPUSH
2282: CALL_OW 69
2286: PUSH
2287: LD_EXP 1
2291: PUSH
2292: EMPTY
2293: LIST
2294: DIFF
2295: PUSH
2296: FOR_IN
2297: IFFALSE 2367
// begin ComMoveToArea ( i , DeadCutscene ) ;
2299: LD_VAR 0 1
2303: PPUSH
2304: LD_INT 28
2306: PPUSH
2307: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2311: LD_EXP 1
2315: PPUSH
2316: LD_INT 30
2318: PPUSH
2319: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2323: LD_VAR 0 1
2327: PPUSH
2328: LD_INT 23
2330: PPUSH
2331: LD_INT 11
2333: PPUSH
2334: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2338: LD_EXP 1
2342: PPUSH
2343: LD_INT 23
2345: PPUSH
2346: LD_INT 11
2348: PPUSH
2349: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2353: LD_EXP 30
2357: PPUSH
2358: LD_INT 250
2360: PPUSH
2361: CALL_OW 234
// end ;
2365: GO 2296
2367: POP
2368: POP
// for i = 2 to distanceTab do
2369: LD_ADDR_VAR 0 1
2373: PUSH
2374: DOUBLE
2375: LD_INT 2
2377: DEC
2378: ST_TO_ADDR
2379: LD_VAR 0 2
2383: PUSH
2384: FOR_TO
2385: IFFALSE 2771
// begin if distanceTab [ i ] [ 2 ] = min then
2387: LD_VAR 0 2
2391: PUSH
2392: LD_VAR 0 1
2396: ARRAY
2397: PUSH
2398: LD_INT 2
2400: ARRAY
2401: PUSH
2402: LD_VAR 0 3
2406: EQUAL
2407: IFFALSE 2769
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2409: LD_VAR 0 2
2413: PUSH
2414: LD_VAR 0 1
2418: ARRAY
2419: PUSH
2420: LD_INT 1
2422: ARRAY
2423: PUSH
2424: LD_EXP 2
2428: EQUAL
2429: IFFALSE 2443
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2431: LD_EXP 2
2435: PPUSH
2436: LD_STRING DCorpses-Bobby-1
2438: PPUSH
2439: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2443: LD_VAR 0 2
2447: PUSH
2448: LD_VAR 0 1
2452: ARRAY
2453: PUSH
2454: LD_INT 1
2456: ARRAY
2457: PUSH
2458: LD_EXP 3
2462: EQUAL
2463: IFFALSE 2477
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2465: LD_EXP 3
2469: PPUSH
2470: LD_STRING DCorpses-Cyrus-1
2472: PPUSH
2473: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2477: LD_VAR 0 2
2481: PUSH
2482: LD_VAR 0 1
2486: ARRAY
2487: PUSH
2488: LD_INT 1
2490: ARRAY
2491: PUSH
2492: LD_EXP 4
2496: EQUAL
2497: IFFALSE 2511
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2499: LD_EXP 4
2503: PPUSH
2504: LD_STRING DCorpses-Lisa-1
2506: PPUSH
2507: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2511: LD_VAR 0 2
2515: PUSH
2516: LD_VAR 0 1
2520: ARRAY
2521: PUSH
2522: LD_INT 1
2524: ARRAY
2525: PUSH
2526: LD_VAR 0 4
2530: PUSH
2531: LD_INT 1
2533: ARRAY
2534: EQUAL
2535: PUSH
2536: LD_VAR 0 4
2540: PUSH
2541: LD_INT 1
2543: ARRAY
2544: PPUSH
2545: CALL_OW 258
2549: PUSH
2550: LD_INT 1
2552: EQUAL
2553: AND
2554: IFFALSE 2572
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2556: LD_VAR 0 4
2560: PUSH
2561: LD_INT 1
2563: ARRAY
2564: PPUSH
2565: LD_STRING DCorpses-Sol1-1
2567: PPUSH
2568: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2572: LD_VAR 0 2
2576: PUSH
2577: LD_VAR 0 1
2581: ARRAY
2582: PUSH
2583: LD_INT 1
2585: ARRAY
2586: PUSH
2587: LD_VAR 0 4
2591: PUSH
2592: LD_INT 1
2594: ARRAY
2595: EQUAL
2596: PUSH
2597: LD_VAR 0 4
2601: PUSH
2602: LD_INT 1
2604: ARRAY
2605: PPUSH
2606: CALL_OW 258
2610: PUSH
2611: LD_INT 2
2613: EQUAL
2614: AND
2615: IFFALSE 2633
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2617: LD_VAR 0 4
2621: PUSH
2622: LD_INT 1
2624: ARRAY
2625: PPUSH
2626: LD_STRING DCorpses-FSol1-1
2628: PPUSH
2629: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2633: LD_VAR 0 2
2637: PUSH
2638: LD_VAR 0 1
2642: ARRAY
2643: PUSH
2644: LD_INT 1
2646: ARRAY
2647: PUSH
2648: LD_VAR 0 4
2652: PUSH
2653: LD_INT 2
2655: ARRAY
2656: EQUAL
2657: PUSH
2658: LD_VAR 0 4
2662: PUSH
2663: LD_INT 2
2665: ARRAY
2666: PPUSH
2667: CALL_OW 258
2671: PUSH
2672: LD_INT 1
2674: EQUAL
2675: AND
2676: IFFALSE 2694
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2678: LD_VAR 0 4
2682: PUSH
2683: LD_INT 2
2685: ARRAY
2686: PPUSH
2687: LD_STRING DCorpses-Sol1-1
2689: PPUSH
2690: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2694: LD_VAR 0 2
2698: PUSH
2699: LD_VAR 0 1
2703: ARRAY
2704: PUSH
2705: LD_INT 1
2707: ARRAY
2708: PUSH
2709: LD_VAR 0 4
2713: PUSH
2714: LD_INT 2
2716: ARRAY
2717: EQUAL
2718: PUSH
2719: LD_VAR 0 4
2723: PUSH
2724: LD_INT 2
2726: ARRAY
2727: PPUSH
2728: CALL_OW 258
2732: PUSH
2733: LD_INT 2
2735: EQUAL
2736: AND
2737: IFFALSE 2755
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2739: LD_VAR 0 4
2743: PUSH
2744: LD_INT 2
2746: ARRAY
2747: PPUSH
2748: LD_STRING DCorpses-FSol1-1
2750: PPUSH
2751: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2755: LD_EXP 30
2759: PPUSH
2760: LD_INT 150
2762: PPUSH
2763: CALL_OW 234
// break ;
2767: GO 2771
// end ; end ;
2769: GO 2384
2771: POP
2772: POP
// repeat wait ( 0 0$1 ) ;
2773: LD_INT 35
2775: PPUSH
2776: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2780: LD_ADDR_VAR 0 1
2784: PUSH
2785: LD_INT 22
2787: PUSH
2788: LD_INT 1
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: PUSH
2795: LD_INT 21
2797: PUSH
2798: LD_INT 1
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: PPUSH
2809: CALL_OW 69
2813: PUSH
2814: LD_EXP 1
2818: PUSH
2819: EMPTY
2820: LIST
2821: DIFF
2822: PUSH
2823: FOR_IN
2824: IFFALSE 2894
// begin ComMoveToArea ( i , DeadCutscene ) ;
2826: LD_VAR 0 1
2830: PPUSH
2831: LD_INT 28
2833: PPUSH
2834: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_INT 30
2845: PPUSH
2846: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2850: LD_VAR 0 1
2854: PPUSH
2855: LD_INT 23
2857: PPUSH
2858: LD_INT 11
2860: PPUSH
2861: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 23
2872: PPUSH
2873: LD_INT 11
2875: PPUSH
2876: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2880: LD_EXP 30
2884: PPUSH
2885: LD_INT 250
2887: PPUSH
2888: CALL_OW 234
// end ;
2892: GO 2823
2894: POP
2895: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2896: LD_EXP 1
2900: PPUSH
2901: LD_INT 30
2903: PPUSH
2904: CALL_OW 308
2908: IFFALSE 2773
// wait ( 0 0$3 ) ;
2910: LD_INT 105
2912: PPUSH
2913: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2917: LD_EXP 1
2921: PPUSH
2922: LD_STRING DCorpses-JMM-1
2924: PPUSH
2925: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2929: LD_EXP 30
2933: PPUSH
2934: LD_INT 150
2936: PPUSH
2937: CALL_OW 234
// if IsOK ( Khatam ) then
2941: LD_EXP 5
2945: PPUSH
2946: CALL_OW 302
2950: IFFALSE 3090
// begin repeat wait ( 0 0$1 ) ;
2952: LD_INT 35
2954: PPUSH
2955: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
2959: LD_EXP 5
2963: PPUSH
2964: LD_EXP 30
2968: PPUSH
2969: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
2973: LD_EXP 5
2977: PPUSH
2978: LD_EXP 30
2982: PPUSH
2983: CALL_OW 296
2987: PUSH
2988: LD_INT 2
2990: LESS
2991: IFFALSE 2952
// spotCorpses = 0 ;
2993: LD_ADDR_EXP 29
2997: PUSH
2998: LD_INT 0
3000: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3001: LD_EXP 30
3005: PPUSH
3006: LD_INT 10
3008: PPUSH
3009: CALL_OW 234
// wait ( 0 0$3 ) ;
3013: LD_INT 105
3015: PPUSH
3016: CALL_OW 67
// SetLives ( DyingSold , 0 ) ;
3020: LD_EXP 30
3024: PPUSH
3025: LD_INT 0
3027: PPUSH
3028: CALL_OW 234
// wait ( 0 0$1 ) ;
3032: LD_INT 35
3034: PPUSH
3035: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3039: LD_EXP 1
3043: PUSH
3044: LD_EXP 5
3048: PUSH
3049: EMPTY
3050: LIST
3051: LIST
3052: PPUSH
3053: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3057: LD_EXP 5
3061: PPUSH
3062: LD_EXP 1
3066: PPUSH
3067: CALL_OW 119
// wait ( 0 0$1 ) ;
3071: LD_INT 35
3073: PPUSH
3074: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3078: LD_EXP 5
3082: PPUSH
3083: LD_STRING DCorpses-Khat-1
3085: PPUSH
3086: CALL_OW 88
// end ; InGameOff ;
3090: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3094: LD_EXP 1
3098: PPUSH
3099: LD_STRING DCorpses-JMM-2
3101: PPUSH
3102: CALL_OW 88
// end ;
3106: PPOPN 4
3108: END
// every 0 0$1 trigger spotCorpses = 1 do
3109: LD_EXP 29
3113: PUSH
3114: LD_INT 1
3116: EQUAL
3117: IFFALSE 3135
3119: GO 3121
3121: DISABLE
// begin enable ;
3122: ENABLE
// SetLives ( DyingSold , 150 ) ;
3123: LD_EXP 30
3127: PPUSH
3128: LD_INT 150
3130: PPUSH
3131: CALL_OW 234
// end ;
3135: END
// every 1 trigger FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do var i ;
3136: LD_INT 8
3138: PPUSH
3139: LD_INT 22
3141: PUSH
3142: LD_INT 1
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: PPUSH
3149: CALL_OW 70
3153: PUSH
3154: LD_INT 0
3156: GREATER
3157: PUSH
3158: LD_INT 1
3160: PPUSH
3161: CALL_OW 255
3165: PUSH
3166: LD_INT 1
3168: EQUAL
3169: NOT
3170: AND
3171: PUSH
3172: LD_INT 10
3174: PPUSH
3175: CALL_OW 255
3179: PUSH
3180: LD_INT 1
3182: EQUAL
3183: NOT
3184: AND
3185: IFFALSE 3353
3187: GO 3189
3189: DISABLE
3190: LD_INT 0
3192: PPUSH
// begin InGameOn ;
3193: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3197: LD_EXP 7
3201: PPUSH
3202: LD_INT 250
3204: PPUSH
3205: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3209: LD_INT 3
3211: PPUSH
3212: LD_INT 4
3214: PPUSH
3215: LD_INT 2
3217: PPUSH
3218: LD_INT 1
3220: PPUSH
3221: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3225: LD_EXP 6
3229: PUSH
3230: LD_EXP 7
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PPUSH
3239: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3243: LD_ADDR_VAR 0 1
3247: PUSH
3248: LD_INT 9
3250: PPUSH
3251: LD_INT 22
3253: PUSH
3254: LD_INT 3
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PPUSH
3261: CALL_OW 70
3265: PUSH
3266: FOR_IN
3267: IFFALSE 3280
// ComFree ( i ) ;
3269: LD_VAR 0 1
3273: PPUSH
3274: CALL_OW 139
3278: GO 3266
3280: POP
3281: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3282: LD_ADDR_VAR 0 1
3286: PUSH
3287: LD_INT 22
3289: PUSH
3290: LD_INT 4
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: PPUSH
3297: CALL_OW 69
3301: PUSH
3302: FOR_IN
3303: IFFALSE 3316
// ComFree ( i ) ;
3305: LD_VAR 0 1
3309: PPUSH
3310: CALL_OW 139
3314: GO 3302
3316: POP
3317: POP
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// InGameOff ;
3325: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3329: LD_EXP 6
3333: PPUSH
3334: LD_STRING DF-Sol1-1
3336: PPUSH
3337: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DF-JMM-1
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 1
3355: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do
3356: LD_INT 19
3358: PPUSH
3359: LD_INT 22
3361: PUSH
3362: LD_INT 3
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PPUSH
3369: CALL_OW 70
3373: PUSH
3374: LD_INT 0
3376: EQUAL
3377: PUSH
3378: LD_INT 1
3380: PPUSH
3381: CALL_OW 255
3385: PUSH
3386: LD_INT 1
3388: EQUAL
3389: NOT
3390: AND
3391: PUSH
3392: LD_INT 10
3394: PPUSH
3395: CALL_OW 255
3399: PUSH
3400: LD_INT 1
3402: EQUAL
3403: NOT
3404: AND
3405: IFFALSE 3518
3407: GO 3409
3409: DISABLE
// begin if not IsDead ( Brian ) then
3410: LD_EXP 6
3414: PPUSH
3415: CALL_OW 301
3419: NOT
3420: IFFALSE 3434
// SetSide ( Brian , 1 ) ;
3422: LD_EXP 6
3426: PPUSH
3427: LD_INT 1
3429: PPUSH
3430: CALL_OW 235
// if not IsDead ( Jerry ) then
3434: LD_EXP 7
3438: PPUSH
3439: CALL_OW 301
3443: NOT
3444: IFFALSE 3458
// SetSide ( Jerry , 1 ) ;
3446: LD_EXP 7
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3458: LD_INT 22
3460: PUSH
3461: LD_INT 1
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: PUSH
3468: LD_INT 25
3470: PUSH
3471: LD_INT 4
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PPUSH
3482: CALL_OW 69
3486: PUSH
3487: LD_INT 0
3489: GREATER
3490: IFFALSE 3506
// begin Say ( JMM , DFa-JMM-1 ) ;
3492: LD_EXP 1
3496: PPUSH
3497: LD_STRING DFa-JMM-1
3499: PPUSH
3500: CALL_OW 88
// end else
3504: GO 3518
// begin Say ( JMM , DFa-JMM-1a ) ;
3506: LD_EXP 1
3510: PPUSH
3511: LD_STRING DFa-JMM-1a
3513: PPUSH
3514: CALL_OW 88
// end ; end ;
3518: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3519: LD_INT 19
3521: PPUSH
3522: LD_INT 22
3524: PUSH
3525: LD_INT 3
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: PPUSH
3532: CALL_OW 70
3536: PUSH
3537: LD_INT 0
3539: EQUAL
3540: PUSH
3541: LD_EXP 6
3545: PPUSH
3546: CALL_OW 302
3550: NOT
3551: AND
3552: IFFALSE 3629
3554: GO 3556
3556: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3557: LD_INT 35
3559: PPUSH
3560: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3564: LD_EXP 6
3568: PPUSH
3569: CALL_OW 256
3573: PUSH
3574: LD_INT 250
3576: GREATER
3577: IFFALSE 3557
// Say ( Brian , DFb-Sol1-1 ) ;
3579: LD_EXP 6
3583: PPUSH
3584: LD_STRING DFb-Sol1-1
3586: PPUSH
3587: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3591: LD_EXP 6
3595: PPUSH
3596: LD_INT 78
3598: PPUSH
3599: LD_INT 74
3601: PPUSH
3602: CALL_OW 111
// if IsDead ( Jerry ) then
3606: LD_EXP 7
3610: PPUSH
3611: CALL_OW 301
3615: IFFALSE 3629
// Say ( Brian , DFb-Sol1-1a ) end ;
3617: LD_EXP 6
3621: PPUSH
3622: LD_STRING DFb-Sol1-1a
3624: PPUSH
3625: CALL_OW 88
3629: END
// every 0 0$1 do var i ;
3630: GO 3632
3632: DISABLE
3633: LD_INT 0
3635: PPUSH
// begin enable ;
3636: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3637: LD_ADDR_VAR 0 1
3641: PUSH
3642: LD_INT 22
3644: PUSH
3645: LD_INT 3
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PUSH
3652: LD_INT 21
3654: PUSH
3655: LD_INT 3
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PUSH
3662: LD_INT 30
3664: PUSH
3665: LD_INT 31
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: LIST
3676: PPUSH
3677: CALL_OW 69
3681: PUSH
3682: FOR_IN
3683: IFFALSE 3714
// begin if See ( 1 , i ) then
3685: LD_INT 1
3687: PPUSH
3688: LD_VAR 0 1
3692: PPUSH
3693: CALL_OW 292
3697: IFFALSE 3712
// begin disable ;
3699: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3700: LD_EXP 1
3704: PPUSH
3705: LD_STRING DX1-JMM-1
3707: PPUSH
3708: CALL_OW 88
// end ; end ;
3712: GO 3682
3714: POP
3715: POP
// end ;
3716: PPOPN 1
3718: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3719: LD_INT 1
3721: PPUSH
3722: LD_INT 11
3724: PPUSH
3725: CALL_OW 294
3729: IFFALSE 4092
3731: GO 3733
3733: DISABLE
3734: LD_INT 0
3736: PPUSH
3737: PPUSH
// begin DialogueOn ;
3738: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3742: LD_INT 11
3744: PPUSH
3745: LD_INT 22
3747: PUSH
3748: LD_INT 3
3750: PUSH
3751: EMPTY
3752: LIST
3753: LIST
3754: PUSH
3755: LD_INT 21
3757: PUSH
3758: LD_INT 1
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: PPUSH
3769: CALL_OW 70
3773: PUSH
3774: LD_INT 1
3776: ARRAY
3777: PPUSH
3778: LD_STRING DX3-Rus1-1
3780: PPUSH
3781: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3785: LD_EXP 1
3789: PPUSH
3790: LD_STRING DX3-JMM-1
3792: PPUSH
3793: CALL_OW 88
// DialogueOff ;
3797: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3801: LD_ADDR_VAR 0 1
3805: PUSH
3806: LD_INT 11
3808: PPUSH
3809: LD_INT 22
3811: PUSH
3812: LD_INT 3
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: PUSH
3819: LD_INT 21
3821: PUSH
3822: LD_INT 1
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PPUSH
3833: CALL_OW 70
3837: PUSH
3838: FOR_IN
3839: IFFALSE 3859
// southBaseDefenders = southBaseDefenders ^ i ;
3841: LD_ADDR_EXP 25
3845: PUSH
3846: LD_EXP 25
3850: PUSH
3851: LD_VAR 0 1
3855: ADD
3856: ST_TO_ADDR
3857: GO 3838
3859: POP
3860: POP
// wait ( [ 0 0$10 , 0 0$15 , 0 0$20 ] [ Difficulty ] ) ;
3861: LD_INT 350
3863: PUSH
3864: LD_INT 525
3866: PUSH
3867: LD_INT 700
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: PUSH
3875: LD_OWVAR 67
3879: ARRAY
3880: PPUSH
3881: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3885: LD_INT 35
3887: PPUSH
3888: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
3892: LD_ADDR_VAR 0 1
3896: PUSH
3897: LD_INT 22
3899: PUSH
3900: LD_INT 3
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: PUSH
3907: LD_INT 21
3909: PUSH
3910: LD_INT 2
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: PUSH
3917: LD_INT 58
3919: PUSH
3920: EMPTY
3921: LIST
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: PPUSH
3928: CALL_OW 69
3932: PUSH
3933: FOR_IN
3934: IFFALSE 4004
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
3936: LD_ADDR_VAR 0 2
3940: PUSH
3941: LD_INT 22
3943: PUSH
3944: LD_INT 3
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 21
3953: PUSH
3954: LD_INT 1
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: PUSH
3961: LD_INT 25
3963: PUSH
3964: LD_INT 3
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: LIST
3975: PPUSH
3976: CALL_OW 69
3980: PUSH
3981: FOR_IN
3982: IFFALSE 4000
// begin ComEnterUnit ( j , i ) ;
3984: LD_VAR 0 2
3988: PPUSH
3989: LD_VAR 0 1
3993: PPUSH
3994: CALL_OW 120
// end ;
3998: GO 3981
4000: POP
4001: POP
// end ;
4002: GO 3933
4004: POP
4005: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4006: LD_INT 22
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PUSH
4016: LD_INT 21
4018: PUSH
4019: LD_INT 2
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 58
4028: PUSH
4029: EMPTY
4030: LIST
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: LIST
4036: PPUSH
4037: CALL_OW 69
4041: PUSH
4042: LD_INT 0
4044: EQUAL
4045: PUSH
4046: LD_INT 22
4048: PUSH
4049: LD_INT 3
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: PUSH
4056: LD_INT 21
4058: PUSH
4059: LD_INT 1
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: PUSH
4066: LD_INT 25
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: LIST
4080: PPUSH
4081: CALL_OW 69
4085: PUSH
4086: LD_INT 0
4088: EQUAL
4089: OR
4090: IFFALSE 3885
// end ;
4092: PPOPN 2
4094: END
// every 0 0$1 trigger FilterUnitsInArea ( SouthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 do
4095: LD_INT 23
4097: PPUSH
4098: LD_INT 22
4100: PUSH
4101: LD_INT 3
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 21
4110: PUSH
4111: LD_INT 1
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 25
4120: PUSH
4121: LD_INT 3
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: PPUSH
4133: CALL_OW 70
4137: PUSH
4138: LD_INT 0
4140: EQUAL
4141: IFFALSE 4195
4143: GO 4145
4145: DISABLE
// begin if IsOK ( Bobby ) then
4146: LD_EXP 2
4150: PPUSH
4151: CALL_OW 302
4155: IFFALSE 4183
// begin Say ( Bobby , DX2-Bobby-1 ) ;
4157: LD_EXP 2
4161: PPUSH
4162: LD_STRING DX2-Bobby-1
4164: PPUSH
4165: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4169: LD_EXP 1
4173: PPUSH
4174: LD_STRING DX2-JMM-1a
4176: PPUSH
4177: CALL_OW 88
// end else
4181: GO 4195
// begin Say ( JMM , DX2-JMM-1 ) ;
4183: LD_EXP 1
4187: PPUSH
4188: LD_STRING DX2-JMM-1
4190: PPUSH
4191: CALL_OW 88
// end ; end ;
4195: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4196: LD_INT 22
4198: PUSH
4199: LD_INT 1
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 23
4208: PUSH
4209: LD_INT 3
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: LD_INT 21
4218: PUSH
4219: LD_INT 2
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: LD_INT 34
4228: PUSH
4229: LD_INT 42
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: PPUSH
4242: CALL_OW 69
4246: PUSH
4247: LD_INT 1
4249: GREATEREQUAL
4250: IFFALSE 4693
4252: GO 4254
4254: DISABLE
4255: LD_INT 0
4257: PPUSH
4258: PPUSH
4259: PPUSH
4260: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4261: LD_ADDR_VAR 0 1
4265: PUSH
4266: LD_INT 22
4268: PUSH
4269: LD_INT 1
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: PUSH
4276: LD_INT 23
4278: PUSH
4279: LD_INT 3
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: PUSH
4286: LD_INT 21
4288: PUSH
4289: LD_INT 2
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 34
4298: PUSH
4299: LD_INT 42
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: PPUSH
4312: CALL_OW 69
4316: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4317: LD_ADDR_VAR 0 2
4321: PUSH
4322: LD_INT 22
4324: PUSH
4325: LD_INT 1
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: LD_INT 21
4334: PUSH
4335: LD_INT 1
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PUSH
4342: LD_INT 26
4344: PUSH
4345: LD_INT 1
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: PPUSH
4357: CALL_OW 69
4361: PUSH
4362: LD_EXP 1
4366: PUSH
4367: LD_EXP 3
4371: PUSH
4372: LD_EXP 2
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: LIST
4381: DIFF
4382: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4383: LD_ADDR_VAR 0 3
4387: PUSH
4388: LD_INT 22
4390: PUSH
4391: LD_INT 1
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PUSH
4398: LD_INT 21
4400: PUSH
4401: LD_INT 1
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: LD_INT 26
4410: PUSH
4411: LD_INT 2
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: PUSH
4428: LD_EXP 4
4432: PUSH
4433: EMPTY
4434: LIST
4435: DIFF
4436: ST_TO_ADDR
// Say ( JMM , DX2a-JMM-1 ) ;
4437: LD_EXP 1
4441: PPUSH
4442: LD_STRING DX2a-JMM-1
4444: PPUSH
4445: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4449: LD_EXP 2
4453: PPUSH
4454: CALL_OW 310
4458: PUSH
4459: LD_VAR 0 1
4463: PUSH
4464: LD_INT 1
4466: ARRAY
4467: EQUAL
4468: IFFALSE 4482
// Say ( Bobby , DX2a-Bobby-1 ) ;
4470: LD_EXP 2
4474: PPUSH
4475: LD_STRING DX2a-Bobby-1
4477: PPUSH
4478: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4482: LD_EXP 3
4486: PPUSH
4487: CALL_OW 310
4491: PUSH
4492: LD_VAR 0 1
4496: PUSH
4497: LD_INT 1
4499: ARRAY
4500: EQUAL
4501: IFFALSE 4515
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4503: LD_EXP 3
4507: PPUSH
4508: LD_STRING DX2a-Cyrus-1
4510: PPUSH
4511: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4515: LD_EXP 4
4519: PPUSH
4520: CALL_OW 310
4524: PUSH
4525: LD_VAR 0 1
4529: PUSH
4530: LD_INT 1
4532: ARRAY
4533: EQUAL
4534: IFFALSE 4548
// Say ( Lisa , DX2a-Lisa-1 ) ;
4536: LD_EXP 4
4540: PPUSH
4541: LD_STRING DX2a-Lisa-1
4543: PPUSH
4544: CALL_OW 88
// for i in temp1 do
4548: LD_ADDR_VAR 0 4
4552: PUSH
4553: LD_VAR 0 2
4557: PUSH
4558: FOR_IN
4559: IFFALSE 4596
// if IsInUnit ( i ) = tmp [ 1 ] then
4561: LD_VAR 0 4
4565: PPUSH
4566: CALL_OW 310
4570: PUSH
4571: LD_VAR 0 1
4575: PUSH
4576: LD_INT 1
4578: ARRAY
4579: EQUAL
4580: IFFALSE 4594
// Say ( i , DX2a-Sol1-1 ) ;
4582: LD_VAR 0 4
4586: PPUSH
4587: LD_STRING DX2a-Sol1-1
4589: PPUSH
4590: CALL_OW 88
4594: GO 4558
4596: POP
4597: POP
// for i in temp2 do
4598: LD_ADDR_VAR 0 4
4602: PUSH
4603: LD_VAR 0 3
4607: PUSH
4608: FOR_IN
4609: IFFALSE 4646
// if IsInUnit ( i ) = tmp [ 1 ] then
4611: LD_VAR 0 4
4615: PPUSH
4616: CALL_OW 310
4620: PUSH
4621: LD_VAR 0 1
4625: PUSH
4626: LD_INT 1
4628: ARRAY
4629: EQUAL
4630: IFFALSE 4644
// Say ( i , DX2a-FSol1-1 ) ;
4632: LD_VAR 0 4
4636: PPUSH
4637: LD_STRING DX2a-FSol1-1
4639: PPUSH
4640: CALL_OW 88
4644: GO 4608
4646: POP
4647: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4648: LD_EXP 1
4652: PPUSH
4653: CALL_OW 310
4657: PUSH
4658: LD_VAR 0 1
4662: PUSH
4663: LD_INT 1
4665: ARRAY
4666: EQUAL
4667: IFFALSE 4681
// Say ( JMM , DX2b-JMM-1 ) ;
4669: LD_EXP 1
4673: PPUSH
4674: LD_STRING DX2b-JMM-1
4676: PPUSH
4677: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4681: LD_EXP 1
4685: PPUSH
4686: LD_STRING DX2a-JMM-2
4688: PPUSH
4689: CALL_OW 88
// end ;
4693: PPOPN 4
4695: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4696: LD_INT 1
4698: PPUSH
4699: CALL_OW 255
4703: PUSH
4704: LD_INT 1
4706: EQUAL
4707: PUSH
4708: LD_INT 10
4710: PPUSH
4711: CALL_OW 255
4715: PUSH
4716: LD_INT 1
4718: EQUAL
4719: OR
4720: IFFALSE 4780
4722: GO 4724
4724: DISABLE
// begin DialogueOn ;
4725: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4729: LD_EXP 1
4733: PPUSH
4734: LD_STRING D3-JMM-1
4736: PPUSH
4737: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4741: LD_EXP 9
4745: PPUSH
4746: LD_STRING D3-Pow-1
4748: PPUSH
4749: CALL_OW 94
// if IsOK ( Cyrus ) then
4753: LD_EXP 3
4757: PPUSH
4758: CALL_OW 302
4762: IFFALSE 4776
// Say ( Cyrus , D3-Cyrus-1 ) ;
4764: LD_EXP 3
4768: PPUSH
4769: LD_STRING D3-Cyrus-1
4771: PPUSH
4772: CALL_OW 88
// DialogueOff ;
4776: CALL_OW 7
// end ;
4780: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , i ;
4781: LD_INT 1
4783: PPUSH
4784: CALL_OW 255
4788: PUSH
4789: LD_INT 1
4791: EQUAL
4792: PUSH
4793: LD_INT 10
4795: PPUSH
4796: CALL_OW 255
4800: PUSH
4801: LD_INT 1
4803: EQUAL
4804: AND
4805: IFFALSE 5987
4807: GO 4809
4809: DISABLE
4810: LD_INT 0
4812: PPUSH
4813: PPUSH
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) diff [ JMM ] ;
4814: LD_ADDR_VAR 0 1
4818: PUSH
4819: LD_INT 22
4821: PUSH
4822: LD_INT 1
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 23
4831: PUSH
4832: LD_INT 1
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: LD_INT 25
4841: PUSH
4842: LD_INT 2
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: PPUSH
4854: CALL_OW 69
4858: PUSH
4859: LD_EXP 1
4863: PUSH
4864: EMPTY
4865: LIST
4866: DIFF
4867: ST_TO_ADDR
// DialogueOn ;
4868: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
4872: LD_EXP 1
4876: PPUSH
4877: LD_STRING D3a-JMM-1
4879: PPUSH
4880: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
4884: LD_EXP 9
4888: PPUSH
4889: LD_STRING D3a-Pow-1
4891: PPUSH
4892: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
4896: LD_EXP 1
4900: PPUSH
4901: LD_STRING D3a-JMM-2
4903: PPUSH
4904: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
4908: LD_EXP 9
4912: PPUSH
4913: LD_STRING D3a-Pow-2
4915: PPUSH
4916: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
4920: LD_EXP 1
4924: PPUSH
4925: LD_STRING D3a-JMM-3
4927: PPUSH
4928: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
4932: LD_EXP 9
4936: PPUSH
4937: LD_STRING D3a-Pow-3
4939: PPUSH
4940: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
4944: LD_EXP 1
4948: PPUSH
4949: LD_STRING D3a-JMM-4
4951: PPUSH
4952: CALL_OW 88
// DialogueOff ;
4956: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4960: LD_STRING M2
4962: PPUSH
4963: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
4967: LD_EXP 1
4971: PPUSH
4972: LD_STRING D3b-JMM-1
4974: PPUSH
4975: CALL_OW 88
// wait ( 0 0$5 ) ;
4979: LD_INT 175
4981: PPUSH
4982: CALL_OW 67
// InGameOn ;
4986: CALL_OW 8
// PrepareRussianHeroes ;
4990: CALL 10519 0 0
// CenterNowOnUnits ( Mikhail ) ;
4994: LD_EXP 8
4998: PPUSH
4999: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5003: LD_EXP 1
5007: PUSH
5008: LD_VAR 0 1
5012: PUSH
5013: LD_INT 1
5015: ARRAY
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: LD_EXP 8
5025: PPUSH
5026: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5030: LD_EXP 8
5034: PPUSH
5035: LD_VAR 0 1
5039: PUSH
5040: LD_INT 1
5042: ARRAY
5043: PPUSH
5044: CALL_OW 119
// Say ( Mikhail , D4-Mikh-1 ) ;
5048: LD_EXP 8
5052: PPUSH
5053: LD_STRING D4-Mikh-1
5055: PPUSH
5056: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5060: LD_VAR 0 1
5064: PUSH
5065: LD_INT 1
5067: ARRAY
5068: PPUSH
5069: CALL_OW 258
5073: PUSH
5074: LD_INT 1
5076: EQUAL
5077: IFFALSE 5095
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5079: LD_VAR 0 1
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PPUSH
5088: LD_STRING D4-Sol1-1
5090: PPUSH
5091: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5095: LD_VAR 0 1
5099: PUSH
5100: LD_INT 1
5102: ARRAY
5103: PPUSH
5104: CALL_OW 258
5108: PUSH
5109: LD_INT 2
5111: EQUAL
5112: IFFALSE 5130
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5114: LD_VAR 0 1
5118: PUSH
5119: LD_INT 1
5121: ARRAY
5122: PPUSH
5123: LD_STRING D4-FSol1-1
5125: PPUSH
5126: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5130: LD_EXP 8
5134: PPUSH
5135: LD_STRING D4-Mikh-2
5137: PPUSH
5138: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5142: LD_VAR 0 1
5146: PUSH
5147: LD_INT 1
5149: ARRAY
5150: PPUSH
5151: CALL_OW 258
5155: PUSH
5156: LD_INT 1
5158: EQUAL
5159: IFFALSE 5177
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5161: LD_VAR 0 1
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: LD_STRING D4-Sol1-2
5172: PPUSH
5173: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5177: LD_VAR 0 1
5181: PUSH
5182: LD_INT 1
5184: ARRAY
5185: PPUSH
5186: CALL_OW 258
5190: PUSH
5191: LD_INT 2
5193: EQUAL
5194: IFFALSE 5212
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5196: LD_VAR 0 1
5200: PUSH
5201: LD_INT 1
5203: ARRAY
5204: PPUSH
5205: LD_STRING D4-FSol1-2
5207: PPUSH
5208: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5212: LD_EXP 8
5216: PPUSH
5217: LD_STRING D4-Mikh-3
5219: PPUSH
5220: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5224: LD_VAR 0 1
5228: PUSH
5229: LD_INT 1
5231: ARRAY
5232: PPUSH
5233: CALL_OW 258
5237: PUSH
5238: LD_INT 1
5240: EQUAL
5241: IFFALSE 5259
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5243: LD_VAR 0 1
5247: PUSH
5248: LD_INT 1
5250: ARRAY
5251: PPUSH
5252: LD_STRING D4-Sol1-3
5254: PPUSH
5255: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5259: LD_VAR 0 1
5263: PUSH
5264: LD_INT 1
5266: ARRAY
5267: PPUSH
5268: CALL_OW 258
5272: PUSH
5273: LD_INT 2
5275: EQUAL
5276: IFFALSE 5294
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5278: LD_VAR 0 1
5282: PUSH
5283: LD_INT 1
5285: ARRAY
5286: PPUSH
5287: LD_STRING D4-FSol1-3
5289: PPUSH
5290: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5294: LD_EXP 8
5298: PPUSH
5299: LD_STRING D4-Mikh-4
5301: PPUSH
5302: CALL_OW 88
// case query ( Qs1 ) of 1 :
5306: LD_STRING Qs1
5308: PPUSH
5309: CALL_OW 97
5313: PUSH
5314: LD_INT 1
5316: DOUBLE
5317: EQUAL
5318: IFTRUE 5322
5320: GO 5357
5322: POP
// begin InGameOff ;
5323: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5327: LD_INT 1
5329: PPUSH
5330: LD_INT 6
5332: PPUSH
5333: LD_INT 2
5335: PPUSH
5336: LD_INT 1
5338: PPUSH
5339: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5343: LD_EXP 8
5347: PPUSH
5348: LD_INT 17
5350: PPUSH
5351: CALL_OW 113
// end ; 2 :
5355: GO 5979
5357: LD_INT 2
5359: DOUBLE
5360: EQUAL
5361: IFTRUE 5365
5363: GO 5944
5365: POP
// begin repeat wait ( 0 0$1 ) ;
5366: LD_INT 35
5368: PPUSH
5369: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5373: LD_VAR 0 1
5377: PUSH
5378: LD_INT 1
5380: ARRAY
5381: PPUSH
5382: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5386: LD_VAR 0 1
5390: PUSH
5391: LD_INT 1
5393: ARRAY
5394: PPUSH
5395: LD_EXP 1
5399: PPUSH
5400: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5404: LD_EXP 8
5408: PPUSH
5409: LD_EXP 1
5413: PPUSH
5414: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5418: LD_EXP 1
5422: PPUSH
5423: LD_EXP 8
5427: PPUSH
5428: CALL_OW 296
5432: PUSH
5433: LD_INT 5
5435: LESS
5436: IFFALSE 5366
// ComTurnUnit ( Mikhail , JMM ) ;
5438: LD_EXP 8
5442: PPUSH
5443: LD_EXP 1
5447: PPUSH
5448: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5452: LD_EXP 1
5456: PPUSH
5457: LD_STRING D4b-JMM-1
5459: PPUSH
5460: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5464: LD_EXP 8
5468: PPUSH
5469: LD_STRING D4b-Mikh-1
5471: PPUSH
5472: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5476: LD_EXP 1
5480: PPUSH
5481: LD_STRING D4b-JMM-2
5483: PPUSH
5484: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5488: LD_EXP 8
5492: PPUSH
5493: LD_STRING D4b-Mikh-2
5495: PPUSH
5496: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5500: LD_EXP 1
5504: PPUSH
5505: LD_STRING D4b-JMM-3
5507: PPUSH
5508: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5512: LD_EXP 8
5516: PPUSH
5517: LD_STRING D4b-Mikh-3
5519: PPUSH
5520: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5524: LD_EXP 1
5528: PPUSH
5529: LD_STRING D4b-JMM-4
5531: PPUSH
5532: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5536: LD_EXP 8
5540: PPUSH
5541: LD_STRING D4b-Mikh-4
5543: PPUSH
5544: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5548: LD_EXP 1
5552: PPUSH
5553: LD_STRING D4b-JMM-5
5555: PPUSH
5556: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5560: LD_EXP 8
5564: PPUSH
5565: LD_STRING D4b-Mikh-5
5567: PPUSH
5568: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5572: LD_EXP 1
5576: PPUSH
5577: LD_STRING D4b-JMM-6
5579: PPUSH
5580: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5584: LD_EXP 8
5588: PPUSH
5589: LD_STRING D4b-Mikh-6
5591: PPUSH
5592: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5596: LD_EXP 1
5600: PPUSH
5601: LD_STRING D4b-JMM-7
5603: PPUSH
5604: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5608: LD_EXP 8
5612: PPUSH
5613: LD_STRING D4b-Mikh-7
5615: PPUSH
5616: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5620: LD_VAR 0 1
5624: PUSH
5625: LD_INT 1
5627: ARRAY
5628: PPUSH
5629: CALL_OW 258
5633: PUSH
5634: LD_INT 1
5636: EQUAL
5637: IFFALSE 5655
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5639: LD_VAR 0 1
5643: PUSH
5644: LD_INT 1
5646: ARRAY
5647: PPUSH
5648: LD_STRING D4b-Sol1-7
5650: PPUSH
5651: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5655: LD_VAR 0 1
5659: PUSH
5660: LD_INT 1
5662: ARRAY
5663: PPUSH
5664: CALL_OW 258
5668: PUSH
5669: LD_INT 2
5671: EQUAL
5672: IFFALSE 5690
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5674: LD_VAR 0 1
5678: PUSH
5679: LD_INT 1
5681: ARRAY
5682: PPUSH
5683: LD_STRING D4b-FSol1-7
5685: PPUSH
5686: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5690: LD_EXP 1
5694: PPUSH
5695: LD_STRING D4b-JMM-8
5697: PPUSH
5698: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5702: LD_VAR 0 1
5706: PUSH
5707: LD_INT 1
5709: ARRAY
5710: PPUSH
5711: CALL_OW 258
5715: PUSH
5716: LD_INT 1
5718: EQUAL
5719: IFFALSE 5737
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5721: LD_VAR 0 1
5725: PUSH
5726: LD_INT 1
5728: ARRAY
5729: PPUSH
5730: LD_STRING D4b-Sol1-8
5732: PPUSH
5733: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5737: LD_VAR 0 1
5741: PUSH
5742: LD_INT 1
5744: ARRAY
5745: PPUSH
5746: CALL_OW 258
5750: PUSH
5751: LD_INT 2
5753: EQUAL
5754: IFFALSE 5772
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
5756: LD_VAR 0 1
5760: PUSH
5761: LD_INT 1
5763: ARRAY
5764: PPUSH
5765: LD_STRING D4b-FSol1-8
5767: PPUSH
5768: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
5772: LD_EXP 1
5776: PPUSH
5777: LD_STRING D4b-JMM-9
5779: PPUSH
5780: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
5784: LD_EXP 8
5788: PPUSH
5789: LD_INT 1
5791: PPUSH
5792: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5796: LD_ADDR_VAR 0 2
5800: PUSH
5801: LD_INT 22
5803: PUSH
5804: LD_INT 1
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: PUSH
5811: EMPTY
5812: LIST
5813: PPUSH
5814: CALL_OW 69
5818: PUSH
5819: FOR_IN
5820: IFFALSE 5833
// ComFree ( i ) ;
5822: LD_VAR 0 2
5826: PPUSH
5827: CALL_OW 139
5831: GO 5819
5833: POP
5834: POP
// repeat wait ( 0 0$1 ) ;
5835: LD_INT 35
5837: PPUSH
5838: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
5842: LD_EXP 8
5846: PPUSH
5847: CALL_OW 87
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
5851: LD_EXP 8
5855: PPUSH
5856: LD_INT 1
5858: PPUSH
5859: CALL_OW 296
5863: PUSH
5864: LD_EXP 8
5868: PPUSH
5869: LD_INT 10
5871: PPUSH
5872: CALL_OW 296
5876: LESS
5877: IFFALSE 5893
// begin ComEnterUnit ( Mikhail , dep1 ) ;
5879: LD_EXP 8
5883: PPUSH
5884: LD_INT 1
5886: PPUSH
5887: CALL_OW 120
// end else
5891: GO 5905
// begin ComEnterUnit ( Mikhail , dep2 ) ;
5893: LD_EXP 8
5897: PPUSH
5898: LD_INT 10
5900: PPUSH
5901: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
5905: LD_EXP 8
5909: PPUSH
5910: CALL_OW 310
5914: IFFALSE 5835
// mikhailDepot = IsInUnit ( Mikhail ) ;
5916: LD_ADDR_EXP 23
5920: PUSH
5921: LD_EXP 8
5925: PPUSH
5926: CALL_OW 310
5930: ST_TO_ADDR
// InGameOff ;
5931: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
5935: LD_STRING M3
5937: PPUSH
5938: CALL_OW 337
// end ; 3 :
5942: GO 5979
5944: LD_INT 3
5946: DOUBLE
5947: EQUAL
5948: IFTRUE 5952
5950: GO 5978
5952: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
5953: LD_EXP 8
5957: PPUSH
5958: LD_INT 17
5960: PPUSH
5961: CALL_OW 113
// wait ( 0 0$3 ) ;
5965: LD_INT 105
5967: PPUSH
5968: CALL_OW 67
// InGameOff ;
5972: CALL_OW 9
// end ; end ;
5976: GO 5979
5978: POP
// PrepareTigers ;
5979: CALL 12770 0 0
// RussianTrap ;
5983: CALL 9146 0 0
// end ;
5987: PPOPN 2
5989: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
5990: LD_INT 1
5992: PPUSH
5993: CALL_OW 255
5997: PUSH
5998: LD_INT 1
6000: EQUAL
6001: PUSH
6002: LD_INT 10
6004: PPUSH
6005: CALL_OW 255
6009: PUSH
6010: LD_INT 1
6012: EQUAL
6013: AND
6014: PUSH
6015: LD_INT 1
6017: PPUSH
6018: CALL_OW 274
6022: PPUSH
6023: LD_INT 1
6025: PPUSH
6026: CALL_OW 275
6030: PUSH
6031: LD_INT 100
6033: GREATEREQUAL
6034: AND
6035: IFFALSE 6169
6037: GO 6039
6039: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6040: LD_INT 2100
6042: PPUSH
6043: LD_INT 4200
6045: PPUSH
6046: CALL_OW 12
6050: PUSH
6051: LD_INT 1050
6053: PLUS
6054: PPUSH
6055: CALL_OW 67
// PrepareCargoBays ;
6059: CALL 11635 0 0
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6063: LD_EXP 15
6067: PUSH
6068: LD_EXP 16
6072: PUSH
6073: LD_EXP 17
6077: PUSH
6078: LD_EXP 18
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PPUSH
6089: LD_INT 53
6091: PPUSH
6092: LD_INT 16
6094: PPUSH
6095: CALL_OW 111
// wait ( 0 0$5 ) ;
6099: LD_INT 175
6101: PPUSH
6102: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6106: LD_EXP 17
6110: PPUSH
6111: LD_STRING D5-Rus2-1
6113: PPUSH
6114: CALL_OW 88
// wait ( 0 0$9 ) ;
6118: LD_INT 315
6120: PPUSH
6121: CALL_OW 67
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6125: LD_EXP 15
6129: PUSH
6130: LD_EXP 16
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PPUSH
6139: LD_INT 7
6141: PPUSH
6142: LD_INT 9
6144: PPUSH
6145: CALL_OW 111
// Say ( driver1 , D5-Rus2-1a ) ;
6149: LD_EXP 17
6153: PPUSH
6154: LD_STRING D5-Rus2-1a
6156: PPUSH
6157: CALL_OW 88
// cargoEscape = 1 ;
6161: LD_ADDR_EXP 20
6165: PUSH
6166: LD_INT 1
6168: ST_TO_ADDR
// end ;
6169: END
// every 0 0$1 trigger cargoEscape > 0 do
6170: LD_EXP 20
6174: PUSH
6175: LD_INT 0
6177: GREATER
6178: IFFALSE 6304
6180: GO 6182
6182: DISABLE
// begin enable ;
6183: ENABLE
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6184: LD_EXP 15
6188: PPUSH
6189: LD_INT 13
6191: PPUSH
6192: CALL_OW 308
6196: PUSH
6197: LD_EXP 17
6201: PPUSH
6202: LD_INT 13
6204: PPUSH
6205: CALL_OW 308
6209: OR
6210: IFFALSE 6244
// begin RemoveUnit ( cargo1 ) ;
6212: LD_EXP 15
6216: PPUSH
6217: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6221: LD_EXP 17
6225: PPUSH
6226: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6230: LD_ADDR_EXP 20
6234: PUSH
6235: LD_EXP 20
6239: PUSH
6240: LD_INT 1
6242: PLUS
6243: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6244: LD_EXP 16
6248: PPUSH
6249: LD_INT 13
6251: PPUSH
6252: CALL_OW 308
6256: PUSH
6257: LD_EXP 18
6261: PPUSH
6262: LD_INT 13
6264: PPUSH
6265: CALL_OW 308
6269: OR
6270: IFFALSE 6304
// begin RemoveUnit ( cargo2 ) ;
6272: LD_EXP 16
6276: PPUSH
6277: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6281: LD_EXP 18
6285: PPUSH
6286: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6290: LD_ADDR_EXP 20
6294: PUSH
6295: LD_EXP 20
6299: PUSH
6300: LD_INT 1
6302: PLUS
6303: ST_TO_ADDR
// end ; end ;
6304: END
// every 0 0$1 trigger cargoEscape > 1 do
6305: LD_EXP 20
6309: PUSH
6310: LD_INT 1
6312: GREATER
6313: IFFALSE 6451
6315: GO 6317
6317: DISABLE
// begin if IsOK ( Jerry ) then
6318: LD_EXP 7
6322: PPUSH
6323: CALL_OW 302
6327: IFFALSE 6343
// begin Say ( Jerry , D5a-Sol1-1 ) ;
6329: LD_EXP 7
6333: PPUSH
6334: LD_STRING D5a-Sol1-1
6336: PPUSH
6337: CALL_OW 88
// end else
6341: GO 6439
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
6343: LD_INT 22
6345: PUSH
6346: LD_INT 1
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PUSH
6353: LD_INT 23
6355: PUSH
6356: LD_INT 1
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PUSH
6363: LD_INT 26
6365: PUSH
6366: LD_INT 1
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: LIST
6377: PPUSH
6378: CALL_OW 69
6382: PUSH
6383: LD_INT 2
6385: PPUSH
6386: LD_INT 22
6388: PUSH
6389: LD_INT 1
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 23
6398: PUSH
6399: LD_INT 1
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: PUSH
6406: LD_INT 26
6408: PUSH
6409: LD_INT 1
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: LIST
6420: PPUSH
6421: CALL_OW 69
6425: PPUSH
6426: CALL_OW 12
6430: ARRAY
6431: PPUSH
6432: LD_STRING D5a-Sol1-1
6434: PPUSH
6435: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6439: LD_EXP 1
6443: PPUSH
6444: LD_STRING D5a-JMM-1
6446: PPUSH
6447: CALL_OW 88
// end ;
6451: END
// every 0 0$1 trigger GetLives ( dep1 ) < 1000 or GetLives ( dep2 ) < 1000 do
6452: LD_INT 1
6454: PPUSH
6455: CALL_OW 256
6459: PUSH
6460: LD_INT 1000
6462: LESS
6463: PUSH
6464: LD_INT 10
6466: PPUSH
6467: CALL_OW 256
6471: PUSH
6472: LD_INT 1000
6474: LESS
6475: OR
6476: IFFALSE 6493
6478: GO 6480
6480: DISABLE
// Say ( JMM ,  D8-JMM-1 ) ;
6481: LD_EXP 1
6485: PPUSH
6486: LD_STRING  D8-JMM-1
6488: PPUSH
6489: CALL_OW 88
6493: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6494: LD_EXP 8
6498: PPUSH
6499: CALL_OW 310
6503: PUSH
6504: LD_INT 1
6506: EQUAL
6507: PUSH
6508: LD_EXP 22
6512: PUSH
6513: LD_INT 3
6515: EQUAL
6516: NOT
6517: AND
6518: IFFALSE 6540
6520: GO 6522
6522: DISABLE
// begin mikhailInBase = 1 ;
6523: LD_ADDR_EXP 22
6527: PUSH
6528: LD_INT 1
6530: ST_TO_ADDR
// mikhailStatus = 1 ;
6531: LD_ADDR_EXP 21
6535: PUSH
6536: LD_INT 1
6538: ST_TO_ADDR
// enable ;
6539: ENABLE
// end ;
6540: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
6541: LD_EXP 8
6545: PPUSH
6546: LD_INT 25
6548: PPUSH
6549: CALL_OW 308
6553: PUSH
6554: LD_EXP 22
6558: PUSH
6559: LD_INT 1
6561: EQUAL
6562: AND
6563: PUSH
6564: LD_EXP 8
6568: PPUSH
6569: CALL_OW 255
6573: PUSH
6574: LD_INT 1
6576: EQUAL
6577: AND
6578: IFFALSE 6908
6580: GO 6582
6582: DISABLE
// begin enable ;
6583: ENABLE
// case query ( QMikh2 ) of 1 :
6584: LD_STRING QMikh2
6586: PPUSH
6587: CALL_OW 97
6591: PUSH
6592: LD_INT 1
6594: DOUBLE
6595: EQUAL
6596: IFTRUE 6600
6598: GO 6667
6600: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
6601: LD_INT 1
6603: PPUSH
6604: LD_INT 6
6606: PPUSH
6607: LD_INT 2
6609: PPUSH
6610: LD_INT 1
6612: PPUSH
6613: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
6617: LD_EXP 8
6621: PPUSH
6622: LD_INT 6
6624: PPUSH
6625: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6629: LD_EXP 8
6633: PPUSH
6634: CALL_OW 122
// wait ( 0 0$1 ) ;
6638: LD_INT 35
6640: PPUSH
6641: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
6645: LD_EXP 8
6649: PPUSH
6650: LD_INT 17
6652: PPUSH
6653: CALL_OW 113
// mikhailInbase = 0 ;
6657: LD_ADDR_EXP 22
6661: PUSH
6662: LD_INT 0
6664: ST_TO_ADDR
// end ; 2 :
6665: GO 6908
6667: LD_INT 2
6669: DOUBLE
6670: EQUAL
6671: IFTRUE 6675
6673: GO 6848
6675: POP
// begin mikhailInBase = 2 ;
6676: LD_ADDR_EXP 22
6680: PUSH
6681: LD_INT 2
6683: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
6684: LD_EXP 8
6688: PPUSH
6689: LD_INT 6
6691: PPUSH
6692: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6696: LD_EXP 8
6700: PPUSH
6701: CALL_OW 122
// wait ( 0 0$1 ) ;
6705: LD_INT 35
6707: PPUSH
6708: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
6712: LD_EXP 8
6716: PPUSH
6717: LD_EXP 8
6721: PPUSH
6722: CALL_OW 250
6726: PUSH
6727: LD_INT 2
6729: PLUS
6730: PPUSH
6731: LD_EXP 8
6735: PPUSH
6736: CALL_OW 251
6740: PUSH
6741: LD_INT 2
6743: PLUS
6744: PPUSH
6745: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
6749: LD_EXP 8
6753: PPUSH
6754: LD_EXP 8
6758: PPUSH
6759: CALL_OW 250
6763: PUSH
6764: LD_INT 1
6766: PLUS
6767: PPUSH
6768: LD_EXP 8
6772: PPUSH
6773: CALL_OW 251
6777: PUSH
6778: LD_INT 2
6780: PLUS
6781: PPUSH
6782: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
6786: LD_EXP 8
6790: PPUSH
6791: LD_EXP 8
6795: PPUSH
6796: CALL_OW 250
6800: PUSH
6801: LD_INT 2
6803: PLUS
6804: PPUSH
6805: LD_EXP 8
6809: PPUSH
6810: CALL_OW 251
6814: PPUSH
6815: CALL_OW 171
// wait ( 0 0$5 ) ;
6819: LD_INT 175
6821: PPUSH
6822: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
6826: LD_EXP 8
6830: PPUSH
6831: LD_INT 25
6833: PPUSH
6834: CALL_OW 113
// mikhailInBase = 4 ;
6838: LD_ADDR_EXP 22
6842: PUSH
6843: LD_INT 4
6845: ST_TO_ADDR
// end ; 3 :
6846: GO 6908
6848: LD_INT 3
6850: DOUBLE
6851: EQUAL
6852: IFTRUE 6856
6854: GO 6907
6856: POP
// begin SetSide ( Mikhail , 6 ) ;
6857: LD_EXP 8
6861: PPUSH
6862: LD_INT 6
6864: PPUSH
6865: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6869: LD_EXP 8
6873: PPUSH
6874: CALL_OW 122
// wait ( 0 0$1 ) ;
6878: LD_INT 35
6880: PPUSH
6881: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
6885: LD_EXP 8
6889: PPUSH
6890: LD_INT 17
6892: PPUSH
6893: CALL_OW 113
// mikhailInbase = 3 ;
6897: LD_ADDR_EXP 22
6901: PUSH
6902: LD_INT 3
6904: ST_TO_ADDR
// end ; end ;
6905: GO 6908
6907: POP
// end ;
6908: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
6909: LD_EXP 8
6913: PPUSH
6914: LD_INT 25
6916: PPUSH
6917: CALL_OW 308
6921: PUSH
6922: LD_EXP 22
6926: PUSH
6927: LD_INT 4
6929: EQUAL
6930: AND
6931: IFFALSE 7029
6933: GO 6935
6935: DISABLE
// begin enable ;
6936: ENABLE
// SetSide ( Mikhail , 1 ) ;
6937: LD_EXP 8
6941: PPUSH
6942: LD_INT 1
6944: PPUSH
6945: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
6949: LD_INT 35
6951: PPUSH
6952: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
6956: LD_EXP 8
6960: PPUSH
6961: LD_INT 1
6963: PPUSH
6964: CALL_OW 296
6968: PUSH
6969: LD_EXP 8
6973: PPUSH
6974: LD_INT 10
6976: PPUSH
6977: CALL_OW 296
6981: LESS
6982: IFFALSE 6998
// begin ComEnterUnit ( Mikhail , dep1 ) ;
6984: LD_EXP 8
6988: PPUSH
6989: LD_INT 1
6991: PPUSH
6992: CALL_OW 120
// end else
6996: GO 7010
// begin ComEnterUnit ( Mikhail , dep2 ) ;
6998: LD_EXP 8
7002: PPUSH
7003: LD_INT 10
7005: PPUSH
7006: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
7010: LD_EXP 8
7014: PPUSH
7015: CALL_OW 310
7019: IFFALSE 6949
// mikhailInBase = 1 ;
7021: LD_ADDR_EXP 22
7025: PUSH
7026: LD_INT 1
7028: ST_TO_ADDR
// end ;
7029: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7030: LD_EXP 8
7034: PPUSH
7035: CALL_OW 310
7039: PUSH
7040: LD_EXP 22
7044: PUSH
7045: LD_INT 3
7047: EQUAL
7048: NOT
7049: AND
7050: IFFALSE 7176
7052: GO 7054
7054: DISABLE
// begin enable ;
7055: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7056: LD_INT 22
7058: PUSH
7059: LD_INT 1
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 21
7068: PUSH
7069: LD_INT 1
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 91
7078: PUSH
7079: LD_EXP 8
7083: PPUSH
7084: CALL_OW 310
7088: PUSH
7089: LD_INT 10
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: LIST
7101: PPUSH
7102: CALL_OW 69
7106: PUSH
7107: LD_INT 1
7109: EQUAL
7110: IFFALSE 7176
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7112: LD_INT 1
7114: PPUSH
7115: LD_INT 6
7117: PPUSH
7118: LD_INT 2
7120: PPUSH
7121: LD_INT 1
7123: PPUSH
7124: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7128: LD_EXP 8
7132: PPUSH
7133: LD_INT 6
7135: PPUSH
7136: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7140: LD_EXP 8
7144: PPUSH
7145: CALL_OW 122
// wait ( 0 0$1 ) ;
7149: LD_INT 35
7151: PPUSH
7152: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7156: LD_EXP 8
7160: PPUSH
7161: LD_INT 17
7163: PPUSH
7164: CALL_OW 113
// mikhailStatus = 3 ;
7168: LD_ADDR_EXP 21
7172: PUSH
7173: LD_INT 3
7175: ST_TO_ADDR
// end ; end ;
7176: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7177: LD_EXP 1
7181: PPUSH
7182: LD_EXP 23
7186: PPUSH
7187: CALL_OW 296
7191: PUSH
7192: LD_INT 5
7194: LESS
7195: PUSH
7196: LD_EXP 21
7200: PUSH
7201: LD_INT 3
7203: EQUAL
7204: AND
7205: PUSH
7206: LD_EXP 22
7210: PUSH
7211: LD_INT 3
7213: EQUAL
7214: NOT
7215: AND
7216: IFFALSE 7432
7218: GO 7220
7220: DISABLE
7221: LD_INT 0
7223: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
7224: LD_ADDR_VAR 0 1
7228: PUSH
7229: LD_INT 22
7231: PUSH
7232: LD_INT 1
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 21
7241: PUSH
7242: LD_INT 1
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: LD_INT 26
7251: PUSH
7252: LD_INT 1
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 69
7268: PUSH
7269: LD_EXP 1
7273: PUSH
7274: EMPTY
7275: LIST
7276: DIFF
7277: ST_TO_ADDR
// DialogueOn ;
7278: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7282: LD_EXP 1
7286: PPUSH
7287: LD_STRING D7-JMM-1
7289: PPUSH
7290: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7294: LD_VAR 0 1
7298: PUSH
7299: LD_INT 1
7301: ARRAY
7302: PPUSH
7303: LD_STRING D7-Sol1-1
7305: PPUSH
7306: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7310: LD_EXP 1
7314: PPUSH
7315: LD_STRING D7-JMM-2
7317: PPUSH
7318: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7322: LD_VAR 0 1
7326: PUSH
7327: LD_INT 1
7329: ARRAY
7330: PPUSH
7331: LD_STRING D7-Sol1-2
7333: PPUSH
7334: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7338: LD_EXP 1
7342: PPUSH
7343: LD_STRING D7-JMM-3
7345: PPUSH
7346: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7350: LD_VAR 0 1
7354: PUSH
7355: LD_INT 1
7357: ARRAY
7358: PPUSH
7359: LD_STRING D7-Sol1-3
7361: PPUSH
7362: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7366: LD_EXP 3
7370: PPUSH
7371: CALL_OW 302
7375: PUSH
7376: LD_EXP 4
7380: PPUSH
7381: CALL_OW 302
7385: AND
7386: IFFALSE 7428
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7388: LD_EXP 3
7392: PPUSH
7393: LD_STRING D7-Cyrus-3
7395: PPUSH
7396: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7400: LD_VAR 0 1
7404: PUSH
7405: LD_INT 1
7407: ARRAY
7408: PPUSH
7409: LD_STRING D7-Sol1-4
7411: PPUSH
7412: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7416: LD_EXP 4
7420: PPUSH
7421: LD_STRING D7-Lisa-4
7423: PPUSH
7424: CALL_OW 88
// end ; DialogueOff ;
7428: CALL_OW 7
// end ;
7432: PPOPN 1
7434: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7435: LD_EXP 8
7439: PPUSH
7440: CALL_OW 303
7444: PUSH
7445: LD_EXP 21
7449: PUSH
7450: LD_INT 3
7452: EQUAL
7453: AND
7454: IFFALSE 7468
7456: GO 7458
7458: DISABLE
// begin enable ;
7459: ENABLE
// mikhailStatus = 2 ;
7460: LD_ADDR_EXP 21
7464: PUSH
7465: LD_INT 2
7467: ST_TO_ADDR
// end ;
7468: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7469: LD_EXP 8
7473: PPUSH
7474: LD_INT 17
7476: PPUSH
7477: CALL_OW 308
7481: PUSH
7482: LD_EXP 8
7486: PPUSH
7487: CALL_OW 255
7491: PUSH
7492: LD_INT 6
7494: EQUAL
7495: AND
7496: IFFALSE 7529
7498: GO 7500
7500: DISABLE
// begin if not mikhailInBase = 3 then
7501: LD_EXP 22
7505: PUSH
7506: LD_INT 3
7508: EQUAL
7509: NOT
7510: IFFALSE 7520
// mikhailStatus = 3 ;
7512: LD_ADDR_EXP 21
7516: PUSH
7517: LD_INT 3
7519: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
7520: LD_EXP 8
7524: PPUSH
7525: CALL_OW 64
// end ;
7529: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
7530: LD_EXP 21
7534: PUSH
7535: LD_INT 3
7537: EQUAL
7538: PUSH
7539: LD_EXP 8
7543: PPUSH
7544: CALL_OW 255
7548: PUSH
7549: LD_INT 6
7551: EQUAL
7552: AND
7553: IFFALSE 7719
7555: GO 7557
7557: DISABLE
7558: LD_INT 0
7560: PPUSH
7561: PPUSH
// begin enable ;
7562: ENABLE
// if IsOk ( Mikhail ) then
7563: LD_EXP 8
7567: PPUSH
7568: CALL_OW 302
7572: IFFALSE 7719
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
7574: LD_ADDR_VAR 0 2
7578: PUSH
7579: LD_EXP 8
7583: PPUSH
7584: LD_INT 22
7586: PUSH
7587: LD_INT 1
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 21
7596: PUSH
7597: LD_INT 1
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PPUSH
7608: CALL_OW 69
7612: PPUSH
7613: CALL 9302 0 2
7617: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
7618: LD_VAR 0 2
7622: PPUSH
7623: LD_EXP 8
7627: PPUSH
7628: CALL_OW 296
7632: PUSH
7633: LD_INT 8
7635: LESS
7636: IFFALSE 7719
// begin if GetSex ( attacker ) = sex_male then
7638: LD_VAR 0 2
7642: PPUSH
7643: CALL_OW 258
7647: PUSH
7648: LD_INT 1
7650: EQUAL
7651: IFFALSE 7687
// begin disable ;
7653: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
7654: LD_VAR 0 2
7658: PPUSH
7659: LD_STRING D7a-Sol1-1
7661: PPUSH
7662: CALL_OW 88
// wait ( 0 0$2 ) ;
7666: LD_INT 70
7668: PPUSH
7669: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
7673: LD_VAR 0 2
7677: PPUSH
7678: LD_STRING D7a-Sol1-1a
7680: PPUSH
7681: CALL_OW 88
// end else
7685: GO 7719
// begin disable ;
7687: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
7688: LD_VAR 0 2
7692: PPUSH
7693: LD_STRING D7a-FSol1-1
7695: PPUSH
7696: CALL_OW 88
// wait ( 0 0$2 ) ;
7700: LD_INT 70
7702: PPUSH
7703: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
7707: LD_VAR 0 2
7711: PPUSH
7712: LD_STRING D7a-FSol1-1a
7714: PPUSH
7715: CALL_OW 88
// end ; end ; end ; end ; end_of_file
7719: PPOPN 2
7721: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7722: LD_INT 0
7724: PPUSH
7725: PPUSH
7726: PPUSH
7727: PPUSH
// for i = 1 to count do
7728: LD_ADDR_VAR 0 8
7732: PUSH
7733: DOUBLE
7734: LD_INT 1
7736: DEC
7737: ST_TO_ADDR
7738: LD_VAR 0 6
7742: PUSH
7743: FOR_TO
7744: IFFALSE 7825
// begin uc_side = side ;
7746: LD_ADDR_OWVAR 20
7750: PUSH
7751: LD_VAR 0 1
7755: ST_TO_ADDR
// uc_nation = nation ;
7756: LD_ADDR_OWVAR 21
7760: PUSH
7761: LD_VAR 0 2
7765: ST_TO_ADDR
// hc_gallery =  ;
7766: LD_ADDR_OWVAR 33
7770: PUSH
7771: LD_STRING 
7773: ST_TO_ADDR
// hc_name =  ;
7774: LD_ADDR_OWVAR 26
7778: PUSH
7779: LD_STRING 
7781: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7782: LD_INT 0
7784: PPUSH
7785: LD_VAR 0 5
7789: PPUSH
7790: LD_VAR 0 4
7794: PPUSH
7795: CALL_OW 380
// un = CreateHuman ;
7799: LD_ADDR_VAR 0 10
7803: PUSH
7804: CALL_OW 44
7808: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7809: LD_VAR 0 10
7813: PPUSH
7814: LD_VAR 0 3
7818: PPUSH
7819: CALL_OW 52
// end ;
7823: GO 7743
7825: POP
7826: POP
// end ;
7827: LD_VAR 0 7
7831: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7832: LD_INT 0
7834: PPUSH
7835: PPUSH
7836: PPUSH
// uc_side := GetSide ( b ) ;
7837: LD_ADDR_OWVAR 20
7841: PUSH
7842: LD_VAR 0 2
7846: PPUSH
7847: CALL_OW 255
7851: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7852: LD_ADDR_OWVAR 21
7856: PUSH
7857: LD_VAR 0 2
7861: PPUSH
7862: CALL_OW 248
7866: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7867: LD_INT 0
7869: PPUSH
7870: LD_INT 1
7872: PPUSH
7873: LD_VAR 0 1
7877: PPUSH
7878: CALL_OW 380
// un = CreateHuman ;
7882: LD_ADDR_VAR 0 4
7886: PUSH
7887: CALL_OW 44
7891: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
7892: LD_ADDR_VAR 0 5
7896: PUSH
7897: LD_VAR 0 2
7901: PPUSH
7902: CALL_OW 254
7906: PUSH
7907: LD_INT 3
7909: MINUS
7910: ST_TO_ADDR
// if dir < 0 then
7911: LD_VAR 0 5
7915: PUSH
7916: LD_INT 0
7918: LESS
7919: IFFALSE 7935
// dir := 6 + dir ;
7921: LD_ADDR_VAR 0 5
7925: PUSH
7926: LD_INT 6
7928: PUSH
7929: LD_VAR 0 5
7933: PLUS
7934: ST_TO_ADDR
// SetDir ( un , dir ) ;
7935: LD_VAR 0 4
7939: PPUSH
7940: LD_VAR 0 5
7944: PPUSH
7945: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7949: LD_VAR 0 4
7953: PPUSH
7954: LD_VAR 0 2
7958: PPUSH
7959: CALL_OW 52
// end ;
7963: LD_VAR 0 3
7967: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
7968: LD_INT 0
7970: PPUSH
7971: PPUSH
7972: PPUSH
7973: PPUSH
7974: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
7975: LD_ADDR_VAR 0 7
7979: PUSH
7980: LD_INT 22
7982: PUSH
7983: LD_VAR 0 1
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: LD_INT 25
7994: PUSH
7995: LD_INT 2
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PUSH
8002: LD_INT 24
8004: PUSH
8005: LD_INT 1000
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 69
8021: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8022: LD_ADDR_VAR 0 5
8026: PUSH
8027: LD_VAR 0 3
8031: PPUSH
8032: LD_INT 22
8034: PUSH
8035: LD_VAR 0 1
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PUSH
8044: LD_INT 21
8046: PUSH
8047: LD_INT 3
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 3
8056: PUSH
8057: LD_INT 24
8059: PUSH
8060: LD_INT 1000
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: LIST
8075: PUSH
8076: EMPTY
8077: LIST
8078: PPUSH
8079: CALL_OW 70
8083: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8084: LD_VAR 0 5
8088: PUSH
8089: LD_INT 0
8091: GREATER
8092: PUSH
8093: LD_VAR 0 7
8097: PUSH
8098: LD_INT 0
8100: GREATER
8101: AND
8102: IFFALSE 8168
// begin for i in engineerOk_list do
8104: LD_ADDR_VAR 0 6
8108: PUSH
8109: LD_VAR 0 7
8113: PUSH
8114: FOR_IN
8115: IFFALSE 8166
// begin for j in buildings_list do
8117: LD_ADDR_VAR 0 8
8121: PUSH
8122: LD_VAR 0 5
8126: PUSH
8127: FOR_IN
8128: IFFALSE 8162
// begin AddComExitBuilding ( i ) ;
8130: LD_VAR 0 6
8134: PPUSH
8135: CALL_OW 182
// wait ( 0 0$1 ) ;
8139: LD_INT 35
8141: PPUSH
8142: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8146: LD_VAR 0 6
8150: PPUSH
8151: LD_VAR 0 8
8155: PPUSH
8156: CALL_OW 190
// end ;
8160: GO 8127
8162: POP
8163: POP
// end ;
8164: GO 8114
8166: POP
8167: POP
// end ; if buildings_list = 0 then
8168: LD_VAR 0 5
8172: PUSH
8173: LD_INT 0
8175: EQUAL
8176: IFFALSE 8209
// begin for i in engineerOK_list do
8178: LD_ADDR_VAR 0 6
8182: PUSH
8183: LD_VAR 0 7
8187: PUSH
8188: FOR_IN
8189: IFFALSE 8207
// begin ComEnterUnit ( i , building ) ;
8191: LD_VAR 0 6
8195: PPUSH
8196: LD_VAR 0 2
8200: PPUSH
8201: CALL_OW 120
// end ;
8205: GO 8188
8207: POP
8208: POP
// end ; end ;
8209: LD_VAR 0 4
8213: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8214: LD_INT 0
8216: PPUSH
8217: PPUSH
8218: PPUSH
8219: PPUSH
8220: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8221: LD_ADDR_VAR 0 6
8225: PUSH
8226: LD_INT 22
8228: PUSH
8229: LD_VAR 0 1
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PUSH
8238: LD_INT 25
8240: PUSH
8241: LD_INT 4
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PPUSH
8252: CALL_OW 69
8256: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
8257: LD_ADDR_VAR 0 9
8261: PUSH
8262: LD_VAR 0 3
8266: PPUSH
8267: LD_INT 22
8269: PUSH
8270: LD_VAR 0 1
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: LD_INT 21
8281: PUSH
8282: LD_INT 1
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: PUSH
8289: LD_INT 3
8291: PUSH
8292: LD_INT 24
8294: PUSH
8295: LD_INT 650
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: PPUSH
8311: CALL_OW 70
8315: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
8316: LD_VAR 0 9
8320: PUSH
8321: LD_INT 0
8323: GREATER
8324: PUSH
8325: LD_VAR 0 6
8329: PUSH
8330: LD_INT 0
8332: GREATER
8333: AND
8334: IFFALSE 8461
// begin for i = 1 to damageUnits do
8336: LD_ADDR_VAR 0 7
8340: PUSH
8341: DOUBLE
8342: LD_INT 1
8344: DEC
8345: ST_TO_ADDR
8346: LD_VAR 0 9
8350: PUSH
8351: FOR_TO
8352: IFFALSE 8376
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
8354: LD_VAR 0 9
8358: PUSH
8359: LD_VAR 0 7
8363: ARRAY
8364: PPUSH
8365: LD_VAR 0 2
8369: PPUSH
8370: CALL_OW 113
8374: GO 8351
8376: POP
8377: POP
// for i in sci_list do
8378: LD_ADDR_VAR 0 7
8382: PUSH
8383: LD_VAR 0 6
8387: PUSH
8388: FOR_IN
8389: IFFALSE 8457
// begin ComExitBuilding ( i ) ;
8391: LD_VAR 0 7
8395: PPUSH
8396: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
8400: LD_ADDR_VAR 0 8
8404: PUSH
8405: LD_VAR 0 2
8409: PPUSH
8410: LD_INT 22
8412: PUSH
8413: LD_VAR 0 1
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PPUSH
8422: CALL_OW 70
8426: PUSH
8427: FOR_IN
8428: IFFALSE 8453
// begin AddComHeal ( i , j ) ;
8430: LD_VAR 0 7
8434: PPUSH
8435: LD_VAR 0 8
8439: PPUSH
8440: CALL_OW 188
// wait ( 1 1$0 ) ;
8444: LD_INT 2100
8446: PPUSH
8447: CALL_OW 67
// end ;
8451: GO 8427
8453: POP
8454: POP
// end ;
8455: GO 8388
8457: POP
8458: POP
// end else
8459: GO 8475
// begin AddComEnterUnit ( sci_list , build ) ;
8461: LD_VAR 0 6
8465: PPUSH
8466: LD_VAR 0 4
8470: PPUSH
8471: CALL_OW 180
// end ; end ;
8475: LD_VAR 0 5
8479: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
8480: LD_INT 0
8482: PPUSH
8483: PPUSH
8484: PPUSH
8485: PPUSH
8486: PPUSH
8487: PPUSH
8488: PPUSH
8489: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
8490: LD_ADDR_VAR 0 7
8494: PUSH
8495: LD_VAR 0 3
8499: PPUSH
8500: LD_INT 22
8502: PUSH
8503: LD_VAR 0 1
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PUSH
8512: LD_INT 21
8514: PUSH
8515: LD_INT 2
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: PUSH
8522: LD_INT 24
8524: PUSH
8525: LD_INT 550
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 34
8534: PUSH
8535: LD_INT 46
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: PPUSH
8548: CALL_OW 70
8552: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
8553: LD_ADDR_VAR 0 8
8557: PUSH
8558: LD_VAR 0 3
8562: PPUSH
8563: LD_INT 22
8565: PUSH
8566: LD_VAR 0 1
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: PUSH
8575: LD_INT 21
8577: PUSH
8578: LD_INT 2
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 34
8587: PUSH
8588: LD_INT 46
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: LD_INT 3
8597: PUSH
8598: LD_INT 24
8600: PUSH
8601: LD_INT 550
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 70
8622: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
8623: LD_ADDR_VAR 0 9
8627: PUSH
8628: LD_VAR 0 2
8632: PPUSH
8633: LD_INT 22
8635: PUSH
8636: LD_VAR 0 1
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: LD_INT 21
8647: PUSH
8648: LD_INT 2
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 34
8657: PUSH
8658: LD_INT 46
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: PUSH
8665: LD_INT 24
8667: PUSH
8668: LD_INT 1000
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 58
8677: PUSH
8678: EMPTY
8679: LIST
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: PPUSH
8688: CALL_OW 70
8692: ST_TO_ADDR
// for i in damageVehicle_list do
8693: LD_ADDR_VAR 0 5
8697: PUSH
8698: LD_VAR 0 8
8702: PUSH
8703: FOR_IN
8704: IFFALSE 8723
// mechanicInside_list = UnitsInside ( i ) ;
8706: LD_ADDR_VAR 0 10
8710: PUSH
8711: LD_VAR 0 5
8715: PPUSH
8716: CALL_OW 313
8720: ST_TO_ADDR
8721: GO 8703
8723: POP
8724: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8725: LD_ADDR_VAR 0 11
8729: PUSH
8730: LD_VAR 0 2
8734: PPUSH
8735: LD_INT 22
8737: PUSH
8738: LD_VAR 0 1
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PUSH
8747: LD_INT 25
8749: PUSH
8750: LD_INT 3
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PPUSH
8761: CALL_OW 70
8765: ST_TO_ADDR
// if damageVehicle_list > 0 then
8766: LD_VAR 0 8
8770: PUSH
8771: LD_INT 0
8773: GREATER
8774: IFFALSE 8847
// begin for i in damageVehicle_list do
8776: LD_ADDR_VAR 0 5
8780: PUSH
8781: LD_VAR 0 8
8785: PUSH
8786: FOR_IN
8787: IFFALSE 8845
// begin for j in mechanicInside_list do
8789: LD_ADDR_VAR 0 6
8793: PUSH
8794: LD_VAR 0 10
8798: PUSH
8799: FOR_IN
8800: IFFALSE 8841
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
8802: LD_VAR 0 8
8806: PPUSH
8807: LD_VAR 0 2
8811: PPUSH
8812: CALL_OW 113
// AddComExitVehicle ( j ) ;
8816: LD_VAR 0 6
8820: PPUSH
8821: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
8825: LD_VAR 0 6
8829: PPUSH
8830: LD_VAR 0 5
8834: PPUSH
8835: CALL_OW 189
// end ;
8839: GO 8799
8841: POP
8842: POP
// end ;
8843: GO 8786
8845: POP
8846: POP
// end ; if emptyVehicle_list > 0 then
8847: LD_VAR 0 9
8851: PUSH
8852: LD_INT 0
8854: GREATER
8855: IFFALSE 8905
// begin for i in emptyVehicle_list do
8857: LD_ADDR_VAR 0 5
8861: PUSH
8862: LD_VAR 0 9
8866: PUSH
8867: FOR_IN
8868: IFFALSE 8903
// begin for j in mechanicOutside_list do
8870: LD_ADDR_VAR 0 6
8874: PUSH
8875: LD_VAR 0 11
8879: PUSH
8880: FOR_IN
8881: IFFALSE 8899
// begin AddComEnterUnit ( j , i ) ;
8883: LD_VAR 0 6
8887: PPUSH
8888: LD_VAR 0 5
8892: PPUSH
8893: CALL_OW 180
// end ;
8897: GO 8880
8899: POP
8900: POP
// end ;
8901: GO 8867
8903: POP
8904: POP
// end ; if VehicleOK_list > 0 then
8905: LD_VAR 0 7
8909: PUSH
8910: LD_INT 0
8912: GREATER
8913: IFFALSE 8947
// begin for i in VehicleOK_list do
8915: LD_ADDR_VAR 0 5
8919: PUSH
8920: LD_VAR 0 7
8924: PUSH
8925: FOR_IN
8926: IFFALSE 8945
// ComAgressiveMove ( i , 110 , 29 ) ;
8928: LD_VAR 0 5
8932: PPUSH
8933: LD_INT 110
8935: PPUSH
8936: LD_INT 29
8938: PPUSH
8939: CALL_OW 114
8943: GO 8925
8945: POP
8946: POP
// end ; end ;
8947: LD_VAR 0 4
8951: RET
// export function DefendBases ( area , enemySide , defendersList , build ) ; var i , j ; begin
8952: LD_INT 0
8954: PPUSH
8955: PPUSH
8956: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_type , unit_human ] ] ) > 0 then
8957: LD_VAR 0 1
8961: PPUSH
8962: LD_INT 22
8964: PUSH
8965: LD_VAR 0 2
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: LD_INT 21
8976: PUSH
8977: LD_INT 1
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 70
8992: PUSH
8993: LD_INT 0
8995: GREATER
8996: IFFALSE 9110
// begin for i in defendersList do
8998: LD_ADDR_VAR 0 6
9002: PUSH
9003: LD_VAR 0 3
9007: PUSH
9008: FOR_IN
9009: IFFALSE 9106
// begin AddComExitBuilding ( i ) ;
9011: LD_VAR 0 6
9015: PPUSH
9016: CALL_OW 182
// wait ( 0 0$1 ) ;
9020: LD_INT 35
9022: PPUSH
9023: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_type , unit_human ] ] ) do
9027: LD_ADDR_VAR 0 7
9031: PUSH
9032: LD_VAR 0 1
9036: PPUSH
9037: LD_INT 22
9039: PUSH
9040: LD_VAR 0 2
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 21
9051: PUSH
9052: LD_INT 1
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 70
9067: PUSH
9068: FOR_IN
9069: IFFALSE 9102
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9071: LD_VAR 0 6
9075: PPUSH
9076: LD_VAR 0 7
9080: PPUSH
9081: CALL_OW 250
9085: PPUSH
9086: LD_VAR 0 7
9090: PPUSH
9091: CALL_OW 251
9095: PPUSH
9096: CALL_OW 174
9100: GO 9068
9102: POP
9103: POP
// end ;
9104: GO 9008
9106: POP
9107: POP
// end else
9108: GO 9141
// begin for i in defendersList do
9110: LD_ADDR_VAR 0 6
9114: PUSH
9115: LD_VAR 0 3
9119: PUSH
9120: FOR_IN
9121: IFFALSE 9139
// ComEnterUnit ( i , build ) ;
9123: LD_VAR 0 6
9127: PPUSH
9128: LD_VAR 0 4
9132: PPUSH
9133: CALL_OW 120
9137: GO 9120
9139: POP
9140: POP
// end ; end ;
9141: LD_VAR 0 5
9145: RET
// export function RussianTrap ; var i ; begin
9146: LD_INT 0
9148: PPUSH
9149: PPUSH
// if GetSide ( Brian ) = 4 then
9150: LD_EXP 6
9154: PPUSH
9155: CALL_OW 255
9159: PUSH
9160: LD_INT 4
9162: EQUAL
9163: IFFALSE 9186
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9165: LD_EXP 6
9169: PUSH
9170: LD_EXP 7
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PPUSH
9179: LD_INT 0
9181: PPUSH
9182: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
9186: LD_ADDR_VAR 0 2
9190: PUSH
9191: LD_INT 22
9193: PUSH
9194: LD_INT 3
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 21
9203: PUSH
9204: LD_INT 1
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PPUSH
9215: CALL_OW 69
9219: PUSH
9220: FOR_IN
9221: IFFALSE 9295
// begin ComExitBuilding ( i ) ;
9223: LD_VAR 0 2
9227: PPUSH
9228: CALL_OW 122
// wait ( 0 0$1 ) ;
9232: LD_INT 35
9234: PPUSH
9235: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
9239: LD_VAR 0 2
9243: PPUSH
9244: LD_INT 120
9246: PPUSH
9247: LD_INT 56
9249: PPUSH
9250: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
9254: LD_VAR 0 2
9258: PPUSH
9259: LD_INT 111
9261: PPUSH
9262: LD_INT 37
9264: PPUSH
9265: CALL_OW 174
// AddComCrawl ( i ) ;
9269: LD_VAR 0 2
9273: PPUSH
9274: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
9278: LD_VAR 0 2
9282: PPUSH
9283: LD_INT 109
9285: PPUSH
9286: LD_INT 30
9288: PPUSH
9289: CALL_OW 174
// end ;
9293: GO 9220
9295: POP
9296: POP
// end ;
9297: LD_VAR 0 1
9301: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
9302: LD_INT 0
9304: PPUSH
9305: PPUSH
9306: PPUSH
9307: PPUSH
9308: PPUSH
// nearest_dist = 1000 ;
9309: LD_ADDR_VAR 0 4
9313: PUSH
9314: LD_INT 1000
9316: ST_TO_ADDR
// nearest_un = un ;
9317: LD_ADDR_VAR 0 5
9321: PUSH
9322: LD_VAR 0 1
9326: ST_TO_ADDR
// for sold in units do
9327: LD_ADDR_VAR 0 6
9331: PUSH
9332: LD_VAR 0 2
9336: PUSH
9337: FOR_IN
9338: IFFALSE 9394
// begin dist = GetDistUnits ( un , sold ) ;
9340: LD_ADDR_VAR 0 7
9344: PUSH
9345: LD_VAR 0 1
9349: PPUSH
9350: LD_VAR 0 6
9354: PPUSH
9355: CALL_OW 296
9359: ST_TO_ADDR
// if dist < nearest_dist then
9360: LD_VAR 0 7
9364: PUSH
9365: LD_VAR 0 4
9369: LESS
9370: IFFALSE 9392
// begin nearest_un = sold ;
9372: LD_ADDR_VAR 0 5
9376: PUSH
9377: LD_VAR 0 6
9381: ST_TO_ADDR
// nearest_dist = dist ;
9382: LD_ADDR_VAR 0 4
9386: PUSH
9387: LD_VAR 0 7
9391: ST_TO_ADDR
// end ; end ;
9392: GO 9337
9394: POP
9395: POP
// result := nearest_un ;
9396: LD_ADDR_VAR 0 3
9400: PUSH
9401: LD_VAR 0 5
9405: ST_TO_ADDR
// end ;
9406: LD_VAR 0 3
9410: RET
// export function PrepareDifficulty ; begin
9411: LD_INT 0
9413: PPUSH
// if Difficulty = 1 then
9414: LD_OWVAR 67
9418: PUSH
9419: LD_INT 1
9421: EQUAL
9422: IFFALSE 9485
// begin RemoveUnit ( brw2 ) ;
9424: LD_INT 9
9426: PPUSH
9427: CALL_OW 64
// RemoveUnit ( brw3 ) ;
9431: LD_INT 30
9433: PPUSH
9434: CALL_OW 64
// RemoveUnit ( brw4 ) ;
9438: LD_INT 52
9440: PPUSH
9441: CALL_OW 64
// RemoveUnit ( brw5 ) ;
9445: LD_INT 63
9447: PPUSH
9448: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
9452: LD_INT 5
9454: PUSH
9455: LD_INT 4
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PPUSH
9462: LD_INT 60
9464: PPUSH
9465: CALL_OW 240
// RuSoldMinLevel = 0 ;
9469: LD_ADDR_EXP 13
9473: PUSH
9474: LD_INT 0
9476: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
9477: LD_ADDR_EXP 14
9481: PUSH
9482: LD_INT 1
9484: ST_TO_ADDR
// end ; if Difficulty = 2 then
9485: LD_OWVAR 67
9489: PUSH
9490: LD_INT 2
9492: EQUAL
9493: IFFALSE 9542
// begin RemoveUnit ( brw3 ) ;
9495: LD_INT 30
9497: PPUSH
9498: CALL_OW 64
// RemoveUnit ( brw4 ) ;
9502: LD_INT 52
9504: PPUSH
9505: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
9509: LD_INT 5
9511: PUSH
9512: LD_INT 4
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PPUSH
9519: LD_INT 50
9521: PPUSH
9522: CALL_OW 240
// RuSoldMinLevel = 1 ;
9526: LD_ADDR_EXP 13
9530: PUSH
9531: LD_INT 1
9533: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
9534: LD_ADDR_EXP 14
9538: PUSH
9539: LD_INT 2
9541: ST_TO_ADDR
// end ; if Difficulty = 3 then
9542: LD_OWVAR 67
9546: PUSH
9547: LD_INT 3
9549: EQUAL
9550: IFFALSE 9585
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
9552: LD_INT 5
9554: PUSH
9555: LD_INT 4
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PPUSH
9562: LD_INT 40
9564: PPUSH
9565: CALL_OW 240
// RuSoldMinLevel = 2 ;
9569: LD_ADDR_EXP 13
9573: PUSH
9574: LD_INT 2
9576: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
9577: LD_ADDR_EXP 14
9581: PUSH
9582: LD_INT 3
9584: ST_TO_ADDR
// end ; end ;
9585: LD_VAR 0 1
9589: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
9590: LD_INT 0
9592: PPUSH
9593: PPUSH
9594: PPUSH
// tmp = [ ] ;
9595: LD_ADDR_VAR 0 5
9599: PUSH
9600: EMPTY
9601: ST_TO_ADDR
// if not vehicles then
9602: LD_VAR 0 1
9606: NOT
9607: IFFALSE 9611
// exit ;
9609: GO 9728
// for i in vehicles do
9611: LD_ADDR_VAR 0 4
9615: PUSH
9616: LD_VAR 0 1
9620: PUSH
9621: FOR_IN
9622: IFFALSE 9712
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
9624: LD_ADDR_VAR 0 5
9628: PUSH
9629: LD_VAR 0 5
9633: PPUSH
9634: LD_INT 1
9636: PPUSH
9637: LD_VAR 0 4
9641: PPUSH
9642: CALL_OW 265
9646: PUSH
9647: LD_VAR 0 4
9651: PPUSH
9652: CALL_OW 262
9656: PUSH
9657: LD_VAR 0 4
9661: PPUSH
9662: CALL_OW 263
9666: PUSH
9667: LD_VAR 0 4
9671: PPUSH
9672: CALL_OW 264
9676: PUSH
9677: LD_VAR 0 4
9681: PPUSH
9682: CALL_OW 261
9686: PUSH
9687: LD_VAR 0 4
9691: PPUSH
9692: CALL_OW 256
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: PPUSH
9705: CALL_OW 2
9709: ST_TO_ADDR
// end ;
9710: GO 9621
9712: POP
9713: POP
// SaveVariable ( tmp , ident ) ;
9714: LD_VAR 0 5
9718: PPUSH
9719: LD_VAR 0 2
9723: PPUSH
9724: CALL_OW 39
// end ; end_of_file
9728: LD_VAR 0 3
9732: RET
// export function PrepareHeroes ; begin
9733: LD_INT 0
9735: PPUSH
// uc_side = 1 ;
9736: LD_ADDR_OWVAR 20
9740: PUSH
9741: LD_INT 1
9743: ST_TO_ADDR
// JMM = CreateCharacter ( JMM ) ;
9744: LD_ADDR_EXP 1
9748: PUSH
9749: LD_STRING JMM
9751: PPUSH
9752: CALL_OW 34
9756: ST_TO_ADDR
// SetLives ( JMM , LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ) ;
9757: LD_EXP 1
9761: PPUSH
9762: LD_STRING 01_JMMLifePoints_1
9764: PPUSH
9765: LD_INT 1000
9767: PPUSH
9768: CALL_OW 30
9772: PPUSH
9773: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
9777: LD_ADDR_EXP 9
9781: PUSH
9782: LD_STRING Powell
9784: PPUSH
9785: CALL_OW 25
9789: ST_TO_ADDR
// Bobby = CreateCharacter ( Bobby ) ;
9790: LD_ADDR_EXP 2
9794: PUSH
9795: LD_STRING Bobby
9797: PPUSH
9798: CALL_OW 34
9802: ST_TO_ADDR
// if Bobby then
9803: LD_EXP 2
9807: IFFALSE 9829
// SetLives ( Bobby , LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ) ;
9809: LD_EXP 2
9813: PPUSH
9814: LD_STRING 01_BobbyLifePoints_1
9816: PPUSH
9817: LD_INT 1000
9819: PPUSH
9820: CALL_OW 30
9824: PPUSH
9825: CALL_OW 234
// Cyrus = CreateCharacter ( Cyrus ) ;
9829: LD_ADDR_EXP 3
9833: PUSH
9834: LD_STRING Cyrus
9836: PPUSH
9837: CALL_OW 34
9841: ST_TO_ADDR
// if Cyrus then
9842: LD_EXP 3
9846: IFFALSE 9868
// SetLives ( Cyrus , LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ) ;
9848: LD_EXP 3
9852: PPUSH
9853: LD_STRING 01_CyrusLifePoints_1
9855: PPUSH
9856: LD_INT 1000
9858: PPUSH
9859: CALL_OW 30
9863: PPUSH
9864: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
9868: LD_ADDR_EXP 5
9872: PUSH
9873: LD_STRING Khatam
9875: PPUSH
9876: CALL_OW 25
9880: ST_TO_ADDR
// uc_side = 4 ;
9881: LD_ADDR_OWVAR 20
9885: PUSH
9886: LD_INT 4
9888: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
9889: LD_ADDR_EXP 4
9893: PUSH
9894: LD_STRING Lisa
9896: PPUSH
9897: CALL_OW 25
9901: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
9902: LD_EXP 1
9906: PPUSH
9907: LD_INT 3
9909: PPUSH
9910: LD_INT 0
9912: PPUSH
9913: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
9917: LD_EXP 2
9921: PPUSH
9922: LD_INT 3
9924: PPUSH
9925: LD_INT 0
9927: PPUSH
9928: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
9932: LD_EXP 3
9936: PPUSH
9937: LD_INT 3
9939: PPUSH
9940: LD_INT 0
9942: PPUSH
9943: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
9947: LD_EXP 4
9951: PPUSH
9952: LD_INT 5
9954: PPUSH
9955: LD_INT 0
9957: PPUSH
9958: CALL_OW 49
// ComCrawl ( Lisa ) ;
9962: LD_EXP 4
9966: PPUSH
9967: CALL_OW 137
// end ;
9971: LD_VAR 0 1
9975: RET
// export function PrepareLisSquad ; var i , un ; begin
9976: LD_INT 0
9978: PPUSH
9979: PPUSH
9980: PPUSH
// uc_side = 4 ;
9981: LD_ADDR_OWVAR 20
9985: PUSH
9986: LD_INT 4
9988: ST_TO_ADDR
// uc_nation = 1 ;
9989: LD_ADDR_OWVAR 21
9993: PUSH
9994: LD_INT 1
9996: ST_TO_ADDR
// hc_class := 2 ;
9997: LD_ADDR_OWVAR 28
10001: PUSH
10002: LD_INT 2
10004: ST_TO_ADDR
// hc_sex := sex_male ;
10005: LD_ADDR_OWVAR 27
10009: PUSH
10010: LD_INT 1
10012: ST_TO_ADDR
// hc_gallery :=  ;
10013: LD_ADDR_OWVAR 33
10017: PUSH
10018: LD_STRING 
10020: ST_TO_ADDR
// hc_name :=  ;
10021: LD_ADDR_OWVAR 26
10025: PUSH
10026: LD_STRING 
10028: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10029: LD_ADDR_OWVAR 30
10033: PUSH
10034: LD_INT 0
10036: PUSH
10037: LD_INT 1
10039: PUSH
10040: LD_INT 0
10042: PUSH
10043: LD_INT 0
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
10052: LD_ADDR_OWVAR 31
10056: PUSH
10057: LD_INT 1
10059: PUSH
10060: LD_INT 2
10062: PUSH
10063: LD_INT 0
10065: PUSH
10066: LD_INT 0
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: ST_TO_ADDR
// un := CreateHuman ;
10075: LD_ADDR_VAR 0 3
10079: PUSH
10080: CALL_OW 44
10084: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10085: LD_VAR 0 3
10089: PPUSH
10090: LD_INT 6
10092: PPUSH
10093: LD_INT 0
10095: PPUSH
10096: CALL_OW 49
// hc_sex := sex_female ;
10100: LD_ADDR_OWVAR 27
10104: PUSH
10105: LD_INT 2
10107: ST_TO_ADDR
// hc_gallery :=  ;
10108: LD_ADDR_OWVAR 33
10112: PUSH
10113: LD_STRING 
10115: ST_TO_ADDR
// hc_name :=  ;
10116: LD_ADDR_OWVAR 26
10120: PUSH
10121: LD_STRING 
10123: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
10124: LD_ADDR_OWVAR 30
10128: PUSH
10129: LD_INT 0
10131: PUSH
10132: LD_INT 0
10134: PUSH
10135: LD_INT 0
10137: PUSH
10138: LD_INT 1
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
10147: LD_ADDR_OWVAR 31
10151: PUSH
10152: LD_INT 0
10154: PUSH
10155: LD_INT 1
10157: PUSH
10158: LD_INT 0
10160: PUSH
10161: LD_INT 1
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: ST_TO_ADDR
// un := CreateHuman ;
10170: LD_ADDR_VAR 0 3
10174: PUSH
10175: CALL_OW 44
10179: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10180: LD_VAR 0 3
10184: PPUSH
10185: LD_INT 6
10187: PPUSH
10188: LD_INT 0
10190: PPUSH
10191: CALL_OW 49
// InitHc ;
10195: CALL_OW 19
// end ;
10199: LD_VAR 0 1
10203: RET
// export function PrepareOtherAmericans ; begin
10204: LD_INT 0
10206: PPUSH
// uc_side = 4 ;
10207: LD_ADDR_OWVAR 20
10211: PUSH
10212: LD_INT 4
10214: ST_TO_ADDR
// uc_nation = 1 ;
10215: LD_ADDR_OWVAR 21
10219: PUSH
10220: LD_INT 1
10222: ST_TO_ADDR
// hc_gallery =  ;
10223: LD_ADDR_OWVAR 33
10227: PUSH
10228: LD_STRING 
10230: ST_TO_ADDR
// hc_name = Brian Garvin ;
10231: LD_ADDR_OWVAR 26
10235: PUSH
10236: LD_STRING Brian Garvin
10238: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
10239: LD_INT 1
10241: PPUSH
10242: LD_INT 1
10244: PPUSH
10245: LD_INT 1
10247: PPUSH
10248: LD_INT 2
10250: PPUSH
10251: CALL_OW 12
10255: PPUSH
10256: CALL_OW 380
// Brian = CreateHuman ;
10260: LD_ADDR_EXP 6
10264: PUSH
10265: CALL_OW 44
10269: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
10270: LD_EXP 6
10274: PPUSH
10275: LD_INT 10
10277: PPUSH
10278: LD_INT 0
10280: PPUSH
10281: CALL_OW 49
// hc_name = Jerry White ;
10285: LD_ADDR_OWVAR 26
10289: PUSH
10290: LD_STRING Jerry White
10292: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
10293: LD_INT 1
10295: PPUSH
10296: LD_INT 3
10298: PPUSH
10299: LD_INT 1
10301: PPUSH
10302: LD_INT 2
10304: PPUSH
10305: CALL_OW 12
10309: PPUSH
10310: CALL_OW 380
// Jerry = CreateHuman ;
10314: LD_ADDR_EXP 7
10318: PUSH
10319: CALL_OW 44
10323: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
10324: LD_EXP 7
10328: PPUSH
10329: LD_INT 10
10331: PPUSH
10332: LD_INT 0
10334: PPUSH
10335: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
10339: LD_EXP 6
10343: PUSH
10344: LD_EXP 7
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PPUSH
10353: CALL_OW 140
// end ;
10357: LD_VAR 0 1
10361: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
10362: LD_INT 0
10364: PPUSH
10365: PPUSH
10366: PPUSH
// for i = 1 to 6 do
10367: LD_ADDR_VAR 0 2
10371: PUSH
10372: DOUBLE
10373: LD_INT 1
10375: DEC
10376: ST_TO_ADDR
10377: LD_INT 6
10379: PUSH
10380: FOR_TO
10381: IFFALSE 10475
// begin uc_side = 4 ;
10383: LD_ADDR_OWVAR 20
10387: PUSH
10388: LD_INT 4
10390: ST_TO_ADDR
// uc_nation = 1 ;
10391: LD_ADDR_OWVAR 21
10395: PUSH
10396: LD_INT 1
10398: ST_TO_ADDR
// hc_gallery =  ;
10399: LD_ADDR_OWVAR 33
10403: PUSH
10404: LD_STRING 
10406: ST_TO_ADDR
// hc_name =  ;
10407: LD_ADDR_OWVAR 26
10411: PUSH
10412: LD_STRING 
10414: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
10415: LD_INT 0
10417: PPUSH
10418: LD_INT 1
10420: PPUSH
10421: LD_INT 4
10423: PPUSH
10424: CALL_OW 12
10428: PPUSH
10429: LD_INT 1
10431: PPUSH
10432: CALL_OW 380
// un = CreateHuman ;
10436: LD_ADDR_VAR 0 3
10440: PUSH
10441: CALL_OW 44
10445: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
10446: LD_VAR 0 3
10450: PPUSH
10451: LD_INT 16
10453: PPUSH
10454: LD_INT 0
10456: PPUSH
10457: CALL_OW 49
// SetLives ( un , 1 ) ;
10461: LD_VAR 0 3
10465: PPUSH
10466: LD_INT 1
10468: PPUSH
10469: CALL_OW 234
// end ;
10473: GO 10380
10475: POP
10476: POP
// DyingSold = CreateHuman ;
10477: LD_ADDR_EXP 30
10481: PUSH
10482: CALL_OW 44
10486: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
10487: LD_EXP 30
10491: PPUSH
10492: LD_INT 16
10494: PPUSH
10495: LD_INT 0
10497: PPUSH
10498: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
10502: LD_EXP 30
10506: PPUSH
10507: LD_INT 250
10509: PPUSH
10510: CALL_OW 234
// end ; end_of_file
10514: LD_VAR 0 1
10518: RET
// export function PrepareRussianHeroes ; var tmp ; begin
10519: LD_INT 0
10521: PPUSH
10522: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) ;
10523: LD_ADDR_VAR 0 2
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_INT 1
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: PUSH
10538: LD_INT 23
10540: PUSH
10541: LD_INT 1
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 25
10550: PUSH
10551: LD_INT 2
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: ST_TO_ADDR
// uc_side = 6 ;
10568: LD_ADDR_OWVAR 20
10572: PUSH
10573: LD_INT 6
10575: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
10576: LD_ADDR_EXP 8
10580: PUSH
10581: LD_STRING Mikhail
10583: PPUSH
10584: CALL_OW 25
10588: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
10589: LD_EXP 8
10593: PPUSH
10594: LD_VAR 0 2
10598: PUSH
10599: LD_INT 1
10601: ARRAY
10602: PPUSH
10603: CALL_OW 250
10607: PPUSH
10608: LD_VAR 0 2
10612: PUSH
10613: LD_INT 1
10615: ARRAY
10616: PPUSH
10617: CALL_OW 251
10621: PPUSH
10622: LD_INT 3
10624: PPUSH
10625: LD_INT 1
10627: PPUSH
10628: CALL_OW 50
// end ;
10632: LD_VAR 0 1
10636: RET
// export function PrepareRussianCommander ; begin
10637: LD_INT 0
10639: PPUSH
// uc_side = 3 ;
10640: LD_ADDR_OWVAR 20
10644: PUSH
10645: LD_INT 3
10647: ST_TO_ADDR
// uc_nation = 3 ;
10648: LD_ADDR_OWVAR 21
10652: PUSH
10653: LD_INT 3
10655: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
10656: LD_ADDR_EXP 19
10660: PUSH
10661: LD_STRING Natasza
10663: PPUSH
10664: CALL_OW 25
10668: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
10669: LD_EXP 19
10673: PPUSH
10674: LD_INT 24
10676: PPUSH
10677: LD_INT 0
10679: PPUSH
10680: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
10684: LD_EXP 19
10688: PPUSH
10689: LD_INT 56
10691: PPUSH
10692: LD_INT 16
10694: PPUSH
10695: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
10699: LD_ADDR_EXP 24
10703: PUSH
10704: LD_EXP 24
10708: PUSH
10709: LD_EXP 19
10713: ADD
10714: ST_TO_ADDR
// end ;
10715: LD_VAR 0 1
10719: RET
// export function PrepareSouthBase ; var i , un ; begin
10720: LD_INT 0
10722: PPUSH
10723: PPUSH
10724: PPUSH
// for i = 1 to 2 do
10725: LD_ADDR_VAR 0 2
10729: PUSH
10730: DOUBLE
10731: LD_INT 1
10733: DEC
10734: ST_TO_ADDR
10735: LD_INT 2
10737: PUSH
10738: FOR_TO
10739: IFFALSE 10848
// begin uc_side = 3 ;
10741: LD_ADDR_OWVAR 20
10745: PUSH
10746: LD_INT 3
10748: ST_TO_ADDR
// uc_nation = 3 ;
10749: LD_ADDR_OWVAR 21
10753: PUSH
10754: LD_INT 3
10756: ST_TO_ADDR
// hc_gallery =  ;
10757: LD_ADDR_OWVAR 33
10761: PUSH
10762: LD_STRING 
10764: ST_TO_ADDR
// hc_name =  ;
10765: LD_ADDR_OWVAR 26
10769: PUSH
10770: LD_STRING 
10772: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
10773: LD_INT 1
10775: PPUSH
10776: LD_INT 1
10778: PPUSH
10779: LD_EXP 13
10783: PPUSH
10784: LD_EXP 14
10788: PPUSH
10789: CALL_OW 12
10793: PPUSH
10794: CALL_OW 380
// hc_importance = 0 ;
10798: LD_ADDR_OWVAR 32
10802: PUSH
10803: LD_INT 0
10805: ST_TO_ADDR
// un = CreateHuman ;
10806: LD_ADDR_VAR 0 3
10810: PUSH
10811: CALL_OW 44
10815: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
10816: LD_VAR 0 3
10820: PPUSH
10821: LD_INT 11
10823: PPUSH
10824: LD_INT 0
10826: PPUSH
10827: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
10831: LD_VAR 0 3
10835: PPUSH
10836: LD_INT 111
10838: PPUSH
10839: LD_INT 38
10841: PPUSH
10842: CALL_OW 118
// end ;
10846: GO 10738
10848: POP
10849: POP
// for i = 1 to Difficulty do
10850: LD_ADDR_VAR 0 2
10854: PUSH
10855: DOUBLE
10856: LD_INT 1
10858: DEC
10859: ST_TO_ADDR
10860: LD_OWVAR 67
10864: PUSH
10865: FOR_TO
10866: IFFALSE 10967
// begin uc_side = 3 ;
10868: LD_ADDR_OWVAR 20
10872: PUSH
10873: LD_INT 3
10875: ST_TO_ADDR
// uc_nation = 3 ;
10876: LD_ADDR_OWVAR 21
10880: PUSH
10881: LD_INT 3
10883: ST_TO_ADDR
// hc_gallery =  ;
10884: LD_ADDR_OWVAR 33
10888: PUSH
10889: LD_STRING 
10891: ST_TO_ADDR
// hc_name =  ;
10892: LD_ADDR_OWVAR 26
10896: PUSH
10897: LD_STRING 
10899: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
10900: LD_INT 0
10902: PPUSH
10903: LD_INT 3
10905: PPUSH
10906: LD_EXP 13
10910: PPUSH
10911: LD_EXP 14
10915: PPUSH
10916: CALL_OW 12
10920: PPUSH
10921: CALL_OW 380
// un = CreateHuman ;
10925: LD_ADDR_VAR 0 3
10929: PUSH
10930: CALL_OW 44
10934: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
10935: LD_VAR 0 3
10939: PPUSH
10940: LD_INT 12
10942: PPUSH
10943: LD_INT 0
10945: PPUSH
10946: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
10950: LD_VAR 0 3
10954: PPUSH
10955: LD_INT 111
10957: PPUSH
10958: LD_INT 28
10960: PPUSH
10961: CALL_OW 118
// end ;
10965: GO 10865
10967: POP
10968: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
10969: LD_INT 3
10971: PPUSH
10972: LD_INT 3
10974: PPUSH
10975: LD_INT 33
10977: PPUSH
10978: LD_EXP 13
10982: PPUSH
10983: LD_EXP 14
10987: PPUSH
10988: CALL_OW 12
10992: PPUSH
10993: LD_INT 1
10995: PPUSH
10996: LD_INT 1
10998: PUSH
10999: LD_INT 1
11001: PPUSH
11002: LD_INT 2
11004: PPUSH
11005: CALL_OW 12
11009: PUSH
11010: LD_INT 1
11012: PPUSH
11013: LD_INT 2
11015: PPUSH
11016: CALL_OW 12
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: LIST
11025: PUSH
11026: LD_OWVAR 67
11030: ARRAY
11031: PPUSH
11032: CALL 7722 0 6
// for i in UnitsInside ( arm2 ) do
11036: LD_ADDR_VAR 0 2
11040: PUSH
11041: LD_INT 33
11043: PPUSH
11044: CALL_OW 313
11048: PUSH
11049: FOR_IN
11050: IFFALSE 11070
// southBaseDefenders = southBaseDefenders ^ i ;
11052: LD_ADDR_EXP 25
11056: PUSH
11057: LD_EXP 25
11061: PUSH
11062: LD_VAR 0 2
11066: ADD
11067: ST_TO_ADDR
11068: GO 11049
11070: POP
11071: POP
// end ;
11072: LD_VAR 0 1
11076: RET
// export function PrepareNorthBase ; var i , un ; begin
11077: LD_INT 0
11079: PPUSH
11080: PPUSH
11081: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
11082: LD_ADDR_VAR 0 2
11086: PUSH
11087: DOUBLE
11088: LD_INT 1
11090: DEC
11091: ST_TO_ADDR
11092: LD_INT 1
11094: PPUSH
11095: LD_INT 2
11097: PPUSH
11098: CALL_OW 12
11102: PUSH
11103: LD_INT 2
11105: PPUSH
11106: LD_INT 3
11108: PPUSH
11109: CALL_OW 12
11113: PUSH
11114: LD_INT 3
11116: PPUSH
11117: LD_INT 4
11119: PPUSH
11120: CALL_OW 12
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: LIST
11129: PUSH
11130: LD_OWVAR 67
11134: ARRAY
11135: PUSH
11136: FOR_TO
11137: IFFALSE 11223
// begin uc_side = 3 ;
11139: LD_ADDR_OWVAR 20
11143: PUSH
11144: LD_INT 3
11146: ST_TO_ADDR
// uc_nation = 3 ;
11147: LD_ADDR_OWVAR 21
11151: PUSH
11152: LD_INT 3
11154: ST_TO_ADDR
// hc_gallery =  ;
11155: LD_ADDR_OWVAR 33
11159: PUSH
11160: LD_STRING 
11162: ST_TO_ADDR
// hc_name =  ;
11163: LD_ADDR_OWVAR 26
11167: PUSH
11168: LD_STRING 
11170: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11171: LD_INT 0
11173: PPUSH
11174: LD_INT 1
11176: PPUSH
11177: LD_EXP 13
11181: PPUSH
11182: LD_EXP 14
11186: PPUSH
11187: CALL_OW 12
11191: PPUSH
11192: CALL_OW 380
// un = CreateHuman ;
11196: LD_ADDR_VAR 0 3
11200: PUSH
11201: CALL_OW 44
11205: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
11206: LD_VAR 0 3
11210: PPUSH
11211: LD_INT 14
11213: PPUSH
11214: LD_INT 0
11216: PPUSH
11217: CALL_OW 49
// end ;
11221: GO 11136
11223: POP
11224: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
11225: LD_INT 3
11227: PPUSH
11228: LD_INT 3
11230: PPUSH
11231: LD_INT 2
11233: PPUSH
11234: LD_EXP 13
11238: PPUSH
11239: LD_EXP 14
11243: PPUSH
11244: CALL_OW 12
11248: PPUSH
11249: LD_INT 1
11251: PPUSH
11252: LD_INT 1
11254: PPUSH
11255: LD_INT 2
11257: PPUSH
11258: CALL_OW 12
11262: PUSH
11263: LD_INT 1
11265: PPUSH
11266: LD_INT 3
11268: PPUSH
11269: CALL_OW 12
11273: PUSH
11274: LD_INT 1
11276: PPUSH
11277: LD_INT 3
11279: PPUSH
11280: CALL_OW 12
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: LIST
11289: PUSH
11290: LD_OWVAR 67
11294: ARRAY
11295: PPUSH
11296: CALL 7722 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
11300: LD_INT 3
11302: PPUSH
11303: LD_INT 3
11305: PPUSH
11306: LD_INT 23
11308: PPUSH
11309: LD_EXP 13
11313: PPUSH
11314: LD_EXP 14
11318: PPUSH
11319: CALL_OW 12
11323: PPUSH
11324: LD_INT 4
11326: PPUSH
11327: LD_INT 0
11329: PUSH
11330: LD_INT 1
11332: PUSH
11333: LD_INT 2
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: LIST
11340: PUSH
11341: LD_OWVAR 67
11345: ARRAY
11346: PPUSH
11347: CALL 7722 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
11351: LD_INT 3
11353: PPUSH
11354: LD_INT 3
11356: PPUSH
11357: LD_INT 1
11359: PPUSH
11360: LD_EXP 13
11364: PPUSH
11365: LD_EXP 14
11369: PPUSH
11370: CALL_OW 12
11374: PPUSH
11375: LD_INT 2
11377: PPUSH
11378: LD_INT 1
11380: PUSH
11381: LD_INT 2
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: LIST
11391: PUSH
11392: LD_OWVAR 67
11396: ARRAY
11397: PPUSH
11398: CALL 7722 0 6
// for i in UnitsInside ( arm1 ) do
11402: LD_ADDR_VAR 0 2
11406: PUSH
11407: LD_INT 2
11409: PPUSH
11410: CALL_OW 313
11414: PUSH
11415: FOR_IN
11416: IFFALSE 11436
// northBaseDefenders = northBaseDefenders ^ i ;
11418: LD_ADDR_EXP 24
11422: PUSH
11423: LD_EXP 24
11427: PUSH
11428: LD_VAR 0 2
11432: ADD
11433: ST_TO_ADDR
11434: GO 11415
11436: POP
11437: POP
// end ;
11438: LD_VAR 0 1
11442: RET
// export function PrepareOtherRussians ; var i , un ; begin
11443: LD_INT 0
11445: PPUSH
11446: PPUSH
11447: PPUSH
// for i = 1 to 2 do
11448: LD_ADDR_VAR 0 2
11452: PUSH
11453: DOUBLE
11454: LD_INT 1
11456: DEC
11457: ST_TO_ADDR
11458: LD_INT 2
11460: PUSH
11461: FOR_TO
11462: IFFALSE 11563
// begin uc_side = 3 ;
11464: LD_ADDR_OWVAR 20
11468: PUSH
11469: LD_INT 3
11471: ST_TO_ADDR
// uc_nation = 3 ;
11472: LD_ADDR_OWVAR 21
11476: PUSH
11477: LD_INT 3
11479: ST_TO_ADDR
// hc_gallery =  ;
11480: LD_ADDR_OWVAR 33
11484: PUSH
11485: LD_STRING 
11487: ST_TO_ADDR
// hc_name =  ;
11488: LD_ADDR_OWVAR 26
11492: PUSH
11493: LD_STRING 
11495: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11496: LD_INT 0
11498: PPUSH
11499: LD_INT 1
11501: PPUSH
11502: LD_EXP 13
11506: PPUSH
11507: LD_EXP 14
11511: PPUSH
11512: CALL_OW 12
11516: PPUSH
11517: CALL_OW 380
// un = CreateHuman ;
11521: LD_ADDR_VAR 0 3
11525: PUSH
11526: CALL_OW 44
11530: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
11531: LD_VAR 0 3
11535: PPUSH
11536: LD_INT 9
11538: PPUSH
11539: LD_INT 0
11541: PPUSH
11542: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
11546: LD_VAR 0 3
11550: PPUSH
11551: LD_INT 80
11553: PPUSH
11554: LD_INT 73
11556: PPUSH
11557: CALL_OW 118
// end ;
11561: GO 11461
11563: POP
11564: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
11565: LD_ADDR_VAR 0 2
11569: PUSH
11570: LD_INT 22
11572: PUSH
11573: LD_INT 3
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PUSH
11580: LD_INT 30
11582: PUSH
11583: LD_INT 31
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: PPUSH
11594: CALL_OW 69
11598: PUSH
11599: FOR_IN
11600: IFFALSE 11628
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
11602: LD_EXP 13
11606: PPUSH
11607: LD_EXP 14
11611: PPUSH
11612: CALL_OW 12
11616: PPUSH
11617: LD_VAR 0 2
11621: PPUSH
11622: CALL 7832 0 2
11626: GO 11599
11628: POP
11629: POP
// end ;
11630: LD_VAR 0 1
11634: RET
// export function PrepareCargoBays ; begin
11635: LD_INT 0
11637: PPUSH
// uc_side = 3 ;
11638: LD_ADDR_OWVAR 20
11642: PUSH
11643: LD_INT 3
11645: ST_TO_ADDR
// uc_nation = 3 ;
11646: LD_ADDR_OWVAR 21
11650: PUSH
11651: LD_INT 3
11653: ST_TO_ADDR
// vc_engine = 1 ;
11654: LD_ADDR_OWVAR 39
11658: PUSH
11659: LD_INT 1
11661: ST_TO_ADDR
// vc_control = 1 ;
11662: LD_ADDR_OWVAR 38
11666: PUSH
11667: LD_INT 1
11669: ST_TO_ADDR
// vc_weapon = 51 ;
11670: LD_ADDR_OWVAR 40
11674: PUSH
11675: LD_INT 51
11677: ST_TO_ADDR
// vc_chassis = 22 ;
11678: LD_ADDR_OWVAR 37
11682: PUSH
11683: LD_INT 22
11685: ST_TO_ADDR
// cargo1 = CreateVehicle ;
11686: LD_ADDR_EXP 15
11690: PUSH
11691: CALL_OW 45
11695: ST_TO_ADDR
// cargo2 = CreateVehicle ;
11696: LD_ADDR_EXP 16
11700: PUSH
11701: CALL_OW 45
11705: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
11706: LD_EXP 15
11710: PPUSH
11711: LD_INT 13
11713: PPUSH
11714: LD_INT 0
11716: PPUSH
11717: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
11721: LD_EXP 16
11725: PPUSH
11726: LD_INT 13
11728: PPUSH
11729: LD_INT 0
11731: PPUSH
11732: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
11736: LD_EXP 15
11740: PPUSH
11741: LD_INT 2
11743: PPUSH
11744: LD_INT 70
11746: PUSH
11747: LD_INT 50
11749: PUSH
11750: LD_INT 30
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: PUSH
11758: LD_OWVAR 67
11762: ARRAY
11763: PPUSH
11764: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
11768: LD_EXP 16
11772: PPUSH
11773: LD_INT 2
11775: PPUSH
11776: LD_INT 70
11778: PUSH
11779: LD_INT 50
11781: PUSH
11782: LD_INT 30
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: LIST
11789: PUSH
11790: LD_OWVAR 67
11794: ARRAY
11795: PPUSH
11796: CALL_OW 291
// hc_gallery =  ;
11800: LD_ADDR_OWVAR 33
11804: PUSH
11805: LD_STRING 
11807: ST_TO_ADDR
// hc_name =  ;
11808: LD_ADDR_OWVAR 26
11812: PUSH
11813: LD_STRING 
11815: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11816: LD_INT 1
11818: PPUSH
11819: LD_INT 3
11821: PPUSH
11822: LD_INT 1
11824: PPUSH
11825: LD_INT 2
11827: PPUSH
11828: CALL_OW 12
11832: PPUSH
11833: CALL_OW 380
// driver1 = CreateHuman ;
11837: LD_ADDR_EXP 17
11841: PUSH
11842: CALL_OW 44
11846: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
11847: LD_EXP 17
11851: PPUSH
11852: LD_EXP 15
11856: PPUSH
11857: CALL_OW 52
// hc_name = Nikolai Andreyev ;
11861: LD_ADDR_OWVAR 26
11865: PUSH
11866: LD_STRING Nikolai Andreyev
11868: ST_TO_ADDR
// driver2 = CreateHuman ;
11869: LD_ADDR_EXP 18
11873: PUSH
11874: CALL_OW 44
11878: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
11879: LD_EXP 18
11883: PPUSH
11884: LD_EXP 16
11888: PPUSH
11889: CALL_OW 52
// end ;
11893: LD_VAR 0 1
11897: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp ; begin
11898: LD_INT 0
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
// uc_side = 3 ;
11905: LD_ADDR_OWVAR 20
11909: PUSH
11910: LD_INT 3
11912: ST_TO_ADDR
// uc_nation = 3 ;
11913: LD_ADDR_OWVAR 21
11917: PUSH
11918: LD_INT 3
11920: ST_TO_ADDR
// for i := 1 to count do
11921: LD_ADDR_VAR 0 4
11925: PUSH
11926: DOUBLE
11927: LD_INT 1
11929: DEC
11930: ST_TO_ADDR
11931: LD_VAR 0 1
11935: PUSH
11936: FOR_TO
11937: IFFALSE 12114
// begin vc_engine = 1 ;
11939: LD_ADDR_OWVAR 39
11943: PUSH
11944: LD_INT 1
11946: ST_TO_ADDR
// vc_control = 1 ;
11947: LD_ADDR_OWVAR 38
11951: PUSH
11952: LD_INT 1
11954: ST_TO_ADDR
// vc_weapon = 42 ;
11955: LD_ADDR_OWVAR 40
11959: PUSH
11960: LD_INT 42
11962: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
11963: LD_ADDR_OWVAR 37
11967: PUSH
11968: LD_INT 21
11970: PUSH
11971: LD_INT 22
11973: PUSH
11974: LD_INT 22
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: LD_OWVAR 67
11986: ARRAY
11987: ST_TO_ADDR
// veh = CreateVehicle ;
11988: LD_ADDR_VAR 0 5
11992: PUSH
11993: CALL_OW 45
11997: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
11998: LD_VAR 0 5
12002: PPUSH
12003: LD_VAR 0 2
12007: PPUSH
12008: LD_INT 0
12010: PPUSH
12011: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
12015: LD_ADDR_EXP 26
12019: PUSH
12020: LD_EXP 26
12024: PUSH
12025: LD_VAR 0 5
12029: ADD
12030: ST_TO_ADDR
// hc_gallery =  ;
12031: LD_ADDR_OWVAR 33
12035: PUSH
12036: LD_STRING 
12038: ST_TO_ADDR
// hc_name =  ;
12039: LD_ADDR_OWVAR 26
12043: PUSH
12044: LD_STRING 
12046: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12047: LD_INT 0
12049: PPUSH
12050: LD_INT 3
12052: PPUSH
12053: LD_EXP 13
12057: PPUSH
12058: LD_EXP 14
12062: PPUSH
12063: CALL_OW 12
12067: PPUSH
12068: CALL_OW 380
// un = CreateHuman ;
12072: LD_ADDR_VAR 0 6
12076: PUSH
12077: CALL_OW 44
12081: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12082: LD_VAR 0 6
12086: PPUSH
12087: LD_VAR 0 5
12091: PPUSH
12092: CALL_OW 52
// attackGroup = attackGroup ^ un ;
12096: LD_ADDR_EXP 26
12100: PUSH
12101: LD_EXP 26
12105: PUSH
12106: LD_VAR 0 6
12110: ADD
12111: ST_TO_ADDR
// end ;
12112: GO 11936
12114: POP
12115: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12116: LD_INT 0
12118: PPUSH
12119: LD_INT 2
12121: PPUSH
12122: LD_EXP 13
12126: PPUSH
12127: LD_EXP 14
12131: PPUSH
12132: CALL_OW 12
12136: PPUSH
12137: CALL_OW 380
// un = CreateHuman ;
12141: LD_ADDR_VAR 0 6
12145: PUSH
12146: CALL_OW 44
12150: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
12151: LD_ADDR_VAR 0 4
12155: PUSH
12156: DOUBLE
12157: LD_INT 1
12159: DEC
12160: ST_TO_ADDR
12161: LD_VAR 0 1
12165: PUSH
12166: LD_INT 2
12168: PUSH
12169: LD_INT 2
12171: MUL
12172: PLUS
12173: PUSH
12174: FOR_TO
12175: IFFALSE 12263
// begin hc_gallery =  ;
12177: LD_ADDR_OWVAR 33
12181: PUSH
12182: LD_STRING 
12184: ST_TO_ADDR
// hc_name =  ;
12185: LD_ADDR_OWVAR 26
12189: PUSH
12190: LD_STRING 
12192: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12193: LD_INT 1
12195: PPUSH
12196: LD_INT 1
12198: PPUSH
12199: LD_EXP 13
12203: PPUSH
12204: LD_EXP 14
12208: PPUSH
12209: CALL_OW 12
12213: PPUSH
12214: CALL_OW 380
// un = CreateHuman ;
12218: LD_ADDR_VAR 0 6
12222: PUSH
12223: CALL_OW 44
12227: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
12228: LD_VAR 0 6
12232: PPUSH
12233: LD_VAR 0 2
12237: PPUSH
12238: LD_INT 0
12240: PPUSH
12241: CALL_OW 49
// attackGroup = attackGroup ^ un ;
12245: LD_ADDR_EXP 26
12249: PUSH
12250: LD_EXP 26
12254: PUSH
12255: LD_VAR 0 6
12259: ADD
12260: ST_TO_ADDR
// end ;
12261: GO 12174
12263: POP
12264: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
12265: LD_ADDR_VAR 0 7
12269: PUSH
12270: LD_INT 26
12272: PPUSH
12273: LD_INT 22
12275: PUSH
12276: LD_INT 3
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PUSH
12283: LD_INT 21
12285: PUSH
12286: LD_INT 1
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: LD_INT 26
12295: PUSH
12296: LD_INT 1
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: LIST
12307: PPUSH
12308: CALL_OW 70
12312: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
12313: LD_VAR 0 7
12317: PUSH
12318: LD_INT 1
12320: ARRAY
12321: PPUSH
12322: LD_STRING D9-Rus3-1
12324: PPUSH
12325: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
12329: LD_VAR 0 7
12333: PUSH
12334: LD_INT 2
12336: ARRAY
12337: PPUSH
12338: LD_STRING D9-Russ-1
12340: PPUSH
12341: CALL_OW 88
// for i in attackGroup do
12345: LD_ADDR_VAR 0 4
12349: PUSH
12350: LD_EXP 26
12354: PUSH
12355: FOR_IN
12356: IFFALSE 12375
// ComAgressiveMove ( i , 54 , 19 ) ;
12358: LD_VAR 0 4
12362: PPUSH
12363: LD_INT 54
12365: PPUSH
12366: LD_INT 19
12368: PPUSH
12369: CALL_OW 114
12373: GO 12355
12375: POP
12376: POP
// end ; end_of_file
12377: LD_VAR 0 3
12381: RET
// every 0 0$1 do
12382: GO 12384
12384: DISABLE
// begin enable ;
12385: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
12386: LD_INT 3
12388: PPUSH
12389: LD_INT 1
12391: PPUSH
12392: LD_INT 22
12394: PPUSH
12395: CALL 7968 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
12399: LD_INT 3
12401: PPUSH
12402: LD_INT 20
12404: PPUSH
12405: LD_INT 22
12407: PPUSH
12408: LD_INT 23
12410: PPUSH
12411: CALL 8214 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
12415: LD_INT 3
12417: PPUSH
12418: LD_INT 21
12420: PPUSH
12421: LD_INT 23
12423: PPUSH
12424: CALL 8480 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
12428: LD_INT 22
12430: PPUSH
12431: LD_INT 1
12433: PPUSH
12434: LD_EXP 24
12438: PPUSH
12439: LD_INT 2
12441: PPUSH
12442: CALL 8952 0 4
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
12446: LD_INT 23
12448: PPUSH
12449: LD_INT 1
12451: PPUSH
12452: LD_EXP 25
12456: PPUSH
12457: LD_INT 33
12459: PPUSH
12460: CALL 8952 0 4
// end ; end_of_file
12464: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 then
12465: LD_VAR 0 1
12469: PPUSH
12470: CALL_OW 255
12474: PUSH
12475: LD_INT 1
12477: EQUAL
12478: IFFALSE 12494
// deadsCounter = deadsCounter + 1 ;
12480: LD_ADDR_EXP 28
12484: PUSH
12485: LD_EXP 28
12489: PUSH
12490: LD_INT 1
12492: PLUS
12493: ST_TO_ADDR
// end ; end_of_file
12494: PPOPN 1
12496: END
// every 0 0$1 trigger IsDead ( JMM ) do
12497: LD_EXP 1
12501: PPUSH
12502: CALL_OW 301
12506: IFFALSE 12518
12508: GO 12510
12510: DISABLE
// YouLost ( JMM ) ;
12511: LD_STRING JMM
12513: PPUSH
12514: CALL_OW 104
12518: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
12519: LD_INT 1
12521: PPUSH
12522: CALL_OW 301
12526: PUSH
12527: LD_INT 10
12529: PPUSH
12530: CALL_OW 301
12534: OR
12535: IFFALSE 12547
12537: GO 12539
12539: DISABLE
// YouLost ( DepotDestroyed ) ;
12540: LD_STRING DepotDestroyed
12542: PPUSH
12543: CALL_OW 104
12547: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
12548: LD_INT 22
12550: PUSH
12551: LD_INT 1
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PUSH
12558: LD_INT 21
12560: PUSH
12561: LD_INT 1
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 25
12570: PUSH
12571: LD_INT 2
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: PPUSH
12583: CALL_OW 69
12587: PUSH
12588: LD_INT 0
12590: EQUAL
12591: PUSH
12592: LD_INT 22
12594: PUSH
12595: LD_INT 4
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 21
12604: PUSH
12605: LD_INT 1
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: LD_INT 25
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: LIST
12626: PPUSH
12627: CALL_OW 69
12631: PUSH
12632: LD_INT 0
12634: EQUAL
12635: AND
12636: PUSH
12637: LD_INT 1
12639: PPUSH
12640: CALL_OW 255
12644: PUSH
12645: LD_INT 3
12647: EQUAL
12648: AND
12649: PUSH
12650: LD_INT 10
12652: PPUSH
12653: CALL_OW 255
12657: PUSH
12658: LD_INT 3
12660: EQUAL
12661: AND
12662: IFFALSE 12674
12664: GO 12666
12666: DISABLE
// YouLost ( Engineer ) ;
12667: LD_STRING Engineer
12669: PPUSH
12670: CALL_OW 104
12674: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and LastBattle = 1 do
12675: LD_INT 22
12677: PPUSH
12678: LD_INT 22
12680: PUSH
12681: LD_INT 1
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: LD_INT 21
12690: PUSH
12691: LD_INT 1
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PPUSH
12702: CALL_OW 70
12706: PUSH
12707: LD_INT 0
12709: EQUAL
12710: PUSH
12711: LD_INT 22
12713: PPUSH
12714: LD_INT 22
12716: PUSH
12717: LD_INT 3
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: LD_INT 21
12726: PUSH
12727: LD_INT 1
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PPUSH
12738: CALL_OW 70
12742: PUSH
12743: LD_INT 0
12745: GREATER
12746: AND
12747: PUSH
12748: LD_EXP 27
12752: PUSH
12753: LD_INT 1
12755: EQUAL
12756: AND
12757: IFFALSE 12769
12759: GO 12761
12761: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
12762: LD_STRING DepotCaptured
12764: PPUSH
12765: CALL_OW 104
12769: END
// export function PrepareTigers ; var i , un ; begin
12770: LD_INT 0
12772: PPUSH
12773: PPUSH
12774: PPUSH
// for i = 1 to Difficulty do
12775: LD_ADDR_VAR 0 2
12779: PUSH
12780: DOUBLE
12781: LD_INT 1
12783: DEC
12784: ST_TO_ADDR
12785: LD_OWVAR 67
12789: PUSH
12790: FOR_TO
12791: IFFALSE 12926
// begin hc_sex = sex_male ;
12793: LD_ADDR_OWVAR 27
12797: PUSH
12798: LD_INT 1
12800: ST_TO_ADDR
// uc_side = 0 ;
12801: LD_ADDR_OWVAR 20
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// uc_nation = nation_nature ;
12809: LD_ADDR_OWVAR 21
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// hc_class = class_tiger ;
12817: LD_ADDR_OWVAR 28
12821: PUSH
12822: LD_INT 14
12824: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
12825: LD_ADDR_OWVAR 31
12829: PUSH
12830: LD_EXP 14
12834: PUSH
12835: LD_INT 0
12837: PUSH
12838: LD_INT 0
12840: PUSH
12841: LD_INT 0
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
12850: LD_ADDR_OWVAR 35
12854: PUSH
12855: LD_INT 30
12857: PPUSH
12858: LD_INT 40
12860: PPUSH
12861: CALL_OW 12
12865: PUSH
12866: LD_INT 40
12868: PPUSH
12869: LD_INT 50
12871: PPUSH
12872: CALL_OW 12
12876: PUSH
12877: LD_INT 50
12879: PPUSH
12880: LD_INT 60
12882: PPUSH
12883: CALL_OW 12
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: PUSH
12893: LD_OWVAR 67
12897: ARRAY
12898: ST_TO_ADDR
// un = CreateHuman ;
12899: LD_ADDR_VAR 0 3
12903: PUSH
12904: CALL_OW 44
12908: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12909: LD_VAR 0 3
12913: PPUSH
12914: LD_INT 27
12916: PPUSH
12917: LD_INT 0
12919: PPUSH
12920: CALL_OW 49
// end ;
12924: GO 12790
12926: POP
12927: POP
// end ; end_of_file
12928: LD_VAR 0 1
12932: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 do
12933: LD_INT 1
12935: PPUSH
12936: CALL_OW 255
12940: PUSH
12941: LD_INT 1
12943: EQUAL
12944: PUSH
12945: LD_INT 10
12947: PPUSH
12948: CALL_OW 255
12952: PUSH
12953: LD_INT 1
12955: EQUAL
12956: AND
12957: PUSH
12958: LD_EXP 20
12962: PUSH
12963: LD_INT 1
12965: EQUAL
12966: AND
12967: IFFALSE 13058
12969: GO 12971
12971: DISABLE
// begin wait ( [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ) ;
12972: LD_INT 8400
12974: PUSH
12975: LD_INT 6300
12977: PUSH
12978: LD_INT 4200
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: LIST
12985: PUSH
12986: LD_OWVAR 67
12990: ARRAY
12991: PPUSH
12992: CALL_OW 67
// if cargoEscape = 1 then
12996: LD_EXP 20
13000: PUSH
13001: LD_INT 1
13003: EQUAL
13004: IFFALSE 13058
// begin SayRadio ( Powell , D6-Pow-1 ) ;
13006: LD_EXP 9
13010: PPUSH
13011: LD_STRING D6-Pow-1
13013: PPUSH
13014: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
13018: LD_EXP 1
13022: PPUSH
13023: LD_STRING D6-JMM-1
13025: PPUSH
13026: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
13030: LD_EXP 9
13034: PPUSH
13035: LD_STRING D6-Pow-2
13037: PPUSH
13038: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
13042: LD_EXP 1
13046: PPUSH
13047: LD_STRING D6-JMM-2
13049: PPUSH
13050: CALL_OW 88
// FinishMission ;
13054: CALL 13266 0 0
// end ; end ;
13058: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
13059: LD_INT 1
13061: PPUSH
13062: CALL_OW 255
13066: PUSH
13067: LD_INT 1
13069: EQUAL
13070: PUSH
13071: LD_INT 10
13073: PPUSH
13074: CALL_OW 255
13078: PUSH
13079: LD_INT 1
13081: EQUAL
13082: AND
13083: PUSH
13084: LD_EXP 20
13088: PUSH
13089: LD_INT 1
13091: GREATER
13092: AND
13093: IFFALSE 13160
13095: GO 13097
13097: DISABLE
13098: LD_INT 0
13100: PPUSH
// begin wait ( [ 9 9$0 , 8 8$0 , 7 7$0 ] [ Difficulty ] ) ;
13101: LD_INT 18900
13103: PUSH
13104: LD_INT 16800
13106: PUSH
13107: LD_INT 14700
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: LIST
13114: PUSH
13115: LD_OWVAR 67
13119: ARRAY
13120: PPUSH
13121: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
13125: LD_INT 1
13127: PUSH
13128: LD_INT 2
13130: PUSH
13131: LD_INT 3
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: LIST
13138: PUSH
13139: LD_OWVAR 67
13143: ARRAY
13144: PPUSH
13145: LD_INT 13
13147: PPUSH
13148: CALL 11898 0 2
// lastBattle = 1 ;
13152: LD_ADDR_EXP 27
13156: PUSH
13157: LD_INT 1
13159: ST_TO_ADDR
// end ;
13160: PPOPN 1
13162: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
13163: LD_EXP 27
13167: PUSH
13168: LD_INT 1
13170: EQUAL
13171: PUSH
13172: LD_INT 26
13174: PPUSH
13175: LD_INT 22
13177: PUSH
13178: LD_INT 3
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PUSH
13185: LD_INT 21
13187: PUSH
13188: LD_INT 1
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PPUSH
13199: CALL_OW 70
13203: PUSH
13204: LD_INT 0
13206: EQUAL
13207: AND
13208: IFFALSE 13265
13210: GO 13212
13212: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
13213: LD_EXP 9
13217: PPUSH
13218: LD_STRING D6-Pow-1
13220: PPUSH
13221: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
13225: LD_EXP 1
13229: PPUSH
13230: LD_STRING D6-JMM-1
13232: PPUSH
13233: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
13237: LD_EXP 9
13241: PPUSH
13242: LD_STRING D6-Pow-2
13244: PPUSH
13245: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
13249: LD_EXP 1
13253: PPUSH
13254: LD_STRING D6-JMM-2
13256: PPUSH
13257: CALL_OW 88
// FinishMission ;
13261: CALL 13266 0 0
// end ;
13265: END
// export function FinishMission ; var tmp ; begin
13266: LD_INT 0
13268: PPUSH
13269: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
13270: LD_ADDR_VAR 0 2
13274: PUSH
13275: LD_INT 22
13277: PUSH
13278: LD_INT 1
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: LD_INT 21
13287: PUSH
13288: LD_INT 2
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 24
13297: PUSH
13298: LD_INT 251
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: LIST
13309: PPUSH
13310: CALL_OW 69
13314: ST_TO_ADDR
// if tmp then
13315: LD_VAR 0 2
13319: IFFALSE 13333
// SaveVehicles ( tmp , 02_tanks_1 ) ;
13321: LD_VAR 0 2
13325: PPUSH
13326: LD_STRING 02_tanks_1
13328: PPUSH
13329: CALL 9590 0 2
// if mikhailStatus = 1 then
13333: LD_EXP 21
13337: PUSH
13338: LD_INT 1
13340: EQUAL
13341: IFFALSE 13355
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
13343: LD_EXP 21
13347: PPUSH
13348: LD_STRING 02_mikhailStatus_1
13350: PPUSH
13351: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
13355: LD_INT 1
13357: PPUSH
13358: CALL_OW 274
13362: PPUSH
13363: LD_INT 1
13365: PPUSH
13366: CALL_OW 275
13370: PPUSH
13371: LD_STRING 02_resources_4
13373: PPUSH
13374: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
13378: LD_INT 1
13380: PPUSH
13381: CALL_OW 274
13385: PPUSH
13386: LD_INT 1
13388: PPUSH
13389: CALL_OW 275
13393: PUSH
13394: LD_INT 200
13396: GREATEREQUAL
13397: IFFALSE 13411
// begin AddMedal ( Cans , 1 ) ;
13399: LD_STRING Cans
13401: PPUSH
13402: LD_INT 1
13404: PPUSH
13405: CALL_OW 101
// end else
13409: GO 13422
// begin AddMedal ( Cans , - 1 ) ;
13411: LD_STRING Cans
13413: PPUSH
13414: LD_INT 1
13416: NEG
13417: PPUSH
13418: CALL_OW 101
// end ; if deadsCounter <= 3 then
13422: LD_EXP 28
13426: PUSH
13427: LD_INT 3
13429: LESSEQUAL
13430: IFFALSE 13444
// begin AddMedal ( Deaths , 1 ) ;
13432: LD_STRING Deaths
13434: PPUSH
13435: LD_INT 1
13437: PPUSH
13438: CALL_OW 101
// end else
13442: GO 13455
// begin AddMedal ( Deaths , - 1 ) ;
13444: LD_STRING Deaths
13446: PPUSH
13447: LD_INT 1
13449: NEG
13450: PPUSH
13451: CALL_OW 101
// end ; if mikhailStatus = 0 then
13455: LD_EXP 21
13459: PUSH
13460: LD_INT 0
13462: EQUAL
13463: IFFALSE 13476
// AddMedal ( Prisoner , - 1 ) ;
13465: LD_STRING Prisoner
13467: PPUSH
13468: LD_INT 1
13470: NEG
13471: PPUSH
13472: CALL_OW 101
// if mikhailStatus = 1 then
13476: LD_EXP 21
13480: PUSH
13481: LD_INT 1
13483: EQUAL
13484: IFFALSE 13496
// AddMedal ( Prisoner , 1 ) ;
13486: LD_STRING Prisoner
13488: PPUSH
13489: LD_INT 1
13491: PPUSH
13492: CALL_OW 101
// if mikhailStatus = 2 then
13496: LD_EXP 21
13500: PUSH
13501: LD_INT 2
13503: EQUAL
13504: IFFALSE 13516
// AddMedal ( Prisoner , 2 ) ;
13506: LD_STRING Prisoner
13508: PPUSH
13509: LD_INT 2
13511: PPUSH
13512: CALL_OW 101
// if mikhailStatus = 3 then
13516: LD_EXP 21
13520: PUSH
13521: LD_INT 3
13523: EQUAL
13524: IFFALSE 13537
// AddMedal ( Prisoner , - 2 ) ;
13526: LD_STRING Prisoner
13528: PPUSH
13529: LD_INT 2
13531: NEG
13532: PPUSH
13533: CALL_OW 101
// GiveMedals ( MAIN ) ;
13537: LD_STRING MAIN
13539: PPUSH
13540: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
13544: LD_INT 22
13546: PUSH
13547: LD_INT 1
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 23
13556: PUSH
13557: LD_INT 1
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 21
13566: PUSH
13567: LD_INT 1
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: LIST
13578: PPUSH
13579: CALL_OW 69
13583: PPUSH
13584: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
13588: LD_EXP 1
13592: PPUSH
13593: LD_STRING JMM
13595: PPUSH
13596: CALL_OW 38
// SaveCharacters ( Bobby , Bobby ) ;
13600: LD_EXP 2
13604: PPUSH
13605: LD_STRING Bobby
13607: PPUSH
13608: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
13612: LD_EXP 3
13616: PPUSH
13617: LD_STRING Cyrus
13619: PPUSH
13620: CALL_OW 38
// SaveCharacters ( Lisa , Lisa ) ;
13624: LD_EXP 4
13628: PPUSH
13629: LD_STRING Lisa
13631: PPUSH
13632: CALL_OW 38
// SaveCharacters ( Khatam , Khatam ) ;
13636: LD_EXP 5
13640: PPUSH
13641: LD_STRING Khatam
13643: PPUSH
13644: CALL_OW 38
// if IsOK ( Brian ) then
13648: LD_EXP 6
13652: PPUSH
13653: CALL_OW 302
13657: IFFALSE 13671
// SaveCharacters ( Brian , Brian ) ;
13659: LD_EXP 6
13663: PPUSH
13664: LD_STRING Brian
13666: PPUSH
13667: CALL_OW 38
// if IsOk ( Jerry ) then
13671: LD_EXP 7
13675: PPUSH
13676: CALL_OW 302
13680: IFFALSE 13694
// SaveCharacters ( Jerry , Jerry ) ;
13682: LD_EXP 7
13686: PPUSH
13687: LD_STRING Jerry
13689: PPUSH
13690: CALL_OW 38
// if mikhailStatus = 1 then
13694: LD_EXP 21
13698: PUSH
13699: LD_INT 1
13701: EQUAL
13702: IFFALSE 13716
// SaveCharacters ( Mikhail , Mikhail ) ;
13704: LD_EXP 8
13708: PPUSH
13709: LD_STRING Mikhail
13711: PPUSH
13712: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
13716: LD_INT 50
13718: PUSH
13719: EMPTY
13720: LIST
13721: PUSH
13722: LD_INT 22
13724: PUSH
13725: LD_INT 1
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: LD_INT 21
13734: PUSH
13735: LD_INT 1
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: PPUSH
13747: CALL_OW 69
13751: PUSH
13752: LD_EXP 1
13756: PUSH
13757: LD_EXP 2
13761: PUSH
13762: LD_EXP 3
13766: PUSH
13767: LD_EXP 4
13771: PUSH
13772: LD_EXP 5
13776: PUSH
13777: LD_EXP 6
13781: PUSH
13782: LD_EXP 7
13786: PUSH
13787: LD_EXP 8
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: DIFF
13802: PPUSH
13803: LD_STRING 02_other_survivors
13805: PPUSH
13806: CALL_OW 38
// YouWin ;
13810: CALL_OW 103
// end ;
13814: LD_VAR 0 1
13818: RET
