// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export deadsCounter ; export spotCorpses ; starting begin RuSoldMinLevel = 0 ;
   0: LD_ADDR_EXP 13
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
   8: LD_ADDR_EXP 14
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// hpJMM = 0 ;
  16: LD_ADDR_EXP 10
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpBobby = 0 ;
  24: LD_ADDR_EXP 11
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpCyrus = 0 ;
  32: LD_ADDR_EXP 12
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// cargoEscape = 0 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// mikhailStatus = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailInBase = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailDepot = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// lastBattle = 0 ;
  72: LD_ADDR_EXP 26
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// deadsCounter = 0 ;
  80: LD_ADDR_EXP 27
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// spotCorpses = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// southBaseDefenders = [ ] ;
  96: LD_ADDR_EXP 24
 100: PUSH
 101: EMPTY
 102: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 103: LD_ADDR_EXP 23
 107: PUSH
 108: EMPTY
 109: ST_TO_ADDR
// attackGroup = [ ] ;
 110: LD_ADDR_EXP 25
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// RandomizeAll ;
 117: CALL_OW 11
// InGameOn ;
 121: CALL_OW 8
// Resetfog ;
 125: CALL_OW 335
// PrepareDifficulty ;
 129: CALL 8642 0 0
// PrepareRussianCommander ;
 133: CALL 10131 0 0
// PrepareSouthBase ;
 137: CALL 10257 0 0
// PrepareNorthBase ;
 141: CALL 10614 0 0
// PrepareOtherRussians ;
 145: CALL 10980 0 0
// PrepareHeroes ;
 149: CALL 9400 0 0
// PrepareLisSquad ;
 153: CALL 9607 0 0
// end ; end_of_file
 157: END
// every 1 do var tmp ;
 158: GO 160
 160: DISABLE
 161: LD_INT 0
 163: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 164: LD_EXP 1
 168: PPUSH
 169: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 173: LD_ADDR_VAR 0 1
 177: PUSH
 178: LD_INT 22
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 21
 190: PUSH
 191: LD_INT 1
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PPUSH
 202: CALL_OW 69
 206: PUSH
 207: LD_EXP 4
 211: PUSH
 212: EMPTY
 213: LIST
 214: DIFF
 215: ST_TO_ADDR
// if Cyrus and Bobby then
 216: LD_EXP 3
 220: PUSH
 221: LD_EXP 2
 225: AND
 226: IFFALSE 556
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 228: LD_EXP 3
 232: PPUSH
 233: LD_INT 43
 235: PPUSH
 236: LD_INT 72
 238: PPUSH
 239: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 243: LD_EXP 2
 247: PPUSH
 248: LD_INT 44
 250: PPUSH
 251: LD_INT 70
 253: PPUSH
 254: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 258: LD_EXP 1
 262: PPUSH
 263: LD_INT 46
 265: PPUSH
 266: LD_INT 73
 268: PPUSH
 269: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 273: LD_EXP 3
 277: PPUSH
 278: LD_STRING D1a-Cyrus-1
 280: PPUSH
 281: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 285: LD_EXP 1
 289: PPUSH
 290: LD_STRING D1a-JMM-1
 292: PPUSH
 293: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 297: LD_EXP 3
 301: PPUSH
 302: LD_INT 37
 304: PPUSH
 305: LD_INT 66
 307: PPUSH
 308: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 312: LD_EXP 2
 316: PPUSH
 317: LD_INT 41
 319: PPUSH
 320: LD_INT 67
 322: PPUSH
 323: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_INT 38
 334: PPUSH
 335: LD_INT 64
 337: PPUSH
 338: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 342: LD_EXP 2
 346: PPUSH
 347: LD_STRING D1a-Bobby-2
 349: PPUSH
 350: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 354: LD_EXP 3
 358: PPUSH
 359: LD_INT 35
 361: PPUSH
 362: LD_INT 62
 364: PPUSH
 365: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 369: LD_EXP 2
 373: PPUSH
 374: LD_INT 32
 376: PPUSH
 377: LD_INT 60
 379: PPUSH
 380: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 384: LD_EXP 1
 388: PPUSH
 389: LD_INT 35
 391: PPUSH
 392: LD_INT 60
 394: PPUSH
 395: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 399: LD_EXP 1
 403: PPUSH
 404: LD_STRING D1a-JMM-2
 406: PPUSH
 407: CALL_OW 88
// ComWalk ( Lisa ) ;
 411: LD_EXP 4
 415: PPUSH
 416: CALL_OW 138
// wait ( 0 0$1 ) ;
 420: LD_INT 35
 422: PPUSH
 423: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 427: LD_EXP 4
 431: PPUSH
 432: LD_EXP 1
 436: PPUSH
 437: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 441: LD_EXP 1
 445: PUSH
 446: LD_EXP 3
 450: PUSH
 451: LD_EXP 2
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: PPUSH
 461: LD_EXP 4
 465: PPUSH
 466: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 470: LD_VAR 0 1
 474: PUSH
 475: LD_INT 1
 477: ARRAY
 478: PPUSH
 479: LD_INT 33
 481: PPUSH
 482: LD_INT 55
 484: PPUSH
 485: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 489: LD_VAR 0 1
 493: PUSH
 494: LD_INT 2
 496: ARRAY
 497: PPUSH
 498: LD_INT 30
 500: PPUSH
 501: LD_INT 54
 503: PPUSH
 504: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 508: LD_VAR 0 1
 512: PUSH
 513: LD_INT 1
 515: ARRAY
 516: PPUSH
 517: LD_EXP 1
 521: PPUSH
 522: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 526: LD_VAR 0 1
 530: PUSH
 531: LD_INT 2
 533: ARRAY
 534: PPUSH
 535: LD_EXP 1
 539: PPUSH
 540: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 544: LD_EXP 4
 548: PPUSH
 549: LD_STRING D1a-Lisa-2
 551: PPUSH
 552: CALL_OW 88
// end ; if Cyrus and not Bobby then
 556: LD_EXP 3
 560: PUSH
 561: LD_EXP 2
 565: NOT
 566: AND
 567: IFFALSE 772
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 569: LD_EXP 3
 573: PPUSH
 574: LD_INT 43
 576: PPUSH
 577: LD_INT 72
 579: PPUSH
 580: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 584: LD_EXP 1
 588: PPUSH
 589: LD_INT 46
 591: PPUSH
 592: LD_INT 73
 594: PPUSH
 595: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 599: LD_EXP 3
 603: PPUSH
 604: LD_STRING D1a-Cyrus-1
 606: PPUSH
 607: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 611: LD_EXP 1
 615: PPUSH
 616: LD_STRING D1a-JMM-1
 618: PPUSH
 619: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 623: LD_EXP 3
 627: PPUSH
 628: LD_INT 37
 630: PPUSH
 631: LD_INT 66
 633: PPUSH
 634: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 638: LD_EXP 1
 642: PPUSH
 643: LD_INT 38
 645: PPUSH
 646: LD_INT 64
 648: PPUSH
 649: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 653: LD_EXP 3
 657: PPUSH
 658: LD_STRING D1a-Cyrus-2
 660: PPUSH
 661: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 665: LD_EXP 3
 669: PPUSH
 670: LD_INT 35
 672: PPUSH
 673: LD_INT 62
 675: PPUSH
 676: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 680: LD_EXP 1
 684: PPUSH
 685: LD_INT 35
 687: PPUSH
 688: LD_INT 60
 690: PPUSH
 691: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 695: LD_EXP 1
 699: PPUSH
 700: LD_STRING D1a-JMM-2
 702: PPUSH
 703: CALL_OW 88
// ComWalk ( Lisa ) ;
 707: LD_EXP 4
 711: PPUSH
 712: CALL_OW 138
// wait ( 0 0$1 ) ;
 716: LD_INT 35
 718: PPUSH
 719: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 723: LD_EXP 4
 727: PPUSH
 728: LD_EXP 1
 732: PPUSH
 733: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 737: LD_EXP 4
 741: PPUSH
 742: LD_STRING D1a-Lisa-2
 744: PPUSH
 745: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 749: LD_EXP 1
 753: PUSH
 754: LD_EXP 3
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PPUSH
 763: LD_EXP 4
 767: PPUSH
 768: CALL_OW 119
// end ; if not Cyrus and Bobby then
 772: LD_EXP 3
 776: NOT
 777: PUSH
 778: LD_EXP 2
 782: AND
 783: IFFALSE 1062
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 785: LD_EXP 2
 789: PPUSH
 790: LD_INT 44
 792: PPUSH
 793: LD_INT 70
 795: PPUSH
 796: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 800: LD_EXP 1
 804: PPUSH
 805: LD_INT 46
 807: PPUSH
 808: LD_INT 73
 810: PPUSH
 811: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 815: LD_EXP 2
 819: PPUSH
 820: LD_STRING D1a-Bobby-1
 822: PPUSH
 823: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 827: LD_EXP 1
 831: PPUSH
 832: LD_STRING D1a-JMM-1
 834: PPUSH
 835: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 839: LD_EXP 2
 843: PPUSH
 844: LD_INT 37
 846: PPUSH
 847: LD_INT 66
 849: PPUSH
 850: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 854: LD_EXP 1
 858: PPUSH
 859: LD_INT 38
 861: PPUSH
 862: LD_INT 64
 864: PPUSH
 865: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 869: LD_EXP 2
 873: PPUSH
 874: LD_STRING D1a-Bobby-2
 876: PPUSH
 877: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 881: LD_EXP 2
 885: PPUSH
 886: LD_INT 35
 888: PPUSH
 889: LD_INT 62
 891: PPUSH
 892: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 896: LD_EXP 1
 900: PPUSH
 901: LD_INT 35
 903: PPUSH
 904: LD_INT 60
 906: PPUSH
 907: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 911: LD_EXP 1
 915: PPUSH
 916: LD_STRING D1a-JMM-2
 918: PPUSH
 919: CALL_OW 88
// ComWalk ( Lisa ) ;
 923: LD_EXP 4
 927: PPUSH
 928: CALL_OW 138
// wait ( 0 0$1 ) ;
 932: LD_INT 35
 934: PPUSH
 935: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 939: LD_EXP 4
 943: PPUSH
 944: LD_EXP 1
 948: PPUSH
 949: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 953: LD_EXP 1
 957: PUSH
 958: LD_EXP 3
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PPUSH
 967: LD_EXP 4
 971: PPUSH
 972: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 976: LD_VAR 0 1
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_INT 33
 987: PPUSH
 988: LD_INT 55
 990: PPUSH
 991: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 995: LD_VAR 0 1
 999: PUSH
1000: LD_INT 2
1002: ARRAY
1003: PPUSH
1004: LD_INT 30
1006: PPUSH
1007: LD_INT 54
1009: PPUSH
1010: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1014: LD_VAR 0 1
1018: PUSH
1019: LD_INT 1
1021: ARRAY
1022: PPUSH
1023: LD_EXP 1
1027: PPUSH
1028: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1032: LD_VAR 0 1
1036: PUSH
1037: LD_INT 2
1039: ARRAY
1040: PPUSH
1041: LD_EXP 1
1045: PPUSH
1046: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1050: LD_EXP 4
1054: PPUSH
1055: LD_STRING D1a-Lisa-2
1057: PPUSH
1058: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1062: LD_EXP 3
1066: NOT
1067: PUSH
1068: LD_EXP 2
1072: NOT
1073: AND
1074: IFFALSE 1288
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1076: LD_EXP 1
1080: PPUSH
1081: LD_INT 37
1083: PPUSH
1084: LD_INT 66
1086: PPUSH
1087: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1091: LD_EXP 1
1095: PPUSH
1096: LD_STRING D1b-JMM-1
1098: PPUSH
1099: CALL_OW 88
// ComCrawl ( JMM ) ;
1103: LD_EXP 1
1107: PPUSH
1108: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1112: LD_EXP 1
1116: PPUSH
1117: LD_INT 35
1119: PPUSH
1120: LD_INT 60
1122: PPUSH
1123: CALL_OW 171
// wait ( 0 0$8 ) ;
1127: LD_INT 280
1129: PPUSH
1130: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_STRING D1b-JMM-1a
1141: PPUSH
1142: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1146: LD_EXP 1
1150: PUSH
1151: LD_EXP 4
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PPUSH
1160: CALL_OW 138
// wait ( 0 0$1 ) ;
1164: LD_INT 35
1166: PPUSH
1167: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1171: LD_EXP 4
1175: PPUSH
1176: LD_EXP 1
1180: PPUSH
1181: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1185: LD_EXP 1
1189: PUSH
1190: EMPTY
1191: LIST
1192: PPUSH
1193: LD_EXP 4
1197: PPUSH
1198: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1202: LD_VAR 0 1
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: LD_INT 33
1213: PPUSH
1214: LD_INT 55
1216: PPUSH
1217: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1221: LD_VAR 0 1
1225: PUSH
1226: LD_INT 2
1228: ARRAY
1229: PPUSH
1230: LD_INT 30
1232: PPUSH
1233: LD_INT 54
1235: PPUSH
1236: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1240: LD_VAR 0 1
1244: PUSH
1245: LD_INT 1
1247: ARRAY
1248: PPUSH
1249: LD_EXP 1
1253: PPUSH
1254: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1258: LD_VAR 0 1
1262: PUSH
1263: LD_INT 2
1265: ARRAY
1266: PPUSH
1267: LD_EXP 1
1271: PPUSH
1272: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1276: LD_EXP 4
1280: PPUSH
1281: LD_STRING D1b-Lisa-1
1283: PPUSH
1284: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1288: LD_EXP 1
1292: PPUSH
1293: LD_STRING D1-JMM-1
1295: PPUSH
1296: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1300: LD_EXP 4
1304: PPUSH
1305: LD_STRING D1-Lisa-1
1307: PPUSH
1308: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1312: LD_EXP 1
1316: PPUSH
1317: LD_STRING D1-JMM-2
1319: PPUSH
1320: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1324: LD_EXP 9
1328: PPUSH
1329: LD_STRING D1-Pow-2
1331: PPUSH
1332: CALL_OW 94
// if Cyrus then
1336: LD_EXP 3
1340: IFFALSE 1366
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1342: LD_EXP 3
1346: PPUSH
1347: LD_STRING D1-Cyrus-2
1349: PPUSH
1350: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1354: LD_EXP 1
1358: PPUSH
1359: LD_STRING D1-JMM-3
1361: PPUSH
1362: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1366: LD_EXP 9
1370: PPUSH
1371: LD_STRING D1-Pow-3
1373: PPUSH
1374: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1378: LD_EXP 1
1382: PPUSH
1383: LD_STRING D1-JMM-4
1385: PPUSH
1386: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1390: LD_EXP 9
1394: PPUSH
1395: LD_STRING D1-Pow-4
1397: PPUSH
1398: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1402: LD_EXP 9
1406: PPUSH
1407: LD_STRING D1-Pow-4a
1409: PPUSH
1410: CALL_OW 94
// if Cyrus then
1414: LD_EXP 3
1418: IFFALSE 1432
// Say ( Cyrus , D1-Cyrus-4 ) ;
1420: LD_EXP 3
1424: PPUSH
1425: LD_STRING D1-Cyrus-4
1427: PPUSH
1428: CALL_OW 88
// if Bobby then
1432: LD_EXP 2
1436: IFFALSE 1474
// begin Say ( Bobby , D1-Bobby-4 ) ;
1438: LD_EXP 2
1442: PPUSH
1443: LD_STRING D1-Bobby-4
1445: PPUSH
1446: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1450: LD_EXP 4
1454: PPUSH
1455: LD_STRING D1-Lisa-4
1457: PPUSH
1458: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1462: LD_EXP 1
1466: PPUSH
1467: LD_STRING D1-JMM-5
1469: PPUSH
1470: CALL_OW 88
// end ; InGameOff ;
1474: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1478: LD_INT 22
1480: PUSH
1481: LD_INT 4
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 69
1492: PPUSH
1493: LD_INT 1
1495: PPUSH
1496: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1500: LD_STRING M1
1502: PPUSH
1503: CALL_OW 337
// SaveForQuickRestart ;
1507: CALL_OW 22
// end ;
1511: PPOPN 1
1513: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1514: LD_INT 7
1516: PPUSH
1517: LD_INT 22
1519: PUSH
1520: LD_INT 1
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PPUSH
1527: CALL_OW 70
1531: PUSH
1532: LD_INT 0
1534: GREATER
1535: IFFALSE 1905
1537: GO 1539
1539: DISABLE
// begin InGameOn ;
1540: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1544: LD_INT 22
1546: PUSH
1547: LD_INT 1
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 21
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: EMPTY
1561: LIST
1562: LIST
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PPUSH
1568: CALL_OW 69
1572: PPUSH
1573: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1577: LD_INT 24
1579: PPUSH
1580: LD_INT 32
1582: PPUSH
1583: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1587: LD_EXP 5
1591: PPUSH
1592: LD_INT 4
1594: PPUSH
1595: LD_INT 1
1597: PPUSH
1598: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1602: LD_EXP 5
1606: PPUSH
1607: LD_INT 4
1609: PPUSH
1610: CALL_OW 336
// wait ( 0 0$1 ) ;
1614: LD_INT 35
1616: PPUSH
1617: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1621: LD_EXP 5
1625: PPUSH
1626: LD_INT 27
1628: PPUSH
1629: LD_INT 38
1631: PPUSH
1632: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1636: LD_EXP 5
1640: PPUSH
1641: LD_EXP 1
1645: PPUSH
1646: CALL_OW 179
// wait ( 0 0$1 ) ;
1650: LD_INT 35
1652: PPUSH
1653: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1657: LD_EXP 5
1661: PPUSH
1662: LD_STRING D2a-Khat-1
1664: PPUSH
1665: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1669: LD_EXP 1
1673: PPUSH
1674: LD_STRING D2a-JMM-1
1676: PPUSH
1677: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1681: LD_EXP 5
1685: PPUSH
1686: LD_STRING D2a-Khat-2
1688: PPUSH
1689: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1693: LD_EXP 1
1697: PPUSH
1698: LD_STRING D2a-JMM-2
1700: PPUSH
1701: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1705: LD_EXP 5
1709: PPUSH
1710: LD_STRING D2a-Khat-3
1712: PPUSH
1713: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1717: LD_EXP 1
1721: PPUSH
1722: LD_STRING D2a-JMM-3
1724: PPUSH
1725: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1729: LD_EXP 5
1733: PPUSH
1734: LD_STRING D2a-Khat-4
1736: PPUSH
1737: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1741: LD_EXP 1
1745: PPUSH
1746: LD_STRING D2a-JMM-4
1748: PPUSH
1749: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1753: LD_EXP 5
1757: PPUSH
1758: LD_STRING D2a-Khat-5
1760: PPUSH
1761: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1765: LD_EXP 1
1769: PPUSH
1770: LD_STRING D2a-JMM-5
1772: PPUSH
1773: CALL_OW 88
// InGameOff ;
1777: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
1781: LD_INT 22
1783: PUSH
1784: LD_INT 1
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 21
1793: PUSH
1794: LD_INT 1
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 3
1803: PUSH
1804: LD_INT 24
1806: PUSH
1807: LD_INT 1000
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: LIST
1822: PPUSH
1823: CALL_OW 69
1827: PUSH
1828: LD_INT 0
1830: GREATER
1831: IFFALSE 1905
// begin Say ( Khatam , D2b-Khat-1 ) ;
1833: LD_EXP 5
1837: PPUSH
1838: LD_STRING D2b-Khat-1
1840: PPUSH
1841: CALL_OW 88
// ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1845: LD_EXP 5
1849: PPUSH
1850: LD_INT 22
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: LD_INT 21
1862: PUSH
1863: LD_INT 1
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: PUSH
1870: LD_INT 3
1872: PUSH
1873: LD_INT 24
1875: PUSH
1876: LD_INT 1000
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: PPUSH
1892: CALL_OW 69
1896: PUSH
1897: LD_INT 1
1899: ARRAY
1900: PPUSH
1901: CALL_OW 128
// end ; end ;
1905: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmpFemale , tmpMale ;
1906: LD_INT 15
1908: PPUSH
1909: LD_INT 22
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PPUSH
1919: CALL_OW 70
1923: PUSH
1924: LD_INT 0
1926: GREATER
1927: IFFALSE 2690
1929: GO 1931
1931: DISABLE
1932: LD_INT 0
1934: PPUSH
1935: PPUSH
1936: PPUSH
1937: PPUSH
1938: PPUSH
// begin tmpFemale = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_sex , 2 ] ] ) ;
1939: LD_ADDR_VAR 0 4
1943: PUSH
1944: LD_INT 22
1946: PUSH
1947: LD_INT 1
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 25
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 26
1966: PUSH
1967: LD_INT 2
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: PPUSH
1979: CALL_OW 69
1983: ST_TO_ADDR
// tmpMale = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) ;
1984: LD_ADDR_VAR 0 5
1988: PUSH
1989: LD_INT 22
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 25
2001: PUSH
2002: LD_INT 2
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: LD_INT 26
2011: PUSH
2012: LD_INT 1
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL_OW 69
2028: ST_TO_ADDR
// distanceTab = [ [ Bobby , GetDistUnitArea ( Bobby , DeadsSpawn ) ] , [ Cyrus , GetDistUnitArea ( Cyrus , DeadsSpawn ) ] , [ Lisa , GetDistUnitArea ( Lisa , DeadsSpawn ) ] , [ tmpMale [ 1 ] , GetDistUnits ( tmpMale [ 1 ] , DeadsSpawn ) ] , [ tmpFemale [ 1 ] , GetDistUnits ( tmpFemale [ 1 ] , DeadsSpawn ) ] ] ;
2029: LD_ADDR_VAR 0 2
2033: PUSH
2034: LD_EXP 2
2038: PUSH
2039: LD_EXP 2
2043: PPUSH
2044: LD_INT 16
2046: PPUSH
2047: CALL_OW 299
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: LD_EXP 3
2060: PUSH
2061: LD_EXP 3
2065: PPUSH
2066: LD_INT 16
2068: PPUSH
2069: CALL_OW 299
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: PUSH
2078: LD_EXP 4
2082: PUSH
2083: LD_EXP 4
2087: PPUSH
2088: LD_INT 16
2090: PPUSH
2091: CALL_OW 299
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_VAR 0 5
2104: PUSH
2105: LD_INT 1
2107: ARRAY
2108: PUSH
2109: LD_VAR 0 5
2113: PUSH
2114: LD_INT 1
2116: ARRAY
2117: PPUSH
2118: LD_INT 16
2120: PPUSH
2121: CALL_OW 296
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: PUSH
2130: LD_VAR 0 4
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: PUSH
2139: LD_VAR 0 4
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: PPUSH
2148: LD_INT 16
2150: PPUSH
2151: CALL_OW 296
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: ST_TO_ADDR
// PrepareDeadSoldiers ;
2167: CALL 9867 0 0
// spotCorpses = 1 ;
2171: LD_ADDR_EXP 28
2175: PUSH
2176: LD_INT 1
2178: ST_TO_ADDR
// InGameOn ;
2179: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2183: LD_INT 23
2185: PPUSH
2186: LD_INT 12
2188: PPUSH
2189: CALL_OW 84
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] ] ) , 23 , 12 ) ;
2193: LD_INT 22
2195: PUSH
2196: LD_INT 1
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: PUSH
2203: EMPTY
2204: LIST
2205: PPUSH
2206: CALL_OW 69
2210: PPUSH
2211: LD_INT 23
2213: PPUSH
2214: LD_INT 12
2216: PPUSH
2217: CALL_OW 111
// min = distanceTab [ 1 ] [ 2 ] ;
2221: LD_ADDR_VAR 0 3
2225: PUSH
2226: LD_VAR 0 2
2230: PUSH
2231: LD_INT 1
2233: ARRAY
2234: PUSH
2235: LD_INT 2
2237: ARRAY
2238: ST_TO_ADDR
// for i = 1 to distanceTab do
2239: LD_ADDR_VAR 0 1
2243: PUSH
2244: DOUBLE
2245: LD_INT 1
2247: DEC
2248: ST_TO_ADDR
2249: LD_VAR 0 2
2253: PUSH
2254: FOR_TO
2255: IFFALSE 2301
// if distanceTab [ i ] [ 2 ] < min then
2257: LD_VAR 0 2
2261: PUSH
2262: LD_VAR 0 1
2266: ARRAY
2267: PUSH
2268: LD_INT 2
2270: ARRAY
2271: PUSH
2272: LD_VAR 0 3
2276: LESS
2277: IFFALSE 2299
// min = distanceTab [ i ] [ 2 ] ;
2279: LD_ADDR_VAR 0 3
2283: PUSH
2284: LD_VAR 0 2
2288: PUSH
2289: LD_VAR 0 1
2293: ARRAY
2294: PUSH
2295: LD_INT 2
2297: ARRAY
2298: ST_TO_ADDR
2299: GO 2254
2301: POP
2302: POP
// for i = 1 to distanceTab do
2303: LD_ADDR_VAR 0 1
2307: PUSH
2308: DOUBLE
2309: LD_INT 1
2311: DEC
2312: ST_TO_ADDR
2313: LD_VAR 0 2
2317: PUSH
2318: FOR_TO
2319: IFFALSE 2545
// begin if distanceTab [ i ] [ 2 ] = min then
2321: LD_VAR 0 2
2325: PUSH
2326: LD_VAR 0 1
2330: ARRAY
2331: PUSH
2332: LD_INT 2
2334: ARRAY
2335: PUSH
2336: LD_VAR 0 3
2340: EQUAL
2341: IFFALSE 2543
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2343: LD_VAR 0 2
2347: PUSH
2348: LD_VAR 0 1
2352: ARRAY
2353: PUSH
2354: LD_INT 1
2356: ARRAY
2357: PUSH
2358: LD_EXP 2
2362: EQUAL
2363: IFFALSE 2377
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2365: LD_EXP 2
2369: PPUSH
2370: LD_STRING DCorpses-Bobby-1
2372: PPUSH
2373: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2377: LD_VAR 0 2
2381: PUSH
2382: LD_VAR 0 1
2386: ARRAY
2387: PUSH
2388: LD_INT 1
2390: ARRAY
2391: PUSH
2392: LD_EXP 3
2396: EQUAL
2397: IFFALSE 2411
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2399: LD_EXP 3
2403: PPUSH
2404: LD_STRING DCorpses-Cyrus-1
2406: PPUSH
2407: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2411: LD_VAR 0 2
2415: PUSH
2416: LD_VAR 0 1
2420: ARRAY
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PUSH
2426: LD_EXP 4
2430: EQUAL
2431: IFFALSE 2445
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2433: LD_EXP 4
2437: PPUSH
2438: LD_STRING DCorpses-Lisa-1
2440: PPUSH
2441: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmpMale [ 1 ] then
2445: LD_VAR 0 2
2449: PUSH
2450: LD_VAR 0 1
2454: ARRAY
2455: PUSH
2456: LD_INT 1
2458: ARRAY
2459: PUSH
2460: LD_VAR 0 5
2464: PUSH
2465: LD_INT 1
2467: ARRAY
2468: EQUAL
2469: IFFALSE 2487
// Say ( tmpMale [ 1 ] , DCorpses-Sol1-1 ) ;
2471: LD_VAR 0 5
2475: PUSH
2476: LD_INT 1
2478: ARRAY
2479: PPUSH
2480: LD_STRING DCorpses-Sol1-1
2482: PPUSH
2483: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmpFemale [ 1 ] then
2487: LD_VAR 0 2
2491: PUSH
2492: LD_VAR 0 1
2496: ARRAY
2497: PUSH
2498: LD_INT 1
2500: ARRAY
2501: PUSH
2502: LD_VAR 0 4
2506: PUSH
2507: LD_INT 1
2509: ARRAY
2510: EQUAL
2511: IFFALSE 2529
// Say ( tmpFemale [ 1 ] , DCorpses-FSol1-1 ) ;
2513: LD_VAR 0 4
2517: PUSH
2518: LD_INT 1
2520: ARRAY
2521: PPUSH
2522: LD_STRING DCorpses-FSol1-1
2524: PPUSH
2525: CALL_OW 88
// SetLives ( DyingSold , 50 ) ;
2529: LD_EXP 29
2533: PPUSH
2534: LD_INT 50
2536: PPUSH
2537: CALL_OW 234
// break ;
2541: GO 2545
// end ; end ;
2543: GO 2318
2545: POP
2546: POP
// Say ( JMM , DCorpses-JMM-1 ) ;
2547: LD_EXP 1
2551: PPUSH
2552: LD_STRING DCorpses-JMM-1
2554: PPUSH
2555: CALL_OW 88
// SetLives ( DyingSold , 50 ) ;
2559: LD_EXP 29
2563: PPUSH
2564: LD_INT 50
2566: PPUSH
2567: CALL_OW 234
// if IsOK ( Khatam ) then
2571: LD_EXP 5
2575: PPUSH
2576: CALL_OW 302
2580: IFFALSE 2674
// begin repeat wait ( 0 0$1 ) ;
2582: LD_INT 35
2584: PPUSH
2585: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
2589: LD_EXP 5
2593: PPUSH
2594: LD_EXP 29
2598: PPUSH
2599: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
2603: LD_EXP 5
2607: PPUSH
2608: LD_EXP 29
2612: PPUSH
2613: CALL_OW 296
2617: PUSH
2618: LD_INT 2
2620: LESS
2621: IFFALSE 2582
// spotCorpses = 0 ;
2623: LD_ADDR_EXP 28
2627: PUSH
2628: LD_INT 0
2630: ST_TO_ADDR
// SetLives ( DyingSold , 4 ) ;
2631: LD_EXP 29
2635: PPUSH
2636: LD_INT 4
2638: PPUSH
2639: CALL_OW 234
// wait ( 0 0$2 ) ;
2643: LD_INT 70
2645: PPUSH
2646: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
2650: LD_EXP 5
2654: PPUSH
2655: LD_STRING DCorpses-Khat-1
2657: PPUSH
2658: CALL_OW 88
// SetLives ( DyingSold , 0 ) ;
2662: LD_EXP 29
2666: PPUSH
2667: LD_INT 0
2669: PPUSH
2670: CALL_OW 234
// end ; InGameOff ;
2674: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
2678: LD_EXP 1
2682: PPUSH
2683: LD_STRING DCorpses-JMM-2
2685: PPUSH
2686: CALL_OW 88
// end ;
2690: PPOPN 5
2692: END
// every 0 0$1 trigger spotCorpses = 1 do
2693: LD_EXP 28
2697: PUSH
2698: LD_INT 1
2700: EQUAL
2701: IFFALSE 2719
2703: GO 2705
2705: DISABLE
// begin enable ;
2706: ENABLE
// SetLives ( DyingSold , 50 ) ;
2707: LD_EXP 29
2711: PPUSH
2712: LD_INT 50
2714: PPUSH
2715: CALL_OW 234
// end ;
2719: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 do var i ;
2720: LD_INT 8
2722: PPUSH
2723: LD_INT 22
2725: PUSH
2726: LD_INT 1
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: PPUSH
2733: CALL_OW 70
2737: PUSH
2738: LD_INT 0
2740: GREATER
2741: IFFALSE 3004
2743: GO 2745
2745: DISABLE
2746: LD_INT 0
2748: PPUSH
// begin InGameOn ;
2749: CALL_OW 8
// ComTurnXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 72 , 77 ) ;
2753: LD_INT 22
2755: PUSH
2756: LD_INT 1
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 21
2765: PUSH
2766: LD_INT 1
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PPUSH
2777: CALL_OW 69
2781: PPUSH
2782: LD_INT 72
2784: PPUSH
2785: LD_INT 77
2787: PPUSH
2788: CALL_OW 118
// CenterOnUnits ( [ Brian , Jerry ] ) ;
2792: LD_EXP 6
2796: PUSH
2797: LD_EXP 7
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PPUSH
2806: CALL_OW 85
// PrepareOtherAmericans ;
2810: CALL 9715 0 0
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
2814: LD_INT 3
2816: PPUSH
2817: LD_INT 4
2819: PPUSH
2820: LD_INT 2
2822: PPUSH
2823: LD_INT 1
2825: PPUSH
2826: CALL_OW 80
// SetAttitude ( 4 , 3 , att_enemy , true ) ;
2830: LD_INT 4
2832: PPUSH
2833: LD_INT 3
2835: PPUSH
2836: LD_INT 2
2838: PPUSH
2839: LD_INT 1
2841: PPUSH
2842: CALL_OW 80
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
2846: LD_ADDR_VAR 0 1
2850: PUSH
2851: LD_INT 9
2853: PPUSH
2854: LD_INT 22
2856: PUSH
2857: LD_INT 3
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PPUSH
2864: CALL_OW 70
2868: PUSH
2869: FOR_IN
2870: IFFALSE 2883
// ComFree ( i ) ;
2872: LD_VAR 0 1
2876: PPUSH
2877: CALL_OW 139
2881: GO 2869
2883: POP
2884: POP
// wait ( 0 0$1 ) ;
2885: LD_INT 35
2887: PPUSH
2888: CALL_OW 67
// InGameOff ;
2892: CALL_OW 9
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) ) ] , DF-Sol1-1 ) ;
2896: LD_INT 22
2898: PUSH
2899: LD_INT 1
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_INT 21
2908: PUSH
2909: LD_INT 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PUSH
2916: LD_INT 26
2918: PUSH
2919: LD_INT 1
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: LIST
2930: PPUSH
2931: CALL_OW 69
2935: PUSH
2936: LD_INT 2
2938: PPUSH
2939: LD_INT 22
2941: PUSH
2942: LD_INT 1
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PUSH
2949: LD_INT 21
2951: PUSH
2952: LD_INT 1
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PUSH
2959: LD_INT 26
2961: PUSH
2962: LD_INT 1
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: LIST
2973: PPUSH
2974: CALL_OW 69
2978: PPUSH
2979: CALL_OW 12
2983: ARRAY
2984: PPUSH
2985: LD_STRING DF-Sol1-1
2987: PPUSH
2988: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
2992: LD_EXP 1
2996: PPUSH
2997: LD_STRING DF-JMM-1
2999: PPUSH
3000: CALL_OW 88
// end ;
3004: PPOPN 1
3006: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3007: LD_INT 19
3009: PPUSH
3010: LD_INT 22
3012: PUSH
3013: LD_INT 3
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PPUSH
3020: CALL_OW 70
3024: PUSH
3025: LD_INT 0
3027: EQUAL
3028: IFFALSE 3141
3030: GO 3032
3032: DISABLE
// begin if not IsDead ( Brian ) then
3033: LD_EXP 6
3037: PPUSH
3038: CALL_OW 301
3042: NOT
3043: IFFALSE 3057
// SetSide ( Brian , 1 ) ;
3045: LD_EXP 6
3049: PPUSH
3050: LD_INT 1
3052: PPUSH
3053: CALL_OW 235
// if not IsDead ( Jerry ) then
3057: LD_EXP 7
3061: PPUSH
3062: CALL_OW 301
3066: NOT
3067: IFFALSE 3081
// SetSide ( Jerry , 1 ) ;
3069: LD_EXP 7
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3081: LD_INT 22
3083: PUSH
3084: LD_INT 1
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PUSH
3091: LD_INT 25
3093: PUSH
3094: LD_INT 4
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: PPUSH
3105: CALL_OW 69
3109: PUSH
3110: LD_INT 0
3112: GREATER
3113: IFFALSE 3129
// begin Say ( JMM , DFa-JMM-1 ) ;
3115: LD_EXP 1
3119: PPUSH
3120: LD_STRING DFa-JMM-1
3122: PPUSH
3123: CALL_OW 88
// end else
3127: GO 3141
// begin Say ( JMM , DFa-JMM-1a ) ;
3129: LD_EXP 1
3133: PPUSH
3134: LD_STRING DFa-JMM-1a
3136: PPUSH
3137: CALL_OW 88
// end ; end ;
3141: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and GetLives ( Brian ) > 250 do
3142: LD_INT 19
3144: PPUSH
3145: LD_INT 22
3147: PUSH
3148: LD_INT 3
3150: PUSH
3151: EMPTY
3152: LIST
3153: LIST
3154: PPUSH
3155: CALL_OW 70
3159: PUSH
3160: LD_INT 0
3162: EQUAL
3163: PUSH
3164: LD_EXP 6
3168: PPUSH
3169: CALL_OW 256
3173: PUSH
3174: LD_INT 250
3176: GREATER
3177: AND
3178: IFFALSE 3233
3180: GO 3182
3182: DISABLE
// begin Say ( Brian , DFb-Sol1-1 ) ;
3183: LD_EXP 6
3187: PPUSH
3188: LD_STRING DFb-Sol1-1
3190: PPUSH
3191: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3195: LD_EXP 6
3199: PPUSH
3200: LD_INT 78
3202: PPUSH
3203: LD_INT 74
3205: PPUSH
3206: CALL_OW 111
// if IsDead ( Jerry ) then
3210: LD_EXP 7
3214: PPUSH
3215: CALL_OW 301
3219: IFFALSE 3233
// Say ( Brian , DFb-Sol1-1a ) end ;
3221: LD_EXP 6
3225: PPUSH
3226: LD_STRING DFb-Sol1-1a
3228: PPUSH
3229: CALL_OW 88
3233: END
// every 0 0$1 do var i ;
3234: GO 3236
3236: DISABLE
3237: LD_INT 0
3239: PPUSH
// begin enable ;
3240: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3241: LD_ADDR_VAR 0 1
3245: PUSH
3246: LD_INT 22
3248: PUSH
3249: LD_INT 3
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: PUSH
3256: LD_INT 21
3258: PUSH
3259: LD_INT 3
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: PUSH
3266: LD_INT 30
3268: PUSH
3269: LD_INT 31
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: LIST
3280: PPUSH
3281: CALL_OW 69
3285: PUSH
3286: FOR_IN
3287: IFFALSE 3318
// begin if See ( 1 , i ) then
3289: LD_INT 1
3291: PPUSH
3292: LD_VAR 0 1
3296: PPUSH
3297: CALL_OW 292
3301: IFFALSE 3316
// begin disable ;
3303: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3304: LD_EXP 1
3308: PPUSH
3309: LD_STRING DX1-JMM-1
3311: PPUSH
3312: CALL_OW 88
// end ; end ;
3316: GO 3286
3318: POP
3319: POP
// end ;
3320: PPOPN 1
3322: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3323: LD_INT 1
3325: PPUSH
3326: LD_INT 11
3328: PPUSH
3329: CALL_OW 294
3333: IFFALSE 3696
3335: GO 3337
3337: DISABLE
3338: LD_INT 0
3340: PPUSH
3341: PPUSH
// begin DialogueOn ;
3342: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3346: LD_INT 11
3348: PPUSH
3349: LD_INT 22
3351: PUSH
3352: LD_INT 3
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 21
3361: PUSH
3362: LD_INT 1
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PPUSH
3373: CALL_OW 70
3377: PUSH
3378: LD_INT 1
3380: ARRAY
3381: PPUSH
3382: LD_STRING DX3-Rus1-1
3384: PPUSH
3385: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3389: LD_EXP 1
3393: PPUSH
3394: LD_STRING DX3-JMM-1
3396: PPUSH
3397: CALL_OW 88
// DialogueOff ;
3401: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3405: LD_ADDR_VAR 0 1
3409: PUSH
3410: LD_INT 11
3412: PPUSH
3413: LD_INT 22
3415: PUSH
3416: LD_INT 3
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 21
3425: PUSH
3426: LD_INT 1
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PPUSH
3437: CALL_OW 70
3441: PUSH
3442: FOR_IN
3443: IFFALSE 3463
// southBaseDefenders = southBaseDefenders ^ i ;
3445: LD_ADDR_EXP 24
3449: PUSH
3450: LD_EXP 24
3454: PUSH
3455: LD_VAR 0 1
3459: ADD
3460: ST_TO_ADDR
3461: GO 3442
3463: POP
3464: POP
// wait ( [ 0 0$10 , 0 0$15 , 0 0$20 ] [ Difficulty ] ) ;
3465: LD_INT 350
3467: PUSH
3468: LD_INT 525
3470: PUSH
3471: LD_INT 700
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: LIST
3478: PUSH
3479: LD_OWVAR 67
3483: ARRAY
3484: PPUSH
3485: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3489: LD_INT 35
3491: PPUSH
3492: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
3496: LD_ADDR_VAR 0 1
3500: PUSH
3501: LD_INT 22
3503: PUSH
3504: LD_INT 3
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PUSH
3511: LD_INT 21
3513: PUSH
3514: LD_INT 2
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: LD_INT 58
3523: PUSH
3524: EMPTY
3525: LIST
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: LIST
3531: PPUSH
3532: CALL_OW 69
3536: PUSH
3537: FOR_IN
3538: IFFALSE 3608
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
3540: LD_ADDR_VAR 0 2
3544: PUSH
3545: LD_INT 22
3547: PUSH
3548: LD_INT 3
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PUSH
3555: LD_INT 21
3557: PUSH
3558: LD_INT 1
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: PUSH
3565: LD_INT 25
3567: PUSH
3568: LD_INT 3
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: PPUSH
3580: CALL_OW 69
3584: PUSH
3585: FOR_IN
3586: IFFALSE 3604
// begin ComEnterUnit ( j , i ) ;
3588: LD_VAR 0 2
3592: PPUSH
3593: LD_VAR 0 1
3597: PPUSH
3598: CALL_OW 120
// end ;
3602: GO 3585
3604: POP
3605: POP
// end ;
3606: GO 3537
3608: POP
3609: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
3610: LD_INT 22
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 21
3622: PUSH
3623: LD_INT 2
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PUSH
3630: LD_INT 58
3632: PUSH
3633: EMPTY
3634: LIST
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: LIST
3640: PPUSH
3641: CALL_OW 69
3645: PUSH
3646: LD_INT 0
3648: EQUAL
3649: PUSH
3650: LD_INT 22
3652: PUSH
3653: LD_INT 3
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 21
3662: PUSH
3663: LD_INT 1
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: PUSH
3670: LD_INT 25
3672: PUSH
3673: LD_INT 3
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: LIST
3684: PPUSH
3685: CALL_OW 69
3689: PUSH
3690: LD_INT 0
3692: EQUAL
3693: OR
3694: IFFALSE 3489
// end ;
3696: PPOPN 2
3698: END
// every 0 0$1 trigger FilterUnitsInArea ( SouthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 do
3699: LD_INT 23
3701: PPUSH
3702: LD_INT 22
3704: PUSH
3705: LD_INT 3
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: LD_INT 21
3714: PUSH
3715: LD_INT 1
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PUSH
3722: LD_INT 25
3724: PUSH
3725: LD_INT 3
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: LIST
3736: PPUSH
3737: CALL_OW 70
3741: PUSH
3742: LD_INT 0
3744: EQUAL
3745: IFFALSE 3799
3747: GO 3749
3749: DISABLE
// begin if IsOK ( Bobby ) then
3750: LD_EXP 2
3754: PPUSH
3755: CALL_OW 302
3759: IFFALSE 3787
// begin Say ( Bobby , DX2-Bobby-1 ) ;
3761: LD_EXP 2
3765: PPUSH
3766: LD_STRING DX2-Bobby-1
3768: PPUSH
3769: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
3773: LD_EXP 1
3777: PPUSH
3778: LD_STRING DX2-JMM-1a
3780: PPUSH
3781: CALL_OW 88
// end else
3785: GO 3799
// begin Say ( JMM , DX2-JMM-1 ) ;
3787: LD_EXP 1
3791: PPUSH
3792: LD_STRING DX2-JMM-1
3794: PPUSH
3795: CALL_OW 88
// end ; end ;
3799: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
3800: LD_INT 22
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PUSH
3810: LD_INT 23
3812: PUSH
3813: LD_INT 3
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 21
3822: PUSH
3823: LD_INT 2
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 34
3832: PUSH
3833: LD_INT 42
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: PPUSH
3846: CALL_OW 69
3850: PUSH
3851: LD_INT 1
3853: GREATEREQUAL
3854: IFFALSE 4297
3856: GO 3858
3858: DISABLE
3859: LD_INT 0
3861: PPUSH
3862: PPUSH
3863: PPUSH
3864: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
3865: LD_ADDR_VAR 0 1
3869: PUSH
3870: LD_INT 22
3872: PUSH
3873: LD_INT 1
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 23
3882: PUSH
3883: LD_INT 3
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PUSH
3890: LD_INT 21
3892: PUSH
3893: LD_INT 2
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: PUSH
3900: LD_INT 34
3902: PUSH
3903: LD_INT 42
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: PPUSH
3916: CALL_OW 69
3920: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
3921: LD_ADDR_VAR 0 2
3925: PUSH
3926: LD_INT 22
3928: PUSH
3929: LD_INT 1
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: PUSH
3936: LD_INT 21
3938: PUSH
3939: LD_INT 1
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: LD_INT 26
3948: PUSH
3949: LD_INT 1
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: LIST
3960: PPUSH
3961: CALL_OW 69
3965: PUSH
3966: LD_EXP 1
3970: PUSH
3971: LD_EXP 3
3975: PUSH
3976: LD_EXP 2
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: LIST
3985: DIFF
3986: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
3987: LD_ADDR_VAR 0 3
3991: PUSH
3992: LD_INT 22
3994: PUSH
3995: LD_INT 1
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 21
4004: PUSH
4005: LD_INT 1
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_INT 26
4014: PUSH
4015: LD_INT 2
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: PPUSH
4027: CALL_OW 69
4031: PUSH
4032: LD_EXP 4
4036: PUSH
4037: EMPTY
4038: LIST
4039: DIFF
4040: ST_TO_ADDR
// Say ( JMM , DX2a-JMM-1 ) ;
4041: LD_EXP 1
4045: PPUSH
4046: LD_STRING DX2a-JMM-1
4048: PPUSH
4049: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4053: LD_EXP 2
4057: PPUSH
4058: CALL_OW 310
4062: PUSH
4063: LD_VAR 0 1
4067: PUSH
4068: LD_INT 1
4070: ARRAY
4071: EQUAL
4072: IFFALSE 4086
// Say ( Bobby , DX2a-Bobby-1 ) ;
4074: LD_EXP 2
4078: PPUSH
4079: LD_STRING DX2a-Bobby-1
4081: PPUSH
4082: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4086: LD_EXP 3
4090: PPUSH
4091: CALL_OW 310
4095: PUSH
4096: LD_VAR 0 1
4100: PUSH
4101: LD_INT 1
4103: ARRAY
4104: EQUAL
4105: IFFALSE 4119
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4107: LD_EXP 3
4111: PPUSH
4112: LD_STRING DX2a-Cyrus-1
4114: PPUSH
4115: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4119: LD_EXP 4
4123: PPUSH
4124: CALL_OW 310
4128: PUSH
4129: LD_VAR 0 1
4133: PUSH
4134: LD_INT 1
4136: ARRAY
4137: EQUAL
4138: IFFALSE 4152
// Say ( Lisa , DX2a-Lisa-1 ) ;
4140: LD_EXP 4
4144: PPUSH
4145: LD_STRING DX2a-Lisa-1
4147: PPUSH
4148: CALL_OW 88
// for i in temp1 do
4152: LD_ADDR_VAR 0 4
4156: PUSH
4157: LD_VAR 0 2
4161: PUSH
4162: FOR_IN
4163: IFFALSE 4200
// if IsInUnit ( i ) = tmp [ 1 ] then
4165: LD_VAR 0 4
4169: PPUSH
4170: CALL_OW 310
4174: PUSH
4175: LD_VAR 0 1
4179: PUSH
4180: LD_INT 1
4182: ARRAY
4183: EQUAL
4184: IFFALSE 4198
// Say ( i , DX2a-Sol1-1 ) ;
4186: LD_VAR 0 4
4190: PPUSH
4191: LD_STRING DX2a-Sol1-1
4193: PPUSH
4194: CALL_OW 88
4198: GO 4162
4200: POP
4201: POP
// for i in temp2 do
4202: LD_ADDR_VAR 0 4
4206: PUSH
4207: LD_VAR 0 3
4211: PUSH
4212: FOR_IN
4213: IFFALSE 4250
// if IsInUnit ( i ) = tmp [ 1 ] then
4215: LD_VAR 0 4
4219: PPUSH
4220: CALL_OW 310
4224: PUSH
4225: LD_VAR 0 1
4229: PUSH
4230: LD_INT 1
4232: ARRAY
4233: EQUAL
4234: IFFALSE 4248
// Say ( i , DX2a-FSol1-1 ) ;
4236: LD_VAR 0 4
4240: PPUSH
4241: LD_STRING DX2a-FSol1-1
4243: PPUSH
4244: CALL_OW 88
4248: GO 4212
4250: POP
4251: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4252: LD_EXP 1
4256: PPUSH
4257: CALL_OW 310
4261: PUSH
4262: LD_VAR 0 1
4266: PUSH
4267: LD_INT 1
4269: ARRAY
4270: EQUAL
4271: IFFALSE 4285
// Say ( JMM , DX2b-JMM-1 ) ;
4273: LD_EXP 1
4277: PPUSH
4278: LD_STRING DX2b-JMM-1
4280: PPUSH
4281: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4285: LD_EXP 1
4289: PPUSH
4290: LD_STRING DX2a-JMM-2
4292: PPUSH
4293: CALL_OW 88
// end ;
4297: PPOPN 4
4299: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4300: LD_INT 1
4302: PPUSH
4303: CALL_OW 255
4307: PUSH
4308: LD_INT 1
4310: EQUAL
4311: PUSH
4312: LD_INT 10
4314: PPUSH
4315: CALL_OW 255
4319: PUSH
4320: LD_INT 1
4322: EQUAL
4323: OR
4324: IFFALSE 4384
4326: GO 4328
4328: DISABLE
// begin DialogueOn ;
4329: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4333: LD_EXP 1
4337: PPUSH
4338: LD_STRING D3-JMM-1
4340: PPUSH
4341: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4345: LD_EXP 9
4349: PPUSH
4350: LD_STRING D3-Pow-1
4352: PPUSH
4353: CALL_OW 94
// if IsOK ( Cyrus ) then
4357: LD_EXP 3
4361: PPUSH
4362: CALL_OW 302
4366: IFFALSE 4380
// Say ( Cyrus , D3-Cyrus-1 ) ;
4368: LD_EXP 3
4372: PPUSH
4373: LD_STRING D3-Cyrus-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ;
4384: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , i ;
4385: LD_INT 1
4387: PPUSH
4388: CALL_OW 255
4392: PUSH
4393: LD_INT 1
4395: EQUAL
4396: PUSH
4397: LD_INT 10
4399: PPUSH
4400: CALL_OW 255
4404: PUSH
4405: LD_INT 1
4407: EQUAL
4408: AND
4409: IFFALSE 5576
4411: GO 4413
4413: DISABLE
4414: LD_INT 0
4416: PPUSH
4417: PPUSH
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff [ JMM ] ;
4418: LD_ADDR_VAR 0 1
4422: PUSH
4423: LD_INT 22
4425: PUSH
4426: LD_INT 1
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PUSH
4433: LD_INT 25
4435: PUSH
4436: LD_INT 2
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PPUSH
4447: CALL_OW 69
4451: PUSH
4452: LD_EXP 1
4456: PUSH
4457: EMPTY
4458: LIST
4459: DIFF
4460: ST_TO_ADDR
// DialogueOn ;
4461: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
4465: LD_EXP 1
4469: PPUSH
4470: LD_STRING D3a-JMM-1
4472: PPUSH
4473: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
4477: LD_EXP 9
4481: PPUSH
4482: LD_STRING D3a-Pow-1
4484: PPUSH
4485: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
4489: LD_EXP 1
4493: PPUSH
4494: LD_STRING D3a-JMM-2
4496: PPUSH
4497: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
4501: LD_EXP 9
4505: PPUSH
4506: LD_STRING D3a-Pow-2
4508: PPUSH
4509: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
4513: LD_EXP 1
4517: PPUSH
4518: LD_STRING D3a-JMM-3
4520: PPUSH
4521: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
4525: LD_EXP 9
4529: PPUSH
4530: LD_STRING D3a-Pow-3
4532: PPUSH
4533: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
4537: LD_EXP 1
4541: PPUSH
4542: LD_STRING D3a-JMM-4
4544: PPUSH
4545: CALL_OW 88
// DialogueOff ;
4549: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4553: LD_STRING M2
4555: PPUSH
4556: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
4560: LD_EXP 1
4564: PPUSH
4565: LD_STRING D3b-JMM-1
4567: PPUSH
4568: CALL_OW 88
// wait ( 0 0$5 ) ;
4572: LD_INT 175
4574: PPUSH
4575: CALL_OW 67
// InGameOn ;
4579: CALL_OW 8
// PrepareRussianHeroes ;
4583: CALL 10024 0 0
// CenterNowOnUnits ( Mikhail ) ;
4587: LD_EXP 8
4591: PPUSH
4592: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
4596: LD_EXP 1
4600: PUSH
4601: LD_VAR 0 1
4605: PUSH
4606: LD_INT 1
4608: ARRAY
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: PPUSH
4614: LD_EXP 8
4618: PPUSH
4619: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
4623: LD_EXP 8
4627: PPUSH
4628: LD_VAR 0 1
4632: PUSH
4633: LD_INT 1
4635: ARRAY
4636: PPUSH
4637: CALL_OW 119
// Say ( Mikhail , D4-Mikh-1 ) ;
4641: LD_EXP 8
4645: PPUSH
4646: LD_STRING D4-Mikh-1
4648: PPUSH
4649: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
4653: LD_VAR 0 1
4657: PUSH
4658: LD_INT 1
4660: ARRAY
4661: PPUSH
4662: CALL_OW 258
4666: PUSH
4667: LD_INT 1
4669: EQUAL
4670: IFFALSE 4688
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
4672: LD_VAR 0 1
4676: PUSH
4677: LD_INT 1
4679: ARRAY
4680: PPUSH
4681: LD_STRING D4-Sol1-1
4683: PPUSH
4684: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
4688: LD_VAR 0 1
4692: PUSH
4693: LD_INT 1
4695: ARRAY
4696: PPUSH
4697: CALL_OW 258
4701: PUSH
4702: LD_INT 2
4704: EQUAL
4705: IFFALSE 4723
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
4707: LD_VAR 0 1
4711: PUSH
4712: LD_INT 1
4714: ARRAY
4715: PPUSH
4716: LD_STRING D4-FSol1-1
4718: PPUSH
4719: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
4723: LD_EXP 8
4727: PPUSH
4728: LD_STRING D4-Mikh-2
4730: PPUSH
4731: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
4735: LD_VAR 0 1
4739: PUSH
4740: LD_INT 1
4742: ARRAY
4743: PPUSH
4744: CALL_OW 258
4748: PUSH
4749: LD_INT 1
4751: EQUAL
4752: IFFALSE 4770
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
4754: LD_VAR 0 1
4758: PUSH
4759: LD_INT 1
4761: ARRAY
4762: PPUSH
4763: LD_STRING D4-Sol1-2
4765: PPUSH
4766: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
4770: LD_VAR 0 1
4774: PUSH
4775: LD_INT 1
4777: ARRAY
4778: PPUSH
4779: CALL_OW 258
4783: PUSH
4784: LD_INT 2
4786: EQUAL
4787: IFFALSE 4805
// Say ( temp [ 2 ] , D4-FSol1-2 ) ;
4789: LD_VAR 0 1
4793: PUSH
4794: LD_INT 2
4796: ARRAY
4797: PPUSH
4798: LD_STRING D4-FSol1-2
4800: PPUSH
4801: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
4805: LD_EXP 8
4809: PPUSH
4810: LD_STRING D4-Mikh-3
4812: PPUSH
4813: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
4817: LD_VAR 0 1
4821: PUSH
4822: LD_INT 1
4824: ARRAY
4825: PPUSH
4826: CALL_OW 258
4830: PUSH
4831: LD_INT 1
4833: EQUAL
4834: IFFALSE 4852
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
4836: LD_VAR 0 1
4840: PUSH
4841: LD_INT 1
4843: ARRAY
4844: PPUSH
4845: LD_STRING D4-Sol1-3
4847: PPUSH
4848: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
4852: LD_VAR 0 1
4856: PUSH
4857: LD_INT 1
4859: ARRAY
4860: PPUSH
4861: CALL_OW 258
4865: PUSH
4866: LD_INT 2
4868: EQUAL
4869: IFFALSE 4887
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
4871: LD_VAR 0 1
4875: PUSH
4876: LD_INT 1
4878: ARRAY
4879: PPUSH
4880: LD_STRING D4-FSol1-3
4882: PPUSH
4883: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
4887: LD_EXP 8
4891: PPUSH
4892: LD_STRING D4-Mikh-4
4894: PPUSH
4895: CALL_OW 88
// case query ( Qs1 ) of 1 :
4899: LD_STRING Qs1
4901: PPUSH
4902: CALL_OW 97
4906: PUSH
4907: LD_INT 1
4909: DOUBLE
4910: EQUAL
4911: IFTRUE 4915
4913: GO 4950
4915: POP
// begin InGameOff ;
4916: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4920: LD_INT 1
4922: PPUSH
4923: LD_INT 6
4925: PPUSH
4926: LD_INT 2
4928: PPUSH
4929: LD_INT 1
4931: PPUSH
4932: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
4936: LD_EXP 8
4940: PPUSH
4941: LD_INT 17
4943: PPUSH
4944: CALL_OW 113
// end ; 2 :
4948: GO 5572
4950: LD_INT 2
4952: DOUBLE
4953: EQUAL
4954: IFTRUE 4958
4956: GO 5537
4958: POP
// begin repeat wait ( 0 0$1 ) ;
4959: LD_INT 35
4961: PPUSH
4962: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
4966: LD_VAR 0 1
4970: PUSH
4971: LD_INT 1
4973: ARRAY
4974: PPUSH
4975: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
4979: LD_VAR 0 1
4983: PUSH
4984: LD_INT 1
4986: ARRAY
4987: PPUSH
4988: LD_EXP 1
4992: PPUSH
4993: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
4997: LD_EXP 8
5001: PPUSH
5002: LD_EXP 1
5006: PPUSH
5007: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5011: LD_EXP 1
5015: PPUSH
5016: LD_EXP 8
5020: PPUSH
5021: CALL_OW 296
5025: PUSH
5026: LD_INT 5
5028: LESS
5029: IFFALSE 4959
// ComTurnUnit ( Mikhail , JMM ) ;
5031: LD_EXP 8
5035: PPUSH
5036: LD_EXP 1
5040: PPUSH
5041: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5045: LD_EXP 1
5049: PPUSH
5050: LD_STRING D4b-JMM-1
5052: PPUSH
5053: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5057: LD_EXP 8
5061: PPUSH
5062: LD_STRING D4b-Mikh-1
5064: PPUSH
5065: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5069: LD_EXP 1
5073: PPUSH
5074: LD_STRING D4b-JMM-2
5076: PPUSH
5077: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5081: LD_EXP 8
5085: PPUSH
5086: LD_STRING D4b-Mikh-2
5088: PPUSH
5089: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5093: LD_EXP 1
5097: PPUSH
5098: LD_STRING D4b-JMM-3
5100: PPUSH
5101: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5105: LD_EXP 8
5109: PPUSH
5110: LD_STRING D4b-Mikh-3
5112: PPUSH
5113: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5117: LD_EXP 1
5121: PPUSH
5122: LD_STRING D4b-JMM-4
5124: PPUSH
5125: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5129: LD_EXP 8
5133: PPUSH
5134: LD_STRING D4b-Mikh-4
5136: PPUSH
5137: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5141: LD_EXP 1
5145: PPUSH
5146: LD_STRING D4b-JMM-5
5148: PPUSH
5149: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5153: LD_EXP 8
5157: PPUSH
5158: LD_STRING D4b-Mikh-5
5160: PPUSH
5161: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5165: LD_EXP 1
5169: PPUSH
5170: LD_STRING D4b-JMM-6
5172: PPUSH
5173: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5177: LD_EXP 8
5181: PPUSH
5182: LD_STRING D4b-Mikh-6
5184: PPUSH
5185: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5189: LD_EXP 1
5193: PPUSH
5194: LD_STRING D4b-JMM-7
5196: PPUSH
5197: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5201: LD_EXP 8
5205: PPUSH
5206: LD_STRING D4b-Mikh-7
5208: PPUSH
5209: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5213: LD_VAR 0 1
5217: PUSH
5218: LD_INT 1
5220: ARRAY
5221: PPUSH
5222: CALL_OW 258
5226: PUSH
5227: LD_INT 1
5229: EQUAL
5230: IFFALSE 5248
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5232: LD_VAR 0 1
5236: PUSH
5237: LD_INT 1
5239: ARRAY
5240: PPUSH
5241: LD_STRING D4b-Sol1-7
5243: PPUSH
5244: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5248: LD_VAR 0 1
5252: PUSH
5253: LD_INT 1
5255: ARRAY
5256: PPUSH
5257: CALL_OW 258
5261: PUSH
5262: LD_INT 2
5264: EQUAL
5265: IFFALSE 5283
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5267: LD_VAR 0 1
5271: PUSH
5272: LD_INT 1
5274: ARRAY
5275: PPUSH
5276: LD_STRING D4b-FSol1-7
5278: PPUSH
5279: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5283: LD_EXP 1
5287: PPUSH
5288: LD_STRING D4b-JMM-8
5290: PPUSH
5291: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5295: LD_VAR 0 1
5299: PUSH
5300: LD_INT 1
5302: ARRAY
5303: PPUSH
5304: CALL_OW 258
5308: PUSH
5309: LD_INT 1
5311: EQUAL
5312: IFFALSE 5330
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5314: LD_VAR 0 1
5318: PUSH
5319: LD_INT 1
5321: ARRAY
5322: PPUSH
5323: LD_STRING D4b-Sol1-8
5325: PPUSH
5326: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5330: LD_VAR 0 1
5334: PUSH
5335: LD_INT 1
5337: ARRAY
5338: PPUSH
5339: CALL_OW 258
5343: PUSH
5344: LD_INT 2
5346: EQUAL
5347: IFFALSE 5365
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
5349: LD_VAR 0 1
5353: PUSH
5354: LD_INT 1
5356: ARRAY
5357: PPUSH
5358: LD_STRING D4b-FSol1-8
5360: PPUSH
5361: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
5365: LD_EXP 1
5369: PPUSH
5370: LD_STRING D4b-JMM-9
5372: PPUSH
5373: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
5377: LD_EXP 8
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5389: LD_ADDR_VAR 0 2
5393: PUSH
5394: LD_INT 22
5396: PUSH
5397: LD_INT 1
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: PUSH
5404: EMPTY
5405: LIST
5406: PPUSH
5407: CALL_OW 69
5411: PUSH
5412: FOR_IN
5413: IFFALSE 5426
// ComFree ( i ) ;
5415: LD_VAR 0 2
5419: PPUSH
5420: CALL_OW 139
5424: GO 5412
5426: POP
5427: POP
// repeat wait ( 0 0$1 ) ;
5428: LD_INT 35
5430: PPUSH
5431: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
5435: LD_EXP 8
5439: PPUSH
5440: CALL_OW 87
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
5444: LD_EXP 8
5448: PPUSH
5449: LD_INT 1
5451: PPUSH
5452: CALL_OW 296
5456: PUSH
5457: LD_EXP 8
5461: PPUSH
5462: LD_INT 10
5464: PPUSH
5465: CALL_OW 296
5469: LESS
5470: IFFALSE 5486
// begin ComEnterUnit ( Mikhail , dep1 ) ;
5472: LD_EXP 8
5476: PPUSH
5477: LD_INT 1
5479: PPUSH
5480: CALL_OW 120
// end else
5484: GO 5498
// begin ComEnterUnit ( Mikhail , dep2 ) ;
5486: LD_EXP 8
5490: PPUSH
5491: LD_INT 10
5493: PPUSH
5494: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
5498: LD_EXP 8
5502: PPUSH
5503: CALL_OW 310
5507: IFFALSE 5428
// mikhailDepot = IsInUnit ( Mikhail ) ;
5509: LD_ADDR_EXP 22
5513: PUSH
5514: LD_EXP 8
5518: PPUSH
5519: CALL_OW 310
5523: ST_TO_ADDR
// InGameOff ;
5524: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
5528: LD_STRING M3
5530: PPUSH
5531: CALL_OW 337
// end ; 3 :
5535: GO 5572
5537: LD_INT 3
5539: DOUBLE
5540: EQUAL
5541: IFTRUE 5545
5543: GO 5571
5545: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
5546: LD_EXP 8
5550: PPUSH
5551: LD_INT 17
5553: PPUSH
5554: CALL_OW 113
// wait ( 0 0$3 ) ;
5558: LD_INT 105
5560: PPUSH
5561: CALL_OW 67
// InGameOff ;
5565: CALL_OW 9
// end ; end ;
5569: GO 5572
5571: POP
// PrepareTigers ;
5572: CALL 12286 0 0
// end ;
5576: PPOPN 2
5578: END
// every 5 5$0 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 255
5586: PUSH
5587: LD_INT 1
5589: EQUAL
5590: PUSH
5591: LD_INT 10
5593: PPUSH
5594: CALL_OW 255
5598: PUSH
5599: LD_INT 1
5601: EQUAL
5602: AND
5603: IFFALSE 5718
5605: GO 5607
5607: DISABLE
// begin PrepareCargoBays ;
5608: CALL 11172 0 0
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
5612: LD_EXP 15
5616: PUSH
5617: LD_EXP 16
5621: PUSH
5622: LD_EXP 17
5626: PUSH
5627: LD_EXP 18
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: PPUSH
5638: LD_INT 53
5640: PPUSH
5641: LD_INT 16
5643: PPUSH
5644: CALL_OW 111
// wait ( 0 0$5 ) ;
5648: LD_INT 175
5650: PPUSH
5651: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
5655: LD_EXP 17
5659: PPUSH
5660: LD_STRING D5-Rus2-1
5662: PPUSH
5663: CALL_OW 88
// wait ( 0 0$7 ) ;
5667: LD_INT 245
5669: PPUSH
5670: CALL_OW 67
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
5674: LD_EXP 15
5678: PUSH
5679: LD_EXP 16
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: PPUSH
5688: LD_INT 7
5690: PPUSH
5691: LD_INT 9
5693: PPUSH
5694: CALL_OW 111
// Say ( driver1 , D5-Rus2-1a ) ;
5698: LD_EXP 17
5702: PPUSH
5703: LD_STRING D5-Rus2-1a
5705: PPUSH
5706: CALL_OW 88
// cargoEscape = 1 ;
5710: LD_ADDR_EXP 19
5714: PUSH
5715: LD_INT 1
5717: ST_TO_ADDR
// end ;
5718: END
// every 0 0$1 trigger cargoEscape > 0 do
5719: LD_EXP 19
5723: PUSH
5724: LD_INT 0
5726: GREATER
5727: IFFALSE 5853
5729: GO 5731
5731: DISABLE
// begin enable ;
5732: ENABLE
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
5733: LD_EXP 15
5737: PPUSH
5738: LD_INT 13
5740: PPUSH
5741: CALL_OW 308
5745: PUSH
5746: LD_EXP 17
5750: PPUSH
5751: LD_INT 13
5753: PPUSH
5754: CALL_OW 308
5758: OR
5759: IFFALSE 5793
// begin RemoveUnit ( cargo1 ) ;
5761: LD_EXP 15
5765: PPUSH
5766: CALL_OW 64
// RemoveUnit ( driver1 ) ;
5770: LD_EXP 17
5774: PPUSH
5775: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
5779: LD_ADDR_EXP 19
5783: PUSH
5784: LD_EXP 19
5788: PUSH
5789: LD_INT 1
5791: PLUS
5792: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
5793: LD_EXP 16
5797: PPUSH
5798: LD_INT 13
5800: PPUSH
5801: CALL_OW 308
5805: PUSH
5806: LD_EXP 18
5810: PPUSH
5811: LD_INT 13
5813: PPUSH
5814: CALL_OW 308
5818: OR
5819: IFFALSE 5853
// begin RemoveUnit ( cargo2 ) ;
5821: LD_EXP 16
5825: PPUSH
5826: CALL_OW 64
// RemoveUnit ( driver2 ) ;
5830: LD_EXP 18
5834: PPUSH
5835: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
5839: LD_ADDR_EXP 19
5843: PUSH
5844: LD_EXP 19
5848: PUSH
5849: LD_INT 1
5851: PLUS
5852: ST_TO_ADDR
// end ; end ;
5853: END
// every 0 0$1 trigger cargoEscape > 1 do
5854: LD_EXP 19
5858: PUSH
5859: LD_INT 1
5861: GREATER
5862: IFFALSE 5953
5864: GO 5866
5866: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
5867: LD_INT 22
5869: PUSH
5870: LD_INT 1
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: PUSH
5877: LD_INT 26
5879: PUSH
5880: LD_INT 1
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PPUSH
5891: CALL_OW 69
5895: PUSH
5896: LD_INT 2
5898: PPUSH
5899: LD_INT 22
5901: PUSH
5902: LD_INT 1
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: PUSH
5909: LD_INT 26
5911: PUSH
5912: LD_INT 1
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PPUSH
5923: CALL_OW 69
5927: PPUSH
5928: CALL_OW 12
5932: ARRAY
5933: PPUSH
5934: LD_STRING D5a-Sol1-1
5936: PPUSH
5937: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
5941: LD_EXP 1
5945: PPUSH
5946: LD_STRING D5a-JMM-1
5948: PPUSH
5949: CALL_OW 88
// end ;
5953: END
// every 0 0$1 trigger GetLives ( dep1 ) < 1000 or GetLives ( dep2 ) < 1000 do
5954: LD_INT 1
5956: PPUSH
5957: CALL_OW 256
5961: PUSH
5962: LD_INT 1000
5964: LESS
5965: PUSH
5966: LD_INT 10
5968: PPUSH
5969: CALL_OW 256
5973: PUSH
5974: LD_INT 1000
5976: LESS
5977: OR
5978: IFFALSE 5995
5980: GO 5982
5982: DISABLE
// Say ( JMM ,  D8-JMM-1 ) ;
5983: LD_EXP 1
5987: PPUSH
5988: LD_STRING  D8-JMM-1
5990: PPUSH
5991: CALL_OW 88
5995: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) do
5996: LD_EXP 8
6000: PPUSH
6001: CALL_OW 310
6005: IFFALSE 6019
6007: GO 6009
6009: DISABLE
// begin mikhailInBase = 1 ;
6010: LD_ADDR_EXP 21
6014: PUSH
6015: LD_INT 1
6017: ST_TO_ADDR
// enable ;
6018: ENABLE
// end ;
6019: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
6020: LD_EXP 8
6024: PPUSH
6025: LD_INT 25
6027: PPUSH
6028: CALL_OW 308
6032: PUSH
6033: LD_EXP 21
6037: PUSH
6038: LD_INT 1
6040: EQUAL
6041: AND
6042: PUSH
6043: LD_EXP 8
6047: PPUSH
6048: CALL_OW 255
6052: PUSH
6053: LD_INT 1
6055: EQUAL
6056: AND
6057: IFFALSE 6387
6059: GO 6061
6061: DISABLE
// begin mikhailInBase = 4 ;
6062: LD_ADDR_EXP 21
6066: PUSH
6067: LD_INT 4
6069: ST_TO_ADDR
// enable ;
6070: ENABLE
// case query ( QMikh2 ) of 1 :
6071: LD_STRING QMikh2
6073: PPUSH
6074: CALL_OW 97
6078: PUSH
6079: LD_INT 1
6081: DOUBLE
6082: EQUAL
6083: IFTRUE 6087
6085: GO 6154
6087: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
6088: LD_INT 1
6090: PPUSH
6091: LD_INT 6
6093: PPUSH
6094: LD_INT 2
6096: PPUSH
6097: LD_INT 1
6099: PPUSH
6100: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
6104: LD_EXP 8
6108: PPUSH
6109: LD_INT 6
6111: PPUSH
6112: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6116: LD_EXP 8
6120: PPUSH
6121: CALL_OW 122
// wait ( 0 0$1 ) ;
6125: LD_INT 35
6127: PPUSH
6128: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
6132: LD_EXP 8
6136: PPUSH
6137: LD_INT 17
6139: PPUSH
6140: CALL_OW 113
// mikhailInbase = 0 ;
6144: LD_ADDR_EXP 21
6148: PUSH
6149: LD_INT 0
6151: ST_TO_ADDR
// end ; 2 :
6152: GO 6387
6154: LD_INT 2
6156: DOUBLE
6157: EQUAL
6158: IFTRUE 6162
6160: GO 6327
6162: POP
// begin mikhailInBase = 2 ;
6163: LD_ADDR_EXP 21
6167: PUSH
6168: LD_INT 2
6170: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
6171: LD_EXP 8
6175: PPUSH
6176: LD_INT 6
6178: PPUSH
6179: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6183: LD_EXP 8
6187: PPUSH
6188: CALL_OW 122
// wait ( 0 0$1 ) ;
6192: LD_INT 35
6194: PPUSH
6195: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
6199: LD_EXP 8
6203: PPUSH
6204: LD_EXP 8
6208: PPUSH
6209: CALL_OW 250
6213: PUSH
6214: LD_INT 2
6216: PLUS
6217: PPUSH
6218: LD_EXP 8
6222: PPUSH
6223: CALL_OW 251
6227: PUSH
6228: LD_INT 2
6230: PLUS
6231: PPUSH
6232: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
6236: LD_EXP 8
6240: PPUSH
6241: LD_EXP 8
6245: PPUSH
6246: CALL_OW 250
6250: PUSH
6251: LD_INT 1
6253: PLUS
6254: PPUSH
6255: LD_EXP 8
6259: PPUSH
6260: CALL_OW 251
6264: PUSH
6265: LD_INT 2
6267: PLUS
6268: PPUSH
6269: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
6273: LD_EXP 8
6277: PPUSH
6278: LD_EXP 8
6282: PPUSH
6283: CALL_OW 250
6287: PUSH
6288: LD_INT 2
6290: PLUS
6291: PPUSH
6292: LD_EXP 8
6296: PPUSH
6297: CALL_OW 251
6301: PPUSH
6302: CALL_OW 171
// wait ( 0 0$5 ) ;
6306: LD_INT 175
6308: PPUSH
6309: CALL_OW 67
// AddComMoveToArea ( Mikhail , MikhailEnter ) ;
6313: LD_EXP 8
6317: PPUSH
6318: LD_INT 25
6320: PPUSH
6321: CALL_OW 173
// end ; 3 :
6325: GO 6387
6327: LD_INT 3
6329: DOUBLE
6330: EQUAL
6331: IFTRUE 6335
6333: GO 6386
6335: POP
// begin SetSide ( Mikhail , 6 ) ;
6336: LD_EXP 8
6340: PPUSH
6341: LD_INT 6
6343: PPUSH
6344: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6348: LD_EXP 8
6352: PPUSH
6353: CALL_OW 122
// wait ( 0 0$1 ) ;
6357: LD_INT 35
6359: PPUSH
6360: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
6364: LD_EXP 8
6368: PPUSH
6369: LD_INT 17
6371: PPUSH
6372: CALL_OW 113
// mikhailInbase = 0 ;
6376: LD_ADDR_EXP 21
6380: PUSH
6381: LD_INT 0
6383: ST_TO_ADDR
// end ; end ;
6384: GO 6387
6386: POP
// end ;
6387: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 2 do
6388: LD_EXP 8
6392: PPUSH
6393: LD_INT 25
6395: PPUSH
6396: CALL_OW 308
6400: PUSH
6401: LD_EXP 21
6405: PUSH
6406: LD_INT 2
6408: EQUAL
6409: AND
6410: IFFALSE 6508
6412: GO 6414
6414: DISABLE
// begin enable ;
6415: ENABLE
// SetSide ( Mikhail , 1 ) ;
6416: LD_EXP 8
6420: PPUSH
6421: LD_INT 1
6423: PPUSH
6424: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
6428: LD_INT 35
6430: PPUSH
6431: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
6435: LD_EXP 8
6439: PPUSH
6440: LD_INT 1
6442: PPUSH
6443: CALL_OW 296
6447: PUSH
6448: LD_EXP 8
6452: PPUSH
6453: LD_INT 10
6455: PPUSH
6456: CALL_OW 296
6460: LESS
6461: IFFALSE 6477
// begin ComEnterUnit ( Mikhail , dep1 ) ;
6463: LD_EXP 8
6467: PPUSH
6468: LD_INT 1
6470: PPUSH
6471: CALL_OW 120
// end else
6475: GO 6489
// begin ComEnterUnit ( Mikhail , dep2 ) ;
6477: LD_EXP 8
6481: PPUSH
6482: LD_INT 10
6484: PPUSH
6485: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
6489: LD_EXP 8
6493: PPUSH
6494: CALL_OW 310
6498: IFFALSE 6428
// mikhailInBase = 1 ;
6500: LD_ADDR_EXP 21
6504: PUSH
6505: LD_INT 1
6507: ST_TO_ADDR
// end ;
6508: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) do
6509: LD_EXP 8
6513: PPUSH
6514: CALL_OW 310
6518: IFFALSE 6644
6520: GO 6522
6522: DISABLE
// begin enable ;
6523: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
6524: LD_INT 22
6526: PUSH
6527: LD_INT 1
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: LD_INT 21
6536: PUSH
6537: LD_INT 1
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 91
6546: PUSH
6547: LD_EXP 8
6551: PPUSH
6552: CALL_OW 310
6556: PUSH
6557: LD_INT 10
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: LIST
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: PPUSH
6570: CALL_OW 69
6574: PUSH
6575: LD_INT 1
6577: EQUAL
6578: IFFALSE 6644
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
6580: LD_INT 1
6582: PPUSH
6583: LD_INT 6
6585: PPUSH
6586: LD_INT 2
6588: PPUSH
6589: LD_INT 1
6591: PPUSH
6592: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
6596: LD_EXP 8
6600: PPUSH
6601: LD_INT 6
6603: PPUSH
6604: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6608: LD_EXP 8
6612: PPUSH
6613: CALL_OW 122
// wait ( 0 0$1 ) ;
6617: LD_INT 35
6619: PPUSH
6620: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
6624: LD_EXP 8
6628: PPUSH
6629: LD_INT 17
6631: PPUSH
6632: CALL_OW 113
// mikhailStatus = 3 ;
6636: LD_ADDR_EXP 20
6640: PUSH
6641: LD_INT 3
6643: ST_TO_ADDR
// end ; end ;
6644: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 do var tmp ;
6645: LD_EXP 1
6649: PPUSH
6650: LD_EXP 22
6654: PPUSH
6655: CALL_OW 296
6659: PUSH
6660: LD_INT 5
6662: LESS
6663: PUSH
6664: LD_EXP 20
6668: PUSH
6669: LD_INT 3
6671: EQUAL
6672: AND
6673: IFFALSE 6889
6675: GO 6677
6677: DISABLE
6678: LD_INT 0
6680: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
6681: LD_ADDR_VAR 0 1
6685: PUSH
6686: LD_INT 22
6688: PUSH
6689: LD_INT 1
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: LD_INT 21
6698: PUSH
6699: LD_INT 1
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 26
6708: PUSH
6709: LD_INT 1
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: PPUSH
6721: CALL_OW 69
6725: PUSH
6726: LD_EXP 1
6730: PUSH
6731: EMPTY
6732: LIST
6733: DIFF
6734: ST_TO_ADDR
// DialogueOn ;
6735: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6739: LD_EXP 1
6743: PPUSH
6744: LD_STRING D7-JMM-1
6746: PPUSH
6747: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
6751: LD_VAR 0 1
6755: PUSH
6756: LD_INT 1
6758: ARRAY
6759: PPUSH
6760: LD_STRING D7-Sol1-1
6762: PPUSH
6763: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
6767: LD_EXP 1
6771: PPUSH
6772: LD_STRING D7-JMM-2
6774: PPUSH
6775: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
6779: LD_VAR 0 1
6783: PUSH
6784: LD_INT 1
6786: ARRAY
6787: PPUSH
6788: LD_STRING D7-Sol1-2
6790: PPUSH
6791: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
6795: LD_EXP 1
6799: PPUSH
6800: LD_STRING D7-JMM-3
6802: PPUSH
6803: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
6807: LD_VAR 0 1
6811: PUSH
6812: LD_INT 1
6814: ARRAY
6815: PPUSH
6816: LD_STRING D7-Sol1-3
6818: PPUSH
6819: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
6823: LD_EXP 3
6827: PPUSH
6828: CALL_OW 302
6832: PUSH
6833: LD_EXP 4
6837: PPUSH
6838: CALL_OW 302
6842: AND
6843: IFFALSE 6885
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
6845: LD_EXP 3
6849: PPUSH
6850: LD_STRING D7-Cyrus-3
6852: PPUSH
6853: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
6857: LD_VAR 0 1
6861: PUSH
6862: LD_INT 1
6864: ARRAY
6865: PPUSH
6866: LD_STRING D7-Sol1-4
6868: PPUSH
6869: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
6873: LD_EXP 4
6877: PPUSH
6878: LD_STRING D7-Lisa-4
6880: PPUSH
6881: CALL_OW 88
// end ; DialogueOff ;
6885: CALL_OW 7
// end ;
6889: PPOPN 1
6891: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
6892: LD_EXP 8
6896: PPUSH
6897: LD_INT 17
6899: PPUSH
6900: CALL_OW 308
6904: PUSH
6905: LD_EXP 8
6909: PPUSH
6910: CALL_OW 255
6914: PUSH
6915: LD_INT 6
6917: EQUAL
6918: AND
6919: IFFALSE 6941
6921: GO 6923
6923: DISABLE
// begin mikhailStatus = 3 ;
6924: LD_ADDR_EXP 20
6928: PUSH
6929: LD_INT 3
6931: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
6932: LD_EXP 8
6936: PPUSH
6937: CALL_OW 64
// end ;
6941: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
6942: LD_EXP 20
6946: PUSH
6947: LD_INT 3
6949: EQUAL
6950: PUSH
6951: LD_EXP 8
6955: PPUSH
6956: CALL_OW 255
6960: PUSH
6961: LD_INT 6
6963: EQUAL
6964: AND
6965: IFFALSE 7093
6967: GO 6969
6969: DISABLE
6970: LD_INT 0
6972: PPUSH
6973: PPUSH
// begin enable ;
6974: ENABLE
// if IsOk ( Mikhail ) then
6975: LD_EXP 8
6979: PPUSH
6980: CALL_OW 302
6984: IFFALSE 7093
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
6986: LD_ADDR_VAR 0 2
6990: PUSH
6991: LD_EXP 8
6995: PPUSH
6996: LD_INT 22
6998: PUSH
6999: LD_INT 1
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 21
7008: PUSH
7009: LD_INT 1
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PPUSH
7020: CALL_OW 69
7024: PPUSH
7025: CALL 8533 0 2
7029: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
7030: LD_VAR 0 2
7034: PPUSH
7035: LD_EXP 8
7039: PPUSH
7040: CALL_OW 296
7044: PUSH
7045: LD_INT 8
7047: LESS
7048: IFFALSE 7093
// begin if GetSex ( attacker ) = sex_male then
7050: LD_VAR 0 2
7054: PPUSH
7055: CALL_OW 258
7059: PUSH
7060: LD_INT 1
7062: EQUAL
7063: IFFALSE 7080
// begin disable ;
7065: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
7066: LD_VAR 0 2
7070: PPUSH
7071: LD_STRING D7a-Sol1-1
7073: PPUSH
7074: CALL_OW 88
// end else
7078: GO 7093
// begin disable ;
7080: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
7081: LD_VAR 0 2
7085: PPUSH
7086: LD_STRING D7a-FSol1-1
7088: PPUSH
7089: CALL_OW 88
// end ; end ; end ; end ; end_of_file
7093: PPOPN 2
7095: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7096: LD_INT 0
7098: PPUSH
7099: PPUSH
7100: PPUSH
7101: PPUSH
// for i = 1 to count do
7102: LD_ADDR_VAR 0 8
7106: PUSH
7107: DOUBLE
7108: LD_INT 1
7110: DEC
7111: ST_TO_ADDR
7112: LD_VAR 0 6
7116: PUSH
7117: FOR_TO
7118: IFFALSE 7199
// begin uc_side = side ;
7120: LD_ADDR_OWVAR 20
7124: PUSH
7125: LD_VAR 0 1
7129: ST_TO_ADDR
// uc_nation = nation ;
7130: LD_ADDR_OWVAR 21
7134: PUSH
7135: LD_VAR 0 2
7139: ST_TO_ADDR
// hc_gallery =  ;
7140: LD_ADDR_OWVAR 33
7144: PUSH
7145: LD_STRING 
7147: ST_TO_ADDR
// hc_name =  ;
7148: LD_ADDR_OWVAR 26
7152: PUSH
7153: LD_STRING 
7155: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7156: LD_INT 0
7158: PPUSH
7159: LD_VAR 0 5
7163: PPUSH
7164: LD_VAR 0 4
7168: PPUSH
7169: CALL_OW 380
// un = CreateHuman ;
7173: LD_ADDR_VAR 0 10
7177: PUSH
7178: CALL_OW 44
7182: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7183: LD_VAR 0 10
7187: PPUSH
7188: LD_VAR 0 3
7192: PPUSH
7193: CALL_OW 52
// end ;
7197: GO 7117
7199: POP
7200: POP
// end ;
7201: LD_VAR 0 7
7205: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7206: LD_INT 0
7208: PPUSH
7209: PPUSH
7210: PPUSH
// uc_side := GetSide ( b ) ;
7211: LD_ADDR_OWVAR 20
7215: PUSH
7216: LD_VAR 0 2
7220: PPUSH
7221: CALL_OW 255
7225: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7226: LD_ADDR_OWVAR 21
7230: PUSH
7231: LD_VAR 0 2
7235: PPUSH
7236: CALL_OW 248
7240: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7241: LD_INT 0
7243: PPUSH
7244: LD_INT 1
7246: PPUSH
7247: LD_VAR 0 1
7251: PPUSH
7252: CALL_OW 380
// un = CreateHuman ;
7256: LD_ADDR_VAR 0 4
7260: PUSH
7261: CALL_OW 44
7265: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
7266: LD_ADDR_VAR 0 5
7270: PUSH
7271: LD_VAR 0 2
7275: PPUSH
7276: CALL_OW 254
7280: PUSH
7281: LD_INT 3
7283: MINUS
7284: ST_TO_ADDR
// if dir < 0 then
7285: LD_VAR 0 5
7289: PUSH
7290: LD_INT 0
7292: LESS
7293: IFFALSE 7309
// dir := 6 + dir ;
7295: LD_ADDR_VAR 0 5
7299: PUSH
7300: LD_INT 6
7302: PUSH
7303: LD_VAR 0 5
7307: PLUS
7308: ST_TO_ADDR
// SetDir ( un , dir ) ;
7309: LD_VAR 0 4
7313: PPUSH
7314: LD_VAR 0 5
7318: PPUSH
7319: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7323: LD_VAR 0 4
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: CALL_OW 52
// end ;
7337: LD_VAR 0 3
7341: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
7342: LD_INT 0
7344: PPUSH
7345: PPUSH
7346: PPUSH
7347: PPUSH
7348: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
7349: LD_ADDR_VAR 0 7
7353: PUSH
7354: LD_INT 22
7356: PUSH
7357: LD_VAR 0 1
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: PUSH
7366: LD_INT 25
7368: PUSH
7369: LD_INT 2
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 24
7378: PUSH
7379: LD_INT 1000
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: PPUSH
7391: CALL_OW 69
7395: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7396: LD_ADDR_VAR 0 5
7400: PUSH
7401: LD_VAR 0 3
7405: PPUSH
7406: LD_INT 22
7408: PUSH
7409: LD_VAR 0 1
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PUSH
7418: LD_INT 21
7420: PUSH
7421: LD_INT 3
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 3
7430: PUSH
7431: LD_INT 24
7433: PUSH
7434: LD_INT 1000
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: LIST
7449: PUSH
7450: EMPTY
7451: LIST
7452: PPUSH
7453: CALL_OW 70
7457: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
7458: LD_VAR 0 5
7462: PUSH
7463: LD_INT 0
7465: GREATER
7466: PUSH
7467: LD_VAR 0 7
7471: PUSH
7472: LD_INT 0
7474: GREATER
7475: AND
7476: IFFALSE 7542
// begin for i in engineerOk_list do
7478: LD_ADDR_VAR 0 6
7482: PUSH
7483: LD_VAR 0 7
7487: PUSH
7488: FOR_IN
7489: IFFALSE 7540
// begin for j in buildings_list do
7491: LD_ADDR_VAR 0 8
7495: PUSH
7496: LD_VAR 0 5
7500: PUSH
7501: FOR_IN
7502: IFFALSE 7536
// begin AddComExitBuilding ( i ) ;
7504: LD_VAR 0 6
7508: PPUSH
7509: CALL_OW 182
// wait ( 0 0$1 ) ;
7513: LD_INT 35
7515: PPUSH
7516: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
7520: LD_VAR 0 6
7524: PPUSH
7525: LD_VAR 0 8
7529: PPUSH
7530: CALL_OW 190
// end ;
7534: GO 7501
7536: POP
7537: POP
// end ;
7538: GO 7488
7540: POP
7541: POP
// end ; if buildings_list = 0 then
7542: LD_VAR 0 5
7546: PUSH
7547: LD_INT 0
7549: EQUAL
7550: IFFALSE 7583
// begin for i in engineerOK_list do
7552: LD_ADDR_VAR 0 6
7556: PUSH
7557: LD_VAR 0 7
7561: PUSH
7562: FOR_IN
7563: IFFALSE 7581
// begin ComEnterUnit ( i , building ) ;
7565: LD_VAR 0 6
7569: PPUSH
7570: LD_VAR 0 2
7574: PPUSH
7575: CALL_OW 120
// end ;
7579: GO 7562
7581: POP
7582: POP
// end ; end ;
7583: LD_VAR 0 4
7587: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
7588: LD_INT 0
7590: PPUSH
7591: PPUSH
7592: PPUSH
7593: PPUSH
7594: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7595: LD_ADDR_VAR 0 6
7599: PUSH
7600: LD_INT 22
7602: PUSH
7603: LD_VAR 0 1
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: PUSH
7612: LD_INT 25
7614: PUSH
7615: LD_INT 4
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PPUSH
7626: CALL_OW 69
7630: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7631: LD_ADDR_VAR 0 9
7635: PUSH
7636: LD_VAR 0 3
7640: PPUSH
7641: LD_INT 22
7643: PUSH
7644: LD_VAR 0 1
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PUSH
7653: LD_INT 21
7655: PUSH
7656: LD_INT 1
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PUSH
7663: LD_INT 3
7665: PUSH
7666: LD_INT 24
7668: PUSH
7669: LD_INT 650
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: PPUSH
7685: CALL_OW 70
7689: ST_TO_ADDR
// if damageUnits > 0 then
7690: LD_VAR 0 9
7694: PUSH
7695: LD_INT 0
7697: GREATER
7698: IFFALSE 7848
// begin for i = 1 to damageUnits do
7700: LD_ADDR_VAR 0 7
7704: PUSH
7705: DOUBLE
7706: LD_INT 1
7708: DEC
7709: ST_TO_ADDR
7710: LD_VAR 0 9
7714: PUSH
7715: FOR_TO
7716: IFFALSE 7740
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
7718: LD_VAR 0 9
7722: PUSH
7723: LD_VAR 0 7
7727: ARRAY
7728: PPUSH
7729: LD_VAR 0 2
7733: PPUSH
7734: CALL_OW 113
7738: GO 7715
7740: POP
7741: POP
// for i = 1 to sci_list do
7742: LD_ADDR_VAR 0 7
7746: PUSH
7747: DOUBLE
7748: LD_INT 1
7750: DEC
7751: ST_TO_ADDR
7752: LD_VAR 0 6
7756: PUSH
7757: FOR_TO
7758: IFFALSE 7844
// begin ComExitBuilding ( sci_list [ i ] ) ;
7760: LD_VAR 0 6
7764: PUSH
7765: LD_VAR 0 7
7769: ARRAY
7770: PPUSH
7771: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
7775: LD_ADDR_VAR 0 8
7779: PUSH
7780: LD_VAR 0 2
7784: PPUSH
7785: LD_INT 22
7787: PUSH
7788: LD_VAR 0 1
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PPUSH
7797: CALL_OW 70
7801: PUSH
7802: FOR_IN
7803: IFFALSE 7840
// begin AddComHeal ( sci_list [ i ] , j [ j ] ) ;
7805: LD_VAR 0 6
7809: PUSH
7810: LD_VAR 0 7
7814: ARRAY
7815: PPUSH
7816: LD_VAR 0 8
7820: PUSH
7821: LD_VAR 0 8
7825: ARRAY
7826: PPUSH
7827: CALL_OW 188
// wait ( 1 1$0 ) ;
7831: LD_INT 2100
7833: PPUSH
7834: CALL_OW 67
// end ;
7838: GO 7802
7840: POP
7841: POP
// end ;
7842: GO 7757
7844: POP
7845: POP
// end else
7846: GO 7862
// begin AddComEnterUnit ( sci_list , build ) ;
7848: LD_VAR 0 6
7852: PPUSH
7853: LD_VAR 0 4
7857: PPUSH
7858: CALL_OW 180
// end ; end ;
7862: LD_VAR 0 5
7866: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
7867: LD_INT 0
7869: PPUSH
7870: PPUSH
7871: PPUSH
7872: PPUSH
7873: PPUSH
7874: PPUSH
7875: PPUSH
7876: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
7877: LD_ADDR_VAR 0 7
7881: PUSH
7882: LD_VAR 0 3
7886: PPUSH
7887: LD_INT 22
7889: PUSH
7890: LD_VAR 0 1
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 21
7901: PUSH
7902: LD_INT 2
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 24
7911: PUSH
7912: LD_INT 550
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 34
7921: PUSH
7922: LD_INT 46
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: PPUSH
7935: CALL_OW 70
7939: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
7940: LD_ADDR_VAR 0 8
7944: PUSH
7945: LD_VAR 0 3
7949: PPUSH
7950: LD_INT 22
7952: PUSH
7953: LD_VAR 0 1
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: PUSH
7962: LD_INT 21
7964: PUSH
7965: LD_INT 2
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: PUSH
7972: LD_INT 34
7974: PUSH
7975: LD_INT 46
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PUSH
7982: LD_INT 3
7984: PUSH
7985: LD_INT 24
7987: PUSH
7988: LD_INT 550
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: PPUSH
8005: CALL_OW 70
8009: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
8010: LD_ADDR_VAR 0 9
8014: PUSH
8015: LD_VAR 0 2
8019: PPUSH
8020: LD_INT 22
8022: PUSH
8023: LD_VAR 0 1
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 21
8034: PUSH
8035: LD_INT 2
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 34
8044: PUSH
8045: LD_INT 46
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: LD_INT 24
8054: PUSH
8055: LD_INT 1000
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 58
8064: PUSH
8065: EMPTY
8066: LIST
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: PPUSH
8075: CALL_OW 70
8079: ST_TO_ADDR
// for i in damageVehicle_list do
8080: LD_ADDR_VAR 0 5
8084: PUSH
8085: LD_VAR 0 8
8089: PUSH
8090: FOR_IN
8091: IFFALSE 8110
// mechanicInside_list = UnitsInside ( i ) ;
8093: LD_ADDR_VAR 0 10
8097: PUSH
8098: LD_VAR 0 5
8102: PPUSH
8103: CALL_OW 313
8107: ST_TO_ADDR
8108: GO 8090
8110: POP
8111: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8112: LD_ADDR_VAR 0 11
8116: PUSH
8117: LD_VAR 0 2
8121: PPUSH
8122: LD_INT 22
8124: PUSH
8125: LD_VAR 0 1
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: LD_INT 25
8136: PUSH
8137: LD_INT 3
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PPUSH
8148: CALL_OW 70
8152: ST_TO_ADDR
// if damageVehicle_list > 0 then
8153: LD_VAR 0 8
8157: PUSH
8158: LD_INT 0
8160: GREATER
8161: IFFALSE 8234
// begin for i in damageVehicle_list do
8163: LD_ADDR_VAR 0 5
8167: PUSH
8168: LD_VAR 0 8
8172: PUSH
8173: FOR_IN
8174: IFFALSE 8232
// begin for j in mechanicInside_list do
8176: LD_ADDR_VAR 0 6
8180: PUSH
8181: LD_VAR 0 10
8185: PUSH
8186: FOR_IN
8187: IFFALSE 8228
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
8189: LD_VAR 0 8
8193: PPUSH
8194: LD_VAR 0 2
8198: PPUSH
8199: CALL_OW 113
// AddComExitVehicle ( j ) ;
8203: LD_VAR 0 6
8207: PPUSH
8208: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
8212: LD_VAR 0 6
8216: PPUSH
8217: LD_VAR 0 5
8221: PPUSH
8222: CALL_OW 189
// end ;
8226: GO 8186
8228: POP
8229: POP
// end ;
8230: GO 8173
8232: POP
8233: POP
// end ; if emptyVehicle_list > 0 then
8234: LD_VAR 0 9
8238: PUSH
8239: LD_INT 0
8241: GREATER
8242: IFFALSE 8292
// begin for i in emptyVehicle_list do
8244: LD_ADDR_VAR 0 5
8248: PUSH
8249: LD_VAR 0 9
8253: PUSH
8254: FOR_IN
8255: IFFALSE 8290
// begin for j in mechanicOutside_list do
8257: LD_ADDR_VAR 0 6
8261: PUSH
8262: LD_VAR 0 11
8266: PUSH
8267: FOR_IN
8268: IFFALSE 8286
// begin AddComEnterUnit ( j , i ) ;
8270: LD_VAR 0 6
8274: PPUSH
8275: LD_VAR 0 5
8279: PPUSH
8280: CALL_OW 180
// end ;
8284: GO 8267
8286: POP
8287: POP
// end ;
8288: GO 8254
8290: POP
8291: POP
// end ; if VehicleOK_list > 0 then
8292: LD_VAR 0 7
8296: PUSH
8297: LD_INT 0
8299: GREATER
8300: IFFALSE 8334
// begin for i in VehicleOK_list do
8302: LD_ADDR_VAR 0 5
8306: PUSH
8307: LD_VAR 0 7
8311: PUSH
8312: FOR_IN
8313: IFFALSE 8332
// ComAgressiveMove ( i , 110 , 29 ) ;
8315: LD_VAR 0 5
8319: PPUSH
8320: LD_INT 110
8322: PPUSH
8323: LD_INT 29
8325: PPUSH
8326: CALL_OW 114
8330: GO 8312
8332: POP
8333: POP
// end ; end ;
8334: LD_VAR 0 4
8338: RET
// export function DefendBases ( area , enemySide , defendersList , build ) ; var i , j ; begin
8339: LD_INT 0
8341: PPUSH
8342: PPUSH
8343: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_type , unit_human ] ] ) > 0 then
8344: LD_VAR 0 1
8348: PPUSH
8349: LD_INT 22
8351: PUSH
8352: LD_VAR 0 2
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PUSH
8361: LD_INT 21
8363: PUSH
8364: LD_INT 1
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PPUSH
8375: CALL_OW 70
8379: PUSH
8380: LD_INT 0
8382: GREATER
8383: IFFALSE 8497
// begin for i in defendersList do
8385: LD_ADDR_VAR 0 6
8389: PUSH
8390: LD_VAR 0 3
8394: PUSH
8395: FOR_IN
8396: IFFALSE 8493
// begin AddComExitBuilding ( i ) ;
8398: LD_VAR 0 6
8402: PPUSH
8403: CALL_OW 182
// wait ( 0 0$1 ) ;
8407: LD_INT 35
8409: PPUSH
8410: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_type , unit_human ] ] ) do
8414: LD_ADDR_VAR 0 7
8418: PUSH
8419: LD_VAR 0 1
8423: PPUSH
8424: LD_INT 22
8426: PUSH
8427: LD_VAR 0 2
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PUSH
8436: LD_INT 21
8438: PUSH
8439: LD_INT 1
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 70
8454: PUSH
8455: FOR_IN
8456: IFFALSE 8489
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
8458: LD_VAR 0 6
8462: PPUSH
8463: LD_VAR 0 7
8467: PPUSH
8468: CALL_OW 250
8472: PPUSH
8473: LD_VAR 0 7
8477: PPUSH
8478: CALL_OW 251
8482: PPUSH
8483: CALL_OW 174
8487: GO 8455
8489: POP
8490: POP
// end ;
8491: GO 8395
8493: POP
8494: POP
// end else
8495: GO 8528
// begin for i in defendersList do
8497: LD_ADDR_VAR 0 6
8501: PUSH
8502: LD_VAR 0 3
8506: PUSH
8507: FOR_IN
8508: IFFALSE 8526
// ComEnterUnit ( i , build ) ;
8510: LD_VAR 0 6
8514: PPUSH
8515: LD_VAR 0 4
8519: PPUSH
8520: CALL_OW 120
8524: GO 8507
8526: POP
8527: POP
// end ; end ;
8528: LD_VAR 0 5
8532: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
8533: LD_INT 0
8535: PPUSH
8536: PPUSH
8537: PPUSH
8538: PPUSH
8539: PPUSH
// nearest_dist = 1000 ;
8540: LD_ADDR_VAR 0 4
8544: PUSH
8545: LD_INT 1000
8547: ST_TO_ADDR
// nearest_un = un ;
8548: LD_ADDR_VAR 0 5
8552: PUSH
8553: LD_VAR 0 1
8557: ST_TO_ADDR
// for sold in units do
8558: LD_ADDR_VAR 0 6
8562: PUSH
8563: LD_VAR 0 2
8567: PUSH
8568: FOR_IN
8569: IFFALSE 8625
// begin dist = GetDistUnits ( un , sold ) ;
8571: LD_ADDR_VAR 0 7
8575: PUSH
8576: LD_VAR 0 1
8580: PPUSH
8581: LD_VAR 0 6
8585: PPUSH
8586: CALL_OW 296
8590: ST_TO_ADDR
// if dist < nearest_dist then
8591: LD_VAR 0 7
8595: PUSH
8596: LD_VAR 0 4
8600: LESS
8601: IFFALSE 8623
// begin nearest_un = sold ;
8603: LD_ADDR_VAR 0 5
8607: PUSH
8608: LD_VAR 0 6
8612: ST_TO_ADDR
// nearest_dist = dist ;
8613: LD_ADDR_VAR 0 4
8617: PUSH
8618: LD_VAR 0 7
8622: ST_TO_ADDR
// end ; end ;
8623: GO 8568
8625: POP
8626: POP
// result := nearest_un ;
8627: LD_ADDR_VAR 0 3
8631: PUSH
8632: LD_VAR 0 5
8636: ST_TO_ADDR
// end ;
8637: LD_VAR 0 3
8641: RET
// export function PrepareDifficulty ; begin
8642: LD_INT 0
8644: PPUSH
// if Difficulty = 1 then
8645: LD_OWVAR 67
8649: PUSH
8650: LD_INT 1
8652: EQUAL
8653: IFFALSE 8716
// begin RemoveUnit ( brw2 ) ;
8655: LD_INT 9
8657: PPUSH
8658: CALL_OW 64
// RemoveUnit ( brw3 ) ;
8662: LD_INT 30
8664: PPUSH
8665: CALL_OW 64
// RemoveUnit ( brw4 ) ;
8669: LD_INT 52
8671: PPUSH
8672: CALL_OW 64
// RemoveUnit ( brw5 ) ;
8676: LD_INT 63
8678: PPUSH
8679: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
8683: LD_INT 5
8685: PUSH
8686: LD_INT 4
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PPUSH
8693: LD_INT 60
8695: PPUSH
8696: CALL_OW 240
// RuSoldMinLevel = 0 ;
8700: LD_ADDR_EXP 13
8704: PUSH
8705: LD_INT 0
8707: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
8708: LD_ADDR_EXP 14
8712: PUSH
8713: LD_INT 1
8715: ST_TO_ADDR
// end ; if Difficulty = 2 then
8716: LD_OWVAR 67
8720: PUSH
8721: LD_INT 2
8723: EQUAL
8724: IFFALSE 8773
// begin RemoveUnit ( brw3 ) ;
8726: LD_INT 30
8728: PPUSH
8729: CALL_OW 64
// RemoveUnit ( brw4 ) ;
8733: LD_INT 52
8735: PPUSH
8736: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
8740: LD_INT 5
8742: PUSH
8743: LD_INT 4
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PPUSH
8750: LD_INT 50
8752: PPUSH
8753: CALL_OW 240
// RuSoldMinLevel = 1 ;
8757: LD_ADDR_EXP 13
8761: PUSH
8762: LD_INT 1
8764: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
8765: LD_ADDR_EXP 14
8769: PUSH
8770: LD_INT 2
8772: ST_TO_ADDR
// end ; if Difficulty = 3 then
8773: LD_OWVAR 67
8777: PUSH
8778: LD_INT 3
8780: EQUAL
8781: IFFALSE 8816
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
8783: LD_INT 5
8785: PUSH
8786: LD_INT 4
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PPUSH
8793: LD_INT 40
8795: PPUSH
8796: CALL_OW 240
// RuSoldMinLevel = 2 ;
8800: LD_ADDR_EXP 13
8804: PUSH
8805: LD_INT 2
8807: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
8808: LD_ADDR_EXP 14
8812: PUSH
8813: LD_INT 3
8815: ST_TO_ADDR
// end ; end ;
8816: LD_VAR 0 1
8820: RET
// export function FinishMission ; begin
8821: LD_INT 0
8823: PPUSH
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
8824: LD_INT 1
8826: PPUSH
8827: CALL_OW 274
8831: PPUSH
8832: LD_INT 1
8834: PPUSH
8835: CALL_OW 275
8839: PUSH
8840: LD_INT 200
8842: GREATEREQUAL
8843: IFFALSE 8857
// begin AddMedal ( Cans , 1 ) ;
8845: LD_STRING Cans
8847: PPUSH
8848: LD_INT 1
8850: PPUSH
8851: CALL_OW 101
// end else
8855: GO 8868
// begin AddMedal ( Cans , - 1 ) ;
8857: LD_STRING Cans
8859: PPUSH
8860: LD_INT 1
8862: NEG
8863: PPUSH
8864: CALL_OW 101
// end ; if deadsCounter <= 3 then
8868: LD_EXP 27
8872: PUSH
8873: LD_INT 3
8875: LESSEQUAL
8876: IFFALSE 8890
// begin AddMedal ( Deaths , 1 ) ;
8878: LD_STRING Deaths
8880: PPUSH
8881: LD_INT 1
8883: PPUSH
8884: CALL_OW 101
// end else
8888: GO 8901
// begin AddMedal ( Deaths , - 1 ) ;
8890: LD_STRING Deaths
8892: PPUSH
8893: LD_INT 1
8895: NEG
8896: PPUSH
8897: CALL_OW 101
// end ; if mikhailStatus = 0 then
8901: LD_EXP 20
8905: PUSH
8906: LD_INT 0
8908: EQUAL
8909: IFFALSE 8922
// AddMedal ( Prisoner , - 1 ) ;
8911: LD_STRING Prisoner
8913: PPUSH
8914: LD_INT 1
8916: NEG
8917: PPUSH
8918: CALL_OW 101
// if mikhailStatus = 1 then
8922: LD_EXP 20
8926: PUSH
8927: LD_INT 1
8929: EQUAL
8930: IFFALSE 8942
// AddMedal ( Prisoner , 1 ) ;
8932: LD_STRING Prisoner
8934: PPUSH
8935: LD_INT 1
8937: PPUSH
8938: CALL_OW 101
// if mikhailStatus = 2 then
8942: LD_EXP 20
8946: PUSH
8947: LD_INT 2
8949: EQUAL
8950: IFFALSE 8962
// AddMedal ( Prisoner , 2 ) ;
8952: LD_STRING Prisoner
8954: PPUSH
8955: LD_INT 2
8957: PPUSH
8958: CALL_OW 101
// if mikhailStatus = 3 then
8962: LD_EXP 20
8966: PUSH
8967: LD_INT 3
8969: EQUAL
8970: IFFALSE 8983
// AddMedal ( Prisoner , - 2 ) ;
8972: LD_STRING Prisoner
8974: PPUSH
8975: LD_INT 2
8977: NEG
8978: PPUSH
8979: CALL_OW 101
// if mikhailStatus = 1 then
8983: LD_EXP 20
8987: PUSH
8988: LD_INT 1
8990: EQUAL
8991: IFFALSE 9005
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
8993: LD_EXP 20
8997: PPUSH
8998: LD_STRING 02_mikhailStatus_1
9000: PPUSH
9001: CALL_OW 39
// if IsOK ( vehicle1 ) and GetSide ( vehicle1 ) = 1 then
9005: LD_INT 5
9007: PPUSH
9008: CALL_OW 302
9012: PUSH
9013: LD_INT 5
9015: PPUSH
9016: CALL_OW 255
9020: PUSH
9021: LD_INT 1
9023: EQUAL
9024: AND
9025: IFFALSE 9081
// SaveVariable ( [ GetChassis ( vehicle1 ) , GetEngine ( vehicle1 ) , GetControl ( vehicle1 ) , GetWeapon ( vehicle1 ) , GetLives ( vehicle1 ) ] , 02_tank1_2 ) ;
9027: LD_INT 5
9029: PPUSH
9030: CALL_OW 265
9034: PUSH
9035: LD_INT 5
9037: PPUSH
9038: CALL_OW 262
9042: PUSH
9043: LD_INT 5
9045: PPUSH
9046: CALL_OW 263
9050: PUSH
9051: LD_INT 5
9053: PPUSH
9054: CALL_OW 264
9058: PUSH
9059: LD_INT 5
9061: PPUSH
9062: CALL_OW 256
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: PPUSH
9074: LD_STRING 02_tank1_2
9076: PPUSH
9077: CALL_OW 39
// if IsOK ( vehicle2 ) and GetSide ( vehicle2 ) = 1 then
9081: LD_INT 4
9083: PPUSH
9084: CALL_OW 302
9088: PUSH
9089: LD_INT 4
9091: PPUSH
9092: CALL_OW 255
9096: PUSH
9097: LD_INT 1
9099: EQUAL
9100: AND
9101: IFFALSE 9157
// SaveVariable ( [ GetChassis ( vehicle2 ) , GetEngine ( vehicle2 ) , GetControl ( vehicle2 ) , GetWeapon ( vehicle2 ) , GetLives ( vehicle2 ) ] , 02_tank2_3 ) ;
9103: LD_INT 4
9105: PPUSH
9106: CALL_OW 265
9110: PUSH
9111: LD_INT 4
9113: PPUSH
9114: CALL_OW 262
9118: PUSH
9119: LD_INT 4
9121: PPUSH
9122: CALL_OW 263
9126: PUSH
9127: LD_INT 4
9129: PPUSH
9130: CALL_OW 264
9134: PUSH
9135: LD_INT 4
9137: PPUSH
9138: CALL_OW 256
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: PPUSH
9150: LD_STRING 02_tank2_3
9152: PPUSH
9153: CALL_OW 39
// GiveMedals ( MAIN ) ;
9157: LD_STRING MAIN
9159: PPUSH
9160: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
9164: LD_INT 22
9166: PUSH
9167: LD_INT 1
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PUSH
9174: LD_INT 21
9176: PUSH
9177: LD_INT 1
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PPUSH
9188: CALL_OW 69
9192: PPUSH
9193: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
9197: LD_EXP 1
9201: PPUSH
9202: LD_STRING JMM
9204: PPUSH
9205: CALL_OW 38
// SaveCharacters ( Bobby , Bobby ) ;
9209: LD_EXP 2
9213: PPUSH
9214: LD_STRING Bobby
9216: PPUSH
9217: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
9221: LD_EXP 3
9225: PPUSH
9226: LD_STRING Cyrus
9228: PPUSH
9229: CALL_OW 38
// SaveCharacters ( Lisa , Lisa ) ;
9233: LD_EXP 4
9237: PPUSH
9238: LD_STRING Lisa
9240: PPUSH
9241: CALL_OW 38
// SaveCharacters ( Khatam , Khatam ) ;
9245: LD_EXP 5
9249: PPUSH
9250: LD_STRING Khatam
9252: PPUSH
9253: CALL_OW 38
// SaveCharacters ( Brian , Brian ) ;
9257: LD_EXP 6
9261: PPUSH
9262: LD_STRING Brian
9264: PPUSH
9265: CALL_OW 38
// SaveCharacters ( Jerry , Jerry ) ;
9269: LD_EXP 7
9273: PPUSH
9274: LD_STRING Jerry
9276: PPUSH
9277: CALL_OW 38
// if mikhailStatus = 1 then
9281: LD_EXP 20
9285: PUSH
9286: LD_INT 1
9288: EQUAL
9289: IFFALSE 9303
// SaveCharacters ( Mikhail , Mikhail ) ;
9291: LD_EXP 8
9295: PPUSH
9296: LD_STRING Mikhail
9298: PPUSH
9299: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry ] , 02_other_survivors ) ;
9303: LD_INT 50
9305: PUSH
9306: EMPTY
9307: LIST
9308: PUSH
9309: LD_INT 22
9311: PUSH
9312: LD_INT 1
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_INT 21
9321: PUSH
9322: LD_INT 1
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: LIST
9333: PPUSH
9334: CALL_OW 69
9338: PUSH
9339: LD_EXP 1
9343: PUSH
9344: LD_EXP 2
9348: PUSH
9349: LD_EXP 3
9353: PUSH
9354: LD_EXP 4
9358: PUSH
9359: LD_EXP 5
9363: PUSH
9364: LD_EXP 6
9368: PUSH
9369: LD_EXP 7
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: DIFF
9383: PPUSH
9384: LD_STRING 02_other_survivors
9386: PPUSH
9387: CALL_OW 38
// YouWin ;
9391: CALL_OW 103
// end ; end_of_file
9395: LD_VAR 0 1
9399: RET
// export function PrepareHeroes ; begin
9400: LD_INT 0
9402: PPUSH
// uc_side = 1 ;
9403: LD_ADDR_OWVAR 20
9407: PUSH
9408: LD_INT 1
9410: ST_TO_ADDR
// JMM = NewCharacter ( JMM ) ;
9411: LD_ADDR_EXP 1
9415: PUSH
9416: LD_STRING JMM
9418: PPUSH
9419: CALL_OW 25
9423: ST_TO_ADDR
// Bobby = NewCharacter ( Bobby ) ;
9424: LD_ADDR_EXP 2
9428: PUSH
9429: LD_STRING Bobby
9431: PPUSH
9432: CALL_OW 25
9436: ST_TO_ADDR
// Cyrus = NewCharacter ( Cyrus ) ;
9437: LD_ADDR_EXP 3
9441: PUSH
9442: LD_STRING Cyrus
9444: PPUSH
9445: CALL_OW 25
9449: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
9450: LD_ADDR_EXP 9
9454: PUSH
9455: LD_STRING Powell
9457: PPUSH
9458: CALL_OW 25
9462: ST_TO_ADDR
// if Bobby then
9463: LD_EXP 2
9467: IFFALSE 9481
// SetLives ( Bobby , 900 ) ;
9469: LD_EXP 2
9473: PPUSH
9474: LD_INT 900
9476: PPUSH
9477: CALL_OW 234
// if Cyrus then
9481: LD_EXP 3
9485: IFFALSE 9499
// SetLives ( Cyrus , 900 ) ;
9487: LD_EXP 3
9491: PPUSH
9492: LD_INT 900
9494: PPUSH
9495: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
9499: LD_ADDR_EXP 5
9503: PUSH
9504: LD_STRING Khatam
9506: PPUSH
9507: CALL_OW 25
9511: ST_TO_ADDR
// uc_side = 4 ;
9512: LD_ADDR_OWVAR 20
9516: PUSH
9517: LD_INT 4
9519: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
9520: LD_ADDR_EXP 4
9524: PUSH
9525: LD_STRING Lisa
9527: PPUSH
9528: CALL_OW 25
9532: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
9533: LD_EXP 1
9537: PPUSH
9538: LD_INT 3
9540: PPUSH
9541: LD_INT 0
9543: PPUSH
9544: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
9548: LD_EXP 2
9552: PPUSH
9553: LD_INT 3
9555: PPUSH
9556: LD_INT 0
9558: PPUSH
9559: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
9563: LD_EXP 3
9567: PPUSH
9568: LD_INT 3
9570: PPUSH
9571: LD_INT 0
9573: PPUSH
9574: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
9578: LD_EXP 4
9582: PPUSH
9583: LD_INT 5
9585: PPUSH
9586: LD_INT 0
9588: PPUSH
9589: CALL_OW 49
// ComCrawl ( Lisa ) ;
9593: LD_EXP 4
9597: PPUSH
9598: CALL_OW 137
// end ;
9602: LD_VAR 0 1
9606: RET
// export function PrepareLisSquad ; var i , un ; begin
9607: LD_INT 0
9609: PPUSH
9610: PPUSH
9611: PPUSH
// for i = 1 to 2 do
9612: LD_ADDR_VAR 0 2
9616: PUSH
9617: DOUBLE
9618: LD_INT 1
9620: DEC
9621: ST_TO_ADDR
9622: LD_INT 2
9624: PUSH
9625: FOR_TO
9626: IFFALSE 9708
// begin uc_side = 4 ;
9628: LD_ADDR_OWVAR 20
9632: PUSH
9633: LD_INT 4
9635: ST_TO_ADDR
// uc_nation = 1 ;
9636: LD_ADDR_OWVAR 21
9640: PUSH
9641: LD_INT 1
9643: ST_TO_ADDR
// hc_gallery =  ;
9644: LD_ADDR_OWVAR 33
9648: PUSH
9649: LD_STRING 
9651: ST_TO_ADDR
// hc_name =  ;
9652: LD_ADDR_OWVAR 26
9656: PUSH
9657: LD_STRING 
9659: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( 0 , 1 ) ) ;
9660: LD_INT 0
9662: PPUSH
9663: LD_INT 2
9665: PPUSH
9666: LD_INT 0
9668: PPUSH
9669: LD_INT 1
9671: PPUSH
9672: CALL_OW 12
9676: PPUSH
9677: CALL_OW 380
// un = CreateHuman ;
9681: LD_ADDR_VAR 0 3
9685: PUSH
9686: CALL_OW 44
9690: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
9691: LD_VAR 0 3
9695: PPUSH
9696: LD_INT 6
9698: PPUSH
9699: LD_INT 0
9701: PPUSH
9702: CALL_OW 49
// end ;
9706: GO 9625
9708: POP
9709: POP
// end ;
9710: LD_VAR 0 1
9714: RET
// export function PrepareOtherAmericans ; begin
9715: LD_INT 0
9717: PPUSH
// uc_side = 4 ;
9718: LD_ADDR_OWVAR 20
9722: PUSH
9723: LD_INT 4
9725: ST_TO_ADDR
// uc_nation = 1 ;
9726: LD_ADDR_OWVAR 21
9730: PUSH
9731: LD_INT 1
9733: ST_TO_ADDR
// hc_gallery =  ;
9734: LD_ADDR_OWVAR 33
9738: PUSH
9739: LD_STRING 
9741: ST_TO_ADDR
// hc_name = Brian Garvin ;
9742: LD_ADDR_OWVAR 26
9746: PUSH
9747: LD_STRING Brian Garvin
9749: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
9750: LD_INT 1
9752: PPUSH
9753: LD_INT 1
9755: PPUSH
9756: LD_INT 1
9758: PPUSH
9759: LD_INT 2
9761: PPUSH
9762: CALL_OW 12
9766: PPUSH
9767: CALL_OW 380
// Brian = CreateHuman ;
9771: LD_ADDR_EXP 6
9775: PUSH
9776: CALL_OW 44
9780: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
9781: LD_EXP 6
9785: PPUSH
9786: LD_INT 10
9788: PPUSH
9789: LD_INT 0
9791: PPUSH
9792: CALL_OW 49
// hc_name = Jerry White ;
9796: LD_ADDR_OWVAR 26
9800: PUSH
9801: LD_STRING Jerry White
9803: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
9804: LD_INT 1
9806: PPUSH
9807: LD_INT 3
9809: PPUSH
9810: LD_INT 1
9812: PPUSH
9813: LD_INT 2
9815: PPUSH
9816: CALL_OW 12
9820: PPUSH
9821: CALL_OW 380
// Jerry = CreateHuman ;
9825: LD_ADDR_EXP 7
9829: PUSH
9830: CALL_OW 44
9834: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
9835: LD_EXP 7
9839: PPUSH
9840: LD_INT 10
9842: PPUSH
9843: LD_INT 0
9845: PPUSH
9846: CALL_OW 49
// SetLives ( Jerry , 250 ) ;
9850: LD_EXP 7
9854: PPUSH
9855: LD_INT 250
9857: PPUSH
9858: CALL_OW 234
// end ;
9862: LD_VAR 0 1
9866: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
9867: LD_INT 0
9869: PPUSH
9870: PPUSH
9871: PPUSH
// for i = 1 to 6 do
9872: LD_ADDR_VAR 0 2
9876: PUSH
9877: DOUBLE
9878: LD_INT 1
9880: DEC
9881: ST_TO_ADDR
9882: LD_INT 6
9884: PUSH
9885: FOR_TO
9886: IFFALSE 9980
// begin uc_side = 4 ;
9888: LD_ADDR_OWVAR 20
9892: PUSH
9893: LD_INT 4
9895: ST_TO_ADDR
// uc_nation = 1 ;
9896: LD_ADDR_OWVAR 21
9900: PUSH
9901: LD_INT 1
9903: ST_TO_ADDR
// hc_gallery =  ;
9904: LD_ADDR_OWVAR 33
9908: PUSH
9909: LD_STRING 
9911: ST_TO_ADDR
// hc_name =  ;
9912: LD_ADDR_OWVAR 26
9916: PUSH
9917: LD_STRING 
9919: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
9920: LD_INT 0
9922: PPUSH
9923: LD_INT 1
9925: PPUSH
9926: LD_INT 4
9928: PPUSH
9929: CALL_OW 12
9933: PPUSH
9934: LD_INT 1
9936: PPUSH
9937: CALL_OW 380
// un = CreateHuman ;
9941: LD_ADDR_VAR 0 3
9945: PUSH
9946: CALL_OW 44
9950: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
9951: LD_VAR 0 3
9955: PPUSH
9956: LD_INT 16
9958: PPUSH
9959: LD_INT 0
9961: PPUSH
9962: CALL_OW 49
// SetLives ( un , 1 ) ;
9966: LD_VAR 0 3
9970: PPUSH
9971: LD_INT 1
9973: PPUSH
9974: CALL_OW 234
// end ;
9978: GO 9885
9980: POP
9981: POP
// DyingSold = CreateHuman ;
9982: LD_ADDR_EXP 29
9986: PUSH
9987: CALL_OW 44
9991: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
9992: LD_EXP 29
9996: PPUSH
9997: LD_INT 16
9999: PPUSH
10000: LD_INT 0
10002: PPUSH
10003: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
10007: LD_EXP 29
10011: PPUSH
10012: LD_INT 250
10014: PPUSH
10015: CALL_OW 234
// end ; end_of_file
10019: LD_VAR 0 1
10023: RET
// export function PrepareRussianHeroes ; var tmp ; begin
10024: LD_INT 0
10026: PPUSH
10027: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
10028: LD_ADDR_VAR 0 2
10032: PUSH
10033: LD_INT 22
10035: PUSH
10036: LD_INT 1
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: LD_INT 25
10045: PUSH
10046: LD_INT 2
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PPUSH
10057: CALL_OW 69
10061: ST_TO_ADDR
// uc_side = 6 ;
10062: LD_ADDR_OWVAR 20
10066: PUSH
10067: LD_INT 6
10069: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
10070: LD_ADDR_EXP 8
10074: PUSH
10075: LD_STRING Mikhail
10077: PPUSH
10078: CALL_OW 25
10082: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
10083: LD_EXP 8
10087: PPUSH
10088: LD_VAR 0 2
10092: PUSH
10093: LD_INT 1
10095: ARRAY
10096: PPUSH
10097: CALL_OW 250
10101: PPUSH
10102: LD_VAR 0 2
10106: PUSH
10107: LD_INT 1
10109: ARRAY
10110: PPUSH
10111: CALL_OW 251
10115: PPUSH
10116: LD_INT 3
10118: PPUSH
10119: LD_INT 1
10121: PPUSH
10122: CALL_OW 50
// end ;
10126: LD_VAR 0 1
10130: RET
// export function PrepareRussianCommander ; var un ; begin
10131: LD_INT 0
10133: PPUSH
10134: PPUSH
// uc_side = 3 ;
10135: LD_ADDR_OWVAR 20
10139: PUSH
10140: LD_INT 3
10142: ST_TO_ADDR
// uc_nation = 3 ;
10143: LD_ADDR_OWVAR 21
10147: PUSH
10148: LD_INT 3
10150: ST_TO_ADDR
// hc_gallery =  ;
10151: LD_ADDR_OWVAR 33
10155: PUSH
10156: LD_STRING 
10158: ST_TO_ADDR
// hc_name = Natasza Stjepanowna ;
10159: LD_ADDR_OWVAR 26
10163: PUSH
10164: LD_STRING Natasza Stjepanowna
10166: ST_TO_ADDR
// PrepareHuman ( 2 , 1 , rand ( 2 , 4 ) ) ;
10167: LD_INT 2
10169: PPUSH
10170: LD_INT 1
10172: PPUSH
10173: LD_INT 2
10175: PPUSH
10176: LD_INT 4
10178: PPUSH
10179: CALL_OW 12
10183: PPUSH
10184: CALL_OW 380
// hc_importance = 110 ;
10188: LD_ADDR_OWVAR 32
10192: PUSH
10193: LD_INT 110
10195: ST_TO_ADDR
// un = CreateHuman ;
10196: LD_ADDR_VAR 0 2
10200: PUSH
10201: CALL_OW 44
10205: ST_TO_ADDR
// PlaceUnitArea ( un , NataszaSpawn , false ) ;
10206: LD_VAR 0 2
10210: PPUSH
10211: LD_INT 24
10213: PPUSH
10214: LD_INT 0
10216: PPUSH
10217: CALL_OW 49
// ComTurnXY ( un , 56 , 16 ) ;
10221: LD_VAR 0 2
10225: PPUSH
10226: LD_INT 56
10228: PPUSH
10229: LD_INT 16
10231: PPUSH
10232: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ un ;
10236: LD_ADDR_EXP 23
10240: PUSH
10241: LD_EXP 23
10245: PUSH
10246: LD_VAR 0 2
10250: ADD
10251: ST_TO_ADDR
// end ;
10252: LD_VAR 0 1
10256: RET
// export function PrepareSouthBase ; var i , un ; begin
10257: LD_INT 0
10259: PPUSH
10260: PPUSH
10261: PPUSH
// for i = 1 to 2 do
10262: LD_ADDR_VAR 0 2
10266: PUSH
10267: DOUBLE
10268: LD_INT 1
10270: DEC
10271: ST_TO_ADDR
10272: LD_INT 2
10274: PUSH
10275: FOR_TO
10276: IFFALSE 10385
// begin uc_side = 3 ;
10278: LD_ADDR_OWVAR 20
10282: PUSH
10283: LD_INT 3
10285: ST_TO_ADDR
// uc_nation = 3 ;
10286: LD_ADDR_OWVAR 21
10290: PUSH
10291: LD_INT 3
10293: ST_TO_ADDR
// hc_gallery =  ;
10294: LD_ADDR_OWVAR 33
10298: PUSH
10299: LD_STRING 
10301: ST_TO_ADDR
// hc_name =  ;
10302: LD_ADDR_OWVAR 26
10306: PUSH
10307: LD_STRING 
10309: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
10310: LD_INT 1
10312: PPUSH
10313: LD_INT 1
10315: PPUSH
10316: LD_EXP 13
10320: PPUSH
10321: LD_EXP 14
10325: PPUSH
10326: CALL_OW 12
10330: PPUSH
10331: CALL_OW 380
// hc_importance = 0 ;
10335: LD_ADDR_OWVAR 32
10339: PUSH
10340: LD_INT 0
10342: ST_TO_ADDR
// un = CreateHuman ;
10343: LD_ADDR_VAR 0 3
10347: PUSH
10348: CALL_OW 44
10352: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
10353: LD_VAR 0 3
10357: PPUSH
10358: LD_INT 11
10360: PPUSH
10361: LD_INT 0
10363: PPUSH
10364: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
10368: LD_VAR 0 3
10372: PPUSH
10373: LD_INT 111
10375: PPUSH
10376: LD_INT 38
10378: PPUSH
10379: CALL_OW 118
// end ;
10383: GO 10275
10385: POP
10386: POP
// for i = 1 to Difficulty do
10387: LD_ADDR_VAR 0 2
10391: PUSH
10392: DOUBLE
10393: LD_INT 1
10395: DEC
10396: ST_TO_ADDR
10397: LD_OWVAR 67
10401: PUSH
10402: FOR_TO
10403: IFFALSE 10504
// begin uc_side = 3 ;
10405: LD_ADDR_OWVAR 20
10409: PUSH
10410: LD_INT 3
10412: ST_TO_ADDR
// uc_nation = 3 ;
10413: LD_ADDR_OWVAR 21
10417: PUSH
10418: LD_INT 3
10420: ST_TO_ADDR
// hc_gallery =  ;
10421: LD_ADDR_OWVAR 33
10425: PUSH
10426: LD_STRING 
10428: ST_TO_ADDR
// hc_name =  ;
10429: LD_ADDR_OWVAR 26
10433: PUSH
10434: LD_STRING 
10436: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
10437: LD_INT 0
10439: PPUSH
10440: LD_INT 3
10442: PPUSH
10443: LD_EXP 13
10447: PPUSH
10448: LD_EXP 14
10452: PPUSH
10453: CALL_OW 12
10457: PPUSH
10458: CALL_OW 380
// un = CreateHuman ;
10462: LD_ADDR_VAR 0 3
10466: PUSH
10467: CALL_OW 44
10471: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
10472: LD_VAR 0 3
10476: PPUSH
10477: LD_INT 12
10479: PPUSH
10480: LD_INT 0
10482: PPUSH
10483: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
10487: LD_VAR 0 3
10491: PPUSH
10492: LD_INT 111
10494: PPUSH
10495: LD_INT 28
10497: PPUSH
10498: CALL_OW 118
// end ;
10502: GO 10402
10504: POP
10505: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
10506: LD_INT 3
10508: PPUSH
10509: LD_INT 3
10511: PPUSH
10512: LD_INT 33
10514: PPUSH
10515: LD_EXP 13
10519: PPUSH
10520: LD_EXP 14
10524: PPUSH
10525: CALL_OW 12
10529: PPUSH
10530: LD_INT 1
10532: PPUSH
10533: LD_INT 1
10535: PUSH
10536: LD_INT 1
10538: PPUSH
10539: LD_INT 2
10541: PPUSH
10542: CALL_OW 12
10546: PUSH
10547: LD_INT 1
10549: PPUSH
10550: LD_INT 2
10552: PPUSH
10553: CALL_OW 12
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: PUSH
10563: LD_OWVAR 67
10567: ARRAY
10568: PPUSH
10569: CALL 7096 0 6
// for i in UnitsInside ( arm2 ) do
10573: LD_ADDR_VAR 0 2
10577: PUSH
10578: LD_INT 33
10580: PPUSH
10581: CALL_OW 313
10585: PUSH
10586: FOR_IN
10587: IFFALSE 10607
// southBaseDefenders = southBaseDefenders ^ i ;
10589: LD_ADDR_EXP 24
10593: PUSH
10594: LD_EXP 24
10598: PUSH
10599: LD_VAR 0 2
10603: ADD
10604: ST_TO_ADDR
10605: GO 10586
10607: POP
10608: POP
// end ;
10609: LD_VAR 0 1
10613: RET
// export function PrepareNorthBase ; var i , un ; begin
10614: LD_INT 0
10616: PPUSH
10617: PPUSH
10618: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
10619: LD_ADDR_VAR 0 2
10623: PUSH
10624: DOUBLE
10625: LD_INT 1
10627: DEC
10628: ST_TO_ADDR
10629: LD_INT 1
10631: PPUSH
10632: LD_INT 2
10634: PPUSH
10635: CALL_OW 12
10639: PUSH
10640: LD_INT 2
10642: PPUSH
10643: LD_INT 3
10645: PPUSH
10646: CALL_OW 12
10650: PUSH
10651: LD_INT 3
10653: PPUSH
10654: LD_INT 4
10656: PPUSH
10657: CALL_OW 12
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: LIST
10666: PUSH
10667: LD_OWVAR 67
10671: ARRAY
10672: PUSH
10673: FOR_TO
10674: IFFALSE 10760
// begin uc_side = 3 ;
10676: LD_ADDR_OWVAR 20
10680: PUSH
10681: LD_INT 3
10683: ST_TO_ADDR
// uc_nation = 3 ;
10684: LD_ADDR_OWVAR 21
10688: PUSH
10689: LD_INT 3
10691: ST_TO_ADDR
// hc_gallery =  ;
10692: LD_ADDR_OWVAR 33
10696: PUSH
10697: LD_STRING 
10699: ST_TO_ADDR
// hc_name =  ;
10700: LD_ADDR_OWVAR 26
10704: PUSH
10705: LD_STRING 
10707: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
10708: LD_INT 0
10710: PPUSH
10711: LD_INT 1
10713: PPUSH
10714: LD_EXP 13
10718: PPUSH
10719: LD_EXP 14
10723: PPUSH
10724: CALL_OW 12
10728: PPUSH
10729: CALL_OW 380
// un = CreateHuman ;
10733: LD_ADDR_VAR 0 3
10737: PUSH
10738: CALL_OW 44
10742: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
10743: LD_VAR 0 3
10747: PPUSH
10748: LD_INT 14
10750: PPUSH
10751: LD_INT 0
10753: PPUSH
10754: CALL_OW 49
// end ;
10758: GO 10673
10760: POP
10761: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
10762: LD_INT 3
10764: PPUSH
10765: LD_INT 3
10767: PPUSH
10768: LD_INT 2
10770: PPUSH
10771: LD_EXP 13
10775: PPUSH
10776: LD_EXP 14
10780: PPUSH
10781: CALL_OW 12
10785: PPUSH
10786: LD_INT 1
10788: PPUSH
10789: LD_INT 1
10791: PPUSH
10792: LD_INT 2
10794: PPUSH
10795: CALL_OW 12
10799: PUSH
10800: LD_INT 1
10802: PPUSH
10803: LD_INT 3
10805: PPUSH
10806: CALL_OW 12
10810: PUSH
10811: LD_INT 1
10813: PPUSH
10814: LD_INT 3
10816: PPUSH
10817: CALL_OW 12
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: PUSH
10827: LD_OWVAR 67
10831: ARRAY
10832: PPUSH
10833: CALL 7096 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
10837: LD_INT 3
10839: PPUSH
10840: LD_INT 3
10842: PPUSH
10843: LD_INT 23
10845: PPUSH
10846: LD_EXP 13
10850: PPUSH
10851: LD_EXP 14
10855: PPUSH
10856: CALL_OW 12
10860: PPUSH
10861: LD_INT 4
10863: PPUSH
10864: LD_INT 0
10866: PUSH
10867: LD_INT 1
10869: PUSH
10870: LD_INT 2
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: LIST
10877: PUSH
10878: LD_OWVAR 67
10882: ARRAY
10883: PPUSH
10884: CALL 7096 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
10888: LD_INT 3
10890: PPUSH
10891: LD_INT 3
10893: PPUSH
10894: LD_INT 1
10896: PPUSH
10897: LD_EXP 13
10901: PPUSH
10902: LD_EXP 14
10906: PPUSH
10907: CALL_OW 12
10911: PPUSH
10912: LD_INT 2
10914: PPUSH
10915: LD_INT 1
10917: PUSH
10918: LD_INT 2
10920: PUSH
10921: LD_INT 2
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: LIST
10928: PUSH
10929: LD_OWVAR 67
10933: ARRAY
10934: PPUSH
10935: CALL 7096 0 6
// for i in UnitsInside ( arm1 ) do
10939: LD_ADDR_VAR 0 2
10943: PUSH
10944: LD_INT 2
10946: PPUSH
10947: CALL_OW 313
10951: PUSH
10952: FOR_IN
10953: IFFALSE 10973
// northBaseDefenders = northBaseDefenders ^ i ;
10955: LD_ADDR_EXP 23
10959: PUSH
10960: LD_EXP 23
10964: PUSH
10965: LD_VAR 0 2
10969: ADD
10970: ST_TO_ADDR
10971: GO 10952
10973: POP
10974: POP
// end ;
10975: LD_VAR 0 1
10979: RET
// export function PrepareOtherRussians ; var i , un ; begin
10980: LD_INT 0
10982: PPUSH
10983: PPUSH
10984: PPUSH
// for i = 1 to 2 do
10985: LD_ADDR_VAR 0 2
10989: PUSH
10990: DOUBLE
10991: LD_INT 1
10993: DEC
10994: ST_TO_ADDR
10995: LD_INT 2
10997: PUSH
10998: FOR_TO
10999: IFFALSE 11100
// begin uc_side = 3 ;
11001: LD_ADDR_OWVAR 20
11005: PUSH
11006: LD_INT 3
11008: ST_TO_ADDR
// uc_nation = 3 ;
11009: LD_ADDR_OWVAR 21
11013: PUSH
11014: LD_INT 3
11016: ST_TO_ADDR
// hc_gallery =  ;
11017: LD_ADDR_OWVAR 33
11021: PUSH
11022: LD_STRING 
11024: ST_TO_ADDR
// hc_name =  ;
11025: LD_ADDR_OWVAR 26
11029: PUSH
11030: LD_STRING 
11032: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11033: LD_INT 0
11035: PPUSH
11036: LD_INT 1
11038: PPUSH
11039: LD_EXP 13
11043: PPUSH
11044: LD_EXP 14
11048: PPUSH
11049: CALL_OW 12
11053: PPUSH
11054: CALL_OW 380
// un = CreateHuman ;
11058: LD_ADDR_VAR 0 3
11062: PUSH
11063: CALL_OW 44
11067: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
11068: LD_VAR 0 3
11072: PPUSH
11073: LD_INT 9
11075: PPUSH
11076: LD_INT 0
11078: PPUSH
11079: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
11083: LD_VAR 0 3
11087: PPUSH
11088: LD_INT 80
11090: PPUSH
11091: LD_INT 73
11093: PPUSH
11094: CALL_OW 118
// end ;
11098: GO 10998
11100: POP
11101: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
11102: LD_ADDR_VAR 0 2
11106: PUSH
11107: LD_INT 22
11109: PUSH
11110: LD_INT 3
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: LD_INT 30
11119: PUSH
11120: LD_INT 31
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PPUSH
11131: CALL_OW 69
11135: PUSH
11136: FOR_IN
11137: IFFALSE 11165
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
11139: LD_EXP 13
11143: PPUSH
11144: LD_EXP 14
11148: PPUSH
11149: CALL_OW 12
11153: PPUSH
11154: LD_VAR 0 2
11158: PPUSH
11159: CALL 7206 0 2
11163: GO 11136
11165: POP
11166: POP
// end ;
11167: LD_VAR 0 1
11171: RET
// export function PrepareCargoBays ; begin
11172: LD_INT 0
11174: PPUSH
// uc_side = 3 ;
11175: LD_ADDR_OWVAR 20
11179: PUSH
11180: LD_INT 3
11182: ST_TO_ADDR
// uc_nation = 3 ;
11183: LD_ADDR_OWVAR 21
11187: PUSH
11188: LD_INT 3
11190: ST_TO_ADDR
// vc_engine = 1 ;
11191: LD_ADDR_OWVAR 39
11195: PUSH
11196: LD_INT 1
11198: ST_TO_ADDR
// vc_control = 1 ;
11199: LD_ADDR_OWVAR 38
11203: PUSH
11204: LD_INT 1
11206: ST_TO_ADDR
// vc_weapon = 51 ;
11207: LD_ADDR_OWVAR 40
11211: PUSH
11212: LD_INT 51
11214: ST_TO_ADDR
// vc_chassis = 21 ;
11215: LD_ADDR_OWVAR 37
11219: PUSH
11220: LD_INT 21
11222: ST_TO_ADDR
// cargo1 = CreateVehicle ;
11223: LD_ADDR_EXP 15
11227: PUSH
11228: CALL_OW 45
11232: ST_TO_ADDR
// cargo2 = CreateVehicle ;
11233: LD_ADDR_EXP 16
11237: PUSH
11238: CALL_OW 45
11242: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
11243: LD_EXP 15
11247: PPUSH
11248: LD_INT 13
11250: PPUSH
11251: LD_INT 0
11253: PPUSH
11254: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
11258: LD_EXP 16
11262: PPUSH
11263: LD_INT 13
11265: PPUSH
11266: LD_INT 0
11268: PPUSH
11269: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
11273: LD_EXP 15
11277: PPUSH
11278: LD_INT 2
11280: PPUSH
11281: LD_INT 70
11283: PUSH
11284: LD_INT 50
11286: PUSH
11287: LD_INT 30
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: LIST
11294: PUSH
11295: LD_OWVAR 67
11299: ARRAY
11300: PPUSH
11301: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
11305: LD_EXP 16
11309: PPUSH
11310: LD_INT 2
11312: PPUSH
11313: LD_INT 70
11315: PUSH
11316: LD_INT 50
11318: PUSH
11319: LD_INT 30
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: LIST
11326: PUSH
11327: LD_OWVAR 67
11331: ARRAY
11332: PPUSH
11333: CALL_OW 291
// hc_gallery =  ;
11337: LD_ADDR_OWVAR 33
11341: PUSH
11342: LD_STRING 
11344: ST_TO_ADDR
// hc_name =  ;
11345: LD_ADDR_OWVAR 26
11349: PUSH
11350: LD_STRING 
11352: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11353: LD_INT 1
11355: PPUSH
11356: LD_INT 3
11358: PPUSH
11359: LD_INT 1
11361: PPUSH
11362: LD_INT 2
11364: PPUSH
11365: CALL_OW 12
11369: PPUSH
11370: CALL_OW 380
// driver1 = CreateHuman ;
11374: LD_ADDR_EXP 17
11378: PUSH
11379: CALL_OW 44
11383: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
11384: LD_EXP 17
11388: PPUSH
11389: LD_EXP 15
11393: PPUSH
11394: CALL_OW 52
// hc_name = Nikolai Andreyev ;
11398: LD_ADDR_OWVAR 26
11402: PUSH
11403: LD_STRING Nikolai Andreyev
11405: ST_TO_ADDR
// driver2 = CreateHuman ;
11406: LD_ADDR_EXP 18
11410: PUSH
11411: CALL_OW 44
11415: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
11416: LD_EXP 18
11420: PPUSH
11421: LD_EXP 16
11425: PPUSH
11426: CALL_OW 52
// end ;
11430: LD_VAR 0 1
11434: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp ; begin
11435: LD_INT 0
11437: PPUSH
11438: PPUSH
11439: PPUSH
11440: PPUSH
11441: PPUSH
// uc_side = 3 ;
11442: LD_ADDR_OWVAR 20
11446: PUSH
11447: LD_INT 3
11449: ST_TO_ADDR
// uc_nation = 3 ;
11450: LD_ADDR_OWVAR 21
11454: PUSH
11455: LD_INT 3
11457: ST_TO_ADDR
// for i := 1 to count do
11458: LD_ADDR_VAR 0 4
11462: PUSH
11463: DOUBLE
11464: LD_INT 1
11466: DEC
11467: ST_TO_ADDR
11468: LD_VAR 0 1
11472: PUSH
11473: FOR_TO
11474: IFFALSE 11634
// begin vc_engine = 1 ;
11476: LD_ADDR_OWVAR 39
11480: PUSH
11481: LD_INT 1
11483: ST_TO_ADDR
// vc_control = 1 ;
11484: LD_ADDR_OWVAR 38
11488: PUSH
11489: LD_INT 1
11491: ST_TO_ADDR
// vc_weapon = 42 ;
11492: LD_ADDR_OWVAR 40
11496: PUSH
11497: LD_INT 42
11499: ST_TO_ADDR
// vc_chassis = 21 ;
11500: LD_ADDR_OWVAR 37
11504: PUSH
11505: LD_INT 21
11507: ST_TO_ADDR
// veh = CreateVehicle ;
11508: LD_ADDR_VAR 0 5
11512: PUSH
11513: CALL_OW 45
11517: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
11518: LD_VAR 0 5
11522: PPUSH
11523: LD_VAR 0 2
11527: PPUSH
11528: LD_INT 0
11530: PPUSH
11531: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
11535: LD_ADDR_EXP 25
11539: PUSH
11540: LD_EXP 25
11544: PUSH
11545: LD_VAR 0 5
11549: ADD
11550: ST_TO_ADDR
// hc_gallery =  ;
11551: LD_ADDR_OWVAR 33
11555: PUSH
11556: LD_STRING 
11558: ST_TO_ADDR
// hc_name =  ;
11559: LD_ADDR_OWVAR 26
11563: PUSH
11564: LD_STRING 
11566: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11567: LD_INT 0
11569: PPUSH
11570: LD_INT 3
11572: PPUSH
11573: LD_EXP 13
11577: PPUSH
11578: LD_EXP 14
11582: PPUSH
11583: CALL_OW 12
11587: PPUSH
11588: CALL_OW 380
// un = CreateHuman ;
11592: LD_ADDR_VAR 0 6
11596: PUSH
11597: CALL_OW 44
11601: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11602: LD_VAR 0 6
11606: PPUSH
11607: LD_VAR 0 5
11611: PPUSH
11612: CALL_OW 52
// attackGroup = attackGroup ^ un ;
11616: LD_ADDR_EXP 25
11620: PUSH
11621: LD_EXP 25
11625: PUSH
11626: LD_VAR 0 6
11630: ADD
11631: ST_TO_ADDR
// end ;
11632: GO 11473
11634: POP
11635: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11636: LD_INT 0
11638: PPUSH
11639: LD_INT 2
11641: PPUSH
11642: LD_EXP 13
11646: PPUSH
11647: LD_EXP 14
11651: PPUSH
11652: CALL_OW 12
11656: PPUSH
11657: CALL_OW 380
// un = CreateHuman ;
11661: LD_ADDR_VAR 0 6
11665: PUSH
11666: CALL_OW 44
11670: ST_TO_ADDR
// for i := 1 to count * 2 do
11671: LD_ADDR_VAR 0 4
11675: PUSH
11676: DOUBLE
11677: LD_INT 1
11679: DEC
11680: ST_TO_ADDR
11681: LD_VAR 0 1
11685: PUSH
11686: LD_INT 2
11688: MUL
11689: PUSH
11690: FOR_TO
11691: IFFALSE 11779
// begin hc_gallery =  ;
11693: LD_ADDR_OWVAR 33
11697: PUSH
11698: LD_STRING 
11700: ST_TO_ADDR
// hc_name =  ;
11701: LD_ADDR_OWVAR 26
11705: PUSH
11706: LD_STRING 
11708: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11709: LD_INT 1
11711: PPUSH
11712: LD_INT 1
11714: PPUSH
11715: LD_EXP 13
11719: PPUSH
11720: LD_EXP 14
11724: PPUSH
11725: CALL_OW 12
11729: PPUSH
11730: CALL_OW 380
// un = CreateHuman ;
11734: LD_ADDR_VAR 0 6
11738: PUSH
11739: CALL_OW 44
11743: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
11744: LD_VAR 0 6
11748: PPUSH
11749: LD_VAR 0 2
11753: PPUSH
11754: LD_INT 0
11756: PPUSH
11757: CALL_OW 49
// attackGroup = attackGroup ^ un ;
11761: LD_ADDR_EXP 25
11765: PUSH
11766: LD_EXP 25
11770: PUSH
11771: LD_VAR 0 6
11775: ADD
11776: ST_TO_ADDR
// end ;
11777: GO 11690
11779: POP
11780: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
11781: LD_ADDR_VAR 0 7
11785: PUSH
11786: LD_INT 26
11788: PPUSH
11789: LD_INT 22
11791: PUSH
11792: LD_INT 3
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: LD_INT 21
11801: PUSH
11802: LD_INT 1
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 26
11811: PUSH
11812: LD_INT 1
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: PPUSH
11824: CALL_OW 70
11828: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
11829: LD_VAR 0 7
11833: PUSH
11834: LD_INT 1
11836: ARRAY
11837: PPUSH
11838: LD_STRING D9-Rus3-1
11840: PPUSH
11841: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
11845: LD_VAR 0 7
11849: PUSH
11850: LD_INT 2
11852: ARRAY
11853: PPUSH
11854: LD_STRING D9-Russ-1
11856: PPUSH
11857: CALL_OW 88
// for i in attackGroup do
11861: LD_ADDR_VAR 0 4
11865: PUSH
11866: LD_EXP 25
11870: PUSH
11871: FOR_IN
11872: IFFALSE 11891
// ComAgressiveMove ( i , 54 , 19 ) ;
11874: LD_VAR 0 4
11878: PPUSH
11879: LD_INT 54
11881: PPUSH
11882: LD_INT 19
11884: PPUSH
11885: CALL_OW 114
11889: GO 11871
11891: POP
11892: POP
// end ; end_of_file
11893: LD_VAR 0 3
11897: RET
// every 0 0$1 do
11898: GO 11900
11900: DISABLE
// begin enable ;
11901: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
11902: LD_INT 3
11904: PPUSH
11905: LD_INT 1
11907: PPUSH
11908: LD_INT 22
11910: PPUSH
11911: CALL 7342 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
11915: LD_INT 3
11917: PPUSH
11918: LD_INT 20
11920: PPUSH
11921: LD_INT 22
11923: PPUSH
11924: LD_INT 23
11926: PPUSH
11927: CALL 7588 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
11931: LD_INT 3
11933: PPUSH
11934: LD_INT 21
11936: PPUSH
11937: LD_INT 23
11939: PPUSH
11940: CALL 7867 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
11944: LD_INT 22
11946: PPUSH
11947: LD_INT 1
11949: PPUSH
11950: LD_EXP 23
11954: PPUSH
11955: LD_INT 2
11957: PPUSH
11958: CALL 8339 0 4
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
11962: LD_INT 23
11964: PPUSH
11965: LD_INT 1
11967: PPUSH
11968: LD_EXP 24
11972: PPUSH
11973: LD_INT 33
11975: PPUSH
11976: CALL 8339 0 4
// end ; end_of_file
11980: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 then
11981: LD_VAR 0 1
11985: PPUSH
11986: CALL_OW 255
11990: PUSH
11991: LD_INT 1
11993: EQUAL
11994: IFFALSE 12010
// deadsCounter = deadsCounter + 1 ;
11996: LD_ADDR_EXP 27
12000: PUSH
12001: LD_EXP 27
12005: PUSH
12006: LD_INT 1
12008: PLUS
12009: ST_TO_ADDR
// end ; end_of_file
12010: PPOPN 1
12012: END
// every 0 0$1 trigger IsDead ( JMM ) do
12013: LD_EXP 1
12017: PPUSH
12018: CALL_OW 301
12022: IFFALSE 12034
12024: GO 12026
12026: DISABLE
// YouLost ( JMM ) ;
12027: LD_STRING JMM
12029: PPUSH
12030: CALL_OW 104
12034: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
12035: LD_INT 1
12037: PPUSH
12038: CALL_OW 301
12042: PUSH
12043: LD_INT 10
12045: PPUSH
12046: CALL_OW 301
12050: OR
12051: IFFALSE 12063
12053: GO 12055
12055: DISABLE
// YouLost ( DepotDestroyed ) ;
12056: LD_STRING DepotDestroyed
12058: PPUSH
12059: CALL_OW 104
12063: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
12064: LD_INT 22
12066: PUSH
12067: LD_INT 1
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PUSH
12074: LD_INT 21
12076: PUSH
12077: LD_INT 1
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PUSH
12084: LD_INT 25
12086: PUSH
12087: LD_INT 2
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: LIST
12098: PPUSH
12099: CALL_OW 69
12103: PUSH
12104: LD_INT 0
12106: EQUAL
12107: PUSH
12108: LD_INT 22
12110: PUSH
12111: LD_INT 4
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 21
12120: PUSH
12121: LD_INT 1
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 25
12130: PUSH
12131: LD_INT 2
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 69
12147: PUSH
12148: LD_INT 0
12150: EQUAL
12151: AND
12152: PUSH
12153: LD_INT 1
12155: PPUSH
12156: CALL_OW 255
12160: PUSH
12161: LD_INT 3
12163: EQUAL
12164: AND
12165: PUSH
12166: LD_INT 10
12168: PPUSH
12169: CALL_OW 255
12173: PUSH
12174: LD_INT 3
12176: EQUAL
12177: AND
12178: IFFALSE 12190
12180: GO 12182
12182: DISABLE
// YouLost ( Engineer ) ;
12183: LD_STRING Engineer
12185: PPUSH
12186: CALL_OW 104
12190: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and LastBattle = 1 do
12191: LD_INT 22
12193: PPUSH
12194: LD_INT 22
12196: PUSH
12197: LD_INT 1
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 21
12206: PUSH
12207: LD_INT 1
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PPUSH
12218: CALL_OW 70
12222: PUSH
12223: LD_INT 0
12225: EQUAL
12226: PUSH
12227: LD_INT 22
12229: PPUSH
12230: LD_INT 22
12232: PUSH
12233: LD_INT 3
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 21
12242: PUSH
12243: LD_INT 1
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PPUSH
12254: CALL_OW 70
12258: PUSH
12259: LD_INT 0
12261: GREATER
12262: AND
12263: PUSH
12264: LD_EXP 26
12268: PUSH
12269: LD_INT 1
12271: EQUAL
12272: AND
12273: IFFALSE 12285
12275: GO 12277
12277: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
12278: LD_STRING DepotCaptured
12280: PPUSH
12281: CALL_OW 104
12285: END
// export function PrepareTigers ; var i , un ; begin
12286: LD_INT 0
12288: PPUSH
12289: PPUSH
12290: PPUSH
// for i = 1 to Difficulty do
12291: LD_ADDR_VAR 0 2
12295: PUSH
12296: DOUBLE
12297: LD_INT 1
12299: DEC
12300: ST_TO_ADDR
12301: LD_OWVAR 67
12305: PUSH
12306: FOR_TO
12307: IFFALSE 12442
// begin hc_sex = sex_male ;
12309: LD_ADDR_OWVAR 27
12313: PUSH
12314: LD_INT 1
12316: ST_TO_ADDR
// uc_side = 0 ;
12317: LD_ADDR_OWVAR 20
12321: PUSH
12322: LD_INT 0
12324: ST_TO_ADDR
// uc_nation = nation_nature ;
12325: LD_ADDR_OWVAR 21
12329: PUSH
12330: LD_INT 0
12332: ST_TO_ADDR
// hc_class = class_tiger ;
12333: LD_ADDR_OWVAR 28
12337: PUSH
12338: LD_INT 14
12340: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
12341: LD_ADDR_OWVAR 31
12345: PUSH
12346: LD_EXP 14
12350: PUSH
12351: LD_INT 0
12353: PUSH
12354: LD_INT 0
12356: PUSH
12357: LD_INT 0
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: ST_TO_ADDR
// hc_agressivity = [ rand ( 10 , 20 ) , rand ( 20 , 30 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
12366: LD_ADDR_OWVAR 35
12370: PUSH
12371: LD_INT 10
12373: PPUSH
12374: LD_INT 20
12376: PPUSH
12377: CALL_OW 12
12381: PUSH
12382: LD_INT 20
12384: PPUSH
12385: LD_INT 30
12387: PPUSH
12388: CALL_OW 12
12392: PUSH
12393: LD_INT 40
12395: PPUSH
12396: LD_INT 50
12398: PPUSH
12399: CALL_OW 12
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: LIST
12408: PUSH
12409: LD_OWVAR 67
12413: ARRAY
12414: ST_TO_ADDR
// un = CreateHuman ;
12415: LD_ADDR_VAR 0 3
12419: PUSH
12420: CALL_OW 44
12424: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12425: LD_VAR 0 3
12429: PPUSH
12430: LD_INT 27
12432: PPUSH
12433: LD_INT 0
12435: PPUSH
12436: CALL_OW 49
// end ;
12440: GO 12306
12442: POP
12443: POP
// end ; end_of_file
12444: LD_VAR 0 1
12448: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 do
12449: LD_INT 1
12451: PPUSH
12452: CALL_OW 255
12456: PUSH
12457: LD_INT 1
12459: EQUAL
12460: PUSH
12461: LD_INT 10
12463: PPUSH
12464: CALL_OW 255
12468: PUSH
12469: LD_INT 1
12471: EQUAL
12472: AND
12473: PUSH
12474: LD_EXP 19
12478: PUSH
12479: LD_INT 1
12481: EQUAL
12482: AND
12483: IFFALSE 12574
12485: GO 12487
12487: DISABLE
// begin wait ( [ 9 9$0 , 8 8$0 , 7 7$0 ] [ Difficulty ] ) ;
12488: LD_INT 18900
12490: PUSH
12491: LD_INT 16800
12493: PUSH
12494: LD_INT 14700
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: LIST
12501: PUSH
12502: LD_OWVAR 67
12506: ARRAY
12507: PPUSH
12508: CALL_OW 67
// if cargoEscape = 1 then
12512: LD_EXP 19
12516: PUSH
12517: LD_INT 1
12519: EQUAL
12520: IFFALSE 12574
// begin SayRadio ( Powell , D6-Pow-1 ) ;
12522: LD_EXP 9
12526: PPUSH
12527: LD_STRING D6-Pow-1
12529: PPUSH
12530: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
12534: LD_EXP 1
12538: PPUSH
12539: LD_STRING D6-JMM-1
12541: PPUSH
12542: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
12546: LD_EXP 9
12550: PPUSH
12551: LD_STRING D6-Pow-2
12553: PPUSH
12554: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
12558: LD_EXP 1
12562: PPUSH
12563: LD_STRING D6-JMM-2
12565: PPUSH
12566: CALL_OW 88
// FinishMission ;
12570: CALL 8821 0 0
// end ; end ;
12574: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
12575: LD_INT 1
12577: PPUSH
12578: CALL_OW 255
12582: PUSH
12583: LD_INT 1
12585: EQUAL
12586: PUSH
12587: LD_INT 10
12589: PPUSH
12590: CALL_OW 255
12594: PUSH
12595: LD_INT 1
12597: EQUAL
12598: AND
12599: PUSH
12600: LD_EXP 19
12604: PUSH
12605: LD_INT 1
12607: GREATER
12608: AND
12609: IFFALSE 12676
12611: GO 12613
12613: DISABLE
12614: LD_INT 0
12616: PPUSH
// begin wait ( [ 9 9$0 , 8 8$0 , 7 7$0 ] [ Difficulty ] ) ;
12617: LD_INT 18900
12619: PUSH
12620: LD_INT 16800
12622: PUSH
12623: LD_INT 14700
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: LD_OWVAR 67
12635: ARRAY
12636: PPUSH
12637: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
12641: LD_INT 1
12643: PUSH
12644: LD_INT 2
12646: PUSH
12647: LD_INT 3
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: PUSH
12655: LD_OWVAR 67
12659: ARRAY
12660: PPUSH
12661: LD_INT 13
12663: PPUSH
12664: CALL 11435 0 2
// lastBattle = 1 ;
12668: LD_ADDR_EXP 26
12672: PUSH
12673: LD_INT 1
12675: ST_TO_ADDR
// end ;
12676: PPOPN 1
12678: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
12679: LD_EXP 26
12683: PUSH
12684: LD_INT 1
12686: EQUAL
12687: PUSH
12688: LD_INT 26
12690: PPUSH
12691: LD_INT 22
12693: PUSH
12694: LD_INT 3
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PUSH
12701: LD_INT 21
12703: PUSH
12704: LD_INT 1
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PPUSH
12715: CALL_OW 70
12719: PUSH
12720: LD_INT 0
12722: EQUAL
12723: AND
12724: IFFALSE 12781
12726: GO 12728
12728: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
12729: LD_EXP 9
12733: PPUSH
12734: LD_STRING D6-Pow-1
12736: PPUSH
12737: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
12741: LD_EXP 1
12745: PPUSH
12746: LD_STRING D6-JMM-1
12748: PPUSH
12749: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
12753: LD_EXP 9
12757: PPUSH
12758: LD_STRING D6-Pow-2
12760: PPUSH
12761: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
12765: LD_EXP 1
12769: PPUSH
12770: LD_STRING D6-JMM-2
12772: PPUSH
12773: CALL_OW 88
// FinishMission ;
12777: CALL 8821 0 0
// end ;
12781: END
