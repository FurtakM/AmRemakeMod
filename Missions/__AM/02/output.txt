// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// PrepareDifficulty ;
<<<<<<< HEAD
 161: CALL 10176 0 0
// PrepareRussianCommander ;
 165: CALL 11395 0 0
// PrepareSouthBase ;
 169: CALL 11478 0 0
// PrepareNorthBase ;
 173: CALL 11835 0 0
// PrepareOtherRussians ;
 177: CALL 12201 0 0
// PrepareHeroes ;
 181: CALL 10491 0 0
// PrepareLisSquad ;
 185: CALL 10734 0 0
// PrepareOtherAmericans ;
 189: CALL 10962 0 0
=======
 153: CALL 10143 0 0
// PrepareRussianCommander ;
 157: CALL 11362 0 0
// PrepareSouthBase ;
 161: CALL 11445 0 0
// PrepareNorthBase ;
 165: CALL 11802 0 0
// PrepareOtherRussians ;
 169: CALL 12168 0 0
// PrepareHeroes ;
 173: CALL 10458 0 0
// PrepareLisSquad ;
 177: CALL 10701 0 0
// PrepareOtherAmericans ;
 181: CALL 10929 0 0
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
// end ; end_of_file
 193: END
// every 1 do var tmp ;
 194: GO 196
 196: DISABLE
 197: LD_INT 0
 199: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 209: LD_ADDR_VAR 0 1
 213: PUSH
 214: LD_INT 22
 216: PUSH
 217: LD_INT 4
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 21
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PPUSH
 238: CALL_OW 69
 242: PUSH
 243: LD_EXP 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: DIFF
 251: ST_TO_ADDR
// if Cyrus and Bobby then
 252: LD_EXP 3
 256: PUSH
 257: LD_EXP 2
 261: AND
 262: IFFALSE 592
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 264: LD_EXP 3
 268: PPUSH
 269: LD_INT 43
 271: PPUSH
 272: LD_INT 72
 274: PPUSH
 275: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_INT 44
 286: PPUSH
 287: LD_INT 70
 289: PPUSH
 290: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 294: LD_EXP 1
 298: PPUSH
 299: LD_INT 46
 301: PPUSH
 302: LD_INT 73
 304: PPUSH
 305: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 309: LD_EXP 3
 313: PPUSH
 314: LD_STRING D1a-Cyrus-1
 316: PPUSH
 317: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_STRING D1a-JMM-1
 328: PPUSH
 329: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 333: LD_EXP 3
 337: PPUSH
 338: LD_INT 37
 340: PPUSH
 341: LD_INT 66
 343: PPUSH
 344: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 348: LD_EXP 2
 352: PPUSH
 353: LD_INT 41
 355: PPUSH
 356: LD_INT 67
 358: PPUSH
 359: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 363: LD_EXP 1
 367: PPUSH
 368: LD_INT 38
 370: PPUSH
 371: LD_INT 64
 373: PPUSH
 374: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 378: LD_EXP 2
 382: PPUSH
 383: LD_STRING D1a-Bobby-2
 385: PPUSH
 386: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 390: LD_EXP 3
 394: PPUSH
 395: LD_INT 35
 397: PPUSH
 398: LD_INT 62
 400: PPUSH
 401: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 405: LD_EXP 2
 409: PPUSH
 410: LD_INT 32
 412: PPUSH
 413: LD_INT 60
 415: PPUSH
 416: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 420: LD_EXP 1
 424: PPUSH
 425: LD_INT 35
 427: PPUSH
 428: LD_INT 60
 430: PPUSH
 431: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 435: LD_EXP 1
 439: PPUSH
 440: LD_STRING D1a-JMM-2
 442: PPUSH
 443: CALL_OW 88
// ComWalk ( Lisa ) ;
 447: LD_EXP 4
 451: PPUSH
 452: CALL_OW 138
// wait ( 0 0$1 ) ;
 456: LD_INT 35
 458: PPUSH
 459: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 463: LD_EXP 4
 467: PPUSH
 468: LD_EXP 1
 472: PPUSH
 473: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 477: LD_EXP 1
 481: PUSH
 482: LD_EXP 3
 486: PUSH
 487: LD_EXP 2
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PPUSH
 497: LD_EXP 4
 501: PPUSH
 502: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 506: LD_VAR 0 1
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: LD_INT 33
 517: PPUSH
 518: LD_INT 55
 520: PPUSH
 521: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 525: LD_VAR 0 1
 529: PUSH
 530: LD_INT 2
 532: ARRAY
 533: PPUSH
 534: LD_INT 30
 536: PPUSH
 537: LD_INT 54
 539: PPUSH
 540: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 544: LD_VAR 0 1
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: LD_EXP 1
 557: PPUSH
 558: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 562: LD_VAR 0 1
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 1
 575: PPUSH
 576: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 580: LD_EXP 4
 584: PPUSH
 585: LD_STRING D1a-Lisa-2
 587: PPUSH
 588: CALL_OW 88
// end ; if Cyrus and not Bobby then
 592: LD_EXP 3
 596: PUSH
 597: LD_EXP 2
 601: NOT
 602: AND
 603: IFFALSE 808
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 605: LD_EXP 3
 609: PPUSH
 610: LD_INT 43
 612: PPUSH
 613: LD_INT 72
 615: PPUSH
 616: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 46
 627: PPUSH
 628: LD_INT 73
 630: PPUSH
 631: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 635: LD_EXP 3
 639: PPUSH
 640: LD_STRING D1a-Cyrus-1
 642: PPUSH
 643: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 647: LD_EXP 1
 651: PPUSH
 652: LD_STRING D1a-JMM-1
 654: PPUSH
 655: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 659: LD_EXP 3
 663: PPUSH
 664: LD_INT 37
 666: PPUSH
 667: LD_INT 66
 669: PPUSH
 670: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 674: LD_EXP 1
 678: PPUSH
 679: LD_INT 38
 681: PPUSH
 682: LD_INT 64
 684: PPUSH
 685: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 689: LD_EXP 3
 693: PPUSH
 694: LD_STRING D1a-Cyrus-2
 696: PPUSH
 697: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 701: LD_EXP 3
 705: PPUSH
 706: LD_INT 35
 708: PPUSH
 709: LD_INT 62
 711: PPUSH
 712: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 716: LD_EXP 1
 720: PPUSH
 721: LD_INT 35
 723: PPUSH
 724: LD_INT 60
 726: PPUSH
 727: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 731: LD_EXP 1
 735: PPUSH
 736: LD_STRING D1a-JMM-2
 738: PPUSH
 739: CALL_OW 88
// ComWalk ( Lisa ) ;
 743: LD_EXP 4
 747: PPUSH
 748: CALL_OW 138
// wait ( 0 0$1 ) ;
 752: LD_INT 35
 754: PPUSH
 755: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 759: LD_EXP 4
 763: PPUSH
 764: LD_EXP 1
 768: PPUSH
 769: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 773: LD_EXP 4
 777: PPUSH
 778: LD_STRING D1a-Lisa-2
 780: PPUSH
 781: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 785: LD_EXP 1
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PPUSH
 799: LD_EXP 4
 803: PPUSH
 804: CALL_OW 119
// end ; if not Cyrus and Bobby then
 808: LD_EXP 3
 812: NOT
 813: PUSH
 814: LD_EXP 2
 818: AND
 819: IFFALSE 1098
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 821: LD_EXP 2
 825: PPUSH
 826: LD_INT 44
 828: PPUSH
 829: LD_INT 70
 831: PPUSH
 832: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 836: LD_EXP 1
 840: PPUSH
 841: LD_INT 46
 843: PPUSH
 844: LD_INT 73
 846: PPUSH
 847: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 851: LD_EXP 2
 855: PPUSH
 856: LD_STRING D1a-Bobby-1
 858: PPUSH
 859: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 863: LD_EXP 1
 867: PPUSH
 868: LD_STRING D1a-JMM-1
 870: PPUSH
 871: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 875: LD_EXP 2
 879: PPUSH
 880: LD_INT 37
 882: PPUSH
 883: LD_INT 66
 885: PPUSH
 886: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 890: LD_EXP 1
 894: PPUSH
 895: LD_INT 38
 897: PPUSH
 898: LD_INT 64
 900: PPUSH
 901: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 905: LD_EXP 2
 909: PPUSH
 910: LD_STRING D1a-Bobby-2
 912: PPUSH
 913: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 917: LD_EXP 2
 921: PPUSH
 922: LD_INT 35
 924: PPUSH
 925: LD_INT 62
 927: PPUSH
 928: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 932: LD_EXP 1
 936: PPUSH
 937: LD_INT 35
 939: PPUSH
 940: LD_INT 60
 942: PPUSH
 943: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 947: LD_EXP 1
 951: PPUSH
 952: LD_STRING D1a-JMM-2
 954: PPUSH
 955: CALL_OW 88
// ComWalk ( Lisa ) ;
 959: LD_EXP 4
 963: PPUSH
 964: CALL_OW 138
// wait ( 0 0$1 ) ;
 968: LD_INT 35
 970: PPUSH
 971: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 975: LD_EXP 4
 979: PPUSH
 980: LD_EXP 1
 984: PPUSH
 985: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 989: LD_EXP 1
 993: PUSH
 994: LD_EXP 3
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PPUSH
1003: LD_EXP 4
1007: PPUSH
1008: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1012: LD_VAR 0 1
1016: PUSH
1017: LD_INT 1
1019: ARRAY
1020: PPUSH
1021: LD_INT 33
1023: PPUSH
1024: LD_INT 55
1026: PPUSH
1027: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1031: LD_VAR 0 1
1035: PUSH
1036: LD_INT 2
1038: ARRAY
1039: PPUSH
1040: LD_INT 30
1042: PPUSH
1043: LD_INT 54
1045: PPUSH
1046: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1050: LD_VAR 0 1
1054: PUSH
1055: LD_INT 1
1057: ARRAY
1058: PPUSH
1059: LD_EXP 1
1063: PPUSH
1064: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1068: LD_VAR 0 1
1072: PUSH
1073: LD_INT 2
1075: ARRAY
1076: PPUSH
1077: LD_EXP 1
1081: PPUSH
1082: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1086: LD_EXP 4
1090: PPUSH
1091: LD_STRING D1a-Lisa-2
1093: PPUSH
1094: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1098: LD_EXP 3
1102: NOT
1103: PUSH
1104: LD_EXP 2
1108: NOT
1109: AND
1110: IFFALSE 1324
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1112: LD_EXP 1
1116: PPUSH
1117: LD_INT 37
1119: PPUSH
1120: LD_INT 66
1122: PPUSH
1123: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1127: LD_EXP 1
1131: PPUSH
1132: LD_STRING D1b-JMM-1
1134: PPUSH
1135: CALL_OW 88
// ComCrawl ( JMM ) ;
1139: LD_EXP 1
1143: PPUSH
1144: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1148: LD_EXP 1
1152: PPUSH
1153: LD_INT 35
1155: PPUSH
1156: LD_INT 60
1158: PPUSH
1159: CALL_OW 171
// wait ( 0 0$8 ) ;
1163: LD_INT 280
1165: PPUSH
1166: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_STRING D1b-JMM-1a
1177: PPUSH
1178: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1182: LD_EXP 1
1186: PUSH
1187: LD_EXP 4
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PPUSH
1196: CALL_OW 138
// wait ( 0 0$1 ) ;
1200: LD_INT 35
1202: PPUSH
1203: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1207: LD_EXP 4
1211: PPUSH
1212: LD_EXP 1
1216: PPUSH
1217: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1221: LD_EXP 1
1225: PUSH
1226: EMPTY
1227: LIST
1228: PPUSH
1229: LD_EXP 4
1233: PPUSH
1234: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1238: LD_VAR 0 1
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: LD_INT 33
1249: PPUSH
1250: LD_INT 55
1252: PPUSH
1253: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1257: LD_VAR 0 1
1261: PUSH
1262: LD_INT 2
1264: ARRAY
1265: PPUSH
1266: LD_INT 30
1268: PPUSH
1269: LD_INT 54
1271: PPUSH
1272: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1276: LD_VAR 0 1
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_EXP 1
1289: PPUSH
1290: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1294: LD_VAR 0 1
1298: PUSH
1299: LD_INT 2
1301: ARRAY
1302: PPUSH
1303: LD_EXP 1
1307: PPUSH
1308: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1312: LD_EXP 4
1316: PPUSH
1317: LD_STRING D1b-Lisa-1
1319: PPUSH
1320: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1324: LD_EXP 1
1328: PPUSH
1329: LD_STRING D1-JMM-1
1331: PPUSH
1332: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1336: LD_EXP 4
1340: PPUSH
1341: LD_STRING D1-Lisa-1
1343: PPUSH
1344: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1348: LD_EXP 1
1352: PPUSH
1353: LD_STRING D1-JMM-2
1355: PPUSH
1356: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1360: LD_EXP 9
1364: PPUSH
1365: LD_STRING D1-Pow-2
1367: PPUSH
1368: CALL_OW 94
// if Cyrus then
1372: LD_EXP 3
1376: IFFALSE 1402
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1378: LD_EXP 3
1382: PPUSH
1383: LD_STRING D1-Cyrus-2
1385: PPUSH
1386: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-3
1397: PPUSH
1398: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1402: LD_EXP 9
1406: PPUSH
1407: LD_STRING D1-Pow-3
1409: PPUSH
1410: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1414: LD_EXP 1
1418: PPUSH
1419: LD_STRING D1-JMM-4
1421: PPUSH
1422: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1426: LD_EXP 9
1430: PPUSH
1431: LD_STRING D1-Pow-4
1433: PPUSH
1434: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1438: LD_EXP 9
1442: PPUSH
1443: LD_STRING D1-Pow-4a
1445: PPUSH
1446: CALL_OW 94
// if Cyrus then
1450: LD_EXP 3
1454: IFFALSE 1468
// Say ( Cyrus , D1-Cyrus-4 ) ;
1456: LD_EXP 3
1460: PPUSH
1461: LD_STRING D1-Cyrus-4
1463: PPUSH
1464: CALL_OW 88
// if Bobby then
1468: LD_EXP 2
1472: IFFALSE 1510
// begin Say ( Bobby , D1-Bobby-4 ) ;
1474: LD_EXP 2
1478: PPUSH
1479: LD_STRING D1-Bobby-4
1481: PPUSH
1482: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1486: LD_EXP 4
1490: PPUSH
1491: LD_STRING D1-Lisa-4
1493: PPUSH
1494: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1498: LD_EXP 1
1502: PPUSH
1503: LD_STRING D1-JMM-5
1505: PPUSH
1506: CALL_OW 88
// end ; InGameOff ;
1510: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1514: LD_INT 22
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 69
1528: PUSH
1529: LD_EXP 6
1533: PUSH
1534: LD_EXP 7
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: DIFF
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1551: LD_STRING M1
1553: PPUSH
1554: CALL_OW 337
// SaveForQuickRestart ;
1558: CALL_OW 22
// end ;
1562: PPOPN 1
1564: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1565: LD_INT 7
1567: PPUSH
1568: LD_INT 22
1570: PUSH
1571: LD_INT 1
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 70
1582: PUSH
1583: LD_INT 0
1585: GREATER
1586: IFFALSE 1956
1588: GO 1590
1590: DISABLE
// begin InGameOn ;
1591: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1595: LD_INT 22
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 21
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PPUSH
1619: CALL_OW 69
1623: PPUSH
1624: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1628: LD_INT 24
1630: PPUSH
1631: LD_INT 32
1633: PPUSH
1634: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1638: LD_EXP 5
1642: PPUSH
1643: LD_INT 4
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 4
1660: PPUSH
1661: CALL_OW 336
// wait ( 0 0$1 ) ;
1665: LD_INT 35
1667: PPUSH
1668: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1672: LD_EXP 5
1676: PPUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_INT 38
1682: PPUSH
1683: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1687: LD_EXP 5
1691: PPUSH
1692: LD_EXP 1
1696: PPUSH
1697: CALL_OW 179
// wait ( 0 0$1 ) ;
1701: LD_INT 35
1703: PPUSH
1704: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1708: LD_EXP 5
1712: PPUSH
1713: LD_STRING D2a-Khat-1
1715: PPUSH
1716: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1720: LD_EXP 1
1724: PPUSH
1725: LD_STRING D2a-JMM-1
1727: PPUSH
1728: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1732: LD_EXP 5
1736: PPUSH
1737: LD_STRING D2a-Khat-2
1739: PPUSH
1740: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1744: LD_EXP 1
1748: PPUSH
1749: LD_STRING D2a-JMM-2
1751: PPUSH
1752: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1756: LD_EXP 5
1760: PPUSH
1761: LD_STRING D2a-Khat-3
1763: PPUSH
1764: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1768: LD_EXP 1
1772: PPUSH
1773: LD_STRING D2a-JMM-3
1775: PPUSH
1776: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1780: LD_EXP 5
1784: PPUSH
1785: LD_STRING D2a-Khat-4
1787: PPUSH
1788: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1792: LD_EXP 1
1796: PPUSH
1797: LD_STRING D2a-JMM-4
1799: PPUSH
1800: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1804: LD_EXP 5
1808: PPUSH
1809: LD_STRING D2a-Khat-5
1811: PPUSH
1812: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1816: LD_EXP 1
1820: PPUSH
1821: LD_STRING D2a-JMM-5
1823: PPUSH
1824: CALL_OW 88
// InGameOff ;
1828: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1832: LD_INT 22
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 21
1844: PUSH
1845: LD_INT 1
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 3
1854: PUSH
1855: LD_INT 24
1857: PUSH
1858: LD_INT 800
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: LIST
1873: PPUSH
1874: CALL_OW 69
1878: PUSH
1879: LD_INT 0
1881: GREATER
1882: IFFALSE 1956
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1884: LD_EXP 5
1888: PPUSH
1889: LD_INT 22
1891: PUSH
1892: LD_INT 1
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 21
1901: PUSH
1902: LD_INT 1
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PUSH
1909: LD_INT 3
1911: PUSH
1912: LD_INT 24
1914: PUSH
1915: LD_INT 1000
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_INT 1
1938: ARRAY
1939: PPUSH
1940: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1944: LD_EXP 5
1948: PPUSH
1949: LD_STRING D2b-Khat-1
1951: PPUSH
1952: CALL_OW 88
// end ; end ;
1956: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
1957: LD_INT 15
1959: PPUSH
1960: LD_INT 22
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PPUSH
1970: CALL_OW 70
1974: PUSH
1975: LD_INT 0
1977: GREATER
1978: IFFALSE 3138
1980: GO 1982
1982: DISABLE
1983: LD_INT 0
1985: PPUSH
1986: PPUSH
1987: PPUSH
1988: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
1989: LD_ADDR_VAR 0 2
1993: PUSH
1994: LD_INT 999
1996: PUSH
1997: LD_INT 999
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2007: LD_ADDR_VAR 0 4
2011: PUSH
2012: LD_INT 22
2014: PUSH
2015: LD_INT 1
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 21
2024: PUSH
2025: LD_INT 1
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PPUSH
2036: CALL_OW 69
2040: PUSH
2041: LD_EXP 1
2045: PUSH
2046: LD_EXP 2
2050: PUSH
2051: LD_EXP 3
2055: PUSH
2056: LD_EXP 4
2060: PUSH
2061: LD_EXP 5
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: DIFF
2073: ST_TO_ADDR
// PrepareDeadSoldiers ;
<<<<<<< HEAD
2074: CALL 11120 0 0
=======
2066: CALL 11087 0 0
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
// spotCorpses = 1 ;
2078: LD_ADDR_EXP 32
2082: PUSH
2083: LD_INT 1
2085: ST_TO_ADDR
// InGameOn ;
2086: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2090: LD_INT 23
2092: PPUSH
2093: LD_INT 12
2095: PPUSH
2096: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2100: LD_ADDR_VAR 0 3
2104: PUSH
2105: LD_VAR 0 2
2109: PUSH
2110: LD_INT 1
2112: ARRAY
2113: PUSH
2114: LD_INT 2
2116: ARRAY
2117: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2118: LD_ADDR_VAR 0 1
2122: PUSH
2123: LD_INT 22
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: LD_INT 21
2135: PUSH
2136: LD_INT 1
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: PPUSH
2147: CALL_OW 69
2151: PUSH
2152: LD_EXP 1
2156: PUSH
2157: LD_EXP 5
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: DIFF
2166: PUSH
2167: FOR_IN
2168: IFFALSE 2219
// if IsOK ( i ) then
2170: LD_VAR 0 1
2174: PPUSH
2175: CALL_OW 302
2179: IFFALSE 2217
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_VAR 0 2
2190: PUSH
2191: LD_VAR 0 1
2195: PUSH
2196: LD_VAR 0 1
2200: PPUSH
2201: LD_INT 16
2203: PPUSH
2204: CALL_OW 299
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: PUSH
2213: EMPTY
2214: LIST
2215: ADD
2216: ST_TO_ADDR
2217: GO 2167
2219: POP
2220: POP
// for i = 2 to distanceTab do
2221: LD_ADDR_VAR 0 1
2225: PUSH
2226: DOUBLE
2227: LD_INT 2
2229: DEC
2230: ST_TO_ADDR
2231: LD_VAR 0 2
2235: PUSH
2236: FOR_TO
2237: IFFALSE 2283
// if distanceTab [ i ] [ 2 ] < min then
2239: LD_VAR 0 2
2243: PUSH
2244: LD_VAR 0 1
2248: ARRAY
2249: PUSH
2250: LD_INT 2
2252: ARRAY
2253: PUSH
2254: LD_VAR 0 3
2258: LESS
2259: IFFALSE 2281
// min = distanceTab [ i ] [ 2 ] ;
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PUSH
2277: LD_INT 2
2279: ARRAY
2280: ST_TO_ADDR
2281: GO 2236
2283: POP
2284: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2285: LD_ADDR_VAR 0 1
2289: PUSH
2290: LD_INT 22
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 21
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 69
2318: PUSH
2319: LD_EXP 1
2323: PUSH
2324: EMPTY
2325: LIST
2326: DIFF
2327: PUSH
2328: FOR_IN
2329: IFFALSE 2399
// begin ComMoveToArea ( i , DeadCutscene ) ;
2331: LD_VAR 0 1
2335: PPUSH
2336: LD_INT 28
2338: PPUSH
2339: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2343: LD_EXP 1
2347: PPUSH
2348: LD_INT 30
2350: PPUSH
2351: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2355: LD_VAR 0 1
2359: PPUSH
2360: LD_INT 23
2362: PPUSH
2363: LD_INT 11
2365: PPUSH
2366: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2370: LD_EXP 1
2374: PPUSH
2375: LD_INT 23
2377: PPUSH
2378: LD_INT 11
2380: PPUSH
2381: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2385: LD_EXP 34
2389: PPUSH
2390: LD_INT 250
2392: PPUSH
2393: CALL_OW 234
// end ;
2397: GO 2328
2399: POP
2400: POP
// for i = 2 to distanceTab do
2401: LD_ADDR_VAR 0 1
2405: PUSH
2406: DOUBLE
2407: LD_INT 2
2409: DEC
2410: ST_TO_ADDR
2411: LD_VAR 0 2
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2803
// begin if distanceTab [ i ] [ 2 ] = min then
2419: LD_VAR 0 2
2423: PUSH
2424: LD_VAR 0 1
2428: ARRAY
2429: PUSH
2430: LD_INT 2
2432: ARRAY
2433: PUSH
2434: LD_VAR 0 3
2438: EQUAL
2439: IFFALSE 2801
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2441: LD_VAR 0 2
2445: PUSH
2446: LD_VAR 0 1
2450: ARRAY
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: PUSH
2456: LD_EXP 2
2460: EQUAL
2461: IFFALSE 2475
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2463: LD_EXP 2
2467: PPUSH
2468: LD_STRING DCorpses-Bobby-1
2470: PPUSH
2471: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2475: LD_VAR 0 2
2479: PUSH
2480: LD_VAR 0 1
2484: ARRAY
2485: PUSH
2486: LD_INT 1
2488: ARRAY
2489: PUSH
2490: LD_EXP 3
2494: EQUAL
2495: IFFALSE 2509
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2497: LD_EXP 3
2501: PPUSH
2502: LD_STRING DCorpses-Cyrus-1
2504: PPUSH
2505: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2509: LD_VAR 0 2
2513: PUSH
2514: LD_VAR 0 1
2518: ARRAY
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: PUSH
2524: LD_EXP 4
2528: EQUAL
2529: IFFALSE 2543
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2531: LD_EXP 4
2535: PPUSH
2536: LD_STRING DCorpses-Lisa-1
2538: PPUSH
2539: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2543: LD_VAR 0 2
2547: PUSH
2548: LD_VAR 0 1
2552: ARRAY
2553: PUSH
2554: LD_INT 1
2556: ARRAY
2557: PUSH
2558: LD_VAR 0 4
2562: PUSH
2563: LD_INT 1
2565: ARRAY
2566: EQUAL
2567: PUSH
2568: LD_VAR 0 4
2572: PUSH
2573: LD_INT 1
2575: ARRAY
2576: PPUSH
2577: CALL_OW 258
2581: PUSH
2582: LD_INT 1
2584: EQUAL
2585: AND
2586: IFFALSE 2604
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2588: LD_VAR 0 4
2592: PUSH
2593: LD_INT 1
2595: ARRAY
2596: PPUSH
2597: LD_STRING DCorpses-Sol1-1
2599: PPUSH
2600: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_VAR 0 1
2613: ARRAY
2614: PUSH
2615: LD_INT 1
2617: ARRAY
2618: PUSH
2619: LD_VAR 0 4
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: EQUAL
2628: PUSH
2629: LD_VAR 0 4
2633: PUSH
2634: LD_INT 1
2636: ARRAY
2637: PPUSH
2638: CALL_OW 258
2642: PUSH
2643: LD_INT 2
2645: EQUAL
2646: AND
2647: IFFALSE 2665
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2649: LD_VAR 0 4
2653: PUSH
2654: LD_INT 1
2656: ARRAY
2657: PPUSH
2658: LD_STRING DCorpses-FSol1-1
2660: PPUSH
2661: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2665: LD_VAR 0 2
2669: PUSH
2670: LD_VAR 0 1
2674: ARRAY
2675: PUSH
2676: LD_INT 1
2678: ARRAY
2679: PUSH
2680: LD_VAR 0 4
2684: PUSH
2685: LD_INT 2
2687: ARRAY
2688: EQUAL
2689: PUSH
2690: LD_VAR 0 4
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: CALL_OW 258
2703: PUSH
2704: LD_INT 1
2706: EQUAL
2707: AND
2708: IFFALSE 2726
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2710: LD_VAR 0 4
2714: PUSH
2715: LD_INT 2
2717: ARRAY
2718: PPUSH
2719: LD_STRING DCorpses-Sol1-1
2721: PPUSH
2722: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2726: LD_VAR 0 2
2730: PUSH
2731: LD_VAR 0 1
2735: ARRAY
2736: PUSH
2737: LD_INT 1
2739: ARRAY
2740: PUSH
2741: LD_VAR 0 4
2745: PUSH
2746: LD_INT 2
2748: ARRAY
2749: EQUAL
2750: PUSH
2751: LD_VAR 0 4
2755: PUSH
2756: LD_INT 2
2758: ARRAY
2759: PPUSH
2760: CALL_OW 258
2764: PUSH
2765: LD_INT 2
2767: EQUAL
2768: AND
2769: IFFALSE 2787
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2771: LD_VAR 0 4
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_STRING DCorpses-FSol1-1
2782: PPUSH
2783: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2787: LD_EXP 34
2791: PPUSH
2792: LD_INT 150
2794: PPUSH
2795: CALL_OW 234
// break ;
2799: GO 2803
// end ; end ;
2801: GO 2416
2803: POP
2804: POP
// repeat wait ( 0 0$1 ) ;
2805: LD_INT 35
2807: PPUSH
2808: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2812: LD_ADDR_VAR 0 1
2816: PUSH
2817: LD_INT 22
2819: PUSH
2820: LD_INT 1
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 21
2829: PUSH
2830: LD_INT 1
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PPUSH
2841: CALL_OW 69
2845: PUSH
2846: LD_EXP 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: DIFF
2854: PUSH
2855: FOR_IN
2856: IFFALSE 2926
// begin ComMoveToArea ( i , DeadCutscene ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: LD_INT 28
2865: PPUSH
2866: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2870: LD_EXP 1
2874: PPUSH
2875: LD_INT 30
2877: PPUSH
2878: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2882: LD_VAR 0 1
2886: PPUSH
2887: LD_INT 23
2889: PPUSH
2890: LD_INT 11
2892: PPUSH
2893: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2897: LD_EXP 1
2901: PPUSH
2902: LD_INT 23
2904: PPUSH
2905: LD_INT 11
2907: PPUSH
2908: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2912: LD_EXP 34
2916: PPUSH
2917: LD_INT 250
2919: PPUSH
2920: CALL_OW 234
// end ;
2924: GO 2855
2926: POP
2927: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2928: LD_EXP 1
2932: PPUSH
2933: LD_INT 30
2935: PPUSH
2936: CALL_OW 308
2940: IFFALSE 2805
// wait ( 0 0$3 ) ;
2942: LD_INT 105
2944: PPUSH
2945: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2949: LD_EXP 1
2953: PPUSH
2954: LD_STRING DCorpses-JMM-1
2956: PPUSH
2957: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2961: LD_EXP 34
2965: PPUSH
2966: LD_INT 150
2968: PPUSH
2969: CALL_OW 234
// if IsOK ( Khatam ) then
2973: LD_EXP 5
2977: PPUSH
2978: CALL_OW 302
2982: IFFALSE 3122
// begin repeat wait ( 0 0$1 ) ;
2984: LD_INT 35
2986: PPUSH
2987: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
2991: LD_EXP 5
2995: PPUSH
2996: LD_EXP 34
3000: PPUSH
3001: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3005: LD_EXP 5
3009: PPUSH
3010: LD_EXP 34
3014: PPUSH
3015: CALL_OW 296
3019: PUSH
3020: LD_INT 2
3022: LESS
3023: IFFALSE 2984
// spotCorpses = 0 ;
3025: LD_ADDR_EXP 32
3029: PUSH
3030: LD_INT 0
3032: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3033: LD_EXP 34
3037: PPUSH
3038: LD_INT 10
3040: PPUSH
3041: CALL_OW 234
// wait ( 0 0$3 ) ;
3045: LD_INT 105
3047: PPUSH
3048: CALL_OW 67
// SetLives ( DyingSold , 0 ) ;
3052: LD_EXP 34
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL_OW 234
// wait ( 0 0$1 ) ;
3064: LD_INT 35
3066: PPUSH
3067: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3071: LD_EXP 1
3075: PUSH
3076: LD_EXP 5
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PPUSH
3085: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3089: LD_EXP 5
3093: PPUSH
3094: LD_EXP 1
3098: PPUSH
3099: CALL_OW 119
// wait ( 0 0$1 ) ;
3103: LD_INT 35
3105: PPUSH
3106: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3110: LD_EXP 5
3114: PPUSH
3115: LD_STRING DCorpses-Khat-1
3117: PPUSH
3118: CALL_OW 88
// end ; InGameOff ;
3122: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3126: LD_EXP 1
3130: PPUSH
3131: LD_STRING DCorpses-JMM-2
3133: PPUSH
3134: CALL_OW 88
// end ;
3138: PPOPN 4
3140: END
// every 0 0$1 trigger spotCorpses = 1 do
3141: LD_EXP 32
3145: PUSH
3146: LD_INT 1
3148: EQUAL
3149: IFFALSE 3167
3151: GO 3153
3153: DISABLE
// begin enable ;
3154: ENABLE
// SetLives ( DyingSold , 150 ) ;
3155: LD_EXP 34
3159: PPUSH
3160: LD_INT 150
3162: PPUSH
3163: CALL_OW 234
// end ;
3167: END
// every 1 trigger FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do var i ;
3168: LD_INT 8
3170: PPUSH
3171: LD_INT 22
3173: PUSH
3174: LD_INT 1
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: PPUSH
3181: CALL_OW 70
3185: PUSH
3186: LD_INT 0
3188: GREATER
3189: PUSH
3190: LD_INT 1
3192: PPUSH
3193: CALL_OW 255
3197: PUSH
3198: LD_INT 1
3200: EQUAL
3201: NOT
3202: AND
3203: PUSH
3204: LD_INT 10
3206: PPUSH
3207: CALL_OW 255
3211: PUSH
3212: LD_INT 1
3214: EQUAL
3215: NOT
3216: AND
3217: IFFALSE 3385
3219: GO 3221
3221: DISABLE
3222: LD_INT 0
3224: PPUSH
// begin InGameOn ;
3225: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3229: LD_EXP 7
3233: PPUSH
3234: LD_INT 250
3236: PPUSH
3237: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3241: LD_INT 3
3243: PPUSH
3244: LD_INT 4
3246: PPUSH
3247: LD_INT 2
3249: PPUSH
3250: LD_INT 1
3252: PPUSH
3253: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3257: LD_EXP 6
3261: PUSH
3262: LD_EXP 7
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PPUSH
3271: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3275: LD_ADDR_VAR 0 1
3279: PUSH
3280: LD_INT 9
3282: PPUSH
3283: LD_INT 22
3285: PUSH
3286: LD_INT 3
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: PPUSH
3293: CALL_OW 70
3297: PUSH
3298: FOR_IN
3299: IFFALSE 3312
// ComFree ( i ) ;
3301: LD_VAR 0 1
3305: PPUSH
3306: CALL_OW 139
3310: GO 3298
3312: POP
3313: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3314: LD_ADDR_VAR 0 1
3318: PUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 4
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 69
3333: PUSH
3334: FOR_IN
3335: IFFALSE 3348
// ComFree ( i ) ;
3337: LD_VAR 0 1
3341: PPUSH
3342: CALL_OW 139
3346: GO 3334
3348: POP
3349: POP
// wait ( 0 0$1 ) ;
3350: LD_INT 35
3352: PPUSH
3353: CALL_OW 67
// InGameOff ;
3357: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3361: LD_EXP 6
3365: PPUSH
3366: LD_STRING DF-Sol1-1
3368: PPUSH
3369: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3373: LD_EXP 1
3377: PPUSH
3378: LD_STRING DF-JMM-1
3380: PPUSH
3381: CALL_OW 88
// end ;
3385: PPOPN 1
3387: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do
3388: LD_INT 19
3390: PPUSH
3391: LD_INT 22
3393: PUSH
3394: LD_INT 3
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: PPUSH
3401: CALL_OW 70
3405: PUSH
3406: LD_INT 0
3408: EQUAL
3409: PUSH
3410: LD_INT 1
3412: PPUSH
3413: CALL_OW 255
3417: PUSH
3418: LD_INT 1
3420: EQUAL
3421: NOT
3422: AND
3423: PUSH
3424: LD_INT 10
3426: PPUSH
3427: CALL_OW 255
3431: PUSH
3432: LD_INT 1
3434: EQUAL
3435: NOT
3436: AND
3437: IFFALSE 3550
3439: GO 3441
3441: DISABLE
// begin if not IsDead ( Brian ) then
3442: LD_EXP 6
3446: PPUSH
3447: CALL_OW 301
3451: NOT
3452: IFFALSE 3466
// SetSide ( Brian , 1 ) ;
3454: LD_EXP 6
3458: PPUSH
3459: LD_INT 1
3461: PPUSH
3462: CALL_OW 235
// if not IsDead ( Jerry ) then
3466: LD_EXP 7
3470: PPUSH
3471: CALL_OW 301
3475: NOT
3476: IFFALSE 3490
// SetSide ( Jerry , 1 ) ;
3478: LD_EXP 7
3482: PPUSH
3483: LD_INT 1
3485: PPUSH
3486: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3490: LD_INT 22
3492: PUSH
3493: LD_INT 1
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 25
3502: PUSH
3503: LD_INT 4
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PPUSH
3514: CALL_OW 69
3518: PUSH
3519: LD_INT 0
3521: GREATER
3522: IFFALSE 3538
// begin Say ( JMM , DFa-JMM-1 ) ;
3524: LD_EXP 1
3528: PPUSH
3529: LD_STRING DFa-JMM-1
3531: PPUSH
3532: CALL_OW 88
// end else
3536: GO 3550
// begin Say ( JMM , DFa-JMM-1a ) ;
3538: LD_EXP 1
3542: PPUSH
3543: LD_STRING DFa-JMM-1a
3545: PPUSH
3546: CALL_OW 88
// end ; end ;
3550: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3551: LD_INT 19
3553: PPUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 3
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 70
3568: PUSH
3569: LD_INT 0
3571: EQUAL
3572: PUSH
3573: LD_EXP 6
3577: PPUSH
3578: CALL_OW 302
3582: NOT
3583: AND
3584: IFFALSE 3661
3586: GO 3588
3588: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3589: LD_INT 35
3591: PPUSH
3592: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3596: LD_EXP 6
3600: PPUSH
3601: CALL_OW 256
3605: PUSH
3606: LD_INT 250
3608: GREATER
3609: IFFALSE 3589
// Say ( Brian , DFb-Sol1-1 ) ;
3611: LD_EXP 6
3615: PPUSH
3616: LD_STRING DFb-Sol1-1
3618: PPUSH
3619: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3623: LD_EXP 6
3627: PPUSH
3628: LD_INT 78
3630: PPUSH
3631: LD_INT 74
3633: PPUSH
3634: CALL_OW 111
// if IsDead ( Jerry ) then
3638: LD_EXP 7
3642: PPUSH
3643: CALL_OW 301
3647: IFFALSE 3661
// Say ( Brian , DFb-Sol1-1a ) end ;
3649: LD_EXP 6
3653: PPUSH
3654: LD_STRING DFb-Sol1-1a
3656: PPUSH
3657: CALL_OW 88
3661: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3662: LD_INT 22
3664: PUSH
3665: LD_INT 1
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 21
3674: PUSH
3675: LD_INT 2
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: PUSH
3691: LD_INT 0
3693: EQUAL
3694: IFFALSE 3782
3696: GO 3698
3698: DISABLE
3699: LD_INT 0
3701: PPUSH
// begin enable ;
3702: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3703: LD_ADDR_VAR 0 1
3707: PUSH
3708: LD_INT 22
3710: PUSH
3711: LD_INT 3
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 21
3720: PUSH
3721: LD_INT 3
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: PUSH
3728: LD_INT 30
3730: PUSH
3731: LD_INT 31
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: LIST
3742: PPUSH
3743: CALL_OW 69
3747: PUSH
3748: FOR_IN
3749: IFFALSE 3780
// begin if See ( 1 , i ) then
3751: LD_INT 1
3753: PPUSH
3754: LD_VAR 0 1
3758: PPUSH
3759: CALL_OW 292
3763: IFFALSE 3778
// begin disable ;
3765: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3766: LD_EXP 1
3770: PPUSH
3771: LD_STRING DX1-JMM-1
3773: PPUSH
3774: CALL_OW 88
// end ; end ;
3778: GO 3748
3780: POP
3781: POP
// end ;
3782: PPOPN 1
3784: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3785: LD_INT 1
3787: PPUSH
3788: LD_INT 11
3790: PPUSH
3791: CALL_OW 294
3795: IFFALSE 4158
3797: GO 3799
3799: DISABLE
3800: LD_INT 0
3802: PPUSH
3803: PPUSH
// begin DialogueOn ;
3804: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3808: LD_INT 11
3810: PPUSH
3811: LD_INT 22
3813: PUSH
3814: LD_INT 3
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: LD_INT 21
3823: PUSH
3824: LD_INT 1
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PPUSH
3835: CALL_OW 70
3839: PUSH
3840: LD_INT 1
3842: ARRAY
3843: PPUSH
3844: LD_STRING DX3-Rus1-1
3846: PPUSH
3847: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3851: LD_EXP 1
3855: PPUSH
3856: LD_STRING DX3-JMM-1
3858: PPUSH
3859: CALL_OW 88
// DialogueOff ;
3863: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3867: LD_ADDR_VAR 0 1
3871: PUSH
3872: LD_INT 11
3874: PPUSH
3875: LD_INT 22
3877: PUSH
3878: LD_INT 3
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 1
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 70
3903: PUSH
3904: FOR_IN
3905: IFFALSE 3925
// southBaseDefenders = southBaseDefenders ^ i ;
3907: LD_ADDR_EXP 25
3911: PUSH
3912: LD_EXP 25
3916: PUSH
3917: LD_VAR 0 1
3921: ADD
3922: ST_TO_ADDR
3923: GO 3904
3925: POP
3926: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
3927: LD_INT 455
3929: PUSH
3930: LD_INT 420
3932: PUSH
3933: LD_INT 315
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: LIST
3940: PUSH
3941: LD_OWVAR 67
3945: ARRAY
3946: PPUSH
3947: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3951: LD_INT 35
3953: PPUSH
3954: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
3958: LD_ADDR_VAR 0 1
3962: PUSH
3963: LD_INT 22
3965: PUSH
3966: LD_INT 3
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PUSH
3973: LD_INT 21
3975: PUSH
3976: LD_INT 2
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: PUSH
3983: LD_INT 58
3985: PUSH
3986: EMPTY
3987: LIST
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: LIST
3993: PPUSH
3994: CALL_OW 69
3998: PUSH
3999: FOR_IN
4000: IFFALSE 4070
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
4002: LD_ADDR_VAR 0 2
4006: PUSH
4007: LD_INT 22
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PUSH
4017: LD_INT 21
4019: PUSH
4020: LD_INT 1
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: PUSH
4027: LD_INT 25
4029: PUSH
4030: LD_INT 3
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: LIST
4041: PPUSH
4042: CALL_OW 69
4046: PUSH
4047: FOR_IN
4048: IFFALSE 4066
// begin ComEnterUnit ( j , i ) ;
4050: LD_VAR 0 2
4054: PPUSH
4055: LD_VAR 0 1
4059: PPUSH
4060: CALL_OW 120
// end ;
4064: GO 4047
4066: POP
4067: POP
// end ;
4068: GO 3999
4070: POP
4071: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4072: LD_INT 22
4074: PUSH
4075: LD_INT 3
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 21
4084: PUSH
4085: LD_INT 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 58
4094: PUSH
4095: EMPTY
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: PPUSH
4103: CALL_OW 69
4107: PUSH
4108: LD_INT 0
4110: EQUAL
4111: PUSH
4112: LD_INT 22
4114: PUSH
4115: LD_INT 3
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_INT 21
4124: PUSH
4125: LD_INT 1
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: PUSH
4132: LD_INT 25
4134: PUSH
4135: LD_INT 3
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 69
4151: PUSH
4152: LD_INT 0
4154: EQUAL
4155: OR
4156: IFFALSE 3951
// end ;
4158: PPOPN 2
4160: END
// every 0 0$1 do var i , tmp ;
4161: GO 4163
4163: DISABLE
4164: LD_INT 0
4166: PPUSH
4167: PPUSH
// begin enable ;
4168: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4169: LD_ADDR_VAR 0 2
4173: PUSH
4174: LD_INT 22
4176: PUSH
4177: LD_INT 1
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PUSH
4184: LD_INT 21
4186: PUSH
4187: LD_INT 1
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PPUSH
4198: CALL_OW 69
4202: ST_TO_ADDR
// for i in tmp do
4203: LD_ADDR_VAR 0 1
4207: PUSH
4208: LD_VAR 0 2
4212: PUSH
4213: FOR_IN
4214: IFFALSE 4336
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4216: LD_VAR 0 1
4220: PPUSH
4221: LD_INT 5
4223: PPUSH
4224: CALL_OW 296
4228: PUSH
4229: LD_INT 4
4231: LESS
4232: PUSH
4233: LD_VAR 0 1
4237: PPUSH
4238: LD_INT 4
4240: PPUSH
4241: CALL_OW 296
4245: PUSH
4246: LD_INT 4
4248: LESS
4249: OR
4250: IFFALSE 4334
// begin disable ;
4252: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4253: LD_INT 5
4255: PUSH
4256: LD_INT 4
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PPUSH
4263: CALL_OW 85
// if IsOK ( Bobby ) then
4267: LD_EXP 2
4271: PPUSH
4272: CALL_OW 302
4276: IFFALSE 4313
// begin DialogueOn ;
4278: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4282: LD_EXP 2
4286: PPUSH
4287: LD_STRING DX2-Bobby-1
4289: PPUSH
4290: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4294: LD_EXP 1
4298: PPUSH
4299: LD_STRING DX2-JMM-1a
4301: PPUSH
4302: CALL_OW 88
// DialogueOff ;
4306: CALL_OW 7
// disable ;
4310: DISABLE
// end else
4311: GO 4334
// begin DialogueOn ;
4313: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4317: LD_EXP 1
4321: PPUSH
4322: LD_STRING DX2-JMM-1
4324: PPUSH
4325: CALL_OW 88
// DialogueOff ;
4329: CALL_OW 7
// disable ;
4333: DISABLE
// end ; end ; end ;
4334: GO 4213
4336: POP
4337: POP
// end ;
4338: PPOPN 2
4340: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4341: LD_INT 22
4343: PUSH
4344: LD_INT 1
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: PUSH
4351: LD_INT 23
4353: PUSH
4354: LD_INT 3
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 21
4363: PUSH
4364: LD_INT 2
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 34
4373: PUSH
4374: LD_INT 42
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: PPUSH
4387: CALL_OW 69
4391: PUSH
4392: LD_INT 1
4394: GREATEREQUAL
4395: IFFALSE 4862
4397: GO 4399
4399: DISABLE
4400: LD_INT 0
4402: PPUSH
4403: PPUSH
4404: PPUSH
4405: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4406: LD_ADDR_VAR 0 1
4410: PUSH
4411: LD_INT 22
4413: PUSH
4414: LD_INT 1
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: PUSH
4421: LD_INT 23
4423: PUSH
4424: LD_INT 3
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 21
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 34
4443: PUSH
4444: LD_INT 42
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PPUSH
4457: CALL_OW 69
4461: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4462: LD_ADDR_VAR 0 2
4466: PUSH
4467: LD_INT 22
4469: PUSH
4470: LD_INT 1
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: PUSH
4477: LD_INT 21
4479: PUSH
4480: LD_INT 1
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PUSH
4487: LD_INT 26
4489: PUSH
4490: LD_INT 1
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: LIST
4501: PPUSH
4502: CALL_OW 69
4506: PUSH
4507: LD_EXP 1
4511: PUSH
4512: LD_EXP 3
4516: PUSH
4517: LD_EXP 2
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: DIFF
4527: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4528: LD_ADDR_VAR 0 3
4532: PUSH
4533: LD_INT 22
4535: PUSH
4536: LD_INT 1
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 21
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 26
4555: PUSH
4556: LD_INT 2
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: PPUSH
4568: CALL_OW 69
4572: PUSH
4573: LD_EXP 4
4577: PUSH
4578: EMPTY
4579: LIST
4580: DIFF
4581: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
4582: LD_EXP 1
4586: PPUSH
4587: CALL_OW 310
4591: NOT
4592: IFFALSE 4606
// Say ( JMM , DX2a-JMM-1 ) ;
4594: LD_EXP 1
4598: PPUSH
4599: LD_STRING DX2a-JMM-1
4601: PPUSH
4602: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4606: LD_EXP 2
4610: PPUSH
4611: CALL_OW 310
4615: PUSH
4616: LD_VAR 0 1
4620: PUSH
4621: LD_INT 1
4623: ARRAY
4624: EQUAL
4625: IFFALSE 4639
// Say ( Bobby , DX2a-Bobby-1 ) ;
4627: LD_EXP 2
4631: PPUSH
4632: LD_STRING DX2a-Bobby-1
4634: PPUSH
4635: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4639: LD_EXP 3
4643: PPUSH
4644: CALL_OW 310
4648: PUSH
4649: LD_VAR 0 1
4653: PUSH
4654: LD_INT 1
4656: ARRAY
4657: EQUAL
4658: IFFALSE 4672
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4660: LD_EXP 3
4664: PPUSH
4665: LD_STRING DX2a-Cyrus-1
4667: PPUSH
4668: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4672: LD_EXP 4
4676: PPUSH
4677: CALL_OW 310
4681: PUSH
4682: LD_VAR 0 1
4686: PUSH
4687: LD_INT 1
4689: ARRAY
4690: EQUAL
4691: IFFALSE 4705
// Say ( Lisa , DX2a-Lisa-1 ) ;
4693: LD_EXP 4
4697: PPUSH
4698: LD_STRING DX2a-Lisa-1
4700: PPUSH
4701: CALL_OW 88
// for i in temp1 do
4705: LD_ADDR_VAR 0 4
4709: PUSH
4710: LD_VAR 0 2
4714: PUSH
4715: FOR_IN
4716: IFFALSE 4753
// if IsInUnit ( i ) = tmp [ 1 ] then
4718: LD_VAR 0 4
4722: PPUSH
4723: CALL_OW 310
4727: PUSH
4728: LD_VAR 0 1
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: EQUAL
4737: IFFALSE 4751
// Say ( i , DX2a-Sol1-1 ) ;
4739: LD_VAR 0 4
4743: PPUSH
4744: LD_STRING DX2a-Sol1-1
4746: PPUSH
4747: CALL_OW 88
4751: GO 4715
4753: POP
4754: POP
// for i in temp2 do
4755: LD_ADDR_VAR 0 4
4759: PUSH
4760: LD_VAR 0 3
4764: PUSH
4765: FOR_IN
4766: IFFALSE 4803
// if IsInUnit ( i ) = tmp [ 1 ] then
4768: LD_VAR 0 4
4772: PPUSH
4773: CALL_OW 310
4777: PUSH
4778: LD_VAR 0 1
4782: PUSH
4783: LD_INT 1
4785: ARRAY
4786: EQUAL
4787: IFFALSE 4801
// Say ( i , DX2a-FSol1-1 ) ;
4789: LD_VAR 0 4
4793: PPUSH
4794: LD_STRING DX2a-FSol1-1
4796: PPUSH
4797: CALL_OW 88
4801: GO 4765
4803: POP
4804: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4805: LD_EXP 1
4809: PPUSH
4810: CALL_OW 310
4814: PUSH
4815: LD_VAR 0 1
4819: PUSH
4820: LD_INT 1
4822: ARRAY
4823: EQUAL
4824: IFFALSE 4838
// Say ( JMM , DX2b-JMM-1 ) ;
4826: LD_EXP 1
4830: PPUSH
4831: LD_STRING DX2b-JMM-1
4833: PPUSH
4834: CALL_OW 88
// if not IsInUnit ( JMM ) then
4838: LD_EXP 1
4842: PPUSH
4843: CALL_OW 310
4847: NOT
4848: IFFALSE 4862
// Say ( JMM , DX2a-JMM-2 ) ;
4850: LD_EXP 1
4854: PPUSH
4855: LD_STRING DX2a-JMM-2
4857: PPUSH
4858: CALL_OW 88
// end ;
4862: PPOPN 4
4864: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4865: LD_INT 1
4867: PPUSH
4868: CALL_OW 255
4872: PUSH
4873: LD_INT 1
4875: EQUAL
4876: PUSH
4877: LD_INT 10
4879: PPUSH
4880: CALL_OW 255
4884: PUSH
4885: LD_INT 1
4887: EQUAL
4888: OR
4889: IFFALSE 4949
4891: GO 4893
4893: DISABLE
// begin DialogueOn ;
4894: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4898: LD_EXP 1
4902: PPUSH
4903: LD_STRING D3-JMM-1
4905: PPUSH
4906: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4910: LD_EXP 9
4914: PPUSH
4915: LD_STRING D3-Pow-1
4917: PPUSH
4918: CALL_OW 94
// if IsOK ( Cyrus ) then
4922: LD_EXP 3
4926: PPUSH
4927: CALL_OW 302
4931: IFFALSE 4945
// Say ( Cyrus , D3-Cyrus-1 ) ;
4933: LD_EXP 3
4937: PPUSH
4938: LD_STRING D3-Cyrus-1
4940: PPUSH
4941: CALL_OW 88
// DialogueOff ;
4945: CALL_OW 7
// end ;
4949: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , i ;
4950: LD_INT 1
4952: PPUSH
4953: CALL_OW 255
4957: PUSH
4958: LD_INT 1
4960: EQUAL
4961: PUSH
<<<<<<< HEAD
4962: LD_INT 10
4964: PPUSH
4965: CALL_OW 255
4969: PUSH
4970: LD_INT 1
4972: EQUAL
4973: AND
4974: IFFALSE 6142
4976: GO 4978
4978: DISABLE
4979: LD_INT 0
4981: PPUSH
4982: PPUSH
=======
4962: LD_INT 1
4964: EQUAL
4965: AND
4966: IFFALSE 6163
4968: GO 4970
4970: DISABLE
4971: LD_INT 0
4973: PPUSH
4974: PPUSH
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) diff [ JMM ] ;
4983: LD_ADDR_VAR 0 1
4987: PUSH
4988: LD_INT 22
4990: PUSH
4991: LD_INT 1
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: LD_INT 23
5000: PUSH
5001: LD_INT 1
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: LD_INT 25
5010: PUSH
5011: LD_INT 2
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: LIST
5022: PPUSH
5023: CALL_OW 69
5027: PUSH
5028: LD_EXP 1
5032: PUSH
5033: EMPTY
5034: LIST
5035: DIFF
5036: ST_TO_ADDR
// DialogueOn ;
5037: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5041: LD_EXP 1
5045: PPUSH
5046: LD_STRING D3a-JMM-1
5048: PPUSH
5049: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5053: LD_EXP 9
5057: PPUSH
5058: LD_STRING D3a-Pow-1
5060: PPUSH
5061: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5065: LD_EXP 1
5069: PPUSH
5070: LD_STRING D3a-JMM-2
5072: PPUSH
5073: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5077: LD_EXP 9
5081: PPUSH
5082: LD_STRING D3a-Pow-2
5084: PPUSH
5085: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5089: LD_EXP 1
5093: PPUSH
5094: LD_STRING D3a-JMM-3
5096: PPUSH
5097: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5101: LD_EXP 9
5105: PPUSH
5106: LD_STRING D3a-Pow-3
5108: PPUSH
5109: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5113: LD_EXP 1
5117: PPUSH
5118: LD_STRING D3a-JMM-4
5120: PPUSH
5121: CALL_OW 88
// DialogueOff ;
5125: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5129: LD_STRING M2
5131: PPUSH
5132: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3b-JMM-1
5143: PPUSH
5144: CALL_OW 88
// wait ( 0 0$5 ) ;
5148: LD_INT 175
5150: PPUSH
5151: CALL_OW 67
// InGameOn ;
5155: CALL_OW 8
// PrepareRussianHeroes ;
<<<<<<< HEAD
5159: CALL 11277 0 0
=======
5151: CALL 11244 0 0
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
// CenterNowOnUnits ( Mikhail ) ;
5163: LD_EXP 8
5167: PPUSH
5168: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5172: LD_EXP 1
5176: PUSH
5177: LD_VAR 0 1
5181: PUSH
5182: LD_INT 1
5184: ARRAY
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PPUSH
5190: LD_EXP 8
5194: PPUSH
5195: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
<<<<<<< HEAD
5199: LD_EXP 8
5203: PPUSH
5204: LD_VAR 0 1
5208: PUSH
5209: LD_INT 1
5211: ARRAY
5212: PPUSH
5213: CALL_OW 119
// Wait ( 0 0$02 ) ;
5217: LD_INT 70
5219: PPUSH
5220: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5224: LD_EXP 8
5228: PPUSH
5229: LD_STRING D4-Mikh-1
5231: PPUSH
5232: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5236: LD_VAR 0 1
5240: PUSH
5241: LD_INT 1
5243: ARRAY
5244: PPUSH
5245: CALL_OW 258
5249: PUSH
5250: LD_INT 1
5252: EQUAL
5253: IFFALSE 5271
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5255: LD_VAR 0 1
5259: PUSH
5260: LD_INT 1
5262: ARRAY
5263: PPUSH
5264: LD_STRING D4-Sol1-1
5266: PPUSH
5267: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5271: LD_VAR 0 1
5275: PUSH
5276: LD_INT 1
5278: ARRAY
5279: PPUSH
5280: CALL_OW 258
5284: PUSH
5285: LD_INT 2
5287: EQUAL
5288: IFFALSE 5306
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5290: LD_VAR 0 1
5294: PUSH
5295: LD_INT 1
5297: ARRAY
5298: PPUSH
5299: LD_STRING D4-FSol1-1
5301: PPUSH
5302: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5306: LD_EXP 8
5310: PPUSH
5311: LD_STRING D4-Mikh-2
5313: PPUSH
5314: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5318: LD_VAR 0 1
5322: PUSH
5323: LD_INT 1
5325: ARRAY
5326: PPUSH
5327: CALL_OW 258
5331: PUSH
5332: LD_INT 1
5334: EQUAL
5335: IFFALSE 5353
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5337: LD_VAR 0 1
5341: PUSH
5342: LD_INT 1
5344: ARRAY
5345: PPUSH
5346: LD_STRING D4-Sol1-2
5348: PPUSH
5349: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5353: LD_VAR 0 1
5357: PUSH
5358: LD_INT 1
5360: ARRAY
5361: PPUSH
5362: CALL_OW 258
5366: PUSH
5367: LD_INT 2
5369: EQUAL
5370: IFFALSE 5388
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5372: LD_VAR 0 1
5376: PUSH
5377: LD_INT 1
5379: ARRAY
5380: PPUSH
5381: LD_STRING D4-FSol1-2
5383: PPUSH
5384: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5388: LD_EXP 8
5392: PPUSH
5393: LD_STRING D4-Mikh-3
5395: PPUSH
5396: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5400: LD_VAR 0 1
5404: PUSH
5405: LD_INT 1
5407: ARRAY
5408: PPUSH
5409: CALL_OW 258
5413: PUSH
5414: LD_INT 1
5416: EQUAL
5417: IFFALSE 5435
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5419: LD_VAR 0 1
5423: PUSH
5424: LD_INT 1
5426: ARRAY
5427: PPUSH
5428: LD_STRING D4-Sol1-3
5430: PPUSH
5431: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5435: LD_VAR 0 1
5439: PUSH
5440: LD_INT 1
5442: ARRAY
5443: PPUSH
5444: CALL_OW 258
5448: PUSH
5449: LD_INT 2
5451: EQUAL
5452: IFFALSE 5470
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5454: LD_VAR 0 1
5458: PUSH
5459: LD_INT 1
5461: ARRAY
5462: PPUSH
5463: LD_STRING D4-FSol1-3
5465: PPUSH
5466: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5470: LD_EXP 8
5474: PPUSH
5475: LD_STRING D4-Mikh-4
5477: PPUSH
5478: CALL_OW 88
// case query ( Qs1 ) of 1 :
5482: LD_STRING Qs1
5484: PPUSH
5485: CALL_OW 97
5489: PUSH
5490: LD_INT 1
5492: DOUBLE
5493: EQUAL
5494: IFTRUE 5498
5496: GO 5533
5498: POP
// begin InGameOff ;
5499: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5503: LD_INT 1
5505: PPUSH
5506: LD_INT 6
5508: PPUSH
5509: LD_INT 2
5511: PPUSH
5512: LD_INT 1
5514: PPUSH
5515: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5519: LD_EXP 8
5523: PPUSH
5524: LD_INT 17
5526: PPUSH
5527: CALL_OW 113
// end ; 2 :
5531: GO 6126
5533: LD_INT 2
5535: DOUBLE
5536: EQUAL
5537: IFTRUE 5541
5539: GO 6091
5541: POP
// begin repeat wait ( 0 0$1 ) ;
5542: LD_INT 35
5544: PPUSH
5545: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5549: LD_VAR 0 1
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: PPUSH
5558: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5562: LD_VAR 0 1
5566: PUSH
5567: LD_INT 1
5569: ARRAY
5570: PPUSH
5571: LD_EXP 1
5575: PPUSH
5576: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5580: LD_EXP 8
5584: PPUSH
5585: LD_EXP 1
5589: PPUSH
5590: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5594: LD_EXP 1
5598: PPUSH
5599: LD_EXP 8
5603: PPUSH
5604: CALL_OW 296
5608: PUSH
5609: LD_INT 5
5611: LESS
5612: IFFALSE 5542
// ComTurnUnit ( Mikhail , JMM ) ;
5614: LD_EXP 8
5618: PPUSH
5619: LD_EXP 1
5623: PPUSH
5624: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5628: LD_EXP 1
5632: PPUSH
5633: LD_STRING D4b-JMM-1
5635: PPUSH
5636: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5640: LD_EXP 8
5644: PPUSH
5645: LD_STRING D4b-Mikh-1
5647: PPUSH
5648: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5652: LD_EXP 1
5656: PPUSH
5657: LD_STRING D4b-JMM-2
5659: PPUSH
5660: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5664: LD_EXP 8
5668: PPUSH
5669: LD_STRING D4b-Mikh-2
5671: PPUSH
5672: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5676: LD_EXP 1
5680: PPUSH
5681: LD_STRING D4b-JMM-3
5683: PPUSH
5684: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5688: LD_EXP 8
5692: PPUSH
5693: LD_STRING D4b-Mikh-3
5695: PPUSH
5696: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5700: LD_EXP 1
5704: PPUSH
5705: LD_STRING D4b-JMM-4
5707: PPUSH
5708: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5712: LD_EXP 8
5716: PPUSH
5717: LD_STRING D4b-Mikh-4
5719: PPUSH
5720: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5724: LD_EXP 1
5728: PPUSH
5729: LD_STRING D4b-JMM-5
5731: PPUSH
5732: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5736: LD_EXP 8
5740: PPUSH
5741: LD_STRING D4b-Mikh-5
5743: PPUSH
5744: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5748: LD_EXP 1
5752: PPUSH
5753: LD_STRING D4b-JMM-6
5755: PPUSH
5756: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5760: LD_EXP 8
5764: PPUSH
5765: LD_STRING D4b-Mikh-6
5767: PPUSH
5768: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5772: LD_EXP 1
5776: PPUSH
5777: LD_STRING D4b-JMM-7
5779: PPUSH
5780: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5784: LD_EXP 8
5788: PPUSH
5789: LD_STRING D4b-Mikh-7
5791: PPUSH
5792: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5796: LD_VAR 0 1
5800: PUSH
5801: LD_INT 1
5803: ARRAY
5804: PPUSH
5805: CALL_OW 258
5809: PUSH
5810: LD_INT 1
5812: EQUAL
5813: IFFALSE 5831
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5815: LD_VAR 0 1
5819: PUSH
5820: LD_INT 1
5822: ARRAY
5823: PPUSH
5824: LD_STRING D4b-Sol1-7
5826: PPUSH
5827: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5831: LD_VAR 0 1
5835: PUSH
5836: LD_INT 1
5838: ARRAY
5839: PPUSH
5840: CALL_OW 258
5844: PUSH
5845: LD_INT 2
5847: EQUAL
5848: IFFALSE 5866
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5850: LD_VAR 0 1
5854: PUSH
5855: LD_INT 1
5857: ARRAY
5858: PPUSH
5859: LD_STRING D4b-FSol1-7
5861: PPUSH
5862: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5866: LD_EXP 1
5870: PPUSH
5871: LD_STRING D4b-JMM-8
5873: PPUSH
5874: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5878: LD_VAR 0 1
5882: PUSH
5883: LD_INT 1
5885: ARRAY
5886: PPUSH
5887: CALL_OW 258
5891: PUSH
5892: LD_INT 1
5894: EQUAL
5895: IFFALSE 5913
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5897: LD_VAR 0 1
5901: PUSH
5902: LD_INT 1
5904: ARRAY
5905: PPUSH
5906: LD_STRING D4b-Sol1-8
5908: PPUSH
5909: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5913: LD_VAR 0 1
5917: PUSH
5918: LD_INT 1
5920: ARRAY
5921: PPUSH
5922: CALL_OW 258
5926: PUSH
5927: LD_INT 2
5929: EQUAL
5930: IFFALSE 5948
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
5932: LD_VAR 0 1
5936: PUSH
5937: LD_INT 1
5939: ARRAY
5940: PPUSH
5941: LD_STRING D4b-FSol1-8
5943: PPUSH
5944: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
5948: LD_EXP 1
5952: PPUSH
5953: LD_STRING D4b-JMM-9
5955: PPUSH
5956: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
5960: LD_EXP 8
5964: PPUSH
5965: LD_INT 1
5967: PPUSH
5968: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5972: LD_ADDR_VAR 0 2
5976: PUSH
5977: LD_INT 22
5979: PUSH
5980: LD_INT 1
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: PPUSH
5990: CALL_OW 69
5994: PUSH
5995: FOR_IN
5996: IFFALSE 6009
// ComFree ( i ) ;
5998: LD_VAR 0 2
6002: PPUSH
6003: CALL_OW 139
6007: GO 5995
6009: POP
6010: POP
// repeat wait ( 0 0$1 ) ;
6011: LD_INT 35
6013: PPUSH
6014: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6018: LD_EXP 8
6022: PPUSH
6023: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6027: LD_EXP 8
6031: PUSH
6032: LD_VAR 0 1
6036: PUSH
6037: LD_INT 1
6039: ARRAY
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PPUSH
6045: LD_INT 1
6047: PPUSH
6048: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6052: LD_EXP 8
6056: PPUSH
6057: CALL_OW 310
6061: IFFALSE 6011
// mikhailDepot = IsInUnit ( Mikhail ) ;
6063: LD_ADDR_EXP 23
6067: PUSH
6068: LD_EXP 8
6072: PPUSH
6073: CALL_OW 310
6077: ST_TO_ADDR
// InGameOff ;
6078: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6082: LD_STRING M3
6084: PPUSH
6085: CALL_OW 337
// end ; 3 :
6089: GO 6126
6091: LD_INT 3
6093: DOUBLE
6094: EQUAL
6095: IFTRUE 6099
6097: GO 6125
6099: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6100: LD_EXP 8
6104: PPUSH
6105: LD_INT 17
6107: PPUSH
6108: CALL_OW 113
// wait ( 0 0$3 ) ;
6112: LD_INT 105
6114: PPUSH
6115: CALL_OW 67
// InGameOff ;
6119: CALL_OW 9
// end ; end ;
6123: GO 6126
6125: POP
// PrepareTigers ;
6126: CALL 13910 0 0
// RussianTrap ;
6130: CALL 9875 0 0
// tigersRespawn = 1 ;
6134: LD_ADDR_EXP 30
6138: PUSH
6139: LD_INT 1
6141: ST_TO_ADDR
// end ;
6142: PPOPN 2
6144: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6145: LD_INT 1
6147: PPUSH
6148: CALL_OW 255
6152: PUSH
6153: LD_INT 1
6155: EQUAL
6156: PUSH
6157: LD_INT 10
6159: PPUSH
6160: CALL_OW 255
6164: PUSH
6165: LD_INT 1
6167: EQUAL
6168: AND
6169: PUSH
6170: LD_INT 1
6172: PPUSH
6173: CALL_OW 274
6177: PPUSH
6178: LD_INT 1
6180: PPUSH
6181: CALL_OW 275
6185: PUSH
6186: LD_INT 100
6188: GREATEREQUAL
6189: AND
6190: IFFALSE 6353
6192: GO 6194
6194: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6195: LD_INT 2100
6197: PPUSH
6198: LD_INT 4200
6200: PPUSH
6201: CALL_OW 12
6205: PUSH
6206: LD_INT 1050
6208: PLUS
6209: PPUSH
6210: CALL_OW 67
// PrepareCargoBays ;
6214: CALL 12393 0 0
// cargoRespawn = 1 ;
6218: LD_ADDR_EXP 28
6222: PUSH
6223: LD_INT 1
6225: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6226: LD_EXP 15
6230: PUSH
6231: LD_EXP 16
6235: PUSH
6236: LD_EXP 17
6240: PUSH
6241: LD_EXP 18
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: PPUSH
6252: LD_INT 36
6254: PPUSH
6255: LD_INT 13
6257: PPUSH
6258: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6262: LD_EXP 15
6266: PUSH
6267: LD_EXP 16
6271: PUSH
6272: LD_EXP 17
6276: PUSH
6277: LD_EXP 18
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: PPUSH
6288: LD_INT 40
6290: PPUSH
6291: LD_INT 20
6293: PPUSH
6294: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6298: LD_EXP 15
6302: PUSH
6303: LD_EXP 16
6307: PUSH
6308: LD_EXP 17
6312: PUSH
6313: LD_EXP 18
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: PPUSH
6324: LD_INT 53
6326: PPUSH
6327: LD_INT 16
6329: PPUSH
6330: CALL_OW 171
// wait ( 0 0$5 ) ;
6334: LD_INT 175
6336: PPUSH
6337: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6341: LD_EXP 17
6345: PPUSH
6346: LD_STRING D5-Rus2-1
6348: PPUSH
6349: CALL_OW 88
// end ;
6353: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6354: LD_EXP 28
6358: PUSH
6359: LD_INT 1
6361: EQUAL
6362: IFFALSE 6570
6364: GO 6366
6366: DISABLE
6367: LD_INT 0
6369: PPUSH
6370: PPUSH
6371: PPUSH
6372: PPUSH
// begin enable ;
6373: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6374: LD_ADDR_VAR 0 3
6378: PUSH
6379: LD_INT 22
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PUSH
6389: LD_INT 21
6391: PUSH
6392: LD_INT 2
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: LD_INT 34
6401: PUSH
6402: LD_INT 51
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: PPUSH
6414: CALL_OW 69
6418: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
6419: LD_ADDR_VAR 0 4
6423: PUSH
6424: LD_INT 22
6426: PUSH
6427: LD_INT 1
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 23
6436: PUSH
6437: LD_INT 1
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PPUSH
6448: CALL_OW 69
6452: ST_TO_ADDR
// for i in tmp1 do
6453: LD_ADDR_VAR 0 1
6457: PUSH
6458: LD_VAR 0 3
6462: PUSH
6463: FOR_IN
6464: IFFALSE 6568
// begin for j in tmp2 do
6466: LD_ADDR_VAR 0 2
6470: PUSH
6471: LD_VAR 0 4
6475: PUSH
6476: FOR_IN
6477: IFFALSE 6564
// begin if GetDistUnits ( i , j ) < 7 then
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_VAR 0 2
6488: PPUSH
6489: CALL_OW 296
6493: PUSH
6494: LD_INT 7
6496: LESS
6497: IFFALSE 6562
// begin disable ;
6499: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6500: LD_EXP 15
6504: PUSH
6505: LD_EXP 16
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PPUSH
6514: LD_INT 7
6516: PPUSH
6517: LD_INT 9
6519: PPUSH
6520: CALL_OW 111
// if cargoSee = 0 then
6524: LD_EXP 29
6528: PUSH
6529: LD_INT 0
6531: EQUAL
6532: IFFALSE 6554
// begin cargoSee = 1 ;
6534: LD_ADDR_EXP 29
6538: PUSH
6539: LD_INT 1
6541: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6542: LD_EXP 17
6546: PPUSH
6547: LD_STRING D5-Rus2-1a
6549: PPUSH
6550: CALL_OW 88
// end ; cargoEscape = 1 ;
6554: LD_ADDR_EXP 20
6558: PUSH
6559: LD_INT 1
6561: ST_TO_ADDR
// end ; end ;
6562: GO 6476
6564: POP
6565: POP
// end ;
6566: GO 6463
6568: POP
6569: POP
// end ;
6570: PPOPN 4
6572: END
// every 0 0$1 trigger cargoEscape > 0 do
6573: LD_EXP 20
6577: PUSH
6578: LD_INT 0
6580: GREATER
6581: IFFALSE 6707
6583: GO 6585
6585: DISABLE
// begin enable ;
6586: ENABLE
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6587: LD_EXP 15
6591: PPUSH
6592: LD_INT 13
6594: PPUSH
6595: CALL_OW 308
6599: PUSH
6600: LD_EXP 17
6604: PPUSH
6605: LD_INT 13
6607: PPUSH
6608: CALL_OW 308
6612: OR
6613: IFFALSE 6647
// begin RemoveUnit ( cargo1 ) ;
6615: LD_EXP 15
6619: PPUSH
6620: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6624: LD_EXP 17
6628: PPUSH
6629: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6633: LD_ADDR_EXP 20
6637: PUSH
6638: LD_EXP 20
6642: PUSH
6643: LD_INT 1
6645: PLUS
6646: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6647: LD_EXP 16
6651: PPUSH
6652: LD_INT 13
6654: PPUSH
6655: CALL_OW 308
6659: PUSH
6660: LD_EXP 18
6664: PPUSH
6665: LD_INT 13
6667: PPUSH
6668: CALL_OW 308
6672: OR
6673: IFFALSE 6707
// begin RemoveUnit ( cargo2 ) ;
6675: LD_EXP 16
6679: PPUSH
6680: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6684: LD_EXP 18
6688: PPUSH
6689: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6693: LD_ADDR_EXP 20
6697: PUSH
6698: LD_EXP 20
6702: PUSH
6703: LD_INT 1
6705: PLUS
6706: ST_TO_ADDR
// end ; end ;
6707: END
// every 0 0$1 trigger cargoEscape > 1 do
6708: LD_EXP 20
6712: PUSH
6713: LD_INT 1
6715: GREATER
6716: IFFALSE 6880
6718: GO 6720
6720: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
6721: LD_INT 4
6723: PPUSH
6724: LD_INT 1
6726: PPUSH
6727: LD_INT 1
6729: PPUSH
6730: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6734: LD_INT 31
6736: PPUSH
6737: LD_INT 1
6739: PPUSH
6740: LD_INT 1
6742: PPUSH
6743: CALL_OW 324
// if IsOK ( Jerry ) then
6747: LD_EXP 7
6751: PPUSH
6752: CALL_OW 302
6756: IFFALSE 6772
// begin Say ( Jerry , D5a-Sol1-1 ) ;
6758: LD_EXP 7
6762: PPUSH
6763: LD_STRING D5a-Sol1-1
6765: PPUSH
6766: CALL_OW 88
// end else
6770: GO 6868
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
6772: LD_INT 22
6774: PUSH
6775: LD_INT 1
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PUSH
6782: LD_INT 23
6784: PUSH
6785: LD_INT 1
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PUSH
6792: LD_INT 26
6794: PUSH
6795: LD_INT 1
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: PPUSH
6807: CALL_OW 69
6811: PUSH
6812: LD_INT 2
6814: PPUSH
6815: LD_INT 22
6817: PUSH
6818: LD_INT 1
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: PUSH
6825: LD_INT 23
6827: PUSH
6828: LD_INT 1
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 26
6837: PUSH
6838: LD_INT 1
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: PPUSH
6850: CALL_OW 69
6854: PPUSH
6855: CALL_OW 12
6859: ARRAY
6860: PPUSH
6861: LD_STRING D5a-Sol1-1
6863: PPUSH
6864: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6868: LD_EXP 1
6872: PPUSH
6873: LD_STRING D5a-JMM-1
6875: PPUSH
6876: CALL_OW 88
// end ;
6880: END
// every 0 0$1 trigger GetLives ( dep1 ) < 1000 or GetLives ( dep2 ) < 1000 do
6881: LD_INT 1
6883: PPUSH
6884: CALL_OW 256
6888: PUSH
6889: LD_INT 1000
6891: LESS
6892: PUSH
6893: LD_INT 10
6895: PPUSH
6896: CALL_OW 256
6900: PUSH
6901: LD_INT 1000
6903: LESS
6904: OR
6905: IFFALSE 6922
6907: GO 6909
6909: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
6910: LD_EXP 1
6914: PPUSH
6915: LD_STRING D8-JMM-1
6917: PPUSH
6918: CALL_OW 88
// end ;
6922: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6923: LD_EXP 8
6927: PPUSH
6928: CALL_OW 310
6932: PUSH
6933: LD_INT 1
6935: EQUAL
6936: PUSH
6937: LD_EXP 22
6941: PUSH
6942: LD_INT 3
6944: EQUAL
6945: NOT
6946: AND
6947: IFFALSE 6969
6949: GO 6951
6951: DISABLE
// begin mikhailInBase = 1 ;
6952: LD_ADDR_EXP 22
6956: PUSH
6957: LD_INT 1
6959: ST_TO_ADDR
// mikhailStatus = 1 ;
6960: LD_ADDR_EXP 21
6964: PUSH
6965: LD_INT 1
6967: ST_TO_ADDR
// enable ;
6968: ENABLE
// end ;
6969: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
6970: LD_EXP 8
6974: PPUSH
6975: LD_INT 25
6977: PPUSH
6978: CALL_OW 308
6982: PUSH
6983: LD_EXP 22
6987: PUSH
6988: LD_INT 1
6990: EQUAL
6991: AND
6992: PUSH
6993: LD_EXP 8
6997: PPUSH
6998: CALL_OW 255
7002: PUSH
7003: LD_INT 1
7005: EQUAL
7006: AND
7007: IFFALSE 7337
7009: GO 7011
7011: DISABLE
// begin enable ;
7012: ENABLE
// case query ( QMikh2 ) of 1 :
7013: LD_STRING QMikh2
7015: PPUSH
7016: CALL_OW 97
7020: PUSH
7021: LD_INT 1
7023: DOUBLE
7024: EQUAL
7025: IFTRUE 7029
7027: GO 7096
7029: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7030: LD_INT 1
7032: PPUSH
7033: LD_INT 6
7035: PPUSH
7036: LD_INT 2
7038: PPUSH
7039: LD_INT 1
7041: PPUSH
7042: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7046: LD_EXP 8
7050: PPUSH
7051: LD_INT 6
7053: PPUSH
7054: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7058: LD_EXP 8
7062: PPUSH
7063: CALL_OW 122
// wait ( 0 0$1 ) ;
7067: LD_INT 35
7069: PPUSH
7070: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7074: LD_EXP 8
7078: PPUSH
7079: LD_INT 17
7081: PPUSH
7082: CALL_OW 113
// mikhailInbase = 0 ;
7086: LD_ADDR_EXP 22
7090: PUSH
7091: LD_INT 0
7093: ST_TO_ADDR
// end ; 2 :
7094: GO 7337
7096: LD_INT 2
7098: DOUBLE
7099: EQUAL
7100: IFTRUE 7104
7102: GO 7277
7104: POP
// begin mikhailInBase = 2 ;
7105: LD_ADDR_EXP 22
7109: PUSH
7110: LD_INT 2
7112: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7113: LD_EXP 8
7117: PPUSH
7118: LD_INT 6
7120: PPUSH
7121: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7125: LD_EXP 8
7129: PPUSH
7130: CALL_OW 122
// wait ( 0 0$1 ) ;
7134: LD_INT 35
7136: PPUSH
7137: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7141: LD_EXP 8
7145: PPUSH
7146: LD_EXP 8
7150: PPUSH
7151: CALL_OW 250
7155: PUSH
7156: LD_INT 2
7158: PLUS
7159: PPUSH
7160: LD_EXP 8
7164: PPUSH
7165: CALL_OW 251
7169: PUSH
7170: LD_INT 2
7172: PLUS
7173: PPUSH
7174: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7178: LD_EXP 8
7182: PPUSH
7183: LD_EXP 8
7187: PPUSH
7188: CALL_OW 250
7192: PUSH
7193: LD_INT 1
7195: PLUS
7196: PPUSH
7197: LD_EXP 8
7201: PPUSH
7202: CALL_OW 251
7206: PUSH
7207: LD_INT 2
7209: PLUS
7210: PPUSH
7211: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7215: LD_EXP 8
7219: PPUSH
7220: LD_EXP 8
7224: PPUSH
7225: CALL_OW 250
7229: PUSH
7230: LD_INT 2
7232: PLUS
7233: PPUSH
7234: LD_EXP 8
7238: PPUSH
7239: CALL_OW 251
7243: PPUSH
7244: CALL_OW 171
// wait ( 0 0$5 ) ;
7248: LD_INT 175
7250: PPUSH
7251: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7255: LD_EXP 8
7259: PPUSH
7260: LD_INT 25
7262: PPUSH
7263: CALL_OW 113
// mikhailInBase = 4 ;
7267: LD_ADDR_EXP 22
7271: PUSH
7272: LD_INT 4
7274: ST_TO_ADDR
// end ; 3 :
7275: GO 7337
7277: LD_INT 3
7279: DOUBLE
7280: EQUAL
7281: IFTRUE 7285
7283: GO 7336
7285: POP
// begin SetSide ( Mikhail , 6 ) ;
7286: LD_EXP 8
7290: PPUSH
7291: LD_INT 6
7293: PPUSH
7294: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7298: LD_EXP 8
7302: PPUSH
7303: CALL_OW 122
// wait ( 0 0$1 ) ;
7307: LD_INT 35
7309: PPUSH
7310: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7314: LD_EXP 8
7318: PPUSH
7319: LD_INT 17
7321: PPUSH
7322: CALL_OW 113
// mikhailInbase = 3 ;
7326: LD_ADDR_EXP 22
7330: PUSH
7331: LD_INT 3
7333: ST_TO_ADDR
// end ; end ;
7334: GO 7337
7336: POP
// end ;
7337: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7338: LD_EXP 8
7342: PPUSH
7343: LD_INT 25
7345: PPUSH
7346: CALL_OW 308
7350: PUSH
7351: LD_EXP 22
7355: PUSH
7356: LD_INT 4
7358: EQUAL
7359: AND
7360: IFFALSE 7458
7362: GO 7364
7364: DISABLE
// begin enable ;
7365: ENABLE
// SetSide ( Mikhail , 1 ) ;
7366: LD_EXP 8
7370: PPUSH
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7378: LD_INT 35
7380: PPUSH
7381: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
7385: LD_EXP 8
7389: PPUSH
7390: LD_INT 1
7392: PPUSH
7393: CALL_OW 296
7397: PUSH
7398: LD_EXP 8
7402: PPUSH
7403: LD_INT 10
7405: PPUSH
7406: CALL_OW 296
7410: LESS
7411: IFFALSE 7427
// begin ComEnterUnit ( Mikhail , dep1 ) ;
7413: LD_EXP 8
7417: PPUSH
7418: LD_INT 1
7420: PPUSH
7421: CALL_OW 120
// end else
7425: GO 7439
// begin ComEnterUnit ( Mikhail , dep2 ) ;
7427: LD_EXP 8
7431: PPUSH
7432: LD_INT 10
7434: PPUSH
7435: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
7439: LD_EXP 8
7443: PPUSH
7444: CALL_OW 310
7448: IFFALSE 7378
// mikhailInBase = 1 ;
7450: LD_ADDR_EXP 22
7454: PUSH
7455: LD_INT 1
7457: ST_TO_ADDR
// end ;
7458: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7459: LD_EXP 8
7463: PPUSH
7464: CALL_OW 310
7468: PUSH
7469: LD_EXP 22
7473: PUSH
7474: LD_INT 3
7476: EQUAL
7477: NOT
7478: AND
7479: IFFALSE 7605
7481: GO 7483
7483: DISABLE
// begin enable ;
7484: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7485: LD_INT 22
7487: PUSH
7488: LD_INT 1
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 21
7497: PUSH
7498: LD_INT 1
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 91
7507: PUSH
7508: LD_EXP 8
7512: PPUSH
7513: CALL_OW 310
7517: PUSH
7518: LD_INT 10
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: PPUSH
7531: CALL_OW 69
7535: PUSH
7536: LD_INT 1
7538: EQUAL
7539: IFFALSE 7605
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7541: LD_INT 1
7543: PPUSH
7544: LD_INT 6
7546: PPUSH
7547: LD_INT 2
7549: PPUSH
7550: LD_INT 1
7552: PPUSH
7553: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7557: LD_EXP 8
7561: PPUSH
7562: LD_INT 6
7564: PPUSH
7565: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7569: LD_EXP 8
7573: PPUSH
7574: CALL_OW 122
// wait ( 0 0$1 ) ;
7578: LD_INT 35
7580: PPUSH
7581: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7585: LD_EXP 8
7589: PPUSH
7590: LD_INT 17
7592: PPUSH
7593: CALL_OW 113
// mikhailStatus = 3 ;
7597: LD_ADDR_EXP 21
7601: PUSH
7602: LD_INT 3
7604: ST_TO_ADDR
// end ; end ;
7605: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7606: LD_EXP 1
7610: PPUSH
7611: LD_EXP 23
7615: PPUSH
7616: CALL_OW 296
7620: PUSH
7621: LD_INT 5
7623: LESS
7624: PUSH
7625: LD_EXP 21
7629: PUSH
7630: LD_INT 3
7632: EQUAL
7633: AND
7634: PUSH
7635: LD_EXP 22
7639: PUSH
7640: LD_INT 3
7642: EQUAL
7643: NOT
7644: AND
7645: IFFALSE 7861
7647: GO 7649
7649: DISABLE
7650: LD_INT 0
7652: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
7653: LD_ADDR_VAR 0 1
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_INT 1
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 21
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: LD_INT 26
7680: PUSH
7681: LD_INT 1
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: LIST
7692: PPUSH
7693: CALL_OW 69
7697: PUSH
7698: LD_EXP 1
7702: PUSH
7703: EMPTY
7704: LIST
7705: DIFF
7706: ST_TO_ADDR
// DialogueOn ;
7707: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7711: LD_EXP 1
7715: PPUSH
7716: LD_STRING D7-JMM-1
7718: PPUSH
7719: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7723: LD_VAR 0 1
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: PPUSH
7732: LD_STRING D7-Sol1-1
7734: PPUSH
7735: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7739: LD_EXP 1
7743: PPUSH
7744: LD_STRING D7-JMM-2
7746: PPUSH
7747: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7751: LD_VAR 0 1
7755: PUSH
7756: LD_INT 1
7758: ARRAY
7759: PPUSH
7760: LD_STRING D7-Sol1-2
7762: PPUSH
7763: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7767: LD_EXP 1
7771: PPUSH
7772: LD_STRING D7-JMM-3
7774: PPUSH
7775: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7779: LD_VAR 0 1
7783: PUSH
7784: LD_INT 1
7786: ARRAY
7787: PPUSH
7788: LD_STRING D7-Sol1-3
7790: PPUSH
7791: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7795: LD_EXP 3
7799: PPUSH
7800: CALL_OW 302
7804: PUSH
7805: LD_EXP 4
7809: PPUSH
7810: CALL_OW 302
7814: AND
7815: IFFALSE 7857
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7817: LD_EXP 3
7821: PPUSH
7822: LD_STRING D7-Cyrus-3
7824: PPUSH
7825: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7829: LD_VAR 0 1
7833: PUSH
7834: LD_INT 1
7836: ARRAY
7837: PPUSH
7838: LD_STRING D7-Sol1-4
7840: PPUSH
7841: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7845: LD_EXP 4
7849: PPUSH
7850: LD_STRING D7-Lisa-4
7852: PPUSH
7853: CALL_OW 88
// end ; DialogueOff ;
7857: CALL_OW 7
// end ;
7861: PPOPN 1
7863: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7864: LD_EXP 8
7868: PPUSH
7869: CALL_OW 303
7873: PUSH
7874: LD_EXP 21
7878: PUSH
7879: LD_INT 3
7881: EQUAL
7882: AND
7883: IFFALSE 7897
7885: GO 7887
7887: DISABLE
// begin enable ;
7888: ENABLE
// mikhailStatus = 2 ;
7889: LD_ADDR_EXP 21
7893: PUSH
7894: LD_INT 2
7896: ST_TO_ADDR
// end ;
7897: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7898: LD_EXP 8
7902: PPUSH
7903: LD_INT 17
7905: PPUSH
7906: CALL_OW 308
7910: PUSH
7911: LD_EXP 8
7915: PPUSH
7916: CALL_OW 255
7920: PUSH
7921: LD_INT 6
7923: EQUAL
7924: AND
7925: IFFALSE 7958
7927: GO 7929
7929: DISABLE
// begin if not mikhailInBase = 3 then
7930: LD_EXP 22
7934: PUSH
7935: LD_INT 3
7937: EQUAL
7938: NOT
7939: IFFALSE 7949
// mikhailStatus = 3 ;
7941: LD_ADDR_EXP 21
7945: PUSH
7946: LD_INT 3
7948: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
7949: LD_EXP 8
7953: PPUSH
7954: CALL_OW 64
// end ;
7958: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
7959: LD_EXP 21
7963: PUSH
7964: LD_INT 3
7966: EQUAL
7967: PUSH
7968: LD_EXP 8
7972: PPUSH
7973: CALL_OW 255
7977: PUSH
7978: LD_INT 6
7980: EQUAL
7981: AND
7982: IFFALSE 8148
7984: GO 7986
7986: DISABLE
7987: LD_INT 0
7989: PPUSH
7990: PPUSH
// begin enable ;
7991: ENABLE
// if IsOk ( Mikhail ) then
7992: LD_EXP 8
7996: PPUSH
7997: CALL_OW 302
8001: IFFALSE 8148
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8003: LD_ADDR_VAR 0 2
8007: PUSH
8008: LD_EXP 8
8012: PPUSH
8013: LD_INT 22
8015: PUSH
8016: LD_INT 1
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 21
8025: PUSH
8026: LD_INT 1
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PPUSH
8037: CALL_OW 69
8041: PPUSH
8042: CALL 10067 0 2
8046: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8047: LD_VAR 0 2
8051: PPUSH
8052: LD_EXP 8
8056: PPUSH
8057: CALL_OW 296
8061: PUSH
8062: LD_INT 8
8064: LESS
8065: IFFALSE 8148
// begin if GetSex ( attacker ) = sex_male then
8067: LD_VAR 0 2
8071: PPUSH
8072: CALL_OW 258
8076: PUSH
8077: LD_INT 1
8079: EQUAL
8080: IFFALSE 8116
// begin disable ;
8082: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8083: LD_VAR 0 2
8087: PPUSH
8088: LD_STRING D7a-Sol1-1
8090: PPUSH
8091: CALL_OW 88
// wait ( 0 0$2 ) ;
8095: LD_INT 70
8097: PPUSH
8098: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8102: LD_VAR 0 2
8106: PPUSH
8107: LD_STRING D7a-Sol1-1a
8109: PPUSH
8110: CALL_OW 88
// end else
8114: GO 8148
// begin disable ;
8116: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8117: LD_VAR 0 2
8121: PPUSH
8122: LD_STRING D7a-FSol1-1
8124: PPUSH
8125: CALL_OW 88
// wait ( 0 0$2 ) ;
8129: LD_INT 70
8131: PPUSH
8132: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8136: LD_VAR 0 2
8140: PPUSH
8141: LD_STRING D7a-FSol1-1a
8143: PPUSH
8144: CALL_OW 88
// end ; end ; end ; end ;
8148: PPOPN 2
8150: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8151: LD_EXP 27
8155: PUSH
8156: LD_INT 1
8158: EQUAL
8159: PUSH
8160: LD_INT 22
8162: PPUSH
8163: LD_INT 22
8165: PUSH
8166: LD_INT 3
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 21
8175: PUSH
8176: LD_INT 1
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PPUSH
8187: CALL_OW 70
8191: PUSH
8192: LD_INT 2
8194: GREATER
8195: AND
8196: PUSH
8197: LD_INT 22
8199: PPUSH
8200: LD_INT 22
8202: PUSH
8203: LD_INT 1
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: LD_INT 2
8212: PUSH
8213: LD_INT 21
8215: PUSH
8216: LD_INT 1
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_INT 59
8225: PUSH
8226: EMPTY
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PPUSH
8238: CALL_OW 70
8242: PUSH
8243: LD_INT 0
8245: EQUAL
8246: AND
8247: IFFALSE 8262
8249: GO 8251
8251: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8252: LD_INT 1
8254: PPUSH
8255: LD_INT 3
8257: PPUSH
8258: CALL_OW 235
// end ;
8262: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8263: LD_EXP 30
8267: PUSH
8268: LD_INT 1
8270: EQUAL
8271: PUSH
8272: LD_INT 22
8274: PUSH
8275: LD_INT 0
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 25
8284: PUSH
8285: LD_INT 14
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PPUSH
8296: CALL_OW 69
8300: PUSH
8301: LD_INT 0
8303: EQUAL
8304: AND
8305: IFFALSE 8399
8307: GO 8309
8309: DISABLE
8310: LD_INT 0
8312: PPUSH
8313: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8314: LD_ADDR_VAR 0 2
8318: PUSH
8319: LD_INT 22
8321: PUSH
8322: LD_INT 1
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 21
8331: PUSH
8332: LD_INT 1
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PUSH
8339: LD_INT 23
8341: PUSH
8342: LD_INT 1
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: LIST
8353: PPUSH
8354: CALL_OW 69
8358: ST_TO_ADDR
// for i in tmp do
8359: LD_ADDR_VAR 0 1
8363: PUSH
8364: LD_VAR 0 2
8368: PUSH
8369: FOR_IN
8370: IFFALSE 8397
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8372: LD_VAR 0 1
8376: PPUSH
8377: LD_INT 1
8379: PPUSH
8380: LD_INT 4
8382: PPUSH
8383: CALL_OW 12
8387: PPUSH
8388: LD_INT 300
8390: PPUSH
8391: CALL_OW 492
// end ;
8395: GO 8369
8397: POP
8398: POP
// end ; end_of_file
8399: PPOPN 2
8401: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8402: LD_INT 0
8404: PPUSH
8405: PPUSH
8406: PPUSH
8407: PPUSH
// for i = 1 to count do
8408: LD_ADDR_VAR 0 8
8412: PUSH
8413: DOUBLE
8414: LD_INT 1
8416: DEC
8417: ST_TO_ADDR
8418: LD_VAR 0 6
8422: PUSH
8423: FOR_TO
8424: IFFALSE 8505
// begin uc_side = side ;
8426: LD_ADDR_OWVAR 20
8430: PUSH
8431: LD_VAR 0 1
8435: ST_TO_ADDR
// uc_nation = nation ;
8436: LD_ADDR_OWVAR 21
8440: PUSH
8441: LD_VAR 0 2
8445: ST_TO_ADDR
// hc_gallery =  ;
8446: LD_ADDR_OWVAR 33
8450: PUSH
8451: LD_STRING 
8453: ST_TO_ADDR
// hc_name =  ;
8454: LD_ADDR_OWVAR 26
8458: PUSH
8459: LD_STRING 
8461: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8462: LD_INT 0
8464: PPUSH
8465: LD_VAR 0 5
8469: PPUSH
8470: LD_VAR 0 4
8474: PPUSH
8475: CALL_OW 380
// un = CreateHuman ;
8479: LD_ADDR_VAR 0 10
8483: PUSH
8484: CALL_OW 44
8488: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8489: LD_VAR 0 10
8493: PPUSH
8494: LD_VAR 0 3
8498: PPUSH
8499: CALL_OW 52
// end ;
8503: GO 8423
8505: POP
8506: POP
// end ;
8507: LD_VAR 0 7
8511: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8512: LD_INT 0
8514: PPUSH
8515: PPUSH
8516: PPUSH
// uc_side := GetSide ( b ) ;
8517: LD_ADDR_OWVAR 20
8521: PUSH
8522: LD_VAR 0 2
8526: PPUSH
8527: CALL_OW 255
8531: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8532: LD_ADDR_OWVAR 21
8536: PUSH
8537: LD_VAR 0 2
8541: PPUSH
8542: CALL_OW 248
8546: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8547: LD_INT 0
8549: PPUSH
8550: LD_INT 1
8552: PPUSH
8553: LD_VAR 0 1
8557: PPUSH
8558: CALL_OW 380
// un = CreateHuman ;
8562: LD_ADDR_VAR 0 4
8566: PUSH
8567: CALL_OW 44
8571: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8572: LD_ADDR_VAR 0 5
8576: PUSH
8577: LD_VAR 0 2
8581: PPUSH
8582: CALL_OW 254
8586: PUSH
8587: LD_INT 3
8589: MINUS
8590: ST_TO_ADDR
// if dir < 0 then
8591: LD_VAR 0 5
8595: PUSH
8596: LD_INT 0
8598: LESS
8599: IFFALSE 8615
// dir := 6 + dir ;
8601: LD_ADDR_VAR 0 5
8605: PUSH
8606: LD_INT 6
8608: PUSH
8609: LD_VAR 0 5
8613: PLUS
8614: ST_TO_ADDR
// SetDir ( un , dir ) ;
8615: LD_VAR 0 4
8619: PPUSH
8620: LD_VAR 0 5
8624: PPUSH
8625: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8629: LD_VAR 0 4
8633: PPUSH
8634: LD_VAR 0 2
8638: PPUSH
8639: CALL_OW 52
// end ;
8643: LD_VAR 0 3
8647: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8648: LD_INT 0
8650: PPUSH
8651: PPUSH
8652: PPUSH
8653: PPUSH
8654: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8655: LD_ADDR_VAR 0 7
8659: PUSH
8660: LD_INT 22
8662: PUSH
8663: LD_VAR 0 1
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: LD_INT 25
8674: PUSH
8675: LD_INT 2
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PUSH
8682: LD_INT 24
8684: PUSH
8685: LD_INT 1000
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: LIST
8696: PPUSH
8697: CALL_OW 69
8701: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8702: LD_ADDR_VAR 0 5
8706: PUSH
8707: LD_VAR 0 3
8711: PPUSH
8712: LD_INT 22
8714: PUSH
8715: LD_VAR 0 1
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PUSH
8724: LD_INT 21
8726: PUSH
8727: LD_INT 3
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 3
8736: PUSH
8737: LD_INT 24
8739: PUSH
8740: LD_INT 1000
=======
5191: LD_EXP 8
5195: PPUSH
5196: LD_VAR 0 1
5200: PUSH
5201: LD_INT 1
5203: ARRAY
5204: PPUSH
5205: CALL_OW 119
// Wait ( 0 0$02 ) ;
5209: LD_INT 70
5211: PPUSH
5212: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5216: LD_EXP 8
5220: PPUSH
5221: LD_STRING D4-Mikh-1
5223: PPUSH
5224: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5228: LD_VAR 0 1
5232: PUSH
5233: LD_INT 1
5235: ARRAY
5236: PPUSH
5237: CALL_OW 258
5241: PUSH
5242: LD_INT 1
5244: EQUAL
5245: IFFALSE 5263
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5247: LD_VAR 0 1
5251: PUSH
5252: LD_INT 1
5254: ARRAY
5255: PPUSH
5256: LD_STRING D4-Sol1-1
5258: PPUSH
5259: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5263: LD_VAR 0 1
5267: PUSH
5268: LD_INT 1
5270: ARRAY
5271: PPUSH
5272: CALL_OW 258
5276: PUSH
5277: LD_INT 2
5279: EQUAL
5280: IFFALSE 5298
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5282: LD_VAR 0 1
5286: PUSH
5287: LD_INT 1
5289: ARRAY
5290: PPUSH
5291: LD_STRING D4-FSol1-1
5293: PPUSH
5294: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5298: LD_EXP 8
5302: PPUSH
5303: LD_STRING D4-Mikh-2
5305: PPUSH
5306: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5310: LD_VAR 0 1
5314: PUSH
5315: LD_INT 1
5317: ARRAY
5318: PPUSH
5319: CALL_OW 258
5323: PUSH
5324: LD_INT 1
5326: EQUAL
5327: IFFALSE 5345
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5329: LD_VAR 0 1
5333: PUSH
5334: LD_INT 1
5336: ARRAY
5337: PPUSH
5338: LD_STRING D4-Sol1-2
5340: PPUSH
5341: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5345: LD_VAR 0 1
5349: PUSH
5350: LD_INT 1
5352: ARRAY
5353: PPUSH
5354: CALL_OW 258
5358: PUSH
5359: LD_INT 2
5361: EQUAL
5362: IFFALSE 5380
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5364: LD_VAR 0 1
5368: PUSH
5369: LD_INT 1
5371: ARRAY
5372: PPUSH
5373: LD_STRING D4-FSol1-2
5375: PPUSH
5376: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5380: LD_EXP 8
5384: PPUSH
5385: LD_STRING D4-Mikh-3
5387: PPUSH
5388: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5392: LD_VAR 0 1
5396: PUSH
5397: LD_INT 1
5399: ARRAY
5400: PPUSH
5401: CALL_OW 258
5405: PUSH
5406: LD_INT 1
5408: EQUAL
5409: IFFALSE 5427
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5411: LD_VAR 0 1
5415: PUSH
5416: LD_INT 1
5418: ARRAY
5419: PPUSH
5420: LD_STRING D4-Sol1-3
5422: PPUSH
5423: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5427: LD_VAR 0 1
5431: PUSH
5432: LD_INT 1
5434: ARRAY
5435: PPUSH
5436: CALL_OW 258
5440: PUSH
5441: LD_INT 2
5443: EQUAL
5444: IFFALSE 5462
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5446: LD_VAR 0 1
5450: PUSH
5451: LD_INT 1
5453: ARRAY
5454: PPUSH
5455: LD_STRING D4-FSol1-3
5457: PPUSH
5458: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5462: LD_EXP 8
5466: PPUSH
5467: LD_STRING D4-Mikh-4
5469: PPUSH
5470: CALL_OW 88
// case query ( Qs1 ) of 1 :
5474: LD_STRING Qs1
5476: PPUSH
5477: CALL_OW 97
5481: PUSH
5482: LD_INT 1
5484: DOUBLE
5485: EQUAL
5486: IFTRUE 5490
5488: GO 5525
5490: POP
// begin InGameOff ;
5491: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5495: LD_INT 1
5497: PPUSH
5498: LD_INT 6
5500: PPUSH
5501: LD_INT 2
5503: PPUSH
5504: LD_INT 1
5506: PPUSH
5507: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5511: LD_EXP 8
5515: PPUSH
5516: LD_INT 17
5518: PPUSH
5519: CALL_OW 113
// end ; 2 :
5523: GO 6147
5525: LD_INT 2
5527: DOUBLE
5528: EQUAL
5529: IFTRUE 5533
5531: GO 6112
5533: POP
// begin repeat wait ( 0 0$1 ) ;
5534: LD_INT 35
5536: PPUSH
5537: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5541: LD_VAR 0 1
5545: PUSH
5546: LD_INT 1
5548: ARRAY
5549: PPUSH
5550: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5554: LD_VAR 0 1
5558: PUSH
5559: LD_INT 1
5561: ARRAY
5562: PPUSH
5563: LD_EXP 1
5567: PPUSH
5568: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5572: LD_EXP 8
5576: PPUSH
5577: LD_EXP 1
5581: PPUSH
5582: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5586: LD_EXP 1
5590: PPUSH
5591: LD_EXP 8
5595: PPUSH
5596: CALL_OW 296
5600: PUSH
5601: LD_INT 5
5603: LESS
5604: IFFALSE 5534
// ComTurnUnit ( Mikhail , JMM ) ;
5606: LD_EXP 8
5610: PPUSH
5611: LD_EXP 1
5615: PPUSH
5616: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5620: LD_EXP 1
5624: PPUSH
5625: LD_STRING D4b-JMM-1
5627: PPUSH
5628: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5632: LD_EXP 8
5636: PPUSH
5637: LD_STRING D4b-Mikh-1
5639: PPUSH
5640: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5644: LD_EXP 1
5648: PPUSH
5649: LD_STRING D4b-JMM-2
5651: PPUSH
5652: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5656: LD_EXP 8
5660: PPUSH
5661: LD_STRING D4b-Mikh-2
5663: PPUSH
5664: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5668: LD_EXP 1
5672: PPUSH
5673: LD_STRING D4b-JMM-3
5675: PPUSH
5676: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5680: LD_EXP 8
5684: PPUSH
5685: LD_STRING D4b-Mikh-3
5687: PPUSH
5688: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5692: LD_EXP 1
5696: PPUSH
5697: LD_STRING D4b-JMM-4
5699: PPUSH
5700: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5704: LD_EXP 8
5708: PPUSH
5709: LD_STRING D4b-Mikh-4
5711: PPUSH
5712: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5716: LD_EXP 1
5720: PPUSH
5721: LD_STRING D4b-JMM-5
5723: PPUSH
5724: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5728: LD_EXP 8
5732: PPUSH
5733: LD_STRING D4b-Mikh-5
5735: PPUSH
5736: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5740: LD_EXP 1
5744: PPUSH
5745: LD_STRING D4b-JMM-6
5747: PPUSH
5748: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5752: LD_EXP 8
5756: PPUSH
5757: LD_STRING D4b-Mikh-6
5759: PPUSH
5760: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5764: LD_EXP 1
5768: PPUSH
5769: LD_STRING D4b-JMM-7
5771: PPUSH
5772: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5776: LD_EXP 8
5780: PPUSH
5781: LD_STRING D4b-Mikh-7
5783: PPUSH
5784: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5788: LD_VAR 0 1
5792: PUSH
5793: LD_INT 1
5795: ARRAY
5796: PPUSH
5797: CALL_OW 258
5801: PUSH
5802: LD_INT 1
5804: EQUAL
5805: IFFALSE 5823
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5807: LD_VAR 0 1
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_STRING D4b-Sol1-7
5818: PPUSH
5819: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5823: LD_VAR 0 1
5827: PUSH
5828: LD_INT 1
5830: ARRAY
5831: PPUSH
5832: CALL_OW 258
5836: PUSH
5837: LD_INT 2
5839: EQUAL
5840: IFFALSE 5858
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5842: LD_VAR 0 1
5846: PUSH
5847: LD_INT 1
5849: ARRAY
5850: PPUSH
5851: LD_STRING D4b-FSol1-7
5853: PPUSH
5854: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5858: LD_EXP 1
5862: PPUSH
5863: LD_STRING D4b-JMM-8
5865: PPUSH
5866: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5870: LD_VAR 0 1
5874: PUSH
5875: LD_INT 1
5877: ARRAY
5878: PPUSH
5879: CALL_OW 258
5883: PUSH
5884: LD_INT 1
5886: EQUAL
5887: IFFALSE 5905
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5889: LD_VAR 0 1
5893: PUSH
5894: LD_INT 1
5896: ARRAY
5897: PPUSH
5898: LD_STRING D4b-Sol1-8
5900: PPUSH
5901: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5905: LD_VAR 0 1
5909: PUSH
5910: LD_INT 1
5912: ARRAY
5913: PPUSH
5914: CALL_OW 258
5918: PUSH
5919: LD_INT 2
5921: EQUAL
5922: IFFALSE 5940
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
5924: LD_VAR 0 1
5928: PUSH
5929: LD_INT 1
5931: ARRAY
5932: PPUSH
5933: LD_STRING D4b-FSol1-8
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-9
5947: PPUSH
5948: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_INT 1
5959: PPUSH
5960: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5964: LD_ADDR_VAR 0 2
5968: PUSH
5969: LD_INT 22
5971: PUSH
5972: LD_INT 1
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: EMPTY
5980: LIST
5981: PPUSH
5982: CALL_OW 69
5986: PUSH
5987: FOR_IN
5988: IFFALSE 6001
// ComFree ( i ) ;
5990: LD_VAR 0 2
5994: PPUSH
5995: CALL_OW 139
5999: GO 5987
6001: POP
6002: POP
// repeat wait ( 0 0$1 ) ;
6003: LD_INT 35
6005: PPUSH
6006: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6010: LD_EXP 8
6014: PPUSH
6015: CALL_OW 87
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
6019: LD_EXP 8
6023: PPUSH
6024: LD_INT 1
6026: PPUSH
6027: CALL_OW 296
6031: PUSH
6032: LD_EXP 8
6036: PPUSH
6037: LD_INT 10
6039: PPUSH
6040: CALL_OW 296
6044: LESS
6045: IFFALSE 6061
// begin ComEnterUnit ( Mikhail , dep1 ) ;
6047: LD_EXP 8
6051: PPUSH
6052: LD_INT 1
6054: PPUSH
6055: CALL_OW 120
// end else
6059: GO 6073
// begin ComEnterUnit ( Mikhail , dep2 ) ;
6061: LD_EXP 8
6065: PPUSH
6066: LD_INT 10
6068: PPUSH
6069: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
6073: LD_EXP 8
6077: PPUSH
6078: CALL_OW 310
6082: IFFALSE 6003
// mikhailDepot = IsInUnit ( Mikhail ) ;
6084: LD_ADDR_EXP 23
6088: PUSH
6089: LD_EXP 8
6093: PPUSH
6094: CALL_OW 310
6098: ST_TO_ADDR
// InGameOff ;
6099: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6103: LD_STRING M3
6105: PPUSH
6106: CALL_OW 337
// end ; 3 :
6110: GO 6147
6112: LD_INT 3
6114: DOUBLE
6115: EQUAL
6116: IFTRUE 6120
6118: GO 6146
6120: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6121: LD_EXP 8
6125: PPUSH
6126: LD_INT 17
6128: PPUSH
6129: CALL_OW 113
// wait ( 0 0$3 ) ;
6133: LD_INT 105
6135: PPUSH
6136: CALL_OW 67
// InGameOff ;
6140: CALL_OW 9
// end ; end ;
6144: GO 6147
6146: POP
// PrepareTigers ;
6147: CALL 13877 0 0
// RussianTrap ;
6151: CALL 9878 0 0
// tigersRespawn = 1 ;
6155: LD_ADDR_EXP 29
6159: PUSH
6160: LD_INT 1
6162: ST_TO_ADDR
// end ;
6163: PPOPN 2
6165: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6166: LD_INT 1
6168: PPUSH
6169: CALL_OW 255
6173: PUSH
6174: LD_INT 1
6176: EQUAL
6177: PUSH
6178: LD_INT 10
6180: PPUSH
6181: CALL_OW 255
6185: PUSH
6186: LD_INT 1
6188: EQUAL
6189: AND
6190: PUSH
6191: LD_INT 1
6193: PPUSH
6194: CALL_OW 274
6198: PPUSH
6199: LD_INT 1
6201: PPUSH
6202: CALL_OW 275
6206: PUSH
6207: LD_INT 100
6209: GREATEREQUAL
6210: AND
6211: IFFALSE 6374
6213: GO 6215
6215: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6216: LD_INT 2100
6218: PPUSH
6219: LD_INT 4200
6221: PPUSH
6222: CALL_OW 12
6226: PUSH
6227: LD_INT 1050
6229: PLUS
6230: PPUSH
6231: CALL_OW 67
// PrepareCargoBays ;
6235: CALL 12360 0 0
// cargoRespawn = 1 ;
6239: LD_ADDR_EXP 28
6243: PUSH
6244: LD_INT 1
6246: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6247: LD_EXP 15
6251: PUSH
6252: LD_EXP 16
6256: PUSH
6257: LD_EXP 17
6261: PUSH
6262: LD_EXP 18
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: PPUSH
6273: LD_INT 36
6275: PPUSH
6276: LD_INT 13
6278: PPUSH
6279: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6283: LD_EXP 15
6287: PUSH
6288: LD_EXP 16
6292: PUSH
6293: LD_EXP 17
6297: PUSH
6298: LD_EXP 18
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: PPUSH
6309: LD_INT 40
6311: PPUSH
6312: LD_INT 20
6314: PPUSH
6315: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6319: LD_EXP 15
6323: PUSH
6324: LD_EXP 16
6328: PUSH
6329: LD_EXP 17
6333: PUSH
6334: LD_EXP 18
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PPUSH
6345: LD_INT 53
6347: PPUSH
6348: LD_INT 16
6350: PPUSH
6351: CALL_OW 171
// wait ( 0 0$5 ) ;
6355: LD_INT 175
6357: PPUSH
6358: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6362: LD_EXP 17
6366: PPUSH
6367: LD_STRING D5-Rus2-1
6369: PPUSH
6370: CALL_OW 88
// end ;
6374: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6375: LD_EXP 28
6379: PUSH
6380: LD_INT 1
6382: EQUAL
6383: IFFALSE 6573
6385: GO 6387
6387: DISABLE
6388: LD_INT 0
6390: PPUSH
6391: PPUSH
6392: PPUSH
6393: PPUSH
// begin enable ;
6394: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6395: LD_ADDR_VAR 0 3
6399: PUSH
6400: LD_INT 22
6402: PUSH
6403: LD_INT 3
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 21
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 34
6422: PUSH
6423: LD_INT 51
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: LIST
6434: PPUSH
6435: CALL_OW 69
6439: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
6440: LD_ADDR_VAR 0 4
6444: PUSH
6445: LD_INT 22
6447: PUSH
6448: LD_INT 1
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PUSH
6455: LD_INT 23
6457: PUSH
6458: LD_INT 1
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PPUSH
6469: CALL_OW 69
6473: ST_TO_ADDR
// for i in tmp1 do
6474: LD_ADDR_VAR 0 1
6478: PUSH
6479: LD_VAR 0 3
6483: PUSH
6484: FOR_IN
6485: IFFALSE 6571
// begin for j in tmp2 do
6487: LD_ADDR_VAR 0 2
6491: PUSH
6492: LD_VAR 0 4
6496: PUSH
6497: FOR_IN
6498: IFFALSE 6567
// begin if GetDistUnits ( i , j ) < 7 then
6500: LD_VAR 0 1
6504: PPUSH
6505: LD_VAR 0 2
6509: PPUSH
6510: CALL_OW 296
6514: PUSH
6515: LD_INT 7
6517: LESS
6518: IFFALSE 6565
// begin disable ;
6520: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6521: LD_EXP 15
6525: PUSH
6526: LD_EXP 16
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: LD_INT 7
6537: PPUSH
6538: LD_INT 9
6540: PPUSH
6541: CALL_OW 111
// Say ( driver1 , D5-Rus2-1a ) ;
6545: LD_EXP 17
6549: PPUSH
6550: LD_STRING D5-Rus2-1a
6552: PPUSH
6553: CALL_OW 88
// cargoEscape = 1 ;
6557: LD_ADDR_EXP 20
6561: PUSH
6562: LD_INT 1
6564: ST_TO_ADDR
// end ; end ;
6565: GO 6497
6567: POP
6568: POP
// end ;
6569: GO 6484
6571: POP
6572: POP
// end ;
6573: PPOPN 4
6575: END
// every 0 0$1 trigger cargoEscape > 0 do
6576: LD_EXP 20
6580: PUSH
6581: LD_INT 0
6583: GREATER
6584: IFFALSE 6710
6586: GO 6588
6588: DISABLE
// begin enable ;
6589: ENABLE
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6590: LD_EXP 15
6594: PPUSH
6595: LD_INT 13
6597: PPUSH
6598: CALL_OW 308
6602: PUSH
6603: LD_EXP 17
6607: PPUSH
6608: LD_INT 13
6610: PPUSH
6611: CALL_OW 308
6615: OR
6616: IFFALSE 6650
// begin RemoveUnit ( cargo1 ) ;
6618: LD_EXP 15
6622: PPUSH
6623: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6627: LD_EXP 17
6631: PPUSH
6632: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6636: LD_ADDR_EXP 20
6640: PUSH
6641: LD_EXP 20
6645: PUSH
6646: LD_INT 1
6648: PLUS
6649: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6650: LD_EXP 16
6654: PPUSH
6655: LD_INT 13
6657: PPUSH
6658: CALL_OW 308
6662: PUSH
6663: LD_EXP 18
6667: PPUSH
6668: LD_INT 13
6670: PPUSH
6671: CALL_OW 308
6675: OR
6676: IFFALSE 6710
// begin RemoveUnit ( cargo2 ) ;
6678: LD_EXP 16
6682: PPUSH
6683: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6687: LD_EXP 18
6691: PPUSH
6692: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6696: LD_ADDR_EXP 20
6700: PUSH
6701: LD_EXP 20
6705: PUSH
6706: LD_INT 1
6708: PLUS
6709: ST_TO_ADDR
// end ; end ;
6710: END
// every 0 0$1 trigger cargoEscape > 1 do
6711: LD_EXP 20
6715: PUSH
6716: LD_INT 1
6718: GREATER
6719: IFFALSE 6883
6721: GO 6723
6723: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
6724: LD_INT 4
6726: PPUSH
6727: LD_INT 1
6729: PPUSH
6730: LD_INT 1
6732: PPUSH
6733: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6737: LD_INT 31
6739: PPUSH
6740: LD_INT 1
6742: PPUSH
6743: LD_INT 1
6745: PPUSH
6746: CALL_OW 324
// if IsOK ( Jerry ) then
6750: LD_EXP 7
6754: PPUSH
6755: CALL_OW 302
6759: IFFALSE 6775
// begin Say ( Jerry , D5a-Sol1-1 ) ;
6761: LD_EXP 7
6765: PPUSH
6766: LD_STRING D5a-Sol1-1
6768: PPUSH
6769: CALL_OW 88
// end else
6773: GO 6871
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
6775: LD_INT 22
6777: PUSH
6778: LD_INT 1
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: LD_INT 23
6787: PUSH
6788: LD_INT 1
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PUSH
6795: LD_INT 26
6797: PUSH
6798: LD_INT 1
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: LIST
6809: PPUSH
6810: CALL_OW 69
6814: PUSH
6815: LD_INT 2
6817: PPUSH
6818: LD_INT 22
6820: PUSH
6821: LD_INT 1
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PUSH
6828: LD_INT 23
6830: PUSH
6831: LD_INT 1
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 26
6840: PUSH
6841: LD_INT 1
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: LIST
6852: PPUSH
6853: CALL_OW 69
6857: PPUSH
6858: CALL_OW 12
6862: ARRAY
6863: PPUSH
6864: LD_STRING D5a-Sol1-1
6866: PPUSH
6867: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6871: LD_EXP 1
6875: PPUSH
6876: LD_STRING D5a-JMM-1
6878: PPUSH
6879: CALL_OW 88
// end ;
6883: END
// every 0 0$1 trigger GetLives ( dep1 ) < 1000 or GetLives ( dep2 ) < 1000 do
6884: LD_INT 1
6886: PPUSH
6887: CALL_OW 256
6891: PUSH
6892: LD_INT 1000
6894: LESS
6895: PUSH
6896: LD_INT 10
6898: PPUSH
6899: CALL_OW 256
6903: PUSH
6904: LD_INT 1000
6906: LESS
6907: OR
6908: IFFALSE 6925
6910: GO 6912
6912: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
6913: LD_EXP 1
6917: PPUSH
6918: LD_STRING D8-JMM-1
6920: PPUSH
6921: CALL_OW 88
// end ;
6925: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6926: LD_EXP 8
6930: PPUSH
6931: CALL_OW 310
6935: PUSH
6936: LD_INT 1
6938: EQUAL
6939: PUSH
6940: LD_EXP 22
6944: PUSH
6945: LD_INT 3
6947: EQUAL
6948: NOT
6949: AND
6950: IFFALSE 6972
6952: GO 6954
6954: DISABLE
// begin mikhailInBase = 1 ;
6955: LD_ADDR_EXP 22
6959: PUSH
6960: LD_INT 1
6962: ST_TO_ADDR
// mikhailStatus = 1 ;
6963: LD_ADDR_EXP 21
6967: PUSH
6968: LD_INT 1
6970: ST_TO_ADDR
// enable ;
6971: ENABLE
// end ;
6972: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
6973: LD_EXP 8
6977: PPUSH
6978: LD_INT 25
6980: PPUSH
6981: CALL_OW 308
6985: PUSH
6986: LD_EXP 22
6990: PUSH
6991: LD_INT 1
6993: EQUAL
6994: AND
6995: PUSH
6996: LD_EXP 8
7000: PPUSH
7001: CALL_OW 255
7005: PUSH
7006: LD_INT 1
7008: EQUAL
7009: AND
7010: IFFALSE 7340
7012: GO 7014
7014: DISABLE
// begin enable ;
7015: ENABLE
// case query ( QMikh2 ) of 1 :
7016: LD_STRING QMikh2
7018: PPUSH
7019: CALL_OW 97
7023: PUSH
7024: LD_INT 1
7026: DOUBLE
7027: EQUAL
7028: IFTRUE 7032
7030: GO 7099
7032: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7033: LD_INT 1
7035: PPUSH
7036: LD_INT 6
7038: PPUSH
7039: LD_INT 2
7041: PPUSH
7042: LD_INT 1
7044: PPUSH
7045: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7049: LD_EXP 8
7053: PPUSH
7054: LD_INT 6
7056: PPUSH
7057: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7061: LD_EXP 8
7065: PPUSH
7066: CALL_OW 122
// wait ( 0 0$1 ) ;
7070: LD_INT 35
7072: PPUSH
7073: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7077: LD_EXP 8
7081: PPUSH
7082: LD_INT 17
7084: PPUSH
7085: CALL_OW 113
// mikhailInbase = 0 ;
7089: LD_ADDR_EXP 22
7093: PUSH
7094: LD_INT 0
7096: ST_TO_ADDR
// end ; 2 :
7097: GO 7340
7099: LD_INT 2
7101: DOUBLE
7102: EQUAL
7103: IFTRUE 7107
7105: GO 7280
7107: POP
// begin mikhailInBase = 2 ;
7108: LD_ADDR_EXP 22
7112: PUSH
7113: LD_INT 2
7115: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7116: LD_EXP 8
7120: PPUSH
7121: LD_INT 6
7123: PPUSH
7124: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7128: LD_EXP 8
7132: PPUSH
7133: CALL_OW 122
// wait ( 0 0$1 ) ;
7137: LD_INT 35
7139: PPUSH
7140: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7144: LD_EXP 8
7148: PPUSH
7149: LD_EXP 8
7153: PPUSH
7154: CALL_OW 250
7158: PUSH
7159: LD_INT 2
7161: PLUS
7162: PPUSH
7163: LD_EXP 8
7167: PPUSH
7168: CALL_OW 251
7172: PUSH
7173: LD_INT 2
7175: PLUS
7176: PPUSH
7177: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7181: LD_EXP 8
7185: PPUSH
7186: LD_EXP 8
7190: PPUSH
7191: CALL_OW 250
7195: PUSH
7196: LD_INT 1
7198: PLUS
7199: PPUSH
7200: LD_EXP 8
7204: PPUSH
7205: CALL_OW 251
7209: PUSH
7210: LD_INT 2
7212: PLUS
7213: PPUSH
7214: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7218: LD_EXP 8
7222: PPUSH
7223: LD_EXP 8
7227: PPUSH
7228: CALL_OW 250
7232: PUSH
7233: LD_INT 2
7235: PLUS
7236: PPUSH
7237: LD_EXP 8
7241: PPUSH
7242: CALL_OW 251
7246: PPUSH
7247: CALL_OW 171
// wait ( 0 0$5 ) ;
7251: LD_INT 175
7253: PPUSH
7254: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7258: LD_EXP 8
7262: PPUSH
7263: LD_INT 25
7265: PPUSH
7266: CALL_OW 113
// mikhailInBase = 4 ;
7270: LD_ADDR_EXP 22
7274: PUSH
7275: LD_INT 4
7277: ST_TO_ADDR
// end ; 3 :
7278: GO 7340
7280: LD_INT 3
7282: DOUBLE
7283: EQUAL
7284: IFTRUE 7288
7286: GO 7339
7288: POP
// begin SetSide ( Mikhail , 6 ) ;
7289: LD_EXP 8
7293: PPUSH
7294: LD_INT 6
7296: PPUSH
7297: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7301: LD_EXP 8
7305: PPUSH
7306: CALL_OW 122
// wait ( 0 0$1 ) ;
7310: LD_INT 35
7312: PPUSH
7313: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7317: LD_EXP 8
7321: PPUSH
7322: LD_INT 17
7324: PPUSH
7325: CALL_OW 113
// mikhailInbase = 3 ;
7329: LD_ADDR_EXP 22
7333: PUSH
7334: LD_INT 3
7336: ST_TO_ADDR
// end ; end ;
7337: GO 7340
7339: POP
// end ;
7340: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7341: LD_EXP 8
7345: PPUSH
7346: LD_INT 25
7348: PPUSH
7349: CALL_OW 308
7353: PUSH
7354: LD_EXP 22
7358: PUSH
7359: LD_INT 4
7361: EQUAL
7362: AND
7363: IFFALSE 7461
7365: GO 7367
7367: DISABLE
// begin enable ;
7368: ENABLE
// SetSide ( Mikhail , 1 ) ;
7369: LD_EXP 8
7373: PPUSH
7374: LD_INT 1
7376: PPUSH
7377: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7381: LD_INT 35
7383: PPUSH
7384: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
7388: LD_EXP 8
7392: PPUSH
7393: LD_INT 1
7395: PPUSH
7396: CALL_OW 296
7400: PUSH
7401: LD_EXP 8
7405: PPUSH
7406: LD_INT 10
7408: PPUSH
7409: CALL_OW 296
7413: LESS
7414: IFFALSE 7430
// begin ComEnterUnit ( Mikhail , dep1 ) ;
7416: LD_EXP 8
7420: PPUSH
7421: LD_INT 1
7423: PPUSH
7424: CALL_OW 120
// end else
7428: GO 7442
// begin ComEnterUnit ( Mikhail , dep2 ) ;
7430: LD_EXP 8
7434: PPUSH
7435: LD_INT 10
7437: PPUSH
7438: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
7442: LD_EXP 8
7446: PPUSH
7447: CALL_OW 310
7451: IFFALSE 7381
// mikhailInBase = 1 ;
7453: LD_ADDR_EXP 22
7457: PUSH
7458: LD_INT 1
7460: ST_TO_ADDR
// end ;
7461: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7462: LD_EXP 8
7466: PPUSH
7467: CALL_OW 310
7471: PUSH
7472: LD_EXP 22
7476: PUSH
7477: LD_INT 3
7479: EQUAL
7480: NOT
7481: AND
7482: IFFALSE 7608
7484: GO 7486
7486: DISABLE
// begin enable ;
7487: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7488: LD_INT 22
7490: PUSH
7491: LD_INT 1
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 21
7500: PUSH
7501: LD_INT 1
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_INT 91
7510: PUSH
7511: LD_EXP 8
7515: PPUSH
7516: CALL_OW 310
7520: PUSH
7521: LD_INT 10
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: PPUSH
7534: CALL_OW 69
7538: PUSH
7539: LD_INT 1
7541: EQUAL
7542: IFFALSE 7608
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7544: LD_INT 1
7546: PPUSH
7547: LD_INT 6
7549: PPUSH
7550: LD_INT 2
7552: PPUSH
7553: LD_INT 1
7555: PPUSH
7556: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7560: LD_EXP 8
7564: PPUSH
7565: LD_INT 6
7567: PPUSH
7568: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7572: LD_EXP 8
7576: PPUSH
7577: CALL_OW 122
// wait ( 0 0$1 ) ;
7581: LD_INT 35
7583: PPUSH
7584: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7588: LD_EXP 8
7592: PPUSH
7593: LD_INT 17
7595: PPUSH
7596: CALL_OW 113
// mikhailStatus = 3 ;
7600: LD_ADDR_EXP 21
7604: PUSH
7605: LD_INT 3
7607: ST_TO_ADDR
// end ; end ;
7608: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7609: LD_EXP 1
7613: PPUSH
7614: LD_EXP 23
7618: PPUSH
7619: CALL_OW 296
7623: PUSH
7624: LD_INT 5
7626: LESS
7627: PUSH
7628: LD_EXP 21
7632: PUSH
7633: LD_INT 3
7635: EQUAL
7636: AND
7637: PUSH
7638: LD_EXP 22
7642: PUSH
7643: LD_INT 3
7645: EQUAL
7646: NOT
7647: AND
7648: IFFALSE 7864
7650: GO 7652
7652: DISABLE
7653: LD_INT 0
7655: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
7656: LD_ADDR_VAR 0 1
7660: PUSH
7661: LD_INT 22
7663: PUSH
7664: LD_INT 1
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 21
7673: PUSH
7674: LD_INT 1
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 26
7683: PUSH
7684: LD_INT 1
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: LIST
7695: PPUSH
7696: CALL_OW 69
7700: PUSH
7701: LD_EXP 1
7705: PUSH
7706: EMPTY
7707: LIST
7708: DIFF
7709: ST_TO_ADDR
// DialogueOn ;
7710: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7714: LD_EXP 1
7718: PPUSH
7719: LD_STRING D7-JMM-1
7721: PPUSH
7722: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7726: LD_VAR 0 1
7730: PUSH
7731: LD_INT 1
7733: ARRAY
7734: PPUSH
7735: LD_STRING D7-Sol1-1
7737: PPUSH
7738: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7742: LD_EXP 1
7746: PPUSH
7747: LD_STRING D7-JMM-2
7749: PPUSH
7750: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7754: LD_VAR 0 1
7758: PUSH
7759: LD_INT 1
7761: ARRAY
7762: PPUSH
7763: LD_STRING D7-Sol1-2
7765: PPUSH
7766: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7770: LD_EXP 1
7774: PPUSH
7775: LD_STRING D7-JMM-3
7777: PPUSH
7778: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7782: LD_VAR 0 1
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: PPUSH
7791: LD_STRING D7-Sol1-3
7793: PPUSH
7794: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7798: LD_EXP 3
7802: PPUSH
7803: CALL_OW 302
7807: PUSH
7808: LD_EXP 4
7812: PPUSH
7813: CALL_OW 302
7817: AND
7818: IFFALSE 7860
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7820: LD_EXP 3
7824: PPUSH
7825: LD_STRING D7-Cyrus-3
7827: PPUSH
7828: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7832: LD_VAR 0 1
7836: PUSH
7837: LD_INT 1
7839: ARRAY
7840: PPUSH
7841: LD_STRING D7-Sol1-4
7843: PPUSH
7844: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7848: LD_EXP 4
7852: PPUSH
7853: LD_STRING D7-Lisa-4
7855: PPUSH
7856: CALL_OW 88
// end ; DialogueOff ;
7860: CALL_OW 7
// end ;
7864: PPOPN 1
7866: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7867: LD_EXP 8
7871: PPUSH
7872: CALL_OW 303
7876: PUSH
7877: LD_EXP 21
7881: PUSH
7882: LD_INT 3
7884: EQUAL
7885: AND
7886: IFFALSE 7900
7888: GO 7890
7890: DISABLE
// begin enable ;
7891: ENABLE
// mikhailStatus = 2 ;
7892: LD_ADDR_EXP 21
7896: PUSH
7897: LD_INT 2
7899: ST_TO_ADDR
// end ;
7900: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7901: LD_EXP 8
7905: PPUSH
7906: LD_INT 17
7908: PPUSH
7909: CALL_OW 308
7913: PUSH
7914: LD_EXP 8
7918: PPUSH
7919: CALL_OW 255
7923: PUSH
7924: LD_INT 6
7926: EQUAL
7927: AND
7928: IFFALSE 7961
7930: GO 7932
7932: DISABLE
// begin if not mikhailInBase = 3 then
7933: LD_EXP 22
7937: PUSH
7938: LD_INT 3
7940: EQUAL
7941: NOT
7942: IFFALSE 7952
// mikhailStatus = 3 ;
7944: LD_ADDR_EXP 21
7948: PUSH
7949: LD_INT 3
7951: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
7952: LD_EXP 8
7956: PPUSH
7957: CALL_OW 64
// end ;
7961: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
7962: LD_EXP 21
7966: PUSH
7967: LD_INT 3
7969: EQUAL
7970: PUSH
7971: LD_EXP 8
7975: PPUSH
7976: CALL_OW 255
7980: PUSH
7981: LD_INT 6
7983: EQUAL
7984: AND
7985: IFFALSE 8151
7987: GO 7989
7989: DISABLE
7990: LD_INT 0
7992: PPUSH
7993: PPUSH
// begin enable ;
7994: ENABLE
// if IsOk ( Mikhail ) then
7995: LD_EXP 8
7999: PPUSH
8000: CALL_OW 302
8004: IFFALSE 8151
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8006: LD_ADDR_VAR 0 2
8010: PUSH
8011: LD_EXP 8
8015: PPUSH
8016: LD_INT 22
8018: PUSH
8019: LD_INT 1
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PUSH
8026: LD_INT 21
8028: PUSH
8029: LD_INT 1
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: PPUSH
8040: CALL_OW 69
8044: PPUSH
8045: CALL 10034 0 2
8049: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8050: LD_VAR 0 2
8054: PPUSH
8055: LD_EXP 8
8059: PPUSH
8060: CALL_OW 296
8064: PUSH
8065: LD_INT 8
8067: LESS
8068: IFFALSE 8151
// begin if GetSex ( attacker ) = sex_male then
8070: LD_VAR 0 2
8074: PPUSH
8075: CALL_OW 258
8079: PUSH
8080: LD_INT 1
8082: EQUAL
8083: IFFALSE 8119
// begin disable ;
8085: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8086: LD_VAR 0 2
8090: PPUSH
8091: LD_STRING D7a-Sol1-1
8093: PPUSH
8094: CALL_OW 88
// wait ( 0 0$2 ) ;
8098: LD_INT 70
8100: PPUSH
8101: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8105: LD_VAR 0 2
8109: PPUSH
8110: LD_STRING D7a-Sol1-1a
8112: PPUSH
8113: CALL_OW 88
// end else
8117: GO 8151
// begin disable ;
8119: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8120: LD_VAR 0 2
8124: PPUSH
8125: LD_STRING D7a-FSol1-1
8127: PPUSH
8128: CALL_OW 88
// wait ( 0 0$2 ) ;
8132: LD_INT 70
8134: PPUSH
8135: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8139: LD_VAR 0 2
8143: PPUSH
8144: LD_STRING D7a-FSol1-1a
8146: PPUSH
8147: CALL_OW 88
// end ; end ; end ; end ;
8151: PPOPN 2
8153: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8154: LD_EXP 27
8158: PUSH
8159: LD_INT 1
8161: EQUAL
8162: PUSH
8163: LD_INT 22
8165: PPUSH
8166: LD_INT 22
8168: PUSH
8169: LD_INT 3
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 21
8178: PUSH
8179: LD_INT 1
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PPUSH
8190: CALL_OW 70
8194: PUSH
8195: LD_INT 2
8197: GREATER
8198: AND
8199: PUSH
8200: LD_INT 22
8202: PPUSH
8203: LD_INT 22
8205: PUSH
8206: LD_INT 1
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: PUSH
8213: LD_INT 2
8215: PUSH
8216: LD_INT 21
8218: PUSH
8219: LD_INT 1
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: PUSH
8226: LD_INT 59
8228: PUSH
8229: EMPTY
8230: LIST
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PPUSH
8241: CALL_OW 70
8245: PUSH
8246: LD_INT 0
8248: EQUAL
8249: AND
8250: IFFALSE 8265
8252: GO 8254
8254: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8255: LD_INT 1
8257: PPUSH
8258: LD_INT 3
8260: PPUSH
8261: CALL_OW 235
// end ;
8265: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8266: LD_EXP 29
8270: PUSH
8271: LD_INT 1
8273: EQUAL
8274: PUSH
8275: LD_INT 22
8277: PUSH
8278: LD_INT 0
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: PUSH
8285: LD_INT 25
8287: PUSH
8288: LD_INT 14
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PPUSH
8299: CALL_OW 69
8303: PUSH
8304: LD_INT 0
8306: EQUAL
8307: AND
8308: IFFALSE 8402
8310: GO 8312
8312: DISABLE
8313: LD_INT 0
8315: PPUSH
8316: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8317: LD_ADDR_VAR 0 2
8321: PUSH
8322: LD_INT 22
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 21
8334: PUSH
8335: LD_INT 1
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: LD_INT 23
8344: PUSH
8345: LD_INT 1
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: LIST
8356: PPUSH
8357: CALL_OW 69
8361: ST_TO_ADDR
// for i in tmp do
8362: LD_ADDR_VAR 0 1
8366: PUSH
8367: LD_VAR 0 2
8371: PUSH
8372: FOR_IN
8373: IFFALSE 8400
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8375: LD_VAR 0 1
8379: PPUSH
8380: LD_INT 1
8382: PPUSH
8383: LD_INT 4
8385: PPUSH
8386: CALL_OW 12
8390: PPUSH
8391: LD_INT 300
8393: PPUSH
8394: CALL_OW 492
// end ;
8398: GO 8372
8400: POP
8401: POP
// end ; end_of_file
8402: PPOPN 2
8404: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8405: LD_INT 0
8407: PPUSH
8408: PPUSH
8409: PPUSH
8410: PPUSH
// for i = 1 to count do
8411: LD_ADDR_VAR 0 8
8415: PUSH
8416: DOUBLE
8417: LD_INT 1
8419: DEC
8420: ST_TO_ADDR
8421: LD_VAR 0 6
8425: PUSH
8426: FOR_TO
8427: IFFALSE 8508
// begin uc_side = side ;
8429: LD_ADDR_OWVAR 20
8433: PUSH
8434: LD_VAR 0 1
8438: ST_TO_ADDR
// uc_nation = nation ;
8439: LD_ADDR_OWVAR 21
8443: PUSH
8444: LD_VAR 0 2
8448: ST_TO_ADDR
// hc_gallery =  ;
8449: LD_ADDR_OWVAR 33
8453: PUSH
8454: LD_STRING 
8456: ST_TO_ADDR
// hc_name =  ;
8457: LD_ADDR_OWVAR 26
8461: PUSH
8462: LD_STRING 
8464: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8465: LD_INT 0
8467: PPUSH
8468: LD_VAR 0 5
8472: PPUSH
8473: LD_VAR 0 4
8477: PPUSH
8478: CALL_OW 380
// un = CreateHuman ;
8482: LD_ADDR_VAR 0 10
8486: PUSH
8487: CALL_OW 44
8491: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8492: LD_VAR 0 10
8496: PPUSH
8497: LD_VAR 0 3
8501: PPUSH
8502: CALL_OW 52
// end ;
8506: GO 8426
8508: POP
8509: POP
// end ;
8510: LD_VAR 0 7
8514: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8515: LD_INT 0
8517: PPUSH
8518: PPUSH
8519: PPUSH
// uc_side := GetSide ( b ) ;
8520: LD_ADDR_OWVAR 20
8524: PUSH
8525: LD_VAR 0 2
8529: PPUSH
8530: CALL_OW 255
8534: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8535: LD_ADDR_OWVAR 21
8539: PUSH
8540: LD_VAR 0 2
8544: PPUSH
8545: CALL_OW 248
8549: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8550: LD_INT 0
8552: PPUSH
8553: LD_INT 1
8555: PPUSH
8556: LD_VAR 0 1
8560: PPUSH
8561: CALL_OW 380
// un = CreateHuman ;
8565: LD_ADDR_VAR 0 4
8569: PUSH
8570: CALL_OW 44
8574: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8575: LD_ADDR_VAR 0 5
8579: PUSH
8580: LD_VAR 0 2
8584: PPUSH
8585: CALL_OW 254
8589: PUSH
8590: LD_INT 3
8592: MINUS
8593: ST_TO_ADDR
// if dir < 0 then
8594: LD_VAR 0 5
8598: PUSH
8599: LD_INT 0
8601: LESS
8602: IFFALSE 8618
// dir := 6 + dir ;
8604: LD_ADDR_VAR 0 5
8608: PUSH
8609: LD_INT 6
8611: PUSH
8612: LD_VAR 0 5
8616: PLUS
8617: ST_TO_ADDR
// SetDir ( un , dir ) ;
8618: LD_VAR 0 4
8622: PPUSH
8623: LD_VAR 0 5
8627: PPUSH
8628: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8632: LD_VAR 0 4
8636: PPUSH
8637: LD_VAR 0 2
8641: PPUSH
8642: CALL_OW 52
// end ;
8646: LD_VAR 0 3
8650: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8651: LD_INT 0
8653: PPUSH
8654: PPUSH
8655: PPUSH
8656: PPUSH
8657: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8658: LD_ADDR_VAR 0 7
8662: PUSH
8663: LD_INT 22
8665: PUSH
8666: LD_VAR 0 1
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 25
8677: PUSH
8678: LD_INT 2
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PUSH
8685: LD_INT 24
8687: PUSH
8688: LD_INT 1000
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: LIST
8699: PPUSH
8700: CALL_OW 69
8704: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8705: LD_ADDR_VAR 0 5
8709: PUSH
8710: LD_VAR 0 3
8714: PPUSH
8715: LD_INT 22
8717: PUSH
8718: LD_VAR 0 1
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 21
8729: PUSH
8730: LD_INT 3
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: LD_INT 3
8739: PUSH
8740: LD_INT 24
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
8742: PUSH
8743: LD_INT 1000
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
<<<<<<< HEAD
8749: LIST
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: LIST
8755: PUSH
8756: EMPTY
8757: LIST
8758: PPUSH
8759: CALL_OW 70
8763: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8764: LD_VAR 0 5
8768: PUSH
8769: LD_INT 0
8771: GREATER
8772: PUSH
8773: LD_VAR 0 7
8777: PUSH
8778: LD_INT 0
8780: GREATER
8781: AND
8782: IFFALSE 8848
// begin for i in engineerOk_list do
8784: LD_ADDR_VAR 0 6
8788: PUSH
8789: LD_VAR 0 7
8793: PUSH
8794: FOR_IN
8795: IFFALSE 8846
// begin for j in buildings_list do
8797: LD_ADDR_VAR 0 8
8801: PUSH
8802: LD_VAR 0 5
8806: PUSH
8807: FOR_IN
8808: IFFALSE 8842
// begin AddComExitBuilding ( i ) ;
8810: LD_VAR 0 6
8814: PPUSH
8815: CALL_OW 182
// wait ( 0 0$1 ) ;
8819: LD_INT 35
8821: PPUSH
8822: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8826: LD_VAR 0 6
8830: PPUSH
8831: LD_VAR 0 8
8835: PPUSH
8836: CALL_OW 190
// end ;
8840: GO 8807
8842: POP
8843: POP
// end ;
8844: GO 8794
8846: POP
8847: POP
// end ; if buildings_list = 0 then
8848: LD_VAR 0 5
8852: PUSH
8853: LD_INT 0
8855: EQUAL
8856: IFFALSE 8889
// begin for i in engineerOK_list do
8858: LD_ADDR_VAR 0 6
8862: PUSH
8863: LD_VAR 0 7
8867: PUSH
8868: FOR_IN
8869: IFFALSE 8887
// begin ComEnterUnit ( i , building ) ;
8871: LD_VAR 0 6
8875: PPUSH
8876: LD_VAR 0 2
8880: PPUSH
8881: CALL_OW 120
// end ;
8885: GO 8868
8887: POP
8888: POP
// end ; end ;
8889: LD_VAR 0 4
8893: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8894: LD_INT 0
8896: PPUSH
8897: PPUSH
8898: PPUSH
8899: PPUSH
8900: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
8901: LD_ADDR_VAR 0 6
8905: PUSH
8906: LD_INT 22
8908: PUSH
8909: LD_VAR 0 1
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 25
8920: PUSH
8921: LD_INT 4
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 24
8930: PUSH
8931: LD_INT 250
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
8948: LD_ADDR_VAR 0 9
8952: PUSH
8953: LD_VAR 0 3
8957: PPUSH
8958: LD_INT 22
8960: PUSH
8961: LD_VAR 0 1
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 21
8972: PUSH
8973: LD_INT 1
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: LD_INT 3
8982: PUSH
8983: LD_INT 24
8985: PUSH
8986: LD_INT 650
=======
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: LIST
8758: PUSH
8759: EMPTY
8760: LIST
8761: PPUSH
8762: CALL_OW 70
8766: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8767: LD_VAR 0 5
8771: PUSH
8772: LD_INT 0
8774: GREATER
8775: PUSH
8776: LD_VAR 0 7
8780: PUSH
8781: LD_INT 0
8783: GREATER
8784: AND
8785: IFFALSE 8851
// begin for i in engineerOk_list do
8787: LD_ADDR_VAR 0 6
8791: PUSH
8792: LD_VAR 0 7
8796: PUSH
8797: FOR_IN
8798: IFFALSE 8849
// begin for j in buildings_list do
8800: LD_ADDR_VAR 0 8
8804: PUSH
8805: LD_VAR 0 5
8809: PUSH
8810: FOR_IN
8811: IFFALSE 8845
// begin AddComExitBuilding ( i ) ;
8813: LD_VAR 0 6
8817: PPUSH
8818: CALL_OW 182
// wait ( 0 0$1 ) ;
8822: LD_INT 35
8824: PPUSH
8825: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8829: LD_VAR 0 6
8833: PPUSH
8834: LD_VAR 0 8
8838: PPUSH
8839: CALL_OW 190
// end ;
8843: GO 8810
8845: POP
8846: POP
// end ;
8847: GO 8797
8849: POP
8850: POP
// end ; if buildings_list = 0 then
8851: LD_VAR 0 5
8855: PUSH
8856: LD_INT 0
8858: EQUAL
8859: IFFALSE 8892
// begin for i in engineerOK_list do
8861: LD_ADDR_VAR 0 6
8865: PUSH
8866: LD_VAR 0 7
8870: PUSH
8871: FOR_IN
8872: IFFALSE 8890
// begin ComEnterUnit ( i , building ) ;
8874: LD_VAR 0 6
8878: PPUSH
8879: LD_VAR 0 2
8883: PPUSH
8884: CALL_OW 120
// end ;
8888: GO 8871
8890: POP
8891: POP
// end ; end ;
8892: LD_VAR 0 4
8896: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8897: LD_INT 0
8899: PPUSH
8900: PPUSH
8901: PPUSH
8902: PPUSH
8903: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
8904: LD_ADDR_VAR 0 6
8908: PUSH
8909: LD_INT 22
8911: PUSH
8912: LD_VAR 0 1
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: LD_INT 25
8923: PUSH
8924: LD_INT 4
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 24
8933: PUSH
8934: LD_INT 250
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: LIST
8945: PPUSH
8946: CALL_OW 69
8950: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
8951: LD_ADDR_VAR 0 9
8955: PUSH
8956: LD_VAR 0 3
8960: PPUSH
8961: LD_INT 22
8963: PUSH
8964: LD_VAR 0 1
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PUSH
8973: LD_INT 21
8975: PUSH
8976: LD_INT 1
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 3
8985: PUSH
8986: LD_INT 24
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
8988: PUSH
8989: LD_INT 650
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
<<<<<<< HEAD
8995: LIST
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: LIST
9001: PPUSH
9002: CALL_OW 70
9006: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9007: LD_VAR 0 9
9011: PUSH
9012: LD_INT 0
9014: GREATER
9015: PUSH
9016: LD_VAR 0 6
9020: PUSH
9021: LD_INT 0
9023: GREATER
9024: AND
9025: IFFALSE 9152
// begin for i = 1 to damageUnits do
9027: LD_ADDR_VAR 0 7
9031: PUSH
9032: DOUBLE
9033: LD_INT 1
9035: DEC
9036: ST_TO_ADDR
9037: LD_VAR 0 9
9041: PUSH
9042: FOR_TO
9043: IFFALSE 9067
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9045: LD_VAR 0 9
9049: PUSH
9050: LD_VAR 0 7
9054: ARRAY
9055: PPUSH
9056: LD_VAR 0 2
9060: PPUSH
9061: CALL_OW 113
9065: GO 9042
9067: POP
9068: POP
// for i in sci_list do
9069: LD_ADDR_VAR 0 7
9073: PUSH
9074: LD_VAR 0 6
9078: PUSH
9079: FOR_IN
9080: IFFALSE 9148
// begin ComExitBuilding ( i ) ;
9082: LD_VAR 0 7
9086: PPUSH
9087: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9091: LD_ADDR_VAR 0 8
9095: PUSH
9096: LD_VAR 0 2
9100: PPUSH
9101: LD_INT 22
9103: PUSH
9104: LD_VAR 0 1
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PPUSH
9113: CALL_OW 70
9117: PUSH
9118: FOR_IN
9119: IFFALSE 9144
// begin AddComHeal ( i , j ) ;
9121: LD_VAR 0 7
9125: PPUSH
9126: LD_VAR 0 8
9130: PPUSH
9131: CALL_OW 188
// wait ( 1 1$0 ) ;
9135: LD_INT 2100
9137: PPUSH
9138: CALL_OW 67
// end ;
9142: GO 9118
9144: POP
9145: POP
// end ;
9146: GO 9079
9148: POP
9149: POP
// end else
9150: GO 9166
// begin AddComEnterUnit ( sci_list , build ) ;
9152: LD_VAR 0 6
9156: PPUSH
9157: LD_VAR 0 4
9161: PPUSH
9162: CALL_OW 180
// end ; end ;
9166: LD_VAR 0 5
9170: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9171: LD_INT 0
9173: PPUSH
9174: PPUSH
9175: PPUSH
=======
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: LIST
9004: PPUSH
9005: CALL_OW 70
9009: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9010: LD_VAR 0 9
9014: PUSH
9015: LD_INT 0
9017: GREATER
9018: PUSH
9019: LD_VAR 0 6
9023: PUSH
9024: LD_INT 0
9026: GREATER
9027: AND
9028: IFFALSE 9155
// begin for i = 1 to damageUnits do
9030: LD_ADDR_VAR 0 7
9034: PUSH
9035: DOUBLE
9036: LD_INT 1
9038: DEC
9039: ST_TO_ADDR
9040: LD_VAR 0 9
9044: PUSH
9045: FOR_TO
9046: IFFALSE 9070
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9048: LD_VAR 0 9
9052: PUSH
9053: LD_VAR 0 7
9057: ARRAY
9058: PPUSH
9059: LD_VAR 0 2
9063: PPUSH
9064: CALL_OW 113
9068: GO 9045
9070: POP
9071: POP
// for i in sci_list do
9072: LD_ADDR_VAR 0 7
9076: PUSH
9077: LD_VAR 0 6
9081: PUSH
9082: FOR_IN
9083: IFFALSE 9151
// begin ComExitBuilding ( i ) ;
9085: LD_VAR 0 7
9089: PPUSH
9090: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9094: LD_ADDR_VAR 0 8
9098: PUSH
9099: LD_VAR 0 2
9103: PPUSH
9104: LD_INT 22
9106: PUSH
9107: LD_VAR 0 1
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PPUSH
9116: CALL_OW 70
9120: PUSH
9121: FOR_IN
9122: IFFALSE 9147
// begin AddComHeal ( i , j ) ;
9124: LD_VAR 0 7
9128: PPUSH
9129: LD_VAR 0 8
9133: PPUSH
9134: CALL_OW 188
// wait ( 1 1$0 ) ;
9138: LD_INT 2100
9140: PPUSH
9141: CALL_OW 67
// end ;
9145: GO 9121
9147: POP
9148: POP
// end ;
9149: GO 9082
9151: POP
9152: POP
// end else
9153: GO 9169
// begin AddComEnterUnit ( sci_list , build ) ;
9155: LD_VAR 0 6
9159: PPUSH
9160: LD_VAR 0 4
9164: PPUSH
9165: CALL_OW 180
// end ; end ;
9169: LD_VAR 0 5
9173: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9174: LD_INT 0
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
9176: PPUSH
9177: PPUSH
9178: PPUSH
9179: PPUSH
9180: PPUSH
<<<<<<< HEAD
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9181: LD_ADDR_VAR 0 7
9185: PUSH
9186: LD_VAR 0 3
9190: PPUSH
9191: LD_INT 22
9193: PUSH
9194: LD_VAR 0 1
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PUSH
9203: LD_INT 21
9205: PUSH
9206: LD_INT 2
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: PUSH
9213: LD_INT 24
9215: PUSH
9216: LD_INT 550
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: PUSH
9223: LD_INT 34
9225: PUSH
9226: LD_INT 46
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: PPUSH
9239: CALL_OW 70
9243: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9244: LD_ADDR_VAR 0 8
9248: PUSH
9249: LD_VAR 0 3
9253: PPUSH
9254: LD_INT 22
9256: PUSH
9257: LD_VAR 0 1
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PUSH
9266: LD_INT 21
9268: PUSH
9269: LD_INT 2
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 34
9278: PUSH
9279: LD_INT 46
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: PUSH
9286: LD_INT 3
9288: PUSH
9289: LD_INT 24
9291: PUSH
9292: LD_INT 550
=======
9181: PPUSH
9182: PPUSH
9183: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9184: LD_ADDR_VAR 0 7
9188: PUSH
9189: LD_VAR 0 3
9193: PPUSH
9194: LD_INT 22
9196: PUSH
9197: LD_VAR 0 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: LD_INT 21
9208: PUSH
9209: LD_INT 2
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 24
9218: PUSH
9219: LD_INT 550
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: LD_INT 34
9228: PUSH
9229: LD_INT 46
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: PPUSH
9242: CALL_OW 70
9246: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9247: LD_ADDR_VAR 0 8
9251: PUSH
9252: LD_VAR 0 3
9256: PPUSH
9257: LD_INT 22
9259: PUSH
9260: LD_VAR 0 1
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 21
9271: PUSH
9272: LD_INT 2
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 34
9281: PUSH
9282: LD_INT 46
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 3
9291: PUSH
9292: LD_INT 24
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
9294: PUSH
9295: LD_INT 550
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
<<<<<<< HEAD
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: PPUSH
9309: CALL_OW 70
9313: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9314: LD_ADDR_VAR 0 9
9318: PUSH
9319: LD_VAR 0 2
9323: PPUSH
9324: LD_INT 22
9326: PUSH
9327: LD_VAR 0 1
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 21
9338: PUSH
9339: LD_INT 2
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 34
9348: PUSH
9349: LD_INT 46
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: LD_INT 24
9358: PUSH
9359: LD_INT 1000
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: PUSH
9366: LD_INT 58
9368: PUSH
9369: EMPTY
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: PPUSH
9379: CALL_OW 70
9383: ST_TO_ADDR
// for i in damageVehicle_list do
9384: LD_ADDR_VAR 0 5
9388: PUSH
9389: LD_VAR 0 8
9393: PUSH
9394: FOR_IN
9395: IFFALSE 9414
// mechanicInside_list = UnitsInside ( i ) ;
9397: LD_ADDR_VAR 0 10
9401: PUSH
9402: LD_VAR 0 5
9406: PPUSH
9407: CALL_OW 313
9411: ST_TO_ADDR
9412: GO 9394
9414: POP
9415: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9416: LD_ADDR_VAR 0 11
9420: PUSH
9421: LD_VAR 0 2
9425: PPUSH
9426: LD_INT 22
9428: PUSH
9429: LD_VAR 0 1
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 25
9440: PUSH
9441: LD_INT 3
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 70
9456: ST_TO_ADDR
// if damageVehicle_list > 0 then
9457: LD_VAR 0 8
9461: PUSH
9462: LD_INT 0
9464: GREATER
9465: IFFALSE 9538
// begin for i in damageVehicle_list do
9467: LD_ADDR_VAR 0 5
9471: PUSH
9472: LD_VAR 0 8
9476: PUSH
9477: FOR_IN
9478: IFFALSE 9536
// begin for j in mechanicInside_list do
9480: LD_ADDR_VAR 0 6
9484: PUSH
9485: LD_VAR 0 10
9489: PUSH
9490: FOR_IN
9491: IFFALSE 9532
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9493: LD_VAR 0 8
9497: PPUSH
9498: LD_VAR 0 2
9502: PPUSH
9503: CALL_OW 113
// AddComExitVehicle ( j ) ;
9507: LD_VAR 0 6
9511: PPUSH
9512: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9516: LD_VAR 0 6
9520: PPUSH
9521: LD_VAR 0 5
9525: PPUSH
9526: CALL_OW 189
// end ;
9530: GO 9490
9532: POP
9533: POP
// end ;
9534: GO 9477
9536: POP
9537: POP
// end ; if emptyVehicle_list > 0 then
9538: LD_VAR 0 9
9542: PUSH
9543: LD_INT 0
9545: GREATER
9546: IFFALSE 9596
// begin for i in emptyVehicle_list do
9548: LD_ADDR_VAR 0 5
9552: PUSH
9553: LD_VAR 0 9
9557: PUSH
9558: FOR_IN
9559: IFFALSE 9594
// begin for j in mechanicOutside_list do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: LD_VAR 0 11
9570: PUSH
9571: FOR_IN
9572: IFFALSE 9590
// begin AddComEnterUnit ( j , i ) ;
9574: LD_VAR 0 6
9578: PPUSH
9579: LD_VAR 0 5
9583: PPUSH
9584: CALL_OW 180
// end ;
9588: GO 9571
9590: POP
9591: POP
// end ;
9592: GO 9558
9594: POP
9595: POP
// end ; if VehicleOK_list > 0 then
9596: LD_VAR 0 7
9600: PUSH
9601: LD_INT 0
9603: GREATER
9604: IFFALSE 9638
// begin for i in VehicleOK_list do
9606: LD_ADDR_VAR 0 5
9610: PUSH
9611: LD_VAR 0 7
9615: PUSH
9616: FOR_IN
9617: IFFALSE 9636
// ComAgressiveMove ( i , 110 , 29 ) ;
9619: LD_VAR 0 5
9623: PPUSH
9624: LD_INT 110
9626: PPUSH
9627: LD_INT 29
9629: PPUSH
9630: CALL_OW 114
9634: GO 9616
9636: POP
9637: POP
// end ; end ;
9638: LD_VAR 0 4
9642: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9643: LD_INT 0
9645: PPUSH
9646: PPUSH
9647: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9648: LD_VAR 0 1
9652: PPUSH
9653: LD_INT 22
9655: PUSH
9656: LD_VAR 0 2
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 2
9667: PUSH
9668: LD_INT 21
9670: PUSH
9671: LD_INT 2
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 21
9680: PUSH
9681: LD_INT 1
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PPUSH
9697: CALL_OW 70
9701: PUSH
9702: LD_VAR 0 5
9706: GREATER
9707: IFFALSE 9839
// begin for i in defendersList do
9709: LD_ADDR_VAR 0 7
9713: PUSH
9714: LD_VAR 0 3
9718: PUSH
9719: FOR_IN
9720: IFFALSE 9835
// begin AddComExitBuilding ( i ) ;
9722: LD_VAR 0 7
9726: PPUSH
9727: CALL_OW 182
// wait ( 0 0$1 ) ;
9731: LD_INT 35
9733: PPUSH
9734: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9738: LD_ADDR_VAR 0 8
9742: PUSH
9743: LD_VAR 0 1
9747: PPUSH
9748: LD_INT 22
9750: PUSH
9751: LD_VAR 0 2
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: PUSH
9760: LD_INT 2
9762: PUSH
9763: LD_INT 21
9765: PUSH
9766: LD_INT 2
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PUSH
9773: LD_INT 21
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PPUSH
9792: CALL_OW 70
9796: PUSH
9797: FOR_IN
9798: IFFALSE 9831
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9800: LD_VAR 0 7
9804: PPUSH
9805: LD_VAR 0 8
9809: PPUSH
9810: CALL_OW 250
9814: PPUSH
9815: LD_VAR 0 8
9819: PPUSH
9820: CALL_OW 251
9824: PPUSH
9825: CALL_OW 174
9829: GO 9797
9831: POP
9832: POP
// end ;
9833: GO 9719
9835: POP
9836: POP
// end else
9837: GO 9870
// begin for i in defendersList do
9839: LD_ADDR_VAR 0 7
9843: PUSH
9844: LD_VAR 0 3
9848: PUSH
9849: FOR_IN
9850: IFFALSE 9868
// ComEnterUnit ( i , build ) ;
9852: LD_VAR 0 7
9856: PPUSH
9857: LD_VAR 0 4
9861: PPUSH
9862: CALL_OW 120
9866: GO 9849
9868: POP
9869: POP
// end ; end ;
9870: LD_VAR 0 6
9874: RET
// export function RussianTrap ; var i ; begin
9875: LD_INT 0
9877: PPUSH
9878: PPUSH
// if GetSide ( Brian ) = 4 then
9879: LD_EXP 6
9883: PPUSH
9884: CALL_OW 255
9888: PUSH
9889: LD_INT 4
9891: EQUAL
9892: IFFALSE 9915
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9894: LD_EXP 6
9898: PUSH
9899: LD_EXP 7
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PPUSH
9908: LD_INT 0
9910: PPUSH
9911: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
9915: LD_ADDR_VAR 0 2
9919: PUSH
9920: LD_INT 22
9922: PUSH
9923: LD_INT 3
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: LD_INT 21
9932: PUSH
9933: LD_INT 1
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PPUSH
9944: CALL_OW 69
9948: PUSH
9949: FOR_IN
9950: IFFALSE 10060
// begin ComExitBuilding ( i ) ;
9952: LD_VAR 0 2
9956: PPUSH
9957: CALL_OW 122
// wait ( 0 0$1 ) ;
9961: LD_INT 35
9963: PPUSH
9964: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
9968: LD_VAR 0 2
9972: PPUSH
9973: LD_INT 120
9975: PPUSH
9976: LD_INT 56
9978: PPUSH
9979: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
9983: LD_VAR 0 2
9987: PPUSH
9988: LD_INT 111
9990: PPUSH
9991: LD_INT 37
9993: PPUSH
9994: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
9998: LD_INT 33
10000: PPUSH
10001: CALL_OW 255
10005: PUSH
10006: LD_INT 3
10008: EQUAL
10009: PUSH
10010: LD_INT 33
10012: PPUSH
10013: CALL_OW 302
10017: AND
10018: IFFALSE 10034
// begin AddComEnterUnit ( i , arm2 ) ;
10020: LD_VAR 0 2
10024: PPUSH
10025: LD_INT 33
10027: PPUSH
10028: CALL_OW 180
// end else
10032: GO 10058
// begin AddComCrawl ( i ) ;
10034: LD_VAR 0 2
10038: PPUSH
10039: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10043: LD_VAR 0 2
10047: PPUSH
10048: LD_INT 109
10050: PPUSH
10051: LD_INT 30
10053: PPUSH
10054: CALL_OW 174
// end ; end ;
10058: GO 9949
10060: POP
10061: POP
// end ;
10062: LD_VAR 0 1
10066: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10067: LD_INT 0
10069: PPUSH
10070: PPUSH
10071: PPUSH
10072: PPUSH
10073: PPUSH
// nearest_dist = 1000 ;
10074: LD_ADDR_VAR 0 4
10078: PUSH
10079: LD_INT 1000
10081: ST_TO_ADDR
// nearest_un = un ;
10082: LD_ADDR_VAR 0 5
10086: PUSH
10087: LD_VAR 0 1
10091: ST_TO_ADDR
// for sold in units do
10092: LD_ADDR_VAR 0 6
10096: PUSH
10097: LD_VAR 0 2
10101: PUSH
10102: FOR_IN
10103: IFFALSE 10159
// begin dist = GetDistUnits ( un , sold ) ;
10105: LD_ADDR_VAR 0 7
10109: PUSH
10110: LD_VAR 0 1
10114: PPUSH
10115: LD_VAR 0 6
10119: PPUSH
10120: CALL_OW 296
10124: ST_TO_ADDR
// if dist < nearest_dist then
10125: LD_VAR 0 7
10129: PUSH
10130: LD_VAR 0 4
10134: LESS
10135: IFFALSE 10157
// begin nearest_un = sold ;
10137: LD_ADDR_VAR 0 5
10141: PUSH
10142: LD_VAR 0 6
10146: ST_TO_ADDR
// nearest_dist = dist ;
10147: LD_ADDR_VAR 0 4
10151: PUSH
10152: LD_VAR 0 7
10156: ST_TO_ADDR
// end ; end ;
10157: GO 10102
10159: POP
10160: POP
// result := nearest_un ;
10161: LD_ADDR_VAR 0 3
10165: PUSH
10166: LD_VAR 0 5
10170: ST_TO_ADDR
// end ;
10171: LD_VAR 0 3
10175: RET
// export function PrepareDifficulty ; begin
10176: LD_INT 0
10178: PPUSH
// if Difficulty = 1 then
10179: LD_OWVAR 67
10183: PUSH
10184: LD_INT 1
10186: EQUAL
10187: IFFALSE 10250
// begin RemoveUnit ( brw2 ) ;
10189: LD_INT 9
10191: PPUSH
10192: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10196: LD_INT 30
10198: PPUSH
10199: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10203: LD_INT 52
10205: PPUSH
10206: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10210: LD_INT 63
10212: PPUSH
10213: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10217: LD_INT 5
10219: PUSH
10220: LD_INT 4
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PPUSH
10227: LD_INT 60
10229: PPUSH
10230: CALL_OW 240
// RuSoldMinLevel = 0 ;
10234: LD_ADDR_EXP 13
10238: PUSH
10239: LD_INT 0
10241: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10242: LD_ADDR_EXP 14
10246: PUSH
10247: LD_INT 1
10249: ST_TO_ADDR
// end ; if Difficulty = 2 then
10250: LD_OWVAR 67
10254: PUSH
10255: LD_INT 2
10257: EQUAL
10258: IFFALSE 10300
// begin RemoveUnit ( brw4 ) ;
10260: LD_INT 52
10262: PPUSH
10263: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10267: LD_INT 5
10269: PUSH
10270: LD_INT 4
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PPUSH
10277: LD_INT 50
10279: PPUSH
10280: CALL_OW 240
// RuSoldMinLevel = 1 ;
10284: LD_ADDR_EXP 13
10288: PUSH
10289: LD_INT 1
10291: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10292: LD_ADDR_EXP 14
10296: PUSH
10297: LD_INT 2
10299: ST_TO_ADDR
// end ; if Difficulty = 3 then
10300: LD_OWVAR 67
10304: PUSH
10305: LD_INT 3
10307: EQUAL
10308: IFFALSE 10343
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10310: LD_INT 5
10312: PUSH
10313: LD_INT 4
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PPUSH
10320: LD_INT 40
10322: PPUSH
10323: CALL_OW 240
// RuSoldMinLevel = 2 ;
10327: LD_ADDR_EXP 13
10331: PUSH
10332: LD_INT 2
10334: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10335: LD_ADDR_EXP 14
10339: PUSH
10340: LD_INT 3
10342: ST_TO_ADDR
// end ; end ;
10343: LD_VAR 0 1
10347: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10348: LD_INT 0
10350: PPUSH
10351: PPUSH
10352: PPUSH
// tmp = [ ] ;
10353: LD_ADDR_VAR 0 5
10357: PUSH
10358: EMPTY
10359: ST_TO_ADDR
// if not vehicles then
10360: LD_VAR 0 1
10364: NOT
10365: IFFALSE 10369
// exit ;
10367: GO 10486
// for i in vehicles do
10369: LD_ADDR_VAR 0 4
10373: PUSH
10374: LD_VAR 0 1
10378: PUSH
10379: FOR_IN
10380: IFFALSE 10470
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10382: LD_ADDR_VAR 0 5
10386: PUSH
10387: LD_VAR 0 5
10391: PPUSH
10392: LD_INT 1
10394: PPUSH
10395: LD_VAR 0 4
10399: PPUSH
10400: CALL_OW 265
10404: PUSH
10405: LD_VAR 0 4
10409: PPUSH
10410: CALL_OW 262
10414: PUSH
10415: LD_VAR 0 4
10419: PPUSH
10420: CALL_OW 263
10424: PUSH
10425: LD_VAR 0 4
10429: PPUSH
10430: CALL_OW 264
10434: PUSH
10435: LD_VAR 0 4
10439: PPUSH
10440: CALL_OW 261
10444: PUSH
10445: LD_VAR 0 4
10449: PPUSH
10450: CALL_OW 256
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: PPUSH
10463: CALL_OW 2
10467: ST_TO_ADDR
// end ;
10468: GO 10379
10470: POP
10471: POP
// SaveVariable ( tmp , ident ) ;
10472: LD_VAR 0 5
10476: PPUSH
10477: LD_VAR 0 2
10481: PPUSH
10482: CALL_OW 39
// end ; end_of_file
10486: LD_VAR 0 3
10490: RET
// export function PrepareHeroes ; begin
10491: LD_INT 0
10493: PPUSH
// uc_side = 1 ;
10494: LD_ADDR_OWVAR 20
10498: PUSH
10499: LD_INT 1
10501: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10502: LD_ADDR_EXP 1
10506: PUSH
10507: LD_STRING 01_JMM
10509: PPUSH
10510: CALL_OW 34
10514: ST_TO_ADDR
// SetLives ( JMM , LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ) ;
10515: LD_EXP 1
10519: PPUSH
10520: LD_STRING 01_JMMLifePoints_1
10522: PPUSH
10523: LD_INT 1000
10525: PPUSH
10526: CALL_OW 30
10530: PPUSH
10531: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10535: LD_ADDR_EXP 9
10539: PUSH
10540: LD_STRING Powell
10542: PPUSH
10543: CALL_OW 25
10547: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10548: LD_ADDR_EXP 2
10552: PUSH
10553: LD_STRING 01_Bobby
10555: PPUSH
10556: CALL_OW 34
10560: ST_TO_ADDR
// if Bobby then
10561: LD_EXP 2
10565: IFFALSE 10587
// SetLives ( Bobby , LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ) ;
10567: LD_EXP 2
10571: PPUSH
10572: LD_STRING 01_BobbyLifePoints_1
10574: PPUSH
10575: LD_INT 1000
10577: PPUSH
10578: CALL_OW 30
10582: PPUSH
10583: CALL_OW 234
// Cyrus = CreateCharacter ( 01_Cyrus ) ;
10587: LD_ADDR_EXP 3
10591: PUSH
10592: LD_STRING 01_Cyrus
10594: PPUSH
10595: CALL_OW 34
10599: ST_TO_ADDR
// if Cyrus then
10600: LD_EXP 3
10604: IFFALSE 10626
// SetLives ( Cyrus , LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ) ;
10606: LD_EXP 3
10610: PPUSH
10611: LD_STRING 01_CyrusLifePoints_1
10613: PPUSH
10614: LD_INT 1000
10616: PPUSH
10617: CALL_OW 30
10621: PPUSH
10622: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
10626: LD_ADDR_EXP 5
10630: PUSH
10631: LD_STRING Khatam
10633: PPUSH
10634: CALL_OW 25
10638: ST_TO_ADDR
// uc_side = 4 ;
10639: LD_ADDR_OWVAR 20
10643: PUSH
10644: LD_INT 4
10646: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10647: LD_ADDR_EXP 4
10651: PUSH
10652: LD_STRING Lisa
10654: PPUSH
10655: CALL_OW 25
10659: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10660: LD_EXP 1
10664: PPUSH
10665: LD_INT 3
10667: PPUSH
10668: LD_INT 0
10670: PPUSH
10671: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10675: LD_EXP 2
10679: PPUSH
10680: LD_INT 3
10682: PPUSH
10683: LD_INT 0
10685: PPUSH
10686: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10690: LD_EXP 3
10694: PPUSH
10695: LD_INT 3
10697: PPUSH
10698: LD_INT 0
10700: PPUSH
10701: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10705: LD_EXP 4
10709: PPUSH
10710: LD_INT 5
10712: PPUSH
10713: LD_INT 0
10715: PPUSH
10716: CALL_OW 49
// ComCrawl ( Lisa ) ;
10720: LD_EXP 4
10724: PPUSH
10725: CALL_OW 137
// end ;
10729: LD_VAR 0 1
10733: RET
// export function PrepareLisSquad ; var i , un ; begin
10734: LD_INT 0
10736: PPUSH
10737: PPUSH
10738: PPUSH
// uc_side = 4 ;
10739: LD_ADDR_OWVAR 20
10743: PUSH
10744: LD_INT 4
10746: ST_TO_ADDR
// uc_nation = 1 ;
10747: LD_ADDR_OWVAR 21
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// hc_class := 2 ;
10755: LD_ADDR_OWVAR 28
10759: PUSH
10760: LD_INT 2
10762: ST_TO_ADDR
// hc_sex := sex_male ;
10763: LD_ADDR_OWVAR 27
10767: PUSH
10768: LD_INT 1
10770: ST_TO_ADDR
// hc_gallery :=  ;
10771: LD_ADDR_OWVAR 33
10775: PUSH
10776: LD_STRING 
10778: ST_TO_ADDR
// hc_name :=  ;
10779: LD_ADDR_OWVAR 26
10783: PUSH
10784: LD_STRING 
10786: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10787: LD_ADDR_OWVAR 30
10791: PUSH
10792: LD_INT 0
10794: PUSH
10795: LD_INT 1
10797: PUSH
10798: LD_INT 0
10800: PUSH
10801: LD_INT 0
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
10810: LD_ADDR_OWVAR 31
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: LD_INT 2
10820: PUSH
10821: LD_INT 0
10823: PUSH
10824: LD_INT 0
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: ST_TO_ADDR
// un := CreateHuman ;
10833: LD_ADDR_VAR 0 3
10837: PUSH
10838: CALL_OW 44
10842: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10843: LD_VAR 0 3
10847: PPUSH
10848: LD_INT 6
10850: PPUSH
10851: LD_INT 0
10853: PPUSH
10854: CALL_OW 49
// hc_sex := sex_female ;
10858: LD_ADDR_OWVAR 27
10862: PUSH
10863: LD_INT 2
10865: ST_TO_ADDR
// hc_gallery :=  ;
10866: LD_ADDR_OWVAR 33
10870: PUSH
10871: LD_STRING 
10873: ST_TO_ADDR
// hc_name :=  ;
10874: LD_ADDR_OWVAR 26
10878: PUSH
10879: LD_STRING 
10881: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
10882: LD_ADDR_OWVAR 30
10886: PUSH
10887: LD_INT 0
10889: PUSH
10890: LD_INT 0
10892: PUSH
10893: LD_INT 0
10895: PUSH
10896: LD_INT 1
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
10905: LD_ADDR_OWVAR 31
10909: PUSH
10910: LD_INT 0
10912: PUSH
10913: LD_INT 1
10915: PUSH
10916: LD_INT 0
10918: PUSH
10919: LD_INT 1
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: ST_TO_ADDR
// un := CreateHuman ;
10928: LD_ADDR_VAR 0 3
10932: PUSH
10933: CALL_OW 44
10937: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10938: LD_VAR 0 3
10942: PPUSH
10943: LD_INT 6
10945: PPUSH
10946: LD_INT 0
10948: PPUSH
10949: CALL_OW 49
// InitHc ;
10953: CALL_OW 19
// end ;
10957: LD_VAR 0 1
10961: RET
// export function PrepareOtherAmericans ; begin
10962: LD_INT 0
10964: PPUSH
// uc_side = 4 ;
10965: LD_ADDR_OWVAR 20
10969: PUSH
10970: LD_INT 4
10972: ST_TO_ADDR
// uc_nation = 1 ;
10973: LD_ADDR_OWVAR 21
10977: PUSH
10978: LD_INT 1
10980: ST_TO_ADDR
// hc_gallery =  ;
10981: LD_ADDR_OWVAR 33
10985: PUSH
10986: LD_STRING 
10988: ST_TO_ADDR
// hc_name = Brian Garvin ;
10989: LD_ADDR_OWVAR 26
10993: PUSH
10994: LD_STRING Brian Garvin
10996: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
10997: LD_INT 1
10999: PPUSH
11000: LD_INT 1
11002: PPUSH
11003: LD_INT 1
11005: PPUSH
11006: LD_INT 2
11008: PPUSH
11009: CALL_OW 12
11013: PPUSH
11014: CALL_OW 380
// Brian = CreateHuman ;
11018: LD_ADDR_EXP 6
11022: PUSH
11023: CALL_OW 44
11027: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11028: LD_EXP 6
11032: PPUSH
11033: LD_INT 10
11035: PPUSH
11036: LD_INT 0
11038: PPUSH
11039: CALL_OW 49
// hc_name = Jerry White ;
11043: LD_ADDR_OWVAR 26
11047: PUSH
11048: LD_STRING Jerry White
11050: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11051: LD_INT 1
11053: PPUSH
11054: LD_INT 3
11056: PPUSH
11057: LD_INT 1
11059: PPUSH
11060: LD_INT 2
11062: PPUSH
11063: CALL_OW 12
11067: PPUSH
11068: CALL_OW 380
// Jerry = CreateHuman ;
11072: LD_ADDR_EXP 7
11076: PUSH
11077: CALL_OW 44
11081: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11082: LD_EXP 7
11086: PPUSH
11087: LD_INT 10
11089: PPUSH
11090: LD_INT 0
11092: PPUSH
11093: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11097: LD_EXP 6
11101: PUSH
11102: LD_EXP 7
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PPUSH
11111: CALL_OW 140
// end ;
11115: LD_VAR 0 1
11119: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11120: LD_INT 0
11122: PPUSH
11123: PPUSH
11124: PPUSH
// for i = 1 to 6 do
11125: LD_ADDR_VAR 0 2
11129: PUSH
11130: DOUBLE
11131: LD_INT 1
11133: DEC
11134: ST_TO_ADDR
11135: LD_INT 6
11137: PUSH
11138: FOR_TO
11139: IFFALSE 11233
// begin uc_side = 4 ;
11141: LD_ADDR_OWVAR 20
11145: PUSH
11146: LD_INT 4
11148: ST_TO_ADDR
// uc_nation = 1 ;
11149: LD_ADDR_OWVAR 21
11153: PUSH
11154: LD_INT 1
11156: ST_TO_ADDR
// hc_gallery =  ;
11157: LD_ADDR_OWVAR 33
11161: PUSH
11162: LD_STRING 
11164: ST_TO_ADDR
// hc_name =  ;
11165: LD_ADDR_OWVAR 26
11169: PUSH
11170: LD_STRING 
11172: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11173: LD_INT 0
11175: PPUSH
11176: LD_INT 1
11178: PPUSH
11179: LD_INT 4
11181: PPUSH
11182: CALL_OW 12
11186: PPUSH
11187: LD_INT 1
11189: PPUSH
11190: CALL_OW 380
// un = CreateHuman ;
11194: LD_ADDR_VAR 0 3
11198: PUSH
11199: CALL_OW 44
11203: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11204: LD_VAR 0 3
11208: PPUSH
11209: LD_INT 16
11211: PPUSH
11212: LD_INT 0
11214: PPUSH
11215: CALL_OW 49
// SetLives ( un , 1 ) ;
11219: LD_VAR 0 3
11223: PPUSH
11224: LD_INT 1
11226: PPUSH
11227: CALL_OW 234
// end ;
11231: GO 11138
11233: POP
11234: POP
// DyingSold = CreateHuman ;
11235: LD_ADDR_EXP 34
11239: PUSH
11240: CALL_OW 44
11244: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11245: LD_EXP 34
11249: PPUSH
11250: LD_INT 16
11252: PPUSH
11253: LD_INT 0
11255: PPUSH
11256: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11260: LD_EXP 34
11264: PPUSH
11265: LD_INT 250
11267: PPUSH
11268: CALL_OW 234
// end ; end_of_file
11272: LD_VAR 0 1
11276: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11277: LD_INT 0
11279: PPUSH
11280: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) ;
11281: LD_ADDR_VAR 0 2
11285: PUSH
11286: LD_INT 22
11288: PUSH
11289: LD_INT 1
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 23
11298: PUSH
11299: LD_INT 1
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 25
11308: PUSH
11309: LD_INT 2
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: LIST
11320: PPUSH
11321: CALL_OW 69
11325: ST_TO_ADDR
// uc_side = 6 ;
11326: LD_ADDR_OWVAR 20
11330: PUSH
11331: LD_INT 6
11333: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11334: LD_ADDR_EXP 8
11338: PUSH
11339: LD_STRING Mikhail
11341: PPUSH
11342: CALL_OW 25
11346: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
11347: LD_EXP 8
11351: PPUSH
11352: LD_VAR 0 2
11356: PUSH
11357: LD_INT 1
11359: ARRAY
11360: PPUSH
11361: CALL_OW 250
11365: PPUSH
11366: LD_VAR 0 2
11370: PUSH
11371: LD_INT 1
11373: ARRAY
11374: PPUSH
11375: CALL_OW 251
11379: PPUSH
11380: LD_INT 3
11382: PPUSH
11383: LD_INT 1
11385: PPUSH
11386: CALL_OW 50
// end ;
11390: LD_VAR 0 1
11394: RET
// export function PrepareRussianCommander ; begin
11395: LD_INT 0
11397: PPUSH
// uc_side = 3 ;
11398: LD_ADDR_OWVAR 20
11402: PUSH
11403: LD_INT 3
11405: ST_TO_ADDR
// uc_nation = 3 ;
11406: LD_ADDR_OWVAR 21
11410: PUSH
11411: LD_INT 3
11413: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11414: LD_ADDR_EXP 19
11418: PUSH
11419: LD_STRING Natasza
11421: PPUSH
11422: CALL_OW 25
11426: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11427: LD_EXP 19
11431: PPUSH
11432: LD_INT 24
11434: PPUSH
11435: LD_INT 0
11437: PPUSH
11438: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11442: LD_EXP 19
11446: PPUSH
11447: LD_INT 56
11449: PPUSH
11450: LD_INT 16
11452: PPUSH
11453: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11457: LD_ADDR_EXP 24
11461: PUSH
11462: LD_EXP 24
11466: PUSH
11467: LD_EXP 19
11471: ADD
11472: ST_TO_ADDR
// end ;
11473: LD_VAR 0 1
11477: RET
// export function PrepareSouthBase ; var i , un ; begin
11478: LD_INT 0
11480: PPUSH
11481: PPUSH
11482: PPUSH
// for i = 1 to 2 do
11483: LD_ADDR_VAR 0 2
11487: PUSH
11488: DOUBLE
11489: LD_INT 1
11491: DEC
11492: ST_TO_ADDR
11493: LD_INT 2
11495: PUSH
11496: FOR_TO
11497: IFFALSE 11606
// begin uc_side = 3 ;
11499: LD_ADDR_OWVAR 20
11503: PUSH
11504: LD_INT 3
11506: ST_TO_ADDR
// uc_nation = 3 ;
11507: LD_ADDR_OWVAR 21
11511: PUSH
11512: LD_INT 3
11514: ST_TO_ADDR
// hc_gallery =  ;
11515: LD_ADDR_OWVAR 33
11519: PUSH
11520: LD_STRING 
11522: ST_TO_ADDR
// hc_name =  ;
11523: LD_ADDR_OWVAR 26
11527: PUSH
11528: LD_STRING 
11530: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11531: LD_INT 1
11533: PPUSH
11534: LD_INT 1
11536: PPUSH
11537: LD_EXP 13
11541: PPUSH
11542: LD_EXP 14
11546: PPUSH
11547: CALL_OW 12
11551: PPUSH
11552: CALL_OW 380
// hc_importance = 0 ;
11556: LD_ADDR_OWVAR 32
11560: PUSH
11561: LD_INT 0
11563: ST_TO_ADDR
// un = CreateHuman ;
11564: LD_ADDR_VAR 0 3
11568: PUSH
11569: CALL_OW 44
11573: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11574: LD_VAR 0 3
11578: PPUSH
11579: LD_INT 11
11581: PPUSH
11582: LD_INT 0
11584: PPUSH
11585: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11589: LD_VAR 0 3
11593: PPUSH
11594: LD_INT 111
11596: PPUSH
11597: LD_INT 38
11599: PPUSH
11600: CALL_OW 118
// end ;
11604: GO 11496
11606: POP
11607: POP
// for i = 1 to Difficulty do
11608: LD_ADDR_VAR 0 2
11612: PUSH
11613: DOUBLE
11614: LD_INT 1
11616: DEC
11617: ST_TO_ADDR
11618: LD_OWVAR 67
11622: PUSH
11623: FOR_TO
11624: IFFALSE 11725
// begin uc_side = 3 ;
11626: LD_ADDR_OWVAR 20
11630: PUSH
11631: LD_INT 3
11633: ST_TO_ADDR
// uc_nation = 3 ;
11634: LD_ADDR_OWVAR 21
11638: PUSH
11639: LD_INT 3
11641: ST_TO_ADDR
// hc_gallery =  ;
11642: LD_ADDR_OWVAR 33
11646: PUSH
11647: LD_STRING 
11649: ST_TO_ADDR
// hc_name =  ;
11650: LD_ADDR_OWVAR 26
11654: PUSH
11655: LD_STRING 
11657: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11658: LD_INT 0
11660: PPUSH
11661: LD_INT 3
11663: PPUSH
11664: LD_EXP 13
11668: PPUSH
11669: LD_EXP 14
11673: PPUSH
11674: CALL_OW 12
11678: PPUSH
11679: CALL_OW 380
// un = CreateHuman ;
11683: LD_ADDR_VAR 0 3
11687: PUSH
11688: CALL_OW 44
11692: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
11693: LD_VAR 0 3
11697: PPUSH
11698: LD_INT 12
11700: PPUSH
11701: LD_INT 0
11703: PPUSH
11704: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
11708: LD_VAR 0 3
11712: PPUSH
11713: LD_INT 111
11715: PPUSH
11716: LD_INT 28
11718: PPUSH
11719: CALL_OW 118
// end ;
11723: GO 11623
11725: POP
11726: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
11727: LD_INT 3
11729: PPUSH
11730: LD_INT 3
11732: PPUSH
11733: LD_INT 33
11735: PPUSH
11736: LD_EXP 13
11740: PPUSH
11741: LD_EXP 14
11745: PPUSH
11746: CALL_OW 12
11750: PPUSH
11751: LD_INT 1
11753: PPUSH
11754: LD_INT 1
11756: PUSH
11757: LD_INT 1
11759: PPUSH
11760: LD_INT 2
11762: PPUSH
11763: CALL_OW 12
11767: PUSH
11768: LD_INT 1
11770: PPUSH
11771: LD_INT 2
11773: PPUSH
11774: CALL_OW 12
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: PUSH
11784: LD_OWVAR 67
11788: ARRAY
11789: PPUSH
11790: CALL 8402 0 6
// for i in UnitsInside ( arm2 ) do
11794: LD_ADDR_VAR 0 2
11798: PUSH
11799: LD_INT 33
11801: PPUSH
11802: CALL_OW 313
11806: PUSH
11807: FOR_IN
11808: IFFALSE 11828
// southBaseDefenders = southBaseDefenders ^ i ;
11810: LD_ADDR_EXP 25
11814: PUSH
11815: LD_EXP 25
11819: PUSH
11820: LD_VAR 0 2
11824: ADD
11825: ST_TO_ADDR
11826: GO 11807
11828: POP
11829: POP
// end ;
11830: LD_VAR 0 1
11834: RET
// export function PrepareNorthBase ; var i , un ; begin
11835: LD_INT 0
11837: PPUSH
11838: PPUSH
11839: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
11840: LD_ADDR_VAR 0 2
11844: PUSH
11845: DOUBLE
11846: LD_INT 1
11848: DEC
11849: ST_TO_ADDR
11850: LD_INT 1
11852: PPUSH
11853: LD_INT 2
11855: PPUSH
11856: CALL_OW 12
11860: PUSH
11861: LD_INT 2
11863: PPUSH
11864: LD_INT 3
11866: PPUSH
11867: CALL_OW 12
11871: PUSH
11872: LD_INT 3
11874: PPUSH
11875: LD_INT 4
11877: PPUSH
11878: CALL_OW 12
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: PUSH
11888: LD_OWVAR 67
11892: ARRAY
11893: PUSH
11894: FOR_TO
11895: IFFALSE 11981
// begin uc_side = 3 ;
11897: LD_ADDR_OWVAR 20
11901: PUSH
11902: LD_INT 3
11904: ST_TO_ADDR
// uc_nation = 3 ;
11905: LD_ADDR_OWVAR 21
11909: PUSH
11910: LD_INT 3
11912: ST_TO_ADDR
// hc_gallery =  ;
11913: LD_ADDR_OWVAR 33
11917: PUSH
11918: LD_STRING 
11920: ST_TO_ADDR
// hc_name =  ;
11921: LD_ADDR_OWVAR 26
11925: PUSH
11926: LD_STRING 
11928: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11929: LD_INT 0
11931: PPUSH
11932: LD_INT 1
11934: PPUSH
11935: LD_EXP 13
11939: PPUSH
11940: LD_EXP 14
11944: PPUSH
11945: CALL_OW 12
11949: PPUSH
11950: CALL_OW 380
// un = CreateHuman ;
11954: LD_ADDR_VAR 0 3
11958: PUSH
11959: CALL_OW 44
11963: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
11964: LD_VAR 0 3
11968: PPUSH
11969: LD_INT 14
11971: PPUSH
11972: LD_INT 0
11974: PPUSH
11975: CALL_OW 49
// end ;
11979: GO 11894
11981: POP
11982: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
11983: LD_INT 3
11985: PPUSH
11986: LD_INT 3
11988: PPUSH
11989: LD_INT 2
11991: PPUSH
11992: LD_EXP 13
11996: PPUSH
11997: LD_EXP 14
12001: PPUSH
12002: CALL_OW 12
12006: PPUSH
12007: LD_INT 1
12009: PPUSH
12010: LD_INT 1
12012: PPUSH
12013: LD_INT 2
12015: PPUSH
12016: CALL_OW 12
12020: PUSH
12021: LD_INT 1
12023: PPUSH
12024: LD_INT 3
12026: PPUSH
12027: CALL_OW 12
12031: PUSH
12032: LD_INT 1
12034: PPUSH
12035: LD_INT 3
12037: PPUSH
12038: CALL_OW 12
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: LD_OWVAR 67
12052: ARRAY
12053: PPUSH
12054: CALL 8402 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12058: LD_INT 3
12060: PPUSH
12061: LD_INT 3
12063: PPUSH
12064: LD_INT 23
12066: PPUSH
12067: LD_EXP 13
12071: PPUSH
12072: LD_EXP 14
12076: PPUSH
12077: CALL_OW 12
12081: PPUSH
12082: LD_INT 4
12084: PPUSH
12085: LD_INT 0
12087: PUSH
12088: LD_INT 1
12090: PUSH
12091: LD_INT 2
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: LIST
12098: PUSH
12099: LD_OWVAR 67
12103: ARRAY
12104: PPUSH
12105: CALL 8402 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12109: LD_INT 3
12111: PPUSH
12112: LD_INT 3
12114: PPUSH
12115: LD_INT 1
12117: PPUSH
12118: LD_EXP 13
12122: PPUSH
12123: LD_EXP 14
12127: PPUSH
12128: CALL_OW 12
12132: PPUSH
12133: LD_INT 2
12135: PPUSH
12136: LD_INT 1
12138: PUSH
12139: LD_INT 2
12141: PUSH
12142: LD_INT 2
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: LIST
12149: PUSH
12150: LD_OWVAR 67
12154: ARRAY
12155: PPUSH
12156: CALL 8402 0 6
// for i in UnitsInside ( arm1 ) do
12160: LD_ADDR_VAR 0 2
12164: PUSH
12165: LD_INT 2
12167: PPUSH
12168: CALL_OW 313
12172: PUSH
12173: FOR_IN
12174: IFFALSE 12194
// northBaseDefenders = northBaseDefenders ^ i ;
12176: LD_ADDR_EXP 24
12180: PUSH
12181: LD_EXP 24
12185: PUSH
12186: LD_VAR 0 2
12190: ADD
12191: ST_TO_ADDR
12192: GO 12173
12194: POP
12195: POP
// end ;
12196: LD_VAR 0 1
12200: RET
// export function PrepareOtherRussians ; var i , un ; begin
12201: LD_INT 0
12203: PPUSH
12204: PPUSH
12205: PPUSH
// for i = 1 to 2 do
12206: LD_ADDR_VAR 0 2
12210: PUSH
12211: DOUBLE
12212: LD_INT 1
12214: DEC
12215: ST_TO_ADDR
12216: LD_INT 2
12218: PUSH
12219: FOR_TO
12220: IFFALSE 12321
// begin uc_side = 3 ;
12222: LD_ADDR_OWVAR 20
12226: PUSH
12227: LD_INT 3
12229: ST_TO_ADDR
// uc_nation = 3 ;
12230: LD_ADDR_OWVAR 21
12234: PUSH
12235: LD_INT 3
12237: ST_TO_ADDR
// hc_gallery =  ;
12238: LD_ADDR_OWVAR 33
12242: PUSH
12243: LD_STRING 
12245: ST_TO_ADDR
// hc_name =  ;
12246: LD_ADDR_OWVAR 26
12250: PUSH
12251: LD_STRING 
12253: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12254: LD_INT 0
12256: PPUSH
12257: LD_INT 1
12259: PPUSH
12260: LD_EXP 13
12264: PPUSH
12265: LD_EXP 14
12269: PPUSH
12270: CALL_OW 12
12274: PPUSH
12275: CALL_OW 380
// un = CreateHuman ;
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: CALL_OW 44
12288: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12289: LD_VAR 0 3
12293: PPUSH
12294: LD_INT 9
12296: PPUSH
12297: LD_INT 0
12299: PPUSH
12300: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12304: LD_VAR 0 3
12308: PPUSH
12309: LD_INT 80
12311: PPUSH
12312: LD_INT 73
12314: PPUSH
12315: CALL_OW 118
// end ;
12319: GO 12219
12321: POP
12322: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12323: LD_ADDR_VAR 0 2
12327: PUSH
12328: LD_INT 22
12330: PUSH
12331: LD_INT 3
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 30
12340: PUSH
12341: LD_INT 31
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PPUSH
12352: CALL_OW 69
12356: PUSH
12357: FOR_IN
12358: IFFALSE 12386
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12360: LD_EXP 13
12364: PPUSH
12365: LD_EXP 14
12369: PPUSH
12370: CALL_OW 12
12374: PPUSH
12375: LD_VAR 0 2
12379: PPUSH
12380: CALL 8512 0 2
12384: GO 12357
12386: POP
12387: POP
// end ;
12388: LD_VAR 0 1
12392: RET
// export function PrepareCargoBays ; begin
12393: LD_INT 0
12395: PPUSH
// uc_side = 3 ;
12396: LD_ADDR_OWVAR 20
12400: PUSH
12401: LD_INT 3
12403: ST_TO_ADDR
// uc_nation = 3 ;
12404: LD_ADDR_OWVAR 21
12408: PUSH
12409: LD_INT 3
12411: ST_TO_ADDR
// vc_engine = 1 ;
12412: LD_ADDR_OWVAR 39
12416: PUSH
12417: LD_INT 1
12419: ST_TO_ADDR
// vc_control = 1 ;
12420: LD_ADDR_OWVAR 38
12424: PUSH
12425: LD_INT 1
12427: ST_TO_ADDR
// vc_weapon = 51 ;
12428: LD_ADDR_OWVAR 40
12432: PUSH
12433: LD_INT 51
12435: ST_TO_ADDR
// vc_chassis = 22 ;
12436: LD_ADDR_OWVAR 37
12440: PUSH
12441: LD_INT 22
12443: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12444: LD_ADDR_EXP 15
12448: PUSH
12449: CALL_OW 45
12453: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12454: LD_ADDR_EXP 16
12458: PUSH
12459: CALL_OW 45
12463: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12464: LD_EXP 15
12468: PPUSH
12469: LD_INT 13
12471: PPUSH
12472: LD_INT 0
12474: PPUSH
12475: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12479: LD_EXP 16
12483: PPUSH
12484: LD_INT 13
12486: PPUSH
12487: LD_INT 0
12489: PPUSH
12490: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12494: LD_EXP 15
12498: PPUSH
12499: LD_INT 2
12501: PPUSH
12502: LD_INT 70
12504: PUSH
12505: LD_INT 50
12507: PUSH
12508: LD_INT 30
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: LD_OWVAR 67
12520: ARRAY
12521: PPUSH
12522: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12526: LD_EXP 16
12530: PPUSH
12531: LD_INT 2
12533: PPUSH
12534: LD_INT 70
12536: PUSH
12537: LD_INT 50
12539: PUSH
12540: LD_INT 30
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: LD_OWVAR 67
12552: ARRAY
12553: PPUSH
12554: CALL_OW 291
// hc_gallery =  ;
12558: LD_ADDR_OWVAR 33
12562: PUSH
12563: LD_STRING 
12565: ST_TO_ADDR
// hc_name =  ;
12566: LD_ADDR_OWVAR 26
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12574: LD_INT 1
12576: PPUSH
12577: LD_INT 3
12579: PPUSH
12580: LD_INT 1
12582: PPUSH
12583: LD_INT 2
12585: PPUSH
12586: CALL_OW 12
12590: PPUSH
12591: CALL_OW 380
// driver1 = CreateHuman ;
12595: LD_ADDR_EXP 17
12599: PUSH
12600: CALL_OW 44
12604: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12605: LD_EXP 17
12609: PPUSH
12610: LD_EXP 15
12614: PPUSH
12615: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12619: LD_ADDR_OWVAR 26
12623: PUSH
12624: LD_STRING Nikolai Andreyev
12626: ST_TO_ADDR
// driver2 = CreateHuman ;
12627: LD_ADDR_EXP 18
12631: PUSH
12632: CALL_OW 44
12636: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12637: LD_EXP 18
12641: PPUSH
12642: LD_EXP 16
12646: PPUSH
12647: CALL_OW 52
// end ;
12651: LD_VAR 0 1
12655: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12656: LD_INT 0
12658: PPUSH
12659: PPUSH
12660: PPUSH
12661: PPUSH
12662: PPUSH
12663: PPUSH
12664: PPUSH
// uc_side = 3 ;
12665: LD_ADDR_OWVAR 20
12669: PUSH
12670: LD_INT 3
12672: ST_TO_ADDR
// uc_nation = 3 ;
12673: LD_ADDR_OWVAR 21
12677: PUSH
12678: LD_INT 3
12680: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
12681: LD_ADDR_VAR 0 4
12685: PUSH
12686: DOUBLE
12687: LD_INT 1
12689: DEC
12690: ST_TO_ADDR
12691: LD_VAR 0 1
12695: PUSH
12696: LD_INT 1
12698: PPUSH
12699: LD_INT 3
12701: PPUSH
12702: CALL_OW 12
12706: PLUS
12707: PUSH
12708: FOR_TO
12709: IFFALSE 12886
// begin vc_engine = 1 ;
12711: LD_ADDR_OWVAR 39
12715: PUSH
12716: LD_INT 1
12718: ST_TO_ADDR
// vc_control = 1 ;
12719: LD_ADDR_OWVAR 38
12723: PUSH
12724: LD_INT 1
12726: ST_TO_ADDR
// vc_weapon = 42 ;
12727: LD_ADDR_OWVAR 40
12731: PUSH
12732: LD_INT 42
12734: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
12735: LD_ADDR_OWVAR 37
12739: PUSH
12740: LD_INT 21
12742: PUSH
12743: LD_INT 22
12745: PUSH
12746: LD_INT 22
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: LIST
12753: PUSH
12754: LD_OWVAR 67
12758: ARRAY
12759: ST_TO_ADDR
// veh = CreateVehicle ;
12760: LD_ADDR_VAR 0 5
12764: PUSH
12765: CALL_OW 45
12769: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12770: LD_VAR 0 5
12774: PPUSH
12775: LD_VAR 0 2
12779: PPUSH
12780: LD_INT 0
12782: PPUSH
12783: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
12787: LD_ADDR_EXP 26
12791: PUSH
12792: LD_EXP 26
12796: PUSH
12797: LD_VAR 0 5
12801: ADD
12802: ST_TO_ADDR
// hc_gallery =  ;
12803: LD_ADDR_OWVAR 33
12807: PUSH
12808: LD_STRING 
12810: ST_TO_ADDR
// hc_name =  ;
12811: LD_ADDR_OWVAR 26
12815: PUSH
12816: LD_STRING 
12818: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12819: LD_INT 0
12821: PPUSH
12822: LD_INT 3
12824: PPUSH
12825: LD_EXP 13
12829: PPUSH
12830: LD_EXP 14
12834: PPUSH
12835: CALL_OW 12
12839: PPUSH
12840: CALL_OW 380
// un = CreateHuman ;
12844: LD_ADDR_VAR 0 6
12848: PUSH
12849: CALL_OW 44
12853: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12854: LD_VAR 0 6
12858: PPUSH
12859: LD_VAR 0 5
12863: PPUSH
12864: CALL_OW 52
// attackGroup = attackGroup ^ un ;
12868: LD_ADDR_EXP 26
12872: PUSH
12873: LD_EXP 26
12877: PUSH
12878: LD_VAR 0 6
12882: ADD
12883: ST_TO_ADDR
// end ;
12884: GO 12708
12886: POP
12887: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12888: LD_INT 0
12890: PPUSH
12891: LD_INT 2
12893: PPUSH
12894: LD_EXP 13
12898: PPUSH
12899: LD_EXP 14
12903: PPUSH
12904: CALL_OW 12
12908: PPUSH
12909: CALL_OW 380
// un = CreateHuman ;
12913: LD_ADDR_VAR 0 6
12917: PUSH
12918: CALL_OW 44
12922: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
12923: LD_ADDR_VAR 0 4
12927: PUSH
12928: DOUBLE
12929: LD_INT 1
12931: DEC
12932: ST_TO_ADDR
12933: LD_VAR 0 1
12937: PUSH
12938: LD_INT 2
12940: PUSH
12941: LD_INT 2
12943: MUL
12944: PLUS
12945: PUSH
12946: FOR_TO
12947: IFFALSE 13035
// begin hc_gallery =  ;
12949: LD_ADDR_OWVAR 33
12953: PUSH
12954: LD_STRING 
12956: ST_TO_ADDR
// hc_name =  ;
12957: LD_ADDR_OWVAR 26
12961: PUSH
12962: LD_STRING 
12964: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12965: LD_INT 1
12967: PPUSH
12968: LD_INT 1
12970: PPUSH
12971: LD_EXP 13
12975: PPUSH
12976: LD_EXP 14
12980: PPUSH
12981: CALL_OW 12
12985: PPUSH
12986: CALL_OW 380
// un = CreateHuman ;
12990: LD_ADDR_VAR 0 6
12994: PUSH
12995: CALL_OW 44
12999: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13000: LD_VAR 0 6
13004: PPUSH
13005: LD_VAR 0 2
13009: PPUSH
13010: LD_INT 0
13012: PPUSH
13013: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13017: LD_ADDR_EXP 26
13021: PUSH
13022: LD_EXP 26
13026: PUSH
13027: LD_VAR 0 6
13031: ADD
13032: ST_TO_ADDR
// end ;
13033: GO 12946
13035: POP
13036: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13037: LD_ADDR_VAR 0 7
13041: PUSH
13042: LD_INT 26
13044: PPUSH
13045: LD_INT 22
13047: PUSH
13048: LD_INT 3
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PUSH
13055: LD_INT 21
13057: PUSH
13058: LD_INT 1
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PUSH
13065: LD_INT 26
13067: PUSH
13068: LD_INT 1
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: LIST
13079: PPUSH
13080: CALL_OW 70
13084: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13085: LD_VAR 0 7
13089: PUSH
13090: LD_INT 1
13092: ARRAY
13093: PPUSH
13094: LD_STRING D9-Rus3-1
13096: PPUSH
13097: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13101: LD_VAR 0 7
13105: PUSH
13106: LD_INT 2
13108: ARRAY
13109: PPUSH
13110: LD_STRING D9-Russ-1
13112: PPUSH
13113: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13117: LD_INT 35
13119: PPUSH
13120: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13124: LD_ADDR_VAR 0 4
13128: PUSH
13129: LD_INT 26
13131: PPUSH
13132: LD_INT 22
13134: PUSH
13135: LD_INT 3
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PUSH
13142: EMPTY
13143: LIST
13144: PPUSH
13145: CALL_OW 70
13149: PUSH
13150: FOR_IN
13151: IFFALSE 13323
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13153: LD_ADDR_VAR 0 8
13157: PUSH
13158: LD_INT 22
13160: PUSH
13161: LD_INT 1
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PPUSH
13168: CALL_OW 69
13172: PPUSH
13173: LD_VAR 0 4
13177: PPUSH
13178: CALL_OW 74
13182: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13183: LD_ADDR_VAR 0 9
13187: PUSH
13188: LD_INT 22
13190: PUSH
13191: LD_INT 1
=======
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 70
9316: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9317: LD_ADDR_VAR 0 9
9321: PUSH
9322: LD_VAR 0 2
9326: PPUSH
9327: LD_INT 22
9329: PUSH
9330: LD_VAR 0 1
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 21
9341: PUSH
9342: LD_INT 2
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: LD_INT 34
9351: PUSH
9352: LD_INT 46
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 24
9361: PUSH
9362: LD_INT 1000
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 58
9371: PUSH
9372: EMPTY
9373: LIST
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: PPUSH
9382: CALL_OW 70
9386: ST_TO_ADDR
// for i in damageVehicle_list do
9387: LD_ADDR_VAR 0 5
9391: PUSH
9392: LD_VAR 0 8
9396: PUSH
9397: FOR_IN
9398: IFFALSE 9417
// mechanicInside_list = UnitsInside ( i ) ;
9400: LD_ADDR_VAR 0 10
9404: PUSH
9405: LD_VAR 0 5
9409: PPUSH
9410: CALL_OW 313
9414: ST_TO_ADDR
9415: GO 9397
9417: POP
9418: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9419: LD_ADDR_VAR 0 11
9423: PUSH
9424: LD_VAR 0 2
9428: PPUSH
9429: LD_INT 22
9431: PUSH
9432: LD_VAR 0 1
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: LD_INT 25
9443: PUSH
9444: LD_INT 3
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: PPUSH
9455: CALL_OW 70
9459: ST_TO_ADDR
// if damageVehicle_list > 0 then
9460: LD_VAR 0 8
9464: PUSH
9465: LD_INT 0
9467: GREATER
9468: IFFALSE 9541
// begin for i in damageVehicle_list do
9470: LD_ADDR_VAR 0 5
9474: PUSH
9475: LD_VAR 0 8
9479: PUSH
9480: FOR_IN
9481: IFFALSE 9539
// begin for j in mechanicInside_list do
9483: LD_ADDR_VAR 0 6
9487: PUSH
9488: LD_VAR 0 10
9492: PUSH
9493: FOR_IN
9494: IFFALSE 9535
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9496: LD_VAR 0 8
9500: PPUSH
9501: LD_VAR 0 2
9505: PPUSH
9506: CALL_OW 113
// AddComExitVehicle ( j ) ;
9510: LD_VAR 0 6
9514: PPUSH
9515: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9519: LD_VAR 0 6
9523: PPUSH
9524: LD_VAR 0 5
9528: PPUSH
9529: CALL_OW 189
// end ;
9533: GO 9493
9535: POP
9536: POP
// end ;
9537: GO 9480
9539: POP
9540: POP
// end ; if emptyVehicle_list > 0 then
9541: LD_VAR 0 9
9545: PUSH
9546: LD_INT 0
9548: GREATER
9549: IFFALSE 9599
// begin for i in emptyVehicle_list do
9551: LD_ADDR_VAR 0 5
9555: PUSH
9556: LD_VAR 0 9
9560: PUSH
9561: FOR_IN
9562: IFFALSE 9597
// begin for j in mechanicOutside_list do
9564: LD_ADDR_VAR 0 6
9568: PUSH
9569: LD_VAR 0 11
9573: PUSH
9574: FOR_IN
9575: IFFALSE 9593
// begin AddComEnterUnit ( j , i ) ;
9577: LD_VAR 0 6
9581: PPUSH
9582: LD_VAR 0 5
9586: PPUSH
9587: CALL_OW 180
// end ;
9591: GO 9574
9593: POP
9594: POP
// end ;
9595: GO 9561
9597: POP
9598: POP
// end ; if VehicleOK_list > 0 then
9599: LD_VAR 0 7
9603: PUSH
9604: LD_INT 0
9606: GREATER
9607: IFFALSE 9641
// begin for i in VehicleOK_list do
9609: LD_ADDR_VAR 0 5
9613: PUSH
9614: LD_VAR 0 7
9618: PUSH
9619: FOR_IN
9620: IFFALSE 9639
// ComAgressiveMove ( i , 110 , 29 ) ;
9622: LD_VAR 0 5
9626: PPUSH
9627: LD_INT 110
9629: PPUSH
9630: LD_INT 29
9632: PPUSH
9633: CALL_OW 114
9637: GO 9619
9639: POP
9640: POP
// end ; end ;
9641: LD_VAR 0 4
9645: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9646: LD_INT 0
9648: PPUSH
9649: PPUSH
9650: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9651: LD_VAR 0 1
9655: PPUSH
9656: LD_INT 22
9658: PUSH
9659: LD_VAR 0 2
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PUSH
9668: LD_INT 2
9670: PUSH
9671: LD_INT 21
9673: PUSH
9674: LD_INT 2
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 21
9683: PUSH
9684: LD_INT 1
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: LIST
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PPUSH
9700: CALL_OW 70
9704: PUSH
9705: LD_VAR 0 5
9709: GREATER
9710: IFFALSE 9842
// begin for i in defendersList do
9712: LD_ADDR_VAR 0 7
9716: PUSH
9717: LD_VAR 0 3
9721: PUSH
9722: FOR_IN
9723: IFFALSE 9838
// begin AddComExitBuilding ( i ) ;
9725: LD_VAR 0 7
9729: PPUSH
9730: CALL_OW 182
// wait ( 0 0$1 ) ;
9734: LD_INT 35
9736: PPUSH
9737: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9741: LD_ADDR_VAR 0 8
9745: PUSH
9746: LD_VAR 0 1
9750: PPUSH
9751: LD_INT 22
9753: PUSH
9754: LD_VAR 0 2
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: LD_INT 2
9765: PUSH
9766: LD_INT 21
9768: PUSH
9769: LD_INT 2
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 21
9778: PUSH
9779: LD_INT 1
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PPUSH
9795: CALL_OW 70
9799: PUSH
9800: FOR_IN
9801: IFFALSE 9834
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9803: LD_VAR 0 7
9807: PPUSH
9808: LD_VAR 0 8
9812: PPUSH
9813: CALL_OW 250
9817: PPUSH
9818: LD_VAR 0 8
9822: PPUSH
9823: CALL_OW 251
9827: PPUSH
9828: CALL_OW 174
9832: GO 9800
9834: POP
9835: POP
// end ;
9836: GO 9722
9838: POP
9839: POP
// end else
9840: GO 9873
// begin for i in defendersList do
9842: LD_ADDR_VAR 0 7
9846: PUSH
9847: LD_VAR 0 3
9851: PUSH
9852: FOR_IN
9853: IFFALSE 9871
// ComEnterUnit ( i , build ) ;
9855: LD_VAR 0 7
9859: PPUSH
9860: LD_VAR 0 4
9864: PPUSH
9865: CALL_OW 120
9869: GO 9852
9871: POP
9872: POP
// end ; end ;
9873: LD_VAR 0 6
9877: RET
// export function RussianTrap ; var i ; begin
9878: LD_INT 0
9880: PPUSH
9881: PPUSH
// if GetSide ( Brian ) = 4 then
9882: LD_EXP 6
9886: PPUSH
9887: CALL_OW 255
9891: PUSH
9892: LD_INT 4
9894: EQUAL
9895: IFFALSE 9918
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9897: LD_EXP 6
9901: PUSH
9902: LD_EXP 7
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PPUSH
9911: LD_INT 0
9913: PPUSH
9914: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
9918: LD_ADDR_VAR 0 2
9922: PUSH
9923: LD_INT 22
9925: PUSH
9926: LD_INT 3
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: LD_INT 21
9935: PUSH
9936: LD_INT 1
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 69
9951: PUSH
9952: FOR_IN
9953: IFFALSE 10027
// begin ComExitBuilding ( i ) ;
9955: LD_VAR 0 2
9959: PPUSH
9960: CALL_OW 122
// wait ( 0 0$1 ) ;
9964: LD_INT 35
9966: PPUSH
9967: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
9971: LD_VAR 0 2
9975: PPUSH
9976: LD_INT 120
9978: PPUSH
9979: LD_INT 56
9981: PPUSH
9982: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
9986: LD_VAR 0 2
9990: PPUSH
9991: LD_INT 111
9993: PPUSH
9994: LD_INT 37
9996: PPUSH
9997: CALL_OW 174
// AddComCrawl ( i ) ;
10001: LD_VAR 0 2
10005: PPUSH
10006: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10010: LD_VAR 0 2
10014: PPUSH
10015: LD_INT 109
10017: PPUSH
10018: LD_INT 30
10020: PPUSH
10021: CALL_OW 174
// end ;
10025: GO 9952
10027: POP
10028: POP
// end ;
10029: LD_VAR 0 1
10033: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10034: LD_INT 0
10036: PPUSH
10037: PPUSH
10038: PPUSH
10039: PPUSH
10040: PPUSH
// nearest_dist = 1000 ;
10041: LD_ADDR_VAR 0 4
10045: PUSH
10046: LD_INT 1000
10048: ST_TO_ADDR
// nearest_un = un ;
10049: LD_ADDR_VAR 0 5
10053: PUSH
10054: LD_VAR 0 1
10058: ST_TO_ADDR
// for sold in units do
10059: LD_ADDR_VAR 0 6
10063: PUSH
10064: LD_VAR 0 2
10068: PUSH
10069: FOR_IN
10070: IFFALSE 10126
// begin dist = GetDistUnits ( un , sold ) ;
10072: LD_ADDR_VAR 0 7
10076: PUSH
10077: LD_VAR 0 1
10081: PPUSH
10082: LD_VAR 0 6
10086: PPUSH
10087: CALL_OW 296
10091: ST_TO_ADDR
// if dist < nearest_dist then
10092: LD_VAR 0 7
10096: PUSH
10097: LD_VAR 0 4
10101: LESS
10102: IFFALSE 10124
// begin nearest_un = sold ;
10104: LD_ADDR_VAR 0 5
10108: PUSH
10109: LD_VAR 0 6
10113: ST_TO_ADDR
// nearest_dist = dist ;
10114: LD_ADDR_VAR 0 4
10118: PUSH
10119: LD_VAR 0 7
10123: ST_TO_ADDR
// end ; end ;
10124: GO 10069
10126: POP
10127: POP
// result := nearest_un ;
10128: LD_ADDR_VAR 0 3
10132: PUSH
10133: LD_VAR 0 5
10137: ST_TO_ADDR
// end ;
10138: LD_VAR 0 3
10142: RET
// export function PrepareDifficulty ; begin
10143: LD_INT 0
10145: PPUSH
// if Difficulty = 1 then
10146: LD_OWVAR 67
10150: PUSH
10151: LD_INT 1
10153: EQUAL
10154: IFFALSE 10217
// begin RemoveUnit ( brw2 ) ;
10156: LD_INT 9
10158: PPUSH
10159: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10163: LD_INT 30
10165: PPUSH
10166: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10170: LD_INT 52
10172: PPUSH
10173: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10177: LD_INT 63
10179: PPUSH
10180: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10184: LD_INT 5
10186: PUSH
10187: LD_INT 4
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PPUSH
10194: LD_INT 60
10196: PPUSH
10197: CALL_OW 240
// RuSoldMinLevel = 0 ;
10201: LD_ADDR_EXP 13
10205: PUSH
10206: LD_INT 0
10208: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10209: LD_ADDR_EXP 14
10213: PUSH
10214: LD_INT 1
10216: ST_TO_ADDR
// end ; if Difficulty = 2 then
10217: LD_OWVAR 67
10221: PUSH
10222: LD_INT 2
10224: EQUAL
10225: IFFALSE 10267
// begin RemoveUnit ( brw4 ) ;
10227: LD_INT 52
10229: PPUSH
10230: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10234: LD_INT 5
10236: PUSH
10237: LD_INT 4
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PPUSH
10244: LD_INT 50
10246: PPUSH
10247: CALL_OW 240
// RuSoldMinLevel = 1 ;
10251: LD_ADDR_EXP 13
10255: PUSH
10256: LD_INT 1
10258: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10259: LD_ADDR_EXP 14
10263: PUSH
10264: LD_INT 2
10266: ST_TO_ADDR
// end ; if Difficulty = 3 then
10267: LD_OWVAR 67
10271: PUSH
10272: LD_INT 3
10274: EQUAL
10275: IFFALSE 10310
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10277: LD_INT 5
10279: PUSH
10280: LD_INT 4
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PPUSH
10287: LD_INT 40
10289: PPUSH
10290: CALL_OW 240
// RuSoldMinLevel = 2 ;
10294: LD_ADDR_EXP 13
10298: PUSH
10299: LD_INT 2
10301: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10302: LD_ADDR_EXP 14
10306: PUSH
10307: LD_INT 3
10309: ST_TO_ADDR
// end ; end ;
10310: LD_VAR 0 1
10314: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10315: LD_INT 0
10317: PPUSH
10318: PPUSH
10319: PPUSH
// tmp = [ ] ;
10320: LD_ADDR_VAR 0 5
10324: PUSH
10325: EMPTY
10326: ST_TO_ADDR
// if not vehicles then
10327: LD_VAR 0 1
10331: NOT
10332: IFFALSE 10336
// exit ;
10334: GO 10453
// for i in vehicles do
10336: LD_ADDR_VAR 0 4
10340: PUSH
10341: LD_VAR 0 1
10345: PUSH
10346: FOR_IN
10347: IFFALSE 10437
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10349: LD_ADDR_VAR 0 5
10353: PUSH
10354: LD_VAR 0 5
10358: PPUSH
10359: LD_INT 1
10361: PPUSH
10362: LD_VAR 0 4
10366: PPUSH
10367: CALL_OW 265
10371: PUSH
10372: LD_VAR 0 4
10376: PPUSH
10377: CALL_OW 262
10381: PUSH
10382: LD_VAR 0 4
10386: PPUSH
10387: CALL_OW 263
10391: PUSH
10392: LD_VAR 0 4
10396: PPUSH
10397: CALL_OW 264
10401: PUSH
10402: LD_VAR 0 4
10406: PPUSH
10407: CALL_OW 261
10411: PUSH
10412: LD_VAR 0 4
10416: PPUSH
10417: CALL_OW 256
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: PPUSH
10430: CALL_OW 2
10434: ST_TO_ADDR
// end ;
10435: GO 10346
10437: POP
10438: POP
// SaveVariable ( tmp , ident ) ;
10439: LD_VAR 0 5
10443: PPUSH
10444: LD_VAR 0 2
10448: PPUSH
10449: CALL_OW 39
// end ; end_of_file
10453: LD_VAR 0 3
10457: RET
// export function PrepareHeroes ; begin
10458: LD_INT 0
10460: PPUSH
// uc_side = 1 ;
10461: LD_ADDR_OWVAR 20
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10469: LD_ADDR_EXP 1
10473: PUSH
10474: LD_STRING 01_JMM
10476: PPUSH
10477: CALL_OW 34
10481: ST_TO_ADDR
// SetLives ( JMM , LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ) ;
10482: LD_EXP 1
10486: PPUSH
10487: LD_STRING 01_JMMLifePoints_1
10489: PPUSH
10490: LD_INT 1000
10492: PPUSH
10493: CALL_OW 30
10497: PPUSH
10498: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10502: LD_ADDR_EXP 9
10506: PUSH
10507: LD_STRING Powell
10509: PPUSH
10510: CALL_OW 25
10514: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10515: LD_ADDR_EXP 2
10519: PUSH
10520: LD_STRING 01_Bobby
10522: PPUSH
10523: CALL_OW 34
10527: ST_TO_ADDR
// if Bobby then
10528: LD_EXP 2
10532: IFFALSE 10554
// SetLives ( Bobby , LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ) ;
10534: LD_EXP 2
10538: PPUSH
10539: LD_STRING 01_BobbyLifePoints_1
10541: PPUSH
10542: LD_INT 1000
10544: PPUSH
10545: CALL_OW 30
10549: PPUSH
10550: CALL_OW 234
// Cyrus = CreateCharacter ( 01_Cyrus ) ;
10554: LD_ADDR_EXP 3
10558: PUSH
10559: LD_STRING 01_Cyrus
10561: PPUSH
10562: CALL_OW 34
10566: ST_TO_ADDR
// if Cyrus then
10567: LD_EXP 3
10571: IFFALSE 10593
// SetLives ( Cyrus , LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ) ;
10573: LD_EXP 3
10577: PPUSH
10578: LD_STRING 01_CyrusLifePoints_1
10580: PPUSH
10581: LD_INT 1000
10583: PPUSH
10584: CALL_OW 30
10588: PPUSH
10589: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
10593: LD_ADDR_EXP 5
10597: PUSH
10598: LD_STRING Khatam
10600: PPUSH
10601: CALL_OW 25
10605: ST_TO_ADDR
// uc_side = 4 ;
10606: LD_ADDR_OWVAR 20
10610: PUSH
10611: LD_INT 4
10613: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10614: LD_ADDR_EXP 4
10618: PUSH
10619: LD_STRING Lisa
10621: PPUSH
10622: CALL_OW 25
10626: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10627: LD_EXP 1
10631: PPUSH
10632: LD_INT 3
10634: PPUSH
10635: LD_INT 0
10637: PPUSH
10638: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10642: LD_EXP 2
10646: PPUSH
10647: LD_INT 3
10649: PPUSH
10650: LD_INT 0
10652: PPUSH
10653: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10657: LD_EXP 3
10661: PPUSH
10662: LD_INT 3
10664: PPUSH
10665: LD_INT 0
10667: PPUSH
10668: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10672: LD_EXP 4
10676: PPUSH
10677: LD_INT 5
10679: PPUSH
10680: LD_INT 0
10682: PPUSH
10683: CALL_OW 49
// ComCrawl ( Lisa ) ;
10687: LD_EXP 4
10691: PPUSH
10692: CALL_OW 137
// end ;
10696: LD_VAR 0 1
10700: RET
// export function PrepareLisSquad ; var i , un ; begin
10701: LD_INT 0
10703: PPUSH
10704: PPUSH
10705: PPUSH
// uc_side = 4 ;
10706: LD_ADDR_OWVAR 20
10710: PUSH
10711: LD_INT 4
10713: ST_TO_ADDR
// uc_nation = 1 ;
10714: LD_ADDR_OWVAR 21
10718: PUSH
10719: LD_INT 1
10721: ST_TO_ADDR
// hc_class := 2 ;
10722: LD_ADDR_OWVAR 28
10726: PUSH
10727: LD_INT 2
10729: ST_TO_ADDR
// hc_sex := sex_male ;
10730: LD_ADDR_OWVAR 27
10734: PUSH
10735: LD_INT 1
10737: ST_TO_ADDR
// hc_gallery :=  ;
10738: LD_ADDR_OWVAR 33
10742: PUSH
10743: LD_STRING 
10745: ST_TO_ADDR
// hc_name :=  ;
10746: LD_ADDR_OWVAR 26
10750: PUSH
10751: LD_STRING 
10753: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10754: LD_ADDR_OWVAR 30
10758: PUSH
10759: LD_INT 0
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: LD_INT 0
10767: PUSH
10768: LD_INT 0
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
10777: LD_ADDR_OWVAR 31
10781: PUSH
10782: LD_INT 1
10784: PUSH
10785: LD_INT 2
10787: PUSH
10788: LD_INT 0
10790: PUSH
10791: LD_INT 0
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: ST_TO_ADDR
// un := CreateHuman ;
10800: LD_ADDR_VAR 0 3
10804: PUSH
10805: CALL_OW 44
10809: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10810: LD_VAR 0 3
10814: PPUSH
10815: LD_INT 6
10817: PPUSH
10818: LD_INT 0
10820: PPUSH
10821: CALL_OW 49
// hc_sex := sex_female ;
10825: LD_ADDR_OWVAR 27
10829: PUSH
10830: LD_INT 2
10832: ST_TO_ADDR
// hc_gallery :=  ;
10833: LD_ADDR_OWVAR 33
10837: PUSH
10838: LD_STRING 
10840: ST_TO_ADDR
// hc_name :=  ;
10841: LD_ADDR_OWVAR 26
10845: PUSH
10846: LD_STRING 
10848: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
10849: LD_ADDR_OWVAR 30
10853: PUSH
10854: LD_INT 0
10856: PUSH
10857: LD_INT 0
10859: PUSH
10860: LD_INT 0
10862: PUSH
10863: LD_INT 1
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
10872: LD_ADDR_OWVAR 31
10876: PUSH
10877: LD_INT 0
10879: PUSH
10880: LD_INT 1
10882: PUSH
10883: LD_INT 0
10885: PUSH
10886: LD_INT 1
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: ST_TO_ADDR
// un := CreateHuman ;
10895: LD_ADDR_VAR 0 3
10899: PUSH
10900: CALL_OW 44
10904: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10905: LD_VAR 0 3
10909: PPUSH
10910: LD_INT 6
10912: PPUSH
10913: LD_INT 0
10915: PPUSH
10916: CALL_OW 49
// InitHc ;
10920: CALL_OW 19
// end ;
10924: LD_VAR 0 1
10928: RET
// export function PrepareOtherAmericans ; begin
10929: LD_INT 0
10931: PPUSH
// uc_side = 4 ;
10932: LD_ADDR_OWVAR 20
10936: PUSH
10937: LD_INT 4
10939: ST_TO_ADDR
// uc_nation = 1 ;
10940: LD_ADDR_OWVAR 21
10944: PUSH
10945: LD_INT 1
10947: ST_TO_ADDR
// hc_gallery =  ;
10948: LD_ADDR_OWVAR 33
10952: PUSH
10953: LD_STRING 
10955: ST_TO_ADDR
// hc_name = Brian Garvin ;
10956: LD_ADDR_OWVAR 26
10960: PUSH
10961: LD_STRING Brian Garvin
10963: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
10964: LD_INT 1
10966: PPUSH
10967: LD_INT 1
10969: PPUSH
10970: LD_INT 1
10972: PPUSH
10973: LD_INT 2
10975: PPUSH
10976: CALL_OW 12
10980: PPUSH
10981: CALL_OW 380
// Brian = CreateHuman ;
10985: LD_ADDR_EXP 6
10989: PUSH
10990: CALL_OW 44
10994: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
10995: LD_EXP 6
10999: PPUSH
11000: LD_INT 10
11002: PPUSH
11003: LD_INT 0
11005: PPUSH
11006: CALL_OW 49
// hc_name = Jerry White ;
11010: LD_ADDR_OWVAR 26
11014: PUSH
11015: LD_STRING Jerry White
11017: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11018: LD_INT 1
11020: PPUSH
11021: LD_INT 3
11023: PPUSH
11024: LD_INT 1
11026: PPUSH
11027: LD_INT 2
11029: PPUSH
11030: CALL_OW 12
11034: PPUSH
11035: CALL_OW 380
// Jerry = CreateHuman ;
11039: LD_ADDR_EXP 7
11043: PUSH
11044: CALL_OW 44
11048: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11049: LD_EXP 7
11053: PPUSH
11054: LD_INT 10
11056: PPUSH
11057: LD_INT 0
11059: PPUSH
11060: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11064: LD_EXP 6
11068: PUSH
11069: LD_EXP 7
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 140
// end ;
11082: LD_VAR 0 1
11086: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11087: LD_INT 0
11089: PPUSH
11090: PPUSH
11091: PPUSH
// for i = 1 to 6 do
11092: LD_ADDR_VAR 0 2
11096: PUSH
11097: DOUBLE
11098: LD_INT 1
11100: DEC
11101: ST_TO_ADDR
11102: LD_INT 6
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11200
// begin uc_side = 4 ;
11108: LD_ADDR_OWVAR 20
11112: PUSH
11113: LD_INT 4
11115: ST_TO_ADDR
// uc_nation = 1 ;
11116: LD_ADDR_OWVAR 21
11120: PUSH
11121: LD_INT 1
11123: ST_TO_ADDR
// hc_gallery =  ;
11124: LD_ADDR_OWVAR 33
11128: PUSH
11129: LD_STRING 
11131: ST_TO_ADDR
// hc_name =  ;
11132: LD_ADDR_OWVAR 26
11136: PUSH
11137: LD_STRING 
11139: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11140: LD_INT 0
11142: PPUSH
11143: LD_INT 1
11145: PPUSH
11146: LD_INT 4
11148: PPUSH
11149: CALL_OW 12
11153: PPUSH
11154: LD_INT 1
11156: PPUSH
11157: CALL_OW 380
// un = CreateHuman ;
11161: LD_ADDR_VAR 0 3
11165: PUSH
11166: CALL_OW 44
11170: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11171: LD_VAR 0 3
11175: PPUSH
11176: LD_INT 16
11178: PPUSH
11179: LD_INT 0
11181: PPUSH
11182: CALL_OW 49
// SetLives ( un , 1 ) ;
11186: LD_VAR 0 3
11190: PPUSH
11191: LD_INT 1
11193: PPUSH
11194: CALL_OW 234
// end ;
11198: GO 11105
11200: POP
11201: POP
// DyingSold = CreateHuman ;
11202: LD_ADDR_EXP 33
11206: PUSH
11207: CALL_OW 44
11211: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11212: LD_EXP 33
11216: PPUSH
11217: LD_INT 16
11219: PPUSH
11220: LD_INT 0
11222: PPUSH
11223: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11227: LD_EXP 33
11231: PPUSH
11232: LD_INT 250
11234: PPUSH
11235: CALL_OW 234
// end ; end_of_file
11239: LD_VAR 0 1
11243: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11244: LD_INT 0
11246: PPUSH
11247: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) ;
11248: LD_ADDR_VAR 0 2
11252: PUSH
11253: LD_INT 22
11255: PUSH
11256: LD_INT 1
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: LD_INT 23
11265: PUSH
11266: LD_INT 1
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PUSH
11273: LD_INT 25
11275: PUSH
11276: LD_INT 2
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: LIST
11287: PPUSH
11288: CALL_OW 69
11292: ST_TO_ADDR
// uc_side = 6 ;
11293: LD_ADDR_OWVAR 20
11297: PUSH
11298: LD_INT 6
11300: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11301: LD_ADDR_EXP 8
11305: PUSH
11306: LD_STRING Mikhail
11308: PPUSH
11309: CALL_OW 25
11313: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
11314: LD_EXP 8
11318: PPUSH
11319: LD_VAR 0 2
11323: PUSH
11324: LD_INT 1
11326: ARRAY
11327: PPUSH
11328: CALL_OW 250
11332: PPUSH
11333: LD_VAR 0 2
11337: PUSH
11338: LD_INT 1
11340: ARRAY
11341: PPUSH
11342: CALL_OW 251
11346: PPUSH
11347: LD_INT 3
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: CALL_OW 50
// end ;
11357: LD_VAR 0 1
11361: RET
// export function PrepareRussianCommander ; begin
11362: LD_INT 0
11364: PPUSH
// uc_side = 3 ;
11365: LD_ADDR_OWVAR 20
11369: PUSH
11370: LD_INT 3
11372: ST_TO_ADDR
// uc_nation = 3 ;
11373: LD_ADDR_OWVAR 21
11377: PUSH
11378: LD_INT 3
11380: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11381: LD_ADDR_EXP 19
11385: PUSH
11386: LD_STRING Natasza
11388: PPUSH
11389: CALL_OW 25
11393: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11394: LD_EXP 19
11398: PPUSH
11399: LD_INT 24
11401: PPUSH
11402: LD_INT 0
11404: PPUSH
11405: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11409: LD_EXP 19
11413: PPUSH
11414: LD_INT 56
11416: PPUSH
11417: LD_INT 16
11419: PPUSH
11420: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11424: LD_ADDR_EXP 24
11428: PUSH
11429: LD_EXP 24
11433: PUSH
11434: LD_EXP 19
11438: ADD
11439: ST_TO_ADDR
// end ;
11440: LD_VAR 0 1
11444: RET
// export function PrepareSouthBase ; var i , un ; begin
11445: LD_INT 0
11447: PPUSH
11448: PPUSH
11449: PPUSH
// for i = 1 to 2 do
11450: LD_ADDR_VAR 0 2
11454: PUSH
11455: DOUBLE
11456: LD_INT 1
11458: DEC
11459: ST_TO_ADDR
11460: LD_INT 2
11462: PUSH
11463: FOR_TO
11464: IFFALSE 11573
// begin uc_side = 3 ;
11466: LD_ADDR_OWVAR 20
11470: PUSH
11471: LD_INT 3
11473: ST_TO_ADDR
// uc_nation = 3 ;
11474: LD_ADDR_OWVAR 21
11478: PUSH
11479: LD_INT 3
11481: ST_TO_ADDR
// hc_gallery =  ;
11482: LD_ADDR_OWVAR 33
11486: PUSH
11487: LD_STRING 
11489: ST_TO_ADDR
// hc_name =  ;
11490: LD_ADDR_OWVAR 26
11494: PUSH
11495: LD_STRING 
11497: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11498: LD_INT 1
11500: PPUSH
11501: LD_INT 1
11503: PPUSH
11504: LD_EXP 13
11508: PPUSH
11509: LD_EXP 14
11513: PPUSH
11514: CALL_OW 12
11518: PPUSH
11519: CALL_OW 380
// hc_importance = 0 ;
11523: LD_ADDR_OWVAR 32
11527: PUSH
11528: LD_INT 0
11530: ST_TO_ADDR
// un = CreateHuman ;
11531: LD_ADDR_VAR 0 3
11535: PUSH
11536: CALL_OW 44
11540: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11541: LD_VAR 0 3
11545: PPUSH
11546: LD_INT 11
11548: PPUSH
11549: LD_INT 0
11551: PPUSH
11552: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11556: LD_VAR 0 3
11560: PPUSH
11561: LD_INT 111
11563: PPUSH
11564: LD_INT 38
11566: PPUSH
11567: CALL_OW 118
// end ;
11571: GO 11463
11573: POP
11574: POP
// for i = 1 to Difficulty do
11575: LD_ADDR_VAR 0 2
11579: PUSH
11580: DOUBLE
11581: LD_INT 1
11583: DEC
11584: ST_TO_ADDR
11585: LD_OWVAR 67
11589: PUSH
11590: FOR_TO
11591: IFFALSE 11692
// begin uc_side = 3 ;
11593: LD_ADDR_OWVAR 20
11597: PUSH
11598: LD_INT 3
11600: ST_TO_ADDR
// uc_nation = 3 ;
11601: LD_ADDR_OWVAR 21
11605: PUSH
11606: LD_INT 3
11608: ST_TO_ADDR
// hc_gallery =  ;
11609: LD_ADDR_OWVAR 33
11613: PUSH
11614: LD_STRING 
11616: ST_TO_ADDR
// hc_name =  ;
11617: LD_ADDR_OWVAR 26
11621: PUSH
11622: LD_STRING 
11624: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11625: LD_INT 0
11627: PPUSH
11628: LD_INT 3
11630: PPUSH
11631: LD_EXP 13
11635: PPUSH
11636: LD_EXP 14
11640: PPUSH
11641: CALL_OW 12
11645: PPUSH
11646: CALL_OW 380
// un = CreateHuman ;
11650: LD_ADDR_VAR 0 3
11654: PUSH
11655: CALL_OW 44
11659: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
11660: LD_VAR 0 3
11664: PPUSH
11665: LD_INT 12
11667: PPUSH
11668: LD_INT 0
11670: PPUSH
11671: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
11675: LD_VAR 0 3
11679: PPUSH
11680: LD_INT 111
11682: PPUSH
11683: LD_INT 28
11685: PPUSH
11686: CALL_OW 118
// end ;
11690: GO 11590
11692: POP
11693: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
11694: LD_INT 3
11696: PPUSH
11697: LD_INT 3
11699: PPUSH
11700: LD_INT 33
11702: PPUSH
11703: LD_EXP 13
11707: PPUSH
11708: LD_EXP 14
11712: PPUSH
11713: CALL_OW 12
11717: PPUSH
11718: LD_INT 1
11720: PPUSH
11721: LD_INT 1
11723: PUSH
11724: LD_INT 1
11726: PPUSH
11727: LD_INT 2
11729: PPUSH
11730: CALL_OW 12
11734: PUSH
11735: LD_INT 1
11737: PPUSH
11738: LD_INT 2
11740: PPUSH
11741: CALL_OW 12
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: LIST
11750: PUSH
11751: LD_OWVAR 67
11755: ARRAY
11756: PPUSH
11757: CALL 8405 0 6
// for i in UnitsInside ( arm2 ) do
11761: LD_ADDR_VAR 0 2
11765: PUSH
11766: LD_INT 33
11768: PPUSH
11769: CALL_OW 313
11773: PUSH
11774: FOR_IN
11775: IFFALSE 11795
// southBaseDefenders = southBaseDefenders ^ i ;
11777: LD_ADDR_EXP 25
11781: PUSH
11782: LD_EXP 25
11786: PUSH
11787: LD_VAR 0 2
11791: ADD
11792: ST_TO_ADDR
11793: GO 11774
11795: POP
11796: POP
// end ;
11797: LD_VAR 0 1
11801: RET
// export function PrepareNorthBase ; var i , un ; begin
11802: LD_INT 0
11804: PPUSH
11805: PPUSH
11806: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
11807: LD_ADDR_VAR 0 2
11811: PUSH
11812: DOUBLE
11813: LD_INT 1
11815: DEC
11816: ST_TO_ADDR
11817: LD_INT 1
11819: PPUSH
11820: LD_INT 2
11822: PPUSH
11823: CALL_OW 12
11827: PUSH
11828: LD_INT 2
11830: PPUSH
11831: LD_INT 3
11833: PPUSH
11834: CALL_OW 12
11838: PUSH
11839: LD_INT 3
11841: PPUSH
11842: LD_INT 4
11844: PPUSH
11845: CALL_OW 12
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: LIST
11854: PUSH
11855: LD_OWVAR 67
11859: ARRAY
11860: PUSH
11861: FOR_TO
11862: IFFALSE 11948
// begin uc_side = 3 ;
11864: LD_ADDR_OWVAR 20
11868: PUSH
11869: LD_INT 3
11871: ST_TO_ADDR
// uc_nation = 3 ;
11872: LD_ADDR_OWVAR 21
11876: PUSH
11877: LD_INT 3
11879: ST_TO_ADDR
// hc_gallery =  ;
11880: LD_ADDR_OWVAR 33
11884: PUSH
11885: LD_STRING 
11887: ST_TO_ADDR
// hc_name =  ;
11888: LD_ADDR_OWVAR 26
11892: PUSH
11893: LD_STRING 
11895: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11896: LD_INT 0
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: LD_EXP 13
11906: PPUSH
11907: LD_EXP 14
11911: PPUSH
11912: CALL_OW 12
11916: PPUSH
11917: CALL_OW 380
// un = CreateHuman ;
11921: LD_ADDR_VAR 0 3
11925: PUSH
11926: CALL_OW 44
11930: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
11931: LD_VAR 0 3
11935: PPUSH
11936: LD_INT 14
11938: PPUSH
11939: LD_INT 0
11941: PPUSH
11942: CALL_OW 49
// end ;
11946: GO 11861
11948: POP
11949: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
11950: LD_INT 3
11952: PPUSH
11953: LD_INT 3
11955: PPUSH
11956: LD_INT 2
11958: PPUSH
11959: LD_EXP 13
11963: PPUSH
11964: LD_EXP 14
11968: PPUSH
11969: CALL_OW 12
11973: PPUSH
11974: LD_INT 1
11976: PPUSH
11977: LD_INT 1
11979: PPUSH
11980: LD_INT 2
11982: PPUSH
11983: CALL_OW 12
11987: PUSH
11988: LD_INT 1
11990: PPUSH
11991: LD_INT 3
11993: PPUSH
11994: CALL_OW 12
11998: PUSH
11999: LD_INT 1
12001: PPUSH
12002: LD_INT 3
12004: PPUSH
12005: CALL_OW 12
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: LIST
12014: PUSH
12015: LD_OWVAR 67
12019: ARRAY
12020: PPUSH
12021: CALL 8405 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12025: LD_INT 3
12027: PPUSH
12028: LD_INT 3
12030: PPUSH
12031: LD_INT 23
12033: PPUSH
12034: LD_EXP 13
12038: PPUSH
12039: LD_EXP 14
12043: PPUSH
12044: CALL_OW 12
12048: PPUSH
12049: LD_INT 4
12051: PPUSH
12052: LD_INT 0
12054: PUSH
12055: LD_INT 1
12057: PUSH
12058: LD_INT 2
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: PUSH
12066: LD_OWVAR 67
12070: ARRAY
12071: PPUSH
12072: CALL 8405 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12076: LD_INT 3
12078: PPUSH
12079: LD_INT 3
12081: PPUSH
12082: LD_INT 1
12084: PPUSH
12085: LD_EXP 13
12089: PPUSH
12090: LD_EXP 14
12094: PPUSH
12095: CALL_OW 12
12099: PPUSH
12100: LD_INT 2
12102: PPUSH
12103: LD_INT 1
12105: PUSH
12106: LD_INT 2
12108: PUSH
12109: LD_INT 2
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: LD_OWVAR 67
12121: ARRAY
12122: PPUSH
12123: CALL 8405 0 6
// for i in UnitsInside ( arm1 ) do
12127: LD_ADDR_VAR 0 2
12131: PUSH
12132: LD_INT 2
12134: PPUSH
12135: CALL_OW 313
12139: PUSH
12140: FOR_IN
12141: IFFALSE 12161
// northBaseDefenders = northBaseDefenders ^ i ;
12143: LD_ADDR_EXP 24
12147: PUSH
12148: LD_EXP 24
12152: PUSH
12153: LD_VAR 0 2
12157: ADD
12158: ST_TO_ADDR
12159: GO 12140
12161: POP
12162: POP
// end ;
12163: LD_VAR 0 1
12167: RET
// export function PrepareOtherRussians ; var i , un ; begin
12168: LD_INT 0
12170: PPUSH
12171: PPUSH
12172: PPUSH
// for i = 1 to 2 do
12173: LD_ADDR_VAR 0 2
12177: PUSH
12178: DOUBLE
12179: LD_INT 1
12181: DEC
12182: ST_TO_ADDR
12183: LD_INT 2
12185: PUSH
12186: FOR_TO
12187: IFFALSE 12288
// begin uc_side = 3 ;
12189: LD_ADDR_OWVAR 20
12193: PUSH
12194: LD_INT 3
12196: ST_TO_ADDR
// uc_nation = 3 ;
12197: LD_ADDR_OWVAR 21
12201: PUSH
12202: LD_INT 3
12204: ST_TO_ADDR
// hc_gallery =  ;
12205: LD_ADDR_OWVAR 33
12209: PUSH
12210: LD_STRING 
12212: ST_TO_ADDR
// hc_name =  ;
12213: LD_ADDR_OWVAR 26
12217: PUSH
12218: LD_STRING 
12220: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12221: LD_INT 0
12223: PPUSH
12224: LD_INT 1
12226: PPUSH
12227: LD_EXP 13
12231: PPUSH
12232: LD_EXP 14
12236: PPUSH
12237: CALL_OW 12
12241: PPUSH
12242: CALL_OW 380
// un = CreateHuman ;
12246: LD_ADDR_VAR 0 3
12250: PUSH
12251: CALL_OW 44
12255: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12256: LD_VAR 0 3
12260: PPUSH
12261: LD_INT 9
12263: PPUSH
12264: LD_INT 0
12266: PPUSH
12267: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12271: LD_VAR 0 3
12275: PPUSH
12276: LD_INT 80
12278: PPUSH
12279: LD_INT 73
12281: PPUSH
12282: CALL_OW 118
// end ;
12286: GO 12186
12288: POP
12289: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12290: LD_ADDR_VAR 0 2
12294: PUSH
12295: LD_INT 22
12297: PUSH
12298: LD_INT 3
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 30
12307: PUSH
12308: LD_INT 31
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PPUSH
12319: CALL_OW 69
12323: PUSH
12324: FOR_IN
12325: IFFALSE 12353
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12327: LD_EXP 13
12331: PPUSH
12332: LD_EXP 14
12336: PPUSH
12337: CALL_OW 12
12341: PPUSH
12342: LD_VAR 0 2
12346: PPUSH
12347: CALL 8515 0 2
12351: GO 12324
12353: POP
12354: POP
// end ;
12355: LD_VAR 0 1
12359: RET
// export function PrepareCargoBays ; begin
12360: LD_INT 0
12362: PPUSH
// uc_side = 3 ;
12363: LD_ADDR_OWVAR 20
12367: PUSH
12368: LD_INT 3
12370: ST_TO_ADDR
// uc_nation = 3 ;
12371: LD_ADDR_OWVAR 21
12375: PUSH
12376: LD_INT 3
12378: ST_TO_ADDR
// vc_engine = 1 ;
12379: LD_ADDR_OWVAR 39
12383: PUSH
12384: LD_INT 1
12386: ST_TO_ADDR
// vc_control = 1 ;
12387: LD_ADDR_OWVAR 38
12391: PUSH
12392: LD_INT 1
12394: ST_TO_ADDR
// vc_weapon = 51 ;
12395: LD_ADDR_OWVAR 40
12399: PUSH
12400: LD_INT 51
12402: ST_TO_ADDR
// vc_chassis = 22 ;
12403: LD_ADDR_OWVAR 37
12407: PUSH
12408: LD_INT 22
12410: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12411: LD_ADDR_EXP 15
12415: PUSH
12416: CALL_OW 45
12420: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12421: LD_ADDR_EXP 16
12425: PUSH
12426: CALL_OW 45
12430: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12431: LD_EXP 15
12435: PPUSH
12436: LD_INT 13
12438: PPUSH
12439: LD_INT 0
12441: PPUSH
12442: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12446: LD_EXP 16
12450: PPUSH
12451: LD_INT 13
12453: PPUSH
12454: LD_INT 0
12456: PPUSH
12457: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12461: LD_EXP 15
12465: PPUSH
12466: LD_INT 2
12468: PPUSH
12469: LD_INT 70
12471: PUSH
12472: LD_INT 50
12474: PUSH
12475: LD_INT 30
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: LIST
12482: PUSH
12483: LD_OWVAR 67
12487: ARRAY
12488: PPUSH
12489: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12493: LD_EXP 16
12497: PPUSH
12498: LD_INT 2
12500: PPUSH
12501: LD_INT 70
12503: PUSH
12504: LD_INT 50
12506: PUSH
12507: LD_INT 30
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: PUSH
12515: LD_OWVAR 67
12519: ARRAY
12520: PPUSH
12521: CALL_OW 291
// hc_gallery =  ;
12525: LD_ADDR_OWVAR 33
12529: PUSH
12530: LD_STRING 
12532: ST_TO_ADDR
// hc_name =  ;
12533: LD_ADDR_OWVAR 26
12537: PUSH
12538: LD_STRING 
12540: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12541: LD_INT 1
12543: PPUSH
12544: LD_INT 3
12546: PPUSH
12547: LD_INT 1
12549: PPUSH
12550: LD_INT 2
12552: PPUSH
12553: CALL_OW 12
12557: PPUSH
12558: CALL_OW 380
// driver1 = CreateHuman ;
12562: LD_ADDR_EXP 17
12566: PUSH
12567: CALL_OW 44
12571: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12572: LD_EXP 17
12576: PPUSH
12577: LD_EXP 15
12581: PPUSH
12582: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12586: LD_ADDR_OWVAR 26
12590: PUSH
12591: LD_STRING Nikolai Andreyev
12593: ST_TO_ADDR
// driver2 = CreateHuman ;
12594: LD_ADDR_EXP 18
12598: PUSH
12599: CALL_OW 44
12603: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12604: LD_EXP 18
12608: PPUSH
12609: LD_EXP 16
12613: PPUSH
12614: CALL_OW 52
// end ;
12618: LD_VAR 0 1
12622: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12623: LD_INT 0
12625: PPUSH
12626: PPUSH
12627: PPUSH
12628: PPUSH
12629: PPUSH
12630: PPUSH
12631: PPUSH
// uc_side = 3 ;
12632: LD_ADDR_OWVAR 20
12636: PUSH
12637: LD_INT 3
12639: ST_TO_ADDR
// uc_nation = 3 ;
12640: LD_ADDR_OWVAR 21
12644: PUSH
12645: LD_INT 3
12647: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
12648: LD_ADDR_VAR 0 4
12652: PUSH
12653: DOUBLE
12654: LD_INT 1
12656: DEC
12657: ST_TO_ADDR
12658: LD_VAR 0 1
12662: PUSH
12663: LD_INT 1
12665: PPUSH
12666: LD_INT 3
12668: PPUSH
12669: CALL_OW 12
12673: PLUS
12674: PUSH
12675: FOR_TO
12676: IFFALSE 12853
// begin vc_engine = 1 ;
12678: LD_ADDR_OWVAR 39
12682: PUSH
12683: LD_INT 1
12685: ST_TO_ADDR
// vc_control = 1 ;
12686: LD_ADDR_OWVAR 38
12690: PUSH
12691: LD_INT 1
12693: ST_TO_ADDR
// vc_weapon = 42 ;
12694: LD_ADDR_OWVAR 40
12698: PUSH
12699: LD_INT 42
12701: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
12702: LD_ADDR_OWVAR 37
12706: PUSH
12707: LD_INT 21
12709: PUSH
12710: LD_INT 22
12712: PUSH
12713: LD_INT 22
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: LIST
12720: PUSH
12721: LD_OWVAR 67
12725: ARRAY
12726: ST_TO_ADDR
// veh = CreateVehicle ;
12727: LD_ADDR_VAR 0 5
12731: PUSH
12732: CALL_OW 45
12736: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12737: LD_VAR 0 5
12741: PPUSH
12742: LD_VAR 0 2
12746: PPUSH
12747: LD_INT 0
12749: PPUSH
12750: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
12754: LD_ADDR_EXP 26
12758: PUSH
12759: LD_EXP 26
12763: PUSH
12764: LD_VAR 0 5
12768: ADD
12769: ST_TO_ADDR
// hc_gallery =  ;
12770: LD_ADDR_OWVAR 33
12774: PUSH
12775: LD_STRING 
12777: ST_TO_ADDR
// hc_name =  ;
12778: LD_ADDR_OWVAR 26
12782: PUSH
12783: LD_STRING 
12785: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12786: LD_INT 0
12788: PPUSH
12789: LD_INT 3
12791: PPUSH
12792: LD_EXP 13
12796: PPUSH
12797: LD_EXP 14
12801: PPUSH
12802: CALL_OW 12
12806: PPUSH
12807: CALL_OW 380
// un = CreateHuman ;
12811: LD_ADDR_VAR 0 6
12815: PUSH
12816: CALL_OW 44
12820: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12821: LD_VAR 0 6
12825: PPUSH
12826: LD_VAR 0 5
12830: PPUSH
12831: CALL_OW 52
// attackGroup = attackGroup ^ un ;
12835: LD_ADDR_EXP 26
12839: PUSH
12840: LD_EXP 26
12844: PUSH
12845: LD_VAR 0 6
12849: ADD
12850: ST_TO_ADDR
// end ;
12851: GO 12675
12853: POP
12854: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12855: LD_INT 0
12857: PPUSH
12858: LD_INT 2
12860: PPUSH
12861: LD_EXP 13
12865: PPUSH
12866: LD_EXP 14
12870: PPUSH
12871: CALL_OW 12
12875: PPUSH
12876: CALL_OW 380
// un = CreateHuman ;
12880: LD_ADDR_VAR 0 6
12884: PUSH
12885: CALL_OW 44
12889: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
12890: LD_ADDR_VAR 0 4
12894: PUSH
12895: DOUBLE
12896: LD_INT 1
12898: DEC
12899: ST_TO_ADDR
12900: LD_VAR 0 1
12904: PUSH
12905: LD_INT 2
12907: PUSH
12908: LD_INT 2
12910: MUL
12911: PLUS
12912: PUSH
12913: FOR_TO
12914: IFFALSE 13002
// begin hc_gallery =  ;
12916: LD_ADDR_OWVAR 33
12920: PUSH
12921: LD_STRING 
12923: ST_TO_ADDR
// hc_name =  ;
12924: LD_ADDR_OWVAR 26
12928: PUSH
12929: LD_STRING 
12931: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12932: LD_INT 1
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: LD_EXP 13
12942: PPUSH
12943: LD_EXP 14
12947: PPUSH
12948: CALL_OW 12
12952: PPUSH
12953: CALL_OW 380
// un = CreateHuman ;
12957: LD_ADDR_VAR 0 6
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
12967: LD_VAR 0 6
12971: PPUSH
12972: LD_VAR 0 2
12976: PPUSH
12977: LD_INT 0
12979: PPUSH
12980: CALL_OW 49
// attackGroup = attackGroup ^ un ;
12984: LD_ADDR_EXP 26
12988: PUSH
12989: LD_EXP 26
12993: PUSH
12994: LD_VAR 0 6
12998: ADD
12999: ST_TO_ADDR
// end ;
13000: GO 12913
13002: POP
13003: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13004: LD_ADDR_VAR 0 7
13008: PUSH
13009: LD_INT 26
13011: PPUSH
13012: LD_INT 22
13014: PUSH
13015: LD_INT 3
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: LD_INT 21
13024: PUSH
13025: LD_INT 1
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 26
13034: PUSH
13035: LD_INT 1
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: LIST
13046: PPUSH
13047: CALL_OW 70
13051: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13052: LD_VAR 0 7
13056: PUSH
13057: LD_INT 1
13059: ARRAY
13060: PPUSH
13061: LD_STRING D9-Rus3-1
13063: PPUSH
13064: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13068: LD_VAR 0 7
13072: PUSH
13073: LD_INT 2
13075: ARRAY
13076: PPUSH
13077: LD_STRING D9-Russ-1
13079: PPUSH
13080: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13084: LD_INT 35
13086: PPUSH
13087: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13091: LD_ADDR_VAR 0 4
13095: PUSH
13096: LD_INT 26
13098: PPUSH
13099: LD_INT 22
13101: PUSH
13102: LD_INT 3
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: PPUSH
13112: CALL_OW 70
13116: PUSH
13117: FOR_IN
13118: IFFALSE 13290
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13120: LD_ADDR_VAR 0 8
13124: PUSH
13125: LD_INT 22
13127: PUSH
13128: LD_INT 1
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PPUSH
13135: CALL_OW 69
13139: PPUSH
13140: LD_VAR 0 4
13144: PPUSH
13145: CALL_OW 74
13149: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13150: LD_ADDR_VAR 0 9
13154: PUSH
13155: LD_INT 22
13157: PUSH
13158: LD_INT 1
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 2
13167: PUSH
13168: LD_INT 59
13170: PUSH
13171: EMPTY
13172: LIST
13173: PUSH
13174: LD_INT 21
13176: PUSH
13177: LD_INT 1
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: LD_INT 21
13186: PUSH
13187: LD_INT 2
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
<<<<<<< HEAD
13197: PUSH
13198: LD_INT 2
13200: PUSH
13201: LD_INT 59
13203: PUSH
13204: EMPTY
13205: LIST
13206: PUSH
13207: LD_INT 21
13209: PUSH
13210: LD_INT 1
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: LD_INT 21
13219: PUSH
13220: LD_INT 2
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: EMPTY
13238: LIST
13239: PPUSH
13240: CALL_OW 69
13244: PPUSH
13245: LD_VAR 0 4
13249: PPUSH
13250: CALL_OW 74
13254: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13255: LD_VAR 0 4
13259: PPUSH
13260: LD_VAR 0 8
13264: PPUSH
13265: CALL_OW 296
13269: PUSH
13270: LD_INT 8
13272: PLUS
13273: PUSH
13274: LD_VAR 0 4
13278: PPUSH
13279: LD_VAR 0 9
13283: PPUSH
13284: CALL_OW 296
13288: LESS
13289: IFFALSE 13307
// begin ComAttackUnit ( i , target1 ) ;
13291: LD_VAR 0 4
13295: PPUSH
13296: LD_VAR 0 8
13300: PPUSH
13301: CALL_OW 115
// end else
13305: GO 13321
// begin ComAttackUnit ( i , target2 ) ;
13307: LD_VAR 0 4
13311: PPUSH
13312: LD_VAR 0 9
13316: PPUSH
13317: CALL_OW 115
// end ; end ;
13321: GO 13150
13323: POP
13324: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13325: LD_INT 26
13327: PPUSH
13328: LD_INT 22
13330: PUSH
13331: LD_INT 3
=======
13197: LIST
13198: LIST
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: EMPTY
13205: LIST
13206: PPUSH
13207: CALL_OW 69
13211: PPUSH
13212: LD_VAR 0 4
13216: PPUSH
13217: CALL_OW 74
13221: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13222: LD_VAR 0 4
13226: PPUSH
13227: LD_VAR 0 8
13231: PPUSH
13232: CALL_OW 296
13236: PUSH
13237: LD_INT 8
13239: PLUS
13240: PUSH
13241: LD_VAR 0 4
13245: PPUSH
13246: LD_VAR 0 9
13250: PPUSH
13251: CALL_OW 296
13255: LESS
13256: IFFALSE 13274
// begin ComAttackUnit ( i , target1 ) ;
13258: LD_VAR 0 4
13262: PPUSH
13263: LD_VAR 0 8
13267: PPUSH
13268: CALL_OW 115
// end else
13272: GO 13288
// begin ComAttackUnit ( i , target2 ) ;
13274: LD_VAR 0 4
13278: PPUSH
13279: LD_VAR 0 9
13283: PPUSH
13284: CALL_OW 115
// end ; end ;
13288: GO 13117
13290: POP
13291: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13292: LD_INT 26
13294: PPUSH
13295: LD_INT 22
13297: PUSH
13298: LD_INT 3
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 2
13307: PUSH
13308: LD_INT 21
13310: PUSH
13311: LD_INT 1
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 21
13320: PUSH
13321: LD_INT 2
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 59
13330: PUSH
13331: EMPTY
13332: LIST
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
<<<<<<< HEAD
13337: PUSH
13338: LD_INT 2
13340: PUSH
13341: LD_INT 21
13343: PUSH
13344: LD_INT 1
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 21
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 59
13363: PUSH
13364: EMPTY
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PPUSH
13377: CALL_OW 70
13381: PUSH
13382: LD_INT 0
13384: EQUAL
13385: IFFALSE 13117
// end ; end_of_file
13387: LD_VAR 0 3
13391: RET
// every 0 0$1 do
13392: GO 13394
13394: DISABLE
// begin enable ;
13395: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13396: LD_INT 3
13398: PPUSH
13399: LD_INT 1
13401: PPUSH
13402: LD_INT 22
13404: PPUSH
13405: CALL 8648 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13409: LD_INT 3
13411: PPUSH
13412: LD_INT 20
13414: PPUSH
13415: LD_INT 22
13417: PPUSH
13418: LD_INT 23
13420: PPUSH
13421: CALL 8894 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13425: LD_INT 3
13427: PPUSH
13428: LD_INT 21
13430: PPUSH
13431: LD_INT 23
13433: PPUSH
13434: CALL 9171 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13438: LD_INT 22
13440: PPUSH
13441: LD_INT 1
13443: PPUSH
13444: LD_EXP 24
13448: PPUSH
13449: LD_INT 2
13451: PPUSH
13452: LD_INT 3
13454: PPUSH
13455: CALL 9643 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13459: LD_INT 23
13461: PPUSH
13462: LD_INT 1
13464: PPUSH
13465: LD_EXP 25
13469: PPUSH
13470: LD_INT 33
13472: PPUSH
13473: LD_INT 1
13475: PPUSH
13476: CALL 9643 0 5
// end ; end_of_file
13480: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13481: LD_VAR 0 1
13485: PPUSH
13486: CALL_OW 255
13490: PUSH
13491: LD_INT 1
13493: EQUAL
13494: PUSH
13495: LD_VAR 0 1
13499: PPUSH
13500: CALL_OW 247
13504: PUSH
13505: LD_INT 1
13507: EQUAL
13508: AND
13509: IFFALSE 13525
// deadsCounter = deadsCounter + 1 ;
13511: LD_ADDR_EXP 31
13515: PUSH
13516: LD_EXP 31
13520: PUSH
13521: LD_INT 1
13523: PLUS
13524: ST_TO_ADDR
// end ;
13525: PPOPN 1
13527: END
// on Command ( comandid ) do var i , j , tmp ;
13528: LD_INT 0
13530: PPUSH
13531: PPUSH
13532: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13533: LD_ADDR_VAR 0 2
13537: PUSH
13538: LD_INT 22
13540: PUSH
13541: LD_INT 1
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 21
13550: PUSH
13551: LD_INT 2
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PPUSH
13562: CALL_OW 69
13566: PUSH
13567: FOR_IN
13568: IFFALSE 13693
// begin if GetTaskList ( i ) > 0 then
13570: LD_VAR 0 2
13574: PPUSH
13575: CALL_OW 437
13579: PUSH
13580: LD_INT 0
13582: GREATER
13583: IFFALSE 13691
// begin for j = 1 to GetTaskList ( i ) do
13585: LD_ADDR_VAR 0 3
13589: PUSH
13590: DOUBLE
13591: LD_INT 1
13593: DEC
13594: ST_TO_ADDR
13595: LD_VAR 0 2
13599: PPUSH
13600: CALL_OW 437
13604: PUSH
13605: FOR_TO
13606: IFFALSE 13689
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13608: LD_ADDR_VAR 0 4
13612: PUSH
13613: LD_VAR 0 2
13617: PPUSH
13618: CALL_OW 437
13622: PUSH
13623: LD_VAR 0 3
13627: ARRAY
13628: PUSH
13629: LD_INT 4
13631: ARRAY
13632: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
13633: LD_VAR 0 4
13637: PPUSH
13638: CALL_OW 255
13642: PUSH
13643: LD_INT 3
13645: EQUAL
13646: PUSH
13647: LD_VAR 0 4
13651: PPUSH
13652: CALL_OW 247
13656: PUSH
13657: LD_INT 2
13659: EQUAL
13660: AND
13661: PUSH
13662: LD_VAR 0 4
13666: PPUSH
13667: CALL_OW 264
13671: PUSH
13672: LD_INT 51
13674: EQUAL
13675: AND
13676: IFFALSE 13687
// ComStop ( i ) ;
13678: LD_VAR 0 2
13682: PPUSH
13683: CALL_OW 141
// end ;
13687: GO 13605
13689: POP
13690: POP
// end ; end ;
13691: GO 13567
13693: POP
13694: POP
// end ; end_of_file
13695: PPOPN 4
13697: END
// every 0 0$1 trigger IsDead ( JMM ) do
13698: LD_EXP 1
13702: PPUSH
13703: CALL_OW 301
13707: IFFALSE 13719
13709: GO 13711
13711: DISABLE
// YouLost ( JMM ) ;
13712: LD_STRING JMM
13714: PPUSH
13715: CALL_OW 104
13719: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
13720: LD_INT 1
13722: PPUSH
13723: CALL_OW 301
13727: PUSH
13728: LD_INT 10
13730: PPUSH
13731: CALL_OW 301
13735: OR
13736: IFFALSE 13748
13738: GO 13740
13740: DISABLE
// YouLost ( DepotDestroyed ) ;
13741: LD_STRING DepotDestroyed
13743: PPUSH
13744: CALL_OW 104
13748: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
13749: LD_INT 22
13751: PUSH
13752: LD_INT 1
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PUSH
13759: LD_INT 21
13761: PUSH
13762: LD_INT 1
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PUSH
13769: LD_INT 25
13771: PUSH
13772: LD_INT 2
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: LIST
13783: PPUSH
13784: CALL_OW 69
13788: PUSH
13789: LD_INT 0
13791: EQUAL
13792: PUSH
13793: LD_INT 22
13795: PUSH
13796: LD_INT 4
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: LD_INT 21
13805: PUSH
13806: LD_INT 1
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: LD_INT 25
13815: PUSH
13816: LD_INT 2
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: LIST
13827: PPUSH
13828: CALL_OW 69
13832: PUSH
13833: LD_INT 0
13835: EQUAL
13836: AND
13837: PUSH
13838: LD_INT 1
13840: PPUSH
13841: CALL_OW 255
13845: PUSH
13846: LD_INT 3
13848: EQUAL
13849: AND
13850: PUSH
13851: LD_INT 10
13853: PPUSH
13854: CALL_OW 255
13858: PUSH
13859: LD_INT 3
13861: EQUAL
13862: AND
13863: IFFALSE 13875
13865: GO 13867
13867: DISABLE
// YouLost ( Engineer ) ;
13868: LD_STRING Engineer
13870: PPUSH
13871: CALL_OW 104
13875: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
13876: LD_INT 1
13878: PPUSH
13879: CALL_OW 255
13883: PUSH
13884: LD_INT 3
13886: EQUAL
13887: PUSH
13888: LD_EXP 27
13892: PUSH
13893: LD_INT 1
13895: EQUAL
13896: AND
13897: IFFALSE 13909
13899: GO 13901
13901: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
13902: LD_STRING DepotCaptured
13904: PPUSH
13905: CALL_OW 104
13909: END
// export function PrepareTigers ; var i , un ; begin
13910: LD_INT 0
13912: PPUSH
13913: PPUSH
13914: PPUSH
// for i = 1 to Difficulty do
13915: LD_ADDR_VAR 0 2
13919: PUSH
13920: DOUBLE
13921: LD_INT 1
13923: DEC
13924: ST_TO_ADDR
13925: LD_OWVAR 67
13929: PUSH
13930: FOR_TO
13931: IFFALSE 14066
// begin hc_sex = sex_male ;
13933: LD_ADDR_OWVAR 27
13937: PUSH
13938: LD_INT 1
13940: ST_TO_ADDR
// uc_side = 0 ;
13941: LD_ADDR_OWVAR 20
13945: PUSH
13946: LD_INT 0
13948: ST_TO_ADDR
// uc_nation = nation_nature ;
13949: LD_ADDR_OWVAR 21
13953: PUSH
13954: LD_INT 0
13956: ST_TO_ADDR
// hc_class = class_tiger ;
13957: LD_ADDR_OWVAR 28
13961: PUSH
13962: LD_INT 14
13964: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
13965: LD_ADDR_OWVAR 31
13969: PUSH
13970: LD_EXP 14
13974: PUSH
13975: LD_INT 0
13977: PUSH
13978: LD_INT 0
13980: PUSH
13981: LD_INT 0
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
13990: LD_ADDR_OWVAR 35
13994: PUSH
13995: LD_INT 30
13997: PPUSH
13998: LD_INT 40
14000: PPUSH
14001: CALL_OW 12
14005: PUSH
14006: LD_INT 40
14008: PPUSH
14009: LD_INT 50
14011: PPUSH
14012: CALL_OW 12
14016: PUSH
14017: LD_INT 50
14019: PPUSH
14020: LD_INT 60
14022: PPUSH
14023: CALL_OW 12
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: LIST
14032: PUSH
14033: LD_OWVAR 67
14037: ARRAY
14038: ST_TO_ADDR
// un = CreateHuman ;
14039: LD_ADDR_VAR 0 3
14043: PUSH
14044: CALL_OW 44
14048: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14049: LD_VAR 0 3
14053: PPUSH
14054: LD_INT 27
14056: PPUSH
14057: LD_INT 0
14059: PPUSH
14060: CALL_OW 49
// end ;
14064: GO 13930
14066: POP
14067: POP
// end ; end_of_file
14068: LD_VAR 0 1
14072: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 do
14073: LD_INT 1
14075: PPUSH
14076: CALL_OW 255
14080: PUSH
14081: LD_INT 1
14083: EQUAL
14084: PUSH
14085: LD_INT 10
14087: PPUSH
14088: CALL_OW 255
14092: PUSH
14093: LD_INT 1
14095: EQUAL
14096: AND
14097: PUSH
14098: LD_EXP 20
14102: PUSH
14103: LD_INT 1
14105: EQUAL
14106: AND
14107: IFFALSE 14198
14109: GO 14111
14111: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14112: LD_INT 9450
14114: PUSH
14115: LD_INT 8400
14117: PUSH
14118: LD_INT 6300
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: PUSH
14126: LD_OWVAR 67
14130: ARRAY
14131: PPUSH
14132: CALL_OW 67
// if cargoEscape = 1 then
14136: LD_EXP 20
14140: PUSH
14141: LD_INT 1
14143: EQUAL
14144: IFFALSE 14198
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14146: LD_EXP 9
14150: PPUSH
14151: LD_STRING D6-Pow-1
14153: PPUSH
14154: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14158: LD_EXP 1
14162: PPUSH
14163: LD_STRING D6-JMM-1
14165: PPUSH
14166: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14170: LD_EXP 9
14174: PPUSH
14175: LD_STRING D6-Pow-2
14177: PPUSH
14178: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14182: LD_EXP 1
14186: PPUSH
14187: LD_STRING D6-JMM-2
14189: PPUSH
14190: CALL_OW 88
// FinishMission ;
14194: CALL 14406 0 0
// end ; end ;
14198: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14199: LD_INT 1
14201: PPUSH
14202: CALL_OW 255
14206: PUSH
14207: LD_INT 1
14209: EQUAL
14210: PUSH
14211: LD_INT 10
14213: PPUSH
14214: CALL_OW 255
14218: PUSH
14219: LD_INT 1
14221: EQUAL
14222: AND
14223: PUSH
14224: LD_EXP 20
14228: PUSH
14229: LD_INT 1
14231: GREATER
14232: AND
14233: IFFALSE 14300
14235: GO 14237
14237: DISABLE
14238: LD_INT 0
14240: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14241: LD_INT 11550
14243: PUSH
14244: LD_INT 10500
14246: PUSH
14247: LD_INT 9450
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: LIST
14254: PUSH
14255: LD_OWVAR 67
14259: ARRAY
14260: PPUSH
14261: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14265: LD_INT 1
14267: PUSH
14268: LD_INT 2
14270: PUSH
14271: LD_INT 3
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: PUSH
14279: LD_OWVAR 67
14283: ARRAY
14284: PPUSH
14285: LD_INT 13
14287: PPUSH
14288: CALL 12656 0 2
// lastBattle = 1 ;
14292: LD_ADDR_EXP 27
14296: PUSH
14297: LD_INT 1
14299: ST_TO_ADDR
// end ;
14300: PPOPN 1
14302: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14303: LD_EXP 27
14307: PUSH
14308: LD_INT 1
14310: EQUAL
14311: PUSH
14312: LD_INT 26
14314: PPUSH
14315: LD_INT 22
14317: PUSH
14318: LD_INT 3
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 21
14327: PUSH
14328: LD_INT 1
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PPUSH
14339: CALL_OW 70
14343: PUSH
14344: LD_INT 0
14346: EQUAL
14347: AND
14348: IFFALSE 14405
14350: GO 14352
14352: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14353: LD_EXP 9
14357: PPUSH
14358: LD_STRING D6-Pow-1
14360: PPUSH
14361: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14365: LD_EXP 1
14369: PPUSH
14370: LD_STRING D6-JMM-1
14372: PPUSH
14373: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14377: LD_EXP 9
14381: PPUSH
14382: LD_STRING D6-Pow-2
14384: PPUSH
14385: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14389: LD_EXP 1
14393: PPUSH
14394: LD_STRING D6-JMM-2
14396: PPUSH
14397: CALL_OW 88
// FinishMission ;
14401: CALL 14406 0 0
// end ;
14405: END
// export function FinishMission ; var tmp ; begin
14406: LD_INT 0
14408: PPUSH
14409: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14410: LD_ADDR_VAR 0 2
14414: PUSH
14415: LD_INT 22
14417: PUSH
14418: LD_INT 1
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PUSH
14425: LD_INT 21
14427: PUSH
14428: LD_INT 2
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 24
14437: PUSH
14438: LD_INT 251
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: LIST
14449: PPUSH
14450: CALL_OW 69
14454: ST_TO_ADDR
// if tmp then
14455: LD_VAR 0 2
14459: IFFALSE 14473
// SaveVehicles ( tmp , 02_tanks_1 ) ;
14461: LD_VAR 0 2
14465: PPUSH
14466: LD_STRING 02_tanks_1
14468: PPUSH
14469: CALL 10348 0 2
// if mikhailStatus = 1 then
14473: LD_EXP 21
14477: PUSH
14478: LD_INT 1
14480: EQUAL
14481: IFFALSE 14495
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
14483: LD_EXP 21
14487: PPUSH
14488: LD_STRING 02_mikhailStatus_1
14490: PPUSH
14491: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
14495: LD_INT 1
14497: PPUSH
14498: CALL_OW 274
14502: PPUSH
14503: LD_INT 1
14505: PPUSH
14506: CALL_OW 275
14510: PPUSH
14511: LD_STRING 02_resources_4
14513: PPUSH
14514: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
14518: LD_INT 1
14520: PPUSH
14521: CALL_OW 274
14525: PPUSH
14526: LD_INT 1
14528: PPUSH
14529: CALL_OW 275
14533: PUSH
14534: LD_INT 200
14536: GREATEREQUAL
14537: IFFALSE 14551
// begin AddMedal ( Cans , 1 ) ;
14539: LD_STRING Cans
14541: PPUSH
14542: LD_INT 1
14544: PPUSH
14545: CALL_OW 101
// end else
14549: GO 14562
// begin AddMedal ( Cans , - 1 ) ;
14551: LD_STRING Cans
14553: PPUSH
14554: LD_INT 1
14556: NEG
14557: PPUSH
14558: CALL_OW 101
// end ; if deadsCounter < 2 then
14562: LD_EXP 31
14566: PUSH
14567: LD_INT 2
14569: LESS
14570: IFFALSE 14584
// begin AddMedal ( Deaths , 1 ) ;
14572: LD_STRING Deaths
14574: PPUSH
14575: LD_INT 1
14577: PPUSH
14578: CALL_OW 101
// end else
14582: GO 14595
// begin AddMedal ( Deaths , - 1 ) ;
14584: LD_STRING Deaths
14586: PPUSH
14587: LD_INT 1
14589: NEG
14590: PPUSH
14591: CALL_OW 101
// end ; if mikhailStatus = 0 then
14595: LD_EXP 21
14599: PUSH
14600: LD_INT 0
14602: EQUAL
14603: IFFALSE 14616
// AddMedal ( Prisoner , - 1 ) ;
14605: LD_STRING Prisoner
14607: PPUSH
14608: LD_INT 1
14610: NEG
14611: PPUSH
14612: CALL_OW 101
// if mikhailStatus = 1 then
14616: LD_EXP 21
14620: PUSH
14621: LD_INT 1
14623: EQUAL
14624: IFFALSE 14636
// AddMedal ( Prisoner , 1 ) ;
14626: LD_STRING Prisoner
14628: PPUSH
14629: LD_INT 1
14631: PPUSH
14632: CALL_OW 101
// if mikhailStatus = 2 then
14636: LD_EXP 21
14640: PUSH
14641: LD_INT 2
14643: EQUAL
14644: IFFALSE 14656
// AddMedal ( Prisoner , 2 ) ;
14646: LD_STRING Prisoner
14648: PPUSH
14649: LD_INT 2
14651: PPUSH
14652: CALL_OW 101
// if mikhailStatus = 3 then
14656: LD_EXP 21
14660: PUSH
14661: LD_INT 3
14663: EQUAL
14664: IFFALSE 14677
// AddMedal ( Prisoner , - 2 ) ;
14666: LD_STRING Prisoner
14668: PPUSH
14669: LD_INT 2
14671: NEG
14672: PPUSH
14673: CALL_OW 101
// GiveMedals ( MAIN ) ;
14677: LD_STRING MAIN
14679: PPUSH
14680: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
14684: LD_INT 22
14686: PUSH
14687: LD_INT 1
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 23
14696: PUSH
14697: LD_INT 1
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 21
14706: PUSH
14707: LD_INT 1
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: PPUSH
14719: CALL_OW 69
14723: PPUSH
14724: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
14728: LD_EXP 1
14732: PPUSH
14733: LD_EXP 33
14737: PUSH
14738: LD_STRING JMM
14740: STR
14741: PPUSH
14742: CALL_OW 38
// if IsOK ( Bobby ) then
14746: LD_EXP 2
14750: PPUSH
14751: CALL_OW 302
14755: IFFALSE 14775
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
14757: LD_EXP 2
14761: PPUSH
14762: LD_EXP 33
14766: PUSH
14767: LD_STRING Bobby
14769: STR
14770: PPUSH
14771: CALL_OW 38
// if IsOK ( Cyrus ) then
14775: LD_EXP 3
14779: PPUSH
14780: CALL_OW 302
14784: IFFALSE 14804
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
14786: LD_EXP 3
14790: PPUSH
14791: LD_EXP 33
14795: PUSH
14796: LD_STRING Cyrus
14798: STR
14799: PPUSH
14800: CALL_OW 38
// if IsOK ( Lisa ) then
14804: LD_EXP 4
14808: PPUSH
14809: CALL_OW 302
14813: IFFALSE 14833
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
14815: LD_EXP 4
14819: PPUSH
14820: LD_EXP 33
14824: PUSH
14825: LD_STRING Lisa
14827: STR
14828: PPUSH
14829: CALL_OW 38
// if IsOK ( Khatam ) then
14833: LD_EXP 5
14837: PPUSH
14838: CALL_OW 302
14842: IFFALSE 14862
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
14844: LD_EXP 5
14848: PPUSH
14849: LD_EXP 33
14853: PUSH
14854: LD_STRING Khatam
14856: STR
14857: PPUSH
14858: CALL_OW 38
// if IsOK ( Brian ) then
14862: LD_EXP 6
14866: PPUSH
14867: CALL_OW 302
14871: IFFALSE 14891
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
14873: LD_EXP 6
14877: PPUSH
14878: LD_EXP 33
14882: PUSH
14883: LD_STRING Brian
14885: STR
14886: PPUSH
14887: CALL_OW 38
// if IsOk ( Jerry ) then
14891: LD_EXP 7
14895: PPUSH
14896: CALL_OW 302
14900: IFFALSE 14920
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
14902: LD_EXP 7
14906: PPUSH
14907: LD_EXP 33
14911: PUSH
14912: LD_STRING Jerry
14914: STR
14915: PPUSH
14916: CALL_OW 38
// if mikhailStatus = 1 then
14920: LD_EXP 21
14924: PUSH
14925: LD_INT 1
14927: EQUAL
14928: IFFALSE 14948
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
14930: LD_EXP 8
14934: PPUSH
14935: LD_EXP 33
14939: PUSH
14940: LD_STRING Mikhail
14942: STR
14943: PPUSH
14944: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
14948: LD_INT 50
14950: PUSH
14951: EMPTY
14952: LIST
14953: PUSH
14954: LD_INT 22
14956: PUSH
14957: LD_INT 1
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: LD_INT 21
14966: PUSH
14967: LD_INT 1
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: PPUSH
14979: CALL_OW 69
14983: PUSH
14984: LD_EXP 1
14988: PUSH
14989: LD_EXP 2
14993: PUSH
14994: LD_EXP 3
14998: PUSH
14999: LD_EXP 4
15003: PUSH
15004: LD_EXP 5
15008: PUSH
15009: LD_EXP 6
15013: PUSH
15014: LD_EXP 7
15018: PUSH
15019: LD_EXP 8
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: DIFF
15034: PPUSH
15035: LD_STRING 02_other_survivors
15037: PPUSH
15038: CALL_OW 38
// YouWin ;
15042: CALL_OW 103
// end ;
15046: LD_VAR 0 1
15050: RET
=======
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PPUSH
13344: CALL_OW 70
13348: PUSH
13349: LD_INT 0
13351: EQUAL
13352: IFFALSE 13084
// end ; end_of_file
13354: LD_VAR 0 3
13358: RET
// every 0 0$1 do
13359: GO 13361
13361: DISABLE
// begin enable ;
13362: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13363: LD_INT 3
13365: PPUSH
13366: LD_INT 1
13368: PPUSH
13369: LD_INT 22
13371: PPUSH
13372: CALL 8651 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13376: LD_INT 3
13378: PPUSH
13379: LD_INT 20
13381: PPUSH
13382: LD_INT 22
13384: PPUSH
13385: LD_INT 23
13387: PPUSH
13388: CALL 8897 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13392: LD_INT 3
13394: PPUSH
13395: LD_INT 21
13397: PPUSH
13398: LD_INT 23
13400: PPUSH
13401: CALL 9174 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13405: LD_INT 22
13407: PPUSH
13408: LD_INT 1
13410: PPUSH
13411: LD_EXP 24
13415: PPUSH
13416: LD_INT 2
13418: PPUSH
13419: LD_INT 3
13421: PPUSH
13422: CALL 9646 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13426: LD_INT 23
13428: PPUSH
13429: LD_INT 1
13431: PPUSH
13432: LD_EXP 25
13436: PPUSH
13437: LD_INT 33
13439: PPUSH
13440: LD_INT 1
13442: PPUSH
13443: CALL 9646 0 5
// end ; end_of_file
13447: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13448: LD_VAR 0 1
13452: PPUSH
13453: CALL_OW 255
13457: PUSH
13458: LD_INT 1
13460: EQUAL
13461: PUSH
13462: LD_VAR 0 1
13466: PPUSH
13467: CALL_OW 247
13471: PUSH
13472: LD_INT 1
13474: EQUAL
13475: AND
13476: IFFALSE 13492
// deadsCounter = deadsCounter + 1 ;
13478: LD_ADDR_EXP 30
13482: PUSH
13483: LD_EXP 30
13487: PUSH
13488: LD_INT 1
13490: PLUS
13491: ST_TO_ADDR
// end ;
13492: PPOPN 1
13494: END
// on Command ( comandid ) do var i , j , tmp ;
13495: LD_INT 0
13497: PPUSH
13498: PPUSH
13499: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13500: LD_ADDR_VAR 0 2
13504: PUSH
13505: LD_INT 22
13507: PUSH
13508: LD_INT 1
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: LD_INT 21
13517: PUSH
13518: LD_INT 2
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PPUSH
13529: CALL_OW 69
13533: PUSH
13534: FOR_IN
13535: IFFALSE 13660
// begin if GetTaskList ( i ) > 0 then
13537: LD_VAR 0 2
13541: PPUSH
13542: CALL_OW 437
13546: PUSH
13547: LD_INT 0
13549: GREATER
13550: IFFALSE 13658
// begin for j = 1 to GetTaskList ( i ) do
13552: LD_ADDR_VAR 0 3
13556: PUSH
13557: DOUBLE
13558: LD_INT 1
13560: DEC
13561: ST_TO_ADDR
13562: LD_VAR 0 2
13566: PPUSH
13567: CALL_OW 437
13571: PUSH
13572: FOR_TO
13573: IFFALSE 13656
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13575: LD_ADDR_VAR 0 4
13579: PUSH
13580: LD_VAR 0 2
13584: PPUSH
13585: CALL_OW 437
13589: PUSH
13590: LD_VAR 0 3
13594: ARRAY
13595: PUSH
13596: LD_INT 4
13598: ARRAY
13599: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
13600: LD_VAR 0 4
13604: PPUSH
13605: CALL_OW 255
13609: PUSH
13610: LD_INT 3
13612: EQUAL
13613: PUSH
13614: LD_VAR 0 4
13618: PPUSH
13619: CALL_OW 247
13623: PUSH
13624: LD_INT 2
13626: EQUAL
13627: AND
13628: PUSH
13629: LD_VAR 0 4
13633: PPUSH
13634: CALL_OW 264
13638: PUSH
13639: LD_INT 51
13641: EQUAL
13642: AND
13643: IFFALSE 13654
// ComStop ( i ) ;
13645: LD_VAR 0 2
13649: PPUSH
13650: CALL_OW 141
// end ;
13654: GO 13572
13656: POP
13657: POP
// end ; end ;
13658: GO 13534
13660: POP
13661: POP
// end ; end_of_file
13662: PPOPN 4
13664: END
// every 0 0$1 trigger IsDead ( JMM ) do
13665: LD_EXP 1
13669: PPUSH
13670: CALL_OW 301
13674: IFFALSE 13686
13676: GO 13678
13678: DISABLE
// YouLost ( JMM ) ;
13679: LD_STRING JMM
13681: PPUSH
13682: CALL_OW 104
13686: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
13687: LD_INT 1
13689: PPUSH
13690: CALL_OW 301
13694: PUSH
13695: LD_INT 10
13697: PPUSH
13698: CALL_OW 301
13702: OR
13703: IFFALSE 13715
13705: GO 13707
13707: DISABLE
// YouLost ( DepotDestroyed ) ;
13708: LD_STRING DepotDestroyed
13710: PPUSH
13711: CALL_OW 104
13715: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
13716: LD_INT 22
13718: PUSH
13719: LD_INT 1
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 21
13728: PUSH
13729: LD_INT 1
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 25
13738: PUSH
13739: LD_INT 2
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: PPUSH
13751: CALL_OW 69
13755: PUSH
13756: LD_INT 0
13758: EQUAL
13759: PUSH
13760: LD_INT 22
13762: PUSH
13763: LD_INT 4
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 21
13772: PUSH
13773: LD_INT 1
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: LD_INT 25
13782: PUSH
13783: LD_INT 2
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: PPUSH
13795: CALL_OW 69
13799: PUSH
13800: LD_INT 0
13802: EQUAL
13803: AND
13804: PUSH
13805: LD_INT 1
13807: PPUSH
13808: CALL_OW 255
13812: PUSH
13813: LD_INT 3
13815: EQUAL
13816: AND
13817: PUSH
13818: LD_INT 10
13820: PPUSH
13821: CALL_OW 255
13825: PUSH
13826: LD_INT 3
13828: EQUAL
13829: AND
13830: IFFALSE 13842
13832: GO 13834
13834: DISABLE
// YouLost ( Engineer ) ;
13835: LD_STRING Engineer
13837: PPUSH
13838: CALL_OW 104
13842: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
13843: LD_INT 1
13845: PPUSH
13846: CALL_OW 255
13850: PUSH
13851: LD_INT 3
13853: EQUAL
13854: PUSH
13855: LD_EXP 27
13859: PUSH
13860: LD_INT 1
13862: EQUAL
13863: AND
13864: IFFALSE 13876
13866: GO 13868
13868: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
13869: LD_STRING DepotCaptured
13871: PPUSH
13872: CALL_OW 104
13876: END
// export function PrepareTigers ; var i , un ; begin
13877: LD_INT 0
13879: PPUSH
13880: PPUSH
13881: PPUSH
// for i = 1 to Difficulty do
13882: LD_ADDR_VAR 0 2
13886: PUSH
13887: DOUBLE
13888: LD_INT 1
13890: DEC
13891: ST_TO_ADDR
13892: LD_OWVAR 67
13896: PUSH
13897: FOR_TO
13898: IFFALSE 14033
// begin hc_sex = sex_male ;
13900: LD_ADDR_OWVAR 27
13904: PUSH
13905: LD_INT 1
13907: ST_TO_ADDR
// uc_side = 0 ;
13908: LD_ADDR_OWVAR 20
13912: PUSH
13913: LD_INT 0
13915: ST_TO_ADDR
// uc_nation = nation_nature ;
13916: LD_ADDR_OWVAR 21
13920: PUSH
13921: LD_INT 0
13923: ST_TO_ADDR
// hc_class = class_tiger ;
13924: LD_ADDR_OWVAR 28
13928: PUSH
13929: LD_INT 14
13931: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
13932: LD_ADDR_OWVAR 31
13936: PUSH
13937: LD_EXP 14
13941: PUSH
13942: LD_INT 0
13944: PUSH
13945: LD_INT 0
13947: PUSH
13948: LD_INT 0
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
13957: LD_ADDR_OWVAR 35
13961: PUSH
13962: LD_INT 30
13964: PPUSH
13965: LD_INT 40
13967: PPUSH
13968: CALL_OW 12
13972: PUSH
13973: LD_INT 40
13975: PPUSH
13976: LD_INT 50
13978: PPUSH
13979: CALL_OW 12
13983: PUSH
13984: LD_INT 50
13986: PPUSH
13987: LD_INT 60
13989: PPUSH
13990: CALL_OW 12
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: LIST
13999: PUSH
14000: LD_OWVAR 67
14004: ARRAY
14005: ST_TO_ADDR
// un = CreateHuman ;
14006: LD_ADDR_VAR 0 3
14010: PUSH
14011: CALL_OW 44
14015: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14016: LD_VAR 0 3
14020: PPUSH
14021: LD_INT 27
14023: PPUSH
14024: LD_INT 0
14026: PPUSH
14027: CALL_OW 49
// end ;
14031: GO 13897
14033: POP
14034: POP
// end ; end_of_file
14035: LD_VAR 0 1
14039: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 do
14040: LD_INT 1
14042: PPUSH
14043: CALL_OW 255
14047: PUSH
14048: LD_INT 1
14050: EQUAL
14051: PUSH
14052: LD_INT 10
14054: PPUSH
14055: CALL_OW 255
14059: PUSH
14060: LD_INT 1
14062: EQUAL
14063: AND
14064: PUSH
14065: LD_EXP 20
14069: PUSH
14070: LD_INT 1
14072: EQUAL
14073: AND
14074: IFFALSE 14165
14076: GO 14078
14078: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14079: LD_INT 9450
14081: PUSH
14082: LD_INT 8400
14084: PUSH
14085: LD_INT 6300
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: PUSH
14093: LD_OWVAR 67
14097: ARRAY
14098: PPUSH
14099: CALL_OW 67
// if cargoEscape = 1 then
14103: LD_EXP 20
14107: PUSH
14108: LD_INT 1
14110: EQUAL
14111: IFFALSE 14165
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14113: LD_EXP 9
14117: PPUSH
14118: LD_STRING D6-Pow-1
14120: PPUSH
14121: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14125: LD_EXP 1
14129: PPUSH
14130: LD_STRING D6-JMM-1
14132: PPUSH
14133: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14137: LD_EXP 9
14141: PPUSH
14142: LD_STRING D6-Pow-2
14144: PPUSH
14145: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14149: LD_EXP 1
14153: PPUSH
14154: LD_STRING D6-JMM-2
14156: PPUSH
14157: CALL_OW 88
// FinishMission ;
14161: CALL 14373 0 0
// end ; end ;
14165: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14166: LD_INT 1
14168: PPUSH
14169: CALL_OW 255
14173: PUSH
14174: LD_INT 1
14176: EQUAL
14177: PUSH
14178: LD_INT 10
14180: PPUSH
14181: CALL_OW 255
14185: PUSH
14186: LD_INT 1
14188: EQUAL
14189: AND
14190: PUSH
14191: LD_EXP 20
14195: PUSH
14196: LD_INT 1
14198: GREATER
14199: AND
14200: IFFALSE 14267
14202: GO 14204
14204: DISABLE
14205: LD_INT 0
14207: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14208: LD_INT 11550
14210: PUSH
14211: LD_INT 10500
14213: PUSH
14214: LD_INT 9450
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: LIST
14221: PUSH
14222: LD_OWVAR 67
14226: ARRAY
14227: PPUSH
14228: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14232: LD_INT 1
14234: PUSH
14235: LD_INT 2
14237: PUSH
14238: LD_INT 3
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: LIST
14245: PUSH
14246: LD_OWVAR 67
14250: ARRAY
14251: PPUSH
14252: LD_INT 13
14254: PPUSH
14255: CALL 12623 0 2
// lastBattle = 1 ;
14259: LD_ADDR_EXP 27
14263: PUSH
14264: LD_INT 1
14266: ST_TO_ADDR
// end ;
14267: PPOPN 1
14269: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14270: LD_EXP 27
14274: PUSH
14275: LD_INT 1
14277: EQUAL
14278: PUSH
14279: LD_INT 26
14281: PPUSH
14282: LD_INT 22
14284: PUSH
14285: LD_INT 3
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 21
14294: PUSH
14295: LD_INT 1
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PPUSH
14306: CALL_OW 70
14310: PUSH
14311: LD_INT 0
14313: EQUAL
14314: AND
14315: IFFALSE 14372
14317: GO 14319
14319: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14320: LD_EXP 9
14324: PPUSH
14325: LD_STRING D6-Pow-1
14327: PPUSH
14328: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14332: LD_EXP 1
14336: PPUSH
14337: LD_STRING D6-JMM-1
14339: PPUSH
14340: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14344: LD_EXP 9
14348: PPUSH
14349: LD_STRING D6-Pow-2
14351: PPUSH
14352: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14356: LD_EXP 1
14360: PPUSH
14361: LD_STRING D6-JMM-2
14363: PPUSH
14364: CALL_OW 88
// FinishMission ;
14368: CALL 14373 0 0
// end ;
14372: END
// export function FinishMission ; var tmp ; begin
14373: LD_INT 0
14375: PPUSH
14376: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14377: LD_ADDR_VAR 0 2
14381: PUSH
14382: LD_INT 22
14384: PUSH
14385: LD_INT 1
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: LD_INT 21
14394: PUSH
14395: LD_INT 2
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PUSH
14402: LD_INT 24
14404: PUSH
14405: LD_INT 251
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: LIST
14416: PPUSH
14417: CALL_OW 69
14421: ST_TO_ADDR
// if tmp then
14422: LD_VAR 0 2
14426: IFFALSE 14440
// SaveVehicles ( tmp , 02_tanks_1 ) ;
14428: LD_VAR 0 2
14432: PPUSH
14433: LD_STRING 02_tanks_1
14435: PPUSH
14436: CALL 10315 0 2
// if mikhailStatus = 1 then
14440: LD_EXP 21
14444: PUSH
14445: LD_INT 1
14447: EQUAL
14448: IFFALSE 14462
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
14450: LD_EXP 21
14454: PPUSH
14455: LD_STRING 02_mikhailStatus_1
14457: PPUSH
14458: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
14462: LD_INT 1
14464: PPUSH
14465: CALL_OW 274
14469: PPUSH
14470: LD_INT 1
14472: PPUSH
14473: CALL_OW 275
14477: PPUSH
14478: LD_STRING 02_resources_4
14480: PPUSH
14481: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
14485: LD_INT 1
14487: PPUSH
14488: CALL_OW 274
14492: PPUSH
14493: LD_INT 1
14495: PPUSH
14496: CALL_OW 275
14500: PUSH
14501: LD_INT 200
14503: GREATEREQUAL
14504: IFFALSE 14518
// begin AddMedal ( Cans , 1 ) ;
14506: LD_STRING Cans
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: CALL_OW 101
// end else
14516: GO 14529
// begin AddMedal ( Cans , - 1 ) ;
14518: LD_STRING Cans
14520: PPUSH
14521: LD_INT 1
14523: NEG
14524: PPUSH
14525: CALL_OW 101
// end ; if deadsCounter < 2 then
14529: LD_EXP 30
14533: PUSH
14534: LD_INT 2
14536: LESS
14537: IFFALSE 14551
// begin AddMedal ( Deaths , 1 ) ;
14539: LD_STRING Deaths
14541: PPUSH
14542: LD_INT 1
14544: PPUSH
14545: CALL_OW 101
// end else
14549: GO 14562
// begin AddMedal ( Deaths , - 1 ) ;
14551: LD_STRING Deaths
14553: PPUSH
14554: LD_INT 1
14556: NEG
14557: PPUSH
14558: CALL_OW 101
// end ; if mikhailStatus = 0 then
14562: LD_EXP 21
14566: PUSH
14567: LD_INT 0
14569: EQUAL
14570: IFFALSE 14583
// AddMedal ( Prisoner , - 1 ) ;
14572: LD_STRING Prisoner
14574: PPUSH
14575: LD_INT 1
14577: NEG
14578: PPUSH
14579: CALL_OW 101
// if mikhailStatus = 1 then
14583: LD_EXP 21
14587: PUSH
14588: LD_INT 1
14590: EQUAL
14591: IFFALSE 14603
// AddMedal ( Prisoner , 1 ) ;
14593: LD_STRING Prisoner
14595: PPUSH
14596: LD_INT 1
14598: PPUSH
14599: CALL_OW 101
// if mikhailStatus = 2 then
14603: LD_EXP 21
14607: PUSH
14608: LD_INT 2
14610: EQUAL
14611: IFFALSE 14623
// AddMedal ( Prisoner , 2 ) ;
14613: LD_STRING Prisoner
14615: PPUSH
14616: LD_INT 2
14618: PPUSH
14619: CALL_OW 101
// if mikhailStatus = 3 then
14623: LD_EXP 21
14627: PUSH
14628: LD_INT 3
14630: EQUAL
14631: IFFALSE 14644
// AddMedal ( Prisoner , - 2 ) ;
14633: LD_STRING Prisoner
14635: PPUSH
14636: LD_INT 2
14638: NEG
14639: PPUSH
14640: CALL_OW 101
// GiveMedals ( MAIN ) ;
14644: LD_STRING MAIN
14646: PPUSH
14647: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
14651: LD_INT 22
14653: PUSH
14654: LD_INT 1
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: LD_INT 23
14663: PUSH
14664: LD_INT 1
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PUSH
14671: LD_INT 21
14673: PUSH
14674: LD_INT 1
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: PPUSH
14686: CALL_OW 69
14690: PPUSH
14691: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
14695: LD_EXP 1
14699: PPUSH
14700: LD_EXP 32
14704: PUSH
14705: LD_STRING JMM
14707: STR
14708: PPUSH
14709: CALL_OW 38
// if IsOK ( Bobby ) then
14713: LD_EXP 2
14717: PPUSH
14718: CALL_OW 302
14722: IFFALSE 14742
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
14724: LD_EXP 2
14728: PPUSH
14729: LD_EXP 32
14733: PUSH
14734: LD_STRING Bobby
14736: STR
14737: PPUSH
14738: CALL_OW 38
// if IsOK ( Cyrus ) then
14742: LD_EXP 3
14746: PPUSH
14747: CALL_OW 302
14751: IFFALSE 14771
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
14753: LD_EXP 3
14757: PPUSH
14758: LD_EXP 32
14762: PUSH
14763: LD_STRING Cyrus
14765: STR
14766: PPUSH
14767: CALL_OW 38
// if IsOK ( Lisa ) then
14771: LD_EXP 4
14775: PPUSH
14776: CALL_OW 302
14780: IFFALSE 14800
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
14782: LD_EXP 4
14786: PPUSH
14787: LD_EXP 32
14791: PUSH
14792: LD_STRING Lisa
14794: STR
14795: PPUSH
14796: CALL_OW 38
// if IsOK ( Khatam ) then
14800: LD_EXP 5
14804: PPUSH
14805: CALL_OW 302
14809: IFFALSE 14829
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
14811: LD_EXP 5
14815: PPUSH
14816: LD_EXP 32
14820: PUSH
14821: LD_STRING Khatam
14823: STR
14824: PPUSH
14825: CALL_OW 38
// if IsOK ( Brian ) then
14829: LD_EXP 6
14833: PPUSH
14834: CALL_OW 302
14838: IFFALSE 14858
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
14840: LD_EXP 6
14844: PPUSH
14845: LD_EXP 32
14849: PUSH
14850: LD_STRING Brian
14852: STR
14853: PPUSH
14854: CALL_OW 38
// if IsOk ( Jerry ) then
14858: LD_EXP 7
14862: PPUSH
14863: CALL_OW 302
14867: IFFALSE 14887
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
14869: LD_EXP 7
14873: PPUSH
14874: LD_EXP 32
14878: PUSH
14879: LD_STRING Jerry
14881: STR
14882: PPUSH
14883: CALL_OW 38
// if mikhailStatus = 1 then
14887: LD_EXP 21
14891: PUSH
14892: LD_INT 1
14894: EQUAL
14895: IFFALSE 14915
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
14897: LD_EXP 8
14901: PPUSH
14902: LD_EXP 32
14906: PUSH
14907: LD_STRING Mikhail
14909: STR
14910: PPUSH
14911: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
14915: LD_INT 50
14917: PUSH
14918: EMPTY
14919: LIST
14920: PUSH
14921: LD_INT 22
14923: PUSH
14924: LD_INT 1
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 21
14933: PUSH
14934: LD_INT 1
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: LIST
14945: PPUSH
14946: CALL_OW 69
14950: PUSH
14951: LD_EXP 1
14955: PUSH
14956: LD_EXP 2
14960: PUSH
14961: LD_EXP 3
14965: PUSH
14966: LD_EXP 4
14970: PUSH
14971: LD_EXP 5
14975: PUSH
14976: LD_EXP 6
14980: PUSH
14981: LD_EXP 7
14985: PUSH
14986: LD_EXP 8
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: DIFF
15001: PPUSH
15002: LD_STRING 02_other_survivors
15004: PPUSH
15005: CALL_OW 38
// YouWin ;
15009: CALL_OW 103
// end ;
15013: LD_VAR 0 1
15017: RET
>>>>>>> 2375093cbac0fd72447177768239ca062f1a1e4c
