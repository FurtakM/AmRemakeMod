// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 32
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// lastBattle = 0 ;
  96: LD_ADDR_EXP 27
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// deadsCounter = 0 ;
 104: LD_ADDR_EXP 30
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// spotCorpses = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 120: LD_ADDR_EXP 25
 124: PUSH
 125: EMPTY
 126: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 127: LD_ADDR_EXP 24
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// attackGroup = [ ] ;
 134: LD_ADDR_EXP 26
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// RandomizeAll ;
 141: CALL_OW 11
// InGameOn ;
 145: CALL_OW 8
// Resetfog ;
 149: CALL_OW 335
// PrepareDifficulty ;
 153: CALL 10143 0 0
// PrepareRussianCommander ;
 157: CALL 11362 0 0
// PrepareSouthBase ;
 161: CALL 11445 0 0
// PrepareNorthBase ;
 165: CALL 11802 0 0
// PrepareOtherRussians ;
 169: CALL 12168 0 0
// PrepareHeroes ;
 173: CALL 10458 0 0
// PrepareLisSquad ;
 177: CALL 10701 0 0
// PrepareOtherAmericans ;
 181: CALL 10929 0 0
// end ; end_of_file
 185: END
// every 1 do var tmp ;
 186: GO 188
 188: DISABLE
 189: LD_INT 0
 191: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 192: LD_EXP 1
 196: PPUSH
 197: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 201: LD_ADDR_VAR 0 1
 205: PUSH
 206: LD_INT 22
 208: PUSH
 209: LD_INT 4
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: PUSH
 216: LD_INT 21
 218: PUSH
 219: LD_INT 1
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: PPUSH
 230: CALL_OW 69
 234: PUSH
 235: LD_EXP 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: DIFF
 243: ST_TO_ADDR
// if Cyrus and Bobby then
 244: LD_EXP 3
 248: PUSH
 249: LD_EXP 2
 253: AND
 254: IFFALSE 584
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 256: LD_EXP 3
 260: PPUSH
 261: LD_INT 43
 263: PPUSH
 264: LD_INT 72
 266: PPUSH
 267: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 271: LD_EXP 2
 275: PPUSH
 276: LD_INT 44
 278: PPUSH
 279: LD_INT 70
 281: PPUSH
 282: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 286: LD_EXP 1
 290: PPUSH
 291: LD_INT 46
 293: PPUSH
 294: LD_INT 73
 296: PPUSH
 297: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 301: LD_EXP 3
 305: PPUSH
 306: LD_STRING D1a-Cyrus-1
 308: PPUSH
 309: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 313: LD_EXP 1
 317: PPUSH
 318: LD_STRING D1a-JMM-1
 320: PPUSH
 321: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 325: LD_EXP 3
 329: PPUSH
 330: LD_INT 37
 332: PPUSH
 333: LD_INT 66
 335: PPUSH
 336: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 340: LD_EXP 2
 344: PPUSH
 345: LD_INT 41
 347: PPUSH
 348: LD_INT 67
 350: PPUSH
 351: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 355: LD_EXP 1
 359: PPUSH
 360: LD_INT 38
 362: PPUSH
 363: LD_INT 64
 365: PPUSH
 366: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 370: LD_EXP 2
 374: PPUSH
 375: LD_STRING D1a-Bobby-2
 377: PPUSH
 378: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 382: LD_EXP 3
 386: PPUSH
 387: LD_INT 35
 389: PPUSH
 390: LD_INT 62
 392: PPUSH
 393: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 397: LD_EXP 2
 401: PPUSH
 402: LD_INT 32
 404: PPUSH
 405: LD_INT 60
 407: PPUSH
 408: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 412: LD_EXP 1
 416: PPUSH
 417: LD_INT 35
 419: PPUSH
 420: LD_INT 60
 422: PPUSH
 423: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 427: LD_EXP 1
 431: PPUSH
 432: LD_STRING D1a-JMM-2
 434: PPUSH
 435: CALL_OW 88
// ComWalk ( Lisa ) ;
 439: LD_EXP 4
 443: PPUSH
 444: CALL_OW 138
// wait ( 0 0$1 ) ;
 448: LD_INT 35
 450: PPUSH
 451: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 455: LD_EXP 4
 459: PPUSH
 460: LD_EXP 1
 464: PPUSH
 465: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 469: LD_EXP 1
 473: PUSH
 474: LD_EXP 3
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: EMPTY
 485: LIST
 486: LIST
 487: LIST
 488: PPUSH
 489: LD_EXP 4
 493: PPUSH
 494: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 498: LD_VAR 0 1
 502: PUSH
 503: LD_INT 1
 505: ARRAY
 506: PPUSH
 507: LD_INT 33
 509: PPUSH
 510: LD_INT 55
 512: PPUSH
 513: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 517: LD_VAR 0 1
 521: PUSH
 522: LD_INT 2
 524: ARRAY
 525: PPUSH
 526: LD_INT 30
 528: PPUSH
 529: LD_INT 54
 531: PPUSH
 532: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 536: LD_VAR 0 1
 540: PUSH
 541: LD_INT 1
 543: ARRAY
 544: PPUSH
 545: LD_EXP 1
 549: PPUSH
 550: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 554: LD_VAR 0 1
 558: PUSH
 559: LD_INT 2
 561: ARRAY
 562: PPUSH
 563: LD_EXP 1
 567: PPUSH
 568: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 572: LD_EXP 4
 576: PPUSH
 577: LD_STRING D1a-Lisa-2
 579: PPUSH
 580: CALL_OW 88
// end ; if Cyrus and not Bobby then
 584: LD_EXP 3
 588: PUSH
 589: LD_EXP 2
 593: NOT
 594: AND
 595: IFFALSE 800
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 597: LD_EXP 3
 601: PPUSH
 602: LD_INT 43
 604: PPUSH
 605: LD_INT 72
 607: PPUSH
 608: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 612: LD_EXP 1
 616: PPUSH
 617: LD_INT 46
 619: PPUSH
 620: LD_INT 73
 622: PPUSH
 623: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 627: LD_EXP 3
 631: PPUSH
 632: LD_STRING D1a-Cyrus-1
 634: PPUSH
 635: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 639: LD_EXP 1
 643: PPUSH
 644: LD_STRING D1a-JMM-1
 646: PPUSH
 647: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 651: LD_EXP 3
 655: PPUSH
 656: LD_INT 37
 658: PPUSH
 659: LD_INT 66
 661: PPUSH
 662: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 666: LD_EXP 1
 670: PPUSH
 671: LD_INT 38
 673: PPUSH
 674: LD_INT 64
 676: PPUSH
 677: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 681: LD_EXP 3
 685: PPUSH
 686: LD_STRING D1a-Cyrus-2
 688: PPUSH
 689: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 693: LD_EXP 3
 697: PPUSH
 698: LD_INT 35
 700: PPUSH
 701: LD_INT 62
 703: PPUSH
 704: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 708: LD_EXP 1
 712: PPUSH
 713: LD_INT 35
 715: PPUSH
 716: LD_INT 60
 718: PPUSH
 719: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 723: LD_EXP 1
 727: PPUSH
 728: LD_STRING D1a-JMM-2
 730: PPUSH
 731: CALL_OW 88
// ComWalk ( Lisa ) ;
 735: LD_EXP 4
 739: PPUSH
 740: CALL_OW 138
// wait ( 0 0$1 ) ;
 744: LD_INT 35
 746: PPUSH
 747: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 751: LD_EXP 4
 755: PPUSH
 756: LD_EXP 1
 760: PPUSH
 761: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 765: LD_EXP 4
 769: PPUSH
 770: LD_STRING D1a-Lisa-2
 772: PPUSH
 773: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 777: LD_EXP 1
 781: PUSH
 782: LD_EXP 3
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: PPUSH
 791: LD_EXP 4
 795: PPUSH
 796: CALL_OW 119
// end ; if not Cyrus and Bobby then
 800: LD_EXP 3
 804: NOT
 805: PUSH
 806: LD_EXP 2
 810: AND
 811: IFFALSE 1090
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 813: LD_EXP 2
 817: PPUSH
 818: LD_INT 44
 820: PPUSH
 821: LD_INT 70
 823: PPUSH
 824: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 828: LD_EXP 1
 832: PPUSH
 833: LD_INT 46
 835: PPUSH
 836: LD_INT 73
 838: PPUSH
 839: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 843: LD_EXP 2
 847: PPUSH
 848: LD_STRING D1a-Bobby-1
 850: PPUSH
 851: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 855: LD_EXP 1
 859: PPUSH
 860: LD_STRING D1a-JMM-1
 862: PPUSH
 863: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 867: LD_EXP 2
 871: PPUSH
 872: LD_INT 37
 874: PPUSH
 875: LD_INT 66
 877: PPUSH
 878: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 882: LD_EXP 1
 886: PPUSH
 887: LD_INT 38
 889: PPUSH
 890: LD_INT 64
 892: PPUSH
 893: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 897: LD_EXP 2
 901: PPUSH
 902: LD_STRING D1a-Bobby-2
 904: PPUSH
 905: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 909: LD_EXP 2
 913: PPUSH
 914: LD_INT 35
 916: PPUSH
 917: LD_INT 62
 919: PPUSH
 920: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 924: LD_EXP 1
 928: PPUSH
 929: LD_INT 35
 931: PPUSH
 932: LD_INT 60
 934: PPUSH
 935: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 939: LD_EXP 1
 943: PPUSH
 944: LD_STRING D1a-JMM-2
 946: PPUSH
 947: CALL_OW 88
// ComWalk ( Lisa ) ;
 951: LD_EXP 4
 955: PPUSH
 956: CALL_OW 138
// wait ( 0 0$1 ) ;
 960: LD_INT 35
 962: PPUSH
 963: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 967: LD_EXP 4
 971: PPUSH
 972: LD_EXP 1
 976: PPUSH
 977: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 981: LD_EXP 1
 985: PUSH
 986: LD_EXP 3
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: PPUSH
 995: LD_EXP 4
 999: PPUSH
1000: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1004: LD_VAR 0 1
1008: PUSH
1009: LD_INT 1
1011: ARRAY
1012: PPUSH
1013: LD_INT 33
1015: PPUSH
1016: LD_INT 55
1018: PPUSH
1019: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1023: LD_VAR 0 1
1027: PUSH
1028: LD_INT 2
1030: ARRAY
1031: PPUSH
1032: LD_INT 30
1034: PPUSH
1035: LD_INT 54
1037: PPUSH
1038: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1042: LD_VAR 0 1
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: LD_EXP 1
1055: PPUSH
1056: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1060: LD_VAR 0 1
1064: PUSH
1065: LD_INT 2
1067: ARRAY
1068: PPUSH
1069: LD_EXP 1
1073: PPUSH
1074: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1078: LD_EXP 4
1082: PPUSH
1083: LD_STRING D1a-Lisa-2
1085: PPUSH
1086: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1090: LD_EXP 3
1094: NOT
1095: PUSH
1096: LD_EXP 2
1100: NOT
1101: AND
1102: IFFALSE 1316
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1104: LD_EXP 1
1108: PPUSH
1109: LD_INT 37
1111: PPUSH
1112: LD_INT 66
1114: PPUSH
1115: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1119: LD_EXP 1
1123: PPUSH
1124: LD_STRING D1b-JMM-1
1126: PPUSH
1127: CALL_OW 88
// ComCrawl ( JMM ) ;
1131: LD_EXP 1
1135: PPUSH
1136: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1140: LD_EXP 1
1144: PPUSH
1145: LD_INT 35
1147: PPUSH
1148: LD_INT 60
1150: PPUSH
1151: CALL_OW 171
// wait ( 0 0$8 ) ;
1155: LD_INT 280
1157: PPUSH
1158: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1162: LD_EXP 1
1166: PPUSH
1167: LD_STRING D1b-JMM-1a
1169: PPUSH
1170: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1174: LD_EXP 1
1178: PUSH
1179: LD_EXP 4
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PPUSH
1188: CALL_OW 138
// wait ( 0 0$1 ) ;
1192: LD_INT 35
1194: PPUSH
1195: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1199: LD_EXP 4
1203: PPUSH
1204: LD_EXP 1
1208: PPUSH
1209: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1213: LD_EXP 1
1217: PUSH
1218: EMPTY
1219: LIST
1220: PPUSH
1221: LD_EXP 4
1225: PPUSH
1226: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1230: LD_VAR 0 1
1234: PUSH
1235: LD_INT 1
1237: ARRAY
1238: PPUSH
1239: LD_INT 33
1241: PPUSH
1242: LD_INT 55
1244: PPUSH
1245: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1249: LD_VAR 0 1
1253: PUSH
1254: LD_INT 2
1256: ARRAY
1257: PPUSH
1258: LD_INT 30
1260: PPUSH
1261: LD_INT 54
1263: PPUSH
1264: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1268: LD_VAR 0 1
1272: PUSH
1273: LD_INT 1
1275: ARRAY
1276: PPUSH
1277: LD_EXP 1
1281: PPUSH
1282: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1286: LD_VAR 0 1
1290: PUSH
1291: LD_INT 2
1293: ARRAY
1294: PPUSH
1295: LD_EXP 1
1299: PPUSH
1300: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1304: LD_EXP 4
1308: PPUSH
1309: LD_STRING D1b-Lisa-1
1311: PPUSH
1312: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1316: LD_EXP 1
1320: PPUSH
1321: LD_STRING D1-JMM-1
1323: PPUSH
1324: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1328: LD_EXP 4
1332: PPUSH
1333: LD_STRING D1-Lisa-1
1335: PPUSH
1336: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1340: LD_EXP 1
1344: PPUSH
1345: LD_STRING D1-JMM-2
1347: PPUSH
1348: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1352: LD_EXP 9
1356: PPUSH
1357: LD_STRING D1-Pow-2
1359: PPUSH
1360: CALL_OW 94
// if Cyrus then
1364: LD_EXP 3
1368: IFFALSE 1394
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1370: LD_EXP 3
1374: PPUSH
1375: LD_STRING D1-Cyrus-2
1377: PPUSH
1378: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1382: LD_EXP 1
1386: PPUSH
1387: LD_STRING D1-JMM-3
1389: PPUSH
1390: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1394: LD_EXP 9
1398: PPUSH
1399: LD_STRING D1-Pow-3
1401: PPUSH
1402: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1406: LD_EXP 1
1410: PPUSH
1411: LD_STRING D1-JMM-4
1413: PPUSH
1414: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1418: LD_EXP 9
1422: PPUSH
1423: LD_STRING D1-Pow-4
1425: PPUSH
1426: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1430: LD_EXP 9
1434: PPUSH
1435: LD_STRING D1-Pow-4a
1437: PPUSH
1438: CALL_OW 94
// if Cyrus then
1442: LD_EXP 3
1446: IFFALSE 1460
// Say ( Cyrus , D1-Cyrus-4 ) ;
1448: LD_EXP 3
1452: PPUSH
1453: LD_STRING D1-Cyrus-4
1455: PPUSH
1456: CALL_OW 88
// if Bobby then
1460: LD_EXP 2
1464: IFFALSE 1502
// begin Say ( Bobby , D1-Bobby-4 ) ;
1466: LD_EXP 2
1470: PPUSH
1471: LD_STRING D1-Bobby-4
1473: PPUSH
1474: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1478: LD_EXP 4
1482: PPUSH
1483: LD_STRING D1-Lisa-4
1485: PPUSH
1486: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1490: LD_EXP 1
1494: PPUSH
1495: LD_STRING D1-JMM-5
1497: PPUSH
1498: CALL_OW 88
// end ; InGameOff ;
1502: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1506: LD_INT 22
1508: PUSH
1509: LD_INT 4
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PPUSH
1516: CALL_OW 69
1520: PUSH
1521: LD_EXP 6
1525: PUSH
1526: LD_EXP 7
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: DIFF
1535: PPUSH
1536: LD_INT 1
1538: PPUSH
1539: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1543: LD_STRING M1
1545: PPUSH
1546: CALL_OW 337
// SaveForQuickRestart ;
1550: CALL_OW 22
// end ;
1554: PPOPN 1
1556: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1557: LD_INT 7
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 1
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: LD_INT 0
1577: GREATER
1578: IFFALSE 1948
1580: GO 1582
1582: DISABLE
// begin InGameOn ;
1583: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1587: LD_INT 22
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PUSH
1597: LD_INT 21
1599: PUSH
1600: LD_INT 1
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PPUSH
1616: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1620: LD_INT 24
1622: PPUSH
1623: LD_INT 32
1625: PPUSH
1626: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1630: LD_EXP 5
1634: PPUSH
1635: LD_INT 4
1637: PPUSH
1638: LD_INT 1
1640: PPUSH
1641: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1645: LD_EXP 5
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: CALL_OW 336
// wait ( 0 0$1 ) ;
1657: LD_INT 35
1659: PPUSH
1660: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1664: LD_EXP 5
1668: PPUSH
1669: LD_INT 27
1671: PPUSH
1672: LD_INT 38
1674: PPUSH
1675: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1679: LD_EXP 5
1683: PPUSH
1684: LD_EXP 1
1688: PPUSH
1689: CALL_OW 179
// wait ( 0 0$1 ) ;
1693: LD_INT 35
1695: PPUSH
1696: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1700: LD_EXP 5
1704: PPUSH
1705: LD_STRING D2a-Khat-1
1707: PPUSH
1708: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1712: LD_EXP 1
1716: PPUSH
1717: LD_STRING D2a-JMM-1
1719: PPUSH
1720: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1724: LD_EXP 5
1728: PPUSH
1729: LD_STRING D2a-Khat-2
1731: PPUSH
1732: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1736: LD_EXP 1
1740: PPUSH
1741: LD_STRING D2a-JMM-2
1743: PPUSH
1744: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1748: LD_EXP 5
1752: PPUSH
1753: LD_STRING D2a-Khat-3
1755: PPUSH
1756: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1760: LD_EXP 1
1764: PPUSH
1765: LD_STRING D2a-JMM-3
1767: PPUSH
1768: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1772: LD_EXP 5
1776: PPUSH
1777: LD_STRING D2a-Khat-4
1779: PPUSH
1780: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1784: LD_EXP 1
1788: PPUSH
1789: LD_STRING D2a-JMM-4
1791: PPUSH
1792: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1796: LD_EXP 5
1800: PPUSH
1801: LD_STRING D2a-Khat-5
1803: PPUSH
1804: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1808: LD_EXP 1
1812: PPUSH
1813: LD_STRING D2a-JMM-5
1815: PPUSH
1816: CALL_OW 88
// InGameOff ;
1820: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1824: LD_INT 22
1826: PUSH
1827: LD_INT 1
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: LD_INT 21
1836: PUSH
1837: LD_INT 1
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 3
1846: PUSH
1847: LD_INT 24
1849: PUSH
1850: LD_INT 800
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: LIST
1865: PPUSH
1866: CALL_OW 69
1870: PUSH
1871: LD_INT 0
1873: GREATER
1874: IFFALSE 1948
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1876: LD_EXP 5
1880: PPUSH
1881: LD_INT 22
1883: PUSH
1884: LD_INT 1
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 21
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 3
1903: PUSH
1904: LD_INT 24
1906: PUSH
1907: LD_INT 1000
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PPUSH
1923: CALL_OW 69
1927: PUSH
1928: LD_INT 1
1930: ARRAY
1931: PPUSH
1932: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1936: LD_EXP 5
1940: PPUSH
1941: LD_STRING D2b-Khat-1
1943: PPUSH
1944: CALL_OW 88
// end ; end ;
1948: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
1949: LD_INT 15
1951: PPUSH
1952: LD_INT 22
1954: PUSH
1955: LD_INT 1
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PPUSH
1962: CALL_OW 70
1966: PUSH
1967: LD_INT 0
1969: GREATER
1970: IFFALSE 3130
1972: GO 1974
1974: DISABLE
1975: LD_INT 0
1977: PPUSH
1978: PPUSH
1979: PPUSH
1980: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
1981: LD_ADDR_VAR 0 2
1985: PUSH
1986: LD_INT 999
1988: PUSH
1989: LD_INT 999
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: PUSH
1996: EMPTY
1997: LIST
1998: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
1999: LD_ADDR_VAR 0 4
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 1
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_EXP 1
2037: PUSH
2038: LD_EXP 2
2042: PUSH
2043: LD_EXP 3
2047: PUSH
2048: LD_EXP 4
2052: PUSH
2053: LD_EXP 5
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: DIFF
2065: ST_TO_ADDR
// PrepareDeadSoldiers ;
2066: CALL 11087 0 0
// spotCorpses = 1 ;
2070: LD_ADDR_EXP 31
2074: PUSH
2075: LD_INT 1
2077: ST_TO_ADDR
// InGameOn ;
2078: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2082: LD_INT 23
2084: PPUSH
2085: LD_INT 12
2087: PPUSH
2088: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2092: LD_ADDR_VAR 0 3
2096: PUSH
2097: LD_VAR 0 2
2101: PUSH
2102: LD_INT 1
2104: ARRAY
2105: PUSH
2106: LD_INT 2
2108: ARRAY
2109: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2110: LD_ADDR_VAR 0 1
2114: PUSH
2115: LD_INT 22
2117: PUSH
2118: LD_INT 1
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 21
2127: PUSH
2128: LD_INT 1
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PPUSH
2139: CALL_OW 69
2143: PUSH
2144: LD_EXP 1
2148: PUSH
2149: LD_EXP 5
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: DIFF
2158: PUSH
2159: FOR_IN
2160: IFFALSE 2211
// if IsOK ( i ) then
2162: LD_VAR 0 1
2166: PPUSH
2167: CALL_OW 302
2171: IFFALSE 2209
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2173: LD_ADDR_VAR 0 2
2177: PUSH
2178: LD_VAR 0 2
2182: PUSH
2183: LD_VAR 0 1
2187: PUSH
2188: LD_VAR 0 1
2192: PPUSH
2193: LD_INT 16
2195: PPUSH
2196: CALL_OW 299
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: ADD
2208: ST_TO_ADDR
2209: GO 2159
2211: POP
2212: POP
// for i = 2 to distanceTab do
2213: LD_ADDR_VAR 0 1
2217: PUSH
2218: DOUBLE
2219: LD_INT 2
2221: DEC
2222: ST_TO_ADDR
2223: LD_VAR 0 2
2227: PUSH
2228: FOR_TO
2229: IFFALSE 2275
// if distanceTab [ i ] [ 2 ] < min then
2231: LD_VAR 0 2
2235: PUSH
2236: LD_VAR 0 1
2240: ARRAY
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: PUSH
2246: LD_VAR 0 3
2250: LESS
2251: IFFALSE 2273
// min = distanceTab [ i ] [ 2 ] ;
2253: LD_ADDR_VAR 0 3
2257: PUSH
2258: LD_VAR 0 2
2262: PUSH
2263: LD_VAR 0 1
2267: ARRAY
2268: PUSH
2269: LD_INT 2
2271: ARRAY
2272: ST_TO_ADDR
2273: GO 2228
2275: POP
2276: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2277: LD_ADDR_VAR 0 1
2281: PUSH
2282: LD_INT 22
2284: PUSH
2285: LD_INT 1
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: LD_INT 21
2294: PUSH
2295: LD_INT 1
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PPUSH
2306: CALL_OW 69
2310: PUSH
2311: LD_EXP 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: DIFF
2319: PUSH
2320: FOR_IN
2321: IFFALSE 2391
// begin ComMoveToArea ( i , DeadCutscene ) ;
2323: LD_VAR 0 1
2327: PPUSH
2328: LD_INT 28
2330: PPUSH
2331: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2335: LD_EXP 1
2339: PPUSH
2340: LD_INT 30
2342: PPUSH
2343: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2347: LD_VAR 0 1
2351: PPUSH
2352: LD_INT 23
2354: PPUSH
2355: LD_INT 11
2357: PPUSH
2358: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2362: LD_EXP 1
2366: PPUSH
2367: LD_INT 23
2369: PPUSH
2370: LD_INT 11
2372: PPUSH
2373: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2377: LD_EXP 33
2381: PPUSH
2382: LD_INT 250
2384: PPUSH
2385: CALL_OW 234
// end ;
2389: GO 2320
2391: POP
2392: POP
// for i = 2 to distanceTab do
2393: LD_ADDR_VAR 0 1
2397: PUSH
2398: DOUBLE
2399: LD_INT 2
2401: DEC
2402: ST_TO_ADDR
2403: LD_VAR 0 2
2407: PUSH
2408: FOR_TO
2409: IFFALSE 2795
// begin if distanceTab [ i ] [ 2 ] = min then
2411: LD_VAR 0 2
2415: PUSH
2416: LD_VAR 0 1
2420: ARRAY
2421: PUSH
2422: LD_INT 2
2424: ARRAY
2425: PUSH
2426: LD_VAR 0 3
2430: EQUAL
2431: IFFALSE 2793
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2433: LD_VAR 0 2
2437: PUSH
2438: LD_VAR 0 1
2442: ARRAY
2443: PUSH
2444: LD_INT 1
2446: ARRAY
2447: PUSH
2448: LD_EXP 2
2452: EQUAL
2453: IFFALSE 2467
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2455: LD_EXP 2
2459: PPUSH
2460: LD_STRING DCorpses-Bobby-1
2462: PPUSH
2463: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2467: LD_VAR 0 2
2471: PUSH
2472: LD_VAR 0 1
2476: ARRAY
2477: PUSH
2478: LD_INT 1
2480: ARRAY
2481: PUSH
2482: LD_EXP 3
2486: EQUAL
2487: IFFALSE 2501
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2489: LD_EXP 3
2493: PPUSH
2494: LD_STRING DCorpses-Cyrus-1
2496: PPUSH
2497: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2501: LD_VAR 0 2
2505: PUSH
2506: LD_VAR 0 1
2510: ARRAY
2511: PUSH
2512: LD_INT 1
2514: ARRAY
2515: PUSH
2516: LD_EXP 4
2520: EQUAL
2521: IFFALSE 2535
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2523: LD_EXP 4
2527: PPUSH
2528: LD_STRING DCorpses-Lisa-1
2530: PPUSH
2531: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2535: LD_VAR 0 2
2539: PUSH
2540: LD_VAR 0 1
2544: ARRAY
2545: PUSH
2546: LD_INT 1
2548: ARRAY
2549: PUSH
2550: LD_VAR 0 4
2554: PUSH
2555: LD_INT 1
2557: ARRAY
2558: EQUAL
2559: PUSH
2560: LD_VAR 0 4
2564: PUSH
2565: LD_INT 1
2567: ARRAY
2568: PPUSH
2569: CALL_OW 258
2573: PUSH
2574: LD_INT 1
2576: EQUAL
2577: AND
2578: IFFALSE 2596
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2580: LD_VAR 0 4
2584: PUSH
2585: LD_INT 1
2587: ARRAY
2588: PPUSH
2589: LD_STRING DCorpses-Sol1-1
2591: PPUSH
2592: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2596: LD_VAR 0 2
2600: PUSH
2601: LD_VAR 0 1
2605: ARRAY
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PUSH
2611: LD_VAR 0 4
2615: PUSH
2616: LD_INT 1
2618: ARRAY
2619: EQUAL
2620: PUSH
2621: LD_VAR 0 4
2625: PUSH
2626: LD_INT 1
2628: ARRAY
2629: PPUSH
2630: CALL_OW 258
2634: PUSH
2635: LD_INT 2
2637: EQUAL
2638: AND
2639: IFFALSE 2657
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2641: LD_VAR 0 4
2645: PUSH
2646: LD_INT 1
2648: ARRAY
2649: PPUSH
2650: LD_STRING DCorpses-FSol1-1
2652: PPUSH
2653: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2657: LD_VAR 0 2
2661: PUSH
2662: LD_VAR 0 1
2666: ARRAY
2667: PUSH
2668: LD_INT 1
2670: ARRAY
2671: PUSH
2672: LD_VAR 0 4
2676: PUSH
2677: LD_INT 2
2679: ARRAY
2680: EQUAL
2681: PUSH
2682: LD_VAR 0 4
2686: PUSH
2687: LD_INT 2
2689: ARRAY
2690: PPUSH
2691: CALL_OW 258
2695: PUSH
2696: LD_INT 1
2698: EQUAL
2699: AND
2700: IFFALSE 2718
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2702: LD_VAR 0 4
2706: PUSH
2707: LD_INT 2
2709: ARRAY
2710: PPUSH
2711: LD_STRING DCorpses-Sol1-1
2713: PPUSH
2714: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2718: LD_VAR 0 2
2722: PUSH
2723: LD_VAR 0 1
2727: ARRAY
2728: PUSH
2729: LD_INT 1
2731: ARRAY
2732: PUSH
2733: LD_VAR 0 4
2737: PUSH
2738: LD_INT 2
2740: ARRAY
2741: EQUAL
2742: PUSH
2743: LD_VAR 0 4
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: PPUSH
2752: CALL_OW 258
2756: PUSH
2757: LD_INT 2
2759: EQUAL
2760: AND
2761: IFFALSE 2779
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2763: LD_VAR 0 4
2767: PUSH
2768: LD_INT 2
2770: ARRAY
2771: PPUSH
2772: LD_STRING DCorpses-FSol1-1
2774: PPUSH
2775: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2779: LD_EXP 33
2783: PPUSH
2784: LD_INT 150
2786: PPUSH
2787: CALL_OW 234
// break ;
2791: GO 2795
// end ; end ;
2793: GO 2408
2795: POP
2796: POP
// repeat wait ( 0 0$1 ) ;
2797: LD_INT 35
2799: PPUSH
2800: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2804: LD_ADDR_VAR 0 1
2808: PUSH
2809: LD_INT 22
2811: PUSH
2812: LD_INT 1
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: LD_INT 21
2821: PUSH
2822: LD_INT 1
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: PPUSH
2833: CALL_OW 69
2837: PUSH
2838: LD_EXP 1
2842: PUSH
2843: EMPTY
2844: LIST
2845: DIFF
2846: PUSH
2847: FOR_IN
2848: IFFALSE 2918
// begin ComMoveToArea ( i , DeadCutscene ) ;
2850: LD_VAR 0 1
2854: PPUSH
2855: LD_INT 28
2857: PPUSH
2858: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2862: LD_EXP 1
2866: PPUSH
2867: LD_INT 30
2869: PPUSH
2870: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2874: LD_VAR 0 1
2878: PPUSH
2879: LD_INT 23
2881: PPUSH
2882: LD_INT 11
2884: PPUSH
2885: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2889: LD_EXP 1
2893: PPUSH
2894: LD_INT 23
2896: PPUSH
2897: LD_INT 11
2899: PPUSH
2900: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2904: LD_EXP 33
2908: PPUSH
2909: LD_INT 250
2911: PPUSH
2912: CALL_OW 234
// end ;
2916: GO 2847
2918: POP
2919: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2920: LD_EXP 1
2924: PPUSH
2925: LD_INT 30
2927: PPUSH
2928: CALL_OW 308
2932: IFFALSE 2797
// wait ( 0 0$3 ) ;
2934: LD_INT 105
2936: PPUSH
2937: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2941: LD_EXP 1
2945: PPUSH
2946: LD_STRING DCorpses-JMM-1
2948: PPUSH
2949: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2953: LD_EXP 33
2957: PPUSH
2958: LD_INT 150
2960: PPUSH
2961: CALL_OW 234
// if IsOK ( Khatam ) then
2965: LD_EXP 5
2969: PPUSH
2970: CALL_OW 302
2974: IFFALSE 3114
// begin repeat wait ( 0 0$1 ) ;
2976: LD_INT 35
2978: PPUSH
2979: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
2983: LD_EXP 5
2987: PPUSH
2988: LD_EXP 33
2992: PPUSH
2993: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
2997: LD_EXP 5
3001: PPUSH
3002: LD_EXP 33
3006: PPUSH
3007: CALL_OW 296
3011: PUSH
3012: LD_INT 2
3014: LESS
3015: IFFALSE 2976
// spotCorpses = 0 ;
3017: LD_ADDR_EXP 31
3021: PUSH
3022: LD_INT 0
3024: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3025: LD_EXP 33
3029: PPUSH
3030: LD_INT 10
3032: PPUSH
3033: CALL_OW 234
// wait ( 0 0$3 ) ;
3037: LD_INT 105
3039: PPUSH
3040: CALL_OW 67
// SetLives ( DyingSold , 0 ) ;
3044: LD_EXP 33
3048: PPUSH
3049: LD_INT 0
3051: PPUSH
3052: CALL_OW 234
// wait ( 0 0$1 ) ;
3056: LD_INT 35
3058: PPUSH
3059: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3063: LD_EXP 1
3067: PUSH
3068: LD_EXP 5
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PPUSH
3077: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3081: LD_EXP 5
3085: PPUSH
3086: LD_EXP 1
3090: PPUSH
3091: CALL_OW 119
// wait ( 0 0$1 ) ;
3095: LD_INT 35
3097: PPUSH
3098: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3102: LD_EXP 5
3106: PPUSH
3107: LD_STRING DCorpses-Khat-1
3109: PPUSH
3110: CALL_OW 88
// end ; InGameOff ;
3114: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3118: LD_EXP 1
3122: PPUSH
3123: LD_STRING DCorpses-JMM-2
3125: PPUSH
3126: CALL_OW 88
// end ;
3130: PPOPN 4
3132: END
// every 0 0$1 trigger spotCorpses = 1 do
3133: LD_EXP 31
3137: PUSH
3138: LD_INT 1
3140: EQUAL
3141: IFFALSE 3159
3143: GO 3145
3145: DISABLE
// begin enable ;
3146: ENABLE
// SetLives ( DyingSold , 150 ) ;
3147: LD_EXP 33
3151: PPUSH
3152: LD_INT 150
3154: PPUSH
3155: CALL_OW 234
// end ;
3159: END
// every 1 trigger FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do var i ;
3160: LD_INT 8
3162: PPUSH
3163: LD_INT 22
3165: PUSH
3166: LD_INT 1
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: PPUSH
3173: CALL_OW 70
3177: PUSH
3178: LD_INT 0
3180: GREATER
3181: PUSH
3182: LD_INT 1
3184: PPUSH
3185: CALL_OW 255
3189: PUSH
3190: LD_INT 1
3192: EQUAL
3193: NOT
3194: AND
3195: PUSH
3196: LD_INT 10
3198: PPUSH
3199: CALL_OW 255
3203: PUSH
3204: LD_INT 1
3206: EQUAL
3207: NOT
3208: AND
3209: IFFALSE 3377
3211: GO 3213
3213: DISABLE
3214: LD_INT 0
3216: PPUSH
// begin InGameOn ;
3217: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3221: LD_EXP 7
3225: PPUSH
3226: LD_INT 250
3228: PPUSH
3229: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3233: LD_INT 3
3235: PPUSH
3236: LD_INT 4
3238: PPUSH
3239: LD_INT 2
3241: PPUSH
3242: LD_INT 1
3244: PPUSH
3245: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3249: LD_EXP 6
3253: PUSH
3254: LD_EXP 7
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: PPUSH
3263: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3267: LD_ADDR_VAR 0 1
3271: PUSH
3272: LD_INT 9
3274: PPUSH
3275: LD_INT 22
3277: PUSH
3278: LD_INT 3
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PPUSH
3285: CALL_OW 70
3289: PUSH
3290: FOR_IN
3291: IFFALSE 3304
// ComFree ( i ) ;
3293: LD_VAR 0 1
3297: PPUSH
3298: CALL_OW 139
3302: GO 3290
3304: POP
3305: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3306: LD_ADDR_VAR 0 1
3310: PUSH
3311: LD_INT 22
3313: PUSH
3314: LD_INT 4
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: PPUSH
3321: CALL_OW 69
3325: PUSH
3326: FOR_IN
3327: IFFALSE 3340
// ComFree ( i ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL_OW 139
3338: GO 3326
3340: POP
3341: POP
// wait ( 0 0$1 ) ;
3342: LD_INT 35
3344: PPUSH
3345: CALL_OW 67
// InGameOff ;
3349: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3353: LD_EXP 6
3357: PPUSH
3358: LD_STRING DF-Sol1-1
3360: PPUSH
3361: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3365: LD_EXP 1
3369: PPUSH
3370: LD_STRING DF-JMM-1
3372: PPUSH
3373: CALL_OW 88
// end ;
3377: PPOPN 1
3379: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do
3380: LD_INT 19
3382: PPUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 3
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PPUSH
3393: CALL_OW 70
3397: PUSH
3398: LD_INT 0
3400: EQUAL
3401: PUSH
3402: LD_INT 1
3404: PPUSH
3405: CALL_OW 255
3409: PUSH
3410: LD_INT 1
3412: EQUAL
3413: NOT
3414: AND
3415: PUSH
3416: LD_INT 10
3418: PPUSH
3419: CALL_OW 255
3423: PUSH
3424: LD_INT 1
3426: EQUAL
3427: NOT
3428: AND
3429: IFFALSE 3542
3431: GO 3433
3433: DISABLE
// begin if not IsDead ( Brian ) then
3434: LD_EXP 6
3438: PPUSH
3439: CALL_OW 301
3443: NOT
3444: IFFALSE 3458
// SetSide ( Brian , 1 ) ;
3446: LD_EXP 6
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: CALL_OW 235
// if not IsDead ( Jerry ) then
3458: LD_EXP 7
3462: PPUSH
3463: CALL_OW 301
3467: NOT
3468: IFFALSE 3482
// SetSide ( Jerry , 1 ) ;
3470: LD_EXP 7
3474: PPUSH
3475: LD_INT 1
3477: PPUSH
3478: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3482: LD_INT 22
3484: PUSH
3485: LD_INT 1
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: LD_INT 25
3494: PUSH
3495: LD_INT 4
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: PUSH
3511: LD_INT 0
3513: GREATER
3514: IFFALSE 3530
// begin Say ( JMM , DFa-JMM-1 ) ;
3516: LD_EXP 1
3520: PPUSH
3521: LD_STRING DFa-JMM-1
3523: PPUSH
3524: CALL_OW 88
// end else
3528: GO 3542
// begin Say ( JMM , DFa-JMM-1a ) ;
3530: LD_EXP 1
3534: PPUSH
3535: LD_STRING DFa-JMM-1a
3537: PPUSH
3538: CALL_OW 88
// end ; end ;
3542: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3543: LD_INT 19
3545: PPUSH
3546: LD_INT 22
3548: PUSH
3549: LD_INT 3
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: PPUSH
3556: CALL_OW 70
3560: PUSH
3561: LD_INT 0
3563: EQUAL
3564: PUSH
3565: LD_EXP 6
3569: PPUSH
3570: CALL_OW 302
3574: NOT
3575: AND
3576: IFFALSE 3653
3578: GO 3580
3580: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3581: LD_INT 35
3583: PPUSH
3584: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3588: LD_EXP 6
3592: PPUSH
3593: CALL_OW 256
3597: PUSH
3598: LD_INT 250
3600: GREATER
3601: IFFALSE 3581
// Say ( Brian , DFb-Sol1-1 ) ;
3603: LD_EXP 6
3607: PPUSH
3608: LD_STRING DFb-Sol1-1
3610: PPUSH
3611: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3615: LD_EXP 6
3619: PPUSH
3620: LD_INT 78
3622: PPUSH
3623: LD_INT 74
3625: PPUSH
3626: CALL_OW 111
// if IsDead ( Jerry ) then
3630: LD_EXP 7
3634: PPUSH
3635: CALL_OW 301
3639: IFFALSE 3653
// Say ( Brian , DFb-Sol1-1a ) end ;
3641: LD_EXP 6
3645: PPUSH
3646: LD_STRING DFb-Sol1-1a
3648: PPUSH
3649: CALL_OW 88
3653: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3654: LD_INT 22
3656: PUSH
3657: LD_INT 1
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PUSH
3664: LD_INT 21
3666: PUSH
3667: LD_INT 2
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PPUSH
3678: CALL_OW 69
3682: PUSH
3683: LD_INT 0
3685: EQUAL
3686: IFFALSE 3774
3688: GO 3690
3690: DISABLE
3691: LD_INT 0
3693: PPUSH
// begin enable ;
3694: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3695: LD_ADDR_VAR 0 1
3699: PUSH
3700: LD_INT 22
3702: PUSH
3703: LD_INT 3
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: PUSH
3710: LD_INT 21
3712: PUSH
3713: LD_INT 3
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PUSH
3720: LD_INT 30
3722: PUSH
3723: LD_INT 31
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 69
3739: PUSH
3740: FOR_IN
3741: IFFALSE 3772
// begin if See ( 1 , i ) then
3743: LD_INT 1
3745: PPUSH
3746: LD_VAR 0 1
3750: PPUSH
3751: CALL_OW 292
3755: IFFALSE 3770
// begin disable ;
3757: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3758: LD_EXP 1
3762: PPUSH
3763: LD_STRING DX1-JMM-1
3765: PPUSH
3766: CALL_OW 88
// end ; end ;
3770: GO 3740
3772: POP
3773: POP
// end ;
3774: PPOPN 1
3776: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 11
3782: PPUSH
3783: CALL_OW 294
3787: IFFALSE 4150
3789: GO 3791
3791: DISABLE
3792: LD_INT 0
3794: PPUSH
3795: PPUSH
// begin DialogueOn ;
3796: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3800: LD_INT 11
3802: PPUSH
3803: LD_INT 22
3805: PUSH
3806: LD_INT 3
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 21
3815: PUSH
3816: LD_INT 1
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PPUSH
3827: CALL_OW 70
3831: PUSH
3832: LD_INT 1
3834: ARRAY
3835: PPUSH
3836: LD_STRING DX3-Rus1-1
3838: PPUSH
3839: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3843: LD_EXP 1
3847: PPUSH
3848: LD_STRING DX3-JMM-1
3850: PPUSH
3851: CALL_OW 88
// DialogueOff ;
3855: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3859: LD_ADDR_VAR 0 1
3863: PUSH
3864: LD_INT 11
3866: PPUSH
3867: LD_INT 22
3869: PUSH
3870: LD_INT 3
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: PUSH
3877: LD_INT 21
3879: PUSH
3880: LD_INT 1
3882: PUSH
3883: EMPTY
3884: LIST
3885: LIST
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: PPUSH
3891: CALL_OW 70
3895: PUSH
3896: FOR_IN
3897: IFFALSE 3917
// southBaseDefenders = southBaseDefenders ^ i ;
3899: LD_ADDR_EXP 25
3903: PUSH
3904: LD_EXP 25
3908: PUSH
3909: LD_VAR 0 1
3913: ADD
3914: ST_TO_ADDR
3915: GO 3896
3917: POP
3918: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
3919: LD_INT 455
3921: PUSH
3922: LD_INT 420
3924: PUSH
3925: LD_INT 315
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: LIST
3932: PUSH
3933: LD_OWVAR 67
3937: ARRAY
3938: PPUSH
3939: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3943: LD_INT 35
3945: PPUSH
3946: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
3950: LD_ADDR_VAR 0 1
3954: PUSH
3955: LD_INT 22
3957: PUSH
3958: LD_INT 3
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PUSH
3965: LD_INT 21
3967: PUSH
3968: LD_INT 2
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PUSH
3975: LD_INT 58
3977: PUSH
3978: EMPTY
3979: LIST
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: LIST
3985: PPUSH
3986: CALL_OW 69
3990: PUSH
3991: FOR_IN
3992: IFFALSE 4062
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
3994: LD_ADDR_VAR 0 2
3998: PUSH
3999: LD_INT 22
4001: PUSH
4002: LD_INT 3
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 21
4011: PUSH
4012: LD_INT 1
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 25
4021: PUSH
4022: LD_INT 3
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: LIST
4033: PPUSH
4034: CALL_OW 69
4038: PUSH
4039: FOR_IN
4040: IFFALSE 4058
// begin ComEnterUnit ( j , i ) ;
4042: LD_VAR 0 2
4046: PPUSH
4047: LD_VAR 0 1
4051: PPUSH
4052: CALL_OW 120
// end ;
4056: GO 4039
4058: POP
4059: POP
// end ;
4060: GO 3991
4062: POP
4063: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4064: LD_INT 22
4066: PUSH
4067: LD_INT 3
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PUSH
4074: LD_INT 21
4076: PUSH
4077: LD_INT 2
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PUSH
4084: LD_INT 58
4086: PUSH
4087: EMPTY
4088: LIST
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: PPUSH
4095: CALL_OW 69
4099: PUSH
4100: LD_INT 0
4102: EQUAL
4103: PUSH
4104: LD_INT 22
4106: PUSH
4107: LD_INT 3
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 21
4116: PUSH
4117: LD_INT 1
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PUSH
4124: LD_INT 25
4126: PUSH
4127: LD_INT 3
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: LIST
4138: PPUSH
4139: CALL_OW 69
4143: PUSH
4144: LD_INT 0
4146: EQUAL
4147: OR
4148: IFFALSE 3943
// end ;
4150: PPOPN 2
4152: END
// every 0 0$1 do var i , tmp ;
4153: GO 4155
4155: DISABLE
4156: LD_INT 0
4158: PPUSH
4159: PPUSH
// begin enable ;
4160: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4161: LD_ADDR_VAR 0 2
4165: PUSH
4166: LD_INT 22
4168: PUSH
4169: LD_INT 1
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PUSH
4176: LD_INT 21
4178: PUSH
4179: LD_INT 1
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: PPUSH
4190: CALL_OW 69
4194: ST_TO_ADDR
// for i in tmp do
4195: LD_ADDR_VAR 0 1
4199: PUSH
4200: LD_VAR 0 2
4204: PUSH
4205: FOR_IN
4206: IFFALSE 4328
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4208: LD_VAR 0 1
4212: PPUSH
4213: LD_INT 5
4215: PPUSH
4216: CALL_OW 296
4220: PUSH
4221: LD_INT 4
4223: LESS
4224: PUSH
4225: LD_VAR 0 1
4229: PPUSH
4230: LD_INT 4
4232: PPUSH
4233: CALL_OW 296
4237: PUSH
4238: LD_INT 4
4240: LESS
4241: OR
4242: IFFALSE 4326
// begin disable ;
4244: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4245: LD_INT 5
4247: PUSH
4248: LD_INT 4
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PPUSH
4255: CALL_OW 85
// if IsOK ( Bobby ) then
4259: LD_EXP 2
4263: PPUSH
4264: CALL_OW 302
4268: IFFALSE 4305
// begin DialogueOn ;
4270: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4274: LD_EXP 2
4278: PPUSH
4279: LD_STRING DX2-Bobby-1
4281: PPUSH
4282: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4286: LD_EXP 1
4290: PPUSH
4291: LD_STRING DX2-JMM-1a
4293: PPUSH
4294: CALL_OW 88
// DialogueOff ;
4298: CALL_OW 7
// disable ;
4302: DISABLE
// end else
4303: GO 4326
// begin DialogueOn ;
4305: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4309: LD_EXP 1
4313: PPUSH
4314: LD_STRING DX2-JMM-1
4316: PPUSH
4317: CALL_OW 88
// DialogueOff ;
4321: CALL_OW 7
// disable ;
4325: DISABLE
// end ; end ; end ;
4326: GO 4205
4328: POP
4329: POP
// end ;
4330: PPOPN 2
4332: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4333: LD_INT 22
4335: PUSH
4336: LD_INT 1
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: PUSH
4343: LD_INT 23
4345: PUSH
4346: LD_INT 3
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PUSH
4353: LD_INT 21
4355: PUSH
4356: LD_INT 2
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: PUSH
4363: LD_INT 34
4365: PUSH
4366: LD_INT 42
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 69
4383: PUSH
4384: LD_INT 1
4386: GREATEREQUAL
4387: IFFALSE 4854
4389: GO 4391
4391: DISABLE
4392: LD_INT 0
4394: PPUSH
4395: PPUSH
4396: PPUSH
4397: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4398: LD_ADDR_VAR 0 1
4402: PUSH
4403: LD_INT 22
4405: PUSH
4406: LD_INT 1
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: LD_INT 23
4415: PUSH
4416: LD_INT 3
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_INT 21
4425: PUSH
4426: LD_INT 2
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PUSH
4433: LD_INT 34
4435: PUSH
4436: LD_INT 42
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: PPUSH
4449: CALL_OW 69
4453: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4454: LD_ADDR_VAR 0 2
4458: PUSH
4459: LD_INT 22
4461: PUSH
4462: LD_INT 1
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: LD_INT 21
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: PUSH
4479: LD_INT 26
4481: PUSH
4482: LD_INT 1
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 69
4498: PUSH
4499: LD_EXP 1
4503: PUSH
4504: LD_EXP 3
4508: PUSH
4509: LD_EXP 2
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: DIFF
4519: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4520: LD_ADDR_VAR 0 3
4524: PUSH
4525: LD_INT 22
4527: PUSH
4528: LD_INT 1
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 21
4537: PUSH
4538: LD_INT 1
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: PUSH
4545: LD_INT 26
4547: PUSH
4548: LD_INT 2
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: LIST
4559: PPUSH
4560: CALL_OW 69
4564: PUSH
4565: LD_EXP 4
4569: PUSH
4570: EMPTY
4571: LIST
4572: DIFF
4573: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
4574: LD_EXP 1
4578: PPUSH
4579: CALL_OW 310
4583: NOT
4584: IFFALSE 4598
// Say ( JMM , DX2a-JMM-1 ) ;
4586: LD_EXP 1
4590: PPUSH
4591: LD_STRING DX2a-JMM-1
4593: PPUSH
4594: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4598: LD_EXP 2
4602: PPUSH
4603: CALL_OW 310
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: ARRAY
4616: EQUAL
4617: IFFALSE 4631
// Say ( Bobby , DX2a-Bobby-1 ) ;
4619: LD_EXP 2
4623: PPUSH
4624: LD_STRING DX2a-Bobby-1
4626: PPUSH
4627: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4631: LD_EXP 3
4635: PPUSH
4636: CALL_OW 310
4640: PUSH
4641: LD_VAR 0 1
4645: PUSH
4646: LD_INT 1
4648: ARRAY
4649: EQUAL
4650: IFFALSE 4664
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4652: LD_EXP 3
4656: PPUSH
4657: LD_STRING DX2a-Cyrus-1
4659: PPUSH
4660: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4664: LD_EXP 4
4668: PPUSH
4669: CALL_OW 310
4673: PUSH
4674: LD_VAR 0 1
4678: PUSH
4679: LD_INT 1
4681: ARRAY
4682: EQUAL
4683: IFFALSE 4697
// Say ( Lisa , DX2a-Lisa-1 ) ;
4685: LD_EXP 4
4689: PPUSH
4690: LD_STRING DX2a-Lisa-1
4692: PPUSH
4693: CALL_OW 88
// for i in temp1 do
4697: LD_ADDR_VAR 0 4
4701: PUSH
4702: LD_VAR 0 2
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4745
// if IsInUnit ( i ) = tmp [ 1 ] then
4710: LD_VAR 0 4
4714: PPUSH
4715: CALL_OW 310
4719: PUSH
4720: LD_VAR 0 1
4724: PUSH
4725: LD_INT 1
4727: ARRAY
4728: EQUAL
4729: IFFALSE 4743
// Say ( i , DX2a-Sol1-1 ) ;
4731: LD_VAR 0 4
4735: PPUSH
4736: LD_STRING DX2a-Sol1-1
4738: PPUSH
4739: CALL_OW 88
4743: GO 4707
4745: POP
4746: POP
// for i in temp2 do
4747: LD_ADDR_VAR 0 4
4751: PUSH
4752: LD_VAR 0 3
4756: PUSH
4757: FOR_IN
4758: IFFALSE 4795
// if IsInUnit ( i ) = tmp [ 1 ] then
4760: LD_VAR 0 4
4764: PPUSH
4765: CALL_OW 310
4769: PUSH
4770: LD_VAR 0 1
4774: PUSH
4775: LD_INT 1
4777: ARRAY
4778: EQUAL
4779: IFFALSE 4793
// Say ( i , DX2a-FSol1-1 ) ;
4781: LD_VAR 0 4
4785: PPUSH
4786: LD_STRING DX2a-FSol1-1
4788: PPUSH
4789: CALL_OW 88
4793: GO 4757
4795: POP
4796: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4797: LD_EXP 1
4801: PPUSH
4802: CALL_OW 310
4806: PUSH
4807: LD_VAR 0 1
4811: PUSH
4812: LD_INT 1
4814: ARRAY
4815: EQUAL
4816: IFFALSE 4830
// Say ( JMM , DX2b-JMM-1 ) ;
4818: LD_EXP 1
4822: PPUSH
4823: LD_STRING DX2b-JMM-1
4825: PPUSH
4826: CALL_OW 88
// if not IsInUnit ( JMM ) then
4830: LD_EXP 1
4834: PPUSH
4835: CALL_OW 310
4839: NOT
4840: IFFALSE 4854
// Say ( JMM , DX2a-JMM-2 ) ;
4842: LD_EXP 1
4846: PPUSH
4847: LD_STRING DX2a-JMM-2
4849: PPUSH
4850: CALL_OW 88
// end ;
4854: PPOPN 4
4856: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4857: LD_INT 1
4859: PPUSH
4860: CALL_OW 255
4864: PUSH
4865: LD_INT 1
4867: EQUAL
4868: PUSH
4869: LD_INT 10
4871: PPUSH
4872: CALL_OW 255
4876: PUSH
4877: LD_INT 1
4879: EQUAL
4880: OR
4881: IFFALSE 4941
4883: GO 4885
4885: DISABLE
// begin DialogueOn ;
4886: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4890: LD_EXP 1
4894: PPUSH
4895: LD_STRING D3-JMM-1
4897: PPUSH
4898: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4902: LD_EXP 9
4906: PPUSH
4907: LD_STRING D3-Pow-1
4909: PPUSH
4910: CALL_OW 94
// if IsOK ( Cyrus ) then
4914: LD_EXP 3
4918: PPUSH
4919: CALL_OW 302
4923: IFFALSE 4937
// Say ( Cyrus , D3-Cyrus-1 ) ;
4925: LD_EXP 3
4929: PPUSH
4930: LD_STRING D3-Cyrus-1
4932: PPUSH
4933: CALL_OW 88
// DialogueOff ;
4937: CALL_OW 7
// end ;
4941: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , i ;
4942: LD_INT 1
4944: PPUSH
4945: CALL_OW 255
4949: PUSH
4950: LD_INT 1
4952: EQUAL
4953: PUSH
4954: LD_INT 10
4956: PPUSH
4957: CALL_OW 255
4961: PUSH
4962: LD_INT 1
4964: EQUAL
4965: AND
4966: IFFALSE 6163
4968: GO 4970
4970: DISABLE
4971: LD_INT 0
4973: PPUSH
4974: PPUSH
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) diff [ JMM ] ;
4975: LD_ADDR_VAR 0 1
4979: PUSH
4980: LD_INT 22
4982: PUSH
4983: LD_INT 1
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PUSH
4990: LD_INT 23
4992: PUSH
4993: LD_INT 1
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PUSH
5000: LD_INT 25
5002: PUSH
5003: LD_INT 2
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: LIST
5014: PPUSH
5015: CALL_OW 69
5019: PUSH
5020: LD_EXP 1
5024: PUSH
5025: EMPTY
5026: LIST
5027: DIFF
5028: ST_TO_ADDR
// DialogueOn ;
5029: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5033: LD_EXP 1
5037: PPUSH
5038: LD_STRING D3a-JMM-1
5040: PPUSH
5041: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5045: LD_EXP 9
5049: PPUSH
5050: LD_STRING D3a-Pow-1
5052: PPUSH
5053: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5057: LD_EXP 1
5061: PPUSH
5062: LD_STRING D3a-JMM-2
5064: PPUSH
5065: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5069: LD_EXP 9
5073: PPUSH
5074: LD_STRING D3a-Pow-2
5076: PPUSH
5077: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5081: LD_EXP 1
5085: PPUSH
5086: LD_STRING D3a-JMM-3
5088: PPUSH
5089: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5093: LD_EXP 9
5097: PPUSH
5098: LD_STRING D3a-Pow-3
5100: PPUSH
5101: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5105: LD_EXP 1
5109: PPUSH
5110: LD_STRING D3a-JMM-4
5112: PPUSH
5113: CALL_OW 88
// DialogueOff ;
5117: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5121: LD_STRING M2
5123: PPUSH
5124: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5128: LD_EXP 1
5132: PPUSH
5133: LD_STRING D3b-JMM-1
5135: PPUSH
5136: CALL_OW 88
// wait ( 0 0$5 ) ;
5140: LD_INT 175
5142: PPUSH
5143: CALL_OW 67
// InGameOn ;
5147: CALL_OW 8
// PrepareRussianHeroes ;
5151: CALL 11244 0 0
// CenterNowOnUnits ( Mikhail ) ;
5155: LD_EXP 8
5159: PPUSH
5160: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5164: LD_EXP 1
5168: PUSH
5169: LD_VAR 0 1
5173: PUSH
5174: LD_INT 1
5176: ARRAY
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PPUSH
5182: LD_EXP 8
5186: PPUSH
5187: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5191: LD_EXP 8
5195: PPUSH
5196: LD_VAR 0 1
5200: PUSH
5201: LD_INT 1
5203: ARRAY
5204: PPUSH
5205: CALL_OW 119
// Wait ( 0 0$02 ) ;
5209: LD_INT 70
5211: PPUSH
5212: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5216: LD_EXP 8
5220: PPUSH
5221: LD_STRING D4-Mikh-1
5223: PPUSH
5224: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5228: LD_VAR 0 1
5232: PUSH
5233: LD_INT 1
5235: ARRAY
5236: PPUSH
5237: CALL_OW 258
5241: PUSH
5242: LD_INT 1
5244: EQUAL
5245: IFFALSE 5263
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5247: LD_VAR 0 1
5251: PUSH
5252: LD_INT 1
5254: ARRAY
5255: PPUSH
5256: LD_STRING D4-Sol1-1
5258: PPUSH
5259: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5263: LD_VAR 0 1
5267: PUSH
5268: LD_INT 1
5270: ARRAY
5271: PPUSH
5272: CALL_OW 258
5276: PUSH
5277: LD_INT 2
5279: EQUAL
5280: IFFALSE 5298
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5282: LD_VAR 0 1
5286: PUSH
5287: LD_INT 1
5289: ARRAY
5290: PPUSH
5291: LD_STRING D4-FSol1-1
5293: PPUSH
5294: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5298: LD_EXP 8
5302: PPUSH
5303: LD_STRING D4-Mikh-2
5305: PPUSH
5306: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5310: LD_VAR 0 1
5314: PUSH
5315: LD_INT 1
5317: ARRAY
5318: PPUSH
5319: CALL_OW 258
5323: PUSH
5324: LD_INT 1
5326: EQUAL
5327: IFFALSE 5345
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5329: LD_VAR 0 1
5333: PUSH
5334: LD_INT 1
5336: ARRAY
5337: PPUSH
5338: LD_STRING D4-Sol1-2
5340: PPUSH
5341: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5345: LD_VAR 0 1
5349: PUSH
5350: LD_INT 1
5352: ARRAY
5353: PPUSH
5354: CALL_OW 258
5358: PUSH
5359: LD_INT 2
5361: EQUAL
5362: IFFALSE 5380
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5364: LD_VAR 0 1
5368: PUSH
5369: LD_INT 1
5371: ARRAY
5372: PPUSH
5373: LD_STRING D4-FSol1-2
5375: PPUSH
5376: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5380: LD_EXP 8
5384: PPUSH
5385: LD_STRING D4-Mikh-3
5387: PPUSH
5388: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5392: LD_VAR 0 1
5396: PUSH
5397: LD_INT 1
5399: ARRAY
5400: PPUSH
5401: CALL_OW 258
5405: PUSH
5406: LD_INT 1
5408: EQUAL
5409: IFFALSE 5427
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5411: LD_VAR 0 1
5415: PUSH
5416: LD_INT 1
5418: ARRAY
5419: PPUSH
5420: LD_STRING D4-Sol1-3
5422: PPUSH
5423: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5427: LD_VAR 0 1
5431: PUSH
5432: LD_INT 1
5434: ARRAY
5435: PPUSH
5436: CALL_OW 258
5440: PUSH
5441: LD_INT 2
5443: EQUAL
5444: IFFALSE 5462
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5446: LD_VAR 0 1
5450: PUSH
5451: LD_INT 1
5453: ARRAY
5454: PPUSH
5455: LD_STRING D4-FSol1-3
5457: PPUSH
5458: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5462: LD_EXP 8
5466: PPUSH
5467: LD_STRING D4-Mikh-4
5469: PPUSH
5470: CALL_OW 88
// case query ( Qs1 ) of 1 :
5474: LD_STRING Qs1
5476: PPUSH
5477: CALL_OW 97
5481: PUSH
5482: LD_INT 1
5484: DOUBLE
5485: EQUAL
5486: IFTRUE 5490
5488: GO 5525
5490: POP
// begin InGameOff ;
5491: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5495: LD_INT 1
5497: PPUSH
5498: LD_INT 6
5500: PPUSH
5501: LD_INT 2
5503: PPUSH
5504: LD_INT 1
5506: PPUSH
5507: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5511: LD_EXP 8
5515: PPUSH
5516: LD_INT 17
5518: PPUSH
5519: CALL_OW 113
// end ; 2 :
5523: GO 6147
5525: LD_INT 2
5527: DOUBLE
5528: EQUAL
5529: IFTRUE 5533
5531: GO 6112
5533: POP
// begin repeat wait ( 0 0$1 ) ;
5534: LD_INT 35
5536: PPUSH
5537: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5541: LD_VAR 0 1
5545: PUSH
5546: LD_INT 1
5548: ARRAY
5549: PPUSH
5550: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5554: LD_VAR 0 1
5558: PUSH
5559: LD_INT 1
5561: ARRAY
5562: PPUSH
5563: LD_EXP 1
5567: PPUSH
5568: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5572: LD_EXP 8
5576: PPUSH
5577: LD_EXP 1
5581: PPUSH
5582: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5586: LD_EXP 1
5590: PPUSH
5591: LD_EXP 8
5595: PPUSH
5596: CALL_OW 296
5600: PUSH
5601: LD_INT 5
5603: LESS
5604: IFFALSE 5534
// ComTurnUnit ( Mikhail , JMM ) ;
5606: LD_EXP 8
5610: PPUSH
5611: LD_EXP 1
5615: PPUSH
5616: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5620: LD_EXP 1
5624: PPUSH
5625: LD_STRING D4b-JMM-1
5627: PPUSH
5628: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5632: LD_EXP 8
5636: PPUSH
5637: LD_STRING D4b-Mikh-1
5639: PPUSH
5640: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5644: LD_EXP 1
5648: PPUSH
5649: LD_STRING D4b-JMM-2
5651: PPUSH
5652: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5656: LD_EXP 8
5660: PPUSH
5661: LD_STRING D4b-Mikh-2
5663: PPUSH
5664: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5668: LD_EXP 1
5672: PPUSH
5673: LD_STRING D4b-JMM-3
5675: PPUSH
5676: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5680: LD_EXP 8
5684: PPUSH
5685: LD_STRING D4b-Mikh-3
5687: PPUSH
5688: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5692: LD_EXP 1
5696: PPUSH
5697: LD_STRING D4b-JMM-4
5699: PPUSH
5700: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5704: LD_EXP 8
5708: PPUSH
5709: LD_STRING D4b-Mikh-4
5711: PPUSH
5712: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5716: LD_EXP 1
5720: PPUSH
5721: LD_STRING D4b-JMM-5
5723: PPUSH
5724: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5728: LD_EXP 8
5732: PPUSH
5733: LD_STRING D4b-Mikh-5
5735: PPUSH
5736: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5740: LD_EXP 1
5744: PPUSH
5745: LD_STRING D4b-JMM-6
5747: PPUSH
5748: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5752: LD_EXP 8
5756: PPUSH
5757: LD_STRING D4b-Mikh-6
5759: PPUSH
5760: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5764: LD_EXP 1
5768: PPUSH
5769: LD_STRING D4b-JMM-7
5771: PPUSH
5772: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5776: LD_EXP 8
5780: PPUSH
5781: LD_STRING D4b-Mikh-7
5783: PPUSH
5784: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5788: LD_VAR 0 1
5792: PUSH
5793: LD_INT 1
5795: ARRAY
5796: PPUSH
5797: CALL_OW 258
5801: PUSH
5802: LD_INT 1
5804: EQUAL
5805: IFFALSE 5823
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5807: LD_VAR 0 1
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_STRING D4b-Sol1-7
5818: PPUSH
5819: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5823: LD_VAR 0 1
5827: PUSH
5828: LD_INT 1
5830: ARRAY
5831: PPUSH
5832: CALL_OW 258
5836: PUSH
5837: LD_INT 2
5839: EQUAL
5840: IFFALSE 5858
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5842: LD_VAR 0 1
5846: PUSH
5847: LD_INT 1
5849: ARRAY
5850: PPUSH
5851: LD_STRING D4b-FSol1-7
5853: PPUSH
5854: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5858: LD_EXP 1
5862: PPUSH
5863: LD_STRING D4b-JMM-8
5865: PPUSH
5866: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5870: LD_VAR 0 1
5874: PUSH
5875: LD_INT 1
5877: ARRAY
5878: PPUSH
5879: CALL_OW 258
5883: PUSH
5884: LD_INT 1
5886: EQUAL
5887: IFFALSE 5905
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5889: LD_VAR 0 1
5893: PUSH
5894: LD_INT 1
5896: ARRAY
5897: PPUSH
5898: LD_STRING D4b-Sol1-8
5900: PPUSH
5901: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5905: LD_VAR 0 1
5909: PUSH
5910: LD_INT 1
5912: ARRAY
5913: PPUSH
5914: CALL_OW 258
5918: PUSH
5919: LD_INT 2
5921: EQUAL
5922: IFFALSE 5940
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
5924: LD_VAR 0 1
5928: PUSH
5929: LD_INT 1
5931: ARRAY
5932: PPUSH
5933: LD_STRING D4b-FSol1-8
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-9
5947: PPUSH
5948: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_INT 1
5959: PPUSH
5960: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5964: LD_ADDR_VAR 0 2
5968: PUSH
5969: LD_INT 22
5971: PUSH
5972: LD_INT 1
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: EMPTY
5980: LIST
5981: PPUSH
5982: CALL_OW 69
5986: PUSH
5987: FOR_IN
5988: IFFALSE 6001
// ComFree ( i ) ;
5990: LD_VAR 0 2
5994: PPUSH
5995: CALL_OW 139
5999: GO 5987
6001: POP
6002: POP
// repeat wait ( 0 0$1 ) ;
6003: LD_INT 35
6005: PPUSH
6006: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6010: LD_EXP 8
6014: PPUSH
6015: CALL_OW 87
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
6019: LD_EXP 8
6023: PPUSH
6024: LD_INT 1
6026: PPUSH
6027: CALL_OW 296
6031: PUSH
6032: LD_EXP 8
6036: PPUSH
6037: LD_INT 10
6039: PPUSH
6040: CALL_OW 296
6044: LESS
6045: IFFALSE 6061
// begin ComEnterUnit ( Mikhail , dep1 ) ;
6047: LD_EXP 8
6051: PPUSH
6052: LD_INT 1
6054: PPUSH
6055: CALL_OW 120
// end else
6059: GO 6073
// begin ComEnterUnit ( Mikhail , dep2 ) ;
6061: LD_EXP 8
6065: PPUSH
6066: LD_INT 10
6068: PPUSH
6069: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
6073: LD_EXP 8
6077: PPUSH
6078: CALL_OW 310
6082: IFFALSE 6003
// mikhailDepot = IsInUnit ( Mikhail ) ;
6084: LD_ADDR_EXP 23
6088: PUSH
6089: LD_EXP 8
6093: PPUSH
6094: CALL_OW 310
6098: ST_TO_ADDR
// InGameOff ;
6099: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6103: LD_STRING M3
6105: PPUSH
6106: CALL_OW 337
// end ; 3 :
6110: GO 6147
6112: LD_INT 3
6114: DOUBLE
6115: EQUAL
6116: IFTRUE 6120
6118: GO 6146
6120: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6121: LD_EXP 8
6125: PPUSH
6126: LD_INT 17
6128: PPUSH
6129: CALL_OW 113
// wait ( 0 0$3 ) ;
6133: LD_INT 105
6135: PPUSH
6136: CALL_OW 67
// InGameOff ;
6140: CALL_OW 9
// end ; end ;
6144: GO 6147
6146: POP
// PrepareTigers ;
6147: CALL 13877 0 0
// RussianTrap ;
6151: CALL 9878 0 0
// tigersRespawn = 1 ;
6155: LD_ADDR_EXP 29
6159: PUSH
6160: LD_INT 1
6162: ST_TO_ADDR
// end ;
6163: PPOPN 2
6165: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6166: LD_INT 1
6168: PPUSH
6169: CALL_OW 255
6173: PUSH
6174: LD_INT 1
6176: EQUAL
6177: PUSH
6178: LD_INT 10
6180: PPUSH
6181: CALL_OW 255
6185: PUSH
6186: LD_INT 1
6188: EQUAL
6189: AND
6190: PUSH
6191: LD_INT 1
6193: PPUSH
6194: CALL_OW 274
6198: PPUSH
6199: LD_INT 1
6201: PPUSH
6202: CALL_OW 275
6206: PUSH
6207: LD_INT 100
6209: GREATEREQUAL
6210: AND
6211: IFFALSE 6374
6213: GO 6215
6215: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6216: LD_INT 2100
6218: PPUSH
6219: LD_INT 4200
6221: PPUSH
6222: CALL_OW 12
6226: PUSH
6227: LD_INT 1050
6229: PLUS
6230: PPUSH
6231: CALL_OW 67
// PrepareCargoBays ;
6235: CALL 12360 0 0
// cargoRespawn = 1 ;
6239: LD_ADDR_EXP 28
6243: PUSH
6244: LD_INT 1
6246: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6247: LD_EXP 15
6251: PUSH
6252: LD_EXP 16
6256: PUSH
6257: LD_EXP 17
6261: PUSH
6262: LD_EXP 18
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: PPUSH
6273: LD_INT 36
6275: PPUSH
6276: LD_INT 13
6278: PPUSH
6279: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6283: LD_EXP 15
6287: PUSH
6288: LD_EXP 16
6292: PUSH
6293: LD_EXP 17
6297: PUSH
6298: LD_EXP 18
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: PPUSH
6309: LD_INT 40
6311: PPUSH
6312: LD_INT 20
6314: PPUSH
6315: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6319: LD_EXP 15
6323: PUSH
6324: LD_EXP 16
6328: PUSH
6329: LD_EXP 17
6333: PUSH
6334: LD_EXP 18
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PPUSH
6345: LD_INT 53
6347: PPUSH
6348: LD_INT 16
6350: PPUSH
6351: CALL_OW 171
// wait ( 0 0$5 ) ;
6355: LD_INT 175
6357: PPUSH
6358: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6362: LD_EXP 17
6366: PPUSH
6367: LD_STRING D5-Rus2-1
6369: PPUSH
6370: CALL_OW 88
// end ;
6374: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6375: LD_EXP 28
6379: PUSH
6380: LD_INT 1
6382: EQUAL
6383: IFFALSE 6573
6385: GO 6387
6387: DISABLE
6388: LD_INT 0
6390: PPUSH
6391: PPUSH
6392: PPUSH
6393: PPUSH
// begin enable ;
6394: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6395: LD_ADDR_VAR 0 3
6399: PUSH
6400: LD_INT 22
6402: PUSH
6403: LD_INT 3
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 21
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 34
6422: PUSH
6423: LD_INT 51
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: LIST
6434: PPUSH
6435: CALL_OW 69
6439: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
6440: LD_ADDR_VAR 0 4
6444: PUSH
6445: LD_INT 22
6447: PUSH
6448: LD_INT 1
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PUSH
6455: LD_INT 23
6457: PUSH
6458: LD_INT 1
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PPUSH
6469: CALL_OW 69
6473: ST_TO_ADDR
// for i in tmp1 do
6474: LD_ADDR_VAR 0 1
6478: PUSH
6479: LD_VAR 0 3
6483: PUSH
6484: FOR_IN
6485: IFFALSE 6571
// begin for j in tmp2 do
6487: LD_ADDR_VAR 0 2
6491: PUSH
6492: LD_VAR 0 4
6496: PUSH
6497: FOR_IN
6498: IFFALSE 6567
// begin if GetDistUnits ( i , j ) < 7 then
6500: LD_VAR 0 1
6504: PPUSH
6505: LD_VAR 0 2
6509: PPUSH
6510: CALL_OW 296
6514: PUSH
6515: LD_INT 7
6517: LESS
6518: IFFALSE 6565
// begin disable ;
6520: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6521: LD_EXP 15
6525: PUSH
6526: LD_EXP 16
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: LD_INT 7
6537: PPUSH
6538: LD_INT 9
6540: PPUSH
6541: CALL_OW 111
// Say ( driver1 , D5-Rus2-1a ) ;
6545: LD_EXP 17
6549: PPUSH
6550: LD_STRING D5-Rus2-1a
6552: PPUSH
6553: CALL_OW 88
// cargoEscape = 1 ;
6557: LD_ADDR_EXP 20
6561: PUSH
6562: LD_INT 1
6564: ST_TO_ADDR
// end ; end ;
6565: GO 6497
6567: POP
6568: POP
// end ;
6569: GO 6484
6571: POP
6572: POP
// end ;
6573: PPOPN 4
6575: END
// every 0 0$1 trigger cargoEscape > 0 do
6576: LD_EXP 20
6580: PUSH
6581: LD_INT 0
6583: GREATER
6584: IFFALSE 6710
6586: GO 6588
6588: DISABLE
// begin enable ;
6589: ENABLE
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6590: LD_EXP 15
6594: PPUSH
6595: LD_INT 13
6597: PPUSH
6598: CALL_OW 308
6602: PUSH
6603: LD_EXP 17
6607: PPUSH
6608: LD_INT 13
6610: PPUSH
6611: CALL_OW 308
6615: OR
6616: IFFALSE 6650
// begin RemoveUnit ( cargo1 ) ;
6618: LD_EXP 15
6622: PPUSH
6623: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6627: LD_EXP 17
6631: PPUSH
6632: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6636: LD_ADDR_EXP 20
6640: PUSH
6641: LD_EXP 20
6645: PUSH
6646: LD_INT 1
6648: PLUS
6649: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6650: LD_EXP 16
6654: PPUSH
6655: LD_INT 13
6657: PPUSH
6658: CALL_OW 308
6662: PUSH
6663: LD_EXP 18
6667: PPUSH
6668: LD_INT 13
6670: PPUSH
6671: CALL_OW 308
6675: OR
6676: IFFALSE 6710
// begin RemoveUnit ( cargo2 ) ;
6678: LD_EXP 16
6682: PPUSH
6683: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6687: LD_EXP 18
6691: PPUSH
6692: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6696: LD_ADDR_EXP 20
6700: PUSH
6701: LD_EXP 20
6705: PUSH
6706: LD_INT 1
6708: PLUS
6709: ST_TO_ADDR
// end ; end ;
6710: END
// every 0 0$1 trigger cargoEscape > 1 do
6711: LD_EXP 20
6715: PUSH
6716: LD_INT 1
6718: GREATER
6719: IFFALSE 6883
6721: GO 6723
6723: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
6724: LD_INT 4
6726: PPUSH
6727: LD_INT 1
6729: PPUSH
6730: LD_INT 1
6732: PPUSH
6733: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6737: LD_INT 31
6739: PPUSH
6740: LD_INT 1
6742: PPUSH
6743: LD_INT 1
6745: PPUSH
6746: CALL_OW 324
// if IsOK ( Jerry ) then
6750: LD_EXP 7
6754: PPUSH
6755: CALL_OW 302
6759: IFFALSE 6775
// begin Say ( Jerry , D5a-Sol1-1 ) ;
6761: LD_EXP 7
6765: PPUSH
6766: LD_STRING D5a-Sol1-1
6768: PPUSH
6769: CALL_OW 88
// end else
6773: GO 6871
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
6775: LD_INT 22
6777: PUSH
6778: LD_INT 1
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: LD_INT 23
6787: PUSH
6788: LD_INT 1
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PUSH
6795: LD_INT 26
6797: PUSH
6798: LD_INT 1
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: LIST
6809: PPUSH
6810: CALL_OW 69
6814: PUSH
6815: LD_INT 2
6817: PPUSH
6818: LD_INT 22
6820: PUSH
6821: LD_INT 1
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PUSH
6828: LD_INT 23
6830: PUSH
6831: LD_INT 1
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 26
6840: PUSH
6841: LD_INT 1
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: LIST
6852: PPUSH
6853: CALL_OW 69
6857: PPUSH
6858: CALL_OW 12
6862: ARRAY
6863: PPUSH
6864: LD_STRING D5a-Sol1-1
6866: PPUSH
6867: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6871: LD_EXP 1
6875: PPUSH
6876: LD_STRING D5a-JMM-1
6878: PPUSH
6879: CALL_OW 88
// end ;
6883: END
// every 0 0$1 trigger GetLives ( dep1 ) < 1000 or GetLives ( dep2 ) < 1000 do
6884: LD_INT 1
6886: PPUSH
6887: CALL_OW 256
6891: PUSH
6892: LD_INT 1000
6894: LESS
6895: PUSH
6896: LD_INT 10
6898: PPUSH
6899: CALL_OW 256
6903: PUSH
6904: LD_INT 1000
6906: LESS
6907: OR
6908: IFFALSE 6925
6910: GO 6912
6912: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
6913: LD_EXP 1
6917: PPUSH
6918: LD_STRING D8-JMM-1
6920: PPUSH
6921: CALL_OW 88
// end ;
6925: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6926: LD_EXP 8
6930: PPUSH
6931: CALL_OW 310
6935: PUSH
6936: LD_INT 1
6938: EQUAL
6939: PUSH
6940: LD_EXP 22
6944: PUSH
6945: LD_INT 3
6947: EQUAL
6948: NOT
6949: AND
6950: IFFALSE 6972
6952: GO 6954
6954: DISABLE
// begin mikhailInBase = 1 ;
6955: LD_ADDR_EXP 22
6959: PUSH
6960: LD_INT 1
6962: ST_TO_ADDR
// mikhailStatus = 1 ;
6963: LD_ADDR_EXP 21
6967: PUSH
6968: LD_INT 1
6970: ST_TO_ADDR
// enable ;
6971: ENABLE
// end ;
6972: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
6973: LD_EXP 8
6977: PPUSH
6978: LD_INT 25
6980: PPUSH
6981: CALL_OW 308
6985: PUSH
6986: LD_EXP 22
6990: PUSH
6991: LD_INT 1
6993: EQUAL
6994: AND
6995: PUSH
6996: LD_EXP 8
7000: PPUSH
7001: CALL_OW 255
7005: PUSH
7006: LD_INT 1
7008: EQUAL
7009: AND
7010: IFFALSE 7340
7012: GO 7014
7014: DISABLE
// begin enable ;
7015: ENABLE
// case query ( QMikh2 ) of 1 :
7016: LD_STRING QMikh2
7018: PPUSH
7019: CALL_OW 97
7023: PUSH
7024: LD_INT 1
7026: DOUBLE
7027: EQUAL
7028: IFTRUE 7032
7030: GO 7099
7032: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7033: LD_INT 1
7035: PPUSH
7036: LD_INT 6
7038: PPUSH
7039: LD_INT 2
7041: PPUSH
7042: LD_INT 1
7044: PPUSH
7045: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7049: LD_EXP 8
7053: PPUSH
7054: LD_INT 6
7056: PPUSH
7057: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7061: LD_EXP 8
7065: PPUSH
7066: CALL_OW 122
// wait ( 0 0$1 ) ;
7070: LD_INT 35
7072: PPUSH
7073: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7077: LD_EXP 8
7081: PPUSH
7082: LD_INT 17
7084: PPUSH
7085: CALL_OW 113
// mikhailInbase = 0 ;
7089: LD_ADDR_EXP 22
7093: PUSH
7094: LD_INT 0
7096: ST_TO_ADDR
// end ; 2 :
7097: GO 7340
7099: LD_INT 2
7101: DOUBLE
7102: EQUAL
7103: IFTRUE 7107
7105: GO 7280
7107: POP
// begin mikhailInBase = 2 ;
7108: LD_ADDR_EXP 22
7112: PUSH
7113: LD_INT 2
7115: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7116: LD_EXP 8
7120: PPUSH
7121: LD_INT 6
7123: PPUSH
7124: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7128: LD_EXP 8
7132: PPUSH
7133: CALL_OW 122
// wait ( 0 0$1 ) ;
7137: LD_INT 35
7139: PPUSH
7140: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7144: LD_EXP 8
7148: PPUSH
7149: LD_EXP 8
7153: PPUSH
7154: CALL_OW 250
7158: PUSH
7159: LD_INT 2
7161: PLUS
7162: PPUSH
7163: LD_EXP 8
7167: PPUSH
7168: CALL_OW 251
7172: PUSH
7173: LD_INT 2
7175: PLUS
7176: PPUSH
7177: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7181: LD_EXP 8
7185: PPUSH
7186: LD_EXP 8
7190: PPUSH
7191: CALL_OW 250
7195: PUSH
7196: LD_INT 1
7198: PLUS
7199: PPUSH
7200: LD_EXP 8
7204: PPUSH
7205: CALL_OW 251
7209: PUSH
7210: LD_INT 2
7212: PLUS
7213: PPUSH
7214: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7218: LD_EXP 8
7222: PPUSH
7223: LD_EXP 8
7227: PPUSH
7228: CALL_OW 250
7232: PUSH
7233: LD_INT 2
7235: PLUS
7236: PPUSH
7237: LD_EXP 8
7241: PPUSH
7242: CALL_OW 251
7246: PPUSH
7247: CALL_OW 171
// wait ( 0 0$5 ) ;
7251: LD_INT 175
7253: PPUSH
7254: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7258: LD_EXP 8
7262: PPUSH
7263: LD_INT 25
7265: PPUSH
7266: CALL_OW 113
// mikhailInBase = 4 ;
7270: LD_ADDR_EXP 22
7274: PUSH
7275: LD_INT 4
7277: ST_TO_ADDR
// end ; 3 :
7278: GO 7340
7280: LD_INT 3
7282: DOUBLE
7283: EQUAL
7284: IFTRUE 7288
7286: GO 7339
7288: POP
// begin SetSide ( Mikhail , 6 ) ;
7289: LD_EXP 8
7293: PPUSH
7294: LD_INT 6
7296: PPUSH
7297: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7301: LD_EXP 8
7305: PPUSH
7306: CALL_OW 122
// wait ( 0 0$1 ) ;
7310: LD_INT 35
7312: PPUSH
7313: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7317: LD_EXP 8
7321: PPUSH
7322: LD_INT 17
7324: PPUSH
7325: CALL_OW 113
// mikhailInbase = 3 ;
7329: LD_ADDR_EXP 22
7333: PUSH
7334: LD_INT 3
7336: ST_TO_ADDR
// end ; end ;
7337: GO 7340
7339: POP
// end ;
7340: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7341: LD_EXP 8
7345: PPUSH
7346: LD_INT 25
7348: PPUSH
7349: CALL_OW 308
7353: PUSH
7354: LD_EXP 22
7358: PUSH
7359: LD_INT 4
7361: EQUAL
7362: AND
7363: IFFALSE 7461
7365: GO 7367
7367: DISABLE
// begin enable ;
7368: ENABLE
// SetSide ( Mikhail , 1 ) ;
7369: LD_EXP 8
7373: PPUSH
7374: LD_INT 1
7376: PPUSH
7377: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7381: LD_INT 35
7383: PPUSH
7384: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
7388: LD_EXP 8
7392: PPUSH
7393: LD_INT 1
7395: PPUSH
7396: CALL_OW 296
7400: PUSH
7401: LD_EXP 8
7405: PPUSH
7406: LD_INT 10
7408: PPUSH
7409: CALL_OW 296
7413: LESS
7414: IFFALSE 7430
// begin ComEnterUnit ( Mikhail , dep1 ) ;
7416: LD_EXP 8
7420: PPUSH
7421: LD_INT 1
7423: PPUSH
7424: CALL_OW 120
// end else
7428: GO 7442
// begin ComEnterUnit ( Mikhail , dep2 ) ;
7430: LD_EXP 8
7434: PPUSH
7435: LD_INT 10
7437: PPUSH
7438: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
7442: LD_EXP 8
7446: PPUSH
7447: CALL_OW 310
7451: IFFALSE 7381
// mikhailInBase = 1 ;
7453: LD_ADDR_EXP 22
7457: PUSH
7458: LD_INT 1
7460: ST_TO_ADDR
// end ;
7461: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7462: LD_EXP 8
7466: PPUSH
7467: CALL_OW 310
7471: PUSH
7472: LD_EXP 22
7476: PUSH
7477: LD_INT 3
7479: EQUAL
7480: NOT
7481: AND
7482: IFFALSE 7608
7484: GO 7486
7486: DISABLE
// begin enable ;
7487: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7488: LD_INT 22
7490: PUSH
7491: LD_INT 1
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 21
7500: PUSH
7501: LD_INT 1
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_INT 91
7510: PUSH
7511: LD_EXP 8
7515: PPUSH
7516: CALL_OW 310
7520: PUSH
7521: LD_INT 10
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: PPUSH
7534: CALL_OW 69
7538: PUSH
7539: LD_INT 1
7541: EQUAL
7542: IFFALSE 7608
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7544: LD_INT 1
7546: PPUSH
7547: LD_INT 6
7549: PPUSH
7550: LD_INT 2
7552: PPUSH
7553: LD_INT 1
7555: PPUSH
7556: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7560: LD_EXP 8
7564: PPUSH
7565: LD_INT 6
7567: PPUSH
7568: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7572: LD_EXP 8
7576: PPUSH
7577: CALL_OW 122
// wait ( 0 0$1 ) ;
7581: LD_INT 35
7583: PPUSH
7584: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7588: LD_EXP 8
7592: PPUSH
7593: LD_INT 17
7595: PPUSH
7596: CALL_OW 113
// mikhailStatus = 3 ;
7600: LD_ADDR_EXP 21
7604: PUSH
7605: LD_INT 3
7607: ST_TO_ADDR
// end ; end ;
7608: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7609: LD_EXP 1
7613: PPUSH
7614: LD_EXP 23
7618: PPUSH
7619: CALL_OW 296
7623: PUSH
7624: LD_INT 5
7626: LESS
7627: PUSH
7628: LD_EXP 21
7632: PUSH
7633: LD_INT 3
7635: EQUAL
7636: AND
7637: PUSH
7638: LD_EXP 22
7642: PUSH
7643: LD_INT 3
7645: EQUAL
7646: NOT
7647: AND
7648: IFFALSE 7864
7650: GO 7652
7652: DISABLE
7653: LD_INT 0
7655: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
7656: LD_ADDR_VAR 0 1
7660: PUSH
7661: LD_INT 22
7663: PUSH
7664: LD_INT 1
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 21
7673: PUSH
7674: LD_INT 1
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 26
7683: PUSH
7684: LD_INT 1
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: LIST
7695: PPUSH
7696: CALL_OW 69
7700: PUSH
7701: LD_EXP 1
7705: PUSH
7706: EMPTY
7707: LIST
7708: DIFF
7709: ST_TO_ADDR
// DialogueOn ;
7710: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7714: LD_EXP 1
7718: PPUSH
7719: LD_STRING D7-JMM-1
7721: PPUSH
7722: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7726: LD_VAR 0 1
7730: PUSH
7731: LD_INT 1
7733: ARRAY
7734: PPUSH
7735: LD_STRING D7-Sol1-1
7737: PPUSH
7738: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7742: LD_EXP 1
7746: PPUSH
7747: LD_STRING D7-JMM-2
7749: PPUSH
7750: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7754: LD_VAR 0 1
7758: PUSH
7759: LD_INT 1
7761: ARRAY
7762: PPUSH
7763: LD_STRING D7-Sol1-2
7765: PPUSH
7766: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7770: LD_EXP 1
7774: PPUSH
7775: LD_STRING D7-JMM-3
7777: PPUSH
7778: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7782: LD_VAR 0 1
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: PPUSH
7791: LD_STRING D7-Sol1-3
7793: PPUSH
7794: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7798: LD_EXP 3
7802: PPUSH
7803: CALL_OW 302
7807: PUSH
7808: LD_EXP 4
7812: PPUSH
7813: CALL_OW 302
7817: AND
7818: IFFALSE 7860
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7820: LD_EXP 3
7824: PPUSH
7825: LD_STRING D7-Cyrus-3
7827: PPUSH
7828: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7832: LD_VAR 0 1
7836: PUSH
7837: LD_INT 1
7839: ARRAY
7840: PPUSH
7841: LD_STRING D7-Sol1-4
7843: PPUSH
7844: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7848: LD_EXP 4
7852: PPUSH
7853: LD_STRING D7-Lisa-4
7855: PPUSH
7856: CALL_OW 88
// end ; DialogueOff ;
7860: CALL_OW 7
// end ;
7864: PPOPN 1
7866: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7867: LD_EXP 8
7871: PPUSH
7872: CALL_OW 303
7876: PUSH
7877: LD_EXP 21
7881: PUSH
7882: LD_INT 3
7884: EQUAL
7885: AND
7886: IFFALSE 7900
7888: GO 7890
7890: DISABLE
// begin enable ;
7891: ENABLE
// mikhailStatus = 2 ;
7892: LD_ADDR_EXP 21
7896: PUSH
7897: LD_INT 2
7899: ST_TO_ADDR
// end ;
7900: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7901: LD_EXP 8
7905: PPUSH
7906: LD_INT 17
7908: PPUSH
7909: CALL_OW 308
7913: PUSH
7914: LD_EXP 8
7918: PPUSH
7919: CALL_OW 255
7923: PUSH
7924: LD_INT 6
7926: EQUAL
7927: AND
7928: IFFALSE 7961
7930: GO 7932
7932: DISABLE
// begin if not mikhailInBase = 3 then
7933: LD_EXP 22
7937: PUSH
7938: LD_INT 3
7940: EQUAL
7941: NOT
7942: IFFALSE 7952
// mikhailStatus = 3 ;
7944: LD_ADDR_EXP 21
7948: PUSH
7949: LD_INT 3
7951: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
7952: LD_EXP 8
7956: PPUSH
7957: CALL_OW 64
// end ;
7961: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
7962: LD_EXP 21
7966: PUSH
7967: LD_INT 3
7969: EQUAL
7970: PUSH
7971: LD_EXP 8
7975: PPUSH
7976: CALL_OW 255
7980: PUSH
7981: LD_INT 6
7983: EQUAL
7984: AND
7985: IFFALSE 8151
7987: GO 7989
7989: DISABLE
7990: LD_INT 0
7992: PPUSH
7993: PPUSH
// begin enable ;
7994: ENABLE
// if IsOk ( Mikhail ) then
7995: LD_EXP 8
7999: PPUSH
8000: CALL_OW 302
8004: IFFALSE 8151
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8006: LD_ADDR_VAR 0 2
8010: PUSH
8011: LD_EXP 8
8015: PPUSH
8016: LD_INT 22
8018: PUSH
8019: LD_INT 1
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PUSH
8026: LD_INT 21
8028: PUSH
8029: LD_INT 1
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: PPUSH
8040: CALL_OW 69
8044: PPUSH
8045: CALL 10034 0 2
8049: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8050: LD_VAR 0 2
8054: PPUSH
8055: LD_EXP 8
8059: PPUSH
8060: CALL_OW 296
8064: PUSH
8065: LD_INT 8
8067: LESS
8068: IFFALSE 8151
// begin if GetSex ( attacker ) = sex_male then
8070: LD_VAR 0 2
8074: PPUSH
8075: CALL_OW 258
8079: PUSH
8080: LD_INT 1
8082: EQUAL
8083: IFFALSE 8119
// begin disable ;
8085: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8086: LD_VAR 0 2
8090: PPUSH
8091: LD_STRING D7a-Sol1-1
8093: PPUSH
8094: CALL_OW 88
// wait ( 0 0$2 ) ;
8098: LD_INT 70
8100: PPUSH
8101: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8105: LD_VAR 0 2
8109: PPUSH
8110: LD_STRING D7a-Sol1-1a
8112: PPUSH
8113: CALL_OW 88
// end else
8117: GO 8151
// begin disable ;
8119: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8120: LD_VAR 0 2
8124: PPUSH
8125: LD_STRING D7a-FSol1-1
8127: PPUSH
8128: CALL_OW 88
// wait ( 0 0$2 ) ;
8132: LD_INT 70
8134: PPUSH
8135: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8139: LD_VAR 0 2
8143: PPUSH
8144: LD_STRING D7a-FSol1-1a
8146: PPUSH
8147: CALL_OW 88
// end ; end ; end ; end ;
8151: PPOPN 2
8153: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8154: LD_EXP 27
8158: PUSH
8159: LD_INT 1
8161: EQUAL
8162: PUSH
8163: LD_INT 22
8165: PPUSH
8166: LD_INT 22
8168: PUSH
8169: LD_INT 3
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 21
8178: PUSH
8179: LD_INT 1
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PPUSH
8190: CALL_OW 70
8194: PUSH
8195: LD_INT 2
8197: GREATER
8198: AND
8199: PUSH
8200: LD_INT 22
8202: PPUSH
8203: LD_INT 22
8205: PUSH
8206: LD_INT 1
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: PUSH
8213: LD_INT 2
8215: PUSH
8216: LD_INT 21
8218: PUSH
8219: LD_INT 1
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: PUSH
8226: LD_INT 59
8228: PUSH
8229: EMPTY
8230: LIST
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PPUSH
8241: CALL_OW 70
8245: PUSH
8246: LD_INT 0
8248: EQUAL
8249: AND
8250: IFFALSE 8265
8252: GO 8254
8254: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8255: LD_INT 1
8257: PPUSH
8258: LD_INT 3
8260: PPUSH
8261: CALL_OW 235
// end ;
8265: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8266: LD_EXP 29
8270: PUSH
8271: LD_INT 1
8273: EQUAL
8274: PUSH
8275: LD_INT 22
8277: PUSH
8278: LD_INT 0
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: PUSH
8285: LD_INT 25
8287: PUSH
8288: LD_INT 14
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PPUSH
8299: CALL_OW 69
8303: PUSH
8304: LD_INT 0
8306: EQUAL
8307: AND
8308: IFFALSE 8402
8310: GO 8312
8312: DISABLE
8313: LD_INT 0
8315: PPUSH
8316: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8317: LD_ADDR_VAR 0 2
8321: PUSH
8322: LD_INT 22
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 21
8334: PUSH
8335: LD_INT 1
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: LD_INT 23
8344: PUSH
8345: LD_INT 1
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: LIST
8356: PPUSH
8357: CALL_OW 69
8361: ST_TO_ADDR
// for i in tmp do
8362: LD_ADDR_VAR 0 1
8366: PUSH
8367: LD_VAR 0 2
8371: PUSH
8372: FOR_IN
8373: IFFALSE 8400
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8375: LD_VAR 0 1
8379: PPUSH
8380: LD_INT 1
8382: PPUSH
8383: LD_INT 4
8385: PPUSH
8386: CALL_OW 12
8390: PPUSH
8391: LD_INT 300
8393: PPUSH
8394: CALL_OW 492
// end ;
8398: GO 8372
8400: POP
8401: POP
// end ; end_of_file
8402: PPOPN 2
8404: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8405: LD_INT 0
8407: PPUSH
8408: PPUSH
8409: PPUSH
8410: PPUSH
// for i = 1 to count do
8411: LD_ADDR_VAR 0 8
8415: PUSH
8416: DOUBLE
8417: LD_INT 1
8419: DEC
8420: ST_TO_ADDR
8421: LD_VAR 0 6
8425: PUSH
8426: FOR_TO
8427: IFFALSE 8508
// begin uc_side = side ;
8429: LD_ADDR_OWVAR 20
8433: PUSH
8434: LD_VAR 0 1
8438: ST_TO_ADDR
// uc_nation = nation ;
8439: LD_ADDR_OWVAR 21
8443: PUSH
8444: LD_VAR 0 2
8448: ST_TO_ADDR
// hc_gallery =  ;
8449: LD_ADDR_OWVAR 33
8453: PUSH
8454: LD_STRING 
8456: ST_TO_ADDR
// hc_name =  ;
8457: LD_ADDR_OWVAR 26
8461: PUSH
8462: LD_STRING 
8464: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8465: LD_INT 0
8467: PPUSH
8468: LD_VAR 0 5
8472: PPUSH
8473: LD_VAR 0 4
8477: PPUSH
8478: CALL_OW 380
// un = CreateHuman ;
8482: LD_ADDR_VAR 0 10
8486: PUSH
8487: CALL_OW 44
8491: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8492: LD_VAR 0 10
8496: PPUSH
8497: LD_VAR 0 3
8501: PPUSH
8502: CALL_OW 52
// end ;
8506: GO 8426
8508: POP
8509: POP
// end ;
8510: LD_VAR 0 7
8514: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8515: LD_INT 0
8517: PPUSH
8518: PPUSH
8519: PPUSH
// uc_side := GetSide ( b ) ;
8520: LD_ADDR_OWVAR 20
8524: PUSH
8525: LD_VAR 0 2
8529: PPUSH
8530: CALL_OW 255
8534: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8535: LD_ADDR_OWVAR 21
8539: PUSH
8540: LD_VAR 0 2
8544: PPUSH
8545: CALL_OW 248
8549: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8550: LD_INT 0
8552: PPUSH
8553: LD_INT 1
8555: PPUSH
8556: LD_VAR 0 1
8560: PPUSH
8561: CALL_OW 380
// un = CreateHuman ;
8565: LD_ADDR_VAR 0 4
8569: PUSH
8570: CALL_OW 44
8574: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8575: LD_ADDR_VAR 0 5
8579: PUSH
8580: LD_VAR 0 2
8584: PPUSH
8585: CALL_OW 254
8589: PUSH
8590: LD_INT 3
8592: MINUS
8593: ST_TO_ADDR
// if dir < 0 then
8594: LD_VAR 0 5
8598: PUSH
8599: LD_INT 0
8601: LESS
8602: IFFALSE 8618
// dir := 6 + dir ;
8604: LD_ADDR_VAR 0 5
8608: PUSH
8609: LD_INT 6
8611: PUSH
8612: LD_VAR 0 5
8616: PLUS
8617: ST_TO_ADDR
// SetDir ( un , dir ) ;
8618: LD_VAR 0 4
8622: PPUSH
8623: LD_VAR 0 5
8627: PPUSH
8628: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8632: LD_VAR 0 4
8636: PPUSH
8637: LD_VAR 0 2
8641: PPUSH
8642: CALL_OW 52
// end ;
8646: LD_VAR 0 3
8650: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8651: LD_INT 0
8653: PPUSH
8654: PPUSH
8655: PPUSH
8656: PPUSH
8657: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8658: LD_ADDR_VAR 0 7
8662: PUSH
8663: LD_INT 22
8665: PUSH
8666: LD_VAR 0 1
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 25
8677: PUSH
8678: LD_INT 2
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PUSH
8685: LD_INT 24
8687: PUSH
8688: LD_INT 1000
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: LIST
8699: PPUSH
8700: CALL_OW 69
8704: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8705: LD_ADDR_VAR 0 5
8709: PUSH
8710: LD_VAR 0 3
8714: PPUSH
8715: LD_INT 22
8717: PUSH
8718: LD_VAR 0 1
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 21
8729: PUSH
8730: LD_INT 3
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: LD_INT 3
8739: PUSH
8740: LD_INT 24
8742: PUSH
8743: LD_INT 1000
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: LIST
8758: PUSH
8759: EMPTY
8760: LIST
8761: PPUSH
8762: CALL_OW 70
8766: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8767: LD_VAR 0 5
8771: PUSH
8772: LD_INT 0
8774: GREATER
8775: PUSH
8776: LD_VAR 0 7
8780: PUSH
8781: LD_INT 0
8783: GREATER
8784: AND
8785: IFFALSE 8851
// begin for i in engineerOk_list do
8787: LD_ADDR_VAR 0 6
8791: PUSH
8792: LD_VAR 0 7
8796: PUSH
8797: FOR_IN
8798: IFFALSE 8849
// begin for j in buildings_list do
8800: LD_ADDR_VAR 0 8
8804: PUSH
8805: LD_VAR 0 5
8809: PUSH
8810: FOR_IN
8811: IFFALSE 8845
// begin AddComExitBuilding ( i ) ;
8813: LD_VAR 0 6
8817: PPUSH
8818: CALL_OW 182
// wait ( 0 0$1 ) ;
8822: LD_INT 35
8824: PPUSH
8825: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8829: LD_VAR 0 6
8833: PPUSH
8834: LD_VAR 0 8
8838: PPUSH
8839: CALL_OW 190
// end ;
8843: GO 8810
8845: POP
8846: POP
// end ;
8847: GO 8797
8849: POP
8850: POP
// end ; if buildings_list = 0 then
8851: LD_VAR 0 5
8855: PUSH
8856: LD_INT 0
8858: EQUAL
8859: IFFALSE 8892
// begin for i in engineerOK_list do
8861: LD_ADDR_VAR 0 6
8865: PUSH
8866: LD_VAR 0 7
8870: PUSH
8871: FOR_IN
8872: IFFALSE 8890
// begin ComEnterUnit ( i , building ) ;
8874: LD_VAR 0 6
8878: PPUSH
8879: LD_VAR 0 2
8883: PPUSH
8884: CALL_OW 120
// end ;
8888: GO 8871
8890: POP
8891: POP
// end ; end ;
8892: LD_VAR 0 4
8896: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8897: LD_INT 0
8899: PPUSH
8900: PPUSH
8901: PPUSH
8902: PPUSH
8903: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
8904: LD_ADDR_VAR 0 6
8908: PUSH
8909: LD_INT 22
8911: PUSH
8912: LD_VAR 0 1
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: LD_INT 25
8923: PUSH
8924: LD_INT 4
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 24
8933: PUSH
8934: LD_INT 250
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: LIST
8945: PPUSH
8946: CALL_OW 69
8950: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
8951: LD_ADDR_VAR 0 9
8955: PUSH
8956: LD_VAR 0 3
8960: PPUSH
8961: LD_INT 22
8963: PUSH
8964: LD_VAR 0 1
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PUSH
8973: LD_INT 21
8975: PUSH
8976: LD_INT 1
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 3
8985: PUSH
8986: LD_INT 24
8988: PUSH
8989: LD_INT 650
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: LIST
9004: PPUSH
9005: CALL_OW 70
9009: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9010: LD_VAR 0 9
9014: PUSH
9015: LD_INT 0
9017: GREATER
9018: PUSH
9019: LD_VAR 0 6
9023: PUSH
9024: LD_INT 0
9026: GREATER
9027: AND
9028: IFFALSE 9155
// begin for i = 1 to damageUnits do
9030: LD_ADDR_VAR 0 7
9034: PUSH
9035: DOUBLE
9036: LD_INT 1
9038: DEC
9039: ST_TO_ADDR
9040: LD_VAR 0 9
9044: PUSH
9045: FOR_TO
9046: IFFALSE 9070
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9048: LD_VAR 0 9
9052: PUSH
9053: LD_VAR 0 7
9057: ARRAY
9058: PPUSH
9059: LD_VAR 0 2
9063: PPUSH
9064: CALL_OW 113
9068: GO 9045
9070: POP
9071: POP
// for i in sci_list do
9072: LD_ADDR_VAR 0 7
9076: PUSH
9077: LD_VAR 0 6
9081: PUSH
9082: FOR_IN
9083: IFFALSE 9151
// begin ComExitBuilding ( i ) ;
9085: LD_VAR 0 7
9089: PPUSH
9090: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9094: LD_ADDR_VAR 0 8
9098: PUSH
9099: LD_VAR 0 2
9103: PPUSH
9104: LD_INT 22
9106: PUSH
9107: LD_VAR 0 1
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PPUSH
9116: CALL_OW 70
9120: PUSH
9121: FOR_IN
9122: IFFALSE 9147
// begin AddComHeal ( i , j ) ;
9124: LD_VAR 0 7
9128: PPUSH
9129: LD_VAR 0 8
9133: PPUSH
9134: CALL_OW 188
// wait ( 1 1$0 ) ;
9138: LD_INT 2100
9140: PPUSH
9141: CALL_OW 67
// end ;
9145: GO 9121
9147: POP
9148: POP
// end ;
9149: GO 9082
9151: POP
9152: POP
// end else
9153: GO 9169
// begin AddComEnterUnit ( sci_list , build ) ;
9155: LD_VAR 0 6
9159: PPUSH
9160: LD_VAR 0 4
9164: PPUSH
9165: CALL_OW 180
// end ; end ;
9169: LD_VAR 0 5
9173: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9174: LD_INT 0
9176: PPUSH
9177: PPUSH
9178: PPUSH
9179: PPUSH
9180: PPUSH
9181: PPUSH
9182: PPUSH
9183: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9184: LD_ADDR_VAR 0 7
9188: PUSH
9189: LD_VAR 0 3
9193: PPUSH
9194: LD_INT 22
9196: PUSH
9197: LD_VAR 0 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: LD_INT 21
9208: PUSH
9209: LD_INT 2
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 24
9218: PUSH
9219: LD_INT 550
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: LD_INT 34
9228: PUSH
9229: LD_INT 46
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: PPUSH
9242: CALL_OW 70
9246: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9247: LD_ADDR_VAR 0 8
9251: PUSH
9252: LD_VAR 0 3
9256: PPUSH
9257: LD_INT 22
9259: PUSH
9260: LD_VAR 0 1
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 21
9271: PUSH
9272: LD_INT 2
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 34
9281: PUSH
9282: LD_INT 46
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 3
9291: PUSH
9292: LD_INT 24
9294: PUSH
9295: LD_INT 550
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 70
9316: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9317: LD_ADDR_VAR 0 9
9321: PUSH
9322: LD_VAR 0 2
9326: PPUSH
9327: LD_INT 22
9329: PUSH
9330: LD_VAR 0 1
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 21
9341: PUSH
9342: LD_INT 2
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: LD_INT 34
9351: PUSH
9352: LD_INT 46
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 24
9361: PUSH
9362: LD_INT 1000
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 58
9371: PUSH
9372: EMPTY
9373: LIST
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: PPUSH
9382: CALL_OW 70
9386: ST_TO_ADDR
// for i in damageVehicle_list do
9387: LD_ADDR_VAR 0 5
9391: PUSH
9392: LD_VAR 0 8
9396: PUSH
9397: FOR_IN
9398: IFFALSE 9417
// mechanicInside_list = UnitsInside ( i ) ;
9400: LD_ADDR_VAR 0 10
9404: PUSH
9405: LD_VAR 0 5
9409: PPUSH
9410: CALL_OW 313
9414: ST_TO_ADDR
9415: GO 9397
9417: POP
9418: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9419: LD_ADDR_VAR 0 11
9423: PUSH
9424: LD_VAR 0 2
9428: PPUSH
9429: LD_INT 22
9431: PUSH
9432: LD_VAR 0 1
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: LD_INT 25
9443: PUSH
9444: LD_INT 3
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: PPUSH
9455: CALL_OW 70
9459: ST_TO_ADDR
// if damageVehicle_list > 0 then
9460: LD_VAR 0 8
9464: PUSH
9465: LD_INT 0
9467: GREATER
9468: IFFALSE 9541
// begin for i in damageVehicle_list do
9470: LD_ADDR_VAR 0 5
9474: PUSH
9475: LD_VAR 0 8
9479: PUSH
9480: FOR_IN
9481: IFFALSE 9539
// begin for j in mechanicInside_list do
9483: LD_ADDR_VAR 0 6
9487: PUSH
9488: LD_VAR 0 10
9492: PUSH
9493: FOR_IN
9494: IFFALSE 9535
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9496: LD_VAR 0 8
9500: PPUSH
9501: LD_VAR 0 2
9505: PPUSH
9506: CALL_OW 113
// AddComExitVehicle ( j ) ;
9510: LD_VAR 0 6
9514: PPUSH
9515: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9519: LD_VAR 0 6
9523: PPUSH
9524: LD_VAR 0 5
9528: PPUSH
9529: CALL_OW 189
// end ;
9533: GO 9493
9535: POP
9536: POP
// end ;
9537: GO 9480
9539: POP
9540: POP
// end ; if emptyVehicle_list > 0 then
9541: LD_VAR 0 9
9545: PUSH
9546: LD_INT 0
9548: GREATER
9549: IFFALSE 9599
// begin for i in emptyVehicle_list do
9551: LD_ADDR_VAR 0 5
9555: PUSH
9556: LD_VAR 0 9
9560: PUSH
9561: FOR_IN
9562: IFFALSE 9597
// begin for j in mechanicOutside_list do
9564: LD_ADDR_VAR 0 6
9568: PUSH
9569: LD_VAR 0 11
9573: PUSH
9574: FOR_IN
9575: IFFALSE 9593
// begin AddComEnterUnit ( j , i ) ;
9577: LD_VAR 0 6
9581: PPUSH
9582: LD_VAR 0 5
9586: PPUSH
9587: CALL_OW 180
// end ;
9591: GO 9574
9593: POP
9594: POP
// end ;
9595: GO 9561
9597: POP
9598: POP
// end ; if VehicleOK_list > 0 then
9599: LD_VAR 0 7
9603: PUSH
9604: LD_INT 0
9606: GREATER
9607: IFFALSE 9641
// begin for i in VehicleOK_list do
9609: LD_ADDR_VAR 0 5
9613: PUSH
9614: LD_VAR 0 7
9618: PUSH
9619: FOR_IN
9620: IFFALSE 9639
// ComAgressiveMove ( i , 110 , 29 ) ;
9622: LD_VAR 0 5
9626: PPUSH
9627: LD_INT 110
9629: PPUSH
9630: LD_INT 29
9632: PPUSH
9633: CALL_OW 114
9637: GO 9619
9639: POP
9640: POP
// end ; end ;
9641: LD_VAR 0 4
9645: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9646: LD_INT 0
9648: PPUSH
9649: PPUSH
9650: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9651: LD_VAR 0 1
9655: PPUSH
9656: LD_INT 22
9658: PUSH
9659: LD_VAR 0 2
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PUSH
9668: LD_INT 2
9670: PUSH
9671: LD_INT 21
9673: PUSH
9674: LD_INT 2
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 21
9683: PUSH
9684: LD_INT 1
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: LIST
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PPUSH
9700: CALL_OW 70
9704: PUSH
9705: LD_VAR 0 5
9709: GREATER
9710: IFFALSE 9842
// begin for i in defendersList do
9712: LD_ADDR_VAR 0 7
9716: PUSH
9717: LD_VAR 0 3
9721: PUSH
9722: FOR_IN
9723: IFFALSE 9838
// begin AddComExitBuilding ( i ) ;
9725: LD_VAR 0 7
9729: PPUSH
9730: CALL_OW 182
// wait ( 0 0$1 ) ;
9734: LD_INT 35
9736: PPUSH
9737: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9741: LD_ADDR_VAR 0 8
9745: PUSH
9746: LD_VAR 0 1
9750: PPUSH
9751: LD_INT 22
9753: PUSH
9754: LD_VAR 0 2
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: LD_INT 2
9765: PUSH
9766: LD_INT 21
9768: PUSH
9769: LD_INT 2
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 21
9778: PUSH
9779: LD_INT 1
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PPUSH
9795: CALL_OW 70
9799: PUSH
9800: FOR_IN
9801: IFFALSE 9834
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9803: LD_VAR 0 7
9807: PPUSH
9808: LD_VAR 0 8
9812: PPUSH
9813: CALL_OW 250
9817: PPUSH
9818: LD_VAR 0 8
9822: PPUSH
9823: CALL_OW 251
9827: PPUSH
9828: CALL_OW 174
9832: GO 9800
9834: POP
9835: POP
// end ;
9836: GO 9722
9838: POP
9839: POP
// end else
9840: GO 9873
// begin for i in defendersList do
9842: LD_ADDR_VAR 0 7
9846: PUSH
9847: LD_VAR 0 3
9851: PUSH
9852: FOR_IN
9853: IFFALSE 9871
// ComEnterUnit ( i , build ) ;
9855: LD_VAR 0 7
9859: PPUSH
9860: LD_VAR 0 4
9864: PPUSH
9865: CALL_OW 120
9869: GO 9852
9871: POP
9872: POP
// end ; end ;
9873: LD_VAR 0 6
9877: RET
// export function RussianTrap ; var i ; begin
9878: LD_INT 0
9880: PPUSH
9881: PPUSH
// if GetSide ( Brian ) = 4 then
9882: LD_EXP 6
9886: PPUSH
9887: CALL_OW 255
9891: PUSH
9892: LD_INT 4
9894: EQUAL
9895: IFFALSE 9918
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9897: LD_EXP 6
9901: PUSH
9902: LD_EXP 7
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PPUSH
9911: LD_INT 0
9913: PPUSH
9914: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
9918: LD_ADDR_VAR 0 2
9922: PUSH
9923: LD_INT 22
9925: PUSH
9926: LD_INT 3
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: LD_INT 21
9935: PUSH
9936: LD_INT 1
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 69
9951: PUSH
9952: FOR_IN
9953: IFFALSE 10027
// begin ComExitBuilding ( i ) ;
9955: LD_VAR 0 2
9959: PPUSH
9960: CALL_OW 122
// wait ( 0 0$1 ) ;
9964: LD_INT 35
9966: PPUSH
9967: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
9971: LD_VAR 0 2
9975: PPUSH
9976: LD_INT 120
9978: PPUSH
9979: LD_INT 56
9981: PPUSH
9982: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
9986: LD_VAR 0 2
9990: PPUSH
9991: LD_INT 111
9993: PPUSH
9994: LD_INT 37
9996: PPUSH
9997: CALL_OW 174
// AddComCrawl ( i ) ;
10001: LD_VAR 0 2
10005: PPUSH
10006: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10010: LD_VAR 0 2
10014: PPUSH
10015: LD_INT 109
10017: PPUSH
10018: LD_INT 30
10020: PPUSH
10021: CALL_OW 174
// end ;
10025: GO 9952
10027: POP
10028: POP
// end ;
10029: LD_VAR 0 1
10033: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10034: LD_INT 0
10036: PPUSH
10037: PPUSH
10038: PPUSH
10039: PPUSH
10040: PPUSH
// nearest_dist = 1000 ;
10041: LD_ADDR_VAR 0 4
10045: PUSH
10046: LD_INT 1000
10048: ST_TO_ADDR
// nearest_un = un ;
10049: LD_ADDR_VAR 0 5
10053: PUSH
10054: LD_VAR 0 1
10058: ST_TO_ADDR
// for sold in units do
10059: LD_ADDR_VAR 0 6
10063: PUSH
10064: LD_VAR 0 2
10068: PUSH
10069: FOR_IN
10070: IFFALSE 10126
// begin dist = GetDistUnits ( un , sold ) ;
10072: LD_ADDR_VAR 0 7
10076: PUSH
10077: LD_VAR 0 1
10081: PPUSH
10082: LD_VAR 0 6
10086: PPUSH
10087: CALL_OW 296
10091: ST_TO_ADDR
// if dist < nearest_dist then
10092: LD_VAR 0 7
10096: PUSH
10097: LD_VAR 0 4
10101: LESS
10102: IFFALSE 10124
// begin nearest_un = sold ;
10104: LD_ADDR_VAR 0 5
10108: PUSH
10109: LD_VAR 0 6
10113: ST_TO_ADDR
// nearest_dist = dist ;
10114: LD_ADDR_VAR 0 4
10118: PUSH
10119: LD_VAR 0 7
10123: ST_TO_ADDR
// end ; end ;
10124: GO 10069
10126: POP
10127: POP
// result := nearest_un ;
10128: LD_ADDR_VAR 0 3
10132: PUSH
10133: LD_VAR 0 5
10137: ST_TO_ADDR
// end ;
10138: LD_VAR 0 3
10142: RET
// export function PrepareDifficulty ; begin
10143: LD_INT 0
10145: PPUSH
// if Difficulty = 1 then
10146: LD_OWVAR 67
10150: PUSH
10151: LD_INT 1
10153: EQUAL
10154: IFFALSE 10217
// begin RemoveUnit ( brw2 ) ;
10156: LD_INT 9
10158: PPUSH
10159: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10163: LD_INT 30
10165: PPUSH
10166: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10170: LD_INT 52
10172: PPUSH
10173: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10177: LD_INT 63
10179: PPUSH
10180: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10184: LD_INT 5
10186: PUSH
10187: LD_INT 4
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PPUSH
10194: LD_INT 60
10196: PPUSH
10197: CALL_OW 240
// RuSoldMinLevel = 0 ;
10201: LD_ADDR_EXP 13
10205: PUSH
10206: LD_INT 0
10208: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10209: LD_ADDR_EXP 14
10213: PUSH
10214: LD_INT 1
10216: ST_TO_ADDR
// end ; if Difficulty = 2 then
10217: LD_OWVAR 67
10221: PUSH
10222: LD_INT 2
10224: EQUAL
10225: IFFALSE 10267
// begin RemoveUnit ( brw4 ) ;
10227: LD_INT 52
10229: PPUSH
10230: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10234: LD_INT 5
10236: PUSH
10237: LD_INT 4
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PPUSH
10244: LD_INT 50
10246: PPUSH
10247: CALL_OW 240
// RuSoldMinLevel = 1 ;
10251: LD_ADDR_EXP 13
10255: PUSH
10256: LD_INT 1
10258: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10259: LD_ADDR_EXP 14
10263: PUSH
10264: LD_INT 2
10266: ST_TO_ADDR
// end ; if Difficulty = 3 then
10267: LD_OWVAR 67
10271: PUSH
10272: LD_INT 3
10274: EQUAL
10275: IFFALSE 10310
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10277: LD_INT 5
10279: PUSH
10280: LD_INT 4
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PPUSH
10287: LD_INT 40
10289: PPUSH
10290: CALL_OW 240
// RuSoldMinLevel = 2 ;
10294: LD_ADDR_EXP 13
10298: PUSH
10299: LD_INT 2
10301: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10302: LD_ADDR_EXP 14
10306: PUSH
10307: LD_INT 3
10309: ST_TO_ADDR
// end ; end ;
10310: LD_VAR 0 1
10314: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10315: LD_INT 0
10317: PPUSH
10318: PPUSH
10319: PPUSH
// tmp = [ ] ;
10320: LD_ADDR_VAR 0 5
10324: PUSH
10325: EMPTY
10326: ST_TO_ADDR
// if not vehicles then
10327: LD_VAR 0 1
10331: NOT
10332: IFFALSE 10336
// exit ;
10334: GO 10453
// for i in vehicles do
10336: LD_ADDR_VAR 0 4
10340: PUSH
10341: LD_VAR 0 1
10345: PUSH
10346: FOR_IN
10347: IFFALSE 10437
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10349: LD_ADDR_VAR 0 5
10353: PUSH
10354: LD_VAR 0 5
10358: PPUSH
10359: LD_INT 1
10361: PPUSH
10362: LD_VAR 0 4
10366: PPUSH
10367: CALL_OW 265
10371: PUSH
10372: LD_VAR 0 4
10376: PPUSH
10377: CALL_OW 262
10381: PUSH
10382: LD_VAR 0 4
10386: PPUSH
10387: CALL_OW 263
10391: PUSH
10392: LD_VAR 0 4
10396: PPUSH
10397: CALL_OW 264
10401: PUSH
10402: LD_VAR 0 4
10406: PPUSH
10407: CALL_OW 261
10411: PUSH
10412: LD_VAR 0 4
10416: PPUSH
10417: CALL_OW 256
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: PPUSH
10430: CALL_OW 2
10434: ST_TO_ADDR
// end ;
10435: GO 10346
10437: POP
10438: POP
// SaveVariable ( tmp , ident ) ;
10439: LD_VAR 0 5
10443: PPUSH
10444: LD_VAR 0 2
10448: PPUSH
10449: CALL_OW 39
// end ; end_of_file
10453: LD_VAR 0 3
10457: RET
// export function PrepareHeroes ; begin
10458: LD_INT 0
10460: PPUSH
// uc_side = 1 ;
10461: LD_ADDR_OWVAR 20
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10469: LD_ADDR_EXP 1
10473: PUSH
10474: LD_STRING 01_JMM
10476: PPUSH
10477: CALL_OW 34
10481: ST_TO_ADDR
// SetLives ( JMM , LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ) ;
10482: LD_EXP 1
10486: PPUSH
10487: LD_STRING 01_JMMLifePoints_1
10489: PPUSH
10490: LD_INT 1000
10492: PPUSH
10493: CALL_OW 30
10497: PPUSH
10498: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10502: LD_ADDR_EXP 9
10506: PUSH
10507: LD_STRING Powell
10509: PPUSH
10510: CALL_OW 25
10514: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10515: LD_ADDR_EXP 2
10519: PUSH
10520: LD_STRING 01_Bobby
10522: PPUSH
10523: CALL_OW 34
10527: ST_TO_ADDR
// if Bobby then
10528: LD_EXP 2
10532: IFFALSE 10554
// SetLives ( Bobby , LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ) ;
10534: LD_EXP 2
10538: PPUSH
10539: LD_STRING 01_BobbyLifePoints_1
10541: PPUSH
10542: LD_INT 1000
10544: PPUSH
10545: CALL_OW 30
10549: PPUSH
10550: CALL_OW 234
// Cyrus = CreateCharacter ( 01_Cyrus ) ;
10554: LD_ADDR_EXP 3
10558: PUSH
10559: LD_STRING 01_Cyrus
10561: PPUSH
10562: CALL_OW 34
10566: ST_TO_ADDR
// if Cyrus then
10567: LD_EXP 3
10571: IFFALSE 10593
// SetLives ( Cyrus , LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ) ;
10573: LD_EXP 3
10577: PPUSH
10578: LD_STRING 01_CyrusLifePoints_1
10580: PPUSH
10581: LD_INT 1000
10583: PPUSH
10584: CALL_OW 30
10588: PPUSH
10589: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
10593: LD_ADDR_EXP 5
10597: PUSH
10598: LD_STRING Khatam
10600: PPUSH
10601: CALL_OW 25
10605: ST_TO_ADDR
// uc_side = 4 ;
10606: LD_ADDR_OWVAR 20
10610: PUSH
10611: LD_INT 4
10613: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10614: LD_ADDR_EXP 4
10618: PUSH
10619: LD_STRING Lisa
10621: PPUSH
10622: CALL_OW 25
10626: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10627: LD_EXP 1
10631: PPUSH
10632: LD_INT 3
10634: PPUSH
10635: LD_INT 0
10637: PPUSH
10638: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10642: LD_EXP 2
10646: PPUSH
10647: LD_INT 3
10649: PPUSH
10650: LD_INT 0
10652: PPUSH
10653: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10657: LD_EXP 3
10661: PPUSH
10662: LD_INT 3
10664: PPUSH
10665: LD_INT 0
10667: PPUSH
10668: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10672: LD_EXP 4
10676: PPUSH
10677: LD_INT 5
10679: PPUSH
10680: LD_INT 0
10682: PPUSH
10683: CALL_OW 49
// ComCrawl ( Lisa ) ;
10687: LD_EXP 4
10691: PPUSH
10692: CALL_OW 137
// end ;
10696: LD_VAR 0 1
10700: RET
// export function PrepareLisSquad ; var i , un ; begin
10701: LD_INT 0
10703: PPUSH
10704: PPUSH
10705: PPUSH
// uc_side = 4 ;
10706: LD_ADDR_OWVAR 20
10710: PUSH
10711: LD_INT 4
10713: ST_TO_ADDR
// uc_nation = 1 ;
10714: LD_ADDR_OWVAR 21
10718: PUSH
10719: LD_INT 1
10721: ST_TO_ADDR
// hc_class := 2 ;
10722: LD_ADDR_OWVAR 28
10726: PUSH
10727: LD_INT 2
10729: ST_TO_ADDR
// hc_sex := sex_male ;
10730: LD_ADDR_OWVAR 27
10734: PUSH
10735: LD_INT 1
10737: ST_TO_ADDR
// hc_gallery :=  ;
10738: LD_ADDR_OWVAR 33
10742: PUSH
10743: LD_STRING 
10745: ST_TO_ADDR
// hc_name :=  ;
10746: LD_ADDR_OWVAR 26
10750: PUSH
10751: LD_STRING 
10753: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10754: LD_ADDR_OWVAR 30
10758: PUSH
10759: LD_INT 0
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: LD_INT 0
10767: PUSH
10768: LD_INT 0
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
10777: LD_ADDR_OWVAR 31
10781: PUSH
10782: LD_INT 1
10784: PUSH
10785: LD_INT 2
10787: PUSH
10788: LD_INT 0
10790: PUSH
10791: LD_INT 0
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: ST_TO_ADDR
// un := CreateHuman ;
10800: LD_ADDR_VAR 0 3
10804: PUSH
10805: CALL_OW 44
10809: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10810: LD_VAR 0 3
10814: PPUSH
10815: LD_INT 6
10817: PPUSH
10818: LD_INT 0
10820: PPUSH
10821: CALL_OW 49
// hc_sex := sex_female ;
10825: LD_ADDR_OWVAR 27
10829: PUSH
10830: LD_INT 2
10832: ST_TO_ADDR
// hc_gallery :=  ;
10833: LD_ADDR_OWVAR 33
10837: PUSH
10838: LD_STRING 
10840: ST_TO_ADDR
// hc_name :=  ;
10841: LD_ADDR_OWVAR 26
10845: PUSH
10846: LD_STRING 
10848: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
10849: LD_ADDR_OWVAR 30
10853: PUSH
10854: LD_INT 0
10856: PUSH
10857: LD_INT 0
10859: PUSH
10860: LD_INT 0
10862: PUSH
10863: LD_INT 1
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
10872: LD_ADDR_OWVAR 31
10876: PUSH
10877: LD_INT 0
10879: PUSH
10880: LD_INT 1
10882: PUSH
10883: LD_INT 0
10885: PUSH
10886: LD_INT 1
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: ST_TO_ADDR
// un := CreateHuman ;
10895: LD_ADDR_VAR 0 3
10899: PUSH
10900: CALL_OW 44
10904: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10905: LD_VAR 0 3
10909: PPUSH
10910: LD_INT 6
10912: PPUSH
10913: LD_INT 0
10915: PPUSH
10916: CALL_OW 49
// InitHc ;
10920: CALL_OW 19
// end ;
10924: LD_VAR 0 1
10928: RET
// export function PrepareOtherAmericans ; begin
10929: LD_INT 0
10931: PPUSH
// uc_side = 4 ;
10932: LD_ADDR_OWVAR 20
10936: PUSH
10937: LD_INT 4
10939: ST_TO_ADDR
// uc_nation = 1 ;
10940: LD_ADDR_OWVAR 21
10944: PUSH
10945: LD_INT 1
10947: ST_TO_ADDR
// hc_gallery =  ;
10948: LD_ADDR_OWVAR 33
10952: PUSH
10953: LD_STRING 
10955: ST_TO_ADDR
// hc_name = Brian Garvin ;
10956: LD_ADDR_OWVAR 26
10960: PUSH
10961: LD_STRING Brian Garvin
10963: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
10964: LD_INT 1
10966: PPUSH
10967: LD_INT 1
10969: PPUSH
10970: LD_INT 1
10972: PPUSH
10973: LD_INT 2
10975: PPUSH
10976: CALL_OW 12
10980: PPUSH
10981: CALL_OW 380
// Brian = CreateHuman ;
10985: LD_ADDR_EXP 6
10989: PUSH
10990: CALL_OW 44
10994: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
10995: LD_EXP 6
10999: PPUSH
11000: LD_INT 10
11002: PPUSH
11003: LD_INT 0
11005: PPUSH
11006: CALL_OW 49
// hc_name = Jerry White ;
11010: LD_ADDR_OWVAR 26
11014: PUSH
11015: LD_STRING Jerry White
11017: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11018: LD_INT 1
11020: PPUSH
11021: LD_INT 3
11023: PPUSH
11024: LD_INT 1
11026: PPUSH
11027: LD_INT 2
11029: PPUSH
11030: CALL_OW 12
11034: PPUSH
11035: CALL_OW 380
// Jerry = CreateHuman ;
11039: LD_ADDR_EXP 7
11043: PUSH
11044: CALL_OW 44
11048: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11049: LD_EXP 7
11053: PPUSH
11054: LD_INT 10
11056: PPUSH
11057: LD_INT 0
11059: PPUSH
11060: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11064: LD_EXP 6
11068: PUSH
11069: LD_EXP 7
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 140
// end ;
11082: LD_VAR 0 1
11086: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11087: LD_INT 0
11089: PPUSH
11090: PPUSH
11091: PPUSH
// for i = 1 to 6 do
11092: LD_ADDR_VAR 0 2
11096: PUSH
11097: DOUBLE
11098: LD_INT 1
11100: DEC
11101: ST_TO_ADDR
11102: LD_INT 6
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11200
// begin uc_side = 4 ;
11108: LD_ADDR_OWVAR 20
11112: PUSH
11113: LD_INT 4
11115: ST_TO_ADDR
// uc_nation = 1 ;
11116: LD_ADDR_OWVAR 21
11120: PUSH
11121: LD_INT 1
11123: ST_TO_ADDR
// hc_gallery =  ;
11124: LD_ADDR_OWVAR 33
11128: PUSH
11129: LD_STRING 
11131: ST_TO_ADDR
// hc_name =  ;
11132: LD_ADDR_OWVAR 26
11136: PUSH
11137: LD_STRING 
11139: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11140: LD_INT 0
11142: PPUSH
11143: LD_INT 1
11145: PPUSH
11146: LD_INT 4
11148: PPUSH
11149: CALL_OW 12
11153: PPUSH
11154: LD_INT 1
11156: PPUSH
11157: CALL_OW 380
// un = CreateHuman ;
11161: LD_ADDR_VAR 0 3
11165: PUSH
11166: CALL_OW 44
11170: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11171: LD_VAR 0 3
11175: PPUSH
11176: LD_INT 16
11178: PPUSH
11179: LD_INT 0
11181: PPUSH
11182: CALL_OW 49
// SetLives ( un , 1 ) ;
11186: LD_VAR 0 3
11190: PPUSH
11191: LD_INT 1
11193: PPUSH
11194: CALL_OW 234
// end ;
11198: GO 11105
11200: POP
11201: POP
// DyingSold = CreateHuman ;
11202: LD_ADDR_EXP 33
11206: PUSH
11207: CALL_OW 44
11211: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11212: LD_EXP 33
11216: PPUSH
11217: LD_INT 16
11219: PPUSH
11220: LD_INT 0
11222: PPUSH
11223: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11227: LD_EXP 33
11231: PPUSH
11232: LD_INT 250
11234: PPUSH
11235: CALL_OW 234
// end ; end_of_file
11239: LD_VAR 0 1
11243: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11244: LD_INT 0
11246: PPUSH
11247: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) ;
11248: LD_ADDR_VAR 0 2
11252: PUSH
11253: LD_INT 22
11255: PUSH
11256: LD_INT 1
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: LD_INT 23
11265: PUSH
11266: LD_INT 1
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PUSH
11273: LD_INT 25
11275: PUSH
11276: LD_INT 2
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: LIST
11287: PPUSH
11288: CALL_OW 69
11292: ST_TO_ADDR
// uc_side = 6 ;
11293: LD_ADDR_OWVAR 20
11297: PUSH
11298: LD_INT 6
11300: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11301: LD_ADDR_EXP 8
11305: PUSH
11306: LD_STRING Mikhail
11308: PPUSH
11309: CALL_OW 25
11313: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
11314: LD_EXP 8
11318: PPUSH
11319: LD_VAR 0 2
11323: PUSH
11324: LD_INT 1
11326: ARRAY
11327: PPUSH
11328: CALL_OW 250
11332: PPUSH
11333: LD_VAR 0 2
11337: PUSH
11338: LD_INT 1
11340: ARRAY
11341: PPUSH
11342: CALL_OW 251
11346: PPUSH
11347: LD_INT 3
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: CALL_OW 50
// end ;
11357: LD_VAR 0 1
11361: RET
// export function PrepareRussianCommander ; begin
11362: LD_INT 0
11364: PPUSH
// uc_side = 3 ;
11365: LD_ADDR_OWVAR 20
11369: PUSH
11370: LD_INT 3
11372: ST_TO_ADDR
// uc_nation = 3 ;
11373: LD_ADDR_OWVAR 21
11377: PUSH
11378: LD_INT 3
11380: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11381: LD_ADDR_EXP 19
11385: PUSH
11386: LD_STRING Natasza
11388: PPUSH
11389: CALL_OW 25
11393: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11394: LD_EXP 19
11398: PPUSH
11399: LD_INT 24
11401: PPUSH
11402: LD_INT 0
11404: PPUSH
11405: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11409: LD_EXP 19
11413: PPUSH
11414: LD_INT 56
11416: PPUSH
11417: LD_INT 16
11419: PPUSH
11420: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11424: LD_ADDR_EXP 24
11428: PUSH
11429: LD_EXP 24
11433: PUSH
11434: LD_EXP 19
11438: ADD
11439: ST_TO_ADDR
// end ;
11440: LD_VAR 0 1
11444: RET
// export function PrepareSouthBase ; var i , un ; begin
11445: LD_INT 0
11447: PPUSH
11448: PPUSH
11449: PPUSH
// for i = 1 to 2 do
11450: LD_ADDR_VAR 0 2
11454: PUSH
11455: DOUBLE
11456: LD_INT 1
11458: DEC
11459: ST_TO_ADDR
11460: LD_INT 2
11462: PUSH
11463: FOR_TO
11464: IFFALSE 11573
// begin uc_side = 3 ;
11466: LD_ADDR_OWVAR 20
11470: PUSH
11471: LD_INT 3
11473: ST_TO_ADDR
// uc_nation = 3 ;
11474: LD_ADDR_OWVAR 21
11478: PUSH
11479: LD_INT 3
11481: ST_TO_ADDR
// hc_gallery =  ;
11482: LD_ADDR_OWVAR 33
11486: PUSH
11487: LD_STRING 
11489: ST_TO_ADDR
// hc_name =  ;
11490: LD_ADDR_OWVAR 26
11494: PUSH
11495: LD_STRING 
11497: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11498: LD_INT 1
11500: PPUSH
11501: LD_INT 1
11503: PPUSH
11504: LD_EXP 13
11508: PPUSH
11509: LD_EXP 14
11513: PPUSH
11514: CALL_OW 12
11518: PPUSH
11519: CALL_OW 380
// hc_importance = 0 ;
11523: LD_ADDR_OWVAR 32
11527: PUSH
11528: LD_INT 0
11530: ST_TO_ADDR
// un = CreateHuman ;
11531: LD_ADDR_VAR 0 3
11535: PUSH
11536: CALL_OW 44
11540: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11541: LD_VAR 0 3
11545: PPUSH
11546: LD_INT 11
11548: PPUSH
11549: LD_INT 0
11551: PPUSH
11552: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11556: LD_VAR 0 3
11560: PPUSH
11561: LD_INT 111
11563: PPUSH
11564: LD_INT 38
11566: PPUSH
11567: CALL_OW 118
// end ;
11571: GO 11463
11573: POP
11574: POP
// for i = 1 to Difficulty do
11575: LD_ADDR_VAR 0 2
11579: PUSH
11580: DOUBLE
11581: LD_INT 1
11583: DEC
11584: ST_TO_ADDR
11585: LD_OWVAR 67
11589: PUSH
11590: FOR_TO
11591: IFFALSE 11692
// begin uc_side = 3 ;
11593: LD_ADDR_OWVAR 20
11597: PUSH
11598: LD_INT 3
11600: ST_TO_ADDR
// uc_nation = 3 ;
11601: LD_ADDR_OWVAR 21
11605: PUSH
11606: LD_INT 3
11608: ST_TO_ADDR
// hc_gallery =  ;
11609: LD_ADDR_OWVAR 33
11613: PUSH
11614: LD_STRING 
11616: ST_TO_ADDR
// hc_name =  ;
11617: LD_ADDR_OWVAR 26
11621: PUSH
11622: LD_STRING 
11624: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11625: LD_INT 0
11627: PPUSH
11628: LD_INT 3
11630: PPUSH
11631: LD_EXP 13
11635: PPUSH
11636: LD_EXP 14
11640: PPUSH
11641: CALL_OW 12
11645: PPUSH
11646: CALL_OW 380
// un = CreateHuman ;
11650: LD_ADDR_VAR 0 3
11654: PUSH
11655: CALL_OW 44
11659: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
11660: LD_VAR 0 3
11664: PPUSH
11665: LD_INT 12
11667: PPUSH
11668: LD_INT 0
11670: PPUSH
11671: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
11675: LD_VAR 0 3
11679: PPUSH
11680: LD_INT 111
11682: PPUSH
11683: LD_INT 28
11685: PPUSH
11686: CALL_OW 118
// end ;
11690: GO 11590
11692: POP
11693: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
11694: LD_INT 3
11696: PPUSH
11697: LD_INT 3
11699: PPUSH
11700: LD_INT 33
11702: PPUSH
11703: LD_EXP 13
11707: PPUSH
11708: LD_EXP 14
11712: PPUSH
11713: CALL_OW 12
11717: PPUSH
11718: LD_INT 1
11720: PPUSH
11721: LD_INT 1
11723: PUSH
11724: LD_INT 1
11726: PPUSH
11727: LD_INT 2
11729: PPUSH
11730: CALL_OW 12
11734: PUSH
11735: LD_INT 1
11737: PPUSH
11738: LD_INT 2
11740: PPUSH
11741: CALL_OW 12
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: LIST
11750: PUSH
11751: LD_OWVAR 67
11755: ARRAY
11756: PPUSH
11757: CALL 8405 0 6
// for i in UnitsInside ( arm2 ) do
11761: LD_ADDR_VAR 0 2
11765: PUSH
11766: LD_INT 33
11768: PPUSH
11769: CALL_OW 313
11773: PUSH
11774: FOR_IN
11775: IFFALSE 11795
// southBaseDefenders = southBaseDefenders ^ i ;
11777: LD_ADDR_EXP 25
11781: PUSH
11782: LD_EXP 25
11786: PUSH
11787: LD_VAR 0 2
11791: ADD
11792: ST_TO_ADDR
11793: GO 11774
11795: POP
11796: POP
// end ;
11797: LD_VAR 0 1
11801: RET
// export function PrepareNorthBase ; var i , un ; begin
11802: LD_INT 0
11804: PPUSH
11805: PPUSH
11806: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
11807: LD_ADDR_VAR 0 2
11811: PUSH
11812: DOUBLE
11813: LD_INT 1
11815: DEC
11816: ST_TO_ADDR
11817: LD_INT 1
11819: PPUSH
11820: LD_INT 2
11822: PPUSH
11823: CALL_OW 12
11827: PUSH
11828: LD_INT 2
11830: PPUSH
11831: LD_INT 3
11833: PPUSH
11834: CALL_OW 12
11838: PUSH
11839: LD_INT 3
11841: PPUSH
11842: LD_INT 4
11844: PPUSH
11845: CALL_OW 12
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: LIST
11854: PUSH
11855: LD_OWVAR 67
11859: ARRAY
11860: PUSH
11861: FOR_TO
11862: IFFALSE 11948
// begin uc_side = 3 ;
11864: LD_ADDR_OWVAR 20
11868: PUSH
11869: LD_INT 3
11871: ST_TO_ADDR
// uc_nation = 3 ;
11872: LD_ADDR_OWVAR 21
11876: PUSH
11877: LD_INT 3
11879: ST_TO_ADDR
// hc_gallery =  ;
11880: LD_ADDR_OWVAR 33
11884: PUSH
11885: LD_STRING 
11887: ST_TO_ADDR
// hc_name =  ;
11888: LD_ADDR_OWVAR 26
11892: PUSH
11893: LD_STRING 
11895: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11896: LD_INT 0
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: LD_EXP 13
11906: PPUSH
11907: LD_EXP 14
11911: PPUSH
11912: CALL_OW 12
11916: PPUSH
11917: CALL_OW 380
// un = CreateHuman ;
11921: LD_ADDR_VAR 0 3
11925: PUSH
11926: CALL_OW 44
11930: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
11931: LD_VAR 0 3
11935: PPUSH
11936: LD_INT 14
11938: PPUSH
11939: LD_INT 0
11941: PPUSH
11942: CALL_OW 49
// end ;
11946: GO 11861
11948: POP
11949: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
11950: LD_INT 3
11952: PPUSH
11953: LD_INT 3
11955: PPUSH
11956: LD_INT 2
11958: PPUSH
11959: LD_EXP 13
11963: PPUSH
11964: LD_EXP 14
11968: PPUSH
11969: CALL_OW 12
11973: PPUSH
11974: LD_INT 1
11976: PPUSH
11977: LD_INT 1
11979: PPUSH
11980: LD_INT 2
11982: PPUSH
11983: CALL_OW 12
11987: PUSH
11988: LD_INT 1
11990: PPUSH
11991: LD_INT 3
11993: PPUSH
11994: CALL_OW 12
11998: PUSH
11999: LD_INT 1
12001: PPUSH
12002: LD_INT 3
12004: PPUSH
12005: CALL_OW 12
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: LIST
12014: PUSH
12015: LD_OWVAR 67
12019: ARRAY
12020: PPUSH
12021: CALL 8405 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12025: LD_INT 3
12027: PPUSH
12028: LD_INT 3
12030: PPUSH
12031: LD_INT 23
12033: PPUSH
12034: LD_EXP 13
12038: PPUSH
12039: LD_EXP 14
12043: PPUSH
12044: CALL_OW 12
12048: PPUSH
12049: LD_INT 4
12051: PPUSH
12052: LD_INT 0
12054: PUSH
12055: LD_INT 1
12057: PUSH
12058: LD_INT 2
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: PUSH
12066: LD_OWVAR 67
12070: ARRAY
12071: PPUSH
12072: CALL 8405 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12076: LD_INT 3
12078: PPUSH
12079: LD_INT 3
12081: PPUSH
12082: LD_INT 1
12084: PPUSH
12085: LD_EXP 13
12089: PPUSH
12090: LD_EXP 14
12094: PPUSH
12095: CALL_OW 12
12099: PPUSH
12100: LD_INT 2
12102: PPUSH
12103: LD_INT 1
12105: PUSH
12106: LD_INT 2
12108: PUSH
12109: LD_INT 2
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: LD_OWVAR 67
12121: ARRAY
12122: PPUSH
12123: CALL 8405 0 6
// for i in UnitsInside ( arm1 ) do
12127: LD_ADDR_VAR 0 2
12131: PUSH
12132: LD_INT 2
12134: PPUSH
12135: CALL_OW 313
12139: PUSH
12140: FOR_IN
12141: IFFALSE 12161
// northBaseDefenders = northBaseDefenders ^ i ;
12143: LD_ADDR_EXP 24
12147: PUSH
12148: LD_EXP 24
12152: PUSH
12153: LD_VAR 0 2
12157: ADD
12158: ST_TO_ADDR
12159: GO 12140
12161: POP
12162: POP
// end ;
12163: LD_VAR 0 1
12167: RET
// export function PrepareOtherRussians ; var i , un ; begin
12168: LD_INT 0
12170: PPUSH
12171: PPUSH
12172: PPUSH
// for i = 1 to 2 do
12173: LD_ADDR_VAR 0 2
12177: PUSH
12178: DOUBLE
12179: LD_INT 1
12181: DEC
12182: ST_TO_ADDR
12183: LD_INT 2
12185: PUSH
12186: FOR_TO
12187: IFFALSE 12288
// begin uc_side = 3 ;
12189: LD_ADDR_OWVAR 20
12193: PUSH
12194: LD_INT 3
12196: ST_TO_ADDR
// uc_nation = 3 ;
12197: LD_ADDR_OWVAR 21
12201: PUSH
12202: LD_INT 3
12204: ST_TO_ADDR
// hc_gallery =  ;
12205: LD_ADDR_OWVAR 33
12209: PUSH
12210: LD_STRING 
12212: ST_TO_ADDR
// hc_name =  ;
12213: LD_ADDR_OWVAR 26
12217: PUSH
12218: LD_STRING 
12220: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12221: LD_INT 0
12223: PPUSH
12224: LD_INT 1
12226: PPUSH
12227: LD_EXP 13
12231: PPUSH
12232: LD_EXP 14
12236: PPUSH
12237: CALL_OW 12
12241: PPUSH
12242: CALL_OW 380
// un = CreateHuman ;
12246: LD_ADDR_VAR 0 3
12250: PUSH
12251: CALL_OW 44
12255: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12256: LD_VAR 0 3
12260: PPUSH
12261: LD_INT 9
12263: PPUSH
12264: LD_INT 0
12266: PPUSH
12267: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12271: LD_VAR 0 3
12275: PPUSH
12276: LD_INT 80
12278: PPUSH
12279: LD_INT 73
12281: PPUSH
12282: CALL_OW 118
// end ;
12286: GO 12186
12288: POP
12289: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12290: LD_ADDR_VAR 0 2
12294: PUSH
12295: LD_INT 22
12297: PUSH
12298: LD_INT 3
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 30
12307: PUSH
12308: LD_INT 31
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PPUSH
12319: CALL_OW 69
12323: PUSH
12324: FOR_IN
12325: IFFALSE 12353
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12327: LD_EXP 13
12331: PPUSH
12332: LD_EXP 14
12336: PPUSH
12337: CALL_OW 12
12341: PPUSH
12342: LD_VAR 0 2
12346: PPUSH
12347: CALL 8515 0 2
12351: GO 12324
12353: POP
12354: POP
// end ;
12355: LD_VAR 0 1
12359: RET
// export function PrepareCargoBays ; begin
12360: LD_INT 0
12362: PPUSH
// uc_side = 3 ;
12363: LD_ADDR_OWVAR 20
12367: PUSH
12368: LD_INT 3
12370: ST_TO_ADDR
// uc_nation = 3 ;
12371: LD_ADDR_OWVAR 21
12375: PUSH
12376: LD_INT 3
12378: ST_TO_ADDR
// vc_engine = 1 ;
12379: LD_ADDR_OWVAR 39
12383: PUSH
12384: LD_INT 1
12386: ST_TO_ADDR
// vc_control = 1 ;
12387: LD_ADDR_OWVAR 38
12391: PUSH
12392: LD_INT 1
12394: ST_TO_ADDR
// vc_weapon = 51 ;
12395: LD_ADDR_OWVAR 40
12399: PUSH
12400: LD_INT 51
12402: ST_TO_ADDR
// vc_chassis = 22 ;
12403: LD_ADDR_OWVAR 37
12407: PUSH
12408: LD_INT 22
12410: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12411: LD_ADDR_EXP 15
12415: PUSH
12416: CALL_OW 45
12420: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12421: LD_ADDR_EXP 16
12425: PUSH
12426: CALL_OW 45
12430: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12431: LD_EXP 15
12435: PPUSH
12436: LD_INT 13
12438: PPUSH
12439: LD_INT 0
12441: PPUSH
12442: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12446: LD_EXP 16
12450: PPUSH
12451: LD_INT 13
12453: PPUSH
12454: LD_INT 0
12456: PPUSH
12457: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12461: LD_EXP 15
12465: PPUSH
12466: LD_INT 2
12468: PPUSH
12469: LD_INT 70
12471: PUSH
12472: LD_INT 50
12474: PUSH
12475: LD_INT 30
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: LIST
12482: PUSH
12483: LD_OWVAR 67
12487: ARRAY
12488: PPUSH
12489: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12493: LD_EXP 16
12497: PPUSH
12498: LD_INT 2
12500: PPUSH
12501: LD_INT 70
12503: PUSH
12504: LD_INT 50
12506: PUSH
12507: LD_INT 30
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: PUSH
12515: LD_OWVAR 67
12519: ARRAY
12520: PPUSH
12521: CALL_OW 291
// hc_gallery =  ;
12525: LD_ADDR_OWVAR 33
12529: PUSH
12530: LD_STRING 
12532: ST_TO_ADDR
// hc_name =  ;
12533: LD_ADDR_OWVAR 26
12537: PUSH
12538: LD_STRING 
12540: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12541: LD_INT 1
12543: PPUSH
12544: LD_INT 3
12546: PPUSH
12547: LD_INT 1
12549: PPUSH
12550: LD_INT 2
12552: PPUSH
12553: CALL_OW 12
12557: PPUSH
12558: CALL_OW 380
// driver1 = CreateHuman ;
12562: LD_ADDR_EXP 17
12566: PUSH
12567: CALL_OW 44
12571: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12572: LD_EXP 17
12576: PPUSH
12577: LD_EXP 15
12581: PPUSH
12582: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12586: LD_ADDR_OWVAR 26
12590: PUSH
12591: LD_STRING Nikolai Andreyev
12593: ST_TO_ADDR
// driver2 = CreateHuman ;
12594: LD_ADDR_EXP 18
12598: PUSH
12599: CALL_OW 44
12603: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12604: LD_EXP 18
12608: PPUSH
12609: LD_EXP 16
12613: PPUSH
12614: CALL_OW 52
// end ;
12618: LD_VAR 0 1
12622: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12623: LD_INT 0
12625: PPUSH
12626: PPUSH
12627: PPUSH
12628: PPUSH
12629: PPUSH
12630: PPUSH
12631: PPUSH
// uc_side = 3 ;
12632: LD_ADDR_OWVAR 20
12636: PUSH
12637: LD_INT 3
12639: ST_TO_ADDR
// uc_nation = 3 ;
12640: LD_ADDR_OWVAR 21
12644: PUSH
12645: LD_INT 3
12647: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
12648: LD_ADDR_VAR 0 4
12652: PUSH
12653: DOUBLE
12654: LD_INT 1
12656: DEC
12657: ST_TO_ADDR
12658: LD_VAR 0 1
12662: PUSH
12663: LD_INT 1
12665: PPUSH
12666: LD_INT 3
12668: PPUSH
12669: CALL_OW 12
12673: PLUS
12674: PUSH
12675: FOR_TO
12676: IFFALSE 12853
// begin vc_engine = 1 ;
12678: LD_ADDR_OWVAR 39
12682: PUSH
12683: LD_INT 1
12685: ST_TO_ADDR
// vc_control = 1 ;
12686: LD_ADDR_OWVAR 38
12690: PUSH
12691: LD_INT 1
12693: ST_TO_ADDR
// vc_weapon = 42 ;
12694: LD_ADDR_OWVAR 40
12698: PUSH
12699: LD_INT 42
12701: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
12702: LD_ADDR_OWVAR 37
12706: PUSH
12707: LD_INT 21
12709: PUSH
12710: LD_INT 22
12712: PUSH
12713: LD_INT 22
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: LIST
12720: PUSH
12721: LD_OWVAR 67
12725: ARRAY
12726: ST_TO_ADDR
// veh = CreateVehicle ;
12727: LD_ADDR_VAR 0 5
12731: PUSH
12732: CALL_OW 45
12736: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12737: LD_VAR 0 5
12741: PPUSH
12742: LD_VAR 0 2
12746: PPUSH
12747: LD_INT 0
12749: PPUSH
12750: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
12754: LD_ADDR_EXP 26
12758: PUSH
12759: LD_EXP 26
12763: PUSH
12764: LD_VAR 0 5
12768: ADD
12769: ST_TO_ADDR
// hc_gallery =  ;
12770: LD_ADDR_OWVAR 33
12774: PUSH
12775: LD_STRING 
12777: ST_TO_ADDR
// hc_name =  ;
12778: LD_ADDR_OWVAR 26
12782: PUSH
12783: LD_STRING 
12785: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12786: LD_INT 0
12788: PPUSH
12789: LD_INT 3
12791: PPUSH
12792: LD_EXP 13
12796: PPUSH
12797: LD_EXP 14
12801: PPUSH
12802: CALL_OW 12
12806: PPUSH
12807: CALL_OW 380
// un = CreateHuman ;
12811: LD_ADDR_VAR 0 6
12815: PUSH
12816: CALL_OW 44
12820: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12821: LD_VAR 0 6
12825: PPUSH
12826: LD_VAR 0 5
12830: PPUSH
12831: CALL_OW 52
// attackGroup = attackGroup ^ un ;
12835: LD_ADDR_EXP 26
12839: PUSH
12840: LD_EXP 26
12844: PUSH
12845: LD_VAR 0 6
12849: ADD
12850: ST_TO_ADDR
// end ;
12851: GO 12675
12853: POP
12854: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12855: LD_INT 0
12857: PPUSH
12858: LD_INT 2
12860: PPUSH
12861: LD_EXP 13
12865: PPUSH
12866: LD_EXP 14
12870: PPUSH
12871: CALL_OW 12
12875: PPUSH
12876: CALL_OW 380
// un = CreateHuman ;
12880: LD_ADDR_VAR 0 6
12884: PUSH
12885: CALL_OW 44
12889: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
12890: LD_ADDR_VAR 0 4
12894: PUSH
12895: DOUBLE
12896: LD_INT 1
12898: DEC
12899: ST_TO_ADDR
12900: LD_VAR 0 1
12904: PUSH
12905: LD_INT 2
12907: PUSH
12908: LD_INT 2
12910: MUL
12911: PLUS
12912: PUSH
12913: FOR_TO
12914: IFFALSE 13002
// begin hc_gallery =  ;
12916: LD_ADDR_OWVAR 33
12920: PUSH
12921: LD_STRING 
12923: ST_TO_ADDR
// hc_name =  ;
12924: LD_ADDR_OWVAR 26
12928: PUSH
12929: LD_STRING 
12931: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12932: LD_INT 1
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: LD_EXP 13
12942: PPUSH
12943: LD_EXP 14
12947: PPUSH
12948: CALL_OW 12
12952: PPUSH
12953: CALL_OW 380
// un = CreateHuman ;
12957: LD_ADDR_VAR 0 6
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
12967: LD_VAR 0 6
12971: PPUSH
12972: LD_VAR 0 2
12976: PPUSH
12977: LD_INT 0
12979: PPUSH
12980: CALL_OW 49
// attackGroup = attackGroup ^ un ;
12984: LD_ADDR_EXP 26
12988: PUSH
12989: LD_EXP 26
12993: PUSH
12994: LD_VAR 0 6
12998: ADD
12999: ST_TO_ADDR
// end ;
13000: GO 12913
13002: POP
13003: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13004: LD_ADDR_VAR 0 7
13008: PUSH
13009: LD_INT 26
13011: PPUSH
13012: LD_INT 22
13014: PUSH
13015: LD_INT 3
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: LD_INT 21
13024: PUSH
13025: LD_INT 1
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 26
13034: PUSH
13035: LD_INT 1
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: LIST
13046: PPUSH
13047: CALL_OW 70
13051: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13052: LD_VAR 0 7
13056: PUSH
13057: LD_INT 1
13059: ARRAY
13060: PPUSH
13061: LD_STRING D9-Rus3-1
13063: PPUSH
13064: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13068: LD_VAR 0 7
13072: PUSH
13073: LD_INT 2
13075: ARRAY
13076: PPUSH
13077: LD_STRING D9-Russ-1
13079: PPUSH
13080: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13084: LD_INT 35
13086: PPUSH
13087: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13091: LD_ADDR_VAR 0 4
13095: PUSH
13096: LD_INT 26
13098: PPUSH
13099: LD_INT 22
13101: PUSH
13102: LD_INT 3
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: PPUSH
13112: CALL_OW 70
13116: PUSH
13117: FOR_IN
13118: IFFALSE 13290
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13120: LD_ADDR_VAR 0 8
13124: PUSH
13125: LD_INT 22
13127: PUSH
13128: LD_INT 1
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PPUSH
13135: CALL_OW 69
13139: PPUSH
13140: LD_VAR 0 4
13144: PPUSH
13145: CALL_OW 74
13149: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13150: LD_ADDR_VAR 0 9
13154: PUSH
13155: LD_INT 22
13157: PUSH
13158: LD_INT 1
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 2
13167: PUSH
13168: LD_INT 59
13170: PUSH
13171: EMPTY
13172: LIST
13173: PUSH
13174: LD_INT 21
13176: PUSH
13177: LD_INT 1
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: LD_INT 21
13186: PUSH
13187: LD_INT 2
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: EMPTY
13205: LIST
13206: PPUSH
13207: CALL_OW 69
13211: PPUSH
13212: LD_VAR 0 4
13216: PPUSH
13217: CALL_OW 74
13221: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13222: LD_VAR 0 4
13226: PPUSH
13227: LD_VAR 0 8
13231: PPUSH
13232: CALL_OW 296
13236: PUSH
13237: LD_INT 8
13239: PLUS
13240: PUSH
13241: LD_VAR 0 4
13245: PPUSH
13246: LD_VAR 0 9
13250: PPUSH
13251: CALL_OW 296
13255: LESS
13256: IFFALSE 13274
// begin ComAttackUnit ( i , target1 ) ;
13258: LD_VAR 0 4
13262: PPUSH
13263: LD_VAR 0 8
13267: PPUSH
13268: CALL_OW 115
// end else
13272: GO 13288
// begin ComAttackUnit ( i , target2 ) ;
13274: LD_VAR 0 4
13278: PPUSH
13279: LD_VAR 0 9
13283: PPUSH
13284: CALL_OW 115
// end ; end ;
13288: GO 13117
13290: POP
13291: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13292: LD_INT 26
13294: PPUSH
13295: LD_INT 22
13297: PUSH
13298: LD_INT 3
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 2
13307: PUSH
13308: LD_INT 21
13310: PUSH
13311: LD_INT 1
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 21
13320: PUSH
13321: LD_INT 2
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 59
13330: PUSH
13331: EMPTY
13332: LIST
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PPUSH
13344: CALL_OW 70
13348: PUSH
13349: LD_INT 0
13351: EQUAL
13352: IFFALSE 13084
// end ; end_of_file
13354: LD_VAR 0 3
13358: RET
// every 0 0$1 do
13359: GO 13361
13361: DISABLE
// begin enable ;
13362: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13363: LD_INT 3
13365: PPUSH
13366: LD_INT 1
13368: PPUSH
13369: LD_INT 22
13371: PPUSH
13372: CALL 8651 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13376: LD_INT 3
13378: PPUSH
13379: LD_INT 20
13381: PPUSH
13382: LD_INT 22
13384: PPUSH
13385: LD_INT 23
13387: PPUSH
13388: CALL 8897 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13392: LD_INT 3
13394: PPUSH
13395: LD_INT 21
13397: PPUSH
13398: LD_INT 23
13400: PPUSH
13401: CALL 9174 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13405: LD_INT 22
13407: PPUSH
13408: LD_INT 1
13410: PPUSH
13411: LD_EXP 24
13415: PPUSH
13416: LD_INT 2
13418: PPUSH
13419: LD_INT 3
13421: PPUSH
13422: CALL 9646 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13426: LD_INT 23
13428: PPUSH
13429: LD_INT 1
13431: PPUSH
13432: LD_EXP 25
13436: PPUSH
13437: LD_INT 33
13439: PPUSH
13440: LD_INT 1
13442: PPUSH
13443: CALL 9646 0 5
// end ; end_of_file
13447: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13448: LD_VAR 0 1
13452: PPUSH
13453: CALL_OW 255
13457: PUSH
13458: LD_INT 1
13460: EQUAL
13461: PUSH
13462: LD_VAR 0 1
13466: PPUSH
13467: CALL_OW 247
13471: PUSH
13472: LD_INT 1
13474: EQUAL
13475: AND
13476: IFFALSE 13492
// deadsCounter = deadsCounter + 1 ;
13478: LD_ADDR_EXP 30
13482: PUSH
13483: LD_EXP 30
13487: PUSH
13488: LD_INT 1
13490: PLUS
13491: ST_TO_ADDR
// end ;
13492: PPOPN 1
13494: END
// on Command ( comandid ) do var i , j , tmp ;
13495: LD_INT 0
13497: PPUSH
13498: PPUSH
13499: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13500: LD_ADDR_VAR 0 2
13504: PUSH
13505: LD_INT 22
13507: PUSH
13508: LD_INT 1
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: LD_INT 21
13517: PUSH
13518: LD_INT 2
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PPUSH
13529: CALL_OW 69
13533: PUSH
13534: FOR_IN
13535: IFFALSE 13660
// begin if GetTaskList ( i ) > 0 then
13537: LD_VAR 0 2
13541: PPUSH
13542: CALL_OW 437
13546: PUSH
13547: LD_INT 0
13549: GREATER
13550: IFFALSE 13658
// begin for j = 1 to GetTaskList ( i ) do
13552: LD_ADDR_VAR 0 3
13556: PUSH
13557: DOUBLE
13558: LD_INT 1
13560: DEC
13561: ST_TO_ADDR
13562: LD_VAR 0 2
13566: PPUSH
13567: CALL_OW 437
13571: PUSH
13572: FOR_TO
13573: IFFALSE 13656
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13575: LD_ADDR_VAR 0 4
13579: PUSH
13580: LD_VAR 0 2
13584: PPUSH
13585: CALL_OW 437
13589: PUSH
13590: LD_VAR 0 3
13594: ARRAY
13595: PUSH
13596: LD_INT 4
13598: ARRAY
13599: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
13600: LD_VAR 0 4
13604: PPUSH
13605: CALL_OW 255
13609: PUSH
13610: LD_INT 3
13612: EQUAL
13613: PUSH
13614: LD_VAR 0 4
13618: PPUSH
13619: CALL_OW 247
13623: PUSH
13624: LD_INT 2
13626: EQUAL
13627: AND
13628: PUSH
13629: LD_VAR 0 4
13633: PPUSH
13634: CALL_OW 264
13638: PUSH
13639: LD_INT 51
13641: EQUAL
13642: AND
13643: IFFALSE 13654
// ComStop ( i ) ;
13645: LD_VAR 0 2
13649: PPUSH
13650: CALL_OW 141
// end ;
13654: GO 13572
13656: POP
13657: POP
// end ; end ;
13658: GO 13534
13660: POP
13661: POP
// end ; end_of_file
13662: PPOPN 4
13664: END
// every 0 0$1 trigger IsDead ( JMM ) do
13665: LD_EXP 1
13669: PPUSH
13670: CALL_OW 301
13674: IFFALSE 13686
13676: GO 13678
13678: DISABLE
// YouLost ( JMM ) ;
13679: LD_STRING JMM
13681: PPUSH
13682: CALL_OW 104
13686: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
13687: LD_INT 1
13689: PPUSH
13690: CALL_OW 301
13694: PUSH
13695: LD_INT 10
13697: PPUSH
13698: CALL_OW 301
13702: OR
13703: IFFALSE 13715
13705: GO 13707
13707: DISABLE
// YouLost ( DepotDestroyed ) ;
13708: LD_STRING DepotDestroyed
13710: PPUSH
13711: CALL_OW 104
13715: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
13716: LD_INT 22
13718: PUSH
13719: LD_INT 1
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 21
13728: PUSH
13729: LD_INT 1
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 25
13738: PUSH
13739: LD_INT 2
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: PPUSH
13751: CALL_OW 69
13755: PUSH
13756: LD_INT 0
13758: EQUAL
13759: PUSH
13760: LD_INT 22
13762: PUSH
13763: LD_INT 4
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 21
13772: PUSH
13773: LD_INT 1
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: LD_INT 25
13782: PUSH
13783: LD_INT 2
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: PPUSH
13795: CALL_OW 69
13799: PUSH
13800: LD_INT 0
13802: EQUAL
13803: AND
13804: PUSH
13805: LD_INT 1
13807: PPUSH
13808: CALL_OW 255
13812: PUSH
13813: LD_INT 3
13815: EQUAL
13816: AND
13817: PUSH
13818: LD_INT 10
13820: PPUSH
13821: CALL_OW 255
13825: PUSH
13826: LD_INT 3
13828: EQUAL
13829: AND
13830: IFFALSE 13842
13832: GO 13834
13834: DISABLE
// YouLost ( Engineer ) ;
13835: LD_STRING Engineer
13837: PPUSH
13838: CALL_OW 104
13842: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
13843: LD_INT 1
13845: PPUSH
13846: CALL_OW 255
13850: PUSH
13851: LD_INT 3
13853: EQUAL
13854: PUSH
13855: LD_EXP 27
13859: PUSH
13860: LD_INT 1
13862: EQUAL
13863: AND
13864: IFFALSE 13876
13866: GO 13868
13868: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
13869: LD_STRING DepotCaptured
13871: PPUSH
13872: CALL_OW 104
13876: END
// export function PrepareTigers ; var i , un ; begin
13877: LD_INT 0
13879: PPUSH
13880: PPUSH
13881: PPUSH
// for i = 1 to Difficulty do
13882: LD_ADDR_VAR 0 2
13886: PUSH
13887: DOUBLE
13888: LD_INT 1
13890: DEC
13891: ST_TO_ADDR
13892: LD_OWVAR 67
13896: PUSH
13897: FOR_TO
13898: IFFALSE 14033
// begin hc_sex = sex_male ;
13900: LD_ADDR_OWVAR 27
13904: PUSH
13905: LD_INT 1
13907: ST_TO_ADDR
// uc_side = 0 ;
13908: LD_ADDR_OWVAR 20
13912: PUSH
13913: LD_INT 0
13915: ST_TO_ADDR
// uc_nation = nation_nature ;
13916: LD_ADDR_OWVAR 21
13920: PUSH
13921: LD_INT 0
13923: ST_TO_ADDR
// hc_class = class_tiger ;
13924: LD_ADDR_OWVAR 28
13928: PUSH
13929: LD_INT 14
13931: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
13932: LD_ADDR_OWVAR 31
13936: PUSH
13937: LD_EXP 14
13941: PUSH
13942: LD_INT 0
13944: PUSH
13945: LD_INT 0
13947: PUSH
13948: LD_INT 0
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
13957: LD_ADDR_OWVAR 35
13961: PUSH
13962: LD_INT 30
13964: PPUSH
13965: LD_INT 40
13967: PPUSH
13968: CALL_OW 12
13972: PUSH
13973: LD_INT 40
13975: PPUSH
13976: LD_INT 50
13978: PPUSH
13979: CALL_OW 12
13983: PUSH
13984: LD_INT 50
13986: PPUSH
13987: LD_INT 60
13989: PPUSH
13990: CALL_OW 12
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: LIST
13999: PUSH
14000: LD_OWVAR 67
14004: ARRAY
14005: ST_TO_ADDR
// un = CreateHuman ;
14006: LD_ADDR_VAR 0 3
14010: PUSH
14011: CALL_OW 44
14015: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14016: LD_VAR 0 3
14020: PPUSH
14021: LD_INT 27
14023: PPUSH
14024: LD_INT 0
14026: PPUSH
14027: CALL_OW 49
// end ;
14031: GO 13897
14033: POP
14034: POP
// end ; end_of_file
14035: LD_VAR 0 1
14039: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 do
14040: LD_INT 1
14042: PPUSH
14043: CALL_OW 255
14047: PUSH
14048: LD_INT 1
14050: EQUAL
14051: PUSH
14052: LD_INT 10
14054: PPUSH
14055: CALL_OW 255
14059: PUSH
14060: LD_INT 1
14062: EQUAL
14063: AND
14064: PUSH
14065: LD_EXP 20
14069: PUSH
14070: LD_INT 1
14072: EQUAL
14073: AND
14074: IFFALSE 14165
14076: GO 14078
14078: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14079: LD_INT 9450
14081: PUSH
14082: LD_INT 8400
14084: PUSH
14085: LD_INT 6300
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: PUSH
14093: LD_OWVAR 67
14097: ARRAY
14098: PPUSH
14099: CALL_OW 67
// if cargoEscape = 1 then
14103: LD_EXP 20
14107: PUSH
14108: LD_INT 1
14110: EQUAL
14111: IFFALSE 14165
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14113: LD_EXP 9
14117: PPUSH
14118: LD_STRING D6-Pow-1
14120: PPUSH
14121: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14125: LD_EXP 1
14129: PPUSH
14130: LD_STRING D6-JMM-1
14132: PPUSH
14133: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14137: LD_EXP 9
14141: PPUSH
14142: LD_STRING D6-Pow-2
14144: PPUSH
14145: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14149: LD_EXP 1
14153: PPUSH
14154: LD_STRING D6-JMM-2
14156: PPUSH
14157: CALL_OW 88
// FinishMission ;
14161: CALL 14373 0 0
// end ; end ;
14165: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14166: LD_INT 1
14168: PPUSH
14169: CALL_OW 255
14173: PUSH
14174: LD_INT 1
14176: EQUAL
14177: PUSH
14178: LD_INT 10
14180: PPUSH
14181: CALL_OW 255
14185: PUSH
14186: LD_INT 1
14188: EQUAL
14189: AND
14190: PUSH
14191: LD_EXP 20
14195: PUSH
14196: LD_INT 1
14198: GREATER
14199: AND
14200: IFFALSE 14267
14202: GO 14204
14204: DISABLE
14205: LD_INT 0
14207: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14208: LD_INT 11550
14210: PUSH
14211: LD_INT 10500
14213: PUSH
14214: LD_INT 9450
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: LIST
14221: PUSH
14222: LD_OWVAR 67
14226: ARRAY
14227: PPUSH
14228: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14232: LD_INT 1
14234: PUSH
14235: LD_INT 2
14237: PUSH
14238: LD_INT 3
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: LIST
14245: PUSH
14246: LD_OWVAR 67
14250: ARRAY
14251: PPUSH
14252: LD_INT 13
14254: PPUSH
14255: CALL 12623 0 2
// lastBattle = 1 ;
14259: LD_ADDR_EXP 27
14263: PUSH
14264: LD_INT 1
14266: ST_TO_ADDR
// end ;
14267: PPOPN 1
14269: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14270: LD_EXP 27
14274: PUSH
14275: LD_INT 1
14277: EQUAL
14278: PUSH
14279: LD_INT 26
14281: PPUSH
14282: LD_INT 22
14284: PUSH
14285: LD_INT 3
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 21
14294: PUSH
14295: LD_INT 1
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PPUSH
14306: CALL_OW 70
14310: PUSH
14311: LD_INT 0
14313: EQUAL
14314: AND
14315: IFFALSE 14372
14317: GO 14319
14319: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14320: LD_EXP 9
14324: PPUSH
14325: LD_STRING D6-Pow-1
14327: PPUSH
14328: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14332: LD_EXP 1
14336: PPUSH
14337: LD_STRING D6-JMM-1
14339: PPUSH
14340: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14344: LD_EXP 9
14348: PPUSH
14349: LD_STRING D6-Pow-2
14351: PPUSH
14352: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14356: LD_EXP 1
14360: PPUSH
14361: LD_STRING D6-JMM-2
14363: PPUSH
14364: CALL_OW 88
// FinishMission ;
14368: CALL 14373 0 0
// end ;
14372: END
// export function FinishMission ; var tmp ; begin
14373: LD_INT 0
14375: PPUSH
14376: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14377: LD_ADDR_VAR 0 2
14381: PUSH
14382: LD_INT 22
14384: PUSH
14385: LD_INT 1
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: LD_INT 21
14394: PUSH
14395: LD_INT 2
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PUSH
14402: LD_INT 24
14404: PUSH
14405: LD_INT 251
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: LIST
14416: PPUSH
14417: CALL_OW 69
14421: ST_TO_ADDR
// if tmp then
14422: LD_VAR 0 2
14426: IFFALSE 14440
// SaveVehicles ( tmp , 02_tanks_1 ) ;
14428: LD_VAR 0 2
14432: PPUSH
14433: LD_STRING 02_tanks_1
14435: PPUSH
14436: CALL 10315 0 2
// if mikhailStatus = 1 then
14440: LD_EXP 21
14444: PUSH
14445: LD_INT 1
14447: EQUAL
14448: IFFALSE 14462
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
14450: LD_EXP 21
14454: PPUSH
14455: LD_STRING 02_mikhailStatus_1
14457: PPUSH
14458: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
14462: LD_INT 1
14464: PPUSH
14465: CALL_OW 274
14469: PPUSH
14470: LD_INT 1
14472: PPUSH
14473: CALL_OW 275
14477: PPUSH
14478: LD_STRING 02_resources_4
14480: PPUSH
14481: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
14485: LD_INT 1
14487: PPUSH
14488: CALL_OW 274
14492: PPUSH
14493: LD_INT 1
14495: PPUSH
14496: CALL_OW 275
14500: PUSH
14501: LD_INT 200
14503: GREATEREQUAL
14504: IFFALSE 14518
// begin AddMedal ( Cans , 1 ) ;
14506: LD_STRING Cans
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: CALL_OW 101
// end else
14516: GO 14529
// begin AddMedal ( Cans , - 1 ) ;
14518: LD_STRING Cans
14520: PPUSH
14521: LD_INT 1
14523: NEG
14524: PPUSH
14525: CALL_OW 101
// end ; if deadsCounter < 2 then
14529: LD_EXP 30
14533: PUSH
14534: LD_INT 2
14536: LESS
14537: IFFALSE 14551
// begin AddMedal ( Deaths , 1 ) ;
14539: LD_STRING Deaths
14541: PPUSH
14542: LD_INT 1
14544: PPUSH
14545: CALL_OW 101
// end else
14549: GO 14562
// begin AddMedal ( Deaths , - 1 ) ;
14551: LD_STRING Deaths
14553: PPUSH
14554: LD_INT 1
14556: NEG
14557: PPUSH
14558: CALL_OW 101
// end ; if mikhailStatus = 0 then
14562: LD_EXP 21
14566: PUSH
14567: LD_INT 0
14569: EQUAL
14570: IFFALSE 14583
// AddMedal ( Prisoner , - 1 ) ;
14572: LD_STRING Prisoner
14574: PPUSH
14575: LD_INT 1
14577: NEG
14578: PPUSH
14579: CALL_OW 101
// if mikhailStatus = 1 then
14583: LD_EXP 21
14587: PUSH
14588: LD_INT 1
14590: EQUAL
14591: IFFALSE 14603
// AddMedal ( Prisoner , 1 ) ;
14593: LD_STRING Prisoner
14595: PPUSH
14596: LD_INT 1
14598: PPUSH
14599: CALL_OW 101
// if mikhailStatus = 2 then
14603: LD_EXP 21
14607: PUSH
14608: LD_INT 2
14610: EQUAL
14611: IFFALSE 14623
// AddMedal ( Prisoner , 2 ) ;
14613: LD_STRING Prisoner
14615: PPUSH
14616: LD_INT 2
14618: PPUSH
14619: CALL_OW 101
// if mikhailStatus = 3 then
14623: LD_EXP 21
14627: PUSH
14628: LD_INT 3
14630: EQUAL
14631: IFFALSE 14644
// AddMedal ( Prisoner , - 2 ) ;
14633: LD_STRING Prisoner
14635: PPUSH
14636: LD_INT 2
14638: NEG
14639: PPUSH
14640: CALL_OW 101
// GiveMedals ( MAIN ) ;
14644: LD_STRING MAIN
14646: PPUSH
14647: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
14651: LD_INT 22
14653: PUSH
14654: LD_INT 1
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: LD_INT 23
14663: PUSH
14664: LD_INT 1
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PUSH
14671: LD_INT 21
14673: PUSH
14674: LD_INT 1
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: PPUSH
14686: CALL_OW 69
14690: PPUSH
14691: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
14695: LD_EXP 1
14699: PPUSH
14700: LD_EXP 32
14704: PUSH
14705: LD_STRING JMM
14707: STR
14708: PPUSH
14709: CALL_OW 38
// if IsOK ( Bobby ) then
14713: LD_EXP 2
14717: PPUSH
14718: CALL_OW 302
14722: IFFALSE 14742
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
14724: LD_EXP 2
14728: PPUSH
14729: LD_EXP 32
14733: PUSH
14734: LD_STRING Bobby
14736: STR
14737: PPUSH
14738: CALL_OW 38
// if IsOK ( Cyrus ) then
14742: LD_EXP 3
14746: PPUSH
14747: CALL_OW 302
14751: IFFALSE 14771
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
14753: LD_EXP 3
14757: PPUSH
14758: LD_EXP 32
14762: PUSH
14763: LD_STRING Cyrus
14765: STR
14766: PPUSH
14767: CALL_OW 38
// if IsOK ( Lisa ) then
14771: LD_EXP 4
14775: PPUSH
14776: CALL_OW 302
14780: IFFALSE 14800
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
14782: LD_EXP 4
14786: PPUSH
14787: LD_EXP 32
14791: PUSH
14792: LD_STRING Lisa
14794: STR
14795: PPUSH
14796: CALL_OW 38
// if IsOK ( Khatam ) then
14800: LD_EXP 5
14804: PPUSH
14805: CALL_OW 302
14809: IFFALSE 14829
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
14811: LD_EXP 5
14815: PPUSH
14816: LD_EXP 32
14820: PUSH
14821: LD_STRING Khatam
14823: STR
14824: PPUSH
14825: CALL_OW 38
// if IsOK ( Brian ) then
14829: LD_EXP 6
14833: PPUSH
14834: CALL_OW 302
14838: IFFALSE 14858
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
14840: LD_EXP 6
14844: PPUSH
14845: LD_EXP 32
14849: PUSH
14850: LD_STRING Brian
14852: STR
14853: PPUSH
14854: CALL_OW 38
// if IsOk ( Jerry ) then
14858: LD_EXP 7
14862: PPUSH
14863: CALL_OW 302
14867: IFFALSE 14887
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
14869: LD_EXP 7
14873: PPUSH
14874: LD_EXP 32
14878: PUSH
14879: LD_STRING Jerry
14881: STR
14882: PPUSH
14883: CALL_OW 38
// if mikhailStatus = 1 then
14887: LD_EXP 21
14891: PUSH
14892: LD_INT 1
14894: EQUAL
14895: IFFALSE 14915
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
14897: LD_EXP 8
14901: PPUSH
14902: LD_EXP 32
14906: PUSH
14907: LD_STRING Mikhail
14909: STR
14910: PPUSH
14911: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
14915: LD_INT 50
14917: PUSH
14918: EMPTY
14919: LIST
14920: PUSH
14921: LD_INT 22
14923: PUSH
14924: LD_INT 1
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 21
14933: PUSH
14934: LD_INT 1
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: LIST
14945: PPUSH
14946: CALL_OW 69
14950: PUSH
14951: LD_EXP 1
14955: PUSH
14956: LD_EXP 2
14960: PUSH
14961: LD_EXP 3
14965: PUSH
14966: LD_EXP 4
14970: PUSH
14971: LD_EXP 5
14975: PUSH
14976: LD_EXP 6
14980: PUSH
14981: LD_EXP 7
14985: PUSH
14986: LD_EXP 8
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: DIFF
15001: PPUSH
15002: LD_STRING 02_other_survivors
15004: PPUSH
15005: CALL_OW 38
// YouWin ;
15009: CALL_OW 103
// end ;
15013: LD_VAR 0 1
15017: RET
