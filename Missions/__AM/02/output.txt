// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn ; export deadsCounter ; export spotCorpses ; starting begin RuSoldMinLevel = 0 ;
   0: LD_ADDR_EXP 13
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
   8: LD_ADDR_EXP 14
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// hpJMM = 0 ;
  16: LD_ADDR_EXP 10
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpBobby = 0 ;
  24: LD_ADDR_EXP 11
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpCyrus = 0 ;
  32: LD_ADDR_EXP 12
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// cargoEscape = 0 ;
  40: LD_ADDR_EXP 20
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// mikhailStatus = 0 ;
  48: LD_ADDR_EXP 21
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailInBase = 0 ;
  56: LD_ADDR_EXP 22
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailDepot = 0 ;
  64: LD_ADDR_EXP 23
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// cargoRespawn = 0 ;
  72: LD_ADDR_EXP 28
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// lastBattle = 0 ;
  80: LD_ADDR_EXP 27
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// deadsCounter = 0 ;
  88: LD_ADDR_EXP 29
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// spotCorpses = 0 ;
  96: LD_ADDR_EXP 30
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 104: LD_ADDR_EXP 25
 108: PUSH
 109: EMPTY
 110: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 111: LD_ADDR_EXP 24
 115: PUSH
 116: EMPTY
 117: ST_TO_ADDR
// attackGroup = [ ] ;
 118: LD_ADDR_EXP 26
 122: PUSH
 123: EMPTY
 124: ST_TO_ADDR
// RandomizeAll ;
 125: CALL_OW 11
// InGameOn ;
 129: CALL_OW 8
// Resetfog ;
 133: CALL_OW 335
// PrepareDifficulty ;
 137: CALL 9815 0 0
// PrepareRussianCommander ;
 141: CALL 11034 0 0
// PrepareSouthBase ;
 145: CALL 11117 0 0
// PrepareNorthBase ;
 149: CALL 11474 0 0
// PrepareOtherRussians ;
 153: CALL 11840 0 0
// PrepareHeroes ;
 157: CALL 10130 0 0
// PrepareLisSquad ;
 161: CALL 10373 0 0
// PrepareOtherAmericans ;
 165: CALL 10601 0 0
// end ; end_of_file
 169: END
// every 1 do var tmp ;
 170: GO 172
 172: DISABLE
 173: LD_INT 0
 175: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 176: LD_EXP 1
 180: PPUSH
 181: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 185: LD_ADDR_VAR 0 1
 189: PUSH
 190: LD_INT 22
 192: PUSH
 193: LD_INT 4
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: PUSH
 200: LD_INT 21
 202: PUSH
 203: LD_INT 1
 205: PUSH
 206: EMPTY
 207: LIST
 208: LIST
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PPUSH
 214: CALL_OW 69
 218: PUSH
 219: LD_EXP 4
 223: PUSH
 224: EMPTY
 225: LIST
 226: DIFF
 227: ST_TO_ADDR
// if Cyrus and Bobby then
 228: LD_EXP 3
 232: PUSH
 233: LD_EXP 2
 237: AND
 238: IFFALSE 568
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 240: LD_EXP 3
 244: PPUSH
 245: LD_INT 43
 247: PPUSH
 248: LD_INT 72
 250: PPUSH
 251: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 255: LD_EXP 2
 259: PPUSH
 260: LD_INT 44
 262: PPUSH
 263: LD_INT 70
 265: PPUSH
 266: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 270: LD_EXP 1
 274: PPUSH
 275: LD_INT 46
 277: PPUSH
 278: LD_INT 73
 280: PPUSH
 281: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 285: LD_EXP 3
 289: PPUSH
 290: LD_STRING D1a-Cyrus-1
 292: PPUSH
 293: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 297: LD_EXP 1
 301: PPUSH
 302: LD_STRING D1a-JMM-1
 304: PPUSH
 305: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 309: LD_EXP 3
 313: PPUSH
 314: LD_INT 37
 316: PPUSH
 317: LD_INT 66
 319: PPUSH
 320: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 324: LD_EXP 2
 328: PPUSH
 329: LD_INT 41
 331: PPUSH
 332: LD_INT 67
 334: PPUSH
 335: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 339: LD_EXP 1
 343: PPUSH
 344: LD_INT 38
 346: PPUSH
 347: LD_INT 64
 349: PPUSH
 350: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 354: LD_EXP 2
 358: PPUSH
 359: LD_STRING D1a-Bobby-2
 361: PPUSH
 362: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 366: LD_EXP 3
 370: PPUSH
 371: LD_INT 35
 373: PPUSH
 374: LD_INT 62
 376: PPUSH
 377: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 381: LD_EXP 2
 385: PPUSH
 386: LD_INT 32
 388: PPUSH
 389: LD_INT 60
 391: PPUSH
 392: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 396: LD_EXP 1
 400: PPUSH
 401: LD_INT 35
 403: PPUSH
 404: LD_INT 60
 406: PPUSH
 407: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 411: LD_EXP 1
 415: PPUSH
 416: LD_STRING D1a-JMM-2
 418: PPUSH
 419: CALL_OW 88
// ComWalk ( Lisa ) ;
 423: LD_EXP 4
 427: PPUSH
 428: CALL_OW 138
// wait ( 0 0$1 ) ;
 432: LD_INT 35
 434: PPUSH
 435: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 439: LD_EXP 4
 443: PPUSH
 444: LD_EXP 1
 448: PPUSH
 449: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 453: LD_EXP 1
 457: PUSH
 458: LD_EXP 3
 462: PUSH
 463: LD_EXP 2
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: LIST
 472: PPUSH
 473: LD_EXP 4
 477: PPUSH
 478: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 482: LD_VAR 0 1
 486: PUSH
 487: LD_INT 1
 489: ARRAY
 490: PPUSH
 491: LD_INT 33
 493: PPUSH
 494: LD_INT 55
 496: PPUSH
 497: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 501: LD_VAR 0 1
 505: PUSH
 506: LD_INT 2
 508: ARRAY
 509: PPUSH
 510: LD_INT 30
 512: PPUSH
 513: LD_INT 54
 515: PPUSH
 516: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 520: LD_VAR 0 1
 524: PUSH
 525: LD_INT 1
 527: ARRAY
 528: PPUSH
 529: LD_EXP 1
 533: PPUSH
 534: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 538: LD_VAR 0 1
 542: PUSH
 543: LD_INT 2
 545: ARRAY
 546: PPUSH
 547: LD_EXP 1
 551: PPUSH
 552: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 556: LD_EXP 4
 560: PPUSH
 561: LD_STRING D1a-Lisa-2
 563: PPUSH
 564: CALL_OW 88
// end ; if Cyrus and not Bobby then
 568: LD_EXP 3
 572: PUSH
 573: LD_EXP 2
 577: NOT
 578: AND
 579: IFFALSE 784
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_INT 43
 588: PPUSH
 589: LD_INT 72
 591: PPUSH
 592: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 596: LD_EXP 1
 600: PPUSH
 601: LD_INT 46
 603: PPUSH
 604: LD_INT 73
 606: PPUSH
 607: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 611: LD_EXP 3
 615: PPUSH
 616: LD_STRING D1a-Cyrus-1
 618: PPUSH
 619: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 623: LD_EXP 1
 627: PPUSH
 628: LD_STRING D1a-JMM-1
 630: PPUSH
 631: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 635: LD_EXP 3
 639: PPUSH
 640: LD_INT 37
 642: PPUSH
 643: LD_INT 66
 645: PPUSH
 646: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 650: LD_EXP 1
 654: PPUSH
 655: LD_INT 38
 657: PPUSH
 658: LD_INT 64
 660: PPUSH
 661: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 665: LD_EXP 3
 669: PPUSH
 670: LD_STRING D1a-Cyrus-2
 672: PPUSH
 673: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 677: LD_EXP 3
 681: PPUSH
 682: LD_INT 35
 684: PPUSH
 685: LD_INT 62
 687: PPUSH
 688: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 692: LD_EXP 1
 696: PPUSH
 697: LD_INT 35
 699: PPUSH
 700: LD_INT 60
 702: PPUSH
 703: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 707: LD_EXP 1
 711: PPUSH
 712: LD_STRING D1a-JMM-2
 714: PPUSH
 715: CALL_OW 88
// ComWalk ( Lisa ) ;
 719: LD_EXP 4
 723: PPUSH
 724: CALL_OW 138
// wait ( 0 0$1 ) ;
 728: LD_INT 35
 730: PPUSH
 731: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 735: LD_EXP 4
 739: PPUSH
 740: LD_EXP 1
 744: PPUSH
 745: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 749: LD_EXP 4
 753: PPUSH
 754: LD_STRING D1a-Lisa-2
 756: PPUSH
 757: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 761: LD_EXP 1
 765: PUSH
 766: LD_EXP 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: PPUSH
 775: LD_EXP 4
 779: PPUSH
 780: CALL_OW 119
// end ; if not Cyrus and Bobby then
 784: LD_EXP 3
 788: NOT
 789: PUSH
 790: LD_EXP 2
 794: AND
 795: IFFALSE 1074
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 797: LD_EXP 2
 801: PPUSH
 802: LD_INT 44
 804: PPUSH
 805: LD_INT 70
 807: PPUSH
 808: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 812: LD_EXP 1
 816: PPUSH
 817: LD_INT 46
 819: PPUSH
 820: LD_INT 73
 822: PPUSH
 823: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 827: LD_EXP 2
 831: PPUSH
 832: LD_STRING D1a-Bobby-1
 834: PPUSH
 835: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 839: LD_EXP 1
 843: PPUSH
 844: LD_STRING D1a-JMM-1
 846: PPUSH
 847: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 851: LD_EXP 2
 855: PPUSH
 856: LD_INT 37
 858: PPUSH
 859: LD_INT 66
 861: PPUSH
 862: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 866: LD_EXP 1
 870: PPUSH
 871: LD_INT 38
 873: PPUSH
 874: LD_INT 64
 876: PPUSH
 877: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 881: LD_EXP 2
 885: PPUSH
 886: LD_STRING D1a-Bobby-2
 888: PPUSH
 889: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 893: LD_EXP 2
 897: PPUSH
 898: LD_INT 35
 900: PPUSH
 901: LD_INT 62
 903: PPUSH
 904: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 908: LD_EXP 1
 912: PPUSH
 913: LD_INT 35
 915: PPUSH
 916: LD_INT 60
 918: PPUSH
 919: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 923: LD_EXP 1
 927: PPUSH
 928: LD_STRING D1a-JMM-2
 930: PPUSH
 931: CALL_OW 88
// ComWalk ( Lisa ) ;
 935: LD_EXP 4
 939: PPUSH
 940: CALL_OW 138
// wait ( 0 0$1 ) ;
 944: LD_INT 35
 946: PPUSH
 947: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 951: LD_EXP 4
 955: PPUSH
 956: LD_EXP 1
 960: PPUSH
 961: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 965: LD_EXP 1
 969: PUSH
 970: LD_EXP 3
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: LD_EXP 4
 983: PPUSH
 984: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 988: LD_VAR 0 1
 992: PUSH
 993: LD_INT 1
 995: ARRAY
 996: PPUSH
 997: LD_INT 33
 999: PPUSH
1000: LD_INT 55
1002: PPUSH
1003: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1007: LD_VAR 0 1
1011: PUSH
1012: LD_INT 2
1014: ARRAY
1015: PPUSH
1016: LD_INT 30
1018: PPUSH
1019: LD_INT 54
1021: PPUSH
1022: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1026: LD_VAR 0 1
1030: PUSH
1031: LD_INT 1
1033: ARRAY
1034: PPUSH
1035: LD_EXP 1
1039: PPUSH
1040: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1044: LD_VAR 0 1
1048: PUSH
1049: LD_INT 2
1051: ARRAY
1052: PPUSH
1053: LD_EXP 1
1057: PPUSH
1058: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_STRING D1a-Lisa-2
1069: PPUSH
1070: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1074: LD_EXP 3
1078: NOT
1079: PUSH
1080: LD_EXP 2
1084: NOT
1085: AND
1086: IFFALSE 1300
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1088: LD_EXP 1
1092: PPUSH
1093: LD_INT 37
1095: PPUSH
1096: LD_INT 66
1098: PPUSH
1099: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1103: LD_EXP 1
1107: PPUSH
1108: LD_STRING D1b-JMM-1
1110: PPUSH
1111: CALL_OW 88
// ComCrawl ( JMM ) ;
1115: LD_EXP 1
1119: PPUSH
1120: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1124: LD_EXP 1
1128: PPUSH
1129: LD_INT 35
1131: PPUSH
1132: LD_INT 60
1134: PPUSH
1135: CALL_OW 171
// wait ( 0 0$8 ) ;
1139: LD_INT 280
1141: PPUSH
1142: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1146: LD_EXP 1
1150: PPUSH
1151: LD_STRING D1b-JMM-1a
1153: PPUSH
1154: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1158: LD_EXP 1
1162: PUSH
1163: LD_EXP 4
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: PPUSH
1172: CALL_OW 138
// wait ( 0 0$1 ) ;
1176: LD_INT 35
1178: PPUSH
1179: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1183: LD_EXP 4
1187: PPUSH
1188: LD_EXP 1
1192: PPUSH
1193: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1197: LD_EXP 1
1201: PUSH
1202: EMPTY
1203: LIST
1204: PPUSH
1205: LD_EXP 4
1209: PPUSH
1210: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1214: LD_VAR 0 1
1218: PUSH
1219: LD_INT 1
1221: ARRAY
1222: PPUSH
1223: LD_INT 33
1225: PPUSH
1226: LD_INT 55
1228: PPUSH
1229: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1233: LD_VAR 0 1
1237: PUSH
1238: LD_INT 2
1240: ARRAY
1241: PPUSH
1242: LD_INT 30
1244: PPUSH
1245: LD_INT 54
1247: PPUSH
1248: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1252: LD_VAR 0 1
1256: PUSH
1257: LD_INT 1
1259: ARRAY
1260: PPUSH
1261: LD_EXP 1
1265: PPUSH
1266: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1270: LD_VAR 0 1
1274: PUSH
1275: LD_INT 2
1277: ARRAY
1278: PPUSH
1279: LD_EXP 1
1283: PPUSH
1284: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1288: LD_EXP 4
1292: PPUSH
1293: LD_STRING D1b-Lisa-1
1295: PPUSH
1296: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1300: LD_EXP 1
1304: PPUSH
1305: LD_STRING D1-JMM-1
1307: PPUSH
1308: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1312: LD_EXP 4
1316: PPUSH
1317: LD_STRING D1-Lisa-1
1319: PPUSH
1320: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1324: LD_EXP 1
1328: PPUSH
1329: LD_STRING D1-JMM-2
1331: PPUSH
1332: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1336: LD_EXP 9
1340: PPUSH
1341: LD_STRING D1-Pow-2
1343: PPUSH
1344: CALL_OW 94
// if Cyrus then
1348: LD_EXP 3
1352: IFFALSE 1378
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1354: LD_EXP 3
1358: PPUSH
1359: LD_STRING D1-Cyrus-2
1361: PPUSH
1362: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1366: LD_EXP 1
1370: PPUSH
1371: LD_STRING D1-JMM-3
1373: PPUSH
1374: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1378: LD_EXP 9
1382: PPUSH
1383: LD_STRING D1-Pow-3
1385: PPUSH
1386: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-4
1397: PPUSH
1398: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1402: LD_EXP 9
1406: PPUSH
1407: LD_STRING D1-Pow-4
1409: PPUSH
1410: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1414: LD_EXP 9
1418: PPUSH
1419: LD_STRING D1-Pow-4a
1421: PPUSH
1422: CALL_OW 94
// if Cyrus then
1426: LD_EXP 3
1430: IFFALSE 1444
// Say ( Cyrus , D1-Cyrus-4 ) ;
1432: LD_EXP 3
1436: PPUSH
1437: LD_STRING D1-Cyrus-4
1439: PPUSH
1440: CALL_OW 88
// if Bobby then
1444: LD_EXP 2
1448: IFFALSE 1486
// begin Say ( Bobby , D1-Bobby-4 ) ;
1450: LD_EXP 2
1454: PPUSH
1455: LD_STRING D1-Bobby-4
1457: PPUSH
1458: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1462: LD_EXP 4
1466: PPUSH
1467: LD_STRING D1-Lisa-4
1469: PPUSH
1470: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1474: LD_EXP 1
1478: PPUSH
1479: LD_STRING D1-JMM-5
1481: PPUSH
1482: CALL_OW 88
// end ; InGameOff ;
1486: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1490: LD_INT 22
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PPUSH
1500: CALL_OW 69
1504: PUSH
1505: LD_EXP 6
1509: PUSH
1510: LD_EXP 7
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: DIFF
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1527: LD_STRING M1
1529: PPUSH
1530: CALL_OW 337
// SaveForQuickRestart ;
1534: CALL_OW 22
// end ;
1538: PPOPN 1
1540: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1541: LD_INT 7
1543: PPUSH
1544: LD_INT 22
1546: PUSH
1547: LD_INT 1
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PPUSH
1554: CALL_OW 70
1558: PUSH
1559: LD_INT 0
1561: GREATER
1562: IFFALSE 1932
1564: GO 1566
1566: DISABLE
// begin InGameOn ;
1567: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1571: LD_INT 22
1573: PUSH
1574: LD_INT 1
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: PUSH
1581: LD_INT 21
1583: PUSH
1584: LD_INT 1
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: PPUSH
1600: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1604: LD_INT 24
1606: PPUSH
1607: LD_INT 32
1609: PPUSH
1610: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1614: LD_EXP 5
1618: PPUSH
1619: LD_INT 4
1621: PPUSH
1622: LD_INT 1
1624: PPUSH
1625: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1629: LD_EXP 5
1633: PPUSH
1634: LD_INT 4
1636: PPUSH
1637: CALL_OW 336
// wait ( 0 0$1 ) ;
1641: LD_INT 35
1643: PPUSH
1644: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1648: LD_EXP 5
1652: PPUSH
1653: LD_INT 27
1655: PPUSH
1656: LD_INT 38
1658: PPUSH
1659: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1663: LD_EXP 5
1667: PPUSH
1668: LD_EXP 1
1672: PPUSH
1673: CALL_OW 179
// wait ( 0 0$1 ) ;
1677: LD_INT 35
1679: PPUSH
1680: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1684: LD_EXP 5
1688: PPUSH
1689: LD_STRING D2a-Khat-1
1691: PPUSH
1692: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1696: LD_EXP 1
1700: PPUSH
1701: LD_STRING D2a-JMM-1
1703: PPUSH
1704: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1708: LD_EXP 5
1712: PPUSH
1713: LD_STRING D2a-Khat-2
1715: PPUSH
1716: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1720: LD_EXP 1
1724: PPUSH
1725: LD_STRING D2a-JMM-2
1727: PPUSH
1728: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1732: LD_EXP 5
1736: PPUSH
1737: LD_STRING D2a-Khat-3
1739: PPUSH
1740: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1744: LD_EXP 1
1748: PPUSH
1749: LD_STRING D2a-JMM-3
1751: PPUSH
1752: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1756: LD_EXP 5
1760: PPUSH
1761: LD_STRING D2a-Khat-4
1763: PPUSH
1764: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1768: LD_EXP 1
1772: PPUSH
1773: LD_STRING D2a-JMM-4
1775: PPUSH
1776: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1780: LD_EXP 5
1784: PPUSH
1785: LD_STRING D2a-Khat-5
1787: PPUSH
1788: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1792: LD_EXP 1
1796: PPUSH
1797: LD_STRING D2a-JMM-5
1799: PPUSH
1800: CALL_OW 88
// InGameOff ;
1804: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1808: LD_INT 22
1810: PUSH
1811: LD_INT 1
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PUSH
1818: LD_INT 21
1820: PUSH
1821: LD_INT 1
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 3
1830: PUSH
1831: LD_INT 24
1833: PUSH
1834: LD_INT 800
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: LIST
1849: PPUSH
1850: CALL_OW 69
1854: PUSH
1855: LD_INT 0
1857: GREATER
1858: IFFALSE 1932
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1860: LD_EXP 5
1864: PPUSH
1865: LD_INT 22
1867: PUSH
1868: LD_INT 1
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: LD_INT 21
1877: PUSH
1878: LD_INT 1
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 3
1887: PUSH
1888: LD_INT 24
1890: PUSH
1891: LD_INT 1000
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: PPUSH
1907: CALL_OW 69
1911: PUSH
1912: LD_INT 1
1914: ARRAY
1915: PPUSH
1916: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1920: LD_EXP 5
1924: PPUSH
1925: LD_STRING D2b-Khat-1
1927: PPUSH
1928: CALL_OW 88
// end ; end ;
1932: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
1933: LD_INT 15
1935: PPUSH
1936: LD_INT 22
1938: PUSH
1939: LD_INT 1
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PPUSH
1946: CALL_OW 70
1950: PUSH
1951: LD_INT 0
1953: GREATER
1954: IFFALSE 3114
1956: GO 1958
1958: DISABLE
1959: LD_INT 0
1961: PPUSH
1962: PPUSH
1963: PPUSH
1964: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
1965: LD_ADDR_VAR 0 2
1969: PUSH
1970: LD_INT 999
1972: PUSH
1973: LD_INT 999
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
1983: LD_ADDR_VAR 0 4
1987: PUSH
1988: LD_INT 22
1990: PUSH
1991: LD_INT 1
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 21
2000: PUSH
2001: LD_INT 1
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PPUSH
2012: CALL_OW 69
2016: PUSH
2017: LD_EXP 1
2021: PUSH
2022: LD_EXP 2
2026: PUSH
2027: LD_EXP 3
2031: PUSH
2032: LD_EXP 4
2036: PUSH
2037: LD_EXP 5
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: DIFF
2049: ST_TO_ADDR
// PrepareDeadSoldiers ;
2050: CALL 10759 0 0
// spotCorpses = 1 ;
2054: LD_ADDR_EXP 30
2058: PUSH
2059: LD_INT 1
2061: ST_TO_ADDR
// InGameOn ;
2062: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2066: LD_INT 23
2068: PPUSH
2069: LD_INT 12
2071: PPUSH
2072: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2076: LD_ADDR_VAR 0 3
2080: PUSH
2081: LD_VAR 0 2
2085: PUSH
2086: LD_INT 1
2088: ARRAY
2089: PUSH
2090: LD_INT 2
2092: ARRAY
2093: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2094: LD_ADDR_VAR 0 1
2098: PUSH
2099: LD_INT 22
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: LD_INT 21
2111: PUSH
2112: LD_INT 1
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 69
2127: PUSH
2128: LD_EXP 1
2132: PUSH
2133: LD_EXP 5
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: DIFF
2142: PUSH
2143: FOR_IN
2144: IFFALSE 2195
// if IsOK ( i ) then
2146: LD_VAR 0 1
2150: PPUSH
2151: CALL_OW 302
2155: IFFALSE 2193
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2157: LD_ADDR_VAR 0 2
2161: PUSH
2162: LD_VAR 0 2
2166: PUSH
2167: LD_VAR 0 1
2171: PUSH
2172: LD_VAR 0 1
2176: PPUSH
2177: LD_INT 16
2179: PPUSH
2180: CALL_OW 299
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: PUSH
2189: EMPTY
2190: LIST
2191: ADD
2192: ST_TO_ADDR
2193: GO 2143
2195: POP
2196: POP
// for i = 2 to distanceTab do
2197: LD_ADDR_VAR 0 1
2201: PUSH
2202: DOUBLE
2203: LD_INT 2
2205: DEC
2206: ST_TO_ADDR
2207: LD_VAR 0 2
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2259
// if distanceTab [ i ] [ 2 ] < min then
2215: LD_VAR 0 2
2219: PUSH
2220: LD_VAR 0 1
2224: ARRAY
2225: PUSH
2226: LD_INT 2
2228: ARRAY
2229: PUSH
2230: LD_VAR 0 3
2234: LESS
2235: IFFALSE 2257
// min = distanceTab [ i ] [ 2 ] ;
2237: LD_ADDR_VAR 0 3
2241: PUSH
2242: LD_VAR 0 2
2246: PUSH
2247: LD_VAR 0 1
2251: ARRAY
2252: PUSH
2253: LD_INT 2
2255: ARRAY
2256: ST_TO_ADDR
2257: GO 2212
2259: POP
2260: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2261: LD_ADDR_VAR 0 1
2265: PUSH
2266: LD_INT 22
2268: PUSH
2269: LD_INT 1
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 21
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PPUSH
2290: CALL_OW 69
2294: PUSH
2295: LD_EXP 1
2299: PUSH
2300: EMPTY
2301: LIST
2302: DIFF
2303: PUSH
2304: FOR_IN
2305: IFFALSE 2375
// begin ComMoveToArea ( i , DeadCutscene ) ;
2307: LD_VAR 0 1
2311: PPUSH
2312: LD_INT 28
2314: PPUSH
2315: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2319: LD_EXP 1
2323: PPUSH
2324: LD_INT 30
2326: PPUSH
2327: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2331: LD_VAR 0 1
2335: PPUSH
2336: LD_INT 23
2338: PPUSH
2339: LD_INT 11
2341: PPUSH
2342: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2346: LD_EXP 1
2350: PPUSH
2351: LD_INT 23
2353: PPUSH
2354: LD_INT 11
2356: PPUSH
2357: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2361: LD_EXP 31
2365: PPUSH
2366: LD_INT 250
2368: PPUSH
2369: CALL_OW 234
// end ;
2373: GO 2304
2375: POP
2376: POP
// for i = 2 to distanceTab do
2377: LD_ADDR_VAR 0 1
2381: PUSH
2382: DOUBLE
2383: LD_INT 2
2385: DEC
2386: ST_TO_ADDR
2387: LD_VAR 0 2
2391: PUSH
2392: FOR_TO
2393: IFFALSE 2779
// begin if distanceTab [ i ] [ 2 ] = min then
2395: LD_VAR 0 2
2399: PUSH
2400: LD_VAR 0 1
2404: ARRAY
2405: PUSH
2406: LD_INT 2
2408: ARRAY
2409: PUSH
2410: LD_VAR 0 3
2414: EQUAL
2415: IFFALSE 2777
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2417: LD_VAR 0 2
2421: PUSH
2422: LD_VAR 0 1
2426: ARRAY
2427: PUSH
2428: LD_INT 1
2430: ARRAY
2431: PUSH
2432: LD_EXP 2
2436: EQUAL
2437: IFFALSE 2451
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2439: LD_EXP 2
2443: PPUSH
2444: LD_STRING DCorpses-Bobby-1
2446: PPUSH
2447: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2451: LD_VAR 0 2
2455: PUSH
2456: LD_VAR 0 1
2460: ARRAY
2461: PUSH
2462: LD_INT 1
2464: ARRAY
2465: PUSH
2466: LD_EXP 3
2470: EQUAL
2471: IFFALSE 2485
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2473: LD_EXP 3
2477: PPUSH
2478: LD_STRING DCorpses-Cyrus-1
2480: PPUSH
2481: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2485: LD_VAR 0 2
2489: PUSH
2490: LD_VAR 0 1
2494: ARRAY
2495: PUSH
2496: LD_INT 1
2498: ARRAY
2499: PUSH
2500: LD_EXP 4
2504: EQUAL
2505: IFFALSE 2519
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2507: LD_EXP 4
2511: PPUSH
2512: LD_STRING DCorpses-Lisa-1
2514: PPUSH
2515: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2519: LD_VAR 0 2
2523: PUSH
2524: LD_VAR 0 1
2528: ARRAY
2529: PUSH
2530: LD_INT 1
2532: ARRAY
2533: PUSH
2534: LD_VAR 0 4
2538: PUSH
2539: LD_INT 1
2541: ARRAY
2542: EQUAL
2543: PUSH
2544: LD_VAR 0 4
2548: PUSH
2549: LD_INT 1
2551: ARRAY
2552: PPUSH
2553: CALL_OW 258
2557: PUSH
2558: LD_INT 1
2560: EQUAL
2561: AND
2562: IFFALSE 2580
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2564: LD_VAR 0 4
2568: PUSH
2569: LD_INT 1
2571: ARRAY
2572: PPUSH
2573: LD_STRING DCorpses-Sol1-1
2575: PPUSH
2576: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2580: LD_VAR 0 2
2584: PUSH
2585: LD_VAR 0 1
2589: ARRAY
2590: PUSH
2591: LD_INT 1
2593: ARRAY
2594: PUSH
2595: LD_VAR 0 4
2599: PUSH
2600: LD_INT 1
2602: ARRAY
2603: EQUAL
2604: PUSH
2605: LD_VAR 0 4
2609: PUSH
2610: LD_INT 1
2612: ARRAY
2613: PPUSH
2614: CALL_OW 258
2618: PUSH
2619: LD_INT 2
2621: EQUAL
2622: AND
2623: IFFALSE 2641
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2625: LD_VAR 0 4
2629: PUSH
2630: LD_INT 1
2632: ARRAY
2633: PPUSH
2634: LD_STRING DCorpses-FSol1-1
2636: PPUSH
2637: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2641: LD_VAR 0 2
2645: PUSH
2646: LD_VAR 0 1
2650: ARRAY
2651: PUSH
2652: LD_INT 1
2654: ARRAY
2655: PUSH
2656: LD_VAR 0 4
2660: PUSH
2661: LD_INT 2
2663: ARRAY
2664: EQUAL
2665: PUSH
2666: LD_VAR 0 4
2670: PUSH
2671: LD_INT 2
2673: ARRAY
2674: PPUSH
2675: CALL_OW 258
2679: PUSH
2680: LD_INT 1
2682: EQUAL
2683: AND
2684: IFFALSE 2702
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2686: LD_VAR 0 4
2690: PUSH
2691: LD_INT 2
2693: ARRAY
2694: PPUSH
2695: LD_STRING DCorpses-Sol1-1
2697: PPUSH
2698: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2702: LD_VAR 0 2
2706: PUSH
2707: LD_VAR 0 1
2711: ARRAY
2712: PUSH
2713: LD_INT 1
2715: ARRAY
2716: PUSH
2717: LD_VAR 0 4
2721: PUSH
2722: LD_INT 2
2724: ARRAY
2725: EQUAL
2726: PUSH
2727: LD_VAR 0 4
2731: PUSH
2732: LD_INT 2
2734: ARRAY
2735: PPUSH
2736: CALL_OW 258
2740: PUSH
2741: LD_INT 2
2743: EQUAL
2744: AND
2745: IFFALSE 2763
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2747: LD_VAR 0 4
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_STRING DCorpses-FSol1-1
2758: PPUSH
2759: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2763: LD_EXP 31
2767: PPUSH
2768: LD_INT 150
2770: PPUSH
2771: CALL_OW 234
// break ;
2775: GO 2779
// end ; end ;
2777: GO 2392
2779: POP
2780: POP
// repeat wait ( 0 0$1 ) ;
2781: LD_INT 35
2783: PPUSH
2784: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2788: LD_ADDR_VAR 0 1
2792: PUSH
2793: LD_INT 22
2795: PUSH
2796: LD_INT 1
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 21
2805: PUSH
2806: LD_INT 1
2808: PUSH
2809: EMPTY
2810: LIST
2811: LIST
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PPUSH
2817: CALL_OW 69
2821: PUSH
2822: LD_EXP 1
2826: PUSH
2827: EMPTY
2828: LIST
2829: DIFF
2830: PUSH
2831: FOR_IN
2832: IFFALSE 2902
// begin ComMoveToArea ( i , DeadCutscene ) ;
2834: LD_VAR 0 1
2838: PPUSH
2839: LD_INT 28
2841: PPUSH
2842: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2846: LD_EXP 1
2850: PPUSH
2851: LD_INT 30
2853: PPUSH
2854: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: LD_INT 23
2865: PPUSH
2866: LD_INT 11
2868: PPUSH
2869: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2873: LD_EXP 1
2877: PPUSH
2878: LD_INT 23
2880: PPUSH
2881: LD_INT 11
2883: PPUSH
2884: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2888: LD_EXP 31
2892: PPUSH
2893: LD_INT 250
2895: PPUSH
2896: CALL_OW 234
// end ;
2900: GO 2831
2902: POP
2903: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2904: LD_EXP 1
2908: PPUSH
2909: LD_INT 30
2911: PPUSH
2912: CALL_OW 308
2916: IFFALSE 2781
// wait ( 0 0$3 ) ;
2918: LD_INT 105
2920: PPUSH
2921: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2925: LD_EXP 1
2929: PPUSH
2930: LD_STRING DCorpses-JMM-1
2932: PPUSH
2933: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2937: LD_EXP 31
2941: PPUSH
2942: LD_INT 150
2944: PPUSH
2945: CALL_OW 234
// if IsOK ( Khatam ) then
2949: LD_EXP 5
2953: PPUSH
2954: CALL_OW 302
2958: IFFALSE 3098
// begin repeat wait ( 0 0$1 ) ;
2960: LD_INT 35
2962: PPUSH
2963: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
2967: LD_EXP 5
2971: PPUSH
2972: LD_EXP 31
2976: PPUSH
2977: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
2981: LD_EXP 5
2985: PPUSH
2986: LD_EXP 31
2990: PPUSH
2991: CALL_OW 296
2995: PUSH
2996: LD_INT 2
2998: LESS
2999: IFFALSE 2960
// spotCorpses = 0 ;
3001: LD_ADDR_EXP 30
3005: PUSH
3006: LD_INT 0
3008: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3009: LD_EXP 31
3013: PPUSH
3014: LD_INT 10
3016: PPUSH
3017: CALL_OW 234
// wait ( 0 0$3 ) ;
3021: LD_INT 105
3023: PPUSH
3024: CALL_OW 67
// SetLives ( DyingSold , 0 ) ;
3028: LD_EXP 31
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 234
// wait ( 0 0$1 ) ;
3040: LD_INT 35
3042: PPUSH
3043: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3047: LD_EXP 1
3051: PUSH
3052: LD_EXP 5
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PPUSH
3061: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3065: LD_EXP 5
3069: PPUSH
3070: LD_EXP 1
3074: PPUSH
3075: CALL_OW 119
// wait ( 0 0$1 ) ;
3079: LD_INT 35
3081: PPUSH
3082: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3086: LD_EXP 5
3090: PPUSH
3091: LD_STRING DCorpses-Khat-1
3093: PPUSH
3094: CALL_OW 88
// end ; InGameOff ;
3098: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3102: LD_EXP 1
3106: PPUSH
3107: LD_STRING DCorpses-JMM-2
3109: PPUSH
3110: CALL_OW 88
// end ;
3114: PPOPN 4
3116: END
// every 0 0$1 trigger spotCorpses = 1 do
3117: LD_EXP 30
3121: PUSH
3122: LD_INT 1
3124: EQUAL
3125: IFFALSE 3143
3127: GO 3129
3129: DISABLE
// begin enable ;
3130: ENABLE
// SetLives ( DyingSold , 150 ) ;
3131: LD_EXP 31
3135: PPUSH
3136: LD_INT 150
3138: PPUSH
3139: CALL_OW 234
// end ;
3143: END
// every 1 trigger FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do var i ;
3144: LD_INT 8
3146: PPUSH
3147: LD_INT 22
3149: PUSH
3150: LD_INT 1
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: PPUSH
3157: CALL_OW 70
3161: PUSH
3162: LD_INT 0
3164: GREATER
3165: PUSH
3166: LD_INT 1
3168: PPUSH
3169: CALL_OW 255
3173: PUSH
3174: LD_INT 1
3176: EQUAL
3177: NOT
3178: AND
3179: PUSH
3180: LD_INT 10
3182: PPUSH
3183: CALL_OW 255
3187: PUSH
3188: LD_INT 1
3190: EQUAL
3191: NOT
3192: AND
3193: IFFALSE 3361
3195: GO 3197
3197: DISABLE
3198: LD_INT 0
3200: PPUSH
// begin InGameOn ;
3201: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3205: LD_EXP 7
3209: PPUSH
3210: LD_INT 250
3212: PPUSH
3213: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3217: LD_INT 3
3219: PPUSH
3220: LD_INT 4
3222: PPUSH
3223: LD_INT 2
3225: PPUSH
3226: LD_INT 1
3228: PPUSH
3229: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3233: LD_EXP 6
3237: PUSH
3238: LD_EXP 7
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3251: LD_ADDR_VAR 0 1
3255: PUSH
3256: LD_INT 9
3258: PPUSH
3259: LD_INT 22
3261: PUSH
3262: LD_INT 3
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 70
3273: PUSH
3274: FOR_IN
3275: IFFALSE 3288
// ComFree ( i ) ;
3277: LD_VAR 0 1
3281: PPUSH
3282: CALL_OW 139
3286: GO 3274
3288: POP
3289: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3290: LD_ADDR_VAR 0 1
3294: PUSH
3295: LD_INT 22
3297: PUSH
3298: LD_INT 4
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PPUSH
3305: CALL_OW 69
3309: PUSH
3310: FOR_IN
3311: IFFALSE 3324
// ComFree ( i ) ;
3313: LD_VAR 0 1
3317: PPUSH
3318: CALL_OW 139
3322: GO 3310
3324: POP
3325: POP
// wait ( 0 0$1 ) ;
3326: LD_INT 35
3328: PPUSH
3329: CALL_OW 67
// InGameOff ;
3333: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3337: LD_EXP 6
3341: PPUSH
3342: LD_STRING DF-Sol1-1
3344: PPUSH
3345: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3349: LD_EXP 1
3353: PPUSH
3354: LD_STRING DF-JMM-1
3356: PPUSH
3357: CALL_OW 88
// end ;
3361: PPOPN 1
3363: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do
3364: LD_INT 19
3366: PPUSH
3367: LD_INT 22
3369: PUSH
3370: LD_INT 3
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PPUSH
3377: CALL_OW 70
3381: PUSH
3382: LD_INT 0
3384: EQUAL
3385: PUSH
3386: LD_INT 1
3388: PPUSH
3389: CALL_OW 255
3393: PUSH
3394: LD_INT 1
3396: EQUAL
3397: NOT
3398: AND
3399: PUSH
3400: LD_INT 10
3402: PPUSH
3403: CALL_OW 255
3407: PUSH
3408: LD_INT 1
3410: EQUAL
3411: NOT
3412: AND
3413: IFFALSE 3526
3415: GO 3417
3417: DISABLE
// begin if not IsDead ( Brian ) then
3418: LD_EXP 6
3422: PPUSH
3423: CALL_OW 301
3427: NOT
3428: IFFALSE 3442
// SetSide ( Brian , 1 ) ;
3430: LD_EXP 6
3434: PPUSH
3435: LD_INT 1
3437: PPUSH
3438: CALL_OW 235
// if not IsDead ( Jerry ) then
3442: LD_EXP 7
3446: PPUSH
3447: CALL_OW 301
3451: NOT
3452: IFFALSE 3466
// SetSide ( Jerry , 1 ) ;
3454: LD_EXP 7
3458: PPUSH
3459: LD_INT 1
3461: PPUSH
3462: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3466: LD_INT 22
3468: PUSH
3469: LD_INT 1
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: PUSH
3476: LD_INT 25
3478: PUSH
3479: LD_INT 4
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PPUSH
3490: CALL_OW 69
3494: PUSH
3495: LD_INT 0
3497: GREATER
3498: IFFALSE 3514
// begin Say ( JMM , DFa-JMM-1 ) ;
3500: LD_EXP 1
3504: PPUSH
3505: LD_STRING DFa-JMM-1
3507: PPUSH
3508: CALL_OW 88
// end else
3512: GO 3526
// begin Say ( JMM , DFa-JMM-1a ) ;
3514: LD_EXP 1
3518: PPUSH
3519: LD_STRING DFa-JMM-1a
3521: PPUSH
3522: CALL_OW 88
// end ; end ;
3526: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3527: LD_INT 19
3529: PPUSH
3530: LD_INT 22
3532: PUSH
3533: LD_INT 3
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: PPUSH
3540: CALL_OW 70
3544: PUSH
3545: LD_INT 0
3547: EQUAL
3548: PUSH
3549: LD_EXP 6
3553: PPUSH
3554: CALL_OW 302
3558: NOT
3559: AND
3560: IFFALSE 3637
3562: GO 3564
3564: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3565: LD_INT 35
3567: PPUSH
3568: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3572: LD_EXP 6
3576: PPUSH
3577: CALL_OW 256
3581: PUSH
3582: LD_INT 250
3584: GREATER
3585: IFFALSE 3565
// Say ( Brian , DFb-Sol1-1 ) ;
3587: LD_EXP 6
3591: PPUSH
3592: LD_STRING DFb-Sol1-1
3594: PPUSH
3595: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3599: LD_EXP 6
3603: PPUSH
3604: LD_INT 78
3606: PPUSH
3607: LD_INT 74
3609: PPUSH
3610: CALL_OW 111
// if IsDead ( Jerry ) then
3614: LD_EXP 7
3618: PPUSH
3619: CALL_OW 301
3623: IFFALSE 3637
// Say ( Brian , DFb-Sol1-1a ) end ;
3625: LD_EXP 6
3629: PPUSH
3630: LD_STRING DFb-Sol1-1a
3632: PPUSH
3633: CALL_OW 88
3637: END
// every 0 0$1 do var i ;
3638: GO 3640
3640: DISABLE
3641: LD_INT 0
3643: PPUSH
// begin enable ;
3644: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3645: LD_ADDR_VAR 0 1
3649: PUSH
3650: LD_INT 22
3652: PUSH
3653: LD_INT 3
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 21
3662: PUSH
3663: LD_INT 3
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: PUSH
3670: LD_INT 30
3672: PUSH
3673: LD_INT 31
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: LIST
3684: PPUSH
3685: CALL_OW 69
3689: PUSH
3690: FOR_IN
3691: IFFALSE 3722
// begin if See ( 1 , i ) then
3693: LD_INT 1
3695: PPUSH
3696: LD_VAR 0 1
3700: PPUSH
3701: CALL_OW 292
3705: IFFALSE 3720
// begin disable ;
3707: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3708: LD_EXP 1
3712: PPUSH
3713: LD_STRING DX1-JMM-1
3715: PPUSH
3716: CALL_OW 88
// end ; end ;
3720: GO 3690
3722: POP
3723: POP
// end ;
3724: PPOPN 1
3726: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3727: LD_INT 1
3729: PPUSH
3730: LD_INT 11
3732: PPUSH
3733: CALL_OW 294
3737: IFFALSE 4100
3739: GO 3741
3741: DISABLE
3742: LD_INT 0
3744: PPUSH
3745: PPUSH
// begin DialogueOn ;
3746: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3750: LD_INT 11
3752: PPUSH
3753: LD_INT 22
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: PUSH
3763: LD_INT 21
3765: PUSH
3766: LD_INT 1
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PPUSH
3777: CALL_OW 70
3781: PUSH
3782: LD_INT 1
3784: ARRAY
3785: PPUSH
3786: LD_STRING DX3-Rus1-1
3788: PPUSH
3789: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3793: LD_EXP 1
3797: PPUSH
3798: LD_STRING DX3-JMM-1
3800: PPUSH
3801: CALL_OW 88
// DialogueOff ;
3805: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3809: LD_ADDR_VAR 0 1
3813: PUSH
3814: LD_INT 11
3816: PPUSH
3817: LD_INT 22
3819: PUSH
3820: LD_INT 3
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 21
3829: PUSH
3830: LD_INT 1
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: PPUSH
3841: CALL_OW 70
3845: PUSH
3846: FOR_IN
3847: IFFALSE 3867
// southBaseDefenders = southBaseDefenders ^ i ;
3849: LD_ADDR_EXP 25
3853: PUSH
3854: LD_EXP 25
3858: PUSH
3859: LD_VAR 0 1
3863: ADD
3864: ST_TO_ADDR
3865: GO 3846
3867: POP
3868: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
3869: LD_INT 455
3871: PUSH
3872: LD_INT 420
3874: PUSH
3875: LD_INT 315
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: LIST
3882: PUSH
3883: LD_OWVAR 67
3887: ARRAY
3888: PPUSH
3889: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3893: LD_INT 35
3895: PPUSH
3896: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
3900: LD_ADDR_VAR 0 1
3904: PUSH
3905: LD_INT 22
3907: PUSH
3908: LD_INT 3
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: LD_INT 21
3917: PUSH
3918: LD_INT 2
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: PUSH
3925: LD_INT 58
3927: PUSH
3928: EMPTY
3929: LIST
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: LIST
3935: PPUSH
3936: CALL_OW 69
3940: PUSH
3941: FOR_IN
3942: IFFALSE 4012
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
3944: LD_ADDR_VAR 0 2
3948: PUSH
3949: LD_INT 22
3951: PUSH
3952: LD_INT 3
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: PUSH
3959: LD_INT 21
3961: PUSH
3962: LD_INT 1
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 25
3971: PUSH
3972: LD_INT 3
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: PPUSH
3984: CALL_OW 69
3988: PUSH
3989: FOR_IN
3990: IFFALSE 4008
// begin ComEnterUnit ( j , i ) ;
3992: LD_VAR 0 2
3996: PPUSH
3997: LD_VAR 0 1
4001: PPUSH
4002: CALL_OW 120
// end ;
4006: GO 3989
4008: POP
4009: POP
// end ;
4010: GO 3941
4012: POP
4013: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4014: LD_INT 22
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: PUSH
4024: LD_INT 21
4026: PUSH
4027: LD_INT 2
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 58
4036: PUSH
4037: EMPTY
4038: LIST
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: LIST
4044: PPUSH
4045: CALL_OW 69
4049: PUSH
4050: LD_INT 0
4052: EQUAL
4053: PUSH
4054: LD_INT 22
4056: PUSH
4057: LD_INT 3
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: LD_INT 21
4066: PUSH
4067: LD_INT 1
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PUSH
4074: LD_INT 25
4076: PUSH
4077: LD_INT 3
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: PPUSH
4089: CALL_OW 69
4093: PUSH
4094: LD_INT 0
4096: EQUAL
4097: OR
4098: IFFALSE 3893
// end ;
4100: PPOPN 2
4102: END
// every 0 0$1 do var i , tmp ;
4103: GO 4105
4105: DISABLE
4106: LD_INT 0
4108: PPUSH
4109: PPUSH
// begin enable ;
4110: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4111: LD_ADDR_VAR 0 2
4115: PUSH
4116: LD_INT 22
4118: PUSH
4119: LD_INT 1
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: LD_INT 21
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PPUSH
4140: CALL_OW 69
4144: ST_TO_ADDR
// for i in tmp do
4145: LD_ADDR_VAR 0 1
4149: PUSH
4150: LD_VAR 0 2
4154: PUSH
4155: FOR_IN
4156: IFFALSE 4278
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4158: LD_VAR 0 1
4162: PPUSH
4163: LD_INT 5
4165: PPUSH
4166: CALL_OW 296
4170: PUSH
4171: LD_INT 4
4173: LESS
4174: PUSH
4175: LD_VAR 0 1
4179: PPUSH
4180: LD_INT 4
4182: PPUSH
4183: CALL_OW 296
4187: PUSH
4188: LD_INT 4
4190: LESS
4191: OR
4192: IFFALSE 4276
// begin disable ;
4194: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4195: LD_INT 5
4197: PUSH
4198: LD_INT 4
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: PPUSH
4205: CALL_OW 85
// if IsOK ( Bobby ) then
4209: LD_EXP 2
4213: PPUSH
4214: CALL_OW 302
4218: IFFALSE 4255
// begin DialogueOn ;
4220: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4224: LD_EXP 2
4228: PPUSH
4229: LD_STRING DX2-Bobby-1
4231: PPUSH
4232: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4236: LD_EXP 1
4240: PPUSH
4241: LD_STRING DX2-JMM-1a
4243: PPUSH
4244: CALL_OW 88
// DialogueOff ;
4248: CALL_OW 7
// disable ;
4252: DISABLE
// end else
4253: GO 4276
// begin DialogueOn ;
4255: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4259: LD_EXP 1
4263: PPUSH
4264: LD_STRING DX2-JMM-1
4266: PPUSH
4267: CALL_OW 88
// DialogueOff ;
4271: CALL_OW 7
// disable ;
4275: DISABLE
// end ; end ; end ;
4276: GO 4155
4278: POP
4279: POP
// end ;
4280: PPOPN 2
4282: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4283: LD_INT 22
4285: PUSH
4286: LD_INT 1
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: PUSH
4293: LD_INT 23
4295: PUSH
4296: LD_INT 3
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 21
4305: PUSH
4306: LD_INT 2
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: LD_INT 34
4315: PUSH
4316: LD_INT 42
4318: PUSH
4319: EMPTY
4320: LIST
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: PPUSH
4329: CALL_OW 69
4333: PUSH
4334: LD_INT 1
4336: GREATEREQUAL
4337: IFFALSE 4804
4339: GO 4341
4341: DISABLE
4342: LD_INT 0
4344: PPUSH
4345: PPUSH
4346: PPUSH
4347: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4348: LD_ADDR_VAR 0 1
4352: PUSH
4353: LD_INT 22
4355: PUSH
4356: LD_INT 1
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: PUSH
4363: LD_INT 23
4365: PUSH
4366: LD_INT 3
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: LD_INT 21
4375: PUSH
4376: LD_INT 2
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: PUSH
4383: LD_INT 34
4385: PUSH
4386: LD_INT 42
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: PPUSH
4399: CALL_OW 69
4403: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4404: LD_ADDR_VAR 0 2
4408: PUSH
4409: LD_INT 22
4411: PUSH
4412: LD_INT 1
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: LD_INT 21
4421: PUSH
4422: LD_INT 1
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PUSH
4429: LD_INT 26
4431: PUSH
4432: LD_INT 1
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: LIST
4443: PPUSH
4444: CALL_OW 69
4448: PUSH
4449: LD_EXP 1
4453: PUSH
4454: LD_EXP 3
4458: PUSH
4459: LD_EXP 2
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: DIFF
4469: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4470: LD_ADDR_VAR 0 3
4474: PUSH
4475: LD_INT 22
4477: PUSH
4478: LD_INT 1
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: LD_INT 21
4487: PUSH
4488: LD_INT 1
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PUSH
4495: LD_INT 26
4497: PUSH
4498: LD_INT 2
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: PUSH
4515: LD_EXP 4
4519: PUSH
4520: EMPTY
4521: LIST
4522: DIFF
4523: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
4524: LD_EXP 1
4528: PPUSH
4529: CALL_OW 310
4533: NOT
4534: IFFALSE 4548
// Say ( JMM , DX2a-JMM-1 ) ;
4536: LD_EXP 1
4540: PPUSH
4541: LD_STRING DX2a-JMM-1
4543: PPUSH
4544: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4548: LD_EXP 2
4552: PPUSH
4553: CALL_OW 310
4557: PUSH
4558: LD_VAR 0 1
4562: PUSH
4563: LD_INT 1
4565: ARRAY
4566: EQUAL
4567: IFFALSE 4581
// Say ( Bobby , DX2a-Bobby-1 ) ;
4569: LD_EXP 2
4573: PPUSH
4574: LD_STRING DX2a-Bobby-1
4576: PPUSH
4577: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4581: LD_EXP 3
4585: PPUSH
4586: CALL_OW 310
4590: PUSH
4591: LD_VAR 0 1
4595: PUSH
4596: LD_INT 1
4598: ARRAY
4599: EQUAL
4600: IFFALSE 4614
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4602: LD_EXP 3
4606: PPUSH
4607: LD_STRING DX2a-Cyrus-1
4609: PPUSH
4610: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 310
4623: PUSH
4624: LD_VAR 0 1
4628: PUSH
4629: LD_INT 1
4631: ARRAY
4632: EQUAL
4633: IFFALSE 4647
// Say ( Lisa , DX2a-Lisa-1 ) ;
4635: LD_EXP 4
4639: PPUSH
4640: LD_STRING DX2a-Lisa-1
4642: PPUSH
4643: CALL_OW 88
// for i in temp1 do
4647: LD_ADDR_VAR 0 4
4651: PUSH
4652: LD_VAR 0 2
4656: PUSH
4657: FOR_IN
4658: IFFALSE 4695
// if IsInUnit ( i ) = tmp [ 1 ] then
4660: LD_VAR 0 4
4664: PPUSH
4665: CALL_OW 310
4669: PUSH
4670: LD_VAR 0 1
4674: PUSH
4675: LD_INT 1
4677: ARRAY
4678: EQUAL
4679: IFFALSE 4693
// Say ( i , DX2a-Sol1-1 ) ;
4681: LD_VAR 0 4
4685: PPUSH
4686: LD_STRING DX2a-Sol1-1
4688: PPUSH
4689: CALL_OW 88
4693: GO 4657
4695: POP
4696: POP
// for i in temp2 do
4697: LD_ADDR_VAR 0 4
4701: PUSH
4702: LD_VAR 0 3
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4745
// if IsInUnit ( i ) = tmp [ 1 ] then
4710: LD_VAR 0 4
4714: PPUSH
4715: CALL_OW 310
4719: PUSH
4720: LD_VAR 0 1
4724: PUSH
4725: LD_INT 1
4727: ARRAY
4728: EQUAL
4729: IFFALSE 4743
// Say ( i , DX2a-FSol1-1 ) ;
4731: LD_VAR 0 4
4735: PPUSH
4736: LD_STRING DX2a-FSol1-1
4738: PPUSH
4739: CALL_OW 88
4743: GO 4707
4745: POP
4746: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4747: LD_EXP 1
4751: PPUSH
4752: CALL_OW 310
4756: PUSH
4757: LD_VAR 0 1
4761: PUSH
4762: LD_INT 1
4764: ARRAY
4765: EQUAL
4766: IFFALSE 4780
// Say ( JMM , DX2b-JMM-1 ) ;
4768: LD_EXP 1
4772: PPUSH
4773: LD_STRING DX2b-JMM-1
4775: PPUSH
4776: CALL_OW 88
// if not IsInUnit ( JMM ) then
4780: LD_EXP 1
4784: PPUSH
4785: CALL_OW 310
4789: NOT
4790: IFFALSE 4804
// Say ( JMM , DX2a-JMM-2 ) ;
4792: LD_EXP 1
4796: PPUSH
4797: LD_STRING DX2a-JMM-2
4799: PPUSH
4800: CALL_OW 88
// end ;
4804: PPOPN 4
4806: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 255
4814: PUSH
4815: LD_INT 1
4817: EQUAL
4818: PUSH
4819: LD_INT 10
4821: PPUSH
4822: CALL_OW 255
4826: PUSH
4827: LD_INT 1
4829: EQUAL
4830: OR
4831: IFFALSE 4891
4833: GO 4835
4835: DISABLE
// begin DialogueOn ;
4836: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING D3-JMM-1
4847: PPUSH
4848: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4852: LD_EXP 9
4856: PPUSH
4857: LD_STRING D3-Pow-1
4859: PPUSH
4860: CALL_OW 94
// if IsOK ( Cyrus ) then
4864: LD_EXP 3
4868: PPUSH
4869: CALL_OW 302
4873: IFFALSE 4887
// Say ( Cyrus , D3-Cyrus-1 ) ;
4875: LD_EXP 3
4879: PPUSH
4880: LD_STRING D3-Cyrus-1
4882: PPUSH
4883: CALL_OW 88
// DialogueOff ;
4887: CALL_OW 7
// end ;
4891: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , i ;
4892: LD_INT 1
4894: PPUSH
4895: CALL_OW 255
4899: PUSH
4900: LD_INT 1
4902: EQUAL
4903: PUSH
4904: LD_INT 10
4906: PPUSH
4907: CALL_OW 255
4911: PUSH
4912: LD_INT 1
4914: EQUAL
4915: AND
4916: IFFALSE 6098
4918: GO 4920
4920: DISABLE
4921: LD_INT 0
4923: PPUSH
4924: PPUSH
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) diff [ JMM ] ;
4925: LD_ADDR_VAR 0 1
4929: PUSH
4930: LD_INT 22
4932: PUSH
4933: LD_INT 1
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: PUSH
4940: LD_INT 23
4942: PUSH
4943: LD_INT 1
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_INT 25
4952: PUSH
4953: LD_INT 2
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: PUSH
4970: LD_EXP 1
4974: PUSH
4975: EMPTY
4976: LIST
4977: DIFF
4978: ST_TO_ADDR
// DialogueOn ;
4979: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
4983: LD_EXP 1
4987: PPUSH
4988: LD_STRING D3a-JMM-1
4990: PPUSH
4991: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
4995: LD_EXP 9
4999: PPUSH
5000: LD_STRING D3a-Pow-1
5002: PPUSH
5003: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5007: LD_EXP 1
5011: PPUSH
5012: LD_STRING D3a-JMM-2
5014: PPUSH
5015: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5019: LD_EXP 9
5023: PPUSH
5024: LD_STRING D3a-Pow-2
5026: PPUSH
5027: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5031: LD_EXP 1
5035: PPUSH
5036: LD_STRING D3a-JMM-3
5038: PPUSH
5039: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5043: LD_EXP 9
5047: PPUSH
5048: LD_STRING D3a-Pow-3
5050: PPUSH
5051: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5055: LD_EXP 1
5059: PPUSH
5060: LD_STRING D3a-JMM-4
5062: PPUSH
5063: CALL_OW 88
// DialogueOff ;
5067: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5071: LD_STRING M2
5073: PPUSH
5074: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5078: LD_EXP 1
5082: PPUSH
5083: LD_STRING D3b-JMM-1
5085: PPUSH
5086: CALL_OW 88
// wait ( 0 0$5 ) ;
5090: LD_INT 175
5092: PPUSH
5093: CALL_OW 67
// InGameOn ;
5097: CALL_OW 8
// PrepareRussianHeroes ;
5101: CALL 10916 0 0
// CenterNowOnUnits ( Mikhail ) ;
5105: LD_EXP 8
5109: PPUSH
5110: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5114: LD_EXP 1
5118: PUSH
5119: LD_VAR 0 1
5123: PUSH
5124: LD_INT 1
5126: ARRAY
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PPUSH
5132: LD_EXP 8
5136: PPUSH
5137: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5141: LD_EXP 8
5145: PPUSH
5146: LD_VAR 0 1
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PPUSH
5155: CALL_OW 119
// Say ( Mikhail , D4-Mikh-1 ) ;
5159: LD_EXP 8
5163: PPUSH
5164: LD_STRING D4-Mikh-1
5166: PPUSH
5167: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5171: LD_VAR 0 1
5175: PUSH
5176: LD_INT 1
5178: ARRAY
5179: PPUSH
5180: CALL_OW 258
5184: PUSH
5185: LD_INT 1
5187: EQUAL
5188: IFFALSE 5206
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5190: LD_VAR 0 1
5194: PUSH
5195: LD_INT 1
5197: ARRAY
5198: PPUSH
5199: LD_STRING D4-Sol1-1
5201: PPUSH
5202: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5206: LD_VAR 0 1
5210: PUSH
5211: LD_INT 1
5213: ARRAY
5214: PPUSH
5215: CALL_OW 258
5219: PUSH
5220: LD_INT 2
5222: EQUAL
5223: IFFALSE 5241
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5225: LD_VAR 0 1
5229: PUSH
5230: LD_INT 1
5232: ARRAY
5233: PPUSH
5234: LD_STRING D4-FSol1-1
5236: PPUSH
5237: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5241: LD_EXP 8
5245: PPUSH
5246: LD_STRING D4-Mikh-2
5248: PPUSH
5249: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5253: LD_VAR 0 1
5257: PUSH
5258: LD_INT 1
5260: ARRAY
5261: PPUSH
5262: CALL_OW 258
5266: PUSH
5267: LD_INT 1
5269: EQUAL
5270: IFFALSE 5288
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5272: LD_VAR 0 1
5276: PUSH
5277: LD_INT 1
5279: ARRAY
5280: PPUSH
5281: LD_STRING D4-Sol1-2
5283: PPUSH
5284: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5288: LD_VAR 0 1
5292: PUSH
5293: LD_INT 1
5295: ARRAY
5296: PPUSH
5297: CALL_OW 258
5301: PUSH
5302: LD_INT 2
5304: EQUAL
5305: IFFALSE 5323
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5307: LD_VAR 0 1
5311: PUSH
5312: LD_INT 1
5314: ARRAY
5315: PPUSH
5316: LD_STRING D4-FSol1-2
5318: PPUSH
5319: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5323: LD_EXP 8
5327: PPUSH
5328: LD_STRING D4-Mikh-3
5330: PPUSH
5331: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5335: LD_VAR 0 1
5339: PUSH
5340: LD_INT 1
5342: ARRAY
5343: PPUSH
5344: CALL_OW 258
5348: PUSH
5349: LD_INT 1
5351: EQUAL
5352: IFFALSE 5370
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 1
5361: ARRAY
5362: PPUSH
5363: LD_STRING D4-Sol1-3
5365: PPUSH
5366: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5370: LD_VAR 0 1
5374: PUSH
5375: LD_INT 1
5377: ARRAY
5378: PPUSH
5379: CALL_OW 258
5383: PUSH
5384: LD_INT 2
5386: EQUAL
5387: IFFALSE 5405
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5389: LD_VAR 0 1
5393: PUSH
5394: LD_INT 1
5396: ARRAY
5397: PPUSH
5398: LD_STRING D4-FSol1-3
5400: PPUSH
5401: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5405: LD_EXP 8
5409: PPUSH
5410: LD_STRING D4-Mikh-4
5412: PPUSH
5413: CALL_OW 88
// case query ( Qs1 ) of 1 :
5417: LD_STRING Qs1
5419: PPUSH
5420: CALL_OW 97
5424: PUSH
5425: LD_INT 1
5427: DOUBLE
5428: EQUAL
5429: IFTRUE 5433
5431: GO 5468
5433: POP
// begin InGameOff ;
5434: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5438: LD_INT 1
5440: PPUSH
5441: LD_INT 6
5443: PPUSH
5444: LD_INT 2
5446: PPUSH
5447: LD_INT 1
5449: PPUSH
5450: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5454: LD_EXP 8
5458: PPUSH
5459: LD_INT 17
5461: PPUSH
5462: CALL_OW 113
// end ; 2 :
5466: GO 6090
5468: LD_INT 2
5470: DOUBLE
5471: EQUAL
5472: IFTRUE 5476
5474: GO 6055
5476: POP
// begin repeat wait ( 0 0$1 ) ;
5477: LD_INT 35
5479: PPUSH
5480: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5484: LD_VAR 0 1
5488: PUSH
5489: LD_INT 1
5491: ARRAY
5492: PPUSH
5493: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5497: LD_VAR 0 1
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PPUSH
5506: LD_EXP 1
5510: PPUSH
5511: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5515: LD_EXP 8
5519: PPUSH
5520: LD_EXP 1
5524: PPUSH
5525: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5529: LD_EXP 1
5533: PPUSH
5534: LD_EXP 8
5538: PPUSH
5539: CALL_OW 296
5543: PUSH
5544: LD_INT 5
5546: LESS
5547: IFFALSE 5477
// ComTurnUnit ( Mikhail , JMM ) ;
5549: LD_EXP 8
5553: PPUSH
5554: LD_EXP 1
5558: PPUSH
5559: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5563: LD_EXP 1
5567: PPUSH
5568: LD_STRING D4b-JMM-1
5570: PPUSH
5571: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5575: LD_EXP 8
5579: PPUSH
5580: LD_STRING D4b-Mikh-1
5582: PPUSH
5583: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5587: LD_EXP 1
5591: PPUSH
5592: LD_STRING D4b-JMM-2
5594: PPUSH
5595: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5599: LD_EXP 8
5603: PPUSH
5604: LD_STRING D4b-Mikh-2
5606: PPUSH
5607: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5611: LD_EXP 1
5615: PPUSH
5616: LD_STRING D4b-JMM-3
5618: PPUSH
5619: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5623: LD_EXP 8
5627: PPUSH
5628: LD_STRING D4b-Mikh-3
5630: PPUSH
5631: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5635: LD_EXP 1
5639: PPUSH
5640: LD_STRING D4b-JMM-4
5642: PPUSH
5643: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5647: LD_EXP 8
5651: PPUSH
5652: LD_STRING D4b-Mikh-4
5654: PPUSH
5655: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5659: LD_EXP 1
5663: PPUSH
5664: LD_STRING D4b-JMM-5
5666: PPUSH
5667: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5671: LD_EXP 8
5675: PPUSH
5676: LD_STRING D4b-Mikh-5
5678: PPUSH
5679: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5683: LD_EXP 1
5687: PPUSH
5688: LD_STRING D4b-JMM-6
5690: PPUSH
5691: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5695: LD_EXP 8
5699: PPUSH
5700: LD_STRING D4b-Mikh-6
5702: PPUSH
5703: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5707: LD_EXP 1
5711: PPUSH
5712: LD_STRING D4b-JMM-7
5714: PPUSH
5715: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5719: LD_EXP 8
5723: PPUSH
5724: LD_STRING D4b-Mikh-7
5726: PPUSH
5727: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5731: LD_VAR 0 1
5735: PUSH
5736: LD_INT 1
5738: ARRAY
5739: PPUSH
5740: CALL_OW 258
5744: PUSH
5745: LD_INT 1
5747: EQUAL
5748: IFFALSE 5766
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5750: LD_VAR 0 1
5754: PUSH
5755: LD_INT 1
5757: ARRAY
5758: PPUSH
5759: LD_STRING D4b-Sol1-7
5761: PPUSH
5762: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5766: LD_VAR 0 1
5770: PUSH
5771: LD_INT 1
5773: ARRAY
5774: PPUSH
5775: CALL_OW 258
5779: PUSH
5780: LD_INT 2
5782: EQUAL
5783: IFFALSE 5801
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5785: LD_VAR 0 1
5789: PUSH
5790: LD_INT 1
5792: ARRAY
5793: PPUSH
5794: LD_STRING D4b-FSol1-7
5796: PPUSH
5797: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5801: LD_EXP 1
5805: PPUSH
5806: LD_STRING D4b-JMM-8
5808: PPUSH
5809: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5813: LD_VAR 0 1
5817: PUSH
5818: LD_INT 1
5820: ARRAY
5821: PPUSH
5822: CALL_OW 258
5826: PUSH
5827: LD_INT 1
5829: EQUAL
5830: IFFALSE 5848
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5832: LD_VAR 0 1
5836: PUSH
5837: LD_INT 1
5839: ARRAY
5840: PPUSH
5841: LD_STRING D4b-Sol1-8
5843: PPUSH
5844: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5848: LD_VAR 0 1
5852: PUSH
5853: LD_INT 1
5855: ARRAY
5856: PPUSH
5857: CALL_OW 258
5861: PUSH
5862: LD_INT 2
5864: EQUAL
5865: IFFALSE 5883
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
5867: LD_VAR 0 1
5871: PUSH
5872: LD_INT 1
5874: ARRAY
5875: PPUSH
5876: LD_STRING D4b-FSol1-8
5878: PPUSH
5879: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
5883: LD_EXP 1
5887: PPUSH
5888: LD_STRING D4b-JMM-9
5890: PPUSH
5891: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
5895: LD_EXP 8
5899: PPUSH
5900: LD_INT 1
5902: PPUSH
5903: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5907: LD_ADDR_VAR 0 2
5911: PUSH
5912: LD_INT 22
5914: PUSH
5915: LD_INT 1
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: EMPTY
5923: LIST
5924: PPUSH
5925: CALL_OW 69
5929: PUSH
5930: FOR_IN
5931: IFFALSE 5944
// ComFree ( i ) ;
5933: LD_VAR 0 2
5937: PPUSH
5938: CALL_OW 139
5942: GO 5930
5944: POP
5945: POP
// repeat wait ( 0 0$1 ) ;
5946: LD_INT 35
5948: PPUSH
5949: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
5953: LD_EXP 8
5957: PPUSH
5958: CALL_OW 87
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
5962: LD_EXP 8
5966: PPUSH
5967: LD_INT 1
5969: PPUSH
5970: CALL_OW 296
5974: PUSH
5975: LD_EXP 8
5979: PPUSH
5980: LD_INT 10
5982: PPUSH
5983: CALL_OW 296
5987: LESS
5988: IFFALSE 6004
// begin ComEnterUnit ( Mikhail , dep1 ) ;
5990: LD_EXP 8
5994: PPUSH
5995: LD_INT 1
5997: PPUSH
5998: CALL_OW 120
// end else
6002: GO 6016
// begin ComEnterUnit ( Mikhail , dep2 ) ;
6004: LD_EXP 8
6008: PPUSH
6009: LD_INT 10
6011: PPUSH
6012: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
6016: LD_EXP 8
6020: PPUSH
6021: CALL_OW 310
6025: IFFALSE 5946
// mikhailDepot = IsInUnit ( Mikhail ) ;
6027: LD_ADDR_EXP 23
6031: PUSH
6032: LD_EXP 8
6036: PPUSH
6037: CALL_OW 310
6041: ST_TO_ADDR
// InGameOff ;
6042: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6046: LD_STRING M3
6048: PPUSH
6049: CALL_OW 337
// end ; 3 :
6053: GO 6090
6055: LD_INT 3
6057: DOUBLE
6058: EQUAL
6059: IFTRUE 6063
6061: GO 6089
6063: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6064: LD_EXP 8
6068: PPUSH
6069: LD_INT 17
6071: PPUSH
6072: CALL_OW 113
// wait ( 0 0$3 ) ;
6076: LD_INT 105
6078: PPUSH
6079: CALL_OW 67
// InGameOff ;
6083: CALL_OW 9
// end ; end ;
6087: GO 6090
6089: POP
// PrepareTigers ;
6090: CALL 13364 0 0
// RussianTrap ;
6094: CALL 9550 0 0
// end ;
6098: PPOPN 2
6100: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6101: LD_INT 1
6103: PPUSH
6104: CALL_OW 255
6108: PUSH
6109: LD_INT 1
6111: EQUAL
6112: PUSH
6113: LD_INT 10
6115: PPUSH
6116: CALL_OW 255
6120: PUSH
6121: LD_INT 1
6123: EQUAL
6124: AND
6125: PUSH
6126: LD_INT 1
6128: PPUSH
6129: CALL_OW 274
6133: PPUSH
6134: LD_INT 1
6136: PPUSH
6137: CALL_OW 275
6141: PUSH
6142: LD_INT 100
6144: GREATEREQUAL
6145: AND
6146: IFFALSE 6309
6148: GO 6150
6150: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6151: LD_INT 2100
6153: PPUSH
6154: LD_INT 4200
6156: PPUSH
6157: CALL_OW 12
6161: PUSH
6162: LD_INT 1050
6164: PLUS
6165: PPUSH
6166: CALL_OW 67
// PrepareCargoBays ;
6170: CALL 12032 0 0
// cargoRespawn = 1 ;
6174: LD_ADDR_EXP 28
6178: PUSH
6179: LD_INT 1
6181: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6182: LD_EXP 15
6186: PUSH
6187: LD_EXP 16
6191: PUSH
6192: LD_EXP 17
6196: PUSH
6197: LD_EXP 18
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: PPUSH
6208: LD_INT 36
6210: PPUSH
6211: LD_INT 13
6213: PPUSH
6214: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6218: LD_EXP 15
6222: PUSH
6223: LD_EXP 16
6227: PUSH
6228: LD_EXP 17
6232: PUSH
6233: LD_EXP 18
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: PPUSH
6244: LD_INT 40
6246: PPUSH
6247: LD_INT 20
6249: PPUSH
6250: CALL_OW 171
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6254: LD_EXP 15
6258: PUSH
6259: LD_EXP 16
6263: PUSH
6264: LD_EXP 17
6268: PUSH
6269: LD_EXP 18
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: PPUSH
6280: LD_INT 53
6282: PPUSH
6283: LD_INT 16
6285: PPUSH
6286: CALL_OW 111
// wait ( 0 0$5 ) ;
6290: LD_INT 175
6292: PPUSH
6293: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6297: LD_EXP 17
6301: PPUSH
6302: LD_STRING D5-Rus2-1
6304: PPUSH
6305: CALL_OW 88
// end ;
6309: END
// every 0 0$1 trigger GetLives ( cargo1 ) < 999 or GetLives ( cargo2 ) < 999 and cargoRespawn = 1 do
6310: LD_EXP 15
6314: PPUSH
6315: CALL_OW 256
6319: PUSH
6320: LD_INT 999
6322: LESS
6323: PUSH
6324: LD_EXP 16
6328: PPUSH
6329: CALL_OW 256
6333: PUSH
6334: LD_INT 999
6336: LESS
6337: PUSH
6338: LD_EXP 28
6342: PUSH
6343: LD_INT 1
6345: EQUAL
6346: AND
6347: OR
6348: IFFALSE 6397
6350: GO 6352
6352: DISABLE
// begin ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6353: LD_EXP 15
6357: PUSH
6358: LD_EXP 16
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PPUSH
6367: LD_INT 7
6369: PPUSH
6370: LD_INT 9
6372: PPUSH
6373: CALL_OW 111
// Say ( driver1 , D5-Rus2-1a ) ;
6377: LD_EXP 17
6381: PPUSH
6382: LD_STRING D5-Rus2-1a
6384: PPUSH
6385: CALL_OW 88
// cargoEscape = 1 ;
6389: LD_ADDR_EXP 20
6393: PUSH
6394: LD_INT 1
6396: ST_TO_ADDR
// end ;
6397: END
// every 0 0$1 trigger cargoEscape > 0 do
6398: LD_EXP 20
6402: PUSH
6403: LD_INT 0
6405: GREATER
6406: IFFALSE 6532
6408: GO 6410
6410: DISABLE
// begin enable ;
6411: ENABLE
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6412: LD_EXP 15
6416: PPUSH
6417: LD_INT 13
6419: PPUSH
6420: CALL_OW 308
6424: PUSH
6425: LD_EXP 17
6429: PPUSH
6430: LD_INT 13
6432: PPUSH
6433: CALL_OW 308
6437: OR
6438: IFFALSE 6472
// begin RemoveUnit ( cargo1 ) ;
6440: LD_EXP 15
6444: PPUSH
6445: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6449: LD_EXP 17
6453: PPUSH
6454: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6458: LD_ADDR_EXP 20
6462: PUSH
6463: LD_EXP 20
6467: PUSH
6468: LD_INT 1
6470: PLUS
6471: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6472: LD_EXP 16
6476: PPUSH
6477: LD_INT 13
6479: PPUSH
6480: CALL_OW 308
6484: PUSH
6485: LD_EXP 18
6489: PPUSH
6490: LD_INT 13
6492: PPUSH
6493: CALL_OW 308
6497: OR
6498: IFFALSE 6532
// begin RemoveUnit ( cargo2 ) ;
6500: LD_EXP 16
6504: PPUSH
6505: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6509: LD_EXP 18
6513: PPUSH
6514: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6518: LD_ADDR_EXP 20
6522: PUSH
6523: LD_EXP 20
6527: PUSH
6528: LD_INT 1
6530: PLUS
6531: ST_TO_ADDR
// end ; end ;
6532: END
// every 0 0$1 trigger cargoEscape > 1 do
6533: LD_EXP 20
6537: PUSH
6538: LD_INT 1
6540: GREATER
6541: IFFALSE 6705
6543: GO 6545
6545: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
6546: LD_INT 4
6548: PPUSH
6549: LD_INT 1
6551: PPUSH
6552: LD_INT 1
6554: PPUSH
6555: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6559: LD_INT 31
6561: PPUSH
6562: LD_INT 1
6564: PPUSH
6565: LD_INT 1
6567: PPUSH
6568: CALL_OW 324
// if IsOK ( Jerry ) then
6572: LD_EXP 7
6576: PPUSH
6577: CALL_OW 302
6581: IFFALSE 6597
// begin Say ( Jerry , D5a-Sol1-1 ) ;
6583: LD_EXP 7
6587: PPUSH
6588: LD_STRING D5a-Sol1-1
6590: PPUSH
6591: CALL_OW 88
// end else
6595: GO 6693
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
6597: LD_INT 22
6599: PUSH
6600: LD_INT 1
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 23
6609: PUSH
6610: LD_INT 1
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: LD_INT 26
6619: PUSH
6620: LD_INT 1
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: LIST
6631: PPUSH
6632: CALL_OW 69
6636: PUSH
6637: LD_INT 2
6639: PPUSH
6640: LD_INT 22
6642: PUSH
6643: LD_INT 1
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PUSH
6650: LD_INT 23
6652: PUSH
6653: LD_INT 1
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PUSH
6660: LD_INT 26
6662: PUSH
6663: LD_INT 1
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: PPUSH
6675: CALL_OW 69
6679: PPUSH
6680: CALL_OW 12
6684: ARRAY
6685: PPUSH
6686: LD_STRING D5a-Sol1-1
6688: PPUSH
6689: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6693: LD_EXP 1
6697: PPUSH
6698: LD_STRING D5a-JMM-1
6700: PPUSH
6701: CALL_OW 88
// end ;
6705: END
// every 0 0$1 trigger GetLives ( dep1 ) < 1000 or GetLives ( dep2 ) < 1000 do
6706: LD_INT 1
6708: PPUSH
6709: CALL_OW 256
6713: PUSH
6714: LD_INT 1000
6716: LESS
6717: PUSH
6718: LD_INT 10
6720: PPUSH
6721: CALL_OW 256
6725: PUSH
6726: LD_INT 1000
6728: LESS
6729: OR
6730: IFFALSE 6747
6732: GO 6734
6734: DISABLE
// Say ( JMM ,  D8-JMM-1 ) ;
6735: LD_EXP 1
6739: PPUSH
6740: LD_STRING  D8-JMM-1
6742: PPUSH
6743: CALL_OW 88
6747: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6748: LD_EXP 8
6752: PPUSH
6753: CALL_OW 310
6757: PUSH
6758: LD_INT 1
6760: EQUAL
6761: PUSH
6762: LD_EXP 22
6766: PUSH
6767: LD_INT 3
6769: EQUAL
6770: NOT
6771: AND
6772: IFFALSE 6794
6774: GO 6776
6776: DISABLE
// begin mikhailInBase = 1 ;
6777: LD_ADDR_EXP 22
6781: PUSH
6782: LD_INT 1
6784: ST_TO_ADDR
// mikhailStatus = 1 ;
6785: LD_ADDR_EXP 21
6789: PUSH
6790: LD_INT 1
6792: ST_TO_ADDR
// enable ;
6793: ENABLE
// end ;
6794: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
6795: LD_EXP 8
6799: PPUSH
6800: LD_INT 25
6802: PPUSH
6803: CALL_OW 308
6807: PUSH
6808: LD_EXP 22
6812: PUSH
6813: LD_INT 1
6815: EQUAL
6816: AND
6817: PUSH
6818: LD_EXP 8
6822: PPUSH
6823: CALL_OW 255
6827: PUSH
6828: LD_INT 1
6830: EQUAL
6831: AND
6832: IFFALSE 7162
6834: GO 6836
6836: DISABLE
// begin enable ;
6837: ENABLE
// case query ( QMikh2 ) of 1 :
6838: LD_STRING QMikh2
6840: PPUSH
6841: CALL_OW 97
6845: PUSH
6846: LD_INT 1
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6921
6854: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
6855: LD_INT 1
6857: PPUSH
6858: LD_INT 6
6860: PPUSH
6861: LD_INT 2
6863: PPUSH
6864: LD_INT 1
6866: PPUSH
6867: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
6871: LD_EXP 8
6875: PPUSH
6876: LD_INT 6
6878: PPUSH
6879: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6883: LD_EXP 8
6887: PPUSH
6888: CALL_OW 122
// wait ( 0 0$1 ) ;
6892: LD_INT 35
6894: PPUSH
6895: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
6899: LD_EXP 8
6903: PPUSH
6904: LD_INT 17
6906: PPUSH
6907: CALL_OW 113
// mikhailInbase = 0 ;
6911: LD_ADDR_EXP 22
6915: PUSH
6916: LD_INT 0
6918: ST_TO_ADDR
// end ; 2 :
6919: GO 7162
6921: LD_INT 2
6923: DOUBLE
6924: EQUAL
6925: IFTRUE 6929
6927: GO 7102
6929: POP
// begin mikhailInBase = 2 ;
6930: LD_ADDR_EXP 22
6934: PUSH
6935: LD_INT 2
6937: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
6938: LD_EXP 8
6942: PPUSH
6943: LD_INT 6
6945: PPUSH
6946: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6950: LD_EXP 8
6954: PPUSH
6955: CALL_OW 122
// wait ( 0 0$1 ) ;
6959: LD_INT 35
6961: PPUSH
6962: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
6966: LD_EXP 8
6970: PPUSH
6971: LD_EXP 8
6975: PPUSH
6976: CALL_OW 250
6980: PUSH
6981: LD_INT 2
6983: PLUS
6984: PPUSH
6985: LD_EXP 8
6989: PPUSH
6990: CALL_OW 251
6994: PUSH
6995: LD_INT 2
6997: PLUS
6998: PPUSH
6999: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7003: LD_EXP 8
7007: PPUSH
7008: LD_EXP 8
7012: PPUSH
7013: CALL_OW 250
7017: PUSH
7018: LD_INT 1
7020: PLUS
7021: PPUSH
7022: LD_EXP 8
7026: PPUSH
7027: CALL_OW 251
7031: PUSH
7032: LD_INT 2
7034: PLUS
7035: PPUSH
7036: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7040: LD_EXP 8
7044: PPUSH
7045: LD_EXP 8
7049: PPUSH
7050: CALL_OW 250
7054: PUSH
7055: LD_INT 2
7057: PLUS
7058: PPUSH
7059: LD_EXP 8
7063: PPUSH
7064: CALL_OW 251
7068: PPUSH
7069: CALL_OW 171
// wait ( 0 0$5 ) ;
7073: LD_INT 175
7075: PPUSH
7076: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7080: LD_EXP 8
7084: PPUSH
7085: LD_INT 25
7087: PPUSH
7088: CALL_OW 113
// mikhailInBase = 4 ;
7092: LD_ADDR_EXP 22
7096: PUSH
7097: LD_INT 4
7099: ST_TO_ADDR
// end ; 3 :
7100: GO 7162
7102: LD_INT 3
7104: DOUBLE
7105: EQUAL
7106: IFTRUE 7110
7108: GO 7161
7110: POP
// begin SetSide ( Mikhail , 6 ) ;
7111: LD_EXP 8
7115: PPUSH
7116: LD_INT 6
7118: PPUSH
7119: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7123: LD_EXP 8
7127: PPUSH
7128: CALL_OW 122
// wait ( 0 0$1 ) ;
7132: LD_INT 35
7134: PPUSH
7135: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7139: LD_EXP 8
7143: PPUSH
7144: LD_INT 17
7146: PPUSH
7147: CALL_OW 113
// mikhailInbase = 3 ;
7151: LD_ADDR_EXP 22
7155: PUSH
7156: LD_INT 3
7158: ST_TO_ADDR
// end ; end ;
7159: GO 7162
7161: POP
// end ;
7162: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7163: LD_EXP 8
7167: PPUSH
7168: LD_INT 25
7170: PPUSH
7171: CALL_OW 308
7175: PUSH
7176: LD_EXP 22
7180: PUSH
7181: LD_INT 4
7183: EQUAL
7184: AND
7185: IFFALSE 7283
7187: GO 7189
7189: DISABLE
// begin enable ;
7190: ENABLE
// SetSide ( Mikhail , 1 ) ;
7191: LD_EXP 8
7195: PPUSH
7196: LD_INT 1
7198: PPUSH
7199: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7203: LD_INT 35
7205: PPUSH
7206: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
7210: LD_EXP 8
7214: PPUSH
7215: LD_INT 1
7217: PPUSH
7218: CALL_OW 296
7222: PUSH
7223: LD_EXP 8
7227: PPUSH
7228: LD_INT 10
7230: PPUSH
7231: CALL_OW 296
7235: LESS
7236: IFFALSE 7252
// begin ComEnterUnit ( Mikhail , dep1 ) ;
7238: LD_EXP 8
7242: PPUSH
7243: LD_INT 1
7245: PPUSH
7246: CALL_OW 120
// end else
7250: GO 7264
// begin ComEnterUnit ( Mikhail , dep2 ) ;
7252: LD_EXP 8
7256: PPUSH
7257: LD_INT 10
7259: PPUSH
7260: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
7264: LD_EXP 8
7268: PPUSH
7269: CALL_OW 310
7273: IFFALSE 7203
// mikhailInBase = 1 ;
7275: LD_ADDR_EXP 22
7279: PUSH
7280: LD_INT 1
7282: ST_TO_ADDR
// end ;
7283: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7284: LD_EXP 8
7288: PPUSH
7289: CALL_OW 310
7293: PUSH
7294: LD_EXP 22
7298: PUSH
7299: LD_INT 3
7301: EQUAL
7302: NOT
7303: AND
7304: IFFALSE 7430
7306: GO 7308
7308: DISABLE
// begin enable ;
7309: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7310: LD_INT 22
7312: PUSH
7313: LD_INT 1
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 21
7322: PUSH
7323: LD_INT 1
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 91
7332: PUSH
7333: LD_EXP 8
7337: PPUSH
7338: CALL_OW 310
7342: PUSH
7343: LD_INT 10
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 69
7360: PUSH
7361: LD_INT 1
7363: EQUAL
7364: IFFALSE 7430
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7366: LD_INT 1
7368: PPUSH
7369: LD_INT 6
7371: PPUSH
7372: LD_INT 2
7374: PPUSH
7375: LD_INT 1
7377: PPUSH
7378: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7382: LD_EXP 8
7386: PPUSH
7387: LD_INT 6
7389: PPUSH
7390: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7394: LD_EXP 8
7398: PPUSH
7399: CALL_OW 122
// wait ( 0 0$1 ) ;
7403: LD_INT 35
7405: PPUSH
7406: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7410: LD_EXP 8
7414: PPUSH
7415: LD_INT 17
7417: PPUSH
7418: CALL_OW 113
// mikhailStatus = 3 ;
7422: LD_ADDR_EXP 21
7426: PUSH
7427: LD_INT 3
7429: ST_TO_ADDR
// end ; end ;
7430: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7431: LD_EXP 1
7435: PPUSH
7436: LD_EXP 23
7440: PPUSH
7441: CALL_OW 296
7445: PUSH
7446: LD_INT 5
7448: LESS
7449: PUSH
7450: LD_EXP 21
7454: PUSH
7455: LD_INT 3
7457: EQUAL
7458: AND
7459: PUSH
7460: LD_EXP 22
7464: PUSH
7465: LD_INT 3
7467: EQUAL
7468: NOT
7469: AND
7470: IFFALSE 7686
7472: GO 7474
7474: DISABLE
7475: LD_INT 0
7477: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
7478: LD_ADDR_VAR 0 1
7482: PUSH
7483: LD_INT 22
7485: PUSH
7486: LD_INT 1
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 21
7495: PUSH
7496: LD_INT 1
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: LD_INT 26
7505: PUSH
7506: LD_INT 1
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: LIST
7517: PPUSH
7518: CALL_OW 69
7522: PUSH
7523: LD_EXP 1
7527: PUSH
7528: EMPTY
7529: LIST
7530: DIFF
7531: ST_TO_ADDR
// DialogueOn ;
7532: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7536: LD_EXP 1
7540: PPUSH
7541: LD_STRING D7-JMM-1
7543: PPUSH
7544: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7548: LD_VAR 0 1
7552: PUSH
7553: LD_INT 1
7555: ARRAY
7556: PPUSH
7557: LD_STRING D7-Sol1-1
7559: PPUSH
7560: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7564: LD_EXP 1
7568: PPUSH
7569: LD_STRING D7-JMM-2
7571: PPUSH
7572: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7576: LD_VAR 0 1
7580: PUSH
7581: LD_INT 1
7583: ARRAY
7584: PPUSH
7585: LD_STRING D7-Sol1-2
7587: PPUSH
7588: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7592: LD_EXP 1
7596: PPUSH
7597: LD_STRING D7-JMM-3
7599: PPUSH
7600: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7604: LD_VAR 0 1
7608: PUSH
7609: LD_INT 1
7611: ARRAY
7612: PPUSH
7613: LD_STRING D7-Sol1-3
7615: PPUSH
7616: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7620: LD_EXP 3
7624: PPUSH
7625: CALL_OW 302
7629: PUSH
7630: LD_EXP 4
7634: PPUSH
7635: CALL_OW 302
7639: AND
7640: IFFALSE 7682
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7642: LD_EXP 3
7646: PPUSH
7647: LD_STRING D7-Cyrus-3
7649: PPUSH
7650: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7654: LD_VAR 0 1
7658: PUSH
7659: LD_INT 1
7661: ARRAY
7662: PPUSH
7663: LD_STRING D7-Sol1-4
7665: PPUSH
7666: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7670: LD_EXP 4
7674: PPUSH
7675: LD_STRING D7-Lisa-4
7677: PPUSH
7678: CALL_OW 88
// end ; DialogueOff ;
7682: CALL_OW 7
// end ;
7686: PPOPN 1
7688: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7689: LD_EXP 8
7693: PPUSH
7694: CALL_OW 303
7698: PUSH
7699: LD_EXP 21
7703: PUSH
7704: LD_INT 3
7706: EQUAL
7707: AND
7708: IFFALSE 7722
7710: GO 7712
7712: DISABLE
// begin enable ;
7713: ENABLE
// mikhailStatus = 2 ;
7714: LD_ADDR_EXP 21
7718: PUSH
7719: LD_INT 2
7721: ST_TO_ADDR
// end ;
7722: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7723: LD_EXP 8
7727: PPUSH
7728: LD_INT 17
7730: PPUSH
7731: CALL_OW 308
7735: PUSH
7736: LD_EXP 8
7740: PPUSH
7741: CALL_OW 255
7745: PUSH
7746: LD_INT 6
7748: EQUAL
7749: AND
7750: IFFALSE 7783
7752: GO 7754
7754: DISABLE
// begin if not mikhailInBase = 3 then
7755: LD_EXP 22
7759: PUSH
7760: LD_INT 3
7762: EQUAL
7763: NOT
7764: IFFALSE 7774
// mikhailStatus = 3 ;
7766: LD_ADDR_EXP 21
7770: PUSH
7771: LD_INT 3
7773: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
7774: LD_EXP 8
7778: PPUSH
7779: CALL_OW 64
// end ;
7783: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
7784: LD_EXP 21
7788: PUSH
7789: LD_INT 3
7791: EQUAL
7792: PUSH
7793: LD_EXP 8
7797: PPUSH
7798: CALL_OW 255
7802: PUSH
7803: LD_INT 6
7805: EQUAL
7806: AND
7807: IFFALSE 7973
7809: GO 7811
7811: DISABLE
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
// begin enable ;
7816: ENABLE
// if IsOk ( Mikhail ) then
7817: LD_EXP 8
7821: PPUSH
7822: CALL_OW 302
7826: IFFALSE 7973
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
7828: LD_ADDR_VAR 0 2
7832: PUSH
7833: LD_EXP 8
7837: PPUSH
7838: LD_INT 22
7840: PUSH
7841: LD_INT 1
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: LD_INT 21
7850: PUSH
7851: LD_INT 1
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PPUSH
7862: CALL_OW 69
7866: PPUSH
7867: CALL 9706 0 2
7871: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
7872: LD_VAR 0 2
7876: PPUSH
7877: LD_EXP 8
7881: PPUSH
7882: CALL_OW 296
7886: PUSH
7887: LD_INT 8
7889: LESS
7890: IFFALSE 7973
// begin if GetSex ( attacker ) = sex_male then
7892: LD_VAR 0 2
7896: PPUSH
7897: CALL_OW 258
7901: PUSH
7902: LD_INT 1
7904: EQUAL
7905: IFFALSE 7941
// begin disable ;
7907: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
7908: LD_VAR 0 2
7912: PPUSH
7913: LD_STRING D7a-Sol1-1
7915: PPUSH
7916: CALL_OW 88
// wait ( 0 0$2 ) ;
7920: LD_INT 70
7922: PPUSH
7923: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
7927: LD_VAR 0 2
7931: PPUSH
7932: LD_STRING D7a-Sol1-1a
7934: PPUSH
7935: CALL_OW 88
// end else
7939: GO 7973
// begin disable ;
7941: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
7942: LD_VAR 0 2
7946: PPUSH
7947: LD_STRING D7a-FSol1-1
7949: PPUSH
7950: CALL_OW 88
// wait ( 0 0$2 ) ;
7954: LD_INT 70
7956: PPUSH
7957: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
7961: LD_VAR 0 2
7965: PPUSH
7966: LD_STRING D7a-FSol1-1a
7968: PPUSH
7969: CALL_OW 88
// end ; end ; end ; end ;
7973: PPOPN 2
7975: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
7976: LD_EXP 27
7980: PUSH
7981: LD_INT 1
7983: EQUAL
7984: PUSH
7985: LD_INT 22
7987: PPUSH
7988: LD_INT 22
7990: PUSH
7991: LD_INT 3
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PUSH
7998: LD_INT 21
8000: PUSH
8001: LD_INT 1
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: PPUSH
8012: CALL_OW 70
8016: PUSH
8017: LD_INT 2
8019: GREATER
8020: AND
8021: PUSH
8022: LD_INT 22
8024: PPUSH
8025: LD_INT 22
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 2
8037: PUSH
8038: LD_INT 21
8040: PUSH
8041: LD_INT 1
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 59
8050: PUSH
8051: EMPTY
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: PPUSH
8063: CALL_OW 70
8067: PUSH
8068: LD_INT 0
8070: EQUAL
8071: AND
8072: IFFALSE 8087
8074: GO 8076
8076: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8077: LD_INT 1
8079: PPUSH
8080: LD_INT 3
8082: PPUSH
8083: CALL_OW 235
// end ; end_of_file
8087: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8088: LD_INT 0
8090: PPUSH
8091: PPUSH
8092: PPUSH
8093: PPUSH
// for i = 1 to count do
8094: LD_ADDR_VAR 0 8
8098: PUSH
8099: DOUBLE
8100: LD_INT 1
8102: DEC
8103: ST_TO_ADDR
8104: LD_VAR 0 6
8108: PUSH
8109: FOR_TO
8110: IFFALSE 8191
// begin uc_side = side ;
8112: LD_ADDR_OWVAR 20
8116: PUSH
8117: LD_VAR 0 1
8121: ST_TO_ADDR
// uc_nation = nation ;
8122: LD_ADDR_OWVAR 21
8126: PUSH
8127: LD_VAR 0 2
8131: ST_TO_ADDR
// hc_gallery =  ;
8132: LD_ADDR_OWVAR 33
8136: PUSH
8137: LD_STRING 
8139: ST_TO_ADDR
// hc_name =  ;
8140: LD_ADDR_OWVAR 26
8144: PUSH
8145: LD_STRING 
8147: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8148: LD_INT 0
8150: PPUSH
8151: LD_VAR 0 5
8155: PPUSH
8156: LD_VAR 0 4
8160: PPUSH
8161: CALL_OW 380
// un = CreateHuman ;
8165: LD_ADDR_VAR 0 10
8169: PUSH
8170: CALL_OW 44
8174: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8175: LD_VAR 0 10
8179: PPUSH
8180: LD_VAR 0 3
8184: PPUSH
8185: CALL_OW 52
// end ;
8189: GO 8109
8191: POP
8192: POP
// end ;
8193: LD_VAR 0 7
8197: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8198: LD_INT 0
8200: PPUSH
8201: PPUSH
8202: PPUSH
// uc_side := GetSide ( b ) ;
8203: LD_ADDR_OWVAR 20
8207: PUSH
8208: LD_VAR 0 2
8212: PPUSH
8213: CALL_OW 255
8217: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8218: LD_ADDR_OWVAR 21
8222: PUSH
8223: LD_VAR 0 2
8227: PPUSH
8228: CALL_OW 248
8232: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8233: LD_INT 0
8235: PPUSH
8236: LD_INT 1
8238: PPUSH
8239: LD_VAR 0 1
8243: PPUSH
8244: CALL_OW 380
// un = CreateHuman ;
8248: LD_ADDR_VAR 0 4
8252: PUSH
8253: CALL_OW 44
8257: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8258: LD_ADDR_VAR 0 5
8262: PUSH
8263: LD_VAR 0 2
8267: PPUSH
8268: CALL_OW 254
8272: PUSH
8273: LD_INT 3
8275: MINUS
8276: ST_TO_ADDR
// if dir < 0 then
8277: LD_VAR 0 5
8281: PUSH
8282: LD_INT 0
8284: LESS
8285: IFFALSE 8301
// dir := 6 + dir ;
8287: LD_ADDR_VAR 0 5
8291: PUSH
8292: LD_INT 6
8294: PUSH
8295: LD_VAR 0 5
8299: PLUS
8300: ST_TO_ADDR
// SetDir ( un , dir ) ;
8301: LD_VAR 0 4
8305: PPUSH
8306: LD_VAR 0 5
8310: PPUSH
8311: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8315: LD_VAR 0 4
8319: PPUSH
8320: LD_VAR 0 2
8324: PPUSH
8325: CALL_OW 52
// end ;
8329: LD_VAR 0 3
8333: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8334: LD_INT 0
8336: PPUSH
8337: PPUSH
8338: PPUSH
8339: PPUSH
8340: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8341: LD_ADDR_VAR 0 7
8345: PUSH
8346: LD_INT 22
8348: PUSH
8349: LD_VAR 0 1
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: LD_INT 25
8360: PUSH
8361: LD_INT 2
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PUSH
8368: LD_INT 24
8370: PUSH
8371: LD_INT 1000
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: LIST
8382: PPUSH
8383: CALL_OW 69
8387: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8388: LD_ADDR_VAR 0 5
8392: PUSH
8393: LD_VAR 0 3
8397: PPUSH
8398: LD_INT 22
8400: PUSH
8401: LD_VAR 0 1
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: LD_INT 21
8412: PUSH
8413: LD_INT 3
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: PUSH
8420: LD_INT 3
8422: PUSH
8423: LD_INT 24
8425: PUSH
8426: LD_INT 1000
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: LIST
8441: PUSH
8442: EMPTY
8443: LIST
8444: PPUSH
8445: CALL_OW 70
8449: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8450: LD_VAR 0 5
8454: PUSH
8455: LD_INT 0
8457: GREATER
8458: PUSH
8459: LD_VAR 0 7
8463: PUSH
8464: LD_INT 0
8466: GREATER
8467: AND
8468: IFFALSE 8534
// begin for i in engineerOk_list do
8470: LD_ADDR_VAR 0 6
8474: PUSH
8475: LD_VAR 0 7
8479: PUSH
8480: FOR_IN
8481: IFFALSE 8532
// begin for j in buildings_list do
8483: LD_ADDR_VAR 0 8
8487: PUSH
8488: LD_VAR 0 5
8492: PUSH
8493: FOR_IN
8494: IFFALSE 8528
// begin AddComExitBuilding ( i ) ;
8496: LD_VAR 0 6
8500: PPUSH
8501: CALL_OW 182
// wait ( 0 0$1 ) ;
8505: LD_INT 35
8507: PPUSH
8508: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8512: LD_VAR 0 6
8516: PPUSH
8517: LD_VAR 0 8
8521: PPUSH
8522: CALL_OW 190
// end ;
8526: GO 8493
8528: POP
8529: POP
// end ;
8530: GO 8480
8532: POP
8533: POP
// end ; if buildings_list = 0 then
8534: LD_VAR 0 5
8538: PUSH
8539: LD_INT 0
8541: EQUAL
8542: IFFALSE 8575
// begin for i in engineerOK_list do
8544: LD_ADDR_VAR 0 6
8548: PUSH
8549: LD_VAR 0 7
8553: PUSH
8554: FOR_IN
8555: IFFALSE 8573
// begin ComEnterUnit ( i , building ) ;
8557: LD_VAR 0 6
8561: PPUSH
8562: LD_VAR 0 2
8566: PPUSH
8567: CALL_OW 120
// end ;
8571: GO 8554
8573: POP
8574: POP
// end ; end ;
8575: LD_VAR 0 4
8579: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8580: LD_INT 0
8582: PPUSH
8583: PPUSH
8584: PPUSH
8585: PPUSH
8586: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8587: LD_ADDR_VAR 0 6
8591: PUSH
8592: LD_INT 22
8594: PUSH
8595: LD_VAR 0 1
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: LD_INT 25
8606: PUSH
8607: LD_INT 4
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 69
8622: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
8623: LD_ADDR_VAR 0 9
8627: PUSH
8628: LD_VAR 0 3
8632: PPUSH
8633: LD_INT 22
8635: PUSH
8636: LD_VAR 0 1
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: LD_INT 21
8647: PUSH
8648: LD_INT 1
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 3
8657: PUSH
8658: LD_INT 24
8660: PUSH
8661: LD_INT 650
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: PPUSH
8677: CALL_OW 70
8681: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
8682: LD_VAR 0 9
8686: PUSH
8687: LD_INT 0
8689: GREATER
8690: PUSH
8691: LD_VAR 0 6
8695: PUSH
8696: LD_INT 0
8698: GREATER
8699: AND
8700: IFFALSE 8827
// begin for i = 1 to damageUnits do
8702: LD_ADDR_VAR 0 7
8706: PUSH
8707: DOUBLE
8708: LD_INT 1
8710: DEC
8711: ST_TO_ADDR
8712: LD_VAR 0 9
8716: PUSH
8717: FOR_TO
8718: IFFALSE 8742
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
8720: LD_VAR 0 9
8724: PUSH
8725: LD_VAR 0 7
8729: ARRAY
8730: PPUSH
8731: LD_VAR 0 2
8735: PPUSH
8736: CALL_OW 113
8740: GO 8717
8742: POP
8743: POP
// for i in sci_list do
8744: LD_ADDR_VAR 0 7
8748: PUSH
8749: LD_VAR 0 6
8753: PUSH
8754: FOR_IN
8755: IFFALSE 8823
// begin ComExitBuilding ( i ) ;
8757: LD_VAR 0 7
8761: PPUSH
8762: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
8766: LD_ADDR_VAR 0 8
8770: PUSH
8771: LD_VAR 0 2
8775: PPUSH
8776: LD_INT 22
8778: PUSH
8779: LD_VAR 0 1
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PPUSH
8788: CALL_OW 70
8792: PUSH
8793: FOR_IN
8794: IFFALSE 8819
// begin AddComHeal ( i , j ) ;
8796: LD_VAR 0 7
8800: PPUSH
8801: LD_VAR 0 8
8805: PPUSH
8806: CALL_OW 188
// wait ( 1 1$0 ) ;
8810: LD_INT 2100
8812: PPUSH
8813: CALL_OW 67
// end ;
8817: GO 8793
8819: POP
8820: POP
// end ;
8821: GO 8754
8823: POP
8824: POP
// end else
8825: GO 8841
// begin AddComEnterUnit ( sci_list , build ) ;
8827: LD_VAR 0 6
8831: PPUSH
8832: LD_VAR 0 4
8836: PPUSH
8837: CALL_OW 180
// end ; end ;
8841: LD_VAR 0 5
8845: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
8846: LD_INT 0
8848: PPUSH
8849: PPUSH
8850: PPUSH
8851: PPUSH
8852: PPUSH
8853: PPUSH
8854: PPUSH
8855: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
8856: LD_ADDR_VAR 0 7
8860: PUSH
8861: LD_VAR 0 3
8865: PPUSH
8866: LD_INT 22
8868: PUSH
8869: LD_VAR 0 1
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 21
8880: PUSH
8881: LD_INT 2
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PUSH
8888: LD_INT 24
8890: PUSH
8891: LD_INT 550
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: LD_INT 34
8900: PUSH
8901: LD_INT 46
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 70
8918: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
8919: LD_ADDR_VAR 0 8
8923: PUSH
8924: LD_VAR 0 3
8928: PPUSH
8929: LD_INT 22
8931: PUSH
8932: LD_VAR 0 1
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: LD_INT 21
8943: PUSH
8944: LD_INT 2
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: LD_INT 34
8953: PUSH
8954: LD_INT 46
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: LD_INT 3
8963: PUSH
8964: LD_INT 24
8966: PUSH
8967: LD_INT 550
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: PPUSH
8984: CALL_OW 70
8988: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
8989: LD_ADDR_VAR 0 9
8993: PUSH
8994: LD_VAR 0 2
8998: PPUSH
8999: LD_INT 22
9001: PUSH
9002: LD_VAR 0 1
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: PUSH
9011: LD_INT 21
9013: PUSH
9014: LD_INT 2
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: LD_INT 34
9023: PUSH
9024: LD_INT 46
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: LD_INT 24
9033: PUSH
9034: LD_INT 1000
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: LD_INT 58
9043: PUSH
9044: EMPTY
9045: LIST
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: PPUSH
9054: CALL_OW 70
9058: ST_TO_ADDR
// for i in damageVehicle_list do
9059: LD_ADDR_VAR 0 5
9063: PUSH
9064: LD_VAR 0 8
9068: PUSH
9069: FOR_IN
9070: IFFALSE 9089
// mechanicInside_list = UnitsInside ( i ) ;
9072: LD_ADDR_VAR 0 10
9076: PUSH
9077: LD_VAR 0 5
9081: PPUSH
9082: CALL_OW 313
9086: ST_TO_ADDR
9087: GO 9069
9089: POP
9090: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9091: LD_ADDR_VAR 0 11
9095: PUSH
9096: LD_VAR 0 2
9100: PPUSH
9101: LD_INT 22
9103: PUSH
9104: LD_VAR 0 1
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 25
9115: PUSH
9116: LD_INT 3
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PPUSH
9127: CALL_OW 70
9131: ST_TO_ADDR
// if damageVehicle_list > 0 then
9132: LD_VAR 0 8
9136: PUSH
9137: LD_INT 0
9139: GREATER
9140: IFFALSE 9213
// begin for i in damageVehicle_list do
9142: LD_ADDR_VAR 0 5
9146: PUSH
9147: LD_VAR 0 8
9151: PUSH
9152: FOR_IN
9153: IFFALSE 9211
// begin for j in mechanicInside_list do
9155: LD_ADDR_VAR 0 6
9159: PUSH
9160: LD_VAR 0 10
9164: PUSH
9165: FOR_IN
9166: IFFALSE 9207
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9168: LD_VAR 0 8
9172: PPUSH
9173: LD_VAR 0 2
9177: PPUSH
9178: CALL_OW 113
// AddComExitVehicle ( j ) ;
9182: LD_VAR 0 6
9186: PPUSH
9187: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9191: LD_VAR 0 6
9195: PPUSH
9196: LD_VAR 0 5
9200: PPUSH
9201: CALL_OW 189
// end ;
9205: GO 9165
9207: POP
9208: POP
// end ;
9209: GO 9152
9211: POP
9212: POP
// end ; if emptyVehicle_list > 0 then
9213: LD_VAR 0 9
9217: PUSH
9218: LD_INT 0
9220: GREATER
9221: IFFALSE 9271
// begin for i in emptyVehicle_list do
9223: LD_ADDR_VAR 0 5
9227: PUSH
9228: LD_VAR 0 9
9232: PUSH
9233: FOR_IN
9234: IFFALSE 9269
// begin for j in mechanicOutside_list do
9236: LD_ADDR_VAR 0 6
9240: PUSH
9241: LD_VAR 0 11
9245: PUSH
9246: FOR_IN
9247: IFFALSE 9265
// begin AddComEnterUnit ( j , i ) ;
9249: LD_VAR 0 6
9253: PPUSH
9254: LD_VAR 0 5
9258: PPUSH
9259: CALL_OW 180
// end ;
9263: GO 9246
9265: POP
9266: POP
// end ;
9267: GO 9233
9269: POP
9270: POP
// end ; if VehicleOK_list > 0 then
9271: LD_VAR 0 7
9275: PUSH
9276: LD_INT 0
9278: GREATER
9279: IFFALSE 9313
// begin for i in VehicleOK_list do
9281: LD_ADDR_VAR 0 5
9285: PUSH
9286: LD_VAR 0 7
9290: PUSH
9291: FOR_IN
9292: IFFALSE 9311
// ComAgressiveMove ( i , 110 , 29 ) ;
9294: LD_VAR 0 5
9298: PPUSH
9299: LD_INT 110
9301: PPUSH
9302: LD_INT 29
9304: PPUSH
9305: CALL_OW 114
9309: GO 9291
9311: POP
9312: POP
// end ; end ;
9313: LD_VAR 0 4
9317: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9318: LD_INT 0
9320: PPUSH
9321: PPUSH
9322: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9323: LD_VAR 0 1
9327: PPUSH
9328: LD_INT 22
9330: PUSH
9331: LD_VAR 0 2
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 2
9342: PUSH
9343: LD_INT 21
9345: PUSH
9346: LD_INT 2
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: LD_INT 21
9355: PUSH
9356: LD_INT 1
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PPUSH
9372: CALL_OW 70
9376: PUSH
9377: LD_VAR 0 5
9381: GREATER
9382: IFFALSE 9514
// begin for i in defendersList do
9384: LD_ADDR_VAR 0 7
9388: PUSH
9389: LD_VAR 0 3
9393: PUSH
9394: FOR_IN
9395: IFFALSE 9510
// begin AddComExitBuilding ( i ) ;
9397: LD_VAR 0 7
9401: PPUSH
9402: CALL_OW 182
// wait ( 0 0$1 ) ;
9406: LD_INT 35
9408: PPUSH
9409: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9413: LD_ADDR_VAR 0 8
9417: PUSH
9418: LD_VAR 0 1
9422: PPUSH
9423: LD_INT 22
9425: PUSH
9426: LD_VAR 0 2
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 2
9437: PUSH
9438: LD_INT 21
9440: PUSH
9441: LD_INT 2
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: LD_INT 21
9450: PUSH
9451: LD_INT 1
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: LIST
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PPUSH
9467: CALL_OW 70
9471: PUSH
9472: FOR_IN
9473: IFFALSE 9506
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9475: LD_VAR 0 7
9479: PPUSH
9480: LD_VAR 0 8
9484: PPUSH
9485: CALL_OW 250
9489: PPUSH
9490: LD_VAR 0 8
9494: PPUSH
9495: CALL_OW 251
9499: PPUSH
9500: CALL_OW 174
9504: GO 9472
9506: POP
9507: POP
// end ;
9508: GO 9394
9510: POP
9511: POP
// end else
9512: GO 9545
// begin for i in defendersList do
9514: LD_ADDR_VAR 0 7
9518: PUSH
9519: LD_VAR 0 3
9523: PUSH
9524: FOR_IN
9525: IFFALSE 9543
// ComEnterUnit ( i , build ) ;
9527: LD_VAR 0 7
9531: PPUSH
9532: LD_VAR 0 4
9536: PPUSH
9537: CALL_OW 120
9541: GO 9524
9543: POP
9544: POP
// end ; end ;
9545: LD_VAR 0 6
9549: RET
// export function RussianTrap ; var i ; begin
9550: LD_INT 0
9552: PPUSH
9553: PPUSH
// if GetSide ( Brian ) = 4 then
9554: LD_EXP 6
9558: PPUSH
9559: CALL_OW 255
9563: PUSH
9564: LD_INT 4
9566: EQUAL
9567: IFFALSE 9590
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9569: LD_EXP 6
9573: PUSH
9574: LD_EXP 7
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PPUSH
9583: LD_INT 0
9585: PPUSH
9586: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
9590: LD_ADDR_VAR 0 2
9594: PUSH
9595: LD_INT 22
9597: PUSH
9598: LD_INT 3
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: LD_INT 21
9607: PUSH
9608: LD_INT 1
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PPUSH
9619: CALL_OW 69
9623: PUSH
9624: FOR_IN
9625: IFFALSE 9699
// begin ComExitBuilding ( i ) ;
9627: LD_VAR 0 2
9631: PPUSH
9632: CALL_OW 122
// wait ( 0 0$1 ) ;
9636: LD_INT 35
9638: PPUSH
9639: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
9643: LD_VAR 0 2
9647: PPUSH
9648: LD_INT 120
9650: PPUSH
9651: LD_INT 56
9653: PPUSH
9654: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
9658: LD_VAR 0 2
9662: PPUSH
9663: LD_INT 111
9665: PPUSH
9666: LD_INT 37
9668: PPUSH
9669: CALL_OW 174
// AddComCrawl ( i ) ;
9673: LD_VAR 0 2
9677: PPUSH
9678: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
9682: LD_VAR 0 2
9686: PPUSH
9687: LD_INT 109
9689: PPUSH
9690: LD_INT 30
9692: PPUSH
9693: CALL_OW 174
// end ;
9697: GO 9624
9699: POP
9700: POP
// end ;
9701: LD_VAR 0 1
9705: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
9706: LD_INT 0
9708: PPUSH
9709: PPUSH
9710: PPUSH
9711: PPUSH
9712: PPUSH
// nearest_dist = 1000 ;
9713: LD_ADDR_VAR 0 4
9717: PUSH
9718: LD_INT 1000
9720: ST_TO_ADDR
// nearest_un = un ;
9721: LD_ADDR_VAR 0 5
9725: PUSH
9726: LD_VAR 0 1
9730: ST_TO_ADDR
// for sold in units do
9731: LD_ADDR_VAR 0 6
9735: PUSH
9736: LD_VAR 0 2
9740: PUSH
9741: FOR_IN
9742: IFFALSE 9798
// begin dist = GetDistUnits ( un , sold ) ;
9744: LD_ADDR_VAR 0 7
9748: PUSH
9749: LD_VAR 0 1
9753: PPUSH
9754: LD_VAR 0 6
9758: PPUSH
9759: CALL_OW 296
9763: ST_TO_ADDR
// if dist < nearest_dist then
9764: LD_VAR 0 7
9768: PUSH
9769: LD_VAR 0 4
9773: LESS
9774: IFFALSE 9796
// begin nearest_un = sold ;
9776: LD_ADDR_VAR 0 5
9780: PUSH
9781: LD_VAR 0 6
9785: ST_TO_ADDR
// nearest_dist = dist ;
9786: LD_ADDR_VAR 0 4
9790: PUSH
9791: LD_VAR 0 7
9795: ST_TO_ADDR
// end ; end ;
9796: GO 9741
9798: POP
9799: POP
// result := nearest_un ;
9800: LD_ADDR_VAR 0 3
9804: PUSH
9805: LD_VAR 0 5
9809: ST_TO_ADDR
// end ;
9810: LD_VAR 0 3
9814: RET
// export function PrepareDifficulty ; begin
9815: LD_INT 0
9817: PPUSH
// if Difficulty = 1 then
9818: LD_OWVAR 67
9822: PUSH
9823: LD_INT 1
9825: EQUAL
9826: IFFALSE 9889
// begin RemoveUnit ( brw2 ) ;
9828: LD_INT 9
9830: PPUSH
9831: CALL_OW 64
// RemoveUnit ( brw3 ) ;
9835: LD_INT 30
9837: PPUSH
9838: CALL_OW 64
// RemoveUnit ( brw4 ) ;
9842: LD_INT 52
9844: PPUSH
9845: CALL_OW 64
// RemoveUnit ( brw5 ) ;
9849: LD_INT 63
9851: PPUSH
9852: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
9856: LD_INT 5
9858: PUSH
9859: LD_INT 4
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PPUSH
9866: LD_INT 60
9868: PPUSH
9869: CALL_OW 240
// RuSoldMinLevel = 0 ;
9873: LD_ADDR_EXP 13
9877: PUSH
9878: LD_INT 0
9880: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
9881: LD_ADDR_EXP 14
9885: PUSH
9886: LD_INT 1
9888: ST_TO_ADDR
// end ; if Difficulty = 2 then
9889: LD_OWVAR 67
9893: PUSH
9894: LD_INT 2
9896: EQUAL
9897: IFFALSE 9939
// begin RemoveUnit ( brw4 ) ;
9899: LD_INT 52
9901: PPUSH
9902: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
9906: LD_INT 5
9908: PUSH
9909: LD_INT 4
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PPUSH
9916: LD_INT 50
9918: PPUSH
9919: CALL_OW 240
// RuSoldMinLevel = 1 ;
9923: LD_ADDR_EXP 13
9927: PUSH
9928: LD_INT 1
9930: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
9931: LD_ADDR_EXP 14
9935: PUSH
9936: LD_INT 2
9938: ST_TO_ADDR
// end ; if Difficulty = 3 then
9939: LD_OWVAR 67
9943: PUSH
9944: LD_INT 3
9946: EQUAL
9947: IFFALSE 9982
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
9949: LD_INT 5
9951: PUSH
9952: LD_INT 4
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PPUSH
9959: LD_INT 40
9961: PPUSH
9962: CALL_OW 240
// RuSoldMinLevel = 2 ;
9966: LD_ADDR_EXP 13
9970: PUSH
9971: LD_INT 2
9973: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
9974: LD_ADDR_EXP 14
9978: PUSH
9979: LD_INT 3
9981: ST_TO_ADDR
// end ; end ;
9982: LD_VAR 0 1
9986: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
9987: LD_INT 0
9989: PPUSH
9990: PPUSH
9991: PPUSH
// tmp = [ ] ;
9992: LD_ADDR_VAR 0 5
9996: PUSH
9997: EMPTY
9998: ST_TO_ADDR
// if not vehicles then
9999: LD_VAR 0 1
10003: NOT
10004: IFFALSE 10008
// exit ;
10006: GO 10125
// for i in vehicles do
10008: LD_ADDR_VAR 0 4
10012: PUSH
10013: LD_VAR 0 1
10017: PUSH
10018: FOR_IN
10019: IFFALSE 10109
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10021: LD_ADDR_VAR 0 5
10025: PUSH
10026: LD_VAR 0 5
10030: PPUSH
10031: LD_INT 1
10033: PPUSH
10034: LD_VAR 0 4
10038: PPUSH
10039: CALL_OW 265
10043: PUSH
10044: LD_VAR 0 4
10048: PPUSH
10049: CALL_OW 262
10053: PUSH
10054: LD_VAR 0 4
10058: PPUSH
10059: CALL_OW 263
10063: PUSH
10064: LD_VAR 0 4
10068: PPUSH
10069: CALL_OW 264
10073: PUSH
10074: LD_VAR 0 4
10078: PPUSH
10079: CALL_OW 261
10083: PUSH
10084: LD_VAR 0 4
10088: PPUSH
10089: CALL_OW 256
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: PPUSH
10102: CALL_OW 2
10106: ST_TO_ADDR
// end ;
10107: GO 10018
10109: POP
10110: POP
// SaveVariable ( tmp , ident ) ;
10111: LD_VAR 0 5
10115: PPUSH
10116: LD_VAR 0 2
10120: PPUSH
10121: CALL_OW 39
// end ; end_of_file
10125: LD_VAR 0 3
10129: RET
// export function PrepareHeroes ; begin
10130: LD_INT 0
10132: PPUSH
// uc_side = 1 ;
10133: LD_ADDR_OWVAR 20
10137: PUSH
10138: LD_INT 1
10140: ST_TO_ADDR
// JMM = CreateCharacter ( JMM ) ;
10141: LD_ADDR_EXP 1
10145: PUSH
10146: LD_STRING JMM
10148: PPUSH
10149: CALL_OW 34
10153: ST_TO_ADDR
// SetLives ( JMM , LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ) ;
10154: LD_EXP 1
10158: PPUSH
10159: LD_STRING 01_JMMLifePoints_1
10161: PPUSH
10162: LD_INT 1000
10164: PPUSH
10165: CALL_OW 30
10169: PPUSH
10170: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10174: LD_ADDR_EXP 9
10178: PUSH
10179: LD_STRING Powell
10181: PPUSH
10182: CALL_OW 25
10186: ST_TO_ADDR
// Bobby = CreateCharacter ( Bobby ) ;
10187: LD_ADDR_EXP 2
10191: PUSH
10192: LD_STRING Bobby
10194: PPUSH
10195: CALL_OW 34
10199: ST_TO_ADDR
// if Bobby then
10200: LD_EXP 2
10204: IFFALSE 10226
// SetLives ( Bobby , LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ) ;
10206: LD_EXP 2
10210: PPUSH
10211: LD_STRING 01_BobbyLifePoints_1
10213: PPUSH
10214: LD_INT 1000
10216: PPUSH
10217: CALL_OW 30
10221: PPUSH
10222: CALL_OW 234
// Cyrus = CreateCharacter ( Cyrus ) ;
10226: LD_ADDR_EXP 3
10230: PUSH
10231: LD_STRING Cyrus
10233: PPUSH
10234: CALL_OW 34
10238: ST_TO_ADDR
// if Cyrus then
10239: LD_EXP 3
10243: IFFALSE 10265
// SetLives ( Cyrus , LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ) ;
10245: LD_EXP 3
10249: PPUSH
10250: LD_STRING 01_CyrusLifePoints_1
10252: PPUSH
10253: LD_INT 1000
10255: PPUSH
10256: CALL_OW 30
10260: PPUSH
10261: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
10265: LD_ADDR_EXP 5
10269: PUSH
10270: LD_STRING Khatam
10272: PPUSH
10273: CALL_OW 25
10277: ST_TO_ADDR
// uc_side = 4 ;
10278: LD_ADDR_OWVAR 20
10282: PUSH
10283: LD_INT 4
10285: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10286: LD_ADDR_EXP 4
10290: PUSH
10291: LD_STRING Lisa
10293: PPUSH
10294: CALL_OW 25
10298: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10299: LD_EXP 1
10303: PPUSH
10304: LD_INT 3
10306: PPUSH
10307: LD_INT 0
10309: PPUSH
10310: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10314: LD_EXP 2
10318: PPUSH
10319: LD_INT 3
10321: PPUSH
10322: LD_INT 0
10324: PPUSH
10325: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10329: LD_EXP 3
10333: PPUSH
10334: LD_INT 3
10336: PPUSH
10337: LD_INT 0
10339: PPUSH
10340: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10344: LD_EXP 4
10348: PPUSH
10349: LD_INT 5
10351: PPUSH
10352: LD_INT 0
10354: PPUSH
10355: CALL_OW 49
// ComCrawl ( Lisa ) ;
10359: LD_EXP 4
10363: PPUSH
10364: CALL_OW 137
// end ;
10368: LD_VAR 0 1
10372: RET
// export function PrepareLisSquad ; var i , un ; begin
10373: LD_INT 0
10375: PPUSH
10376: PPUSH
10377: PPUSH
// uc_side = 4 ;
10378: LD_ADDR_OWVAR 20
10382: PUSH
10383: LD_INT 4
10385: ST_TO_ADDR
// uc_nation = 1 ;
10386: LD_ADDR_OWVAR 21
10390: PUSH
10391: LD_INT 1
10393: ST_TO_ADDR
// hc_class := 2 ;
10394: LD_ADDR_OWVAR 28
10398: PUSH
10399: LD_INT 2
10401: ST_TO_ADDR
// hc_sex := sex_male ;
10402: LD_ADDR_OWVAR 27
10406: PUSH
10407: LD_INT 1
10409: ST_TO_ADDR
// hc_gallery :=  ;
10410: LD_ADDR_OWVAR 33
10414: PUSH
10415: LD_STRING 
10417: ST_TO_ADDR
// hc_name :=  ;
10418: LD_ADDR_OWVAR 26
10422: PUSH
10423: LD_STRING 
10425: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10426: LD_ADDR_OWVAR 30
10430: PUSH
10431: LD_INT 0
10433: PUSH
10434: LD_INT 1
10436: PUSH
10437: LD_INT 0
10439: PUSH
10440: LD_INT 0
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
10449: LD_ADDR_OWVAR 31
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: LD_INT 2
10459: PUSH
10460: LD_INT 0
10462: PUSH
10463: LD_INT 0
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: ST_TO_ADDR
// un := CreateHuman ;
10472: LD_ADDR_VAR 0 3
10476: PUSH
10477: CALL_OW 44
10481: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10482: LD_VAR 0 3
10486: PPUSH
10487: LD_INT 6
10489: PPUSH
10490: LD_INT 0
10492: PPUSH
10493: CALL_OW 49
// hc_sex := sex_female ;
10497: LD_ADDR_OWVAR 27
10501: PUSH
10502: LD_INT 2
10504: ST_TO_ADDR
// hc_gallery :=  ;
10505: LD_ADDR_OWVAR 33
10509: PUSH
10510: LD_STRING 
10512: ST_TO_ADDR
// hc_name :=  ;
10513: LD_ADDR_OWVAR 26
10517: PUSH
10518: LD_STRING 
10520: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
10521: LD_ADDR_OWVAR 30
10525: PUSH
10526: LD_INT 0
10528: PUSH
10529: LD_INT 0
10531: PUSH
10532: LD_INT 0
10534: PUSH
10535: LD_INT 1
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
10544: LD_ADDR_OWVAR 31
10548: PUSH
10549: LD_INT 0
10551: PUSH
10552: LD_INT 1
10554: PUSH
10555: LD_INT 0
10557: PUSH
10558: LD_INT 1
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: ST_TO_ADDR
// un := CreateHuman ;
10567: LD_ADDR_VAR 0 3
10571: PUSH
10572: CALL_OW 44
10576: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10577: LD_VAR 0 3
10581: PPUSH
10582: LD_INT 6
10584: PPUSH
10585: LD_INT 0
10587: PPUSH
10588: CALL_OW 49
// InitHc ;
10592: CALL_OW 19
// end ;
10596: LD_VAR 0 1
10600: RET
// export function PrepareOtherAmericans ; begin
10601: LD_INT 0
10603: PPUSH
// uc_side = 4 ;
10604: LD_ADDR_OWVAR 20
10608: PUSH
10609: LD_INT 4
10611: ST_TO_ADDR
// uc_nation = 1 ;
10612: LD_ADDR_OWVAR 21
10616: PUSH
10617: LD_INT 1
10619: ST_TO_ADDR
// hc_gallery =  ;
10620: LD_ADDR_OWVAR 33
10624: PUSH
10625: LD_STRING 
10627: ST_TO_ADDR
// hc_name = Brian Garvin ;
10628: LD_ADDR_OWVAR 26
10632: PUSH
10633: LD_STRING Brian Garvin
10635: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
10636: LD_INT 1
10638: PPUSH
10639: LD_INT 1
10641: PPUSH
10642: LD_INT 1
10644: PPUSH
10645: LD_INT 2
10647: PPUSH
10648: CALL_OW 12
10652: PPUSH
10653: CALL_OW 380
// Brian = CreateHuman ;
10657: LD_ADDR_EXP 6
10661: PUSH
10662: CALL_OW 44
10666: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
10667: LD_EXP 6
10671: PPUSH
10672: LD_INT 10
10674: PPUSH
10675: LD_INT 0
10677: PPUSH
10678: CALL_OW 49
// hc_name = Jerry White ;
10682: LD_ADDR_OWVAR 26
10686: PUSH
10687: LD_STRING Jerry White
10689: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
10690: LD_INT 1
10692: PPUSH
10693: LD_INT 3
10695: PPUSH
10696: LD_INT 1
10698: PPUSH
10699: LD_INT 2
10701: PPUSH
10702: CALL_OW 12
10706: PPUSH
10707: CALL_OW 380
// Jerry = CreateHuman ;
10711: LD_ADDR_EXP 7
10715: PUSH
10716: CALL_OW 44
10720: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
10721: LD_EXP 7
10725: PPUSH
10726: LD_INT 10
10728: PPUSH
10729: LD_INT 0
10731: PPUSH
10732: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
10736: LD_EXP 6
10740: PUSH
10741: LD_EXP 7
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PPUSH
10750: CALL_OW 140
// end ;
10754: LD_VAR 0 1
10758: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
10759: LD_INT 0
10761: PPUSH
10762: PPUSH
10763: PPUSH
// for i = 1 to 6 do
10764: LD_ADDR_VAR 0 2
10768: PUSH
10769: DOUBLE
10770: LD_INT 1
10772: DEC
10773: ST_TO_ADDR
10774: LD_INT 6
10776: PUSH
10777: FOR_TO
10778: IFFALSE 10872
// begin uc_side = 4 ;
10780: LD_ADDR_OWVAR 20
10784: PUSH
10785: LD_INT 4
10787: ST_TO_ADDR
// uc_nation = 1 ;
10788: LD_ADDR_OWVAR 21
10792: PUSH
10793: LD_INT 1
10795: ST_TO_ADDR
// hc_gallery =  ;
10796: LD_ADDR_OWVAR 33
10800: PUSH
10801: LD_STRING 
10803: ST_TO_ADDR
// hc_name =  ;
10804: LD_ADDR_OWVAR 26
10808: PUSH
10809: LD_STRING 
10811: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
10812: LD_INT 0
10814: PPUSH
10815: LD_INT 1
10817: PPUSH
10818: LD_INT 4
10820: PPUSH
10821: CALL_OW 12
10825: PPUSH
10826: LD_INT 1
10828: PPUSH
10829: CALL_OW 380
// un = CreateHuman ;
10833: LD_ADDR_VAR 0 3
10837: PUSH
10838: CALL_OW 44
10842: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
10843: LD_VAR 0 3
10847: PPUSH
10848: LD_INT 16
10850: PPUSH
10851: LD_INT 0
10853: PPUSH
10854: CALL_OW 49
// SetLives ( un , 1 ) ;
10858: LD_VAR 0 3
10862: PPUSH
10863: LD_INT 1
10865: PPUSH
10866: CALL_OW 234
// end ;
10870: GO 10777
10872: POP
10873: POP
// DyingSold = CreateHuman ;
10874: LD_ADDR_EXP 31
10878: PUSH
10879: CALL_OW 44
10883: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
10884: LD_EXP 31
10888: PPUSH
10889: LD_INT 16
10891: PPUSH
10892: LD_INT 0
10894: PPUSH
10895: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
10899: LD_EXP 31
10903: PPUSH
10904: LD_INT 250
10906: PPUSH
10907: CALL_OW 234
// end ; end_of_file
10911: LD_VAR 0 1
10915: RET
// export function PrepareRussianHeroes ; var tmp ; begin
10916: LD_INT 0
10918: PPUSH
10919: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) ;
10920: LD_ADDR_VAR 0 2
10924: PUSH
10925: LD_INT 22
10927: PUSH
10928: LD_INT 1
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 23
10937: PUSH
10938: LD_INT 1
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PUSH
10945: LD_INT 25
10947: PUSH
10948: LD_INT 2
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: PPUSH
10960: CALL_OW 69
10964: ST_TO_ADDR
// uc_side = 6 ;
10965: LD_ADDR_OWVAR 20
10969: PUSH
10970: LD_INT 6
10972: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
10973: LD_ADDR_EXP 8
10977: PUSH
10978: LD_STRING Mikhail
10980: PPUSH
10981: CALL_OW 25
10985: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
10986: LD_EXP 8
10990: PPUSH
10991: LD_VAR 0 2
10995: PUSH
10996: LD_INT 1
10998: ARRAY
10999: PPUSH
11000: CALL_OW 250
11004: PPUSH
11005: LD_VAR 0 2
11009: PUSH
11010: LD_INT 1
11012: ARRAY
11013: PPUSH
11014: CALL_OW 251
11018: PPUSH
11019: LD_INT 3
11021: PPUSH
11022: LD_INT 1
11024: PPUSH
11025: CALL_OW 50
// end ;
11029: LD_VAR 0 1
11033: RET
// export function PrepareRussianCommander ; begin
11034: LD_INT 0
11036: PPUSH
// uc_side = 3 ;
11037: LD_ADDR_OWVAR 20
11041: PUSH
11042: LD_INT 3
11044: ST_TO_ADDR
// uc_nation = 3 ;
11045: LD_ADDR_OWVAR 21
11049: PUSH
11050: LD_INT 3
11052: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11053: LD_ADDR_EXP 19
11057: PUSH
11058: LD_STRING Natasza
11060: PPUSH
11061: CALL_OW 25
11065: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11066: LD_EXP 19
11070: PPUSH
11071: LD_INT 24
11073: PPUSH
11074: LD_INT 0
11076: PPUSH
11077: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11081: LD_EXP 19
11085: PPUSH
11086: LD_INT 56
11088: PPUSH
11089: LD_INT 16
11091: PPUSH
11092: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11096: LD_ADDR_EXP 24
11100: PUSH
11101: LD_EXP 24
11105: PUSH
11106: LD_EXP 19
11110: ADD
11111: ST_TO_ADDR
// end ;
11112: LD_VAR 0 1
11116: RET
// export function PrepareSouthBase ; var i , un ; begin
11117: LD_INT 0
11119: PPUSH
11120: PPUSH
11121: PPUSH
// for i = 1 to 2 do
11122: LD_ADDR_VAR 0 2
11126: PUSH
11127: DOUBLE
11128: LD_INT 1
11130: DEC
11131: ST_TO_ADDR
11132: LD_INT 2
11134: PUSH
11135: FOR_TO
11136: IFFALSE 11245
// begin uc_side = 3 ;
11138: LD_ADDR_OWVAR 20
11142: PUSH
11143: LD_INT 3
11145: ST_TO_ADDR
// uc_nation = 3 ;
11146: LD_ADDR_OWVAR 21
11150: PUSH
11151: LD_INT 3
11153: ST_TO_ADDR
// hc_gallery =  ;
11154: LD_ADDR_OWVAR 33
11158: PUSH
11159: LD_STRING 
11161: ST_TO_ADDR
// hc_name =  ;
11162: LD_ADDR_OWVAR 26
11166: PUSH
11167: LD_STRING 
11169: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11170: LD_INT 1
11172: PPUSH
11173: LD_INT 1
11175: PPUSH
11176: LD_EXP 13
11180: PPUSH
11181: LD_EXP 14
11185: PPUSH
11186: CALL_OW 12
11190: PPUSH
11191: CALL_OW 380
// hc_importance = 0 ;
11195: LD_ADDR_OWVAR 32
11199: PUSH
11200: LD_INT 0
11202: ST_TO_ADDR
// un = CreateHuman ;
11203: LD_ADDR_VAR 0 3
11207: PUSH
11208: CALL_OW 44
11212: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11213: LD_VAR 0 3
11217: PPUSH
11218: LD_INT 11
11220: PPUSH
11221: LD_INT 0
11223: PPUSH
11224: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11228: LD_VAR 0 3
11232: PPUSH
11233: LD_INT 111
11235: PPUSH
11236: LD_INT 38
11238: PPUSH
11239: CALL_OW 118
// end ;
11243: GO 11135
11245: POP
11246: POP
// for i = 1 to Difficulty do
11247: LD_ADDR_VAR 0 2
11251: PUSH
11252: DOUBLE
11253: LD_INT 1
11255: DEC
11256: ST_TO_ADDR
11257: LD_OWVAR 67
11261: PUSH
11262: FOR_TO
11263: IFFALSE 11364
// begin uc_side = 3 ;
11265: LD_ADDR_OWVAR 20
11269: PUSH
11270: LD_INT 3
11272: ST_TO_ADDR
// uc_nation = 3 ;
11273: LD_ADDR_OWVAR 21
11277: PUSH
11278: LD_INT 3
11280: ST_TO_ADDR
// hc_gallery =  ;
11281: LD_ADDR_OWVAR 33
11285: PUSH
11286: LD_STRING 
11288: ST_TO_ADDR
// hc_name =  ;
11289: LD_ADDR_OWVAR 26
11293: PUSH
11294: LD_STRING 
11296: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11297: LD_INT 0
11299: PPUSH
11300: LD_INT 3
11302: PPUSH
11303: LD_EXP 13
11307: PPUSH
11308: LD_EXP 14
11312: PPUSH
11313: CALL_OW 12
11317: PPUSH
11318: CALL_OW 380
// un = CreateHuman ;
11322: LD_ADDR_VAR 0 3
11326: PUSH
11327: CALL_OW 44
11331: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
11332: LD_VAR 0 3
11336: PPUSH
11337: LD_INT 12
11339: PPUSH
11340: LD_INT 0
11342: PPUSH
11343: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
11347: LD_VAR 0 3
11351: PPUSH
11352: LD_INT 111
11354: PPUSH
11355: LD_INT 28
11357: PPUSH
11358: CALL_OW 118
// end ;
11362: GO 11262
11364: POP
11365: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
11366: LD_INT 3
11368: PPUSH
11369: LD_INT 3
11371: PPUSH
11372: LD_INT 33
11374: PPUSH
11375: LD_EXP 13
11379: PPUSH
11380: LD_EXP 14
11384: PPUSH
11385: CALL_OW 12
11389: PPUSH
11390: LD_INT 1
11392: PPUSH
11393: LD_INT 1
11395: PUSH
11396: LD_INT 1
11398: PPUSH
11399: LD_INT 2
11401: PPUSH
11402: CALL_OW 12
11406: PUSH
11407: LD_INT 1
11409: PPUSH
11410: LD_INT 2
11412: PPUSH
11413: CALL_OW 12
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: LIST
11422: PUSH
11423: LD_OWVAR 67
11427: ARRAY
11428: PPUSH
11429: CALL 8088 0 6
// for i in UnitsInside ( arm2 ) do
11433: LD_ADDR_VAR 0 2
11437: PUSH
11438: LD_INT 33
11440: PPUSH
11441: CALL_OW 313
11445: PUSH
11446: FOR_IN
11447: IFFALSE 11467
// southBaseDefenders = southBaseDefenders ^ i ;
11449: LD_ADDR_EXP 25
11453: PUSH
11454: LD_EXP 25
11458: PUSH
11459: LD_VAR 0 2
11463: ADD
11464: ST_TO_ADDR
11465: GO 11446
11467: POP
11468: POP
// end ;
11469: LD_VAR 0 1
11473: RET
// export function PrepareNorthBase ; var i , un ; begin
11474: LD_INT 0
11476: PPUSH
11477: PPUSH
11478: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
11479: LD_ADDR_VAR 0 2
11483: PUSH
11484: DOUBLE
11485: LD_INT 1
11487: DEC
11488: ST_TO_ADDR
11489: LD_INT 1
11491: PPUSH
11492: LD_INT 2
11494: PPUSH
11495: CALL_OW 12
11499: PUSH
11500: LD_INT 2
11502: PPUSH
11503: LD_INT 3
11505: PPUSH
11506: CALL_OW 12
11510: PUSH
11511: LD_INT 3
11513: PPUSH
11514: LD_INT 4
11516: PPUSH
11517: CALL_OW 12
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: PUSH
11527: LD_OWVAR 67
11531: ARRAY
11532: PUSH
11533: FOR_TO
11534: IFFALSE 11620
// begin uc_side = 3 ;
11536: LD_ADDR_OWVAR 20
11540: PUSH
11541: LD_INT 3
11543: ST_TO_ADDR
// uc_nation = 3 ;
11544: LD_ADDR_OWVAR 21
11548: PUSH
11549: LD_INT 3
11551: ST_TO_ADDR
// hc_gallery =  ;
11552: LD_ADDR_OWVAR 33
11556: PUSH
11557: LD_STRING 
11559: ST_TO_ADDR
// hc_name =  ;
11560: LD_ADDR_OWVAR 26
11564: PUSH
11565: LD_STRING 
11567: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11568: LD_INT 0
11570: PPUSH
11571: LD_INT 1
11573: PPUSH
11574: LD_EXP 13
11578: PPUSH
11579: LD_EXP 14
11583: PPUSH
11584: CALL_OW 12
11588: PPUSH
11589: CALL_OW 380
// un = CreateHuman ;
11593: LD_ADDR_VAR 0 3
11597: PUSH
11598: CALL_OW 44
11602: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
11603: LD_VAR 0 3
11607: PPUSH
11608: LD_INT 14
11610: PPUSH
11611: LD_INT 0
11613: PPUSH
11614: CALL_OW 49
// end ;
11618: GO 11533
11620: POP
11621: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
11622: LD_INT 3
11624: PPUSH
11625: LD_INT 3
11627: PPUSH
11628: LD_INT 2
11630: PPUSH
11631: LD_EXP 13
11635: PPUSH
11636: LD_EXP 14
11640: PPUSH
11641: CALL_OW 12
11645: PPUSH
11646: LD_INT 1
11648: PPUSH
11649: LD_INT 1
11651: PPUSH
11652: LD_INT 2
11654: PPUSH
11655: CALL_OW 12
11659: PUSH
11660: LD_INT 1
11662: PPUSH
11663: LD_INT 3
11665: PPUSH
11666: CALL_OW 12
11670: PUSH
11671: LD_INT 1
11673: PPUSH
11674: LD_INT 3
11676: PPUSH
11677: CALL_OW 12
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: LD_OWVAR 67
11691: ARRAY
11692: PPUSH
11693: CALL 8088 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
11697: LD_INT 3
11699: PPUSH
11700: LD_INT 3
11702: PPUSH
11703: LD_INT 23
11705: PPUSH
11706: LD_EXP 13
11710: PPUSH
11711: LD_EXP 14
11715: PPUSH
11716: CALL_OW 12
11720: PPUSH
11721: LD_INT 4
11723: PPUSH
11724: LD_INT 0
11726: PUSH
11727: LD_INT 1
11729: PUSH
11730: LD_INT 2
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: LIST
11737: PUSH
11738: LD_OWVAR 67
11742: ARRAY
11743: PPUSH
11744: CALL 8088 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
11748: LD_INT 3
11750: PPUSH
11751: LD_INT 3
11753: PPUSH
11754: LD_INT 1
11756: PPUSH
11757: LD_EXP 13
11761: PPUSH
11762: LD_EXP 14
11766: PPUSH
11767: CALL_OW 12
11771: PPUSH
11772: LD_INT 2
11774: PPUSH
11775: LD_INT 1
11777: PUSH
11778: LD_INT 2
11780: PUSH
11781: LD_INT 2
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: LIST
11788: PUSH
11789: LD_OWVAR 67
11793: ARRAY
11794: PPUSH
11795: CALL 8088 0 6
// for i in UnitsInside ( arm1 ) do
11799: LD_ADDR_VAR 0 2
11803: PUSH
11804: LD_INT 2
11806: PPUSH
11807: CALL_OW 313
11811: PUSH
11812: FOR_IN
11813: IFFALSE 11833
// northBaseDefenders = northBaseDefenders ^ i ;
11815: LD_ADDR_EXP 24
11819: PUSH
11820: LD_EXP 24
11824: PUSH
11825: LD_VAR 0 2
11829: ADD
11830: ST_TO_ADDR
11831: GO 11812
11833: POP
11834: POP
// end ;
11835: LD_VAR 0 1
11839: RET
// export function PrepareOtherRussians ; var i , un ; begin
11840: LD_INT 0
11842: PPUSH
11843: PPUSH
11844: PPUSH
// for i = 1 to 2 do
11845: LD_ADDR_VAR 0 2
11849: PUSH
11850: DOUBLE
11851: LD_INT 1
11853: DEC
11854: ST_TO_ADDR
11855: LD_INT 2
11857: PUSH
11858: FOR_TO
11859: IFFALSE 11960
// begin uc_side = 3 ;
11861: LD_ADDR_OWVAR 20
11865: PUSH
11866: LD_INT 3
11868: ST_TO_ADDR
// uc_nation = 3 ;
11869: LD_ADDR_OWVAR 21
11873: PUSH
11874: LD_INT 3
11876: ST_TO_ADDR
// hc_gallery =  ;
11877: LD_ADDR_OWVAR 33
11881: PUSH
11882: LD_STRING 
11884: ST_TO_ADDR
// hc_name =  ;
11885: LD_ADDR_OWVAR 26
11889: PUSH
11890: LD_STRING 
11892: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11893: LD_INT 0
11895: PPUSH
11896: LD_INT 1
11898: PPUSH
11899: LD_EXP 13
11903: PPUSH
11904: LD_EXP 14
11908: PPUSH
11909: CALL_OW 12
11913: PPUSH
11914: CALL_OW 380
// un = CreateHuman ;
11918: LD_ADDR_VAR 0 3
11922: PUSH
11923: CALL_OW 44
11927: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
11928: LD_VAR 0 3
11932: PPUSH
11933: LD_INT 9
11935: PPUSH
11936: LD_INT 0
11938: PPUSH
11939: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
11943: LD_VAR 0 3
11947: PPUSH
11948: LD_INT 80
11950: PPUSH
11951: LD_INT 73
11953: PPUSH
11954: CALL_OW 118
// end ;
11958: GO 11858
11960: POP
11961: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
11962: LD_ADDR_VAR 0 2
11966: PUSH
11967: LD_INT 22
11969: PUSH
11970: LD_INT 3
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 30
11979: PUSH
11980: LD_INT 31
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PPUSH
11991: CALL_OW 69
11995: PUSH
11996: FOR_IN
11997: IFFALSE 12025
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
11999: LD_EXP 13
12003: PPUSH
12004: LD_EXP 14
12008: PPUSH
12009: CALL_OW 12
12013: PPUSH
12014: LD_VAR 0 2
12018: PPUSH
12019: CALL 8198 0 2
12023: GO 11996
12025: POP
12026: POP
// end ;
12027: LD_VAR 0 1
12031: RET
// export function PrepareCargoBays ; begin
12032: LD_INT 0
12034: PPUSH
// uc_side = 3 ;
12035: LD_ADDR_OWVAR 20
12039: PUSH
12040: LD_INT 3
12042: ST_TO_ADDR
// uc_nation = 3 ;
12043: LD_ADDR_OWVAR 21
12047: PUSH
12048: LD_INT 3
12050: ST_TO_ADDR
// vc_engine = 1 ;
12051: LD_ADDR_OWVAR 39
12055: PUSH
12056: LD_INT 1
12058: ST_TO_ADDR
// vc_control = 1 ;
12059: LD_ADDR_OWVAR 38
12063: PUSH
12064: LD_INT 1
12066: ST_TO_ADDR
// vc_weapon = 51 ;
12067: LD_ADDR_OWVAR 40
12071: PUSH
12072: LD_INT 51
12074: ST_TO_ADDR
// vc_chassis = 22 ;
12075: LD_ADDR_OWVAR 37
12079: PUSH
12080: LD_INT 22
12082: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12083: LD_ADDR_EXP 15
12087: PUSH
12088: CALL_OW 45
12092: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12093: LD_ADDR_EXP 16
12097: PUSH
12098: CALL_OW 45
12102: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12103: LD_EXP 15
12107: PPUSH
12108: LD_INT 13
12110: PPUSH
12111: LD_INT 0
12113: PPUSH
12114: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12118: LD_EXP 16
12122: PPUSH
12123: LD_INT 13
12125: PPUSH
12126: LD_INT 0
12128: PPUSH
12129: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12133: LD_EXP 15
12137: PPUSH
12138: LD_INT 2
12140: PPUSH
12141: LD_INT 70
12143: PUSH
12144: LD_INT 50
12146: PUSH
12147: LD_INT 30
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: LIST
12154: PUSH
12155: LD_OWVAR 67
12159: ARRAY
12160: PPUSH
12161: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12165: LD_EXP 16
12169: PPUSH
12170: LD_INT 2
12172: PPUSH
12173: LD_INT 70
12175: PUSH
12176: LD_INT 50
12178: PUSH
12179: LD_INT 30
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: PUSH
12187: LD_OWVAR 67
12191: ARRAY
12192: PPUSH
12193: CALL_OW 291
// hc_gallery =  ;
12197: LD_ADDR_OWVAR 33
12201: PUSH
12202: LD_STRING 
12204: ST_TO_ADDR
// hc_name =  ;
12205: LD_ADDR_OWVAR 26
12209: PUSH
12210: LD_STRING 
12212: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12213: LD_INT 1
12215: PPUSH
12216: LD_INT 3
12218: PPUSH
12219: LD_INT 1
12221: PPUSH
12222: LD_INT 2
12224: PPUSH
12225: CALL_OW 12
12229: PPUSH
12230: CALL_OW 380
// driver1 = CreateHuman ;
12234: LD_ADDR_EXP 17
12238: PUSH
12239: CALL_OW 44
12243: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12244: LD_EXP 17
12248: PPUSH
12249: LD_EXP 15
12253: PPUSH
12254: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12258: LD_ADDR_OWVAR 26
12262: PUSH
12263: LD_STRING Nikolai Andreyev
12265: ST_TO_ADDR
// driver2 = CreateHuman ;
12266: LD_ADDR_EXP 18
12270: PUSH
12271: CALL_OW 44
12275: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12276: LD_EXP 18
12280: PPUSH
12281: LD_EXP 16
12285: PPUSH
12286: CALL_OW 52
// end ;
12290: LD_VAR 0 1
12294: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12295: LD_INT 0
12297: PPUSH
12298: PPUSH
12299: PPUSH
12300: PPUSH
12301: PPUSH
12302: PPUSH
12303: PPUSH
// uc_side = 3 ;
12304: LD_ADDR_OWVAR 20
12308: PUSH
12309: LD_INT 3
12311: ST_TO_ADDR
// uc_nation = 3 ;
12312: LD_ADDR_OWVAR 21
12316: PUSH
12317: LD_INT 3
12319: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
12320: LD_ADDR_VAR 0 4
12324: PUSH
12325: DOUBLE
12326: LD_INT 1
12328: DEC
12329: ST_TO_ADDR
12330: LD_VAR 0 1
12334: PUSH
12335: LD_INT 1
12337: PPUSH
12338: LD_INT 3
12340: PPUSH
12341: CALL_OW 12
12345: PLUS
12346: PUSH
12347: FOR_TO
12348: IFFALSE 12525
// begin vc_engine = 1 ;
12350: LD_ADDR_OWVAR 39
12354: PUSH
12355: LD_INT 1
12357: ST_TO_ADDR
// vc_control = 1 ;
12358: LD_ADDR_OWVAR 38
12362: PUSH
12363: LD_INT 1
12365: ST_TO_ADDR
// vc_weapon = 42 ;
12366: LD_ADDR_OWVAR 40
12370: PUSH
12371: LD_INT 42
12373: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
12374: LD_ADDR_OWVAR 37
12378: PUSH
12379: LD_INT 21
12381: PUSH
12382: LD_INT 22
12384: PUSH
12385: LD_INT 22
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: LD_OWVAR 67
12397: ARRAY
12398: ST_TO_ADDR
// veh = CreateVehicle ;
12399: LD_ADDR_VAR 0 5
12403: PUSH
12404: CALL_OW 45
12408: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12409: LD_VAR 0 5
12413: PPUSH
12414: LD_VAR 0 2
12418: PPUSH
12419: LD_INT 0
12421: PPUSH
12422: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
12426: LD_ADDR_EXP 26
12430: PUSH
12431: LD_EXP 26
12435: PUSH
12436: LD_VAR 0 5
12440: ADD
12441: ST_TO_ADDR
// hc_gallery =  ;
12442: LD_ADDR_OWVAR 33
12446: PUSH
12447: LD_STRING 
12449: ST_TO_ADDR
// hc_name =  ;
12450: LD_ADDR_OWVAR 26
12454: PUSH
12455: LD_STRING 
12457: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12458: LD_INT 0
12460: PPUSH
12461: LD_INT 3
12463: PPUSH
12464: LD_EXP 13
12468: PPUSH
12469: LD_EXP 14
12473: PPUSH
12474: CALL_OW 12
12478: PPUSH
12479: CALL_OW 380
// un = CreateHuman ;
12483: LD_ADDR_VAR 0 6
12487: PUSH
12488: CALL_OW 44
12492: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12493: LD_VAR 0 6
12497: PPUSH
12498: LD_VAR 0 5
12502: PPUSH
12503: CALL_OW 52
// attackGroup = attackGroup ^ un ;
12507: LD_ADDR_EXP 26
12511: PUSH
12512: LD_EXP 26
12516: PUSH
12517: LD_VAR 0 6
12521: ADD
12522: ST_TO_ADDR
// end ;
12523: GO 12347
12525: POP
12526: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12527: LD_INT 0
12529: PPUSH
12530: LD_INT 2
12532: PPUSH
12533: LD_EXP 13
12537: PPUSH
12538: LD_EXP 14
12542: PPUSH
12543: CALL_OW 12
12547: PPUSH
12548: CALL_OW 380
// un = CreateHuman ;
12552: LD_ADDR_VAR 0 6
12556: PUSH
12557: CALL_OW 44
12561: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
12562: LD_ADDR_VAR 0 4
12566: PUSH
12567: DOUBLE
12568: LD_INT 1
12570: DEC
12571: ST_TO_ADDR
12572: LD_VAR 0 1
12576: PUSH
12577: LD_INT 2
12579: PUSH
12580: LD_INT 2
12582: MUL
12583: PLUS
12584: PUSH
12585: FOR_TO
12586: IFFALSE 12674
// begin hc_gallery =  ;
12588: LD_ADDR_OWVAR 33
12592: PUSH
12593: LD_STRING 
12595: ST_TO_ADDR
// hc_name =  ;
12596: LD_ADDR_OWVAR 26
12600: PUSH
12601: LD_STRING 
12603: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12604: LD_INT 1
12606: PPUSH
12607: LD_INT 1
12609: PPUSH
12610: LD_EXP 13
12614: PPUSH
12615: LD_EXP 14
12619: PPUSH
12620: CALL_OW 12
12624: PPUSH
12625: CALL_OW 380
// un = CreateHuman ;
12629: LD_ADDR_VAR 0 6
12633: PUSH
12634: CALL_OW 44
12638: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
12639: LD_VAR 0 6
12643: PPUSH
12644: LD_VAR 0 2
12648: PPUSH
12649: LD_INT 0
12651: PPUSH
12652: CALL_OW 49
// attackGroup = attackGroup ^ un ;
12656: LD_ADDR_EXP 26
12660: PUSH
12661: LD_EXP 26
12665: PUSH
12666: LD_VAR 0 6
12670: ADD
12671: ST_TO_ADDR
// end ;
12672: GO 12585
12674: POP
12675: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
12676: LD_ADDR_VAR 0 7
12680: PUSH
12681: LD_INT 26
12683: PPUSH
12684: LD_INT 22
12686: PUSH
12687: LD_INT 3
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 21
12696: PUSH
12697: LD_INT 1
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 26
12706: PUSH
12707: LD_INT 1
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: LIST
12718: PPUSH
12719: CALL_OW 70
12723: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
12724: LD_VAR 0 7
12728: PUSH
12729: LD_INT 1
12731: ARRAY
12732: PPUSH
12733: LD_STRING D9-Rus3-1
12735: PPUSH
12736: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
12740: LD_VAR 0 7
12744: PUSH
12745: LD_INT 2
12747: ARRAY
12748: PPUSH
12749: LD_STRING D9-Russ-1
12751: PPUSH
12752: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
12756: LD_INT 35
12758: PPUSH
12759: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
12763: LD_ADDR_VAR 0 4
12767: PUSH
12768: LD_INT 26
12770: PPUSH
12771: LD_INT 22
12773: PUSH
12774: LD_INT 3
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: EMPTY
12782: LIST
12783: PPUSH
12784: CALL_OW 70
12788: PUSH
12789: FOR_IN
12790: IFFALSE 12962
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
12792: LD_ADDR_VAR 0 8
12796: PUSH
12797: LD_INT 22
12799: PUSH
12800: LD_INT 1
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PPUSH
12807: CALL_OW 69
12811: PPUSH
12812: LD_VAR 0 4
12816: PPUSH
12817: CALL_OW 74
12821: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12822: LD_ADDR_VAR 0 9
12826: PUSH
12827: LD_INT 22
12829: PUSH
12830: LD_INT 1
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: LD_INT 2
12839: PUSH
12840: LD_INT 59
12842: PUSH
12843: EMPTY
12844: LIST
12845: PUSH
12846: LD_INT 21
12848: PUSH
12849: LD_INT 1
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 21
12858: PUSH
12859: LD_INT 2
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: PPUSH
12879: CALL_OW 69
12883: PPUSH
12884: LD_VAR 0 4
12888: PPUSH
12889: CALL_OW 74
12893: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12894: LD_VAR 0 4
12898: PPUSH
12899: LD_VAR 0 8
12903: PPUSH
12904: CALL_OW 296
12908: PUSH
12909: LD_INT 8
12911: PLUS
12912: PUSH
12913: LD_VAR 0 4
12917: PPUSH
12918: LD_VAR 0 9
12922: PPUSH
12923: CALL_OW 296
12927: LESS
12928: IFFALSE 12946
// begin ComAttackUnit ( i , target1 ) ;
12930: LD_VAR 0 4
12934: PPUSH
12935: LD_VAR 0 8
12939: PPUSH
12940: CALL_OW 115
// end else
12944: GO 12960
// begin ComAttackUnit ( i , target2 ) ;
12946: LD_VAR 0 4
12950: PPUSH
12951: LD_VAR 0 9
12955: PPUSH
12956: CALL_OW 115
// end ; end ;
12960: GO 12789
12962: POP
12963: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
12964: LD_INT 26
12966: PPUSH
12967: LD_INT 22
12969: PUSH
12970: LD_INT 3
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PUSH
12977: LD_INT 2
12979: PUSH
12980: LD_INT 21
12982: PUSH
12983: LD_INT 1
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: LD_INT 21
12992: PUSH
12993: LD_INT 2
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 59
13002: PUSH
13003: EMPTY
13004: LIST
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PPUSH
13016: CALL_OW 70
13020: PUSH
13021: LD_INT 0
13023: EQUAL
13024: IFFALSE 12756
// end ; end_of_file
13026: LD_VAR 0 3
13030: RET
// every 0 0$1 do
13031: GO 13033
13033: DISABLE
// begin enable ;
13034: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13035: LD_INT 3
13037: PPUSH
13038: LD_INT 1
13040: PPUSH
13041: LD_INT 22
13043: PPUSH
13044: CALL 8334 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13048: LD_INT 3
13050: PPUSH
13051: LD_INT 20
13053: PPUSH
13054: LD_INT 22
13056: PPUSH
13057: LD_INT 23
13059: PPUSH
13060: CALL 8580 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13064: LD_INT 3
13066: PPUSH
13067: LD_INT 21
13069: PPUSH
13070: LD_INT 23
13072: PPUSH
13073: CALL 8846 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13077: LD_INT 22
13079: PPUSH
13080: LD_INT 1
13082: PPUSH
13083: LD_EXP 24
13087: PPUSH
13088: LD_INT 2
13090: PPUSH
13091: LD_INT 3
13093: PPUSH
13094: CALL 9318 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13098: LD_INT 23
13100: PPUSH
13101: LD_INT 1
13103: PPUSH
13104: LD_EXP 25
13108: PPUSH
13109: LD_INT 33
13111: PPUSH
13112: LD_INT 1
13114: PPUSH
13115: CALL 9318 0 5
// end ; end_of_file
13119: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 then
13120: LD_VAR 0 1
13124: PPUSH
13125: CALL_OW 255
13129: PUSH
13130: LD_INT 1
13132: EQUAL
13133: IFFALSE 13149
// deadsCounter = deadsCounter + 1 ;
13135: LD_ADDR_EXP 29
13139: PUSH
13140: LD_EXP 29
13144: PUSH
13145: LD_INT 1
13147: PLUS
13148: ST_TO_ADDR
// end ; end_of_file
13149: PPOPN 1
13151: END
// every 0 0$1 trigger IsDead ( JMM ) do
13152: LD_EXP 1
13156: PPUSH
13157: CALL_OW 301
13161: IFFALSE 13173
13163: GO 13165
13165: DISABLE
// YouLost ( JMM ) ;
13166: LD_STRING JMM
13168: PPUSH
13169: CALL_OW 104
13173: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
13174: LD_INT 1
13176: PPUSH
13177: CALL_OW 301
13181: PUSH
13182: LD_INT 10
13184: PPUSH
13185: CALL_OW 301
13189: OR
13190: IFFALSE 13202
13192: GO 13194
13194: DISABLE
// YouLost ( DepotDestroyed ) ;
13195: LD_STRING DepotDestroyed
13197: PPUSH
13198: CALL_OW 104
13202: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
13203: LD_INT 22
13205: PUSH
13206: LD_INT 1
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 21
13215: PUSH
13216: LD_INT 1
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 25
13225: PUSH
13226: LD_INT 2
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: LIST
13237: PPUSH
13238: CALL_OW 69
13242: PUSH
13243: LD_INT 0
13245: EQUAL
13246: PUSH
13247: LD_INT 22
13249: PUSH
13250: LD_INT 4
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 21
13259: PUSH
13260: LD_INT 1
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 25
13269: PUSH
13270: LD_INT 2
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: LIST
13281: PPUSH
13282: CALL_OW 69
13286: PUSH
13287: LD_INT 0
13289: EQUAL
13290: AND
13291: PUSH
13292: LD_INT 1
13294: PPUSH
13295: CALL_OW 255
13299: PUSH
13300: LD_INT 3
13302: EQUAL
13303: AND
13304: PUSH
13305: LD_INT 10
13307: PPUSH
13308: CALL_OW 255
13312: PUSH
13313: LD_INT 3
13315: EQUAL
13316: AND
13317: IFFALSE 13329
13319: GO 13321
13321: DISABLE
// YouLost ( Engineer ) ;
13322: LD_STRING Engineer
13324: PPUSH
13325: CALL_OW 104
13329: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
13330: LD_INT 1
13332: PPUSH
13333: CALL_OW 255
13337: PUSH
13338: LD_INT 3
13340: EQUAL
13341: PUSH
13342: LD_EXP 27
13346: PUSH
13347: LD_INT 1
13349: EQUAL
13350: AND
13351: IFFALSE 13363
13353: GO 13355
13355: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
13356: LD_STRING DepotCaptured
13358: PPUSH
13359: CALL_OW 104
13363: END
// export function PrepareTigers ; var i , un ; begin
13364: LD_INT 0
13366: PPUSH
13367: PPUSH
13368: PPUSH
// for i = 1 to Difficulty do
13369: LD_ADDR_VAR 0 2
13373: PUSH
13374: DOUBLE
13375: LD_INT 1
13377: DEC
13378: ST_TO_ADDR
13379: LD_OWVAR 67
13383: PUSH
13384: FOR_TO
13385: IFFALSE 13520
// begin hc_sex = sex_male ;
13387: LD_ADDR_OWVAR 27
13391: PUSH
13392: LD_INT 1
13394: ST_TO_ADDR
// uc_side = 0 ;
13395: LD_ADDR_OWVAR 20
13399: PUSH
13400: LD_INT 0
13402: ST_TO_ADDR
// uc_nation = nation_nature ;
13403: LD_ADDR_OWVAR 21
13407: PUSH
13408: LD_INT 0
13410: ST_TO_ADDR
// hc_class = class_tiger ;
13411: LD_ADDR_OWVAR 28
13415: PUSH
13416: LD_INT 14
13418: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
13419: LD_ADDR_OWVAR 31
13423: PUSH
13424: LD_EXP 14
13428: PUSH
13429: LD_INT 0
13431: PUSH
13432: LD_INT 0
13434: PUSH
13435: LD_INT 0
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
13444: LD_ADDR_OWVAR 35
13448: PUSH
13449: LD_INT 30
13451: PPUSH
13452: LD_INT 40
13454: PPUSH
13455: CALL_OW 12
13459: PUSH
13460: LD_INT 40
13462: PPUSH
13463: LD_INT 50
13465: PPUSH
13466: CALL_OW 12
13470: PUSH
13471: LD_INT 50
13473: PPUSH
13474: LD_INT 60
13476: PPUSH
13477: CALL_OW 12
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: LD_OWVAR 67
13491: ARRAY
13492: ST_TO_ADDR
// un = CreateHuman ;
13493: LD_ADDR_VAR 0 3
13497: PUSH
13498: CALL_OW 44
13502: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13503: LD_VAR 0 3
13507: PPUSH
13508: LD_INT 27
13510: PPUSH
13511: LD_INT 0
13513: PPUSH
13514: CALL_OW 49
// end ;
13518: GO 13384
13520: POP
13521: POP
// end ; end_of_file
13522: LD_VAR 0 1
13526: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 do
13527: LD_INT 1
13529: PPUSH
13530: CALL_OW 255
13534: PUSH
13535: LD_INT 1
13537: EQUAL
13538: PUSH
13539: LD_INT 10
13541: PPUSH
13542: CALL_OW 255
13546: PUSH
13547: LD_INT 1
13549: EQUAL
13550: AND
13551: PUSH
13552: LD_EXP 20
13556: PUSH
13557: LD_INT 1
13559: EQUAL
13560: AND
13561: IFFALSE 13652
13563: GO 13565
13565: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
13566: LD_INT 9450
13568: PUSH
13569: LD_INT 8400
13571: PUSH
13572: LD_INT 6300
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: LIST
13579: PUSH
13580: LD_OWVAR 67
13584: ARRAY
13585: PPUSH
13586: CALL_OW 67
// if cargoEscape = 1 then
13590: LD_EXP 20
13594: PUSH
13595: LD_INT 1
13597: EQUAL
13598: IFFALSE 13652
// begin SayRadio ( Powell , D6-Pow-1 ) ;
13600: LD_EXP 9
13604: PPUSH
13605: LD_STRING D6-Pow-1
13607: PPUSH
13608: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
13612: LD_EXP 1
13616: PPUSH
13617: LD_STRING D6-JMM-1
13619: PPUSH
13620: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
13624: LD_EXP 9
13628: PPUSH
13629: LD_STRING D6-Pow-2
13631: PPUSH
13632: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
13636: LD_EXP 1
13640: PPUSH
13641: LD_STRING D6-JMM-2
13643: PPUSH
13644: CALL_OW 88
// FinishMission ;
13648: CALL 13860 0 0
// end ; end ;
13652: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
13653: LD_INT 1
13655: PPUSH
13656: CALL_OW 255
13660: PUSH
13661: LD_INT 1
13663: EQUAL
13664: PUSH
13665: LD_INT 10
13667: PPUSH
13668: CALL_OW 255
13672: PUSH
13673: LD_INT 1
13675: EQUAL
13676: AND
13677: PUSH
13678: LD_EXP 20
13682: PUSH
13683: LD_INT 1
13685: GREATER
13686: AND
13687: IFFALSE 13754
13689: GO 13691
13691: DISABLE
13692: LD_INT 0
13694: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
13695: LD_INT 11550
13697: PUSH
13698: LD_INT 10500
13700: PUSH
13701: LD_INT 9450
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: PUSH
13709: LD_OWVAR 67
13713: ARRAY
13714: PPUSH
13715: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
13719: LD_INT 1
13721: PUSH
13722: LD_INT 2
13724: PUSH
13725: LD_INT 3
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: LIST
13732: PUSH
13733: LD_OWVAR 67
13737: ARRAY
13738: PPUSH
13739: LD_INT 13
13741: PPUSH
13742: CALL 12295 0 2
// lastBattle = 1 ;
13746: LD_ADDR_EXP 27
13750: PUSH
13751: LD_INT 1
13753: ST_TO_ADDR
// end ;
13754: PPOPN 1
13756: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
13757: LD_EXP 27
13761: PUSH
13762: LD_INT 1
13764: EQUAL
13765: PUSH
13766: LD_INT 26
13768: PPUSH
13769: LD_INT 22
13771: PUSH
13772: LD_INT 3
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PUSH
13779: LD_INT 21
13781: PUSH
13782: LD_INT 1
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PPUSH
13793: CALL_OW 70
13797: PUSH
13798: LD_INT 0
13800: EQUAL
13801: AND
13802: IFFALSE 13859
13804: GO 13806
13806: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
13807: LD_EXP 9
13811: PPUSH
13812: LD_STRING D6-Pow-1
13814: PPUSH
13815: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
13819: LD_EXP 1
13823: PPUSH
13824: LD_STRING D6-JMM-1
13826: PPUSH
13827: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
13831: LD_EXP 9
13835: PPUSH
13836: LD_STRING D6-Pow-2
13838: PPUSH
13839: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
13843: LD_EXP 1
13847: PPUSH
13848: LD_STRING D6-JMM-2
13850: PPUSH
13851: CALL_OW 88
// FinishMission ;
13855: CALL 13860 0 0
// end ;
13859: END
// export function FinishMission ; var tmp ; begin
13860: LD_INT 0
13862: PPUSH
13863: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
13864: LD_ADDR_VAR 0 2
13868: PUSH
13869: LD_INT 22
13871: PUSH
13872: LD_INT 1
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PUSH
13879: LD_INT 21
13881: PUSH
13882: LD_INT 2
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: PUSH
13889: LD_INT 24
13891: PUSH
13892: LD_INT 251
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: LIST
13903: PPUSH
13904: CALL_OW 69
13908: ST_TO_ADDR
// if tmp then
13909: LD_VAR 0 2
13913: IFFALSE 13927
// SaveVehicles ( tmp , 02_tanks_1 ) ;
13915: LD_VAR 0 2
13919: PPUSH
13920: LD_STRING 02_tanks_1
13922: PPUSH
13923: CALL 9987 0 2
// if mikhailStatus = 1 then
13927: LD_EXP 21
13931: PUSH
13932: LD_INT 1
13934: EQUAL
13935: IFFALSE 13949
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
13937: LD_EXP 21
13941: PPUSH
13942: LD_STRING 02_mikhailStatus_1
13944: PPUSH
13945: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
13949: LD_INT 1
13951: PPUSH
13952: CALL_OW 274
13956: PPUSH
13957: LD_INT 1
13959: PPUSH
13960: CALL_OW 275
13964: PPUSH
13965: LD_STRING 02_resources_4
13967: PPUSH
13968: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
13972: LD_INT 1
13974: PPUSH
13975: CALL_OW 274
13979: PPUSH
13980: LD_INT 1
13982: PPUSH
13983: CALL_OW 275
13987: PUSH
13988: LD_INT 200
13990: GREATEREQUAL
13991: IFFALSE 14005
// begin AddMedal ( Cans , 1 ) ;
13993: LD_STRING Cans
13995: PPUSH
13996: LD_INT 1
13998: PPUSH
13999: CALL_OW 101
// end else
14003: GO 14016
// begin AddMedal ( Cans , - 1 ) ;
14005: LD_STRING Cans
14007: PPUSH
14008: LD_INT 1
14010: NEG
14011: PPUSH
14012: CALL_OW 101
// end ; if deadsCounter <= 3 then
14016: LD_EXP 29
14020: PUSH
14021: LD_INT 3
14023: LESSEQUAL
14024: IFFALSE 14038
// begin AddMedal ( Deaths , 1 ) ;
14026: LD_STRING Deaths
14028: PPUSH
14029: LD_INT 1
14031: PPUSH
14032: CALL_OW 101
// end else
14036: GO 14049
// begin AddMedal ( Deaths , - 1 ) ;
14038: LD_STRING Deaths
14040: PPUSH
14041: LD_INT 1
14043: NEG
14044: PPUSH
14045: CALL_OW 101
// end ; if mikhailStatus = 0 then
14049: LD_EXP 21
14053: PUSH
14054: LD_INT 0
14056: EQUAL
14057: IFFALSE 14070
// AddMedal ( Prisoner , - 1 ) ;
14059: LD_STRING Prisoner
14061: PPUSH
14062: LD_INT 1
14064: NEG
14065: PPUSH
14066: CALL_OW 101
// if mikhailStatus = 1 then
14070: LD_EXP 21
14074: PUSH
14075: LD_INT 1
14077: EQUAL
14078: IFFALSE 14090
// AddMedal ( Prisoner , 1 ) ;
14080: LD_STRING Prisoner
14082: PPUSH
14083: LD_INT 1
14085: PPUSH
14086: CALL_OW 101
// if mikhailStatus = 2 then
14090: LD_EXP 21
14094: PUSH
14095: LD_INT 2
14097: EQUAL
14098: IFFALSE 14110
// AddMedal ( Prisoner , 2 ) ;
14100: LD_STRING Prisoner
14102: PPUSH
14103: LD_INT 2
14105: PPUSH
14106: CALL_OW 101
// if mikhailStatus = 3 then
14110: LD_EXP 21
14114: PUSH
14115: LD_INT 3
14117: EQUAL
14118: IFFALSE 14131
// AddMedal ( Prisoner , - 2 ) ;
14120: LD_STRING Prisoner
14122: PPUSH
14123: LD_INT 2
14125: NEG
14126: PPUSH
14127: CALL_OW 101
// GiveMedals ( MAIN ) ;
14131: LD_STRING MAIN
14133: PPUSH
14134: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
14138: LD_INT 22
14140: PUSH
14141: LD_INT 1
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 23
14150: PUSH
14151: LD_INT 1
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: LD_INT 21
14160: PUSH
14161: LD_INT 1
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: PPUSH
14173: CALL_OW 69
14177: PPUSH
14178: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
14182: LD_EXP 1
14186: PPUSH
14187: LD_STRING JMM
14189: PPUSH
14190: CALL_OW 38
// SaveCharacters ( Bobby , Bobby ) ;
14194: LD_EXP 2
14198: PPUSH
14199: LD_STRING Bobby
14201: PPUSH
14202: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
14206: LD_EXP 3
14210: PPUSH
14211: LD_STRING Cyrus
14213: PPUSH
14214: CALL_OW 38
// SaveCharacters ( Lisa , Lisa ) ;
14218: LD_EXP 4
14222: PPUSH
14223: LD_STRING Lisa
14225: PPUSH
14226: CALL_OW 38
// SaveCharacters ( Khatam , Khatam ) ;
14230: LD_EXP 5
14234: PPUSH
14235: LD_STRING Khatam
14237: PPUSH
14238: CALL_OW 38
// if IsOK ( Brian ) then
14242: LD_EXP 6
14246: PPUSH
14247: CALL_OW 302
14251: IFFALSE 14265
// SaveCharacters ( Brian , Brian ) ;
14253: LD_EXP 6
14257: PPUSH
14258: LD_STRING Brian
14260: PPUSH
14261: CALL_OW 38
// if IsOk ( Jerry ) then
14265: LD_EXP 7
14269: PPUSH
14270: CALL_OW 302
14274: IFFALSE 14288
// SaveCharacters ( Jerry , Jerry ) ;
14276: LD_EXP 7
14280: PPUSH
14281: LD_STRING Jerry
14283: PPUSH
14284: CALL_OW 38
// if mikhailStatus = 1 then
14288: LD_EXP 21
14292: PUSH
14293: LD_INT 1
14295: EQUAL
14296: IFFALSE 14310
// SaveCharacters ( Mikhail , Mikhail ) ;
14298: LD_EXP 8
14302: PPUSH
14303: LD_STRING Mikhail
14305: PPUSH
14306: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
14310: LD_INT 50
14312: PUSH
14313: EMPTY
14314: LIST
14315: PUSH
14316: LD_INT 22
14318: PUSH
14319: LD_INT 1
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 21
14328: PUSH
14329: LD_INT 1
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: LIST
14340: PPUSH
14341: CALL_OW 69
14345: PUSH
14346: LD_EXP 1
14350: PUSH
14351: LD_EXP 2
14355: PUSH
14356: LD_EXP 3
14360: PUSH
14361: LD_EXP 4
14365: PUSH
14366: LD_EXP 5
14370: PUSH
14371: LD_EXP 6
14375: PUSH
14376: LD_EXP 7
14380: PUSH
14381: LD_EXP 8
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: DIFF
14396: PPUSH
14397: LD_STRING 02_other_survivors
14399: PPUSH
14400: CALL_OW 38
// YouWin ;
14404: CALL_OW 103
// end ;
14408: LD_VAR 0 1
14412: RET
