// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// PrepareDifficulty ;
 161: CALL 10176 0 0
// PrepareRussianCommander ;
 165: CALL 11512 0 0
// PrepareSouthBase ;
 169: CALL 11595 0 0
// PrepareNorthBase ;
 173: CALL 11952 0 0
// PrepareOtherRussians ;
 177: CALL 12318 0 0
// PrepareHeroes ;
 181: CALL 10491 0 0
// PrepareLisSquad ;
 185: CALL 10734 0 0
// PrepareOtherAmericans ;
 189: CALL 11079 0 0
// end ; end_of_file
 193: END
// every 1 do var tmp ;
 194: GO 196
 196: DISABLE
 197: LD_INT 0
 199: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 209: LD_ADDR_VAR 0 1
 213: PUSH
 214: LD_INT 22
 216: PUSH
 217: LD_INT 4
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 21
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PPUSH
 238: CALL_OW 69
 242: PUSH
 243: LD_EXP 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: DIFF
 251: ST_TO_ADDR
// if Cyrus and Bobby then
 252: LD_EXP 3
 256: PUSH
 257: LD_EXP 2
 261: AND
 262: IFFALSE 592
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 264: LD_EXP 3
 268: PPUSH
 269: LD_INT 43
 271: PPUSH
 272: LD_INT 72
 274: PPUSH
 275: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_INT 44
 286: PPUSH
 287: LD_INT 70
 289: PPUSH
 290: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 294: LD_EXP 1
 298: PPUSH
 299: LD_INT 46
 301: PPUSH
 302: LD_INT 73
 304: PPUSH
 305: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 309: LD_EXP 3
 313: PPUSH
 314: LD_STRING D1a-Cyrus-1
 316: PPUSH
 317: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_STRING D1a-JMM-1
 328: PPUSH
 329: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 333: LD_EXP 3
 337: PPUSH
 338: LD_INT 37
 340: PPUSH
 341: LD_INT 66
 343: PPUSH
 344: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 348: LD_EXP 2
 352: PPUSH
 353: LD_INT 41
 355: PPUSH
 356: LD_INT 67
 358: PPUSH
 359: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 363: LD_EXP 1
 367: PPUSH
 368: LD_INT 38
 370: PPUSH
 371: LD_INT 64
 373: PPUSH
 374: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 378: LD_EXP 2
 382: PPUSH
 383: LD_STRING D1a-Bobby-2
 385: PPUSH
 386: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 390: LD_EXP 3
 394: PPUSH
 395: LD_INT 35
 397: PPUSH
 398: LD_INT 62
 400: PPUSH
 401: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 405: LD_EXP 2
 409: PPUSH
 410: LD_INT 32
 412: PPUSH
 413: LD_INT 60
 415: PPUSH
 416: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 420: LD_EXP 1
 424: PPUSH
 425: LD_INT 35
 427: PPUSH
 428: LD_INT 60
 430: PPUSH
 431: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 435: LD_EXP 1
 439: PPUSH
 440: LD_STRING D1a-JMM-2
 442: PPUSH
 443: CALL_OW 88
// ComWalk ( Lisa ) ;
 447: LD_EXP 4
 451: PPUSH
 452: CALL_OW 138
// wait ( 0 0$1 ) ;
 456: LD_INT 35
 458: PPUSH
 459: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 463: LD_EXP 4
 467: PPUSH
 468: LD_EXP 1
 472: PPUSH
 473: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 477: LD_EXP 1
 481: PUSH
 482: LD_EXP 3
 486: PUSH
 487: LD_EXP 2
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PPUSH
 497: LD_EXP 4
 501: PPUSH
 502: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 506: LD_VAR 0 1
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: LD_INT 33
 517: PPUSH
 518: LD_INT 55
 520: PPUSH
 521: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 525: LD_VAR 0 1
 529: PUSH
 530: LD_INT 2
 532: ARRAY
 533: PPUSH
 534: LD_INT 30
 536: PPUSH
 537: LD_INT 54
 539: PPUSH
 540: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 544: LD_VAR 0 1
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: LD_EXP 1
 557: PPUSH
 558: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 562: LD_VAR 0 1
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 1
 575: PPUSH
 576: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 580: LD_EXP 4
 584: PPUSH
 585: LD_STRING D1a-Lisa-2
 587: PPUSH
 588: CALL_OW 88
// end ; if Cyrus and not Bobby then
 592: LD_EXP 3
 596: PUSH
 597: LD_EXP 2
 601: NOT
 602: AND
 603: IFFALSE 808
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 605: LD_EXP 3
 609: PPUSH
 610: LD_INT 43
 612: PPUSH
 613: LD_INT 72
 615: PPUSH
 616: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 46
 627: PPUSH
 628: LD_INT 73
 630: PPUSH
 631: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 635: LD_EXP 3
 639: PPUSH
 640: LD_STRING D1a-Cyrus-1
 642: PPUSH
 643: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 647: LD_EXP 1
 651: PPUSH
 652: LD_STRING D1a-JMM-1
 654: PPUSH
 655: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 659: LD_EXP 3
 663: PPUSH
 664: LD_INT 37
 666: PPUSH
 667: LD_INT 66
 669: PPUSH
 670: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 674: LD_EXP 1
 678: PPUSH
 679: LD_INT 38
 681: PPUSH
 682: LD_INT 64
 684: PPUSH
 685: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 689: LD_EXP 3
 693: PPUSH
 694: LD_STRING D1a-Cyrus-2
 696: PPUSH
 697: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 701: LD_EXP 3
 705: PPUSH
 706: LD_INT 35
 708: PPUSH
 709: LD_INT 62
 711: PPUSH
 712: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 716: LD_EXP 1
 720: PPUSH
 721: LD_INT 35
 723: PPUSH
 724: LD_INT 60
 726: PPUSH
 727: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 731: LD_EXP 1
 735: PPUSH
 736: LD_STRING D1a-JMM-2
 738: PPUSH
 739: CALL_OW 88
// ComWalk ( Lisa ) ;
 743: LD_EXP 4
 747: PPUSH
 748: CALL_OW 138
// wait ( 0 0$1 ) ;
 752: LD_INT 35
 754: PPUSH
 755: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 759: LD_EXP 4
 763: PPUSH
 764: LD_EXP 1
 768: PPUSH
 769: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 773: LD_EXP 4
 777: PPUSH
 778: LD_STRING D1a-Lisa-2
 780: PPUSH
 781: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 785: LD_EXP 1
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PPUSH
 799: LD_EXP 4
 803: PPUSH
 804: CALL_OW 119
// end ; if not Cyrus and Bobby then
 808: LD_EXP 3
 812: NOT
 813: PUSH
 814: LD_EXP 2
 818: AND
 819: IFFALSE 1098
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 821: LD_EXP 2
 825: PPUSH
 826: LD_INT 44
 828: PPUSH
 829: LD_INT 70
 831: PPUSH
 832: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 836: LD_EXP 1
 840: PPUSH
 841: LD_INT 46
 843: PPUSH
 844: LD_INT 73
 846: PPUSH
 847: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 851: LD_EXP 2
 855: PPUSH
 856: LD_STRING D1a-Bobby-1
 858: PPUSH
 859: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 863: LD_EXP 1
 867: PPUSH
 868: LD_STRING D1a-JMM-1
 870: PPUSH
 871: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 875: LD_EXP 2
 879: PPUSH
 880: LD_INT 37
 882: PPUSH
 883: LD_INT 66
 885: PPUSH
 886: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 890: LD_EXP 1
 894: PPUSH
 895: LD_INT 38
 897: PPUSH
 898: LD_INT 64
 900: PPUSH
 901: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 905: LD_EXP 2
 909: PPUSH
 910: LD_STRING D1a-Bobby-2
 912: PPUSH
 913: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 917: LD_EXP 2
 921: PPUSH
 922: LD_INT 35
 924: PPUSH
 925: LD_INT 62
 927: PPUSH
 928: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 932: LD_EXP 1
 936: PPUSH
 937: LD_INT 35
 939: PPUSH
 940: LD_INT 60
 942: PPUSH
 943: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 947: LD_EXP 1
 951: PPUSH
 952: LD_STRING D1a-JMM-2
 954: PPUSH
 955: CALL_OW 88
// ComWalk ( Lisa ) ;
 959: LD_EXP 4
 963: PPUSH
 964: CALL_OW 138
// wait ( 0 0$1 ) ;
 968: LD_INT 35
 970: PPUSH
 971: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 975: LD_EXP 4
 979: PPUSH
 980: LD_EXP 1
 984: PPUSH
 985: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 989: LD_EXP 1
 993: PUSH
 994: LD_EXP 3
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PPUSH
1003: LD_EXP 4
1007: PPUSH
1008: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1012: LD_VAR 0 1
1016: PUSH
1017: LD_INT 1
1019: ARRAY
1020: PPUSH
1021: LD_INT 33
1023: PPUSH
1024: LD_INT 55
1026: PPUSH
1027: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1031: LD_VAR 0 1
1035: PUSH
1036: LD_INT 2
1038: ARRAY
1039: PPUSH
1040: LD_INT 30
1042: PPUSH
1043: LD_INT 54
1045: PPUSH
1046: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1050: LD_VAR 0 1
1054: PUSH
1055: LD_INT 1
1057: ARRAY
1058: PPUSH
1059: LD_EXP 1
1063: PPUSH
1064: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1068: LD_VAR 0 1
1072: PUSH
1073: LD_INT 2
1075: ARRAY
1076: PPUSH
1077: LD_EXP 1
1081: PPUSH
1082: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1086: LD_EXP 4
1090: PPUSH
1091: LD_STRING D1a-Lisa-2
1093: PPUSH
1094: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1098: LD_EXP 3
1102: NOT
1103: PUSH
1104: LD_EXP 2
1108: NOT
1109: AND
1110: IFFALSE 1324
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1112: LD_EXP 1
1116: PPUSH
1117: LD_INT 37
1119: PPUSH
1120: LD_INT 66
1122: PPUSH
1123: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1127: LD_EXP 1
1131: PPUSH
1132: LD_STRING D1b-JMM-1
1134: PPUSH
1135: CALL_OW 88
// ComCrawl ( JMM ) ;
1139: LD_EXP 1
1143: PPUSH
1144: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1148: LD_EXP 1
1152: PPUSH
1153: LD_INT 35
1155: PPUSH
1156: LD_INT 60
1158: PPUSH
1159: CALL_OW 171
// wait ( 0 0$8 ) ;
1163: LD_INT 280
1165: PPUSH
1166: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_STRING D1b-JMM-1a
1177: PPUSH
1178: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1182: LD_EXP 1
1186: PUSH
1187: LD_EXP 4
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PPUSH
1196: CALL_OW 138
// wait ( 0 0$1 ) ;
1200: LD_INT 35
1202: PPUSH
1203: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1207: LD_EXP 4
1211: PPUSH
1212: LD_EXP 1
1216: PPUSH
1217: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1221: LD_EXP 1
1225: PUSH
1226: EMPTY
1227: LIST
1228: PPUSH
1229: LD_EXP 4
1233: PPUSH
1234: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1238: LD_VAR 0 1
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: LD_INT 33
1249: PPUSH
1250: LD_INT 55
1252: PPUSH
1253: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1257: LD_VAR 0 1
1261: PUSH
1262: LD_INT 2
1264: ARRAY
1265: PPUSH
1266: LD_INT 30
1268: PPUSH
1269: LD_INT 54
1271: PPUSH
1272: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1276: LD_VAR 0 1
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_EXP 1
1289: PPUSH
1290: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1294: LD_VAR 0 1
1298: PUSH
1299: LD_INT 2
1301: ARRAY
1302: PPUSH
1303: LD_EXP 1
1307: PPUSH
1308: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1312: LD_EXP 4
1316: PPUSH
1317: LD_STRING D1b-Lisa-1
1319: PPUSH
1320: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1324: LD_EXP 1
1328: PPUSH
1329: LD_STRING D1-JMM-1
1331: PPUSH
1332: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1336: LD_EXP 4
1340: PPUSH
1341: LD_STRING D1-Lisa-1
1343: PPUSH
1344: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1348: LD_EXP 1
1352: PPUSH
1353: LD_STRING D1-JMM-2
1355: PPUSH
1356: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1360: LD_EXP 9
1364: PPUSH
1365: LD_STRING D1-Pow-2
1367: PPUSH
1368: CALL_OW 94
// if Cyrus then
1372: LD_EXP 3
1376: IFFALSE 1402
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1378: LD_EXP 3
1382: PPUSH
1383: LD_STRING D1-Cyrus-2
1385: PPUSH
1386: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-3
1397: PPUSH
1398: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1402: LD_EXP 9
1406: PPUSH
1407: LD_STRING D1-Pow-3
1409: PPUSH
1410: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1414: LD_EXP 1
1418: PPUSH
1419: LD_STRING D1-JMM-4
1421: PPUSH
1422: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1426: LD_EXP 9
1430: PPUSH
1431: LD_STRING D1-Pow-4
1433: PPUSH
1434: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1438: LD_EXP 9
1442: PPUSH
1443: LD_STRING D1-Pow-4a
1445: PPUSH
1446: CALL_OW 94
// if Cyrus then
1450: LD_EXP 3
1454: IFFALSE 1468
// Say ( Cyrus , D1-Cyrus-4 ) ;
1456: LD_EXP 3
1460: PPUSH
1461: LD_STRING D1-Cyrus-4
1463: PPUSH
1464: CALL_OW 88
// if Bobby then
1468: LD_EXP 2
1472: IFFALSE 1510
// begin Say ( Bobby , D1-Bobby-4 ) ;
1474: LD_EXP 2
1478: PPUSH
1479: LD_STRING D1-Bobby-4
1481: PPUSH
1482: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1486: LD_EXP 4
1490: PPUSH
1491: LD_STRING D1-Lisa-4
1493: PPUSH
1494: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1498: LD_EXP 1
1502: PPUSH
1503: LD_STRING D1-JMM-5
1505: PPUSH
1506: CALL_OW 88
// end ; InGameOff ;
1510: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1514: LD_INT 22
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 69
1528: PUSH
1529: LD_EXP 6
1533: PUSH
1534: LD_EXP 7
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: DIFF
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1551: LD_STRING M1
1553: PPUSH
1554: CALL_OW 337
// SaveForQuickRestart ;
1558: CALL_OW 22
// end ;
1562: PPOPN 1
1564: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1565: LD_INT 7
1567: PPUSH
1568: LD_INT 22
1570: PUSH
1571: LD_INT 1
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 70
1582: PUSH
1583: LD_INT 0
1585: GREATER
1586: IFFALSE 1956
1588: GO 1590
1590: DISABLE
// begin InGameOn ;
1591: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1595: LD_INT 22
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 21
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PPUSH
1619: CALL_OW 69
1623: PPUSH
1624: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1628: LD_INT 24
1630: PPUSH
1631: LD_INT 32
1633: PPUSH
1634: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1638: LD_EXP 5
1642: PPUSH
1643: LD_INT 4
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 4
1660: PPUSH
1661: CALL_OW 336
// wait ( 0 0$1 ) ;
1665: LD_INT 35
1667: PPUSH
1668: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1672: LD_EXP 5
1676: PPUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_INT 38
1682: PPUSH
1683: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1687: LD_EXP 5
1691: PPUSH
1692: LD_EXP 1
1696: PPUSH
1697: CALL_OW 179
// wait ( 0 0$1 ) ;
1701: LD_INT 35
1703: PPUSH
1704: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1708: LD_EXP 5
1712: PPUSH
1713: LD_STRING D2a-Khat-1
1715: PPUSH
1716: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1720: LD_EXP 1
1724: PPUSH
1725: LD_STRING D2a-JMM-1
1727: PPUSH
1728: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1732: LD_EXP 5
1736: PPUSH
1737: LD_STRING D2a-Khat-2
1739: PPUSH
1740: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1744: LD_EXP 1
1748: PPUSH
1749: LD_STRING D2a-JMM-2
1751: PPUSH
1752: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1756: LD_EXP 5
1760: PPUSH
1761: LD_STRING D2a-Khat-3
1763: PPUSH
1764: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1768: LD_EXP 1
1772: PPUSH
1773: LD_STRING D2a-JMM-3
1775: PPUSH
1776: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1780: LD_EXP 5
1784: PPUSH
1785: LD_STRING D2a-Khat-4
1787: PPUSH
1788: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1792: LD_EXP 1
1796: PPUSH
1797: LD_STRING D2a-JMM-4
1799: PPUSH
1800: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1804: LD_EXP 5
1808: PPUSH
1809: LD_STRING D2a-Khat-5
1811: PPUSH
1812: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1816: LD_EXP 1
1820: PPUSH
1821: LD_STRING D2a-JMM-5
1823: PPUSH
1824: CALL_OW 88
// InGameOff ;
1828: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1832: LD_INT 22
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 21
1844: PUSH
1845: LD_INT 1
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 3
1854: PUSH
1855: LD_INT 24
1857: PUSH
1858: LD_INT 800
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: LIST
1873: PPUSH
1874: CALL_OW 69
1878: PUSH
1879: LD_INT 0
1881: GREATER
1882: IFFALSE 1956
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1884: LD_EXP 5
1888: PPUSH
1889: LD_INT 22
1891: PUSH
1892: LD_INT 1
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 21
1901: PUSH
1902: LD_INT 1
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PUSH
1909: LD_INT 3
1911: PUSH
1912: LD_INT 24
1914: PUSH
1915: LD_INT 1000
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_INT 1
1938: ARRAY
1939: PPUSH
1940: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1944: LD_EXP 5
1948: PPUSH
1949: LD_STRING D2b-Khat-1
1951: PPUSH
1952: CALL_OW 88
// end ; end ;
1956: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
1957: LD_INT 15
1959: PPUSH
1960: LD_INT 22
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PPUSH
1970: CALL_OW 70
1974: PUSH
1975: LD_INT 0
1977: GREATER
1978: IFFALSE 3138
1980: GO 1982
1982: DISABLE
1983: LD_INT 0
1985: PPUSH
1986: PPUSH
1987: PPUSH
1988: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
1989: LD_ADDR_VAR 0 2
1993: PUSH
1994: LD_INT 999
1996: PUSH
1997: LD_INT 999
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2007: LD_ADDR_VAR 0 4
2011: PUSH
2012: LD_INT 22
2014: PUSH
2015: LD_INT 1
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 21
2024: PUSH
2025: LD_INT 1
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PPUSH
2036: CALL_OW 69
2040: PUSH
2041: LD_EXP 1
2045: PUSH
2046: LD_EXP 2
2050: PUSH
2051: LD_EXP 3
2055: PUSH
2056: LD_EXP 4
2060: PUSH
2061: LD_EXP 5
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: DIFF
2073: ST_TO_ADDR
// PrepareDeadSoldiers ;
2074: CALL 11237 0 0
// spotCorpses = 1 ;
2078: LD_ADDR_EXP 32
2082: PUSH
2083: LD_INT 1
2085: ST_TO_ADDR
// InGameOn ;
2086: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2090: LD_INT 23
2092: PPUSH
2093: LD_INT 12
2095: PPUSH
2096: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2100: LD_ADDR_VAR 0 3
2104: PUSH
2105: LD_VAR 0 2
2109: PUSH
2110: LD_INT 1
2112: ARRAY
2113: PUSH
2114: LD_INT 2
2116: ARRAY
2117: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2118: LD_ADDR_VAR 0 1
2122: PUSH
2123: LD_INT 22
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: LD_INT 21
2135: PUSH
2136: LD_INT 1
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: PPUSH
2147: CALL_OW 69
2151: PUSH
2152: LD_EXP 1
2156: PUSH
2157: LD_EXP 5
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: DIFF
2166: PUSH
2167: FOR_IN
2168: IFFALSE 2219
// if IsOK ( i ) then
2170: LD_VAR 0 1
2174: PPUSH
2175: CALL_OW 302
2179: IFFALSE 2217
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_VAR 0 2
2190: PUSH
2191: LD_VAR 0 1
2195: PUSH
2196: LD_VAR 0 1
2200: PPUSH
2201: LD_INT 16
2203: PPUSH
2204: CALL_OW 299
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: PUSH
2213: EMPTY
2214: LIST
2215: ADD
2216: ST_TO_ADDR
2217: GO 2167
2219: POP
2220: POP
// for i = 2 to distanceTab do
2221: LD_ADDR_VAR 0 1
2225: PUSH
2226: DOUBLE
2227: LD_INT 2
2229: DEC
2230: ST_TO_ADDR
2231: LD_VAR 0 2
2235: PUSH
2236: FOR_TO
2237: IFFALSE 2283
// if distanceTab [ i ] [ 2 ] < min then
2239: LD_VAR 0 2
2243: PUSH
2244: LD_VAR 0 1
2248: ARRAY
2249: PUSH
2250: LD_INT 2
2252: ARRAY
2253: PUSH
2254: LD_VAR 0 3
2258: LESS
2259: IFFALSE 2281
// min = distanceTab [ i ] [ 2 ] ;
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PUSH
2277: LD_INT 2
2279: ARRAY
2280: ST_TO_ADDR
2281: GO 2236
2283: POP
2284: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2285: LD_ADDR_VAR 0 1
2289: PUSH
2290: LD_INT 22
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 21
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 69
2318: PUSH
2319: LD_EXP 1
2323: PUSH
2324: EMPTY
2325: LIST
2326: DIFF
2327: PUSH
2328: FOR_IN
2329: IFFALSE 2399
// begin ComMoveToArea ( i , DeadCutscene ) ;
2331: LD_VAR 0 1
2335: PPUSH
2336: LD_INT 28
2338: PPUSH
2339: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2343: LD_EXP 1
2347: PPUSH
2348: LD_INT 30
2350: PPUSH
2351: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2355: LD_VAR 0 1
2359: PPUSH
2360: LD_INT 23
2362: PPUSH
2363: LD_INT 11
2365: PPUSH
2366: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2370: LD_EXP 1
2374: PPUSH
2375: LD_INT 23
2377: PPUSH
2378: LD_INT 11
2380: PPUSH
2381: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2385: LD_EXP 34
2389: PPUSH
2390: LD_INT 250
2392: PPUSH
2393: CALL_OW 234
// end ;
2397: GO 2328
2399: POP
2400: POP
// for i = 2 to distanceTab do
2401: LD_ADDR_VAR 0 1
2405: PUSH
2406: DOUBLE
2407: LD_INT 2
2409: DEC
2410: ST_TO_ADDR
2411: LD_VAR 0 2
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2803
// begin if distanceTab [ i ] [ 2 ] = min then
2419: LD_VAR 0 2
2423: PUSH
2424: LD_VAR 0 1
2428: ARRAY
2429: PUSH
2430: LD_INT 2
2432: ARRAY
2433: PUSH
2434: LD_VAR 0 3
2438: EQUAL
2439: IFFALSE 2801
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2441: LD_VAR 0 2
2445: PUSH
2446: LD_VAR 0 1
2450: ARRAY
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: PUSH
2456: LD_EXP 2
2460: EQUAL
2461: IFFALSE 2475
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2463: LD_EXP 2
2467: PPUSH
2468: LD_STRING DCorpses-Bobby-1
2470: PPUSH
2471: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2475: LD_VAR 0 2
2479: PUSH
2480: LD_VAR 0 1
2484: ARRAY
2485: PUSH
2486: LD_INT 1
2488: ARRAY
2489: PUSH
2490: LD_EXP 3
2494: EQUAL
2495: IFFALSE 2509
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2497: LD_EXP 3
2501: PPUSH
2502: LD_STRING DCorpses-Cyrus-1
2504: PPUSH
2505: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2509: LD_VAR 0 2
2513: PUSH
2514: LD_VAR 0 1
2518: ARRAY
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: PUSH
2524: LD_EXP 4
2528: EQUAL
2529: IFFALSE 2543
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2531: LD_EXP 4
2535: PPUSH
2536: LD_STRING DCorpses-Lisa-1
2538: PPUSH
2539: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2543: LD_VAR 0 2
2547: PUSH
2548: LD_VAR 0 1
2552: ARRAY
2553: PUSH
2554: LD_INT 1
2556: ARRAY
2557: PUSH
2558: LD_VAR 0 4
2562: PUSH
2563: LD_INT 1
2565: ARRAY
2566: EQUAL
2567: PUSH
2568: LD_VAR 0 4
2572: PUSH
2573: LD_INT 1
2575: ARRAY
2576: PPUSH
2577: CALL_OW 258
2581: PUSH
2582: LD_INT 1
2584: EQUAL
2585: AND
2586: IFFALSE 2604
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2588: LD_VAR 0 4
2592: PUSH
2593: LD_INT 1
2595: ARRAY
2596: PPUSH
2597: LD_STRING DCorpses-Sol1-1
2599: PPUSH
2600: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_VAR 0 1
2613: ARRAY
2614: PUSH
2615: LD_INT 1
2617: ARRAY
2618: PUSH
2619: LD_VAR 0 4
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: EQUAL
2628: PUSH
2629: LD_VAR 0 4
2633: PUSH
2634: LD_INT 1
2636: ARRAY
2637: PPUSH
2638: CALL_OW 258
2642: PUSH
2643: LD_INT 2
2645: EQUAL
2646: AND
2647: IFFALSE 2665
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2649: LD_VAR 0 4
2653: PUSH
2654: LD_INT 1
2656: ARRAY
2657: PPUSH
2658: LD_STRING DCorpses-FSol1-1
2660: PPUSH
2661: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2665: LD_VAR 0 2
2669: PUSH
2670: LD_VAR 0 1
2674: ARRAY
2675: PUSH
2676: LD_INT 1
2678: ARRAY
2679: PUSH
2680: LD_VAR 0 4
2684: PUSH
2685: LD_INT 2
2687: ARRAY
2688: EQUAL
2689: PUSH
2690: LD_VAR 0 4
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: CALL_OW 258
2703: PUSH
2704: LD_INT 1
2706: EQUAL
2707: AND
2708: IFFALSE 2726
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2710: LD_VAR 0 4
2714: PUSH
2715: LD_INT 2
2717: ARRAY
2718: PPUSH
2719: LD_STRING DCorpses-Sol1-1
2721: PPUSH
2722: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2726: LD_VAR 0 2
2730: PUSH
2731: LD_VAR 0 1
2735: ARRAY
2736: PUSH
2737: LD_INT 1
2739: ARRAY
2740: PUSH
2741: LD_VAR 0 4
2745: PUSH
2746: LD_INT 2
2748: ARRAY
2749: EQUAL
2750: PUSH
2751: LD_VAR 0 4
2755: PUSH
2756: LD_INT 2
2758: ARRAY
2759: PPUSH
2760: CALL_OW 258
2764: PUSH
2765: LD_INT 2
2767: EQUAL
2768: AND
2769: IFFALSE 2787
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2771: LD_VAR 0 4
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_STRING DCorpses-FSol1-1
2782: PPUSH
2783: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2787: LD_EXP 34
2791: PPUSH
2792: LD_INT 150
2794: PPUSH
2795: CALL_OW 234
// break ;
2799: GO 2803
// end ; end ;
2801: GO 2416
2803: POP
2804: POP
// repeat wait ( 0 0$1 ) ;
2805: LD_INT 35
2807: PPUSH
2808: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2812: LD_ADDR_VAR 0 1
2816: PUSH
2817: LD_INT 22
2819: PUSH
2820: LD_INT 1
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 21
2829: PUSH
2830: LD_INT 1
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PPUSH
2841: CALL_OW 69
2845: PUSH
2846: LD_EXP 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: DIFF
2854: PUSH
2855: FOR_IN
2856: IFFALSE 2926
// begin ComMoveToArea ( i , DeadCutscene ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: LD_INT 28
2865: PPUSH
2866: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2870: LD_EXP 1
2874: PPUSH
2875: LD_INT 30
2877: PPUSH
2878: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2882: LD_VAR 0 1
2886: PPUSH
2887: LD_INT 23
2889: PPUSH
2890: LD_INT 11
2892: PPUSH
2893: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2897: LD_EXP 1
2901: PPUSH
2902: LD_INT 23
2904: PPUSH
2905: LD_INT 11
2907: PPUSH
2908: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2912: LD_EXP 34
2916: PPUSH
2917: LD_INT 250
2919: PPUSH
2920: CALL_OW 234
// end ;
2924: GO 2855
2926: POP
2927: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2928: LD_EXP 1
2932: PPUSH
2933: LD_INT 30
2935: PPUSH
2936: CALL_OW 308
2940: IFFALSE 2805
// wait ( 0 0$3 ) ;
2942: LD_INT 105
2944: PPUSH
2945: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2949: LD_EXP 1
2953: PPUSH
2954: LD_STRING DCorpses-JMM-1
2956: PPUSH
2957: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2961: LD_EXP 34
2965: PPUSH
2966: LD_INT 150
2968: PPUSH
2969: CALL_OW 234
// if IsOK ( Khatam ) then
2973: LD_EXP 5
2977: PPUSH
2978: CALL_OW 302
2982: IFFALSE 3122
// begin repeat wait ( 0 0$1 ) ;
2984: LD_INT 35
2986: PPUSH
2987: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
2991: LD_EXP 5
2995: PPUSH
2996: LD_EXP 34
3000: PPUSH
3001: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3005: LD_EXP 5
3009: PPUSH
3010: LD_EXP 34
3014: PPUSH
3015: CALL_OW 296
3019: PUSH
3020: LD_INT 2
3022: LESS
3023: IFFALSE 2984
// spotCorpses = 0 ;
3025: LD_ADDR_EXP 32
3029: PUSH
3030: LD_INT 0
3032: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3033: LD_EXP 34
3037: PPUSH
3038: LD_INT 10
3040: PPUSH
3041: CALL_OW 234
// wait ( 0 0$3 ) ;
3045: LD_INT 105
3047: PPUSH
3048: CALL_OW 67
// SetLives ( DyingSold , 0 ) ;
3052: LD_EXP 34
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL_OW 234
// wait ( 0 0$1 ) ;
3064: LD_INT 35
3066: PPUSH
3067: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3071: LD_EXP 1
3075: PUSH
3076: LD_EXP 5
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PPUSH
3085: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3089: LD_EXP 5
3093: PPUSH
3094: LD_EXP 1
3098: PPUSH
3099: CALL_OW 119
// wait ( 0 0$1 ) ;
3103: LD_INT 35
3105: PPUSH
3106: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3110: LD_EXP 5
3114: PPUSH
3115: LD_STRING DCorpses-Khat-1
3117: PPUSH
3118: CALL_OW 88
// end ; InGameOff ;
3122: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3126: LD_EXP 1
3130: PPUSH
3131: LD_STRING DCorpses-JMM-2
3133: PPUSH
3134: CALL_OW 88
// end ;
3138: PPOPN 4
3140: END
// every 0 0$1 trigger spotCorpses = 1 do
3141: LD_EXP 32
3145: PUSH
3146: LD_INT 1
3148: EQUAL
3149: IFFALSE 3167
3151: GO 3153
3153: DISABLE
// begin enable ;
3154: ENABLE
// SetLives ( DyingSold , 150 ) ;
3155: LD_EXP 34
3159: PPUSH
3160: LD_INT 150
3162: PPUSH
3163: CALL_OW 234
// end ;
3167: END
// every 1 trigger FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do var i ;
3168: LD_INT 8
3170: PPUSH
3171: LD_INT 22
3173: PUSH
3174: LD_INT 1
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: PPUSH
3181: CALL_OW 70
3185: PUSH
3186: LD_INT 0
3188: GREATER
3189: PUSH
3190: LD_INT 1
3192: PPUSH
3193: CALL_OW 255
3197: PUSH
3198: LD_INT 1
3200: EQUAL
3201: NOT
3202: AND
3203: PUSH
3204: LD_INT 10
3206: PPUSH
3207: CALL_OW 255
3211: PUSH
3212: LD_INT 1
3214: EQUAL
3215: NOT
3216: AND
3217: IFFALSE 3385
3219: GO 3221
3221: DISABLE
3222: LD_INT 0
3224: PPUSH
// begin InGameOn ;
3225: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3229: LD_EXP 7
3233: PPUSH
3234: LD_INT 250
3236: PPUSH
3237: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3241: LD_INT 3
3243: PPUSH
3244: LD_INT 4
3246: PPUSH
3247: LD_INT 2
3249: PPUSH
3250: LD_INT 1
3252: PPUSH
3253: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3257: LD_EXP 6
3261: PUSH
3262: LD_EXP 7
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PPUSH
3271: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3275: LD_ADDR_VAR 0 1
3279: PUSH
3280: LD_INT 9
3282: PPUSH
3283: LD_INT 22
3285: PUSH
3286: LD_INT 3
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: PPUSH
3293: CALL_OW 70
3297: PUSH
3298: FOR_IN
3299: IFFALSE 3312
// ComFree ( i ) ;
3301: LD_VAR 0 1
3305: PPUSH
3306: CALL_OW 139
3310: GO 3298
3312: POP
3313: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3314: LD_ADDR_VAR 0 1
3318: PUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 4
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 69
3333: PUSH
3334: FOR_IN
3335: IFFALSE 3348
// ComFree ( i ) ;
3337: LD_VAR 0 1
3341: PPUSH
3342: CALL_OW 139
3346: GO 3334
3348: POP
3349: POP
// wait ( 0 0$1 ) ;
3350: LD_INT 35
3352: PPUSH
3353: CALL_OW 67
// InGameOff ;
3357: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3361: LD_EXP 6
3365: PPUSH
3366: LD_STRING DF-Sol1-1
3368: PPUSH
3369: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3373: LD_EXP 1
3377: PPUSH
3378: LD_STRING DF-JMM-1
3380: PPUSH
3381: CALL_OW 88
// end ;
3385: PPOPN 1
3387: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do
3388: LD_INT 19
3390: PPUSH
3391: LD_INT 22
3393: PUSH
3394: LD_INT 3
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: PPUSH
3401: CALL_OW 70
3405: PUSH
3406: LD_INT 0
3408: EQUAL
3409: PUSH
3410: LD_INT 1
3412: PPUSH
3413: CALL_OW 255
3417: PUSH
3418: LD_INT 1
3420: EQUAL
3421: NOT
3422: AND
3423: PUSH
3424: LD_INT 10
3426: PPUSH
3427: CALL_OW 255
3431: PUSH
3432: LD_INT 1
3434: EQUAL
3435: NOT
3436: AND
3437: IFFALSE 3550
3439: GO 3441
3441: DISABLE
// begin if not IsDead ( Brian ) then
3442: LD_EXP 6
3446: PPUSH
3447: CALL_OW 301
3451: NOT
3452: IFFALSE 3466
// SetSide ( Brian , 1 ) ;
3454: LD_EXP 6
3458: PPUSH
3459: LD_INT 1
3461: PPUSH
3462: CALL_OW 235
// if not IsDead ( Jerry ) then
3466: LD_EXP 7
3470: PPUSH
3471: CALL_OW 301
3475: NOT
3476: IFFALSE 3490
// SetSide ( Jerry , 1 ) ;
3478: LD_EXP 7
3482: PPUSH
3483: LD_INT 1
3485: PPUSH
3486: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3490: LD_INT 22
3492: PUSH
3493: LD_INT 1
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 25
3502: PUSH
3503: LD_INT 4
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PPUSH
3514: CALL_OW 69
3518: PUSH
3519: LD_INT 0
3521: GREATER
3522: IFFALSE 3538
// begin Say ( JMM , DFa-JMM-1 ) ;
3524: LD_EXP 1
3528: PPUSH
3529: LD_STRING DFa-JMM-1
3531: PPUSH
3532: CALL_OW 88
// end else
3536: GO 3550
// begin Say ( JMM , DFa-JMM-1a ) ;
3538: LD_EXP 1
3542: PPUSH
3543: LD_STRING DFa-JMM-1a
3545: PPUSH
3546: CALL_OW 88
// end ; end ;
3550: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3551: LD_INT 19
3553: PPUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 3
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 70
3568: PUSH
3569: LD_INT 0
3571: EQUAL
3572: PUSH
3573: LD_EXP 6
3577: PPUSH
3578: CALL_OW 302
3582: NOT
3583: AND
3584: IFFALSE 3661
3586: GO 3588
3588: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3589: LD_INT 35
3591: PPUSH
3592: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3596: LD_EXP 6
3600: PPUSH
3601: CALL_OW 256
3605: PUSH
3606: LD_INT 250
3608: GREATER
3609: IFFALSE 3589
// Say ( Brian , DFb-Sol1-1 ) ;
3611: LD_EXP 6
3615: PPUSH
3616: LD_STRING DFb-Sol1-1
3618: PPUSH
3619: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3623: LD_EXP 6
3627: PPUSH
3628: LD_INT 78
3630: PPUSH
3631: LD_INT 74
3633: PPUSH
3634: CALL_OW 111
// if IsDead ( Jerry ) then
3638: LD_EXP 7
3642: PPUSH
3643: CALL_OW 301
3647: IFFALSE 3661
// Say ( Brian , DFb-Sol1-1a ) end ;
3649: LD_EXP 6
3653: PPUSH
3654: LD_STRING DFb-Sol1-1a
3656: PPUSH
3657: CALL_OW 88
3661: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3662: LD_INT 22
3664: PUSH
3665: LD_INT 1
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 21
3674: PUSH
3675: LD_INT 2
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: PUSH
3691: LD_INT 0
3693: EQUAL
3694: IFFALSE 3782
3696: GO 3698
3698: DISABLE
3699: LD_INT 0
3701: PPUSH
// begin enable ;
3702: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3703: LD_ADDR_VAR 0 1
3707: PUSH
3708: LD_INT 22
3710: PUSH
3711: LD_INT 3
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 21
3720: PUSH
3721: LD_INT 3
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: PUSH
3728: LD_INT 30
3730: PUSH
3731: LD_INT 31
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: LIST
3742: PPUSH
3743: CALL_OW 69
3747: PUSH
3748: FOR_IN
3749: IFFALSE 3780
// begin if See ( 1 , i ) then
3751: LD_INT 1
3753: PPUSH
3754: LD_VAR 0 1
3758: PPUSH
3759: CALL_OW 292
3763: IFFALSE 3778
// begin disable ;
3765: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3766: LD_EXP 1
3770: PPUSH
3771: LD_STRING DX1-JMM-1
3773: PPUSH
3774: CALL_OW 88
// end ; end ;
3778: GO 3748
3780: POP
3781: POP
// end ;
3782: PPOPN 1
3784: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3785: LD_INT 1
3787: PPUSH
3788: LD_INT 11
3790: PPUSH
3791: CALL_OW 294
3795: IFFALSE 4158
3797: GO 3799
3799: DISABLE
3800: LD_INT 0
3802: PPUSH
3803: PPUSH
// begin DialogueOn ;
3804: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3808: LD_INT 11
3810: PPUSH
3811: LD_INT 22
3813: PUSH
3814: LD_INT 3
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: LD_INT 21
3823: PUSH
3824: LD_INT 1
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PPUSH
3835: CALL_OW 70
3839: PUSH
3840: LD_INT 1
3842: ARRAY
3843: PPUSH
3844: LD_STRING DX3-Rus1-1
3846: PPUSH
3847: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3851: LD_EXP 1
3855: PPUSH
3856: LD_STRING DX3-JMM-1
3858: PPUSH
3859: CALL_OW 88
// DialogueOff ;
3863: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3867: LD_ADDR_VAR 0 1
3871: PUSH
3872: LD_INT 11
3874: PPUSH
3875: LD_INT 22
3877: PUSH
3878: LD_INT 3
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 1
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 70
3903: PUSH
3904: FOR_IN
3905: IFFALSE 3925
// southBaseDefenders = southBaseDefenders ^ i ;
3907: LD_ADDR_EXP 25
3911: PUSH
3912: LD_EXP 25
3916: PUSH
3917: LD_VAR 0 1
3921: ADD
3922: ST_TO_ADDR
3923: GO 3904
3925: POP
3926: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
3927: LD_INT 455
3929: PUSH
3930: LD_INT 420
3932: PUSH
3933: LD_INT 315
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: LIST
3940: PUSH
3941: LD_OWVAR 67
3945: ARRAY
3946: PPUSH
3947: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3951: LD_INT 35
3953: PPUSH
3954: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
3958: LD_ADDR_VAR 0 1
3962: PUSH
3963: LD_INT 22
3965: PUSH
3966: LD_INT 3
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PUSH
3973: LD_INT 21
3975: PUSH
3976: LD_INT 2
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: PUSH
3983: LD_INT 58
3985: PUSH
3986: EMPTY
3987: LIST
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: LIST
3993: PPUSH
3994: CALL_OW 69
3998: PUSH
3999: FOR_IN
4000: IFFALSE 4070
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
4002: LD_ADDR_VAR 0 2
4006: PUSH
4007: LD_INT 22
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PUSH
4017: LD_INT 21
4019: PUSH
4020: LD_INT 1
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: PUSH
4027: LD_INT 25
4029: PUSH
4030: LD_INT 3
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: LIST
4041: PPUSH
4042: CALL_OW 69
4046: PUSH
4047: FOR_IN
4048: IFFALSE 4066
// begin ComEnterUnit ( j , i ) ;
4050: LD_VAR 0 2
4054: PPUSH
4055: LD_VAR 0 1
4059: PPUSH
4060: CALL_OW 120
// end ;
4064: GO 4047
4066: POP
4067: POP
// end ;
4068: GO 3999
4070: POP
4071: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4072: LD_INT 22
4074: PUSH
4075: LD_INT 3
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 21
4084: PUSH
4085: LD_INT 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 58
4094: PUSH
4095: EMPTY
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: PPUSH
4103: CALL_OW 69
4107: PUSH
4108: LD_INT 0
4110: EQUAL
4111: PUSH
4112: LD_INT 22
4114: PUSH
4115: LD_INT 3
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_INT 21
4124: PUSH
4125: LD_INT 1
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: PUSH
4132: LD_INT 25
4134: PUSH
4135: LD_INT 3
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 69
4151: PUSH
4152: LD_INT 0
4154: EQUAL
4155: OR
4156: IFFALSE 3951
// end ;
4158: PPOPN 2
4160: END
// every 0 0$1 do var i , tmp ;
4161: GO 4163
4163: DISABLE
4164: LD_INT 0
4166: PPUSH
4167: PPUSH
// begin enable ;
4168: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4169: LD_ADDR_VAR 0 2
4173: PUSH
4174: LD_INT 22
4176: PUSH
4177: LD_INT 1
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PUSH
4184: LD_INT 21
4186: PUSH
4187: LD_INT 1
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PPUSH
4198: CALL_OW 69
4202: ST_TO_ADDR
// for i in tmp do
4203: LD_ADDR_VAR 0 1
4207: PUSH
4208: LD_VAR 0 2
4212: PUSH
4213: FOR_IN
4214: IFFALSE 4336
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4216: LD_VAR 0 1
4220: PPUSH
4221: LD_INT 5
4223: PPUSH
4224: CALL_OW 296
4228: PUSH
4229: LD_INT 4
4231: LESS
4232: PUSH
4233: LD_VAR 0 1
4237: PPUSH
4238: LD_INT 4
4240: PPUSH
4241: CALL_OW 296
4245: PUSH
4246: LD_INT 4
4248: LESS
4249: OR
4250: IFFALSE 4334
// begin disable ;
4252: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4253: LD_INT 5
4255: PUSH
4256: LD_INT 4
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PPUSH
4263: CALL_OW 85
// if IsOK ( Bobby ) then
4267: LD_EXP 2
4271: PPUSH
4272: CALL_OW 302
4276: IFFALSE 4313
// begin DialogueOn ;
4278: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4282: LD_EXP 2
4286: PPUSH
4287: LD_STRING DX2-Bobby-1
4289: PPUSH
4290: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4294: LD_EXP 1
4298: PPUSH
4299: LD_STRING DX2-JMM-1a
4301: PPUSH
4302: CALL_OW 88
// DialogueOff ;
4306: CALL_OW 7
// disable ;
4310: DISABLE
// end else
4311: GO 4334
// begin DialogueOn ;
4313: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4317: LD_EXP 1
4321: PPUSH
4322: LD_STRING DX2-JMM-1
4324: PPUSH
4325: CALL_OW 88
// DialogueOff ;
4329: CALL_OW 7
// disable ;
4333: DISABLE
// end ; end ; end ;
4334: GO 4213
4336: POP
4337: POP
// end ;
4338: PPOPN 2
4340: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4341: LD_INT 22
4343: PUSH
4344: LD_INT 1
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: PUSH
4351: LD_INT 23
4353: PUSH
4354: LD_INT 3
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 21
4363: PUSH
4364: LD_INT 2
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 34
4373: PUSH
4374: LD_INT 42
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: PPUSH
4387: CALL_OW 69
4391: PUSH
4392: LD_INT 1
4394: GREATEREQUAL
4395: IFFALSE 4862
4397: GO 4399
4399: DISABLE
4400: LD_INT 0
4402: PPUSH
4403: PPUSH
4404: PPUSH
4405: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4406: LD_ADDR_VAR 0 1
4410: PUSH
4411: LD_INT 22
4413: PUSH
4414: LD_INT 1
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: PUSH
4421: LD_INT 23
4423: PUSH
4424: LD_INT 3
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 21
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 34
4443: PUSH
4444: LD_INT 42
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PPUSH
4457: CALL_OW 69
4461: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4462: LD_ADDR_VAR 0 2
4466: PUSH
4467: LD_INT 22
4469: PUSH
4470: LD_INT 1
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: PUSH
4477: LD_INT 21
4479: PUSH
4480: LD_INT 1
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PUSH
4487: LD_INT 26
4489: PUSH
4490: LD_INT 1
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: LIST
4501: PPUSH
4502: CALL_OW 69
4506: PUSH
4507: LD_EXP 1
4511: PUSH
4512: LD_EXP 3
4516: PUSH
4517: LD_EXP 2
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: DIFF
4527: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4528: LD_ADDR_VAR 0 3
4532: PUSH
4533: LD_INT 22
4535: PUSH
4536: LD_INT 1
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 21
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 26
4555: PUSH
4556: LD_INT 2
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: PPUSH
4568: CALL_OW 69
4572: PUSH
4573: LD_EXP 4
4577: PUSH
4578: EMPTY
4579: LIST
4580: DIFF
4581: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
4582: LD_EXP 1
4586: PPUSH
4587: CALL_OW 310
4591: NOT
4592: IFFALSE 4606
// Say ( JMM , DX2a-JMM-1 ) ;
4594: LD_EXP 1
4598: PPUSH
4599: LD_STRING DX2a-JMM-1
4601: PPUSH
4602: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4606: LD_EXP 2
4610: PPUSH
4611: CALL_OW 310
4615: PUSH
4616: LD_VAR 0 1
4620: PUSH
4621: LD_INT 1
4623: ARRAY
4624: EQUAL
4625: IFFALSE 4639
// Say ( Bobby , DX2a-Bobby-1 ) ;
4627: LD_EXP 2
4631: PPUSH
4632: LD_STRING DX2a-Bobby-1
4634: PPUSH
4635: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4639: LD_EXP 3
4643: PPUSH
4644: CALL_OW 310
4648: PUSH
4649: LD_VAR 0 1
4653: PUSH
4654: LD_INT 1
4656: ARRAY
4657: EQUAL
4658: IFFALSE 4672
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4660: LD_EXP 3
4664: PPUSH
4665: LD_STRING DX2a-Cyrus-1
4667: PPUSH
4668: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4672: LD_EXP 4
4676: PPUSH
4677: CALL_OW 310
4681: PUSH
4682: LD_VAR 0 1
4686: PUSH
4687: LD_INT 1
4689: ARRAY
4690: EQUAL
4691: IFFALSE 4705
// Say ( Lisa , DX2a-Lisa-1 ) ;
4693: LD_EXP 4
4697: PPUSH
4698: LD_STRING DX2a-Lisa-1
4700: PPUSH
4701: CALL_OW 88
// for i in temp1 do
4705: LD_ADDR_VAR 0 4
4709: PUSH
4710: LD_VAR 0 2
4714: PUSH
4715: FOR_IN
4716: IFFALSE 4753
// if IsInUnit ( i ) = tmp [ 1 ] then
4718: LD_VAR 0 4
4722: PPUSH
4723: CALL_OW 310
4727: PUSH
4728: LD_VAR 0 1
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: EQUAL
4737: IFFALSE 4751
// Say ( i , DX2a-Sol1-1 ) ;
4739: LD_VAR 0 4
4743: PPUSH
4744: LD_STRING DX2a-Sol1-1
4746: PPUSH
4747: CALL_OW 88
4751: GO 4715
4753: POP
4754: POP
// for i in temp2 do
4755: LD_ADDR_VAR 0 4
4759: PUSH
4760: LD_VAR 0 3
4764: PUSH
4765: FOR_IN
4766: IFFALSE 4803
// if IsInUnit ( i ) = tmp [ 1 ] then
4768: LD_VAR 0 4
4772: PPUSH
4773: CALL_OW 310
4777: PUSH
4778: LD_VAR 0 1
4782: PUSH
4783: LD_INT 1
4785: ARRAY
4786: EQUAL
4787: IFFALSE 4801
// Say ( i , DX2a-FSol1-1 ) ;
4789: LD_VAR 0 4
4793: PPUSH
4794: LD_STRING DX2a-FSol1-1
4796: PPUSH
4797: CALL_OW 88
4801: GO 4765
4803: POP
4804: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4805: LD_EXP 1
4809: PPUSH
4810: CALL_OW 310
4814: PUSH
4815: LD_VAR 0 1
4819: PUSH
4820: LD_INT 1
4822: ARRAY
4823: EQUAL
4824: IFFALSE 4838
// Say ( JMM , DX2b-JMM-1 ) ;
4826: LD_EXP 1
4830: PPUSH
4831: LD_STRING DX2b-JMM-1
4833: PPUSH
4834: CALL_OW 88
// if not IsInUnit ( JMM ) then
4838: LD_EXP 1
4842: PPUSH
4843: CALL_OW 310
4847: NOT
4848: IFFALSE 4862
// Say ( JMM , DX2a-JMM-2 ) ;
4850: LD_EXP 1
4854: PPUSH
4855: LD_STRING DX2a-JMM-2
4857: PPUSH
4858: CALL_OW 88
// end ;
4862: PPOPN 4
4864: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4865: LD_INT 1
4867: PPUSH
4868: CALL_OW 255
4872: PUSH
4873: LD_INT 1
4875: EQUAL
4876: PUSH
4877: LD_INT 10
4879: PPUSH
4880: CALL_OW 255
4884: PUSH
4885: LD_INT 1
4887: EQUAL
4888: OR
4889: IFFALSE 4949
4891: GO 4893
4893: DISABLE
// begin DialogueOn ;
4894: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4898: LD_EXP 1
4902: PPUSH
4903: LD_STRING D3-JMM-1
4905: PPUSH
4906: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4910: LD_EXP 9
4914: PPUSH
4915: LD_STRING D3-Pow-1
4917: PPUSH
4918: CALL_OW 94
// if IsOK ( Cyrus ) then
4922: LD_EXP 3
4926: PPUSH
4927: CALL_OW 302
4931: IFFALSE 4945
// Say ( Cyrus , D3-Cyrus-1 ) ;
4933: LD_EXP 3
4937: PPUSH
4938: LD_STRING D3-Cyrus-1
4940: PPUSH
4941: CALL_OW 88
// DialogueOff ;
4945: CALL_OW 7
// end ;
4949: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , i ;
4950: LD_INT 1
4952: PPUSH
4953: CALL_OW 255
4957: PUSH
4958: LD_INT 1
4960: EQUAL
4961: PUSH
4962: LD_INT 10
4964: PPUSH
4965: CALL_OW 255
4969: PUSH
4970: LD_INT 1
4972: EQUAL
4973: AND
4974: IFFALSE 6142
4976: GO 4978
4978: DISABLE
4979: LD_INT 0
4981: PPUSH
4982: PPUSH
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) diff [ JMM ] ;
4983: LD_ADDR_VAR 0 1
4987: PUSH
4988: LD_INT 22
4990: PUSH
4991: LD_INT 1
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: LD_INT 23
5000: PUSH
5001: LD_INT 1
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: LD_INT 25
5010: PUSH
5011: LD_INT 2
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: LIST
5022: PPUSH
5023: CALL_OW 69
5027: PUSH
5028: LD_EXP 1
5032: PUSH
5033: EMPTY
5034: LIST
5035: DIFF
5036: ST_TO_ADDR
// DialogueOn ;
5037: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5041: LD_EXP 1
5045: PPUSH
5046: LD_STRING D3a-JMM-1
5048: PPUSH
5049: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5053: LD_EXP 9
5057: PPUSH
5058: LD_STRING D3a-Pow-1
5060: PPUSH
5061: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5065: LD_EXP 1
5069: PPUSH
5070: LD_STRING D3a-JMM-2
5072: PPUSH
5073: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5077: LD_EXP 9
5081: PPUSH
5082: LD_STRING D3a-Pow-2
5084: PPUSH
5085: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5089: LD_EXP 1
5093: PPUSH
5094: LD_STRING D3a-JMM-3
5096: PPUSH
5097: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5101: LD_EXP 9
5105: PPUSH
5106: LD_STRING D3a-Pow-3
5108: PPUSH
5109: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5113: LD_EXP 1
5117: PPUSH
5118: LD_STRING D3a-JMM-4
5120: PPUSH
5121: CALL_OW 88
// DialogueOff ;
5125: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5129: LD_STRING M2
5131: PPUSH
5132: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3b-JMM-1
5143: PPUSH
5144: CALL_OW 88
// wait ( 0 0$5 ) ;
5148: LD_INT 175
5150: PPUSH
5151: CALL_OW 67
// InGameOn ;
5155: CALL_OW 8
// PrepareRussianHeroes ;
5159: CALL 11394 0 0
// CenterNowOnUnits ( Mikhail ) ;
5163: LD_EXP 8
5167: PPUSH
5168: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5172: LD_EXP 1
5176: PUSH
5177: LD_VAR 0 1
5181: PUSH
5182: LD_INT 1
5184: ARRAY
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PPUSH
5190: LD_EXP 8
5194: PPUSH
5195: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5199: LD_EXP 8
5203: PPUSH
5204: LD_VAR 0 1
5208: PUSH
5209: LD_INT 1
5211: ARRAY
5212: PPUSH
5213: CALL_OW 119
// Wait ( 0 0$02 ) ;
5217: LD_INT 70
5219: PPUSH
5220: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5224: LD_EXP 8
5228: PPUSH
5229: LD_STRING D4-Mikh-1
5231: PPUSH
5232: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5236: LD_VAR 0 1
5240: PUSH
5241: LD_INT 1
5243: ARRAY
5244: PPUSH
5245: CALL_OW 258
5249: PUSH
5250: LD_INT 1
5252: EQUAL
5253: IFFALSE 5271
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5255: LD_VAR 0 1
5259: PUSH
5260: LD_INT 1
5262: ARRAY
5263: PPUSH
5264: LD_STRING D4-Sol1-1
5266: PPUSH
5267: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5271: LD_VAR 0 1
5275: PUSH
5276: LD_INT 1
5278: ARRAY
5279: PPUSH
5280: CALL_OW 258
5284: PUSH
5285: LD_INT 2
5287: EQUAL
5288: IFFALSE 5306
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5290: LD_VAR 0 1
5294: PUSH
5295: LD_INT 1
5297: ARRAY
5298: PPUSH
5299: LD_STRING D4-FSol1-1
5301: PPUSH
5302: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5306: LD_EXP 8
5310: PPUSH
5311: LD_STRING D4-Mikh-2
5313: PPUSH
5314: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5318: LD_VAR 0 1
5322: PUSH
5323: LD_INT 1
5325: ARRAY
5326: PPUSH
5327: CALL_OW 258
5331: PUSH
5332: LD_INT 1
5334: EQUAL
5335: IFFALSE 5353
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5337: LD_VAR 0 1
5341: PUSH
5342: LD_INT 1
5344: ARRAY
5345: PPUSH
5346: LD_STRING D4-Sol1-2
5348: PPUSH
5349: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5353: LD_VAR 0 1
5357: PUSH
5358: LD_INT 1
5360: ARRAY
5361: PPUSH
5362: CALL_OW 258
5366: PUSH
5367: LD_INT 2
5369: EQUAL
5370: IFFALSE 5388
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5372: LD_VAR 0 1
5376: PUSH
5377: LD_INT 1
5379: ARRAY
5380: PPUSH
5381: LD_STRING D4-FSol1-2
5383: PPUSH
5384: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5388: LD_EXP 8
5392: PPUSH
5393: LD_STRING D4-Mikh-3
5395: PPUSH
5396: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5400: LD_VAR 0 1
5404: PUSH
5405: LD_INT 1
5407: ARRAY
5408: PPUSH
5409: CALL_OW 258
5413: PUSH
5414: LD_INT 1
5416: EQUAL
5417: IFFALSE 5435
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5419: LD_VAR 0 1
5423: PUSH
5424: LD_INT 1
5426: ARRAY
5427: PPUSH
5428: LD_STRING D4-Sol1-3
5430: PPUSH
5431: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5435: LD_VAR 0 1
5439: PUSH
5440: LD_INT 1
5442: ARRAY
5443: PPUSH
5444: CALL_OW 258
5448: PUSH
5449: LD_INT 2
5451: EQUAL
5452: IFFALSE 5470
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5454: LD_VAR 0 1
5458: PUSH
5459: LD_INT 1
5461: ARRAY
5462: PPUSH
5463: LD_STRING D4-FSol1-3
5465: PPUSH
5466: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5470: LD_EXP 8
5474: PPUSH
5475: LD_STRING D4-Mikh-4
5477: PPUSH
5478: CALL_OW 88
// case query ( Qs1 ) of 1 :
5482: LD_STRING Qs1
5484: PPUSH
5485: CALL_OW 97
5489: PUSH
5490: LD_INT 1
5492: DOUBLE
5493: EQUAL
5494: IFTRUE 5498
5496: GO 5533
5498: POP
// begin InGameOff ;
5499: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5503: LD_INT 1
5505: PPUSH
5506: LD_INT 6
5508: PPUSH
5509: LD_INT 2
5511: PPUSH
5512: LD_INT 1
5514: PPUSH
5515: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5519: LD_EXP 8
5523: PPUSH
5524: LD_INT 17
5526: PPUSH
5527: CALL_OW 113
// end ; 2 :
5531: GO 6126
5533: LD_INT 2
5535: DOUBLE
5536: EQUAL
5537: IFTRUE 5541
5539: GO 6091
5541: POP
// begin repeat wait ( 0 0$1 ) ;
5542: LD_INT 35
5544: PPUSH
5545: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5549: LD_VAR 0 1
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: PPUSH
5558: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5562: LD_VAR 0 1
5566: PUSH
5567: LD_INT 1
5569: ARRAY
5570: PPUSH
5571: LD_EXP 1
5575: PPUSH
5576: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5580: LD_EXP 8
5584: PPUSH
5585: LD_EXP 1
5589: PPUSH
5590: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5594: LD_EXP 1
5598: PPUSH
5599: LD_EXP 8
5603: PPUSH
5604: CALL_OW 296
5608: PUSH
5609: LD_INT 5
5611: LESS
5612: IFFALSE 5542
// ComTurnUnit ( Mikhail , JMM ) ;
5614: LD_EXP 8
5618: PPUSH
5619: LD_EXP 1
5623: PPUSH
5624: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5628: LD_EXP 1
5632: PPUSH
5633: LD_STRING D4b-JMM-1
5635: PPUSH
5636: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5640: LD_EXP 8
5644: PPUSH
5645: LD_STRING D4b-Mikh-1
5647: PPUSH
5648: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5652: LD_EXP 1
5656: PPUSH
5657: LD_STRING D4b-JMM-2
5659: PPUSH
5660: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5664: LD_EXP 8
5668: PPUSH
5669: LD_STRING D4b-Mikh-2
5671: PPUSH
5672: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5676: LD_EXP 1
5680: PPUSH
5681: LD_STRING D4b-JMM-3
5683: PPUSH
5684: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5688: LD_EXP 8
5692: PPUSH
5693: LD_STRING D4b-Mikh-3
5695: PPUSH
5696: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5700: LD_EXP 1
5704: PPUSH
5705: LD_STRING D4b-JMM-4
5707: PPUSH
5708: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5712: LD_EXP 8
5716: PPUSH
5717: LD_STRING D4b-Mikh-4
5719: PPUSH
5720: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5724: LD_EXP 1
5728: PPUSH
5729: LD_STRING D4b-JMM-5
5731: PPUSH
5732: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5736: LD_EXP 8
5740: PPUSH
5741: LD_STRING D4b-Mikh-5
5743: PPUSH
5744: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5748: LD_EXP 1
5752: PPUSH
5753: LD_STRING D4b-JMM-6
5755: PPUSH
5756: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5760: LD_EXP 8
5764: PPUSH
5765: LD_STRING D4b-Mikh-6
5767: PPUSH
5768: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5772: LD_EXP 1
5776: PPUSH
5777: LD_STRING D4b-JMM-7
5779: PPUSH
5780: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5784: LD_EXP 8
5788: PPUSH
5789: LD_STRING D4b-Mikh-7
5791: PPUSH
5792: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5796: LD_VAR 0 1
5800: PUSH
5801: LD_INT 1
5803: ARRAY
5804: PPUSH
5805: CALL_OW 258
5809: PUSH
5810: LD_INT 1
5812: EQUAL
5813: IFFALSE 5831
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5815: LD_VAR 0 1
5819: PUSH
5820: LD_INT 1
5822: ARRAY
5823: PPUSH
5824: LD_STRING D4b-Sol1-7
5826: PPUSH
5827: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5831: LD_VAR 0 1
5835: PUSH
5836: LD_INT 1
5838: ARRAY
5839: PPUSH
5840: CALL_OW 258
5844: PUSH
5845: LD_INT 2
5847: EQUAL
5848: IFFALSE 5866
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5850: LD_VAR 0 1
5854: PUSH
5855: LD_INT 1
5857: ARRAY
5858: PPUSH
5859: LD_STRING D4b-FSol1-7
5861: PPUSH
5862: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5866: LD_EXP 1
5870: PPUSH
5871: LD_STRING D4b-JMM-8
5873: PPUSH
5874: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5878: LD_VAR 0 1
5882: PUSH
5883: LD_INT 1
5885: ARRAY
5886: PPUSH
5887: CALL_OW 258
5891: PUSH
5892: LD_INT 1
5894: EQUAL
5895: IFFALSE 5913
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5897: LD_VAR 0 1
5901: PUSH
5902: LD_INT 1
5904: ARRAY
5905: PPUSH
5906: LD_STRING D4b-Sol1-8
5908: PPUSH
5909: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5913: LD_VAR 0 1
5917: PUSH
5918: LD_INT 1
5920: ARRAY
5921: PPUSH
5922: CALL_OW 258
5926: PUSH
5927: LD_INT 2
5929: EQUAL
5930: IFFALSE 5948
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
5932: LD_VAR 0 1
5936: PUSH
5937: LD_INT 1
5939: ARRAY
5940: PPUSH
5941: LD_STRING D4b-FSol1-8
5943: PPUSH
5944: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
5948: LD_EXP 1
5952: PPUSH
5953: LD_STRING D4b-JMM-9
5955: PPUSH
5956: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
5960: LD_EXP 8
5964: PPUSH
5965: LD_INT 1
5967: PPUSH
5968: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5972: LD_ADDR_VAR 0 2
5976: PUSH
5977: LD_INT 22
5979: PUSH
5980: LD_INT 1
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: PPUSH
5990: CALL_OW 69
5994: PUSH
5995: FOR_IN
5996: IFFALSE 6009
// ComFree ( i ) ;
5998: LD_VAR 0 2
6002: PPUSH
6003: CALL_OW 139
6007: GO 5995
6009: POP
6010: POP
// repeat wait ( 0 0$1 ) ;
6011: LD_INT 35
6013: PPUSH
6014: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6018: LD_EXP 8
6022: PPUSH
6023: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6027: LD_EXP 8
6031: PUSH
6032: LD_VAR 0 1
6036: PUSH
6037: LD_INT 1
6039: ARRAY
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PPUSH
6045: LD_INT 1
6047: PPUSH
6048: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6052: LD_EXP 8
6056: PPUSH
6057: CALL_OW 310
6061: IFFALSE 6011
// mikhailDepot = IsInUnit ( Mikhail ) ;
6063: LD_ADDR_EXP 23
6067: PUSH
6068: LD_EXP 8
6072: PPUSH
6073: CALL_OW 310
6077: ST_TO_ADDR
// InGameOff ;
6078: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6082: LD_STRING M3
6084: PPUSH
6085: CALL_OW 337
// end ; 3 :
6089: GO 6126
6091: LD_INT 3
6093: DOUBLE
6094: EQUAL
6095: IFTRUE 6099
6097: GO 6125
6099: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6100: LD_EXP 8
6104: PPUSH
6105: LD_INT 17
6107: PPUSH
6108: CALL_OW 113
// wait ( 0 0$3 ) ;
6112: LD_INT 105
6114: PPUSH
6115: CALL_OW 67
// InGameOff ;
6119: CALL_OW 9
// end ; end ;
6123: GO 6126
6125: POP
// PrepareTigers ;
6126: CALL 14027 0 0
// RussianTrap ;
6130: CALL 9875 0 0
// tigersRespawn = 1 ;
6134: LD_ADDR_EXP 30
6138: PUSH
6139: LD_INT 1
6141: ST_TO_ADDR
// end ;
6142: PPOPN 2
6144: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6145: LD_INT 1
6147: PPUSH
6148: CALL_OW 255
6152: PUSH
6153: LD_INT 1
6155: EQUAL
6156: PUSH
6157: LD_INT 10
6159: PPUSH
6160: CALL_OW 255
6164: PUSH
6165: LD_INT 1
6167: EQUAL
6168: AND
6169: PUSH
6170: LD_INT 1
6172: PPUSH
6173: CALL_OW 274
6177: PPUSH
6178: LD_INT 1
6180: PPUSH
6181: CALL_OW 275
6185: PUSH
6186: LD_INT 100
6188: GREATEREQUAL
6189: AND
6190: IFFALSE 6353
6192: GO 6194
6194: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6195: LD_INT 2100
6197: PPUSH
6198: LD_INT 4200
6200: PPUSH
6201: CALL_OW 12
6205: PUSH
6206: LD_INT 1050
6208: PLUS
6209: PPUSH
6210: CALL_OW 67
// PrepareCargoBays ;
6214: CALL 12510 0 0
// cargoRespawn = 1 ;
6218: LD_ADDR_EXP 28
6222: PUSH
6223: LD_INT 1
6225: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6226: LD_EXP 15
6230: PUSH
6231: LD_EXP 16
6235: PUSH
6236: LD_EXP 17
6240: PUSH
6241: LD_EXP 18
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: PPUSH
6252: LD_INT 36
6254: PPUSH
6255: LD_INT 13
6257: PPUSH
6258: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6262: LD_EXP 15
6266: PUSH
6267: LD_EXP 16
6271: PUSH
6272: LD_EXP 17
6276: PUSH
6277: LD_EXP 18
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: PPUSH
6288: LD_INT 40
6290: PPUSH
6291: LD_INT 20
6293: PPUSH
6294: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6298: LD_EXP 15
6302: PUSH
6303: LD_EXP 16
6307: PUSH
6308: LD_EXP 17
6312: PUSH
6313: LD_EXP 18
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: PPUSH
6324: LD_INT 53
6326: PPUSH
6327: LD_INT 16
6329: PPUSH
6330: CALL_OW 171
// wait ( 0 0$5 ) ;
6334: LD_INT 175
6336: PPUSH
6337: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6341: LD_EXP 17
6345: PPUSH
6346: LD_STRING D5-Rus2-1
6348: PPUSH
6349: CALL_OW 88
// end ;
6353: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6354: LD_EXP 28
6358: PUSH
6359: LD_INT 1
6361: EQUAL
6362: IFFALSE 6570
6364: GO 6366
6366: DISABLE
6367: LD_INT 0
6369: PPUSH
6370: PPUSH
6371: PPUSH
6372: PPUSH
// begin enable ;
6373: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6374: LD_ADDR_VAR 0 3
6378: PUSH
6379: LD_INT 22
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PUSH
6389: LD_INT 21
6391: PUSH
6392: LD_INT 2
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: LD_INT 34
6401: PUSH
6402: LD_INT 51
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: PPUSH
6414: CALL_OW 69
6418: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
6419: LD_ADDR_VAR 0 4
6423: PUSH
6424: LD_INT 22
6426: PUSH
6427: LD_INT 1
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 23
6436: PUSH
6437: LD_INT 1
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PPUSH
6448: CALL_OW 69
6452: ST_TO_ADDR
// for i in tmp1 do
6453: LD_ADDR_VAR 0 1
6457: PUSH
6458: LD_VAR 0 3
6462: PUSH
6463: FOR_IN
6464: IFFALSE 6568
// begin for j in tmp2 do
6466: LD_ADDR_VAR 0 2
6470: PUSH
6471: LD_VAR 0 4
6475: PUSH
6476: FOR_IN
6477: IFFALSE 6564
// begin if GetDistUnits ( i , j ) < 7 then
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_VAR 0 2
6488: PPUSH
6489: CALL_OW 296
6493: PUSH
6494: LD_INT 7
6496: LESS
6497: IFFALSE 6562
// begin disable ;
6499: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6500: LD_EXP 15
6504: PUSH
6505: LD_EXP 16
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PPUSH
6514: LD_INT 7
6516: PPUSH
6517: LD_INT 9
6519: PPUSH
6520: CALL_OW 111
// if cargoSee = 0 then
6524: LD_EXP 29
6528: PUSH
6529: LD_INT 0
6531: EQUAL
6532: IFFALSE 6554
// begin cargoSee = 1 ;
6534: LD_ADDR_EXP 29
6538: PUSH
6539: LD_INT 1
6541: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6542: LD_EXP 17
6546: PPUSH
6547: LD_STRING D5-Rus2-1a
6549: PPUSH
6550: CALL_OW 88
// end ; cargoEscape = 1 ;
6554: LD_ADDR_EXP 20
6558: PUSH
6559: LD_INT 1
6561: ST_TO_ADDR
// end ; end ;
6562: GO 6476
6564: POP
6565: POP
// end ;
6566: GO 6463
6568: POP
6569: POP
// end ;
6570: PPOPN 4
6572: END
// every 0 0$1 trigger cargoEscape > 0 do
6573: LD_EXP 20
6577: PUSH
6578: LD_INT 0
6580: GREATER
6581: IFFALSE 6707
6583: GO 6585
6585: DISABLE
// begin enable ;
6586: ENABLE
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6587: LD_EXP 15
6591: PPUSH
6592: LD_INT 13
6594: PPUSH
6595: CALL_OW 308
6599: PUSH
6600: LD_EXP 17
6604: PPUSH
6605: LD_INT 13
6607: PPUSH
6608: CALL_OW 308
6612: OR
6613: IFFALSE 6647
// begin RemoveUnit ( cargo1 ) ;
6615: LD_EXP 15
6619: PPUSH
6620: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6624: LD_EXP 17
6628: PPUSH
6629: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6633: LD_ADDR_EXP 20
6637: PUSH
6638: LD_EXP 20
6642: PUSH
6643: LD_INT 1
6645: PLUS
6646: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6647: LD_EXP 16
6651: PPUSH
6652: LD_INT 13
6654: PPUSH
6655: CALL_OW 308
6659: PUSH
6660: LD_EXP 18
6664: PPUSH
6665: LD_INT 13
6667: PPUSH
6668: CALL_OW 308
6672: OR
6673: IFFALSE 6707
// begin RemoveUnit ( cargo2 ) ;
6675: LD_EXP 16
6679: PPUSH
6680: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6684: LD_EXP 18
6688: PPUSH
6689: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6693: LD_ADDR_EXP 20
6697: PUSH
6698: LD_EXP 20
6702: PUSH
6703: LD_INT 1
6705: PLUS
6706: ST_TO_ADDR
// end ; end ;
6707: END
// every 0 0$1 trigger cargoEscape > 1 do
6708: LD_EXP 20
6712: PUSH
6713: LD_INT 1
6715: GREATER
6716: IFFALSE 6880
6718: GO 6720
6720: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
6721: LD_INT 4
6723: PPUSH
6724: LD_INT 1
6726: PPUSH
6727: LD_INT 1
6729: PPUSH
6730: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6734: LD_INT 31
6736: PPUSH
6737: LD_INT 1
6739: PPUSH
6740: LD_INT 1
6742: PPUSH
6743: CALL_OW 324
// if IsOK ( Jerry ) then
6747: LD_EXP 7
6751: PPUSH
6752: CALL_OW 302
6756: IFFALSE 6772
// begin Say ( Jerry , D5a-Sol1-1 ) ;
6758: LD_EXP 7
6762: PPUSH
6763: LD_STRING D5a-Sol1-1
6765: PPUSH
6766: CALL_OW 88
// end else
6770: GO 6868
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
6772: LD_INT 22
6774: PUSH
6775: LD_INT 1
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PUSH
6782: LD_INT 23
6784: PUSH
6785: LD_INT 1
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PUSH
6792: LD_INT 26
6794: PUSH
6795: LD_INT 1
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: PPUSH
6807: CALL_OW 69
6811: PUSH
6812: LD_INT 2
6814: PPUSH
6815: LD_INT 22
6817: PUSH
6818: LD_INT 1
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: PUSH
6825: LD_INT 23
6827: PUSH
6828: LD_INT 1
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 26
6837: PUSH
6838: LD_INT 1
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: PPUSH
6850: CALL_OW 69
6854: PPUSH
6855: CALL_OW 12
6859: ARRAY
6860: PPUSH
6861: LD_STRING D5a-Sol1-1
6863: PPUSH
6864: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6868: LD_EXP 1
6872: PPUSH
6873: LD_STRING D5a-JMM-1
6875: PPUSH
6876: CALL_OW 88
// end ;
6880: END
// every 0 0$1 trigger GetLives ( dep1 ) < 1000 or GetLives ( dep2 ) < 1000 do
6881: LD_INT 1
6883: PPUSH
6884: CALL_OW 256
6888: PUSH
6889: LD_INT 1000
6891: LESS
6892: PUSH
6893: LD_INT 10
6895: PPUSH
6896: CALL_OW 256
6900: PUSH
6901: LD_INT 1000
6903: LESS
6904: OR
6905: IFFALSE 6922
6907: GO 6909
6909: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
6910: LD_EXP 1
6914: PPUSH
6915: LD_STRING D8-JMM-1
6917: PPUSH
6918: CALL_OW 88
// end ;
6922: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6923: LD_EXP 8
6927: PPUSH
6928: CALL_OW 310
6932: PUSH
6933: LD_INT 1
6935: EQUAL
6936: PUSH
6937: LD_EXP 22
6941: PUSH
6942: LD_INT 3
6944: EQUAL
6945: NOT
6946: AND
6947: IFFALSE 6969
6949: GO 6951
6951: DISABLE
// begin mikhailInBase = 1 ;
6952: LD_ADDR_EXP 22
6956: PUSH
6957: LD_INT 1
6959: ST_TO_ADDR
// mikhailStatus = 1 ;
6960: LD_ADDR_EXP 21
6964: PUSH
6965: LD_INT 1
6967: ST_TO_ADDR
// enable ;
6968: ENABLE
// end ;
6969: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
6970: LD_EXP 8
6974: PPUSH
6975: LD_INT 25
6977: PPUSH
6978: CALL_OW 308
6982: PUSH
6983: LD_EXP 22
6987: PUSH
6988: LD_INT 1
6990: EQUAL
6991: AND
6992: PUSH
6993: LD_EXP 8
6997: PPUSH
6998: CALL_OW 255
7002: PUSH
7003: LD_INT 1
7005: EQUAL
7006: AND
7007: IFFALSE 7337
7009: GO 7011
7011: DISABLE
// begin enable ;
7012: ENABLE
// case query ( QMikh2 ) of 1 :
7013: LD_STRING QMikh2
7015: PPUSH
7016: CALL_OW 97
7020: PUSH
7021: LD_INT 1
7023: DOUBLE
7024: EQUAL
7025: IFTRUE 7029
7027: GO 7096
7029: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7030: LD_INT 1
7032: PPUSH
7033: LD_INT 6
7035: PPUSH
7036: LD_INT 2
7038: PPUSH
7039: LD_INT 1
7041: PPUSH
7042: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7046: LD_EXP 8
7050: PPUSH
7051: LD_INT 6
7053: PPUSH
7054: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7058: LD_EXP 8
7062: PPUSH
7063: CALL_OW 122
// wait ( 0 0$1 ) ;
7067: LD_INT 35
7069: PPUSH
7070: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7074: LD_EXP 8
7078: PPUSH
7079: LD_INT 17
7081: PPUSH
7082: CALL_OW 113
// mikhailInbase = 0 ;
7086: LD_ADDR_EXP 22
7090: PUSH
7091: LD_INT 0
7093: ST_TO_ADDR
// end ; 2 :
7094: GO 7337
7096: LD_INT 2
7098: DOUBLE
7099: EQUAL
7100: IFTRUE 7104
7102: GO 7277
7104: POP
// begin mikhailInBase = 2 ;
7105: LD_ADDR_EXP 22
7109: PUSH
7110: LD_INT 2
7112: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7113: LD_EXP 8
7117: PPUSH
7118: LD_INT 6
7120: PPUSH
7121: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7125: LD_EXP 8
7129: PPUSH
7130: CALL_OW 122
// wait ( 0 0$1 ) ;
7134: LD_INT 35
7136: PPUSH
7137: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7141: LD_EXP 8
7145: PPUSH
7146: LD_EXP 8
7150: PPUSH
7151: CALL_OW 250
7155: PUSH
7156: LD_INT 2
7158: PLUS
7159: PPUSH
7160: LD_EXP 8
7164: PPUSH
7165: CALL_OW 251
7169: PUSH
7170: LD_INT 2
7172: PLUS
7173: PPUSH
7174: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7178: LD_EXP 8
7182: PPUSH
7183: LD_EXP 8
7187: PPUSH
7188: CALL_OW 250
7192: PUSH
7193: LD_INT 1
7195: PLUS
7196: PPUSH
7197: LD_EXP 8
7201: PPUSH
7202: CALL_OW 251
7206: PUSH
7207: LD_INT 2
7209: PLUS
7210: PPUSH
7211: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7215: LD_EXP 8
7219: PPUSH
7220: LD_EXP 8
7224: PPUSH
7225: CALL_OW 250
7229: PUSH
7230: LD_INT 2
7232: PLUS
7233: PPUSH
7234: LD_EXP 8
7238: PPUSH
7239: CALL_OW 251
7243: PPUSH
7244: CALL_OW 171
// wait ( 0 0$5 ) ;
7248: LD_INT 175
7250: PPUSH
7251: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7255: LD_EXP 8
7259: PPUSH
7260: LD_INT 25
7262: PPUSH
7263: CALL_OW 113
// mikhailInBase = 4 ;
7267: LD_ADDR_EXP 22
7271: PUSH
7272: LD_INT 4
7274: ST_TO_ADDR
// end ; 3 :
7275: GO 7337
7277: LD_INT 3
7279: DOUBLE
7280: EQUAL
7281: IFTRUE 7285
7283: GO 7336
7285: POP
// begin SetSide ( Mikhail , 6 ) ;
7286: LD_EXP 8
7290: PPUSH
7291: LD_INT 6
7293: PPUSH
7294: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7298: LD_EXP 8
7302: PPUSH
7303: CALL_OW 122
// wait ( 0 0$1 ) ;
7307: LD_INT 35
7309: PPUSH
7310: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7314: LD_EXP 8
7318: PPUSH
7319: LD_INT 17
7321: PPUSH
7322: CALL_OW 113
// mikhailInbase = 3 ;
7326: LD_ADDR_EXP 22
7330: PUSH
7331: LD_INT 3
7333: ST_TO_ADDR
// end ; end ;
7334: GO 7337
7336: POP
// end ;
7337: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7338: LD_EXP 8
7342: PPUSH
7343: LD_INT 25
7345: PPUSH
7346: CALL_OW 308
7350: PUSH
7351: LD_EXP 22
7355: PUSH
7356: LD_INT 4
7358: EQUAL
7359: AND
7360: IFFALSE 7458
7362: GO 7364
7364: DISABLE
// begin enable ;
7365: ENABLE
// SetSide ( Mikhail , 1 ) ;
7366: LD_EXP 8
7370: PPUSH
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7378: LD_INT 35
7380: PPUSH
7381: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
7385: LD_EXP 8
7389: PPUSH
7390: LD_INT 1
7392: PPUSH
7393: CALL_OW 296
7397: PUSH
7398: LD_EXP 8
7402: PPUSH
7403: LD_INT 10
7405: PPUSH
7406: CALL_OW 296
7410: LESS
7411: IFFALSE 7427
// begin ComEnterUnit ( Mikhail , dep1 ) ;
7413: LD_EXP 8
7417: PPUSH
7418: LD_INT 1
7420: PPUSH
7421: CALL_OW 120
// end else
7425: GO 7439
// begin ComEnterUnit ( Mikhail , dep2 ) ;
7427: LD_EXP 8
7431: PPUSH
7432: LD_INT 10
7434: PPUSH
7435: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
7439: LD_EXP 8
7443: PPUSH
7444: CALL_OW 310
7448: IFFALSE 7378
// mikhailInBase = 1 ;
7450: LD_ADDR_EXP 22
7454: PUSH
7455: LD_INT 1
7457: ST_TO_ADDR
// end ;
7458: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7459: LD_EXP 8
7463: PPUSH
7464: CALL_OW 310
7468: PUSH
7469: LD_EXP 22
7473: PUSH
7474: LD_INT 3
7476: EQUAL
7477: NOT
7478: AND
7479: IFFALSE 7605
7481: GO 7483
7483: DISABLE
// begin enable ;
7484: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7485: LD_INT 22
7487: PUSH
7488: LD_INT 1
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 21
7497: PUSH
7498: LD_INT 1
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 91
7507: PUSH
7508: LD_EXP 8
7512: PPUSH
7513: CALL_OW 310
7517: PUSH
7518: LD_INT 10
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: PPUSH
7531: CALL_OW 69
7535: PUSH
7536: LD_INT 1
7538: EQUAL
7539: IFFALSE 7605
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7541: LD_INT 1
7543: PPUSH
7544: LD_INT 6
7546: PPUSH
7547: LD_INT 2
7549: PPUSH
7550: LD_INT 1
7552: PPUSH
7553: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7557: LD_EXP 8
7561: PPUSH
7562: LD_INT 6
7564: PPUSH
7565: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7569: LD_EXP 8
7573: PPUSH
7574: CALL_OW 122
// wait ( 0 0$1 ) ;
7578: LD_INT 35
7580: PPUSH
7581: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7585: LD_EXP 8
7589: PPUSH
7590: LD_INT 17
7592: PPUSH
7593: CALL_OW 113
// mikhailStatus = 3 ;
7597: LD_ADDR_EXP 21
7601: PUSH
7602: LD_INT 3
7604: ST_TO_ADDR
// end ; end ;
7605: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7606: LD_EXP 1
7610: PPUSH
7611: LD_EXP 23
7615: PPUSH
7616: CALL_OW 296
7620: PUSH
7621: LD_INT 5
7623: LESS
7624: PUSH
7625: LD_EXP 21
7629: PUSH
7630: LD_INT 3
7632: EQUAL
7633: AND
7634: PUSH
7635: LD_EXP 22
7639: PUSH
7640: LD_INT 3
7642: EQUAL
7643: NOT
7644: AND
7645: IFFALSE 7861
7647: GO 7649
7649: DISABLE
7650: LD_INT 0
7652: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
7653: LD_ADDR_VAR 0 1
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_INT 1
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 21
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: LD_INT 26
7680: PUSH
7681: LD_INT 1
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: LIST
7692: PPUSH
7693: CALL_OW 69
7697: PUSH
7698: LD_EXP 1
7702: PUSH
7703: EMPTY
7704: LIST
7705: DIFF
7706: ST_TO_ADDR
// DialogueOn ;
7707: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7711: LD_EXP 1
7715: PPUSH
7716: LD_STRING D7-JMM-1
7718: PPUSH
7719: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7723: LD_VAR 0 1
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: PPUSH
7732: LD_STRING D7-Sol1-1
7734: PPUSH
7735: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7739: LD_EXP 1
7743: PPUSH
7744: LD_STRING D7-JMM-2
7746: PPUSH
7747: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7751: LD_VAR 0 1
7755: PUSH
7756: LD_INT 1
7758: ARRAY
7759: PPUSH
7760: LD_STRING D7-Sol1-2
7762: PPUSH
7763: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7767: LD_EXP 1
7771: PPUSH
7772: LD_STRING D7-JMM-3
7774: PPUSH
7775: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7779: LD_VAR 0 1
7783: PUSH
7784: LD_INT 1
7786: ARRAY
7787: PPUSH
7788: LD_STRING D7-Sol1-3
7790: PPUSH
7791: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7795: LD_EXP 3
7799: PPUSH
7800: CALL_OW 302
7804: PUSH
7805: LD_EXP 4
7809: PPUSH
7810: CALL_OW 302
7814: AND
7815: IFFALSE 7857
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7817: LD_EXP 3
7821: PPUSH
7822: LD_STRING D7-Cyrus-3
7824: PPUSH
7825: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7829: LD_VAR 0 1
7833: PUSH
7834: LD_INT 1
7836: ARRAY
7837: PPUSH
7838: LD_STRING D7-Sol1-4
7840: PPUSH
7841: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7845: LD_EXP 4
7849: PPUSH
7850: LD_STRING D7-Lisa-4
7852: PPUSH
7853: CALL_OW 88
// end ; DialogueOff ;
7857: CALL_OW 7
// end ;
7861: PPOPN 1
7863: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7864: LD_EXP 8
7868: PPUSH
7869: CALL_OW 303
7873: PUSH
7874: LD_EXP 21
7878: PUSH
7879: LD_INT 3
7881: EQUAL
7882: AND
7883: IFFALSE 7897
7885: GO 7887
7887: DISABLE
// begin enable ;
7888: ENABLE
// mikhailStatus = 2 ;
7889: LD_ADDR_EXP 21
7893: PUSH
7894: LD_INT 2
7896: ST_TO_ADDR
// end ;
7897: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7898: LD_EXP 8
7902: PPUSH
7903: LD_INT 17
7905: PPUSH
7906: CALL_OW 308
7910: PUSH
7911: LD_EXP 8
7915: PPUSH
7916: CALL_OW 255
7920: PUSH
7921: LD_INT 6
7923: EQUAL
7924: AND
7925: IFFALSE 7958
7927: GO 7929
7929: DISABLE
// begin if not mikhailInBase = 3 then
7930: LD_EXP 22
7934: PUSH
7935: LD_INT 3
7937: EQUAL
7938: NOT
7939: IFFALSE 7949
// mikhailStatus = 3 ;
7941: LD_ADDR_EXP 21
7945: PUSH
7946: LD_INT 3
7948: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
7949: LD_EXP 8
7953: PPUSH
7954: CALL_OW 64
// end ;
7958: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
7959: LD_EXP 21
7963: PUSH
7964: LD_INT 3
7966: EQUAL
7967: PUSH
7968: LD_EXP 8
7972: PPUSH
7973: CALL_OW 255
7977: PUSH
7978: LD_INT 6
7980: EQUAL
7981: AND
7982: IFFALSE 8148
7984: GO 7986
7986: DISABLE
7987: LD_INT 0
7989: PPUSH
7990: PPUSH
// begin enable ;
7991: ENABLE
// if IsOk ( Mikhail ) then
7992: LD_EXP 8
7996: PPUSH
7997: CALL_OW 302
8001: IFFALSE 8148
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8003: LD_ADDR_VAR 0 2
8007: PUSH
8008: LD_EXP 8
8012: PPUSH
8013: LD_INT 22
8015: PUSH
8016: LD_INT 1
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 21
8025: PUSH
8026: LD_INT 1
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PPUSH
8037: CALL_OW 69
8041: PPUSH
8042: CALL 10067 0 2
8046: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8047: LD_VAR 0 2
8051: PPUSH
8052: LD_EXP 8
8056: PPUSH
8057: CALL_OW 296
8061: PUSH
8062: LD_INT 8
8064: LESS
8065: IFFALSE 8148
// begin if GetSex ( attacker ) = sex_male then
8067: LD_VAR 0 2
8071: PPUSH
8072: CALL_OW 258
8076: PUSH
8077: LD_INT 1
8079: EQUAL
8080: IFFALSE 8116
// begin disable ;
8082: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8083: LD_VAR 0 2
8087: PPUSH
8088: LD_STRING D7a-Sol1-1
8090: PPUSH
8091: CALL_OW 88
// wait ( 0 0$2 ) ;
8095: LD_INT 70
8097: PPUSH
8098: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8102: LD_VAR 0 2
8106: PPUSH
8107: LD_STRING D7a-Sol1-1a
8109: PPUSH
8110: CALL_OW 88
// end else
8114: GO 8148
// begin disable ;
8116: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8117: LD_VAR 0 2
8121: PPUSH
8122: LD_STRING D7a-FSol1-1
8124: PPUSH
8125: CALL_OW 88
// wait ( 0 0$2 ) ;
8129: LD_INT 70
8131: PPUSH
8132: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8136: LD_VAR 0 2
8140: PPUSH
8141: LD_STRING D7a-FSol1-1a
8143: PPUSH
8144: CALL_OW 88
// end ; end ; end ; end ;
8148: PPOPN 2
8150: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8151: LD_EXP 27
8155: PUSH
8156: LD_INT 1
8158: EQUAL
8159: PUSH
8160: LD_INT 22
8162: PPUSH
8163: LD_INT 22
8165: PUSH
8166: LD_INT 3
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 21
8175: PUSH
8176: LD_INT 1
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PPUSH
8187: CALL_OW 70
8191: PUSH
8192: LD_INT 2
8194: GREATER
8195: AND
8196: PUSH
8197: LD_INT 22
8199: PPUSH
8200: LD_INT 22
8202: PUSH
8203: LD_INT 1
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: LD_INT 2
8212: PUSH
8213: LD_INT 21
8215: PUSH
8216: LD_INT 1
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_INT 59
8225: PUSH
8226: EMPTY
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PPUSH
8238: CALL_OW 70
8242: PUSH
8243: LD_INT 0
8245: EQUAL
8246: AND
8247: IFFALSE 8262
8249: GO 8251
8251: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8252: LD_INT 1
8254: PPUSH
8255: LD_INT 3
8257: PPUSH
8258: CALL_OW 235
// end ;
8262: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8263: LD_EXP 30
8267: PUSH
8268: LD_INT 1
8270: EQUAL
8271: PUSH
8272: LD_INT 22
8274: PUSH
8275: LD_INT 0
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 25
8284: PUSH
8285: LD_INT 14
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PPUSH
8296: CALL_OW 69
8300: PUSH
8301: LD_INT 0
8303: EQUAL
8304: AND
8305: IFFALSE 8399
8307: GO 8309
8309: DISABLE
8310: LD_INT 0
8312: PPUSH
8313: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8314: LD_ADDR_VAR 0 2
8318: PUSH
8319: LD_INT 22
8321: PUSH
8322: LD_INT 1
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 21
8331: PUSH
8332: LD_INT 1
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PUSH
8339: LD_INT 23
8341: PUSH
8342: LD_INT 1
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: LIST
8353: PPUSH
8354: CALL_OW 69
8358: ST_TO_ADDR
// for i in tmp do
8359: LD_ADDR_VAR 0 1
8363: PUSH
8364: LD_VAR 0 2
8368: PUSH
8369: FOR_IN
8370: IFFALSE 8397
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8372: LD_VAR 0 1
8376: PPUSH
8377: LD_INT 1
8379: PPUSH
8380: LD_INT 4
8382: PPUSH
8383: CALL_OW 12
8387: PPUSH
8388: LD_INT 300
8390: PPUSH
8391: CALL_OW 492
// end ;
8395: GO 8369
8397: POP
8398: POP
// end ; end_of_file
8399: PPOPN 2
8401: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8402: LD_INT 0
8404: PPUSH
8405: PPUSH
8406: PPUSH
8407: PPUSH
// for i = 1 to count do
8408: LD_ADDR_VAR 0 8
8412: PUSH
8413: DOUBLE
8414: LD_INT 1
8416: DEC
8417: ST_TO_ADDR
8418: LD_VAR 0 6
8422: PUSH
8423: FOR_TO
8424: IFFALSE 8505
// begin uc_side = side ;
8426: LD_ADDR_OWVAR 20
8430: PUSH
8431: LD_VAR 0 1
8435: ST_TO_ADDR
// uc_nation = nation ;
8436: LD_ADDR_OWVAR 21
8440: PUSH
8441: LD_VAR 0 2
8445: ST_TO_ADDR
// hc_gallery =  ;
8446: LD_ADDR_OWVAR 33
8450: PUSH
8451: LD_STRING 
8453: ST_TO_ADDR
// hc_name =  ;
8454: LD_ADDR_OWVAR 26
8458: PUSH
8459: LD_STRING 
8461: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8462: LD_INT 0
8464: PPUSH
8465: LD_VAR 0 5
8469: PPUSH
8470: LD_VAR 0 4
8474: PPUSH
8475: CALL_OW 380
// un = CreateHuman ;
8479: LD_ADDR_VAR 0 10
8483: PUSH
8484: CALL_OW 44
8488: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8489: LD_VAR 0 10
8493: PPUSH
8494: LD_VAR 0 3
8498: PPUSH
8499: CALL_OW 52
// end ;
8503: GO 8423
8505: POP
8506: POP
// end ;
8507: LD_VAR 0 7
8511: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8512: LD_INT 0
8514: PPUSH
8515: PPUSH
8516: PPUSH
// uc_side := GetSide ( b ) ;
8517: LD_ADDR_OWVAR 20
8521: PUSH
8522: LD_VAR 0 2
8526: PPUSH
8527: CALL_OW 255
8531: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8532: LD_ADDR_OWVAR 21
8536: PUSH
8537: LD_VAR 0 2
8541: PPUSH
8542: CALL_OW 248
8546: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8547: LD_INT 0
8549: PPUSH
8550: LD_INT 1
8552: PPUSH
8553: LD_VAR 0 1
8557: PPUSH
8558: CALL_OW 380
// un = CreateHuman ;
8562: LD_ADDR_VAR 0 4
8566: PUSH
8567: CALL_OW 44
8571: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8572: LD_ADDR_VAR 0 5
8576: PUSH
8577: LD_VAR 0 2
8581: PPUSH
8582: CALL_OW 254
8586: PUSH
8587: LD_INT 3
8589: MINUS
8590: ST_TO_ADDR
// if dir < 0 then
8591: LD_VAR 0 5
8595: PUSH
8596: LD_INT 0
8598: LESS
8599: IFFALSE 8615
// dir := 6 + dir ;
8601: LD_ADDR_VAR 0 5
8605: PUSH
8606: LD_INT 6
8608: PUSH
8609: LD_VAR 0 5
8613: PLUS
8614: ST_TO_ADDR
// SetDir ( un , dir ) ;
8615: LD_VAR 0 4
8619: PPUSH
8620: LD_VAR 0 5
8624: PPUSH
8625: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8629: LD_VAR 0 4
8633: PPUSH
8634: LD_VAR 0 2
8638: PPUSH
8639: CALL_OW 52
// end ;
8643: LD_VAR 0 3
8647: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8648: LD_INT 0
8650: PPUSH
8651: PPUSH
8652: PPUSH
8653: PPUSH
8654: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8655: LD_ADDR_VAR 0 7
8659: PUSH
8660: LD_INT 22
8662: PUSH
8663: LD_VAR 0 1
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: LD_INT 25
8674: PUSH
8675: LD_INT 2
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PUSH
8682: LD_INT 24
8684: PUSH
8685: LD_INT 1000
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: LIST
8696: PPUSH
8697: CALL_OW 69
8701: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8702: LD_ADDR_VAR 0 5
8706: PUSH
8707: LD_VAR 0 3
8711: PPUSH
8712: LD_INT 22
8714: PUSH
8715: LD_VAR 0 1
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PUSH
8724: LD_INT 21
8726: PUSH
8727: LD_INT 3
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 3
8736: PUSH
8737: LD_INT 24
8739: PUSH
8740: LD_INT 1000
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: LIST
8755: PUSH
8756: EMPTY
8757: LIST
8758: PPUSH
8759: CALL_OW 70
8763: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8764: LD_VAR 0 5
8768: PUSH
8769: LD_INT 0
8771: GREATER
8772: PUSH
8773: LD_VAR 0 7
8777: PUSH
8778: LD_INT 0
8780: GREATER
8781: AND
8782: IFFALSE 8848
// begin for i in engineerOk_list do
8784: LD_ADDR_VAR 0 6
8788: PUSH
8789: LD_VAR 0 7
8793: PUSH
8794: FOR_IN
8795: IFFALSE 8846
// begin for j in buildings_list do
8797: LD_ADDR_VAR 0 8
8801: PUSH
8802: LD_VAR 0 5
8806: PUSH
8807: FOR_IN
8808: IFFALSE 8842
// begin AddComExitBuilding ( i ) ;
8810: LD_VAR 0 6
8814: PPUSH
8815: CALL_OW 182
// wait ( 0 0$1 ) ;
8819: LD_INT 35
8821: PPUSH
8822: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8826: LD_VAR 0 6
8830: PPUSH
8831: LD_VAR 0 8
8835: PPUSH
8836: CALL_OW 190
// end ;
8840: GO 8807
8842: POP
8843: POP
// end ;
8844: GO 8794
8846: POP
8847: POP
// end ; if buildings_list = 0 then
8848: LD_VAR 0 5
8852: PUSH
8853: LD_INT 0
8855: EQUAL
8856: IFFALSE 8889
// begin for i in engineerOK_list do
8858: LD_ADDR_VAR 0 6
8862: PUSH
8863: LD_VAR 0 7
8867: PUSH
8868: FOR_IN
8869: IFFALSE 8887
// begin ComEnterUnit ( i , building ) ;
8871: LD_VAR 0 6
8875: PPUSH
8876: LD_VAR 0 2
8880: PPUSH
8881: CALL_OW 120
// end ;
8885: GO 8868
8887: POP
8888: POP
// end ; end ;
8889: LD_VAR 0 4
8893: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8894: LD_INT 0
8896: PPUSH
8897: PPUSH
8898: PPUSH
8899: PPUSH
8900: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
8901: LD_ADDR_VAR 0 6
8905: PUSH
8906: LD_INT 22
8908: PUSH
8909: LD_VAR 0 1
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 25
8920: PUSH
8921: LD_INT 4
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 24
8930: PUSH
8931: LD_INT 250
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
8948: LD_ADDR_VAR 0 9
8952: PUSH
8953: LD_VAR 0 3
8957: PPUSH
8958: LD_INT 22
8960: PUSH
8961: LD_VAR 0 1
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 21
8972: PUSH
8973: LD_INT 1
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: LD_INT 3
8982: PUSH
8983: LD_INT 24
8985: PUSH
8986: LD_INT 650
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: LIST
9001: PPUSH
9002: CALL_OW 70
9006: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9007: LD_VAR 0 9
9011: PUSH
9012: LD_INT 0
9014: GREATER
9015: PUSH
9016: LD_VAR 0 6
9020: PUSH
9021: LD_INT 0
9023: GREATER
9024: AND
9025: IFFALSE 9152
// begin for i = 1 to damageUnits do
9027: LD_ADDR_VAR 0 7
9031: PUSH
9032: DOUBLE
9033: LD_INT 1
9035: DEC
9036: ST_TO_ADDR
9037: LD_VAR 0 9
9041: PUSH
9042: FOR_TO
9043: IFFALSE 9067
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9045: LD_VAR 0 9
9049: PUSH
9050: LD_VAR 0 7
9054: ARRAY
9055: PPUSH
9056: LD_VAR 0 2
9060: PPUSH
9061: CALL_OW 113
9065: GO 9042
9067: POP
9068: POP
// for i in sci_list do
9069: LD_ADDR_VAR 0 7
9073: PUSH
9074: LD_VAR 0 6
9078: PUSH
9079: FOR_IN
9080: IFFALSE 9148
// begin ComExitBuilding ( i ) ;
9082: LD_VAR 0 7
9086: PPUSH
9087: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9091: LD_ADDR_VAR 0 8
9095: PUSH
9096: LD_VAR 0 2
9100: PPUSH
9101: LD_INT 22
9103: PUSH
9104: LD_VAR 0 1
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PPUSH
9113: CALL_OW 70
9117: PUSH
9118: FOR_IN
9119: IFFALSE 9144
// begin AddComHeal ( i , j ) ;
9121: LD_VAR 0 7
9125: PPUSH
9126: LD_VAR 0 8
9130: PPUSH
9131: CALL_OW 188
// wait ( 1 1$0 ) ;
9135: LD_INT 2100
9137: PPUSH
9138: CALL_OW 67
// end ;
9142: GO 9118
9144: POP
9145: POP
// end ;
9146: GO 9079
9148: POP
9149: POP
// end else
9150: GO 9166
// begin AddComEnterUnit ( sci_list , build ) ;
9152: LD_VAR 0 6
9156: PPUSH
9157: LD_VAR 0 4
9161: PPUSH
9162: CALL_OW 180
// end ; end ;
9166: LD_VAR 0 5
9170: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9171: LD_INT 0
9173: PPUSH
9174: PPUSH
9175: PPUSH
9176: PPUSH
9177: PPUSH
9178: PPUSH
9179: PPUSH
9180: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9181: LD_ADDR_VAR 0 7
9185: PUSH
9186: LD_VAR 0 3
9190: PPUSH
9191: LD_INT 22
9193: PUSH
9194: LD_VAR 0 1
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PUSH
9203: LD_INT 21
9205: PUSH
9206: LD_INT 2
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: PUSH
9213: LD_INT 24
9215: PUSH
9216: LD_INT 550
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: PUSH
9223: LD_INT 34
9225: PUSH
9226: LD_INT 46
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: PPUSH
9239: CALL_OW 70
9243: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9244: LD_ADDR_VAR 0 8
9248: PUSH
9249: LD_VAR 0 3
9253: PPUSH
9254: LD_INT 22
9256: PUSH
9257: LD_VAR 0 1
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PUSH
9266: LD_INT 21
9268: PUSH
9269: LD_INT 2
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 34
9278: PUSH
9279: LD_INT 46
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: PUSH
9286: LD_INT 3
9288: PUSH
9289: LD_INT 24
9291: PUSH
9292: LD_INT 550
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: PPUSH
9309: CALL_OW 70
9313: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9314: LD_ADDR_VAR 0 9
9318: PUSH
9319: LD_VAR 0 2
9323: PPUSH
9324: LD_INT 22
9326: PUSH
9327: LD_VAR 0 1
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 21
9338: PUSH
9339: LD_INT 2
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 34
9348: PUSH
9349: LD_INT 46
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: LD_INT 24
9358: PUSH
9359: LD_INT 1000
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: PUSH
9366: LD_INT 58
9368: PUSH
9369: EMPTY
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: PPUSH
9379: CALL_OW 70
9383: ST_TO_ADDR
// for i in damageVehicle_list do
9384: LD_ADDR_VAR 0 5
9388: PUSH
9389: LD_VAR 0 8
9393: PUSH
9394: FOR_IN
9395: IFFALSE 9414
// mechanicInside_list = UnitsInside ( i ) ;
9397: LD_ADDR_VAR 0 10
9401: PUSH
9402: LD_VAR 0 5
9406: PPUSH
9407: CALL_OW 313
9411: ST_TO_ADDR
9412: GO 9394
9414: POP
9415: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9416: LD_ADDR_VAR 0 11
9420: PUSH
9421: LD_VAR 0 2
9425: PPUSH
9426: LD_INT 22
9428: PUSH
9429: LD_VAR 0 1
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 25
9440: PUSH
9441: LD_INT 3
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 70
9456: ST_TO_ADDR
// if damageVehicle_list > 0 then
9457: LD_VAR 0 8
9461: PUSH
9462: LD_INT 0
9464: GREATER
9465: IFFALSE 9538
// begin for i in damageVehicle_list do
9467: LD_ADDR_VAR 0 5
9471: PUSH
9472: LD_VAR 0 8
9476: PUSH
9477: FOR_IN
9478: IFFALSE 9536
// begin for j in mechanicInside_list do
9480: LD_ADDR_VAR 0 6
9484: PUSH
9485: LD_VAR 0 10
9489: PUSH
9490: FOR_IN
9491: IFFALSE 9532
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9493: LD_VAR 0 8
9497: PPUSH
9498: LD_VAR 0 2
9502: PPUSH
9503: CALL_OW 113
// AddComExitVehicle ( j ) ;
9507: LD_VAR 0 6
9511: PPUSH
9512: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9516: LD_VAR 0 6
9520: PPUSH
9521: LD_VAR 0 5
9525: PPUSH
9526: CALL_OW 189
// end ;
9530: GO 9490
9532: POP
9533: POP
// end ;
9534: GO 9477
9536: POP
9537: POP
// end ; if emptyVehicle_list > 0 then
9538: LD_VAR 0 9
9542: PUSH
9543: LD_INT 0
9545: GREATER
9546: IFFALSE 9596
// begin for i in emptyVehicle_list do
9548: LD_ADDR_VAR 0 5
9552: PUSH
9553: LD_VAR 0 9
9557: PUSH
9558: FOR_IN
9559: IFFALSE 9594
// begin for j in mechanicOutside_list do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: LD_VAR 0 11
9570: PUSH
9571: FOR_IN
9572: IFFALSE 9590
// begin AddComEnterUnit ( j , i ) ;
9574: LD_VAR 0 6
9578: PPUSH
9579: LD_VAR 0 5
9583: PPUSH
9584: CALL_OW 180
// end ;
9588: GO 9571
9590: POP
9591: POP
// end ;
9592: GO 9558
9594: POP
9595: POP
// end ; if VehicleOK_list > 0 then
9596: LD_VAR 0 7
9600: PUSH
9601: LD_INT 0
9603: GREATER
9604: IFFALSE 9638
// begin for i in VehicleOK_list do
9606: LD_ADDR_VAR 0 5
9610: PUSH
9611: LD_VAR 0 7
9615: PUSH
9616: FOR_IN
9617: IFFALSE 9636
// ComAgressiveMove ( i , 110 , 29 ) ;
9619: LD_VAR 0 5
9623: PPUSH
9624: LD_INT 110
9626: PPUSH
9627: LD_INT 29
9629: PPUSH
9630: CALL_OW 114
9634: GO 9616
9636: POP
9637: POP
// end ; end ;
9638: LD_VAR 0 4
9642: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9643: LD_INT 0
9645: PPUSH
9646: PPUSH
9647: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9648: LD_VAR 0 1
9652: PPUSH
9653: LD_INT 22
9655: PUSH
9656: LD_VAR 0 2
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 2
9667: PUSH
9668: LD_INT 21
9670: PUSH
9671: LD_INT 2
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 21
9680: PUSH
9681: LD_INT 1
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PPUSH
9697: CALL_OW 70
9701: PUSH
9702: LD_VAR 0 5
9706: GREATER
9707: IFFALSE 9839
// begin for i in defendersList do
9709: LD_ADDR_VAR 0 7
9713: PUSH
9714: LD_VAR 0 3
9718: PUSH
9719: FOR_IN
9720: IFFALSE 9835
// begin AddComExitBuilding ( i ) ;
9722: LD_VAR 0 7
9726: PPUSH
9727: CALL_OW 182
// wait ( 0 0$1 ) ;
9731: LD_INT 35
9733: PPUSH
9734: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9738: LD_ADDR_VAR 0 8
9742: PUSH
9743: LD_VAR 0 1
9747: PPUSH
9748: LD_INT 22
9750: PUSH
9751: LD_VAR 0 2
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: PUSH
9760: LD_INT 2
9762: PUSH
9763: LD_INT 21
9765: PUSH
9766: LD_INT 2
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PUSH
9773: LD_INT 21
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PPUSH
9792: CALL_OW 70
9796: PUSH
9797: FOR_IN
9798: IFFALSE 9831
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9800: LD_VAR 0 7
9804: PPUSH
9805: LD_VAR 0 8
9809: PPUSH
9810: CALL_OW 250
9814: PPUSH
9815: LD_VAR 0 8
9819: PPUSH
9820: CALL_OW 251
9824: PPUSH
9825: CALL_OW 174
9829: GO 9797
9831: POP
9832: POP
// end ;
9833: GO 9719
9835: POP
9836: POP
// end else
9837: GO 9870
// begin for i in defendersList do
9839: LD_ADDR_VAR 0 7
9843: PUSH
9844: LD_VAR 0 3
9848: PUSH
9849: FOR_IN
9850: IFFALSE 9868
// ComEnterUnit ( i , build ) ;
9852: LD_VAR 0 7
9856: PPUSH
9857: LD_VAR 0 4
9861: PPUSH
9862: CALL_OW 120
9866: GO 9849
9868: POP
9869: POP
// end ; end ;
9870: LD_VAR 0 6
9874: RET
// export function RussianTrap ; var i ; begin
9875: LD_INT 0
9877: PPUSH
9878: PPUSH
// if GetSide ( Brian ) = 4 then
9879: LD_EXP 6
9883: PPUSH
9884: CALL_OW 255
9888: PUSH
9889: LD_INT 4
9891: EQUAL
9892: IFFALSE 9915
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9894: LD_EXP 6
9898: PUSH
9899: LD_EXP 7
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PPUSH
9908: LD_INT 0
9910: PPUSH
9911: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
9915: LD_ADDR_VAR 0 2
9919: PUSH
9920: LD_INT 22
9922: PUSH
9923: LD_INT 3
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: LD_INT 21
9932: PUSH
9933: LD_INT 1
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PPUSH
9944: CALL_OW 69
9948: PUSH
9949: FOR_IN
9950: IFFALSE 10060
// begin ComExitBuilding ( i ) ;
9952: LD_VAR 0 2
9956: PPUSH
9957: CALL_OW 122
// wait ( 0 0$1 ) ;
9961: LD_INT 35
9963: PPUSH
9964: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
9968: LD_VAR 0 2
9972: PPUSH
9973: LD_INT 120
9975: PPUSH
9976: LD_INT 56
9978: PPUSH
9979: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
9983: LD_VAR 0 2
9987: PPUSH
9988: LD_INT 111
9990: PPUSH
9991: LD_INT 37
9993: PPUSH
9994: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
9998: LD_INT 33
10000: PPUSH
10001: CALL_OW 255
10005: PUSH
10006: LD_INT 3
10008: EQUAL
10009: PUSH
10010: LD_INT 33
10012: PPUSH
10013: CALL_OW 302
10017: AND
10018: IFFALSE 10034
// begin AddComEnterUnit ( i , arm2 ) ;
10020: LD_VAR 0 2
10024: PPUSH
10025: LD_INT 33
10027: PPUSH
10028: CALL_OW 180
// end else
10032: GO 10058
// begin AddComCrawl ( i ) ;
10034: LD_VAR 0 2
10038: PPUSH
10039: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10043: LD_VAR 0 2
10047: PPUSH
10048: LD_INT 109
10050: PPUSH
10051: LD_INT 30
10053: PPUSH
10054: CALL_OW 174
// end ; end ;
10058: GO 9949
10060: POP
10061: POP
// end ;
10062: LD_VAR 0 1
10066: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10067: LD_INT 0
10069: PPUSH
10070: PPUSH
10071: PPUSH
10072: PPUSH
10073: PPUSH
// nearest_dist = 1000 ;
10074: LD_ADDR_VAR 0 4
10078: PUSH
10079: LD_INT 1000
10081: ST_TO_ADDR
// nearest_un = un ;
10082: LD_ADDR_VAR 0 5
10086: PUSH
10087: LD_VAR 0 1
10091: ST_TO_ADDR
// for sold in units do
10092: LD_ADDR_VAR 0 6
10096: PUSH
10097: LD_VAR 0 2
10101: PUSH
10102: FOR_IN
10103: IFFALSE 10159
// begin dist = GetDistUnits ( un , sold ) ;
10105: LD_ADDR_VAR 0 7
10109: PUSH
10110: LD_VAR 0 1
10114: PPUSH
10115: LD_VAR 0 6
10119: PPUSH
10120: CALL_OW 296
10124: ST_TO_ADDR
// if dist < nearest_dist then
10125: LD_VAR 0 7
10129: PUSH
10130: LD_VAR 0 4
10134: LESS
10135: IFFALSE 10157
// begin nearest_un = sold ;
10137: LD_ADDR_VAR 0 5
10141: PUSH
10142: LD_VAR 0 6
10146: ST_TO_ADDR
// nearest_dist = dist ;
10147: LD_ADDR_VAR 0 4
10151: PUSH
10152: LD_VAR 0 7
10156: ST_TO_ADDR
// end ; end ;
10157: GO 10102
10159: POP
10160: POP
// result := nearest_un ;
10161: LD_ADDR_VAR 0 3
10165: PUSH
10166: LD_VAR 0 5
10170: ST_TO_ADDR
// end ;
10171: LD_VAR 0 3
10175: RET
// export function PrepareDifficulty ; begin
10176: LD_INT 0
10178: PPUSH
// if Difficulty = 1 then
10179: LD_OWVAR 67
10183: PUSH
10184: LD_INT 1
10186: EQUAL
10187: IFFALSE 10250
// begin RemoveUnit ( brw2 ) ;
10189: LD_INT 9
10191: PPUSH
10192: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10196: LD_INT 30
10198: PPUSH
10199: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10203: LD_INT 52
10205: PPUSH
10206: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10210: LD_INT 63
10212: PPUSH
10213: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10217: LD_INT 5
10219: PUSH
10220: LD_INT 4
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PPUSH
10227: LD_INT 60
10229: PPUSH
10230: CALL_OW 240
// RuSoldMinLevel = 0 ;
10234: LD_ADDR_EXP 13
10238: PUSH
10239: LD_INT 0
10241: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10242: LD_ADDR_EXP 14
10246: PUSH
10247: LD_INT 1
10249: ST_TO_ADDR
// end ; if Difficulty = 2 then
10250: LD_OWVAR 67
10254: PUSH
10255: LD_INT 2
10257: EQUAL
10258: IFFALSE 10300
// begin RemoveUnit ( brw4 ) ;
10260: LD_INT 52
10262: PPUSH
10263: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10267: LD_INT 5
10269: PUSH
10270: LD_INT 4
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PPUSH
10277: LD_INT 50
10279: PPUSH
10280: CALL_OW 240
// RuSoldMinLevel = 1 ;
10284: LD_ADDR_EXP 13
10288: PUSH
10289: LD_INT 1
10291: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10292: LD_ADDR_EXP 14
10296: PUSH
10297: LD_INT 2
10299: ST_TO_ADDR
// end ; if Difficulty = 3 then
10300: LD_OWVAR 67
10304: PUSH
10305: LD_INT 3
10307: EQUAL
10308: IFFALSE 10343
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10310: LD_INT 5
10312: PUSH
10313: LD_INT 4
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PPUSH
10320: LD_INT 40
10322: PPUSH
10323: CALL_OW 240
// RuSoldMinLevel = 2 ;
10327: LD_ADDR_EXP 13
10331: PUSH
10332: LD_INT 2
10334: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10335: LD_ADDR_EXP 14
10339: PUSH
10340: LD_INT 3
10342: ST_TO_ADDR
// end ; end ;
10343: LD_VAR 0 1
10347: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10348: LD_INT 0
10350: PPUSH
10351: PPUSH
10352: PPUSH
// tmp = [ ] ;
10353: LD_ADDR_VAR 0 5
10357: PUSH
10358: EMPTY
10359: ST_TO_ADDR
// if not vehicles then
10360: LD_VAR 0 1
10364: NOT
10365: IFFALSE 10369
// exit ;
10367: GO 10486
// for i in vehicles do
10369: LD_ADDR_VAR 0 4
10373: PUSH
10374: LD_VAR 0 1
10378: PUSH
10379: FOR_IN
10380: IFFALSE 10470
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10382: LD_ADDR_VAR 0 5
10386: PUSH
10387: LD_VAR 0 5
10391: PPUSH
10392: LD_INT 1
10394: PPUSH
10395: LD_VAR 0 4
10399: PPUSH
10400: CALL_OW 265
10404: PUSH
10405: LD_VAR 0 4
10409: PPUSH
10410: CALL_OW 262
10414: PUSH
10415: LD_VAR 0 4
10419: PPUSH
10420: CALL_OW 263
10424: PUSH
10425: LD_VAR 0 4
10429: PPUSH
10430: CALL_OW 264
10434: PUSH
10435: LD_VAR 0 4
10439: PPUSH
10440: CALL_OW 261
10444: PUSH
10445: LD_VAR 0 4
10449: PPUSH
10450: CALL_OW 256
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: PPUSH
10463: CALL_OW 2
10467: ST_TO_ADDR
// end ;
10468: GO 10379
10470: POP
10471: POP
// SaveVariable ( tmp , ident ) ;
10472: LD_VAR 0 5
10476: PPUSH
10477: LD_VAR 0 2
10481: PPUSH
10482: CALL_OW 39
// end ; end_of_file
10486: LD_VAR 0 3
10490: RET
// export function PrepareHeroes ; begin
10491: LD_INT 0
10493: PPUSH
// uc_side = 1 ;
10494: LD_ADDR_OWVAR 20
10498: PUSH
10499: LD_INT 1
10501: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10502: LD_ADDR_EXP 1
10506: PUSH
10507: LD_STRING 01_JMM
10509: PPUSH
10510: CALL_OW 34
10514: ST_TO_ADDR
// SetLives ( JMM , LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ) ;
10515: LD_EXP 1
10519: PPUSH
10520: LD_STRING 01_JMMLifePoints_1
10522: PPUSH
10523: LD_INT 1000
10525: PPUSH
10526: CALL_OW 30
10530: PPUSH
10531: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10535: LD_ADDR_EXP 9
10539: PUSH
10540: LD_STRING Powell
10542: PPUSH
10543: CALL_OW 25
10547: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10548: LD_ADDR_EXP 2
10552: PUSH
10553: LD_STRING 01_Bobby
10555: PPUSH
10556: CALL_OW 34
10560: ST_TO_ADDR
// if Bobby then
10561: LD_EXP 2
10565: IFFALSE 10587
// SetLives ( Bobby , LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ) ;
10567: LD_EXP 2
10571: PPUSH
10572: LD_STRING 01_BobbyLifePoints_1
10574: PPUSH
10575: LD_INT 1000
10577: PPUSH
10578: CALL_OW 30
10582: PPUSH
10583: CALL_OW 234
// Cyrus = CreateCharacter ( 01_Cyrus ) ;
10587: LD_ADDR_EXP 3
10591: PUSH
10592: LD_STRING 01_Cyrus
10594: PPUSH
10595: CALL_OW 34
10599: ST_TO_ADDR
// if Cyrus then
10600: LD_EXP 3
10604: IFFALSE 10626
// SetLives ( Cyrus , LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ) ;
10606: LD_EXP 3
10610: PPUSH
10611: LD_STRING 01_CyrusLifePoints_1
10613: PPUSH
10614: LD_INT 1000
10616: PPUSH
10617: CALL_OW 30
10621: PPUSH
10622: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
10626: LD_ADDR_EXP 5
10630: PUSH
10631: LD_STRING Khatam
10633: PPUSH
10634: CALL_OW 25
10638: ST_TO_ADDR
// uc_side = 4 ;
10639: LD_ADDR_OWVAR 20
10643: PUSH
10644: LD_INT 4
10646: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10647: LD_ADDR_EXP 4
10651: PUSH
10652: LD_STRING Lisa
10654: PPUSH
10655: CALL_OW 25
10659: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10660: LD_EXP 1
10664: PPUSH
10665: LD_INT 3
10667: PPUSH
10668: LD_INT 0
10670: PPUSH
10671: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10675: LD_EXP 2
10679: PPUSH
10680: LD_INT 3
10682: PPUSH
10683: LD_INT 0
10685: PPUSH
10686: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10690: LD_EXP 3
10694: PPUSH
10695: LD_INT 3
10697: PPUSH
10698: LD_INT 0
10700: PPUSH
10701: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10705: LD_EXP 4
10709: PPUSH
10710: LD_INT 5
10712: PPUSH
10713: LD_INT 0
10715: PPUSH
10716: CALL_OW 49
// ComCrawl ( Lisa ) ;
10720: LD_EXP 4
10724: PPUSH
10725: CALL_OW 137
// end ;
10729: LD_VAR 0 1
10733: RET
// export function PrepareLisSquad ; var i , un ; begin
10734: LD_INT 0
10736: PPUSH
10737: PPUSH
10738: PPUSH
// uc_side = 4 ;
10739: LD_ADDR_OWVAR 20
10743: PUSH
10744: LD_INT 4
10746: ST_TO_ADDR
// uc_nation = 1 ;
10747: LD_ADDR_OWVAR 21
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// hc_class := 2 ;
10755: LD_ADDR_OWVAR 28
10759: PUSH
10760: LD_INT 2
10762: ST_TO_ADDR
// hc_sex := sex_male ;
10763: LD_ADDR_OWVAR 27
10767: PUSH
10768: LD_INT 1
10770: ST_TO_ADDR
// hc_gallery :=  ;
10771: LD_ADDR_OWVAR 33
10775: PUSH
10776: LD_STRING 
10778: ST_TO_ADDR
// hc_name :=  ;
10779: LD_ADDR_OWVAR 26
10783: PUSH
10784: LD_STRING 
10786: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10787: LD_ADDR_OWVAR 30
10791: PUSH
10792: LD_INT 0
10794: PUSH
10795: LD_INT 1
10797: PUSH
10798: LD_INT 0
10800: PUSH
10801: LD_INT 0
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
10810: LD_ADDR_OWVAR 31
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: LD_INT 2
10820: PUSH
10821: LD_INT 0
10823: PUSH
10824: LD_INT 0
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: ST_TO_ADDR
// un := CreateHuman ;
10833: LD_ADDR_VAR 0 3
10837: PUSH
10838: CALL_OW 44
10842: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10843: LD_VAR 0 3
10847: PPUSH
10848: LD_INT 6
10850: PPUSH
10851: LD_INT 0
10853: PPUSH
10854: CALL_OW 49
// hc_sex := sex_female ;
10858: LD_ADDR_OWVAR 27
10862: PUSH
10863: LD_INT 2
10865: ST_TO_ADDR
// hc_gallery :=  ;
10866: LD_ADDR_OWVAR 33
10870: PUSH
10871: LD_STRING 
10873: ST_TO_ADDR
// hc_name :=  ;
10874: LD_ADDR_OWVAR 26
10878: PUSH
10879: LD_STRING 
10881: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
10882: LD_ADDR_OWVAR 30
10886: PUSH
10887: LD_INT 0
10889: PUSH
10890: LD_INT 0
10892: PUSH
10893: LD_INT 0
10895: PUSH
10896: LD_INT 1
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
10905: LD_ADDR_OWVAR 31
10909: PUSH
10910: LD_INT 0
10912: PUSH
10913: LD_INT 1
10915: PUSH
10916: LD_INT 0
10918: PUSH
10919: LD_INT 1
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: ST_TO_ADDR
// un := CreateHuman ;
10928: LD_ADDR_VAR 0 3
10932: PUSH
10933: CALL_OW 44
10937: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10938: LD_VAR 0 3
10942: PPUSH
10943: LD_INT 6
10945: PPUSH
10946: LD_INT 0
10948: PPUSH
10949: CALL_OW 49
// if not Bobby and not Cyrus then
10953: LD_EXP 2
10957: NOT
10958: PUSH
10959: LD_EXP 3
10963: NOT
10964: AND
10965: IFFALSE 11070
// begin hc_class := 1 ;
10967: LD_ADDR_OWVAR 28
10971: PUSH
10972: LD_INT 1
10974: ST_TO_ADDR
// hc_sex := sex_male ;
10975: LD_ADDR_OWVAR 27
10979: PUSH
10980: LD_INT 1
10982: ST_TO_ADDR
// hc_gallery :=  ;
10983: LD_ADDR_OWVAR 33
10987: PUSH
10988: LD_STRING 
10990: ST_TO_ADDR
// hc_name :=  ;
10991: LD_ADDR_OWVAR 26
10995: PUSH
10996: LD_STRING 
10998: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
10999: LD_ADDR_OWVAR 30
11003: PUSH
11004: LD_INT 2
11006: PUSH
11007: LD_INT 3
11009: PUSH
11010: LD_INT 1
11012: PUSH
11013: LD_INT 0
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11022: LD_ADDR_OWVAR 31
11026: PUSH
11027: LD_INT 2
11029: PUSH
11030: LD_INT 3
11032: PUSH
11033: LD_INT 1
11035: PUSH
11036: LD_INT 0
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: ST_TO_ADDR
// un := CreateHuman ;
11045: LD_ADDR_VAR 0 3
11049: PUSH
11050: CALL_OW 44
11054: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11055: LD_VAR 0 3
11059: PPUSH
11060: LD_INT 31
11062: PPUSH
11063: LD_INT 0
11065: PPUSH
11066: CALL_OW 49
// end ; InitHc ;
11070: CALL_OW 19
// end ;
11074: LD_VAR 0 1
11078: RET
// export function PrepareOtherAmericans ; begin
11079: LD_INT 0
11081: PPUSH
// uc_side = 4 ;
11082: LD_ADDR_OWVAR 20
11086: PUSH
11087: LD_INT 4
11089: ST_TO_ADDR
// uc_nation = 1 ;
11090: LD_ADDR_OWVAR 21
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// hc_gallery =  ;
11098: LD_ADDR_OWVAR 33
11102: PUSH
11103: LD_STRING 
11105: ST_TO_ADDR
// hc_name = Brian Garvin ;
11106: LD_ADDR_OWVAR 26
11110: PUSH
11111: LD_STRING Brian Garvin
11113: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11114: LD_INT 1
11116: PPUSH
11117: LD_INT 1
11119: PPUSH
11120: LD_INT 1
11122: PPUSH
11123: LD_INT 2
11125: PPUSH
11126: CALL_OW 12
11130: PPUSH
11131: CALL_OW 380
// Brian = CreateHuman ;
11135: LD_ADDR_EXP 6
11139: PUSH
11140: CALL_OW 44
11144: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11145: LD_EXP 6
11149: PPUSH
11150: LD_INT 10
11152: PPUSH
11153: LD_INT 0
11155: PPUSH
11156: CALL_OW 49
// hc_name = Jerry White ;
11160: LD_ADDR_OWVAR 26
11164: PUSH
11165: LD_STRING Jerry White
11167: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11168: LD_INT 1
11170: PPUSH
11171: LD_INT 3
11173: PPUSH
11174: LD_INT 1
11176: PPUSH
11177: LD_INT 2
11179: PPUSH
11180: CALL_OW 12
11184: PPUSH
11185: CALL_OW 380
// Jerry = CreateHuman ;
11189: LD_ADDR_EXP 7
11193: PUSH
11194: CALL_OW 44
11198: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11199: LD_EXP 7
11203: PPUSH
11204: LD_INT 10
11206: PPUSH
11207: LD_INT 0
11209: PPUSH
11210: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11214: LD_EXP 6
11218: PUSH
11219: LD_EXP 7
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PPUSH
11228: CALL_OW 140
// end ;
11232: LD_VAR 0 1
11236: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11237: LD_INT 0
11239: PPUSH
11240: PPUSH
11241: PPUSH
// for i = 1 to 6 do
11242: LD_ADDR_VAR 0 2
11246: PUSH
11247: DOUBLE
11248: LD_INT 1
11250: DEC
11251: ST_TO_ADDR
11252: LD_INT 6
11254: PUSH
11255: FOR_TO
11256: IFFALSE 11350
// begin uc_side = 4 ;
11258: LD_ADDR_OWVAR 20
11262: PUSH
11263: LD_INT 4
11265: ST_TO_ADDR
// uc_nation = 1 ;
11266: LD_ADDR_OWVAR 21
11270: PUSH
11271: LD_INT 1
11273: ST_TO_ADDR
// hc_gallery =  ;
11274: LD_ADDR_OWVAR 33
11278: PUSH
11279: LD_STRING 
11281: ST_TO_ADDR
// hc_name =  ;
11282: LD_ADDR_OWVAR 26
11286: PUSH
11287: LD_STRING 
11289: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11290: LD_INT 0
11292: PPUSH
11293: LD_INT 1
11295: PPUSH
11296: LD_INT 4
11298: PPUSH
11299: CALL_OW 12
11303: PPUSH
11304: LD_INT 1
11306: PPUSH
11307: CALL_OW 380
// un = CreateHuman ;
11311: LD_ADDR_VAR 0 3
11315: PUSH
11316: CALL_OW 44
11320: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11321: LD_VAR 0 3
11325: PPUSH
11326: LD_INT 16
11328: PPUSH
11329: LD_INT 0
11331: PPUSH
11332: CALL_OW 49
// SetLives ( un , 1 ) ;
11336: LD_VAR 0 3
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: CALL_OW 234
// end ;
11348: GO 11255
11350: POP
11351: POP
// DyingSold = CreateHuman ;
11352: LD_ADDR_EXP 34
11356: PUSH
11357: CALL_OW 44
11361: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11362: LD_EXP 34
11366: PPUSH
11367: LD_INT 16
11369: PPUSH
11370: LD_INT 0
11372: PPUSH
11373: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11377: LD_EXP 34
11381: PPUSH
11382: LD_INT 250
11384: PPUSH
11385: CALL_OW 234
// end ; end_of_file
11389: LD_VAR 0 1
11393: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11394: LD_INT 0
11396: PPUSH
11397: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) ;
11398: LD_ADDR_VAR 0 2
11402: PUSH
11403: LD_INT 22
11405: PUSH
11406: LD_INT 1
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: LD_INT 23
11415: PUSH
11416: LD_INT 1
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 25
11425: PUSH
11426: LD_INT 2
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: LIST
11437: PPUSH
11438: CALL_OW 69
11442: ST_TO_ADDR
// uc_side = 6 ;
11443: LD_ADDR_OWVAR 20
11447: PUSH
11448: LD_INT 6
11450: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11451: LD_ADDR_EXP 8
11455: PUSH
11456: LD_STRING Mikhail
11458: PPUSH
11459: CALL_OW 25
11463: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
11464: LD_EXP 8
11468: PPUSH
11469: LD_VAR 0 2
11473: PUSH
11474: LD_INT 1
11476: ARRAY
11477: PPUSH
11478: CALL_OW 250
11482: PPUSH
11483: LD_VAR 0 2
11487: PUSH
11488: LD_INT 1
11490: ARRAY
11491: PPUSH
11492: CALL_OW 251
11496: PPUSH
11497: LD_INT 3
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: CALL_OW 50
// end ;
11507: LD_VAR 0 1
11511: RET
// export function PrepareRussianCommander ; begin
11512: LD_INT 0
11514: PPUSH
// uc_side = 3 ;
11515: LD_ADDR_OWVAR 20
11519: PUSH
11520: LD_INT 3
11522: ST_TO_ADDR
// uc_nation = 3 ;
11523: LD_ADDR_OWVAR 21
11527: PUSH
11528: LD_INT 3
11530: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11531: LD_ADDR_EXP 19
11535: PUSH
11536: LD_STRING Natasza
11538: PPUSH
11539: CALL_OW 25
11543: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11544: LD_EXP 19
11548: PPUSH
11549: LD_INT 24
11551: PPUSH
11552: LD_INT 0
11554: PPUSH
11555: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11559: LD_EXP 19
11563: PPUSH
11564: LD_INT 56
11566: PPUSH
11567: LD_INT 16
11569: PPUSH
11570: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11574: LD_ADDR_EXP 24
11578: PUSH
11579: LD_EXP 24
11583: PUSH
11584: LD_EXP 19
11588: ADD
11589: ST_TO_ADDR
// end ;
11590: LD_VAR 0 1
11594: RET
// export function PrepareSouthBase ; var i , un ; begin
11595: LD_INT 0
11597: PPUSH
11598: PPUSH
11599: PPUSH
// for i = 1 to 2 do
11600: LD_ADDR_VAR 0 2
11604: PUSH
11605: DOUBLE
11606: LD_INT 1
11608: DEC
11609: ST_TO_ADDR
11610: LD_INT 2
11612: PUSH
11613: FOR_TO
11614: IFFALSE 11723
// begin uc_side = 3 ;
11616: LD_ADDR_OWVAR 20
11620: PUSH
11621: LD_INT 3
11623: ST_TO_ADDR
// uc_nation = 3 ;
11624: LD_ADDR_OWVAR 21
11628: PUSH
11629: LD_INT 3
11631: ST_TO_ADDR
// hc_gallery =  ;
11632: LD_ADDR_OWVAR 33
11636: PUSH
11637: LD_STRING 
11639: ST_TO_ADDR
// hc_name =  ;
11640: LD_ADDR_OWVAR 26
11644: PUSH
11645: LD_STRING 
11647: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11648: LD_INT 1
11650: PPUSH
11651: LD_INT 1
11653: PPUSH
11654: LD_EXP 13
11658: PPUSH
11659: LD_EXP 14
11663: PPUSH
11664: CALL_OW 12
11668: PPUSH
11669: CALL_OW 380
// hc_importance = 0 ;
11673: LD_ADDR_OWVAR 32
11677: PUSH
11678: LD_INT 0
11680: ST_TO_ADDR
// un = CreateHuman ;
11681: LD_ADDR_VAR 0 3
11685: PUSH
11686: CALL_OW 44
11690: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11691: LD_VAR 0 3
11695: PPUSH
11696: LD_INT 11
11698: PPUSH
11699: LD_INT 0
11701: PPUSH
11702: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11706: LD_VAR 0 3
11710: PPUSH
11711: LD_INT 111
11713: PPUSH
11714: LD_INT 38
11716: PPUSH
11717: CALL_OW 118
// end ;
11721: GO 11613
11723: POP
11724: POP
// for i = 1 to Difficulty do
11725: LD_ADDR_VAR 0 2
11729: PUSH
11730: DOUBLE
11731: LD_INT 1
11733: DEC
11734: ST_TO_ADDR
11735: LD_OWVAR 67
11739: PUSH
11740: FOR_TO
11741: IFFALSE 11842
// begin uc_side = 3 ;
11743: LD_ADDR_OWVAR 20
11747: PUSH
11748: LD_INT 3
11750: ST_TO_ADDR
// uc_nation = 3 ;
11751: LD_ADDR_OWVAR 21
11755: PUSH
11756: LD_INT 3
11758: ST_TO_ADDR
// hc_gallery =  ;
11759: LD_ADDR_OWVAR 33
11763: PUSH
11764: LD_STRING 
11766: ST_TO_ADDR
// hc_name =  ;
11767: LD_ADDR_OWVAR 26
11771: PUSH
11772: LD_STRING 
11774: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11775: LD_INT 0
11777: PPUSH
11778: LD_INT 3
11780: PPUSH
11781: LD_EXP 13
11785: PPUSH
11786: LD_EXP 14
11790: PPUSH
11791: CALL_OW 12
11795: PPUSH
11796: CALL_OW 380
// un = CreateHuman ;
11800: LD_ADDR_VAR 0 3
11804: PUSH
11805: CALL_OW 44
11809: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
11810: LD_VAR 0 3
11814: PPUSH
11815: LD_INT 12
11817: PPUSH
11818: LD_INT 0
11820: PPUSH
11821: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
11825: LD_VAR 0 3
11829: PPUSH
11830: LD_INT 111
11832: PPUSH
11833: LD_INT 28
11835: PPUSH
11836: CALL_OW 118
// end ;
11840: GO 11740
11842: POP
11843: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
11844: LD_INT 3
11846: PPUSH
11847: LD_INT 3
11849: PPUSH
11850: LD_INT 33
11852: PPUSH
11853: LD_EXP 13
11857: PPUSH
11858: LD_EXP 14
11862: PPUSH
11863: CALL_OW 12
11867: PPUSH
11868: LD_INT 1
11870: PPUSH
11871: LD_INT 1
11873: PUSH
11874: LD_INT 1
11876: PPUSH
11877: LD_INT 2
11879: PPUSH
11880: CALL_OW 12
11884: PUSH
11885: LD_INT 1
11887: PPUSH
11888: LD_INT 2
11890: PPUSH
11891: CALL_OW 12
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: LIST
11900: PUSH
11901: LD_OWVAR 67
11905: ARRAY
11906: PPUSH
11907: CALL 8402 0 6
// for i in UnitsInside ( arm2 ) do
11911: LD_ADDR_VAR 0 2
11915: PUSH
11916: LD_INT 33
11918: PPUSH
11919: CALL_OW 313
11923: PUSH
11924: FOR_IN
11925: IFFALSE 11945
// southBaseDefenders = southBaseDefenders ^ i ;
11927: LD_ADDR_EXP 25
11931: PUSH
11932: LD_EXP 25
11936: PUSH
11937: LD_VAR 0 2
11941: ADD
11942: ST_TO_ADDR
11943: GO 11924
11945: POP
11946: POP
// end ;
11947: LD_VAR 0 1
11951: RET
// export function PrepareNorthBase ; var i , un ; begin
11952: LD_INT 0
11954: PPUSH
11955: PPUSH
11956: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
11957: LD_ADDR_VAR 0 2
11961: PUSH
11962: DOUBLE
11963: LD_INT 1
11965: DEC
11966: ST_TO_ADDR
11967: LD_INT 1
11969: PPUSH
11970: LD_INT 2
11972: PPUSH
11973: CALL_OW 12
11977: PUSH
11978: LD_INT 2
11980: PPUSH
11981: LD_INT 3
11983: PPUSH
11984: CALL_OW 12
11988: PUSH
11989: LD_INT 3
11991: PPUSH
11992: LD_INT 4
11994: PPUSH
11995: CALL_OW 12
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: LIST
12004: PUSH
12005: LD_OWVAR 67
12009: ARRAY
12010: PUSH
12011: FOR_TO
12012: IFFALSE 12098
// begin uc_side = 3 ;
12014: LD_ADDR_OWVAR 20
12018: PUSH
12019: LD_INT 3
12021: ST_TO_ADDR
// uc_nation = 3 ;
12022: LD_ADDR_OWVAR 21
12026: PUSH
12027: LD_INT 3
12029: ST_TO_ADDR
// hc_gallery =  ;
12030: LD_ADDR_OWVAR 33
12034: PUSH
12035: LD_STRING 
12037: ST_TO_ADDR
// hc_name =  ;
12038: LD_ADDR_OWVAR 26
12042: PUSH
12043: LD_STRING 
12045: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12046: LD_INT 0
12048: PPUSH
12049: LD_INT 1
12051: PPUSH
12052: LD_EXP 13
12056: PPUSH
12057: LD_EXP 14
12061: PPUSH
12062: CALL_OW 12
12066: PPUSH
12067: CALL_OW 380
// un = CreateHuman ;
12071: LD_ADDR_VAR 0 3
12075: PUSH
12076: CALL_OW 44
12080: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12081: LD_VAR 0 3
12085: PPUSH
12086: LD_INT 14
12088: PPUSH
12089: LD_INT 0
12091: PPUSH
12092: CALL_OW 49
// end ;
12096: GO 12011
12098: POP
12099: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12100: LD_INT 3
12102: PPUSH
12103: LD_INT 3
12105: PPUSH
12106: LD_INT 2
12108: PPUSH
12109: LD_EXP 13
12113: PPUSH
12114: LD_EXP 14
12118: PPUSH
12119: CALL_OW 12
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: LD_INT 1
12129: PPUSH
12130: LD_INT 2
12132: PPUSH
12133: CALL_OW 12
12137: PUSH
12138: LD_INT 1
12140: PPUSH
12141: LD_INT 3
12143: PPUSH
12144: CALL_OW 12
12148: PUSH
12149: LD_INT 1
12151: PPUSH
12152: LD_INT 3
12154: PPUSH
12155: CALL_OW 12
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: PUSH
12165: LD_OWVAR 67
12169: ARRAY
12170: PPUSH
12171: CALL 8402 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12175: LD_INT 3
12177: PPUSH
12178: LD_INT 3
12180: PPUSH
12181: LD_INT 23
12183: PPUSH
12184: LD_EXP 13
12188: PPUSH
12189: LD_EXP 14
12193: PPUSH
12194: CALL_OW 12
12198: PPUSH
12199: LD_INT 4
12201: PPUSH
12202: LD_INT 0
12204: PUSH
12205: LD_INT 1
12207: PUSH
12208: LD_INT 2
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: LIST
12215: PUSH
12216: LD_OWVAR 67
12220: ARRAY
12221: PPUSH
12222: CALL 8402 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12226: LD_INT 3
12228: PPUSH
12229: LD_INT 3
12231: PPUSH
12232: LD_INT 1
12234: PPUSH
12235: LD_EXP 13
12239: PPUSH
12240: LD_EXP 14
12244: PPUSH
12245: CALL_OW 12
12249: PPUSH
12250: LD_INT 2
12252: PPUSH
12253: LD_INT 1
12255: PUSH
12256: LD_INT 2
12258: PUSH
12259: LD_INT 2
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: LIST
12266: PUSH
12267: LD_OWVAR 67
12271: ARRAY
12272: PPUSH
12273: CALL 8402 0 6
// for i in UnitsInside ( arm1 ) do
12277: LD_ADDR_VAR 0 2
12281: PUSH
12282: LD_INT 2
12284: PPUSH
12285: CALL_OW 313
12289: PUSH
12290: FOR_IN
12291: IFFALSE 12311
// northBaseDefenders = northBaseDefenders ^ i ;
12293: LD_ADDR_EXP 24
12297: PUSH
12298: LD_EXP 24
12302: PUSH
12303: LD_VAR 0 2
12307: ADD
12308: ST_TO_ADDR
12309: GO 12290
12311: POP
12312: POP
// end ;
12313: LD_VAR 0 1
12317: RET
// export function PrepareOtherRussians ; var i , un ; begin
12318: LD_INT 0
12320: PPUSH
12321: PPUSH
12322: PPUSH
// for i = 1 to 2 do
12323: LD_ADDR_VAR 0 2
12327: PUSH
12328: DOUBLE
12329: LD_INT 1
12331: DEC
12332: ST_TO_ADDR
12333: LD_INT 2
12335: PUSH
12336: FOR_TO
12337: IFFALSE 12438
// begin uc_side = 3 ;
12339: LD_ADDR_OWVAR 20
12343: PUSH
12344: LD_INT 3
12346: ST_TO_ADDR
// uc_nation = 3 ;
12347: LD_ADDR_OWVAR 21
12351: PUSH
12352: LD_INT 3
12354: ST_TO_ADDR
// hc_gallery =  ;
12355: LD_ADDR_OWVAR 33
12359: PUSH
12360: LD_STRING 
12362: ST_TO_ADDR
// hc_name =  ;
12363: LD_ADDR_OWVAR 26
12367: PUSH
12368: LD_STRING 
12370: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12371: LD_INT 0
12373: PPUSH
12374: LD_INT 1
12376: PPUSH
12377: LD_EXP 13
12381: PPUSH
12382: LD_EXP 14
12386: PPUSH
12387: CALL_OW 12
12391: PPUSH
12392: CALL_OW 380
// un = CreateHuman ;
12396: LD_ADDR_VAR 0 3
12400: PUSH
12401: CALL_OW 44
12405: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12406: LD_VAR 0 3
12410: PPUSH
12411: LD_INT 9
12413: PPUSH
12414: LD_INT 0
12416: PPUSH
12417: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12421: LD_VAR 0 3
12425: PPUSH
12426: LD_INT 80
12428: PPUSH
12429: LD_INT 73
12431: PPUSH
12432: CALL_OW 118
// end ;
12436: GO 12336
12438: POP
12439: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12440: LD_ADDR_VAR 0 2
12444: PUSH
12445: LD_INT 22
12447: PUSH
12448: LD_INT 3
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: PUSH
12455: LD_INT 30
12457: PUSH
12458: LD_INT 31
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PPUSH
12469: CALL_OW 69
12473: PUSH
12474: FOR_IN
12475: IFFALSE 12503
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12477: LD_EXP 13
12481: PPUSH
12482: LD_EXP 14
12486: PPUSH
12487: CALL_OW 12
12491: PPUSH
12492: LD_VAR 0 2
12496: PPUSH
12497: CALL 8512 0 2
12501: GO 12474
12503: POP
12504: POP
// end ;
12505: LD_VAR 0 1
12509: RET
// export function PrepareCargoBays ; begin
12510: LD_INT 0
12512: PPUSH
// uc_side = 3 ;
12513: LD_ADDR_OWVAR 20
12517: PUSH
12518: LD_INT 3
12520: ST_TO_ADDR
// uc_nation = 3 ;
12521: LD_ADDR_OWVAR 21
12525: PUSH
12526: LD_INT 3
12528: ST_TO_ADDR
// vc_engine = 1 ;
12529: LD_ADDR_OWVAR 39
12533: PUSH
12534: LD_INT 1
12536: ST_TO_ADDR
// vc_control = 1 ;
12537: LD_ADDR_OWVAR 38
12541: PUSH
12542: LD_INT 1
12544: ST_TO_ADDR
// vc_weapon = 51 ;
12545: LD_ADDR_OWVAR 40
12549: PUSH
12550: LD_INT 51
12552: ST_TO_ADDR
// vc_chassis = 22 ;
12553: LD_ADDR_OWVAR 37
12557: PUSH
12558: LD_INT 22
12560: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12561: LD_ADDR_EXP 15
12565: PUSH
12566: CALL_OW 45
12570: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12571: LD_ADDR_EXP 16
12575: PUSH
12576: CALL_OW 45
12580: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12581: LD_EXP 15
12585: PPUSH
12586: LD_INT 13
12588: PPUSH
12589: LD_INT 0
12591: PPUSH
12592: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12596: LD_EXP 16
12600: PPUSH
12601: LD_INT 13
12603: PPUSH
12604: LD_INT 0
12606: PPUSH
12607: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12611: LD_EXP 15
12615: PPUSH
12616: LD_INT 2
12618: PPUSH
12619: LD_INT 70
12621: PUSH
12622: LD_INT 50
12624: PUSH
12625: LD_INT 30
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: LIST
12632: PUSH
12633: LD_OWVAR 67
12637: ARRAY
12638: PPUSH
12639: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12643: LD_EXP 16
12647: PPUSH
12648: LD_INT 2
12650: PPUSH
12651: LD_INT 70
12653: PUSH
12654: LD_INT 50
12656: PUSH
12657: LD_INT 30
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: LIST
12664: PUSH
12665: LD_OWVAR 67
12669: ARRAY
12670: PPUSH
12671: CALL_OW 291
// hc_gallery =  ;
12675: LD_ADDR_OWVAR 33
12679: PUSH
12680: LD_STRING 
12682: ST_TO_ADDR
// hc_name =  ;
12683: LD_ADDR_OWVAR 26
12687: PUSH
12688: LD_STRING 
12690: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12691: LD_INT 1
12693: PPUSH
12694: LD_INT 3
12696: PPUSH
12697: LD_INT 1
12699: PPUSH
12700: LD_INT 2
12702: PPUSH
12703: CALL_OW 12
12707: PPUSH
12708: CALL_OW 380
// driver1 = CreateHuman ;
12712: LD_ADDR_EXP 17
12716: PUSH
12717: CALL_OW 44
12721: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12722: LD_EXP 17
12726: PPUSH
12727: LD_EXP 15
12731: PPUSH
12732: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12736: LD_ADDR_OWVAR 26
12740: PUSH
12741: LD_STRING Nikolai Andreyev
12743: ST_TO_ADDR
// driver2 = CreateHuman ;
12744: LD_ADDR_EXP 18
12748: PUSH
12749: CALL_OW 44
12753: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12754: LD_EXP 18
12758: PPUSH
12759: LD_EXP 16
12763: PPUSH
12764: CALL_OW 52
// end ;
12768: LD_VAR 0 1
12772: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12773: LD_INT 0
12775: PPUSH
12776: PPUSH
12777: PPUSH
12778: PPUSH
12779: PPUSH
12780: PPUSH
12781: PPUSH
// uc_side = 3 ;
12782: LD_ADDR_OWVAR 20
12786: PUSH
12787: LD_INT 3
12789: ST_TO_ADDR
// uc_nation = 3 ;
12790: LD_ADDR_OWVAR 21
12794: PUSH
12795: LD_INT 3
12797: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
12798: LD_ADDR_VAR 0 4
12802: PUSH
12803: DOUBLE
12804: LD_INT 1
12806: DEC
12807: ST_TO_ADDR
12808: LD_VAR 0 1
12812: PUSH
12813: LD_INT 1
12815: PPUSH
12816: LD_INT 3
12818: PPUSH
12819: CALL_OW 12
12823: PLUS
12824: PUSH
12825: FOR_TO
12826: IFFALSE 13003
// begin vc_engine = 1 ;
12828: LD_ADDR_OWVAR 39
12832: PUSH
12833: LD_INT 1
12835: ST_TO_ADDR
// vc_control = 1 ;
12836: LD_ADDR_OWVAR 38
12840: PUSH
12841: LD_INT 1
12843: ST_TO_ADDR
// vc_weapon = 42 ;
12844: LD_ADDR_OWVAR 40
12848: PUSH
12849: LD_INT 42
12851: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
12852: LD_ADDR_OWVAR 37
12856: PUSH
12857: LD_INT 21
12859: PUSH
12860: LD_INT 22
12862: PUSH
12863: LD_INT 22
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: PUSH
12871: LD_OWVAR 67
12875: ARRAY
12876: ST_TO_ADDR
// veh = CreateVehicle ;
12877: LD_ADDR_VAR 0 5
12881: PUSH
12882: CALL_OW 45
12886: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12887: LD_VAR 0 5
12891: PPUSH
12892: LD_VAR 0 2
12896: PPUSH
12897: LD_INT 0
12899: PPUSH
12900: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
12904: LD_ADDR_EXP 26
12908: PUSH
12909: LD_EXP 26
12913: PUSH
12914: LD_VAR 0 5
12918: ADD
12919: ST_TO_ADDR
// hc_gallery =  ;
12920: LD_ADDR_OWVAR 33
12924: PUSH
12925: LD_STRING 
12927: ST_TO_ADDR
// hc_name =  ;
12928: LD_ADDR_OWVAR 26
12932: PUSH
12933: LD_STRING 
12935: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12936: LD_INT 0
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: LD_EXP 13
12946: PPUSH
12947: LD_EXP 14
12951: PPUSH
12952: CALL_OW 12
12956: PPUSH
12957: CALL_OW 380
// un = CreateHuman ;
12961: LD_ADDR_VAR 0 6
12965: PUSH
12966: CALL_OW 44
12970: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12971: LD_VAR 0 6
12975: PPUSH
12976: LD_VAR 0 5
12980: PPUSH
12981: CALL_OW 52
// attackGroup = attackGroup ^ un ;
12985: LD_ADDR_EXP 26
12989: PUSH
12990: LD_EXP 26
12994: PUSH
12995: LD_VAR 0 6
12999: ADD
13000: ST_TO_ADDR
// end ;
13001: GO 12825
13003: POP
13004: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13005: LD_INT 0
13007: PPUSH
13008: LD_INT 2
13010: PPUSH
13011: LD_EXP 13
13015: PPUSH
13016: LD_EXP 14
13020: PPUSH
13021: CALL_OW 12
13025: PPUSH
13026: CALL_OW 380
// un = CreateHuman ;
13030: LD_ADDR_VAR 0 6
13034: PUSH
13035: CALL_OW 44
13039: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13040: LD_ADDR_VAR 0 4
13044: PUSH
13045: DOUBLE
13046: LD_INT 1
13048: DEC
13049: ST_TO_ADDR
13050: LD_VAR 0 1
13054: PUSH
13055: LD_INT 2
13057: PUSH
13058: LD_INT 2
13060: MUL
13061: PLUS
13062: PUSH
13063: FOR_TO
13064: IFFALSE 13152
// begin hc_gallery =  ;
13066: LD_ADDR_OWVAR 33
13070: PUSH
13071: LD_STRING 
13073: ST_TO_ADDR
// hc_name =  ;
13074: LD_ADDR_OWVAR 26
13078: PUSH
13079: LD_STRING 
13081: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13082: LD_INT 1
13084: PPUSH
13085: LD_INT 1
13087: PPUSH
13088: LD_EXP 13
13092: PPUSH
13093: LD_EXP 14
13097: PPUSH
13098: CALL_OW 12
13102: PPUSH
13103: CALL_OW 380
// un = CreateHuman ;
13107: LD_ADDR_VAR 0 6
13111: PUSH
13112: CALL_OW 44
13116: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13117: LD_VAR 0 6
13121: PPUSH
13122: LD_VAR 0 2
13126: PPUSH
13127: LD_INT 0
13129: PPUSH
13130: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13134: LD_ADDR_EXP 26
13138: PUSH
13139: LD_EXP 26
13143: PUSH
13144: LD_VAR 0 6
13148: ADD
13149: ST_TO_ADDR
// end ;
13150: GO 13063
13152: POP
13153: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13154: LD_ADDR_VAR 0 7
13158: PUSH
13159: LD_INT 26
13161: PPUSH
13162: LD_INT 22
13164: PUSH
13165: LD_INT 3
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PUSH
13172: LD_INT 21
13174: PUSH
13175: LD_INT 1
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PUSH
13182: LD_INT 26
13184: PUSH
13185: LD_INT 1
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: PPUSH
13197: CALL_OW 70
13201: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13202: LD_VAR 0 7
13206: PUSH
13207: LD_INT 1
13209: ARRAY
13210: PPUSH
13211: LD_STRING D9-Rus3-1
13213: PPUSH
13214: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13218: LD_VAR 0 7
13222: PUSH
13223: LD_INT 2
13225: ARRAY
13226: PPUSH
13227: LD_STRING D9-Russ-1
13229: PPUSH
13230: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13234: LD_INT 35
13236: PPUSH
13237: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13241: LD_ADDR_VAR 0 4
13245: PUSH
13246: LD_INT 26
13248: PPUSH
13249: LD_INT 22
13251: PUSH
13252: LD_INT 3
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: EMPTY
13260: LIST
13261: PPUSH
13262: CALL_OW 70
13266: PUSH
13267: FOR_IN
13268: IFFALSE 13440
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13270: LD_ADDR_VAR 0 8
13274: PUSH
13275: LD_INT 22
13277: PUSH
13278: LD_INT 1
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PPUSH
13285: CALL_OW 69
13289: PPUSH
13290: LD_VAR 0 4
13294: PPUSH
13295: CALL_OW 74
13299: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13300: LD_ADDR_VAR 0 9
13304: PUSH
13305: LD_INT 22
13307: PUSH
13308: LD_INT 1
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PUSH
13315: LD_INT 2
13317: PUSH
13318: LD_INT 59
13320: PUSH
13321: EMPTY
13322: LIST
13323: PUSH
13324: LD_INT 21
13326: PUSH
13327: LD_INT 1
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PUSH
13334: LD_INT 21
13336: PUSH
13337: LD_INT 2
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: PPUSH
13357: CALL_OW 69
13361: PPUSH
13362: LD_VAR 0 4
13366: PPUSH
13367: CALL_OW 74
13371: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13372: LD_VAR 0 4
13376: PPUSH
13377: LD_VAR 0 8
13381: PPUSH
13382: CALL_OW 296
13386: PUSH
13387: LD_INT 8
13389: PLUS
13390: PUSH
13391: LD_VAR 0 4
13395: PPUSH
13396: LD_VAR 0 9
13400: PPUSH
13401: CALL_OW 296
13405: LESS
13406: IFFALSE 13424
// begin ComAttackUnit ( i , target1 ) ;
13408: LD_VAR 0 4
13412: PPUSH
13413: LD_VAR 0 8
13417: PPUSH
13418: CALL_OW 115
// end else
13422: GO 13438
// begin ComAttackUnit ( i , target2 ) ;
13424: LD_VAR 0 4
13428: PPUSH
13429: LD_VAR 0 9
13433: PPUSH
13434: CALL_OW 115
// end ; end ;
13438: GO 13267
13440: POP
13441: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13442: LD_INT 26
13444: PPUSH
13445: LD_INT 22
13447: PUSH
13448: LD_INT 3
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 2
13457: PUSH
13458: LD_INT 21
13460: PUSH
13461: LD_INT 1
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: LD_INT 21
13470: PUSH
13471: LD_INT 2
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 59
13480: PUSH
13481: EMPTY
13482: LIST
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PPUSH
13494: CALL_OW 70
13498: PUSH
13499: LD_INT 0
13501: EQUAL
13502: IFFALSE 13234
// end ; end_of_file
13504: LD_VAR 0 3
13508: RET
// every 0 0$1 do
13509: GO 13511
13511: DISABLE
// begin enable ;
13512: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13513: LD_INT 3
13515: PPUSH
13516: LD_INT 1
13518: PPUSH
13519: LD_INT 22
13521: PPUSH
13522: CALL 8648 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13526: LD_INT 3
13528: PPUSH
13529: LD_INT 20
13531: PPUSH
13532: LD_INT 22
13534: PPUSH
13535: LD_INT 23
13537: PPUSH
13538: CALL 8894 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13542: LD_INT 3
13544: PPUSH
13545: LD_INT 21
13547: PPUSH
13548: LD_INT 23
13550: PPUSH
13551: CALL 9171 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13555: LD_INT 22
13557: PPUSH
13558: LD_INT 1
13560: PPUSH
13561: LD_EXP 24
13565: PPUSH
13566: LD_INT 2
13568: PPUSH
13569: LD_INT 3
13571: PPUSH
13572: CALL 9643 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13576: LD_INT 23
13578: PPUSH
13579: LD_INT 1
13581: PPUSH
13582: LD_EXP 25
13586: PPUSH
13587: LD_INT 33
13589: PPUSH
13590: LD_INT 1
13592: PPUSH
13593: CALL 9643 0 5
// end ; end_of_file
13597: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13598: LD_VAR 0 1
13602: PPUSH
13603: CALL_OW 255
13607: PUSH
13608: LD_INT 1
13610: EQUAL
13611: PUSH
13612: LD_VAR 0 1
13616: PPUSH
13617: CALL_OW 247
13621: PUSH
13622: LD_INT 1
13624: EQUAL
13625: AND
13626: IFFALSE 13642
// deadsCounter = deadsCounter + 1 ;
13628: LD_ADDR_EXP 31
13632: PUSH
13633: LD_EXP 31
13637: PUSH
13638: LD_INT 1
13640: PLUS
13641: ST_TO_ADDR
// end ;
13642: PPOPN 1
13644: END
// on Command ( comandid ) do var i , j , tmp ;
13645: LD_INT 0
13647: PPUSH
13648: PPUSH
13649: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13650: LD_ADDR_VAR 0 2
13654: PUSH
13655: LD_INT 22
13657: PUSH
13658: LD_INT 1
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 21
13667: PUSH
13668: LD_INT 2
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: PPUSH
13679: CALL_OW 69
13683: PUSH
13684: FOR_IN
13685: IFFALSE 13810
// begin if GetTaskList ( i ) > 0 then
13687: LD_VAR 0 2
13691: PPUSH
13692: CALL_OW 437
13696: PUSH
13697: LD_INT 0
13699: GREATER
13700: IFFALSE 13808
// begin for j = 1 to GetTaskList ( i ) do
13702: LD_ADDR_VAR 0 3
13706: PUSH
13707: DOUBLE
13708: LD_INT 1
13710: DEC
13711: ST_TO_ADDR
13712: LD_VAR 0 2
13716: PPUSH
13717: CALL_OW 437
13721: PUSH
13722: FOR_TO
13723: IFFALSE 13806
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13725: LD_ADDR_VAR 0 4
13729: PUSH
13730: LD_VAR 0 2
13734: PPUSH
13735: CALL_OW 437
13739: PUSH
13740: LD_VAR 0 3
13744: ARRAY
13745: PUSH
13746: LD_INT 4
13748: ARRAY
13749: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
13750: LD_VAR 0 4
13754: PPUSH
13755: CALL_OW 255
13759: PUSH
13760: LD_INT 3
13762: EQUAL
13763: PUSH
13764: LD_VAR 0 4
13768: PPUSH
13769: CALL_OW 247
13773: PUSH
13774: LD_INT 2
13776: EQUAL
13777: AND
13778: PUSH
13779: LD_VAR 0 4
13783: PPUSH
13784: CALL_OW 264
13788: PUSH
13789: LD_INT 51
13791: EQUAL
13792: AND
13793: IFFALSE 13804
// ComStop ( i ) ;
13795: LD_VAR 0 2
13799: PPUSH
13800: CALL_OW 141
// end ;
13804: GO 13722
13806: POP
13807: POP
// end ; end ;
13808: GO 13684
13810: POP
13811: POP
// end ; end_of_file
13812: PPOPN 4
13814: END
// every 0 0$1 trigger IsDead ( JMM ) do
13815: LD_EXP 1
13819: PPUSH
13820: CALL_OW 301
13824: IFFALSE 13836
13826: GO 13828
13828: DISABLE
// YouLost ( JMM ) ;
13829: LD_STRING JMM
13831: PPUSH
13832: CALL_OW 104
13836: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
13837: LD_INT 1
13839: PPUSH
13840: CALL_OW 301
13844: PUSH
13845: LD_INT 10
13847: PPUSH
13848: CALL_OW 301
13852: OR
13853: IFFALSE 13865
13855: GO 13857
13857: DISABLE
// YouLost ( DepotDestroyed ) ;
13858: LD_STRING DepotDestroyed
13860: PPUSH
13861: CALL_OW 104
13865: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
13866: LD_INT 22
13868: PUSH
13869: LD_INT 1
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: LD_INT 21
13878: PUSH
13879: LD_INT 1
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 25
13888: PUSH
13889: LD_INT 2
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: LIST
13900: PPUSH
13901: CALL_OW 69
13905: PUSH
13906: LD_INT 0
13908: EQUAL
13909: PUSH
13910: LD_INT 22
13912: PUSH
13913: LD_INT 4
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 21
13922: PUSH
13923: LD_INT 1
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 25
13932: PUSH
13933: LD_INT 2
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: LIST
13944: PPUSH
13945: CALL_OW 69
13949: PUSH
13950: LD_INT 0
13952: EQUAL
13953: AND
13954: PUSH
13955: LD_INT 1
13957: PPUSH
13958: CALL_OW 255
13962: PUSH
13963: LD_INT 3
13965: EQUAL
13966: AND
13967: PUSH
13968: LD_INT 10
13970: PPUSH
13971: CALL_OW 255
13975: PUSH
13976: LD_INT 3
13978: EQUAL
13979: AND
13980: IFFALSE 13992
13982: GO 13984
13984: DISABLE
// YouLost ( Engineer ) ;
13985: LD_STRING Engineer
13987: PPUSH
13988: CALL_OW 104
13992: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
13993: LD_INT 1
13995: PPUSH
13996: CALL_OW 255
14000: PUSH
14001: LD_INT 3
14003: EQUAL
14004: PUSH
14005: LD_EXP 27
14009: PUSH
14010: LD_INT 1
14012: EQUAL
14013: AND
14014: IFFALSE 14026
14016: GO 14018
14018: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14019: LD_STRING DepotCaptured
14021: PPUSH
14022: CALL_OW 104
14026: END
// export function PrepareTigers ; var i , un ; begin
14027: LD_INT 0
14029: PPUSH
14030: PPUSH
14031: PPUSH
// for i = 1 to Difficulty do
14032: LD_ADDR_VAR 0 2
14036: PUSH
14037: DOUBLE
14038: LD_INT 1
14040: DEC
14041: ST_TO_ADDR
14042: LD_OWVAR 67
14046: PUSH
14047: FOR_TO
14048: IFFALSE 14183
// begin hc_sex = sex_male ;
14050: LD_ADDR_OWVAR 27
14054: PUSH
14055: LD_INT 1
14057: ST_TO_ADDR
// uc_side = 0 ;
14058: LD_ADDR_OWVAR 20
14062: PUSH
14063: LD_INT 0
14065: ST_TO_ADDR
// uc_nation = nation_nature ;
14066: LD_ADDR_OWVAR 21
14070: PUSH
14071: LD_INT 0
14073: ST_TO_ADDR
// hc_class = class_tiger ;
14074: LD_ADDR_OWVAR 28
14078: PUSH
14079: LD_INT 14
14081: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14082: LD_ADDR_OWVAR 31
14086: PUSH
14087: LD_EXP 14
14091: PUSH
14092: LD_INT 0
14094: PUSH
14095: LD_INT 0
14097: PUSH
14098: LD_INT 0
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14107: LD_ADDR_OWVAR 35
14111: PUSH
14112: LD_INT 30
14114: PPUSH
14115: LD_INT 40
14117: PPUSH
14118: CALL_OW 12
14122: PUSH
14123: LD_INT 40
14125: PPUSH
14126: LD_INT 50
14128: PPUSH
14129: CALL_OW 12
14133: PUSH
14134: LD_INT 50
14136: PPUSH
14137: LD_INT 60
14139: PPUSH
14140: CALL_OW 12
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: LIST
14149: PUSH
14150: LD_OWVAR 67
14154: ARRAY
14155: ST_TO_ADDR
// un = CreateHuman ;
14156: LD_ADDR_VAR 0 3
14160: PUSH
14161: CALL_OW 44
14165: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14166: LD_VAR 0 3
14170: PPUSH
14171: LD_INT 27
14173: PPUSH
14174: LD_INT 0
14176: PPUSH
14177: CALL_OW 49
// end ;
14181: GO 14047
14183: POP
14184: POP
// end ; end_of_file
14185: LD_VAR 0 1
14189: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 do
14190: LD_INT 1
14192: PPUSH
14193: CALL_OW 255
14197: PUSH
14198: LD_INT 1
14200: EQUAL
14201: PUSH
14202: LD_INT 10
14204: PPUSH
14205: CALL_OW 255
14209: PUSH
14210: LD_INT 1
14212: EQUAL
14213: AND
14214: PUSH
14215: LD_EXP 20
14219: PUSH
14220: LD_INT 1
14222: EQUAL
14223: AND
14224: IFFALSE 14315
14226: GO 14228
14228: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14229: LD_INT 9450
14231: PUSH
14232: LD_INT 8400
14234: PUSH
14235: LD_INT 6300
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: LIST
14242: PUSH
14243: LD_OWVAR 67
14247: ARRAY
14248: PPUSH
14249: CALL_OW 67
// if cargoEscape = 1 then
14253: LD_EXP 20
14257: PUSH
14258: LD_INT 1
14260: EQUAL
14261: IFFALSE 14315
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14263: LD_EXP 9
14267: PPUSH
14268: LD_STRING D6-Pow-1
14270: PPUSH
14271: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14275: LD_EXP 1
14279: PPUSH
14280: LD_STRING D6-JMM-1
14282: PPUSH
14283: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14287: LD_EXP 9
14291: PPUSH
14292: LD_STRING D6-Pow-2
14294: PPUSH
14295: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14299: LD_EXP 1
14303: PPUSH
14304: LD_STRING D6-JMM-2
14306: PPUSH
14307: CALL_OW 88
// FinishMission ;
14311: CALL 14523 0 0
// end ; end ;
14315: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14316: LD_INT 1
14318: PPUSH
14319: CALL_OW 255
14323: PUSH
14324: LD_INT 1
14326: EQUAL
14327: PUSH
14328: LD_INT 10
14330: PPUSH
14331: CALL_OW 255
14335: PUSH
14336: LD_INT 1
14338: EQUAL
14339: AND
14340: PUSH
14341: LD_EXP 20
14345: PUSH
14346: LD_INT 1
14348: GREATER
14349: AND
14350: IFFALSE 14417
14352: GO 14354
14354: DISABLE
14355: LD_INT 0
14357: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14358: LD_INT 11550
14360: PUSH
14361: LD_INT 10500
14363: PUSH
14364: LD_INT 9450
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: LIST
14371: PUSH
14372: LD_OWVAR 67
14376: ARRAY
14377: PPUSH
14378: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14382: LD_INT 1
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: LD_INT 3
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: LIST
14395: PUSH
14396: LD_OWVAR 67
14400: ARRAY
14401: PPUSH
14402: LD_INT 13
14404: PPUSH
14405: CALL 12773 0 2
// lastBattle = 1 ;
14409: LD_ADDR_EXP 27
14413: PUSH
14414: LD_INT 1
14416: ST_TO_ADDR
// end ;
14417: PPOPN 1
14419: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14420: LD_EXP 27
14424: PUSH
14425: LD_INT 1
14427: EQUAL
14428: PUSH
14429: LD_INT 26
14431: PPUSH
14432: LD_INT 22
14434: PUSH
14435: LD_INT 3
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 21
14444: PUSH
14445: LD_INT 1
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PPUSH
14456: CALL_OW 70
14460: PUSH
14461: LD_INT 0
14463: EQUAL
14464: AND
14465: IFFALSE 14522
14467: GO 14469
14469: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14470: LD_EXP 9
14474: PPUSH
14475: LD_STRING D6-Pow-1
14477: PPUSH
14478: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14482: LD_EXP 1
14486: PPUSH
14487: LD_STRING D6-JMM-1
14489: PPUSH
14490: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14494: LD_EXP 9
14498: PPUSH
14499: LD_STRING D6-Pow-2
14501: PPUSH
14502: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14506: LD_EXP 1
14510: PPUSH
14511: LD_STRING D6-JMM-2
14513: PPUSH
14514: CALL_OW 88
// FinishMission ;
14518: CALL 14523 0 0
// end ;
14522: END
// export function FinishMission ; var tmp ; begin
14523: LD_INT 0
14525: PPUSH
14526: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14527: LD_ADDR_VAR 0 2
14531: PUSH
14532: LD_INT 22
14534: PUSH
14535: LD_INT 1
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 21
14544: PUSH
14545: LD_INT 2
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: LD_INT 24
14554: PUSH
14555: LD_INT 251
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: LIST
14566: PPUSH
14567: CALL_OW 69
14571: ST_TO_ADDR
// if tmp then
14572: LD_VAR 0 2
14576: IFFALSE 14590
// SaveVehicles ( tmp , 02_tanks_1 ) ;
14578: LD_VAR 0 2
14582: PPUSH
14583: LD_STRING 02_tanks_1
14585: PPUSH
14586: CALL 10348 0 2
// if mikhailStatus = 1 then
14590: LD_EXP 21
14594: PUSH
14595: LD_INT 1
14597: EQUAL
14598: IFFALSE 14612
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
14600: LD_EXP 21
14604: PPUSH
14605: LD_STRING 02_mikhailStatus_1
14607: PPUSH
14608: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
14612: LD_INT 1
14614: PPUSH
14615: CALL_OW 274
14619: PPUSH
14620: LD_INT 1
14622: PPUSH
14623: CALL_OW 275
14627: PPUSH
14628: LD_STRING 02_resources_4
14630: PPUSH
14631: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
14635: LD_INT 1
14637: PPUSH
14638: CALL_OW 274
14642: PPUSH
14643: LD_INT 1
14645: PPUSH
14646: CALL_OW 275
14650: PUSH
14651: LD_INT 200
14653: GREATEREQUAL
14654: IFFALSE 14668
// begin AddMedal ( Cans , 1 ) ;
14656: LD_STRING Cans
14658: PPUSH
14659: LD_INT 1
14661: PPUSH
14662: CALL_OW 101
// end else
14666: GO 14679
// begin AddMedal ( Cans , - 1 ) ;
14668: LD_STRING Cans
14670: PPUSH
14671: LD_INT 1
14673: NEG
14674: PPUSH
14675: CALL_OW 101
// end ; if deadsCounter < 2 then
14679: LD_EXP 31
14683: PUSH
14684: LD_INT 2
14686: LESS
14687: IFFALSE 14701
// begin AddMedal ( Deaths , 1 ) ;
14689: LD_STRING Deaths
14691: PPUSH
14692: LD_INT 1
14694: PPUSH
14695: CALL_OW 101
// end else
14699: GO 14712
// begin AddMedal ( Deaths , - 1 ) ;
14701: LD_STRING Deaths
14703: PPUSH
14704: LD_INT 1
14706: NEG
14707: PPUSH
14708: CALL_OW 101
// end ; if mikhailStatus = 0 then
14712: LD_EXP 21
14716: PUSH
14717: LD_INT 0
14719: EQUAL
14720: IFFALSE 14733
// AddMedal ( Prisoner , - 1 ) ;
14722: LD_STRING Prisoner
14724: PPUSH
14725: LD_INT 1
14727: NEG
14728: PPUSH
14729: CALL_OW 101
// if mikhailStatus = 1 then
14733: LD_EXP 21
14737: PUSH
14738: LD_INT 1
14740: EQUAL
14741: IFFALSE 14753
// AddMedal ( Prisoner , 1 ) ;
14743: LD_STRING Prisoner
14745: PPUSH
14746: LD_INT 1
14748: PPUSH
14749: CALL_OW 101
// if mikhailStatus = 2 then
14753: LD_EXP 21
14757: PUSH
14758: LD_INT 2
14760: EQUAL
14761: IFFALSE 14773
// AddMedal ( Prisoner , 2 ) ;
14763: LD_STRING Prisoner
14765: PPUSH
14766: LD_INT 2
14768: PPUSH
14769: CALL_OW 101
// if mikhailStatus = 3 then
14773: LD_EXP 21
14777: PUSH
14778: LD_INT 3
14780: EQUAL
14781: IFFALSE 14794
// AddMedal ( Prisoner , - 2 ) ;
14783: LD_STRING Prisoner
14785: PPUSH
14786: LD_INT 2
14788: NEG
14789: PPUSH
14790: CALL_OW 101
// GiveMedals ( MAIN ) ;
14794: LD_STRING MAIN
14796: PPUSH
14797: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
14801: LD_INT 22
14803: PUSH
14804: LD_INT 1
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: LD_INT 23
14813: PUSH
14814: LD_INT 1
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: LD_INT 21
14823: PUSH
14824: LD_INT 1
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: LIST
14835: PPUSH
14836: CALL_OW 69
14840: PPUSH
14841: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
14845: LD_EXP 1
14849: PPUSH
14850: LD_EXP 33
14854: PUSH
14855: LD_STRING JMM
14857: STR
14858: PPUSH
14859: CALL_OW 38
// if IsOK ( Bobby ) then
14863: LD_EXP 2
14867: PPUSH
14868: CALL_OW 302
14872: IFFALSE 14892
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
14874: LD_EXP 2
14878: PPUSH
14879: LD_EXP 33
14883: PUSH
14884: LD_STRING Bobby
14886: STR
14887: PPUSH
14888: CALL_OW 38
// if IsOK ( Cyrus ) then
14892: LD_EXP 3
14896: PPUSH
14897: CALL_OW 302
14901: IFFALSE 14921
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
14903: LD_EXP 3
14907: PPUSH
14908: LD_EXP 33
14912: PUSH
14913: LD_STRING Cyrus
14915: STR
14916: PPUSH
14917: CALL_OW 38
// if IsOK ( Lisa ) then
14921: LD_EXP 4
14925: PPUSH
14926: CALL_OW 302
14930: IFFALSE 14950
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
14932: LD_EXP 4
14936: PPUSH
14937: LD_EXP 33
14941: PUSH
14942: LD_STRING Lisa
14944: STR
14945: PPUSH
14946: CALL_OW 38
// if IsOK ( Khatam ) then
14950: LD_EXP 5
14954: PPUSH
14955: CALL_OW 302
14959: IFFALSE 14979
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
14961: LD_EXP 5
14965: PPUSH
14966: LD_EXP 33
14970: PUSH
14971: LD_STRING Khatam
14973: STR
14974: PPUSH
14975: CALL_OW 38
// if IsOK ( Brian ) then
14979: LD_EXP 6
14983: PPUSH
14984: CALL_OW 302
14988: IFFALSE 15008
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
14990: LD_EXP 6
14994: PPUSH
14995: LD_EXP 33
14999: PUSH
15000: LD_STRING Brian
15002: STR
15003: PPUSH
15004: CALL_OW 38
// if IsOk ( Jerry ) then
15008: LD_EXP 7
15012: PPUSH
15013: CALL_OW 302
15017: IFFALSE 15037
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15019: LD_EXP 7
15023: PPUSH
15024: LD_EXP 33
15028: PUSH
15029: LD_STRING Jerry
15031: STR
15032: PPUSH
15033: CALL_OW 38
// if mikhailStatus = 1 then
15037: LD_EXP 21
15041: PUSH
15042: LD_INT 1
15044: EQUAL
15045: IFFALSE 15065
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15047: LD_EXP 8
15051: PPUSH
15052: LD_EXP 33
15056: PUSH
15057: LD_STRING Mikhail
15059: STR
15060: PPUSH
15061: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15065: LD_INT 50
15067: PUSH
15068: EMPTY
15069: LIST
15070: PUSH
15071: LD_INT 22
15073: PUSH
15074: LD_INT 1
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 21
15083: PUSH
15084: LD_INT 1
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: LIST
15095: PPUSH
15096: CALL_OW 69
15100: PUSH
15101: LD_EXP 1
15105: PUSH
15106: LD_EXP 2
15110: PUSH
15111: LD_EXP 3
15115: PUSH
15116: LD_EXP 4
15120: PUSH
15121: LD_EXP 5
15125: PUSH
15126: LD_EXP 6
15130: PUSH
15131: LD_EXP 7
15135: PUSH
15136: LD_EXP 8
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: DIFF
15151: PPUSH
15152: LD_STRING 02_other_survivors
15154: PPUSH
15155: CALL_OW 38
// YouWin ;
15159: CALL_OW 103
// end ;
15163: LD_VAR 0 1
15167: RET
