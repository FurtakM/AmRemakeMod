// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export deadsCounter ; starting begin RuSoldMinLevel = 0 ;
   0: LD_ADDR_EXP 13
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
   8: LD_ADDR_EXP 14
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// hpJMM = 0 ;
  16: LD_ADDR_EXP 10
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpBobby = 0 ;
  24: LD_ADDR_EXP 11
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpCyrus = 0 ;
  32: LD_ADDR_EXP 12
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// cargoEscape = 0 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// mikhailStatus = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailInBase = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailDepot = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// lastBattle = 0 ;
  72: LD_ADDR_EXP 26
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// deadsCounter = 0 ;
  80: LD_ADDR_EXP 27
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// southBaseDefenders = [ ] ;
  88: LD_ADDR_EXP 24
  92: PUSH
  93: EMPTY
  94: ST_TO_ADDR
// northBaseDefenders = [ ] ;
  95: LD_ADDR_EXP 23
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// attackGroup = [ ] ;
 102: LD_ADDR_EXP 25
 106: PUSH
 107: EMPTY
 108: ST_TO_ADDR
// RandomizeAll ;
 109: CALL_OW 11
// InGameOn ;
 113: CALL_OW 8
// Resetfog ;
 117: CALL_OW 335
// PrepareDifficulty ;
 121: CALL 8581 0 0
// PrepareRussianCommander ;
 125: CALL 10015 0 0
// PrepareSouthBase ;
 129: CALL 10141 0 0
// PrepareNorthBase ;
 133: CALL 10498 0 0
// PrepareOtherRussians ;
 137: CALL 10864 0 0
// PrepareHeroes ;
 141: CALL 9333 0 0
// PrepareLisSquad ;
 145: CALL 9540 0 0
// end ; end_of_file
 149: END
// every 1 do
 150: GO 152
 152: DISABLE
// begin CenterNowOnUnits ( JMM ) ;
 153: LD_EXP 1
 157: PPUSH
 158: CALL_OW 87
// if Cyrus and Bobby then
 162: LD_EXP 3
 166: PUSH
 167: LD_EXP 2
 171: AND
 172: IFFALSE 428
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 174: LD_EXP 3
 178: PPUSH
 179: LD_INT 43
 181: PPUSH
 182: LD_INT 72
 184: PPUSH
 185: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 189: LD_EXP 2
 193: PPUSH
 194: LD_INT 44
 196: PPUSH
 197: LD_INT 70
 199: PPUSH
 200: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 204: LD_EXP 1
 208: PPUSH
 209: LD_INT 46
 211: PPUSH
 212: LD_INT 73
 214: PPUSH
 215: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 219: LD_EXP 3
 223: PPUSH
 224: LD_STRING D1a-Cyrus-1
 226: PPUSH
 227: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 231: LD_EXP 1
 235: PPUSH
 236: LD_STRING D1a-JMM-1
 238: PPUSH
 239: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 243: LD_EXP 3
 247: PPUSH
 248: LD_INT 37
 250: PPUSH
 251: LD_INT 66
 253: PPUSH
 254: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 258: LD_EXP 2
 262: PPUSH
 263: LD_INT 41
 265: PPUSH
 266: LD_INT 67
 268: PPUSH
 269: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 273: LD_EXP 1
 277: PPUSH
 278: LD_INT 38
 280: PPUSH
 281: LD_INT 64
 283: PPUSH
 284: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 288: LD_EXP 2
 292: PPUSH
 293: LD_STRING D1a-Bobby-2
 295: PPUSH
 296: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 300: LD_EXP 3
 304: PPUSH
 305: LD_INT 35
 307: PPUSH
 308: LD_INT 62
 310: PPUSH
 311: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 315: LD_EXP 2
 319: PPUSH
 320: LD_INT 32
 322: PPUSH
 323: LD_INT 60
 325: PPUSH
 326: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 330: LD_EXP 1
 334: PPUSH
 335: LD_INT 35
 337: PPUSH
 338: LD_INT 60
 340: PPUSH
 341: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 345: LD_EXP 1
 349: PPUSH
 350: LD_STRING D1a-JMM-2
 352: PPUSH
 353: CALL_OW 88
// ComWalk ( Lisa ) ;
 357: LD_EXP 4
 361: PPUSH
 362: CALL_OW 138
// wait ( 0 0$1 ) ;
 366: LD_INT 35
 368: PPUSH
 369: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 373: LD_EXP 4
 377: PPUSH
 378: LD_EXP 1
 382: PPUSH
 383: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 387: LD_EXP 1
 391: PUSH
 392: LD_EXP 3
 396: PUSH
 397: LD_EXP 2
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: PPUSH
 407: LD_EXP 4
 411: PPUSH
 412: CALL_OW 119
// Say ( Lisa , D1a-Lisa-2 ) ;
 416: LD_EXP 4
 420: PPUSH
 421: LD_STRING D1a-Lisa-2
 423: PPUSH
 424: CALL_OW 88
// end ; if Cyrus and not Bobby then
 428: LD_EXP 3
 432: PUSH
 433: LD_EXP 2
 437: NOT
 438: AND
 439: IFFALSE 644
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 441: LD_EXP 3
 445: PPUSH
 446: LD_INT 43
 448: PPUSH
 449: LD_INT 72
 451: PPUSH
 452: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 456: LD_EXP 1
 460: PPUSH
 461: LD_INT 46
 463: PPUSH
 464: LD_INT 73
 466: PPUSH
 467: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 471: LD_EXP 3
 475: PPUSH
 476: LD_STRING D1a-Cyrus-1
 478: PPUSH
 479: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 483: LD_EXP 1
 487: PPUSH
 488: LD_STRING D1a-JMM-1
 490: PPUSH
 491: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 495: LD_EXP 3
 499: PPUSH
 500: LD_INT 37
 502: PPUSH
 503: LD_INT 66
 505: PPUSH
 506: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 510: LD_EXP 1
 514: PPUSH
 515: LD_INT 38
 517: PPUSH
 518: LD_INT 64
 520: PPUSH
 521: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 525: LD_EXP 3
 529: PPUSH
 530: LD_STRING D1a-Cyrus-2
 532: PPUSH
 533: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 537: LD_EXP 3
 541: PPUSH
 542: LD_INT 35
 544: PPUSH
 545: LD_INT 62
 547: PPUSH
 548: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 552: LD_EXP 1
 556: PPUSH
 557: LD_INT 35
 559: PPUSH
 560: LD_INT 60
 562: PPUSH
 563: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 567: LD_EXP 1
 571: PPUSH
 572: LD_STRING D1a-JMM-2
 574: PPUSH
 575: CALL_OW 88
// ComWalk ( Lisa ) ;
 579: LD_EXP 4
 583: PPUSH
 584: CALL_OW 138
// wait ( 0 0$1 ) ;
 588: LD_INT 35
 590: PPUSH
 591: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 595: LD_EXP 4
 599: PPUSH
 600: LD_EXP 1
 604: PPUSH
 605: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 609: LD_EXP 4
 613: PPUSH
 614: LD_STRING D1a-Lisa-2
 616: PPUSH
 617: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 621: LD_EXP 1
 625: PUSH
 626: LD_EXP 3
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: PPUSH
 635: LD_EXP 4
 639: PPUSH
 640: CALL_OW 119
// end ; if not Cyrus and Bobby then
 644: LD_EXP 3
 648: NOT
 649: PUSH
 650: LD_EXP 2
 654: AND
 655: IFFALSE 860
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 657: LD_EXP 2
 661: PPUSH
 662: LD_INT 44
 664: PPUSH
 665: LD_INT 70
 667: PPUSH
 668: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 672: LD_EXP 1
 676: PPUSH
 677: LD_INT 46
 679: PPUSH
 680: LD_INT 73
 682: PPUSH
 683: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 687: LD_EXP 2
 691: PPUSH
 692: LD_STRING D1a-Bobby-1
 694: PPUSH
 695: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 699: LD_EXP 1
 703: PPUSH
 704: LD_STRING D1a-JMM-1
 706: PPUSH
 707: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 711: LD_EXP 2
 715: PPUSH
 716: LD_INT 37
 718: PPUSH
 719: LD_INT 66
 721: PPUSH
 722: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 726: LD_EXP 1
 730: PPUSH
 731: LD_INT 38
 733: PPUSH
 734: LD_INT 64
 736: PPUSH
 737: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 741: LD_EXP 2
 745: PPUSH
 746: LD_STRING D1a-Bobby-2
 748: PPUSH
 749: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 753: LD_EXP 2
 757: PPUSH
 758: LD_INT 35
 760: PPUSH
 761: LD_INT 62
 763: PPUSH
 764: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 768: LD_EXP 1
 772: PPUSH
 773: LD_INT 35
 775: PPUSH
 776: LD_INT 60
 778: PPUSH
 779: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 783: LD_EXP 1
 787: PPUSH
 788: LD_STRING D1a-JMM-2
 790: PPUSH
 791: CALL_OW 88
// ComWalk ( Lisa ) ;
 795: LD_EXP 4
 799: PPUSH
 800: CALL_OW 138
// wait ( 0 0$1 ) ;
 804: LD_INT 35
 806: PPUSH
 807: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 811: LD_EXP 4
 815: PPUSH
 816: LD_EXP 1
 820: PPUSH
 821: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 825: LD_EXP 1
 829: PUSH
 830: LD_EXP 3
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PPUSH
 839: LD_EXP 4
 843: PPUSH
 844: CALL_OW 119
// Say ( Lisa , D1a-Lisa-2 ) ;
 848: LD_EXP 4
 852: PPUSH
 853: LD_STRING D1a-Lisa-2
 855: PPUSH
 856: CALL_OW 88
// end ; if not Cyrus and not Bobby then
 860: LD_EXP 3
 864: NOT
 865: PUSH
 866: LD_EXP 2
 870: NOT
 871: AND
 872: IFFALSE 1012
// begin ComMoveXY ( JMM , 37 , 66 ) ;
 874: LD_EXP 1
 878: PPUSH
 879: LD_INT 37
 881: PPUSH
 882: LD_INT 66
 884: PPUSH
 885: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
 889: LD_EXP 1
 893: PPUSH
 894: LD_STRING D1b-JMM-1
 896: PPUSH
 897: CALL_OW 88
// ComCrawl ( JMM ) ;
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
 910: LD_EXP 1
 914: PPUSH
 915: LD_INT 35
 917: PPUSH
 918: LD_INT 60
 920: PPUSH
 921: CALL_OW 171
// wait ( 0 0$8 ) ;
 925: LD_INT 280
 927: PPUSH
 928: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
 932: LD_EXP 1
 936: PPUSH
 937: LD_STRING D1b-JMM-1a
 939: PPUSH
 940: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
 944: LD_EXP 1
 948: PUSH
 949: LD_EXP 4
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PPUSH
 958: CALL_OW 138
// wait ( 0 0$1 ) ;
 962: LD_INT 35
 964: PPUSH
 965: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 969: LD_EXP 4
 973: PPUSH
 974: LD_EXP 1
 978: PPUSH
 979: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
 983: LD_EXP 1
 987: PUSH
 988: EMPTY
 989: LIST
 990: PPUSH
 991: LD_EXP 4
 995: PPUSH
 996: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1000: LD_EXP 4
1004: PPUSH
1005: LD_STRING D1b-Lisa-1
1007: PPUSH
1008: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1012: LD_EXP 1
1016: PPUSH
1017: LD_STRING D1-JMM-1
1019: PPUSH
1020: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1024: LD_EXP 4
1028: PPUSH
1029: LD_STRING D1-Lisa-1
1031: PPUSH
1032: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1036: LD_EXP 1
1040: PPUSH
1041: LD_STRING D1-JMM-2
1043: PPUSH
1044: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1048: LD_EXP 9
1052: PPUSH
1053: LD_STRING D1-Pow-2
1055: PPUSH
1056: CALL_OW 94
// if Cyrus then
1060: LD_EXP 3
1064: IFFALSE 1090
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1066: LD_EXP 3
1070: PPUSH
1071: LD_STRING D1-Cyrus-2
1073: PPUSH
1074: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1078: LD_EXP 1
1082: PPUSH
1083: LD_STRING D1-JMM-3
1085: PPUSH
1086: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1090: LD_EXP 9
1094: PPUSH
1095: LD_STRING D1-Pow-3
1097: PPUSH
1098: CALL_OW 94
// SayRadio ( JMM , D1-JMM-4 ) ;
1102: LD_EXP 1
1106: PPUSH
1107: LD_STRING D1-JMM-4
1109: PPUSH
1110: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4 ) ;
1114: LD_EXP 9
1118: PPUSH
1119: LD_STRING D1-Pow-4
1121: PPUSH
1122: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1126: LD_EXP 9
1130: PPUSH
1131: LD_STRING D1-Pow-4a
1133: PPUSH
1134: CALL_OW 94
// if Cyrus then
1138: LD_EXP 3
1142: IFFALSE 1156
// Say ( Cyrus , D1-Cyrus-4 ) ;
1144: LD_EXP 3
1148: PPUSH
1149: LD_STRING D1-Cyrus-4
1151: PPUSH
1152: CALL_OW 88
// if Bobby then
1156: LD_EXP 2
1160: IFFALSE 1198
// begin Say ( Bobby , D1-Bobby-4 ) ;
1162: LD_EXP 2
1166: PPUSH
1167: LD_STRING D1-Bobby-4
1169: PPUSH
1170: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1174: LD_EXP 4
1178: PPUSH
1179: LD_STRING D1-Lisa-4
1181: PPUSH
1182: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1186: LD_EXP 1
1190: PPUSH
1191: LD_STRING D1-JMM-5
1193: PPUSH
1194: CALL_OW 88
// end ; InGameOff ;
1198: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1202: LD_INT 22
1204: PUSH
1205: LD_INT 4
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PPUSH
1212: CALL_OW 69
1216: PPUSH
1217: LD_INT 1
1219: PPUSH
1220: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1224: LD_STRING M1
1226: PPUSH
1227: CALL_OW 337
// SaveForQuickRestart ;
1231: CALL_OW 22
// end ;
1235: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1236: LD_INT 7
1238: PPUSH
1239: LD_INT 22
1241: PUSH
1242: LD_INT 1
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: PPUSH
1249: CALL_OW 70
1253: PUSH
1254: LD_INT 0
1256: GREATER
1257: IFFALSE 1627
1259: GO 1261
1261: DISABLE
// begin InGameOn ;
1262: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1266: LD_INT 22
1268: PUSH
1269: LD_INT 1
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: LD_INT 21
1278: PUSH
1279: LD_INT 1
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PPUSH
1290: CALL_OW 69
1294: PPUSH
1295: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1299: LD_INT 24
1301: PPUSH
1302: LD_INT 32
1304: PPUSH
1305: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1309: LD_EXP 5
1313: PPUSH
1314: LD_INT 4
1316: PPUSH
1317: LD_INT 1
1319: PPUSH
1320: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1324: LD_EXP 5
1328: PPUSH
1329: LD_INT 4
1331: PPUSH
1332: CALL_OW 336
// wait ( 0 0$1 ) ;
1336: LD_INT 35
1338: PPUSH
1339: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1343: LD_EXP 5
1347: PPUSH
1348: LD_INT 27
1350: PPUSH
1351: LD_INT 38
1353: PPUSH
1354: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1358: LD_EXP 5
1362: PPUSH
1363: LD_EXP 1
1367: PPUSH
1368: CALL_OW 179
// wait ( 0 0$1 ) ;
1372: LD_INT 35
1374: PPUSH
1375: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1379: LD_EXP 5
1383: PPUSH
1384: LD_STRING D2a-Khat-1
1386: PPUSH
1387: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1391: LD_EXP 1
1395: PPUSH
1396: LD_STRING D2a-JMM-1
1398: PPUSH
1399: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1403: LD_EXP 5
1407: PPUSH
1408: LD_STRING D2a-Khat-2
1410: PPUSH
1411: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1415: LD_EXP 1
1419: PPUSH
1420: LD_STRING D2a-JMM-2
1422: PPUSH
1423: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1427: LD_EXP 5
1431: PPUSH
1432: LD_STRING D2a-Khat-3
1434: PPUSH
1435: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1439: LD_EXP 1
1443: PPUSH
1444: LD_STRING D2a-JMM-3
1446: PPUSH
1447: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1451: LD_EXP 5
1455: PPUSH
1456: LD_STRING D2a-Khat-4
1458: PPUSH
1459: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1463: LD_EXP 1
1467: PPUSH
1468: LD_STRING D2a-JMM-4
1470: PPUSH
1471: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1475: LD_EXP 5
1479: PPUSH
1480: LD_STRING D2a-Khat-5
1482: PPUSH
1483: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1487: LD_EXP 1
1491: PPUSH
1492: LD_STRING D2a-JMM-5
1494: PPUSH
1495: CALL_OW 88
// InGameOff ;
1499: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
1503: LD_INT 22
1505: PUSH
1506: LD_INT 1
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PUSH
1513: LD_INT 21
1515: PUSH
1516: LD_INT 1
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: PUSH
1523: LD_INT 3
1525: PUSH
1526: LD_INT 24
1528: PUSH
1529: LD_INT 1000
1531: PUSH
1532: EMPTY
1533: LIST
1534: LIST
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: PPUSH
1545: CALL_OW 69
1549: PUSH
1550: LD_INT 0
1552: GREATER
1553: IFFALSE 1627
// begin Say ( Khatam , D2a-Khat-6 ) ;
1555: LD_EXP 5
1559: PPUSH
1560: LD_STRING D2a-Khat-6
1562: PPUSH
1563: CALL_OW 88
// ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1567: LD_EXP 5
1571: PPUSH
1572: LD_INT 22
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 21
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: PUSH
1592: LD_INT 3
1594: PUSH
1595: LD_INT 24
1597: PUSH
1598: LD_INT 1000
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PPUSH
1614: CALL_OW 69
1618: PUSH
1619: LD_INT 1
1621: ARRAY
1622: PPUSH
1623: CALL_OW 128
// end ; end ;
1627: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmpFemale , tmpMale ;
1628: LD_INT 15
1630: PPUSH
1631: LD_INT 22
1633: PUSH
1634: LD_INT 1
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PPUSH
1641: CALL_OW 70
1645: PUSH
1646: LD_INT 0
1648: GREATER
1649: IFFALSE 2300
1651: GO 1653
1653: DISABLE
1654: LD_INT 0
1656: PPUSH
1657: PPUSH
1658: PPUSH
1659: PPUSH
1660: PPUSH
// begin tmpFemale = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_sex , 2 ] ] ) ;
1661: LD_ADDR_VAR 0 4
1665: PUSH
1666: LD_INT 22
1668: PUSH
1669: LD_INT 1
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: LD_INT 25
1678: PUSH
1679: LD_INT 2
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 26
1688: PUSH
1689: LD_INT 2
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PPUSH
1701: CALL_OW 69
1705: ST_TO_ADDR
// tmpMale = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) ;
1706: LD_ADDR_VAR 0 5
1710: PUSH
1711: LD_INT 22
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 25
1723: PUSH
1724: LD_INT 2
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: LD_INT 26
1733: PUSH
1734: LD_INT 1
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: LIST
1745: PPUSH
1746: CALL_OW 69
1750: ST_TO_ADDR
// distanceTab = [ [ Bobby , GetDistUnitArea ( Bobby , DeadsSpawn ) ] , [ Cyrus , GetDistUnitArea ( Cyrus , DeadsSpawn ) ] , [ Lisa , GetDistUnitArea ( Lisa , DeadsSpawn ) ] , [ tmpMale [ 1 ] , GetDistUnits ( tmpMale [ 1 ] , DeadsSpawn ) ] , [ tmpFemale [ 1 ] , GetDistUnits ( tmpFemale [ 1 ] , DeadsSpawn ) ] ] ;
1751: LD_ADDR_VAR 0 2
1755: PUSH
1756: LD_EXP 2
1760: PUSH
1761: LD_EXP 2
1765: PPUSH
1766: LD_INT 16
1768: PPUSH
1769: CALL_OW 299
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_EXP 3
1782: PUSH
1783: LD_EXP 3
1787: PPUSH
1788: LD_INT 16
1790: PPUSH
1791: CALL_OW 299
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: LD_EXP 4
1804: PUSH
1805: LD_EXP 4
1809: PPUSH
1810: LD_INT 16
1812: PPUSH
1813: CALL_OW 299
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_VAR 0 5
1826: PUSH
1827: LD_INT 1
1829: ARRAY
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PPUSH
1840: LD_INT 16
1842: PPUSH
1843: CALL_OW 296
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_VAR 0 4
1856: PUSH
1857: LD_INT 1
1859: ARRAY
1860: PUSH
1861: LD_VAR 0 4
1865: PUSH
1866: LD_INT 1
1868: ARRAY
1869: PPUSH
1870: LD_INT 16
1872: PPUSH
1873: CALL_OW 296
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: ST_TO_ADDR
// PrepareDeadSoldiers ;
1889: CALL 9788 0 0
// InGameOn ;
1893: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
1897: LD_INT 23
1899: PPUSH
1900: LD_INT 12
1902: PPUSH
1903: CALL_OW 84
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] ] ) , 23 , 12 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 1
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: EMPTY
1918: LIST
1919: PPUSH
1920: CALL_OW 69
1924: PPUSH
1925: LD_INT 23
1927: PPUSH
1928: LD_INT 12
1930: PPUSH
1931: CALL_OW 111
// min = distanceTab [ 1 ] [ 2 ] ;
1935: LD_ADDR_VAR 0 3
1939: PUSH
1940: LD_VAR 0 2
1944: PUSH
1945: LD_INT 1
1947: ARRAY
1948: PUSH
1949: LD_INT 2
1951: ARRAY
1952: ST_TO_ADDR
// for i = 1 to distanceTab do
1953: LD_ADDR_VAR 0 1
1957: PUSH
1958: DOUBLE
1959: LD_INT 1
1961: DEC
1962: ST_TO_ADDR
1963: LD_VAR 0 2
1967: PUSH
1968: FOR_TO
1969: IFFALSE 2015
// if distanceTab [ i ] [ 2 ] < min then
1971: LD_VAR 0 2
1975: PUSH
1976: LD_VAR 0 1
1980: ARRAY
1981: PUSH
1982: LD_INT 2
1984: ARRAY
1985: PUSH
1986: LD_VAR 0 3
1990: LESS
1991: IFFALSE 2013
// min = distanceTab [ i ] [ 2 ] ;
1993: LD_ADDR_VAR 0 3
1997: PUSH
1998: LD_VAR 0 2
2002: PUSH
2003: LD_VAR 0 1
2007: ARRAY
2008: PUSH
2009: LD_INT 2
2011: ARRAY
2012: ST_TO_ADDR
2013: GO 1968
2015: POP
2016: POP
// for i = 1 to distanceTab do
2017: LD_ADDR_VAR 0 1
2021: PUSH
2022: DOUBLE
2023: LD_INT 1
2025: DEC
2026: ST_TO_ADDR
2027: LD_VAR 0 2
2031: PUSH
2032: FOR_TO
2033: IFFALSE 2247
// begin if distanceTab [ i ] [ 2 ] = min then
2035: LD_VAR 0 2
2039: PUSH
2040: LD_VAR 0 1
2044: ARRAY
2045: PUSH
2046: LD_INT 2
2048: ARRAY
2049: PUSH
2050: LD_VAR 0 3
2054: EQUAL
2055: IFFALSE 2245
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2057: LD_VAR 0 2
2061: PUSH
2062: LD_VAR 0 1
2066: ARRAY
2067: PUSH
2068: LD_INT 1
2070: ARRAY
2071: PUSH
2072: LD_EXP 2
2076: EQUAL
2077: IFFALSE 2091
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2079: LD_EXP 2
2083: PPUSH
2084: LD_STRING DCorpses-Bobby-1
2086: PPUSH
2087: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2091: LD_VAR 0 2
2095: PUSH
2096: LD_VAR 0 1
2100: ARRAY
2101: PUSH
2102: LD_INT 1
2104: ARRAY
2105: PUSH
2106: LD_EXP 3
2110: EQUAL
2111: IFFALSE 2125
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2113: LD_EXP 3
2117: PPUSH
2118: LD_STRING DCorpses-Cyrus-1
2120: PPUSH
2121: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2125: LD_VAR 0 2
2129: PUSH
2130: LD_VAR 0 1
2134: ARRAY
2135: PUSH
2136: LD_INT 1
2138: ARRAY
2139: PUSH
2140: LD_EXP 4
2144: EQUAL
2145: IFFALSE 2159
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2147: LD_EXP 4
2151: PPUSH
2152: LD_STRING DCorpses-Lisa-1
2154: PPUSH
2155: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmpMale [ 1 ] then
2159: LD_VAR 0 2
2163: PUSH
2164: LD_VAR 0 1
2168: ARRAY
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PUSH
2174: LD_VAR 0 5
2178: PUSH
2179: LD_INT 1
2181: ARRAY
2182: EQUAL
2183: IFFALSE 2201
// Say ( tmpMale [ 1 ] , DCorpses-Sol1-1 ) ;
2185: LD_VAR 0 5
2189: PUSH
2190: LD_INT 1
2192: ARRAY
2193: PPUSH
2194: LD_STRING DCorpses-Sol1-1
2196: PPUSH
2197: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmpFemale [ 1 ] then
2201: LD_VAR 0 2
2205: PUSH
2206: LD_VAR 0 1
2210: ARRAY
2211: PUSH
2212: LD_INT 1
2214: ARRAY
2215: PUSH
2216: LD_VAR 0 4
2220: PUSH
2221: LD_INT 1
2223: ARRAY
2224: EQUAL
2225: IFFALSE 2243
// Say ( tmpFemale [ 1 ] , DCorpses-FSol1-1 ) ;
2227: LD_VAR 0 4
2231: PUSH
2232: LD_INT 1
2234: ARRAY
2235: PPUSH
2236: LD_STRING DCorpses-FSol1-1
2238: PPUSH
2239: CALL_OW 88
// break ;
2243: GO 2247
// end ; end ;
2245: GO 2032
2247: POP
2248: POP
// Say ( JMM , DCorpses-JMM-1 ) ;
2249: LD_EXP 1
2253: PPUSH
2254: LD_STRING DCorpses-JMM-1
2256: PPUSH
2257: CALL_OW 88
// if IsOK ( Khatam ) then
2261: LD_EXP 5
2265: PPUSH
2266: CALL_OW 302
2270: IFFALSE 2284
// Say ( Khatam , DCorpses-Khat-1 ) ;
2272: LD_EXP 5
2276: PPUSH
2277: LD_STRING DCorpses-Khat-1
2279: PPUSH
2280: CALL_OW 88
// InGameOff ;
2284: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
2288: LD_EXP 1
2292: PPUSH
2293: LD_STRING DCorpses-JMM-2
2295: PPUSH
2296: CALL_OW 88
// end ;
2300: PPOPN 5
2302: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 do var i ;
2303: LD_INT 8
2305: PPUSH
2306: LD_INT 22
2308: PUSH
2309: LD_INT 1
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PPUSH
2316: CALL_OW 70
2320: PUSH
2321: LD_INT 0
2323: GREATER
2324: IFFALSE 2579
2326: GO 2328
2328: DISABLE
2329: LD_INT 0
2331: PPUSH
// begin InGameOn ;
2332: CALL_OW 8
// ComTurnXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 72 , 77 ) ;
2336: LD_INT 22
2338: PUSH
2339: LD_INT 1
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 21
2348: PUSH
2349: LD_INT 1
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PUSH
2356: EMPTY
2357: LIST
2358: LIST
2359: PPUSH
2360: CALL_OW 69
2364: PPUSH
2365: LD_INT 72
2367: PPUSH
2368: LD_INT 77
2370: PPUSH
2371: CALL_OW 118
// CenterOnXY ( 72 , 77 ) ;
2375: LD_INT 72
2377: PPUSH
2378: LD_INT 77
2380: PPUSH
2381: CALL_OW 84
// PrepareOtherAmericans ;
2385: CALL 9648 0 0
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
2389: LD_INT 3
2391: PPUSH
2392: LD_INT 4
2394: PPUSH
2395: LD_INT 2
2397: PPUSH
2398: LD_INT 1
2400: PPUSH
2401: CALL_OW 80
// SetAttitude ( 4 , 3 , att_enemy , true ) ;
2405: LD_INT 4
2407: PPUSH
2408: LD_INT 3
2410: PPUSH
2411: LD_INT 2
2413: PPUSH
2414: LD_INT 1
2416: PPUSH
2417: CALL_OW 80
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
2421: LD_ADDR_VAR 0 1
2425: PUSH
2426: LD_INT 9
2428: PPUSH
2429: LD_INT 22
2431: PUSH
2432: LD_INT 3
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: PPUSH
2439: CALL_OW 70
2443: PUSH
2444: FOR_IN
2445: IFFALSE 2458
// ComFree ( i ) ;
2447: LD_VAR 0 1
2451: PPUSH
2452: CALL_OW 139
2456: GO 2444
2458: POP
2459: POP
// wait ( 0 0$1 ) ;
2460: LD_INT 35
2462: PPUSH
2463: CALL_OW 67
// InGameOff ;
2467: CALL_OW 9
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) ) ] , DF-Sol1-1 ) ;
2471: LD_INT 22
2473: PUSH
2474: LD_INT 1
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PUSH
2481: LD_INT 21
2483: PUSH
2484: LD_INT 1
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: PUSH
2491: LD_INT 26
2493: PUSH
2494: LD_INT 1
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: PPUSH
2506: CALL_OW 69
2510: PUSH
2511: LD_INT 2
2513: PPUSH
2514: LD_INT 22
2516: PUSH
2517: LD_INT 1
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: LD_INT 21
2526: PUSH
2527: LD_INT 1
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 1
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: PPUSH
2549: CALL_OW 69
2553: PPUSH
2554: CALL_OW 12
2558: ARRAY
2559: PPUSH
2560: LD_STRING DF-Sol1-1
2562: PPUSH
2563: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
2567: LD_EXP 1
2571: PPUSH
2572: LD_STRING DF-JMM-1
2574: PPUSH
2575: CALL_OW 88
// end ;
2579: PPOPN 1
2581: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and ( IsOK ( Brian ) or IsOK ( Jerry ) ) do
2582: LD_INT 19
2584: PPUSH
2585: LD_INT 22
2587: PUSH
2588: LD_INT 3
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PPUSH
2595: CALL_OW 70
2599: PUSH
2600: LD_INT 0
2602: EQUAL
2603: PUSH
2604: LD_EXP 6
2608: PPUSH
2609: CALL_OW 302
2613: PUSH
2614: LD_EXP 7
2618: PPUSH
2619: CALL_OW 302
2623: OR
2624: AND
2625: IFFALSE 2803
2627: GO 2629
2629: DISABLE
// begin if not IsDead ( Brian ) then
2630: LD_EXP 6
2634: PPUSH
2635: CALL_OW 301
2639: NOT
2640: IFFALSE 2654
// SetSide ( Brian , 1 ) ;
2642: LD_EXP 6
2646: PPUSH
2647: LD_INT 1
2649: PPUSH
2650: CALL_OW 235
// if not IsDead ( Jerry ) then
2654: LD_EXP 7
2658: PPUSH
2659: CALL_OW 301
2663: NOT
2664: IFFALSE 2678
// SetSide ( Jerry , 1 ) ;
2666: LD_EXP 7
2670: PPUSH
2671: LD_INT 1
2673: PPUSH
2674: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
2678: LD_INT 22
2680: PUSH
2681: LD_INT 1
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 25
2690: PUSH
2691: LD_INT 4
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PPUSH
2702: CALL_OW 69
2706: PUSH
2707: LD_INT 0
2709: GREATER
2710: IFFALSE 2726
// begin Say ( JMM , DFa-JMM-1 ) ;
2712: LD_EXP 1
2716: PPUSH
2717: LD_STRING DFa-JMM-1
2719: PPUSH
2720: CALL_OW 88
// end else
2724: GO 2738
// begin Say ( JMM , DFa-JMM-1a ) ;
2726: LD_EXP 1
2730: PPUSH
2731: LD_STRING DFa-JMM-1a
2733: PPUSH
2734: CALL_OW 88
// end ; if GetLives ( Brian ) >= 500 then
2738: LD_EXP 6
2742: PPUSH
2743: CALL_OW 256
2747: PUSH
2748: LD_INT 500
2750: GREATEREQUAL
2751: IFFALSE 2803
// begin Say ( Brian , DFb-Sol1-1 ) ;
2753: LD_EXP 6
2757: PPUSH
2758: LD_STRING DFb-Sol1-1
2760: PPUSH
2761: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
2765: LD_EXP 6
2769: PPUSH
2770: LD_INT 78
2772: PPUSH
2773: LD_INT 74
2775: PPUSH
2776: CALL_OW 111
// if IsDead ( Jerry ) then
2780: LD_EXP 7
2784: PPUSH
2785: CALL_OW 301
2789: IFFALSE 2803
// Say ( Brian , DFb-Sol1-1a ) end ;
2791: LD_EXP 6
2795: PPUSH
2796: LD_STRING DFb-Sol1-1a
2798: PPUSH
2799: CALL_OW 88
// end ;
2803: END
// every 0 0$1 do var i ;
2804: GO 2806
2806: DISABLE
2807: LD_INT 0
2809: PPUSH
// begin enable ;
2810: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
2811: LD_ADDR_VAR 0 1
2815: PUSH
2816: LD_INT 22
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PUSH
2826: LD_INT 21
2828: PUSH
2829: LD_INT 3
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PUSH
2836: LD_INT 30
2838: PUSH
2839: LD_INT 31
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: LIST
2850: PPUSH
2851: CALL_OW 69
2855: PUSH
2856: FOR_IN
2857: IFFALSE 2888
// begin if See ( 1 , i ) then
2859: LD_INT 1
2861: PPUSH
2862: LD_VAR 0 1
2866: PPUSH
2867: CALL_OW 292
2871: IFFALSE 2886
// begin disable ;
2873: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
2874: LD_EXP 1
2878: PPUSH
2879: LD_STRING DX1-JMM-1
2881: PPUSH
2882: CALL_OW 88
// end ; end ;
2886: GO 2856
2888: POP
2889: POP
// end ;
2890: PPOPN 1
2892: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 11
2898: PPUSH
2899: CALL_OW 294
2903: IFFALSE 3206
2905: GO 2907
2907: DISABLE
2908: LD_INT 0
2910: PPUSH
2911: PPUSH
// begin DialogueOn ;
2912: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
2916: LD_INT 11
2918: PPUSH
2919: LD_INT 22
2921: PUSH
2922: LD_INT 3
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 21
2931: PUSH
2932: LD_INT 1
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: PPUSH
2943: CALL_OW 70
2947: PUSH
2948: LD_INT 1
2950: ARRAY
2951: PPUSH
2952: LD_STRING DX3-Rus1-1
2954: PPUSH
2955: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
2959: LD_EXP 1
2963: PPUSH
2964: LD_STRING DX3-JMM-1
2966: PPUSH
2967: CALL_OW 88
// DialogueOff ;
2971: CALL_OW 7
// wait ( [ 0 0$3 , 0 0$2 , 0 0$1 ] [ Difficulty ] ) ;
2975: LD_INT 105
2977: PUSH
2978: LD_INT 70
2980: PUSH
2981: LD_INT 35
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: PUSH
2989: LD_OWVAR 67
2993: ARRAY
2994: PPUSH
2995: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
3006: LD_ADDR_VAR 0 1
3010: PUSH
3011: LD_INT 22
3013: PUSH
3014: LD_INT 3
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 21
3023: PUSH
3024: LD_INT 2
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 58
3033: PUSH
3034: EMPTY
3035: LIST
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: LIST
3041: PPUSH
3042: CALL_OW 69
3046: PUSH
3047: FOR_IN
3048: IFFALSE 3118
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
3050: LD_ADDR_VAR 0 2
3054: PUSH
3055: LD_INT 22
3057: PUSH
3058: LD_INT 3
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 21
3067: PUSH
3068: LD_INT 1
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: LD_INT 25
3077: PUSH
3078: LD_INT 3
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: LIST
3089: PPUSH
3090: CALL_OW 69
3094: PUSH
3095: FOR_IN
3096: IFFALSE 3114
// begin ComEnterUnit ( j , i ) ;
3098: LD_VAR 0 2
3102: PPUSH
3103: LD_VAR 0 1
3107: PPUSH
3108: CALL_OW 120
// end ;
3112: GO 3095
3114: POP
3115: POP
// end ;
3116: GO 3047
3118: POP
3119: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
3120: LD_INT 22
3122: PUSH
3123: LD_INT 3
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: LD_INT 21
3132: PUSH
3133: LD_INT 2
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 58
3142: PUSH
3143: EMPTY
3144: LIST
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: PUSH
3156: LD_INT 0
3158: EQUAL
3159: PUSH
3160: LD_INT 22
3162: PUSH
3163: LD_INT 3
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 21
3172: PUSH
3173: LD_INT 1
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: LD_INT 25
3182: PUSH
3183: LD_INT 3
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: LIST
3194: PPUSH
3195: CALL_OW 69
3199: PUSH
3200: LD_INT 0
3202: EQUAL
3203: OR
3204: IFFALSE 2999
// end ;
3206: PPOPN 2
3208: END
// every 0 0$1 trigger FilterUnitsInArea ( SouthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 do
3209: LD_INT 23
3211: PPUSH
3212: LD_INT 22
3214: PUSH
3215: LD_INT 3
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: LD_INT 21
3224: PUSH
3225: LD_INT 1
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 25
3234: PUSH
3235: LD_INT 3
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 70
3251: PUSH
3252: LD_INT 0
3254: EQUAL
3255: IFFALSE 3309
3257: GO 3259
3259: DISABLE
// begin if IsOK ( Bobby ) then
3260: LD_EXP 2
3264: PPUSH
3265: CALL_OW 302
3269: IFFALSE 3297
// begin Say ( Bobby , DX2-Bobby-1 ) ;
3271: LD_EXP 2
3275: PPUSH
3276: LD_STRING DX2-Bobby-1
3278: PPUSH
3279: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
3283: LD_EXP 1
3287: PPUSH
3288: LD_STRING DX2-JMM-1a
3290: PPUSH
3291: CALL_OW 88
// end else
3295: GO 3309
// begin Say ( JMM , DX2-JMM-1 ) ;
3297: LD_EXP 1
3301: PPUSH
3302: LD_STRING DX2-JMM-1
3304: PPUSH
3305: CALL_OW 88
// end ; end ;
3309: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 ;
3310: LD_INT 22
3312: PUSH
3313: LD_INT 1
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PUSH
3320: LD_INT 23
3322: PUSH
3323: LD_INT 3
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: PUSH
3330: LD_INT 21
3332: PUSH
3333: LD_INT 2
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: PUSH
3340: LD_INT 34
3342: PUSH
3343: LD_INT 42
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: PPUSH
3356: CALL_OW 69
3360: PUSH
3361: LD_INT 1
3363: GREATEREQUAL
3364: IFFALSE 3788
3366: GO 3368
3368: DISABLE
3369: LD_INT 0
3371: PPUSH
3372: PPUSH
3373: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
3374: LD_ADDR_VAR 0 1
3378: PUSH
3379: LD_INT 22
3381: PUSH
3382: LD_INT 1
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 23
3391: PUSH
3392: LD_INT 3
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: LD_INT 21
3401: PUSH
3402: LD_INT 2
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: PUSH
3409: LD_INT 34
3411: PUSH
3412: LD_INT 42
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: PPUSH
3425: CALL_OW 69
3429: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: LD_INT 22
3437: PUSH
3438: LD_INT 1
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PUSH
3445: LD_INT 21
3447: PUSH
3448: LD_INT 1
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 26
3457: PUSH
3458: LD_INT 1
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 69
3474: PUSH
3475: LD_EXP 1
3479: PUSH
3480: LD_EXP 3
3484: PUSH
3485: LD_EXP 2
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: LIST
3494: DIFF
3495: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_INT 22
3503: PUSH
3504: LD_INT 1
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PUSH
3511: LD_INT 21
3513: PUSH
3514: LD_INT 1
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: LD_INT 26
3523: PUSH
3524: LD_INT 2
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: PUSH
3531: EMPTY
3532: LIST
3533: LIST
3534: LIST
3535: PPUSH
3536: CALL_OW 69
3540: PUSH
3541: LD_EXP 4
3545: PUSH
3546: EMPTY
3547: LIST
3548: DIFF
3549: ST_TO_ADDR
// Say ( JMM , DX2a-JMM-1 ) ;
3550: LD_EXP 1
3554: PPUSH
3555: LD_STRING DX2a-JMM-1
3557: PPUSH
3558: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
3562: LD_EXP 2
3566: PPUSH
3567: CALL_OW 310
3571: PUSH
3572: LD_VAR 0 1
3576: PUSH
3577: LD_INT 1
3579: ARRAY
3580: EQUAL
3581: IFFALSE 3595
// Say ( Bobby , DX2a-Bobby-1 ) ;
3583: LD_EXP 2
3587: PPUSH
3588: LD_STRING DX2a-Bobby-1
3590: PPUSH
3591: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
3595: LD_EXP 3
3599: PPUSH
3600: CALL_OW 310
3604: PUSH
3605: LD_VAR 0 1
3609: PUSH
3610: LD_INT 1
3612: ARRAY
3613: EQUAL
3614: IFFALSE 3628
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
3616: LD_EXP 3
3620: PPUSH
3621: LD_STRING DX2a-Cyrus-1
3623: PPUSH
3624: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
3628: LD_EXP 4
3632: PPUSH
3633: CALL_OW 310
3637: PUSH
3638: LD_VAR 0 1
3642: PUSH
3643: LD_INT 1
3645: ARRAY
3646: EQUAL
3647: IFFALSE 3661
// Say ( Lisa , DX2a-Lisa-1 ) ;
3649: LD_EXP 4
3653: PPUSH
3654: LD_STRING DX2a-Lisa-1
3656: PPUSH
3657: CALL_OW 88
// if IsInUnit ( temp1 [ 1 ] ) = tmp [ 1 ] then
3661: LD_VAR 0 2
3665: PUSH
3666: LD_INT 1
3668: ARRAY
3669: PPUSH
3670: CALL_OW 310
3674: PUSH
3675: LD_VAR 0 1
3679: PUSH
3680: LD_INT 1
3682: ARRAY
3683: EQUAL
3684: IFFALSE 3702
// Say ( temp1 [ 1 ] , DX2a-Sol1-1 ) ;
3686: LD_VAR 0 2
3690: PUSH
3691: LD_INT 1
3693: ARRAY
3694: PPUSH
3695: LD_STRING DX2a-Sol1-1
3697: PPUSH
3698: CALL_OW 88
// if IsInUnit ( temp2 [ 2 ] ) = tmp [ 1 ] then
3702: LD_VAR 0 3
3706: PUSH
3707: LD_INT 2
3709: ARRAY
3710: PPUSH
3711: CALL_OW 310
3715: PUSH
3716: LD_VAR 0 1
3720: PUSH
3721: LD_INT 1
3723: ARRAY
3724: EQUAL
3725: IFFALSE 3743
// Say ( temp2 [ 2 ] , DX2a-FSol1-1 ) ;
3727: LD_VAR 0 3
3731: PUSH
3732: LD_INT 2
3734: ARRAY
3735: PPUSH
3736: LD_STRING DX2a-FSol1-1
3738: PPUSH
3739: CALL_OW 88
// if IsInUnit ( JMM ) = tmp [ 1 ] then
3743: LD_EXP 1
3747: PPUSH
3748: CALL_OW 310
3752: PUSH
3753: LD_VAR 0 1
3757: PUSH
3758: LD_INT 1
3760: ARRAY
3761: EQUAL
3762: IFFALSE 3776
// Say ( JMM , DX2b-JMM-1 ) ;
3764: LD_EXP 1
3768: PPUSH
3769: LD_STRING DX2b-JMM-1
3771: PPUSH
3772: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
3776: LD_EXP 1
3780: PPUSH
3781: LD_STRING DX2a-JMM-2
3783: PPUSH
3784: CALL_OW 88
// end ;
3788: PPOPN 3
3790: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
3791: LD_INT 1
3793: PPUSH
3794: CALL_OW 255
3798: PUSH
3799: LD_INT 1
3801: EQUAL
3802: PUSH
3803: LD_INT 10
3805: PPUSH
3806: CALL_OW 255
3810: PUSH
3811: LD_INT 1
3813: EQUAL
3814: OR
3815: IFFALSE 3875
3817: GO 3819
3819: DISABLE
// begin DialogueOn ;
3820: CALL_OW 6
// SayRadio ( JMM , D3-JMM-1 ) ;
3824: LD_EXP 1
3828: PPUSH
3829: LD_STRING D3-JMM-1
3831: PPUSH
3832: CALL_OW 94
// SayRadio ( Powell , D3-Pow-1 ) ;
3836: LD_EXP 9
3840: PPUSH
3841: LD_STRING D3-Pow-1
3843: PPUSH
3844: CALL_OW 94
// if IsOK ( Cyrus ) then
3848: LD_EXP 3
3852: PPUSH
3853: CALL_OW 302
3857: IFFALSE 3871
// Say ( Cyrus , D3-Cyrus-1 ) ;
3859: LD_EXP 3
3863: PPUSH
3864: LD_STRING D3-Cyrus-1
3866: PPUSH
3867: CALL_OW 88
// DialogueOff ;
3871: CALL_OW 7
// end ;
3875: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , i ;
3876: LD_INT 1
3878: PPUSH
3879: CALL_OW 255
3883: PUSH
3884: LD_INT 1
3886: EQUAL
3887: PUSH
3888: LD_INT 10
3890: PPUSH
3891: CALL_OW 255
3895: PUSH
3896: LD_INT 1
3898: EQUAL
3899: AND
3900: IFFALSE 5102
3902: GO 3904
3904: DISABLE
3905: LD_INT 0
3907: PPUSH
3908: PPUSH
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff [ JMM ] ;
3909: LD_ADDR_VAR 0 1
3913: PUSH
3914: LD_INT 22
3916: PUSH
3917: LD_INT 1
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PUSH
3924: LD_INT 25
3926: PUSH
3927: LD_INT 2
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PUSH
3934: EMPTY
3935: LIST
3936: LIST
3937: PPUSH
3938: CALL_OW 69
3942: PUSH
3943: LD_EXP 1
3947: PUSH
3948: EMPTY
3949: LIST
3950: DIFF
3951: ST_TO_ADDR
// PrepareTigers ;
3952: CALL 12096 0 0
// DialogueOn ;
3956: CALL_OW 6
// SayRadio ( JMM , D3a-JMM-1 ) ;
3960: LD_EXP 1
3964: PPUSH
3965: LD_STRING D3a-JMM-1
3967: PPUSH
3968: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-1 ) ;
3972: LD_EXP 9
3976: PPUSH
3977: LD_STRING D3a-Pow-1
3979: PPUSH
3980: CALL_OW 94
// SayRadio ( JMM , D3a-JMM-2 ) ;
3984: LD_EXP 1
3988: PPUSH
3989: LD_STRING D3a-JMM-2
3991: PPUSH
3992: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
3996: LD_EXP 9
4000: PPUSH
4001: LD_STRING D3a-Pow-2
4003: PPUSH
4004: CALL_OW 94
// SayRadio ( JMM , D3a-JMM-3 ) ;
4008: LD_EXP 1
4012: PPUSH
4013: LD_STRING D3a-JMM-3
4015: PPUSH
4016: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
4020: LD_EXP 9
4024: PPUSH
4025: LD_STRING D3a-Pow-3
4027: PPUSH
4028: CALL_OW 94
// SayRadio ( JMM , D3a-JMM-4 ) ;
4032: LD_EXP 1
4036: PPUSH
4037: LD_STRING D3a-JMM-4
4039: PPUSH
4040: CALL_OW 94
// DialogueOff ;
4044: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4048: LD_STRING M2
4050: PPUSH
4051: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
4055: LD_EXP 1
4059: PPUSH
4060: LD_STRING D3b-JMM-1
4062: PPUSH
4063: CALL_OW 88
// wait ( 0 0$5 ) ;
4067: LD_INT 175
4069: PPUSH
4070: CALL_OW 67
// InGameOn ;
4074: CALL_OW 8
// PrepareRussianHeroes ;
4078: CALL 9908 0 0
// CenterNowOnUnits ( Mikhail ) ;
4082: LD_EXP 8
4086: PPUSH
4087: CALL_OW 87
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , Mikhail ) ;
4091: LD_INT 22
4093: PUSH
4094: LD_INT 1
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: PUSH
4101: LD_INT 21
4103: PUSH
4104: LD_INT 1
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PPUSH
4115: CALL_OW 69
4119: PPUSH
4120: LD_EXP 8
4124: PPUSH
4125: CALL_OW 119
// ComTurnUnit ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) ) ;
4129: LD_EXP 8
4133: PPUSH
4134: LD_INT 22
4136: PUSH
4137: LD_INT 1
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: LD_INT 25
4146: PUSH
4147: LD_INT 2
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: PUSH
4158: LD_INT 1
4160: ARRAY
4161: PPUSH
4162: CALL_OW 69
4166: PPUSH
4167: CALL_OW 119
// Say ( Mikhail , D4-Mikh-1 ) ;
4171: LD_EXP 8
4175: PPUSH
4176: LD_STRING D4-Mikh-1
4178: PPUSH
4179: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
4183: LD_VAR 0 1
4187: PUSH
4188: LD_INT 1
4190: ARRAY
4191: PPUSH
4192: CALL_OW 258
4196: PUSH
4197: LD_INT 1
4199: EQUAL
4200: IFFALSE 4218
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
4202: LD_VAR 0 1
4206: PUSH
4207: LD_INT 1
4209: ARRAY
4210: PPUSH
4211: LD_STRING D4-Sol1-1
4213: PPUSH
4214: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
4218: LD_VAR 0 1
4222: PUSH
4223: LD_INT 1
4225: ARRAY
4226: PPUSH
4227: CALL_OW 258
4231: PUSH
4232: LD_INT 2
4234: EQUAL
4235: IFFALSE 4253
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
4237: LD_VAR 0 1
4241: PUSH
4242: LD_INT 1
4244: ARRAY
4245: PPUSH
4246: LD_STRING D4-FSol1-1
4248: PPUSH
4249: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
4253: LD_EXP 8
4257: PPUSH
4258: LD_STRING D4-Mikh-2
4260: PPUSH
4261: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
4265: LD_VAR 0 1
4269: PUSH
4270: LD_INT 1
4272: ARRAY
4273: PPUSH
4274: CALL_OW 258
4278: PUSH
4279: LD_INT 1
4281: EQUAL
4282: IFFALSE 4300
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
4284: LD_VAR 0 1
4288: PUSH
4289: LD_INT 1
4291: ARRAY
4292: PPUSH
4293: LD_STRING D4-Sol1-2
4295: PPUSH
4296: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
4300: LD_VAR 0 1
4304: PUSH
4305: LD_INT 1
4307: ARRAY
4308: PPUSH
4309: CALL_OW 258
4313: PUSH
4314: LD_INT 2
4316: EQUAL
4317: IFFALSE 4335
// Say ( temp [ 2 ] , D4-FSol1-2 ) ;
4319: LD_VAR 0 1
4323: PUSH
4324: LD_INT 2
4326: ARRAY
4327: PPUSH
4328: LD_STRING D4-FSol1-2
4330: PPUSH
4331: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
4335: LD_EXP 8
4339: PPUSH
4340: LD_STRING D4-Mikh-3
4342: PPUSH
4343: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
4347: LD_VAR 0 1
4351: PUSH
4352: LD_INT 1
4354: ARRAY
4355: PPUSH
4356: CALL_OW 258
4360: PUSH
4361: LD_INT 1
4363: EQUAL
4364: IFFALSE 4382
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
4366: LD_VAR 0 1
4370: PUSH
4371: LD_INT 1
4373: ARRAY
4374: PPUSH
4375: LD_STRING D4-Sol1-3
4377: PPUSH
4378: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
4382: LD_VAR 0 1
4386: PUSH
4387: LD_INT 1
4389: ARRAY
4390: PPUSH
4391: CALL_OW 258
4395: PUSH
4396: LD_INT 2
4398: EQUAL
4399: IFFALSE 4417
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
4401: LD_VAR 0 1
4405: PUSH
4406: LD_INT 1
4408: ARRAY
4409: PPUSH
4410: LD_STRING D4-FSol1-3
4412: PPUSH
4413: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
4417: LD_EXP 8
4421: PPUSH
4422: LD_STRING D4-Mikh-4
4424: PPUSH
4425: CALL_OW 88
// case query ( Qs1 ) of 1 :
4429: LD_STRING Qs1
4431: PPUSH
4432: CALL_OW 97
4436: PUSH
4437: LD_INT 1
4439: DOUBLE
4440: EQUAL
4441: IFTRUE 4445
4443: GO 4480
4445: POP
// begin InGameOff ;
4446: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4450: LD_INT 1
4452: PPUSH
4453: LD_INT 6
4455: PPUSH
4456: LD_INT 2
4458: PPUSH
4459: LD_INT 1
4461: PPUSH
4462: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
4466: LD_EXP 8
4470: PPUSH
4471: LD_INT 17
4473: PPUSH
4474: CALL_OW 113
// end ; 2 :
4478: GO 5102
4480: LD_INT 2
4482: DOUBLE
4483: EQUAL
4484: IFTRUE 4488
4486: GO 5067
4488: POP
// begin repeat wait ( 0 0$1 ) ;
4489: LD_INT 35
4491: PPUSH
4492: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
4496: LD_VAR 0 1
4500: PUSH
4501: LD_INT 1
4503: ARRAY
4504: PPUSH
4505: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
4509: LD_VAR 0 1
4513: PUSH
4514: LD_INT 1
4516: ARRAY
4517: PPUSH
4518: LD_EXP 1
4522: PPUSH
4523: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
4527: LD_EXP 8
4531: PPUSH
4532: LD_EXP 1
4536: PPUSH
4537: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
4541: LD_EXP 1
4545: PPUSH
4546: LD_EXP 8
4550: PPUSH
4551: CALL_OW 296
4555: PUSH
4556: LD_INT 5
4558: LESS
4559: IFFALSE 4489
// ComTurnUnit ( Mikhail , JMM ) ;
4561: LD_EXP 8
4565: PPUSH
4566: LD_EXP 1
4570: PPUSH
4571: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
4575: LD_EXP 1
4579: PPUSH
4580: LD_STRING D4b-JMM-1
4582: PPUSH
4583: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
4587: LD_EXP 8
4591: PPUSH
4592: LD_STRING D4b-Mikh-1
4594: PPUSH
4595: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
4599: LD_EXP 1
4603: PPUSH
4604: LD_STRING D4b-JMM-2
4606: PPUSH
4607: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
4611: LD_EXP 8
4615: PPUSH
4616: LD_STRING D4b-Mikh-2
4618: PPUSH
4619: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
4623: LD_EXP 1
4627: PPUSH
4628: LD_STRING D4b-JMM-3
4630: PPUSH
4631: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
4635: LD_EXP 8
4639: PPUSH
4640: LD_STRING D4b-Mikh-3
4642: PPUSH
4643: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
4647: LD_EXP 1
4651: PPUSH
4652: LD_STRING D4b-JMM-4
4654: PPUSH
4655: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
4659: LD_EXP 8
4663: PPUSH
4664: LD_STRING D4b-Mikh-4
4666: PPUSH
4667: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
4671: LD_EXP 1
4675: PPUSH
4676: LD_STRING D4b-JMM-5
4678: PPUSH
4679: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
4683: LD_EXP 8
4687: PPUSH
4688: LD_STRING D4b-Mikh-5
4690: PPUSH
4691: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
4695: LD_EXP 1
4699: PPUSH
4700: LD_STRING D4b-JMM-6
4702: PPUSH
4703: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
4707: LD_EXP 8
4711: PPUSH
4712: LD_STRING D4b-Mikh-6
4714: PPUSH
4715: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
4719: LD_EXP 1
4723: PPUSH
4724: LD_STRING D4b-JMM-7
4726: PPUSH
4727: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
4731: LD_EXP 8
4735: PPUSH
4736: LD_STRING D4b-Mikh-7
4738: PPUSH
4739: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
4743: LD_VAR 0 1
4747: PUSH
4748: LD_INT 1
4750: ARRAY
4751: PPUSH
4752: CALL_OW 258
4756: PUSH
4757: LD_INT 1
4759: EQUAL
4760: IFFALSE 4778
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
4762: LD_VAR 0 1
4766: PUSH
4767: LD_INT 1
4769: ARRAY
4770: PPUSH
4771: LD_STRING D4b-Sol1-7
4773: PPUSH
4774: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
4778: LD_VAR 0 1
4782: PUSH
4783: LD_INT 1
4785: ARRAY
4786: PPUSH
4787: CALL_OW 258
4791: PUSH
4792: LD_INT 2
4794: EQUAL
4795: IFFALSE 4813
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
4797: LD_VAR 0 1
4801: PUSH
4802: LD_INT 1
4804: ARRAY
4805: PPUSH
4806: LD_STRING D4b-FSol1-7
4808: PPUSH
4809: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
4813: LD_EXP 1
4817: PPUSH
4818: LD_STRING D4b-JMM-7
4820: PPUSH
4821: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
4825: LD_VAR 0 1
4829: PUSH
4830: LD_INT 1
4832: ARRAY
4833: PPUSH
4834: CALL_OW 258
4838: PUSH
4839: LD_INT 1
4841: EQUAL
4842: IFFALSE 4860
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
4844: LD_VAR 0 1
4848: PUSH
4849: LD_INT 1
4851: ARRAY
4852: PPUSH
4853: LD_STRING D4b-Sol1-8
4855: PPUSH
4856: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
4860: LD_VAR 0 1
4864: PUSH
4865: LD_INT 1
4867: ARRAY
4868: PPUSH
4869: CALL_OW 258
4873: PUSH
4874: LD_INT 2
4876: EQUAL
4877: IFFALSE 4895
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
4879: LD_VAR 0 1
4883: PUSH
4884: LD_INT 1
4886: ARRAY
4887: PPUSH
4888: LD_STRING D4b-FSol1-8
4890: PPUSH
4891: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
4895: LD_EXP 1
4899: PPUSH
4900: LD_STRING D4b-JMM-9
4902: PPUSH
4903: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
4907: LD_EXP 8
4911: PPUSH
4912: LD_INT 1
4914: PPUSH
4915: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
4919: LD_ADDR_VAR 0 2
4923: PUSH
4924: LD_INT 22
4926: PUSH
4927: LD_INT 1
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: PPUSH
4937: CALL_OW 69
4941: PUSH
4942: FOR_IN
4943: IFFALSE 4956
// ComFree ( i ) ;
4945: LD_VAR 0 2
4949: PPUSH
4950: CALL_OW 139
4954: GO 4942
4956: POP
4957: POP
// repeat wait ( 0 0$1 ) ;
4958: LD_INT 35
4960: PPUSH
4961: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
4965: LD_EXP 8
4969: PPUSH
4970: CALL_OW 87
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
4974: LD_EXP 8
4978: PPUSH
4979: LD_INT 1
4981: PPUSH
4982: CALL_OW 296
4986: PUSH
4987: LD_EXP 8
4991: PPUSH
4992: LD_INT 10
4994: PPUSH
4995: CALL_OW 296
4999: LESS
5000: IFFALSE 5016
// begin ComEnterUnit ( Mikhail , dep1 ) ;
5002: LD_EXP 8
5006: PPUSH
5007: LD_INT 1
5009: PPUSH
5010: CALL_OW 120
// end else
5014: GO 5028
// begin ComEnterUnit ( Mikhail , dep2 ) ;
5016: LD_EXP 8
5020: PPUSH
5021: LD_INT 10
5023: PPUSH
5024: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
5028: LD_EXP 8
5032: PPUSH
5033: CALL_OW 310
5037: IFFALSE 4958
// mikhailDepot = IsInUnit ( Mikhail ) ;
5039: LD_ADDR_EXP 22
5043: PUSH
5044: LD_EXP 8
5048: PPUSH
5049: CALL_OW 310
5053: ST_TO_ADDR
// InGameOff ;
5054: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
5058: LD_STRING M3
5060: PPUSH
5061: CALL_OW 337
// end ; 3 :
5065: GO 5102
5067: LD_INT 3
5069: DOUBLE
5070: EQUAL
5071: IFTRUE 5075
5073: GO 5101
5075: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
5076: LD_EXP 8
5080: PPUSH
5081: LD_INT 17
5083: PPUSH
5084: CALL_OW 113
// wait ( 0 0$3 ) ;
5088: LD_INT 105
5090: PPUSH
5091: CALL_OW 67
// InGameOff ;
5095: CALL_OW 9
// end ; end ;
5099: GO 5102
5101: POP
// end ;
5102: PPOPN 2
5104: END
// every 5 5$0 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do
5105: LD_INT 1
5107: PPUSH
5108: CALL_OW 255
5112: PUSH
5113: LD_INT 1
5115: EQUAL
5116: PUSH
5117: LD_INT 10
5119: PPUSH
5120: CALL_OW 255
5124: PUSH
5125: LD_INT 1
5127: EQUAL
5128: AND
5129: IFFALSE 5244
5131: GO 5133
5133: DISABLE
// begin PrepareCargoBays ;
5134: CALL 11056 0 0
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
5138: LD_EXP 15
5142: PUSH
5143: LD_EXP 16
5147: PUSH
5148: LD_EXP 17
5152: PUSH
5153: LD_EXP 18
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: PPUSH
5164: LD_INT 53
5166: PPUSH
5167: LD_INT 16
5169: PPUSH
5170: CALL_OW 111
// wait ( 0 0$5 ) ;
5174: LD_INT 175
5176: PPUSH
5177: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
5181: LD_EXP 17
5185: PPUSH
5186: LD_STRING D5-Rus2-1
5188: PPUSH
5189: CALL_OW 88
// wait ( 0 0$7 ) ;
5193: LD_INT 245
5195: PPUSH
5196: CALL_OW 67
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
5200: LD_EXP 15
5204: PUSH
5205: LD_EXP 16
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PPUSH
5214: LD_INT 7
5216: PPUSH
5217: LD_INT 9
5219: PPUSH
5220: CALL_OW 111
// Say ( driver1 , D5-Rus2-1a ) ;
5224: LD_EXP 17
5228: PPUSH
5229: LD_STRING D5-Rus2-1a
5231: PPUSH
5232: CALL_OW 88
// cargoEscape = 1 ;
5236: LD_ADDR_EXP 19
5240: PUSH
5241: LD_INT 1
5243: ST_TO_ADDR
// end ;
5244: END
// every 0 0$1 trigger cargoEscape > 0 do
5245: LD_EXP 19
5249: PUSH
5250: LD_INT 0
5252: GREATER
5253: IFFALSE 5379
5255: GO 5257
5257: DISABLE
// begin enable ;
5258: ENABLE
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
5259: LD_EXP 15
5263: PPUSH
5264: LD_INT 13
5266: PPUSH
5267: CALL_OW 308
5271: PUSH
5272: LD_EXP 17
5276: PPUSH
5277: LD_INT 13
5279: PPUSH
5280: CALL_OW 308
5284: OR
5285: IFFALSE 5319
// begin RemoveUnit ( cargo1 ) ;
5287: LD_EXP 15
5291: PPUSH
5292: CALL_OW 64
// RemoveUnit ( driver1 ) ;
5296: LD_EXP 17
5300: PPUSH
5301: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
5305: LD_ADDR_EXP 19
5309: PUSH
5310: LD_EXP 19
5314: PUSH
5315: LD_INT 1
5317: PLUS
5318: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
5319: LD_EXP 16
5323: PPUSH
5324: LD_INT 13
5326: PPUSH
5327: CALL_OW 308
5331: PUSH
5332: LD_EXP 18
5336: PPUSH
5337: LD_INT 13
5339: PPUSH
5340: CALL_OW 308
5344: OR
5345: IFFALSE 5379
// begin RemoveUnit ( cargo2 ) ;
5347: LD_EXP 16
5351: PPUSH
5352: CALL_OW 64
// RemoveUnit ( driver2 ) ;
5356: LD_EXP 18
5360: PPUSH
5361: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
5365: LD_ADDR_EXP 19
5369: PUSH
5370: LD_EXP 19
5374: PUSH
5375: LD_INT 1
5377: PLUS
5378: ST_TO_ADDR
// end ; end ;
5379: END
// every 0 0$1 trigger cargoEscape > 1 do
5380: LD_EXP 19
5384: PUSH
5385: LD_INT 1
5387: GREATER
5388: IFFALSE 5479
5390: GO 5392
5392: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
5393: LD_INT 22
5395: PUSH
5396: LD_INT 1
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: PUSH
5403: LD_INT 26
5405: PUSH
5406: LD_INT 1
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PPUSH
5417: CALL_OW 69
5421: PUSH
5422: LD_INT 2
5424: PPUSH
5425: LD_INT 22
5427: PUSH
5428: LD_INT 1
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: LD_INT 26
5437: PUSH
5438: LD_INT 1
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: PPUSH
5449: CALL_OW 69
5453: PPUSH
5454: CALL_OW 12
5458: ARRAY
5459: PPUSH
5460: LD_STRING D5a-Sol1-1
5462: PPUSH
5463: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
5467: LD_EXP 1
5471: PPUSH
5472: LD_STRING D5a-JMM-1
5474: PPUSH
5475: CALL_OW 88
// end ;
5479: END
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 do
5480: LD_INT 1
5482: PPUSH
5483: CALL_OW 255
5487: PUSH
5488: LD_INT 1
5490: EQUAL
5491: PUSH
5492: LD_INT 10
5494: PPUSH
5495: CALL_OW 255
5499: PUSH
5500: LD_INT 1
5502: EQUAL
5503: AND
5504: PUSH
5505: LD_EXP 19
5509: PUSH
5510: LD_INT 1
5512: EQUAL
5513: AND
5514: IFFALSE 5605
5516: GO 5518
5518: DISABLE
// begin wait ( [ 9 9$0 , 8 8$0 , 7 7$0 ] [ Difficulty ] ) ;
5519: LD_INT 18900
5521: PUSH
5522: LD_INT 16800
5524: PUSH
5525: LD_INT 14700
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: PUSH
5533: LD_OWVAR 67
5537: ARRAY
5538: PPUSH
5539: CALL_OW 67
// if cargoEscape = 1 then
5543: LD_EXP 19
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5605
// begin SayRadio ( Powell , D6-Pow-1 ) ;
5553: LD_EXP 9
5557: PPUSH
5558: LD_STRING D6-Pow-1
5560: PPUSH
5561: CALL_OW 94
// SayRadio ( JMM , D6-JMM-1 ) ;
5565: LD_EXP 1
5569: PPUSH
5570: LD_STRING D6-JMM-1
5572: PPUSH
5573: CALL_OW 94
// SayRadio ( Powell , D6-Pow-2 ) ;
5577: LD_EXP 9
5581: PPUSH
5582: LD_STRING D6-Pow-2
5584: PPUSH
5585: CALL_OW 94
// SayRadio ( JMM , D6-JMM-2 ) ;
5589: LD_EXP 1
5593: PPUSH
5594: LD_STRING D6-JMM-2
5596: PPUSH
5597: CALL_OW 94
// FinishMission ;
5601: CALL 8754 0 0
// end ; end ;
5605: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
5606: LD_INT 1
5608: PPUSH
5609: CALL_OW 255
5613: PUSH
5614: LD_INT 1
5616: EQUAL
5617: PUSH
5618: LD_INT 10
5620: PPUSH
5621: CALL_OW 255
5625: PUSH
5626: LD_INT 1
5628: EQUAL
5629: AND
5630: PUSH
5631: LD_EXP 19
5635: PUSH
5636: LD_INT 1
5638: GREATER
5639: AND
5640: IFFALSE 5787
5642: GO 5644
5644: DISABLE
5645: LD_INT 0
5647: PPUSH
// begin wait ( [ 9 9$0 , 8 8$0 , 7 7$0 ] [ Difficulty ] ) ;
5648: LD_INT 18900
5650: PUSH
5651: LD_INT 16800
5653: PUSH
5654: LD_INT 14700
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: LIST
5661: PUSH
5662: LD_OWVAR 67
5666: ARRAY
5667: PPUSH
5668: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
5672: LD_INT 1
5674: PUSH
5675: LD_INT 2
5677: PUSH
5678: LD_INT 3
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: PUSH
5686: LD_OWVAR 67
5690: ARRAY
5691: PPUSH
5692: LD_INT 13
5694: PPUSH
5695: CALL 11319 0 2
// lastBattle = 1 ;
5699: LD_ADDR_EXP 26
5703: PUSH
5704: LD_INT 1
5706: ST_TO_ADDR
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
5707: LD_ADDR_VAR 0 1
5711: PUSH
5712: LD_INT 26
5714: PPUSH
5715: LD_INT 22
5717: PUSH
5718: LD_INT 3
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: LD_INT 21
5727: PUSH
5728: LD_INT 1
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 26
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: LIST
5749: PPUSH
5750: CALL_OW 70
5754: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
5755: LD_VAR 0 1
5759: PUSH
5760: LD_INT 1
5762: ARRAY
5763: PPUSH
5764: LD_STRING D9-Rus3-1
5766: PPUSH
5767: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
5771: LD_VAR 0 1
5775: PUSH
5776: LD_INT 2
5778: ARRAY
5779: PPUSH
5780: LD_STRING D9-Russ-1
5782: PPUSH
5783: CALL_OW 88
// end ;
5787: PPOPN 1
5789: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
5790: LD_EXP 26
5794: PUSH
5795: LD_INT 1
5797: EQUAL
5798: PUSH
5799: LD_INT 26
5801: PPUSH
5802: LD_INT 22
5804: PUSH
5805: LD_INT 3
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: LD_INT 21
5814: PUSH
5815: LD_INT 1
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PPUSH
5826: CALL_OW 70
5830: PUSH
5831: LD_INT 0
5833: EQUAL
5834: AND
5835: IFFALSE 5892
5837: GO 5839
5839: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
5840: LD_EXP 9
5844: PPUSH
5845: LD_STRING D6-Pow-1
5847: PPUSH
5848: CALL_OW 94
// SayRadio ( JMM , D6-JMM-1 ) ;
5852: LD_EXP 1
5856: PPUSH
5857: LD_STRING D6-JMM-1
5859: PPUSH
5860: CALL_OW 94
// SayRadio ( Powell , D6-Pow-2 ) ;
5864: LD_EXP 9
5868: PPUSH
5869: LD_STRING D6-Pow-2
5871: PPUSH
5872: CALL_OW 94
// SayRadio ( JMM , D6-JMM-2 ) ;
5876: LD_EXP 1
5880: PPUSH
5881: LD_STRING D6-JMM-2
5883: PPUSH
5884: CALL_OW 94
// FinishMission ;
5888: CALL 8754 0 0
// end ;
5892: END
// every 0 0$1 trigger GetLives ( dep1 ) < 1000 or GetLives ( dep2 ) < 1000 do
5893: LD_INT 1
5895: PPUSH
5896: CALL_OW 256
5900: PUSH
5901: LD_INT 1000
5903: LESS
5904: PUSH
5905: LD_INT 10
5907: PPUSH
5908: CALL_OW 256
5912: PUSH
5913: LD_INT 1000
5915: LESS
5916: OR
5917: IFFALSE 5934
5919: GO 5921
5921: DISABLE
// Say ( JMM ,  D8-JMM-1 ) ;
5922: LD_EXP 1
5926: PPUSH
5927: LD_STRING  D8-JMM-1
5929: PPUSH
5930: CALL_OW 88
5934: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) do
5935: LD_EXP 8
5939: PPUSH
5940: CALL_OW 310
5944: IFFALSE 5958
5946: GO 5948
5948: DISABLE
// begin mikhailInBase = 1 ;
5949: LD_ADDR_EXP 21
5953: PUSH
5954: LD_INT 1
5956: ST_TO_ADDR
// enable ;
5957: ENABLE
// end ;
5958: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
5959: LD_EXP 8
5963: PPUSH
5964: LD_INT 25
5966: PPUSH
5967: CALL_OW 308
5971: PUSH
5972: LD_EXP 21
5976: PUSH
5977: LD_INT 1
5979: EQUAL
5980: AND
5981: PUSH
5982: LD_EXP 8
5986: PPUSH
5987: CALL_OW 255
5991: PUSH
5992: LD_INT 1
5994: EQUAL
5995: AND
5996: IFFALSE 6326
5998: GO 6000
6000: DISABLE
// begin mikhailInBase = 4 ;
6001: LD_ADDR_EXP 21
6005: PUSH
6006: LD_INT 4
6008: ST_TO_ADDR
// enable ;
6009: ENABLE
// case query ( QMikh2 ) of 1 :
6010: LD_STRING QMikh2
6012: PPUSH
6013: CALL_OW 97
6017: PUSH
6018: LD_INT 1
6020: DOUBLE
6021: EQUAL
6022: IFTRUE 6026
6024: GO 6093
6026: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
6027: LD_INT 1
6029: PPUSH
6030: LD_INT 6
6032: PPUSH
6033: LD_INT 2
6035: PPUSH
6036: LD_INT 1
6038: PPUSH
6039: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
6043: LD_EXP 8
6047: PPUSH
6048: LD_INT 6
6050: PPUSH
6051: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6055: LD_EXP 8
6059: PPUSH
6060: CALL_OW 122
// wait ( 0 0$1 ) ;
6064: LD_INT 35
6066: PPUSH
6067: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
6071: LD_EXP 8
6075: PPUSH
6076: LD_INT 17
6078: PPUSH
6079: CALL_OW 113
// mikhailInbase = 0 ;
6083: LD_ADDR_EXP 21
6087: PUSH
6088: LD_INT 0
6090: ST_TO_ADDR
// end ; 2 :
6091: GO 6326
6093: LD_INT 2
6095: DOUBLE
6096: EQUAL
6097: IFTRUE 6101
6099: GO 6266
6101: POP
// begin mikhailInBase = 2 ;
6102: LD_ADDR_EXP 21
6106: PUSH
6107: LD_INT 2
6109: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
6110: LD_EXP 8
6114: PPUSH
6115: LD_INT 6
6117: PPUSH
6118: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6122: LD_EXP 8
6126: PPUSH
6127: CALL_OW 122
// wait ( 0 0$1 ) ;
6131: LD_INT 35
6133: PPUSH
6134: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
6138: LD_EXP 8
6142: PPUSH
6143: LD_EXP 8
6147: PPUSH
6148: CALL_OW 250
6152: PUSH
6153: LD_INT 2
6155: PLUS
6156: PPUSH
6157: LD_EXP 8
6161: PPUSH
6162: CALL_OW 251
6166: PUSH
6167: LD_INT 2
6169: PLUS
6170: PPUSH
6171: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
6175: LD_EXP 8
6179: PPUSH
6180: LD_EXP 8
6184: PPUSH
6185: CALL_OW 250
6189: PUSH
6190: LD_INT 1
6192: PLUS
6193: PPUSH
6194: LD_EXP 8
6198: PPUSH
6199: CALL_OW 251
6203: PUSH
6204: LD_INT 2
6206: PLUS
6207: PPUSH
6208: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
6212: LD_EXP 8
6216: PPUSH
6217: LD_EXP 8
6221: PPUSH
6222: CALL_OW 250
6226: PUSH
6227: LD_INT 2
6229: PLUS
6230: PPUSH
6231: LD_EXP 8
6235: PPUSH
6236: CALL_OW 251
6240: PPUSH
6241: CALL_OW 171
// wait ( 0 0$5 ) ;
6245: LD_INT 175
6247: PPUSH
6248: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
6252: LD_EXP 8
6256: PPUSH
6257: LD_INT 25
6259: PPUSH
6260: CALL_OW 113
// end ; 3 :
6264: GO 6326
6266: LD_INT 3
6268: DOUBLE
6269: EQUAL
6270: IFTRUE 6274
6272: GO 6325
6274: POP
// begin SetSide ( Mikhail , 6 ) ;
6275: LD_EXP 8
6279: PPUSH
6280: LD_INT 6
6282: PPUSH
6283: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6287: LD_EXP 8
6291: PPUSH
6292: CALL_OW 122
// wait ( 0 0$1 ) ;
6296: LD_INT 35
6298: PPUSH
6299: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
6303: LD_EXP 8
6307: PPUSH
6308: LD_INT 17
6310: PPUSH
6311: CALL_OW 113
// mikhailInbase = 0 ;
6315: LD_ADDR_EXP 21
6319: PUSH
6320: LD_INT 0
6322: ST_TO_ADDR
// end ; end ;
6323: GO 6326
6325: POP
// end ;
6326: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 2 do
6327: LD_EXP 8
6331: PPUSH
6332: LD_INT 25
6334: PPUSH
6335: CALL_OW 308
6339: PUSH
6340: LD_EXP 21
6344: PUSH
6345: LD_INT 2
6347: EQUAL
6348: AND
6349: IFFALSE 6447
6351: GO 6353
6353: DISABLE
// begin enable ;
6354: ENABLE
// SetSide ( Mikhail , 1 ) ;
6355: LD_EXP 8
6359: PPUSH
6360: LD_INT 1
6362: PPUSH
6363: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
6367: LD_INT 35
6369: PPUSH
6370: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
6374: LD_EXP 8
6378: PPUSH
6379: LD_INT 1
6381: PPUSH
6382: CALL_OW 296
6386: PUSH
6387: LD_EXP 8
6391: PPUSH
6392: LD_INT 10
6394: PPUSH
6395: CALL_OW 296
6399: LESS
6400: IFFALSE 6416
// begin ComEnterUnit ( Mikhail , dep1 ) ;
6402: LD_EXP 8
6406: PPUSH
6407: LD_INT 1
6409: PPUSH
6410: CALL_OW 120
// end else
6414: GO 6428
// begin ComEnterUnit ( Mikhail , dep2 ) ;
6416: LD_EXP 8
6420: PPUSH
6421: LD_INT 10
6423: PPUSH
6424: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
6428: LD_EXP 8
6432: PPUSH
6433: CALL_OW 310
6437: IFFALSE 6367
// mikhailInBase = 1 ;
6439: LD_ADDR_EXP 21
6443: PUSH
6444: LD_INT 1
6446: ST_TO_ADDR
// end ;
6447: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) do
6448: LD_EXP 8
6452: PPUSH
6453: CALL_OW 310
6457: IFFALSE 6583
6459: GO 6461
6461: DISABLE
// begin enable ;
6462: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
6463: LD_INT 22
6465: PUSH
6466: LD_INT 1
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PUSH
6473: LD_INT 21
6475: PUSH
6476: LD_INT 1
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 91
6485: PUSH
6486: LD_EXP 8
6490: PPUSH
6491: CALL_OW 310
6495: PUSH
6496: LD_INT 10
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: LIST
6508: PPUSH
6509: CALL_OW 69
6513: PUSH
6514: LD_INT 1
6516: EQUAL
6517: IFFALSE 6583
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
6519: LD_INT 1
6521: PPUSH
6522: LD_INT 6
6524: PPUSH
6525: LD_INT 2
6527: PPUSH
6528: LD_INT 1
6530: PPUSH
6531: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
6535: LD_EXP 8
6539: PPUSH
6540: LD_INT 6
6542: PPUSH
6543: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
6547: LD_EXP 8
6551: PPUSH
6552: CALL_OW 122
// wait ( 0 0$1 ) ;
6556: LD_INT 35
6558: PPUSH
6559: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
6563: LD_EXP 8
6567: PPUSH
6568: LD_INT 17
6570: PPUSH
6571: CALL_OW 113
// mikhailStatus = 3 ;
6575: LD_ADDR_EXP 20
6579: PUSH
6580: LD_INT 3
6582: ST_TO_ADDR
// end ; end ;
6583: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 do var tmp ;
6584: LD_EXP 1
6588: PPUSH
6589: LD_EXP 22
6593: PPUSH
6594: CALL_OW 296
6598: PUSH
6599: LD_INT 5
6601: LESS
6602: PUSH
6603: LD_EXP 20
6607: PUSH
6608: LD_INT 3
6610: EQUAL
6611: AND
6612: IFFALSE 6828
6614: GO 6616
6616: DISABLE
6617: LD_INT 0
6619: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
6620: LD_ADDR_VAR 0 1
6624: PUSH
6625: LD_INT 22
6627: PUSH
6628: LD_INT 1
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 21
6637: PUSH
6638: LD_INT 1
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 26
6647: PUSH
6648: LD_INT 1
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: PPUSH
6660: CALL_OW 69
6664: PUSH
6665: LD_EXP 1
6669: PUSH
6670: EMPTY
6671: LIST
6672: DIFF
6673: ST_TO_ADDR
// DialogueOn ;
6674: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6678: LD_EXP 1
6682: PPUSH
6683: LD_STRING D7-JMM-1
6685: PPUSH
6686: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
6690: LD_VAR 0 1
6694: PUSH
6695: LD_INT 1
6697: ARRAY
6698: PPUSH
6699: LD_STRING D7-Sol1-1
6701: PPUSH
6702: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
6706: LD_EXP 1
6710: PPUSH
6711: LD_STRING D7-JMM-2
6713: PPUSH
6714: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
6718: LD_VAR 0 1
6722: PUSH
6723: LD_INT 1
6725: ARRAY
6726: PPUSH
6727: LD_STRING D7-Sol1-2
6729: PPUSH
6730: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
6734: LD_EXP 1
6738: PPUSH
6739: LD_STRING D7-JMM-3
6741: PPUSH
6742: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
6746: LD_VAR 0 1
6750: PUSH
6751: LD_INT 1
6753: ARRAY
6754: PPUSH
6755: LD_STRING D7-Sol1-3
6757: PPUSH
6758: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
6762: LD_EXP 3
6766: PPUSH
6767: CALL_OW 302
6771: PUSH
6772: LD_EXP 4
6776: PPUSH
6777: CALL_OW 302
6781: AND
6782: IFFALSE 6824
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
6784: LD_EXP 3
6788: PPUSH
6789: LD_STRING D7-Cyrus-3
6791: PPUSH
6792: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
6796: LD_VAR 0 1
6800: PUSH
6801: LD_INT 1
6803: ARRAY
6804: PPUSH
6805: LD_STRING D7-Sol1-4
6807: PPUSH
6808: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
6812: LD_EXP 4
6816: PPUSH
6817: LD_STRING D7-Lisa-4
6819: PPUSH
6820: CALL_OW 88
// end ; DialogueOff ;
6824: CALL_OW 7
// end ;
6828: PPOPN 1
6830: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
6831: LD_EXP 8
6835: PPUSH
6836: LD_INT 17
6838: PPUSH
6839: CALL_OW 308
6843: PUSH
6844: LD_EXP 8
6848: PPUSH
6849: CALL_OW 255
6853: PUSH
6854: LD_INT 6
6856: EQUAL
6857: AND
6858: IFFALSE 6880
6860: GO 6862
6862: DISABLE
// begin mikhailStatus = 3 ;
6863: LD_ADDR_EXP 20
6867: PUSH
6868: LD_INT 3
6870: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
6871: LD_EXP 8
6875: PPUSH
6876: CALL_OW 64
// end ;
6880: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
6881: LD_EXP 20
6885: PUSH
6886: LD_INT 3
6888: EQUAL
6889: PUSH
6890: LD_EXP 8
6894: PPUSH
6895: CALL_OW 255
6899: PUSH
6900: LD_INT 6
6902: EQUAL
6903: AND
6904: IFFALSE 7032
6906: GO 6908
6908: DISABLE
6909: LD_INT 0
6911: PPUSH
6912: PPUSH
// begin enable ;
6913: ENABLE
// if IsOk ( Mikhail ) then
6914: LD_EXP 8
6918: PPUSH
6919: CALL_OW 302
6923: IFFALSE 7032
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
6925: LD_ADDR_VAR 0 2
6929: PUSH
6930: LD_EXP 8
6934: PPUSH
6935: LD_INT 22
6937: PUSH
6938: LD_INT 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 21
6947: PUSH
6948: LD_INT 1
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PPUSH
6959: CALL_OW 69
6963: PPUSH
6964: CALL 8472 0 2
6968: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
6969: LD_VAR 0 2
6973: PPUSH
6974: LD_EXP 8
6978: PPUSH
6979: CALL_OW 296
6983: PUSH
6984: LD_INT 8
6986: LESS
6987: IFFALSE 7032
// begin if GetSex ( attacker ) = sex_male then
6989: LD_VAR 0 2
6993: PPUSH
6994: CALL_OW 258
6998: PUSH
6999: LD_INT 1
7001: EQUAL
7002: IFFALSE 7019
// begin disable ;
7004: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: LD_STRING D7a-Sol1-1
7012: PPUSH
7013: CALL_OW 88
// end else
7017: GO 7032
// begin disable ;
7019: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
7020: LD_VAR 0 2
7024: PPUSH
7025: LD_STRING D7a-FSol1-1
7027: PPUSH
7028: CALL_OW 88
// end ; end ; end ; end ; end_of_file
7032: PPOPN 2
7034: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7035: LD_INT 0
7037: PPUSH
7038: PPUSH
7039: PPUSH
7040: PPUSH
// for i = 1 to count do
7041: LD_ADDR_VAR 0 8
7045: PUSH
7046: DOUBLE
7047: LD_INT 1
7049: DEC
7050: ST_TO_ADDR
7051: LD_VAR 0 6
7055: PUSH
7056: FOR_TO
7057: IFFALSE 7138
// begin uc_side = side ;
7059: LD_ADDR_OWVAR 20
7063: PUSH
7064: LD_VAR 0 1
7068: ST_TO_ADDR
// uc_nation = nation ;
7069: LD_ADDR_OWVAR 21
7073: PUSH
7074: LD_VAR 0 2
7078: ST_TO_ADDR
// hc_gallery =  ;
7079: LD_ADDR_OWVAR 33
7083: PUSH
7084: LD_STRING 
7086: ST_TO_ADDR
// hc_name =  ;
7087: LD_ADDR_OWVAR 26
7091: PUSH
7092: LD_STRING 
7094: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7095: LD_INT 0
7097: PPUSH
7098: LD_VAR 0 5
7102: PPUSH
7103: LD_VAR 0 4
7107: PPUSH
7108: CALL_OW 380
// un = CreateHuman ;
7112: LD_ADDR_VAR 0 10
7116: PUSH
7117: CALL_OW 44
7121: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7122: LD_VAR 0 10
7126: PPUSH
7127: LD_VAR 0 3
7131: PPUSH
7132: CALL_OW 52
// end ;
7136: GO 7056
7138: POP
7139: POP
// end ;
7140: LD_VAR 0 7
7144: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7145: LD_INT 0
7147: PPUSH
7148: PPUSH
7149: PPUSH
// uc_side := GetSide ( b ) ;
7150: LD_ADDR_OWVAR 20
7154: PUSH
7155: LD_VAR 0 2
7159: PPUSH
7160: CALL_OW 255
7164: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7165: LD_ADDR_OWVAR 21
7169: PUSH
7170: LD_VAR 0 2
7174: PPUSH
7175: CALL_OW 248
7179: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7180: LD_INT 0
7182: PPUSH
7183: LD_INT 1
7185: PPUSH
7186: LD_VAR 0 1
7190: PPUSH
7191: CALL_OW 380
// un = CreateHuman ;
7195: LD_ADDR_VAR 0 4
7199: PUSH
7200: CALL_OW 44
7204: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
7205: LD_ADDR_VAR 0 5
7209: PUSH
7210: LD_VAR 0 2
7214: PPUSH
7215: CALL_OW 254
7219: PUSH
7220: LD_INT 3
7222: MINUS
7223: ST_TO_ADDR
// if dir < 0 then
7224: LD_VAR 0 5
7228: PUSH
7229: LD_INT 0
7231: LESS
7232: IFFALSE 7248
// dir := 6 + dir ;
7234: LD_ADDR_VAR 0 5
7238: PUSH
7239: LD_INT 6
7241: PUSH
7242: LD_VAR 0 5
7246: PLUS
7247: ST_TO_ADDR
// SetDir ( un , dir ) ;
7248: LD_VAR 0 4
7252: PPUSH
7253: LD_VAR 0 5
7257: PPUSH
7258: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7262: LD_VAR 0 4
7266: PPUSH
7267: LD_VAR 0 2
7271: PPUSH
7272: CALL_OW 52
// end ;
7276: LD_VAR 0 3
7280: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
7281: LD_INT 0
7283: PPUSH
7284: PPUSH
7285: PPUSH
7286: PPUSH
7287: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
7288: LD_ADDR_VAR 0 7
7292: PUSH
7293: LD_INT 22
7295: PUSH
7296: LD_VAR 0 1
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: LD_INT 25
7307: PUSH
7308: LD_INT 2
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 24
7317: PUSH
7318: LD_INT 1000
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: LIST
7329: PPUSH
7330: CALL_OW 69
7334: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7335: LD_ADDR_VAR 0 5
7339: PUSH
7340: LD_VAR 0 3
7344: PPUSH
7345: LD_INT 22
7347: PUSH
7348: LD_VAR 0 1
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 21
7359: PUSH
7360: LD_INT 3
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 24
7372: PUSH
7373: LD_INT 1000
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: PUSH
7389: EMPTY
7390: LIST
7391: PPUSH
7392: CALL_OW 70
7396: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
7397: LD_VAR 0 5
7401: PUSH
7402: LD_INT 0
7404: GREATER
7405: PUSH
7406: LD_VAR 0 7
7410: PUSH
7411: LD_INT 0
7413: GREATER
7414: AND
7415: IFFALSE 7481
// begin for i in engineerOk_list do
7417: LD_ADDR_VAR 0 6
7421: PUSH
7422: LD_VAR 0 7
7426: PUSH
7427: FOR_IN
7428: IFFALSE 7479
// begin for j in buildings_list do
7430: LD_ADDR_VAR 0 8
7434: PUSH
7435: LD_VAR 0 5
7439: PUSH
7440: FOR_IN
7441: IFFALSE 7475
// begin AddComExitBuilding ( i ) ;
7443: LD_VAR 0 6
7447: PPUSH
7448: CALL_OW 182
// wait ( 0 0$1 ) ;
7452: LD_INT 35
7454: PPUSH
7455: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
7459: LD_VAR 0 6
7463: PPUSH
7464: LD_VAR 0 8
7468: PPUSH
7469: CALL_OW 190
// end ;
7473: GO 7440
7475: POP
7476: POP
// end ;
7477: GO 7427
7479: POP
7480: POP
// end ; if buildings_list = 0 then
7481: LD_VAR 0 5
7485: PUSH
7486: LD_INT 0
7488: EQUAL
7489: IFFALSE 7522
// begin for i in engineerOK_list do
7491: LD_ADDR_VAR 0 6
7495: PUSH
7496: LD_VAR 0 7
7500: PUSH
7501: FOR_IN
7502: IFFALSE 7520
// begin ComEnterUnit ( i , building ) ;
7504: LD_VAR 0 6
7508: PPUSH
7509: LD_VAR 0 2
7513: PPUSH
7514: CALL_OW 120
// end ;
7518: GO 7501
7520: POP
7521: POP
// end ; end ;
7522: LD_VAR 0 4
7526: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
7527: LD_INT 0
7529: PPUSH
7530: PPUSH
7531: PPUSH
7532: PPUSH
7533: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7534: LD_ADDR_VAR 0 6
7538: PUSH
7539: LD_INT 22
7541: PUSH
7542: LD_VAR 0 1
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 25
7553: PUSH
7554: LD_INT 4
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PPUSH
7565: CALL_OW 69
7569: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7570: LD_ADDR_VAR 0 9
7574: PUSH
7575: LD_VAR 0 3
7579: PPUSH
7580: LD_INT 22
7582: PUSH
7583: LD_VAR 0 1
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PUSH
7592: LD_INT 21
7594: PUSH
7595: LD_INT 1
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PUSH
7602: LD_INT 3
7604: PUSH
7605: LD_INT 24
7607: PUSH
7608: LD_INT 650
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: PPUSH
7624: CALL_OW 70
7628: ST_TO_ADDR
// if damageUnits > 0 then
7629: LD_VAR 0 9
7633: PUSH
7634: LD_INT 0
7636: GREATER
7637: IFFALSE 7787
// begin for i = 1 to damageUnits do
7639: LD_ADDR_VAR 0 7
7643: PUSH
7644: DOUBLE
7645: LD_INT 1
7647: DEC
7648: ST_TO_ADDR
7649: LD_VAR 0 9
7653: PUSH
7654: FOR_TO
7655: IFFALSE 7679
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
7657: LD_VAR 0 9
7661: PUSH
7662: LD_VAR 0 7
7666: ARRAY
7667: PPUSH
7668: LD_VAR 0 2
7672: PPUSH
7673: CALL_OW 113
7677: GO 7654
7679: POP
7680: POP
// for i = 1 to sci_list do
7681: LD_ADDR_VAR 0 7
7685: PUSH
7686: DOUBLE
7687: LD_INT 1
7689: DEC
7690: ST_TO_ADDR
7691: LD_VAR 0 6
7695: PUSH
7696: FOR_TO
7697: IFFALSE 7783
// begin ComExitBuilding ( sci_list [ i ] ) ;
7699: LD_VAR 0 6
7703: PUSH
7704: LD_VAR 0 7
7708: ARRAY
7709: PPUSH
7710: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
7714: LD_ADDR_VAR 0 8
7718: PUSH
7719: LD_VAR 0 2
7723: PPUSH
7724: LD_INT 22
7726: PUSH
7727: LD_VAR 0 1
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: PPUSH
7736: CALL_OW 70
7740: PUSH
7741: FOR_IN
7742: IFFALSE 7779
// begin AddComHeal ( sci_list [ i ] , j [ j ] ) ;
7744: LD_VAR 0 6
7748: PUSH
7749: LD_VAR 0 7
7753: ARRAY
7754: PPUSH
7755: LD_VAR 0 8
7759: PUSH
7760: LD_VAR 0 8
7764: ARRAY
7765: PPUSH
7766: CALL_OW 188
// wait ( 1 1$0 ) ;
7770: LD_INT 2100
7772: PPUSH
7773: CALL_OW 67
// end ;
7777: GO 7741
7779: POP
7780: POP
// end ;
7781: GO 7696
7783: POP
7784: POP
// end else
7785: GO 7801
// begin AddComEnterUnit ( sci_list , build ) ;
7787: LD_VAR 0 6
7791: PPUSH
7792: LD_VAR 0 4
7796: PPUSH
7797: CALL_OW 180
// end ; end ;
7801: LD_VAR 0 5
7805: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
7806: LD_INT 0
7808: PPUSH
7809: PPUSH
7810: PPUSH
7811: PPUSH
7812: PPUSH
7813: PPUSH
7814: PPUSH
7815: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
7816: LD_ADDR_VAR 0 7
7820: PUSH
7821: LD_VAR 0 3
7825: PPUSH
7826: LD_INT 22
7828: PUSH
7829: LD_VAR 0 1
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 21
7840: PUSH
7841: LD_INT 2
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: LD_INT 24
7850: PUSH
7851: LD_INT 550
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: LD_INT 34
7860: PUSH
7861: LD_INT 46
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: PPUSH
7874: CALL_OW 70
7878: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
7879: LD_ADDR_VAR 0 8
7883: PUSH
7884: LD_VAR 0 3
7888: PPUSH
7889: LD_INT 22
7891: PUSH
7892: LD_VAR 0 1
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: LD_INT 21
7903: PUSH
7904: LD_INT 2
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PUSH
7911: LD_INT 34
7913: PUSH
7914: LD_INT 46
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PUSH
7921: LD_INT 3
7923: PUSH
7924: LD_INT 24
7926: PUSH
7927: LD_INT 550
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: PPUSH
7944: CALL_OW 70
7948: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
7949: LD_ADDR_VAR 0 9
7953: PUSH
7954: LD_VAR 0 2
7958: PPUSH
7959: LD_INT 22
7961: PUSH
7962: LD_VAR 0 1
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: PUSH
7971: LD_INT 21
7973: PUSH
7974: LD_INT 2
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 34
7983: PUSH
7984: LD_INT 46
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 24
7993: PUSH
7994: LD_INT 1000
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PUSH
8001: LD_INT 58
8003: PUSH
8004: EMPTY
8005: LIST
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: PPUSH
8014: CALL_OW 70
8018: ST_TO_ADDR
// for i in damageVehicle_list do
8019: LD_ADDR_VAR 0 5
8023: PUSH
8024: LD_VAR 0 8
8028: PUSH
8029: FOR_IN
8030: IFFALSE 8049
// mechanicInside_list = UnitsInside ( i ) ;
8032: LD_ADDR_VAR 0 10
8036: PUSH
8037: LD_VAR 0 5
8041: PPUSH
8042: CALL_OW 313
8046: ST_TO_ADDR
8047: GO 8029
8049: POP
8050: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8051: LD_ADDR_VAR 0 11
8055: PUSH
8056: LD_VAR 0 2
8060: PPUSH
8061: LD_INT 22
8063: PUSH
8064: LD_VAR 0 1
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 25
8075: PUSH
8076: LD_INT 3
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PPUSH
8087: CALL_OW 70
8091: ST_TO_ADDR
// if damageVehicle_list > 0 then
8092: LD_VAR 0 8
8096: PUSH
8097: LD_INT 0
8099: GREATER
8100: IFFALSE 8173
// begin for i in damageVehicle_list do
8102: LD_ADDR_VAR 0 5
8106: PUSH
8107: LD_VAR 0 8
8111: PUSH
8112: FOR_IN
8113: IFFALSE 8171
// begin for j in mechanicInside_list do
8115: LD_ADDR_VAR 0 6
8119: PUSH
8120: LD_VAR 0 10
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8167
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
8128: LD_VAR 0 8
8132: PPUSH
8133: LD_VAR 0 2
8137: PPUSH
8138: CALL_OW 113
// AddComExitVehicle ( j ) ;
8142: LD_VAR 0 6
8146: PPUSH
8147: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
8151: LD_VAR 0 6
8155: PPUSH
8156: LD_VAR 0 5
8160: PPUSH
8161: CALL_OW 189
// end ;
8165: GO 8125
8167: POP
8168: POP
// end ;
8169: GO 8112
8171: POP
8172: POP
// end ; if emptyVehicle_list > 0 then
8173: LD_VAR 0 9
8177: PUSH
8178: LD_INT 0
8180: GREATER
8181: IFFALSE 8231
// begin for i in emptyVehicle_list do
8183: LD_ADDR_VAR 0 5
8187: PUSH
8188: LD_VAR 0 9
8192: PUSH
8193: FOR_IN
8194: IFFALSE 8229
// begin for j in mechanicOutside_list do
8196: LD_ADDR_VAR 0 6
8200: PUSH
8201: LD_VAR 0 11
8205: PUSH
8206: FOR_IN
8207: IFFALSE 8225
// begin AddComEnterUnit ( j , i ) ;
8209: LD_VAR 0 6
8213: PPUSH
8214: LD_VAR 0 5
8218: PPUSH
8219: CALL_OW 180
// end ;
8223: GO 8206
8225: POP
8226: POP
// end ;
8227: GO 8193
8229: POP
8230: POP
// end ; if VehicleOK_list > 0 then
8231: LD_VAR 0 7
8235: PUSH
8236: LD_INT 0
8238: GREATER
8239: IFFALSE 8273
// begin for i in VehicleOK_list do
8241: LD_ADDR_VAR 0 5
8245: PUSH
8246: LD_VAR 0 7
8250: PUSH
8251: FOR_IN
8252: IFFALSE 8271
// ComAgressiveMove ( i , 110 , 29 ) ;
8254: LD_VAR 0 5
8258: PPUSH
8259: LD_INT 110
8261: PPUSH
8262: LD_INT 29
8264: PPUSH
8265: CALL_OW 114
8269: GO 8251
8271: POP
8272: POP
// end ; end ;
8273: LD_VAR 0 4
8277: RET
// export function DefendBases ( area , enemySide , defendersList , build ) ; var i , j ; begin
8278: LD_INT 0
8280: PPUSH
8281: PPUSH
8282: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_type , unit_human ] ] ) > 0 then
8283: LD_VAR 0 1
8287: PPUSH
8288: LD_INT 22
8290: PUSH
8291: LD_VAR 0 2
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 21
8302: PUSH
8303: LD_INT 1
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PPUSH
8314: CALL_OW 70
8318: PUSH
8319: LD_INT 0
8321: GREATER
8322: IFFALSE 8436
// begin for i in defendersList do
8324: LD_ADDR_VAR 0 6
8328: PUSH
8329: LD_VAR 0 3
8333: PUSH
8334: FOR_IN
8335: IFFALSE 8432
// begin ComExitBuilding ( i ) ;
8337: LD_VAR 0 6
8341: PPUSH
8342: CALL_OW 122
// wait ( 0 0$1 ) ;
8346: LD_INT 35
8348: PPUSH
8349: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_type , unit_human ] ] ) do
8353: LD_ADDR_VAR 0 7
8357: PUSH
8358: LD_VAR 0 1
8362: PPUSH
8363: LD_INT 22
8365: PUSH
8366: LD_VAR 0 2
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PUSH
8375: LD_INT 21
8377: PUSH
8378: LD_INT 1
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: PPUSH
8389: CALL_OW 70
8393: PUSH
8394: FOR_IN
8395: IFFALSE 8428
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
8397: LD_VAR 0 6
8401: PPUSH
8402: LD_VAR 0 7
8406: PPUSH
8407: CALL_OW 250
8411: PPUSH
8412: LD_VAR 0 7
8416: PPUSH
8417: CALL_OW 251
8421: PPUSH
8422: CALL_OW 174
8426: GO 8394
8428: POP
8429: POP
// end ;
8430: GO 8334
8432: POP
8433: POP
// end else
8434: GO 8467
// begin for i in defendersList do
8436: LD_ADDR_VAR 0 6
8440: PUSH
8441: LD_VAR 0 3
8445: PUSH
8446: FOR_IN
8447: IFFALSE 8465
// ComEnterUnit ( i , build ) ;
8449: LD_VAR 0 6
8453: PPUSH
8454: LD_VAR 0 4
8458: PPUSH
8459: CALL_OW 120
8463: GO 8446
8465: POP
8466: POP
// end ; end ;
8467: LD_VAR 0 5
8471: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
8472: LD_INT 0
8474: PPUSH
8475: PPUSH
8476: PPUSH
8477: PPUSH
8478: PPUSH
// nearest_dist = 1000 ;
8479: LD_ADDR_VAR 0 4
8483: PUSH
8484: LD_INT 1000
8486: ST_TO_ADDR
// nearest_un = un ;
8487: LD_ADDR_VAR 0 5
8491: PUSH
8492: LD_VAR 0 1
8496: ST_TO_ADDR
// for sold in units do
8497: LD_ADDR_VAR 0 6
8501: PUSH
8502: LD_VAR 0 2
8506: PUSH
8507: FOR_IN
8508: IFFALSE 8564
// begin dist = GetDistUnits ( un , sold ) ;
8510: LD_ADDR_VAR 0 7
8514: PUSH
8515: LD_VAR 0 1
8519: PPUSH
8520: LD_VAR 0 6
8524: PPUSH
8525: CALL_OW 296
8529: ST_TO_ADDR
// if dist < nearest_dist then
8530: LD_VAR 0 7
8534: PUSH
8535: LD_VAR 0 4
8539: LESS
8540: IFFALSE 8562
// begin nearest_un = sold ;
8542: LD_ADDR_VAR 0 5
8546: PUSH
8547: LD_VAR 0 6
8551: ST_TO_ADDR
// nearest_dist = dist ;
8552: LD_ADDR_VAR 0 4
8556: PUSH
8557: LD_VAR 0 7
8561: ST_TO_ADDR
// end ; end ;
8562: GO 8507
8564: POP
8565: POP
// result := nearest_un ;
8566: LD_ADDR_VAR 0 3
8570: PUSH
8571: LD_VAR 0 5
8575: ST_TO_ADDR
// end ;
8576: LD_VAR 0 3
8580: RET
// export function PrepareDifficulty ; begin
8581: LD_INT 0
8583: PPUSH
// if Difficulty = 1 then
8584: LD_OWVAR 67
8588: PUSH
8589: LD_INT 1
8591: EQUAL
8592: IFFALSE 8649
// begin RemoveUnit ( [ brw2 , brw3 , brw4 , brw5 ] ) ;
8594: LD_INT 9
8596: PUSH
8597: LD_INT 30
8599: PUSH
8600: LD_INT 52
8602: PUSH
8603: LD_INT 63
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: PPUSH
8612: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
8616: LD_INT 5
8618: PUSH
8619: LD_INT 4
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: PPUSH
8626: LD_INT 60
8628: PPUSH
8629: CALL_OW 240
// RuSoldMinLevel = 0 ;
8633: LD_ADDR_EXP 13
8637: PUSH
8638: LD_INT 0
8640: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
8641: LD_ADDR_EXP 14
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// end ; if Difficulty = 2 then
8649: LD_OWVAR 67
8653: PUSH
8654: LD_INT 2
8656: EQUAL
8657: IFFALSE 8706
// begin RemoveUnit ( [ brw3 , brw4 ] ) ;
8659: LD_INT 30
8661: PUSH
8662: LD_INT 52
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: PPUSH
8669: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
8673: LD_INT 5
8675: PUSH
8676: LD_INT 4
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PPUSH
8683: LD_INT 50
8685: PPUSH
8686: CALL_OW 240
// RuSoldMinLevel = 1 ;
8690: LD_ADDR_EXP 13
8694: PUSH
8695: LD_INT 1
8697: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
8698: LD_ADDR_EXP 14
8702: PUSH
8703: LD_INT 2
8705: ST_TO_ADDR
// end ; if Difficulty = 3 then
8706: LD_OWVAR 67
8710: PUSH
8711: LD_INT 3
8713: EQUAL
8714: IFFALSE 8749
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
8716: LD_INT 5
8718: PUSH
8719: LD_INT 4
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PPUSH
8726: LD_INT 40
8728: PPUSH
8729: CALL_OW 240
// RuSoldMinLevel = 2 ;
8733: LD_ADDR_EXP 13
8737: PUSH
8738: LD_INT 2
8740: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
8741: LD_ADDR_EXP 14
8745: PUSH
8746: LD_INT 3
8748: ST_TO_ADDR
// end ; end ;
8749: LD_VAR 0 1
8753: RET
// export function FinishMission ; begin
8754: LD_INT 0
8756: PPUSH
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
8757: LD_INT 1
8759: PPUSH
8760: CALL_OW 274
8764: PPUSH
8765: LD_INT 1
8767: PPUSH
8768: CALL_OW 275
8772: PUSH
8773: LD_INT 200
8775: GREATEREQUAL
8776: IFFALSE 8790
// begin AddMedal ( Cans , 1 ) ;
8778: LD_STRING Cans
8780: PPUSH
8781: LD_INT 1
8783: PPUSH
8784: CALL_OW 101
// end else
8788: GO 8801
// begin AddMedal ( Cans , - 1 ) ;
8790: LD_STRING Cans
8792: PPUSH
8793: LD_INT 1
8795: NEG
8796: PPUSH
8797: CALL_OW 101
// end ; if deadsCounter >= 3 then
8801: LD_EXP 27
8805: PUSH
8806: LD_INT 3
8808: GREATEREQUAL
8809: IFFALSE 8823
// begin AddMedal ( Deaths , 1 ) ;
8811: LD_STRING Deaths
8813: PPUSH
8814: LD_INT 1
8816: PPUSH
8817: CALL_OW 101
// end else
8821: GO 8834
// begin AddMedal ( Deaths , - 1 ) ;
8823: LD_STRING Deaths
8825: PPUSH
8826: LD_INT 1
8828: NEG
8829: PPUSH
8830: CALL_OW 101
// end ; if mikhailStatus = 0 then
8834: LD_EXP 20
8838: PUSH
8839: LD_INT 0
8841: EQUAL
8842: IFFALSE 8855
// AddMedal ( Prisoner , - 1 ) ;
8844: LD_STRING Prisoner
8846: PPUSH
8847: LD_INT 1
8849: NEG
8850: PPUSH
8851: CALL_OW 101
// if mikhailStatus = 1 then
8855: LD_EXP 20
8859: PUSH
8860: LD_INT 1
8862: EQUAL
8863: IFFALSE 8875
// AddMedal ( Prisoner , 1 ) ;
8865: LD_STRING Prisoner
8867: PPUSH
8868: LD_INT 1
8870: PPUSH
8871: CALL_OW 101
// if mikhailStatus = 2 then
8875: LD_EXP 20
8879: PUSH
8880: LD_INT 2
8882: EQUAL
8883: IFFALSE 8895
// AddMedal ( Prisoner , 2 ) ;
8885: LD_STRING Prisoner
8887: PPUSH
8888: LD_INT 2
8890: PPUSH
8891: CALL_OW 101
// if mikhailStatus = 3 then
8895: LD_EXP 20
8899: PUSH
8900: LD_INT 3
8902: EQUAL
8903: IFFALSE 8916
// AddMedal ( Prisoner , - 2 ) ;
8905: LD_STRING Prisoner
8907: PPUSH
8908: LD_INT 2
8910: NEG
8911: PPUSH
8912: CALL_OW 101
// if mikhailStatus = 1 then
8916: LD_EXP 20
8920: PUSH
8921: LD_INT 1
8923: EQUAL
8924: IFFALSE 8938
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
8926: LD_EXP 20
8930: PPUSH
8931: LD_STRING 02_mikhailStatus_1
8933: PPUSH
8934: CALL_OW 39
// if IsOK ( vehicle1 ) and GetSide ( vehicle1 ) = 1 then
8938: LD_INT 5
8940: PPUSH
8941: CALL_OW 302
8945: PUSH
8946: LD_INT 5
8948: PPUSH
8949: CALL_OW 255
8953: PUSH
8954: LD_INT 1
8956: EQUAL
8957: AND
8958: IFFALSE 9014
// SaveVariable ( [ GetChassis ( vehicle1 ) , GetEngine ( vehicle1 ) , GetControl ( vehicle1 ) , GetWeapon ( vehicle1 ) , GetLives ( vehicle1 ) ] , 02_tank1_2 ) ;
8960: LD_INT 5
8962: PPUSH
8963: CALL_OW 265
8967: PUSH
8968: LD_INT 5
8970: PPUSH
8971: CALL_OW 262
8975: PUSH
8976: LD_INT 5
8978: PPUSH
8979: CALL_OW 263
8983: PUSH
8984: LD_INT 5
8986: PPUSH
8987: CALL_OW 264
8991: PUSH
8992: LD_INT 5
8994: PPUSH
8995: CALL_OW 256
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: PPUSH
9007: LD_STRING 02_tank1_2
9009: PPUSH
9010: CALL_OW 39
// if IsOK ( vehicle2 ) and GetSide ( vehicle2 ) = 1 then
9014: LD_INT 4
9016: PPUSH
9017: CALL_OW 302
9021: PUSH
9022: LD_INT 4
9024: PPUSH
9025: CALL_OW 255
9029: PUSH
9030: LD_INT 1
9032: EQUAL
9033: AND
9034: IFFALSE 9090
// SaveVariable ( [ GetChassis ( vehicle2 ) , GetEngine ( vehicle2 ) , GetControl ( vehicle2 ) , GetWeapon ( vehicle2 ) , GetLives ( vehicle2 ) ] , 02_tank2_3 ) ;
9036: LD_INT 4
9038: PPUSH
9039: CALL_OW 265
9043: PUSH
9044: LD_INT 4
9046: PPUSH
9047: CALL_OW 262
9051: PUSH
9052: LD_INT 4
9054: PPUSH
9055: CALL_OW 263
9059: PUSH
9060: LD_INT 4
9062: PPUSH
9063: CALL_OW 264
9067: PUSH
9068: LD_INT 4
9070: PPUSH
9071: CALL_OW 256
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: PPUSH
9083: LD_STRING 02_tank2_3
9085: PPUSH
9086: CALL_OW 39
// GiveMedals ( MAIN ) ;
9090: LD_STRING MAIN
9092: PPUSH
9093: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
9097: LD_INT 22
9099: PUSH
9100: LD_INT 1
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 21
9109: PUSH
9110: LD_INT 1
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PPUSH
9121: CALL_OW 69
9125: PPUSH
9126: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
9130: LD_EXP 1
9134: PPUSH
9135: LD_STRING JMM
9137: PPUSH
9138: CALL_OW 38
// SaveCharacters ( Bobby , Bobby ) ;
9142: LD_EXP 2
9146: PPUSH
9147: LD_STRING Bobby
9149: PPUSH
9150: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
9154: LD_EXP 3
9158: PPUSH
9159: LD_STRING Cyrus
9161: PPUSH
9162: CALL_OW 38
// SaveCharacters ( Lisa , Lisa ) ;
9166: LD_EXP 4
9170: PPUSH
9171: LD_STRING Lisa
9173: PPUSH
9174: CALL_OW 38
// SaveCharacters ( Khatam , Khatam ) ;
9178: LD_EXP 5
9182: PPUSH
9183: LD_STRING Khatam
9185: PPUSH
9186: CALL_OW 38
// SaveCharacters ( Brian , Brian ) ;
9190: LD_EXP 6
9194: PPUSH
9195: LD_STRING Brian
9197: PPUSH
9198: CALL_OW 38
// SaveCharacters ( Jerry , Jerry ) ;
9202: LD_EXP 7
9206: PPUSH
9207: LD_STRING Jerry
9209: PPUSH
9210: CALL_OW 38
// if mikhailStatus = 1 then
9214: LD_EXP 20
9218: PUSH
9219: LD_INT 1
9221: EQUAL
9222: IFFALSE 9236
// SaveCharacters ( Mikhail , Mikhail ) ;
9224: LD_EXP 8
9228: PPUSH
9229: LD_STRING Mikhail
9231: PPUSH
9232: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry ] , 02_other_survivors ) ;
9236: LD_INT 50
9238: PUSH
9239: EMPTY
9240: LIST
9241: PUSH
9242: LD_INT 22
9244: PUSH
9245: LD_INT 1
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 21
9254: PUSH
9255: LD_INT 1
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: LIST
9266: PPUSH
9267: CALL_OW 69
9271: PUSH
9272: LD_EXP 1
9276: PUSH
9277: LD_EXP 2
9281: PUSH
9282: LD_EXP 3
9286: PUSH
9287: LD_EXP 4
9291: PUSH
9292: LD_EXP 5
9296: PUSH
9297: LD_EXP 6
9301: PUSH
9302: LD_EXP 7
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: DIFF
9316: PPUSH
9317: LD_STRING 02_other_survivors
9319: PPUSH
9320: CALL_OW 38
// YouWin ;
9324: CALL_OW 103
// end ; end_of_file
9328: LD_VAR 0 1
9332: RET
// export function PrepareHeroes ; begin
9333: LD_INT 0
9335: PPUSH
// uc_side = 1 ;
9336: LD_ADDR_OWVAR 20
9340: PUSH
9341: LD_INT 1
9343: ST_TO_ADDR
// JMM = NewCharacter ( JMM ) ;
9344: LD_ADDR_EXP 1
9348: PUSH
9349: LD_STRING JMM
9351: PPUSH
9352: CALL_OW 25
9356: ST_TO_ADDR
// Bobby = NewCharacter ( Bobby ) ;
9357: LD_ADDR_EXP 2
9361: PUSH
9362: LD_STRING Bobby
9364: PPUSH
9365: CALL_OW 25
9369: ST_TO_ADDR
// Cyrus = NewCharacter ( Cyrus ) ;
9370: LD_ADDR_EXP 3
9374: PUSH
9375: LD_STRING Cyrus
9377: PPUSH
9378: CALL_OW 25
9382: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
9383: LD_ADDR_EXP 9
9387: PUSH
9388: LD_STRING Powell
9390: PPUSH
9391: CALL_OW 25
9395: ST_TO_ADDR
// if Bobby then
9396: LD_EXP 2
9400: IFFALSE 9414
// SetLives ( Bobby , 900 ) ;
9402: LD_EXP 2
9406: PPUSH
9407: LD_INT 900
9409: PPUSH
9410: CALL_OW 234
// if Cyrus then
9414: LD_EXP 3
9418: IFFALSE 9432
// SetLives ( Cyrus , 900 ) ;
9420: LD_EXP 3
9424: PPUSH
9425: LD_INT 900
9427: PPUSH
9428: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
9432: LD_ADDR_EXP 5
9436: PUSH
9437: LD_STRING Khatam
9439: PPUSH
9440: CALL_OW 25
9444: ST_TO_ADDR
// uc_side = 4 ;
9445: LD_ADDR_OWVAR 20
9449: PUSH
9450: LD_INT 4
9452: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
9453: LD_ADDR_EXP 4
9457: PUSH
9458: LD_STRING Lisa
9460: PPUSH
9461: CALL_OW 25
9465: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
9466: LD_EXP 1
9470: PPUSH
9471: LD_INT 3
9473: PPUSH
9474: LD_INT 0
9476: PPUSH
9477: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
9481: LD_EXP 2
9485: PPUSH
9486: LD_INT 3
9488: PPUSH
9489: LD_INT 0
9491: PPUSH
9492: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
9496: LD_EXP 3
9500: PPUSH
9501: LD_INT 3
9503: PPUSH
9504: LD_INT 0
9506: PPUSH
9507: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
9511: LD_EXP 4
9515: PPUSH
9516: LD_INT 5
9518: PPUSH
9519: LD_INT 0
9521: PPUSH
9522: CALL_OW 49
// ComCrawl ( Lisa ) ;
9526: LD_EXP 4
9530: PPUSH
9531: CALL_OW 137
// end ;
9535: LD_VAR 0 1
9539: RET
// export function PrepareLisSquad ; var i , un ; begin
9540: LD_INT 0
9542: PPUSH
9543: PPUSH
9544: PPUSH
// for i = 1 to 2 do
9545: LD_ADDR_VAR 0 2
9549: PUSH
9550: DOUBLE
9551: LD_INT 1
9553: DEC
9554: ST_TO_ADDR
9555: LD_INT 2
9557: PUSH
9558: FOR_TO
9559: IFFALSE 9641
// begin uc_side = 4 ;
9561: LD_ADDR_OWVAR 20
9565: PUSH
9566: LD_INT 4
9568: ST_TO_ADDR
// uc_nation = 1 ;
9569: LD_ADDR_OWVAR 21
9573: PUSH
9574: LD_INT 1
9576: ST_TO_ADDR
// hc_gallery =  ;
9577: LD_ADDR_OWVAR 33
9581: PUSH
9582: LD_STRING 
9584: ST_TO_ADDR
// hc_name =  ;
9585: LD_ADDR_OWVAR 26
9589: PUSH
9590: LD_STRING 
9592: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( 0 , 1 ) ) ;
9593: LD_INT 0
9595: PPUSH
9596: LD_INT 2
9598: PPUSH
9599: LD_INT 0
9601: PPUSH
9602: LD_INT 1
9604: PPUSH
9605: CALL_OW 12
9609: PPUSH
9610: CALL_OW 380
// un = CreateHuman ;
9614: LD_ADDR_VAR 0 3
9618: PUSH
9619: CALL_OW 44
9623: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
9624: LD_VAR 0 3
9628: PPUSH
9629: LD_INT 6
9631: PPUSH
9632: LD_INT 0
9634: PPUSH
9635: CALL_OW 49
// end ;
9639: GO 9558
9641: POP
9642: POP
// end ;
9643: LD_VAR 0 1
9647: RET
// export function PrepareOtherAmericans ; begin
9648: LD_INT 0
9650: PPUSH
// uc_side = 4 ;
9651: LD_ADDR_OWVAR 20
9655: PUSH
9656: LD_INT 4
9658: ST_TO_ADDR
// uc_nation = 1 ;
9659: LD_ADDR_OWVAR 21
9663: PUSH
9664: LD_INT 1
9666: ST_TO_ADDR
// hc_gallery =  ;
9667: LD_ADDR_OWVAR 33
9671: PUSH
9672: LD_STRING 
9674: ST_TO_ADDR
// hc_name = Brian Garvin ;
9675: LD_ADDR_OWVAR 26
9679: PUSH
9680: LD_STRING Brian Garvin
9682: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
9683: LD_INT 1
9685: PPUSH
9686: LD_INT 1
9688: PPUSH
9689: LD_INT 1
9691: PPUSH
9692: LD_INT 2
9694: PPUSH
9695: CALL_OW 12
9699: PPUSH
9700: CALL_OW 380
// Brian = CreateHuman ;
9704: LD_ADDR_EXP 6
9708: PUSH
9709: CALL_OW 44
9713: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , true ) ;
9714: LD_EXP 6
9718: PPUSH
9719: LD_INT 10
9721: PPUSH
9722: LD_INT 1
9724: PPUSH
9725: CALL_OW 49
// hc_name = Jerry White ;
9729: LD_ADDR_OWVAR 26
9733: PUSH
9734: LD_STRING Jerry White
9736: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
9737: LD_INT 1
9739: PPUSH
9740: LD_INT 3
9742: PPUSH
9743: LD_INT 1
9745: PPUSH
9746: LD_INT 2
9748: PPUSH
9749: CALL_OW 12
9753: PPUSH
9754: CALL_OW 380
// Jerry = CreateHuman ;
9758: LD_ADDR_EXP 7
9762: PUSH
9763: CALL_OW 44
9767: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , true ) ;
9768: LD_EXP 7
9772: PPUSH
9773: LD_INT 10
9775: PPUSH
9776: LD_INT 1
9778: PPUSH
9779: CALL_OW 49
// end ;
9783: LD_VAR 0 1
9787: RET
// export function PrepareDeadSoldiers ; var i , un ; begin
9788: LD_INT 0
9790: PPUSH
9791: PPUSH
9792: PPUSH
// for i = 1 to 6 do
9793: LD_ADDR_VAR 0 2
9797: PUSH
9798: DOUBLE
9799: LD_INT 1
9801: DEC
9802: ST_TO_ADDR
9803: LD_INT 6
9805: PUSH
9806: FOR_TO
9807: IFFALSE 9901
// begin uc_side = 4 ;
9809: LD_ADDR_OWVAR 20
9813: PUSH
9814: LD_INT 4
9816: ST_TO_ADDR
// uc_nation = 1 ;
9817: LD_ADDR_OWVAR 21
9821: PUSH
9822: LD_INT 1
9824: ST_TO_ADDR
// hc_gallery =  ;
9825: LD_ADDR_OWVAR 33
9829: PUSH
9830: LD_STRING 
9832: ST_TO_ADDR
// hc_name =  ;
9833: LD_ADDR_OWVAR 26
9837: PUSH
9838: LD_STRING 
9840: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
9841: LD_INT 0
9843: PPUSH
9844: LD_INT 1
9846: PPUSH
9847: LD_INT 4
9849: PPUSH
9850: CALL_OW 12
9854: PPUSH
9855: LD_INT 1
9857: PPUSH
9858: CALL_OW 380
// un = CreateHuman ;
9862: LD_ADDR_VAR 0 3
9866: PUSH
9867: CALL_OW 44
9871: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
9872: LD_VAR 0 3
9876: PPUSH
9877: LD_INT 16
9879: PPUSH
9880: LD_INT 0
9882: PPUSH
9883: CALL_OW 49
// SetLives ( un , 1 ) ;
9887: LD_VAR 0 3
9891: PPUSH
9892: LD_INT 1
9894: PPUSH
9895: CALL_OW 234
// end ;
9899: GO 9806
9901: POP
9902: POP
// end ; end_of_file
9903: LD_VAR 0 1
9907: RET
// export function PrepareRussianHeroes ; var tmp ; begin
9908: LD_INT 0
9910: PPUSH
9911: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
9912: LD_ADDR_VAR 0 2
9916: PUSH
9917: LD_INT 22
9919: PUSH
9920: LD_INT 1
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 25
9929: PUSH
9930: LD_INT 2
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PPUSH
9941: CALL_OW 69
9945: ST_TO_ADDR
// uc_side = 6 ;
9946: LD_ADDR_OWVAR 20
9950: PUSH
9951: LD_INT 6
9953: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
9954: LD_ADDR_EXP 8
9958: PUSH
9959: LD_STRING Mikhail
9961: PPUSH
9962: CALL_OW 25
9966: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
9967: LD_EXP 8
9971: PPUSH
9972: LD_VAR 0 2
9976: PUSH
9977: LD_INT 1
9979: ARRAY
9980: PPUSH
9981: CALL_OW 250
9985: PPUSH
9986: LD_VAR 0 2
9990: PUSH
9991: LD_INT 1
9993: ARRAY
9994: PPUSH
9995: CALL_OW 251
9999: PPUSH
10000: LD_INT 3
10002: PPUSH
10003: LD_INT 1
10005: PPUSH
10006: CALL_OW 50
// end ;
10010: LD_VAR 0 1
10014: RET
// export function PrepareRussianCommander ; var un ; begin
10015: LD_INT 0
10017: PPUSH
10018: PPUSH
// uc_side = 3 ;
10019: LD_ADDR_OWVAR 20
10023: PUSH
10024: LD_INT 3
10026: ST_TO_ADDR
// uc_nation = 3 ;
10027: LD_ADDR_OWVAR 21
10031: PUSH
10032: LD_INT 3
10034: ST_TO_ADDR
// hc_gallery =  ;
10035: LD_ADDR_OWVAR 33
10039: PUSH
10040: LD_STRING 
10042: ST_TO_ADDR
// hc_name = Natasza Stjepanowna ;
10043: LD_ADDR_OWVAR 26
10047: PUSH
10048: LD_STRING Natasza Stjepanowna
10050: ST_TO_ADDR
// PrepareHuman ( 2 , 1 , rand ( 2 , 4 ) ) ;
10051: LD_INT 2
10053: PPUSH
10054: LD_INT 1
10056: PPUSH
10057: LD_INT 2
10059: PPUSH
10060: LD_INT 4
10062: PPUSH
10063: CALL_OW 12
10067: PPUSH
10068: CALL_OW 380
// hc_importance = 110 ;
10072: LD_ADDR_OWVAR 32
10076: PUSH
10077: LD_INT 110
10079: ST_TO_ADDR
// un = CreateHuman ;
10080: LD_ADDR_VAR 0 2
10084: PUSH
10085: CALL_OW 44
10089: ST_TO_ADDR
// PlaceUnitArea ( un , NataszaSpawn , false ) ;
10090: LD_VAR 0 2
10094: PPUSH
10095: LD_INT 24
10097: PPUSH
10098: LD_INT 0
10100: PPUSH
10101: CALL_OW 49
// ComTurnXY ( un , 56 , 16 ) ;
10105: LD_VAR 0 2
10109: PPUSH
10110: LD_INT 56
10112: PPUSH
10113: LD_INT 16
10115: PPUSH
10116: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ un ;
10120: LD_ADDR_EXP 23
10124: PUSH
10125: LD_EXP 23
10129: PUSH
10130: LD_VAR 0 2
10134: ADD
10135: ST_TO_ADDR
// end ;
10136: LD_VAR 0 1
10140: RET
// export function PrepareSouthBase ; var i , un ; begin
10141: LD_INT 0
10143: PPUSH
10144: PPUSH
10145: PPUSH
// for i = 1 to 2 do
10146: LD_ADDR_VAR 0 2
10150: PUSH
10151: DOUBLE
10152: LD_INT 1
10154: DEC
10155: ST_TO_ADDR
10156: LD_INT 2
10158: PUSH
10159: FOR_TO
10160: IFFALSE 10269
// begin uc_side = 3 ;
10162: LD_ADDR_OWVAR 20
10166: PUSH
10167: LD_INT 3
10169: ST_TO_ADDR
// uc_nation = 3 ;
10170: LD_ADDR_OWVAR 21
10174: PUSH
10175: LD_INT 3
10177: ST_TO_ADDR
// hc_gallery =  ;
10178: LD_ADDR_OWVAR 33
10182: PUSH
10183: LD_STRING 
10185: ST_TO_ADDR
// hc_name =  ;
10186: LD_ADDR_OWVAR 26
10190: PUSH
10191: LD_STRING 
10193: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
10194: LD_INT 1
10196: PPUSH
10197: LD_INT 1
10199: PPUSH
10200: LD_EXP 13
10204: PPUSH
10205: LD_EXP 14
10209: PPUSH
10210: CALL_OW 12
10214: PPUSH
10215: CALL_OW 380
// hc_importance = 0 ;
10219: LD_ADDR_OWVAR 32
10223: PUSH
10224: LD_INT 0
10226: ST_TO_ADDR
// un = CreateHuman ;
10227: LD_ADDR_VAR 0 3
10231: PUSH
10232: CALL_OW 44
10236: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
10237: LD_VAR 0 3
10241: PPUSH
10242: LD_INT 11
10244: PPUSH
10245: LD_INT 0
10247: PPUSH
10248: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
10252: LD_VAR 0 3
10256: PPUSH
10257: LD_INT 111
10259: PPUSH
10260: LD_INT 38
10262: PPUSH
10263: CALL_OW 118
// end ;
10267: GO 10159
10269: POP
10270: POP
// for i = 1 to Difficulty do
10271: LD_ADDR_VAR 0 2
10275: PUSH
10276: DOUBLE
10277: LD_INT 1
10279: DEC
10280: ST_TO_ADDR
10281: LD_OWVAR 67
10285: PUSH
10286: FOR_TO
10287: IFFALSE 10388
// begin uc_side = 3 ;
10289: LD_ADDR_OWVAR 20
10293: PUSH
10294: LD_INT 3
10296: ST_TO_ADDR
// uc_nation = 3 ;
10297: LD_ADDR_OWVAR 21
10301: PUSH
10302: LD_INT 3
10304: ST_TO_ADDR
// hc_gallery =  ;
10305: LD_ADDR_OWVAR 33
10309: PUSH
10310: LD_STRING 
10312: ST_TO_ADDR
// hc_name =  ;
10313: LD_ADDR_OWVAR 26
10317: PUSH
10318: LD_STRING 
10320: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
10321: LD_INT 0
10323: PPUSH
10324: LD_INT 3
10326: PPUSH
10327: LD_EXP 13
10331: PPUSH
10332: LD_EXP 14
10336: PPUSH
10337: CALL_OW 12
10341: PPUSH
10342: CALL_OW 380
// un = CreateHuman ;
10346: LD_ADDR_VAR 0 3
10350: PUSH
10351: CALL_OW 44
10355: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
10356: LD_VAR 0 3
10360: PPUSH
10361: LD_INT 12
10363: PPUSH
10364: LD_INT 0
10366: PPUSH
10367: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
10371: LD_VAR 0 3
10375: PPUSH
10376: LD_INT 111
10378: PPUSH
10379: LD_INT 28
10381: PPUSH
10382: CALL_OW 118
// end ;
10386: GO 10286
10388: POP
10389: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
10390: LD_INT 3
10392: PPUSH
10393: LD_INT 3
10395: PPUSH
10396: LD_INT 33
10398: PPUSH
10399: LD_EXP 13
10403: PPUSH
10404: LD_EXP 14
10408: PPUSH
10409: CALL_OW 12
10413: PPUSH
10414: LD_INT 1
10416: PPUSH
10417: LD_INT 1
10419: PUSH
10420: LD_INT 1
10422: PPUSH
10423: LD_INT 2
10425: PPUSH
10426: CALL_OW 12
10430: PUSH
10431: LD_INT 1
10433: PPUSH
10434: LD_INT 2
10436: PPUSH
10437: CALL_OW 12
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: PUSH
10447: LD_OWVAR 67
10451: ARRAY
10452: PPUSH
10453: CALL 7035 0 6
// for i in UnitsInside ( arm2 ) do
10457: LD_ADDR_VAR 0 2
10461: PUSH
10462: LD_INT 33
10464: PPUSH
10465: CALL_OW 313
10469: PUSH
10470: FOR_IN
10471: IFFALSE 10491
// southBaseDefenders = southBaseDefenders ^ i ;
10473: LD_ADDR_EXP 24
10477: PUSH
10478: LD_EXP 24
10482: PUSH
10483: LD_VAR 0 2
10487: ADD
10488: ST_TO_ADDR
10489: GO 10470
10491: POP
10492: POP
// end ;
10493: LD_VAR 0 1
10497: RET
// export function PrepareNorthBase ; var i , un ; begin
10498: LD_INT 0
10500: PPUSH
10501: PPUSH
10502: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
10503: LD_ADDR_VAR 0 2
10507: PUSH
10508: DOUBLE
10509: LD_INT 1
10511: DEC
10512: ST_TO_ADDR
10513: LD_INT 1
10515: PPUSH
10516: LD_INT 2
10518: PPUSH
10519: CALL_OW 12
10523: PUSH
10524: LD_INT 2
10526: PPUSH
10527: LD_INT 3
10529: PPUSH
10530: CALL_OW 12
10534: PUSH
10535: LD_INT 3
10537: PPUSH
10538: LD_INT 4
10540: PPUSH
10541: CALL_OW 12
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: LIST
10550: PUSH
10551: LD_OWVAR 67
10555: ARRAY
10556: PUSH
10557: FOR_TO
10558: IFFALSE 10644
// begin uc_side = 3 ;
10560: LD_ADDR_OWVAR 20
10564: PUSH
10565: LD_INT 3
10567: ST_TO_ADDR
// uc_nation = 3 ;
10568: LD_ADDR_OWVAR 21
10572: PUSH
10573: LD_INT 3
10575: ST_TO_ADDR
// hc_gallery =  ;
10576: LD_ADDR_OWVAR 33
10580: PUSH
10581: LD_STRING 
10583: ST_TO_ADDR
// hc_name =  ;
10584: LD_ADDR_OWVAR 26
10588: PUSH
10589: LD_STRING 
10591: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
10592: LD_INT 0
10594: PPUSH
10595: LD_INT 1
10597: PPUSH
10598: LD_EXP 13
10602: PPUSH
10603: LD_EXP 14
10607: PPUSH
10608: CALL_OW 12
10612: PPUSH
10613: CALL_OW 380
// un = CreateHuman ;
10617: LD_ADDR_VAR 0 3
10621: PUSH
10622: CALL_OW 44
10626: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
10627: LD_VAR 0 3
10631: PPUSH
10632: LD_INT 14
10634: PPUSH
10635: LD_INT 0
10637: PPUSH
10638: CALL_OW 49
// end ;
10642: GO 10557
10644: POP
10645: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
10646: LD_INT 3
10648: PPUSH
10649: LD_INT 3
10651: PPUSH
10652: LD_INT 2
10654: PPUSH
10655: LD_EXP 13
10659: PPUSH
10660: LD_EXP 14
10664: PPUSH
10665: CALL_OW 12
10669: PPUSH
10670: LD_INT 1
10672: PPUSH
10673: LD_INT 1
10675: PPUSH
10676: LD_INT 2
10678: PPUSH
10679: CALL_OW 12
10683: PUSH
10684: LD_INT 1
10686: PPUSH
10687: LD_INT 3
10689: PPUSH
10690: CALL_OW 12
10694: PUSH
10695: LD_INT 1
10697: PPUSH
10698: LD_INT 3
10700: PPUSH
10701: CALL_OW 12
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: LIST
10710: PUSH
10711: LD_OWVAR 67
10715: ARRAY
10716: PPUSH
10717: CALL 7035 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
10721: LD_INT 3
10723: PPUSH
10724: LD_INT 3
10726: PPUSH
10727: LD_INT 23
10729: PPUSH
10730: LD_EXP 13
10734: PPUSH
10735: LD_EXP 14
10739: PPUSH
10740: CALL_OW 12
10744: PPUSH
10745: LD_INT 4
10747: PPUSH
10748: LD_INT 0
10750: PUSH
10751: LD_INT 1
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: LIST
10761: PUSH
10762: LD_OWVAR 67
10766: ARRAY
10767: PPUSH
10768: CALL 7035 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
10772: LD_INT 3
10774: PPUSH
10775: LD_INT 3
10777: PPUSH
10778: LD_INT 1
10780: PPUSH
10781: LD_EXP 13
10785: PPUSH
10786: LD_EXP 14
10790: PPUSH
10791: CALL_OW 12
10795: PPUSH
10796: LD_INT 2
10798: PPUSH
10799: LD_INT 1
10801: PUSH
10802: LD_INT 2
10804: PUSH
10805: LD_INT 2
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: PUSH
10813: LD_OWVAR 67
10817: ARRAY
10818: PPUSH
10819: CALL 7035 0 6
// for i in UnitsInside ( arm1 ) do
10823: LD_ADDR_VAR 0 2
10827: PUSH
10828: LD_INT 2
10830: PPUSH
10831: CALL_OW 313
10835: PUSH
10836: FOR_IN
10837: IFFALSE 10857
// northBaseDefenders = northBaseDefenders ^ i ;
10839: LD_ADDR_EXP 23
10843: PUSH
10844: LD_EXP 23
10848: PUSH
10849: LD_VAR 0 2
10853: ADD
10854: ST_TO_ADDR
10855: GO 10836
10857: POP
10858: POP
// end ;
10859: LD_VAR 0 1
10863: RET
// export function PrepareOtherRussians ; var i , un ; begin
10864: LD_INT 0
10866: PPUSH
10867: PPUSH
10868: PPUSH
// for i = 1 to 2 do
10869: LD_ADDR_VAR 0 2
10873: PUSH
10874: DOUBLE
10875: LD_INT 1
10877: DEC
10878: ST_TO_ADDR
10879: LD_INT 2
10881: PUSH
10882: FOR_TO
10883: IFFALSE 10984
// begin uc_side = 3 ;
10885: LD_ADDR_OWVAR 20
10889: PUSH
10890: LD_INT 3
10892: ST_TO_ADDR
// uc_nation = 3 ;
10893: LD_ADDR_OWVAR 21
10897: PUSH
10898: LD_INT 3
10900: ST_TO_ADDR
// hc_gallery =  ;
10901: LD_ADDR_OWVAR 33
10905: PUSH
10906: LD_STRING 
10908: ST_TO_ADDR
// hc_name =  ;
10909: LD_ADDR_OWVAR 26
10913: PUSH
10914: LD_STRING 
10916: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
10917: LD_INT 0
10919: PPUSH
10920: LD_INT 1
10922: PPUSH
10923: LD_EXP 13
10927: PPUSH
10928: LD_EXP 14
10932: PPUSH
10933: CALL_OW 12
10937: PPUSH
10938: CALL_OW 380
// un = CreateHuman ;
10942: LD_ADDR_VAR 0 3
10946: PUSH
10947: CALL_OW 44
10951: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
10952: LD_VAR 0 3
10956: PPUSH
10957: LD_INT 9
10959: PPUSH
10960: LD_INT 0
10962: PPUSH
10963: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
10967: LD_VAR 0 3
10971: PPUSH
10972: LD_INT 80
10974: PPUSH
10975: LD_INT 73
10977: PPUSH
10978: CALL_OW 118
// end ;
10982: GO 10882
10984: POP
10985: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
10986: LD_ADDR_VAR 0 2
10990: PUSH
10991: LD_INT 22
10993: PUSH
10994: LD_INT 3
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: LD_INT 30
11003: PUSH
11004: LD_INT 31
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PPUSH
11015: CALL_OW 69
11019: PUSH
11020: FOR_IN
11021: IFFALSE 11049
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
11023: LD_EXP 13
11027: PPUSH
11028: LD_EXP 14
11032: PPUSH
11033: CALL_OW 12
11037: PPUSH
11038: LD_VAR 0 2
11042: PPUSH
11043: CALL 7145 0 2
11047: GO 11020
11049: POP
11050: POP
// end ;
11051: LD_VAR 0 1
11055: RET
// export function PrepareCargoBays ; begin
11056: LD_INT 0
11058: PPUSH
// uc_side = 3 ;
11059: LD_ADDR_OWVAR 20
11063: PUSH
11064: LD_INT 3
11066: ST_TO_ADDR
// uc_nation = 3 ;
11067: LD_ADDR_OWVAR 21
11071: PUSH
11072: LD_INT 3
11074: ST_TO_ADDR
// vc_engine = 1 ;
11075: LD_ADDR_OWVAR 39
11079: PUSH
11080: LD_INT 1
11082: ST_TO_ADDR
// vc_control = 1 ;
11083: LD_ADDR_OWVAR 38
11087: PUSH
11088: LD_INT 1
11090: ST_TO_ADDR
// vc_weapon = 51 ;
11091: LD_ADDR_OWVAR 40
11095: PUSH
11096: LD_INT 51
11098: ST_TO_ADDR
// vc_chassis = 21 ;
11099: LD_ADDR_OWVAR 37
11103: PUSH
11104: LD_INT 21
11106: ST_TO_ADDR
// cargo1 = CreateVehicle ;
11107: LD_ADDR_EXP 15
11111: PUSH
11112: CALL_OW 45
11116: ST_TO_ADDR
// cargo2 = CreateVehicle ;
11117: LD_ADDR_EXP 16
11121: PUSH
11122: CALL_OW 45
11126: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
11127: LD_EXP 15
11131: PPUSH
11132: LD_INT 13
11134: PPUSH
11135: LD_INT 0
11137: PPUSH
11138: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
11142: LD_EXP 16
11146: PPUSH
11147: LD_INT 13
11149: PPUSH
11150: LD_INT 0
11152: PPUSH
11153: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
11157: LD_EXP 15
11161: PPUSH
11162: LD_INT 2
11164: PPUSH
11165: LD_INT 70
11167: PUSH
11168: LD_INT 50
11170: PUSH
11171: LD_INT 30
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: LIST
11178: PUSH
11179: LD_OWVAR 67
11183: ARRAY
11184: PPUSH
11185: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
11189: LD_EXP 16
11193: PPUSH
11194: LD_INT 2
11196: PPUSH
11197: LD_INT 70
11199: PUSH
11200: LD_INT 50
11202: PUSH
11203: LD_INT 30
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: LIST
11210: PUSH
11211: LD_OWVAR 67
11215: ARRAY
11216: PPUSH
11217: CALL_OW 291
// hc_gallery =  ;
11221: LD_ADDR_OWVAR 33
11225: PUSH
11226: LD_STRING 
11228: ST_TO_ADDR
// hc_name =  ;
11229: LD_ADDR_OWVAR 26
11233: PUSH
11234: LD_STRING 
11236: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11237: LD_INT 1
11239: PPUSH
11240: LD_INT 3
11242: PPUSH
11243: LD_INT 1
11245: PPUSH
11246: LD_INT 2
11248: PPUSH
11249: CALL_OW 12
11253: PPUSH
11254: CALL_OW 380
// driver1 = CreateHuman ;
11258: LD_ADDR_EXP 17
11262: PUSH
11263: CALL_OW 44
11267: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
11268: LD_EXP 17
11272: PPUSH
11273: LD_EXP 15
11277: PPUSH
11278: CALL_OW 52
// hc_name = Nikolai Andreyev ;
11282: LD_ADDR_OWVAR 26
11286: PUSH
11287: LD_STRING Nikolai Andreyev
11289: ST_TO_ADDR
// driver2 = CreateHuman ;
11290: LD_ADDR_EXP 18
11294: PUSH
11295: CALL_OW 44
11299: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
11300: LD_EXP 18
11304: PPUSH
11305: LD_EXP 16
11309: PPUSH
11310: CALL_OW 52
// end ;
11314: LD_VAR 0 1
11318: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un ; begin
11319: LD_INT 0
11321: PPUSH
11322: PPUSH
11323: PPUSH
11324: PPUSH
// uc_side = 3 ;
11325: LD_ADDR_OWVAR 20
11329: PUSH
11330: LD_INT 3
11332: ST_TO_ADDR
// uc_nation = 3 ;
11333: LD_ADDR_OWVAR 21
11337: PUSH
11338: LD_INT 3
11340: ST_TO_ADDR
// for i := 1 to count do
11341: LD_ADDR_VAR 0 4
11345: PUSH
11346: DOUBLE
11347: LD_INT 1
11349: DEC
11350: ST_TO_ADDR
11351: LD_VAR 0 1
11355: PUSH
11356: FOR_TO
11357: IFFALSE 11517
// begin vc_engine = 1 ;
11359: LD_ADDR_OWVAR 39
11363: PUSH
11364: LD_INT 1
11366: ST_TO_ADDR
// vc_control = 1 ;
11367: LD_ADDR_OWVAR 38
11371: PUSH
11372: LD_INT 1
11374: ST_TO_ADDR
// vc_weapon = 42 ;
11375: LD_ADDR_OWVAR 40
11379: PUSH
11380: LD_INT 42
11382: ST_TO_ADDR
// vc_chassis = 21 ;
11383: LD_ADDR_OWVAR 37
11387: PUSH
11388: LD_INT 21
11390: ST_TO_ADDR
// veh = CreateVehicle ;
11391: LD_ADDR_VAR 0 5
11395: PUSH
11396: CALL_OW 45
11400: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
11401: LD_VAR 0 5
11405: PPUSH
11406: LD_VAR 0 2
11410: PPUSH
11411: LD_INT 0
11413: PPUSH
11414: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
11418: LD_ADDR_EXP 25
11422: PUSH
11423: LD_EXP 25
11427: PUSH
11428: LD_VAR 0 5
11432: ADD
11433: ST_TO_ADDR
// hc_gallery =  ;
11434: LD_ADDR_OWVAR 33
11438: PUSH
11439: LD_STRING 
11441: ST_TO_ADDR
// hc_name =  ;
11442: LD_ADDR_OWVAR 26
11446: PUSH
11447: LD_STRING 
11449: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11450: LD_INT 0
11452: PPUSH
11453: LD_INT 3
11455: PPUSH
11456: LD_EXP 13
11460: PPUSH
11461: LD_EXP 14
11465: PPUSH
11466: CALL_OW 12
11470: PPUSH
11471: CALL_OW 380
// un = CreateHuman ;
11475: LD_ADDR_VAR 0 6
11479: PUSH
11480: CALL_OW 44
11484: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11485: LD_VAR 0 6
11489: PPUSH
11490: LD_VAR 0 5
11494: PPUSH
11495: CALL_OW 52
// attackGroup = attackGroup ^ un ;
11499: LD_ADDR_EXP 25
11503: PUSH
11504: LD_EXP 25
11508: PUSH
11509: LD_VAR 0 6
11513: ADD
11514: ST_TO_ADDR
// end ;
11515: GO 11356
11517: POP
11518: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11519: LD_INT 0
11521: PPUSH
11522: LD_INT 2
11524: PPUSH
11525: LD_EXP 13
11529: PPUSH
11530: LD_EXP 14
11534: PPUSH
11535: CALL_OW 12
11539: PPUSH
11540: CALL_OW 380
// un = CreateHuman ;
11544: LD_ADDR_VAR 0 6
11548: PUSH
11549: CALL_OW 44
11553: ST_TO_ADDR
// for i := 1 to count * 2 do
11554: LD_ADDR_VAR 0 4
11558: PUSH
11559: DOUBLE
11560: LD_INT 1
11562: DEC
11563: ST_TO_ADDR
11564: LD_VAR 0 1
11568: PUSH
11569: LD_INT 2
11571: MUL
11572: PUSH
11573: FOR_TO
11574: IFFALSE 11662
// begin hc_gallery =  ;
11576: LD_ADDR_OWVAR 33
11580: PUSH
11581: LD_STRING 
11583: ST_TO_ADDR
// hc_name =  ;
11584: LD_ADDR_OWVAR 26
11588: PUSH
11589: LD_STRING 
11591: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11592: LD_INT 0
11594: PPUSH
11595: LD_INT 1
11597: PPUSH
11598: LD_EXP 13
11602: PPUSH
11603: LD_EXP 14
11607: PPUSH
11608: CALL_OW 12
11612: PPUSH
11613: CALL_OW 380
// un = CreateHuman ;
11617: LD_ADDR_VAR 0 6
11621: PUSH
11622: CALL_OW 44
11626: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
11627: LD_VAR 0 6
11631: PPUSH
11632: LD_VAR 0 2
11636: PPUSH
11637: LD_INT 0
11639: PPUSH
11640: CALL_OW 49
// attackGroup = attackGroup ^ un ;
11644: LD_ADDR_EXP 25
11648: PUSH
11649: LD_EXP 25
11653: PUSH
11654: LD_VAR 0 6
11658: ADD
11659: ST_TO_ADDR
// end ;
11660: GO 11573
11662: POP
11663: POP
// for i in attackGroup do
11664: LD_ADDR_VAR 0 4
11668: PUSH
11669: LD_EXP 25
11673: PUSH
11674: FOR_IN
11675: IFFALSE 11694
// ComAgressiveMove ( i , 54 , 19 ) ;
11677: LD_VAR 0 4
11681: PPUSH
11682: LD_INT 54
11684: PPUSH
11685: LD_INT 19
11687: PPUSH
11688: CALL_OW 114
11692: GO 11674
11694: POP
11695: POP
// end ; end_of_file
11696: LD_VAR 0 3
11700: RET
// every 0 0$1 do
11701: GO 11703
11703: DISABLE
// begin enable ;
11704: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
11705: LD_INT 3
11707: PPUSH
11708: LD_INT 1
11710: PPUSH
11711: LD_INT 22
11713: PPUSH
11714: CALL 7281 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
11718: LD_INT 3
11720: PPUSH
11721: LD_INT 20
11723: PPUSH
11724: LD_INT 22
11726: PPUSH
11727: LD_INT 23
11729: PPUSH
11730: CALL 7527 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
11734: LD_INT 3
11736: PPUSH
11737: LD_INT 21
11739: PPUSH
11740: LD_INT 23
11742: PPUSH
11743: CALL 7806 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
11747: LD_INT 22
11749: PPUSH
11750: LD_INT 1
11752: PPUSH
11753: LD_EXP 23
11757: PPUSH
11758: LD_INT 2
11760: PPUSH
11761: CALL 8278 0 4
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
11765: LD_INT 23
11767: PPUSH
11768: LD_INT 1
11770: PPUSH
11771: LD_EXP 24
11775: PPUSH
11776: LD_INT 33
11778: PPUSH
11779: CALL 8278 0 4
// fogoff ( true ) ;
11783: LD_INT 1
11785: PPUSH
11786: CALL_OW 344
// end ; end_of_file
11790: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 then
11791: LD_VAR 0 1
11795: PPUSH
11796: CALL_OW 255
11800: PUSH
11801: LD_INT 1
11803: EQUAL
11804: IFFALSE 11820
// deadsCounter = deadsCounter + 1 ;
11806: LD_ADDR_EXP 27
11810: PUSH
11811: LD_EXP 27
11815: PUSH
11816: LD_INT 1
11818: PLUS
11819: ST_TO_ADDR
// end ; end_of_file
11820: PPOPN 1
11822: END
// every 0 0$1 trigger IsDead ( JMM ) do
11823: LD_EXP 1
11827: PPUSH
11828: CALL_OW 301
11832: IFFALSE 11844
11834: GO 11836
11836: DISABLE
// YouLost ( JMM ) ;
11837: LD_STRING JMM
11839: PPUSH
11840: CALL_OW 104
11844: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
11845: LD_INT 1
11847: PPUSH
11848: CALL_OW 301
11852: PUSH
11853: LD_INT 10
11855: PPUSH
11856: CALL_OW 301
11860: OR
11861: IFFALSE 11873
11863: GO 11865
11865: DISABLE
// YouLost ( DepotDestroyed ) ;
11866: LD_STRING DepotDestroyed
11868: PPUSH
11869: CALL_OW 104
11873: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
11874: LD_INT 22
11876: PUSH
11877: LD_INT 1
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PUSH
11884: LD_INT 21
11886: PUSH
11887: LD_INT 1
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PUSH
11894: LD_INT 25
11896: PUSH
11897: LD_INT 2
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: LIST
11908: PPUSH
11909: CALL_OW 69
11913: PUSH
11914: LD_INT 0
11916: EQUAL
11917: PUSH
11918: LD_INT 22
11920: PUSH
11921: LD_INT 4
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 21
11930: PUSH
11931: LD_INT 1
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 25
11940: PUSH
11941: LD_INT 2
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: LIST
11952: PPUSH
11953: CALL_OW 69
11957: PUSH
11958: LD_INT 0
11960: EQUAL
11961: AND
11962: PUSH
11963: LD_INT 1
11965: PPUSH
11966: CALL_OW 255
11970: PUSH
11971: LD_INT 3
11973: EQUAL
11974: AND
11975: PUSH
11976: LD_INT 10
11978: PPUSH
11979: CALL_OW 255
11983: PUSH
11984: LD_INT 3
11986: EQUAL
11987: AND
11988: IFFALSE 12000
11990: GO 11992
11992: DISABLE
// YouLost ( Engineer ) ;
11993: LD_STRING Engineer
11995: PPUSH
11996: CALL_OW 104
12000: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and LastBattle = 1 do
12001: LD_INT 22
12003: PPUSH
12004: LD_INT 22
12006: PUSH
12007: LD_INT 1
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 21
12016: PUSH
12017: LD_INT 1
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PPUSH
12028: CALL_OW 70
12032: PUSH
12033: LD_INT 0
12035: EQUAL
12036: PUSH
12037: LD_INT 22
12039: PPUSH
12040: LD_INT 22
12042: PUSH
12043: LD_INT 3
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 21
12052: PUSH
12053: LD_INT 1
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PPUSH
12064: CALL_OW 70
12068: PUSH
12069: LD_INT 0
12071: GREATER
12072: AND
12073: PUSH
12074: LD_EXP 26
12078: PUSH
12079: LD_INT 1
12081: EQUAL
12082: AND
12083: IFFALSE 12095
12085: GO 12087
12087: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
12088: LD_STRING DepotCaptured
12090: PPUSH
12091: CALL_OW 104
12095: END
// export function PrepareTigers ; var i , un ; begin
12096: LD_INT 0
12098: PPUSH
12099: PPUSH
12100: PPUSH
// for i = 1 to Difficulty do
12101: LD_ADDR_VAR 0 2
12105: PUSH
12106: DOUBLE
12107: LD_INT 1
12109: DEC
12110: ST_TO_ADDR
12111: LD_OWVAR 67
12115: PUSH
12116: FOR_TO
12117: IFFALSE 12252
// begin hc_sex = sex_male ;
12119: LD_ADDR_OWVAR 27
12123: PUSH
12124: LD_INT 1
12126: ST_TO_ADDR
// uc_side = 0 ;
12127: LD_ADDR_OWVAR 20
12131: PUSH
12132: LD_INT 0
12134: ST_TO_ADDR
// uc_nation = nation_nature ;
12135: LD_ADDR_OWVAR 21
12139: PUSH
12140: LD_INT 0
12142: ST_TO_ADDR
// hc_class = class_tiger ;
12143: LD_ADDR_OWVAR 28
12147: PUSH
12148: LD_INT 14
12150: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
12151: LD_ADDR_OWVAR 31
12155: PUSH
12156: LD_EXP 14
12160: PUSH
12161: LD_INT 0
12163: PUSH
12164: LD_INT 0
12166: PUSH
12167: LD_INT 0
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: ST_TO_ADDR
// hc_agressivity = [ rand ( 10 , 20 ) , rand ( 20 , 30 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
12176: LD_ADDR_OWVAR 35
12180: PUSH
12181: LD_INT 10
12183: PPUSH
12184: LD_INT 20
12186: PPUSH
12187: CALL_OW 12
12191: PUSH
12192: LD_INT 20
12194: PPUSH
12195: LD_INT 30
12197: PPUSH
12198: CALL_OW 12
12202: PUSH
12203: LD_INT 40
12205: PPUSH
12206: LD_INT 50
12208: PPUSH
12209: CALL_OW 12
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: LIST
12218: PUSH
12219: LD_OWVAR 67
12223: ARRAY
12224: ST_TO_ADDR
// un = CreateHuman ;
12225: LD_ADDR_VAR 0 3
12229: PUSH
12230: CALL_OW 44
12234: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12235: LD_VAR 0 3
12239: PPUSH
12240: LD_INT 27
12242: PPUSH
12243: LD_INT 0
12245: PPUSH
12246: CALL_OW 49
// end ;
12250: GO 12116
12252: POP
12253: POP
// end ;
12254: LD_VAR 0 1
12258: RET
