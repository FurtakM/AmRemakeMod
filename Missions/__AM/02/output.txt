// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 32
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// lastBattle = 0 ;
  96: LD_ADDR_EXP 27
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// deadsCounter = 0 ;
 104: LD_ADDR_EXP 30
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// spotCorpses = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 120: LD_ADDR_EXP 25
 124: PUSH
 125: EMPTY
 126: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 127: LD_ADDR_EXP 24
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// attackGroup = [ ] ;
 134: LD_ADDR_EXP 26
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// RandomizeAll ;
 141: CALL_OW 11
// InGameOn ;
 145: CALL_OW 8
// Resetfog ;
 149: CALL_OW 335
// PrepareDifficulty ;
 153: CALL 10136 0 0
// PrepareRussianCommander ;
 157: CALL 11355 0 0
// PrepareSouthBase ;
 161: CALL 11438 0 0
// PrepareNorthBase ;
 165: CALL 11795 0 0
// PrepareOtherRussians ;
 169: CALL 12161 0 0
// PrepareHeroes ;
 173: CALL 10451 0 0
// PrepareLisSquad ;
 177: CALL 10694 0 0
// PrepareOtherAmericans ;
 181: CALL 10922 0 0
// end ; end_of_file
 185: END
// every 1 do var tmp ;
 186: GO 188
 188: DISABLE
 189: LD_INT 0
 191: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 192: LD_EXP 1
 196: PPUSH
 197: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 201: LD_ADDR_VAR 0 1
 205: PUSH
 206: LD_INT 22
 208: PUSH
 209: LD_INT 4
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: PUSH
 216: LD_INT 21
 218: PUSH
 219: LD_INT 1
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: PPUSH
 230: CALL_OW 69
 234: PUSH
 235: LD_EXP 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: DIFF
 243: ST_TO_ADDR
// if Cyrus and Bobby then
 244: LD_EXP 3
 248: PUSH
 249: LD_EXP 2
 253: AND
 254: IFFALSE 584
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 256: LD_EXP 3
 260: PPUSH
 261: LD_INT 43
 263: PPUSH
 264: LD_INT 72
 266: PPUSH
 267: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 271: LD_EXP 2
 275: PPUSH
 276: LD_INT 44
 278: PPUSH
 279: LD_INT 70
 281: PPUSH
 282: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 286: LD_EXP 1
 290: PPUSH
 291: LD_INT 46
 293: PPUSH
 294: LD_INT 73
 296: PPUSH
 297: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 301: LD_EXP 3
 305: PPUSH
 306: LD_STRING D1a-Cyrus-1
 308: PPUSH
 309: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 313: LD_EXP 1
 317: PPUSH
 318: LD_STRING D1a-JMM-1
 320: PPUSH
 321: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 325: LD_EXP 3
 329: PPUSH
 330: LD_INT 37
 332: PPUSH
 333: LD_INT 66
 335: PPUSH
 336: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 340: LD_EXP 2
 344: PPUSH
 345: LD_INT 41
 347: PPUSH
 348: LD_INT 67
 350: PPUSH
 351: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 355: LD_EXP 1
 359: PPUSH
 360: LD_INT 38
 362: PPUSH
 363: LD_INT 64
 365: PPUSH
 366: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 370: LD_EXP 2
 374: PPUSH
 375: LD_STRING D1a-Bobby-2
 377: PPUSH
 378: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 382: LD_EXP 3
 386: PPUSH
 387: LD_INT 35
 389: PPUSH
 390: LD_INT 62
 392: PPUSH
 393: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 397: LD_EXP 2
 401: PPUSH
 402: LD_INT 32
 404: PPUSH
 405: LD_INT 60
 407: PPUSH
 408: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 412: LD_EXP 1
 416: PPUSH
 417: LD_INT 35
 419: PPUSH
 420: LD_INT 60
 422: PPUSH
 423: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 427: LD_EXP 1
 431: PPUSH
 432: LD_STRING D1a-JMM-2
 434: PPUSH
 435: CALL_OW 88
// ComWalk ( Lisa ) ;
 439: LD_EXP 4
 443: PPUSH
 444: CALL_OW 138
// wait ( 0 0$1 ) ;
 448: LD_INT 35
 450: PPUSH
 451: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 455: LD_EXP 4
 459: PPUSH
 460: LD_EXP 1
 464: PPUSH
 465: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 469: LD_EXP 1
 473: PUSH
 474: LD_EXP 3
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: EMPTY
 485: LIST
 486: LIST
 487: LIST
 488: PPUSH
 489: LD_EXP 4
 493: PPUSH
 494: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 498: LD_VAR 0 1
 502: PUSH
 503: LD_INT 1
 505: ARRAY
 506: PPUSH
 507: LD_INT 33
 509: PPUSH
 510: LD_INT 55
 512: PPUSH
 513: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 517: LD_VAR 0 1
 521: PUSH
 522: LD_INT 2
 524: ARRAY
 525: PPUSH
 526: LD_INT 30
 528: PPUSH
 529: LD_INT 54
 531: PPUSH
 532: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 536: LD_VAR 0 1
 540: PUSH
 541: LD_INT 1
 543: ARRAY
 544: PPUSH
 545: LD_EXP 1
 549: PPUSH
 550: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 554: LD_VAR 0 1
 558: PUSH
 559: LD_INT 2
 561: ARRAY
 562: PPUSH
 563: LD_EXP 1
 567: PPUSH
 568: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 572: LD_EXP 4
 576: PPUSH
 577: LD_STRING D1a-Lisa-2
 579: PPUSH
 580: CALL_OW 88
// end ; if Cyrus and not Bobby then
 584: LD_EXP 3
 588: PUSH
 589: LD_EXP 2
 593: NOT
 594: AND
 595: IFFALSE 800
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 597: LD_EXP 3
 601: PPUSH
 602: LD_INT 43
 604: PPUSH
 605: LD_INT 72
 607: PPUSH
 608: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 612: LD_EXP 1
 616: PPUSH
 617: LD_INT 46
 619: PPUSH
 620: LD_INT 73
 622: PPUSH
 623: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 627: LD_EXP 3
 631: PPUSH
 632: LD_STRING D1a-Cyrus-1
 634: PPUSH
 635: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 639: LD_EXP 1
 643: PPUSH
 644: LD_STRING D1a-JMM-1
 646: PPUSH
 647: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 651: LD_EXP 3
 655: PPUSH
 656: LD_INT 37
 658: PPUSH
 659: LD_INT 66
 661: PPUSH
 662: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 666: LD_EXP 1
 670: PPUSH
 671: LD_INT 38
 673: PPUSH
 674: LD_INT 64
 676: PPUSH
 677: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 681: LD_EXP 3
 685: PPUSH
 686: LD_STRING D1a-Cyrus-2
 688: PPUSH
 689: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 693: LD_EXP 3
 697: PPUSH
 698: LD_INT 35
 700: PPUSH
 701: LD_INT 62
 703: PPUSH
 704: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 708: LD_EXP 1
 712: PPUSH
 713: LD_INT 35
 715: PPUSH
 716: LD_INT 60
 718: PPUSH
 719: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 723: LD_EXP 1
 727: PPUSH
 728: LD_STRING D1a-JMM-2
 730: PPUSH
 731: CALL_OW 88
// ComWalk ( Lisa ) ;
 735: LD_EXP 4
 739: PPUSH
 740: CALL_OW 138
// wait ( 0 0$1 ) ;
 744: LD_INT 35
 746: PPUSH
 747: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 751: LD_EXP 4
 755: PPUSH
 756: LD_EXP 1
 760: PPUSH
 761: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 765: LD_EXP 4
 769: PPUSH
 770: LD_STRING D1a-Lisa-2
 772: PPUSH
 773: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 777: LD_EXP 1
 781: PUSH
 782: LD_EXP 3
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: PPUSH
 791: LD_EXP 4
 795: PPUSH
 796: CALL_OW 119
// end ; if not Cyrus and Bobby then
 800: LD_EXP 3
 804: NOT
 805: PUSH
 806: LD_EXP 2
 810: AND
 811: IFFALSE 1090
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 813: LD_EXP 2
 817: PPUSH
 818: LD_INT 44
 820: PPUSH
 821: LD_INT 70
 823: PPUSH
 824: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 828: LD_EXP 1
 832: PPUSH
 833: LD_INT 46
 835: PPUSH
 836: LD_INT 73
 838: PPUSH
 839: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 843: LD_EXP 2
 847: PPUSH
 848: LD_STRING D1a-Bobby-1
 850: PPUSH
 851: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 855: LD_EXP 1
 859: PPUSH
 860: LD_STRING D1a-JMM-1
 862: PPUSH
 863: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 867: LD_EXP 2
 871: PPUSH
 872: LD_INT 37
 874: PPUSH
 875: LD_INT 66
 877: PPUSH
 878: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 882: LD_EXP 1
 886: PPUSH
 887: LD_INT 38
 889: PPUSH
 890: LD_INT 64
 892: PPUSH
 893: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 897: LD_EXP 2
 901: PPUSH
 902: LD_STRING D1a-Bobby-2
 904: PPUSH
 905: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 909: LD_EXP 2
 913: PPUSH
 914: LD_INT 35
 916: PPUSH
 917: LD_INT 62
 919: PPUSH
 920: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 924: LD_EXP 1
 928: PPUSH
 929: LD_INT 35
 931: PPUSH
 932: LD_INT 60
 934: PPUSH
 935: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 939: LD_EXP 1
 943: PPUSH
 944: LD_STRING D1a-JMM-2
 946: PPUSH
 947: CALL_OW 88
// ComWalk ( Lisa ) ;
 951: LD_EXP 4
 955: PPUSH
 956: CALL_OW 138
// wait ( 0 0$1 ) ;
 960: LD_INT 35
 962: PPUSH
 963: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 967: LD_EXP 4
 971: PPUSH
 972: LD_EXP 1
 976: PPUSH
 977: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 981: LD_EXP 1
 985: PUSH
 986: LD_EXP 3
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: PPUSH
 995: LD_EXP 4
 999: PPUSH
1000: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1004: LD_VAR 0 1
1008: PUSH
1009: LD_INT 1
1011: ARRAY
1012: PPUSH
1013: LD_INT 33
1015: PPUSH
1016: LD_INT 55
1018: PPUSH
1019: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1023: LD_VAR 0 1
1027: PUSH
1028: LD_INT 2
1030: ARRAY
1031: PPUSH
1032: LD_INT 30
1034: PPUSH
1035: LD_INT 54
1037: PPUSH
1038: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1042: LD_VAR 0 1
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: LD_EXP 1
1055: PPUSH
1056: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1060: LD_VAR 0 1
1064: PUSH
1065: LD_INT 2
1067: ARRAY
1068: PPUSH
1069: LD_EXP 1
1073: PPUSH
1074: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1078: LD_EXP 4
1082: PPUSH
1083: LD_STRING D1a-Lisa-2
1085: PPUSH
1086: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1090: LD_EXP 3
1094: NOT
1095: PUSH
1096: LD_EXP 2
1100: NOT
1101: AND
1102: IFFALSE 1316
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1104: LD_EXP 1
1108: PPUSH
1109: LD_INT 37
1111: PPUSH
1112: LD_INT 66
1114: PPUSH
1115: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1119: LD_EXP 1
1123: PPUSH
1124: LD_STRING D1b-JMM-1
1126: PPUSH
1127: CALL_OW 88
// ComCrawl ( JMM ) ;
1131: LD_EXP 1
1135: PPUSH
1136: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1140: LD_EXP 1
1144: PPUSH
1145: LD_INT 35
1147: PPUSH
1148: LD_INT 60
1150: PPUSH
1151: CALL_OW 171
// wait ( 0 0$8 ) ;
1155: LD_INT 280
1157: PPUSH
1158: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1162: LD_EXP 1
1166: PPUSH
1167: LD_STRING D1b-JMM-1a
1169: PPUSH
1170: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1174: LD_EXP 1
1178: PUSH
1179: LD_EXP 4
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PPUSH
1188: CALL_OW 138
// wait ( 0 0$1 ) ;
1192: LD_INT 35
1194: PPUSH
1195: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1199: LD_EXP 4
1203: PPUSH
1204: LD_EXP 1
1208: PPUSH
1209: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1213: LD_EXP 1
1217: PUSH
1218: EMPTY
1219: LIST
1220: PPUSH
1221: LD_EXP 4
1225: PPUSH
1226: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1230: LD_VAR 0 1
1234: PUSH
1235: LD_INT 1
1237: ARRAY
1238: PPUSH
1239: LD_INT 33
1241: PPUSH
1242: LD_INT 55
1244: PPUSH
1245: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1249: LD_VAR 0 1
1253: PUSH
1254: LD_INT 2
1256: ARRAY
1257: PPUSH
1258: LD_INT 30
1260: PPUSH
1261: LD_INT 54
1263: PPUSH
1264: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1268: LD_VAR 0 1
1272: PUSH
1273: LD_INT 1
1275: ARRAY
1276: PPUSH
1277: LD_EXP 1
1281: PPUSH
1282: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1286: LD_VAR 0 1
1290: PUSH
1291: LD_INT 2
1293: ARRAY
1294: PPUSH
1295: LD_EXP 1
1299: PPUSH
1300: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1304: LD_EXP 4
1308: PPUSH
1309: LD_STRING D1b-Lisa-1
1311: PPUSH
1312: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1316: LD_EXP 1
1320: PPUSH
1321: LD_STRING D1-JMM-1
1323: PPUSH
1324: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1328: LD_EXP 4
1332: PPUSH
1333: LD_STRING D1-Lisa-1
1335: PPUSH
1336: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1340: LD_EXP 1
1344: PPUSH
1345: LD_STRING D1-JMM-2
1347: PPUSH
1348: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1352: LD_EXP 9
1356: PPUSH
1357: LD_STRING D1-Pow-2
1359: PPUSH
1360: CALL_OW 94
// if Cyrus then
1364: LD_EXP 3
1368: IFFALSE 1394
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1370: LD_EXP 3
1374: PPUSH
1375: LD_STRING D1-Cyrus-2
1377: PPUSH
1378: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1382: LD_EXP 1
1386: PPUSH
1387: LD_STRING D1-JMM-3
1389: PPUSH
1390: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1394: LD_EXP 9
1398: PPUSH
1399: LD_STRING D1-Pow-3
1401: PPUSH
1402: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1406: LD_EXP 1
1410: PPUSH
1411: LD_STRING D1-JMM-4
1413: PPUSH
1414: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1418: LD_EXP 9
1422: PPUSH
1423: LD_STRING D1-Pow-4
1425: PPUSH
1426: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1430: LD_EXP 9
1434: PPUSH
1435: LD_STRING D1-Pow-4a
1437: PPUSH
1438: CALL_OW 94
// if Cyrus then
1442: LD_EXP 3
1446: IFFALSE 1460
// Say ( Cyrus , D1-Cyrus-4 ) ;
1448: LD_EXP 3
1452: PPUSH
1453: LD_STRING D1-Cyrus-4
1455: PPUSH
1456: CALL_OW 88
// if Bobby then
1460: LD_EXP 2
1464: IFFALSE 1502
// begin Say ( Bobby , D1-Bobby-4 ) ;
1466: LD_EXP 2
1470: PPUSH
1471: LD_STRING D1-Bobby-4
1473: PPUSH
1474: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1478: LD_EXP 4
1482: PPUSH
1483: LD_STRING D1-Lisa-4
1485: PPUSH
1486: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1490: LD_EXP 1
1494: PPUSH
1495: LD_STRING D1-JMM-5
1497: PPUSH
1498: CALL_OW 88
// end ; InGameOff ;
1502: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1506: LD_INT 22
1508: PUSH
1509: LD_INT 4
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PPUSH
1516: CALL_OW 69
1520: PUSH
1521: LD_EXP 6
1525: PUSH
1526: LD_EXP 7
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: DIFF
1535: PPUSH
1536: LD_INT 1
1538: PPUSH
1539: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1543: LD_STRING M1
1545: PPUSH
1546: CALL_OW 337
// SaveForQuickRestart ;
1550: CALL_OW 22
// end ;
1554: PPOPN 1
1556: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1557: LD_INT 7
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 1
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: LD_INT 0
1577: GREATER
1578: IFFALSE 1948
1580: GO 1582
1582: DISABLE
// begin InGameOn ;
1583: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1587: LD_INT 22
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PUSH
1597: LD_INT 21
1599: PUSH
1600: LD_INT 1
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PPUSH
1616: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1620: LD_INT 24
1622: PPUSH
1623: LD_INT 32
1625: PPUSH
1626: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1630: LD_EXP 5
1634: PPUSH
1635: LD_INT 4
1637: PPUSH
1638: LD_INT 1
1640: PPUSH
1641: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1645: LD_EXP 5
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: CALL_OW 336
// wait ( 0 0$1 ) ;
1657: LD_INT 35
1659: PPUSH
1660: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1664: LD_EXP 5
1668: PPUSH
1669: LD_INT 27
1671: PPUSH
1672: LD_INT 38
1674: PPUSH
1675: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1679: LD_EXP 5
1683: PPUSH
1684: LD_EXP 1
1688: PPUSH
1689: CALL_OW 179
// wait ( 0 0$1 ) ;
1693: LD_INT 35
1695: PPUSH
1696: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1700: LD_EXP 5
1704: PPUSH
1705: LD_STRING D2a-Khat-1
1707: PPUSH
1708: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1712: LD_EXP 1
1716: PPUSH
1717: LD_STRING D2a-JMM-1
1719: PPUSH
1720: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1724: LD_EXP 5
1728: PPUSH
1729: LD_STRING D2a-Khat-2
1731: PPUSH
1732: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1736: LD_EXP 1
1740: PPUSH
1741: LD_STRING D2a-JMM-2
1743: PPUSH
1744: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1748: LD_EXP 5
1752: PPUSH
1753: LD_STRING D2a-Khat-3
1755: PPUSH
1756: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1760: LD_EXP 1
1764: PPUSH
1765: LD_STRING D2a-JMM-3
1767: PPUSH
1768: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1772: LD_EXP 5
1776: PPUSH
1777: LD_STRING D2a-Khat-4
1779: PPUSH
1780: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1784: LD_EXP 1
1788: PPUSH
1789: LD_STRING D2a-JMM-4
1791: PPUSH
1792: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1796: LD_EXP 5
1800: PPUSH
1801: LD_STRING D2a-Khat-5
1803: PPUSH
1804: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1808: LD_EXP 1
1812: PPUSH
1813: LD_STRING D2a-JMM-5
1815: PPUSH
1816: CALL_OW 88
// InGameOff ;
1820: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1824: LD_INT 22
1826: PUSH
1827: LD_INT 1
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: LD_INT 21
1836: PUSH
1837: LD_INT 1
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 3
1846: PUSH
1847: LD_INT 24
1849: PUSH
1850: LD_INT 800
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: LIST
1865: PPUSH
1866: CALL_OW 69
1870: PUSH
1871: LD_INT 0
1873: GREATER
1874: IFFALSE 1948
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1876: LD_EXP 5
1880: PPUSH
1881: LD_INT 22
1883: PUSH
1884: LD_INT 1
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 21
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 3
1903: PUSH
1904: LD_INT 24
1906: PUSH
1907: LD_INT 1000
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PPUSH
1923: CALL_OW 69
1927: PUSH
1928: LD_INT 1
1930: ARRAY
1931: PPUSH
1932: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1936: LD_EXP 5
1940: PPUSH
1941: LD_STRING D2b-Khat-1
1943: PPUSH
1944: CALL_OW 88
// end ; end ;
1948: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
1949: LD_INT 15
1951: PPUSH
1952: LD_INT 22
1954: PUSH
1955: LD_INT 1
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PPUSH
1962: CALL_OW 70
1966: PUSH
1967: LD_INT 0
1969: GREATER
1970: IFFALSE 3130
1972: GO 1974
1974: DISABLE
1975: LD_INT 0
1977: PPUSH
1978: PPUSH
1979: PPUSH
1980: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
1981: LD_ADDR_VAR 0 2
1985: PUSH
1986: LD_INT 999
1988: PUSH
1989: LD_INT 999
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: PUSH
1996: EMPTY
1997: LIST
1998: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
1999: LD_ADDR_VAR 0 4
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 1
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_EXP 1
2037: PUSH
2038: LD_EXP 2
2042: PUSH
2043: LD_EXP 3
2047: PUSH
2048: LD_EXP 4
2052: PUSH
2053: LD_EXP 5
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: DIFF
2065: ST_TO_ADDR
// PrepareDeadSoldiers ;
2066: CALL 11080 0 0
// spotCorpses = 1 ;
2070: LD_ADDR_EXP 31
2074: PUSH
2075: LD_INT 1
2077: ST_TO_ADDR
// InGameOn ;
2078: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2082: LD_INT 23
2084: PPUSH
2085: LD_INT 12
2087: PPUSH
2088: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2092: LD_ADDR_VAR 0 3
2096: PUSH
2097: LD_VAR 0 2
2101: PUSH
2102: LD_INT 1
2104: ARRAY
2105: PUSH
2106: LD_INT 2
2108: ARRAY
2109: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2110: LD_ADDR_VAR 0 1
2114: PUSH
2115: LD_INT 22
2117: PUSH
2118: LD_INT 1
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 21
2127: PUSH
2128: LD_INT 1
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PPUSH
2139: CALL_OW 69
2143: PUSH
2144: LD_EXP 1
2148: PUSH
2149: LD_EXP 5
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: DIFF
2158: PUSH
2159: FOR_IN
2160: IFFALSE 2211
// if IsOK ( i ) then
2162: LD_VAR 0 1
2166: PPUSH
2167: CALL_OW 302
2171: IFFALSE 2209
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2173: LD_ADDR_VAR 0 2
2177: PUSH
2178: LD_VAR 0 2
2182: PUSH
2183: LD_VAR 0 1
2187: PUSH
2188: LD_VAR 0 1
2192: PPUSH
2193: LD_INT 16
2195: PPUSH
2196: CALL_OW 299
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: ADD
2208: ST_TO_ADDR
2209: GO 2159
2211: POP
2212: POP
// for i = 2 to distanceTab do
2213: LD_ADDR_VAR 0 1
2217: PUSH
2218: DOUBLE
2219: LD_INT 2
2221: DEC
2222: ST_TO_ADDR
2223: LD_VAR 0 2
2227: PUSH
2228: FOR_TO
2229: IFFALSE 2275
// if distanceTab [ i ] [ 2 ] < min then
2231: LD_VAR 0 2
2235: PUSH
2236: LD_VAR 0 1
2240: ARRAY
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: PUSH
2246: LD_VAR 0 3
2250: LESS
2251: IFFALSE 2273
// min = distanceTab [ i ] [ 2 ] ;
2253: LD_ADDR_VAR 0 3
2257: PUSH
2258: LD_VAR 0 2
2262: PUSH
2263: LD_VAR 0 1
2267: ARRAY
2268: PUSH
2269: LD_INT 2
2271: ARRAY
2272: ST_TO_ADDR
2273: GO 2228
2275: POP
2276: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2277: LD_ADDR_VAR 0 1
2281: PUSH
2282: LD_INT 22
2284: PUSH
2285: LD_INT 1
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: LD_INT 21
2294: PUSH
2295: LD_INT 1
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PPUSH
2306: CALL_OW 69
2310: PUSH
2311: LD_EXP 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: DIFF
2319: PUSH
2320: FOR_IN
2321: IFFALSE 2391
// begin ComMoveToArea ( i , DeadCutscene ) ;
2323: LD_VAR 0 1
2327: PPUSH
2328: LD_INT 28
2330: PPUSH
2331: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2335: LD_EXP 1
2339: PPUSH
2340: LD_INT 30
2342: PPUSH
2343: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2347: LD_VAR 0 1
2351: PPUSH
2352: LD_INT 23
2354: PPUSH
2355: LD_INT 11
2357: PPUSH
2358: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2362: LD_EXP 1
2366: PPUSH
2367: LD_INT 23
2369: PPUSH
2370: LD_INT 11
2372: PPUSH
2373: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2377: LD_EXP 33
2381: PPUSH
2382: LD_INT 250
2384: PPUSH
2385: CALL_OW 234
// end ;
2389: GO 2320
2391: POP
2392: POP
// for i = 2 to distanceTab do
2393: LD_ADDR_VAR 0 1
2397: PUSH
2398: DOUBLE
2399: LD_INT 2
2401: DEC
2402: ST_TO_ADDR
2403: LD_VAR 0 2
2407: PUSH
2408: FOR_TO
2409: IFFALSE 2795
// begin if distanceTab [ i ] [ 2 ] = min then
2411: LD_VAR 0 2
2415: PUSH
2416: LD_VAR 0 1
2420: ARRAY
2421: PUSH
2422: LD_INT 2
2424: ARRAY
2425: PUSH
2426: LD_VAR 0 3
2430: EQUAL
2431: IFFALSE 2793
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2433: LD_VAR 0 2
2437: PUSH
2438: LD_VAR 0 1
2442: ARRAY
2443: PUSH
2444: LD_INT 1
2446: ARRAY
2447: PUSH
2448: LD_EXP 2
2452: EQUAL
2453: IFFALSE 2467
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2455: LD_EXP 2
2459: PPUSH
2460: LD_STRING DCorpses-Bobby-1
2462: PPUSH
2463: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2467: LD_VAR 0 2
2471: PUSH
2472: LD_VAR 0 1
2476: ARRAY
2477: PUSH
2478: LD_INT 1
2480: ARRAY
2481: PUSH
2482: LD_EXP 3
2486: EQUAL
2487: IFFALSE 2501
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2489: LD_EXP 3
2493: PPUSH
2494: LD_STRING DCorpses-Cyrus-1
2496: PPUSH
2497: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2501: LD_VAR 0 2
2505: PUSH
2506: LD_VAR 0 1
2510: ARRAY
2511: PUSH
2512: LD_INT 1
2514: ARRAY
2515: PUSH
2516: LD_EXP 4
2520: EQUAL
2521: IFFALSE 2535
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2523: LD_EXP 4
2527: PPUSH
2528: LD_STRING DCorpses-Lisa-1
2530: PPUSH
2531: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2535: LD_VAR 0 2
2539: PUSH
2540: LD_VAR 0 1
2544: ARRAY
2545: PUSH
2546: LD_INT 1
2548: ARRAY
2549: PUSH
2550: LD_VAR 0 4
2554: PUSH
2555: LD_INT 1
2557: ARRAY
2558: EQUAL
2559: PUSH
2560: LD_VAR 0 4
2564: PUSH
2565: LD_INT 1
2567: ARRAY
2568: PPUSH
2569: CALL_OW 258
2573: PUSH
2574: LD_INT 1
2576: EQUAL
2577: AND
2578: IFFALSE 2596
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2580: LD_VAR 0 4
2584: PUSH
2585: LD_INT 1
2587: ARRAY
2588: PPUSH
2589: LD_STRING DCorpses-Sol1-1
2591: PPUSH
2592: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2596: LD_VAR 0 2
2600: PUSH
2601: LD_VAR 0 1
2605: ARRAY
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PUSH
2611: LD_VAR 0 4
2615: PUSH
2616: LD_INT 1
2618: ARRAY
2619: EQUAL
2620: PUSH
2621: LD_VAR 0 4
2625: PUSH
2626: LD_INT 1
2628: ARRAY
2629: PPUSH
2630: CALL_OW 258
2634: PUSH
2635: LD_INT 2
2637: EQUAL
2638: AND
2639: IFFALSE 2657
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2641: LD_VAR 0 4
2645: PUSH
2646: LD_INT 1
2648: ARRAY
2649: PPUSH
2650: LD_STRING DCorpses-FSol1-1
2652: PPUSH
2653: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2657: LD_VAR 0 2
2661: PUSH
2662: LD_VAR 0 1
2666: ARRAY
2667: PUSH
2668: LD_INT 1
2670: ARRAY
2671: PUSH
2672: LD_VAR 0 4
2676: PUSH
2677: LD_INT 2
2679: ARRAY
2680: EQUAL
2681: PUSH
2682: LD_VAR 0 4
2686: PUSH
2687: LD_INT 2
2689: ARRAY
2690: PPUSH
2691: CALL_OW 258
2695: PUSH
2696: LD_INT 1
2698: EQUAL
2699: AND
2700: IFFALSE 2718
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2702: LD_VAR 0 4
2706: PUSH
2707: LD_INT 2
2709: ARRAY
2710: PPUSH
2711: LD_STRING DCorpses-Sol1-1
2713: PPUSH
2714: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2718: LD_VAR 0 2
2722: PUSH
2723: LD_VAR 0 1
2727: ARRAY
2728: PUSH
2729: LD_INT 1
2731: ARRAY
2732: PUSH
2733: LD_VAR 0 4
2737: PUSH
2738: LD_INT 2
2740: ARRAY
2741: EQUAL
2742: PUSH
2743: LD_VAR 0 4
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: PPUSH
2752: CALL_OW 258
2756: PUSH
2757: LD_INT 2
2759: EQUAL
2760: AND
2761: IFFALSE 2779
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2763: LD_VAR 0 4
2767: PUSH
2768: LD_INT 2
2770: ARRAY
2771: PPUSH
2772: LD_STRING DCorpses-FSol1-1
2774: PPUSH
2775: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2779: LD_EXP 33
2783: PPUSH
2784: LD_INT 150
2786: PPUSH
2787: CALL_OW 234
// break ;
2791: GO 2795
// end ; end ;
2793: GO 2408
2795: POP
2796: POP
// repeat wait ( 0 0$1 ) ;
2797: LD_INT 35
2799: PPUSH
2800: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2804: LD_ADDR_VAR 0 1
2808: PUSH
2809: LD_INT 22
2811: PUSH
2812: LD_INT 1
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: LD_INT 21
2821: PUSH
2822: LD_INT 1
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: PPUSH
2833: CALL_OW 69
2837: PUSH
2838: LD_EXP 1
2842: PUSH
2843: EMPTY
2844: LIST
2845: DIFF
2846: PUSH
2847: FOR_IN
2848: IFFALSE 2918
// begin ComMoveToArea ( i , DeadCutscene ) ;
2850: LD_VAR 0 1
2854: PPUSH
2855: LD_INT 28
2857: PPUSH
2858: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2862: LD_EXP 1
2866: PPUSH
2867: LD_INT 30
2869: PPUSH
2870: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2874: LD_VAR 0 1
2878: PPUSH
2879: LD_INT 23
2881: PPUSH
2882: LD_INT 11
2884: PPUSH
2885: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2889: LD_EXP 1
2893: PPUSH
2894: LD_INT 23
2896: PPUSH
2897: LD_INT 11
2899: PPUSH
2900: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2904: LD_EXP 33
2908: PPUSH
2909: LD_INT 250
2911: PPUSH
2912: CALL_OW 234
// end ;
2916: GO 2847
2918: POP
2919: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2920: LD_EXP 1
2924: PPUSH
2925: LD_INT 30
2927: PPUSH
2928: CALL_OW 308
2932: IFFALSE 2797
// wait ( 0 0$3 ) ;
2934: LD_INT 105
2936: PPUSH
2937: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2941: LD_EXP 1
2945: PPUSH
2946: LD_STRING DCorpses-JMM-1
2948: PPUSH
2949: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2953: LD_EXP 33
2957: PPUSH
2958: LD_INT 150
2960: PPUSH
2961: CALL_OW 234
// if IsOK ( Khatam ) then
2965: LD_EXP 5
2969: PPUSH
2970: CALL_OW 302
2974: IFFALSE 3114
// begin repeat wait ( 0 0$1 ) ;
2976: LD_INT 35
2978: PPUSH
2979: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
2983: LD_EXP 5
2987: PPUSH
2988: LD_EXP 33
2992: PPUSH
2993: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
2997: LD_EXP 5
3001: PPUSH
3002: LD_EXP 33
3006: PPUSH
3007: CALL_OW 296
3011: PUSH
3012: LD_INT 2
3014: LESS
3015: IFFALSE 2976
// spotCorpses = 0 ;
3017: LD_ADDR_EXP 31
3021: PUSH
3022: LD_INT 0
3024: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3025: LD_EXP 33
3029: PPUSH
3030: LD_INT 10
3032: PPUSH
3033: CALL_OW 234
// wait ( 0 0$3 ) ;
3037: LD_INT 105
3039: PPUSH
3040: CALL_OW 67
// SetLives ( DyingSold , 0 ) ;
3044: LD_EXP 33
3048: PPUSH
3049: LD_INT 0
3051: PPUSH
3052: CALL_OW 234
// wait ( 0 0$1 ) ;
3056: LD_INT 35
3058: PPUSH
3059: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3063: LD_EXP 1
3067: PUSH
3068: LD_EXP 5
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PPUSH
3077: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3081: LD_EXP 5
3085: PPUSH
3086: LD_EXP 1
3090: PPUSH
3091: CALL_OW 119
// wait ( 0 0$1 ) ;
3095: LD_INT 35
3097: PPUSH
3098: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3102: LD_EXP 5
3106: PPUSH
3107: LD_STRING DCorpses-Khat-1
3109: PPUSH
3110: CALL_OW 88
// end ; InGameOff ;
3114: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3118: LD_EXP 1
3122: PPUSH
3123: LD_STRING DCorpses-JMM-2
3125: PPUSH
3126: CALL_OW 88
// end ;
3130: PPOPN 4
3132: END
// every 0 0$1 trigger spotCorpses = 1 do
3133: LD_EXP 31
3137: PUSH
3138: LD_INT 1
3140: EQUAL
3141: IFFALSE 3159
3143: GO 3145
3145: DISABLE
// begin enable ;
3146: ENABLE
// SetLives ( DyingSold , 150 ) ;
3147: LD_EXP 33
3151: PPUSH
3152: LD_INT 150
3154: PPUSH
3155: CALL_OW 234
// end ;
3159: END
// every 1 trigger FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do var i ;
3160: LD_INT 8
3162: PPUSH
3163: LD_INT 22
3165: PUSH
3166: LD_INT 1
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: PPUSH
3173: CALL_OW 70
3177: PUSH
3178: LD_INT 0
3180: GREATER
3181: PUSH
3182: LD_INT 1
3184: PPUSH
3185: CALL_OW 255
3189: PUSH
3190: LD_INT 1
3192: EQUAL
3193: NOT
3194: AND
3195: PUSH
3196: LD_INT 10
3198: PPUSH
3199: CALL_OW 255
3203: PUSH
3204: LD_INT 1
3206: EQUAL
3207: NOT
3208: AND
3209: IFFALSE 3377
3211: GO 3213
3213: DISABLE
3214: LD_INT 0
3216: PPUSH
// begin InGameOn ;
3217: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3221: LD_EXP 7
3225: PPUSH
3226: LD_INT 250
3228: PPUSH
3229: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3233: LD_INT 3
3235: PPUSH
3236: LD_INT 4
3238: PPUSH
3239: LD_INT 2
3241: PPUSH
3242: LD_INT 1
3244: PPUSH
3245: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3249: LD_EXP 6
3253: PUSH
3254: LD_EXP 7
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: PPUSH
3263: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3267: LD_ADDR_VAR 0 1
3271: PUSH
3272: LD_INT 9
3274: PPUSH
3275: LD_INT 22
3277: PUSH
3278: LD_INT 3
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PPUSH
3285: CALL_OW 70
3289: PUSH
3290: FOR_IN
3291: IFFALSE 3304
// ComFree ( i ) ;
3293: LD_VAR 0 1
3297: PPUSH
3298: CALL_OW 139
3302: GO 3290
3304: POP
3305: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3306: LD_ADDR_VAR 0 1
3310: PUSH
3311: LD_INT 22
3313: PUSH
3314: LD_INT 4
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: PPUSH
3321: CALL_OW 69
3325: PUSH
3326: FOR_IN
3327: IFFALSE 3340
// ComFree ( i ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL_OW 139
3338: GO 3326
3340: POP
3341: POP
// wait ( 0 0$1 ) ;
3342: LD_INT 35
3344: PPUSH
3345: CALL_OW 67
// InGameOff ;
3349: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3353: LD_EXP 6
3357: PPUSH
3358: LD_STRING DF-Sol1-1
3360: PPUSH
3361: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3365: LD_EXP 1
3369: PPUSH
3370: LD_STRING DF-JMM-1
3372: PPUSH
3373: CALL_OW 88
// end ;
3377: PPOPN 1
3379: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not GetSide ( dep1 ) = 1 and not GetSide ( dep2 ) = 1 do
3380: LD_INT 19
3382: PPUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 3
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PPUSH
3393: CALL_OW 70
3397: PUSH
3398: LD_INT 0
3400: EQUAL
3401: PUSH
3402: LD_INT 1
3404: PPUSH
3405: CALL_OW 255
3409: PUSH
3410: LD_INT 1
3412: EQUAL
3413: NOT
3414: AND
3415: PUSH
3416: LD_INT 10
3418: PPUSH
3419: CALL_OW 255
3423: PUSH
3424: LD_INT 1
3426: EQUAL
3427: NOT
3428: AND
3429: IFFALSE 3542
3431: GO 3433
3433: DISABLE
// begin if not IsDead ( Brian ) then
3434: LD_EXP 6
3438: PPUSH
3439: CALL_OW 301
3443: NOT
3444: IFFALSE 3458
// SetSide ( Brian , 1 ) ;
3446: LD_EXP 6
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: CALL_OW 235
// if not IsDead ( Jerry ) then
3458: LD_EXP 7
3462: PPUSH
3463: CALL_OW 301
3467: NOT
3468: IFFALSE 3482
// SetSide ( Jerry , 1 ) ;
3470: LD_EXP 7
3474: PPUSH
3475: LD_INT 1
3477: PPUSH
3478: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3482: LD_INT 22
3484: PUSH
3485: LD_INT 1
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: LD_INT 25
3494: PUSH
3495: LD_INT 4
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: PUSH
3511: LD_INT 0
3513: GREATER
3514: IFFALSE 3530
// begin Say ( JMM , DFa-JMM-1 ) ;
3516: LD_EXP 1
3520: PPUSH
3521: LD_STRING DFa-JMM-1
3523: PPUSH
3524: CALL_OW 88
// end else
3528: GO 3542
// begin Say ( JMM , DFa-JMM-1a ) ;
3530: LD_EXP 1
3534: PPUSH
3535: LD_STRING DFa-JMM-1a
3537: PPUSH
3538: CALL_OW 88
// end ; end ;
3542: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3543: LD_INT 19
3545: PPUSH
3546: LD_INT 22
3548: PUSH
3549: LD_INT 3
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: PPUSH
3556: CALL_OW 70
3560: PUSH
3561: LD_INT 0
3563: EQUAL
3564: PUSH
3565: LD_EXP 6
3569: PPUSH
3570: CALL_OW 302
3574: NOT
3575: AND
3576: IFFALSE 3653
3578: GO 3580
3580: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3581: LD_INT 35
3583: PPUSH
3584: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3588: LD_EXP 6
3592: PPUSH
3593: CALL_OW 256
3597: PUSH
3598: LD_INT 250
3600: GREATER
3601: IFFALSE 3581
// Say ( Brian , DFb-Sol1-1 ) ;
3603: LD_EXP 6
3607: PPUSH
3608: LD_STRING DFb-Sol1-1
3610: PPUSH
3611: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3615: LD_EXP 6
3619: PPUSH
3620: LD_INT 78
3622: PPUSH
3623: LD_INT 74
3625: PPUSH
3626: CALL_OW 111
// if IsDead ( Jerry ) then
3630: LD_EXP 7
3634: PPUSH
3635: CALL_OW 301
3639: IFFALSE 3653
// Say ( Brian , DFb-Sol1-1a ) end ;
3641: LD_EXP 6
3645: PPUSH
3646: LD_STRING DFb-Sol1-1a
3648: PPUSH
3649: CALL_OW 88
3653: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3654: LD_INT 22
3656: PUSH
3657: LD_INT 1
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PUSH
3664: LD_INT 21
3666: PUSH
3667: LD_INT 2
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PPUSH
3678: CALL_OW 69
3682: PUSH
3683: LD_INT 0
3685: EQUAL
3686: IFFALSE 3774
3688: GO 3690
3690: DISABLE
3691: LD_INT 0
3693: PPUSH
// begin enable ;
3694: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3695: LD_ADDR_VAR 0 1
3699: PUSH
3700: LD_INT 22
3702: PUSH
3703: LD_INT 3
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: PUSH
3710: LD_INT 21
3712: PUSH
3713: LD_INT 3
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PUSH
3720: LD_INT 30
3722: PUSH
3723: LD_INT 31
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 69
3739: PUSH
3740: FOR_IN
3741: IFFALSE 3772
// begin if See ( 1 , i ) then
3743: LD_INT 1
3745: PPUSH
3746: LD_VAR 0 1
3750: PPUSH
3751: CALL_OW 292
3755: IFFALSE 3770
// begin disable ;
3757: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3758: LD_EXP 1
3762: PPUSH
3763: LD_STRING DX1-JMM-1
3765: PPUSH
3766: CALL_OW 88
// end ; end ;
3770: GO 3740
3772: POP
3773: POP
// end ;
3774: PPOPN 1
3776: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 11
3782: PPUSH
3783: CALL_OW 294
3787: IFFALSE 4150
3789: GO 3791
3791: DISABLE
3792: LD_INT 0
3794: PPUSH
3795: PPUSH
// begin DialogueOn ;
3796: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3800: LD_INT 11
3802: PPUSH
3803: LD_INT 22
3805: PUSH
3806: LD_INT 3
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 21
3815: PUSH
3816: LD_INT 1
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PPUSH
3827: CALL_OW 70
3831: PUSH
3832: LD_INT 1
3834: ARRAY
3835: PPUSH
3836: LD_STRING DX3-Rus1-1
3838: PPUSH
3839: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3843: LD_EXP 1
3847: PPUSH
3848: LD_STRING DX3-JMM-1
3850: PPUSH
3851: CALL_OW 88
// DialogueOff ;
3855: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3859: LD_ADDR_VAR 0 1
3863: PUSH
3864: LD_INT 11
3866: PPUSH
3867: LD_INT 22
3869: PUSH
3870: LD_INT 3
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: PUSH
3877: LD_INT 21
3879: PUSH
3880: LD_INT 1
3882: PUSH
3883: EMPTY
3884: LIST
3885: LIST
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: PPUSH
3891: CALL_OW 70
3895: PUSH
3896: FOR_IN
3897: IFFALSE 3917
// southBaseDefenders = southBaseDefenders ^ i ;
3899: LD_ADDR_EXP 25
3903: PUSH
3904: LD_EXP 25
3908: PUSH
3909: LD_VAR 0 1
3913: ADD
3914: ST_TO_ADDR
3915: GO 3896
3917: POP
3918: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
3919: LD_INT 455
3921: PUSH
3922: LD_INT 420
3924: PUSH
3925: LD_INT 315
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: LIST
3932: PUSH
3933: LD_OWVAR 67
3937: ARRAY
3938: PPUSH
3939: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3943: LD_INT 35
3945: PPUSH
3946: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
3950: LD_ADDR_VAR 0 1
3954: PUSH
3955: LD_INT 22
3957: PUSH
3958: LD_INT 3
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PUSH
3965: LD_INT 21
3967: PUSH
3968: LD_INT 2
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PUSH
3975: LD_INT 58
3977: PUSH
3978: EMPTY
3979: LIST
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: LIST
3985: PPUSH
3986: CALL_OW 69
3990: PUSH
3991: FOR_IN
3992: IFFALSE 4062
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
3994: LD_ADDR_VAR 0 2
3998: PUSH
3999: LD_INT 22
4001: PUSH
4002: LD_INT 3
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 21
4011: PUSH
4012: LD_INT 1
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 25
4021: PUSH
4022: LD_INT 3
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: LIST
4033: PPUSH
4034: CALL_OW 69
4038: PUSH
4039: FOR_IN
4040: IFFALSE 4058
// begin ComEnterUnit ( j , i ) ;
4042: LD_VAR 0 2
4046: PPUSH
4047: LD_VAR 0 1
4051: PPUSH
4052: CALL_OW 120
// end ;
4056: GO 4039
4058: POP
4059: POP
// end ;
4060: GO 3991
4062: POP
4063: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4064: LD_INT 22
4066: PUSH
4067: LD_INT 3
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PUSH
4074: LD_INT 21
4076: PUSH
4077: LD_INT 2
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PUSH
4084: LD_INT 58
4086: PUSH
4087: EMPTY
4088: LIST
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: PPUSH
4095: CALL_OW 69
4099: PUSH
4100: LD_INT 0
4102: EQUAL
4103: PUSH
4104: LD_INT 22
4106: PUSH
4107: LD_INT 3
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 21
4116: PUSH
4117: LD_INT 1
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PUSH
4124: LD_INT 25
4126: PUSH
4127: LD_INT 3
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: LIST
4138: PPUSH
4139: CALL_OW 69
4143: PUSH
4144: LD_INT 0
4146: EQUAL
4147: OR
4148: IFFALSE 3943
// end ;
4150: PPOPN 2
4152: END
// every 0 0$1 do var i , tmp ;
4153: GO 4155
4155: DISABLE
4156: LD_INT 0
4158: PPUSH
4159: PPUSH
// begin enable ;
4160: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4161: LD_ADDR_VAR 0 2
4165: PUSH
4166: LD_INT 22
4168: PUSH
4169: LD_INT 1
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PUSH
4176: LD_INT 21
4178: PUSH
4179: LD_INT 1
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: PPUSH
4190: CALL_OW 69
4194: ST_TO_ADDR
// for i in tmp do
4195: LD_ADDR_VAR 0 1
4199: PUSH
4200: LD_VAR 0 2
4204: PUSH
4205: FOR_IN
4206: IFFALSE 4328
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4208: LD_VAR 0 1
4212: PPUSH
4213: LD_INT 5
4215: PPUSH
4216: CALL_OW 296
4220: PUSH
4221: LD_INT 4
4223: LESS
4224: PUSH
4225: LD_VAR 0 1
4229: PPUSH
4230: LD_INT 4
4232: PPUSH
4233: CALL_OW 296
4237: PUSH
4238: LD_INT 4
4240: LESS
4241: OR
4242: IFFALSE 4326
// begin disable ;
4244: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4245: LD_INT 5
4247: PUSH
4248: LD_INT 4
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PPUSH
4255: CALL_OW 85
// if IsOK ( Bobby ) then
4259: LD_EXP 2
4263: PPUSH
4264: CALL_OW 302
4268: IFFALSE 4305
// begin DialogueOn ;
4270: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4274: LD_EXP 2
4278: PPUSH
4279: LD_STRING DX2-Bobby-1
4281: PPUSH
4282: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4286: LD_EXP 1
4290: PPUSH
4291: LD_STRING DX2-JMM-1a
4293: PPUSH
4294: CALL_OW 88
// DialogueOff ;
4298: CALL_OW 7
// disable ;
4302: DISABLE
// end else
4303: GO 4326
// begin DialogueOn ;
4305: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4309: LD_EXP 1
4313: PPUSH
4314: LD_STRING DX2-JMM-1
4316: PPUSH
4317: CALL_OW 88
// DialogueOff ;
4321: CALL_OW 7
// disable ;
4325: DISABLE
// end ; end ; end ;
4326: GO 4205
4328: POP
4329: POP
// end ;
4330: PPOPN 2
4332: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4333: LD_INT 22
4335: PUSH
4336: LD_INT 1
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: PUSH
4343: LD_INT 23
4345: PUSH
4346: LD_INT 3
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PUSH
4353: LD_INT 21
4355: PUSH
4356: LD_INT 2
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: PUSH
4363: LD_INT 34
4365: PUSH
4366: LD_INT 42
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 69
4383: PUSH
4384: LD_INT 1
4386: GREATEREQUAL
4387: IFFALSE 4854
4389: GO 4391
4391: DISABLE
4392: LD_INT 0
4394: PPUSH
4395: PPUSH
4396: PPUSH
4397: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4398: LD_ADDR_VAR 0 1
4402: PUSH
4403: LD_INT 22
4405: PUSH
4406: LD_INT 1
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: LD_INT 23
4415: PUSH
4416: LD_INT 3
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_INT 21
4425: PUSH
4426: LD_INT 2
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PUSH
4433: LD_INT 34
4435: PUSH
4436: LD_INT 42
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: PPUSH
4449: CALL_OW 69
4453: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4454: LD_ADDR_VAR 0 2
4458: PUSH
4459: LD_INT 22
4461: PUSH
4462: LD_INT 1
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: LD_INT 21
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: PUSH
4479: LD_INT 26
4481: PUSH
4482: LD_INT 1
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 69
4498: PUSH
4499: LD_EXP 1
4503: PUSH
4504: LD_EXP 3
4508: PUSH
4509: LD_EXP 2
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: DIFF
4519: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4520: LD_ADDR_VAR 0 3
4524: PUSH
4525: LD_INT 22
4527: PUSH
4528: LD_INT 1
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 21
4537: PUSH
4538: LD_INT 1
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: PUSH
4545: LD_INT 26
4547: PUSH
4548: LD_INT 2
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: LIST
4559: PPUSH
4560: CALL_OW 69
4564: PUSH
4565: LD_EXP 4
4569: PUSH
4570: EMPTY
4571: LIST
4572: DIFF
4573: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
4574: LD_EXP 1
4578: PPUSH
4579: CALL_OW 310
4583: NOT
4584: IFFALSE 4598
// Say ( JMM , DX2a-JMM-1 ) ;
4586: LD_EXP 1
4590: PPUSH
4591: LD_STRING DX2a-JMM-1
4593: PPUSH
4594: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4598: LD_EXP 2
4602: PPUSH
4603: CALL_OW 310
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: ARRAY
4616: EQUAL
4617: IFFALSE 4631
// Say ( Bobby , DX2a-Bobby-1 ) ;
4619: LD_EXP 2
4623: PPUSH
4624: LD_STRING DX2a-Bobby-1
4626: PPUSH
4627: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4631: LD_EXP 3
4635: PPUSH
4636: CALL_OW 310
4640: PUSH
4641: LD_VAR 0 1
4645: PUSH
4646: LD_INT 1
4648: ARRAY
4649: EQUAL
4650: IFFALSE 4664
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4652: LD_EXP 3
4656: PPUSH
4657: LD_STRING DX2a-Cyrus-1
4659: PPUSH
4660: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4664: LD_EXP 4
4668: PPUSH
4669: CALL_OW 310
4673: PUSH
4674: LD_VAR 0 1
4678: PUSH
4679: LD_INT 1
4681: ARRAY
4682: EQUAL
4683: IFFALSE 4697
// Say ( Lisa , DX2a-Lisa-1 ) ;
4685: LD_EXP 4
4689: PPUSH
4690: LD_STRING DX2a-Lisa-1
4692: PPUSH
4693: CALL_OW 88
// for i in temp1 do
4697: LD_ADDR_VAR 0 4
4701: PUSH
4702: LD_VAR 0 2
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4745
// if IsInUnit ( i ) = tmp [ 1 ] then
4710: LD_VAR 0 4
4714: PPUSH
4715: CALL_OW 310
4719: PUSH
4720: LD_VAR 0 1
4724: PUSH
4725: LD_INT 1
4727: ARRAY
4728: EQUAL
4729: IFFALSE 4743
// Say ( i , DX2a-Sol1-1 ) ;
4731: LD_VAR 0 4
4735: PPUSH
4736: LD_STRING DX2a-Sol1-1
4738: PPUSH
4739: CALL_OW 88
4743: GO 4707
4745: POP
4746: POP
// for i in temp2 do
4747: LD_ADDR_VAR 0 4
4751: PUSH
4752: LD_VAR 0 3
4756: PUSH
4757: FOR_IN
4758: IFFALSE 4795
// if IsInUnit ( i ) = tmp [ 1 ] then
4760: LD_VAR 0 4
4764: PPUSH
4765: CALL_OW 310
4769: PUSH
4770: LD_VAR 0 1
4774: PUSH
4775: LD_INT 1
4777: ARRAY
4778: EQUAL
4779: IFFALSE 4793
// Say ( i , DX2a-FSol1-1 ) ;
4781: LD_VAR 0 4
4785: PPUSH
4786: LD_STRING DX2a-FSol1-1
4788: PPUSH
4789: CALL_OW 88
4793: GO 4757
4795: POP
4796: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4797: LD_EXP 1
4801: PPUSH
4802: CALL_OW 310
4806: PUSH
4807: LD_VAR 0 1
4811: PUSH
4812: LD_INT 1
4814: ARRAY
4815: EQUAL
4816: IFFALSE 4830
// Say ( JMM , DX2b-JMM-1 ) ;
4818: LD_EXP 1
4822: PPUSH
4823: LD_STRING DX2b-JMM-1
4825: PPUSH
4826: CALL_OW 88
// if not IsInUnit ( JMM ) then
4830: LD_EXP 1
4834: PPUSH
4835: CALL_OW 310
4839: NOT
4840: IFFALSE 4854
// Say ( JMM , DX2a-JMM-2 ) ;
4842: LD_EXP 1
4846: PPUSH
4847: LD_STRING DX2a-JMM-2
4849: PPUSH
4850: CALL_OW 88
// end ;
4854: PPOPN 4
4856: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4857: LD_INT 1
4859: PPUSH
4860: CALL_OW 255
4864: PUSH
4865: LD_INT 1
4867: EQUAL
4868: PUSH
4869: LD_INT 10
4871: PPUSH
4872: CALL_OW 255
4876: PUSH
4877: LD_INT 1
4879: EQUAL
4880: OR
4881: IFFALSE 4941
4883: GO 4885
4885: DISABLE
// begin DialogueOn ;
4886: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4890: LD_EXP 1
4894: PPUSH
4895: LD_STRING D3-JMM-1
4897: PPUSH
4898: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4902: LD_EXP 9
4906: PPUSH
4907: LD_STRING D3-Pow-1
4909: PPUSH
4910: CALL_OW 94
// if IsOK ( Cyrus ) then
4914: LD_EXP 3
4918: PPUSH
4919: CALL_OW 302
4923: IFFALSE 4937
// Say ( Cyrus , D3-Cyrus-1 ) ;
4925: LD_EXP 3
4929: PPUSH
4930: LD_STRING D3-Cyrus-1
4932: PPUSH
4933: CALL_OW 88
// DialogueOff ;
4937: CALL_OW 7
// end ;
4941: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , i ;
4942: LD_INT 1
4944: PPUSH
4945: CALL_OW 255
4949: PUSH
4950: LD_INT 1
4952: EQUAL
4953: PUSH
4954: LD_INT 10
4956: PPUSH
4957: CALL_OW 255
4961: PUSH
4962: LD_INT 1
4964: EQUAL
4965: AND
4966: IFFALSE 6156
4968: GO 4970
4970: DISABLE
4971: LD_INT 0
4973: PPUSH
4974: PPUSH
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) diff [ JMM ] ;
4975: LD_ADDR_VAR 0 1
4979: PUSH
4980: LD_INT 22
4982: PUSH
4983: LD_INT 1
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PUSH
4990: LD_INT 23
4992: PUSH
4993: LD_INT 1
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PUSH
5000: LD_INT 25
5002: PUSH
5003: LD_INT 2
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: LIST
5014: PPUSH
5015: CALL_OW 69
5019: PUSH
5020: LD_EXP 1
5024: PUSH
5025: EMPTY
5026: LIST
5027: DIFF
5028: ST_TO_ADDR
// DialogueOn ;
5029: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5033: LD_EXP 1
5037: PPUSH
5038: LD_STRING D3a-JMM-1
5040: PPUSH
5041: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5045: LD_EXP 9
5049: PPUSH
5050: LD_STRING D3a-Pow-1
5052: PPUSH
5053: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5057: LD_EXP 1
5061: PPUSH
5062: LD_STRING D3a-JMM-2
5064: PPUSH
5065: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5069: LD_EXP 9
5073: PPUSH
5074: LD_STRING D3a-Pow-2
5076: PPUSH
5077: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5081: LD_EXP 1
5085: PPUSH
5086: LD_STRING D3a-JMM-3
5088: PPUSH
5089: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5093: LD_EXP 9
5097: PPUSH
5098: LD_STRING D3a-Pow-3
5100: PPUSH
5101: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5105: LD_EXP 1
5109: PPUSH
5110: LD_STRING D3a-JMM-4
5112: PPUSH
5113: CALL_OW 88
// DialogueOff ;
5117: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5121: LD_STRING M2
5123: PPUSH
5124: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5128: LD_EXP 1
5132: PPUSH
5133: LD_STRING D3b-JMM-1
5135: PPUSH
5136: CALL_OW 88
// wait ( 0 0$5 ) ;
5140: LD_INT 175
5142: PPUSH
5143: CALL_OW 67
// InGameOn ;
5147: CALL_OW 8
// PrepareRussianHeroes ;
5151: CALL 11237 0 0
// CenterNowOnUnits ( Mikhail ) ;
5155: LD_EXP 8
5159: PPUSH
5160: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5164: LD_EXP 1
5168: PUSH
5169: LD_VAR 0 1
5173: PUSH
5174: LD_INT 1
5176: ARRAY
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PPUSH
5182: LD_EXP 8
5186: PPUSH
5187: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5191: LD_EXP 8
5195: PPUSH
5196: LD_VAR 0 1
5200: PUSH
5201: LD_INT 1
5203: ARRAY
5204: PPUSH
5205: CALL_OW 119
// Say ( Mikhail , D4-Mikh-1 ) ;
5209: LD_EXP 8
5213: PPUSH
5214: LD_STRING D4-Mikh-1
5216: PPUSH
5217: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5221: LD_VAR 0 1
5225: PUSH
5226: LD_INT 1
5228: ARRAY
5229: PPUSH
5230: CALL_OW 258
5234: PUSH
5235: LD_INT 1
5237: EQUAL
5238: IFFALSE 5256
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5240: LD_VAR 0 1
5244: PUSH
5245: LD_INT 1
5247: ARRAY
5248: PPUSH
5249: LD_STRING D4-Sol1-1
5251: PPUSH
5252: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5256: LD_VAR 0 1
5260: PUSH
5261: LD_INT 1
5263: ARRAY
5264: PPUSH
5265: CALL_OW 258
5269: PUSH
5270: LD_INT 2
5272: EQUAL
5273: IFFALSE 5291
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5275: LD_VAR 0 1
5279: PUSH
5280: LD_INT 1
5282: ARRAY
5283: PPUSH
5284: LD_STRING D4-FSol1-1
5286: PPUSH
5287: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5291: LD_EXP 8
5295: PPUSH
5296: LD_STRING D4-Mikh-2
5298: PPUSH
5299: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5303: LD_VAR 0 1
5307: PUSH
5308: LD_INT 1
5310: ARRAY
5311: PPUSH
5312: CALL_OW 258
5316: PUSH
5317: LD_INT 1
5319: EQUAL
5320: IFFALSE 5338
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5322: LD_VAR 0 1
5326: PUSH
5327: LD_INT 1
5329: ARRAY
5330: PPUSH
5331: LD_STRING D4-Sol1-2
5333: PPUSH
5334: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5338: LD_VAR 0 1
5342: PUSH
5343: LD_INT 1
5345: ARRAY
5346: PPUSH
5347: CALL_OW 258
5351: PUSH
5352: LD_INT 2
5354: EQUAL
5355: IFFALSE 5373
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5357: LD_VAR 0 1
5361: PUSH
5362: LD_INT 1
5364: ARRAY
5365: PPUSH
5366: LD_STRING D4-FSol1-2
5368: PPUSH
5369: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5373: LD_EXP 8
5377: PPUSH
5378: LD_STRING D4-Mikh-3
5380: PPUSH
5381: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5385: LD_VAR 0 1
5389: PUSH
5390: LD_INT 1
5392: ARRAY
5393: PPUSH
5394: CALL_OW 258
5398: PUSH
5399: LD_INT 1
5401: EQUAL
5402: IFFALSE 5420
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5404: LD_VAR 0 1
5408: PUSH
5409: LD_INT 1
5411: ARRAY
5412: PPUSH
5413: LD_STRING D4-Sol1-3
5415: PPUSH
5416: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 258
5433: PUSH
5434: LD_INT 2
5436: EQUAL
5437: IFFALSE 5455
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5439: LD_VAR 0 1
5443: PUSH
5444: LD_INT 1
5446: ARRAY
5447: PPUSH
5448: LD_STRING D4-FSol1-3
5450: PPUSH
5451: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5455: LD_EXP 8
5459: PPUSH
5460: LD_STRING D4-Mikh-4
5462: PPUSH
5463: CALL_OW 88
// case query ( Qs1 ) of 1 :
5467: LD_STRING Qs1
5469: PPUSH
5470: CALL_OW 97
5474: PUSH
5475: LD_INT 1
5477: DOUBLE
5478: EQUAL
5479: IFTRUE 5483
5481: GO 5518
5483: POP
// begin InGameOff ;
5484: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5488: LD_INT 1
5490: PPUSH
5491: LD_INT 6
5493: PPUSH
5494: LD_INT 2
5496: PPUSH
5497: LD_INT 1
5499: PPUSH
5500: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5504: LD_EXP 8
5508: PPUSH
5509: LD_INT 17
5511: PPUSH
5512: CALL_OW 113
// end ; 2 :
5516: GO 6140
5518: LD_INT 2
5520: DOUBLE
5521: EQUAL
5522: IFTRUE 5526
5524: GO 6105
5526: POP
// begin repeat wait ( 0 0$1 ) ;
5527: LD_INT 35
5529: PPUSH
5530: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5547: LD_VAR 0 1
5551: PUSH
5552: LD_INT 1
5554: ARRAY
5555: PPUSH
5556: LD_EXP 1
5560: PPUSH
5561: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5565: LD_EXP 8
5569: PPUSH
5570: LD_EXP 1
5574: PPUSH
5575: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5579: LD_EXP 1
5583: PPUSH
5584: LD_EXP 8
5588: PPUSH
5589: CALL_OW 296
5593: PUSH
5594: LD_INT 5
5596: LESS
5597: IFFALSE 5527
// ComTurnUnit ( Mikhail , JMM ) ;
5599: LD_EXP 8
5603: PPUSH
5604: LD_EXP 1
5608: PPUSH
5609: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5613: LD_EXP 1
5617: PPUSH
5618: LD_STRING D4b-JMM-1
5620: PPUSH
5621: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5625: LD_EXP 8
5629: PPUSH
5630: LD_STRING D4b-Mikh-1
5632: PPUSH
5633: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5637: LD_EXP 1
5641: PPUSH
5642: LD_STRING D4b-JMM-2
5644: PPUSH
5645: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5649: LD_EXP 8
5653: PPUSH
5654: LD_STRING D4b-Mikh-2
5656: PPUSH
5657: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5661: LD_EXP 1
5665: PPUSH
5666: LD_STRING D4b-JMM-3
5668: PPUSH
5669: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5673: LD_EXP 8
5677: PPUSH
5678: LD_STRING D4b-Mikh-3
5680: PPUSH
5681: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5685: LD_EXP 1
5689: PPUSH
5690: LD_STRING D4b-JMM-4
5692: PPUSH
5693: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5697: LD_EXP 8
5701: PPUSH
5702: LD_STRING D4b-Mikh-4
5704: PPUSH
5705: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5709: LD_EXP 1
5713: PPUSH
5714: LD_STRING D4b-JMM-5
5716: PPUSH
5717: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5721: LD_EXP 8
5725: PPUSH
5726: LD_STRING D4b-Mikh-5
5728: PPUSH
5729: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5733: LD_EXP 1
5737: PPUSH
5738: LD_STRING D4b-JMM-6
5740: PPUSH
5741: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5745: LD_EXP 8
5749: PPUSH
5750: LD_STRING D4b-Mikh-6
5752: PPUSH
5753: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5757: LD_EXP 1
5761: PPUSH
5762: LD_STRING D4b-JMM-7
5764: PPUSH
5765: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5769: LD_EXP 8
5773: PPUSH
5774: LD_STRING D4b-Mikh-7
5776: PPUSH
5777: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5781: LD_VAR 0 1
5785: PUSH
5786: LD_INT 1
5788: ARRAY
5789: PPUSH
5790: CALL_OW 258
5794: PUSH
5795: LD_INT 1
5797: EQUAL
5798: IFFALSE 5816
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5800: LD_VAR 0 1
5804: PUSH
5805: LD_INT 1
5807: ARRAY
5808: PPUSH
5809: LD_STRING D4b-Sol1-7
5811: PPUSH
5812: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5816: LD_VAR 0 1
5820: PUSH
5821: LD_INT 1
5823: ARRAY
5824: PPUSH
5825: CALL_OW 258
5829: PUSH
5830: LD_INT 2
5832: EQUAL
5833: IFFALSE 5851
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5835: LD_VAR 0 1
5839: PUSH
5840: LD_INT 1
5842: ARRAY
5843: PPUSH
5844: LD_STRING D4b-FSol1-7
5846: PPUSH
5847: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5851: LD_EXP 1
5855: PPUSH
5856: LD_STRING D4b-JMM-8
5858: PPUSH
5859: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5863: LD_VAR 0 1
5867: PUSH
5868: LD_INT 1
5870: ARRAY
5871: PPUSH
5872: CALL_OW 258
5876: PUSH
5877: LD_INT 1
5879: EQUAL
5880: IFFALSE 5898
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5882: LD_VAR 0 1
5886: PUSH
5887: LD_INT 1
5889: ARRAY
5890: PPUSH
5891: LD_STRING D4b-Sol1-8
5893: PPUSH
5894: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5898: LD_VAR 0 1
5902: PUSH
5903: LD_INT 1
5905: ARRAY
5906: PPUSH
5907: CALL_OW 258
5911: PUSH
5912: LD_INT 2
5914: EQUAL
5915: IFFALSE 5933
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
5917: LD_VAR 0 1
5921: PUSH
5922: LD_INT 1
5924: ARRAY
5925: PPUSH
5926: LD_STRING D4b-FSol1-8
5928: PPUSH
5929: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
5933: LD_EXP 1
5937: PPUSH
5938: LD_STRING D4b-JMM-9
5940: PPUSH
5941: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
5945: LD_EXP 8
5949: PPUSH
5950: LD_INT 1
5952: PPUSH
5953: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5957: LD_ADDR_VAR 0 2
5961: PUSH
5962: LD_INT 22
5964: PUSH
5965: LD_INT 1
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PUSH
5972: EMPTY
5973: LIST
5974: PPUSH
5975: CALL_OW 69
5979: PUSH
5980: FOR_IN
5981: IFFALSE 5994
// ComFree ( i ) ;
5983: LD_VAR 0 2
5987: PPUSH
5988: CALL_OW 139
5992: GO 5980
5994: POP
5995: POP
// repeat wait ( 0 0$1 ) ;
5996: LD_INT 35
5998: PPUSH
5999: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6003: LD_EXP 8
6007: PPUSH
6008: CALL_OW 87
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
6012: LD_EXP 8
6016: PPUSH
6017: LD_INT 1
6019: PPUSH
6020: CALL_OW 296
6024: PUSH
6025: LD_EXP 8
6029: PPUSH
6030: LD_INT 10
6032: PPUSH
6033: CALL_OW 296
6037: LESS
6038: IFFALSE 6054
// begin ComEnterUnit ( Mikhail , dep1 ) ;
6040: LD_EXP 8
6044: PPUSH
6045: LD_INT 1
6047: PPUSH
6048: CALL_OW 120
// end else
6052: GO 6066
// begin ComEnterUnit ( Mikhail , dep2 ) ;
6054: LD_EXP 8
6058: PPUSH
6059: LD_INT 10
6061: PPUSH
6062: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
6066: LD_EXP 8
6070: PPUSH
6071: CALL_OW 310
6075: IFFALSE 5996
// mikhailDepot = IsInUnit ( Mikhail ) ;
6077: LD_ADDR_EXP 23
6081: PUSH
6082: LD_EXP 8
6086: PPUSH
6087: CALL_OW 310
6091: ST_TO_ADDR
// InGameOff ;
6092: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6096: LD_STRING M3
6098: PPUSH
6099: CALL_OW 337
// end ; 3 :
6103: GO 6140
6105: LD_INT 3
6107: DOUBLE
6108: EQUAL
6109: IFTRUE 6113
6111: GO 6139
6113: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6114: LD_EXP 8
6118: PPUSH
6119: LD_INT 17
6121: PPUSH
6122: CALL_OW 113
// wait ( 0 0$3 ) ;
6126: LD_INT 105
6128: PPUSH
6129: CALL_OW 67
// InGameOff ;
6133: CALL_OW 9
// end ; end ;
6137: GO 6140
6139: POP
// PrepareTigers ;
6140: CALL 13870 0 0
// RussianTrap ;
6144: CALL 9871 0 0
// tigersRespawn = 1 ;
6148: LD_ADDR_EXP 29
6152: PUSH
6153: LD_INT 1
6155: ST_TO_ADDR
// end ;
6156: PPOPN 2
6158: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6159: LD_INT 1
6161: PPUSH
6162: CALL_OW 255
6166: PUSH
6167: LD_INT 1
6169: EQUAL
6170: PUSH
6171: LD_INT 10
6173: PPUSH
6174: CALL_OW 255
6178: PUSH
6179: LD_INT 1
6181: EQUAL
6182: AND
6183: PUSH
6184: LD_INT 1
6186: PPUSH
6187: CALL_OW 274
6191: PPUSH
6192: LD_INT 1
6194: PPUSH
6195: CALL_OW 275
6199: PUSH
6200: LD_INT 100
6202: GREATEREQUAL
6203: AND
6204: IFFALSE 6367
6206: GO 6208
6208: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6209: LD_INT 2100
6211: PPUSH
6212: LD_INT 4200
6214: PPUSH
6215: CALL_OW 12
6219: PUSH
6220: LD_INT 1050
6222: PLUS
6223: PPUSH
6224: CALL_OW 67
// PrepareCargoBays ;
6228: CALL 12353 0 0
// cargoRespawn = 1 ;
6232: LD_ADDR_EXP 28
6236: PUSH
6237: LD_INT 1
6239: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6240: LD_EXP 15
6244: PUSH
6245: LD_EXP 16
6249: PUSH
6250: LD_EXP 17
6254: PUSH
6255: LD_EXP 18
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: PPUSH
6266: LD_INT 36
6268: PPUSH
6269: LD_INT 13
6271: PPUSH
6272: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6276: LD_EXP 15
6280: PUSH
6281: LD_EXP 16
6285: PUSH
6286: LD_EXP 17
6290: PUSH
6291: LD_EXP 18
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: PPUSH
6302: LD_INT 40
6304: PPUSH
6305: LD_INT 20
6307: PPUSH
6308: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6312: LD_EXP 15
6316: PUSH
6317: LD_EXP 16
6321: PUSH
6322: LD_EXP 17
6326: PUSH
6327: LD_EXP 18
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: PPUSH
6338: LD_INT 53
6340: PPUSH
6341: LD_INT 16
6343: PPUSH
6344: CALL_OW 171
// wait ( 0 0$5 ) ;
6348: LD_INT 175
6350: PPUSH
6351: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6355: LD_EXP 17
6359: PPUSH
6360: LD_STRING D5-Rus2-1
6362: PPUSH
6363: CALL_OW 88
// end ;
6367: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6368: LD_EXP 28
6372: PUSH
6373: LD_INT 1
6375: EQUAL
6376: IFFALSE 6566
6378: GO 6380
6380: DISABLE
6381: LD_INT 0
6383: PPUSH
6384: PPUSH
6385: PPUSH
6386: PPUSH
// begin enable ;
6387: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6388: LD_ADDR_VAR 0 3
6392: PUSH
6393: LD_INT 22
6395: PUSH
6396: LD_INT 3
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: PUSH
6403: LD_INT 21
6405: PUSH
6406: LD_INT 2
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: LD_INT 34
6415: PUSH
6416: LD_INT 51
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: PPUSH
6428: CALL_OW 69
6432: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
6433: LD_ADDR_VAR 0 4
6437: PUSH
6438: LD_INT 22
6440: PUSH
6441: LD_INT 1
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 23
6450: PUSH
6451: LD_INT 1
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PPUSH
6462: CALL_OW 69
6466: ST_TO_ADDR
// for i in tmp1 do
6467: LD_ADDR_VAR 0 1
6471: PUSH
6472: LD_VAR 0 3
6476: PUSH
6477: FOR_IN
6478: IFFALSE 6564
// begin for j in tmp2 do
6480: LD_ADDR_VAR 0 2
6484: PUSH
6485: LD_VAR 0 4
6489: PUSH
6490: FOR_IN
6491: IFFALSE 6560
// begin if GetDistUnits ( i , j ) < 7 then
6493: LD_VAR 0 1
6497: PPUSH
6498: LD_VAR 0 2
6502: PPUSH
6503: CALL_OW 296
6507: PUSH
6508: LD_INT 7
6510: LESS
6511: IFFALSE 6558
// begin disable ;
6513: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6514: LD_EXP 15
6518: PUSH
6519: LD_EXP 16
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PPUSH
6528: LD_INT 7
6530: PPUSH
6531: LD_INT 9
6533: PPUSH
6534: CALL_OW 111
// Say ( driver1 , D5-Rus2-1a ) ;
6538: LD_EXP 17
6542: PPUSH
6543: LD_STRING D5-Rus2-1a
6545: PPUSH
6546: CALL_OW 88
// cargoEscape = 1 ;
6550: LD_ADDR_EXP 20
6554: PUSH
6555: LD_INT 1
6557: ST_TO_ADDR
// end ; end ;
6558: GO 6490
6560: POP
6561: POP
// end ;
6562: GO 6477
6564: POP
6565: POP
// end ;
6566: PPOPN 4
6568: END
// every 0 0$1 trigger cargoEscape > 0 do
6569: LD_EXP 20
6573: PUSH
6574: LD_INT 0
6576: GREATER
6577: IFFALSE 6703
6579: GO 6581
6581: DISABLE
// begin enable ;
6582: ENABLE
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6583: LD_EXP 15
6587: PPUSH
6588: LD_INT 13
6590: PPUSH
6591: CALL_OW 308
6595: PUSH
6596: LD_EXP 17
6600: PPUSH
6601: LD_INT 13
6603: PPUSH
6604: CALL_OW 308
6608: OR
6609: IFFALSE 6643
// begin RemoveUnit ( cargo1 ) ;
6611: LD_EXP 15
6615: PPUSH
6616: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6620: LD_EXP 17
6624: PPUSH
6625: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6629: LD_ADDR_EXP 20
6633: PUSH
6634: LD_EXP 20
6638: PUSH
6639: LD_INT 1
6641: PLUS
6642: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6643: LD_EXP 16
6647: PPUSH
6648: LD_INT 13
6650: PPUSH
6651: CALL_OW 308
6655: PUSH
6656: LD_EXP 18
6660: PPUSH
6661: LD_INT 13
6663: PPUSH
6664: CALL_OW 308
6668: OR
6669: IFFALSE 6703
// begin RemoveUnit ( cargo2 ) ;
6671: LD_EXP 16
6675: PPUSH
6676: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6680: LD_EXP 18
6684: PPUSH
6685: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6689: LD_ADDR_EXP 20
6693: PUSH
6694: LD_EXP 20
6698: PUSH
6699: LD_INT 1
6701: PLUS
6702: ST_TO_ADDR
// end ; end ;
6703: END
// every 0 0$1 trigger cargoEscape > 1 do
6704: LD_EXP 20
6708: PUSH
6709: LD_INT 1
6711: GREATER
6712: IFFALSE 6876
6714: GO 6716
6716: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
6717: LD_INT 4
6719: PPUSH
6720: LD_INT 1
6722: PPUSH
6723: LD_INT 1
6725: PPUSH
6726: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6730: LD_INT 31
6732: PPUSH
6733: LD_INT 1
6735: PPUSH
6736: LD_INT 1
6738: PPUSH
6739: CALL_OW 324
// if IsOK ( Jerry ) then
6743: LD_EXP 7
6747: PPUSH
6748: CALL_OW 302
6752: IFFALSE 6768
// begin Say ( Jerry , D5a-Sol1-1 ) ;
6754: LD_EXP 7
6758: PPUSH
6759: LD_STRING D5a-Sol1-1
6761: PPUSH
6762: CALL_OW 88
// end else
6766: GO 6864
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
6768: LD_INT 22
6770: PUSH
6771: LD_INT 1
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 23
6780: PUSH
6781: LD_INT 1
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: LD_INT 26
6790: PUSH
6791: LD_INT 1
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: LIST
6802: PPUSH
6803: CALL_OW 69
6807: PUSH
6808: LD_INT 2
6810: PPUSH
6811: LD_INT 22
6813: PUSH
6814: LD_INT 1
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: PUSH
6821: LD_INT 23
6823: PUSH
6824: LD_INT 1
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: PUSH
6831: LD_INT 26
6833: PUSH
6834: LD_INT 1
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: LIST
6845: PPUSH
6846: CALL_OW 69
6850: PPUSH
6851: CALL_OW 12
6855: ARRAY
6856: PPUSH
6857: LD_STRING D5a-Sol1-1
6859: PPUSH
6860: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6864: LD_EXP 1
6868: PPUSH
6869: LD_STRING D5a-JMM-1
6871: PPUSH
6872: CALL_OW 88
// end ;
6876: END
// every 0 0$1 trigger GetLives ( dep1 ) < 1000 or GetLives ( dep2 ) < 1000 do
6877: LD_INT 1
6879: PPUSH
6880: CALL_OW 256
6884: PUSH
6885: LD_INT 1000
6887: LESS
6888: PUSH
6889: LD_INT 10
6891: PPUSH
6892: CALL_OW 256
6896: PUSH
6897: LD_INT 1000
6899: LESS
6900: OR
6901: IFFALSE 6918
6903: GO 6905
6905: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
6906: LD_EXP 1
6910: PPUSH
6911: LD_STRING D8-JMM-1
6913: PPUSH
6914: CALL_OW 88
// end ;
6918: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6919: LD_EXP 8
6923: PPUSH
6924: CALL_OW 310
6928: PUSH
6929: LD_INT 1
6931: EQUAL
6932: PUSH
6933: LD_EXP 22
6937: PUSH
6938: LD_INT 3
6940: EQUAL
6941: NOT
6942: AND
6943: IFFALSE 6965
6945: GO 6947
6947: DISABLE
// begin mikhailInBase = 1 ;
6948: LD_ADDR_EXP 22
6952: PUSH
6953: LD_INT 1
6955: ST_TO_ADDR
// mikhailStatus = 1 ;
6956: LD_ADDR_EXP 21
6960: PUSH
6961: LD_INT 1
6963: ST_TO_ADDR
// enable ;
6964: ENABLE
// end ;
6965: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
6966: LD_EXP 8
6970: PPUSH
6971: LD_INT 25
6973: PPUSH
6974: CALL_OW 308
6978: PUSH
6979: LD_EXP 22
6983: PUSH
6984: LD_INT 1
6986: EQUAL
6987: AND
6988: PUSH
6989: LD_EXP 8
6993: PPUSH
6994: CALL_OW 255
6998: PUSH
6999: LD_INT 1
7001: EQUAL
7002: AND
7003: IFFALSE 7333
7005: GO 7007
7007: DISABLE
// begin enable ;
7008: ENABLE
// case query ( QMikh2 ) of 1 :
7009: LD_STRING QMikh2
7011: PPUSH
7012: CALL_OW 97
7016: PUSH
7017: LD_INT 1
7019: DOUBLE
7020: EQUAL
7021: IFTRUE 7025
7023: GO 7092
7025: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7026: LD_INT 1
7028: PPUSH
7029: LD_INT 6
7031: PPUSH
7032: LD_INT 2
7034: PPUSH
7035: LD_INT 1
7037: PPUSH
7038: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7042: LD_EXP 8
7046: PPUSH
7047: LD_INT 6
7049: PPUSH
7050: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7054: LD_EXP 8
7058: PPUSH
7059: CALL_OW 122
// wait ( 0 0$1 ) ;
7063: LD_INT 35
7065: PPUSH
7066: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7070: LD_EXP 8
7074: PPUSH
7075: LD_INT 17
7077: PPUSH
7078: CALL_OW 113
// mikhailInbase = 0 ;
7082: LD_ADDR_EXP 22
7086: PUSH
7087: LD_INT 0
7089: ST_TO_ADDR
// end ; 2 :
7090: GO 7333
7092: LD_INT 2
7094: DOUBLE
7095: EQUAL
7096: IFTRUE 7100
7098: GO 7273
7100: POP
// begin mikhailInBase = 2 ;
7101: LD_ADDR_EXP 22
7105: PUSH
7106: LD_INT 2
7108: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7109: LD_EXP 8
7113: PPUSH
7114: LD_INT 6
7116: PPUSH
7117: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7121: LD_EXP 8
7125: PPUSH
7126: CALL_OW 122
// wait ( 0 0$1 ) ;
7130: LD_INT 35
7132: PPUSH
7133: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7137: LD_EXP 8
7141: PPUSH
7142: LD_EXP 8
7146: PPUSH
7147: CALL_OW 250
7151: PUSH
7152: LD_INT 2
7154: PLUS
7155: PPUSH
7156: LD_EXP 8
7160: PPUSH
7161: CALL_OW 251
7165: PUSH
7166: LD_INT 2
7168: PLUS
7169: PPUSH
7170: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7174: LD_EXP 8
7178: PPUSH
7179: LD_EXP 8
7183: PPUSH
7184: CALL_OW 250
7188: PUSH
7189: LD_INT 1
7191: PLUS
7192: PPUSH
7193: LD_EXP 8
7197: PPUSH
7198: CALL_OW 251
7202: PUSH
7203: LD_INT 2
7205: PLUS
7206: PPUSH
7207: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7211: LD_EXP 8
7215: PPUSH
7216: LD_EXP 8
7220: PPUSH
7221: CALL_OW 250
7225: PUSH
7226: LD_INT 2
7228: PLUS
7229: PPUSH
7230: LD_EXP 8
7234: PPUSH
7235: CALL_OW 251
7239: PPUSH
7240: CALL_OW 171
// wait ( 0 0$5 ) ;
7244: LD_INT 175
7246: PPUSH
7247: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7251: LD_EXP 8
7255: PPUSH
7256: LD_INT 25
7258: PPUSH
7259: CALL_OW 113
// mikhailInBase = 4 ;
7263: LD_ADDR_EXP 22
7267: PUSH
7268: LD_INT 4
7270: ST_TO_ADDR
// end ; 3 :
7271: GO 7333
7273: LD_INT 3
7275: DOUBLE
7276: EQUAL
7277: IFTRUE 7281
7279: GO 7332
7281: POP
// begin SetSide ( Mikhail , 6 ) ;
7282: LD_EXP 8
7286: PPUSH
7287: LD_INT 6
7289: PPUSH
7290: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7294: LD_EXP 8
7298: PPUSH
7299: CALL_OW 122
// wait ( 0 0$1 ) ;
7303: LD_INT 35
7305: PPUSH
7306: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7310: LD_EXP 8
7314: PPUSH
7315: LD_INT 17
7317: PPUSH
7318: CALL_OW 113
// mikhailInbase = 3 ;
7322: LD_ADDR_EXP 22
7326: PUSH
7327: LD_INT 3
7329: ST_TO_ADDR
// end ; end ;
7330: GO 7333
7332: POP
// end ;
7333: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7334: LD_EXP 8
7338: PPUSH
7339: LD_INT 25
7341: PPUSH
7342: CALL_OW 308
7346: PUSH
7347: LD_EXP 22
7351: PUSH
7352: LD_INT 4
7354: EQUAL
7355: AND
7356: IFFALSE 7454
7358: GO 7360
7360: DISABLE
// begin enable ;
7361: ENABLE
// SetSide ( Mikhail , 1 ) ;
7362: LD_EXP 8
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7374: LD_INT 35
7376: PPUSH
7377: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
7381: LD_EXP 8
7385: PPUSH
7386: LD_INT 1
7388: PPUSH
7389: CALL_OW 296
7393: PUSH
7394: LD_EXP 8
7398: PPUSH
7399: LD_INT 10
7401: PPUSH
7402: CALL_OW 296
7406: LESS
7407: IFFALSE 7423
// begin ComEnterUnit ( Mikhail , dep1 ) ;
7409: LD_EXP 8
7413: PPUSH
7414: LD_INT 1
7416: PPUSH
7417: CALL_OW 120
// end else
7421: GO 7435
// begin ComEnterUnit ( Mikhail , dep2 ) ;
7423: LD_EXP 8
7427: PPUSH
7428: LD_INT 10
7430: PPUSH
7431: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
7435: LD_EXP 8
7439: PPUSH
7440: CALL_OW 310
7444: IFFALSE 7374
// mikhailInBase = 1 ;
7446: LD_ADDR_EXP 22
7450: PUSH
7451: LD_INT 1
7453: ST_TO_ADDR
// end ;
7454: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7455: LD_EXP 8
7459: PPUSH
7460: CALL_OW 310
7464: PUSH
7465: LD_EXP 22
7469: PUSH
7470: LD_INT 3
7472: EQUAL
7473: NOT
7474: AND
7475: IFFALSE 7601
7477: GO 7479
7479: DISABLE
// begin enable ;
7480: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7481: LD_INT 22
7483: PUSH
7484: LD_INT 1
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 21
7493: PUSH
7494: LD_INT 1
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: LD_INT 91
7503: PUSH
7504: LD_EXP 8
7508: PPUSH
7509: CALL_OW 310
7513: PUSH
7514: LD_INT 10
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: PPUSH
7527: CALL_OW 69
7531: PUSH
7532: LD_INT 1
7534: EQUAL
7535: IFFALSE 7601
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7537: LD_INT 1
7539: PPUSH
7540: LD_INT 6
7542: PPUSH
7543: LD_INT 2
7545: PPUSH
7546: LD_INT 1
7548: PPUSH
7549: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7553: LD_EXP 8
7557: PPUSH
7558: LD_INT 6
7560: PPUSH
7561: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7565: LD_EXP 8
7569: PPUSH
7570: CALL_OW 122
// wait ( 0 0$1 ) ;
7574: LD_INT 35
7576: PPUSH
7577: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7581: LD_EXP 8
7585: PPUSH
7586: LD_INT 17
7588: PPUSH
7589: CALL_OW 113
// mikhailStatus = 3 ;
7593: LD_ADDR_EXP 21
7597: PUSH
7598: LD_INT 3
7600: ST_TO_ADDR
// end ; end ;
7601: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7602: LD_EXP 1
7606: PPUSH
7607: LD_EXP 23
7611: PPUSH
7612: CALL_OW 296
7616: PUSH
7617: LD_INT 5
7619: LESS
7620: PUSH
7621: LD_EXP 21
7625: PUSH
7626: LD_INT 3
7628: EQUAL
7629: AND
7630: PUSH
7631: LD_EXP 22
7635: PUSH
7636: LD_INT 3
7638: EQUAL
7639: NOT
7640: AND
7641: IFFALSE 7857
7643: GO 7645
7645: DISABLE
7646: LD_INT 0
7648: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
7649: LD_ADDR_VAR 0 1
7653: PUSH
7654: LD_INT 22
7656: PUSH
7657: LD_INT 1
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 21
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 26
7676: PUSH
7677: LD_INT 1
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: PUSH
7694: LD_EXP 1
7698: PUSH
7699: EMPTY
7700: LIST
7701: DIFF
7702: ST_TO_ADDR
// DialogueOn ;
7703: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7707: LD_EXP 1
7711: PPUSH
7712: LD_STRING D7-JMM-1
7714: PPUSH
7715: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7719: LD_VAR 0 1
7723: PUSH
7724: LD_INT 1
7726: ARRAY
7727: PPUSH
7728: LD_STRING D7-Sol1-1
7730: PPUSH
7731: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7735: LD_EXP 1
7739: PPUSH
7740: LD_STRING D7-JMM-2
7742: PPUSH
7743: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7747: LD_VAR 0 1
7751: PUSH
7752: LD_INT 1
7754: ARRAY
7755: PPUSH
7756: LD_STRING D7-Sol1-2
7758: PPUSH
7759: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7763: LD_EXP 1
7767: PPUSH
7768: LD_STRING D7-JMM-3
7770: PPUSH
7771: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7775: LD_VAR 0 1
7779: PUSH
7780: LD_INT 1
7782: ARRAY
7783: PPUSH
7784: LD_STRING D7-Sol1-3
7786: PPUSH
7787: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7791: LD_EXP 3
7795: PPUSH
7796: CALL_OW 302
7800: PUSH
7801: LD_EXP 4
7805: PPUSH
7806: CALL_OW 302
7810: AND
7811: IFFALSE 7853
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7813: LD_EXP 3
7817: PPUSH
7818: LD_STRING D7-Cyrus-3
7820: PPUSH
7821: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7825: LD_VAR 0 1
7829: PUSH
7830: LD_INT 1
7832: ARRAY
7833: PPUSH
7834: LD_STRING D7-Sol1-4
7836: PPUSH
7837: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7841: LD_EXP 4
7845: PPUSH
7846: LD_STRING D7-Lisa-4
7848: PPUSH
7849: CALL_OW 88
// end ; DialogueOff ;
7853: CALL_OW 7
// end ;
7857: PPOPN 1
7859: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7860: LD_EXP 8
7864: PPUSH
7865: CALL_OW 303
7869: PUSH
7870: LD_EXP 21
7874: PUSH
7875: LD_INT 3
7877: EQUAL
7878: AND
7879: IFFALSE 7893
7881: GO 7883
7883: DISABLE
// begin enable ;
7884: ENABLE
// mikhailStatus = 2 ;
7885: LD_ADDR_EXP 21
7889: PUSH
7890: LD_INT 2
7892: ST_TO_ADDR
// end ;
7893: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7894: LD_EXP 8
7898: PPUSH
7899: LD_INT 17
7901: PPUSH
7902: CALL_OW 308
7906: PUSH
7907: LD_EXP 8
7911: PPUSH
7912: CALL_OW 255
7916: PUSH
7917: LD_INT 6
7919: EQUAL
7920: AND
7921: IFFALSE 7954
7923: GO 7925
7925: DISABLE
// begin if not mikhailInBase = 3 then
7926: LD_EXP 22
7930: PUSH
7931: LD_INT 3
7933: EQUAL
7934: NOT
7935: IFFALSE 7945
// mikhailStatus = 3 ;
7937: LD_ADDR_EXP 21
7941: PUSH
7942: LD_INT 3
7944: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
7945: LD_EXP 8
7949: PPUSH
7950: CALL_OW 64
// end ;
7954: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
7955: LD_EXP 21
7959: PUSH
7960: LD_INT 3
7962: EQUAL
7963: PUSH
7964: LD_EXP 8
7968: PPUSH
7969: CALL_OW 255
7973: PUSH
7974: LD_INT 6
7976: EQUAL
7977: AND
7978: IFFALSE 8144
7980: GO 7982
7982: DISABLE
7983: LD_INT 0
7985: PPUSH
7986: PPUSH
// begin enable ;
7987: ENABLE
// if IsOk ( Mikhail ) then
7988: LD_EXP 8
7992: PPUSH
7993: CALL_OW 302
7997: IFFALSE 8144
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
7999: LD_ADDR_VAR 0 2
8003: PUSH
8004: LD_EXP 8
8008: PPUSH
8009: LD_INT 22
8011: PUSH
8012: LD_INT 1
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PUSH
8019: LD_INT 21
8021: PUSH
8022: LD_INT 1
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: PPUSH
8033: CALL_OW 69
8037: PPUSH
8038: CALL 10027 0 2
8042: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8043: LD_VAR 0 2
8047: PPUSH
8048: LD_EXP 8
8052: PPUSH
8053: CALL_OW 296
8057: PUSH
8058: LD_INT 8
8060: LESS
8061: IFFALSE 8144
// begin if GetSex ( attacker ) = sex_male then
8063: LD_VAR 0 2
8067: PPUSH
8068: CALL_OW 258
8072: PUSH
8073: LD_INT 1
8075: EQUAL
8076: IFFALSE 8112
// begin disable ;
8078: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8079: LD_VAR 0 2
8083: PPUSH
8084: LD_STRING D7a-Sol1-1
8086: PPUSH
8087: CALL_OW 88
// wait ( 0 0$2 ) ;
8091: LD_INT 70
8093: PPUSH
8094: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8098: LD_VAR 0 2
8102: PPUSH
8103: LD_STRING D7a-Sol1-1a
8105: PPUSH
8106: CALL_OW 88
// end else
8110: GO 8144
// begin disable ;
8112: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8113: LD_VAR 0 2
8117: PPUSH
8118: LD_STRING D7a-FSol1-1
8120: PPUSH
8121: CALL_OW 88
// wait ( 0 0$2 ) ;
8125: LD_INT 70
8127: PPUSH
8128: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8132: LD_VAR 0 2
8136: PPUSH
8137: LD_STRING D7a-FSol1-1a
8139: PPUSH
8140: CALL_OW 88
// end ; end ; end ; end ;
8144: PPOPN 2
8146: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8147: LD_EXP 27
8151: PUSH
8152: LD_INT 1
8154: EQUAL
8155: PUSH
8156: LD_INT 22
8158: PPUSH
8159: LD_INT 22
8161: PUSH
8162: LD_INT 3
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: PUSH
8169: LD_INT 21
8171: PUSH
8172: LD_INT 1
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PPUSH
8183: CALL_OW 70
8187: PUSH
8188: LD_INT 2
8190: GREATER
8191: AND
8192: PUSH
8193: LD_INT 22
8195: PPUSH
8196: LD_INT 22
8198: PUSH
8199: LD_INT 1
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 2
8208: PUSH
8209: LD_INT 21
8211: PUSH
8212: LD_INT 1
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 59
8221: PUSH
8222: EMPTY
8223: LIST
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PPUSH
8234: CALL_OW 70
8238: PUSH
8239: LD_INT 0
8241: EQUAL
8242: AND
8243: IFFALSE 8258
8245: GO 8247
8247: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8248: LD_INT 1
8250: PPUSH
8251: LD_INT 3
8253: PPUSH
8254: CALL_OW 235
// end ;
8258: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8259: LD_EXP 29
8263: PUSH
8264: LD_INT 1
8266: EQUAL
8267: PUSH
8268: LD_INT 22
8270: PUSH
8271: LD_INT 0
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PUSH
8278: LD_INT 25
8280: PUSH
8281: LD_INT 14
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PPUSH
8292: CALL_OW 69
8296: PUSH
8297: LD_INT 0
8299: EQUAL
8300: AND
8301: IFFALSE 8395
8303: GO 8305
8305: DISABLE
8306: LD_INT 0
8308: PPUSH
8309: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8310: LD_ADDR_VAR 0 2
8314: PUSH
8315: LD_INT 22
8317: PUSH
8318: LD_INT 1
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: LD_INT 21
8327: PUSH
8328: LD_INT 1
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 23
8337: PUSH
8338: LD_INT 1
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: PPUSH
8350: CALL_OW 69
8354: ST_TO_ADDR
// for i in tmp do
8355: LD_ADDR_VAR 0 1
8359: PUSH
8360: LD_VAR 0 2
8364: PUSH
8365: FOR_IN
8366: IFFALSE 8393
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8368: LD_VAR 0 1
8372: PPUSH
8373: LD_INT 1
8375: PPUSH
8376: LD_INT 4
8378: PPUSH
8379: CALL_OW 12
8383: PPUSH
8384: LD_INT 300
8386: PPUSH
8387: CALL_OW 492
// end ;
8391: GO 8365
8393: POP
8394: POP
// end ; end_of_file
8395: PPOPN 2
8397: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8398: LD_INT 0
8400: PPUSH
8401: PPUSH
8402: PPUSH
8403: PPUSH
// for i = 1 to count do
8404: LD_ADDR_VAR 0 8
8408: PUSH
8409: DOUBLE
8410: LD_INT 1
8412: DEC
8413: ST_TO_ADDR
8414: LD_VAR 0 6
8418: PUSH
8419: FOR_TO
8420: IFFALSE 8501
// begin uc_side = side ;
8422: LD_ADDR_OWVAR 20
8426: PUSH
8427: LD_VAR 0 1
8431: ST_TO_ADDR
// uc_nation = nation ;
8432: LD_ADDR_OWVAR 21
8436: PUSH
8437: LD_VAR 0 2
8441: ST_TO_ADDR
// hc_gallery =  ;
8442: LD_ADDR_OWVAR 33
8446: PUSH
8447: LD_STRING 
8449: ST_TO_ADDR
// hc_name =  ;
8450: LD_ADDR_OWVAR 26
8454: PUSH
8455: LD_STRING 
8457: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8458: LD_INT 0
8460: PPUSH
8461: LD_VAR 0 5
8465: PPUSH
8466: LD_VAR 0 4
8470: PPUSH
8471: CALL_OW 380
// un = CreateHuman ;
8475: LD_ADDR_VAR 0 10
8479: PUSH
8480: CALL_OW 44
8484: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8485: LD_VAR 0 10
8489: PPUSH
8490: LD_VAR 0 3
8494: PPUSH
8495: CALL_OW 52
// end ;
8499: GO 8419
8501: POP
8502: POP
// end ;
8503: LD_VAR 0 7
8507: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8508: LD_INT 0
8510: PPUSH
8511: PPUSH
8512: PPUSH
// uc_side := GetSide ( b ) ;
8513: LD_ADDR_OWVAR 20
8517: PUSH
8518: LD_VAR 0 2
8522: PPUSH
8523: CALL_OW 255
8527: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8528: LD_ADDR_OWVAR 21
8532: PUSH
8533: LD_VAR 0 2
8537: PPUSH
8538: CALL_OW 248
8542: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8543: LD_INT 0
8545: PPUSH
8546: LD_INT 1
8548: PPUSH
8549: LD_VAR 0 1
8553: PPUSH
8554: CALL_OW 380
// un = CreateHuman ;
8558: LD_ADDR_VAR 0 4
8562: PUSH
8563: CALL_OW 44
8567: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8568: LD_ADDR_VAR 0 5
8572: PUSH
8573: LD_VAR 0 2
8577: PPUSH
8578: CALL_OW 254
8582: PUSH
8583: LD_INT 3
8585: MINUS
8586: ST_TO_ADDR
// if dir < 0 then
8587: LD_VAR 0 5
8591: PUSH
8592: LD_INT 0
8594: LESS
8595: IFFALSE 8611
// dir := 6 + dir ;
8597: LD_ADDR_VAR 0 5
8601: PUSH
8602: LD_INT 6
8604: PUSH
8605: LD_VAR 0 5
8609: PLUS
8610: ST_TO_ADDR
// SetDir ( un , dir ) ;
8611: LD_VAR 0 4
8615: PPUSH
8616: LD_VAR 0 5
8620: PPUSH
8621: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8625: LD_VAR 0 4
8629: PPUSH
8630: LD_VAR 0 2
8634: PPUSH
8635: CALL_OW 52
// end ;
8639: LD_VAR 0 3
8643: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8644: LD_INT 0
8646: PPUSH
8647: PPUSH
8648: PPUSH
8649: PPUSH
8650: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8651: LD_ADDR_VAR 0 7
8655: PUSH
8656: LD_INT 22
8658: PUSH
8659: LD_VAR 0 1
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 25
8670: PUSH
8671: LD_INT 2
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 24
8680: PUSH
8681: LD_INT 1000
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: LIST
8692: PPUSH
8693: CALL_OW 69
8697: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8698: LD_ADDR_VAR 0 5
8702: PUSH
8703: LD_VAR 0 3
8707: PPUSH
8708: LD_INT 22
8710: PUSH
8711: LD_VAR 0 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 21
8722: PUSH
8723: LD_INT 3
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PUSH
8730: LD_INT 3
8732: PUSH
8733: LD_INT 24
8735: PUSH
8736: LD_INT 1000
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: LIST
8751: PUSH
8752: EMPTY
8753: LIST
8754: PPUSH
8755: CALL_OW 70
8759: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8760: LD_VAR 0 5
8764: PUSH
8765: LD_INT 0
8767: GREATER
8768: PUSH
8769: LD_VAR 0 7
8773: PUSH
8774: LD_INT 0
8776: GREATER
8777: AND
8778: IFFALSE 8844
// begin for i in engineerOk_list do
8780: LD_ADDR_VAR 0 6
8784: PUSH
8785: LD_VAR 0 7
8789: PUSH
8790: FOR_IN
8791: IFFALSE 8842
// begin for j in buildings_list do
8793: LD_ADDR_VAR 0 8
8797: PUSH
8798: LD_VAR 0 5
8802: PUSH
8803: FOR_IN
8804: IFFALSE 8838
// begin AddComExitBuilding ( i ) ;
8806: LD_VAR 0 6
8810: PPUSH
8811: CALL_OW 182
// wait ( 0 0$1 ) ;
8815: LD_INT 35
8817: PPUSH
8818: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8822: LD_VAR 0 6
8826: PPUSH
8827: LD_VAR 0 8
8831: PPUSH
8832: CALL_OW 190
// end ;
8836: GO 8803
8838: POP
8839: POP
// end ;
8840: GO 8790
8842: POP
8843: POP
// end ; if buildings_list = 0 then
8844: LD_VAR 0 5
8848: PUSH
8849: LD_INT 0
8851: EQUAL
8852: IFFALSE 8885
// begin for i in engineerOK_list do
8854: LD_ADDR_VAR 0 6
8858: PUSH
8859: LD_VAR 0 7
8863: PUSH
8864: FOR_IN
8865: IFFALSE 8883
// begin ComEnterUnit ( i , building ) ;
8867: LD_VAR 0 6
8871: PPUSH
8872: LD_VAR 0 2
8876: PPUSH
8877: CALL_OW 120
// end ;
8881: GO 8864
8883: POP
8884: POP
// end ; end ;
8885: LD_VAR 0 4
8889: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
8890: LD_INT 0
8892: PPUSH
8893: PPUSH
8894: PPUSH
8895: PPUSH
8896: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
8897: LD_ADDR_VAR 0 6
8901: PUSH
8902: LD_INT 22
8904: PUSH
8905: LD_VAR 0 1
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 25
8916: PUSH
8917: LD_INT 4
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PUSH
8924: LD_INT 24
8926: PUSH
8927: LD_INT 250
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: PPUSH
8939: CALL_OW 69
8943: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
8944: LD_ADDR_VAR 0 9
8948: PUSH
8949: LD_VAR 0 3
8953: PPUSH
8954: LD_INT 22
8956: PUSH
8957: LD_VAR 0 1
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 21
8968: PUSH
8969: LD_INT 1
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: LD_INT 3
8978: PUSH
8979: LD_INT 24
8981: PUSH
8982: LD_INT 650
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 70
9002: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9003: LD_VAR 0 9
9007: PUSH
9008: LD_INT 0
9010: GREATER
9011: PUSH
9012: LD_VAR 0 6
9016: PUSH
9017: LD_INT 0
9019: GREATER
9020: AND
9021: IFFALSE 9148
// begin for i = 1 to damageUnits do
9023: LD_ADDR_VAR 0 7
9027: PUSH
9028: DOUBLE
9029: LD_INT 1
9031: DEC
9032: ST_TO_ADDR
9033: LD_VAR 0 9
9037: PUSH
9038: FOR_TO
9039: IFFALSE 9063
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9041: LD_VAR 0 9
9045: PUSH
9046: LD_VAR 0 7
9050: ARRAY
9051: PPUSH
9052: LD_VAR 0 2
9056: PPUSH
9057: CALL_OW 113
9061: GO 9038
9063: POP
9064: POP
// for i in sci_list do
9065: LD_ADDR_VAR 0 7
9069: PUSH
9070: LD_VAR 0 6
9074: PUSH
9075: FOR_IN
9076: IFFALSE 9144
// begin ComExitBuilding ( i ) ;
9078: LD_VAR 0 7
9082: PPUSH
9083: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9087: LD_ADDR_VAR 0 8
9091: PUSH
9092: LD_VAR 0 2
9096: PPUSH
9097: LD_INT 22
9099: PUSH
9100: LD_VAR 0 1
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PPUSH
9109: CALL_OW 70
9113: PUSH
9114: FOR_IN
9115: IFFALSE 9140
// begin AddComHeal ( i , j ) ;
9117: LD_VAR 0 7
9121: PPUSH
9122: LD_VAR 0 8
9126: PPUSH
9127: CALL_OW 188
// wait ( 1 1$0 ) ;
9131: LD_INT 2100
9133: PPUSH
9134: CALL_OW 67
// end ;
9138: GO 9114
9140: POP
9141: POP
// end ;
9142: GO 9075
9144: POP
9145: POP
// end else
9146: GO 9162
// begin AddComEnterUnit ( sci_list , build ) ;
9148: LD_VAR 0 6
9152: PPUSH
9153: LD_VAR 0 4
9157: PPUSH
9158: CALL_OW 180
// end ; end ;
9162: LD_VAR 0 5
9166: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9167: LD_INT 0
9169: PPUSH
9170: PPUSH
9171: PPUSH
9172: PPUSH
9173: PPUSH
9174: PPUSH
9175: PPUSH
9176: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9177: LD_ADDR_VAR 0 7
9181: PUSH
9182: LD_VAR 0 3
9186: PPUSH
9187: LD_INT 22
9189: PUSH
9190: LD_VAR 0 1
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: LD_INT 21
9201: PUSH
9202: LD_INT 2
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PUSH
9209: LD_INT 24
9211: PUSH
9212: LD_INT 550
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: PUSH
9219: LD_INT 34
9221: PUSH
9222: LD_INT 46
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 70
9239: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9240: LD_ADDR_VAR 0 8
9244: PUSH
9245: LD_VAR 0 3
9249: PPUSH
9250: LD_INT 22
9252: PUSH
9253: LD_VAR 0 1
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: LD_INT 21
9264: PUSH
9265: LD_INT 2
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: LD_INT 34
9274: PUSH
9275: LD_INT 46
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: PUSH
9282: LD_INT 3
9284: PUSH
9285: LD_INT 24
9287: PUSH
9288: LD_INT 550
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: PPUSH
9305: CALL_OW 70
9309: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9310: LD_ADDR_VAR 0 9
9314: PUSH
9315: LD_VAR 0 2
9319: PPUSH
9320: LD_INT 22
9322: PUSH
9323: LD_VAR 0 1
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PUSH
9332: LD_INT 21
9334: PUSH
9335: LD_INT 2
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: LD_INT 34
9344: PUSH
9345: LD_INT 46
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: LD_INT 24
9354: PUSH
9355: LD_INT 1000
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: PUSH
9362: LD_INT 58
9364: PUSH
9365: EMPTY
9366: LIST
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: PPUSH
9375: CALL_OW 70
9379: ST_TO_ADDR
// for i in damageVehicle_list do
9380: LD_ADDR_VAR 0 5
9384: PUSH
9385: LD_VAR 0 8
9389: PUSH
9390: FOR_IN
9391: IFFALSE 9410
// mechanicInside_list = UnitsInside ( i ) ;
9393: LD_ADDR_VAR 0 10
9397: PUSH
9398: LD_VAR 0 5
9402: PPUSH
9403: CALL_OW 313
9407: ST_TO_ADDR
9408: GO 9390
9410: POP
9411: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9412: LD_ADDR_VAR 0 11
9416: PUSH
9417: LD_VAR 0 2
9421: PPUSH
9422: LD_INT 22
9424: PUSH
9425: LD_VAR 0 1
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 25
9436: PUSH
9437: LD_INT 3
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PPUSH
9448: CALL_OW 70
9452: ST_TO_ADDR
// if damageVehicle_list > 0 then
9453: LD_VAR 0 8
9457: PUSH
9458: LD_INT 0
9460: GREATER
9461: IFFALSE 9534
// begin for i in damageVehicle_list do
9463: LD_ADDR_VAR 0 5
9467: PUSH
9468: LD_VAR 0 8
9472: PUSH
9473: FOR_IN
9474: IFFALSE 9532
// begin for j in mechanicInside_list do
9476: LD_ADDR_VAR 0 6
9480: PUSH
9481: LD_VAR 0 10
9485: PUSH
9486: FOR_IN
9487: IFFALSE 9528
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9489: LD_VAR 0 8
9493: PPUSH
9494: LD_VAR 0 2
9498: PPUSH
9499: CALL_OW 113
// AddComExitVehicle ( j ) ;
9503: LD_VAR 0 6
9507: PPUSH
9508: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9512: LD_VAR 0 6
9516: PPUSH
9517: LD_VAR 0 5
9521: PPUSH
9522: CALL_OW 189
// end ;
9526: GO 9486
9528: POP
9529: POP
// end ;
9530: GO 9473
9532: POP
9533: POP
// end ; if emptyVehicle_list > 0 then
9534: LD_VAR 0 9
9538: PUSH
9539: LD_INT 0
9541: GREATER
9542: IFFALSE 9592
// begin for i in emptyVehicle_list do
9544: LD_ADDR_VAR 0 5
9548: PUSH
9549: LD_VAR 0 9
9553: PUSH
9554: FOR_IN
9555: IFFALSE 9590
// begin for j in mechanicOutside_list do
9557: LD_ADDR_VAR 0 6
9561: PUSH
9562: LD_VAR 0 11
9566: PUSH
9567: FOR_IN
9568: IFFALSE 9586
// begin AddComEnterUnit ( j , i ) ;
9570: LD_VAR 0 6
9574: PPUSH
9575: LD_VAR 0 5
9579: PPUSH
9580: CALL_OW 180
// end ;
9584: GO 9567
9586: POP
9587: POP
// end ;
9588: GO 9554
9590: POP
9591: POP
// end ; if VehicleOK_list > 0 then
9592: LD_VAR 0 7
9596: PUSH
9597: LD_INT 0
9599: GREATER
9600: IFFALSE 9634
// begin for i in VehicleOK_list do
9602: LD_ADDR_VAR 0 5
9606: PUSH
9607: LD_VAR 0 7
9611: PUSH
9612: FOR_IN
9613: IFFALSE 9632
// ComAgressiveMove ( i , 110 , 29 ) ;
9615: LD_VAR 0 5
9619: PPUSH
9620: LD_INT 110
9622: PPUSH
9623: LD_INT 29
9625: PPUSH
9626: CALL_OW 114
9630: GO 9612
9632: POP
9633: POP
// end ; end ;
9634: LD_VAR 0 4
9638: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9639: LD_INT 0
9641: PPUSH
9642: PPUSH
9643: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9644: LD_VAR 0 1
9648: PPUSH
9649: LD_INT 22
9651: PUSH
9652: LD_VAR 0 2
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: LD_INT 2
9663: PUSH
9664: LD_INT 21
9666: PUSH
9667: LD_INT 2
9669: PUSH
9670: EMPTY
9671: LIST
9672: LIST
9673: PUSH
9674: LD_INT 21
9676: PUSH
9677: LD_INT 1
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PPUSH
9693: CALL_OW 70
9697: PUSH
9698: LD_VAR 0 5
9702: GREATER
9703: IFFALSE 9835
// begin for i in defendersList do
9705: LD_ADDR_VAR 0 7
9709: PUSH
9710: LD_VAR 0 3
9714: PUSH
9715: FOR_IN
9716: IFFALSE 9831
// begin AddComExitBuilding ( i ) ;
9718: LD_VAR 0 7
9722: PPUSH
9723: CALL_OW 182
// wait ( 0 0$1 ) ;
9727: LD_INT 35
9729: PPUSH
9730: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9734: LD_ADDR_VAR 0 8
9738: PUSH
9739: LD_VAR 0 1
9743: PPUSH
9744: LD_INT 22
9746: PUSH
9747: LD_VAR 0 2
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 2
9758: PUSH
9759: LD_INT 21
9761: PUSH
9762: LD_INT 2
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: LD_INT 21
9771: PUSH
9772: LD_INT 1
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: LIST
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PPUSH
9788: CALL_OW 70
9792: PUSH
9793: FOR_IN
9794: IFFALSE 9827
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9796: LD_VAR 0 7
9800: PPUSH
9801: LD_VAR 0 8
9805: PPUSH
9806: CALL_OW 250
9810: PPUSH
9811: LD_VAR 0 8
9815: PPUSH
9816: CALL_OW 251
9820: PPUSH
9821: CALL_OW 174
9825: GO 9793
9827: POP
9828: POP
// end ;
9829: GO 9715
9831: POP
9832: POP
// end else
9833: GO 9866
// begin for i in defendersList do
9835: LD_ADDR_VAR 0 7
9839: PUSH
9840: LD_VAR 0 3
9844: PUSH
9845: FOR_IN
9846: IFFALSE 9864
// ComEnterUnit ( i , build ) ;
9848: LD_VAR 0 7
9852: PPUSH
9853: LD_VAR 0 4
9857: PPUSH
9858: CALL_OW 120
9862: GO 9845
9864: POP
9865: POP
// end ; end ;
9866: LD_VAR 0 6
9870: RET
// export function RussianTrap ; var i ; begin
9871: LD_INT 0
9873: PPUSH
9874: PPUSH
// if GetSide ( Brian ) = 4 then
9875: LD_EXP 6
9879: PPUSH
9880: CALL_OW 255
9884: PUSH
9885: LD_INT 4
9887: EQUAL
9888: IFFALSE 9911
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9890: LD_EXP 6
9894: PUSH
9895: LD_EXP 7
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: PPUSH
9904: LD_INT 0
9906: PPUSH
9907: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
9911: LD_ADDR_VAR 0 2
9915: PUSH
9916: LD_INT 22
9918: PUSH
9919: LD_INT 3
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 21
9928: PUSH
9929: LD_INT 1
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PPUSH
9940: CALL_OW 69
9944: PUSH
9945: FOR_IN
9946: IFFALSE 10020
// begin ComExitBuilding ( i ) ;
9948: LD_VAR 0 2
9952: PPUSH
9953: CALL_OW 122
// wait ( 0 0$1 ) ;
9957: LD_INT 35
9959: PPUSH
9960: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
9964: LD_VAR 0 2
9968: PPUSH
9969: LD_INT 120
9971: PPUSH
9972: LD_INT 56
9974: PPUSH
9975: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
9979: LD_VAR 0 2
9983: PPUSH
9984: LD_INT 111
9986: PPUSH
9987: LD_INT 37
9989: PPUSH
9990: CALL_OW 174
// AddComCrawl ( i ) ;
9994: LD_VAR 0 2
9998: PPUSH
9999: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10003: LD_VAR 0 2
10007: PPUSH
10008: LD_INT 109
10010: PPUSH
10011: LD_INT 30
10013: PPUSH
10014: CALL_OW 174
// end ;
10018: GO 9945
10020: POP
10021: POP
// end ;
10022: LD_VAR 0 1
10026: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10027: LD_INT 0
10029: PPUSH
10030: PPUSH
10031: PPUSH
10032: PPUSH
10033: PPUSH
// nearest_dist = 1000 ;
10034: LD_ADDR_VAR 0 4
10038: PUSH
10039: LD_INT 1000
10041: ST_TO_ADDR
// nearest_un = un ;
10042: LD_ADDR_VAR 0 5
10046: PUSH
10047: LD_VAR 0 1
10051: ST_TO_ADDR
// for sold in units do
10052: LD_ADDR_VAR 0 6
10056: PUSH
10057: LD_VAR 0 2
10061: PUSH
10062: FOR_IN
10063: IFFALSE 10119
// begin dist = GetDistUnits ( un , sold ) ;
10065: LD_ADDR_VAR 0 7
10069: PUSH
10070: LD_VAR 0 1
10074: PPUSH
10075: LD_VAR 0 6
10079: PPUSH
10080: CALL_OW 296
10084: ST_TO_ADDR
// if dist < nearest_dist then
10085: LD_VAR 0 7
10089: PUSH
10090: LD_VAR 0 4
10094: LESS
10095: IFFALSE 10117
// begin nearest_un = sold ;
10097: LD_ADDR_VAR 0 5
10101: PUSH
10102: LD_VAR 0 6
10106: ST_TO_ADDR
// nearest_dist = dist ;
10107: LD_ADDR_VAR 0 4
10111: PUSH
10112: LD_VAR 0 7
10116: ST_TO_ADDR
// end ; end ;
10117: GO 10062
10119: POP
10120: POP
// result := nearest_un ;
10121: LD_ADDR_VAR 0 3
10125: PUSH
10126: LD_VAR 0 5
10130: ST_TO_ADDR
// end ;
10131: LD_VAR 0 3
10135: RET
// export function PrepareDifficulty ; begin
10136: LD_INT 0
10138: PPUSH
// if Difficulty = 1 then
10139: LD_OWVAR 67
10143: PUSH
10144: LD_INT 1
10146: EQUAL
10147: IFFALSE 10210
// begin RemoveUnit ( brw2 ) ;
10149: LD_INT 9
10151: PPUSH
10152: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10156: LD_INT 30
10158: PPUSH
10159: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10163: LD_INT 52
10165: PPUSH
10166: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10170: LD_INT 63
10172: PPUSH
10173: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10177: LD_INT 5
10179: PUSH
10180: LD_INT 4
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PPUSH
10187: LD_INT 60
10189: PPUSH
10190: CALL_OW 240
// RuSoldMinLevel = 0 ;
10194: LD_ADDR_EXP 13
10198: PUSH
10199: LD_INT 0
10201: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10202: LD_ADDR_EXP 14
10206: PUSH
10207: LD_INT 1
10209: ST_TO_ADDR
// end ; if Difficulty = 2 then
10210: LD_OWVAR 67
10214: PUSH
10215: LD_INT 2
10217: EQUAL
10218: IFFALSE 10260
// begin RemoveUnit ( brw4 ) ;
10220: LD_INT 52
10222: PPUSH
10223: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10227: LD_INT 5
10229: PUSH
10230: LD_INT 4
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PPUSH
10237: LD_INT 50
10239: PPUSH
10240: CALL_OW 240
// RuSoldMinLevel = 1 ;
10244: LD_ADDR_EXP 13
10248: PUSH
10249: LD_INT 1
10251: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10252: LD_ADDR_EXP 14
10256: PUSH
10257: LD_INT 2
10259: ST_TO_ADDR
// end ; if Difficulty = 3 then
10260: LD_OWVAR 67
10264: PUSH
10265: LD_INT 3
10267: EQUAL
10268: IFFALSE 10303
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10270: LD_INT 5
10272: PUSH
10273: LD_INT 4
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PPUSH
10280: LD_INT 40
10282: PPUSH
10283: CALL_OW 240
// RuSoldMinLevel = 2 ;
10287: LD_ADDR_EXP 13
10291: PUSH
10292: LD_INT 2
10294: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10295: LD_ADDR_EXP 14
10299: PUSH
10300: LD_INT 3
10302: ST_TO_ADDR
// end ; end ;
10303: LD_VAR 0 1
10307: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10308: LD_INT 0
10310: PPUSH
10311: PPUSH
10312: PPUSH
// tmp = [ ] ;
10313: LD_ADDR_VAR 0 5
10317: PUSH
10318: EMPTY
10319: ST_TO_ADDR
// if not vehicles then
10320: LD_VAR 0 1
10324: NOT
10325: IFFALSE 10329
// exit ;
10327: GO 10446
// for i in vehicles do
10329: LD_ADDR_VAR 0 4
10333: PUSH
10334: LD_VAR 0 1
10338: PUSH
10339: FOR_IN
10340: IFFALSE 10430
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10342: LD_ADDR_VAR 0 5
10346: PUSH
10347: LD_VAR 0 5
10351: PPUSH
10352: LD_INT 1
10354: PPUSH
10355: LD_VAR 0 4
10359: PPUSH
10360: CALL_OW 265
10364: PUSH
10365: LD_VAR 0 4
10369: PPUSH
10370: CALL_OW 262
10374: PUSH
10375: LD_VAR 0 4
10379: PPUSH
10380: CALL_OW 263
10384: PUSH
10385: LD_VAR 0 4
10389: PPUSH
10390: CALL_OW 264
10394: PUSH
10395: LD_VAR 0 4
10399: PPUSH
10400: CALL_OW 261
10404: PUSH
10405: LD_VAR 0 4
10409: PPUSH
10410: CALL_OW 256
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PPUSH
10423: CALL_OW 2
10427: ST_TO_ADDR
// end ;
10428: GO 10339
10430: POP
10431: POP
// SaveVariable ( tmp , ident ) ;
10432: LD_VAR 0 5
10436: PPUSH
10437: LD_VAR 0 2
10441: PPUSH
10442: CALL_OW 39
// end ; end_of_file
10446: LD_VAR 0 3
10450: RET
// export function PrepareHeroes ; begin
10451: LD_INT 0
10453: PPUSH
// uc_side = 1 ;
10454: LD_ADDR_OWVAR 20
10458: PUSH
10459: LD_INT 1
10461: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10462: LD_ADDR_EXP 1
10466: PUSH
10467: LD_STRING 01_JMM
10469: PPUSH
10470: CALL_OW 34
10474: ST_TO_ADDR
// SetLives ( JMM , LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ) ;
10475: LD_EXP 1
10479: PPUSH
10480: LD_STRING 01_JMMLifePoints_1
10482: PPUSH
10483: LD_INT 1000
10485: PPUSH
10486: CALL_OW 30
10490: PPUSH
10491: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10495: LD_ADDR_EXP 9
10499: PUSH
10500: LD_STRING Powell
10502: PPUSH
10503: CALL_OW 25
10507: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10508: LD_ADDR_EXP 2
10512: PUSH
10513: LD_STRING 01_Bobby
10515: PPUSH
10516: CALL_OW 34
10520: ST_TO_ADDR
// if Bobby then
10521: LD_EXP 2
10525: IFFALSE 10547
// SetLives ( Bobby , LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ) ;
10527: LD_EXP 2
10531: PPUSH
10532: LD_STRING 01_BobbyLifePoints_1
10534: PPUSH
10535: LD_INT 1000
10537: PPUSH
10538: CALL_OW 30
10542: PPUSH
10543: CALL_OW 234
// Cyrus = CreateCharacter ( 01_Cyrus ) ;
10547: LD_ADDR_EXP 3
10551: PUSH
10552: LD_STRING 01_Cyrus
10554: PPUSH
10555: CALL_OW 34
10559: ST_TO_ADDR
// if Cyrus then
10560: LD_EXP 3
10564: IFFALSE 10586
// SetLives ( Cyrus , LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ) ;
10566: LD_EXP 3
10570: PPUSH
10571: LD_STRING 01_CyrusLifePoints_1
10573: PPUSH
10574: LD_INT 1000
10576: PPUSH
10577: CALL_OW 30
10581: PPUSH
10582: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
10586: LD_ADDR_EXP 5
10590: PUSH
10591: LD_STRING Khatam
10593: PPUSH
10594: CALL_OW 25
10598: ST_TO_ADDR
// uc_side = 4 ;
10599: LD_ADDR_OWVAR 20
10603: PUSH
10604: LD_INT 4
10606: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10607: LD_ADDR_EXP 4
10611: PUSH
10612: LD_STRING Lisa
10614: PPUSH
10615: CALL_OW 25
10619: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10620: LD_EXP 1
10624: PPUSH
10625: LD_INT 3
10627: PPUSH
10628: LD_INT 0
10630: PPUSH
10631: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10635: LD_EXP 2
10639: PPUSH
10640: LD_INT 3
10642: PPUSH
10643: LD_INT 0
10645: PPUSH
10646: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10650: LD_EXP 3
10654: PPUSH
10655: LD_INT 3
10657: PPUSH
10658: LD_INT 0
10660: PPUSH
10661: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10665: LD_EXP 4
10669: PPUSH
10670: LD_INT 5
10672: PPUSH
10673: LD_INT 0
10675: PPUSH
10676: CALL_OW 49
// ComCrawl ( Lisa ) ;
10680: LD_EXP 4
10684: PPUSH
10685: CALL_OW 137
// end ;
10689: LD_VAR 0 1
10693: RET
// export function PrepareLisSquad ; var i , un ; begin
10694: LD_INT 0
10696: PPUSH
10697: PPUSH
10698: PPUSH
// uc_side = 4 ;
10699: LD_ADDR_OWVAR 20
10703: PUSH
10704: LD_INT 4
10706: ST_TO_ADDR
// uc_nation = 1 ;
10707: LD_ADDR_OWVAR 21
10711: PUSH
10712: LD_INT 1
10714: ST_TO_ADDR
// hc_class := 2 ;
10715: LD_ADDR_OWVAR 28
10719: PUSH
10720: LD_INT 2
10722: ST_TO_ADDR
// hc_sex := sex_male ;
10723: LD_ADDR_OWVAR 27
10727: PUSH
10728: LD_INT 1
10730: ST_TO_ADDR
// hc_gallery :=  ;
10731: LD_ADDR_OWVAR 33
10735: PUSH
10736: LD_STRING 
10738: ST_TO_ADDR
// hc_name :=  ;
10739: LD_ADDR_OWVAR 26
10743: PUSH
10744: LD_STRING 
10746: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10747: LD_ADDR_OWVAR 30
10751: PUSH
10752: LD_INT 0
10754: PUSH
10755: LD_INT 1
10757: PUSH
10758: LD_INT 0
10760: PUSH
10761: LD_INT 0
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
10770: LD_ADDR_OWVAR 31
10774: PUSH
10775: LD_INT 1
10777: PUSH
10778: LD_INT 2
10780: PUSH
10781: LD_INT 0
10783: PUSH
10784: LD_INT 0
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: ST_TO_ADDR
// un := CreateHuman ;
10793: LD_ADDR_VAR 0 3
10797: PUSH
10798: CALL_OW 44
10802: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10803: LD_VAR 0 3
10807: PPUSH
10808: LD_INT 6
10810: PPUSH
10811: LD_INT 0
10813: PPUSH
10814: CALL_OW 49
// hc_sex := sex_female ;
10818: LD_ADDR_OWVAR 27
10822: PUSH
10823: LD_INT 2
10825: ST_TO_ADDR
// hc_gallery :=  ;
10826: LD_ADDR_OWVAR 33
10830: PUSH
10831: LD_STRING 
10833: ST_TO_ADDR
// hc_name :=  ;
10834: LD_ADDR_OWVAR 26
10838: PUSH
10839: LD_STRING 
10841: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
10842: LD_ADDR_OWVAR 30
10846: PUSH
10847: LD_INT 0
10849: PUSH
10850: LD_INT 0
10852: PUSH
10853: LD_INT 0
10855: PUSH
10856: LD_INT 1
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
10865: LD_ADDR_OWVAR 31
10869: PUSH
10870: LD_INT 0
10872: PUSH
10873: LD_INT 1
10875: PUSH
10876: LD_INT 0
10878: PUSH
10879: LD_INT 1
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: ST_TO_ADDR
// un := CreateHuman ;
10888: LD_ADDR_VAR 0 3
10892: PUSH
10893: CALL_OW 44
10897: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
10898: LD_VAR 0 3
10902: PPUSH
10903: LD_INT 6
10905: PPUSH
10906: LD_INT 0
10908: PPUSH
10909: CALL_OW 49
// InitHc ;
10913: CALL_OW 19
// end ;
10917: LD_VAR 0 1
10921: RET
// export function PrepareOtherAmericans ; begin
10922: LD_INT 0
10924: PPUSH
// uc_side = 4 ;
10925: LD_ADDR_OWVAR 20
10929: PUSH
10930: LD_INT 4
10932: ST_TO_ADDR
// uc_nation = 1 ;
10933: LD_ADDR_OWVAR 21
10937: PUSH
10938: LD_INT 1
10940: ST_TO_ADDR
// hc_gallery =  ;
10941: LD_ADDR_OWVAR 33
10945: PUSH
10946: LD_STRING 
10948: ST_TO_ADDR
// hc_name = Brian Garvin ;
10949: LD_ADDR_OWVAR 26
10953: PUSH
10954: LD_STRING Brian Garvin
10956: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
10957: LD_INT 1
10959: PPUSH
10960: LD_INT 1
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: LD_INT 2
10968: PPUSH
10969: CALL_OW 12
10973: PPUSH
10974: CALL_OW 380
// Brian = CreateHuman ;
10978: LD_ADDR_EXP 6
10982: PUSH
10983: CALL_OW 44
10987: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
10988: LD_EXP 6
10992: PPUSH
10993: LD_INT 10
10995: PPUSH
10996: LD_INT 0
10998: PPUSH
10999: CALL_OW 49
// hc_name = Jerry White ;
11003: LD_ADDR_OWVAR 26
11007: PUSH
11008: LD_STRING Jerry White
11010: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11011: LD_INT 1
11013: PPUSH
11014: LD_INT 3
11016: PPUSH
11017: LD_INT 1
11019: PPUSH
11020: LD_INT 2
11022: PPUSH
11023: CALL_OW 12
11027: PPUSH
11028: CALL_OW 380
// Jerry = CreateHuman ;
11032: LD_ADDR_EXP 7
11036: PUSH
11037: CALL_OW 44
11041: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11042: LD_EXP 7
11046: PPUSH
11047: LD_INT 10
11049: PPUSH
11050: LD_INT 0
11052: PPUSH
11053: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11057: LD_EXP 6
11061: PUSH
11062: LD_EXP 7
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PPUSH
11071: CALL_OW 140
// end ;
11075: LD_VAR 0 1
11079: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11080: LD_INT 0
11082: PPUSH
11083: PPUSH
11084: PPUSH
// for i = 1 to 6 do
11085: LD_ADDR_VAR 0 2
11089: PUSH
11090: DOUBLE
11091: LD_INT 1
11093: DEC
11094: ST_TO_ADDR
11095: LD_INT 6
11097: PUSH
11098: FOR_TO
11099: IFFALSE 11193
// begin uc_side = 4 ;
11101: LD_ADDR_OWVAR 20
11105: PUSH
11106: LD_INT 4
11108: ST_TO_ADDR
// uc_nation = 1 ;
11109: LD_ADDR_OWVAR 21
11113: PUSH
11114: LD_INT 1
11116: ST_TO_ADDR
// hc_gallery =  ;
11117: LD_ADDR_OWVAR 33
11121: PUSH
11122: LD_STRING 
11124: ST_TO_ADDR
// hc_name =  ;
11125: LD_ADDR_OWVAR 26
11129: PUSH
11130: LD_STRING 
11132: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11133: LD_INT 0
11135: PPUSH
11136: LD_INT 1
11138: PPUSH
11139: LD_INT 4
11141: PPUSH
11142: CALL_OW 12
11146: PPUSH
11147: LD_INT 1
11149: PPUSH
11150: CALL_OW 380
// un = CreateHuman ;
11154: LD_ADDR_VAR 0 3
11158: PUSH
11159: CALL_OW 44
11163: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11164: LD_VAR 0 3
11168: PPUSH
11169: LD_INT 16
11171: PPUSH
11172: LD_INT 0
11174: PPUSH
11175: CALL_OW 49
// SetLives ( un , 1 ) ;
11179: LD_VAR 0 3
11183: PPUSH
11184: LD_INT 1
11186: PPUSH
11187: CALL_OW 234
// end ;
11191: GO 11098
11193: POP
11194: POP
// DyingSold = CreateHuman ;
11195: LD_ADDR_EXP 33
11199: PUSH
11200: CALL_OW 44
11204: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11205: LD_EXP 33
11209: PPUSH
11210: LD_INT 16
11212: PPUSH
11213: LD_INT 0
11215: PPUSH
11216: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11220: LD_EXP 33
11224: PPUSH
11225: LD_INT 250
11227: PPUSH
11228: CALL_OW 234
// end ; end_of_file
11232: LD_VAR 0 1
11236: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11237: LD_INT 0
11239: PPUSH
11240: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) ;
11241: LD_ADDR_VAR 0 2
11245: PUSH
11246: LD_INT 22
11248: PUSH
11249: LD_INT 1
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 23
11258: PUSH
11259: LD_INT 1
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 25
11268: PUSH
11269: LD_INT 2
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: PPUSH
11281: CALL_OW 69
11285: ST_TO_ADDR
// uc_side = 6 ;
11286: LD_ADDR_OWVAR 20
11290: PUSH
11291: LD_INT 6
11293: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11294: LD_ADDR_EXP 8
11298: PUSH
11299: LD_STRING Mikhail
11301: PPUSH
11302: CALL_OW 25
11306: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
11307: LD_EXP 8
11311: PPUSH
11312: LD_VAR 0 2
11316: PUSH
11317: LD_INT 1
11319: ARRAY
11320: PPUSH
11321: CALL_OW 250
11325: PPUSH
11326: LD_VAR 0 2
11330: PUSH
11331: LD_INT 1
11333: ARRAY
11334: PPUSH
11335: CALL_OW 251
11339: PPUSH
11340: LD_INT 3
11342: PPUSH
11343: LD_INT 1
11345: PPUSH
11346: CALL_OW 50
// end ;
11350: LD_VAR 0 1
11354: RET
// export function PrepareRussianCommander ; begin
11355: LD_INT 0
11357: PPUSH
// uc_side = 3 ;
11358: LD_ADDR_OWVAR 20
11362: PUSH
11363: LD_INT 3
11365: ST_TO_ADDR
// uc_nation = 3 ;
11366: LD_ADDR_OWVAR 21
11370: PUSH
11371: LD_INT 3
11373: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11374: LD_ADDR_EXP 19
11378: PUSH
11379: LD_STRING Natasza
11381: PPUSH
11382: CALL_OW 25
11386: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11387: LD_EXP 19
11391: PPUSH
11392: LD_INT 24
11394: PPUSH
11395: LD_INT 0
11397: PPUSH
11398: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11402: LD_EXP 19
11406: PPUSH
11407: LD_INT 56
11409: PPUSH
11410: LD_INT 16
11412: PPUSH
11413: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11417: LD_ADDR_EXP 24
11421: PUSH
11422: LD_EXP 24
11426: PUSH
11427: LD_EXP 19
11431: ADD
11432: ST_TO_ADDR
// end ;
11433: LD_VAR 0 1
11437: RET
// export function PrepareSouthBase ; var i , un ; begin
11438: LD_INT 0
11440: PPUSH
11441: PPUSH
11442: PPUSH
// for i = 1 to 2 do
11443: LD_ADDR_VAR 0 2
11447: PUSH
11448: DOUBLE
11449: LD_INT 1
11451: DEC
11452: ST_TO_ADDR
11453: LD_INT 2
11455: PUSH
11456: FOR_TO
11457: IFFALSE 11566
// begin uc_side = 3 ;
11459: LD_ADDR_OWVAR 20
11463: PUSH
11464: LD_INT 3
11466: ST_TO_ADDR
// uc_nation = 3 ;
11467: LD_ADDR_OWVAR 21
11471: PUSH
11472: LD_INT 3
11474: ST_TO_ADDR
// hc_gallery =  ;
11475: LD_ADDR_OWVAR 33
11479: PUSH
11480: LD_STRING 
11482: ST_TO_ADDR
// hc_name =  ;
11483: LD_ADDR_OWVAR 26
11487: PUSH
11488: LD_STRING 
11490: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11491: LD_INT 1
11493: PPUSH
11494: LD_INT 1
11496: PPUSH
11497: LD_EXP 13
11501: PPUSH
11502: LD_EXP 14
11506: PPUSH
11507: CALL_OW 12
11511: PPUSH
11512: CALL_OW 380
// hc_importance = 0 ;
11516: LD_ADDR_OWVAR 32
11520: PUSH
11521: LD_INT 0
11523: ST_TO_ADDR
// un = CreateHuman ;
11524: LD_ADDR_VAR 0 3
11528: PUSH
11529: CALL_OW 44
11533: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11534: LD_VAR 0 3
11538: PPUSH
11539: LD_INT 11
11541: PPUSH
11542: LD_INT 0
11544: PPUSH
11545: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11549: LD_VAR 0 3
11553: PPUSH
11554: LD_INT 111
11556: PPUSH
11557: LD_INT 38
11559: PPUSH
11560: CALL_OW 118
// end ;
11564: GO 11456
11566: POP
11567: POP
// for i = 1 to Difficulty do
11568: LD_ADDR_VAR 0 2
11572: PUSH
11573: DOUBLE
11574: LD_INT 1
11576: DEC
11577: ST_TO_ADDR
11578: LD_OWVAR 67
11582: PUSH
11583: FOR_TO
11584: IFFALSE 11685
// begin uc_side = 3 ;
11586: LD_ADDR_OWVAR 20
11590: PUSH
11591: LD_INT 3
11593: ST_TO_ADDR
// uc_nation = 3 ;
11594: LD_ADDR_OWVAR 21
11598: PUSH
11599: LD_INT 3
11601: ST_TO_ADDR
// hc_gallery =  ;
11602: LD_ADDR_OWVAR 33
11606: PUSH
11607: LD_STRING 
11609: ST_TO_ADDR
// hc_name =  ;
11610: LD_ADDR_OWVAR 26
11614: PUSH
11615: LD_STRING 
11617: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11618: LD_INT 0
11620: PPUSH
11621: LD_INT 3
11623: PPUSH
11624: LD_EXP 13
11628: PPUSH
11629: LD_EXP 14
11633: PPUSH
11634: CALL_OW 12
11638: PPUSH
11639: CALL_OW 380
// un = CreateHuman ;
11643: LD_ADDR_VAR 0 3
11647: PUSH
11648: CALL_OW 44
11652: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
11653: LD_VAR 0 3
11657: PPUSH
11658: LD_INT 12
11660: PPUSH
11661: LD_INT 0
11663: PPUSH
11664: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
11668: LD_VAR 0 3
11672: PPUSH
11673: LD_INT 111
11675: PPUSH
11676: LD_INT 28
11678: PPUSH
11679: CALL_OW 118
// end ;
11683: GO 11583
11685: POP
11686: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
11687: LD_INT 3
11689: PPUSH
11690: LD_INT 3
11692: PPUSH
11693: LD_INT 33
11695: PPUSH
11696: LD_EXP 13
11700: PPUSH
11701: LD_EXP 14
11705: PPUSH
11706: CALL_OW 12
11710: PPUSH
11711: LD_INT 1
11713: PPUSH
11714: LD_INT 1
11716: PUSH
11717: LD_INT 1
11719: PPUSH
11720: LD_INT 2
11722: PPUSH
11723: CALL_OW 12
11727: PUSH
11728: LD_INT 1
11730: PPUSH
11731: LD_INT 2
11733: PPUSH
11734: CALL_OW 12
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: LIST
11743: PUSH
11744: LD_OWVAR 67
11748: ARRAY
11749: PPUSH
11750: CALL 8398 0 6
// for i in UnitsInside ( arm2 ) do
11754: LD_ADDR_VAR 0 2
11758: PUSH
11759: LD_INT 33
11761: PPUSH
11762: CALL_OW 313
11766: PUSH
11767: FOR_IN
11768: IFFALSE 11788
// southBaseDefenders = southBaseDefenders ^ i ;
11770: LD_ADDR_EXP 25
11774: PUSH
11775: LD_EXP 25
11779: PUSH
11780: LD_VAR 0 2
11784: ADD
11785: ST_TO_ADDR
11786: GO 11767
11788: POP
11789: POP
// end ;
11790: LD_VAR 0 1
11794: RET
// export function PrepareNorthBase ; var i , un ; begin
11795: LD_INT 0
11797: PPUSH
11798: PPUSH
11799: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
11800: LD_ADDR_VAR 0 2
11804: PUSH
11805: DOUBLE
11806: LD_INT 1
11808: DEC
11809: ST_TO_ADDR
11810: LD_INT 1
11812: PPUSH
11813: LD_INT 2
11815: PPUSH
11816: CALL_OW 12
11820: PUSH
11821: LD_INT 2
11823: PPUSH
11824: LD_INT 3
11826: PPUSH
11827: CALL_OW 12
11831: PUSH
11832: LD_INT 3
11834: PPUSH
11835: LD_INT 4
11837: PPUSH
11838: CALL_OW 12
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: LIST
11847: PUSH
11848: LD_OWVAR 67
11852: ARRAY
11853: PUSH
11854: FOR_TO
11855: IFFALSE 11941
// begin uc_side = 3 ;
11857: LD_ADDR_OWVAR 20
11861: PUSH
11862: LD_INT 3
11864: ST_TO_ADDR
// uc_nation = 3 ;
11865: LD_ADDR_OWVAR 21
11869: PUSH
11870: LD_INT 3
11872: ST_TO_ADDR
// hc_gallery =  ;
11873: LD_ADDR_OWVAR 33
11877: PUSH
11878: LD_STRING 
11880: ST_TO_ADDR
// hc_name =  ;
11881: LD_ADDR_OWVAR 26
11885: PUSH
11886: LD_STRING 
11888: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11889: LD_INT 0
11891: PPUSH
11892: LD_INT 1
11894: PPUSH
11895: LD_EXP 13
11899: PPUSH
11900: LD_EXP 14
11904: PPUSH
11905: CALL_OW 12
11909: PPUSH
11910: CALL_OW 380
// un = CreateHuman ;
11914: LD_ADDR_VAR 0 3
11918: PUSH
11919: CALL_OW 44
11923: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
11924: LD_VAR 0 3
11928: PPUSH
11929: LD_INT 14
11931: PPUSH
11932: LD_INT 0
11934: PPUSH
11935: CALL_OW 49
// end ;
11939: GO 11854
11941: POP
11942: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
11943: LD_INT 3
11945: PPUSH
11946: LD_INT 3
11948: PPUSH
11949: LD_INT 2
11951: PPUSH
11952: LD_EXP 13
11956: PPUSH
11957: LD_EXP 14
11961: PPUSH
11962: CALL_OW 12
11966: PPUSH
11967: LD_INT 1
11969: PPUSH
11970: LD_INT 1
11972: PPUSH
11973: LD_INT 2
11975: PPUSH
11976: CALL_OW 12
11980: PUSH
11981: LD_INT 1
11983: PPUSH
11984: LD_INT 3
11986: PPUSH
11987: CALL_OW 12
11991: PUSH
11992: LD_INT 1
11994: PPUSH
11995: LD_INT 3
11997: PPUSH
11998: CALL_OW 12
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: LIST
12007: PUSH
12008: LD_OWVAR 67
12012: ARRAY
12013: PPUSH
12014: CALL 8398 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12018: LD_INT 3
12020: PPUSH
12021: LD_INT 3
12023: PPUSH
12024: LD_INT 23
12026: PPUSH
12027: LD_EXP 13
12031: PPUSH
12032: LD_EXP 14
12036: PPUSH
12037: CALL_OW 12
12041: PPUSH
12042: LD_INT 4
12044: PPUSH
12045: LD_INT 0
12047: PUSH
12048: LD_INT 1
12050: PUSH
12051: LD_INT 2
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: PUSH
12059: LD_OWVAR 67
12063: ARRAY
12064: PPUSH
12065: CALL 8398 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12069: LD_INT 3
12071: PPUSH
12072: LD_INT 3
12074: PPUSH
12075: LD_INT 1
12077: PPUSH
12078: LD_EXP 13
12082: PPUSH
12083: LD_EXP 14
12087: PPUSH
12088: CALL_OW 12
12092: PPUSH
12093: LD_INT 2
12095: PPUSH
12096: LD_INT 1
12098: PUSH
12099: LD_INT 2
12101: PUSH
12102: LD_INT 2
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: PUSH
12110: LD_OWVAR 67
12114: ARRAY
12115: PPUSH
12116: CALL 8398 0 6
// for i in UnitsInside ( arm1 ) do
12120: LD_ADDR_VAR 0 2
12124: PUSH
12125: LD_INT 2
12127: PPUSH
12128: CALL_OW 313
12132: PUSH
12133: FOR_IN
12134: IFFALSE 12154
// northBaseDefenders = northBaseDefenders ^ i ;
12136: LD_ADDR_EXP 24
12140: PUSH
12141: LD_EXP 24
12145: PUSH
12146: LD_VAR 0 2
12150: ADD
12151: ST_TO_ADDR
12152: GO 12133
12154: POP
12155: POP
// end ;
12156: LD_VAR 0 1
12160: RET
// export function PrepareOtherRussians ; var i , un ; begin
12161: LD_INT 0
12163: PPUSH
12164: PPUSH
12165: PPUSH
// for i = 1 to 2 do
12166: LD_ADDR_VAR 0 2
12170: PUSH
12171: DOUBLE
12172: LD_INT 1
12174: DEC
12175: ST_TO_ADDR
12176: LD_INT 2
12178: PUSH
12179: FOR_TO
12180: IFFALSE 12281
// begin uc_side = 3 ;
12182: LD_ADDR_OWVAR 20
12186: PUSH
12187: LD_INT 3
12189: ST_TO_ADDR
// uc_nation = 3 ;
12190: LD_ADDR_OWVAR 21
12194: PUSH
12195: LD_INT 3
12197: ST_TO_ADDR
// hc_gallery =  ;
12198: LD_ADDR_OWVAR 33
12202: PUSH
12203: LD_STRING 
12205: ST_TO_ADDR
// hc_name =  ;
12206: LD_ADDR_OWVAR 26
12210: PUSH
12211: LD_STRING 
12213: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12214: LD_INT 0
12216: PPUSH
12217: LD_INT 1
12219: PPUSH
12220: LD_EXP 13
12224: PPUSH
12225: LD_EXP 14
12229: PPUSH
12230: CALL_OW 12
12234: PPUSH
12235: CALL_OW 380
// un = CreateHuman ;
12239: LD_ADDR_VAR 0 3
12243: PUSH
12244: CALL_OW 44
12248: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12249: LD_VAR 0 3
12253: PPUSH
12254: LD_INT 9
12256: PPUSH
12257: LD_INT 0
12259: PPUSH
12260: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12264: LD_VAR 0 3
12268: PPUSH
12269: LD_INT 80
12271: PPUSH
12272: LD_INT 73
12274: PPUSH
12275: CALL_OW 118
// end ;
12279: GO 12179
12281: POP
12282: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12283: LD_ADDR_VAR 0 2
12287: PUSH
12288: LD_INT 22
12290: PUSH
12291: LD_INT 3
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: LD_INT 30
12300: PUSH
12301: LD_INT 31
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PPUSH
12312: CALL_OW 69
12316: PUSH
12317: FOR_IN
12318: IFFALSE 12346
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12320: LD_EXP 13
12324: PPUSH
12325: LD_EXP 14
12329: PPUSH
12330: CALL_OW 12
12334: PPUSH
12335: LD_VAR 0 2
12339: PPUSH
12340: CALL 8508 0 2
12344: GO 12317
12346: POP
12347: POP
// end ;
12348: LD_VAR 0 1
12352: RET
// export function PrepareCargoBays ; begin
12353: LD_INT 0
12355: PPUSH
// uc_side = 3 ;
12356: LD_ADDR_OWVAR 20
12360: PUSH
12361: LD_INT 3
12363: ST_TO_ADDR
// uc_nation = 3 ;
12364: LD_ADDR_OWVAR 21
12368: PUSH
12369: LD_INT 3
12371: ST_TO_ADDR
// vc_engine = 1 ;
12372: LD_ADDR_OWVAR 39
12376: PUSH
12377: LD_INT 1
12379: ST_TO_ADDR
// vc_control = 1 ;
12380: LD_ADDR_OWVAR 38
12384: PUSH
12385: LD_INT 1
12387: ST_TO_ADDR
// vc_weapon = 51 ;
12388: LD_ADDR_OWVAR 40
12392: PUSH
12393: LD_INT 51
12395: ST_TO_ADDR
// vc_chassis = 22 ;
12396: LD_ADDR_OWVAR 37
12400: PUSH
12401: LD_INT 22
12403: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12404: LD_ADDR_EXP 15
12408: PUSH
12409: CALL_OW 45
12413: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12414: LD_ADDR_EXP 16
12418: PUSH
12419: CALL_OW 45
12423: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12424: LD_EXP 15
12428: PPUSH
12429: LD_INT 13
12431: PPUSH
12432: LD_INT 0
12434: PPUSH
12435: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12439: LD_EXP 16
12443: PPUSH
12444: LD_INT 13
12446: PPUSH
12447: LD_INT 0
12449: PPUSH
12450: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12454: LD_EXP 15
12458: PPUSH
12459: LD_INT 2
12461: PPUSH
12462: LD_INT 70
12464: PUSH
12465: LD_INT 50
12467: PUSH
12468: LD_INT 30
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: LIST
12475: PUSH
12476: LD_OWVAR 67
12480: ARRAY
12481: PPUSH
12482: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12486: LD_EXP 16
12490: PPUSH
12491: LD_INT 2
12493: PPUSH
12494: LD_INT 70
12496: PUSH
12497: LD_INT 50
12499: PUSH
12500: LD_INT 30
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: LIST
12507: PUSH
12508: LD_OWVAR 67
12512: ARRAY
12513: PPUSH
12514: CALL_OW 291
// hc_gallery =  ;
12518: LD_ADDR_OWVAR 33
12522: PUSH
12523: LD_STRING 
12525: ST_TO_ADDR
// hc_name =  ;
12526: LD_ADDR_OWVAR 26
12530: PUSH
12531: LD_STRING 
12533: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12534: LD_INT 1
12536: PPUSH
12537: LD_INT 3
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: LD_INT 2
12545: PPUSH
12546: CALL_OW 12
12550: PPUSH
12551: CALL_OW 380
// driver1 = CreateHuman ;
12555: LD_ADDR_EXP 17
12559: PUSH
12560: CALL_OW 44
12564: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12565: LD_EXP 17
12569: PPUSH
12570: LD_EXP 15
12574: PPUSH
12575: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12579: LD_ADDR_OWVAR 26
12583: PUSH
12584: LD_STRING Nikolai Andreyev
12586: ST_TO_ADDR
// driver2 = CreateHuman ;
12587: LD_ADDR_EXP 18
12591: PUSH
12592: CALL_OW 44
12596: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12597: LD_EXP 18
12601: PPUSH
12602: LD_EXP 16
12606: PPUSH
12607: CALL_OW 52
// end ;
12611: LD_VAR 0 1
12615: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12616: LD_INT 0
12618: PPUSH
12619: PPUSH
12620: PPUSH
12621: PPUSH
12622: PPUSH
12623: PPUSH
12624: PPUSH
// uc_side = 3 ;
12625: LD_ADDR_OWVAR 20
12629: PUSH
12630: LD_INT 3
12632: ST_TO_ADDR
// uc_nation = 3 ;
12633: LD_ADDR_OWVAR 21
12637: PUSH
12638: LD_INT 3
12640: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
12641: LD_ADDR_VAR 0 4
12645: PUSH
12646: DOUBLE
12647: LD_INT 1
12649: DEC
12650: ST_TO_ADDR
12651: LD_VAR 0 1
12655: PUSH
12656: LD_INT 1
12658: PPUSH
12659: LD_INT 3
12661: PPUSH
12662: CALL_OW 12
12666: PLUS
12667: PUSH
12668: FOR_TO
12669: IFFALSE 12846
// begin vc_engine = 1 ;
12671: LD_ADDR_OWVAR 39
12675: PUSH
12676: LD_INT 1
12678: ST_TO_ADDR
// vc_control = 1 ;
12679: LD_ADDR_OWVAR 38
12683: PUSH
12684: LD_INT 1
12686: ST_TO_ADDR
// vc_weapon = 42 ;
12687: LD_ADDR_OWVAR 40
12691: PUSH
12692: LD_INT 42
12694: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
12695: LD_ADDR_OWVAR 37
12699: PUSH
12700: LD_INT 21
12702: PUSH
12703: LD_INT 22
12705: PUSH
12706: LD_INT 22
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: LIST
12713: PUSH
12714: LD_OWVAR 67
12718: ARRAY
12719: ST_TO_ADDR
// veh = CreateVehicle ;
12720: LD_ADDR_VAR 0 5
12724: PUSH
12725: CALL_OW 45
12729: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12730: LD_VAR 0 5
12734: PPUSH
12735: LD_VAR 0 2
12739: PPUSH
12740: LD_INT 0
12742: PPUSH
12743: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
12747: LD_ADDR_EXP 26
12751: PUSH
12752: LD_EXP 26
12756: PUSH
12757: LD_VAR 0 5
12761: ADD
12762: ST_TO_ADDR
// hc_gallery =  ;
12763: LD_ADDR_OWVAR 33
12767: PUSH
12768: LD_STRING 
12770: ST_TO_ADDR
// hc_name =  ;
12771: LD_ADDR_OWVAR 26
12775: PUSH
12776: LD_STRING 
12778: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12779: LD_INT 0
12781: PPUSH
12782: LD_INT 3
12784: PPUSH
12785: LD_EXP 13
12789: PPUSH
12790: LD_EXP 14
12794: PPUSH
12795: CALL_OW 12
12799: PPUSH
12800: CALL_OW 380
// un = CreateHuman ;
12804: LD_ADDR_VAR 0 6
12808: PUSH
12809: CALL_OW 44
12813: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12814: LD_VAR 0 6
12818: PPUSH
12819: LD_VAR 0 5
12823: PPUSH
12824: CALL_OW 52
// attackGroup = attackGroup ^ un ;
12828: LD_ADDR_EXP 26
12832: PUSH
12833: LD_EXP 26
12837: PUSH
12838: LD_VAR 0 6
12842: ADD
12843: ST_TO_ADDR
// end ;
12844: GO 12668
12846: POP
12847: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12848: LD_INT 0
12850: PPUSH
12851: LD_INT 2
12853: PPUSH
12854: LD_EXP 13
12858: PPUSH
12859: LD_EXP 14
12863: PPUSH
12864: CALL_OW 12
12868: PPUSH
12869: CALL_OW 380
// un = CreateHuman ;
12873: LD_ADDR_VAR 0 6
12877: PUSH
12878: CALL_OW 44
12882: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
12883: LD_ADDR_VAR 0 4
12887: PUSH
12888: DOUBLE
12889: LD_INT 1
12891: DEC
12892: ST_TO_ADDR
12893: LD_VAR 0 1
12897: PUSH
12898: LD_INT 2
12900: PUSH
12901: LD_INT 2
12903: MUL
12904: PLUS
12905: PUSH
12906: FOR_TO
12907: IFFALSE 12995
// begin hc_gallery =  ;
12909: LD_ADDR_OWVAR 33
12913: PUSH
12914: LD_STRING 
12916: ST_TO_ADDR
// hc_name =  ;
12917: LD_ADDR_OWVAR 26
12921: PUSH
12922: LD_STRING 
12924: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12925: LD_INT 1
12927: PPUSH
12928: LD_INT 1
12930: PPUSH
12931: LD_EXP 13
12935: PPUSH
12936: LD_EXP 14
12940: PPUSH
12941: CALL_OW 12
12945: PPUSH
12946: CALL_OW 380
// un = CreateHuman ;
12950: LD_ADDR_VAR 0 6
12954: PUSH
12955: CALL_OW 44
12959: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
12960: LD_VAR 0 6
12964: PPUSH
12965: LD_VAR 0 2
12969: PPUSH
12970: LD_INT 0
12972: PPUSH
12973: CALL_OW 49
// attackGroup = attackGroup ^ un ;
12977: LD_ADDR_EXP 26
12981: PUSH
12982: LD_EXP 26
12986: PUSH
12987: LD_VAR 0 6
12991: ADD
12992: ST_TO_ADDR
// end ;
12993: GO 12906
12995: POP
12996: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
12997: LD_ADDR_VAR 0 7
13001: PUSH
13002: LD_INT 26
13004: PPUSH
13005: LD_INT 22
13007: PUSH
13008: LD_INT 3
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 21
13017: PUSH
13018: LD_INT 1
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 26
13027: PUSH
13028: LD_INT 1
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: LIST
13039: PPUSH
13040: CALL_OW 70
13044: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13045: LD_VAR 0 7
13049: PUSH
13050: LD_INT 1
13052: ARRAY
13053: PPUSH
13054: LD_STRING D9-Rus3-1
13056: PPUSH
13057: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13061: LD_VAR 0 7
13065: PUSH
13066: LD_INT 2
13068: ARRAY
13069: PPUSH
13070: LD_STRING D9-Russ-1
13072: PPUSH
13073: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13077: LD_INT 35
13079: PPUSH
13080: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13084: LD_ADDR_VAR 0 4
13088: PUSH
13089: LD_INT 26
13091: PPUSH
13092: LD_INT 22
13094: PUSH
13095: LD_INT 3
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: EMPTY
13103: LIST
13104: PPUSH
13105: CALL_OW 70
13109: PUSH
13110: FOR_IN
13111: IFFALSE 13283
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13113: LD_ADDR_VAR 0 8
13117: PUSH
13118: LD_INT 22
13120: PUSH
13121: LD_INT 1
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PPUSH
13128: CALL_OW 69
13132: PPUSH
13133: LD_VAR 0 4
13137: PPUSH
13138: CALL_OW 74
13142: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13143: LD_ADDR_VAR 0 9
13147: PUSH
13148: LD_INT 22
13150: PUSH
13151: LD_INT 1
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 2
13160: PUSH
13161: LD_INT 59
13163: PUSH
13164: EMPTY
13165: LIST
13166: PUSH
13167: LD_INT 21
13169: PUSH
13170: LD_INT 1
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: LD_INT 21
13179: PUSH
13180: LD_INT 2
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: EMPTY
13198: LIST
13199: PPUSH
13200: CALL_OW 69
13204: PPUSH
13205: LD_VAR 0 4
13209: PPUSH
13210: CALL_OW 74
13214: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13215: LD_VAR 0 4
13219: PPUSH
13220: LD_VAR 0 8
13224: PPUSH
13225: CALL_OW 296
13229: PUSH
13230: LD_INT 8
13232: PLUS
13233: PUSH
13234: LD_VAR 0 4
13238: PPUSH
13239: LD_VAR 0 9
13243: PPUSH
13244: CALL_OW 296
13248: LESS
13249: IFFALSE 13267
// begin ComAttackUnit ( i , target1 ) ;
13251: LD_VAR 0 4
13255: PPUSH
13256: LD_VAR 0 8
13260: PPUSH
13261: CALL_OW 115
// end else
13265: GO 13281
// begin ComAttackUnit ( i , target2 ) ;
13267: LD_VAR 0 4
13271: PPUSH
13272: LD_VAR 0 9
13276: PPUSH
13277: CALL_OW 115
// end ; end ;
13281: GO 13110
13283: POP
13284: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13285: LD_INT 26
13287: PPUSH
13288: LD_INT 22
13290: PUSH
13291: LD_INT 3
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: LD_INT 2
13300: PUSH
13301: LD_INT 21
13303: PUSH
13304: LD_INT 1
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PUSH
13311: LD_INT 21
13313: PUSH
13314: LD_INT 2
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PUSH
13321: LD_INT 59
13323: PUSH
13324: EMPTY
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PPUSH
13337: CALL_OW 70
13341: PUSH
13342: LD_INT 0
13344: EQUAL
13345: IFFALSE 13077
// end ; end_of_file
13347: LD_VAR 0 3
13351: RET
// every 0 0$1 do
13352: GO 13354
13354: DISABLE
// begin enable ;
13355: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13356: LD_INT 3
13358: PPUSH
13359: LD_INT 1
13361: PPUSH
13362: LD_INT 22
13364: PPUSH
13365: CALL 8644 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13369: LD_INT 3
13371: PPUSH
13372: LD_INT 20
13374: PPUSH
13375: LD_INT 22
13377: PPUSH
13378: LD_INT 23
13380: PPUSH
13381: CALL 8890 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13385: LD_INT 3
13387: PPUSH
13388: LD_INT 21
13390: PPUSH
13391: LD_INT 23
13393: PPUSH
13394: CALL 9167 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13398: LD_INT 22
13400: PPUSH
13401: LD_INT 1
13403: PPUSH
13404: LD_EXP 24
13408: PPUSH
13409: LD_INT 2
13411: PPUSH
13412: LD_INT 3
13414: PPUSH
13415: CALL 9639 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13419: LD_INT 23
13421: PPUSH
13422: LD_INT 1
13424: PPUSH
13425: LD_EXP 25
13429: PPUSH
13430: LD_INT 33
13432: PPUSH
13433: LD_INT 1
13435: PPUSH
13436: CALL 9639 0 5
// end ; end_of_file
13440: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13441: LD_VAR 0 1
13445: PPUSH
13446: CALL_OW 255
13450: PUSH
13451: LD_INT 1
13453: EQUAL
13454: PUSH
13455: LD_VAR 0 1
13459: PPUSH
13460: CALL_OW 247
13464: PUSH
13465: LD_INT 1
13467: EQUAL
13468: AND
13469: IFFALSE 13485
// deadsCounter = deadsCounter + 1 ;
13471: LD_ADDR_EXP 30
13475: PUSH
13476: LD_EXP 30
13480: PUSH
13481: LD_INT 1
13483: PLUS
13484: ST_TO_ADDR
// end ;
13485: PPOPN 1
13487: END
// on Command ( comandid ) do var i , j , tmp ;
13488: LD_INT 0
13490: PPUSH
13491: PPUSH
13492: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13493: LD_ADDR_VAR 0 2
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 1
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 21
13510: PUSH
13511: LD_INT 2
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PPUSH
13522: CALL_OW 69
13526: PUSH
13527: FOR_IN
13528: IFFALSE 13653
// begin if GetTaskList ( i ) > 0 then
13530: LD_VAR 0 2
13534: PPUSH
13535: CALL_OW 437
13539: PUSH
13540: LD_INT 0
13542: GREATER
13543: IFFALSE 13651
// begin for j = 1 to GetTaskList ( i ) do
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: DOUBLE
13551: LD_INT 1
13553: DEC
13554: ST_TO_ADDR
13555: LD_VAR 0 2
13559: PPUSH
13560: CALL_OW 437
13564: PUSH
13565: FOR_TO
13566: IFFALSE 13649
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13568: LD_ADDR_VAR 0 4
13572: PUSH
13573: LD_VAR 0 2
13577: PPUSH
13578: CALL_OW 437
13582: PUSH
13583: LD_VAR 0 3
13587: ARRAY
13588: PUSH
13589: LD_INT 4
13591: ARRAY
13592: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
13593: LD_VAR 0 4
13597: PPUSH
13598: CALL_OW 255
13602: PUSH
13603: LD_INT 3
13605: EQUAL
13606: PUSH
13607: LD_VAR 0 4
13611: PPUSH
13612: CALL_OW 247
13616: PUSH
13617: LD_INT 2
13619: EQUAL
13620: AND
13621: PUSH
13622: LD_VAR 0 4
13626: PPUSH
13627: CALL_OW 264
13631: PUSH
13632: LD_INT 51
13634: EQUAL
13635: AND
13636: IFFALSE 13647
// ComStop ( i ) ;
13638: LD_VAR 0 2
13642: PPUSH
13643: CALL_OW 141
// end ;
13647: GO 13565
13649: POP
13650: POP
// end ; end ;
13651: GO 13527
13653: POP
13654: POP
// end ; end_of_file
13655: PPOPN 4
13657: END
// every 0 0$1 trigger IsDead ( JMM ) do
13658: LD_EXP 1
13662: PPUSH
13663: CALL_OW 301
13667: IFFALSE 13679
13669: GO 13671
13671: DISABLE
// YouLost ( JMM ) ;
13672: LD_STRING JMM
13674: PPUSH
13675: CALL_OW 104
13679: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
13680: LD_INT 1
13682: PPUSH
13683: CALL_OW 301
13687: PUSH
13688: LD_INT 10
13690: PPUSH
13691: CALL_OW 301
13695: OR
13696: IFFALSE 13708
13698: GO 13700
13700: DISABLE
// YouLost ( DepotDestroyed ) ;
13701: LD_STRING DepotDestroyed
13703: PPUSH
13704: CALL_OW 104
13708: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
13709: LD_INT 22
13711: PUSH
13712: LD_INT 1
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: LD_INT 21
13721: PUSH
13722: LD_INT 1
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 25
13731: PUSH
13732: LD_INT 2
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: LIST
13743: PPUSH
13744: CALL_OW 69
13748: PUSH
13749: LD_INT 0
13751: EQUAL
13752: PUSH
13753: LD_INT 22
13755: PUSH
13756: LD_INT 4
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 21
13765: PUSH
13766: LD_INT 1
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 25
13775: PUSH
13776: LD_INT 2
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: PPUSH
13788: CALL_OW 69
13792: PUSH
13793: LD_INT 0
13795: EQUAL
13796: AND
13797: PUSH
13798: LD_INT 1
13800: PPUSH
13801: CALL_OW 255
13805: PUSH
13806: LD_INT 3
13808: EQUAL
13809: AND
13810: PUSH
13811: LD_INT 10
13813: PPUSH
13814: CALL_OW 255
13818: PUSH
13819: LD_INT 3
13821: EQUAL
13822: AND
13823: IFFALSE 13835
13825: GO 13827
13827: DISABLE
// YouLost ( Engineer ) ;
13828: LD_STRING Engineer
13830: PPUSH
13831: CALL_OW 104
13835: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
13836: LD_INT 1
13838: PPUSH
13839: CALL_OW 255
13843: PUSH
13844: LD_INT 3
13846: EQUAL
13847: PUSH
13848: LD_EXP 27
13852: PUSH
13853: LD_INT 1
13855: EQUAL
13856: AND
13857: IFFALSE 13869
13859: GO 13861
13861: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
13862: LD_STRING DepotCaptured
13864: PPUSH
13865: CALL_OW 104
13869: END
// export function PrepareTigers ; var i , un ; begin
13870: LD_INT 0
13872: PPUSH
13873: PPUSH
13874: PPUSH
// for i = 1 to Difficulty do
13875: LD_ADDR_VAR 0 2
13879: PUSH
13880: DOUBLE
13881: LD_INT 1
13883: DEC
13884: ST_TO_ADDR
13885: LD_OWVAR 67
13889: PUSH
13890: FOR_TO
13891: IFFALSE 14026
// begin hc_sex = sex_male ;
13893: LD_ADDR_OWVAR 27
13897: PUSH
13898: LD_INT 1
13900: ST_TO_ADDR
// uc_side = 0 ;
13901: LD_ADDR_OWVAR 20
13905: PUSH
13906: LD_INT 0
13908: ST_TO_ADDR
// uc_nation = nation_nature ;
13909: LD_ADDR_OWVAR 21
13913: PUSH
13914: LD_INT 0
13916: ST_TO_ADDR
// hc_class = class_tiger ;
13917: LD_ADDR_OWVAR 28
13921: PUSH
13922: LD_INT 14
13924: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
13925: LD_ADDR_OWVAR 31
13929: PUSH
13930: LD_EXP 14
13934: PUSH
13935: LD_INT 0
13937: PUSH
13938: LD_INT 0
13940: PUSH
13941: LD_INT 0
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
13950: LD_ADDR_OWVAR 35
13954: PUSH
13955: LD_INT 30
13957: PPUSH
13958: LD_INT 40
13960: PPUSH
13961: CALL_OW 12
13965: PUSH
13966: LD_INT 40
13968: PPUSH
13969: LD_INT 50
13971: PPUSH
13972: CALL_OW 12
13976: PUSH
13977: LD_INT 50
13979: PPUSH
13980: LD_INT 60
13982: PPUSH
13983: CALL_OW 12
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: LIST
13992: PUSH
13993: LD_OWVAR 67
13997: ARRAY
13998: ST_TO_ADDR
// un = CreateHuman ;
13999: LD_ADDR_VAR 0 3
14003: PUSH
14004: CALL_OW 44
14008: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14009: LD_VAR 0 3
14013: PPUSH
14014: LD_INT 27
14016: PPUSH
14017: LD_INT 0
14019: PPUSH
14020: CALL_OW 49
// end ;
14024: GO 13890
14026: POP
14027: POP
// end ; end_of_file
14028: LD_VAR 0 1
14032: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 do
14033: LD_INT 1
14035: PPUSH
14036: CALL_OW 255
14040: PUSH
14041: LD_INT 1
14043: EQUAL
14044: PUSH
14045: LD_INT 10
14047: PPUSH
14048: CALL_OW 255
14052: PUSH
14053: LD_INT 1
14055: EQUAL
14056: AND
14057: PUSH
14058: LD_EXP 20
14062: PUSH
14063: LD_INT 1
14065: EQUAL
14066: AND
14067: IFFALSE 14158
14069: GO 14071
14071: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14072: LD_INT 9450
14074: PUSH
14075: LD_INT 8400
14077: PUSH
14078: LD_INT 6300
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: LIST
14085: PUSH
14086: LD_OWVAR 67
14090: ARRAY
14091: PPUSH
14092: CALL_OW 67
// if cargoEscape = 1 then
14096: LD_EXP 20
14100: PUSH
14101: LD_INT 1
14103: EQUAL
14104: IFFALSE 14158
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14106: LD_EXP 9
14110: PPUSH
14111: LD_STRING D6-Pow-1
14113: PPUSH
14114: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14118: LD_EXP 1
14122: PPUSH
14123: LD_STRING D6-JMM-1
14125: PPUSH
14126: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14130: LD_EXP 9
14134: PPUSH
14135: LD_STRING D6-Pow-2
14137: PPUSH
14138: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14142: LD_EXP 1
14146: PPUSH
14147: LD_STRING D6-JMM-2
14149: PPUSH
14150: CALL_OW 88
// FinishMission ;
14154: CALL 14366 0 0
// end ; end ;
14158: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14159: LD_INT 1
14161: PPUSH
14162: CALL_OW 255
14166: PUSH
14167: LD_INT 1
14169: EQUAL
14170: PUSH
14171: LD_INT 10
14173: PPUSH
14174: CALL_OW 255
14178: PUSH
14179: LD_INT 1
14181: EQUAL
14182: AND
14183: PUSH
14184: LD_EXP 20
14188: PUSH
14189: LD_INT 1
14191: GREATER
14192: AND
14193: IFFALSE 14260
14195: GO 14197
14197: DISABLE
14198: LD_INT 0
14200: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14201: LD_INT 11550
14203: PUSH
14204: LD_INT 10500
14206: PUSH
14207: LD_INT 9450
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: LIST
14214: PUSH
14215: LD_OWVAR 67
14219: ARRAY
14220: PPUSH
14221: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14225: LD_INT 1
14227: PUSH
14228: LD_INT 2
14230: PUSH
14231: LD_INT 3
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: PUSH
14239: LD_OWVAR 67
14243: ARRAY
14244: PPUSH
14245: LD_INT 13
14247: PPUSH
14248: CALL 12616 0 2
// lastBattle = 1 ;
14252: LD_ADDR_EXP 27
14256: PUSH
14257: LD_INT 1
14259: ST_TO_ADDR
// end ;
14260: PPOPN 1
14262: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14263: LD_EXP 27
14267: PUSH
14268: LD_INT 1
14270: EQUAL
14271: PUSH
14272: LD_INT 26
14274: PPUSH
14275: LD_INT 22
14277: PUSH
14278: LD_INT 3
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 21
14287: PUSH
14288: LD_INT 1
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PPUSH
14299: CALL_OW 70
14303: PUSH
14304: LD_INT 0
14306: EQUAL
14307: AND
14308: IFFALSE 14365
14310: GO 14312
14312: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14313: LD_EXP 9
14317: PPUSH
14318: LD_STRING D6-Pow-1
14320: PPUSH
14321: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14325: LD_EXP 1
14329: PPUSH
14330: LD_STRING D6-JMM-1
14332: PPUSH
14333: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14337: LD_EXP 9
14341: PPUSH
14342: LD_STRING D6-Pow-2
14344: PPUSH
14345: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14349: LD_EXP 1
14353: PPUSH
14354: LD_STRING D6-JMM-2
14356: PPUSH
14357: CALL_OW 88
// FinishMission ;
14361: CALL 14366 0 0
// end ;
14365: END
// export function FinishMission ; var tmp ; begin
14366: LD_INT 0
14368: PPUSH
14369: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14370: LD_ADDR_VAR 0 2
14374: PUSH
14375: LD_INT 22
14377: PUSH
14378: LD_INT 1
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 21
14387: PUSH
14388: LD_INT 2
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 24
14397: PUSH
14398: LD_INT 251
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 69
14414: ST_TO_ADDR
// if tmp then
14415: LD_VAR 0 2
14419: IFFALSE 14433
// SaveVehicles ( tmp , 02_tanks_1 ) ;
14421: LD_VAR 0 2
14425: PPUSH
14426: LD_STRING 02_tanks_1
14428: PPUSH
14429: CALL 10308 0 2
// if mikhailStatus = 1 then
14433: LD_EXP 21
14437: PUSH
14438: LD_INT 1
14440: EQUAL
14441: IFFALSE 14455
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
14443: LD_EXP 21
14447: PPUSH
14448: LD_STRING 02_mikhailStatus_1
14450: PPUSH
14451: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
14455: LD_INT 1
14457: PPUSH
14458: CALL_OW 274
14462: PPUSH
14463: LD_INT 1
14465: PPUSH
14466: CALL_OW 275
14470: PPUSH
14471: LD_STRING 02_resources_4
14473: PPUSH
14474: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
14478: LD_INT 1
14480: PPUSH
14481: CALL_OW 274
14485: PPUSH
14486: LD_INT 1
14488: PPUSH
14489: CALL_OW 275
14493: PUSH
14494: LD_INT 200
14496: GREATEREQUAL
14497: IFFALSE 14511
// begin AddMedal ( Cans , 1 ) ;
14499: LD_STRING Cans
14501: PPUSH
14502: LD_INT 1
14504: PPUSH
14505: CALL_OW 101
// end else
14509: GO 14522
// begin AddMedal ( Cans , - 1 ) ;
14511: LD_STRING Cans
14513: PPUSH
14514: LD_INT 1
14516: NEG
14517: PPUSH
14518: CALL_OW 101
// end ; if deadsCounter < 2 then
14522: LD_EXP 30
14526: PUSH
14527: LD_INT 2
14529: LESS
14530: IFFALSE 14544
// begin AddMedal ( Deaths , 1 ) ;
14532: LD_STRING Deaths
14534: PPUSH
14535: LD_INT 1
14537: PPUSH
14538: CALL_OW 101
// end else
14542: GO 14555
// begin AddMedal ( Deaths , - 1 ) ;
14544: LD_STRING Deaths
14546: PPUSH
14547: LD_INT 1
14549: NEG
14550: PPUSH
14551: CALL_OW 101
// end ; if mikhailStatus = 0 then
14555: LD_EXP 21
14559: PUSH
14560: LD_INT 0
14562: EQUAL
14563: IFFALSE 14576
// AddMedal ( Prisoner , - 1 ) ;
14565: LD_STRING Prisoner
14567: PPUSH
14568: LD_INT 1
14570: NEG
14571: PPUSH
14572: CALL_OW 101
// if mikhailStatus = 1 then
14576: LD_EXP 21
14580: PUSH
14581: LD_INT 1
14583: EQUAL
14584: IFFALSE 14596
// AddMedal ( Prisoner , 1 ) ;
14586: LD_STRING Prisoner
14588: PPUSH
14589: LD_INT 1
14591: PPUSH
14592: CALL_OW 101
// if mikhailStatus = 2 then
14596: LD_EXP 21
14600: PUSH
14601: LD_INT 2
14603: EQUAL
14604: IFFALSE 14616
// AddMedal ( Prisoner , 2 ) ;
14606: LD_STRING Prisoner
14608: PPUSH
14609: LD_INT 2
14611: PPUSH
14612: CALL_OW 101
// if mikhailStatus = 3 then
14616: LD_EXP 21
14620: PUSH
14621: LD_INT 3
14623: EQUAL
14624: IFFALSE 14637
// AddMedal ( Prisoner , - 2 ) ;
14626: LD_STRING Prisoner
14628: PPUSH
14629: LD_INT 2
14631: NEG
14632: PPUSH
14633: CALL_OW 101
// GiveMedals ( MAIN ) ;
14637: LD_STRING MAIN
14639: PPUSH
14640: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
14644: LD_INT 22
14646: PUSH
14647: LD_INT 1
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 23
14656: PUSH
14657: LD_INT 1
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 21
14666: PUSH
14667: LD_INT 1
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: LIST
14678: PPUSH
14679: CALL_OW 69
14683: PPUSH
14684: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
14688: LD_EXP 1
14692: PPUSH
14693: LD_EXP 32
14697: PUSH
14698: LD_STRING JMM
14700: STR
14701: PPUSH
14702: CALL_OW 38
// if IsOK ( Bobby ) then
14706: LD_EXP 2
14710: PPUSH
14711: CALL_OW 302
14715: IFFALSE 14735
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
14717: LD_EXP 2
14721: PPUSH
14722: LD_EXP 32
14726: PUSH
14727: LD_STRING Bobby
14729: STR
14730: PPUSH
14731: CALL_OW 38
// if IsOK ( Cyrus ) then
14735: LD_EXP 3
14739: PPUSH
14740: CALL_OW 302
14744: IFFALSE 14764
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
14746: LD_EXP 3
14750: PPUSH
14751: LD_EXP 32
14755: PUSH
14756: LD_STRING Cyrus
14758: STR
14759: PPUSH
14760: CALL_OW 38
// if IsOK ( Lisa ) then
14764: LD_EXP 4
14768: PPUSH
14769: CALL_OW 302
14773: IFFALSE 14793
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
14775: LD_EXP 4
14779: PPUSH
14780: LD_EXP 32
14784: PUSH
14785: LD_STRING Lisa
14787: STR
14788: PPUSH
14789: CALL_OW 38
// if IsOK ( Khatam ) then
14793: LD_EXP 5
14797: PPUSH
14798: CALL_OW 302
14802: IFFALSE 14822
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
14804: LD_EXP 5
14808: PPUSH
14809: LD_EXP 32
14813: PUSH
14814: LD_STRING Khatam
14816: STR
14817: PPUSH
14818: CALL_OW 38
// if IsOK ( Brian ) then
14822: LD_EXP 6
14826: PPUSH
14827: CALL_OW 302
14831: IFFALSE 14851
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
14833: LD_EXP 6
14837: PPUSH
14838: LD_EXP 32
14842: PUSH
14843: LD_STRING Brian
14845: STR
14846: PPUSH
14847: CALL_OW 38
// if IsOk ( Jerry ) then
14851: LD_EXP 7
14855: PPUSH
14856: CALL_OW 302
14860: IFFALSE 14880
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
14862: LD_EXP 7
14866: PPUSH
14867: LD_EXP 32
14871: PUSH
14872: LD_STRING Jerry
14874: STR
14875: PPUSH
14876: CALL_OW 38
// if mikhailStatus = 1 then
14880: LD_EXP 21
14884: PUSH
14885: LD_INT 1
14887: EQUAL
14888: IFFALSE 14908
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
14890: LD_EXP 8
14894: PPUSH
14895: LD_EXP 32
14899: PUSH
14900: LD_STRING Mikhail
14902: STR
14903: PPUSH
14904: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
14908: LD_INT 50
14910: PUSH
14911: EMPTY
14912: LIST
14913: PUSH
14914: LD_INT 22
14916: PUSH
14917: LD_INT 1
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 21
14926: PUSH
14927: LD_INT 1
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: LIST
14938: PPUSH
14939: CALL_OW 69
14943: PUSH
14944: LD_EXP 1
14948: PUSH
14949: LD_EXP 2
14953: PUSH
14954: LD_EXP 3
14958: PUSH
14959: LD_EXP 4
14963: PUSH
14964: LD_EXP 5
14968: PUSH
14969: LD_EXP 6
14973: PUSH
14974: LD_EXP 7
14978: PUSH
14979: LD_EXP 8
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: DIFF
14994: PPUSH
14995: LD_STRING 02_other_survivors
14997: PPUSH
14998: CALL_OW 38
// YouWin ;
15002: CALL_OW 103
// end ;
15006: LD_VAR 0 1
15010: RET
