// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export deadsCounter ; starting begin RuSoldMinLevel = 0 ;
   0: LD_ADDR_EXP 13
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
   8: LD_ADDR_EXP 14
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// hpJMM = 0 ;
  16: LD_ADDR_EXP 10
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpBobby = 0 ;
  24: LD_ADDR_EXP 11
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpCyrus = 0 ;
  32: LD_ADDR_EXP 12
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// cargoEscape = 0 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// mikhailStatus = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailInBase = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailDepot = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// lastBattle = 0 ;
  72: LD_ADDR_EXP 26
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// deadsCounter = 0 ;
  80: LD_ADDR_EXP 27
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// southBaseDefenders = [ ] ;
  88: LD_ADDR_EXP 24
  92: PUSH
  93: EMPTY
  94: ST_TO_ADDR
// northBaseDefenders = [ ] ;
  95: LD_ADDR_EXP 23
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// attackGroup = [ ] ;
 102: LD_ADDR_EXP 25
 106: PUSH
 107: EMPTY
 108: ST_TO_ADDR
// RandomizeAll ;
 109: CALL_OW 11
// InGameOn ;
 113: CALL_OW 8
// Resetfog ;
 117: CALL_OW 335
// PrepareDifficulty ;
 121: CALL 7687 0 0
// PrepareRussianCommander ;
 125: CALL 8775 0 0
// PrepareSouthBase ;
 129: CALL 8901 0 0
// PrepareNorthBase ;
 133: CALL 9258 0 0
// PrepareOtherRussians ;
 137: CALL 9624 0 0
// PrepareHeroes ;
 141: CALL 8093 0 0
// PrepareLisSquad ;
 145: CALL 8300 0 0
// end ; end_of_file
 149: END
// every 1 do
 150: GO 152
 152: DISABLE
// begin CenterNowOnUnits ( JMM ) ;
 153: LD_EXP 1
 157: PPUSH
 158: CALL_OW 87
// if Cyrus and Bobby then
 162: LD_EXP 3
 166: PUSH
 167: LD_EXP 2
 171: AND
 172: IFFALSE 293
// begin Say ( Cyrus , D1a-Cyrus-1 ) ;
 174: LD_EXP 3
 178: PPUSH
 179: LD_STRING D1a-Cyrus-1
 181: PPUSH
 182: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 186: LD_EXP 1
 190: PPUSH
 191: LD_STRING D1a-JMM-1
 193: PPUSH
 194: CALL_OW 88
// Say ( Bobby , D1a-Bobby-2 ) ;
 198: LD_EXP 2
 202: PPUSH
 203: LD_STRING D1a-Bobby-2
 205: PPUSH
 206: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
 210: LD_EXP 1
 214: PPUSH
 215: LD_STRING D1a-JMM-2
 217: PPUSH
 218: CALL_OW 88
// ComStand ( Lisa ) ;
 222: LD_EXP 4
 226: PPUSH
 227: CALL_OW 165
// wait ( 0 0$1 ) ;
 231: LD_INT 35
 233: PPUSH
 234: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 238: LD_EXP 4
 242: PPUSH
 243: LD_EXP 1
 247: PPUSH
 248: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 252: LD_EXP 1
 256: PUSH
 257: LD_EXP 3
 261: PUSH
 262: LD_EXP 2
 266: PUSH
 267: EMPTY
 268: LIST
 269: LIST
 270: LIST
 271: PPUSH
 272: LD_EXP 4
 276: PPUSH
 277: CALL_OW 119
// Say ( Lisa , D1a-Lisa-2 ) ;
 281: LD_EXP 4
 285: PPUSH
 286: LD_STRING D1a-Lisa-2
 288: PPUSH
 289: CALL_OW 88
// end ; if Cyrus and not Bobby then
 293: LD_EXP 3
 297: PUSH
 298: LD_EXP 2
 302: NOT
 303: AND
 304: IFFALSE 412
// begin Say ( Cyrus , D1a-Cyrus-1 ) ;
 306: LD_EXP 3
 310: PPUSH
 311: LD_STRING D1a-Cyrus-1
 313: PPUSH
 314: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 318: LD_EXP 1
 322: PPUSH
 323: LD_STRING D1a-JMM-1
 325: PPUSH
 326: CALL_OW 88
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 330: LD_EXP 3
 334: PPUSH
 335: LD_STRING D1a-Cyrus-2
 337: PPUSH
 338: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_STRING D1a-JMM-2
 349: PPUSH
 350: CALL_OW 88
// ComStand ( Lisa ) ;
 354: LD_EXP 4
 358: PPUSH
 359: CALL_OW 165
// AddComTurnUnit ( Lisa , JMM ) ;
 363: LD_EXP 4
 367: PPUSH
 368: LD_EXP 1
 372: PPUSH
 373: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 377: LD_EXP 4
 381: PPUSH
 382: LD_STRING D1a-Lisa-2
 384: PPUSH
 385: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 389: LD_EXP 1
 393: PUSH
 394: LD_EXP 3
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PPUSH
 403: LD_EXP 4
 407: PPUSH
 408: CALL_OW 119
// end ; if not Cyrus and Bobby then
 412: LD_EXP 3
 416: NOT
 417: PUSH
 418: LD_EXP 2
 422: AND
 423: IFFALSE 531
// begin Say ( Bobby , D1a-Bobby-1 ) ;
 425: LD_EXP 2
 429: PPUSH
 430: LD_STRING D1a-Bobby-1
 432: PPUSH
 433: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 437: LD_EXP 1
 441: PPUSH
 442: LD_STRING D1a-JMM-1
 444: PPUSH
 445: CALL_OW 88
// Say ( Bobby , D1a-Bobby-2 ) ;
 449: LD_EXP 2
 453: PPUSH
 454: LD_STRING D1a-Bobby-2
 456: PPUSH
 457: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
 461: LD_EXP 1
 465: PPUSH
 466: LD_STRING D1a-JMM-2
 468: PPUSH
 469: CALL_OW 88
// ComStand ( Lisa ) ;
 473: LD_EXP 4
 477: PPUSH
 478: CALL_OW 165
// AddComTurnUnit ( Lisa , JMM ) ;
 482: LD_EXP 4
 486: PPUSH
 487: LD_EXP 1
 491: PPUSH
 492: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 496: LD_EXP 1
 500: PUSH
 501: LD_EXP 3
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: PPUSH
 510: LD_EXP 4
 514: PPUSH
 515: CALL_OW 119
// Say ( Lisa , D1a-Lisa-2 ) ;
 519: LD_EXP 4
 523: PPUSH
 524: LD_STRING D1a-Lisa-2
 526: PPUSH
 527: CALL_OW 88
// end ; if not Cyrus and not Bobby then
 531: LD_EXP 3
 535: NOT
 536: PUSH
 537: LD_EXP 2
 541: NOT
 542: AND
 543: IFFALSE 621
// begin Say ( JMM , D1b-JMM-1 ) ;
 545: LD_EXP 1
 549: PPUSH
 550: LD_STRING D1b-JMM-1
 552: PPUSH
 553: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING D1b-JMM-2
 564: PPUSH
 565: CALL_OW 88
// ComStand ( Lisa ) ;
 569: LD_EXP 4
 573: PPUSH
 574: CALL_OW 165
// AddComTurnUnit ( Lisa , JMM ) ;
 578: LD_EXP 4
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 179
// ComTurnUnit ( [ JMM ] , Lisa ) ;
 592: LD_EXP 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: PPUSH
 600: LD_EXP 4
 604: PPUSH
 605: CALL_OW 119
// Say ( Lisa , D1b-Lisa-1 ) ;
 609: LD_EXP 4
 613: PPUSH
 614: LD_STRING D1b-Lisa-1
 616: PPUSH
 617: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
 621: LD_EXP 1
 625: PPUSH
 626: LD_STRING D1-JMM-1
 628: PPUSH
 629: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
 633: LD_EXP 4
 637: PPUSH
 638: LD_STRING D1-Lisa-1
 640: PPUSH
 641: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
 645: LD_EXP 1
 649: PPUSH
 650: LD_STRING D1-JMM-2
 652: PPUSH
 653: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
 657: LD_EXP 9
 661: PPUSH
 662: LD_STRING D1-Pow-2
 664: PPUSH
 665: CALL_OW 94
// if Cyrus then
 669: LD_EXP 3
 673: IFFALSE 699
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
 675: LD_EXP 3
 679: PPUSH
 680: LD_STRING D1-Cyrus-2
 682: PPUSH
 683: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
 687: LD_EXP 1
 691: PPUSH
 692: LD_STRING D1-JMM-3
 694: PPUSH
 695: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
 699: LD_EXP 9
 703: PPUSH
 704: LD_STRING D1-Pow-3
 706: PPUSH
 707: CALL_OW 94
// SayRadio ( JMM , D1-JMM-4 ) ;
 711: LD_EXP 1
 715: PPUSH
 716: LD_STRING D1-JMM-4
 718: PPUSH
 719: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4 ) ;
 723: LD_EXP 9
 727: PPUSH
 728: LD_STRING D1-Pow-4
 730: PPUSH
 731: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
 735: LD_EXP 9
 739: PPUSH
 740: LD_STRING D1-Pow-4a
 742: PPUSH
 743: CALL_OW 94
// if Cyrus then
 747: LD_EXP 3
 751: IFFALSE 765
// Say ( Cyrus , D1-Cyrus-4 ) ;
 753: LD_EXP 3
 757: PPUSH
 758: LD_STRING D1-Cyrus-4
 760: PPUSH
 761: CALL_OW 88
// if Bobby then
 765: LD_EXP 2
 769: IFFALSE 807
// begin Say ( Bobby , D1-Bobby-4 ) ;
 771: LD_EXP 2
 775: PPUSH
 776: LD_STRING D1-Bobby-4
 778: PPUSH
 779: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
 783: LD_EXP 4
 787: PPUSH
 788: LD_STRING D1-Lisa-4
 790: PPUSH
 791: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
 795: LD_EXP 1
 799: PPUSH
 800: LD_STRING D1-JMM-5
 802: PPUSH
 803: CALL_OW 88
// end ; InGameOff ;
 807: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
 811: LD_INT 22
 813: PUSH
 814: LD_INT 4
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PPUSH
 821: CALL_OW 69
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
 833: LD_STRING M1
 835: PPUSH
 836: CALL_OW 337
// SaveForQuickRestart ;
 840: CALL_OW 22
// end ;
 844: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
 845: LD_INT 7
 847: PPUSH
 848: LD_INT 22
 850: PUSH
 851: LD_INT 1
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: PPUSH
 858: CALL_OW 70
 862: PUSH
 863: LD_INT 0
 865: GREATER
 866: IFFALSE 1236
 868: GO 870
 870: DISABLE
// begin InGameOn ;
 871: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
 875: LD_INT 22
 877: PUSH
 878: LD_INT 1
 880: PUSH
 881: EMPTY
 882: LIST
 883: LIST
 884: PUSH
 885: LD_INT 21
 887: PUSH
 888: LD_INT 1
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PPUSH
 899: CALL_OW 69
 903: PPUSH
 904: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
 908: LD_INT 24
 910: PPUSH
 911: LD_INT 32
 913: PPUSH
 914: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
 918: LD_EXP 5
 922: PPUSH
 923: LD_INT 4
 925: PPUSH
 926: LD_INT 1
 928: PPUSH
 929: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
 933: LD_EXP 5
 937: PPUSH
 938: LD_INT 4
 940: PPUSH
 941: CALL_OW 336
// wait ( 0 0$1 ) ;
 945: LD_INT 35
 947: PPUSH
 948: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
 952: LD_EXP 5
 956: PPUSH
 957: LD_INT 27
 959: PPUSH
 960: LD_INT 38
 962: PPUSH
 963: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
 967: LD_EXP 5
 971: PPUSH
 972: LD_EXP 1
 976: PPUSH
 977: CALL_OW 179
// wait ( 0 0$1 ) ;
 981: LD_INT 35
 983: PPUSH
 984: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
 988: LD_EXP 5
 992: PPUSH
 993: LD_STRING D2a-Khat-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D2a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1012: LD_EXP 5
1016: PPUSH
1017: LD_STRING D2a-Khat-2
1019: PPUSH
1020: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1024: LD_EXP 1
1028: PPUSH
1029: LD_STRING D2a-JMM-2
1031: PPUSH
1032: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1036: LD_EXP 5
1040: PPUSH
1041: LD_STRING D2a-Khat-3
1043: PPUSH
1044: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1048: LD_EXP 1
1052: PPUSH
1053: LD_STRING D2a-JMM-3
1055: PPUSH
1056: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1060: LD_EXP 5
1064: PPUSH
1065: LD_STRING D2a-Khat-4
1067: PPUSH
1068: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1072: LD_EXP 1
1076: PPUSH
1077: LD_STRING D2a-JMM-4
1079: PPUSH
1080: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1084: LD_EXP 5
1088: PPUSH
1089: LD_STRING D2a-Khat-5
1091: PPUSH
1092: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1096: LD_EXP 1
1100: PPUSH
1101: LD_STRING D2a-JMM-5
1103: PPUSH
1104: CALL_OW 88
// InGameOff ;
1108: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 0 then
1112: LD_INT 22
1114: PUSH
1115: LD_INT 1
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: PUSH
1122: LD_INT 21
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: PUSH
1132: LD_INT 3
1134: PUSH
1135: LD_INT 24
1137: PUSH
1138: LD_INT 1000
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: LIST
1153: PPUSH
1154: CALL_OW 69
1158: PUSH
1159: LD_INT 0
1161: GREATER
1162: IFFALSE 1236
// begin Say ( Khatam , D2a-Khat-6 ) ;
1164: LD_EXP 5
1168: PPUSH
1169: LD_STRING D2a-Khat-6
1171: PPUSH
1172: CALL_OW 88
// ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1176: LD_EXP 5
1180: PPUSH
1181: LD_INT 22
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_INT 21
1193: PUSH
1194: LD_INT 1
1196: PUSH
1197: EMPTY
1198: LIST
1199: LIST
1200: PUSH
1201: LD_INT 3
1203: PUSH
1204: LD_INT 24
1206: PUSH
1207: LD_INT 1000
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: PPUSH
1223: CALL_OW 69
1227: PUSH
1228: LD_INT 1
1230: ARRAY
1231: PPUSH
1232: CALL_OW 128
// end ; end ;
1236: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmpFemale , tmpMale ;
1237: LD_INT 15
1239: PPUSH
1240: LD_INT 22
1242: PUSH
1243: LD_INT 1
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PPUSH
1250: CALL_OW 70
1254: PUSH
1255: LD_INT 0
1257: GREATER
1258: IFFALSE 1909
1260: GO 1262
1262: DISABLE
1263: LD_INT 0
1265: PPUSH
1266: PPUSH
1267: PPUSH
1268: PPUSH
1269: PPUSH
// begin tmpFemale = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_sex , 2 ] ] ) ;
1270: LD_ADDR_VAR 0 4
1274: PUSH
1275: LD_INT 22
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 25
1287: PUSH
1288: LD_INT 2
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 26
1297: PUSH
1298: LD_INT 2
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: LIST
1309: PPUSH
1310: CALL_OW 69
1314: ST_TO_ADDR
// tmpMale = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) ;
1315: LD_ADDR_VAR 0 5
1319: PUSH
1320: LD_INT 22
1322: PUSH
1323: LD_INT 1
1325: PUSH
1326: EMPTY
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 25
1332: PUSH
1333: LD_INT 2
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PUSH
1340: LD_INT 26
1342: PUSH
1343: LD_INT 1
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: LIST
1354: PPUSH
1355: CALL_OW 69
1359: ST_TO_ADDR
// distanceTab = [ [ Bobby , GetDistUnitArea ( Bobby , DeadsSpawn ) ] , [ Cyrus , GetDistUnitArea ( Cyrus , DeadsSpawn ) ] , [ Lisa , GetDistUnitArea ( Lisa , DeadsSpawn ) ] , [ tmpMale [ 1 ] , GetDistUnits ( tmpMale [ 1 ] , DeadsSpawn ) ] , [ tmpFemale [ 1 ] , GetDistUnits ( tmpFemale [ 1 ] , DeadsSpawn ) ] ] ;
1360: LD_ADDR_VAR 0 2
1364: PUSH
1365: LD_EXP 2
1369: PUSH
1370: LD_EXP 2
1374: PPUSH
1375: LD_INT 16
1377: PPUSH
1378: CALL_OW 299
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: PUSH
1387: LD_EXP 3
1391: PUSH
1392: LD_EXP 3
1396: PPUSH
1397: LD_INT 16
1399: PPUSH
1400: CALL_OW 299
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: LD_EXP 4
1413: PUSH
1414: LD_EXP 4
1418: PPUSH
1419: LD_INT 16
1421: PPUSH
1422: CALL_OW 299
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: PUSH
1431: LD_VAR 0 5
1435: PUSH
1436: LD_INT 1
1438: ARRAY
1439: PUSH
1440: LD_VAR 0 5
1444: PUSH
1445: LD_INT 1
1447: ARRAY
1448: PPUSH
1449: LD_INT 16
1451: PPUSH
1452: CALL_OW 296
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: LD_VAR 0 4
1465: PUSH
1466: LD_INT 1
1468: ARRAY
1469: PUSH
1470: LD_VAR 0 4
1474: PUSH
1475: LD_INT 1
1477: ARRAY
1478: PPUSH
1479: LD_INT 16
1481: PPUSH
1482: CALL_OW 296
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: ST_TO_ADDR
// PrepareDeadSoldiers ;
1498: CALL 8548 0 0
// InGameOn ;
1502: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
1506: LD_INT 23
1508: PPUSH
1509: LD_INT 12
1511: PPUSH
1512: CALL_OW 84
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] ] ) , 23 , 12 ) ;
1516: LD_INT 22
1518: PUSH
1519: LD_INT 1
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PUSH
1526: EMPTY
1527: LIST
1528: PPUSH
1529: CALL_OW 69
1533: PPUSH
1534: LD_INT 23
1536: PPUSH
1537: LD_INT 12
1539: PPUSH
1540: CALL_OW 111
// min = distanceTab [ 1 ] [ 2 ] ;
1544: LD_ADDR_VAR 0 3
1548: PUSH
1549: LD_VAR 0 2
1553: PUSH
1554: LD_INT 1
1556: ARRAY
1557: PUSH
1558: LD_INT 2
1560: ARRAY
1561: ST_TO_ADDR
// for i = 1 to distanceTab do
1562: LD_ADDR_VAR 0 1
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_VAR 0 2
1576: PUSH
1577: FOR_TO
1578: IFFALSE 1624
// if distanceTab [ i ] [ 2 ] < min then
1580: LD_VAR 0 2
1584: PUSH
1585: LD_VAR 0 1
1589: ARRAY
1590: PUSH
1591: LD_INT 2
1593: ARRAY
1594: PUSH
1595: LD_VAR 0 3
1599: LESS
1600: IFFALSE 1622
// min = distanceTab [ i ] [ 2 ] ;
1602: LD_ADDR_VAR 0 3
1606: PUSH
1607: LD_VAR 0 2
1611: PUSH
1612: LD_VAR 0 1
1616: ARRAY
1617: PUSH
1618: LD_INT 2
1620: ARRAY
1621: ST_TO_ADDR
1622: GO 1577
1624: POP
1625: POP
// for i = 1 to distanceTab do
1626: LD_ADDR_VAR 0 1
1630: PUSH
1631: DOUBLE
1632: LD_INT 1
1634: DEC
1635: ST_TO_ADDR
1636: LD_VAR 0 2
1640: PUSH
1641: FOR_TO
1642: IFFALSE 1856
// begin if distanceTab [ i ] [ 2 ] = min then
1644: LD_VAR 0 2
1648: PUSH
1649: LD_VAR 0 1
1653: ARRAY
1654: PUSH
1655: LD_INT 2
1657: ARRAY
1658: PUSH
1659: LD_VAR 0 3
1663: EQUAL
1664: IFFALSE 1854
// begin if distanceTab [ i ] [ 1 ] = Bobby then
1666: LD_VAR 0 2
1670: PUSH
1671: LD_VAR 0 1
1675: ARRAY
1676: PUSH
1677: LD_INT 1
1679: ARRAY
1680: PUSH
1681: LD_EXP 2
1685: EQUAL
1686: IFFALSE 1700
// Say ( Bobby , DCorpses-Bobby-1 ) ;
1688: LD_EXP 2
1692: PPUSH
1693: LD_STRING DCorpses-Bobby-1
1695: PPUSH
1696: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
1700: LD_VAR 0 2
1704: PUSH
1705: LD_VAR 0 1
1709: ARRAY
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PUSH
1715: LD_EXP 3
1719: EQUAL
1720: IFFALSE 1734
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
1722: LD_EXP 3
1726: PPUSH
1727: LD_STRING DCorpses-Cyrus-1
1729: PPUSH
1730: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
1734: LD_VAR 0 2
1738: PUSH
1739: LD_VAR 0 1
1743: ARRAY
1744: PUSH
1745: LD_INT 1
1747: ARRAY
1748: PUSH
1749: LD_EXP 4
1753: EQUAL
1754: IFFALSE 1768
// Say ( Lisa , DCorpses-Lisa-1 ) ;
1756: LD_EXP 4
1760: PPUSH
1761: LD_STRING DCorpses-Lisa-1
1763: PPUSH
1764: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmpMale [ 1 ] then
1768: LD_VAR 0 2
1772: PUSH
1773: LD_VAR 0 1
1777: ARRAY
1778: PUSH
1779: LD_INT 1
1781: ARRAY
1782: PUSH
1783: LD_VAR 0 5
1787: PUSH
1788: LD_INT 1
1790: ARRAY
1791: EQUAL
1792: IFFALSE 1810
// Say ( tmpMale [ 1 ] , DCorpses-Sol1-1 ) ;
1794: LD_VAR 0 5
1798: PUSH
1799: LD_INT 1
1801: ARRAY
1802: PPUSH
1803: LD_STRING DCorpses-Sol1-1
1805: PPUSH
1806: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmpFemale [ 1 ] then
1810: LD_VAR 0 2
1814: PUSH
1815: LD_VAR 0 1
1819: ARRAY
1820: PUSH
1821: LD_INT 1
1823: ARRAY
1824: PUSH
1825: LD_VAR 0 4
1829: PUSH
1830: LD_INT 1
1832: ARRAY
1833: EQUAL
1834: IFFALSE 1852
// Say ( tmpFemale [ 1 ] , DCorpses-FSol1-1 ) ;
1836: LD_VAR 0 4
1840: PUSH
1841: LD_INT 1
1843: ARRAY
1844: PPUSH
1845: LD_STRING DCorpses-FSol1-1
1847: PPUSH
1848: CALL_OW 88
// break ;
1852: GO 1856
// end ; end ;
1854: GO 1641
1856: POP
1857: POP
// Say ( JMM , DCorpses-JMM-1 ) ;
1858: LD_EXP 1
1862: PPUSH
1863: LD_STRING DCorpses-JMM-1
1865: PPUSH
1866: CALL_OW 88
// if IsOK ( Khatam ) then
1870: LD_EXP 5
1874: PPUSH
1875: CALL_OW 302
1879: IFFALSE 1893
// Say ( Khatam , DCorpses-Khat-1 ) ;
1881: LD_EXP 5
1885: PPUSH
1886: LD_STRING DCorpses-Khat-1
1888: PPUSH
1889: CALL_OW 88
// InGameOff ;
1893: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
1897: LD_EXP 1
1901: PPUSH
1902: LD_STRING DCorpses-JMM-2
1904: PPUSH
1905: CALL_OW 88
// end ;
1909: PPOPN 5
1911: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 do var i ;
1912: LD_INT 8
1914: PPUSH
1915: LD_INT 22
1917: PUSH
1918: LD_INT 1
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PPUSH
1925: CALL_OW 70
1929: PUSH
1930: LD_INT 0
1932: GREATER
1933: IFFALSE 2188
1935: GO 1937
1937: DISABLE
1938: LD_INT 0
1940: PPUSH
// begin InGameOn ;
1941: CALL_OW 8
// ComTurnXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 72 , 77 ) ;
1945: LD_INT 22
1947: PUSH
1948: LD_INT 1
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 21
1957: PUSH
1958: LD_INT 1
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PPUSH
1969: CALL_OW 69
1973: PPUSH
1974: LD_INT 72
1976: PPUSH
1977: LD_INT 77
1979: PPUSH
1980: CALL_OW 118
// CenterOnXY ( 72 , 77 ) ;
1984: LD_INT 72
1986: PPUSH
1987: LD_INT 77
1989: PPUSH
1990: CALL_OW 84
// PrepareOtherAmericans ;
1994: CALL 8408 0 0
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
1998: LD_INT 3
2000: PPUSH
2001: LD_INT 4
2003: PPUSH
2004: LD_INT 2
2006: PPUSH
2007: LD_INT 1
2009: PPUSH
2010: CALL_OW 80
// SetAttitude ( 4 , 3 , att_enemy , true ) ;
2014: LD_INT 4
2016: PPUSH
2017: LD_INT 3
2019: PPUSH
2020: LD_INT 2
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: CALL_OW 80
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
2030: LD_ADDR_VAR 0 1
2034: PUSH
2035: LD_INT 9
2037: PPUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PPUSH
2048: CALL_OW 70
2052: PUSH
2053: FOR_IN
2054: IFFALSE 2067
// ComFree ( i ) ;
2056: LD_VAR 0 1
2060: PPUSH
2061: CALL_OW 139
2065: GO 2053
2067: POP
2068: POP
// wait ( 0 0$1 ) ;
2069: LD_INT 35
2071: PPUSH
2072: CALL_OW 67
// InGameOff ;
2076: CALL_OW 9
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) ) ] , DF-Sol1-1 ) ;
2080: LD_INT 22
2082: PUSH
2083: LD_INT 1
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PUSH
2090: LD_INT 21
2092: PUSH
2093: LD_INT 1
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 26
2102: PUSH
2103: LD_INT 1
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: PPUSH
2115: CALL_OW 69
2119: PUSH
2120: LD_INT 2
2122: PPUSH
2123: LD_INT 22
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: LD_INT 21
2135: PUSH
2136: LD_INT 1
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PUSH
2143: LD_INT 26
2145: PUSH
2146: LD_INT 1
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: PPUSH
2158: CALL_OW 69
2162: PPUSH
2163: CALL_OW 12
2167: ARRAY
2168: PPUSH
2169: LD_STRING DF-Sol1-1
2171: PPUSH
2172: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
2176: LD_EXP 1
2180: PPUSH
2181: LD_STRING DF-JMM-1
2183: PPUSH
2184: CALL_OW 88
// end ;
2188: PPOPN 1
2190: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and ( IsOK ( Brian ) or IsOK ( Jerry ) ) do
2191: LD_INT 19
2193: PPUSH
2194: LD_INT 22
2196: PUSH
2197: LD_INT 3
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PPUSH
2204: CALL_OW 70
2208: PUSH
2209: LD_INT 0
2211: EQUAL
2212: PUSH
2213: LD_EXP 6
2217: PPUSH
2218: CALL_OW 302
2222: PUSH
2223: LD_EXP 7
2227: PPUSH
2228: CALL_OW 302
2232: OR
2233: AND
2234: IFFALSE 2412
2236: GO 2238
2238: DISABLE
// begin if not IsDead ( Brian ) then
2239: LD_EXP 6
2243: PPUSH
2244: CALL_OW 301
2248: NOT
2249: IFFALSE 2263
// SetSide ( Brian , 1 ) ;
2251: LD_EXP 6
2255: PPUSH
2256: LD_INT 1
2258: PPUSH
2259: CALL_OW 235
// if not IsDead ( Jerry ) then
2263: LD_EXP 7
2267: PPUSH
2268: CALL_OW 301
2272: NOT
2273: IFFALSE 2287
// SetSide ( Jerry , 1 ) ;
2275: LD_EXP 7
2279: PPUSH
2280: LD_INT 1
2282: PPUSH
2283: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
2287: LD_INT 22
2289: PUSH
2290: LD_INT 1
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 25
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: PPUSH
2311: CALL_OW 69
2315: PUSH
2316: LD_INT 0
2318: GREATER
2319: IFFALSE 2335
// begin Say ( JMM , DFa-JMM-1 ) ;
2321: LD_EXP 1
2325: PPUSH
2326: LD_STRING DFa-JMM-1
2328: PPUSH
2329: CALL_OW 88
// end else
2333: GO 2347
// begin Say ( JMM , DFa-JMM-1a ) ;
2335: LD_EXP 1
2339: PPUSH
2340: LD_STRING DFa-JMM-1a
2342: PPUSH
2343: CALL_OW 88
// end ; if GetLives ( Brian ) >= 500 then
2347: LD_EXP 6
2351: PPUSH
2352: CALL_OW 256
2356: PUSH
2357: LD_INT 500
2359: GREATEREQUAL
2360: IFFALSE 2412
// begin Say ( Brian , DFb-Sol1-1 ) ;
2362: LD_EXP 6
2366: PPUSH
2367: LD_STRING DFb-Sol1-1
2369: PPUSH
2370: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
2374: LD_EXP 6
2378: PPUSH
2379: LD_INT 78
2381: PPUSH
2382: LD_INT 74
2384: PPUSH
2385: CALL_OW 111
// if IsDead ( Jerry ) then
2389: LD_EXP 7
2393: PPUSH
2394: CALL_OW 301
2398: IFFALSE 2412
// Say ( Brian , DFb-Sol1-1a ) end ;
2400: LD_EXP 6
2404: PPUSH
2405: LD_STRING DFb-Sol1-1a
2407: PPUSH
2408: CALL_OW 88
// end ;
2412: END
// every 0 0$1 do var i ;
2413: GO 2415
2415: DISABLE
2416: LD_INT 0
2418: PPUSH
// begin enable ;
2419: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
2420: LD_ADDR_VAR 0 1
2424: PUSH
2425: LD_INT 22
2427: PUSH
2428: LD_INT 3
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: PUSH
2435: LD_INT 21
2437: PUSH
2438: LD_INT 3
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: PUSH
2445: LD_INT 30
2447: PUSH
2448: LD_INT 31
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: LIST
2459: PPUSH
2460: CALL_OW 69
2464: PUSH
2465: FOR_IN
2466: IFFALSE 2497
// begin if See ( 1 , i ) then
2468: LD_INT 1
2470: PPUSH
2471: LD_VAR 0 1
2475: PPUSH
2476: CALL_OW 292
2480: IFFALSE 2495
// begin disable ;
2482: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
2483: LD_EXP 1
2487: PPUSH
2488: LD_STRING DX1-JMM-1
2490: PPUSH
2491: CALL_OW 88
// end ; end ;
2495: GO 2465
2497: POP
2498: POP
// end ;
2499: PPOPN 1
2501: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
2502: LD_INT 1
2504: PPUSH
2505: LD_INT 11
2507: PPUSH
2508: CALL_OW 294
2512: IFFALSE 2815
2514: GO 2516
2516: DISABLE
2517: LD_INT 0
2519: PPUSH
2520: PPUSH
// begin DialogueOn ;
2521: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
2525: LD_INT 11
2527: PPUSH
2528: LD_INT 22
2530: PUSH
2531: LD_INT 3
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: PUSH
2538: LD_INT 21
2540: PUSH
2541: LD_INT 1
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PPUSH
2552: CALL_OW 70
2556: PUSH
2557: LD_INT 1
2559: ARRAY
2560: PPUSH
2561: LD_STRING DX3-Rus1-1
2563: PPUSH
2564: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
2568: LD_EXP 1
2572: PPUSH
2573: LD_STRING DX3-JMM-1
2575: PPUSH
2576: CALL_OW 88
// DialogueOff ;
2580: CALL_OW 7
// wait ( [ 0 0$3 , 0 0$2 , 0 0$1 ] [ Difficulty ] ) ;
2584: LD_INT 105
2586: PUSH
2587: LD_INT 70
2589: PUSH
2590: LD_INT 35
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: LIST
2597: PUSH
2598: LD_OWVAR 67
2602: ARRAY
2603: PPUSH
2604: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2608: LD_INT 35
2610: PPUSH
2611: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
2615: LD_ADDR_VAR 0 1
2619: PUSH
2620: LD_INT 22
2622: PUSH
2623: LD_INT 3
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PUSH
2630: LD_INT 21
2632: PUSH
2633: LD_INT 2
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: PUSH
2640: LD_INT 58
2642: PUSH
2643: EMPTY
2644: LIST
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 69
2655: PUSH
2656: FOR_IN
2657: IFFALSE 2727
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
2659: LD_ADDR_VAR 0 2
2663: PUSH
2664: LD_INT 22
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PUSH
2674: LD_INT 21
2676: PUSH
2677: LD_INT 1
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PUSH
2684: LD_INT 25
2686: PUSH
2687: LD_INT 3
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: LIST
2698: PPUSH
2699: CALL_OW 69
2703: PUSH
2704: FOR_IN
2705: IFFALSE 2723
// begin ComEnterUnit ( j , i ) ;
2707: LD_VAR 0 2
2711: PPUSH
2712: LD_VAR 0 1
2716: PPUSH
2717: CALL_OW 120
// end ;
2721: GO 2704
2723: POP
2724: POP
// end ;
2725: GO 2656
2727: POP
2728: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
2729: LD_INT 22
2731: PUSH
2732: LD_INT 3
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: PUSH
2739: LD_INT 21
2741: PUSH
2742: LD_INT 2
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: LD_INT 58
2751: PUSH
2752: EMPTY
2753: LIST
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: LIST
2759: PPUSH
2760: CALL_OW 69
2764: PUSH
2765: LD_INT 0
2767: EQUAL
2768: PUSH
2769: LD_INT 22
2771: PUSH
2772: LD_INT 3
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: PUSH
2779: LD_INT 21
2781: PUSH
2782: LD_INT 1
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PUSH
2789: LD_INT 25
2791: PUSH
2792: LD_INT 3
2794: PUSH
2795: EMPTY
2796: LIST
2797: LIST
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: LIST
2803: PPUSH
2804: CALL_OW 69
2808: PUSH
2809: LD_INT 0
2811: EQUAL
2812: OR
2813: IFFALSE 2608
// end ;
2815: PPOPN 2
2817: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 255
2825: PUSH
2826: LD_INT 1
2828: EQUAL
2829: PUSH
2830: LD_INT 10
2832: PPUSH
2833: CALL_OW 255
2837: PUSH
2838: LD_INT 1
2840: EQUAL
2841: OR
2842: IFFALSE 2902
2844: GO 2846
2846: DISABLE
// begin DialogueOn ;
2847: CALL_OW 6
// SayRadio ( JMM , D3-JMM-1 ) ;
2851: LD_EXP 1
2855: PPUSH
2856: LD_STRING D3-JMM-1
2858: PPUSH
2859: CALL_OW 94
// SayRadio ( Powell , D3-Pow-1 ) ;
2863: LD_EXP 9
2867: PPUSH
2868: LD_STRING D3-Pow-1
2870: PPUSH
2871: CALL_OW 94
// if IsOK ( Cyrus ) then
2875: LD_EXP 3
2879: PPUSH
2880: CALL_OW 302
2884: IFFALSE 2898
// Say ( Cyrus , D3-Cyrus-1 ) ;
2886: LD_EXP 3
2890: PPUSH
2891: LD_STRING D3-Cyrus-1
2893: PPUSH
2894: CALL_OW 88
// DialogueOff ;
2898: CALL_OW 7
// end ;
2902: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do
2903: LD_INT 1
2905: PPUSH
2906: CALL_OW 255
2910: PUSH
2911: LD_INT 1
2913: EQUAL
2914: PUSH
2915: LD_INT 10
2917: PPUSH
2918: CALL_OW 255
2922: PUSH
2923: LD_INT 1
2925: EQUAL
2926: AND
2927: IFFALSE 4518
2929: GO 2931
2931: DISABLE
// begin DialogueOn ;
2932: CALL_OW 6
// SayRadio ( JMM , D3a-JMM-1 ) ;
2936: LD_EXP 1
2940: PPUSH
2941: LD_STRING D3a-JMM-1
2943: PPUSH
2944: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-1 ) ;
2948: LD_EXP 9
2952: PPUSH
2953: LD_STRING D3a-Pow-1
2955: PPUSH
2956: CALL_OW 94
// SayRadio ( JMM , D3a-JMM-2 ) ;
2960: LD_EXP 1
2964: PPUSH
2965: LD_STRING D3a-JMM-2
2967: PPUSH
2968: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
2972: LD_EXP 9
2976: PPUSH
2977: LD_STRING D3a-Pow-2
2979: PPUSH
2980: CALL_OW 94
// SayRadio ( JMM , D3a-JMM-3 ) ;
2984: LD_EXP 1
2988: PPUSH
2989: LD_STRING D3a-JMM-3
2991: PPUSH
2992: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
2996: LD_EXP 9
3000: PPUSH
3001: LD_STRING D3a-Pow-3
3003: PPUSH
3004: CALL_OW 94
// SayRadio ( JMM , D3a-JMM-4 ) ;
3008: LD_EXP 1
3012: PPUSH
3013: LD_STRING D3a-JMM-4
3015: PPUSH
3016: CALL_OW 94
// DialogueOff ;
3020: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3024: LD_STRING M2
3026: PPUSH
3027: CALL_OW 337
// SayRadio ( JMM , D3b-JMM-1 ) ;
3031: LD_EXP 1
3035: PPUSH
3036: LD_STRING D3b-JMM-1
3038: PPUSH
3039: CALL_OW 94
// wait ( 0 0$5 ) ;
3043: LD_INT 175
3045: PPUSH
3046: CALL_OW 67
// InGameOn ;
3050: CALL_OW 8
// PrepareRussianHeroes ;
3054: CALL 8668 0 0
// CenterNowOnUnits ( Mikhail ) ;
3058: LD_EXP 8
3062: PPUSH
3063: CALL_OW 87
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , Mikhail ) ;
3067: LD_INT 22
3069: PUSH
3070: LD_INT 1
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PUSH
3077: LD_INT 21
3079: PUSH
3080: LD_INT 1
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PPUSH
3091: CALL_OW 69
3095: PPUSH
3096: LD_EXP 8
3100: PPUSH
3101: CALL_OW 119
// ComTurnUnit ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) ) ;
3105: LD_EXP 8
3109: PPUSH
3110: LD_INT 22
3112: PUSH
3113: LD_INT 1
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 25
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: CALL_OW 69
3142: PPUSH
3143: CALL_OW 119
// Say ( Mikhail , D4-Mikh-1 ) ;
3147: LD_EXP 8
3151: PPUSH
3152: LD_STRING D4-Mikh-1
3154: PPUSH
3155: CALL_OW 88
// if GetSex ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) ) = 1 then
3159: LD_INT 22
3161: PUSH
3162: LD_INT 1
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PUSH
3169: LD_INT 25
3171: PUSH
3172: LD_INT 2
3174: PUSH
3175: EMPTY
3176: LIST
3177: LIST
3178: PUSH
3179: EMPTY
3180: LIST
3181: LIST
3182: PUSH
3183: LD_INT 1
3185: ARRAY
3186: PPUSH
3187: CALL_OW 69
3191: PPUSH
3192: CALL_OW 258
3196: PUSH
3197: LD_INT 1
3199: EQUAL
3200: IFFALSE 3242
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) , D4-Sol1-1 ) ;
3202: LD_INT 22
3204: PUSH
3205: LD_INT 1
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: LD_INT 25
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: LD_INT 1
3228: ARRAY
3229: PPUSH
3230: CALL_OW 69
3234: PPUSH
3235: LD_STRING D4-Sol1-1
3237: PPUSH
3238: CALL_OW 88
// if GetSex ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) ) = 2 then
3242: LD_INT 22
3244: PUSH
3245: LD_INT 1
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: PUSH
3252: LD_INT 25
3254: PUSH
3255: LD_INT 2
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: PUSH
3266: LD_INT 1
3268: ARRAY
3269: PPUSH
3270: CALL_OW 69
3274: PPUSH
3275: CALL_OW 258
3279: PUSH
3280: LD_INT 2
3282: EQUAL
3283: IFFALSE 3325
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) , D4-FSol1-1 ) ;
3285: LD_INT 22
3287: PUSH
3288: LD_INT 1
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PUSH
3295: LD_INT 25
3297: PUSH
3298: LD_INT 2
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: LD_INT 1
3311: ARRAY
3312: PPUSH
3313: CALL_OW 69
3317: PPUSH
3318: LD_STRING D4-FSol1-1
3320: PPUSH
3321: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
3325: LD_EXP 8
3329: PPUSH
3330: LD_STRING D4-Mikh-2
3332: PPUSH
3333: CALL_OW 88
// if GetSex ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) ) = 1 then
3337: LD_INT 22
3339: PUSH
3340: LD_INT 1
3342: PUSH
3343: EMPTY
3344: LIST
3345: LIST
3346: PUSH
3347: LD_INT 25
3349: PUSH
3350: LD_INT 2
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 1
3363: ARRAY
3364: PPUSH
3365: CALL_OW 69
3369: PPUSH
3370: CALL_OW 258
3374: PUSH
3375: LD_INT 1
3377: EQUAL
3378: IFFALSE 3420
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) , D4-Sol1-2 ) ;
3380: LD_INT 22
3382: PUSH
3383: LD_INT 1
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 25
3392: PUSH
3393: LD_INT 2
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_INT 1
3406: ARRAY
3407: PPUSH
3408: CALL_OW 69
3412: PPUSH
3413: LD_STRING D4-Sol1-2
3415: PPUSH
3416: CALL_OW 88
// if GetSex ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) ) = 2 then
3420: LD_INT 22
3422: PUSH
3423: LD_INT 1
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PUSH
3430: LD_INT 25
3432: PUSH
3433: LD_INT 2
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: PUSH
3444: LD_INT 1
3446: ARRAY
3447: PPUSH
3448: CALL_OW 69
3452: PPUSH
3453: CALL_OW 258
3457: PUSH
3458: LD_INT 2
3460: EQUAL
3461: IFFALSE 3503
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) , D4-FSol1-2 ) ;
3463: LD_INT 22
3465: PUSH
3466: LD_INT 1
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 25
3475: PUSH
3476: LD_INT 2
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PUSH
3487: LD_INT 1
3489: ARRAY
3490: PPUSH
3491: CALL_OW 69
3495: PPUSH
3496: LD_STRING D4-FSol1-2
3498: PPUSH
3499: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
3503: LD_EXP 8
3507: PPUSH
3508: LD_STRING D4-Mikh-3
3510: PPUSH
3511: CALL_OW 88
// if GetSex ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) ) = 1 then
3515: LD_INT 22
3517: PUSH
3518: LD_INT 1
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PUSH
3525: LD_INT 25
3527: PUSH
3528: LD_INT 2
3530: PUSH
3531: EMPTY
3532: LIST
3533: LIST
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: PUSH
3539: LD_INT 1
3541: ARRAY
3542: PPUSH
3543: CALL_OW 69
3547: PPUSH
3548: CALL_OW 258
3552: PUSH
3553: LD_INT 1
3555: EQUAL
3556: IFFALSE 3598
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) , D4-Sol1-3 ) ;
3558: LD_INT 22
3560: PUSH
3561: LD_INT 1
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: PUSH
3568: LD_INT 25
3570: PUSH
3571: LD_INT 2
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 1
3584: ARRAY
3585: PPUSH
3586: CALL_OW 69
3590: PPUSH
3591: LD_STRING D4-Sol1-3
3593: PPUSH
3594: CALL_OW 88
// if GetSex ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) ) = 2 then
3598: LD_INT 22
3600: PUSH
3601: LD_INT 1
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: LD_INT 25
3610: PUSH
3611: LD_INT 2
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 1
3624: ARRAY
3625: PPUSH
3626: CALL_OW 69
3630: PPUSH
3631: CALL_OW 258
3635: PUSH
3636: LD_INT 2
3638: EQUAL
3639: IFFALSE 3681
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) , D4-FSol1-3 ) ;
3641: LD_INT 22
3643: PUSH
3644: LD_INT 1
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 25
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: PUSH
3665: LD_INT 1
3667: ARRAY
3668: PPUSH
3669: CALL_OW 69
3673: PPUSH
3674: LD_STRING D4-FSol1-3
3676: PPUSH
3677: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
3681: LD_EXP 8
3685: PPUSH
3686: LD_STRING D4-Mikh-4
3688: PPUSH
3689: CALL_OW 88
// case query ( Qs1 ) of 1 :
3693: LD_STRING Qs1
3695: PPUSH
3696: CALL_OW 97
3700: PUSH
3701: LD_INT 1
3703: DOUBLE
3704: EQUAL
3705: IFTRUE 3709
3707: GO 3744
3709: POP
// begin InGameOff ;
3710: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
3714: LD_INT 1
3716: PPUSH
3717: LD_INT 6
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
3730: LD_EXP 8
3734: PPUSH
3735: LD_INT 17
3737: PPUSH
3738: CALL_OW 113
// end ; 2 :
3742: GO 4518
3744: LD_INT 2
3746: DOUBLE
3747: EQUAL
3748: IFTRUE 3752
3750: GO 4483
3752: POP
// begin repeat wait ( 0 0$1 ) ;
3753: LD_INT 35
3755: PPUSH
3756: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) ) ;
3760: LD_INT 22
3762: PUSH
3763: LD_INT 1
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PUSH
3770: LD_INT 25
3772: PUSH
3773: LD_INT 2
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 1
3786: ARRAY
3787: PPUSH
3788: CALL_OW 69
3792: PPUSH
3793: CALL_OW 87
// ComMoveUnit ( Mikhail , JMM ) ;
3797: LD_EXP 8
3801: PPUSH
3802: LD_EXP 1
3806: PPUSH
3807: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
3811: LD_EXP 1
3815: PPUSH
3816: LD_EXP 8
3820: PPUSH
3821: CALL_OW 296
3825: PUSH
3826: LD_INT 5
3828: LESS
3829: IFFALSE 3753
// ComTurnUnit ( Mikhail , JMM ) ;
3831: LD_EXP 8
3835: PPUSH
3836: LD_EXP 1
3840: PPUSH
3841: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
3845: LD_EXP 1
3849: PPUSH
3850: LD_STRING D4b-JMM-1
3852: PPUSH
3853: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
3857: LD_EXP 8
3861: PPUSH
3862: LD_STRING D4b-Mikh-1
3864: PPUSH
3865: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
3869: LD_EXP 1
3873: PPUSH
3874: LD_STRING D4b-JMM-2
3876: PPUSH
3877: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
3881: LD_EXP 8
3885: PPUSH
3886: LD_STRING D4b-Mikh-2
3888: PPUSH
3889: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
3893: LD_EXP 1
3897: PPUSH
3898: LD_STRING D4b-JMM-3
3900: PPUSH
3901: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
3905: LD_EXP 8
3909: PPUSH
3910: LD_STRING D4b-Mikh-3
3912: PPUSH
3913: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
3917: LD_EXP 1
3921: PPUSH
3922: LD_STRING D4b-JMM-4
3924: PPUSH
3925: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
3929: LD_EXP 8
3933: PPUSH
3934: LD_STRING D4b-Mikh-4
3936: PPUSH
3937: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
3941: LD_EXP 1
3945: PPUSH
3946: LD_STRING D4b-JMM-5
3948: PPUSH
3949: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
3953: LD_EXP 8
3957: PPUSH
3958: LD_STRING D4b-Mikh-5
3960: PPUSH
3961: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
3965: LD_EXP 1
3969: PPUSH
3970: LD_STRING D4b-JMM-6
3972: PPUSH
3973: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
3977: LD_EXP 8
3981: PPUSH
3982: LD_STRING D4b-Mikh-6
3984: PPUSH
3985: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
3989: LD_EXP 1
3993: PPUSH
3994: LD_STRING D4b-JMM-7
3996: PPUSH
3997: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
4001: LD_EXP 8
4005: PPUSH
4006: LD_STRING D4b-Mikh-7
4008: PPUSH
4009: CALL_OW 88
// if GetSex ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) ) = 1 then
4013: LD_INT 22
4015: PUSH
4016: LD_INT 1
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: LD_INT 25
4025: PUSH
4026: LD_INT 2
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: CALL_OW 69
4045: PPUSH
4046: CALL_OW 258
4050: PUSH
4051: LD_INT 1
4053: EQUAL
4054: IFFALSE 4096
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) , D4b-Sol1-7 ) ;
4056: LD_INT 22
4058: PUSH
4059: LD_INT 1
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: PUSH
4066: LD_INT 25
4068: PUSH
4069: LD_INT 2
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: PUSH
4080: LD_INT 1
4082: ARRAY
4083: PPUSH
4084: CALL_OW 69
4088: PPUSH
4089: LD_STRING D4b-Sol1-7
4091: PPUSH
4092: CALL_OW 88
// if GetSex ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) ) = 2 then
4096: LD_INT 22
4098: PUSH
4099: LD_INT 1
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 25
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PUSH
4120: LD_INT 1
4122: ARRAY
4123: PPUSH
4124: CALL_OW 69
4128: PPUSH
4129: CALL_OW 258
4133: PUSH
4134: LD_INT 2
4136: EQUAL
4137: IFFALSE 4179
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) , D4b-FSol1-7 ) ;
4139: LD_INT 22
4141: PUSH
4142: LD_INT 1
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: PUSH
4149: LD_INT 25
4151: PUSH
4152: LD_INT 2
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 1
4165: ARRAY
4166: PPUSH
4167: CALL_OW 69
4171: PPUSH
4172: LD_STRING D4b-FSol1-7
4174: PPUSH
4175: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
4179: LD_EXP 1
4183: PPUSH
4184: LD_STRING D4b-JMM-7
4186: PPUSH
4187: CALL_OW 88
// if GetSex ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) ) = 1 then
4191: LD_INT 22
4193: PUSH
4194: LD_INT 1
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PUSH
4201: LD_INT 25
4203: PUSH
4204: LD_INT 2
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: LD_INT 1
4217: ARRAY
4218: PPUSH
4219: CALL_OW 69
4223: PPUSH
4224: CALL_OW 258
4228: PUSH
4229: LD_INT 1
4231: EQUAL
4232: IFFALSE 4274
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) , D4b-Sol1-8 ) ;
4234: LD_INT 22
4236: PUSH
4237: LD_INT 1
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: LD_INT 25
4246: PUSH
4247: LD_INT 2
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: PUSH
4258: LD_INT 1
4260: ARRAY
4261: PPUSH
4262: CALL_OW 69
4266: PPUSH
4267: LD_STRING D4b-Sol1-8
4269: PPUSH
4270: CALL_OW 88
// if GetSex ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) ) = 2 then
4274: LD_INT 22
4276: PUSH
4277: LD_INT 1
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 25
4286: PUSH
4287: LD_INT 2
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 1
4300: ARRAY
4301: PPUSH
4302: CALL_OW 69
4306: PPUSH
4307: CALL_OW 258
4311: PUSH
4312: LD_INT 2
4314: EQUAL
4315: IFFALSE 4357
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] [ 1 ] ) , D4b-FSol1-8 ) ;
4317: LD_INT 22
4319: PUSH
4320: LD_INT 1
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: LD_INT 25
4329: PUSH
4330: LD_INT 2
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: LD_INT 1
4343: ARRAY
4344: PPUSH
4345: CALL_OW 69
4349: PPUSH
4350: LD_STRING D4b-FSol1-8
4352: PPUSH
4353: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
4357: LD_EXP 1
4361: PPUSH
4362: LD_STRING D4b-JMM-9
4364: PPUSH
4365: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
4369: LD_EXP 8
4373: PPUSH
4374: LD_INT 1
4376: PPUSH
4377: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
4381: LD_INT 35
4383: PPUSH
4384: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
4388: LD_EXP 8
4392: PPUSH
4393: CALL_OW 87
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
4397: LD_EXP 8
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 296
4409: PUSH
4410: LD_EXP 8
4414: PPUSH
4415: LD_INT 10
4417: PPUSH
4418: CALL_OW 296
4422: LESS
4423: IFFALSE 4439
// begin ComEnterUnit ( Mikhail , dep1 ) ;
4425: LD_EXP 8
4429: PPUSH
4430: LD_INT 1
4432: PPUSH
4433: CALL_OW 120
// end else
4437: GO 4451
// begin ComEnterUnit ( Mikhail , dep2 ) ;
4439: LD_EXP 8
4443: PPUSH
4444: LD_INT 10
4446: PPUSH
4447: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
4451: LD_EXP 8
4455: PPUSH
4456: CALL_OW 310
4460: IFFALSE 4381
// mikhailDepot = IsInUnit ( Mikhail ) ;
4462: LD_ADDR_EXP 22
4466: PUSH
4467: LD_EXP 8
4471: PPUSH
4472: CALL_OW 310
4476: ST_TO_ADDR
// InGameOff ;
4477: CALL_OW 9
// end ; 3 :
4481: GO 4518
4483: LD_INT 3
4485: DOUBLE
4486: EQUAL
4487: IFTRUE 4491
4489: GO 4517
4491: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
4492: LD_EXP 8
4496: PPUSH
4497: LD_INT 17
4499: PPUSH
4500: CALL_OW 113
// wait ( 0 0$3 ) ;
4504: LD_INT 105
4506: PPUSH
4507: CALL_OW 67
// InGameOff ;
4511: CALL_OW 9
// end ; end ;
4515: GO 4518
4517: POP
// end ;
4518: END
// every 5 5$0 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do
4519: LD_INT 1
4521: PPUSH
4522: CALL_OW 255
4526: PUSH
4527: LD_INT 1
4529: EQUAL
4530: PUSH
4531: LD_INT 10
4533: PPUSH
4534: CALL_OW 255
4538: PUSH
4539: LD_INT 1
4541: EQUAL
4542: AND
4543: IFFALSE 4658
4545: GO 4547
4547: DISABLE
// begin PrepareCargoBays ;
4548: CALL 9816 0 0
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
4552: LD_EXP 15
4556: PUSH
4557: LD_EXP 16
4561: PUSH
4562: LD_EXP 17
4566: PUSH
4567: LD_EXP 18
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: PPUSH
4578: LD_INT 53
4580: PPUSH
4581: LD_INT 16
4583: PPUSH
4584: CALL_OW 111
// wait ( 0 0$5 ) ;
4588: LD_INT 175
4590: PPUSH
4591: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
4595: LD_EXP 17
4599: PPUSH
4600: LD_STRING D5-Rus2-1
4602: PPUSH
4603: CALL_OW 88
// wait ( 0 0$7 ) ;
4607: LD_INT 245
4609: PPUSH
4610: CALL_OW 67
// Say ( driver1 , D5-Rus2-1a ) ;
4614: LD_EXP 17
4618: PPUSH
4619: LD_STRING D5-Rus2-1a
4621: PPUSH
4622: CALL_OW 88
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
4626: LD_EXP 15
4630: PUSH
4631: LD_EXP 16
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PPUSH
4640: LD_INT 7
4642: PPUSH
4643: LD_INT 9
4645: PPUSH
4646: CALL_OW 111
// cargoEscape = 1 ;
4650: LD_ADDR_EXP 19
4654: PUSH
4655: LD_INT 1
4657: ST_TO_ADDR
// end ;
4658: END
// every 0 0$1 trigger cargoEscape > 0 do
4659: LD_EXP 19
4663: PUSH
4664: LD_INT 0
4666: GREATER
4667: IFFALSE 4793
4669: GO 4671
4671: DISABLE
// begin enable ;
4672: ENABLE
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
4673: LD_EXP 15
4677: PPUSH
4678: LD_INT 13
4680: PPUSH
4681: CALL_OW 308
4685: PUSH
4686: LD_EXP 17
4690: PPUSH
4691: LD_INT 13
4693: PPUSH
4694: CALL_OW 308
4698: OR
4699: IFFALSE 4733
// begin RemoveUnit ( cargo1 ) ;
4701: LD_EXP 15
4705: PPUSH
4706: CALL_OW 64
// RemoveUnit ( driver1 ) ;
4710: LD_EXP 17
4714: PPUSH
4715: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
4719: LD_ADDR_EXP 19
4723: PUSH
4724: LD_EXP 19
4728: PUSH
4729: LD_INT 1
4731: PLUS
4732: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
4733: LD_EXP 16
4737: PPUSH
4738: LD_INT 13
4740: PPUSH
4741: CALL_OW 308
4745: PUSH
4746: LD_EXP 18
4750: PPUSH
4751: LD_INT 13
4753: PPUSH
4754: CALL_OW 308
4758: OR
4759: IFFALSE 4793
// begin RemoveUnit ( cargo2 ) ;
4761: LD_EXP 16
4765: PPUSH
4766: CALL_OW 64
// RemoveUnit ( driver2 ) ;
4770: LD_EXP 18
4774: PPUSH
4775: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
4779: LD_ADDR_EXP 19
4783: PUSH
4784: LD_EXP 19
4788: PUSH
4789: LD_INT 1
4791: PLUS
4792: ST_TO_ADDR
// end ; end ;
4793: END
// every 0 0$1 trigger cargoEscape > 1 do
4794: LD_EXP 19
4798: PUSH
4799: LD_INT 1
4801: GREATER
4802: IFFALSE 4893
4804: GO 4806
4806: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
4807: LD_INT 22
4809: PUSH
4810: LD_INT 1
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PUSH
4817: LD_INT 26
4819: PUSH
4820: LD_INT 1
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PPUSH
4831: CALL_OW 69
4835: PUSH
4836: LD_INT 2
4838: PPUSH
4839: LD_INT 22
4841: PUSH
4842: LD_INT 1
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 26
4851: PUSH
4852: LD_INT 1
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PPUSH
4863: CALL_OW 69
4867: PPUSH
4868: CALL_OW 12
4872: ARRAY
4873: PPUSH
4874: LD_STRING D5a-Sol1-1
4876: PPUSH
4877: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
4881: LD_EXP 1
4885: PPUSH
4886: LD_STRING D5a-JMM-1
4888: PPUSH
4889: CALL_OW 88
// end ;
4893: END
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 do
4894: LD_INT 1
4896: PPUSH
4897: CALL_OW 255
4901: PUSH
4902: LD_INT 1
4904: EQUAL
4905: PUSH
4906: LD_INT 10
4908: PPUSH
4909: CALL_OW 255
4913: PUSH
4914: LD_INT 1
4916: EQUAL
4917: AND
4918: PUSH
4919: LD_EXP 19
4923: PUSH
4924: LD_INT 1
4926: EQUAL
4927: AND
4928: IFFALSE 5009
4930: GO 4932
4932: DISABLE
// begin wait ( [ 30 30$0 , 25 25$0 , 20 20$0 ] [ Difficulty ] ) ;
4933: LD_INT 63000
4935: PUSH
4936: LD_INT 52500
4938: PUSH
4939: LD_INT 42000
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: LIST
4946: PUSH
4947: LD_OWVAR 67
4951: ARRAY
4952: PPUSH
4953: CALL_OW 67
// SayRadio ( Powell , D6-Pow-1 ) ;
4957: LD_EXP 9
4961: PPUSH
4962: LD_STRING D6-Pow-1
4964: PPUSH
4965: CALL_OW 94
// SayRadio ( JMM , D6-JMM-1 ) ;
4969: LD_EXP 1
4973: PPUSH
4974: LD_STRING D6-JMM-1
4976: PPUSH
4977: CALL_OW 94
// SayRadio ( Powell , D6-Pow-2 ) ;
4981: LD_EXP 9
4985: PPUSH
4986: LD_STRING D6-Pow-2
4988: PPUSH
4989: CALL_OW 94
// SayRadio ( JMM , D6-JMM-2 ) ;
4993: LD_EXP 1
4997: PPUSH
4998: LD_STRING D6-JMM-2
5000: PPUSH
5001: CALL_OW 94
// FinishMission ;
5005: CALL 7860 0 0
// end ;
5009: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
5010: LD_INT 1
5012: PPUSH
5013: CALL_OW 255
5017: PUSH
5018: LD_INT 1
5020: EQUAL
5021: PUSH
5022: LD_INT 10
5024: PPUSH
5025: CALL_OW 255
5029: PUSH
5030: LD_INT 1
5032: EQUAL
5033: AND
5034: PUSH
5035: LD_EXP 19
5039: PUSH
5040: LD_INT 1
5042: GREATER
5043: AND
5044: IFFALSE 5191
5046: GO 5048
5048: DISABLE
5049: LD_INT 0
5051: PPUSH
// begin wait ( [ 30 30$0 , 25 25$0 , 20 20$0 ] [ Difficulty ] ) ;
5052: LD_INT 63000
5054: PUSH
5055: LD_INT 52500
5057: PUSH
5058: LD_INT 42000
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: LIST
5065: PUSH
5066: LD_OWVAR 67
5070: ARRAY
5071: PPUSH
5072: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
5076: LD_INT 1
5078: PUSH
5079: LD_INT 2
5081: PUSH
5082: LD_INT 3
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: LIST
5089: PUSH
5090: LD_OWVAR 67
5094: ARRAY
5095: PPUSH
5096: LD_INT 13
5098: PPUSH
5099: CALL 10015 0 2
// lastBattle = 1 ;
5103: LD_ADDR_EXP 26
5107: PUSH
5108: LD_INT 1
5110: ST_TO_ADDR
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
5111: LD_ADDR_VAR 0 1
5115: PUSH
5116: LD_INT 26
5118: PPUSH
5119: LD_INT 22
5121: PUSH
5122: LD_INT 3
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: LD_INT 21
5131: PUSH
5132: LD_INT 1
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PUSH
5139: LD_INT 26
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: LIST
5153: PPUSH
5154: CALL_OW 70
5158: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
5159: LD_VAR 0 1
5163: PUSH
5164: LD_INT 1
5166: ARRAY
5167: PPUSH
5168: LD_STRING D9-Rus3-1
5170: PPUSH
5171: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
5175: LD_VAR 0 1
5179: PUSH
5180: LD_INT 2
5182: ARRAY
5183: PPUSH
5184: LD_STRING D9-Russ-1
5186: PPUSH
5187: CALL_OW 88
// end ;
5191: PPOPN 1
5193: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
5194: LD_EXP 26
5198: PUSH
5199: LD_INT 1
5201: EQUAL
5202: PUSH
5203: LD_INT 26
5205: PPUSH
5206: LD_INT 22
5208: PUSH
5209: LD_INT 3
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: LD_INT 21
5218: PUSH
5219: LD_INT 1
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: PPUSH
5230: CALL_OW 70
5234: PUSH
5235: LD_INT 0
5237: EQUAL
5238: AND
5239: IFFALSE 5296
5241: GO 5243
5243: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
5244: LD_EXP 9
5248: PPUSH
5249: LD_STRING D6-Pow-1
5251: PPUSH
5252: CALL_OW 94
// SayRadio ( JMM , D6-JMM-1 ) ;
5256: LD_EXP 1
5260: PPUSH
5261: LD_STRING D6-JMM-1
5263: PPUSH
5264: CALL_OW 94
// SayRadio ( Powell , D6-Pow-2 ) ;
5268: LD_EXP 9
5272: PPUSH
5273: LD_STRING D6-Pow-2
5275: PPUSH
5276: CALL_OW 94
// SayRadio ( JMM , D6-JMM-2 ) ;
5280: LD_EXP 1
5284: PPUSH
5285: LD_STRING D6-JMM-2
5287: PPUSH
5288: CALL_OW 94
// FinishMission ;
5292: CALL 7860 0 0
// end ;
5296: END
// every 0 0$1 trigger GetLives ( dep1 ) < 1000 or GetLives ( dep2 ) < 1000 do
5297: LD_INT 1
5299: PPUSH
5300: CALL_OW 256
5304: PUSH
5305: LD_INT 1000
5307: LESS
5308: PUSH
5309: LD_INT 10
5311: PPUSH
5312: CALL_OW 256
5316: PUSH
5317: LD_INT 1000
5319: LESS
5320: OR
5321: IFFALSE 5338
5323: GO 5325
5325: DISABLE
// Say ( JMM ,  D8-JMM-1 ) ;
5326: LD_EXP 1
5330: PPUSH
5331: LD_STRING  D8-JMM-1
5333: PPUSH
5334: CALL_OW 88
5338: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) do
5339: LD_EXP 8
5343: PPUSH
5344: CALL_OW 310
5348: IFFALSE 5362
5350: GO 5352
5352: DISABLE
// begin mikhailInBase = 1 ;
5353: LD_ADDR_EXP 21
5357: PUSH
5358: LD_INT 1
5360: ST_TO_ADDR
// enable ;
5361: ENABLE
// end ;
5362: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
5363: LD_EXP 8
5367: PPUSH
5368: LD_INT 25
5370: PPUSH
5371: CALL_OW 308
5375: PUSH
5376: LD_EXP 21
5380: PUSH
5381: LD_INT 1
5383: EQUAL
5384: AND
5385: PUSH
5386: LD_EXP 8
5390: PPUSH
5391: CALL_OW 255
5395: PUSH
5396: LD_INT 1
5398: EQUAL
5399: AND
5400: IFFALSE 5730
5402: GO 5404
5404: DISABLE
// begin mikhailInBase = 4 ;
5405: LD_ADDR_EXP 21
5409: PUSH
5410: LD_INT 4
5412: ST_TO_ADDR
// enable ;
5413: ENABLE
// case query ( QMikh2 ) of 1 :
5414: LD_STRING QMikh2
5416: PPUSH
5417: CALL_OW 97
5421: PUSH
5422: LD_INT 1
5424: DOUBLE
5425: EQUAL
5426: IFTRUE 5430
5428: GO 5497
5430: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
5431: LD_INT 1
5433: PPUSH
5434: LD_INT 6
5436: PPUSH
5437: LD_INT 2
5439: PPUSH
5440: LD_INT 1
5442: PPUSH
5443: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
5447: LD_EXP 8
5451: PPUSH
5452: LD_INT 6
5454: PPUSH
5455: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
5459: LD_EXP 8
5463: PPUSH
5464: CALL_OW 122
// wait ( 0 0$1 ) ;
5468: LD_INT 35
5470: PPUSH
5471: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5475: LD_EXP 8
5479: PPUSH
5480: LD_INT 17
5482: PPUSH
5483: CALL_OW 113
// mikhailInbase = 3 ;
5487: LD_ADDR_EXP 21
5491: PUSH
5492: LD_INT 3
5494: ST_TO_ADDR
// end ; 2 :
5495: GO 5730
5497: LD_INT 2
5499: DOUBLE
5500: EQUAL
5501: IFTRUE 5505
5503: GO 5670
5505: POP
// begin mikhailInBase = 2 ;
5506: LD_ADDR_EXP 21
5510: PUSH
5511: LD_INT 2
5513: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
5514: LD_EXP 8
5518: PPUSH
5519: LD_INT 6
5521: PPUSH
5522: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
5526: LD_EXP 8
5530: PPUSH
5531: CALL_OW 122
// wait ( 0 0$1 ) ;
5535: LD_INT 35
5537: PPUSH
5538: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
5542: LD_EXP 8
5546: PPUSH
5547: LD_EXP 8
5551: PPUSH
5552: CALL_OW 250
5556: PUSH
5557: LD_INT 2
5559: PLUS
5560: PPUSH
5561: LD_EXP 8
5565: PPUSH
5566: CALL_OW 251
5570: PUSH
5571: LD_INT 2
5573: PLUS
5574: PPUSH
5575: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
5579: LD_EXP 8
5583: PPUSH
5584: LD_EXP 8
5588: PPUSH
5589: CALL_OW 250
5593: PUSH
5594: LD_INT 1
5596: PLUS
5597: PPUSH
5598: LD_EXP 8
5602: PPUSH
5603: CALL_OW 251
5607: PUSH
5608: LD_INT 2
5610: PLUS
5611: PPUSH
5612: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
5616: LD_EXP 8
5620: PPUSH
5621: LD_EXP 8
5625: PPUSH
5626: CALL_OW 250
5630: PUSH
5631: LD_INT 2
5633: PLUS
5634: PPUSH
5635: LD_EXP 8
5639: PPUSH
5640: CALL_OW 251
5644: PPUSH
5645: CALL_OW 171
// wait ( 0 0$5 ) ;
5649: LD_INT 175
5651: PPUSH
5652: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
5656: LD_EXP 8
5660: PPUSH
5661: LD_INT 25
5663: PPUSH
5664: CALL_OW 113
// end ; 3 :
5668: GO 5730
5670: LD_INT 3
5672: DOUBLE
5673: EQUAL
5674: IFTRUE 5678
5676: GO 5729
5678: POP
// begin SetSide ( Mikhail , 6 ) ;
5679: LD_EXP 8
5683: PPUSH
5684: LD_INT 6
5686: PPUSH
5687: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
5691: LD_EXP 8
5695: PPUSH
5696: CALL_OW 122
// wait ( 0 0$1 ) ;
5700: LD_INT 35
5702: PPUSH
5703: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5707: LD_EXP 8
5711: PPUSH
5712: LD_INT 17
5714: PPUSH
5715: CALL_OW 113
// mikhailInbase = 3 ;
5719: LD_ADDR_EXP 21
5723: PUSH
5724: LD_INT 3
5726: ST_TO_ADDR
// end ; end ;
5727: GO 5730
5729: POP
// end ;
5730: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 2 do
5731: LD_EXP 8
5735: PPUSH
5736: LD_INT 25
5738: PPUSH
5739: CALL_OW 308
5743: PUSH
5744: LD_EXP 21
5748: PUSH
5749: LD_INT 2
5751: EQUAL
5752: AND
5753: IFFALSE 5833
5755: GO 5757
5757: DISABLE
// begin enable ;
5758: ENABLE
// mikhailInBase = 1 ;
5759: LD_ADDR_EXP 21
5763: PUSH
5764: LD_INT 1
5766: ST_TO_ADDR
// SetSide ( Mikhail , 1 ) ;
5767: LD_EXP 8
5771: PPUSH
5772: LD_INT 1
5774: PPUSH
5775: CALL_OW 235
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
5779: LD_EXP 8
5783: PPUSH
5784: LD_INT 1
5786: PPUSH
5787: CALL_OW 296
5791: PUSH
5792: LD_EXP 8
5796: PPUSH
5797: LD_INT 10
5799: PPUSH
5800: CALL_OW 296
5804: LESS
5805: IFFALSE 5821
// begin ComEnterUnit ( Mikhail , dep1 ) ;
5807: LD_EXP 8
5811: PPUSH
5812: LD_INT 1
5814: PPUSH
5815: CALL_OW 120
// end else
5819: GO 5833
// begin ComEnterUnit ( Mikhail , dep2 ) ;
5821: LD_EXP 8
5825: PPUSH
5826: LD_INT 10
5828: PPUSH
5829: CALL_OW 120
// end ; end ;
5833: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and GetDistUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) , IsInUnit ( Mikhail ) ) < 5 do
5834: LD_EXP 8
5838: PPUSH
5839: CALL_OW 310
5843: PUSH
5844: LD_INT 22
5846: PUSH
5847: LD_INT 1
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PUSH
5854: LD_INT 21
5856: PUSH
5857: LD_INT 1
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 23
5866: PUSH
5867: LD_INT 1
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: LIST
5878: PPUSH
5879: CALL_OW 69
5883: PPUSH
5884: LD_EXP 8
5888: PPUSH
5889: CALL_OW 310
5893: PPUSH
5894: CALL_OW 296
5898: PUSH
5899: LD_INT 5
5901: LESS
5902: AND
5903: IFFALSE 5956
5905: GO 5907
5907: DISABLE
// begin SetSide ( Mikhail , 6 ) ;
5908: LD_EXP 8
5912: PPUSH
5913: LD_INT 6
5915: PPUSH
5916: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
5920: LD_EXP 8
5924: PPUSH
5925: CALL_OW 122
// wait ( 0 0$1 ) ;
5929: LD_INT 35
5931: PPUSH
5932: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5936: LD_EXP 8
5940: PPUSH
5941: LD_INT 17
5943: PPUSH
5944: CALL_OW 113
// mikhailStatus = 3 ;
5948: LD_ADDR_EXP 20
5952: PUSH
5953: LD_INT 3
5955: ST_TO_ADDR
// end ;
5956: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 do var tmp ;
5957: LD_EXP 1
5961: PPUSH
5962: LD_EXP 22
5966: PPUSH
5967: CALL_OW 296
5971: PUSH
5972: LD_INT 5
5974: LESS
5975: PUSH
5976: LD_EXP 20
5980: PUSH
5981: LD_INT 3
5983: EQUAL
5984: AND
5985: IFFALSE 6197
5987: GO 5989
5989: DISABLE
5990: LD_INT 0
5992: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
5993: LD_ADDR_VAR 0 1
5997: PUSH
5998: LD_INT 22
6000: PUSH
6001: LD_INT 1
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PUSH
6008: LD_INT 21
6010: PUSH
6011: LD_INT 1
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: PUSH
6018: LD_INT 26
6020: PUSH
6021: LD_INT 1
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: LIST
6032: PPUSH
6033: CALL_OW 69
6037: PUSH
6038: LD_EXP 1
6042: PUSH
6043: EMPTY
6044: LIST
6045: DIFF
6046: ST_TO_ADDR
// DialogueOn ;
6047: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6051: LD_EXP 1
6055: PPUSH
6056: LD_STRING D7-JMM-1
6058: PPUSH
6059: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
6063: LD_VAR 0 1
6067: PUSH
6068: LD_INT 1
6070: ARRAY
6071: PPUSH
6072: LD_STRING D7-Sol1-1
6074: PPUSH
6075: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
6079: LD_EXP 1
6083: PPUSH
6084: LD_STRING D7-JMM-2
6086: PPUSH
6087: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
6091: LD_VAR 0 1
6095: PUSH
6096: LD_INT 1
6098: ARRAY
6099: PPUSH
6100: LD_STRING D7-Sol1-2
6102: PPUSH
6103: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
6107: LD_EXP 1
6111: PPUSH
6112: LD_STRING D7-JMM-3
6114: PPUSH
6115: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
6119: LD_VAR 0 1
6123: PUSH
6124: LD_INT 1
6126: ARRAY
6127: PPUSH
6128: LD_STRING D7-Sol1-3
6130: PPUSH
6131: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
6135: LD_EXP 3
6139: PPUSH
6140: CALL_OW 302
6144: PUSH
6145: LD_EXP 4
6149: PPUSH
6150: CALL_OW 302
6154: AND
6155: IFFALSE 6197
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
6157: LD_EXP 3
6161: PPUSH
6162: LD_STRING D7-Cyrus-3
6164: PPUSH
6165: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
6169: LD_VAR 0 1
6173: PUSH
6174: LD_INT 1
6176: ARRAY
6177: PPUSH
6178: LD_STRING D7-Sol1-4
6180: PPUSH
6181: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
6185: LD_EXP 4
6189: PPUSH
6190: LD_STRING D7-Lisa-4
6192: PPUSH
6193: CALL_OW 88
// end ; end ;
6197: PPOPN 1
6199: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
6200: LD_EXP 8
6204: PPUSH
6205: LD_INT 17
6207: PPUSH
6208: CALL_OW 308
6212: PUSH
6213: LD_EXP 8
6217: PPUSH
6218: CALL_OW 255
6222: PUSH
6223: LD_INT 6
6225: EQUAL
6226: AND
6227: IFFALSE 6249
6229: GO 6231
6231: DISABLE
// begin mikhailStatus = 3 ;
6232: LD_ADDR_EXP 20
6236: PUSH
6237: LD_INT 3
6239: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
6240: LD_EXP 8
6244: PPUSH
6245: CALL_OW 64
// end ; end_of_file
6249: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6250: LD_INT 0
6252: PPUSH
6253: PPUSH
6254: PPUSH
6255: PPUSH
// for i = 1 to count do
6256: LD_ADDR_VAR 0 8
6260: PUSH
6261: DOUBLE
6262: LD_INT 1
6264: DEC
6265: ST_TO_ADDR
6266: LD_VAR 0 6
6270: PUSH
6271: FOR_TO
6272: IFFALSE 6353
// begin uc_side = side ;
6274: LD_ADDR_OWVAR 20
6278: PUSH
6279: LD_VAR 0 1
6283: ST_TO_ADDR
// uc_nation = nation ;
6284: LD_ADDR_OWVAR 21
6288: PUSH
6289: LD_VAR 0 2
6293: ST_TO_ADDR
// hc_gallery =  ;
6294: LD_ADDR_OWVAR 33
6298: PUSH
6299: LD_STRING 
6301: ST_TO_ADDR
// hc_name =  ;
6302: LD_ADDR_OWVAR 26
6306: PUSH
6307: LD_STRING 
6309: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6310: LD_INT 0
6312: PPUSH
6313: LD_VAR 0 5
6317: PPUSH
6318: LD_VAR 0 4
6322: PPUSH
6323: CALL_OW 380
// un = CreateHuman ;
6327: LD_ADDR_VAR 0 10
6331: PUSH
6332: CALL_OW 44
6336: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6337: LD_VAR 0 10
6341: PPUSH
6342: LD_VAR 0 3
6346: PPUSH
6347: CALL_OW 52
// end ;
6351: GO 6271
6353: POP
6354: POP
// end ;
6355: LD_VAR 0 7
6359: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6360: LD_INT 0
6362: PPUSH
6363: PPUSH
6364: PPUSH
// uc_side := GetSide ( b ) ;
6365: LD_ADDR_OWVAR 20
6369: PUSH
6370: LD_VAR 0 2
6374: PPUSH
6375: CALL_OW 255
6379: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6380: LD_ADDR_OWVAR 21
6384: PUSH
6385: LD_VAR 0 2
6389: PPUSH
6390: CALL_OW 248
6394: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6395: LD_INT 0
6397: PPUSH
6398: LD_INT 1
6400: PPUSH
6401: LD_VAR 0 1
6405: PPUSH
6406: CALL_OW 380
// un = CreateHuman ;
6410: LD_ADDR_VAR 0 4
6414: PUSH
6415: CALL_OW 44
6419: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
6420: LD_ADDR_VAR 0 5
6424: PUSH
6425: LD_VAR 0 2
6429: PPUSH
6430: CALL_OW 254
6434: PUSH
6435: LD_INT 3
6437: MINUS
6438: ST_TO_ADDR
// if dir < 0 then
6439: LD_VAR 0 5
6443: PUSH
6444: LD_INT 0
6446: LESS
6447: IFFALSE 6463
// dir := 6 + dir ;
6449: LD_ADDR_VAR 0 5
6453: PUSH
6454: LD_INT 6
6456: PUSH
6457: LD_VAR 0 5
6461: PLUS
6462: ST_TO_ADDR
// SetDir ( un , dir ) ;
6463: LD_VAR 0 4
6467: PPUSH
6468: LD_VAR 0 5
6472: PPUSH
6473: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6477: LD_VAR 0 4
6481: PPUSH
6482: LD_VAR 0 2
6486: PPUSH
6487: CALL_OW 52
// end ;
6491: LD_VAR 0 3
6495: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
6496: LD_INT 0
6498: PPUSH
6499: PPUSH
6500: PPUSH
6501: PPUSH
6502: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
6503: LD_ADDR_VAR 0 7
6507: PUSH
6508: LD_INT 22
6510: PUSH
6511: LD_VAR 0 1
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: PUSH
6520: LD_INT 25
6522: PUSH
6523: LD_INT 2
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: LD_INT 24
6532: PUSH
6533: LD_INT 1000
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: PPUSH
6545: CALL_OW 69
6549: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6550: LD_ADDR_VAR 0 5
6554: PUSH
6555: LD_VAR 0 3
6559: PPUSH
6560: LD_INT 22
6562: PUSH
6563: LD_VAR 0 1
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 21
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: LD_INT 24
6587: PUSH
6588: LD_INT 1000
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: EMPTY
6605: LIST
6606: PPUSH
6607: CALL_OW 70
6611: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
6612: LD_VAR 0 5
6616: PUSH
6617: LD_INT 0
6619: GREATER
6620: PUSH
6621: LD_VAR 0 7
6625: PUSH
6626: LD_INT 0
6628: GREATER
6629: AND
6630: IFFALSE 6696
// begin for i in engineerOk_list do
6632: LD_ADDR_VAR 0 6
6636: PUSH
6637: LD_VAR 0 7
6641: PUSH
6642: FOR_IN
6643: IFFALSE 6694
// begin for j in buildings_list do
6645: LD_ADDR_VAR 0 8
6649: PUSH
6650: LD_VAR 0 5
6654: PUSH
6655: FOR_IN
6656: IFFALSE 6690
// begin AddComExitBuilding ( i ) ;
6658: LD_VAR 0 6
6662: PPUSH
6663: CALL_OW 182
// wait ( 0 0$1 ) ;
6667: LD_INT 35
6669: PPUSH
6670: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
6674: LD_VAR 0 6
6678: PPUSH
6679: LD_VAR 0 8
6683: PPUSH
6684: CALL_OW 190
// end ;
6688: GO 6655
6690: POP
6691: POP
// end ;
6692: GO 6642
6694: POP
6695: POP
// end ; if buildings_list = 0 then
6696: LD_VAR 0 5
6700: PUSH
6701: LD_INT 0
6703: EQUAL
6704: IFFALSE 6737
// begin for i in engineerOK_list do
6706: LD_ADDR_VAR 0 6
6710: PUSH
6711: LD_VAR 0 7
6715: PUSH
6716: FOR_IN
6717: IFFALSE 6735
// begin ComEnterUnit ( i , building ) ;
6719: LD_VAR 0 6
6723: PPUSH
6724: LD_VAR 0 2
6728: PPUSH
6729: CALL_OW 120
// end ;
6733: GO 6716
6735: POP
6736: POP
// end ; end ;
6737: LD_VAR 0 4
6741: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
6742: LD_INT 0
6744: PPUSH
6745: PPUSH
6746: PPUSH
6747: PPUSH
6748: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6749: LD_ADDR_VAR 0 6
6753: PUSH
6754: LD_INT 22
6756: PUSH
6757: LD_VAR 0 1
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: LD_INT 25
6768: PUSH
6769: LD_INT 4
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PPUSH
6780: CALL_OW 69
6784: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
6785: LD_ADDR_VAR 0 9
6789: PUSH
6790: LD_VAR 0 3
6794: PPUSH
6795: LD_INT 22
6797: PUSH
6798: LD_VAR 0 1
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 21
6809: PUSH
6810: LD_INT 1
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 3
6819: PUSH
6820: LD_INT 24
6822: PUSH
6823: LD_INT 650
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: LIST
6838: PPUSH
6839: CALL_OW 70
6843: ST_TO_ADDR
// if damageUnits > 0 then
6844: LD_VAR 0 9
6848: PUSH
6849: LD_INT 0
6851: GREATER
6852: IFFALSE 7002
// begin for i = 1 to damageUnits do
6854: LD_ADDR_VAR 0 7
6858: PUSH
6859: DOUBLE
6860: LD_INT 1
6862: DEC
6863: ST_TO_ADDR
6864: LD_VAR 0 9
6868: PUSH
6869: FOR_TO
6870: IFFALSE 6894
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
6872: LD_VAR 0 9
6876: PUSH
6877: LD_VAR 0 7
6881: ARRAY
6882: PPUSH
6883: LD_VAR 0 2
6887: PPUSH
6888: CALL_OW 113
6892: GO 6869
6894: POP
6895: POP
// for i = 1 to sci_list do
6896: LD_ADDR_VAR 0 7
6900: PUSH
6901: DOUBLE
6902: LD_INT 1
6904: DEC
6905: ST_TO_ADDR
6906: LD_VAR 0 6
6910: PUSH
6911: FOR_TO
6912: IFFALSE 6998
// begin ComExitBuilding ( sci_list [ i ] ) ;
6914: LD_VAR 0 6
6918: PUSH
6919: LD_VAR 0 7
6923: ARRAY
6924: PPUSH
6925: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
6929: LD_ADDR_VAR 0 8
6933: PUSH
6934: LD_VAR 0 2
6938: PPUSH
6939: LD_INT 22
6941: PUSH
6942: LD_VAR 0 1
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PPUSH
6951: CALL_OW 70
6955: PUSH
6956: FOR_IN
6957: IFFALSE 6994
// begin AddComHeal ( sci_list [ i ] , j [ j ] ) ;
6959: LD_VAR 0 6
6963: PUSH
6964: LD_VAR 0 7
6968: ARRAY
6969: PPUSH
6970: LD_VAR 0 8
6974: PUSH
6975: LD_VAR 0 8
6979: ARRAY
6980: PPUSH
6981: CALL_OW 188
// wait ( 1 1$0 ) ;
6985: LD_INT 2100
6987: PPUSH
6988: CALL_OW 67
// end ;
6992: GO 6956
6994: POP
6995: POP
// end ;
6996: GO 6911
6998: POP
6999: POP
// end else
7000: GO 7016
// begin AddComEnterUnit ( sci_list , build ) ;
7002: LD_VAR 0 6
7006: PPUSH
7007: LD_VAR 0 4
7011: PPUSH
7012: CALL_OW 180
// end ; end ;
7016: LD_VAR 0 5
7020: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
7021: LD_INT 0
7023: PPUSH
7024: PPUSH
7025: PPUSH
7026: PPUSH
7027: PPUSH
7028: PPUSH
7029: PPUSH
7030: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
7031: LD_ADDR_VAR 0 7
7035: PUSH
7036: LD_VAR 0 3
7040: PPUSH
7041: LD_INT 22
7043: PUSH
7044: LD_VAR 0 1
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: LD_INT 21
7055: PUSH
7056: LD_INT 2
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 24
7065: PUSH
7066: LD_INT 550
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PUSH
7073: LD_INT 34
7075: PUSH
7076: LD_INT 46
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: PPUSH
7089: CALL_OW 70
7093: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
7094: LD_ADDR_VAR 0 8
7098: PUSH
7099: LD_VAR 0 3
7103: PPUSH
7104: LD_INT 22
7106: PUSH
7107: LD_VAR 0 1
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PUSH
7116: LD_INT 21
7118: PUSH
7119: LD_INT 2
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: LD_INT 34
7128: PUSH
7129: LD_INT 46
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 3
7138: PUSH
7139: LD_INT 24
7141: PUSH
7142: LD_INT 550
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: PPUSH
7159: CALL_OW 70
7163: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
7164: LD_ADDR_VAR 0 9
7168: PUSH
7169: LD_VAR 0 2
7173: PPUSH
7174: LD_INT 22
7176: PUSH
7177: LD_VAR 0 1
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: LD_INT 21
7188: PUSH
7189: LD_INT 2
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: LD_INT 34
7198: PUSH
7199: LD_INT 46
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: LD_INT 24
7208: PUSH
7209: LD_INT 1000
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 58
7218: PUSH
7219: EMPTY
7220: LIST
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: PPUSH
7229: CALL_OW 70
7233: ST_TO_ADDR
// for i in damageVehicle_list do
7234: LD_ADDR_VAR 0 5
7238: PUSH
7239: LD_VAR 0 8
7243: PUSH
7244: FOR_IN
7245: IFFALSE 7264
// mechanicInside_list = UnitsInside ( i ) ;
7247: LD_ADDR_VAR 0 10
7251: PUSH
7252: LD_VAR 0 5
7256: PPUSH
7257: CALL_OW 313
7261: ST_TO_ADDR
7262: GO 7244
7264: POP
7265: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
7266: LD_ADDR_VAR 0 11
7270: PUSH
7271: LD_VAR 0 2
7275: PPUSH
7276: LD_INT 22
7278: PUSH
7279: LD_VAR 0 1
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 25
7290: PUSH
7291: LD_INT 3
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PPUSH
7302: CALL_OW 70
7306: ST_TO_ADDR
// if damageVehicle_list > 0 then
7307: LD_VAR 0 8
7311: PUSH
7312: LD_INT 0
7314: GREATER
7315: IFFALSE 7388
// begin for i in damageVehicle_list do
7317: LD_ADDR_VAR 0 5
7321: PUSH
7322: LD_VAR 0 8
7326: PUSH
7327: FOR_IN
7328: IFFALSE 7386
// begin for j in mechanicInside_list do
7330: LD_ADDR_VAR 0 6
7334: PUSH
7335: LD_VAR 0 10
7339: PUSH
7340: FOR_IN
7341: IFFALSE 7382
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
7343: LD_VAR 0 8
7347: PPUSH
7348: LD_VAR 0 2
7352: PPUSH
7353: CALL_OW 113
// AddComExitVehicle ( j ) ;
7357: LD_VAR 0 6
7361: PPUSH
7362: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
7366: LD_VAR 0 6
7370: PPUSH
7371: LD_VAR 0 5
7375: PPUSH
7376: CALL_OW 189
// end ;
7380: GO 7340
7382: POP
7383: POP
// end ;
7384: GO 7327
7386: POP
7387: POP
// end ; if emptyVehicle_list > 0 then
7388: LD_VAR 0 9
7392: PUSH
7393: LD_INT 0
7395: GREATER
7396: IFFALSE 7446
// begin for i in emptyVehicle_list do
7398: LD_ADDR_VAR 0 5
7402: PUSH
7403: LD_VAR 0 9
7407: PUSH
7408: FOR_IN
7409: IFFALSE 7444
// begin for j in mechanicOutside_list do
7411: LD_ADDR_VAR 0 6
7415: PUSH
7416: LD_VAR 0 11
7420: PUSH
7421: FOR_IN
7422: IFFALSE 7440
// begin AddComEnterUnit ( j , i ) ;
7424: LD_VAR 0 6
7428: PPUSH
7429: LD_VAR 0 5
7433: PPUSH
7434: CALL_OW 180
// end ;
7438: GO 7421
7440: POP
7441: POP
// end ;
7442: GO 7408
7444: POP
7445: POP
// end ; if VehicleOK_list > 0 then
7446: LD_VAR 0 7
7450: PUSH
7451: LD_INT 0
7453: GREATER
7454: IFFALSE 7488
// begin for i in VehicleOK_list do
7456: LD_ADDR_VAR 0 5
7460: PUSH
7461: LD_VAR 0 7
7465: PUSH
7466: FOR_IN
7467: IFFALSE 7486
// ComAgressiveMove ( i , 110 , 29 ) ;
7469: LD_VAR 0 5
7473: PPUSH
7474: LD_INT 110
7476: PPUSH
7477: LD_INT 29
7479: PPUSH
7480: CALL_OW 114
7484: GO 7466
7486: POP
7487: POP
// end ; end ;
7488: LD_VAR 0 4
7492: RET
// export function DefendBases ( area , enemySide , defendersList , build ) ; var i , j ; begin
7493: LD_INT 0
7495: PPUSH
7496: PPUSH
7497: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_type , unit_human ] ] ) > 0 then
7498: LD_VAR 0 1
7502: PPUSH
7503: LD_INT 22
7505: PUSH
7506: LD_VAR 0 2
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: LD_INT 21
7517: PUSH
7518: LD_INT 1
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PPUSH
7529: CALL_OW 70
7533: PUSH
7534: LD_INT 0
7536: GREATER
7537: IFFALSE 7651
// begin for i in defendersList do
7539: LD_ADDR_VAR 0 6
7543: PUSH
7544: LD_VAR 0 3
7548: PUSH
7549: FOR_IN
7550: IFFALSE 7647
// begin ComExitBuilding ( i ) ;
7552: LD_VAR 0 6
7556: PPUSH
7557: CALL_OW 122
// wait ( 0 0$1 ) ;
7561: LD_INT 35
7563: PPUSH
7564: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_type , unit_human ] ] ) do
7568: LD_ADDR_VAR 0 7
7572: PUSH
7573: LD_VAR 0 1
7577: PPUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 2
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 21
7592: PUSH
7593: LD_INT 1
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PPUSH
7604: CALL_OW 70
7608: PUSH
7609: FOR_IN
7610: IFFALSE 7643
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
7612: LD_VAR 0 6
7616: PPUSH
7617: LD_VAR 0 7
7621: PPUSH
7622: CALL_OW 250
7626: PPUSH
7627: LD_VAR 0 7
7631: PPUSH
7632: CALL_OW 251
7636: PPUSH
7637: CALL_OW 174
7641: GO 7609
7643: POP
7644: POP
// end ;
7645: GO 7549
7647: POP
7648: POP
// end else
7649: GO 7682
// begin for i in defendersList do
7651: LD_ADDR_VAR 0 6
7655: PUSH
7656: LD_VAR 0 3
7660: PUSH
7661: FOR_IN
7662: IFFALSE 7680
// ComEnterUnit ( i , build ) ;
7664: LD_VAR 0 6
7668: PPUSH
7669: LD_VAR 0 4
7673: PPUSH
7674: CALL_OW 120
7678: GO 7661
7680: POP
7681: POP
// end ; end ;
7682: LD_VAR 0 5
7686: RET
// export function PrepareDifficulty ; begin
7687: LD_INT 0
7689: PPUSH
// if Difficulty = 1 then
7690: LD_OWVAR 67
7694: PUSH
7695: LD_INT 1
7697: EQUAL
7698: IFFALSE 7755
// begin RemoveUnit ( [ brw2 , brw3 , brw4 , brw5 ] ) ;
7700: LD_INT 9
7702: PUSH
7703: LD_INT 30
7705: PUSH
7706: LD_INT 52
7708: PUSH
7709: LD_INT 63
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
7722: LD_INT 5
7724: PUSH
7725: LD_INT 4
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PPUSH
7732: LD_INT 50
7734: PPUSH
7735: CALL_OW 240
// RuSoldMinLevel = 0 ;
7739: LD_ADDR_EXP 13
7743: PUSH
7744: LD_INT 0
7746: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
7747: LD_ADDR_EXP 14
7751: PUSH
7752: LD_INT 1
7754: ST_TO_ADDR
// end ; if Difficulty = 2 then
7755: LD_OWVAR 67
7759: PUSH
7760: LD_INT 2
7762: EQUAL
7763: IFFALSE 7812
// begin RemoveUnit ( [ brw3 , brw4 ] ) ;
7765: LD_INT 30
7767: PUSH
7768: LD_INT 52
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PPUSH
7775: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 35 ) ;
7779: LD_INT 5
7781: PUSH
7782: LD_INT 4
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: PPUSH
7789: LD_INT 35
7791: PPUSH
7792: CALL_OW 240
// RuSoldMinLevel = 1 ;
7796: LD_ADDR_EXP 13
7800: PUSH
7801: LD_INT 1
7803: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
7804: LD_ADDR_EXP 14
7808: PUSH
7809: LD_INT 2
7811: ST_TO_ADDR
// end ; if Difficulty = 3 then
7812: LD_OWVAR 67
7816: PUSH
7817: LD_INT 3
7819: EQUAL
7820: IFFALSE 7855
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 20 ) ;
7822: LD_INT 5
7824: PUSH
7825: LD_INT 4
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PPUSH
7832: LD_INT 20
7834: PPUSH
7835: CALL_OW 240
// RuSoldMinLevel = 2 ;
7839: LD_ADDR_EXP 13
7843: PUSH
7844: LD_INT 2
7846: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
7847: LD_ADDR_EXP 14
7851: PUSH
7852: LD_INT 3
7854: ST_TO_ADDR
// end ; end ;
7855: LD_VAR 0 1
7859: RET
// export function FinishMission ; begin
7860: LD_INT 0
7862: PPUSH
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
7863: LD_INT 1
7865: PPUSH
7866: CALL_OW 274
7870: PPUSH
7871: LD_INT 1
7873: PPUSH
7874: CALL_OW 275
7878: PUSH
7879: LD_INT 200
7881: GREATEREQUAL
7882: IFFALSE 7896
// begin AddMedal ( Cans , 1 ) ;
7884: LD_STRING Cans
7886: PPUSH
7887: LD_INT 1
7889: PPUSH
7890: CALL_OW 101
// end else
7894: GO 7907
// begin AddMedal ( Cans , - 1 ) ;
7896: LD_STRING Cans
7898: PPUSH
7899: LD_INT 1
7901: NEG
7902: PPUSH
7903: CALL_OW 101
// end ; if deadsCounter >= 3 then
7907: LD_EXP 27
7911: PUSH
7912: LD_INT 3
7914: GREATEREQUAL
7915: IFFALSE 7929
// begin AddMedal ( Deaths , 1 ) ;
7917: LD_STRING Deaths
7919: PPUSH
7920: LD_INT 1
7922: PPUSH
7923: CALL_OW 101
// end else
7927: GO 7940
// begin AddMedal ( Deaths , - 1 ) ;
7929: LD_STRING Deaths
7931: PPUSH
7932: LD_INT 1
7934: NEG
7935: PPUSH
7936: CALL_OW 101
// end ; if mikhailStatus = 0 then
7940: LD_EXP 20
7944: PUSH
7945: LD_INT 0
7947: EQUAL
7948: IFFALSE 7961
// AddMedal ( Prisoner , - 1 ) ;
7950: LD_STRING Prisoner
7952: PPUSH
7953: LD_INT 1
7955: NEG
7956: PPUSH
7957: CALL_OW 101
// if mikhailStatus = 1 then
7961: LD_EXP 20
7965: PUSH
7966: LD_INT 1
7968: EQUAL
7969: IFFALSE 7981
// AddMedal ( Prisoner , 1 ) ;
7971: LD_STRING Prisoner
7973: PPUSH
7974: LD_INT 1
7976: PPUSH
7977: CALL_OW 101
// if mikhailStatus = 2 then
7981: LD_EXP 20
7985: PUSH
7986: LD_INT 2
7988: EQUAL
7989: IFFALSE 8001
// AddMedal ( Prisoner , 2 ) ;
7991: LD_STRING Prisoner
7993: PPUSH
7994: LD_INT 2
7996: PPUSH
7997: CALL_OW 101
// if mikhailStatus = 3 then
8001: LD_EXP 20
8005: PUSH
8006: LD_INT 3
8008: EQUAL
8009: IFFALSE 8022
// AddMedal ( Prisoner , - 2 ) ;
8011: LD_STRING Prisoner
8013: PPUSH
8014: LD_INT 2
8016: NEG
8017: PPUSH
8018: CALL_OW 101
// if mikhailStatus = 1 then
8022: LD_EXP 20
8026: PUSH
8027: LD_INT 1
8029: EQUAL
8030: IFFALSE 8044
// SaveVariable ( mikhailStatus , 01_mikhailStatus_1 ) ;
8032: LD_EXP 20
8036: PPUSH
8037: LD_STRING 01_mikhailStatus_1
8039: PPUSH
8040: CALL_OW 39
// GiveMedals ( MAIN ) ;
8044: LD_STRING MAIN
8046: PPUSH
8047: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8051: LD_INT 22
8053: PUSH
8054: LD_INT 1
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PUSH
8061: LD_INT 21
8063: PUSH
8064: LD_INT 1
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PPUSH
8075: CALL_OW 69
8079: PPUSH
8080: CALL_OW 43
// YouWin ;
8084: CALL_OW 103
// end ; end_of_file
8088: LD_VAR 0 1
8092: RET
// export function PrepareHeroes ; begin
8093: LD_INT 0
8095: PPUSH
// uc_side = 1 ;
8096: LD_ADDR_OWVAR 20
8100: PUSH
8101: LD_INT 1
8103: ST_TO_ADDR
// JMM = NewCharacter ( JMM ) ;
8104: LD_ADDR_EXP 1
8108: PUSH
8109: LD_STRING JMM
8111: PPUSH
8112: CALL_OW 25
8116: ST_TO_ADDR
// Bobby = NewCharacter ( Bobby ) ;
8117: LD_ADDR_EXP 2
8121: PUSH
8122: LD_STRING Bobby
8124: PPUSH
8125: CALL_OW 25
8129: ST_TO_ADDR
// Cyrus = NewCharacter ( Cyrus ) ;
8130: LD_ADDR_EXP 3
8134: PUSH
8135: LD_STRING Cyrus
8137: PPUSH
8138: CALL_OW 25
8142: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
8143: LD_ADDR_EXP 9
8147: PUSH
8148: LD_STRING Powell
8150: PPUSH
8151: CALL_OW 25
8155: ST_TO_ADDR
// if Bobby then
8156: LD_EXP 2
8160: IFFALSE 8174
// SetLives ( Bobby , 900 ) ;
8162: LD_EXP 2
8166: PPUSH
8167: LD_INT 900
8169: PPUSH
8170: CALL_OW 234
// if Cyrus then
8174: LD_EXP 3
8178: IFFALSE 8192
// SetLives ( Cyrus , 900 ) ;
8180: LD_EXP 3
8184: PPUSH
8185: LD_INT 900
8187: PPUSH
8188: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
8192: LD_ADDR_EXP 5
8196: PUSH
8197: LD_STRING Khatam
8199: PPUSH
8200: CALL_OW 25
8204: ST_TO_ADDR
// uc_side = 4 ;
8205: LD_ADDR_OWVAR 20
8209: PUSH
8210: LD_INT 4
8212: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
8213: LD_ADDR_EXP 4
8217: PUSH
8218: LD_STRING Lisa
8220: PPUSH
8221: CALL_OW 25
8225: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
8226: LD_EXP 1
8230: PPUSH
8231: LD_INT 3
8233: PPUSH
8234: LD_INT 0
8236: PPUSH
8237: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
8241: LD_EXP 2
8245: PPUSH
8246: LD_INT 3
8248: PPUSH
8249: LD_INT 0
8251: PPUSH
8252: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
8256: LD_EXP 3
8260: PPUSH
8261: LD_INT 3
8263: PPUSH
8264: LD_INT 0
8266: PPUSH
8267: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
8271: LD_EXP 4
8275: PPUSH
8276: LD_INT 5
8278: PPUSH
8279: LD_INT 0
8281: PPUSH
8282: CALL_OW 49
// ComCrawl ( Lisa ) ;
8286: LD_EXP 4
8290: PPUSH
8291: CALL_OW 137
// end ;
8295: LD_VAR 0 1
8299: RET
// export function PrepareLisSquad ; var i , un ; begin
8300: LD_INT 0
8302: PPUSH
8303: PPUSH
8304: PPUSH
// for i = 1 to 2 do
8305: LD_ADDR_VAR 0 2
8309: PUSH
8310: DOUBLE
8311: LD_INT 1
8313: DEC
8314: ST_TO_ADDR
8315: LD_INT 2
8317: PUSH
8318: FOR_TO
8319: IFFALSE 8401
// begin uc_side = 4 ;
8321: LD_ADDR_OWVAR 20
8325: PUSH
8326: LD_INT 4
8328: ST_TO_ADDR
// uc_nation = 1 ;
8329: LD_ADDR_OWVAR 21
8333: PUSH
8334: LD_INT 1
8336: ST_TO_ADDR
// hc_gallery =  ;
8337: LD_ADDR_OWVAR 33
8341: PUSH
8342: LD_STRING 
8344: ST_TO_ADDR
// hc_name =  ;
8345: LD_ADDR_OWVAR 26
8349: PUSH
8350: LD_STRING 
8352: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( 0 , 1 ) ) ;
8353: LD_INT 0
8355: PPUSH
8356: LD_INT 2
8358: PPUSH
8359: LD_INT 0
8361: PPUSH
8362: LD_INT 1
8364: PPUSH
8365: CALL_OW 12
8369: PPUSH
8370: CALL_OW 380
// un = CreateHuman ;
8374: LD_ADDR_VAR 0 3
8378: PUSH
8379: CALL_OW 44
8383: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
8384: LD_VAR 0 3
8388: PPUSH
8389: LD_INT 6
8391: PPUSH
8392: LD_INT 0
8394: PPUSH
8395: CALL_OW 49
// end ;
8399: GO 8318
8401: POP
8402: POP
// end ;
8403: LD_VAR 0 1
8407: RET
// export function PrepareOtherAmericans ; begin
8408: LD_INT 0
8410: PPUSH
// uc_side = 4 ;
8411: LD_ADDR_OWVAR 20
8415: PUSH
8416: LD_INT 4
8418: ST_TO_ADDR
// uc_nation = 1 ;
8419: LD_ADDR_OWVAR 21
8423: PUSH
8424: LD_INT 1
8426: ST_TO_ADDR
// hc_gallery =  ;
8427: LD_ADDR_OWVAR 33
8431: PUSH
8432: LD_STRING 
8434: ST_TO_ADDR
// hc_name = Brian Garvin ;
8435: LD_ADDR_OWVAR 26
8439: PUSH
8440: LD_STRING Brian Garvin
8442: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
8443: LD_INT 1
8445: PPUSH
8446: LD_INT 1
8448: PPUSH
8449: LD_INT 1
8451: PPUSH
8452: LD_INT 2
8454: PPUSH
8455: CALL_OW 12
8459: PPUSH
8460: CALL_OW 380
// Brian = CreateHuman ;
8464: LD_ADDR_EXP 6
8468: PUSH
8469: CALL_OW 44
8473: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , true ) ;
8474: LD_EXP 6
8478: PPUSH
8479: LD_INT 10
8481: PPUSH
8482: LD_INT 1
8484: PPUSH
8485: CALL_OW 49
// hc_name = Jerry White ;
8489: LD_ADDR_OWVAR 26
8493: PUSH
8494: LD_STRING Jerry White
8496: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
8497: LD_INT 1
8499: PPUSH
8500: LD_INT 3
8502: PPUSH
8503: LD_INT 1
8505: PPUSH
8506: LD_INT 2
8508: PPUSH
8509: CALL_OW 12
8513: PPUSH
8514: CALL_OW 380
// Jerry = CreateHuman ;
8518: LD_ADDR_EXP 7
8522: PUSH
8523: CALL_OW 44
8527: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , true ) ;
8528: LD_EXP 7
8532: PPUSH
8533: LD_INT 10
8535: PPUSH
8536: LD_INT 1
8538: PPUSH
8539: CALL_OW 49
// end ;
8543: LD_VAR 0 1
8547: RET
// export function PrepareDeadSoldiers ; var i , un ; begin
8548: LD_INT 0
8550: PPUSH
8551: PPUSH
8552: PPUSH
// for i = 1 to 6 do
8553: LD_ADDR_VAR 0 2
8557: PUSH
8558: DOUBLE
8559: LD_INT 1
8561: DEC
8562: ST_TO_ADDR
8563: LD_INT 6
8565: PUSH
8566: FOR_TO
8567: IFFALSE 8661
// begin uc_side = 4 ;
8569: LD_ADDR_OWVAR 20
8573: PUSH
8574: LD_INT 4
8576: ST_TO_ADDR
// uc_nation = 1 ;
8577: LD_ADDR_OWVAR 21
8581: PUSH
8582: LD_INT 1
8584: ST_TO_ADDR
// hc_gallery =  ;
8585: LD_ADDR_OWVAR 33
8589: PUSH
8590: LD_STRING 
8592: ST_TO_ADDR
// hc_name =  ;
8593: LD_ADDR_OWVAR 26
8597: PUSH
8598: LD_STRING 
8600: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
8601: LD_INT 0
8603: PPUSH
8604: LD_INT 1
8606: PPUSH
8607: LD_INT 4
8609: PPUSH
8610: CALL_OW 12
8614: PPUSH
8615: LD_INT 1
8617: PPUSH
8618: CALL_OW 380
// un = CreateHuman ;
8622: LD_ADDR_VAR 0 3
8626: PUSH
8627: CALL_OW 44
8631: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
8632: LD_VAR 0 3
8636: PPUSH
8637: LD_INT 16
8639: PPUSH
8640: LD_INT 0
8642: PPUSH
8643: CALL_OW 49
// SetLives ( un , 1 ) ;
8647: LD_VAR 0 3
8651: PPUSH
8652: LD_INT 1
8654: PPUSH
8655: CALL_OW 234
// end ;
8659: GO 8566
8661: POP
8662: POP
// end ; end_of_file
8663: LD_VAR 0 1
8667: RET
// export function PrepareRussianHeroes ; var tmp ; begin
8668: LD_INT 0
8670: PPUSH
8671: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
8672: LD_ADDR_VAR 0 2
8676: PUSH
8677: LD_INT 22
8679: PUSH
8680: LD_INT 1
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 25
8689: PUSH
8690: LD_INT 2
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PPUSH
8701: CALL_OW 69
8705: ST_TO_ADDR
// uc_side = 6 ;
8706: LD_ADDR_OWVAR 20
8710: PUSH
8711: LD_INT 6
8713: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
8714: LD_ADDR_EXP 8
8718: PUSH
8719: LD_STRING Mikhail
8721: PPUSH
8722: CALL_OW 25
8726: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
8727: LD_EXP 8
8731: PPUSH
8732: LD_VAR 0 2
8736: PUSH
8737: LD_INT 1
8739: ARRAY
8740: PPUSH
8741: CALL_OW 250
8745: PPUSH
8746: LD_VAR 0 2
8750: PUSH
8751: LD_INT 1
8753: ARRAY
8754: PPUSH
8755: CALL_OW 251
8759: PPUSH
8760: LD_INT 3
8762: PPUSH
8763: LD_INT 1
8765: PPUSH
8766: CALL_OW 50
// end ;
8770: LD_VAR 0 1
8774: RET
// export function PrepareRussianCommander ; var un ; begin
8775: LD_INT 0
8777: PPUSH
8778: PPUSH
// uc_side = 3 ;
8779: LD_ADDR_OWVAR 20
8783: PUSH
8784: LD_INT 3
8786: ST_TO_ADDR
// uc_nation = 3 ;
8787: LD_ADDR_OWVAR 21
8791: PUSH
8792: LD_INT 3
8794: ST_TO_ADDR
// hc_gallery =  ;
8795: LD_ADDR_OWVAR 33
8799: PUSH
8800: LD_STRING 
8802: ST_TO_ADDR
// hc_name = Natasza Stjepanowna ;
8803: LD_ADDR_OWVAR 26
8807: PUSH
8808: LD_STRING Natasza Stjepanowna
8810: ST_TO_ADDR
// PrepareHuman ( 2 , 1 , rand ( 2 , 4 ) ) ;
8811: LD_INT 2
8813: PPUSH
8814: LD_INT 1
8816: PPUSH
8817: LD_INT 2
8819: PPUSH
8820: LD_INT 4
8822: PPUSH
8823: CALL_OW 12
8827: PPUSH
8828: CALL_OW 380
// hc_importance = 110 ;
8832: LD_ADDR_OWVAR 32
8836: PUSH
8837: LD_INT 110
8839: ST_TO_ADDR
// un = CreateHuman ;
8840: LD_ADDR_VAR 0 2
8844: PUSH
8845: CALL_OW 44
8849: ST_TO_ADDR
// PlaceUnitArea ( un , NataszaSpawn , false ) ;
8850: LD_VAR 0 2
8854: PPUSH
8855: LD_INT 24
8857: PPUSH
8858: LD_INT 0
8860: PPUSH
8861: CALL_OW 49
// ComTurnXY ( un , 56 , 16 ) ;
8865: LD_VAR 0 2
8869: PPUSH
8870: LD_INT 56
8872: PPUSH
8873: LD_INT 16
8875: PPUSH
8876: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ un ;
8880: LD_ADDR_EXP 23
8884: PUSH
8885: LD_EXP 23
8889: PUSH
8890: LD_VAR 0 2
8894: ADD
8895: ST_TO_ADDR
// end ;
8896: LD_VAR 0 1
8900: RET
// export function PrepareSouthBase ; var i , un ; begin
8901: LD_INT 0
8903: PPUSH
8904: PPUSH
8905: PPUSH
// for i = 1 to 2 do
8906: LD_ADDR_VAR 0 2
8910: PUSH
8911: DOUBLE
8912: LD_INT 1
8914: DEC
8915: ST_TO_ADDR
8916: LD_INT 2
8918: PUSH
8919: FOR_TO
8920: IFFALSE 9029
// begin uc_side = 3 ;
8922: LD_ADDR_OWVAR 20
8926: PUSH
8927: LD_INT 3
8929: ST_TO_ADDR
// uc_nation = 3 ;
8930: LD_ADDR_OWVAR 21
8934: PUSH
8935: LD_INT 3
8937: ST_TO_ADDR
// hc_gallery =  ;
8938: LD_ADDR_OWVAR 33
8942: PUSH
8943: LD_STRING 
8945: ST_TO_ADDR
// hc_name =  ;
8946: LD_ADDR_OWVAR 26
8950: PUSH
8951: LD_STRING 
8953: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
8954: LD_INT 1
8956: PPUSH
8957: LD_INT 1
8959: PPUSH
8960: LD_EXP 13
8964: PPUSH
8965: LD_EXP 14
8969: PPUSH
8970: CALL_OW 12
8974: PPUSH
8975: CALL_OW 380
// hc_importance = 0 ;
8979: LD_ADDR_OWVAR 32
8983: PUSH
8984: LD_INT 0
8986: ST_TO_ADDR
// un = CreateHuman ;
8987: LD_ADDR_VAR 0 3
8991: PUSH
8992: CALL_OW 44
8996: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
8997: LD_VAR 0 3
9001: PPUSH
9002: LD_INT 11
9004: PPUSH
9005: LD_INT 0
9007: PPUSH
9008: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
9012: LD_VAR 0 3
9016: PPUSH
9017: LD_INT 111
9019: PPUSH
9020: LD_INT 38
9022: PPUSH
9023: CALL_OW 118
// end ;
9027: GO 8919
9029: POP
9030: POP
// for i = 1 to Difficulty do
9031: LD_ADDR_VAR 0 2
9035: PUSH
9036: DOUBLE
9037: LD_INT 1
9039: DEC
9040: ST_TO_ADDR
9041: LD_OWVAR 67
9045: PUSH
9046: FOR_TO
9047: IFFALSE 9148
// begin uc_side = 3 ;
9049: LD_ADDR_OWVAR 20
9053: PUSH
9054: LD_INT 3
9056: ST_TO_ADDR
// uc_nation = 3 ;
9057: LD_ADDR_OWVAR 21
9061: PUSH
9062: LD_INT 3
9064: ST_TO_ADDR
// hc_gallery =  ;
9065: LD_ADDR_OWVAR 33
9069: PUSH
9070: LD_STRING 
9072: ST_TO_ADDR
// hc_name =  ;
9073: LD_ADDR_OWVAR 26
9077: PUSH
9078: LD_STRING 
9080: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
9081: LD_INT 0
9083: PPUSH
9084: LD_INT 3
9086: PPUSH
9087: LD_EXP 13
9091: PPUSH
9092: LD_EXP 14
9096: PPUSH
9097: CALL_OW 12
9101: PPUSH
9102: CALL_OW 380
// un = CreateHuman ;
9106: LD_ADDR_VAR 0 3
9110: PUSH
9111: CALL_OW 44
9115: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
9116: LD_VAR 0 3
9120: PPUSH
9121: LD_INT 12
9123: PPUSH
9124: LD_INT 0
9126: PPUSH
9127: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
9131: LD_VAR 0 3
9135: PPUSH
9136: LD_INT 111
9138: PPUSH
9139: LD_INT 28
9141: PPUSH
9142: CALL_OW 118
// end ;
9146: GO 9046
9148: POP
9149: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
9150: LD_INT 3
9152: PPUSH
9153: LD_INT 3
9155: PPUSH
9156: LD_INT 33
9158: PPUSH
9159: LD_EXP 13
9163: PPUSH
9164: LD_EXP 14
9168: PPUSH
9169: CALL_OW 12
9173: PPUSH
9174: LD_INT 1
9176: PPUSH
9177: LD_INT 1
9179: PUSH
9180: LD_INT 1
9182: PPUSH
9183: LD_INT 2
9185: PPUSH
9186: CALL_OW 12
9190: PUSH
9191: LD_INT 1
9193: PPUSH
9194: LD_INT 2
9196: PPUSH
9197: CALL_OW 12
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: LIST
9206: PUSH
9207: LD_OWVAR 67
9211: ARRAY
9212: PPUSH
9213: CALL 6250 0 6
// for i in UnitsInside ( arm2 ) do
9217: LD_ADDR_VAR 0 2
9221: PUSH
9222: LD_INT 33
9224: PPUSH
9225: CALL_OW 313
9229: PUSH
9230: FOR_IN
9231: IFFALSE 9251
// southBaseDefenders = southBaseDefenders ^ i ;
9233: LD_ADDR_EXP 24
9237: PUSH
9238: LD_EXP 24
9242: PUSH
9243: LD_VAR 0 2
9247: ADD
9248: ST_TO_ADDR
9249: GO 9230
9251: POP
9252: POP
// end ;
9253: LD_VAR 0 1
9257: RET
// export function PrepareNorthBase ; var i , un ; begin
9258: LD_INT 0
9260: PPUSH
9261: PPUSH
9262: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
9263: LD_ADDR_VAR 0 2
9267: PUSH
9268: DOUBLE
9269: LD_INT 1
9271: DEC
9272: ST_TO_ADDR
9273: LD_INT 1
9275: PPUSH
9276: LD_INT 2
9278: PPUSH
9279: CALL_OW 12
9283: PUSH
9284: LD_INT 2
9286: PPUSH
9287: LD_INT 3
9289: PPUSH
9290: CALL_OW 12
9294: PUSH
9295: LD_INT 3
9297: PPUSH
9298: LD_INT 4
9300: PPUSH
9301: CALL_OW 12
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: LIST
9310: PUSH
9311: LD_OWVAR 67
9315: ARRAY
9316: PUSH
9317: FOR_TO
9318: IFFALSE 9404
// begin uc_side = 3 ;
9320: LD_ADDR_OWVAR 20
9324: PUSH
9325: LD_INT 3
9327: ST_TO_ADDR
// uc_nation = 3 ;
9328: LD_ADDR_OWVAR 21
9332: PUSH
9333: LD_INT 3
9335: ST_TO_ADDR
// hc_gallery =  ;
9336: LD_ADDR_OWVAR 33
9340: PUSH
9341: LD_STRING 
9343: ST_TO_ADDR
// hc_name =  ;
9344: LD_ADDR_OWVAR 26
9348: PUSH
9349: LD_STRING 
9351: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
9352: LD_INT 0
9354: PPUSH
9355: LD_INT 1
9357: PPUSH
9358: LD_EXP 13
9362: PPUSH
9363: LD_EXP 14
9367: PPUSH
9368: CALL_OW 12
9372: PPUSH
9373: CALL_OW 380
// un = CreateHuman ;
9377: LD_ADDR_VAR 0 3
9381: PUSH
9382: CALL_OW 44
9386: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
9387: LD_VAR 0 3
9391: PPUSH
9392: LD_INT 14
9394: PPUSH
9395: LD_INT 0
9397: PPUSH
9398: CALL_OW 49
// end ;
9402: GO 9317
9404: POP
9405: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
9406: LD_INT 3
9408: PPUSH
9409: LD_INT 3
9411: PPUSH
9412: LD_INT 2
9414: PPUSH
9415: LD_EXP 13
9419: PPUSH
9420: LD_EXP 14
9424: PPUSH
9425: CALL_OW 12
9429: PPUSH
9430: LD_INT 1
9432: PPUSH
9433: LD_INT 1
9435: PPUSH
9436: LD_INT 2
9438: PPUSH
9439: CALL_OW 12
9443: PUSH
9444: LD_INT 1
9446: PPUSH
9447: LD_INT 3
9449: PPUSH
9450: CALL_OW 12
9454: PUSH
9455: LD_INT 1
9457: PPUSH
9458: LD_INT 3
9460: PPUSH
9461: CALL_OW 12
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: LIST
9470: PUSH
9471: LD_OWVAR 67
9475: ARRAY
9476: PPUSH
9477: CALL 6250 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
9481: LD_INT 3
9483: PPUSH
9484: LD_INT 3
9486: PPUSH
9487: LD_INT 23
9489: PPUSH
9490: LD_EXP 13
9494: PPUSH
9495: LD_EXP 14
9499: PPUSH
9500: CALL_OW 12
9504: PPUSH
9505: LD_INT 4
9507: PPUSH
9508: LD_INT 0
9510: PUSH
9511: LD_INT 1
9513: PUSH
9514: LD_INT 2
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: LIST
9521: PUSH
9522: LD_OWVAR 67
9526: ARRAY
9527: PPUSH
9528: CALL 6250 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
9532: LD_INT 3
9534: PPUSH
9535: LD_INT 3
9537: PPUSH
9538: LD_INT 1
9540: PPUSH
9541: LD_EXP 13
9545: PPUSH
9546: LD_EXP 14
9550: PPUSH
9551: CALL_OW 12
9555: PPUSH
9556: LD_INT 2
9558: PPUSH
9559: LD_INT 1
9561: PUSH
9562: LD_INT 2
9564: PUSH
9565: LD_INT 2
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: LD_OWVAR 67
9577: ARRAY
9578: PPUSH
9579: CALL 6250 0 6
// for i in UnitsInside ( arm1 ) do
9583: LD_ADDR_VAR 0 2
9587: PUSH
9588: LD_INT 2
9590: PPUSH
9591: CALL_OW 313
9595: PUSH
9596: FOR_IN
9597: IFFALSE 9617
// northBaseDefenders = northBaseDefenders ^ i ;
9599: LD_ADDR_EXP 23
9603: PUSH
9604: LD_EXP 23
9608: PUSH
9609: LD_VAR 0 2
9613: ADD
9614: ST_TO_ADDR
9615: GO 9596
9617: POP
9618: POP
// end ;
9619: LD_VAR 0 1
9623: RET
// export function PrepareOtherRussians ; var i , un ; begin
9624: LD_INT 0
9626: PPUSH
9627: PPUSH
9628: PPUSH
// for i = 1 to 2 do
9629: LD_ADDR_VAR 0 2
9633: PUSH
9634: DOUBLE
9635: LD_INT 1
9637: DEC
9638: ST_TO_ADDR
9639: LD_INT 2
9641: PUSH
9642: FOR_TO
9643: IFFALSE 9744
// begin uc_side = 3 ;
9645: LD_ADDR_OWVAR 20
9649: PUSH
9650: LD_INT 3
9652: ST_TO_ADDR
// uc_nation = 3 ;
9653: LD_ADDR_OWVAR 21
9657: PUSH
9658: LD_INT 3
9660: ST_TO_ADDR
// hc_gallery =  ;
9661: LD_ADDR_OWVAR 33
9665: PUSH
9666: LD_STRING 
9668: ST_TO_ADDR
// hc_name =  ;
9669: LD_ADDR_OWVAR 26
9673: PUSH
9674: LD_STRING 
9676: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
9677: LD_INT 0
9679: PPUSH
9680: LD_INT 1
9682: PPUSH
9683: LD_EXP 13
9687: PPUSH
9688: LD_EXP 14
9692: PPUSH
9693: CALL_OW 12
9697: PPUSH
9698: CALL_OW 380
// un = CreateHuman ;
9702: LD_ADDR_VAR 0 3
9706: PUSH
9707: CALL_OW 44
9711: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
9712: LD_VAR 0 3
9716: PPUSH
9717: LD_INT 9
9719: PPUSH
9720: LD_INT 0
9722: PPUSH
9723: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
9727: LD_VAR 0 3
9731: PPUSH
9732: LD_INT 80
9734: PPUSH
9735: LD_INT 73
9737: PPUSH
9738: CALL_OW 118
// end ;
9742: GO 9642
9744: POP
9745: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
9746: LD_ADDR_VAR 0 2
9750: PUSH
9751: LD_INT 22
9753: PUSH
9754: LD_INT 3
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PUSH
9761: LD_INT 30
9763: PUSH
9764: LD_INT 31
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PPUSH
9775: CALL_OW 69
9779: PUSH
9780: FOR_IN
9781: IFFALSE 9809
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
9783: LD_EXP 13
9787: PPUSH
9788: LD_EXP 14
9792: PPUSH
9793: CALL_OW 12
9797: PPUSH
9798: LD_VAR 0 2
9802: PPUSH
9803: CALL 6360 0 2
9807: GO 9780
9809: POP
9810: POP
// end ;
9811: LD_VAR 0 1
9815: RET
// export function PrepareCargoBays ; begin
9816: LD_INT 0
9818: PPUSH
// uc_side = 3 ;
9819: LD_ADDR_OWVAR 20
9823: PUSH
9824: LD_INT 3
9826: ST_TO_ADDR
// uc_nation = 3 ;
9827: LD_ADDR_OWVAR 21
9831: PUSH
9832: LD_INT 3
9834: ST_TO_ADDR
// vc_engine = 1 ;
9835: LD_ADDR_OWVAR 39
9839: PUSH
9840: LD_INT 1
9842: ST_TO_ADDR
// vc_control = 1 ;
9843: LD_ADDR_OWVAR 38
9847: PUSH
9848: LD_INT 1
9850: ST_TO_ADDR
// vc_weapon = 51 ;
9851: LD_ADDR_OWVAR 40
9855: PUSH
9856: LD_INT 51
9858: ST_TO_ADDR
// vc_chassis = 21 ;
9859: LD_ADDR_OWVAR 37
9863: PUSH
9864: LD_INT 21
9866: ST_TO_ADDR
// cargo1 = CreateVehicle ;
9867: LD_ADDR_EXP 15
9871: PUSH
9872: CALL_OW 45
9876: ST_TO_ADDR
// cargo2 = CreateVehicle ;
9877: LD_ADDR_EXP 16
9881: PUSH
9882: CALL_OW 45
9886: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
9887: LD_EXP 15
9891: PPUSH
9892: LD_INT 13
9894: PPUSH
9895: LD_INT 0
9897: PPUSH
9898: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
9902: LD_EXP 16
9906: PPUSH
9907: LD_INT 13
9909: PPUSH
9910: LD_INT 0
9912: PPUSH
9913: CALL_OW 49
// hc_gallery =  ;
9917: LD_ADDR_OWVAR 33
9921: PUSH
9922: LD_STRING 
9924: ST_TO_ADDR
// hc_name =  ;
9925: LD_ADDR_OWVAR 26
9929: PUSH
9930: LD_STRING 
9932: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
9933: LD_INT 1
9935: PPUSH
9936: LD_INT 3
9938: PPUSH
9939: LD_INT 1
9941: PPUSH
9942: LD_INT 2
9944: PPUSH
9945: CALL_OW 12
9949: PPUSH
9950: CALL_OW 380
// driver1 = CreateHuman ;
9954: LD_ADDR_EXP 17
9958: PUSH
9959: CALL_OW 44
9963: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
9964: LD_EXP 17
9968: PPUSH
9969: LD_EXP 15
9973: PPUSH
9974: CALL_OW 52
// hc_name = Nikolai Andreyev ;
9978: LD_ADDR_OWVAR 26
9982: PUSH
9983: LD_STRING Nikolai Andreyev
9985: ST_TO_ADDR
// driver2 = CreateHuman ;
9986: LD_ADDR_EXP 18
9990: PUSH
9991: CALL_OW 44
9995: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
9996: LD_EXP 18
10000: PPUSH
10001: LD_EXP 16
10005: PPUSH
10006: CALL_OW 52
// end ;
10010: LD_VAR 0 1
10014: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un ; begin
10015: LD_INT 0
10017: PPUSH
10018: PPUSH
10019: PPUSH
10020: PPUSH
// uc_side = 3 ;
10021: LD_ADDR_OWVAR 20
10025: PUSH
10026: LD_INT 3
10028: ST_TO_ADDR
// uc_nation = 3 ;
10029: LD_ADDR_OWVAR 21
10033: PUSH
10034: LD_INT 3
10036: ST_TO_ADDR
// for i := 1 to count do
10037: LD_ADDR_VAR 0 4
10041: PUSH
10042: DOUBLE
10043: LD_INT 1
10045: DEC
10046: ST_TO_ADDR
10047: LD_VAR 0 1
10051: PUSH
10052: FOR_TO
10053: IFFALSE 10213
// begin vc_engine = 1 ;
10055: LD_ADDR_OWVAR 39
10059: PUSH
10060: LD_INT 1
10062: ST_TO_ADDR
// vc_control = 1 ;
10063: LD_ADDR_OWVAR 38
10067: PUSH
10068: LD_INT 1
10070: ST_TO_ADDR
// vc_weapon = 46 ;
10071: LD_ADDR_OWVAR 40
10075: PUSH
10076: LD_INT 46
10078: ST_TO_ADDR
// vc_chassis = 21 ;
10079: LD_ADDR_OWVAR 37
10083: PUSH
10084: LD_INT 21
10086: ST_TO_ADDR
// veh = CreateVehicle ;
10087: LD_ADDR_VAR 0 5
10091: PUSH
10092: CALL_OW 45
10096: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10097: LD_VAR 0 5
10101: PPUSH
10102: LD_VAR 0 2
10106: PPUSH
10107: LD_INT 0
10109: PPUSH
10110: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
10114: LD_ADDR_EXP 25
10118: PUSH
10119: LD_EXP 25
10123: PUSH
10124: LD_VAR 0 5
10128: ADD
10129: ST_TO_ADDR
// hc_gallery =  ;
10130: LD_ADDR_OWVAR 33
10134: PUSH
10135: LD_STRING 
10137: ST_TO_ADDR
// hc_name =  ;
10138: LD_ADDR_OWVAR 26
10142: PUSH
10143: LD_STRING 
10145: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
10146: LD_INT 0
10148: PPUSH
10149: LD_INT 3
10151: PPUSH
10152: LD_EXP 13
10156: PPUSH
10157: LD_EXP 14
10161: PPUSH
10162: CALL_OW 12
10166: PPUSH
10167: CALL_OW 380
// un = CreateHuman ;
10171: LD_ADDR_VAR 0 6
10175: PUSH
10176: CALL_OW 44
10180: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10181: LD_VAR 0 6
10185: PPUSH
10186: LD_VAR 0 5
10190: PPUSH
10191: CALL_OW 52
// attackGroup = attackGroup ^ un ;
10195: LD_ADDR_EXP 25
10199: PUSH
10200: LD_EXP 25
10204: PUSH
10205: LD_VAR 0 6
10209: ADD
10210: ST_TO_ADDR
// end ;
10211: GO 10052
10213: POP
10214: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
10215: LD_INT 0
10217: PPUSH
10218: LD_INT 2
10220: PPUSH
10221: LD_EXP 13
10225: PPUSH
10226: LD_EXP 14
10230: PPUSH
10231: CALL_OW 12
10235: PPUSH
10236: CALL_OW 380
// un = CreateHuman ;
10240: LD_ADDR_VAR 0 6
10244: PUSH
10245: CALL_OW 44
10249: ST_TO_ADDR
// for i := 1 to count * 2 do
10250: LD_ADDR_VAR 0 4
10254: PUSH
10255: DOUBLE
10256: LD_INT 1
10258: DEC
10259: ST_TO_ADDR
10260: LD_VAR 0 1
10264: PUSH
10265: LD_INT 2
10267: MUL
10268: PUSH
10269: FOR_TO
10270: IFFALSE 10358
// begin hc_gallery =  ;
10272: LD_ADDR_OWVAR 33
10276: PUSH
10277: LD_STRING 
10279: ST_TO_ADDR
// hc_name =  ;
10280: LD_ADDR_OWVAR 26
10284: PUSH
10285: LD_STRING 
10287: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
10288: LD_INT 0
10290: PPUSH
10291: LD_INT 1
10293: PPUSH
10294: LD_EXP 13
10298: PPUSH
10299: LD_EXP 14
10303: PPUSH
10304: CALL_OW 12
10308: PPUSH
10309: CALL_OW 380
// un = CreateHuman ;
10313: LD_ADDR_VAR 0 6
10317: PUSH
10318: CALL_OW 44
10322: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10323: LD_VAR 0 6
10327: PPUSH
10328: LD_VAR 0 2
10332: PPUSH
10333: LD_INT 0
10335: PPUSH
10336: CALL_OW 49
// attackGroup = attackGroup ^ un ;
10340: LD_ADDR_EXP 25
10344: PUSH
10345: LD_EXP 25
10349: PUSH
10350: LD_VAR 0 6
10354: ADD
10355: ST_TO_ADDR
// end ;
10356: GO 10269
10358: POP
10359: POP
// for i in attackGroup do
10360: LD_ADDR_VAR 0 4
10364: PUSH
10365: LD_EXP 25
10369: PUSH
10370: FOR_IN
10371: IFFALSE 10390
// ComAgressiveMove ( i , 54 , 19 ) ;
10373: LD_VAR 0 4
10377: PPUSH
10378: LD_INT 54
10380: PPUSH
10381: LD_INT 19
10383: PPUSH
10384: CALL_OW 114
10388: GO 10370
10390: POP
10391: POP
// end ; end_of_file
10392: LD_VAR 0 3
10396: RET
// every 0 0$1 do
10397: GO 10399
10399: DISABLE
// begin enable ;
10400: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
10401: LD_INT 3
10403: PPUSH
10404: LD_INT 1
10406: PPUSH
10407: LD_INT 22
10409: PPUSH
10410: CALL 6496 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
10414: LD_INT 3
10416: PPUSH
10417: LD_INT 20
10419: PPUSH
10420: LD_INT 22
10422: PPUSH
10423: LD_INT 23
10425: PPUSH
10426: CALL 6742 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
10430: LD_INT 3
10432: PPUSH
10433: LD_INT 21
10435: PPUSH
10436: LD_INT 23
10438: PPUSH
10439: CALL 7021 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
10443: LD_INT 22
10445: PPUSH
10446: LD_INT 1
10448: PPUSH
10449: LD_EXP 23
10453: PPUSH
10454: LD_INT 2
10456: PPUSH
10457: CALL 7493 0 4
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
10461: LD_INT 23
10463: PPUSH
10464: LD_INT 1
10466: PPUSH
10467: LD_EXP 24
10471: PPUSH
10472: LD_INT 33
10474: PPUSH
10475: CALL 7493 0 4
// end ; end_of_file
10479: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 then
10480: LD_VAR 0 1
10484: PPUSH
10485: CALL_OW 255
10489: PUSH
10490: LD_INT 1
10492: EQUAL
10493: IFFALSE 10509
// deadsCounter = deadsCounter + 1 ;
10495: LD_ADDR_EXP 27
10499: PUSH
10500: LD_EXP 27
10504: PUSH
10505: LD_INT 1
10507: PLUS
10508: ST_TO_ADDR
// end ; end_of_file
10509: PPOPN 1
10511: END
// every 0 0$1 trigger IsDead ( JMM ) do
10512: LD_EXP 1
10516: PPUSH
10517: CALL_OW 301
10521: IFFALSE 10533
10523: GO 10525
10525: DISABLE
// YouLost ( JMM ) ;
10526: LD_STRING JMM
10528: PPUSH
10529: CALL_OW 104
10533: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
10534: LD_INT 1
10536: PPUSH
10537: CALL_OW 301
10541: PUSH
10542: LD_INT 10
10544: PPUSH
10545: CALL_OW 301
10549: OR
10550: IFFALSE 10562
10552: GO 10554
10554: DISABLE
// YouLost ( DepotDestroyed ) ;
10555: LD_STRING DepotDestroyed
10557: PPUSH
10558: CALL_OW 104
10562: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
10563: LD_INT 22
10565: PUSH
10566: LD_INT 1
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 21
10575: PUSH
10576: LD_INT 1
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 25
10585: PUSH
10586: LD_INT 2
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: LIST
10597: PPUSH
10598: CALL_OW 69
10602: PUSH
10603: LD_INT 0
10605: EQUAL
10606: PUSH
10607: LD_INT 22
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 21
10619: PUSH
10620: LD_INT 1
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 25
10629: PUSH
10630: LD_INT 2
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: LIST
10641: PPUSH
10642: CALL_OW 69
10646: PUSH
10647: LD_INT 0
10649: EQUAL
10650: AND
10651: PUSH
10652: LD_INT 1
10654: PPUSH
10655: CALL_OW 255
10659: PUSH
10660: LD_INT 3
10662: EQUAL
10663: AND
10664: PUSH
10665: LD_INT 10
10667: PPUSH
10668: CALL_OW 255
10672: PUSH
10673: LD_INT 3
10675: EQUAL
10676: AND
10677: IFFALSE 10689
10679: GO 10681
10681: DISABLE
// YouLost ( Engineer ) ;
10682: LD_STRING Engineer
10684: PPUSH
10685: CALL_OW 104
10689: END
