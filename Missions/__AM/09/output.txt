// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 25 0 0
// PrepareRussian ;
  12: CALL 54 0 0
// PrepareAmerican ;
  16: CALL 759 0 0
// Action ;
  20: CALL 1267 0 0
// end ;
  24: END
// export debug ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// if debug then
  36: LD_EXP 1
  40: IFFALSE 49
// FogOff ( 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: CALL_OW 344
// end ; end_of_file
  49: LD_VAR 0 1
  53: RET
// export Yakotich , Platonov , Rusole ; export function PrepareRussian ; var i , un , d , rusol ; begin
  54: LD_INT 0
  56: PPUSH
  57: PPUSH
  58: PPUSH
  59: PPUSH
  60: PPUSH
// uc_side := 3 ;
  61: LD_ADDR_OWVAR 20
  65: PUSH
  66: LD_INT 3
  68: ST_TO_ADDR
// uc_nation := 3 ;
  69: LD_ADDR_OWVAR 21
  73: PUSH
  74: LD_INT 3
  76: ST_TO_ADDR
// SetBName ( ru_dep , ovsyenko ) ;
  77: LD_INT 74
  79: PPUSH
  80: LD_STRING ovsyenko
  82: PPUSH
  83: CALL_OW 500
// SetResourceType ( GetBase ( ru_dep ) , 3 , 200 ) ;
  87: LD_INT 74
  89: PPUSH
  90: CALL_OW 274
  94: PPUSH
  95: LD_INT 3
  97: PPUSH
  98: LD_INT 200
 100: PPUSH
 101: CALL_OW 277
// Platonov := PrepareUnit ( Platonov , false ) ;
 105: LD_ADDR_EXP 3
 109: PUSH
 110: LD_STRING Platonov
 112: PPUSH
 113: LD_INT 0
 115: PPUSH
 116: CALL 1206 0 2
 120: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
 121: LD_ADDR_VAR 0 2
 125: PUSH
 126: LD_INT 22
 128: PUSH
 129: LD_INT 3
 131: PUSH
 132: EMPTY
 133: LIST
 134: LIST
 135: PUSH
 136: LD_INT 30
 138: PUSH
 139: LD_INT 31
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PPUSH
 150: CALL_OW 69
 154: PUSH
 155: FOR_IN
 156: IFFALSE 272
// begin PrepareHuman ( false , 1 , 0 ) ;
 158: LD_INT 0
 160: PPUSH
 161: LD_INT 1
 163: PPUSH
 164: LD_INT 0
 166: PPUSH
 167: CALL_OW 380
// un := CreateHuman ;
 171: LD_ADDR_VAR 0 3
 175: PUSH
 176: CALL_OW 44
 180: ST_TO_ADDR
// SetLives ( un , 500 ) ;
 181: LD_VAR 0 3
 185: PPUSH
 186: LD_INT 500
 188: PPUSH
 189: CALL_OW 234
// if GetDir ( i ) > 3 then
 193: LD_VAR 0 2
 197: PPUSH
 198: CALL_OW 254
 202: PUSH
 203: LD_INT 3
 205: GREATER
 206: IFFALSE 233
// SetDir ( un , GetDir ( i ) - 3 ) else
 208: LD_VAR 0 3
 212: PPUSH
 213: LD_VAR 0 2
 217: PPUSH
 218: CALL_OW 254
 222: PUSH
 223: LD_INT 3
 225: MINUS
 226: PPUSH
 227: CALL_OW 233
 231: GO 256
// SetDir ( un , GetDir ( i ) + 3 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_VAR 0 2
 242: PPUSH
 243: CALL_OW 254
 247: PUSH
 248: LD_INT 3
 250: PLUS
 251: PPUSH
 252: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 256: LD_VAR 0 3
 260: PPUSH
 261: LD_VAR 0 2
 265: PPUSH
 266: CALL_OW 52
// end ;
 270: GO 155
 272: POP
 273: POP
// for i = 1 to 2 do
 274: LD_ADDR_VAR 0 2
 278: PUSH
 279: DOUBLE
 280: LD_INT 1
 282: DEC
 283: ST_TO_ADDR
 284: LD_INT 2
 286: PUSH
 287: FOR_TO
 288: IFFALSE 327
// begin PrepareHuman ( sex_male , 2 , 10 ) ;
 290: LD_INT 1
 292: PPUSH
 293: LD_INT 2
 295: PPUSH
 296: LD_INT 10
 298: PPUSH
 299: CALL_OW 380
// un := CreateHuman ;
 303: LD_ADDR_VAR 0 3
 307: PUSH
 308: CALL_OW 44
 312: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep ) ;
 313: LD_VAR 0 3
 317: PPUSH
 318: LD_INT 74
 320: PPUSH
 321: CALL_OW 52
// end ;
 325: GO 287
 327: POP
 328: POP
// for i = 1 to 3 do
 329: LD_ADDR_VAR 0 2
 333: PUSH
 334: DOUBLE
 335: LD_INT 1
 337: DEC
 338: ST_TO_ADDR
 339: LD_INT 3
 341: PUSH
 342: FOR_TO
 343: IFFALSE 398
// begin PrepareHuman ( sex_male , 1 , 7 ) ;
 345: LD_INT 1
 347: PPUSH
 348: LD_INT 1
 350: PPUSH
 351: LD_INT 7
 353: PPUSH
 354: CALL_OW 380
// rusol := CreateHuman ;
 358: LD_ADDR_VAR 0 5
 362: PUSH
 363: CALL_OW 44
 367: ST_TO_ADDR
// PlaceHumanInUnit ( rusol , ru_dep ) ;
 368: LD_VAR 0 5
 372: PPUSH
 373: LD_INT 74
 375: PPUSH
 376: CALL_OW 52
// rusole := rusole ^ rusol ;
 380: LD_ADDR_EXP 4
 384: PUSH
 385: LD_EXP 4
 389: PUSH
 390: LD_VAR 0 5
 394: ADD
 395: ST_TO_ADDR
// end ;
 396: GO 342
 398: POP
 399: POP
// Yakotich = PrepareUnit ( Yakotich , false ) ;
 400: LD_ADDR_EXP 2
 404: PUSH
 405: LD_STRING Yakotich
 407: PPUSH
 408: LD_INT 0
 410: PPUSH
 411: CALL 1206 0 2
 415: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , ru_dep ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 74
 423: PPUSH
 424: CALL_OW 52
// end ;
 428: LD_VAR 0 1
 432: RET
// export function Transport ( eng_list , cargo_list ) ; var i ; begin
 433: LD_INT 0
 435: PPUSH
 436: PPUSH
// for i = 1 to eng_list do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 1
 451: PUSH
 452: FOR_TO
 453: IFFALSE 578
// begin AddComTransport ( eng_list [ i ] , ru_dep , 3 ) ;
 455: LD_VAR 0 1
 459: PUSH
 460: LD_VAR 0 4
 464: ARRAY
 465: PPUSH
 466: LD_INT 74
 468: PPUSH
 469: LD_INT 3
 471: PPUSH
 472: CALL_OW 211
// AddComWait ( eng_list [ i ] , 0 0$1 ) ;
 476: LD_VAR 0 1
 480: PUSH
 481: LD_VAR 0 4
 485: ARRAY
 486: PPUSH
 487: LD_INT 35
 489: PPUSH
 490: CALL_OW 202
// AddTaskList ( eng_list [ i ] , [ [ 5 , GetX ( cargo_list [ i ] ) , GetY ( cargo_list [ i ] ) , cargo_list [ i ] , 0 , 0 , 0 ] ] ) ;
 494: LD_VAR 0 1
 498: PUSH
 499: LD_VAR 0 4
 503: ARRAY
 504: PPUSH
 505: LD_STRING 5
 507: PUSH
 508: LD_VAR 0 2
 512: PUSH
 513: LD_VAR 0 4
 517: ARRAY
 518: PPUSH
 519: CALL_OW 250
 523: PUSH
 524: LD_VAR 0 2
 528: PUSH
 529: LD_VAR 0 4
 533: ARRAY
 534: PPUSH
 535: CALL_OW 251
 539: PUSH
 540: LD_VAR 0 2
 544: PUSH
 545: LD_VAR 0 4
 549: ARRAY
 550: PUSH
 551: LD_INT 0
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: LD_INT 0
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: LIST
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: PPUSH
 572: CALL_OW 447
// end ;
 576: GO 452
 578: POP
 579: POP
// end ;
 580: LD_VAR 0 3
 584: RET
// export Posily ; export function RusPosily ; var i , rusol ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
 589: PPUSH
// uc_side := 3 ;
 590: LD_ADDR_OWVAR 20
 594: PUSH
 595: LD_INT 3
 597: ST_TO_ADDR
// uc_nation := 3 ;
 598: LD_ADDR_OWVAR 21
 602: PUSH
 603: LD_INT 3
 605: ST_TO_ADDR
// for i = 1 to 5 do
 606: LD_ADDR_VAR 0 2
 610: PUSH
 611: DOUBLE
 612: LD_INT 1
 614: DEC
 615: ST_TO_ADDR
 616: LD_INT 5
 618: PUSH
 619: FOR_TO
 620: IFFALSE 678
// begin PrepareHuman ( false , 1 , 7 ) ;
 622: LD_INT 0
 624: PPUSH
 625: LD_INT 1
 627: PPUSH
 628: LD_INT 7
 630: PPUSH
 631: CALL_OW 380
// rusol := CreateHuman ;
 635: LD_ADDR_VAR 0 3
 639: PUSH
 640: CALL_OW 44
 644: ST_TO_ADDR
// PlaceUnitArea ( rusol , rus_posily , false ) ;
 645: LD_VAR 0 3
 649: PPUSH
 650: LD_INT 2
 652: PPUSH
 653: LD_INT 0
 655: PPUSH
 656: CALL_OW 49
// posily := posily ^ rusol ;
 660: LD_ADDR_EXP 5
 664: PUSH
 665: LD_EXP 5
 669: PUSH
 670: LD_VAR 0 3
 674: ADD
 675: ST_TO_ADDR
// end ;
 676: GO 619
 678: POP
 679: POP
// for i = 1 to 3 do
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: DOUBLE
 686: LD_INT 1
 688: DEC
 689: ST_TO_ADDR
 690: LD_INT 3
 692: PUSH
 693: FOR_TO
 694: IFFALSE 752
// begin PrepareHuman ( false , 2 , 7 ) ;
 696: LD_INT 0
 698: PPUSH
 699: LD_INT 2
 701: PPUSH
 702: LD_INT 7
 704: PPUSH
 705: CALL_OW 380
// rusol := CreateHuman ;
 709: LD_ADDR_VAR 0 3
 713: PUSH
 714: CALL_OW 44
 718: ST_TO_ADDR
// PlaceUnitArea ( rusol , rus_posily , false ) ;
 719: LD_VAR 0 3
 723: PPUSH
 724: LD_INT 2
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 49
// posily := posily ^ rusol ;
 734: LD_ADDR_EXP 5
 738: PUSH
 739: LD_EXP 5
 743: PUSH
 744: LD_VAR 0 3
 748: ADD
 749: ST_TO_ADDR
// end ;
 750: GO 693
 752: POP
 753: POP
// end ; end_of_file
 754: LD_VAR 0 1
 758: RET
// export Sikorski , Bobby , Cyrus , Gary ; export function PrepareAmerican ; var tmp , i ; begin
 759: LD_INT 0
 761: PPUSH
 762: PPUSH
 763: PPUSH
// uc_side := 4 ;
 764: LD_ADDR_OWVAR 20
 768: PUSH
 769: LD_INT 4
 771: ST_TO_ADDR
// uc_nation := 1 ;
 772: LD_ADDR_OWVAR 21
 776: PUSH
 777: LD_INT 1
 779: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
 780: LD_ADDR_EXP 6
 784: PUSH
 785: LD_STRING Sikorski
 787: PPUSH
 788: LD_INT 0
 790: PPUSH
 791: CALL 1206 0 2
 795: ST_TO_ADDR
// PlaceUnitXY ( Sikorski , 98 , 97 , false ) ;
 796: LD_EXP 6
 800: PPUSH
 801: LD_INT 98
 803: PPUSH
 804: LD_INT 97
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 48
// Gary := PrepareUnit ( Gary , false ) ;
 814: LD_ADDR_EXP 9
 818: PUSH
 819: LD_STRING Gary
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL 1206 0 2
 829: ST_TO_ADDR
// tmp := Gary ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_EXP 9
 839: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true ) ;
 840: LD_ADDR_EXP 7
 844: PUSH
 845: LD_STRING Bobby
 847: PPUSH
 848: LD_INT 1
 850: PPUSH
 851: CALL 1206 0 2
 855: ST_TO_ADDR
// if Bobby then
 856: LD_EXP 7
 860: IFFALSE 878
// tmp := tmp ^ Bobby ;
 862: LD_ADDR_VAR 0 2
 866: PUSH
 867: LD_VAR 0 2
 871: PUSH
 872: LD_EXP 7
 876: ADD
 877: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true ) ;
 878: LD_ADDR_EXP 8
 882: PUSH
 883: LD_STRING Cyrus
 885: PPUSH
 886: LD_INT 1
 888: PPUSH
 889: CALL 1206 0 2
 893: ST_TO_ADDR
// if Cyrus then
 894: LD_EXP 8
 898: IFFALSE 916
// tmp := tmp ^ Cyrus ;
 900: LD_ADDR_VAR 0 2
 904: PUSH
 905: LD_VAR 0 2
 909: PUSH
 910: LD_EXP 8
 914: ADD
 915: ST_TO_ADDR
// tmp := tmp ^ CreateCharacterSet ( 03_others ) ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_VAR 0 2
 925: PUSH
 926: LD_STRING 03_others
 928: PPUSH
 929: CALL_OW 31
 933: ADD
 934: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_sex , sex_female ] ) = 0 then
 935: LD_VAR 0 2
 939: PPUSH
 940: LD_INT 26
 942: PUSH
 943: LD_INT 2
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PPUSH
 950: CALL_OW 72
 954: PUSH
 955: LD_INT 0
 957: EQUAL
 958: IFFALSE 1030
// begin PrepareHuman ( sex_female , 1 , 5 ) ;
 960: LD_INT 2
 962: PPUSH
 963: LD_INT 1
 965: PPUSH
 966: LD_INT 5
 968: PPUSH
 969: CALL_OW 380
// hc_name := Julia  & profile_name & s ;
 973: LD_ADDR_OWVAR 26
 977: PUSH
 978: LD_STRING Julia 
 980: PUSH
 981: LD_OWVAR 78
 985: STR
 986: PUSH
 987: LD_STRING s
 989: STR
 990: ST_TO_ADDR
// hc_gallery :=  ;
 991: LD_ADDR_OWVAR 33
 995: PUSH
 996: LD_STRING 
 998: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
 999: LD_ADDR_OWVAR 29
1003: PUSH
1004: LD_INT 12
1006: PUSH
1007: LD_INT 12
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: ST_TO_ADDR
// tmp := tmp ^ CreateHuman ;
1014: LD_ADDR_VAR 0 2
1018: PUSH
1019: LD_VAR 0 2
1023: PUSH
1024: CALL_OW 44
1028: ADD
1029: ST_TO_ADDR
// end ; if tmp < 9 then
1030: LD_VAR 0 2
1034: PUSH
1035: LD_INT 9
1037: LESS
1038: IFFALSE 1135
// begin InitHc ;
1040: CALL_OW 19
// for i = tmp to 9 do
1044: LD_ADDR_VAR 0 3
1048: PUSH
1049: DOUBLE
1050: LD_VAR 0 2
1054: DEC
1055: ST_TO_ADDR
1056: LD_INT 9
1058: PUSH
1059: FOR_TO
1060: IFFALSE 1133
// begin if UnitFilter ( tmp , [ f_class , 4 ] ) = 0 then
1062: LD_VAR 0 2
1066: PPUSH
1067: LD_INT 25
1069: PUSH
1070: LD_INT 4
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: PPUSH
1077: CALL_OW 72
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PrepareHuman ( sex_male , 4 , 5 ) else
1087: LD_INT 1
1089: PPUSH
1090: LD_INT 4
1092: PPUSH
1093: LD_INT 5
1095: PPUSH
1096: CALL_OW 380
1100: GO 1115
// PrepareHuman ( false , 1 , 5 ) ;
1102: LD_INT 0
1104: PPUSH
1105: LD_INT 1
1107: PPUSH
1108: LD_INT 5
1110: PPUSH
1111: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1115: LD_ADDR_VAR 0 2
1119: PUSH
1120: LD_VAR 0 2
1124: PUSH
1125: CALL_OW 44
1129: ADD
1130: ST_TO_ADDR
// end ;
1131: GO 1059
1133: POP
1134: POP
// end ; for i in tmp do
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: FOR_IN
1146: IFFALSE 1199
// begin if GetClass ( i ) in [ 2 , 3 ] then
1148: LD_VAR 0 3
1152: PPUSH
1153: CALL_OW 257
1157: PUSH
1158: LD_INT 2
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: IN
1168: IFFALSE 1182
// SetClass ( i , 1 ) ;
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: CALL_OW 336
// PlaceUnitArea ( i , area_start , false ) ;
1182: LD_VAR 0 3
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: LD_INT 0
1192: PPUSH
1193: CALL_OW 49
// end ;
1197: GO 1145
1199: POP
1200: POP
// end ; end_of_file
1201: LD_VAR 0 1
1205: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1206: LD_INT 0
1208: PPUSH
1209: PPUSH
// if exist_mode then
1210: LD_VAR 0 2
1214: IFFALSE 1237
// unit := CreateCharacter ( 03_ & ident ) else
1216: LD_ADDR_VAR 0 4
1220: PUSH
1221: LD_STRING 03_
1223: PUSH
1224: LD_VAR 0 1
1228: STR
1229: PPUSH
1230: CALL_OW 34
1234: ST_TO_ADDR
1235: GO 1252
// unit := NewCharacter ( ident ) ;
1237: LD_ADDR_VAR 0 4
1241: PUSH
1242: LD_VAR 0 1
1246: PPUSH
1247: CALL_OW 25
1251: ST_TO_ADDR
// result := unit ;
1252: LD_ADDR_VAR 0 3
1256: PUSH
1257: LD_VAR 0 4
1261: ST_TO_ADDR
// end ; end_of_file
1262: LD_VAR 0 3
1266: RET
// export function Action ; var x , y , i , tmp , t , engs , un , speaker ; begin
1267: LD_INT 0
1269: PPUSH
1270: PPUSH
1271: PPUSH
1272: PPUSH
1273: PPUSH
1274: PPUSH
1275: PPUSH
1276: PPUSH
1277: PPUSH
// ingame_video = true ;
1278: LD_ADDR_OWVAR 52
1282: PUSH
1283: LD_INT 1
1285: ST_TO_ADDR
// interface_hidden = true ;
1286: LD_ADDR_OWVAR 54
1290: PUSH
1291: LD_INT 1
1293: ST_TO_ADDR
// x := 101 ;
1294: LD_ADDR_VAR 0 2
1298: PUSH
1299: LD_INT 101
1301: ST_TO_ADDR
// y := 116 ;
1302: LD_ADDR_VAR 0 3
1306: PUSH
1307: LD_INT 116
1309: ST_TO_ADDR
// PlaceSeeing ( x , y , 1 , - 30 ) ;
1310: LD_VAR 0 2
1314: PPUSH
1315: LD_VAR 0 3
1319: PPUSH
1320: LD_INT 1
1322: PPUSH
1323: LD_INT 30
1325: NEG
1326: PPUSH
1327: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
1331: LD_VAR 0 2
1335: PPUSH
1336: LD_VAR 0 3
1340: PPUSH
1341: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff Sikorski ;
1345: LD_ADDR_VAR 0 5
1349: PUSH
1350: LD_INT 22
1352: PUSH
1353: LD_INT 4
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: PUSH
1360: LD_INT 21
1362: PUSH
1363: LD_INT 1
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: PUSH
1370: EMPTY
1371: LIST
1372: LIST
1373: PPUSH
1374: CALL_OW 69
1378: PUSH
1379: LD_EXP 6
1383: DIFF
1384: ST_TO_ADDR
// AddComTurnXY ( tmp , 111 , 125 ) ;
1385: LD_VAR 0 5
1389: PPUSH
1390: LD_INT 111
1392: PPUSH
1393: LD_INT 125
1395: PPUSH
1396: CALL_OW 178
// wait ( 0 0$02 ) ;
1400: LD_INT 70
1402: PPUSH
1403: CALL_OW 67
// AddComMoveXY ( Sikorski , 105 , 111 ) ;
1407: LD_EXP 6
1411: PPUSH
1412: LD_INT 105
1414: PPUSH
1415: LD_INT 111
1417: PPUSH
1418: CALL_OW 171
// ComAgressiveMove ( tmp , 108 , 117 ) ;
1422: LD_VAR 0 5
1426: PPUSH
1427: LD_INT 108
1429: PPUSH
1430: LD_INT 117
1432: PPUSH
1433: CALL_OW 114
// Say ( Sikorski , D1-Sik-2 ) ;
1437: LD_EXP 6
1441: PPUSH
1442: LD_STRING D1-Sik-2
1444: PPUSH
1445: CALL_OW 88
// music_class := 1 ;
1449: LD_ADDR_OWVAR 72
1453: PUSH
1454: LD_INT 1
1456: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
1457: LD_INT 35
1459: PPUSH
1460: CALL_OW 67
// until See ( 3 , Sikorski ) ;
1464: LD_INT 3
1466: PPUSH
1467: LD_EXP 6
1471: PPUSH
1472: CALL_OW 292
1476: IFFALSE 1457
// un := UnitsInside ( NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_breastwork ] ) , Sikorski ) ) [ 1 ] ;
1478: LD_ADDR_VAR 0 8
1482: PUSH
1483: LD_INT 30
1485: PUSH
1486: LD_INT 31
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PPUSH
1493: CALL_OW 69
1497: PPUSH
1498: LD_EXP 6
1502: PPUSH
1503: CALL_OW 74
1507: PPUSH
1508: CALL_OW 313
1512: PUSH
1513: LD_INT 1
1515: ARRAY
1516: ST_TO_ADDR
// AddComAttackUnit ( un , Sikorski ) ;
1517: LD_VAR 0 8
1521: PPUSH
1522: LD_EXP 6
1526: PPUSH
1527: CALL_OW 175
// wait ( 0 0$4 ) ;
1531: LD_INT 140
1533: PPUSH
1534: CALL_OW 67
// MineExplosion ( 111 , 116 , 1 ) ;
1538: LD_INT 111
1540: PPUSH
1541: LD_INT 116
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL_OW 453
// repeat wait ( 0 0$01 ) ;
1551: LD_INT 35
1553: PPUSH
1554: CALL_OW 67
// until IsDying ( un ) ;
1558: LD_VAR 0 8
1562: PPUSH
1563: CALL_OW 303
1567: IFFALSE 1551
// DoNotAttack ( 3 , Sikorski ) ;
1569: LD_INT 3
1571: PPUSH
1572: LD_EXP 6
1576: PPUSH
1577: CALL_OW 471
// ComExitBuilding ( rusole ) ;
1581: LD_EXP 4
1585: PPUSH
1586: CALL_OW 122
// AddComAgressiveMove ( rusole , 106 , 114 ) ;
1590: LD_EXP 4
1594: PPUSH
1595: LD_INT 106
1597: PPUSH
1598: LD_INT 114
1600: PPUSH
1601: CALL_OW 174
// Say ( Yakotich , D1-Rus1-1 ) ;
1605: LD_EXP 2
1609: PPUSH
1610: LD_STRING D1-Rus1-1
1612: PPUSH
1613: CALL_OW 88
// AddComMoveXY ( Sikorski , 110 , 120 ) ;
1617: LD_EXP 6
1621: PPUSH
1622: LD_INT 110
1624: PPUSH
1625: LD_INT 120
1627: PPUSH
1628: CALL_OW 171
// ComMoveXY ( tmp , 109 , 119 ) ;
1632: LD_VAR 0 5
1636: PPUSH
1637: LD_INT 109
1639: PPUSH
1640: LD_INT 119
1642: PPUSH
1643: CALL_OW 111
// AddComTurnXY ( tmp , 111 , 125 ) ;
1647: LD_VAR 0 5
1651: PPUSH
1652: LD_INT 111
1654: PPUSH
1655: LD_INT 125
1657: PPUSH
1658: CALL_OW 178
// ComExitBuilding ( Yakotich ) ;
1662: LD_EXP 2
1666: PPUSH
1667: CALL_OW 122
// AddComAttackUnit ( Yakotich , Sikorski ) ;
1671: LD_EXP 2
1675: PPUSH
1676: LD_EXP 6
1680: PPUSH
1681: CALL_OW 175
// Say ( Sikorski , D1-Sik-1 ) ;
1685: LD_EXP 6
1689: PPUSH
1690: LD_STRING D1-Sik-1
1692: PPUSH
1693: CALL_OW 88
// SayEffect ( D1-smrtsikora ) ;
1697: LD_STRING D1-smrtsikora
1699: PPUSH
1700: CALL_OW 96
// KillUnit ( Sikorski ) ;
1704: LD_EXP 6
1708: PPUSH
1709: CALL_OW 66
// wait ( 0 0$1 ) ;
1713: LD_INT 35
1715: PPUSH
1716: CALL_OW 67
// engs := FilterAllUnits ( [ f_class , 2 ] ) ;
1720: LD_ADDR_VAR 0 7
1724: PUSH
1725: LD_INT 25
1727: PUSH
1728: LD_INT 2
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: PPUSH
1735: CALL_OW 69
1739: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
1740: LD_VAR 0 7
1744: PPUSH
1745: CALL_OW 122
// for i = 1 to engs do
1749: LD_ADDR_VAR 0 4
1753: PUSH
1754: DOUBLE
1755: LD_INT 1
1757: DEC
1758: ST_TO_ADDR
1759: LD_VAR 0 7
1763: PUSH
1764: FOR_TO
1765: IFFALSE 1805
// AddComEnterUnit ( engs [ i ] , FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) [ i ] ) ;
1767: LD_VAR 0 7
1771: PUSH
1772: LD_VAR 0 4
1776: ARRAY
1777: PPUSH
1778: LD_INT 34
1780: PUSH
1781: LD_INT 51
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PPUSH
1788: CALL_OW 69
1792: PUSH
1793: LD_VAR 0 4
1797: ARRAY
1798: PPUSH
1799: CALL_OW 180
1803: GO 1764
1805: POP
1806: POP
// AddComMoveXY ( engs , 148 , 208 ) ;
1807: LD_VAR 0 7
1811: PPUSH
1812: LD_INT 148
1814: PPUSH
1815: LD_INT 208
1817: PPUSH
1818: CALL_OW 171
// AddComMoveXY ( Yakotich , 148 , 208 ) ;
1822: LD_EXP 2
1826: PPUSH
1827: LD_INT 148
1829: PPUSH
1830: LD_INT 208
1832: PPUSH
1833: CALL_OW 171
// SetLives ( Yakotich , 1000 ) ;
1837: LD_EXP 2
1841: PPUSH
1842: LD_INT 1000
1844: PPUSH
1845: CALL_OW 234
// un := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1849: LD_ADDR_VAR 0 8
1853: PUSH
1854: LD_INT 22
1856: PUSH
1857: LD_INT 3
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: LD_INT 25
1866: PUSH
1867: LD_INT 1
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PPUSH
1878: CALL_OW 69
1882: ST_TO_ADDR
// ComExitBuilding ( un ) ;
1883: LD_VAR 0 8
1887: PPUSH
1888: CALL_OW 122
// AddComMoveXY ( un , 148 , 208 ) ;
1892: LD_VAR 0 8
1896: PPUSH
1897: LD_INT 148
1899: PPUSH
1900: LD_INT 208
1902: PPUSH
1903: CALL_OW 171
// Wait ( 5 ) ;
1907: LD_INT 5
1909: PPUSH
1910: CALL_OW 67
// Say ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_sex , sex_female ] ] ) [ 1 ] , D1-FSol-1 ) ;
1914: LD_INT 22
1916: PUSH
1917: LD_INT 4
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 26
1926: PUSH
1927: LD_INT 2
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PPUSH
1938: CALL_OW 69
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: LD_STRING D1-FSol-1
1949: PPUSH
1950: CALL_OW 88
// ComMoveXY ( tmp , 106 , 112 ) ;
1954: LD_VAR 0 5
1958: PPUSH
1959: LD_INT 106
1961: PPUSH
1962: LD_INT 112
1964: PPUSH
1965: CALL_OW 111
// AddComTurnXY ( tmp , 111 , 125 ) ;
1969: LD_VAR 0 5
1973: PPUSH
1974: LD_INT 111
1976: PPUSH
1977: LD_INT 125
1979: PPUSH
1980: CALL_OW 178
// wait ( 0 0$7 ) ;
1984: LD_INT 245
1986: PPUSH
1987: CALL_OW 67
// t := [ [ 104 , 117 ] , [ 115 , 123 ] , [ 114 , 126 ] , [ 111 , 122 ] , [ 112 , 126 ] , [ 117 , 130 ] , [ 106 , 127 ] , [ 111 , 117 ] , [ 98 , 119 ] , [ 116 , 131 ] , [ 109 , 129 ] , [ 100 , 113 ] ] ;
1991: LD_ADDR_VAR 0 6
1995: PUSH
1996: LD_INT 104
1998: PUSH
1999: LD_INT 117
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 115
2008: PUSH
2009: LD_INT 123
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 114
2018: PUSH
2019: LD_INT 126
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 111
2028: PUSH
2029: LD_INT 122
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 112
2038: PUSH
2039: LD_INT 126
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 117
2048: PUSH
2049: LD_INT 130
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: LD_INT 106
2058: PUSH
2059: LD_INT 127
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: PUSH
2066: LD_INT 111
2068: PUSH
2069: LD_INT 117
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: PUSH
2076: LD_INT 98
2078: PUSH
2079: LD_INT 119
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PUSH
2086: LD_INT 116
2088: PUSH
2089: LD_INT 131
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: PUSH
2096: LD_INT 109
2098: PUSH
2099: LD_INT 129
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: PUSH
2106: LD_INT 100
2108: PUSH
2109: LD_INT 113
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: ST_TO_ADDR
// for i in t do
2130: LD_ADDR_VAR 0 4
2134: PUSH
2135: LD_VAR 0 6
2139: PUSH
2140: FOR_IN
2141: IFFALSE 2177
// begin wait ( 0 0$0.3 ) ;
2143: LD_INT 10
2145: PPUSH
2146: CALL_OW 67
// MineExplosion ( i [ 1 ] , i [ 2 ] , 1 ) ;
2150: LD_VAR 0 4
2154: PUSH
2155: LD_INT 1
2157: ARRAY
2158: PPUSH
2159: LD_VAR 0 4
2163: PUSH
2164: LD_INT 2
2166: ARRAY
2167: PPUSH
2168: LD_INT 1
2170: PPUSH
2171: CALL_OW 453
// end ;
2175: GO 2140
2177: POP
2178: POP
// ComMoveXY ( tmp , 109 , 124 ) ;
2179: LD_VAR 0 5
2183: PPUSH
2184: LD_INT 109
2186: PPUSH
2187: LD_INT 124
2189: PPUSH
2190: CALL_OW 111
// music_class := 0 ;
2194: LD_ADDR_OWVAR 72
2198: PUSH
2199: LD_INT 0
2201: ST_TO_ADDR
// wait ( 0 0$4 ) ;
2202: LD_INT 140
2204: PPUSH
2205: CALL_OW 67
// speaker = FilterAllUnits ( [ [ f_side , 4 ] , [ f_sex , sex_male ] ] ) diff [ Gary , Bobby , Cyrus ] ;
2209: LD_ADDR_VAR 0 9
2213: PUSH
2214: LD_INT 22
2216: PUSH
2217: LD_INT 4
2219: PUSH
2220: EMPTY
2221: LIST
2222: LIST
2223: PUSH
2224: LD_INT 26
2226: PUSH
2227: LD_INT 1
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PPUSH
2238: CALL_OW 69
2242: PUSH
2243: LD_EXP 9
2247: PUSH
2248: LD_EXP 7
2252: PUSH
2253: LD_EXP 8
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: DIFF
2263: ST_TO_ADDR
// Say ( speaker [ 1 ] , D1-Sol-1 ) ;
2264: LD_VAR 0 9
2268: PUSH
2269: LD_INT 1
2271: ARRAY
2272: PPUSH
2273: LD_STRING D1-Sol-1
2275: PPUSH
2276: CALL_OW 88
// wait ( 0 0$2 ) ;
2280: LD_INT 70
2282: PPUSH
2283: CALL_OW 67
// PlaceSeeing ( 148 , 208 , 1 , - 30 ) ;
2287: LD_INT 148
2289: PPUSH
2290: LD_INT 208
2292: PPUSH
2293: LD_INT 1
2295: PPUSH
2296: LD_INT 30
2298: NEG
2299: PPUSH
2300: CALL_OW 330
// wait ( 0 0$1 ) ;
2304: LD_INT 35
2306: PPUSH
2307: CALL_OW 67
// Say ( Yakotich , D1a-Rus1-1 ) ;
2311: LD_EXP 2
2315: PPUSH
2316: LD_STRING D1a-Rus1-1
2318: PPUSH
2319: CALL_OW 88
// RusPosily ;
2323: CALL 585 0 0
// ComMoveXY ( posily , 148 , 208 ) ;
2327: LD_EXP 5
2331: PPUSH
2332: LD_INT 148
2334: PPUSH
2335: LD_INT 208
2337: PPUSH
2338: CALL_OW 111
// CenterOnXY ( 148 , 208 ) ;
2342: LD_INT 148
2344: PPUSH
2345: LD_INT 208
2347: PPUSH
2348: CALL_OW 84
// SayRadio ( Platonov , D1a-Pla-1 ) ;
2352: LD_EXP 3
2356: PPUSH
2357: LD_STRING D1a-Pla-1
2359: PPUSH
2360: CALL_OW 94
// SayRadio ( Platonov , D1a-Pla-1a ) ;
2364: LD_EXP 3
2368: PPUSH
2369: LD_STRING D1a-Pla-1a
2371: PPUSH
2372: CALL_OW 94
// SayRadio ( Platonov , D1a-Pla-1b ) ;
2376: LD_EXP 3
2380: PPUSH
2381: LD_STRING D1a-Pla-1b
2383: PPUSH
2384: CALL_OW 94
// Say ( Yakotich , D1a-Rus1-2 ) ;
2388: LD_EXP 2
2392: PPUSH
2393: LD_STRING D1a-Rus1-2
2395: PPUSH
2396: CALL_OW 88
// wait ( 0 0$1 ) ;
2400: LD_INT 35
2402: PPUSH
2403: CALL_OW 67
// SaveCharacters ( tmp diff [ Gary , Bobby , Cyrus ] , 09_prev_squad ) ;
2407: LD_VAR 0 5
2411: PUSH
2412: LD_EXP 9
2416: PUSH
2417: LD_EXP 7
2421: PUSH
2422: LD_EXP 8
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: DIFF
2432: PPUSH
2433: LD_STRING 09_prev_squad
2435: PPUSH
2436: CALL_OW 38
// tmp := [ ] ;
2440: LD_ADDR_VAR 0 5
2444: PUSH
2445: EMPTY
2446: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2447: LD_ADDR_VAR 0 4
2451: PUSH
2452: LD_INT 21
2454: PUSH
2455: LD_INT 3
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PPUSH
2462: CALL_OW 69
2466: PUSH
2467: FOR_IN
2468: IFFALSE 2547
// tmp := Insert ( tmp , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
2470: LD_ADDR_VAR 0 5
2474: PUSH
2475: LD_VAR 0 5
2479: PPUSH
2480: LD_INT 1
2482: PPUSH
2483: LD_VAR 0 4
2487: PPUSH
2488: CALL_OW 266
2492: PUSH
2493: LD_VAR 0 4
2497: PPUSH
2498: CALL_OW 250
2502: PUSH
2503: LD_VAR 0 4
2507: PPUSH
2508: CALL_OW 251
2512: PUSH
2513: LD_VAR 0 4
2517: PPUSH
2518: CALL_OW 254
2522: PUSH
2523: LD_VAR 0 4
2527: PPUSH
2528: CALL_OW 256
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: PPUSH
2540: CALL_OW 2
2544: ST_TO_ADDR
2545: GO 2467
2547: POP
2548: POP
// SaveVariable ( tmp diff 0 , 09_ovsyenko_base ) ;
2549: LD_VAR 0 5
2553: PUSH
2554: LD_INT 0
2556: DIFF
2557: PPUSH
2558: LD_STRING 09_ovsyenko_base
2560: PPUSH
2561: CALL_OW 39
// ChangeMap ( 1 , __am/09_cont ) ;
2565: LD_INT 1
2567: PPUSH
2568: LD_STRING __am/09_cont
2570: PPUSH
2571: CALL_OW 340
// ingame_video = false ;
2575: LD_ADDR_OWVAR 52
2579: PUSH
2580: LD_INT 0
2582: ST_TO_ADDR
// interface_hidden = false ;
2583: LD_ADDR_OWVAR 54
2587: PUSH
2588: LD_INT 0
2590: ST_TO_ADDR
// end ;
2591: LD_VAR 0 1
2595: RET
// every 0 0$1 do var i , filter ;
2596: GO 2598
2598: DISABLE
2599: LD_INT 0
2601: PPUSH
2602: PPUSH
// begin enable ;
2603: ENABLE
// filter := FilterAllUnits ( [ f_side , 4 ] ) diff Sikorski ;
2604: LD_ADDR_VAR 0 2
2608: PUSH
2609: LD_INT 22
2611: PUSH
2612: LD_INT 4
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PPUSH
2619: CALL_OW 69
2623: PUSH
2624: LD_EXP 6
2628: DIFF
2629: ST_TO_ADDR
// for i in filter do
2630: LD_ADDR_VAR 0 1
2634: PUSH
2635: LD_VAR 0 2
2639: PUSH
2640: FOR_IN
2641: IFFALSE 2672
// if GetLives ( i ) < 1000 then
2643: LD_VAR 0 1
2647: PPUSH
2648: CALL_OW 256
2652: PUSH
2653: LD_INT 1000
2655: LESS
2656: IFFALSE 2670
// SetLives ( i , 1000 ) ;
2658: LD_VAR 0 1
2662: PPUSH
2663: LD_INT 1000
2665: PPUSH
2666: CALL_OW 234
2670: GO 2640
2672: POP
2673: POP
// end ;
2674: PPOPN 2
2676: END
