// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 25 0 0
// PrepareRussian ;
  12: CALL 54 0 0
// PrepareAmerican ;
  16: CALL 469 0 0
// Action ;
  20: CALL 977 0 0
// end ;
  24: END
// export debug ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// if debug then
  36: LD_EXP 1
  40: IFFALSE 49
// FogOff ( 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: CALL_OW 344
// end ; end_of_file
  49: LD_VAR 0 1
  53: RET
// export function PrepareRussian ; var i , un , d ; begin
  54: LD_INT 0
  56: PPUSH
  57: PPUSH
  58: PPUSH
  59: PPUSH
// uc_side := 3 ;
  60: LD_ADDR_OWVAR 20
  64: PUSH
  65: LD_INT 3
  67: ST_TO_ADDR
// uc_nation := 3 ;
  68: LD_ADDR_OWVAR 21
  72: PUSH
  73: LD_INT 3
  75: ST_TO_ADDR
// SetBName ( ru_dep , ovsyenko ) ;
  76: LD_INT 74
  78: PPUSH
  79: LD_STRING ovsyenko
  81: PPUSH
  82: CALL_OW 500
// SetResourceType ( GetBase ( ru_dep ) , 3 , 200 ) ;
  86: LD_INT 74
  88: PPUSH
  89: CALL_OW 274
  93: PPUSH
  94: LD_INT 3
  96: PPUSH
  97: LD_INT 200
  99: PPUSH
 100: CALL_OW 277
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
 104: LD_ADDR_VAR 0 2
 108: PUSH
 109: LD_INT 22
 111: PUSH
 112: LD_INT 3
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: LD_INT 30
 121: PUSH
 122: LD_INT 31
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: PUSH
 129: EMPTY
 130: LIST
 131: LIST
 132: PPUSH
 133: CALL_OW 69
 137: PUSH
 138: FOR_IN
 139: IFFALSE 255
// begin PrepareHuman ( false , 1 , 0 ) ;
 141: LD_INT 0
 143: PPUSH
 144: LD_INT 1
 146: PPUSH
 147: LD_INT 0
 149: PPUSH
 150: CALL_OW 380
// un := CreateHuman ;
 154: LD_ADDR_VAR 0 3
 158: PUSH
 159: CALL_OW 44
 163: ST_TO_ADDR
// SetLives ( un , 500 ) ;
 164: LD_VAR 0 3
 168: PPUSH
 169: LD_INT 500
 171: PPUSH
 172: CALL_OW 234
// if GetDir ( i ) > 3 then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 254
 185: PUSH
 186: LD_INT 3
 188: GREATER
 189: IFFALSE 216
// SetDir ( un , GetDir ( i ) - 3 ) else
 191: LD_VAR 0 3
 195: PPUSH
 196: LD_VAR 0 2
 200: PPUSH
 201: CALL_OW 254
 205: PUSH
 206: LD_INT 3
 208: MINUS
 209: PPUSH
 210: CALL_OW 233
 214: GO 239
// SetDir ( un , GetDir ( i ) + 3 ) ;
 216: LD_VAR 0 3
 220: PPUSH
 221: LD_VAR 0 2
 225: PPUSH
 226: CALL_OW 254
 230: PUSH
 231: LD_INT 3
 233: PLUS
 234: PPUSH
 235: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 239: LD_VAR 0 3
 243: PPUSH
 244: LD_VAR 0 2
 248: PPUSH
 249: CALL_OW 52
// end ;
 253: GO 138
 255: POP
 256: POP
// for i = 1 to 2 do
 257: LD_ADDR_VAR 0 2
 261: PUSH
 262: DOUBLE
 263: LD_INT 1
 265: DEC
 266: ST_TO_ADDR
 267: LD_INT 2
 269: PUSH
 270: FOR_TO
 271: IFFALSE 310
// begin PrepareHuman ( sex_male , 2 , 10 ) ;
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 2
 278: PPUSH
 279: LD_INT 10
 281: PPUSH
 282: CALL_OW 380
// un := CreateHuman ;
 286: LD_ADDR_VAR 0 3
 290: PUSH
 291: CALL_OW 44
 295: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep ) ;
 296: LD_VAR 0 3
 300: PPUSH
 301: LD_INT 74
 303: PPUSH
 304: CALL_OW 52
// end ;
 308: GO 270
 310: POP
 311: POP
// end ;
 312: LD_VAR 0 1
 316: RET
// export function Transport ( eng_list , cargo_list ) ; var i ; begin
 317: LD_INT 0
 319: PPUSH
 320: PPUSH
// for i = 1 to eng_list do
 321: LD_ADDR_VAR 0 4
 325: PUSH
 326: DOUBLE
 327: LD_INT 1
 329: DEC
 330: ST_TO_ADDR
 331: LD_VAR 0 1
 335: PUSH
 336: FOR_TO
 337: IFFALSE 462
// begin AddComTransport ( eng_list [ i ] , ru_dep , 3 ) ;
 339: LD_VAR 0 1
 343: PUSH
 344: LD_VAR 0 4
 348: ARRAY
 349: PPUSH
 350: LD_INT 74
 352: PPUSH
 353: LD_INT 3
 355: PPUSH
 356: CALL_OW 211
// AddComWait ( eng_list [ i ] , 0 0$1 ) ;
 360: LD_VAR 0 1
 364: PUSH
 365: LD_VAR 0 4
 369: ARRAY
 370: PPUSH
 371: LD_INT 35
 373: PPUSH
 374: CALL_OW 202
// AddTaskList ( eng_list [ i ] , [ [ 5 , GetX ( cargo_list [ i ] ) , GetY ( cargo_list [ i ] ) , cargo_list [ i ] , 0 , 0 , 0 ] ] ) ;
 378: LD_VAR 0 1
 382: PUSH
 383: LD_VAR 0 4
 387: ARRAY
 388: PPUSH
 389: LD_STRING 5
 391: PUSH
 392: LD_VAR 0 2
 396: PUSH
 397: LD_VAR 0 4
 401: ARRAY
 402: PPUSH
 403: CALL_OW 250
 407: PUSH
 408: LD_VAR 0 2
 412: PUSH
 413: LD_VAR 0 4
 417: ARRAY
 418: PPUSH
 419: CALL_OW 251
 423: PUSH
 424: LD_VAR 0 2
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PUSH
 435: LD_INT 0
 437: PUSH
 438: LD_INT 0
 440: PUSH
 441: LD_INT 0
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: EMPTY
 454: LIST
 455: PPUSH
 456: CALL_OW 447
// end ;
 460: GO 336
 462: POP
 463: POP
// end ; end_of_file
 464: LD_VAR 0 3
 468: RET
// export Sikorski , Bobby , Cyrus , Gary ; export function PrepareAmerican ; var tmp , i ; begin
 469: LD_INT 0
 471: PPUSH
 472: PPUSH
 473: PPUSH
// uc_side := 4 ;
 474: LD_ADDR_OWVAR 20
 478: PUSH
 479: LD_INT 4
 481: ST_TO_ADDR
// uc_nation := 1 ;
 482: LD_ADDR_OWVAR 21
 486: PUSH
 487: LD_INT 1
 489: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
 490: LD_ADDR_EXP 2
 494: PUSH
 495: LD_STRING Sikorski
 497: PPUSH
 498: LD_INT 0
 500: PPUSH
 501: CALL 916 0 2
 505: ST_TO_ADDR
// PlaceUnitXY ( Sikorski , 84 , 88 , false ) ;
 506: LD_EXP 2
 510: PPUSH
 511: LD_INT 84
 513: PPUSH
 514: LD_INT 88
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 48
// Gary := PrepareUnit ( Gary , false ) ;
 524: LD_ADDR_EXP 5
 528: PUSH
 529: LD_STRING Gary
 531: PPUSH
 532: LD_INT 0
 534: PPUSH
 535: CALL 916 0 2
 539: ST_TO_ADDR
// tmp := Gary ;
 540: LD_ADDR_VAR 0 2
 544: PUSH
 545: LD_EXP 5
 549: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true ) ;
 550: LD_ADDR_EXP 3
 554: PUSH
 555: LD_STRING Bobby
 557: PPUSH
 558: LD_INT 1
 560: PPUSH
 561: CALL 916 0 2
 565: ST_TO_ADDR
// if Bobby then
 566: LD_EXP 3
 570: IFFALSE 588
// tmp := tmp ^ Bobby ;
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: LD_VAR 0 2
 581: PUSH
 582: LD_EXP 3
 586: ADD
 587: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true ) ;
 588: LD_ADDR_EXP 4
 592: PUSH
 593: LD_STRING Cyrus
 595: PPUSH
 596: LD_INT 1
 598: PPUSH
 599: CALL 916 0 2
 603: ST_TO_ADDR
// if Cyrus then
 604: LD_EXP 4
 608: IFFALSE 626
// tmp := tmp ^ Cyrus ;
 610: LD_ADDR_VAR 0 2
 614: PUSH
 615: LD_VAR 0 2
 619: PUSH
 620: LD_EXP 4
 624: ADD
 625: ST_TO_ADDR
// tmp := tmp ^ CreateCharacterSet ( 03_others ) ;
 626: LD_ADDR_VAR 0 2
 630: PUSH
 631: LD_VAR 0 2
 635: PUSH
 636: LD_STRING 03_others
 638: PPUSH
 639: CALL_OW 31
 643: ADD
 644: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_sex , sex_female ] ) = 0 then
 645: LD_VAR 0 2
 649: PPUSH
 650: LD_INT 26
 652: PUSH
 653: LD_INT 2
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PPUSH
 660: CALL_OW 72
 664: PUSH
 665: LD_INT 0
 667: EQUAL
 668: IFFALSE 740
// begin PrepareHuman ( sex_female , 1 , 5 ) ;
 670: LD_INT 2
 672: PPUSH
 673: LD_INT 1
 675: PPUSH
 676: LD_INT 5
 678: PPUSH
 679: CALL_OW 380
// hc_name := Julia  & profile_name & s ;
 683: LD_ADDR_OWVAR 26
 687: PUSH
 688: LD_STRING Julia 
 690: PUSH
 691: LD_OWVAR 78
 695: STR
 696: PUSH
 697: LD_STRING s
 699: STR
 700: ST_TO_ADDR
// hc_gallery :=  ;
 701: LD_ADDR_OWVAR 33
 705: PUSH
 706: LD_STRING 
 708: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
 709: LD_ADDR_OWVAR 29
 713: PUSH
 714: LD_INT 12
 716: PUSH
 717: LD_INT 12
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: ST_TO_ADDR
// tmp := tmp ^ CreateHuman ;
 724: LD_ADDR_VAR 0 2
 728: PUSH
 729: LD_VAR 0 2
 733: PUSH
 734: CALL_OW 44
 738: ADD
 739: ST_TO_ADDR
// end ; if tmp < 9 then
 740: LD_VAR 0 2
 744: PUSH
 745: LD_INT 9
 747: LESS
 748: IFFALSE 845
// begin InitHc ;
 750: CALL_OW 19
// for i = tmp to 9 do
 754: LD_ADDR_VAR 0 3
 758: PUSH
 759: DOUBLE
 760: LD_VAR 0 2
 764: DEC
 765: ST_TO_ADDR
 766: LD_INT 9
 768: PUSH
 769: FOR_TO
 770: IFFALSE 843
// begin if UnitFilter ( tmp , [ f_class , 4 ] ) = 0 then
 772: LD_VAR 0 2
 776: PPUSH
 777: LD_INT 25
 779: PUSH
 780: LD_INT 4
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 72
 791: PUSH
 792: LD_INT 0
 794: EQUAL
 795: IFFALSE 812
// PrepareHuman ( sex_male , 4 , 5 ) else
 797: LD_INT 1
 799: PPUSH
 800: LD_INT 4
 802: PPUSH
 803: LD_INT 5
 805: PPUSH
 806: CALL_OW 380
 810: GO 825
// PrepareHuman ( false , 1 , 5 ) ;
 812: LD_INT 0
 814: PPUSH
 815: LD_INT 1
 817: PPUSH
 818: LD_INT 5
 820: PPUSH
 821: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
 825: LD_ADDR_VAR 0 2
 829: PUSH
 830: LD_VAR 0 2
 834: PUSH
 835: CALL_OW 44
 839: ADD
 840: ST_TO_ADDR
// end ;
 841: GO 769
 843: POP
 844: POP
// end ; for i in tmp do
 845: LD_ADDR_VAR 0 3
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: FOR_IN
 856: IFFALSE 909
// begin if GetClass ( i ) in [ 2 , 3 ] then
 858: LD_VAR 0 3
 862: PPUSH
 863: CALL_OW 257
 867: PUSH
 868: LD_INT 2
 870: PUSH
 871: LD_INT 3
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: IN
 878: IFFALSE 892
// SetClass ( i , 1 ) ;
 880: LD_VAR 0 3
 884: PPUSH
 885: LD_INT 1
 887: PPUSH
 888: CALL_OW 336
// PlaceUnitArea ( i , area_start , false ) ;
 892: LD_VAR 0 3
 896: PPUSH
 897: LD_INT 1
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: CALL_OW 49
// end ;
 907: GO 855
 909: POP
 910: POP
// end ; end_of_file
 911: LD_VAR 0 1
 915: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 916: LD_INT 0
 918: PPUSH
 919: PPUSH
// if exist_mode then
 920: LD_VAR 0 2
 924: IFFALSE 947
// unit := CreateCharacter ( 03_ & ident ) else
 926: LD_ADDR_VAR 0 4
 930: PUSH
 931: LD_STRING 03_
 933: PUSH
 934: LD_VAR 0 1
 938: STR
 939: PPUSH
 940: CALL_OW 34
 944: ST_TO_ADDR
 945: GO 962
// unit := NewCharacter ( ident ) ;
 947: LD_ADDR_VAR 0 4
 951: PUSH
 952: LD_VAR 0 1
 956: PPUSH
 957: CALL_OW 25
 961: ST_TO_ADDR
// result := unit ;
 962: LD_ADDR_VAR 0 3
 966: PUSH
 967: LD_VAR 0 4
 971: ST_TO_ADDR
// end ; end_of_file
 972: LD_VAR 0 3
 976: RET
// export function Action ; var x , y , i , tmp , t , engs , un ; begin
 977: LD_INT 0
 979: PPUSH
 980: PPUSH
 981: PPUSH
 982: PPUSH
 983: PPUSH
 984: PPUSH
 985: PPUSH
 986: PPUSH
// InGameOn ;
 987: CALL_OW 8
// x := 101 ;
 991: LD_ADDR_VAR 0 2
 995: PUSH
 996: LD_INT 101
 998: ST_TO_ADDR
// y := 116 ;
 999: LD_ADDR_VAR 0 3
1003: PUSH
1004: LD_INT 116
1006: ST_TO_ADDR
// PlaceSeeing ( x , y , 1 , - 30 ) ;
1007: LD_VAR 0 2
1011: PPUSH
1012: LD_VAR 0 3
1016: PPUSH
1017: LD_INT 1
1019: PPUSH
1020: LD_INT 30
1022: NEG
1023: PPUSH
1024: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
1028: LD_VAR 0 2
1032: PPUSH
1033: LD_VAR 0 3
1037: PPUSH
1038: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff Sikorski ;
1042: LD_ADDR_VAR 0 5
1046: PUSH
1047: LD_INT 22
1049: PUSH
1050: LD_INT 4
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PUSH
1057: LD_INT 21
1059: PUSH
1060: LD_INT 1
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PPUSH
1071: CALL_OW 69
1075: PUSH
1076: LD_EXP 2
1080: DIFF
1081: ST_TO_ADDR
// AddComMoveXY ( Sikorski , 109 , 120 ) ;
1082: LD_EXP 2
1086: PPUSH
1087: LD_INT 109
1089: PPUSH
1090: LD_INT 120
1092: PPUSH
1093: CALL_OW 171
// wait ( 0 0$02 ) ;
1097: LD_INT 70
1099: PPUSH
1100: CALL_OW 67
// AddComAgressiveMove ( tmp , 108 , 117 ) ;
1104: LD_VAR 0 5
1108: PPUSH
1109: LD_INT 108
1111: PPUSH
1112: LD_INT 117
1114: PPUSH
1115: CALL_OW 174
// repeat wait ( 0 0$01 ) ;
1119: LD_INT 35
1121: PPUSH
1122: CALL_OW 67
// until See ( 3 , Sikorski ) ;
1126: LD_INT 3
1128: PPUSH
1129: LD_EXP 2
1133: PPUSH
1134: CALL_OW 292
1138: IFFALSE 1119
// un := UnitsInside ( NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_breastwork ] ) , Sikorski ) ) [ 1 ] ;
1140: LD_ADDR_VAR 0 8
1144: PUSH
1145: LD_INT 30
1147: PUSH
1148: LD_INT 31
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL_OW 69
1159: PPUSH
1160: LD_EXP 2
1164: PPUSH
1165: CALL_OW 74
1169: PPUSH
1170: CALL_OW 313
1174: PUSH
1175: LD_INT 1
1177: ARRAY
1178: ST_TO_ADDR
// ComExitBuilding ( un ) ;
1179: LD_VAR 0 8
1183: PPUSH
1184: CALL_OW 122
// AddComAttackUnit ( un , Sikorski ) ;
1188: LD_VAR 0 8
1192: PPUSH
1193: LD_EXP 2
1197: PPUSH
1198: CALL_OW 175
// repeat wait ( 0 0$01 ) ;
1202: LD_INT 35
1204: PPUSH
1205: CALL_OW 67
// until IsDying ( un ) ;
1209: LD_VAR 0 8
1213: PPUSH
1214: CALL_OW 303
1218: IFFALSE 1202
// ComMoveXY ( tmp , 109 , 119 ) ;
1220: LD_VAR 0 5
1224: PPUSH
1225: LD_INT 109
1227: PPUSH
1228: LD_INT 119
1230: PPUSH
1231: CALL_OW 111
// AddComTurnXY ( tmp , 111 , 125 ) ;
1235: LD_VAR 0 5
1239: PPUSH
1240: LD_INT 111
1242: PPUSH
1243: LD_INT 125
1245: PPUSH
1246: CALL_OW 178
// Say ( Sikorski , D1-Sik-1 ) ;
1250: LD_EXP 2
1254: PPUSH
1255: LD_STRING D1-Sik-1
1257: PPUSH
1258: CALL_OW 88
// engs := FilterAllUnits ( [ f_class , 2 ] ) ;
1262: LD_ADDR_VAR 0 7
1266: PUSH
1267: LD_INT 25
1269: PUSH
1270: LD_INT 2
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PPUSH
1277: CALL_OW 69
1281: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
1282: LD_VAR 0 7
1286: PPUSH
1287: CALL_OW 122
// for i = 1 to engs do
1291: LD_ADDR_VAR 0 4
1295: PUSH
1296: DOUBLE
1297: LD_INT 1
1299: DEC
1300: ST_TO_ADDR
1301: LD_VAR 0 7
1305: PUSH
1306: FOR_TO
1307: IFFALSE 1347
// AddComEnterUnit ( engs [ i ] , FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) [ i ] ) ;
1309: LD_VAR 0 7
1313: PUSH
1314: LD_VAR 0 4
1318: ARRAY
1319: PPUSH
1320: LD_INT 34
1322: PUSH
1323: LD_INT 51
1325: PUSH
1326: EMPTY
1327: LIST
1328: LIST
1329: PPUSH
1330: CALL_OW 69
1334: PUSH
1335: LD_VAR 0 4
1339: ARRAY
1340: PPUSH
1341: CALL_OW 180
1345: GO 1306
1347: POP
1348: POP
// AddComMoveXY ( engs , 148 , 208 ) ;
1349: LD_VAR 0 7
1353: PPUSH
1354: LD_INT 148
1356: PPUSH
1357: LD_INT 208
1359: PPUSH
1360: CALL_OW 171
// Say ( engs [ 1 ] , D1-Rus1-1 ) ;
1364: LD_VAR 0 7
1368: PUSH
1369: LD_INT 1
1371: ARRAY
1372: PPUSH
1373: LD_STRING D1-Rus1-1
1375: PPUSH
1376: CALL_OW 88
// un := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1380: LD_ADDR_VAR 0 8
1384: PUSH
1385: LD_INT 22
1387: PUSH
1388: LD_INT 3
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: PUSH
1395: LD_INT 25
1397: PUSH
1398: LD_INT 1
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PPUSH
1409: CALL_OW 69
1413: ST_TO_ADDR
// ComExitBuilding ( un ) ;
1414: LD_VAR 0 8
1418: PPUSH
1419: CALL_OW 122
// AddComMoveXY ( un , 148 , 208 ) ;
1423: LD_VAR 0 8
1427: PPUSH
1428: LD_INT 148
1430: PPUSH
1431: LD_INT 208
1433: PPUSH
1434: CALL_OW 171
// Wait ( 5 ) ;
1438: LD_INT 5
1440: PPUSH
1441: CALL_OW 67
// Say ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_sex , sex_female ] ] ) [ 1 ] , D1-FSol-1 ) ;
1445: LD_INT 22
1447: PUSH
1448: LD_INT 4
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 26
1457: PUSH
1458: LD_INT 2
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PPUSH
1469: CALL_OW 69
1473: PUSH
1474: LD_INT 1
1476: ARRAY
1477: PPUSH
1478: LD_STRING D1-FSol-1
1480: PPUSH
1481: CALL_OW 88
// Say ( Sikorski , D1-Sik-2 ) ;
1485: LD_EXP 2
1489: PPUSH
1490: LD_STRING D1-Sik-2
1492: PPUSH
1493: CALL_OW 88
// ComMoveXY ( Sikorski , 111 , 122 ) ;
1497: LD_EXP 2
1501: PPUSH
1502: LD_INT 111
1504: PPUSH
1505: LD_INT 122
1507: PPUSH
1508: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
1512: LD_INT 35
1514: PPUSH
1515: CALL_OW 67
// until GetDistUnitXY ( Sikorski , 111 , 122 ) < 3 or GetLives ( Sikorski ) < 250 ;
1519: LD_EXP 2
1523: PPUSH
1524: LD_INT 111
1526: PPUSH
1527: LD_INT 122
1529: PPUSH
1530: CALL_OW 297
1534: PUSH
1535: LD_INT 3
1537: LESS
1538: PUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL_OW 256
1548: PUSH
1549: LD_INT 250
1551: LESS
1552: OR
1553: IFFALSE 1512
// ComMoveXY ( Sikorski , 114 , 136 ) ;
1555: LD_EXP 2
1559: PPUSH
1560: LD_INT 114
1562: PPUSH
1563: LD_INT 136
1565: PPUSH
1566: CALL_OW 111
// t := [ [ 104 , 117 ] , [ 115 , 123 ] , [ 114 , 126 ] , [ 111 , 122 ] , [ 112 , 126 ] , [ 117 , 130 ] , [ 106 , 127 ] , [ 111 , 117 ] , [ 98 , 119 ] , [ 116 , 131 ] , [ 109 , 129 ] , [ 100 , 113 ] ] ;
1570: LD_ADDR_VAR 0 6
1574: PUSH
1575: LD_INT 104
1577: PUSH
1578: LD_INT 117
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PUSH
1585: LD_INT 115
1587: PUSH
1588: LD_INT 123
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PUSH
1595: LD_INT 114
1597: PUSH
1598: LD_INT 126
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 111
1607: PUSH
1608: LD_INT 122
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 112
1617: PUSH
1618: LD_INT 126
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: PUSH
1625: LD_INT 117
1627: PUSH
1628: LD_INT 130
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 106
1637: PUSH
1638: LD_INT 127
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 111
1647: PUSH
1648: LD_INT 117
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 98
1657: PUSH
1658: LD_INT 119
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 116
1667: PUSH
1668: LD_INT 131
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: PUSH
1675: LD_INT 109
1677: PUSH
1678: LD_INT 129
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: PUSH
1685: LD_INT 100
1687: PUSH
1688: LD_INT 113
1690: PUSH
1691: EMPTY
1692: LIST
1693: LIST
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: ST_TO_ADDR
// for i in t do
1709: LD_ADDR_VAR 0 4
1713: PUSH
1714: LD_VAR 0 6
1718: PUSH
1719: FOR_IN
1720: IFFALSE 1756
// begin wait ( 0 0$0.3 ) ;
1722: LD_INT 10
1724: PPUSH
1725: CALL_OW 67
// MineExplosion ( i [ 1 ] , i [ 2 ] , 1 ) ;
1729: LD_VAR 0 4
1733: PUSH
1734: LD_INT 1
1736: ARRAY
1737: PPUSH
1738: LD_VAR 0 4
1742: PUSH
1743: LD_INT 2
1745: ARRAY
1746: PPUSH
1747: LD_INT 1
1749: PPUSH
1750: CALL_OW 453
// end ;
1754: GO 1719
1756: POP
1757: POP
// MineExplosion ( GetX ( Sikorski ) , GetY ( Sikorski ) , 4 ) ;
1758: LD_EXP 2
1762: PPUSH
1763: CALL_OW 250
1767: PPUSH
1768: LD_EXP 2
1772: PPUSH
1773: CALL_OW 251
1777: PPUSH
1778: LD_INT 4
1780: PPUSH
1781: CALL_OW 453
// KillUnit ( Sikorski ) ;
1785: LD_EXP 2
1789: PPUSH
1790: CALL_OW 66
// ComMoveXY ( tmp , 109 , 124 ) ;
1794: LD_VAR 0 5
1798: PPUSH
1799: LD_INT 109
1801: PPUSH
1802: LD_INT 124
1804: PPUSH
1805: CALL_OW 111
// wait ( 0 0$2 ) ;
1809: LD_INT 70
1811: PPUSH
1812: CALL_OW 67
// SaveCharacters ( tmp diff [ Gary , Bobby , Cyrus ] , 09_prev_squad ) ;
1816: LD_VAR 0 5
1820: PUSH
1821: LD_EXP 5
1825: PUSH
1826: LD_EXP 3
1830: PUSH
1831: LD_EXP 4
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: LIST
1840: DIFF
1841: PPUSH
1842: LD_STRING 09_prev_squad
1844: PPUSH
1845: CALL_OW 38
// tmp := [ ] ;
1849: LD_ADDR_VAR 0 5
1853: PUSH
1854: EMPTY
1855: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1856: LD_ADDR_VAR 0 4
1860: PUSH
1861: LD_INT 21
1863: PUSH
1864: LD_INT 3
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PPUSH
1871: CALL_OW 69
1875: PUSH
1876: FOR_IN
1877: IFFALSE 1956
// tmp := Insert ( tmp , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLives ( i ) ] ) ;
1879: LD_ADDR_VAR 0 5
1883: PUSH
1884: LD_VAR 0 5
1888: PPUSH
1889: LD_INT 1
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL_OW 266
1901: PUSH
1902: LD_VAR 0 4
1906: PPUSH
1907: CALL_OW 250
1911: PUSH
1912: LD_VAR 0 4
1916: PPUSH
1917: CALL_OW 251
1921: PUSH
1922: LD_VAR 0 4
1926: PPUSH
1927: CALL_OW 254
1931: PUSH
1932: LD_VAR 0 4
1936: PPUSH
1937: CALL_OW 256
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: PPUSH
1949: CALL_OW 2
1953: ST_TO_ADDR
1954: GO 1876
1956: POP
1957: POP
// SaveVariable ( tmp diff 0 , 09_ovsyenko_base ) ;
1958: LD_VAR 0 5
1962: PUSH
1963: LD_INT 0
1965: DIFF
1966: PPUSH
1967: LD_STRING 09_ovsyenko_base
1969: PPUSH
1970: CALL_OW 39
// ChangeMap ( 1 , __am/09_cont ) ;
1974: LD_INT 1
1976: PPUSH
1977: LD_STRING __am/09_cont
1979: PPUSH
1980: CALL_OW 340
// InGameOff ;
1984: CALL_OW 9
// end ;
1988: LD_VAR 0 1
1992: RET
// every 0 0$1 do var i , filter ;
1993: GO 1995
1995: DISABLE
1996: LD_INT 0
1998: PPUSH
1999: PPUSH
// begin enable ;
2000: ENABLE
// filter := FilterAllUnits ( [ f_side , 4 ] ) diff Sikorski ;
2001: LD_ADDR_VAR 0 2
2005: PUSH
2006: LD_INT 22
2008: PUSH
2009: LD_INT 4
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PPUSH
2016: CALL_OW 69
2020: PUSH
2021: LD_EXP 2
2025: DIFF
2026: ST_TO_ADDR
// for i in filter do
2027: LD_ADDR_VAR 0 1
2031: PUSH
2032: LD_VAR 0 2
2036: PUSH
2037: FOR_IN
2038: IFFALSE 2069
// if GetLives ( i ) < 1000 then
2040: LD_VAR 0 1
2044: PPUSH
2045: CALL_OW 256
2049: PUSH
2050: LD_INT 1000
2052: LESS
2053: IFFALSE 2067
// SetLives ( i , 1000 ) ;
2055: LD_VAR 0 1
2059: PPUSH
2060: LD_INT 1000
2062: PPUSH
2063: CALL_OW 234
2067: GO 2037
2069: POP
2070: POP
// end ;
2071: PPOPN 2
2073: END
