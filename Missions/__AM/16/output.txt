// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 , others13Omega ; export heroesFromOmega , Baker , Gordon , Peter ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Yakotich , Roth , Burlak , Kurt , Omar , Heike ; export Vsevolod , sewiVeh ; export Kozlov ; export Kovalyuk , Oblukov , Bystrov , Fadeev , Gleb , Petrosyan , Petrovova , Kuzmov , Mikhail , Furmanov , Belkov ; export Simms , Scholtze , Kirilenkova , Kapitsova , Karamazov ; export LegionFriend , LegionFriendStatus ; export legionVehicles ; export arControler ; export ruVehicles ; export ruBehMehs , ruBehs ; export behemothStatus ; export russianVehicles ; export allianceVehicles ; export allianceControler ; export allianceFirstContact ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export powellUnloadCargo ; export powellWarm ; export startAttacks ; export powellVeh , centerPowell , powBomb ; export BurlakStatus , StevensStatus ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus , JMMGirlStatus ; export KhatamStatus ; export LegionAI , AllianceAI , RussianAI ; export LegionTarget , AllianceTarget , RussianTarget ; export russianEscape , allianceEscape ; export RothStatus ; export legionDestroyedBuilds , russianDestroyedBuilds , allianceDestroyedBuilds ; export timerStatus , timeAction ; export unitLost ; export legionRocket ; export playerHaveRocket ; export missionStage ; export blockEvent1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 77
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 78
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 79
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 81
  58: PUSH
  59: LD_STRING 14_JMMGirlStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 80
  74: PUSH
  75: LD_STRING 14_KappaStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  86: LD_ADDR_EXP 82
  90: PUSH
  91: LD_STRING 10_KhatamStatus_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 102: LD_ADDR_EXP 75
 106: PUSH
 107: LD_STRING 13_BurlakStatus_1
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 118: LD_ADDR_EXP 76
 122: PUSH
 123: LD_STRING 13_StevensStatus_1
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: CALL_OW 30
 133: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
 134: LD_ADDR_EXP 64
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// amUnitsAttack = [ ] ;
 141: LD_ADDR_EXP 65
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 148: LD_ADDR_EXP 66
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// startAttacks = 0 ;
 155: LD_ADDR_EXP 71
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// powellBuildBase = 0 ;
 163: LD_ADDR_EXP 67
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// powellUnloadCargo = 0 ;
 171: LD_ADDR_EXP 69
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// powellAttacks = 0 ;
 179: LD_ADDR_EXP 68
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// centerPowell = 0 ;
 187: LD_ADDR_EXP 73
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// powellWarm = 0 ;
 195: LD_ADDR_EXP 70
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// LegionFriendStatus = 0 ;
 203: LD_ADDR_EXP 53
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// RothStatus = 1 ;
 211: LD_ADDR_EXP 91
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// allianceFirstContact = 0 ;
 219: LD_ADDR_EXP 63
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// legionVehicles = [ ] ;
 227: LD_ADDR_EXP 54
 231: PUSH
 232: EMPTY
 233: ST_TO_ADDR
// russianVehicles = [ ] ;
 234: LD_ADDR_EXP 60
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// allianceVehicles = [ ] ;
 241: LD_ADDR_EXP 61
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// legionDestroyedBuilds = [ ] ;
 248: LD_ADDR_EXP 92
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// russianDestroyedBuilds = [ ] ;
 255: LD_ADDR_EXP 93
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// allianceDestroyedBuilds = [ ] ;
 262: LD_ADDR_EXP 94
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ruVehicles = [ ] ;
 269: LD_ADDR_EXP 56
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ruBehMehs = [ ] ;
 276: LD_ADDR_EXP 57
 280: PUSH
 281: EMPTY
 282: ST_TO_ADDR
// ruBehs = [ ] ;
 283: LD_ADDR_EXP 58
 287: PUSH
 288: EMPTY
 289: ST_TO_ADDR
// missionStage = 0 ;
 290: LD_ADDR_EXP 100
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// behemothStatus = 0 ;
 298: LD_ADDR_EXP 59
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// unitLost = 0 ;
 306: LD_ADDR_EXP 97
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// LegionAI = 1 ;
 314: LD_ADDR_EXP 83
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// AllianceAI = 1 ;
 322: LD_ADDR_EXP 84
 326: PUSH
 327: LD_INT 1
 329: ST_TO_ADDR
// RussianAI = 1 ;
 330: LD_ADDR_EXP 85
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// timerStatus = 0 ;
 338: LD_ADDR_EXP 95
 342: PUSH
 343: LD_INT 0
 345: ST_TO_ADDR
// timeAction = 0 0$00 ;
 346: LD_ADDR_EXP 96
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// playerHaveRocket = 0 ;
 354: LD_ADDR_EXP 99
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// blockEvent1 = 0 ;
 362: LD_ADDR_EXP 101
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// debugMode = 0 ;
 370: LD_ADDR_EXP 102
 374: PUSH
 375: LD_INT 0
 377: ST_TO_ADDR
// PrepareHeroes ;
 378: CALL 727 0 0
// PrepareHeroesFromEpsilon ;
 382: CALL 1264 0 0
// PrepareRandoms ;
 386: CALL 1608 0 0
// PrepareLegion ;
 390: CALL 3844 0 0
// PrepareRussians ;
 394: CALL 4241 0 0
// PrepareAlliance ;
 398: CALL 5988 0 0
// PrepareDifficulty ;
 402: CALL 7557 0 0
// SetBName ( RuDep2 , zhukov ) ;
 406: LD_INT 23
 408: PPUSH
 409: LD_STRING zhukov
 411: PPUSH
 412: CALL_OW 500
// end ;
 416: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 417: LD_EXP 102
 421: PUSH
 422: LD_INT 1
 424: EQUAL
 425: IFFALSE 724
 427: GO 429
 429: DISABLE
 430: LD_INT 0
 432: PPUSH
// begin enable ;
 433: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 434: LD_ADDR_VAR 0 1
 438: PUSH
 439: LD_INT 22
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: PUSH
 449: LD_INT 21
 451: PUSH
 452: LD_INT 1
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PPUSH
 463: CALL_OW 69
 467: PUSH
 468: FOR_IN
 469: IFFALSE 485
// SetLives ( i , 1000 ) ;
 471: LD_VAR 0 1
 475: PPUSH
 476: LD_INT 1000
 478: PPUSH
 479: CALL_OW 234
 483: GO 468
 485: POP
 486: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 487: LD_ADDR_VAR 0 1
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 2
 504: PUSH
 505: LD_INT 30
 507: PUSH
 508: LD_INT 0
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: PUSH
 515: LD_INT 30
 517: PUSH
 518: LD_INT 1
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PPUSH
 534: CALL_OW 69
 538: PUSH
 539: FOR_IN
 540: IFFALSE 564
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 542: LD_VAR 0 1
 546: PPUSH
 547: CALL_OW 274
 551: PPUSH
 552: LD_INT 1
 554: PPUSH
 555: LD_INT 9999
 557: PPUSH
 558: CALL_OW 277
 562: GO 539
 564: POP
 565: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 566: LD_ADDR_VAR 0 1
 570: PUSH
 571: LD_INT 22
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 2
 583: PUSH
 584: LD_INT 30
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 30
 596: PUSH
 597: LD_INT 1
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 69
 617: PUSH
 618: FOR_IN
 619: IFFALSE 643
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 621: LD_VAR 0 1
 625: PPUSH
 626: CALL_OW 274
 630: PPUSH
 631: LD_INT 2
 633: PPUSH
 634: LD_INT 9999
 636: PPUSH
 637: CALL_OW 277
 641: GO 618
 643: POP
 644: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 645: LD_ADDR_VAR 0 1
 649: PUSH
 650: LD_INT 22
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 30
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: PUSH
 673: LD_INT 30
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: PUSH
 697: FOR_IN
 698: IFFALSE 722
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 700: LD_VAR 0 1
 704: PPUSH
 705: CALL_OW 274
 709: PPUSH
 710: LD_INT 3
 712: PPUSH
 713: LD_INT 9999
 715: PPUSH
 716: CALL_OW 277
 720: GO 697
 722: POP
 723: POP
// end ; end_of_file
 724: PPOPN 1
 726: END
// export function PrepareHeroes ; begin
 727: LD_INT 0
 729: PPUSH
// uc_side = 1 ;
 730: LD_ADDR_OWVAR 20
 734: PUSH
 735: LD_INT 1
 737: ST_TO_ADDR
// uc_nation = 1 ;
 738: LD_ADDR_OWVAR 21
 742: PUSH
 743: LD_INT 1
 745: ST_TO_ADDR
// if JMMVeh = [ ] then
 746: LD_EXP 77
 750: PUSH
 751: EMPTY
 752: EQUAL
 753: IFFALSE 799
// begin vc_engine = 3 ;
 755: LD_ADDR_OWVAR 39
 759: PUSH
 760: LD_INT 3
 762: ST_TO_ADDR
// vc_control = 1 ;
 763: LD_ADDR_OWVAR 38
 767: PUSH
 768: LD_INT 1
 770: ST_TO_ADDR
// vc_chassis = 5 ;
 771: LD_ADDR_OWVAR 37
 775: PUSH
 776: LD_INT 5
 778: ST_TO_ADDR
// vc_weapon = 9 ;
 779: LD_ADDR_OWVAR 40
 783: PUSH
 784: LD_INT 9
 786: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 787: LD_ADDR_EXP 24
 791: PUSH
 792: CALL_OW 45
 796: ST_TO_ADDR
// end else
 797: GO 881
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 799: LD_ADDR_OWVAR 37
 803: PUSH
 804: LD_EXP 77
 808: PUSH
 809: LD_INT 1
 811: ARRAY
 812: PUSH
 813: LD_INT 1
 815: ARRAY
 816: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 817: LD_ADDR_OWVAR 39
 821: PUSH
 822: LD_EXP 77
 826: PUSH
 827: LD_INT 2
 829: ARRAY
 830: PUSH
 831: LD_INT 1
 833: ARRAY
 834: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 835: LD_ADDR_OWVAR 38
 839: PUSH
 840: LD_EXP 77
 844: PUSH
 845: LD_INT 3
 847: ARRAY
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 853: LD_ADDR_OWVAR 40
 857: PUSH
 858: LD_EXP 77
 862: PUSH
 863: LD_INT 4
 865: ARRAY
 866: PUSH
 867: LD_INT 1
 869: ARRAY
 870: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 871: LD_ADDR_EXP 24
 875: PUSH
 876: CALL_OW 45
 880: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 881: LD_EXP 78
 885: PUSH
 886: EMPTY
 887: EQUAL
 888: NOT
 889: IFFALSE 973
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 891: LD_ADDR_OWVAR 37
 895: PUSH
 896: LD_EXP 78
 900: PUSH
 901: LD_INT 1
 903: ARRAY
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 909: LD_ADDR_OWVAR 39
 913: PUSH
 914: LD_EXP 78
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: PUSH
 923: LD_INT 1
 925: ARRAY
 926: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 927: LD_ADDR_OWVAR 38
 931: PUSH
 932: LD_EXP 78
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 945: LD_ADDR_OWVAR 40
 949: PUSH
 950: LD_EXP 78
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 963: LD_ADDR_EXP 25
 967: PUSH
 968: CALL_OW 45
 972: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 973: LD_EXP 24
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 985: LD_EXP 25
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 997: LD_EXP 24
1001: PPUSH
1002: LD_INT 99
1004: PPUSH
1005: LD_INT 154
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 48
// if JMMGirlVeh then
1015: LD_EXP 78
1019: IFFALSE 1039
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
1021: LD_EXP 25
1025: PPUSH
1026: LD_INT 98
1028: PPUSH
1029: LD_INT 159
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
1039: LD_ADDR_EXP 1
1043: PUSH
1044: LD_STRING 14_JMM
1046: PPUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL 6633 0 2
1054: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
1055: LD_EXP 1
1059: PPUSH
1060: LD_EXP 24
1064: PPUSH
1065: CALL_OW 52
// if not JMMGirlVeh = [ ] then
1069: LD_EXP 78
1073: PUSH
1074: EMPTY
1075: EQUAL
1076: NOT
1077: IFFALSE 1199
// begin if JMMGirl = 1 then
1079: LD_EXP 79
1083: PUSH
1084: LD_INT 1
1086: EQUAL
1087: IFFALSE 1119
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
1089: LD_ADDR_EXP 2
1093: PUSH
1094: LD_STRING 14_Joan
1096: PPUSH
1097: LD_INT 1
1099: PPUSH
1100: CALL 6633 0 2
1104: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
1105: LD_EXP 2
1109: PPUSH
1110: LD_EXP 25
1114: PPUSH
1115: CALL_OW 52
// end ; if JMMGirl = 2 then
1119: LD_EXP 79
1123: PUSH
1124: LD_INT 2
1126: EQUAL
1127: IFFALSE 1159
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
1129: LD_ADDR_EXP 4
1133: PUSH
1134: LD_STRING 14_Lisa
1136: PPUSH
1137: LD_INT 1
1139: PPUSH
1140: CALL 6633 0 2
1144: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
1145: LD_EXP 4
1149: PPUSH
1150: LD_EXP 25
1154: PPUSH
1155: CALL_OW 52
// end ; if JMMGirl = 3 then
1159: LD_EXP 79
1163: PUSH
1164: LD_INT 3
1166: EQUAL
1167: IFFALSE 1199
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
1169: LD_ADDR_EXP 16
1173: PUSH
1174: LD_STRING 14_Connie
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 6633 0 2
1184: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1185: LD_EXP 16
1189: PPUSH
1190: LD_EXP 25
1194: PPUSH
1195: CALL_OW 52
// end ; end ; uc_side = 4 ;
1199: LD_ADDR_OWVAR 20
1203: PUSH
1204: LD_INT 4
1206: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1207: LD_ADDR_EXP 17
1211: PUSH
1212: LD_STRING Powell
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL 6633 0 2
1222: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 42 , 62 , 5 , false ) ;
1223: LD_EXP 17
1227: PPUSH
1228: LD_INT 42
1230: PPUSH
1231: LD_INT 62
1233: PPUSH
1234: LD_INT 5
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 50
// ComTurnXY ( Powell , 43 , 63 ) ;
1244: LD_EXP 17
1248: PPUSH
1249: LD_INT 43
1251: PPUSH
1252: LD_INT 63
1254: PPUSH
1255: CALL_OW 118
// end ;
1259: LD_VAR 0 1
1263: RET
// export function PrepareHeroesFromEpsilon ; begin
1264: LD_INT 0
1266: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1267: LD_ADDR_EXP 4
1271: PUSH
1272: LD_STRING Lisa
1274: PPUSH
1275: CALL 6690 0 1
1279: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1280: LD_ADDR_EXP 5
1284: PUSH
1285: LD_STRING Donaldson
1287: PPUSH
1288: CALL 6690 0 1
1292: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1293: LD_ADDR_EXP 6
1297: PUSH
1298: LD_STRING Bobby
1300: PPUSH
1301: CALL 6690 0 1
1305: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1306: LD_ADDR_EXP 7
1310: PUSH
1311: LD_STRING Cyrus
1313: PPUSH
1314: CALL 6690 0 1
1318: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1319: LD_ADDR_EXP 8
1323: PUSH
1324: LD_STRING Denis
1326: PPUSH
1327: CALL 6690 0 1
1331: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1332: LD_ADDR_EXP 9
1336: PUSH
1337: LD_STRING Brown
1339: PPUSH
1340: CALL 6690 0 1
1344: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1345: LD_ADDR_EXP 10
1349: PUSH
1350: LD_STRING Gladstone
1352: PPUSH
1353: CALL 6690 0 1
1357: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1358: LD_ADDR_EXP 11
1362: PUSH
1363: LD_STRING Houten
1365: PPUSH
1366: CALL 6690 0 1
1370: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1371: LD_ADDR_EXP 12
1375: PUSH
1376: LD_STRING Cornel
1378: PPUSH
1379: CALL 6690 0 1
1383: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1384: LD_ADDR_EXP 13
1388: PUSH
1389: LD_STRING Gary
1391: PPUSH
1392: CALL 6690 0 1
1396: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1397: LD_ADDR_EXP 14
1401: PUSH
1402: LD_STRING Frank
1404: PPUSH
1405: CALL 6690 0 1
1409: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1410: LD_ADDR_EXP 15
1414: PUSH
1415: LD_STRING Kikuchi
1417: PPUSH
1418: CALL 6690 0 1
1422: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1423: LD_EXP 4
1427: PPUSH
1428: LD_INT 6
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1438: LD_EXP 5
1442: PPUSH
1443: LD_INT 6
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_INT 6
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1468: LD_EXP 7
1472: PPUSH
1473: LD_INT 6
1475: PPUSH
1476: LD_INT 0
1478: PPUSH
1479: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1483: LD_EXP 8
1487: PPUSH
1488: LD_INT 6
1490: PPUSH
1491: LD_INT 0
1493: PPUSH
1494: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1498: LD_EXP 9
1502: PPUSH
1503: LD_INT 6
1505: PPUSH
1506: LD_INT 0
1508: PPUSH
1509: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1513: LD_EXP 10
1517: PPUSH
1518: LD_INT 6
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1528: LD_EXP 11
1532: PPUSH
1533: LD_INT 6
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1543: LD_EXP 12
1547: PPUSH
1548: LD_INT 6
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1558: LD_EXP 13
1562: PPUSH
1563: LD_INT 6
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1573: LD_EXP 14
1577: PPUSH
1578: LD_INT 6
1580: PPUSH
1581: LD_INT 0
1583: PPUSH
1584: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1588: LD_EXP 15
1592: PPUSH
1593: LD_INT 6
1595: PPUSH
1596: LD_INT 0
1598: PPUSH
1599: CALL_OW 49
// end ;
1603: LD_VAR 0 1
1607: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1608: LD_INT 0
1610: PPUSH
1611: PPUSH
1612: PPUSH
1613: PPUSH
1614: PPUSH
// uc_side = 4 ;
1615: LD_ADDR_OWVAR 20
1619: PUSH
1620: LD_INT 4
1622: ST_TO_ADDR
// uc_nation = 1 ;
1623: LD_ADDR_OWVAR 21
1627: PUSH
1628: LD_INT 1
1630: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1631: LD_ADDR_EXP 18
1635: PUSH
1636: LD_STRING 13s_others
1638: PPUSH
1639: CALL_OW 31
1643: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: LD_INT 22
1651: PUSH
1652: LD_INT 4
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 21
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PPUSH
1673: CALL_OW 69
1677: PUSH
1678: LD_EXP 17
1682: PUSH
1683: EMPTY
1684: LIST
1685: DIFF
1686: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1687: LD_ADDR_VAR 0 5
1691: PUSH
1692: LD_VAR 0 4
1696: PPUSH
1697: CALL 6820 0 1
1701: ST_TO_ADDR
// if others13 >= 8 then
1702: LD_EXP 18
1706: PUSH
1707: LD_INT 8
1709: GREATEREQUAL
1710: IFFALSE 1771
// begin for i = 1 to 8 do
1712: LD_ADDR_VAR 0 2
1716: PUSH
1717: DOUBLE
1718: LD_INT 1
1720: DEC
1721: ST_TO_ADDR
1722: LD_INT 8
1724: PUSH
1725: FOR_TO
1726: IFFALSE 1767
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1728: LD_EXP 18
1732: PUSH
1733: LD_INT 1
1735: ARRAY
1736: PPUSH
1737: LD_INT 6
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1747: LD_ADDR_EXP 18
1751: PUSH
1752: LD_EXP 18
1756: PPUSH
1757: LD_INT 1
1759: PPUSH
1760: CALL_OW 3
1764: ST_TO_ADDR
// end ;
1765: GO 1725
1767: POP
1768: POP
// end else
1769: GO 1830
// begin for i = 1 to others13 do
1771: LD_ADDR_VAR 0 2
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_EXP 18
1785: PUSH
1786: FOR_TO
1787: IFFALSE 1828
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1789: LD_EXP 18
1793: PUSH
1794: LD_INT 1
1796: ARRAY
1797: PPUSH
1798: LD_INT 6
1800: PPUSH
1801: LD_INT 0
1803: PPUSH
1804: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1808: LD_ADDR_EXP 18
1812: PUSH
1813: LD_EXP 18
1817: PPUSH
1818: LD_INT 1
1820: PPUSH
1821: CALL_OW 3
1825: ST_TO_ADDR
// end ;
1826: GO 1786
1828: POP
1829: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1830: LD_ADDR_VAR 0 4
1834: PUSH
1835: LD_INT 22
1837: PUSH
1838: LD_INT 4
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 21
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PPUSH
1859: CALL_OW 69
1863: PUSH
1864: LD_EXP 17
1868: PUSH
1869: EMPTY
1870: LIST
1871: DIFF
1872: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1873: LD_ADDR_VAR 0 5
1877: PUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL 6820 0 1
1887: ST_TO_ADDR
// if others13 >= 6 then
1888: LD_EXP 18
1892: PUSH
1893: LD_INT 6
1895: GREATEREQUAL
1896: IFFALSE 1957
// begin for i = 1 to 6 do
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: DOUBLE
1904: LD_INT 1
1906: DEC
1907: ST_TO_ADDR
1908: LD_INT 6
1910: PUSH
1911: FOR_TO
1912: IFFALSE 1953
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1914: LD_EXP 18
1918: PUSH
1919: LD_INT 1
1921: ARRAY
1922: PPUSH
1923: LD_INT 6
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1933: LD_ADDR_EXP 18
1937: PUSH
1938: LD_EXP 18
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: CALL_OW 3
1950: ST_TO_ADDR
// end ;
1951: GO 1911
1953: POP
1954: POP
// end else
1955: GO 2016
// begin for i = 1 to others13 do
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: DOUBLE
1963: LD_INT 1
1965: DEC
1966: ST_TO_ADDR
1967: LD_EXP 18
1971: PUSH
1972: FOR_TO
1973: IFFALSE 2014
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1975: LD_EXP 18
1979: PUSH
1980: LD_INT 1
1982: ARRAY
1983: PPUSH
1984: LD_INT 6
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1994: LD_ADDR_EXP 18
1998: PUSH
1999: LD_EXP 18
2003: PPUSH
2004: LD_INT 1
2006: PPUSH
2007: CALL_OW 3
2011: ST_TO_ADDR
// end ;
2012: GO 1972
2014: POP
2015: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
2016: LD_ADDR_VAR 0 4
2020: PUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 4
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 21
2033: PUSH
2034: LD_INT 1
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PPUSH
2045: CALL_OW 69
2049: PUSH
2050: LD_EXP 17
2054: PUSH
2055: EMPTY
2056: LIST
2057: DIFF
2058: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
2059: LD_ADDR_VAR 0 5
2063: PUSH
2064: LD_VAR 0 4
2068: PPUSH
2069: CALL 6820 0 1
2073: ST_TO_ADDR
// if heroLenght < 19 then
2074: LD_VAR 0 5
2078: PUSH
2079: LD_INT 19
2081: LESS
2082: IFFALSE 2180
// for i = 1 to 19 - heroLenght do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 19
2096: PUSH
2097: LD_VAR 0 5
2101: MINUS
2102: PUSH
2103: FOR_TO
2104: IFFALSE 2178
// begin hc_gallery =  ;
2106: LD_ADDR_OWVAR 33
2110: PUSH
2111: LD_STRING 
2113: ST_TO_ADDR
// hc_name =  ;
2114: LD_ADDR_OWVAR 26
2118: PUSH
2119: LD_STRING 
2121: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
2122: LD_INT 0
2124: PPUSH
2125: LD_INT 1
2127: PPUSH
2128: LD_INT 4
2130: PPUSH
2131: CALL_OW 12
2135: PPUSH
2136: LD_INT 6
2138: PPUSH
2139: LD_INT 8
2141: PPUSH
2142: CALL_OW 12
2146: PPUSH
2147: CALL_OW 380
// un = CreateHuman ;
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: CALL_OW 44
2160: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
2161: LD_VAR 0 3
2165: PPUSH
2166: LD_INT 6
2168: PPUSH
2169: LD_INT 0
2171: PPUSH
2172: CALL_OW 49
// end ;
2176: GO 2103
2178: POP
2179: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
2180: LD_ADDR_VAR 0 4
2184: PUSH
2185: LD_INT 22
2187: PUSH
2188: LD_INT 4
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 21
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PPUSH
2209: CALL_OW 69
2213: PUSH
2214: LD_EXP 17
2218: PUSH
2219: LD_EXP 1
2223: PUSH
2224: LD_EXP 2
2228: PUSH
2229: LD_EXP 3
2233: PUSH
2234: LD_EXP 4
2238: PUSH
2239: LD_EXP 5
2243: PUSH
2244: LD_EXP 6
2248: PUSH
2249: LD_EXP 7
2253: PUSH
2254: LD_EXP 8
2258: PUSH
2259: LD_EXP 9
2263: PUSH
2264: LD_EXP 10
2268: PUSH
2269: LD_EXP 11
2273: PUSH
2274: LD_EXP 12
2278: PUSH
2279: LD_EXP 13
2283: PUSH
2284: LD_EXP 14
2288: PUSH
2289: LD_EXP 15
2293: PUSH
2294: LD_EXP 16
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: DIFF
2318: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2319: LD_ADDR_EXP 64
2323: PUSH
2324: LD_VAR 0 4
2328: PPUSH
2329: LD_INT 1
2331: PPUSH
2332: CALL 7190 0 2
2336: ST_TO_ADDR
// for i = 1 to 8 do
2337: LD_ADDR_VAR 0 2
2341: PUSH
2342: DOUBLE
2343: LD_INT 1
2345: DEC
2346: ST_TO_ADDR
2347: LD_INT 8
2349: PUSH
2350: FOR_TO
2351: IFFALSE 2381
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2353: LD_ADDR_EXP 65
2357: PUSH
2358: LD_EXP 65
2362: PUSH
2363: LD_EXP 64
2367: PUSH
2368: LD_VAR 0 2
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: ADD
2378: ST_TO_ADDR
2379: GO 2350
2381: POP
2382: POP
// SetClass ( amUnitsAttack , 1 ) ;
2383: LD_EXP 65
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 336
// end ;
2395: LD_VAR 0 1
2399: RET
// export function PrepareSupportFromKappa ; var i , veh ; begin
2400: LD_INT 0
2402: PPUSH
2403: PPUSH
2404: PPUSH
// uc_side = 1 ;
2405: LD_ADDR_OWVAR 20
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// uc_nation = 1 ;
2413: LD_ADDR_OWVAR 21
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// for i := 1 to 5 do
2421: LD_ADDR_VAR 0 2
2425: PUSH
2426: DOUBLE
2427: LD_INT 1
2429: DEC
2430: ST_TO_ADDR
2431: LD_INT 5
2433: PUSH
2434: FOR_TO
2435: IFFALSE 2519
// begin vc_engine = 3 ;
2437: LD_ADDR_OWVAR 39
2441: PUSH
2442: LD_INT 3
2444: ST_TO_ADDR
// vc_control = 3 ;
2445: LD_ADDR_OWVAR 38
2449: PUSH
2450: LD_INT 3
2452: ST_TO_ADDR
// vc_chassis = 3 ;
2453: LD_ADDR_OWVAR 37
2457: PUSH
2458: LD_INT 3
2460: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2461: LD_ADDR_OWVAR 40
2465: PUSH
2466: LD_INT 5
2468: PUSH
2469: LD_INT 9
2471: PUSH
2472: LD_INT 7
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 1
2482: PPUSH
2483: LD_INT 3
2485: PPUSH
2486: CALL_OW 12
2490: ARRAY
2491: ST_TO_ADDR
// veh = CreateVehicle ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 45
2501: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 14
2509: PPUSH
2510: LD_INT 0
2512: PPUSH
2513: CALL_OW 49
// end ;
2517: GO 2434
2519: POP
2520: POP
// vc_engine = 3 ;
2521: LD_ADDR_OWVAR 39
2525: PUSH
2526: LD_INT 3
2528: ST_TO_ADDR
// vc_control = 1 ;
2529: LD_ADDR_OWVAR 38
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// vc_chassis = 3 ;
2537: LD_ADDR_OWVAR 37
2541: PUSH
2542: LD_INT 3
2544: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2545: LD_ADDR_OWVAR 40
2549: PUSH
2550: LD_INT 5
2552: PUSH
2553: LD_INT 9
2555: PUSH
2556: LD_INT 7
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 3
2569: PPUSH
2570: CALL_OW 12
2574: ARRAY
2575: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
2576: LD_ADDR_EXP 25
2580: PUSH
2581: CALL_OW 45
2585: ST_TO_ADDR
// PlaceUnitArea ( NewJMMGirlVeh , KappaSpawn , false ) ;
2586: LD_EXP 25
2590: PPUSH
2591: LD_INT 14
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: CALL_OW 49
// if JMMGirl = 1 then
2601: LD_EXP 79
2605: PUSH
2606: LD_INT 1
2608: EQUAL
2609: IFFALSE 2662
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
2611: LD_ADDR_EXP 2
2615: PUSH
2616: LD_STRING 14_Joan
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: CALL 6633 0 2
2626: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
2627: LD_EXP 2
2631: PPUSH
2632: LD_EXP 25
2636: PPUSH
2637: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2641: LD_EXP 25
2645: PPUSH
2646: CALL_OW 87
// Say ( Joan , D10BW-Joan-1 ) ;
2650: LD_EXP 2
2654: PPUSH
2655: LD_STRING D10BW-Joan-1
2657: PPUSH
2658: CALL_OW 88
// end ; if JMMGirl = 2 then
2662: LD_EXP 79
2666: PUSH
2667: LD_INT 2
2669: EQUAL
2670: IFFALSE 2723
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
2672: LD_ADDR_EXP 4
2676: PUSH
2677: LD_STRING 14_Lisa
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL 6633 0 2
2687: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
2688: LD_EXP 4
2692: PPUSH
2693: LD_EXP 25
2697: PPUSH
2698: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2702: LD_EXP 25
2706: PPUSH
2707: CALL_OW 87
// Say ( Lisa , D10BW-Lisa-1 ) ;
2711: LD_EXP 4
2715: PPUSH
2716: LD_STRING D10BW-Lisa-1
2718: PPUSH
2719: CALL_OW 88
// end ; if JMMGirl = 3 then
2723: LD_EXP 79
2727: PUSH
2728: LD_INT 3
2730: EQUAL
2731: IFFALSE 2784
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
2733: LD_ADDR_EXP 16
2737: PUSH
2738: LD_STRING 14_Connie
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL 6633 0 2
2748: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
2749: LD_EXP 16
2753: PPUSH
2754: LD_EXP 25
2758: PPUSH
2759: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2763: LD_EXP 25
2767: PPUSH
2768: CALL_OW 87
// Say ( Lisa , D10BW-Con-1 ) ;
2772: LD_EXP 4
2776: PPUSH
2777: LD_STRING D10BW-Con-1
2779: PPUSH
2780: CALL_OW 88
// end ; end ;
2784: LD_VAR 0 1
2788: RET
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , avalaibleVehs , vehicles , resources , cargoList ; begin
2789: LD_INT 0
2791: PPUSH
2792: PPUSH
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
2798: PPUSH
2799: PPUSH
// uc_side = 1 ;
2800: LD_ADDR_OWVAR 20
2804: PUSH
2805: LD_INT 1
2807: ST_TO_ADDR
// uc_nation = 1 ;
2808: LD_ADDR_OWVAR 21
2812: PUSH
2813: LD_INT 1
2815: ST_TO_ADDR
// omegaVeh = [ ] ;
2816: LD_ADDR_VAR 0 3
2820: PUSH
2821: EMPTY
2822: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
2823: LD_STRING 13s_Lisa
2825: PPUSH
2826: CALL_OW 28
2830: PUSH
2831: LD_INT 0
2833: EQUAL
2834: IFFALSE 2849
// Lisa = PrepareUnitOmega ( Lisa ) ;
2836: LD_ADDR_EXP 4
2840: PUSH
2841: LD_STRING Lisa
2843: PPUSH
2844: CALL 6747 0 1
2848: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
2849: LD_STRING 13s_Donaldson
2851: PPUSH
2852: CALL_OW 28
2856: PUSH
2857: LD_INT 0
2859: EQUAL
2860: IFFALSE 2875
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
2862: LD_ADDR_EXP 5
2866: PUSH
2867: LD_STRING Donaldson
2869: PPUSH
2870: CALL 6747 0 1
2874: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
2875: LD_STRING 13s_Bobby
2877: PPUSH
2878: CALL_OW 28
2882: PUSH
2883: LD_INT 0
2885: EQUAL
2886: IFFALSE 2901
// Bobby = PrepareUnitOmega ( Bobby ) ;
2888: LD_ADDR_EXP 6
2892: PUSH
2893: LD_STRING Bobby
2895: PPUSH
2896: CALL 6747 0 1
2900: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
2901: LD_STRING 13s_Cyrus
2903: PPUSH
2904: CALL_OW 28
2908: PUSH
2909: LD_INT 0
2911: EQUAL
2912: IFFALSE 2927
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
2914: LD_ADDR_EXP 7
2918: PUSH
2919: LD_STRING Cyrus
2921: PPUSH
2922: CALL 6747 0 1
2926: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
2927: LD_STRING 13s_Denis
2929: PPUSH
2930: CALL_OW 28
2934: PUSH
2935: LD_INT 0
2937: EQUAL
2938: IFFALSE 2953
// Denis = PrepareUnitOmega ( Denis ) ;
2940: LD_ADDR_EXP 8
2944: PUSH
2945: LD_STRING Denis
2947: PPUSH
2948: CALL 6747 0 1
2952: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
2953: LD_STRING 13s_Brown
2955: PPUSH
2956: CALL_OW 28
2960: PUSH
2961: LD_INT 0
2963: EQUAL
2964: IFFALSE 2979
// Brown = PrepareUnitOmega ( Brown ) ;
2966: LD_ADDR_EXP 9
2970: PUSH
2971: LD_STRING Brown
2973: PPUSH
2974: CALL 6747 0 1
2978: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
2979: LD_STRING 13s_Gladstone
2981: PPUSH
2982: CALL_OW 28
2986: PUSH
2987: LD_INT 0
2989: EQUAL
2990: IFFALSE 3005
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
2992: LD_ADDR_EXP 10
2996: PUSH
2997: LD_STRING Gladstone
2999: PPUSH
3000: CALL 6747 0 1
3004: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
3005: LD_STRING 13s_Houten
3007: PPUSH
3008: CALL_OW 28
3012: PUSH
3013: LD_INT 0
3015: EQUAL
3016: IFFALSE 3031
// Houten = PrepareUnitOmega ( Houten ) ;
3018: LD_ADDR_EXP 11
3022: PUSH
3023: LD_STRING Houten
3025: PPUSH
3026: CALL 6747 0 1
3030: ST_TO_ADDR
// if TestCharacters ( 13s_Cornell ) = false then
3031: LD_STRING 13s_Cornell
3033: PPUSH
3034: CALL_OW 28
3038: PUSH
3039: LD_INT 0
3041: EQUAL
3042: IFFALSE 3057
// Cornel = PrepareUnitOmega ( Cornell ) ;
3044: LD_ADDR_EXP 12
3048: PUSH
3049: LD_STRING Cornell
3051: PPUSH
3052: CALL 6747 0 1
3056: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
3057: LD_STRING 13s_Gary
3059: PPUSH
3060: CALL_OW 28
3064: PUSH
3065: LD_INT 0
3067: EQUAL
3068: IFFALSE 3083
// Gary = PrepareUnitOmega ( Gary ) ;
3070: LD_ADDR_EXP 13
3074: PUSH
3075: LD_STRING Gary
3077: PPUSH
3078: CALL 6747 0 1
3082: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
3083: LD_STRING 13s_Frank
3085: PPUSH
3086: CALL_OW 28
3090: PUSH
3091: LD_INT 0
3093: EQUAL
3094: IFFALSE 3109
// Frank = PrepareUnitOmega ( Frank ) ;
3096: LD_ADDR_EXP 14
3100: PUSH
3101: LD_STRING Frank
3103: PPUSH
3104: CALL 6747 0 1
3108: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3109: LD_STRING 13s_Kikuchi
3111: PPUSH
3112: CALL_OW 28
3116: PUSH
3117: LD_INT 0
3119: EQUAL
3120: IFFALSE 3135
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3122: LD_ADDR_EXP 15
3126: PUSH
3127: LD_STRING Kikuchi
3129: PPUSH
3130: CALL 6747 0 1
3134: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3135: LD_STRING 13s_Kikuchi
3137: PPUSH
3138: CALL_OW 28
3142: PUSH
3143: LD_INT 0
3145: EQUAL
3146: IFFALSE 3161
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3148: LD_ADDR_EXP 15
3152: PUSH
3153: LD_STRING Kikuchi
3155: PPUSH
3156: CALL 6747 0 1
3160: ST_TO_ADDR
// Gordon = PrepareUnitOmega ( Gordon ) ;
3161: LD_ADDR_EXP 22
3165: PUSH
3166: LD_STRING Gordon
3168: PPUSH
3169: CALL 6747 0 1
3173: ST_TO_ADDR
// Peter = PrepareUnitOmega ( Peter ) ;
3174: LD_ADDR_EXP 23
3178: PUSH
3179: LD_STRING Peter
3181: PPUSH
3182: CALL 6747 0 1
3186: ST_TO_ADDR
// if StevensStatus = 1 then
3187: LD_EXP 76
3191: PUSH
3192: LD_INT 1
3194: EQUAL
3195: IFFALSE 3212
// Stevens = PrepareUnitOmega ( Stevens ) else
3197: LD_ADDR_EXP 3
3201: PUSH
3202: LD_STRING Stevens
3204: PPUSH
3205: CALL 6747 0 1
3209: ST_TO_ADDR
3210: GO 3225
// Baker = PrepareUnitOmega ( Baker ) ;
3212: LD_ADDR_EXP 21
3216: PUSH
3217: LD_STRING Baker
3219: PPUSH
3220: CALL 6747 0 1
3224: ST_TO_ADDR
// others13Omega = CreateCharacterSet ( 15_other_survivors ) ;
3225: LD_ADDR_EXP 19
3229: PUSH
3230: LD_STRING 15_other_survivors
3232: PPUSH
3233: CALL_OW 31
3237: ST_TO_ADDR
// vehicles = LoadVariable ( 15_Vehicles_1 , [ ] ) ;
3238: LD_ADDR_VAR 0 7
3242: PUSH
3243: LD_STRING 15_Vehicles_1
3245: PPUSH
3246: EMPTY
3247: PPUSH
3248: CALL_OW 30
3252: ST_TO_ADDR
// resources = LoadVariable ( 15_ResourcesInCargo_1 , [ ] ) ;
3253: LD_ADDR_VAR 0 8
3257: PUSH
3258: LD_STRING 15_ResourcesInCargo_1
3260: PPUSH
3261: EMPTY
3262: PPUSH
3263: CALL_OW 30
3267: ST_TO_ADDR
// for i := 1 to vehicles do
3268: LD_ADDR_VAR 0 2
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_VAR 0 7
3282: PUSH
3283: FOR_TO
3284: IFFALSE 3509
// begin uc_nation = vehicles [ i ] [ 1 ] ;
3286: LD_ADDR_OWVAR 21
3290: PUSH
3291: LD_VAR 0 7
3295: PUSH
3296: LD_VAR 0 2
3300: ARRAY
3301: PUSH
3302: LD_INT 1
3304: ARRAY
3305: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
3306: LD_ADDR_OWVAR 37
3310: PUSH
3311: LD_VAR 0 7
3315: PUSH
3316: LD_VAR 0 2
3320: ARRAY
3321: PUSH
3322: LD_INT 2
3324: ARRAY
3325: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
3326: LD_ADDR_OWVAR 39
3330: PUSH
3331: LD_VAR 0 7
3335: PUSH
3336: LD_VAR 0 2
3340: ARRAY
3341: PUSH
3342: LD_INT 3
3344: ARRAY
3345: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
3346: LD_ADDR_OWVAR 38
3350: PUSH
3351: LD_VAR 0 7
3355: PUSH
3356: LD_VAR 0 2
3360: ARRAY
3361: PUSH
3362: LD_INT 4
3364: ARRAY
3365: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
3366: LD_ADDR_OWVAR 40
3370: PUSH
3371: LD_VAR 0 7
3375: PUSH
3376: LD_VAR 0 2
3380: ARRAY
3381: PUSH
3382: LD_INT 5
3384: ARRAY
3385: ST_TO_ADDR
// if vc_weapon = 8 then
3386: LD_OWVAR 40
3390: PUSH
3391: LD_INT 8
3393: EQUAL
3394: IFFALSE 3406
// vc_weapon = 9 else
3396: LD_ADDR_OWVAR 40
3400: PUSH
3401: LD_INT 9
3403: ST_TO_ADDR
3404: GO 3426
// vc_weapon = vehicles [ i ] [ 5 ] ;
3406: LD_ADDR_OWVAR 40
3410: PUSH
3411: LD_VAR 0 7
3415: PUSH
3416: LD_VAR 0 2
3420: ARRAY
3421: PUSH
3422: LD_INT 5
3424: ARRAY
3425: ST_TO_ADDR
// vc_fuel_battery = 40 ;
3426: LD_ADDR_OWVAR 41
3430: PUSH
3431: LD_INT 40
3433: ST_TO_ADDR
// veh = CreateVehicle ;
3434: LD_ADDR_VAR 0 5
3438: PUSH
3439: CALL_OW 45
3443: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
3444: LD_VAR 0 5
3448: PPUSH
3449: LD_INT 5
3451: PPUSH
3452: CALL_OW 233
// SetLives ( veh , rand ( 300 , 800 ) ) ;
3456: LD_VAR 0 5
3460: PPUSH
3461: LD_INT 300
3463: PPUSH
3464: LD_INT 800
3466: PPUSH
3467: CALL_OW 12
3471: PPUSH
3472: CALL_OW 234
// omegaVeh = omegaVeh ^ veh ;
3476: LD_ADDR_VAR 0 3
3480: PUSH
3481: LD_VAR 0 3
3485: PUSH
3486: LD_VAR 0 5
3490: ADD
3491: ST_TO_ADDR
// PlaceUnitArea ( veh , OmegaSpawn , false ) ;
3492: LD_VAR 0 5
3496: PPUSH
3497: LD_INT 16
3499: PPUSH
3500: LD_INT 0
3502: PPUSH
3503: CALL_OW 49
// end ;
3507: GO 3283
3509: POP
3510: POP
// cargoList = FilterUnitsInArea ( OmegaSpawn , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] , [ f_control , 1 ] , [ f_engine , 3 ] ] ) ;
3511: LD_ADDR_VAR 0 9
3515: PUSH
3516: LD_INT 16
3518: PPUSH
3519: LD_INT 22
3521: PUSH
3522: LD_INT 1
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PUSH
3529: LD_INT 21
3531: PUSH
3532: LD_INT 2
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: PUSH
3539: LD_INT 34
3541: PUSH
3542: LD_INT 12
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 33
3551: PUSH
3552: LD_INT 1
3554: PUSH
3555: EMPTY
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 32
3561: PUSH
3562: LD_INT 3
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: PPUSH
3576: CALL_OW 70
3580: ST_TO_ADDR
// if cargoList > 0 then
3581: LD_VAR 0 9
3585: PUSH
3586: LD_INT 0
3588: GREATER
3589: IFFALSE 3722
// for i = 1 to cargoList do
3591: LD_ADDR_VAR 0 2
3595: PUSH
3596: DOUBLE
3597: LD_INT 1
3599: DEC
3600: ST_TO_ADDR
3601: LD_VAR 0 9
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3720
// begin if resources > 0 then
3609: LD_VAR 0 8
3613: PUSH
3614: LD_INT 0
3616: GREATER
3617: IFFALSE 3718
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
3619: LD_VAR 0 9
3623: PUSH
3624: LD_VAR 0 2
3628: ARRAY
3629: PPUSH
3630: LD_INT 1
3632: PPUSH
3633: LD_VAR 0 8
3637: PUSH
3638: LD_VAR 0 2
3642: ARRAY
3643: PUSH
3644: LD_INT 1
3646: ARRAY
3647: PPUSH
3648: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
3652: LD_VAR 0 9
3656: PUSH
3657: LD_VAR 0 2
3661: ARRAY
3662: PPUSH
3663: LD_INT 2
3665: PPUSH
3666: LD_VAR 0 8
3670: PUSH
3671: LD_VAR 0 2
3675: ARRAY
3676: PUSH
3677: LD_INT 2
3679: ARRAY
3680: PPUSH
3681: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
3685: LD_VAR 0 9
3689: PUSH
3690: LD_VAR 0 2
3694: ARRAY
3695: PPUSH
3696: LD_INT 3
3698: PPUSH
3699: LD_VAR 0 8
3703: PUSH
3704: LD_VAR 0 2
3708: ARRAY
3709: PUSH
3710: LD_INT 3
3712: ARRAY
3713: PPUSH
3714: CALL_OW 291
// end ; end ;
3718: GO 3606
3720: POP
3721: POP
// for i := 1 to heroesFromOmega do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_EXP 20
3736: PUSH
3737: FOR_TO
3738: IFFALSE 3768
// begin PlaceHumanInUnit ( heroesFromOmega [ i ] , omegaVeh [ i ] ) ;
3740: LD_EXP 20
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PPUSH
3751: LD_VAR 0 3
3755: PUSH
3756: LD_VAR 0 2
3760: ARRAY
3761: PPUSH
3762: CALL_OW 52
// end ;
3766: GO 3737
3768: POP
3769: POP
// avalaibleVehs = UnitFilter ( omegaVeh , [ f_empty ] ) ;
3770: LD_ADDR_VAR 0 6
3774: PUSH
3775: LD_VAR 0 3
3779: PPUSH
3780: LD_INT 58
3782: PUSH
3783: EMPTY
3784: LIST
3785: PPUSH
3786: CALL_OW 72
3790: ST_TO_ADDR
// for i := 1 to others13Omega do
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: DOUBLE
3797: LD_INT 1
3799: DEC
3800: ST_TO_ADDR
3801: LD_EXP 19
3805: PUSH
3806: FOR_TO
3807: IFFALSE 3837
// begin PlaceHumanInUnit ( others13Omega [ i ] , avalaibleVehs [ i ] ) ;
3809: LD_EXP 19
3813: PUSH
3814: LD_VAR 0 2
3818: ARRAY
3819: PPUSH
3820: LD_VAR 0 6
3824: PUSH
3825: LD_VAR 0 2
3829: ARRAY
3830: PPUSH
3831: CALL_OW 52
// end ;
3835: GO 3806
3837: POP
3838: POP
// end ; end_of_file
3839: LD_VAR 0 1
3843: RET
// export function PrepareLegion ; var i ; begin
3844: LD_INT 0
3846: PPUSH
3847: PPUSH
// uc_side = 8 ;
3848: LD_ADDR_OWVAR 20
3852: PUSH
3853: LD_INT 8
3855: ST_TO_ADDR
// uc_nation = 2 ;
3856: LD_ADDR_OWVAR 21
3860: PUSH
3861: LD_INT 2
3863: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3864: LD_ADDR_EXP 30
3868: PUSH
3869: LD_STRING Kurt
3871: PPUSH
3872: LD_INT 0
3874: PPUSH
3875: CALL 6633 0 2
3879: ST_TO_ADDR
// Kozlov = PrepareUnit ( Kozlov , false ) ;
3880: LD_ADDR_EXP 35
3884: PUSH
3885: LD_STRING Kozlov
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL 6633 0 2
3895: ST_TO_ADDR
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
3896: LD_INT 8
3898: PPUSH
3899: LD_INT 2
3901: PPUSH
3902: LD_INT 122
3904: PPUSH
3905: LD_INT 10
3907: PPUSH
3908: LD_INT 2
3910: PPUSH
3911: LD_INT 4
3913: PPUSH
3914: CALL 7751 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
3918: LD_INT 8
3920: PPUSH
3921: LD_INT 2
3923: PPUSH
3924: LD_INT 99
3926: PPUSH
3927: LD_INT 10
3929: PPUSH
3930: LD_INT 2
3932: PPUSH
3933: LD_INT 2
3935: PPUSH
3936: CALL 7751 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
3940: LD_INT 8
3942: PPUSH
3943: LD_INT 2
3945: PPUSH
3946: LD_INT 104
3948: PPUSH
3949: LD_INT 10
3951: PPUSH
3952: LD_INT 1
3954: PPUSH
3955: LD_INT 2
3957: PPUSH
3958: CALL 7751 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
3962: LD_INT 8
3964: PPUSH
3965: LD_INT 2
3967: PPUSH
3968: LD_INT 104
3970: PPUSH
3971: LD_INT 10
3973: PPUSH
3974: LD_INT 8
3976: PPUSH
3977: LD_INT 1
3979: PPUSH
3980: CALL 7751 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
3984: LD_INT 8
3986: PPUSH
3987: LD_INT 2
3989: PPUSH
3990: LD_INT 118
3992: PPUSH
3993: LD_INT 10
3995: PPUSH
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 1
4001: PPUSH
4002: CALL 7751 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
4006: LD_INT 8
4008: PPUSH
4009: LD_INT 2
4011: PPUSH
4012: LD_INT 117
4014: PPUSH
4015: LD_INT 10
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 4
4023: PPUSH
4024: CALL 7751 0 6
// RespawnInside ( 8 , 2 , ArLab1 , 10 , 4 , 2 ) ;
4028: LD_INT 8
4030: PPUSH
4031: LD_INT 2
4033: PPUSH
4034: LD_INT 252
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: LD_INT 4
4042: PPUSH
4043: LD_INT 2
4045: PPUSH
4046: CALL 7751 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_INT 22
4057: PUSH
4058: LD_INT 8
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: LD_INT 21
4067: PUSH
4068: LD_INT 3
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: LD_INT 30
4077: PUSH
4078: LD_INT 32
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: PUSH
4085: LD_INT 58
4087: PUSH
4088: EMPTY
4089: LIST
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: PPUSH
4097: CALL_OW 69
4101: PUSH
4102: FOR_IN
4103: IFFALSE 4131
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
4105: LD_INT 8
4107: PPUSH
4108: LD_INT 2
4110: PPUSH
4111: LD_VAR 0 2
4115: PPUSH
4116: LD_INT 10
4118: PPUSH
4119: LD_INT 1
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: CALL 7751 0 6
4129: GO 4102
4131: POP
4132: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
4133: LD_INT 8
4135: PPUSH
4136: LD_INT 2
4138: PPUSH
4139: LD_INT 140
4141: PPUSH
4142: LD_INT 10
4144: PPUSH
4145: LD_INT 3
4147: PPUSH
4148: LD_INT 1
4150: PPUSH
4151: CALL 7751 0 6
// arControler = UnitsInside ( ArControl ) ;
4155: LD_ADDR_EXP 55
4159: PUSH
4160: LD_INT 140
4162: PPUSH
4163: CALL_OW 313
4167: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
4168: LD_INT 139
4170: PPUSH
4171: LD_EXP 55
4175: PUSH
4176: LD_INT 1
4178: ARRAY
4179: PPUSH
4180: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
4184: LD_INT 138
4186: PPUSH
4187: LD_EXP 55
4191: PUSH
4192: LD_INT 1
4194: ARRAY
4195: PPUSH
4196: CALL_OW 195
// hc_name = Ali Hadarach ;
4200: LD_ADDR_OWVAR 26
4204: PUSH
4205: LD_STRING Ali Hadarach
4207: ST_TO_ADDR
// hc_gallery =  ;
4208: LD_ADDR_OWVAR 33
4212: PUSH
4213: LD_STRING 
4215: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
4216: LD_INT 1
4218: PPUSH
4219: LD_INT 8
4221: PPUSH
4222: CALL_OW 383
// LegionFriend = CreateHuman ;
4226: LD_ADDR_EXP 52
4230: PUSH
4231: CALL_OW 44
4235: ST_TO_ADDR
// end ; end_of_file
4236: LD_VAR 0 1
4240: RET
// export function PrepareRussians ; var i ; begin
4241: LD_INT 0
4243: PPUSH
4244: PPUSH
// uc_side = 3 ;
4245: LD_ADDR_OWVAR 20
4249: PUSH
4250: LD_INT 3
4252: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
4253: LD_ADDR_EXP 26
4257: PUSH
4258: LD_STRING Platonov
4260: PPUSH
4261: LD_INT 0
4263: PPUSH
4264: CALL 6633 0 2
4268: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
4269: LD_EXP 26
4273: PPUSH
4274: LD_INT 23
4276: PPUSH
4277: CALL_OW 52
// Yakotich = PrepareUnit ( Yakotich , false ) ;
4281: LD_ADDR_EXP 27
4285: PUSH
4286: LD_STRING Yakotich
4288: PPUSH
4289: LD_INT 0
4291: PPUSH
4292: CALL 6633 0 2
4296: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , RuDep1 ) ;
4297: LD_EXP 27
4301: PPUSH
4302: LD_INT 26
4304: PPUSH
4305: CALL_OW 52
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
4309: LD_ADDR_EXP 36
4313: PUSH
4314: LD_STRING Kovalyuk
4316: PPUSH
4317: LD_INT 0
4319: PPUSH
4320: CALL 6633 0 2
4324: ST_TO_ADDR
// SetClass ( Kovalyuk , 3 ) ;
4325: LD_EXP 36
4329: PPUSH
4330: LD_INT 3
4332: PPUSH
4333: CALL_OW 336
// ruBehMehs = ruBehMehs ^ Kovalyuk ;
4337: LD_ADDR_EXP 57
4341: PUSH
4342: LD_EXP 57
4346: PUSH
4347: LD_EXP 36
4351: ADD
4352: ST_TO_ADDR
// Oblukov = PrepareUnit ( Oblukov , false ) ;
4353: LD_ADDR_EXP 37
4357: PUSH
4358: LD_STRING Oblukov
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL 6633 0 2
4368: ST_TO_ADDR
// Bystrov = PrepareUnit ( Bystrov , false ) ;
4369: LD_ADDR_EXP 38
4373: PUSH
4374: LD_STRING Bystrov
4376: PPUSH
4377: LD_INT 0
4379: PPUSH
4380: CALL 6633 0 2
4384: ST_TO_ADDR
// Fadeev = PrepareUnit ( Fadeev , false ) ;
4385: LD_ADDR_EXP 39
4389: PUSH
4390: LD_STRING Fadeev
4392: PPUSH
4393: LD_INT 0
4395: PPUSH
4396: CALL 6633 0 2
4400: ST_TO_ADDR
// Gleb = PrepareUnit ( Gleb , false ) ;
4401: LD_ADDR_EXP 40
4405: PUSH
4406: LD_STRING Gleb
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL 6633 0 2
4416: ST_TO_ADDR
// Petrosyan = PrepareUnit ( Petrosyan , false ) ;
4417: LD_ADDR_EXP 41
4421: PUSH
4422: LD_STRING Petrosyan
4424: PPUSH
4425: LD_INT 0
4427: PPUSH
4428: CALL 6633 0 2
4432: ST_TO_ADDR
// Petrovova = PrepareUnit ( Petrovova , false ) ;
4433: LD_ADDR_EXP 42
4437: PUSH
4438: LD_STRING Petrovova
4440: PPUSH
4441: LD_INT 0
4443: PPUSH
4444: CALL 6633 0 2
4448: ST_TO_ADDR
// Kuzmov = PrepareUnit ( Kuzmov , false ) ;
4449: LD_ADDR_EXP 43
4453: PUSH
4454: LD_STRING Kuzmov
4456: PPUSH
4457: LD_INT 0
4459: PPUSH
4460: CALL 6633 0 2
4464: ST_TO_ADDR
// Mikhail = PrepareUnit ( Mikhail , false ) ;
4465: LD_ADDR_EXP 44
4469: PUSH
4470: LD_STRING Mikhail
4472: PPUSH
4473: LD_INT 0
4475: PPUSH
4476: CALL 6633 0 2
4480: ST_TO_ADDR
// Furmanov = PrepareUnit ( Furmanov , false ) ;
4481: LD_ADDR_EXP 45
4485: PUSH
4486: LD_STRING Furmanov
4488: PPUSH
4489: LD_INT 0
4491: PPUSH
4492: CALL 6633 0 2
4496: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
4497: LD_ADDR_EXP 46
4501: PUSH
4502: LD_STRING Belkov
4504: PPUSH
4505: LD_INT 0
4507: PPUSH
4508: CALL 6633 0 2
4512: ST_TO_ADDR
// PlaceHumanInUnit ( Oblukov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4513: LD_EXP 37
4517: PPUSH
4518: LD_INT 22
4520: PUSH
4521: LD_INT 3
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 21
4530: PUSH
4531: LD_INT 3
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: LD_INT 30
4540: PUSH
4541: LD_INT 32
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 58
4550: PUSH
4551: EMPTY
4552: LIST
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: PPUSH
4560: CALL_OW 69
4564: PUSH
4565: LD_INT 1
4567: ARRAY
4568: PPUSH
4569: CALL_OW 52
// PlaceHumanInUnit ( Fadeev , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4573: LD_EXP 39
4577: PPUSH
4578: LD_INT 22
4580: PUSH
4581: LD_INT 3
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 3
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: LD_INT 30
4600: PUSH
4601: LD_INT 32
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 58
4610: PUSH
4611: EMPTY
4612: LIST
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: PPUSH
4620: CALL_OW 69
4624: PUSH
4625: LD_INT 1
4627: ARRAY
4628: PPUSH
4629: CALL_OW 52
// PlaceHumanInUnit ( Gleb , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4633: LD_EXP 40
4637: PPUSH
4638: LD_INT 22
4640: PUSH
4641: LD_INT 3
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: PUSH
4648: LD_INT 21
4650: PUSH
4651: LD_INT 3
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PUSH
4658: LD_INT 30
4660: PUSH
4661: LD_INT 32
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: LD_INT 58
4670: PUSH
4671: EMPTY
4672: LIST
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: PPUSH
4680: CALL_OW 69
4684: PUSH
4685: LD_INT 1
4687: ARRAY
4688: PPUSH
4689: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4693: LD_EXP 42
4697: PPUSH
4698: LD_INT 22
4700: PUSH
4701: LD_INT 3
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 21
4710: PUSH
4711: LD_INT 3
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: LD_INT 30
4720: PUSH
4721: LD_INT 32
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: LD_INT 58
4730: PUSH
4731: EMPTY
4732: LIST
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: PPUSH
4740: CALL_OW 69
4744: PUSH
4745: LD_INT 1
4747: ARRAY
4748: PPUSH
4749: CALL_OW 52
// PlaceHumanInUnit ( Kuzmov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4753: LD_EXP 43
4757: PPUSH
4758: LD_INT 22
4760: PUSH
4761: LD_INT 3
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PUSH
4768: LD_INT 21
4770: PUSH
4771: LD_INT 3
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PUSH
4778: LD_INT 30
4780: PUSH
4781: LD_INT 32
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: PUSH
4788: LD_INT 58
4790: PUSH
4791: EMPTY
4792: LIST
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: PPUSH
4800: CALL_OW 69
4804: PUSH
4805: LD_INT 1
4807: ARRAY
4808: PPUSH
4809: CALL_OW 52
// PlaceHumanInUnit ( Furmanov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4813: LD_EXP 45
4817: PPUSH
4818: LD_INT 22
4820: PUSH
4821: LD_INT 3
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 21
4830: PUSH
4831: LD_INT 3
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 30
4840: PUSH
4841: LD_INT 32
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 58
4850: PUSH
4851: EMPTY
4852: LIST
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: PPUSH
4860: CALL_OW 69
4864: PUSH
4865: LD_INT 1
4867: ARRAY
4868: PPUSH
4869: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4873: LD_EXP 46
4877: PPUSH
4878: LD_INT 22
4880: PUSH
4881: LD_INT 3
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 21
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 30
4900: PUSH
4901: LD_INT 32
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 58
4910: PUSH
4911: EMPTY
4912: LIST
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: PPUSH
4920: CALL_OW 69
4924: PUSH
4925: LD_INT 1
4927: ARRAY
4928: PPUSH
4929: CALL_OW 52
// PlaceHumanInUnit ( Bystrov , RusLab1 ) ;
4933: LD_EXP 38
4937: PPUSH
4938: LD_INT 2
4940: PPUSH
4941: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , RusLab2 ) ;
4945: LD_EXP 41
4949: PPUSH
4950: LD_INT 1
4952: PPUSH
4953: CALL_OW 52
// PlaceHumanInUnit ( Mikhail , RuDep1 ) ;
4957: LD_EXP 44
4961: PPUSH
4962: LD_INT 26
4964: PPUSH
4965: CALL_OW 52
// SetClass ( Mikhail , 2 ) ;
4969: LD_EXP 44
4973: PPUSH
4974: LD_INT 2
4976: PPUSH
4977: CALL_OW 336
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
4981: LD_INT 3
4983: PPUSH
4984: LD_INT 3
4986: PPUSH
4987: LD_INT 26
4989: PPUSH
4990: LD_INT 10
4992: PPUSH
4993: LD_INT 2
4995: PPUSH
4996: LD_INT 5
4998: PPUSH
4999: CALL 7751 0 6
// RespawnInside ( 3 , 3 , RuDep2 , 10 , 2 , 4 ) ;
5003: LD_INT 3
5005: PPUSH
5006: LD_INT 3
5008: PPUSH
5009: LD_INT 23
5011: PPUSH
5012: LD_INT 10
5014: PPUSH
5015: LD_INT 2
5017: PPUSH
5018: LD_INT 4
5020: PPUSH
5021: CALL 7751 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
5025: LD_INT 3
5027: PPUSH
5028: LD_INT 3
5030: PPUSH
5031: LD_INT 27
5033: PPUSH
5034: LD_INT 10
5036: PPUSH
5037: LD_INT 9
5039: PPUSH
5040: LD_INT 6
5042: PPUSH
5043: CALL 7751 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
5047: LD_INT 3
5049: PPUSH
5050: LD_INT 3
5052: PPUSH
5053: LD_INT 27
5055: PPUSH
5056: LD_INT 10
5058: PPUSH
5059: LD_INT 3
5061: PPUSH
5062: LD_INT 3
5064: PPUSH
5065: CALL 7751 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
5069: LD_INT 3
5071: PPUSH
5072: LD_INT 3
5074: PPUSH
5075: LD_INT 4
5077: PPUSH
5078: LD_INT 10
5080: PPUSH
5081: LD_INT 3
5083: PPUSH
5084: LD_INT 6
5086: PPUSH
5087: CALL 7751 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
5091: LD_INT 3
5093: PPUSH
5094: LD_INT 3
5096: PPUSH
5097: LD_INT 10
5099: PPUSH
5100: LD_INT 10
5102: PPUSH
5103: LD_INT 3
5105: PPUSH
5106: LD_INT 6
5108: PPUSH
5109: CALL 7751 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
5113: LD_INT 3
5115: PPUSH
5116: LD_INT 3
5118: PPUSH
5119: LD_INT 2
5121: PPUSH
5122: LD_INT 10
5124: PPUSH
5125: LD_INT 4
5127: PPUSH
5128: LD_INT 3
5130: PPUSH
5131: CALL 7751 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
5135: LD_INT 3
5137: PPUSH
5138: LD_INT 3
5140: PPUSH
5141: LD_INT 1
5143: PPUSH
5144: LD_INT 10
5146: PPUSH
5147: LD_INT 4
5149: PPUSH
5150: LD_INT 3
5152: PPUSH
5153: CALL 7751 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
5157: LD_ADDR_VAR 0 2
5161: PUSH
5162: LD_INT 22
5164: PUSH
5165: LD_INT 3
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: PUSH
5172: LD_INT 21
5174: PUSH
5175: LD_INT 3
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 30
5184: PUSH
5185: LD_INT 32
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: LD_INT 58
5194: PUSH
5195: EMPTY
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: PPUSH
5204: CALL_OW 69
5208: PUSH
5209: FOR_IN
5210: IFFALSE 5238
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
5212: LD_INT 3
5214: PPUSH
5215: LD_INT 3
5217: PPUSH
5218: LD_VAR 0 2
5222: PPUSH
5223: LD_INT 10
5225: PPUSH
5226: LD_INT 1
5228: PPUSH
5229: LD_INT 1
5231: PPUSH
5232: CALL 7751 0 6
5236: GO 5209
5238: POP
5239: POP
// end ;
5240: LD_VAR 0 1
5244: RET
// export function PrepareAttackFromKappa ; var i , veh , vehList ; begin
5245: LD_INT 0
5247: PPUSH
5248: PPUSH
5249: PPUSH
5250: PPUSH
// uc_side = 6 ;
5251: LD_ADDR_OWVAR 20
5255: PUSH
5256: LD_INT 6
5258: ST_TO_ADDR
// uc_nation = 1 ;
5259: LD_ADDR_OWVAR 21
5263: PUSH
5264: LD_INT 1
5266: ST_TO_ADDR
// vc_engine = 3 ;
5267: LD_ADDR_OWVAR 39
5271: PUSH
5272: LD_INT 3
5274: ST_TO_ADDR
// vc_control = 1 ;
5275: LD_ADDR_OWVAR 38
5279: PUSH
5280: LD_INT 1
5282: ST_TO_ADDR
// vc_chassis = 5 ;
5283: LD_ADDR_OWVAR 37
5287: PUSH
5288: LD_INT 5
5290: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5291: LD_ADDR_OWVAR 40
5295: PUSH
5296: LD_INT 5
5298: PUSH
5299: LD_INT 9
5301: PUSH
5302: LD_INT 7
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: LIST
5309: PUSH
5310: LD_INT 1
5312: PPUSH
5313: LD_INT 3
5315: PPUSH
5316: CALL_OW 12
5320: ARRAY
5321: ST_TO_ADDR
// sewiVeh = CreateVehicle ;
5322: LD_ADDR_EXP 34
5326: PUSH
5327: CALL_OW 45
5331: ST_TO_ADDR
// PlaceUnitArea ( sewiVeh , KappaSpawn , false ) ;
5332: LD_EXP 34
5336: PPUSH
5337: LD_INT 14
5339: PPUSH
5340: LD_INT 0
5342: PPUSH
5343: CALL_OW 49
// Vsevolod = PrepareUnit ( Vsevolod , false ) ;
5347: LD_ADDR_EXP 33
5351: PUSH
5352: LD_STRING Vsevolod
5354: PPUSH
5355: LD_INT 0
5357: PPUSH
5358: CALL 6633 0 2
5362: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , sewiVeh ) ;
5363: LD_EXP 33
5367: PPUSH
5368: LD_EXP 34
5372: PPUSH
5373: CALL_OW 52
// for i := 1 to 5 do
5377: LD_ADDR_VAR 0 2
5381: PUSH
5382: DOUBLE
5383: LD_INT 1
5385: DEC
5386: ST_TO_ADDR
5387: LD_INT 5
5389: PUSH
5390: FOR_TO
5391: IFFALSE 5475
// begin vc_engine = 3 ;
5393: LD_ADDR_OWVAR 39
5397: PUSH
5398: LD_INT 3
5400: ST_TO_ADDR
// vc_control = 3 ;
5401: LD_ADDR_OWVAR 38
5405: PUSH
5406: LD_INT 3
5408: ST_TO_ADDR
// vc_chassis = 3 ;
5409: LD_ADDR_OWVAR 37
5413: PUSH
5414: LD_INT 3
5416: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5417: LD_ADDR_OWVAR 40
5421: PUSH
5422: LD_INT 5
5424: PUSH
5425: LD_INT 9
5427: PUSH
5428: LD_INT 7
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 1
5438: PPUSH
5439: LD_INT 3
5441: PPUSH
5442: CALL_OW 12
5446: ARRAY
5447: ST_TO_ADDR
// veh = CreateVehicle ;
5448: LD_ADDR_VAR 0 3
5452: PUSH
5453: CALL_OW 45
5457: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5458: LD_VAR 0 3
5462: PPUSH
5463: LD_INT 14
5465: PPUSH
5466: LD_INT 0
5468: PPUSH
5469: CALL_OW 49
// end ;
5473: GO 5390
5475: POP
5476: POP
// uc_nation = 3 ;
5477: LD_ADDR_OWVAR 21
5481: PUSH
5482: LD_INT 3
5484: ST_TO_ADDR
// for i := 1 to 7 do
5485: LD_ADDR_VAR 0 2
5489: PUSH
5490: DOUBLE
5491: LD_INT 1
5493: DEC
5494: ST_TO_ADDR
5495: LD_INT 7
5497: PUSH
5498: FOR_TO
5499: IFFALSE 5591
// begin vc_engine = 3 ;
5501: LD_ADDR_OWVAR 39
5505: PUSH
5506: LD_INT 3
5508: ST_TO_ADDR
// vc_control = 3 ;
5509: LD_ADDR_OWVAR 38
5513: PUSH
5514: LD_INT 3
5516: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
5517: LD_ADDR_OWVAR 37
5521: PUSH
5522: LD_INT 24
5524: ST_TO_ADDR
// vc_weapon = [ 44 , 47 , 45 , 46 , 49 ] [ Rand ( 1 , 4 ) ] ;
5525: LD_ADDR_OWVAR 40
5529: PUSH
5530: LD_INT 44
5532: PUSH
5533: LD_INT 47
5535: PUSH
5536: LD_INT 45
5538: PUSH
5539: LD_INT 46
5541: PUSH
5542: LD_INT 49
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: PUSH
5552: LD_INT 1
5554: PPUSH
5555: LD_INT 4
5557: PPUSH
5558: CALL_OW 12
5562: ARRAY
5563: ST_TO_ADDR
// veh = CreateVehicle ;
5564: LD_ADDR_VAR 0 3
5568: PUSH
5569: CALL_OW 45
5573: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5574: LD_VAR 0 3
5578: PPUSH
5579: LD_INT 14
5581: PPUSH
5582: LD_INT 0
5584: PPUSH
5585: CALL_OW 49
// end ;
5589: GO 5498
5591: POP
5592: POP
// repeat wait ( 0 0$1 ) ;
5593: LD_INT 35
5595: PPUSH
5596: CALL_OW 67
// vehList = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
5600: LD_ADDR_VAR 0 4
5604: PUSH
5605: LD_INT 22
5607: PUSH
5608: LD_INT 6
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: LD_INT 21
5617: PUSH
5618: LD_INT 2
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PUSH
5625: LD_INT 50
5627: PUSH
5628: EMPTY
5629: LIST
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: LIST
5635: PPUSH
5636: CALL_OW 69
5640: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
5641: LD_EXP 1
5645: PPUSH
5646: CALL_OW 310
5650: NOT
5651: IFFALSE 5684
// ComAgressiveMove ( vehList , GetX ( JMM ) , GetY ( JMM ) ) else
5653: LD_VAR 0 4
5657: PPUSH
5658: LD_EXP 1
5662: PPUSH
5663: CALL_OW 250
5667: PPUSH
5668: LD_EXP 1
5672: PPUSH
5673: CALL_OW 251
5677: PPUSH
5678: CALL_OW 114
5682: GO 5723
// ComAgressiveMove ( vehList , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) ;
5684: LD_VAR 0 4
5688: PPUSH
5689: LD_EXP 1
5693: PPUSH
5694: CALL_OW 310
5698: PPUSH
5699: CALL_OW 250
5703: PPUSH
5704: LD_EXP 1
5708: PPUSH
5709: CALL_OW 310
5713: PPUSH
5714: CALL_OW 251
5718: PPUSH
5719: CALL_OW 114
// until vehList = 0 ;
5723: LD_VAR 0 4
5727: PUSH
5728: LD_INT 0
5730: EQUAL
5731: IFFALSE 5593
// end ;
5733: LD_VAR 0 1
5737: RET
// export function PreapreMehBehs ; var i , un ; begin
5738: LD_INT 0
5740: PPUSH
5741: PPUSH
5742: PPUSH
// uc_side = 6 ;
5743: LD_ADDR_OWVAR 20
5747: PUSH
5748: LD_INT 6
5750: ST_TO_ADDR
// uc_nation = 3 ;
5751: LD_ADDR_OWVAR 21
5755: PUSH
5756: LD_INT 3
5758: ST_TO_ADDR
// for i := 1 to 3 do
5759: LD_ADDR_VAR 0 2
5763: PUSH
5764: DOUBLE
5765: LD_INT 1
5767: DEC
5768: ST_TO_ADDR
5769: LD_INT 3
5771: PUSH
5772: FOR_TO
5773: IFFALSE 5844
// begin hc_name =  ;
5775: LD_ADDR_OWVAR 26
5779: PUSH
5780: LD_STRING 
5782: ST_TO_ADDR
// hc_gallery =  ;
5783: LD_ADDR_OWVAR 33
5787: PUSH
5788: LD_STRING 
5790: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
5791: LD_INT 0
5793: PPUSH
5794: LD_INT 10
5796: PPUSH
5797: CALL_OW 383
// un = CreateHuman ;
5801: LD_ADDR_VAR 0 3
5805: PUSH
5806: CALL_OW 44
5810: ST_TO_ADDR
// ruBehMehs = ruBehMehs ^ un ;
5811: LD_ADDR_EXP 57
5815: PUSH
5816: LD_EXP 57
5820: PUSH
5821: LD_VAR 0 3
5825: ADD
5826: ST_TO_ADDR
// PlaceUnitArea ( un , RuMehBehSpawn , false ) ;
5827: LD_VAR 0 3
5831: PPUSH
5832: LD_INT 17
5834: PPUSH
5835: LD_INT 0
5837: PPUSH
5838: CALL_OW 49
// end ;
5842: GO 5772
5844: POP
5845: POP
// PlaceUnitArea ( Kovalyuk , RuMehBehSpawn , false ) ;
5846: LD_EXP 36
5850: PPUSH
5851: LD_INT 17
5853: PPUSH
5854: LD_INT 0
5856: PPUSH
5857: CALL_OW 49
// SetSide ( Kovalyuk , 6 ) ;
5861: LD_EXP 36
5865: PPUSH
5866: LD_INT 6
5868: PPUSH
5869: CALL_OW 235
// SetSide ( RuBehDep , 6 ) ;
5873: LD_INT 145
5875: PPUSH
5876: LD_INT 6
5878: PPUSH
5879: CALL_OW 235
// ComBuildBehemoth ( ruBehMehs [ 1 ] , b_behemoth , 193 , 118 , 0 ) ;
5883: LD_EXP 57
5887: PUSH
5888: LD_INT 1
5890: ARRAY
5891: PPUSH
5892: LD_INT 37
5894: PPUSH
5895: LD_INT 193
5897: PPUSH
5898: LD_INT 118
5900: PPUSH
5901: LD_INT 0
5903: PPUSH
5904: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 2 ] , b_behemoth , 204 , 119 , 0 ) ;
5908: LD_EXP 57
5912: PUSH
5913: LD_INT 2
5915: ARRAY
5916: PPUSH
5917: LD_INT 37
5919: PPUSH
5920: LD_INT 204
5922: PPUSH
5923: LD_INT 119
5925: PPUSH
5926: LD_INT 0
5928: PPUSH
5929: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 3 ] , b_behemoth , 195 , 126 , 0 ) ;
5933: LD_EXP 57
5937: PUSH
5938: LD_INT 3
5940: ARRAY
5941: PPUSH
5942: LD_INT 37
5944: PPUSH
5945: LD_INT 195
5947: PPUSH
5948: LD_INT 126
5950: PPUSH
5951: LD_INT 0
5953: PPUSH
5954: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 4 ] , b_behemoth , 207 , 126 , 0 ) ;
5958: LD_EXP 57
5962: PUSH
5963: LD_INT 4
5965: ARRAY
5966: PPUSH
5967: LD_INT 37
5969: PPUSH
5970: LD_INT 207
5972: PPUSH
5973: LD_INT 126
5975: PPUSH
5976: LD_INT 0
5978: PPUSH
5979: CALL_OW 170
// end ; end_of_file
5983: LD_VAR 0 1
5987: RET
// export function PrepareAlliance ; var i ; begin
5988: LD_INT 0
5990: PPUSH
5991: PPUSH
// uc_side = 7 ;
5992: LD_ADDR_OWVAR 20
5996: PUSH
5997: LD_INT 7
5999: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
6000: LD_ADDR_EXP 28
6004: PUSH
6005: LD_STRING Roth
6007: PPUSH
6008: LD_INT 0
6010: PPUSH
6011: CALL 6633 0 2
6015: ST_TO_ADDR
// PlaceUnitArea ( Roth , RothSpawn , false ) ;
6016: LD_EXP 28
6020: PPUSH
6021: LD_INT 31
6023: PPUSH
6024: LD_INT 0
6026: PPUSH
6027: CALL_OW 49
// ComTurnXY ( Roth , 248 , 187 ) ;
6031: LD_EXP 28
6035: PPUSH
6036: LD_INT 248
6038: PPUSH
6039: LD_INT 187
6041: PPUSH
6042: CALL_OW 118
// if TestCharacters ( 10c_Simms ) = true then
6046: LD_STRING 10c_Simms
6048: PPUSH
6049: CALL_OW 28
6053: PUSH
6054: LD_INT 1
6056: EQUAL
6057: IFFALSE 6107
// begin Simms = PrepareUnit ( 10c_Simms , true ) ;
6059: LD_ADDR_EXP 47
6063: PUSH
6064: LD_STRING 10c_Simms
6066: PPUSH
6067: LD_INT 1
6069: PPUSH
6070: CALL 6633 0 2
6074: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6075: LD_EXP 47
6079: PPUSH
6080: LD_INT 32
6082: PPUSH
6083: LD_INT 0
6085: PPUSH
6086: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6090: LD_EXP 47
6094: PPUSH
6095: LD_INT 248
6097: PPUSH
6098: LD_INT 187
6100: PPUSH
6101: CALL_OW 118
// end else
6105: GO 6181
// begin uc_nation = 1 ;
6107: LD_ADDR_OWVAR 21
6111: PUSH
6112: LD_INT 1
6114: ST_TO_ADDR
// hc_name =  ;
6115: LD_ADDR_OWVAR 26
6119: PUSH
6120: LD_STRING 
6122: ST_TO_ADDR
// hc_gallery =  ;
6123: LD_ADDR_OWVAR 33
6127: PUSH
6128: LD_STRING 
6130: ST_TO_ADDR
// PrepareScientist ( sex_female , 10 ) ;
6131: LD_INT 2
6133: PPUSH
6134: LD_INT 10
6136: PPUSH
6137: CALL_OW 384
// Simms = CreateHuman ;
6141: LD_ADDR_EXP 47
6145: PUSH
6146: CALL_OW 44
6150: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6151: LD_EXP 47
6155: PPUSH
6156: LD_INT 32
6158: PPUSH
6159: LD_INT 0
6161: PPUSH
6162: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6166: LD_EXP 47
6170: PPUSH
6171: LD_INT 248
6173: PPUSH
6174: LD_INT 187
6176: PPUSH
6177: CALL_OW 118
// end ; Scholtze = PrepareUnit ( Scholtze , false ) ;
6181: LD_ADDR_EXP 48
6185: PUSH
6186: LD_STRING Scholtze
6188: PPUSH
6189: LD_INT 0
6191: PPUSH
6192: CALL 6633 0 2
6196: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , false ) ;
6197: LD_ADDR_EXP 49
6201: PUSH
6202: LD_STRING Kirilenkova
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL 6633 0 2
6212: ST_TO_ADDR
// Kapitsova = PrepareUnit ( Kapitsova , false ) ;
6213: LD_ADDR_EXP 50
6217: PUSH
6218: LD_STRING Kapitsova
6220: PPUSH
6221: LD_INT 0
6223: PPUSH
6224: CALL 6633 0 2
6228: ST_TO_ADDR
// Karamazov = PrepareUnit ( Karamazov , false ) ;
6229: LD_ADDR_EXP 51
6233: PUSH
6234: LD_STRING Karamazov
6236: PPUSH
6237: LD_INT 0
6239: PPUSH
6240: CALL 6633 0 2
6244: ST_TO_ADDR
// PlaceHumanInUnit ( Scholtze , AllLabR1 ) ;
6245: LD_EXP 48
6249: PPUSH
6250: LD_INT 39
6252: PPUSH
6253: CALL_OW 52
// PlaceHumanInUnit ( Kirilenkova , AllLabR2 ) ;
6257: LD_EXP 49
6261: PPUSH
6262: LD_INT 133
6264: PPUSH
6265: CALL_OW 52
// PlaceHumanInUnit ( Kapitsova , AllLabR2 ) ;
6269: LD_EXP 50
6273: PPUSH
6274: LD_INT 133
6276: PPUSH
6277: CALL_OW 52
// PlaceHumanInUnit ( Karamazov , AllDep ) ;
6281: LD_EXP 51
6285: PPUSH
6286: LD_INT 45
6288: PPUSH
6289: CALL_OW 52
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 2 ) ;
6293: LD_INT 7
6295: PPUSH
6296: LD_INT 1
6298: PPUSH
6299: LD_INT 45
6301: PPUSH
6302: LD_INT 10
6304: PPUSH
6305: LD_INT 2
6307: PPUSH
6308: LD_INT 2
6310: PPUSH
6311: CALL 7751 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
6315: LD_INT 7
6317: PPUSH
6318: LD_INT 3
6320: PPUSH
6321: LD_INT 45
6323: PPUSH
6324: LD_INT 10
6326: PPUSH
6327: LD_INT 2
6329: PPUSH
6330: LD_INT 2
6332: PPUSH
6333: CALL 7751 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
6337: LD_INT 7
6339: PPUSH
6340: LD_INT 1
6342: PPUSH
6343: LD_INT 194
6345: PPUSH
6346: LD_INT 10
6348: PPUSH
6349: LD_INT 5
6351: PPUSH
6352: LD_INT 4
6354: PPUSH
6355: CALL 7751 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
6359: LD_INT 7
6361: PPUSH
6362: LD_INT 3
6364: PPUSH
6365: LD_INT 194
6367: PPUSH
6368: LD_INT 10
6370: PPUSH
6371: LD_INT 8
6373: PPUSH
6374: LD_INT 6
6376: PPUSH
6377: CALL 7751 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
6381: LD_INT 7
6383: PPUSH
6384: LD_INT 1
6386: PPUSH
6387: LD_INT 156
6389: PPUSH
6390: LD_INT 10
6392: PPUSH
6393: LD_INT 3
6395: PPUSH
6396: LD_INT 6
6398: PPUSH
6399: CALL 7751 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
6403: LD_INT 7
6405: PPUSH
6406: LD_INT 3
6408: PPUSH
6409: LD_INT 162
6411: PPUSH
6412: LD_INT 10
6414: PPUSH
6415: LD_INT 3
6417: PPUSH
6418: LD_INT 6
6420: PPUSH
6421: CALL 7751 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 3 ) ;
6425: LD_INT 7
6427: PPUSH
6428: LD_INT 3
6430: PPUSH
6431: LD_INT 39
6433: PPUSH
6434: LD_INT 10
6436: PPUSH
6437: LD_INT 4
6439: PPUSH
6440: LD_INT 3
6442: PPUSH
6443: CALL 7751 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 2 ) ;
6447: LD_INT 7
6449: PPUSH
6450: LD_INT 3
6452: PPUSH
6453: LD_INT 133
6455: PPUSH
6456: LD_INT 10
6458: PPUSH
6459: LD_INT 4
6461: PPUSH
6462: LD_INT 2
6464: PPUSH
6465: CALL 7751 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
6469: LD_INT 7
6471: PPUSH
6472: LD_INT 1
6474: PPUSH
6475: LD_INT 46
6477: PPUSH
6478: LD_INT 10
6480: PPUSH
6481: LD_INT 4
6483: PPUSH
6484: LD_INT 2
6486: PPUSH
6487: CALL 7751 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
6491: LD_ADDR_VAR 0 2
6495: PUSH
6496: LD_INT 22
6498: PUSH
6499: LD_INT 7
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: PUSH
6506: LD_INT 21
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: PUSH
6516: LD_INT 30
6518: PUSH
6519: LD_INT 32
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: LD_INT 58
6528: PUSH
6529: EMPTY
6530: LIST
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: PPUSH
6538: CALL_OW 69
6542: PUSH
6543: FOR_IN
6544: IFFALSE 6591
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
6546: LD_INT 7
6548: PPUSH
6549: LD_INT 1
6551: PUSH
6552: LD_INT 3
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 1
6561: PPUSH
6562: LD_INT 2
6564: PPUSH
6565: CALL_OW 12
6569: ARRAY
6570: PPUSH
6571: LD_VAR 0 2
6575: PPUSH
6576: LD_INT 10
6578: PPUSH
6579: LD_INT 1
6581: PPUSH
6582: LD_INT 1
6584: PPUSH
6585: CALL 7751 0 6
6589: GO 6543
6591: POP
6592: POP
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 3 ) ;
6593: LD_INT 7
6595: PPUSH
6596: LD_INT 1
6598: PPUSH
6599: LD_INT 226
6601: PPUSH
6602: LD_INT 10
6604: PPUSH
6605: LD_INT 3
6607: PPUSH
6608: LD_INT 3
6610: PPUSH
6611: CALL 7751 0 6
// allianceControler = UnitsInside ( AllControl ) ;
6615: LD_ADDR_EXP 62
6619: PUSH
6620: LD_INT 226
6622: PPUSH
6623: CALL_OW 313
6627: ST_TO_ADDR
// end ; end_of_file
6628: LD_VAR 0 1
6632: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6633: LD_INT 0
6635: PPUSH
6636: PPUSH
// if exist_mode then
6637: LD_VAR 0 2
6641: IFFALSE 6660
// unit := CreateCharacter ( ident ) else
6643: LD_ADDR_VAR 0 4
6647: PUSH
6648: LD_VAR 0 1
6652: PPUSH
6653: CALL_OW 34
6657: ST_TO_ADDR
6658: GO 6675
// unit := NewCharacter ( ident ) ;
6660: LD_ADDR_VAR 0 4
6664: PUSH
6665: LD_VAR 0 1
6669: PPUSH
6670: CALL_OW 25
6674: ST_TO_ADDR
// result := unit ;
6675: LD_ADDR_VAR 0 3
6679: PUSH
6680: LD_VAR 0 4
6684: ST_TO_ADDR
// end ;
6685: LD_VAR 0 3
6689: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
6690: LD_INT 0
6692: PPUSH
6693: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
6694: LD_STRING 13s_
6696: PUSH
6697: LD_VAR 0 1
6701: STR
6702: PPUSH
6703: CALL_OW 28
6707: PUSH
6708: LD_INT 1
6710: EQUAL
6711: IFFALSE 6732
// unit = CreateCharacter ( 13s_ & ident ) ;
6713: LD_ADDR_VAR 0 3
6717: PUSH
6718: LD_STRING 13s_
6720: PUSH
6721: LD_VAR 0 1
6725: STR
6726: PPUSH
6727: CALL_OW 34
6731: ST_TO_ADDR
// result := unit ;
6732: LD_ADDR_VAR 0 2
6736: PUSH
6737: LD_VAR 0 3
6741: ST_TO_ADDR
// end ;
6742: LD_VAR 0 2
6746: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
6747: LD_INT 0
6749: PPUSH
6750: PPUSH
// if TestCharacters ( 15_ & ident ) = true then
6751: LD_STRING 15_
6753: PUSH
6754: LD_VAR 0 1
6758: STR
6759: PPUSH
6760: CALL_OW 28
6764: PUSH
6765: LD_INT 1
6767: EQUAL
6768: IFFALSE 6805
// begin unit = CreateCharacter ( 15_ & ident ) ;
6770: LD_ADDR_VAR 0 3
6774: PUSH
6775: LD_STRING 15_
6777: PUSH
6778: LD_VAR 0 1
6782: STR
6783: PPUSH
6784: CALL_OW 34
6788: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ unit ;
6789: LD_ADDR_EXP 20
6793: PUSH
6794: LD_EXP 20
6798: PUSH
6799: LD_VAR 0 3
6803: ADD
6804: ST_TO_ADDR
// end ; result := unit ;
6805: LD_ADDR_VAR 0 2
6809: PUSH
6810: LD_VAR 0 3
6814: ST_TO_ADDR
// end ;
6815: LD_VAR 0 2
6819: RET
// export function TabLenght ( tab ) ; var i ; begin
6820: LD_INT 0
6822: PPUSH
6823: PPUSH
// for i = 1 to tab do
6824: LD_ADDR_VAR 0 3
6828: PUSH
6829: DOUBLE
6830: LD_INT 1
6832: DEC
6833: ST_TO_ADDR
6834: LD_VAR 0 1
6838: PUSH
6839: FOR_TO
6840: IFFALSE 6854
// result = i ;
6842: LD_ADDR_VAR 0 2
6846: PUSH
6847: LD_VAR 0 3
6851: ST_TO_ADDR
6852: GO 6839
6854: POP
6855: POP
// end ;
6856: LD_VAR 0 2
6860: RET
// export function Video ( mode ) ; begin
6861: LD_INT 0
6863: PPUSH
// if mode = true then
6864: LD_VAR 0 1
6868: PUSH
6869: LD_INT 1
6871: EQUAL
6872: IFFALSE 6892
// begin ingame_video = true ;
6874: LD_ADDR_OWVAR 52
6878: PUSH
6879: LD_INT 1
6881: ST_TO_ADDR
// interface_hidden = true ;
6882: LD_ADDR_OWVAR 54
6886: PUSH
6887: LD_INT 1
6889: ST_TO_ADDR
// end else
6890: GO 6908
// begin ingame_video = false ;
6892: LD_ADDR_OWVAR 52
6896: PUSH
6897: LD_INT 0
6899: ST_TO_ADDR
// interface_hidden = false ;
6900: LD_ADDR_OWVAR 54
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// end ; end ;
6908: LD_VAR 0 2
6912: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6913: LD_INT 0
6915: PPUSH
6916: PPUSH
6917: PPUSH
// characters := characters diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6918: LD_ADDR_VAR 0 1
6922: PUSH
6923: LD_VAR 0 1
6927: PUSH
6928: LD_EXP 1
6932: PUSH
6933: LD_EXP 3
6937: PUSH
6938: LD_EXP 21
6942: PUSH
6943: LD_EXP 22
6947: PUSH
6948: LD_EXP 23
6952: PUSH
6953: LD_EXP 4
6957: PUSH
6958: LD_EXP 5
6962: PUSH
6963: LD_EXP 6
6967: PUSH
6968: LD_EXP 7
6972: PUSH
6973: LD_EXP 8
6977: PUSH
6978: LD_EXP 9
6982: PUSH
6983: LD_EXP 10
6987: PUSH
6988: LD_EXP 11
6992: PUSH
6993: LD_EXP 12
6997: PUSH
6998: LD_EXP 13
7002: PUSH
7003: LD_EXP 14
7007: PUSH
7008: LD_EXP 15
7012: PUSH
7013: LD_EXP 17
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: DIFF
7038: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
7039: LD_ADDR_VAR 0 6
7043: PUSH
7044: LD_INT 1
7046: PPUSH
7047: LD_VAR 0 1
7051: PPUSH
7052: CALL_OW 12
7056: ST_TO_ADDR
// for i = 1 to characters do
7057: LD_ADDR_VAR 0 5
7061: PUSH
7062: DOUBLE
7063: LD_INT 1
7065: DEC
7066: ST_TO_ADDR
7067: LD_VAR 0 1
7071: PUSH
7072: FOR_TO
7073: IFFALSE 7183
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7075: LD_VAR 0 5
7079: PUSH
7080: LD_VAR 0 6
7084: EQUAL
7085: PUSH
7086: LD_VAR 0 1
7090: PUSH
7091: LD_VAR 0 5
7095: ARRAY
7096: PPUSH
7097: CALL_OW 258
7101: PUSH
7102: LD_INT 1
7104: EQUAL
7105: AND
7106: IFFALSE 7128
// Say ( characters [ i ] , dialogMID ) ;
7108: LD_VAR 0 1
7112: PUSH
7113: LD_VAR 0 5
7117: ARRAY
7118: PPUSH
7119: LD_VAR 0 2
7123: PPUSH
7124: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7128: LD_VAR 0 5
7132: PUSH
7133: LD_VAR 0 6
7137: EQUAL
7138: PUSH
7139: LD_VAR 0 1
7143: PUSH
7144: LD_VAR 0 5
7148: ARRAY
7149: PPUSH
7150: CALL_OW 258
7154: PUSH
7155: LD_INT 2
7157: EQUAL
7158: AND
7159: IFFALSE 7181
// Say ( characters [ i ] , dialogFID ) ;
7161: LD_VAR 0 1
7165: PUSH
7166: LD_VAR 0 5
7170: ARRAY
7171: PPUSH
7172: LD_VAR 0 3
7176: PPUSH
7177: CALL_OW 88
// end ;
7181: GO 7072
7183: POP
7184: POP
// end ;
7185: LD_VAR 0 4
7189: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
// if not list then
7196: LD_VAR 0 1
7200: NOT
7201: IFFALSE 7205
// exit ;
7203: GO 7552
// result := [ ] ;
7205: LD_ADDR_VAR 0 3
7209: PUSH
7210: EMPTY
7211: ST_TO_ADDR
// for i in list do
7212: LD_ADDR_VAR 0 4
7216: PUSH
7217: LD_VAR 0 1
7221: PUSH
7222: FOR_IN
7223: IFFALSE 7464
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
7225: LD_ADDR_VAR 0 6
7229: PUSH
7230: LD_VAR 0 4
7234: PPUSH
7235: LD_INT 1
7237: PPUSH
7238: CALL_OW 259
7242: PUSH
7243: LD_VAR 0 4
7247: PPUSH
7248: LD_INT 2
7250: PPUSH
7251: CALL_OW 259
7255: PLUS
7256: PUSH
7257: LD_VAR 0 4
7261: PPUSH
7262: LD_INT 3
7264: PPUSH
7265: CALL_OW 259
7269: PLUS
7270: PUSH
7271: LD_VAR 0 4
7275: PPUSH
7276: LD_INT 4
7278: PPUSH
7279: CALL_OW 259
7283: PLUS
7284: PUSH
7285: LD_INT 4
7287: DIV
7288: ST_TO_ADDR
// if not result then
7289: LD_VAR 0 3
7293: NOT
7294: IFFALSE 7320
// result := [ [ i , tmp ] ] else
7296: LD_ADDR_VAR 0 3
7300: PUSH
7301: LD_VAR 0 4
7305: PUSH
7306: LD_VAR 0 6
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PUSH
7315: EMPTY
7316: LIST
7317: ST_TO_ADDR
7318: GO 7462
// begin if result [ result ] [ 2 ] <= tmp then
7320: LD_VAR 0 3
7324: PUSH
7325: LD_VAR 0 3
7329: ARRAY
7330: PUSH
7331: LD_INT 2
7333: ARRAY
7334: PUSH
7335: LD_VAR 0 6
7339: LESSEQUAL
7340: IFFALSE 7382
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7342: LD_ADDR_VAR 0 3
7346: PUSH
7347: LD_VAR 0 3
7351: PPUSH
7352: LD_VAR 0 3
7356: PUSH
7357: LD_INT 1
7359: PLUS
7360: PPUSH
7361: LD_VAR 0 4
7365: PUSH
7366: LD_VAR 0 6
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 2
7379: ST_TO_ADDR
7380: GO 7462
// for j = 1 to result do
7382: LD_ADDR_VAR 0 5
7386: PUSH
7387: DOUBLE
7388: LD_INT 1
7390: DEC
7391: ST_TO_ADDR
7392: LD_VAR 0 3
7396: PUSH
7397: FOR_TO
7398: IFFALSE 7460
// begin if tmp < result [ j ] [ 2 ] then
7400: LD_VAR 0 6
7404: PUSH
7405: LD_VAR 0 3
7409: PUSH
7410: LD_VAR 0 5
7414: ARRAY
7415: PUSH
7416: LD_INT 2
7418: ARRAY
7419: LESS
7420: IFFALSE 7458
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7422: LD_ADDR_VAR 0 3
7426: PUSH
7427: LD_VAR 0 3
7431: PPUSH
7432: LD_VAR 0 5
7436: PPUSH
7437: LD_VAR 0 4
7441: PUSH
7442: LD_VAR 0 6
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PPUSH
7451: CALL_OW 2
7455: ST_TO_ADDR
// break ;
7456: GO 7460
// end ; end ;
7458: GO 7397
7460: POP
7461: POP
// end ; end ;
7462: GO 7222
7464: POP
7465: POP
// if result and not asc then
7466: LD_VAR 0 3
7470: PUSH
7471: LD_VAR 0 2
7475: NOT
7476: AND
7477: IFFALSE 7552
// begin tmp := result ;
7479: LD_ADDR_VAR 0 6
7483: PUSH
7484: LD_VAR 0 3
7488: ST_TO_ADDR
// for i = tmp downto 1 do
7489: LD_ADDR_VAR 0 4
7493: PUSH
7494: DOUBLE
7495: LD_VAR 0 6
7499: INC
7500: ST_TO_ADDR
7501: LD_INT 1
7503: PUSH
7504: FOR_DOWNTO
7505: IFFALSE 7550
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7507: LD_ADDR_VAR 0 3
7511: PUSH
7512: LD_VAR 0 3
7516: PPUSH
7517: LD_VAR 0 6
7521: PUSH
7522: LD_VAR 0 4
7526: MINUS
7527: PUSH
7528: LD_INT 1
7530: PLUS
7531: PPUSH
7532: LD_VAR 0 6
7536: PUSH
7537: LD_VAR 0 4
7541: ARRAY
7542: PPUSH
7543: CALL_OW 1
7547: ST_TO_ADDR
7548: GO 7504
7550: POP
7551: POP
// end ; end ;
7552: LD_VAR 0 3
7556: RET
// export function PrepareDifficulty ; begin
7557: LD_INT 0
7559: PPUSH
// if difficulty = 1 then
7560: LD_OWVAR 67
7564: PUSH
7565: LD_INT 1
7567: EQUAL
7568: IFFALSE 7596
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7570: LD_INT 51
7572: PPUSH
7573: LD_INT 6
7575: PPUSH
7576: LD_INT 2
7578: PPUSH
7579: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7583: LD_INT 57
7585: PPUSH
7586: LD_INT 6
7588: PPUSH
7589: LD_INT 2
7591: PPUSH
7592: CALL_OW 322
// end ; if difficulty = 2 then
7596: LD_OWVAR 67
7600: PUSH
7601: LD_INT 2
7603: EQUAL
7604: IFFALSE 7658
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7606: LD_INT 51
7608: PPUSH
7609: LD_INT 6
7611: PPUSH
7612: LD_INT 2
7614: PPUSH
7615: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7619: LD_INT 57
7621: PPUSH
7622: LD_INT 6
7624: PPUSH
7625: LD_INT 2
7627: PPUSH
7628: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7632: LD_INT 52
7634: PPUSH
7635: LD_INT 6
7637: PPUSH
7638: LD_INT 2
7640: PPUSH
7641: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7645: LD_INT 58
7647: PPUSH
7648: LD_INT 6
7650: PPUSH
7651: LD_INT 2
7653: PPUSH
7654: CALL_OW 322
// end ; if difficulty = 3 then
7658: LD_OWVAR 67
7662: PUSH
7663: LD_INT 3
7665: EQUAL
7666: IFFALSE 7746
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7668: LD_INT 51
7670: PPUSH
7671: LD_INT 6
7673: PPUSH
7674: LD_INT 2
7676: PPUSH
7677: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7681: LD_INT 57
7683: PPUSH
7684: LD_INT 6
7686: PPUSH
7687: LD_INT 2
7689: PPUSH
7690: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7694: LD_INT 52
7696: PPUSH
7697: LD_INT 6
7699: PPUSH
7700: LD_INT 2
7702: PPUSH
7703: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7707: LD_INT 58
7709: PPUSH
7710: LD_INT 6
7712: PPUSH
7713: LD_INT 2
7715: PPUSH
7716: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
7720: LD_INT 53
7722: PPUSH
7723: LD_INT 6
7725: PPUSH
7726: LD_INT 2
7728: PPUSH
7729: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
7733: LD_INT 59
7735: PPUSH
7736: LD_INT 6
7738: PPUSH
7739: LD_INT 2
7741: PPUSH
7742: CALL_OW 322
// end ; end ;
7746: LD_VAR 0 1
7750: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
7751: LD_INT 0
7753: PPUSH
7754: PPUSH
7755: PPUSH
7756: PPUSH
7757: PPUSH
// for i = 1 to count do
7758: LD_ADDR_VAR 0 8
7762: PUSH
7763: DOUBLE
7764: LD_INT 1
7766: DEC
7767: ST_TO_ADDR
7768: LD_VAR 0 6
7772: PUSH
7773: FOR_TO
7774: IFFALSE 7855
// begin uc_side = side ;
7776: LD_ADDR_OWVAR 20
7780: PUSH
7781: LD_VAR 0 1
7785: ST_TO_ADDR
// uc_nation = nation ;
7786: LD_ADDR_OWVAR 21
7790: PUSH
7791: LD_VAR 0 2
7795: ST_TO_ADDR
// hc_gallery =  ;
7796: LD_ADDR_OWVAR 33
7800: PUSH
7801: LD_STRING 
7803: ST_TO_ADDR
// hc_name =  ;
7804: LD_ADDR_OWVAR 26
7808: PUSH
7809: LD_STRING 
7811: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7812: LD_INT 0
7814: PPUSH
7815: LD_VAR 0 5
7819: PPUSH
7820: LD_VAR 0 4
7824: PPUSH
7825: CALL_OW 380
// un = CreateHuman ;
7829: LD_ADDR_VAR 0 10
7833: PUSH
7834: CALL_OW 44
7838: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7839: LD_VAR 0 10
7843: PPUSH
7844: LD_VAR 0 3
7848: PPUSH
7849: CALL_OW 52
// end ;
7853: GO 7773
7855: POP
7856: POP
// end ;
7857: LD_VAR 0 7
7861: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7862: LD_INT 0
7864: PPUSH
7865: PPUSH
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
7870: PPUSH
7871: PPUSH
7872: PPUSH
7873: PPUSH
7874: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7875: LD_INT 2100
7877: PUSH
7878: LD_INT 3150
7880: PUSH
7881: LD_INT 4200
7883: PUSH
7884: LD_INT 5250
7886: PUSH
7887: LD_INT 6300
7889: PUSH
7890: LD_INT 7350
7892: PUSH
7893: LD_INT 8400
7895: PUSH
7896: LD_INT 9450
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 1
7911: PPUSH
7912: LD_INT 8
7914: PPUSH
7915: CALL_OW 12
7919: ARRAY
7920: PPUSH
7921: CALL_OW 67
// amChassisTab = [ ] ;
7925: LD_ADDR_VAR 0 19
7929: PUSH
7930: EMPTY
7931: ST_TO_ADDR
// arChassisTab = [ ] ;
7932: LD_ADDR_VAR 0 18
7936: PUSH
7937: EMPTY
7938: ST_TO_ADDR
// ruChassisTab = [ ] ;
7939: LD_ADDR_VAR 0 17
7943: PUSH
7944: EMPTY
7945: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7946: LD_INT 35
7948: PPUSH
7949: CALL_OW 67
// if nation = 1 then
7953: LD_VAR 0 5
7957: PUSH
7958: LD_INT 1
7960: EQUAL
7961: IFFALSE 8452
// begin uc_side = side ;
7963: LD_ADDR_OWVAR 20
7967: PUSH
7968: LD_VAR 0 2
7972: ST_TO_ADDR
// uc_nation = nation ;
7973: LD_ADDR_OWVAR 21
7977: PUSH
7978: LD_VAR 0 5
7982: ST_TO_ADDR
// vc_engine = vehengine ;
7983: LD_ADDR_OWVAR 39
7987: PUSH
7988: LD_VAR 0 6
7992: ST_TO_ADDR
// vc_control = vehcontrol ;
7993: LD_ADDR_OWVAR 38
7997: PUSH
7998: LD_VAR 0 7
8002: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8003: LD_ADDR_OWVAR 40
8007: PUSH
8008: LD_VAR 0 10
8012: PUSH
8013: LD_INT 1
8015: PPUSH
8016: LD_VAR 0 10
8020: PPUSH
8021: CALL_OW 12
8025: ARRAY
8026: ST_TO_ADDR
// for j = 1 to AMWeapon do
8027: LD_ADDR_VAR 0 14
8031: PUSH
8032: DOUBLE
8033: LD_INT 1
8035: DEC
8036: ST_TO_ADDR
8037: LD_VAR 0 10
8041: PUSH
8042: FOR_TO
8043: IFFALSE 8344
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8045: LD_VAR 0 10
8049: PUSH
8050: LD_VAR 0 14
8054: ARRAY
8055: PUSH
8056: LD_INT 2
8058: EQUAL
8059: PUSH
8060: LD_VAR 0 10
8064: PUSH
8065: LD_VAR 0 14
8069: ARRAY
8070: PUSH
8071: LD_INT 3
8073: EQUAL
8074: OR
8075: IFFALSE 8128
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8077: LD_ADDR_VAR 0 19
8081: PUSH
8082: LD_INT 1
8084: PUSH
8085: LD_INT 2
8087: PUSH
8088: LD_INT 3
8090: PUSH
8091: LD_INT 4
8093: PUSH
8094: LD_INT 5
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8104: LD_ADDR_OWVAR 37
8108: PUSH
8109: LD_VAR 0 19
8113: PUSH
8114: LD_INT 1
8116: PPUSH
8117: LD_VAR 0 19
8121: PPUSH
8122: CALL_OW 12
8126: ARRAY
8127: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8128: LD_VAR 0 10
8132: PUSH
8133: LD_VAR 0 14
8137: ARRAY
8138: PUSH
8139: LD_INT 4
8141: EQUAL
8142: PUSH
8143: LD_VAR 0 10
8147: PUSH
8148: LD_VAR 0 14
8152: ARRAY
8153: PUSH
8154: LD_INT 5
8156: EQUAL
8157: OR
8158: PUSH
8159: LD_VAR 0 10
8163: PUSH
8164: LD_VAR 0 14
8168: ARRAY
8169: PUSH
8170: LD_INT 9
8172: EQUAL
8173: OR
8174: PUSH
8175: LD_VAR 0 10
8179: PUSH
8180: LD_VAR 0 14
8184: ARRAY
8185: PUSH
8186: LD_INT 11
8188: EQUAL
8189: OR
8190: PUSH
8191: LD_VAR 0 10
8195: PUSH
8196: LD_VAR 0 14
8200: ARRAY
8201: PUSH
8202: LD_INT 7
8204: EQUAL
8205: OR
8206: IFFALSE 8255
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8208: LD_ADDR_VAR 0 19
8212: PUSH
8213: LD_INT 2
8215: PUSH
8216: LD_INT 3
8218: PUSH
8219: LD_INT 4
8221: PUSH
8222: LD_INT 5
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8231: LD_ADDR_OWVAR 37
8235: PUSH
8236: LD_VAR 0 19
8240: PUSH
8241: LD_INT 1
8243: PPUSH
8244: LD_VAR 0 19
8248: PPUSH
8249: CALL_OW 12
8253: ARRAY
8254: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8255: LD_VAR 0 10
8259: PUSH
8260: LD_VAR 0 14
8264: ARRAY
8265: PUSH
8266: LD_INT 8
8268: EQUAL
8269: PUSH
8270: LD_VAR 0 10
8274: PUSH
8275: LD_VAR 0 14
8279: ARRAY
8280: PUSH
8281: LD_INT 6
8283: EQUAL
8284: OR
8285: PUSH
8286: LD_VAR 0 10
8290: PUSH
8291: LD_VAR 0 14
8295: ARRAY
8296: PUSH
8297: LD_INT 10
8299: EQUAL
8300: OR
8301: IFFALSE 8342
// begin amChassisTab = [ 4 , 5 ] ;
8303: LD_ADDR_VAR 0 19
8307: PUSH
8308: LD_INT 4
8310: PUSH
8311: LD_INT 5
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8318: LD_ADDR_OWVAR 37
8322: PUSH
8323: LD_VAR 0 19
8327: PUSH
8328: LD_INT 1
8330: PPUSH
8331: LD_VAR 0 19
8335: PPUSH
8336: CALL_OW 12
8340: ARRAY
8341: ST_TO_ADDR
// end ; end ;
8342: GO 8042
8344: POP
8345: POP
// veh = CreateVehicle ;
8346: LD_ADDR_VAR 0 16
8350: PUSH
8351: CALL_OW 45
8355: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8356: LD_VAR 0 16
8360: PPUSH
8361: LD_VAR 0 1
8365: PPUSH
8366: LD_INT 0
8368: PPUSH
8369: CALL_OW 49
// if vc_control = 1 then
8373: LD_OWVAR 38
8377: PUSH
8378: LD_INT 1
8380: EQUAL
8381: IFFALSE 8438
// begin hc_gallery =  ;
8383: LD_ADDR_OWVAR 33
8387: PUSH
8388: LD_STRING 
8390: ST_TO_ADDR
// hc_name =  ;
8391: LD_ADDR_OWVAR 26
8395: PUSH
8396: LD_STRING 
8398: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8399: LD_INT 0
8401: PPUSH
8402: LD_INT 3
8404: PPUSH
8405: LD_VAR 0 4
8409: PPUSH
8410: CALL_OW 380
// un = CreateHuman ;
8414: LD_ADDR_VAR 0 15
8418: PUSH
8419: CALL_OW 44
8423: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8424: LD_VAR 0 15
8428: PPUSH
8429: LD_VAR 0 16
8433: PPUSH
8434: CALL_OW 52
// end ; i = i + 1 ;
8438: LD_ADDR_VAR 0 13
8442: PUSH
8443: LD_VAR 0 13
8447: PUSH
8448: LD_INT 1
8450: PLUS
8451: ST_TO_ADDR
// end ; if nation = 2 then
8452: LD_VAR 0 5
8456: PUSH
8457: LD_INT 2
8459: EQUAL
8460: IFFALSE 8884
// begin uc_side = side ;
8462: LD_ADDR_OWVAR 20
8466: PUSH
8467: LD_VAR 0 2
8471: ST_TO_ADDR
// uc_nation = nation ;
8472: LD_ADDR_OWVAR 21
8476: PUSH
8477: LD_VAR 0 5
8481: ST_TO_ADDR
// vc_engine = vehengine ;
8482: LD_ADDR_OWVAR 39
8486: PUSH
8487: LD_VAR 0 6
8491: ST_TO_ADDR
// vc_control = vehcontrol ;
8492: LD_ADDR_OWVAR 38
8496: PUSH
8497: LD_VAR 0 7
8501: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8502: LD_ADDR_OWVAR 40
8506: PUSH
8507: LD_VAR 0 9
8511: PUSH
8512: LD_INT 1
8514: PPUSH
8515: LD_VAR 0 9
8519: PPUSH
8520: CALL_OW 12
8524: ARRAY
8525: ST_TO_ADDR
// for j = 1 to ARWeapons do
8526: LD_ADDR_VAR 0 14
8530: PUSH
8531: DOUBLE
8532: LD_INT 1
8534: DEC
8535: ST_TO_ADDR
8536: LD_VAR 0 9
8540: PUSH
8541: FOR_TO
8542: IFFALSE 8776
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8544: LD_VAR 0 9
8548: PUSH
8549: LD_VAR 0 14
8553: ARRAY
8554: PUSH
8555: LD_INT 24
8557: EQUAL
8558: PUSH
8559: LD_VAR 0 9
8563: PUSH
8564: LD_VAR 0 14
8568: ARRAY
8569: PUSH
8570: LD_INT 22
8572: EQUAL
8573: OR
8574: PUSH
8575: LD_VAR 0 9
8579: PUSH
8580: LD_VAR 0 14
8584: ARRAY
8585: PUSH
8586: LD_INT 23
8588: EQUAL
8589: OR
8590: PUSH
8591: LD_VAR 0 9
8595: PUSH
8596: LD_VAR 0 14
8600: ARRAY
8601: PUSH
8602: LD_INT 30
8604: EQUAL
8605: OR
8606: IFFALSE 8655
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8608: LD_ADDR_VAR 0 18
8612: PUSH
8613: LD_INT 11
8615: PUSH
8616: LD_INT 12
8618: PUSH
8619: LD_INT 13
8621: PUSH
8622: LD_INT 14
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8631: LD_ADDR_OWVAR 37
8635: PUSH
8636: LD_VAR 0 18
8640: PUSH
8641: LD_INT 1
8643: PPUSH
8644: LD_VAR 0 18
8648: PPUSH
8649: CALL_OW 12
8653: ARRAY
8654: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8655: LD_VAR 0 9
8659: PUSH
8660: LD_VAR 0 14
8664: ARRAY
8665: PUSH
8666: LD_INT 29
8668: EQUAL
8669: PUSH
8670: LD_VAR 0 9
8674: PUSH
8675: LD_VAR 0 14
8679: ARRAY
8680: PUSH
8681: LD_INT 28
8683: EQUAL
8684: OR
8685: PUSH
8686: LD_VAR 0 9
8690: PUSH
8691: LD_VAR 0 14
8695: ARRAY
8696: PUSH
8697: LD_INT 27
8699: EQUAL
8700: OR
8701: PUSH
8702: LD_VAR 0 9
8706: PUSH
8707: LD_VAR 0 14
8711: ARRAY
8712: PUSH
8713: LD_INT 26
8715: EQUAL
8716: OR
8717: PUSH
8718: LD_VAR 0 9
8722: PUSH
8723: LD_VAR 0 14
8727: ARRAY
8728: PUSH
8729: LD_INT 25
8731: EQUAL
8732: OR
8733: IFFALSE 8774
// begin arChassisTab = [ 13 , 14 ] ;
8735: LD_ADDR_VAR 0 18
8739: PUSH
8740: LD_INT 13
8742: PUSH
8743: LD_INT 14
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8750: LD_ADDR_OWVAR 37
8754: PUSH
8755: LD_VAR 0 18
8759: PUSH
8760: LD_INT 1
8762: PPUSH
8763: LD_VAR 0 18
8767: PPUSH
8768: CALL_OW 12
8772: ARRAY
8773: ST_TO_ADDR
// end ; end ;
8774: GO 8541
8776: POP
8777: POP
// veh = CreateVehicle ;
8778: LD_ADDR_VAR 0 16
8782: PUSH
8783: CALL_OW 45
8787: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8788: LD_VAR 0 16
8792: PPUSH
8793: LD_VAR 0 1
8797: PPUSH
8798: LD_INT 0
8800: PPUSH
8801: CALL_OW 49
// if vc_control = 1 then
8805: LD_OWVAR 38
8809: PUSH
8810: LD_INT 1
8812: EQUAL
8813: IFFALSE 8870
// begin hc_gallery =  ;
8815: LD_ADDR_OWVAR 33
8819: PUSH
8820: LD_STRING 
8822: ST_TO_ADDR
// hc_name =  ;
8823: LD_ADDR_OWVAR 26
8827: PUSH
8828: LD_STRING 
8830: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8831: LD_INT 0
8833: PPUSH
8834: LD_INT 3
8836: PPUSH
8837: LD_VAR 0 4
8841: PPUSH
8842: CALL_OW 380
// un = CreateHuman ;
8846: LD_ADDR_VAR 0 15
8850: PUSH
8851: CALL_OW 44
8855: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8856: LD_VAR 0 15
8860: PPUSH
8861: LD_VAR 0 16
8865: PPUSH
8866: CALL_OW 52
// end ; i = i + 1 ;
8870: LD_ADDR_VAR 0 13
8874: PUSH
8875: LD_VAR 0 13
8879: PUSH
8880: LD_INT 1
8882: PLUS
8883: ST_TO_ADDR
// end ; if nation = 3 then
8884: LD_VAR 0 5
8888: PUSH
8889: LD_INT 3
8891: EQUAL
8892: IFFALSE 9268
// begin uc_side = side ;
8894: LD_ADDR_OWVAR 20
8898: PUSH
8899: LD_VAR 0 2
8903: ST_TO_ADDR
// uc_nation = nation ;
8904: LD_ADDR_OWVAR 21
8908: PUSH
8909: LD_VAR 0 5
8913: ST_TO_ADDR
// vc_engine = vehengine ;
8914: LD_ADDR_OWVAR 39
8918: PUSH
8919: LD_VAR 0 6
8923: ST_TO_ADDR
// vc_control = vehcontrol ;
8924: LD_ADDR_OWVAR 38
8928: PUSH
8929: LD_VAR 0 7
8933: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8934: LD_ADDR_OWVAR 40
8938: PUSH
8939: LD_VAR 0 8
8943: PUSH
8944: LD_INT 1
8946: PPUSH
8947: LD_VAR 0 8
8951: PPUSH
8952: CALL_OW 12
8956: ARRAY
8957: ST_TO_ADDR
// for j = 1 to RuWeapons do
8958: LD_ADDR_VAR 0 14
8962: PUSH
8963: DOUBLE
8964: LD_INT 1
8966: DEC
8967: ST_TO_ADDR
8968: LD_VAR 0 8
8972: PUSH
8973: FOR_TO
8974: IFFALSE 9160
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8976: LD_VAR 0 8
8980: PUSH
8981: LD_VAR 0 14
8985: ARRAY
8986: PUSH
8987: LD_INT 42
8989: EQUAL
8990: PUSH
8991: LD_VAR 0 8
8995: PUSH
8996: LD_VAR 0 14
9000: ARRAY
9001: PUSH
9002: LD_INT 43
9004: EQUAL
9005: OR
9006: PUSH
9007: LD_VAR 0 8
9011: PUSH
9012: LD_VAR 0 14
9016: ARRAY
9017: PUSH
9018: LD_INT 44
9020: EQUAL
9021: OR
9022: PUSH
9023: LD_VAR 0 8
9027: PUSH
9028: LD_VAR 0 14
9032: ARRAY
9033: PUSH
9034: LD_INT 45
9036: EQUAL
9037: OR
9038: PUSH
9039: LD_VAR 0 8
9043: PUSH
9044: LD_VAR 0 14
9048: ARRAY
9049: PUSH
9050: LD_INT 49
9052: EQUAL
9053: OR
9054: IFFALSE 9091
// begin ruChassisTab = [ 24 ] ;
9056: LD_ADDR_VAR 0 17
9060: PUSH
9061: LD_INT 24
9063: PUSH
9064: EMPTY
9065: LIST
9066: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9067: LD_ADDR_OWVAR 37
9071: PUSH
9072: LD_VAR 0 17
9076: PUSH
9077: LD_INT 1
9079: PPUSH
9080: LD_VAR 0 17
9084: PPUSH
9085: CALL_OW 12
9089: ARRAY
9090: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9091: LD_VAR 0 8
9095: PUSH
9096: LD_VAR 0 14
9100: ARRAY
9101: PUSH
9102: LD_INT 46
9104: EQUAL
9105: PUSH
9106: LD_VAR 0 8
9110: PUSH
9111: LD_VAR 0 14
9115: ARRAY
9116: PUSH
9117: LD_INT 47
9119: EQUAL
9120: OR
9121: IFFALSE 9158
// begin ruChassisTab = [ 24 ] ;
9123: LD_ADDR_VAR 0 17
9127: PUSH
9128: LD_INT 24
9130: PUSH
9131: EMPTY
9132: LIST
9133: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9134: LD_ADDR_OWVAR 37
9138: PUSH
9139: LD_VAR 0 17
9143: PUSH
9144: LD_INT 1
9146: PPUSH
9147: LD_VAR 0 17
9151: PPUSH
9152: CALL_OW 12
9156: ARRAY
9157: ST_TO_ADDR
// end ; end ;
9158: GO 8973
9160: POP
9161: POP
// veh = CreateVehicle ;
9162: LD_ADDR_VAR 0 16
9166: PUSH
9167: CALL_OW 45
9171: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9172: LD_VAR 0 16
9176: PPUSH
9177: LD_VAR 0 1
9181: PPUSH
9182: LD_INT 0
9184: PPUSH
9185: CALL_OW 49
// if vc_control = 1 then
9189: LD_OWVAR 38
9193: PUSH
9194: LD_INT 1
9196: EQUAL
9197: IFFALSE 9254
// begin hc_gallery =  ;
9199: LD_ADDR_OWVAR 33
9203: PUSH
9204: LD_STRING 
9206: ST_TO_ADDR
// hc_name =  ;
9207: LD_ADDR_OWVAR 26
9211: PUSH
9212: LD_STRING 
9214: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9215: LD_INT 0
9217: PPUSH
9218: LD_INT 3
9220: PPUSH
9221: LD_VAR 0 4
9225: PPUSH
9226: CALL_OW 380
// un = CreateHuman ;
9230: LD_ADDR_VAR 0 15
9234: PUSH
9235: CALL_OW 44
9239: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9240: LD_VAR 0 15
9244: PPUSH
9245: LD_VAR 0 16
9249: PPUSH
9250: CALL_OW 52
// end ; i = i + 1 ;
9254: LD_ADDR_VAR 0 13
9258: PUSH
9259: LD_VAR 0 13
9263: PUSH
9264: LD_INT 1
9266: PLUS
9267: ST_TO_ADDR
// end ; until i = vehCount ;
9268: LD_VAR 0 13
9272: PUSH
9273: LD_VAR 0 3
9277: EQUAL
9278: IFFALSE 7946
// repeat wait ( 0 0$1 ) ;
9280: LD_INT 35
9282: PPUSH
9283: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
9287: LD_ADDR_VAR 0 20
9291: PUSH
9292: LD_INT 22
9294: PUSH
9295: LD_VAR 0 2
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 21
9306: PUSH
9307: LD_INT 2
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 24
9316: PUSH
9317: LD_INT 250
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: PPUSH
9329: CALL_OW 69
9333: ST_TO_ADDR
// if vehicleOK_list > 0 then
9334: LD_VAR 0 20
9338: PUSH
9339: LD_INT 0
9341: GREATER
9342: IFFALSE 9533
// begin for i in vehicleOK_list do
9344: LD_ADDR_VAR 0 13
9348: PUSH
9349: LD_VAR 0 20
9353: PUSH
9354: FOR_IN
9355: IFFALSE 9531
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9357: LD_ADDR_VAR 0 21
9361: PUSH
9362: LD_INT 22
9364: PUSH
9365: LD_VAR 0 11
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PPUSH
9374: CALL_OW 69
9378: PPUSH
9379: LD_VAR 0 13
9383: PPUSH
9384: CALL_OW 74
9388: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9389: LD_ADDR_VAR 0 22
9393: PUSH
9394: LD_INT 22
9396: PUSH
9397: LD_VAR 0 11
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 2
9408: PUSH
9409: LD_INT 59
9411: PUSH
9412: EMPTY
9413: LIST
9414: PUSH
9415: LD_INT 21
9417: PUSH
9418: LD_INT 1
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 21
9427: PUSH
9428: LD_INT 2
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: PPUSH
9448: CALL_OW 69
9452: PPUSH
9453: LD_VAR 0 13
9457: PPUSH
9458: CALL_OW 74
9462: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9463: LD_VAR 0 13
9467: PPUSH
9468: LD_VAR 0 21
9472: PPUSH
9473: CALL_OW 296
9477: PUSH
9478: LD_INT 8
9480: PLUS
9481: PUSH
9482: LD_VAR 0 13
9486: PPUSH
9487: LD_VAR 0 22
9491: PPUSH
9492: CALL_OW 296
9496: LESS
9497: IFFALSE 9515
// begin ComAttackUnit ( i , target1 ) ;
9499: LD_VAR 0 13
9503: PPUSH
9504: LD_VAR 0 21
9508: PPUSH
9509: CALL_OW 115
// end else
9513: GO 9529
// begin ComAttackUnit ( i , target2 ) ;
9515: LD_VAR 0 13
9519: PPUSH
9520: LD_VAR 0 22
9524: PPUSH
9525: CALL_OW 115
// end ; end ;
9529: GO 9354
9531: POP
9532: POP
// end ; until vehicleOK_list = [ ] ;
9533: LD_VAR 0 20
9537: PUSH
9538: EMPTY
9539: EQUAL
9540: IFFALSE 9280
// end ;
9542: LD_VAR 0 12
9546: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
9547: LD_INT 0
9549: PPUSH
9550: PPUSH
9551: PPUSH
9552: PPUSH
// for i = 1 to 72 do
9553: LD_ADDR_VAR 0 5
9557: PUSH
9558: DOUBLE
9559: LD_INT 1
9561: DEC
9562: ST_TO_ADDR
9563: LD_INT 72
9565: PUSH
9566: FOR_TO
9567: IFFALSE 9625
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
9569: LD_VAR 0 5
9573: PPUSH
9574: LD_VAR 0 1
9578: PPUSH
9579: CALL_OW 321
9583: PUSH
9584: LD_INT 1
9586: EQUAL
9587: PUSH
9588: LD_VAR 0 5
9592: PPUSH
9593: LD_VAR 0 3
9597: PPUSH
9598: CALL_OW 482
9602: PUSH
9603: LD_INT 1
9605: EQUAL
9606: AND
9607: IFFALSE 9623
// AddComResearch ( lab , i ) ;
9609: LD_VAR 0 2
9613: PPUSH
9614: LD_VAR 0 5
9618: PPUSH
9619: CALL_OW 184
9623: GO 9566
9625: POP
9626: POP
// end ;
9627: LD_VAR 0 4
9631: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9632: LD_INT 0
9634: PPUSH
9635: PPUSH
9636: PPUSH
9637: PPUSH
9638: PPUSH
9639: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Kozlov ] ;
9640: LD_ADDR_VAR 0 8
9644: PUSH
9645: LD_VAR 0 2
9649: PPUSH
9650: CALL_OW 313
9654: PUSH
9655: LD_EXP 35
9659: PUSH
9660: EMPTY
9661: LIST
9662: DIFF
9663: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) diff [ Kozlov ] ;
9664: LD_ADDR_VAR 0 9
9668: PUSH
9669: LD_VAR 0 3
9673: PPUSH
9674: LD_INT 22
9676: PUSH
9677: LD_VAR 0 1
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PUSH
9686: LD_INT 25
9688: PUSH
9689: LD_INT 2
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 24
9698: PUSH
9699: LD_INT 750
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 3
9708: PUSH
9709: LD_INT 54
9711: PUSH
9712: EMPTY
9713: LIST
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: PPUSH
9725: CALL_OW 70
9729: PUSH
9730: LD_EXP 35
9734: PUSH
9735: EMPTY
9736: LIST
9737: DIFF
9738: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9739: LD_ADDR_VAR 0 6
9743: PUSH
9744: LD_VAR 0 3
9748: PPUSH
9749: LD_INT 22
9751: PUSH
9752: LD_VAR 0 1
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PUSH
9761: LD_INT 21
9763: PUSH
9764: LD_INT 3
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: LD_INT 3
9773: PUSH
9774: LD_INT 24
9776: PUSH
9777: LD_INT 1000
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: PUSH
9793: EMPTY
9794: LIST
9795: PPUSH
9796: CALL_OW 70
9800: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
9801: LD_VAR 0 6
9805: NOT
9806: PUSH
9807: LD_INT 22
9809: PUSH
9810: LD_VAR 0 1
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PUSH
9819: LD_INT 25
9821: PUSH
9822: LD_INT 2
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: LD_INT 24
9831: PUSH
9832: LD_INT 250
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: LIST
9843: PPUSH
9844: CALL_OW 69
9848: NOT
9849: AND
9850: IFFALSE 9854
// exit ;
9852: GO 10036
// if buildings_list > 0 and engineerOkInside then
9854: LD_VAR 0 6
9858: PUSH
9859: LD_INT 0
9861: GREATER
9862: PUSH
9863: LD_VAR 0 8
9867: AND
9868: IFFALSE 9879
// ComExitBuilding ( engineerOkInside ) ;
9870: LD_VAR 0 8
9874: PPUSH
9875: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
9879: LD_VAR 0 6
9883: PUSH
9884: LD_INT 0
9886: GREATER
9887: PUSH
9888: LD_VAR 0 9
9892: PUSH
9893: LD_INT 0
9895: GREATER
9896: AND
9897: IFFALSE 9917
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
9899: LD_VAR 0 9
9903: PPUSH
9904: LD_VAR 0 6
9908: PUSH
9909: LD_INT 1
9911: ARRAY
9912: PPUSH
9913: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
9917: LD_VAR 0 6
9921: PUSH
9922: LD_INT 0
9924: EQUAL
9925: PUSH
9926: LD_VAR 0 4
9930: PUSH
9931: LD_INT 0
9933: EQUAL
9934: AND
9935: PUSH
9936: LD_VAR 0 9
9940: PUSH
9941: LD_INT 0
9943: GREATER
9944: AND
9945: IFFALSE 9961
// ComEnterUnit ( engineerOkOutside , building ) ;
9947: LD_VAR 0 9
9951: PPUSH
9952: LD_VAR 0 2
9956: PPUSH
9957: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9961: LD_VAR 0 9
9965: PUSH
9966: LD_INT 0
9968: GREATER
9969: PUSH
9970: LD_VAR 0 6
9974: PUSH
9975: LD_INT 0
9977: EQUAL
9978: AND
9979: PUSH
9980: LD_VAR 0 4
9984: PUSH
9985: LD_INT 0
9987: GREATER
9988: AND
9989: IFFALSE 10036
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9991: LD_VAR 0 9
9995: PPUSH
9996: LD_VAR 0 4
10000: PUSH
10001: LD_INT 1
10003: ARRAY
10004: PPUSH
10005: LD_VAR 0 4
10009: PUSH
10010: LD_INT 2
10012: ARRAY
10013: PPUSH
10014: LD_VAR 0 4
10018: PUSH
10019: LD_INT 3
10021: ARRAY
10022: PPUSH
10023: LD_VAR 0 4
10027: PUSH
10028: LD_INT 4
10030: ARRAY
10031: PPUSH
10032: CALL_OW 145
// end ;
10036: LD_VAR 0 5
10040: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10041: LD_INT 0
10043: PPUSH
10044: PPUSH
10045: PPUSH
10046: PPUSH
10047: PPUSH
10048: PPUSH
10049: PPUSH
10050: PPUSH
10051: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) diff [ Kozlov ] ;
10052: LD_ADDR_VAR 0 6
10056: PUSH
10057: LD_INT 22
10059: PUSH
10060: LD_VAR 0 1
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: LD_INT 25
10071: PUSH
10072: LD_INT 4
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: LD_INT 23
10081: PUSH
10082: LD_INT 2
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: LD_INT 24
10091: PUSH
10092: LD_INT 251
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: PPUSH
10105: CALL_OW 69
10109: PUSH
10110: LD_EXP 35
10114: PUSH
10115: EMPTY
10116: LIST
10117: DIFF
10118: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ Kozlov ] ;
10119: LD_ADDR_VAR 0 7
10123: PUSH
10124: LD_VAR 0 3
10128: PPUSH
10129: LD_INT 22
10131: PUSH
10132: LD_VAR 0 1
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 23
10143: PUSH
10144: LD_INT 2
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 25
10153: PUSH
10154: LD_INT 4
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 50
10163: PUSH
10164: EMPTY
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: PPUSH
10173: CALL_OW 70
10177: PUSH
10178: LD_EXP 35
10182: PUSH
10183: EMPTY
10184: LIST
10185: DIFF
10186: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10187: LD_ADDR_VAR 0 10
10191: PUSH
10192: LD_VAR 0 3
10196: PPUSH
10197: LD_INT 22
10199: PUSH
10200: LD_VAR 0 1
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 21
10211: PUSH
10212: LD_INT 1
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 3
10221: PUSH
10222: LD_INT 25
10224: PUSH
10225: LD_INT 3
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 3
10238: PUSH
10239: LD_INT 24
10241: PUSH
10242: LD_INT 750
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: PPUSH
10259: CALL_OW 70
10263: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10264: LD_ADDR_VAR 0 11
10268: PUSH
10269: LD_VAR 0 2
10273: PPUSH
10274: LD_INT 22
10276: PUSH
10277: LD_VAR 0 1
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: LD_INT 21
10288: PUSH
10289: LD_INT 1
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PUSH
10296: LD_INT 3
10298: PUSH
10299: LD_INT 25
10301: PUSH
10302: LD_INT 3
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 3
10315: PUSH
10316: LD_INT 24
10318: PUSH
10319: LD_INT 1000
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: PPUSH
10336: CALL_OW 70
10340: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10341: LD_VAR 0 10
10345: NOT
10346: PUSH
10347: LD_VAR 0 11
10351: NOT
10352: AND
10353: PUSH
10354: LD_VAR 0 6
10358: NOT
10359: AND
10360: IFFALSE 10364
// exit ;
10362: GO 10598
// if damageUnits > 0 and sci_list > 0 then
10364: LD_VAR 0 10
10368: PUSH
10369: LD_INT 0
10371: GREATER
10372: PUSH
10373: LD_VAR 0 6
10377: PUSH
10378: LD_INT 0
10380: GREATER
10381: AND
10382: IFFALSE 10398
// ComMoveToArea ( damageUnits , healArea ) ;
10384: LD_VAR 0 10
10388: PPUSH
10389: LD_VAR 0 2
10393: PPUSH
10394: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
10398: LD_VAR 0 11
10402: PUSH
10403: LD_INT 0
10405: GREATER
10406: PUSH
10407: LD_VAR 0 6
10411: PUSH
10412: LD_INT 0
10414: GREATER
10415: AND
10416: IFFALSE 10427
// ComExitBuilding ( sci_list ) ;
10418: LD_VAR 0 6
10422: PPUSH
10423: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
10427: LD_VAR 0 11
10431: PUSH
10432: LD_INT 0
10434: GREATER
10435: PUSH
10436: LD_VAR 0 7
10440: PUSH
10441: LD_INT 0
10443: GREATER
10444: AND
10445: IFFALSE 10465
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10447: LD_VAR 0 7
10451: PPUSH
10452: LD_VAR 0 11
10456: PUSH
10457: LD_INT 1
10459: ARRAY
10460: PPUSH
10461: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10465: LD_VAR 0 10
10469: PUSH
10470: LD_INT 0
10472: EQUAL
10473: PUSH
10474: LD_VAR 0 11
10478: PUSH
10479: LD_INT 0
10481: EQUAL
10482: AND
10483: PUSH
10484: LD_VAR 0 7
10488: PUSH
10489: LD_INT 0
10491: GREATER
10492: AND
10493: IFFALSE 10598
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10495: LD_ADDR_VAR 0 12
10499: PUSH
10500: LD_INT 22
10502: PUSH
10503: LD_VAR 0 1
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: LD_INT 21
10514: PUSH
10515: LD_INT 3
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 30
10524: PUSH
10525: LD_INT 8
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: PPUSH
10537: CALL_OW 69
10541: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10542: LD_ADDR_VAR 0 13
10546: PUSH
10547: LD_INT 1
10549: PPUSH
10550: LD_VAR 0 12
10554: PPUSH
10555: CALL_OW 12
10559: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10560: LD_VAR 0 7
10564: PPUSH
10565: LD_INT 3
10567: PUSH
10568: LD_INT 60
10570: PUSH
10571: EMPTY
10572: LIST
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PPUSH
10578: CALL_OW 72
10582: PPUSH
10583: LD_VAR 0 12
10587: PUSH
10588: LD_VAR 0 13
10592: ARRAY
10593: PPUSH
10594: CALL_OW 120
// end ; end ;
10598: LD_VAR 0 5
10602: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
10603: LD_INT 0
10605: PPUSH
10606: PPUSH
10607: PPUSH
10608: PPUSH
// tmpTab = [ ] ;
10609: LD_ADDR_VAR 0 6
10613: PUSH
10614: EMPTY
10615: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
10616: LD_INT 22
10618: PUSH
10619: LD_VAR 0 1
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 30
10630: PUSH
10631: LD_INT 32
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PPUSH
10642: CALL_OW 69
10646: PUSH
10647: LD_INT 0
10649: GREATER
10650: IFFALSE 10733
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10652: LD_ADDR_VAR 0 4
10656: PUSH
10657: LD_INT 22
10659: PUSH
10660: LD_VAR 0 1
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: LD_INT 30
10671: PUSH
10672: LD_INT 32
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PPUSH
10683: CALL_OW 69
10687: PUSH
10688: FOR_IN
10689: IFFALSE 10731
// begin for j in UnitsInside ( i ) do
10691: LD_ADDR_VAR 0 5
10695: PUSH
10696: LD_VAR 0 4
10700: PPUSH
10701: CALL_OW 313
10705: PUSH
10706: FOR_IN
10707: IFFALSE 10727
// tmpTab = tmpTab ^ j ;
10709: LD_ADDR_VAR 0 6
10713: PUSH
10714: LD_VAR 0 6
10718: PUSH
10719: LD_VAR 0 5
10723: ADD
10724: ST_TO_ADDR
10725: GO 10706
10727: POP
10728: POP
// end ;
10729: GO 10688
10731: POP
10732: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
10733: LD_VAR 0 6
10737: PPUSH
10738: LD_VAR 0 2
10742: PPUSH
10743: CALL_OW 250
10747: PPUSH
10748: LD_VAR 0 2
10752: PPUSH
10753: CALL_OW 251
10757: PPUSH
10758: CALL_OW 114
// end ;
10762: LD_VAR 0 3
10766: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10767: LD_INT 0
10769: PPUSH
10770: PPUSH
10771: PPUSH
10772: PPUSH
10773: PPUSH
10774: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10775: LD_ADDR_VAR 0 7
10779: PUSH
10780: LD_VAR 0 2
10784: PPUSH
10785: LD_INT 22
10787: PUSH
10788: LD_VAR 0 1
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: LD_INT 21
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 34
10809: PUSH
10810: LD_INT 52
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: LIST
10821: PPUSH
10822: CALL_OW 70
10826: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10827: LD_ADDR_VAR 0 8
10831: PUSH
10832: LD_VAR 0 2
10836: PPUSH
10837: LD_INT 22
10839: PUSH
10840: LD_VAR 0 1
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 21
10851: PUSH
10852: LD_INT 3
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 3
10861: PUSH
10862: LD_INT 24
10864: PUSH
10865: LD_INT 1000
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: PUSH
10881: EMPTY
10882: LIST
10883: PPUSH
10884: CALL_OW 70
10888: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10889: LD_VAR 0 8
10893: PUSH
10894: LD_INT 0
10896: GREATER
10897: PUSH
10898: LD_VAR 0 7
10902: PPUSH
10903: LD_INT 24
10905: PUSH
10906: LD_INT 750
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PPUSH
10913: CALL_OW 72
10917: PUSH
10918: LD_INT 0
10920: GREATER
10921: AND
10922: IFFALSE 10942
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
10924: LD_VAR 0 7
10928: PPUSH
10929: LD_VAR 0 8
10933: PUSH
10934: LD_INT 1
10936: ARRAY
10937: PPUSH
10938: CALL_OW 130
// end ;
10942: LD_VAR 0 3
10946: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
10947: LD_INT 0
10949: PPUSH
10950: PPUSH
10951: PPUSH
10952: PPUSH
10953: PPUSH
10954: PPUSH
10955: PPUSH
10956: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Platonov , Yakotich ] ;
10957: LD_ADDR_VAR 0 6
10961: PUSH
10962: LD_VAR 0 2
10966: PPUSH
10967: LD_INT 22
10969: PUSH
10970: LD_VAR 0 1
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 56
10981: PUSH
10982: EMPTY
10983: LIST
10984: PUSH
10985: LD_INT 24
10987: PUSH
10988: LD_INT 700
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 3
10997: PUSH
10998: LD_INT 60
11000: PUSH
11001: EMPTY
11002: LIST
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 2
11010: PUSH
11011: LD_INT 25
11013: PUSH
11014: LD_INT 1
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 25
11023: PUSH
11024: LD_INT 5
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 25
11033: PUSH
11034: LD_INT 8
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 25
11043: PUSH
11044: LD_INT 9
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: PPUSH
11065: CALL_OW 70
11069: PUSH
11070: LD_EXP 26
11074: PUSH
11075: LD_EXP 27
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: DIFF
11084: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
11085: LD_ADDR_VAR 0 7
11089: PUSH
11090: LD_VAR 0 2
11094: PPUSH
11095: LD_INT 22
11097: PUSH
11098: LD_VAR 0 1
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 30
11109: PUSH
11110: LD_INT 32
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: LD_INT 58
11119: PUSH
11120: EMPTY
11121: LIST
11122: PUSH
11123: LD_INT 24
11125: PUSH
11126: LD_INT 251
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: PPUSH
11139: CALL_OW 70
11143: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
11144: LD_ADDR_VAR 0 9
11148: PUSH
11149: LD_VAR 0 2
11153: PPUSH
11154: LD_INT 22
11156: PUSH
11157: LD_VAR 0 1
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 2
11168: PUSH
11169: LD_INT 30
11171: PUSH
11172: LD_INT 4
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 30
11181: PUSH
11182: LD_INT 5
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: PUSH
11194: LD_INT 24
11196: PUSH
11197: LD_INT 251
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: LIST
11208: PPUSH
11209: CALL_OW 70
11213: ST_TO_ADDR
// if barrackList > 0 then
11214: LD_VAR 0 9
11218: PUSH
11219: LD_INT 0
11221: GREATER
11222: IFFALSE 11370
// begin if turretList = 0 then
11224: LD_VAR 0 7
11228: PUSH
11229: LD_INT 0
11231: EQUAL
11232: IFFALSE 11274
// begin if soldiers_list > 0 then
11234: LD_VAR 0 6
11238: PUSH
11239: LD_INT 0
11241: GREATER
11242: IFFALSE 11272
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
11244: LD_VAR 0 6
11248: PPUSH
11249: LD_VAR 0 9
11253: PUSH
11254: LD_INT 1
11256: PPUSH
11257: LD_VAR 0 9
11261: PPUSH
11262: CALL_OW 12
11266: ARRAY
11267: PPUSH
11268: CALL_OW 120
// end else
11272: GO 11370
// begin for i in barrackList do
11274: LD_ADDR_VAR 0 4
11278: PUSH
11279: LD_VAR 0 9
11283: PUSH
11284: FOR_IN
11285: IFFALSE 11368
// begin insideUnits = UnitsInside ( i ) ;
11287: LD_ADDR_VAR 0 10
11291: PUSH
11292: LD_VAR 0 4
11296: PPUSH
11297: CALL_OW 313
11301: ST_TO_ADDR
// if insideUnits > 0 then
11302: LD_VAR 0 10
11306: PUSH
11307: LD_INT 0
11309: GREATER
11310: IFFALSE 11334
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
11312: LD_VAR 0 10
11316: PUSH
11317: LD_INT 1
11319: ARRAY
11320: PPUSH
11321: LD_VAR 0 7
11325: PUSH
11326: LD_INT 1
11328: ARRAY
11329: PPUSH
11330: CALL_OW 120
// if soldiers_list > 0 then
11334: LD_VAR 0 6
11338: PUSH
11339: LD_INT 0
11341: GREATER
11342: IFFALSE 11366
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
11344: LD_VAR 0 6
11348: PUSH
11349: LD_INT 1
11351: ARRAY
11352: PPUSH
11353: LD_VAR 0 7
11357: PUSH
11358: LD_INT 1
11360: ARRAY
11361: PPUSH
11362: CALL_OW 120
// end ;
11366: GO 11284
11368: POP
11369: POP
// end ; end ; end ;
11370: LD_VAR 0 3
11374: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11375: LD_INT 0
11377: PPUSH
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11382: LD_ADDR_VAR 0 6
11386: PUSH
11387: LD_INT 22
11389: PUSH
11390: LD_VAR 0 1
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 2
11401: PUSH
11402: LD_INT 30
11404: PUSH
11405: LD_INT 31
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 30
11414: PUSH
11415: LD_INT 32
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 30
11424: PUSH
11425: LD_INT 33
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 30
11434: PUSH
11435: LD_INT 4
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 30
11444: PUSH
11445: LD_INT 5
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PPUSH
11464: CALL_OW 69
11468: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11469: LD_ADDR_VAR 0 7
11473: PUSH
11474: LD_INT 22
11476: PUSH
11477: LD_VAR 0 2
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 21
11488: PUSH
11489: LD_INT 3
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 58
11498: PUSH
11499: EMPTY
11500: LIST
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: PPUSH
11507: CALL_OW 69
11511: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11512: LD_VAR 0 6
11516: PUSH
11517: LD_INT 0
11519: GREATER
11520: PUSH
11521: LD_VAR 0 7
11525: PUSH
11526: LD_INT 0
11528: GREATER
11529: AND
11530: IFFALSE 11600
// begin for i in turretsList do
11532: LD_ADDR_VAR 0 4
11536: PUSH
11537: LD_VAR 0 6
11541: PUSH
11542: FOR_IN
11543: IFFALSE 11598
// begin for j in enemyBuildings do
11545: LD_ADDR_VAR 0 5
11549: PUSH
11550: LD_VAR 0 7
11554: PUSH
11555: FOR_IN
11556: IFFALSE 11594
// begin if GetDistUnits ( i , j ) < 20 then
11558: LD_VAR 0 4
11562: PPUSH
11563: LD_VAR 0 5
11567: PPUSH
11568: CALL_OW 296
11572: PUSH
11573: LD_INT 20
11575: LESS
11576: IFFALSE 11592
// begin ComAttackUnit ( i , j ) ;
11578: LD_VAR 0 4
11582: PPUSH
11583: LD_VAR 0 5
11587: PPUSH
11588: CALL_OW 115
// end ; end ;
11592: GO 11555
11594: POP
11595: POP
// end ;
11596: GO 11542
11598: POP
11599: POP
// end ; end ;
11600: LD_VAR 0 3
11604: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
11605: LD_INT 0
11607: PPUSH
11608: PPUSH
// for i = 1 to vehCount do
11609: LD_ADDR_VAR 0 9
11613: PUSH
11614: DOUBLE
11615: LD_INT 1
11617: DEC
11618: ST_TO_ADDR
11619: LD_VAR 0 3
11623: PUSH
11624: FOR_TO
11625: IFFALSE 11672
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
11627: LD_VAR 0 2
11631: PPUSH
11632: LD_VAR 0 7
11636: PPUSH
11637: LD_VAR 0 5
11641: PPUSH
11642: LD_VAR 0 6
11646: PPUSH
11647: LD_VAR 0 4
11651: PUSH
11652: LD_INT 1
11654: PPUSH
11655: LD_VAR 0 4
11659: PPUSH
11660: CALL_OW 12
11664: ARRAY
11665: PPUSH
11666: CALL_OW 185
11670: GO 11624
11672: POP
11673: POP
// end ;
11674: LD_VAR 0 8
11678: RET
// export function AttackVehicles ( enemySide , oponent ) ; var i , j , vehiclesOK , target1 , target2 ; begin
11679: LD_INT 0
11681: PPUSH
11682: PPUSH
11683: PPUSH
11684: PPUSH
11685: PPUSH
11686: PPUSH
// if oponent = 1 then
11687: LD_VAR 0 2
11691: PUSH
11692: LD_INT 1
11694: EQUAL
11695: IFFALSE 11884
// begin repeat wait ( 0 0$1 ) ;
11697: LD_INT 35
11699: PPUSH
11700: CALL_OW 67
// for j in legionVehicles do
11704: LD_ADDR_VAR 0 5
11708: PUSH
11709: LD_EXP 54
11713: PUSH
11714: FOR_IN
11715: IFFALSE 11873
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11717: LD_ADDR_VAR 0 7
11721: PUSH
11722: LD_INT 22
11724: PUSH
11725: LD_VAR 0 1
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 69
11738: PPUSH
11739: LD_VAR 0 5
11743: PPUSH
11744: CALL_OW 74
11748: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11749: LD_ADDR_VAR 0 8
11753: PUSH
11754: LD_INT 22
11756: PUSH
11757: LD_VAR 0 1
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 30
11768: PUSH
11769: LD_INT 32
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 59
11778: PUSH
11779: EMPTY
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: PUSH
11787: EMPTY
11788: LIST
11789: PPUSH
11790: CALL_OW 69
11794: PPUSH
11795: LD_VAR 0 5
11799: PPUSH
11800: CALL_OW 74
11804: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11805: LD_VAR 0 5
11809: PPUSH
11810: LD_VAR 0 7
11814: PPUSH
11815: CALL_OW 296
11819: PUSH
11820: LD_INT 8
11822: PLUS
11823: PUSH
11824: LD_VAR 0 5
11828: PPUSH
11829: LD_VAR 0 8
11833: PPUSH
11834: CALL_OW 296
11838: LESS
11839: IFFALSE 11857
// ComAttackUnit ( j , target1 ) else
11841: LD_VAR 0 5
11845: PPUSH
11846: LD_VAR 0 7
11850: PPUSH
11851: CALL_OW 115
11855: GO 11871
// ComAttackUnit ( j , target2 ) ;
11857: LD_VAR 0 5
11861: PPUSH
11862: LD_VAR 0 8
11866: PPUSH
11867: CALL_OW 115
// end ;
11871: GO 11714
11873: POP
11874: POP
// until legionVehicles = [ ] ;
11875: LD_EXP 54
11879: PUSH
11880: EMPTY
11881: EQUAL
11882: IFFALSE 11697
// end ; if oponent = 2 then
11884: LD_VAR 0 2
11888: PUSH
11889: LD_INT 2
11891: EQUAL
11892: IFFALSE 12081
// begin repeat wait ( 0 0$1 ) ;
11894: LD_INT 35
11896: PPUSH
11897: CALL_OW 67
// for j in russianVehicles do
11901: LD_ADDR_VAR 0 5
11905: PUSH
11906: LD_EXP 60
11910: PUSH
11911: FOR_IN
11912: IFFALSE 12070
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11914: LD_ADDR_VAR 0 7
11918: PUSH
11919: LD_INT 22
11921: PUSH
11922: LD_VAR 0 1
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PPUSH
11931: CALL_OW 69
11935: PPUSH
11936: LD_VAR 0 5
11940: PPUSH
11941: CALL_OW 74
11945: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11946: LD_ADDR_VAR 0 8
11950: PUSH
11951: LD_INT 22
11953: PUSH
11954: LD_VAR 0 1
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 30
11965: PUSH
11966: LD_INT 32
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 59
11975: PUSH
11976: EMPTY
11977: LIST
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: PPUSH
11987: CALL_OW 69
11991: PPUSH
11992: LD_VAR 0 5
11996: PPUSH
11997: CALL_OW 74
12001: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12002: LD_VAR 0 5
12006: PPUSH
12007: LD_VAR 0 7
12011: PPUSH
12012: CALL_OW 296
12016: PUSH
12017: LD_INT 8
12019: PLUS
12020: PUSH
12021: LD_VAR 0 5
12025: PPUSH
12026: LD_VAR 0 8
12030: PPUSH
12031: CALL_OW 296
12035: LESS
12036: IFFALSE 12054
// ComAttackUnit ( j , target1 ) else
12038: LD_VAR 0 5
12042: PPUSH
12043: LD_VAR 0 7
12047: PPUSH
12048: CALL_OW 115
12052: GO 12068
// ComAttackUnit ( j , target2 ) ;
12054: LD_VAR 0 5
12058: PPUSH
12059: LD_VAR 0 8
12063: PPUSH
12064: CALL_OW 115
// end ;
12068: GO 11911
12070: POP
12071: POP
// until russianVehicles = [ ] ;
12072: LD_EXP 60
12076: PUSH
12077: EMPTY
12078: EQUAL
12079: IFFALSE 11894
// end ; if oponent = 3 then
12081: LD_VAR 0 2
12085: PUSH
12086: LD_INT 3
12088: EQUAL
12089: IFFALSE 12278
// begin repeat wait ( 0 0$1 ) ;
12091: LD_INT 35
12093: PPUSH
12094: CALL_OW 67
// for j in allianceVehicles do
12098: LD_ADDR_VAR 0 5
12102: PUSH
12103: LD_EXP 61
12107: PUSH
12108: FOR_IN
12109: IFFALSE 12267
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
12111: LD_ADDR_VAR 0 7
12115: PUSH
12116: LD_INT 22
12118: PUSH
12119: LD_VAR 0 1
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PPUSH
12128: CALL_OW 69
12132: PPUSH
12133: LD_VAR 0 5
12137: PPUSH
12138: CALL_OW 74
12142: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12143: LD_ADDR_VAR 0 8
12147: PUSH
12148: LD_INT 22
12150: PUSH
12151: LD_VAR 0 1
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 30
12162: PUSH
12163: LD_INT 32
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 59
12172: PUSH
12173: EMPTY
12174: LIST
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: LIST
12180: PUSH
12181: EMPTY
12182: LIST
12183: PPUSH
12184: CALL_OW 69
12188: PPUSH
12189: LD_VAR 0 5
12193: PPUSH
12194: CALL_OW 74
12198: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12199: LD_VAR 0 5
12203: PPUSH
12204: LD_VAR 0 7
12208: PPUSH
12209: CALL_OW 296
12213: PUSH
12214: LD_INT 8
12216: PLUS
12217: PUSH
12218: LD_VAR 0 5
12222: PPUSH
12223: LD_VAR 0 8
12227: PPUSH
12228: CALL_OW 296
12232: LESS
12233: IFFALSE 12251
// ComAttackUnit ( j , target1 ) else
12235: LD_VAR 0 5
12239: PPUSH
12240: LD_VAR 0 7
12244: PPUSH
12245: CALL_OW 115
12249: GO 12265
// ComAttackUnit ( j , target2 ) ;
12251: LD_VAR 0 5
12255: PPUSH
12256: LD_VAR 0 8
12260: PPUSH
12261: CALL_OW 115
// end ;
12265: GO 12108
12267: POP
12268: POP
// until allianceVehicles = [ ] ;
12269: LD_EXP 61
12273: PUSH
12274: EMPTY
12275: EQUAL
12276: IFFALSE 12091
// end ; end ;
12278: LD_VAR 0 3
12282: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
12283: LD_INT 0
12285: PPUSH
12286: PPUSH
12287: PPUSH
12288: PPUSH
12289: PPUSH
12290: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12291: LD_ADDR_VAR 0 6
12295: PUSH
12296: LD_INT 22
12298: PUSH
12299: LD_VAR 0 1
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: LD_INT 25
12310: PUSH
12311: LD_INT 9
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PPUSH
12322: CALL_OW 69
12326: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12327: LD_ADDR_VAR 0 7
12331: PUSH
12332: LD_INT 81
12334: PUSH
12335: LD_VAR 0 1
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: LD_INT 3
12346: PUSH
12347: LD_INT 21
12349: PUSH
12350: LD_INT 3
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 69
12369: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12370: LD_ADDR_VAR 0 4
12374: PUSH
12375: LD_INT 1
12377: PPUSH
12378: LD_INT 3
12380: PPUSH
12381: CALL_OW 12
12385: ST_TO_ADDR
// for i = 1 to list do
12386: LD_ADDR_VAR 0 5
12390: PUSH
12391: DOUBLE
12392: LD_INT 1
12394: DEC
12395: ST_TO_ADDR
12396: LD_VAR 0 6
12400: PUSH
12401: FOR_TO
12402: IFFALSE 12604
// for ta in filter do
12404: LD_ADDR_VAR 0 3
12408: PUSH
12409: LD_VAR 0 7
12413: PUSH
12414: FOR_IN
12415: IFFALSE 12600
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
12417: LD_VAR 0 6
12421: PUSH
12422: LD_VAR 0 5
12426: ARRAY
12427: PPUSH
12428: LD_VAR 0 3
12432: PPUSH
12433: CALL_OW 296
12437: PUSH
12438: LD_INT 15
12440: LESSEQUAL
12441: IFFALSE 12598
// begin case c of 1 :
12443: LD_VAR 0 4
12447: PUSH
12448: LD_INT 1
12450: DOUBLE
12451: EQUAL
12452: IFTRUE 12456
12454: GO 12494
12456: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
12457: LD_VAR 0 6
12461: PUSH
12462: LD_VAR 0 5
12466: ARRAY
12467: PPUSH
12468: LD_VAR 0 3
12472: PPUSH
12473: CALL_OW 250
12477: PPUSH
12478: LD_VAR 0 3
12482: PPUSH
12483: CALL_OW 251
12487: PPUSH
12488: CALL_OW 154
12492: GO 12598
12494: LD_INT 2
12496: DOUBLE
12497: EQUAL
12498: IFTRUE 12502
12500: GO 12566
12502: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
12503: LD_VAR 0 6
12507: PUSH
12508: LD_VAR 0 5
12512: ARRAY
12513: PPUSH
12514: LD_VAR 0 3
12518: PPUSH
12519: CALL_OW 250
12523: PUSH
12524: LD_INT 1
12526: NEG
12527: PPUSH
12528: LD_INT 1
12530: PPUSH
12531: CALL_OW 12
12535: PLUS
12536: PPUSH
12537: LD_VAR 0 3
12541: PPUSH
12542: CALL_OW 251
12546: PUSH
12547: LD_INT 1
12549: NEG
12550: PPUSH
12551: LD_INT 1
12553: PPUSH
12554: CALL_OW 12
12558: PLUS
12559: PPUSH
12560: CALL_OW 153
12564: GO 12598
12566: LD_INT 3
12568: DOUBLE
12569: EQUAL
12570: IFTRUE 12574
12572: GO 12597
12574: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
12575: LD_VAR 0 6
12579: PUSH
12580: LD_VAR 0 5
12584: ARRAY
12585: PPUSH
12586: LD_VAR 0 3
12590: PPUSH
12591: CALL_OW 115
12595: GO 12598
12597: POP
// end ; end ;
12598: GO 12414
12600: POP
12601: POP
12602: GO 12401
12604: POP
12605: POP
// end ;
12606: LD_VAR 0 2
12610: RET
// export function TimeLapsersAI ( side , enemy ) ; var j , nearUnit , vehs ; begin
12611: LD_INT 0
12613: PPUSH
12614: PPUSH
12615: PPUSH
12616: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 then
12617: LD_INT 22
12619: PUSH
12620: LD_VAR 0 1
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 21
12631: PUSH
12632: LD_INT 2
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: LD_INT 34
12641: PUSH
12642: LD_INT 49
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: LIST
12653: PPUSH
12654: CALL_OW 69
12658: PUSH
12659: LD_INT 0
12661: EQUAL
12662: IFFALSE 12666
// exit ;
12664: GO 12921
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
12666: LD_INT 22
12668: PUSH
12669: LD_VAR 0 1
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 21
12680: PUSH
12681: LD_INT 2
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: LD_INT 34
12690: PUSH
12691: LD_INT 49
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: LIST
12702: PPUSH
12703: CALL_OW 69
12707: PUSH
12708: LD_INT 0
12710: GREATER
12711: IFFALSE 12921
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
12713: LD_ADDR_VAR 0 6
12717: PUSH
12718: LD_INT 22
12720: PUSH
12721: LD_VAR 0 1
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PUSH
12730: LD_INT 21
12732: PUSH
12733: LD_INT 2
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 34
12742: PUSH
12743: LD_INT 49
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: LIST
12754: PPUSH
12755: CALL_OW 69
12759: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12760: LD_INT 105
12762: PPUSH
12763: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
12767: LD_ADDR_VAR 0 4
12771: PUSH
12772: LD_VAR 0 6
12776: PPUSH
12777: LD_INT 3
12779: PUSH
12780: LD_INT 60
12782: PUSH
12783: EMPTY
12784: LIST
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PPUSH
12790: CALL_OW 72
12794: PUSH
12795: FOR_IN
12796: IFFALSE 12909
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , enemy ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
12798: LD_ADDR_VAR 0 5
12802: PUSH
12803: LD_INT 81
12805: PUSH
12806: LD_VAR 0 1
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 101
12817: PUSH
12818: LD_VAR 0 2
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: LD_INT 2
12829: PUSH
12830: LD_INT 21
12832: PUSH
12833: LD_INT 1
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 3
12842: PUSH
12843: LD_INT 58
12845: PUSH
12846: EMPTY
12847: LIST
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: LIST
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: LIST
12862: PPUSH
12863: CALL_OW 69
12867: PPUSH
12868: LD_VAR 0 4
12872: PPUSH
12873: CALL_OW 74
12877: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
12878: LD_VAR 0 4
12882: PPUSH
12883: LD_VAR 0 5
12887: PPUSH
12888: CALL_OW 250
12892: PPUSH
12893: LD_VAR 0 5
12897: PPUSH
12898: CALL_OW 251
12902: PPUSH
12903: CALL_OW 111
// end ;
12907: GO 12795
12909: POP
12910: POP
// until vehs = 0 ;
12911: LD_VAR 0 6
12915: PUSH
12916: LD_INT 0
12918: EQUAL
12919: IFFALSE 12713
// end ; end_of_file
12921: LD_VAR 0 3
12925: RET
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
12926: LD_VAR 0 1
12930: PUSH
12931: LD_INT 1
12933: EQUAL
12934: PUSH
12935: LD_VAR 0 2
12939: PUSH
12940: LD_INT 4
12942: EQUAL
12943: AND
12944: IFFALSE 12953
// YouLost ( text ) ;
12946: LD_STRING text
12948: PPUSH
12949: CALL_OW 104
// end ;
12953: PPOPN 2
12955: END
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
12956: LD_VAR 0 1
12960: PUSH
12961: LD_INT 235
12963: EQUAL
12964: PUSH
12965: LD_VAR 0 2
12969: PPUSH
12970: CALL_OW 255
12974: PUSH
12975: LD_INT 4
12977: EQUAL
12978: AND
12979: IFFALSE 13055
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
12981: LD_INT 235
12983: PPUSH
12984: LD_INT 84
12986: PPUSH
12987: LD_INT 1
12989: PPUSH
12990: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
12994: LD_INT 235
12996: PPUSH
12997: LD_INT 68
12999: PPUSH
13000: LD_INT 100
13002: PPUSH
13003: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
13007: LD_INT 235
13009: PPUSH
13010: CALL_OW 219
// AddComMoveXY ( PowellCargo , 48 , 69 ) ;
13014: LD_INT 235
13016: PPUSH
13017: LD_INT 48
13019: PPUSH
13020: LD_INT 69
13022: PPUSH
13023: CALL_OW 171
// AddComMoveXY ( PowellCargo , 39 , 61 ) ;
13027: LD_INT 235
13029: PPUSH
13030: LD_INT 39
13032: PPUSH
13033: LD_INT 61
13035: PPUSH
13036: CALL_OW 171
// wait ( 0 0$10 ) ;
13040: LD_INT 350
13042: PPUSH
13043: CALL_OW 67
// powellUnloadCargo = 1 ;
13047: LD_ADDR_EXP 69
13051: PUSH
13052: LD_INT 1
13054: ST_TO_ADDR
// end ; end ;
13055: PPOPN 2
13057: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
13058: LD_INT 0
13060: PPUSH
13061: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13062: LD_ADDR_VAR 0 3
13066: PUSH
13067: LD_INT 22
13069: PUSH
13070: LD_INT 4
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: LD_INT 21
13079: PUSH
13080: LD_INT 1
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 56
13089: PUSH
13090: EMPTY
13091: LIST
13092: PUSH
13093: LD_INT 3
13095: PUSH
13096: LD_INT 60
13098: PUSH
13099: EMPTY
13100: LIST
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: PPUSH
13112: CALL_OW 69
13116: PUSH
13117: LD_EXP 17
13121: PUSH
13122: EMPTY
13123: LIST
13124: DIFF
13125: ST_TO_ADDR
// if GetSide ( building ) = 4 then
13126: LD_VAR 0 1
13130: PPUSH
13131: CALL_OW 255
13135: PUSH
13136: LD_INT 4
13138: EQUAL
13139: IFFALSE 13270
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
13141: LD_INT 22
13143: PUSH
13144: LD_INT 4
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: LD_INT 30
13153: PUSH
13154: LD_INT 8
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PPUSH
13165: CALL_OW 69
13169: PUSH
13170: LD_INT 1
13172: EQUAL
13173: IFFALSE 13270
// begin for i = 1 to 3 do
13175: LD_ADDR_VAR 0 2
13179: PUSH
13180: DOUBLE
13181: LD_INT 1
13183: DEC
13184: ST_TO_ADDR
13185: LD_INT 3
13187: PUSH
13188: FOR_TO
13189: IFFALSE 13253
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
13191: LD_VAR 0 3
13195: PUSH
13196: LD_VAR 0 2
13200: ARRAY
13201: PPUSH
13202: LD_INT 3
13204: PUSH
13205: LD_INT 25
13207: PUSH
13208: LD_INT 2
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PPUSH
13219: CALL_OW 72
13223: PPUSH
13224: LD_VAR 0 1
13228: PPUSH
13229: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
13233: LD_VAR 0 3
13237: PUSH
13238: LD_VAR 0 2
13242: ARRAY
13243: PPUSH
13244: LD_INT 4
13246: PPUSH
13247: CALL_OW 183
// end ;
13251: GO 13188
13253: POP
13254: POP
// ResAllTechs ( 4 , building , 1 ) ;
13255: LD_INT 4
13257: PPUSH
13258: LD_VAR 0 1
13262: PPUSH
13263: LD_INT 1
13265: PPUSH
13266: CALL 9547 0 3
// end ; if GetSide ( building ) = 8 then
13270: LD_VAR 0 1
13274: PPUSH
13275: CALL_OW 255
13279: PUSH
13280: LD_INT 8
13282: EQUAL
13283: IFFALSE 13468
// begin if GetNation ( building ) = 3 then
13285: LD_VAR 0 1
13289: PPUSH
13290: CALL_OW 248
13294: PUSH
13295: LD_INT 3
13297: EQUAL
13298: IFFALSE 13468
// begin AddComMoveXY ( Kozlov , 73 , 16 ) ;
13300: LD_EXP 35
13304: PPUSH
13305: LD_INT 73
13307: PPUSH
13308: LD_INT 16
13310: PPUSH
13311: CALL_OW 171
// AddComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
13315: LD_EXP 35
13319: PPUSH
13320: LD_INT 21
13322: PPUSH
13323: LD_INT 74
13325: PPUSH
13326: LD_INT 12
13328: PPUSH
13329: LD_INT 1
13331: PPUSH
13332: CALL_OW 205
// wait ( 0 0$2 ) ;
13336: LD_INT 70
13338: PPUSH
13339: CALL_OW 67
// AddComEnterUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] ) ;
13343: LD_EXP 35
13347: PPUSH
13348: LD_INT 22
13350: PUSH
13351: LD_INT 8
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 30
13360: PUSH
13361: LD_INT 3
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: LD_INT 23
13370: PUSH
13371: LD_INT 3
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: PPUSH
13383: CALL_OW 69
13387: PUSH
13388: LD_INT 1
13390: ARRAY
13391: PPUSH
13392: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
13396: LD_EXP 35
13400: PPUSH
13401: LD_INT 3
13403: PPUSH
13404: CALL_OW 183
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] , ru_heavy_tracked , 3 , 3 , ru_siberium_rocket ) ;
13408: LD_INT 22
13410: PUSH
13411: LD_INT 8
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PUSH
13418: LD_INT 30
13420: PUSH
13421: LD_INT 3
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 23
13430: PUSH
13431: LD_INT 3
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: PPUSH
13443: CALL_OW 69
13447: PUSH
13448: LD_INT 1
13450: ARRAY
13451: PPUSH
13452: LD_INT 24
13454: PPUSH
13455: LD_INT 3
13457: PPUSH
13458: LD_INT 3
13460: PPUSH
13461: LD_INT 48
13463: PPUSH
13464: CALL_OW 185
// end ; end ; end ;
13468: PPOPN 3
13470: END
// on BuildingComplete ( building ) do var powellPeople ;
13471: LD_INT 0
13473: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
13474: LD_VAR 0 1
13478: PPUSH
13479: CALL_OW 255
13483: PUSH
13484: LD_INT 4
13486: EQUAL
13487: PUSH
13488: LD_VAR 0 1
13492: PPUSH
13493: CALL_OW 266
13497: PUSH
13498: LD_INT 17
13500: EQUAL
13501: AND
13502: IFFALSE 13784
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13504: LD_ADDR_VAR 0 2
13508: PUSH
13509: LD_INT 22
13511: PUSH
13512: LD_INT 4
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 21
13521: PUSH
13522: LD_INT 1
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 56
13531: PUSH
13532: EMPTY
13533: LIST
13534: PUSH
13535: LD_INT 3
13537: PUSH
13538: LD_INT 60
13540: PUSH
13541: EMPTY
13542: LIST
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: PPUSH
13554: CALL_OW 69
13558: PUSH
13559: LD_EXP 17
13563: PUSH
13564: EMPTY
13565: LIST
13566: DIFF
13567: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
13568: LD_INT 22
13570: PUSH
13571: LD_INT 4
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 21
13580: PUSH
13581: LD_INT 3
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: LD_INT 30
13590: PUSH
13591: LD_INT 32
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: LIST
13602: PPUSH
13603: CALL_OW 69
13607: PUSH
13608: LD_INT 1
13610: ARRAY
13611: PPUSH
13612: LD_INT 6
13614: PPUSH
13615: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
13619: LD_INT 22
13621: PUSH
13622: LD_INT 4
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 21
13631: PUSH
13632: LD_INT 3
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 30
13641: PUSH
13642: LD_INT 32
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: LIST
13653: PPUSH
13654: CALL_OW 69
13658: PUSH
13659: LD_INT 2
13661: ARRAY
13662: PPUSH
13663: LD_INT 5
13665: PPUSH
13666: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
13670: LD_VAR 0 2
13674: PUSH
13675: LD_INT 1
13677: ARRAY
13678: PPUSH
13679: LD_INT 22
13681: PUSH
13682: LD_INT 4
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 21
13691: PUSH
13692: LD_INT 3
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 30
13701: PUSH
13702: LD_INT 32
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: LIST
13713: PPUSH
13714: CALL_OW 69
13718: PUSH
13719: LD_INT 1
13721: ARRAY
13722: PPUSH
13723: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
13727: LD_VAR 0 2
13731: PUSH
13732: LD_INT 2
13734: ARRAY
13735: PPUSH
13736: LD_INT 22
13738: PUSH
13739: LD_INT 4
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 21
13748: PUSH
13749: LD_INT 3
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: LD_INT 30
13758: PUSH
13759: LD_INT 32
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: PPUSH
13771: CALL_OW 69
13775: PUSH
13776: LD_INT 2
13778: ARRAY
13779: PPUSH
13780: CALL_OW 120
// end ; if GetSide ( building ) = 8 then
13784: LD_VAR 0 1
13788: PPUSH
13789: CALL_OW 255
13793: PUSH
13794: LD_INT 8
13796: EQUAL
13797: IFFALSE 13823
// begin if GetBType ( building ) = b_workshop then
13799: LD_VAR 0 1
13803: PPUSH
13804: CALL_OW 266
13808: PUSH
13809: LD_INT 2
13811: EQUAL
13812: IFFALSE 13823
// ComUpgrade ( building ) ;
13814: LD_VAR 0 1
13818: PPUSH
13819: CALL_OW 146
// end ; if GetSide ( building ) = 3 then
13823: LD_VAR 0 1
13827: PPUSH
13828: CALL_OW 255
13832: PUSH
13833: LD_INT 3
13835: EQUAL
13836: IFFALSE 13910
// begin russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13838: LD_ADDR_EXP 93
13842: PUSH
13843: LD_EXP 93
13847: PPUSH
13848: LD_INT 1
13850: PPUSH
13851: CALL_OW 3
13855: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13856: LD_ADDR_EXP 93
13860: PUSH
13861: LD_EXP 93
13865: PPUSH
13866: LD_INT 1
13868: PPUSH
13869: CALL_OW 3
13873: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13874: LD_ADDR_EXP 93
13878: PUSH
13879: LD_EXP 93
13883: PPUSH
13884: LD_INT 1
13886: PPUSH
13887: CALL_OW 3
13891: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13892: LD_ADDR_EXP 93
13896: PUSH
13897: LD_EXP 93
13901: PPUSH
13902: LD_INT 1
13904: PPUSH
13905: CALL_OW 3
13909: ST_TO_ADDR
// end ; if GetSide ( building ) = 8 then
13910: LD_VAR 0 1
13914: PPUSH
13915: CALL_OW 255
13919: PUSH
13920: LD_INT 8
13922: EQUAL
13923: IFFALSE 13997
// begin legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13925: LD_ADDR_EXP 92
13929: PUSH
13930: LD_EXP 92
13934: PPUSH
13935: LD_INT 1
13937: PPUSH
13938: CALL_OW 3
13942: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13943: LD_ADDR_EXP 92
13947: PUSH
13948: LD_EXP 92
13952: PPUSH
13953: LD_INT 1
13955: PPUSH
13956: CALL_OW 3
13960: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13961: LD_ADDR_EXP 92
13965: PUSH
13966: LD_EXP 92
13970: PPUSH
13971: LD_INT 1
13973: PPUSH
13974: CALL_OW 3
13978: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13979: LD_ADDR_EXP 92
13983: PUSH
13984: LD_EXP 92
13988: PPUSH
13989: LD_INT 1
13991: PPUSH
13992: CALL_OW 3
13996: ST_TO_ADDR
// end ; if GetSide ( building ) = 7 then
13997: LD_VAR 0 1
14001: PPUSH
14002: CALL_OW 255
14006: PUSH
14007: LD_INT 7
14009: EQUAL
14010: IFFALSE 14084
// begin allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14012: LD_ADDR_EXP 94
14016: PUSH
14017: LD_EXP 94
14021: PPUSH
14022: LD_INT 1
14024: PPUSH
14025: CALL_OW 3
14029: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14030: LD_ADDR_EXP 94
14034: PUSH
14035: LD_EXP 94
14039: PPUSH
14040: LD_INT 1
14042: PPUSH
14043: CALL_OW 3
14047: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14048: LD_ADDR_EXP 94
14052: PUSH
14053: LD_EXP 94
14057: PPUSH
14058: LD_INT 1
14060: PPUSH
14061: CALL_OW 3
14065: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14066: LD_ADDR_EXP 94
14070: PUSH
14071: LD_EXP 94
14075: PPUSH
14076: LD_INT 1
14078: PPUSH
14079: CALL_OW 3
14083: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
14084: LD_VAR 0 1
14088: PPUSH
14089: CALL_OW 255
14093: PUSH
14094: LD_INT 3
14096: EQUAL
14097: IFFALSE 14164
// begin if GetBType ( building ) = b_bunker or GetBType ( building ) = b_turret then
14099: LD_VAR 0 1
14103: PPUSH
14104: CALL_OW 266
14108: PUSH
14109: LD_INT 32
14111: EQUAL
14112: PUSH
14113: LD_VAR 0 1
14117: PPUSH
14118: CALL_OW 266
14122: PUSH
14123: LD_INT 33
14125: EQUAL
14126: OR
14127: IFFALSE 14164
// PlaceWeaponTurret ( building , [ 46 , 47 , 45 ] [ Rand ( 1 , 3 ) ] ) ;
14129: LD_VAR 0 1
14133: PPUSH
14134: LD_INT 46
14136: PUSH
14137: LD_INT 47
14139: PUSH
14140: LD_INT 45
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 1
14150: PPUSH
14151: LD_INT 3
14153: PPUSH
14154: CALL_OW 12
14158: ARRAY
14159: PPUSH
14160: CALL_OW 431
// end ; if GetSide ( building ) = 8 and GetBType ( building ) = b_bunker then
14164: LD_VAR 0 1
14168: PPUSH
14169: CALL_OW 255
14173: PUSH
14174: LD_INT 8
14176: EQUAL
14177: PUSH
14178: LD_VAR 0 1
14182: PPUSH
14183: CALL_OW 266
14187: PUSH
14188: LD_INT 32
14190: EQUAL
14191: AND
14192: IFFALSE 14225
// begin PlaceWeaponTurret ( building , [ 28 , 27 ] [ Rand ( 1 , 2 ) ] ) ;
14194: LD_VAR 0 1
14198: PPUSH
14199: LD_INT 28
14201: PUSH
14202: LD_INT 27
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 1
14211: PPUSH
14212: LD_INT 2
14214: PPUSH
14215: CALL_OW 12
14219: ARRAY
14220: PPUSH
14221: CALL_OW 431
// end ; end ;
14225: PPOPN 2
14227: END
// on EnterBuilding ( building , human ) do begin end ;
14228: PPOPN 2
14230: END
// on BehemothConstructed ( vehicle ) do begin if GetSide ( vehicle ) = 6 then
14231: LD_VAR 0 1
14235: PPUSH
14236: CALL_OW 255
14240: PUSH
14241: LD_INT 6
14243: EQUAL
14244: IFFALSE 14262
// ruBehs = ruBehs ^ vehicle ;
14246: LD_ADDR_EXP 58
14250: PUSH
14251: LD_EXP 58
14255: PUSH
14256: LD_VAR 0 1
14260: ADD
14261: ST_TO_ADDR
// end ;
14262: PPOPN 1
14264: END
// on VehicleConstructed ( vehicle , building ) do var legionBomb ;
14265: LD_INT 0
14267: PPUSH
// begin if vehicle = powellVeh then
14268: LD_VAR 0 1
14272: PUSH
14273: LD_EXP 72
14277: EQUAL
14278: IFFALSE 14294
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
14280: LD_VAR 0 1
14284: PPUSH
14285: CALL_OW 313
14289: PPUSH
14290: CALL_OW 121
// if GetSide ( vehicle ) = 4 then
14294: LD_VAR 0 1
14298: PPUSH
14299: CALL_OW 255
14303: PUSH
14304: LD_INT 4
14306: EQUAL
14307: IFFALSE 14324
// AddComMoveXY ( vehicle , 58 , 63 ) ;
14309: LD_VAR 0 1
14313: PPUSH
14314: LD_INT 58
14316: PPUSH
14317: LD_INT 63
14319: PPUSH
14320: CALL_OW 171
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
14324: LD_VAR 0 1
14328: PPUSH
14329: CALL_OW 255
14333: PUSH
14334: LD_INT 4
14336: EQUAL
14337: PUSH
14338: LD_EXP 68
14342: PUSH
14343: LD_INT 2
14345: EQUAL
14346: AND
14347: PUSH
14348: LD_VAR 0 1
14352: PPUSH
14353: CALL_OW 264
14357: PUSH
14358: LD_INT 6
14360: EQUAL
14361: AND
14362: IFFALSE 14416
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
14364: LD_EXP 65
14368: PUSH
14369: LD_INT 5
14371: ARRAY
14372: PPUSH
14373: CALL_OW 122
// wait ( 0 0$1 ) ;
14377: LD_INT 35
14379: PPUSH
14380: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
14384: LD_EXP 65
14388: PUSH
14389: LD_INT 5
14391: ARRAY
14392: PPUSH
14393: LD_INT 85
14395: PPUSH
14396: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
14400: LD_EXP 65
14404: PUSH
14405: LD_INT 5
14407: ARRAY
14408: PPUSH
14409: LD_INT 3
14411: PPUSH
14412: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
14416: LD_VAR 0 1
14420: PPUSH
14421: CALL_OW 255
14425: PUSH
14426: LD_INT 4
14428: EQUAL
14429: PUSH
14430: LD_EXP 68
14434: PUSH
14435: LD_INT 2
14437: EQUAL
14438: AND
14439: PUSH
14440: LD_VAR 0 1
14444: PPUSH
14445: CALL_OW 264
14449: PUSH
14450: LD_INT 3
14452: EQUAL
14453: AND
14454: IFFALSE 14481
// begin powellVeh = vehicle ;
14456: LD_ADDR_EXP 72
14460: PUSH
14461: LD_VAR 0 1
14465: ST_TO_ADDR
// ComMoveXY ( vehicle , 49 , 74 ) ;
14466: LD_VAR 0 1
14470: PPUSH
14471: LD_INT 49
14473: PPUSH
14474: LD_INT 74
14476: PPUSH
14477: CALL_OW 111
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 2 and GetType ( vehicle ) = unit_vehicle then
14481: LD_VAR 0 1
14485: PPUSH
14486: CALL_OW 255
14490: PUSH
14491: LD_INT 8
14493: EQUAL
14494: PUSH
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 248
14504: PUSH
14505: LD_INT 2
14507: EQUAL
14508: AND
14509: PUSH
14510: LD_VAR 0 1
14514: PPUSH
14515: CALL_OW 247
14519: PUSH
14520: LD_INT 2
14522: EQUAL
14523: AND
14524: IFFALSE 14560
// begin legionVehicles = legionVehicles ^ vehicle ;
14526: LD_ADDR_EXP 54
14530: PUSH
14531: LD_EXP 54
14535: PUSH
14536: LD_VAR 0 1
14540: ADD
14541: ST_TO_ADDR
// ComLinkTo ( vehicle , arControler [ 1 ] ) ;
14542: LD_VAR 0 1
14546: PPUSH
14547: LD_EXP 55
14551: PUSH
14552: LD_INT 1
14554: ARRAY
14555: PPUSH
14556: CALL_OW 135
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 3 then
14560: LD_VAR 0 1
14564: PPUSH
14565: CALL_OW 255
14569: PUSH
14570: LD_INT 8
14572: EQUAL
14573: PUSH
14574: LD_VAR 0 1
14578: PPUSH
14579: CALL_OW 248
14583: PUSH
14584: LD_INT 3
14586: EQUAL
14587: AND
14588: IFFALSE 14879
// begin ChangeMissionObjectives ( MlegionDel ) ;
14590: LD_STRING MlegionDel
14592: PPUSH
14593: CALL_OW 337
// legionBomb = rand ( 1 , 2 ) ;
14597: LD_ADDR_VAR 0 3
14601: PUSH
14602: LD_INT 1
14604: PPUSH
14605: LD_INT 2
14607: PPUSH
14608: CALL_OW 12
14612: ST_TO_ADDR
// legionRocket = vehicle ;
14613: LD_ADDR_EXP 98
14617: PUSH
14618: LD_VAR 0 1
14622: ST_TO_ADDR
// DialogueOn ;
14623: CALL_OW 6
// if legionBomb = 1 then
14627: LD_VAR 0 3
14631: PUSH
14632: LD_INT 1
14634: EQUAL
14635: IFFALSE 14759
// begin if Kurt then
14637: LD_EXP 30
14641: IFFALSE 14657
// Say ( Kurt , D12-Kurt-1 ) else
14643: LD_EXP 30
14647: PPUSH
14648: LD_STRING D12-Kurt-1
14650: PPUSH
14651: CALL_OW 88
14655: GO 14719
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12-Kurt-1 ) ;
14657: LD_INT 22
14659: PUSH
14660: LD_INT 8
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 21
14669: PUSH
14670: LD_INT 1
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 25
14679: PUSH
14680: LD_INT 1
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 26
14689: PUSH
14690: LD_INT 1
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: PPUSH
14703: CALL_OW 69
14707: PUSH
14708: LD_INT 2
14710: ARRAY
14711: PPUSH
14712: LD_STRING D12-Kurt-1
14714: PPUSH
14715: CALL_OW 88
// DialogueOff ;
14719: CALL_OW 7
// wait ( 0 0$3 ) ;
14723: LD_INT 105
14725: PPUSH
14726: CALL_OW 67
// AddComAttackPlace ( legionRocket , GetX ( JMM ) , GetY ( JMM ) ) ;
14730: LD_EXP 98
14734: PPUSH
14735: LD_EXP 1
14739: PPUSH
14740: CALL_OW 250
14744: PPUSH
14745: LD_EXP 1
14749: PPUSH
14750: CALL_OW 251
14754: PPUSH
14755: CALL_OW 176
// end ; if legionBomb = 2 then
14759: LD_VAR 0 3
14763: PUSH
14764: LD_INT 2
14766: EQUAL
14767: IFFALSE 14879
// begin if Kurt then
14769: LD_EXP 30
14773: IFFALSE 14789
// Say ( Kurt , D12a-Kurt-1 ) else
14775: LD_EXP 30
14779: PPUSH
14780: LD_STRING D12a-Kurt-1
14782: PPUSH
14783: CALL_OW 88
14787: GO 14851
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12a-Kurt-11 ) ;
14789: LD_INT 22
14791: PUSH
14792: LD_INT 8
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 21
14801: PUSH
14802: LD_INT 1
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: PUSH
14809: LD_INT 25
14811: PUSH
14812: LD_INT 1
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 26
14821: PUSH
14822: LD_INT 1
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: PPUSH
14835: CALL_OW 69
14839: PUSH
14840: LD_INT 2
14842: ARRAY
14843: PPUSH
14844: LD_STRING D12a-Kurt-11
14846: PPUSH
14847: CALL_OW 88
// SayRadio ( Roth , D12a-Roth-1 ) ;
14851: LD_EXP 28
14855: PPUSH
14856: LD_STRING D12a-Roth-1
14858: PPUSH
14859: CALL_OW 94
// DialogueOff ;
14863: CALL_OW 7
// ComAttackUnit ( legionRocket , RuDep2 ) ;
14867: LD_EXP 98
14871: PPUSH
14872: LD_INT 23
14874: PPUSH
14875: CALL_OW 115
// end ; end ; if GetSide ( vehicle ) = 3 and GetNation ( vehicle ) = 3 and GetType ( vehicle ) = unit_vehicle then
14879: LD_VAR 0 1
14883: PPUSH
14884: CALL_OW 255
14888: PUSH
14889: LD_INT 3
14891: EQUAL
14892: PUSH
14893: LD_VAR 0 1
14897: PPUSH
14898: CALL_OW 248
14902: PUSH
14903: LD_INT 3
14905: EQUAL
14906: AND
14907: PUSH
14908: LD_VAR 0 1
14912: PPUSH
14913: CALL_OW 247
14917: PUSH
14918: LD_INT 2
14920: EQUAL
14921: AND
14922: IFFALSE 14940
// RussianVehicles = RussianVehicles ^ vehicle ;
14924: LD_ADDR_EXP 60
14928: PUSH
14929: LD_EXP 60
14933: PUSH
14934: LD_VAR 0 1
14938: ADD
14939: ST_TO_ADDR
// if GetSide ( vehicle ) = 7 and GetType ( vehicle ) = unit_vehicle then
14940: LD_VAR 0 1
14944: PPUSH
14945: CALL_OW 255
14949: PUSH
14950: LD_INT 7
14952: EQUAL
14953: PUSH
14954: LD_VAR 0 1
14958: PPUSH
14959: CALL_OW 247
14963: PUSH
14964: LD_INT 2
14966: EQUAL
14967: AND
14968: IFFALSE 15027
// begin AllianceVehicles = AllianceVehicles ^ vehicle ;
14970: LD_ADDR_EXP 61
14974: PUSH
14975: LD_EXP 61
14979: PUSH
14980: LD_VAR 0 1
14984: ADD
14985: ST_TO_ADDR
// if GetControl ( vehicle ) = 2 then
14986: LD_VAR 0 1
14990: PPUSH
14991: CALL_OW 263
14995: PUSH
14996: LD_INT 2
14998: EQUAL
14999: IFFALSE 15027
// ComLinkTo ( vehicle , allianceControler [ rand ( 1 , 3 ) ] ) ;
15001: LD_VAR 0 1
15005: PPUSH
15006: LD_EXP 62
15010: PUSH
15011: LD_INT 1
15013: PPUSH
15014: LD_INT 3
15016: PPUSH
15017: CALL_OW 12
15021: ARRAY
15022: PPUSH
15023: CALL_OW 135
// end ; end ;
15027: PPOPN 3
15029: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
15030: LD_VAR 0 1
15034: PPUSH
15035: CALL_OW 255
15039: PUSH
15040: LD_INT 4
15042: EQUAL
15043: PUSH
15044: LD_EXP 68
15048: PUSH
15049: LD_INT 1
15051: EQUAL
15052: AND
15053: IFFALSE 15156
// begin ComEnterUnit ( human , AmFact ) ;
15055: LD_VAR 0 2
15059: PPUSH
15060: LD_INT 85
15062: PPUSH
15063: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
15067: LD_VAR 0 2
15071: PPUSH
15072: CALL_OW 258
15076: PUSH
15077: LD_INT 1
15079: EQUAL
15080: PUSH
15081: LD_EXP 101
15085: PUSH
15086: LD_INT 0
15088: EQUAL
15089: AND
15090: IFFALSE 15156
// begin blockEvent1 = 1 ;
15092: LD_ADDR_EXP 101
15096: PUSH
15097: LD_INT 1
15099: ST_TO_ADDR
// startAttacks = 1 ;
15100: LD_ADDR_EXP 71
15104: PUSH
15105: LD_INT 1
15107: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
15108: LD_VAR 0 2
15112: PPUSH
15113: LD_STRING D4a-Sol1-1
15115: PPUSH
15116: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
15120: LD_EXP 17
15124: PPUSH
15125: LD_STRING D4a-Pow-1
15127: PPUSH
15128: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
15132: LD_VAR 0 2
15136: PPUSH
15137: LD_STRING D4a-Sol1-2
15139: PPUSH
15140: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
15144: LD_EXP 17
15148: PPUSH
15149: LD_STRING D4a-Pow-2
15151: PPUSH
15152: CALL_OW 88
// end ; end ; end ;
15156: PPOPN 2
15158: END
// on UnitDestroyed ( unit ) do var i ;
15159: LD_INT 0
15161: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15162: LD_VAR 0 1
15166: PPUSH
15167: CALL_OW 255
15171: PUSH
15172: LD_INT 1
15174: EQUAL
15175: PUSH
15176: LD_VAR 0 1
15180: PPUSH
15181: CALL_OW 247
15185: PUSH
15186: LD_INT 1
15188: EQUAL
15189: AND
15190: IFFALSE 15206
// unitLost = unitLost + 1 ;
15192: LD_ADDR_EXP 97
15196: PUSH
15197: LD_EXP 97
15201: PUSH
15202: LD_INT 1
15204: PLUS
15205: ST_TO_ADDR
// if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
15206: LD_VAR 0 1
15210: PPUSH
15211: CALL_OW 255
15215: PUSH
15216: LD_INT 4
15218: EQUAL
15219: PUSH
15220: LD_VAR 0 1
15224: PPUSH
15225: CALL_OW 247
15229: PUSH
15230: LD_INT 1
15232: EQUAL
15233: AND
15234: IFFALSE 15284
// begin for i in amUnitsAttack do
15236: LD_ADDR_VAR 0 2
15240: PUSH
15241: LD_EXP 65
15245: PUSH
15246: FOR_IN
15247: IFFALSE 15282
// if i = unit then
15249: LD_VAR 0 2
15253: PUSH
15254: LD_VAR 0 1
15258: EQUAL
15259: IFFALSE 15280
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
15261: LD_ADDR_EXP 65
15265: PUSH
15266: LD_EXP 65
15270: PUSH
15271: LD_VAR 0 1
15275: PUSH
15276: EMPTY
15277: LIST
15278: DIFF
15279: ST_TO_ADDR
15280: GO 15246
15282: POP
15283: POP
// end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
15284: LD_VAR 0 1
15288: PPUSH
15289: CALL_OW 255
15293: PUSH
15294: LD_INT 8
15296: EQUAL
15297: PUSH
15298: LD_VAR 0 1
15302: PPUSH
15303: CALL_OW 247
15307: PUSH
15308: LD_INT 2
15310: EQUAL
15311: AND
15312: PUSH
15313: LD_VAR 0 1
15317: PPUSH
15318: CALL_OW 248
15322: PUSH
15323: LD_INT 2
15325: EQUAL
15326: AND
15327: IFFALSE 15377
// begin for i in legionVehicles do
15329: LD_ADDR_VAR 0 2
15333: PUSH
15334: LD_EXP 54
15338: PUSH
15339: FOR_IN
15340: IFFALSE 15375
// if i = unit then
15342: LD_VAR 0 2
15346: PUSH
15347: LD_VAR 0 1
15351: EQUAL
15352: IFFALSE 15373
// legionVehicles = legionVehicles diff [ unit ] ;
15354: LD_ADDR_EXP 54
15358: PUSH
15359: LD_EXP 54
15363: PUSH
15364: LD_VAR 0 1
15368: PUSH
15369: EMPTY
15370: LIST
15371: DIFF
15372: ST_TO_ADDR
15373: GO 15339
15375: POP
15376: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
15377: LD_VAR 0 1
15381: PPUSH
15382: CALL_OW 255
15386: PUSH
15387: LD_INT 3
15389: EQUAL
15390: PUSH
15391: LD_VAR 0 1
15395: PPUSH
15396: CALL_OW 247
15400: PUSH
15401: LD_INT 2
15403: EQUAL
15404: AND
15405: IFFALSE 15455
// begin for i in RussianVehicles do
15407: LD_ADDR_VAR 0 2
15411: PUSH
15412: LD_EXP 60
15416: PUSH
15417: FOR_IN
15418: IFFALSE 15453
// if i = unit then
15420: LD_VAR 0 2
15424: PUSH
15425: LD_VAR 0 1
15429: EQUAL
15430: IFFALSE 15451
// RussianVehicles = RussianVehicles diff [ unit ] ;
15432: LD_ADDR_EXP 60
15436: PUSH
15437: LD_EXP 60
15441: PUSH
15442: LD_VAR 0 1
15446: PUSH
15447: EMPTY
15448: LIST
15449: DIFF
15450: ST_TO_ADDR
15451: GO 15417
15453: POP
15454: POP
// end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_vehicle then
15455: LD_VAR 0 1
15459: PPUSH
15460: CALL_OW 255
15464: PUSH
15465: LD_INT 7
15467: EQUAL
15468: PUSH
15469: LD_VAR 0 1
15473: PPUSH
15474: CALL_OW 247
15478: PUSH
15479: LD_INT 2
15481: EQUAL
15482: AND
15483: IFFALSE 15533
// begin for i in AllianceVehicles do
15485: LD_ADDR_VAR 0 2
15489: PUSH
15490: LD_EXP 61
15494: PUSH
15495: FOR_IN
15496: IFFALSE 15531
// if i = unit then
15498: LD_VAR 0 2
15502: PUSH
15503: LD_VAR 0 1
15507: EQUAL
15508: IFFALSE 15529
// AllianceVehicles = AllianceVehicles diff [ unit ] ;
15510: LD_ADDR_EXP 61
15514: PUSH
15515: LD_EXP 61
15519: PUSH
15520: LD_VAR 0 1
15524: PUSH
15525: EMPTY
15526: LIST
15527: DIFF
15528: ST_TO_ADDR
15529: GO 15495
15531: POP
15532: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
15533: LD_VAR 0 1
15537: PPUSH
15538: CALL_OW 255
15542: PUSH
15543: LD_INT 3
15545: EQUAL
15546: PUSH
15547: LD_VAR 0 1
15551: PPUSH
15552: CALL_OW 247
15556: PUSH
15557: LD_INT 3
15559: EQUAL
15560: AND
15561: IFFALSE 16253
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15563: LD_VAR 0 1
15567: PPUSH
15568: CALL_OW 266
15572: PUSH
15573: LD_INT 31
15575: EQUAL
15576: PUSH
15577: LD_VAR 0 1
15581: PPUSH
15582: CALL_OW 266
15586: PUSH
15587: LD_INT 32
15589: EQUAL
15590: OR
15591: PUSH
15592: LD_VAR 0 1
15596: PPUSH
15597: CALL_OW 266
15601: PUSH
15602: LD_INT 36
15604: EQUAL
15605: OR
15606: PUSH
15607: LD_VAR 0 1
15611: PPUSH
15612: CALL_OW 266
15616: PUSH
15617: LD_INT 0
15619: EQUAL
15620: OR
15621: PUSH
15622: LD_VAR 0 1
15626: PPUSH
15627: CALL_OW 266
15631: PUSH
15632: LD_INT 24
15634: EQUAL
15635: OR
15636: PUSH
15637: LD_VAR 0 1
15641: PPUSH
15642: CALL_OW 266
15646: PUSH
15647: LD_INT 17
15649: EQUAL
15650: OR
15651: PUSH
15652: LD_VAR 0 1
15656: PPUSH
15657: CALL_OW 266
15661: PUSH
15662: LD_INT 25
15664: EQUAL
15665: OR
15666: PUSH
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL_OW 266
15676: PUSH
15677: LD_INT 19
15679: EQUAL
15680: OR
15681: PUSH
15682: LD_VAR 0 1
15686: PPUSH
15687: CALL_OW 266
15691: PUSH
15692: LD_INT 20
15694: EQUAL
15695: OR
15696: PUSH
15697: LD_VAR 0 1
15701: PPUSH
15702: CALL_OW 266
15706: PUSH
15707: LD_INT 18
15709: EQUAL
15710: OR
15711: PUSH
15712: LD_VAR 0 1
15716: PPUSH
15717: CALL_OW 266
15721: PUSH
15722: LD_INT 21
15724: EQUAL
15725: OR
15726: PUSH
15727: LD_VAR 0 1
15731: PPUSH
15732: CALL_OW 266
15736: PUSH
15737: LD_INT 23
15739: EQUAL
15740: OR
15741: PUSH
15742: LD_VAR 0 1
15746: PPUSH
15747: CALL_OW 266
15751: PUSH
15752: LD_INT 16
15754: EQUAL
15755: OR
15756: PUSH
15757: LD_VAR 0 1
15761: PPUSH
15762: CALL_OW 266
15766: PUSH
15767: LD_INT 6
15769: EQUAL
15770: OR
15771: PUSH
15772: LD_VAR 0 1
15776: PPUSH
15777: CALL_OW 266
15781: PUSH
15782: LD_INT 29
15784: EQUAL
15785: OR
15786: PUSH
15787: LD_VAR 0 1
15791: PPUSH
15792: CALL_OW 266
15796: PUSH
15797: LD_INT 26
15799: EQUAL
15800: OR
15801: PUSH
15802: LD_VAR 0 1
15806: PPUSH
15807: CALL_OW 266
15811: PUSH
15812: LD_INT 30
15814: EQUAL
15815: OR
15816: PUSH
15817: LD_VAR 0 1
15821: PPUSH
15822: CALL_OW 266
15826: PUSH
15827: LD_INT 28
15829: EQUAL
15830: OR
15831: PUSH
15832: LD_VAR 0 1
15836: PPUSH
15837: CALL_OW 266
15841: PUSH
15842: LD_INT 27
15844: EQUAL
15845: OR
15846: PUSH
15847: LD_VAR 0 1
15851: PPUSH
15852: CALL_OW 266
15856: PUSH
15857: LD_INT 33
15859: EQUAL
15860: OR
15861: PUSH
15862: LD_VAR 0 1
15866: PPUSH
15867: CALL_OW 266
15871: PUSH
15872: LD_INT 2
15874: EQUAL
15875: OR
15876: PUSH
15877: LD_VAR 0 1
15881: PPUSH
15882: CALL_OW 266
15886: PUSH
15887: LD_INT 4
15889: EQUAL
15890: OR
15891: IFFALSE 15977
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ GetBType ( unit ) ;
15893: LD_ADDR_EXP 93
15897: PUSH
15898: LD_EXP 93
15902: PUSH
15903: LD_VAR 0 1
15907: PPUSH
15908: CALL_OW 266
15912: ADD
15913: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
15914: LD_ADDR_EXP 93
15918: PUSH
15919: LD_EXP 93
15923: PUSH
15924: LD_VAR 0 1
15928: PPUSH
15929: CALL_OW 250
15933: ADD
15934: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
15935: LD_ADDR_EXP 93
15939: PUSH
15940: LD_EXP 93
15944: PUSH
15945: LD_VAR 0 1
15949: PPUSH
15950: CALL_OW 251
15954: ADD
15955: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
15956: LD_ADDR_EXP 93
15960: PUSH
15961: LD_EXP 93
15965: PUSH
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 254
15975: ADD
15976: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
15977: LD_VAR 0 1
15981: PPUSH
15982: CALL_OW 266
15986: PUSH
15987: LD_INT 1
15989: EQUAL
15990: IFFALSE 16069
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 0 ;
15992: LD_ADDR_EXP 93
15996: PUSH
15997: LD_EXP 93
16001: PUSH
16002: LD_INT 0
16004: ADD
16005: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16006: LD_ADDR_EXP 93
16010: PUSH
16011: LD_EXP 93
16015: PUSH
16016: LD_VAR 0 1
16020: PPUSH
16021: CALL_OW 250
16025: ADD
16026: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16027: LD_ADDR_EXP 93
16031: PUSH
16032: LD_EXP 93
16036: PUSH
16037: LD_VAR 0 1
16041: PPUSH
16042: CALL_OW 251
16046: ADD
16047: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16048: LD_ADDR_EXP 93
16052: PUSH
16053: LD_EXP 93
16057: PUSH
16058: LD_VAR 0 1
16062: PPUSH
16063: CALL_OW 254
16067: ADD
16068: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16069: LD_VAR 0 1
16073: PPUSH
16074: CALL_OW 266
16078: PUSH
16079: LD_INT 3
16081: EQUAL
16082: IFFALSE 16161
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 2 ;
16084: LD_ADDR_EXP 93
16088: PUSH
16089: LD_EXP 93
16093: PUSH
16094: LD_INT 2
16096: ADD
16097: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16098: LD_ADDR_EXP 93
16102: PUSH
16103: LD_EXP 93
16107: PUSH
16108: LD_VAR 0 1
16112: PPUSH
16113: CALL_OW 250
16117: ADD
16118: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16119: LD_ADDR_EXP 93
16123: PUSH
16124: LD_EXP 93
16128: PUSH
16129: LD_VAR 0 1
16133: PPUSH
16134: CALL_OW 251
16138: ADD
16139: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16140: LD_ADDR_EXP 93
16144: PUSH
16145: LD_EXP 93
16149: PUSH
16150: LD_VAR 0 1
16154: PPUSH
16155: CALL_OW 254
16159: ADD
16160: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16161: LD_VAR 0 1
16165: PPUSH
16166: CALL_OW 266
16170: PUSH
16171: LD_INT 5
16173: EQUAL
16174: IFFALSE 16253
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 4 ;
16176: LD_ADDR_EXP 93
16180: PUSH
16181: LD_EXP 93
16185: PUSH
16186: LD_INT 4
16188: ADD
16189: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16190: LD_ADDR_EXP 93
16194: PUSH
16195: LD_EXP 93
16199: PUSH
16200: LD_VAR 0 1
16204: PPUSH
16205: CALL_OW 250
16209: ADD
16210: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16211: LD_ADDR_EXP 93
16215: PUSH
16216: LD_EXP 93
16220: PUSH
16221: LD_VAR 0 1
16225: PPUSH
16226: CALL_OW 251
16230: ADD
16231: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16232: LD_ADDR_EXP 93
16236: PUSH
16237: LD_EXP 93
16241: PUSH
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 254
16251: ADD
16252: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_building and GetNation ( unit ) = 2 then
16253: LD_VAR 0 1
16257: PPUSH
16258: CALL_OW 255
16262: PUSH
16263: LD_INT 8
16265: EQUAL
16266: PUSH
16267: LD_VAR 0 1
16271: PPUSH
16272: CALL_OW 247
16276: PUSH
16277: LD_INT 3
16279: EQUAL
16280: AND
16281: PUSH
16282: LD_VAR 0 1
16286: PPUSH
16287: CALL_OW 248
16291: PUSH
16292: LD_INT 2
16294: EQUAL
16295: AND
16296: IFFALSE 16988
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16298: LD_VAR 0 1
16302: PPUSH
16303: CALL_OW 266
16307: PUSH
16308: LD_INT 31
16310: EQUAL
16311: PUSH
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL_OW 266
16321: PUSH
16322: LD_INT 32
16324: EQUAL
16325: OR
16326: PUSH
16327: LD_VAR 0 1
16331: PPUSH
16332: CALL_OW 266
16336: PUSH
16337: LD_INT 36
16339: EQUAL
16340: OR
16341: PUSH
16342: LD_VAR 0 1
16346: PPUSH
16347: CALL_OW 266
16351: PUSH
16352: LD_INT 0
16354: EQUAL
16355: OR
16356: PUSH
16357: LD_VAR 0 1
16361: PPUSH
16362: CALL_OW 266
16366: PUSH
16367: LD_INT 24
16369: EQUAL
16370: OR
16371: PUSH
16372: LD_VAR 0 1
16376: PPUSH
16377: CALL_OW 266
16381: PUSH
16382: LD_INT 17
16384: EQUAL
16385: OR
16386: PUSH
16387: LD_VAR 0 1
16391: PPUSH
16392: CALL_OW 266
16396: PUSH
16397: LD_INT 25
16399: EQUAL
16400: OR
16401: PUSH
16402: LD_VAR 0 1
16406: PPUSH
16407: CALL_OW 266
16411: PUSH
16412: LD_INT 19
16414: EQUAL
16415: OR
16416: PUSH
16417: LD_VAR 0 1
16421: PPUSH
16422: CALL_OW 266
16426: PUSH
16427: LD_INT 20
16429: EQUAL
16430: OR
16431: PUSH
16432: LD_VAR 0 1
16436: PPUSH
16437: CALL_OW 266
16441: PUSH
16442: LD_INT 18
16444: EQUAL
16445: OR
16446: PUSH
16447: LD_VAR 0 1
16451: PPUSH
16452: CALL_OW 266
16456: PUSH
16457: LD_INT 21
16459: EQUAL
16460: OR
16461: PUSH
16462: LD_VAR 0 1
16466: PPUSH
16467: CALL_OW 266
16471: PUSH
16472: LD_INT 23
16474: EQUAL
16475: OR
16476: PUSH
16477: LD_VAR 0 1
16481: PPUSH
16482: CALL_OW 266
16486: PUSH
16487: LD_INT 16
16489: EQUAL
16490: OR
16491: PUSH
16492: LD_VAR 0 1
16496: PPUSH
16497: CALL_OW 266
16501: PUSH
16502: LD_INT 6
16504: EQUAL
16505: OR
16506: PUSH
16507: LD_VAR 0 1
16511: PPUSH
16512: CALL_OW 266
16516: PUSH
16517: LD_INT 29
16519: EQUAL
16520: OR
16521: PUSH
16522: LD_VAR 0 1
16526: PPUSH
16527: CALL_OW 266
16531: PUSH
16532: LD_INT 26
16534: EQUAL
16535: OR
16536: PUSH
16537: LD_VAR 0 1
16541: PPUSH
16542: CALL_OW 266
16546: PUSH
16547: LD_INT 30
16549: EQUAL
16550: OR
16551: PUSH
16552: LD_VAR 0 1
16556: PPUSH
16557: CALL_OW 266
16561: PUSH
16562: LD_INT 28
16564: EQUAL
16565: OR
16566: PUSH
16567: LD_VAR 0 1
16571: PPUSH
16572: CALL_OW 266
16576: PUSH
16577: LD_INT 27
16579: EQUAL
16580: OR
16581: PUSH
16582: LD_VAR 0 1
16586: PPUSH
16587: CALL_OW 266
16591: PUSH
16592: LD_INT 33
16594: EQUAL
16595: OR
16596: PUSH
16597: LD_VAR 0 1
16601: PPUSH
16602: CALL_OW 266
16606: PUSH
16607: LD_INT 2
16609: EQUAL
16610: OR
16611: PUSH
16612: LD_VAR 0 1
16616: PPUSH
16617: CALL_OW 266
16621: PUSH
16622: LD_INT 4
16624: EQUAL
16625: OR
16626: IFFALSE 16712
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ GetBType ( unit ) ;
16628: LD_ADDR_EXP 92
16632: PUSH
16633: LD_EXP 92
16637: PUSH
16638: LD_VAR 0 1
16642: PPUSH
16643: CALL_OW 266
16647: ADD
16648: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16649: LD_ADDR_EXP 92
16653: PUSH
16654: LD_EXP 92
16658: PUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 250
16668: ADD
16669: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16670: LD_ADDR_EXP 92
16674: PUSH
16675: LD_EXP 92
16679: PUSH
16680: LD_VAR 0 1
16684: PPUSH
16685: CALL_OW 251
16689: ADD
16690: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16691: LD_ADDR_EXP 92
16695: PUSH
16696: LD_EXP 92
16700: PUSH
16701: LD_VAR 0 1
16705: PPUSH
16706: CALL_OW 254
16710: ADD
16711: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16712: LD_VAR 0 1
16716: PPUSH
16717: CALL_OW 266
16721: PUSH
16722: LD_INT 1
16724: EQUAL
16725: IFFALSE 16804
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 0 ;
16727: LD_ADDR_EXP 92
16731: PUSH
16732: LD_EXP 92
16736: PUSH
16737: LD_INT 0
16739: ADD
16740: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16741: LD_ADDR_EXP 92
16745: PUSH
16746: LD_EXP 92
16750: PUSH
16751: LD_VAR 0 1
16755: PPUSH
16756: CALL_OW 250
16760: ADD
16761: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16762: LD_ADDR_EXP 92
16766: PUSH
16767: LD_EXP 92
16771: PUSH
16772: LD_VAR 0 1
16776: PPUSH
16777: CALL_OW 251
16781: ADD
16782: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16783: LD_ADDR_EXP 92
16787: PUSH
16788: LD_EXP 92
16792: PUSH
16793: LD_VAR 0 1
16797: PPUSH
16798: CALL_OW 254
16802: ADD
16803: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16804: LD_VAR 0 1
16808: PPUSH
16809: CALL_OW 266
16813: PUSH
16814: LD_INT 3
16816: EQUAL
16817: IFFALSE 16896
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 2 ;
16819: LD_ADDR_EXP 92
16823: PUSH
16824: LD_EXP 92
16828: PUSH
16829: LD_INT 2
16831: ADD
16832: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16833: LD_ADDR_EXP 92
16837: PUSH
16838: LD_EXP 92
16842: PUSH
16843: LD_VAR 0 1
16847: PPUSH
16848: CALL_OW 250
16852: ADD
16853: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16854: LD_ADDR_EXP 92
16858: PUSH
16859: LD_EXP 92
16863: PUSH
16864: LD_VAR 0 1
16868: PPUSH
16869: CALL_OW 251
16873: ADD
16874: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16875: LD_ADDR_EXP 92
16879: PUSH
16880: LD_EXP 92
16884: PUSH
16885: LD_VAR 0 1
16889: PPUSH
16890: CALL_OW 254
16894: ADD
16895: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16896: LD_VAR 0 1
16900: PPUSH
16901: CALL_OW 266
16905: PUSH
16906: LD_INT 5
16908: EQUAL
16909: IFFALSE 16988
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 4 ;
16911: LD_ADDR_EXP 92
16915: PUSH
16916: LD_EXP 92
16920: PUSH
16921: LD_INT 4
16923: ADD
16924: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16925: LD_ADDR_EXP 92
16929: PUSH
16930: LD_EXP 92
16934: PUSH
16935: LD_VAR 0 1
16939: PPUSH
16940: CALL_OW 250
16944: ADD
16945: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16946: LD_ADDR_EXP 92
16950: PUSH
16951: LD_EXP 92
16955: PUSH
16956: LD_VAR 0 1
16960: PPUSH
16961: CALL_OW 251
16965: ADD
16966: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16967: LD_ADDR_EXP 92
16971: PUSH
16972: LD_EXP 92
16976: PUSH
16977: LD_VAR 0 1
16981: PPUSH
16982: CALL_OW 254
16986: ADD
16987: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_building then
16988: LD_VAR 0 1
16992: PPUSH
16993: CALL_OW 255
16997: PUSH
16998: LD_INT 7
17000: EQUAL
17001: PUSH
17002: LD_VAR 0 1
17006: PPUSH
17007: CALL_OW 247
17011: PUSH
17012: LD_INT 3
17014: EQUAL
17015: AND
17016: IFFALSE 17708
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17018: LD_VAR 0 1
17022: PPUSH
17023: CALL_OW 266
17027: PUSH
17028: LD_INT 31
17030: EQUAL
17031: PUSH
17032: LD_VAR 0 1
17036: PPUSH
17037: CALL_OW 266
17041: PUSH
17042: LD_INT 32
17044: EQUAL
17045: OR
17046: PUSH
17047: LD_VAR 0 1
17051: PPUSH
17052: CALL_OW 266
17056: PUSH
17057: LD_INT 36
17059: EQUAL
17060: OR
17061: PUSH
17062: LD_VAR 0 1
17066: PPUSH
17067: CALL_OW 266
17071: PUSH
17072: LD_INT 0
17074: EQUAL
17075: OR
17076: PUSH
17077: LD_VAR 0 1
17081: PPUSH
17082: CALL_OW 266
17086: PUSH
17087: LD_INT 24
17089: EQUAL
17090: OR
17091: PUSH
17092: LD_VAR 0 1
17096: PPUSH
17097: CALL_OW 266
17101: PUSH
17102: LD_INT 17
17104: EQUAL
17105: OR
17106: PUSH
17107: LD_VAR 0 1
17111: PPUSH
17112: CALL_OW 266
17116: PUSH
17117: LD_INT 25
17119: EQUAL
17120: OR
17121: PUSH
17122: LD_VAR 0 1
17126: PPUSH
17127: CALL_OW 266
17131: PUSH
17132: LD_INT 19
17134: EQUAL
17135: OR
17136: PUSH
17137: LD_VAR 0 1
17141: PPUSH
17142: CALL_OW 266
17146: PUSH
17147: LD_INT 20
17149: EQUAL
17150: OR
17151: PUSH
17152: LD_VAR 0 1
17156: PPUSH
17157: CALL_OW 266
17161: PUSH
17162: LD_INT 18
17164: EQUAL
17165: OR
17166: PUSH
17167: LD_VAR 0 1
17171: PPUSH
17172: CALL_OW 266
17176: PUSH
17177: LD_INT 21
17179: EQUAL
17180: OR
17181: PUSH
17182: LD_VAR 0 1
17186: PPUSH
17187: CALL_OW 266
17191: PUSH
17192: LD_INT 23
17194: EQUAL
17195: OR
17196: PUSH
17197: LD_VAR 0 1
17201: PPUSH
17202: CALL_OW 266
17206: PUSH
17207: LD_INT 16
17209: EQUAL
17210: OR
17211: PUSH
17212: LD_VAR 0 1
17216: PPUSH
17217: CALL_OW 266
17221: PUSH
17222: LD_INT 6
17224: EQUAL
17225: OR
17226: PUSH
17227: LD_VAR 0 1
17231: PPUSH
17232: CALL_OW 266
17236: PUSH
17237: LD_INT 29
17239: EQUAL
17240: OR
17241: PUSH
17242: LD_VAR 0 1
17246: PPUSH
17247: CALL_OW 266
17251: PUSH
17252: LD_INT 26
17254: EQUAL
17255: OR
17256: PUSH
17257: LD_VAR 0 1
17261: PPUSH
17262: CALL_OW 266
17266: PUSH
17267: LD_INT 30
17269: EQUAL
17270: OR
17271: PUSH
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 266
17281: PUSH
17282: LD_INT 28
17284: EQUAL
17285: OR
17286: PUSH
17287: LD_VAR 0 1
17291: PPUSH
17292: CALL_OW 266
17296: PUSH
17297: LD_INT 27
17299: EQUAL
17300: OR
17301: PUSH
17302: LD_VAR 0 1
17306: PPUSH
17307: CALL_OW 266
17311: PUSH
17312: LD_INT 33
17314: EQUAL
17315: OR
17316: PUSH
17317: LD_VAR 0 1
17321: PPUSH
17322: CALL_OW 266
17326: PUSH
17327: LD_INT 2
17329: EQUAL
17330: OR
17331: PUSH
17332: LD_VAR 0 1
17336: PPUSH
17337: CALL_OW 266
17341: PUSH
17342: LD_INT 4
17344: EQUAL
17345: OR
17346: IFFALSE 17432
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetBType ( unit ) ;
17348: LD_ADDR_EXP 94
17352: PUSH
17353: LD_EXP 94
17357: PUSH
17358: LD_VAR 0 1
17362: PPUSH
17363: CALL_OW 266
17367: ADD
17368: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17369: LD_ADDR_EXP 94
17373: PUSH
17374: LD_EXP 94
17378: PUSH
17379: LD_VAR 0 1
17383: PPUSH
17384: CALL_OW 250
17388: ADD
17389: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17390: LD_ADDR_EXP 94
17394: PUSH
17395: LD_EXP 94
17399: PUSH
17400: LD_VAR 0 1
17404: PPUSH
17405: CALL_OW 251
17409: ADD
17410: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17411: LD_ADDR_EXP 94
17415: PUSH
17416: LD_EXP 94
17420: PUSH
17421: LD_VAR 0 1
17425: PPUSH
17426: CALL_OW 254
17430: ADD
17431: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17432: LD_VAR 0 1
17436: PPUSH
17437: CALL_OW 266
17441: PUSH
17442: LD_INT 1
17444: EQUAL
17445: IFFALSE 17524
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 0 ;
17447: LD_ADDR_EXP 94
17451: PUSH
17452: LD_EXP 94
17456: PUSH
17457: LD_INT 0
17459: ADD
17460: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17461: LD_ADDR_EXP 94
17465: PUSH
17466: LD_EXP 94
17470: PUSH
17471: LD_VAR 0 1
17475: PPUSH
17476: CALL_OW 250
17480: ADD
17481: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17482: LD_ADDR_EXP 94
17486: PUSH
17487: LD_EXP 94
17491: PUSH
17492: LD_VAR 0 1
17496: PPUSH
17497: CALL_OW 251
17501: ADD
17502: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17503: LD_ADDR_EXP 94
17507: PUSH
17508: LD_EXP 94
17512: PUSH
17513: LD_VAR 0 1
17517: PPUSH
17518: CALL_OW 254
17522: ADD
17523: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17524: LD_VAR 0 1
17528: PPUSH
17529: CALL_OW 266
17533: PUSH
17534: LD_INT 3
17536: EQUAL
17537: IFFALSE 17616
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 2 ;
17539: LD_ADDR_EXP 94
17543: PUSH
17544: LD_EXP 94
17548: PUSH
17549: LD_INT 2
17551: ADD
17552: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17553: LD_ADDR_EXP 94
17557: PUSH
17558: LD_EXP 94
17562: PUSH
17563: LD_VAR 0 1
17567: PPUSH
17568: CALL_OW 250
17572: ADD
17573: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17574: LD_ADDR_EXP 94
17578: PUSH
17579: LD_EXP 94
17583: PUSH
17584: LD_VAR 0 1
17588: PPUSH
17589: CALL_OW 251
17593: ADD
17594: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17595: LD_ADDR_EXP 94
17599: PUSH
17600: LD_EXP 94
17604: PUSH
17605: LD_VAR 0 1
17609: PPUSH
17610: CALL_OW 254
17614: ADD
17615: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17616: LD_VAR 0 1
17620: PPUSH
17621: CALL_OW 266
17625: PUSH
17626: LD_INT 5
17628: EQUAL
17629: IFFALSE 17708
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 4 ;
17631: LD_ADDR_EXP 94
17635: PUSH
17636: LD_EXP 94
17640: PUSH
17641: LD_INT 4
17643: ADD
17644: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17645: LD_ADDR_EXP 94
17649: PUSH
17650: LD_EXP 94
17654: PUSH
17655: LD_VAR 0 1
17659: PPUSH
17660: CALL_OW 250
17664: ADD
17665: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17666: LD_ADDR_EXP 94
17670: PUSH
17671: LD_EXP 94
17675: PUSH
17676: LD_VAR 0 1
17680: PPUSH
17681: CALL_OW 251
17685: ADD
17686: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17687: LD_ADDR_EXP 94
17691: PUSH
17692: LD_EXP 94
17696: PUSH
17697: LD_VAR 0 1
17701: PPUSH
17702: CALL_OW 254
17706: ADD
17707: ST_TO_ADDR
// end ; end ; end ;
17708: PPOPN 2
17710: END
// on UnitKamikazed ( unit ) do var i ;
17711: LD_INT 0
17713: PPUSH
// begin if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
17714: LD_VAR 0 1
17718: PPUSH
17719: CALL_OW 255
17723: PUSH
17724: LD_INT 8
17726: EQUAL
17727: PUSH
17728: LD_VAR 0 1
17732: PPUSH
17733: CALL_OW 247
17737: PUSH
17738: LD_INT 2
17740: EQUAL
17741: AND
17742: PUSH
17743: LD_VAR 0 1
17747: PPUSH
17748: CALL_OW 248
17752: PUSH
17753: LD_INT 2
17755: EQUAL
17756: AND
17757: IFFALSE 17807
// begin for i in legionVehicles do
17759: LD_ADDR_VAR 0 2
17763: PUSH
17764: LD_EXP 54
17768: PUSH
17769: FOR_IN
17770: IFFALSE 17805
// if i = unit then
17772: LD_VAR 0 2
17776: PUSH
17777: LD_VAR 0 1
17781: EQUAL
17782: IFFALSE 17803
// legionVehicles = legionVehicles diff [ unit ] ;
17784: LD_ADDR_EXP 54
17788: PUSH
17789: LD_EXP 54
17793: PUSH
17794: LD_VAR 0 1
17798: PUSH
17799: EMPTY
17800: LIST
17801: DIFF
17802: ST_TO_ADDR
17803: GO 17769
17805: POP
17806: POP
// end ; end ;
17807: PPOPN 2
17809: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , SiberiteMainDeposit ) then
17810: LD_VAR 0 2
17814: PPUSH
17815: LD_VAR 0 3
17819: PPUSH
17820: LD_INT 29
17822: PPUSH
17823: CALL_OW 309
17827: IFFALSE 17887
// begin if GetSide ( unit ) = 1 then
17829: LD_VAR 0 1
17833: PPUSH
17834: CALL_OW 255
17838: PUSH
17839: LD_INT 1
17841: EQUAL
17842: IFFALSE 17858
// begin wait ( 0 0$6 ) ;
17844: LD_INT 210
17846: PPUSH
17847: CALL_OW 67
// YouLost ( Motherlode2 ) ;
17851: LD_STRING Motherlode2
17853: PPUSH
17854: CALL_OW 104
// end ; if GetSide ( unit ) = 8 then
17858: LD_VAR 0 1
17862: PPUSH
17863: CALL_OW 255
17867: PUSH
17868: LD_INT 8
17870: EQUAL
17871: IFFALSE 17887
// begin wait ( 0 0$6 ) ;
17873: LD_INT 210
17875: PPUSH
17876: CALL_OW 67
// YouLost ( Motherlode1 ) ;
17880: LD_STRING Motherlode1
17882: PPUSH
17883: CALL_OW 104
// end ; end ; end ;
17887: PPOPN 3
17889: END
// on SibDepositContaminated ( unit , x , y ) do begin if GetSide ( unit ) = 2 then
17890: LD_VAR 0 1
17894: PPUSH
17895: CALL_OW 255
17899: PUSH
17900: LD_INT 2
17902: EQUAL
17903: IFFALSE 17912
// YouLost ( Motherlode3 ) ;
17905: LD_STRING Motherlode3
17907: PPUSH
17908: CALL_OW 104
// end ; end_of_file
17912: PPOPN 3
17914: END
// every 3 3$0 do
17915: GO 17917
17917: DISABLE
// begin enable ;
17918: ENABLE
// LegionTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17919: LD_ADDR_EXP 86
17923: PUSH
17924: LD_INT 1
17926: PUSH
17927: LD_INT 3
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 1
17936: PPUSH
17937: LD_INT 2
17939: PPUSH
17940: CALL_OW 12
17944: ARRAY
17945: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
17946: LD_INT 22
17948: PUSH
17949: LD_INT 8
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 21
17958: PUSH
17959: LD_INT 1
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PPUSH
17970: CALL_OW 69
17974: PUSH
17975: LD_INT 1
17977: GREATER
17978: IFFALSE 18009
// RussianTarget = [ 1 , 8 ] [ Rand ( 1 , 2 ) ] else
17980: LD_ADDR_EXP 88
17984: PUSH
17985: LD_INT 1
17987: PUSH
17988: LD_INT 8
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 1
17997: PPUSH
17998: LD_INT 2
18000: PPUSH
18001: CALL_OW 12
18005: ARRAY
18006: ST_TO_ADDR
18007: GO 18017
// RussianTarget = 1 ;
18009: LD_ADDR_EXP 88
18013: PUSH
18014: LD_INT 1
18016: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
18017: LD_INT 22
18019: PUSH
18020: LD_INT 8
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 21
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PPUSH
18041: CALL_OW 69
18045: PUSH
18046: LD_INT 1
18048: GREATER
18049: IFFALSE 18084
// AllianceTarget = [ 1 , 3 , 8 ] [ Rand ( 1 , 3 ) ] else
18051: LD_ADDR_EXP 87
18055: PUSH
18056: LD_INT 1
18058: PUSH
18059: LD_INT 3
18061: PUSH
18062: LD_INT 8
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 1
18072: PPUSH
18073: LD_INT 3
18075: PPUSH
18076: CALL_OW 12
18080: ARRAY
18081: ST_TO_ADDR
18082: GO 18111
// AllianceTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
18084: LD_ADDR_EXP 87
18088: PUSH
18089: LD_INT 1
18091: PUSH
18092: LD_INT 3
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 1
18101: PPUSH
18102: LD_INT 2
18104: PPUSH
18105: CALL_OW 12
18109: ARRAY
18110: ST_TO_ADDR
// end ;
18111: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople ;
18112: LD_EXP 67
18116: PUSH
18117: LD_INT 1
18119: EQUAL
18120: IFFALSE 18697
18122: GO 18124
18124: DISABLE
18125: LD_INT 0
18127: PPUSH
18128: PPUSH
// begin for i = 1 to 4 do
18129: LD_ADDR_VAR 0 1
18133: PUSH
18134: DOUBLE
18135: LD_INT 1
18137: DEC
18138: ST_TO_ADDR
18139: LD_INT 4
18141: PUSH
18142: FOR_TO
18143: IFFALSE 18183
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
18145: LD_EXP 65
18149: PUSH
18150: LD_VAR 0 1
18154: ARRAY
18155: PPUSH
18156: LD_INT 85
18158: PPUSH
18159: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
18163: LD_EXP 65
18167: PUSH
18168: LD_VAR 0 1
18172: ARRAY
18173: PPUSH
18174: LD_INT 3
18176: PPUSH
18177: CALL_OW 183
// end ;
18181: GO 18142
18183: POP
18184: POP
// wait ( 0 0$1 ) ;
18185: LD_INT 35
18187: PPUSH
18188: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
18192: LD_ADDR_VAR 0 2
18196: PUSH
18197: LD_INT 22
18199: PUSH
18200: LD_INT 4
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 21
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 56
18219: PUSH
18220: EMPTY
18221: LIST
18222: PUSH
18223: LD_INT 3
18225: PUSH
18226: LD_INT 60
18228: PUSH
18229: EMPTY
18230: LIST
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: PPUSH
18242: CALL_OW 69
18246: PUSH
18247: LD_EXP 17
18251: PUSH
18252: EMPTY
18253: LIST
18254: DIFF
18255: ST_TO_ADDR
// ComEnterUnit ( powellPeople [ 1 ] , PowellCargo ) ;
18256: LD_VAR 0 2
18260: PUSH
18261: LD_INT 1
18263: ARRAY
18264: PPUSH
18265: LD_INT 235
18267: PPUSH
18268: CALL_OW 120
// SetClass ( powellPeople [ 2 ] , 2 ) ;
18272: LD_VAR 0 2
18276: PUSH
18277: LD_INT 2
18279: ARRAY
18280: PPUSH
18281: LD_INT 2
18283: PPUSH
18284: CALL_OW 336
// SetClass ( powellPeople [ 3 ] , 2 ) ;
18288: LD_VAR 0 2
18292: PUSH
18293: LD_INT 3
18295: ARRAY
18296: PPUSH
18297: LD_INT 2
18299: PPUSH
18300: CALL_OW 336
// SetResourceVisibility ( 30 , 49 , 4 ) ;
18304: LD_INT 30
18306: PPUSH
18307: LD_INT 49
18309: PPUSH
18310: LD_INT 4
18312: PPUSH
18313: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
18317: LD_INT 91
18319: PPUSH
18320: LD_INT 10
18322: PPUSH
18323: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
18327: LD_INT 91
18329: PPUSH
18330: LD_INT 11
18332: PPUSH
18333: CALL_OW 207
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_mine , 30 , 49 , 1 ) ;
18337: LD_INT 22
18339: PUSH
18340: LD_INT 4
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 25
18349: PUSH
18350: LD_INT 2
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PPUSH
18361: CALL_OW 69
18365: PPUSH
18366: LD_INT 30
18368: PPUSH
18369: LD_INT 30
18371: PPUSH
18372: LD_INT 49
18374: PPUSH
18375: LD_INT 1
18377: PPUSH
18378: CALL_OW 145
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 55 , 56 , 4 ) ;
18382: LD_INT 22
18384: PUSH
18385: LD_INT 4
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 25
18394: PUSH
18395: LD_INT 2
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PPUSH
18406: CALL_OW 69
18410: PPUSH
18411: LD_INT 32
18413: PPUSH
18414: LD_INT 55
18416: PPUSH
18417: LD_INT 56
18419: PPUSH
18420: LD_INT 4
18422: PPUSH
18423: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 63 , 71 , 4 ) ;
18427: LD_INT 22
18429: PUSH
18430: LD_INT 4
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 25
18439: PUSH
18440: LD_INT 2
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PPUSH
18451: CALL_OW 69
18455: PPUSH
18456: LD_INT 32
18458: PPUSH
18459: LD_INT 63
18461: PPUSH
18462: LD_INT 71
18464: PPUSH
18465: LD_INT 4
18467: PPUSH
18468: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_power , 40 , 72 , 4 ) ;
18472: LD_INT 22
18474: PUSH
18475: LD_INT 4
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 25
18484: PUSH
18485: LD_INT 2
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PPUSH
18496: CALL_OW 69
18500: PPUSH
18501: LD_INT 28
18503: PPUSH
18504: LD_INT 40
18506: PPUSH
18507: LD_INT 72
18509: PPUSH
18510: LD_INT 4
18512: PPUSH
18513: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_solar_power , 45 , 73 , 4 ) ;
18517: LD_INT 22
18519: PUSH
18520: LD_INT 4
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 25
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PPUSH
18541: CALL_OW 69
18545: PPUSH
18546: LD_INT 27
18548: PPUSH
18549: LD_INT 45
18551: PPUSH
18552: LD_INT 73
18554: PPUSH
18555: LD_INT 4
18557: PPUSH
18558: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_rocket , 37 , 50 , 2 ) ;
18562: LD_INT 22
18564: PUSH
18565: LD_INT 4
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 25
18574: PUSH
18575: LD_INT 2
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PPUSH
18586: CALL_OW 69
18590: PPUSH
18591: LD_INT 18
18593: PPUSH
18594: LD_INT 37
18596: PPUSH
18597: LD_INT 50
18599: PPUSH
18600: LD_INT 2
18602: PPUSH
18603: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_gun , 41 , 51 , 3 ) ;
18607: LD_INT 22
18609: PUSH
18610: LD_INT 4
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 25
18619: PUSH
18620: LD_INT 2
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PPUSH
18631: CALL_OW 69
18635: PPUSH
18636: LD_INT 17
18638: PPUSH
18639: LD_INT 41
18641: PPUSH
18642: LD_INT 51
18644: PPUSH
18645: LD_INT 3
18647: PPUSH
18648: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_siberium , 38 , 54 , 1 ) ;
18652: LD_INT 22
18654: PUSH
18655: LD_INT 4
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 25
18664: PUSH
18665: LD_INT 2
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PPUSH
18676: CALL_OW 69
18680: PPUSH
18681: LD_INT 21
18683: PPUSH
18684: LD_INT 38
18686: PPUSH
18687: LD_INT 54
18689: PPUSH
18690: LD_INT 1
18692: PPUSH
18693: CALL_OW 205
// end ;
18697: PPOPN 2
18699: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 do
18700: LD_INT 22
18702: PUSH
18703: LD_INT 4
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 30
18712: PUSH
18713: LD_INT 8
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PPUSH
18724: CALL_OW 69
18728: PUSH
18729: LD_INT 1
18731: EQUAL
18732: IFFALSE 18882
18734: GO 18736
18736: DISABLE
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
18737: LD_INT 85
18739: PPUSH
18740: LD_INT 3
18742: PPUSH
18743: LD_INT 3
18745: PPUSH
18746: LD_INT 1
18748: PPUSH
18749: LD_INT 3
18751: PUSH
18752: LD_INT 5
18754: PUSH
18755: LD_INT 7
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 1
18765: PPUSH
18766: LD_INT 3
18768: PPUSH
18769: CALL_OW 12
18773: ARRAY
18774: PPUSH
18775: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
18779: LD_INT 85
18781: PPUSH
18782: LD_INT 3
18784: PPUSH
18785: LD_INT 3
18787: PPUSH
18788: LD_INT 1
18790: PPUSH
18791: LD_INT 3
18793: PUSH
18794: LD_INT 5
18796: PUSH
18797: LD_INT 7
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 1
18807: PPUSH
18808: LD_INT 3
18810: PPUSH
18811: CALL_OW 12
18815: ARRAY
18816: PPUSH
18817: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
18821: LD_INT 85
18823: PPUSH
18824: LD_INT 3
18826: PPUSH
18827: LD_INT 3
18829: PPUSH
18830: LD_INT 1
18832: PPUSH
18833: LD_INT 3
18835: PUSH
18836: LD_INT 5
18838: PUSH
18839: LD_INT 7
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 1
18849: PPUSH
18850: LD_INT 3
18852: PPUSH
18853: CALL_OW 12
18857: ARRAY
18858: PPUSH
18859: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
18863: LD_INT 85
18865: PPUSH
18866: LD_INT 5
18868: PPUSH
18869: LD_INT 3
18871: PPUSH
18872: LD_INT 1
18874: PPUSH
18875: LD_INT 6
18877: PPUSH
18878: CALL_OW 185
// end ;
18882: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) and powellUnloadCargo = 1 do
18883: LD_INT 235
18885: PPUSH
18886: LD_INT 10
18888: PPUSH
18889: CALL_OW 308
18893: PUSH
18894: LD_EXP 69
18898: PUSH
18899: LD_INT 1
18901: EQUAL
18902: AND
18903: IFFALSE 18927
18905: GO 18907
18907: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
18908: LD_INT 235
18910: PPUSH
18911: CALL_OW 313
18915: PPUSH
18916: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
18920: LD_INT 84
18922: PPUSH
18923: CALL_OW 146
// end ;
18927: END
// every 0 0$1 trigger legionAI = 1 do
18928: LD_EXP 83
18932: PUSH
18933: LD_INT 1
18935: EQUAL
18936: IFFALSE 18999
18938: GO 18940
18940: DISABLE
// begin enable ;
18941: ENABLE
// RepairAndRebuildBase ( 8 , ArDep2 , LegionBaseArea , legionDestroyedBuilds ) ;
18942: LD_INT 8
18944: PPUSH
18945: LD_INT 99
18947: PPUSH
18948: LD_INT 11
18950: PPUSH
18951: LD_EXP 92
18955: PPUSH
18956: CALL 9632 0 4
// HealUnitInBase ( 8 , LegionHealArea , LegionBaseArea , [ ArLab1 ] ) ;
18960: LD_INT 8
18962: PPUSH
18963: LD_INT 20
18965: PPUSH
18966: LD_INT 11
18968: PPUSH
18969: LD_INT 252
18971: PUSH
18972: EMPTY
18973: LIST
18974: PPUSH
18975: CALL 10041 0 4
// AttackNearBuildings ( 8 , 1 ) ;
18979: LD_INT 8
18981: PPUSH
18982: LD_INT 1
18984: PPUSH
18985: CALL 11375 0 2
// EnterBunkerOrBarrack ( 8 , LegionBaseArea ) ;
18989: LD_INT 8
18991: PPUSH
18992: LD_INT 11
18994: PPUSH
18995: CALL 10947 0 2
// end ;
18999: END
// every 3 3$0 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ ] and IsOk ( ArFact ) and GetSide ( ArFact ) = 8 do
19000: LD_EXP 83
19004: PUSH
19005: LD_INT 1
19007: EQUAL
19008: PUSH
19009: LD_EXP 100
19013: PUSH
19014: LD_INT 1
19016: GREATEREQUAL
19017: AND
19018: PUSH
19019: LD_EXP 54
19023: PUSH
19024: EMPTY
19025: EQUAL
19026: AND
19027: PUSH
19028: LD_INT 117
19030: PPUSH
19031: CALL_OW 302
19035: AND
19036: PUSH
19037: LD_INT 117
19039: PPUSH
19040: CALL_OW 255
19044: PUSH
19045: LD_INT 8
19047: EQUAL
19048: AND
19049: IFFALSE 19112
19051: GO 19053
19053: DISABLE
// begin enable ;
19054: ENABLE
// BuildingVehicle ( 8 , ArFact , [ 5 , 6 , 7 ] [ Difficulty ] , [ 27 , 28 , 25 , 29 ] , 3 , 2 , 14 ) ;
19055: LD_INT 8
19057: PPUSH
19058: LD_INT 117
19060: PPUSH
19061: LD_INT 5
19063: PUSH
19064: LD_INT 6
19066: PUSH
19067: LD_INT 7
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: LIST
19074: PUSH
19075: LD_OWVAR 67
19079: ARRAY
19080: PPUSH
19081: LD_INT 27
19083: PUSH
19084: LD_INT 28
19086: PUSH
19087: LD_INT 25
19089: PUSH
19090: LD_INT 29
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: PPUSH
19099: LD_INT 3
19101: PPUSH
19102: LD_INT 2
19104: PPUSH
19105: LD_INT 14
19107: PPUSH
19108: CALL 11605 0 7
// end ;
19112: END
// every 0 0$1 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ 5 , 6 , 7 ] [ Difficulty ] do
19113: LD_EXP 83
19117: PUSH
19118: LD_INT 1
19120: EQUAL
19121: PUSH
19122: LD_EXP 100
19126: PUSH
19127: LD_INT 1
19129: GREATEREQUAL
19130: AND
19131: PUSH
19132: LD_EXP 54
19136: PUSH
19137: LD_INT 5
19139: PUSH
19140: LD_INT 6
19142: PUSH
19143: LD_INT 7
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: LIST
19150: PUSH
19151: LD_OWVAR 67
19155: ARRAY
19156: EQUAL
19157: AND
19158: IFFALSE 19176
19160: GO 19162
19162: DISABLE
// begin enable ;
19163: ENABLE
// AttackVehicles ( LegionTarget , 1 ) ;
19164: LD_EXP 86
19168: PPUSH
19169: LD_INT 1
19171: PPUSH
19172: CALL 11679 0 2
// end ;
19176: END
// every 0 0$1 do
19177: GO 19179
19179: DISABLE
// begin enable ;
19180: ENABLE
// TimeLapsersAI ( 6 , 1 ) ;
19181: LD_INT 6
19183: PPUSH
19184: LD_INT 1
19186: PPUSH
19187: CALL 12611 0 2
// end ;
19191: END
// every 0 0$1 trigger RussianAI = 1 do
19192: LD_EXP 85
19196: PUSH
19197: LD_INT 1
19199: EQUAL
19200: IFFALSE 19289
19202: GO 19204
19204: DISABLE
// begin enable ;
19205: ENABLE
// RepairAndRebuildBase ( 3 , RuDep1 , RussianBaseArea , russianDestroyedBuilds ) ;
19206: LD_INT 3
19208: PPUSH
19209: LD_INT 26
19211: PPUSH
19212: LD_INT 21
19214: PPUSH
19215: LD_EXP 93
19219: PPUSH
19220: CALL 9632 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBaseArea , [ RusLab1 , RusLab2 ] ) ;
19224: LD_INT 3
19226: PPUSH
19227: LD_INT 22
19229: PPUSH
19230: LD_INT 21
19232: PPUSH
19233: LD_INT 2
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PPUSH
19243: CALL 10041 0 4
// AttackNearBuildings ( 3 , 1 ) ;
19247: LD_INT 3
19249: PPUSH
19250: LD_INT 1
19252: PPUSH
19253: CALL 11375 0 2
// TimeLapsersAI ( 3 , RussianTarget ) ;
19257: LD_INT 3
19259: PPUSH
19260: LD_EXP 88
19264: PPUSH
19265: CALL 12611 0 2
// EnterBunkerOrBarrack ( 3 , RussianBaseArea ) ;
19269: LD_INT 3
19271: PPUSH
19272: LD_INT 21
19274: PPUSH
19275: CALL 10947 0 2
// CraneRepairBuild ( 3 , RussianBaseArea ) ;
19279: LD_INT 3
19281: PPUSH
19282: LD_INT 21
19284: PPUSH
19285: CALL 10767 0 2
// end ;
19289: END
// every 3 3$0 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ ] and IsOk ( RusFact2 ) and GetSide ( RusFact2 ) = 3 and IsOk ( RusFact1 ) and GetSide ( RusFact1 ) = 3 do
19290: LD_EXP 85
19294: PUSH
19295: LD_INT 1
19297: EQUAL
19298: PUSH
19299: LD_EXP 100
19303: PUSH
19304: LD_INT 3
19306: GREATEREQUAL
19307: AND
19308: PUSH
19309: LD_EXP 60
19313: PUSH
19314: EMPTY
19315: EQUAL
19316: AND
19317: PUSH
19318: LD_INT 10
19320: PPUSH
19321: CALL_OW 302
19325: AND
19326: PUSH
19327: LD_INT 10
19329: PPUSH
19330: CALL_OW 255
19334: PUSH
19335: LD_INT 3
19337: EQUAL
19338: AND
19339: PUSH
19340: LD_INT 4
19342: PPUSH
19343: CALL_OW 302
19347: AND
19348: PUSH
19349: LD_INT 4
19351: PPUSH
19352: CALL_OW 255
19356: PUSH
19357: LD_INT 3
19359: EQUAL
19360: AND
19361: IFFALSE 19481
19363: GO 19365
19365: DISABLE
// begin enable ;
19366: ENABLE
// BuildingVehicle ( 3 , RusFact1 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19367: LD_INT 3
19369: PPUSH
19370: LD_INT 4
19372: PPUSH
19373: LD_INT 4
19375: PUSH
19376: LD_INT 5
19378: PUSH
19379: LD_INT 6
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: LIST
19386: PUSH
19387: LD_OWVAR 67
19391: ARRAY
19392: PPUSH
19393: LD_INT 45
19395: PUSH
19396: LD_INT 46
19398: PUSH
19399: LD_INT 47
19401: PUSH
19402: LD_INT 49
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: PPUSH
19411: LD_INT 3
19413: PPUSH
19414: LD_INT 3
19416: PPUSH
19417: LD_INT 24
19419: PPUSH
19420: CALL 11605 0 7
// BuildingVehicle ( 3 , RusFact2 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19424: LD_INT 3
19426: PPUSH
19427: LD_INT 10
19429: PPUSH
19430: LD_INT 4
19432: PUSH
19433: LD_INT 5
19435: PUSH
19436: LD_INT 6
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: PUSH
19444: LD_OWVAR 67
19448: ARRAY
19449: PPUSH
19450: LD_INT 45
19452: PUSH
19453: LD_INT 46
19455: PUSH
19456: LD_INT 47
19458: PUSH
19459: LD_INT 49
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: PPUSH
19468: LD_INT 3
19470: PPUSH
19471: LD_INT 3
19473: PPUSH
19474: LD_INT 24
19476: PPUSH
19477: CALL 11605 0 7
// end ;
19481: END
// every 0 0$1 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ 8 , 10 , 12 ] [ Difficulty ] do
19482: LD_EXP 85
19486: PUSH
19487: LD_INT 1
19489: EQUAL
19490: PUSH
19491: LD_EXP 100
19495: PUSH
19496: LD_INT 3
19498: GREATEREQUAL
19499: AND
19500: PUSH
19501: LD_EXP 60
19505: PUSH
19506: LD_INT 8
19508: PUSH
19509: LD_INT 10
19511: PUSH
19512: LD_INT 12
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: PUSH
19520: LD_OWVAR 67
19524: ARRAY
19525: EQUAL
19526: AND
19527: IFFALSE 19639
19529: GO 19531
19531: DISABLE
// begin enable ;
19532: ENABLE
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 48 ] ] , [ f_not , [ f_hastask ] ] ] ) , [ rutp1 , rutp2 ] [ Rand ( 1 , 2 ) ] ) ;
19533: LD_INT 22
19535: PUSH
19536: LD_INT 3
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 21
19545: PUSH
19546: LD_INT 2
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 3
19555: PUSH
19556: LD_INT 34
19558: PUSH
19559: LD_INT 48
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 3
19572: PUSH
19573: LD_INT 60
19575: PUSH
19576: EMPTY
19577: LIST
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: PPUSH
19589: CALL_OW 69
19593: PPUSH
19594: LD_INT 24
19596: PUSH
19597: LD_INT 25
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 1
19606: PPUSH
19607: LD_INT 2
19609: PPUSH
19610: CALL_OW 12
19614: ARRAY
19615: PPUSH
19616: CALL_OW 120
// wait ( 0 0$20 ) ;
19620: LD_INT 700
19622: PPUSH
19623: CALL_OW 67
// AttackVehicles ( RussianTarget , 2 ) ;
19627: LD_EXP 88
19631: PPUSH
19632: LD_INT 2
19634: PPUSH
19635: CALL 11679 0 2
// end ;
19639: END
// every 0 0$1 trigger AllianceAI = 1 do
19640: LD_EXP 84
19644: PUSH
19645: LD_INT 1
19647: EQUAL
19648: IFFALSE 19731
19650: GO 19652
19652: DISABLE
// begin enable ;
19653: ENABLE
// RepairAndRebuildBase ( 7 , AllDep , AllianceBaseArea , allianceDestroyedBuilds ) ;
19654: LD_INT 7
19656: PPUSH
19657: LD_INT 45
19659: PPUSH
19660: LD_INT 23
19662: PPUSH
19663: LD_EXP 94
19667: PPUSH
19668: CALL 9632 0 4
// HealUnitInBase ( 7 , AllianceHealArea , AllianceBaseArea , [ AllLabA , AllLabR1 , AllLabR2 ] ) ;
19672: LD_INT 7
19674: PPUSH
19675: LD_INT 24
19677: PPUSH
19678: LD_INT 23
19680: PPUSH
19681: LD_INT 46
19683: PUSH
19684: LD_INT 39
19686: PUSH
19687: LD_INT 133
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: LIST
19694: PPUSH
19695: CALL 10041 0 4
// AttackNearBuildings ( 7 , 1 ) ;
19699: LD_INT 7
19701: PPUSH
19702: LD_INT 1
19704: PPUSH
19705: CALL 11375 0 2
// TimeLapsersAI ( 7 , AllianceTarget ) ;
19709: LD_INT 7
19711: PPUSH
19712: LD_EXP 87
19716: PPUSH
19717: CALL 12611 0 2
// EnterBunkerOrBarrack ( 7 , AllianceBaseArea ) ;
19721: LD_INT 7
19723: PPUSH
19724: LD_INT 23
19726: PPUSH
19727: CALL 10947 0 2
// end ;
19731: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ ] and IsOk ( Allfab1 ) and GetSide ( Allfab1 ) = 7 and IsOk ( Allfab2 ) and GetSide ( Allfab2 ) = 7 do
19732: LD_EXP 84
19736: PUSH
19737: LD_INT 1
19739: EQUAL
19740: PUSH
19741: LD_EXP 100
19745: PUSH
19746: LD_INT 4
19748: GREATEREQUAL
19749: AND
19750: PUSH
19751: LD_EXP 61
19755: PUSH
19756: EMPTY
19757: EQUAL
19758: AND
19759: PUSH
19760: LD_INT 156
19762: PPUSH
19763: CALL_OW 302
19767: AND
19768: PUSH
19769: LD_INT 156
19771: PPUSH
19772: CALL_OW 255
19776: PUSH
19777: LD_INT 7
19779: EQUAL
19780: AND
19781: PUSH
19782: LD_INT 162
19784: PPUSH
19785: CALL_OW 302
19789: AND
19790: PUSH
19791: LD_INT 162
19793: PPUSH
19794: CALL_OW 255
19798: PUSH
19799: LD_INT 7
19801: EQUAL
19802: AND
19803: IFFALSE 19919
19805: GO 19807
19807: DISABLE
// begin enable ;
19808: ENABLE
// BuildingVehicle ( 3 , Allfab1 , [ 3 , 3 , 4 ] [ Difficulty ] , [ 9 , 10 , 7 ] , 3 , 2 , 5 ) ;
19809: LD_INT 3
19811: PPUSH
19812: LD_INT 156
19814: PPUSH
19815: LD_INT 3
19817: PUSH
19818: LD_INT 3
19820: PUSH
19821: LD_INT 4
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: PUSH
19829: LD_OWVAR 67
19833: ARRAY
19834: PPUSH
19835: LD_INT 9
19837: PUSH
19838: LD_INT 10
19840: PUSH
19841: LD_INT 7
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: LIST
19848: PPUSH
19849: LD_INT 3
19851: PPUSH
19852: LD_INT 2
19854: PPUSH
19855: LD_INT 5
19857: PPUSH
19858: CALL 11605 0 7
// BuildingVehicle ( 3 , Allfab2 , [ 2 , 2 , 3 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19862: LD_INT 3
19864: PPUSH
19865: LD_INT 162
19867: PPUSH
19868: LD_INT 2
19870: PUSH
19871: LD_INT 2
19873: PUSH
19874: LD_INT 3
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: LIST
19881: PUSH
19882: LD_OWVAR 67
19886: ARRAY
19887: PPUSH
19888: LD_INT 45
19890: PUSH
19891: LD_INT 46
19893: PUSH
19894: LD_INT 47
19896: PUSH
19897: LD_INT 49
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: PPUSH
19906: LD_INT 3
19908: PPUSH
19909: LD_INT 3
19911: PPUSH
19912: LD_INT 24
19914: PPUSH
19915: CALL 11605 0 7
// end ;
19919: END
// every 0 0$1 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ 5 , 5 , 7 ] [ Difficulty ] do var i ;
19920: LD_EXP 84
19924: PUSH
19925: LD_INT 1
19927: EQUAL
19928: PUSH
19929: LD_EXP 100
19933: PUSH
19934: LD_INT 4
19936: GREATEREQUAL
19937: AND
19938: PUSH
19939: LD_EXP 61
19943: PUSH
19944: LD_INT 5
19946: PUSH
19947: LD_INT 5
19949: PUSH
19950: LD_INT 7
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: LIST
19957: PUSH
19958: LD_OWVAR 67
19962: ARRAY
19963: EQUAL
19964: AND
19965: IFFALSE 20024
19967: GO 19969
19969: DISABLE
19970: LD_INT 0
19972: PPUSH
// begin for i in AllianceVehicles do
19973: LD_ADDR_VAR 0 1
19977: PUSH
19978: LD_EXP 61
19982: PUSH
19983: FOR_IN
19984: IFFALSE 20009
// TeleportUnit ( i , 117 , 112 , 10 , true ) ;
19986: LD_VAR 0 1
19990: PPUSH
19991: LD_INT 117
19993: PPUSH
19994: LD_INT 112
19996: PPUSH
19997: LD_INT 10
19999: PPUSH
20000: LD_INT 1
20002: PPUSH
20003: CALL_OW 483
20007: GO 19983
20009: POP
20010: POP
// AttackVehicles ( AllianceTarget , 3 ) ;
20011: LD_EXP 87
20015: PPUSH
20016: LD_INT 3
20018: PPUSH
20019: CALL 11679 0 2
// enable ;
20023: ENABLE
// end ;
20024: PPOPN 1
20026: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 do var tmp ;
20027: LD_EXP 84
20031: PUSH
20032: LD_INT 1
20034: EQUAL
20035: PUSH
20036: LD_EXP 100
20040: PUSH
20041: LD_INT 4
20043: GREATEREQUAL
20044: AND
20045: IFFALSE 20226
20047: GO 20049
20049: DISABLE
20050: LD_INT 0
20052: PPUSH
// begin enable ;
20053: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_btype , 21 ] ] ] ) ;
20054: LD_ADDR_VAR 0 1
20058: PUSH
20059: LD_INT 22
20061: PUSH
20062: LD_INT 1
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 21
20071: PUSH
20072: LD_INT 3
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 2
20081: PUSH
20082: LD_INT 30
20084: PUSH
20085: LD_INT 30
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 30
20094: PUSH
20095: LD_INT 28
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 30
20104: PUSH
20105: LD_INT 21
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: LIST
20122: PPUSH
20123: CALL_OW 69
20127: ST_TO_ADDR
// tmp = tmp ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] ] ) ;
20128: LD_ADDR_VAR 0 1
20132: PUSH
20133: LD_VAR 0 1
20137: PUSH
20138: LD_INT 22
20140: PUSH
20141: LD_INT 1
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 21
20150: PUSH
20151: LD_INT 2
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 32
20160: PUSH
20161: LD_INT 3
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: LIST
20172: PPUSH
20173: CALL_OW 69
20177: ADD
20178: ST_TO_ADDR
// if tmp = [ ] then
20179: LD_VAR 0 1
20183: PUSH
20184: EMPTY
20185: EQUAL
20186: IFFALSE 20190
// exit ;
20188: GO 20226
// if tmp > 0 then
20190: LD_VAR 0 1
20194: PUSH
20195: LD_INT 0
20197: GREATER
20198: IFFALSE 20226
// SetLives ( tmp [ Rand ( 1 , tmp ) ] , 0 ) ;
20200: LD_VAR 0 1
20204: PUSH
20205: LD_INT 1
20207: PPUSH
20208: LD_VAR 0 1
20212: PPUSH
20213: CALL_OW 12
20217: ARRAY
20218: PPUSH
20219: LD_INT 0
20221: PPUSH
20222: CALL_OW 234
// end ;
20226: PPOPN 1
20228: END
// every 0 0$1 trigger LegionAI = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
20229: LD_EXP 83
20233: PUSH
20234: LD_INT 1
20236: EQUAL
20237: PUSH
20238: LD_INT 22
20240: PUSH
20241: LD_INT 8
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 21
20250: PUSH
20251: LD_INT 2
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 3
20260: PUSH
20261: LD_INT 61
20263: PUSH
20264: EMPTY
20265: LIST
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: LIST
20275: PPUSH
20276: CALL_OW 69
20280: PUSH
20281: LD_INT 0
20283: GREATER
20284: AND
20285: IFFALSE 20367
20287: GO 20289
20289: DISABLE
20290: LD_INT 0
20292: PPUSH
// begin enable ;
20293: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
20294: LD_ADDR_VAR 0 1
20298: PUSH
20299: LD_INT 22
20301: PUSH
20302: LD_INT 8
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 21
20311: PUSH
20312: LD_INT 2
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 3
20321: PUSH
20322: LD_INT 61
20324: PUSH
20325: EMPTY
20326: LIST
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: LIST
20336: PPUSH
20337: CALL_OW 69
20341: PUSH
20342: FOR_IN
20343: IFFALSE 20365
// ComLinkTo ( i , arControler [ 1 ] ) ;
20345: LD_VAR 0 1
20349: PPUSH
20350: LD_EXP 55
20354: PUSH
20355: LD_INT 1
20357: ARRAY
20358: PPUSH
20359: CALL_OW 135
20363: GO 20342
20365: POP
20366: POP
// end ;
20367: PPOPN 1
20369: END
// every 0 0$1 trigger AllianceAI = 1 and FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
20370: LD_EXP 84
20374: PUSH
20375: LD_INT 1
20377: EQUAL
20378: PUSH
20379: LD_INT 22
20381: PUSH
20382: LD_INT 7
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 21
20391: PUSH
20392: LD_INT 2
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 3
20401: PUSH
20402: LD_INT 61
20404: PUSH
20405: EMPTY
20406: LIST
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: LIST
20416: PPUSH
20417: CALL_OW 69
20421: PUSH
20422: LD_INT 0
20424: GREATER
20425: AND
20426: IFFALSE 20516
20428: GO 20430
20430: DISABLE
20431: LD_INT 0
20433: PPUSH
// begin enable ;
20434: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
20435: LD_ADDR_VAR 0 1
20439: PUSH
20440: LD_INT 22
20442: PUSH
20443: LD_INT 7
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 21
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 3
20462: PUSH
20463: LD_INT 61
20465: PUSH
20466: EMPTY
20467: LIST
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: LIST
20477: PPUSH
20478: CALL_OW 69
20482: PUSH
20483: FOR_IN
20484: IFFALSE 20514
// ComLinkTo ( i , allianceControler [ rand ( 1 , 3 ) ] ) ;
20486: LD_VAR 0 1
20490: PPUSH
20491: LD_EXP 62
20495: PUSH
20496: LD_INT 1
20498: PPUSH
20499: LD_INT 3
20501: PPUSH
20502: CALL_OW 12
20506: ARRAY
20507: PPUSH
20508: CALL_OW 135
20512: GO 20483
20514: POP
20515: POP
// end ; end_of_file
20516: PPOPN 1
20518: END
// every 0 0$1 trigger timerStatus = 1 do
20519: LD_EXP 95
20523: PUSH
20524: LD_INT 1
20526: EQUAL
20527: IFFALSE 20564
20529: GO 20531
20531: DISABLE
// begin enable ;
20532: ENABLE
// display_strings = [ #Am15-1 , timeAction ] ;
20533: LD_ADDR_OWVAR 47
20537: PUSH
20538: LD_STRING #Am15-1
20540: PUSH
20541: LD_EXP 96
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: ST_TO_ADDR
// timeAction = timeAction + 0 0$01 ;
20550: LD_ADDR_EXP 96
20554: PUSH
20555: LD_EXP 96
20559: PUSH
20560: LD_INT 35
20562: PLUS
20563: ST_TO_ADDR
// end ; end_of_file
20564: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 and russianEscape = 0 do
20565: LD_EXP 71
20569: PUSH
20570: LD_INT 1
20572: EQUAL
20573: PUSH
20574: LD_EXP 100
20578: PUSH
20579: LD_INT 0
20581: EQUAL
20582: AND
20583: PUSH
20584: LD_EXP 89
20588: PUSH
20589: LD_INT 0
20591: EQUAL
20592: AND
20593: IFFALSE 20653
20595: GO 20597
20597: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
20598: LD_INT 2
20600: PPUSH
20601: LD_INT 6
20603: PPUSH
20604: LD_INT 2
20606: PPUSH
20607: LD_INT 4
20609: PPUSH
20610: CALL_OW 12
20614: PPUSH
20615: LD_INT 10
20617: PPUSH
20618: LD_INT 3
20620: PPUSH
20621: LD_INT 3
20623: PPUSH
20624: LD_INT 3
20626: PPUSH
20627: LD_INT 42
20629: PUSH
20630: LD_INT 43
20632: PUSH
20633: LD_INT 44
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: LIST
20640: PPUSH
20641: EMPTY
20642: PPUSH
20643: EMPTY
20644: PPUSH
20645: LD_INT 1
20647: PPUSH
20648: CALL 7862 0 11
// enable ;
20652: ENABLE
// end ;
20653: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 1 and russianEscape = 0 do
20654: LD_EXP 71
20658: PUSH
20659: LD_INT 1
20661: EQUAL
20662: PUSH
20663: LD_EXP 100
20667: PUSH
20668: LD_INT 1
20670: EQUAL
20671: AND
20672: PUSH
20673: LD_EXP 89
20677: PUSH
20678: LD_INT 0
20680: EQUAL
20681: AND
20682: IFFALSE 20742
20684: GO 20686
20686: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 6 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
20687: LD_INT 2
20689: PPUSH
20690: LD_INT 6
20692: PPUSH
20693: LD_INT 4
20695: PPUSH
20696: LD_INT 6
20698: PPUSH
20699: CALL_OW 12
20703: PPUSH
20704: LD_INT 10
20706: PPUSH
20707: LD_INT 3
20709: PPUSH
20710: LD_INT 3
20712: PPUSH
20713: LD_INT 3
20715: PPUSH
20716: LD_INT 44
20718: PUSH
20719: LD_INT 45
20721: PUSH
20722: LD_INT 46
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: LIST
20729: PPUSH
20730: EMPTY
20731: PPUSH
20732: EMPTY
20733: PPUSH
20734: LD_INT 1
20736: PPUSH
20737: CALL 7862 0 11
// enable ;
20741: ENABLE
// end ;
20742: END
// every 3 3$30 trigger startAttacks = 1 and missionStage = 3 and russianEscape = 0 do
20743: LD_EXP 71
20747: PUSH
20748: LD_INT 1
20750: EQUAL
20751: PUSH
20752: LD_EXP 100
20756: PUSH
20757: LD_INT 3
20759: EQUAL
20760: AND
20761: PUSH
20762: LD_EXP 89
20766: PUSH
20767: LD_INT 0
20769: EQUAL
20770: AND
20771: IFFALSE 20835
20773: GO 20775
20775: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 , 47 ] , [ ] , [ ] , 1 ) ;
20776: LD_INT 2
20778: PPUSH
20779: LD_INT 6
20781: PPUSH
20782: LD_INT 4
20784: PPUSH
20785: LD_INT 8
20787: PPUSH
20788: CALL_OW 12
20792: PPUSH
20793: LD_INT 10
20795: PPUSH
20796: LD_INT 3
20798: PPUSH
20799: LD_INT 3
20801: PPUSH
20802: LD_INT 3
20804: PPUSH
20805: LD_INT 44
20807: PUSH
20808: LD_INT 45
20810: PUSH
20811: LD_INT 46
20813: PUSH
20814: LD_INT 47
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: PPUSH
20823: EMPTY
20824: PPUSH
20825: EMPTY
20826: PPUSH
20827: LD_INT 1
20829: PPUSH
20830: CALL 7862 0 11
// enable ;
20834: ENABLE
// end ;
20835: END
// every 5 5$30 trigger startAttacks = 1 and missionStage >= 4 and russianEscape = 0 do
20836: LD_EXP 71
20840: PUSH
20841: LD_INT 1
20843: EQUAL
20844: PUSH
20845: LD_EXP 100
20849: PUSH
20850: LD_INT 4
20852: GREATEREQUAL
20853: AND
20854: PUSH
20855: LD_EXP 89
20859: PUSH
20860: LD_INT 0
20862: EQUAL
20863: AND
20864: IFFALSE 20924
20866: GO 20868
20868: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
20869: LD_INT 2
20871: PPUSH
20872: LD_INT 6
20874: PPUSH
20875: LD_INT 4
20877: PPUSH
20878: LD_INT 8
20880: PPUSH
20881: CALL_OW 12
20885: PPUSH
20886: LD_INT 10
20888: PPUSH
20889: LD_INT 3
20891: PPUSH
20892: LD_INT 3
20894: PPUSH
20895: LD_INT 3
20897: PPUSH
20898: LD_INT 46
20900: PUSH
20901: LD_INT 47
20903: PUSH
20904: LD_INT 49
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: LIST
20911: PPUSH
20912: EMPTY
20913: PPUSH
20914: EMPTY
20915: PPUSH
20916: LD_INT 1
20918: PPUSH
20919: CALL 7862 0 11
// enable ;
20923: ENABLE
// end ; end_of_file
20924: END
// every 1 do var i , dec1 , options , people ;
20925: GO 20927
20927: DISABLE
20928: LD_INT 0
20930: PPUSH
20931: PPUSH
20932: PPUSH
20933: PPUSH
// begin TeleportExit ( rutp1 , 92 , 172 ) ;
20934: LD_INT 24
20936: PPUSH
20937: LD_INT 92
20939: PPUSH
20940: LD_INT 172
20942: PPUSH
20943: CALL_OW 243
// TeleportExit ( rutp2 , 103 , 74 ) ;
20947: LD_INT 25
20949: PPUSH
20950: LD_INT 103
20952: PPUSH
20953: LD_INT 74
20955: PPUSH
20956: CALL_OW 243
// SetClass ( Simms , 4 ) ;
20960: LD_EXP 47
20964: PPUSH
20965: LD_INT 4
20967: PPUSH
20968: CALL_OW 336
// InGameOn ;
20972: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
20976: LD_EXP 24
20980: PUSH
20981: LD_EXP 25
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PPUSH
20990: LD_INT 60
20992: PPUSH
20993: LD_INT 75
20995: PPUSH
20996: CALL_OW 111
// if KappaStatus = 0 then
21000: LD_EXP 80
21004: PUSH
21005: LD_INT 0
21007: EQUAL
21008: IFFALSE 21297
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21010: LD_EXP 24
21014: PPUSH
21015: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21019: LD_EXP 1
21023: PPUSH
21024: LD_STRING D1T-JMM-1
21026: PPUSH
21027: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21031: LD_EXP 24
21035: PPUSH
21036: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21040: LD_EXP 17
21044: PPUSH
21045: LD_STRING D1T-Pow-1
21047: PPUSH
21048: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21052: LD_EXP 24
21056: PPUSH
21057: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21061: LD_EXP 1
21065: PPUSH
21066: LD_STRING D1T-JMM-2
21068: PPUSH
21069: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21073: LD_EXP 24
21077: PPUSH
21078: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21082: LD_EXP 17
21086: PPUSH
21087: LD_STRING D1T-Pow-2
21089: PPUSH
21090: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21094: LD_EXP 24
21098: PPUSH
21099: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
21103: LD_EXP 1
21107: PPUSH
21108: LD_STRING D1T-JMM-3
21110: PPUSH
21111: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21115: LD_EXP 24
21119: PPUSH
21120: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
21124: LD_EXP 17
21128: PPUSH
21129: LD_STRING D1T-Pow-3
21131: PPUSH
21132: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21136: LD_EXP 24
21140: PPUSH
21141: CALL_OW 87
// if not JMMGirlVeh = [ ] then
21145: LD_EXP 78
21149: PUSH
21150: EMPTY
21151: EQUAL
21152: NOT
21153: IFFALSE 21253
// begin if JMMGirl = 1 then
21155: LD_EXP 79
21159: PUSH
21160: LD_INT 1
21162: EQUAL
21163: IFFALSE 21177
// Say ( Joan , D1T-Joan-3 ) ;
21165: LD_EXP 2
21169: PPUSH
21170: LD_STRING D1T-Joan-3
21172: PPUSH
21173: CALL_OW 88
// if JMMGirl = 2 then
21177: LD_EXP 79
21181: PUSH
21182: LD_INT 2
21184: EQUAL
21185: IFFALSE 21199
// Say ( Lisa , D1T-Lisa-3 ) ;
21187: LD_EXP 4
21191: PPUSH
21192: LD_STRING D1T-Lisa-3
21194: PPUSH
21195: CALL_OW 88
// if JMMGirl = 3 then
21199: LD_EXP 79
21203: PUSH
21204: LD_INT 3
21206: EQUAL
21207: IFFALSE 21221
// Say ( Connie , D1T-Con-3 ) ;
21209: LD_EXP 16
21213: PPUSH
21214: LD_STRING D1T-Con-3
21216: PPUSH
21217: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21221: LD_EXP 24
21225: PPUSH
21226: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
21230: LD_EXP 17
21234: PPUSH
21235: LD_STRING D1T-Pow-4
21237: PPUSH
21238: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21242: LD_EXP 24
21246: PPUSH
21247: CALL_OW 87
// end else
21251: GO 21295
// begin Say ( JMM , D1T-JMM-4 ) ;
21253: LD_EXP 1
21257: PPUSH
21258: LD_STRING D1T-JMM-4
21260: PPUSH
21261: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21265: LD_EXP 24
21269: PPUSH
21270: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
21274: LD_EXP 17
21278: PPUSH
21279: LD_STRING D1T-Pow-5
21281: PPUSH
21282: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21286: LD_EXP 24
21290: PPUSH
21291: CALL_OW 87
// end ; end else
21295: GO 21381
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21297: LD_EXP 24
21301: PPUSH
21302: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21306: LD_EXP 1
21310: PPUSH
21311: LD_STRING D1T-JMM-1
21313: PPUSH
21314: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21318: LD_EXP 24
21322: PPUSH
21323: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21327: LD_EXP 17
21331: PPUSH
21332: LD_STRING D1T-Pow-1
21334: PPUSH
21335: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21339: LD_EXP 24
21343: PPUSH
21344: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21348: LD_EXP 1
21352: PPUSH
21353: LD_STRING D1T-JMM-2
21355: PPUSH
21356: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21360: LD_EXP 24
21364: PPUSH
21365: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21369: LD_EXP 17
21373: PPUSH
21374: LD_STRING D1T-Pow-2
21376: PPUSH
21377: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
21381: LD_INT 35
21383: PPUSH
21384: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
21388: LD_EXP 24
21392: PUSH
21393: LD_EXP 25
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PPUSH
21402: LD_INT 60
21404: PPUSH
21405: LD_INT 75
21407: PPUSH
21408: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
21412: LD_EXP 24
21416: PPUSH
21417: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 20 or not HasTask ( NewJMMVeh ) ;
21421: LD_EXP 24
21425: PPUSH
21426: LD_EXP 17
21430: PPUSH
21431: CALL_OW 296
21435: PUSH
21436: LD_INT 20
21438: LESS
21439: PUSH
21440: LD_EXP 24
21444: PPUSH
21445: CALL_OW 314
21449: NOT
21450: OR
21451: IFFALSE 21381
// ComExitVehicle ( JMM ) ;
21453: LD_EXP 1
21457: PPUSH
21458: CALL_OW 121
// repeat wait ( 0 0$1 ) ;
21462: LD_INT 35
21464: PPUSH
21465: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
21469: LD_EXP 1
21473: PPUSH
21474: LD_EXP 17
21478: PPUSH
21479: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
21483: LD_EXP 1
21487: PPUSH
21488: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
21492: LD_EXP 1
21496: PPUSH
21497: LD_EXP 17
21501: PPUSH
21502: CALL_OW 296
21506: PUSH
21507: LD_INT 6
21509: LESS
21510: IFFALSE 21462
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
21512: LD_EXP 1
21516: PUSH
21517: LD_EXP 17
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PPUSH
21526: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
21530: LD_EXP 1
21534: PPUSH
21535: LD_EXP 17
21539: PPUSH
21540: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
21544: LD_EXP 17
21548: PPUSH
21549: LD_EXP 1
21553: PPUSH
21554: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
21558: LD_EXP 1
21562: PPUSH
21563: LD_STRING D1-JMM-1
21565: PPUSH
21566: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
21570: LD_EXP 17
21574: PPUSH
21575: LD_STRING D1-Pow-1
21577: PPUSH
21578: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
21582: LD_INT 1
21584: PPUSH
21585: LD_INT 3
21587: PPUSH
21588: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
21592: LD_INT 1
21594: PPUSH
21595: LD_INT 4
21597: PPUSH
21598: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
21602: LD_INT 1
21604: PPUSH
21605: LD_INT 5
21607: PPUSH
21608: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
21612: LD_INT 171
21614: PPUSH
21615: LD_INT 81
21617: PPUSH
21618: CALL_OW 84
// wait ( 0 0$4 ) ;
21622: LD_INT 140
21624: PPUSH
21625: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
21629: LD_INT 162
21631: PPUSH
21632: LD_INT 36
21634: PPUSH
21635: CALL_OW 84
// wait ( 0 0$4 ) ;
21639: LD_INT 140
21641: PPUSH
21642: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
21646: LD_INT 75
21648: PPUSH
21649: LD_INT 16
21651: PPUSH
21652: CALL_OW 84
// wait ( 0 0$4 ) ;
21656: LD_INT 140
21658: PPUSH
21659: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
21663: LD_EXP 17
21667: PUSH
21668: LD_EXP 1
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PPUSH
21677: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
21681: LD_EXP 1
21685: PPUSH
21686: LD_STRING D1-JMM-2
21688: PPUSH
21689: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
21693: LD_EXP 17
21697: PPUSH
21698: LD_STRING D1-Pow-2
21700: PPUSH
21701: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
21705: LD_EXP 1
21709: PPUSH
21710: LD_STRING D1-JMM-3
21712: PPUSH
21713: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
21717: LD_EXP 17
21721: PPUSH
21722: LD_STRING D1-Pow-3
21724: PPUSH
21725: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
21729: LD_EXP 1
21733: PPUSH
21734: LD_STRING D1-JMM-4
21736: PPUSH
21737: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
21741: LD_EXP 17
21745: PPUSH
21746: LD_STRING D1-Pow-4
21748: PPUSH
21749: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
21753: LD_EXP 1
21757: PPUSH
21758: LD_STRING D1-JMM-5
21760: PPUSH
21761: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
21765: LD_EXP 17
21769: PPUSH
21770: LD_STRING D1-Pow-5
21772: PPUSH
21773: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
21777: LD_ADDR_VAR 0 3
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: LD_INT 2
21787: PUSH
21788: LD_INT 3
21790: PUSH
21791: LD_INT 4
21793: PUSH
21794: LD_INT 5
21796: PUSH
21797: LD_INT 6
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
21808: LD_ADDR_VAR 0 2
21812: PUSH
21813: LD_STRING Q1
21815: PPUSH
21816: LD_VAR 0 3
21820: PPUSH
21821: CALL_OW 98
21825: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
21826: LD_ADDR_VAR 0 2
21830: PUSH
21831: LD_STRING Q1
21833: PPUSH
21834: LD_VAR 0 3
21838: PPUSH
21839: CALL_OW 98
21843: ST_TO_ADDR
// options = options diff dec1 ;
21844: LD_ADDR_VAR 0 3
21848: PUSH
21849: LD_VAR 0 3
21853: PUSH
21854: LD_VAR 0 2
21858: DIFF
21859: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
21860: LD_VAR 0 2
21864: PPUSH
21865: LD_VAR 0 3
21869: PPUSH
21870: CALL 23404 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
21874: LD_VAR 0 2
21878: PUSH
21879: LD_INT 5
21881: PUSH
21882: LD_INT 6
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: IN
21889: PUSH
21890: LD_VAR 0 3
21894: PUSH
21895: LD_INT 2
21897: EQUAL
21898: OR
21899: IFFALSE 21826
// if not ( dec1 in [ 5 , 6 ] ) then
21901: LD_VAR 0 2
21905: PUSH
21906: LD_INT 5
21908: PUSH
21909: LD_INT 6
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: IN
21916: NOT
21917: IFFALSE 21960
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
21919: LD_ADDR_VAR 0 2
21923: PUSH
21924: LD_STRING Q1a
21926: PPUSH
21927: LD_INT 1
21929: PUSH
21930: LD_INT 2
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PPUSH
21937: CALL_OW 98
21941: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
21942: LD_VAR 0 2
21946: PUSH
21947: LD_INT 4
21949: PLUS
21950: PPUSH
21951: LD_VAR 0 3
21955: PPUSH
21956: CALL 23404 0 2
// end ; if not JMMGirlVeh = [ ] then
21960: LD_EXP 78
21964: PUSH
21965: EMPTY
21966: EQUAL
21967: NOT
21968: IFFALSE 22130
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
21970: LD_EXP 25
21974: PPUSH
21975: CALL_OW 313
21979: PPUSH
21980: CALL_OW 121
// wait ( 0 0$1 ) ;
21984: LD_INT 35
21986: PPUSH
21987: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21991: LD_INT 35
21993: PPUSH
21994: CALL_OW 67
// if JMMGirl = 1 then
21998: LD_EXP 79
22002: PUSH
22003: LD_INT 1
22005: EQUAL
22006: IFFALSE 22022
// ComMoveUnit ( JMM , Joan ) ;
22008: LD_EXP 1
22012: PPUSH
22013: LD_EXP 2
22017: PPUSH
22018: CALL_OW 112
// if JMMGirl = 2 then
22022: LD_EXP 79
22026: PUSH
22027: LD_INT 2
22029: EQUAL
22030: IFFALSE 22046
// ComMoveUnit ( JMM , Lisa ) ;
22032: LD_EXP 1
22036: PPUSH
22037: LD_EXP 4
22041: PPUSH
22042: CALL_OW 112
// if JMMGirl = 3 then
22046: LD_EXP 79
22050: PUSH
22051: LD_INT 3
22053: EQUAL
22054: IFFALSE 22070
// ComMoveUnit ( JMM , Connie ) ;
22056: LD_EXP 1
22060: PPUSH
22061: LD_EXP 16
22065: PPUSH
22066: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
22070: LD_EXP 1
22074: PPUSH
22075: LD_EXP 2
22079: PPUSH
22080: CALL_OW 296
22084: PUSH
22085: LD_INT 6
22087: LESS
22088: PUSH
22089: LD_EXP 1
22093: PPUSH
22094: LD_EXP 4
22098: PPUSH
22099: CALL_OW 296
22103: PUSH
22104: LD_INT 6
22106: LESS
22107: OR
22108: PUSH
22109: LD_EXP 1
22113: PPUSH
22114: LD_EXP 16
22118: PPUSH
22119: CALL_OW 296
22123: PUSH
22124: LD_INT 6
22126: LESS
22127: OR
22128: IFFALSE 21991
// end ; CenterNowOnUnits ( JMM ) ;
22130: LD_EXP 1
22134: PPUSH
22135: CALL_OW 87
// case JMMGirl of 1 :
22139: LD_EXP 79
22143: PUSH
22144: LD_INT 1
22146: DOUBLE
22147: EQUAL
22148: IFTRUE 22152
22150: GO 22207
22152: POP
// begin ComTurnUnit ( JMM , Joan ) ;
22153: LD_EXP 1
22157: PPUSH
22158: LD_EXP 2
22162: PPUSH
22163: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
22167: LD_EXP 2
22171: PPUSH
22172: LD_EXP 1
22176: PPUSH
22177: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
22181: LD_EXP 2
22185: PPUSH
22186: LD_STRING D3W-Joan-1
22188: PPUSH
22189: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22193: LD_EXP 1
22197: PPUSH
22198: LD_STRING D3W-JMM-1
22200: PPUSH
22201: CALL_OW 88
// end ; 2 :
22205: GO 22334
22207: LD_INT 2
22209: DOUBLE
22210: EQUAL
22211: IFTRUE 22215
22213: GO 22270
22215: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
22216: LD_EXP 1
22220: PPUSH
22221: LD_EXP 4
22225: PPUSH
22226: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
22230: LD_EXP 4
22234: PPUSH
22235: LD_EXP 1
22239: PPUSH
22240: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
22244: LD_EXP 4
22248: PPUSH
22249: LD_STRING D3W-Lisa-1
22251: PPUSH
22252: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22256: LD_EXP 1
22260: PPUSH
22261: LD_STRING D3W-JMM-1
22263: PPUSH
22264: CALL_OW 88
// end ; 3 :
22268: GO 22334
22270: LD_INT 3
22272: DOUBLE
22273: EQUAL
22274: IFTRUE 22278
22276: GO 22333
22278: POP
// begin ComTurnUnit ( JMM , Connie ) ;
22279: LD_EXP 1
22283: PPUSH
22284: LD_EXP 16
22288: PPUSH
22289: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
22293: LD_EXP 16
22297: PPUSH
22298: LD_EXP 1
22302: PPUSH
22303: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
22307: LD_EXP 16
22311: PPUSH
22312: LD_STRING D3W-Con-1
22314: PPUSH
22315: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22319: LD_EXP 1
22323: PPUSH
22324: LD_STRING D3W-JMM-1
22326: PPUSH
22327: CALL_OW 88
// end ; end ;
22331: GO 22334
22333: POP
// people = 0 ;
22334: LD_ADDR_VAR 0 4
22338: PUSH
22339: LD_INT 0
22341: ST_TO_ADDR
// if Lisa and people < 5 then
22342: LD_EXP 4
22346: PUSH
22347: LD_VAR 0 4
22351: PUSH
22352: LD_INT 5
22354: LESS
22355: AND
22356: IFFALSE 22388
// begin people = people + 1 ;
22358: LD_ADDR_VAR 0 4
22362: PUSH
22363: LD_VAR 0 4
22367: PUSH
22368: LD_INT 1
22370: PLUS
22371: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
22372: LD_ADDR_EXP 66
22376: PUSH
22377: LD_EXP 66
22381: PUSH
22382: LD_EXP 4
22386: ADD
22387: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
22388: LD_EXP 5
22392: PUSH
22393: LD_VAR 0 4
22397: PUSH
22398: LD_INT 5
22400: LESS
22401: AND
22402: IFFALSE 22434
// begin people = people + 1 ;
22404: LD_ADDR_VAR 0 4
22408: PUSH
22409: LD_VAR 0 4
22413: PUSH
22414: LD_INT 1
22416: PLUS
22417: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
22418: LD_ADDR_EXP 66
22422: PUSH
22423: LD_EXP 66
22427: PUSH
22428: LD_EXP 5
22432: ADD
22433: ST_TO_ADDR
// end ; if Bobby and people < 5 then
22434: LD_EXP 6
22438: PUSH
22439: LD_VAR 0 4
22443: PUSH
22444: LD_INT 5
22446: LESS
22447: AND
22448: IFFALSE 22480
// begin people = people + 1 ;
22450: LD_ADDR_VAR 0 4
22454: PUSH
22455: LD_VAR 0 4
22459: PUSH
22460: LD_INT 1
22462: PLUS
22463: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
22464: LD_ADDR_EXP 66
22468: PUSH
22469: LD_EXP 66
22473: PUSH
22474: LD_EXP 6
22478: ADD
22479: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
22480: LD_EXP 7
22484: PUSH
22485: LD_VAR 0 4
22489: PUSH
22490: LD_INT 5
22492: LESS
22493: AND
22494: IFFALSE 22526
// begin people = people + 1 ;
22496: LD_ADDR_VAR 0 4
22500: PUSH
22501: LD_VAR 0 4
22505: PUSH
22506: LD_INT 1
22508: PLUS
22509: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
22510: LD_ADDR_EXP 66
22514: PUSH
22515: LD_EXP 66
22519: PUSH
22520: LD_EXP 7
22524: ADD
22525: ST_TO_ADDR
// end ; if Denis and people < 5 then
22526: LD_EXP 8
22530: PUSH
22531: LD_VAR 0 4
22535: PUSH
22536: LD_INT 5
22538: LESS
22539: AND
22540: IFFALSE 22572
// begin people = people + 1 ;
22542: LD_ADDR_VAR 0 4
22546: PUSH
22547: LD_VAR 0 4
22551: PUSH
22552: LD_INT 1
22554: PLUS
22555: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
22556: LD_ADDR_EXP 66
22560: PUSH
22561: LD_EXP 66
22565: PUSH
22566: LD_EXP 8
22570: ADD
22571: ST_TO_ADDR
// end ; if Brown and people < 5 then
22572: LD_EXP 9
22576: PUSH
22577: LD_VAR 0 4
22581: PUSH
22582: LD_INT 5
22584: LESS
22585: AND
22586: IFFALSE 22618
// begin people = people + 1 ;
22588: LD_ADDR_VAR 0 4
22592: PUSH
22593: LD_VAR 0 4
22597: PUSH
22598: LD_INT 1
22600: PLUS
22601: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
22602: LD_ADDR_EXP 66
22606: PUSH
22607: LD_EXP 66
22611: PUSH
22612: LD_EXP 9
22616: ADD
22617: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
22618: LD_EXP 10
22622: PUSH
22623: LD_VAR 0 4
22627: PUSH
22628: LD_INT 5
22630: LESS
22631: AND
22632: IFFALSE 22664
// begin people = people + 1 ;
22634: LD_ADDR_VAR 0 4
22638: PUSH
22639: LD_VAR 0 4
22643: PUSH
22644: LD_INT 1
22646: PLUS
22647: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
22648: LD_ADDR_EXP 66
22652: PUSH
22653: LD_EXP 66
22657: PUSH
22658: LD_EXP 10
22662: ADD
22663: ST_TO_ADDR
// end ; if Houten and people < 5 then
22664: LD_EXP 11
22668: PUSH
22669: LD_VAR 0 4
22673: PUSH
22674: LD_INT 5
22676: LESS
22677: AND
22678: IFFALSE 22710
// begin people = people + 1 ;
22680: LD_ADDR_VAR 0 4
22684: PUSH
22685: LD_VAR 0 4
22689: PUSH
22690: LD_INT 1
22692: PLUS
22693: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
22694: LD_ADDR_EXP 66
22698: PUSH
22699: LD_EXP 66
22703: PUSH
22704: LD_EXP 11
22708: ADD
22709: ST_TO_ADDR
// end ; if Cornel and people < 5 then
22710: LD_EXP 12
22714: PUSH
22715: LD_VAR 0 4
22719: PUSH
22720: LD_INT 5
22722: LESS
22723: AND
22724: IFFALSE 22756
// begin people = people + 1 ;
22726: LD_ADDR_VAR 0 4
22730: PUSH
22731: LD_VAR 0 4
22735: PUSH
22736: LD_INT 1
22738: PLUS
22739: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
22740: LD_ADDR_EXP 66
22744: PUSH
22745: LD_EXP 66
22749: PUSH
22750: LD_EXP 12
22754: ADD
22755: ST_TO_ADDR
// end ; if Gary and people < 5 then
22756: LD_EXP 13
22760: PUSH
22761: LD_VAR 0 4
22765: PUSH
22766: LD_INT 5
22768: LESS
22769: AND
22770: IFFALSE 22802
// begin people = people + 1 ;
22772: LD_ADDR_VAR 0 4
22776: PUSH
22777: LD_VAR 0 4
22781: PUSH
22782: LD_INT 1
22784: PLUS
22785: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
22786: LD_ADDR_EXP 66
22790: PUSH
22791: LD_EXP 66
22795: PUSH
22796: LD_EXP 13
22800: ADD
22801: ST_TO_ADDR
// end ; if Frank and people < 5 then
22802: LD_EXP 14
22806: PUSH
22807: LD_VAR 0 4
22811: PUSH
22812: LD_INT 5
22814: LESS
22815: AND
22816: IFFALSE 22848
// begin people = people + 1 ;
22818: LD_ADDR_VAR 0 4
22822: PUSH
22823: LD_VAR 0 4
22827: PUSH
22828: LD_INT 1
22830: PLUS
22831: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
22832: LD_ADDR_EXP 66
22836: PUSH
22837: LD_EXP 66
22841: PUSH
22842: LD_EXP 14
22846: ADD
22847: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
22848: LD_EXP 15
22852: PUSH
22853: LD_VAR 0 4
22857: PUSH
22858: LD_INT 5
22860: LESS
22861: AND
22862: IFFALSE 22894
// begin people = people + 1 ;
22864: LD_ADDR_VAR 0 4
22868: PUSH
22869: LD_VAR 0 4
22873: PUSH
22874: LD_INT 1
22876: PLUS
22877: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
22878: LD_ADDR_EXP 66
22882: PUSH
22883: LD_EXP 66
22887: PUSH
22888: LD_EXP 15
22892: ADD
22893: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
22894: LD_EXP 66
22898: PPUSH
22899: LD_INT 25
22901: PUSH
22902: LD_INT 2
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PPUSH
22909: CALL_OW 72
22913: PUSH
22914: LD_INT 0
22916: EQUAL
22917: IFFALSE 22935
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
22919: LD_EXP 66
22923: PUSH
22924: LD_INT 1
22926: ARRAY
22927: PPUSH
22928: LD_INT 2
22930: PPUSH
22931: CALL_OW 336
// for i = 1 to 5 do
22935: LD_ADDR_VAR 0 1
22939: PUSH
22940: DOUBLE
22941: LD_INT 1
22943: DEC
22944: ST_TO_ADDR
22945: LD_INT 5
22947: PUSH
22948: FOR_TO
22949: IFFALSE 23000
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
22951: LD_EXP 66
22955: PUSH
22956: LD_VAR 0 1
22960: ARRAY
22961: PPUSH
22962: LD_INT 62
22964: PUSH
22965: LD_VAR 0 1
22969: PLUS
22970: PPUSH
22971: LD_INT 95
22973: PPUSH
22974: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
22978: LD_EXP 66
22982: PUSH
22983: LD_VAR 0 1
22987: ARRAY
22988: PPUSH
22989: LD_EXP 1
22993: PPUSH
22994: CALL_OW 179
// end ;
22998: GO 22948
23000: POP
23001: POP
// repeat wait ( 0 0$1 ) ;
23002: LD_INT 35
23004: PPUSH
23005: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
23009: LD_EXP 1
23013: PPUSH
23014: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
23018: LD_EXP 1
23022: PPUSH
23023: LD_INT 66
23025: PPUSH
23026: LD_INT 98
23028: PPUSH
23029: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
23033: LD_EXP 2
23037: PUSH
23038: LD_EXP 4
23042: PUSH
23043: LD_EXP 16
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: LIST
23052: PPUSH
23053: LD_INT 67
23055: PPUSH
23056: LD_INT 98
23058: PPUSH
23059: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
23063: LD_EXP 1
23067: PUSH
23068: LD_EXP 2
23072: PUSH
23073: LD_EXP 4
23077: PUSH
23078: LD_EXP 16
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: PPUSH
23089: LD_INT 63
23091: PPUSH
23092: LD_INT 95
23094: PPUSH
23095: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
23099: LD_EXP 1
23103: PPUSH
23104: LD_INT 9
23106: PPUSH
23107: CALL_OW 308
23111: PUSH
23112: LD_INT 9
23114: PPUSH
23115: LD_INT 22
23117: PUSH
23118: LD_INT 4
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 21
23127: PUSH
23128: LD_INT 1
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PPUSH
23139: CALL_OW 70
23143: PUSH
23144: LD_INT 5
23146: EQUAL
23147: AND
23148: IFFALSE 23002
// wait ( 0 0$2 ) ;
23150: LD_INT 70
23152: PPUSH
23153: CALL_OW 67
// if IsInArea ( Lisa , PowellHillArea ) then
23157: LD_EXP 4
23161: PPUSH
23162: LD_INT 9
23164: PPUSH
23165: CALL_OW 308
23169: IFFALSE 23183
// Say ( Lisa , D3nW-Lisa-1 ) ;
23171: LD_EXP 4
23175: PPUSH
23176: LD_STRING D3nW-Lisa-1
23178: PPUSH
23179: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
23183: LD_EXP 7
23187: PPUSH
23188: LD_INT 9
23190: PPUSH
23191: CALL_OW 308
23195: IFFALSE 23209
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
23197: LD_EXP 7
23201: PPUSH
23202: LD_STRING D3nW-Cyrus-1
23204: PPUSH
23205: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
23209: LD_EXP 6
23213: PPUSH
23214: LD_INT 9
23216: PPUSH
23217: CALL_OW 308
23221: IFFALSE 23235
// Say ( Bobby , D3nW-Bobby-1 ) ;
23223: LD_EXP 6
23227: PPUSH
23228: LD_STRING D3nW-Bobby-1
23230: PPUSH
23231: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
23235: LD_EXP 13
23239: PPUSH
23240: LD_INT 9
23242: PPUSH
23243: CALL_OW 308
23247: IFFALSE 23261
// Say ( Gary , D3nW-Gary-1 ) ;
23249: LD_EXP 13
23253: PPUSH
23254: LD_STRING D3nW-Gary-1
23256: PPUSH
23257: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
23261: LD_EXP 5
23265: PPUSH
23266: LD_INT 9
23268: PPUSH
23269: CALL_OW 308
23273: IFFALSE 23287
// Say ( Donaldson , D3nW-Don-1 ) ;
23275: LD_EXP 5
23279: PPUSH
23280: LD_STRING D3nW-Don-1
23282: PPUSH
23283: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
23287: LD_EXP 12
23291: PPUSH
23292: LD_INT 9
23294: PPUSH
23295: CALL_OW 308
23299: IFFALSE 23313
// Say ( Cornel , D3nW-Corn-1 ) ;
23301: LD_EXP 12
23305: PPUSH
23306: LD_STRING D3nW-Corn-1
23308: PPUSH
23309: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
23313: LD_EXP 14
23317: PPUSH
23318: LD_INT 9
23320: PPUSH
23321: CALL_OW 308
23325: IFFALSE 23339
// Say ( Frank , D3nW-Frank-1 ) ;
23327: LD_EXP 14
23331: PPUSH
23332: LD_STRING D3nW-Frank-1
23334: PPUSH
23335: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
23339: LD_EXP 1
23343: PPUSH
23344: LD_STRING D3nW-JMM-1
23346: PPUSH
23347: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
23351: LD_EXP 1
23355: PPUSH
23356: LD_STRING D3nW-JMM-1a
23358: PPUSH
23359: CALL_OW 88
// InGameOff ;
23363: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
23367: LD_STRING M1
23369: PPUSH
23370: CALL_OW 337
// SaveForQuickRestart ;
23374: CALL_OW 22
// startAttacks = 1 ;
23378: LD_ADDR_EXP 71
23382: PUSH
23383: LD_INT 1
23385: ST_TO_ADDR
// wait ( 0 0$5 ) ;
23386: LD_INT 175
23388: PPUSH
23389: CALL_OW 67
// powellBuildBase = 1 ;
23393: LD_ADDR_EXP 67
23397: PUSH
23398: LD_INT 1
23400: ST_TO_ADDR
// end ;
23401: PPOPN 4
23403: END
// function ResolveQuery ( question , list_of_q ) ; begin
23404: LD_INT 0
23406: PPUSH
// case question of 1 :
23407: LD_VAR 0 1
23411: PUSH
23412: LD_INT 1
23414: DOUBLE
23415: EQUAL
23416: IFTRUE 23420
23418: GO 23471
23420: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
23421: LD_EXP 1
23425: PPUSH
23426: LD_STRING D2Mot-JMM-1
23428: PPUSH
23429: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
23433: LD_EXP 17
23437: PPUSH
23438: LD_STRING D2Mot-Pow-1
23440: PPUSH
23441: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
23445: LD_EXP 1
23449: PPUSH
23450: LD_STRING D2Mot-JMM-2
23452: PPUSH
23453: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
23457: LD_EXP 17
23461: PPUSH
23462: LD_STRING D2Mot-Pow-2
23464: PPUSH
23465: CALL_OW 88
// end ; 2 :
23469: GO 23814
23471: LD_INT 2
23473: DOUBLE
23474: EQUAL
23475: IFTRUE 23479
23477: GO 23555
23479: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
23480: LD_EXP 1
23484: PPUSH
23485: LD_STRING D2Rus-JMM-1
23487: PPUSH
23488: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
23492: LD_EXP 17
23496: PPUSH
23497: LD_STRING D2Rus-Pow-1
23499: PPUSH
23500: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
23504: LD_EXP 1
23508: PPUSH
23509: LD_STRING D2Rus-JMM-2
23511: PPUSH
23512: CALL_OW 88
// if not ( 3 in list_of_q ) then
23516: LD_INT 3
23518: PUSH
23519: LD_VAR 0 2
23523: IN
23524: NOT
23525: IFFALSE 23541
// Say ( Powell , D2Rus-Pow-2 ) else
23527: LD_EXP 17
23531: PPUSH
23532: LD_STRING D2Rus-Pow-2
23534: PPUSH
23535: CALL_OW 88
23539: GO 23553
// Say ( Powell , D2Rus-Pow-2a ) ;
23541: LD_EXP 17
23545: PPUSH
23546: LD_STRING D2Rus-Pow-2a
23548: PPUSH
23549: CALL_OW 88
// end ; 3 :
23553: GO 23814
23555: LD_INT 3
23557: DOUBLE
23558: EQUAL
23559: IFTRUE 23563
23561: GO 23648
23563: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
23564: LD_EXP 1
23568: PPUSH
23569: LD_STRING D2Leg-JMM-1
23571: PPUSH
23572: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
23576: LD_EXP 17
23580: PPUSH
23581: LD_STRING D2Leg-Pow-1
23583: PPUSH
23584: CALL_OW 88
// if ( 2 in list_of_q ) then
23588: LD_INT 2
23590: PUSH
23591: LD_VAR 0 2
23595: IN
23596: IFFALSE 23622
// begin Say ( JMM , D2Leg-JMM-2 ) ;
23598: LD_EXP 1
23602: PPUSH
23603: LD_STRING D2Leg-JMM-2
23605: PPUSH
23606: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
23610: LD_EXP 17
23614: PPUSH
23615: LD_STRING D2Leg-Pow-2
23617: PPUSH
23618: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
23622: LD_EXP 1
23626: PPUSH
23627: LD_STRING D2Leg-JMM-3
23629: PPUSH
23630: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
23634: LD_EXP 17
23638: PPUSH
23639: LD_STRING D2Leg-Pow-3
23641: PPUSH
23642: CALL_OW 88
// end ; 4 :
23646: GO 23814
23648: LD_INT 4
23650: DOUBLE
23651: EQUAL
23652: IFTRUE 23656
23654: GO 23731
23656: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
23657: LD_EXP 1
23661: PPUSH
23662: LD_STRING D2Ar-JMM-1
23664: PPUSH
23665: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
23669: LD_EXP 17
23673: PPUSH
23674: LD_STRING D2Ar-Pow-1
23676: PPUSH
23677: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
23681: LD_EXP 1
23685: PPUSH
23686: LD_STRING D2Ar-JMM-2
23688: PPUSH
23689: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
23693: LD_EXP 17
23697: PPUSH
23698: LD_STRING D2Ar-Pow-2
23700: PPUSH
23701: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
23705: LD_EXP 1
23709: PPUSH
23710: LD_STRING D2Ar-JMM-3
23712: PPUSH
23713: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
23717: LD_EXP 17
23721: PPUSH
23722: LD_STRING D2Ar-Pow-3
23724: PPUSH
23725: CALL_OW 88
// end ; 5 :
23729: GO 23814
23731: LD_INT 5
23733: DOUBLE
23734: EQUAL
23735: IFTRUE 23739
23737: GO 23754
23739: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
23740: LD_EXP 1
23744: PPUSH
23745: LD_STRING D2Conf-JMM-1
23747: PPUSH
23748: CALL_OW 88
// end ; 6 :
23752: GO 23814
23754: LD_INT 6
23756: DOUBLE
23757: EQUAL
23758: IFTRUE 23762
23760: GO 23813
23762: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
23763: LD_EXP 1
23767: PPUSH
23768: LD_STRING D2Com-JMM-1
23770: PPUSH
23771: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
23775: LD_EXP 17
23779: PPUSH
23780: LD_STRING D2Com-Pow-1
23782: PPUSH
23783: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
23787: LD_EXP 1
23791: PPUSH
23792: LD_STRING D2Com-JMM-2
23794: PPUSH
23795: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
23799: LD_EXP 17
23803: PPUSH
23804: LD_STRING D2Com-Pow-2
23806: PPUSH
23807: CALL_OW 88
// end ; end ;
23811: GO 23814
23813: POP
// end ;
23814: LD_VAR 0 3
23818: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
23819: LD_INT 9
23821: PPUSH
23822: LD_INT 22
23824: PUSH
23825: LD_INT 4
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 21
23834: PUSH
23835: LD_INT 1
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PPUSH
23846: CALL_OW 70
23850: IFFALSE 23895
23852: GO 23854
23854: DISABLE
// begin enable ;
23855: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
23856: LD_INT 9
23858: PPUSH
23859: LD_INT 22
23861: PUSH
23862: LD_INT 4
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 21
23871: PUSH
23872: LD_INT 1
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PPUSH
23883: CALL_OW 70
23887: PPUSH
23888: LD_INT 1
23890: PPUSH
23891: CALL_OW 235
// end ;
23895: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
23896: LD_INT 22
23898: PUSH
23899: LD_INT 4
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 21
23908: PUSH
23909: LD_INT 2
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 3
23918: PUSH
23919: LD_INT 58
23921: PUSH
23922: EMPTY
23923: LIST
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: PPUSH
23934: CALL_OW 69
23938: PUSH
23939: LD_INT 4
23941: EQUAL
23942: PUSH
23943: LD_EXP 71
23947: PUSH
23948: LD_INT 1
23950: EQUAL
23951: AND
23952: IFFALSE 23965
23954: GO 23956
23956: DISABLE
// startAttacks = 0 ;
23957: LD_ADDR_EXP 71
23961: PUSH
23962: LD_INT 0
23964: ST_TO_ADDR
23965: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
23966: LD_INT 22
23968: PUSH
23969: LD_INT 4
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 21
23978: PUSH
23979: LD_INT 2
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 3
23988: PUSH
23989: LD_INT 58
23991: PUSH
23992: EMPTY
23993: LIST
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: PPUSH
24004: CALL_OW 69
24008: PUSH
24009: LD_INT 4
24011: EQUAL
24012: PUSH
24013: LD_INT 22
24015: PUSH
24016: LD_INT 6
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 21
24025: PUSH
24026: LD_INT 2
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 24
24035: PUSH
24036: LD_INT 250
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: PPUSH
24048: CALL_OW 69
24052: PUSH
24053: LD_INT 0
24055: EQUAL
24056: AND
24057: PUSH
24058: LD_EXP 71
24062: PUSH
24063: LD_INT 0
24065: EQUAL
24066: AND
24067: PUSH
24068: LD_EXP 68
24072: PUSH
24073: LD_INT 0
24075: EQUAL
24076: AND
24077: IFFALSE 24265
24079: GO 24081
24081: DISABLE
24082: LD_INT 0
24084: PPUSH
// begin powellAttacks = 1 ;
24085: LD_ADDR_EXP 68
24089: PUSH
24090: LD_INT 1
24092: ST_TO_ADDR
// InGameOn ;
24093: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
24097: LD_EXP 17
24101: PPUSH
24102: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
24106: LD_EXP 17
24110: PPUSH
24111: LD_INT 47
24113: PPUSH
24114: LD_INT 60
24116: PPUSH
24117: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
24121: LD_EXP 17
24125: PPUSH
24126: LD_STRING D4-Pow-1
24128: PPUSH
24129: CALL_OW 88
// for i = 1 to amUnitsAttack do
24133: LD_ADDR_VAR 0 1
24137: PUSH
24138: DOUBLE
24139: LD_INT 1
24141: DEC
24142: ST_TO_ADDR
24143: LD_EXP 65
24147: PUSH
24148: FOR_TO
24149: IFFALSE 24194
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
24151: LD_EXP 65
24155: PUSH
24156: LD_VAR 0 1
24160: ARRAY
24161: PPUSH
24162: CALL_OW 258
24166: PUSH
24167: LD_INT 1
24169: EQUAL
24170: IFFALSE 24192
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
24172: LD_EXP 65
24176: PUSH
24177: LD_VAR 0 1
24181: ARRAY
24182: PPUSH
24183: LD_STRING D4-Sol1-1
24185: PPUSH
24186: CALL_OW 88
// break ;
24190: GO 24194
// end ;
24192: GO 24148
24194: POP
24195: POP
// Say ( Powell , D4-Pow-2 ) ;
24196: LD_EXP 17
24200: PPUSH
24201: LD_STRING D4-Pow-2
24203: PPUSH
24204: CALL_OW 88
// InGameOff ;
24208: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
24212: LD_INT 22
24214: PUSH
24215: LD_INT 4
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 21
24224: PUSH
24225: LD_INT 2
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 3
24234: PUSH
24235: LD_INT 58
24237: PUSH
24238: EMPTY
24239: LIST
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: LIST
24249: PPUSH
24250: CALL_OW 69
24254: PPUSH
24255: LD_INT 59
24257: PPUSH
24258: LD_INT 21
24260: PPUSH
24261: CALL_OW 114
// end ;
24265: PPOPN 1
24267: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
24268: LD_INT 7
24270: PPUSH
24271: LD_INT 22
24273: PUSH
24274: LD_INT 1
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 21
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PPUSH
24295: CALL_OW 70
24299: PUSH
24300: LD_INT 0
24302: GREATER
24303: PUSH
24304: LD_EXP 17
24308: PPUSH
24309: CALL_OW 302
24313: AND
24314: PUSH
24315: LD_EXP 70
24319: PUSH
24320: LD_INT 0
24322: EQUAL
24323: AND
24324: IFFALSE 24448
24326: GO 24328
24328: DISABLE
// begin InGameOn ;
24329: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24333: LD_INT 22
24335: PUSH
24336: LD_INT 1
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 21
24345: PUSH
24346: LD_INT 1
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PPUSH
24357: CALL_OW 69
24361: PPUSH
24362: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24366: LD_INT 7
24368: PPUSH
24369: LD_INT 22
24371: PUSH
24372: LD_INT 1
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 21
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PPUSH
24393: CALL_OW 70
24397: PPUSH
24398: LD_INT 70
24400: PPUSH
24401: LD_INT 104
24403: PPUSH
24404: CALL_OW 111
// if powellWarm = 0 then
24408: LD_EXP 70
24412: PUSH
24413: LD_INT 0
24415: EQUAL
24416: IFFALSE 24444
// begin Say ( Powell , DBack1-Pow-1 ) ;
24418: LD_EXP 17
24422: PPUSH
24423: LD_STRING DBack1-Pow-1
24425: PPUSH
24426: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24430: LD_ADDR_EXP 70
24434: PUSH
24435: LD_EXP 70
24439: PUSH
24440: LD_INT 1
24442: PLUS
24443: ST_TO_ADDR
// end ; InGameOff ;
24444: CALL_OW 9
// end ;
24448: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
24449: LD_INT 7
24451: PPUSH
24452: LD_INT 22
24454: PUSH
24455: LD_INT 1
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 21
24464: PUSH
24465: LD_INT 1
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PPUSH
24476: CALL_OW 70
24480: PUSH
24481: LD_INT 0
24483: GREATER
24484: PUSH
24485: LD_EXP 17
24489: PPUSH
24490: CALL_OW 302
24494: AND
24495: PUSH
24496: LD_EXP 70
24500: PUSH
24501: LD_INT 1
24503: EQUAL
24504: AND
24505: IFFALSE 24629
24507: GO 24509
24509: DISABLE
// begin InGameOn ;
24510: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24514: LD_INT 22
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 21
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PPUSH
24538: CALL_OW 69
24542: PPUSH
24543: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24547: LD_INT 7
24549: PPUSH
24550: LD_INT 22
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 21
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PPUSH
24574: CALL_OW 70
24578: PPUSH
24579: LD_INT 70
24581: PPUSH
24582: LD_INT 104
24584: PPUSH
24585: CALL_OW 111
// if powellWarm = 1 then
24589: LD_EXP 70
24593: PUSH
24594: LD_INT 1
24596: EQUAL
24597: IFFALSE 24625
// begin Say ( Powell , DBack2-Pow-1 ) ;
24599: LD_EXP 17
24603: PPUSH
24604: LD_STRING DBack2-Pow-1
24606: PPUSH
24607: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24611: LD_ADDR_EXP 70
24615: PUSH
24616: LD_EXP 70
24620: PUSH
24621: LD_INT 1
24623: PLUS
24624: ST_TO_ADDR
// end ; InGameOff ;
24625: CALL_OW 9
// end ;
24629: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
24630: LD_INT 7
24632: PPUSH
24633: LD_INT 22
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 21
24645: PUSH
24646: LD_INT 1
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PPUSH
24657: CALL_OW 70
24661: PUSH
24662: LD_INT 0
24664: GREATER
24665: PUSH
24666: LD_EXP 17
24670: PPUSH
24671: CALL_OW 302
24675: AND
24676: PUSH
24677: LD_EXP 70
24681: PUSH
24682: LD_INT 2
24684: EQUAL
24685: AND
24686: IFFALSE 24803
24688: GO 24690
24690: DISABLE
// begin InGameOn ;
24691: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24695: LD_INT 22
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 21
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PPUSH
24719: CALL_OW 69
24723: PPUSH
24724: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24728: LD_INT 7
24730: PPUSH
24731: LD_INT 22
24733: PUSH
24734: LD_INT 1
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 21
24743: PUSH
24744: LD_INT 1
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PPUSH
24755: CALL_OW 70
24759: PPUSH
24760: LD_INT 70
24762: PPUSH
24763: LD_INT 104
24765: PPUSH
24766: CALL_OW 111
// if powellWarm = 2 then
24770: LD_EXP 70
24774: PUSH
24775: LD_INT 2
24777: EQUAL
24778: IFFALSE 24799
// begin Say ( Powell , DBack3-Pow-1 ) ;
24780: LD_EXP 17
24784: PPUSH
24785: LD_STRING DBack3-Pow-1
24787: PPUSH
24788: CALL_OW 88
// YouLost ( Dismissed ) ;
24792: LD_STRING Dismissed
24794: PPUSH
24795: CALL_OW 104
// end ; InGameOff ;
24799: CALL_OW 9
// end ;
24803: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
24804: LD_INT 8
24806: PPUSH
24807: LD_INT 22
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 21
24819: PUSH
24820: LD_INT 1
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PPUSH
24831: CALL_OW 70
24835: PUSH
24836: LD_INT 0
24838: GREATER
24839: PUSH
24840: LD_EXP 17
24844: PPUSH
24845: CALL_OW 302
24849: AND
24850: PUSH
24851: LD_EXP 70
24855: PUSH
24856: LD_INT 0
24858: EQUAL
24859: AND
24860: IFFALSE 24984
24862: GO 24864
24864: DISABLE
// begin InGameOn ;
24865: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24869: LD_INT 22
24871: PUSH
24872: LD_INT 1
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 21
24881: PUSH
24882: LD_INT 1
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PPUSH
24893: CALL_OW 69
24897: PPUSH
24898: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
24902: LD_INT 8
24904: PPUSH
24905: LD_INT 22
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 21
24917: PUSH
24918: LD_INT 1
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PPUSH
24929: CALL_OW 70
24933: PPUSH
24934: LD_INT 71
24936: PPUSH
24937: LD_INT 63
24939: PPUSH
24940: CALL_OW 111
// if powellWarm = 0 then
24944: LD_EXP 70
24948: PUSH
24949: LD_INT 0
24951: EQUAL
24952: IFFALSE 24980
// begin Say ( Powell , DBack1-Pow-1 ) ;
24954: LD_EXP 17
24958: PPUSH
24959: LD_STRING DBack1-Pow-1
24961: PPUSH
24962: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24966: LD_ADDR_EXP 70
24970: PUSH
24971: LD_EXP 70
24975: PUSH
24976: LD_INT 1
24978: PLUS
24979: ST_TO_ADDR
// end ; InGameOff ;
24980: CALL_OW 9
// end ;
24984: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
24985: LD_INT 8
24987: PPUSH
24988: LD_INT 22
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 21
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PPUSH
25012: CALL_OW 70
25016: PUSH
25017: LD_INT 0
25019: GREATER
25020: PUSH
25021: LD_EXP 17
25025: PPUSH
25026: CALL_OW 302
25030: AND
25031: PUSH
25032: LD_EXP 70
25036: PUSH
25037: LD_INT 1
25039: EQUAL
25040: AND
25041: IFFALSE 25165
25043: GO 25045
25045: DISABLE
// begin InGameOn ;
25046: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25050: LD_INT 22
25052: PUSH
25053: LD_INT 1
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 21
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PPUSH
25074: CALL_OW 69
25078: PPUSH
25079: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25083: LD_INT 8
25085: PPUSH
25086: LD_INT 22
25088: PUSH
25089: LD_INT 1
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 21
25098: PUSH
25099: LD_INT 1
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PPUSH
25110: CALL_OW 70
25114: PPUSH
25115: LD_INT 71
25117: PPUSH
25118: LD_INT 63
25120: PPUSH
25121: CALL_OW 111
// if powellWarm = 1 then
25125: LD_EXP 70
25129: PUSH
25130: LD_INT 1
25132: EQUAL
25133: IFFALSE 25161
// begin Say ( Powell , DBack2-Pow-1 ) ;
25135: LD_EXP 17
25139: PPUSH
25140: LD_STRING DBack2-Pow-1
25142: PPUSH
25143: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25147: LD_ADDR_EXP 70
25151: PUSH
25152: LD_EXP 70
25156: PUSH
25157: LD_INT 1
25159: PLUS
25160: ST_TO_ADDR
// end ; InGameOff ;
25161: CALL_OW 9
// end ;
25165: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
25166: LD_INT 8
25168: PPUSH
25169: LD_INT 22
25171: PUSH
25172: LD_INT 1
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 21
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PPUSH
25193: CALL_OW 70
25197: PUSH
25198: LD_INT 0
25200: GREATER
25201: PUSH
25202: LD_EXP 17
25206: PPUSH
25207: CALL_OW 302
25211: AND
25212: PUSH
25213: LD_EXP 70
25217: PUSH
25218: LD_INT 2
25220: EQUAL
25221: AND
25222: IFFALSE 25339
25224: GO 25226
25226: DISABLE
// begin InGameOn ;
25227: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25231: LD_INT 22
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 21
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PPUSH
25255: CALL_OW 69
25259: PPUSH
25260: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25264: LD_INT 8
25266: PPUSH
25267: LD_INT 22
25269: PUSH
25270: LD_INT 1
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 21
25279: PUSH
25280: LD_INT 1
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PPUSH
25291: CALL_OW 70
25295: PPUSH
25296: LD_INT 71
25298: PPUSH
25299: LD_INT 63
25301: PPUSH
25302: CALL_OW 111
// if powellWarm = 2 then
25306: LD_EXP 70
25310: PUSH
25311: LD_INT 2
25313: EQUAL
25314: IFFALSE 25335
// begin Say ( Powell , DBack3-Pow-1 ) ;
25316: LD_EXP 17
25320: PPUSH
25321: LD_STRING DBack3-Pow-1
25323: PPUSH
25324: CALL_OW 88
// YouLost ( Dismissed ) ;
25328: LD_STRING Dismissed
25330: PPUSH
25331: CALL_OW 104
// end ; InGameOff ;
25335: CALL_OW 9
// end ;
25339: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
25340: LD_EXP 68
25344: PUSH
25345: LD_INT 1
25347: EQUAL
25348: IFFALSE 25397
25350: GO 25352
25352: DISABLE
25353: LD_INT 0
25355: PPUSH
// begin enable ;
25356: ENABLE
// for i = 1 to amUnitsAttack do
25357: LD_ADDR_VAR 0 1
25361: PUSH
25362: DOUBLE
25363: LD_INT 1
25365: DEC
25366: ST_TO_ADDR
25367: LD_EXP 65
25371: PUSH
25372: FOR_TO
25373: IFFALSE 25395
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
25375: LD_INT 8
25377: PPUSH
25378: LD_EXP 65
25382: PUSH
25383: LD_VAR 0 1
25387: ARRAY
25388: PPUSH
25389: CALL_OW 471
25393: GO 25372
25395: POP
25396: POP
// end ;
25397: PPOPN 1
25399: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
25400: LD_INT 22
25402: PUSH
25403: LD_INT 4
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 21
25412: PUSH
25413: LD_INT 2
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 3
25422: PUSH
25423: LD_INT 58
25425: PUSH
25426: EMPTY
25427: LIST
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: LIST
25437: PPUSH
25438: CALL_OW 69
25442: PUSH
25443: LD_INT 0
25445: EQUAL
25446: PUSH
25447: LD_EXP 68
25451: PUSH
25452: LD_INT 1
25454: EQUAL
25455: AND
25456: IFFALSE 25627
25458: GO 25460
25460: DISABLE
// begin powellAttacks = 2 ;
25461: LD_ADDR_EXP 68
25465: PUSH
25466: LD_INT 2
25468: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25469: LD_INT 85
25471: PPUSH
25472: LD_INT 3
25474: PPUSH
25475: LD_INT 3
25477: PPUSH
25478: LD_INT 1
25480: PPUSH
25481: LD_INT 5
25483: PUSH
25484: LD_INT 7
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 1
25493: PPUSH
25494: LD_INT 2
25496: PPUSH
25497: CALL_OW 12
25501: ARRAY
25502: PPUSH
25503: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25507: LD_INT 85
25509: PPUSH
25510: LD_INT 3
25512: PPUSH
25513: LD_INT 3
25515: PPUSH
25516: LD_INT 1
25518: PPUSH
25519: LD_INT 5
25521: PUSH
25522: LD_INT 7
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 1
25531: PPUSH
25532: LD_INT 2
25534: PPUSH
25535: CALL_OW 12
25539: ARRAY
25540: PPUSH
25541: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25545: LD_INT 85
25547: PPUSH
25548: LD_INT 3
25550: PPUSH
25551: LD_INT 3
25553: PPUSH
25554: LD_INT 1
25556: PPUSH
25557: LD_INT 5
25559: PUSH
25560: LD_INT 7
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: PPUSH
25570: LD_INT 2
25572: PPUSH
25573: CALL_OW 12
25577: ARRAY
25578: PPUSH
25579: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
25583: LD_INT 85
25585: PPUSH
25586: LD_INT 5
25588: PPUSH
25589: LD_INT 3
25591: PPUSH
25592: LD_INT 1
25594: PPUSH
25595: LD_INT 6
25597: PPUSH
25598: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
25602: LD_ADDR_EXP 72
25606: PUSH
25607: LD_INT 85
25609: PPUSH
25610: LD_INT 3
25612: PPUSH
25613: LD_INT 3
25615: PPUSH
25616: LD_INT 1
25618: PPUSH
25619: LD_INT 3
25621: PPUSH
25622: CALL_OW 185
25626: ST_TO_ADDR
// end ;
25627: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
25628: LD_INT 22
25630: PUSH
25631: LD_INT 4
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 21
25640: PUSH
25641: LD_INT 2
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 3
25650: PUSH
25651: LD_INT 58
25653: PUSH
25654: EMPTY
25655: LIST
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: LIST
25665: PPUSH
25666: CALL_OW 69
25670: PUSH
25671: LD_INT 5
25673: GREATEREQUAL
25674: PUSH
25675: LD_EXP 71
25679: PUSH
25680: LD_INT 1
25682: EQUAL
25683: AND
25684: IFFALSE 25697
25686: GO 25688
25688: DISABLE
// startAttacks = 0 ;
25689: LD_ADDR_EXP 71
25693: PUSH
25694: LD_INT 0
25696: ST_TO_ADDR
25697: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
25698: LD_INT 22
25700: PUSH
25701: LD_INT 4
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 21
25710: PUSH
25711: LD_INT 2
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 3
25720: PUSH
25721: LD_INT 58
25723: PUSH
25724: EMPTY
25725: LIST
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: LIST
25735: PPUSH
25736: CALL_OW 69
25740: PUSH
25741: LD_INT 5
25743: GREATEREQUAL
25744: PUSH
25745: LD_INT 22
25747: PUSH
25748: LD_INT 6
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 21
25757: PUSH
25758: LD_INT 2
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 24
25767: PUSH
25768: LD_INT 250
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: LIST
25779: PPUSH
25780: CALL_OW 69
25784: PUSH
25785: LD_INT 0
25787: EQUAL
25788: AND
25789: PUSH
25790: LD_EXP 71
25794: PUSH
25795: LD_INT 0
25797: EQUAL
25798: AND
25799: PUSH
25800: LD_EXP 68
25804: PUSH
25805: LD_INT 2
25807: EQUAL
25808: AND
25809: IFFALSE 26718
25811: GO 25813
25813: DISABLE
25814: LD_INT 0
25816: PPUSH
25817: PPUSH
25818: PPUSH
25819: PPUSH
// begin powellAttacks = 3 ;
25820: LD_ADDR_EXP 68
25824: PUSH
25825: LD_INT 3
25827: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
25828: LD_ADDR_VAR 0 1
25832: PUSH
25833: DOUBLE
25834: LD_INT 1
25836: DEC
25837: ST_TO_ADDR
25838: LD_EXP 65
25842: PUSH
25843: FOR_TO
25844: IFFALSE 25866
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
25846: LD_INT 8
25848: PPUSH
25849: LD_EXP 65
25853: PUSH
25854: LD_VAR 0 1
25858: ARRAY
25859: PPUSH
25860: CALL_OW 472
25864: GO 25843
25866: POP
25867: POP
// wait ( 0 0$5 ) ;
25868: LD_INT 175
25870: PPUSH
25871: CALL_OW 67
// Video ( true ) ;
25875: LD_INT 1
25877: PPUSH
25878: CALL 6861 0 1
// CenterNowOnUnits ( Powell ) ;
25882: LD_EXP 17
25886: PPUSH
25887: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
25891: LD_EXP 17
25895: PPUSH
25896: LD_INT 45
25898: PPUSH
25899: LD_INT 64
25901: PPUSH
25902: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
25906: LD_EXP 17
25910: PPUSH
25911: LD_INT 46
25913: PPUSH
25914: LD_INT 66
25916: PPUSH
25917: CALL_OW 178
// for i = 5 to 8 do
25921: LD_ADDR_VAR 0 1
25925: PUSH
25926: DOUBLE
25927: LD_INT 5
25929: DEC
25930: ST_TO_ADDR
25931: LD_INT 8
25933: PUSH
25934: FOR_TO
25935: IFFALSE 26081
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
25937: LD_EXP 65
25941: PUSH
25942: LD_VAR 0 1
25946: ARRAY
25947: PPUSH
25948: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
25952: LD_EXP 65
25956: PUSH
25957: LD_VAR 0 1
25961: ARRAY
25962: PPUSH
25963: CALL_OW 121
// wait ( 0 0$1 ) ;
25967: LD_INT 35
25969: PPUSH
25970: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
25974: LD_EXP 65
25978: PUSH
25979: LD_VAR 0 1
25983: ARRAY
25984: PPUSH
25985: LD_INT 92
25987: PPUSH
25988: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
25992: LD_EXP 65
25996: PUSH
25997: LD_VAR 0 1
26001: ARRAY
26002: PPUSH
26003: LD_INT 1
26005: PPUSH
26006: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
26010: LD_EXP 65
26014: PUSH
26015: LD_VAR 0 1
26019: ARRAY
26020: PPUSH
26021: CALL_OW 182
// wait ( 0 0$1 ) ;
26025: LD_INT 35
26027: PPUSH
26028: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 43 + i , 66 ) ;
26032: LD_EXP 65
26036: PUSH
26037: LD_VAR 0 1
26041: ARRAY
26042: PPUSH
26043: LD_INT 43
26045: PUSH
26046: LD_VAR 0 1
26050: PLUS
26051: PPUSH
26052: LD_INT 66
26054: PPUSH
26055: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
26059: LD_EXP 65
26063: PUSH
26064: LD_VAR 0 1
26068: ARRAY
26069: PPUSH
26070: LD_EXP 17
26074: PPUSH
26075: CALL_OW 179
// end ;
26079: GO 25934
26081: POP
26082: POP
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
26083: LD_ADDR_VAR 0 3
26087: PUSH
26088: LD_INT 22
26090: PUSH
26091: LD_INT 4
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 21
26100: PUSH
26101: LD_INT 1
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 56
26110: PUSH
26111: EMPTY
26112: LIST
26113: PUSH
26114: LD_INT 3
26116: PUSH
26117: LD_INT 60
26119: PUSH
26120: EMPTY
26121: LIST
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: PPUSH
26133: CALL_OW 69
26137: PUSH
26138: LD_EXP 17
26142: PUSH
26143: EMPTY
26144: LIST
26145: DIFF
26146: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
26147: LD_VAR 0 3
26151: PPUSH
26152: LD_INT 92
26154: PPUSH
26155: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
26159: LD_VAR 0 3
26163: PPUSH
26164: LD_INT 1
26166: PPUSH
26167: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
26171: LD_EXP 17
26175: PPUSH
26176: LD_STRING D5-Pow-1
26178: PPUSH
26179: CALL_OW 88
// for i = 1 to amUnitsAttack do
26183: LD_ADDR_VAR 0 1
26187: PUSH
26188: DOUBLE
26189: LD_INT 1
26191: DEC
26192: ST_TO_ADDR
26193: LD_EXP 65
26197: PUSH
26198: FOR_TO
26199: IFFALSE 26244
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
26201: LD_EXP 65
26205: PUSH
26206: LD_VAR 0 1
26210: ARRAY
26211: PPUSH
26212: CALL_OW 258
26216: PUSH
26217: LD_INT 1
26219: EQUAL
26220: IFFALSE 26242
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
26222: LD_EXP 65
26226: PUSH
26227: LD_VAR 0 1
26231: ARRAY
26232: PPUSH
26233: LD_STRING D5-Sol2-1
26235: PPUSH
26236: CALL_OW 88
// break ;
26240: GO 26244
// end ;
26242: GO 26198
26244: POP
26245: POP
// Say ( Powell , D5-Pow-2 ) ;
26246: LD_EXP 17
26250: PPUSH
26251: LD_STRING D5-Pow-2
26253: PPUSH
26254: CALL_OW 88
// for i = 1 to amUnitsAttack do
26258: LD_ADDR_VAR 0 1
26262: PUSH
26263: DOUBLE
26264: LD_INT 1
26266: DEC
26267: ST_TO_ADDR
26268: LD_EXP 65
26272: PUSH
26273: FOR_TO
26274: IFFALSE 26319
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
26276: LD_EXP 65
26280: PUSH
26281: LD_VAR 0 1
26285: ARRAY
26286: PPUSH
26287: CALL_OW 258
26291: PUSH
26292: LD_INT 1
26294: EQUAL
26295: IFFALSE 26317
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
26297: LD_EXP 65
26301: PUSH
26302: LD_VAR 0 1
26306: ARRAY
26307: PPUSH
26308: LD_STRING D5-Sol2-2
26310: PPUSH
26311: CALL_OW 88
// break ;
26315: GO 26319
// end ;
26317: GO 26273
26319: POP
26320: POP
// Say ( Powell , D5-Pow-3 ) ;
26321: LD_EXP 17
26325: PPUSH
26326: LD_STRING D5-Pow-3
26328: PPUSH
26329: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
26333: LD_INT 22
26335: PUSH
26336: LD_INT 4
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 21
26345: PUSH
26346: LD_INT 2
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 3
26355: PUSH
26356: LD_INT 58
26358: PUSH
26359: EMPTY
26360: LIST
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: LIST
26370: PPUSH
26371: CALL_OW 69
26375: PPUSH
26376: LD_INT 59
26378: PPUSH
26379: LD_INT 21
26381: PPUSH
26382: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
26386: LD_EXP 65
26390: PPUSH
26391: LD_INT 59
26393: PPUSH
26394: LD_INT 21
26396: PPUSH
26397: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
26401: LD_INT 61
26403: PPUSH
26404: LD_INT 35
26406: PPUSH
26407: CALL_OW 84
// wait ( 0 0$15 ) ;
26411: LD_INT 525
26413: PPUSH
26414: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
26418: LD_EXP 17
26422: PPUSH
26423: LD_STRING D5a-Pow-1
26425: PPUSH
26426: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
26430: LD_EXP 17
26434: PPUSH
26435: LD_STRING D5a-Pow-1a
26437: PPUSH
26438: CALL_OW 88
// wait ( 0 0$2 ) ;
26442: LD_INT 70
26444: PPUSH
26445: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
26449: LD_EXP 17
26453: PPUSH
26454: LD_STRING D5a-Pow-1b
26456: PPUSH
26457: CALL_OW 88
// wait ( 0 0$3 ) ;
26461: LD_INT 105
26463: PPUSH
26464: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
26468: LD_EXP 17
26472: PPUSH
26473: LD_STRING D5a-Pow-1c
26475: PPUSH
26476: CALL_OW 88
// wait ( 0 0$1 ) ;
26480: LD_INT 35
26482: PPUSH
26483: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
26487: LD_EXP 17
26491: PPUSH
26492: LD_STRING D5a-Pow-1d
26494: PPUSH
26495: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
26499: LD_INT 35
26501: PPUSH
26502: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
26506: LD_INT 22
26508: PUSH
26509: LD_INT 4
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 21
26518: PUSH
26519: LD_INT 2
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 3
26528: PUSH
26529: LD_INT 58
26531: PUSH
26532: EMPTY
26533: LIST
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: LIST
26543: PPUSH
26544: CALL_OW 69
26548: PPUSH
26549: LD_INT 59
26551: PPUSH
26552: LD_INT 21
26554: PPUSH
26555: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
26559: LD_EXP 65
26563: PPUSH
26564: LD_INT 59
26566: PPUSH
26567: LD_INT 21
26569: PPUSH
26570: CALL_OW 114
// until amUnitsAttack = [ ] ;
26574: LD_EXP 65
26578: PUSH
26579: EMPTY
26580: EQUAL
26581: IFFALSE 26499
// CenterNowOnUnits ( Powell ) ;
26583: LD_EXP 17
26587: PPUSH
26588: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
26592: LD_ADDR_VAR 0 3
26596: PUSH
26597: LD_INT 22
26599: PUSH
26600: LD_INT 4
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 21
26609: PUSH
26610: LD_INT 1
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PPUSH
26621: CALL_OW 69
26625: PUSH
26626: LD_EXP 17
26630: PUSH
26631: EMPTY
26632: LIST
26633: DIFF
26634: ST_TO_ADDR
// for i in powellPeople do
26635: LD_ADDR_VAR 0 1
26639: PUSH
26640: LD_VAR 0 3
26644: PUSH
26645: FOR_IN
26646: IFFALSE 26675
// if GetSex ( i ) = sex_male then
26648: LD_VAR 0 1
26652: PPUSH
26653: CALL_OW 258
26657: PUSH
26658: LD_INT 1
26660: EQUAL
26661: IFFALSE 26673
// sold = i ;
26663: LD_ADDR_VAR 0 2
26667: PUSH
26668: LD_VAR 0 1
26672: ST_TO_ADDR
26673: GO 26645
26675: POP
26676: POP
// Say ( sold , D6-Sol3-1 ) ;
26677: LD_VAR 0 2
26681: PPUSH
26682: LD_STRING D6-Sol3-1
26684: PPUSH
26685: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
26689: LD_EXP 17
26693: PPUSH
26694: LD_STRING D6-Pow-1
26696: PPUSH
26697: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
26701: LD_INT 139
26703: PUSH
26704: LD_INT 138
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PPUSH
26711: LD_INT 12
26713: PPUSH
26714: CALL_OW 113
// end ;
26718: PPOPN 4
26720: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
26721: LD_EXP 68
26725: PUSH
26726: LD_INT 3
26728: EQUAL
26729: PUSH
26730: LD_INT 12
26732: PPUSH
26733: LD_INT 22
26735: PUSH
26736: LD_INT 8
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 21
26745: PUSH
26746: LD_INT 2
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PPUSH
26757: CALL_OW 70
26761: PUSH
26762: LD_INT 2
26764: EQUAL
26765: AND
26766: IFFALSE 26927
26768: GO 26770
26770: DISABLE
26771: LD_INT 0
26773: PPUSH
26774: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
26775: LD_INT 8
26777: PPUSH
26778: LD_INT 1
26780: PPUSH
26781: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
26785: LD_INT 4
26787: PPUSH
26788: LD_INT 8
26790: PPUSH
26791: LD_INT 1
26793: PPUSH
26794: LD_INT 1
26796: PPUSH
26797: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
26801: LD_ADDR_VAR 0 1
26805: PUSH
26806: LD_INT 92
26808: PPUSH
26809: CALL_OW 313
26813: PUSH
26814: FOR_IN
26815: IFFALSE 26846
// if GetSex ( i ) = sex_male then
26817: LD_VAR 0 1
26821: PPUSH
26822: CALL_OW 258
26826: PUSH
26827: LD_INT 1
26829: EQUAL
26830: IFFALSE 26844
// begin tmp = i ;
26832: LD_ADDR_VAR 0 2
26836: PUSH
26837: LD_VAR 0 1
26841: ST_TO_ADDR
// break ;
26842: GO 26846
// end ;
26844: GO 26814
26846: POP
26847: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
26848: LD_INT 92
26850: PPUSH
26851: CALL_OW 313
26855: PPUSH
26856: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
26860: LD_VAR 0 2
26864: PPUSH
26865: LD_STRING D6-Sol3-2
26867: PPUSH
26868: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
26872: LD_INT 139
26874: PUSH
26875: LD_INT 138
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PPUSH
26882: LD_INT 85
26884: PPUSH
26885: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
26889: LD_INT 4
26891: PPUSH
26892: LD_INT 8
26894: PPUSH
26895: LD_INT 2
26897: PPUSH
26898: LD_INT 1
26900: PPUSH
26901: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
26905: LD_INT 8
26907: PPUSH
26908: LD_INT 8
26910: PPUSH
26911: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
26915: LD_EXP 17
26919: PPUSH
26920: LD_STRING D6-Pow-2
26922: PPUSH
26923: CALL_OW 88
// end ;
26927: PPOPN 2
26929: END
// every 0 0$1 trigger IsDead ( AmFact ) do var i , tmp ;
26930: LD_INT 85
26932: PPUSH
26933: CALL_OW 301
26937: IFFALSE 27229
26939: GO 26941
26941: DISABLE
26942: LD_INT 0
26944: PPUSH
26945: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
26946: LD_ADDR_VAR 0 1
26950: PUSH
26951: LD_INT 22
26953: PUSH
26954: LD_INT 4
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 21
26963: PUSH
26964: LD_INT 1
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 56
26973: PUSH
26974: EMPTY
26975: LIST
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: LIST
26981: PPUSH
26982: CALL_OW 69
26986: PUSH
26987: LD_EXP 17
26991: PUSH
26992: EMPTY
26993: LIST
26994: DIFF
26995: PUSH
26996: FOR_IN
26997: IFFALSE 27028
// if GetSex ( i ) = sex_male then
26999: LD_VAR 0 1
27003: PPUSH
27004: CALL_OW 258
27008: PUSH
27009: LD_INT 1
27011: EQUAL
27012: IFFALSE 27026
// begin tmp = i ;
27014: LD_ADDR_VAR 0 2
27018: PUSH
27019: LD_VAR 0 1
27023: ST_TO_ADDR
// break ;
27024: GO 27028
// end ;
27026: GO 26996
27028: POP
27029: POP
// Say ( Powell , D6a-Pow-1 ) ;
27030: LD_EXP 17
27034: PPUSH
27035: LD_STRING D6a-Pow-1
27037: PPUSH
27038: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
27042: LD_VAR 0 2
27046: PPUSH
27047: LD_STRING D6a-Sol3-1
27049: PPUSH
27050: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
27054: LD_EXP 17
27058: PPUSH
27059: LD_VAR 0 2
27063: PPUSH
27064: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
27068: LD_EXP 17
27072: PPUSH
27073: LD_STRING D6a-Pow-2
27075: PPUSH
27076: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
27080: LD_VAR 0 2
27084: PPUSH
27085: LD_STRING D6a-Sol3-2
27087: PPUSH
27088: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
27092: LD_EXP 17
27096: PPUSH
27097: LD_STRING D6a-Pow-3
27099: PPUSH
27100: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
27104: LD_EXP 17
27108: PPUSH
27109: LD_EXP 72
27113: PPUSH
27114: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
27118: LD_INT 35
27120: PPUSH
27121: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
27125: LD_EXP 17
27129: PPUSH
27130: LD_EXP 72
27134: PPUSH
27135: CALL_OW 120
// until IsInUnit ( Powell ) ;
27139: LD_EXP 17
27143: PPUSH
27144: CALL_OW 310
27148: IFFALSE 27118
// wait ( 0 0$1 ) ;
27150: LD_INT 35
27152: PPUSH
27153: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
27157: LD_EXP 72
27161: PPUSH
27162: LD_INT 77
27164: PPUSH
27165: LD_INT 64
27167: PPUSH
27168: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
27172: LD_EXP 72
27176: PPUSH
27177: LD_INT 91
27179: PPUSH
27180: LD_INT 61
27182: PPUSH
27183: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
27187: LD_EXP 72
27191: PPUSH
27192: LD_INT 74
27194: PPUSH
27195: LD_INT 25
27197: PPUSH
27198: CALL_OW 171
// centerPowell = 1 ;
27202: LD_ADDR_EXP 73
27206: PUSH
27207: LD_INT 1
27209: ST_TO_ADDR
// wait ( 0 0$15 ) ;
27210: LD_INT 525
27212: PPUSH
27213: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
27217: LD_EXP 17
27221: PPUSH
27222: LD_STRING D6b-Pow-1
27224: PPUSH
27225: CALL_OW 88
// end ;
27229: PPOPN 2
27231: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
27232: LD_EXP 72
27236: PPUSH
27237: LD_INT 13
27239: PPUSH
27240: CALL_OW 308
27244: PUSH
27245: LD_EXP 68
27249: PUSH
27250: LD_INT 3
27252: EQUAL
27253: AND
27254: IFFALSE 27396
27256: GO 27258
27258: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
27259: LD_EXP 72
27263: PPUSH
27264: LD_INT 250
27266: PPUSH
27267: CALL_OW 234
// DialogueOn ;
27271: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
27275: LD_EXP 17
27279: PPUSH
27280: LD_STRING D6b-Pow-1a
27282: PPUSH
27283: CALL_OW 88
// DialogueOff ;
27287: CALL_OW 7
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
27291: LD_EXP 17
27295: PPUSH
27296: LD_INT 22
27298: PUSH
27299: LD_INT 8
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 34
27308: PUSH
27309: LD_INT 29
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 50
27318: PUSH
27319: EMPTY
27320: LIST
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: LIST
27326: PPUSH
27327: CALL_OW 69
27331: PUSH
27332: LD_INT 1
27334: ARRAY
27335: PPUSH
27336: CALL_OW 120
// wait ( 0 0$1 ) ;
27340: LD_INT 35
27342: PPUSH
27343: CALL_OW 67
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
27347: LD_EXP 17
27351: PPUSH
27352: LD_INT 22
27354: PUSH
27355: LD_INT 8
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 34
27364: PUSH
27365: LD_INT 29
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 50
27374: PUSH
27375: EMPTY
27376: LIST
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: LIST
27382: PPUSH
27383: CALL_OW 69
27387: PUSH
27388: LD_INT 1
27390: ARRAY
27391: PPUSH
27392: CALL_OW 120
// end ;
27396: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
27397: LD_INT 22
27399: PUSH
27400: LD_INT 4
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 34
27409: PUSH
27410: LD_INT 29
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PPUSH
27421: CALL_OW 69
27425: IFFALSE 27857
27427: GO 27429
27429: DISABLE
// begin powBomb = FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) [ 1 ] ;
27430: LD_ADDR_EXP 74
27434: PUSH
27435: LD_INT 22
27437: PUSH
27438: LD_INT 4
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 34
27447: PUSH
27448: LD_INT 29
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PPUSH
27459: CALL_OW 69
27463: PUSH
27464: LD_INT 1
27466: ARRAY
27467: ST_TO_ADDR
// SetAttitude ( 8 , 4 , att_friend , true ) ;
27468: LD_INT 8
27470: PPUSH
27471: LD_INT 4
27473: PPUSH
27474: LD_INT 1
27476: PPUSH
27477: LD_INT 1
27479: PPUSH
27480: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
27484: LD_EXP 74
27488: PPUSH
27489: LD_INT 80
27491: PPUSH
27492: LD_INT 19
27494: PPUSH
27495: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
27499: LD_EXP 74
27503: PPUSH
27504: LD_INT 74
27506: PPUSH
27507: LD_INT 15
27509: PPUSH
27510: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
27514: LD_EXP 74
27518: PPUSH
27519: LD_INT 72
27521: PPUSH
27522: LD_INT 19
27524: PPUSH
27525: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
27529: LD_EXP 74
27533: PPUSH
27534: LD_INT 78
27536: PPUSH
27537: LD_INT 24
27539: PPUSH
27540: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
27544: LD_EXP 74
27548: PPUSH
27549: LD_INT 77
27551: PPUSH
27552: LD_INT 20
27554: PPUSH
27555: CALL_OW 171
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
27559: LD_EXP 74
27563: PPUSH
27564: LD_INT 74
27566: PPUSH
27567: LD_INT 15
27569: PPUSH
27570: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
27574: LD_EXP 74
27578: PPUSH
27579: LD_INT 72
27581: PPUSH
27582: LD_INT 19
27584: PPUSH
27585: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
27589: LD_EXP 74
27593: PPUSH
27594: LD_INT 78
27596: PPUSH
27597: LD_INT 24
27599: PPUSH
27600: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
27604: LD_EXP 74
27608: PPUSH
27609: LD_INT 77
27611: PPUSH
27612: LD_INT 20
27614: PPUSH
27615: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
27619: LD_EXP 74
27623: PPUSH
27624: LD_INT 78
27626: PPUSH
27627: LD_INT 15
27629: PPUSH
27630: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
27634: LD_EXP 17
27638: PPUSH
27639: LD_STRING D6b-Pow-1b
27641: PPUSH
27642: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
27646: LD_INT 22
27648: PUSH
27649: LD_INT 8
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 21
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 25
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 26
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: PPUSH
27692: CALL_OW 69
27696: PUSH
27697: LD_INT 1
27699: ARRAY
27700: PPUSH
27701: LD_STRING D6b-ArSol1-1
27703: PPUSH
27704: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D6b-ArSol2-1 ) ;
27708: LD_INT 22
27710: PUSH
27711: LD_INT 8
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 21
27720: PUSH
27721: LD_INT 1
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 25
27730: PUSH
27731: LD_INT 1
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 26
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: PPUSH
27754: CALL_OW 69
27758: PUSH
27759: LD_INT 2
27761: ARRAY
27762: PPUSH
27763: LD_STRING D6b-ArSol2-1
27765: PPUSH
27766: CALL_OW 88
// Say ( Powell , D6b-Pow-2 ) ;
27770: LD_EXP 17
27774: PPUSH
27775: LD_STRING D6b-Pow-2
27777: PPUSH
27778: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
27782: LD_INT 35
27784: PPUSH
27785: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 2 ;
27789: LD_EXP 74
27793: PPUSH
27794: LD_INT 78
27796: PPUSH
27797: LD_INT 15
27799: PPUSH
27800: CALL_OW 297
27804: PUSH
27805: LD_INT 2
27807: LESS
27808: IFFALSE 27782
// wait ( 0 0$1 ) ;
27810: LD_INT 35
27812: PPUSH
27813: CALL_OW 67
// DialogueOn ;
27817: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
27821: LD_EXP 17
27825: PPUSH
27826: LD_STRING D6b-Pow-2a
27828: PPUSH
27829: CALL_OW 88
// DialogueOff ;
27833: CALL_OW 7
// centerPowell = 0 ;
27837: LD_ADDR_EXP 73
27841: PUSH
27842: LD_INT 0
27844: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
27845: LD_EXP 74
27849: PPUSH
27850: LD_INT 105
27852: PPUSH
27853: CALL_OW 115
// end ;
27857: END
// every 0 0$3 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
27858: LD_INT 105
27860: PPUSH
27861: CALL_OW 301
27865: PUSH
27866: LD_EXP 68
27870: PUSH
27871: LD_INT 3
27873: EQUAL
27874: AND
27875: IFFALSE 28709
27877: GO 27879
27879: DISABLE
27880: LD_INT 0
27882: PPUSH
27883: PPUSH
27884: PPUSH
27885: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
27886: LD_ADDR_VAR 0 2
27890: PUSH
27891: LD_INT 22
27893: PUSH
27894: LD_INT 4
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 21
27903: PUSH
27904: LD_INT 1
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 26
27913: PUSH
27914: LD_INT 1
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: PPUSH
27926: CALL_OW 69
27930: PUSH
27931: LD_EXP 1
27935: PUSH
27936: LD_EXP 3
27940: PUSH
27941: LD_EXP 21
27945: PUSH
27946: LD_EXP 22
27950: PUSH
27951: LD_EXP 23
27955: PUSH
27956: LD_EXP 4
27960: PUSH
27961: LD_EXP 5
27965: PUSH
27966: LD_EXP 6
27970: PUSH
27971: LD_EXP 7
27975: PUSH
27976: LD_EXP 8
27980: PUSH
27981: LD_EXP 9
27985: PUSH
27986: LD_EXP 10
27990: PUSH
27991: LD_EXP 11
27995: PUSH
27996: LD_EXP 12
28000: PUSH
28001: LD_EXP 13
28005: PUSH
28006: LD_EXP 14
28010: PUSH
28011: LD_EXP 15
28015: PUSH
28016: LD_EXP 17
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: DIFF
28041: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
28042: LD_INT 49
28044: PPUSH
28045: LD_INT 66
28047: PPUSH
28048: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
28052: LD_VAR 0 2
28056: PUSH
28057: LD_INT 1
28059: ARRAY
28060: PPUSH
28061: LD_STRING D6c-Sol3-1
28063: PPUSH
28064: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
28068: LD_EXP 1
28072: PPUSH
28073: LD_STRING D6c-JMM-1
28075: PPUSH
28076: CALL_OW 88
// if IsOk ( Cyrus ) then
28080: LD_EXP 7
28084: PPUSH
28085: CALL_OW 302
28089: IFFALSE 28103
// Say ( Cyrus , D6c-Cyrus-1 ) ;
28091: LD_EXP 7
28095: PPUSH
28096: LD_STRING D6c-Cyrus-1
28098: PPUSH
28099: CALL_OW 88
// if IsOk ( Bobby ) then
28103: LD_EXP 6
28107: PPUSH
28108: CALL_OW 302
28112: IFFALSE 28126
// Say ( Bobby , D6c-Bobby-1 ) ;
28114: LD_EXP 6
28118: PPUSH
28119: LD_STRING D6c-Bobby-1
28121: PPUSH
28122: CALL_OW 88
// if IsOk ( Cornel ) then
28126: LD_EXP 12
28130: PPUSH
28131: CALL_OW 302
28135: IFFALSE 28149
// Say ( Cornel , D6c-Corn-1 ) ;
28137: LD_EXP 12
28141: PPUSH
28142: LD_STRING D6c-Corn-1
28144: PPUSH
28145: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
28149: LD_VAR 0 2
28153: PUSH
28154: LD_INT 2
28156: ARRAY
28157: PPUSH
28158: LD_STRING D6c-Sol1-1
28160: PPUSH
28161: CALL_OW 88
// if IsOk ( Lisa ) then
28165: LD_EXP 4
28169: PPUSH
28170: CALL_OW 302
28174: IFFALSE 28188
// Say ( Lisa , D6c-Lisa-1 ) ;
28176: LD_EXP 4
28180: PPUSH
28181: LD_STRING D6c-Lisa-1
28183: PPUSH
28184: CALL_OW 88
// if IsOk ( Gary ) then
28188: LD_EXP 13
28192: PPUSH
28193: CALL_OW 302
28197: IFFALSE 28211
// Say ( Gary , D6c-Gary-1 ) ;
28199: LD_EXP 13
28203: PPUSH
28204: LD_STRING D6c-Gary-1
28206: PPUSH
28207: CALL_OW 88
// if IsOK ( Donaldson ) then
28211: LD_EXP 5
28215: PPUSH
28216: CALL_OW 302
28220: IFFALSE 28234
// Say ( Donaldson , D6c-Don-1 ) ;
28222: LD_EXP 5
28226: PPUSH
28227: LD_STRING D6c-Don-1
28229: PPUSH
28230: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
28234: LD_VAR 0 2
28238: PUSH
28239: LD_INT 3
28241: ARRAY
28242: PPUSH
28243: LD_STRING D6c-Sol2-1
28245: PPUSH
28246: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
28250: LD_INT 22
28252: PUSH
28253: LD_INT 1
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 21
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PPUSH
28274: CALL_OW 69
28278: PPUSH
28279: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
28283: LD_INT 22
28285: PUSH
28286: LD_INT 4
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 21
28295: PUSH
28296: LD_INT 1
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PPUSH
28307: CALL_OW 69
28311: PPUSH
28312: CALL_OW 122
// wait ( 0 0$1 ) ;
28316: LD_INT 35
28318: PPUSH
28319: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
28323: LD_ADDR_VAR 0 3
28327: PUSH
28328: LD_INT 22
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 21
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PPUSH
28352: CALL_OW 69
28356: PUSH
28357: LD_EXP 1
28361: PUSH
28362: EMPTY
28363: LIST
28364: DIFF
28365: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
28366: LD_ADDR_VAR 0 4
28370: PUSH
28371: LD_INT 22
28373: PUSH
28374: LD_INT 4
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 21
28383: PUSH
28384: LD_INT 1
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PPUSH
28395: CALL_OW 69
28399: ST_TO_ADDR
// for i := 1 to tmp2 do
28400: LD_ADDR_VAR 0 1
28404: PUSH
28405: DOUBLE
28406: LD_INT 1
28408: DEC
28409: ST_TO_ADDR
28410: LD_VAR 0 4
28414: PUSH
28415: FOR_TO
28416: IFFALSE 28467
// begin ComMoveXY ( tmp2 [ i ] , 43 + i , 64 ) ;
28418: LD_VAR 0 4
28422: PUSH
28423: LD_VAR 0 1
28427: ARRAY
28428: PPUSH
28429: LD_INT 43
28431: PUSH
28432: LD_VAR 0 1
28436: PLUS
28437: PPUSH
28438: LD_INT 64
28440: PPUSH
28441: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
28445: LD_VAR 0 4
28449: PUSH
28450: LD_VAR 0 1
28454: ARRAY
28455: PPUSH
28456: LD_EXP 1
28460: PPUSH
28461: CALL_OW 179
// end ;
28465: GO 28415
28467: POP
28468: POP
// for i := 1 to tmp1 do
28469: LD_ADDR_VAR 0 1
28473: PUSH
28474: DOUBLE
28475: LD_INT 1
28477: DEC
28478: ST_TO_ADDR
28479: LD_VAR 0 3
28483: PUSH
28484: FOR_TO
28485: IFFALSE 28536
// begin ComMoveXY ( tmp1 [ i ] , 43 + i , 65 ) ;
28487: LD_VAR 0 3
28491: PUSH
28492: LD_VAR 0 1
28496: ARRAY
28497: PPUSH
28498: LD_INT 43
28500: PUSH
28501: LD_VAR 0 1
28505: PLUS
28506: PPUSH
28507: LD_INT 65
28509: PPUSH
28510: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
28514: LD_VAR 0 3
28518: PUSH
28519: LD_VAR 0 1
28523: ARRAY
28524: PPUSH
28525: LD_EXP 1
28529: PPUSH
28530: CALL_OW 179
// end ;
28534: GO 28484
28536: POP
28537: POP
// repeat wait ( 0 0$1 ) ;
28538: LD_INT 35
28540: PPUSH
28541: CALL_OW 67
// ComMoveXY ( JMM , 48 , 68 ) ;
28545: LD_EXP 1
28549: PPUSH
28550: LD_INT 48
28552: PPUSH
28553: LD_INT 68
28555: PPUSH
28556: CALL_OW 111
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
28560: LD_EXP 1
28564: PPUSH
28565: LD_INT 48
28567: PPUSH
28568: LD_INT 68
28570: PPUSH
28571: CALL_OW 297
28575: PUSH
28576: LD_INT 2
28578: LESS
28579: IFFALSE 28538
// AddComTurnXY ( JMM , 47 , 65 ) ;
28581: LD_EXP 1
28585: PPUSH
28586: LD_INT 47
28588: PPUSH
28589: LD_INT 65
28591: PPUSH
28592: CALL_OW 178
// wait ( 0 0$2 ) ;
28596: LD_INT 70
28598: PPUSH
28599: CALL_OW 67
// Say ( tmp [ 1 ] , D6c-Sol3-2 ) ;
28603: LD_VAR 0 2
28607: PUSH
28608: LD_INT 1
28610: ARRAY
28611: PPUSH
28612: LD_STRING D6c-Sol3-2
28614: PPUSH
28615: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
28619: LD_EXP 1
28623: PPUSH
28624: LD_STRING D6c-JMM-2
28626: PPUSH
28627: CALL_OW 88
// Video ( false ) ;
28631: LD_INT 0
28633: PPUSH
28634: CALL 6861 0 1
// centerPowell = 0 ;
28638: LD_ADDR_EXP 73
28642: PUSH
28643: LD_INT 0
28645: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
28646: LD_INT 22
28648: PUSH
28649: LD_INT 4
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PPUSH
28656: CALL_OW 69
28660: PPUSH
28661: LD_INT 1
28663: PPUSH
28664: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
28668: LD_STRING M2
28670: PPUSH
28671: CALL_OW 337
// ChangeSideFog ( 4 , 4 ) ;
28675: LD_INT 4
28677: PPUSH
28678: LD_INT 4
28680: PPUSH
28681: CALL_OW 343
// timerStatus = 1 ;
28685: LD_ADDR_EXP 95
28689: PUSH
28690: LD_INT 1
28692: ST_TO_ADDR
// missionStage = 1 ;
28693: LD_ADDR_EXP 100
28697: PUSH
28698: LD_INT 1
28700: ST_TO_ADDR
// startAttacks = 1 ;
28701: LD_ADDR_EXP 71
28705: PUSH
28706: LD_INT 1
28708: ST_TO_ADDR
// end ;
28709: PPOPN 4
28711: END
// every 0 0$1 trigger centerPowell = 1 do
28712: LD_EXP 73
28716: PUSH
28717: LD_INT 1
28719: EQUAL
28720: IFFALSE 29003
28722: GO 28724
28724: DISABLE
// begin enable ;
28725: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
28726: LD_EXP 17
28730: PUSH
28731: LD_EXP 74
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PPUSH
28740: LD_INT 1000
28742: PPUSH
28743: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
28747: LD_INT 22
28749: PUSH
28750: LD_INT 4
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 34
28759: PUSH
28760: LD_INT 29
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 33
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: LIST
28781: PPUSH
28782: CALL_OW 69
28786: PUSH
28787: LD_INT 0
28789: GREATER
28790: IFFALSE 28843
// SetLives ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
28792: LD_INT 22
28794: PUSH
28795: LD_INT 4
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 34
28804: PUSH
28805: LD_INT 29
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 33
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: LIST
28826: PPUSH
28827: CALL_OW 69
28831: PUSH
28832: LD_INT 1
28834: ARRAY
28835: PPUSH
28836: LD_INT 1000
28838: PPUSH
28839: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
28843: LD_INT 22
28845: PUSH
28846: LD_INT 8
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 34
28855: PUSH
28856: LD_INT 29
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 33
28865: PUSH
28866: LD_INT 1
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: LIST
28877: PPUSH
28878: CALL_OW 69
28882: PUSH
28883: LD_INT 0
28885: GREATER
28886: IFFALSE 28939
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
28888: LD_INT 22
28890: PUSH
28891: LD_INT 8
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 34
28900: PUSH
28901: LD_INT 29
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 33
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: LIST
28922: PPUSH
28923: CALL_OW 69
28927: PUSH
28928: LD_INT 1
28930: ARRAY
28931: PPUSH
28932: LD_INT 1000
28934: PPUSH
28935: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
28939: LD_EXP 72
28943: PPUSH
28944: LD_INT 13
28946: PPUSH
28947: CALL_OW 308
28951: NOT
28952: IFFALSE 28966
// SetLives ( powellVeh , 1000 ) ;
28954: LD_EXP 72
28958: PPUSH
28959: LD_INT 1000
28961: PPUSH
28962: CALL_OW 234
// if not IsInUnit ( Powell ) then
28966: LD_EXP 17
28970: PPUSH
28971: CALL_OW 310
28975: NOT
28976: IFFALSE 28989
// CenterNowOnUnits ( Powell ) else
28978: LD_EXP 17
28982: PPUSH
28983: CALL_OW 87
28987: GO 29003
// CenterNowOnUnits ( IsInUnit ( Powell ) ) ;
28989: LD_EXP 17
28993: PPUSH
28994: CALL_OW 310
28998: PPUSH
28999: CALL_OW 87
// end ;
29003: END
// every 0 0$1 trigger timeAction >= 0 0$16 do
29004: LD_EXP 96
29008: PUSH
29009: LD_INT 560
29011: GREATEREQUAL
29012: IFFALSE 29224
29014: GO 29016
29016: DISABLE
// begin DialogueOn ;
29017: CALL_OW 6
// SayRadio ( LegionFriend , D7-Friend-1 ) ;
29021: LD_EXP 52
29025: PPUSH
29026: LD_STRING D7-Friend-1
29028: PPUSH
29029: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
29033: LD_EXP 1
29037: PPUSH
29038: LD_STRING D7-JMM-1
29040: PPUSH
29041: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-2 ) ;
29045: LD_EXP 52
29049: PPUSH
29050: LD_STRING D7-Friend-2
29052: PPUSH
29053: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
29057: LD_EXP 1
29061: PPUSH
29062: LD_STRING D7-JMM-2
29064: PPUSH
29065: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-3 ) ;
29069: LD_EXP 52
29073: PPUSH
29074: LD_STRING D7-Friend-3
29076: PPUSH
29077: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
29081: LD_EXP 1
29085: PPUSH
29086: LD_STRING D7-JMM-3
29088: PPUSH
29089: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-4 ) ;
29093: LD_EXP 52
29097: PPUSH
29098: LD_STRING D7-Friend-4
29100: PPUSH
29101: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
29105: LD_EXP 1
29109: PPUSH
29110: LD_STRING D7-JMM-4
29112: PPUSH
29113: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-5 ) ;
29117: LD_EXP 52
29121: PPUSH
29122: LD_STRING D7-Friend-5
29124: PPUSH
29125: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
29129: LD_EXP 1
29133: PPUSH
29134: LD_STRING D7-JMM-5
29136: PPUSH
29137: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-6 ) ;
29141: LD_EXP 52
29145: PPUSH
29146: LD_STRING D7-Friend-6
29148: PPUSH
29149: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
29153: LD_EXP 1
29157: PPUSH
29158: LD_STRING D7-JMM-6
29160: PPUSH
29161: CALL_OW 88
// DialogueOff ;
29165: CALL_OW 7
// PlaceUnitArea ( Kozlov , KozlovSpawn , false ) ;
29169: LD_EXP 35
29173: PPUSH
29174: LD_INT 15
29176: PPUSH
29177: LD_INT 0
29179: PPUSH
29180: CALL_OW 49
// SetClass ( Kozlov , 2 ) ;
29184: LD_EXP 35
29188: PPUSH
29189: LD_INT 2
29191: PPUSH
29192: CALL_OW 336
// ComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
29196: LD_EXP 35
29200: PPUSH
29201: LD_INT 2
29203: PPUSH
29204: LD_INT 78
29206: PPUSH
29207: LD_INT 12
29209: PPUSH
29210: LD_INT 3
29212: PPUSH
29213: CALL_OW 145
// ChangeMissionObjectives ( Mlegion ) ;
29217: LD_STRING Mlegion
29219: PPUSH
29220: CALL_OW 337
// end ;
29224: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 6 , 5 , 4 ] [ Difficulty ] do
29225: LD_INT 22
29227: PUSH
29228: LD_INT 8
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 21
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 23
29247: PUSH
29248: LD_INT 2
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: LIST
29259: PPUSH
29260: CALL_OW 69
29264: PUSH
29265: LD_INT 6
29267: PUSH
29268: LD_INT 5
29270: PUSH
29271: LD_INT 4
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: LIST
29278: PUSH
29279: LD_OWVAR 67
29283: ARRAY
29284: LESSEQUAL
29285: IFFALSE 29599
29287: GO 29289
29289: DISABLE
// begin PlaceUnitArea ( Kurt , KurtSpawn , false ) ;
29290: LD_EXP 30
29294: PPUSH
29295: LD_INT 19
29297: PPUSH
29298: LD_INT 0
29300: PPUSH
29301: CALL_OW 49
// KillUnit ( Kozlov ) ;
29305: LD_EXP 35
29309: PPUSH
29310: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
29314: LD_INT 22
29316: PUSH
29317: LD_INT 8
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 21
29326: PUSH
29327: LD_INT 3
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 23
29336: PUSH
29337: LD_INT 3
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 30
29346: PUSH
29347: LD_INT 3
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: PPUSH
29360: CALL_OW 69
29364: PUSH
29365: LD_INT 1
29367: ARRAY
29368: PPUSH
29369: CALL_OW 66
// DialogueOn ;
29373: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
29377: LD_EXP 1
29381: PPUSH
29382: LD_STRING D13-JMM-1
29384: PPUSH
29385: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
29389: LD_EXP 30
29393: PPUSH
29394: LD_STRING D13-Kurt-1
29396: PPUSH
29397: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
29401: LD_EXP 1
29405: PPUSH
29406: LD_STRING D13-JMM-2
29408: PPUSH
29409: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
29413: LD_EXP 30
29417: PPUSH
29418: LD_STRING D13-Kurt-2a
29420: PPUSH
29421: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
29425: LD_EXP 1
29429: PPUSH
29430: LD_STRING D13-JMM-3
29432: PPUSH
29433: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
29437: LD_EXP 30
29441: PPUSH
29442: LD_STRING D13-Kurt-3
29444: PPUSH
29445: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
29449: LD_EXP 1
29453: PPUSH
29454: LD_STRING D13-JMM-4
29456: PPUSH
29457: CALL_OW 88
// DialogueOff ;
29461: CALL_OW 7
// SetSide ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] ] ) , 1 ) ;
29465: LD_INT 22
29467: PUSH
29468: LD_INT 8
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 50
29477: PUSH
29478: EMPTY
29479: LIST
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PPUSH
29485: CALL_OW 69
29489: PPUSH
29490: LD_INT 1
29492: PPUSH
29493: CALL_OW 235
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_lives , 250 ] ] ] ) , 0 ) ;
29497: LD_INT 22
29499: PUSH
29500: LD_INT 8
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 3
29509: PUSH
29510: LD_INT 24
29512: PUSH
29513: LD_INT 250
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PPUSH
29528: CALL_OW 69
29532: PPUSH
29533: LD_INT 0
29535: PPUSH
29536: CALL_OW 234
// ChangeMissionObjectives ( MlegionOut ) ;
29540: LD_STRING MlegionOut
29542: PPUSH
29543: CALL_OW 337
// SetAttitude ( 8 , 1 , att_friend , true ) ;
29547: LD_INT 8
29549: PPUSH
29550: LD_INT 1
29552: PPUSH
29553: LD_INT 1
29555: PPUSH
29556: LD_INT 1
29558: PPUSH
29559: CALL_OW 80
// PlaceUnitArea ( LegionFriend , LegFriendSpawn , false ) ;
29563: LD_EXP 52
29567: PPUSH
29568: LD_INT 30
29570: PPUSH
29571: LD_INT 0
29573: PPUSH
29574: CALL_OW 49
// wait ( 0 0$1 ) ;
29578: LD_INT 35
29580: PPUSH
29581: CALL_OW 67
// ComMoveUnit ( LegionFriend , JMM ) ;
29585: LD_EXP 52
29589: PPUSH
29590: LD_EXP 1
29594: PPUSH
29595: CALL_OW 112
// end ;
29599: END
// every 0 0$1 trigger See ( 1 , LegionFriend ) do var dec ;
29600: LD_INT 1
29602: PPUSH
29603: LD_EXP 52
29607: PPUSH
29608: CALL_OW 292
29612: IFFALSE 29888
29614: GO 29616
29616: DISABLE
29617: LD_INT 0
29619: PPUSH
// begin CenterNowOnUnits ( LegionFriend ) ;
29620: LD_EXP 52
29624: PPUSH
29625: CALL_OW 87
// DialogueOn ;
29629: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
29633: LD_EXP 1
29637: PPUSH
29638: LD_STRING D14-JMM-1
29640: PPUSH
29641: CALL_OW 88
// Say ( LegionFriend , D14-Friend-1 ) ;
29645: LD_EXP 52
29649: PPUSH
29650: LD_STRING D14-Friend-1
29652: PPUSH
29653: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
29657: LD_EXP 1
29661: PPUSH
29662: LD_STRING D14-JMM-2
29664: PPUSH
29665: CALL_OW 88
// Say ( LegionFriend , D14-Friend-2 ) ;
29669: LD_EXP 52
29673: PPUSH
29674: LD_STRING D14-Friend-2
29676: PPUSH
29677: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
29681: LD_EXP 1
29685: PPUSH
29686: LD_STRING D14-JMM-3
29688: PPUSH
29689: CALL_OW 88
// Say ( LegionFriend , D14-Friend-3 ) ;
29693: LD_EXP 52
29697: PPUSH
29698: LD_STRING D14-Friend-3
29700: PPUSH
29701: CALL_OW 88
// DialogueOff ;
29705: CALL_OW 7
// dec = Query ( Q14 ) ;
29709: LD_ADDR_VAR 0 1
29713: PUSH
29714: LD_STRING Q14
29716: PPUSH
29717: CALL_OW 97
29721: ST_TO_ADDR
// if dec = 1 then
29722: LD_VAR 0 1
29726: PUSH
29727: LD_INT 1
29729: EQUAL
29730: IFFALSE 29764
// begin DialogueOn ;
29732: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
29736: LD_EXP 1
29740: PPUSH
29741: LD_STRING D14a-JMM-1
29743: PPUSH
29744: CALL_OW 88
// DialogueOff ;
29748: CALL_OW 7
// SetSide ( LegionFriend , 1 ) ;
29752: LD_EXP 52
29756: PPUSH
29757: LD_INT 1
29759: PPUSH
29760: CALL_OW 235
// end ; if dec = 2 then
29764: LD_VAR 0 1
29768: PUSH
29769: LD_INT 2
29771: EQUAL
29772: IFFALSE 29806
// begin DialogueOn ;
29774: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
29778: LD_EXP 1
29782: PPUSH
29783: LD_STRING D14b-JMM-1
29785: PPUSH
29786: CALL_OW 88
// DialogueOff ;
29790: CALL_OW 7
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
29794: LD_EXP 52
29798: PPUSH
29799: LD_INT 18
29801: PPUSH
29802: CALL_OW 113
// end ; if dec = 3 then
29806: LD_VAR 0 1
29810: PUSH
29811: LD_INT 3
29813: EQUAL
29814: IFFALSE 29888
// begin DialogueOn ;
29816: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
29820: LD_EXP 1
29824: PPUSH
29825: LD_STRING D14c-JMM-1
29827: PPUSH
29828: CALL_OW 88
// Say ( LegionFriend , D14c-Friend-1 ) ;
29832: LD_EXP 52
29836: PPUSH
29837: LD_STRING D14c-Friend-1
29839: PPUSH
29840: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
29844: LD_EXP 1
29848: PPUSH
29849: LD_STRING D14c-JMM-2
29851: PPUSH
29852: CALL_OW 88
// DialogueOff ;
29856: CALL_OW 7
// SetAttitude ( 8 , 1 , att_enemy , true ) ;
29860: LD_INT 8
29862: PPUSH
29863: LD_INT 1
29865: PPUSH
29866: LD_INT 2
29868: PPUSH
29869: LD_INT 1
29871: PPUSH
29872: CALL_OW 80
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
29876: LD_EXP 52
29880: PPUSH
29881: LD_INT 18
29883: PPUSH
29884: CALL_OW 113
// end ; end ;
29888: PPOPN 1
29890: END
// every 0 0$1 trigger IsInArea ( LegionFriend , FriendEscapeArea ) and GetSide ( LegionFriend ) = 8 do
29891: LD_EXP 52
29895: PPUSH
29896: LD_INT 18
29898: PPUSH
29899: CALL_OW 308
29903: PUSH
29904: LD_EXP 52
29908: PPUSH
29909: CALL_OW 255
29913: PUSH
29914: LD_INT 8
29916: EQUAL
29917: AND
29918: IFFALSE 29932
29920: GO 29922
29922: DISABLE
// RemoveUnit ( LegionFriend ) ;
29923: LD_EXP 52
29927: PPUSH
29928: CALL_OW 64
29932: END
// every 0 0$1 trigger timeAction >= 15 15$02 do
29933: LD_EXP 96
29937: PUSH
29938: LD_INT 31570
29940: GREATEREQUAL
29941: IFFALSE 30017
29943: GO 29945
29945: DISABLE
// begin if KappaStatus = 1 and JMMGirlVeh = [ ] then
29946: LD_EXP 80
29950: PUSH
29951: LD_INT 1
29953: EQUAL
29954: PUSH
29955: LD_EXP 78
29959: PUSH
29960: EMPTY
29961: EQUAL
29962: AND
29963: IFFALSE 29969
// PrepareSupportFromKappa ;
29965: CALL 2400 0 0
// if KappaStatus = 0 and JMMGirlStatus = 1 then
29969: LD_EXP 80
29973: PUSH
29974: LD_INT 0
29976: EQUAL
29977: PUSH
29978: LD_EXP 81
29982: PUSH
29983: LD_INT 1
29985: EQUAL
29986: AND
29987: IFFALSE 29993
// PrepareAttackFromKappa ;
29989: CALL 5245 0 0
// if KappaStatus = 0 and JMMGirlStatus = 0 then
29993: LD_EXP 80
29997: PUSH
29998: LD_INT 0
30000: EQUAL
30001: PUSH
30002: LD_EXP 81
30006: PUSH
30007: LD_INT 0
30009: EQUAL
30010: AND
30011: IFFALSE 30017
// PrepareAttackFromKappa ;
30013: CALL 5245 0 0
// end ;
30017: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
30018: LD_INT 1
30020: PPUSH
30021: LD_EXP 34
30025: PPUSH
30026: CALL_OW 292
30030: IFFALSE 30298
30032: GO 30034
30034: DISABLE
// begin missionStage = 2 ;
30035: LD_ADDR_EXP 100
30039: PUSH
30040: LD_INT 2
30042: ST_TO_ADDR
// CenterNowOnUnits ( sewiVeh ) ;
30043: LD_EXP 34
30047: PPUSH
30048: CALL_OW 87
// DialogueOn ;
30052: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
30056: LD_EXP 1
30060: PPUSH
30061: LD_STRING D10nB-JMM-1
30063: PPUSH
30064: CALL_OW 88
// if BurlakStatus = 1 then
30068: LD_EXP 75
30072: PUSH
30073: LD_INT 1
30075: EQUAL
30076: IFFALSE 30090
// Say ( Vsevolod , D10nB-Vse-1a ) ;
30078: LD_EXP 33
30082: PPUSH
30083: LD_STRING D10nB-Vse-1a
30085: PPUSH
30086: CALL_OW 88
// if BurlakStatus = 0 then
30090: LD_EXP 75
30094: PUSH
30095: LD_INT 0
30097: EQUAL
30098: IFFALSE 30112
// Say ( Vsevolod , D10nB-Vse-1 ) ;
30100: LD_EXP 33
30104: PPUSH
30105: LD_STRING D10nB-Vse-1
30107: PPUSH
30108: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
30112: LD_EXP 1
30116: PPUSH
30117: LD_STRING D10nB-JMM-2
30119: PPUSH
30120: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 1 then
30124: LD_EXP 80
30128: PUSH
30129: LD_EXP 81
30133: PUSH
30134: LD_INT 1
30136: EQUAL
30137: AND
30138: IFFALSE 30152
// Say ( Vsevolod , D10nB-Vse-5 ) ;
30140: LD_EXP 33
30144: PPUSH
30145: LD_STRING D10nB-Vse-5
30147: PPUSH
30148: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 0 then
30152: LD_EXP 80
30156: PUSH
30157: LD_EXP 81
30161: PUSH
30162: LD_INT 0
30164: EQUAL
30165: AND
30166: IFFALSE 30294
// begin if JMMGirl = 1 then
30168: LD_EXP 79
30172: PUSH
30173: LD_INT 1
30175: EQUAL
30176: IFFALSE 30226
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
30178: LD_EXP 33
30182: PPUSH
30183: LD_STRING D10nB-Vse-2
30185: PPUSH
30186: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
30190: LD_EXP 1
30194: PPUSH
30195: LD_STRING D10nB-JMM-3
30197: PPUSH
30198: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
30202: LD_EXP 33
30206: PPUSH
30207: LD_STRING D10nB-Vse-3
30209: PPUSH
30210: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
30214: LD_EXP 1
30218: PPUSH
30219: LD_STRING D10nB-JMM-4
30221: PPUSH
30222: CALL_OW 88
// end ; if JMMGirl = 2 then
30226: LD_EXP 79
30230: PUSH
30231: LD_INT 2
30233: EQUAL
30234: IFFALSE 30260
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
30236: LD_EXP 33
30240: PPUSH
30241: LD_STRING D10nB-Vse-4
30243: PPUSH
30244: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
30248: LD_EXP 1
30252: PPUSH
30253: LD_STRING D10nB-JMM-5
30255: PPUSH
30256: CALL_OW 88
// end ; if JMMGirl = 3 then
30260: LD_EXP 79
30264: PUSH
30265: LD_INT 3
30267: EQUAL
30268: IFFALSE 30294
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
30270: LD_EXP 33
30274: PPUSH
30275: LD_STRING D10nB-Vse-5
30277: PPUSH
30278: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
30282: LD_EXP 1
30286: PPUSH
30287: LD_STRING D10nB-JMM-6
30289: PPUSH
30290: CALL_OW 88
// end ; end ; DialogueOff ;
30294: CALL_OW 7
// end ;
30298: END
// every 0 0$1 trigger timeAction >= 30 30$02 do
30299: LD_EXP 96
30303: PUSH
30304: LD_INT 63070
30306: GREATEREQUAL
30307: IFFALSE 30585
30309: GO 30311
30311: DISABLE
// begin PrepareOmegaTeam ;
30312: CALL 2789 0 0
// missionStage = 3 ;
30316: LD_ADDR_EXP 100
30320: PUSH
30321: LD_INT 3
30323: ST_TO_ADDR
// DialogueOn ;
30324: CALL_OW 6
// if StevensStatus = 1 then
30328: LD_EXP 76
30332: PUSH
30333: LD_INT 1
30335: EQUAL
30336: IFFALSE 30448
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
30338: LD_EXP 3
30342: PPUSH
30343: CALL_OW 310
30347: PPUSH
30348: CALL_OW 87
// Say ( Stevens , D8-Huck-1 ) ;
30352: LD_EXP 3
30356: PPUSH
30357: LD_STRING D8-Huck-1
30359: PPUSH
30360: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
30364: LD_EXP 1
30368: PPUSH
30369: LD_STRING D8-JMM-1
30371: PPUSH
30372: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
30376: LD_EXP 3
30380: PPUSH
30381: LD_STRING D8-Huck-2
30383: PPUSH
30384: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
30388: LD_EXP 1
30392: PPUSH
30393: LD_STRING D8-JMM-2
30395: PPUSH
30396: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
30400: LD_EXP 3
30404: PPUSH
30405: LD_STRING D8-Huck-3
30407: PPUSH
30408: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
30412: LD_EXP 1
30416: PPUSH
30417: LD_STRING D8-JMM-3
30419: PPUSH
30420: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
30424: LD_EXP 3
30428: PPUSH
30429: LD_STRING D8-Huck-4
30431: PPUSH
30432: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
30436: LD_EXP 1
30440: PPUSH
30441: LD_STRING D8-JMM-4
30443: PPUSH
30444: CALL_OW 88
// end ; if StevensStatus = 0 then
30448: LD_EXP 76
30452: PUSH
30453: LD_INT 0
30455: EQUAL
30456: IFFALSE 30568
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
30458: LD_EXP 21
30462: PPUSH
30463: CALL_OW 310
30467: PPUSH
30468: CALL_OW 87
// Say ( Baker , D8-Huck-1 ) ;
30472: LD_EXP 21
30476: PPUSH
30477: LD_STRING D8-Huck-1
30479: PPUSH
30480: CALL_OW 88
// Say ( JMM , D8-JMM-1a ) ;
30484: LD_EXP 1
30488: PPUSH
30489: LD_STRING D8-JMM-1a
30491: PPUSH
30492: CALL_OW 88
// Say ( Baker , D8-Huck-2 ) ;
30496: LD_EXP 21
30500: PPUSH
30501: LD_STRING D8-Huck-2
30503: PPUSH
30504: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
30508: LD_EXP 1
30512: PPUSH
30513: LD_STRING D8-JMM-2
30515: PPUSH
30516: CALL_OW 88
// Say ( Baker , D8-Huck-3 ) ;
30520: LD_EXP 21
30524: PPUSH
30525: LD_STRING D8-Huck-3
30527: PPUSH
30528: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
30532: LD_EXP 1
30536: PPUSH
30537: LD_STRING D8-JMM-3
30539: PPUSH
30540: CALL_OW 88
// Say ( Baker , D8-Huck-4 ) ;
30544: LD_EXP 21
30548: PPUSH
30549: LD_STRING D8-Huck-4
30551: PPUSH
30552: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
30556: LD_EXP 1
30560: PPUSH
30561: LD_STRING D8-JMM-4
30563: PPUSH
30564: CALL_OW 88
// end ; DialogueOff ;
30568: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
30572: LD_INT 25
30574: PPUSH
30575: LD_INT 1
30577: PPUSH
30578: LD_INT 1
30580: PPUSH
30581: CALL_OW 322
// end ;
30585: END
// every 0 0$1 trigger timeAction >= 35 35$02 do var dec ;
30586: LD_EXP 96
30590: PUSH
30591: LD_INT 73570
30593: GREATEREQUAL
30594: IFFALSE 30944
30596: GO 30598
30598: DISABLE
30599: LD_INT 0
30601: PPUSH
// begin missionStage = 4 ;
30602: LD_ADDR_EXP 100
30606: PUSH
30607: LD_INT 4
30609: ST_TO_ADDR
// DialogueOn ;
30610: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
30614: LD_EXP 28
30618: PPUSH
30619: LD_STRING D9-Roth-1
30621: PPUSH
30622: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
30626: LD_EXP 1
30630: PPUSH
30631: LD_STRING D9-JMM-1
30633: PPUSH
30634: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
30638: LD_EXP 28
30642: PPUSH
30643: LD_STRING D9-Roth-2
30645: PPUSH
30646: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
30650: LD_EXP 28
30654: PPUSH
30655: LD_STRING D9-Roth-2a
30657: PPUSH
30658: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
30662: LD_EXP 26
30666: PPUSH
30667: LD_STRING D9-Pla-2
30669: PPUSH
30670: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
30674: LD_EXP 28
30678: PPUSH
30679: LD_STRING D9-Roth-3
30681: PPUSH
30682: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
30686: LD_EXP 26
30690: PPUSH
30691: LD_STRING D9-Pla-3
30693: PPUSH
30694: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
30698: LD_EXP 28
30702: PPUSH
30703: LD_STRING D9-Roth-4
30705: PPUSH
30706: CALL_OW 94
// dec = Query ( Q9 ) ;
30710: LD_ADDR_VAR 0 1
30714: PUSH
30715: LD_STRING Q9
30717: PPUSH
30718: CALL_OW 97
30722: ST_TO_ADDR
// if dec = 1 then
30723: LD_VAR 0 1
30727: PUSH
30728: LD_INT 1
30730: EQUAL
30731: IFFALSE 30745
// SayRadio ( Roth , D9a-Roth-1 ) ;
30733: LD_EXP 28
30737: PPUSH
30738: LD_STRING D9a-Roth-1
30740: PPUSH
30741: CALL_OW 94
// if dec = 2 then
30745: LD_VAR 0 1
30749: PUSH
30750: LD_INT 2
30752: EQUAL
30753: IFFALSE 30779
// begin Say ( JMM , D9b-JMM-1 ) ;
30755: LD_EXP 1
30759: PPUSH
30760: LD_STRING D9b-JMM-1
30762: PPUSH
30763: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
30767: LD_EXP 28
30771: PPUSH
30772: LD_STRING D9b-Roth-1
30774: PPUSH
30775: CALL_OW 94
// end ; if dec = 3 then
30779: LD_VAR 0 1
30783: PUSH
30784: LD_INT 3
30786: EQUAL
30787: IFFALSE 30849
// begin Say ( JMM , D9c-JMM-1 ) ;
30789: LD_EXP 1
30793: PPUSH
30794: LD_STRING D9c-JMM-1
30796: PPUSH
30797: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
30801: LD_EXP 28
30805: PPUSH
30806: LD_STRING D9c-Roth-1
30808: PPUSH
30809: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
30813: LD_EXP 1
30817: PPUSH
30818: LD_STRING D9c-JMM-2
30820: PPUSH
30821: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
30825: LD_EXP 28
30829: PPUSH
30830: LD_STRING D9c-Roth-2
30832: PPUSH
30833: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
30837: LD_EXP 1
30841: PPUSH
30842: LD_STRING D9c-JMM-3
30844: PPUSH
30845: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
30849: LD_EXP 28
30853: PPUSH
30854: LD_STRING D9c-Roth-3
30856: PPUSH
30857: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
30861: LD_EXP 28
30865: PPUSH
30866: LD_STRING D9cont-Roth-1
30868: PPUSH
30869: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
30873: LD_EXP 1
30877: PPUSH
30878: LD_STRING D9cont-JMM-1
30880: PPUSH
30881: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
30885: LD_EXP 28
30889: PPUSH
30890: LD_STRING D9cont-Roth-2
30892: PPUSH
30893: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
30897: LD_EXP 1
30901: PPUSH
30902: LD_STRING D9cont-JMM-2
30904: PPUSH
30905: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
30909: LD_EXP 28
30913: PPUSH
30914: LD_STRING D9cont-Roth-3
30916: PPUSH
30917: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
30921: LD_EXP 1
30925: PPUSH
30926: LD_STRING D9cont-JMM-3
30928: PPUSH
30929: CALL_OW 88
// DialogueOff ;
30933: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
30937: LD_STRING M3
30939: PPUSH
30940: CALL_OW 337
// end ;
30944: PPOPN 1
30946: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= [ 20 , 18 , 15 ] [ Difficulty ] do var i , tmp ;
30947: LD_INT 22
30949: PUSH
30950: LD_INT 7
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 21
30959: PUSH
30960: LD_INT 1
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PPUSH
30971: CALL_OW 69
30975: PUSH
30976: LD_INT 20
30978: PUSH
30979: LD_INT 18
30981: PUSH
30982: LD_INT 15
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: LIST
30989: PUSH
30990: LD_OWVAR 67
30994: ARRAY
30995: LESSEQUAL
30996: IFFALSE 31482
30998: GO 31000
31000: DISABLE
31001: LD_INT 0
31003: PPUSH
31004: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_lives , 900 ] ] ) do
31005: LD_ADDR_VAR 0 1
31009: PUSH
31010: LD_INT 22
31012: PUSH
31013: LD_INT 7
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 21
31022: PUSH
31023: LD_INT 1
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 23
31032: PUSH
31033: LD_INT 3
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 24
31042: PUSH
31043: LD_INT 900
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: PPUSH
31056: CALL_OW 69
31060: PUSH
31061: FOR_IN
31062: IFFALSE 31093
// if GetSex ( i ) = sex_male then
31064: LD_VAR 0 1
31068: PPUSH
31069: CALL_OW 258
31073: PUSH
31074: LD_INT 1
31076: EQUAL
31077: IFFALSE 31091
// begin tmp = i ;
31079: LD_ADDR_VAR 0 2
31083: PUSH
31084: LD_VAR 0 1
31088: ST_TO_ADDR
// break ;
31089: GO 31093
// end ;
31091: GO 31061
31093: POP
31094: POP
// if tmp = 0 then
31095: LD_VAR 0 2
31099: PUSH
31100: LD_INT 0
31102: EQUAL
31103: IFFALSE 31157
// begin uc_side = 7 ;
31105: LD_ADDR_OWVAR 20
31109: PUSH
31110: LD_INT 7
31112: ST_TO_ADDR
// uc_nation = 3 ;
31113: LD_ADDR_OWVAR 21
31117: PUSH
31118: LD_INT 3
31120: ST_TO_ADDR
// hc_name =  ;
31121: LD_ADDR_OWVAR 26
31125: PUSH
31126: LD_STRING 
31128: ST_TO_ADDR
// hc_gallery =  ;
31129: LD_ADDR_OWVAR 33
31133: PUSH
31134: LD_STRING 
31136: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
31137: LD_INT 1
31139: PPUSH
31140: LD_INT 10
31142: PPUSH
31143: CALL_OW 381
// tmp = CreateHuman ;
31147: LD_ADDR_VAR 0 2
31151: PUSH
31152: CALL_OW 44
31156: ST_TO_ADDR
// end ; AllianceAI = 0 ;
31157: LD_ADDR_EXP 84
31161: PUSH
31162: LD_INT 0
31164: ST_TO_ADDR
// AllianceEscape = 1 ;
31165: LD_ADDR_EXP 90
31169: PUSH
31170: LD_INT 1
31172: ST_TO_ADDR
// SetAttitude ( 7 , 1 , att_friend , true ) ;
31173: LD_INT 7
31175: PPUSH
31176: LD_INT 1
31178: PPUSH
31179: LD_INT 1
31181: PPUSH
31182: LD_INT 1
31184: PPUSH
31185: CALL_OW 80
// DialogueOn ;
31189: CALL_OW 6
// if IsOK ( Roth ) then
31193: LD_EXP 28
31197: PPUSH
31198: CALL_OW 302
31202: IFFALSE 31216
// Say ( JMM , DAb-JMM-1 ) ;
31204: LD_EXP 1
31208: PPUSH
31209: LD_STRING DAb-JMM-1
31211: PPUSH
31212: CALL_OW 88
// if IsOK ( Roth ) then
31216: LD_EXP 28
31220: PPUSH
31221: CALL_OW 302
31225: IFFALSE 31241
// Say ( Roth , D16_SurrenderAlliance-Roth-1 ) else
31227: LD_EXP 28
31231: PPUSH
31232: LD_STRING D16_SurrenderAlliance-Roth-1
31234: PPUSH
31235: CALL_OW 88
31239: GO 31253
// Say ( tmp , D16_SurrenderAlliance-Sci1-1 ) ;
31241: LD_VAR 0 2
31245: PPUSH
31246: LD_STRING D16_SurrenderAlliance-Sci1-1
31248: PPUSH
31249: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) = 1 then
31253: LD_INT 23
31255: PPUSH
31256: LD_INT 22
31258: PUSH
31259: LD_INT 4
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PPUSH
31266: CALL_OW 70
31270: PUSH
31271: LD_INT 1
31273: EQUAL
31274: IFFALSE 31288
// Say ( JMM , DAb-JMM-1a ) ;
31276: LD_EXP 1
31280: PPUSH
31281: LD_STRING DAb-JMM-1a
31283: PPUSH
31284: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 1 then
31288: LD_INT 23
31290: PPUSH
31291: LD_INT 22
31293: PUSH
31294: LD_INT 4
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PPUSH
31301: CALL_OW 70
31305: PUSH
31306: LD_INT 1
31308: GREATER
31309: IFFALSE 31323
// Say ( JMM , DAb-JMM-1b ) ;
31311: LD_EXP 1
31315: PPUSH
31316: LD_STRING DAb-JMM-1b
31318: PPUSH
31319: CALL_OW 88
// DialogueOff ;
31323: CALL_OW 7
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 0 then
31327: LD_INT 23
31329: PPUSH
31330: LD_INT 22
31332: PUSH
31333: LD_INT 4
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PPUSH
31340: CALL_OW 70
31344: PUSH
31345: LD_INT 0
31347: GREATER
31348: IFFALSE 31375
// SetSide ( FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) , 1 ) ;
31350: LD_INT 23
31352: PPUSH
31353: LD_INT 22
31355: PUSH
31356: LD_INT 4
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PPUSH
31363: CALL_OW 70
31367: PPUSH
31368: LD_INT 1
31370: PPUSH
31371: CALL_OW 235
// if IsDying ( Roth ) then
31375: LD_EXP 28
31379: PPUSH
31380: CALL_OW 303
31384: IFFALSE 31406
// begin RothStatus = 0 ;
31386: LD_ADDR_EXP 91
31390: PUSH
31391: LD_INT 0
31393: ST_TO_ADDR
// SetLives ( Roth , 0 ) ;
31394: LD_EXP 28
31398: PPUSH
31399: LD_INT 0
31401: PPUSH
31402: CALL_OW 234
// end ; ComExitBuilding ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ) ;
31406: LD_INT 22
31408: PUSH
31409: LD_INT 7
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 21
31418: PUSH
31419: LD_INT 1
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PPUSH
31430: CALL_OW 69
31434: PPUSH
31435: CALL_OW 122
// wait ( 0 0$1 ) ;
31439: LD_INT 35
31441: PPUSH
31442: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) , AllianceEscapeArea ) ;
31446: LD_INT 22
31448: PUSH
31449: LD_INT 7
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 21
31458: PUSH
31459: LD_INT 1
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PPUSH
31470: CALL_OW 69
31474: PPUSH
31475: LD_INT 28
31477: PPUSH
31478: CALL_OW 113
// end ;
31482: PPOPN 2
31484: END
// every 0 0$1 trigger AllianceEscape = 1 and FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do var i ;
31485: LD_EXP 90
31489: PUSH
31490: LD_INT 1
31492: EQUAL
31493: PUSH
31494: LD_INT 28
31496: PPUSH
31497: LD_INT 22
31499: PUSH
31500: LD_INT 7
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 21
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PPUSH
31521: CALL_OW 70
31525: AND
31526: IFFALSE 31588
31528: GO 31530
31530: DISABLE
31531: LD_INT 0
31533: PPUSH
// begin enable ;
31534: ENABLE
// for i in FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
31535: LD_ADDR_VAR 0 1
31539: PUSH
31540: LD_INT 28
31542: PPUSH
31543: LD_INT 22
31545: PUSH
31546: LD_INT 7
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 21
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PPUSH
31567: CALL_OW 70
31571: PUSH
31572: FOR_IN
31573: IFFALSE 31586
// RemoveUnit ( i ) ;
31575: LD_VAR 0 1
31579: PPUSH
31580: CALL_OW 64
31584: GO 31572
31586: POP
31587: POP
// end ;
31588: PPOPN 1
31590: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_control , 1 ] ] ] ) > 0 and IsOK ( Roth ) and AllianceAI = 1 do var tpUnit , heroes , rnd ;
31591: LD_INT 33
31593: PPUSH
31594: LD_INT 22
31596: PUSH
31597: LD_INT 1
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 2
31606: PUSH
31607: LD_INT 21
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 33
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PPUSH
31636: CALL_OW 70
31640: PUSH
31641: LD_INT 0
31643: GREATER
31644: PUSH
31645: LD_EXP 28
31649: PPUSH
31650: CALL_OW 302
31654: AND
31655: PUSH
31656: LD_EXP 84
31660: PUSH
31661: LD_INT 1
31663: EQUAL
31664: AND
31665: IFFALSE 34035
31667: GO 31669
31669: DISABLE
31670: LD_INT 0
31672: PPUSH
31673: PPUSH
31674: PPUSH
// begin tpUnit = FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_control , 1 ] ] ] ) [ 1 ] ;
31675: LD_ADDR_VAR 0 1
31679: PUSH
31680: LD_INT 33
31682: PPUSH
31683: LD_INT 22
31685: PUSH
31686: LD_INT 1
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 2
31695: PUSH
31696: LD_INT 21
31698: PUSH
31699: LD_INT 1
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 33
31708: PUSH
31709: LD_INT 1
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: LIST
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PPUSH
31725: CALL_OW 70
31729: PUSH
31730: LD_INT 1
31732: ARRAY
31733: ST_TO_ADDR
// heroes = [ JMM , Joan , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
31734: LD_ADDR_VAR 0 2
31738: PUSH
31739: LD_EXP 1
31743: PUSH
31744: LD_EXP 2
31748: PUSH
31749: LD_EXP 3
31753: PUSH
31754: LD_EXP 21
31758: PUSH
31759: LD_EXP 4
31763: PUSH
31764: LD_EXP 5
31768: PUSH
31769: LD_EXP 6
31773: PUSH
31774: LD_EXP 7
31778: PUSH
31779: LD_EXP 8
31783: PUSH
31784: LD_EXP 9
31788: PUSH
31789: LD_EXP 10
31793: PUSH
31794: LD_EXP 11
31798: PUSH
31799: LD_EXP 12
31803: PUSH
31804: LD_EXP 13
31808: PUSH
31809: LD_EXP 14
31813: PUSH
31814: LD_EXP 15
31818: PUSH
31819: LD_EXP 16
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: ST_TO_ADDR
// InGameOn ;
31843: CALL_OW 8
// SetAttitude ( 1 , 7 , att_friend , true ) ;
31847: LD_INT 1
31849: PPUSH
31850: LD_INT 7
31852: PPUSH
31853: LD_INT 1
31855: PPUSH
31856: LD_INT 1
31858: PPUSH
31859: CALL_OW 80
// CenterNowOnUnits ( tpUnit ) ;
31863: LD_VAR 0 1
31867: PPUSH
31868: CALL_OW 87
// if GetType ( tpUnit ) = unit_vehicle then
31872: LD_VAR 0 1
31876: PPUSH
31877: CALL_OW 247
31881: PUSH
31882: LD_INT 2
31884: EQUAL
31885: IFFALSE 31906
// tpUnit = UnitsInside ( tpUnit ) [ 1 ] ;
31887: LD_ADDR_VAR 0 1
31891: PUSH
31892: LD_VAR 0 1
31896: PPUSH
31897: CALL_OW 313
31901: PUSH
31902: LD_INT 1
31904: ARRAY
31905: ST_TO_ADDR
// ComExitVehicle ( tpUnit ) ;
31906: LD_VAR 0 1
31910: PPUSH
31911: CALL_OW 121
// wait ( 0 0$1 ) ;
31915: LD_INT 35
31917: PPUSH
31918: CALL_OW 67
// TeleportUnit ( tpUnit , 248 , 186 , 4 , true ) ;
31922: LD_VAR 0 1
31926: PPUSH
31927: LD_INT 248
31929: PPUSH
31930: LD_INT 186
31932: PPUSH
31933: LD_INT 4
31935: PPUSH
31936: LD_INT 1
31938: PPUSH
31939: CALL_OW 483
// wait ( 0 0$2 ) ;
31943: LD_INT 70
31945: PPUSH
31946: CALL_OW 67
// CenterNowOnUnits ( tpUnit ) ;
31950: LD_VAR 0 1
31954: PPUSH
31955: CALL_OW 87
// ComTurnUnit ( tpUnit , Roth ) ;
31959: LD_VAR 0 1
31963: PPUSH
31964: LD_EXP 28
31968: PPUSH
31969: CALL_OW 119
// ComTurnUnit ( [ Roth , Simms ] , tpUnit ) ;
31973: LD_EXP 28
31977: PUSH
31978: LD_EXP 47
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PPUSH
31987: LD_VAR 0 1
31991: PPUSH
31992: CALL_OW 119
// if tpUnit = JMM then
31996: LD_VAR 0 1
32000: PUSH
32001: LD_EXP 1
32005: EQUAL
32006: IFFALSE 32020
// Say ( JMM , DA1-JMM-1 ) ;
32008: LD_EXP 1
32012: PPUSH
32013: LD_STRING DA1-JMM-1
32015: PPUSH
32016: CALL_OW 88
// if tpUnit = Joan then
32020: LD_VAR 0 1
32024: PUSH
32025: LD_EXP 2
32029: EQUAL
32030: IFFALSE 32044
// Say ( Joan , DA1-Joan-1 ) ;
32032: LD_EXP 2
32036: PPUSH
32037: LD_STRING DA1-Joan-1
32039: PPUSH
32040: CALL_OW 88
// if tpUnit = Lisa then
32044: LD_VAR 0 1
32048: PUSH
32049: LD_EXP 4
32053: EQUAL
32054: IFFALSE 32068
// Say ( Lisa , DA1-Lisa-1 ) ;
32056: LD_EXP 4
32060: PPUSH
32061: LD_STRING DA1-Lisa-1
32063: PPUSH
32064: CALL_OW 88
// if tpUnit = Donaldson then
32068: LD_VAR 0 1
32072: PUSH
32073: LD_EXP 5
32077: EQUAL
32078: IFFALSE 32092
// Say ( Donaldson , DA1-Don-1 ) ;
32080: LD_EXP 5
32084: PPUSH
32085: LD_STRING DA1-Don-1
32087: PPUSH
32088: CALL_OW 88
// if tpUnit = Cornel then
32092: LD_VAR 0 1
32096: PUSH
32097: LD_EXP 12
32101: EQUAL
32102: IFFALSE 32116
// Say ( Cornel , DA1-Corn-1 ) ;
32104: LD_EXP 12
32108: PPUSH
32109: LD_STRING DA1-Corn-1
32111: PPUSH
32112: CALL_OW 88
// if tpUnit = Denis then
32116: LD_VAR 0 1
32120: PUSH
32121: LD_EXP 8
32125: EQUAL
32126: IFFALSE 32140
// Say ( Denis , DA1-Den-1 ) ;
32128: LD_EXP 8
32132: PPUSH
32133: LD_STRING DA1-Den-1
32135: PPUSH
32136: CALL_OW 88
// if tpUnit = Bobby then
32140: LD_VAR 0 1
32144: PUSH
32145: LD_EXP 6
32149: EQUAL
32150: IFFALSE 32164
// Say ( Bobby , DA1-Bobby-1 ) ;
32152: LD_EXP 6
32156: PPUSH
32157: LD_STRING DA1-Bobby-1
32159: PPUSH
32160: CALL_OW 88
// if tpUnit = Gladstone then
32164: LD_VAR 0 1
32168: PUSH
32169: LD_EXP 10
32173: EQUAL
32174: IFFALSE 32188
// Say ( Gladstone , DA1-Glad-1 ) ;
32176: LD_EXP 10
32180: PPUSH
32181: LD_STRING DA1-Glad-1
32183: PPUSH
32184: CALL_OW 88
// if tpUnit = Cyrus then
32188: LD_VAR 0 1
32192: PUSH
32193: LD_EXP 7
32197: EQUAL
32198: IFFALSE 32212
// Say ( Cyrus , DA1-Cyrus-1 ) ;
32200: LD_EXP 7
32204: PPUSH
32205: LD_STRING DA1-Cyrus-1
32207: PPUSH
32208: CALL_OW 88
// if tpUnit = Stevens then
32212: LD_VAR 0 1
32216: PUSH
32217: LD_EXP 3
32221: EQUAL
32222: IFFALSE 32236
// Say ( Stevens , DA1-Huck-1 ) ;
32224: LD_EXP 3
32228: PPUSH
32229: LD_STRING DA1-Huck-1
32231: PPUSH
32232: CALL_OW 88
// if tpUnit = Baker then
32236: LD_VAR 0 1
32240: PUSH
32241: LD_EXP 21
32245: EQUAL
32246: IFFALSE 32260
// Say ( Baker , DA1-Huck-1 ) ;
32248: LD_EXP 21
32252: PPUSH
32253: LD_STRING DA1-Huck-1
32255: PPUSH
32256: CALL_OW 88
// if tpUnit = Brown then
32260: LD_VAR 0 1
32264: PUSH
32265: LD_EXP 9
32269: EQUAL
32270: IFFALSE 32284
// Say ( Brown , DA1-Brown-1 ) ;
32272: LD_EXP 9
32276: PPUSH
32277: LD_STRING DA1-Brown-1
32279: PPUSH
32280: CALL_OW 88
// if tpUnit = Gary then
32284: LD_VAR 0 1
32288: PUSH
32289: LD_EXP 13
32293: EQUAL
32294: IFFALSE 32308
// Say ( Gary , DA1-Gary-1 ) ;
32296: LD_EXP 13
32300: PPUSH
32301: LD_STRING DA1-Gary-1
32303: PPUSH
32304: CALL_OW 88
// if tpUnit = Connie then
32308: LD_VAR 0 1
32312: PUSH
32313: LD_EXP 16
32317: EQUAL
32318: IFFALSE 32332
// Say ( Connie , DA1-Con-1 ) ;
32320: LD_EXP 16
32324: PPUSH
32325: LD_STRING DA1-Con-1
32327: PPUSH
32328: CALL_OW 88
// if tpUnit = Kurt then
32332: LD_VAR 0 1
32336: PUSH
32337: LD_EXP 30
32341: EQUAL
32342: IFFALSE 32356
// Say ( Kurt , DA1-Kurt-1 ) ;
32344: LD_EXP 30
32348: PPUSH
32349: LD_STRING DA1-Kurt-1
32351: PPUSH
32352: CALL_OW 88
// if tpUnit = Kikuchi then
32356: LD_VAR 0 1
32360: PUSH
32361: LD_EXP 15
32365: EQUAL
32366: IFFALSE 32380
// Say ( Kikuchi , DA1-Yam-1 ) ;
32368: LD_EXP 15
32372: PPUSH
32373: LD_STRING DA1-Yam-1
32375: PPUSH
32376: CALL_OW 88
// if tpUnit = Frank then
32380: LD_VAR 0 1
32384: PUSH
32385: LD_EXP 14
32389: EQUAL
32390: IFFALSE 32404
// Say ( Frank , DA1-Frank-1 ) ;
32392: LD_EXP 14
32396: PPUSH
32397: LD_STRING DA1-Frank-1
32399: PPUSH
32400: CALL_OW 88
// if not tpUnit in heroes then
32404: LD_VAR 0 1
32408: PUSH
32409: LD_VAR 0 2
32413: IN
32414: NOT
32415: IFFALSE 32471
// begin if GetSex ( tpUnit ) = 1 then
32417: LD_VAR 0 1
32421: PPUSH
32422: CALL_OW 258
32426: PUSH
32427: LD_INT 1
32429: EQUAL
32430: IFFALSE 32444
// Say ( tpUnit , DA1-Sol1-1 ) ;
32432: LD_VAR 0 1
32436: PPUSH
32437: LD_STRING DA1-Sol1-1
32439: PPUSH
32440: CALL_OW 88
// if GetSex ( tpUnit ) = 2 then
32444: LD_VAR 0 1
32448: PPUSH
32449: CALL_OW 258
32453: PUSH
32454: LD_INT 2
32456: EQUAL
32457: IFFALSE 32471
// Say ( tpUnit , DA1-FSol1-1 ) ;
32459: LD_VAR 0 1
32463: PPUSH
32464: LD_STRING DA1-FSol1-1
32466: PPUSH
32467: CALL_OW 88
// end ; Say ( Roth , DA-Roth-1 ) ;
32471: LD_EXP 28
32475: PPUSH
32476: LD_STRING DA-Roth-1
32478: PPUSH
32479: CALL_OW 88
// Say ( Simms , DA-Sim-1 ) ;
32483: LD_EXP 47
32487: PPUSH
32488: LD_STRING DA-Sim-1
32490: PPUSH
32491: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
32495: LD_EXP 28
32499: PPUSH
32500: LD_STRING DA-Roth-2
32502: PPUSH
32503: CALL_OW 88
// if tpUnit = JMM then
32507: LD_VAR 0 1
32511: PUSH
32512: LD_EXP 1
32516: EQUAL
32517: IFFALSE 32550
// begin Say ( JMM , DA1-JMM-1a ) ;
32519: LD_EXP 1
32523: PPUSH
32524: LD_STRING DA1-JMM-1a
32526: PPUSH
32527: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
32531: LD_EXP 28
32535: PPUSH
32536: LD_STRING DA-Roth-3a
32538: PPUSH
32539: CALL_OW 88
// YouLost ( JMMCaptured ) ;
32543: LD_STRING JMMCaptured
32545: PPUSH
32546: CALL_OW 104
// end ; if tpUnit = Joan then
32550: LD_VAR 0 1
32554: PUSH
32555: LD_EXP 2
32559: EQUAL
32560: IFFALSE 32622
// begin Say ( Joan , DA1-Joan-1a ) ;
32562: LD_EXP 2
32566: PPUSH
32567: LD_STRING DA1-Joan-1a
32569: PPUSH
32570: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
32574: LD_EXP 28
32578: PPUSH
32579: LD_STRING DA-Roth-3a
32581: PPUSH
32582: CALL_OW 88
// SetSide ( Joan , 4 ) ;
32586: LD_EXP 2
32590: PPUSH
32591: LD_INT 4
32593: PPUSH
32594: CALL_OW 235
// ComMoveXY ( Joan , 257 , 198 ) ;
32598: LD_EXP 2
32602: PPUSH
32603: LD_INT 257
32605: PPUSH
32606: LD_INT 198
32608: PPUSH
32609: CALL_OW 111
// AddComHold ( Joan ) ;
32613: LD_EXP 2
32617: PPUSH
32618: CALL_OW 200
// end ; if tpUnit = Donaldson then
32622: LD_VAR 0 1
32626: PUSH
32627: LD_EXP 5
32631: EQUAL
32632: IFFALSE 32685
// begin Say ( Donaldson , DA1-Don-1a ) ;
32634: LD_EXP 5
32638: PPUSH
32639: LD_STRING DA1-Don-1a
32641: PPUSH
32642: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
32646: LD_EXP 28
32650: PPUSH
32651: LD_STRING DA-Roth-3
32653: PPUSH
32654: CALL_OW 88
// SetSide ( Donaldson , 7 ) ;
32658: LD_EXP 5
32662: PPUSH
32663: LD_INT 7
32665: PPUSH
32666: CALL_OW 235
// ComMoveXY ( Donaldson , 240 , 188 ) ;
32670: LD_EXP 5
32674: PPUSH
32675: LD_INT 240
32677: PPUSH
32678: LD_INT 188
32680: PPUSH
32681: CALL_OW 111
// end ; if tpUnit = Cornel then
32685: LD_VAR 0 1
32689: PUSH
32690: LD_EXP 12
32694: EQUAL
32695: IFFALSE 32757
// begin Say ( Cornel , DA1-Corn-1a ) ;
32697: LD_EXP 12
32701: PPUSH
32702: LD_STRING DA1-Corn-1a
32704: PPUSH
32705: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
32709: LD_EXP 28
32713: PPUSH
32714: LD_STRING DA-Roth-3a
32716: PPUSH
32717: CALL_OW 88
// SetSide ( Cornel , 4 ) ;
32721: LD_EXP 12
32725: PPUSH
32726: LD_INT 4
32728: PPUSH
32729: CALL_OW 235
// ComMoveXY ( Cornel , 257 , 198 ) ;
32733: LD_EXP 12
32737: PPUSH
32738: LD_INT 257
32740: PPUSH
32741: LD_INT 198
32743: PPUSH
32744: CALL_OW 111
// AddComHold ( Cornel ) ;
32748: LD_EXP 12
32752: PPUSH
32753: CALL_OW 200
// end ; if tpUnit = Denis then
32757: LD_VAR 0 1
32761: PUSH
32762: LD_EXP 8
32766: EQUAL
32767: IFFALSE 32820
// begin Say ( Denis , DA1-Den-1a ) ;
32769: LD_EXP 8
32773: PPUSH
32774: LD_STRING DA1-Den-1a
32776: PPUSH
32777: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
32781: LD_EXP 28
32785: PPUSH
32786: LD_STRING DA-Roth-3
32788: PPUSH
32789: CALL_OW 88
// SetSide ( Denis , 7 ) ;
32793: LD_EXP 8
32797: PPUSH
32798: LD_INT 7
32800: PPUSH
32801: CALL_OW 235
// ComMoveXY ( Denis , 240 , 188 ) ;
32805: LD_EXP 8
32809: PPUSH
32810: LD_INT 240
32812: PPUSH
32813: LD_INT 188
32815: PPUSH
32816: CALL_OW 111
// end ; if tpUnit = Bobby then
32820: LD_VAR 0 1
32824: PUSH
32825: LD_EXP 6
32829: EQUAL
32830: IFFALSE 32883
// begin Say ( Joan , DA1-Bobby-1a ) ;
32832: LD_EXP 2
32836: PPUSH
32837: LD_STRING DA1-Bobby-1a
32839: PPUSH
32840: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
32844: LD_EXP 28
32848: PPUSH
32849: LD_STRING DA-Roth-3
32851: PPUSH
32852: CALL_OW 88
// SetSide ( Bobby , 7 ) ;
32856: LD_EXP 6
32860: PPUSH
32861: LD_INT 7
32863: PPUSH
32864: CALL_OW 235
// ComMoveXY ( Bobby , 240 , 188 ) ;
32868: LD_EXP 6
32872: PPUSH
32873: LD_INT 240
32875: PPUSH
32876: LD_INT 188
32878: PPUSH
32879: CALL_OW 111
// end ; if tpUnit = Gladstone then
32883: LD_VAR 0 1
32887: PUSH
32888: LD_EXP 10
32892: EQUAL
32893: IFFALSE 32955
// begin Say ( Gladstone , DA1-Glad-1a ) ;
32895: LD_EXP 10
32899: PPUSH
32900: LD_STRING DA1-Glad-1a
32902: PPUSH
32903: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
32907: LD_EXP 28
32911: PPUSH
32912: LD_STRING DA-Roth-3a
32914: PPUSH
32915: CALL_OW 88
// SetSide ( Gladstone , 4 ) ;
32919: LD_EXP 10
32923: PPUSH
32924: LD_INT 4
32926: PPUSH
32927: CALL_OW 235
// ComMoveXY ( Gladstone , 257 , 198 ) ;
32931: LD_EXP 10
32935: PPUSH
32936: LD_INT 257
32938: PPUSH
32939: LD_INT 198
32941: PPUSH
32942: CALL_OW 111
// AddComHold ( Gladstone ) ;
32946: LD_EXP 10
32950: PPUSH
32951: CALL_OW 200
// end ; if tpUnit = Cyrus then
32955: LD_VAR 0 1
32959: PUSH
32960: LD_EXP 7
32964: EQUAL
32965: IFFALSE 33027
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
32967: LD_EXP 7
32971: PPUSH
32972: LD_STRING DA1-Cyrus-1a
32974: PPUSH
32975: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
32979: LD_EXP 28
32983: PPUSH
32984: LD_STRING DA-Roth-3a
32986: PPUSH
32987: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
32991: LD_EXP 7
32995: PPUSH
32996: LD_INT 4
32998: PPUSH
32999: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
33003: LD_EXP 7
33007: PPUSH
33008: LD_INT 257
33010: PPUSH
33011: LD_INT 198
33013: PPUSH
33014: CALL_OW 111
// AddComHold ( Cyrus ) ;
33018: LD_EXP 7
33022: PPUSH
33023: CALL_OW 200
// end ; if tpUnit = Stevens then
33027: LD_VAR 0 1
33031: PUSH
33032: LD_EXP 3
33036: EQUAL
33037: IFFALSE 33090
// begin Say ( Stevens , DA1-Huck-1a ) ;
33039: LD_EXP 3
33043: PPUSH
33044: LD_STRING DA1-Huck-1a
33046: PPUSH
33047: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33051: LD_EXP 28
33055: PPUSH
33056: LD_STRING DA-Roth-3
33058: PPUSH
33059: CALL_OW 88
// SetSide ( Stevens , 7 ) ;
33063: LD_EXP 3
33067: PPUSH
33068: LD_INT 7
33070: PPUSH
33071: CALL_OW 235
// ComMoveXY ( Stevens , 240 , 188 ) ;
33075: LD_EXP 3
33079: PPUSH
33080: LD_INT 240
33082: PPUSH
33083: LD_INT 188
33085: PPUSH
33086: CALL_OW 111
// end ; if tpUnit = Baker then
33090: LD_VAR 0 1
33094: PUSH
33095: LD_EXP 21
33099: EQUAL
33100: IFFALSE 33153
// begin Say ( Baker , DA1-Huck-1a ) ;
33102: LD_EXP 21
33106: PPUSH
33107: LD_STRING DA1-Huck-1a
33109: PPUSH
33110: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33114: LD_EXP 28
33118: PPUSH
33119: LD_STRING DA-Roth-3
33121: PPUSH
33122: CALL_OW 88
// SetSide ( Baker , 7 ) ;
33126: LD_EXP 21
33130: PPUSH
33131: LD_INT 7
33133: PPUSH
33134: CALL_OW 235
// ComMoveXY ( Baker , 240 , 188 ) ;
33138: LD_EXP 21
33142: PPUSH
33143: LD_INT 240
33145: PPUSH
33146: LD_INT 188
33148: PPUSH
33149: CALL_OW 111
// end ; if tpUnit = Brown then
33153: LD_VAR 0 1
33157: PUSH
33158: LD_EXP 9
33162: EQUAL
33163: IFFALSE 33216
// begin Say ( Cyrus , DA1-Brown-1a ) ;
33165: LD_EXP 7
33169: PPUSH
33170: LD_STRING DA1-Brown-1a
33172: PPUSH
33173: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33177: LD_EXP 28
33181: PPUSH
33182: LD_STRING DA-Roth-3
33184: PPUSH
33185: CALL_OW 88
// SetSide ( Brown , 7 ) ;
33189: LD_EXP 9
33193: PPUSH
33194: LD_INT 7
33196: PPUSH
33197: CALL_OW 235
// ComMoveXY ( Brown , 240 , 188 ) ;
33201: LD_EXP 9
33205: PPUSH
33206: LD_INT 240
33208: PPUSH
33209: LD_INT 188
33211: PPUSH
33212: CALL_OW 111
// end ; if tpUnit = Gary then
33216: LD_VAR 0 1
33220: PUSH
33221: LD_EXP 13
33225: EQUAL
33226: IFFALSE 33288
// begin Say ( Gary , DA1-Gary-1a ) ;
33228: LD_EXP 13
33232: PPUSH
33233: LD_STRING DA1-Gary-1a
33235: PPUSH
33236: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33240: LD_EXP 28
33244: PPUSH
33245: LD_STRING DA-Roth-3a
33247: PPUSH
33248: CALL_OW 88
// SetSide ( Gary , 4 ) ;
33252: LD_EXP 13
33256: PPUSH
33257: LD_INT 4
33259: PPUSH
33260: CALL_OW 235
// ComMoveXY ( Gary , 257 , 198 ) ;
33264: LD_EXP 13
33268: PPUSH
33269: LD_INT 257
33271: PPUSH
33272: LD_INT 198
33274: PPUSH
33275: CALL_OW 111
// AddComHold ( Gary ) ;
33279: LD_EXP 13
33283: PPUSH
33284: CALL_OW 200
// end ; if tpUnit = Cyrus then
33288: LD_VAR 0 1
33292: PUSH
33293: LD_EXP 7
33297: EQUAL
33298: IFFALSE 33360
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
33300: LD_EXP 7
33304: PPUSH
33305: LD_STRING DA1-Cyrus-1a
33307: PPUSH
33308: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33312: LD_EXP 28
33316: PPUSH
33317: LD_STRING DA-Roth-3a
33319: PPUSH
33320: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
33324: LD_EXP 7
33328: PPUSH
33329: LD_INT 4
33331: PPUSH
33332: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
33336: LD_EXP 7
33340: PPUSH
33341: LD_INT 257
33343: PPUSH
33344: LD_INT 198
33346: PPUSH
33347: CALL_OW 111
// AddComHold ( Cyrus ) ;
33351: LD_EXP 7
33355: PPUSH
33356: CALL_OW 200
// end ; if tpUnit = Connie then
33360: LD_VAR 0 1
33364: PUSH
33365: LD_EXP 16
33369: EQUAL
33370: IFFALSE 33432
// begin Say ( Connie , DA1-Con-1a ) ;
33372: LD_EXP 16
33376: PPUSH
33377: LD_STRING DA1-Con-1a
33379: PPUSH
33380: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33384: LD_EXP 28
33388: PPUSH
33389: LD_STRING DA-Roth-3a
33391: PPUSH
33392: CALL_OW 88
// SetSide ( Connie , 4 ) ;
33396: LD_EXP 16
33400: PPUSH
33401: LD_INT 4
33403: PPUSH
33404: CALL_OW 235
// ComMoveXY ( Connie , 257 , 198 ) ;
33408: LD_EXP 16
33412: PPUSH
33413: LD_INT 257
33415: PPUSH
33416: LD_INT 198
33418: PPUSH
33419: CALL_OW 111
// AddComHold ( Connie ) ;
33423: LD_EXP 16
33427: PPUSH
33428: CALL_OW 200
// end ; if tpUnit = Kurt then
33432: LD_VAR 0 1
33436: PUSH
33437: LD_EXP 30
33441: EQUAL
33442: IFFALSE 33504
// begin Say ( Kurt , DA1-Kurt-1a ) ;
33444: LD_EXP 30
33448: PPUSH
33449: LD_STRING DA1-Kurt-1a
33451: PPUSH
33452: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33456: LD_EXP 28
33460: PPUSH
33461: LD_STRING DA-Roth-3a
33463: PPUSH
33464: CALL_OW 88
// SetSide ( Kurt , 4 ) ;
33468: LD_EXP 30
33472: PPUSH
33473: LD_INT 4
33475: PPUSH
33476: CALL_OW 235
// ComMoveXY ( Kurt , 257 , 198 ) ;
33480: LD_EXP 30
33484: PPUSH
33485: LD_INT 257
33487: PPUSH
33488: LD_INT 198
33490: PPUSH
33491: CALL_OW 111
// AddComHold ( Kurt ) ;
33495: LD_EXP 30
33499: PPUSH
33500: CALL_OW 200
// end ; if tpUnit = Kikuchi then
33504: LD_VAR 0 1
33508: PUSH
33509: LD_EXP 15
33513: EQUAL
33514: IFFALSE 33567
// begin Say ( Kikuchi , DA1-Yam-1a ) ;
33516: LD_EXP 15
33520: PPUSH
33521: LD_STRING DA1-Yam-1a
33523: PPUSH
33524: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33528: LD_EXP 28
33532: PPUSH
33533: LD_STRING DA-Roth-3
33535: PPUSH
33536: CALL_OW 88
// SetSide ( Kikuchi , 7 ) ;
33540: LD_EXP 15
33544: PPUSH
33545: LD_INT 7
33547: PPUSH
33548: CALL_OW 235
// ComMoveXY ( Kikuchi , 240 , 188 ) ;
33552: LD_EXP 15
33556: PPUSH
33557: LD_INT 240
33559: PPUSH
33560: LD_INT 188
33562: PPUSH
33563: CALL_OW 111
// end ; if tpUnit = Frank then
33567: LD_VAR 0 1
33571: PUSH
33572: LD_EXP 14
33576: EQUAL
33577: IFFALSE 33639
// begin Say ( Frank , DA1-Frank-1a ) ;
33579: LD_EXP 14
33583: PPUSH
33584: LD_STRING DA1-Frank-1a
33586: PPUSH
33587: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33591: LD_EXP 28
33595: PPUSH
33596: LD_STRING DA-Roth-3a
33598: PPUSH
33599: CALL_OW 88
// SetSide ( Frank , 4 ) ;
33603: LD_EXP 14
33607: PPUSH
33608: LD_INT 4
33610: PPUSH
33611: CALL_OW 235
// ComMoveXY ( Frank , 257 , 198 ) ;
33615: LD_EXP 14
33619: PPUSH
33620: LD_INT 257
33622: PPUSH
33623: LD_INT 198
33625: PPUSH
33626: CALL_OW 111
// AddComHold ( Frank ) ;
33630: LD_EXP 14
33634: PPUSH
33635: CALL_OW 200
// end ; if allianceFirstContact = 0 then
33639: LD_EXP 63
33643: PUSH
33644: LD_INT 0
33646: EQUAL
33647: IFFALSE 33693
// begin Say ( JMM , DAa-JMM-1 ) ;
33649: LD_EXP 1
33653: PPUSH
33654: LD_STRING DAa-JMM-1
33656: PPUSH
33657: CALL_OW 88
// Say ( JMM , DAa-JMM-1a ) ;
33661: LD_EXP 1
33665: PPUSH
33666: LD_STRING DAa-JMM-1a
33668: PPUSH
33669: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
33673: LD_EXP 1
33677: PPUSH
33678: LD_STRING DAa-JMM-1b
33680: PPUSH
33681: CALL_OW 88
// allianceFirstContact = 1 ;
33685: LD_ADDR_EXP 63
33689: PUSH
33690: LD_INT 1
33692: ST_TO_ADDR
// end ; if not tpUnit in heroes then
33693: LD_VAR 0 1
33697: PUSH
33698: LD_VAR 0 2
33702: IN
33703: NOT
33704: IFFALSE 34014
// begin rnd = Rand ( 1 , 2 ) ;
33706: LD_ADDR_VAR 0 3
33710: PUSH
33711: LD_INT 1
33713: PPUSH
33714: LD_INT 2
33716: PPUSH
33717: CALL_OW 12
33721: ST_TO_ADDR
// if GetSex ( tpUnit ) = 1 then
33722: LD_VAR 0 1
33726: PPUSH
33727: CALL_OW 258
33731: PUSH
33732: LD_INT 1
33734: EQUAL
33735: IFFALSE 33868
// begin if rnd = 1 then
33737: LD_VAR 0 3
33741: PUSH
33742: LD_INT 1
33744: EQUAL
33745: IFFALSE 33807
// begin Say ( tpUnit , DA1-Sol1-1a ) ;
33747: LD_VAR 0 1
33751: PPUSH
33752: LD_STRING DA1-Sol1-1a
33754: PPUSH
33755: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33759: LD_EXP 28
33763: PPUSH
33764: LD_STRING DA-Roth-3a
33766: PPUSH
33767: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
33771: LD_VAR 0 1
33775: PPUSH
33776: LD_INT 4
33778: PPUSH
33779: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
33783: LD_VAR 0 1
33787: PPUSH
33788: LD_INT 257
33790: PPUSH
33791: LD_INT 198
33793: PPUSH
33794: CALL_OW 111
// AddComHold ( tpUnit ) ;
33798: LD_VAR 0 1
33802: PPUSH
33803: CALL_OW 200
// end ; if rnd = 2 then
33807: LD_VAR 0 3
33811: PUSH
33812: LD_INT 2
33814: EQUAL
33815: IFFALSE 33868
// begin Say ( tpUnit , DA1-Sol1-1b ) ;
33817: LD_VAR 0 1
33821: PPUSH
33822: LD_STRING DA1-Sol1-1b
33824: PPUSH
33825: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33829: LD_EXP 28
33833: PPUSH
33834: LD_STRING DA-Roth-3
33836: PPUSH
33837: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
33841: LD_VAR 0 1
33845: PPUSH
33846: LD_INT 7
33848: PPUSH
33849: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
33853: LD_VAR 0 1
33857: PPUSH
33858: LD_INT 240
33860: PPUSH
33861: LD_INT 188
33863: PPUSH
33864: CALL_OW 111
// end ; end ; if GetSex ( tpUnit ) = 2 then
33868: LD_VAR 0 1
33872: PPUSH
33873: CALL_OW 258
33877: PUSH
33878: LD_INT 2
33880: EQUAL
33881: IFFALSE 34014
// begin if rnd = 1 then
33883: LD_VAR 0 3
33887: PUSH
33888: LD_INT 1
33890: EQUAL
33891: IFFALSE 33953
// begin Say ( tpUnit , DA1-FSol1-1a ) ;
33893: LD_VAR 0 1
33897: PPUSH
33898: LD_STRING DA1-FSol1-1a
33900: PPUSH
33901: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33905: LD_EXP 28
33909: PPUSH
33910: LD_STRING DA-Roth-3a
33912: PPUSH
33913: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
33917: LD_VAR 0 1
33921: PPUSH
33922: LD_INT 4
33924: PPUSH
33925: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
33929: LD_VAR 0 1
33933: PPUSH
33934: LD_INT 257
33936: PPUSH
33937: LD_INT 198
33939: PPUSH
33940: CALL_OW 111
// AddComHold ( tpUnit ) ;
33944: LD_VAR 0 1
33948: PPUSH
33949: CALL_OW 200
// end ; if rnd = 2 then
33953: LD_VAR 0 3
33957: PUSH
33958: LD_INT 2
33960: EQUAL
33961: IFFALSE 34014
// begin Say ( tpUnit , DA1-FSol1-1b ) ;
33963: LD_VAR 0 1
33967: PPUSH
33968: LD_STRING DA1-FSol1-1b
33970: PPUSH
33971: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33975: LD_EXP 28
33979: PPUSH
33980: LD_STRING DA-Roth-3
33982: PPUSH
33983: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
33987: LD_VAR 0 1
33991: PPUSH
33992: LD_INT 7
33994: PPUSH
33995: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
33999: LD_VAR 0 1
34003: PPUSH
34004: LD_INT 240
34006: PPUSH
34007: LD_INT 188
34009: PPUSH
34010: CALL_OW 111
// end ; end ; end ; SetAttitude ( 1 , 7 , att_enemy , true ) ;
34014: LD_INT 1
34016: PPUSH
34017: LD_INT 7
34019: PPUSH
34020: LD_INT 2
34022: PPUSH
34023: LD_INT 1
34025: PPUSH
34026: CALL_OW 80
// InGameOff ;
34030: CALL_OW 9
// enable ;
34034: ENABLE
// end ;
34035: PPOPN 3
34037: END
// every 0 0$1 trigger timeAction >= 45 45$02 do
34038: LD_EXP 96
34042: PUSH
34043: LD_INT 94570
34045: GREATEREQUAL
34046: IFFALSE 34365
34048: GO 34050
34050: DISABLE
// begin DialogueOn ;
34051: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-1 , D5-FSol1-1 ) ;
34055: LD_INT 22
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 23
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 26
34077: PUSH
34078: LD_INT 1
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 2
34087: PUSH
34088: LD_INT 25
34090: PUSH
34091: LD_INT 1
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 25
34100: PUSH
34101: LD_INT 2
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 25
34110: PUSH
34111: LD_INT 3
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 25
34120: PUSH
34121: LD_INT 4
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 25
34130: PUSH
34131: LD_INT 5
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 25
34140: PUSH
34141: LD_INT 8
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: PPUSH
34163: CALL_OW 69
34167: PPUSH
34168: LD_STRING D11-Sol1-1
34170: PPUSH
34171: LD_STRING D5-FSol1-1
34173: PPUSH
34174: CALL 6913 0 3
// SayRadio ( Platonov , D11-Pla-1 ) ;
34178: LD_EXP 26
34182: PPUSH
34183: LD_STRING D11-Pla-1
34185: PPUSH
34186: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
34190: LD_EXP 36
34194: PPUSH
34195: LD_STRING D11-Kov-1
34197: PPUSH
34198: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
34202: LD_EXP 26
34206: PPUSH
34207: LD_STRING D11-Pla-2
34209: PPUSH
34210: CALL_OW 94
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-2 , D5-FSol1-1 ) ;
34214: LD_INT 22
34216: PUSH
34217: LD_INT 1
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 23
34226: PUSH
34227: LD_INT 1
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 26
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 2
34246: PUSH
34247: LD_INT 25
34249: PUSH
34250: LD_INT 1
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 25
34259: PUSH
34260: LD_INT 2
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 25
34269: PUSH
34270: LD_INT 3
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 25
34279: PUSH
34280: LD_INT 4
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 25
34289: PUSH
34290: LD_INT 5
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 25
34299: PUSH
34300: LD_INT 8
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: PPUSH
34322: CALL_OW 69
34326: PPUSH
34327: LD_STRING D11-Sol1-2
34329: PPUSH
34330: LD_STRING D5-FSol1-1
34332: PPUSH
34333: CALL 6913 0 3
// Say ( JMM , D11-JMM-2 ) ;
34337: LD_EXP 1
34341: PPUSH
34342: LD_STRING D11-JMM-2
34344: PPUSH
34345: CALL_OW 88
// DialogueOff ;
34349: CALL_OW 7
// PreapreMehBehs ;
34353: CALL 5738 0 0
// missionStage = 5 ;
34357: LD_ADDR_EXP 100
34361: PUSH
34362: LD_INT 5
34364: ST_TO_ADDR
// end ;
34365: END
// every 0 0$1 trigger timeAction >= 50 50$02 do var dec , time ;
34366: LD_EXP 96
34370: PUSH
34371: LD_INT 105070
34373: GREATEREQUAL
34374: IFFALSE 34768
34376: GO 34378
34378: DISABLE
34379: LD_INT 0
34381: PPUSH
34382: PPUSH
// begin time = 0 0$00 ;
34383: LD_ADDR_VAR 0 2
34387: PUSH
34388: LD_INT 0
34390: ST_TO_ADDR
// DialogueOn ;
34391: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
34395: LD_EXP 26
34399: PPUSH
34400: LD_STRING D15-Pla-1
34402: PPUSH
34403: CALL_OW 94
// dec = Query ( Q15a ) ;
34407: LD_ADDR_VAR 0 1
34411: PUSH
34412: LD_STRING Q15a
34414: PPUSH
34415: CALL_OW 97
34419: ST_TO_ADDR
// if dec = 1 then
34420: LD_VAR 0 1
34424: PUSH
34425: LD_INT 1
34427: EQUAL
34428: IFFALSE 34449
// begin Say ( JMM , D15a-JMM-1 ) ;
34430: LD_EXP 1
34434: PPUSH
34435: LD_STRING D15a-JMM-1
34437: PPUSH
34438: CALL_OW 88
// YouLost ( Surrender ) ;
34442: LD_STRING Surrender
34444: PPUSH
34445: CALL_OW 104
// end ; if dec = 2 then
34449: LD_VAR 0 1
34453: PUSH
34454: LD_INT 2
34456: EQUAL
34457: IFFALSE 34487
// begin Say ( JMM , D15b-JMM-1 ) ;
34459: LD_EXP 1
34463: PPUSH
34464: LD_STRING D15b-JMM-1
34466: PPUSH
34467: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
34471: LD_EXP 26
34475: PPUSH
34476: LD_STRING D15b-Pla-1
34478: PPUSH
34479: CALL_OW 94
// DialogueOff ;
34483: CALL_OW 7
// end ; if dec = 3 then
34487: LD_VAR 0 1
34491: PUSH
34492: LD_INT 3
34494: EQUAL
34495: IFFALSE 34571
// begin Say ( JMM , D15c-JMM-1 ) ;
34497: LD_EXP 1
34501: PPUSH
34502: LD_STRING D15c-JMM-1
34504: PPUSH
34505: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
34509: LD_EXP 26
34513: PPUSH
34514: LD_STRING D15c-Pla-1
34516: PPUSH
34517: CALL_OW 94
// DialogueOff ;
34521: CALL_OW 7
// wait ( 0 0$15 ) ;
34525: LD_INT 525
34527: PPUSH
34528: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
34532: LD_EXP 26
34536: PPUSH
34537: LD_STRING D18-Pla-1
34539: PPUSH
34540: CALL_OW 88
// ComAttackPlace ( rurocket , GetX ( JMM ) , GetY ( JMM ) ) ;
34544: LD_INT 273
34546: PPUSH
34547: LD_EXP 1
34551: PPUSH
34552: CALL_OW 250
34556: PPUSH
34557: LD_EXP 1
34561: PPUSH
34562: CALL_OW 251
34566: PPUSH
34567: CALL_OW 116
// end ; if dec = 4 then
34571: LD_VAR 0 1
34575: PUSH
34576: LD_INT 4
34578: EQUAL
34579: IFFALSE 34617
// begin Say ( JMM , D15d-JMM-1 ) ;
34581: LD_EXP 1
34585: PPUSH
34586: LD_STRING D15d-JMM-1
34588: PPUSH
34589: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
34593: LD_EXP 26
34597: PPUSH
34598: LD_STRING D15d-Pla-1
34600: PPUSH
34601: CALL_OW 94
// DialogueOff ;
34605: CALL_OW 7
// missionStage = 6 ;
34609: LD_ADDR_EXP 100
34613: PUSH
34614: LD_INT 6
34616: ST_TO_ADDR
// end ; if dec = 2 then
34617: LD_VAR 0 1
34621: PUSH
34622: LD_INT 2
34624: EQUAL
34625: IFFALSE 34698
// begin repeat wait ( 0 0$01 ) ;
34627: LD_INT 35
34629: PPUSH
34630: CALL_OW 67
// time = time + 0 0$01 ;
34634: LD_ADDR_VAR 0 2
34638: PUSH
34639: LD_VAR 0 2
34643: PUSH
34644: LD_INT 35
34646: PLUS
34647: ST_TO_ADDR
// until time >= 3 3$00 ;
34648: LD_VAR 0 2
34652: PUSH
34653: LD_INT 6300
34655: GREATEREQUAL
34656: IFFALSE 34627
// DialogueOn ;
34658: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
34662: LD_EXP 1
34666: PPUSH
34667: LD_STRING D15d-JMM-1a
34669: PPUSH
34670: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
34674: LD_EXP 26
34678: PPUSH
34679: LD_STRING D15d-Pla-1
34681: PPUSH
34682: CALL_OW 94
// DialogueOff ;
34686: CALL_OW 7
// missionStage = 6 ;
34690: LD_ADDR_EXP 100
34694: PUSH
34695: LD_INT 6
34697: ST_TO_ADDR
// end ; if IsOk ( LegionFriend ) and GetSide ( LegionFriend ) = 1 then
34698: LD_EXP 52
34702: PPUSH
34703: CALL_OW 302
34707: PUSH
34708: LD_EXP 52
34712: PPUSH
34713: CALL_OW 255
34717: PUSH
34718: LD_INT 1
34720: EQUAL
34721: AND
34722: IFFALSE 34768
// begin DialogueOn ;
34724: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
34728: LD_EXP 1
34732: PPUSH
34733: LD_STRING D16-JMM-1
34735: PPUSH
34736: CALL_OW 88
// Say ( LegionFriend , D16-Friend-1 ) ;
34740: LD_EXP 52
34744: PPUSH
34745: LD_STRING D16-Friend-1
34747: PPUSH
34748: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
34752: LD_EXP 1
34756: PPUSH
34757: LD_STRING D16-JMM-2
34759: PPUSH
34760: CALL_OW 88
// DialogueOff ;
34764: CALL_OW 7
// end ; end ;
34768: PPOPN 2
34770: END
// every 1 1$0 trigger missionStage = 6 and IsOK ( LegionFriend ) and GetSide ( LegionFriend ) = 1 do var rocketTarget ;
34771: LD_EXP 100
34775: PUSH
34776: LD_INT 6
34778: EQUAL
34779: PUSH
34780: LD_EXP 52
34784: PPUSH
34785: CALL_OW 302
34789: AND
34790: PUSH
34791: LD_EXP 52
34795: PPUSH
34796: CALL_OW 255
34800: PUSH
34801: LD_INT 1
34803: EQUAL
34804: AND
34805: IFFALSE 35442
34807: GO 34809
34809: DISABLE
34810: LD_INT 0
34812: PPUSH
// begin DialogueOn ;
34813: CALL_OW 6
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
34817: LD_INT 22
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 2
34829: PUSH
34830: LD_INT 34
34832: PUSH
34833: LD_INT 8
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 35
34842: PUSH
34843: LD_INT 8
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: LIST
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PPUSH
34859: CALL_OW 69
34863: PUSH
34864: LD_INT 0
34866: GREATER
34867: IFFALSE 34891
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
34869: LD_EXP 26
34873: PPUSH
34874: LD_STRING D16c-Pla-1
34876: PPUSH
34877: CALL_OW 94
// playerHaveRocket = 1 ;
34881: LD_ADDR_EXP 99
34885: PUSH
34886: LD_INT 1
34888: ST_TO_ADDR
// end else
34889: GO 35350
// begin SayRadio ( Platonov , D16a-Pla-1 ) ;
34891: LD_EXP 26
34895: PPUSH
34896: LD_STRING D16a-Pla-1
34898: PPUSH
34899: CALL_OW 94
// if IsOK ( Stevens ) then
34903: LD_EXP 3
34907: PPUSH
34908: CALL_OW 302
34912: IFFALSE 34928
// begin Say ( Stevens , D16a-Huck-1 ) ;
34914: LD_EXP 3
34918: PPUSH
34919: LD_STRING D16a-Huck-1
34921: PPUSH
34922: CALL_OW 88
// end else
34926: GO 35076
// begin if IsOk ( Baker ) then
34928: LD_EXP 21
34932: PPUSH
34933: CALL_OW 302
34937: IFFALSE 34953
// begin Say ( Baker , D16a-Huck-1 ) ;
34939: LD_EXP 21
34943: PPUSH
34944: LD_STRING D16a-Huck-1
34946: PPUSH
34947: CALL_OW 88
// end else
34951: GO 35076
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D16a-Sol1-1 , D5-FSol1-1 ) ;
34953: LD_INT 22
34955: PUSH
34956: LD_INT 1
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 23
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 26
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 2
34985: PUSH
34986: LD_INT 25
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 25
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 25
35008: PUSH
35009: LD_INT 3
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 25
35018: PUSH
35019: LD_INT 4
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 25
35028: PUSH
35029: LD_INT 5
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 25
35038: PUSH
35039: LD_INT 8
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: PPUSH
35061: CALL_OW 69
35065: PPUSH
35066: LD_STRING D16a-Sol1-1
35068: PPUSH
35069: LD_STRING D5-FSol1-1
35071: PPUSH
35072: CALL 6913 0 3
// end ; end ; wait ( 0 0$30 ) ;
35076: LD_INT 1050
35078: PPUSH
35079: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35083: LD_EXP 26
35087: PPUSH
35088: LD_STRING D18-Pla-1
35090: PPUSH
35091: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35095: LD_ADDR_VAR 0 1
35099: PUSH
35100: LD_INT 22
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 21
35112: PUSH
35113: LD_INT 3
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 23
35122: PUSH
35123: LD_INT 1
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 2
35132: PUSH
35133: LD_INT 30
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 30
35145: PUSH
35146: LD_INT 1
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: PPUSH
35164: CALL_OW 69
35168: ST_TO_ADDR
// if rocketTarget = 0 then
35169: LD_VAR 0 1
35173: PUSH
35174: LD_INT 0
35176: EQUAL
35177: IFFALSE 35253
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35179: LD_ADDR_VAR 0 1
35183: PUSH
35184: LD_INT 22
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 21
35196: PUSH
35197: LD_INT 3
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 23
35206: PUSH
35207: LD_INT 2
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 2
35216: PUSH
35217: LD_INT 30
35219: PUSH
35220: LD_INT 0
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 30
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: LIST
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: PPUSH
35248: CALL_OW 69
35252: ST_TO_ADDR
// if rocketTarget = 0 then
35253: LD_VAR 0 1
35257: PUSH
35258: LD_INT 0
35260: EQUAL
35261: IFFALSE 35315
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
35263: LD_ADDR_VAR 0 1
35267: PUSH
35268: LD_INT 22
35270: PUSH
35271: LD_INT 1
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 21
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 23
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 50
35300: PUSH
35301: EMPTY
35302: LIST
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: PPUSH
35310: CALL_OW 69
35314: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
35315: LD_INT 273
35317: PPUSH
35318: LD_VAR 0 1
35322: PUSH
35323: LD_INT 1
35325: ARRAY
35326: PPUSH
35327: CALL_OW 250
35331: PPUSH
35332: LD_VAR 0 1
35336: PUSH
35337: LD_INT 1
35339: ARRAY
35340: PPUSH
35341: CALL_OW 251
35345: PPUSH
35346: CALL_OW 116
// end ; Say ( JMM , D16a-JMM-1a ) ;
35350: LD_EXP 1
35354: PPUSH
35355: LD_STRING D16a-JMM-1a
35357: PPUSH
35358: CALL_OW 88
// DialogueOff ;
35362: CALL_OW 7
// SetSide ( LegionFriend , 3 ) ;
35366: LD_EXP 52
35370: PPUSH
35371: LD_INT 3
35373: PPUSH
35374: CALL_OW 235
// ComExitBuilding ( LegionFriend ) ;
35378: LD_EXP 52
35382: PPUSH
35383: CALL_OW 122
// ComExitVehicle ( LegionFriend ) ;
35387: LD_EXP 52
35391: PPUSH
35392: CALL_OW 121
// wait ( 0 0$1 ) ;
35396: LD_INT 35
35398: PPUSH
35399: CALL_OW 67
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
35403: LD_EXP 52
35407: PPUSH
35408: LD_INT 18
35410: PPUSH
35411: CALL_OW 113
// wait ( 0 0$3 ) ;
35415: LD_INT 105
35417: PPUSH
35418: CALL_OW 67
// DialogueOn ;
35422: CALL_OW 6
// Say ( JMM , D16a-JMM-1 ) ;
35426: LD_EXP 1
35430: PPUSH
35431: LD_STRING D16a-JMM-1
35433: PPUSH
35434: CALL_OW 88
// DialogueOff ;
35438: CALL_OW 7
// end ;
35442: PPOPN 1
35444: END
// every 0 0$1 trigger GetSide ( LegionFriend ) = 3 do var i ;
35445: LD_EXP 52
35449: PPUSH
35450: CALL_OW 255
35454: PUSH
35455: LD_INT 3
35457: EQUAL
35458: IFFALSE 35565
35460: GO 35462
35462: DISABLE
35463: LD_INT 0
35465: PPUSH
// begin enable ;
35466: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_outside ] ] ) do
35467: LD_ADDR_VAR 0 1
35471: PUSH
35472: LD_INT 22
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 21
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 56
35494: PUSH
35495: EMPTY
35496: LIST
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: LIST
35502: PPUSH
35503: CALL_OW 69
35507: PUSH
35508: FOR_IN
35509: IFFALSE 35563
// begin if GetDistUnits ( i , LegionFriend ) < 8 then
35511: LD_VAR 0 1
35515: PPUSH
35516: LD_EXP 52
35520: PPUSH
35521: CALL_OW 296
35525: PUSH
35526: LD_INT 8
35528: LESS
35529: IFFALSE 35561
// begin disable ;
35531: DISABLE
// DialogueOn ;
35532: CALL_OW 6
// CenterNowOnUnits ( LegionFriend ) ;
35536: LD_EXP 52
35540: PPUSH
35541: CALL_OW 87
// Say ( LegionFriend , D16a-Friend-1 ) ;
35545: LD_EXP 52
35549: PPUSH
35550: LD_STRING D16a-Friend-1
35552: PPUSH
35553: CALL_OW 88
// DialogueOff ;
35557: CALL_OW 7
// end ; end ;
35561: GO 35508
35563: POP
35564: POP
// end ;
35565: PPOPN 1
35567: END
// every 5 5$0 trigger missionStage = 6 and not GetSide ( LegionFriend ) = 1 do var rocketTarget ;
35568: LD_EXP 100
35572: PUSH
35573: LD_INT 6
35575: EQUAL
35576: PUSH
35577: LD_EXP 52
35581: PPUSH
35582: CALL_OW 255
35586: PUSH
35587: LD_INT 1
35589: EQUAL
35590: NOT
35591: AND
35592: IFFALSE 35972
35594: GO 35596
35596: DISABLE
35597: LD_INT 0
35599: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
35600: LD_INT 22
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 2
35612: PUSH
35613: LD_INT 34
35615: PUSH
35616: LD_INT 8
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 35
35625: PUSH
35626: LD_INT 8
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PPUSH
35642: CALL_OW 69
35646: PUSH
35647: LD_INT 0
35649: GREATER
35650: IFFALSE 35674
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
35652: LD_EXP 26
35656: PPUSH
35657: LD_STRING D16c-Pla-1
35659: PPUSH
35660: CALL_OW 94
// playerHaveRocket = 1 ;
35664: LD_ADDR_EXP 99
35668: PUSH
35669: LD_INT 1
35671: ST_TO_ADDR
// end else
35672: GO 35972
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
35674: LD_EXP 26
35678: PPUSH
35679: LD_STRING D16b-Pla-1
35681: PPUSH
35682: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
35686: LD_EXP 1
35690: PPUSH
35691: LD_STRING D16b-JMM-1
35693: PPUSH
35694: CALL_OW 88
// wait ( 0 0$15 ) ;
35698: LD_INT 525
35700: PPUSH
35701: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35705: LD_EXP 26
35709: PPUSH
35710: LD_STRING D18-Pla-1
35712: PPUSH
35713: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35717: LD_ADDR_VAR 0 1
35721: PUSH
35722: LD_INT 22
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 21
35734: PUSH
35735: LD_INT 3
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 23
35744: PUSH
35745: LD_INT 1
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 2
35754: PUSH
35755: LD_INT 30
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 30
35767: PUSH
35768: LD_INT 1
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: LIST
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: PPUSH
35786: CALL_OW 69
35790: ST_TO_ADDR
// if rocketTarget = 0 then
35791: LD_VAR 0 1
35795: PUSH
35796: LD_INT 0
35798: EQUAL
35799: IFFALSE 35875
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35801: LD_ADDR_VAR 0 1
35805: PUSH
35806: LD_INT 22
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 21
35818: PUSH
35819: LD_INT 3
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 23
35828: PUSH
35829: LD_INT 2
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 2
35838: PUSH
35839: LD_INT 30
35841: PUSH
35842: LD_INT 0
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 30
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: LIST
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: PPUSH
35870: CALL_OW 69
35874: ST_TO_ADDR
// if rocketTarget = 0 then
35875: LD_VAR 0 1
35879: PUSH
35880: LD_INT 0
35882: EQUAL
35883: IFFALSE 35937
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
35885: LD_ADDR_VAR 0 1
35889: PUSH
35890: LD_INT 22
35892: PUSH
35893: LD_INT 1
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 21
35902: PUSH
35903: LD_INT 1
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 23
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 50
35922: PUSH
35923: EMPTY
35924: LIST
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: PPUSH
35932: CALL_OW 69
35936: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
35937: LD_INT 273
35939: PPUSH
35940: LD_VAR 0 1
35944: PUSH
35945: LD_INT 1
35947: ARRAY
35948: PPUSH
35949: CALL_OW 250
35953: PPUSH
35954: LD_VAR 0 1
35958: PUSH
35959: LD_INT 1
35961: ARRAY
35962: PPUSH
35963: CALL_OW 251
35967: PPUSH
35968: CALL_OW 116
// end ; end ;
35972: PPOPN 1
35974: END
// every 0 0$1 trigger timeAction >= 80 80$02 and missionStage >= 6 and AllianceAI = 1 do
35975: LD_EXP 96
35979: PUSH
35980: LD_INT 168070
35982: GREATEREQUAL
35983: PUSH
35984: LD_EXP 100
35988: PUSH
35989: LD_INT 6
35991: GREATEREQUAL
35992: AND
35993: PUSH
35994: LD_EXP 84
35998: PUSH
35999: LD_INT 1
36001: EQUAL
36002: AND
36003: IFFALSE 36033
36005: GO 36007
36007: DISABLE
// begin Say ( Platonov , D18-Pla-1 ) ;
36008: LD_EXP 26
36012: PPUSH
36013: LD_STRING D18-Pla-1
36015: PPUSH
36016: CALL_OW 88
// ComAttackPlace ( rurocket , 244 , 187 ) ;
36020: LD_INT 273
36022: PPUSH
36023: LD_INT 244
36025: PPUSH
36026: LD_INT 187
36028: PPUSH
36029: CALL_OW 116
// end ;
36033: END
// every 0 0$3 trigger missionStage >= 5 do var i ;
36034: LD_EXP 100
36038: PUSH
36039: LD_INT 5
36041: GREATEREQUAL
36042: IFFALSE 36235
36044: GO 36046
36046: DISABLE
36047: LD_INT 0
36049: PPUSH
// begin enable ;
36050: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_behemoth ] , [ f_constructed ] ] ) do
36051: LD_ADDR_VAR 0 1
36055: PUSH
36056: LD_INT 22
36058: PUSH
36059: LD_INT 6
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 30
36068: PUSH
36069: LD_INT 37
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 57
36078: PUSH
36079: EMPTY
36080: LIST
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: LIST
36086: PPUSH
36087: CALL_OW 69
36091: PUSH
36092: FOR_IN
36093: IFFALSE 36147
// begin if See ( 1 , i ) then
36095: LD_INT 1
36097: PPUSH
36098: LD_VAR 0 1
36102: PPUSH
36103: CALL_OW 292
36107: IFFALSE 36145
// begin disable ;
36109: DISABLE
// DialogueOn ;
36110: CALL_OW 6
// Say ( JMM , D17a-JMM-1 ) ;
36114: LD_EXP 1
36118: PPUSH
36119: LD_STRING D17a-JMM-1
36121: PPUSH
36122: CALL_OW 88
// DialogueOff ;
36126: CALL_OW 7
// behemothStatus = 1 ;
36130: LD_ADDR_EXP 59
36134: PUSH
36135: LD_INT 1
36137: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
36138: LD_STRING M4a
36140: PPUSH
36141: CALL_OW 337
// end ; end ;
36145: GO 36092
36147: POP
36148: POP
// for i in ruBehs do
36149: LD_ADDR_VAR 0 1
36153: PUSH
36154: LD_EXP 58
36158: PUSH
36159: FOR_IN
36160: IFFALSE 36233
// begin if See ( 1 , i ) then
36162: LD_INT 1
36164: PPUSH
36165: LD_VAR 0 1
36169: PPUSH
36170: CALL_OW 292
36174: IFFALSE 36231
// begin disable ;
36176: DISABLE
// DialogueOn ;
36177: CALL_OW 6
// Say ( JMM , D17b-JMM-1 ) ;
36181: LD_EXP 1
36185: PPUSH
36186: LD_STRING D17b-JMM-1
36188: PPUSH
36189: CALL_OW 88
// DialogueOff ;
36193: CALL_OW 7
// behemothStatus = 0 ;
36197: LD_ADDR_EXP 59
36201: PUSH
36202: LD_INT 0
36204: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
36205: LD_STRING M4b
36207: PPUSH
36208: CALL_OW 337
// wait ( 0 0$2 ) ;
36212: LD_INT 70
36214: PPUSH
36215: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36219: LD_EXP 26
36223: PPUSH
36224: LD_STRING D18-Pla-1
36226: PPUSH
36227: CALL_OW 88
// end ; end ;
36231: GO 36159
36233: POP
36234: POP
// end ;
36235: PPOPN 1
36237: END
// every 1 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 ] [ Difficulty ] do var i , tmp , arabianArmy ;
36238: LD_EXP 26
36242: PPUSH
36243: CALL_OW 301
36247: PUSH
36248: LD_EXP 27
36252: PPUSH
36253: CALL_OW 301
36257: AND
36258: PUSH
36259: LD_INT 22
36261: PUSH
36262: LD_INT 3
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 21
36271: PUSH
36272: LD_INT 1
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 50
36281: PUSH
36282: EMPTY
36283: LIST
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: LIST
36289: PPUSH
36290: CALL_OW 69
36294: PUSH
36295: LD_INT 7
36297: PUSH
36298: LD_INT 8
36300: PUSH
36301: LD_INT 9
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: LIST
36308: PUSH
36309: LD_OWVAR 67
36313: ARRAY
36314: LESS
36315: AND
36316: IFFALSE 36992
36318: GO 36320
36320: DISABLE
36321: LD_INT 0
36323: PPUSH
36324: PPUSH
36325: PPUSH
// begin russianAI = 0 ;
36326: LD_ADDR_EXP 85
36330: PUSH
36331: LD_INT 0
36333: ST_TO_ADDR
// russianEscape = 1 ;
36334: LD_ADDR_EXP 89
36338: PUSH
36339: LD_INT 1
36341: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , true ) ;
36342: LD_INT 1
36344: PPUSH
36345: LD_INT 3
36347: PPUSH
36348: LD_INT 1
36350: PPUSH
36351: LD_INT 1
36353: PPUSH
36354: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 900 ] ] ) do
36358: LD_ADDR_VAR 0 1
36362: PUSH
36363: LD_INT 22
36365: PUSH
36366: LD_INT 3
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 21
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 24
36385: PUSH
36386: LD_INT 900
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: LIST
36397: PPUSH
36398: CALL_OW 69
36402: PUSH
36403: FOR_IN
36404: IFFALSE 36435
// if GetSex ( i ) = sex_male then
36406: LD_VAR 0 1
36410: PPUSH
36411: CALL_OW 258
36415: PUSH
36416: LD_INT 1
36418: EQUAL
36419: IFFALSE 36433
// begin tmp = i ;
36421: LD_ADDR_VAR 0 2
36425: PUSH
36426: LD_VAR 0 1
36430: ST_TO_ADDR
// break ;
36431: GO 36435
// end ;
36433: GO 36403
36435: POP
36436: POP
// if tmp = 0 then
36437: LD_VAR 0 2
36441: PUSH
36442: LD_INT 0
36444: EQUAL
36445: IFFALSE 36499
// begin uc_side = 3 ;
36447: LD_ADDR_OWVAR 20
36451: PUSH
36452: LD_INT 3
36454: ST_TO_ADDR
// uc_nation = 3 ;
36455: LD_ADDR_OWVAR 21
36459: PUSH
36460: LD_INT 3
36462: ST_TO_ADDR
// hc_name =  ;
36463: LD_ADDR_OWVAR 26
36467: PUSH
36468: LD_STRING 
36470: ST_TO_ADDR
// hc_gallery =  ;
36471: LD_ADDR_OWVAR 33
36475: PUSH
36476: LD_STRING 
36478: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
36479: LD_INT 1
36481: PPUSH
36482: LD_INT 10
36484: PPUSH
36485: CALL_OW 381
// tmp = CreateHuman ;
36489: LD_ADDR_VAR 0 2
36493: PUSH
36494: CALL_OW 44
36498: ST_TO_ADDR
// end ; DialogueOn ;
36499: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
36503: LD_VAR 0 2
36507: PPUSH
36508: LD_STRING DSurrenderRussians-RSol1-1a
36510: PPUSH
36511: CALL_OW 88
// DialogueOff ;
36515: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
36519: LD_INT 22
36521: PUSH
36522: LD_INT 3
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 21
36531: PUSH
36532: LD_INT 1
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PPUSH
36543: CALL_OW 69
36547: PPUSH
36548: CALL_OW 122
// wait ( 0 0$1 ) ;
36552: LD_INT 35
36554: PPUSH
36555: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , RussianEscapeArea ) ;
36559: LD_INT 22
36561: PUSH
36562: LD_INT 3
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 21
36571: PUSH
36572: LD_INT 1
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PPUSH
36583: CALL_OW 69
36587: PPUSH
36588: LD_INT 25
36590: PPUSH
36591: CALL_OW 113
// wait ( 0 0$10 ) ;
36595: LD_INT 350
36597: PPUSH
36598: CALL_OW 67
// PrepareOmarArmy ;
36602: CALL 37612 0 0
// missionStage = 7 ;
36606: LD_ADDR_EXP 100
36610: PUSH
36611: LD_INT 7
36613: ST_TO_ADDR
// PlaceSeeing ( 157 , 8 , 1 , - 8 ) ;
36614: LD_INT 157
36616: PPUSH
36617: LD_INT 8
36619: PPUSH
36620: LD_INT 1
36622: PPUSH
36623: LD_INT 8
36625: NEG
36626: PPUSH
36627: CALL_OW 330
// CenterOnXY ( 157 , 8 ) ;
36631: LD_INT 157
36633: PPUSH
36634: LD_INT 8
36636: PPUSH
36637: CALL_OW 84
// DialogueOn ;
36641: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
36645: LD_EXP 32
36649: PPUSH
36650: CALL_OW 87
// Say ( JMM , D19-JMM-1 ) ;
36654: LD_EXP 1
36658: PPUSH
36659: LD_STRING D19-JMM-1
36661: PPUSH
36662: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D19-Sol1-1 , D5-FSol1-1 ) ;
36666: LD_INT 22
36668: PUSH
36669: LD_INT 1
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 26
36678: PUSH
36679: LD_INT 1
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 2
36688: PUSH
36689: LD_INT 25
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 25
36701: PUSH
36702: LD_INT 2
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 25
36711: PUSH
36712: LD_INT 3
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 25
36721: PUSH
36722: LD_INT 4
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 25
36731: PUSH
36732: LD_INT 5
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 25
36741: PUSH
36742: LD_INT 8
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: LIST
36762: PPUSH
36763: CALL_OW 69
36767: PPUSH
36768: LD_STRING D19-Sol1-1
36770: PPUSH
36771: LD_STRING D5-FSol1-1
36773: PPUSH
36774: CALL 6913 0 3
// Say ( JMM , D19-JMM-2 ) ;
36778: LD_EXP 1
36782: PPUSH
36783: LD_STRING D19-JMM-2
36785: PPUSH
36786: CALL_OW 88
// DialogueOff ;
36790: CALL_OW 7
// LaunchMines ;
36794: CALL 37101 0 0
// wait ( 0 0$3 ) ;
36798: LD_INT 105
36800: PPUSH
36801: CALL_OW 67
// arabianArmy = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
36805: LD_ADDR_VAR 0 3
36809: PUSH
36810: LD_INT 22
36812: PUSH
36813: LD_INT 2
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 21
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PPUSH
36834: CALL_OW 69
36838: PUSH
36839: LD_INT 22
36841: PUSH
36842: LD_INT 2
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 21
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 25
36861: PUSH
36862: LD_INT 4
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: LIST
36873: PPUSH
36874: CALL_OW 69
36878: DIFF
36879: ST_TO_ADDR
// arabianArmy = arabianArmy ^ FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
36880: LD_ADDR_VAR 0 3
36884: PUSH
36885: LD_VAR 0 3
36889: PUSH
36890: LD_INT 22
36892: PUSH
36893: LD_INT 2
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 21
36902: PUSH
36903: LD_INT 2
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PPUSH
36914: CALL_OW 69
36918: ADD
36919: ST_TO_ADDR
// ComAgressiveMove ( arabianArmy , 178 , 66 ) ;
36920: LD_VAR 0 3
36924: PPUSH
36925: LD_INT 178
36927: PPUSH
36928: LD_INT 66
36930: PPUSH
36931: CALL_OW 114
// wait ( 0 0$10 ) ;
36935: LD_INT 350
36937: PPUSH
36938: CALL_OW 67
// ComContaminate ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) , 177 , 69 ) ;
36942: LD_INT 22
36944: PUSH
36945: LD_INT 2
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 21
36954: PUSH
36955: LD_INT 1
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 25
36964: PUSH
36965: LD_INT 4
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: LIST
36976: PPUSH
36977: CALL_OW 69
36981: PPUSH
36982: LD_INT 177
36984: PPUSH
36985: LD_INT 69
36987: PPUSH
36988: CALL_OW 158
// end ;
36992: PPOPN 3
36994: END
// every 0 0$1 trigger russianEscape = 1 and FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i ;
36995: LD_EXP 89
36999: PUSH
37000: LD_INT 1
37002: EQUAL
37003: PUSH
37004: LD_INT 25
37006: PPUSH
37007: LD_INT 22
37009: PUSH
37010: LD_INT 3
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 21
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PPUSH
37031: CALL_OW 70
37035: AND
37036: IFFALSE 37098
37038: GO 37040
37040: DISABLE
37041: LD_INT 0
37043: PPUSH
// begin enable ;
37044: ENABLE
// for i in FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
37045: LD_ADDR_VAR 0 1
37049: PUSH
37050: LD_INT 25
37052: PPUSH
37053: LD_INT 22
37055: PUSH
37056: LD_INT 3
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 21
37065: PUSH
37066: LD_INT 1
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PPUSH
37077: CALL_OW 70
37081: PUSH
37082: FOR_IN
37083: IFFALSE 37096
// RemoveUnit ( i ) ;
37085: LD_VAR 0 1
37089: PPUSH
37090: CALL_OW 64
37094: GO 37082
37096: POP
37097: POP
// end ;
37098: PPOPN 1
37100: END
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
37101: LD_INT 0
37103: PPUSH
37104: PPUSH
37105: PPUSH
37106: PPUSH
37107: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
37108: LD_ADDR_VAR 0 2
37112: PUSH
37113: LD_INT 168
37115: PUSH
37116: LD_INT 18
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 169
37125: PUSH
37126: LD_INT 20
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 167
37135: PUSH
37136: LD_INT 20
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 164
37145: PUSH
37146: LD_INT 18
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 164
37155: PUSH
37156: LD_INT 19
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 163
37165: PUSH
37166: LD_INT 19
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 164
37175: PUSH
37176: LD_INT 21
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 165
37185: PUSH
37186: LD_INT 21
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 163
37195: PUSH
37196: LD_INT 20
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 164
37205: PUSH
37206: LD_INT 22
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 162
37215: PUSH
37216: LD_INT 20
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
37236: LD_ADDR_VAR 0 3
37240: PUSH
37241: LD_INT 169
37243: PUSH
37244: LD_INT 34
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 169
37253: PUSH
37254: LD_INT 35
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 167
37263: PUSH
37264: LD_INT 32
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 170
37273: PUSH
37274: LD_INT 31
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 173
37283: PUSH
37284: LD_INT 35
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 174
37293: PUSH
37294: LD_INT 39
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: ST_TO_ADDR
// for i = 1 to mines_pos do
37309: LD_ADDR_VAR 0 4
37313: PUSH
37314: DOUBLE
37315: LD_INT 1
37317: DEC
37318: ST_TO_ADDR
37319: LD_VAR 0 2
37323: PUSH
37324: FOR_TO
37325: IFFALSE 37537
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
37327: LD_VAR 0 2
37331: PUSH
37332: LD_VAR 0 4
37336: ARRAY
37337: PUSH
37338: LD_INT 1
37340: ARRAY
37341: PPUSH
37342: LD_VAR 0 2
37346: PUSH
37347: LD_VAR 0 4
37351: ARRAY
37352: PUSH
37353: LD_INT 2
37355: ARRAY
37356: PPUSH
37357: LD_INT 1
37359: PPUSH
37360: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
37364: LD_INT 1
37366: PPUSH
37367: LD_INT 3
37369: PPUSH
37370: CALL_OW 12
37374: PPUSH
37375: CALL_OW 67
// if i < mines_pos then
37379: LD_VAR 0 4
37383: PUSH
37384: LD_VAR 0 2
37388: LESS
37389: IFFALSE 37427
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
37391: LD_VAR 0 2
37395: PUSH
37396: LD_VAR 0 4
37400: ARRAY
37401: PUSH
37402: LD_INT 1
37404: ARRAY
37405: PPUSH
37406: LD_VAR 0 2
37410: PUSH
37411: LD_VAR 0 4
37415: ARRAY
37416: PUSH
37417: LD_INT 2
37419: ARRAY
37420: PPUSH
37421: CALL_OW 348
37425: GO 37535
// begin for j = 1 to mines_pos1 do
37427: LD_ADDR_VAR 0 5
37431: PUSH
37432: DOUBLE
37433: LD_INT 1
37435: DEC
37436: ST_TO_ADDR
37437: LD_VAR 0 3
37441: PUSH
37442: FOR_TO
37443: IFFALSE 37499
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
37445: LD_VAR 0 3
37449: PUSH
37450: LD_VAR 0 5
37454: ARRAY
37455: PUSH
37456: LD_INT 1
37458: ARRAY
37459: PPUSH
37460: LD_VAR 0 3
37464: PUSH
37465: LD_VAR 0 5
37469: ARRAY
37470: PUSH
37471: LD_INT 2
37473: ARRAY
37474: PPUSH
37475: LD_INT 1
37477: PPUSH
37478: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
37482: LD_INT 1
37484: PPUSH
37485: LD_INT 3
37487: PPUSH
37488: CALL_OW 12
37492: PPUSH
37493: CALL_OW 67
// end ;
37497: GO 37442
37499: POP
37500: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
37501: LD_VAR 0 2
37505: PUSH
37506: LD_VAR 0 4
37510: ARRAY
37511: PUSH
37512: LD_INT 1
37514: ARRAY
37515: PPUSH
37516: LD_VAR 0 2
37520: PUSH
37521: LD_VAR 0 4
37525: ARRAY
37526: PUSH
37527: LD_INT 2
37529: ARRAY
37530: PPUSH
37531: CALL_OW 347
// end ; end ;
37535: GO 37324
37537: POP
37538: POP
// end ;
37539: LD_VAR 0 1
37543: RET
// every 0 0$1 trigger missionStage = 7 and IsDead ( Omar ) and IsOk ( Heike ) do
37544: LD_EXP 100
37548: PUSH
37549: LD_INT 7
37551: EQUAL
37552: PUSH
37553: LD_EXP 31
37557: PPUSH
37558: CALL_OW 301
37562: AND
37563: PUSH
37564: LD_EXP 32
37568: PPUSH
37569: CALL_OW 302
37573: AND
37574: IFFALSE 37611
37576: GO 37578
37578: DISABLE
// begin DialogueOn ;
37579: CALL_OW 6
// Say ( JMM , D19a-JMM-1 ) ;
37583: LD_EXP 1
37587: PPUSH
37588: LD_STRING D19a-JMM-1
37590: PPUSH
37591: CALL_OW 88
// Say ( Heike , D19a-Hke-1 ) ;
37595: LD_EXP 32
37599: PPUSH
37600: LD_STRING D19a-Hke-1
37602: PPUSH
37603: CALL_OW 88
// DialogueOff ;
37607: CALL_OW 7
// end ; end_of_file
37611: END
// export function PrepareOmarArmy ; var i , un , veh , omarMastodont ; begin
37612: LD_INT 0
37614: PPUSH
37615: PPUSH
37616: PPUSH
37617: PPUSH
37618: PPUSH
// uc_side = 2 ;
37619: LD_ADDR_OWVAR 20
37623: PUSH
37624: LD_INT 2
37626: ST_TO_ADDR
// uc_nation = 2 ;
37627: LD_ADDR_OWVAR 21
37631: PUSH
37632: LD_INT 2
37634: ST_TO_ADDR
// Omar = PrepareUnit ( Omar , false ) ;
37635: LD_ADDR_EXP 31
37639: PUSH
37640: LD_STRING Omar
37642: PPUSH
37643: LD_INT 0
37645: PPUSH
37646: CALL 6633 0 2
37650: ST_TO_ADDR
// Heike = PrepareUnit ( Heike , false ) ;
37651: LD_ADDR_EXP 32
37655: PUSH
37656: LD_STRING Heike
37658: PPUSH
37659: LD_INT 0
37661: PPUSH
37662: CALL 6633 0 2
37666: ST_TO_ADDR
// PlaceUnitArea ( Heike , ArabianSpawn , false ) ;
37667: LD_EXP 32
37671: PPUSH
37672: LD_INT 26
37674: PPUSH
37675: LD_INT 0
37677: PPUSH
37678: CALL_OW 49
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
37682: LD_ADDR_VAR 0 2
37686: PUSH
37687: DOUBLE
37688: LD_INT 1
37690: DEC
37691: ST_TO_ADDR
37692: LD_INT 5
37694: PUSH
37695: LD_INT 6
37697: PUSH
37698: LD_INT 7
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: LIST
37705: PUSH
37706: LD_OWVAR 67
37710: ARRAY
37711: PUSH
37712: FOR_TO
37713: IFFALSE 37768
// begin hc_name =  ;
37715: LD_ADDR_OWVAR 26
37719: PUSH
37720: LD_STRING 
37722: ST_TO_ADDR
// hc_gallery =  ;
37723: LD_ADDR_OWVAR 33
37727: PUSH
37728: LD_STRING 
37730: ST_TO_ADDR
// PrepareSoldier ( false , 8 ) ;
37731: LD_INT 0
37733: PPUSH
37734: LD_INT 8
37736: PPUSH
37737: CALL_OW 381
// un = CreateHuman ;
37741: LD_ADDR_VAR 0 3
37745: PUSH
37746: CALL_OW 44
37750: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
37751: LD_VAR 0 3
37755: PPUSH
37756: LD_INT 26
37758: PPUSH
37759: LD_INT 0
37761: PPUSH
37762: CALL_OW 49
// end ;
37766: GO 37712
37768: POP
37769: POP
// for i := 1 to 4 do
37770: LD_ADDR_VAR 0 2
37774: PUSH
37775: DOUBLE
37776: LD_INT 1
37778: DEC
37779: ST_TO_ADDR
37780: LD_INT 4
37782: PUSH
37783: FOR_TO
37784: IFFALSE 37839
// begin hc_name =  ;
37786: LD_ADDR_OWVAR 26
37790: PUSH
37791: LD_STRING 
37793: ST_TO_ADDR
// hc_gallery =  ;
37794: LD_ADDR_OWVAR 33
37798: PUSH
37799: LD_STRING 
37801: ST_TO_ADDR
// PrepareScientist ( false , 8 ) ;
37802: LD_INT 0
37804: PPUSH
37805: LD_INT 8
37807: PPUSH
37808: CALL_OW 384
// un = CreateHuman ;
37812: LD_ADDR_VAR 0 3
37816: PUSH
37817: CALL_OW 44
37821: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
37822: LD_VAR 0 3
37826: PPUSH
37827: LD_INT 26
37829: PPUSH
37830: LD_INT 0
37832: PPUSH
37833: CALL_OW 49
// end ;
37837: GO 37783
37839: POP
37840: POP
// for i := 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
37841: LD_ADDR_VAR 0 2
37845: PUSH
37846: DOUBLE
37847: LD_INT 1
37849: DEC
37850: ST_TO_ADDR
37851: LD_INT 8
37853: PUSH
37854: LD_INT 9
37856: PUSH
37857: LD_INT 10
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: LIST
37864: PUSH
37865: LD_OWVAR 67
37869: ARRAY
37870: PUSH
37871: FOR_TO
37872: IFFALSE 37960
// begin vc_engine = 3 ;
37874: LD_ADDR_OWVAR 39
37878: PUSH
37879: LD_INT 3
37881: ST_TO_ADDR
// vc_control = 5 ;
37882: LD_ADDR_OWVAR 38
37886: PUSH
37887: LD_INT 5
37889: ST_TO_ADDR
// vc_chassis = 14 ;
37890: LD_ADDR_OWVAR 37
37894: PUSH
37895: LD_INT 14
37897: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 , 25 ] [ Rand ( 1 , 3 ) ] ;
37898: LD_ADDR_OWVAR 40
37902: PUSH
37903: LD_INT 27
37905: PUSH
37906: LD_INT 26
37908: PUSH
37909: LD_INT 28
37911: PUSH
37912: LD_INT 25
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: PPUSH
37924: LD_INT 3
37926: PPUSH
37927: CALL_OW 12
37931: ARRAY
37932: ST_TO_ADDR
// veh = CreateVehicle ;
37933: LD_ADDR_VAR 0 4
37937: PUSH
37938: CALL_OW 45
37942: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawn , false ) ;
37943: LD_VAR 0 4
37947: PPUSH
37948: LD_INT 26
37950: PPUSH
37951: LD_INT 0
37953: PPUSH
37954: CALL_OW 49
// end ;
37958: GO 37871
37960: POP
37961: POP
// vc_chassis := 31 ;
37962: LD_ADDR_OWVAR 37
37966: PUSH
37967: LD_INT 31
37969: ST_TO_ADDR
// vc_control := control_rider ;
37970: LD_ADDR_OWVAR 38
37974: PUSH
37975: LD_INT 4
37977: ST_TO_ADDR
// omarMastodont := CreateVehicle ;
37978: LD_ADDR_VAR 0 5
37982: PUSH
37983: CALL_OW 45
37987: ST_TO_ADDR
// PlaceUnitArea ( omarMastodont , ArabianSpawn , false ) ;
37988: LD_VAR 0 5
37992: PPUSH
37993: LD_INT 26
37995: PPUSH
37996: LD_INT 0
37998: PPUSH
37999: CALL_OW 49
// PlaceHumanInUnit ( Omar , omarMastodont ) ;
38003: LD_EXP 31
38007: PPUSH
38008: LD_VAR 0 5
38012: PPUSH
38013: CALL_OW 52
// end ; end_of_file
38017: LD_VAR 0 1
38021: RET
// every 1 1$30 trigger missionStage > 0 do
38022: LD_EXP 100
38026: PUSH
38027: LD_INT 0
38029: GREATER
38030: IFFALSE 38057
38032: GO 38034
38034: DISABLE
// begin enable ;
38035: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
38036: LD_INT 3
38038: PPUSH
38039: LD_INT 5
38041: PPUSH
38042: CALL_OW 12
38046: PPUSH
38047: LD_INT 27
38049: PPUSH
38050: LD_INT 1
38052: PPUSH
38053: CALL_OW 55
// end ; end_of_file
38057: END
// every 0 0$1 trigger missionStage = 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
38058: LD_EXP 100
38062: PUSH
38063: LD_INT 7
38065: EQUAL
38066: PUSH
38067: LD_INT 22
38069: PUSH
38070: LD_INT 2
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 21
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PPUSH
38091: CALL_OW 69
38095: PUSH
38096: LD_INT 0
38098: EQUAL
38099: AND
38100: PUSH
38101: LD_INT 22
38103: PUSH
38104: LD_INT 2
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 21
38113: PUSH
38114: LD_INT 2
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 50
38123: PUSH
38124: EMPTY
38125: LIST
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: LIST
38131: PPUSH
38132: CALL_OW 69
38136: PUSH
38137: LD_INT 0
38139: EQUAL
38140: AND
38141: IFFALSE 38630
38143: GO 38145
38145: DISABLE
// begin DialogueOn ;
38146: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
38150: LD_EXP 1
38154: PPUSH
38155: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
38159: LD_EXP 1
38163: PPUSH
38164: LD_STRING D20-JMM-1
38166: PPUSH
38167: CALL_OW 88
// if IsOK ( Joan ) then
38171: LD_EXP 2
38175: PPUSH
38176: CALL_OW 302
38180: IFFALSE 38194
// Say ( Joan , D20-Joan-1 ) ;
38182: LD_EXP 2
38186: PPUSH
38187: LD_STRING D20-Joan-1
38189: PPUSH
38190: CALL_OW 88
// if IsOk ( Lisa ) then
38194: LD_EXP 4
38198: PPUSH
38199: CALL_OW 302
38203: IFFALSE 38217
// Say ( Lisa , D20-Lisa-1 ) ;
38205: LD_EXP 4
38209: PPUSH
38210: LD_STRING D20-Lisa-1
38212: PPUSH
38213: CALL_OW 88
// if IsOk ( Donaldson ) then
38217: LD_EXP 5
38221: PPUSH
38222: CALL_OW 302
38226: IFFALSE 38240
// Say ( Donaldson , D20-Don-1 ) ;
38228: LD_EXP 5
38232: PPUSH
38233: LD_STRING D20-Don-1
38235: PPUSH
38236: CALL_OW 88
// if IsOK ( Cornel ) then
38240: LD_EXP 12
38244: PPUSH
38245: CALL_OW 302
38249: IFFALSE 38263
// Say ( Cornel , D20-Corn-1 ) ;
38251: LD_EXP 12
38255: PPUSH
38256: LD_STRING D20-Corn-1
38258: PPUSH
38259: CALL_OW 88
// if IsOk ( Denis ) then
38263: LD_EXP 8
38267: PPUSH
38268: CALL_OW 302
38272: IFFALSE 38286
// Say ( Denis , D20-Den-1 ) ;
38274: LD_EXP 8
38278: PPUSH
38279: LD_STRING D20-Den-1
38281: PPUSH
38282: CALL_OW 88
// if IsOk ( Bobby ) then
38286: LD_EXP 6
38290: PPUSH
38291: CALL_OW 302
38295: IFFALSE 38309
// Say ( Bobby , D20-Bobby-1 ) ;
38297: LD_EXP 6
38301: PPUSH
38302: LD_STRING D20-Bobby-1
38304: PPUSH
38305: CALL_OW 88
// if IsOk ( Gladstone ) then
38309: LD_EXP 10
38313: PPUSH
38314: CALL_OW 302
38318: IFFALSE 38332
// Say ( Gladstone , D20-Glad-1 ) ;
38320: LD_EXP 10
38324: PPUSH
38325: LD_STRING D20-Glad-1
38327: PPUSH
38328: CALL_OW 88
// if IsOk ( Cyrus ) then
38332: LD_EXP 7
38336: PPUSH
38337: CALL_OW 302
38341: IFFALSE 38355
// Say ( Cyrus , D20-Cyrus-1 ) ;
38343: LD_EXP 7
38347: PPUSH
38348: LD_STRING D20-Cyrus-1
38350: PPUSH
38351: CALL_OW 88
// if IsOk ( Stevens ) then
38355: LD_EXP 3
38359: PPUSH
38360: CALL_OW 302
38364: IFFALSE 38378
// Say ( Stevens , D20-Huck-1 ) ;
38366: LD_EXP 3
38370: PPUSH
38371: LD_STRING D20-Huck-1
38373: PPUSH
38374: CALL_OW 88
// if IsOk ( Brown ) then
38378: LD_EXP 9
38382: PPUSH
38383: CALL_OW 302
38387: IFFALSE 38401
// Say ( Brown , D20-Brown-1 ) ;
38389: LD_EXP 9
38393: PPUSH
38394: LD_STRING D20-Brown-1
38396: PPUSH
38397: CALL_OW 88
// if IsOk ( Gary ) then
38401: LD_EXP 13
38405: PPUSH
38406: CALL_OW 302
38410: IFFALSE 38424
// Say ( Gary , D20-Gary-1 ) ;
38412: LD_EXP 13
38416: PPUSH
38417: LD_STRING D20-Gary-1
38419: PPUSH
38420: CALL_OW 88
// if IsOk ( Connie ) then
38424: LD_EXP 16
38428: PPUSH
38429: CALL_OW 302
38433: IFFALSE 38447
// Say ( Connie , D20-Con-1 ) ;
38435: LD_EXP 16
38439: PPUSH
38440: LD_STRING D20-Con-1
38442: PPUSH
38443: CALL_OW 88
// if IsOk ( Kurt ) then
38447: LD_EXP 30
38451: PPUSH
38452: CALL_OW 302
38456: IFFALSE 38470
// Say ( Kurt , D20-Kurt-1 ) ;
38458: LD_EXP 30
38462: PPUSH
38463: LD_STRING D20-Kurt-1
38465: PPUSH
38466: CALL_OW 88
// if IsOk ( Kikuchi ) then
38470: LD_EXP 15
38474: PPUSH
38475: CALL_OW 302
38479: IFFALSE 38493
// Say ( Kikuchi , D20-Yam-1 ) ;
38481: LD_EXP 15
38485: PPUSH
38486: LD_STRING D20-Yam-1
38488: PPUSH
38489: CALL_OW 88
// if IsOk ( Frank ) then
38493: LD_EXP 14
38497: PPUSH
38498: CALL_OW 302
38502: IFFALSE 38516
// Say ( Frank , D20-Frank-1 ) ;
38504: LD_EXP 14
38508: PPUSH
38509: LD_STRING D20-Frank-1
38511: PPUSH
38512: CALL_OW 88
// DialogueOff ;
38516: CALL_OW 7
// if AllianceEscape = 1 then
38520: LD_EXP 90
38524: PUSH
38525: LD_INT 1
38527: EQUAL
38528: IFFALSE 38542
// AddMedal ( Roth , 1 ) else
38530: LD_STRING Roth
38532: PPUSH
38533: LD_INT 1
38535: PPUSH
38536: CALL_OW 101
38540: GO 38553
// AddMedal ( Roth , - 1 ) ;
38542: LD_STRING Roth
38544: PPUSH
38545: LD_INT 1
38547: NEG
38548: PPUSH
38549: CALL_OW 101
// if behemothStatus = 1 then
38553: LD_EXP 59
38557: PUSH
38558: LD_INT 1
38560: EQUAL
38561: IFFALSE 38575
// AddMedal ( Project , 1 ) else
38563: LD_STRING Project
38565: PPUSH
38566: LD_INT 1
38568: PPUSH
38569: CALL_OW 101
38573: GO 38586
// AddMedal ( Project , - 1 ) ;
38575: LD_STRING Project
38577: PPUSH
38578: LD_INT 1
38580: NEG
38581: PPUSH
38582: CALL_OW 101
// if unitLost = 0 then
38586: LD_EXP 97
38590: PUSH
38591: LD_INT 0
38593: EQUAL
38594: IFFALSE 38608
// AddMedal ( NoLosses , 1 ) else
38596: LD_STRING NoLosses
38598: PPUSH
38599: LD_INT 1
38601: PPUSH
38602: CALL_OW 101
38606: GO 38619
// AddMedal ( NoLosses , - 1 ) ;
38608: LD_STRING NoLosses
38610: PPUSH
38611: LD_INT 1
38613: NEG
38614: PPUSH
38615: CALL_OW 101
// GiveMedals ( MAIN ) ;
38619: LD_STRING MAIN
38621: PPUSH
38622: CALL_OW 102
// YouWin ;
38626: CALL_OW 103
// end ; end_of_file
38630: END
// every 0 0$1 trigger IsDead ( JMM ) do
38631: LD_EXP 1
38635: PPUSH
38636: CALL_OW 301
38640: IFFALSE 38652
38642: GO 38644
38644: DISABLE
// YouLost ( JMM ) ;
38645: LD_STRING JMM
38647: PPUSH
38648: CALL_OW 104
38652: END
