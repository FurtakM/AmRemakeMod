// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 , others13Omega ; export heroesFromOmega , Baker , Gordon , Peter ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Yakotich , Roth , Burlak , Kurt , Omar , Heike , Khatam ; export Vsevolod , sewiVeh ; export Kozlov ; export Kovalyuk , Oblukov , Bystrov , Fadeev , Gleb , Petrosyan , Petrovova , Kuzmov , Mikhail , Furmanov , Belkov ; export Simms , Scholtze , Kirilenkova , Kapitsova , Karamazov ; export LegionFriend , LegionFriendStatus ; export legionVehicles ; export arControler ; export ruVehicles ; export ruBehMehs , ruBehs ; export behemothStatus ; export russianVehicles ; export allianceVehicles ; export allianceControler ; export allianceFirstContact ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export powellUnloadCargo ; export powellWarm ; export startAttacks ; export powellVeh , centerPowell , powBomb ; export BurlakStatus , StevensStatus ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus , JMMGirlStatus ; export KhatamStatus ; export LegionAI , AllianceAI , RussianAI ; export LegionTarget , AllianceTarget , RussianTarget ; export russianEscape , allianceEscape ; export RothStatus ; export legionDestroyedBuilds , russianDestroyedBuilds , allianceDestroyedBuilds ; export timerStatus , timeAction ; export unitLost ; export legionRocket ; export playerHaveRocket ; export missionStage ; export blockEvent1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 78
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 79
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 80
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 82
  58: PUSH
  59: LD_STRING 14_JMMGirlStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 81
  74: PUSH
  75: LD_STRING 14_KappaStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  86: LD_ADDR_EXP 83
  90: PUSH
  91: LD_STRING 10_KhatamStatus_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 102: LD_ADDR_EXP 76
 106: PUSH
 107: LD_STRING 13_BurlakStatus_1
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 118: LD_ADDR_EXP 77
 122: PUSH
 123: LD_STRING 13_StevensStatus_1
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: CALL_OW 30
 133: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
 134: LD_ADDR_EXP 65
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// amUnitsAttack = [ ] ;
 141: LD_ADDR_EXP 66
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 148: LD_ADDR_EXP 67
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// startAttacks = 0 ;
 155: LD_ADDR_EXP 72
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// powellBuildBase = 0 ;
 163: LD_ADDR_EXP 68
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// powellUnloadCargo = 0 ;
 171: LD_ADDR_EXP 70
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// powellAttacks = 0 ;
 179: LD_ADDR_EXP 69
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// centerPowell = 0 ;
 187: LD_ADDR_EXP 74
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// powellWarm = 0 ;
 195: LD_ADDR_EXP 71
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// LegionFriendStatus = 0 ;
 203: LD_ADDR_EXP 54
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// RothStatus = 1 ;
 211: LD_ADDR_EXP 92
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// allianceFirstContact = 0 ;
 219: LD_ADDR_EXP 64
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// legionVehicles = [ ] ;
 227: LD_ADDR_EXP 55
 231: PUSH
 232: EMPTY
 233: ST_TO_ADDR
// russianVehicles = [ ] ;
 234: LD_ADDR_EXP 61
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// allianceVehicles = [ ] ;
 241: LD_ADDR_EXP 62
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// legionDestroyedBuilds = [ ] ;
 248: LD_ADDR_EXP 93
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// russianDestroyedBuilds = [ ] ;
 255: LD_ADDR_EXP 94
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// allianceDestroyedBuilds = [ ] ;
 262: LD_ADDR_EXP 95
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ruVehicles = [ ] ;
 269: LD_ADDR_EXP 57
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ruBehMehs = [ ] ;
 276: LD_ADDR_EXP 58
 280: PUSH
 281: EMPTY
 282: ST_TO_ADDR
// ruBehs = [ ] ;
 283: LD_ADDR_EXP 59
 287: PUSH
 288: EMPTY
 289: ST_TO_ADDR
// missionStage = 0 ;
 290: LD_ADDR_EXP 101
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// behemothStatus = 0 ;
 298: LD_ADDR_EXP 60
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// unitLost = 0 ;
 306: LD_ADDR_EXP 98
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// LegionAI = 1 ;
 314: LD_ADDR_EXP 84
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// AllianceAI = 1 ;
 322: LD_ADDR_EXP 85
 326: PUSH
 327: LD_INT 1
 329: ST_TO_ADDR
// RussianAI = 1 ;
 330: LD_ADDR_EXP 86
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// timerStatus = 0 ;
 338: LD_ADDR_EXP 96
 342: PUSH
 343: LD_INT 0
 345: ST_TO_ADDR
// timeAction = 0 0$00 ;
 346: LD_ADDR_EXP 97
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// playerHaveRocket = 0 ;
 354: LD_ADDR_EXP 100
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// blockEvent1 = 0 ;
 362: LD_ADDR_EXP 102
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// debugMode = 0 ;
 370: LD_ADDR_EXP 103
 374: PUSH
 375: LD_INT 0
 377: ST_TO_ADDR
// PrepareHeroes ;
 378: CALL 727 0 0
// PrepareHeroesFromEpsilon ;
 382: CALL 1264 0 0
// PrepareRandoms ;
 386: CALL 1608 0 0
// PrepareLegion ;
 390: CALL 3851 0 0
// PrepareRussians ;
 394: CALL 4248 0 0
// PrepareAlliance ;
 398: CALL 5995 0 0
// PrepareDifficulty ;
 402: CALL 7540 0 0
// SetBName ( RuDep2 , zhukov ) ;
 406: LD_INT 23
 408: PPUSH
 409: LD_STRING zhukov
 411: PPUSH
 412: CALL_OW 500
// end ;
 416: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 417: LD_EXP 103
 421: PUSH
 422: LD_INT 1
 424: EQUAL
 425: IFFALSE 724
 427: GO 429
 429: DISABLE
 430: LD_INT 0
 432: PPUSH
// begin enable ;
 433: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 434: LD_ADDR_VAR 0 1
 438: PUSH
 439: LD_INT 22
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: PUSH
 449: LD_INT 21
 451: PUSH
 452: LD_INT 1
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PPUSH
 463: CALL_OW 69
 467: PUSH
 468: FOR_IN
 469: IFFALSE 485
// SetLives ( i , 1000 ) ;
 471: LD_VAR 0 1
 475: PPUSH
 476: LD_INT 1000
 478: PPUSH
 479: CALL_OW 234
 483: GO 468
 485: POP
 486: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 487: LD_ADDR_VAR 0 1
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 2
 504: PUSH
 505: LD_INT 30
 507: PUSH
 508: LD_INT 0
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: PUSH
 515: LD_INT 30
 517: PUSH
 518: LD_INT 1
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PPUSH
 534: CALL_OW 69
 538: PUSH
 539: FOR_IN
 540: IFFALSE 564
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 542: LD_VAR 0 1
 546: PPUSH
 547: CALL_OW 274
 551: PPUSH
 552: LD_INT 1
 554: PPUSH
 555: LD_INT 9999
 557: PPUSH
 558: CALL_OW 277
 562: GO 539
 564: POP
 565: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 566: LD_ADDR_VAR 0 1
 570: PUSH
 571: LD_INT 22
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 2
 583: PUSH
 584: LD_INT 30
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 30
 596: PUSH
 597: LD_INT 1
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 69
 617: PUSH
 618: FOR_IN
 619: IFFALSE 643
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 621: LD_VAR 0 1
 625: PPUSH
 626: CALL_OW 274
 630: PPUSH
 631: LD_INT 2
 633: PPUSH
 634: LD_INT 9999
 636: PPUSH
 637: CALL_OW 277
 641: GO 618
 643: POP
 644: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 645: LD_ADDR_VAR 0 1
 649: PUSH
 650: LD_INT 22
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 30
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: PUSH
 673: LD_INT 30
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: PUSH
 697: FOR_IN
 698: IFFALSE 722
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 700: LD_VAR 0 1
 704: PPUSH
 705: CALL_OW 274
 709: PPUSH
 710: LD_INT 3
 712: PPUSH
 713: LD_INT 9999
 715: PPUSH
 716: CALL_OW 277
 720: GO 697
 722: POP
 723: POP
// end ; end_of_file
 724: PPOPN 1
 726: END
// export function PrepareHeroes ; begin
 727: LD_INT 0
 729: PPUSH
// uc_side = 1 ;
 730: LD_ADDR_OWVAR 20
 734: PUSH
 735: LD_INT 1
 737: ST_TO_ADDR
// uc_nation = 1 ;
 738: LD_ADDR_OWVAR 21
 742: PUSH
 743: LD_INT 1
 745: ST_TO_ADDR
// if JMMVeh = [ ] then
 746: LD_EXP 78
 750: PUSH
 751: EMPTY
 752: EQUAL
 753: IFFALSE 799
// begin vc_engine = 3 ;
 755: LD_ADDR_OWVAR 39
 759: PUSH
 760: LD_INT 3
 762: ST_TO_ADDR
// vc_control = 1 ;
 763: LD_ADDR_OWVAR 38
 767: PUSH
 768: LD_INT 1
 770: ST_TO_ADDR
// vc_chassis = 5 ;
 771: LD_ADDR_OWVAR 37
 775: PUSH
 776: LD_INT 5
 778: ST_TO_ADDR
// vc_weapon = 9 ;
 779: LD_ADDR_OWVAR 40
 783: PUSH
 784: LD_INT 9
 786: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 787: LD_ADDR_EXP 24
 791: PUSH
 792: CALL_OW 45
 796: ST_TO_ADDR
// end else
 797: GO 881
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 799: LD_ADDR_OWVAR 37
 803: PUSH
 804: LD_EXP 78
 808: PUSH
 809: LD_INT 1
 811: ARRAY
 812: PUSH
 813: LD_INT 1
 815: ARRAY
 816: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 817: LD_ADDR_OWVAR 39
 821: PUSH
 822: LD_EXP 78
 826: PUSH
 827: LD_INT 2
 829: ARRAY
 830: PUSH
 831: LD_INT 1
 833: ARRAY
 834: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 835: LD_ADDR_OWVAR 38
 839: PUSH
 840: LD_EXP 78
 844: PUSH
 845: LD_INT 3
 847: ARRAY
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 853: LD_ADDR_OWVAR 40
 857: PUSH
 858: LD_EXP 78
 862: PUSH
 863: LD_INT 4
 865: ARRAY
 866: PUSH
 867: LD_INT 1
 869: ARRAY
 870: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 871: LD_ADDR_EXP 24
 875: PUSH
 876: CALL_OW 45
 880: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 881: LD_EXP 79
 885: PUSH
 886: EMPTY
 887: EQUAL
 888: NOT
 889: IFFALSE 973
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 891: LD_ADDR_OWVAR 37
 895: PUSH
 896: LD_EXP 79
 900: PUSH
 901: LD_INT 1
 903: ARRAY
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 909: LD_ADDR_OWVAR 39
 913: PUSH
 914: LD_EXP 79
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: PUSH
 923: LD_INT 1
 925: ARRAY
 926: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 927: LD_ADDR_OWVAR 38
 931: PUSH
 932: LD_EXP 79
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 945: LD_ADDR_OWVAR 40
 949: PUSH
 950: LD_EXP 79
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 963: LD_ADDR_EXP 25
 967: PUSH
 968: CALL_OW 45
 972: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 973: LD_EXP 24
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 985: LD_EXP 25
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 997: LD_EXP 24
1001: PPUSH
1002: LD_INT 99
1004: PPUSH
1005: LD_INT 154
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 48
// if JMMGirlVeh then
1015: LD_EXP 79
1019: IFFALSE 1039
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
1021: LD_EXP 25
1025: PPUSH
1026: LD_INT 98
1028: PPUSH
1029: LD_INT 159
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
1039: LD_ADDR_EXP 1
1043: PUSH
1044: LD_STRING 14_JMM
1046: PPUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL 6640 0 2
1054: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
1055: LD_EXP 1
1059: PPUSH
1060: LD_EXP 24
1064: PPUSH
1065: CALL_OW 52
// if not JMMGirlVeh = [ ] then
1069: LD_EXP 79
1073: PUSH
1074: EMPTY
1075: EQUAL
1076: NOT
1077: IFFALSE 1199
// begin if JMMGirl = 1 then
1079: LD_EXP 80
1083: PUSH
1084: LD_INT 1
1086: EQUAL
1087: IFFALSE 1119
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
1089: LD_ADDR_EXP 2
1093: PUSH
1094: LD_STRING 14_Joan
1096: PPUSH
1097: LD_INT 1
1099: PPUSH
1100: CALL 6640 0 2
1104: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
1105: LD_EXP 2
1109: PPUSH
1110: LD_EXP 25
1114: PPUSH
1115: CALL_OW 52
// end ; if JMMGirl = 2 then
1119: LD_EXP 80
1123: PUSH
1124: LD_INT 2
1126: EQUAL
1127: IFFALSE 1159
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
1129: LD_ADDR_EXP 4
1133: PUSH
1134: LD_STRING 14_Lisa
1136: PPUSH
1137: LD_INT 1
1139: PPUSH
1140: CALL 6640 0 2
1144: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
1145: LD_EXP 4
1149: PPUSH
1150: LD_EXP 25
1154: PPUSH
1155: CALL_OW 52
// end ; if JMMGirl = 3 then
1159: LD_EXP 80
1163: PUSH
1164: LD_INT 3
1166: EQUAL
1167: IFFALSE 1199
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
1169: LD_ADDR_EXP 16
1173: PUSH
1174: LD_STRING 14_Connie
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 6640 0 2
1184: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1185: LD_EXP 16
1189: PPUSH
1190: LD_EXP 25
1194: PPUSH
1195: CALL_OW 52
// end ; end ; uc_side = 4 ;
1199: LD_ADDR_OWVAR 20
1203: PUSH
1204: LD_INT 4
1206: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1207: LD_ADDR_EXP 17
1211: PUSH
1212: LD_STRING Powell
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL 6640 0 2
1222: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 42 , 62 , 5 , false ) ;
1223: LD_EXP 17
1227: PPUSH
1228: LD_INT 42
1230: PPUSH
1231: LD_INT 62
1233: PPUSH
1234: LD_INT 5
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 50
// ComTurnXY ( Powell , 43 , 63 ) ;
1244: LD_EXP 17
1248: PPUSH
1249: LD_INT 43
1251: PPUSH
1252: LD_INT 63
1254: PPUSH
1255: CALL_OW 118
// end ;
1259: LD_VAR 0 1
1263: RET
// export function PrepareHeroesFromEpsilon ; begin
1264: LD_INT 0
1266: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1267: LD_ADDR_EXP 4
1271: PUSH
1272: LD_STRING Lisa
1274: PPUSH
1275: CALL 6697 0 1
1279: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1280: LD_ADDR_EXP 5
1284: PUSH
1285: LD_STRING Donaldson
1287: PPUSH
1288: CALL 6697 0 1
1292: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1293: LD_ADDR_EXP 6
1297: PUSH
1298: LD_STRING Bobby
1300: PPUSH
1301: CALL 6697 0 1
1305: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1306: LD_ADDR_EXP 7
1310: PUSH
1311: LD_STRING Cyrus
1313: PPUSH
1314: CALL 6697 0 1
1318: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1319: LD_ADDR_EXP 8
1323: PUSH
1324: LD_STRING Denis
1326: PPUSH
1327: CALL 6697 0 1
1331: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1332: LD_ADDR_EXP 9
1336: PUSH
1337: LD_STRING Brown
1339: PPUSH
1340: CALL 6697 0 1
1344: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1345: LD_ADDR_EXP 10
1349: PUSH
1350: LD_STRING Gladstone
1352: PPUSH
1353: CALL 6697 0 1
1357: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1358: LD_ADDR_EXP 11
1362: PUSH
1363: LD_STRING Houten
1365: PPUSH
1366: CALL 6697 0 1
1370: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1371: LD_ADDR_EXP 12
1375: PUSH
1376: LD_STRING Cornel
1378: PPUSH
1379: CALL 6697 0 1
1383: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1384: LD_ADDR_EXP 13
1388: PUSH
1389: LD_STRING Gary
1391: PPUSH
1392: CALL 6697 0 1
1396: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1397: LD_ADDR_EXP 14
1401: PUSH
1402: LD_STRING Frank
1404: PPUSH
1405: CALL 6697 0 1
1409: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1410: LD_ADDR_EXP 15
1414: PUSH
1415: LD_STRING Kikuchi
1417: PPUSH
1418: CALL 6697 0 1
1422: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1423: LD_EXP 4
1427: PPUSH
1428: LD_INT 6
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1438: LD_EXP 5
1442: PPUSH
1443: LD_INT 6
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_INT 6
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1468: LD_EXP 7
1472: PPUSH
1473: LD_INT 6
1475: PPUSH
1476: LD_INT 0
1478: PPUSH
1479: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1483: LD_EXP 8
1487: PPUSH
1488: LD_INT 6
1490: PPUSH
1491: LD_INT 0
1493: PPUSH
1494: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1498: LD_EXP 9
1502: PPUSH
1503: LD_INT 6
1505: PPUSH
1506: LD_INT 0
1508: PPUSH
1509: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1513: LD_EXP 10
1517: PPUSH
1518: LD_INT 6
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1528: LD_EXP 11
1532: PPUSH
1533: LD_INT 6
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1543: LD_EXP 12
1547: PPUSH
1548: LD_INT 6
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1558: LD_EXP 13
1562: PPUSH
1563: LD_INT 6
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1573: LD_EXP 14
1577: PPUSH
1578: LD_INT 6
1580: PPUSH
1581: LD_INT 0
1583: PPUSH
1584: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1588: LD_EXP 15
1592: PPUSH
1593: LD_INT 6
1595: PPUSH
1596: LD_INT 0
1598: PPUSH
1599: CALL_OW 49
// end ;
1603: LD_VAR 0 1
1607: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1608: LD_INT 0
1610: PPUSH
1611: PPUSH
1612: PPUSH
1613: PPUSH
1614: PPUSH
// uc_side = 4 ;
1615: LD_ADDR_OWVAR 20
1619: PUSH
1620: LD_INT 4
1622: ST_TO_ADDR
// uc_nation = 1 ;
1623: LD_ADDR_OWVAR 21
1627: PUSH
1628: LD_INT 1
1630: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1631: LD_ADDR_EXP 18
1635: PUSH
1636: LD_STRING 13s_others
1638: PPUSH
1639: CALL_OW 31
1643: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: LD_INT 22
1651: PUSH
1652: LD_INT 4
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 21
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PPUSH
1673: CALL_OW 69
1677: PUSH
1678: LD_EXP 17
1682: PUSH
1683: EMPTY
1684: LIST
1685: DIFF
1686: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1687: LD_ADDR_VAR 0 5
1691: PUSH
1692: LD_VAR 0 4
1696: PPUSH
1697: CALL 6827 0 1
1701: ST_TO_ADDR
// if others13 >= 8 then
1702: LD_EXP 18
1706: PUSH
1707: LD_INT 8
1709: GREATEREQUAL
1710: IFFALSE 1771
// begin for i = 1 to 8 do
1712: LD_ADDR_VAR 0 2
1716: PUSH
1717: DOUBLE
1718: LD_INT 1
1720: DEC
1721: ST_TO_ADDR
1722: LD_INT 8
1724: PUSH
1725: FOR_TO
1726: IFFALSE 1767
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1728: LD_EXP 18
1732: PUSH
1733: LD_INT 1
1735: ARRAY
1736: PPUSH
1737: LD_INT 6
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1747: LD_ADDR_EXP 18
1751: PUSH
1752: LD_EXP 18
1756: PPUSH
1757: LD_INT 1
1759: PPUSH
1760: CALL_OW 3
1764: ST_TO_ADDR
// end ;
1765: GO 1725
1767: POP
1768: POP
// end else
1769: GO 1830
// begin for i = 1 to others13 do
1771: LD_ADDR_VAR 0 2
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_EXP 18
1785: PUSH
1786: FOR_TO
1787: IFFALSE 1828
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1789: LD_EXP 18
1793: PUSH
1794: LD_INT 1
1796: ARRAY
1797: PPUSH
1798: LD_INT 6
1800: PPUSH
1801: LD_INT 0
1803: PPUSH
1804: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1808: LD_ADDR_EXP 18
1812: PUSH
1813: LD_EXP 18
1817: PPUSH
1818: LD_INT 1
1820: PPUSH
1821: CALL_OW 3
1825: ST_TO_ADDR
// end ;
1826: GO 1786
1828: POP
1829: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1830: LD_ADDR_VAR 0 4
1834: PUSH
1835: LD_INT 22
1837: PUSH
1838: LD_INT 4
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 21
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PPUSH
1859: CALL_OW 69
1863: PUSH
1864: LD_EXP 17
1868: PUSH
1869: EMPTY
1870: LIST
1871: DIFF
1872: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1873: LD_ADDR_VAR 0 5
1877: PUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL 6827 0 1
1887: ST_TO_ADDR
// if others13 >= 6 then
1888: LD_EXP 18
1892: PUSH
1893: LD_INT 6
1895: GREATEREQUAL
1896: IFFALSE 1957
// begin for i = 1 to 6 do
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: DOUBLE
1904: LD_INT 1
1906: DEC
1907: ST_TO_ADDR
1908: LD_INT 6
1910: PUSH
1911: FOR_TO
1912: IFFALSE 1953
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1914: LD_EXP 18
1918: PUSH
1919: LD_INT 1
1921: ARRAY
1922: PPUSH
1923: LD_INT 6
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1933: LD_ADDR_EXP 18
1937: PUSH
1938: LD_EXP 18
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: CALL_OW 3
1950: ST_TO_ADDR
// end ;
1951: GO 1911
1953: POP
1954: POP
// end else
1955: GO 2016
// begin for i = 1 to others13 do
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: DOUBLE
1963: LD_INT 1
1965: DEC
1966: ST_TO_ADDR
1967: LD_EXP 18
1971: PUSH
1972: FOR_TO
1973: IFFALSE 2014
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1975: LD_EXP 18
1979: PUSH
1980: LD_INT 1
1982: ARRAY
1983: PPUSH
1984: LD_INT 6
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1994: LD_ADDR_EXP 18
1998: PUSH
1999: LD_EXP 18
2003: PPUSH
2004: LD_INT 1
2006: PPUSH
2007: CALL_OW 3
2011: ST_TO_ADDR
// end ;
2012: GO 1972
2014: POP
2015: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
2016: LD_ADDR_VAR 0 4
2020: PUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 4
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 21
2033: PUSH
2034: LD_INT 1
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PPUSH
2045: CALL_OW 69
2049: PUSH
2050: LD_EXP 17
2054: PUSH
2055: EMPTY
2056: LIST
2057: DIFF
2058: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
2059: LD_ADDR_VAR 0 5
2063: PUSH
2064: LD_VAR 0 4
2068: PPUSH
2069: CALL 6827 0 1
2073: ST_TO_ADDR
// if heroLenght < 19 then
2074: LD_VAR 0 5
2078: PUSH
2079: LD_INT 19
2081: LESS
2082: IFFALSE 2180
// for i = 1 to 19 - heroLenght do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 19
2096: PUSH
2097: LD_VAR 0 5
2101: MINUS
2102: PUSH
2103: FOR_TO
2104: IFFALSE 2178
// begin hc_gallery =  ;
2106: LD_ADDR_OWVAR 33
2110: PUSH
2111: LD_STRING 
2113: ST_TO_ADDR
// hc_name =  ;
2114: LD_ADDR_OWVAR 26
2118: PUSH
2119: LD_STRING 
2121: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
2122: LD_INT 0
2124: PPUSH
2125: LD_INT 1
2127: PPUSH
2128: LD_INT 4
2130: PPUSH
2131: CALL_OW 12
2135: PPUSH
2136: LD_INT 6
2138: PPUSH
2139: LD_INT 8
2141: PPUSH
2142: CALL_OW 12
2146: PPUSH
2147: CALL_OW 380
// un = CreateHuman ;
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: CALL_OW 44
2160: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
2161: LD_VAR 0 3
2165: PPUSH
2166: LD_INT 6
2168: PPUSH
2169: LD_INT 0
2171: PPUSH
2172: CALL_OW 49
// end ;
2176: GO 2103
2178: POP
2179: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
2180: LD_ADDR_VAR 0 4
2184: PUSH
2185: LD_INT 22
2187: PUSH
2188: LD_INT 4
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 21
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PPUSH
2209: CALL_OW 69
2213: PUSH
2214: LD_EXP 17
2218: PUSH
2219: LD_EXP 1
2223: PUSH
2224: LD_EXP 2
2228: PUSH
2229: LD_EXP 3
2233: PUSH
2234: LD_EXP 4
2238: PUSH
2239: LD_EXP 5
2243: PUSH
2244: LD_EXP 6
2248: PUSH
2249: LD_EXP 7
2253: PUSH
2254: LD_EXP 8
2258: PUSH
2259: LD_EXP 9
2263: PUSH
2264: LD_EXP 10
2268: PUSH
2269: LD_EXP 11
2273: PUSH
2274: LD_EXP 12
2278: PUSH
2279: LD_EXP 13
2283: PUSH
2284: LD_EXP 14
2288: PUSH
2289: LD_EXP 15
2293: PUSH
2294: LD_EXP 16
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: DIFF
2318: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2319: LD_ADDR_EXP 65
2323: PUSH
2324: LD_VAR 0 4
2328: PPUSH
2329: LD_INT 1
2331: PPUSH
2332: CALL 7173 0 2
2336: ST_TO_ADDR
// for i = 1 to 8 do
2337: LD_ADDR_VAR 0 2
2341: PUSH
2342: DOUBLE
2343: LD_INT 1
2345: DEC
2346: ST_TO_ADDR
2347: LD_INT 8
2349: PUSH
2350: FOR_TO
2351: IFFALSE 2381
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2353: LD_ADDR_EXP 66
2357: PUSH
2358: LD_EXP 66
2362: PUSH
2363: LD_EXP 65
2367: PUSH
2368: LD_VAR 0 2
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: ADD
2378: ST_TO_ADDR
2379: GO 2350
2381: POP
2382: POP
// SetClass ( amUnitsAttack , 1 ) ;
2383: LD_EXP 66
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 336
// end ;
2395: LD_VAR 0 1
2399: RET
// export function PrepareSupportFromKappa ; var i , veh ; begin
2400: LD_INT 0
2402: PPUSH
2403: PPUSH
2404: PPUSH
// uc_side = 1 ;
2405: LD_ADDR_OWVAR 20
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// uc_nation = 1 ;
2413: LD_ADDR_OWVAR 21
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// for i := 1 to 5 do
2421: LD_ADDR_VAR 0 2
2425: PUSH
2426: DOUBLE
2427: LD_INT 1
2429: DEC
2430: ST_TO_ADDR
2431: LD_INT 5
2433: PUSH
2434: FOR_TO
2435: IFFALSE 2519
// begin vc_engine = 3 ;
2437: LD_ADDR_OWVAR 39
2441: PUSH
2442: LD_INT 3
2444: ST_TO_ADDR
// vc_control = 3 ;
2445: LD_ADDR_OWVAR 38
2449: PUSH
2450: LD_INT 3
2452: ST_TO_ADDR
// vc_chassis = 3 ;
2453: LD_ADDR_OWVAR 37
2457: PUSH
2458: LD_INT 3
2460: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2461: LD_ADDR_OWVAR 40
2465: PUSH
2466: LD_INT 5
2468: PUSH
2469: LD_INT 9
2471: PUSH
2472: LD_INT 7
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 1
2482: PPUSH
2483: LD_INT 3
2485: PPUSH
2486: CALL_OW 12
2490: ARRAY
2491: ST_TO_ADDR
// veh = CreateVehicle ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 45
2501: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 14
2509: PPUSH
2510: LD_INT 0
2512: PPUSH
2513: CALL_OW 49
// end ;
2517: GO 2434
2519: POP
2520: POP
// vc_engine = 3 ;
2521: LD_ADDR_OWVAR 39
2525: PUSH
2526: LD_INT 3
2528: ST_TO_ADDR
// vc_control = 1 ;
2529: LD_ADDR_OWVAR 38
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// vc_chassis = 3 ;
2537: LD_ADDR_OWVAR 37
2541: PUSH
2542: LD_INT 3
2544: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2545: LD_ADDR_OWVAR 40
2549: PUSH
2550: LD_INT 5
2552: PUSH
2553: LD_INT 9
2555: PUSH
2556: LD_INT 7
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 3
2569: PPUSH
2570: CALL_OW 12
2574: ARRAY
2575: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
2576: LD_ADDR_EXP 25
2580: PUSH
2581: CALL_OW 45
2585: ST_TO_ADDR
// PlaceUnitArea ( NewJMMGirlVeh , KappaSpawn , false ) ;
2586: LD_EXP 25
2590: PPUSH
2591: LD_INT 14
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: CALL_OW 49
// if JMMGirl = 1 then
2601: LD_EXP 80
2605: PUSH
2606: LD_INT 1
2608: EQUAL
2609: IFFALSE 2662
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
2611: LD_ADDR_EXP 2
2615: PUSH
2616: LD_STRING 14_Joan
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: CALL 6640 0 2
2626: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
2627: LD_EXP 2
2631: PPUSH
2632: LD_EXP 25
2636: PPUSH
2637: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2641: LD_EXP 25
2645: PPUSH
2646: CALL_OW 87
// Say ( Joan , D10BW-Joan-1 ) ;
2650: LD_EXP 2
2654: PPUSH
2655: LD_STRING D10BW-Joan-1
2657: PPUSH
2658: CALL_OW 88
// end ; if JMMGirl = 2 then
2662: LD_EXP 80
2666: PUSH
2667: LD_INT 2
2669: EQUAL
2670: IFFALSE 2723
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
2672: LD_ADDR_EXP 4
2676: PUSH
2677: LD_STRING 14_Lisa
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL 6640 0 2
2687: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
2688: LD_EXP 4
2692: PPUSH
2693: LD_EXP 25
2697: PPUSH
2698: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2702: LD_EXP 25
2706: PPUSH
2707: CALL_OW 87
// Say ( Lisa , D10BW-Lisa-1 ) ;
2711: LD_EXP 4
2715: PPUSH
2716: LD_STRING D10BW-Lisa-1
2718: PPUSH
2719: CALL_OW 88
// end ; if JMMGirl = 3 then
2723: LD_EXP 80
2727: PUSH
2728: LD_INT 3
2730: EQUAL
2731: IFFALSE 2784
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
2733: LD_ADDR_EXP 16
2737: PUSH
2738: LD_STRING 14_Connie
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL 6640 0 2
2748: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
2749: LD_EXP 16
2753: PPUSH
2754: LD_EXP 25
2758: PPUSH
2759: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2763: LD_EXP 25
2767: PPUSH
2768: CALL_OW 87
// Say ( Lisa , D10BW-Con-1 ) ;
2772: LD_EXP 4
2776: PPUSH
2777: LD_STRING D10BW-Con-1
2779: PPUSH
2780: CALL_OW 88
// end ; end ;
2784: LD_VAR 0 1
2788: RET
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , avalaibleVehs , vehicles , resources , cargoList ; begin
2789: LD_INT 0
2791: PPUSH
2792: PPUSH
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
2798: PPUSH
2799: PPUSH
// uc_side = 1 ;
2800: LD_ADDR_OWVAR 20
2804: PUSH
2805: LD_INT 1
2807: ST_TO_ADDR
// uc_nation = 1 ;
2808: LD_ADDR_OWVAR 21
2812: PUSH
2813: LD_INT 1
2815: ST_TO_ADDR
// omegaVeh = [ ] ;
2816: LD_ADDR_VAR 0 3
2820: PUSH
2821: EMPTY
2822: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
2823: LD_STRING 13s_Lisa
2825: PPUSH
2826: CALL_OW 28
2830: PUSH
2831: LD_INT 0
2833: EQUAL
2834: IFFALSE 2849
// Lisa = PrepareUnitOmega ( Lisa ) ;
2836: LD_ADDR_EXP 4
2840: PUSH
2841: LD_STRING Lisa
2843: PPUSH
2844: CALL 6754 0 1
2848: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
2849: LD_STRING 13s_Donaldson
2851: PPUSH
2852: CALL_OW 28
2856: PUSH
2857: LD_INT 0
2859: EQUAL
2860: IFFALSE 2875
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
2862: LD_ADDR_EXP 5
2866: PUSH
2867: LD_STRING Donaldson
2869: PPUSH
2870: CALL 6754 0 1
2874: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
2875: LD_STRING 13s_Bobby
2877: PPUSH
2878: CALL_OW 28
2882: PUSH
2883: LD_INT 0
2885: EQUAL
2886: IFFALSE 2901
// Bobby = PrepareUnitOmega ( Bobby ) ;
2888: LD_ADDR_EXP 6
2892: PUSH
2893: LD_STRING Bobby
2895: PPUSH
2896: CALL 6754 0 1
2900: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
2901: LD_STRING 13s_Cyrus
2903: PPUSH
2904: CALL_OW 28
2908: PUSH
2909: LD_INT 0
2911: EQUAL
2912: IFFALSE 2927
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
2914: LD_ADDR_EXP 7
2918: PUSH
2919: LD_STRING Cyrus
2921: PPUSH
2922: CALL 6754 0 1
2926: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
2927: LD_STRING 13s_Denis
2929: PPUSH
2930: CALL_OW 28
2934: PUSH
2935: LD_INT 0
2937: EQUAL
2938: IFFALSE 2953
// Denis = PrepareUnitOmega ( Denis ) ;
2940: LD_ADDR_EXP 8
2944: PUSH
2945: LD_STRING Denis
2947: PPUSH
2948: CALL 6754 0 1
2952: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
2953: LD_STRING 13s_Brown
2955: PPUSH
2956: CALL_OW 28
2960: PUSH
2961: LD_INT 0
2963: EQUAL
2964: IFFALSE 2979
// Brown = PrepareUnitOmega ( Brown ) ;
2966: LD_ADDR_EXP 9
2970: PUSH
2971: LD_STRING Brown
2973: PPUSH
2974: CALL 6754 0 1
2978: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
2979: LD_STRING 13s_Gladstone
2981: PPUSH
2982: CALL_OW 28
2986: PUSH
2987: LD_INT 0
2989: EQUAL
2990: IFFALSE 3005
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
2992: LD_ADDR_EXP 10
2996: PUSH
2997: LD_STRING Gladstone
2999: PPUSH
3000: CALL 6754 0 1
3004: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
3005: LD_STRING 13s_Houten
3007: PPUSH
3008: CALL_OW 28
3012: PUSH
3013: LD_INT 0
3015: EQUAL
3016: IFFALSE 3031
// Houten = PrepareUnitOmega ( Houten ) ;
3018: LD_ADDR_EXP 11
3022: PUSH
3023: LD_STRING Houten
3025: PPUSH
3026: CALL 6754 0 1
3030: ST_TO_ADDR
// if TestCharacters ( 13s_Cornell ) = false then
3031: LD_STRING 13s_Cornell
3033: PPUSH
3034: CALL_OW 28
3038: PUSH
3039: LD_INT 0
3041: EQUAL
3042: IFFALSE 3057
// Cornel = PrepareUnitOmega ( Cornell ) ;
3044: LD_ADDR_EXP 12
3048: PUSH
3049: LD_STRING Cornell
3051: PPUSH
3052: CALL 6754 0 1
3056: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
3057: LD_STRING 13s_Gary
3059: PPUSH
3060: CALL_OW 28
3064: PUSH
3065: LD_INT 0
3067: EQUAL
3068: IFFALSE 3083
// Gary = PrepareUnitOmega ( Gary ) ;
3070: LD_ADDR_EXP 13
3074: PUSH
3075: LD_STRING Gary
3077: PPUSH
3078: CALL 6754 0 1
3082: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
3083: LD_STRING 13s_Frank
3085: PPUSH
3086: CALL_OW 28
3090: PUSH
3091: LD_INT 0
3093: EQUAL
3094: IFFALSE 3109
// Frank = PrepareUnitOmega ( Frank ) ;
3096: LD_ADDR_EXP 14
3100: PUSH
3101: LD_STRING Frank
3103: PPUSH
3104: CALL 6754 0 1
3108: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3109: LD_STRING 13s_Kikuchi
3111: PPUSH
3112: CALL_OW 28
3116: PUSH
3117: LD_INT 0
3119: EQUAL
3120: IFFALSE 3135
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3122: LD_ADDR_EXP 15
3126: PUSH
3127: LD_STRING Kikuchi
3129: PPUSH
3130: CALL 6754 0 1
3134: ST_TO_ADDR
// if JMMGirl = 1 or JMMGirl = 2 then
3135: LD_EXP 80
3139: PUSH
3140: LD_INT 1
3142: EQUAL
3143: PUSH
3144: LD_EXP 80
3148: PUSH
3149: LD_INT 2
3151: EQUAL
3152: OR
3153: IFFALSE 3168
// Connie = PrepareUnitOmega ( Connie ) ;
3155: LD_ADDR_EXP 16
3159: PUSH
3160: LD_STRING Connie
3162: PPUSH
3163: CALL 6754 0 1
3167: ST_TO_ADDR
// Gordon = PrepareUnitOmega ( Gordon ) ;
3168: LD_ADDR_EXP 22
3172: PUSH
3173: LD_STRING Gordon
3175: PPUSH
3176: CALL 6754 0 1
3180: ST_TO_ADDR
// Peter = PrepareUnitOmega ( Peter ) ;
3181: LD_ADDR_EXP 23
3185: PUSH
3186: LD_STRING Peter
3188: PPUSH
3189: CALL 6754 0 1
3193: ST_TO_ADDR
// if StevensStatus = 1 then
3194: LD_EXP 77
3198: PUSH
3199: LD_INT 1
3201: EQUAL
3202: IFFALSE 3219
// Stevens = PrepareUnitOmega ( Stevens ) else
3204: LD_ADDR_EXP 3
3208: PUSH
3209: LD_STRING Stevens
3211: PPUSH
3212: CALL 6754 0 1
3216: ST_TO_ADDR
3217: GO 3232
// Baker = PrepareUnitOmega ( Baker ) ;
3219: LD_ADDR_EXP 21
3223: PUSH
3224: LD_STRING Baker
3226: PPUSH
3227: CALL 6754 0 1
3231: ST_TO_ADDR
// others13Omega = CreateCharacterSet ( 15_other_survivors ) ;
3232: LD_ADDR_EXP 19
3236: PUSH
3237: LD_STRING 15_other_survivors
3239: PPUSH
3240: CALL_OW 31
3244: ST_TO_ADDR
// vehicles = LoadVariable ( 15_Vehicles_1 , [ ] ) ;
3245: LD_ADDR_VAR 0 7
3249: PUSH
3250: LD_STRING 15_Vehicles_1
3252: PPUSH
3253: EMPTY
3254: PPUSH
3255: CALL_OW 30
3259: ST_TO_ADDR
// resources = LoadVariable ( 15_ResourcesInCargo_1 , [ ] ) ;
3260: LD_ADDR_VAR 0 8
3264: PUSH
3265: LD_STRING 15_ResourcesInCargo_1
3267: PPUSH
3268: EMPTY
3269: PPUSH
3270: CALL_OW 30
3274: ST_TO_ADDR
// for i := 1 to vehicles do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_VAR 0 7
3289: PUSH
3290: FOR_TO
3291: IFFALSE 3516
// begin uc_nation = vehicles [ i ] [ 1 ] ;
3293: LD_ADDR_OWVAR 21
3297: PUSH
3298: LD_VAR 0 7
3302: PUSH
3303: LD_VAR 0 2
3307: ARRAY
3308: PUSH
3309: LD_INT 1
3311: ARRAY
3312: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
3313: LD_ADDR_OWVAR 37
3317: PUSH
3318: LD_VAR 0 7
3322: PUSH
3323: LD_VAR 0 2
3327: ARRAY
3328: PUSH
3329: LD_INT 2
3331: ARRAY
3332: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
3333: LD_ADDR_OWVAR 39
3337: PUSH
3338: LD_VAR 0 7
3342: PUSH
3343: LD_VAR 0 2
3347: ARRAY
3348: PUSH
3349: LD_INT 3
3351: ARRAY
3352: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
3353: LD_ADDR_OWVAR 38
3357: PUSH
3358: LD_VAR 0 7
3362: PUSH
3363: LD_VAR 0 2
3367: ARRAY
3368: PUSH
3369: LD_INT 4
3371: ARRAY
3372: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
3373: LD_ADDR_OWVAR 40
3377: PUSH
3378: LD_VAR 0 7
3382: PUSH
3383: LD_VAR 0 2
3387: ARRAY
3388: PUSH
3389: LD_INT 5
3391: ARRAY
3392: ST_TO_ADDR
// if vc_weapon = 8 then
3393: LD_OWVAR 40
3397: PUSH
3398: LD_INT 8
3400: EQUAL
3401: IFFALSE 3413
// vc_weapon = 9 else
3403: LD_ADDR_OWVAR 40
3407: PUSH
3408: LD_INT 9
3410: ST_TO_ADDR
3411: GO 3433
// vc_weapon = vehicles [ i ] [ 5 ] ;
3413: LD_ADDR_OWVAR 40
3417: PUSH
3418: LD_VAR 0 7
3422: PUSH
3423: LD_VAR 0 2
3427: ARRAY
3428: PUSH
3429: LD_INT 5
3431: ARRAY
3432: ST_TO_ADDR
// vc_fuel_battery = 40 ;
3433: LD_ADDR_OWVAR 41
3437: PUSH
3438: LD_INT 40
3440: ST_TO_ADDR
// veh = CreateVehicle ;
3441: LD_ADDR_VAR 0 5
3445: PUSH
3446: CALL_OW 45
3450: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
3451: LD_VAR 0 5
3455: PPUSH
3456: LD_INT 5
3458: PPUSH
3459: CALL_OW 233
// SetLives ( veh , rand ( 300 , 800 ) ) ;
3463: LD_VAR 0 5
3467: PPUSH
3468: LD_INT 300
3470: PPUSH
3471: LD_INT 800
3473: PPUSH
3474: CALL_OW 12
3478: PPUSH
3479: CALL_OW 234
// omegaVeh = omegaVeh ^ veh ;
3483: LD_ADDR_VAR 0 3
3487: PUSH
3488: LD_VAR 0 3
3492: PUSH
3493: LD_VAR 0 5
3497: ADD
3498: ST_TO_ADDR
// PlaceUnitArea ( veh , OmegaSpawn , false ) ;
3499: LD_VAR 0 5
3503: PPUSH
3504: LD_INT 16
3506: PPUSH
3507: LD_INT 0
3509: PPUSH
3510: CALL_OW 49
// end ;
3514: GO 3290
3516: POP
3517: POP
// cargoList = FilterUnitsInArea ( OmegaSpawn , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] , [ f_control , 1 ] , [ f_engine , 3 ] ] ) ;
3518: LD_ADDR_VAR 0 9
3522: PUSH
3523: LD_INT 16
3525: PPUSH
3526: LD_INT 22
3528: PUSH
3529: LD_INT 1
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: PUSH
3536: LD_INT 21
3538: PUSH
3539: LD_INT 2
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: PUSH
3546: LD_INT 34
3548: PUSH
3549: LD_INT 12
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: PUSH
3556: LD_INT 33
3558: PUSH
3559: LD_INT 1
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: PUSH
3566: LD_INT 32
3568: PUSH
3569: LD_INT 3
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: PPUSH
3583: CALL_OW 70
3587: ST_TO_ADDR
// if cargoList > 0 then
3588: LD_VAR 0 9
3592: PUSH
3593: LD_INT 0
3595: GREATER
3596: IFFALSE 3729
// for i = 1 to cargoList do
3598: LD_ADDR_VAR 0 2
3602: PUSH
3603: DOUBLE
3604: LD_INT 1
3606: DEC
3607: ST_TO_ADDR
3608: LD_VAR 0 9
3612: PUSH
3613: FOR_TO
3614: IFFALSE 3727
// begin if resources > 0 then
3616: LD_VAR 0 8
3620: PUSH
3621: LD_INT 0
3623: GREATER
3624: IFFALSE 3725
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
3626: LD_VAR 0 9
3630: PUSH
3631: LD_VAR 0 2
3635: ARRAY
3636: PPUSH
3637: LD_INT 1
3639: PPUSH
3640: LD_VAR 0 8
3644: PUSH
3645: LD_VAR 0 2
3649: ARRAY
3650: PUSH
3651: LD_INT 1
3653: ARRAY
3654: PPUSH
3655: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
3659: LD_VAR 0 9
3663: PUSH
3664: LD_VAR 0 2
3668: ARRAY
3669: PPUSH
3670: LD_INT 2
3672: PPUSH
3673: LD_VAR 0 8
3677: PUSH
3678: LD_VAR 0 2
3682: ARRAY
3683: PUSH
3684: LD_INT 2
3686: ARRAY
3687: PPUSH
3688: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
3692: LD_VAR 0 9
3696: PUSH
3697: LD_VAR 0 2
3701: ARRAY
3702: PPUSH
3703: LD_INT 3
3705: PPUSH
3706: LD_VAR 0 8
3710: PUSH
3711: LD_VAR 0 2
3715: ARRAY
3716: PUSH
3717: LD_INT 3
3719: ARRAY
3720: PPUSH
3721: CALL_OW 291
// end ; end ;
3725: GO 3613
3727: POP
3728: POP
// for i := 1 to heroesFromOmega do
3729: LD_ADDR_VAR 0 2
3733: PUSH
3734: DOUBLE
3735: LD_INT 1
3737: DEC
3738: ST_TO_ADDR
3739: LD_EXP 20
3743: PUSH
3744: FOR_TO
3745: IFFALSE 3775
// begin PlaceHumanInUnit ( heroesFromOmega [ i ] , omegaVeh [ i ] ) ;
3747: LD_EXP 20
3751: PUSH
3752: LD_VAR 0 2
3756: ARRAY
3757: PPUSH
3758: LD_VAR 0 3
3762: PUSH
3763: LD_VAR 0 2
3767: ARRAY
3768: PPUSH
3769: CALL_OW 52
// end ;
3773: GO 3744
3775: POP
3776: POP
// avalaibleVehs = UnitFilter ( omegaVeh , [ f_empty ] ) ;
3777: LD_ADDR_VAR 0 6
3781: PUSH
3782: LD_VAR 0 3
3786: PPUSH
3787: LD_INT 58
3789: PUSH
3790: EMPTY
3791: LIST
3792: PPUSH
3793: CALL_OW 72
3797: ST_TO_ADDR
// for i := 1 to others13Omega do
3798: LD_ADDR_VAR 0 2
3802: PUSH
3803: DOUBLE
3804: LD_INT 1
3806: DEC
3807: ST_TO_ADDR
3808: LD_EXP 19
3812: PUSH
3813: FOR_TO
3814: IFFALSE 3844
// begin PlaceHumanInUnit ( others13Omega [ i ] , avalaibleVehs [ i ] ) ;
3816: LD_EXP 19
3820: PUSH
3821: LD_VAR 0 2
3825: ARRAY
3826: PPUSH
3827: LD_VAR 0 6
3831: PUSH
3832: LD_VAR 0 2
3836: ARRAY
3837: PPUSH
3838: CALL_OW 52
// end ;
3842: GO 3813
3844: POP
3845: POP
// end ; end_of_file
3846: LD_VAR 0 1
3850: RET
// export function PrepareLegion ; var i ; begin
3851: LD_INT 0
3853: PPUSH
3854: PPUSH
// uc_side = 8 ;
3855: LD_ADDR_OWVAR 20
3859: PUSH
3860: LD_INT 8
3862: ST_TO_ADDR
// uc_nation = 2 ;
3863: LD_ADDR_OWVAR 21
3867: PUSH
3868: LD_INT 2
3870: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3871: LD_ADDR_EXP 30
3875: PUSH
3876: LD_STRING Kurt
3878: PPUSH
3879: LD_INT 0
3881: PPUSH
3882: CALL 6640 0 2
3886: ST_TO_ADDR
// Kozlov = PrepareUnit ( Kozlov , false ) ;
3887: LD_ADDR_EXP 36
3891: PUSH
3892: LD_STRING Kozlov
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL 6640 0 2
3902: ST_TO_ADDR
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
3903: LD_INT 8
3905: PPUSH
3906: LD_INT 2
3908: PPUSH
3909: LD_INT 122
3911: PPUSH
3912: LD_INT 10
3914: PPUSH
3915: LD_INT 2
3917: PPUSH
3918: LD_INT 4
3920: PPUSH
3921: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
3925: LD_INT 8
3927: PPUSH
3928: LD_INT 2
3930: PPUSH
3931: LD_INT 99
3933: PPUSH
3934: LD_INT 10
3936: PPUSH
3937: LD_INT 2
3939: PPUSH
3940: LD_INT 2
3942: PPUSH
3943: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
3947: LD_INT 8
3949: PPUSH
3950: LD_INT 2
3952: PPUSH
3953: LD_INT 104
3955: PPUSH
3956: LD_INT 10
3958: PPUSH
3959: LD_INT 1
3961: PPUSH
3962: LD_INT 2
3964: PPUSH
3965: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
3969: LD_INT 8
3971: PPUSH
3972: LD_INT 2
3974: PPUSH
3975: LD_INT 104
3977: PPUSH
3978: LD_INT 10
3980: PPUSH
3981: LD_INT 8
3983: PPUSH
3984: LD_INT 1
3986: PPUSH
3987: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
3991: LD_INT 8
3993: PPUSH
3994: LD_INT 2
3996: PPUSH
3997: LD_INT 118
3999: PPUSH
4000: LD_INT 10
4002: PPUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 1
4008: PPUSH
4009: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
4013: LD_INT 8
4015: PPUSH
4016: LD_INT 2
4018: PPUSH
4019: LD_INT 117
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: LD_INT 4
4030: PPUSH
4031: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArLab1 , 10 , 4 , 2 ) ;
4035: LD_INT 8
4037: PPUSH
4038: LD_INT 2
4040: PPUSH
4041: LD_INT 252
4043: PPUSH
4044: LD_INT 10
4046: PPUSH
4047: LD_INT 4
4049: PPUSH
4050: LD_INT 2
4052: PPUSH
4053: CALL 7734 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
4057: LD_ADDR_VAR 0 2
4061: PUSH
4062: LD_INT 22
4064: PUSH
4065: LD_INT 8
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 21
4074: PUSH
4075: LD_INT 3
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 30
4084: PUSH
4085: LD_INT 32
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 58
4094: PUSH
4095: EMPTY
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 69
4108: PUSH
4109: FOR_IN
4110: IFFALSE 4138
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
4112: LD_INT 8
4114: PPUSH
4115: LD_INT 2
4117: PPUSH
4118: LD_VAR 0 2
4122: PPUSH
4123: LD_INT 10
4125: PPUSH
4126: LD_INT 1
4128: PPUSH
4129: LD_INT 1
4131: PPUSH
4132: CALL 7734 0 6
4136: GO 4109
4138: POP
4139: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
4140: LD_INT 8
4142: PPUSH
4143: LD_INT 2
4145: PPUSH
4146: LD_INT 140
4148: PPUSH
4149: LD_INT 10
4151: PPUSH
4152: LD_INT 3
4154: PPUSH
4155: LD_INT 1
4157: PPUSH
4158: CALL 7734 0 6
// arControler = UnitsInside ( ArControl ) ;
4162: LD_ADDR_EXP 56
4166: PUSH
4167: LD_INT 140
4169: PPUSH
4170: CALL_OW 313
4174: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
4175: LD_INT 139
4177: PPUSH
4178: LD_EXP 56
4182: PUSH
4183: LD_INT 1
4185: ARRAY
4186: PPUSH
4187: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
4191: LD_INT 138
4193: PPUSH
4194: LD_EXP 56
4198: PUSH
4199: LD_INT 1
4201: ARRAY
4202: PPUSH
4203: CALL_OW 195
// hc_name = Ali Hadarach ;
4207: LD_ADDR_OWVAR 26
4211: PUSH
4212: LD_STRING Ali Hadarach
4214: ST_TO_ADDR
// hc_gallery =  ;
4215: LD_ADDR_OWVAR 33
4219: PUSH
4220: LD_STRING 
4222: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
4223: LD_INT 1
4225: PPUSH
4226: LD_INT 8
4228: PPUSH
4229: CALL_OW 383
// LegionFriend = CreateHuman ;
4233: LD_ADDR_EXP 53
4237: PUSH
4238: CALL_OW 44
4242: ST_TO_ADDR
// end ; end_of_file
4243: LD_VAR 0 1
4247: RET
// export function PrepareRussians ; var i ; begin
4248: LD_INT 0
4250: PPUSH
4251: PPUSH
// uc_side = 3 ;
4252: LD_ADDR_OWVAR 20
4256: PUSH
4257: LD_INT 3
4259: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
4260: LD_ADDR_EXP 26
4264: PUSH
4265: LD_STRING Platonov
4267: PPUSH
4268: LD_INT 0
4270: PPUSH
4271: CALL 6640 0 2
4275: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
4276: LD_EXP 26
4280: PPUSH
4281: LD_INT 23
4283: PPUSH
4284: CALL_OW 52
// Yakotich = PrepareUnit ( Yakotich , false ) ;
4288: LD_ADDR_EXP 27
4292: PUSH
4293: LD_STRING Yakotich
4295: PPUSH
4296: LD_INT 0
4298: PPUSH
4299: CALL 6640 0 2
4303: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , RuDep1 ) ;
4304: LD_EXP 27
4308: PPUSH
4309: LD_INT 26
4311: PPUSH
4312: CALL_OW 52
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
4316: LD_ADDR_EXP 37
4320: PUSH
4321: LD_STRING Kovalyuk
4323: PPUSH
4324: LD_INT 0
4326: PPUSH
4327: CALL 6640 0 2
4331: ST_TO_ADDR
// SetClass ( Kovalyuk , 3 ) ;
4332: LD_EXP 37
4336: PPUSH
4337: LD_INT 3
4339: PPUSH
4340: CALL_OW 336
// ruBehMehs = ruBehMehs ^ Kovalyuk ;
4344: LD_ADDR_EXP 58
4348: PUSH
4349: LD_EXP 58
4353: PUSH
4354: LD_EXP 37
4358: ADD
4359: ST_TO_ADDR
// Oblukov = PrepareUnit ( Oblukov , false ) ;
4360: LD_ADDR_EXP 38
4364: PUSH
4365: LD_STRING Oblukov
4367: PPUSH
4368: LD_INT 0
4370: PPUSH
4371: CALL 6640 0 2
4375: ST_TO_ADDR
// Bystrov = PrepareUnit ( Bystrov , false ) ;
4376: LD_ADDR_EXP 39
4380: PUSH
4381: LD_STRING Bystrov
4383: PPUSH
4384: LD_INT 0
4386: PPUSH
4387: CALL 6640 0 2
4391: ST_TO_ADDR
// Fadeev = PrepareUnit ( Fadeev , false ) ;
4392: LD_ADDR_EXP 40
4396: PUSH
4397: LD_STRING Fadeev
4399: PPUSH
4400: LD_INT 0
4402: PPUSH
4403: CALL 6640 0 2
4407: ST_TO_ADDR
// Gleb = PrepareUnit ( Gleb , false ) ;
4408: LD_ADDR_EXP 41
4412: PUSH
4413: LD_STRING Gleb
4415: PPUSH
4416: LD_INT 0
4418: PPUSH
4419: CALL 6640 0 2
4423: ST_TO_ADDR
// Petrosyan = PrepareUnit ( Petrosyan , false ) ;
4424: LD_ADDR_EXP 42
4428: PUSH
4429: LD_STRING Petrosyan
4431: PPUSH
4432: LD_INT 0
4434: PPUSH
4435: CALL 6640 0 2
4439: ST_TO_ADDR
// Petrovova = PrepareUnit ( Petrovova , false ) ;
4440: LD_ADDR_EXP 43
4444: PUSH
4445: LD_STRING Petrovova
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL 6640 0 2
4455: ST_TO_ADDR
// Kuzmov = PrepareUnit ( Kuzmov , false ) ;
4456: LD_ADDR_EXP 44
4460: PUSH
4461: LD_STRING Kuzmov
4463: PPUSH
4464: LD_INT 0
4466: PPUSH
4467: CALL 6640 0 2
4471: ST_TO_ADDR
// Mikhail = PrepareUnit ( Mikhail , false ) ;
4472: LD_ADDR_EXP 45
4476: PUSH
4477: LD_STRING Mikhail
4479: PPUSH
4480: LD_INT 0
4482: PPUSH
4483: CALL 6640 0 2
4487: ST_TO_ADDR
// Furmanov = PrepareUnit ( Furmanov , false ) ;
4488: LD_ADDR_EXP 46
4492: PUSH
4493: LD_STRING Furmanov
4495: PPUSH
4496: LD_INT 0
4498: PPUSH
4499: CALL 6640 0 2
4503: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
4504: LD_ADDR_EXP 47
4508: PUSH
4509: LD_STRING Belkov
4511: PPUSH
4512: LD_INT 0
4514: PPUSH
4515: CALL 6640 0 2
4519: ST_TO_ADDR
// PlaceHumanInUnit ( Oblukov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4520: LD_EXP 38
4524: PPUSH
4525: LD_INT 22
4527: PUSH
4528: LD_INT 3
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 21
4537: PUSH
4538: LD_INT 3
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: PUSH
4545: LD_INT 30
4547: PUSH
4548: LD_INT 32
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PUSH
4555: LD_INT 58
4557: PUSH
4558: EMPTY
4559: LIST
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: PPUSH
4567: CALL_OW 69
4571: PUSH
4572: LD_INT 1
4574: ARRAY
4575: PPUSH
4576: CALL_OW 52
// PlaceHumanInUnit ( Fadeev , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4580: LD_EXP 40
4584: PPUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 3
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 21
4597: PUSH
4598: LD_INT 3
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 30
4607: PUSH
4608: LD_INT 32
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PUSH
4615: LD_INT 58
4617: PUSH
4618: EMPTY
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: PPUSH
4627: CALL_OW 69
4631: PUSH
4632: LD_INT 1
4634: ARRAY
4635: PPUSH
4636: CALL_OW 52
// PlaceHumanInUnit ( Gleb , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4640: LD_EXP 41
4644: PPUSH
4645: LD_INT 22
4647: PUSH
4648: LD_INT 3
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: PUSH
4655: LD_INT 21
4657: PUSH
4658: LD_INT 3
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PUSH
4665: LD_INT 30
4667: PUSH
4668: LD_INT 32
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 58
4677: PUSH
4678: EMPTY
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PPUSH
4687: CALL_OW 69
4691: PUSH
4692: LD_INT 1
4694: ARRAY
4695: PPUSH
4696: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4700: LD_EXP 43
4704: PPUSH
4705: LD_INT 22
4707: PUSH
4708: LD_INT 3
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PUSH
4715: LD_INT 21
4717: PUSH
4718: LD_INT 3
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PUSH
4725: LD_INT 30
4727: PUSH
4728: LD_INT 32
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PUSH
4735: LD_INT 58
4737: PUSH
4738: EMPTY
4739: LIST
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: PPUSH
4747: CALL_OW 69
4751: PUSH
4752: LD_INT 1
4754: ARRAY
4755: PPUSH
4756: CALL_OW 52
// PlaceHumanInUnit ( Kuzmov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4760: LD_EXP 44
4764: PPUSH
4765: LD_INT 22
4767: PUSH
4768: LD_INT 3
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 21
4777: PUSH
4778: LD_INT 3
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: LD_INT 30
4787: PUSH
4788: LD_INT 32
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: PUSH
4795: LD_INT 58
4797: PUSH
4798: EMPTY
4799: LIST
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: PPUSH
4807: CALL_OW 69
4811: PUSH
4812: LD_INT 1
4814: ARRAY
4815: PPUSH
4816: CALL_OW 52
// PlaceHumanInUnit ( Furmanov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4820: LD_EXP 46
4824: PPUSH
4825: LD_INT 22
4827: PUSH
4828: LD_INT 3
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: LD_INT 21
4837: PUSH
4838: LD_INT 3
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PUSH
4845: LD_INT 30
4847: PUSH
4848: LD_INT 32
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 58
4857: PUSH
4858: EMPTY
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 69
4871: PUSH
4872: LD_INT 1
4874: ARRAY
4875: PPUSH
4876: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4880: LD_EXP 47
4884: PPUSH
4885: LD_INT 22
4887: PUSH
4888: LD_INT 3
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 21
4897: PUSH
4898: LD_INT 3
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 30
4907: PUSH
4908: LD_INT 32
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 58
4917: PUSH
4918: EMPTY
4919: LIST
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: PPUSH
4927: CALL_OW 69
4931: PUSH
4932: LD_INT 1
4934: ARRAY
4935: PPUSH
4936: CALL_OW 52
// PlaceHumanInUnit ( Bystrov , RusLab1 ) ;
4940: LD_EXP 39
4944: PPUSH
4945: LD_INT 2
4947: PPUSH
4948: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , RusLab2 ) ;
4952: LD_EXP 42
4956: PPUSH
4957: LD_INT 1
4959: PPUSH
4960: CALL_OW 52
// PlaceHumanInUnit ( Mikhail , RuDep1 ) ;
4964: LD_EXP 45
4968: PPUSH
4969: LD_INT 26
4971: PPUSH
4972: CALL_OW 52
// SetClass ( Mikhail , 2 ) ;
4976: LD_EXP 45
4980: PPUSH
4981: LD_INT 2
4983: PPUSH
4984: CALL_OW 336
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
4988: LD_INT 3
4990: PPUSH
4991: LD_INT 3
4993: PPUSH
4994: LD_INT 26
4996: PPUSH
4997: LD_INT 10
4999: PPUSH
5000: LD_INT 2
5002: PPUSH
5003: LD_INT 5
5005: PPUSH
5006: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RuDep2 , 10 , 2 , 4 ) ;
5010: LD_INT 3
5012: PPUSH
5013: LD_INT 3
5015: PPUSH
5016: LD_INT 23
5018: PPUSH
5019: LD_INT 10
5021: PPUSH
5022: LD_INT 2
5024: PPUSH
5025: LD_INT 4
5027: PPUSH
5028: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
5032: LD_INT 3
5034: PPUSH
5035: LD_INT 3
5037: PPUSH
5038: LD_INT 27
5040: PPUSH
5041: LD_INT 10
5043: PPUSH
5044: LD_INT 9
5046: PPUSH
5047: LD_INT 6
5049: PPUSH
5050: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
5054: LD_INT 3
5056: PPUSH
5057: LD_INT 3
5059: PPUSH
5060: LD_INT 27
5062: PPUSH
5063: LD_INT 10
5065: PPUSH
5066: LD_INT 3
5068: PPUSH
5069: LD_INT 3
5071: PPUSH
5072: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
5076: LD_INT 3
5078: PPUSH
5079: LD_INT 3
5081: PPUSH
5082: LD_INT 4
5084: PPUSH
5085: LD_INT 10
5087: PPUSH
5088: LD_INT 3
5090: PPUSH
5091: LD_INT 6
5093: PPUSH
5094: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
5098: LD_INT 3
5100: PPUSH
5101: LD_INT 3
5103: PPUSH
5104: LD_INT 10
5106: PPUSH
5107: LD_INT 10
5109: PPUSH
5110: LD_INT 3
5112: PPUSH
5113: LD_INT 6
5115: PPUSH
5116: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
5120: LD_INT 3
5122: PPUSH
5123: LD_INT 3
5125: PPUSH
5126: LD_INT 2
5128: PPUSH
5129: LD_INT 10
5131: PPUSH
5132: LD_INT 4
5134: PPUSH
5135: LD_INT 3
5137: PPUSH
5138: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
5142: LD_INT 3
5144: PPUSH
5145: LD_INT 3
5147: PPUSH
5148: LD_INT 1
5150: PPUSH
5151: LD_INT 10
5153: PPUSH
5154: LD_INT 4
5156: PPUSH
5157: LD_INT 3
5159: PPUSH
5160: CALL 7734 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
5164: LD_ADDR_VAR 0 2
5168: PUSH
5169: LD_INT 22
5171: PUSH
5172: LD_INT 3
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 21
5181: PUSH
5182: LD_INT 3
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: LD_INT 30
5191: PUSH
5192: LD_INT 32
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 58
5201: PUSH
5202: EMPTY
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: PPUSH
5211: CALL_OW 69
5215: PUSH
5216: FOR_IN
5217: IFFALSE 5245
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
5219: LD_INT 3
5221: PPUSH
5222: LD_INT 3
5224: PPUSH
5225: LD_VAR 0 2
5229: PPUSH
5230: LD_INT 10
5232: PPUSH
5233: LD_INT 1
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: CALL 7734 0 6
5243: GO 5216
5245: POP
5246: POP
// end ;
5247: LD_VAR 0 1
5251: RET
// export function PrepareAttackFromKappa ; var i , veh , vehList ; begin
5252: LD_INT 0
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
// uc_side = 6 ;
5258: LD_ADDR_OWVAR 20
5262: PUSH
5263: LD_INT 6
5265: ST_TO_ADDR
// uc_nation = 1 ;
5266: LD_ADDR_OWVAR 21
5270: PUSH
5271: LD_INT 1
5273: ST_TO_ADDR
// vc_engine = 3 ;
5274: LD_ADDR_OWVAR 39
5278: PUSH
5279: LD_INT 3
5281: ST_TO_ADDR
// vc_control = 1 ;
5282: LD_ADDR_OWVAR 38
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// vc_chassis = 5 ;
5290: LD_ADDR_OWVAR 37
5294: PUSH
5295: LD_INT 5
5297: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5298: LD_ADDR_OWVAR 40
5302: PUSH
5303: LD_INT 5
5305: PUSH
5306: LD_INT 9
5308: PUSH
5309: LD_INT 7
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: PUSH
5317: LD_INT 1
5319: PPUSH
5320: LD_INT 3
5322: PPUSH
5323: CALL_OW 12
5327: ARRAY
5328: ST_TO_ADDR
// sewiVeh = CreateVehicle ;
5329: LD_ADDR_EXP 35
5333: PUSH
5334: CALL_OW 45
5338: ST_TO_ADDR
// PlaceUnitArea ( sewiVeh , KappaSpawn , false ) ;
5339: LD_EXP 35
5343: PPUSH
5344: LD_INT 14
5346: PPUSH
5347: LD_INT 0
5349: PPUSH
5350: CALL_OW 49
// Vsevolod = PrepareUnit ( Vsevolod , false ) ;
5354: LD_ADDR_EXP 34
5358: PUSH
5359: LD_STRING Vsevolod
5361: PPUSH
5362: LD_INT 0
5364: PPUSH
5365: CALL 6640 0 2
5369: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , sewiVeh ) ;
5370: LD_EXP 34
5374: PPUSH
5375: LD_EXP 35
5379: PPUSH
5380: CALL_OW 52
// for i := 1 to 5 do
5384: LD_ADDR_VAR 0 2
5388: PUSH
5389: DOUBLE
5390: LD_INT 1
5392: DEC
5393: ST_TO_ADDR
5394: LD_INT 5
5396: PUSH
5397: FOR_TO
5398: IFFALSE 5482
// begin vc_engine = 3 ;
5400: LD_ADDR_OWVAR 39
5404: PUSH
5405: LD_INT 3
5407: ST_TO_ADDR
// vc_control = 3 ;
5408: LD_ADDR_OWVAR 38
5412: PUSH
5413: LD_INT 3
5415: ST_TO_ADDR
// vc_chassis = 3 ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 3
5423: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5424: LD_ADDR_OWVAR 40
5428: PUSH
5429: LD_INT 5
5431: PUSH
5432: LD_INT 9
5434: PUSH
5435: LD_INT 7
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 1
5445: PPUSH
5446: LD_INT 3
5448: PPUSH
5449: CALL_OW 12
5453: ARRAY
5454: ST_TO_ADDR
// veh = CreateVehicle ;
5455: LD_ADDR_VAR 0 3
5459: PUSH
5460: CALL_OW 45
5464: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5465: LD_VAR 0 3
5469: PPUSH
5470: LD_INT 14
5472: PPUSH
5473: LD_INT 0
5475: PPUSH
5476: CALL_OW 49
// end ;
5480: GO 5397
5482: POP
5483: POP
// uc_nation = 3 ;
5484: LD_ADDR_OWVAR 21
5488: PUSH
5489: LD_INT 3
5491: ST_TO_ADDR
// for i := 1 to 7 do
5492: LD_ADDR_VAR 0 2
5496: PUSH
5497: DOUBLE
5498: LD_INT 1
5500: DEC
5501: ST_TO_ADDR
5502: LD_INT 7
5504: PUSH
5505: FOR_TO
5506: IFFALSE 5598
// begin vc_engine = 3 ;
5508: LD_ADDR_OWVAR 39
5512: PUSH
5513: LD_INT 3
5515: ST_TO_ADDR
// vc_control = 3 ;
5516: LD_ADDR_OWVAR 38
5520: PUSH
5521: LD_INT 3
5523: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
5524: LD_ADDR_OWVAR 37
5528: PUSH
5529: LD_INT 24
5531: ST_TO_ADDR
// vc_weapon = [ 44 , 47 , 45 , 46 , 49 ] [ Rand ( 1 , 4 ) ] ;
5532: LD_ADDR_OWVAR 40
5536: PUSH
5537: LD_INT 44
5539: PUSH
5540: LD_INT 47
5542: PUSH
5543: LD_INT 45
5545: PUSH
5546: LD_INT 46
5548: PUSH
5549: LD_INT 49
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: PUSH
5559: LD_INT 1
5561: PPUSH
5562: LD_INT 4
5564: PPUSH
5565: CALL_OW 12
5569: ARRAY
5570: ST_TO_ADDR
// veh = CreateVehicle ;
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: CALL_OW 45
5580: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5581: LD_VAR 0 3
5585: PPUSH
5586: LD_INT 14
5588: PPUSH
5589: LD_INT 0
5591: PPUSH
5592: CALL_OW 49
// end ;
5596: GO 5505
5598: POP
5599: POP
// repeat wait ( 0 0$1 ) ;
5600: LD_INT 35
5602: PPUSH
5603: CALL_OW 67
// vehList = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
5607: LD_ADDR_VAR 0 4
5611: PUSH
5612: LD_INT 22
5614: PUSH
5615: LD_INT 6
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: PUSH
5622: LD_INT 21
5624: PUSH
5625: LD_INT 2
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PUSH
5632: LD_INT 50
5634: PUSH
5635: EMPTY
5636: LIST
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: PPUSH
5643: CALL_OW 69
5647: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
5648: LD_EXP 1
5652: PPUSH
5653: CALL_OW 310
5657: NOT
5658: IFFALSE 5691
// ComAgressiveMove ( vehList , GetX ( JMM ) , GetY ( JMM ) ) else
5660: LD_VAR 0 4
5664: PPUSH
5665: LD_EXP 1
5669: PPUSH
5670: CALL_OW 250
5674: PPUSH
5675: LD_EXP 1
5679: PPUSH
5680: CALL_OW 251
5684: PPUSH
5685: CALL_OW 114
5689: GO 5730
// ComAgressiveMove ( vehList , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) ;
5691: LD_VAR 0 4
5695: PPUSH
5696: LD_EXP 1
5700: PPUSH
5701: CALL_OW 310
5705: PPUSH
5706: CALL_OW 250
5710: PPUSH
5711: LD_EXP 1
5715: PPUSH
5716: CALL_OW 310
5720: PPUSH
5721: CALL_OW 251
5725: PPUSH
5726: CALL_OW 114
// until vehList = 0 ;
5730: LD_VAR 0 4
5734: PUSH
5735: LD_INT 0
5737: EQUAL
5738: IFFALSE 5600
// end ;
5740: LD_VAR 0 1
5744: RET
// export function PreapreMehBehs ; var i , un ; begin
5745: LD_INT 0
5747: PPUSH
5748: PPUSH
5749: PPUSH
// uc_side = 6 ;
5750: LD_ADDR_OWVAR 20
5754: PUSH
5755: LD_INT 6
5757: ST_TO_ADDR
// uc_nation = 3 ;
5758: LD_ADDR_OWVAR 21
5762: PUSH
5763: LD_INT 3
5765: ST_TO_ADDR
// for i := 1 to 3 do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: DOUBLE
5772: LD_INT 1
5774: DEC
5775: ST_TO_ADDR
5776: LD_INT 3
5778: PUSH
5779: FOR_TO
5780: IFFALSE 5851
// begin hc_name =  ;
5782: LD_ADDR_OWVAR 26
5786: PUSH
5787: LD_STRING 
5789: ST_TO_ADDR
// hc_gallery =  ;
5790: LD_ADDR_OWVAR 33
5794: PUSH
5795: LD_STRING 
5797: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
5798: LD_INT 0
5800: PPUSH
5801: LD_INT 10
5803: PPUSH
5804: CALL_OW 383
// un = CreateHuman ;
5808: LD_ADDR_VAR 0 3
5812: PUSH
5813: CALL_OW 44
5817: ST_TO_ADDR
// ruBehMehs = ruBehMehs ^ un ;
5818: LD_ADDR_EXP 58
5822: PUSH
5823: LD_EXP 58
5827: PUSH
5828: LD_VAR 0 3
5832: ADD
5833: ST_TO_ADDR
// PlaceUnitArea ( un , RuMehBehSpawn , false ) ;
5834: LD_VAR 0 3
5838: PPUSH
5839: LD_INT 17
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: CALL_OW 49
// end ;
5849: GO 5779
5851: POP
5852: POP
// PlaceUnitArea ( Kovalyuk , RuMehBehSpawn , false ) ;
5853: LD_EXP 37
5857: PPUSH
5858: LD_INT 17
5860: PPUSH
5861: LD_INT 0
5863: PPUSH
5864: CALL_OW 49
// SetSide ( Kovalyuk , 6 ) ;
5868: LD_EXP 37
5872: PPUSH
5873: LD_INT 6
5875: PPUSH
5876: CALL_OW 235
// SetSide ( RuBehDep , 6 ) ;
5880: LD_INT 145
5882: PPUSH
5883: LD_INT 6
5885: PPUSH
5886: CALL_OW 235
// ComBuildBehemoth ( ruBehMehs [ 1 ] , b_behemoth , 193 , 118 , 0 ) ;
5890: LD_EXP 58
5894: PUSH
5895: LD_INT 1
5897: ARRAY
5898: PPUSH
5899: LD_INT 37
5901: PPUSH
5902: LD_INT 193
5904: PPUSH
5905: LD_INT 118
5907: PPUSH
5908: LD_INT 0
5910: PPUSH
5911: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 2 ] , b_behemoth , 204 , 119 , 0 ) ;
5915: LD_EXP 58
5919: PUSH
5920: LD_INT 2
5922: ARRAY
5923: PPUSH
5924: LD_INT 37
5926: PPUSH
5927: LD_INT 204
5929: PPUSH
5930: LD_INT 119
5932: PPUSH
5933: LD_INT 0
5935: PPUSH
5936: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 3 ] , b_behemoth , 195 , 126 , 0 ) ;
5940: LD_EXP 58
5944: PUSH
5945: LD_INT 3
5947: ARRAY
5948: PPUSH
5949: LD_INT 37
5951: PPUSH
5952: LD_INT 195
5954: PPUSH
5955: LD_INT 126
5957: PPUSH
5958: LD_INT 0
5960: PPUSH
5961: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 4 ] , b_behemoth , 207 , 126 , 0 ) ;
5965: LD_EXP 58
5969: PUSH
5970: LD_INT 4
5972: ARRAY
5973: PPUSH
5974: LD_INT 37
5976: PPUSH
5977: LD_INT 207
5979: PPUSH
5980: LD_INT 126
5982: PPUSH
5983: LD_INT 0
5985: PPUSH
5986: CALL_OW 170
// end ; end_of_file
5990: LD_VAR 0 1
5994: RET
// export function PrepareAlliance ; var i ; begin
5995: LD_INT 0
5997: PPUSH
5998: PPUSH
// uc_side = 7 ;
5999: LD_ADDR_OWVAR 20
6003: PUSH
6004: LD_INT 7
6006: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
6007: LD_ADDR_EXP 28
6011: PUSH
6012: LD_STRING Roth
6014: PPUSH
6015: LD_INT 0
6017: PPUSH
6018: CALL 6640 0 2
6022: ST_TO_ADDR
// PlaceUnitArea ( Roth , RothSpawn , false ) ;
6023: LD_EXP 28
6027: PPUSH
6028: LD_INT 31
6030: PPUSH
6031: LD_INT 0
6033: PPUSH
6034: CALL_OW 49
// ComTurnXY ( Roth , 248 , 187 ) ;
6038: LD_EXP 28
6042: PPUSH
6043: LD_INT 248
6045: PPUSH
6046: LD_INT 187
6048: PPUSH
6049: CALL_OW 118
// if TestCharacters ( 10c_Simms ) = true then
6053: LD_STRING 10c_Simms
6055: PPUSH
6056: CALL_OW 28
6060: PUSH
6061: LD_INT 1
6063: EQUAL
6064: IFFALSE 6114
// begin Simms = PrepareUnit ( 10c_Simms , true ) ;
6066: LD_ADDR_EXP 48
6070: PUSH
6071: LD_STRING 10c_Simms
6073: PPUSH
6074: LD_INT 1
6076: PPUSH
6077: CALL 6640 0 2
6081: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6082: LD_EXP 48
6086: PPUSH
6087: LD_INT 32
6089: PPUSH
6090: LD_INT 0
6092: PPUSH
6093: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6097: LD_EXP 48
6101: PPUSH
6102: LD_INT 248
6104: PPUSH
6105: LD_INT 187
6107: PPUSH
6108: CALL_OW 118
// end else
6112: GO 6188
// begin uc_nation = 1 ;
6114: LD_ADDR_OWVAR 21
6118: PUSH
6119: LD_INT 1
6121: ST_TO_ADDR
// hc_name =  ;
6122: LD_ADDR_OWVAR 26
6126: PUSH
6127: LD_STRING 
6129: ST_TO_ADDR
// hc_gallery =  ;
6130: LD_ADDR_OWVAR 33
6134: PUSH
6135: LD_STRING 
6137: ST_TO_ADDR
// PrepareScientist ( sex_female , 10 ) ;
6138: LD_INT 2
6140: PPUSH
6141: LD_INT 10
6143: PPUSH
6144: CALL_OW 384
// Simms = CreateHuman ;
6148: LD_ADDR_EXP 48
6152: PUSH
6153: CALL_OW 44
6157: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6158: LD_EXP 48
6162: PPUSH
6163: LD_INT 32
6165: PPUSH
6166: LD_INT 0
6168: PPUSH
6169: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6173: LD_EXP 48
6177: PPUSH
6178: LD_INT 248
6180: PPUSH
6181: LD_INT 187
6183: PPUSH
6184: CALL_OW 118
// end ; Scholtze = PrepareUnit ( Scholtze , false ) ;
6188: LD_ADDR_EXP 49
6192: PUSH
6193: LD_STRING Scholtze
6195: PPUSH
6196: LD_INT 0
6198: PPUSH
6199: CALL 6640 0 2
6203: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , false ) ;
6204: LD_ADDR_EXP 50
6208: PUSH
6209: LD_STRING Kirilenkova
6211: PPUSH
6212: LD_INT 0
6214: PPUSH
6215: CALL 6640 0 2
6219: ST_TO_ADDR
// Kapitsova = PrepareUnit ( Kapitsova , false ) ;
6220: LD_ADDR_EXP 51
6224: PUSH
6225: LD_STRING Kapitsova
6227: PPUSH
6228: LD_INT 0
6230: PPUSH
6231: CALL 6640 0 2
6235: ST_TO_ADDR
// Karamazov = PrepareUnit ( Karamazov , false ) ;
6236: LD_ADDR_EXP 52
6240: PUSH
6241: LD_STRING Karamazov
6243: PPUSH
6244: LD_INT 0
6246: PPUSH
6247: CALL 6640 0 2
6251: ST_TO_ADDR
// PlaceHumanInUnit ( Scholtze , AllLabR1 ) ;
6252: LD_EXP 49
6256: PPUSH
6257: LD_INT 39
6259: PPUSH
6260: CALL_OW 52
// PlaceHumanInUnit ( Kirilenkova , AllLabR2 ) ;
6264: LD_EXP 50
6268: PPUSH
6269: LD_INT 133
6271: PPUSH
6272: CALL_OW 52
// PlaceHumanInUnit ( Kapitsova , AllLabR2 ) ;
6276: LD_EXP 51
6280: PPUSH
6281: LD_INT 133
6283: PPUSH
6284: CALL_OW 52
// PlaceHumanInUnit ( Karamazov , AllDep ) ;
6288: LD_EXP 52
6292: PPUSH
6293: LD_INT 45
6295: PPUSH
6296: CALL_OW 52
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 2 ) ;
6300: LD_INT 7
6302: PPUSH
6303: LD_INT 1
6305: PPUSH
6306: LD_INT 45
6308: PPUSH
6309: LD_INT 10
6311: PPUSH
6312: LD_INT 2
6314: PPUSH
6315: LD_INT 2
6317: PPUSH
6318: CALL 7734 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
6322: LD_INT 7
6324: PPUSH
6325: LD_INT 3
6327: PPUSH
6328: LD_INT 45
6330: PPUSH
6331: LD_INT 10
6333: PPUSH
6334: LD_INT 2
6336: PPUSH
6337: LD_INT 2
6339: PPUSH
6340: CALL 7734 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
6344: LD_INT 7
6346: PPUSH
6347: LD_INT 1
6349: PPUSH
6350: LD_INT 194
6352: PPUSH
6353: LD_INT 10
6355: PPUSH
6356: LD_INT 5
6358: PPUSH
6359: LD_INT 4
6361: PPUSH
6362: CALL 7734 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
6366: LD_INT 7
6368: PPUSH
6369: LD_INT 3
6371: PPUSH
6372: LD_INT 194
6374: PPUSH
6375: LD_INT 10
6377: PPUSH
6378: LD_INT 8
6380: PPUSH
6381: LD_INT 6
6383: PPUSH
6384: CALL 7734 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
6388: LD_INT 7
6390: PPUSH
6391: LD_INT 1
6393: PPUSH
6394: LD_INT 156
6396: PPUSH
6397: LD_INT 10
6399: PPUSH
6400: LD_INT 3
6402: PPUSH
6403: LD_INT 6
6405: PPUSH
6406: CALL 7734 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
6410: LD_INT 7
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: LD_INT 162
6418: PPUSH
6419: LD_INT 10
6421: PPUSH
6422: LD_INT 3
6424: PPUSH
6425: LD_INT 6
6427: PPUSH
6428: CALL 7734 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 3 ) ;
6432: LD_INT 7
6434: PPUSH
6435: LD_INT 3
6437: PPUSH
6438: LD_INT 39
6440: PPUSH
6441: LD_INT 10
6443: PPUSH
6444: LD_INT 4
6446: PPUSH
6447: LD_INT 3
6449: PPUSH
6450: CALL 7734 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 2 ) ;
6454: LD_INT 7
6456: PPUSH
6457: LD_INT 3
6459: PPUSH
6460: LD_INT 133
6462: PPUSH
6463: LD_INT 10
6465: PPUSH
6466: LD_INT 4
6468: PPUSH
6469: LD_INT 2
6471: PPUSH
6472: CALL 7734 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
6476: LD_INT 7
6478: PPUSH
6479: LD_INT 1
6481: PPUSH
6482: LD_INT 46
6484: PPUSH
6485: LD_INT 10
6487: PPUSH
6488: LD_INT 4
6490: PPUSH
6491: LD_INT 2
6493: PPUSH
6494: CALL 7734 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
6498: LD_ADDR_VAR 0 2
6502: PUSH
6503: LD_INT 22
6505: PUSH
6506: LD_INT 7
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: PUSH
6513: LD_INT 21
6515: PUSH
6516: LD_INT 3
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PUSH
6523: LD_INT 30
6525: PUSH
6526: LD_INT 32
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: LD_INT 58
6535: PUSH
6536: EMPTY
6537: LIST
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: PPUSH
6545: CALL_OW 69
6549: PUSH
6550: FOR_IN
6551: IFFALSE 6598
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
6553: LD_INT 7
6555: PPUSH
6556: LD_INT 1
6558: PUSH
6559: LD_INT 3
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 1
6568: PPUSH
6569: LD_INT 2
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: PPUSH
6578: LD_VAR 0 2
6582: PPUSH
6583: LD_INT 10
6585: PPUSH
6586: LD_INT 1
6588: PPUSH
6589: LD_INT 1
6591: PPUSH
6592: CALL 7734 0 6
6596: GO 6550
6598: POP
6599: POP
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 3 ) ;
6600: LD_INT 7
6602: PPUSH
6603: LD_INT 1
6605: PPUSH
6606: LD_INT 226
6608: PPUSH
6609: LD_INT 10
6611: PPUSH
6612: LD_INT 3
6614: PPUSH
6615: LD_INT 3
6617: PPUSH
6618: CALL 7734 0 6
// allianceControler = UnitsInside ( AllControl ) ;
6622: LD_ADDR_EXP 63
6626: PUSH
6627: LD_INT 226
6629: PPUSH
6630: CALL_OW 313
6634: ST_TO_ADDR
// end ; end_of_file
6635: LD_VAR 0 1
6639: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6640: LD_INT 0
6642: PPUSH
6643: PPUSH
// if exist_mode then
6644: LD_VAR 0 2
6648: IFFALSE 6667
// unit := CreateCharacter ( ident ) else
6650: LD_ADDR_VAR 0 4
6654: PUSH
6655: LD_VAR 0 1
6659: PPUSH
6660: CALL_OW 34
6664: ST_TO_ADDR
6665: GO 6682
// unit := NewCharacter ( ident ) ;
6667: LD_ADDR_VAR 0 4
6671: PUSH
6672: LD_VAR 0 1
6676: PPUSH
6677: CALL_OW 25
6681: ST_TO_ADDR
// result := unit ;
6682: LD_ADDR_VAR 0 3
6686: PUSH
6687: LD_VAR 0 4
6691: ST_TO_ADDR
// end ;
6692: LD_VAR 0 3
6696: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
6697: LD_INT 0
6699: PPUSH
6700: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
6701: LD_STRING 13s_
6703: PUSH
6704: LD_VAR 0 1
6708: STR
6709: PPUSH
6710: CALL_OW 28
6714: PUSH
6715: LD_INT 1
6717: EQUAL
6718: IFFALSE 6739
// unit = CreateCharacter ( 13s_ & ident ) ;
6720: LD_ADDR_VAR 0 3
6724: PUSH
6725: LD_STRING 13s_
6727: PUSH
6728: LD_VAR 0 1
6732: STR
6733: PPUSH
6734: CALL_OW 34
6738: ST_TO_ADDR
// result := unit ;
6739: LD_ADDR_VAR 0 2
6743: PUSH
6744: LD_VAR 0 3
6748: ST_TO_ADDR
// end ;
6749: LD_VAR 0 2
6753: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
6754: LD_INT 0
6756: PPUSH
6757: PPUSH
// if TestCharacters ( 15_ & ident ) = true then
6758: LD_STRING 15_
6760: PUSH
6761: LD_VAR 0 1
6765: STR
6766: PPUSH
6767: CALL_OW 28
6771: PUSH
6772: LD_INT 1
6774: EQUAL
6775: IFFALSE 6812
// begin unit = CreateCharacter ( 15_ & ident ) ;
6777: LD_ADDR_VAR 0 3
6781: PUSH
6782: LD_STRING 15_
6784: PUSH
6785: LD_VAR 0 1
6789: STR
6790: PPUSH
6791: CALL_OW 34
6795: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ unit ;
6796: LD_ADDR_EXP 20
6800: PUSH
6801: LD_EXP 20
6805: PUSH
6806: LD_VAR 0 3
6810: ADD
6811: ST_TO_ADDR
// end ; result := unit ;
6812: LD_ADDR_VAR 0 2
6816: PUSH
6817: LD_VAR 0 3
6821: ST_TO_ADDR
// end ;
6822: LD_VAR 0 2
6826: RET
// export function TabLenght ( tab ) ; var i ; begin
6827: LD_INT 0
6829: PPUSH
6830: PPUSH
// for i = 1 to tab do
6831: LD_ADDR_VAR 0 3
6835: PUSH
6836: DOUBLE
6837: LD_INT 1
6839: DEC
6840: ST_TO_ADDR
6841: LD_VAR 0 1
6845: PUSH
6846: FOR_TO
6847: IFFALSE 6861
// result = i ;
6849: LD_ADDR_VAR 0 2
6853: PUSH
6854: LD_VAR 0 3
6858: ST_TO_ADDR
6859: GO 6846
6861: POP
6862: POP
// end ;
6863: LD_VAR 0 2
6867: RET
// export function Video ( mode ) ; begin
6868: LD_INT 0
6870: PPUSH
// ingame_video = mode ;
6871: LD_ADDR_OWVAR 52
6875: PUSH
6876: LD_VAR 0 1
6880: ST_TO_ADDR
// interface_hidden = mode ;
6881: LD_ADDR_OWVAR 54
6885: PUSH
6886: LD_VAR 0 1
6890: ST_TO_ADDR
// end ;
6891: LD_VAR 0 2
6895: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
6900: PPUSH
// characters := characters diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6901: LD_ADDR_VAR 0 1
6905: PUSH
6906: LD_VAR 0 1
6910: PUSH
6911: LD_EXP 1
6915: PUSH
6916: LD_EXP 3
6920: PUSH
6921: LD_EXP 21
6925: PUSH
6926: LD_EXP 22
6930: PUSH
6931: LD_EXP 23
6935: PUSH
6936: LD_EXP 4
6940: PUSH
6941: LD_EXP 5
6945: PUSH
6946: LD_EXP 6
6950: PUSH
6951: LD_EXP 7
6955: PUSH
6956: LD_EXP 8
6960: PUSH
6961: LD_EXP 9
6965: PUSH
6966: LD_EXP 10
6970: PUSH
6971: LD_EXP 11
6975: PUSH
6976: LD_EXP 12
6980: PUSH
6981: LD_EXP 13
6985: PUSH
6986: LD_EXP 14
6990: PUSH
6991: LD_EXP 15
6995: PUSH
6996: LD_EXP 17
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: DIFF
7021: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
7022: LD_ADDR_VAR 0 6
7026: PUSH
7027: LD_INT 1
7029: PPUSH
7030: LD_VAR 0 1
7034: PPUSH
7035: CALL_OW 12
7039: ST_TO_ADDR
// for i = 1 to characters do
7040: LD_ADDR_VAR 0 5
7044: PUSH
7045: DOUBLE
7046: LD_INT 1
7048: DEC
7049: ST_TO_ADDR
7050: LD_VAR 0 1
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7166
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7058: LD_VAR 0 5
7062: PUSH
7063: LD_VAR 0 6
7067: EQUAL
7068: PUSH
7069: LD_VAR 0 1
7073: PUSH
7074: LD_VAR 0 5
7078: ARRAY
7079: PPUSH
7080: CALL_OW 258
7084: PUSH
7085: LD_INT 1
7087: EQUAL
7088: AND
7089: IFFALSE 7111
// Say ( characters [ i ] , dialogMID ) ;
7091: LD_VAR 0 1
7095: PUSH
7096: LD_VAR 0 5
7100: ARRAY
7101: PPUSH
7102: LD_VAR 0 2
7106: PPUSH
7107: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7111: LD_VAR 0 5
7115: PUSH
7116: LD_VAR 0 6
7120: EQUAL
7121: PUSH
7122: LD_VAR 0 1
7126: PUSH
7127: LD_VAR 0 5
7131: ARRAY
7132: PPUSH
7133: CALL_OW 258
7137: PUSH
7138: LD_INT 2
7140: EQUAL
7141: AND
7142: IFFALSE 7164
// Say ( characters [ i ] , dialogFID ) ;
7144: LD_VAR 0 1
7148: PUSH
7149: LD_VAR 0 5
7153: ARRAY
7154: PPUSH
7155: LD_VAR 0 3
7159: PPUSH
7160: CALL_OW 88
// end ;
7164: GO 7055
7166: POP
7167: POP
// end ;
7168: LD_VAR 0 4
7172: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
7173: LD_INT 0
7175: PPUSH
7176: PPUSH
7177: PPUSH
7178: PPUSH
// if not list then
7179: LD_VAR 0 1
7183: NOT
7184: IFFALSE 7188
// exit ;
7186: GO 7535
// result := [ ] ;
7188: LD_ADDR_VAR 0 3
7192: PUSH
7193: EMPTY
7194: ST_TO_ADDR
// for i in list do
7195: LD_ADDR_VAR 0 4
7199: PUSH
7200: LD_VAR 0 1
7204: PUSH
7205: FOR_IN
7206: IFFALSE 7447
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
7208: LD_ADDR_VAR 0 6
7212: PUSH
7213: LD_VAR 0 4
7217: PPUSH
7218: LD_INT 1
7220: PPUSH
7221: CALL_OW 259
7225: PUSH
7226: LD_VAR 0 4
7230: PPUSH
7231: LD_INT 2
7233: PPUSH
7234: CALL_OW 259
7238: PLUS
7239: PUSH
7240: LD_VAR 0 4
7244: PPUSH
7245: LD_INT 3
7247: PPUSH
7248: CALL_OW 259
7252: PLUS
7253: PUSH
7254: LD_VAR 0 4
7258: PPUSH
7259: LD_INT 4
7261: PPUSH
7262: CALL_OW 259
7266: PLUS
7267: PUSH
7268: LD_INT 4
7270: DIV
7271: ST_TO_ADDR
// if not result then
7272: LD_VAR 0 3
7276: NOT
7277: IFFALSE 7303
// result := [ [ i , tmp ] ] else
7279: LD_ADDR_VAR 0 3
7283: PUSH
7284: LD_VAR 0 4
7288: PUSH
7289: LD_VAR 0 6
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: EMPTY
7299: LIST
7300: ST_TO_ADDR
7301: GO 7445
// begin if result [ result ] [ 2 ] <= tmp then
7303: LD_VAR 0 3
7307: PUSH
7308: LD_VAR 0 3
7312: ARRAY
7313: PUSH
7314: LD_INT 2
7316: ARRAY
7317: PUSH
7318: LD_VAR 0 6
7322: LESSEQUAL
7323: IFFALSE 7365
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7325: LD_ADDR_VAR 0 3
7329: PUSH
7330: LD_VAR 0 3
7334: PPUSH
7335: LD_VAR 0 3
7339: PUSH
7340: LD_INT 1
7342: PLUS
7343: PPUSH
7344: LD_VAR 0 4
7348: PUSH
7349: LD_VAR 0 6
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PPUSH
7358: CALL_OW 2
7362: ST_TO_ADDR
7363: GO 7445
// for j = 1 to result do
7365: LD_ADDR_VAR 0 5
7369: PUSH
7370: DOUBLE
7371: LD_INT 1
7373: DEC
7374: ST_TO_ADDR
7375: LD_VAR 0 3
7379: PUSH
7380: FOR_TO
7381: IFFALSE 7443
// begin if tmp < result [ j ] [ 2 ] then
7383: LD_VAR 0 6
7387: PUSH
7388: LD_VAR 0 3
7392: PUSH
7393: LD_VAR 0 5
7397: ARRAY
7398: PUSH
7399: LD_INT 2
7401: ARRAY
7402: LESS
7403: IFFALSE 7441
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7405: LD_ADDR_VAR 0 3
7409: PUSH
7410: LD_VAR 0 3
7414: PPUSH
7415: LD_VAR 0 5
7419: PPUSH
7420: LD_VAR 0 4
7424: PUSH
7425: LD_VAR 0 6
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PPUSH
7434: CALL_OW 2
7438: ST_TO_ADDR
// break ;
7439: GO 7443
// end ; end ;
7441: GO 7380
7443: POP
7444: POP
// end ; end ;
7445: GO 7205
7447: POP
7448: POP
// if result and not asc then
7449: LD_VAR 0 3
7453: PUSH
7454: LD_VAR 0 2
7458: NOT
7459: AND
7460: IFFALSE 7535
// begin tmp := result ;
7462: LD_ADDR_VAR 0 6
7466: PUSH
7467: LD_VAR 0 3
7471: ST_TO_ADDR
// for i = tmp downto 1 do
7472: LD_ADDR_VAR 0 4
7476: PUSH
7477: DOUBLE
7478: LD_VAR 0 6
7482: INC
7483: ST_TO_ADDR
7484: LD_INT 1
7486: PUSH
7487: FOR_DOWNTO
7488: IFFALSE 7533
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7490: LD_ADDR_VAR 0 3
7494: PUSH
7495: LD_VAR 0 3
7499: PPUSH
7500: LD_VAR 0 6
7504: PUSH
7505: LD_VAR 0 4
7509: MINUS
7510: PUSH
7511: LD_INT 1
7513: PLUS
7514: PPUSH
7515: LD_VAR 0 6
7519: PUSH
7520: LD_VAR 0 4
7524: ARRAY
7525: PPUSH
7526: CALL_OW 1
7530: ST_TO_ADDR
7531: GO 7487
7533: POP
7534: POP
// end ; end ;
7535: LD_VAR 0 3
7539: RET
// export function PrepareDifficulty ; begin
7540: LD_INT 0
7542: PPUSH
// if difficulty = 1 then
7543: LD_OWVAR 67
7547: PUSH
7548: LD_INT 1
7550: EQUAL
7551: IFFALSE 7579
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7553: LD_INT 51
7555: PPUSH
7556: LD_INT 6
7558: PPUSH
7559: LD_INT 2
7561: PPUSH
7562: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7566: LD_INT 57
7568: PPUSH
7569: LD_INT 6
7571: PPUSH
7572: LD_INT 2
7574: PPUSH
7575: CALL_OW 322
// end ; if difficulty = 2 then
7579: LD_OWVAR 67
7583: PUSH
7584: LD_INT 2
7586: EQUAL
7587: IFFALSE 7641
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7589: LD_INT 51
7591: PPUSH
7592: LD_INT 6
7594: PPUSH
7595: LD_INT 2
7597: PPUSH
7598: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7602: LD_INT 57
7604: PPUSH
7605: LD_INT 6
7607: PPUSH
7608: LD_INT 2
7610: PPUSH
7611: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7615: LD_INT 52
7617: PPUSH
7618: LD_INT 6
7620: PPUSH
7621: LD_INT 2
7623: PPUSH
7624: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7628: LD_INT 58
7630: PPUSH
7631: LD_INT 6
7633: PPUSH
7634: LD_INT 2
7636: PPUSH
7637: CALL_OW 322
// end ; if difficulty = 3 then
7641: LD_OWVAR 67
7645: PUSH
7646: LD_INT 3
7648: EQUAL
7649: IFFALSE 7729
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7651: LD_INT 51
7653: PPUSH
7654: LD_INT 6
7656: PPUSH
7657: LD_INT 2
7659: PPUSH
7660: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7664: LD_INT 57
7666: PPUSH
7667: LD_INT 6
7669: PPUSH
7670: LD_INT 2
7672: PPUSH
7673: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7677: LD_INT 52
7679: PPUSH
7680: LD_INT 6
7682: PPUSH
7683: LD_INT 2
7685: PPUSH
7686: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7690: LD_INT 58
7692: PPUSH
7693: LD_INT 6
7695: PPUSH
7696: LD_INT 2
7698: PPUSH
7699: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
7703: LD_INT 53
7705: PPUSH
7706: LD_INT 6
7708: PPUSH
7709: LD_INT 2
7711: PPUSH
7712: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
7716: LD_INT 59
7718: PPUSH
7719: LD_INT 6
7721: PPUSH
7722: LD_INT 2
7724: PPUSH
7725: CALL_OW 322
// end ; end ;
7729: LD_VAR 0 1
7733: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
7734: LD_INT 0
7736: PPUSH
7737: PPUSH
7738: PPUSH
7739: PPUSH
7740: PPUSH
// for i = 1 to count do
7741: LD_ADDR_VAR 0 8
7745: PUSH
7746: DOUBLE
7747: LD_INT 1
7749: DEC
7750: ST_TO_ADDR
7751: LD_VAR 0 6
7755: PUSH
7756: FOR_TO
7757: IFFALSE 7838
// begin uc_side = side ;
7759: LD_ADDR_OWVAR 20
7763: PUSH
7764: LD_VAR 0 1
7768: ST_TO_ADDR
// uc_nation = nation ;
7769: LD_ADDR_OWVAR 21
7773: PUSH
7774: LD_VAR 0 2
7778: ST_TO_ADDR
// hc_gallery =  ;
7779: LD_ADDR_OWVAR 33
7783: PUSH
7784: LD_STRING 
7786: ST_TO_ADDR
// hc_name =  ;
7787: LD_ADDR_OWVAR 26
7791: PUSH
7792: LD_STRING 
7794: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7795: LD_INT 0
7797: PPUSH
7798: LD_VAR 0 5
7802: PPUSH
7803: LD_VAR 0 4
7807: PPUSH
7808: CALL_OW 380
// un = CreateHuman ;
7812: LD_ADDR_VAR 0 10
7816: PUSH
7817: CALL_OW 44
7821: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7822: LD_VAR 0 10
7826: PPUSH
7827: LD_VAR 0 3
7831: PPUSH
7832: CALL_OW 52
// end ;
7836: GO 7756
7838: POP
7839: POP
// end ;
7840: LD_VAR 0 7
7844: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7845: LD_INT 0
7847: PPUSH
7848: PPUSH
7849: PPUSH
7850: PPUSH
7851: PPUSH
7852: PPUSH
7853: PPUSH
7854: PPUSH
7855: PPUSH
7856: PPUSH
7857: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7858: LD_INT 2100
7860: PUSH
7861: LD_INT 3150
7863: PUSH
7864: LD_INT 4200
7866: PUSH
7867: LD_INT 5250
7869: PUSH
7870: LD_INT 6300
7872: PUSH
7873: LD_INT 7350
7875: PUSH
7876: LD_INT 8400
7878: PUSH
7879: LD_INT 9450
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: PUSH
7892: LD_INT 1
7894: PPUSH
7895: LD_INT 8
7897: PPUSH
7898: CALL_OW 12
7902: ARRAY
7903: PPUSH
7904: CALL_OW 67
// amChassisTab = [ ] ;
7908: LD_ADDR_VAR 0 19
7912: PUSH
7913: EMPTY
7914: ST_TO_ADDR
// arChassisTab = [ ] ;
7915: LD_ADDR_VAR 0 18
7919: PUSH
7920: EMPTY
7921: ST_TO_ADDR
// ruChassisTab = [ ] ;
7922: LD_ADDR_VAR 0 17
7926: PUSH
7927: EMPTY
7928: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7929: LD_INT 35
7931: PPUSH
7932: CALL_OW 67
// if nation = 1 then
7936: LD_VAR 0 5
7940: PUSH
7941: LD_INT 1
7943: EQUAL
7944: IFFALSE 8435
// begin uc_side = side ;
7946: LD_ADDR_OWVAR 20
7950: PUSH
7951: LD_VAR 0 2
7955: ST_TO_ADDR
// uc_nation = nation ;
7956: LD_ADDR_OWVAR 21
7960: PUSH
7961: LD_VAR 0 5
7965: ST_TO_ADDR
// vc_engine = vehengine ;
7966: LD_ADDR_OWVAR 39
7970: PUSH
7971: LD_VAR 0 6
7975: ST_TO_ADDR
// vc_control = vehcontrol ;
7976: LD_ADDR_OWVAR 38
7980: PUSH
7981: LD_VAR 0 7
7985: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
7986: LD_ADDR_OWVAR 40
7990: PUSH
7991: LD_VAR 0 10
7995: PUSH
7996: LD_INT 1
7998: PPUSH
7999: LD_VAR 0 10
8003: PPUSH
8004: CALL_OW 12
8008: ARRAY
8009: ST_TO_ADDR
// for j = 1 to AMWeapon do
8010: LD_ADDR_VAR 0 14
8014: PUSH
8015: DOUBLE
8016: LD_INT 1
8018: DEC
8019: ST_TO_ADDR
8020: LD_VAR 0 10
8024: PUSH
8025: FOR_TO
8026: IFFALSE 8327
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8028: LD_VAR 0 10
8032: PUSH
8033: LD_VAR 0 14
8037: ARRAY
8038: PUSH
8039: LD_INT 2
8041: EQUAL
8042: PUSH
8043: LD_VAR 0 10
8047: PUSH
8048: LD_VAR 0 14
8052: ARRAY
8053: PUSH
8054: LD_INT 3
8056: EQUAL
8057: OR
8058: IFFALSE 8111
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8060: LD_ADDR_VAR 0 19
8064: PUSH
8065: LD_INT 1
8067: PUSH
8068: LD_INT 2
8070: PUSH
8071: LD_INT 3
8073: PUSH
8074: LD_INT 4
8076: PUSH
8077: LD_INT 5
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8087: LD_ADDR_OWVAR 37
8091: PUSH
8092: LD_VAR 0 19
8096: PUSH
8097: LD_INT 1
8099: PPUSH
8100: LD_VAR 0 19
8104: PPUSH
8105: CALL_OW 12
8109: ARRAY
8110: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8111: LD_VAR 0 10
8115: PUSH
8116: LD_VAR 0 14
8120: ARRAY
8121: PUSH
8122: LD_INT 4
8124: EQUAL
8125: PUSH
8126: LD_VAR 0 10
8130: PUSH
8131: LD_VAR 0 14
8135: ARRAY
8136: PUSH
8137: LD_INT 5
8139: EQUAL
8140: OR
8141: PUSH
8142: LD_VAR 0 10
8146: PUSH
8147: LD_VAR 0 14
8151: ARRAY
8152: PUSH
8153: LD_INT 9
8155: EQUAL
8156: OR
8157: PUSH
8158: LD_VAR 0 10
8162: PUSH
8163: LD_VAR 0 14
8167: ARRAY
8168: PUSH
8169: LD_INT 11
8171: EQUAL
8172: OR
8173: PUSH
8174: LD_VAR 0 10
8178: PUSH
8179: LD_VAR 0 14
8183: ARRAY
8184: PUSH
8185: LD_INT 7
8187: EQUAL
8188: OR
8189: IFFALSE 8238
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8191: LD_ADDR_VAR 0 19
8195: PUSH
8196: LD_INT 2
8198: PUSH
8199: LD_INT 3
8201: PUSH
8202: LD_INT 4
8204: PUSH
8205: LD_INT 5
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8214: LD_ADDR_OWVAR 37
8218: PUSH
8219: LD_VAR 0 19
8223: PUSH
8224: LD_INT 1
8226: PPUSH
8227: LD_VAR 0 19
8231: PPUSH
8232: CALL_OW 12
8236: ARRAY
8237: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8238: LD_VAR 0 10
8242: PUSH
8243: LD_VAR 0 14
8247: ARRAY
8248: PUSH
8249: LD_INT 8
8251: EQUAL
8252: PUSH
8253: LD_VAR 0 10
8257: PUSH
8258: LD_VAR 0 14
8262: ARRAY
8263: PUSH
8264: LD_INT 6
8266: EQUAL
8267: OR
8268: PUSH
8269: LD_VAR 0 10
8273: PUSH
8274: LD_VAR 0 14
8278: ARRAY
8279: PUSH
8280: LD_INT 10
8282: EQUAL
8283: OR
8284: IFFALSE 8325
// begin amChassisTab = [ 4 , 5 ] ;
8286: LD_ADDR_VAR 0 19
8290: PUSH
8291: LD_INT 4
8293: PUSH
8294: LD_INT 5
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8301: LD_ADDR_OWVAR 37
8305: PUSH
8306: LD_VAR 0 19
8310: PUSH
8311: LD_INT 1
8313: PPUSH
8314: LD_VAR 0 19
8318: PPUSH
8319: CALL_OW 12
8323: ARRAY
8324: ST_TO_ADDR
// end ; end ;
8325: GO 8025
8327: POP
8328: POP
// veh = CreateVehicle ;
8329: LD_ADDR_VAR 0 16
8333: PUSH
8334: CALL_OW 45
8338: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8339: LD_VAR 0 16
8343: PPUSH
8344: LD_VAR 0 1
8348: PPUSH
8349: LD_INT 0
8351: PPUSH
8352: CALL_OW 49
// if vc_control = 1 then
8356: LD_OWVAR 38
8360: PUSH
8361: LD_INT 1
8363: EQUAL
8364: IFFALSE 8421
// begin hc_gallery =  ;
8366: LD_ADDR_OWVAR 33
8370: PUSH
8371: LD_STRING 
8373: ST_TO_ADDR
// hc_name =  ;
8374: LD_ADDR_OWVAR 26
8378: PUSH
8379: LD_STRING 
8381: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8382: LD_INT 0
8384: PPUSH
8385: LD_INT 3
8387: PPUSH
8388: LD_VAR 0 4
8392: PPUSH
8393: CALL_OW 380
// un = CreateHuman ;
8397: LD_ADDR_VAR 0 15
8401: PUSH
8402: CALL_OW 44
8406: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8407: LD_VAR 0 15
8411: PPUSH
8412: LD_VAR 0 16
8416: PPUSH
8417: CALL_OW 52
// end ; i = i + 1 ;
8421: LD_ADDR_VAR 0 13
8425: PUSH
8426: LD_VAR 0 13
8430: PUSH
8431: LD_INT 1
8433: PLUS
8434: ST_TO_ADDR
// end ; if nation = 2 then
8435: LD_VAR 0 5
8439: PUSH
8440: LD_INT 2
8442: EQUAL
8443: IFFALSE 8867
// begin uc_side = side ;
8445: LD_ADDR_OWVAR 20
8449: PUSH
8450: LD_VAR 0 2
8454: ST_TO_ADDR
// uc_nation = nation ;
8455: LD_ADDR_OWVAR 21
8459: PUSH
8460: LD_VAR 0 5
8464: ST_TO_ADDR
// vc_engine = vehengine ;
8465: LD_ADDR_OWVAR 39
8469: PUSH
8470: LD_VAR 0 6
8474: ST_TO_ADDR
// vc_control = vehcontrol ;
8475: LD_ADDR_OWVAR 38
8479: PUSH
8480: LD_VAR 0 7
8484: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8485: LD_ADDR_OWVAR 40
8489: PUSH
8490: LD_VAR 0 9
8494: PUSH
8495: LD_INT 1
8497: PPUSH
8498: LD_VAR 0 9
8502: PPUSH
8503: CALL_OW 12
8507: ARRAY
8508: ST_TO_ADDR
// for j = 1 to ARWeapons do
8509: LD_ADDR_VAR 0 14
8513: PUSH
8514: DOUBLE
8515: LD_INT 1
8517: DEC
8518: ST_TO_ADDR
8519: LD_VAR 0 9
8523: PUSH
8524: FOR_TO
8525: IFFALSE 8759
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8527: LD_VAR 0 9
8531: PUSH
8532: LD_VAR 0 14
8536: ARRAY
8537: PUSH
8538: LD_INT 24
8540: EQUAL
8541: PUSH
8542: LD_VAR 0 9
8546: PUSH
8547: LD_VAR 0 14
8551: ARRAY
8552: PUSH
8553: LD_INT 22
8555: EQUAL
8556: OR
8557: PUSH
8558: LD_VAR 0 9
8562: PUSH
8563: LD_VAR 0 14
8567: ARRAY
8568: PUSH
8569: LD_INT 23
8571: EQUAL
8572: OR
8573: PUSH
8574: LD_VAR 0 9
8578: PUSH
8579: LD_VAR 0 14
8583: ARRAY
8584: PUSH
8585: LD_INT 30
8587: EQUAL
8588: OR
8589: IFFALSE 8638
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8591: LD_ADDR_VAR 0 18
8595: PUSH
8596: LD_INT 11
8598: PUSH
8599: LD_INT 12
8601: PUSH
8602: LD_INT 13
8604: PUSH
8605: LD_INT 14
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8614: LD_ADDR_OWVAR 37
8618: PUSH
8619: LD_VAR 0 18
8623: PUSH
8624: LD_INT 1
8626: PPUSH
8627: LD_VAR 0 18
8631: PPUSH
8632: CALL_OW 12
8636: ARRAY
8637: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8638: LD_VAR 0 9
8642: PUSH
8643: LD_VAR 0 14
8647: ARRAY
8648: PUSH
8649: LD_INT 29
8651: EQUAL
8652: PUSH
8653: LD_VAR 0 9
8657: PUSH
8658: LD_VAR 0 14
8662: ARRAY
8663: PUSH
8664: LD_INT 28
8666: EQUAL
8667: OR
8668: PUSH
8669: LD_VAR 0 9
8673: PUSH
8674: LD_VAR 0 14
8678: ARRAY
8679: PUSH
8680: LD_INT 27
8682: EQUAL
8683: OR
8684: PUSH
8685: LD_VAR 0 9
8689: PUSH
8690: LD_VAR 0 14
8694: ARRAY
8695: PUSH
8696: LD_INT 26
8698: EQUAL
8699: OR
8700: PUSH
8701: LD_VAR 0 9
8705: PUSH
8706: LD_VAR 0 14
8710: ARRAY
8711: PUSH
8712: LD_INT 25
8714: EQUAL
8715: OR
8716: IFFALSE 8757
// begin arChassisTab = [ 13 , 14 ] ;
8718: LD_ADDR_VAR 0 18
8722: PUSH
8723: LD_INT 13
8725: PUSH
8726: LD_INT 14
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8733: LD_ADDR_OWVAR 37
8737: PUSH
8738: LD_VAR 0 18
8742: PUSH
8743: LD_INT 1
8745: PPUSH
8746: LD_VAR 0 18
8750: PPUSH
8751: CALL_OW 12
8755: ARRAY
8756: ST_TO_ADDR
// end ; end ;
8757: GO 8524
8759: POP
8760: POP
// veh = CreateVehicle ;
8761: LD_ADDR_VAR 0 16
8765: PUSH
8766: CALL_OW 45
8770: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8771: LD_VAR 0 16
8775: PPUSH
8776: LD_VAR 0 1
8780: PPUSH
8781: LD_INT 0
8783: PPUSH
8784: CALL_OW 49
// if vc_control = 1 then
8788: LD_OWVAR 38
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8853
// begin hc_gallery =  ;
8798: LD_ADDR_OWVAR 33
8802: PUSH
8803: LD_STRING 
8805: ST_TO_ADDR
// hc_name =  ;
8806: LD_ADDR_OWVAR 26
8810: PUSH
8811: LD_STRING 
8813: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8814: LD_INT 0
8816: PPUSH
8817: LD_INT 3
8819: PPUSH
8820: LD_VAR 0 4
8824: PPUSH
8825: CALL_OW 380
// un = CreateHuman ;
8829: LD_ADDR_VAR 0 15
8833: PUSH
8834: CALL_OW 44
8838: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8839: LD_VAR 0 15
8843: PPUSH
8844: LD_VAR 0 16
8848: PPUSH
8849: CALL_OW 52
// end ; i = i + 1 ;
8853: LD_ADDR_VAR 0 13
8857: PUSH
8858: LD_VAR 0 13
8862: PUSH
8863: LD_INT 1
8865: PLUS
8866: ST_TO_ADDR
// end ; if nation = 3 then
8867: LD_VAR 0 5
8871: PUSH
8872: LD_INT 3
8874: EQUAL
8875: IFFALSE 9251
// begin uc_side = side ;
8877: LD_ADDR_OWVAR 20
8881: PUSH
8882: LD_VAR 0 2
8886: ST_TO_ADDR
// uc_nation = nation ;
8887: LD_ADDR_OWVAR 21
8891: PUSH
8892: LD_VAR 0 5
8896: ST_TO_ADDR
// vc_engine = vehengine ;
8897: LD_ADDR_OWVAR 39
8901: PUSH
8902: LD_VAR 0 6
8906: ST_TO_ADDR
// vc_control = vehcontrol ;
8907: LD_ADDR_OWVAR 38
8911: PUSH
8912: LD_VAR 0 7
8916: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8917: LD_ADDR_OWVAR 40
8921: PUSH
8922: LD_VAR 0 8
8926: PUSH
8927: LD_INT 1
8929: PPUSH
8930: LD_VAR 0 8
8934: PPUSH
8935: CALL_OW 12
8939: ARRAY
8940: ST_TO_ADDR
// for j = 1 to RuWeapons do
8941: LD_ADDR_VAR 0 14
8945: PUSH
8946: DOUBLE
8947: LD_INT 1
8949: DEC
8950: ST_TO_ADDR
8951: LD_VAR 0 8
8955: PUSH
8956: FOR_TO
8957: IFFALSE 9143
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8959: LD_VAR 0 8
8963: PUSH
8964: LD_VAR 0 14
8968: ARRAY
8969: PUSH
8970: LD_INT 42
8972: EQUAL
8973: PUSH
8974: LD_VAR 0 8
8978: PUSH
8979: LD_VAR 0 14
8983: ARRAY
8984: PUSH
8985: LD_INT 43
8987: EQUAL
8988: OR
8989: PUSH
8990: LD_VAR 0 8
8994: PUSH
8995: LD_VAR 0 14
8999: ARRAY
9000: PUSH
9001: LD_INT 44
9003: EQUAL
9004: OR
9005: PUSH
9006: LD_VAR 0 8
9010: PUSH
9011: LD_VAR 0 14
9015: ARRAY
9016: PUSH
9017: LD_INT 45
9019: EQUAL
9020: OR
9021: PUSH
9022: LD_VAR 0 8
9026: PUSH
9027: LD_VAR 0 14
9031: ARRAY
9032: PUSH
9033: LD_INT 49
9035: EQUAL
9036: OR
9037: IFFALSE 9074
// begin ruChassisTab = [ 24 ] ;
9039: LD_ADDR_VAR 0 17
9043: PUSH
9044: LD_INT 24
9046: PUSH
9047: EMPTY
9048: LIST
9049: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9050: LD_ADDR_OWVAR 37
9054: PUSH
9055: LD_VAR 0 17
9059: PUSH
9060: LD_INT 1
9062: PPUSH
9063: LD_VAR 0 17
9067: PPUSH
9068: CALL_OW 12
9072: ARRAY
9073: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9074: LD_VAR 0 8
9078: PUSH
9079: LD_VAR 0 14
9083: ARRAY
9084: PUSH
9085: LD_INT 46
9087: EQUAL
9088: PUSH
9089: LD_VAR 0 8
9093: PUSH
9094: LD_VAR 0 14
9098: ARRAY
9099: PUSH
9100: LD_INT 47
9102: EQUAL
9103: OR
9104: IFFALSE 9141
// begin ruChassisTab = [ 24 ] ;
9106: LD_ADDR_VAR 0 17
9110: PUSH
9111: LD_INT 24
9113: PUSH
9114: EMPTY
9115: LIST
9116: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9117: LD_ADDR_OWVAR 37
9121: PUSH
9122: LD_VAR 0 17
9126: PUSH
9127: LD_INT 1
9129: PPUSH
9130: LD_VAR 0 17
9134: PPUSH
9135: CALL_OW 12
9139: ARRAY
9140: ST_TO_ADDR
// end ; end ;
9141: GO 8956
9143: POP
9144: POP
// veh = CreateVehicle ;
9145: LD_ADDR_VAR 0 16
9149: PUSH
9150: CALL_OW 45
9154: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9155: LD_VAR 0 16
9159: PPUSH
9160: LD_VAR 0 1
9164: PPUSH
9165: LD_INT 0
9167: PPUSH
9168: CALL_OW 49
// if vc_control = 1 then
9172: LD_OWVAR 38
9176: PUSH
9177: LD_INT 1
9179: EQUAL
9180: IFFALSE 9237
// begin hc_gallery =  ;
9182: LD_ADDR_OWVAR 33
9186: PUSH
9187: LD_STRING 
9189: ST_TO_ADDR
// hc_name =  ;
9190: LD_ADDR_OWVAR 26
9194: PUSH
9195: LD_STRING 
9197: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9198: LD_INT 0
9200: PPUSH
9201: LD_INT 3
9203: PPUSH
9204: LD_VAR 0 4
9208: PPUSH
9209: CALL_OW 380
// un = CreateHuman ;
9213: LD_ADDR_VAR 0 15
9217: PUSH
9218: CALL_OW 44
9222: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9223: LD_VAR 0 15
9227: PPUSH
9228: LD_VAR 0 16
9232: PPUSH
9233: CALL_OW 52
// end ; i = i + 1 ;
9237: LD_ADDR_VAR 0 13
9241: PUSH
9242: LD_VAR 0 13
9246: PUSH
9247: LD_INT 1
9249: PLUS
9250: ST_TO_ADDR
// end ; until i = vehCount ;
9251: LD_VAR 0 13
9255: PUSH
9256: LD_VAR 0 3
9260: EQUAL
9261: IFFALSE 7929
// repeat wait ( 0 0$1 ) ;
9263: LD_INT 35
9265: PPUSH
9266: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
9270: LD_ADDR_VAR 0 20
9274: PUSH
9275: LD_INT 22
9277: PUSH
9278: LD_VAR 0 2
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 21
9289: PUSH
9290: LD_INT 2
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 250
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 69
9316: ST_TO_ADDR
// if vehicleOK_list > 0 then
9317: LD_VAR 0 20
9321: PUSH
9322: LD_INT 0
9324: GREATER
9325: IFFALSE 9544
// begin for i in vehicleOK_list do
9327: LD_ADDR_VAR 0 13
9331: PUSH
9332: LD_VAR 0 20
9336: PUSH
9337: FOR_IN
9338: IFFALSE 9542
// begin if GetSide ( i ) <> side then
9340: LD_VAR 0 13
9344: PPUSH
9345: CALL_OW 255
9349: PUSH
9350: LD_VAR 0 2
9354: NONEQUAL
9355: IFFALSE 9368
// begin ComStop ( i ) ;
9357: LD_VAR 0 13
9361: PPUSH
9362: CALL_OW 141
// continue ;
9366: GO 9337
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9368: LD_ADDR_VAR 0 21
9372: PUSH
9373: LD_INT 22
9375: PUSH
9376: LD_VAR 0 11
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PPUSH
9385: CALL_OW 69
9389: PPUSH
9390: LD_VAR 0 13
9394: PPUSH
9395: CALL_OW 74
9399: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9400: LD_ADDR_VAR 0 22
9404: PUSH
9405: LD_INT 22
9407: PUSH
9408: LD_VAR 0 11
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: LD_INT 2
9419: PUSH
9420: LD_INT 59
9422: PUSH
9423: EMPTY
9424: LIST
9425: PUSH
9426: LD_INT 21
9428: PUSH
9429: LD_INT 1
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 21
9438: PUSH
9439: LD_INT 2
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: EMPTY
9457: LIST
9458: PPUSH
9459: CALL_OW 69
9463: PPUSH
9464: LD_VAR 0 13
9468: PPUSH
9469: CALL_OW 74
9473: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9474: LD_VAR 0 13
9478: PPUSH
9479: LD_VAR 0 21
9483: PPUSH
9484: CALL_OW 296
9488: PUSH
9489: LD_INT 8
9491: PLUS
9492: PUSH
9493: LD_VAR 0 13
9497: PPUSH
9498: LD_VAR 0 22
9502: PPUSH
9503: CALL_OW 296
9507: LESS
9508: IFFALSE 9526
// begin ComAttackUnit ( i , target1 ) ;
9510: LD_VAR 0 13
9514: PPUSH
9515: LD_VAR 0 21
9519: PPUSH
9520: CALL_OW 115
// end else
9524: GO 9540
// begin ComAttackUnit ( i , target2 ) ;
9526: LD_VAR 0 13
9530: PPUSH
9531: LD_VAR 0 22
9535: PPUSH
9536: CALL_OW 115
// end ; end ;
9540: GO 9337
9542: POP
9543: POP
// end ; until vehicleOK_list = [ ] ;
9544: LD_VAR 0 20
9548: PUSH
9549: EMPTY
9550: EQUAL
9551: IFFALSE 9263
// end ;
9553: LD_VAR 0 12
9557: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
9558: LD_INT 0
9560: PPUSH
9561: PPUSH
9562: PPUSH
9563: PPUSH
// for i = 1 to 72 do
9564: LD_ADDR_VAR 0 5
9568: PUSH
9569: DOUBLE
9570: LD_INT 1
9572: DEC
9573: ST_TO_ADDR
9574: LD_INT 72
9576: PUSH
9577: FOR_TO
9578: IFFALSE 9636
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
9580: LD_VAR 0 5
9584: PPUSH
9585: LD_VAR 0 1
9589: PPUSH
9590: CALL_OW 321
9594: PUSH
9595: LD_INT 1
9597: EQUAL
9598: PUSH
9599: LD_VAR 0 5
9603: PPUSH
9604: LD_VAR 0 3
9608: PPUSH
9609: CALL_OW 482
9613: PUSH
9614: LD_INT 1
9616: EQUAL
9617: AND
9618: IFFALSE 9634
// AddComResearch ( lab , i ) ;
9620: LD_VAR 0 2
9624: PPUSH
9625: LD_VAR 0 5
9629: PPUSH
9630: CALL_OW 184
9634: GO 9577
9636: POP
9637: POP
// end ;
9638: LD_VAR 0 4
9642: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9643: LD_INT 0
9645: PPUSH
9646: PPUSH
9647: PPUSH
9648: PPUSH
9649: PPUSH
9650: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Kozlov ] ;
9651: LD_ADDR_VAR 0 8
9655: PUSH
9656: LD_VAR 0 2
9660: PPUSH
9661: CALL_OW 313
9665: PUSH
9666: LD_EXP 36
9670: PUSH
9671: EMPTY
9672: LIST
9673: DIFF
9674: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) diff [ Kozlov ] ;
9675: LD_ADDR_VAR 0 9
9679: PUSH
9680: LD_VAR 0 3
9684: PPUSH
9685: LD_INT 22
9687: PUSH
9688: LD_VAR 0 1
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 25
9699: PUSH
9700: LD_INT 2
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 24
9709: PUSH
9710: LD_INT 750
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 3
9719: PUSH
9720: LD_INT 54
9722: PUSH
9723: EMPTY
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: PPUSH
9736: CALL_OW 70
9740: PUSH
9741: LD_EXP 36
9745: PUSH
9746: EMPTY
9747: LIST
9748: DIFF
9749: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9750: LD_ADDR_VAR 0 6
9754: PUSH
9755: LD_VAR 0 3
9759: PPUSH
9760: LD_INT 22
9762: PUSH
9763: LD_VAR 0 1
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: LD_INT 21
9774: PUSH
9775: LD_INT 3
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 3
9784: PUSH
9785: LD_INT 24
9787: PUSH
9788: LD_INT 1000
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: PPUSH
9807: CALL_OW 70
9811: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
9812: LD_VAR 0 6
9816: NOT
9817: PUSH
9818: LD_INT 22
9820: PUSH
9821: LD_VAR 0 1
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PUSH
9830: LD_INT 25
9832: PUSH
9833: LD_INT 2
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 24
9842: PUSH
9843: LD_INT 250
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL_OW 69
9859: NOT
9860: AND
9861: IFFALSE 9865
// exit ;
9863: GO 10047
// if buildings_list > 0 and engineerOkInside then
9865: LD_VAR 0 6
9869: PUSH
9870: LD_INT 0
9872: GREATER
9873: PUSH
9874: LD_VAR 0 8
9878: AND
9879: IFFALSE 9890
// ComExitBuilding ( engineerOkInside ) ;
9881: LD_VAR 0 8
9885: PPUSH
9886: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
9890: LD_VAR 0 6
9894: PUSH
9895: LD_INT 0
9897: GREATER
9898: PUSH
9899: LD_VAR 0 9
9903: PUSH
9904: LD_INT 0
9906: GREATER
9907: AND
9908: IFFALSE 9928
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
9910: LD_VAR 0 9
9914: PPUSH
9915: LD_VAR 0 6
9919: PUSH
9920: LD_INT 1
9922: ARRAY
9923: PPUSH
9924: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
9928: LD_VAR 0 6
9932: PUSH
9933: LD_INT 0
9935: EQUAL
9936: PUSH
9937: LD_VAR 0 4
9941: PUSH
9942: LD_INT 0
9944: EQUAL
9945: AND
9946: PUSH
9947: LD_VAR 0 9
9951: PUSH
9952: LD_INT 0
9954: GREATER
9955: AND
9956: IFFALSE 9972
// ComEnterUnit ( engineerOkOutside , building ) ;
9958: LD_VAR 0 9
9962: PPUSH
9963: LD_VAR 0 2
9967: PPUSH
9968: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9972: LD_VAR 0 9
9976: PUSH
9977: LD_INT 0
9979: GREATER
9980: PUSH
9981: LD_VAR 0 6
9985: PUSH
9986: LD_INT 0
9988: EQUAL
9989: AND
9990: PUSH
9991: LD_VAR 0 4
9995: PUSH
9996: LD_INT 0
9998: GREATER
9999: AND
10000: IFFALSE 10047
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10002: LD_VAR 0 9
10006: PPUSH
10007: LD_VAR 0 4
10011: PUSH
10012: LD_INT 1
10014: ARRAY
10015: PPUSH
10016: LD_VAR 0 4
10020: PUSH
10021: LD_INT 2
10023: ARRAY
10024: PPUSH
10025: LD_VAR 0 4
10029: PUSH
10030: LD_INT 3
10032: ARRAY
10033: PPUSH
10034: LD_VAR 0 4
10038: PUSH
10039: LD_INT 4
10041: ARRAY
10042: PPUSH
10043: CALL_OW 145
// end ;
10047: LD_VAR 0 5
10051: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10052: LD_INT 0
10054: PPUSH
10055: PPUSH
10056: PPUSH
10057: PPUSH
10058: PPUSH
10059: PPUSH
10060: PPUSH
10061: PPUSH
10062: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) diff [ Kozlov ] ;
10063: LD_ADDR_VAR 0 6
10067: PUSH
10068: LD_INT 22
10070: PUSH
10071: LD_VAR 0 1
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PUSH
10080: LD_INT 25
10082: PUSH
10083: LD_INT 4
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PUSH
10090: LD_INT 23
10092: PUSH
10093: LD_INT 2
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 24
10102: PUSH
10103: LD_INT 251
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: PPUSH
10116: CALL_OW 69
10120: PUSH
10121: LD_EXP 36
10125: PUSH
10126: EMPTY
10127: LIST
10128: DIFF
10129: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ Kozlov ] ;
10130: LD_ADDR_VAR 0 7
10134: PUSH
10135: LD_VAR 0 3
10139: PPUSH
10140: LD_INT 22
10142: PUSH
10143: LD_VAR 0 1
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 23
10154: PUSH
10155: LD_INT 2
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: LD_INT 25
10164: PUSH
10165: LD_INT 4
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 50
10174: PUSH
10175: EMPTY
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: PPUSH
10184: CALL_OW 70
10188: PUSH
10189: LD_EXP 36
10193: PUSH
10194: EMPTY
10195: LIST
10196: DIFF
10197: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10198: LD_ADDR_VAR 0 10
10202: PUSH
10203: LD_VAR 0 3
10207: PPUSH
10208: LD_INT 22
10210: PUSH
10211: LD_VAR 0 1
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 21
10222: PUSH
10223: LD_INT 1
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 3
10232: PUSH
10233: LD_INT 25
10235: PUSH
10236: LD_INT 3
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 3
10249: PUSH
10250: LD_INT 24
10252: PUSH
10253: LD_INT 750
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: PPUSH
10270: CALL_OW 70
10274: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10275: LD_ADDR_VAR 0 11
10279: PUSH
10280: LD_VAR 0 2
10284: PPUSH
10285: LD_INT 22
10287: PUSH
10288: LD_VAR 0 1
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: LD_INT 21
10299: PUSH
10300: LD_INT 1
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 3
10309: PUSH
10310: LD_INT 25
10312: PUSH
10313: LD_INT 3
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 3
10326: PUSH
10327: LD_INT 24
10329: PUSH
10330: LD_INT 1000
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: PPUSH
10347: CALL_OW 70
10351: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10352: LD_VAR 0 10
10356: NOT
10357: PUSH
10358: LD_VAR 0 11
10362: NOT
10363: AND
10364: PUSH
10365: LD_VAR 0 6
10369: NOT
10370: AND
10371: IFFALSE 10375
// exit ;
10373: GO 10609
// if damageUnits > 0 and sci_list > 0 then
10375: LD_VAR 0 10
10379: PUSH
10380: LD_INT 0
10382: GREATER
10383: PUSH
10384: LD_VAR 0 6
10388: PUSH
10389: LD_INT 0
10391: GREATER
10392: AND
10393: IFFALSE 10409
// ComMoveToArea ( damageUnits , healArea ) ;
10395: LD_VAR 0 10
10399: PPUSH
10400: LD_VAR 0 2
10404: PPUSH
10405: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
10409: LD_VAR 0 11
10413: PUSH
10414: LD_INT 0
10416: GREATER
10417: PUSH
10418: LD_VAR 0 6
10422: PUSH
10423: LD_INT 0
10425: GREATER
10426: AND
10427: IFFALSE 10438
// ComExitBuilding ( sci_list ) ;
10429: LD_VAR 0 6
10433: PPUSH
10434: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
10438: LD_VAR 0 11
10442: PUSH
10443: LD_INT 0
10445: GREATER
10446: PUSH
10447: LD_VAR 0 7
10451: PUSH
10452: LD_INT 0
10454: GREATER
10455: AND
10456: IFFALSE 10476
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10458: LD_VAR 0 7
10462: PPUSH
10463: LD_VAR 0 11
10467: PUSH
10468: LD_INT 1
10470: ARRAY
10471: PPUSH
10472: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10476: LD_VAR 0 10
10480: PUSH
10481: LD_INT 0
10483: EQUAL
10484: PUSH
10485: LD_VAR 0 11
10489: PUSH
10490: LD_INT 0
10492: EQUAL
10493: AND
10494: PUSH
10495: LD_VAR 0 7
10499: PUSH
10500: LD_INT 0
10502: GREATER
10503: AND
10504: IFFALSE 10609
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10506: LD_ADDR_VAR 0 12
10510: PUSH
10511: LD_INT 22
10513: PUSH
10514: LD_VAR 0 1
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 21
10525: PUSH
10526: LD_INT 3
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: LD_INT 30
10535: PUSH
10536: LD_INT 8
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: LIST
10547: PPUSH
10548: CALL_OW 69
10552: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10553: LD_ADDR_VAR 0 13
10557: PUSH
10558: LD_INT 1
10560: PPUSH
10561: LD_VAR 0 12
10565: PPUSH
10566: CALL_OW 12
10570: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10571: LD_VAR 0 7
10575: PPUSH
10576: LD_INT 3
10578: PUSH
10579: LD_INT 60
10581: PUSH
10582: EMPTY
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 72
10593: PPUSH
10594: LD_VAR 0 12
10598: PUSH
10599: LD_VAR 0 13
10603: ARRAY
10604: PPUSH
10605: CALL_OW 120
// end ; end ;
10609: LD_VAR 0 5
10613: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
10614: LD_INT 0
10616: PPUSH
10617: PPUSH
10618: PPUSH
10619: PPUSH
// tmpTab = [ ] ;
10620: LD_ADDR_VAR 0 6
10624: PUSH
10625: EMPTY
10626: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
10627: LD_INT 22
10629: PUSH
10630: LD_VAR 0 1
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: LD_INT 30
10641: PUSH
10642: LD_INT 32
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PPUSH
10653: CALL_OW 69
10657: PUSH
10658: LD_INT 0
10660: GREATER
10661: IFFALSE 10744
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10663: LD_ADDR_VAR 0 4
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_INT 32
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PPUSH
10694: CALL_OW 69
10698: PUSH
10699: FOR_IN
10700: IFFALSE 10742
// begin for j in UnitsInside ( i ) do
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: LD_VAR 0 4
10711: PPUSH
10712: CALL_OW 313
10716: PUSH
10717: FOR_IN
10718: IFFALSE 10738
// tmpTab = tmpTab ^ j ;
10720: LD_ADDR_VAR 0 6
10724: PUSH
10725: LD_VAR 0 6
10729: PUSH
10730: LD_VAR 0 5
10734: ADD
10735: ST_TO_ADDR
10736: GO 10717
10738: POP
10739: POP
// end ;
10740: GO 10699
10742: POP
10743: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
10744: LD_VAR 0 6
10748: PPUSH
10749: LD_VAR 0 2
10753: PPUSH
10754: CALL_OW 250
10758: PPUSH
10759: LD_VAR 0 2
10763: PPUSH
10764: CALL_OW 251
10768: PPUSH
10769: CALL_OW 114
// end ;
10773: LD_VAR 0 3
10777: RET
// export function CraneRepairBuild ( side , baseArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10778: LD_INT 0
10780: PPUSH
10781: PPUSH
10782: PPUSH
10783: PPUSH
10784: PPUSH
10785: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10786: LD_ADDR_VAR 0 8
10790: PUSH
10791: LD_VAR 0 2
10795: PPUSH
10796: LD_INT 22
10798: PUSH
10799: LD_VAR 0 1
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: PUSH
10808: LD_INT 21
10810: PUSH
10811: LD_INT 2
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: LD_INT 34
10820: PUSH
10821: LD_INT 52
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: PPUSH
10833: CALL_OW 70
10837: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10838: LD_ADDR_VAR 0 9
10842: PUSH
10843: LD_VAR 0 2
10847: PPUSH
10848: LD_INT 22
10850: PUSH
10851: LD_VAR 0 1
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: LD_INT 21
10862: PUSH
10863: LD_INT 3
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 3
10872: PUSH
10873: LD_INT 24
10875: PUSH
10876: LD_INT 1000
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: LIST
10891: PUSH
10892: EMPTY
10893: LIST
10894: PPUSH
10895: CALL_OW 70
10899: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10900: LD_VAR 0 9
10904: PUSH
10905: LD_INT 0
10907: GREATER
10908: PUSH
10909: LD_VAR 0 8
10913: PPUSH
10914: LD_INT 24
10916: PUSH
10917: LD_INT 750
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PPUSH
10924: CALL_OW 72
10928: PUSH
10929: LD_INT 0
10931: GREATER
10932: AND
10933: IFFALSE 10953
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
10935: LD_VAR 0 8
10939: PPUSH
10940: LD_VAR 0 9
10944: PUSH
10945: LD_INT 1
10947: ARRAY
10948: PPUSH
10949: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10953: LD_VAR 0 8
10957: PUSH
10958: LD_INT 0
10960: GREATER
10961: PUSH
10962: LD_VAR 0 9
10966: PUSH
10967: LD_INT 0
10969: EQUAL
10970: AND
10971: PUSH
10972: LD_VAR 0 3
10976: PUSH
10977: LD_INT 0
10979: GREATER
10980: AND
10981: IFFALSE 11028
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10983: LD_VAR 0 8
10987: PPUSH
10988: LD_VAR 0 3
10992: PUSH
10993: LD_INT 1
10995: ARRAY
10996: PPUSH
10997: LD_VAR 0 3
11001: PUSH
11002: LD_INT 2
11004: ARRAY
11005: PPUSH
11006: LD_VAR 0 3
11010: PUSH
11011: LD_INT 3
11013: ARRAY
11014: PPUSH
11015: LD_VAR 0 3
11019: PUSH
11020: LD_INT 4
11022: ARRAY
11023: PPUSH
11024: CALL_OW 567
// end ;
11028: LD_VAR 0 4
11032: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
11033: LD_INT 0
11035: PPUSH
11036: PPUSH
11037: PPUSH
11038: PPUSH
11039: PPUSH
11040: PPUSH
11041: PPUSH
11042: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Platonov , Yakotich ] ;
11043: LD_ADDR_VAR 0 6
11047: PUSH
11048: LD_VAR 0 2
11052: PPUSH
11053: LD_INT 22
11055: PUSH
11056: LD_VAR 0 1
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PUSH
11065: LD_INT 56
11067: PUSH
11068: EMPTY
11069: LIST
11070: PUSH
11071: LD_INT 24
11073: PUSH
11074: LD_INT 700
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 3
11083: PUSH
11084: LD_INT 60
11086: PUSH
11087: EMPTY
11088: LIST
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 2
11096: PUSH
11097: LD_INT 25
11099: PUSH
11100: LD_INT 1
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 25
11109: PUSH
11110: LD_INT 5
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: LD_INT 25
11119: PUSH
11120: LD_INT 8
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 25
11129: PUSH
11130: LD_INT 9
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: PPUSH
11151: CALL_OW 70
11155: PUSH
11156: LD_EXP 26
11160: PUSH
11161: LD_EXP 27
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: DIFF
11170: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
11171: LD_ADDR_VAR 0 7
11175: PUSH
11176: LD_VAR 0 2
11180: PPUSH
11181: LD_INT 22
11183: PUSH
11184: LD_VAR 0 1
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 30
11195: PUSH
11196: LD_INT 32
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 58
11205: PUSH
11206: EMPTY
11207: LIST
11208: PUSH
11209: LD_INT 24
11211: PUSH
11212: LD_INT 251
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: PPUSH
11225: CALL_OW 70
11229: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
11230: LD_ADDR_VAR 0 9
11234: PUSH
11235: LD_VAR 0 2
11239: PPUSH
11240: LD_INT 22
11242: PUSH
11243: LD_VAR 0 1
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: LD_INT 2
11254: PUSH
11255: LD_INT 30
11257: PUSH
11258: LD_INT 4
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 30
11267: PUSH
11268: LD_INT 5
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: LIST
11279: PUSH
11280: LD_INT 24
11282: PUSH
11283: LD_INT 251
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: LIST
11294: PPUSH
11295: CALL_OW 70
11299: ST_TO_ADDR
// if barrackList > 0 then
11300: LD_VAR 0 9
11304: PUSH
11305: LD_INT 0
11307: GREATER
11308: IFFALSE 11456
// begin if turretList = 0 then
11310: LD_VAR 0 7
11314: PUSH
11315: LD_INT 0
11317: EQUAL
11318: IFFALSE 11360
// begin if soldiers_list > 0 then
11320: LD_VAR 0 6
11324: PUSH
11325: LD_INT 0
11327: GREATER
11328: IFFALSE 11358
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
11330: LD_VAR 0 6
11334: PPUSH
11335: LD_VAR 0 9
11339: PUSH
11340: LD_INT 1
11342: PPUSH
11343: LD_VAR 0 9
11347: PPUSH
11348: CALL_OW 12
11352: ARRAY
11353: PPUSH
11354: CALL_OW 120
// end else
11358: GO 11456
// begin for i in barrackList do
11360: LD_ADDR_VAR 0 4
11364: PUSH
11365: LD_VAR 0 9
11369: PUSH
11370: FOR_IN
11371: IFFALSE 11454
// begin insideUnits = UnitsInside ( i ) ;
11373: LD_ADDR_VAR 0 10
11377: PUSH
11378: LD_VAR 0 4
11382: PPUSH
11383: CALL_OW 313
11387: ST_TO_ADDR
// if insideUnits > 0 then
11388: LD_VAR 0 10
11392: PUSH
11393: LD_INT 0
11395: GREATER
11396: IFFALSE 11420
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
11398: LD_VAR 0 10
11402: PUSH
11403: LD_INT 1
11405: ARRAY
11406: PPUSH
11407: LD_VAR 0 7
11411: PUSH
11412: LD_INT 1
11414: ARRAY
11415: PPUSH
11416: CALL_OW 120
// if soldiers_list > 0 then
11420: LD_VAR 0 6
11424: PUSH
11425: LD_INT 0
11427: GREATER
11428: IFFALSE 11452
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
11430: LD_VAR 0 6
11434: PUSH
11435: LD_INT 1
11437: ARRAY
11438: PPUSH
11439: LD_VAR 0 7
11443: PUSH
11444: LD_INT 1
11446: ARRAY
11447: PPUSH
11448: CALL_OW 120
// end ;
11452: GO 11370
11454: POP
11455: POP
// end ; end ; end ;
11456: LD_VAR 0 3
11460: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11461: LD_INT 0
11463: PPUSH
11464: PPUSH
11465: PPUSH
11466: PPUSH
11467: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11468: LD_ADDR_VAR 0 6
11472: PUSH
11473: LD_INT 22
11475: PUSH
11476: LD_VAR 0 1
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 2
11487: PUSH
11488: LD_INT 30
11490: PUSH
11491: LD_INT 31
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: LD_INT 30
11500: PUSH
11501: LD_INT 32
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PUSH
11508: LD_INT 30
11510: PUSH
11511: LD_INT 33
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 30
11520: PUSH
11521: LD_INT 4
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 30
11530: PUSH
11531: LD_INT 5
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PPUSH
11550: CALL_OW 69
11554: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11555: LD_ADDR_VAR 0 7
11559: PUSH
11560: LD_INT 22
11562: PUSH
11563: LD_VAR 0 2
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 21
11574: PUSH
11575: LD_INT 3
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: LD_INT 58
11584: PUSH
11585: EMPTY
11586: LIST
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: PPUSH
11593: CALL_OW 69
11597: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11598: LD_VAR 0 6
11602: PUSH
11603: LD_INT 0
11605: GREATER
11606: PUSH
11607: LD_VAR 0 7
11611: PUSH
11612: LD_INT 0
11614: GREATER
11615: AND
11616: IFFALSE 11686
// begin for i in turretsList do
11618: LD_ADDR_VAR 0 4
11622: PUSH
11623: LD_VAR 0 6
11627: PUSH
11628: FOR_IN
11629: IFFALSE 11684
// begin for j in enemyBuildings do
11631: LD_ADDR_VAR 0 5
11635: PUSH
11636: LD_VAR 0 7
11640: PUSH
11641: FOR_IN
11642: IFFALSE 11680
// begin if GetDistUnits ( i , j ) < 20 then
11644: LD_VAR 0 4
11648: PPUSH
11649: LD_VAR 0 5
11653: PPUSH
11654: CALL_OW 296
11658: PUSH
11659: LD_INT 20
11661: LESS
11662: IFFALSE 11678
// begin ComAttackUnit ( i , j ) ;
11664: LD_VAR 0 4
11668: PPUSH
11669: LD_VAR 0 5
11673: PPUSH
11674: CALL_OW 115
// end ; end ;
11678: GO 11641
11680: POP
11681: POP
// end ;
11682: GO 11628
11684: POP
11685: POP
// end ; end ;
11686: LD_VAR 0 3
11690: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
11691: LD_INT 0
11693: PPUSH
11694: PPUSH
// for i = 1 to vehCount do
11695: LD_ADDR_VAR 0 9
11699: PUSH
11700: DOUBLE
11701: LD_INT 1
11703: DEC
11704: ST_TO_ADDR
11705: LD_VAR 0 3
11709: PUSH
11710: FOR_TO
11711: IFFALSE 11758
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
11713: LD_VAR 0 2
11717: PPUSH
11718: LD_VAR 0 7
11722: PPUSH
11723: LD_VAR 0 5
11727: PPUSH
11728: LD_VAR 0 6
11732: PPUSH
11733: LD_VAR 0 4
11737: PUSH
11738: LD_INT 1
11740: PPUSH
11741: LD_VAR 0 4
11745: PPUSH
11746: CALL_OW 12
11750: ARRAY
11751: PPUSH
11752: CALL_OW 185
11756: GO 11710
11758: POP
11759: POP
// end ;
11760: LD_VAR 0 8
11764: RET
// export function AttackVehicles ( enemySide , oponent ) ; var i , j , vehiclesOK , target1 , target2 ; begin
11765: LD_INT 0
11767: PPUSH
11768: PPUSH
11769: PPUSH
11770: PPUSH
11771: PPUSH
11772: PPUSH
// if oponent = 1 then
11773: LD_VAR 0 2
11777: PUSH
11778: LD_INT 1
11780: EQUAL
11781: IFFALSE 11971
// begin repeat wait ( 0 0$1 ) ;
11783: LD_INT 35
11785: PPUSH
11786: CALL_OW 67
// for j in legionVehicles do
11790: LD_ADDR_VAR 0 5
11794: PUSH
11795: LD_EXP 55
11799: PUSH
11800: FOR_IN
11801: IFFALSE 11959
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11803: LD_ADDR_VAR 0 7
11807: PUSH
11808: LD_INT 22
11810: PUSH
11811: LD_VAR 0 1
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: PPUSH
11820: CALL_OW 69
11824: PPUSH
11825: LD_VAR 0 5
11829: PPUSH
11830: CALL_OW 74
11834: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11835: LD_ADDR_VAR 0 8
11839: PUSH
11840: LD_INT 22
11842: PUSH
11843: LD_VAR 0 1
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: LD_INT 30
11854: PUSH
11855: LD_INT 32
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 59
11864: PUSH
11865: EMPTY
11866: LIST
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: LIST
11872: PUSH
11873: EMPTY
11874: LIST
11875: PPUSH
11876: CALL_OW 69
11880: PPUSH
11881: LD_VAR 0 5
11885: PPUSH
11886: CALL_OW 74
11890: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11891: LD_VAR 0 5
11895: PPUSH
11896: LD_VAR 0 7
11900: PPUSH
11901: CALL_OW 296
11905: PUSH
11906: LD_INT 8
11908: PLUS
11909: PUSH
11910: LD_VAR 0 5
11914: PPUSH
11915: LD_VAR 0 8
11919: PPUSH
11920: CALL_OW 296
11924: LESS
11925: IFFALSE 11943
// ComAttackUnit ( j , target1 ) else
11927: LD_VAR 0 5
11931: PPUSH
11932: LD_VAR 0 7
11936: PPUSH
11937: CALL_OW 115
11941: GO 11957
// ComAttackUnit ( j , target2 ) ;
11943: LD_VAR 0 5
11947: PPUSH
11948: LD_VAR 0 8
11952: PPUSH
11953: CALL_OW 115
// end ;
11957: GO 11800
11959: POP
11960: POP
// until legionVehicles = 0 ;
11961: LD_EXP 55
11965: PUSH
11966: LD_INT 0
11968: EQUAL
11969: IFFALSE 11783
// end ; if oponent = 2 then
11971: LD_VAR 0 2
11975: PUSH
11976: LD_INT 2
11978: EQUAL
11979: IFFALSE 12169
// begin repeat wait ( 0 0$1 ) ;
11981: LD_INT 35
11983: PPUSH
11984: CALL_OW 67
// for j in russianVehicles do
11988: LD_ADDR_VAR 0 5
11992: PUSH
11993: LD_EXP 61
11997: PUSH
11998: FOR_IN
11999: IFFALSE 12157
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
12001: LD_ADDR_VAR 0 7
12005: PUSH
12006: LD_INT 22
12008: PUSH
12009: LD_VAR 0 1
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PPUSH
12018: CALL_OW 69
12022: PPUSH
12023: LD_VAR 0 5
12027: PPUSH
12028: CALL_OW 74
12032: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12033: LD_ADDR_VAR 0 8
12037: PUSH
12038: LD_INT 22
12040: PUSH
12041: LD_VAR 0 1
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 30
12052: PUSH
12053: LD_INT 32
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 59
12062: PUSH
12063: EMPTY
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: LIST
12070: PUSH
12071: EMPTY
12072: LIST
12073: PPUSH
12074: CALL_OW 69
12078: PPUSH
12079: LD_VAR 0 5
12083: PPUSH
12084: CALL_OW 74
12088: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12089: LD_VAR 0 5
12093: PPUSH
12094: LD_VAR 0 7
12098: PPUSH
12099: CALL_OW 296
12103: PUSH
12104: LD_INT 8
12106: PLUS
12107: PUSH
12108: LD_VAR 0 5
12112: PPUSH
12113: LD_VAR 0 8
12117: PPUSH
12118: CALL_OW 296
12122: LESS
12123: IFFALSE 12141
// ComAttackUnit ( j , target1 ) else
12125: LD_VAR 0 5
12129: PPUSH
12130: LD_VAR 0 7
12134: PPUSH
12135: CALL_OW 115
12139: GO 12155
// ComAttackUnit ( j , target2 ) ;
12141: LD_VAR 0 5
12145: PPUSH
12146: LD_VAR 0 8
12150: PPUSH
12151: CALL_OW 115
// end ;
12155: GO 11998
12157: POP
12158: POP
// until russianVehicles = 0 ;
12159: LD_EXP 61
12163: PUSH
12164: LD_INT 0
12166: EQUAL
12167: IFFALSE 11981
// end ; if oponent = 3 then
12169: LD_VAR 0 2
12173: PUSH
12174: LD_INT 3
12176: EQUAL
12177: IFFALSE 12367
// begin repeat wait ( 0 0$1 ) ;
12179: LD_INT 35
12181: PPUSH
12182: CALL_OW 67
// for j in allianceVehicles do
12186: LD_ADDR_VAR 0 5
12190: PUSH
12191: LD_EXP 62
12195: PUSH
12196: FOR_IN
12197: IFFALSE 12355
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
12199: LD_ADDR_VAR 0 7
12203: PUSH
12204: LD_INT 22
12206: PUSH
12207: LD_VAR 0 1
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PPUSH
12216: CALL_OW 69
12220: PPUSH
12221: LD_VAR 0 5
12225: PPUSH
12226: CALL_OW 74
12230: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12231: LD_ADDR_VAR 0 8
12235: PUSH
12236: LD_INT 22
12238: PUSH
12239: LD_VAR 0 1
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PUSH
12248: LD_INT 30
12250: PUSH
12251: LD_INT 32
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 59
12260: PUSH
12261: EMPTY
12262: LIST
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: PPUSH
12272: CALL_OW 69
12276: PPUSH
12277: LD_VAR 0 5
12281: PPUSH
12282: CALL_OW 74
12286: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12287: LD_VAR 0 5
12291: PPUSH
12292: LD_VAR 0 7
12296: PPUSH
12297: CALL_OW 296
12301: PUSH
12302: LD_INT 8
12304: PLUS
12305: PUSH
12306: LD_VAR 0 5
12310: PPUSH
12311: LD_VAR 0 8
12315: PPUSH
12316: CALL_OW 296
12320: LESS
12321: IFFALSE 12339
// ComAttackUnit ( j , target1 ) else
12323: LD_VAR 0 5
12327: PPUSH
12328: LD_VAR 0 7
12332: PPUSH
12333: CALL_OW 115
12337: GO 12353
// ComAttackUnit ( j , target2 ) ;
12339: LD_VAR 0 5
12343: PPUSH
12344: LD_VAR 0 8
12348: PPUSH
12349: CALL_OW 115
// end ;
12353: GO 12196
12355: POP
12356: POP
// until allianceVehicles = 0 ;
12357: LD_EXP 62
12361: PUSH
12362: LD_INT 0
12364: EQUAL
12365: IFFALSE 12179
// end ; end ;
12367: LD_VAR 0 3
12371: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
12372: LD_INT 0
12374: PPUSH
12375: PPUSH
12376: PPUSH
12377: PPUSH
12378: PPUSH
12379: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12380: LD_ADDR_VAR 0 6
12384: PUSH
12385: LD_INT 22
12387: PUSH
12388: LD_VAR 0 1
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 25
12399: PUSH
12400: LD_INT 9
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PPUSH
12411: CALL_OW 69
12415: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12416: LD_ADDR_VAR 0 7
12420: PUSH
12421: LD_INT 81
12423: PUSH
12424: LD_VAR 0 1
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: LD_INT 3
12435: PUSH
12436: LD_INT 21
12438: PUSH
12439: LD_INT 3
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PPUSH
12454: CALL_OW 69
12458: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12459: LD_ADDR_VAR 0 4
12463: PUSH
12464: LD_INT 1
12466: PPUSH
12467: LD_INT 3
12469: PPUSH
12470: CALL_OW 12
12474: ST_TO_ADDR
// for i = 1 to list do
12475: LD_ADDR_VAR 0 5
12479: PUSH
12480: DOUBLE
12481: LD_INT 1
12483: DEC
12484: ST_TO_ADDR
12485: LD_VAR 0 6
12489: PUSH
12490: FOR_TO
12491: IFFALSE 12693
// for ta in filter do
12493: LD_ADDR_VAR 0 3
12497: PUSH
12498: LD_VAR 0 7
12502: PUSH
12503: FOR_IN
12504: IFFALSE 12689
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
12506: LD_VAR 0 6
12510: PUSH
12511: LD_VAR 0 5
12515: ARRAY
12516: PPUSH
12517: LD_VAR 0 3
12521: PPUSH
12522: CALL_OW 296
12526: PUSH
12527: LD_INT 15
12529: LESSEQUAL
12530: IFFALSE 12687
// begin case c of 1 :
12532: LD_VAR 0 4
12536: PUSH
12537: LD_INT 1
12539: DOUBLE
12540: EQUAL
12541: IFTRUE 12545
12543: GO 12583
12545: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
12546: LD_VAR 0 6
12550: PUSH
12551: LD_VAR 0 5
12555: ARRAY
12556: PPUSH
12557: LD_VAR 0 3
12561: PPUSH
12562: CALL_OW 250
12566: PPUSH
12567: LD_VAR 0 3
12571: PPUSH
12572: CALL_OW 251
12576: PPUSH
12577: CALL_OW 154
12581: GO 12687
12583: LD_INT 2
12585: DOUBLE
12586: EQUAL
12587: IFTRUE 12591
12589: GO 12655
12591: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
12592: LD_VAR 0 6
12596: PUSH
12597: LD_VAR 0 5
12601: ARRAY
12602: PPUSH
12603: LD_VAR 0 3
12607: PPUSH
12608: CALL_OW 250
12612: PUSH
12613: LD_INT 1
12615: NEG
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: CALL_OW 12
12624: PLUS
12625: PPUSH
12626: LD_VAR 0 3
12630: PPUSH
12631: CALL_OW 251
12635: PUSH
12636: LD_INT 1
12638: NEG
12639: PPUSH
12640: LD_INT 1
12642: PPUSH
12643: CALL_OW 12
12647: PLUS
12648: PPUSH
12649: CALL_OW 153
12653: GO 12687
12655: LD_INT 3
12657: DOUBLE
12658: EQUAL
12659: IFTRUE 12663
12661: GO 12686
12663: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
12664: LD_VAR 0 6
12668: PUSH
12669: LD_VAR 0 5
12673: ARRAY
12674: PPUSH
12675: LD_VAR 0 3
12679: PPUSH
12680: CALL_OW 115
12684: GO 12687
12686: POP
// end ; end ;
12687: GO 12503
12689: POP
12690: POP
12691: GO 12490
12693: POP
12694: POP
// end ;
12695: LD_VAR 0 2
12699: RET
// export function TimeLapsersAI ( side , enemy ) ; var j , nearUnit , vehs ; begin
12700: LD_INT 0
12702: PPUSH
12703: PPUSH
12704: PPUSH
12705: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 then
12706: LD_INT 22
12708: PUSH
12709: LD_VAR 0 1
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 21
12720: PUSH
12721: LD_INT 2
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 34
12730: PUSH
12731: LD_INT 49
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: LIST
12742: PPUSH
12743: CALL_OW 69
12747: PUSH
12748: LD_INT 0
12750: EQUAL
12751: IFFALSE 12755
// exit ;
12753: GO 13010
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
12755: LD_INT 22
12757: PUSH
12758: LD_VAR 0 1
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: LD_INT 21
12769: PUSH
12770: LD_INT 2
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 34
12779: PUSH
12780: LD_INT 49
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: LIST
12791: PPUSH
12792: CALL_OW 69
12796: PUSH
12797: LD_INT 0
12799: GREATER
12800: IFFALSE 13010
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
12802: LD_ADDR_VAR 0 6
12806: PUSH
12807: LD_INT 22
12809: PUSH
12810: LD_VAR 0 1
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: LD_INT 21
12821: PUSH
12822: LD_INT 2
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 34
12831: PUSH
12832: LD_INT 49
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: PPUSH
12844: CALL_OW 69
12848: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12849: LD_INT 105
12851: PPUSH
12852: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
12856: LD_ADDR_VAR 0 4
12860: PUSH
12861: LD_VAR 0 6
12865: PPUSH
12866: LD_INT 3
12868: PUSH
12869: LD_INT 60
12871: PUSH
12872: EMPTY
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PPUSH
12879: CALL_OW 72
12883: PUSH
12884: FOR_IN
12885: IFFALSE 12998
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , enemy ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
12887: LD_ADDR_VAR 0 5
12891: PUSH
12892: LD_INT 81
12894: PUSH
12895: LD_VAR 0 1
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: LD_INT 101
12906: PUSH
12907: LD_VAR 0 2
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: LD_INT 2
12918: PUSH
12919: LD_INT 21
12921: PUSH
12922: LD_INT 1
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 3
12931: PUSH
12932: LD_INT 58
12934: PUSH
12935: EMPTY
12936: LIST
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: PPUSH
12952: CALL_OW 69
12956: PPUSH
12957: LD_VAR 0 4
12961: PPUSH
12962: CALL_OW 74
12966: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
12967: LD_VAR 0 4
12971: PPUSH
12972: LD_VAR 0 5
12976: PPUSH
12977: CALL_OW 250
12981: PPUSH
12982: LD_VAR 0 5
12986: PPUSH
12987: CALL_OW 251
12991: PPUSH
12992: CALL_OW 111
// end ;
12996: GO 12884
12998: POP
12999: POP
// until vehs = 0 ;
13000: LD_VAR 0 6
13004: PUSH
13005: LD_INT 0
13007: EQUAL
13008: IFFALSE 12802
// end ; end_of_file
13010: LD_VAR 0 3
13014: RET
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
13015: LD_VAR 0 1
13019: PUSH
13020: LD_INT 1
13022: EQUAL
13023: PUSH
13024: LD_VAR 0 2
13028: PUSH
13029: LD_INT 4
13031: EQUAL
13032: AND
13033: IFFALSE 13042
// YouLost ( text ) ;
13035: LD_STRING text
13037: PPUSH
13038: CALL_OW 104
// end ;
13042: PPOPN 2
13044: END
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
13045: LD_VAR 0 1
13049: PUSH
13050: LD_INT 235
13052: EQUAL
13053: PUSH
13054: LD_VAR 0 2
13058: PPUSH
13059: CALL_OW 255
13063: PUSH
13064: LD_INT 4
13066: EQUAL
13067: AND
13068: IFFALSE 13144
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
13070: LD_INT 235
13072: PPUSH
13073: LD_INT 84
13075: PPUSH
13076: LD_INT 1
13078: PPUSH
13079: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
13083: LD_INT 235
13085: PPUSH
13086: LD_INT 68
13088: PPUSH
13089: LD_INT 100
13091: PPUSH
13092: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
13096: LD_INT 235
13098: PPUSH
13099: CALL_OW 219
// AddComMoveXY ( PowellCargo , 48 , 69 ) ;
13103: LD_INT 235
13105: PPUSH
13106: LD_INT 48
13108: PPUSH
13109: LD_INT 69
13111: PPUSH
13112: CALL_OW 171
// AddComMoveXY ( PowellCargo , 39 , 61 ) ;
13116: LD_INT 235
13118: PPUSH
13119: LD_INT 39
13121: PPUSH
13122: LD_INT 61
13124: PPUSH
13125: CALL_OW 171
// wait ( 0 0$10 ) ;
13129: LD_INT 350
13131: PPUSH
13132: CALL_OW 67
// powellUnloadCargo = 1 ;
13136: LD_ADDR_EXP 70
13140: PUSH
13141: LD_INT 1
13143: ST_TO_ADDR
// end ; end ;
13144: PPOPN 2
13146: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
13147: LD_INT 0
13149: PPUSH
13150: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13151: LD_ADDR_VAR 0 3
13155: PUSH
13156: LD_INT 22
13158: PUSH
13159: LD_INT 4
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: LD_INT 21
13168: PUSH
13169: LD_INT 1
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 56
13178: PUSH
13179: EMPTY
13180: LIST
13181: PUSH
13182: LD_INT 3
13184: PUSH
13185: LD_INT 60
13187: PUSH
13188: EMPTY
13189: LIST
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: PPUSH
13201: CALL_OW 69
13205: PUSH
13206: LD_EXP 17
13210: PUSH
13211: EMPTY
13212: LIST
13213: DIFF
13214: ST_TO_ADDR
// if GetSide ( building ) = 4 then
13215: LD_VAR 0 1
13219: PPUSH
13220: CALL_OW 255
13224: PUSH
13225: LD_INT 4
13227: EQUAL
13228: IFFALSE 13359
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
13230: LD_INT 22
13232: PUSH
13233: LD_INT 4
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 30
13242: PUSH
13243: LD_INT 8
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PPUSH
13254: CALL_OW 69
13258: PUSH
13259: LD_INT 1
13261: EQUAL
13262: IFFALSE 13359
// begin for i = 1 to 3 do
13264: LD_ADDR_VAR 0 2
13268: PUSH
13269: DOUBLE
13270: LD_INT 1
13272: DEC
13273: ST_TO_ADDR
13274: LD_INT 3
13276: PUSH
13277: FOR_TO
13278: IFFALSE 13342
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
13280: LD_VAR 0 3
13284: PUSH
13285: LD_VAR 0 2
13289: ARRAY
13290: PPUSH
13291: LD_INT 3
13293: PUSH
13294: LD_INT 25
13296: PUSH
13297: LD_INT 2
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PPUSH
13308: CALL_OW 72
13312: PPUSH
13313: LD_VAR 0 1
13317: PPUSH
13318: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
13322: LD_VAR 0 3
13326: PUSH
13327: LD_VAR 0 2
13331: ARRAY
13332: PPUSH
13333: LD_INT 4
13335: PPUSH
13336: CALL_OW 183
// end ;
13340: GO 13277
13342: POP
13343: POP
// ResAllTechs ( 4 , building , 1 ) ;
13344: LD_INT 4
13346: PPUSH
13347: LD_VAR 0 1
13351: PPUSH
13352: LD_INT 1
13354: PPUSH
13355: CALL 9558 0 3
// end ; if GetSide ( building ) = 8 then
13359: LD_VAR 0 1
13363: PPUSH
13364: CALL_OW 255
13368: PUSH
13369: LD_INT 8
13371: EQUAL
13372: IFFALSE 13557
// begin if GetNation ( building ) = 3 then
13374: LD_VAR 0 1
13378: PPUSH
13379: CALL_OW 248
13383: PUSH
13384: LD_INT 3
13386: EQUAL
13387: IFFALSE 13557
// begin AddComMoveXY ( Kozlov , 73 , 16 ) ;
13389: LD_EXP 36
13393: PPUSH
13394: LD_INT 73
13396: PPUSH
13397: LD_INT 16
13399: PPUSH
13400: CALL_OW 171
// AddComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
13404: LD_EXP 36
13408: PPUSH
13409: LD_INT 21
13411: PPUSH
13412: LD_INT 74
13414: PPUSH
13415: LD_INT 12
13417: PPUSH
13418: LD_INT 1
13420: PPUSH
13421: CALL_OW 205
// wait ( 0 0$2 ) ;
13425: LD_INT 70
13427: PPUSH
13428: CALL_OW 67
// AddComEnterUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] ) ;
13432: LD_EXP 36
13436: PPUSH
13437: LD_INT 22
13439: PUSH
13440: LD_INT 8
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: LD_INT 30
13449: PUSH
13450: LD_INT 3
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 23
13459: PUSH
13460: LD_INT 3
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: PPUSH
13472: CALL_OW 69
13476: PUSH
13477: LD_INT 1
13479: ARRAY
13480: PPUSH
13481: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
13485: LD_EXP 36
13489: PPUSH
13490: LD_INT 3
13492: PPUSH
13493: CALL_OW 183
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] , ru_heavy_tracked , 3 , 3 , ru_siberium_rocket ) ;
13497: LD_INT 22
13499: PUSH
13500: LD_INT 8
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: LD_INT 30
13509: PUSH
13510: LD_INT 3
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 23
13519: PUSH
13520: LD_INT 3
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: LIST
13531: PPUSH
13532: CALL_OW 69
13536: PUSH
13537: LD_INT 1
13539: ARRAY
13540: PPUSH
13541: LD_INT 24
13543: PPUSH
13544: LD_INT 3
13546: PPUSH
13547: LD_INT 3
13549: PPUSH
13550: LD_INT 48
13552: PPUSH
13553: CALL_OW 185
// end ; end ; end ;
13557: PPOPN 3
13559: END
// on BuildingComplete ( building ) do var powellPeople ;
13560: LD_INT 0
13562: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
13563: LD_VAR 0 1
13567: PPUSH
13568: CALL_OW 255
13572: PUSH
13573: LD_INT 4
13575: EQUAL
13576: PUSH
13577: LD_VAR 0 1
13581: PPUSH
13582: CALL_OW 266
13586: PUSH
13587: LD_INT 17
13589: EQUAL
13590: AND
13591: IFFALSE 13873
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13593: LD_ADDR_VAR 0 2
13597: PUSH
13598: LD_INT 22
13600: PUSH
13601: LD_INT 4
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 21
13610: PUSH
13611: LD_INT 1
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: LD_INT 56
13620: PUSH
13621: EMPTY
13622: LIST
13623: PUSH
13624: LD_INT 3
13626: PUSH
13627: LD_INT 60
13629: PUSH
13630: EMPTY
13631: LIST
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 69
13647: PUSH
13648: LD_EXP 17
13652: PUSH
13653: EMPTY
13654: LIST
13655: DIFF
13656: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
13657: LD_INT 22
13659: PUSH
13660: LD_INT 4
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PUSH
13667: LD_INT 21
13669: PUSH
13670: LD_INT 3
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 30
13679: PUSH
13680: LD_INT 32
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: LIST
13691: PPUSH
13692: CALL_OW 69
13696: PUSH
13697: LD_INT 1
13699: ARRAY
13700: PPUSH
13701: LD_INT 6
13703: PPUSH
13704: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
13708: LD_INT 22
13710: PUSH
13711: LD_INT 4
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 21
13720: PUSH
13721: LD_INT 3
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 30
13730: PUSH
13731: LD_INT 32
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: LIST
13742: PPUSH
13743: CALL_OW 69
13747: PUSH
13748: LD_INT 2
13750: ARRAY
13751: PPUSH
13752: LD_INT 5
13754: PPUSH
13755: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
13759: LD_VAR 0 2
13763: PUSH
13764: LD_INT 1
13766: ARRAY
13767: PPUSH
13768: LD_INT 22
13770: PUSH
13771: LD_INT 4
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 21
13780: PUSH
13781: LD_INT 3
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 30
13790: PUSH
13791: LD_INT 32
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: LIST
13802: PPUSH
13803: CALL_OW 69
13807: PUSH
13808: LD_INT 1
13810: ARRAY
13811: PPUSH
13812: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
13816: LD_VAR 0 2
13820: PUSH
13821: LD_INT 2
13823: ARRAY
13824: PPUSH
13825: LD_INT 22
13827: PUSH
13828: LD_INT 4
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 21
13837: PUSH
13838: LD_INT 3
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 30
13847: PUSH
13848: LD_INT 32
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: LIST
13859: PPUSH
13860: CALL_OW 69
13864: PUSH
13865: LD_INT 2
13867: ARRAY
13868: PPUSH
13869: CALL_OW 120
// end ; if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_siberium then
13873: LD_VAR 0 1
13877: PPUSH
13878: CALL_OW 255
13882: PUSH
13883: LD_INT 4
13885: EQUAL
13886: PUSH
13887: LD_VAR 0 1
13891: PPUSH
13892: CALL_OW 266
13896: PUSH
13897: LD_INT 21
13899: EQUAL
13900: AND
13901: IFFALSE 14048
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
13903: LD_INT 85
13905: PPUSH
13906: LD_INT 3
13908: PPUSH
13909: LD_INT 3
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: LD_INT 3
13917: PUSH
13918: LD_INT 5
13920: PUSH
13921: LD_INT 7
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: LIST
13928: PUSH
13929: LD_INT 1
13931: PPUSH
13932: LD_INT 3
13934: PPUSH
13935: CALL_OW 12
13939: ARRAY
13940: PPUSH
13941: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
13945: LD_INT 85
13947: PPUSH
13948: LD_INT 3
13950: PPUSH
13951: LD_INT 3
13953: PPUSH
13954: LD_INT 1
13956: PPUSH
13957: LD_INT 3
13959: PUSH
13960: LD_INT 5
13962: PUSH
13963: LD_INT 7
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: LIST
13970: PUSH
13971: LD_INT 1
13973: PPUSH
13974: LD_INT 3
13976: PPUSH
13977: CALL_OW 12
13981: ARRAY
13982: PPUSH
13983: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
13987: LD_INT 85
13989: PPUSH
13990: LD_INT 3
13992: PPUSH
13993: LD_INT 3
13995: PPUSH
13996: LD_INT 1
13998: PPUSH
13999: LD_INT 3
14001: PUSH
14002: LD_INT 5
14004: PUSH
14005: LD_INT 7
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 1
14015: PPUSH
14016: LD_INT 3
14018: PPUSH
14019: CALL_OW 12
14023: ARRAY
14024: PPUSH
14025: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
14029: LD_INT 85
14031: PPUSH
14032: LD_INT 5
14034: PPUSH
14035: LD_INT 3
14037: PPUSH
14038: LD_INT 1
14040: PPUSH
14041: LD_INT 6
14043: PPUSH
14044: CALL_OW 185
// end ; if GetSide ( building ) = 8 then
14048: LD_VAR 0 1
14052: PPUSH
14053: CALL_OW 255
14057: PUSH
14058: LD_INT 8
14060: EQUAL
14061: IFFALSE 14087
// begin if GetBType ( building ) = b_workshop then
14063: LD_VAR 0 1
14067: PPUSH
14068: CALL_OW 266
14072: PUSH
14073: LD_INT 2
14075: EQUAL
14076: IFFALSE 14087
// ComUpgrade ( building ) ;
14078: LD_VAR 0 1
14082: PPUSH
14083: CALL_OW 146
// end ; if GetSide ( building ) = 3 then
14087: LD_VAR 0 1
14091: PPUSH
14092: CALL_OW 255
14096: PUSH
14097: LD_INT 3
14099: EQUAL
14100: IFFALSE 14174
// begin russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14102: LD_ADDR_EXP 94
14106: PUSH
14107: LD_EXP 94
14111: PPUSH
14112: LD_INT 1
14114: PPUSH
14115: CALL_OW 3
14119: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14120: LD_ADDR_EXP 94
14124: PUSH
14125: LD_EXP 94
14129: PPUSH
14130: LD_INT 1
14132: PPUSH
14133: CALL_OW 3
14137: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14138: LD_ADDR_EXP 94
14142: PUSH
14143: LD_EXP 94
14147: PPUSH
14148: LD_INT 1
14150: PPUSH
14151: CALL_OW 3
14155: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14156: LD_ADDR_EXP 94
14160: PUSH
14161: LD_EXP 94
14165: PPUSH
14166: LD_INT 1
14168: PPUSH
14169: CALL_OW 3
14173: ST_TO_ADDR
// end ; if GetSide ( building ) = 8 then
14174: LD_VAR 0 1
14178: PPUSH
14179: CALL_OW 255
14183: PUSH
14184: LD_INT 8
14186: EQUAL
14187: IFFALSE 14261
// begin legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14189: LD_ADDR_EXP 93
14193: PUSH
14194: LD_EXP 93
14198: PPUSH
14199: LD_INT 1
14201: PPUSH
14202: CALL_OW 3
14206: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14207: LD_ADDR_EXP 93
14211: PUSH
14212: LD_EXP 93
14216: PPUSH
14217: LD_INT 1
14219: PPUSH
14220: CALL_OW 3
14224: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14225: LD_ADDR_EXP 93
14229: PUSH
14230: LD_EXP 93
14234: PPUSH
14235: LD_INT 1
14237: PPUSH
14238: CALL_OW 3
14242: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14243: LD_ADDR_EXP 93
14247: PUSH
14248: LD_EXP 93
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: CALL_OW 3
14260: ST_TO_ADDR
// end ; if GetSide ( building ) = 7 then
14261: LD_VAR 0 1
14265: PPUSH
14266: CALL_OW 255
14270: PUSH
14271: LD_INT 7
14273: EQUAL
14274: IFFALSE 14348
// begin allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14276: LD_ADDR_EXP 95
14280: PUSH
14281: LD_EXP 95
14285: PPUSH
14286: LD_INT 1
14288: PPUSH
14289: CALL_OW 3
14293: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14294: LD_ADDR_EXP 95
14298: PUSH
14299: LD_EXP 95
14303: PPUSH
14304: LD_INT 1
14306: PPUSH
14307: CALL_OW 3
14311: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14312: LD_ADDR_EXP 95
14316: PUSH
14317: LD_EXP 95
14321: PPUSH
14322: LD_INT 1
14324: PPUSH
14325: CALL_OW 3
14329: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14330: LD_ADDR_EXP 95
14334: PUSH
14335: LD_EXP 95
14339: PPUSH
14340: LD_INT 1
14342: PPUSH
14343: CALL_OW 3
14347: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
14348: LD_VAR 0 1
14352: PPUSH
14353: CALL_OW 255
14357: PUSH
14358: LD_INT 3
14360: EQUAL
14361: IFFALSE 14428
// begin if GetBType ( building ) = b_bunker or GetBType ( building ) = b_turret then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 266
14372: PUSH
14373: LD_INT 32
14375: EQUAL
14376: PUSH
14377: LD_VAR 0 1
14381: PPUSH
14382: CALL_OW 266
14386: PUSH
14387: LD_INT 33
14389: EQUAL
14390: OR
14391: IFFALSE 14428
// PlaceWeaponTurret ( building , [ 46 , 47 , 45 ] [ Rand ( 1 , 3 ) ] ) ;
14393: LD_VAR 0 1
14397: PPUSH
14398: LD_INT 46
14400: PUSH
14401: LD_INT 47
14403: PUSH
14404: LD_INT 45
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: LIST
14411: PUSH
14412: LD_INT 1
14414: PPUSH
14415: LD_INT 3
14417: PPUSH
14418: CALL_OW 12
14422: ARRAY
14423: PPUSH
14424: CALL_OW 431
// end ; if GetSide ( building ) = 8 and GetBType ( building ) = b_bunker then
14428: LD_VAR 0 1
14432: PPUSH
14433: CALL_OW 255
14437: PUSH
14438: LD_INT 8
14440: EQUAL
14441: PUSH
14442: LD_VAR 0 1
14446: PPUSH
14447: CALL_OW 266
14451: PUSH
14452: LD_INT 32
14454: EQUAL
14455: AND
14456: IFFALSE 14489
// begin PlaceWeaponTurret ( building , [ 28 , 27 ] [ Rand ( 1 , 2 ) ] ) ;
14458: LD_VAR 0 1
14462: PPUSH
14463: LD_INT 28
14465: PUSH
14466: LD_INT 27
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: LD_INT 1
14475: PPUSH
14476: LD_INT 2
14478: PPUSH
14479: CALL_OW 12
14483: ARRAY
14484: PPUSH
14485: CALL_OW 431
// end ; end ;
14489: PPOPN 2
14491: END
// on EnterBuilding ( building , human ) do begin end ;
14492: PPOPN 2
14494: END
// on BehemothConstructed ( vehicle ) do begin if GetSide ( vehicle ) = 6 then
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 255
14504: PUSH
14505: LD_INT 6
14507: EQUAL
14508: IFFALSE 14526
// ruBehs = ruBehs ^ vehicle ;
14510: LD_ADDR_EXP 59
14514: PUSH
14515: LD_EXP 59
14519: PUSH
14520: LD_VAR 0 1
14524: ADD
14525: ST_TO_ADDR
// end ;
14526: PPOPN 1
14528: END
// on VehicleConstructed ( vehicle , building ) do var legionBomb , rocketTarget ;
14529: LD_INT 0
14531: PPUSH
14532: PPUSH
// begin if vehicle = powellVeh then
14533: LD_VAR 0 1
14537: PUSH
14538: LD_EXP 73
14542: EQUAL
14543: IFFALSE 14559
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
14545: LD_VAR 0 1
14549: PPUSH
14550: CALL_OW 313
14554: PPUSH
14555: CALL_OW 121
// if GetSide ( vehicle ) = 4 then
14559: LD_VAR 0 1
14563: PPUSH
14564: CALL_OW 255
14568: PUSH
14569: LD_INT 4
14571: EQUAL
14572: IFFALSE 14589
// AddComMoveXY ( vehicle , 58 , 63 ) ;
14574: LD_VAR 0 1
14578: PPUSH
14579: LD_INT 58
14581: PPUSH
14582: LD_INT 63
14584: PPUSH
14585: CALL_OW 171
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
14589: LD_VAR 0 1
14593: PPUSH
14594: CALL_OW 255
14598: PUSH
14599: LD_INT 4
14601: EQUAL
14602: PUSH
14603: LD_EXP 69
14607: PUSH
14608: LD_INT 2
14610: EQUAL
14611: AND
14612: PUSH
14613: LD_VAR 0 1
14617: PPUSH
14618: CALL_OW 264
14622: PUSH
14623: LD_INT 6
14625: EQUAL
14626: AND
14627: IFFALSE 14681
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
14629: LD_EXP 66
14633: PUSH
14634: LD_INT 5
14636: ARRAY
14637: PPUSH
14638: CALL_OW 122
// wait ( 0 0$1 ) ;
14642: LD_INT 35
14644: PPUSH
14645: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
14649: LD_EXP 66
14653: PUSH
14654: LD_INT 5
14656: ARRAY
14657: PPUSH
14658: LD_INT 85
14660: PPUSH
14661: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
14665: LD_EXP 66
14669: PUSH
14670: LD_INT 5
14672: ARRAY
14673: PPUSH
14674: LD_INT 3
14676: PPUSH
14677: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
14681: LD_VAR 0 1
14685: PPUSH
14686: CALL_OW 255
14690: PUSH
14691: LD_INT 4
14693: EQUAL
14694: PUSH
14695: LD_EXP 69
14699: PUSH
14700: LD_INT 2
14702: EQUAL
14703: AND
14704: PUSH
14705: LD_VAR 0 1
14709: PPUSH
14710: CALL_OW 264
14714: PUSH
14715: LD_INT 3
14717: EQUAL
14718: AND
14719: IFFALSE 14746
// begin powellVeh = vehicle ;
14721: LD_ADDR_EXP 73
14725: PUSH
14726: LD_VAR 0 1
14730: ST_TO_ADDR
// ComMoveXY ( vehicle , 49 , 74 ) ;
14731: LD_VAR 0 1
14735: PPUSH
14736: LD_INT 49
14738: PPUSH
14739: LD_INT 74
14741: PPUSH
14742: CALL_OW 111
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 2 and GetType ( vehicle ) = unit_vehicle then
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 255
14755: PUSH
14756: LD_INT 8
14758: EQUAL
14759: PUSH
14760: LD_VAR 0 1
14764: PPUSH
14765: CALL_OW 248
14769: PUSH
14770: LD_INT 2
14772: EQUAL
14773: AND
14774: PUSH
14775: LD_VAR 0 1
14779: PPUSH
14780: CALL_OW 247
14784: PUSH
14785: LD_INT 2
14787: EQUAL
14788: AND
14789: IFFALSE 14825
// begin legionVehicles = legionVehicles ^ vehicle ;
14791: LD_ADDR_EXP 55
14795: PUSH
14796: LD_EXP 55
14800: PUSH
14801: LD_VAR 0 1
14805: ADD
14806: ST_TO_ADDR
// ComLinkTo ( vehicle , arControler [ 1 ] ) ;
14807: LD_VAR 0 1
14811: PPUSH
14812: LD_EXP 56
14816: PUSH
14817: LD_INT 1
14819: ARRAY
14820: PPUSH
14821: CALL_OW 135
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 3 then
14825: LD_VAR 0 1
14829: PPUSH
14830: CALL_OW 255
14834: PUSH
14835: LD_INT 8
14837: EQUAL
14838: PUSH
14839: LD_VAR 0 1
14843: PPUSH
14844: CALL_OW 248
14848: PUSH
14849: LD_INT 3
14851: EQUAL
14852: AND
14853: IFFALSE 15392
// begin ChangeMissionObjectives ( MlegionDel ) ;
14855: LD_STRING MlegionDel
14857: PPUSH
14858: CALL_OW 337
// legionBomb = rand ( 1 , 2 ) ;
14862: LD_ADDR_VAR 0 3
14866: PUSH
14867: LD_INT 1
14869: PPUSH
14870: LD_INT 2
14872: PPUSH
14873: CALL_OW 12
14877: ST_TO_ADDR
// legionRocket = vehicle ;
14878: LD_ADDR_EXP 99
14882: PUSH
14883: LD_VAR 0 1
14887: ST_TO_ADDR
// DialogueOn ;
14888: CALL_OW 6
// if legionBomb = 1 then
14892: LD_VAR 0 3
14896: PUSH
14897: LD_INT 1
14899: EQUAL
14900: IFFALSE 15252
// begin if Kurt then
14902: LD_EXP 30
14906: IFFALSE 14922
// Say ( Kurt , D12-Kurt-1 ) else
14908: LD_EXP 30
14912: PPUSH
14913: LD_STRING D12-Kurt-1
14915: PPUSH
14916: CALL_OW 88
14920: GO 14984
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12-Kurt-1 ) ;
14922: LD_INT 22
14924: PUSH
14925: LD_INT 8
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 21
14934: PUSH
14935: LD_INT 1
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 25
14944: PUSH
14945: LD_INT 1
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: LD_INT 26
14954: PUSH
14955: LD_INT 1
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: PPUSH
14968: CALL_OW 69
14972: PUSH
14973: LD_INT 2
14975: ARRAY
14976: PPUSH
14977: LD_STRING D12-Kurt-1
14979: PPUSH
14980: CALL_OW 88
// DialogueOff ;
14984: CALL_OW 7
// wait ( 0 0$15 ) ;
14988: LD_INT 525
14990: PPUSH
14991: CALL_OW 67
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
14995: LD_ADDR_VAR 0 4
14999: PUSH
15000: LD_INT 22
15002: PUSH
15003: LD_INT 1
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: LD_INT 21
15012: PUSH
15013: LD_INT 3
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PUSH
15020: LD_INT 23
15022: PUSH
15023: LD_INT 1
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: LD_INT 2
15032: PUSH
15033: LD_INT 30
15035: PUSH
15036: LD_INT 0
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 30
15045: PUSH
15046: LD_INT 1
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: PPUSH
15064: CALL_OW 69
15068: ST_TO_ADDR
// if rocketTarget = 0 then
15069: LD_VAR 0 4
15073: PUSH
15074: LD_INT 0
15076: EQUAL
15077: IFFALSE 15153
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
15079: LD_ADDR_VAR 0 4
15083: PUSH
15084: LD_INT 22
15086: PUSH
15087: LD_INT 1
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PUSH
15094: LD_INT 21
15096: PUSH
15097: LD_INT 3
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 23
15106: PUSH
15107: LD_INT 2
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 2
15116: PUSH
15117: LD_INT 30
15119: PUSH
15120: LD_INT 0
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PUSH
15127: LD_INT 30
15129: PUSH
15130: LD_INT 1
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: LIST
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: PPUSH
15148: CALL_OW 69
15152: ST_TO_ADDR
// if rocketTarget = 0 then
15153: LD_VAR 0 4
15157: PUSH
15158: LD_INT 0
15160: EQUAL
15161: IFFALSE 15215
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
15163: LD_ADDR_VAR 0 4
15167: PUSH
15168: LD_INT 22
15170: PUSH
15171: LD_INT 1
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PUSH
15178: LD_INT 21
15180: PUSH
15181: LD_INT 1
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: LD_INT 23
15190: PUSH
15191: LD_INT 1
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 50
15200: PUSH
15201: EMPTY
15202: LIST
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: PPUSH
15210: CALL_OW 69
15214: ST_TO_ADDR
// ComAttackPlace ( legionRocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
15215: LD_EXP 99
15219: PPUSH
15220: LD_VAR 0 4
15224: PUSH
15225: LD_INT 1
15227: ARRAY
15228: PPUSH
15229: CALL_OW 250
15233: PPUSH
15234: LD_VAR 0 4
15238: PUSH
15239: LD_INT 1
15241: ARRAY
15242: PPUSH
15243: CALL_OW 251
15247: PPUSH
15248: CALL_OW 116
// end ; if legionBomb = 2 then
15252: LD_VAR 0 3
15256: PUSH
15257: LD_INT 2
15259: EQUAL
15260: IFFALSE 15392
// begin if Kurt then
15262: LD_EXP 30
15266: IFFALSE 15282
// Say ( Kurt , D12a-Kurt-1 ) else
15268: LD_EXP 30
15272: PPUSH
15273: LD_STRING D12a-Kurt-1
15275: PPUSH
15276: CALL_OW 88
15280: GO 15344
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12a-Kurt-11 ) ;
15282: LD_INT 22
15284: PUSH
15285: LD_INT 8
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PUSH
15292: LD_INT 21
15294: PUSH
15295: LD_INT 1
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 25
15304: PUSH
15305: LD_INT 1
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: LD_INT 26
15314: PUSH
15315: LD_INT 1
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: PPUSH
15328: CALL_OW 69
15332: PUSH
15333: LD_INT 2
15335: ARRAY
15336: PPUSH
15337: LD_STRING D12a-Kurt-11
15339: PPUSH
15340: CALL_OW 88
// SayRadio ( Roth , D12a-Roth-1 ) ;
15344: LD_EXP 28
15348: PPUSH
15349: LD_STRING D12a-Roth-1
15351: PPUSH
15352: CALL_OW 94
// DialogueOff ;
15356: CALL_OW 7
// wait ( 0 0$15 ) ;
15360: LD_INT 525
15362: PPUSH
15363: CALL_OW 67
// ComAttackPlace ( legionRocket , GetX ( RuDep2 ) , GetY ( RuDep2 ) ) ;
15367: LD_EXP 99
15371: PPUSH
15372: LD_INT 23
15374: PPUSH
15375: CALL_OW 250
15379: PPUSH
15380: LD_INT 23
15382: PPUSH
15383: CALL_OW 251
15387: PPUSH
15388: CALL_OW 116
// end ; end ; if GetSide ( vehicle ) = 3 and GetNation ( vehicle ) = 3 and GetType ( vehicle ) = unit_vehicle then
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 255
15401: PUSH
15402: LD_INT 3
15404: EQUAL
15405: PUSH
15406: LD_VAR 0 1
15410: PPUSH
15411: CALL_OW 248
15415: PUSH
15416: LD_INT 3
15418: EQUAL
15419: AND
15420: PUSH
15421: LD_VAR 0 1
15425: PPUSH
15426: CALL_OW 247
15430: PUSH
15431: LD_INT 2
15433: EQUAL
15434: AND
15435: IFFALSE 15453
// RussianVehicles = RussianVehicles ^ vehicle ;
15437: LD_ADDR_EXP 61
15441: PUSH
15442: LD_EXP 61
15446: PUSH
15447: LD_VAR 0 1
15451: ADD
15452: ST_TO_ADDR
// if GetSide ( vehicle ) = 7 and GetType ( vehicle ) = unit_vehicle then
15453: LD_VAR 0 1
15457: PPUSH
15458: CALL_OW 255
15462: PUSH
15463: LD_INT 7
15465: EQUAL
15466: PUSH
15467: LD_VAR 0 1
15471: PPUSH
15472: CALL_OW 247
15476: PUSH
15477: LD_INT 2
15479: EQUAL
15480: AND
15481: IFFALSE 15540
// begin AllianceVehicles = AllianceVehicles ^ vehicle ;
15483: LD_ADDR_EXP 62
15487: PUSH
15488: LD_EXP 62
15492: PUSH
15493: LD_VAR 0 1
15497: ADD
15498: ST_TO_ADDR
// if GetControl ( vehicle ) = 2 then
15499: LD_VAR 0 1
15503: PPUSH
15504: CALL_OW 263
15508: PUSH
15509: LD_INT 2
15511: EQUAL
15512: IFFALSE 15540
// ComLinkTo ( vehicle , allianceControler [ rand ( 1 , 3 ) ] ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: LD_EXP 63
15523: PUSH
15524: LD_INT 1
15526: PPUSH
15527: LD_INT 3
15529: PPUSH
15530: CALL_OW 12
15534: ARRAY
15535: PPUSH
15536: CALL_OW 135
// end ; end ;
15540: PPOPN 4
15542: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
15543: LD_VAR 0 1
15547: PPUSH
15548: CALL_OW 255
15552: PUSH
15553: LD_INT 4
15555: EQUAL
15556: PUSH
15557: LD_EXP 69
15561: PUSH
15562: LD_INT 1
15564: EQUAL
15565: AND
15566: IFFALSE 15669
// begin ComEnterUnit ( human , AmFact ) ;
15568: LD_VAR 0 2
15572: PPUSH
15573: LD_INT 85
15575: PPUSH
15576: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
15580: LD_VAR 0 2
15584: PPUSH
15585: CALL_OW 258
15589: PUSH
15590: LD_INT 1
15592: EQUAL
15593: PUSH
15594: LD_EXP 102
15598: PUSH
15599: LD_INT 0
15601: EQUAL
15602: AND
15603: IFFALSE 15669
// begin blockEvent1 = 1 ;
15605: LD_ADDR_EXP 102
15609: PUSH
15610: LD_INT 1
15612: ST_TO_ADDR
// startAttacks = 1 ;
15613: LD_ADDR_EXP 72
15617: PUSH
15618: LD_INT 1
15620: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
15621: LD_VAR 0 2
15625: PPUSH
15626: LD_STRING D4a-Sol1-1
15628: PPUSH
15629: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
15633: LD_EXP 17
15637: PPUSH
15638: LD_STRING D4a-Pow-1
15640: PPUSH
15641: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
15645: LD_VAR 0 2
15649: PPUSH
15650: LD_STRING D4a-Sol1-2
15652: PPUSH
15653: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
15657: LD_EXP 17
15661: PPUSH
15662: LD_STRING D4a-Pow-2
15664: PPUSH
15665: CALL_OW 88
// end ; end ; end ;
15669: PPOPN 2
15671: END
// on UnitDestroyed ( unit ) do var i ;
15672: LD_INT 0
15674: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15675: LD_VAR 0 1
15679: PPUSH
15680: CALL_OW 255
15684: PUSH
15685: LD_INT 1
15687: EQUAL
15688: PUSH
15689: LD_VAR 0 1
15693: PPUSH
15694: CALL_OW 247
15698: PUSH
15699: LD_INT 1
15701: EQUAL
15702: AND
15703: IFFALSE 15719
// unitLost = unitLost + 1 ;
15705: LD_ADDR_EXP 98
15709: PUSH
15710: LD_EXP 98
15714: PUSH
15715: LD_INT 1
15717: PLUS
15718: ST_TO_ADDR
// if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
15719: LD_VAR 0 1
15723: PPUSH
15724: CALL_OW 255
15728: PUSH
15729: LD_INT 4
15731: EQUAL
15732: PUSH
15733: LD_VAR 0 1
15737: PPUSH
15738: CALL_OW 247
15742: PUSH
15743: LD_INT 1
15745: EQUAL
15746: AND
15747: IFFALSE 15797
// begin for i in amUnitsAttack do
15749: LD_ADDR_VAR 0 2
15753: PUSH
15754: LD_EXP 66
15758: PUSH
15759: FOR_IN
15760: IFFALSE 15795
// if i = unit then
15762: LD_VAR 0 2
15766: PUSH
15767: LD_VAR 0 1
15771: EQUAL
15772: IFFALSE 15793
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
15774: LD_ADDR_EXP 66
15778: PUSH
15779: LD_EXP 66
15783: PUSH
15784: LD_VAR 0 1
15788: PUSH
15789: EMPTY
15790: LIST
15791: DIFF
15792: ST_TO_ADDR
15793: GO 15759
15795: POP
15796: POP
// end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
15797: LD_VAR 0 1
15801: PPUSH
15802: CALL_OW 255
15806: PUSH
15807: LD_INT 8
15809: EQUAL
15810: PUSH
15811: LD_VAR 0 1
15815: PPUSH
15816: CALL_OW 247
15820: PUSH
15821: LD_INT 2
15823: EQUAL
15824: AND
15825: PUSH
15826: LD_VAR 0 1
15830: PPUSH
15831: CALL_OW 248
15835: PUSH
15836: LD_INT 2
15838: EQUAL
15839: AND
15840: IFFALSE 15890
// begin for i in legionVehicles do
15842: LD_ADDR_VAR 0 2
15846: PUSH
15847: LD_EXP 55
15851: PUSH
15852: FOR_IN
15853: IFFALSE 15888
// if i = unit then
15855: LD_VAR 0 2
15859: PUSH
15860: LD_VAR 0 1
15864: EQUAL
15865: IFFALSE 15886
// legionVehicles = legionVehicles diff [ unit ] ;
15867: LD_ADDR_EXP 55
15871: PUSH
15872: LD_EXP 55
15876: PUSH
15877: LD_VAR 0 1
15881: PUSH
15882: EMPTY
15883: LIST
15884: DIFF
15885: ST_TO_ADDR
15886: GO 15852
15888: POP
15889: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
15890: LD_VAR 0 1
15894: PPUSH
15895: CALL_OW 255
15899: PUSH
15900: LD_INT 3
15902: EQUAL
15903: PUSH
15904: LD_VAR 0 1
15908: PPUSH
15909: CALL_OW 247
15913: PUSH
15914: LD_INT 2
15916: EQUAL
15917: AND
15918: IFFALSE 15968
// begin for i in RussianVehicles do
15920: LD_ADDR_VAR 0 2
15924: PUSH
15925: LD_EXP 61
15929: PUSH
15930: FOR_IN
15931: IFFALSE 15966
// if i = unit then
15933: LD_VAR 0 2
15937: PUSH
15938: LD_VAR 0 1
15942: EQUAL
15943: IFFALSE 15964
// RussianVehicles = RussianVehicles diff [ unit ] ;
15945: LD_ADDR_EXP 61
15949: PUSH
15950: LD_EXP 61
15954: PUSH
15955: LD_VAR 0 1
15959: PUSH
15960: EMPTY
15961: LIST
15962: DIFF
15963: ST_TO_ADDR
15964: GO 15930
15966: POP
15967: POP
// end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_vehicle then
15968: LD_VAR 0 1
15972: PPUSH
15973: CALL_OW 255
15977: PUSH
15978: LD_INT 7
15980: EQUAL
15981: PUSH
15982: LD_VAR 0 1
15986: PPUSH
15987: CALL_OW 247
15991: PUSH
15992: LD_INT 2
15994: EQUAL
15995: AND
15996: IFFALSE 16046
// begin for i in AllianceVehicles do
15998: LD_ADDR_VAR 0 2
16002: PUSH
16003: LD_EXP 62
16007: PUSH
16008: FOR_IN
16009: IFFALSE 16044
// if i = unit then
16011: LD_VAR 0 2
16015: PUSH
16016: LD_VAR 0 1
16020: EQUAL
16021: IFFALSE 16042
// AllianceVehicles = AllianceVehicles diff [ unit ] ;
16023: LD_ADDR_EXP 62
16027: PUSH
16028: LD_EXP 62
16032: PUSH
16033: LD_VAR 0 1
16037: PUSH
16038: EMPTY
16039: LIST
16040: DIFF
16041: ST_TO_ADDR
16042: GO 16008
16044: POP
16045: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 255
16055: PUSH
16056: LD_INT 3
16058: EQUAL
16059: PUSH
16060: LD_VAR 0 1
16064: PPUSH
16065: CALL_OW 247
16069: PUSH
16070: LD_INT 3
16072: EQUAL
16073: AND
16074: IFFALSE 16766
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16076: LD_VAR 0 1
16080: PPUSH
16081: CALL_OW 266
16085: PUSH
16086: LD_INT 31
16088: EQUAL
16089: PUSH
16090: LD_VAR 0 1
16094: PPUSH
16095: CALL_OW 266
16099: PUSH
16100: LD_INT 32
16102: EQUAL
16103: OR
16104: PUSH
16105: LD_VAR 0 1
16109: PPUSH
16110: CALL_OW 266
16114: PUSH
16115: LD_INT 36
16117: EQUAL
16118: OR
16119: PUSH
16120: LD_VAR 0 1
16124: PPUSH
16125: CALL_OW 266
16129: PUSH
16130: LD_INT 0
16132: EQUAL
16133: OR
16134: PUSH
16135: LD_VAR 0 1
16139: PPUSH
16140: CALL_OW 266
16144: PUSH
16145: LD_INT 24
16147: EQUAL
16148: OR
16149: PUSH
16150: LD_VAR 0 1
16154: PPUSH
16155: CALL_OW 266
16159: PUSH
16160: LD_INT 17
16162: EQUAL
16163: OR
16164: PUSH
16165: LD_VAR 0 1
16169: PPUSH
16170: CALL_OW 266
16174: PUSH
16175: LD_INT 25
16177: EQUAL
16178: OR
16179: PUSH
16180: LD_VAR 0 1
16184: PPUSH
16185: CALL_OW 266
16189: PUSH
16190: LD_INT 19
16192: EQUAL
16193: OR
16194: PUSH
16195: LD_VAR 0 1
16199: PPUSH
16200: CALL_OW 266
16204: PUSH
16205: LD_INT 20
16207: EQUAL
16208: OR
16209: PUSH
16210: LD_VAR 0 1
16214: PPUSH
16215: CALL_OW 266
16219: PUSH
16220: LD_INT 18
16222: EQUAL
16223: OR
16224: PUSH
16225: LD_VAR 0 1
16229: PPUSH
16230: CALL_OW 266
16234: PUSH
16235: LD_INT 21
16237: EQUAL
16238: OR
16239: PUSH
16240: LD_VAR 0 1
16244: PPUSH
16245: CALL_OW 266
16249: PUSH
16250: LD_INT 23
16252: EQUAL
16253: OR
16254: PUSH
16255: LD_VAR 0 1
16259: PPUSH
16260: CALL_OW 266
16264: PUSH
16265: LD_INT 16
16267: EQUAL
16268: OR
16269: PUSH
16270: LD_VAR 0 1
16274: PPUSH
16275: CALL_OW 266
16279: PUSH
16280: LD_INT 6
16282: EQUAL
16283: OR
16284: PUSH
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 266
16294: PUSH
16295: LD_INT 29
16297: EQUAL
16298: OR
16299: PUSH
16300: LD_VAR 0 1
16304: PPUSH
16305: CALL_OW 266
16309: PUSH
16310: LD_INT 26
16312: EQUAL
16313: OR
16314: PUSH
16315: LD_VAR 0 1
16319: PPUSH
16320: CALL_OW 266
16324: PUSH
16325: LD_INT 30
16327: EQUAL
16328: OR
16329: PUSH
16330: LD_VAR 0 1
16334: PPUSH
16335: CALL_OW 266
16339: PUSH
16340: LD_INT 28
16342: EQUAL
16343: OR
16344: PUSH
16345: LD_VAR 0 1
16349: PPUSH
16350: CALL_OW 266
16354: PUSH
16355: LD_INT 27
16357: EQUAL
16358: OR
16359: PUSH
16360: LD_VAR 0 1
16364: PPUSH
16365: CALL_OW 266
16369: PUSH
16370: LD_INT 33
16372: EQUAL
16373: OR
16374: PUSH
16375: LD_VAR 0 1
16379: PPUSH
16380: CALL_OW 266
16384: PUSH
16385: LD_INT 2
16387: EQUAL
16388: OR
16389: PUSH
16390: LD_VAR 0 1
16394: PPUSH
16395: CALL_OW 266
16399: PUSH
16400: LD_INT 4
16402: EQUAL
16403: OR
16404: IFFALSE 16490
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ GetBType ( unit ) ;
16406: LD_ADDR_EXP 94
16410: PUSH
16411: LD_EXP 94
16415: PUSH
16416: LD_VAR 0 1
16420: PPUSH
16421: CALL_OW 266
16425: ADD
16426: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16427: LD_ADDR_EXP 94
16431: PUSH
16432: LD_EXP 94
16436: PUSH
16437: LD_VAR 0 1
16441: PPUSH
16442: CALL_OW 250
16446: ADD
16447: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16448: LD_ADDR_EXP 94
16452: PUSH
16453: LD_EXP 94
16457: PUSH
16458: LD_VAR 0 1
16462: PPUSH
16463: CALL_OW 251
16467: ADD
16468: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16469: LD_ADDR_EXP 94
16473: PUSH
16474: LD_EXP 94
16478: PUSH
16479: LD_VAR 0 1
16483: PPUSH
16484: CALL_OW 254
16488: ADD
16489: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16490: LD_VAR 0 1
16494: PPUSH
16495: CALL_OW 266
16499: PUSH
16500: LD_INT 1
16502: EQUAL
16503: IFFALSE 16582
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 0 ;
16505: LD_ADDR_EXP 94
16509: PUSH
16510: LD_EXP 94
16514: PUSH
16515: LD_INT 0
16517: ADD
16518: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16519: LD_ADDR_EXP 94
16523: PUSH
16524: LD_EXP 94
16528: PUSH
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL_OW 250
16538: ADD
16539: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16540: LD_ADDR_EXP 94
16544: PUSH
16545: LD_EXP 94
16549: PUSH
16550: LD_VAR 0 1
16554: PPUSH
16555: CALL_OW 251
16559: ADD
16560: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16561: LD_ADDR_EXP 94
16565: PUSH
16566: LD_EXP 94
16570: PUSH
16571: LD_VAR 0 1
16575: PPUSH
16576: CALL_OW 254
16580: ADD
16581: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16582: LD_VAR 0 1
16586: PPUSH
16587: CALL_OW 266
16591: PUSH
16592: LD_INT 3
16594: EQUAL
16595: IFFALSE 16674
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 2 ;
16597: LD_ADDR_EXP 94
16601: PUSH
16602: LD_EXP 94
16606: PUSH
16607: LD_INT 2
16609: ADD
16610: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16611: LD_ADDR_EXP 94
16615: PUSH
16616: LD_EXP 94
16620: PUSH
16621: LD_VAR 0 1
16625: PPUSH
16626: CALL_OW 250
16630: ADD
16631: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16632: LD_ADDR_EXP 94
16636: PUSH
16637: LD_EXP 94
16641: PUSH
16642: LD_VAR 0 1
16646: PPUSH
16647: CALL_OW 251
16651: ADD
16652: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16653: LD_ADDR_EXP 94
16657: PUSH
16658: LD_EXP 94
16662: PUSH
16663: LD_VAR 0 1
16667: PPUSH
16668: CALL_OW 254
16672: ADD
16673: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16674: LD_VAR 0 1
16678: PPUSH
16679: CALL_OW 266
16683: PUSH
16684: LD_INT 5
16686: EQUAL
16687: IFFALSE 16766
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 4 ;
16689: LD_ADDR_EXP 94
16693: PUSH
16694: LD_EXP 94
16698: PUSH
16699: LD_INT 4
16701: ADD
16702: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16703: LD_ADDR_EXP 94
16707: PUSH
16708: LD_EXP 94
16712: PUSH
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 250
16722: ADD
16723: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16724: LD_ADDR_EXP 94
16728: PUSH
16729: LD_EXP 94
16733: PUSH
16734: LD_VAR 0 1
16738: PPUSH
16739: CALL_OW 251
16743: ADD
16744: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16745: LD_ADDR_EXP 94
16749: PUSH
16750: LD_EXP 94
16754: PUSH
16755: LD_VAR 0 1
16759: PPUSH
16760: CALL_OW 254
16764: ADD
16765: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_building and GetNation ( unit ) = 2 then
16766: LD_VAR 0 1
16770: PPUSH
16771: CALL_OW 255
16775: PUSH
16776: LD_INT 8
16778: EQUAL
16779: PUSH
16780: LD_VAR 0 1
16784: PPUSH
16785: CALL_OW 247
16789: PUSH
16790: LD_INT 3
16792: EQUAL
16793: AND
16794: PUSH
16795: LD_VAR 0 1
16799: PPUSH
16800: CALL_OW 248
16804: PUSH
16805: LD_INT 2
16807: EQUAL
16808: AND
16809: IFFALSE 17501
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16811: LD_VAR 0 1
16815: PPUSH
16816: CALL_OW 266
16820: PUSH
16821: LD_INT 31
16823: EQUAL
16824: PUSH
16825: LD_VAR 0 1
16829: PPUSH
16830: CALL_OW 266
16834: PUSH
16835: LD_INT 32
16837: EQUAL
16838: OR
16839: PUSH
16840: LD_VAR 0 1
16844: PPUSH
16845: CALL_OW 266
16849: PUSH
16850: LD_INT 36
16852: EQUAL
16853: OR
16854: PUSH
16855: LD_VAR 0 1
16859: PPUSH
16860: CALL_OW 266
16864: PUSH
16865: LD_INT 0
16867: EQUAL
16868: OR
16869: PUSH
16870: LD_VAR 0 1
16874: PPUSH
16875: CALL_OW 266
16879: PUSH
16880: LD_INT 24
16882: EQUAL
16883: OR
16884: PUSH
16885: LD_VAR 0 1
16889: PPUSH
16890: CALL_OW 266
16894: PUSH
16895: LD_INT 17
16897: EQUAL
16898: OR
16899: PUSH
16900: LD_VAR 0 1
16904: PPUSH
16905: CALL_OW 266
16909: PUSH
16910: LD_INT 25
16912: EQUAL
16913: OR
16914: PUSH
16915: LD_VAR 0 1
16919: PPUSH
16920: CALL_OW 266
16924: PUSH
16925: LD_INT 19
16927: EQUAL
16928: OR
16929: PUSH
16930: LD_VAR 0 1
16934: PPUSH
16935: CALL_OW 266
16939: PUSH
16940: LD_INT 20
16942: EQUAL
16943: OR
16944: PUSH
16945: LD_VAR 0 1
16949: PPUSH
16950: CALL_OW 266
16954: PUSH
16955: LD_INT 18
16957: EQUAL
16958: OR
16959: PUSH
16960: LD_VAR 0 1
16964: PPUSH
16965: CALL_OW 266
16969: PUSH
16970: LD_INT 21
16972: EQUAL
16973: OR
16974: PUSH
16975: LD_VAR 0 1
16979: PPUSH
16980: CALL_OW 266
16984: PUSH
16985: LD_INT 23
16987: EQUAL
16988: OR
16989: PUSH
16990: LD_VAR 0 1
16994: PPUSH
16995: CALL_OW 266
16999: PUSH
17000: LD_INT 16
17002: EQUAL
17003: OR
17004: PUSH
17005: LD_VAR 0 1
17009: PPUSH
17010: CALL_OW 266
17014: PUSH
17015: LD_INT 6
17017: EQUAL
17018: OR
17019: PUSH
17020: LD_VAR 0 1
17024: PPUSH
17025: CALL_OW 266
17029: PUSH
17030: LD_INT 29
17032: EQUAL
17033: OR
17034: PUSH
17035: LD_VAR 0 1
17039: PPUSH
17040: CALL_OW 266
17044: PUSH
17045: LD_INT 26
17047: EQUAL
17048: OR
17049: PUSH
17050: LD_VAR 0 1
17054: PPUSH
17055: CALL_OW 266
17059: PUSH
17060: LD_INT 30
17062: EQUAL
17063: OR
17064: PUSH
17065: LD_VAR 0 1
17069: PPUSH
17070: CALL_OW 266
17074: PUSH
17075: LD_INT 28
17077: EQUAL
17078: OR
17079: PUSH
17080: LD_VAR 0 1
17084: PPUSH
17085: CALL_OW 266
17089: PUSH
17090: LD_INT 27
17092: EQUAL
17093: OR
17094: PUSH
17095: LD_VAR 0 1
17099: PPUSH
17100: CALL_OW 266
17104: PUSH
17105: LD_INT 33
17107: EQUAL
17108: OR
17109: PUSH
17110: LD_VAR 0 1
17114: PPUSH
17115: CALL_OW 266
17119: PUSH
17120: LD_INT 2
17122: EQUAL
17123: OR
17124: PUSH
17125: LD_VAR 0 1
17129: PPUSH
17130: CALL_OW 266
17134: PUSH
17135: LD_INT 4
17137: EQUAL
17138: OR
17139: IFFALSE 17225
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ GetBType ( unit ) ;
17141: LD_ADDR_EXP 93
17145: PUSH
17146: LD_EXP 93
17150: PUSH
17151: LD_VAR 0 1
17155: PPUSH
17156: CALL_OW 266
17160: ADD
17161: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17162: LD_ADDR_EXP 93
17166: PUSH
17167: LD_EXP 93
17171: PUSH
17172: LD_VAR 0 1
17176: PPUSH
17177: CALL_OW 250
17181: ADD
17182: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17183: LD_ADDR_EXP 93
17187: PUSH
17188: LD_EXP 93
17192: PUSH
17193: LD_VAR 0 1
17197: PPUSH
17198: CALL_OW 251
17202: ADD
17203: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17204: LD_ADDR_EXP 93
17208: PUSH
17209: LD_EXP 93
17213: PUSH
17214: LD_VAR 0 1
17218: PPUSH
17219: CALL_OW 254
17223: ADD
17224: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17225: LD_VAR 0 1
17229: PPUSH
17230: CALL_OW 266
17234: PUSH
17235: LD_INT 1
17237: EQUAL
17238: IFFALSE 17317
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 0 ;
17240: LD_ADDR_EXP 93
17244: PUSH
17245: LD_EXP 93
17249: PUSH
17250: LD_INT 0
17252: ADD
17253: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17254: LD_ADDR_EXP 93
17258: PUSH
17259: LD_EXP 93
17263: PUSH
17264: LD_VAR 0 1
17268: PPUSH
17269: CALL_OW 250
17273: ADD
17274: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17275: LD_ADDR_EXP 93
17279: PUSH
17280: LD_EXP 93
17284: PUSH
17285: LD_VAR 0 1
17289: PPUSH
17290: CALL_OW 251
17294: ADD
17295: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17296: LD_ADDR_EXP 93
17300: PUSH
17301: LD_EXP 93
17305: PUSH
17306: LD_VAR 0 1
17310: PPUSH
17311: CALL_OW 254
17315: ADD
17316: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17317: LD_VAR 0 1
17321: PPUSH
17322: CALL_OW 266
17326: PUSH
17327: LD_INT 3
17329: EQUAL
17330: IFFALSE 17409
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 2 ;
17332: LD_ADDR_EXP 93
17336: PUSH
17337: LD_EXP 93
17341: PUSH
17342: LD_INT 2
17344: ADD
17345: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17346: LD_ADDR_EXP 93
17350: PUSH
17351: LD_EXP 93
17355: PUSH
17356: LD_VAR 0 1
17360: PPUSH
17361: CALL_OW 250
17365: ADD
17366: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17367: LD_ADDR_EXP 93
17371: PUSH
17372: LD_EXP 93
17376: PUSH
17377: LD_VAR 0 1
17381: PPUSH
17382: CALL_OW 251
17386: ADD
17387: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17388: LD_ADDR_EXP 93
17392: PUSH
17393: LD_EXP 93
17397: PUSH
17398: LD_VAR 0 1
17402: PPUSH
17403: CALL_OW 254
17407: ADD
17408: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17409: LD_VAR 0 1
17413: PPUSH
17414: CALL_OW 266
17418: PUSH
17419: LD_INT 5
17421: EQUAL
17422: IFFALSE 17501
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 4 ;
17424: LD_ADDR_EXP 93
17428: PUSH
17429: LD_EXP 93
17433: PUSH
17434: LD_INT 4
17436: ADD
17437: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17438: LD_ADDR_EXP 93
17442: PUSH
17443: LD_EXP 93
17447: PUSH
17448: LD_VAR 0 1
17452: PPUSH
17453: CALL_OW 250
17457: ADD
17458: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17459: LD_ADDR_EXP 93
17463: PUSH
17464: LD_EXP 93
17468: PUSH
17469: LD_VAR 0 1
17473: PPUSH
17474: CALL_OW 251
17478: ADD
17479: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17480: LD_ADDR_EXP 93
17484: PUSH
17485: LD_EXP 93
17489: PUSH
17490: LD_VAR 0 1
17494: PPUSH
17495: CALL_OW 254
17499: ADD
17500: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_building then
17501: LD_VAR 0 1
17505: PPUSH
17506: CALL_OW 255
17510: PUSH
17511: LD_INT 7
17513: EQUAL
17514: PUSH
17515: LD_VAR 0 1
17519: PPUSH
17520: CALL_OW 247
17524: PUSH
17525: LD_INT 3
17527: EQUAL
17528: AND
17529: IFFALSE 18221
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17531: LD_VAR 0 1
17535: PPUSH
17536: CALL_OW 266
17540: PUSH
17541: LD_INT 31
17543: EQUAL
17544: PUSH
17545: LD_VAR 0 1
17549: PPUSH
17550: CALL_OW 266
17554: PUSH
17555: LD_INT 32
17557: EQUAL
17558: OR
17559: PUSH
17560: LD_VAR 0 1
17564: PPUSH
17565: CALL_OW 266
17569: PUSH
17570: LD_INT 36
17572: EQUAL
17573: OR
17574: PUSH
17575: LD_VAR 0 1
17579: PPUSH
17580: CALL_OW 266
17584: PUSH
17585: LD_INT 0
17587: EQUAL
17588: OR
17589: PUSH
17590: LD_VAR 0 1
17594: PPUSH
17595: CALL_OW 266
17599: PUSH
17600: LD_INT 24
17602: EQUAL
17603: OR
17604: PUSH
17605: LD_VAR 0 1
17609: PPUSH
17610: CALL_OW 266
17614: PUSH
17615: LD_INT 17
17617: EQUAL
17618: OR
17619: PUSH
17620: LD_VAR 0 1
17624: PPUSH
17625: CALL_OW 266
17629: PUSH
17630: LD_INT 25
17632: EQUAL
17633: OR
17634: PUSH
17635: LD_VAR 0 1
17639: PPUSH
17640: CALL_OW 266
17644: PUSH
17645: LD_INT 19
17647: EQUAL
17648: OR
17649: PUSH
17650: LD_VAR 0 1
17654: PPUSH
17655: CALL_OW 266
17659: PUSH
17660: LD_INT 20
17662: EQUAL
17663: OR
17664: PUSH
17665: LD_VAR 0 1
17669: PPUSH
17670: CALL_OW 266
17674: PUSH
17675: LD_INT 18
17677: EQUAL
17678: OR
17679: PUSH
17680: LD_VAR 0 1
17684: PPUSH
17685: CALL_OW 266
17689: PUSH
17690: LD_INT 21
17692: EQUAL
17693: OR
17694: PUSH
17695: LD_VAR 0 1
17699: PPUSH
17700: CALL_OW 266
17704: PUSH
17705: LD_INT 23
17707: EQUAL
17708: OR
17709: PUSH
17710: LD_VAR 0 1
17714: PPUSH
17715: CALL_OW 266
17719: PUSH
17720: LD_INT 16
17722: EQUAL
17723: OR
17724: PUSH
17725: LD_VAR 0 1
17729: PPUSH
17730: CALL_OW 266
17734: PUSH
17735: LD_INT 6
17737: EQUAL
17738: OR
17739: PUSH
17740: LD_VAR 0 1
17744: PPUSH
17745: CALL_OW 266
17749: PUSH
17750: LD_INT 29
17752: EQUAL
17753: OR
17754: PUSH
17755: LD_VAR 0 1
17759: PPUSH
17760: CALL_OW 266
17764: PUSH
17765: LD_INT 26
17767: EQUAL
17768: OR
17769: PUSH
17770: LD_VAR 0 1
17774: PPUSH
17775: CALL_OW 266
17779: PUSH
17780: LD_INT 30
17782: EQUAL
17783: OR
17784: PUSH
17785: LD_VAR 0 1
17789: PPUSH
17790: CALL_OW 266
17794: PUSH
17795: LD_INT 28
17797: EQUAL
17798: OR
17799: PUSH
17800: LD_VAR 0 1
17804: PPUSH
17805: CALL_OW 266
17809: PUSH
17810: LD_INT 27
17812: EQUAL
17813: OR
17814: PUSH
17815: LD_VAR 0 1
17819: PPUSH
17820: CALL_OW 266
17824: PUSH
17825: LD_INT 33
17827: EQUAL
17828: OR
17829: PUSH
17830: LD_VAR 0 1
17834: PPUSH
17835: CALL_OW 266
17839: PUSH
17840: LD_INT 2
17842: EQUAL
17843: OR
17844: PUSH
17845: LD_VAR 0 1
17849: PPUSH
17850: CALL_OW 266
17854: PUSH
17855: LD_INT 4
17857: EQUAL
17858: OR
17859: IFFALSE 17945
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetBType ( unit ) ;
17861: LD_ADDR_EXP 95
17865: PUSH
17866: LD_EXP 95
17870: PUSH
17871: LD_VAR 0 1
17875: PPUSH
17876: CALL_OW 266
17880: ADD
17881: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17882: LD_ADDR_EXP 95
17886: PUSH
17887: LD_EXP 95
17891: PUSH
17892: LD_VAR 0 1
17896: PPUSH
17897: CALL_OW 250
17901: ADD
17902: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17903: LD_ADDR_EXP 95
17907: PUSH
17908: LD_EXP 95
17912: PUSH
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 251
17922: ADD
17923: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17924: LD_ADDR_EXP 95
17928: PUSH
17929: LD_EXP 95
17933: PUSH
17934: LD_VAR 0 1
17938: PPUSH
17939: CALL_OW 254
17943: ADD
17944: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17945: LD_VAR 0 1
17949: PPUSH
17950: CALL_OW 266
17954: PUSH
17955: LD_INT 1
17957: EQUAL
17958: IFFALSE 18037
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 0 ;
17960: LD_ADDR_EXP 95
17964: PUSH
17965: LD_EXP 95
17969: PUSH
17970: LD_INT 0
17972: ADD
17973: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17974: LD_ADDR_EXP 95
17978: PUSH
17979: LD_EXP 95
17983: PUSH
17984: LD_VAR 0 1
17988: PPUSH
17989: CALL_OW 250
17993: ADD
17994: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17995: LD_ADDR_EXP 95
17999: PUSH
18000: LD_EXP 95
18004: PUSH
18005: LD_VAR 0 1
18009: PPUSH
18010: CALL_OW 251
18014: ADD
18015: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18016: LD_ADDR_EXP 95
18020: PUSH
18021: LD_EXP 95
18025: PUSH
18026: LD_VAR 0 1
18030: PPUSH
18031: CALL_OW 254
18035: ADD
18036: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18037: LD_VAR 0 1
18041: PPUSH
18042: CALL_OW 266
18046: PUSH
18047: LD_INT 3
18049: EQUAL
18050: IFFALSE 18129
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 2 ;
18052: LD_ADDR_EXP 95
18056: PUSH
18057: LD_EXP 95
18061: PUSH
18062: LD_INT 2
18064: ADD
18065: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18066: LD_ADDR_EXP 95
18070: PUSH
18071: LD_EXP 95
18075: PUSH
18076: LD_VAR 0 1
18080: PPUSH
18081: CALL_OW 250
18085: ADD
18086: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18087: LD_ADDR_EXP 95
18091: PUSH
18092: LD_EXP 95
18096: PUSH
18097: LD_VAR 0 1
18101: PPUSH
18102: CALL_OW 251
18106: ADD
18107: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18108: LD_ADDR_EXP 95
18112: PUSH
18113: LD_EXP 95
18117: PUSH
18118: LD_VAR 0 1
18122: PPUSH
18123: CALL_OW 254
18127: ADD
18128: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18129: LD_VAR 0 1
18133: PPUSH
18134: CALL_OW 266
18138: PUSH
18139: LD_INT 5
18141: EQUAL
18142: IFFALSE 18221
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 4 ;
18144: LD_ADDR_EXP 95
18148: PUSH
18149: LD_EXP 95
18153: PUSH
18154: LD_INT 4
18156: ADD
18157: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18158: LD_ADDR_EXP 95
18162: PUSH
18163: LD_EXP 95
18167: PUSH
18168: LD_VAR 0 1
18172: PPUSH
18173: CALL_OW 250
18177: ADD
18178: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18179: LD_ADDR_EXP 95
18183: PUSH
18184: LD_EXP 95
18188: PUSH
18189: LD_VAR 0 1
18193: PPUSH
18194: CALL_OW 251
18198: ADD
18199: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18200: LD_ADDR_EXP 95
18204: PUSH
18205: LD_EXP 95
18209: PUSH
18210: LD_VAR 0 1
18214: PPUSH
18215: CALL_OW 254
18219: ADD
18220: ST_TO_ADDR
// end ; end ; end ;
18221: PPOPN 2
18223: END
// on UnitKamikazed ( unit ) do var i ;
18224: LD_INT 0
18226: PPUSH
// begin if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
18227: LD_VAR 0 1
18231: PPUSH
18232: CALL_OW 255
18236: PUSH
18237: LD_INT 8
18239: EQUAL
18240: PUSH
18241: LD_VAR 0 1
18245: PPUSH
18246: CALL_OW 247
18250: PUSH
18251: LD_INT 2
18253: EQUAL
18254: AND
18255: PUSH
18256: LD_VAR 0 1
18260: PPUSH
18261: CALL_OW 248
18265: PUSH
18266: LD_INT 2
18268: EQUAL
18269: AND
18270: IFFALSE 18320
// begin for i in legionVehicles do
18272: LD_ADDR_VAR 0 2
18276: PUSH
18277: LD_EXP 55
18281: PUSH
18282: FOR_IN
18283: IFFALSE 18318
// if i = unit then
18285: LD_VAR 0 2
18289: PUSH
18290: LD_VAR 0 1
18294: EQUAL
18295: IFFALSE 18316
// legionVehicles = legionVehicles diff [ unit ] ;
18297: LD_ADDR_EXP 55
18301: PUSH
18302: LD_EXP 55
18306: PUSH
18307: LD_VAR 0 1
18311: PUSH
18312: EMPTY
18313: LIST
18314: DIFF
18315: ST_TO_ADDR
18316: GO 18282
18318: POP
18319: POP
// end ; end ;
18320: PPOPN 2
18322: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , SiberiteMainDeposit ) then
18323: LD_VAR 0 2
18327: PPUSH
18328: LD_VAR 0 3
18332: PPUSH
18333: LD_INT 29
18335: PPUSH
18336: CALL_OW 309
18340: IFFALSE 18400
// begin if GetSide ( unit ) = 1 then
18342: LD_VAR 0 1
18346: PPUSH
18347: CALL_OW 255
18351: PUSH
18352: LD_INT 1
18354: EQUAL
18355: IFFALSE 18371
// begin wait ( 0 0$6 ) ;
18357: LD_INT 210
18359: PPUSH
18360: CALL_OW 67
// YouLost ( Motherlode2 ) ;
18364: LD_STRING Motherlode2
18366: PPUSH
18367: CALL_OW 104
// end ; if GetSide ( unit ) = 8 then
18371: LD_VAR 0 1
18375: PPUSH
18376: CALL_OW 255
18380: PUSH
18381: LD_INT 8
18383: EQUAL
18384: IFFALSE 18400
// begin wait ( 0 0$6 ) ;
18386: LD_INT 210
18388: PPUSH
18389: CALL_OW 67
// YouLost ( Motherlode1 ) ;
18393: LD_STRING Motherlode1
18395: PPUSH
18396: CALL_OW 104
// end ; end ; end ;
18400: PPOPN 3
18402: END
// on SibDepositContaminated ( unit , x , y ) do begin if GetSide ( unit ) = 2 then
18403: LD_VAR 0 1
18407: PPUSH
18408: CALL_OW 255
18412: PUSH
18413: LD_INT 2
18415: EQUAL
18416: IFFALSE 18425
// YouLost ( Motherlode3 ) ;
18418: LD_STRING Motherlode3
18420: PPUSH
18421: CALL_OW 104
// end ;
18425: PPOPN 3
18427: END
// on VehicleCaptured ( new_identifier , old_identifier , old_side , capturing_unit ) do begin if old_identifier in allianceVehicles then
18428: LD_VAR 0 2
18432: PUSH
18433: LD_EXP 62
18437: IN
18438: IFFALSE 18456
// allianceVehicles := allianceVehicles diff old_identifier ;
18440: LD_ADDR_EXP 62
18444: PUSH
18445: LD_EXP 62
18449: PUSH
18450: LD_VAR 0 2
18454: DIFF
18455: ST_TO_ADDR
// if old_identifier in legionVehicles then
18456: LD_VAR 0 2
18460: PUSH
18461: LD_EXP 55
18465: IN
18466: IFFALSE 18484
// legionVehicles := legionVehicles diff old_identifier ;
18468: LD_ADDR_EXP 55
18472: PUSH
18473: LD_EXP 55
18477: PUSH
18478: LD_VAR 0 2
18482: DIFF
18483: ST_TO_ADDR
// if old_identifier in russianVehicles then
18484: LD_VAR 0 2
18488: PUSH
18489: LD_EXP 61
18493: IN
18494: IFFALSE 18512
// russianVehicles := russianVehicles diff old_identifier ;
18496: LD_ADDR_EXP 61
18500: PUSH
18501: LD_EXP 61
18505: PUSH
18506: LD_VAR 0 2
18510: DIFF
18511: ST_TO_ADDR
// end ; end_of_file
18512: PPOPN 4
18514: END
// every 3 3$0 do
18515: GO 18517
18517: DISABLE
// begin enable ;
18518: ENABLE
// LegionTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
18519: LD_ADDR_EXP 87
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: LD_INT 3
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 1
18536: PPUSH
18537: LD_INT 2
18539: PPUSH
18540: CALL_OW 12
18544: ARRAY
18545: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
18546: LD_INT 22
18548: PUSH
18549: LD_INT 8
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 21
18558: PUSH
18559: LD_INT 1
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PPUSH
18570: CALL_OW 69
18574: PUSH
18575: LD_INT 1
18577: GREATER
18578: IFFALSE 18609
// RussianTarget = [ 1 , 8 ] [ Rand ( 1 , 2 ) ] else
18580: LD_ADDR_EXP 89
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: LD_INT 8
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 1
18597: PPUSH
18598: LD_INT 2
18600: PPUSH
18601: CALL_OW 12
18605: ARRAY
18606: ST_TO_ADDR
18607: GO 18617
// RussianTarget = 1 ;
18609: LD_ADDR_EXP 89
18613: PUSH
18614: LD_INT 1
18616: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
18617: LD_INT 22
18619: PUSH
18620: LD_INT 8
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 21
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PPUSH
18641: CALL_OW 69
18645: PUSH
18646: LD_INT 1
18648: GREATER
18649: IFFALSE 18684
// AllianceTarget = [ 1 , 3 , 8 ] [ Rand ( 1 , 3 ) ] else
18651: LD_ADDR_EXP 88
18655: PUSH
18656: LD_INT 1
18658: PUSH
18659: LD_INT 3
18661: PUSH
18662: LD_INT 8
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 1
18672: PPUSH
18673: LD_INT 3
18675: PPUSH
18676: CALL_OW 12
18680: ARRAY
18681: ST_TO_ADDR
18682: GO 18711
// AllianceTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
18684: LD_ADDR_EXP 88
18688: PUSH
18689: LD_INT 1
18691: PUSH
18692: LD_INT 3
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 1
18701: PPUSH
18702: LD_INT 2
18704: PPUSH
18705: CALL_OW 12
18709: ARRAY
18710: ST_TO_ADDR
// end ;
18711: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople ;
18712: LD_EXP 68
18716: PUSH
18717: LD_INT 1
18719: EQUAL
18720: IFFALSE 19297
18722: GO 18724
18724: DISABLE
18725: LD_INT 0
18727: PPUSH
18728: PPUSH
// begin for i = 1 to 4 do
18729: LD_ADDR_VAR 0 1
18733: PUSH
18734: DOUBLE
18735: LD_INT 1
18737: DEC
18738: ST_TO_ADDR
18739: LD_INT 4
18741: PUSH
18742: FOR_TO
18743: IFFALSE 18783
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
18745: LD_EXP 66
18749: PUSH
18750: LD_VAR 0 1
18754: ARRAY
18755: PPUSH
18756: LD_INT 85
18758: PPUSH
18759: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
18763: LD_EXP 66
18767: PUSH
18768: LD_VAR 0 1
18772: ARRAY
18773: PPUSH
18774: LD_INT 3
18776: PPUSH
18777: CALL_OW 183
// end ;
18781: GO 18742
18783: POP
18784: POP
// wait ( 0 0$1 ) ;
18785: LD_INT 35
18787: PPUSH
18788: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
18792: LD_ADDR_VAR 0 2
18796: PUSH
18797: LD_INT 22
18799: PUSH
18800: LD_INT 4
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 21
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 56
18819: PUSH
18820: EMPTY
18821: LIST
18822: PUSH
18823: LD_INT 3
18825: PUSH
18826: LD_INT 60
18828: PUSH
18829: EMPTY
18830: LIST
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: PPUSH
18842: CALL_OW 69
18846: PUSH
18847: LD_EXP 17
18851: PUSH
18852: EMPTY
18853: LIST
18854: DIFF
18855: ST_TO_ADDR
// ComEnterUnit ( powellPeople [ 1 ] , PowellCargo ) ;
18856: LD_VAR 0 2
18860: PUSH
18861: LD_INT 1
18863: ARRAY
18864: PPUSH
18865: LD_INT 235
18867: PPUSH
18868: CALL_OW 120
// SetClass ( powellPeople [ 2 ] , 2 ) ;
18872: LD_VAR 0 2
18876: PUSH
18877: LD_INT 2
18879: ARRAY
18880: PPUSH
18881: LD_INT 2
18883: PPUSH
18884: CALL_OW 336
// SetClass ( powellPeople [ 3 ] , 2 ) ;
18888: LD_VAR 0 2
18892: PUSH
18893: LD_INT 3
18895: ARRAY
18896: PPUSH
18897: LD_INT 2
18899: PPUSH
18900: CALL_OW 336
// SetResourceVisibility ( 30 , 49 , 4 ) ;
18904: LD_INT 30
18906: PPUSH
18907: LD_INT 49
18909: PPUSH
18910: LD_INT 4
18912: PPUSH
18913: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
18917: LD_INT 91
18919: PPUSH
18920: LD_INT 10
18922: PPUSH
18923: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
18927: LD_INT 91
18929: PPUSH
18930: LD_INT 11
18932: PPUSH
18933: CALL_OW 207
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_mine , 30 , 49 , 1 ) ;
18937: LD_INT 22
18939: PUSH
18940: LD_INT 4
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 25
18949: PUSH
18950: LD_INT 2
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PPUSH
18961: CALL_OW 69
18965: PPUSH
18966: LD_INT 30
18968: PPUSH
18969: LD_INT 30
18971: PPUSH
18972: LD_INT 49
18974: PPUSH
18975: LD_INT 1
18977: PPUSH
18978: CALL_OW 145
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 55 , 56 , 4 ) ;
18982: LD_INT 22
18984: PUSH
18985: LD_INT 4
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 25
18994: PUSH
18995: LD_INT 2
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PPUSH
19006: CALL_OW 69
19010: PPUSH
19011: LD_INT 32
19013: PPUSH
19014: LD_INT 55
19016: PPUSH
19017: LD_INT 56
19019: PPUSH
19020: LD_INT 4
19022: PPUSH
19023: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 63 , 71 , 4 ) ;
19027: LD_INT 22
19029: PUSH
19030: LD_INT 4
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 25
19039: PUSH
19040: LD_INT 2
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PPUSH
19051: CALL_OW 69
19055: PPUSH
19056: LD_INT 32
19058: PPUSH
19059: LD_INT 63
19061: PPUSH
19062: LD_INT 71
19064: PPUSH
19065: LD_INT 4
19067: PPUSH
19068: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_power , 40 , 72 , 4 ) ;
19072: LD_INT 22
19074: PUSH
19075: LD_INT 4
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 25
19084: PUSH
19085: LD_INT 2
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PPUSH
19096: CALL_OW 69
19100: PPUSH
19101: LD_INT 28
19103: PPUSH
19104: LD_INT 40
19106: PPUSH
19107: LD_INT 72
19109: PPUSH
19110: LD_INT 4
19112: PPUSH
19113: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_solar_power , 45 , 73 , 4 ) ;
19117: LD_INT 22
19119: PUSH
19120: LD_INT 4
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 25
19129: PUSH
19130: LD_INT 2
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PPUSH
19141: CALL_OW 69
19145: PPUSH
19146: LD_INT 27
19148: PPUSH
19149: LD_INT 45
19151: PPUSH
19152: LD_INT 73
19154: PPUSH
19155: LD_INT 4
19157: PPUSH
19158: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_rocket , 37 , 50 , 2 ) ;
19162: LD_INT 22
19164: PUSH
19165: LD_INT 4
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 25
19174: PUSH
19175: LD_INT 2
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PPUSH
19186: CALL_OW 69
19190: PPUSH
19191: LD_INT 18
19193: PPUSH
19194: LD_INT 37
19196: PPUSH
19197: LD_INT 50
19199: PPUSH
19200: LD_INT 2
19202: PPUSH
19203: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_gun , 41 , 51 , 3 ) ;
19207: LD_INT 22
19209: PUSH
19210: LD_INT 4
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 25
19219: PUSH
19220: LD_INT 2
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PPUSH
19231: CALL_OW 69
19235: PPUSH
19236: LD_INT 17
19238: PPUSH
19239: LD_INT 41
19241: PPUSH
19242: LD_INT 51
19244: PPUSH
19245: LD_INT 3
19247: PPUSH
19248: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_siberium , 38 , 54 , 1 ) ;
19252: LD_INT 22
19254: PUSH
19255: LD_INT 4
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 25
19264: PUSH
19265: LD_INT 2
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PPUSH
19276: CALL_OW 69
19280: PPUSH
19281: LD_INT 21
19283: PPUSH
19284: LD_INT 38
19286: PPUSH
19287: LD_INT 54
19289: PPUSH
19290: LD_INT 1
19292: PPUSH
19293: CALL_OW 205
// end ;
19297: PPOPN 2
19299: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) and powellUnloadCargo = 1 do
19300: LD_INT 235
19302: PPUSH
19303: LD_INT 10
19305: PPUSH
19306: CALL_OW 308
19310: PUSH
19311: LD_EXP 70
19315: PUSH
19316: LD_INT 1
19318: EQUAL
19319: AND
19320: IFFALSE 19344
19322: GO 19324
19324: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
19325: LD_INT 235
19327: PPUSH
19328: CALL_OW 313
19332: PPUSH
19333: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
19337: LD_INT 84
19339: PPUSH
19340: CALL_OW 146
// end ;
19344: END
// every 0 0$1 trigger legionAI = 1 do
19345: LD_EXP 84
19349: PUSH
19350: LD_INT 1
19352: EQUAL
19353: IFFALSE 19416
19355: GO 19357
19357: DISABLE
// begin enable ;
19358: ENABLE
// RepairAndRebuildBase ( 8 , ArDep2 , LegionBaseArea , legionDestroyedBuilds ) ;
19359: LD_INT 8
19361: PPUSH
19362: LD_INT 99
19364: PPUSH
19365: LD_INT 11
19367: PPUSH
19368: LD_EXP 93
19372: PPUSH
19373: CALL 9643 0 4
// HealUnitInBase ( 8 , LegionHealArea , LegionBaseArea , [ ArLab1 ] ) ;
19377: LD_INT 8
19379: PPUSH
19380: LD_INT 20
19382: PPUSH
19383: LD_INT 11
19385: PPUSH
19386: LD_INT 252
19388: PUSH
19389: EMPTY
19390: LIST
19391: PPUSH
19392: CALL 10052 0 4
// AttackNearBuildings ( 8 , 1 ) ;
19396: LD_INT 8
19398: PPUSH
19399: LD_INT 1
19401: PPUSH
19402: CALL 11461 0 2
// EnterBunkerOrBarrack ( 8 , LegionBaseArea ) ;
19406: LD_INT 8
19408: PPUSH
19409: LD_INT 11
19411: PPUSH
19412: CALL 11033 0 2
// end ;
19416: END
// every 3 3$0 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ ] and IsOk ( ArFact ) and GetSide ( ArFact ) = 8 do
19417: LD_EXP 84
19421: PUSH
19422: LD_INT 1
19424: EQUAL
19425: PUSH
19426: LD_EXP 101
19430: PUSH
19431: LD_INT 1
19433: GREATEREQUAL
19434: AND
19435: PUSH
19436: LD_EXP 55
19440: PUSH
19441: EMPTY
19442: EQUAL
19443: AND
19444: PUSH
19445: LD_INT 117
19447: PPUSH
19448: CALL_OW 302
19452: AND
19453: PUSH
19454: LD_INT 117
19456: PPUSH
19457: CALL_OW 255
19461: PUSH
19462: LD_INT 8
19464: EQUAL
19465: AND
19466: IFFALSE 19529
19468: GO 19470
19470: DISABLE
// begin enable ;
19471: ENABLE
// BuildingVehicle ( 8 , ArFact , [ 5 , 6 , 7 ] [ Difficulty ] , [ 27 , 28 , 25 , 29 ] , 3 , 2 , 14 ) ;
19472: LD_INT 8
19474: PPUSH
19475: LD_INT 117
19477: PPUSH
19478: LD_INT 5
19480: PUSH
19481: LD_INT 6
19483: PUSH
19484: LD_INT 7
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: LIST
19491: PUSH
19492: LD_OWVAR 67
19496: ARRAY
19497: PPUSH
19498: LD_INT 27
19500: PUSH
19501: LD_INT 28
19503: PUSH
19504: LD_INT 25
19506: PUSH
19507: LD_INT 29
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: PPUSH
19516: LD_INT 3
19518: PPUSH
19519: LD_INT 2
19521: PPUSH
19522: LD_INT 14
19524: PPUSH
19525: CALL 11691 0 7
// end ;
19529: END
// every 0 0$1 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ 5 , 6 , 7 ] [ Difficulty ] do
19530: LD_EXP 84
19534: PUSH
19535: LD_INT 1
19537: EQUAL
19538: PUSH
19539: LD_EXP 101
19543: PUSH
19544: LD_INT 1
19546: GREATEREQUAL
19547: AND
19548: PUSH
19549: LD_EXP 55
19553: PUSH
19554: LD_INT 5
19556: PUSH
19557: LD_INT 6
19559: PUSH
19560: LD_INT 7
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: PUSH
19568: LD_OWVAR 67
19572: ARRAY
19573: EQUAL
19574: AND
19575: IFFALSE 19593
19577: GO 19579
19579: DISABLE
// begin enable ;
19580: ENABLE
// AttackVehicles ( LegionTarget , 1 ) ;
19581: LD_EXP 87
19585: PPUSH
19586: LD_INT 1
19588: PPUSH
19589: CALL 11765 0 2
// end ;
19593: END
// every 0 0$1 do
19594: GO 19596
19596: DISABLE
// begin enable ;
19597: ENABLE
// TimeLapsersAI ( 6 , 1 ) ;
19598: LD_INT 6
19600: PPUSH
19601: LD_INT 1
19603: PPUSH
19604: CALL 12700 0 2
// end ;
19608: END
// every 0 0$1 trigger RussianAI = 1 do
19609: LD_EXP 86
19613: PUSH
19614: LD_INT 1
19616: EQUAL
19617: IFFALSE 19711
19619: GO 19621
19621: DISABLE
// begin enable ;
19622: ENABLE
// RepairAndRebuildBase ( 3 , RuDep1 , RussianBaseArea , russianDestroyedBuilds ) ;
19623: LD_INT 3
19625: PPUSH
19626: LD_INT 26
19628: PPUSH
19629: LD_INT 21
19631: PPUSH
19632: LD_EXP 94
19636: PPUSH
19637: CALL 9643 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBaseArea , [ RusLab1 , RusLab2 ] ) ;
19641: LD_INT 3
19643: PPUSH
19644: LD_INT 22
19646: PPUSH
19647: LD_INT 21
19649: PPUSH
19650: LD_INT 2
19652: PUSH
19653: LD_INT 1
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PPUSH
19660: CALL 10052 0 4
// AttackNearBuildings ( 3 , 1 ) ;
19664: LD_INT 3
19666: PPUSH
19667: LD_INT 1
19669: PPUSH
19670: CALL 11461 0 2
// TimeLapsersAI ( 3 , RussianTarget ) ;
19674: LD_INT 3
19676: PPUSH
19677: LD_EXP 89
19681: PPUSH
19682: CALL 12700 0 2
// EnterBunkerOrBarrack ( 3 , RussianBaseArea ) ;
19686: LD_INT 3
19688: PPUSH
19689: LD_INT 21
19691: PPUSH
19692: CALL 11033 0 2
// CraneRepairBuild ( 3 , RussianBaseArea , russianDestroyedBuilds ) ;
19696: LD_INT 3
19698: PPUSH
19699: LD_INT 21
19701: PPUSH
19702: LD_EXP 94
19706: PPUSH
19707: CALL 10778 0 3
// end ;
19711: END
// every 3 3$0 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ ] and IsOk ( RusFact2 ) and GetSide ( RusFact2 ) = 3 and IsOk ( RusFact1 ) and GetSide ( RusFact1 ) = 3 do
19712: LD_EXP 86
19716: PUSH
19717: LD_INT 1
19719: EQUAL
19720: PUSH
19721: LD_EXP 101
19725: PUSH
19726: LD_INT 3
19728: GREATEREQUAL
19729: AND
19730: PUSH
19731: LD_EXP 61
19735: PUSH
19736: EMPTY
19737: EQUAL
19738: AND
19739: PUSH
19740: LD_INT 10
19742: PPUSH
19743: CALL_OW 302
19747: AND
19748: PUSH
19749: LD_INT 10
19751: PPUSH
19752: CALL_OW 255
19756: PUSH
19757: LD_INT 3
19759: EQUAL
19760: AND
19761: PUSH
19762: LD_INT 4
19764: PPUSH
19765: CALL_OW 302
19769: AND
19770: PUSH
19771: LD_INT 4
19773: PPUSH
19774: CALL_OW 255
19778: PUSH
19779: LD_INT 3
19781: EQUAL
19782: AND
19783: IFFALSE 19903
19785: GO 19787
19787: DISABLE
// begin enable ;
19788: ENABLE
// BuildingVehicle ( 3 , RusFact1 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19789: LD_INT 3
19791: PPUSH
19792: LD_INT 4
19794: PPUSH
19795: LD_INT 4
19797: PUSH
19798: LD_INT 5
19800: PUSH
19801: LD_INT 6
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: LIST
19808: PUSH
19809: LD_OWVAR 67
19813: ARRAY
19814: PPUSH
19815: LD_INT 45
19817: PUSH
19818: LD_INT 46
19820: PUSH
19821: LD_INT 47
19823: PUSH
19824: LD_INT 49
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: PPUSH
19833: LD_INT 3
19835: PPUSH
19836: LD_INT 3
19838: PPUSH
19839: LD_INT 24
19841: PPUSH
19842: CALL 11691 0 7
// BuildingVehicle ( 3 , RusFact2 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19846: LD_INT 3
19848: PPUSH
19849: LD_INT 10
19851: PPUSH
19852: LD_INT 4
19854: PUSH
19855: LD_INT 5
19857: PUSH
19858: LD_INT 6
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: LIST
19865: PUSH
19866: LD_OWVAR 67
19870: ARRAY
19871: PPUSH
19872: LD_INT 45
19874: PUSH
19875: LD_INT 46
19877: PUSH
19878: LD_INT 47
19880: PUSH
19881: LD_INT 49
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: PPUSH
19890: LD_INT 3
19892: PPUSH
19893: LD_INT 3
19895: PPUSH
19896: LD_INT 24
19898: PPUSH
19899: CALL 11691 0 7
// end ;
19903: END
// every 0 0$1 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ 8 , 10 , 12 ] [ Difficulty ] do
19904: LD_EXP 86
19908: PUSH
19909: LD_INT 1
19911: EQUAL
19912: PUSH
19913: LD_EXP 101
19917: PUSH
19918: LD_INT 3
19920: GREATEREQUAL
19921: AND
19922: PUSH
19923: LD_EXP 61
19927: PUSH
19928: LD_INT 8
19930: PUSH
19931: LD_INT 10
19933: PUSH
19934: LD_INT 12
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: LIST
19941: PUSH
19942: LD_OWVAR 67
19946: ARRAY
19947: EQUAL
19948: AND
19949: IFFALSE 20061
19951: GO 19953
19953: DISABLE
// begin enable ;
19954: ENABLE
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 48 ] ] , [ f_not , [ f_hastask ] ] ] ) , [ rutp1 , rutp2 ] [ Rand ( 1 , 2 ) ] ) ;
19955: LD_INT 22
19957: PUSH
19958: LD_INT 3
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 21
19967: PUSH
19968: LD_INT 2
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 3
19977: PUSH
19978: LD_INT 34
19980: PUSH
19981: LD_INT 48
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 3
19994: PUSH
19995: LD_INT 60
19997: PUSH
19998: EMPTY
19999: LIST
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: PPUSH
20011: CALL_OW 69
20015: PPUSH
20016: LD_INT 24
20018: PUSH
20019: LD_INT 25
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 1
20028: PPUSH
20029: LD_INT 2
20031: PPUSH
20032: CALL_OW 12
20036: ARRAY
20037: PPUSH
20038: CALL_OW 120
// wait ( 0 0$20 ) ;
20042: LD_INT 700
20044: PPUSH
20045: CALL_OW 67
// AttackVehicles ( RussianTarget , 2 ) ;
20049: LD_EXP 89
20053: PPUSH
20054: LD_INT 2
20056: PPUSH
20057: CALL 11765 0 2
// end ;
20061: END
// every 0 0$1 trigger AllianceAI = 1 do
20062: LD_EXP 85
20066: PUSH
20067: LD_INT 1
20069: EQUAL
20070: IFFALSE 20153
20072: GO 20074
20074: DISABLE
// begin enable ;
20075: ENABLE
// RepairAndRebuildBase ( 7 , AllDep , AllianceBaseArea , allianceDestroyedBuilds ) ;
20076: LD_INT 7
20078: PPUSH
20079: LD_INT 45
20081: PPUSH
20082: LD_INT 23
20084: PPUSH
20085: LD_EXP 95
20089: PPUSH
20090: CALL 9643 0 4
// HealUnitInBase ( 7 , AllianceHealArea , AllianceBaseArea , [ AllLabA , AllLabR1 , AllLabR2 ] ) ;
20094: LD_INT 7
20096: PPUSH
20097: LD_INT 24
20099: PPUSH
20100: LD_INT 23
20102: PPUSH
20103: LD_INT 46
20105: PUSH
20106: LD_INT 39
20108: PUSH
20109: LD_INT 133
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: LIST
20116: PPUSH
20117: CALL 10052 0 4
// AttackNearBuildings ( 7 , 1 ) ;
20121: LD_INT 7
20123: PPUSH
20124: LD_INT 1
20126: PPUSH
20127: CALL 11461 0 2
// TimeLapsersAI ( 7 , AllianceTarget ) ;
20131: LD_INT 7
20133: PPUSH
20134: LD_EXP 88
20138: PPUSH
20139: CALL 12700 0 2
// EnterBunkerOrBarrack ( 7 , AllianceBaseArea ) ;
20143: LD_INT 7
20145: PPUSH
20146: LD_INT 23
20148: PPUSH
20149: CALL 11033 0 2
// end ;
20153: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ ] and IsOk ( Allfab1 ) and GetSide ( Allfab1 ) = 7 and IsOk ( Allfab2 ) and GetSide ( Allfab2 ) = 7 do
20154: LD_EXP 85
20158: PUSH
20159: LD_INT 1
20161: EQUAL
20162: PUSH
20163: LD_EXP 101
20167: PUSH
20168: LD_INT 4
20170: GREATEREQUAL
20171: AND
20172: PUSH
20173: LD_EXP 62
20177: PUSH
20178: EMPTY
20179: EQUAL
20180: AND
20181: PUSH
20182: LD_INT 156
20184: PPUSH
20185: CALL_OW 302
20189: AND
20190: PUSH
20191: LD_INT 156
20193: PPUSH
20194: CALL_OW 255
20198: PUSH
20199: LD_INT 7
20201: EQUAL
20202: AND
20203: PUSH
20204: LD_INT 162
20206: PPUSH
20207: CALL_OW 302
20211: AND
20212: PUSH
20213: LD_INT 162
20215: PPUSH
20216: CALL_OW 255
20220: PUSH
20221: LD_INT 7
20223: EQUAL
20224: AND
20225: IFFALSE 20341
20227: GO 20229
20229: DISABLE
// begin enable ;
20230: ENABLE
// BuildingVehicle ( 3 , Allfab1 , [ 3 , 3 , 4 ] [ Difficulty ] , [ 9 , 10 , 7 ] , 3 , 2 , 5 ) ;
20231: LD_INT 3
20233: PPUSH
20234: LD_INT 156
20236: PPUSH
20237: LD_INT 3
20239: PUSH
20240: LD_INT 3
20242: PUSH
20243: LD_INT 4
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: LIST
20250: PUSH
20251: LD_OWVAR 67
20255: ARRAY
20256: PPUSH
20257: LD_INT 9
20259: PUSH
20260: LD_INT 10
20262: PUSH
20263: LD_INT 7
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: LIST
20270: PPUSH
20271: LD_INT 3
20273: PPUSH
20274: LD_INT 2
20276: PPUSH
20277: LD_INT 5
20279: PPUSH
20280: CALL 11691 0 7
// BuildingVehicle ( 3 , Allfab2 , [ 2 , 2 , 3 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
20284: LD_INT 3
20286: PPUSH
20287: LD_INT 162
20289: PPUSH
20290: LD_INT 2
20292: PUSH
20293: LD_INT 2
20295: PUSH
20296: LD_INT 3
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: LIST
20303: PUSH
20304: LD_OWVAR 67
20308: ARRAY
20309: PPUSH
20310: LD_INT 45
20312: PUSH
20313: LD_INT 46
20315: PUSH
20316: LD_INT 47
20318: PUSH
20319: LD_INT 49
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: PPUSH
20328: LD_INT 3
20330: PPUSH
20331: LD_INT 3
20333: PPUSH
20334: LD_INT 24
20336: PPUSH
20337: CALL 11691 0 7
// end ;
20341: END
// every 0 0$1 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ 5 , 5 , 7 ] [ Difficulty ] do var i ;
20342: LD_EXP 85
20346: PUSH
20347: LD_INT 1
20349: EQUAL
20350: PUSH
20351: LD_EXP 101
20355: PUSH
20356: LD_INT 4
20358: GREATEREQUAL
20359: AND
20360: PUSH
20361: LD_EXP 62
20365: PUSH
20366: LD_INT 5
20368: PUSH
20369: LD_INT 5
20371: PUSH
20372: LD_INT 7
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: LIST
20379: PUSH
20380: LD_OWVAR 67
20384: ARRAY
20385: EQUAL
20386: AND
20387: IFFALSE 20446
20389: GO 20391
20391: DISABLE
20392: LD_INT 0
20394: PPUSH
// begin for i in AllianceVehicles do
20395: LD_ADDR_VAR 0 1
20399: PUSH
20400: LD_EXP 62
20404: PUSH
20405: FOR_IN
20406: IFFALSE 20431
// TeleportUnit ( i , 117 , 112 , 10 , true ) ;
20408: LD_VAR 0 1
20412: PPUSH
20413: LD_INT 117
20415: PPUSH
20416: LD_INT 112
20418: PPUSH
20419: LD_INT 10
20421: PPUSH
20422: LD_INT 1
20424: PPUSH
20425: CALL_OW 483
20429: GO 20405
20431: POP
20432: POP
// AttackVehicles ( AllianceTarget , 3 ) ;
20433: LD_EXP 88
20437: PPUSH
20438: LD_INT 3
20440: PPUSH
20441: CALL 11765 0 2
// enable ;
20445: ENABLE
// end ;
20446: PPOPN 1
20448: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 do var tmp ;
20449: LD_EXP 85
20453: PUSH
20454: LD_INT 1
20456: EQUAL
20457: PUSH
20458: LD_EXP 101
20462: PUSH
20463: LD_INT 4
20465: GREATEREQUAL
20466: AND
20467: IFFALSE 20648
20469: GO 20471
20471: DISABLE
20472: LD_INT 0
20474: PPUSH
// begin enable ;
20475: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_btype , 21 ] ] ] ) ;
20476: LD_ADDR_VAR 0 1
20480: PUSH
20481: LD_INT 22
20483: PUSH
20484: LD_INT 1
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 21
20493: PUSH
20494: LD_INT 3
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 2
20503: PUSH
20504: LD_INT 30
20506: PUSH
20507: LD_INT 30
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 30
20516: PUSH
20517: LD_INT 28
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 30
20526: PUSH
20527: LD_INT 21
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: LIST
20544: PPUSH
20545: CALL_OW 69
20549: ST_TO_ADDR
// tmp = tmp ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] ] ) ;
20550: LD_ADDR_VAR 0 1
20554: PUSH
20555: LD_VAR 0 1
20559: PUSH
20560: LD_INT 22
20562: PUSH
20563: LD_INT 1
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 21
20572: PUSH
20573: LD_INT 2
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 32
20582: PUSH
20583: LD_INT 3
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: LIST
20594: PPUSH
20595: CALL_OW 69
20599: ADD
20600: ST_TO_ADDR
// if tmp = [ ] then
20601: LD_VAR 0 1
20605: PUSH
20606: EMPTY
20607: EQUAL
20608: IFFALSE 20612
// exit ;
20610: GO 20648
// if tmp > 0 then
20612: LD_VAR 0 1
20616: PUSH
20617: LD_INT 0
20619: GREATER
20620: IFFALSE 20648
// SetLives ( tmp [ Rand ( 1 , tmp ) ] , 0 ) ;
20622: LD_VAR 0 1
20626: PUSH
20627: LD_INT 1
20629: PPUSH
20630: LD_VAR 0 1
20634: PPUSH
20635: CALL_OW 12
20639: ARRAY
20640: PPUSH
20641: LD_INT 0
20643: PPUSH
20644: CALL_OW 234
// end ;
20648: PPOPN 1
20650: END
// every 0 0$1 trigger LegionAI = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
20651: LD_EXP 84
20655: PUSH
20656: LD_INT 1
20658: EQUAL
20659: PUSH
20660: LD_INT 22
20662: PUSH
20663: LD_INT 8
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 21
20672: PUSH
20673: LD_INT 2
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 3
20682: PUSH
20683: LD_INT 61
20685: PUSH
20686: EMPTY
20687: LIST
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: LIST
20697: PPUSH
20698: CALL_OW 69
20702: PUSH
20703: LD_INT 0
20705: GREATER
20706: AND
20707: IFFALSE 20789
20709: GO 20711
20711: DISABLE
20712: LD_INT 0
20714: PPUSH
// begin enable ;
20715: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
20716: LD_ADDR_VAR 0 1
20720: PUSH
20721: LD_INT 22
20723: PUSH
20724: LD_INT 8
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 21
20733: PUSH
20734: LD_INT 2
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 3
20743: PUSH
20744: LD_INT 61
20746: PUSH
20747: EMPTY
20748: LIST
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: PPUSH
20759: CALL_OW 69
20763: PUSH
20764: FOR_IN
20765: IFFALSE 20787
// ComLinkTo ( i , arControler [ 1 ] ) ;
20767: LD_VAR 0 1
20771: PPUSH
20772: LD_EXP 56
20776: PUSH
20777: LD_INT 1
20779: ARRAY
20780: PPUSH
20781: CALL_OW 135
20785: GO 20764
20787: POP
20788: POP
// end ;
20789: PPOPN 1
20791: END
// every 0 0$1 trigger AllianceAI = 1 and FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
20792: LD_EXP 85
20796: PUSH
20797: LD_INT 1
20799: EQUAL
20800: PUSH
20801: LD_INT 22
20803: PUSH
20804: LD_INT 7
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 21
20813: PUSH
20814: LD_INT 2
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 3
20823: PUSH
20824: LD_INT 61
20826: PUSH
20827: EMPTY
20828: LIST
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: PPUSH
20839: CALL_OW 69
20843: PUSH
20844: LD_INT 0
20846: GREATER
20847: AND
20848: IFFALSE 20938
20850: GO 20852
20852: DISABLE
20853: LD_INT 0
20855: PPUSH
// begin enable ;
20856: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
20857: LD_ADDR_VAR 0 1
20861: PUSH
20862: LD_INT 22
20864: PUSH
20865: LD_INT 7
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 21
20874: PUSH
20875: LD_INT 2
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 3
20884: PUSH
20885: LD_INT 61
20887: PUSH
20888: EMPTY
20889: LIST
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: LIST
20899: PPUSH
20900: CALL_OW 69
20904: PUSH
20905: FOR_IN
20906: IFFALSE 20936
// ComLinkTo ( i , allianceControler [ rand ( 1 , 3 ) ] ) ;
20908: LD_VAR 0 1
20912: PPUSH
20913: LD_EXP 63
20917: PUSH
20918: LD_INT 1
20920: PPUSH
20921: LD_INT 3
20923: PPUSH
20924: CALL_OW 12
20928: ARRAY
20929: PPUSH
20930: CALL_OW 135
20934: GO 20905
20936: POP
20937: POP
// end ; end_of_file
20938: PPOPN 1
20940: END
// every 0 0$1 trigger timerStatus = 1 do
20941: LD_EXP 96
20945: PUSH
20946: LD_INT 1
20948: EQUAL
20949: IFFALSE 20986
20951: GO 20953
20953: DISABLE
// begin enable ;
20954: ENABLE
// display_strings = [ #Am15-1 , timeAction ] ;
20955: LD_ADDR_OWVAR 47
20959: PUSH
20960: LD_STRING #Am15-1
20962: PUSH
20963: LD_EXP 97
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: ST_TO_ADDR
// timeAction = timeAction + 0 0$01 ;
20972: LD_ADDR_EXP 97
20976: PUSH
20977: LD_EXP 97
20981: PUSH
20982: LD_INT 35
20984: PLUS
20985: ST_TO_ADDR
// end ; end_of_file
20986: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 and russianEscape = 0 do
20987: LD_EXP 72
20991: PUSH
20992: LD_INT 1
20994: EQUAL
20995: PUSH
20996: LD_EXP 101
21000: PUSH
21001: LD_INT 0
21003: EQUAL
21004: AND
21005: PUSH
21006: LD_EXP 90
21010: PUSH
21011: LD_INT 0
21013: EQUAL
21014: AND
21015: IFFALSE 21075
21017: GO 21019
21019: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
21020: LD_INT 2
21022: PPUSH
21023: LD_INT 6
21025: PPUSH
21026: LD_INT 2
21028: PPUSH
21029: LD_INT 4
21031: PPUSH
21032: CALL_OW 12
21036: PPUSH
21037: LD_INT 10
21039: PPUSH
21040: LD_INT 3
21042: PPUSH
21043: LD_INT 3
21045: PPUSH
21046: LD_INT 3
21048: PPUSH
21049: LD_INT 42
21051: PUSH
21052: LD_INT 43
21054: PUSH
21055: LD_INT 44
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: LIST
21062: PPUSH
21063: EMPTY
21064: PPUSH
21065: EMPTY
21066: PPUSH
21067: LD_INT 1
21069: PPUSH
21070: CALL 7845 0 11
// enable ;
21074: ENABLE
// end ;
21075: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 1 and russianEscape = 0 do
21076: LD_EXP 72
21080: PUSH
21081: LD_INT 1
21083: EQUAL
21084: PUSH
21085: LD_EXP 101
21089: PUSH
21090: LD_INT 1
21092: EQUAL
21093: AND
21094: PUSH
21095: LD_EXP 90
21099: PUSH
21100: LD_INT 0
21102: EQUAL
21103: AND
21104: IFFALSE 21164
21106: GO 21108
21108: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 6 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
21109: LD_INT 2
21111: PPUSH
21112: LD_INT 6
21114: PPUSH
21115: LD_INT 4
21117: PPUSH
21118: LD_INT 6
21120: PPUSH
21121: CALL_OW 12
21125: PPUSH
21126: LD_INT 10
21128: PPUSH
21129: LD_INT 3
21131: PPUSH
21132: LD_INT 3
21134: PPUSH
21135: LD_INT 3
21137: PPUSH
21138: LD_INT 44
21140: PUSH
21141: LD_INT 45
21143: PUSH
21144: LD_INT 46
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: LIST
21151: PPUSH
21152: EMPTY
21153: PPUSH
21154: EMPTY
21155: PPUSH
21156: LD_INT 1
21158: PPUSH
21159: CALL 7845 0 11
// enable ;
21163: ENABLE
// end ;
21164: END
// every 3 3$30 trigger startAttacks = 1 and missionStage = 3 and russianEscape = 0 do
21165: LD_EXP 72
21169: PUSH
21170: LD_INT 1
21172: EQUAL
21173: PUSH
21174: LD_EXP 101
21178: PUSH
21179: LD_INT 3
21181: EQUAL
21182: AND
21183: PUSH
21184: LD_EXP 90
21188: PUSH
21189: LD_INT 0
21191: EQUAL
21192: AND
21193: IFFALSE 21257
21195: GO 21197
21197: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 , 47 ] , [ ] , [ ] , 1 ) ;
21198: LD_INT 2
21200: PPUSH
21201: LD_INT 6
21203: PPUSH
21204: LD_INT 4
21206: PPUSH
21207: LD_INT 8
21209: PPUSH
21210: CALL_OW 12
21214: PPUSH
21215: LD_INT 10
21217: PPUSH
21218: LD_INT 3
21220: PPUSH
21221: LD_INT 3
21223: PPUSH
21224: LD_INT 3
21226: PPUSH
21227: LD_INT 44
21229: PUSH
21230: LD_INT 45
21232: PUSH
21233: LD_INT 46
21235: PUSH
21236: LD_INT 47
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: PPUSH
21245: EMPTY
21246: PPUSH
21247: EMPTY
21248: PPUSH
21249: LD_INT 1
21251: PPUSH
21252: CALL 7845 0 11
// enable ;
21256: ENABLE
// end ;
21257: END
// every 5 5$30 trigger startAttacks = 1 and missionStage >= 4 and russianEscape = 0 do
21258: LD_EXP 72
21262: PUSH
21263: LD_INT 1
21265: EQUAL
21266: PUSH
21267: LD_EXP 101
21271: PUSH
21272: LD_INT 4
21274: GREATEREQUAL
21275: AND
21276: PUSH
21277: LD_EXP 90
21281: PUSH
21282: LD_INT 0
21284: EQUAL
21285: AND
21286: IFFALSE 21346
21288: GO 21290
21290: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
21291: LD_INT 2
21293: PPUSH
21294: LD_INT 6
21296: PPUSH
21297: LD_INT 4
21299: PPUSH
21300: LD_INT 8
21302: PPUSH
21303: CALL_OW 12
21307: PPUSH
21308: LD_INT 10
21310: PPUSH
21311: LD_INT 3
21313: PPUSH
21314: LD_INT 3
21316: PPUSH
21317: LD_INT 3
21319: PPUSH
21320: LD_INT 46
21322: PUSH
21323: LD_INT 47
21325: PUSH
21326: LD_INT 49
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: PPUSH
21334: EMPTY
21335: PPUSH
21336: EMPTY
21337: PPUSH
21338: LD_INT 1
21340: PPUSH
21341: CALL 7845 0 11
// enable ;
21345: ENABLE
// end ; end_of_file
21346: END
// every 1 do var i , dec1 , options , people ;
21347: GO 21349
21349: DISABLE
21350: LD_INT 0
21352: PPUSH
21353: PPUSH
21354: PPUSH
21355: PPUSH
// begin TeleportExit ( rutp1 , 92 , 172 ) ;
21356: LD_INT 24
21358: PPUSH
21359: LD_INT 92
21361: PPUSH
21362: LD_INT 172
21364: PPUSH
21365: CALL_OW 243
// TeleportExit ( rutp2 , 103 , 74 ) ;
21369: LD_INT 25
21371: PPUSH
21372: LD_INT 103
21374: PPUSH
21375: LD_INT 74
21377: PPUSH
21378: CALL_OW 243
// SetClass ( Simms , 4 ) ;
21382: LD_EXP 48
21386: PPUSH
21387: LD_INT 4
21389: PPUSH
21390: CALL_OW 336
// InGameOn ;
21394: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
21398: LD_EXP 24
21402: PUSH
21403: LD_EXP 25
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PPUSH
21412: LD_INT 60
21414: PPUSH
21415: LD_INT 75
21417: PPUSH
21418: CALL_OW 111
// if KappaStatus = 0 then
21422: LD_EXP 81
21426: PUSH
21427: LD_INT 0
21429: EQUAL
21430: IFFALSE 21719
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21432: LD_EXP 24
21436: PPUSH
21437: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21441: LD_EXP 1
21445: PPUSH
21446: LD_STRING D1T-JMM-1
21448: PPUSH
21449: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21453: LD_EXP 24
21457: PPUSH
21458: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21462: LD_EXP 17
21466: PPUSH
21467: LD_STRING D1T-Pow-1
21469: PPUSH
21470: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21474: LD_EXP 24
21478: PPUSH
21479: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21483: LD_EXP 1
21487: PPUSH
21488: LD_STRING D1T-JMM-2
21490: PPUSH
21491: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21495: LD_EXP 24
21499: PPUSH
21500: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21504: LD_EXP 17
21508: PPUSH
21509: LD_STRING D1T-Pow-2
21511: PPUSH
21512: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21516: LD_EXP 24
21520: PPUSH
21521: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
21525: LD_EXP 1
21529: PPUSH
21530: LD_STRING D1T-JMM-3
21532: PPUSH
21533: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21537: LD_EXP 24
21541: PPUSH
21542: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
21546: LD_EXP 17
21550: PPUSH
21551: LD_STRING D1T-Pow-3
21553: PPUSH
21554: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21558: LD_EXP 24
21562: PPUSH
21563: CALL_OW 87
// if not JMMGirlVeh = [ ] then
21567: LD_EXP 79
21571: PUSH
21572: EMPTY
21573: EQUAL
21574: NOT
21575: IFFALSE 21675
// begin if JMMGirl = 1 then
21577: LD_EXP 80
21581: PUSH
21582: LD_INT 1
21584: EQUAL
21585: IFFALSE 21599
// Say ( Joan , D1T-Joan-3 ) ;
21587: LD_EXP 2
21591: PPUSH
21592: LD_STRING D1T-Joan-3
21594: PPUSH
21595: CALL_OW 88
// if JMMGirl = 2 then
21599: LD_EXP 80
21603: PUSH
21604: LD_INT 2
21606: EQUAL
21607: IFFALSE 21621
// Say ( Lisa , D1T-Lisa-3 ) ;
21609: LD_EXP 4
21613: PPUSH
21614: LD_STRING D1T-Lisa-3
21616: PPUSH
21617: CALL_OW 88
// if JMMGirl = 3 then
21621: LD_EXP 80
21625: PUSH
21626: LD_INT 3
21628: EQUAL
21629: IFFALSE 21643
// Say ( Connie , D1T-Con-3 ) ;
21631: LD_EXP 16
21635: PPUSH
21636: LD_STRING D1T-Con-3
21638: PPUSH
21639: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21643: LD_EXP 24
21647: PPUSH
21648: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
21652: LD_EXP 17
21656: PPUSH
21657: LD_STRING D1T-Pow-4
21659: PPUSH
21660: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21664: LD_EXP 24
21668: PPUSH
21669: CALL_OW 87
// end else
21673: GO 21717
// begin Say ( JMM , D1T-JMM-4 ) ;
21675: LD_EXP 1
21679: PPUSH
21680: LD_STRING D1T-JMM-4
21682: PPUSH
21683: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21687: LD_EXP 24
21691: PPUSH
21692: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
21696: LD_EXP 17
21700: PPUSH
21701: LD_STRING D1T-Pow-5
21703: PPUSH
21704: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21708: LD_EXP 24
21712: PPUSH
21713: CALL_OW 87
// end ; end else
21717: GO 21803
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21719: LD_EXP 24
21723: PPUSH
21724: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21728: LD_EXP 1
21732: PPUSH
21733: LD_STRING D1T-JMM-1
21735: PPUSH
21736: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21740: LD_EXP 24
21744: PPUSH
21745: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21749: LD_EXP 17
21753: PPUSH
21754: LD_STRING D1T-Pow-1
21756: PPUSH
21757: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21761: LD_EXP 24
21765: PPUSH
21766: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21770: LD_EXP 1
21774: PPUSH
21775: LD_STRING D1T-JMM-2
21777: PPUSH
21778: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21782: LD_EXP 24
21786: PPUSH
21787: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21791: LD_EXP 17
21795: PPUSH
21796: LD_STRING D1T-Pow-2
21798: PPUSH
21799: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
21803: LD_INT 35
21805: PPUSH
21806: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
21810: LD_EXP 24
21814: PUSH
21815: LD_EXP 25
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PPUSH
21824: LD_INT 60
21826: PPUSH
21827: LD_INT 75
21829: PPUSH
21830: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
21834: LD_EXP 24
21838: PPUSH
21839: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 20 or not HasTask ( NewJMMVeh ) ;
21843: LD_EXP 24
21847: PPUSH
21848: LD_EXP 17
21852: PPUSH
21853: CALL_OW 296
21857: PUSH
21858: LD_INT 20
21860: LESS
21861: PUSH
21862: LD_EXP 24
21866: PPUSH
21867: CALL_OW 314
21871: NOT
21872: OR
21873: IFFALSE 21803
// ComExitVehicle ( JMM ) ;
21875: LD_EXP 1
21879: PPUSH
21880: CALL_OW 121
// repeat wait ( 0 0$1 ) ;
21884: LD_INT 35
21886: PPUSH
21887: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
21891: LD_EXP 1
21895: PPUSH
21896: LD_EXP 17
21900: PPUSH
21901: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
21905: LD_EXP 1
21909: PPUSH
21910: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
21914: LD_EXP 1
21918: PPUSH
21919: LD_EXP 17
21923: PPUSH
21924: CALL_OW 296
21928: PUSH
21929: LD_INT 6
21931: LESS
21932: IFFALSE 21884
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
21934: LD_EXP 1
21938: PUSH
21939: LD_EXP 17
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PPUSH
21948: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
21952: LD_EXP 1
21956: PPUSH
21957: LD_EXP 17
21961: PPUSH
21962: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
21966: LD_EXP 17
21970: PPUSH
21971: LD_EXP 1
21975: PPUSH
21976: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
21980: LD_EXP 1
21984: PPUSH
21985: LD_STRING D1-JMM-1
21987: PPUSH
21988: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
21992: LD_EXP 17
21996: PPUSH
21997: LD_STRING D1-Pow-1
21999: PPUSH
22000: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
22004: LD_INT 1
22006: PPUSH
22007: LD_INT 3
22009: PPUSH
22010: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
22014: LD_INT 1
22016: PPUSH
22017: LD_INT 4
22019: PPUSH
22020: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
22024: LD_INT 1
22026: PPUSH
22027: LD_INT 5
22029: PPUSH
22030: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
22034: LD_INT 171
22036: PPUSH
22037: LD_INT 81
22039: PPUSH
22040: CALL_OW 84
// wait ( 0 0$4 ) ;
22044: LD_INT 140
22046: PPUSH
22047: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
22051: LD_INT 162
22053: PPUSH
22054: LD_INT 36
22056: PPUSH
22057: CALL_OW 84
// wait ( 0 0$4 ) ;
22061: LD_INT 140
22063: PPUSH
22064: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
22068: LD_INT 75
22070: PPUSH
22071: LD_INT 16
22073: PPUSH
22074: CALL_OW 84
// wait ( 0 0$4 ) ;
22078: LD_INT 140
22080: PPUSH
22081: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
22085: LD_EXP 17
22089: PUSH
22090: LD_EXP 1
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PPUSH
22099: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
22103: LD_EXP 1
22107: PPUSH
22108: LD_STRING D1-JMM-2
22110: PPUSH
22111: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
22115: LD_EXP 17
22119: PPUSH
22120: LD_STRING D1-Pow-2
22122: PPUSH
22123: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
22127: LD_EXP 1
22131: PPUSH
22132: LD_STRING D1-JMM-3
22134: PPUSH
22135: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
22139: LD_EXP 17
22143: PPUSH
22144: LD_STRING D1-Pow-3
22146: PPUSH
22147: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
22151: LD_EXP 1
22155: PPUSH
22156: LD_STRING D1-JMM-4
22158: PPUSH
22159: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
22163: LD_EXP 17
22167: PPUSH
22168: LD_STRING D1-Pow-4
22170: PPUSH
22171: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
22175: LD_EXP 1
22179: PPUSH
22180: LD_STRING D1-JMM-5
22182: PPUSH
22183: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
22187: LD_EXP 17
22191: PPUSH
22192: LD_STRING D1-Pow-5
22194: PPUSH
22195: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
22199: LD_ADDR_VAR 0 3
22203: PUSH
22204: LD_INT 1
22206: PUSH
22207: LD_INT 2
22209: PUSH
22210: LD_INT 3
22212: PUSH
22213: LD_INT 4
22215: PUSH
22216: LD_INT 5
22218: PUSH
22219: LD_INT 6
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
22230: LD_ADDR_VAR 0 2
22234: PUSH
22235: LD_STRING Q1
22237: PPUSH
22238: LD_VAR 0 3
22242: PPUSH
22243: CALL_OW 98
22247: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
22248: LD_ADDR_VAR 0 2
22252: PUSH
22253: LD_STRING Q1
22255: PPUSH
22256: LD_VAR 0 3
22260: PPUSH
22261: CALL_OW 98
22265: ST_TO_ADDR
// options = options diff dec1 ;
22266: LD_ADDR_VAR 0 3
22270: PUSH
22271: LD_VAR 0 3
22275: PUSH
22276: LD_VAR 0 2
22280: DIFF
22281: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
22282: LD_VAR 0 2
22286: PPUSH
22287: LD_VAR 0 3
22291: PPUSH
22292: CALL 23826 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
22296: LD_VAR 0 2
22300: PUSH
22301: LD_INT 5
22303: PUSH
22304: LD_INT 6
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: IN
22311: PUSH
22312: LD_VAR 0 3
22316: PUSH
22317: LD_INT 2
22319: EQUAL
22320: OR
22321: IFFALSE 22248
// if not ( dec1 in [ 5 , 6 ] ) then
22323: LD_VAR 0 2
22327: PUSH
22328: LD_INT 5
22330: PUSH
22331: LD_INT 6
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: IN
22338: NOT
22339: IFFALSE 22382
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
22341: LD_ADDR_VAR 0 2
22345: PUSH
22346: LD_STRING Q1a
22348: PPUSH
22349: LD_INT 1
22351: PUSH
22352: LD_INT 2
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PPUSH
22359: CALL_OW 98
22363: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
22364: LD_VAR 0 2
22368: PUSH
22369: LD_INT 4
22371: PLUS
22372: PPUSH
22373: LD_VAR 0 3
22377: PPUSH
22378: CALL 23826 0 2
// end ; if not JMMGirlVeh = [ ] then
22382: LD_EXP 79
22386: PUSH
22387: EMPTY
22388: EQUAL
22389: NOT
22390: IFFALSE 22756
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
22392: LD_EXP 25
22396: PPUSH
22397: CALL_OW 313
22401: PPUSH
22402: CALL_OW 121
// wait ( 0 0$1 ) ;
22406: LD_INT 35
22408: PPUSH
22409: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22413: LD_INT 35
22415: PPUSH
22416: CALL_OW 67
// if JMMGirl = 1 then
22420: LD_EXP 80
22424: PUSH
22425: LD_INT 1
22427: EQUAL
22428: IFFALSE 22444
// ComMoveUnit ( JMM , Joan ) ;
22430: LD_EXP 1
22434: PPUSH
22435: LD_EXP 2
22439: PPUSH
22440: CALL_OW 112
// if JMMGirl = 2 then
22444: LD_EXP 80
22448: PUSH
22449: LD_INT 2
22451: EQUAL
22452: IFFALSE 22468
// ComMoveUnit ( JMM , Lisa ) ;
22454: LD_EXP 1
22458: PPUSH
22459: LD_EXP 4
22463: PPUSH
22464: CALL_OW 112
// if JMMGirl = 3 then
22468: LD_EXP 80
22472: PUSH
22473: LD_INT 3
22475: EQUAL
22476: IFFALSE 22492
// ComMoveUnit ( JMM , Connie ) ;
22478: LD_EXP 1
22482: PPUSH
22483: LD_EXP 16
22487: PPUSH
22488: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
22492: LD_EXP 1
22496: PPUSH
22497: LD_EXP 2
22501: PPUSH
22502: CALL_OW 296
22506: PUSH
22507: LD_INT 6
22509: LESS
22510: PUSH
22511: LD_EXP 1
22515: PPUSH
22516: LD_EXP 4
22520: PPUSH
22521: CALL_OW 296
22525: PUSH
22526: LD_INT 6
22528: LESS
22529: OR
22530: PUSH
22531: LD_EXP 1
22535: PPUSH
22536: LD_EXP 16
22540: PPUSH
22541: CALL_OW 296
22545: PUSH
22546: LD_INT 6
22548: LESS
22549: OR
22550: IFFALSE 22413
// CenterNowOnUnits ( JMM ) ;
22552: LD_EXP 1
22556: PPUSH
22557: CALL_OW 87
// case JMMGirl of 1 :
22561: LD_EXP 80
22565: PUSH
22566: LD_INT 1
22568: DOUBLE
22569: EQUAL
22570: IFTRUE 22574
22572: GO 22629
22574: POP
// begin ComTurnUnit ( JMM , Joan ) ;
22575: LD_EXP 1
22579: PPUSH
22580: LD_EXP 2
22584: PPUSH
22585: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
22589: LD_EXP 2
22593: PPUSH
22594: LD_EXP 1
22598: PPUSH
22599: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
22603: LD_EXP 2
22607: PPUSH
22608: LD_STRING D3W-Joan-1
22610: PPUSH
22611: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22615: LD_EXP 1
22619: PPUSH
22620: LD_STRING D3W-JMM-1
22622: PPUSH
22623: CALL_OW 88
// end ; 2 :
22627: GO 22756
22629: LD_INT 2
22631: DOUBLE
22632: EQUAL
22633: IFTRUE 22637
22635: GO 22692
22637: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
22638: LD_EXP 1
22642: PPUSH
22643: LD_EXP 4
22647: PPUSH
22648: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
22652: LD_EXP 4
22656: PPUSH
22657: LD_EXP 1
22661: PPUSH
22662: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
22666: LD_EXP 4
22670: PPUSH
22671: LD_STRING D3W-Lisa-1
22673: PPUSH
22674: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22678: LD_EXP 1
22682: PPUSH
22683: LD_STRING D3W-JMM-1
22685: PPUSH
22686: CALL_OW 88
// end ; 3 :
22690: GO 22756
22692: LD_INT 3
22694: DOUBLE
22695: EQUAL
22696: IFTRUE 22700
22698: GO 22755
22700: POP
// begin ComTurnUnit ( JMM , Connie ) ;
22701: LD_EXP 1
22705: PPUSH
22706: LD_EXP 16
22710: PPUSH
22711: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
22715: LD_EXP 16
22719: PPUSH
22720: LD_EXP 1
22724: PPUSH
22725: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
22729: LD_EXP 16
22733: PPUSH
22734: LD_STRING D3W-Con-1
22736: PPUSH
22737: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22741: LD_EXP 1
22745: PPUSH
22746: LD_STRING D3W-JMM-1
22748: PPUSH
22749: CALL_OW 88
// end ; end ;
22753: GO 22756
22755: POP
// end ; people = 0 ;
22756: LD_ADDR_VAR 0 4
22760: PUSH
22761: LD_INT 0
22763: ST_TO_ADDR
// if Lisa and people < 5 then
22764: LD_EXP 4
22768: PUSH
22769: LD_VAR 0 4
22773: PUSH
22774: LD_INT 5
22776: LESS
22777: AND
22778: IFFALSE 22810
// begin people = people + 1 ;
22780: LD_ADDR_VAR 0 4
22784: PUSH
22785: LD_VAR 0 4
22789: PUSH
22790: LD_INT 1
22792: PLUS
22793: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
22794: LD_ADDR_EXP 67
22798: PUSH
22799: LD_EXP 67
22803: PUSH
22804: LD_EXP 4
22808: ADD
22809: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
22810: LD_EXP 5
22814: PUSH
22815: LD_VAR 0 4
22819: PUSH
22820: LD_INT 5
22822: LESS
22823: AND
22824: IFFALSE 22856
// begin people = people + 1 ;
22826: LD_ADDR_VAR 0 4
22830: PUSH
22831: LD_VAR 0 4
22835: PUSH
22836: LD_INT 1
22838: PLUS
22839: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
22840: LD_ADDR_EXP 67
22844: PUSH
22845: LD_EXP 67
22849: PUSH
22850: LD_EXP 5
22854: ADD
22855: ST_TO_ADDR
// end ; if Bobby and people < 5 then
22856: LD_EXP 6
22860: PUSH
22861: LD_VAR 0 4
22865: PUSH
22866: LD_INT 5
22868: LESS
22869: AND
22870: IFFALSE 22902
// begin people = people + 1 ;
22872: LD_ADDR_VAR 0 4
22876: PUSH
22877: LD_VAR 0 4
22881: PUSH
22882: LD_INT 1
22884: PLUS
22885: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
22886: LD_ADDR_EXP 67
22890: PUSH
22891: LD_EXP 67
22895: PUSH
22896: LD_EXP 6
22900: ADD
22901: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
22902: LD_EXP 7
22906: PUSH
22907: LD_VAR 0 4
22911: PUSH
22912: LD_INT 5
22914: LESS
22915: AND
22916: IFFALSE 22948
// begin people = people + 1 ;
22918: LD_ADDR_VAR 0 4
22922: PUSH
22923: LD_VAR 0 4
22927: PUSH
22928: LD_INT 1
22930: PLUS
22931: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
22932: LD_ADDR_EXP 67
22936: PUSH
22937: LD_EXP 67
22941: PUSH
22942: LD_EXP 7
22946: ADD
22947: ST_TO_ADDR
// end ; if Denis and people < 5 then
22948: LD_EXP 8
22952: PUSH
22953: LD_VAR 0 4
22957: PUSH
22958: LD_INT 5
22960: LESS
22961: AND
22962: IFFALSE 22994
// begin people = people + 1 ;
22964: LD_ADDR_VAR 0 4
22968: PUSH
22969: LD_VAR 0 4
22973: PUSH
22974: LD_INT 1
22976: PLUS
22977: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
22978: LD_ADDR_EXP 67
22982: PUSH
22983: LD_EXP 67
22987: PUSH
22988: LD_EXP 8
22992: ADD
22993: ST_TO_ADDR
// end ; if Brown and people < 5 then
22994: LD_EXP 9
22998: PUSH
22999: LD_VAR 0 4
23003: PUSH
23004: LD_INT 5
23006: LESS
23007: AND
23008: IFFALSE 23040
// begin people = people + 1 ;
23010: LD_ADDR_VAR 0 4
23014: PUSH
23015: LD_VAR 0 4
23019: PUSH
23020: LD_INT 1
23022: PLUS
23023: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
23024: LD_ADDR_EXP 67
23028: PUSH
23029: LD_EXP 67
23033: PUSH
23034: LD_EXP 9
23038: ADD
23039: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
23040: LD_EXP 10
23044: PUSH
23045: LD_VAR 0 4
23049: PUSH
23050: LD_INT 5
23052: LESS
23053: AND
23054: IFFALSE 23086
// begin people = people + 1 ;
23056: LD_ADDR_VAR 0 4
23060: PUSH
23061: LD_VAR 0 4
23065: PUSH
23066: LD_INT 1
23068: PLUS
23069: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
23070: LD_ADDR_EXP 67
23074: PUSH
23075: LD_EXP 67
23079: PUSH
23080: LD_EXP 10
23084: ADD
23085: ST_TO_ADDR
// end ; if Houten and people < 5 then
23086: LD_EXP 11
23090: PUSH
23091: LD_VAR 0 4
23095: PUSH
23096: LD_INT 5
23098: LESS
23099: AND
23100: IFFALSE 23132
// begin people = people + 1 ;
23102: LD_ADDR_VAR 0 4
23106: PUSH
23107: LD_VAR 0 4
23111: PUSH
23112: LD_INT 1
23114: PLUS
23115: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
23116: LD_ADDR_EXP 67
23120: PUSH
23121: LD_EXP 67
23125: PUSH
23126: LD_EXP 11
23130: ADD
23131: ST_TO_ADDR
// end ; if Cornel and people < 5 then
23132: LD_EXP 12
23136: PUSH
23137: LD_VAR 0 4
23141: PUSH
23142: LD_INT 5
23144: LESS
23145: AND
23146: IFFALSE 23178
// begin people = people + 1 ;
23148: LD_ADDR_VAR 0 4
23152: PUSH
23153: LD_VAR 0 4
23157: PUSH
23158: LD_INT 1
23160: PLUS
23161: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
23162: LD_ADDR_EXP 67
23166: PUSH
23167: LD_EXP 67
23171: PUSH
23172: LD_EXP 12
23176: ADD
23177: ST_TO_ADDR
// end ; if Gary and people < 5 then
23178: LD_EXP 13
23182: PUSH
23183: LD_VAR 0 4
23187: PUSH
23188: LD_INT 5
23190: LESS
23191: AND
23192: IFFALSE 23224
// begin people = people + 1 ;
23194: LD_ADDR_VAR 0 4
23198: PUSH
23199: LD_VAR 0 4
23203: PUSH
23204: LD_INT 1
23206: PLUS
23207: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
23208: LD_ADDR_EXP 67
23212: PUSH
23213: LD_EXP 67
23217: PUSH
23218: LD_EXP 13
23222: ADD
23223: ST_TO_ADDR
// end ; if Frank and people < 5 then
23224: LD_EXP 14
23228: PUSH
23229: LD_VAR 0 4
23233: PUSH
23234: LD_INT 5
23236: LESS
23237: AND
23238: IFFALSE 23270
// begin people = people + 1 ;
23240: LD_ADDR_VAR 0 4
23244: PUSH
23245: LD_VAR 0 4
23249: PUSH
23250: LD_INT 1
23252: PLUS
23253: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
23254: LD_ADDR_EXP 67
23258: PUSH
23259: LD_EXP 67
23263: PUSH
23264: LD_EXP 14
23268: ADD
23269: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
23270: LD_EXP 15
23274: PUSH
23275: LD_VAR 0 4
23279: PUSH
23280: LD_INT 5
23282: LESS
23283: AND
23284: IFFALSE 23316
// begin people = people + 1 ;
23286: LD_ADDR_VAR 0 4
23290: PUSH
23291: LD_VAR 0 4
23295: PUSH
23296: LD_INT 1
23298: PLUS
23299: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
23300: LD_ADDR_EXP 67
23304: PUSH
23305: LD_EXP 67
23309: PUSH
23310: LD_EXP 15
23314: ADD
23315: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
23316: LD_EXP 67
23320: PPUSH
23321: LD_INT 25
23323: PUSH
23324: LD_INT 2
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PPUSH
23331: CALL_OW 72
23335: PUSH
23336: LD_INT 0
23338: EQUAL
23339: IFFALSE 23357
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
23341: LD_EXP 67
23345: PUSH
23346: LD_INT 1
23348: ARRAY
23349: PPUSH
23350: LD_INT 2
23352: PPUSH
23353: CALL_OW 336
// for i = 1 to 5 do
23357: LD_ADDR_VAR 0 1
23361: PUSH
23362: DOUBLE
23363: LD_INT 1
23365: DEC
23366: ST_TO_ADDR
23367: LD_INT 5
23369: PUSH
23370: FOR_TO
23371: IFFALSE 23422
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
23373: LD_EXP 67
23377: PUSH
23378: LD_VAR 0 1
23382: ARRAY
23383: PPUSH
23384: LD_INT 62
23386: PUSH
23387: LD_VAR 0 1
23391: PLUS
23392: PPUSH
23393: LD_INT 95
23395: PPUSH
23396: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
23400: LD_EXP 67
23404: PUSH
23405: LD_VAR 0 1
23409: ARRAY
23410: PPUSH
23411: LD_EXP 1
23415: PPUSH
23416: CALL_OW 179
// end ;
23420: GO 23370
23422: POP
23423: POP
// repeat wait ( 0 0$1 ) ;
23424: LD_INT 35
23426: PPUSH
23427: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
23431: LD_EXP 1
23435: PPUSH
23436: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
23440: LD_EXP 1
23444: PPUSH
23445: LD_INT 66
23447: PPUSH
23448: LD_INT 98
23450: PPUSH
23451: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
23455: LD_EXP 2
23459: PUSH
23460: LD_EXP 4
23464: PUSH
23465: LD_EXP 16
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: LIST
23474: PPUSH
23475: LD_INT 67
23477: PPUSH
23478: LD_INT 98
23480: PPUSH
23481: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
23485: LD_EXP 1
23489: PUSH
23490: LD_EXP 2
23494: PUSH
23495: LD_EXP 4
23499: PUSH
23500: LD_EXP 16
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: PPUSH
23511: LD_INT 63
23513: PPUSH
23514: LD_INT 95
23516: PPUSH
23517: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
23521: LD_EXP 1
23525: PPUSH
23526: LD_INT 9
23528: PPUSH
23529: CALL_OW 308
23533: PUSH
23534: LD_INT 9
23536: PPUSH
23537: LD_INT 22
23539: PUSH
23540: LD_INT 4
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 21
23549: PUSH
23550: LD_INT 1
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PPUSH
23561: CALL_OW 70
23565: PUSH
23566: LD_INT 5
23568: EQUAL
23569: AND
23570: IFFALSE 23424
// wait ( 0 0$2 ) ;
23572: LD_INT 70
23574: PPUSH
23575: CALL_OW 67
// if IsInArea ( Lisa , PowellHillArea ) then
23579: LD_EXP 4
23583: PPUSH
23584: LD_INT 9
23586: PPUSH
23587: CALL_OW 308
23591: IFFALSE 23605
// Say ( Lisa , D3nW-Lisa-1 ) ;
23593: LD_EXP 4
23597: PPUSH
23598: LD_STRING D3nW-Lisa-1
23600: PPUSH
23601: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
23605: LD_EXP 7
23609: PPUSH
23610: LD_INT 9
23612: PPUSH
23613: CALL_OW 308
23617: IFFALSE 23631
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
23619: LD_EXP 7
23623: PPUSH
23624: LD_STRING D3nW-Cyrus-1
23626: PPUSH
23627: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
23631: LD_EXP 6
23635: PPUSH
23636: LD_INT 9
23638: PPUSH
23639: CALL_OW 308
23643: IFFALSE 23657
// Say ( Bobby , D3nW-Bobby-1 ) ;
23645: LD_EXP 6
23649: PPUSH
23650: LD_STRING D3nW-Bobby-1
23652: PPUSH
23653: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
23657: LD_EXP 13
23661: PPUSH
23662: LD_INT 9
23664: PPUSH
23665: CALL_OW 308
23669: IFFALSE 23683
// Say ( Gary , D3nW-Gary-1 ) ;
23671: LD_EXP 13
23675: PPUSH
23676: LD_STRING D3nW-Gary-1
23678: PPUSH
23679: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
23683: LD_EXP 5
23687: PPUSH
23688: LD_INT 9
23690: PPUSH
23691: CALL_OW 308
23695: IFFALSE 23709
// Say ( Donaldson , D3nW-Don-1 ) ;
23697: LD_EXP 5
23701: PPUSH
23702: LD_STRING D3nW-Don-1
23704: PPUSH
23705: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
23709: LD_EXP 12
23713: PPUSH
23714: LD_INT 9
23716: PPUSH
23717: CALL_OW 308
23721: IFFALSE 23735
// Say ( Cornel , D3nW-Corn-1 ) ;
23723: LD_EXP 12
23727: PPUSH
23728: LD_STRING D3nW-Corn-1
23730: PPUSH
23731: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
23735: LD_EXP 14
23739: PPUSH
23740: LD_INT 9
23742: PPUSH
23743: CALL_OW 308
23747: IFFALSE 23761
// Say ( Frank , D3nW-Frank-1 ) ;
23749: LD_EXP 14
23753: PPUSH
23754: LD_STRING D3nW-Frank-1
23756: PPUSH
23757: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
23761: LD_EXP 1
23765: PPUSH
23766: LD_STRING D3nW-JMM-1
23768: PPUSH
23769: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
23773: LD_EXP 1
23777: PPUSH
23778: LD_STRING D3nW-JMM-1a
23780: PPUSH
23781: CALL_OW 88
// InGameOff ;
23785: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
23789: LD_STRING M1
23791: PPUSH
23792: CALL_OW 337
// SaveForQuickRestart ;
23796: CALL_OW 22
// startAttacks = 1 ;
23800: LD_ADDR_EXP 72
23804: PUSH
23805: LD_INT 1
23807: ST_TO_ADDR
// wait ( 0 0$5 ) ;
23808: LD_INT 175
23810: PPUSH
23811: CALL_OW 67
// powellBuildBase = 1 ;
23815: LD_ADDR_EXP 68
23819: PUSH
23820: LD_INT 1
23822: ST_TO_ADDR
// end ;
23823: PPOPN 4
23825: END
// function ResolveQuery ( question , list_of_q ) ; begin
23826: LD_INT 0
23828: PPUSH
// case question of 1 :
23829: LD_VAR 0 1
23833: PUSH
23834: LD_INT 1
23836: DOUBLE
23837: EQUAL
23838: IFTRUE 23842
23840: GO 23893
23842: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
23843: LD_EXP 1
23847: PPUSH
23848: LD_STRING D2Mot-JMM-1
23850: PPUSH
23851: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
23855: LD_EXP 17
23859: PPUSH
23860: LD_STRING D2Mot-Pow-1
23862: PPUSH
23863: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
23867: LD_EXP 1
23871: PPUSH
23872: LD_STRING D2Mot-JMM-2
23874: PPUSH
23875: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
23879: LD_EXP 17
23883: PPUSH
23884: LD_STRING D2Mot-Pow-2
23886: PPUSH
23887: CALL_OW 88
// end ; 2 :
23891: GO 24236
23893: LD_INT 2
23895: DOUBLE
23896: EQUAL
23897: IFTRUE 23901
23899: GO 23977
23901: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
23902: LD_EXP 1
23906: PPUSH
23907: LD_STRING D2Rus-JMM-1
23909: PPUSH
23910: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
23914: LD_EXP 17
23918: PPUSH
23919: LD_STRING D2Rus-Pow-1
23921: PPUSH
23922: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
23926: LD_EXP 1
23930: PPUSH
23931: LD_STRING D2Rus-JMM-2
23933: PPUSH
23934: CALL_OW 88
// if not ( 3 in list_of_q ) then
23938: LD_INT 3
23940: PUSH
23941: LD_VAR 0 2
23945: IN
23946: NOT
23947: IFFALSE 23963
// Say ( Powell , D2Rus-Pow-2 ) else
23949: LD_EXP 17
23953: PPUSH
23954: LD_STRING D2Rus-Pow-2
23956: PPUSH
23957: CALL_OW 88
23961: GO 23975
// Say ( Powell , D2Rus-Pow-2a ) ;
23963: LD_EXP 17
23967: PPUSH
23968: LD_STRING D2Rus-Pow-2a
23970: PPUSH
23971: CALL_OW 88
// end ; 3 :
23975: GO 24236
23977: LD_INT 3
23979: DOUBLE
23980: EQUAL
23981: IFTRUE 23985
23983: GO 24070
23985: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
23986: LD_EXP 1
23990: PPUSH
23991: LD_STRING D2Leg-JMM-1
23993: PPUSH
23994: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
23998: LD_EXP 17
24002: PPUSH
24003: LD_STRING D2Leg-Pow-1
24005: PPUSH
24006: CALL_OW 88
// if ( 2 in list_of_q ) then
24010: LD_INT 2
24012: PUSH
24013: LD_VAR 0 2
24017: IN
24018: IFFALSE 24044
// begin Say ( JMM , D2Leg-JMM-2 ) ;
24020: LD_EXP 1
24024: PPUSH
24025: LD_STRING D2Leg-JMM-2
24027: PPUSH
24028: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
24032: LD_EXP 17
24036: PPUSH
24037: LD_STRING D2Leg-Pow-2
24039: PPUSH
24040: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
24044: LD_EXP 1
24048: PPUSH
24049: LD_STRING D2Leg-JMM-3
24051: PPUSH
24052: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
24056: LD_EXP 17
24060: PPUSH
24061: LD_STRING D2Leg-Pow-3
24063: PPUSH
24064: CALL_OW 88
// end ; 4 :
24068: GO 24236
24070: LD_INT 4
24072: DOUBLE
24073: EQUAL
24074: IFTRUE 24078
24076: GO 24153
24078: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
24079: LD_EXP 1
24083: PPUSH
24084: LD_STRING D2Ar-JMM-1
24086: PPUSH
24087: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
24091: LD_EXP 17
24095: PPUSH
24096: LD_STRING D2Ar-Pow-1
24098: PPUSH
24099: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
24103: LD_EXP 1
24107: PPUSH
24108: LD_STRING D2Ar-JMM-2
24110: PPUSH
24111: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
24115: LD_EXP 17
24119: PPUSH
24120: LD_STRING D2Ar-Pow-2
24122: PPUSH
24123: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
24127: LD_EXP 1
24131: PPUSH
24132: LD_STRING D2Ar-JMM-3
24134: PPUSH
24135: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
24139: LD_EXP 17
24143: PPUSH
24144: LD_STRING D2Ar-Pow-3
24146: PPUSH
24147: CALL_OW 88
// end ; 5 :
24151: GO 24236
24153: LD_INT 5
24155: DOUBLE
24156: EQUAL
24157: IFTRUE 24161
24159: GO 24176
24161: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
24162: LD_EXP 1
24166: PPUSH
24167: LD_STRING D2Conf-JMM-1
24169: PPUSH
24170: CALL_OW 88
// end ; 6 :
24174: GO 24236
24176: LD_INT 6
24178: DOUBLE
24179: EQUAL
24180: IFTRUE 24184
24182: GO 24235
24184: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
24185: LD_EXP 1
24189: PPUSH
24190: LD_STRING D2Com-JMM-1
24192: PPUSH
24193: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
24197: LD_EXP 17
24201: PPUSH
24202: LD_STRING D2Com-Pow-1
24204: PPUSH
24205: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
24209: LD_EXP 1
24213: PPUSH
24214: LD_STRING D2Com-JMM-2
24216: PPUSH
24217: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
24221: LD_EXP 17
24225: PPUSH
24226: LD_STRING D2Com-Pow-2
24228: PPUSH
24229: CALL_OW 88
// end ; end ;
24233: GO 24236
24235: POP
// end ;
24236: LD_VAR 0 3
24240: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
24241: LD_INT 9
24243: PPUSH
24244: LD_INT 22
24246: PUSH
24247: LD_INT 4
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 21
24256: PUSH
24257: LD_INT 1
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PPUSH
24268: CALL_OW 70
24272: IFFALSE 24317
24274: GO 24276
24276: DISABLE
// begin enable ;
24277: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
24278: LD_INT 9
24280: PPUSH
24281: LD_INT 22
24283: PUSH
24284: LD_INT 4
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 21
24293: PUSH
24294: LD_INT 1
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PPUSH
24305: CALL_OW 70
24309: PPUSH
24310: LD_INT 1
24312: PPUSH
24313: CALL_OW 235
// end ;
24317: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
24318: LD_INT 22
24320: PUSH
24321: LD_INT 4
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 21
24330: PUSH
24331: LD_INT 2
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 3
24340: PUSH
24341: LD_INT 58
24343: PUSH
24344: EMPTY
24345: LIST
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: LIST
24355: PPUSH
24356: CALL_OW 69
24360: PUSH
24361: LD_INT 4
24363: EQUAL
24364: PUSH
24365: LD_EXP 72
24369: PUSH
24370: LD_INT 1
24372: EQUAL
24373: AND
24374: IFFALSE 24387
24376: GO 24378
24378: DISABLE
// startAttacks = 0 ;
24379: LD_ADDR_EXP 72
24383: PUSH
24384: LD_INT 0
24386: ST_TO_ADDR
24387: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
24388: LD_INT 22
24390: PUSH
24391: LD_INT 4
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 21
24400: PUSH
24401: LD_INT 2
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 3
24410: PUSH
24411: LD_INT 58
24413: PUSH
24414: EMPTY
24415: LIST
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: LIST
24425: PPUSH
24426: CALL_OW 69
24430: PUSH
24431: LD_INT 4
24433: EQUAL
24434: PUSH
24435: LD_INT 22
24437: PUSH
24438: LD_INT 6
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 21
24447: PUSH
24448: LD_INT 2
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 24
24457: PUSH
24458: LD_INT 250
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: LIST
24469: PPUSH
24470: CALL_OW 69
24474: PUSH
24475: LD_INT 0
24477: EQUAL
24478: AND
24479: PUSH
24480: LD_EXP 72
24484: PUSH
24485: LD_INT 0
24487: EQUAL
24488: AND
24489: PUSH
24490: LD_EXP 69
24494: PUSH
24495: LD_INT 0
24497: EQUAL
24498: AND
24499: IFFALSE 24687
24501: GO 24503
24503: DISABLE
24504: LD_INT 0
24506: PPUSH
// begin powellAttacks = 1 ;
24507: LD_ADDR_EXP 69
24511: PUSH
24512: LD_INT 1
24514: ST_TO_ADDR
// InGameOn ;
24515: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
24519: LD_EXP 17
24523: PPUSH
24524: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
24528: LD_EXP 17
24532: PPUSH
24533: LD_INT 47
24535: PPUSH
24536: LD_INT 60
24538: PPUSH
24539: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
24543: LD_EXP 17
24547: PPUSH
24548: LD_STRING D4-Pow-1
24550: PPUSH
24551: CALL_OW 88
// for i = 1 to amUnitsAttack do
24555: LD_ADDR_VAR 0 1
24559: PUSH
24560: DOUBLE
24561: LD_INT 1
24563: DEC
24564: ST_TO_ADDR
24565: LD_EXP 66
24569: PUSH
24570: FOR_TO
24571: IFFALSE 24616
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
24573: LD_EXP 66
24577: PUSH
24578: LD_VAR 0 1
24582: ARRAY
24583: PPUSH
24584: CALL_OW 258
24588: PUSH
24589: LD_INT 1
24591: EQUAL
24592: IFFALSE 24614
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
24594: LD_EXP 66
24598: PUSH
24599: LD_VAR 0 1
24603: ARRAY
24604: PPUSH
24605: LD_STRING D4-Sol1-1
24607: PPUSH
24608: CALL_OW 88
// break ;
24612: GO 24616
// end ;
24614: GO 24570
24616: POP
24617: POP
// Say ( Powell , D4-Pow-2 ) ;
24618: LD_EXP 17
24622: PPUSH
24623: LD_STRING D4-Pow-2
24625: PPUSH
24626: CALL_OW 88
// InGameOff ;
24630: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
24634: LD_INT 22
24636: PUSH
24637: LD_INT 4
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 21
24646: PUSH
24647: LD_INT 2
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 3
24656: PUSH
24657: LD_INT 58
24659: PUSH
24660: EMPTY
24661: LIST
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: LIST
24671: PPUSH
24672: CALL_OW 69
24676: PPUSH
24677: LD_INT 59
24679: PPUSH
24680: LD_INT 21
24682: PPUSH
24683: CALL_OW 114
// end ;
24687: PPOPN 1
24689: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
24690: LD_INT 7
24692: PPUSH
24693: LD_INT 22
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 21
24705: PUSH
24706: LD_INT 1
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PPUSH
24717: CALL_OW 70
24721: PUSH
24722: LD_INT 0
24724: GREATER
24725: PUSH
24726: LD_EXP 17
24730: PPUSH
24731: CALL_OW 302
24735: AND
24736: PUSH
24737: LD_EXP 71
24741: PUSH
24742: LD_INT 0
24744: EQUAL
24745: AND
24746: IFFALSE 24870
24748: GO 24750
24750: DISABLE
// begin InGameOn ;
24751: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24755: LD_INT 22
24757: PUSH
24758: LD_INT 1
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 21
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PPUSH
24779: CALL_OW 69
24783: PPUSH
24784: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24788: LD_INT 7
24790: PPUSH
24791: LD_INT 22
24793: PUSH
24794: LD_INT 1
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 21
24803: PUSH
24804: LD_INT 1
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PPUSH
24815: CALL_OW 70
24819: PPUSH
24820: LD_INT 70
24822: PPUSH
24823: LD_INT 104
24825: PPUSH
24826: CALL_OW 111
// if powellWarm = 0 then
24830: LD_EXP 71
24834: PUSH
24835: LD_INT 0
24837: EQUAL
24838: IFFALSE 24866
// begin Say ( Powell , DBack1-Pow-1 ) ;
24840: LD_EXP 17
24844: PPUSH
24845: LD_STRING DBack1-Pow-1
24847: PPUSH
24848: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24852: LD_ADDR_EXP 71
24856: PUSH
24857: LD_EXP 71
24861: PUSH
24862: LD_INT 1
24864: PLUS
24865: ST_TO_ADDR
// end ; InGameOff ;
24866: CALL_OW 9
// end ;
24870: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
24871: LD_INT 7
24873: PPUSH
24874: LD_INT 22
24876: PUSH
24877: LD_INT 1
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 21
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PPUSH
24898: CALL_OW 70
24902: PUSH
24903: LD_INT 0
24905: GREATER
24906: PUSH
24907: LD_EXP 17
24911: PPUSH
24912: CALL_OW 302
24916: AND
24917: PUSH
24918: LD_EXP 71
24922: PUSH
24923: LD_INT 1
24925: EQUAL
24926: AND
24927: IFFALSE 25051
24929: GO 24931
24931: DISABLE
// begin InGameOn ;
24932: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24936: LD_INT 22
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 21
24948: PUSH
24949: LD_INT 1
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PPUSH
24960: CALL_OW 69
24964: PPUSH
24965: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24969: LD_INT 7
24971: PPUSH
24972: LD_INT 22
24974: PUSH
24975: LD_INT 1
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 21
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PPUSH
24996: CALL_OW 70
25000: PPUSH
25001: LD_INT 70
25003: PPUSH
25004: LD_INT 104
25006: PPUSH
25007: CALL_OW 111
// if powellWarm = 1 then
25011: LD_EXP 71
25015: PUSH
25016: LD_INT 1
25018: EQUAL
25019: IFFALSE 25047
// begin Say ( Powell , DBack2-Pow-1 ) ;
25021: LD_EXP 17
25025: PPUSH
25026: LD_STRING DBack2-Pow-1
25028: PPUSH
25029: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25033: LD_ADDR_EXP 71
25037: PUSH
25038: LD_EXP 71
25042: PUSH
25043: LD_INT 1
25045: PLUS
25046: ST_TO_ADDR
// end ; InGameOff ;
25047: CALL_OW 9
// end ;
25051: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
25052: LD_INT 7
25054: PPUSH
25055: LD_INT 22
25057: PUSH
25058: LD_INT 1
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 21
25067: PUSH
25068: LD_INT 1
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PPUSH
25079: CALL_OW 70
25083: PUSH
25084: LD_INT 0
25086: GREATER
25087: PUSH
25088: LD_EXP 17
25092: PPUSH
25093: CALL_OW 302
25097: AND
25098: PUSH
25099: LD_EXP 71
25103: PUSH
25104: LD_INT 2
25106: EQUAL
25107: AND
25108: IFFALSE 25225
25110: GO 25112
25112: DISABLE
// begin InGameOn ;
25113: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25117: LD_INT 22
25119: PUSH
25120: LD_INT 1
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 21
25129: PUSH
25130: LD_INT 1
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PPUSH
25141: CALL_OW 69
25145: PPUSH
25146: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
25150: LD_INT 7
25152: PPUSH
25153: LD_INT 22
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 21
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PPUSH
25177: CALL_OW 70
25181: PPUSH
25182: LD_INT 70
25184: PPUSH
25185: LD_INT 104
25187: PPUSH
25188: CALL_OW 111
// if powellWarm = 2 then
25192: LD_EXP 71
25196: PUSH
25197: LD_INT 2
25199: EQUAL
25200: IFFALSE 25221
// begin Say ( Powell , DBack3-Pow-1 ) ;
25202: LD_EXP 17
25206: PPUSH
25207: LD_STRING DBack3-Pow-1
25209: PPUSH
25210: CALL_OW 88
// YouLost ( Dismissed ) ;
25214: LD_STRING Dismissed
25216: PPUSH
25217: CALL_OW 104
// end ; InGameOff ;
25221: CALL_OW 9
// end ;
25225: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
25226: LD_INT 8
25228: PPUSH
25229: LD_INT 22
25231: PUSH
25232: LD_INT 1
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 21
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PPUSH
25253: CALL_OW 70
25257: PUSH
25258: LD_INT 0
25260: GREATER
25261: PUSH
25262: LD_EXP 17
25266: PPUSH
25267: CALL_OW 302
25271: AND
25272: PUSH
25273: LD_EXP 71
25277: PUSH
25278: LD_INT 0
25280: EQUAL
25281: AND
25282: IFFALSE 25406
25284: GO 25286
25286: DISABLE
// begin InGameOn ;
25287: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25291: LD_INT 22
25293: PUSH
25294: LD_INT 1
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 21
25303: PUSH
25304: LD_INT 1
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PPUSH
25315: CALL_OW 69
25319: PPUSH
25320: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25324: LD_INT 8
25326: PPUSH
25327: LD_INT 22
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 21
25339: PUSH
25340: LD_INT 1
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PPUSH
25351: CALL_OW 70
25355: PPUSH
25356: LD_INT 71
25358: PPUSH
25359: LD_INT 63
25361: PPUSH
25362: CALL_OW 111
// if powellWarm = 0 then
25366: LD_EXP 71
25370: PUSH
25371: LD_INT 0
25373: EQUAL
25374: IFFALSE 25402
// begin Say ( Powell , DBack1-Pow-1 ) ;
25376: LD_EXP 17
25380: PPUSH
25381: LD_STRING DBack1-Pow-1
25383: PPUSH
25384: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25388: LD_ADDR_EXP 71
25392: PUSH
25393: LD_EXP 71
25397: PUSH
25398: LD_INT 1
25400: PLUS
25401: ST_TO_ADDR
// end ; InGameOff ;
25402: CALL_OW 9
// end ;
25406: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
25407: LD_INT 8
25409: PPUSH
25410: LD_INT 22
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 21
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PPUSH
25434: CALL_OW 70
25438: PUSH
25439: LD_INT 0
25441: GREATER
25442: PUSH
25443: LD_EXP 17
25447: PPUSH
25448: CALL_OW 302
25452: AND
25453: PUSH
25454: LD_EXP 71
25458: PUSH
25459: LD_INT 1
25461: EQUAL
25462: AND
25463: IFFALSE 25587
25465: GO 25467
25467: DISABLE
// begin InGameOn ;
25468: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25472: LD_INT 22
25474: PUSH
25475: LD_INT 1
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 21
25484: PUSH
25485: LD_INT 1
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PPUSH
25496: CALL_OW 69
25500: PPUSH
25501: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25505: LD_INT 8
25507: PPUSH
25508: LD_INT 22
25510: PUSH
25511: LD_INT 1
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 21
25520: PUSH
25521: LD_INT 1
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PPUSH
25532: CALL_OW 70
25536: PPUSH
25537: LD_INT 71
25539: PPUSH
25540: LD_INT 63
25542: PPUSH
25543: CALL_OW 111
// if powellWarm = 1 then
25547: LD_EXP 71
25551: PUSH
25552: LD_INT 1
25554: EQUAL
25555: IFFALSE 25583
// begin Say ( Powell , DBack2-Pow-1 ) ;
25557: LD_EXP 17
25561: PPUSH
25562: LD_STRING DBack2-Pow-1
25564: PPUSH
25565: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25569: LD_ADDR_EXP 71
25573: PUSH
25574: LD_EXP 71
25578: PUSH
25579: LD_INT 1
25581: PLUS
25582: ST_TO_ADDR
// end ; InGameOff ;
25583: CALL_OW 9
// end ;
25587: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
25588: LD_INT 8
25590: PPUSH
25591: LD_INT 22
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 21
25603: PUSH
25604: LD_INT 1
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PPUSH
25615: CALL_OW 70
25619: PUSH
25620: LD_INT 0
25622: GREATER
25623: PUSH
25624: LD_EXP 17
25628: PPUSH
25629: CALL_OW 302
25633: AND
25634: PUSH
25635: LD_EXP 71
25639: PUSH
25640: LD_INT 2
25642: EQUAL
25643: AND
25644: IFFALSE 25761
25646: GO 25648
25648: DISABLE
// begin InGameOn ;
25649: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25653: LD_INT 22
25655: PUSH
25656: LD_INT 1
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 21
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PPUSH
25677: CALL_OW 69
25681: PPUSH
25682: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25686: LD_INT 8
25688: PPUSH
25689: LD_INT 22
25691: PUSH
25692: LD_INT 1
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 21
25701: PUSH
25702: LD_INT 1
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PPUSH
25713: CALL_OW 70
25717: PPUSH
25718: LD_INT 71
25720: PPUSH
25721: LD_INT 63
25723: PPUSH
25724: CALL_OW 111
// if powellWarm = 2 then
25728: LD_EXP 71
25732: PUSH
25733: LD_INT 2
25735: EQUAL
25736: IFFALSE 25757
// begin Say ( Powell , DBack3-Pow-1 ) ;
25738: LD_EXP 17
25742: PPUSH
25743: LD_STRING DBack3-Pow-1
25745: PPUSH
25746: CALL_OW 88
// YouLost ( Dismissed ) ;
25750: LD_STRING Dismissed
25752: PPUSH
25753: CALL_OW 104
// end ; InGameOff ;
25757: CALL_OW 9
// end ;
25761: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
25762: LD_EXP 69
25766: PUSH
25767: LD_INT 1
25769: EQUAL
25770: IFFALSE 25819
25772: GO 25774
25774: DISABLE
25775: LD_INT 0
25777: PPUSH
// begin enable ;
25778: ENABLE
// for i = 1 to amUnitsAttack do
25779: LD_ADDR_VAR 0 1
25783: PUSH
25784: DOUBLE
25785: LD_INT 1
25787: DEC
25788: ST_TO_ADDR
25789: LD_EXP 66
25793: PUSH
25794: FOR_TO
25795: IFFALSE 25817
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
25797: LD_INT 8
25799: PPUSH
25800: LD_EXP 66
25804: PUSH
25805: LD_VAR 0 1
25809: ARRAY
25810: PPUSH
25811: CALL_OW 471
25815: GO 25794
25817: POP
25818: POP
// end ;
25819: PPOPN 1
25821: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
25822: LD_INT 22
25824: PUSH
25825: LD_INT 4
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 21
25834: PUSH
25835: LD_INT 2
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 3
25844: PUSH
25845: LD_INT 58
25847: PUSH
25848: EMPTY
25849: LIST
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: LIST
25859: PPUSH
25860: CALL_OW 69
25864: PUSH
25865: LD_INT 0
25867: EQUAL
25868: PUSH
25869: LD_EXP 69
25873: PUSH
25874: LD_INT 1
25876: EQUAL
25877: AND
25878: IFFALSE 26049
25880: GO 25882
25882: DISABLE
// begin powellAttacks = 2 ;
25883: LD_ADDR_EXP 69
25887: PUSH
25888: LD_INT 2
25890: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25891: LD_INT 85
25893: PPUSH
25894: LD_INT 3
25896: PPUSH
25897: LD_INT 3
25899: PPUSH
25900: LD_INT 1
25902: PPUSH
25903: LD_INT 5
25905: PUSH
25906: LD_INT 7
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 1
25915: PPUSH
25916: LD_INT 2
25918: PPUSH
25919: CALL_OW 12
25923: ARRAY
25924: PPUSH
25925: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25929: LD_INT 85
25931: PPUSH
25932: LD_INT 3
25934: PPUSH
25935: LD_INT 3
25937: PPUSH
25938: LD_INT 1
25940: PPUSH
25941: LD_INT 5
25943: PUSH
25944: LD_INT 7
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 1
25953: PPUSH
25954: LD_INT 2
25956: PPUSH
25957: CALL_OW 12
25961: ARRAY
25962: PPUSH
25963: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25967: LD_INT 85
25969: PPUSH
25970: LD_INT 3
25972: PPUSH
25973: LD_INT 3
25975: PPUSH
25976: LD_INT 1
25978: PPUSH
25979: LD_INT 5
25981: PUSH
25982: LD_INT 7
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 1
25991: PPUSH
25992: LD_INT 2
25994: PPUSH
25995: CALL_OW 12
25999: ARRAY
26000: PPUSH
26001: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
26005: LD_INT 85
26007: PPUSH
26008: LD_INT 5
26010: PPUSH
26011: LD_INT 3
26013: PPUSH
26014: LD_INT 1
26016: PPUSH
26017: LD_INT 6
26019: PPUSH
26020: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
26024: LD_ADDR_EXP 73
26028: PUSH
26029: LD_INT 85
26031: PPUSH
26032: LD_INT 3
26034: PPUSH
26035: LD_INT 3
26037: PPUSH
26038: LD_INT 1
26040: PPUSH
26041: LD_INT 3
26043: PPUSH
26044: CALL_OW 185
26048: ST_TO_ADDR
// end ;
26049: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
26050: LD_INT 22
26052: PUSH
26053: LD_INT 4
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 21
26062: PUSH
26063: LD_INT 2
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 3
26072: PUSH
26073: LD_INT 58
26075: PUSH
26076: EMPTY
26077: LIST
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: LIST
26087: PPUSH
26088: CALL_OW 69
26092: PUSH
26093: LD_INT 5
26095: GREATEREQUAL
26096: PUSH
26097: LD_EXP 72
26101: PUSH
26102: LD_INT 1
26104: EQUAL
26105: AND
26106: IFFALSE 26119
26108: GO 26110
26110: DISABLE
// startAttacks = 0 ;
26111: LD_ADDR_EXP 72
26115: PUSH
26116: LD_INT 0
26118: ST_TO_ADDR
26119: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
26120: LD_INT 22
26122: PUSH
26123: LD_INT 4
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 21
26132: PUSH
26133: LD_INT 2
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 3
26142: PUSH
26143: LD_INT 58
26145: PUSH
26146: EMPTY
26147: LIST
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: LIST
26157: PPUSH
26158: CALL_OW 69
26162: PUSH
26163: LD_INT 5
26165: GREATEREQUAL
26166: PUSH
26167: LD_INT 22
26169: PUSH
26170: LD_INT 6
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 21
26179: PUSH
26180: LD_INT 2
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PPUSH
26191: CALL_OW 69
26195: PUSH
26196: LD_INT 0
26198: EQUAL
26199: AND
26200: PUSH
26201: LD_EXP 72
26205: PUSH
26206: LD_INT 0
26208: EQUAL
26209: AND
26210: PUSH
26211: LD_EXP 69
26215: PUSH
26216: LD_INT 2
26218: EQUAL
26219: AND
26220: IFFALSE 27155
26222: GO 26224
26224: DISABLE
26225: LD_INT 0
26227: PPUSH
26228: PPUSH
26229: PPUSH
26230: PPUSH
// begin powellAttacks = 3 ;
26231: LD_ADDR_EXP 69
26235: PUSH
26236: LD_INT 3
26238: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
26239: LD_ADDR_VAR 0 1
26243: PUSH
26244: DOUBLE
26245: LD_INT 1
26247: DEC
26248: ST_TO_ADDR
26249: LD_EXP 66
26253: PUSH
26254: FOR_TO
26255: IFFALSE 26277
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
26257: LD_INT 8
26259: PPUSH
26260: LD_EXP 66
26264: PUSH
26265: LD_VAR 0 1
26269: ARRAY
26270: PPUSH
26271: CALL_OW 472
26275: GO 26254
26277: POP
26278: POP
// wait ( 0 0$5 ) ;
26279: LD_INT 175
26281: PPUSH
26282: CALL_OW 67
// Video ( true ) ;
26286: LD_INT 1
26288: PPUSH
26289: CALL 6868 0 1
// ComStop ( FilterAllUnits ( [ f_side , 1 ] ) ) ;
26293: LD_INT 22
26295: PUSH
26296: LD_INT 1
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PPUSH
26303: CALL_OW 69
26307: PPUSH
26308: CALL_OW 141
// CenterNowOnUnits ( Powell ) ;
26312: LD_EXP 17
26316: PPUSH
26317: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
26321: LD_EXP 17
26325: PPUSH
26326: LD_INT 45
26328: PPUSH
26329: LD_INT 64
26331: PPUSH
26332: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
26336: LD_EXP 17
26340: PPUSH
26341: LD_INT 46
26343: PPUSH
26344: LD_INT 66
26346: PPUSH
26347: CALL_OW 178
// for i = 5 to 8 do
26351: LD_ADDR_VAR 0 1
26355: PUSH
26356: DOUBLE
26357: LD_INT 5
26359: DEC
26360: ST_TO_ADDR
26361: LD_INT 8
26363: PUSH
26364: FOR_TO
26365: IFFALSE 26511
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
26367: LD_EXP 66
26371: PUSH
26372: LD_VAR 0 1
26376: ARRAY
26377: PPUSH
26378: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
26382: LD_EXP 66
26386: PUSH
26387: LD_VAR 0 1
26391: ARRAY
26392: PPUSH
26393: CALL_OW 121
// wait ( 0 0$1 ) ;
26397: LD_INT 35
26399: PPUSH
26400: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
26404: LD_EXP 66
26408: PUSH
26409: LD_VAR 0 1
26413: ARRAY
26414: PPUSH
26415: LD_INT 92
26417: PPUSH
26418: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
26422: LD_EXP 66
26426: PUSH
26427: LD_VAR 0 1
26431: ARRAY
26432: PPUSH
26433: LD_INT 1
26435: PPUSH
26436: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
26440: LD_EXP 66
26444: PUSH
26445: LD_VAR 0 1
26449: ARRAY
26450: PPUSH
26451: CALL_OW 182
// wait ( 0 0$1 ) ;
26455: LD_INT 35
26457: PPUSH
26458: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 43 + i , 66 ) ;
26462: LD_EXP 66
26466: PUSH
26467: LD_VAR 0 1
26471: ARRAY
26472: PPUSH
26473: LD_INT 43
26475: PUSH
26476: LD_VAR 0 1
26480: PLUS
26481: PPUSH
26482: LD_INT 66
26484: PPUSH
26485: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
26489: LD_EXP 66
26493: PUSH
26494: LD_VAR 0 1
26498: ARRAY
26499: PPUSH
26500: LD_EXP 17
26504: PPUSH
26505: CALL_OW 179
// end ;
26509: GO 26364
26511: POP
26512: POP
// wait ( 0 0$10 ) ;
26513: LD_INT 350
26515: PPUSH
26516: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
26520: LD_ADDR_VAR 0 3
26524: PUSH
26525: LD_INT 22
26527: PUSH
26528: LD_INT 4
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 21
26537: PUSH
26538: LD_INT 1
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 56
26547: PUSH
26548: EMPTY
26549: LIST
26550: PUSH
26551: LD_INT 3
26553: PUSH
26554: LD_INT 60
26556: PUSH
26557: EMPTY
26558: LIST
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: PPUSH
26570: CALL_OW 69
26574: PUSH
26575: LD_EXP 17
26579: PUSH
26580: EMPTY
26581: LIST
26582: DIFF
26583: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
26584: LD_VAR 0 3
26588: PPUSH
26589: LD_INT 92
26591: PPUSH
26592: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
26596: LD_VAR 0 3
26600: PPUSH
26601: LD_INT 1
26603: PPUSH
26604: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
26608: LD_EXP 17
26612: PPUSH
26613: LD_STRING D5-Pow-1
26615: PPUSH
26616: CALL_OW 88
// for i = 1 to amUnitsAttack do
26620: LD_ADDR_VAR 0 1
26624: PUSH
26625: DOUBLE
26626: LD_INT 1
26628: DEC
26629: ST_TO_ADDR
26630: LD_EXP 66
26634: PUSH
26635: FOR_TO
26636: IFFALSE 26681
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
26638: LD_EXP 66
26642: PUSH
26643: LD_VAR 0 1
26647: ARRAY
26648: PPUSH
26649: CALL_OW 258
26653: PUSH
26654: LD_INT 1
26656: EQUAL
26657: IFFALSE 26679
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
26659: LD_EXP 66
26663: PUSH
26664: LD_VAR 0 1
26668: ARRAY
26669: PPUSH
26670: LD_STRING D5-Sol2-1
26672: PPUSH
26673: CALL_OW 88
// break ;
26677: GO 26681
// end ;
26679: GO 26635
26681: POP
26682: POP
// Say ( Powell , D5-Pow-2 ) ;
26683: LD_EXP 17
26687: PPUSH
26688: LD_STRING D5-Pow-2
26690: PPUSH
26691: CALL_OW 88
// for i = 1 to amUnitsAttack do
26695: LD_ADDR_VAR 0 1
26699: PUSH
26700: DOUBLE
26701: LD_INT 1
26703: DEC
26704: ST_TO_ADDR
26705: LD_EXP 66
26709: PUSH
26710: FOR_TO
26711: IFFALSE 26756
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
26713: LD_EXP 66
26717: PUSH
26718: LD_VAR 0 1
26722: ARRAY
26723: PPUSH
26724: CALL_OW 258
26728: PUSH
26729: LD_INT 1
26731: EQUAL
26732: IFFALSE 26754
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
26734: LD_EXP 66
26738: PUSH
26739: LD_VAR 0 1
26743: ARRAY
26744: PPUSH
26745: LD_STRING D5-Sol2-2
26747: PPUSH
26748: CALL_OW 88
// break ;
26752: GO 26756
// end ;
26754: GO 26710
26756: POP
26757: POP
// Say ( Powell , D5-Pow-3 ) ;
26758: LD_EXP 17
26762: PPUSH
26763: LD_STRING D5-Pow-3
26765: PPUSH
26766: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
26770: LD_INT 22
26772: PUSH
26773: LD_INT 4
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 21
26782: PUSH
26783: LD_INT 2
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 3
26792: PUSH
26793: LD_INT 58
26795: PUSH
26796: EMPTY
26797: LIST
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: LIST
26807: PPUSH
26808: CALL_OW 69
26812: PPUSH
26813: LD_INT 59
26815: PPUSH
26816: LD_INT 21
26818: PPUSH
26819: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
26823: LD_EXP 66
26827: PPUSH
26828: LD_INT 59
26830: PPUSH
26831: LD_INT 21
26833: PPUSH
26834: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
26838: LD_INT 61
26840: PPUSH
26841: LD_INT 35
26843: PPUSH
26844: CALL_OW 84
// wait ( 0 0$15 ) ;
26848: LD_INT 525
26850: PPUSH
26851: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
26855: LD_EXP 17
26859: PPUSH
26860: LD_STRING D5a-Pow-1
26862: PPUSH
26863: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
26867: LD_EXP 17
26871: PPUSH
26872: LD_STRING D5a-Pow-1a
26874: PPUSH
26875: CALL_OW 88
// wait ( 0 0$2 ) ;
26879: LD_INT 70
26881: PPUSH
26882: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
26886: LD_EXP 17
26890: PPUSH
26891: LD_STRING D5a-Pow-1b
26893: PPUSH
26894: CALL_OW 88
// wait ( 0 0$3 ) ;
26898: LD_INT 105
26900: PPUSH
26901: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
26905: LD_EXP 17
26909: PPUSH
26910: LD_STRING D5a-Pow-1c
26912: PPUSH
26913: CALL_OW 88
// wait ( 0 0$1 ) ;
26917: LD_INT 35
26919: PPUSH
26920: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
26924: LD_EXP 17
26928: PPUSH
26929: LD_STRING D5a-Pow-1d
26931: PPUSH
26932: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
26936: LD_INT 35
26938: PPUSH
26939: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
26943: LD_INT 22
26945: PUSH
26946: LD_INT 4
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 21
26955: PUSH
26956: LD_INT 2
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 3
26965: PUSH
26966: LD_INT 58
26968: PUSH
26969: EMPTY
26970: LIST
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: LIST
26980: PPUSH
26981: CALL_OW 69
26985: PPUSH
26986: LD_INT 59
26988: PPUSH
26989: LD_INT 21
26991: PPUSH
26992: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
26996: LD_EXP 66
27000: PPUSH
27001: LD_INT 59
27003: PPUSH
27004: LD_INT 21
27006: PPUSH
27007: CALL_OW 114
// until amUnitsAttack = [ ] ;
27011: LD_EXP 66
27015: PUSH
27016: EMPTY
27017: EQUAL
27018: IFFALSE 26936
// CenterNowOnUnits ( Powell ) ;
27020: LD_EXP 17
27024: PPUSH
27025: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
27029: LD_ADDR_VAR 0 3
27033: PUSH
27034: LD_INT 22
27036: PUSH
27037: LD_INT 4
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 21
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PPUSH
27058: CALL_OW 69
27062: PUSH
27063: LD_EXP 17
27067: PUSH
27068: EMPTY
27069: LIST
27070: DIFF
27071: ST_TO_ADDR
// for i in powellPeople do
27072: LD_ADDR_VAR 0 1
27076: PUSH
27077: LD_VAR 0 3
27081: PUSH
27082: FOR_IN
27083: IFFALSE 27112
// if GetSex ( i ) = sex_male then
27085: LD_VAR 0 1
27089: PPUSH
27090: CALL_OW 258
27094: PUSH
27095: LD_INT 1
27097: EQUAL
27098: IFFALSE 27110
// sold = i ;
27100: LD_ADDR_VAR 0 2
27104: PUSH
27105: LD_VAR 0 1
27109: ST_TO_ADDR
27110: GO 27082
27112: POP
27113: POP
// Say ( sold , D6-Sol3-1 ) ;
27114: LD_VAR 0 2
27118: PPUSH
27119: LD_STRING D6-Sol3-1
27121: PPUSH
27122: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
27126: LD_EXP 17
27130: PPUSH
27131: LD_STRING D6-Pow-1
27133: PPUSH
27134: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
27138: LD_INT 139
27140: PUSH
27141: LD_INT 138
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PPUSH
27148: LD_INT 12
27150: PPUSH
27151: CALL_OW 113
// end ;
27155: PPOPN 4
27157: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
27158: LD_EXP 69
27162: PUSH
27163: LD_INT 3
27165: EQUAL
27166: PUSH
27167: LD_INT 12
27169: PPUSH
27170: LD_INT 22
27172: PUSH
27173: LD_INT 8
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 21
27182: PUSH
27183: LD_INT 2
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PPUSH
27194: CALL_OW 70
27198: PUSH
27199: LD_INT 2
27201: EQUAL
27202: AND
27203: IFFALSE 27364
27205: GO 27207
27207: DISABLE
27208: LD_INT 0
27210: PPUSH
27211: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
27212: LD_INT 8
27214: PPUSH
27215: LD_INT 1
27217: PPUSH
27218: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
27222: LD_INT 4
27224: PPUSH
27225: LD_INT 8
27227: PPUSH
27228: LD_INT 1
27230: PPUSH
27231: LD_INT 1
27233: PPUSH
27234: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
27238: LD_ADDR_VAR 0 1
27242: PUSH
27243: LD_INT 92
27245: PPUSH
27246: CALL_OW 313
27250: PUSH
27251: FOR_IN
27252: IFFALSE 27283
// if GetSex ( i ) = sex_male then
27254: LD_VAR 0 1
27258: PPUSH
27259: CALL_OW 258
27263: PUSH
27264: LD_INT 1
27266: EQUAL
27267: IFFALSE 27281
// begin tmp = i ;
27269: LD_ADDR_VAR 0 2
27273: PUSH
27274: LD_VAR 0 1
27278: ST_TO_ADDR
// break ;
27279: GO 27283
// end ;
27281: GO 27251
27283: POP
27284: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
27285: LD_INT 92
27287: PPUSH
27288: CALL_OW 313
27292: PPUSH
27293: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
27297: LD_VAR 0 2
27301: PPUSH
27302: LD_STRING D6-Sol3-2
27304: PPUSH
27305: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
27309: LD_INT 139
27311: PUSH
27312: LD_INT 138
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PPUSH
27319: LD_INT 85
27321: PPUSH
27322: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
27326: LD_INT 4
27328: PPUSH
27329: LD_INT 8
27331: PPUSH
27332: LD_INT 2
27334: PPUSH
27335: LD_INT 1
27337: PPUSH
27338: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
27342: LD_INT 8
27344: PPUSH
27345: LD_INT 8
27347: PPUSH
27348: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
27352: LD_EXP 17
27356: PPUSH
27357: LD_STRING D6-Pow-2
27359: PPUSH
27360: CALL_OW 88
// end ;
27364: PPOPN 2
27366: END
// every 1 trigger IsDead ( AmFact ) do var i , tmp ;
27367: LD_INT 85
27369: PPUSH
27370: CALL_OW 301
27374: IFFALSE 27838
27376: GO 27378
27378: DISABLE
27379: LD_INT 0
27381: PPUSH
27382: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) = 1 then
27383: LD_INT 22
27385: PUSH
27386: LD_INT 8
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 21
27395: PUSH
27396: LD_INT 2
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 33
27405: PUSH
27406: LD_INT 2
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 34
27415: PUSH
27416: LD_INT 29
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 50
27425: PUSH
27426: EMPTY
27427: LIST
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: PPUSH
27436: CALL_OW 69
27440: PUSH
27441: LD_INT 1
27443: EQUAL
27444: IFFALSE 27555
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) , FilterUnitsInArea ( BunkerHillArea , [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
27446: LD_INT 22
27448: PUSH
27449: LD_INT 8
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 21
27458: PUSH
27459: LD_INT 2
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 33
27468: PUSH
27469: LD_INT 2
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 34
27478: PUSH
27479: LD_INT 29
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 50
27488: PUSH
27489: EMPTY
27490: LIST
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: PPUSH
27499: CALL_OW 69
27503: PPUSH
27504: LD_INT 34
27506: PPUSH
27507: LD_INT 22
27509: PUSH
27510: LD_INT 4
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 21
27519: PUSH
27520: LD_INT 3
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 30
27529: PUSH
27530: LD_INT 32
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: LIST
27541: PPUSH
27542: CALL_OW 70
27546: PUSH
27547: LD_INT 1
27549: ARRAY
27550: PPUSH
27551: CALL_OW 115
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
27555: LD_ADDR_VAR 0 1
27559: PUSH
27560: LD_INT 22
27562: PUSH
27563: LD_INT 4
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 21
27572: PUSH
27573: LD_INT 1
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 56
27582: PUSH
27583: EMPTY
27584: LIST
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: LIST
27590: PPUSH
27591: CALL_OW 69
27595: PUSH
27596: LD_EXP 17
27600: PUSH
27601: EMPTY
27602: LIST
27603: DIFF
27604: PUSH
27605: FOR_IN
27606: IFFALSE 27637
// if GetSex ( i ) = sex_male then
27608: LD_VAR 0 1
27612: PPUSH
27613: CALL_OW 258
27617: PUSH
27618: LD_INT 1
27620: EQUAL
27621: IFFALSE 27635
// begin tmp = i ;
27623: LD_ADDR_VAR 0 2
27627: PUSH
27628: LD_VAR 0 1
27632: ST_TO_ADDR
// break ;
27633: GO 27637
// end ;
27635: GO 27605
27637: POP
27638: POP
// Say ( Powell , D6a-Pow-1 ) ;
27639: LD_EXP 17
27643: PPUSH
27644: LD_STRING D6a-Pow-1
27646: PPUSH
27647: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
27651: LD_VAR 0 2
27655: PPUSH
27656: LD_STRING D6a-Sol3-1
27658: PPUSH
27659: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
27663: LD_EXP 17
27667: PPUSH
27668: LD_VAR 0 2
27672: PPUSH
27673: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
27677: LD_EXP 17
27681: PPUSH
27682: LD_STRING D6a-Pow-2
27684: PPUSH
27685: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
27689: LD_VAR 0 2
27693: PPUSH
27694: LD_STRING D6a-Sol3-2
27696: PPUSH
27697: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
27701: LD_EXP 17
27705: PPUSH
27706: LD_STRING D6a-Pow-3
27708: PPUSH
27709: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
27713: LD_EXP 17
27717: PPUSH
27718: LD_EXP 73
27722: PPUSH
27723: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
27727: LD_INT 35
27729: PPUSH
27730: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
27734: LD_EXP 17
27738: PPUSH
27739: LD_EXP 73
27743: PPUSH
27744: CALL_OW 120
// until IsInUnit ( Powell ) ;
27748: LD_EXP 17
27752: PPUSH
27753: CALL_OW 310
27757: IFFALSE 27727
// wait ( 0 0$1 ) ;
27759: LD_INT 35
27761: PPUSH
27762: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
27766: LD_EXP 73
27770: PPUSH
27771: LD_INT 77
27773: PPUSH
27774: LD_INT 64
27776: PPUSH
27777: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
27781: LD_EXP 73
27785: PPUSH
27786: LD_INT 91
27788: PPUSH
27789: LD_INT 61
27791: PPUSH
27792: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
27796: LD_EXP 73
27800: PPUSH
27801: LD_INT 74
27803: PPUSH
27804: LD_INT 25
27806: PPUSH
27807: CALL_OW 171
// centerPowell = 1 ;
27811: LD_ADDR_EXP 74
27815: PUSH
27816: LD_INT 1
27818: ST_TO_ADDR
// wait ( 0 0$15 ) ;
27819: LD_INT 525
27821: PPUSH
27822: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
27826: LD_EXP 17
27830: PPUSH
27831: LD_STRING D6b-Pow-1
27833: PPUSH
27834: CALL_OW 88
// end ;
27838: PPOPN 2
27840: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
27841: LD_EXP 73
27845: PPUSH
27846: LD_INT 13
27848: PPUSH
27849: CALL_OW 308
27853: PUSH
27854: LD_EXP 69
27858: PUSH
27859: LD_INT 3
27861: EQUAL
27862: AND
27863: IFFALSE 28005
27865: GO 27867
27867: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
27868: LD_EXP 73
27872: PPUSH
27873: LD_INT 250
27875: PPUSH
27876: CALL_OW 234
// DialogueOn ;
27880: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
27884: LD_EXP 17
27888: PPUSH
27889: LD_STRING D6b-Pow-1a
27891: PPUSH
27892: CALL_OW 88
// DialogueOff ;
27896: CALL_OW 7
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
27900: LD_EXP 17
27904: PPUSH
27905: LD_INT 22
27907: PUSH
27908: LD_INT 8
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 34
27917: PUSH
27918: LD_INT 29
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 50
27927: PUSH
27928: EMPTY
27929: LIST
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: PPUSH
27936: CALL_OW 69
27940: PUSH
27941: LD_INT 1
27943: ARRAY
27944: PPUSH
27945: CALL_OW 120
// wait ( 0 0$1 ) ;
27949: LD_INT 35
27951: PPUSH
27952: CALL_OW 67
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
27956: LD_EXP 17
27960: PPUSH
27961: LD_INT 22
27963: PUSH
27964: LD_INT 8
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 34
27973: PUSH
27974: LD_INT 29
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 50
27983: PUSH
27984: EMPTY
27985: LIST
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: LIST
27991: PPUSH
27992: CALL_OW 69
27996: PUSH
27997: LD_INT 1
27999: ARRAY
28000: PPUSH
28001: CALL_OW 120
// end ;
28005: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
28006: LD_INT 22
28008: PUSH
28009: LD_INT 4
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 34
28018: PUSH
28019: LD_INT 29
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PPUSH
28030: CALL_OW 69
28034: IFFALSE 28466
28036: GO 28038
28038: DISABLE
// begin powBomb = FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) [ 1 ] ;
28039: LD_ADDR_EXP 75
28043: PUSH
28044: LD_INT 22
28046: PUSH
28047: LD_INT 4
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 34
28056: PUSH
28057: LD_INT 29
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PPUSH
28068: CALL_OW 69
28072: PUSH
28073: LD_INT 1
28075: ARRAY
28076: ST_TO_ADDR
// SetAttitude ( 8 , 4 , att_friend , true ) ;
28077: LD_INT 8
28079: PPUSH
28080: LD_INT 4
28082: PPUSH
28083: LD_INT 1
28085: PPUSH
28086: LD_INT 1
28088: PPUSH
28089: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
28093: LD_EXP 75
28097: PPUSH
28098: LD_INT 80
28100: PPUSH
28101: LD_INT 19
28103: PPUSH
28104: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
28108: LD_EXP 75
28112: PPUSH
28113: LD_INT 74
28115: PPUSH
28116: LD_INT 15
28118: PPUSH
28119: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
28123: LD_EXP 75
28127: PPUSH
28128: LD_INT 72
28130: PPUSH
28131: LD_INT 19
28133: PPUSH
28134: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
28138: LD_EXP 75
28142: PPUSH
28143: LD_INT 78
28145: PPUSH
28146: LD_INT 24
28148: PPUSH
28149: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28153: LD_EXP 75
28157: PPUSH
28158: LD_INT 77
28160: PPUSH
28161: LD_INT 20
28163: PPUSH
28164: CALL_OW 171
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
28168: LD_EXP 75
28172: PPUSH
28173: LD_INT 74
28175: PPUSH
28176: LD_INT 15
28178: PPUSH
28179: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
28183: LD_EXP 75
28187: PPUSH
28188: LD_INT 72
28190: PPUSH
28191: LD_INT 19
28193: PPUSH
28194: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
28198: LD_EXP 75
28202: PPUSH
28203: LD_INT 78
28205: PPUSH
28206: LD_INT 24
28208: PPUSH
28209: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28213: LD_EXP 75
28217: PPUSH
28218: LD_INT 77
28220: PPUSH
28221: LD_INT 20
28223: PPUSH
28224: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
28228: LD_EXP 75
28232: PPUSH
28233: LD_INT 78
28235: PPUSH
28236: LD_INT 15
28238: PPUSH
28239: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
28243: LD_EXP 17
28247: PPUSH
28248: LD_STRING D6b-Pow-1b
28250: PPUSH
28251: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
28255: LD_INT 22
28257: PUSH
28258: LD_INT 8
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 21
28267: PUSH
28268: LD_INT 1
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 25
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 26
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: PPUSH
28301: CALL_OW 69
28305: PUSH
28306: LD_INT 1
28308: ARRAY
28309: PPUSH
28310: LD_STRING D6b-ArSol1-1
28312: PPUSH
28313: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D6b-ArSol2-1 ) ;
28317: LD_INT 22
28319: PUSH
28320: LD_INT 8
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 21
28329: PUSH
28330: LD_INT 1
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 25
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 26
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: PPUSH
28363: CALL_OW 69
28367: PUSH
28368: LD_INT 2
28370: ARRAY
28371: PPUSH
28372: LD_STRING D6b-ArSol2-1
28374: PPUSH
28375: CALL_OW 88
// Say ( Powell , D6b-Pow-2 ) ;
28379: LD_EXP 17
28383: PPUSH
28384: LD_STRING D6b-Pow-2
28386: PPUSH
28387: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
28391: LD_INT 35
28393: PPUSH
28394: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 2 ;
28398: LD_EXP 75
28402: PPUSH
28403: LD_INT 78
28405: PPUSH
28406: LD_INT 15
28408: PPUSH
28409: CALL_OW 297
28413: PUSH
28414: LD_INT 2
28416: LESS
28417: IFFALSE 28391
// wait ( 0 0$1 ) ;
28419: LD_INT 35
28421: PPUSH
28422: CALL_OW 67
// DialogueOn ;
28426: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
28430: LD_EXP 17
28434: PPUSH
28435: LD_STRING D6b-Pow-2a
28437: PPUSH
28438: CALL_OW 88
// DialogueOff ;
28442: CALL_OW 7
// centerPowell = 0 ;
28446: LD_ADDR_EXP 74
28450: PUSH
28451: LD_INT 0
28453: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
28454: LD_EXP 75
28458: PPUSH
28459: LD_INT 105
28461: PPUSH
28462: CALL_OW 115
// end ;
28466: END
// every 0 0$3 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
28467: LD_INT 105
28469: PPUSH
28470: CALL_OW 301
28474: PUSH
28475: LD_EXP 69
28479: PUSH
28480: LD_INT 3
28482: EQUAL
28483: AND
28484: IFFALSE 29318
28486: GO 28488
28488: DISABLE
28489: LD_INT 0
28491: PPUSH
28492: PPUSH
28493: PPUSH
28494: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
28495: LD_ADDR_VAR 0 2
28499: PUSH
28500: LD_INT 22
28502: PUSH
28503: LD_INT 4
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 21
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 26
28522: PUSH
28523: LD_INT 1
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: LIST
28534: PPUSH
28535: CALL_OW 69
28539: PUSH
28540: LD_EXP 1
28544: PUSH
28545: LD_EXP 3
28549: PUSH
28550: LD_EXP 21
28554: PUSH
28555: LD_EXP 22
28559: PUSH
28560: LD_EXP 23
28564: PUSH
28565: LD_EXP 4
28569: PUSH
28570: LD_EXP 5
28574: PUSH
28575: LD_EXP 6
28579: PUSH
28580: LD_EXP 7
28584: PUSH
28585: LD_EXP 8
28589: PUSH
28590: LD_EXP 9
28594: PUSH
28595: LD_EXP 10
28599: PUSH
28600: LD_EXP 11
28604: PUSH
28605: LD_EXP 12
28609: PUSH
28610: LD_EXP 13
28614: PUSH
28615: LD_EXP 14
28619: PUSH
28620: LD_EXP 15
28624: PUSH
28625: LD_EXP 17
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: DIFF
28650: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
28651: LD_INT 49
28653: PPUSH
28654: LD_INT 66
28656: PPUSH
28657: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
28661: LD_VAR 0 2
28665: PUSH
28666: LD_INT 1
28668: ARRAY
28669: PPUSH
28670: LD_STRING D6c-Sol3-1
28672: PPUSH
28673: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
28677: LD_EXP 1
28681: PPUSH
28682: LD_STRING D6c-JMM-1
28684: PPUSH
28685: CALL_OW 88
// if IsOk ( Cyrus ) then
28689: LD_EXP 7
28693: PPUSH
28694: CALL_OW 302
28698: IFFALSE 28712
// Say ( Cyrus , D6c-Cyrus-1 ) ;
28700: LD_EXP 7
28704: PPUSH
28705: LD_STRING D6c-Cyrus-1
28707: PPUSH
28708: CALL_OW 88
// if IsOk ( Bobby ) then
28712: LD_EXP 6
28716: PPUSH
28717: CALL_OW 302
28721: IFFALSE 28735
// Say ( Bobby , D6c-Bobby-1 ) ;
28723: LD_EXP 6
28727: PPUSH
28728: LD_STRING D6c-Bobby-1
28730: PPUSH
28731: CALL_OW 88
// if IsOk ( Cornel ) then
28735: LD_EXP 12
28739: PPUSH
28740: CALL_OW 302
28744: IFFALSE 28758
// Say ( Cornel , D6c-Corn-1 ) ;
28746: LD_EXP 12
28750: PPUSH
28751: LD_STRING D6c-Corn-1
28753: PPUSH
28754: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
28758: LD_VAR 0 2
28762: PUSH
28763: LD_INT 2
28765: ARRAY
28766: PPUSH
28767: LD_STRING D6c-Sol1-1
28769: PPUSH
28770: CALL_OW 88
// if IsOk ( Lisa ) then
28774: LD_EXP 4
28778: PPUSH
28779: CALL_OW 302
28783: IFFALSE 28797
// Say ( Lisa , D6c-Lisa-1 ) ;
28785: LD_EXP 4
28789: PPUSH
28790: LD_STRING D6c-Lisa-1
28792: PPUSH
28793: CALL_OW 88
// if IsOk ( Gary ) then
28797: LD_EXP 13
28801: PPUSH
28802: CALL_OW 302
28806: IFFALSE 28820
// Say ( Gary , D6c-Gary-1 ) ;
28808: LD_EXP 13
28812: PPUSH
28813: LD_STRING D6c-Gary-1
28815: PPUSH
28816: CALL_OW 88
// if IsOK ( Donaldson ) then
28820: LD_EXP 5
28824: PPUSH
28825: CALL_OW 302
28829: IFFALSE 28843
// Say ( Donaldson , D6c-Don-1 ) ;
28831: LD_EXP 5
28835: PPUSH
28836: LD_STRING D6c-Don-1
28838: PPUSH
28839: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
28843: LD_VAR 0 2
28847: PUSH
28848: LD_INT 3
28850: ARRAY
28851: PPUSH
28852: LD_STRING D6c-Sol2-1
28854: PPUSH
28855: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
28859: LD_INT 22
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 21
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PPUSH
28883: CALL_OW 69
28887: PPUSH
28888: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
28892: LD_INT 22
28894: PUSH
28895: LD_INT 4
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 21
28904: PUSH
28905: LD_INT 1
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PPUSH
28916: CALL_OW 69
28920: PPUSH
28921: CALL_OW 122
// wait ( 0 0$1 ) ;
28925: LD_INT 35
28927: PPUSH
28928: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
28932: LD_ADDR_VAR 0 3
28936: PUSH
28937: LD_INT 22
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 21
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PPUSH
28961: CALL_OW 69
28965: PUSH
28966: LD_EXP 1
28970: PUSH
28971: EMPTY
28972: LIST
28973: DIFF
28974: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
28975: LD_ADDR_VAR 0 4
28979: PUSH
28980: LD_INT 22
28982: PUSH
28983: LD_INT 4
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 21
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PPUSH
29004: CALL_OW 69
29008: ST_TO_ADDR
// for i := 1 to tmp2 do
29009: LD_ADDR_VAR 0 1
29013: PUSH
29014: DOUBLE
29015: LD_INT 1
29017: DEC
29018: ST_TO_ADDR
29019: LD_VAR 0 4
29023: PUSH
29024: FOR_TO
29025: IFFALSE 29076
// begin ComMoveXY ( tmp2 [ i ] , 43 + i , 64 ) ;
29027: LD_VAR 0 4
29031: PUSH
29032: LD_VAR 0 1
29036: ARRAY
29037: PPUSH
29038: LD_INT 43
29040: PUSH
29041: LD_VAR 0 1
29045: PLUS
29046: PPUSH
29047: LD_INT 64
29049: PPUSH
29050: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
29054: LD_VAR 0 4
29058: PUSH
29059: LD_VAR 0 1
29063: ARRAY
29064: PPUSH
29065: LD_EXP 1
29069: PPUSH
29070: CALL_OW 179
// end ;
29074: GO 29024
29076: POP
29077: POP
// for i := 1 to tmp1 do
29078: LD_ADDR_VAR 0 1
29082: PUSH
29083: DOUBLE
29084: LD_INT 1
29086: DEC
29087: ST_TO_ADDR
29088: LD_VAR 0 3
29092: PUSH
29093: FOR_TO
29094: IFFALSE 29145
// begin ComMoveXY ( tmp1 [ i ] , 43 + i , 65 ) ;
29096: LD_VAR 0 3
29100: PUSH
29101: LD_VAR 0 1
29105: ARRAY
29106: PPUSH
29107: LD_INT 43
29109: PUSH
29110: LD_VAR 0 1
29114: PLUS
29115: PPUSH
29116: LD_INT 65
29118: PPUSH
29119: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
29123: LD_VAR 0 3
29127: PUSH
29128: LD_VAR 0 1
29132: ARRAY
29133: PPUSH
29134: LD_EXP 1
29138: PPUSH
29139: CALL_OW 179
// end ;
29143: GO 29093
29145: POP
29146: POP
// repeat wait ( 0 0$1 ) ;
29147: LD_INT 35
29149: PPUSH
29150: CALL_OW 67
// ComMoveXY ( JMM , 48 , 68 ) ;
29154: LD_EXP 1
29158: PPUSH
29159: LD_INT 48
29161: PPUSH
29162: LD_INT 68
29164: PPUSH
29165: CALL_OW 111
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
29169: LD_EXP 1
29173: PPUSH
29174: LD_INT 48
29176: PPUSH
29177: LD_INT 68
29179: PPUSH
29180: CALL_OW 297
29184: PUSH
29185: LD_INT 2
29187: LESS
29188: IFFALSE 29147
// AddComTurnXY ( JMM , 47 , 65 ) ;
29190: LD_EXP 1
29194: PPUSH
29195: LD_INT 47
29197: PPUSH
29198: LD_INT 65
29200: PPUSH
29201: CALL_OW 178
// wait ( 0 0$2 ) ;
29205: LD_INT 70
29207: PPUSH
29208: CALL_OW 67
// Say ( tmp [ 1 ] , D6c-Sol3-2 ) ;
29212: LD_VAR 0 2
29216: PUSH
29217: LD_INT 1
29219: ARRAY
29220: PPUSH
29221: LD_STRING D6c-Sol3-2
29223: PPUSH
29224: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
29228: LD_EXP 1
29232: PPUSH
29233: LD_STRING D6c-JMM-2
29235: PPUSH
29236: CALL_OW 88
// Video ( false ) ;
29240: LD_INT 0
29242: PPUSH
29243: CALL 6868 0 1
// centerPowell = 0 ;
29247: LD_ADDR_EXP 74
29251: PUSH
29252: LD_INT 0
29254: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
29255: LD_INT 22
29257: PUSH
29258: LD_INT 4
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PPUSH
29265: CALL_OW 69
29269: PPUSH
29270: LD_INT 1
29272: PPUSH
29273: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
29277: LD_STRING M2
29279: PPUSH
29280: CALL_OW 337
// ChangeSideFog ( 4 , 4 ) ;
29284: LD_INT 4
29286: PPUSH
29287: LD_INT 4
29289: PPUSH
29290: CALL_OW 343
// timerStatus = 1 ;
29294: LD_ADDR_EXP 96
29298: PUSH
29299: LD_INT 1
29301: ST_TO_ADDR
// missionStage = 1 ;
29302: LD_ADDR_EXP 101
29306: PUSH
29307: LD_INT 1
29309: ST_TO_ADDR
// startAttacks = 1 ;
29310: LD_ADDR_EXP 72
29314: PUSH
29315: LD_INT 1
29317: ST_TO_ADDR
// end ;
29318: PPOPN 4
29320: END
// every 0 0$1 trigger centerPowell = 1 do
29321: LD_EXP 74
29325: PUSH
29326: LD_INT 1
29328: EQUAL
29329: IFFALSE 29612
29331: GO 29333
29333: DISABLE
// begin enable ;
29334: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
29335: LD_EXP 17
29339: PUSH
29340: LD_EXP 75
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PPUSH
29349: LD_INT 1000
29351: PPUSH
29352: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29356: LD_INT 22
29358: PUSH
29359: LD_INT 4
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 34
29368: PUSH
29369: LD_INT 29
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 33
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: LIST
29390: PPUSH
29391: CALL_OW 69
29395: PUSH
29396: LD_INT 0
29398: GREATER
29399: IFFALSE 29452
// SetLives ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29401: LD_INT 22
29403: PUSH
29404: LD_INT 4
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 34
29413: PUSH
29414: LD_INT 29
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 33
29423: PUSH
29424: LD_INT 1
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: PPUSH
29436: CALL_OW 69
29440: PUSH
29441: LD_INT 1
29443: ARRAY
29444: PPUSH
29445: LD_INT 1000
29447: PPUSH
29448: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29452: LD_INT 22
29454: PUSH
29455: LD_INT 8
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 34
29464: PUSH
29465: LD_INT 29
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 33
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: LIST
29486: PPUSH
29487: CALL_OW 69
29491: PUSH
29492: LD_INT 0
29494: GREATER
29495: IFFALSE 29548
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29497: LD_INT 22
29499: PUSH
29500: LD_INT 8
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 34
29509: PUSH
29510: LD_INT 29
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 33
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: LIST
29531: PPUSH
29532: CALL_OW 69
29536: PUSH
29537: LD_INT 1
29539: ARRAY
29540: PPUSH
29541: LD_INT 1000
29543: PPUSH
29544: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
29548: LD_EXP 73
29552: PPUSH
29553: LD_INT 13
29555: PPUSH
29556: CALL_OW 308
29560: NOT
29561: IFFALSE 29575
// SetLives ( powellVeh , 1000 ) ;
29563: LD_EXP 73
29567: PPUSH
29568: LD_INT 1000
29570: PPUSH
29571: CALL_OW 234
// if not IsInUnit ( Powell ) then
29575: LD_EXP 17
29579: PPUSH
29580: CALL_OW 310
29584: NOT
29585: IFFALSE 29598
// CenterNowOnUnits ( Powell ) else
29587: LD_EXP 17
29591: PPUSH
29592: CALL_OW 87
29596: GO 29612
// CenterNowOnUnits ( IsInUnit ( Powell ) ) ;
29598: LD_EXP 17
29602: PPUSH
29603: CALL_OW 310
29607: PPUSH
29608: CALL_OW 87
// end ;
29612: END
// every 0 0$1 trigger timeAction >= 0 0$16 do
29613: LD_EXP 97
29617: PUSH
29618: LD_INT 560
29620: GREATEREQUAL
29621: IFFALSE 29833
29623: GO 29625
29625: DISABLE
// begin DialogueOn ;
29626: CALL_OW 6
// SayRadio ( LegionFriend , D7-Friend-1 ) ;
29630: LD_EXP 53
29634: PPUSH
29635: LD_STRING D7-Friend-1
29637: PPUSH
29638: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
29642: LD_EXP 1
29646: PPUSH
29647: LD_STRING D7-JMM-1
29649: PPUSH
29650: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-2 ) ;
29654: LD_EXP 53
29658: PPUSH
29659: LD_STRING D7-Friend-2
29661: PPUSH
29662: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
29666: LD_EXP 1
29670: PPUSH
29671: LD_STRING D7-JMM-2
29673: PPUSH
29674: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-3 ) ;
29678: LD_EXP 53
29682: PPUSH
29683: LD_STRING D7-Friend-3
29685: PPUSH
29686: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
29690: LD_EXP 1
29694: PPUSH
29695: LD_STRING D7-JMM-3
29697: PPUSH
29698: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-4 ) ;
29702: LD_EXP 53
29706: PPUSH
29707: LD_STRING D7-Friend-4
29709: PPUSH
29710: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
29714: LD_EXP 1
29718: PPUSH
29719: LD_STRING D7-JMM-4
29721: PPUSH
29722: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-5 ) ;
29726: LD_EXP 53
29730: PPUSH
29731: LD_STRING D7-Friend-5
29733: PPUSH
29734: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
29738: LD_EXP 1
29742: PPUSH
29743: LD_STRING D7-JMM-5
29745: PPUSH
29746: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-6 ) ;
29750: LD_EXP 53
29754: PPUSH
29755: LD_STRING D7-Friend-6
29757: PPUSH
29758: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
29762: LD_EXP 1
29766: PPUSH
29767: LD_STRING D7-JMM-6
29769: PPUSH
29770: CALL_OW 88
// DialogueOff ;
29774: CALL_OW 7
// PlaceUnitArea ( Kozlov , KozlovSpawn , false ) ;
29778: LD_EXP 36
29782: PPUSH
29783: LD_INT 15
29785: PPUSH
29786: LD_INT 0
29788: PPUSH
29789: CALL_OW 49
// SetClass ( Kozlov , 2 ) ;
29793: LD_EXP 36
29797: PPUSH
29798: LD_INT 2
29800: PPUSH
29801: CALL_OW 336
// ComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
29805: LD_EXP 36
29809: PPUSH
29810: LD_INT 2
29812: PPUSH
29813: LD_INT 78
29815: PPUSH
29816: LD_INT 12
29818: PPUSH
29819: LD_INT 3
29821: PPUSH
29822: CALL_OW 145
// ChangeMissionObjectives ( Mlegion ) ;
29826: LD_STRING Mlegion
29828: PPUSH
29829: CALL_OW 337
// end ;
29833: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 6 , 5 , 4 ] [ Difficulty ] do
29834: LD_INT 22
29836: PUSH
29837: LD_INT 8
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 21
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 23
29856: PUSH
29857: LD_INT 2
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: LIST
29868: PPUSH
29869: CALL_OW 69
29873: PUSH
29874: LD_INT 6
29876: PUSH
29877: LD_INT 5
29879: PUSH
29880: LD_INT 4
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: LIST
29887: PUSH
29888: LD_OWVAR 67
29892: ARRAY
29893: LESSEQUAL
29894: IFFALSE 30208
29896: GO 29898
29898: DISABLE
// begin PlaceUnitArea ( Kurt , KurtSpawn , false ) ;
29899: LD_EXP 30
29903: PPUSH
29904: LD_INT 19
29906: PPUSH
29907: LD_INT 0
29909: PPUSH
29910: CALL_OW 49
// KillUnit ( Kozlov ) ;
29914: LD_EXP 36
29918: PPUSH
29919: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
29923: LD_INT 22
29925: PUSH
29926: LD_INT 8
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 21
29935: PUSH
29936: LD_INT 3
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 23
29945: PUSH
29946: LD_INT 3
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 30
29955: PUSH
29956: LD_INT 3
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: PPUSH
29969: CALL_OW 69
29973: PUSH
29974: LD_INT 1
29976: ARRAY
29977: PPUSH
29978: CALL_OW 66
// DialogueOn ;
29982: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
29986: LD_EXP 1
29990: PPUSH
29991: LD_STRING D13-JMM-1
29993: PPUSH
29994: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
29998: LD_EXP 30
30002: PPUSH
30003: LD_STRING D13-Kurt-1
30005: PPUSH
30006: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
30010: LD_EXP 1
30014: PPUSH
30015: LD_STRING D13-JMM-2
30017: PPUSH
30018: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
30022: LD_EXP 30
30026: PPUSH
30027: LD_STRING D13-Kurt-2a
30029: PPUSH
30030: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
30034: LD_EXP 1
30038: PPUSH
30039: LD_STRING D13-JMM-3
30041: PPUSH
30042: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
30046: LD_EXP 30
30050: PPUSH
30051: LD_STRING D13-Kurt-3
30053: PPUSH
30054: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
30058: LD_EXP 1
30062: PPUSH
30063: LD_STRING D13-JMM-4
30065: PPUSH
30066: CALL_OW 88
// DialogueOff ;
30070: CALL_OW 7
// SetSide ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] ] ) , 1 ) ;
30074: LD_INT 22
30076: PUSH
30077: LD_INT 8
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 50
30086: PUSH
30087: EMPTY
30088: LIST
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PPUSH
30094: CALL_OW 69
30098: PPUSH
30099: LD_INT 1
30101: PPUSH
30102: CALL_OW 235
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_lives , 250 ] ] ] ) , 0 ) ;
30106: LD_INT 22
30108: PUSH
30109: LD_INT 8
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 3
30118: PUSH
30119: LD_INT 24
30121: PUSH
30122: LD_INT 250
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PPUSH
30137: CALL_OW 69
30141: PPUSH
30142: LD_INT 0
30144: PPUSH
30145: CALL_OW 234
// ChangeMissionObjectives ( MlegionOut ) ;
30149: LD_STRING MlegionOut
30151: PPUSH
30152: CALL_OW 337
// SetAttitude ( 8 , 1 , att_friend , true ) ;
30156: LD_INT 8
30158: PPUSH
30159: LD_INT 1
30161: PPUSH
30162: LD_INT 1
30164: PPUSH
30165: LD_INT 1
30167: PPUSH
30168: CALL_OW 80
// PlaceUnitArea ( LegionFriend , LegFriendSpawn , false ) ;
30172: LD_EXP 53
30176: PPUSH
30177: LD_INT 30
30179: PPUSH
30180: LD_INT 0
30182: PPUSH
30183: CALL_OW 49
// wait ( 0 0$1 ) ;
30187: LD_INT 35
30189: PPUSH
30190: CALL_OW 67
// ComMoveUnit ( LegionFriend , JMM ) ;
30194: LD_EXP 53
30198: PPUSH
30199: LD_EXP 1
30203: PPUSH
30204: CALL_OW 112
// end ;
30208: END
// every 0 0$1 trigger See ( 1 , LegionFriend ) do var dec ;
30209: LD_INT 1
30211: PPUSH
30212: LD_EXP 53
30216: PPUSH
30217: CALL_OW 292
30221: IFFALSE 30497
30223: GO 30225
30225: DISABLE
30226: LD_INT 0
30228: PPUSH
// begin CenterNowOnUnits ( LegionFriend ) ;
30229: LD_EXP 53
30233: PPUSH
30234: CALL_OW 87
// DialogueOn ;
30238: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
30242: LD_EXP 1
30246: PPUSH
30247: LD_STRING D14-JMM-1
30249: PPUSH
30250: CALL_OW 88
// Say ( LegionFriend , D14-Friend-1 ) ;
30254: LD_EXP 53
30258: PPUSH
30259: LD_STRING D14-Friend-1
30261: PPUSH
30262: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
30266: LD_EXP 1
30270: PPUSH
30271: LD_STRING D14-JMM-2
30273: PPUSH
30274: CALL_OW 88
// Say ( LegionFriend , D14-Friend-2 ) ;
30278: LD_EXP 53
30282: PPUSH
30283: LD_STRING D14-Friend-2
30285: PPUSH
30286: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
30290: LD_EXP 1
30294: PPUSH
30295: LD_STRING D14-JMM-3
30297: PPUSH
30298: CALL_OW 88
// Say ( LegionFriend , D14-Friend-3 ) ;
30302: LD_EXP 53
30306: PPUSH
30307: LD_STRING D14-Friend-3
30309: PPUSH
30310: CALL_OW 88
// DialogueOff ;
30314: CALL_OW 7
// dec = Query ( Q14 ) ;
30318: LD_ADDR_VAR 0 1
30322: PUSH
30323: LD_STRING Q14
30325: PPUSH
30326: CALL_OW 97
30330: ST_TO_ADDR
// if dec = 1 then
30331: LD_VAR 0 1
30335: PUSH
30336: LD_INT 1
30338: EQUAL
30339: IFFALSE 30373
// begin DialogueOn ;
30341: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
30345: LD_EXP 1
30349: PPUSH
30350: LD_STRING D14a-JMM-1
30352: PPUSH
30353: CALL_OW 88
// DialogueOff ;
30357: CALL_OW 7
// SetSide ( LegionFriend , 1 ) ;
30361: LD_EXP 53
30365: PPUSH
30366: LD_INT 1
30368: PPUSH
30369: CALL_OW 235
// end ; if dec = 2 then
30373: LD_VAR 0 1
30377: PUSH
30378: LD_INT 2
30380: EQUAL
30381: IFFALSE 30415
// begin DialogueOn ;
30383: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
30387: LD_EXP 1
30391: PPUSH
30392: LD_STRING D14b-JMM-1
30394: PPUSH
30395: CALL_OW 88
// DialogueOff ;
30399: CALL_OW 7
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30403: LD_EXP 53
30407: PPUSH
30408: LD_INT 18
30410: PPUSH
30411: CALL_OW 113
// end ; if dec = 3 then
30415: LD_VAR 0 1
30419: PUSH
30420: LD_INT 3
30422: EQUAL
30423: IFFALSE 30497
// begin DialogueOn ;
30425: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
30429: LD_EXP 1
30433: PPUSH
30434: LD_STRING D14c-JMM-1
30436: PPUSH
30437: CALL_OW 88
// Say ( LegionFriend , D14c-Friend-1 ) ;
30441: LD_EXP 53
30445: PPUSH
30446: LD_STRING D14c-Friend-1
30448: PPUSH
30449: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
30453: LD_EXP 1
30457: PPUSH
30458: LD_STRING D14c-JMM-2
30460: PPUSH
30461: CALL_OW 88
// DialogueOff ;
30465: CALL_OW 7
// SetAttitude ( 8 , 1 , att_enemy , true ) ;
30469: LD_INT 8
30471: PPUSH
30472: LD_INT 1
30474: PPUSH
30475: LD_INT 2
30477: PPUSH
30478: LD_INT 1
30480: PPUSH
30481: CALL_OW 80
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30485: LD_EXP 53
30489: PPUSH
30490: LD_INT 18
30492: PPUSH
30493: CALL_OW 113
// end ; end ;
30497: PPOPN 1
30499: END
// every 0 0$1 trigger IsInArea ( LegionFriend , FriendEscapeArea ) and GetSide ( LegionFriend ) = 8 do
30500: LD_EXP 53
30504: PPUSH
30505: LD_INT 18
30507: PPUSH
30508: CALL_OW 308
30512: PUSH
30513: LD_EXP 53
30517: PPUSH
30518: CALL_OW 255
30522: PUSH
30523: LD_INT 8
30525: EQUAL
30526: AND
30527: IFFALSE 30541
30529: GO 30531
30531: DISABLE
// RemoveUnit ( LegionFriend ) ;
30532: LD_EXP 53
30536: PPUSH
30537: CALL_OW 64
30541: END
// every 0 0$1 trigger timeAction >= 15 15$02 do
30542: LD_EXP 97
30546: PUSH
30547: LD_INT 31570
30549: GREATEREQUAL
30550: IFFALSE 30626
30552: GO 30554
30554: DISABLE
// begin if KappaStatus = 1 and JMMGirlVeh = [ ] then
30555: LD_EXP 81
30559: PUSH
30560: LD_INT 1
30562: EQUAL
30563: PUSH
30564: LD_EXP 79
30568: PUSH
30569: EMPTY
30570: EQUAL
30571: AND
30572: IFFALSE 30578
// PrepareSupportFromKappa ;
30574: CALL 2400 0 0
// if KappaStatus = 0 and JMMGirlStatus = 1 then
30578: LD_EXP 81
30582: PUSH
30583: LD_INT 0
30585: EQUAL
30586: PUSH
30587: LD_EXP 82
30591: PUSH
30592: LD_INT 1
30594: EQUAL
30595: AND
30596: IFFALSE 30602
// PrepareAttackFromKappa ;
30598: CALL 5252 0 0
// if KappaStatus = 0 and JMMGirlStatus = 0 then
30602: LD_EXP 81
30606: PUSH
30607: LD_INT 0
30609: EQUAL
30610: PUSH
30611: LD_EXP 82
30615: PUSH
30616: LD_INT 0
30618: EQUAL
30619: AND
30620: IFFALSE 30626
// PrepareAttackFromKappa ;
30622: CALL 5252 0 0
// end ;
30626: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
30627: LD_INT 1
30629: PPUSH
30630: LD_EXP 35
30634: PPUSH
30635: CALL_OW 292
30639: IFFALSE 30907
30641: GO 30643
30643: DISABLE
// begin missionStage = 2 ;
30644: LD_ADDR_EXP 101
30648: PUSH
30649: LD_INT 2
30651: ST_TO_ADDR
// CenterNowOnUnits ( sewiVeh ) ;
30652: LD_EXP 35
30656: PPUSH
30657: CALL_OW 87
// DialogueOn ;
30661: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
30665: LD_EXP 1
30669: PPUSH
30670: LD_STRING D10nB-JMM-1
30672: PPUSH
30673: CALL_OW 88
// if BurlakStatus = 1 then
30677: LD_EXP 76
30681: PUSH
30682: LD_INT 1
30684: EQUAL
30685: IFFALSE 30699
// Say ( Vsevolod , D10nB-Vse-1a ) ;
30687: LD_EXP 34
30691: PPUSH
30692: LD_STRING D10nB-Vse-1a
30694: PPUSH
30695: CALL_OW 88
// if BurlakStatus = 0 then
30699: LD_EXP 76
30703: PUSH
30704: LD_INT 0
30706: EQUAL
30707: IFFALSE 30721
// Say ( Vsevolod , D10nB-Vse-1 ) ;
30709: LD_EXP 34
30713: PPUSH
30714: LD_STRING D10nB-Vse-1
30716: PPUSH
30717: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
30721: LD_EXP 1
30725: PPUSH
30726: LD_STRING D10nB-JMM-2
30728: PPUSH
30729: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 1 then
30733: LD_EXP 81
30737: PUSH
30738: LD_EXP 82
30742: PUSH
30743: LD_INT 1
30745: EQUAL
30746: AND
30747: IFFALSE 30761
// Say ( Vsevolod , D10nB-Vse-5 ) ;
30749: LD_EXP 34
30753: PPUSH
30754: LD_STRING D10nB-Vse-5
30756: PPUSH
30757: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 0 then
30761: LD_EXP 81
30765: PUSH
30766: LD_EXP 82
30770: PUSH
30771: LD_INT 0
30773: EQUAL
30774: AND
30775: IFFALSE 30903
// begin if JMMGirl = 1 then
30777: LD_EXP 80
30781: PUSH
30782: LD_INT 1
30784: EQUAL
30785: IFFALSE 30835
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
30787: LD_EXP 34
30791: PPUSH
30792: LD_STRING D10nB-Vse-2
30794: PPUSH
30795: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
30799: LD_EXP 1
30803: PPUSH
30804: LD_STRING D10nB-JMM-3
30806: PPUSH
30807: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
30811: LD_EXP 34
30815: PPUSH
30816: LD_STRING D10nB-Vse-3
30818: PPUSH
30819: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
30823: LD_EXP 1
30827: PPUSH
30828: LD_STRING D10nB-JMM-4
30830: PPUSH
30831: CALL_OW 88
// end ; if JMMGirl = 2 then
30835: LD_EXP 80
30839: PUSH
30840: LD_INT 2
30842: EQUAL
30843: IFFALSE 30869
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
30845: LD_EXP 34
30849: PPUSH
30850: LD_STRING D10nB-Vse-4
30852: PPUSH
30853: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
30857: LD_EXP 1
30861: PPUSH
30862: LD_STRING D10nB-JMM-5
30864: PPUSH
30865: CALL_OW 88
// end ; if JMMGirl = 3 then
30869: LD_EXP 80
30873: PUSH
30874: LD_INT 3
30876: EQUAL
30877: IFFALSE 30903
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
30879: LD_EXP 34
30883: PPUSH
30884: LD_STRING D10nB-Vse-5
30886: PPUSH
30887: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
30891: LD_EXP 1
30895: PPUSH
30896: LD_STRING D10nB-JMM-6
30898: PPUSH
30899: CALL_OW 88
// end ; end ; DialogueOff ;
30903: CALL_OW 7
// end ;
30907: END
// every 0 0$1 trigger timeAction >= 30 30$02 do
30908: LD_EXP 97
30912: PUSH
30913: LD_INT 63070
30915: GREATEREQUAL
30916: IFFALSE 31194
30918: GO 30920
30920: DISABLE
// begin PrepareOmegaTeam ;
30921: CALL 2789 0 0
// missionStage = 3 ;
30925: LD_ADDR_EXP 101
30929: PUSH
30930: LD_INT 3
30932: ST_TO_ADDR
// DialogueOn ;
30933: CALL_OW 6
// if StevensStatus = 1 then
30937: LD_EXP 77
30941: PUSH
30942: LD_INT 1
30944: EQUAL
30945: IFFALSE 31057
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
30947: LD_EXP 3
30951: PPUSH
30952: CALL_OW 310
30956: PPUSH
30957: CALL_OW 87
// Say ( Stevens , D8-Huck-1 ) ;
30961: LD_EXP 3
30965: PPUSH
30966: LD_STRING D8-Huck-1
30968: PPUSH
30969: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
30973: LD_EXP 1
30977: PPUSH
30978: LD_STRING D8-JMM-1
30980: PPUSH
30981: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
30985: LD_EXP 3
30989: PPUSH
30990: LD_STRING D8-Huck-2
30992: PPUSH
30993: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
30997: LD_EXP 1
31001: PPUSH
31002: LD_STRING D8-JMM-2
31004: PPUSH
31005: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
31009: LD_EXP 3
31013: PPUSH
31014: LD_STRING D8-Huck-3
31016: PPUSH
31017: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
31021: LD_EXP 1
31025: PPUSH
31026: LD_STRING D8-JMM-3
31028: PPUSH
31029: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
31033: LD_EXP 3
31037: PPUSH
31038: LD_STRING D8-Huck-4
31040: PPUSH
31041: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
31045: LD_EXP 1
31049: PPUSH
31050: LD_STRING D8-JMM-4
31052: PPUSH
31053: CALL_OW 88
// end ; if StevensStatus = 0 then
31057: LD_EXP 77
31061: PUSH
31062: LD_INT 0
31064: EQUAL
31065: IFFALSE 31177
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
31067: LD_EXP 21
31071: PPUSH
31072: CALL_OW 310
31076: PPUSH
31077: CALL_OW 87
// Say ( Baker , D8-Huck-1 ) ;
31081: LD_EXP 21
31085: PPUSH
31086: LD_STRING D8-Huck-1
31088: PPUSH
31089: CALL_OW 88
// Say ( JMM , D8-JMM-1a ) ;
31093: LD_EXP 1
31097: PPUSH
31098: LD_STRING D8-JMM-1a
31100: PPUSH
31101: CALL_OW 88
// Say ( Baker , D8-Huck-2 ) ;
31105: LD_EXP 21
31109: PPUSH
31110: LD_STRING D8-Huck-2
31112: PPUSH
31113: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
31117: LD_EXP 1
31121: PPUSH
31122: LD_STRING D8-JMM-2
31124: PPUSH
31125: CALL_OW 88
// Say ( Baker , D8-Huck-3 ) ;
31129: LD_EXP 21
31133: PPUSH
31134: LD_STRING D8-Huck-3
31136: PPUSH
31137: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
31141: LD_EXP 1
31145: PPUSH
31146: LD_STRING D8-JMM-3
31148: PPUSH
31149: CALL_OW 88
// Say ( Baker , D8-Huck-4 ) ;
31153: LD_EXP 21
31157: PPUSH
31158: LD_STRING D8-Huck-4
31160: PPUSH
31161: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
31165: LD_EXP 1
31169: PPUSH
31170: LD_STRING D8-JMM-4
31172: PPUSH
31173: CALL_OW 88
// end ; DialogueOff ;
31177: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
31181: LD_INT 25
31183: PPUSH
31184: LD_INT 1
31186: PPUSH
31187: LD_INT 1
31189: PPUSH
31190: CALL_OW 322
// end ;
31194: END
// every 0 0$1 trigger timeAction >= 35 35$02 do var dec ;
31195: LD_EXP 97
31199: PUSH
31200: LD_INT 73570
31202: GREATEREQUAL
31203: IFFALSE 31553
31205: GO 31207
31207: DISABLE
31208: LD_INT 0
31210: PPUSH
// begin missionStage = 4 ;
31211: LD_ADDR_EXP 101
31215: PUSH
31216: LD_INT 4
31218: ST_TO_ADDR
// DialogueOn ;
31219: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
31223: LD_EXP 28
31227: PPUSH
31228: LD_STRING D9-Roth-1
31230: PPUSH
31231: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
31235: LD_EXP 1
31239: PPUSH
31240: LD_STRING D9-JMM-1
31242: PPUSH
31243: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
31247: LD_EXP 28
31251: PPUSH
31252: LD_STRING D9-Roth-2
31254: PPUSH
31255: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
31259: LD_EXP 28
31263: PPUSH
31264: LD_STRING D9-Roth-2a
31266: PPUSH
31267: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
31271: LD_EXP 26
31275: PPUSH
31276: LD_STRING D9-Pla-2
31278: PPUSH
31279: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
31283: LD_EXP 28
31287: PPUSH
31288: LD_STRING D9-Roth-3
31290: PPUSH
31291: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
31295: LD_EXP 26
31299: PPUSH
31300: LD_STRING D9-Pla-3
31302: PPUSH
31303: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
31307: LD_EXP 28
31311: PPUSH
31312: LD_STRING D9-Roth-4
31314: PPUSH
31315: CALL_OW 94
// dec = Query ( Q9 ) ;
31319: LD_ADDR_VAR 0 1
31323: PUSH
31324: LD_STRING Q9
31326: PPUSH
31327: CALL_OW 97
31331: ST_TO_ADDR
// if dec = 1 then
31332: LD_VAR 0 1
31336: PUSH
31337: LD_INT 1
31339: EQUAL
31340: IFFALSE 31354
// SayRadio ( Roth , D9a-Roth-1 ) ;
31342: LD_EXP 28
31346: PPUSH
31347: LD_STRING D9a-Roth-1
31349: PPUSH
31350: CALL_OW 94
// if dec = 2 then
31354: LD_VAR 0 1
31358: PUSH
31359: LD_INT 2
31361: EQUAL
31362: IFFALSE 31388
// begin Say ( JMM , D9b-JMM-1 ) ;
31364: LD_EXP 1
31368: PPUSH
31369: LD_STRING D9b-JMM-1
31371: PPUSH
31372: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
31376: LD_EXP 28
31380: PPUSH
31381: LD_STRING D9b-Roth-1
31383: PPUSH
31384: CALL_OW 94
// end ; if dec = 3 then
31388: LD_VAR 0 1
31392: PUSH
31393: LD_INT 3
31395: EQUAL
31396: IFFALSE 31458
// begin Say ( JMM , D9c-JMM-1 ) ;
31398: LD_EXP 1
31402: PPUSH
31403: LD_STRING D9c-JMM-1
31405: PPUSH
31406: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
31410: LD_EXP 28
31414: PPUSH
31415: LD_STRING D9c-Roth-1
31417: PPUSH
31418: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
31422: LD_EXP 1
31426: PPUSH
31427: LD_STRING D9c-JMM-2
31429: PPUSH
31430: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
31434: LD_EXP 28
31438: PPUSH
31439: LD_STRING D9c-Roth-2
31441: PPUSH
31442: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
31446: LD_EXP 1
31450: PPUSH
31451: LD_STRING D9c-JMM-3
31453: PPUSH
31454: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
31458: LD_EXP 28
31462: PPUSH
31463: LD_STRING D9c-Roth-3
31465: PPUSH
31466: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
31470: LD_EXP 28
31474: PPUSH
31475: LD_STRING D9cont-Roth-1
31477: PPUSH
31478: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
31482: LD_EXP 1
31486: PPUSH
31487: LD_STRING D9cont-JMM-1
31489: PPUSH
31490: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
31494: LD_EXP 28
31498: PPUSH
31499: LD_STRING D9cont-Roth-2
31501: PPUSH
31502: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
31506: LD_EXP 1
31510: PPUSH
31511: LD_STRING D9cont-JMM-2
31513: PPUSH
31514: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
31518: LD_EXP 28
31522: PPUSH
31523: LD_STRING D9cont-Roth-3
31525: PPUSH
31526: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
31530: LD_EXP 1
31534: PPUSH
31535: LD_STRING D9cont-JMM-3
31537: PPUSH
31538: CALL_OW 88
// DialogueOff ;
31542: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
31546: LD_STRING M3
31548: PPUSH
31549: CALL_OW 337
// end ;
31553: PPOPN 1
31555: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= [ 20 , 18 , 15 ] [ Difficulty ] do var i , tmp ;
31556: LD_INT 22
31558: PUSH
31559: LD_INT 7
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 21
31568: PUSH
31569: LD_INT 1
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PPUSH
31580: CALL_OW 69
31584: PUSH
31585: LD_INT 20
31587: PUSH
31588: LD_INT 18
31590: PUSH
31591: LD_INT 15
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: PUSH
31599: LD_OWVAR 67
31603: ARRAY
31604: LESSEQUAL
31605: IFFALSE 32091
31607: GO 31609
31609: DISABLE
31610: LD_INT 0
31612: PPUSH
31613: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_lives , 900 ] ] ) do
31614: LD_ADDR_VAR 0 1
31618: PUSH
31619: LD_INT 22
31621: PUSH
31622: LD_INT 7
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 21
31631: PUSH
31632: LD_INT 1
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 23
31641: PUSH
31642: LD_INT 3
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 24
31651: PUSH
31652: LD_INT 900
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: PPUSH
31665: CALL_OW 69
31669: PUSH
31670: FOR_IN
31671: IFFALSE 31702
// if GetSex ( i ) = sex_male then
31673: LD_VAR 0 1
31677: PPUSH
31678: CALL_OW 258
31682: PUSH
31683: LD_INT 1
31685: EQUAL
31686: IFFALSE 31700
// begin tmp = i ;
31688: LD_ADDR_VAR 0 2
31692: PUSH
31693: LD_VAR 0 1
31697: ST_TO_ADDR
// break ;
31698: GO 31702
// end ;
31700: GO 31670
31702: POP
31703: POP
// if tmp = 0 then
31704: LD_VAR 0 2
31708: PUSH
31709: LD_INT 0
31711: EQUAL
31712: IFFALSE 31766
// begin uc_side = 7 ;
31714: LD_ADDR_OWVAR 20
31718: PUSH
31719: LD_INT 7
31721: ST_TO_ADDR
// uc_nation = 3 ;
31722: LD_ADDR_OWVAR 21
31726: PUSH
31727: LD_INT 3
31729: ST_TO_ADDR
// hc_name =  ;
31730: LD_ADDR_OWVAR 26
31734: PUSH
31735: LD_STRING 
31737: ST_TO_ADDR
// hc_gallery =  ;
31738: LD_ADDR_OWVAR 33
31742: PUSH
31743: LD_STRING 
31745: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
31746: LD_INT 1
31748: PPUSH
31749: LD_INT 10
31751: PPUSH
31752: CALL_OW 381
// tmp = CreateHuman ;
31756: LD_ADDR_VAR 0 2
31760: PUSH
31761: CALL_OW 44
31765: ST_TO_ADDR
// end ; AllianceAI = 0 ;
31766: LD_ADDR_EXP 85
31770: PUSH
31771: LD_INT 0
31773: ST_TO_ADDR
// AllianceEscape = 1 ;
31774: LD_ADDR_EXP 91
31778: PUSH
31779: LD_INT 1
31781: ST_TO_ADDR
// SetAttitude ( 7 , 1 , att_friend , true ) ;
31782: LD_INT 7
31784: PPUSH
31785: LD_INT 1
31787: PPUSH
31788: LD_INT 1
31790: PPUSH
31791: LD_INT 1
31793: PPUSH
31794: CALL_OW 80
// DialogueOn ;
31798: CALL_OW 6
// if IsOK ( Roth ) then
31802: LD_EXP 28
31806: PPUSH
31807: CALL_OW 302
31811: IFFALSE 31825
// Say ( JMM , DAb-JMM-1 ) ;
31813: LD_EXP 1
31817: PPUSH
31818: LD_STRING DAb-JMM-1
31820: PPUSH
31821: CALL_OW 88
// if IsOK ( Roth ) then
31825: LD_EXP 28
31829: PPUSH
31830: CALL_OW 302
31834: IFFALSE 31850
// Say ( Roth , DSurrenderAlliance-Roth-1 ) else
31836: LD_EXP 28
31840: PPUSH
31841: LD_STRING DSurrenderAlliance-Roth-1
31843: PPUSH
31844: CALL_OW 88
31848: GO 31862
// Say ( tmp , DSurrenderAlliance-Sci1-1 ) ;
31850: LD_VAR 0 2
31854: PPUSH
31855: LD_STRING DSurrenderAlliance-Sci1-1
31857: PPUSH
31858: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) = 1 then
31862: LD_INT 23
31864: PPUSH
31865: LD_INT 22
31867: PUSH
31868: LD_INT 4
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PPUSH
31875: CALL_OW 70
31879: PUSH
31880: LD_INT 1
31882: EQUAL
31883: IFFALSE 31897
// Say ( JMM , DAb-JMM-1a ) ;
31885: LD_EXP 1
31889: PPUSH
31890: LD_STRING DAb-JMM-1a
31892: PPUSH
31893: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 1 then
31897: LD_INT 23
31899: PPUSH
31900: LD_INT 22
31902: PUSH
31903: LD_INT 4
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PPUSH
31910: CALL_OW 70
31914: PUSH
31915: LD_INT 1
31917: GREATER
31918: IFFALSE 31932
// Say ( JMM , DAb-JMM-1b ) ;
31920: LD_EXP 1
31924: PPUSH
31925: LD_STRING DAb-JMM-1b
31927: PPUSH
31928: CALL_OW 88
// DialogueOff ;
31932: CALL_OW 7
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 0 then
31936: LD_INT 23
31938: PPUSH
31939: LD_INT 22
31941: PUSH
31942: LD_INT 4
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PPUSH
31949: CALL_OW 70
31953: PUSH
31954: LD_INT 0
31956: GREATER
31957: IFFALSE 31984
// SetSide ( FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) , 1 ) ;
31959: LD_INT 23
31961: PPUSH
31962: LD_INT 22
31964: PUSH
31965: LD_INT 4
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PPUSH
31972: CALL_OW 70
31976: PPUSH
31977: LD_INT 1
31979: PPUSH
31980: CALL_OW 235
// if IsDying ( Roth ) then
31984: LD_EXP 28
31988: PPUSH
31989: CALL_OW 303
31993: IFFALSE 32015
// begin RothStatus = 0 ;
31995: LD_ADDR_EXP 92
31999: PUSH
32000: LD_INT 0
32002: ST_TO_ADDR
// SetLives ( Roth , 0 ) ;
32003: LD_EXP 28
32007: PPUSH
32008: LD_INT 0
32010: PPUSH
32011: CALL_OW 234
// end ; ComExitBuilding ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ) ;
32015: LD_INT 22
32017: PUSH
32018: LD_INT 7
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 21
32027: PUSH
32028: LD_INT 1
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PPUSH
32039: CALL_OW 69
32043: PPUSH
32044: CALL_OW 122
// wait ( 0 0$1 ) ;
32048: LD_INT 35
32050: PPUSH
32051: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) , AllianceEscapeArea ) ;
32055: LD_INT 22
32057: PUSH
32058: LD_INT 7
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 21
32067: PUSH
32068: LD_INT 1
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PPUSH
32079: CALL_OW 69
32083: PPUSH
32084: LD_INT 28
32086: PPUSH
32087: CALL_OW 113
// end ;
32091: PPOPN 2
32093: END
// every 0 0$1 trigger AllianceEscape = 1 and FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do var i ;
32094: LD_EXP 91
32098: PUSH
32099: LD_INT 1
32101: EQUAL
32102: PUSH
32103: LD_INT 28
32105: PPUSH
32106: LD_INT 22
32108: PUSH
32109: LD_INT 7
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 21
32118: PUSH
32119: LD_INT 1
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PPUSH
32130: CALL_OW 70
32134: AND
32135: IFFALSE 32197
32137: GO 32139
32139: DISABLE
32140: LD_INT 0
32142: PPUSH
// begin enable ;
32143: ENABLE
// for i in FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
32144: LD_ADDR_VAR 0 1
32148: PUSH
32149: LD_INT 28
32151: PPUSH
32152: LD_INT 22
32154: PUSH
32155: LD_INT 7
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 21
32164: PUSH
32165: LD_INT 1
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PPUSH
32176: CALL_OW 70
32180: PUSH
32181: FOR_IN
32182: IFFALSE 32195
// RemoveUnit ( i ) ;
32184: LD_VAR 0 1
32188: PPUSH
32189: CALL_OW 64
32193: GO 32181
32195: POP
32196: POP
// end ;
32197: PPOPN 1
32199: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 or FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 and IsOK ( Roth ) and AllianceAI = 1 do var tpUnit , heroes , rnd ;
32200: LD_INT 33
32202: PPUSH
32203: LD_INT 22
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 21
32215: PUSH
32216: LD_INT 1
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PPUSH
32227: CALL_OW 70
32231: PUSH
32232: LD_INT 0
32234: GREATER
32235: PUSH
32236: LD_INT 33
32238: PPUSH
32239: LD_INT 22
32241: PUSH
32242: LD_INT 1
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 21
32251: PUSH
32252: LD_INT 2
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 33
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 3
32271: PUSH
32272: LD_INT 58
32274: PUSH
32275: EMPTY
32276: LIST
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: PPUSH
32288: CALL_OW 70
32292: PUSH
32293: LD_INT 0
32295: GREATER
32296: PUSH
32297: LD_EXP 28
32301: PPUSH
32302: CALL_OW 302
32306: AND
32307: PUSH
32308: LD_EXP 85
32312: PUSH
32313: LD_INT 1
32315: EQUAL
32316: AND
32317: OR
32318: IFFALSE 34688
32320: GO 32322
32322: DISABLE
32323: LD_INT 0
32325: PPUSH
32326: PPUSH
32327: PPUSH
// begin tpUnit = FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_control , 1 ] ] ] ) [ 1 ] ;
32328: LD_ADDR_VAR 0 1
32332: PUSH
32333: LD_INT 33
32335: PPUSH
32336: LD_INT 22
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 2
32348: PUSH
32349: LD_INT 21
32351: PUSH
32352: LD_INT 1
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 33
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: LIST
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PPUSH
32378: CALL_OW 70
32382: PUSH
32383: LD_INT 1
32385: ARRAY
32386: ST_TO_ADDR
// heroes = [ JMM , Joan , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
32387: LD_ADDR_VAR 0 2
32391: PUSH
32392: LD_EXP 1
32396: PUSH
32397: LD_EXP 2
32401: PUSH
32402: LD_EXP 3
32406: PUSH
32407: LD_EXP 21
32411: PUSH
32412: LD_EXP 4
32416: PUSH
32417: LD_EXP 5
32421: PUSH
32422: LD_EXP 6
32426: PUSH
32427: LD_EXP 7
32431: PUSH
32432: LD_EXP 8
32436: PUSH
32437: LD_EXP 9
32441: PUSH
32442: LD_EXP 10
32446: PUSH
32447: LD_EXP 11
32451: PUSH
32452: LD_EXP 12
32456: PUSH
32457: LD_EXP 13
32461: PUSH
32462: LD_EXP 14
32466: PUSH
32467: LD_EXP 15
32471: PUSH
32472: LD_EXP 16
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: ST_TO_ADDR
// InGameOn ;
32496: CALL_OW 8
// SetAttitude ( 1 , 7 , att_friend , true ) ;
32500: LD_INT 1
32502: PPUSH
32503: LD_INT 7
32505: PPUSH
32506: LD_INT 1
32508: PPUSH
32509: LD_INT 1
32511: PPUSH
32512: CALL_OW 80
// CenterNowOnUnits ( tpUnit ) ;
32516: LD_VAR 0 1
32520: PPUSH
32521: CALL_OW 87
// if GetType ( tpUnit ) = unit_vehicle then
32525: LD_VAR 0 1
32529: PPUSH
32530: CALL_OW 247
32534: PUSH
32535: LD_INT 2
32537: EQUAL
32538: IFFALSE 32559
// tpUnit = UnitsInside ( tpUnit ) [ 1 ] ;
32540: LD_ADDR_VAR 0 1
32544: PUSH
32545: LD_VAR 0 1
32549: PPUSH
32550: CALL_OW 313
32554: PUSH
32555: LD_INT 1
32557: ARRAY
32558: ST_TO_ADDR
// ComExitVehicle ( tpUnit ) ;
32559: LD_VAR 0 1
32563: PPUSH
32564: CALL_OW 121
// wait ( 0 0$1 ) ;
32568: LD_INT 35
32570: PPUSH
32571: CALL_OW 67
// TeleportUnit ( tpUnit , 248 , 186 , 4 , true ) ;
32575: LD_VAR 0 1
32579: PPUSH
32580: LD_INT 248
32582: PPUSH
32583: LD_INT 186
32585: PPUSH
32586: LD_INT 4
32588: PPUSH
32589: LD_INT 1
32591: PPUSH
32592: CALL_OW 483
// wait ( 0 0$2 ) ;
32596: LD_INT 70
32598: PPUSH
32599: CALL_OW 67
// CenterNowOnUnits ( tpUnit ) ;
32603: LD_VAR 0 1
32607: PPUSH
32608: CALL_OW 87
// ComTurnUnit ( tpUnit , Roth ) ;
32612: LD_VAR 0 1
32616: PPUSH
32617: LD_EXP 28
32621: PPUSH
32622: CALL_OW 119
// ComTurnUnit ( [ Roth , Simms ] , tpUnit ) ;
32626: LD_EXP 28
32630: PUSH
32631: LD_EXP 48
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PPUSH
32640: LD_VAR 0 1
32644: PPUSH
32645: CALL_OW 119
// if tpUnit = JMM then
32649: LD_VAR 0 1
32653: PUSH
32654: LD_EXP 1
32658: EQUAL
32659: IFFALSE 32673
// Say ( JMM , DA1-JMM-1 ) ;
32661: LD_EXP 1
32665: PPUSH
32666: LD_STRING DA1-JMM-1
32668: PPUSH
32669: CALL_OW 88
// if tpUnit = Joan then
32673: LD_VAR 0 1
32677: PUSH
32678: LD_EXP 2
32682: EQUAL
32683: IFFALSE 32697
// Say ( Joan , DA1-Joan-1 ) ;
32685: LD_EXP 2
32689: PPUSH
32690: LD_STRING DA1-Joan-1
32692: PPUSH
32693: CALL_OW 88
// if tpUnit = Lisa then
32697: LD_VAR 0 1
32701: PUSH
32702: LD_EXP 4
32706: EQUAL
32707: IFFALSE 32721
// Say ( Lisa , DA1-Lisa-1 ) ;
32709: LD_EXP 4
32713: PPUSH
32714: LD_STRING DA1-Lisa-1
32716: PPUSH
32717: CALL_OW 88
// if tpUnit = Donaldson then
32721: LD_VAR 0 1
32725: PUSH
32726: LD_EXP 5
32730: EQUAL
32731: IFFALSE 32745
// Say ( Donaldson , DA1-Don-1 ) ;
32733: LD_EXP 5
32737: PPUSH
32738: LD_STRING DA1-Don-1
32740: PPUSH
32741: CALL_OW 88
// if tpUnit = Cornel then
32745: LD_VAR 0 1
32749: PUSH
32750: LD_EXP 12
32754: EQUAL
32755: IFFALSE 32769
// Say ( Cornel , DA1-Corn-1 ) ;
32757: LD_EXP 12
32761: PPUSH
32762: LD_STRING DA1-Corn-1
32764: PPUSH
32765: CALL_OW 88
// if tpUnit = Denis then
32769: LD_VAR 0 1
32773: PUSH
32774: LD_EXP 8
32778: EQUAL
32779: IFFALSE 32793
// Say ( Denis , DA1-Den-1 ) ;
32781: LD_EXP 8
32785: PPUSH
32786: LD_STRING DA1-Den-1
32788: PPUSH
32789: CALL_OW 88
// if tpUnit = Bobby then
32793: LD_VAR 0 1
32797: PUSH
32798: LD_EXP 6
32802: EQUAL
32803: IFFALSE 32817
// Say ( Bobby , DA1-Bobby-1 ) ;
32805: LD_EXP 6
32809: PPUSH
32810: LD_STRING DA1-Bobby-1
32812: PPUSH
32813: CALL_OW 88
// if tpUnit = Gladstone then
32817: LD_VAR 0 1
32821: PUSH
32822: LD_EXP 10
32826: EQUAL
32827: IFFALSE 32841
// Say ( Gladstone , DA1-Glad-1 ) ;
32829: LD_EXP 10
32833: PPUSH
32834: LD_STRING DA1-Glad-1
32836: PPUSH
32837: CALL_OW 88
// if tpUnit = Cyrus then
32841: LD_VAR 0 1
32845: PUSH
32846: LD_EXP 7
32850: EQUAL
32851: IFFALSE 32865
// Say ( Cyrus , DA1-Cyrus-1 ) ;
32853: LD_EXP 7
32857: PPUSH
32858: LD_STRING DA1-Cyrus-1
32860: PPUSH
32861: CALL_OW 88
// if tpUnit = Stevens then
32865: LD_VAR 0 1
32869: PUSH
32870: LD_EXP 3
32874: EQUAL
32875: IFFALSE 32889
// Say ( Stevens , DA1-Huck-1 ) ;
32877: LD_EXP 3
32881: PPUSH
32882: LD_STRING DA1-Huck-1
32884: PPUSH
32885: CALL_OW 88
// if tpUnit = Baker then
32889: LD_VAR 0 1
32893: PUSH
32894: LD_EXP 21
32898: EQUAL
32899: IFFALSE 32913
// Say ( Baker , DA1-Huck-1 ) ;
32901: LD_EXP 21
32905: PPUSH
32906: LD_STRING DA1-Huck-1
32908: PPUSH
32909: CALL_OW 88
// if tpUnit = Brown then
32913: LD_VAR 0 1
32917: PUSH
32918: LD_EXP 9
32922: EQUAL
32923: IFFALSE 32937
// Say ( Brown , DA1-Brown-1 ) ;
32925: LD_EXP 9
32929: PPUSH
32930: LD_STRING DA1-Brown-1
32932: PPUSH
32933: CALL_OW 88
// if tpUnit = Gary then
32937: LD_VAR 0 1
32941: PUSH
32942: LD_EXP 13
32946: EQUAL
32947: IFFALSE 32961
// Say ( Gary , DA1-Gary-1 ) ;
32949: LD_EXP 13
32953: PPUSH
32954: LD_STRING DA1-Gary-1
32956: PPUSH
32957: CALL_OW 88
// if tpUnit = Connie then
32961: LD_VAR 0 1
32965: PUSH
32966: LD_EXP 16
32970: EQUAL
32971: IFFALSE 32985
// Say ( Connie , DA1-Con-1 ) ;
32973: LD_EXP 16
32977: PPUSH
32978: LD_STRING DA1-Con-1
32980: PPUSH
32981: CALL_OW 88
// if tpUnit = Kurt then
32985: LD_VAR 0 1
32989: PUSH
32990: LD_EXP 30
32994: EQUAL
32995: IFFALSE 33009
// Say ( Kurt , DA1-Kurt-1 ) ;
32997: LD_EXP 30
33001: PPUSH
33002: LD_STRING DA1-Kurt-1
33004: PPUSH
33005: CALL_OW 88
// if tpUnit = Kikuchi then
33009: LD_VAR 0 1
33013: PUSH
33014: LD_EXP 15
33018: EQUAL
33019: IFFALSE 33033
// Say ( Kikuchi , DA1-Yam-1 ) ;
33021: LD_EXP 15
33025: PPUSH
33026: LD_STRING DA1-Yam-1
33028: PPUSH
33029: CALL_OW 88
// if tpUnit = Frank then
33033: LD_VAR 0 1
33037: PUSH
33038: LD_EXP 14
33042: EQUAL
33043: IFFALSE 33057
// Say ( Frank , DA1-Frank-1 ) ;
33045: LD_EXP 14
33049: PPUSH
33050: LD_STRING DA1-Frank-1
33052: PPUSH
33053: CALL_OW 88
// if not tpUnit in heroes then
33057: LD_VAR 0 1
33061: PUSH
33062: LD_VAR 0 2
33066: IN
33067: NOT
33068: IFFALSE 33124
// begin if GetSex ( tpUnit ) = 1 then
33070: LD_VAR 0 1
33074: PPUSH
33075: CALL_OW 258
33079: PUSH
33080: LD_INT 1
33082: EQUAL
33083: IFFALSE 33097
// Say ( tpUnit , DA1-Sol1-1 ) ;
33085: LD_VAR 0 1
33089: PPUSH
33090: LD_STRING DA1-Sol1-1
33092: PPUSH
33093: CALL_OW 88
// if GetSex ( tpUnit ) = 2 then
33097: LD_VAR 0 1
33101: PPUSH
33102: CALL_OW 258
33106: PUSH
33107: LD_INT 2
33109: EQUAL
33110: IFFALSE 33124
// Say ( tpUnit , DA1-FSol1-1 ) ;
33112: LD_VAR 0 1
33116: PPUSH
33117: LD_STRING DA1-FSol1-1
33119: PPUSH
33120: CALL_OW 88
// end ; Say ( Roth , DA-Roth-1 ) ;
33124: LD_EXP 28
33128: PPUSH
33129: LD_STRING DA-Roth-1
33131: PPUSH
33132: CALL_OW 88
// Say ( Simms , DA-Sim-1 ) ;
33136: LD_EXP 48
33140: PPUSH
33141: LD_STRING DA-Sim-1
33143: PPUSH
33144: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
33148: LD_EXP 28
33152: PPUSH
33153: LD_STRING DA-Roth-2
33155: PPUSH
33156: CALL_OW 88
// if tpUnit = JMM then
33160: LD_VAR 0 1
33164: PUSH
33165: LD_EXP 1
33169: EQUAL
33170: IFFALSE 33203
// begin Say ( JMM , DA1-JMM-1a ) ;
33172: LD_EXP 1
33176: PPUSH
33177: LD_STRING DA1-JMM-1a
33179: PPUSH
33180: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33184: LD_EXP 28
33188: PPUSH
33189: LD_STRING DA-Roth-3a
33191: PPUSH
33192: CALL_OW 88
// YouLost ( JMMCaptured ) ;
33196: LD_STRING JMMCaptured
33198: PPUSH
33199: CALL_OW 104
// end ; if tpUnit = Joan then
33203: LD_VAR 0 1
33207: PUSH
33208: LD_EXP 2
33212: EQUAL
33213: IFFALSE 33275
// begin Say ( Joan , DA1-Joan-1a ) ;
33215: LD_EXP 2
33219: PPUSH
33220: LD_STRING DA1-Joan-1a
33222: PPUSH
33223: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33227: LD_EXP 28
33231: PPUSH
33232: LD_STRING DA-Roth-3a
33234: PPUSH
33235: CALL_OW 88
// SetSide ( Joan , 4 ) ;
33239: LD_EXP 2
33243: PPUSH
33244: LD_INT 4
33246: PPUSH
33247: CALL_OW 235
// ComMoveXY ( Joan , 257 , 198 ) ;
33251: LD_EXP 2
33255: PPUSH
33256: LD_INT 257
33258: PPUSH
33259: LD_INT 198
33261: PPUSH
33262: CALL_OW 111
// AddComHold ( Joan ) ;
33266: LD_EXP 2
33270: PPUSH
33271: CALL_OW 200
// end ; if tpUnit = Donaldson then
33275: LD_VAR 0 1
33279: PUSH
33280: LD_EXP 5
33284: EQUAL
33285: IFFALSE 33338
// begin Say ( Donaldson , DA1-Don-1a ) ;
33287: LD_EXP 5
33291: PPUSH
33292: LD_STRING DA1-Don-1a
33294: PPUSH
33295: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33299: LD_EXP 28
33303: PPUSH
33304: LD_STRING DA-Roth-3
33306: PPUSH
33307: CALL_OW 88
// SetSide ( Donaldson , 7 ) ;
33311: LD_EXP 5
33315: PPUSH
33316: LD_INT 7
33318: PPUSH
33319: CALL_OW 235
// ComMoveXY ( Donaldson , 240 , 188 ) ;
33323: LD_EXP 5
33327: PPUSH
33328: LD_INT 240
33330: PPUSH
33331: LD_INT 188
33333: PPUSH
33334: CALL_OW 111
// end ; if tpUnit = Cornel then
33338: LD_VAR 0 1
33342: PUSH
33343: LD_EXP 12
33347: EQUAL
33348: IFFALSE 33410
// begin Say ( Cornel , DA1-Corn-1a ) ;
33350: LD_EXP 12
33354: PPUSH
33355: LD_STRING DA1-Corn-1a
33357: PPUSH
33358: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33362: LD_EXP 28
33366: PPUSH
33367: LD_STRING DA-Roth-3a
33369: PPUSH
33370: CALL_OW 88
// SetSide ( Cornel , 4 ) ;
33374: LD_EXP 12
33378: PPUSH
33379: LD_INT 4
33381: PPUSH
33382: CALL_OW 235
// ComMoveXY ( Cornel , 257 , 198 ) ;
33386: LD_EXP 12
33390: PPUSH
33391: LD_INT 257
33393: PPUSH
33394: LD_INT 198
33396: PPUSH
33397: CALL_OW 111
// AddComHold ( Cornel ) ;
33401: LD_EXP 12
33405: PPUSH
33406: CALL_OW 200
// end ; if tpUnit = Denis then
33410: LD_VAR 0 1
33414: PUSH
33415: LD_EXP 8
33419: EQUAL
33420: IFFALSE 33473
// begin Say ( Denis , DA1-Den-1a ) ;
33422: LD_EXP 8
33426: PPUSH
33427: LD_STRING DA1-Den-1a
33429: PPUSH
33430: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33434: LD_EXP 28
33438: PPUSH
33439: LD_STRING DA-Roth-3
33441: PPUSH
33442: CALL_OW 88
// SetSide ( Denis , 7 ) ;
33446: LD_EXP 8
33450: PPUSH
33451: LD_INT 7
33453: PPUSH
33454: CALL_OW 235
// ComMoveXY ( Denis , 240 , 188 ) ;
33458: LD_EXP 8
33462: PPUSH
33463: LD_INT 240
33465: PPUSH
33466: LD_INT 188
33468: PPUSH
33469: CALL_OW 111
// end ; if tpUnit = Bobby then
33473: LD_VAR 0 1
33477: PUSH
33478: LD_EXP 6
33482: EQUAL
33483: IFFALSE 33536
// begin Say ( Joan , DA1-Bobby-1a ) ;
33485: LD_EXP 2
33489: PPUSH
33490: LD_STRING DA1-Bobby-1a
33492: PPUSH
33493: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33497: LD_EXP 28
33501: PPUSH
33502: LD_STRING DA-Roth-3
33504: PPUSH
33505: CALL_OW 88
// SetSide ( Bobby , 7 ) ;
33509: LD_EXP 6
33513: PPUSH
33514: LD_INT 7
33516: PPUSH
33517: CALL_OW 235
// ComMoveXY ( Bobby , 240 , 188 ) ;
33521: LD_EXP 6
33525: PPUSH
33526: LD_INT 240
33528: PPUSH
33529: LD_INT 188
33531: PPUSH
33532: CALL_OW 111
// end ; if tpUnit = Gladstone then
33536: LD_VAR 0 1
33540: PUSH
33541: LD_EXP 10
33545: EQUAL
33546: IFFALSE 33608
// begin Say ( Gladstone , DA1-Glad-1a ) ;
33548: LD_EXP 10
33552: PPUSH
33553: LD_STRING DA1-Glad-1a
33555: PPUSH
33556: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33560: LD_EXP 28
33564: PPUSH
33565: LD_STRING DA-Roth-3a
33567: PPUSH
33568: CALL_OW 88
// SetSide ( Gladstone , 4 ) ;
33572: LD_EXP 10
33576: PPUSH
33577: LD_INT 4
33579: PPUSH
33580: CALL_OW 235
// ComMoveXY ( Gladstone , 257 , 198 ) ;
33584: LD_EXP 10
33588: PPUSH
33589: LD_INT 257
33591: PPUSH
33592: LD_INT 198
33594: PPUSH
33595: CALL_OW 111
// AddComHold ( Gladstone ) ;
33599: LD_EXP 10
33603: PPUSH
33604: CALL_OW 200
// end ; if tpUnit = Cyrus then
33608: LD_VAR 0 1
33612: PUSH
33613: LD_EXP 7
33617: EQUAL
33618: IFFALSE 33680
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
33620: LD_EXP 7
33624: PPUSH
33625: LD_STRING DA1-Cyrus-1a
33627: PPUSH
33628: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33632: LD_EXP 28
33636: PPUSH
33637: LD_STRING DA-Roth-3a
33639: PPUSH
33640: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
33644: LD_EXP 7
33648: PPUSH
33649: LD_INT 4
33651: PPUSH
33652: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
33656: LD_EXP 7
33660: PPUSH
33661: LD_INT 257
33663: PPUSH
33664: LD_INT 198
33666: PPUSH
33667: CALL_OW 111
// AddComHold ( Cyrus ) ;
33671: LD_EXP 7
33675: PPUSH
33676: CALL_OW 200
// end ; if tpUnit = Stevens then
33680: LD_VAR 0 1
33684: PUSH
33685: LD_EXP 3
33689: EQUAL
33690: IFFALSE 33743
// begin Say ( Stevens , DA1-Huck-1a ) ;
33692: LD_EXP 3
33696: PPUSH
33697: LD_STRING DA1-Huck-1a
33699: PPUSH
33700: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33704: LD_EXP 28
33708: PPUSH
33709: LD_STRING DA-Roth-3
33711: PPUSH
33712: CALL_OW 88
// SetSide ( Stevens , 7 ) ;
33716: LD_EXP 3
33720: PPUSH
33721: LD_INT 7
33723: PPUSH
33724: CALL_OW 235
// ComMoveXY ( Stevens , 240 , 188 ) ;
33728: LD_EXP 3
33732: PPUSH
33733: LD_INT 240
33735: PPUSH
33736: LD_INT 188
33738: PPUSH
33739: CALL_OW 111
// end ; if tpUnit = Baker then
33743: LD_VAR 0 1
33747: PUSH
33748: LD_EXP 21
33752: EQUAL
33753: IFFALSE 33806
// begin Say ( Baker , DA1-Huck-1a ) ;
33755: LD_EXP 21
33759: PPUSH
33760: LD_STRING DA1-Huck-1a
33762: PPUSH
33763: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33767: LD_EXP 28
33771: PPUSH
33772: LD_STRING DA-Roth-3
33774: PPUSH
33775: CALL_OW 88
// SetSide ( Baker , 7 ) ;
33779: LD_EXP 21
33783: PPUSH
33784: LD_INT 7
33786: PPUSH
33787: CALL_OW 235
// ComMoveXY ( Baker , 240 , 188 ) ;
33791: LD_EXP 21
33795: PPUSH
33796: LD_INT 240
33798: PPUSH
33799: LD_INT 188
33801: PPUSH
33802: CALL_OW 111
// end ; if tpUnit = Brown then
33806: LD_VAR 0 1
33810: PUSH
33811: LD_EXP 9
33815: EQUAL
33816: IFFALSE 33869
// begin Say ( Cyrus , DA1-Brown-1a ) ;
33818: LD_EXP 7
33822: PPUSH
33823: LD_STRING DA1-Brown-1a
33825: PPUSH
33826: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33830: LD_EXP 28
33834: PPUSH
33835: LD_STRING DA-Roth-3
33837: PPUSH
33838: CALL_OW 88
// SetSide ( Brown , 7 ) ;
33842: LD_EXP 9
33846: PPUSH
33847: LD_INT 7
33849: PPUSH
33850: CALL_OW 235
// ComMoveXY ( Brown , 240 , 188 ) ;
33854: LD_EXP 9
33858: PPUSH
33859: LD_INT 240
33861: PPUSH
33862: LD_INT 188
33864: PPUSH
33865: CALL_OW 111
// end ; if tpUnit = Gary then
33869: LD_VAR 0 1
33873: PUSH
33874: LD_EXP 13
33878: EQUAL
33879: IFFALSE 33941
// begin Say ( Gary , DA1-Gary-1a ) ;
33881: LD_EXP 13
33885: PPUSH
33886: LD_STRING DA1-Gary-1a
33888: PPUSH
33889: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33893: LD_EXP 28
33897: PPUSH
33898: LD_STRING DA-Roth-3a
33900: PPUSH
33901: CALL_OW 88
// SetSide ( Gary , 4 ) ;
33905: LD_EXP 13
33909: PPUSH
33910: LD_INT 4
33912: PPUSH
33913: CALL_OW 235
// ComMoveXY ( Gary , 257 , 198 ) ;
33917: LD_EXP 13
33921: PPUSH
33922: LD_INT 257
33924: PPUSH
33925: LD_INT 198
33927: PPUSH
33928: CALL_OW 111
// AddComHold ( Gary ) ;
33932: LD_EXP 13
33936: PPUSH
33937: CALL_OW 200
// end ; if tpUnit = Cyrus then
33941: LD_VAR 0 1
33945: PUSH
33946: LD_EXP 7
33950: EQUAL
33951: IFFALSE 34013
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
33953: LD_EXP 7
33957: PPUSH
33958: LD_STRING DA1-Cyrus-1a
33960: PPUSH
33961: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33965: LD_EXP 28
33969: PPUSH
33970: LD_STRING DA-Roth-3a
33972: PPUSH
33973: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
33977: LD_EXP 7
33981: PPUSH
33982: LD_INT 4
33984: PPUSH
33985: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
33989: LD_EXP 7
33993: PPUSH
33994: LD_INT 257
33996: PPUSH
33997: LD_INT 198
33999: PPUSH
34000: CALL_OW 111
// AddComHold ( Cyrus ) ;
34004: LD_EXP 7
34008: PPUSH
34009: CALL_OW 200
// end ; if tpUnit = Connie then
34013: LD_VAR 0 1
34017: PUSH
34018: LD_EXP 16
34022: EQUAL
34023: IFFALSE 34085
// begin Say ( Connie , DA1-Con-1a ) ;
34025: LD_EXP 16
34029: PPUSH
34030: LD_STRING DA1-Con-1a
34032: PPUSH
34033: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34037: LD_EXP 28
34041: PPUSH
34042: LD_STRING DA-Roth-3a
34044: PPUSH
34045: CALL_OW 88
// SetSide ( Connie , 4 ) ;
34049: LD_EXP 16
34053: PPUSH
34054: LD_INT 4
34056: PPUSH
34057: CALL_OW 235
// ComMoveXY ( Connie , 257 , 198 ) ;
34061: LD_EXP 16
34065: PPUSH
34066: LD_INT 257
34068: PPUSH
34069: LD_INT 198
34071: PPUSH
34072: CALL_OW 111
// AddComHold ( Connie ) ;
34076: LD_EXP 16
34080: PPUSH
34081: CALL_OW 200
// end ; if tpUnit = Kurt then
34085: LD_VAR 0 1
34089: PUSH
34090: LD_EXP 30
34094: EQUAL
34095: IFFALSE 34157
// begin Say ( Kurt , DA1-Kurt-1a ) ;
34097: LD_EXP 30
34101: PPUSH
34102: LD_STRING DA1-Kurt-1a
34104: PPUSH
34105: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34109: LD_EXP 28
34113: PPUSH
34114: LD_STRING DA-Roth-3a
34116: PPUSH
34117: CALL_OW 88
// SetSide ( Kurt , 4 ) ;
34121: LD_EXP 30
34125: PPUSH
34126: LD_INT 4
34128: PPUSH
34129: CALL_OW 235
// ComMoveXY ( Kurt , 257 , 198 ) ;
34133: LD_EXP 30
34137: PPUSH
34138: LD_INT 257
34140: PPUSH
34141: LD_INT 198
34143: PPUSH
34144: CALL_OW 111
// AddComHold ( Kurt ) ;
34148: LD_EXP 30
34152: PPUSH
34153: CALL_OW 200
// end ; if tpUnit = Kikuchi then
34157: LD_VAR 0 1
34161: PUSH
34162: LD_EXP 15
34166: EQUAL
34167: IFFALSE 34220
// begin Say ( Kikuchi , DA1-Yam-1a ) ;
34169: LD_EXP 15
34173: PPUSH
34174: LD_STRING DA1-Yam-1a
34176: PPUSH
34177: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34181: LD_EXP 28
34185: PPUSH
34186: LD_STRING DA-Roth-3
34188: PPUSH
34189: CALL_OW 88
// SetSide ( Kikuchi , 7 ) ;
34193: LD_EXP 15
34197: PPUSH
34198: LD_INT 7
34200: PPUSH
34201: CALL_OW 235
// ComMoveXY ( Kikuchi , 240 , 188 ) ;
34205: LD_EXP 15
34209: PPUSH
34210: LD_INT 240
34212: PPUSH
34213: LD_INT 188
34215: PPUSH
34216: CALL_OW 111
// end ; if tpUnit = Frank then
34220: LD_VAR 0 1
34224: PUSH
34225: LD_EXP 14
34229: EQUAL
34230: IFFALSE 34292
// begin Say ( Frank , DA1-Frank-1a ) ;
34232: LD_EXP 14
34236: PPUSH
34237: LD_STRING DA1-Frank-1a
34239: PPUSH
34240: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34244: LD_EXP 28
34248: PPUSH
34249: LD_STRING DA-Roth-3a
34251: PPUSH
34252: CALL_OW 88
// SetSide ( Frank , 4 ) ;
34256: LD_EXP 14
34260: PPUSH
34261: LD_INT 4
34263: PPUSH
34264: CALL_OW 235
// ComMoveXY ( Frank , 257 , 198 ) ;
34268: LD_EXP 14
34272: PPUSH
34273: LD_INT 257
34275: PPUSH
34276: LD_INT 198
34278: PPUSH
34279: CALL_OW 111
// AddComHold ( Frank ) ;
34283: LD_EXP 14
34287: PPUSH
34288: CALL_OW 200
// end ; if allianceFirstContact = 0 then
34292: LD_EXP 64
34296: PUSH
34297: LD_INT 0
34299: EQUAL
34300: IFFALSE 34346
// begin Say ( JMM , DAa-JMM-1 ) ;
34302: LD_EXP 1
34306: PPUSH
34307: LD_STRING DAa-JMM-1
34309: PPUSH
34310: CALL_OW 88
// Say ( JMM , DAa-JMM-1a ) ;
34314: LD_EXP 1
34318: PPUSH
34319: LD_STRING DAa-JMM-1a
34321: PPUSH
34322: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
34326: LD_EXP 1
34330: PPUSH
34331: LD_STRING DAa-JMM-1b
34333: PPUSH
34334: CALL_OW 88
// allianceFirstContact = 1 ;
34338: LD_ADDR_EXP 64
34342: PUSH
34343: LD_INT 1
34345: ST_TO_ADDR
// end ; if not tpUnit in heroes then
34346: LD_VAR 0 1
34350: PUSH
34351: LD_VAR 0 2
34355: IN
34356: NOT
34357: IFFALSE 34667
// begin rnd = Rand ( 1 , 2 ) ;
34359: LD_ADDR_VAR 0 3
34363: PUSH
34364: LD_INT 1
34366: PPUSH
34367: LD_INT 2
34369: PPUSH
34370: CALL_OW 12
34374: ST_TO_ADDR
// if GetSex ( tpUnit ) = 1 then
34375: LD_VAR 0 1
34379: PPUSH
34380: CALL_OW 258
34384: PUSH
34385: LD_INT 1
34387: EQUAL
34388: IFFALSE 34521
// begin if rnd = 1 then
34390: LD_VAR 0 3
34394: PUSH
34395: LD_INT 1
34397: EQUAL
34398: IFFALSE 34460
// begin Say ( tpUnit , DA1-Sol1-1a ) ;
34400: LD_VAR 0 1
34404: PPUSH
34405: LD_STRING DA1-Sol1-1a
34407: PPUSH
34408: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34412: LD_EXP 28
34416: PPUSH
34417: LD_STRING DA-Roth-3a
34419: PPUSH
34420: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
34424: LD_VAR 0 1
34428: PPUSH
34429: LD_INT 4
34431: PPUSH
34432: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
34436: LD_VAR 0 1
34440: PPUSH
34441: LD_INT 257
34443: PPUSH
34444: LD_INT 198
34446: PPUSH
34447: CALL_OW 111
// AddComHold ( tpUnit ) ;
34451: LD_VAR 0 1
34455: PPUSH
34456: CALL_OW 200
// end ; if rnd = 2 then
34460: LD_VAR 0 3
34464: PUSH
34465: LD_INT 2
34467: EQUAL
34468: IFFALSE 34521
// begin Say ( tpUnit , DA1-Sol1-1b ) ;
34470: LD_VAR 0 1
34474: PPUSH
34475: LD_STRING DA1-Sol1-1b
34477: PPUSH
34478: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34482: LD_EXP 28
34486: PPUSH
34487: LD_STRING DA-Roth-3
34489: PPUSH
34490: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
34494: LD_VAR 0 1
34498: PPUSH
34499: LD_INT 7
34501: PPUSH
34502: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
34506: LD_VAR 0 1
34510: PPUSH
34511: LD_INT 240
34513: PPUSH
34514: LD_INT 188
34516: PPUSH
34517: CALL_OW 111
// end ; end ; if GetSex ( tpUnit ) = 2 then
34521: LD_VAR 0 1
34525: PPUSH
34526: CALL_OW 258
34530: PUSH
34531: LD_INT 2
34533: EQUAL
34534: IFFALSE 34667
// begin if rnd = 1 then
34536: LD_VAR 0 3
34540: PUSH
34541: LD_INT 1
34543: EQUAL
34544: IFFALSE 34606
// begin Say ( tpUnit , DA1-FSol1-1a ) ;
34546: LD_VAR 0 1
34550: PPUSH
34551: LD_STRING DA1-FSol1-1a
34553: PPUSH
34554: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34558: LD_EXP 28
34562: PPUSH
34563: LD_STRING DA-Roth-3a
34565: PPUSH
34566: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
34570: LD_VAR 0 1
34574: PPUSH
34575: LD_INT 4
34577: PPUSH
34578: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
34582: LD_VAR 0 1
34586: PPUSH
34587: LD_INT 257
34589: PPUSH
34590: LD_INT 198
34592: PPUSH
34593: CALL_OW 111
// AddComHold ( tpUnit ) ;
34597: LD_VAR 0 1
34601: PPUSH
34602: CALL_OW 200
// end ; if rnd = 2 then
34606: LD_VAR 0 3
34610: PUSH
34611: LD_INT 2
34613: EQUAL
34614: IFFALSE 34667
// begin Say ( tpUnit , DA1-FSol1-1b ) ;
34616: LD_VAR 0 1
34620: PPUSH
34621: LD_STRING DA1-FSol1-1b
34623: PPUSH
34624: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34628: LD_EXP 28
34632: PPUSH
34633: LD_STRING DA-Roth-3
34635: PPUSH
34636: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
34640: LD_VAR 0 1
34644: PPUSH
34645: LD_INT 7
34647: PPUSH
34648: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
34652: LD_VAR 0 1
34656: PPUSH
34657: LD_INT 240
34659: PPUSH
34660: LD_INT 188
34662: PPUSH
34663: CALL_OW 111
// end ; end ; end ; SetAttitude ( 1 , 7 , att_enemy , true ) ;
34667: LD_INT 1
34669: PPUSH
34670: LD_INT 7
34672: PPUSH
34673: LD_INT 2
34675: PPUSH
34676: LD_INT 1
34678: PPUSH
34679: CALL_OW 80
// InGameOff ;
34683: CALL_OW 9
// enable ;
34687: ENABLE
// end ;
34688: PPOPN 3
34690: END
// every 0 0$1 trigger timeAction >= 45 45$02 do
34691: LD_EXP 97
34695: PUSH
34696: LD_INT 94570
34698: GREATEREQUAL
34699: IFFALSE 35018
34701: GO 34703
34703: DISABLE
// begin DialogueOn ;
34704: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-1 , D5-FSol1-1 ) ;
34708: LD_INT 22
34710: PUSH
34711: LD_INT 1
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 23
34720: PUSH
34721: LD_INT 1
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 26
34730: PUSH
34731: LD_INT 1
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 2
34740: PUSH
34741: LD_INT 25
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 25
34753: PUSH
34754: LD_INT 2
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 25
34763: PUSH
34764: LD_INT 3
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 25
34773: PUSH
34774: LD_INT 4
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 25
34783: PUSH
34784: LD_INT 5
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 25
34793: PUSH
34794: LD_INT 8
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: PPUSH
34816: CALL_OW 69
34820: PPUSH
34821: LD_STRING D11-Sol1-1
34823: PPUSH
34824: LD_STRING D5-FSol1-1
34826: PPUSH
34827: CALL 6896 0 3
// SayRadio ( Platonov , D11-Pla-1 ) ;
34831: LD_EXP 26
34835: PPUSH
34836: LD_STRING D11-Pla-1
34838: PPUSH
34839: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
34843: LD_EXP 37
34847: PPUSH
34848: LD_STRING D11-Kov-1
34850: PPUSH
34851: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
34855: LD_EXP 26
34859: PPUSH
34860: LD_STRING D11-Pla-2
34862: PPUSH
34863: CALL_OW 94
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-2 , D5-FSol1-1 ) ;
34867: LD_INT 22
34869: PUSH
34870: LD_INT 1
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 23
34879: PUSH
34880: LD_INT 1
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 26
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 2
34899: PUSH
34900: LD_INT 25
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 25
34912: PUSH
34913: LD_INT 2
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 25
34922: PUSH
34923: LD_INT 3
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 25
34932: PUSH
34933: LD_INT 4
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 25
34942: PUSH
34943: LD_INT 5
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 25
34952: PUSH
34953: LD_INT 8
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: PPUSH
34975: CALL_OW 69
34979: PPUSH
34980: LD_STRING D11-Sol1-2
34982: PPUSH
34983: LD_STRING D5-FSol1-1
34985: PPUSH
34986: CALL 6896 0 3
// Say ( JMM , D11-JMM-2 ) ;
34990: LD_EXP 1
34994: PPUSH
34995: LD_STRING D11-JMM-2
34997: PPUSH
34998: CALL_OW 88
// DialogueOff ;
35002: CALL_OW 7
// PreapreMehBehs ;
35006: CALL 5745 0 0
// missionStage = 5 ;
35010: LD_ADDR_EXP 101
35014: PUSH
35015: LD_INT 5
35017: ST_TO_ADDR
// end ;
35018: END
// every 0 0$1 trigger timeAction >= 50 50$02 do var dec , time ;
35019: LD_EXP 97
35023: PUSH
35024: LD_INT 105070
35026: GREATEREQUAL
35027: IFFALSE 35421
35029: GO 35031
35031: DISABLE
35032: LD_INT 0
35034: PPUSH
35035: PPUSH
// begin time = 0 0$00 ;
35036: LD_ADDR_VAR 0 2
35040: PUSH
35041: LD_INT 0
35043: ST_TO_ADDR
// DialogueOn ;
35044: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
35048: LD_EXP 26
35052: PPUSH
35053: LD_STRING D15-Pla-1
35055: PPUSH
35056: CALL_OW 94
// dec = Query ( Q15a ) ;
35060: LD_ADDR_VAR 0 1
35064: PUSH
35065: LD_STRING Q15a
35067: PPUSH
35068: CALL_OW 97
35072: ST_TO_ADDR
// if dec = 1 then
35073: LD_VAR 0 1
35077: PUSH
35078: LD_INT 1
35080: EQUAL
35081: IFFALSE 35102
// begin Say ( JMM , D15a-JMM-1 ) ;
35083: LD_EXP 1
35087: PPUSH
35088: LD_STRING D15a-JMM-1
35090: PPUSH
35091: CALL_OW 88
// YouLost ( Surrender ) ;
35095: LD_STRING Surrender
35097: PPUSH
35098: CALL_OW 104
// end ; if dec = 2 then
35102: LD_VAR 0 1
35106: PUSH
35107: LD_INT 2
35109: EQUAL
35110: IFFALSE 35140
// begin Say ( JMM , D15b-JMM-1 ) ;
35112: LD_EXP 1
35116: PPUSH
35117: LD_STRING D15b-JMM-1
35119: PPUSH
35120: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
35124: LD_EXP 26
35128: PPUSH
35129: LD_STRING D15b-Pla-1
35131: PPUSH
35132: CALL_OW 94
// DialogueOff ;
35136: CALL_OW 7
// end ; if dec = 3 then
35140: LD_VAR 0 1
35144: PUSH
35145: LD_INT 3
35147: EQUAL
35148: IFFALSE 35224
// begin Say ( JMM , D15c-JMM-1 ) ;
35150: LD_EXP 1
35154: PPUSH
35155: LD_STRING D15c-JMM-1
35157: PPUSH
35158: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
35162: LD_EXP 26
35166: PPUSH
35167: LD_STRING D15c-Pla-1
35169: PPUSH
35170: CALL_OW 94
// DialogueOff ;
35174: CALL_OW 7
// wait ( 0 0$15 ) ;
35178: LD_INT 525
35180: PPUSH
35181: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35185: LD_EXP 26
35189: PPUSH
35190: LD_STRING D18-Pla-1
35192: PPUSH
35193: CALL_OW 88
// ComAttackPlace ( rurocket , GetX ( JMM ) , GetY ( JMM ) ) ;
35197: LD_INT 273
35199: PPUSH
35200: LD_EXP 1
35204: PPUSH
35205: CALL_OW 250
35209: PPUSH
35210: LD_EXP 1
35214: PPUSH
35215: CALL_OW 251
35219: PPUSH
35220: CALL_OW 116
// end ; if dec = 4 then
35224: LD_VAR 0 1
35228: PUSH
35229: LD_INT 4
35231: EQUAL
35232: IFFALSE 35270
// begin Say ( JMM , D15d-JMM-1 ) ;
35234: LD_EXP 1
35238: PPUSH
35239: LD_STRING D15d-JMM-1
35241: PPUSH
35242: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35246: LD_EXP 26
35250: PPUSH
35251: LD_STRING D15d-Pla-1
35253: PPUSH
35254: CALL_OW 94
// DialogueOff ;
35258: CALL_OW 7
// missionStage = 6 ;
35262: LD_ADDR_EXP 101
35266: PUSH
35267: LD_INT 6
35269: ST_TO_ADDR
// end ; if dec = 2 then
35270: LD_VAR 0 1
35274: PUSH
35275: LD_INT 2
35277: EQUAL
35278: IFFALSE 35351
// begin repeat wait ( 0 0$01 ) ;
35280: LD_INT 35
35282: PPUSH
35283: CALL_OW 67
// time = time + 0 0$01 ;
35287: LD_ADDR_VAR 0 2
35291: PUSH
35292: LD_VAR 0 2
35296: PUSH
35297: LD_INT 35
35299: PLUS
35300: ST_TO_ADDR
// until time >= 3 3$00 ;
35301: LD_VAR 0 2
35305: PUSH
35306: LD_INT 6300
35308: GREATEREQUAL
35309: IFFALSE 35280
// DialogueOn ;
35311: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
35315: LD_EXP 1
35319: PPUSH
35320: LD_STRING D15d-JMM-1a
35322: PPUSH
35323: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35327: LD_EXP 26
35331: PPUSH
35332: LD_STRING D15d-Pla-1
35334: PPUSH
35335: CALL_OW 94
// DialogueOff ;
35339: CALL_OW 7
// missionStage = 6 ;
35343: LD_ADDR_EXP 101
35347: PUSH
35348: LD_INT 6
35350: ST_TO_ADDR
// end ; if IsOk ( LegionFriend ) and GetSide ( LegionFriend ) = 1 then
35351: LD_EXP 53
35355: PPUSH
35356: CALL_OW 302
35360: PUSH
35361: LD_EXP 53
35365: PPUSH
35366: CALL_OW 255
35370: PUSH
35371: LD_INT 1
35373: EQUAL
35374: AND
35375: IFFALSE 35421
// begin DialogueOn ;
35377: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
35381: LD_EXP 1
35385: PPUSH
35386: LD_STRING D16-JMM-1
35388: PPUSH
35389: CALL_OW 88
// Say ( LegionFriend , D16-Friend-1 ) ;
35393: LD_EXP 53
35397: PPUSH
35398: LD_STRING D16-Friend-1
35400: PPUSH
35401: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
35405: LD_EXP 1
35409: PPUSH
35410: LD_STRING D16-JMM-2
35412: PPUSH
35413: CALL_OW 88
// DialogueOff ;
35417: CALL_OW 7
// end ; end ;
35421: PPOPN 2
35423: END
// every 1 1$0 trigger missionStage = 6 and IsOK ( LegionFriend ) and GetSide ( LegionFriend ) = 1 do var rocketTarget ;
35424: LD_EXP 101
35428: PUSH
35429: LD_INT 6
35431: EQUAL
35432: PUSH
35433: LD_EXP 53
35437: PPUSH
35438: CALL_OW 302
35442: AND
35443: PUSH
35444: LD_EXP 53
35448: PPUSH
35449: CALL_OW 255
35453: PUSH
35454: LD_INT 1
35456: EQUAL
35457: AND
35458: IFFALSE 36095
35460: GO 35462
35462: DISABLE
35463: LD_INT 0
35465: PPUSH
// begin DialogueOn ;
35466: CALL_OW 6
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
35470: LD_INT 22
35472: PUSH
35473: LD_INT 1
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 34
35485: PUSH
35486: LD_INT 8
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 35
35495: PUSH
35496: LD_INT 8
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: LIST
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PPUSH
35512: CALL_OW 69
35516: PUSH
35517: LD_INT 0
35519: GREATER
35520: IFFALSE 35544
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
35522: LD_EXP 26
35526: PPUSH
35527: LD_STRING D16c-Pla-1
35529: PPUSH
35530: CALL_OW 94
// playerHaveRocket = 1 ;
35534: LD_ADDR_EXP 100
35538: PUSH
35539: LD_INT 1
35541: ST_TO_ADDR
// end else
35542: GO 36003
// begin SayRadio ( Platonov , D16a-Pla-1 ) ;
35544: LD_EXP 26
35548: PPUSH
35549: LD_STRING D16a-Pla-1
35551: PPUSH
35552: CALL_OW 94
// if IsOK ( Stevens ) then
35556: LD_EXP 3
35560: PPUSH
35561: CALL_OW 302
35565: IFFALSE 35581
// begin Say ( Stevens , D16a-Huck-1 ) ;
35567: LD_EXP 3
35571: PPUSH
35572: LD_STRING D16a-Huck-1
35574: PPUSH
35575: CALL_OW 88
// end else
35579: GO 35729
// begin if IsOk ( Baker ) then
35581: LD_EXP 21
35585: PPUSH
35586: CALL_OW 302
35590: IFFALSE 35606
// begin Say ( Baker , D16a-Huck-1 ) ;
35592: LD_EXP 21
35596: PPUSH
35597: LD_STRING D16a-Huck-1
35599: PPUSH
35600: CALL_OW 88
// end else
35604: GO 35729
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D16a-Sol1-1 , D5-FSol1-1 ) ;
35606: LD_INT 22
35608: PUSH
35609: LD_INT 1
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 23
35618: PUSH
35619: LD_INT 1
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 26
35628: PUSH
35629: LD_INT 1
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 2
35638: PUSH
35639: LD_INT 25
35641: PUSH
35642: LD_INT 1
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 25
35651: PUSH
35652: LD_INT 2
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 25
35661: PUSH
35662: LD_INT 3
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 25
35671: PUSH
35672: LD_INT 4
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 25
35681: PUSH
35682: LD_INT 5
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 25
35691: PUSH
35692: LD_INT 8
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: PPUSH
35714: CALL_OW 69
35718: PPUSH
35719: LD_STRING D16a-Sol1-1
35721: PPUSH
35722: LD_STRING D5-FSol1-1
35724: PPUSH
35725: CALL 6896 0 3
// end ; end ; wait ( 0 0$30 ) ;
35729: LD_INT 1050
35731: PPUSH
35732: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35736: LD_EXP 26
35740: PPUSH
35741: LD_STRING D18-Pla-1
35743: PPUSH
35744: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35748: LD_ADDR_VAR 0 1
35752: PUSH
35753: LD_INT 22
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 21
35765: PUSH
35766: LD_INT 3
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 23
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 2
35785: PUSH
35786: LD_INT 30
35788: PUSH
35789: LD_INT 0
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 30
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: LIST
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: PPUSH
35817: CALL_OW 69
35821: ST_TO_ADDR
// if rocketTarget = 0 then
35822: LD_VAR 0 1
35826: PUSH
35827: LD_INT 0
35829: EQUAL
35830: IFFALSE 35906
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35832: LD_ADDR_VAR 0 1
35836: PUSH
35837: LD_INT 22
35839: PUSH
35840: LD_INT 1
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 21
35849: PUSH
35850: LD_INT 3
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 23
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 2
35869: PUSH
35870: LD_INT 30
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 30
35882: PUSH
35883: LD_INT 1
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: LIST
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: PPUSH
35901: CALL_OW 69
35905: ST_TO_ADDR
// if rocketTarget = 0 then
35906: LD_VAR 0 1
35910: PUSH
35911: LD_INT 0
35913: EQUAL
35914: IFFALSE 35968
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
35916: LD_ADDR_VAR 0 1
35920: PUSH
35921: LD_INT 22
35923: PUSH
35924: LD_INT 1
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 21
35933: PUSH
35934: LD_INT 1
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 23
35943: PUSH
35944: LD_INT 1
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 50
35953: PUSH
35954: EMPTY
35955: LIST
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: PPUSH
35963: CALL_OW 69
35967: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
35968: LD_INT 273
35970: PPUSH
35971: LD_VAR 0 1
35975: PUSH
35976: LD_INT 1
35978: ARRAY
35979: PPUSH
35980: CALL_OW 250
35984: PPUSH
35985: LD_VAR 0 1
35989: PUSH
35990: LD_INT 1
35992: ARRAY
35993: PPUSH
35994: CALL_OW 251
35998: PPUSH
35999: CALL_OW 116
// end ; Say ( JMM , D16a-JMM-1a ) ;
36003: LD_EXP 1
36007: PPUSH
36008: LD_STRING D16a-JMM-1a
36010: PPUSH
36011: CALL_OW 88
// DialogueOff ;
36015: CALL_OW 7
// SetSide ( LegionFriend , 3 ) ;
36019: LD_EXP 53
36023: PPUSH
36024: LD_INT 3
36026: PPUSH
36027: CALL_OW 235
// ComExitBuilding ( LegionFriend ) ;
36031: LD_EXP 53
36035: PPUSH
36036: CALL_OW 122
// ComExitVehicle ( LegionFriend ) ;
36040: LD_EXP 53
36044: PPUSH
36045: CALL_OW 121
// wait ( 0 0$1 ) ;
36049: LD_INT 35
36051: PPUSH
36052: CALL_OW 67
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
36056: LD_EXP 53
36060: PPUSH
36061: LD_INT 18
36063: PPUSH
36064: CALL_OW 113
// wait ( 0 0$3 ) ;
36068: LD_INT 105
36070: PPUSH
36071: CALL_OW 67
// DialogueOn ;
36075: CALL_OW 6
// Say ( JMM , D16a-JMM-1 ) ;
36079: LD_EXP 1
36083: PPUSH
36084: LD_STRING D16a-JMM-1
36086: PPUSH
36087: CALL_OW 88
// DialogueOff ;
36091: CALL_OW 7
// end ;
36095: PPOPN 1
36097: END
// every 0 0$1 trigger GetSide ( LegionFriend ) = 3 do var i ;
36098: LD_EXP 53
36102: PPUSH
36103: CALL_OW 255
36107: PUSH
36108: LD_INT 3
36110: EQUAL
36111: IFFALSE 36218
36113: GO 36115
36115: DISABLE
36116: LD_INT 0
36118: PPUSH
// begin enable ;
36119: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_outside ] ] ) do
36120: LD_ADDR_VAR 0 1
36124: PUSH
36125: LD_INT 22
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 21
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 56
36147: PUSH
36148: EMPTY
36149: LIST
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: PPUSH
36156: CALL_OW 69
36160: PUSH
36161: FOR_IN
36162: IFFALSE 36216
// begin if GetDistUnits ( i , LegionFriend ) < 8 then
36164: LD_VAR 0 1
36168: PPUSH
36169: LD_EXP 53
36173: PPUSH
36174: CALL_OW 296
36178: PUSH
36179: LD_INT 8
36181: LESS
36182: IFFALSE 36214
// begin disable ;
36184: DISABLE
// DialogueOn ;
36185: CALL_OW 6
// CenterNowOnUnits ( LegionFriend ) ;
36189: LD_EXP 53
36193: PPUSH
36194: CALL_OW 87
// Say ( LegionFriend , D16a-Friend-1 ) ;
36198: LD_EXP 53
36202: PPUSH
36203: LD_STRING D16a-Friend-1
36205: PPUSH
36206: CALL_OW 88
// DialogueOff ;
36210: CALL_OW 7
// end ; end ;
36214: GO 36161
36216: POP
36217: POP
// end ;
36218: PPOPN 1
36220: END
// every 5 5$0 trigger missionStage = 6 and not GetSide ( LegionFriend ) = 1 do var rocketTarget ;
36221: LD_EXP 101
36225: PUSH
36226: LD_INT 6
36228: EQUAL
36229: PUSH
36230: LD_EXP 53
36234: PPUSH
36235: CALL_OW 255
36239: PUSH
36240: LD_INT 1
36242: EQUAL
36243: NOT
36244: AND
36245: IFFALSE 36625
36247: GO 36249
36249: DISABLE
36250: LD_INT 0
36252: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
36253: LD_INT 22
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 2
36265: PUSH
36266: LD_INT 34
36268: PUSH
36269: LD_INT 8
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 35
36278: PUSH
36279: LD_INT 8
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: LIST
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PPUSH
36295: CALL_OW 69
36299: PUSH
36300: LD_INT 0
36302: GREATER
36303: IFFALSE 36327
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
36305: LD_EXP 26
36309: PPUSH
36310: LD_STRING D16c-Pla-1
36312: PPUSH
36313: CALL_OW 94
// playerHaveRocket = 1 ;
36317: LD_ADDR_EXP 100
36321: PUSH
36322: LD_INT 1
36324: ST_TO_ADDR
// end else
36325: GO 36625
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
36327: LD_EXP 26
36331: PPUSH
36332: LD_STRING D16b-Pla-1
36334: PPUSH
36335: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
36339: LD_EXP 1
36343: PPUSH
36344: LD_STRING D16b-JMM-1
36346: PPUSH
36347: CALL_OW 88
// wait ( 0 0$15 ) ;
36351: LD_INT 525
36353: PPUSH
36354: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36358: LD_EXP 26
36362: PPUSH
36363: LD_STRING D18-Pla-1
36365: PPUSH
36366: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36370: LD_ADDR_VAR 0 1
36374: PUSH
36375: LD_INT 22
36377: PUSH
36378: LD_INT 1
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 21
36387: PUSH
36388: LD_INT 3
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 23
36397: PUSH
36398: LD_INT 1
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 2
36407: PUSH
36408: LD_INT 30
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 30
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: LIST
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: PPUSH
36439: CALL_OW 69
36443: ST_TO_ADDR
// if rocketTarget = 0 then
36444: LD_VAR 0 1
36448: PUSH
36449: LD_INT 0
36451: EQUAL
36452: IFFALSE 36528
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36454: LD_ADDR_VAR 0 1
36458: PUSH
36459: LD_INT 22
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 21
36471: PUSH
36472: LD_INT 3
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 23
36481: PUSH
36482: LD_INT 2
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 2
36491: PUSH
36492: LD_INT 30
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 30
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: PPUSH
36523: CALL_OW 69
36527: ST_TO_ADDR
// if rocketTarget = 0 then
36528: LD_VAR 0 1
36532: PUSH
36533: LD_INT 0
36535: EQUAL
36536: IFFALSE 36590
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
36538: LD_ADDR_VAR 0 1
36542: PUSH
36543: LD_INT 22
36545: PUSH
36546: LD_INT 1
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 21
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 23
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 50
36575: PUSH
36576: EMPTY
36577: LIST
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: PPUSH
36585: CALL_OW 69
36589: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
36590: LD_INT 273
36592: PPUSH
36593: LD_VAR 0 1
36597: PUSH
36598: LD_INT 1
36600: ARRAY
36601: PPUSH
36602: CALL_OW 250
36606: PPUSH
36607: LD_VAR 0 1
36611: PUSH
36612: LD_INT 1
36614: ARRAY
36615: PPUSH
36616: CALL_OW 251
36620: PPUSH
36621: CALL_OW 116
// end ; end ;
36625: PPOPN 1
36627: END
// every 0 0$1 trigger timeAction >= 80 80$02 and missionStage >= 6 and AllianceAI = 1 do
36628: LD_EXP 97
36632: PUSH
36633: LD_INT 168070
36635: GREATEREQUAL
36636: PUSH
36637: LD_EXP 101
36641: PUSH
36642: LD_INT 6
36644: GREATEREQUAL
36645: AND
36646: PUSH
36647: LD_EXP 85
36651: PUSH
36652: LD_INT 1
36654: EQUAL
36655: AND
36656: IFFALSE 36686
36658: GO 36660
36660: DISABLE
// begin Say ( Platonov , D18-Pla-1 ) ;
36661: LD_EXP 26
36665: PPUSH
36666: LD_STRING D18-Pla-1
36668: PPUSH
36669: CALL_OW 88
// ComAttackPlace ( rurocket , 244 , 187 ) ;
36673: LD_INT 273
36675: PPUSH
36676: LD_INT 244
36678: PPUSH
36679: LD_INT 187
36681: PPUSH
36682: CALL_OW 116
// end ;
36686: END
// every 0 0$3 trigger missionStage >= 5 do var i ;
36687: LD_EXP 101
36691: PUSH
36692: LD_INT 5
36694: GREATEREQUAL
36695: IFFALSE 36888
36697: GO 36699
36699: DISABLE
36700: LD_INT 0
36702: PPUSH
// begin enable ;
36703: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_behemoth ] , [ f_constructed ] ] ) do
36704: LD_ADDR_VAR 0 1
36708: PUSH
36709: LD_INT 22
36711: PUSH
36712: LD_INT 6
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 30
36721: PUSH
36722: LD_INT 37
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 57
36731: PUSH
36732: EMPTY
36733: LIST
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: PPUSH
36740: CALL_OW 69
36744: PUSH
36745: FOR_IN
36746: IFFALSE 36800
// begin if See ( 1 , i ) then
36748: LD_INT 1
36750: PPUSH
36751: LD_VAR 0 1
36755: PPUSH
36756: CALL_OW 292
36760: IFFALSE 36798
// begin disable ;
36762: DISABLE
// DialogueOn ;
36763: CALL_OW 6
// Say ( JMM , D17a-JMM-1 ) ;
36767: LD_EXP 1
36771: PPUSH
36772: LD_STRING D17a-JMM-1
36774: PPUSH
36775: CALL_OW 88
// DialogueOff ;
36779: CALL_OW 7
// behemothStatus = 1 ;
36783: LD_ADDR_EXP 60
36787: PUSH
36788: LD_INT 1
36790: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
36791: LD_STRING M4a
36793: PPUSH
36794: CALL_OW 337
// end ; end ;
36798: GO 36745
36800: POP
36801: POP
// for i in ruBehs do
36802: LD_ADDR_VAR 0 1
36806: PUSH
36807: LD_EXP 59
36811: PUSH
36812: FOR_IN
36813: IFFALSE 36886
// begin if See ( 1 , i ) then
36815: LD_INT 1
36817: PPUSH
36818: LD_VAR 0 1
36822: PPUSH
36823: CALL_OW 292
36827: IFFALSE 36884
// begin disable ;
36829: DISABLE
// DialogueOn ;
36830: CALL_OW 6
// Say ( JMM , D17b-JMM-1 ) ;
36834: LD_EXP 1
36838: PPUSH
36839: LD_STRING D17b-JMM-1
36841: PPUSH
36842: CALL_OW 88
// DialogueOff ;
36846: CALL_OW 7
// behemothStatus = 0 ;
36850: LD_ADDR_EXP 60
36854: PUSH
36855: LD_INT 0
36857: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
36858: LD_STRING M4b
36860: PPUSH
36861: CALL_OW 337
// wait ( 0 0$2 ) ;
36865: LD_INT 70
36867: PPUSH
36868: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36872: LD_EXP 26
36876: PPUSH
36877: LD_STRING D18-Pla-1
36879: PPUSH
36880: CALL_OW 88
// end ; end ;
36884: GO 36812
36886: POP
36887: POP
// end ;
36888: PPOPN 1
36890: END
// every 1 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 ] [ Difficulty ] do var i , tmp , arabianArmy ;
36891: LD_EXP 26
36895: PPUSH
36896: CALL_OW 301
36900: PUSH
36901: LD_EXP 27
36905: PPUSH
36906: CALL_OW 301
36910: AND
36911: PUSH
36912: LD_INT 22
36914: PUSH
36915: LD_INT 3
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 21
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 50
36934: PUSH
36935: EMPTY
36936: LIST
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: PPUSH
36943: CALL_OW 69
36947: PUSH
36948: LD_INT 7
36950: PUSH
36951: LD_INT 8
36953: PUSH
36954: LD_INT 9
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: LIST
36961: PUSH
36962: LD_OWVAR 67
36966: ARRAY
36967: LESS
36968: AND
36969: IFFALSE 37645
36971: GO 36973
36973: DISABLE
36974: LD_INT 0
36976: PPUSH
36977: PPUSH
36978: PPUSH
// begin russianAI = 0 ;
36979: LD_ADDR_EXP 86
36983: PUSH
36984: LD_INT 0
36986: ST_TO_ADDR
// russianEscape = 1 ;
36987: LD_ADDR_EXP 90
36991: PUSH
36992: LD_INT 1
36994: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , true ) ;
36995: LD_INT 1
36997: PPUSH
36998: LD_INT 3
37000: PPUSH
37001: LD_INT 1
37003: PPUSH
37004: LD_INT 1
37006: PPUSH
37007: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 900 ] ] ) do
37011: LD_ADDR_VAR 0 1
37015: PUSH
37016: LD_INT 22
37018: PUSH
37019: LD_INT 3
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 21
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 24
37038: PUSH
37039: LD_INT 900
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: LIST
37050: PPUSH
37051: CALL_OW 69
37055: PUSH
37056: FOR_IN
37057: IFFALSE 37088
// if GetSex ( i ) = sex_male then
37059: LD_VAR 0 1
37063: PPUSH
37064: CALL_OW 258
37068: PUSH
37069: LD_INT 1
37071: EQUAL
37072: IFFALSE 37086
// begin tmp = i ;
37074: LD_ADDR_VAR 0 2
37078: PUSH
37079: LD_VAR 0 1
37083: ST_TO_ADDR
// break ;
37084: GO 37088
// end ;
37086: GO 37056
37088: POP
37089: POP
// if tmp = 0 then
37090: LD_VAR 0 2
37094: PUSH
37095: LD_INT 0
37097: EQUAL
37098: IFFALSE 37152
// begin uc_side = 3 ;
37100: LD_ADDR_OWVAR 20
37104: PUSH
37105: LD_INT 3
37107: ST_TO_ADDR
// uc_nation = 3 ;
37108: LD_ADDR_OWVAR 21
37112: PUSH
37113: LD_INT 3
37115: ST_TO_ADDR
// hc_name =  ;
37116: LD_ADDR_OWVAR 26
37120: PUSH
37121: LD_STRING 
37123: ST_TO_ADDR
// hc_gallery =  ;
37124: LD_ADDR_OWVAR 33
37128: PUSH
37129: LD_STRING 
37131: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
37132: LD_INT 1
37134: PPUSH
37135: LD_INT 10
37137: PPUSH
37138: CALL_OW 381
// tmp = CreateHuman ;
37142: LD_ADDR_VAR 0 2
37146: PUSH
37147: CALL_OW 44
37151: ST_TO_ADDR
// end ; DialogueOn ;
37152: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
37156: LD_VAR 0 2
37160: PPUSH
37161: LD_STRING DSurrenderRussians-RSol1-1a
37163: PPUSH
37164: CALL_OW 88
// DialogueOff ;
37168: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
37172: LD_INT 22
37174: PUSH
37175: LD_INT 3
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 21
37184: PUSH
37185: LD_INT 1
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PPUSH
37196: CALL_OW 69
37200: PPUSH
37201: CALL_OW 122
// wait ( 0 0$1 ) ;
37205: LD_INT 35
37207: PPUSH
37208: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , RussianEscapeArea ) ;
37212: LD_INT 22
37214: PUSH
37215: LD_INT 3
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 21
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PPUSH
37236: CALL_OW 69
37240: PPUSH
37241: LD_INT 25
37243: PPUSH
37244: CALL_OW 113
// wait ( 0 0$10 ) ;
37248: LD_INT 350
37250: PPUSH
37251: CALL_OW 67
// PrepareOmarArmy ;
37255: CALL 38265 0 0
// missionStage = 7 ;
37259: LD_ADDR_EXP 101
37263: PUSH
37264: LD_INT 7
37266: ST_TO_ADDR
// PlaceSeeing ( 157 , 8 , 1 , - 8 ) ;
37267: LD_INT 157
37269: PPUSH
37270: LD_INT 8
37272: PPUSH
37273: LD_INT 1
37275: PPUSH
37276: LD_INT 8
37278: NEG
37279: PPUSH
37280: CALL_OW 330
// CenterOnXY ( 157 , 8 ) ;
37284: LD_INT 157
37286: PPUSH
37287: LD_INT 8
37289: PPUSH
37290: CALL_OW 84
// DialogueOn ;
37294: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
37298: LD_EXP 32
37302: PPUSH
37303: CALL_OW 87
// Say ( JMM , D19-JMM-1 ) ;
37307: LD_EXP 1
37311: PPUSH
37312: LD_STRING D19-JMM-1
37314: PPUSH
37315: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D19-Sol1-1 , D5-FSol1-1 ) ;
37319: LD_INT 22
37321: PUSH
37322: LD_INT 1
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 26
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: LD_INT 25
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 25
37354: PUSH
37355: LD_INT 2
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 25
37364: PUSH
37365: LD_INT 3
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 25
37374: PUSH
37375: LD_INT 4
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 25
37384: PUSH
37385: LD_INT 5
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 25
37394: PUSH
37395: LD_INT 8
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: LIST
37415: PPUSH
37416: CALL_OW 69
37420: PPUSH
37421: LD_STRING D19-Sol1-1
37423: PPUSH
37424: LD_STRING D5-FSol1-1
37426: PPUSH
37427: CALL 6896 0 3
// Say ( JMM , D19-JMM-2 ) ;
37431: LD_EXP 1
37435: PPUSH
37436: LD_STRING D19-JMM-2
37438: PPUSH
37439: CALL_OW 88
// DialogueOff ;
37443: CALL_OW 7
// LaunchMines ;
37447: CALL 37754 0 0
// wait ( 0 0$3 ) ;
37451: LD_INT 105
37453: PPUSH
37454: CALL_OW 67
// arabianArmy = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
37458: LD_ADDR_VAR 0 3
37462: PUSH
37463: LD_INT 22
37465: PUSH
37466: LD_INT 2
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 21
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PPUSH
37487: CALL_OW 69
37491: PUSH
37492: LD_INT 22
37494: PUSH
37495: LD_INT 2
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 21
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 25
37514: PUSH
37515: LD_INT 4
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: LIST
37526: PPUSH
37527: CALL_OW 69
37531: DIFF
37532: ST_TO_ADDR
// arabianArmy = arabianArmy ^ FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
37533: LD_ADDR_VAR 0 3
37537: PUSH
37538: LD_VAR 0 3
37542: PUSH
37543: LD_INT 22
37545: PUSH
37546: LD_INT 2
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 21
37555: PUSH
37556: LD_INT 2
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PPUSH
37567: CALL_OW 69
37571: ADD
37572: ST_TO_ADDR
// ComAgressiveMove ( arabianArmy , 178 , 66 ) ;
37573: LD_VAR 0 3
37577: PPUSH
37578: LD_INT 178
37580: PPUSH
37581: LD_INT 66
37583: PPUSH
37584: CALL_OW 114
// wait ( 0 0$10 ) ;
37588: LD_INT 350
37590: PPUSH
37591: CALL_OW 67
// ComContaminate ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) , 177 , 69 ) ;
37595: LD_INT 22
37597: PUSH
37598: LD_INT 2
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 21
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 25
37617: PUSH
37618: LD_INT 4
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: LIST
37629: PPUSH
37630: CALL_OW 69
37634: PPUSH
37635: LD_INT 177
37637: PPUSH
37638: LD_INT 69
37640: PPUSH
37641: CALL_OW 158
// end ;
37645: PPOPN 3
37647: END
// every 0 0$1 trigger russianEscape = 1 and FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i ;
37648: LD_EXP 90
37652: PUSH
37653: LD_INT 1
37655: EQUAL
37656: PUSH
37657: LD_INT 25
37659: PPUSH
37660: LD_INT 22
37662: PUSH
37663: LD_INT 3
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 21
37672: PUSH
37673: LD_INT 1
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PPUSH
37684: CALL_OW 70
37688: AND
37689: IFFALSE 37751
37691: GO 37693
37693: DISABLE
37694: LD_INT 0
37696: PPUSH
// begin enable ;
37697: ENABLE
// for i in FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
37698: LD_ADDR_VAR 0 1
37702: PUSH
37703: LD_INT 25
37705: PPUSH
37706: LD_INT 22
37708: PUSH
37709: LD_INT 3
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 21
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PPUSH
37730: CALL_OW 70
37734: PUSH
37735: FOR_IN
37736: IFFALSE 37749
// RemoveUnit ( i ) ;
37738: LD_VAR 0 1
37742: PPUSH
37743: CALL_OW 64
37747: GO 37735
37749: POP
37750: POP
// end ;
37751: PPOPN 1
37753: END
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
37754: LD_INT 0
37756: PPUSH
37757: PPUSH
37758: PPUSH
37759: PPUSH
37760: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
37761: LD_ADDR_VAR 0 2
37765: PUSH
37766: LD_INT 168
37768: PUSH
37769: LD_INT 18
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 169
37778: PUSH
37779: LD_INT 20
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 167
37788: PUSH
37789: LD_INT 20
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 164
37798: PUSH
37799: LD_INT 18
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 164
37808: PUSH
37809: LD_INT 19
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 163
37818: PUSH
37819: LD_INT 19
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 164
37828: PUSH
37829: LD_INT 21
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 165
37838: PUSH
37839: LD_INT 21
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 163
37848: PUSH
37849: LD_INT 20
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 164
37858: PUSH
37859: LD_INT 22
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 162
37868: PUSH
37869: LD_INT 20
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
37889: LD_ADDR_VAR 0 3
37893: PUSH
37894: LD_INT 169
37896: PUSH
37897: LD_INT 34
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 169
37906: PUSH
37907: LD_INT 35
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 167
37916: PUSH
37917: LD_INT 32
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 170
37926: PUSH
37927: LD_INT 31
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 173
37936: PUSH
37937: LD_INT 35
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 174
37946: PUSH
37947: LD_INT 39
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: ST_TO_ADDR
// for i = 1 to mines_pos do
37962: LD_ADDR_VAR 0 4
37966: PUSH
37967: DOUBLE
37968: LD_INT 1
37970: DEC
37971: ST_TO_ADDR
37972: LD_VAR 0 2
37976: PUSH
37977: FOR_TO
37978: IFFALSE 38190
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
37980: LD_VAR 0 2
37984: PUSH
37985: LD_VAR 0 4
37989: ARRAY
37990: PUSH
37991: LD_INT 1
37993: ARRAY
37994: PPUSH
37995: LD_VAR 0 2
37999: PUSH
38000: LD_VAR 0 4
38004: ARRAY
38005: PUSH
38006: LD_INT 2
38008: ARRAY
38009: PPUSH
38010: LD_INT 1
38012: PPUSH
38013: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
38017: LD_INT 1
38019: PPUSH
38020: LD_INT 3
38022: PPUSH
38023: CALL_OW 12
38027: PPUSH
38028: CALL_OW 67
// if i < mines_pos then
38032: LD_VAR 0 4
38036: PUSH
38037: LD_VAR 0 2
38041: LESS
38042: IFFALSE 38080
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
38044: LD_VAR 0 2
38048: PUSH
38049: LD_VAR 0 4
38053: ARRAY
38054: PUSH
38055: LD_INT 1
38057: ARRAY
38058: PPUSH
38059: LD_VAR 0 2
38063: PUSH
38064: LD_VAR 0 4
38068: ARRAY
38069: PUSH
38070: LD_INT 2
38072: ARRAY
38073: PPUSH
38074: CALL_OW 348
38078: GO 38188
// begin for j = 1 to mines_pos1 do
38080: LD_ADDR_VAR 0 5
38084: PUSH
38085: DOUBLE
38086: LD_INT 1
38088: DEC
38089: ST_TO_ADDR
38090: LD_VAR 0 3
38094: PUSH
38095: FOR_TO
38096: IFFALSE 38152
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
38098: LD_VAR 0 3
38102: PUSH
38103: LD_VAR 0 5
38107: ARRAY
38108: PUSH
38109: LD_INT 1
38111: ARRAY
38112: PPUSH
38113: LD_VAR 0 3
38117: PUSH
38118: LD_VAR 0 5
38122: ARRAY
38123: PUSH
38124: LD_INT 2
38126: ARRAY
38127: PPUSH
38128: LD_INT 1
38130: PPUSH
38131: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
38135: LD_INT 1
38137: PPUSH
38138: LD_INT 3
38140: PPUSH
38141: CALL_OW 12
38145: PPUSH
38146: CALL_OW 67
// end ;
38150: GO 38095
38152: POP
38153: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
38154: LD_VAR 0 2
38158: PUSH
38159: LD_VAR 0 4
38163: ARRAY
38164: PUSH
38165: LD_INT 1
38167: ARRAY
38168: PPUSH
38169: LD_VAR 0 2
38173: PUSH
38174: LD_VAR 0 4
38178: ARRAY
38179: PUSH
38180: LD_INT 2
38182: ARRAY
38183: PPUSH
38184: CALL_OW 347
// end ; end ;
38188: GO 37977
38190: POP
38191: POP
// end ;
38192: LD_VAR 0 1
38196: RET
// every 0 0$1 trigger missionStage = 7 and IsDead ( Omar ) and IsOk ( Heike ) do
38197: LD_EXP 101
38201: PUSH
38202: LD_INT 7
38204: EQUAL
38205: PUSH
38206: LD_EXP 31
38210: PPUSH
38211: CALL_OW 301
38215: AND
38216: PUSH
38217: LD_EXP 32
38221: PPUSH
38222: CALL_OW 302
38226: AND
38227: IFFALSE 38264
38229: GO 38231
38231: DISABLE
// begin DialogueOn ;
38232: CALL_OW 6
// Say ( JMM , D19a-JMM-1 ) ;
38236: LD_EXP 1
38240: PPUSH
38241: LD_STRING D19a-JMM-1
38243: PPUSH
38244: CALL_OW 88
// Say ( Heike , D19a-Hke-1 ) ;
38248: LD_EXP 32
38252: PPUSH
38253: LD_STRING D19a-Hke-1
38255: PPUSH
38256: CALL_OW 88
// DialogueOff ;
38260: CALL_OW 7
// end ; end_of_file
38264: END
// export function PrepareOmarArmy ; var i , un , veh , omarMastodont ; begin
38265: LD_INT 0
38267: PPUSH
38268: PPUSH
38269: PPUSH
38270: PPUSH
38271: PPUSH
// uc_side = 2 ;
38272: LD_ADDR_OWVAR 20
38276: PUSH
38277: LD_INT 2
38279: ST_TO_ADDR
// uc_nation = 2 ;
38280: LD_ADDR_OWVAR 21
38284: PUSH
38285: LD_INT 2
38287: ST_TO_ADDR
// Omar = PrepareUnit ( Omar , false ) ;
38288: LD_ADDR_EXP 31
38292: PUSH
38293: LD_STRING Omar
38295: PPUSH
38296: LD_INT 0
38298: PPUSH
38299: CALL 6640 0 2
38303: ST_TO_ADDR
// Heike = PrepareUnit ( Heike , false ) ;
38304: LD_ADDR_EXP 32
38308: PUSH
38309: LD_STRING Heike
38311: PPUSH
38312: LD_INT 0
38314: PPUSH
38315: CALL 6640 0 2
38319: ST_TO_ADDR
// if KhatamStatus = 1 then
38320: LD_EXP 83
38324: PUSH
38325: LD_INT 1
38327: EQUAL
38328: IFFALSE 38343
// Khatam = NewCharacter ( Khatam ) ;
38330: LD_ADDR_EXP 33
38334: PUSH
38335: LD_STRING Khatam
38337: PPUSH
38338: CALL_OW 25
38342: ST_TO_ADDR
// PlaceUnitArea ( Heike , ArabianSpawn , false ) ;
38343: LD_EXP 32
38347: PPUSH
38348: LD_INT 26
38350: PPUSH
38351: LD_INT 0
38353: PPUSH
38354: CALL_OW 49
// PlaceUnitArea ( Khatam , ArabianSpawn , false ) ;
38358: LD_EXP 33
38362: PPUSH
38363: LD_INT 26
38365: PPUSH
38366: LD_INT 0
38368: PPUSH
38369: CALL_OW 49
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
38373: LD_ADDR_VAR 0 2
38377: PUSH
38378: DOUBLE
38379: LD_INT 1
38381: DEC
38382: ST_TO_ADDR
38383: LD_INT 5
38385: PUSH
38386: LD_INT 6
38388: PUSH
38389: LD_INT 7
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: LIST
38396: PUSH
38397: LD_OWVAR 67
38401: ARRAY
38402: PUSH
38403: FOR_TO
38404: IFFALSE 38459
// begin hc_name =  ;
38406: LD_ADDR_OWVAR 26
38410: PUSH
38411: LD_STRING 
38413: ST_TO_ADDR
// hc_gallery =  ;
38414: LD_ADDR_OWVAR 33
38418: PUSH
38419: LD_STRING 
38421: ST_TO_ADDR
// PrepareSoldier ( false , 8 ) ;
38422: LD_INT 0
38424: PPUSH
38425: LD_INT 8
38427: PPUSH
38428: CALL_OW 381
// un = CreateHuman ;
38432: LD_ADDR_VAR 0 3
38436: PUSH
38437: CALL_OW 44
38441: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
38442: LD_VAR 0 3
38446: PPUSH
38447: LD_INT 26
38449: PPUSH
38450: LD_INT 0
38452: PPUSH
38453: CALL_OW 49
// end ;
38457: GO 38403
38459: POP
38460: POP
// for i := 1 to 4 do
38461: LD_ADDR_VAR 0 2
38465: PUSH
38466: DOUBLE
38467: LD_INT 1
38469: DEC
38470: ST_TO_ADDR
38471: LD_INT 4
38473: PUSH
38474: FOR_TO
38475: IFFALSE 38530
// begin hc_name =  ;
38477: LD_ADDR_OWVAR 26
38481: PUSH
38482: LD_STRING 
38484: ST_TO_ADDR
// hc_gallery =  ;
38485: LD_ADDR_OWVAR 33
38489: PUSH
38490: LD_STRING 
38492: ST_TO_ADDR
// PrepareScientist ( false , 8 ) ;
38493: LD_INT 0
38495: PPUSH
38496: LD_INT 8
38498: PPUSH
38499: CALL_OW 384
// un = CreateHuman ;
38503: LD_ADDR_VAR 0 3
38507: PUSH
38508: CALL_OW 44
38512: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
38513: LD_VAR 0 3
38517: PPUSH
38518: LD_INT 26
38520: PPUSH
38521: LD_INT 0
38523: PPUSH
38524: CALL_OW 49
// end ;
38528: GO 38474
38530: POP
38531: POP
// for i := 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
38532: LD_ADDR_VAR 0 2
38536: PUSH
38537: DOUBLE
38538: LD_INT 1
38540: DEC
38541: ST_TO_ADDR
38542: LD_INT 8
38544: PUSH
38545: LD_INT 9
38547: PUSH
38548: LD_INT 10
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: PUSH
38556: LD_OWVAR 67
38560: ARRAY
38561: PUSH
38562: FOR_TO
38563: IFFALSE 38651
// begin vc_engine = 3 ;
38565: LD_ADDR_OWVAR 39
38569: PUSH
38570: LD_INT 3
38572: ST_TO_ADDR
// vc_control = 5 ;
38573: LD_ADDR_OWVAR 38
38577: PUSH
38578: LD_INT 5
38580: ST_TO_ADDR
// vc_chassis = 14 ;
38581: LD_ADDR_OWVAR 37
38585: PUSH
38586: LD_INT 14
38588: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 , 25 ] [ Rand ( 1 , 3 ) ] ;
38589: LD_ADDR_OWVAR 40
38593: PUSH
38594: LD_INT 27
38596: PUSH
38597: LD_INT 26
38599: PUSH
38600: LD_INT 28
38602: PUSH
38603: LD_INT 25
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 1
38614: PPUSH
38615: LD_INT 3
38617: PPUSH
38618: CALL_OW 12
38622: ARRAY
38623: ST_TO_ADDR
// veh = CreateVehicle ;
38624: LD_ADDR_VAR 0 4
38628: PUSH
38629: CALL_OW 45
38633: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawn , false ) ;
38634: LD_VAR 0 4
38638: PPUSH
38639: LD_INT 26
38641: PPUSH
38642: LD_INT 0
38644: PPUSH
38645: CALL_OW 49
// end ;
38649: GO 38562
38651: POP
38652: POP
// vc_chassis := 31 ;
38653: LD_ADDR_OWVAR 37
38657: PUSH
38658: LD_INT 31
38660: ST_TO_ADDR
// vc_control := control_rider ;
38661: LD_ADDR_OWVAR 38
38665: PUSH
38666: LD_INT 4
38668: ST_TO_ADDR
// omarMastodont := CreateVehicle ;
38669: LD_ADDR_VAR 0 5
38673: PUSH
38674: CALL_OW 45
38678: ST_TO_ADDR
// PlaceUnitArea ( omarMastodont , ArabianSpawn , false ) ;
38679: LD_VAR 0 5
38683: PPUSH
38684: LD_INT 26
38686: PPUSH
38687: LD_INT 0
38689: PPUSH
38690: CALL_OW 49
// PlaceHumanInUnit ( Omar , omarMastodont ) ;
38694: LD_EXP 31
38698: PPUSH
38699: LD_VAR 0 5
38703: PPUSH
38704: CALL_OW 52
// end ; end_of_file
38708: LD_VAR 0 1
38712: RET
// every 1 1$30 trigger missionStage > 0 do
38713: LD_EXP 101
38717: PUSH
38718: LD_INT 0
38720: GREATER
38721: IFFALSE 38748
38723: GO 38725
38725: DISABLE
// begin enable ;
38726: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
38727: LD_INT 3
38729: PPUSH
38730: LD_INT 5
38732: PPUSH
38733: CALL_OW 12
38737: PPUSH
38738: LD_INT 27
38740: PPUSH
38741: LD_INT 1
38743: PPUSH
38744: CALL_OW 55
// end ; end_of_file
38748: END
// every 0 0$1 trigger missionStage = 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
38749: LD_EXP 101
38753: PUSH
38754: LD_INT 7
38756: EQUAL
38757: PUSH
38758: LD_INT 22
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 21
38770: PUSH
38771: LD_INT 1
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PPUSH
38782: CALL_OW 69
38786: PUSH
38787: LD_INT 0
38789: EQUAL
38790: AND
38791: PUSH
38792: LD_INT 22
38794: PUSH
38795: LD_INT 2
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 21
38804: PUSH
38805: LD_INT 2
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 50
38814: PUSH
38815: EMPTY
38816: LIST
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: LIST
38822: PPUSH
38823: CALL_OW 69
38827: PUSH
38828: LD_INT 0
38830: EQUAL
38831: AND
38832: IFFALSE 39321
38834: GO 38836
38836: DISABLE
// begin DialogueOn ;
38837: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
38841: LD_EXP 1
38845: PPUSH
38846: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
38850: LD_EXP 1
38854: PPUSH
38855: LD_STRING D20-JMM-1
38857: PPUSH
38858: CALL_OW 88
// if IsOK ( Joan ) then
38862: LD_EXP 2
38866: PPUSH
38867: CALL_OW 302
38871: IFFALSE 38885
// Say ( Joan , D20-Joan-1 ) ;
38873: LD_EXP 2
38877: PPUSH
38878: LD_STRING D20-Joan-1
38880: PPUSH
38881: CALL_OW 88
// if IsOk ( Lisa ) then
38885: LD_EXP 4
38889: PPUSH
38890: CALL_OW 302
38894: IFFALSE 38908
// Say ( Lisa , D20-Lisa-1 ) ;
38896: LD_EXP 4
38900: PPUSH
38901: LD_STRING D20-Lisa-1
38903: PPUSH
38904: CALL_OW 88
// if IsOk ( Donaldson ) then
38908: LD_EXP 5
38912: PPUSH
38913: CALL_OW 302
38917: IFFALSE 38931
// Say ( Donaldson , D20-Don-1 ) ;
38919: LD_EXP 5
38923: PPUSH
38924: LD_STRING D20-Don-1
38926: PPUSH
38927: CALL_OW 88
// if IsOK ( Cornel ) then
38931: LD_EXP 12
38935: PPUSH
38936: CALL_OW 302
38940: IFFALSE 38954
// Say ( Cornel , D20-Corn-1 ) ;
38942: LD_EXP 12
38946: PPUSH
38947: LD_STRING D20-Corn-1
38949: PPUSH
38950: CALL_OW 88
// if IsOk ( Denis ) then
38954: LD_EXP 8
38958: PPUSH
38959: CALL_OW 302
38963: IFFALSE 38977
// Say ( Denis , D20-Den-1 ) ;
38965: LD_EXP 8
38969: PPUSH
38970: LD_STRING D20-Den-1
38972: PPUSH
38973: CALL_OW 88
// if IsOk ( Bobby ) then
38977: LD_EXP 6
38981: PPUSH
38982: CALL_OW 302
38986: IFFALSE 39000
// Say ( Bobby , D20-Bobby-1 ) ;
38988: LD_EXP 6
38992: PPUSH
38993: LD_STRING D20-Bobby-1
38995: PPUSH
38996: CALL_OW 88
// if IsOk ( Gladstone ) then
39000: LD_EXP 10
39004: PPUSH
39005: CALL_OW 302
39009: IFFALSE 39023
// Say ( Gladstone , D20-Glad-1 ) ;
39011: LD_EXP 10
39015: PPUSH
39016: LD_STRING D20-Glad-1
39018: PPUSH
39019: CALL_OW 88
// if IsOk ( Cyrus ) then
39023: LD_EXP 7
39027: PPUSH
39028: CALL_OW 302
39032: IFFALSE 39046
// Say ( Cyrus , D20-Cyrus-1 ) ;
39034: LD_EXP 7
39038: PPUSH
39039: LD_STRING D20-Cyrus-1
39041: PPUSH
39042: CALL_OW 88
// if IsOk ( Stevens ) then
39046: LD_EXP 3
39050: PPUSH
39051: CALL_OW 302
39055: IFFALSE 39069
// Say ( Stevens , D20-Huck-1 ) ;
39057: LD_EXP 3
39061: PPUSH
39062: LD_STRING D20-Huck-1
39064: PPUSH
39065: CALL_OW 88
// if IsOk ( Brown ) then
39069: LD_EXP 9
39073: PPUSH
39074: CALL_OW 302
39078: IFFALSE 39092
// Say ( Brown , D20-Brown-1 ) ;
39080: LD_EXP 9
39084: PPUSH
39085: LD_STRING D20-Brown-1
39087: PPUSH
39088: CALL_OW 88
// if IsOk ( Gary ) then
39092: LD_EXP 13
39096: PPUSH
39097: CALL_OW 302
39101: IFFALSE 39115
// Say ( Gary , D20-Gary-1 ) ;
39103: LD_EXP 13
39107: PPUSH
39108: LD_STRING D20-Gary-1
39110: PPUSH
39111: CALL_OW 88
// if IsOk ( Connie ) then
39115: LD_EXP 16
39119: PPUSH
39120: CALL_OW 302
39124: IFFALSE 39138
// Say ( Connie , D20-Con-1 ) ;
39126: LD_EXP 16
39130: PPUSH
39131: LD_STRING D20-Con-1
39133: PPUSH
39134: CALL_OW 88
// if IsOk ( Kurt ) then
39138: LD_EXP 30
39142: PPUSH
39143: CALL_OW 302
39147: IFFALSE 39161
// Say ( Kurt , D20-Kurt-1 ) ;
39149: LD_EXP 30
39153: PPUSH
39154: LD_STRING D20-Kurt-1
39156: PPUSH
39157: CALL_OW 88
// if IsOk ( Kikuchi ) then
39161: LD_EXP 15
39165: PPUSH
39166: CALL_OW 302
39170: IFFALSE 39184
// Say ( Kikuchi , D20-Yam-1 ) ;
39172: LD_EXP 15
39176: PPUSH
39177: LD_STRING D20-Yam-1
39179: PPUSH
39180: CALL_OW 88
// if IsOk ( Frank ) then
39184: LD_EXP 14
39188: PPUSH
39189: CALL_OW 302
39193: IFFALSE 39207
// Say ( Frank , D20-Frank-1 ) ;
39195: LD_EXP 14
39199: PPUSH
39200: LD_STRING D20-Frank-1
39202: PPUSH
39203: CALL_OW 88
// DialogueOff ;
39207: CALL_OW 7
// if AllianceEscape = 1 then
39211: LD_EXP 91
39215: PUSH
39216: LD_INT 1
39218: EQUAL
39219: IFFALSE 39233
// AddMedal ( Roth , 1 ) else
39221: LD_STRING Roth
39223: PPUSH
39224: LD_INT 1
39226: PPUSH
39227: CALL_OW 101
39231: GO 39244
// AddMedal ( Roth , - 1 ) ;
39233: LD_STRING Roth
39235: PPUSH
39236: LD_INT 1
39238: NEG
39239: PPUSH
39240: CALL_OW 101
// if behemothStatus = 1 then
39244: LD_EXP 60
39248: PUSH
39249: LD_INT 1
39251: EQUAL
39252: IFFALSE 39266
// AddMedal ( Project , 1 ) else
39254: LD_STRING Project
39256: PPUSH
39257: LD_INT 1
39259: PPUSH
39260: CALL_OW 101
39264: GO 39277
// AddMedal ( Project , - 1 ) ;
39266: LD_STRING Project
39268: PPUSH
39269: LD_INT 1
39271: NEG
39272: PPUSH
39273: CALL_OW 101
// if unitLost = 0 then
39277: LD_EXP 98
39281: PUSH
39282: LD_INT 0
39284: EQUAL
39285: IFFALSE 39299
// AddMedal ( NoLosses , 1 ) else
39287: LD_STRING NoLosses
39289: PPUSH
39290: LD_INT 1
39292: PPUSH
39293: CALL_OW 101
39297: GO 39310
// AddMedal ( NoLosses , - 1 ) ;
39299: LD_STRING NoLosses
39301: PPUSH
39302: LD_INT 1
39304: NEG
39305: PPUSH
39306: CALL_OW 101
// GiveMedals ( MAIN ) ;
39310: LD_STRING MAIN
39312: PPUSH
39313: CALL_OW 102
// YouWin ;
39317: CALL_OW 103
// end ; end_of_file
39321: END
// every 0 0$1 trigger IsDead ( JMM ) do
39322: LD_EXP 1
39326: PPUSH
39327: CALL_OW 301
39331: IFFALSE 39343
39333: GO 39335
39335: DISABLE
// YouLost ( JMM ) ;
39336: LD_STRING JMM
39338: PPUSH
39339: CALL_OW 104
39343: END
