// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 , others13Omega ; export heroesFromOmega , Baker , Gordon , Peter ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Yakotich , Roth , Burlak , Kurt , Omar , Heike , Khatam ; export Vsevolod , sewiVeh ; export Kozlov ; export Kovalyuk , Oblukov , Bystrov , Fadeev , Gleb , Petrosyan , Petrovova , Kuzmov , Mikhail , Furmanov , Belkov ; export Simms , Scholtze , Kirilenkova , Kapitsova , Karamazov ; export LegionFriend , LegionFriendStatus ; export legionVehicles ; export arControler ; export ruVehicles ; export ruBehMehs , ruBehs ; export behemothStatus ; export russianVehicles ; export allianceVehicles ; export allianceControler ; export allianceFirstContact ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export powellUnloadCargo ; export powellWarm ; export startAttacks ; export powellVeh , centerPowell , powBomb ; export BurlakStatus , StevensStatus ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus , JMMGirlStatus ; export KhatamStatus ; export LegionAI , AllianceAI , RussianAI ; export LegionTarget , AllianceTarget , RussianTarget ; export russianEscape , allianceEscape ; export RothStatus ; export legionDestroyedBuilds , russianDestroyedBuilds , allianceDestroyedBuilds ; export timerStatus , timeAction ; export unitLost ; export legionRocket ; export playerHaveRocket ; export missionStage ; export blockEvent1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 78
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 79
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 80
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 82
  58: PUSH
  59: LD_STRING 14_JMMGirlStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 81
  74: PUSH
  75: LD_STRING 14_KappaStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  86: LD_ADDR_EXP 83
  90: PUSH
  91: LD_STRING 10_KhatamStatus_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 102: LD_ADDR_EXP 76
 106: PUSH
 107: LD_STRING 13_BurlakStatus_1
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 118: LD_ADDR_EXP 77
 122: PUSH
 123: LD_STRING 13_StevensStatus_1
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: CALL_OW 30
 133: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
 134: LD_ADDR_EXP 65
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// amUnitsAttack = [ ] ;
 141: LD_ADDR_EXP 66
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 148: LD_ADDR_EXP 67
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// startAttacks = 0 ;
 155: LD_ADDR_EXP 72
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// powellBuildBase = 0 ;
 163: LD_ADDR_EXP 68
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// powellUnloadCargo = 0 ;
 171: LD_ADDR_EXP 70
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// powellAttacks = 0 ;
 179: LD_ADDR_EXP 69
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// centerPowell = 0 ;
 187: LD_ADDR_EXP 74
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// powellWarm = 0 ;
 195: LD_ADDR_EXP 71
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// LegionFriendStatus = 0 ;
 203: LD_ADDR_EXP 54
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// RothStatus = 1 ;
 211: LD_ADDR_EXP 92
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// allianceFirstContact = 0 ;
 219: LD_ADDR_EXP 64
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// legionVehicles = [ ] ;
 227: LD_ADDR_EXP 55
 231: PUSH
 232: EMPTY
 233: ST_TO_ADDR
// russianVehicles = [ ] ;
 234: LD_ADDR_EXP 61
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// allianceVehicles = [ ] ;
 241: LD_ADDR_EXP 62
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// legionDestroyedBuilds = [ ] ;
 248: LD_ADDR_EXP 93
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// russianDestroyedBuilds = [ ] ;
 255: LD_ADDR_EXP 94
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// allianceDestroyedBuilds = [ ] ;
 262: LD_ADDR_EXP 95
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ruVehicles = [ ] ;
 269: LD_ADDR_EXP 57
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ruBehMehs = [ ] ;
 276: LD_ADDR_EXP 58
 280: PUSH
 281: EMPTY
 282: ST_TO_ADDR
// ruBehs = [ ] ;
 283: LD_ADDR_EXP 59
 287: PUSH
 288: EMPTY
 289: ST_TO_ADDR
// missionStage = 0 ;
 290: LD_ADDR_EXP 101
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// behemothStatus = 0 ;
 298: LD_ADDR_EXP 60
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// unitLost = 0 ;
 306: LD_ADDR_EXP 98
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// LegionAI = 1 ;
 314: LD_ADDR_EXP 84
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// AllianceAI = 1 ;
 322: LD_ADDR_EXP 85
 326: PUSH
 327: LD_INT 1
 329: ST_TO_ADDR
// RussianAI = 1 ;
 330: LD_ADDR_EXP 86
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// timerStatus = 0 ;
 338: LD_ADDR_EXP 96
 342: PUSH
 343: LD_INT 0
 345: ST_TO_ADDR
// timeAction = 0 0$00 ;
 346: LD_ADDR_EXP 97
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// playerHaveRocket = 0 ;
 354: LD_ADDR_EXP 100
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// blockEvent1 = 0 ;
 362: LD_ADDR_EXP 102
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// debugMode = 0 ;
 370: LD_ADDR_EXP 103
 374: PUSH
 375: LD_INT 0
 377: ST_TO_ADDR
// PrepareHeroes ;
 378: CALL 727 0 0
// PrepareHeroesFromEpsilon ;
 382: CALL 1264 0 0
// PrepareRandoms ;
 386: CALL 1608 0 0
// PrepareLegion ;
 390: CALL 3851 0 0
// PrepareRussians ;
 394: CALL 4248 0 0
// PrepareAlliance ;
 398: CALL 5995 0 0
// PrepareDifficulty ;
 402: CALL 7540 0 0
// SetBName ( RuDep2 , zhukov ) ;
 406: LD_INT 23
 408: PPUSH
 409: LD_STRING zhukov
 411: PPUSH
 412: CALL_OW 500
// end ;
 416: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 417: LD_EXP 103
 421: PUSH
 422: LD_INT 1
 424: EQUAL
 425: IFFALSE 724
 427: GO 429
 429: DISABLE
 430: LD_INT 0
 432: PPUSH
// begin enable ;
 433: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 434: LD_ADDR_VAR 0 1
 438: PUSH
 439: LD_INT 22
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: PUSH
 449: LD_INT 21
 451: PUSH
 452: LD_INT 1
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PPUSH
 463: CALL_OW 69
 467: PUSH
 468: FOR_IN
 469: IFFALSE 485
// SetLives ( i , 1000 ) ;
 471: LD_VAR 0 1
 475: PPUSH
 476: LD_INT 1000
 478: PPUSH
 479: CALL_OW 234
 483: GO 468
 485: POP
 486: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 487: LD_ADDR_VAR 0 1
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 2
 504: PUSH
 505: LD_INT 30
 507: PUSH
 508: LD_INT 0
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: PUSH
 515: LD_INT 30
 517: PUSH
 518: LD_INT 1
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PPUSH
 534: CALL_OW 69
 538: PUSH
 539: FOR_IN
 540: IFFALSE 564
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 542: LD_VAR 0 1
 546: PPUSH
 547: CALL_OW 274
 551: PPUSH
 552: LD_INT 1
 554: PPUSH
 555: LD_INT 9999
 557: PPUSH
 558: CALL_OW 277
 562: GO 539
 564: POP
 565: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 566: LD_ADDR_VAR 0 1
 570: PUSH
 571: LD_INT 22
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 2
 583: PUSH
 584: LD_INT 30
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 30
 596: PUSH
 597: LD_INT 1
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 69
 617: PUSH
 618: FOR_IN
 619: IFFALSE 643
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 621: LD_VAR 0 1
 625: PPUSH
 626: CALL_OW 274
 630: PPUSH
 631: LD_INT 2
 633: PPUSH
 634: LD_INT 9999
 636: PPUSH
 637: CALL_OW 277
 641: GO 618
 643: POP
 644: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 645: LD_ADDR_VAR 0 1
 649: PUSH
 650: LD_INT 22
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 30
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: PUSH
 673: LD_INT 30
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: PUSH
 697: FOR_IN
 698: IFFALSE 722
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 700: LD_VAR 0 1
 704: PPUSH
 705: CALL_OW 274
 709: PPUSH
 710: LD_INT 3
 712: PPUSH
 713: LD_INT 9999
 715: PPUSH
 716: CALL_OW 277
 720: GO 697
 722: POP
 723: POP
// end ; end_of_file
 724: PPOPN 1
 726: END
// export function PrepareHeroes ; begin
 727: LD_INT 0
 729: PPUSH
// uc_side = 1 ;
 730: LD_ADDR_OWVAR 20
 734: PUSH
 735: LD_INT 1
 737: ST_TO_ADDR
// uc_nation = 1 ;
 738: LD_ADDR_OWVAR 21
 742: PUSH
 743: LD_INT 1
 745: ST_TO_ADDR
// if JMMVeh = [ ] then
 746: LD_EXP 78
 750: PUSH
 751: EMPTY
 752: EQUAL
 753: IFFALSE 799
// begin vc_engine = 3 ;
 755: LD_ADDR_OWVAR 39
 759: PUSH
 760: LD_INT 3
 762: ST_TO_ADDR
// vc_control = 1 ;
 763: LD_ADDR_OWVAR 38
 767: PUSH
 768: LD_INT 1
 770: ST_TO_ADDR
// vc_chassis = 5 ;
 771: LD_ADDR_OWVAR 37
 775: PUSH
 776: LD_INT 5
 778: ST_TO_ADDR
// vc_weapon = 9 ;
 779: LD_ADDR_OWVAR 40
 783: PUSH
 784: LD_INT 9
 786: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 787: LD_ADDR_EXP 24
 791: PUSH
 792: CALL_OW 45
 796: ST_TO_ADDR
// end else
 797: GO 881
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 799: LD_ADDR_OWVAR 37
 803: PUSH
 804: LD_EXP 78
 808: PUSH
 809: LD_INT 1
 811: ARRAY
 812: PUSH
 813: LD_INT 1
 815: ARRAY
 816: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 817: LD_ADDR_OWVAR 39
 821: PUSH
 822: LD_EXP 78
 826: PUSH
 827: LD_INT 2
 829: ARRAY
 830: PUSH
 831: LD_INT 1
 833: ARRAY
 834: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 835: LD_ADDR_OWVAR 38
 839: PUSH
 840: LD_EXP 78
 844: PUSH
 845: LD_INT 3
 847: ARRAY
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 853: LD_ADDR_OWVAR 40
 857: PUSH
 858: LD_EXP 78
 862: PUSH
 863: LD_INT 4
 865: ARRAY
 866: PUSH
 867: LD_INT 1
 869: ARRAY
 870: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 871: LD_ADDR_EXP 24
 875: PUSH
 876: CALL_OW 45
 880: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 881: LD_EXP 79
 885: PUSH
 886: EMPTY
 887: EQUAL
 888: NOT
 889: IFFALSE 973
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 891: LD_ADDR_OWVAR 37
 895: PUSH
 896: LD_EXP 79
 900: PUSH
 901: LD_INT 1
 903: ARRAY
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 909: LD_ADDR_OWVAR 39
 913: PUSH
 914: LD_EXP 79
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: PUSH
 923: LD_INT 1
 925: ARRAY
 926: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 927: LD_ADDR_OWVAR 38
 931: PUSH
 932: LD_EXP 79
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 945: LD_ADDR_OWVAR 40
 949: PUSH
 950: LD_EXP 79
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 963: LD_ADDR_EXP 25
 967: PUSH
 968: CALL_OW 45
 972: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 973: LD_EXP 24
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 985: LD_EXP 25
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 997: LD_EXP 24
1001: PPUSH
1002: LD_INT 99
1004: PPUSH
1005: LD_INT 154
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 48
// if JMMGirlVeh then
1015: LD_EXP 79
1019: IFFALSE 1039
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
1021: LD_EXP 25
1025: PPUSH
1026: LD_INT 98
1028: PPUSH
1029: LD_INT 159
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
1039: LD_ADDR_EXP 1
1043: PUSH
1044: LD_STRING 14_JMM
1046: PPUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL 6640 0 2
1054: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
1055: LD_EXP 1
1059: PPUSH
1060: LD_EXP 24
1064: PPUSH
1065: CALL_OW 52
// if not JMMGirlVeh = [ ] then
1069: LD_EXP 79
1073: PUSH
1074: EMPTY
1075: EQUAL
1076: NOT
1077: IFFALSE 1199
// begin if JMMGirl = 1 then
1079: LD_EXP 80
1083: PUSH
1084: LD_INT 1
1086: EQUAL
1087: IFFALSE 1119
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
1089: LD_ADDR_EXP 2
1093: PUSH
1094: LD_STRING 14_Joan
1096: PPUSH
1097: LD_INT 1
1099: PPUSH
1100: CALL 6640 0 2
1104: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
1105: LD_EXP 2
1109: PPUSH
1110: LD_EXP 25
1114: PPUSH
1115: CALL_OW 52
// end ; if JMMGirl = 2 then
1119: LD_EXP 80
1123: PUSH
1124: LD_INT 2
1126: EQUAL
1127: IFFALSE 1159
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
1129: LD_ADDR_EXP 4
1133: PUSH
1134: LD_STRING 14_Lisa
1136: PPUSH
1137: LD_INT 1
1139: PPUSH
1140: CALL 6640 0 2
1144: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
1145: LD_EXP 4
1149: PPUSH
1150: LD_EXP 25
1154: PPUSH
1155: CALL_OW 52
// end ; if JMMGirl = 3 then
1159: LD_EXP 80
1163: PUSH
1164: LD_INT 3
1166: EQUAL
1167: IFFALSE 1199
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
1169: LD_ADDR_EXP 16
1173: PUSH
1174: LD_STRING 14_Connie
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 6640 0 2
1184: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1185: LD_EXP 16
1189: PPUSH
1190: LD_EXP 25
1194: PPUSH
1195: CALL_OW 52
// end ; end ; uc_side = 4 ;
1199: LD_ADDR_OWVAR 20
1203: PUSH
1204: LD_INT 4
1206: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1207: LD_ADDR_EXP 17
1211: PUSH
1212: LD_STRING Powell
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL 6640 0 2
1222: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 42 , 62 , 5 , false ) ;
1223: LD_EXP 17
1227: PPUSH
1228: LD_INT 42
1230: PPUSH
1231: LD_INT 62
1233: PPUSH
1234: LD_INT 5
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 50
// ComTurnXY ( Powell , 43 , 63 ) ;
1244: LD_EXP 17
1248: PPUSH
1249: LD_INT 43
1251: PPUSH
1252: LD_INT 63
1254: PPUSH
1255: CALL_OW 118
// end ;
1259: LD_VAR 0 1
1263: RET
// export function PrepareHeroesFromEpsilon ; begin
1264: LD_INT 0
1266: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1267: LD_ADDR_EXP 4
1271: PUSH
1272: LD_STRING Lisa
1274: PPUSH
1275: CALL 6697 0 1
1279: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1280: LD_ADDR_EXP 5
1284: PUSH
1285: LD_STRING Donaldson
1287: PPUSH
1288: CALL 6697 0 1
1292: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1293: LD_ADDR_EXP 6
1297: PUSH
1298: LD_STRING Bobby
1300: PPUSH
1301: CALL 6697 0 1
1305: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1306: LD_ADDR_EXP 7
1310: PUSH
1311: LD_STRING Cyrus
1313: PPUSH
1314: CALL 6697 0 1
1318: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1319: LD_ADDR_EXP 8
1323: PUSH
1324: LD_STRING Denis
1326: PPUSH
1327: CALL 6697 0 1
1331: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1332: LD_ADDR_EXP 9
1336: PUSH
1337: LD_STRING Brown
1339: PPUSH
1340: CALL 6697 0 1
1344: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1345: LD_ADDR_EXP 10
1349: PUSH
1350: LD_STRING Gladstone
1352: PPUSH
1353: CALL 6697 0 1
1357: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1358: LD_ADDR_EXP 11
1362: PUSH
1363: LD_STRING Houten
1365: PPUSH
1366: CALL 6697 0 1
1370: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1371: LD_ADDR_EXP 12
1375: PUSH
1376: LD_STRING Cornel
1378: PPUSH
1379: CALL 6697 0 1
1383: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1384: LD_ADDR_EXP 13
1388: PUSH
1389: LD_STRING Gary
1391: PPUSH
1392: CALL 6697 0 1
1396: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1397: LD_ADDR_EXP 14
1401: PUSH
1402: LD_STRING Frank
1404: PPUSH
1405: CALL 6697 0 1
1409: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1410: LD_ADDR_EXP 15
1414: PUSH
1415: LD_STRING Kikuchi
1417: PPUSH
1418: CALL 6697 0 1
1422: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1423: LD_EXP 4
1427: PPUSH
1428: LD_INT 6
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1438: LD_EXP 5
1442: PPUSH
1443: LD_INT 6
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_INT 6
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1468: LD_EXP 7
1472: PPUSH
1473: LD_INT 6
1475: PPUSH
1476: LD_INT 0
1478: PPUSH
1479: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1483: LD_EXP 8
1487: PPUSH
1488: LD_INT 6
1490: PPUSH
1491: LD_INT 0
1493: PPUSH
1494: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1498: LD_EXP 9
1502: PPUSH
1503: LD_INT 6
1505: PPUSH
1506: LD_INT 0
1508: PPUSH
1509: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1513: LD_EXP 10
1517: PPUSH
1518: LD_INT 6
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1528: LD_EXP 11
1532: PPUSH
1533: LD_INT 6
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1543: LD_EXP 12
1547: PPUSH
1548: LD_INT 6
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1558: LD_EXP 13
1562: PPUSH
1563: LD_INT 6
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1573: LD_EXP 14
1577: PPUSH
1578: LD_INT 6
1580: PPUSH
1581: LD_INT 0
1583: PPUSH
1584: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1588: LD_EXP 15
1592: PPUSH
1593: LD_INT 6
1595: PPUSH
1596: LD_INT 0
1598: PPUSH
1599: CALL_OW 49
// end ;
1603: LD_VAR 0 1
1607: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1608: LD_INT 0
1610: PPUSH
1611: PPUSH
1612: PPUSH
1613: PPUSH
1614: PPUSH
// uc_side = 4 ;
1615: LD_ADDR_OWVAR 20
1619: PUSH
1620: LD_INT 4
1622: ST_TO_ADDR
// uc_nation = 1 ;
1623: LD_ADDR_OWVAR 21
1627: PUSH
1628: LD_INT 1
1630: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1631: LD_ADDR_EXP 18
1635: PUSH
1636: LD_STRING 13s_others
1638: PPUSH
1639: CALL_OW 31
1643: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: LD_INT 22
1651: PUSH
1652: LD_INT 4
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 21
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PPUSH
1673: CALL_OW 69
1677: PUSH
1678: LD_EXP 17
1682: PUSH
1683: EMPTY
1684: LIST
1685: DIFF
1686: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1687: LD_ADDR_VAR 0 5
1691: PUSH
1692: LD_VAR 0 4
1696: PPUSH
1697: CALL 6827 0 1
1701: ST_TO_ADDR
// if others13 >= 8 then
1702: LD_EXP 18
1706: PUSH
1707: LD_INT 8
1709: GREATEREQUAL
1710: IFFALSE 1771
// begin for i = 1 to 8 do
1712: LD_ADDR_VAR 0 2
1716: PUSH
1717: DOUBLE
1718: LD_INT 1
1720: DEC
1721: ST_TO_ADDR
1722: LD_INT 8
1724: PUSH
1725: FOR_TO
1726: IFFALSE 1767
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1728: LD_EXP 18
1732: PUSH
1733: LD_INT 1
1735: ARRAY
1736: PPUSH
1737: LD_INT 6
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1747: LD_ADDR_EXP 18
1751: PUSH
1752: LD_EXP 18
1756: PPUSH
1757: LD_INT 1
1759: PPUSH
1760: CALL_OW 3
1764: ST_TO_ADDR
// end ;
1765: GO 1725
1767: POP
1768: POP
// end else
1769: GO 1830
// begin for i = 1 to others13 do
1771: LD_ADDR_VAR 0 2
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_EXP 18
1785: PUSH
1786: FOR_TO
1787: IFFALSE 1828
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1789: LD_EXP 18
1793: PUSH
1794: LD_INT 1
1796: ARRAY
1797: PPUSH
1798: LD_INT 6
1800: PPUSH
1801: LD_INT 0
1803: PPUSH
1804: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1808: LD_ADDR_EXP 18
1812: PUSH
1813: LD_EXP 18
1817: PPUSH
1818: LD_INT 1
1820: PPUSH
1821: CALL_OW 3
1825: ST_TO_ADDR
// end ;
1826: GO 1786
1828: POP
1829: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1830: LD_ADDR_VAR 0 4
1834: PUSH
1835: LD_INT 22
1837: PUSH
1838: LD_INT 4
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 21
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PPUSH
1859: CALL_OW 69
1863: PUSH
1864: LD_EXP 17
1868: PUSH
1869: EMPTY
1870: LIST
1871: DIFF
1872: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1873: LD_ADDR_VAR 0 5
1877: PUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL 6827 0 1
1887: ST_TO_ADDR
// if others13 >= 6 then
1888: LD_EXP 18
1892: PUSH
1893: LD_INT 6
1895: GREATEREQUAL
1896: IFFALSE 1957
// begin for i = 1 to 6 do
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: DOUBLE
1904: LD_INT 1
1906: DEC
1907: ST_TO_ADDR
1908: LD_INT 6
1910: PUSH
1911: FOR_TO
1912: IFFALSE 1953
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1914: LD_EXP 18
1918: PUSH
1919: LD_INT 1
1921: ARRAY
1922: PPUSH
1923: LD_INT 6
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1933: LD_ADDR_EXP 18
1937: PUSH
1938: LD_EXP 18
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: CALL_OW 3
1950: ST_TO_ADDR
// end ;
1951: GO 1911
1953: POP
1954: POP
// end else
1955: GO 2016
// begin for i = 1 to others13 do
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: DOUBLE
1963: LD_INT 1
1965: DEC
1966: ST_TO_ADDR
1967: LD_EXP 18
1971: PUSH
1972: FOR_TO
1973: IFFALSE 2014
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1975: LD_EXP 18
1979: PUSH
1980: LD_INT 1
1982: ARRAY
1983: PPUSH
1984: LD_INT 6
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1994: LD_ADDR_EXP 18
1998: PUSH
1999: LD_EXP 18
2003: PPUSH
2004: LD_INT 1
2006: PPUSH
2007: CALL_OW 3
2011: ST_TO_ADDR
// end ;
2012: GO 1972
2014: POP
2015: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
2016: LD_ADDR_VAR 0 4
2020: PUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 4
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 21
2033: PUSH
2034: LD_INT 1
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PPUSH
2045: CALL_OW 69
2049: PUSH
2050: LD_EXP 17
2054: PUSH
2055: EMPTY
2056: LIST
2057: DIFF
2058: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
2059: LD_ADDR_VAR 0 5
2063: PUSH
2064: LD_VAR 0 4
2068: PPUSH
2069: CALL 6827 0 1
2073: ST_TO_ADDR
// if heroLenght < 19 then
2074: LD_VAR 0 5
2078: PUSH
2079: LD_INT 19
2081: LESS
2082: IFFALSE 2180
// for i = 1 to 19 - heroLenght do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 19
2096: PUSH
2097: LD_VAR 0 5
2101: MINUS
2102: PUSH
2103: FOR_TO
2104: IFFALSE 2178
// begin hc_gallery =  ;
2106: LD_ADDR_OWVAR 33
2110: PUSH
2111: LD_STRING 
2113: ST_TO_ADDR
// hc_name =  ;
2114: LD_ADDR_OWVAR 26
2118: PUSH
2119: LD_STRING 
2121: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
2122: LD_INT 0
2124: PPUSH
2125: LD_INT 1
2127: PPUSH
2128: LD_INT 4
2130: PPUSH
2131: CALL_OW 12
2135: PPUSH
2136: LD_INT 6
2138: PPUSH
2139: LD_INT 8
2141: PPUSH
2142: CALL_OW 12
2146: PPUSH
2147: CALL_OW 380
// un = CreateHuman ;
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: CALL_OW 44
2160: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
2161: LD_VAR 0 3
2165: PPUSH
2166: LD_INT 6
2168: PPUSH
2169: LD_INT 0
2171: PPUSH
2172: CALL_OW 49
// end ;
2176: GO 2103
2178: POP
2179: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
2180: LD_ADDR_VAR 0 4
2184: PUSH
2185: LD_INT 22
2187: PUSH
2188: LD_INT 4
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 21
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PPUSH
2209: CALL_OW 69
2213: PUSH
2214: LD_EXP 17
2218: PUSH
2219: LD_EXP 1
2223: PUSH
2224: LD_EXP 2
2228: PUSH
2229: LD_EXP 3
2233: PUSH
2234: LD_EXP 4
2238: PUSH
2239: LD_EXP 5
2243: PUSH
2244: LD_EXP 6
2248: PUSH
2249: LD_EXP 7
2253: PUSH
2254: LD_EXP 8
2258: PUSH
2259: LD_EXP 9
2263: PUSH
2264: LD_EXP 10
2268: PUSH
2269: LD_EXP 11
2273: PUSH
2274: LD_EXP 12
2278: PUSH
2279: LD_EXP 13
2283: PUSH
2284: LD_EXP 14
2288: PUSH
2289: LD_EXP 15
2293: PUSH
2294: LD_EXP 16
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: DIFF
2318: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2319: LD_ADDR_EXP 65
2323: PUSH
2324: LD_VAR 0 4
2328: PPUSH
2329: LD_INT 1
2331: PPUSH
2332: CALL 7173 0 2
2336: ST_TO_ADDR
// for i = 1 to 8 do
2337: LD_ADDR_VAR 0 2
2341: PUSH
2342: DOUBLE
2343: LD_INT 1
2345: DEC
2346: ST_TO_ADDR
2347: LD_INT 8
2349: PUSH
2350: FOR_TO
2351: IFFALSE 2381
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2353: LD_ADDR_EXP 66
2357: PUSH
2358: LD_EXP 66
2362: PUSH
2363: LD_EXP 65
2367: PUSH
2368: LD_VAR 0 2
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: ADD
2378: ST_TO_ADDR
2379: GO 2350
2381: POP
2382: POP
// SetClass ( amUnitsAttack , 1 ) ;
2383: LD_EXP 66
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 336
// end ;
2395: LD_VAR 0 1
2399: RET
// export function PrepareSupportFromKappa ; var i , veh ; begin
2400: LD_INT 0
2402: PPUSH
2403: PPUSH
2404: PPUSH
// uc_side = 1 ;
2405: LD_ADDR_OWVAR 20
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// uc_nation = 1 ;
2413: LD_ADDR_OWVAR 21
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// for i := 1 to 5 do
2421: LD_ADDR_VAR 0 2
2425: PUSH
2426: DOUBLE
2427: LD_INT 1
2429: DEC
2430: ST_TO_ADDR
2431: LD_INT 5
2433: PUSH
2434: FOR_TO
2435: IFFALSE 2519
// begin vc_engine = 3 ;
2437: LD_ADDR_OWVAR 39
2441: PUSH
2442: LD_INT 3
2444: ST_TO_ADDR
// vc_control = 3 ;
2445: LD_ADDR_OWVAR 38
2449: PUSH
2450: LD_INT 3
2452: ST_TO_ADDR
// vc_chassis = 3 ;
2453: LD_ADDR_OWVAR 37
2457: PUSH
2458: LD_INT 3
2460: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2461: LD_ADDR_OWVAR 40
2465: PUSH
2466: LD_INT 5
2468: PUSH
2469: LD_INT 9
2471: PUSH
2472: LD_INT 7
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 1
2482: PPUSH
2483: LD_INT 3
2485: PPUSH
2486: CALL_OW 12
2490: ARRAY
2491: ST_TO_ADDR
// veh = CreateVehicle ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 45
2501: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 14
2509: PPUSH
2510: LD_INT 0
2512: PPUSH
2513: CALL_OW 49
// end ;
2517: GO 2434
2519: POP
2520: POP
// vc_engine = 3 ;
2521: LD_ADDR_OWVAR 39
2525: PUSH
2526: LD_INT 3
2528: ST_TO_ADDR
// vc_control = 1 ;
2529: LD_ADDR_OWVAR 38
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// vc_chassis = 3 ;
2537: LD_ADDR_OWVAR 37
2541: PUSH
2542: LD_INT 3
2544: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2545: LD_ADDR_OWVAR 40
2549: PUSH
2550: LD_INT 5
2552: PUSH
2553: LD_INT 9
2555: PUSH
2556: LD_INT 7
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 3
2569: PPUSH
2570: CALL_OW 12
2574: ARRAY
2575: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
2576: LD_ADDR_EXP 25
2580: PUSH
2581: CALL_OW 45
2585: ST_TO_ADDR
// PlaceUnitArea ( NewJMMGirlVeh , KappaSpawn , false ) ;
2586: LD_EXP 25
2590: PPUSH
2591: LD_INT 14
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: CALL_OW 49
// if JMMGirl = 1 then
2601: LD_EXP 80
2605: PUSH
2606: LD_INT 1
2608: EQUAL
2609: IFFALSE 2662
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
2611: LD_ADDR_EXP 2
2615: PUSH
2616: LD_STRING 14_Joan
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: CALL 6640 0 2
2626: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
2627: LD_EXP 2
2631: PPUSH
2632: LD_EXP 25
2636: PPUSH
2637: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2641: LD_EXP 25
2645: PPUSH
2646: CALL_OW 87
// Say ( Joan , D10BW-Joan-1 ) ;
2650: LD_EXP 2
2654: PPUSH
2655: LD_STRING D10BW-Joan-1
2657: PPUSH
2658: CALL_OW 88
// end ; if JMMGirl = 2 then
2662: LD_EXP 80
2666: PUSH
2667: LD_INT 2
2669: EQUAL
2670: IFFALSE 2723
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
2672: LD_ADDR_EXP 4
2676: PUSH
2677: LD_STRING 14_Lisa
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL 6640 0 2
2687: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
2688: LD_EXP 4
2692: PPUSH
2693: LD_EXP 25
2697: PPUSH
2698: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2702: LD_EXP 25
2706: PPUSH
2707: CALL_OW 87
// Say ( Lisa , D10BW-Lisa-1 ) ;
2711: LD_EXP 4
2715: PPUSH
2716: LD_STRING D10BW-Lisa-1
2718: PPUSH
2719: CALL_OW 88
// end ; if JMMGirl = 3 then
2723: LD_EXP 80
2727: PUSH
2728: LD_INT 3
2730: EQUAL
2731: IFFALSE 2784
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
2733: LD_ADDR_EXP 16
2737: PUSH
2738: LD_STRING 14_Connie
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL 6640 0 2
2748: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
2749: LD_EXP 16
2753: PPUSH
2754: LD_EXP 25
2758: PPUSH
2759: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2763: LD_EXP 25
2767: PPUSH
2768: CALL_OW 87
// Say ( Lisa , D10BW-Con-1 ) ;
2772: LD_EXP 4
2776: PPUSH
2777: LD_STRING D10BW-Con-1
2779: PPUSH
2780: CALL_OW 88
// end ; end ;
2784: LD_VAR 0 1
2788: RET
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , avalaibleVehs , vehicles , resources , cargoList ; begin
2789: LD_INT 0
2791: PPUSH
2792: PPUSH
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
2798: PPUSH
2799: PPUSH
// uc_side = 1 ;
2800: LD_ADDR_OWVAR 20
2804: PUSH
2805: LD_INT 1
2807: ST_TO_ADDR
// uc_nation = 1 ;
2808: LD_ADDR_OWVAR 21
2812: PUSH
2813: LD_INT 1
2815: ST_TO_ADDR
// omegaVeh = [ ] ;
2816: LD_ADDR_VAR 0 3
2820: PUSH
2821: EMPTY
2822: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
2823: LD_STRING 13s_Lisa
2825: PPUSH
2826: CALL_OW 28
2830: PUSH
2831: LD_INT 0
2833: EQUAL
2834: IFFALSE 2849
// Lisa = PrepareUnitOmega ( Lisa ) ;
2836: LD_ADDR_EXP 4
2840: PUSH
2841: LD_STRING Lisa
2843: PPUSH
2844: CALL 6754 0 1
2848: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
2849: LD_STRING 13s_Donaldson
2851: PPUSH
2852: CALL_OW 28
2856: PUSH
2857: LD_INT 0
2859: EQUAL
2860: IFFALSE 2875
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
2862: LD_ADDR_EXP 5
2866: PUSH
2867: LD_STRING Donaldson
2869: PPUSH
2870: CALL 6754 0 1
2874: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
2875: LD_STRING 13s_Bobby
2877: PPUSH
2878: CALL_OW 28
2882: PUSH
2883: LD_INT 0
2885: EQUAL
2886: IFFALSE 2901
// Bobby = PrepareUnitOmega ( Bobby ) ;
2888: LD_ADDR_EXP 6
2892: PUSH
2893: LD_STRING Bobby
2895: PPUSH
2896: CALL 6754 0 1
2900: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
2901: LD_STRING 13s_Cyrus
2903: PPUSH
2904: CALL_OW 28
2908: PUSH
2909: LD_INT 0
2911: EQUAL
2912: IFFALSE 2927
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
2914: LD_ADDR_EXP 7
2918: PUSH
2919: LD_STRING Cyrus
2921: PPUSH
2922: CALL 6754 0 1
2926: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
2927: LD_STRING 13s_Denis
2929: PPUSH
2930: CALL_OW 28
2934: PUSH
2935: LD_INT 0
2937: EQUAL
2938: IFFALSE 2953
// Denis = PrepareUnitOmega ( Denis ) ;
2940: LD_ADDR_EXP 8
2944: PUSH
2945: LD_STRING Denis
2947: PPUSH
2948: CALL 6754 0 1
2952: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
2953: LD_STRING 13s_Brown
2955: PPUSH
2956: CALL_OW 28
2960: PUSH
2961: LD_INT 0
2963: EQUAL
2964: IFFALSE 2979
// Brown = PrepareUnitOmega ( Brown ) ;
2966: LD_ADDR_EXP 9
2970: PUSH
2971: LD_STRING Brown
2973: PPUSH
2974: CALL 6754 0 1
2978: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
2979: LD_STRING 13s_Gladstone
2981: PPUSH
2982: CALL_OW 28
2986: PUSH
2987: LD_INT 0
2989: EQUAL
2990: IFFALSE 3005
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
2992: LD_ADDR_EXP 10
2996: PUSH
2997: LD_STRING Gladstone
2999: PPUSH
3000: CALL 6754 0 1
3004: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
3005: LD_STRING 13s_Houten
3007: PPUSH
3008: CALL_OW 28
3012: PUSH
3013: LD_INT 0
3015: EQUAL
3016: IFFALSE 3031
// Houten = PrepareUnitOmega ( Houten ) ;
3018: LD_ADDR_EXP 11
3022: PUSH
3023: LD_STRING Houten
3025: PPUSH
3026: CALL 6754 0 1
3030: ST_TO_ADDR
// if TestCharacters ( 13s_Cornell ) = false then
3031: LD_STRING 13s_Cornell
3033: PPUSH
3034: CALL_OW 28
3038: PUSH
3039: LD_INT 0
3041: EQUAL
3042: IFFALSE 3057
// Cornel = PrepareUnitOmega ( Cornell ) ;
3044: LD_ADDR_EXP 12
3048: PUSH
3049: LD_STRING Cornell
3051: PPUSH
3052: CALL 6754 0 1
3056: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
3057: LD_STRING 13s_Gary
3059: PPUSH
3060: CALL_OW 28
3064: PUSH
3065: LD_INT 0
3067: EQUAL
3068: IFFALSE 3083
// Gary = PrepareUnitOmega ( Gary ) ;
3070: LD_ADDR_EXP 13
3074: PUSH
3075: LD_STRING Gary
3077: PPUSH
3078: CALL 6754 0 1
3082: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
3083: LD_STRING 13s_Frank
3085: PPUSH
3086: CALL_OW 28
3090: PUSH
3091: LD_INT 0
3093: EQUAL
3094: IFFALSE 3109
// Frank = PrepareUnitOmega ( Frank ) ;
3096: LD_ADDR_EXP 14
3100: PUSH
3101: LD_STRING Frank
3103: PPUSH
3104: CALL 6754 0 1
3108: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3109: LD_STRING 13s_Kikuchi
3111: PPUSH
3112: CALL_OW 28
3116: PUSH
3117: LD_INT 0
3119: EQUAL
3120: IFFALSE 3135
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3122: LD_ADDR_EXP 15
3126: PUSH
3127: LD_STRING Kikuchi
3129: PPUSH
3130: CALL 6754 0 1
3134: ST_TO_ADDR
// if JMMGirl = 1 or JMMGirl = 2 then
3135: LD_EXP 80
3139: PUSH
3140: LD_INT 1
3142: EQUAL
3143: PUSH
3144: LD_EXP 80
3148: PUSH
3149: LD_INT 2
3151: EQUAL
3152: OR
3153: IFFALSE 3168
// Connie = PrepareUnitOmega ( Connie ) ;
3155: LD_ADDR_EXP 16
3159: PUSH
3160: LD_STRING Connie
3162: PPUSH
3163: CALL 6754 0 1
3167: ST_TO_ADDR
// Gordon = PrepareUnitOmega ( Gordon ) ;
3168: LD_ADDR_EXP 22
3172: PUSH
3173: LD_STRING Gordon
3175: PPUSH
3176: CALL 6754 0 1
3180: ST_TO_ADDR
// Peter = PrepareUnitOmega ( Peter ) ;
3181: LD_ADDR_EXP 23
3185: PUSH
3186: LD_STRING Peter
3188: PPUSH
3189: CALL 6754 0 1
3193: ST_TO_ADDR
// if StevensStatus = 1 then
3194: LD_EXP 77
3198: PUSH
3199: LD_INT 1
3201: EQUAL
3202: IFFALSE 3219
// Stevens = PrepareUnitOmega ( Stevens ) else
3204: LD_ADDR_EXP 3
3208: PUSH
3209: LD_STRING Stevens
3211: PPUSH
3212: CALL 6754 0 1
3216: ST_TO_ADDR
3217: GO 3232
// Baker = PrepareUnitOmega ( Baker ) ;
3219: LD_ADDR_EXP 21
3223: PUSH
3224: LD_STRING Baker
3226: PPUSH
3227: CALL 6754 0 1
3231: ST_TO_ADDR
// others13Omega = CreateCharacterSet ( 15_other_survivors ) ;
3232: LD_ADDR_EXP 19
3236: PUSH
3237: LD_STRING 15_other_survivors
3239: PPUSH
3240: CALL_OW 31
3244: ST_TO_ADDR
// vehicles = LoadVariable ( 15_Vehicles_1 , [ ] ) ;
3245: LD_ADDR_VAR 0 7
3249: PUSH
3250: LD_STRING 15_Vehicles_1
3252: PPUSH
3253: EMPTY
3254: PPUSH
3255: CALL_OW 30
3259: ST_TO_ADDR
// resources = LoadVariable ( 15_ResourcesInCargo_1 , [ ] ) ;
3260: LD_ADDR_VAR 0 8
3264: PUSH
3265: LD_STRING 15_ResourcesInCargo_1
3267: PPUSH
3268: EMPTY
3269: PPUSH
3270: CALL_OW 30
3274: ST_TO_ADDR
// for i := 1 to vehicles do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_VAR 0 7
3289: PUSH
3290: FOR_TO
3291: IFFALSE 3516
// begin uc_nation = vehicles [ i ] [ 1 ] ;
3293: LD_ADDR_OWVAR 21
3297: PUSH
3298: LD_VAR 0 7
3302: PUSH
3303: LD_VAR 0 2
3307: ARRAY
3308: PUSH
3309: LD_INT 1
3311: ARRAY
3312: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
3313: LD_ADDR_OWVAR 37
3317: PUSH
3318: LD_VAR 0 7
3322: PUSH
3323: LD_VAR 0 2
3327: ARRAY
3328: PUSH
3329: LD_INT 2
3331: ARRAY
3332: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
3333: LD_ADDR_OWVAR 39
3337: PUSH
3338: LD_VAR 0 7
3342: PUSH
3343: LD_VAR 0 2
3347: ARRAY
3348: PUSH
3349: LD_INT 3
3351: ARRAY
3352: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
3353: LD_ADDR_OWVAR 38
3357: PUSH
3358: LD_VAR 0 7
3362: PUSH
3363: LD_VAR 0 2
3367: ARRAY
3368: PUSH
3369: LD_INT 4
3371: ARRAY
3372: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
3373: LD_ADDR_OWVAR 40
3377: PUSH
3378: LD_VAR 0 7
3382: PUSH
3383: LD_VAR 0 2
3387: ARRAY
3388: PUSH
3389: LD_INT 5
3391: ARRAY
3392: ST_TO_ADDR
// if vc_weapon = 8 then
3393: LD_OWVAR 40
3397: PUSH
3398: LD_INT 8
3400: EQUAL
3401: IFFALSE 3413
// vc_weapon = 9 else
3403: LD_ADDR_OWVAR 40
3407: PUSH
3408: LD_INT 9
3410: ST_TO_ADDR
3411: GO 3433
// vc_weapon = vehicles [ i ] [ 5 ] ;
3413: LD_ADDR_OWVAR 40
3417: PUSH
3418: LD_VAR 0 7
3422: PUSH
3423: LD_VAR 0 2
3427: ARRAY
3428: PUSH
3429: LD_INT 5
3431: ARRAY
3432: ST_TO_ADDR
// vc_fuel_battery = 40 ;
3433: LD_ADDR_OWVAR 41
3437: PUSH
3438: LD_INT 40
3440: ST_TO_ADDR
// veh = CreateVehicle ;
3441: LD_ADDR_VAR 0 5
3445: PUSH
3446: CALL_OW 45
3450: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
3451: LD_VAR 0 5
3455: PPUSH
3456: LD_INT 5
3458: PPUSH
3459: CALL_OW 233
// SetLives ( veh , rand ( 300 , 800 ) ) ;
3463: LD_VAR 0 5
3467: PPUSH
3468: LD_INT 300
3470: PPUSH
3471: LD_INT 800
3473: PPUSH
3474: CALL_OW 12
3478: PPUSH
3479: CALL_OW 234
// omegaVeh = omegaVeh ^ veh ;
3483: LD_ADDR_VAR 0 3
3487: PUSH
3488: LD_VAR 0 3
3492: PUSH
3493: LD_VAR 0 5
3497: ADD
3498: ST_TO_ADDR
// PlaceUnitArea ( veh , OmegaSpawn , false ) ;
3499: LD_VAR 0 5
3503: PPUSH
3504: LD_INT 16
3506: PPUSH
3507: LD_INT 0
3509: PPUSH
3510: CALL_OW 49
// end ;
3514: GO 3290
3516: POP
3517: POP
// cargoList = FilterUnitsInArea ( OmegaSpawn , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] , [ f_control , 1 ] , [ f_engine , 3 ] ] ) ;
3518: LD_ADDR_VAR 0 9
3522: PUSH
3523: LD_INT 16
3525: PPUSH
3526: LD_INT 22
3528: PUSH
3529: LD_INT 1
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: PUSH
3536: LD_INT 21
3538: PUSH
3539: LD_INT 2
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: PUSH
3546: LD_INT 34
3548: PUSH
3549: LD_INT 12
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: PUSH
3556: LD_INT 33
3558: PUSH
3559: LD_INT 1
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: PUSH
3566: LD_INT 32
3568: PUSH
3569: LD_INT 3
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: PPUSH
3583: CALL_OW 70
3587: ST_TO_ADDR
// if cargoList > 0 then
3588: LD_VAR 0 9
3592: PUSH
3593: LD_INT 0
3595: GREATER
3596: IFFALSE 3729
// for i = 1 to cargoList do
3598: LD_ADDR_VAR 0 2
3602: PUSH
3603: DOUBLE
3604: LD_INT 1
3606: DEC
3607: ST_TO_ADDR
3608: LD_VAR 0 9
3612: PUSH
3613: FOR_TO
3614: IFFALSE 3727
// begin if resources > 0 then
3616: LD_VAR 0 8
3620: PUSH
3621: LD_INT 0
3623: GREATER
3624: IFFALSE 3725
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
3626: LD_VAR 0 9
3630: PUSH
3631: LD_VAR 0 2
3635: ARRAY
3636: PPUSH
3637: LD_INT 1
3639: PPUSH
3640: LD_VAR 0 8
3644: PUSH
3645: LD_VAR 0 2
3649: ARRAY
3650: PUSH
3651: LD_INT 1
3653: ARRAY
3654: PPUSH
3655: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
3659: LD_VAR 0 9
3663: PUSH
3664: LD_VAR 0 2
3668: ARRAY
3669: PPUSH
3670: LD_INT 2
3672: PPUSH
3673: LD_VAR 0 8
3677: PUSH
3678: LD_VAR 0 2
3682: ARRAY
3683: PUSH
3684: LD_INT 2
3686: ARRAY
3687: PPUSH
3688: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
3692: LD_VAR 0 9
3696: PUSH
3697: LD_VAR 0 2
3701: ARRAY
3702: PPUSH
3703: LD_INT 3
3705: PPUSH
3706: LD_VAR 0 8
3710: PUSH
3711: LD_VAR 0 2
3715: ARRAY
3716: PUSH
3717: LD_INT 3
3719: ARRAY
3720: PPUSH
3721: CALL_OW 291
// end ; end ;
3725: GO 3613
3727: POP
3728: POP
// for i := 1 to heroesFromOmega do
3729: LD_ADDR_VAR 0 2
3733: PUSH
3734: DOUBLE
3735: LD_INT 1
3737: DEC
3738: ST_TO_ADDR
3739: LD_EXP 20
3743: PUSH
3744: FOR_TO
3745: IFFALSE 3775
// begin PlaceHumanInUnit ( heroesFromOmega [ i ] , omegaVeh [ i ] ) ;
3747: LD_EXP 20
3751: PUSH
3752: LD_VAR 0 2
3756: ARRAY
3757: PPUSH
3758: LD_VAR 0 3
3762: PUSH
3763: LD_VAR 0 2
3767: ARRAY
3768: PPUSH
3769: CALL_OW 52
// end ;
3773: GO 3744
3775: POP
3776: POP
// avalaibleVehs = UnitFilter ( omegaVeh , [ f_empty ] ) ;
3777: LD_ADDR_VAR 0 6
3781: PUSH
3782: LD_VAR 0 3
3786: PPUSH
3787: LD_INT 58
3789: PUSH
3790: EMPTY
3791: LIST
3792: PPUSH
3793: CALL_OW 72
3797: ST_TO_ADDR
// for i := 1 to others13Omega do
3798: LD_ADDR_VAR 0 2
3802: PUSH
3803: DOUBLE
3804: LD_INT 1
3806: DEC
3807: ST_TO_ADDR
3808: LD_EXP 19
3812: PUSH
3813: FOR_TO
3814: IFFALSE 3844
// begin PlaceHumanInUnit ( others13Omega [ i ] , avalaibleVehs [ i ] ) ;
3816: LD_EXP 19
3820: PUSH
3821: LD_VAR 0 2
3825: ARRAY
3826: PPUSH
3827: LD_VAR 0 6
3831: PUSH
3832: LD_VAR 0 2
3836: ARRAY
3837: PPUSH
3838: CALL_OW 52
// end ;
3842: GO 3813
3844: POP
3845: POP
// end ; end_of_file
3846: LD_VAR 0 1
3850: RET
// export function PrepareLegion ; var i ; begin
3851: LD_INT 0
3853: PPUSH
3854: PPUSH
// uc_side = 8 ;
3855: LD_ADDR_OWVAR 20
3859: PUSH
3860: LD_INT 8
3862: ST_TO_ADDR
// uc_nation = 2 ;
3863: LD_ADDR_OWVAR 21
3867: PUSH
3868: LD_INT 2
3870: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3871: LD_ADDR_EXP 30
3875: PUSH
3876: LD_STRING Kurt
3878: PPUSH
3879: LD_INT 0
3881: PPUSH
3882: CALL 6640 0 2
3886: ST_TO_ADDR
// Kozlov = PrepareUnit ( Kozlov , false ) ;
3887: LD_ADDR_EXP 36
3891: PUSH
3892: LD_STRING Kozlov
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL 6640 0 2
3902: ST_TO_ADDR
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
3903: LD_INT 8
3905: PPUSH
3906: LD_INT 2
3908: PPUSH
3909: LD_INT 122
3911: PPUSH
3912: LD_INT 10
3914: PPUSH
3915: LD_INT 2
3917: PPUSH
3918: LD_INT 4
3920: PPUSH
3921: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
3925: LD_INT 8
3927: PPUSH
3928: LD_INT 2
3930: PPUSH
3931: LD_INT 99
3933: PPUSH
3934: LD_INT 10
3936: PPUSH
3937: LD_INT 2
3939: PPUSH
3940: LD_INT 2
3942: PPUSH
3943: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
3947: LD_INT 8
3949: PPUSH
3950: LD_INT 2
3952: PPUSH
3953: LD_INT 104
3955: PPUSH
3956: LD_INT 10
3958: PPUSH
3959: LD_INT 1
3961: PPUSH
3962: LD_INT 2
3964: PPUSH
3965: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
3969: LD_INT 8
3971: PPUSH
3972: LD_INT 2
3974: PPUSH
3975: LD_INT 104
3977: PPUSH
3978: LD_INT 10
3980: PPUSH
3981: LD_INT 8
3983: PPUSH
3984: LD_INT 1
3986: PPUSH
3987: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
3991: LD_INT 8
3993: PPUSH
3994: LD_INT 2
3996: PPUSH
3997: LD_INT 118
3999: PPUSH
4000: LD_INT 10
4002: PPUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 1
4008: PPUSH
4009: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
4013: LD_INT 8
4015: PPUSH
4016: LD_INT 2
4018: PPUSH
4019: LD_INT 117
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: LD_INT 4
4030: PPUSH
4031: CALL 7734 0 6
// RespawnInside ( 8 , 2 , ArLab1 , 10 , 4 , 2 ) ;
4035: LD_INT 8
4037: PPUSH
4038: LD_INT 2
4040: PPUSH
4041: LD_INT 252
4043: PPUSH
4044: LD_INT 10
4046: PPUSH
4047: LD_INT 4
4049: PPUSH
4050: LD_INT 2
4052: PPUSH
4053: CALL 7734 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
4057: LD_ADDR_VAR 0 2
4061: PUSH
4062: LD_INT 22
4064: PUSH
4065: LD_INT 8
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 21
4074: PUSH
4075: LD_INT 3
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 30
4084: PUSH
4085: LD_INT 32
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 58
4094: PUSH
4095: EMPTY
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 69
4108: PUSH
4109: FOR_IN
4110: IFFALSE 4138
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
4112: LD_INT 8
4114: PPUSH
4115: LD_INT 2
4117: PPUSH
4118: LD_VAR 0 2
4122: PPUSH
4123: LD_INT 10
4125: PPUSH
4126: LD_INT 1
4128: PPUSH
4129: LD_INT 1
4131: PPUSH
4132: CALL 7734 0 6
4136: GO 4109
4138: POP
4139: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
4140: LD_INT 8
4142: PPUSH
4143: LD_INT 2
4145: PPUSH
4146: LD_INT 140
4148: PPUSH
4149: LD_INT 10
4151: PPUSH
4152: LD_INT 3
4154: PPUSH
4155: LD_INT 1
4157: PPUSH
4158: CALL 7734 0 6
// arControler = UnitsInside ( ArControl ) ;
4162: LD_ADDR_EXP 56
4166: PUSH
4167: LD_INT 140
4169: PPUSH
4170: CALL_OW 313
4174: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
4175: LD_INT 139
4177: PPUSH
4178: LD_EXP 56
4182: PUSH
4183: LD_INT 1
4185: ARRAY
4186: PPUSH
4187: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
4191: LD_INT 138
4193: PPUSH
4194: LD_EXP 56
4198: PUSH
4199: LD_INT 1
4201: ARRAY
4202: PPUSH
4203: CALL_OW 195
// hc_name = Ali Hadarach ;
4207: LD_ADDR_OWVAR 26
4211: PUSH
4212: LD_STRING Ali Hadarach
4214: ST_TO_ADDR
// hc_gallery =  ;
4215: LD_ADDR_OWVAR 33
4219: PUSH
4220: LD_STRING 
4222: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
4223: LD_INT 1
4225: PPUSH
4226: LD_INT 8
4228: PPUSH
4229: CALL_OW 383
// LegionFriend = CreateHuman ;
4233: LD_ADDR_EXP 53
4237: PUSH
4238: CALL_OW 44
4242: ST_TO_ADDR
// end ; end_of_file
4243: LD_VAR 0 1
4247: RET
// export function PrepareRussians ; var i ; begin
4248: LD_INT 0
4250: PPUSH
4251: PPUSH
// uc_side = 3 ;
4252: LD_ADDR_OWVAR 20
4256: PUSH
4257: LD_INT 3
4259: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
4260: LD_ADDR_EXP 26
4264: PUSH
4265: LD_STRING Platonov
4267: PPUSH
4268: LD_INT 0
4270: PPUSH
4271: CALL 6640 0 2
4275: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
4276: LD_EXP 26
4280: PPUSH
4281: LD_INT 23
4283: PPUSH
4284: CALL_OW 52
// Yakotich = PrepareUnit ( Yakotich , false ) ;
4288: LD_ADDR_EXP 27
4292: PUSH
4293: LD_STRING Yakotich
4295: PPUSH
4296: LD_INT 0
4298: PPUSH
4299: CALL 6640 0 2
4303: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , RuDep1 ) ;
4304: LD_EXP 27
4308: PPUSH
4309: LD_INT 26
4311: PPUSH
4312: CALL_OW 52
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
4316: LD_ADDR_EXP 37
4320: PUSH
4321: LD_STRING Kovalyuk
4323: PPUSH
4324: LD_INT 0
4326: PPUSH
4327: CALL 6640 0 2
4331: ST_TO_ADDR
// SetClass ( Kovalyuk , 3 ) ;
4332: LD_EXP 37
4336: PPUSH
4337: LD_INT 3
4339: PPUSH
4340: CALL_OW 336
// ruBehMehs = ruBehMehs ^ Kovalyuk ;
4344: LD_ADDR_EXP 58
4348: PUSH
4349: LD_EXP 58
4353: PUSH
4354: LD_EXP 37
4358: ADD
4359: ST_TO_ADDR
// Oblukov = PrepareUnit ( Oblukov , false ) ;
4360: LD_ADDR_EXP 38
4364: PUSH
4365: LD_STRING Oblukov
4367: PPUSH
4368: LD_INT 0
4370: PPUSH
4371: CALL 6640 0 2
4375: ST_TO_ADDR
// Bystrov = PrepareUnit ( Bystrov , false ) ;
4376: LD_ADDR_EXP 39
4380: PUSH
4381: LD_STRING Bystrov
4383: PPUSH
4384: LD_INT 0
4386: PPUSH
4387: CALL 6640 0 2
4391: ST_TO_ADDR
// Fadeev = PrepareUnit ( Fadeev , false ) ;
4392: LD_ADDR_EXP 40
4396: PUSH
4397: LD_STRING Fadeev
4399: PPUSH
4400: LD_INT 0
4402: PPUSH
4403: CALL 6640 0 2
4407: ST_TO_ADDR
// Gleb = PrepareUnit ( Gleb , false ) ;
4408: LD_ADDR_EXP 41
4412: PUSH
4413: LD_STRING Gleb
4415: PPUSH
4416: LD_INT 0
4418: PPUSH
4419: CALL 6640 0 2
4423: ST_TO_ADDR
// Petrosyan = PrepareUnit ( Petrosyan , false ) ;
4424: LD_ADDR_EXP 42
4428: PUSH
4429: LD_STRING Petrosyan
4431: PPUSH
4432: LD_INT 0
4434: PPUSH
4435: CALL 6640 0 2
4439: ST_TO_ADDR
// Petrovova = PrepareUnit ( Petrovova , false ) ;
4440: LD_ADDR_EXP 43
4444: PUSH
4445: LD_STRING Petrovova
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL 6640 0 2
4455: ST_TO_ADDR
// Kuzmov = PrepareUnit ( Kuzmov , false ) ;
4456: LD_ADDR_EXP 44
4460: PUSH
4461: LD_STRING Kuzmov
4463: PPUSH
4464: LD_INT 0
4466: PPUSH
4467: CALL 6640 0 2
4471: ST_TO_ADDR
// Mikhail = PrepareUnit ( Mikhail , false ) ;
4472: LD_ADDR_EXP 45
4476: PUSH
4477: LD_STRING Mikhail
4479: PPUSH
4480: LD_INT 0
4482: PPUSH
4483: CALL 6640 0 2
4487: ST_TO_ADDR
// Furmanov = PrepareUnit ( Furmanov , false ) ;
4488: LD_ADDR_EXP 46
4492: PUSH
4493: LD_STRING Furmanov
4495: PPUSH
4496: LD_INT 0
4498: PPUSH
4499: CALL 6640 0 2
4503: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
4504: LD_ADDR_EXP 47
4508: PUSH
4509: LD_STRING Belkov
4511: PPUSH
4512: LD_INT 0
4514: PPUSH
4515: CALL 6640 0 2
4519: ST_TO_ADDR
// PlaceHumanInUnit ( Oblukov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4520: LD_EXP 38
4524: PPUSH
4525: LD_INT 22
4527: PUSH
4528: LD_INT 3
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 21
4537: PUSH
4538: LD_INT 3
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: PUSH
4545: LD_INT 30
4547: PUSH
4548: LD_INT 32
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PUSH
4555: LD_INT 58
4557: PUSH
4558: EMPTY
4559: LIST
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: PPUSH
4567: CALL_OW 69
4571: PUSH
4572: LD_INT 1
4574: ARRAY
4575: PPUSH
4576: CALL_OW 52
// PlaceHumanInUnit ( Fadeev , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4580: LD_EXP 40
4584: PPUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 3
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 21
4597: PUSH
4598: LD_INT 3
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 30
4607: PUSH
4608: LD_INT 32
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PUSH
4615: LD_INT 58
4617: PUSH
4618: EMPTY
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: PPUSH
4627: CALL_OW 69
4631: PUSH
4632: LD_INT 1
4634: ARRAY
4635: PPUSH
4636: CALL_OW 52
// PlaceHumanInUnit ( Gleb , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4640: LD_EXP 41
4644: PPUSH
4645: LD_INT 22
4647: PUSH
4648: LD_INT 3
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: PUSH
4655: LD_INT 21
4657: PUSH
4658: LD_INT 3
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PUSH
4665: LD_INT 30
4667: PUSH
4668: LD_INT 32
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 58
4677: PUSH
4678: EMPTY
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PPUSH
4687: CALL_OW 69
4691: PUSH
4692: LD_INT 1
4694: ARRAY
4695: PPUSH
4696: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4700: LD_EXP 43
4704: PPUSH
4705: LD_INT 22
4707: PUSH
4708: LD_INT 3
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PUSH
4715: LD_INT 21
4717: PUSH
4718: LD_INT 3
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PUSH
4725: LD_INT 30
4727: PUSH
4728: LD_INT 32
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PUSH
4735: LD_INT 58
4737: PUSH
4738: EMPTY
4739: LIST
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: PPUSH
4747: CALL_OW 69
4751: PUSH
4752: LD_INT 1
4754: ARRAY
4755: PPUSH
4756: CALL_OW 52
// PlaceHumanInUnit ( Kuzmov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4760: LD_EXP 44
4764: PPUSH
4765: LD_INT 22
4767: PUSH
4768: LD_INT 3
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 21
4777: PUSH
4778: LD_INT 3
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: LD_INT 30
4787: PUSH
4788: LD_INT 32
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: PUSH
4795: LD_INT 58
4797: PUSH
4798: EMPTY
4799: LIST
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: PPUSH
4807: CALL_OW 69
4811: PUSH
4812: LD_INT 1
4814: ARRAY
4815: PPUSH
4816: CALL_OW 52
// PlaceHumanInUnit ( Furmanov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4820: LD_EXP 46
4824: PPUSH
4825: LD_INT 22
4827: PUSH
4828: LD_INT 3
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: LD_INT 21
4837: PUSH
4838: LD_INT 3
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PUSH
4845: LD_INT 30
4847: PUSH
4848: LD_INT 32
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 58
4857: PUSH
4858: EMPTY
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 69
4871: PUSH
4872: LD_INT 1
4874: ARRAY
4875: PPUSH
4876: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4880: LD_EXP 47
4884: PPUSH
4885: LD_INT 22
4887: PUSH
4888: LD_INT 3
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 21
4897: PUSH
4898: LD_INT 3
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 30
4907: PUSH
4908: LD_INT 32
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 58
4917: PUSH
4918: EMPTY
4919: LIST
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: PPUSH
4927: CALL_OW 69
4931: PUSH
4932: LD_INT 1
4934: ARRAY
4935: PPUSH
4936: CALL_OW 52
// PlaceHumanInUnit ( Bystrov , RusLab1 ) ;
4940: LD_EXP 39
4944: PPUSH
4945: LD_INT 2
4947: PPUSH
4948: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , RusLab2 ) ;
4952: LD_EXP 42
4956: PPUSH
4957: LD_INT 1
4959: PPUSH
4960: CALL_OW 52
// PlaceHumanInUnit ( Mikhail , RuDep1 ) ;
4964: LD_EXP 45
4968: PPUSH
4969: LD_INT 26
4971: PPUSH
4972: CALL_OW 52
// SetClass ( Mikhail , 2 ) ;
4976: LD_EXP 45
4980: PPUSH
4981: LD_INT 2
4983: PPUSH
4984: CALL_OW 336
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
4988: LD_INT 3
4990: PPUSH
4991: LD_INT 3
4993: PPUSH
4994: LD_INT 26
4996: PPUSH
4997: LD_INT 10
4999: PPUSH
5000: LD_INT 2
5002: PPUSH
5003: LD_INT 5
5005: PPUSH
5006: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RuDep2 , 10 , 2 , 4 ) ;
5010: LD_INT 3
5012: PPUSH
5013: LD_INT 3
5015: PPUSH
5016: LD_INT 23
5018: PPUSH
5019: LD_INT 10
5021: PPUSH
5022: LD_INT 2
5024: PPUSH
5025: LD_INT 4
5027: PPUSH
5028: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
5032: LD_INT 3
5034: PPUSH
5035: LD_INT 3
5037: PPUSH
5038: LD_INT 27
5040: PPUSH
5041: LD_INT 10
5043: PPUSH
5044: LD_INT 9
5046: PPUSH
5047: LD_INT 6
5049: PPUSH
5050: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
5054: LD_INT 3
5056: PPUSH
5057: LD_INT 3
5059: PPUSH
5060: LD_INT 27
5062: PPUSH
5063: LD_INT 10
5065: PPUSH
5066: LD_INT 3
5068: PPUSH
5069: LD_INT 3
5071: PPUSH
5072: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
5076: LD_INT 3
5078: PPUSH
5079: LD_INT 3
5081: PPUSH
5082: LD_INT 4
5084: PPUSH
5085: LD_INT 10
5087: PPUSH
5088: LD_INT 3
5090: PPUSH
5091: LD_INT 6
5093: PPUSH
5094: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
5098: LD_INT 3
5100: PPUSH
5101: LD_INT 3
5103: PPUSH
5104: LD_INT 10
5106: PPUSH
5107: LD_INT 10
5109: PPUSH
5110: LD_INT 3
5112: PPUSH
5113: LD_INT 6
5115: PPUSH
5116: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
5120: LD_INT 3
5122: PPUSH
5123: LD_INT 3
5125: PPUSH
5126: LD_INT 2
5128: PPUSH
5129: LD_INT 10
5131: PPUSH
5132: LD_INT 4
5134: PPUSH
5135: LD_INT 3
5137: PPUSH
5138: CALL 7734 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
5142: LD_INT 3
5144: PPUSH
5145: LD_INT 3
5147: PPUSH
5148: LD_INT 1
5150: PPUSH
5151: LD_INT 10
5153: PPUSH
5154: LD_INT 4
5156: PPUSH
5157: LD_INT 3
5159: PPUSH
5160: CALL 7734 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
5164: LD_ADDR_VAR 0 2
5168: PUSH
5169: LD_INT 22
5171: PUSH
5172: LD_INT 3
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 21
5181: PUSH
5182: LD_INT 3
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: LD_INT 30
5191: PUSH
5192: LD_INT 32
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 58
5201: PUSH
5202: EMPTY
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: PPUSH
5211: CALL_OW 69
5215: PUSH
5216: FOR_IN
5217: IFFALSE 5245
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
5219: LD_INT 3
5221: PPUSH
5222: LD_INT 3
5224: PPUSH
5225: LD_VAR 0 2
5229: PPUSH
5230: LD_INT 10
5232: PPUSH
5233: LD_INT 1
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: CALL 7734 0 6
5243: GO 5216
5245: POP
5246: POP
// end ;
5247: LD_VAR 0 1
5251: RET
// export function PrepareAttackFromKappa ; var i , veh , vehList ; begin
5252: LD_INT 0
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
// uc_side = 6 ;
5258: LD_ADDR_OWVAR 20
5262: PUSH
5263: LD_INT 6
5265: ST_TO_ADDR
// uc_nation = 1 ;
5266: LD_ADDR_OWVAR 21
5270: PUSH
5271: LD_INT 1
5273: ST_TO_ADDR
// vc_engine = 3 ;
5274: LD_ADDR_OWVAR 39
5278: PUSH
5279: LD_INT 3
5281: ST_TO_ADDR
// vc_control = 1 ;
5282: LD_ADDR_OWVAR 38
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// vc_chassis = 5 ;
5290: LD_ADDR_OWVAR 37
5294: PUSH
5295: LD_INT 5
5297: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5298: LD_ADDR_OWVAR 40
5302: PUSH
5303: LD_INT 5
5305: PUSH
5306: LD_INT 9
5308: PUSH
5309: LD_INT 7
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: PUSH
5317: LD_INT 1
5319: PPUSH
5320: LD_INT 3
5322: PPUSH
5323: CALL_OW 12
5327: ARRAY
5328: ST_TO_ADDR
// sewiVeh = CreateVehicle ;
5329: LD_ADDR_EXP 35
5333: PUSH
5334: CALL_OW 45
5338: ST_TO_ADDR
// PlaceUnitArea ( sewiVeh , KappaSpawn , false ) ;
5339: LD_EXP 35
5343: PPUSH
5344: LD_INT 14
5346: PPUSH
5347: LD_INT 0
5349: PPUSH
5350: CALL_OW 49
// Vsevolod = PrepareUnit ( Vsevolod , false ) ;
5354: LD_ADDR_EXP 34
5358: PUSH
5359: LD_STRING Vsevolod
5361: PPUSH
5362: LD_INT 0
5364: PPUSH
5365: CALL 6640 0 2
5369: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , sewiVeh ) ;
5370: LD_EXP 34
5374: PPUSH
5375: LD_EXP 35
5379: PPUSH
5380: CALL_OW 52
// for i := 1 to 5 do
5384: LD_ADDR_VAR 0 2
5388: PUSH
5389: DOUBLE
5390: LD_INT 1
5392: DEC
5393: ST_TO_ADDR
5394: LD_INT 5
5396: PUSH
5397: FOR_TO
5398: IFFALSE 5482
// begin vc_engine = 3 ;
5400: LD_ADDR_OWVAR 39
5404: PUSH
5405: LD_INT 3
5407: ST_TO_ADDR
// vc_control = 3 ;
5408: LD_ADDR_OWVAR 38
5412: PUSH
5413: LD_INT 3
5415: ST_TO_ADDR
// vc_chassis = 3 ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 3
5423: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5424: LD_ADDR_OWVAR 40
5428: PUSH
5429: LD_INT 5
5431: PUSH
5432: LD_INT 9
5434: PUSH
5435: LD_INT 7
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 1
5445: PPUSH
5446: LD_INT 3
5448: PPUSH
5449: CALL_OW 12
5453: ARRAY
5454: ST_TO_ADDR
// veh = CreateVehicle ;
5455: LD_ADDR_VAR 0 3
5459: PUSH
5460: CALL_OW 45
5464: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5465: LD_VAR 0 3
5469: PPUSH
5470: LD_INT 14
5472: PPUSH
5473: LD_INT 0
5475: PPUSH
5476: CALL_OW 49
// end ;
5480: GO 5397
5482: POP
5483: POP
// uc_nation = 3 ;
5484: LD_ADDR_OWVAR 21
5488: PUSH
5489: LD_INT 3
5491: ST_TO_ADDR
// for i := 1 to 7 do
5492: LD_ADDR_VAR 0 2
5496: PUSH
5497: DOUBLE
5498: LD_INT 1
5500: DEC
5501: ST_TO_ADDR
5502: LD_INT 7
5504: PUSH
5505: FOR_TO
5506: IFFALSE 5598
// begin vc_engine = 3 ;
5508: LD_ADDR_OWVAR 39
5512: PUSH
5513: LD_INT 3
5515: ST_TO_ADDR
// vc_control = 3 ;
5516: LD_ADDR_OWVAR 38
5520: PUSH
5521: LD_INT 3
5523: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
5524: LD_ADDR_OWVAR 37
5528: PUSH
5529: LD_INT 24
5531: ST_TO_ADDR
// vc_weapon = [ 44 , 47 , 45 , 46 , 49 ] [ Rand ( 1 , 4 ) ] ;
5532: LD_ADDR_OWVAR 40
5536: PUSH
5537: LD_INT 44
5539: PUSH
5540: LD_INT 47
5542: PUSH
5543: LD_INT 45
5545: PUSH
5546: LD_INT 46
5548: PUSH
5549: LD_INT 49
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: PUSH
5559: LD_INT 1
5561: PPUSH
5562: LD_INT 4
5564: PPUSH
5565: CALL_OW 12
5569: ARRAY
5570: ST_TO_ADDR
// veh = CreateVehicle ;
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: CALL_OW 45
5580: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5581: LD_VAR 0 3
5585: PPUSH
5586: LD_INT 14
5588: PPUSH
5589: LD_INT 0
5591: PPUSH
5592: CALL_OW 49
// end ;
5596: GO 5505
5598: POP
5599: POP
// repeat wait ( 0 0$1 ) ;
5600: LD_INT 35
5602: PPUSH
5603: CALL_OW 67
// vehList = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
5607: LD_ADDR_VAR 0 4
5611: PUSH
5612: LD_INT 22
5614: PUSH
5615: LD_INT 6
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: PUSH
5622: LD_INT 21
5624: PUSH
5625: LD_INT 2
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PUSH
5632: LD_INT 50
5634: PUSH
5635: EMPTY
5636: LIST
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: PPUSH
5643: CALL_OW 69
5647: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
5648: LD_EXP 1
5652: PPUSH
5653: CALL_OW 310
5657: NOT
5658: IFFALSE 5691
// ComAgressiveMove ( vehList , GetX ( JMM ) , GetY ( JMM ) ) else
5660: LD_VAR 0 4
5664: PPUSH
5665: LD_EXP 1
5669: PPUSH
5670: CALL_OW 250
5674: PPUSH
5675: LD_EXP 1
5679: PPUSH
5680: CALL_OW 251
5684: PPUSH
5685: CALL_OW 114
5689: GO 5730
// ComAgressiveMove ( vehList , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) ;
5691: LD_VAR 0 4
5695: PPUSH
5696: LD_EXP 1
5700: PPUSH
5701: CALL_OW 310
5705: PPUSH
5706: CALL_OW 250
5710: PPUSH
5711: LD_EXP 1
5715: PPUSH
5716: CALL_OW 310
5720: PPUSH
5721: CALL_OW 251
5725: PPUSH
5726: CALL_OW 114
// until vehList = 0 ;
5730: LD_VAR 0 4
5734: PUSH
5735: LD_INT 0
5737: EQUAL
5738: IFFALSE 5600
// end ;
5740: LD_VAR 0 1
5744: RET
// export function PreapreMehBehs ; var i , un ; begin
5745: LD_INT 0
5747: PPUSH
5748: PPUSH
5749: PPUSH
// uc_side = 6 ;
5750: LD_ADDR_OWVAR 20
5754: PUSH
5755: LD_INT 6
5757: ST_TO_ADDR
// uc_nation = 3 ;
5758: LD_ADDR_OWVAR 21
5762: PUSH
5763: LD_INT 3
5765: ST_TO_ADDR
// for i := 1 to 3 do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: DOUBLE
5772: LD_INT 1
5774: DEC
5775: ST_TO_ADDR
5776: LD_INT 3
5778: PUSH
5779: FOR_TO
5780: IFFALSE 5851
// begin hc_name =  ;
5782: LD_ADDR_OWVAR 26
5786: PUSH
5787: LD_STRING 
5789: ST_TO_ADDR
// hc_gallery =  ;
5790: LD_ADDR_OWVAR 33
5794: PUSH
5795: LD_STRING 
5797: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
5798: LD_INT 0
5800: PPUSH
5801: LD_INT 10
5803: PPUSH
5804: CALL_OW 383
// un = CreateHuman ;
5808: LD_ADDR_VAR 0 3
5812: PUSH
5813: CALL_OW 44
5817: ST_TO_ADDR
// ruBehMehs = ruBehMehs ^ un ;
5818: LD_ADDR_EXP 58
5822: PUSH
5823: LD_EXP 58
5827: PUSH
5828: LD_VAR 0 3
5832: ADD
5833: ST_TO_ADDR
// PlaceUnitArea ( un , RuMehBehSpawn , false ) ;
5834: LD_VAR 0 3
5838: PPUSH
5839: LD_INT 17
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: CALL_OW 49
// end ;
5849: GO 5779
5851: POP
5852: POP
// PlaceUnitArea ( Kovalyuk , RuMehBehSpawn , false ) ;
5853: LD_EXP 37
5857: PPUSH
5858: LD_INT 17
5860: PPUSH
5861: LD_INT 0
5863: PPUSH
5864: CALL_OW 49
// SetSide ( Kovalyuk , 6 ) ;
5868: LD_EXP 37
5872: PPUSH
5873: LD_INT 6
5875: PPUSH
5876: CALL_OW 235
// SetSide ( RuBehDep , 6 ) ;
5880: LD_INT 145
5882: PPUSH
5883: LD_INT 6
5885: PPUSH
5886: CALL_OW 235
// ComBuildBehemoth ( ruBehMehs [ 1 ] , b_behemoth , 193 , 118 , 0 ) ;
5890: LD_EXP 58
5894: PUSH
5895: LD_INT 1
5897: ARRAY
5898: PPUSH
5899: LD_INT 37
5901: PPUSH
5902: LD_INT 193
5904: PPUSH
5905: LD_INT 118
5907: PPUSH
5908: LD_INT 0
5910: PPUSH
5911: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 2 ] , b_behemoth , 204 , 119 , 0 ) ;
5915: LD_EXP 58
5919: PUSH
5920: LD_INT 2
5922: ARRAY
5923: PPUSH
5924: LD_INT 37
5926: PPUSH
5927: LD_INT 204
5929: PPUSH
5930: LD_INT 119
5932: PPUSH
5933: LD_INT 0
5935: PPUSH
5936: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 3 ] , b_behemoth , 195 , 126 , 0 ) ;
5940: LD_EXP 58
5944: PUSH
5945: LD_INT 3
5947: ARRAY
5948: PPUSH
5949: LD_INT 37
5951: PPUSH
5952: LD_INT 195
5954: PPUSH
5955: LD_INT 126
5957: PPUSH
5958: LD_INT 0
5960: PPUSH
5961: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 4 ] , b_behemoth , 207 , 126 , 0 ) ;
5965: LD_EXP 58
5969: PUSH
5970: LD_INT 4
5972: ARRAY
5973: PPUSH
5974: LD_INT 37
5976: PPUSH
5977: LD_INT 207
5979: PPUSH
5980: LD_INT 126
5982: PPUSH
5983: LD_INT 0
5985: PPUSH
5986: CALL_OW 170
// end ; end_of_file
5990: LD_VAR 0 1
5994: RET
// export function PrepareAlliance ; var i ; begin
5995: LD_INT 0
5997: PPUSH
5998: PPUSH
// uc_side = 7 ;
5999: LD_ADDR_OWVAR 20
6003: PUSH
6004: LD_INT 7
6006: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
6007: LD_ADDR_EXP 28
6011: PUSH
6012: LD_STRING Roth
6014: PPUSH
6015: LD_INT 0
6017: PPUSH
6018: CALL 6640 0 2
6022: ST_TO_ADDR
// PlaceUnitArea ( Roth , RothSpawn , false ) ;
6023: LD_EXP 28
6027: PPUSH
6028: LD_INT 31
6030: PPUSH
6031: LD_INT 0
6033: PPUSH
6034: CALL_OW 49
// ComTurnXY ( Roth , 248 , 187 ) ;
6038: LD_EXP 28
6042: PPUSH
6043: LD_INT 248
6045: PPUSH
6046: LD_INT 187
6048: PPUSH
6049: CALL_OW 118
// if TestCharacters ( 10c_Simms ) = true then
6053: LD_STRING 10c_Simms
6055: PPUSH
6056: CALL_OW 28
6060: PUSH
6061: LD_INT 1
6063: EQUAL
6064: IFFALSE 6114
// begin Simms = PrepareUnit ( 10c_Simms , true ) ;
6066: LD_ADDR_EXP 48
6070: PUSH
6071: LD_STRING 10c_Simms
6073: PPUSH
6074: LD_INT 1
6076: PPUSH
6077: CALL 6640 0 2
6081: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6082: LD_EXP 48
6086: PPUSH
6087: LD_INT 32
6089: PPUSH
6090: LD_INT 0
6092: PPUSH
6093: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6097: LD_EXP 48
6101: PPUSH
6102: LD_INT 248
6104: PPUSH
6105: LD_INT 187
6107: PPUSH
6108: CALL_OW 118
// end else
6112: GO 6188
// begin uc_nation = 1 ;
6114: LD_ADDR_OWVAR 21
6118: PUSH
6119: LD_INT 1
6121: ST_TO_ADDR
// hc_name =  ;
6122: LD_ADDR_OWVAR 26
6126: PUSH
6127: LD_STRING 
6129: ST_TO_ADDR
// hc_gallery =  ;
6130: LD_ADDR_OWVAR 33
6134: PUSH
6135: LD_STRING 
6137: ST_TO_ADDR
// PrepareScientist ( sex_female , 10 ) ;
6138: LD_INT 2
6140: PPUSH
6141: LD_INT 10
6143: PPUSH
6144: CALL_OW 384
// Simms = CreateHuman ;
6148: LD_ADDR_EXP 48
6152: PUSH
6153: CALL_OW 44
6157: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6158: LD_EXP 48
6162: PPUSH
6163: LD_INT 32
6165: PPUSH
6166: LD_INT 0
6168: PPUSH
6169: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6173: LD_EXP 48
6177: PPUSH
6178: LD_INT 248
6180: PPUSH
6181: LD_INT 187
6183: PPUSH
6184: CALL_OW 118
// end ; Scholtze = PrepareUnit ( Scholtze , false ) ;
6188: LD_ADDR_EXP 49
6192: PUSH
6193: LD_STRING Scholtze
6195: PPUSH
6196: LD_INT 0
6198: PPUSH
6199: CALL 6640 0 2
6203: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , false ) ;
6204: LD_ADDR_EXP 50
6208: PUSH
6209: LD_STRING Kirilenkova
6211: PPUSH
6212: LD_INT 0
6214: PPUSH
6215: CALL 6640 0 2
6219: ST_TO_ADDR
// Kapitsova = PrepareUnit ( Kapitsova , false ) ;
6220: LD_ADDR_EXP 51
6224: PUSH
6225: LD_STRING Kapitsova
6227: PPUSH
6228: LD_INT 0
6230: PPUSH
6231: CALL 6640 0 2
6235: ST_TO_ADDR
// Karamazov = PrepareUnit ( Karamazov , false ) ;
6236: LD_ADDR_EXP 52
6240: PUSH
6241: LD_STRING Karamazov
6243: PPUSH
6244: LD_INT 0
6246: PPUSH
6247: CALL 6640 0 2
6251: ST_TO_ADDR
// PlaceHumanInUnit ( Scholtze , AllLabR1 ) ;
6252: LD_EXP 49
6256: PPUSH
6257: LD_INT 39
6259: PPUSH
6260: CALL_OW 52
// PlaceHumanInUnit ( Kirilenkova , AllLabR2 ) ;
6264: LD_EXP 50
6268: PPUSH
6269: LD_INT 133
6271: PPUSH
6272: CALL_OW 52
// PlaceHumanInUnit ( Kapitsova , AllLabR2 ) ;
6276: LD_EXP 51
6280: PPUSH
6281: LD_INT 133
6283: PPUSH
6284: CALL_OW 52
// PlaceHumanInUnit ( Karamazov , AllDep ) ;
6288: LD_EXP 52
6292: PPUSH
6293: LD_INT 45
6295: PPUSH
6296: CALL_OW 52
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 2 ) ;
6300: LD_INT 7
6302: PPUSH
6303: LD_INT 1
6305: PPUSH
6306: LD_INT 45
6308: PPUSH
6309: LD_INT 10
6311: PPUSH
6312: LD_INT 2
6314: PPUSH
6315: LD_INT 2
6317: PPUSH
6318: CALL 7734 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
6322: LD_INT 7
6324: PPUSH
6325: LD_INT 3
6327: PPUSH
6328: LD_INT 45
6330: PPUSH
6331: LD_INT 10
6333: PPUSH
6334: LD_INT 2
6336: PPUSH
6337: LD_INT 2
6339: PPUSH
6340: CALL 7734 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
6344: LD_INT 7
6346: PPUSH
6347: LD_INT 1
6349: PPUSH
6350: LD_INT 194
6352: PPUSH
6353: LD_INT 10
6355: PPUSH
6356: LD_INT 5
6358: PPUSH
6359: LD_INT 4
6361: PPUSH
6362: CALL 7734 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
6366: LD_INT 7
6368: PPUSH
6369: LD_INT 3
6371: PPUSH
6372: LD_INT 194
6374: PPUSH
6375: LD_INT 10
6377: PPUSH
6378: LD_INT 8
6380: PPUSH
6381: LD_INT 6
6383: PPUSH
6384: CALL 7734 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
6388: LD_INT 7
6390: PPUSH
6391: LD_INT 1
6393: PPUSH
6394: LD_INT 156
6396: PPUSH
6397: LD_INT 10
6399: PPUSH
6400: LD_INT 3
6402: PPUSH
6403: LD_INT 6
6405: PPUSH
6406: CALL 7734 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
6410: LD_INT 7
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: LD_INT 162
6418: PPUSH
6419: LD_INT 10
6421: PPUSH
6422: LD_INT 3
6424: PPUSH
6425: LD_INT 6
6427: PPUSH
6428: CALL 7734 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 3 ) ;
6432: LD_INT 7
6434: PPUSH
6435: LD_INT 3
6437: PPUSH
6438: LD_INT 39
6440: PPUSH
6441: LD_INT 10
6443: PPUSH
6444: LD_INT 4
6446: PPUSH
6447: LD_INT 3
6449: PPUSH
6450: CALL 7734 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 2 ) ;
6454: LD_INT 7
6456: PPUSH
6457: LD_INT 3
6459: PPUSH
6460: LD_INT 133
6462: PPUSH
6463: LD_INT 10
6465: PPUSH
6466: LD_INT 4
6468: PPUSH
6469: LD_INT 2
6471: PPUSH
6472: CALL 7734 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
6476: LD_INT 7
6478: PPUSH
6479: LD_INT 1
6481: PPUSH
6482: LD_INT 46
6484: PPUSH
6485: LD_INT 10
6487: PPUSH
6488: LD_INT 4
6490: PPUSH
6491: LD_INT 2
6493: PPUSH
6494: CALL 7734 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
6498: LD_ADDR_VAR 0 2
6502: PUSH
6503: LD_INT 22
6505: PUSH
6506: LD_INT 7
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: PUSH
6513: LD_INT 21
6515: PUSH
6516: LD_INT 3
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PUSH
6523: LD_INT 30
6525: PUSH
6526: LD_INT 32
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: LD_INT 58
6535: PUSH
6536: EMPTY
6537: LIST
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: PPUSH
6545: CALL_OW 69
6549: PUSH
6550: FOR_IN
6551: IFFALSE 6598
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
6553: LD_INT 7
6555: PPUSH
6556: LD_INT 1
6558: PUSH
6559: LD_INT 3
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 1
6568: PPUSH
6569: LD_INT 2
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: PPUSH
6578: LD_VAR 0 2
6582: PPUSH
6583: LD_INT 10
6585: PPUSH
6586: LD_INT 1
6588: PPUSH
6589: LD_INT 1
6591: PPUSH
6592: CALL 7734 0 6
6596: GO 6550
6598: POP
6599: POP
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 3 ) ;
6600: LD_INT 7
6602: PPUSH
6603: LD_INT 1
6605: PPUSH
6606: LD_INT 226
6608: PPUSH
6609: LD_INT 10
6611: PPUSH
6612: LD_INT 3
6614: PPUSH
6615: LD_INT 3
6617: PPUSH
6618: CALL 7734 0 6
// allianceControler = UnitsInside ( AllControl ) ;
6622: LD_ADDR_EXP 63
6626: PUSH
6627: LD_INT 226
6629: PPUSH
6630: CALL_OW 313
6634: ST_TO_ADDR
// end ; end_of_file
6635: LD_VAR 0 1
6639: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6640: LD_INT 0
6642: PPUSH
6643: PPUSH
// if exist_mode then
6644: LD_VAR 0 2
6648: IFFALSE 6667
// unit := CreateCharacter ( ident ) else
6650: LD_ADDR_VAR 0 4
6654: PUSH
6655: LD_VAR 0 1
6659: PPUSH
6660: CALL_OW 34
6664: ST_TO_ADDR
6665: GO 6682
// unit := NewCharacter ( ident ) ;
6667: LD_ADDR_VAR 0 4
6671: PUSH
6672: LD_VAR 0 1
6676: PPUSH
6677: CALL_OW 25
6681: ST_TO_ADDR
// result := unit ;
6682: LD_ADDR_VAR 0 3
6686: PUSH
6687: LD_VAR 0 4
6691: ST_TO_ADDR
// end ;
6692: LD_VAR 0 3
6696: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
6697: LD_INT 0
6699: PPUSH
6700: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
6701: LD_STRING 13s_
6703: PUSH
6704: LD_VAR 0 1
6708: STR
6709: PPUSH
6710: CALL_OW 28
6714: PUSH
6715: LD_INT 1
6717: EQUAL
6718: IFFALSE 6739
// unit = CreateCharacter ( 13s_ & ident ) ;
6720: LD_ADDR_VAR 0 3
6724: PUSH
6725: LD_STRING 13s_
6727: PUSH
6728: LD_VAR 0 1
6732: STR
6733: PPUSH
6734: CALL_OW 34
6738: ST_TO_ADDR
// result := unit ;
6739: LD_ADDR_VAR 0 2
6743: PUSH
6744: LD_VAR 0 3
6748: ST_TO_ADDR
// end ;
6749: LD_VAR 0 2
6753: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
6754: LD_INT 0
6756: PPUSH
6757: PPUSH
// if TestCharacters ( 15_ & ident ) = true then
6758: LD_STRING 15_
6760: PUSH
6761: LD_VAR 0 1
6765: STR
6766: PPUSH
6767: CALL_OW 28
6771: PUSH
6772: LD_INT 1
6774: EQUAL
6775: IFFALSE 6812
// begin unit = CreateCharacter ( 15_ & ident ) ;
6777: LD_ADDR_VAR 0 3
6781: PUSH
6782: LD_STRING 15_
6784: PUSH
6785: LD_VAR 0 1
6789: STR
6790: PPUSH
6791: CALL_OW 34
6795: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ unit ;
6796: LD_ADDR_EXP 20
6800: PUSH
6801: LD_EXP 20
6805: PUSH
6806: LD_VAR 0 3
6810: ADD
6811: ST_TO_ADDR
// end ; result := unit ;
6812: LD_ADDR_VAR 0 2
6816: PUSH
6817: LD_VAR 0 3
6821: ST_TO_ADDR
// end ;
6822: LD_VAR 0 2
6826: RET
// export function TabLenght ( tab ) ; var i ; begin
6827: LD_INT 0
6829: PPUSH
6830: PPUSH
// for i = 1 to tab do
6831: LD_ADDR_VAR 0 3
6835: PUSH
6836: DOUBLE
6837: LD_INT 1
6839: DEC
6840: ST_TO_ADDR
6841: LD_VAR 0 1
6845: PUSH
6846: FOR_TO
6847: IFFALSE 6861
// result = i ;
6849: LD_ADDR_VAR 0 2
6853: PUSH
6854: LD_VAR 0 3
6858: ST_TO_ADDR
6859: GO 6846
6861: POP
6862: POP
// end ;
6863: LD_VAR 0 2
6867: RET
// export function Video ( mode ) ; begin
6868: LD_INT 0
6870: PPUSH
// ingame_video = mode ;
6871: LD_ADDR_OWVAR 52
6875: PUSH
6876: LD_VAR 0 1
6880: ST_TO_ADDR
// interface_hidden = mode ;
6881: LD_ADDR_OWVAR 54
6885: PUSH
6886: LD_VAR 0 1
6890: ST_TO_ADDR
// end ;
6891: LD_VAR 0 2
6895: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
6900: PPUSH
// characters := characters diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6901: LD_ADDR_VAR 0 1
6905: PUSH
6906: LD_VAR 0 1
6910: PUSH
6911: LD_EXP 1
6915: PUSH
6916: LD_EXP 3
6920: PUSH
6921: LD_EXP 21
6925: PUSH
6926: LD_EXP 22
6930: PUSH
6931: LD_EXP 23
6935: PUSH
6936: LD_EXP 4
6940: PUSH
6941: LD_EXP 5
6945: PUSH
6946: LD_EXP 6
6950: PUSH
6951: LD_EXP 7
6955: PUSH
6956: LD_EXP 8
6960: PUSH
6961: LD_EXP 9
6965: PUSH
6966: LD_EXP 10
6970: PUSH
6971: LD_EXP 11
6975: PUSH
6976: LD_EXP 12
6980: PUSH
6981: LD_EXP 13
6985: PUSH
6986: LD_EXP 14
6990: PUSH
6991: LD_EXP 15
6995: PUSH
6996: LD_EXP 17
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: DIFF
7021: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
7022: LD_ADDR_VAR 0 6
7026: PUSH
7027: LD_INT 1
7029: PPUSH
7030: LD_VAR 0 1
7034: PPUSH
7035: CALL_OW 12
7039: ST_TO_ADDR
// for i = 1 to characters do
7040: LD_ADDR_VAR 0 5
7044: PUSH
7045: DOUBLE
7046: LD_INT 1
7048: DEC
7049: ST_TO_ADDR
7050: LD_VAR 0 1
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7166
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7058: LD_VAR 0 5
7062: PUSH
7063: LD_VAR 0 6
7067: EQUAL
7068: PUSH
7069: LD_VAR 0 1
7073: PUSH
7074: LD_VAR 0 5
7078: ARRAY
7079: PPUSH
7080: CALL_OW 258
7084: PUSH
7085: LD_INT 1
7087: EQUAL
7088: AND
7089: IFFALSE 7111
// Say ( characters [ i ] , dialogMID ) ;
7091: LD_VAR 0 1
7095: PUSH
7096: LD_VAR 0 5
7100: ARRAY
7101: PPUSH
7102: LD_VAR 0 2
7106: PPUSH
7107: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7111: LD_VAR 0 5
7115: PUSH
7116: LD_VAR 0 6
7120: EQUAL
7121: PUSH
7122: LD_VAR 0 1
7126: PUSH
7127: LD_VAR 0 5
7131: ARRAY
7132: PPUSH
7133: CALL_OW 258
7137: PUSH
7138: LD_INT 2
7140: EQUAL
7141: AND
7142: IFFALSE 7164
// Say ( characters [ i ] , dialogFID ) ;
7144: LD_VAR 0 1
7148: PUSH
7149: LD_VAR 0 5
7153: ARRAY
7154: PPUSH
7155: LD_VAR 0 3
7159: PPUSH
7160: CALL_OW 88
// end ;
7164: GO 7055
7166: POP
7167: POP
// end ;
7168: LD_VAR 0 4
7172: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
7173: LD_INT 0
7175: PPUSH
7176: PPUSH
7177: PPUSH
7178: PPUSH
// if not list then
7179: LD_VAR 0 1
7183: NOT
7184: IFFALSE 7188
// exit ;
7186: GO 7535
// result := [ ] ;
7188: LD_ADDR_VAR 0 3
7192: PUSH
7193: EMPTY
7194: ST_TO_ADDR
// for i in list do
7195: LD_ADDR_VAR 0 4
7199: PUSH
7200: LD_VAR 0 1
7204: PUSH
7205: FOR_IN
7206: IFFALSE 7447
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
7208: LD_ADDR_VAR 0 6
7212: PUSH
7213: LD_VAR 0 4
7217: PPUSH
7218: LD_INT 1
7220: PPUSH
7221: CALL_OW 259
7225: PUSH
7226: LD_VAR 0 4
7230: PPUSH
7231: LD_INT 2
7233: PPUSH
7234: CALL_OW 259
7238: PLUS
7239: PUSH
7240: LD_VAR 0 4
7244: PPUSH
7245: LD_INT 3
7247: PPUSH
7248: CALL_OW 259
7252: PLUS
7253: PUSH
7254: LD_VAR 0 4
7258: PPUSH
7259: LD_INT 4
7261: PPUSH
7262: CALL_OW 259
7266: PLUS
7267: PUSH
7268: LD_INT 4
7270: DIV
7271: ST_TO_ADDR
// if not result then
7272: LD_VAR 0 3
7276: NOT
7277: IFFALSE 7303
// result := [ [ i , tmp ] ] else
7279: LD_ADDR_VAR 0 3
7283: PUSH
7284: LD_VAR 0 4
7288: PUSH
7289: LD_VAR 0 6
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: EMPTY
7299: LIST
7300: ST_TO_ADDR
7301: GO 7445
// begin if result [ result ] [ 2 ] <= tmp then
7303: LD_VAR 0 3
7307: PUSH
7308: LD_VAR 0 3
7312: ARRAY
7313: PUSH
7314: LD_INT 2
7316: ARRAY
7317: PUSH
7318: LD_VAR 0 6
7322: LESSEQUAL
7323: IFFALSE 7365
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7325: LD_ADDR_VAR 0 3
7329: PUSH
7330: LD_VAR 0 3
7334: PPUSH
7335: LD_VAR 0 3
7339: PUSH
7340: LD_INT 1
7342: PLUS
7343: PPUSH
7344: LD_VAR 0 4
7348: PUSH
7349: LD_VAR 0 6
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PPUSH
7358: CALL_OW 2
7362: ST_TO_ADDR
7363: GO 7445
// for j = 1 to result do
7365: LD_ADDR_VAR 0 5
7369: PUSH
7370: DOUBLE
7371: LD_INT 1
7373: DEC
7374: ST_TO_ADDR
7375: LD_VAR 0 3
7379: PUSH
7380: FOR_TO
7381: IFFALSE 7443
// begin if tmp < result [ j ] [ 2 ] then
7383: LD_VAR 0 6
7387: PUSH
7388: LD_VAR 0 3
7392: PUSH
7393: LD_VAR 0 5
7397: ARRAY
7398: PUSH
7399: LD_INT 2
7401: ARRAY
7402: LESS
7403: IFFALSE 7441
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7405: LD_ADDR_VAR 0 3
7409: PUSH
7410: LD_VAR 0 3
7414: PPUSH
7415: LD_VAR 0 5
7419: PPUSH
7420: LD_VAR 0 4
7424: PUSH
7425: LD_VAR 0 6
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PPUSH
7434: CALL_OW 2
7438: ST_TO_ADDR
// break ;
7439: GO 7443
// end ; end ;
7441: GO 7380
7443: POP
7444: POP
// end ; end ;
7445: GO 7205
7447: POP
7448: POP
// if result and not asc then
7449: LD_VAR 0 3
7453: PUSH
7454: LD_VAR 0 2
7458: NOT
7459: AND
7460: IFFALSE 7535
// begin tmp := result ;
7462: LD_ADDR_VAR 0 6
7466: PUSH
7467: LD_VAR 0 3
7471: ST_TO_ADDR
// for i = tmp downto 1 do
7472: LD_ADDR_VAR 0 4
7476: PUSH
7477: DOUBLE
7478: LD_VAR 0 6
7482: INC
7483: ST_TO_ADDR
7484: LD_INT 1
7486: PUSH
7487: FOR_DOWNTO
7488: IFFALSE 7533
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7490: LD_ADDR_VAR 0 3
7494: PUSH
7495: LD_VAR 0 3
7499: PPUSH
7500: LD_VAR 0 6
7504: PUSH
7505: LD_VAR 0 4
7509: MINUS
7510: PUSH
7511: LD_INT 1
7513: PLUS
7514: PPUSH
7515: LD_VAR 0 6
7519: PUSH
7520: LD_VAR 0 4
7524: ARRAY
7525: PPUSH
7526: CALL_OW 1
7530: ST_TO_ADDR
7531: GO 7487
7533: POP
7534: POP
// end ; end ;
7535: LD_VAR 0 3
7539: RET
// export function PrepareDifficulty ; begin
7540: LD_INT 0
7542: PPUSH
// if difficulty = 1 then
7543: LD_OWVAR 67
7547: PUSH
7548: LD_INT 1
7550: EQUAL
7551: IFFALSE 7579
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7553: LD_INT 51
7555: PPUSH
7556: LD_INT 6
7558: PPUSH
7559: LD_INT 2
7561: PPUSH
7562: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7566: LD_INT 57
7568: PPUSH
7569: LD_INT 6
7571: PPUSH
7572: LD_INT 2
7574: PPUSH
7575: CALL_OW 322
// end ; if difficulty = 2 then
7579: LD_OWVAR 67
7583: PUSH
7584: LD_INT 2
7586: EQUAL
7587: IFFALSE 7641
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7589: LD_INT 51
7591: PPUSH
7592: LD_INT 6
7594: PPUSH
7595: LD_INT 2
7597: PPUSH
7598: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7602: LD_INT 57
7604: PPUSH
7605: LD_INT 6
7607: PPUSH
7608: LD_INT 2
7610: PPUSH
7611: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7615: LD_INT 52
7617: PPUSH
7618: LD_INT 6
7620: PPUSH
7621: LD_INT 2
7623: PPUSH
7624: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7628: LD_INT 58
7630: PPUSH
7631: LD_INT 6
7633: PPUSH
7634: LD_INT 2
7636: PPUSH
7637: CALL_OW 322
// end ; if difficulty = 3 then
7641: LD_OWVAR 67
7645: PUSH
7646: LD_INT 3
7648: EQUAL
7649: IFFALSE 7729
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7651: LD_INT 51
7653: PPUSH
7654: LD_INT 6
7656: PPUSH
7657: LD_INT 2
7659: PPUSH
7660: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7664: LD_INT 57
7666: PPUSH
7667: LD_INT 6
7669: PPUSH
7670: LD_INT 2
7672: PPUSH
7673: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7677: LD_INT 52
7679: PPUSH
7680: LD_INT 6
7682: PPUSH
7683: LD_INT 2
7685: PPUSH
7686: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7690: LD_INT 58
7692: PPUSH
7693: LD_INT 6
7695: PPUSH
7696: LD_INT 2
7698: PPUSH
7699: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
7703: LD_INT 53
7705: PPUSH
7706: LD_INT 6
7708: PPUSH
7709: LD_INT 2
7711: PPUSH
7712: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
7716: LD_INT 59
7718: PPUSH
7719: LD_INT 6
7721: PPUSH
7722: LD_INT 2
7724: PPUSH
7725: CALL_OW 322
// end ; end ;
7729: LD_VAR 0 1
7733: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
7734: LD_INT 0
7736: PPUSH
7737: PPUSH
7738: PPUSH
7739: PPUSH
7740: PPUSH
// for i = 1 to count do
7741: LD_ADDR_VAR 0 8
7745: PUSH
7746: DOUBLE
7747: LD_INT 1
7749: DEC
7750: ST_TO_ADDR
7751: LD_VAR 0 6
7755: PUSH
7756: FOR_TO
7757: IFFALSE 7838
// begin uc_side = side ;
7759: LD_ADDR_OWVAR 20
7763: PUSH
7764: LD_VAR 0 1
7768: ST_TO_ADDR
// uc_nation = nation ;
7769: LD_ADDR_OWVAR 21
7773: PUSH
7774: LD_VAR 0 2
7778: ST_TO_ADDR
// hc_gallery =  ;
7779: LD_ADDR_OWVAR 33
7783: PUSH
7784: LD_STRING 
7786: ST_TO_ADDR
// hc_name =  ;
7787: LD_ADDR_OWVAR 26
7791: PUSH
7792: LD_STRING 
7794: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7795: LD_INT 0
7797: PPUSH
7798: LD_VAR 0 5
7802: PPUSH
7803: LD_VAR 0 4
7807: PPUSH
7808: CALL_OW 380
// un = CreateHuman ;
7812: LD_ADDR_VAR 0 10
7816: PUSH
7817: CALL_OW 44
7821: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7822: LD_VAR 0 10
7826: PPUSH
7827: LD_VAR 0 3
7831: PPUSH
7832: CALL_OW 52
// end ;
7836: GO 7756
7838: POP
7839: POP
// end ;
7840: LD_VAR 0 7
7844: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7845: LD_INT 0
7847: PPUSH
7848: PPUSH
7849: PPUSH
7850: PPUSH
7851: PPUSH
7852: PPUSH
7853: PPUSH
7854: PPUSH
7855: PPUSH
7856: PPUSH
7857: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7858: LD_INT 2100
7860: PUSH
7861: LD_INT 3150
7863: PUSH
7864: LD_INT 4200
7866: PUSH
7867: LD_INT 5250
7869: PUSH
7870: LD_INT 6300
7872: PUSH
7873: LD_INT 7350
7875: PUSH
7876: LD_INT 8400
7878: PUSH
7879: LD_INT 9450
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: PUSH
7892: LD_INT 1
7894: PPUSH
7895: LD_INT 8
7897: PPUSH
7898: CALL_OW 12
7902: ARRAY
7903: PPUSH
7904: CALL_OW 67
// amChassisTab = [ ] ;
7908: LD_ADDR_VAR 0 19
7912: PUSH
7913: EMPTY
7914: ST_TO_ADDR
// arChassisTab = [ ] ;
7915: LD_ADDR_VAR 0 18
7919: PUSH
7920: EMPTY
7921: ST_TO_ADDR
// ruChassisTab = [ ] ;
7922: LD_ADDR_VAR 0 17
7926: PUSH
7927: EMPTY
7928: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7929: LD_INT 35
7931: PPUSH
7932: CALL_OW 67
// if nation = 1 then
7936: LD_VAR 0 5
7940: PUSH
7941: LD_INT 1
7943: EQUAL
7944: IFFALSE 8435
// begin uc_side = side ;
7946: LD_ADDR_OWVAR 20
7950: PUSH
7951: LD_VAR 0 2
7955: ST_TO_ADDR
// uc_nation = nation ;
7956: LD_ADDR_OWVAR 21
7960: PUSH
7961: LD_VAR 0 5
7965: ST_TO_ADDR
// vc_engine = vehengine ;
7966: LD_ADDR_OWVAR 39
7970: PUSH
7971: LD_VAR 0 6
7975: ST_TO_ADDR
// vc_control = vehcontrol ;
7976: LD_ADDR_OWVAR 38
7980: PUSH
7981: LD_VAR 0 7
7985: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
7986: LD_ADDR_OWVAR 40
7990: PUSH
7991: LD_VAR 0 10
7995: PUSH
7996: LD_INT 1
7998: PPUSH
7999: LD_VAR 0 10
8003: PPUSH
8004: CALL_OW 12
8008: ARRAY
8009: ST_TO_ADDR
// for j = 1 to AMWeapon do
8010: LD_ADDR_VAR 0 14
8014: PUSH
8015: DOUBLE
8016: LD_INT 1
8018: DEC
8019: ST_TO_ADDR
8020: LD_VAR 0 10
8024: PUSH
8025: FOR_TO
8026: IFFALSE 8327
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8028: LD_VAR 0 10
8032: PUSH
8033: LD_VAR 0 14
8037: ARRAY
8038: PUSH
8039: LD_INT 2
8041: EQUAL
8042: PUSH
8043: LD_VAR 0 10
8047: PUSH
8048: LD_VAR 0 14
8052: ARRAY
8053: PUSH
8054: LD_INT 3
8056: EQUAL
8057: OR
8058: IFFALSE 8111
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8060: LD_ADDR_VAR 0 19
8064: PUSH
8065: LD_INT 1
8067: PUSH
8068: LD_INT 2
8070: PUSH
8071: LD_INT 3
8073: PUSH
8074: LD_INT 4
8076: PUSH
8077: LD_INT 5
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8087: LD_ADDR_OWVAR 37
8091: PUSH
8092: LD_VAR 0 19
8096: PUSH
8097: LD_INT 1
8099: PPUSH
8100: LD_VAR 0 19
8104: PPUSH
8105: CALL_OW 12
8109: ARRAY
8110: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8111: LD_VAR 0 10
8115: PUSH
8116: LD_VAR 0 14
8120: ARRAY
8121: PUSH
8122: LD_INT 4
8124: EQUAL
8125: PUSH
8126: LD_VAR 0 10
8130: PUSH
8131: LD_VAR 0 14
8135: ARRAY
8136: PUSH
8137: LD_INT 5
8139: EQUAL
8140: OR
8141: PUSH
8142: LD_VAR 0 10
8146: PUSH
8147: LD_VAR 0 14
8151: ARRAY
8152: PUSH
8153: LD_INT 9
8155: EQUAL
8156: OR
8157: PUSH
8158: LD_VAR 0 10
8162: PUSH
8163: LD_VAR 0 14
8167: ARRAY
8168: PUSH
8169: LD_INT 11
8171: EQUAL
8172: OR
8173: PUSH
8174: LD_VAR 0 10
8178: PUSH
8179: LD_VAR 0 14
8183: ARRAY
8184: PUSH
8185: LD_INT 7
8187: EQUAL
8188: OR
8189: IFFALSE 8238
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8191: LD_ADDR_VAR 0 19
8195: PUSH
8196: LD_INT 2
8198: PUSH
8199: LD_INT 3
8201: PUSH
8202: LD_INT 4
8204: PUSH
8205: LD_INT 5
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8214: LD_ADDR_OWVAR 37
8218: PUSH
8219: LD_VAR 0 19
8223: PUSH
8224: LD_INT 1
8226: PPUSH
8227: LD_VAR 0 19
8231: PPUSH
8232: CALL_OW 12
8236: ARRAY
8237: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8238: LD_VAR 0 10
8242: PUSH
8243: LD_VAR 0 14
8247: ARRAY
8248: PUSH
8249: LD_INT 8
8251: EQUAL
8252: PUSH
8253: LD_VAR 0 10
8257: PUSH
8258: LD_VAR 0 14
8262: ARRAY
8263: PUSH
8264: LD_INT 6
8266: EQUAL
8267: OR
8268: PUSH
8269: LD_VAR 0 10
8273: PUSH
8274: LD_VAR 0 14
8278: ARRAY
8279: PUSH
8280: LD_INT 10
8282: EQUAL
8283: OR
8284: IFFALSE 8325
// begin amChassisTab = [ 4 , 5 ] ;
8286: LD_ADDR_VAR 0 19
8290: PUSH
8291: LD_INT 4
8293: PUSH
8294: LD_INT 5
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8301: LD_ADDR_OWVAR 37
8305: PUSH
8306: LD_VAR 0 19
8310: PUSH
8311: LD_INT 1
8313: PPUSH
8314: LD_VAR 0 19
8318: PPUSH
8319: CALL_OW 12
8323: ARRAY
8324: ST_TO_ADDR
// end ; end ;
8325: GO 8025
8327: POP
8328: POP
// veh = CreateVehicle ;
8329: LD_ADDR_VAR 0 16
8333: PUSH
8334: CALL_OW 45
8338: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8339: LD_VAR 0 16
8343: PPUSH
8344: LD_VAR 0 1
8348: PPUSH
8349: LD_INT 0
8351: PPUSH
8352: CALL_OW 49
// if vc_control = 1 then
8356: LD_OWVAR 38
8360: PUSH
8361: LD_INT 1
8363: EQUAL
8364: IFFALSE 8421
// begin hc_gallery =  ;
8366: LD_ADDR_OWVAR 33
8370: PUSH
8371: LD_STRING 
8373: ST_TO_ADDR
// hc_name =  ;
8374: LD_ADDR_OWVAR 26
8378: PUSH
8379: LD_STRING 
8381: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8382: LD_INT 0
8384: PPUSH
8385: LD_INT 3
8387: PPUSH
8388: LD_VAR 0 4
8392: PPUSH
8393: CALL_OW 380
// un = CreateHuman ;
8397: LD_ADDR_VAR 0 15
8401: PUSH
8402: CALL_OW 44
8406: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8407: LD_VAR 0 15
8411: PPUSH
8412: LD_VAR 0 16
8416: PPUSH
8417: CALL_OW 52
// end ; i = i + 1 ;
8421: LD_ADDR_VAR 0 13
8425: PUSH
8426: LD_VAR 0 13
8430: PUSH
8431: LD_INT 1
8433: PLUS
8434: ST_TO_ADDR
// end ; if nation = 2 then
8435: LD_VAR 0 5
8439: PUSH
8440: LD_INT 2
8442: EQUAL
8443: IFFALSE 8867
// begin uc_side = side ;
8445: LD_ADDR_OWVAR 20
8449: PUSH
8450: LD_VAR 0 2
8454: ST_TO_ADDR
// uc_nation = nation ;
8455: LD_ADDR_OWVAR 21
8459: PUSH
8460: LD_VAR 0 5
8464: ST_TO_ADDR
// vc_engine = vehengine ;
8465: LD_ADDR_OWVAR 39
8469: PUSH
8470: LD_VAR 0 6
8474: ST_TO_ADDR
// vc_control = vehcontrol ;
8475: LD_ADDR_OWVAR 38
8479: PUSH
8480: LD_VAR 0 7
8484: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8485: LD_ADDR_OWVAR 40
8489: PUSH
8490: LD_VAR 0 9
8494: PUSH
8495: LD_INT 1
8497: PPUSH
8498: LD_VAR 0 9
8502: PPUSH
8503: CALL_OW 12
8507: ARRAY
8508: ST_TO_ADDR
// for j = 1 to ARWeapons do
8509: LD_ADDR_VAR 0 14
8513: PUSH
8514: DOUBLE
8515: LD_INT 1
8517: DEC
8518: ST_TO_ADDR
8519: LD_VAR 0 9
8523: PUSH
8524: FOR_TO
8525: IFFALSE 8759
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8527: LD_VAR 0 9
8531: PUSH
8532: LD_VAR 0 14
8536: ARRAY
8537: PUSH
8538: LD_INT 24
8540: EQUAL
8541: PUSH
8542: LD_VAR 0 9
8546: PUSH
8547: LD_VAR 0 14
8551: ARRAY
8552: PUSH
8553: LD_INT 22
8555: EQUAL
8556: OR
8557: PUSH
8558: LD_VAR 0 9
8562: PUSH
8563: LD_VAR 0 14
8567: ARRAY
8568: PUSH
8569: LD_INT 23
8571: EQUAL
8572: OR
8573: PUSH
8574: LD_VAR 0 9
8578: PUSH
8579: LD_VAR 0 14
8583: ARRAY
8584: PUSH
8585: LD_INT 30
8587: EQUAL
8588: OR
8589: IFFALSE 8638
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8591: LD_ADDR_VAR 0 18
8595: PUSH
8596: LD_INT 11
8598: PUSH
8599: LD_INT 12
8601: PUSH
8602: LD_INT 13
8604: PUSH
8605: LD_INT 14
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8614: LD_ADDR_OWVAR 37
8618: PUSH
8619: LD_VAR 0 18
8623: PUSH
8624: LD_INT 1
8626: PPUSH
8627: LD_VAR 0 18
8631: PPUSH
8632: CALL_OW 12
8636: ARRAY
8637: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8638: LD_VAR 0 9
8642: PUSH
8643: LD_VAR 0 14
8647: ARRAY
8648: PUSH
8649: LD_INT 29
8651: EQUAL
8652: PUSH
8653: LD_VAR 0 9
8657: PUSH
8658: LD_VAR 0 14
8662: ARRAY
8663: PUSH
8664: LD_INT 28
8666: EQUAL
8667: OR
8668: PUSH
8669: LD_VAR 0 9
8673: PUSH
8674: LD_VAR 0 14
8678: ARRAY
8679: PUSH
8680: LD_INT 27
8682: EQUAL
8683: OR
8684: PUSH
8685: LD_VAR 0 9
8689: PUSH
8690: LD_VAR 0 14
8694: ARRAY
8695: PUSH
8696: LD_INT 26
8698: EQUAL
8699: OR
8700: PUSH
8701: LD_VAR 0 9
8705: PUSH
8706: LD_VAR 0 14
8710: ARRAY
8711: PUSH
8712: LD_INT 25
8714: EQUAL
8715: OR
8716: IFFALSE 8757
// begin arChassisTab = [ 13 , 14 ] ;
8718: LD_ADDR_VAR 0 18
8722: PUSH
8723: LD_INT 13
8725: PUSH
8726: LD_INT 14
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8733: LD_ADDR_OWVAR 37
8737: PUSH
8738: LD_VAR 0 18
8742: PUSH
8743: LD_INT 1
8745: PPUSH
8746: LD_VAR 0 18
8750: PPUSH
8751: CALL_OW 12
8755: ARRAY
8756: ST_TO_ADDR
// end ; end ;
8757: GO 8524
8759: POP
8760: POP
// veh = CreateVehicle ;
8761: LD_ADDR_VAR 0 16
8765: PUSH
8766: CALL_OW 45
8770: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8771: LD_VAR 0 16
8775: PPUSH
8776: LD_VAR 0 1
8780: PPUSH
8781: LD_INT 0
8783: PPUSH
8784: CALL_OW 49
// if vc_control = 1 then
8788: LD_OWVAR 38
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8853
// begin hc_gallery =  ;
8798: LD_ADDR_OWVAR 33
8802: PUSH
8803: LD_STRING 
8805: ST_TO_ADDR
// hc_name =  ;
8806: LD_ADDR_OWVAR 26
8810: PUSH
8811: LD_STRING 
8813: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8814: LD_INT 0
8816: PPUSH
8817: LD_INT 3
8819: PPUSH
8820: LD_VAR 0 4
8824: PPUSH
8825: CALL_OW 380
// un = CreateHuman ;
8829: LD_ADDR_VAR 0 15
8833: PUSH
8834: CALL_OW 44
8838: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8839: LD_VAR 0 15
8843: PPUSH
8844: LD_VAR 0 16
8848: PPUSH
8849: CALL_OW 52
// end ; i = i + 1 ;
8853: LD_ADDR_VAR 0 13
8857: PUSH
8858: LD_VAR 0 13
8862: PUSH
8863: LD_INT 1
8865: PLUS
8866: ST_TO_ADDR
// end ; if nation = 3 then
8867: LD_VAR 0 5
8871: PUSH
8872: LD_INT 3
8874: EQUAL
8875: IFFALSE 9251
// begin uc_side = side ;
8877: LD_ADDR_OWVAR 20
8881: PUSH
8882: LD_VAR 0 2
8886: ST_TO_ADDR
// uc_nation = nation ;
8887: LD_ADDR_OWVAR 21
8891: PUSH
8892: LD_VAR 0 5
8896: ST_TO_ADDR
// vc_engine = vehengine ;
8897: LD_ADDR_OWVAR 39
8901: PUSH
8902: LD_VAR 0 6
8906: ST_TO_ADDR
// vc_control = vehcontrol ;
8907: LD_ADDR_OWVAR 38
8911: PUSH
8912: LD_VAR 0 7
8916: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8917: LD_ADDR_OWVAR 40
8921: PUSH
8922: LD_VAR 0 8
8926: PUSH
8927: LD_INT 1
8929: PPUSH
8930: LD_VAR 0 8
8934: PPUSH
8935: CALL_OW 12
8939: ARRAY
8940: ST_TO_ADDR
// for j = 1 to RuWeapons do
8941: LD_ADDR_VAR 0 14
8945: PUSH
8946: DOUBLE
8947: LD_INT 1
8949: DEC
8950: ST_TO_ADDR
8951: LD_VAR 0 8
8955: PUSH
8956: FOR_TO
8957: IFFALSE 9143
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8959: LD_VAR 0 8
8963: PUSH
8964: LD_VAR 0 14
8968: ARRAY
8969: PUSH
8970: LD_INT 42
8972: EQUAL
8973: PUSH
8974: LD_VAR 0 8
8978: PUSH
8979: LD_VAR 0 14
8983: ARRAY
8984: PUSH
8985: LD_INT 43
8987: EQUAL
8988: OR
8989: PUSH
8990: LD_VAR 0 8
8994: PUSH
8995: LD_VAR 0 14
8999: ARRAY
9000: PUSH
9001: LD_INT 44
9003: EQUAL
9004: OR
9005: PUSH
9006: LD_VAR 0 8
9010: PUSH
9011: LD_VAR 0 14
9015: ARRAY
9016: PUSH
9017: LD_INT 45
9019: EQUAL
9020: OR
9021: PUSH
9022: LD_VAR 0 8
9026: PUSH
9027: LD_VAR 0 14
9031: ARRAY
9032: PUSH
9033: LD_INT 49
9035: EQUAL
9036: OR
9037: IFFALSE 9074
// begin ruChassisTab = [ 24 ] ;
9039: LD_ADDR_VAR 0 17
9043: PUSH
9044: LD_INT 24
9046: PUSH
9047: EMPTY
9048: LIST
9049: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9050: LD_ADDR_OWVAR 37
9054: PUSH
9055: LD_VAR 0 17
9059: PUSH
9060: LD_INT 1
9062: PPUSH
9063: LD_VAR 0 17
9067: PPUSH
9068: CALL_OW 12
9072: ARRAY
9073: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9074: LD_VAR 0 8
9078: PUSH
9079: LD_VAR 0 14
9083: ARRAY
9084: PUSH
9085: LD_INT 46
9087: EQUAL
9088: PUSH
9089: LD_VAR 0 8
9093: PUSH
9094: LD_VAR 0 14
9098: ARRAY
9099: PUSH
9100: LD_INT 47
9102: EQUAL
9103: OR
9104: IFFALSE 9141
// begin ruChassisTab = [ 24 ] ;
9106: LD_ADDR_VAR 0 17
9110: PUSH
9111: LD_INT 24
9113: PUSH
9114: EMPTY
9115: LIST
9116: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9117: LD_ADDR_OWVAR 37
9121: PUSH
9122: LD_VAR 0 17
9126: PUSH
9127: LD_INT 1
9129: PPUSH
9130: LD_VAR 0 17
9134: PPUSH
9135: CALL_OW 12
9139: ARRAY
9140: ST_TO_ADDR
// end ; end ;
9141: GO 8956
9143: POP
9144: POP
// veh = CreateVehicle ;
9145: LD_ADDR_VAR 0 16
9149: PUSH
9150: CALL_OW 45
9154: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9155: LD_VAR 0 16
9159: PPUSH
9160: LD_VAR 0 1
9164: PPUSH
9165: LD_INT 0
9167: PPUSH
9168: CALL_OW 49
// if vc_control = 1 then
9172: LD_OWVAR 38
9176: PUSH
9177: LD_INT 1
9179: EQUAL
9180: IFFALSE 9237
// begin hc_gallery =  ;
9182: LD_ADDR_OWVAR 33
9186: PUSH
9187: LD_STRING 
9189: ST_TO_ADDR
// hc_name =  ;
9190: LD_ADDR_OWVAR 26
9194: PUSH
9195: LD_STRING 
9197: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9198: LD_INT 0
9200: PPUSH
9201: LD_INT 3
9203: PPUSH
9204: LD_VAR 0 4
9208: PPUSH
9209: CALL_OW 380
// un = CreateHuman ;
9213: LD_ADDR_VAR 0 15
9217: PUSH
9218: CALL_OW 44
9222: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9223: LD_VAR 0 15
9227: PPUSH
9228: LD_VAR 0 16
9232: PPUSH
9233: CALL_OW 52
// end ; i = i + 1 ;
9237: LD_ADDR_VAR 0 13
9241: PUSH
9242: LD_VAR 0 13
9246: PUSH
9247: LD_INT 1
9249: PLUS
9250: ST_TO_ADDR
// end ; until i = vehCount ;
9251: LD_VAR 0 13
9255: PUSH
9256: LD_VAR 0 3
9260: EQUAL
9261: IFFALSE 7929
// repeat wait ( 0 0$1 ) ;
9263: LD_INT 35
9265: PPUSH
9266: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
9270: LD_ADDR_VAR 0 20
9274: PUSH
9275: LD_INT 22
9277: PUSH
9278: LD_VAR 0 2
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 21
9289: PUSH
9290: LD_INT 2
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 250
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 69
9316: ST_TO_ADDR
// if vehicleOK_list > 0 then
9317: LD_VAR 0 20
9321: PUSH
9322: LD_INT 0
9324: GREATER
9325: IFFALSE 9516
// begin for i in vehicleOK_list do
9327: LD_ADDR_VAR 0 13
9331: PUSH
9332: LD_VAR 0 20
9336: PUSH
9337: FOR_IN
9338: IFFALSE 9514
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9340: LD_ADDR_VAR 0 21
9344: PUSH
9345: LD_INT 22
9347: PUSH
9348: LD_VAR 0 11
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PPUSH
9357: CALL_OW 69
9361: PPUSH
9362: LD_VAR 0 13
9366: PPUSH
9367: CALL_OW 74
9371: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9372: LD_ADDR_VAR 0 22
9376: PUSH
9377: LD_INT 22
9379: PUSH
9380: LD_VAR 0 11
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 2
9391: PUSH
9392: LD_INT 59
9394: PUSH
9395: EMPTY
9396: LIST
9397: PUSH
9398: LD_INT 21
9400: PUSH
9401: LD_INT 1
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: LD_INT 21
9410: PUSH
9411: LD_INT 2
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: EMPTY
9429: LIST
9430: PPUSH
9431: CALL_OW 69
9435: PPUSH
9436: LD_VAR 0 13
9440: PPUSH
9441: CALL_OW 74
9445: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9446: LD_VAR 0 13
9450: PPUSH
9451: LD_VAR 0 21
9455: PPUSH
9456: CALL_OW 296
9460: PUSH
9461: LD_INT 8
9463: PLUS
9464: PUSH
9465: LD_VAR 0 13
9469: PPUSH
9470: LD_VAR 0 22
9474: PPUSH
9475: CALL_OW 296
9479: LESS
9480: IFFALSE 9498
// begin ComAttackUnit ( i , target1 ) ;
9482: LD_VAR 0 13
9486: PPUSH
9487: LD_VAR 0 21
9491: PPUSH
9492: CALL_OW 115
// end else
9496: GO 9512
// begin ComAttackUnit ( i , target2 ) ;
9498: LD_VAR 0 13
9502: PPUSH
9503: LD_VAR 0 22
9507: PPUSH
9508: CALL_OW 115
// end ; end ;
9512: GO 9337
9514: POP
9515: POP
// end ; until vehicleOK_list = [ ] ;
9516: LD_VAR 0 20
9520: PUSH
9521: EMPTY
9522: EQUAL
9523: IFFALSE 9263
// end ;
9525: LD_VAR 0 12
9529: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
9530: LD_INT 0
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
// for i = 1 to 72 do
9536: LD_ADDR_VAR 0 5
9540: PUSH
9541: DOUBLE
9542: LD_INT 1
9544: DEC
9545: ST_TO_ADDR
9546: LD_INT 72
9548: PUSH
9549: FOR_TO
9550: IFFALSE 9608
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
9552: LD_VAR 0 5
9556: PPUSH
9557: LD_VAR 0 1
9561: PPUSH
9562: CALL_OW 321
9566: PUSH
9567: LD_INT 1
9569: EQUAL
9570: PUSH
9571: LD_VAR 0 5
9575: PPUSH
9576: LD_VAR 0 3
9580: PPUSH
9581: CALL_OW 482
9585: PUSH
9586: LD_INT 1
9588: EQUAL
9589: AND
9590: IFFALSE 9606
// AddComResearch ( lab , i ) ;
9592: LD_VAR 0 2
9596: PPUSH
9597: LD_VAR 0 5
9601: PPUSH
9602: CALL_OW 184
9606: GO 9549
9608: POP
9609: POP
// end ;
9610: LD_VAR 0 4
9614: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9615: LD_INT 0
9617: PPUSH
9618: PPUSH
9619: PPUSH
9620: PPUSH
9621: PPUSH
9622: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Kozlov ] ;
9623: LD_ADDR_VAR 0 8
9627: PUSH
9628: LD_VAR 0 2
9632: PPUSH
9633: CALL_OW 313
9637: PUSH
9638: LD_EXP 36
9642: PUSH
9643: EMPTY
9644: LIST
9645: DIFF
9646: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) diff [ Kozlov ] ;
9647: LD_ADDR_VAR 0 9
9651: PUSH
9652: LD_VAR 0 3
9656: PPUSH
9657: LD_INT 22
9659: PUSH
9660: LD_VAR 0 1
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: PUSH
9669: LD_INT 25
9671: PUSH
9672: LD_INT 2
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: PUSH
9679: LD_INT 24
9681: PUSH
9682: LD_INT 750
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PUSH
9689: LD_INT 3
9691: PUSH
9692: LD_INT 54
9694: PUSH
9695: EMPTY
9696: LIST
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: PPUSH
9708: CALL_OW 70
9712: PUSH
9713: LD_EXP 36
9717: PUSH
9718: EMPTY
9719: LIST
9720: DIFF
9721: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9722: LD_ADDR_VAR 0 6
9726: PUSH
9727: LD_VAR 0 3
9731: PPUSH
9732: LD_INT 22
9734: PUSH
9735: LD_VAR 0 1
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 21
9746: PUSH
9747: LD_INT 3
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: LD_INT 3
9756: PUSH
9757: LD_INT 24
9759: PUSH
9760: LD_INT 1000
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: PUSH
9776: EMPTY
9777: LIST
9778: PPUSH
9779: CALL_OW 70
9783: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
9784: LD_VAR 0 6
9788: NOT
9789: PUSH
9790: LD_INT 22
9792: PUSH
9793: LD_VAR 0 1
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: PUSH
9802: LD_INT 25
9804: PUSH
9805: LD_INT 2
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 24
9814: PUSH
9815: LD_INT 250
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: LIST
9826: PPUSH
9827: CALL_OW 69
9831: NOT
9832: AND
9833: IFFALSE 9837
// exit ;
9835: GO 10019
// if buildings_list > 0 and engineerOkInside then
9837: LD_VAR 0 6
9841: PUSH
9842: LD_INT 0
9844: GREATER
9845: PUSH
9846: LD_VAR 0 8
9850: AND
9851: IFFALSE 9862
// ComExitBuilding ( engineerOkInside ) ;
9853: LD_VAR 0 8
9857: PPUSH
9858: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
9862: LD_VAR 0 6
9866: PUSH
9867: LD_INT 0
9869: GREATER
9870: PUSH
9871: LD_VAR 0 9
9875: PUSH
9876: LD_INT 0
9878: GREATER
9879: AND
9880: IFFALSE 9900
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
9882: LD_VAR 0 9
9886: PPUSH
9887: LD_VAR 0 6
9891: PUSH
9892: LD_INT 1
9894: ARRAY
9895: PPUSH
9896: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
9900: LD_VAR 0 6
9904: PUSH
9905: LD_INT 0
9907: EQUAL
9908: PUSH
9909: LD_VAR 0 4
9913: PUSH
9914: LD_INT 0
9916: EQUAL
9917: AND
9918: PUSH
9919: LD_VAR 0 9
9923: PUSH
9924: LD_INT 0
9926: GREATER
9927: AND
9928: IFFALSE 9944
// ComEnterUnit ( engineerOkOutside , building ) ;
9930: LD_VAR 0 9
9934: PPUSH
9935: LD_VAR 0 2
9939: PPUSH
9940: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9944: LD_VAR 0 9
9948: PUSH
9949: LD_INT 0
9951: GREATER
9952: PUSH
9953: LD_VAR 0 6
9957: PUSH
9958: LD_INT 0
9960: EQUAL
9961: AND
9962: PUSH
9963: LD_VAR 0 4
9967: PUSH
9968: LD_INT 0
9970: GREATER
9971: AND
9972: IFFALSE 10019
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9974: LD_VAR 0 9
9978: PPUSH
9979: LD_VAR 0 4
9983: PUSH
9984: LD_INT 1
9986: ARRAY
9987: PPUSH
9988: LD_VAR 0 4
9992: PUSH
9993: LD_INT 2
9995: ARRAY
9996: PPUSH
9997: LD_VAR 0 4
10001: PUSH
10002: LD_INT 3
10004: ARRAY
10005: PPUSH
10006: LD_VAR 0 4
10010: PUSH
10011: LD_INT 4
10013: ARRAY
10014: PPUSH
10015: CALL_OW 145
// end ;
10019: LD_VAR 0 5
10023: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10024: LD_INT 0
10026: PPUSH
10027: PPUSH
10028: PPUSH
10029: PPUSH
10030: PPUSH
10031: PPUSH
10032: PPUSH
10033: PPUSH
10034: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) diff [ Kozlov ] ;
10035: LD_ADDR_VAR 0 6
10039: PUSH
10040: LD_INT 22
10042: PUSH
10043: LD_VAR 0 1
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: LD_INT 25
10054: PUSH
10055: LD_INT 4
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PUSH
10062: LD_INT 23
10064: PUSH
10065: LD_INT 2
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: PUSH
10072: LD_INT 24
10074: PUSH
10075: LD_INT 251
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: PPUSH
10088: CALL_OW 69
10092: PUSH
10093: LD_EXP 36
10097: PUSH
10098: EMPTY
10099: LIST
10100: DIFF
10101: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ Kozlov ] ;
10102: LD_ADDR_VAR 0 7
10106: PUSH
10107: LD_VAR 0 3
10111: PPUSH
10112: LD_INT 22
10114: PUSH
10115: LD_VAR 0 1
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 23
10126: PUSH
10127: LD_INT 2
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: LD_INT 25
10136: PUSH
10137: LD_INT 4
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: LD_INT 50
10146: PUSH
10147: EMPTY
10148: LIST
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: PPUSH
10156: CALL_OW 70
10160: PUSH
10161: LD_EXP 36
10165: PUSH
10166: EMPTY
10167: LIST
10168: DIFF
10169: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10170: LD_ADDR_VAR 0 10
10174: PUSH
10175: LD_VAR 0 3
10179: PPUSH
10180: LD_INT 22
10182: PUSH
10183: LD_VAR 0 1
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: LD_INT 21
10194: PUSH
10195: LD_INT 1
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 3
10204: PUSH
10205: LD_INT 25
10207: PUSH
10208: LD_INT 3
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 3
10221: PUSH
10222: LD_INT 24
10224: PUSH
10225: LD_INT 750
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: PPUSH
10242: CALL_OW 70
10246: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10247: LD_ADDR_VAR 0 11
10251: PUSH
10252: LD_VAR 0 2
10256: PPUSH
10257: LD_INT 22
10259: PUSH
10260: LD_VAR 0 1
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: LD_INT 21
10271: PUSH
10272: LD_INT 1
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: LD_INT 3
10281: PUSH
10282: LD_INT 25
10284: PUSH
10285: LD_INT 3
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PUSH
10296: LD_INT 3
10298: PUSH
10299: LD_INT 24
10301: PUSH
10302: LD_INT 1000
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: PPUSH
10319: CALL_OW 70
10323: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10324: LD_VAR 0 10
10328: NOT
10329: PUSH
10330: LD_VAR 0 11
10334: NOT
10335: AND
10336: PUSH
10337: LD_VAR 0 6
10341: NOT
10342: AND
10343: IFFALSE 10347
// exit ;
10345: GO 10581
// if damageUnits > 0 and sci_list > 0 then
10347: LD_VAR 0 10
10351: PUSH
10352: LD_INT 0
10354: GREATER
10355: PUSH
10356: LD_VAR 0 6
10360: PUSH
10361: LD_INT 0
10363: GREATER
10364: AND
10365: IFFALSE 10381
// ComMoveToArea ( damageUnits , healArea ) ;
10367: LD_VAR 0 10
10371: PPUSH
10372: LD_VAR 0 2
10376: PPUSH
10377: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
10381: LD_VAR 0 11
10385: PUSH
10386: LD_INT 0
10388: GREATER
10389: PUSH
10390: LD_VAR 0 6
10394: PUSH
10395: LD_INT 0
10397: GREATER
10398: AND
10399: IFFALSE 10410
// ComExitBuilding ( sci_list ) ;
10401: LD_VAR 0 6
10405: PPUSH
10406: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
10410: LD_VAR 0 11
10414: PUSH
10415: LD_INT 0
10417: GREATER
10418: PUSH
10419: LD_VAR 0 7
10423: PUSH
10424: LD_INT 0
10426: GREATER
10427: AND
10428: IFFALSE 10448
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10430: LD_VAR 0 7
10434: PPUSH
10435: LD_VAR 0 11
10439: PUSH
10440: LD_INT 1
10442: ARRAY
10443: PPUSH
10444: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10448: LD_VAR 0 10
10452: PUSH
10453: LD_INT 0
10455: EQUAL
10456: PUSH
10457: LD_VAR 0 11
10461: PUSH
10462: LD_INT 0
10464: EQUAL
10465: AND
10466: PUSH
10467: LD_VAR 0 7
10471: PUSH
10472: LD_INT 0
10474: GREATER
10475: AND
10476: IFFALSE 10581
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10478: LD_ADDR_VAR 0 12
10482: PUSH
10483: LD_INT 22
10485: PUSH
10486: LD_VAR 0 1
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: LD_INT 21
10497: PUSH
10498: LD_INT 3
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 30
10507: PUSH
10508: LD_INT 8
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: PPUSH
10520: CALL_OW 69
10524: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10525: LD_ADDR_VAR 0 13
10529: PUSH
10530: LD_INT 1
10532: PPUSH
10533: LD_VAR 0 12
10537: PPUSH
10538: CALL_OW 12
10542: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10543: LD_VAR 0 7
10547: PPUSH
10548: LD_INT 3
10550: PUSH
10551: LD_INT 60
10553: PUSH
10554: EMPTY
10555: LIST
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PPUSH
10561: CALL_OW 72
10565: PPUSH
10566: LD_VAR 0 12
10570: PUSH
10571: LD_VAR 0 13
10575: ARRAY
10576: PPUSH
10577: CALL_OW 120
// end ; end ;
10581: LD_VAR 0 5
10585: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
10586: LD_INT 0
10588: PPUSH
10589: PPUSH
10590: PPUSH
10591: PPUSH
// tmpTab = [ ] ;
10592: LD_ADDR_VAR 0 6
10596: PUSH
10597: EMPTY
10598: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
10599: LD_INT 22
10601: PUSH
10602: LD_VAR 0 1
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 30
10613: PUSH
10614: LD_INT 32
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PPUSH
10625: CALL_OW 69
10629: PUSH
10630: LD_INT 0
10632: GREATER
10633: IFFALSE 10716
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10635: LD_ADDR_VAR 0 4
10639: PUSH
10640: LD_INT 22
10642: PUSH
10643: LD_VAR 0 1
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 30
10654: PUSH
10655: LD_INT 32
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PPUSH
10666: CALL_OW 69
10670: PUSH
10671: FOR_IN
10672: IFFALSE 10714
// begin for j in UnitsInside ( i ) do
10674: LD_ADDR_VAR 0 5
10678: PUSH
10679: LD_VAR 0 4
10683: PPUSH
10684: CALL_OW 313
10688: PUSH
10689: FOR_IN
10690: IFFALSE 10710
// tmpTab = tmpTab ^ j ;
10692: LD_ADDR_VAR 0 6
10696: PUSH
10697: LD_VAR 0 6
10701: PUSH
10702: LD_VAR 0 5
10706: ADD
10707: ST_TO_ADDR
10708: GO 10689
10710: POP
10711: POP
// end ;
10712: GO 10671
10714: POP
10715: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
10716: LD_VAR 0 6
10720: PPUSH
10721: LD_VAR 0 2
10725: PPUSH
10726: CALL_OW 250
10730: PPUSH
10731: LD_VAR 0 2
10735: PPUSH
10736: CALL_OW 251
10740: PPUSH
10741: CALL_OW 114
// end ;
10745: LD_VAR 0 3
10749: RET
// export function CraneRepairBuild ( side , baseArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10750: LD_INT 0
10752: PPUSH
10753: PPUSH
10754: PPUSH
10755: PPUSH
10756: PPUSH
10757: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10758: LD_ADDR_VAR 0 8
10762: PUSH
10763: LD_VAR 0 2
10767: PPUSH
10768: LD_INT 22
10770: PUSH
10771: LD_VAR 0 1
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PUSH
10780: LD_INT 21
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: PUSH
10790: LD_INT 34
10792: PUSH
10793: LD_INT 52
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: PPUSH
10805: CALL_OW 70
10809: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10810: LD_ADDR_VAR 0 9
10814: PUSH
10815: LD_VAR 0 2
10819: PPUSH
10820: LD_INT 22
10822: PUSH
10823: LD_VAR 0 1
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 21
10834: PUSH
10835: LD_INT 3
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 3
10844: PUSH
10845: LD_INT 24
10847: PUSH
10848: LD_INT 1000
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: PUSH
10864: EMPTY
10865: LIST
10866: PPUSH
10867: CALL_OW 70
10871: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10872: LD_VAR 0 9
10876: PUSH
10877: LD_INT 0
10879: GREATER
10880: PUSH
10881: LD_VAR 0 8
10885: PPUSH
10886: LD_INT 24
10888: PUSH
10889: LD_INT 750
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PPUSH
10896: CALL_OW 72
10900: PUSH
10901: LD_INT 0
10903: GREATER
10904: AND
10905: IFFALSE 10925
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
10907: LD_VAR 0 8
10911: PPUSH
10912: LD_VAR 0 9
10916: PUSH
10917: LD_INT 1
10919: ARRAY
10920: PPUSH
10921: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10925: LD_VAR 0 8
10929: PUSH
10930: LD_INT 0
10932: GREATER
10933: PUSH
10934: LD_VAR 0 9
10938: PUSH
10939: LD_INT 0
10941: EQUAL
10942: AND
10943: PUSH
10944: LD_VAR 0 3
10948: PUSH
10949: LD_INT 0
10951: GREATER
10952: AND
10953: IFFALSE 11000
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10955: LD_VAR 0 8
10959: PPUSH
10960: LD_VAR 0 3
10964: PUSH
10965: LD_INT 1
10967: ARRAY
10968: PPUSH
10969: LD_VAR 0 3
10973: PUSH
10974: LD_INT 2
10976: ARRAY
10977: PPUSH
10978: LD_VAR 0 3
10982: PUSH
10983: LD_INT 3
10985: ARRAY
10986: PPUSH
10987: LD_VAR 0 3
10991: PUSH
10992: LD_INT 4
10994: ARRAY
10995: PPUSH
10996: CALL_OW 567
// end ;
11000: LD_VAR 0 4
11004: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
11005: LD_INT 0
11007: PPUSH
11008: PPUSH
11009: PPUSH
11010: PPUSH
11011: PPUSH
11012: PPUSH
11013: PPUSH
11014: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Platonov , Yakotich ] ;
11015: LD_ADDR_VAR 0 6
11019: PUSH
11020: LD_VAR 0 2
11024: PPUSH
11025: LD_INT 22
11027: PUSH
11028: LD_VAR 0 1
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 56
11039: PUSH
11040: EMPTY
11041: LIST
11042: PUSH
11043: LD_INT 24
11045: PUSH
11046: LD_INT 700
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 3
11055: PUSH
11056: LD_INT 60
11058: PUSH
11059: EMPTY
11060: LIST
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: LD_INT 2
11068: PUSH
11069: LD_INT 25
11071: PUSH
11072: LD_INT 1
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 25
11081: PUSH
11082: LD_INT 5
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PUSH
11089: LD_INT 25
11091: PUSH
11092: LD_INT 8
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: LD_INT 25
11101: PUSH
11102: LD_INT 9
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: PPUSH
11123: CALL_OW 70
11127: PUSH
11128: LD_EXP 26
11132: PUSH
11133: LD_EXP 27
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: DIFF
11142: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
11143: LD_ADDR_VAR 0 7
11147: PUSH
11148: LD_VAR 0 2
11152: PPUSH
11153: LD_INT 22
11155: PUSH
11156: LD_VAR 0 1
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: LD_INT 30
11167: PUSH
11168: LD_INT 32
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: LD_INT 58
11177: PUSH
11178: EMPTY
11179: LIST
11180: PUSH
11181: LD_INT 24
11183: PUSH
11184: LD_INT 251
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: PPUSH
11197: CALL_OW 70
11201: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
11202: LD_ADDR_VAR 0 9
11206: PUSH
11207: LD_VAR 0 2
11211: PPUSH
11212: LD_INT 22
11214: PUSH
11215: LD_VAR 0 1
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 2
11226: PUSH
11227: LD_INT 30
11229: PUSH
11230: LD_INT 4
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 30
11239: PUSH
11240: LD_INT 5
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: LIST
11251: PUSH
11252: LD_INT 24
11254: PUSH
11255: LD_INT 251
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: LIST
11266: PPUSH
11267: CALL_OW 70
11271: ST_TO_ADDR
// if barrackList > 0 then
11272: LD_VAR 0 9
11276: PUSH
11277: LD_INT 0
11279: GREATER
11280: IFFALSE 11428
// begin if turretList = 0 then
11282: LD_VAR 0 7
11286: PUSH
11287: LD_INT 0
11289: EQUAL
11290: IFFALSE 11332
// begin if soldiers_list > 0 then
11292: LD_VAR 0 6
11296: PUSH
11297: LD_INT 0
11299: GREATER
11300: IFFALSE 11330
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
11302: LD_VAR 0 6
11306: PPUSH
11307: LD_VAR 0 9
11311: PUSH
11312: LD_INT 1
11314: PPUSH
11315: LD_VAR 0 9
11319: PPUSH
11320: CALL_OW 12
11324: ARRAY
11325: PPUSH
11326: CALL_OW 120
// end else
11330: GO 11428
// begin for i in barrackList do
11332: LD_ADDR_VAR 0 4
11336: PUSH
11337: LD_VAR 0 9
11341: PUSH
11342: FOR_IN
11343: IFFALSE 11426
// begin insideUnits = UnitsInside ( i ) ;
11345: LD_ADDR_VAR 0 10
11349: PUSH
11350: LD_VAR 0 4
11354: PPUSH
11355: CALL_OW 313
11359: ST_TO_ADDR
// if insideUnits > 0 then
11360: LD_VAR 0 10
11364: PUSH
11365: LD_INT 0
11367: GREATER
11368: IFFALSE 11392
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
11370: LD_VAR 0 10
11374: PUSH
11375: LD_INT 1
11377: ARRAY
11378: PPUSH
11379: LD_VAR 0 7
11383: PUSH
11384: LD_INT 1
11386: ARRAY
11387: PPUSH
11388: CALL_OW 120
// if soldiers_list > 0 then
11392: LD_VAR 0 6
11396: PUSH
11397: LD_INT 0
11399: GREATER
11400: IFFALSE 11424
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
11402: LD_VAR 0 6
11406: PUSH
11407: LD_INT 1
11409: ARRAY
11410: PPUSH
11411: LD_VAR 0 7
11415: PUSH
11416: LD_INT 1
11418: ARRAY
11419: PPUSH
11420: CALL_OW 120
// end ;
11424: GO 11342
11426: POP
11427: POP
// end ; end ; end ;
11428: LD_VAR 0 3
11432: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11433: LD_INT 0
11435: PPUSH
11436: PPUSH
11437: PPUSH
11438: PPUSH
11439: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11440: LD_ADDR_VAR 0 6
11444: PUSH
11445: LD_INT 22
11447: PUSH
11448: LD_VAR 0 1
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: LD_INT 2
11459: PUSH
11460: LD_INT 30
11462: PUSH
11463: LD_INT 31
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: LD_INT 30
11472: PUSH
11473: LD_INT 32
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 30
11482: PUSH
11483: LD_INT 33
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 30
11492: PUSH
11493: LD_INT 4
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 30
11502: PUSH
11503: LD_INT 5
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PPUSH
11522: CALL_OW 69
11526: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11527: LD_ADDR_VAR 0 7
11531: PUSH
11532: LD_INT 22
11534: PUSH
11535: LD_VAR 0 2
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 21
11546: PUSH
11547: LD_INT 3
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: LD_INT 58
11556: PUSH
11557: EMPTY
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: LIST
11564: PPUSH
11565: CALL_OW 69
11569: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11570: LD_VAR 0 6
11574: PUSH
11575: LD_INT 0
11577: GREATER
11578: PUSH
11579: LD_VAR 0 7
11583: PUSH
11584: LD_INT 0
11586: GREATER
11587: AND
11588: IFFALSE 11658
// begin for i in turretsList do
11590: LD_ADDR_VAR 0 4
11594: PUSH
11595: LD_VAR 0 6
11599: PUSH
11600: FOR_IN
11601: IFFALSE 11656
// begin for j in enemyBuildings do
11603: LD_ADDR_VAR 0 5
11607: PUSH
11608: LD_VAR 0 7
11612: PUSH
11613: FOR_IN
11614: IFFALSE 11652
// begin if GetDistUnits ( i , j ) < 20 then
11616: LD_VAR 0 4
11620: PPUSH
11621: LD_VAR 0 5
11625: PPUSH
11626: CALL_OW 296
11630: PUSH
11631: LD_INT 20
11633: LESS
11634: IFFALSE 11650
// begin ComAttackUnit ( i , j ) ;
11636: LD_VAR 0 4
11640: PPUSH
11641: LD_VAR 0 5
11645: PPUSH
11646: CALL_OW 115
// end ; end ;
11650: GO 11613
11652: POP
11653: POP
// end ;
11654: GO 11600
11656: POP
11657: POP
// end ; end ;
11658: LD_VAR 0 3
11662: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
11663: LD_INT 0
11665: PPUSH
11666: PPUSH
// for i = 1 to vehCount do
11667: LD_ADDR_VAR 0 9
11671: PUSH
11672: DOUBLE
11673: LD_INT 1
11675: DEC
11676: ST_TO_ADDR
11677: LD_VAR 0 3
11681: PUSH
11682: FOR_TO
11683: IFFALSE 11730
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
11685: LD_VAR 0 2
11689: PPUSH
11690: LD_VAR 0 7
11694: PPUSH
11695: LD_VAR 0 5
11699: PPUSH
11700: LD_VAR 0 6
11704: PPUSH
11705: LD_VAR 0 4
11709: PUSH
11710: LD_INT 1
11712: PPUSH
11713: LD_VAR 0 4
11717: PPUSH
11718: CALL_OW 12
11722: ARRAY
11723: PPUSH
11724: CALL_OW 185
11728: GO 11682
11730: POP
11731: POP
// end ;
11732: LD_VAR 0 8
11736: RET
// export function AttackVehicles ( enemySide , oponent ) ; var i , j , vehiclesOK , target1 , target2 ; begin
11737: LD_INT 0
11739: PPUSH
11740: PPUSH
11741: PPUSH
11742: PPUSH
11743: PPUSH
11744: PPUSH
// if oponent = 1 then
11745: LD_VAR 0 2
11749: PUSH
11750: LD_INT 1
11752: EQUAL
11753: IFFALSE 11943
// begin repeat wait ( 0 0$1 ) ;
11755: LD_INT 35
11757: PPUSH
11758: CALL_OW 67
// for j in legionVehicles do
11762: LD_ADDR_VAR 0 5
11766: PUSH
11767: LD_EXP 55
11771: PUSH
11772: FOR_IN
11773: IFFALSE 11931
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11775: LD_ADDR_VAR 0 7
11779: PUSH
11780: LD_INT 22
11782: PUSH
11783: LD_VAR 0 1
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PPUSH
11792: CALL_OW 69
11796: PPUSH
11797: LD_VAR 0 5
11801: PPUSH
11802: CALL_OW 74
11806: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11807: LD_ADDR_VAR 0 8
11811: PUSH
11812: LD_INT 22
11814: PUSH
11815: LD_VAR 0 1
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: LD_INT 30
11826: PUSH
11827: LD_INT 32
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: LD_INT 59
11836: PUSH
11837: EMPTY
11838: LIST
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: PUSH
11845: EMPTY
11846: LIST
11847: PPUSH
11848: CALL_OW 69
11852: PPUSH
11853: LD_VAR 0 5
11857: PPUSH
11858: CALL_OW 74
11862: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11863: LD_VAR 0 5
11867: PPUSH
11868: LD_VAR 0 7
11872: PPUSH
11873: CALL_OW 296
11877: PUSH
11878: LD_INT 8
11880: PLUS
11881: PUSH
11882: LD_VAR 0 5
11886: PPUSH
11887: LD_VAR 0 8
11891: PPUSH
11892: CALL_OW 296
11896: LESS
11897: IFFALSE 11915
// ComAttackUnit ( j , target1 ) else
11899: LD_VAR 0 5
11903: PPUSH
11904: LD_VAR 0 7
11908: PPUSH
11909: CALL_OW 115
11913: GO 11929
// ComAttackUnit ( j , target2 ) ;
11915: LD_VAR 0 5
11919: PPUSH
11920: LD_VAR 0 8
11924: PPUSH
11925: CALL_OW 115
// end ;
11929: GO 11772
11931: POP
11932: POP
// until legionVehicles = 0 ;
11933: LD_EXP 55
11937: PUSH
11938: LD_INT 0
11940: EQUAL
11941: IFFALSE 11755
// end ; if oponent = 2 then
11943: LD_VAR 0 2
11947: PUSH
11948: LD_INT 2
11950: EQUAL
11951: IFFALSE 12141
// begin repeat wait ( 0 0$1 ) ;
11953: LD_INT 35
11955: PPUSH
11956: CALL_OW 67
// for j in russianVehicles do
11960: LD_ADDR_VAR 0 5
11964: PUSH
11965: LD_EXP 61
11969: PUSH
11970: FOR_IN
11971: IFFALSE 12129
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11973: LD_ADDR_VAR 0 7
11977: PUSH
11978: LD_INT 22
11980: PUSH
11981: LD_VAR 0 1
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PPUSH
11990: CALL_OW 69
11994: PPUSH
11995: LD_VAR 0 5
11999: PPUSH
12000: CALL_OW 74
12004: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12005: LD_ADDR_VAR 0 8
12009: PUSH
12010: LD_INT 22
12012: PUSH
12013: LD_VAR 0 1
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 30
12024: PUSH
12025: LD_INT 32
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 59
12034: PUSH
12035: EMPTY
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: LIST
12042: PUSH
12043: EMPTY
12044: LIST
12045: PPUSH
12046: CALL_OW 69
12050: PPUSH
12051: LD_VAR 0 5
12055: PPUSH
12056: CALL_OW 74
12060: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12061: LD_VAR 0 5
12065: PPUSH
12066: LD_VAR 0 7
12070: PPUSH
12071: CALL_OW 296
12075: PUSH
12076: LD_INT 8
12078: PLUS
12079: PUSH
12080: LD_VAR 0 5
12084: PPUSH
12085: LD_VAR 0 8
12089: PPUSH
12090: CALL_OW 296
12094: LESS
12095: IFFALSE 12113
// ComAttackUnit ( j , target1 ) else
12097: LD_VAR 0 5
12101: PPUSH
12102: LD_VAR 0 7
12106: PPUSH
12107: CALL_OW 115
12111: GO 12127
// ComAttackUnit ( j , target2 ) ;
12113: LD_VAR 0 5
12117: PPUSH
12118: LD_VAR 0 8
12122: PPUSH
12123: CALL_OW 115
// end ;
12127: GO 11970
12129: POP
12130: POP
// until russianVehicles = 0 ;
12131: LD_EXP 61
12135: PUSH
12136: LD_INT 0
12138: EQUAL
12139: IFFALSE 11953
// end ; if oponent = 3 then
12141: LD_VAR 0 2
12145: PUSH
12146: LD_INT 3
12148: EQUAL
12149: IFFALSE 12339
// begin repeat wait ( 0 0$1 ) ;
12151: LD_INT 35
12153: PPUSH
12154: CALL_OW 67
// for j in allianceVehicles do
12158: LD_ADDR_VAR 0 5
12162: PUSH
12163: LD_EXP 62
12167: PUSH
12168: FOR_IN
12169: IFFALSE 12327
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
12171: LD_ADDR_VAR 0 7
12175: PUSH
12176: LD_INT 22
12178: PUSH
12179: LD_VAR 0 1
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PPUSH
12188: CALL_OW 69
12192: PPUSH
12193: LD_VAR 0 5
12197: PPUSH
12198: CALL_OW 74
12202: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12203: LD_ADDR_VAR 0 8
12207: PUSH
12208: LD_INT 22
12210: PUSH
12211: LD_VAR 0 1
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 30
12222: PUSH
12223: LD_INT 32
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 59
12232: PUSH
12233: EMPTY
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: PUSH
12241: EMPTY
12242: LIST
12243: PPUSH
12244: CALL_OW 69
12248: PPUSH
12249: LD_VAR 0 5
12253: PPUSH
12254: CALL_OW 74
12258: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12259: LD_VAR 0 5
12263: PPUSH
12264: LD_VAR 0 7
12268: PPUSH
12269: CALL_OW 296
12273: PUSH
12274: LD_INT 8
12276: PLUS
12277: PUSH
12278: LD_VAR 0 5
12282: PPUSH
12283: LD_VAR 0 8
12287: PPUSH
12288: CALL_OW 296
12292: LESS
12293: IFFALSE 12311
// ComAttackUnit ( j , target1 ) else
12295: LD_VAR 0 5
12299: PPUSH
12300: LD_VAR 0 7
12304: PPUSH
12305: CALL_OW 115
12309: GO 12325
// ComAttackUnit ( j , target2 ) ;
12311: LD_VAR 0 5
12315: PPUSH
12316: LD_VAR 0 8
12320: PPUSH
12321: CALL_OW 115
// end ;
12325: GO 12168
12327: POP
12328: POP
// until allianceVehicles = 0 ;
12329: LD_EXP 62
12333: PUSH
12334: LD_INT 0
12336: EQUAL
12337: IFFALSE 12151
// end ; end ;
12339: LD_VAR 0 3
12343: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
12344: LD_INT 0
12346: PPUSH
12347: PPUSH
12348: PPUSH
12349: PPUSH
12350: PPUSH
12351: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12352: LD_ADDR_VAR 0 6
12356: PUSH
12357: LD_INT 22
12359: PUSH
12360: LD_VAR 0 1
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 25
12371: PUSH
12372: LD_INT 9
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PPUSH
12383: CALL_OW 69
12387: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12388: LD_ADDR_VAR 0 7
12392: PUSH
12393: LD_INT 81
12395: PUSH
12396: LD_VAR 0 1
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 3
12407: PUSH
12408: LD_INT 21
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PPUSH
12426: CALL_OW 69
12430: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: LD_INT 1
12438: PPUSH
12439: LD_INT 3
12441: PPUSH
12442: CALL_OW 12
12446: ST_TO_ADDR
// for i = 1 to list do
12447: LD_ADDR_VAR 0 5
12451: PUSH
12452: DOUBLE
12453: LD_INT 1
12455: DEC
12456: ST_TO_ADDR
12457: LD_VAR 0 6
12461: PUSH
12462: FOR_TO
12463: IFFALSE 12665
// for ta in filter do
12465: LD_ADDR_VAR 0 3
12469: PUSH
12470: LD_VAR 0 7
12474: PUSH
12475: FOR_IN
12476: IFFALSE 12661
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
12478: LD_VAR 0 6
12482: PUSH
12483: LD_VAR 0 5
12487: ARRAY
12488: PPUSH
12489: LD_VAR 0 3
12493: PPUSH
12494: CALL_OW 296
12498: PUSH
12499: LD_INT 15
12501: LESSEQUAL
12502: IFFALSE 12659
// begin case c of 1 :
12504: LD_VAR 0 4
12508: PUSH
12509: LD_INT 1
12511: DOUBLE
12512: EQUAL
12513: IFTRUE 12517
12515: GO 12555
12517: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
12518: LD_VAR 0 6
12522: PUSH
12523: LD_VAR 0 5
12527: ARRAY
12528: PPUSH
12529: LD_VAR 0 3
12533: PPUSH
12534: CALL_OW 250
12538: PPUSH
12539: LD_VAR 0 3
12543: PPUSH
12544: CALL_OW 251
12548: PPUSH
12549: CALL_OW 154
12553: GO 12659
12555: LD_INT 2
12557: DOUBLE
12558: EQUAL
12559: IFTRUE 12563
12561: GO 12627
12563: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
12564: LD_VAR 0 6
12568: PUSH
12569: LD_VAR 0 5
12573: ARRAY
12574: PPUSH
12575: LD_VAR 0 3
12579: PPUSH
12580: CALL_OW 250
12584: PUSH
12585: LD_INT 1
12587: NEG
12588: PPUSH
12589: LD_INT 1
12591: PPUSH
12592: CALL_OW 12
12596: PLUS
12597: PPUSH
12598: LD_VAR 0 3
12602: PPUSH
12603: CALL_OW 251
12607: PUSH
12608: LD_INT 1
12610: NEG
12611: PPUSH
12612: LD_INT 1
12614: PPUSH
12615: CALL_OW 12
12619: PLUS
12620: PPUSH
12621: CALL_OW 153
12625: GO 12659
12627: LD_INT 3
12629: DOUBLE
12630: EQUAL
12631: IFTRUE 12635
12633: GO 12658
12635: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
12636: LD_VAR 0 6
12640: PUSH
12641: LD_VAR 0 5
12645: ARRAY
12646: PPUSH
12647: LD_VAR 0 3
12651: PPUSH
12652: CALL_OW 115
12656: GO 12659
12658: POP
// end ; end ;
12659: GO 12475
12661: POP
12662: POP
12663: GO 12462
12665: POP
12666: POP
// end ;
12667: LD_VAR 0 2
12671: RET
// export function TimeLapsersAI ( side , enemy ) ; var j , nearUnit , vehs ; begin
12672: LD_INT 0
12674: PPUSH
12675: PPUSH
12676: PPUSH
12677: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 then
12678: LD_INT 22
12680: PUSH
12681: LD_VAR 0 1
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 21
12692: PUSH
12693: LD_INT 2
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 34
12702: PUSH
12703: LD_INT 49
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: LIST
12714: PPUSH
12715: CALL_OW 69
12719: PUSH
12720: LD_INT 0
12722: EQUAL
12723: IFFALSE 12727
// exit ;
12725: GO 12982
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
12727: LD_INT 22
12729: PUSH
12730: LD_VAR 0 1
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: LD_INT 21
12741: PUSH
12742: LD_INT 2
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: LD_INT 34
12751: PUSH
12752: LD_INT 49
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: LIST
12763: PPUSH
12764: CALL_OW 69
12768: PUSH
12769: LD_INT 0
12771: GREATER
12772: IFFALSE 12982
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
12774: LD_ADDR_VAR 0 6
12778: PUSH
12779: LD_INT 22
12781: PUSH
12782: LD_VAR 0 1
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: LD_INT 21
12793: PUSH
12794: LD_INT 2
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 34
12803: PUSH
12804: LD_INT 49
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: LIST
12815: PPUSH
12816: CALL_OW 69
12820: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12821: LD_INT 105
12823: PPUSH
12824: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
12828: LD_ADDR_VAR 0 4
12832: PUSH
12833: LD_VAR 0 6
12837: PPUSH
12838: LD_INT 3
12840: PUSH
12841: LD_INT 60
12843: PUSH
12844: EMPTY
12845: LIST
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PPUSH
12851: CALL_OW 72
12855: PUSH
12856: FOR_IN
12857: IFFALSE 12970
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , enemy ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
12859: LD_ADDR_VAR 0 5
12863: PUSH
12864: LD_INT 81
12866: PUSH
12867: LD_VAR 0 1
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: LD_INT 101
12878: PUSH
12879: LD_VAR 0 2
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PUSH
12888: LD_INT 2
12890: PUSH
12891: LD_INT 21
12893: PUSH
12894: LD_INT 1
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 3
12903: PUSH
12904: LD_INT 58
12906: PUSH
12907: EMPTY
12908: LIST
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: LIST
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: LIST
12923: PPUSH
12924: CALL_OW 69
12928: PPUSH
12929: LD_VAR 0 4
12933: PPUSH
12934: CALL_OW 74
12938: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
12939: LD_VAR 0 4
12943: PPUSH
12944: LD_VAR 0 5
12948: PPUSH
12949: CALL_OW 250
12953: PPUSH
12954: LD_VAR 0 5
12958: PPUSH
12959: CALL_OW 251
12963: PPUSH
12964: CALL_OW 111
// end ;
12968: GO 12856
12970: POP
12971: POP
// until vehs = 0 ;
12972: LD_VAR 0 6
12976: PUSH
12977: LD_INT 0
12979: EQUAL
12980: IFFALSE 12774
// end ; end_of_file
12982: LD_VAR 0 3
12986: RET
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
12987: LD_VAR 0 1
12991: PUSH
12992: LD_INT 1
12994: EQUAL
12995: PUSH
12996: LD_VAR 0 2
13000: PUSH
13001: LD_INT 4
13003: EQUAL
13004: AND
13005: IFFALSE 13014
// YouLost ( text ) ;
13007: LD_STRING text
13009: PPUSH
13010: CALL_OW 104
// end ;
13014: PPOPN 2
13016: END
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
13017: LD_VAR 0 1
13021: PUSH
13022: LD_INT 235
13024: EQUAL
13025: PUSH
13026: LD_VAR 0 2
13030: PPUSH
13031: CALL_OW 255
13035: PUSH
13036: LD_INT 4
13038: EQUAL
13039: AND
13040: IFFALSE 13116
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
13042: LD_INT 235
13044: PPUSH
13045: LD_INT 84
13047: PPUSH
13048: LD_INT 1
13050: PPUSH
13051: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
13055: LD_INT 235
13057: PPUSH
13058: LD_INT 68
13060: PPUSH
13061: LD_INT 100
13063: PPUSH
13064: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
13068: LD_INT 235
13070: PPUSH
13071: CALL_OW 219
// AddComMoveXY ( PowellCargo , 48 , 69 ) ;
13075: LD_INT 235
13077: PPUSH
13078: LD_INT 48
13080: PPUSH
13081: LD_INT 69
13083: PPUSH
13084: CALL_OW 171
// AddComMoveXY ( PowellCargo , 39 , 61 ) ;
13088: LD_INT 235
13090: PPUSH
13091: LD_INT 39
13093: PPUSH
13094: LD_INT 61
13096: PPUSH
13097: CALL_OW 171
// wait ( 0 0$10 ) ;
13101: LD_INT 350
13103: PPUSH
13104: CALL_OW 67
// powellUnloadCargo = 1 ;
13108: LD_ADDR_EXP 70
13112: PUSH
13113: LD_INT 1
13115: ST_TO_ADDR
// end ; end ;
13116: PPOPN 2
13118: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
13119: LD_INT 0
13121: PPUSH
13122: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13123: LD_ADDR_VAR 0 3
13127: PUSH
13128: LD_INT 22
13130: PUSH
13131: LD_INT 4
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 21
13140: PUSH
13141: LD_INT 1
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 56
13150: PUSH
13151: EMPTY
13152: LIST
13153: PUSH
13154: LD_INT 3
13156: PUSH
13157: LD_INT 60
13159: PUSH
13160: EMPTY
13161: LIST
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: PPUSH
13173: CALL_OW 69
13177: PUSH
13178: LD_EXP 17
13182: PUSH
13183: EMPTY
13184: LIST
13185: DIFF
13186: ST_TO_ADDR
// if GetSide ( building ) = 4 then
13187: LD_VAR 0 1
13191: PPUSH
13192: CALL_OW 255
13196: PUSH
13197: LD_INT 4
13199: EQUAL
13200: IFFALSE 13331
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
13202: LD_INT 22
13204: PUSH
13205: LD_INT 4
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 30
13214: PUSH
13215: LD_INT 8
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PPUSH
13226: CALL_OW 69
13230: PUSH
13231: LD_INT 1
13233: EQUAL
13234: IFFALSE 13331
// begin for i = 1 to 3 do
13236: LD_ADDR_VAR 0 2
13240: PUSH
13241: DOUBLE
13242: LD_INT 1
13244: DEC
13245: ST_TO_ADDR
13246: LD_INT 3
13248: PUSH
13249: FOR_TO
13250: IFFALSE 13314
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
13252: LD_VAR 0 3
13256: PUSH
13257: LD_VAR 0 2
13261: ARRAY
13262: PPUSH
13263: LD_INT 3
13265: PUSH
13266: LD_INT 25
13268: PUSH
13269: LD_INT 2
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 72
13284: PPUSH
13285: LD_VAR 0 1
13289: PPUSH
13290: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
13294: LD_VAR 0 3
13298: PUSH
13299: LD_VAR 0 2
13303: ARRAY
13304: PPUSH
13305: LD_INT 4
13307: PPUSH
13308: CALL_OW 183
// end ;
13312: GO 13249
13314: POP
13315: POP
// ResAllTechs ( 4 , building , 1 ) ;
13316: LD_INT 4
13318: PPUSH
13319: LD_VAR 0 1
13323: PPUSH
13324: LD_INT 1
13326: PPUSH
13327: CALL 9530 0 3
// end ; if GetSide ( building ) = 8 then
13331: LD_VAR 0 1
13335: PPUSH
13336: CALL_OW 255
13340: PUSH
13341: LD_INT 8
13343: EQUAL
13344: IFFALSE 13529
// begin if GetNation ( building ) = 3 then
13346: LD_VAR 0 1
13350: PPUSH
13351: CALL_OW 248
13355: PUSH
13356: LD_INT 3
13358: EQUAL
13359: IFFALSE 13529
// begin AddComMoveXY ( Kozlov , 73 , 16 ) ;
13361: LD_EXP 36
13365: PPUSH
13366: LD_INT 73
13368: PPUSH
13369: LD_INT 16
13371: PPUSH
13372: CALL_OW 171
// AddComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
13376: LD_EXP 36
13380: PPUSH
13381: LD_INT 21
13383: PPUSH
13384: LD_INT 74
13386: PPUSH
13387: LD_INT 12
13389: PPUSH
13390: LD_INT 1
13392: PPUSH
13393: CALL_OW 205
// wait ( 0 0$2 ) ;
13397: LD_INT 70
13399: PPUSH
13400: CALL_OW 67
// AddComEnterUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] ) ;
13404: LD_EXP 36
13408: PPUSH
13409: LD_INT 22
13411: PUSH
13412: LD_INT 8
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 30
13421: PUSH
13422: LD_INT 3
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: LD_INT 23
13431: PUSH
13432: LD_INT 3
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: LIST
13443: PPUSH
13444: CALL_OW 69
13448: PUSH
13449: LD_INT 1
13451: ARRAY
13452: PPUSH
13453: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
13457: LD_EXP 36
13461: PPUSH
13462: LD_INT 3
13464: PPUSH
13465: CALL_OW 183
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] , ru_heavy_tracked , 3 , 3 , ru_siberium_rocket ) ;
13469: LD_INT 22
13471: PUSH
13472: LD_INT 8
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: LD_INT 30
13481: PUSH
13482: LD_INT 3
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: LD_INT 23
13491: PUSH
13492: LD_INT 3
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: LIST
13503: PPUSH
13504: CALL_OW 69
13508: PUSH
13509: LD_INT 1
13511: ARRAY
13512: PPUSH
13513: LD_INT 24
13515: PPUSH
13516: LD_INT 3
13518: PPUSH
13519: LD_INT 3
13521: PPUSH
13522: LD_INT 48
13524: PPUSH
13525: CALL_OW 185
// end ; end ; end ;
13529: PPOPN 3
13531: END
// on BuildingComplete ( building ) do var powellPeople ;
13532: LD_INT 0
13534: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
13535: LD_VAR 0 1
13539: PPUSH
13540: CALL_OW 255
13544: PUSH
13545: LD_INT 4
13547: EQUAL
13548: PUSH
13549: LD_VAR 0 1
13553: PPUSH
13554: CALL_OW 266
13558: PUSH
13559: LD_INT 17
13561: EQUAL
13562: AND
13563: IFFALSE 13845
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13565: LD_ADDR_VAR 0 2
13569: PUSH
13570: LD_INT 22
13572: PUSH
13573: LD_INT 4
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 21
13582: PUSH
13583: LD_INT 1
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 56
13592: PUSH
13593: EMPTY
13594: LIST
13595: PUSH
13596: LD_INT 3
13598: PUSH
13599: LD_INT 60
13601: PUSH
13602: EMPTY
13603: LIST
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: PPUSH
13615: CALL_OW 69
13619: PUSH
13620: LD_EXP 17
13624: PUSH
13625: EMPTY
13626: LIST
13627: DIFF
13628: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
13629: LD_INT 22
13631: PUSH
13632: LD_INT 4
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 21
13641: PUSH
13642: LD_INT 3
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 30
13651: PUSH
13652: LD_INT 32
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: LIST
13663: PPUSH
13664: CALL_OW 69
13668: PUSH
13669: LD_INT 1
13671: ARRAY
13672: PPUSH
13673: LD_INT 6
13675: PPUSH
13676: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
13680: LD_INT 22
13682: PUSH
13683: LD_INT 4
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: LD_INT 21
13692: PUSH
13693: LD_INT 3
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 30
13702: PUSH
13703: LD_INT 32
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: PPUSH
13715: CALL_OW 69
13719: PUSH
13720: LD_INT 2
13722: ARRAY
13723: PPUSH
13724: LD_INT 5
13726: PPUSH
13727: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
13731: LD_VAR 0 2
13735: PUSH
13736: LD_INT 1
13738: ARRAY
13739: PPUSH
13740: LD_INT 22
13742: PUSH
13743: LD_INT 4
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 21
13752: PUSH
13753: LD_INT 3
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 30
13762: PUSH
13763: LD_INT 32
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: LIST
13774: PPUSH
13775: CALL_OW 69
13779: PUSH
13780: LD_INT 1
13782: ARRAY
13783: PPUSH
13784: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
13788: LD_VAR 0 2
13792: PUSH
13793: LD_INT 2
13795: ARRAY
13796: PPUSH
13797: LD_INT 22
13799: PUSH
13800: LD_INT 4
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: LD_INT 21
13809: PUSH
13810: LD_INT 3
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PUSH
13817: LD_INT 30
13819: PUSH
13820: LD_INT 32
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: LIST
13831: PPUSH
13832: CALL_OW 69
13836: PUSH
13837: LD_INT 2
13839: ARRAY
13840: PPUSH
13841: CALL_OW 120
// end ; if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_siberium then
13845: LD_VAR 0 1
13849: PPUSH
13850: CALL_OW 255
13854: PUSH
13855: LD_INT 4
13857: EQUAL
13858: PUSH
13859: LD_VAR 0 1
13863: PPUSH
13864: CALL_OW 266
13868: PUSH
13869: LD_INT 21
13871: EQUAL
13872: AND
13873: IFFALSE 14020
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
13875: LD_INT 85
13877: PPUSH
13878: LD_INT 3
13880: PPUSH
13881: LD_INT 3
13883: PPUSH
13884: LD_INT 1
13886: PPUSH
13887: LD_INT 3
13889: PUSH
13890: LD_INT 5
13892: PUSH
13893: LD_INT 7
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 1
13903: PPUSH
13904: LD_INT 3
13906: PPUSH
13907: CALL_OW 12
13911: ARRAY
13912: PPUSH
13913: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
13917: LD_INT 85
13919: PPUSH
13920: LD_INT 3
13922: PPUSH
13923: LD_INT 3
13925: PPUSH
13926: LD_INT 1
13928: PPUSH
13929: LD_INT 3
13931: PUSH
13932: LD_INT 5
13934: PUSH
13935: LD_INT 7
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: LIST
13942: PUSH
13943: LD_INT 1
13945: PPUSH
13946: LD_INT 3
13948: PPUSH
13949: CALL_OW 12
13953: ARRAY
13954: PPUSH
13955: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
13959: LD_INT 85
13961: PPUSH
13962: LD_INT 3
13964: PPUSH
13965: LD_INT 3
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: LD_INT 3
13973: PUSH
13974: LD_INT 5
13976: PUSH
13977: LD_INT 7
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: LIST
13984: PUSH
13985: LD_INT 1
13987: PPUSH
13988: LD_INT 3
13990: PPUSH
13991: CALL_OW 12
13995: ARRAY
13996: PPUSH
13997: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
14001: LD_INT 85
14003: PPUSH
14004: LD_INT 5
14006: PPUSH
14007: LD_INT 3
14009: PPUSH
14010: LD_INT 1
14012: PPUSH
14013: LD_INT 6
14015: PPUSH
14016: CALL_OW 185
// end ; if GetSide ( building ) = 8 then
14020: LD_VAR 0 1
14024: PPUSH
14025: CALL_OW 255
14029: PUSH
14030: LD_INT 8
14032: EQUAL
14033: IFFALSE 14059
// begin if GetBType ( building ) = b_workshop then
14035: LD_VAR 0 1
14039: PPUSH
14040: CALL_OW 266
14044: PUSH
14045: LD_INT 2
14047: EQUAL
14048: IFFALSE 14059
// ComUpgrade ( building ) ;
14050: LD_VAR 0 1
14054: PPUSH
14055: CALL_OW 146
// end ; if GetSide ( building ) = 3 then
14059: LD_VAR 0 1
14063: PPUSH
14064: CALL_OW 255
14068: PUSH
14069: LD_INT 3
14071: EQUAL
14072: IFFALSE 14146
// begin russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14074: LD_ADDR_EXP 94
14078: PUSH
14079: LD_EXP 94
14083: PPUSH
14084: LD_INT 1
14086: PPUSH
14087: CALL_OW 3
14091: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14092: LD_ADDR_EXP 94
14096: PUSH
14097: LD_EXP 94
14101: PPUSH
14102: LD_INT 1
14104: PPUSH
14105: CALL_OW 3
14109: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14110: LD_ADDR_EXP 94
14114: PUSH
14115: LD_EXP 94
14119: PPUSH
14120: LD_INT 1
14122: PPUSH
14123: CALL_OW 3
14127: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14128: LD_ADDR_EXP 94
14132: PUSH
14133: LD_EXP 94
14137: PPUSH
14138: LD_INT 1
14140: PPUSH
14141: CALL_OW 3
14145: ST_TO_ADDR
// end ; if GetSide ( building ) = 8 then
14146: LD_VAR 0 1
14150: PPUSH
14151: CALL_OW 255
14155: PUSH
14156: LD_INT 8
14158: EQUAL
14159: IFFALSE 14233
// begin legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14161: LD_ADDR_EXP 93
14165: PUSH
14166: LD_EXP 93
14170: PPUSH
14171: LD_INT 1
14173: PPUSH
14174: CALL_OW 3
14178: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14179: LD_ADDR_EXP 93
14183: PUSH
14184: LD_EXP 93
14188: PPUSH
14189: LD_INT 1
14191: PPUSH
14192: CALL_OW 3
14196: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14197: LD_ADDR_EXP 93
14201: PUSH
14202: LD_EXP 93
14206: PPUSH
14207: LD_INT 1
14209: PPUSH
14210: CALL_OW 3
14214: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14215: LD_ADDR_EXP 93
14219: PUSH
14220: LD_EXP 93
14224: PPUSH
14225: LD_INT 1
14227: PPUSH
14228: CALL_OW 3
14232: ST_TO_ADDR
// end ; if GetSide ( building ) = 7 then
14233: LD_VAR 0 1
14237: PPUSH
14238: CALL_OW 255
14242: PUSH
14243: LD_INT 7
14245: EQUAL
14246: IFFALSE 14320
// begin allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14248: LD_ADDR_EXP 95
14252: PUSH
14253: LD_EXP 95
14257: PPUSH
14258: LD_INT 1
14260: PPUSH
14261: CALL_OW 3
14265: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14266: LD_ADDR_EXP 95
14270: PUSH
14271: LD_EXP 95
14275: PPUSH
14276: LD_INT 1
14278: PPUSH
14279: CALL_OW 3
14283: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14284: LD_ADDR_EXP 95
14288: PUSH
14289: LD_EXP 95
14293: PPUSH
14294: LD_INT 1
14296: PPUSH
14297: CALL_OW 3
14301: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14302: LD_ADDR_EXP 95
14306: PUSH
14307: LD_EXP 95
14311: PPUSH
14312: LD_INT 1
14314: PPUSH
14315: CALL_OW 3
14319: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
14320: LD_VAR 0 1
14324: PPUSH
14325: CALL_OW 255
14329: PUSH
14330: LD_INT 3
14332: EQUAL
14333: IFFALSE 14400
// begin if GetBType ( building ) = b_bunker or GetBType ( building ) = b_turret then
14335: LD_VAR 0 1
14339: PPUSH
14340: CALL_OW 266
14344: PUSH
14345: LD_INT 32
14347: EQUAL
14348: PUSH
14349: LD_VAR 0 1
14353: PPUSH
14354: CALL_OW 266
14358: PUSH
14359: LD_INT 33
14361: EQUAL
14362: OR
14363: IFFALSE 14400
// PlaceWeaponTurret ( building , [ 46 , 47 , 45 ] [ Rand ( 1 , 3 ) ] ) ;
14365: LD_VAR 0 1
14369: PPUSH
14370: LD_INT 46
14372: PUSH
14373: LD_INT 47
14375: PUSH
14376: LD_INT 45
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 1
14386: PPUSH
14387: LD_INT 3
14389: PPUSH
14390: CALL_OW 12
14394: ARRAY
14395: PPUSH
14396: CALL_OW 431
// end ; if GetSide ( building ) = 8 and GetBType ( building ) = b_bunker then
14400: LD_VAR 0 1
14404: PPUSH
14405: CALL_OW 255
14409: PUSH
14410: LD_INT 8
14412: EQUAL
14413: PUSH
14414: LD_VAR 0 1
14418: PPUSH
14419: CALL_OW 266
14423: PUSH
14424: LD_INT 32
14426: EQUAL
14427: AND
14428: IFFALSE 14461
// begin PlaceWeaponTurret ( building , [ 28 , 27 ] [ Rand ( 1 , 2 ) ] ) ;
14430: LD_VAR 0 1
14434: PPUSH
14435: LD_INT 28
14437: PUSH
14438: LD_INT 27
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 1
14447: PPUSH
14448: LD_INT 2
14450: PPUSH
14451: CALL_OW 12
14455: ARRAY
14456: PPUSH
14457: CALL_OW 431
// end ; end ;
14461: PPOPN 2
14463: END
// on EnterBuilding ( building , human ) do begin end ;
14464: PPOPN 2
14466: END
// on BehemothConstructed ( vehicle ) do begin if GetSide ( vehicle ) = 6 then
14467: LD_VAR 0 1
14471: PPUSH
14472: CALL_OW 255
14476: PUSH
14477: LD_INT 6
14479: EQUAL
14480: IFFALSE 14498
// ruBehs = ruBehs ^ vehicle ;
14482: LD_ADDR_EXP 59
14486: PUSH
14487: LD_EXP 59
14491: PUSH
14492: LD_VAR 0 1
14496: ADD
14497: ST_TO_ADDR
// end ;
14498: PPOPN 1
14500: END
// on VehicleConstructed ( vehicle , building ) do var legionBomb , rocketTarget ;
14501: LD_INT 0
14503: PPUSH
14504: PPUSH
// begin if vehicle = powellVeh then
14505: LD_VAR 0 1
14509: PUSH
14510: LD_EXP 73
14514: EQUAL
14515: IFFALSE 14531
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
14517: LD_VAR 0 1
14521: PPUSH
14522: CALL_OW 313
14526: PPUSH
14527: CALL_OW 121
// if GetSide ( vehicle ) = 4 then
14531: LD_VAR 0 1
14535: PPUSH
14536: CALL_OW 255
14540: PUSH
14541: LD_INT 4
14543: EQUAL
14544: IFFALSE 14561
// AddComMoveXY ( vehicle , 58 , 63 ) ;
14546: LD_VAR 0 1
14550: PPUSH
14551: LD_INT 58
14553: PPUSH
14554: LD_INT 63
14556: PPUSH
14557: CALL_OW 171
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
14561: LD_VAR 0 1
14565: PPUSH
14566: CALL_OW 255
14570: PUSH
14571: LD_INT 4
14573: EQUAL
14574: PUSH
14575: LD_EXP 69
14579: PUSH
14580: LD_INT 2
14582: EQUAL
14583: AND
14584: PUSH
14585: LD_VAR 0 1
14589: PPUSH
14590: CALL_OW 264
14594: PUSH
14595: LD_INT 6
14597: EQUAL
14598: AND
14599: IFFALSE 14653
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
14601: LD_EXP 66
14605: PUSH
14606: LD_INT 5
14608: ARRAY
14609: PPUSH
14610: CALL_OW 122
// wait ( 0 0$1 ) ;
14614: LD_INT 35
14616: PPUSH
14617: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
14621: LD_EXP 66
14625: PUSH
14626: LD_INT 5
14628: ARRAY
14629: PPUSH
14630: LD_INT 85
14632: PPUSH
14633: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
14637: LD_EXP 66
14641: PUSH
14642: LD_INT 5
14644: ARRAY
14645: PPUSH
14646: LD_INT 3
14648: PPUSH
14649: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
14653: LD_VAR 0 1
14657: PPUSH
14658: CALL_OW 255
14662: PUSH
14663: LD_INT 4
14665: EQUAL
14666: PUSH
14667: LD_EXP 69
14671: PUSH
14672: LD_INT 2
14674: EQUAL
14675: AND
14676: PUSH
14677: LD_VAR 0 1
14681: PPUSH
14682: CALL_OW 264
14686: PUSH
14687: LD_INT 3
14689: EQUAL
14690: AND
14691: IFFALSE 14718
// begin powellVeh = vehicle ;
14693: LD_ADDR_EXP 73
14697: PUSH
14698: LD_VAR 0 1
14702: ST_TO_ADDR
// ComMoveXY ( vehicle , 49 , 74 ) ;
14703: LD_VAR 0 1
14707: PPUSH
14708: LD_INT 49
14710: PPUSH
14711: LD_INT 74
14713: PPUSH
14714: CALL_OW 111
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 2 and GetType ( vehicle ) = unit_vehicle then
14718: LD_VAR 0 1
14722: PPUSH
14723: CALL_OW 255
14727: PUSH
14728: LD_INT 8
14730: EQUAL
14731: PUSH
14732: LD_VAR 0 1
14736: PPUSH
14737: CALL_OW 248
14741: PUSH
14742: LD_INT 2
14744: EQUAL
14745: AND
14746: PUSH
14747: LD_VAR 0 1
14751: PPUSH
14752: CALL_OW 247
14756: PUSH
14757: LD_INT 2
14759: EQUAL
14760: AND
14761: IFFALSE 14797
// begin legionVehicles = legionVehicles ^ vehicle ;
14763: LD_ADDR_EXP 55
14767: PUSH
14768: LD_EXP 55
14772: PUSH
14773: LD_VAR 0 1
14777: ADD
14778: ST_TO_ADDR
// ComLinkTo ( vehicle , arControler [ 1 ] ) ;
14779: LD_VAR 0 1
14783: PPUSH
14784: LD_EXP 56
14788: PUSH
14789: LD_INT 1
14791: ARRAY
14792: PPUSH
14793: CALL_OW 135
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 3 then
14797: LD_VAR 0 1
14801: PPUSH
14802: CALL_OW 255
14806: PUSH
14807: LD_INT 8
14809: EQUAL
14810: PUSH
14811: LD_VAR 0 1
14815: PPUSH
14816: CALL_OW 248
14820: PUSH
14821: LD_INT 3
14823: EQUAL
14824: AND
14825: IFFALSE 15364
// begin ChangeMissionObjectives ( MlegionDel ) ;
14827: LD_STRING MlegionDel
14829: PPUSH
14830: CALL_OW 337
// legionBomb = rand ( 1 , 2 ) ;
14834: LD_ADDR_VAR 0 3
14838: PUSH
14839: LD_INT 1
14841: PPUSH
14842: LD_INT 2
14844: PPUSH
14845: CALL_OW 12
14849: ST_TO_ADDR
// legionRocket = vehicle ;
14850: LD_ADDR_EXP 99
14854: PUSH
14855: LD_VAR 0 1
14859: ST_TO_ADDR
// DialogueOn ;
14860: CALL_OW 6
// if legionBomb = 1 then
14864: LD_VAR 0 3
14868: PUSH
14869: LD_INT 1
14871: EQUAL
14872: IFFALSE 15224
// begin if Kurt then
14874: LD_EXP 30
14878: IFFALSE 14894
// Say ( Kurt , D12-Kurt-1 ) else
14880: LD_EXP 30
14884: PPUSH
14885: LD_STRING D12-Kurt-1
14887: PPUSH
14888: CALL_OW 88
14892: GO 14956
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12-Kurt-1 ) ;
14894: LD_INT 22
14896: PUSH
14897: LD_INT 8
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: LD_INT 21
14906: PUSH
14907: LD_INT 1
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 25
14916: PUSH
14917: LD_INT 1
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 26
14926: PUSH
14927: LD_INT 1
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: PPUSH
14940: CALL_OW 69
14944: PUSH
14945: LD_INT 2
14947: ARRAY
14948: PPUSH
14949: LD_STRING D12-Kurt-1
14951: PPUSH
14952: CALL_OW 88
// DialogueOff ;
14956: CALL_OW 7
// wait ( 0 0$15 ) ;
14960: LD_INT 525
14962: PPUSH
14963: CALL_OW 67
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
14967: LD_ADDR_VAR 0 4
14971: PUSH
14972: LD_INT 22
14974: PUSH
14975: LD_INT 1
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 21
14984: PUSH
14985: LD_INT 3
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 23
14994: PUSH
14995: LD_INT 1
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 2
15004: PUSH
15005: LD_INT 30
15007: PUSH
15008: LD_INT 0
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 30
15017: PUSH
15018: LD_INT 1
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: LIST
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: PPUSH
15036: CALL_OW 69
15040: ST_TO_ADDR
// if rocketTarget = 0 then
15041: LD_VAR 0 4
15045: PUSH
15046: LD_INT 0
15048: EQUAL
15049: IFFALSE 15125
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
15051: LD_ADDR_VAR 0 4
15055: PUSH
15056: LD_INT 22
15058: PUSH
15059: LD_INT 1
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 21
15068: PUSH
15069: LD_INT 3
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 23
15078: PUSH
15079: LD_INT 2
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 2
15088: PUSH
15089: LD_INT 30
15091: PUSH
15092: LD_INT 0
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 30
15101: PUSH
15102: LD_INT 1
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: LIST
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: PPUSH
15120: CALL_OW 69
15124: ST_TO_ADDR
// if rocketTarget = 0 then
15125: LD_VAR 0 4
15129: PUSH
15130: LD_INT 0
15132: EQUAL
15133: IFFALSE 15187
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
15135: LD_ADDR_VAR 0 4
15139: PUSH
15140: LD_INT 22
15142: PUSH
15143: LD_INT 1
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 21
15152: PUSH
15153: LD_INT 1
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 23
15162: PUSH
15163: LD_INT 1
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 50
15172: PUSH
15173: EMPTY
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: PPUSH
15182: CALL_OW 69
15186: ST_TO_ADDR
// ComAttackPlace ( legionRocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
15187: LD_EXP 99
15191: PPUSH
15192: LD_VAR 0 4
15196: PUSH
15197: LD_INT 1
15199: ARRAY
15200: PPUSH
15201: CALL_OW 250
15205: PPUSH
15206: LD_VAR 0 4
15210: PUSH
15211: LD_INT 1
15213: ARRAY
15214: PPUSH
15215: CALL_OW 251
15219: PPUSH
15220: CALL_OW 116
// end ; if legionBomb = 2 then
15224: LD_VAR 0 3
15228: PUSH
15229: LD_INT 2
15231: EQUAL
15232: IFFALSE 15364
// begin if Kurt then
15234: LD_EXP 30
15238: IFFALSE 15254
// Say ( Kurt , D12a-Kurt-1 ) else
15240: LD_EXP 30
15244: PPUSH
15245: LD_STRING D12a-Kurt-1
15247: PPUSH
15248: CALL_OW 88
15252: GO 15316
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12a-Kurt-11 ) ;
15254: LD_INT 22
15256: PUSH
15257: LD_INT 8
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 21
15266: PUSH
15267: LD_INT 1
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 25
15276: PUSH
15277: LD_INT 1
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 26
15286: PUSH
15287: LD_INT 1
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: PPUSH
15300: CALL_OW 69
15304: PUSH
15305: LD_INT 2
15307: ARRAY
15308: PPUSH
15309: LD_STRING D12a-Kurt-11
15311: PPUSH
15312: CALL_OW 88
// SayRadio ( Roth , D12a-Roth-1 ) ;
15316: LD_EXP 28
15320: PPUSH
15321: LD_STRING D12a-Roth-1
15323: PPUSH
15324: CALL_OW 94
// DialogueOff ;
15328: CALL_OW 7
// wait ( 0 0$15 ) ;
15332: LD_INT 525
15334: PPUSH
15335: CALL_OW 67
// ComAttackPlace ( legionRocket , GetX ( RuDep2 ) , GetY ( RuDep2 ) ) ;
15339: LD_EXP 99
15343: PPUSH
15344: LD_INT 23
15346: PPUSH
15347: CALL_OW 250
15351: PPUSH
15352: LD_INT 23
15354: PPUSH
15355: CALL_OW 251
15359: PPUSH
15360: CALL_OW 116
// end ; end ; if GetSide ( vehicle ) = 3 and GetNation ( vehicle ) = 3 and GetType ( vehicle ) = unit_vehicle then
15364: LD_VAR 0 1
15368: PPUSH
15369: CALL_OW 255
15373: PUSH
15374: LD_INT 3
15376: EQUAL
15377: PUSH
15378: LD_VAR 0 1
15382: PPUSH
15383: CALL_OW 248
15387: PUSH
15388: LD_INT 3
15390: EQUAL
15391: AND
15392: PUSH
15393: LD_VAR 0 1
15397: PPUSH
15398: CALL_OW 247
15402: PUSH
15403: LD_INT 2
15405: EQUAL
15406: AND
15407: IFFALSE 15425
// RussianVehicles = RussianVehicles ^ vehicle ;
15409: LD_ADDR_EXP 61
15413: PUSH
15414: LD_EXP 61
15418: PUSH
15419: LD_VAR 0 1
15423: ADD
15424: ST_TO_ADDR
// if GetSide ( vehicle ) = 7 and GetType ( vehicle ) = unit_vehicle then
15425: LD_VAR 0 1
15429: PPUSH
15430: CALL_OW 255
15434: PUSH
15435: LD_INT 7
15437: EQUAL
15438: PUSH
15439: LD_VAR 0 1
15443: PPUSH
15444: CALL_OW 247
15448: PUSH
15449: LD_INT 2
15451: EQUAL
15452: AND
15453: IFFALSE 15512
// begin AllianceVehicles = AllianceVehicles ^ vehicle ;
15455: LD_ADDR_EXP 62
15459: PUSH
15460: LD_EXP 62
15464: PUSH
15465: LD_VAR 0 1
15469: ADD
15470: ST_TO_ADDR
// if GetControl ( vehicle ) = 2 then
15471: LD_VAR 0 1
15475: PPUSH
15476: CALL_OW 263
15480: PUSH
15481: LD_INT 2
15483: EQUAL
15484: IFFALSE 15512
// ComLinkTo ( vehicle , allianceControler [ rand ( 1 , 3 ) ] ) ;
15486: LD_VAR 0 1
15490: PPUSH
15491: LD_EXP 63
15495: PUSH
15496: LD_INT 1
15498: PPUSH
15499: LD_INT 3
15501: PPUSH
15502: CALL_OW 12
15506: ARRAY
15507: PPUSH
15508: CALL_OW 135
// end ; end ;
15512: PPOPN 4
15514: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
15515: LD_VAR 0 1
15519: PPUSH
15520: CALL_OW 255
15524: PUSH
15525: LD_INT 4
15527: EQUAL
15528: PUSH
15529: LD_EXP 69
15533: PUSH
15534: LD_INT 1
15536: EQUAL
15537: AND
15538: IFFALSE 15641
// begin ComEnterUnit ( human , AmFact ) ;
15540: LD_VAR 0 2
15544: PPUSH
15545: LD_INT 85
15547: PPUSH
15548: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
15552: LD_VAR 0 2
15556: PPUSH
15557: CALL_OW 258
15561: PUSH
15562: LD_INT 1
15564: EQUAL
15565: PUSH
15566: LD_EXP 102
15570: PUSH
15571: LD_INT 0
15573: EQUAL
15574: AND
15575: IFFALSE 15641
// begin blockEvent1 = 1 ;
15577: LD_ADDR_EXP 102
15581: PUSH
15582: LD_INT 1
15584: ST_TO_ADDR
// startAttacks = 1 ;
15585: LD_ADDR_EXP 72
15589: PUSH
15590: LD_INT 1
15592: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
15593: LD_VAR 0 2
15597: PPUSH
15598: LD_STRING D4a-Sol1-1
15600: PPUSH
15601: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
15605: LD_EXP 17
15609: PPUSH
15610: LD_STRING D4a-Pow-1
15612: PPUSH
15613: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
15617: LD_VAR 0 2
15621: PPUSH
15622: LD_STRING D4a-Sol1-2
15624: PPUSH
15625: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
15629: LD_EXP 17
15633: PPUSH
15634: LD_STRING D4a-Pow-2
15636: PPUSH
15637: CALL_OW 88
// end ; end ; end ;
15641: PPOPN 2
15643: END
// on UnitDestroyed ( unit ) do var i ;
15644: LD_INT 0
15646: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15647: LD_VAR 0 1
15651: PPUSH
15652: CALL_OW 255
15656: PUSH
15657: LD_INT 1
15659: EQUAL
15660: PUSH
15661: LD_VAR 0 1
15665: PPUSH
15666: CALL_OW 247
15670: PUSH
15671: LD_INT 1
15673: EQUAL
15674: AND
15675: IFFALSE 15691
// unitLost = unitLost + 1 ;
15677: LD_ADDR_EXP 98
15681: PUSH
15682: LD_EXP 98
15686: PUSH
15687: LD_INT 1
15689: PLUS
15690: ST_TO_ADDR
// if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 255
15700: PUSH
15701: LD_INT 4
15703: EQUAL
15704: PUSH
15705: LD_VAR 0 1
15709: PPUSH
15710: CALL_OW 247
15714: PUSH
15715: LD_INT 1
15717: EQUAL
15718: AND
15719: IFFALSE 15769
// begin for i in amUnitsAttack do
15721: LD_ADDR_VAR 0 2
15725: PUSH
15726: LD_EXP 66
15730: PUSH
15731: FOR_IN
15732: IFFALSE 15767
// if i = unit then
15734: LD_VAR 0 2
15738: PUSH
15739: LD_VAR 0 1
15743: EQUAL
15744: IFFALSE 15765
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
15746: LD_ADDR_EXP 66
15750: PUSH
15751: LD_EXP 66
15755: PUSH
15756: LD_VAR 0 1
15760: PUSH
15761: EMPTY
15762: LIST
15763: DIFF
15764: ST_TO_ADDR
15765: GO 15731
15767: POP
15768: POP
// end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
15769: LD_VAR 0 1
15773: PPUSH
15774: CALL_OW 255
15778: PUSH
15779: LD_INT 8
15781: EQUAL
15782: PUSH
15783: LD_VAR 0 1
15787: PPUSH
15788: CALL_OW 247
15792: PUSH
15793: LD_INT 2
15795: EQUAL
15796: AND
15797: PUSH
15798: LD_VAR 0 1
15802: PPUSH
15803: CALL_OW 248
15807: PUSH
15808: LD_INT 2
15810: EQUAL
15811: AND
15812: IFFALSE 15862
// begin for i in legionVehicles do
15814: LD_ADDR_VAR 0 2
15818: PUSH
15819: LD_EXP 55
15823: PUSH
15824: FOR_IN
15825: IFFALSE 15860
// if i = unit then
15827: LD_VAR 0 2
15831: PUSH
15832: LD_VAR 0 1
15836: EQUAL
15837: IFFALSE 15858
// legionVehicles = legionVehicles diff [ unit ] ;
15839: LD_ADDR_EXP 55
15843: PUSH
15844: LD_EXP 55
15848: PUSH
15849: LD_VAR 0 1
15853: PUSH
15854: EMPTY
15855: LIST
15856: DIFF
15857: ST_TO_ADDR
15858: GO 15824
15860: POP
15861: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
15862: LD_VAR 0 1
15866: PPUSH
15867: CALL_OW 255
15871: PUSH
15872: LD_INT 3
15874: EQUAL
15875: PUSH
15876: LD_VAR 0 1
15880: PPUSH
15881: CALL_OW 247
15885: PUSH
15886: LD_INT 2
15888: EQUAL
15889: AND
15890: IFFALSE 15940
// begin for i in RussianVehicles do
15892: LD_ADDR_VAR 0 2
15896: PUSH
15897: LD_EXP 61
15901: PUSH
15902: FOR_IN
15903: IFFALSE 15938
// if i = unit then
15905: LD_VAR 0 2
15909: PUSH
15910: LD_VAR 0 1
15914: EQUAL
15915: IFFALSE 15936
// RussianVehicles = RussianVehicles diff [ unit ] ;
15917: LD_ADDR_EXP 61
15921: PUSH
15922: LD_EXP 61
15926: PUSH
15927: LD_VAR 0 1
15931: PUSH
15932: EMPTY
15933: LIST
15934: DIFF
15935: ST_TO_ADDR
15936: GO 15902
15938: POP
15939: POP
// end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_vehicle then
15940: LD_VAR 0 1
15944: PPUSH
15945: CALL_OW 255
15949: PUSH
15950: LD_INT 7
15952: EQUAL
15953: PUSH
15954: LD_VAR 0 1
15958: PPUSH
15959: CALL_OW 247
15963: PUSH
15964: LD_INT 2
15966: EQUAL
15967: AND
15968: IFFALSE 16018
// begin for i in AllianceVehicles do
15970: LD_ADDR_VAR 0 2
15974: PUSH
15975: LD_EXP 62
15979: PUSH
15980: FOR_IN
15981: IFFALSE 16016
// if i = unit then
15983: LD_VAR 0 2
15987: PUSH
15988: LD_VAR 0 1
15992: EQUAL
15993: IFFALSE 16014
// AllianceVehicles = AllianceVehicles diff [ unit ] ;
15995: LD_ADDR_EXP 62
15999: PUSH
16000: LD_EXP 62
16004: PUSH
16005: LD_VAR 0 1
16009: PUSH
16010: EMPTY
16011: LIST
16012: DIFF
16013: ST_TO_ADDR
16014: GO 15980
16016: POP
16017: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
16018: LD_VAR 0 1
16022: PPUSH
16023: CALL_OW 255
16027: PUSH
16028: LD_INT 3
16030: EQUAL
16031: PUSH
16032: LD_VAR 0 1
16036: PPUSH
16037: CALL_OW 247
16041: PUSH
16042: LD_INT 3
16044: EQUAL
16045: AND
16046: IFFALSE 16738
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16048: LD_VAR 0 1
16052: PPUSH
16053: CALL_OW 266
16057: PUSH
16058: LD_INT 31
16060: EQUAL
16061: PUSH
16062: LD_VAR 0 1
16066: PPUSH
16067: CALL_OW 266
16071: PUSH
16072: LD_INT 32
16074: EQUAL
16075: OR
16076: PUSH
16077: LD_VAR 0 1
16081: PPUSH
16082: CALL_OW 266
16086: PUSH
16087: LD_INT 36
16089: EQUAL
16090: OR
16091: PUSH
16092: LD_VAR 0 1
16096: PPUSH
16097: CALL_OW 266
16101: PUSH
16102: LD_INT 0
16104: EQUAL
16105: OR
16106: PUSH
16107: LD_VAR 0 1
16111: PPUSH
16112: CALL_OW 266
16116: PUSH
16117: LD_INT 24
16119: EQUAL
16120: OR
16121: PUSH
16122: LD_VAR 0 1
16126: PPUSH
16127: CALL_OW 266
16131: PUSH
16132: LD_INT 17
16134: EQUAL
16135: OR
16136: PUSH
16137: LD_VAR 0 1
16141: PPUSH
16142: CALL_OW 266
16146: PUSH
16147: LD_INT 25
16149: EQUAL
16150: OR
16151: PUSH
16152: LD_VAR 0 1
16156: PPUSH
16157: CALL_OW 266
16161: PUSH
16162: LD_INT 19
16164: EQUAL
16165: OR
16166: PUSH
16167: LD_VAR 0 1
16171: PPUSH
16172: CALL_OW 266
16176: PUSH
16177: LD_INT 20
16179: EQUAL
16180: OR
16181: PUSH
16182: LD_VAR 0 1
16186: PPUSH
16187: CALL_OW 266
16191: PUSH
16192: LD_INT 18
16194: EQUAL
16195: OR
16196: PUSH
16197: LD_VAR 0 1
16201: PPUSH
16202: CALL_OW 266
16206: PUSH
16207: LD_INT 21
16209: EQUAL
16210: OR
16211: PUSH
16212: LD_VAR 0 1
16216: PPUSH
16217: CALL_OW 266
16221: PUSH
16222: LD_INT 23
16224: EQUAL
16225: OR
16226: PUSH
16227: LD_VAR 0 1
16231: PPUSH
16232: CALL_OW 266
16236: PUSH
16237: LD_INT 16
16239: EQUAL
16240: OR
16241: PUSH
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 266
16251: PUSH
16252: LD_INT 6
16254: EQUAL
16255: OR
16256: PUSH
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL_OW 266
16266: PUSH
16267: LD_INT 29
16269: EQUAL
16270: OR
16271: PUSH
16272: LD_VAR 0 1
16276: PPUSH
16277: CALL_OW 266
16281: PUSH
16282: LD_INT 26
16284: EQUAL
16285: OR
16286: PUSH
16287: LD_VAR 0 1
16291: PPUSH
16292: CALL_OW 266
16296: PUSH
16297: LD_INT 30
16299: EQUAL
16300: OR
16301: PUSH
16302: LD_VAR 0 1
16306: PPUSH
16307: CALL_OW 266
16311: PUSH
16312: LD_INT 28
16314: EQUAL
16315: OR
16316: PUSH
16317: LD_VAR 0 1
16321: PPUSH
16322: CALL_OW 266
16326: PUSH
16327: LD_INT 27
16329: EQUAL
16330: OR
16331: PUSH
16332: LD_VAR 0 1
16336: PPUSH
16337: CALL_OW 266
16341: PUSH
16342: LD_INT 33
16344: EQUAL
16345: OR
16346: PUSH
16347: LD_VAR 0 1
16351: PPUSH
16352: CALL_OW 266
16356: PUSH
16357: LD_INT 2
16359: EQUAL
16360: OR
16361: PUSH
16362: LD_VAR 0 1
16366: PPUSH
16367: CALL_OW 266
16371: PUSH
16372: LD_INT 4
16374: EQUAL
16375: OR
16376: IFFALSE 16462
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ GetBType ( unit ) ;
16378: LD_ADDR_EXP 94
16382: PUSH
16383: LD_EXP 94
16387: PUSH
16388: LD_VAR 0 1
16392: PPUSH
16393: CALL_OW 266
16397: ADD
16398: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16399: LD_ADDR_EXP 94
16403: PUSH
16404: LD_EXP 94
16408: PUSH
16409: LD_VAR 0 1
16413: PPUSH
16414: CALL_OW 250
16418: ADD
16419: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16420: LD_ADDR_EXP 94
16424: PUSH
16425: LD_EXP 94
16429: PUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 251
16439: ADD
16440: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16441: LD_ADDR_EXP 94
16445: PUSH
16446: LD_EXP 94
16450: PUSH
16451: LD_VAR 0 1
16455: PPUSH
16456: CALL_OW 254
16460: ADD
16461: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16462: LD_VAR 0 1
16466: PPUSH
16467: CALL_OW 266
16471: PUSH
16472: LD_INT 1
16474: EQUAL
16475: IFFALSE 16554
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 0 ;
16477: LD_ADDR_EXP 94
16481: PUSH
16482: LD_EXP 94
16486: PUSH
16487: LD_INT 0
16489: ADD
16490: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16491: LD_ADDR_EXP 94
16495: PUSH
16496: LD_EXP 94
16500: PUSH
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 250
16510: ADD
16511: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16512: LD_ADDR_EXP 94
16516: PUSH
16517: LD_EXP 94
16521: PUSH
16522: LD_VAR 0 1
16526: PPUSH
16527: CALL_OW 251
16531: ADD
16532: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16533: LD_ADDR_EXP 94
16537: PUSH
16538: LD_EXP 94
16542: PUSH
16543: LD_VAR 0 1
16547: PPUSH
16548: CALL_OW 254
16552: ADD
16553: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16554: LD_VAR 0 1
16558: PPUSH
16559: CALL_OW 266
16563: PUSH
16564: LD_INT 3
16566: EQUAL
16567: IFFALSE 16646
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 2 ;
16569: LD_ADDR_EXP 94
16573: PUSH
16574: LD_EXP 94
16578: PUSH
16579: LD_INT 2
16581: ADD
16582: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16583: LD_ADDR_EXP 94
16587: PUSH
16588: LD_EXP 94
16592: PUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 250
16602: ADD
16603: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16604: LD_ADDR_EXP 94
16608: PUSH
16609: LD_EXP 94
16613: PUSH
16614: LD_VAR 0 1
16618: PPUSH
16619: CALL_OW 251
16623: ADD
16624: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16625: LD_ADDR_EXP 94
16629: PUSH
16630: LD_EXP 94
16634: PUSH
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 254
16644: ADD
16645: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16646: LD_VAR 0 1
16650: PPUSH
16651: CALL_OW 266
16655: PUSH
16656: LD_INT 5
16658: EQUAL
16659: IFFALSE 16738
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 4 ;
16661: LD_ADDR_EXP 94
16665: PUSH
16666: LD_EXP 94
16670: PUSH
16671: LD_INT 4
16673: ADD
16674: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16675: LD_ADDR_EXP 94
16679: PUSH
16680: LD_EXP 94
16684: PUSH
16685: LD_VAR 0 1
16689: PPUSH
16690: CALL_OW 250
16694: ADD
16695: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16696: LD_ADDR_EXP 94
16700: PUSH
16701: LD_EXP 94
16705: PUSH
16706: LD_VAR 0 1
16710: PPUSH
16711: CALL_OW 251
16715: ADD
16716: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16717: LD_ADDR_EXP 94
16721: PUSH
16722: LD_EXP 94
16726: PUSH
16727: LD_VAR 0 1
16731: PPUSH
16732: CALL_OW 254
16736: ADD
16737: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_building and GetNation ( unit ) = 2 then
16738: LD_VAR 0 1
16742: PPUSH
16743: CALL_OW 255
16747: PUSH
16748: LD_INT 8
16750: EQUAL
16751: PUSH
16752: LD_VAR 0 1
16756: PPUSH
16757: CALL_OW 247
16761: PUSH
16762: LD_INT 3
16764: EQUAL
16765: AND
16766: PUSH
16767: LD_VAR 0 1
16771: PPUSH
16772: CALL_OW 248
16776: PUSH
16777: LD_INT 2
16779: EQUAL
16780: AND
16781: IFFALSE 17473
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16783: LD_VAR 0 1
16787: PPUSH
16788: CALL_OW 266
16792: PUSH
16793: LD_INT 31
16795: EQUAL
16796: PUSH
16797: LD_VAR 0 1
16801: PPUSH
16802: CALL_OW 266
16806: PUSH
16807: LD_INT 32
16809: EQUAL
16810: OR
16811: PUSH
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 266
16821: PUSH
16822: LD_INT 36
16824: EQUAL
16825: OR
16826: PUSH
16827: LD_VAR 0 1
16831: PPUSH
16832: CALL_OW 266
16836: PUSH
16837: LD_INT 0
16839: EQUAL
16840: OR
16841: PUSH
16842: LD_VAR 0 1
16846: PPUSH
16847: CALL_OW 266
16851: PUSH
16852: LD_INT 24
16854: EQUAL
16855: OR
16856: PUSH
16857: LD_VAR 0 1
16861: PPUSH
16862: CALL_OW 266
16866: PUSH
16867: LD_INT 17
16869: EQUAL
16870: OR
16871: PUSH
16872: LD_VAR 0 1
16876: PPUSH
16877: CALL_OW 266
16881: PUSH
16882: LD_INT 25
16884: EQUAL
16885: OR
16886: PUSH
16887: LD_VAR 0 1
16891: PPUSH
16892: CALL_OW 266
16896: PUSH
16897: LD_INT 19
16899: EQUAL
16900: OR
16901: PUSH
16902: LD_VAR 0 1
16906: PPUSH
16907: CALL_OW 266
16911: PUSH
16912: LD_INT 20
16914: EQUAL
16915: OR
16916: PUSH
16917: LD_VAR 0 1
16921: PPUSH
16922: CALL_OW 266
16926: PUSH
16927: LD_INT 18
16929: EQUAL
16930: OR
16931: PUSH
16932: LD_VAR 0 1
16936: PPUSH
16937: CALL_OW 266
16941: PUSH
16942: LD_INT 21
16944: EQUAL
16945: OR
16946: PUSH
16947: LD_VAR 0 1
16951: PPUSH
16952: CALL_OW 266
16956: PUSH
16957: LD_INT 23
16959: EQUAL
16960: OR
16961: PUSH
16962: LD_VAR 0 1
16966: PPUSH
16967: CALL_OW 266
16971: PUSH
16972: LD_INT 16
16974: EQUAL
16975: OR
16976: PUSH
16977: LD_VAR 0 1
16981: PPUSH
16982: CALL_OW 266
16986: PUSH
16987: LD_INT 6
16989: EQUAL
16990: OR
16991: PUSH
16992: LD_VAR 0 1
16996: PPUSH
16997: CALL_OW 266
17001: PUSH
17002: LD_INT 29
17004: EQUAL
17005: OR
17006: PUSH
17007: LD_VAR 0 1
17011: PPUSH
17012: CALL_OW 266
17016: PUSH
17017: LD_INT 26
17019: EQUAL
17020: OR
17021: PUSH
17022: LD_VAR 0 1
17026: PPUSH
17027: CALL_OW 266
17031: PUSH
17032: LD_INT 30
17034: EQUAL
17035: OR
17036: PUSH
17037: LD_VAR 0 1
17041: PPUSH
17042: CALL_OW 266
17046: PUSH
17047: LD_INT 28
17049: EQUAL
17050: OR
17051: PUSH
17052: LD_VAR 0 1
17056: PPUSH
17057: CALL_OW 266
17061: PUSH
17062: LD_INT 27
17064: EQUAL
17065: OR
17066: PUSH
17067: LD_VAR 0 1
17071: PPUSH
17072: CALL_OW 266
17076: PUSH
17077: LD_INT 33
17079: EQUAL
17080: OR
17081: PUSH
17082: LD_VAR 0 1
17086: PPUSH
17087: CALL_OW 266
17091: PUSH
17092: LD_INT 2
17094: EQUAL
17095: OR
17096: PUSH
17097: LD_VAR 0 1
17101: PPUSH
17102: CALL_OW 266
17106: PUSH
17107: LD_INT 4
17109: EQUAL
17110: OR
17111: IFFALSE 17197
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ GetBType ( unit ) ;
17113: LD_ADDR_EXP 93
17117: PUSH
17118: LD_EXP 93
17122: PUSH
17123: LD_VAR 0 1
17127: PPUSH
17128: CALL_OW 266
17132: ADD
17133: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17134: LD_ADDR_EXP 93
17138: PUSH
17139: LD_EXP 93
17143: PUSH
17144: LD_VAR 0 1
17148: PPUSH
17149: CALL_OW 250
17153: ADD
17154: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17155: LD_ADDR_EXP 93
17159: PUSH
17160: LD_EXP 93
17164: PUSH
17165: LD_VAR 0 1
17169: PPUSH
17170: CALL_OW 251
17174: ADD
17175: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17176: LD_ADDR_EXP 93
17180: PUSH
17181: LD_EXP 93
17185: PUSH
17186: LD_VAR 0 1
17190: PPUSH
17191: CALL_OW 254
17195: ADD
17196: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17197: LD_VAR 0 1
17201: PPUSH
17202: CALL_OW 266
17206: PUSH
17207: LD_INT 1
17209: EQUAL
17210: IFFALSE 17289
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 0 ;
17212: LD_ADDR_EXP 93
17216: PUSH
17217: LD_EXP 93
17221: PUSH
17222: LD_INT 0
17224: ADD
17225: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17226: LD_ADDR_EXP 93
17230: PUSH
17231: LD_EXP 93
17235: PUSH
17236: LD_VAR 0 1
17240: PPUSH
17241: CALL_OW 250
17245: ADD
17246: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17247: LD_ADDR_EXP 93
17251: PUSH
17252: LD_EXP 93
17256: PUSH
17257: LD_VAR 0 1
17261: PPUSH
17262: CALL_OW 251
17266: ADD
17267: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17268: LD_ADDR_EXP 93
17272: PUSH
17273: LD_EXP 93
17277: PUSH
17278: LD_VAR 0 1
17282: PPUSH
17283: CALL_OW 254
17287: ADD
17288: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17289: LD_VAR 0 1
17293: PPUSH
17294: CALL_OW 266
17298: PUSH
17299: LD_INT 3
17301: EQUAL
17302: IFFALSE 17381
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 2 ;
17304: LD_ADDR_EXP 93
17308: PUSH
17309: LD_EXP 93
17313: PUSH
17314: LD_INT 2
17316: ADD
17317: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17318: LD_ADDR_EXP 93
17322: PUSH
17323: LD_EXP 93
17327: PUSH
17328: LD_VAR 0 1
17332: PPUSH
17333: CALL_OW 250
17337: ADD
17338: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17339: LD_ADDR_EXP 93
17343: PUSH
17344: LD_EXP 93
17348: PUSH
17349: LD_VAR 0 1
17353: PPUSH
17354: CALL_OW 251
17358: ADD
17359: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17360: LD_ADDR_EXP 93
17364: PUSH
17365: LD_EXP 93
17369: PUSH
17370: LD_VAR 0 1
17374: PPUSH
17375: CALL_OW 254
17379: ADD
17380: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17381: LD_VAR 0 1
17385: PPUSH
17386: CALL_OW 266
17390: PUSH
17391: LD_INT 5
17393: EQUAL
17394: IFFALSE 17473
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 4 ;
17396: LD_ADDR_EXP 93
17400: PUSH
17401: LD_EXP 93
17405: PUSH
17406: LD_INT 4
17408: ADD
17409: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17410: LD_ADDR_EXP 93
17414: PUSH
17415: LD_EXP 93
17419: PUSH
17420: LD_VAR 0 1
17424: PPUSH
17425: CALL_OW 250
17429: ADD
17430: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17431: LD_ADDR_EXP 93
17435: PUSH
17436: LD_EXP 93
17440: PUSH
17441: LD_VAR 0 1
17445: PPUSH
17446: CALL_OW 251
17450: ADD
17451: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17452: LD_ADDR_EXP 93
17456: PUSH
17457: LD_EXP 93
17461: PUSH
17462: LD_VAR 0 1
17466: PPUSH
17467: CALL_OW 254
17471: ADD
17472: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_building then
17473: LD_VAR 0 1
17477: PPUSH
17478: CALL_OW 255
17482: PUSH
17483: LD_INT 7
17485: EQUAL
17486: PUSH
17487: LD_VAR 0 1
17491: PPUSH
17492: CALL_OW 247
17496: PUSH
17497: LD_INT 3
17499: EQUAL
17500: AND
17501: IFFALSE 18193
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17503: LD_VAR 0 1
17507: PPUSH
17508: CALL_OW 266
17512: PUSH
17513: LD_INT 31
17515: EQUAL
17516: PUSH
17517: LD_VAR 0 1
17521: PPUSH
17522: CALL_OW 266
17526: PUSH
17527: LD_INT 32
17529: EQUAL
17530: OR
17531: PUSH
17532: LD_VAR 0 1
17536: PPUSH
17537: CALL_OW 266
17541: PUSH
17542: LD_INT 36
17544: EQUAL
17545: OR
17546: PUSH
17547: LD_VAR 0 1
17551: PPUSH
17552: CALL_OW 266
17556: PUSH
17557: LD_INT 0
17559: EQUAL
17560: OR
17561: PUSH
17562: LD_VAR 0 1
17566: PPUSH
17567: CALL_OW 266
17571: PUSH
17572: LD_INT 24
17574: EQUAL
17575: OR
17576: PUSH
17577: LD_VAR 0 1
17581: PPUSH
17582: CALL_OW 266
17586: PUSH
17587: LD_INT 17
17589: EQUAL
17590: OR
17591: PUSH
17592: LD_VAR 0 1
17596: PPUSH
17597: CALL_OW 266
17601: PUSH
17602: LD_INT 25
17604: EQUAL
17605: OR
17606: PUSH
17607: LD_VAR 0 1
17611: PPUSH
17612: CALL_OW 266
17616: PUSH
17617: LD_INT 19
17619: EQUAL
17620: OR
17621: PUSH
17622: LD_VAR 0 1
17626: PPUSH
17627: CALL_OW 266
17631: PUSH
17632: LD_INT 20
17634: EQUAL
17635: OR
17636: PUSH
17637: LD_VAR 0 1
17641: PPUSH
17642: CALL_OW 266
17646: PUSH
17647: LD_INT 18
17649: EQUAL
17650: OR
17651: PUSH
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 266
17661: PUSH
17662: LD_INT 21
17664: EQUAL
17665: OR
17666: PUSH
17667: LD_VAR 0 1
17671: PPUSH
17672: CALL_OW 266
17676: PUSH
17677: LD_INT 23
17679: EQUAL
17680: OR
17681: PUSH
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 266
17691: PUSH
17692: LD_INT 16
17694: EQUAL
17695: OR
17696: PUSH
17697: LD_VAR 0 1
17701: PPUSH
17702: CALL_OW 266
17706: PUSH
17707: LD_INT 6
17709: EQUAL
17710: OR
17711: PUSH
17712: LD_VAR 0 1
17716: PPUSH
17717: CALL_OW 266
17721: PUSH
17722: LD_INT 29
17724: EQUAL
17725: OR
17726: PUSH
17727: LD_VAR 0 1
17731: PPUSH
17732: CALL_OW 266
17736: PUSH
17737: LD_INT 26
17739: EQUAL
17740: OR
17741: PUSH
17742: LD_VAR 0 1
17746: PPUSH
17747: CALL_OW 266
17751: PUSH
17752: LD_INT 30
17754: EQUAL
17755: OR
17756: PUSH
17757: LD_VAR 0 1
17761: PPUSH
17762: CALL_OW 266
17766: PUSH
17767: LD_INT 28
17769: EQUAL
17770: OR
17771: PUSH
17772: LD_VAR 0 1
17776: PPUSH
17777: CALL_OW 266
17781: PUSH
17782: LD_INT 27
17784: EQUAL
17785: OR
17786: PUSH
17787: LD_VAR 0 1
17791: PPUSH
17792: CALL_OW 266
17796: PUSH
17797: LD_INT 33
17799: EQUAL
17800: OR
17801: PUSH
17802: LD_VAR 0 1
17806: PPUSH
17807: CALL_OW 266
17811: PUSH
17812: LD_INT 2
17814: EQUAL
17815: OR
17816: PUSH
17817: LD_VAR 0 1
17821: PPUSH
17822: CALL_OW 266
17826: PUSH
17827: LD_INT 4
17829: EQUAL
17830: OR
17831: IFFALSE 17917
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetBType ( unit ) ;
17833: LD_ADDR_EXP 95
17837: PUSH
17838: LD_EXP 95
17842: PUSH
17843: LD_VAR 0 1
17847: PPUSH
17848: CALL_OW 266
17852: ADD
17853: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17854: LD_ADDR_EXP 95
17858: PUSH
17859: LD_EXP 95
17863: PUSH
17864: LD_VAR 0 1
17868: PPUSH
17869: CALL_OW 250
17873: ADD
17874: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17875: LD_ADDR_EXP 95
17879: PUSH
17880: LD_EXP 95
17884: PUSH
17885: LD_VAR 0 1
17889: PPUSH
17890: CALL_OW 251
17894: ADD
17895: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17896: LD_ADDR_EXP 95
17900: PUSH
17901: LD_EXP 95
17905: PUSH
17906: LD_VAR 0 1
17910: PPUSH
17911: CALL_OW 254
17915: ADD
17916: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17917: LD_VAR 0 1
17921: PPUSH
17922: CALL_OW 266
17926: PUSH
17927: LD_INT 1
17929: EQUAL
17930: IFFALSE 18009
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 0 ;
17932: LD_ADDR_EXP 95
17936: PUSH
17937: LD_EXP 95
17941: PUSH
17942: LD_INT 0
17944: ADD
17945: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17946: LD_ADDR_EXP 95
17950: PUSH
17951: LD_EXP 95
17955: PUSH
17956: LD_VAR 0 1
17960: PPUSH
17961: CALL_OW 250
17965: ADD
17966: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17967: LD_ADDR_EXP 95
17971: PUSH
17972: LD_EXP 95
17976: PUSH
17977: LD_VAR 0 1
17981: PPUSH
17982: CALL_OW 251
17986: ADD
17987: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17988: LD_ADDR_EXP 95
17992: PUSH
17993: LD_EXP 95
17997: PUSH
17998: LD_VAR 0 1
18002: PPUSH
18003: CALL_OW 254
18007: ADD
18008: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18009: LD_VAR 0 1
18013: PPUSH
18014: CALL_OW 266
18018: PUSH
18019: LD_INT 3
18021: EQUAL
18022: IFFALSE 18101
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 2 ;
18024: LD_ADDR_EXP 95
18028: PUSH
18029: LD_EXP 95
18033: PUSH
18034: LD_INT 2
18036: ADD
18037: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18038: LD_ADDR_EXP 95
18042: PUSH
18043: LD_EXP 95
18047: PUSH
18048: LD_VAR 0 1
18052: PPUSH
18053: CALL_OW 250
18057: ADD
18058: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18059: LD_ADDR_EXP 95
18063: PUSH
18064: LD_EXP 95
18068: PUSH
18069: LD_VAR 0 1
18073: PPUSH
18074: CALL_OW 251
18078: ADD
18079: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18080: LD_ADDR_EXP 95
18084: PUSH
18085: LD_EXP 95
18089: PUSH
18090: LD_VAR 0 1
18094: PPUSH
18095: CALL_OW 254
18099: ADD
18100: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18101: LD_VAR 0 1
18105: PPUSH
18106: CALL_OW 266
18110: PUSH
18111: LD_INT 5
18113: EQUAL
18114: IFFALSE 18193
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 4 ;
18116: LD_ADDR_EXP 95
18120: PUSH
18121: LD_EXP 95
18125: PUSH
18126: LD_INT 4
18128: ADD
18129: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18130: LD_ADDR_EXP 95
18134: PUSH
18135: LD_EXP 95
18139: PUSH
18140: LD_VAR 0 1
18144: PPUSH
18145: CALL_OW 250
18149: ADD
18150: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18151: LD_ADDR_EXP 95
18155: PUSH
18156: LD_EXP 95
18160: PUSH
18161: LD_VAR 0 1
18165: PPUSH
18166: CALL_OW 251
18170: ADD
18171: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18172: LD_ADDR_EXP 95
18176: PUSH
18177: LD_EXP 95
18181: PUSH
18182: LD_VAR 0 1
18186: PPUSH
18187: CALL_OW 254
18191: ADD
18192: ST_TO_ADDR
// end ; end ; end ;
18193: PPOPN 2
18195: END
// on UnitKamikazed ( unit ) do var i ;
18196: LD_INT 0
18198: PPUSH
// begin if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
18199: LD_VAR 0 1
18203: PPUSH
18204: CALL_OW 255
18208: PUSH
18209: LD_INT 8
18211: EQUAL
18212: PUSH
18213: LD_VAR 0 1
18217: PPUSH
18218: CALL_OW 247
18222: PUSH
18223: LD_INT 2
18225: EQUAL
18226: AND
18227: PUSH
18228: LD_VAR 0 1
18232: PPUSH
18233: CALL_OW 248
18237: PUSH
18238: LD_INT 2
18240: EQUAL
18241: AND
18242: IFFALSE 18292
// begin for i in legionVehicles do
18244: LD_ADDR_VAR 0 2
18248: PUSH
18249: LD_EXP 55
18253: PUSH
18254: FOR_IN
18255: IFFALSE 18290
// if i = unit then
18257: LD_VAR 0 2
18261: PUSH
18262: LD_VAR 0 1
18266: EQUAL
18267: IFFALSE 18288
// legionVehicles = legionVehicles diff [ unit ] ;
18269: LD_ADDR_EXP 55
18273: PUSH
18274: LD_EXP 55
18278: PUSH
18279: LD_VAR 0 1
18283: PUSH
18284: EMPTY
18285: LIST
18286: DIFF
18287: ST_TO_ADDR
18288: GO 18254
18290: POP
18291: POP
// end ; end ;
18292: PPOPN 2
18294: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , SiberiteMainDeposit ) then
18295: LD_VAR 0 2
18299: PPUSH
18300: LD_VAR 0 3
18304: PPUSH
18305: LD_INT 29
18307: PPUSH
18308: CALL_OW 309
18312: IFFALSE 18372
// begin if GetSide ( unit ) = 1 then
18314: LD_VAR 0 1
18318: PPUSH
18319: CALL_OW 255
18323: PUSH
18324: LD_INT 1
18326: EQUAL
18327: IFFALSE 18343
// begin wait ( 0 0$6 ) ;
18329: LD_INT 210
18331: PPUSH
18332: CALL_OW 67
// YouLost ( Motherlode2 ) ;
18336: LD_STRING Motherlode2
18338: PPUSH
18339: CALL_OW 104
// end ; if GetSide ( unit ) = 8 then
18343: LD_VAR 0 1
18347: PPUSH
18348: CALL_OW 255
18352: PUSH
18353: LD_INT 8
18355: EQUAL
18356: IFFALSE 18372
// begin wait ( 0 0$6 ) ;
18358: LD_INT 210
18360: PPUSH
18361: CALL_OW 67
// YouLost ( Motherlode1 ) ;
18365: LD_STRING Motherlode1
18367: PPUSH
18368: CALL_OW 104
// end ; end ; end ;
18372: PPOPN 3
18374: END
// on SibDepositContaminated ( unit , x , y ) do begin if GetSide ( unit ) = 2 then
18375: LD_VAR 0 1
18379: PPUSH
18380: CALL_OW 255
18384: PUSH
18385: LD_INT 2
18387: EQUAL
18388: IFFALSE 18397
// YouLost ( Motherlode3 ) ;
18390: LD_STRING Motherlode3
18392: PPUSH
18393: CALL_OW 104
// end ; end_of_file
18397: PPOPN 3
18399: END
// every 3 3$0 do
18400: GO 18402
18402: DISABLE
// begin enable ;
18403: ENABLE
// LegionTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
18404: LD_ADDR_EXP 87
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: LD_INT 3
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 1
18421: PPUSH
18422: LD_INT 2
18424: PPUSH
18425: CALL_OW 12
18429: ARRAY
18430: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
18431: LD_INT 22
18433: PUSH
18434: LD_INT 8
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 21
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 69
18459: PUSH
18460: LD_INT 1
18462: GREATER
18463: IFFALSE 18494
// RussianTarget = [ 1 , 8 ] [ Rand ( 1 , 2 ) ] else
18465: LD_ADDR_EXP 89
18469: PUSH
18470: LD_INT 1
18472: PUSH
18473: LD_INT 8
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 1
18482: PPUSH
18483: LD_INT 2
18485: PPUSH
18486: CALL_OW 12
18490: ARRAY
18491: ST_TO_ADDR
18492: GO 18502
// RussianTarget = 1 ;
18494: LD_ADDR_EXP 89
18498: PUSH
18499: LD_INT 1
18501: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
18502: LD_INT 22
18504: PUSH
18505: LD_INT 8
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 21
18514: PUSH
18515: LD_INT 1
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PPUSH
18526: CALL_OW 69
18530: PUSH
18531: LD_INT 1
18533: GREATER
18534: IFFALSE 18569
// AllianceTarget = [ 1 , 3 , 8 ] [ Rand ( 1 , 3 ) ] else
18536: LD_ADDR_EXP 88
18540: PUSH
18541: LD_INT 1
18543: PUSH
18544: LD_INT 3
18546: PUSH
18547: LD_INT 8
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 1
18557: PPUSH
18558: LD_INT 3
18560: PPUSH
18561: CALL_OW 12
18565: ARRAY
18566: ST_TO_ADDR
18567: GO 18596
// AllianceTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
18569: LD_ADDR_EXP 88
18573: PUSH
18574: LD_INT 1
18576: PUSH
18577: LD_INT 3
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 1
18586: PPUSH
18587: LD_INT 2
18589: PPUSH
18590: CALL_OW 12
18594: ARRAY
18595: ST_TO_ADDR
// end ;
18596: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople ;
18597: LD_EXP 68
18601: PUSH
18602: LD_INT 1
18604: EQUAL
18605: IFFALSE 19182
18607: GO 18609
18609: DISABLE
18610: LD_INT 0
18612: PPUSH
18613: PPUSH
// begin for i = 1 to 4 do
18614: LD_ADDR_VAR 0 1
18618: PUSH
18619: DOUBLE
18620: LD_INT 1
18622: DEC
18623: ST_TO_ADDR
18624: LD_INT 4
18626: PUSH
18627: FOR_TO
18628: IFFALSE 18668
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
18630: LD_EXP 66
18634: PUSH
18635: LD_VAR 0 1
18639: ARRAY
18640: PPUSH
18641: LD_INT 85
18643: PPUSH
18644: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
18648: LD_EXP 66
18652: PUSH
18653: LD_VAR 0 1
18657: ARRAY
18658: PPUSH
18659: LD_INT 3
18661: PPUSH
18662: CALL_OW 183
// end ;
18666: GO 18627
18668: POP
18669: POP
// wait ( 0 0$1 ) ;
18670: LD_INT 35
18672: PPUSH
18673: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
18677: LD_ADDR_VAR 0 2
18681: PUSH
18682: LD_INT 22
18684: PUSH
18685: LD_INT 4
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 21
18694: PUSH
18695: LD_INT 1
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 56
18704: PUSH
18705: EMPTY
18706: LIST
18707: PUSH
18708: LD_INT 3
18710: PUSH
18711: LD_INT 60
18713: PUSH
18714: EMPTY
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: PPUSH
18727: CALL_OW 69
18731: PUSH
18732: LD_EXP 17
18736: PUSH
18737: EMPTY
18738: LIST
18739: DIFF
18740: ST_TO_ADDR
// ComEnterUnit ( powellPeople [ 1 ] , PowellCargo ) ;
18741: LD_VAR 0 2
18745: PUSH
18746: LD_INT 1
18748: ARRAY
18749: PPUSH
18750: LD_INT 235
18752: PPUSH
18753: CALL_OW 120
// SetClass ( powellPeople [ 2 ] , 2 ) ;
18757: LD_VAR 0 2
18761: PUSH
18762: LD_INT 2
18764: ARRAY
18765: PPUSH
18766: LD_INT 2
18768: PPUSH
18769: CALL_OW 336
// SetClass ( powellPeople [ 3 ] , 2 ) ;
18773: LD_VAR 0 2
18777: PUSH
18778: LD_INT 3
18780: ARRAY
18781: PPUSH
18782: LD_INT 2
18784: PPUSH
18785: CALL_OW 336
// SetResourceVisibility ( 30 , 49 , 4 ) ;
18789: LD_INT 30
18791: PPUSH
18792: LD_INT 49
18794: PPUSH
18795: LD_INT 4
18797: PPUSH
18798: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
18802: LD_INT 91
18804: PPUSH
18805: LD_INT 10
18807: PPUSH
18808: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
18812: LD_INT 91
18814: PPUSH
18815: LD_INT 11
18817: PPUSH
18818: CALL_OW 207
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_mine , 30 , 49 , 1 ) ;
18822: LD_INT 22
18824: PUSH
18825: LD_INT 4
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 25
18834: PUSH
18835: LD_INT 2
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PPUSH
18846: CALL_OW 69
18850: PPUSH
18851: LD_INT 30
18853: PPUSH
18854: LD_INT 30
18856: PPUSH
18857: LD_INT 49
18859: PPUSH
18860: LD_INT 1
18862: PPUSH
18863: CALL_OW 145
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 55 , 56 , 4 ) ;
18867: LD_INT 22
18869: PUSH
18870: LD_INT 4
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 25
18879: PUSH
18880: LD_INT 2
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PPUSH
18891: CALL_OW 69
18895: PPUSH
18896: LD_INT 32
18898: PPUSH
18899: LD_INT 55
18901: PPUSH
18902: LD_INT 56
18904: PPUSH
18905: LD_INT 4
18907: PPUSH
18908: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 63 , 71 , 4 ) ;
18912: LD_INT 22
18914: PUSH
18915: LD_INT 4
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 25
18924: PUSH
18925: LD_INT 2
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PPUSH
18936: CALL_OW 69
18940: PPUSH
18941: LD_INT 32
18943: PPUSH
18944: LD_INT 63
18946: PPUSH
18947: LD_INT 71
18949: PPUSH
18950: LD_INT 4
18952: PPUSH
18953: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_power , 40 , 72 , 4 ) ;
18957: LD_INT 22
18959: PUSH
18960: LD_INT 4
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 25
18969: PUSH
18970: LD_INT 2
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PPUSH
18981: CALL_OW 69
18985: PPUSH
18986: LD_INT 28
18988: PPUSH
18989: LD_INT 40
18991: PPUSH
18992: LD_INT 72
18994: PPUSH
18995: LD_INT 4
18997: PPUSH
18998: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_solar_power , 45 , 73 , 4 ) ;
19002: LD_INT 22
19004: PUSH
19005: LD_INT 4
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 25
19014: PUSH
19015: LD_INT 2
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PPUSH
19026: CALL_OW 69
19030: PPUSH
19031: LD_INT 27
19033: PPUSH
19034: LD_INT 45
19036: PPUSH
19037: LD_INT 73
19039: PPUSH
19040: LD_INT 4
19042: PPUSH
19043: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_rocket , 37 , 50 , 2 ) ;
19047: LD_INT 22
19049: PUSH
19050: LD_INT 4
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 25
19059: PUSH
19060: LD_INT 2
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PPUSH
19071: CALL_OW 69
19075: PPUSH
19076: LD_INT 18
19078: PPUSH
19079: LD_INT 37
19081: PPUSH
19082: LD_INT 50
19084: PPUSH
19085: LD_INT 2
19087: PPUSH
19088: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_gun , 41 , 51 , 3 ) ;
19092: LD_INT 22
19094: PUSH
19095: LD_INT 4
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 25
19104: PUSH
19105: LD_INT 2
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PPUSH
19116: CALL_OW 69
19120: PPUSH
19121: LD_INT 17
19123: PPUSH
19124: LD_INT 41
19126: PPUSH
19127: LD_INT 51
19129: PPUSH
19130: LD_INT 3
19132: PPUSH
19133: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_siberium , 38 , 54 , 1 ) ;
19137: LD_INT 22
19139: PUSH
19140: LD_INT 4
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 25
19149: PUSH
19150: LD_INT 2
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PPUSH
19161: CALL_OW 69
19165: PPUSH
19166: LD_INT 21
19168: PPUSH
19169: LD_INT 38
19171: PPUSH
19172: LD_INT 54
19174: PPUSH
19175: LD_INT 1
19177: PPUSH
19178: CALL_OW 205
// end ;
19182: PPOPN 2
19184: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) and powellUnloadCargo = 1 do
19185: LD_INT 235
19187: PPUSH
19188: LD_INT 10
19190: PPUSH
19191: CALL_OW 308
19195: PUSH
19196: LD_EXP 70
19200: PUSH
19201: LD_INT 1
19203: EQUAL
19204: AND
19205: IFFALSE 19229
19207: GO 19209
19209: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
19210: LD_INT 235
19212: PPUSH
19213: CALL_OW 313
19217: PPUSH
19218: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
19222: LD_INT 84
19224: PPUSH
19225: CALL_OW 146
// end ;
19229: END
// every 0 0$1 trigger legionAI = 1 do
19230: LD_EXP 84
19234: PUSH
19235: LD_INT 1
19237: EQUAL
19238: IFFALSE 19301
19240: GO 19242
19242: DISABLE
// begin enable ;
19243: ENABLE
// RepairAndRebuildBase ( 8 , ArDep2 , LegionBaseArea , legionDestroyedBuilds ) ;
19244: LD_INT 8
19246: PPUSH
19247: LD_INT 99
19249: PPUSH
19250: LD_INT 11
19252: PPUSH
19253: LD_EXP 93
19257: PPUSH
19258: CALL 9615 0 4
// HealUnitInBase ( 8 , LegionHealArea , LegionBaseArea , [ ArLab1 ] ) ;
19262: LD_INT 8
19264: PPUSH
19265: LD_INT 20
19267: PPUSH
19268: LD_INT 11
19270: PPUSH
19271: LD_INT 252
19273: PUSH
19274: EMPTY
19275: LIST
19276: PPUSH
19277: CALL 10024 0 4
// AttackNearBuildings ( 8 , 1 ) ;
19281: LD_INT 8
19283: PPUSH
19284: LD_INT 1
19286: PPUSH
19287: CALL 11433 0 2
// EnterBunkerOrBarrack ( 8 , LegionBaseArea ) ;
19291: LD_INT 8
19293: PPUSH
19294: LD_INT 11
19296: PPUSH
19297: CALL 11005 0 2
// end ;
19301: END
// every 3 3$0 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ ] and IsOk ( ArFact ) and GetSide ( ArFact ) = 8 do
19302: LD_EXP 84
19306: PUSH
19307: LD_INT 1
19309: EQUAL
19310: PUSH
19311: LD_EXP 101
19315: PUSH
19316: LD_INT 1
19318: GREATEREQUAL
19319: AND
19320: PUSH
19321: LD_EXP 55
19325: PUSH
19326: EMPTY
19327: EQUAL
19328: AND
19329: PUSH
19330: LD_INT 117
19332: PPUSH
19333: CALL_OW 302
19337: AND
19338: PUSH
19339: LD_INT 117
19341: PPUSH
19342: CALL_OW 255
19346: PUSH
19347: LD_INT 8
19349: EQUAL
19350: AND
19351: IFFALSE 19414
19353: GO 19355
19355: DISABLE
// begin enable ;
19356: ENABLE
// BuildingVehicle ( 8 , ArFact , [ 5 , 6 , 7 ] [ Difficulty ] , [ 27 , 28 , 25 , 29 ] , 3 , 2 , 14 ) ;
19357: LD_INT 8
19359: PPUSH
19360: LD_INT 117
19362: PPUSH
19363: LD_INT 5
19365: PUSH
19366: LD_INT 6
19368: PUSH
19369: LD_INT 7
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: LIST
19376: PUSH
19377: LD_OWVAR 67
19381: ARRAY
19382: PPUSH
19383: LD_INT 27
19385: PUSH
19386: LD_INT 28
19388: PUSH
19389: LD_INT 25
19391: PUSH
19392: LD_INT 29
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: PPUSH
19401: LD_INT 3
19403: PPUSH
19404: LD_INT 2
19406: PPUSH
19407: LD_INT 14
19409: PPUSH
19410: CALL 11663 0 7
// end ;
19414: END
// every 0 0$1 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ 5 , 6 , 7 ] [ Difficulty ] do
19415: LD_EXP 84
19419: PUSH
19420: LD_INT 1
19422: EQUAL
19423: PUSH
19424: LD_EXP 101
19428: PUSH
19429: LD_INT 1
19431: GREATEREQUAL
19432: AND
19433: PUSH
19434: LD_EXP 55
19438: PUSH
19439: LD_INT 5
19441: PUSH
19442: LD_INT 6
19444: PUSH
19445: LD_INT 7
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: LIST
19452: PUSH
19453: LD_OWVAR 67
19457: ARRAY
19458: EQUAL
19459: AND
19460: IFFALSE 19478
19462: GO 19464
19464: DISABLE
// begin enable ;
19465: ENABLE
// AttackVehicles ( LegionTarget , 1 ) ;
19466: LD_EXP 87
19470: PPUSH
19471: LD_INT 1
19473: PPUSH
19474: CALL 11737 0 2
// end ;
19478: END
// every 0 0$1 do
19479: GO 19481
19481: DISABLE
// begin enable ;
19482: ENABLE
// TimeLapsersAI ( 6 , 1 ) ;
19483: LD_INT 6
19485: PPUSH
19486: LD_INT 1
19488: PPUSH
19489: CALL 12672 0 2
// end ;
19493: END
// every 0 0$1 trigger RussianAI = 1 do
19494: LD_EXP 86
19498: PUSH
19499: LD_INT 1
19501: EQUAL
19502: IFFALSE 19596
19504: GO 19506
19506: DISABLE
// begin enable ;
19507: ENABLE
// RepairAndRebuildBase ( 3 , RuDep1 , RussianBaseArea , russianDestroyedBuilds ) ;
19508: LD_INT 3
19510: PPUSH
19511: LD_INT 26
19513: PPUSH
19514: LD_INT 21
19516: PPUSH
19517: LD_EXP 94
19521: PPUSH
19522: CALL 9615 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBaseArea , [ RusLab1 , RusLab2 ] ) ;
19526: LD_INT 3
19528: PPUSH
19529: LD_INT 22
19531: PPUSH
19532: LD_INT 21
19534: PPUSH
19535: LD_INT 2
19537: PUSH
19538: LD_INT 1
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PPUSH
19545: CALL 10024 0 4
// AttackNearBuildings ( 3 , 1 ) ;
19549: LD_INT 3
19551: PPUSH
19552: LD_INT 1
19554: PPUSH
19555: CALL 11433 0 2
// TimeLapsersAI ( 3 , RussianTarget ) ;
19559: LD_INT 3
19561: PPUSH
19562: LD_EXP 89
19566: PPUSH
19567: CALL 12672 0 2
// EnterBunkerOrBarrack ( 3 , RussianBaseArea ) ;
19571: LD_INT 3
19573: PPUSH
19574: LD_INT 21
19576: PPUSH
19577: CALL 11005 0 2
// CraneRepairBuild ( 3 , RussianBaseArea , russianDestroyedBuilds ) ;
19581: LD_INT 3
19583: PPUSH
19584: LD_INT 21
19586: PPUSH
19587: LD_EXP 94
19591: PPUSH
19592: CALL 10750 0 3
// end ;
19596: END
// every 3 3$0 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ ] and IsOk ( RusFact2 ) and GetSide ( RusFact2 ) = 3 and IsOk ( RusFact1 ) and GetSide ( RusFact1 ) = 3 do
19597: LD_EXP 86
19601: PUSH
19602: LD_INT 1
19604: EQUAL
19605: PUSH
19606: LD_EXP 101
19610: PUSH
19611: LD_INT 3
19613: GREATEREQUAL
19614: AND
19615: PUSH
19616: LD_EXP 61
19620: PUSH
19621: EMPTY
19622: EQUAL
19623: AND
19624: PUSH
19625: LD_INT 10
19627: PPUSH
19628: CALL_OW 302
19632: AND
19633: PUSH
19634: LD_INT 10
19636: PPUSH
19637: CALL_OW 255
19641: PUSH
19642: LD_INT 3
19644: EQUAL
19645: AND
19646: PUSH
19647: LD_INT 4
19649: PPUSH
19650: CALL_OW 302
19654: AND
19655: PUSH
19656: LD_INT 4
19658: PPUSH
19659: CALL_OW 255
19663: PUSH
19664: LD_INT 3
19666: EQUAL
19667: AND
19668: IFFALSE 19788
19670: GO 19672
19672: DISABLE
// begin enable ;
19673: ENABLE
// BuildingVehicle ( 3 , RusFact1 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19674: LD_INT 3
19676: PPUSH
19677: LD_INT 4
19679: PPUSH
19680: LD_INT 4
19682: PUSH
19683: LD_INT 5
19685: PUSH
19686: LD_INT 6
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: LIST
19693: PUSH
19694: LD_OWVAR 67
19698: ARRAY
19699: PPUSH
19700: LD_INT 45
19702: PUSH
19703: LD_INT 46
19705: PUSH
19706: LD_INT 47
19708: PUSH
19709: LD_INT 49
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: PPUSH
19718: LD_INT 3
19720: PPUSH
19721: LD_INT 3
19723: PPUSH
19724: LD_INT 24
19726: PPUSH
19727: CALL 11663 0 7
// BuildingVehicle ( 3 , RusFact2 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19731: LD_INT 3
19733: PPUSH
19734: LD_INT 10
19736: PPUSH
19737: LD_INT 4
19739: PUSH
19740: LD_INT 5
19742: PUSH
19743: LD_INT 6
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: LIST
19750: PUSH
19751: LD_OWVAR 67
19755: ARRAY
19756: PPUSH
19757: LD_INT 45
19759: PUSH
19760: LD_INT 46
19762: PUSH
19763: LD_INT 47
19765: PUSH
19766: LD_INT 49
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: PPUSH
19775: LD_INT 3
19777: PPUSH
19778: LD_INT 3
19780: PPUSH
19781: LD_INT 24
19783: PPUSH
19784: CALL 11663 0 7
// end ;
19788: END
// every 0 0$1 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ 8 , 10 , 12 ] [ Difficulty ] do
19789: LD_EXP 86
19793: PUSH
19794: LD_INT 1
19796: EQUAL
19797: PUSH
19798: LD_EXP 101
19802: PUSH
19803: LD_INT 3
19805: GREATEREQUAL
19806: AND
19807: PUSH
19808: LD_EXP 61
19812: PUSH
19813: LD_INT 8
19815: PUSH
19816: LD_INT 10
19818: PUSH
19819: LD_INT 12
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: LIST
19826: PUSH
19827: LD_OWVAR 67
19831: ARRAY
19832: EQUAL
19833: AND
19834: IFFALSE 19946
19836: GO 19838
19838: DISABLE
// begin enable ;
19839: ENABLE
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 48 ] ] , [ f_not , [ f_hastask ] ] ] ) , [ rutp1 , rutp2 ] [ Rand ( 1 , 2 ) ] ) ;
19840: LD_INT 22
19842: PUSH
19843: LD_INT 3
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 21
19852: PUSH
19853: LD_INT 2
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 3
19862: PUSH
19863: LD_INT 34
19865: PUSH
19866: LD_INT 48
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 3
19879: PUSH
19880: LD_INT 60
19882: PUSH
19883: EMPTY
19884: LIST
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: PPUSH
19896: CALL_OW 69
19900: PPUSH
19901: LD_INT 24
19903: PUSH
19904: LD_INT 25
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 1
19913: PPUSH
19914: LD_INT 2
19916: PPUSH
19917: CALL_OW 12
19921: ARRAY
19922: PPUSH
19923: CALL_OW 120
// wait ( 0 0$20 ) ;
19927: LD_INT 700
19929: PPUSH
19930: CALL_OW 67
// AttackVehicles ( RussianTarget , 2 ) ;
19934: LD_EXP 89
19938: PPUSH
19939: LD_INT 2
19941: PPUSH
19942: CALL 11737 0 2
// end ;
19946: END
// every 0 0$1 trigger AllianceAI = 1 do
19947: LD_EXP 85
19951: PUSH
19952: LD_INT 1
19954: EQUAL
19955: IFFALSE 20038
19957: GO 19959
19959: DISABLE
// begin enable ;
19960: ENABLE
// RepairAndRebuildBase ( 7 , AllDep , AllianceBaseArea , allianceDestroyedBuilds ) ;
19961: LD_INT 7
19963: PPUSH
19964: LD_INT 45
19966: PPUSH
19967: LD_INT 23
19969: PPUSH
19970: LD_EXP 95
19974: PPUSH
19975: CALL 9615 0 4
// HealUnitInBase ( 7 , AllianceHealArea , AllianceBaseArea , [ AllLabA , AllLabR1 , AllLabR2 ] ) ;
19979: LD_INT 7
19981: PPUSH
19982: LD_INT 24
19984: PPUSH
19985: LD_INT 23
19987: PPUSH
19988: LD_INT 46
19990: PUSH
19991: LD_INT 39
19993: PUSH
19994: LD_INT 133
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: LIST
20001: PPUSH
20002: CALL 10024 0 4
// AttackNearBuildings ( 7 , 1 ) ;
20006: LD_INT 7
20008: PPUSH
20009: LD_INT 1
20011: PPUSH
20012: CALL 11433 0 2
// TimeLapsersAI ( 7 , AllianceTarget ) ;
20016: LD_INT 7
20018: PPUSH
20019: LD_EXP 88
20023: PPUSH
20024: CALL 12672 0 2
// EnterBunkerOrBarrack ( 7 , AllianceBaseArea ) ;
20028: LD_INT 7
20030: PPUSH
20031: LD_INT 23
20033: PPUSH
20034: CALL 11005 0 2
// end ;
20038: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ ] and IsOk ( Allfab1 ) and GetSide ( Allfab1 ) = 7 and IsOk ( Allfab2 ) and GetSide ( Allfab2 ) = 7 do
20039: LD_EXP 85
20043: PUSH
20044: LD_INT 1
20046: EQUAL
20047: PUSH
20048: LD_EXP 101
20052: PUSH
20053: LD_INT 4
20055: GREATEREQUAL
20056: AND
20057: PUSH
20058: LD_EXP 62
20062: PUSH
20063: EMPTY
20064: EQUAL
20065: AND
20066: PUSH
20067: LD_INT 156
20069: PPUSH
20070: CALL_OW 302
20074: AND
20075: PUSH
20076: LD_INT 156
20078: PPUSH
20079: CALL_OW 255
20083: PUSH
20084: LD_INT 7
20086: EQUAL
20087: AND
20088: PUSH
20089: LD_INT 162
20091: PPUSH
20092: CALL_OW 302
20096: AND
20097: PUSH
20098: LD_INT 162
20100: PPUSH
20101: CALL_OW 255
20105: PUSH
20106: LD_INT 7
20108: EQUAL
20109: AND
20110: IFFALSE 20226
20112: GO 20114
20114: DISABLE
// begin enable ;
20115: ENABLE
// BuildingVehicle ( 3 , Allfab1 , [ 3 , 3 , 4 ] [ Difficulty ] , [ 9 , 10 , 7 ] , 3 , 2 , 5 ) ;
20116: LD_INT 3
20118: PPUSH
20119: LD_INT 156
20121: PPUSH
20122: LD_INT 3
20124: PUSH
20125: LD_INT 3
20127: PUSH
20128: LD_INT 4
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: PUSH
20136: LD_OWVAR 67
20140: ARRAY
20141: PPUSH
20142: LD_INT 9
20144: PUSH
20145: LD_INT 10
20147: PUSH
20148: LD_INT 7
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: LIST
20155: PPUSH
20156: LD_INT 3
20158: PPUSH
20159: LD_INT 2
20161: PPUSH
20162: LD_INT 5
20164: PPUSH
20165: CALL 11663 0 7
// BuildingVehicle ( 3 , Allfab2 , [ 2 , 2 , 3 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
20169: LD_INT 3
20171: PPUSH
20172: LD_INT 162
20174: PPUSH
20175: LD_INT 2
20177: PUSH
20178: LD_INT 2
20180: PUSH
20181: LD_INT 3
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: LIST
20188: PUSH
20189: LD_OWVAR 67
20193: ARRAY
20194: PPUSH
20195: LD_INT 45
20197: PUSH
20198: LD_INT 46
20200: PUSH
20201: LD_INT 47
20203: PUSH
20204: LD_INT 49
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: PPUSH
20213: LD_INT 3
20215: PPUSH
20216: LD_INT 3
20218: PPUSH
20219: LD_INT 24
20221: PPUSH
20222: CALL 11663 0 7
// end ;
20226: END
// every 0 0$1 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ 5 , 5 , 7 ] [ Difficulty ] do var i ;
20227: LD_EXP 85
20231: PUSH
20232: LD_INT 1
20234: EQUAL
20235: PUSH
20236: LD_EXP 101
20240: PUSH
20241: LD_INT 4
20243: GREATEREQUAL
20244: AND
20245: PUSH
20246: LD_EXP 62
20250: PUSH
20251: LD_INT 5
20253: PUSH
20254: LD_INT 5
20256: PUSH
20257: LD_INT 7
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: LIST
20264: PUSH
20265: LD_OWVAR 67
20269: ARRAY
20270: EQUAL
20271: AND
20272: IFFALSE 20331
20274: GO 20276
20276: DISABLE
20277: LD_INT 0
20279: PPUSH
// begin for i in AllianceVehicles do
20280: LD_ADDR_VAR 0 1
20284: PUSH
20285: LD_EXP 62
20289: PUSH
20290: FOR_IN
20291: IFFALSE 20316
// TeleportUnit ( i , 117 , 112 , 10 , true ) ;
20293: LD_VAR 0 1
20297: PPUSH
20298: LD_INT 117
20300: PPUSH
20301: LD_INT 112
20303: PPUSH
20304: LD_INT 10
20306: PPUSH
20307: LD_INT 1
20309: PPUSH
20310: CALL_OW 483
20314: GO 20290
20316: POP
20317: POP
// AttackVehicles ( AllianceTarget , 3 ) ;
20318: LD_EXP 88
20322: PPUSH
20323: LD_INT 3
20325: PPUSH
20326: CALL 11737 0 2
// enable ;
20330: ENABLE
// end ;
20331: PPOPN 1
20333: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 do var tmp ;
20334: LD_EXP 85
20338: PUSH
20339: LD_INT 1
20341: EQUAL
20342: PUSH
20343: LD_EXP 101
20347: PUSH
20348: LD_INT 4
20350: GREATEREQUAL
20351: AND
20352: IFFALSE 20533
20354: GO 20356
20356: DISABLE
20357: LD_INT 0
20359: PPUSH
// begin enable ;
20360: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_btype , 21 ] ] ] ) ;
20361: LD_ADDR_VAR 0 1
20365: PUSH
20366: LD_INT 22
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 21
20378: PUSH
20379: LD_INT 3
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 2
20388: PUSH
20389: LD_INT 30
20391: PUSH
20392: LD_INT 30
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 30
20401: PUSH
20402: LD_INT 28
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 30
20411: PUSH
20412: LD_INT 21
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: LIST
20429: PPUSH
20430: CALL_OW 69
20434: ST_TO_ADDR
// tmp = tmp ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] ] ) ;
20435: LD_ADDR_VAR 0 1
20439: PUSH
20440: LD_VAR 0 1
20444: PUSH
20445: LD_INT 22
20447: PUSH
20448: LD_INT 1
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 21
20457: PUSH
20458: LD_INT 2
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 32
20467: PUSH
20468: LD_INT 3
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: LIST
20479: PPUSH
20480: CALL_OW 69
20484: ADD
20485: ST_TO_ADDR
// if tmp = [ ] then
20486: LD_VAR 0 1
20490: PUSH
20491: EMPTY
20492: EQUAL
20493: IFFALSE 20497
// exit ;
20495: GO 20533
// if tmp > 0 then
20497: LD_VAR 0 1
20501: PUSH
20502: LD_INT 0
20504: GREATER
20505: IFFALSE 20533
// SetLives ( tmp [ Rand ( 1 , tmp ) ] , 0 ) ;
20507: LD_VAR 0 1
20511: PUSH
20512: LD_INT 1
20514: PPUSH
20515: LD_VAR 0 1
20519: PPUSH
20520: CALL_OW 12
20524: ARRAY
20525: PPUSH
20526: LD_INT 0
20528: PPUSH
20529: CALL_OW 234
// end ;
20533: PPOPN 1
20535: END
// every 0 0$1 trigger LegionAI = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
20536: LD_EXP 84
20540: PUSH
20541: LD_INT 1
20543: EQUAL
20544: PUSH
20545: LD_INT 22
20547: PUSH
20548: LD_INT 8
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 21
20557: PUSH
20558: LD_INT 2
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 3
20567: PUSH
20568: LD_INT 61
20570: PUSH
20571: EMPTY
20572: LIST
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: LIST
20582: PPUSH
20583: CALL_OW 69
20587: PUSH
20588: LD_INT 0
20590: GREATER
20591: AND
20592: IFFALSE 20674
20594: GO 20596
20596: DISABLE
20597: LD_INT 0
20599: PPUSH
// begin enable ;
20600: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
20601: LD_ADDR_VAR 0 1
20605: PUSH
20606: LD_INT 22
20608: PUSH
20609: LD_INT 8
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 21
20618: PUSH
20619: LD_INT 2
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 3
20628: PUSH
20629: LD_INT 61
20631: PUSH
20632: EMPTY
20633: LIST
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: LIST
20643: PPUSH
20644: CALL_OW 69
20648: PUSH
20649: FOR_IN
20650: IFFALSE 20672
// ComLinkTo ( i , arControler [ 1 ] ) ;
20652: LD_VAR 0 1
20656: PPUSH
20657: LD_EXP 56
20661: PUSH
20662: LD_INT 1
20664: ARRAY
20665: PPUSH
20666: CALL_OW 135
20670: GO 20649
20672: POP
20673: POP
// end ;
20674: PPOPN 1
20676: END
// every 0 0$1 trigger AllianceAI = 1 and FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
20677: LD_EXP 85
20681: PUSH
20682: LD_INT 1
20684: EQUAL
20685: PUSH
20686: LD_INT 22
20688: PUSH
20689: LD_INT 7
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 21
20698: PUSH
20699: LD_INT 2
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 3
20708: PUSH
20709: LD_INT 61
20711: PUSH
20712: EMPTY
20713: LIST
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: LIST
20723: PPUSH
20724: CALL_OW 69
20728: PUSH
20729: LD_INT 0
20731: GREATER
20732: AND
20733: IFFALSE 20823
20735: GO 20737
20737: DISABLE
20738: LD_INT 0
20740: PPUSH
// begin enable ;
20741: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
20742: LD_ADDR_VAR 0 1
20746: PUSH
20747: LD_INT 22
20749: PUSH
20750: LD_INT 7
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 21
20759: PUSH
20760: LD_INT 2
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 3
20769: PUSH
20770: LD_INT 61
20772: PUSH
20773: EMPTY
20774: LIST
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: LIST
20784: PPUSH
20785: CALL_OW 69
20789: PUSH
20790: FOR_IN
20791: IFFALSE 20821
// ComLinkTo ( i , allianceControler [ rand ( 1 , 3 ) ] ) ;
20793: LD_VAR 0 1
20797: PPUSH
20798: LD_EXP 63
20802: PUSH
20803: LD_INT 1
20805: PPUSH
20806: LD_INT 3
20808: PPUSH
20809: CALL_OW 12
20813: ARRAY
20814: PPUSH
20815: CALL_OW 135
20819: GO 20790
20821: POP
20822: POP
// end ; end_of_file
20823: PPOPN 1
20825: END
// every 0 0$1 trigger timerStatus = 1 do
20826: LD_EXP 96
20830: PUSH
20831: LD_INT 1
20833: EQUAL
20834: IFFALSE 20871
20836: GO 20838
20838: DISABLE
// begin enable ;
20839: ENABLE
// display_strings = [ #Am15-1 , timeAction ] ;
20840: LD_ADDR_OWVAR 47
20844: PUSH
20845: LD_STRING #Am15-1
20847: PUSH
20848: LD_EXP 97
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: ST_TO_ADDR
// timeAction = timeAction + 0 0$01 ;
20857: LD_ADDR_EXP 97
20861: PUSH
20862: LD_EXP 97
20866: PUSH
20867: LD_INT 35
20869: PLUS
20870: ST_TO_ADDR
// end ; end_of_file
20871: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 and russianEscape = 0 do
20872: LD_EXP 72
20876: PUSH
20877: LD_INT 1
20879: EQUAL
20880: PUSH
20881: LD_EXP 101
20885: PUSH
20886: LD_INT 0
20888: EQUAL
20889: AND
20890: PUSH
20891: LD_EXP 90
20895: PUSH
20896: LD_INT 0
20898: EQUAL
20899: AND
20900: IFFALSE 20960
20902: GO 20904
20904: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
20905: LD_INT 2
20907: PPUSH
20908: LD_INT 6
20910: PPUSH
20911: LD_INT 2
20913: PPUSH
20914: LD_INT 4
20916: PPUSH
20917: CALL_OW 12
20921: PPUSH
20922: LD_INT 10
20924: PPUSH
20925: LD_INT 3
20927: PPUSH
20928: LD_INT 3
20930: PPUSH
20931: LD_INT 3
20933: PPUSH
20934: LD_INT 42
20936: PUSH
20937: LD_INT 43
20939: PUSH
20940: LD_INT 44
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: PPUSH
20948: EMPTY
20949: PPUSH
20950: EMPTY
20951: PPUSH
20952: LD_INT 1
20954: PPUSH
20955: CALL 7845 0 11
// enable ;
20959: ENABLE
// end ;
20960: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 1 and russianEscape = 0 do
20961: LD_EXP 72
20965: PUSH
20966: LD_INT 1
20968: EQUAL
20969: PUSH
20970: LD_EXP 101
20974: PUSH
20975: LD_INT 1
20977: EQUAL
20978: AND
20979: PUSH
20980: LD_EXP 90
20984: PUSH
20985: LD_INT 0
20987: EQUAL
20988: AND
20989: IFFALSE 21049
20991: GO 20993
20993: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 6 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
20994: LD_INT 2
20996: PPUSH
20997: LD_INT 6
20999: PPUSH
21000: LD_INT 4
21002: PPUSH
21003: LD_INT 6
21005: PPUSH
21006: CALL_OW 12
21010: PPUSH
21011: LD_INT 10
21013: PPUSH
21014: LD_INT 3
21016: PPUSH
21017: LD_INT 3
21019: PPUSH
21020: LD_INT 3
21022: PPUSH
21023: LD_INT 44
21025: PUSH
21026: LD_INT 45
21028: PUSH
21029: LD_INT 46
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: LIST
21036: PPUSH
21037: EMPTY
21038: PPUSH
21039: EMPTY
21040: PPUSH
21041: LD_INT 1
21043: PPUSH
21044: CALL 7845 0 11
// enable ;
21048: ENABLE
// end ;
21049: END
// every 3 3$30 trigger startAttacks = 1 and missionStage = 3 and russianEscape = 0 do
21050: LD_EXP 72
21054: PUSH
21055: LD_INT 1
21057: EQUAL
21058: PUSH
21059: LD_EXP 101
21063: PUSH
21064: LD_INT 3
21066: EQUAL
21067: AND
21068: PUSH
21069: LD_EXP 90
21073: PUSH
21074: LD_INT 0
21076: EQUAL
21077: AND
21078: IFFALSE 21142
21080: GO 21082
21082: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 , 47 ] , [ ] , [ ] , 1 ) ;
21083: LD_INT 2
21085: PPUSH
21086: LD_INT 6
21088: PPUSH
21089: LD_INT 4
21091: PPUSH
21092: LD_INT 8
21094: PPUSH
21095: CALL_OW 12
21099: PPUSH
21100: LD_INT 10
21102: PPUSH
21103: LD_INT 3
21105: PPUSH
21106: LD_INT 3
21108: PPUSH
21109: LD_INT 3
21111: PPUSH
21112: LD_INT 44
21114: PUSH
21115: LD_INT 45
21117: PUSH
21118: LD_INT 46
21120: PUSH
21121: LD_INT 47
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: PPUSH
21130: EMPTY
21131: PPUSH
21132: EMPTY
21133: PPUSH
21134: LD_INT 1
21136: PPUSH
21137: CALL 7845 0 11
// enable ;
21141: ENABLE
// end ;
21142: END
// every 5 5$30 trigger startAttacks = 1 and missionStage >= 4 and russianEscape = 0 do
21143: LD_EXP 72
21147: PUSH
21148: LD_INT 1
21150: EQUAL
21151: PUSH
21152: LD_EXP 101
21156: PUSH
21157: LD_INT 4
21159: GREATEREQUAL
21160: AND
21161: PUSH
21162: LD_EXP 90
21166: PUSH
21167: LD_INT 0
21169: EQUAL
21170: AND
21171: IFFALSE 21231
21173: GO 21175
21175: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
21176: LD_INT 2
21178: PPUSH
21179: LD_INT 6
21181: PPUSH
21182: LD_INT 4
21184: PPUSH
21185: LD_INT 8
21187: PPUSH
21188: CALL_OW 12
21192: PPUSH
21193: LD_INT 10
21195: PPUSH
21196: LD_INT 3
21198: PPUSH
21199: LD_INT 3
21201: PPUSH
21202: LD_INT 3
21204: PPUSH
21205: LD_INT 46
21207: PUSH
21208: LD_INT 47
21210: PUSH
21211: LD_INT 49
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: LIST
21218: PPUSH
21219: EMPTY
21220: PPUSH
21221: EMPTY
21222: PPUSH
21223: LD_INT 1
21225: PPUSH
21226: CALL 7845 0 11
// enable ;
21230: ENABLE
// end ; end_of_file
21231: END
// every 1 do var i , dec1 , options , people ;
21232: GO 21234
21234: DISABLE
21235: LD_INT 0
21237: PPUSH
21238: PPUSH
21239: PPUSH
21240: PPUSH
// begin TeleportExit ( rutp1 , 92 , 172 ) ;
21241: LD_INT 24
21243: PPUSH
21244: LD_INT 92
21246: PPUSH
21247: LD_INT 172
21249: PPUSH
21250: CALL_OW 243
// TeleportExit ( rutp2 , 103 , 74 ) ;
21254: LD_INT 25
21256: PPUSH
21257: LD_INT 103
21259: PPUSH
21260: LD_INT 74
21262: PPUSH
21263: CALL_OW 243
// SetClass ( Simms , 4 ) ;
21267: LD_EXP 48
21271: PPUSH
21272: LD_INT 4
21274: PPUSH
21275: CALL_OW 336
// InGameOn ;
21279: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
21283: LD_EXP 24
21287: PUSH
21288: LD_EXP 25
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PPUSH
21297: LD_INT 60
21299: PPUSH
21300: LD_INT 75
21302: PPUSH
21303: CALL_OW 111
// if KappaStatus = 0 then
21307: LD_EXP 81
21311: PUSH
21312: LD_INT 0
21314: EQUAL
21315: IFFALSE 21604
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21317: LD_EXP 24
21321: PPUSH
21322: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21326: LD_EXP 1
21330: PPUSH
21331: LD_STRING D1T-JMM-1
21333: PPUSH
21334: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21338: LD_EXP 24
21342: PPUSH
21343: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21347: LD_EXP 17
21351: PPUSH
21352: LD_STRING D1T-Pow-1
21354: PPUSH
21355: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21359: LD_EXP 24
21363: PPUSH
21364: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21368: LD_EXP 1
21372: PPUSH
21373: LD_STRING D1T-JMM-2
21375: PPUSH
21376: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21380: LD_EXP 24
21384: PPUSH
21385: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21389: LD_EXP 17
21393: PPUSH
21394: LD_STRING D1T-Pow-2
21396: PPUSH
21397: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21401: LD_EXP 24
21405: PPUSH
21406: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
21410: LD_EXP 1
21414: PPUSH
21415: LD_STRING D1T-JMM-3
21417: PPUSH
21418: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21422: LD_EXP 24
21426: PPUSH
21427: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
21431: LD_EXP 17
21435: PPUSH
21436: LD_STRING D1T-Pow-3
21438: PPUSH
21439: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21443: LD_EXP 24
21447: PPUSH
21448: CALL_OW 87
// if not JMMGirlVeh = [ ] then
21452: LD_EXP 79
21456: PUSH
21457: EMPTY
21458: EQUAL
21459: NOT
21460: IFFALSE 21560
// begin if JMMGirl = 1 then
21462: LD_EXP 80
21466: PUSH
21467: LD_INT 1
21469: EQUAL
21470: IFFALSE 21484
// Say ( Joan , D1T-Joan-3 ) ;
21472: LD_EXP 2
21476: PPUSH
21477: LD_STRING D1T-Joan-3
21479: PPUSH
21480: CALL_OW 88
// if JMMGirl = 2 then
21484: LD_EXP 80
21488: PUSH
21489: LD_INT 2
21491: EQUAL
21492: IFFALSE 21506
// Say ( Lisa , D1T-Lisa-3 ) ;
21494: LD_EXP 4
21498: PPUSH
21499: LD_STRING D1T-Lisa-3
21501: PPUSH
21502: CALL_OW 88
// if JMMGirl = 3 then
21506: LD_EXP 80
21510: PUSH
21511: LD_INT 3
21513: EQUAL
21514: IFFALSE 21528
// Say ( Connie , D1T-Con-3 ) ;
21516: LD_EXP 16
21520: PPUSH
21521: LD_STRING D1T-Con-3
21523: PPUSH
21524: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21528: LD_EXP 24
21532: PPUSH
21533: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
21537: LD_EXP 17
21541: PPUSH
21542: LD_STRING D1T-Pow-4
21544: PPUSH
21545: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21549: LD_EXP 24
21553: PPUSH
21554: CALL_OW 87
// end else
21558: GO 21602
// begin Say ( JMM , D1T-JMM-4 ) ;
21560: LD_EXP 1
21564: PPUSH
21565: LD_STRING D1T-JMM-4
21567: PPUSH
21568: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21572: LD_EXP 24
21576: PPUSH
21577: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
21581: LD_EXP 17
21585: PPUSH
21586: LD_STRING D1T-Pow-5
21588: PPUSH
21589: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21593: LD_EXP 24
21597: PPUSH
21598: CALL_OW 87
// end ; end else
21602: GO 21688
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21604: LD_EXP 24
21608: PPUSH
21609: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21613: LD_EXP 1
21617: PPUSH
21618: LD_STRING D1T-JMM-1
21620: PPUSH
21621: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21625: LD_EXP 24
21629: PPUSH
21630: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21634: LD_EXP 17
21638: PPUSH
21639: LD_STRING D1T-Pow-1
21641: PPUSH
21642: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21646: LD_EXP 24
21650: PPUSH
21651: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21655: LD_EXP 1
21659: PPUSH
21660: LD_STRING D1T-JMM-2
21662: PPUSH
21663: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21667: LD_EXP 24
21671: PPUSH
21672: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21676: LD_EXP 17
21680: PPUSH
21681: LD_STRING D1T-Pow-2
21683: PPUSH
21684: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
21688: LD_INT 35
21690: PPUSH
21691: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
21695: LD_EXP 24
21699: PUSH
21700: LD_EXP 25
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PPUSH
21709: LD_INT 60
21711: PPUSH
21712: LD_INT 75
21714: PPUSH
21715: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
21719: LD_EXP 24
21723: PPUSH
21724: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 20 or not HasTask ( NewJMMVeh ) ;
21728: LD_EXP 24
21732: PPUSH
21733: LD_EXP 17
21737: PPUSH
21738: CALL_OW 296
21742: PUSH
21743: LD_INT 20
21745: LESS
21746: PUSH
21747: LD_EXP 24
21751: PPUSH
21752: CALL_OW 314
21756: NOT
21757: OR
21758: IFFALSE 21688
// ComExitVehicle ( JMM ) ;
21760: LD_EXP 1
21764: PPUSH
21765: CALL_OW 121
// repeat wait ( 0 0$1 ) ;
21769: LD_INT 35
21771: PPUSH
21772: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
21776: LD_EXP 1
21780: PPUSH
21781: LD_EXP 17
21785: PPUSH
21786: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
21790: LD_EXP 1
21794: PPUSH
21795: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
21799: LD_EXP 1
21803: PPUSH
21804: LD_EXP 17
21808: PPUSH
21809: CALL_OW 296
21813: PUSH
21814: LD_INT 6
21816: LESS
21817: IFFALSE 21769
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
21819: LD_EXP 1
21823: PUSH
21824: LD_EXP 17
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PPUSH
21833: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
21837: LD_EXP 1
21841: PPUSH
21842: LD_EXP 17
21846: PPUSH
21847: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
21851: LD_EXP 17
21855: PPUSH
21856: LD_EXP 1
21860: PPUSH
21861: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
21865: LD_EXP 1
21869: PPUSH
21870: LD_STRING D1-JMM-1
21872: PPUSH
21873: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
21877: LD_EXP 17
21881: PPUSH
21882: LD_STRING D1-Pow-1
21884: PPUSH
21885: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
21889: LD_INT 1
21891: PPUSH
21892: LD_INT 3
21894: PPUSH
21895: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
21899: LD_INT 1
21901: PPUSH
21902: LD_INT 4
21904: PPUSH
21905: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
21909: LD_INT 1
21911: PPUSH
21912: LD_INT 5
21914: PPUSH
21915: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
21919: LD_INT 171
21921: PPUSH
21922: LD_INT 81
21924: PPUSH
21925: CALL_OW 84
// wait ( 0 0$4 ) ;
21929: LD_INT 140
21931: PPUSH
21932: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
21936: LD_INT 162
21938: PPUSH
21939: LD_INT 36
21941: PPUSH
21942: CALL_OW 84
// wait ( 0 0$4 ) ;
21946: LD_INT 140
21948: PPUSH
21949: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
21953: LD_INT 75
21955: PPUSH
21956: LD_INT 16
21958: PPUSH
21959: CALL_OW 84
// wait ( 0 0$4 ) ;
21963: LD_INT 140
21965: PPUSH
21966: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
21970: LD_EXP 17
21974: PUSH
21975: LD_EXP 1
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PPUSH
21984: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
21988: LD_EXP 1
21992: PPUSH
21993: LD_STRING D1-JMM-2
21995: PPUSH
21996: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
22000: LD_EXP 17
22004: PPUSH
22005: LD_STRING D1-Pow-2
22007: PPUSH
22008: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
22012: LD_EXP 1
22016: PPUSH
22017: LD_STRING D1-JMM-3
22019: PPUSH
22020: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
22024: LD_EXP 17
22028: PPUSH
22029: LD_STRING D1-Pow-3
22031: PPUSH
22032: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
22036: LD_EXP 1
22040: PPUSH
22041: LD_STRING D1-JMM-4
22043: PPUSH
22044: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
22048: LD_EXP 17
22052: PPUSH
22053: LD_STRING D1-Pow-4
22055: PPUSH
22056: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
22060: LD_EXP 1
22064: PPUSH
22065: LD_STRING D1-JMM-5
22067: PPUSH
22068: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
22072: LD_EXP 17
22076: PPUSH
22077: LD_STRING D1-Pow-5
22079: PPUSH
22080: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
22084: LD_ADDR_VAR 0 3
22088: PUSH
22089: LD_INT 1
22091: PUSH
22092: LD_INT 2
22094: PUSH
22095: LD_INT 3
22097: PUSH
22098: LD_INT 4
22100: PUSH
22101: LD_INT 5
22103: PUSH
22104: LD_INT 6
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
22115: LD_ADDR_VAR 0 2
22119: PUSH
22120: LD_STRING Q1
22122: PPUSH
22123: LD_VAR 0 3
22127: PPUSH
22128: CALL_OW 98
22132: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
22133: LD_ADDR_VAR 0 2
22137: PUSH
22138: LD_STRING Q1
22140: PPUSH
22141: LD_VAR 0 3
22145: PPUSH
22146: CALL_OW 98
22150: ST_TO_ADDR
// options = options diff dec1 ;
22151: LD_ADDR_VAR 0 3
22155: PUSH
22156: LD_VAR 0 3
22160: PUSH
22161: LD_VAR 0 2
22165: DIFF
22166: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
22167: LD_VAR 0 2
22171: PPUSH
22172: LD_VAR 0 3
22176: PPUSH
22177: CALL 23711 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
22181: LD_VAR 0 2
22185: PUSH
22186: LD_INT 5
22188: PUSH
22189: LD_INT 6
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: IN
22196: PUSH
22197: LD_VAR 0 3
22201: PUSH
22202: LD_INT 2
22204: EQUAL
22205: OR
22206: IFFALSE 22133
// if not ( dec1 in [ 5 , 6 ] ) then
22208: LD_VAR 0 2
22212: PUSH
22213: LD_INT 5
22215: PUSH
22216: LD_INT 6
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: IN
22223: NOT
22224: IFFALSE 22267
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
22226: LD_ADDR_VAR 0 2
22230: PUSH
22231: LD_STRING Q1a
22233: PPUSH
22234: LD_INT 1
22236: PUSH
22237: LD_INT 2
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PPUSH
22244: CALL_OW 98
22248: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
22249: LD_VAR 0 2
22253: PUSH
22254: LD_INT 4
22256: PLUS
22257: PPUSH
22258: LD_VAR 0 3
22262: PPUSH
22263: CALL 23711 0 2
// end ; if not JMMGirlVeh = [ ] then
22267: LD_EXP 79
22271: PUSH
22272: EMPTY
22273: EQUAL
22274: NOT
22275: IFFALSE 22641
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
22277: LD_EXP 25
22281: PPUSH
22282: CALL_OW 313
22286: PPUSH
22287: CALL_OW 121
// wait ( 0 0$1 ) ;
22291: LD_INT 35
22293: PPUSH
22294: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22298: LD_INT 35
22300: PPUSH
22301: CALL_OW 67
// if JMMGirl = 1 then
22305: LD_EXP 80
22309: PUSH
22310: LD_INT 1
22312: EQUAL
22313: IFFALSE 22329
// ComMoveUnit ( JMM , Joan ) ;
22315: LD_EXP 1
22319: PPUSH
22320: LD_EXP 2
22324: PPUSH
22325: CALL_OW 112
// if JMMGirl = 2 then
22329: LD_EXP 80
22333: PUSH
22334: LD_INT 2
22336: EQUAL
22337: IFFALSE 22353
// ComMoveUnit ( JMM , Lisa ) ;
22339: LD_EXP 1
22343: PPUSH
22344: LD_EXP 4
22348: PPUSH
22349: CALL_OW 112
// if JMMGirl = 3 then
22353: LD_EXP 80
22357: PUSH
22358: LD_INT 3
22360: EQUAL
22361: IFFALSE 22377
// ComMoveUnit ( JMM , Connie ) ;
22363: LD_EXP 1
22367: PPUSH
22368: LD_EXP 16
22372: PPUSH
22373: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
22377: LD_EXP 1
22381: PPUSH
22382: LD_EXP 2
22386: PPUSH
22387: CALL_OW 296
22391: PUSH
22392: LD_INT 6
22394: LESS
22395: PUSH
22396: LD_EXP 1
22400: PPUSH
22401: LD_EXP 4
22405: PPUSH
22406: CALL_OW 296
22410: PUSH
22411: LD_INT 6
22413: LESS
22414: OR
22415: PUSH
22416: LD_EXP 1
22420: PPUSH
22421: LD_EXP 16
22425: PPUSH
22426: CALL_OW 296
22430: PUSH
22431: LD_INT 6
22433: LESS
22434: OR
22435: IFFALSE 22298
// CenterNowOnUnits ( JMM ) ;
22437: LD_EXP 1
22441: PPUSH
22442: CALL_OW 87
// case JMMGirl of 1 :
22446: LD_EXP 80
22450: PUSH
22451: LD_INT 1
22453: DOUBLE
22454: EQUAL
22455: IFTRUE 22459
22457: GO 22514
22459: POP
// begin ComTurnUnit ( JMM , Joan ) ;
22460: LD_EXP 1
22464: PPUSH
22465: LD_EXP 2
22469: PPUSH
22470: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
22474: LD_EXP 2
22478: PPUSH
22479: LD_EXP 1
22483: PPUSH
22484: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
22488: LD_EXP 2
22492: PPUSH
22493: LD_STRING D3W-Joan-1
22495: PPUSH
22496: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22500: LD_EXP 1
22504: PPUSH
22505: LD_STRING D3W-JMM-1
22507: PPUSH
22508: CALL_OW 88
// end ; 2 :
22512: GO 22641
22514: LD_INT 2
22516: DOUBLE
22517: EQUAL
22518: IFTRUE 22522
22520: GO 22577
22522: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
22523: LD_EXP 1
22527: PPUSH
22528: LD_EXP 4
22532: PPUSH
22533: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
22537: LD_EXP 4
22541: PPUSH
22542: LD_EXP 1
22546: PPUSH
22547: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
22551: LD_EXP 4
22555: PPUSH
22556: LD_STRING D3W-Lisa-1
22558: PPUSH
22559: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22563: LD_EXP 1
22567: PPUSH
22568: LD_STRING D3W-JMM-1
22570: PPUSH
22571: CALL_OW 88
// end ; 3 :
22575: GO 22641
22577: LD_INT 3
22579: DOUBLE
22580: EQUAL
22581: IFTRUE 22585
22583: GO 22640
22585: POP
// begin ComTurnUnit ( JMM , Connie ) ;
22586: LD_EXP 1
22590: PPUSH
22591: LD_EXP 16
22595: PPUSH
22596: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
22600: LD_EXP 16
22604: PPUSH
22605: LD_EXP 1
22609: PPUSH
22610: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
22614: LD_EXP 16
22618: PPUSH
22619: LD_STRING D3W-Con-1
22621: PPUSH
22622: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22626: LD_EXP 1
22630: PPUSH
22631: LD_STRING D3W-JMM-1
22633: PPUSH
22634: CALL_OW 88
// end ; end ;
22638: GO 22641
22640: POP
// end ; people = 0 ;
22641: LD_ADDR_VAR 0 4
22645: PUSH
22646: LD_INT 0
22648: ST_TO_ADDR
// if Lisa and people < 5 then
22649: LD_EXP 4
22653: PUSH
22654: LD_VAR 0 4
22658: PUSH
22659: LD_INT 5
22661: LESS
22662: AND
22663: IFFALSE 22695
// begin people = people + 1 ;
22665: LD_ADDR_VAR 0 4
22669: PUSH
22670: LD_VAR 0 4
22674: PUSH
22675: LD_INT 1
22677: PLUS
22678: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
22679: LD_ADDR_EXP 67
22683: PUSH
22684: LD_EXP 67
22688: PUSH
22689: LD_EXP 4
22693: ADD
22694: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
22695: LD_EXP 5
22699: PUSH
22700: LD_VAR 0 4
22704: PUSH
22705: LD_INT 5
22707: LESS
22708: AND
22709: IFFALSE 22741
// begin people = people + 1 ;
22711: LD_ADDR_VAR 0 4
22715: PUSH
22716: LD_VAR 0 4
22720: PUSH
22721: LD_INT 1
22723: PLUS
22724: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
22725: LD_ADDR_EXP 67
22729: PUSH
22730: LD_EXP 67
22734: PUSH
22735: LD_EXP 5
22739: ADD
22740: ST_TO_ADDR
// end ; if Bobby and people < 5 then
22741: LD_EXP 6
22745: PUSH
22746: LD_VAR 0 4
22750: PUSH
22751: LD_INT 5
22753: LESS
22754: AND
22755: IFFALSE 22787
// begin people = people + 1 ;
22757: LD_ADDR_VAR 0 4
22761: PUSH
22762: LD_VAR 0 4
22766: PUSH
22767: LD_INT 1
22769: PLUS
22770: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
22771: LD_ADDR_EXP 67
22775: PUSH
22776: LD_EXP 67
22780: PUSH
22781: LD_EXP 6
22785: ADD
22786: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
22787: LD_EXP 7
22791: PUSH
22792: LD_VAR 0 4
22796: PUSH
22797: LD_INT 5
22799: LESS
22800: AND
22801: IFFALSE 22833
// begin people = people + 1 ;
22803: LD_ADDR_VAR 0 4
22807: PUSH
22808: LD_VAR 0 4
22812: PUSH
22813: LD_INT 1
22815: PLUS
22816: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
22817: LD_ADDR_EXP 67
22821: PUSH
22822: LD_EXP 67
22826: PUSH
22827: LD_EXP 7
22831: ADD
22832: ST_TO_ADDR
// end ; if Denis and people < 5 then
22833: LD_EXP 8
22837: PUSH
22838: LD_VAR 0 4
22842: PUSH
22843: LD_INT 5
22845: LESS
22846: AND
22847: IFFALSE 22879
// begin people = people + 1 ;
22849: LD_ADDR_VAR 0 4
22853: PUSH
22854: LD_VAR 0 4
22858: PUSH
22859: LD_INT 1
22861: PLUS
22862: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
22863: LD_ADDR_EXP 67
22867: PUSH
22868: LD_EXP 67
22872: PUSH
22873: LD_EXP 8
22877: ADD
22878: ST_TO_ADDR
// end ; if Brown and people < 5 then
22879: LD_EXP 9
22883: PUSH
22884: LD_VAR 0 4
22888: PUSH
22889: LD_INT 5
22891: LESS
22892: AND
22893: IFFALSE 22925
// begin people = people + 1 ;
22895: LD_ADDR_VAR 0 4
22899: PUSH
22900: LD_VAR 0 4
22904: PUSH
22905: LD_INT 1
22907: PLUS
22908: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
22909: LD_ADDR_EXP 67
22913: PUSH
22914: LD_EXP 67
22918: PUSH
22919: LD_EXP 9
22923: ADD
22924: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
22925: LD_EXP 10
22929: PUSH
22930: LD_VAR 0 4
22934: PUSH
22935: LD_INT 5
22937: LESS
22938: AND
22939: IFFALSE 22971
// begin people = people + 1 ;
22941: LD_ADDR_VAR 0 4
22945: PUSH
22946: LD_VAR 0 4
22950: PUSH
22951: LD_INT 1
22953: PLUS
22954: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
22955: LD_ADDR_EXP 67
22959: PUSH
22960: LD_EXP 67
22964: PUSH
22965: LD_EXP 10
22969: ADD
22970: ST_TO_ADDR
// end ; if Houten and people < 5 then
22971: LD_EXP 11
22975: PUSH
22976: LD_VAR 0 4
22980: PUSH
22981: LD_INT 5
22983: LESS
22984: AND
22985: IFFALSE 23017
// begin people = people + 1 ;
22987: LD_ADDR_VAR 0 4
22991: PUSH
22992: LD_VAR 0 4
22996: PUSH
22997: LD_INT 1
22999: PLUS
23000: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
23001: LD_ADDR_EXP 67
23005: PUSH
23006: LD_EXP 67
23010: PUSH
23011: LD_EXP 11
23015: ADD
23016: ST_TO_ADDR
// end ; if Cornel and people < 5 then
23017: LD_EXP 12
23021: PUSH
23022: LD_VAR 0 4
23026: PUSH
23027: LD_INT 5
23029: LESS
23030: AND
23031: IFFALSE 23063
// begin people = people + 1 ;
23033: LD_ADDR_VAR 0 4
23037: PUSH
23038: LD_VAR 0 4
23042: PUSH
23043: LD_INT 1
23045: PLUS
23046: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
23047: LD_ADDR_EXP 67
23051: PUSH
23052: LD_EXP 67
23056: PUSH
23057: LD_EXP 12
23061: ADD
23062: ST_TO_ADDR
// end ; if Gary and people < 5 then
23063: LD_EXP 13
23067: PUSH
23068: LD_VAR 0 4
23072: PUSH
23073: LD_INT 5
23075: LESS
23076: AND
23077: IFFALSE 23109
// begin people = people + 1 ;
23079: LD_ADDR_VAR 0 4
23083: PUSH
23084: LD_VAR 0 4
23088: PUSH
23089: LD_INT 1
23091: PLUS
23092: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
23093: LD_ADDR_EXP 67
23097: PUSH
23098: LD_EXP 67
23102: PUSH
23103: LD_EXP 13
23107: ADD
23108: ST_TO_ADDR
// end ; if Frank and people < 5 then
23109: LD_EXP 14
23113: PUSH
23114: LD_VAR 0 4
23118: PUSH
23119: LD_INT 5
23121: LESS
23122: AND
23123: IFFALSE 23155
// begin people = people + 1 ;
23125: LD_ADDR_VAR 0 4
23129: PUSH
23130: LD_VAR 0 4
23134: PUSH
23135: LD_INT 1
23137: PLUS
23138: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
23139: LD_ADDR_EXP 67
23143: PUSH
23144: LD_EXP 67
23148: PUSH
23149: LD_EXP 14
23153: ADD
23154: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
23155: LD_EXP 15
23159: PUSH
23160: LD_VAR 0 4
23164: PUSH
23165: LD_INT 5
23167: LESS
23168: AND
23169: IFFALSE 23201
// begin people = people + 1 ;
23171: LD_ADDR_VAR 0 4
23175: PUSH
23176: LD_VAR 0 4
23180: PUSH
23181: LD_INT 1
23183: PLUS
23184: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
23185: LD_ADDR_EXP 67
23189: PUSH
23190: LD_EXP 67
23194: PUSH
23195: LD_EXP 15
23199: ADD
23200: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
23201: LD_EXP 67
23205: PPUSH
23206: LD_INT 25
23208: PUSH
23209: LD_INT 2
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PPUSH
23216: CALL_OW 72
23220: PUSH
23221: LD_INT 0
23223: EQUAL
23224: IFFALSE 23242
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
23226: LD_EXP 67
23230: PUSH
23231: LD_INT 1
23233: ARRAY
23234: PPUSH
23235: LD_INT 2
23237: PPUSH
23238: CALL_OW 336
// for i = 1 to 5 do
23242: LD_ADDR_VAR 0 1
23246: PUSH
23247: DOUBLE
23248: LD_INT 1
23250: DEC
23251: ST_TO_ADDR
23252: LD_INT 5
23254: PUSH
23255: FOR_TO
23256: IFFALSE 23307
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
23258: LD_EXP 67
23262: PUSH
23263: LD_VAR 0 1
23267: ARRAY
23268: PPUSH
23269: LD_INT 62
23271: PUSH
23272: LD_VAR 0 1
23276: PLUS
23277: PPUSH
23278: LD_INT 95
23280: PPUSH
23281: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
23285: LD_EXP 67
23289: PUSH
23290: LD_VAR 0 1
23294: ARRAY
23295: PPUSH
23296: LD_EXP 1
23300: PPUSH
23301: CALL_OW 179
// end ;
23305: GO 23255
23307: POP
23308: POP
// repeat wait ( 0 0$1 ) ;
23309: LD_INT 35
23311: PPUSH
23312: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
23316: LD_EXP 1
23320: PPUSH
23321: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
23325: LD_EXP 1
23329: PPUSH
23330: LD_INT 66
23332: PPUSH
23333: LD_INT 98
23335: PPUSH
23336: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
23340: LD_EXP 2
23344: PUSH
23345: LD_EXP 4
23349: PUSH
23350: LD_EXP 16
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: LIST
23359: PPUSH
23360: LD_INT 67
23362: PPUSH
23363: LD_INT 98
23365: PPUSH
23366: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
23370: LD_EXP 1
23374: PUSH
23375: LD_EXP 2
23379: PUSH
23380: LD_EXP 4
23384: PUSH
23385: LD_EXP 16
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: PPUSH
23396: LD_INT 63
23398: PPUSH
23399: LD_INT 95
23401: PPUSH
23402: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
23406: LD_EXP 1
23410: PPUSH
23411: LD_INT 9
23413: PPUSH
23414: CALL_OW 308
23418: PUSH
23419: LD_INT 9
23421: PPUSH
23422: LD_INT 22
23424: PUSH
23425: LD_INT 4
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 21
23434: PUSH
23435: LD_INT 1
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PPUSH
23446: CALL_OW 70
23450: PUSH
23451: LD_INT 5
23453: EQUAL
23454: AND
23455: IFFALSE 23309
// wait ( 0 0$2 ) ;
23457: LD_INT 70
23459: PPUSH
23460: CALL_OW 67
// if IsInArea ( Lisa , PowellHillArea ) then
23464: LD_EXP 4
23468: PPUSH
23469: LD_INT 9
23471: PPUSH
23472: CALL_OW 308
23476: IFFALSE 23490
// Say ( Lisa , D3nW-Lisa-1 ) ;
23478: LD_EXP 4
23482: PPUSH
23483: LD_STRING D3nW-Lisa-1
23485: PPUSH
23486: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
23490: LD_EXP 7
23494: PPUSH
23495: LD_INT 9
23497: PPUSH
23498: CALL_OW 308
23502: IFFALSE 23516
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
23504: LD_EXP 7
23508: PPUSH
23509: LD_STRING D3nW-Cyrus-1
23511: PPUSH
23512: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
23516: LD_EXP 6
23520: PPUSH
23521: LD_INT 9
23523: PPUSH
23524: CALL_OW 308
23528: IFFALSE 23542
// Say ( Bobby , D3nW-Bobby-1 ) ;
23530: LD_EXP 6
23534: PPUSH
23535: LD_STRING D3nW-Bobby-1
23537: PPUSH
23538: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
23542: LD_EXP 13
23546: PPUSH
23547: LD_INT 9
23549: PPUSH
23550: CALL_OW 308
23554: IFFALSE 23568
// Say ( Gary , D3nW-Gary-1 ) ;
23556: LD_EXP 13
23560: PPUSH
23561: LD_STRING D3nW-Gary-1
23563: PPUSH
23564: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
23568: LD_EXP 5
23572: PPUSH
23573: LD_INT 9
23575: PPUSH
23576: CALL_OW 308
23580: IFFALSE 23594
// Say ( Donaldson , D3nW-Don-1 ) ;
23582: LD_EXP 5
23586: PPUSH
23587: LD_STRING D3nW-Don-1
23589: PPUSH
23590: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
23594: LD_EXP 12
23598: PPUSH
23599: LD_INT 9
23601: PPUSH
23602: CALL_OW 308
23606: IFFALSE 23620
// Say ( Cornel , D3nW-Corn-1 ) ;
23608: LD_EXP 12
23612: PPUSH
23613: LD_STRING D3nW-Corn-1
23615: PPUSH
23616: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
23620: LD_EXP 14
23624: PPUSH
23625: LD_INT 9
23627: PPUSH
23628: CALL_OW 308
23632: IFFALSE 23646
// Say ( Frank , D3nW-Frank-1 ) ;
23634: LD_EXP 14
23638: PPUSH
23639: LD_STRING D3nW-Frank-1
23641: PPUSH
23642: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
23646: LD_EXP 1
23650: PPUSH
23651: LD_STRING D3nW-JMM-1
23653: PPUSH
23654: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
23658: LD_EXP 1
23662: PPUSH
23663: LD_STRING D3nW-JMM-1a
23665: PPUSH
23666: CALL_OW 88
// InGameOff ;
23670: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
23674: LD_STRING M1
23676: PPUSH
23677: CALL_OW 337
// SaveForQuickRestart ;
23681: CALL_OW 22
// startAttacks = 1 ;
23685: LD_ADDR_EXP 72
23689: PUSH
23690: LD_INT 1
23692: ST_TO_ADDR
// wait ( 0 0$5 ) ;
23693: LD_INT 175
23695: PPUSH
23696: CALL_OW 67
// powellBuildBase = 1 ;
23700: LD_ADDR_EXP 68
23704: PUSH
23705: LD_INT 1
23707: ST_TO_ADDR
// end ;
23708: PPOPN 4
23710: END
// function ResolveQuery ( question , list_of_q ) ; begin
23711: LD_INT 0
23713: PPUSH
// case question of 1 :
23714: LD_VAR 0 1
23718: PUSH
23719: LD_INT 1
23721: DOUBLE
23722: EQUAL
23723: IFTRUE 23727
23725: GO 23778
23727: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
23728: LD_EXP 1
23732: PPUSH
23733: LD_STRING D2Mot-JMM-1
23735: PPUSH
23736: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
23740: LD_EXP 17
23744: PPUSH
23745: LD_STRING D2Mot-Pow-1
23747: PPUSH
23748: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
23752: LD_EXP 1
23756: PPUSH
23757: LD_STRING D2Mot-JMM-2
23759: PPUSH
23760: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
23764: LD_EXP 17
23768: PPUSH
23769: LD_STRING D2Mot-Pow-2
23771: PPUSH
23772: CALL_OW 88
// end ; 2 :
23776: GO 24121
23778: LD_INT 2
23780: DOUBLE
23781: EQUAL
23782: IFTRUE 23786
23784: GO 23862
23786: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
23787: LD_EXP 1
23791: PPUSH
23792: LD_STRING D2Rus-JMM-1
23794: PPUSH
23795: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
23799: LD_EXP 17
23803: PPUSH
23804: LD_STRING D2Rus-Pow-1
23806: PPUSH
23807: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
23811: LD_EXP 1
23815: PPUSH
23816: LD_STRING D2Rus-JMM-2
23818: PPUSH
23819: CALL_OW 88
// if not ( 3 in list_of_q ) then
23823: LD_INT 3
23825: PUSH
23826: LD_VAR 0 2
23830: IN
23831: NOT
23832: IFFALSE 23848
// Say ( Powell , D2Rus-Pow-2 ) else
23834: LD_EXP 17
23838: PPUSH
23839: LD_STRING D2Rus-Pow-2
23841: PPUSH
23842: CALL_OW 88
23846: GO 23860
// Say ( Powell , D2Rus-Pow-2a ) ;
23848: LD_EXP 17
23852: PPUSH
23853: LD_STRING D2Rus-Pow-2a
23855: PPUSH
23856: CALL_OW 88
// end ; 3 :
23860: GO 24121
23862: LD_INT 3
23864: DOUBLE
23865: EQUAL
23866: IFTRUE 23870
23868: GO 23955
23870: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
23871: LD_EXP 1
23875: PPUSH
23876: LD_STRING D2Leg-JMM-1
23878: PPUSH
23879: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
23883: LD_EXP 17
23887: PPUSH
23888: LD_STRING D2Leg-Pow-1
23890: PPUSH
23891: CALL_OW 88
// if ( 2 in list_of_q ) then
23895: LD_INT 2
23897: PUSH
23898: LD_VAR 0 2
23902: IN
23903: IFFALSE 23929
// begin Say ( JMM , D2Leg-JMM-2 ) ;
23905: LD_EXP 1
23909: PPUSH
23910: LD_STRING D2Leg-JMM-2
23912: PPUSH
23913: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
23917: LD_EXP 17
23921: PPUSH
23922: LD_STRING D2Leg-Pow-2
23924: PPUSH
23925: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
23929: LD_EXP 1
23933: PPUSH
23934: LD_STRING D2Leg-JMM-3
23936: PPUSH
23937: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
23941: LD_EXP 17
23945: PPUSH
23946: LD_STRING D2Leg-Pow-3
23948: PPUSH
23949: CALL_OW 88
// end ; 4 :
23953: GO 24121
23955: LD_INT 4
23957: DOUBLE
23958: EQUAL
23959: IFTRUE 23963
23961: GO 24038
23963: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
23964: LD_EXP 1
23968: PPUSH
23969: LD_STRING D2Ar-JMM-1
23971: PPUSH
23972: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
23976: LD_EXP 17
23980: PPUSH
23981: LD_STRING D2Ar-Pow-1
23983: PPUSH
23984: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
23988: LD_EXP 1
23992: PPUSH
23993: LD_STRING D2Ar-JMM-2
23995: PPUSH
23996: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
24000: LD_EXP 17
24004: PPUSH
24005: LD_STRING D2Ar-Pow-2
24007: PPUSH
24008: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
24012: LD_EXP 1
24016: PPUSH
24017: LD_STRING D2Ar-JMM-3
24019: PPUSH
24020: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
24024: LD_EXP 17
24028: PPUSH
24029: LD_STRING D2Ar-Pow-3
24031: PPUSH
24032: CALL_OW 88
// end ; 5 :
24036: GO 24121
24038: LD_INT 5
24040: DOUBLE
24041: EQUAL
24042: IFTRUE 24046
24044: GO 24061
24046: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
24047: LD_EXP 1
24051: PPUSH
24052: LD_STRING D2Conf-JMM-1
24054: PPUSH
24055: CALL_OW 88
// end ; 6 :
24059: GO 24121
24061: LD_INT 6
24063: DOUBLE
24064: EQUAL
24065: IFTRUE 24069
24067: GO 24120
24069: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
24070: LD_EXP 1
24074: PPUSH
24075: LD_STRING D2Com-JMM-1
24077: PPUSH
24078: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
24082: LD_EXP 17
24086: PPUSH
24087: LD_STRING D2Com-Pow-1
24089: PPUSH
24090: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
24094: LD_EXP 1
24098: PPUSH
24099: LD_STRING D2Com-JMM-2
24101: PPUSH
24102: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
24106: LD_EXP 17
24110: PPUSH
24111: LD_STRING D2Com-Pow-2
24113: PPUSH
24114: CALL_OW 88
// end ; end ;
24118: GO 24121
24120: POP
// end ;
24121: LD_VAR 0 3
24125: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
24126: LD_INT 9
24128: PPUSH
24129: LD_INT 22
24131: PUSH
24132: LD_INT 4
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 21
24141: PUSH
24142: LD_INT 1
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PPUSH
24153: CALL_OW 70
24157: IFFALSE 24202
24159: GO 24161
24161: DISABLE
// begin enable ;
24162: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
24163: LD_INT 9
24165: PPUSH
24166: LD_INT 22
24168: PUSH
24169: LD_INT 4
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 21
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PPUSH
24190: CALL_OW 70
24194: PPUSH
24195: LD_INT 1
24197: PPUSH
24198: CALL_OW 235
// end ;
24202: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
24203: LD_INT 22
24205: PUSH
24206: LD_INT 4
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 21
24215: PUSH
24216: LD_INT 2
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 3
24225: PUSH
24226: LD_INT 58
24228: PUSH
24229: EMPTY
24230: LIST
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: LIST
24240: PPUSH
24241: CALL_OW 69
24245: PUSH
24246: LD_INT 4
24248: EQUAL
24249: PUSH
24250: LD_EXP 72
24254: PUSH
24255: LD_INT 1
24257: EQUAL
24258: AND
24259: IFFALSE 24272
24261: GO 24263
24263: DISABLE
// startAttacks = 0 ;
24264: LD_ADDR_EXP 72
24268: PUSH
24269: LD_INT 0
24271: ST_TO_ADDR
24272: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
24273: LD_INT 22
24275: PUSH
24276: LD_INT 4
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 21
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 3
24295: PUSH
24296: LD_INT 58
24298: PUSH
24299: EMPTY
24300: LIST
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: PPUSH
24311: CALL_OW 69
24315: PUSH
24316: LD_INT 4
24318: EQUAL
24319: PUSH
24320: LD_INT 22
24322: PUSH
24323: LD_INT 6
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 21
24332: PUSH
24333: LD_INT 2
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 24
24342: PUSH
24343: LD_INT 250
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: LIST
24354: PPUSH
24355: CALL_OW 69
24359: PUSH
24360: LD_INT 0
24362: EQUAL
24363: AND
24364: PUSH
24365: LD_EXP 72
24369: PUSH
24370: LD_INT 0
24372: EQUAL
24373: AND
24374: PUSH
24375: LD_EXP 69
24379: PUSH
24380: LD_INT 0
24382: EQUAL
24383: AND
24384: IFFALSE 24572
24386: GO 24388
24388: DISABLE
24389: LD_INT 0
24391: PPUSH
// begin powellAttacks = 1 ;
24392: LD_ADDR_EXP 69
24396: PUSH
24397: LD_INT 1
24399: ST_TO_ADDR
// InGameOn ;
24400: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
24404: LD_EXP 17
24408: PPUSH
24409: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
24413: LD_EXP 17
24417: PPUSH
24418: LD_INT 47
24420: PPUSH
24421: LD_INT 60
24423: PPUSH
24424: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
24428: LD_EXP 17
24432: PPUSH
24433: LD_STRING D4-Pow-1
24435: PPUSH
24436: CALL_OW 88
// for i = 1 to amUnitsAttack do
24440: LD_ADDR_VAR 0 1
24444: PUSH
24445: DOUBLE
24446: LD_INT 1
24448: DEC
24449: ST_TO_ADDR
24450: LD_EXP 66
24454: PUSH
24455: FOR_TO
24456: IFFALSE 24501
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
24458: LD_EXP 66
24462: PUSH
24463: LD_VAR 0 1
24467: ARRAY
24468: PPUSH
24469: CALL_OW 258
24473: PUSH
24474: LD_INT 1
24476: EQUAL
24477: IFFALSE 24499
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
24479: LD_EXP 66
24483: PUSH
24484: LD_VAR 0 1
24488: ARRAY
24489: PPUSH
24490: LD_STRING D4-Sol1-1
24492: PPUSH
24493: CALL_OW 88
// break ;
24497: GO 24501
// end ;
24499: GO 24455
24501: POP
24502: POP
// Say ( Powell , D4-Pow-2 ) ;
24503: LD_EXP 17
24507: PPUSH
24508: LD_STRING D4-Pow-2
24510: PPUSH
24511: CALL_OW 88
// InGameOff ;
24515: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
24519: LD_INT 22
24521: PUSH
24522: LD_INT 4
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 21
24531: PUSH
24532: LD_INT 2
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 3
24541: PUSH
24542: LD_INT 58
24544: PUSH
24545: EMPTY
24546: LIST
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: PPUSH
24557: CALL_OW 69
24561: PPUSH
24562: LD_INT 59
24564: PPUSH
24565: LD_INT 21
24567: PPUSH
24568: CALL_OW 114
// end ;
24572: PPOPN 1
24574: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
24575: LD_INT 7
24577: PPUSH
24578: LD_INT 22
24580: PUSH
24581: LD_INT 1
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 21
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PPUSH
24602: CALL_OW 70
24606: PUSH
24607: LD_INT 0
24609: GREATER
24610: PUSH
24611: LD_EXP 17
24615: PPUSH
24616: CALL_OW 302
24620: AND
24621: PUSH
24622: LD_EXP 71
24626: PUSH
24627: LD_INT 0
24629: EQUAL
24630: AND
24631: IFFALSE 24755
24633: GO 24635
24635: DISABLE
// begin InGameOn ;
24636: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24640: LD_INT 22
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 21
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PPUSH
24664: CALL_OW 69
24668: PPUSH
24669: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24673: LD_INT 7
24675: PPUSH
24676: LD_INT 22
24678: PUSH
24679: LD_INT 1
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 21
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PPUSH
24700: CALL_OW 70
24704: PPUSH
24705: LD_INT 70
24707: PPUSH
24708: LD_INT 104
24710: PPUSH
24711: CALL_OW 111
// if powellWarm = 0 then
24715: LD_EXP 71
24719: PUSH
24720: LD_INT 0
24722: EQUAL
24723: IFFALSE 24751
// begin Say ( Powell , DBack1-Pow-1 ) ;
24725: LD_EXP 17
24729: PPUSH
24730: LD_STRING DBack1-Pow-1
24732: PPUSH
24733: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24737: LD_ADDR_EXP 71
24741: PUSH
24742: LD_EXP 71
24746: PUSH
24747: LD_INT 1
24749: PLUS
24750: ST_TO_ADDR
// end ; InGameOff ;
24751: CALL_OW 9
// end ;
24755: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
24756: LD_INT 7
24758: PPUSH
24759: LD_INT 22
24761: PUSH
24762: LD_INT 1
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 21
24771: PUSH
24772: LD_INT 1
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PPUSH
24783: CALL_OW 70
24787: PUSH
24788: LD_INT 0
24790: GREATER
24791: PUSH
24792: LD_EXP 17
24796: PPUSH
24797: CALL_OW 302
24801: AND
24802: PUSH
24803: LD_EXP 71
24807: PUSH
24808: LD_INT 1
24810: EQUAL
24811: AND
24812: IFFALSE 24936
24814: GO 24816
24816: DISABLE
// begin InGameOn ;
24817: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24821: LD_INT 22
24823: PUSH
24824: LD_INT 1
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 21
24833: PUSH
24834: LD_INT 1
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PPUSH
24845: CALL_OW 69
24849: PPUSH
24850: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24854: LD_INT 7
24856: PPUSH
24857: LD_INT 22
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 21
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PPUSH
24881: CALL_OW 70
24885: PPUSH
24886: LD_INT 70
24888: PPUSH
24889: LD_INT 104
24891: PPUSH
24892: CALL_OW 111
// if powellWarm = 1 then
24896: LD_EXP 71
24900: PUSH
24901: LD_INT 1
24903: EQUAL
24904: IFFALSE 24932
// begin Say ( Powell , DBack2-Pow-1 ) ;
24906: LD_EXP 17
24910: PPUSH
24911: LD_STRING DBack2-Pow-1
24913: PPUSH
24914: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24918: LD_ADDR_EXP 71
24922: PUSH
24923: LD_EXP 71
24927: PUSH
24928: LD_INT 1
24930: PLUS
24931: ST_TO_ADDR
// end ; InGameOff ;
24932: CALL_OW 9
// end ;
24936: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
24937: LD_INT 7
24939: PPUSH
24940: LD_INT 22
24942: PUSH
24943: LD_INT 1
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 21
24952: PUSH
24953: LD_INT 1
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PPUSH
24964: CALL_OW 70
24968: PUSH
24969: LD_INT 0
24971: GREATER
24972: PUSH
24973: LD_EXP 17
24977: PPUSH
24978: CALL_OW 302
24982: AND
24983: PUSH
24984: LD_EXP 71
24988: PUSH
24989: LD_INT 2
24991: EQUAL
24992: AND
24993: IFFALSE 25110
24995: GO 24997
24997: DISABLE
// begin InGameOn ;
24998: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25002: LD_INT 22
25004: PUSH
25005: LD_INT 1
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 21
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PPUSH
25026: CALL_OW 69
25030: PPUSH
25031: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
25035: LD_INT 7
25037: PPUSH
25038: LD_INT 22
25040: PUSH
25041: LD_INT 1
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 21
25050: PUSH
25051: LD_INT 1
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PPUSH
25062: CALL_OW 70
25066: PPUSH
25067: LD_INT 70
25069: PPUSH
25070: LD_INT 104
25072: PPUSH
25073: CALL_OW 111
// if powellWarm = 2 then
25077: LD_EXP 71
25081: PUSH
25082: LD_INT 2
25084: EQUAL
25085: IFFALSE 25106
// begin Say ( Powell , DBack3-Pow-1 ) ;
25087: LD_EXP 17
25091: PPUSH
25092: LD_STRING DBack3-Pow-1
25094: PPUSH
25095: CALL_OW 88
// YouLost ( Dismissed ) ;
25099: LD_STRING Dismissed
25101: PPUSH
25102: CALL_OW 104
// end ; InGameOff ;
25106: CALL_OW 9
// end ;
25110: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
25111: LD_INT 8
25113: PPUSH
25114: LD_INT 22
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 21
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PPUSH
25138: CALL_OW 70
25142: PUSH
25143: LD_INT 0
25145: GREATER
25146: PUSH
25147: LD_EXP 17
25151: PPUSH
25152: CALL_OW 302
25156: AND
25157: PUSH
25158: LD_EXP 71
25162: PUSH
25163: LD_INT 0
25165: EQUAL
25166: AND
25167: IFFALSE 25291
25169: GO 25171
25171: DISABLE
// begin InGameOn ;
25172: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25176: LD_INT 22
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 21
25188: PUSH
25189: LD_INT 1
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PPUSH
25200: CALL_OW 69
25204: PPUSH
25205: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25209: LD_INT 8
25211: PPUSH
25212: LD_INT 22
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 21
25224: PUSH
25225: LD_INT 1
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PPUSH
25236: CALL_OW 70
25240: PPUSH
25241: LD_INT 71
25243: PPUSH
25244: LD_INT 63
25246: PPUSH
25247: CALL_OW 111
// if powellWarm = 0 then
25251: LD_EXP 71
25255: PUSH
25256: LD_INT 0
25258: EQUAL
25259: IFFALSE 25287
// begin Say ( Powell , DBack1-Pow-1 ) ;
25261: LD_EXP 17
25265: PPUSH
25266: LD_STRING DBack1-Pow-1
25268: PPUSH
25269: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25273: LD_ADDR_EXP 71
25277: PUSH
25278: LD_EXP 71
25282: PUSH
25283: LD_INT 1
25285: PLUS
25286: ST_TO_ADDR
// end ; InGameOff ;
25287: CALL_OW 9
// end ;
25291: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
25292: LD_INT 8
25294: PPUSH
25295: LD_INT 22
25297: PUSH
25298: LD_INT 1
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 21
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PPUSH
25319: CALL_OW 70
25323: PUSH
25324: LD_INT 0
25326: GREATER
25327: PUSH
25328: LD_EXP 17
25332: PPUSH
25333: CALL_OW 302
25337: AND
25338: PUSH
25339: LD_EXP 71
25343: PUSH
25344: LD_INT 1
25346: EQUAL
25347: AND
25348: IFFALSE 25472
25350: GO 25352
25352: DISABLE
// begin InGameOn ;
25353: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25357: LD_INT 22
25359: PUSH
25360: LD_INT 1
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 21
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PPUSH
25381: CALL_OW 69
25385: PPUSH
25386: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25390: LD_INT 8
25392: PPUSH
25393: LD_INT 22
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 21
25405: PUSH
25406: LD_INT 1
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PPUSH
25417: CALL_OW 70
25421: PPUSH
25422: LD_INT 71
25424: PPUSH
25425: LD_INT 63
25427: PPUSH
25428: CALL_OW 111
// if powellWarm = 1 then
25432: LD_EXP 71
25436: PUSH
25437: LD_INT 1
25439: EQUAL
25440: IFFALSE 25468
// begin Say ( Powell , DBack2-Pow-1 ) ;
25442: LD_EXP 17
25446: PPUSH
25447: LD_STRING DBack2-Pow-1
25449: PPUSH
25450: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25454: LD_ADDR_EXP 71
25458: PUSH
25459: LD_EXP 71
25463: PUSH
25464: LD_INT 1
25466: PLUS
25467: ST_TO_ADDR
// end ; InGameOff ;
25468: CALL_OW 9
// end ;
25472: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
25473: LD_INT 8
25475: PPUSH
25476: LD_INT 22
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 21
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PPUSH
25500: CALL_OW 70
25504: PUSH
25505: LD_INT 0
25507: GREATER
25508: PUSH
25509: LD_EXP 17
25513: PPUSH
25514: CALL_OW 302
25518: AND
25519: PUSH
25520: LD_EXP 71
25524: PUSH
25525: LD_INT 2
25527: EQUAL
25528: AND
25529: IFFALSE 25646
25531: GO 25533
25533: DISABLE
// begin InGameOn ;
25534: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25538: LD_INT 22
25540: PUSH
25541: LD_INT 1
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 21
25550: PUSH
25551: LD_INT 1
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PPUSH
25562: CALL_OW 69
25566: PPUSH
25567: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25571: LD_INT 8
25573: PPUSH
25574: LD_INT 22
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 21
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PPUSH
25598: CALL_OW 70
25602: PPUSH
25603: LD_INT 71
25605: PPUSH
25606: LD_INT 63
25608: PPUSH
25609: CALL_OW 111
// if powellWarm = 2 then
25613: LD_EXP 71
25617: PUSH
25618: LD_INT 2
25620: EQUAL
25621: IFFALSE 25642
// begin Say ( Powell , DBack3-Pow-1 ) ;
25623: LD_EXP 17
25627: PPUSH
25628: LD_STRING DBack3-Pow-1
25630: PPUSH
25631: CALL_OW 88
// YouLost ( Dismissed ) ;
25635: LD_STRING Dismissed
25637: PPUSH
25638: CALL_OW 104
// end ; InGameOff ;
25642: CALL_OW 9
// end ;
25646: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
25647: LD_EXP 69
25651: PUSH
25652: LD_INT 1
25654: EQUAL
25655: IFFALSE 25704
25657: GO 25659
25659: DISABLE
25660: LD_INT 0
25662: PPUSH
// begin enable ;
25663: ENABLE
// for i = 1 to amUnitsAttack do
25664: LD_ADDR_VAR 0 1
25668: PUSH
25669: DOUBLE
25670: LD_INT 1
25672: DEC
25673: ST_TO_ADDR
25674: LD_EXP 66
25678: PUSH
25679: FOR_TO
25680: IFFALSE 25702
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
25682: LD_INT 8
25684: PPUSH
25685: LD_EXP 66
25689: PUSH
25690: LD_VAR 0 1
25694: ARRAY
25695: PPUSH
25696: CALL_OW 471
25700: GO 25679
25702: POP
25703: POP
// end ;
25704: PPOPN 1
25706: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
25707: LD_INT 22
25709: PUSH
25710: LD_INT 4
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 21
25719: PUSH
25720: LD_INT 2
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 3
25729: PUSH
25730: LD_INT 58
25732: PUSH
25733: EMPTY
25734: LIST
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: LIST
25744: PPUSH
25745: CALL_OW 69
25749: PUSH
25750: LD_INT 0
25752: EQUAL
25753: PUSH
25754: LD_EXP 69
25758: PUSH
25759: LD_INT 1
25761: EQUAL
25762: AND
25763: IFFALSE 25934
25765: GO 25767
25767: DISABLE
// begin powellAttacks = 2 ;
25768: LD_ADDR_EXP 69
25772: PUSH
25773: LD_INT 2
25775: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25776: LD_INT 85
25778: PPUSH
25779: LD_INT 3
25781: PPUSH
25782: LD_INT 3
25784: PPUSH
25785: LD_INT 1
25787: PPUSH
25788: LD_INT 5
25790: PUSH
25791: LD_INT 7
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 1
25800: PPUSH
25801: LD_INT 2
25803: PPUSH
25804: CALL_OW 12
25808: ARRAY
25809: PPUSH
25810: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25814: LD_INT 85
25816: PPUSH
25817: LD_INT 3
25819: PPUSH
25820: LD_INT 3
25822: PPUSH
25823: LD_INT 1
25825: PPUSH
25826: LD_INT 5
25828: PUSH
25829: LD_INT 7
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 1
25838: PPUSH
25839: LD_INT 2
25841: PPUSH
25842: CALL_OW 12
25846: ARRAY
25847: PPUSH
25848: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25852: LD_INT 85
25854: PPUSH
25855: LD_INT 3
25857: PPUSH
25858: LD_INT 3
25860: PPUSH
25861: LD_INT 1
25863: PPUSH
25864: LD_INT 5
25866: PUSH
25867: LD_INT 7
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 1
25876: PPUSH
25877: LD_INT 2
25879: PPUSH
25880: CALL_OW 12
25884: ARRAY
25885: PPUSH
25886: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
25890: LD_INT 85
25892: PPUSH
25893: LD_INT 5
25895: PPUSH
25896: LD_INT 3
25898: PPUSH
25899: LD_INT 1
25901: PPUSH
25902: LD_INT 6
25904: PPUSH
25905: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
25909: LD_ADDR_EXP 73
25913: PUSH
25914: LD_INT 85
25916: PPUSH
25917: LD_INT 3
25919: PPUSH
25920: LD_INT 3
25922: PPUSH
25923: LD_INT 1
25925: PPUSH
25926: LD_INT 3
25928: PPUSH
25929: CALL_OW 185
25933: ST_TO_ADDR
// end ;
25934: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
25935: LD_INT 22
25937: PUSH
25938: LD_INT 4
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 21
25947: PUSH
25948: LD_INT 2
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 3
25957: PUSH
25958: LD_INT 58
25960: PUSH
25961: EMPTY
25962: LIST
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: LIST
25972: PPUSH
25973: CALL_OW 69
25977: PUSH
25978: LD_INT 5
25980: GREATEREQUAL
25981: PUSH
25982: LD_EXP 72
25986: PUSH
25987: LD_INT 1
25989: EQUAL
25990: AND
25991: IFFALSE 26004
25993: GO 25995
25995: DISABLE
// startAttacks = 0 ;
25996: LD_ADDR_EXP 72
26000: PUSH
26001: LD_INT 0
26003: ST_TO_ADDR
26004: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
26005: LD_INT 22
26007: PUSH
26008: LD_INT 4
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 21
26017: PUSH
26018: LD_INT 2
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 3
26027: PUSH
26028: LD_INT 58
26030: PUSH
26031: EMPTY
26032: LIST
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 69
26047: PUSH
26048: LD_INT 5
26050: GREATEREQUAL
26051: PUSH
26052: LD_INT 22
26054: PUSH
26055: LD_INT 6
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 21
26064: PUSH
26065: LD_INT 2
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PPUSH
26076: CALL_OW 69
26080: PUSH
26081: LD_INT 0
26083: EQUAL
26084: AND
26085: PUSH
26086: LD_EXP 72
26090: PUSH
26091: LD_INT 0
26093: EQUAL
26094: AND
26095: PUSH
26096: LD_EXP 69
26100: PUSH
26101: LD_INT 2
26103: EQUAL
26104: AND
26105: IFFALSE 27040
26107: GO 26109
26109: DISABLE
26110: LD_INT 0
26112: PPUSH
26113: PPUSH
26114: PPUSH
26115: PPUSH
// begin powellAttacks = 3 ;
26116: LD_ADDR_EXP 69
26120: PUSH
26121: LD_INT 3
26123: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
26124: LD_ADDR_VAR 0 1
26128: PUSH
26129: DOUBLE
26130: LD_INT 1
26132: DEC
26133: ST_TO_ADDR
26134: LD_EXP 66
26138: PUSH
26139: FOR_TO
26140: IFFALSE 26162
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
26142: LD_INT 8
26144: PPUSH
26145: LD_EXP 66
26149: PUSH
26150: LD_VAR 0 1
26154: ARRAY
26155: PPUSH
26156: CALL_OW 472
26160: GO 26139
26162: POP
26163: POP
// wait ( 0 0$5 ) ;
26164: LD_INT 175
26166: PPUSH
26167: CALL_OW 67
// Video ( true ) ;
26171: LD_INT 1
26173: PPUSH
26174: CALL 6868 0 1
// ComStop ( FilterAllUnits ( [ f_side , 1 ] ) ) ;
26178: LD_INT 22
26180: PUSH
26181: LD_INT 1
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PPUSH
26188: CALL_OW 69
26192: PPUSH
26193: CALL_OW 141
// CenterNowOnUnits ( Powell ) ;
26197: LD_EXP 17
26201: PPUSH
26202: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
26206: LD_EXP 17
26210: PPUSH
26211: LD_INT 45
26213: PPUSH
26214: LD_INT 64
26216: PPUSH
26217: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
26221: LD_EXP 17
26225: PPUSH
26226: LD_INT 46
26228: PPUSH
26229: LD_INT 66
26231: PPUSH
26232: CALL_OW 178
// for i = 5 to 8 do
26236: LD_ADDR_VAR 0 1
26240: PUSH
26241: DOUBLE
26242: LD_INT 5
26244: DEC
26245: ST_TO_ADDR
26246: LD_INT 8
26248: PUSH
26249: FOR_TO
26250: IFFALSE 26396
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
26252: LD_EXP 66
26256: PUSH
26257: LD_VAR 0 1
26261: ARRAY
26262: PPUSH
26263: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
26267: LD_EXP 66
26271: PUSH
26272: LD_VAR 0 1
26276: ARRAY
26277: PPUSH
26278: CALL_OW 121
// wait ( 0 0$1 ) ;
26282: LD_INT 35
26284: PPUSH
26285: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
26289: LD_EXP 66
26293: PUSH
26294: LD_VAR 0 1
26298: ARRAY
26299: PPUSH
26300: LD_INT 92
26302: PPUSH
26303: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
26307: LD_EXP 66
26311: PUSH
26312: LD_VAR 0 1
26316: ARRAY
26317: PPUSH
26318: LD_INT 1
26320: PPUSH
26321: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
26325: LD_EXP 66
26329: PUSH
26330: LD_VAR 0 1
26334: ARRAY
26335: PPUSH
26336: CALL_OW 182
// wait ( 0 0$1 ) ;
26340: LD_INT 35
26342: PPUSH
26343: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 43 + i , 66 ) ;
26347: LD_EXP 66
26351: PUSH
26352: LD_VAR 0 1
26356: ARRAY
26357: PPUSH
26358: LD_INT 43
26360: PUSH
26361: LD_VAR 0 1
26365: PLUS
26366: PPUSH
26367: LD_INT 66
26369: PPUSH
26370: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
26374: LD_EXP 66
26378: PUSH
26379: LD_VAR 0 1
26383: ARRAY
26384: PPUSH
26385: LD_EXP 17
26389: PPUSH
26390: CALL_OW 179
// end ;
26394: GO 26249
26396: POP
26397: POP
// wait ( 0 0$10 ) ;
26398: LD_INT 350
26400: PPUSH
26401: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
26405: LD_ADDR_VAR 0 3
26409: PUSH
26410: LD_INT 22
26412: PUSH
26413: LD_INT 4
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 21
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 56
26432: PUSH
26433: EMPTY
26434: LIST
26435: PUSH
26436: LD_INT 3
26438: PUSH
26439: LD_INT 60
26441: PUSH
26442: EMPTY
26443: LIST
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: PPUSH
26455: CALL_OW 69
26459: PUSH
26460: LD_EXP 17
26464: PUSH
26465: EMPTY
26466: LIST
26467: DIFF
26468: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
26469: LD_VAR 0 3
26473: PPUSH
26474: LD_INT 92
26476: PPUSH
26477: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
26481: LD_VAR 0 3
26485: PPUSH
26486: LD_INT 1
26488: PPUSH
26489: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
26493: LD_EXP 17
26497: PPUSH
26498: LD_STRING D5-Pow-1
26500: PPUSH
26501: CALL_OW 88
// for i = 1 to amUnitsAttack do
26505: LD_ADDR_VAR 0 1
26509: PUSH
26510: DOUBLE
26511: LD_INT 1
26513: DEC
26514: ST_TO_ADDR
26515: LD_EXP 66
26519: PUSH
26520: FOR_TO
26521: IFFALSE 26566
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
26523: LD_EXP 66
26527: PUSH
26528: LD_VAR 0 1
26532: ARRAY
26533: PPUSH
26534: CALL_OW 258
26538: PUSH
26539: LD_INT 1
26541: EQUAL
26542: IFFALSE 26564
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
26544: LD_EXP 66
26548: PUSH
26549: LD_VAR 0 1
26553: ARRAY
26554: PPUSH
26555: LD_STRING D5-Sol2-1
26557: PPUSH
26558: CALL_OW 88
// break ;
26562: GO 26566
// end ;
26564: GO 26520
26566: POP
26567: POP
// Say ( Powell , D5-Pow-2 ) ;
26568: LD_EXP 17
26572: PPUSH
26573: LD_STRING D5-Pow-2
26575: PPUSH
26576: CALL_OW 88
// for i = 1 to amUnitsAttack do
26580: LD_ADDR_VAR 0 1
26584: PUSH
26585: DOUBLE
26586: LD_INT 1
26588: DEC
26589: ST_TO_ADDR
26590: LD_EXP 66
26594: PUSH
26595: FOR_TO
26596: IFFALSE 26641
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
26598: LD_EXP 66
26602: PUSH
26603: LD_VAR 0 1
26607: ARRAY
26608: PPUSH
26609: CALL_OW 258
26613: PUSH
26614: LD_INT 1
26616: EQUAL
26617: IFFALSE 26639
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
26619: LD_EXP 66
26623: PUSH
26624: LD_VAR 0 1
26628: ARRAY
26629: PPUSH
26630: LD_STRING D5-Sol2-2
26632: PPUSH
26633: CALL_OW 88
// break ;
26637: GO 26641
// end ;
26639: GO 26595
26641: POP
26642: POP
// Say ( Powell , D5-Pow-3 ) ;
26643: LD_EXP 17
26647: PPUSH
26648: LD_STRING D5-Pow-3
26650: PPUSH
26651: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
26655: LD_INT 22
26657: PUSH
26658: LD_INT 4
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 21
26667: PUSH
26668: LD_INT 2
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 3
26677: PUSH
26678: LD_INT 58
26680: PUSH
26681: EMPTY
26682: LIST
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: LIST
26692: PPUSH
26693: CALL_OW 69
26697: PPUSH
26698: LD_INT 59
26700: PPUSH
26701: LD_INT 21
26703: PPUSH
26704: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
26708: LD_EXP 66
26712: PPUSH
26713: LD_INT 59
26715: PPUSH
26716: LD_INT 21
26718: PPUSH
26719: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
26723: LD_INT 61
26725: PPUSH
26726: LD_INT 35
26728: PPUSH
26729: CALL_OW 84
// wait ( 0 0$15 ) ;
26733: LD_INT 525
26735: PPUSH
26736: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
26740: LD_EXP 17
26744: PPUSH
26745: LD_STRING D5a-Pow-1
26747: PPUSH
26748: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
26752: LD_EXP 17
26756: PPUSH
26757: LD_STRING D5a-Pow-1a
26759: PPUSH
26760: CALL_OW 88
// wait ( 0 0$2 ) ;
26764: LD_INT 70
26766: PPUSH
26767: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
26771: LD_EXP 17
26775: PPUSH
26776: LD_STRING D5a-Pow-1b
26778: PPUSH
26779: CALL_OW 88
// wait ( 0 0$3 ) ;
26783: LD_INT 105
26785: PPUSH
26786: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
26790: LD_EXP 17
26794: PPUSH
26795: LD_STRING D5a-Pow-1c
26797: PPUSH
26798: CALL_OW 88
// wait ( 0 0$1 ) ;
26802: LD_INT 35
26804: PPUSH
26805: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
26809: LD_EXP 17
26813: PPUSH
26814: LD_STRING D5a-Pow-1d
26816: PPUSH
26817: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
26821: LD_INT 35
26823: PPUSH
26824: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
26828: LD_INT 22
26830: PUSH
26831: LD_INT 4
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 21
26840: PUSH
26841: LD_INT 2
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 3
26850: PUSH
26851: LD_INT 58
26853: PUSH
26854: EMPTY
26855: LIST
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: LIST
26865: PPUSH
26866: CALL_OW 69
26870: PPUSH
26871: LD_INT 59
26873: PPUSH
26874: LD_INT 21
26876: PPUSH
26877: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
26881: LD_EXP 66
26885: PPUSH
26886: LD_INT 59
26888: PPUSH
26889: LD_INT 21
26891: PPUSH
26892: CALL_OW 114
// until amUnitsAttack = [ ] ;
26896: LD_EXP 66
26900: PUSH
26901: EMPTY
26902: EQUAL
26903: IFFALSE 26821
// CenterNowOnUnits ( Powell ) ;
26905: LD_EXP 17
26909: PPUSH
26910: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
26914: LD_ADDR_VAR 0 3
26918: PUSH
26919: LD_INT 22
26921: PUSH
26922: LD_INT 4
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 21
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PPUSH
26943: CALL_OW 69
26947: PUSH
26948: LD_EXP 17
26952: PUSH
26953: EMPTY
26954: LIST
26955: DIFF
26956: ST_TO_ADDR
// for i in powellPeople do
26957: LD_ADDR_VAR 0 1
26961: PUSH
26962: LD_VAR 0 3
26966: PUSH
26967: FOR_IN
26968: IFFALSE 26997
// if GetSex ( i ) = sex_male then
26970: LD_VAR 0 1
26974: PPUSH
26975: CALL_OW 258
26979: PUSH
26980: LD_INT 1
26982: EQUAL
26983: IFFALSE 26995
// sold = i ;
26985: LD_ADDR_VAR 0 2
26989: PUSH
26990: LD_VAR 0 1
26994: ST_TO_ADDR
26995: GO 26967
26997: POP
26998: POP
// Say ( sold , D6-Sol3-1 ) ;
26999: LD_VAR 0 2
27003: PPUSH
27004: LD_STRING D6-Sol3-1
27006: PPUSH
27007: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
27011: LD_EXP 17
27015: PPUSH
27016: LD_STRING D6-Pow-1
27018: PPUSH
27019: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
27023: LD_INT 139
27025: PUSH
27026: LD_INT 138
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PPUSH
27033: LD_INT 12
27035: PPUSH
27036: CALL_OW 113
// end ;
27040: PPOPN 4
27042: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
27043: LD_EXP 69
27047: PUSH
27048: LD_INT 3
27050: EQUAL
27051: PUSH
27052: LD_INT 12
27054: PPUSH
27055: LD_INT 22
27057: PUSH
27058: LD_INT 8
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 21
27067: PUSH
27068: LD_INT 2
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PPUSH
27079: CALL_OW 70
27083: PUSH
27084: LD_INT 2
27086: EQUAL
27087: AND
27088: IFFALSE 27249
27090: GO 27092
27092: DISABLE
27093: LD_INT 0
27095: PPUSH
27096: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
27097: LD_INT 8
27099: PPUSH
27100: LD_INT 1
27102: PPUSH
27103: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
27107: LD_INT 4
27109: PPUSH
27110: LD_INT 8
27112: PPUSH
27113: LD_INT 1
27115: PPUSH
27116: LD_INT 1
27118: PPUSH
27119: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
27123: LD_ADDR_VAR 0 1
27127: PUSH
27128: LD_INT 92
27130: PPUSH
27131: CALL_OW 313
27135: PUSH
27136: FOR_IN
27137: IFFALSE 27168
// if GetSex ( i ) = sex_male then
27139: LD_VAR 0 1
27143: PPUSH
27144: CALL_OW 258
27148: PUSH
27149: LD_INT 1
27151: EQUAL
27152: IFFALSE 27166
// begin tmp = i ;
27154: LD_ADDR_VAR 0 2
27158: PUSH
27159: LD_VAR 0 1
27163: ST_TO_ADDR
// break ;
27164: GO 27168
// end ;
27166: GO 27136
27168: POP
27169: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
27170: LD_INT 92
27172: PPUSH
27173: CALL_OW 313
27177: PPUSH
27178: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
27182: LD_VAR 0 2
27186: PPUSH
27187: LD_STRING D6-Sol3-2
27189: PPUSH
27190: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
27194: LD_INT 139
27196: PUSH
27197: LD_INT 138
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PPUSH
27204: LD_INT 85
27206: PPUSH
27207: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
27211: LD_INT 4
27213: PPUSH
27214: LD_INT 8
27216: PPUSH
27217: LD_INT 2
27219: PPUSH
27220: LD_INT 1
27222: PPUSH
27223: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
27227: LD_INT 8
27229: PPUSH
27230: LD_INT 8
27232: PPUSH
27233: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
27237: LD_EXP 17
27241: PPUSH
27242: LD_STRING D6-Pow-2
27244: PPUSH
27245: CALL_OW 88
// end ;
27249: PPOPN 2
27251: END
// every 1 trigger IsDead ( AmFact ) do var i , tmp ;
27252: LD_INT 85
27254: PPUSH
27255: CALL_OW 301
27259: IFFALSE 27723
27261: GO 27263
27263: DISABLE
27264: LD_INT 0
27266: PPUSH
27267: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) = 1 then
27268: LD_INT 22
27270: PUSH
27271: LD_INT 8
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 21
27280: PUSH
27281: LD_INT 2
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 33
27290: PUSH
27291: LD_INT 2
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 34
27300: PUSH
27301: LD_INT 29
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 50
27310: PUSH
27311: EMPTY
27312: LIST
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: PPUSH
27321: CALL_OW 69
27325: PUSH
27326: LD_INT 1
27328: EQUAL
27329: IFFALSE 27440
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) , FilterUnitsInArea ( BunkerHillArea , [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
27331: LD_INT 22
27333: PUSH
27334: LD_INT 8
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 21
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 33
27353: PUSH
27354: LD_INT 2
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 34
27363: PUSH
27364: LD_INT 29
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 50
27373: PUSH
27374: EMPTY
27375: LIST
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: PPUSH
27384: CALL_OW 69
27388: PPUSH
27389: LD_INT 34
27391: PPUSH
27392: LD_INT 22
27394: PUSH
27395: LD_INT 4
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 21
27404: PUSH
27405: LD_INT 3
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 30
27414: PUSH
27415: LD_INT 32
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: LIST
27426: PPUSH
27427: CALL_OW 70
27431: PUSH
27432: LD_INT 1
27434: ARRAY
27435: PPUSH
27436: CALL_OW 115
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
27440: LD_ADDR_VAR 0 1
27444: PUSH
27445: LD_INT 22
27447: PUSH
27448: LD_INT 4
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 21
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 56
27467: PUSH
27468: EMPTY
27469: LIST
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: PPUSH
27476: CALL_OW 69
27480: PUSH
27481: LD_EXP 17
27485: PUSH
27486: EMPTY
27487: LIST
27488: DIFF
27489: PUSH
27490: FOR_IN
27491: IFFALSE 27522
// if GetSex ( i ) = sex_male then
27493: LD_VAR 0 1
27497: PPUSH
27498: CALL_OW 258
27502: PUSH
27503: LD_INT 1
27505: EQUAL
27506: IFFALSE 27520
// begin tmp = i ;
27508: LD_ADDR_VAR 0 2
27512: PUSH
27513: LD_VAR 0 1
27517: ST_TO_ADDR
// break ;
27518: GO 27522
// end ;
27520: GO 27490
27522: POP
27523: POP
// Say ( Powell , D6a-Pow-1 ) ;
27524: LD_EXP 17
27528: PPUSH
27529: LD_STRING D6a-Pow-1
27531: PPUSH
27532: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
27536: LD_VAR 0 2
27540: PPUSH
27541: LD_STRING D6a-Sol3-1
27543: PPUSH
27544: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
27548: LD_EXP 17
27552: PPUSH
27553: LD_VAR 0 2
27557: PPUSH
27558: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
27562: LD_EXP 17
27566: PPUSH
27567: LD_STRING D6a-Pow-2
27569: PPUSH
27570: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
27574: LD_VAR 0 2
27578: PPUSH
27579: LD_STRING D6a-Sol3-2
27581: PPUSH
27582: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
27586: LD_EXP 17
27590: PPUSH
27591: LD_STRING D6a-Pow-3
27593: PPUSH
27594: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
27598: LD_EXP 17
27602: PPUSH
27603: LD_EXP 73
27607: PPUSH
27608: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
27612: LD_INT 35
27614: PPUSH
27615: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
27619: LD_EXP 17
27623: PPUSH
27624: LD_EXP 73
27628: PPUSH
27629: CALL_OW 120
// until IsInUnit ( Powell ) ;
27633: LD_EXP 17
27637: PPUSH
27638: CALL_OW 310
27642: IFFALSE 27612
// wait ( 0 0$1 ) ;
27644: LD_INT 35
27646: PPUSH
27647: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
27651: LD_EXP 73
27655: PPUSH
27656: LD_INT 77
27658: PPUSH
27659: LD_INT 64
27661: PPUSH
27662: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
27666: LD_EXP 73
27670: PPUSH
27671: LD_INT 91
27673: PPUSH
27674: LD_INT 61
27676: PPUSH
27677: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
27681: LD_EXP 73
27685: PPUSH
27686: LD_INT 74
27688: PPUSH
27689: LD_INT 25
27691: PPUSH
27692: CALL_OW 171
// centerPowell = 1 ;
27696: LD_ADDR_EXP 74
27700: PUSH
27701: LD_INT 1
27703: ST_TO_ADDR
// wait ( 0 0$15 ) ;
27704: LD_INT 525
27706: PPUSH
27707: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
27711: LD_EXP 17
27715: PPUSH
27716: LD_STRING D6b-Pow-1
27718: PPUSH
27719: CALL_OW 88
// end ;
27723: PPOPN 2
27725: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
27726: LD_EXP 73
27730: PPUSH
27731: LD_INT 13
27733: PPUSH
27734: CALL_OW 308
27738: PUSH
27739: LD_EXP 69
27743: PUSH
27744: LD_INT 3
27746: EQUAL
27747: AND
27748: IFFALSE 27890
27750: GO 27752
27752: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
27753: LD_EXP 73
27757: PPUSH
27758: LD_INT 250
27760: PPUSH
27761: CALL_OW 234
// DialogueOn ;
27765: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
27769: LD_EXP 17
27773: PPUSH
27774: LD_STRING D6b-Pow-1a
27776: PPUSH
27777: CALL_OW 88
// DialogueOff ;
27781: CALL_OW 7
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
27785: LD_EXP 17
27789: PPUSH
27790: LD_INT 22
27792: PUSH
27793: LD_INT 8
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 34
27802: PUSH
27803: LD_INT 29
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 50
27812: PUSH
27813: EMPTY
27814: LIST
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: LIST
27820: PPUSH
27821: CALL_OW 69
27825: PUSH
27826: LD_INT 1
27828: ARRAY
27829: PPUSH
27830: CALL_OW 120
// wait ( 0 0$1 ) ;
27834: LD_INT 35
27836: PPUSH
27837: CALL_OW 67
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
27841: LD_EXP 17
27845: PPUSH
27846: LD_INT 22
27848: PUSH
27849: LD_INT 8
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 34
27858: PUSH
27859: LD_INT 29
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 50
27868: PUSH
27869: EMPTY
27870: LIST
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: LIST
27876: PPUSH
27877: CALL_OW 69
27881: PUSH
27882: LD_INT 1
27884: ARRAY
27885: PPUSH
27886: CALL_OW 120
// end ;
27890: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
27891: LD_INT 22
27893: PUSH
27894: LD_INT 4
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 34
27903: PUSH
27904: LD_INT 29
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PPUSH
27915: CALL_OW 69
27919: IFFALSE 28351
27921: GO 27923
27923: DISABLE
// begin powBomb = FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) [ 1 ] ;
27924: LD_ADDR_EXP 75
27928: PUSH
27929: LD_INT 22
27931: PUSH
27932: LD_INT 4
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 34
27941: PUSH
27942: LD_INT 29
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PPUSH
27953: CALL_OW 69
27957: PUSH
27958: LD_INT 1
27960: ARRAY
27961: ST_TO_ADDR
// SetAttitude ( 8 , 4 , att_friend , true ) ;
27962: LD_INT 8
27964: PPUSH
27965: LD_INT 4
27967: PPUSH
27968: LD_INT 1
27970: PPUSH
27971: LD_INT 1
27973: PPUSH
27974: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
27978: LD_EXP 75
27982: PPUSH
27983: LD_INT 80
27985: PPUSH
27986: LD_INT 19
27988: PPUSH
27989: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
27993: LD_EXP 75
27997: PPUSH
27998: LD_INT 74
28000: PPUSH
28001: LD_INT 15
28003: PPUSH
28004: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
28008: LD_EXP 75
28012: PPUSH
28013: LD_INT 72
28015: PPUSH
28016: LD_INT 19
28018: PPUSH
28019: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
28023: LD_EXP 75
28027: PPUSH
28028: LD_INT 78
28030: PPUSH
28031: LD_INT 24
28033: PPUSH
28034: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28038: LD_EXP 75
28042: PPUSH
28043: LD_INT 77
28045: PPUSH
28046: LD_INT 20
28048: PPUSH
28049: CALL_OW 171
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
28053: LD_EXP 75
28057: PPUSH
28058: LD_INT 74
28060: PPUSH
28061: LD_INT 15
28063: PPUSH
28064: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
28068: LD_EXP 75
28072: PPUSH
28073: LD_INT 72
28075: PPUSH
28076: LD_INT 19
28078: PPUSH
28079: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
28083: LD_EXP 75
28087: PPUSH
28088: LD_INT 78
28090: PPUSH
28091: LD_INT 24
28093: PPUSH
28094: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28098: LD_EXP 75
28102: PPUSH
28103: LD_INT 77
28105: PPUSH
28106: LD_INT 20
28108: PPUSH
28109: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
28113: LD_EXP 75
28117: PPUSH
28118: LD_INT 78
28120: PPUSH
28121: LD_INT 15
28123: PPUSH
28124: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
28128: LD_EXP 17
28132: PPUSH
28133: LD_STRING D6b-Pow-1b
28135: PPUSH
28136: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
28140: LD_INT 22
28142: PUSH
28143: LD_INT 8
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 21
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 25
28162: PUSH
28163: LD_INT 1
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 26
28172: PUSH
28173: LD_INT 1
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: PPUSH
28186: CALL_OW 69
28190: PUSH
28191: LD_INT 1
28193: ARRAY
28194: PPUSH
28195: LD_STRING D6b-ArSol1-1
28197: PPUSH
28198: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D6b-ArSol2-1 ) ;
28202: LD_INT 22
28204: PUSH
28205: LD_INT 8
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 21
28214: PUSH
28215: LD_INT 1
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 25
28224: PUSH
28225: LD_INT 1
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 26
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: PPUSH
28248: CALL_OW 69
28252: PUSH
28253: LD_INT 2
28255: ARRAY
28256: PPUSH
28257: LD_STRING D6b-ArSol2-1
28259: PPUSH
28260: CALL_OW 88
// Say ( Powell , D6b-Pow-2 ) ;
28264: LD_EXP 17
28268: PPUSH
28269: LD_STRING D6b-Pow-2
28271: PPUSH
28272: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
28276: LD_INT 35
28278: PPUSH
28279: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 2 ;
28283: LD_EXP 75
28287: PPUSH
28288: LD_INT 78
28290: PPUSH
28291: LD_INT 15
28293: PPUSH
28294: CALL_OW 297
28298: PUSH
28299: LD_INT 2
28301: LESS
28302: IFFALSE 28276
// wait ( 0 0$1 ) ;
28304: LD_INT 35
28306: PPUSH
28307: CALL_OW 67
// DialogueOn ;
28311: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
28315: LD_EXP 17
28319: PPUSH
28320: LD_STRING D6b-Pow-2a
28322: PPUSH
28323: CALL_OW 88
// DialogueOff ;
28327: CALL_OW 7
// centerPowell = 0 ;
28331: LD_ADDR_EXP 74
28335: PUSH
28336: LD_INT 0
28338: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
28339: LD_EXP 75
28343: PPUSH
28344: LD_INT 105
28346: PPUSH
28347: CALL_OW 115
// end ;
28351: END
// every 0 0$3 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
28352: LD_INT 105
28354: PPUSH
28355: CALL_OW 301
28359: PUSH
28360: LD_EXP 69
28364: PUSH
28365: LD_INT 3
28367: EQUAL
28368: AND
28369: IFFALSE 29203
28371: GO 28373
28373: DISABLE
28374: LD_INT 0
28376: PPUSH
28377: PPUSH
28378: PPUSH
28379: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
28380: LD_ADDR_VAR 0 2
28384: PUSH
28385: LD_INT 22
28387: PUSH
28388: LD_INT 4
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 21
28397: PUSH
28398: LD_INT 1
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 26
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: LIST
28419: PPUSH
28420: CALL_OW 69
28424: PUSH
28425: LD_EXP 1
28429: PUSH
28430: LD_EXP 3
28434: PUSH
28435: LD_EXP 21
28439: PUSH
28440: LD_EXP 22
28444: PUSH
28445: LD_EXP 23
28449: PUSH
28450: LD_EXP 4
28454: PUSH
28455: LD_EXP 5
28459: PUSH
28460: LD_EXP 6
28464: PUSH
28465: LD_EXP 7
28469: PUSH
28470: LD_EXP 8
28474: PUSH
28475: LD_EXP 9
28479: PUSH
28480: LD_EXP 10
28484: PUSH
28485: LD_EXP 11
28489: PUSH
28490: LD_EXP 12
28494: PUSH
28495: LD_EXP 13
28499: PUSH
28500: LD_EXP 14
28504: PUSH
28505: LD_EXP 15
28509: PUSH
28510: LD_EXP 17
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: DIFF
28535: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
28536: LD_INT 49
28538: PPUSH
28539: LD_INT 66
28541: PPUSH
28542: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
28546: LD_VAR 0 2
28550: PUSH
28551: LD_INT 1
28553: ARRAY
28554: PPUSH
28555: LD_STRING D6c-Sol3-1
28557: PPUSH
28558: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
28562: LD_EXP 1
28566: PPUSH
28567: LD_STRING D6c-JMM-1
28569: PPUSH
28570: CALL_OW 88
// if IsOk ( Cyrus ) then
28574: LD_EXP 7
28578: PPUSH
28579: CALL_OW 302
28583: IFFALSE 28597
// Say ( Cyrus , D6c-Cyrus-1 ) ;
28585: LD_EXP 7
28589: PPUSH
28590: LD_STRING D6c-Cyrus-1
28592: PPUSH
28593: CALL_OW 88
// if IsOk ( Bobby ) then
28597: LD_EXP 6
28601: PPUSH
28602: CALL_OW 302
28606: IFFALSE 28620
// Say ( Bobby , D6c-Bobby-1 ) ;
28608: LD_EXP 6
28612: PPUSH
28613: LD_STRING D6c-Bobby-1
28615: PPUSH
28616: CALL_OW 88
// if IsOk ( Cornel ) then
28620: LD_EXP 12
28624: PPUSH
28625: CALL_OW 302
28629: IFFALSE 28643
// Say ( Cornel , D6c-Corn-1 ) ;
28631: LD_EXP 12
28635: PPUSH
28636: LD_STRING D6c-Corn-1
28638: PPUSH
28639: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
28643: LD_VAR 0 2
28647: PUSH
28648: LD_INT 2
28650: ARRAY
28651: PPUSH
28652: LD_STRING D6c-Sol1-1
28654: PPUSH
28655: CALL_OW 88
// if IsOk ( Lisa ) then
28659: LD_EXP 4
28663: PPUSH
28664: CALL_OW 302
28668: IFFALSE 28682
// Say ( Lisa , D6c-Lisa-1 ) ;
28670: LD_EXP 4
28674: PPUSH
28675: LD_STRING D6c-Lisa-1
28677: PPUSH
28678: CALL_OW 88
// if IsOk ( Gary ) then
28682: LD_EXP 13
28686: PPUSH
28687: CALL_OW 302
28691: IFFALSE 28705
// Say ( Gary , D6c-Gary-1 ) ;
28693: LD_EXP 13
28697: PPUSH
28698: LD_STRING D6c-Gary-1
28700: PPUSH
28701: CALL_OW 88
// if IsOK ( Donaldson ) then
28705: LD_EXP 5
28709: PPUSH
28710: CALL_OW 302
28714: IFFALSE 28728
// Say ( Donaldson , D6c-Don-1 ) ;
28716: LD_EXP 5
28720: PPUSH
28721: LD_STRING D6c-Don-1
28723: PPUSH
28724: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
28728: LD_VAR 0 2
28732: PUSH
28733: LD_INT 3
28735: ARRAY
28736: PPUSH
28737: LD_STRING D6c-Sol2-1
28739: PPUSH
28740: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
28744: LD_INT 22
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 21
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PPUSH
28768: CALL_OW 69
28772: PPUSH
28773: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
28777: LD_INT 22
28779: PUSH
28780: LD_INT 4
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 21
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PPUSH
28801: CALL_OW 69
28805: PPUSH
28806: CALL_OW 122
// wait ( 0 0$1 ) ;
28810: LD_INT 35
28812: PPUSH
28813: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
28817: LD_ADDR_VAR 0 3
28821: PUSH
28822: LD_INT 22
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 21
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PPUSH
28846: CALL_OW 69
28850: PUSH
28851: LD_EXP 1
28855: PUSH
28856: EMPTY
28857: LIST
28858: DIFF
28859: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
28860: LD_ADDR_VAR 0 4
28864: PUSH
28865: LD_INT 22
28867: PUSH
28868: LD_INT 4
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 21
28877: PUSH
28878: LD_INT 1
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PPUSH
28889: CALL_OW 69
28893: ST_TO_ADDR
// for i := 1 to tmp2 do
28894: LD_ADDR_VAR 0 1
28898: PUSH
28899: DOUBLE
28900: LD_INT 1
28902: DEC
28903: ST_TO_ADDR
28904: LD_VAR 0 4
28908: PUSH
28909: FOR_TO
28910: IFFALSE 28961
// begin ComMoveXY ( tmp2 [ i ] , 43 + i , 64 ) ;
28912: LD_VAR 0 4
28916: PUSH
28917: LD_VAR 0 1
28921: ARRAY
28922: PPUSH
28923: LD_INT 43
28925: PUSH
28926: LD_VAR 0 1
28930: PLUS
28931: PPUSH
28932: LD_INT 64
28934: PPUSH
28935: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
28939: LD_VAR 0 4
28943: PUSH
28944: LD_VAR 0 1
28948: ARRAY
28949: PPUSH
28950: LD_EXP 1
28954: PPUSH
28955: CALL_OW 179
// end ;
28959: GO 28909
28961: POP
28962: POP
// for i := 1 to tmp1 do
28963: LD_ADDR_VAR 0 1
28967: PUSH
28968: DOUBLE
28969: LD_INT 1
28971: DEC
28972: ST_TO_ADDR
28973: LD_VAR 0 3
28977: PUSH
28978: FOR_TO
28979: IFFALSE 29030
// begin ComMoveXY ( tmp1 [ i ] , 43 + i , 65 ) ;
28981: LD_VAR 0 3
28985: PUSH
28986: LD_VAR 0 1
28990: ARRAY
28991: PPUSH
28992: LD_INT 43
28994: PUSH
28995: LD_VAR 0 1
28999: PLUS
29000: PPUSH
29001: LD_INT 65
29003: PPUSH
29004: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
29008: LD_VAR 0 3
29012: PUSH
29013: LD_VAR 0 1
29017: ARRAY
29018: PPUSH
29019: LD_EXP 1
29023: PPUSH
29024: CALL_OW 179
// end ;
29028: GO 28978
29030: POP
29031: POP
// repeat wait ( 0 0$1 ) ;
29032: LD_INT 35
29034: PPUSH
29035: CALL_OW 67
// ComMoveXY ( JMM , 48 , 68 ) ;
29039: LD_EXP 1
29043: PPUSH
29044: LD_INT 48
29046: PPUSH
29047: LD_INT 68
29049: PPUSH
29050: CALL_OW 111
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
29054: LD_EXP 1
29058: PPUSH
29059: LD_INT 48
29061: PPUSH
29062: LD_INT 68
29064: PPUSH
29065: CALL_OW 297
29069: PUSH
29070: LD_INT 2
29072: LESS
29073: IFFALSE 29032
// AddComTurnXY ( JMM , 47 , 65 ) ;
29075: LD_EXP 1
29079: PPUSH
29080: LD_INT 47
29082: PPUSH
29083: LD_INT 65
29085: PPUSH
29086: CALL_OW 178
// wait ( 0 0$2 ) ;
29090: LD_INT 70
29092: PPUSH
29093: CALL_OW 67
// Say ( tmp [ 1 ] , D6c-Sol3-2 ) ;
29097: LD_VAR 0 2
29101: PUSH
29102: LD_INT 1
29104: ARRAY
29105: PPUSH
29106: LD_STRING D6c-Sol3-2
29108: PPUSH
29109: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
29113: LD_EXP 1
29117: PPUSH
29118: LD_STRING D6c-JMM-2
29120: PPUSH
29121: CALL_OW 88
// Video ( false ) ;
29125: LD_INT 0
29127: PPUSH
29128: CALL 6868 0 1
// centerPowell = 0 ;
29132: LD_ADDR_EXP 74
29136: PUSH
29137: LD_INT 0
29139: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
29140: LD_INT 22
29142: PUSH
29143: LD_INT 4
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PPUSH
29150: CALL_OW 69
29154: PPUSH
29155: LD_INT 1
29157: PPUSH
29158: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
29162: LD_STRING M2
29164: PPUSH
29165: CALL_OW 337
// ChangeSideFog ( 4 , 4 ) ;
29169: LD_INT 4
29171: PPUSH
29172: LD_INT 4
29174: PPUSH
29175: CALL_OW 343
// timerStatus = 1 ;
29179: LD_ADDR_EXP 96
29183: PUSH
29184: LD_INT 1
29186: ST_TO_ADDR
// missionStage = 1 ;
29187: LD_ADDR_EXP 101
29191: PUSH
29192: LD_INT 1
29194: ST_TO_ADDR
// startAttacks = 1 ;
29195: LD_ADDR_EXP 72
29199: PUSH
29200: LD_INT 1
29202: ST_TO_ADDR
// end ;
29203: PPOPN 4
29205: END
// every 0 0$1 trigger centerPowell = 1 do
29206: LD_EXP 74
29210: PUSH
29211: LD_INT 1
29213: EQUAL
29214: IFFALSE 29497
29216: GO 29218
29218: DISABLE
// begin enable ;
29219: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
29220: LD_EXP 17
29224: PUSH
29225: LD_EXP 75
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PPUSH
29234: LD_INT 1000
29236: PPUSH
29237: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29241: LD_INT 22
29243: PUSH
29244: LD_INT 4
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 34
29253: PUSH
29254: LD_INT 29
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 33
29263: PUSH
29264: LD_INT 1
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: LIST
29275: PPUSH
29276: CALL_OW 69
29280: PUSH
29281: LD_INT 0
29283: GREATER
29284: IFFALSE 29337
// SetLives ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29286: LD_INT 22
29288: PUSH
29289: LD_INT 4
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 34
29298: PUSH
29299: LD_INT 29
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 33
29308: PUSH
29309: LD_INT 1
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: LIST
29320: PPUSH
29321: CALL_OW 69
29325: PUSH
29326: LD_INT 1
29328: ARRAY
29329: PPUSH
29330: LD_INT 1000
29332: PPUSH
29333: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29337: LD_INT 22
29339: PUSH
29340: LD_INT 8
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 34
29349: PUSH
29350: LD_INT 29
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 33
29359: PUSH
29360: LD_INT 1
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: LIST
29371: PPUSH
29372: CALL_OW 69
29376: PUSH
29377: LD_INT 0
29379: GREATER
29380: IFFALSE 29433
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29382: LD_INT 22
29384: PUSH
29385: LD_INT 8
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 34
29394: PUSH
29395: LD_INT 29
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 33
29404: PUSH
29405: LD_INT 1
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: LIST
29416: PPUSH
29417: CALL_OW 69
29421: PUSH
29422: LD_INT 1
29424: ARRAY
29425: PPUSH
29426: LD_INT 1000
29428: PPUSH
29429: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
29433: LD_EXP 73
29437: PPUSH
29438: LD_INT 13
29440: PPUSH
29441: CALL_OW 308
29445: NOT
29446: IFFALSE 29460
// SetLives ( powellVeh , 1000 ) ;
29448: LD_EXP 73
29452: PPUSH
29453: LD_INT 1000
29455: PPUSH
29456: CALL_OW 234
// if not IsInUnit ( Powell ) then
29460: LD_EXP 17
29464: PPUSH
29465: CALL_OW 310
29469: NOT
29470: IFFALSE 29483
// CenterNowOnUnits ( Powell ) else
29472: LD_EXP 17
29476: PPUSH
29477: CALL_OW 87
29481: GO 29497
// CenterNowOnUnits ( IsInUnit ( Powell ) ) ;
29483: LD_EXP 17
29487: PPUSH
29488: CALL_OW 310
29492: PPUSH
29493: CALL_OW 87
// end ;
29497: END
// every 0 0$1 trigger timeAction >= 0 0$16 do
29498: LD_EXP 97
29502: PUSH
29503: LD_INT 560
29505: GREATEREQUAL
29506: IFFALSE 29718
29508: GO 29510
29510: DISABLE
// begin DialogueOn ;
29511: CALL_OW 6
// SayRadio ( LegionFriend , D7-Friend-1 ) ;
29515: LD_EXP 53
29519: PPUSH
29520: LD_STRING D7-Friend-1
29522: PPUSH
29523: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
29527: LD_EXP 1
29531: PPUSH
29532: LD_STRING D7-JMM-1
29534: PPUSH
29535: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-2 ) ;
29539: LD_EXP 53
29543: PPUSH
29544: LD_STRING D7-Friend-2
29546: PPUSH
29547: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
29551: LD_EXP 1
29555: PPUSH
29556: LD_STRING D7-JMM-2
29558: PPUSH
29559: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-3 ) ;
29563: LD_EXP 53
29567: PPUSH
29568: LD_STRING D7-Friend-3
29570: PPUSH
29571: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
29575: LD_EXP 1
29579: PPUSH
29580: LD_STRING D7-JMM-3
29582: PPUSH
29583: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-4 ) ;
29587: LD_EXP 53
29591: PPUSH
29592: LD_STRING D7-Friend-4
29594: PPUSH
29595: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
29599: LD_EXP 1
29603: PPUSH
29604: LD_STRING D7-JMM-4
29606: PPUSH
29607: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-5 ) ;
29611: LD_EXP 53
29615: PPUSH
29616: LD_STRING D7-Friend-5
29618: PPUSH
29619: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
29623: LD_EXP 1
29627: PPUSH
29628: LD_STRING D7-JMM-5
29630: PPUSH
29631: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-6 ) ;
29635: LD_EXP 53
29639: PPUSH
29640: LD_STRING D7-Friend-6
29642: PPUSH
29643: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
29647: LD_EXP 1
29651: PPUSH
29652: LD_STRING D7-JMM-6
29654: PPUSH
29655: CALL_OW 88
// DialogueOff ;
29659: CALL_OW 7
// PlaceUnitArea ( Kozlov , KozlovSpawn , false ) ;
29663: LD_EXP 36
29667: PPUSH
29668: LD_INT 15
29670: PPUSH
29671: LD_INT 0
29673: PPUSH
29674: CALL_OW 49
// SetClass ( Kozlov , 2 ) ;
29678: LD_EXP 36
29682: PPUSH
29683: LD_INT 2
29685: PPUSH
29686: CALL_OW 336
// ComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
29690: LD_EXP 36
29694: PPUSH
29695: LD_INT 2
29697: PPUSH
29698: LD_INT 78
29700: PPUSH
29701: LD_INT 12
29703: PPUSH
29704: LD_INT 3
29706: PPUSH
29707: CALL_OW 145
// ChangeMissionObjectives ( Mlegion ) ;
29711: LD_STRING Mlegion
29713: PPUSH
29714: CALL_OW 337
// end ;
29718: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 6 , 5 , 4 ] [ Difficulty ] do
29719: LD_INT 22
29721: PUSH
29722: LD_INT 8
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 21
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 23
29741: PUSH
29742: LD_INT 2
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: LIST
29753: PPUSH
29754: CALL_OW 69
29758: PUSH
29759: LD_INT 6
29761: PUSH
29762: LD_INT 5
29764: PUSH
29765: LD_INT 4
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: LIST
29772: PUSH
29773: LD_OWVAR 67
29777: ARRAY
29778: LESSEQUAL
29779: IFFALSE 30093
29781: GO 29783
29783: DISABLE
// begin PlaceUnitArea ( Kurt , KurtSpawn , false ) ;
29784: LD_EXP 30
29788: PPUSH
29789: LD_INT 19
29791: PPUSH
29792: LD_INT 0
29794: PPUSH
29795: CALL_OW 49
// KillUnit ( Kozlov ) ;
29799: LD_EXP 36
29803: PPUSH
29804: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
29808: LD_INT 22
29810: PUSH
29811: LD_INT 8
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 21
29820: PUSH
29821: LD_INT 3
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 23
29830: PUSH
29831: LD_INT 3
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 30
29840: PUSH
29841: LD_INT 3
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: PPUSH
29854: CALL_OW 69
29858: PUSH
29859: LD_INT 1
29861: ARRAY
29862: PPUSH
29863: CALL_OW 66
// DialogueOn ;
29867: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
29871: LD_EXP 1
29875: PPUSH
29876: LD_STRING D13-JMM-1
29878: PPUSH
29879: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
29883: LD_EXP 30
29887: PPUSH
29888: LD_STRING D13-Kurt-1
29890: PPUSH
29891: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
29895: LD_EXP 1
29899: PPUSH
29900: LD_STRING D13-JMM-2
29902: PPUSH
29903: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
29907: LD_EXP 30
29911: PPUSH
29912: LD_STRING D13-Kurt-2a
29914: PPUSH
29915: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
29919: LD_EXP 1
29923: PPUSH
29924: LD_STRING D13-JMM-3
29926: PPUSH
29927: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
29931: LD_EXP 30
29935: PPUSH
29936: LD_STRING D13-Kurt-3
29938: PPUSH
29939: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
29943: LD_EXP 1
29947: PPUSH
29948: LD_STRING D13-JMM-4
29950: PPUSH
29951: CALL_OW 88
// DialogueOff ;
29955: CALL_OW 7
// SetSide ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] ] ) , 1 ) ;
29959: LD_INT 22
29961: PUSH
29962: LD_INT 8
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 50
29971: PUSH
29972: EMPTY
29973: LIST
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PPUSH
29979: CALL_OW 69
29983: PPUSH
29984: LD_INT 1
29986: PPUSH
29987: CALL_OW 235
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_lives , 250 ] ] ] ) , 0 ) ;
29991: LD_INT 22
29993: PUSH
29994: LD_INT 8
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 3
30003: PUSH
30004: LD_INT 24
30006: PUSH
30007: LD_INT 250
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PPUSH
30022: CALL_OW 69
30026: PPUSH
30027: LD_INT 0
30029: PPUSH
30030: CALL_OW 234
// ChangeMissionObjectives ( MlegionOut ) ;
30034: LD_STRING MlegionOut
30036: PPUSH
30037: CALL_OW 337
// SetAttitude ( 8 , 1 , att_friend , true ) ;
30041: LD_INT 8
30043: PPUSH
30044: LD_INT 1
30046: PPUSH
30047: LD_INT 1
30049: PPUSH
30050: LD_INT 1
30052: PPUSH
30053: CALL_OW 80
// PlaceUnitArea ( LegionFriend , LegFriendSpawn , false ) ;
30057: LD_EXP 53
30061: PPUSH
30062: LD_INT 30
30064: PPUSH
30065: LD_INT 0
30067: PPUSH
30068: CALL_OW 49
// wait ( 0 0$1 ) ;
30072: LD_INT 35
30074: PPUSH
30075: CALL_OW 67
// ComMoveUnit ( LegionFriend , JMM ) ;
30079: LD_EXP 53
30083: PPUSH
30084: LD_EXP 1
30088: PPUSH
30089: CALL_OW 112
// end ;
30093: END
// every 0 0$1 trigger See ( 1 , LegionFriend ) do var dec ;
30094: LD_INT 1
30096: PPUSH
30097: LD_EXP 53
30101: PPUSH
30102: CALL_OW 292
30106: IFFALSE 30382
30108: GO 30110
30110: DISABLE
30111: LD_INT 0
30113: PPUSH
// begin CenterNowOnUnits ( LegionFriend ) ;
30114: LD_EXP 53
30118: PPUSH
30119: CALL_OW 87
// DialogueOn ;
30123: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
30127: LD_EXP 1
30131: PPUSH
30132: LD_STRING D14-JMM-1
30134: PPUSH
30135: CALL_OW 88
// Say ( LegionFriend , D14-Friend-1 ) ;
30139: LD_EXP 53
30143: PPUSH
30144: LD_STRING D14-Friend-1
30146: PPUSH
30147: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
30151: LD_EXP 1
30155: PPUSH
30156: LD_STRING D14-JMM-2
30158: PPUSH
30159: CALL_OW 88
// Say ( LegionFriend , D14-Friend-2 ) ;
30163: LD_EXP 53
30167: PPUSH
30168: LD_STRING D14-Friend-2
30170: PPUSH
30171: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
30175: LD_EXP 1
30179: PPUSH
30180: LD_STRING D14-JMM-3
30182: PPUSH
30183: CALL_OW 88
// Say ( LegionFriend , D14-Friend-3 ) ;
30187: LD_EXP 53
30191: PPUSH
30192: LD_STRING D14-Friend-3
30194: PPUSH
30195: CALL_OW 88
// DialogueOff ;
30199: CALL_OW 7
// dec = Query ( Q14 ) ;
30203: LD_ADDR_VAR 0 1
30207: PUSH
30208: LD_STRING Q14
30210: PPUSH
30211: CALL_OW 97
30215: ST_TO_ADDR
// if dec = 1 then
30216: LD_VAR 0 1
30220: PUSH
30221: LD_INT 1
30223: EQUAL
30224: IFFALSE 30258
// begin DialogueOn ;
30226: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
30230: LD_EXP 1
30234: PPUSH
30235: LD_STRING D14a-JMM-1
30237: PPUSH
30238: CALL_OW 88
// DialogueOff ;
30242: CALL_OW 7
// SetSide ( LegionFriend , 1 ) ;
30246: LD_EXP 53
30250: PPUSH
30251: LD_INT 1
30253: PPUSH
30254: CALL_OW 235
// end ; if dec = 2 then
30258: LD_VAR 0 1
30262: PUSH
30263: LD_INT 2
30265: EQUAL
30266: IFFALSE 30300
// begin DialogueOn ;
30268: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
30272: LD_EXP 1
30276: PPUSH
30277: LD_STRING D14b-JMM-1
30279: PPUSH
30280: CALL_OW 88
// DialogueOff ;
30284: CALL_OW 7
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30288: LD_EXP 53
30292: PPUSH
30293: LD_INT 18
30295: PPUSH
30296: CALL_OW 113
// end ; if dec = 3 then
30300: LD_VAR 0 1
30304: PUSH
30305: LD_INT 3
30307: EQUAL
30308: IFFALSE 30382
// begin DialogueOn ;
30310: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
30314: LD_EXP 1
30318: PPUSH
30319: LD_STRING D14c-JMM-1
30321: PPUSH
30322: CALL_OW 88
// Say ( LegionFriend , D14c-Friend-1 ) ;
30326: LD_EXP 53
30330: PPUSH
30331: LD_STRING D14c-Friend-1
30333: PPUSH
30334: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
30338: LD_EXP 1
30342: PPUSH
30343: LD_STRING D14c-JMM-2
30345: PPUSH
30346: CALL_OW 88
// DialogueOff ;
30350: CALL_OW 7
// SetAttitude ( 8 , 1 , att_enemy , true ) ;
30354: LD_INT 8
30356: PPUSH
30357: LD_INT 1
30359: PPUSH
30360: LD_INT 2
30362: PPUSH
30363: LD_INT 1
30365: PPUSH
30366: CALL_OW 80
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30370: LD_EXP 53
30374: PPUSH
30375: LD_INT 18
30377: PPUSH
30378: CALL_OW 113
// end ; end ;
30382: PPOPN 1
30384: END
// every 0 0$1 trigger IsInArea ( LegionFriend , FriendEscapeArea ) and GetSide ( LegionFriend ) = 8 do
30385: LD_EXP 53
30389: PPUSH
30390: LD_INT 18
30392: PPUSH
30393: CALL_OW 308
30397: PUSH
30398: LD_EXP 53
30402: PPUSH
30403: CALL_OW 255
30407: PUSH
30408: LD_INT 8
30410: EQUAL
30411: AND
30412: IFFALSE 30426
30414: GO 30416
30416: DISABLE
// RemoveUnit ( LegionFriend ) ;
30417: LD_EXP 53
30421: PPUSH
30422: CALL_OW 64
30426: END
// every 0 0$1 trigger timeAction >= 15 15$02 do
30427: LD_EXP 97
30431: PUSH
30432: LD_INT 31570
30434: GREATEREQUAL
30435: IFFALSE 30511
30437: GO 30439
30439: DISABLE
// begin if KappaStatus = 1 and JMMGirlVeh = [ ] then
30440: LD_EXP 81
30444: PUSH
30445: LD_INT 1
30447: EQUAL
30448: PUSH
30449: LD_EXP 79
30453: PUSH
30454: EMPTY
30455: EQUAL
30456: AND
30457: IFFALSE 30463
// PrepareSupportFromKappa ;
30459: CALL 2400 0 0
// if KappaStatus = 0 and JMMGirlStatus = 1 then
30463: LD_EXP 81
30467: PUSH
30468: LD_INT 0
30470: EQUAL
30471: PUSH
30472: LD_EXP 82
30476: PUSH
30477: LD_INT 1
30479: EQUAL
30480: AND
30481: IFFALSE 30487
// PrepareAttackFromKappa ;
30483: CALL 5252 0 0
// if KappaStatus = 0 and JMMGirlStatus = 0 then
30487: LD_EXP 81
30491: PUSH
30492: LD_INT 0
30494: EQUAL
30495: PUSH
30496: LD_EXP 82
30500: PUSH
30501: LD_INT 0
30503: EQUAL
30504: AND
30505: IFFALSE 30511
// PrepareAttackFromKappa ;
30507: CALL 5252 0 0
// end ;
30511: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
30512: LD_INT 1
30514: PPUSH
30515: LD_EXP 35
30519: PPUSH
30520: CALL_OW 292
30524: IFFALSE 30792
30526: GO 30528
30528: DISABLE
// begin missionStage = 2 ;
30529: LD_ADDR_EXP 101
30533: PUSH
30534: LD_INT 2
30536: ST_TO_ADDR
// CenterNowOnUnits ( sewiVeh ) ;
30537: LD_EXP 35
30541: PPUSH
30542: CALL_OW 87
// DialogueOn ;
30546: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
30550: LD_EXP 1
30554: PPUSH
30555: LD_STRING D10nB-JMM-1
30557: PPUSH
30558: CALL_OW 88
// if BurlakStatus = 1 then
30562: LD_EXP 76
30566: PUSH
30567: LD_INT 1
30569: EQUAL
30570: IFFALSE 30584
// Say ( Vsevolod , D10nB-Vse-1a ) ;
30572: LD_EXP 34
30576: PPUSH
30577: LD_STRING D10nB-Vse-1a
30579: PPUSH
30580: CALL_OW 88
// if BurlakStatus = 0 then
30584: LD_EXP 76
30588: PUSH
30589: LD_INT 0
30591: EQUAL
30592: IFFALSE 30606
// Say ( Vsevolod , D10nB-Vse-1 ) ;
30594: LD_EXP 34
30598: PPUSH
30599: LD_STRING D10nB-Vse-1
30601: PPUSH
30602: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
30606: LD_EXP 1
30610: PPUSH
30611: LD_STRING D10nB-JMM-2
30613: PPUSH
30614: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 1 then
30618: LD_EXP 81
30622: PUSH
30623: LD_EXP 82
30627: PUSH
30628: LD_INT 1
30630: EQUAL
30631: AND
30632: IFFALSE 30646
// Say ( Vsevolod , D10nB-Vse-5 ) ;
30634: LD_EXP 34
30638: PPUSH
30639: LD_STRING D10nB-Vse-5
30641: PPUSH
30642: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 0 then
30646: LD_EXP 81
30650: PUSH
30651: LD_EXP 82
30655: PUSH
30656: LD_INT 0
30658: EQUAL
30659: AND
30660: IFFALSE 30788
// begin if JMMGirl = 1 then
30662: LD_EXP 80
30666: PUSH
30667: LD_INT 1
30669: EQUAL
30670: IFFALSE 30720
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
30672: LD_EXP 34
30676: PPUSH
30677: LD_STRING D10nB-Vse-2
30679: PPUSH
30680: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
30684: LD_EXP 1
30688: PPUSH
30689: LD_STRING D10nB-JMM-3
30691: PPUSH
30692: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
30696: LD_EXP 34
30700: PPUSH
30701: LD_STRING D10nB-Vse-3
30703: PPUSH
30704: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
30708: LD_EXP 1
30712: PPUSH
30713: LD_STRING D10nB-JMM-4
30715: PPUSH
30716: CALL_OW 88
// end ; if JMMGirl = 2 then
30720: LD_EXP 80
30724: PUSH
30725: LD_INT 2
30727: EQUAL
30728: IFFALSE 30754
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
30730: LD_EXP 34
30734: PPUSH
30735: LD_STRING D10nB-Vse-4
30737: PPUSH
30738: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
30742: LD_EXP 1
30746: PPUSH
30747: LD_STRING D10nB-JMM-5
30749: PPUSH
30750: CALL_OW 88
// end ; if JMMGirl = 3 then
30754: LD_EXP 80
30758: PUSH
30759: LD_INT 3
30761: EQUAL
30762: IFFALSE 30788
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
30764: LD_EXP 34
30768: PPUSH
30769: LD_STRING D10nB-Vse-5
30771: PPUSH
30772: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
30776: LD_EXP 1
30780: PPUSH
30781: LD_STRING D10nB-JMM-6
30783: PPUSH
30784: CALL_OW 88
// end ; end ; DialogueOff ;
30788: CALL_OW 7
// end ;
30792: END
// every 0 0$1 trigger timeAction >= 30 30$02 do
30793: LD_EXP 97
30797: PUSH
30798: LD_INT 63070
30800: GREATEREQUAL
30801: IFFALSE 31079
30803: GO 30805
30805: DISABLE
// begin PrepareOmegaTeam ;
30806: CALL 2789 0 0
// missionStage = 3 ;
30810: LD_ADDR_EXP 101
30814: PUSH
30815: LD_INT 3
30817: ST_TO_ADDR
// DialogueOn ;
30818: CALL_OW 6
// if StevensStatus = 1 then
30822: LD_EXP 77
30826: PUSH
30827: LD_INT 1
30829: EQUAL
30830: IFFALSE 30942
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
30832: LD_EXP 3
30836: PPUSH
30837: CALL_OW 310
30841: PPUSH
30842: CALL_OW 87
// Say ( Stevens , D8-Huck-1 ) ;
30846: LD_EXP 3
30850: PPUSH
30851: LD_STRING D8-Huck-1
30853: PPUSH
30854: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
30858: LD_EXP 1
30862: PPUSH
30863: LD_STRING D8-JMM-1
30865: PPUSH
30866: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
30870: LD_EXP 3
30874: PPUSH
30875: LD_STRING D8-Huck-2
30877: PPUSH
30878: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
30882: LD_EXP 1
30886: PPUSH
30887: LD_STRING D8-JMM-2
30889: PPUSH
30890: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
30894: LD_EXP 3
30898: PPUSH
30899: LD_STRING D8-Huck-3
30901: PPUSH
30902: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
30906: LD_EXP 1
30910: PPUSH
30911: LD_STRING D8-JMM-3
30913: PPUSH
30914: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
30918: LD_EXP 3
30922: PPUSH
30923: LD_STRING D8-Huck-4
30925: PPUSH
30926: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
30930: LD_EXP 1
30934: PPUSH
30935: LD_STRING D8-JMM-4
30937: PPUSH
30938: CALL_OW 88
// end ; if StevensStatus = 0 then
30942: LD_EXP 77
30946: PUSH
30947: LD_INT 0
30949: EQUAL
30950: IFFALSE 31062
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
30952: LD_EXP 21
30956: PPUSH
30957: CALL_OW 310
30961: PPUSH
30962: CALL_OW 87
// Say ( Baker , D8-Huck-1 ) ;
30966: LD_EXP 21
30970: PPUSH
30971: LD_STRING D8-Huck-1
30973: PPUSH
30974: CALL_OW 88
// Say ( JMM , D8-JMM-1a ) ;
30978: LD_EXP 1
30982: PPUSH
30983: LD_STRING D8-JMM-1a
30985: PPUSH
30986: CALL_OW 88
// Say ( Baker , D8-Huck-2 ) ;
30990: LD_EXP 21
30994: PPUSH
30995: LD_STRING D8-Huck-2
30997: PPUSH
30998: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
31002: LD_EXP 1
31006: PPUSH
31007: LD_STRING D8-JMM-2
31009: PPUSH
31010: CALL_OW 88
// Say ( Baker , D8-Huck-3 ) ;
31014: LD_EXP 21
31018: PPUSH
31019: LD_STRING D8-Huck-3
31021: PPUSH
31022: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
31026: LD_EXP 1
31030: PPUSH
31031: LD_STRING D8-JMM-3
31033: PPUSH
31034: CALL_OW 88
// Say ( Baker , D8-Huck-4 ) ;
31038: LD_EXP 21
31042: PPUSH
31043: LD_STRING D8-Huck-4
31045: PPUSH
31046: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
31050: LD_EXP 1
31054: PPUSH
31055: LD_STRING D8-JMM-4
31057: PPUSH
31058: CALL_OW 88
// end ; DialogueOff ;
31062: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
31066: LD_INT 25
31068: PPUSH
31069: LD_INT 1
31071: PPUSH
31072: LD_INT 1
31074: PPUSH
31075: CALL_OW 322
// end ;
31079: END
// every 0 0$1 trigger timeAction >= 35 35$02 do var dec ;
31080: LD_EXP 97
31084: PUSH
31085: LD_INT 73570
31087: GREATEREQUAL
31088: IFFALSE 31438
31090: GO 31092
31092: DISABLE
31093: LD_INT 0
31095: PPUSH
// begin missionStage = 4 ;
31096: LD_ADDR_EXP 101
31100: PUSH
31101: LD_INT 4
31103: ST_TO_ADDR
// DialogueOn ;
31104: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
31108: LD_EXP 28
31112: PPUSH
31113: LD_STRING D9-Roth-1
31115: PPUSH
31116: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
31120: LD_EXP 1
31124: PPUSH
31125: LD_STRING D9-JMM-1
31127: PPUSH
31128: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
31132: LD_EXP 28
31136: PPUSH
31137: LD_STRING D9-Roth-2
31139: PPUSH
31140: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
31144: LD_EXP 28
31148: PPUSH
31149: LD_STRING D9-Roth-2a
31151: PPUSH
31152: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
31156: LD_EXP 26
31160: PPUSH
31161: LD_STRING D9-Pla-2
31163: PPUSH
31164: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
31168: LD_EXP 28
31172: PPUSH
31173: LD_STRING D9-Roth-3
31175: PPUSH
31176: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
31180: LD_EXP 26
31184: PPUSH
31185: LD_STRING D9-Pla-3
31187: PPUSH
31188: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
31192: LD_EXP 28
31196: PPUSH
31197: LD_STRING D9-Roth-4
31199: PPUSH
31200: CALL_OW 94
// dec = Query ( Q9 ) ;
31204: LD_ADDR_VAR 0 1
31208: PUSH
31209: LD_STRING Q9
31211: PPUSH
31212: CALL_OW 97
31216: ST_TO_ADDR
// if dec = 1 then
31217: LD_VAR 0 1
31221: PUSH
31222: LD_INT 1
31224: EQUAL
31225: IFFALSE 31239
// SayRadio ( Roth , D9a-Roth-1 ) ;
31227: LD_EXP 28
31231: PPUSH
31232: LD_STRING D9a-Roth-1
31234: PPUSH
31235: CALL_OW 94
// if dec = 2 then
31239: LD_VAR 0 1
31243: PUSH
31244: LD_INT 2
31246: EQUAL
31247: IFFALSE 31273
// begin Say ( JMM , D9b-JMM-1 ) ;
31249: LD_EXP 1
31253: PPUSH
31254: LD_STRING D9b-JMM-1
31256: PPUSH
31257: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
31261: LD_EXP 28
31265: PPUSH
31266: LD_STRING D9b-Roth-1
31268: PPUSH
31269: CALL_OW 94
// end ; if dec = 3 then
31273: LD_VAR 0 1
31277: PUSH
31278: LD_INT 3
31280: EQUAL
31281: IFFALSE 31343
// begin Say ( JMM , D9c-JMM-1 ) ;
31283: LD_EXP 1
31287: PPUSH
31288: LD_STRING D9c-JMM-1
31290: PPUSH
31291: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
31295: LD_EXP 28
31299: PPUSH
31300: LD_STRING D9c-Roth-1
31302: PPUSH
31303: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
31307: LD_EXP 1
31311: PPUSH
31312: LD_STRING D9c-JMM-2
31314: PPUSH
31315: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
31319: LD_EXP 28
31323: PPUSH
31324: LD_STRING D9c-Roth-2
31326: PPUSH
31327: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
31331: LD_EXP 1
31335: PPUSH
31336: LD_STRING D9c-JMM-3
31338: PPUSH
31339: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
31343: LD_EXP 28
31347: PPUSH
31348: LD_STRING D9c-Roth-3
31350: PPUSH
31351: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
31355: LD_EXP 28
31359: PPUSH
31360: LD_STRING D9cont-Roth-1
31362: PPUSH
31363: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
31367: LD_EXP 1
31371: PPUSH
31372: LD_STRING D9cont-JMM-1
31374: PPUSH
31375: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
31379: LD_EXP 28
31383: PPUSH
31384: LD_STRING D9cont-Roth-2
31386: PPUSH
31387: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
31391: LD_EXP 1
31395: PPUSH
31396: LD_STRING D9cont-JMM-2
31398: PPUSH
31399: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
31403: LD_EXP 28
31407: PPUSH
31408: LD_STRING D9cont-Roth-3
31410: PPUSH
31411: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
31415: LD_EXP 1
31419: PPUSH
31420: LD_STRING D9cont-JMM-3
31422: PPUSH
31423: CALL_OW 88
// DialogueOff ;
31427: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
31431: LD_STRING M3
31433: PPUSH
31434: CALL_OW 337
// end ;
31438: PPOPN 1
31440: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= [ 20 , 18 , 15 ] [ Difficulty ] do var i , tmp ;
31441: LD_INT 22
31443: PUSH
31444: LD_INT 7
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 21
31453: PUSH
31454: LD_INT 1
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PPUSH
31465: CALL_OW 69
31469: PUSH
31470: LD_INT 20
31472: PUSH
31473: LD_INT 18
31475: PUSH
31476: LD_INT 15
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: LIST
31483: PUSH
31484: LD_OWVAR 67
31488: ARRAY
31489: LESSEQUAL
31490: IFFALSE 31976
31492: GO 31494
31494: DISABLE
31495: LD_INT 0
31497: PPUSH
31498: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_lives , 900 ] ] ) do
31499: LD_ADDR_VAR 0 1
31503: PUSH
31504: LD_INT 22
31506: PUSH
31507: LD_INT 7
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 21
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 23
31526: PUSH
31527: LD_INT 3
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 24
31536: PUSH
31537: LD_INT 900
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: PPUSH
31550: CALL_OW 69
31554: PUSH
31555: FOR_IN
31556: IFFALSE 31587
// if GetSex ( i ) = sex_male then
31558: LD_VAR 0 1
31562: PPUSH
31563: CALL_OW 258
31567: PUSH
31568: LD_INT 1
31570: EQUAL
31571: IFFALSE 31585
// begin tmp = i ;
31573: LD_ADDR_VAR 0 2
31577: PUSH
31578: LD_VAR 0 1
31582: ST_TO_ADDR
// break ;
31583: GO 31587
// end ;
31585: GO 31555
31587: POP
31588: POP
// if tmp = 0 then
31589: LD_VAR 0 2
31593: PUSH
31594: LD_INT 0
31596: EQUAL
31597: IFFALSE 31651
// begin uc_side = 7 ;
31599: LD_ADDR_OWVAR 20
31603: PUSH
31604: LD_INT 7
31606: ST_TO_ADDR
// uc_nation = 3 ;
31607: LD_ADDR_OWVAR 21
31611: PUSH
31612: LD_INT 3
31614: ST_TO_ADDR
// hc_name =  ;
31615: LD_ADDR_OWVAR 26
31619: PUSH
31620: LD_STRING 
31622: ST_TO_ADDR
// hc_gallery =  ;
31623: LD_ADDR_OWVAR 33
31627: PUSH
31628: LD_STRING 
31630: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
31631: LD_INT 1
31633: PPUSH
31634: LD_INT 10
31636: PPUSH
31637: CALL_OW 381
// tmp = CreateHuman ;
31641: LD_ADDR_VAR 0 2
31645: PUSH
31646: CALL_OW 44
31650: ST_TO_ADDR
// end ; AllianceAI = 0 ;
31651: LD_ADDR_EXP 85
31655: PUSH
31656: LD_INT 0
31658: ST_TO_ADDR
// AllianceEscape = 1 ;
31659: LD_ADDR_EXP 91
31663: PUSH
31664: LD_INT 1
31666: ST_TO_ADDR
// SetAttitude ( 7 , 1 , att_friend , true ) ;
31667: LD_INT 7
31669: PPUSH
31670: LD_INT 1
31672: PPUSH
31673: LD_INT 1
31675: PPUSH
31676: LD_INT 1
31678: PPUSH
31679: CALL_OW 80
// DialogueOn ;
31683: CALL_OW 6
// if IsOK ( Roth ) then
31687: LD_EXP 28
31691: PPUSH
31692: CALL_OW 302
31696: IFFALSE 31710
// Say ( JMM , DAb-JMM-1 ) ;
31698: LD_EXP 1
31702: PPUSH
31703: LD_STRING DAb-JMM-1
31705: PPUSH
31706: CALL_OW 88
// if IsOK ( Roth ) then
31710: LD_EXP 28
31714: PPUSH
31715: CALL_OW 302
31719: IFFALSE 31735
// Say ( Roth , DSurrenderAlliance-Roth-1 ) else
31721: LD_EXP 28
31725: PPUSH
31726: LD_STRING DSurrenderAlliance-Roth-1
31728: PPUSH
31729: CALL_OW 88
31733: GO 31747
// Say ( tmp , DSurrenderAlliance-Sci1-1 ) ;
31735: LD_VAR 0 2
31739: PPUSH
31740: LD_STRING DSurrenderAlliance-Sci1-1
31742: PPUSH
31743: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) = 1 then
31747: LD_INT 23
31749: PPUSH
31750: LD_INT 22
31752: PUSH
31753: LD_INT 4
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PPUSH
31760: CALL_OW 70
31764: PUSH
31765: LD_INT 1
31767: EQUAL
31768: IFFALSE 31782
// Say ( JMM , DAb-JMM-1a ) ;
31770: LD_EXP 1
31774: PPUSH
31775: LD_STRING DAb-JMM-1a
31777: PPUSH
31778: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 1 then
31782: LD_INT 23
31784: PPUSH
31785: LD_INT 22
31787: PUSH
31788: LD_INT 4
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PPUSH
31795: CALL_OW 70
31799: PUSH
31800: LD_INT 1
31802: GREATER
31803: IFFALSE 31817
// Say ( JMM , DAb-JMM-1b ) ;
31805: LD_EXP 1
31809: PPUSH
31810: LD_STRING DAb-JMM-1b
31812: PPUSH
31813: CALL_OW 88
// DialogueOff ;
31817: CALL_OW 7
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 0 then
31821: LD_INT 23
31823: PPUSH
31824: LD_INT 22
31826: PUSH
31827: LD_INT 4
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PPUSH
31834: CALL_OW 70
31838: PUSH
31839: LD_INT 0
31841: GREATER
31842: IFFALSE 31869
// SetSide ( FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) , 1 ) ;
31844: LD_INT 23
31846: PPUSH
31847: LD_INT 22
31849: PUSH
31850: LD_INT 4
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PPUSH
31857: CALL_OW 70
31861: PPUSH
31862: LD_INT 1
31864: PPUSH
31865: CALL_OW 235
// if IsDying ( Roth ) then
31869: LD_EXP 28
31873: PPUSH
31874: CALL_OW 303
31878: IFFALSE 31900
// begin RothStatus = 0 ;
31880: LD_ADDR_EXP 92
31884: PUSH
31885: LD_INT 0
31887: ST_TO_ADDR
// SetLives ( Roth , 0 ) ;
31888: LD_EXP 28
31892: PPUSH
31893: LD_INT 0
31895: PPUSH
31896: CALL_OW 234
// end ; ComExitBuilding ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ) ;
31900: LD_INT 22
31902: PUSH
31903: LD_INT 7
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 21
31912: PUSH
31913: LD_INT 1
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PPUSH
31924: CALL_OW 69
31928: PPUSH
31929: CALL_OW 122
// wait ( 0 0$1 ) ;
31933: LD_INT 35
31935: PPUSH
31936: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) , AllianceEscapeArea ) ;
31940: LD_INT 22
31942: PUSH
31943: LD_INT 7
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 21
31952: PUSH
31953: LD_INT 1
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PPUSH
31964: CALL_OW 69
31968: PPUSH
31969: LD_INT 28
31971: PPUSH
31972: CALL_OW 113
// end ;
31976: PPOPN 2
31978: END
// every 0 0$1 trigger AllianceEscape = 1 and FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do var i ;
31979: LD_EXP 91
31983: PUSH
31984: LD_INT 1
31986: EQUAL
31987: PUSH
31988: LD_INT 28
31990: PPUSH
31991: LD_INT 22
31993: PUSH
31994: LD_INT 7
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 21
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PPUSH
32015: CALL_OW 70
32019: AND
32020: IFFALSE 32082
32022: GO 32024
32024: DISABLE
32025: LD_INT 0
32027: PPUSH
// begin enable ;
32028: ENABLE
// for i in FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
32029: LD_ADDR_VAR 0 1
32033: PUSH
32034: LD_INT 28
32036: PPUSH
32037: LD_INT 22
32039: PUSH
32040: LD_INT 7
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 21
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PPUSH
32061: CALL_OW 70
32065: PUSH
32066: FOR_IN
32067: IFFALSE 32080
// RemoveUnit ( i ) ;
32069: LD_VAR 0 1
32073: PPUSH
32074: CALL_OW 64
32078: GO 32066
32080: POP
32081: POP
// end ;
32082: PPOPN 1
32084: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 or FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 and IsOK ( Roth ) and AllianceAI = 1 do var tpUnit , heroes , rnd ;
32085: LD_INT 33
32087: PPUSH
32088: LD_INT 22
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 21
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PPUSH
32112: CALL_OW 70
32116: PUSH
32117: LD_INT 0
32119: GREATER
32120: PUSH
32121: LD_INT 33
32123: PPUSH
32124: LD_INT 22
32126: PUSH
32127: LD_INT 1
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 21
32136: PUSH
32137: LD_INT 2
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 33
32146: PUSH
32147: LD_INT 1
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 3
32156: PUSH
32157: LD_INT 58
32159: PUSH
32160: EMPTY
32161: LIST
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: PPUSH
32173: CALL_OW 70
32177: PUSH
32178: LD_INT 0
32180: GREATER
32181: PUSH
32182: LD_EXP 28
32186: PPUSH
32187: CALL_OW 302
32191: AND
32192: PUSH
32193: LD_EXP 85
32197: PUSH
32198: LD_INT 1
32200: EQUAL
32201: AND
32202: OR
32203: IFFALSE 34573
32205: GO 32207
32207: DISABLE
32208: LD_INT 0
32210: PPUSH
32211: PPUSH
32212: PPUSH
// begin tpUnit = FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_control , 1 ] ] ] ) [ 1 ] ;
32213: LD_ADDR_VAR 0 1
32217: PUSH
32218: LD_INT 33
32220: PPUSH
32221: LD_INT 22
32223: PUSH
32224: LD_INT 1
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 2
32233: PUSH
32234: LD_INT 21
32236: PUSH
32237: LD_INT 1
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 33
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: LIST
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PPUSH
32263: CALL_OW 70
32267: PUSH
32268: LD_INT 1
32270: ARRAY
32271: ST_TO_ADDR
// heroes = [ JMM , Joan , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
32272: LD_ADDR_VAR 0 2
32276: PUSH
32277: LD_EXP 1
32281: PUSH
32282: LD_EXP 2
32286: PUSH
32287: LD_EXP 3
32291: PUSH
32292: LD_EXP 21
32296: PUSH
32297: LD_EXP 4
32301: PUSH
32302: LD_EXP 5
32306: PUSH
32307: LD_EXP 6
32311: PUSH
32312: LD_EXP 7
32316: PUSH
32317: LD_EXP 8
32321: PUSH
32322: LD_EXP 9
32326: PUSH
32327: LD_EXP 10
32331: PUSH
32332: LD_EXP 11
32336: PUSH
32337: LD_EXP 12
32341: PUSH
32342: LD_EXP 13
32346: PUSH
32347: LD_EXP 14
32351: PUSH
32352: LD_EXP 15
32356: PUSH
32357: LD_EXP 16
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: ST_TO_ADDR
// InGameOn ;
32381: CALL_OW 8
// SetAttitude ( 1 , 7 , att_friend , true ) ;
32385: LD_INT 1
32387: PPUSH
32388: LD_INT 7
32390: PPUSH
32391: LD_INT 1
32393: PPUSH
32394: LD_INT 1
32396: PPUSH
32397: CALL_OW 80
// CenterNowOnUnits ( tpUnit ) ;
32401: LD_VAR 0 1
32405: PPUSH
32406: CALL_OW 87
// if GetType ( tpUnit ) = unit_vehicle then
32410: LD_VAR 0 1
32414: PPUSH
32415: CALL_OW 247
32419: PUSH
32420: LD_INT 2
32422: EQUAL
32423: IFFALSE 32444
// tpUnit = UnitsInside ( tpUnit ) [ 1 ] ;
32425: LD_ADDR_VAR 0 1
32429: PUSH
32430: LD_VAR 0 1
32434: PPUSH
32435: CALL_OW 313
32439: PUSH
32440: LD_INT 1
32442: ARRAY
32443: ST_TO_ADDR
// ComExitVehicle ( tpUnit ) ;
32444: LD_VAR 0 1
32448: PPUSH
32449: CALL_OW 121
// wait ( 0 0$1 ) ;
32453: LD_INT 35
32455: PPUSH
32456: CALL_OW 67
// TeleportUnit ( tpUnit , 248 , 186 , 4 , true ) ;
32460: LD_VAR 0 1
32464: PPUSH
32465: LD_INT 248
32467: PPUSH
32468: LD_INT 186
32470: PPUSH
32471: LD_INT 4
32473: PPUSH
32474: LD_INT 1
32476: PPUSH
32477: CALL_OW 483
// wait ( 0 0$2 ) ;
32481: LD_INT 70
32483: PPUSH
32484: CALL_OW 67
// CenterNowOnUnits ( tpUnit ) ;
32488: LD_VAR 0 1
32492: PPUSH
32493: CALL_OW 87
// ComTurnUnit ( tpUnit , Roth ) ;
32497: LD_VAR 0 1
32501: PPUSH
32502: LD_EXP 28
32506: PPUSH
32507: CALL_OW 119
// ComTurnUnit ( [ Roth , Simms ] , tpUnit ) ;
32511: LD_EXP 28
32515: PUSH
32516: LD_EXP 48
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PPUSH
32525: LD_VAR 0 1
32529: PPUSH
32530: CALL_OW 119
// if tpUnit = JMM then
32534: LD_VAR 0 1
32538: PUSH
32539: LD_EXP 1
32543: EQUAL
32544: IFFALSE 32558
// Say ( JMM , DA1-JMM-1 ) ;
32546: LD_EXP 1
32550: PPUSH
32551: LD_STRING DA1-JMM-1
32553: PPUSH
32554: CALL_OW 88
// if tpUnit = Joan then
32558: LD_VAR 0 1
32562: PUSH
32563: LD_EXP 2
32567: EQUAL
32568: IFFALSE 32582
// Say ( Joan , DA1-Joan-1 ) ;
32570: LD_EXP 2
32574: PPUSH
32575: LD_STRING DA1-Joan-1
32577: PPUSH
32578: CALL_OW 88
// if tpUnit = Lisa then
32582: LD_VAR 0 1
32586: PUSH
32587: LD_EXP 4
32591: EQUAL
32592: IFFALSE 32606
// Say ( Lisa , DA1-Lisa-1 ) ;
32594: LD_EXP 4
32598: PPUSH
32599: LD_STRING DA1-Lisa-1
32601: PPUSH
32602: CALL_OW 88
// if tpUnit = Donaldson then
32606: LD_VAR 0 1
32610: PUSH
32611: LD_EXP 5
32615: EQUAL
32616: IFFALSE 32630
// Say ( Donaldson , DA1-Don-1 ) ;
32618: LD_EXP 5
32622: PPUSH
32623: LD_STRING DA1-Don-1
32625: PPUSH
32626: CALL_OW 88
// if tpUnit = Cornel then
32630: LD_VAR 0 1
32634: PUSH
32635: LD_EXP 12
32639: EQUAL
32640: IFFALSE 32654
// Say ( Cornel , DA1-Corn-1 ) ;
32642: LD_EXP 12
32646: PPUSH
32647: LD_STRING DA1-Corn-1
32649: PPUSH
32650: CALL_OW 88
// if tpUnit = Denis then
32654: LD_VAR 0 1
32658: PUSH
32659: LD_EXP 8
32663: EQUAL
32664: IFFALSE 32678
// Say ( Denis , DA1-Den-1 ) ;
32666: LD_EXP 8
32670: PPUSH
32671: LD_STRING DA1-Den-1
32673: PPUSH
32674: CALL_OW 88
// if tpUnit = Bobby then
32678: LD_VAR 0 1
32682: PUSH
32683: LD_EXP 6
32687: EQUAL
32688: IFFALSE 32702
// Say ( Bobby , DA1-Bobby-1 ) ;
32690: LD_EXP 6
32694: PPUSH
32695: LD_STRING DA1-Bobby-1
32697: PPUSH
32698: CALL_OW 88
// if tpUnit = Gladstone then
32702: LD_VAR 0 1
32706: PUSH
32707: LD_EXP 10
32711: EQUAL
32712: IFFALSE 32726
// Say ( Gladstone , DA1-Glad-1 ) ;
32714: LD_EXP 10
32718: PPUSH
32719: LD_STRING DA1-Glad-1
32721: PPUSH
32722: CALL_OW 88
// if tpUnit = Cyrus then
32726: LD_VAR 0 1
32730: PUSH
32731: LD_EXP 7
32735: EQUAL
32736: IFFALSE 32750
// Say ( Cyrus , DA1-Cyrus-1 ) ;
32738: LD_EXP 7
32742: PPUSH
32743: LD_STRING DA1-Cyrus-1
32745: PPUSH
32746: CALL_OW 88
// if tpUnit = Stevens then
32750: LD_VAR 0 1
32754: PUSH
32755: LD_EXP 3
32759: EQUAL
32760: IFFALSE 32774
// Say ( Stevens , DA1-Huck-1 ) ;
32762: LD_EXP 3
32766: PPUSH
32767: LD_STRING DA1-Huck-1
32769: PPUSH
32770: CALL_OW 88
// if tpUnit = Baker then
32774: LD_VAR 0 1
32778: PUSH
32779: LD_EXP 21
32783: EQUAL
32784: IFFALSE 32798
// Say ( Baker , DA1-Huck-1 ) ;
32786: LD_EXP 21
32790: PPUSH
32791: LD_STRING DA1-Huck-1
32793: PPUSH
32794: CALL_OW 88
// if tpUnit = Brown then
32798: LD_VAR 0 1
32802: PUSH
32803: LD_EXP 9
32807: EQUAL
32808: IFFALSE 32822
// Say ( Brown , DA1-Brown-1 ) ;
32810: LD_EXP 9
32814: PPUSH
32815: LD_STRING DA1-Brown-1
32817: PPUSH
32818: CALL_OW 88
// if tpUnit = Gary then
32822: LD_VAR 0 1
32826: PUSH
32827: LD_EXP 13
32831: EQUAL
32832: IFFALSE 32846
// Say ( Gary , DA1-Gary-1 ) ;
32834: LD_EXP 13
32838: PPUSH
32839: LD_STRING DA1-Gary-1
32841: PPUSH
32842: CALL_OW 88
// if tpUnit = Connie then
32846: LD_VAR 0 1
32850: PUSH
32851: LD_EXP 16
32855: EQUAL
32856: IFFALSE 32870
// Say ( Connie , DA1-Con-1 ) ;
32858: LD_EXP 16
32862: PPUSH
32863: LD_STRING DA1-Con-1
32865: PPUSH
32866: CALL_OW 88
// if tpUnit = Kurt then
32870: LD_VAR 0 1
32874: PUSH
32875: LD_EXP 30
32879: EQUAL
32880: IFFALSE 32894
// Say ( Kurt , DA1-Kurt-1 ) ;
32882: LD_EXP 30
32886: PPUSH
32887: LD_STRING DA1-Kurt-1
32889: PPUSH
32890: CALL_OW 88
// if tpUnit = Kikuchi then
32894: LD_VAR 0 1
32898: PUSH
32899: LD_EXP 15
32903: EQUAL
32904: IFFALSE 32918
// Say ( Kikuchi , DA1-Yam-1 ) ;
32906: LD_EXP 15
32910: PPUSH
32911: LD_STRING DA1-Yam-1
32913: PPUSH
32914: CALL_OW 88
// if tpUnit = Frank then
32918: LD_VAR 0 1
32922: PUSH
32923: LD_EXP 14
32927: EQUAL
32928: IFFALSE 32942
// Say ( Frank , DA1-Frank-1 ) ;
32930: LD_EXP 14
32934: PPUSH
32935: LD_STRING DA1-Frank-1
32937: PPUSH
32938: CALL_OW 88
// if not tpUnit in heroes then
32942: LD_VAR 0 1
32946: PUSH
32947: LD_VAR 0 2
32951: IN
32952: NOT
32953: IFFALSE 33009
// begin if GetSex ( tpUnit ) = 1 then
32955: LD_VAR 0 1
32959: PPUSH
32960: CALL_OW 258
32964: PUSH
32965: LD_INT 1
32967: EQUAL
32968: IFFALSE 32982
// Say ( tpUnit , DA1-Sol1-1 ) ;
32970: LD_VAR 0 1
32974: PPUSH
32975: LD_STRING DA1-Sol1-1
32977: PPUSH
32978: CALL_OW 88
// if GetSex ( tpUnit ) = 2 then
32982: LD_VAR 0 1
32986: PPUSH
32987: CALL_OW 258
32991: PUSH
32992: LD_INT 2
32994: EQUAL
32995: IFFALSE 33009
// Say ( tpUnit , DA1-FSol1-1 ) ;
32997: LD_VAR 0 1
33001: PPUSH
33002: LD_STRING DA1-FSol1-1
33004: PPUSH
33005: CALL_OW 88
// end ; Say ( Roth , DA-Roth-1 ) ;
33009: LD_EXP 28
33013: PPUSH
33014: LD_STRING DA-Roth-1
33016: PPUSH
33017: CALL_OW 88
// Say ( Simms , DA-Sim-1 ) ;
33021: LD_EXP 48
33025: PPUSH
33026: LD_STRING DA-Sim-1
33028: PPUSH
33029: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
33033: LD_EXP 28
33037: PPUSH
33038: LD_STRING DA-Roth-2
33040: PPUSH
33041: CALL_OW 88
// if tpUnit = JMM then
33045: LD_VAR 0 1
33049: PUSH
33050: LD_EXP 1
33054: EQUAL
33055: IFFALSE 33088
// begin Say ( JMM , DA1-JMM-1a ) ;
33057: LD_EXP 1
33061: PPUSH
33062: LD_STRING DA1-JMM-1a
33064: PPUSH
33065: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33069: LD_EXP 28
33073: PPUSH
33074: LD_STRING DA-Roth-3a
33076: PPUSH
33077: CALL_OW 88
// YouLost ( JMMCaptured ) ;
33081: LD_STRING JMMCaptured
33083: PPUSH
33084: CALL_OW 104
// end ; if tpUnit = Joan then
33088: LD_VAR 0 1
33092: PUSH
33093: LD_EXP 2
33097: EQUAL
33098: IFFALSE 33160
// begin Say ( Joan , DA1-Joan-1a ) ;
33100: LD_EXP 2
33104: PPUSH
33105: LD_STRING DA1-Joan-1a
33107: PPUSH
33108: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33112: LD_EXP 28
33116: PPUSH
33117: LD_STRING DA-Roth-3a
33119: PPUSH
33120: CALL_OW 88
// SetSide ( Joan , 4 ) ;
33124: LD_EXP 2
33128: PPUSH
33129: LD_INT 4
33131: PPUSH
33132: CALL_OW 235
// ComMoveXY ( Joan , 257 , 198 ) ;
33136: LD_EXP 2
33140: PPUSH
33141: LD_INT 257
33143: PPUSH
33144: LD_INT 198
33146: PPUSH
33147: CALL_OW 111
// AddComHold ( Joan ) ;
33151: LD_EXP 2
33155: PPUSH
33156: CALL_OW 200
// end ; if tpUnit = Donaldson then
33160: LD_VAR 0 1
33164: PUSH
33165: LD_EXP 5
33169: EQUAL
33170: IFFALSE 33223
// begin Say ( Donaldson , DA1-Don-1a ) ;
33172: LD_EXP 5
33176: PPUSH
33177: LD_STRING DA1-Don-1a
33179: PPUSH
33180: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33184: LD_EXP 28
33188: PPUSH
33189: LD_STRING DA-Roth-3
33191: PPUSH
33192: CALL_OW 88
// SetSide ( Donaldson , 7 ) ;
33196: LD_EXP 5
33200: PPUSH
33201: LD_INT 7
33203: PPUSH
33204: CALL_OW 235
// ComMoveXY ( Donaldson , 240 , 188 ) ;
33208: LD_EXP 5
33212: PPUSH
33213: LD_INT 240
33215: PPUSH
33216: LD_INT 188
33218: PPUSH
33219: CALL_OW 111
// end ; if tpUnit = Cornel then
33223: LD_VAR 0 1
33227: PUSH
33228: LD_EXP 12
33232: EQUAL
33233: IFFALSE 33295
// begin Say ( Cornel , DA1-Corn-1a ) ;
33235: LD_EXP 12
33239: PPUSH
33240: LD_STRING DA1-Corn-1a
33242: PPUSH
33243: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33247: LD_EXP 28
33251: PPUSH
33252: LD_STRING DA-Roth-3a
33254: PPUSH
33255: CALL_OW 88
// SetSide ( Cornel , 4 ) ;
33259: LD_EXP 12
33263: PPUSH
33264: LD_INT 4
33266: PPUSH
33267: CALL_OW 235
// ComMoveXY ( Cornel , 257 , 198 ) ;
33271: LD_EXP 12
33275: PPUSH
33276: LD_INT 257
33278: PPUSH
33279: LD_INT 198
33281: PPUSH
33282: CALL_OW 111
// AddComHold ( Cornel ) ;
33286: LD_EXP 12
33290: PPUSH
33291: CALL_OW 200
// end ; if tpUnit = Denis then
33295: LD_VAR 0 1
33299: PUSH
33300: LD_EXP 8
33304: EQUAL
33305: IFFALSE 33358
// begin Say ( Denis , DA1-Den-1a ) ;
33307: LD_EXP 8
33311: PPUSH
33312: LD_STRING DA1-Den-1a
33314: PPUSH
33315: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33319: LD_EXP 28
33323: PPUSH
33324: LD_STRING DA-Roth-3
33326: PPUSH
33327: CALL_OW 88
// SetSide ( Denis , 7 ) ;
33331: LD_EXP 8
33335: PPUSH
33336: LD_INT 7
33338: PPUSH
33339: CALL_OW 235
// ComMoveXY ( Denis , 240 , 188 ) ;
33343: LD_EXP 8
33347: PPUSH
33348: LD_INT 240
33350: PPUSH
33351: LD_INT 188
33353: PPUSH
33354: CALL_OW 111
// end ; if tpUnit = Bobby then
33358: LD_VAR 0 1
33362: PUSH
33363: LD_EXP 6
33367: EQUAL
33368: IFFALSE 33421
// begin Say ( Joan , DA1-Bobby-1a ) ;
33370: LD_EXP 2
33374: PPUSH
33375: LD_STRING DA1-Bobby-1a
33377: PPUSH
33378: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33382: LD_EXP 28
33386: PPUSH
33387: LD_STRING DA-Roth-3
33389: PPUSH
33390: CALL_OW 88
// SetSide ( Bobby , 7 ) ;
33394: LD_EXP 6
33398: PPUSH
33399: LD_INT 7
33401: PPUSH
33402: CALL_OW 235
// ComMoveXY ( Bobby , 240 , 188 ) ;
33406: LD_EXP 6
33410: PPUSH
33411: LD_INT 240
33413: PPUSH
33414: LD_INT 188
33416: PPUSH
33417: CALL_OW 111
// end ; if tpUnit = Gladstone then
33421: LD_VAR 0 1
33425: PUSH
33426: LD_EXP 10
33430: EQUAL
33431: IFFALSE 33493
// begin Say ( Gladstone , DA1-Glad-1a ) ;
33433: LD_EXP 10
33437: PPUSH
33438: LD_STRING DA1-Glad-1a
33440: PPUSH
33441: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33445: LD_EXP 28
33449: PPUSH
33450: LD_STRING DA-Roth-3a
33452: PPUSH
33453: CALL_OW 88
// SetSide ( Gladstone , 4 ) ;
33457: LD_EXP 10
33461: PPUSH
33462: LD_INT 4
33464: PPUSH
33465: CALL_OW 235
// ComMoveXY ( Gladstone , 257 , 198 ) ;
33469: LD_EXP 10
33473: PPUSH
33474: LD_INT 257
33476: PPUSH
33477: LD_INT 198
33479: PPUSH
33480: CALL_OW 111
// AddComHold ( Gladstone ) ;
33484: LD_EXP 10
33488: PPUSH
33489: CALL_OW 200
// end ; if tpUnit = Cyrus then
33493: LD_VAR 0 1
33497: PUSH
33498: LD_EXP 7
33502: EQUAL
33503: IFFALSE 33565
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
33505: LD_EXP 7
33509: PPUSH
33510: LD_STRING DA1-Cyrus-1a
33512: PPUSH
33513: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33517: LD_EXP 28
33521: PPUSH
33522: LD_STRING DA-Roth-3a
33524: PPUSH
33525: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
33529: LD_EXP 7
33533: PPUSH
33534: LD_INT 4
33536: PPUSH
33537: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
33541: LD_EXP 7
33545: PPUSH
33546: LD_INT 257
33548: PPUSH
33549: LD_INT 198
33551: PPUSH
33552: CALL_OW 111
// AddComHold ( Cyrus ) ;
33556: LD_EXP 7
33560: PPUSH
33561: CALL_OW 200
// end ; if tpUnit = Stevens then
33565: LD_VAR 0 1
33569: PUSH
33570: LD_EXP 3
33574: EQUAL
33575: IFFALSE 33628
// begin Say ( Stevens , DA1-Huck-1a ) ;
33577: LD_EXP 3
33581: PPUSH
33582: LD_STRING DA1-Huck-1a
33584: PPUSH
33585: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33589: LD_EXP 28
33593: PPUSH
33594: LD_STRING DA-Roth-3
33596: PPUSH
33597: CALL_OW 88
// SetSide ( Stevens , 7 ) ;
33601: LD_EXP 3
33605: PPUSH
33606: LD_INT 7
33608: PPUSH
33609: CALL_OW 235
// ComMoveXY ( Stevens , 240 , 188 ) ;
33613: LD_EXP 3
33617: PPUSH
33618: LD_INT 240
33620: PPUSH
33621: LD_INT 188
33623: PPUSH
33624: CALL_OW 111
// end ; if tpUnit = Baker then
33628: LD_VAR 0 1
33632: PUSH
33633: LD_EXP 21
33637: EQUAL
33638: IFFALSE 33691
// begin Say ( Baker , DA1-Huck-1a ) ;
33640: LD_EXP 21
33644: PPUSH
33645: LD_STRING DA1-Huck-1a
33647: PPUSH
33648: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33652: LD_EXP 28
33656: PPUSH
33657: LD_STRING DA-Roth-3
33659: PPUSH
33660: CALL_OW 88
// SetSide ( Baker , 7 ) ;
33664: LD_EXP 21
33668: PPUSH
33669: LD_INT 7
33671: PPUSH
33672: CALL_OW 235
// ComMoveXY ( Baker , 240 , 188 ) ;
33676: LD_EXP 21
33680: PPUSH
33681: LD_INT 240
33683: PPUSH
33684: LD_INT 188
33686: PPUSH
33687: CALL_OW 111
// end ; if tpUnit = Brown then
33691: LD_VAR 0 1
33695: PUSH
33696: LD_EXP 9
33700: EQUAL
33701: IFFALSE 33754
// begin Say ( Cyrus , DA1-Brown-1a ) ;
33703: LD_EXP 7
33707: PPUSH
33708: LD_STRING DA1-Brown-1a
33710: PPUSH
33711: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33715: LD_EXP 28
33719: PPUSH
33720: LD_STRING DA-Roth-3
33722: PPUSH
33723: CALL_OW 88
// SetSide ( Brown , 7 ) ;
33727: LD_EXP 9
33731: PPUSH
33732: LD_INT 7
33734: PPUSH
33735: CALL_OW 235
// ComMoveXY ( Brown , 240 , 188 ) ;
33739: LD_EXP 9
33743: PPUSH
33744: LD_INT 240
33746: PPUSH
33747: LD_INT 188
33749: PPUSH
33750: CALL_OW 111
// end ; if tpUnit = Gary then
33754: LD_VAR 0 1
33758: PUSH
33759: LD_EXP 13
33763: EQUAL
33764: IFFALSE 33826
// begin Say ( Gary , DA1-Gary-1a ) ;
33766: LD_EXP 13
33770: PPUSH
33771: LD_STRING DA1-Gary-1a
33773: PPUSH
33774: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33778: LD_EXP 28
33782: PPUSH
33783: LD_STRING DA-Roth-3a
33785: PPUSH
33786: CALL_OW 88
// SetSide ( Gary , 4 ) ;
33790: LD_EXP 13
33794: PPUSH
33795: LD_INT 4
33797: PPUSH
33798: CALL_OW 235
// ComMoveXY ( Gary , 257 , 198 ) ;
33802: LD_EXP 13
33806: PPUSH
33807: LD_INT 257
33809: PPUSH
33810: LD_INT 198
33812: PPUSH
33813: CALL_OW 111
// AddComHold ( Gary ) ;
33817: LD_EXP 13
33821: PPUSH
33822: CALL_OW 200
// end ; if tpUnit = Cyrus then
33826: LD_VAR 0 1
33830: PUSH
33831: LD_EXP 7
33835: EQUAL
33836: IFFALSE 33898
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
33838: LD_EXP 7
33842: PPUSH
33843: LD_STRING DA1-Cyrus-1a
33845: PPUSH
33846: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33850: LD_EXP 28
33854: PPUSH
33855: LD_STRING DA-Roth-3a
33857: PPUSH
33858: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
33862: LD_EXP 7
33866: PPUSH
33867: LD_INT 4
33869: PPUSH
33870: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
33874: LD_EXP 7
33878: PPUSH
33879: LD_INT 257
33881: PPUSH
33882: LD_INT 198
33884: PPUSH
33885: CALL_OW 111
// AddComHold ( Cyrus ) ;
33889: LD_EXP 7
33893: PPUSH
33894: CALL_OW 200
// end ; if tpUnit = Connie then
33898: LD_VAR 0 1
33902: PUSH
33903: LD_EXP 16
33907: EQUAL
33908: IFFALSE 33970
// begin Say ( Connie , DA1-Con-1a ) ;
33910: LD_EXP 16
33914: PPUSH
33915: LD_STRING DA1-Con-1a
33917: PPUSH
33918: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33922: LD_EXP 28
33926: PPUSH
33927: LD_STRING DA-Roth-3a
33929: PPUSH
33930: CALL_OW 88
// SetSide ( Connie , 4 ) ;
33934: LD_EXP 16
33938: PPUSH
33939: LD_INT 4
33941: PPUSH
33942: CALL_OW 235
// ComMoveXY ( Connie , 257 , 198 ) ;
33946: LD_EXP 16
33950: PPUSH
33951: LD_INT 257
33953: PPUSH
33954: LD_INT 198
33956: PPUSH
33957: CALL_OW 111
// AddComHold ( Connie ) ;
33961: LD_EXP 16
33965: PPUSH
33966: CALL_OW 200
// end ; if tpUnit = Kurt then
33970: LD_VAR 0 1
33974: PUSH
33975: LD_EXP 30
33979: EQUAL
33980: IFFALSE 34042
// begin Say ( Kurt , DA1-Kurt-1a ) ;
33982: LD_EXP 30
33986: PPUSH
33987: LD_STRING DA1-Kurt-1a
33989: PPUSH
33990: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33994: LD_EXP 28
33998: PPUSH
33999: LD_STRING DA-Roth-3a
34001: PPUSH
34002: CALL_OW 88
// SetSide ( Kurt , 4 ) ;
34006: LD_EXP 30
34010: PPUSH
34011: LD_INT 4
34013: PPUSH
34014: CALL_OW 235
// ComMoveXY ( Kurt , 257 , 198 ) ;
34018: LD_EXP 30
34022: PPUSH
34023: LD_INT 257
34025: PPUSH
34026: LD_INT 198
34028: PPUSH
34029: CALL_OW 111
// AddComHold ( Kurt ) ;
34033: LD_EXP 30
34037: PPUSH
34038: CALL_OW 200
// end ; if tpUnit = Kikuchi then
34042: LD_VAR 0 1
34046: PUSH
34047: LD_EXP 15
34051: EQUAL
34052: IFFALSE 34105
// begin Say ( Kikuchi , DA1-Yam-1a ) ;
34054: LD_EXP 15
34058: PPUSH
34059: LD_STRING DA1-Yam-1a
34061: PPUSH
34062: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34066: LD_EXP 28
34070: PPUSH
34071: LD_STRING DA-Roth-3
34073: PPUSH
34074: CALL_OW 88
// SetSide ( Kikuchi , 7 ) ;
34078: LD_EXP 15
34082: PPUSH
34083: LD_INT 7
34085: PPUSH
34086: CALL_OW 235
// ComMoveXY ( Kikuchi , 240 , 188 ) ;
34090: LD_EXP 15
34094: PPUSH
34095: LD_INT 240
34097: PPUSH
34098: LD_INT 188
34100: PPUSH
34101: CALL_OW 111
// end ; if tpUnit = Frank then
34105: LD_VAR 0 1
34109: PUSH
34110: LD_EXP 14
34114: EQUAL
34115: IFFALSE 34177
// begin Say ( Frank , DA1-Frank-1a ) ;
34117: LD_EXP 14
34121: PPUSH
34122: LD_STRING DA1-Frank-1a
34124: PPUSH
34125: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34129: LD_EXP 28
34133: PPUSH
34134: LD_STRING DA-Roth-3a
34136: PPUSH
34137: CALL_OW 88
// SetSide ( Frank , 4 ) ;
34141: LD_EXP 14
34145: PPUSH
34146: LD_INT 4
34148: PPUSH
34149: CALL_OW 235
// ComMoveXY ( Frank , 257 , 198 ) ;
34153: LD_EXP 14
34157: PPUSH
34158: LD_INT 257
34160: PPUSH
34161: LD_INT 198
34163: PPUSH
34164: CALL_OW 111
// AddComHold ( Frank ) ;
34168: LD_EXP 14
34172: PPUSH
34173: CALL_OW 200
// end ; if allianceFirstContact = 0 then
34177: LD_EXP 64
34181: PUSH
34182: LD_INT 0
34184: EQUAL
34185: IFFALSE 34231
// begin Say ( JMM , DAa-JMM-1 ) ;
34187: LD_EXP 1
34191: PPUSH
34192: LD_STRING DAa-JMM-1
34194: PPUSH
34195: CALL_OW 88
// Say ( JMM , DAa-JMM-1a ) ;
34199: LD_EXP 1
34203: PPUSH
34204: LD_STRING DAa-JMM-1a
34206: PPUSH
34207: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
34211: LD_EXP 1
34215: PPUSH
34216: LD_STRING DAa-JMM-1b
34218: PPUSH
34219: CALL_OW 88
// allianceFirstContact = 1 ;
34223: LD_ADDR_EXP 64
34227: PUSH
34228: LD_INT 1
34230: ST_TO_ADDR
// end ; if not tpUnit in heroes then
34231: LD_VAR 0 1
34235: PUSH
34236: LD_VAR 0 2
34240: IN
34241: NOT
34242: IFFALSE 34552
// begin rnd = Rand ( 1 , 2 ) ;
34244: LD_ADDR_VAR 0 3
34248: PUSH
34249: LD_INT 1
34251: PPUSH
34252: LD_INT 2
34254: PPUSH
34255: CALL_OW 12
34259: ST_TO_ADDR
// if GetSex ( tpUnit ) = 1 then
34260: LD_VAR 0 1
34264: PPUSH
34265: CALL_OW 258
34269: PUSH
34270: LD_INT 1
34272: EQUAL
34273: IFFALSE 34406
// begin if rnd = 1 then
34275: LD_VAR 0 3
34279: PUSH
34280: LD_INT 1
34282: EQUAL
34283: IFFALSE 34345
// begin Say ( tpUnit , DA1-Sol1-1a ) ;
34285: LD_VAR 0 1
34289: PPUSH
34290: LD_STRING DA1-Sol1-1a
34292: PPUSH
34293: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34297: LD_EXP 28
34301: PPUSH
34302: LD_STRING DA-Roth-3a
34304: PPUSH
34305: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
34309: LD_VAR 0 1
34313: PPUSH
34314: LD_INT 4
34316: PPUSH
34317: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
34321: LD_VAR 0 1
34325: PPUSH
34326: LD_INT 257
34328: PPUSH
34329: LD_INT 198
34331: PPUSH
34332: CALL_OW 111
// AddComHold ( tpUnit ) ;
34336: LD_VAR 0 1
34340: PPUSH
34341: CALL_OW 200
// end ; if rnd = 2 then
34345: LD_VAR 0 3
34349: PUSH
34350: LD_INT 2
34352: EQUAL
34353: IFFALSE 34406
// begin Say ( tpUnit , DA1-Sol1-1b ) ;
34355: LD_VAR 0 1
34359: PPUSH
34360: LD_STRING DA1-Sol1-1b
34362: PPUSH
34363: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34367: LD_EXP 28
34371: PPUSH
34372: LD_STRING DA-Roth-3
34374: PPUSH
34375: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
34379: LD_VAR 0 1
34383: PPUSH
34384: LD_INT 7
34386: PPUSH
34387: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
34391: LD_VAR 0 1
34395: PPUSH
34396: LD_INT 240
34398: PPUSH
34399: LD_INT 188
34401: PPUSH
34402: CALL_OW 111
// end ; end ; if GetSex ( tpUnit ) = 2 then
34406: LD_VAR 0 1
34410: PPUSH
34411: CALL_OW 258
34415: PUSH
34416: LD_INT 2
34418: EQUAL
34419: IFFALSE 34552
// begin if rnd = 1 then
34421: LD_VAR 0 3
34425: PUSH
34426: LD_INT 1
34428: EQUAL
34429: IFFALSE 34491
// begin Say ( tpUnit , DA1-FSol1-1a ) ;
34431: LD_VAR 0 1
34435: PPUSH
34436: LD_STRING DA1-FSol1-1a
34438: PPUSH
34439: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34443: LD_EXP 28
34447: PPUSH
34448: LD_STRING DA-Roth-3a
34450: PPUSH
34451: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
34455: LD_VAR 0 1
34459: PPUSH
34460: LD_INT 4
34462: PPUSH
34463: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
34467: LD_VAR 0 1
34471: PPUSH
34472: LD_INT 257
34474: PPUSH
34475: LD_INT 198
34477: PPUSH
34478: CALL_OW 111
// AddComHold ( tpUnit ) ;
34482: LD_VAR 0 1
34486: PPUSH
34487: CALL_OW 200
// end ; if rnd = 2 then
34491: LD_VAR 0 3
34495: PUSH
34496: LD_INT 2
34498: EQUAL
34499: IFFALSE 34552
// begin Say ( tpUnit , DA1-FSol1-1b ) ;
34501: LD_VAR 0 1
34505: PPUSH
34506: LD_STRING DA1-FSol1-1b
34508: PPUSH
34509: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34513: LD_EXP 28
34517: PPUSH
34518: LD_STRING DA-Roth-3
34520: PPUSH
34521: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
34525: LD_VAR 0 1
34529: PPUSH
34530: LD_INT 7
34532: PPUSH
34533: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
34537: LD_VAR 0 1
34541: PPUSH
34542: LD_INT 240
34544: PPUSH
34545: LD_INT 188
34547: PPUSH
34548: CALL_OW 111
// end ; end ; end ; SetAttitude ( 1 , 7 , att_enemy , true ) ;
34552: LD_INT 1
34554: PPUSH
34555: LD_INT 7
34557: PPUSH
34558: LD_INT 2
34560: PPUSH
34561: LD_INT 1
34563: PPUSH
34564: CALL_OW 80
// InGameOff ;
34568: CALL_OW 9
// enable ;
34572: ENABLE
// end ;
34573: PPOPN 3
34575: END
// every 0 0$1 trigger timeAction >= 45 45$02 do
34576: LD_EXP 97
34580: PUSH
34581: LD_INT 94570
34583: GREATEREQUAL
34584: IFFALSE 34903
34586: GO 34588
34588: DISABLE
// begin DialogueOn ;
34589: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-1 , D5-FSol1-1 ) ;
34593: LD_INT 22
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 23
34605: PUSH
34606: LD_INT 1
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 26
34615: PUSH
34616: LD_INT 1
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 2
34625: PUSH
34626: LD_INT 25
34628: PUSH
34629: LD_INT 1
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 25
34638: PUSH
34639: LD_INT 2
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 25
34648: PUSH
34649: LD_INT 3
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 25
34658: PUSH
34659: LD_INT 4
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 25
34668: PUSH
34669: LD_INT 5
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 25
34678: PUSH
34679: LD_INT 8
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: PPUSH
34701: CALL_OW 69
34705: PPUSH
34706: LD_STRING D11-Sol1-1
34708: PPUSH
34709: LD_STRING D5-FSol1-1
34711: PPUSH
34712: CALL 6896 0 3
// SayRadio ( Platonov , D11-Pla-1 ) ;
34716: LD_EXP 26
34720: PPUSH
34721: LD_STRING D11-Pla-1
34723: PPUSH
34724: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
34728: LD_EXP 37
34732: PPUSH
34733: LD_STRING D11-Kov-1
34735: PPUSH
34736: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
34740: LD_EXP 26
34744: PPUSH
34745: LD_STRING D11-Pla-2
34747: PPUSH
34748: CALL_OW 94
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-2 , D5-FSol1-1 ) ;
34752: LD_INT 22
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 23
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 26
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 2
34784: PUSH
34785: LD_INT 25
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 25
34797: PUSH
34798: LD_INT 2
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 25
34807: PUSH
34808: LD_INT 3
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 25
34817: PUSH
34818: LD_INT 4
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 25
34827: PUSH
34828: LD_INT 5
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 25
34837: PUSH
34838: LD_INT 8
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: PPUSH
34860: CALL_OW 69
34864: PPUSH
34865: LD_STRING D11-Sol1-2
34867: PPUSH
34868: LD_STRING D5-FSol1-1
34870: PPUSH
34871: CALL 6896 0 3
// Say ( JMM , D11-JMM-2 ) ;
34875: LD_EXP 1
34879: PPUSH
34880: LD_STRING D11-JMM-2
34882: PPUSH
34883: CALL_OW 88
// DialogueOff ;
34887: CALL_OW 7
// PreapreMehBehs ;
34891: CALL 5745 0 0
// missionStage = 5 ;
34895: LD_ADDR_EXP 101
34899: PUSH
34900: LD_INT 5
34902: ST_TO_ADDR
// end ;
34903: END
// every 0 0$1 trigger timeAction >= 50 50$02 do var dec , time ;
34904: LD_EXP 97
34908: PUSH
34909: LD_INT 105070
34911: GREATEREQUAL
34912: IFFALSE 35306
34914: GO 34916
34916: DISABLE
34917: LD_INT 0
34919: PPUSH
34920: PPUSH
// begin time = 0 0$00 ;
34921: LD_ADDR_VAR 0 2
34925: PUSH
34926: LD_INT 0
34928: ST_TO_ADDR
// DialogueOn ;
34929: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
34933: LD_EXP 26
34937: PPUSH
34938: LD_STRING D15-Pla-1
34940: PPUSH
34941: CALL_OW 94
// dec = Query ( Q15a ) ;
34945: LD_ADDR_VAR 0 1
34949: PUSH
34950: LD_STRING Q15a
34952: PPUSH
34953: CALL_OW 97
34957: ST_TO_ADDR
// if dec = 1 then
34958: LD_VAR 0 1
34962: PUSH
34963: LD_INT 1
34965: EQUAL
34966: IFFALSE 34987
// begin Say ( JMM , D15a-JMM-1 ) ;
34968: LD_EXP 1
34972: PPUSH
34973: LD_STRING D15a-JMM-1
34975: PPUSH
34976: CALL_OW 88
// YouLost ( Surrender ) ;
34980: LD_STRING Surrender
34982: PPUSH
34983: CALL_OW 104
// end ; if dec = 2 then
34987: LD_VAR 0 1
34991: PUSH
34992: LD_INT 2
34994: EQUAL
34995: IFFALSE 35025
// begin Say ( JMM , D15b-JMM-1 ) ;
34997: LD_EXP 1
35001: PPUSH
35002: LD_STRING D15b-JMM-1
35004: PPUSH
35005: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
35009: LD_EXP 26
35013: PPUSH
35014: LD_STRING D15b-Pla-1
35016: PPUSH
35017: CALL_OW 94
// DialogueOff ;
35021: CALL_OW 7
// end ; if dec = 3 then
35025: LD_VAR 0 1
35029: PUSH
35030: LD_INT 3
35032: EQUAL
35033: IFFALSE 35109
// begin Say ( JMM , D15c-JMM-1 ) ;
35035: LD_EXP 1
35039: PPUSH
35040: LD_STRING D15c-JMM-1
35042: PPUSH
35043: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
35047: LD_EXP 26
35051: PPUSH
35052: LD_STRING D15c-Pla-1
35054: PPUSH
35055: CALL_OW 94
// DialogueOff ;
35059: CALL_OW 7
// wait ( 0 0$15 ) ;
35063: LD_INT 525
35065: PPUSH
35066: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35070: LD_EXP 26
35074: PPUSH
35075: LD_STRING D18-Pla-1
35077: PPUSH
35078: CALL_OW 88
// ComAttackPlace ( rurocket , GetX ( JMM ) , GetY ( JMM ) ) ;
35082: LD_INT 273
35084: PPUSH
35085: LD_EXP 1
35089: PPUSH
35090: CALL_OW 250
35094: PPUSH
35095: LD_EXP 1
35099: PPUSH
35100: CALL_OW 251
35104: PPUSH
35105: CALL_OW 116
// end ; if dec = 4 then
35109: LD_VAR 0 1
35113: PUSH
35114: LD_INT 4
35116: EQUAL
35117: IFFALSE 35155
// begin Say ( JMM , D15d-JMM-1 ) ;
35119: LD_EXP 1
35123: PPUSH
35124: LD_STRING D15d-JMM-1
35126: PPUSH
35127: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35131: LD_EXP 26
35135: PPUSH
35136: LD_STRING D15d-Pla-1
35138: PPUSH
35139: CALL_OW 94
// DialogueOff ;
35143: CALL_OW 7
// missionStage = 6 ;
35147: LD_ADDR_EXP 101
35151: PUSH
35152: LD_INT 6
35154: ST_TO_ADDR
// end ; if dec = 2 then
35155: LD_VAR 0 1
35159: PUSH
35160: LD_INT 2
35162: EQUAL
35163: IFFALSE 35236
// begin repeat wait ( 0 0$01 ) ;
35165: LD_INT 35
35167: PPUSH
35168: CALL_OW 67
// time = time + 0 0$01 ;
35172: LD_ADDR_VAR 0 2
35176: PUSH
35177: LD_VAR 0 2
35181: PUSH
35182: LD_INT 35
35184: PLUS
35185: ST_TO_ADDR
// until time >= 3 3$00 ;
35186: LD_VAR 0 2
35190: PUSH
35191: LD_INT 6300
35193: GREATEREQUAL
35194: IFFALSE 35165
// DialogueOn ;
35196: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
35200: LD_EXP 1
35204: PPUSH
35205: LD_STRING D15d-JMM-1a
35207: PPUSH
35208: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35212: LD_EXP 26
35216: PPUSH
35217: LD_STRING D15d-Pla-1
35219: PPUSH
35220: CALL_OW 94
// DialogueOff ;
35224: CALL_OW 7
// missionStage = 6 ;
35228: LD_ADDR_EXP 101
35232: PUSH
35233: LD_INT 6
35235: ST_TO_ADDR
// end ; if IsOk ( LegionFriend ) and GetSide ( LegionFriend ) = 1 then
35236: LD_EXP 53
35240: PPUSH
35241: CALL_OW 302
35245: PUSH
35246: LD_EXP 53
35250: PPUSH
35251: CALL_OW 255
35255: PUSH
35256: LD_INT 1
35258: EQUAL
35259: AND
35260: IFFALSE 35306
// begin DialogueOn ;
35262: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
35266: LD_EXP 1
35270: PPUSH
35271: LD_STRING D16-JMM-1
35273: PPUSH
35274: CALL_OW 88
// Say ( LegionFriend , D16-Friend-1 ) ;
35278: LD_EXP 53
35282: PPUSH
35283: LD_STRING D16-Friend-1
35285: PPUSH
35286: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
35290: LD_EXP 1
35294: PPUSH
35295: LD_STRING D16-JMM-2
35297: PPUSH
35298: CALL_OW 88
// DialogueOff ;
35302: CALL_OW 7
// end ; end ;
35306: PPOPN 2
35308: END
// every 1 1$0 trigger missionStage = 6 and IsOK ( LegionFriend ) and GetSide ( LegionFriend ) = 1 do var rocketTarget ;
35309: LD_EXP 101
35313: PUSH
35314: LD_INT 6
35316: EQUAL
35317: PUSH
35318: LD_EXP 53
35322: PPUSH
35323: CALL_OW 302
35327: AND
35328: PUSH
35329: LD_EXP 53
35333: PPUSH
35334: CALL_OW 255
35338: PUSH
35339: LD_INT 1
35341: EQUAL
35342: AND
35343: IFFALSE 35980
35345: GO 35347
35347: DISABLE
35348: LD_INT 0
35350: PPUSH
// begin DialogueOn ;
35351: CALL_OW 6
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
35355: LD_INT 22
35357: PUSH
35358: LD_INT 1
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 2
35367: PUSH
35368: LD_INT 34
35370: PUSH
35371: LD_INT 8
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 35
35380: PUSH
35381: LD_INT 8
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: LIST
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PPUSH
35397: CALL_OW 69
35401: PUSH
35402: LD_INT 0
35404: GREATER
35405: IFFALSE 35429
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
35407: LD_EXP 26
35411: PPUSH
35412: LD_STRING D16c-Pla-1
35414: PPUSH
35415: CALL_OW 94
// playerHaveRocket = 1 ;
35419: LD_ADDR_EXP 100
35423: PUSH
35424: LD_INT 1
35426: ST_TO_ADDR
// end else
35427: GO 35888
// begin SayRadio ( Platonov , D16a-Pla-1 ) ;
35429: LD_EXP 26
35433: PPUSH
35434: LD_STRING D16a-Pla-1
35436: PPUSH
35437: CALL_OW 94
// if IsOK ( Stevens ) then
35441: LD_EXP 3
35445: PPUSH
35446: CALL_OW 302
35450: IFFALSE 35466
// begin Say ( Stevens , D16a-Huck-1 ) ;
35452: LD_EXP 3
35456: PPUSH
35457: LD_STRING D16a-Huck-1
35459: PPUSH
35460: CALL_OW 88
// end else
35464: GO 35614
// begin if IsOk ( Baker ) then
35466: LD_EXP 21
35470: PPUSH
35471: CALL_OW 302
35475: IFFALSE 35491
// begin Say ( Baker , D16a-Huck-1 ) ;
35477: LD_EXP 21
35481: PPUSH
35482: LD_STRING D16a-Huck-1
35484: PPUSH
35485: CALL_OW 88
// end else
35489: GO 35614
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D16a-Sol1-1 , D5-FSol1-1 ) ;
35491: LD_INT 22
35493: PUSH
35494: LD_INT 1
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 23
35503: PUSH
35504: LD_INT 1
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 26
35513: PUSH
35514: LD_INT 1
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 2
35523: PUSH
35524: LD_INT 25
35526: PUSH
35527: LD_INT 1
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 25
35536: PUSH
35537: LD_INT 2
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 25
35546: PUSH
35547: LD_INT 3
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 25
35556: PUSH
35557: LD_INT 4
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 25
35566: PUSH
35567: LD_INT 5
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 25
35576: PUSH
35577: LD_INT 8
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: PPUSH
35599: CALL_OW 69
35603: PPUSH
35604: LD_STRING D16a-Sol1-1
35606: PPUSH
35607: LD_STRING D5-FSol1-1
35609: PPUSH
35610: CALL 6896 0 3
// end ; end ; wait ( 0 0$30 ) ;
35614: LD_INT 1050
35616: PPUSH
35617: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35621: LD_EXP 26
35625: PPUSH
35626: LD_STRING D18-Pla-1
35628: PPUSH
35629: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35633: LD_ADDR_VAR 0 1
35637: PUSH
35638: LD_INT 22
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 21
35650: PUSH
35651: LD_INT 3
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 23
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 2
35670: PUSH
35671: LD_INT 30
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 30
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: PPUSH
35702: CALL_OW 69
35706: ST_TO_ADDR
// if rocketTarget = 0 then
35707: LD_VAR 0 1
35711: PUSH
35712: LD_INT 0
35714: EQUAL
35715: IFFALSE 35791
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35717: LD_ADDR_VAR 0 1
35721: PUSH
35722: LD_INT 22
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 21
35734: PUSH
35735: LD_INT 3
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 23
35744: PUSH
35745: LD_INT 2
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 2
35754: PUSH
35755: LD_INT 30
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 30
35767: PUSH
35768: LD_INT 1
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: LIST
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: PPUSH
35786: CALL_OW 69
35790: ST_TO_ADDR
// if rocketTarget = 0 then
35791: LD_VAR 0 1
35795: PUSH
35796: LD_INT 0
35798: EQUAL
35799: IFFALSE 35853
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
35801: LD_ADDR_VAR 0 1
35805: PUSH
35806: LD_INT 22
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 21
35818: PUSH
35819: LD_INT 1
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 23
35828: PUSH
35829: LD_INT 1
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 50
35838: PUSH
35839: EMPTY
35840: LIST
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: PPUSH
35848: CALL_OW 69
35852: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
35853: LD_INT 273
35855: PPUSH
35856: LD_VAR 0 1
35860: PUSH
35861: LD_INT 1
35863: ARRAY
35864: PPUSH
35865: CALL_OW 250
35869: PPUSH
35870: LD_VAR 0 1
35874: PUSH
35875: LD_INT 1
35877: ARRAY
35878: PPUSH
35879: CALL_OW 251
35883: PPUSH
35884: CALL_OW 116
// end ; Say ( JMM , D16a-JMM-1a ) ;
35888: LD_EXP 1
35892: PPUSH
35893: LD_STRING D16a-JMM-1a
35895: PPUSH
35896: CALL_OW 88
// DialogueOff ;
35900: CALL_OW 7
// SetSide ( LegionFriend , 3 ) ;
35904: LD_EXP 53
35908: PPUSH
35909: LD_INT 3
35911: PPUSH
35912: CALL_OW 235
// ComExitBuilding ( LegionFriend ) ;
35916: LD_EXP 53
35920: PPUSH
35921: CALL_OW 122
// ComExitVehicle ( LegionFriend ) ;
35925: LD_EXP 53
35929: PPUSH
35930: CALL_OW 121
// wait ( 0 0$1 ) ;
35934: LD_INT 35
35936: PPUSH
35937: CALL_OW 67
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
35941: LD_EXP 53
35945: PPUSH
35946: LD_INT 18
35948: PPUSH
35949: CALL_OW 113
// wait ( 0 0$3 ) ;
35953: LD_INT 105
35955: PPUSH
35956: CALL_OW 67
// DialogueOn ;
35960: CALL_OW 6
// Say ( JMM , D16a-JMM-1 ) ;
35964: LD_EXP 1
35968: PPUSH
35969: LD_STRING D16a-JMM-1
35971: PPUSH
35972: CALL_OW 88
// DialogueOff ;
35976: CALL_OW 7
// end ;
35980: PPOPN 1
35982: END
// every 0 0$1 trigger GetSide ( LegionFriend ) = 3 do var i ;
35983: LD_EXP 53
35987: PPUSH
35988: CALL_OW 255
35992: PUSH
35993: LD_INT 3
35995: EQUAL
35996: IFFALSE 36103
35998: GO 36000
36000: DISABLE
36001: LD_INT 0
36003: PPUSH
// begin enable ;
36004: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_outside ] ] ) do
36005: LD_ADDR_VAR 0 1
36009: PUSH
36010: LD_INT 22
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 21
36022: PUSH
36023: LD_INT 1
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 56
36032: PUSH
36033: EMPTY
36034: LIST
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: LIST
36040: PPUSH
36041: CALL_OW 69
36045: PUSH
36046: FOR_IN
36047: IFFALSE 36101
// begin if GetDistUnits ( i , LegionFriend ) < 8 then
36049: LD_VAR 0 1
36053: PPUSH
36054: LD_EXP 53
36058: PPUSH
36059: CALL_OW 296
36063: PUSH
36064: LD_INT 8
36066: LESS
36067: IFFALSE 36099
// begin disable ;
36069: DISABLE
// DialogueOn ;
36070: CALL_OW 6
// CenterNowOnUnits ( LegionFriend ) ;
36074: LD_EXP 53
36078: PPUSH
36079: CALL_OW 87
// Say ( LegionFriend , D16a-Friend-1 ) ;
36083: LD_EXP 53
36087: PPUSH
36088: LD_STRING D16a-Friend-1
36090: PPUSH
36091: CALL_OW 88
// DialogueOff ;
36095: CALL_OW 7
// end ; end ;
36099: GO 36046
36101: POP
36102: POP
// end ;
36103: PPOPN 1
36105: END
// every 5 5$0 trigger missionStage = 6 and not GetSide ( LegionFriend ) = 1 do var rocketTarget ;
36106: LD_EXP 101
36110: PUSH
36111: LD_INT 6
36113: EQUAL
36114: PUSH
36115: LD_EXP 53
36119: PPUSH
36120: CALL_OW 255
36124: PUSH
36125: LD_INT 1
36127: EQUAL
36128: NOT
36129: AND
36130: IFFALSE 36510
36132: GO 36134
36134: DISABLE
36135: LD_INT 0
36137: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
36138: LD_INT 22
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 2
36150: PUSH
36151: LD_INT 34
36153: PUSH
36154: LD_INT 8
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 35
36163: PUSH
36164: LD_INT 8
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: LIST
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PPUSH
36180: CALL_OW 69
36184: PUSH
36185: LD_INT 0
36187: GREATER
36188: IFFALSE 36212
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
36190: LD_EXP 26
36194: PPUSH
36195: LD_STRING D16c-Pla-1
36197: PPUSH
36198: CALL_OW 94
// playerHaveRocket = 1 ;
36202: LD_ADDR_EXP 100
36206: PUSH
36207: LD_INT 1
36209: ST_TO_ADDR
// end else
36210: GO 36510
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
36212: LD_EXP 26
36216: PPUSH
36217: LD_STRING D16b-Pla-1
36219: PPUSH
36220: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
36224: LD_EXP 1
36228: PPUSH
36229: LD_STRING D16b-JMM-1
36231: PPUSH
36232: CALL_OW 88
// wait ( 0 0$15 ) ;
36236: LD_INT 525
36238: PPUSH
36239: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36243: LD_EXP 26
36247: PPUSH
36248: LD_STRING D18-Pla-1
36250: PPUSH
36251: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36255: LD_ADDR_VAR 0 1
36259: PUSH
36260: LD_INT 22
36262: PUSH
36263: LD_INT 1
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 21
36272: PUSH
36273: LD_INT 3
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 23
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 2
36292: PUSH
36293: LD_INT 30
36295: PUSH
36296: LD_INT 0
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 30
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: LIST
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: PPUSH
36324: CALL_OW 69
36328: ST_TO_ADDR
// if rocketTarget = 0 then
36329: LD_VAR 0 1
36333: PUSH
36334: LD_INT 0
36336: EQUAL
36337: IFFALSE 36413
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36339: LD_ADDR_VAR 0 1
36343: PUSH
36344: LD_INT 22
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 21
36356: PUSH
36357: LD_INT 3
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 23
36366: PUSH
36367: LD_INT 2
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 2
36376: PUSH
36377: LD_INT 30
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 30
36389: PUSH
36390: LD_INT 1
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: LIST
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: PPUSH
36408: CALL_OW 69
36412: ST_TO_ADDR
// if rocketTarget = 0 then
36413: LD_VAR 0 1
36417: PUSH
36418: LD_INT 0
36420: EQUAL
36421: IFFALSE 36475
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
36423: LD_ADDR_VAR 0 1
36427: PUSH
36428: LD_INT 22
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 21
36440: PUSH
36441: LD_INT 1
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 23
36450: PUSH
36451: LD_INT 1
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 50
36460: PUSH
36461: EMPTY
36462: LIST
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: PPUSH
36470: CALL_OW 69
36474: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
36475: LD_INT 273
36477: PPUSH
36478: LD_VAR 0 1
36482: PUSH
36483: LD_INT 1
36485: ARRAY
36486: PPUSH
36487: CALL_OW 250
36491: PPUSH
36492: LD_VAR 0 1
36496: PUSH
36497: LD_INT 1
36499: ARRAY
36500: PPUSH
36501: CALL_OW 251
36505: PPUSH
36506: CALL_OW 116
// end ; end ;
36510: PPOPN 1
36512: END
// every 0 0$1 trigger timeAction >= 80 80$02 and missionStage >= 6 and AllianceAI = 1 do
36513: LD_EXP 97
36517: PUSH
36518: LD_INT 168070
36520: GREATEREQUAL
36521: PUSH
36522: LD_EXP 101
36526: PUSH
36527: LD_INT 6
36529: GREATEREQUAL
36530: AND
36531: PUSH
36532: LD_EXP 85
36536: PUSH
36537: LD_INT 1
36539: EQUAL
36540: AND
36541: IFFALSE 36571
36543: GO 36545
36545: DISABLE
// begin Say ( Platonov , D18-Pla-1 ) ;
36546: LD_EXP 26
36550: PPUSH
36551: LD_STRING D18-Pla-1
36553: PPUSH
36554: CALL_OW 88
// ComAttackPlace ( rurocket , 244 , 187 ) ;
36558: LD_INT 273
36560: PPUSH
36561: LD_INT 244
36563: PPUSH
36564: LD_INT 187
36566: PPUSH
36567: CALL_OW 116
// end ;
36571: END
// every 0 0$3 trigger missionStage >= 5 do var i ;
36572: LD_EXP 101
36576: PUSH
36577: LD_INT 5
36579: GREATEREQUAL
36580: IFFALSE 36773
36582: GO 36584
36584: DISABLE
36585: LD_INT 0
36587: PPUSH
// begin enable ;
36588: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_behemoth ] , [ f_constructed ] ] ) do
36589: LD_ADDR_VAR 0 1
36593: PUSH
36594: LD_INT 22
36596: PUSH
36597: LD_INT 6
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 30
36606: PUSH
36607: LD_INT 37
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 57
36616: PUSH
36617: EMPTY
36618: LIST
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: LIST
36624: PPUSH
36625: CALL_OW 69
36629: PUSH
36630: FOR_IN
36631: IFFALSE 36685
// begin if See ( 1 , i ) then
36633: LD_INT 1
36635: PPUSH
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL_OW 292
36645: IFFALSE 36683
// begin disable ;
36647: DISABLE
// DialogueOn ;
36648: CALL_OW 6
// Say ( JMM , D17a-JMM-1 ) ;
36652: LD_EXP 1
36656: PPUSH
36657: LD_STRING D17a-JMM-1
36659: PPUSH
36660: CALL_OW 88
// DialogueOff ;
36664: CALL_OW 7
// behemothStatus = 1 ;
36668: LD_ADDR_EXP 60
36672: PUSH
36673: LD_INT 1
36675: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
36676: LD_STRING M4a
36678: PPUSH
36679: CALL_OW 337
// end ; end ;
36683: GO 36630
36685: POP
36686: POP
// for i in ruBehs do
36687: LD_ADDR_VAR 0 1
36691: PUSH
36692: LD_EXP 59
36696: PUSH
36697: FOR_IN
36698: IFFALSE 36771
// begin if See ( 1 , i ) then
36700: LD_INT 1
36702: PPUSH
36703: LD_VAR 0 1
36707: PPUSH
36708: CALL_OW 292
36712: IFFALSE 36769
// begin disable ;
36714: DISABLE
// DialogueOn ;
36715: CALL_OW 6
// Say ( JMM , D17b-JMM-1 ) ;
36719: LD_EXP 1
36723: PPUSH
36724: LD_STRING D17b-JMM-1
36726: PPUSH
36727: CALL_OW 88
// DialogueOff ;
36731: CALL_OW 7
// behemothStatus = 0 ;
36735: LD_ADDR_EXP 60
36739: PUSH
36740: LD_INT 0
36742: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
36743: LD_STRING M4b
36745: PPUSH
36746: CALL_OW 337
// wait ( 0 0$2 ) ;
36750: LD_INT 70
36752: PPUSH
36753: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36757: LD_EXP 26
36761: PPUSH
36762: LD_STRING D18-Pla-1
36764: PPUSH
36765: CALL_OW 88
// end ; end ;
36769: GO 36697
36771: POP
36772: POP
// end ;
36773: PPOPN 1
36775: END
// every 1 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 ] [ Difficulty ] do var i , tmp , arabianArmy ;
36776: LD_EXP 26
36780: PPUSH
36781: CALL_OW 301
36785: PUSH
36786: LD_EXP 27
36790: PPUSH
36791: CALL_OW 301
36795: AND
36796: PUSH
36797: LD_INT 22
36799: PUSH
36800: LD_INT 3
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 21
36809: PUSH
36810: LD_INT 1
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 50
36819: PUSH
36820: EMPTY
36821: LIST
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: LIST
36827: PPUSH
36828: CALL_OW 69
36832: PUSH
36833: LD_INT 7
36835: PUSH
36836: LD_INT 8
36838: PUSH
36839: LD_INT 9
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: LIST
36846: PUSH
36847: LD_OWVAR 67
36851: ARRAY
36852: LESS
36853: AND
36854: IFFALSE 37530
36856: GO 36858
36858: DISABLE
36859: LD_INT 0
36861: PPUSH
36862: PPUSH
36863: PPUSH
// begin russianAI = 0 ;
36864: LD_ADDR_EXP 86
36868: PUSH
36869: LD_INT 0
36871: ST_TO_ADDR
// russianEscape = 1 ;
36872: LD_ADDR_EXP 90
36876: PUSH
36877: LD_INT 1
36879: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , true ) ;
36880: LD_INT 1
36882: PPUSH
36883: LD_INT 3
36885: PPUSH
36886: LD_INT 1
36888: PPUSH
36889: LD_INT 1
36891: PPUSH
36892: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 900 ] ] ) do
36896: LD_ADDR_VAR 0 1
36900: PUSH
36901: LD_INT 22
36903: PUSH
36904: LD_INT 3
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 21
36913: PUSH
36914: LD_INT 1
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 24
36923: PUSH
36924: LD_INT 900
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: LIST
36935: PPUSH
36936: CALL_OW 69
36940: PUSH
36941: FOR_IN
36942: IFFALSE 36973
// if GetSex ( i ) = sex_male then
36944: LD_VAR 0 1
36948: PPUSH
36949: CALL_OW 258
36953: PUSH
36954: LD_INT 1
36956: EQUAL
36957: IFFALSE 36971
// begin tmp = i ;
36959: LD_ADDR_VAR 0 2
36963: PUSH
36964: LD_VAR 0 1
36968: ST_TO_ADDR
// break ;
36969: GO 36973
// end ;
36971: GO 36941
36973: POP
36974: POP
// if tmp = 0 then
36975: LD_VAR 0 2
36979: PUSH
36980: LD_INT 0
36982: EQUAL
36983: IFFALSE 37037
// begin uc_side = 3 ;
36985: LD_ADDR_OWVAR 20
36989: PUSH
36990: LD_INT 3
36992: ST_TO_ADDR
// uc_nation = 3 ;
36993: LD_ADDR_OWVAR 21
36997: PUSH
36998: LD_INT 3
37000: ST_TO_ADDR
// hc_name =  ;
37001: LD_ADDR_OWVAR 26
37005: PUSH
37006: LD_STRING 
37008: ST_TO_ADDR
// hc_gallery =  ;
37009: LD_ADDR_OWVAR 33
37013: PUSH
37014: LD_STRING 
37016: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
37017: LD_INT 1
37019: PPUSH
37020: LD_INT 10
37022: PPUSH
37023: CALL_OW 381
// tmp = CreateHuman ;
37027: LD_ADDR_VAR 0 2
37031: PUSH
37032: CALL_OW 44
37036: ST_TO_ADDR
// end ; DialogueOn ;
37037: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
37041: LD_VAR 0 2
37045: PPUSH
37046: LD_STRING DSurrenderRussians-RSol1-1a
37048: PPUSH
37049: CALL_OW 88
// DialogueOff ;
37053: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
37057: LD_INT 22
37059: PUSH
37060: LD_INT 3
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 21
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PPUSH
37081: CALL_OW 69
37085: PPUSH
37086: CALL_OW 122
// wait ( 0 0$1 ) ;
37090: LD_INT 35
37092: PPUSH
37093: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , RussianEscapeArea ) ;
37097: LD_INT 22
37099: PUSH
37100: LD_INT 3
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 21
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PPUSH
37121: CALL_OW 69
37125: PPUSH
37126: LD_INT 25
37128: PPUSH
37129: CALL_OW 113
// wait ( 0 0$10 ) ;
37133: LD_INT 350
37135: PPUSH
37136: CALL_OW 67
// PrepareOmarArmy ;
37140: CALL 38150 0 0
// missionStage = 7 ;
37144: LD_ADDR_EXP 101
37148: PUSH
37149: LD_INT 7
37151: ST_TO_ADDR
// PlaceSeeing ( 157 , 8 , 1 , - 8 ) ;
37152: LD_INT 157
37154: PPUSH
37155: LD_INT 8
37157: PPUSH
37158: LD_INT 1
37160: PPUSH
37161: LD_INT 8
37163: NEG
37164: PPUSH
37165: CALL_OW 330
// CenterOnXY ( 157 , 8 ) ;
37169: LD_INT 157
37171: PPUSH
37172: LD_INT 8
37174: PPUSH
37175: CALL_OW 84
// DialogueOn ;
37179: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
37183: LD_EXP 32
37187: PPUSH
37188: CALL_OW 87
// Say ( JMM , D19-JMM-1 ) ;
37192: LD_EXP 1
37196: PPUSH
37197: LD_STRING D19-JMM-1
37199: PPUSH
37200: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D19-Sol1-1 , D5-FSol1-1 ) ;
37204: LD_INT 22
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 26
37216: PUSH
37217: LD_INT 1
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: LD_INT 25
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 25
37239: PUSH
37240: LD_INT 2
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 25
37249: PUSH
37250: LD_INT 3
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 25
37259: PUSH
37260: LD_INT 4
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 25
37269: PUSH
37270: LD_INT 5
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 25
37279: PUSH
37280: LD_INT 8
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: PPUSH
37301: CALL_OW 69
37305: PPUSH
37306: LD_STRING D19-Sol1-1
37308: PPUSH
37309: LD_STRING D5-FSol1-1
37311: PPUSH
37312: CALL 6896 0 3
// Say ( JMM , D19-JMM-2 ) ;
37316: LD_EXP 1
37320: PPUSH
37321: LD_STRING D19-JMM-2
37323: PPUSH
37324: CALL_OW 88
// DialogueOff ;
37328: CALL_OW 7
// LaunchMines ;
37332: CALL 37639 0 0
// wait ( 0 0$3 ) ;
37336: LD_INT 105
37338: PPUSH
37339: CALL_OW 67
// arabianArmy = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
37343: LD_ADDR_VAR 0 3
37347: PUSH
37348: LD_INT 22
37350: PUSH
37351: LD_INT 2
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 21
37360: PUSH
37361: LD_INT 1
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PPUSH
37372: CALL_OW 69
37376: PUSH
37377: LD_INT 22
37379: PUSH
37380: LD_INT 2
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 21
37389: PUSH
37390: LD_INT 1
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 25
37399: PUSH
37400: LD_INT 4
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: LIST
37411: PPUSH
37412: CALL_OW 69
37416: DIFF
37417: ST_TO_ADDR
// arabianArmy = arabianArmy ^ FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
37418: LD_ADDR_VAR 0 3
37422: PUSH
37423: LD_VAR 0 3
37427: PUSH
37428: LD_INT 22
37430: PUSH
37431: LD_INT 2
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 21
37440: PUSH
37441: LD_INT 2
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PPUSH
37452: CALL_OW 69
37456: ADD
37457: ST_TO_ADDR
// ComAgressiveMove ( arabianArmy , 178 , 66 ) ;
37458: LD_VAR 0 3
37462: PPUSH
37463: LD_INT 178
37465: PPUSH
37466: LD_INT 66
37468: PPUSH
37469: CALL_OW 114
// wait ( 0 0$10 ) ;
37473: LD_INT 350
37475: PPUSH
37476: CALL_OW 67
// ComContaminate ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) , 177 , 69 ) ;
37480: LD_INT 22
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 21
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 25
37502: PUSH
37503: LD_INT 4
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: LIST
37514: PPUSH
37515: CALL_OW 69
37519: PPUSH
37520: LD_INT 177
37522: PPUSH
37523: LD_INT 69
37525: PPUSH
37526: CALL_OW 158
// end ;
37530: PPOPN 3
37532: END
// every 0 0$1 trigger russianEscape = 1 and FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i ;
37533: LD_EXP 90
37537: PUSH
37538: LD_INT 1
37540: EQUAL
37541: PUSH
37542: LD_INT 25
37544: PPUSH
37545: LD_INT 22
37547: PUSH
37548: LD_INT 3
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 21
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PPUSH
37569: CALL_OW 70
37573: AND
37574: IFFALSE 37636
37576: GO 37578
37578: DISABLE
37579: LD_INT 0
37581: PPUSH
// begin enable ;
37582: ENABLE
// for i in FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
37583: LD_ADDR_VAR 0 1
37587: PUSH
37588: LD_INT 25
37590: PPUSH
37591: LD_INT 22
37593: PUSH
37594: LD_INT 3
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 21
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PPUSH
37615: CALL_OW 70
37619: PUSH
37620: FOR_IN
37621: IFFALSE 37634
// RemoveUnit ( i ) ;
37623: LD_VAR 0 1
37627: PPUSH
37628: CALL_OW 64
37632: GO 37620
37634: POP
37635: POP
// end ;
37636: PPOPN 1
37638: END
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
37639: LD_INT 0
37641: PPUSH
37642: PPUSH
37643: PPUSH
37644: PPUSH
37645: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
37646: LD_ADDR_VAR 0 2
37650: PUSH
37651: LD_INT 168
37653: PUSH
37654: LD_INT 18
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 169
37663: PUSH
37664: LD_INT 20
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 167
37673: PUSH
37674: LD_INT 20
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 164
37683: PUSH
37684: LD_INT 18
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 164
37693: PUSH
37694: LD_INT 19
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 163
37703: PUSH
37704: LD_INT 19
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 164
37713: PUSH
37714: LD_INT 21
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 165
37723: PUSH
37724: LD_INT 21
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 163
37733: PUSH
37734: LD_INT 20
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 164
37743: PUSH
37744: LD_INT 22
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 162
37753: PUSH
37754: LD_INT 20
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
37774: LD_ADDR_VAR 0 3
37778: PUSH
37779: LD_INT 169
37781: PUSH
37782: LD_INT 34
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 169
37791: PUSH
37792: LD_INT 35
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 167
37801: PUSH
37802: LD_INT 32
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 170
37811: PUSH
37812: LD_INT 31
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 173
37821: PUSH
37822: LD_INT 35
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 174
37831: PUSH
37832: LD_INT 39
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: ST_TO_ADDR
// for i = 1 to mines_pos do
37847: LD_ADDR_VAR 0 4
37851: PUSH
37852: DOUBLE
37853: LD_INT 1
37855: DEC
37856: ST_TO_ADDR
37857: LD_VAR 0 2
37861: PUSH
37862: FOR_TO
37863: IFFALSE 38075
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
37865: LD_VAR 0 2
37869: PUSH
37870: LD_VAR 0 4
37874: ARRAY
37875: PUSH
37876: LD_INT 1
37878: ARRAY
37879: PPUSH
37880: LD_VAR 0 2
37884: PUSH
37885: LD_VAR 0 4
37889: ARRAY
37890: PUSH
37891: LD_INT 2
37893: ARRAY
37894: PPUSH
37895: LD_INT 1
37897: PPUSH
37898: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
37902: LD_INT 1
37904: PPUSH
37905: LD_INT 3
37907: PPUSH
37908: CALL_OW 12
37912: PPUSH
37913: CALL_OW 67
// if i < mines_pos then
37917: LD_VAR 0 4
37921: PUSH
37922: LD_VAR 0 2
37926: LESS
37927: IFFALSE 37965
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
37929: LD_VAR 0 2
37933: PUSH
37934: LD_VAR 0 4
37938: ARRAY
37939: PUSH
37940: LD_INT 1
37942: ARRAY
37943: PPUSH
37944: LD_VAR 0 2
37948: PUSH
37949: LD_VAR 0 4
37953: ARRAY
37954: PUSH
37955: LD_INT 2
37957: ARRAY
37958: PPUSH
37959: CALL_OW 348
37963: GO 38073
// begin for j = 1 to mines_pos1 do
37965: LD_ADDR_VAR 0 5
37969: PUSH
37970: DOUBLE
37971: LD_INT 1
37973: DEC
37974: ST_TO_ADDR
37975: LD_VAR 0 3
37979: PUSH
37980: FOR_TO
37981: IFFALSE 38037
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
37983: LD_VAR 0 3
37987: PUSH
37988: LD_VAR 0 5
37992: ARRAY
37993: PUSH
37994: LD_INT 1
37996: ARRAY
37997: PPUSH
37998: LD_VAR 0 3
38002: PUSH
38003: LD_VAR 0 5
38007: ARRAY
38008: PUSH
38009: LD_INT 2
38011: ARRAY
38012: PPUSH
38013: LD_INT 1
38015: PPUSH
38016: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
38020: LD_INT 1
38022: PPUSH
38023: LD_INT 3
38025: PPUSH
38026: CALL_OW 12
38030: PPUSH
38031: CALL_OW 67
// end ;
38035: GO 37980
38037: POP
38038: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
38039: LD_VAR 0 2
38043: PUSH
38044: LD_VAR 0 4
38048: ARRAY
38049: PUSH
38050: LD_INT 1
38052: ARRAY
38053: PPUSH
38054: LD_VAR 0 2
38058: PUSH
38059: LD_VAR 0 4
38063: ARRAY
38064: PUSH
38065: LD_INT 2
38067: ARRAY
38068: PPUSH
38069: CALL_OW 347
// end ; end ;
38073: GO 37862
38075: POP
38076: POP
// end ;
38077: LD_VAR 0 1
38081: RET
// every 0 0$1 trigger missionStage = 7 and IsDead ( Omar ) and IsOk ( Heike ) do
38082: LD_EXP 101
38086: PUSH
38087: LD_INT 7
38089: EQUAL
38090: PUSH
38091: LD_EXP 31
38095: PPUSH
38096: CALL_OW 301
38100: AND
38101: PUSH
38102: LD_EXP 32
38106: PPUSH
38107: CALL_OW 302
38111: AND
38112: IFFALSE 38149
38114: GO 38116
38116: DISABLE
// begin DialogueOn ;
38117: CALL_OW 6
// Say ( JMM , D19a-JMM-1 ) ;
38121: LD_EXP 1
38125: PPUSH
38126: LD_STRING D19a-JMM-1
38128: PPUSH
38129: CALL_OW 88
// Say ( Heike , D19a-Hke-1 ) ;
38133: LD_EXP 32
38137: PPUSH
38138: LD_STRING D19a-Hke-1
38140: PPUSH
38141: CALL_OW 88
// DialogueOff ;
38145: CALL_OW 7
// end ; end_of_file
38149: END
// export function PrepareOmarArmy ; var i , un , veh , omarMastodont ; begin
38150: LD_INT 0
38152: PPUSH
38153: PPUSH
38154: PPUSH
38155: PPUSH
38156: PPUSH
// uc_side = 2 ;
38157: LD_ADDR_OWVAR 20
38161: PUSH
38162: LD_INT 2
38164: ST_TO_ADDR
// uc_nation = 2 ;
38165: LD_ADDR_OWVAR 21
38169: PUSH
38170: LD_INT 2
38172: ST_TO_ADDR
// Omar = PrepareUnit ( Omar , false ) ;
38173: LD_ADDR_EXP 31
38177: PUSH
38178: LD_STRING Omar
38180: PPUSH
38181: LD_INT 0
38183: PPUSH
38184: CALL 6640 0 2
38188: ST_TO_ADDR
// Heike = PrepareUnit ( Heike , false ) ;
38189: LD_ADDR_EXP 32
38193: PUSH
38194: LD_STRING Heike
38196: PPUSH
38197: LD_INT 0
38199: PPUSH
38200: CALL 6640 0 2
38204: ST_TO_ADDR
// if KhatamStatus = 1 then
38205: LD_EXP 83
38209: PUSH
38210: LD_INT 1
38212: EQUAL
38213: IFFALSE 38228
// Khatam = NewCharacter ( Khatam ) ;
38215: LD_ADDR_EXP 33
38219: PUSH
38220: LD_STRING Khatam
38222: PPUSH
38223: CALL_OW 25
38227: ST_TO_ADDR
// PlaceUnitArea ( Heike , ArabianSpawn , false ) ;
38228: LD_EXP 32
38232: PPUSH
38233: LD_INT 26
38235: PPUSH
38236: LD_INT 0
38238: PPUSH
38239: CALL_OW 49
// PlaceUnitArea ( Khatam , ArabianSpawn , false ) ;
38243: LD_EXP 33
38247: PPUSH
38248: LD_INT 26
38250: PPUSH
38251: LD_INT 0
38253: PPUSH
38254: CALL_OW 49
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
38258: LD_ADDR_VAR 0 2
38262: PUSH
38263: DOUBLE
38264: LD_INT 1
38266: DEC
38267: ST_TO_ADDR
38268: LD_INT 5
38270: PUSH
38271: LD_INT 6
38273: PUSH
38274: LD_INT 7
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: LIST
38281: PUSH
38282: LD_OWVAR 67
38286: ARRAY
38287: PUSH
38288: FOR_TO
38289: IFFALSE 38344
// begin hc_name =  ;
38291: LD_ADDR_OWVAR 26
38295: PUSH
38296: LD_STRING 
38298: ST_TO_ADDR
// hc_gallery =  ;
38299: LD_ADDR_OWVAR 33
38303: PUSH
38304: LD_STRING 
38306: ST_TO_ADDR
// PrepareSoldier ( false , 8 ) ;
38307: LD_INT 0
38309: PPUSH
38310: LD_INT 8
38312: PPUSH
38313: CALL_OW 381
// un = CreateHuman ;
38317: LD_ADDR_VAR 0 3
38321: PUSH
38322: CALL_OW 44
38326: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
38327: LD_VAR 0 3
38331: PPUSH
38332: LD_INT 26
38334: PPUSH
38335: LD_INT 0
38337: PPUSH
38338: CALL_OW 49
// end ;
38342: GO 38288
38344: POP
38345: POP
// for i := 1 to 4 do
38346: LD_ADDR_VAR 0 2
38350: PUSH
38351: DOUBLE
38352: LD_INT 1
38354: DEC
38355: ST_TO_ADDR
38356: LD_INT 4
38358: PUSH
38359: FOR_TO
38360: IFFALSE 38415
// begin hc_name =  ;
38362: LD_ADDR_OWVAR 26
38366: PUSH
38367: LD_STRING 
38369: ST_TO_ADDR
// hc_gallery =  ;
38370: LD_ADDR_OWVAR 33
38374: PUSH
38375: LD_STRING 
38377: ST_TO_ADDR
// PrepareScientist ( false , 8 ) ;
38378: LD_INT 0
38380: PPUSH
38381: LD_INT 8
38383: PPUSH
38384: CALL_OW 384
// un = CreateHuman ;
38388: LD_ADDR_VAR 0 3
38392: PUSH
38393: CALL_OW 44
38397: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
38398: LD_VAR 0 3
38402: PPUSH
38403: LD_INT 26
38405: PPUSH
38406: LD_INT 0
38408: PPUSH
38409: CALL_OW 49
// end ;
38413: GO 38359
38415: POP
38416: POP
// for i := 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
38417: LD_ADDR_VAR 0 2
38421: PUSH
38422: DOUBLE
38423: LD_INT 1
38425: DEC
38426: ST_TO_ADDR
38427: LD_INT 8
38429: PUSH
38430: LD_INT 9
38432: PUSH
38433: LD_INT 10
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: LIST
38440: PUSH
38441: LD_OWVAR 67
38445: ARRAY
38446: PUSH
38447: FOR_TO
38448: IFFALSE 38536
// begin vc_engine = 3 ;
38450: LD_ADDR_OWVAR 39
38454: PUSH
38455: LD_INT 3
38457: ST_TO_ADDR
// vc_control = 5 ;
38458: LD_ADDR_OWVAR 38
38462: PUSH
38463: LD_INT 5
38465: ST_TO_ADDR
// vc_chassis = 14 ;
38466: LD_ADDR_OWVAR 37
38470: PUSH
38471: LD_INT 14
38473: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 , 25 ] [ Rand ( 1 , 3 ) ] ;
38474: LD_ADDR_OWVAR 40
38478: PUSH
38479: LD_INT 27
38481: PUSH
38482: LD_INT 26
38484: PUSH
38485: LD_INT 28
38487: PUSH
38488: LD_INT 25
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 1
38499: PPUSH
38500: LD_INT 3
38502: PPUSH
38503: CALL_OW 12
38507: ARRAY
38508: ST_TO_ADDR
// veh = CreateVehicle ;
38509: LD_ADDR_VAR 0 4
38513: PUSH
38514: CALL_OW 45
38518: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawn , false ) ;
38519: LD_VAR 0 4
38523: PPUSH
38524: LD_INT 26
38526: PPUSH
38527: LD_INT 0
38529: PPUSH
38530: CALL_OW 49
// end ;
38534: GO 38447
38536: POP
38537: POP
// vc_chassis := 31 ;
38538: LD_ADDR_OWVAR 37
38542: PUSH
38543: LD_INT 31
38545: ST_TO_ADDR
// vc_control := control_rider ;
38546: LD_ADDR_OWVAR 38
38550: PUSH
38551: LD_INT 4
38553: ST_TO_ADDR
// omarMastodont := CreateVehicle ;
38554: LD_ADDR_VAR 0 5
38558: PUSH
38559: CALL_OW 45
38563: ST_TO_ADDR
// PlaceUnitArea ( omarMastodont , ArabianSpawn , false ) ;
38564: LD_VAR 0 5
38568: PPUSH
38569: LD_INT 26
38571: PPUSH
38572: LD_INT 0
38574: PPUSH
38575: CALL_OW 49
// PlaceHumanInUnit ( Omar , omarMastodont ) ;
38579: LD_EXP 31
38583: PPUSH
38584: LD_VAR 0 5
38588: PPUSH
38589: CALL_OW 52
// end ; end_of_file
38593: LD_VAR 0 1
38597: RET
// every 1 1$30 trigger missionStage > 0 do
38598: LD_EXP 101
38602: PUSH
38603: LD_INT 0
38605: GREATER
38606: IFFALSE 38633
38608: GO 38610
38610: DISABLE
// begin enable ;
38611: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
38612: LD_INT 3
38614: PPUSH
38615: LD_INT 5
38617: PPUSH
38618: CALL_OW 12
38622: PPUSH
38623: LD_INT 27
38625: PPUSH
38626: LD_INT 1
38628: PPUSH
38629: CALL_OW 55
// end ; end_of_file
38633: END
// every 0 0$1 trigger missionStage = 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
38634: LD_EXP 101
38638: PUSH
38639: LD_INT 7
38641: EQUAL
38642: PUSH
38643: LD_INT 22
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 21
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PPUSH
38667: CALL_OW 69
38671: PUSH
38672: LD_INT 0
38674: EQUAL
38675: AND
38676: PUSH
38677: LD_INT 22
38679: PUSH
38680: LD_INT 2
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 21
38689: PUSH
38690: LD_INT 2
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 50
38699: PUSH
38700: EMPTY
38701: LIST
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: PPUSH
38708: CALL_OW 69
38712: PUSH
38713: LD_INT 0
38715: EQUAL
38716: AND
38717: IFFALSE 39206
38719: GO 38721
38721: DISABLE
// begin DialogueOn ;
38722: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
38726: LD_EXP 1
38730: PPUSH
38731: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
38735: LD_EXP 1
38739: PPUSH
38740: LD_STRING D20-JMM-1
38742: PPUSH
38743: CALL_OW 88
// if IsOK ( Joan ) then
38747: LD_EXP 2
38751: PPUSH
38752: CALL_OW 302
38756: IFFALSE 38770
// Say ( Joan , D20-Joan-1 ) ;
38758: LD_EXP 2
38762: PPUSH
38763: LD_STRING D20-Joan-1
38765: PPUSH
38766: CALL_OW 88
// if IsOk ( Lisa ) then
38770: LD_EXP 4
38774: PPUSH
38775: CALL_OW 302
38779: IFFALSE 38793
// Say ( Lisa , D20-Lisa-1 ) ;
38781: LD_EXP 4
38785: PPUSH
38786: LD_STRING D20-Lisa-1
38788: PPUSH
38789: CALL_OW 88
// if IsOk ( Donaldson ) then
38793: LD_EXP 5
38797: PPUSH
38798: CALL_OW 302
38802: IFFALSE 38816
// Say ( Donaldson , D20-Don-1 ) ;
38804: LD_EXP 5
38808: PPUSH
38809: LD_STRING D20-Don-1
38811: PPUSH
38812: CALL_OW 88
// if IsOK ( Cornel ) then
38816: LD_EXP 12
38820: PPUSH
38821: CALL_OW 302
38825: IFFALSE 38839
// Say ( Cornel , D20-Corn-1 ) ;
38827: LD_EXP 12
38831: PPUSH
38832: LD_STRING D20-Corn-1
38834: PPUSH
38835: CALL_OW 88
// if IsOk ( Denis ) then
38839: LD_EXP 8
38843: PPUSH
38844: CALL_OW 302
38848: IFFALSE 38862
// Say ( Denis , D20-Den-1 ) ;
38850: LD_EXP 8
38854: PPUSH
38855: LD_STRING D20-Den-1
38857: PPUSH
38858: CALL_OW 88
// if IsOk ( Bobby ) then
38862: LD_EXP 6
38866: PPUSH
38867: CALL_OW 302
38871: IFFALSE 38885
// Say ( Bobby , D20-Bobby-1 ) ;
38873: LD_EXP 6
38877: PPUSH
38878: LD_STRING D20-Bobby-1
38880: PPUSH
38881: CALL_OW 88
// if IsOk ( Gladstone ) then
38885: LD_EXP 10
38889: PPUSH
38890: CALL_OW 302
38894: IFFALSE 38908
// Say ( Gladstone , D20-Glad-1 ) ;
38896: LD_EXP 10
38900: PPUSH
38901: LD_STRING D20-Glad-1
38903: PPUSH
38904: CALL_OW 88
// if IsOk ( Cyrus ) then
38908: LD_EXP 7
38912: PPUSH
38913: CALL_OW 302
38917: IFFALSE 38931
// Say ( Cyrus , D20-Cyrus-1 ) ;
38919: LD_EXP 7
38923: PPUSH
38924: LD_STRING D20-Cyrus-1
38926: PPUSH
38927: CALL_OW 88
// if IsOk ( Stevens ) then
38931: LD_EXP 3
38935: PPUSH
38936: CALL_OW 302
38940: IFFALSE 38954
// Say ( Stevens , D20-Huck-1 ) ;
38942: LD_EXP 3
38946: PPUSH
38947: LD_STRING D20-Huck-1
38949: PPUSH
38950: CALL_OW 88
// if IsOk ( Brown ) then
38954: LD_EXP 9
38958: PPUSH
38959: CALL_OW 302
38963: IFFALSE 38977
// Say ( Brown , D20-Brown-1 ) ;
38965: LD_EXP 9
38969: PPUSH
38970: LD_STRING D20-Brown-1
38972: PPUSH
38973: CALL_OW 88
// if IsOk ( Gary ) then
38977: LD_EXP 13
38981: PPUSH
38982: CALL_OW 302
38986: IFFALSE 39000
// Say ( Gary , D20-Gary-1 ) ;
38988: LD_EXP 13
38992: PPUSH
38993: LD_STRING D20-Gary-1
38995: PPUSH
38996: CALL_OW 88
// if IsOk ( Connie ) then
39000: LD_EXP 16
39004: PPUSH
39005: CALL_OW 302
39009: IFFALSE 39023
// Say ( Connie , D20-Con-1 ) ;
39011: LD_EXP 16
39015: PPUSH
39016: LD_STRING D20-Con-1
39018: PPUSH
39019: CALL_OW 88
// if IsOk ( Kurt ) then
39023: LD_EXP 30
39027: PPUSH
39028: CALL_OW 302
39032: IFFALSE 39046
// Say ( Kurt , D20-Kurt-1 ) ;
39034: LD_EXP 30
39038: PPUSH
39039: LD_STRING D20-Kurt-1
39041: PPUSH
39042: CALL_OW 88
// if IsOk ( Kikuchi ) then
39046: LD_EXP 15
39050: PPUSH
39051: CALL_OW 302
39055: IFFALSE 39069
// Say ( Kikuchi , D20-Yam-1 ) ;
39057: LD_EXP 15
39061: PPUSH
39062: LD_STRING D20-Yam-1
39064: PPUSH
39065: CALL_OW 88
// if IsOk ( Frank ) then
39069: LD_EXP 14
39073: PPUSH
39074: CALL_OW 302
39078: IFFALSE 39092
// Say ( Frank , D20-Frank-1 ) ;
39080: LD_EXP 14
39084: PPUSH
39085: LD_STRING D20-Frank-1
39087: PPUSH
39088: CALL_OW 88
// DialogueOff ;
39092: CALL_OW 7
// if AllianceEscape = 1 then
39096: LD_EXP 91
39100: PUSH
39101: LD_INT 1
39103: EQUAL
39104: IFFALSE 39118
// AddMedal ( Roth , 1 ) else
39106: LD_STRING Roth
39108: PPUSH
39109: LD_INT 1
39111: PPUSH
39112: CALL_OW 101
39116: GO 39129
// AddMedal ( Roth , - 1 ) ;
39118: LD_STRING Roth
39120: PPUSH
39121: LD_INT 1
39123: NEG
39124: PPUSH
39125: CALL_OW 101
// if behemothStatus = 1 then
39129: LD_EXP 60
39133: PUSH
39134: LD_INT 1
39136: EQUAL
39137: IFFALSE 39151
// AddMedal ( Project , 1 ) else
39139: LD_STRING Project
39141: PPUSH
39142: LD_INT 1
39144: PPUSH
39145: CALL_OW 101
39149: GO 39162
// AddMedal ( Project , - 1 ) ;
39151: LD_STRING Project
39153: PPUSH
39154: LD_INT 1
39156: NEG
39157: PPUSH
39158: CALL_OW 101
// if unitLost = 0 then
39162: LD_EXP 98
39166: PUSH
39167: LD_INT 0
39169: EQUAL
39170: IFFALSE 39184
// AddMedal ( NoLosses , 1 ) else
39172: LD_STRING NoLosses
39174: PPUSH
39175: LD_INT 1
39177: PPUSH
39178: CALL_OW 101
39182: GO 39195
// AddMedal ( NoLosses , - 1 ) ;
39184: LD_STRING NoLosses
39186: PPUSH
39187: LD_INT 1
39189: NEG
39190: PPUSH
39191: CALL_OW 101
// GiveMedals ( MAIN ) ;
39195: LD_STRING MAIN
39197: PPUSH
39198: CALL_OW 102
// YouWin ;
39202: CALL_OW 103
// end ; end_of_file
39206: END
// every 0 0$1 trigger IsDead ( JMM ) do
39207: LD_EXP 1
39211: PPUSH
39212: CALL_OW 301
39216: IFFALSE 39228
39218: GO 39220
39220: DISABLE
// YouLost ( JMM ) ;
39221: LD_STRING JMM
39223: PPUSH
39224: CALL_OW 104
39228: END
