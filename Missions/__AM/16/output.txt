// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 , others13Omega ; export heroesFromOmega , Baker , Gordon , Peter ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Yakotich , Roth , Burlak , Kurt , Omar , Heike ; export Vsevolod , sewiVeh ; export Kozlov ; export Kovalyuk , Oblukov , Bystrov , Fadeev , Gleb , Petrosyan , Petrovova , Kuzmov , Mikhail , Furmanov , Belkov ; export Simms , Scholtze , Kirilenkova , Kapitsova , Karamazov ; export LegionFriend , LegionFriendStatus ; export legionVehicles ; export arControler ; export ruVehicles ; export ruBehMehs , ruBehs ; export behemothStatus ; export russianVehicles ; export allianceVehicles ; export allianceControler ; export allianceFirstContact ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export powellUnloadCargo ; export powellWarm ; export startAttacks ; export powellVeh , centerPowell , powBomb ; export BurlakStatus , StevensStatus ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus , JMMGirlStatus ; export KhatamStatus ; export LegionAI , AllianceAI , RussianAI ; export LegionTarget , AllianceTarget , RussianTarget ; export russianEscape , allianceEscape ; export RothStatus ; export legionDestroyedBuilds , russianDestroyedBuilds , allianceDestroyedBuilds ; export timerStatus , timeAction ; export unitLost ; export legionRocket ; export playerHaveRocket ; export missionStage ; export blockEvent1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 77
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 78
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 79
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 81
  58: PUSH
  59: LD_STRING 14_JMMGirlStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 80
  74: PUSH
  75: LD_STRING 14_KappaStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  86: LD_ADDR_EXP 82
  90: PUSH
  91: LD_STRING 10_KhatamStatus_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 102: LD_ADDR_EXP 75
 106: PUSH
 107: LD_STRING 13_BurlakStatus_1
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 118: LD_ADDR_EXP 76
 122: PUSH
 123: LD_STRING 13_StevensStatus_1
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: CALL_OW 30
 133: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
 134: LD_ADDR_EXP 64
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// amUnitsAttack = [ ] ;
 141: LD_ADDR_EXP 65
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 148: LD_ADDR_EXP 66
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// startAttacks = 0 ;
 155: LD_ADDR_EXP 71
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// powellBuildBase = 0 ;
 163: LD_ADDR_EXP 67
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// powellUnloadCargo = 0 ;
 171: LD_ADDR_EXP 69
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// powellAttacks = 0 ;
 179: LD_ADDR_EXP 68
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// centerPowell = 0 ;
 187: LD_ADDR_EXP 73
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// powellWarm = 0 ;
 195: LD_ADDR_EXP 70
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// LegionFriendStatus = 0 ;
 203: LD_ADDR_EXP 53
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// RothStatus = 1 ;
 211: LD_ADDR_EXP 91
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// allianceFirstContact = 0 ;
 219: LD_ADDR_EXP 63
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// legionVehicles = [ ] ;
 227: LD_ADDR_EXP 54
 231: PUSH
 232: EMPTY
 233: ST_TO_ADDR
// russianVehicles = [ ] ;
 234: LD_ADDR_EXP 60
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// allianceVehicles = [ ] ;
 241: LD_ADDR_EXP 61
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// legionDestroyedBuilds = [ ] ;
 248: LD_ADDR_EXP 92
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// russianDestroyedBuilds = [ ] ;
 255: LD_ADDR_EXP 93
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// allianceDestroyedBuilds = [ ] ;
 262: LD_ADDR_EXP 94
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ruVehicles = [ ] ;
 269: LD_ADDR_EXP 56
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ruBehMehs = [ ] ;
 276: LD_ADDR_EXP 57
 280: PUSH
 281: EMPTY
 282: ST_TO_ADDR
// ruBehs = [ ] ;
 283: LD_ADDR_EXP 58
 287: PUSH
 288: EMPTY
 289: ST_TO_ADDR
// missionStage = 0 ;
 290: LD_ADDR_EXP 100
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// behemothStatus = 0 ;
 298: LD_ADDR_EXP 59
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// unitLost = 0 ;
 306: LD_ADDR_EXP 97
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// LegionAI = 1 ;
 314: LD_ADDR_EXP 83
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// AllianceAI = 1 ;
 322: LD_ADDR_EXP 84
 326: PUSH
 327: LD_INT 1
 329: ST_TO_ADDR
// RussianAI = 1 ;
 330: LD_ADDR_EXP 85
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// timerStatus = 0 ;
 338: LD_ADDR_EXP 95
 342: PUSH
 343: LD_INT 0
 345: ST_TO_ADDR
// timeAction = 0 0$00 ;
 346: LD_ADDR_EXP 96
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// playerHaveRocket = 0 ;
 354: LD_ADDR_EXP 99
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// blockEvent1 = 0 ;
 362: LD_ADDR_EXP 101
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// debugMode = 0 ;
 370: LD_ADDR_EXP 102
 374: PUSH
 375: LD_INT 0
 377: ST_TO_ADDR
// PrepareHeroes ;
 378: CALL 727 0 0
// PrepareHeroesFromEpsilon ;
 382: CALL 1264 0 0
// PrepareRandoms ;
 386: CALL 1608 0 0
// PrepareLegion ;
 390: CALL 3844 0 0
// PrepareRussians ;
 394: CALL 4241 0 0
// PrepareAlliance ;
 398: CALL 5988 0 0
// PrepareDifficulty ;
 402: CALL 7557 0 0
// SetBName ( RuDep2 , zhukov ) ;
 406: LD_INT 23
 408: PPUSH
 409: LD_STRING zhukov
 411: PPUSH
 412: CALL_OW 500
// end ;
 416: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 417: LD_EXP 102
 421: PUSH
 422: LD_INT 1
 424: EQUAL
 425: IFFALSE 724
 427: GO 429
 429: DISABLE
 430: LD_INT 0
 432: PPUSH
// begin enable ;
 433: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 434: LD_ADDR_VAR 0 1
 438: PUSH
 439: LD_INT 22
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: PUSH
 449: LD_INT 21
 451: PUSH
 452: LD_INT 1
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PPUSH
 463: CALL_OW 69
 467: PUSH
 468: FOR_IN
 469: IFFALSE 485
// SetLives ( i , 1000 ) ;
 471: LD_VAR 0 1
 475: PPUSH
 476: LD_INT 1000
 478: PPUSH
 479: CALL_OW 234
 483: GO 468
 485: POP
 486: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 487: LD_ADDR_VAR 0 1
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 2
 504: PUSH
 505: LD_INT 30
 507: PUSH
 508: LD_INT 0
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: PUSH
 515: LD_INT 30
 517: PUSH
 518: LD_INT 1
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PPUSH
 534: CALL_OW 69
 538: PUSH
 539: FOR_IN
 540: IFFALSE 564
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 542: LD_VAR 0 1
 546: PPUSH
 547: CALL_OW 274
 551: PPUSH
 552: LD_INT 1
 554: PPUSH
 555: LD_INT 9999
 557: PPUSH
 558: CALL_OW 277
 562: GO 539
 564: POP
 565: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 566: LD_ADDR_VAR 0 1
 570: PUSH
 571: LD_INT 22
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 2
 583: PUSH
 584: LD_INT 30
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 30
 596: PUSH
 597: LD_INT 1
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 69
 617: PUSH
 618: FOR_IN
 619: IFFALSE 643
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 621: LD_VAR 0 1
 625: PPUSH
 626: CALL_OW 274
 630: PPUSH
 631: LD_INT 2
 633: PPUSH
 634: LD_INT 9999
 636: PPUSH
 637: CALL_OW 277
 641: GO 618
 643: POP
 644: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 645: LD_ADDR_VAR 0 1
 649: PUSH
 650: LD_INT 22
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 30
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: PUSH
 673: LD_INT 30
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: PUSH
 697: FOR_IN
 698: IFFALSE 722
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 700: LD_VAR 0 1
 704: PPUSH
 705: CALL_OW 274
 709: PPUSH
 710: LD_INT 3
 712: PPUSH
 713: LD_INT 9999
 715: PPUSH
 716: CALL_OW 277
 720: GO 697
 722: POP
 723: POP
// end ; end_of_file
 724: PPOPN 1
 726: END
// export function PrepareHeroes ; begin
 727: LD_INT 0
 729: PPUSH
// uc_side = 1 ;
 730: LD_ADDR_OWVAR 20
 734: PUSH
 735: LD_INT 1
 737: ST_TO_ADDR
// uc_nation = 1 ;
 738: LD_ADDR_OWVAR 21
 742: PUSH
 743: LD_INT 1
 745: ST_TO_ADDR
// if JMMVeh = [ ] then
 746: LD_EXP 77
 750: PUSH
 751: EMPTY
 752: EQUAL
 753: IFFALSE 799
// begin vc_engine = 3 ;
 755: LD_ADDR_OWVAR 39
 759: PUSH
 760: LD_INT 3
 762: ST_TO_ADDR
// vc_control = 1 ;
 763: LD_ADDR_OWVAR 38
 767: PUSH
 768: LD_INT 1
 770: ST_TO_ADDR
// vc_chassis = 5 ;
 771: LD_ADDR_OWVAR 37
 775: PUSH
 776: LD_INT 5
 778: ST_TO_ADDR
// vc_weapon = 9 ;
 779: LD_ADDR_OWVAR 40
 783: PUSH
 784: LD_INT 9
 786: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 787: LD_ADDR_EXP 24
 791: PUSH
 792: CALL_OW 45
 796: ST_TO_ADDR
// end else
 797: GO 881
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 799: LD_ADDR_OWVAR 37
 803: PUSH
 804: LD_EXP 77
 808: PUSH
 809: LD_INT 1
 811: ARRAY
 812: PUSH
 813: LD_INT 1
 815: ARRAY
 816: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 817: LD_ADDR_OWVAR 39
 821: PUSH
 822: LD_EXP 77
 826: PUSH
 827: LD_INT 2
 829: ARRAY
 830: PUSH
 831: LD_INT 1
 833: ARRAY
 834: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 835: LD_ADDR_OWVAR 38
 839: PUSH
 840: LD_EXP 77
 844: PUSH
 845: LD_INT 3
 847: ARRAY
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 853: LD_ADDR_OWVAR 40
 857: PUSH
 858: LD_EXP 77
 862: PUSH
 863: LD_INT 4
 865: ARRAY
 866: PUSH
 867: LD_INT 1
 869: ARRAY
 870: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 871: LD_ADDR_EXP 24
 875: PUSH
 876: CALL_OW 45
 880: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 881: LD_EXP 78
 885: PUSH
 886: EMPTY
 887: EQUAL
 888: NOT
 889: IFFALSE 973
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 891: LD_ADDR_OWVAR 37
 895: PUSH
 896: LD_EXP 78
 900: PUSH
 901: LD_INT 1
 903: ARRAY
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 909: LD_ADDR_OWVAR 39
 913: PUSH
 914: LD_EXP 78
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: PUSH
 923: LD_INT 1
 925: ARRAY
 926: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 927: LD_ADDR_OWVAR 38
 931: PUSH
 932: LD_EXP 78
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 945: LD_ADDR_OWVAR 40
 949: PUSH
 950: LD_EXP 78
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 963: LD_ADDR_EXP 25
 967: PUSH
 968: CALL_OW 45
 972: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 973: LD_EXP 24
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 985: LD_EXP 25
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 997: LD_EXP 24
1001: PPUSH
1002: LD_INT 99
1004: PPUSH
1005: LD_INT 154
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 48
// if JMMGirlVeh then
1015: LD_EXP 78
1019: IFFALSE 1039
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
1021: LD_EXP 25
1025: PPUSH
1026: LD_INT 98
1028: PPUSH
1029: LD_INT 159
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
1039: LD_ADDR_EXP 1
1043: PUSH
1044: LD_STRING 14_JMM
1046: PPUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL 6633 0 2
1054: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
1055: LD_EXP 1
1059: PPUSH
1060: LD_EXP 24
1064: PPUSH
1065: CALL_OW 52
// if not JMMGirlVeh = [ ] then
1069: LD_EXP 78
1073: PUSH
1074: EMPTY
1075: EQUAL
1076: NOT
1077: IFFALSE 1199
// begin if JMMGirl = 1 then
1079: LD_EXP 79
1083: PUSH
1084: LD_INT 1
1086: EQUAL
1087: IFFALSE 1119
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
1089: LD_ADDR_EXP 2
1093: PUSH
1094: LD_STRING 14_Joan
1096: PPUSH
1097: LD_INT 1
1099: PPUSH
1100: CALL 6633 0 2
1104: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
1105: LD_EXP 2
1109: PPUSH
1110: LD_EXP 25
1114: PPUSH
1115: CALL_OW 52
// end ; if JMMGirl = 2 then
1119: LD_EXP 79
1123: PUSH
1124: LD_INT 2
1126: EQUAL
1127: IFFALSE 1159
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
1129: LD_ADDR_EXP 4
1133: PUSH
1134: LD_STRING 14_Lisa
1136: PPUSH
1137: LD_INT 1
1139: PPUSH
1140: CALL 6633 0 2
1144: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
1145: LD_EXP 4
1149: PPUSH
1150: LD_EXP 25
1154: PPUSH
1155: CALL_OW 52
// end ; if JMMGirl = 3 then
1159: LD_EXP 79
1163: PUSH
1164: LD_INT 3
1166: EQUAL
1167: IFFALSE 1199
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
1169: LD_ADDR_EXP 16
1173: PUSH
1174: LD_STRING 14_Connie
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 6633 0 2
1184: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1185: LD_EXP 16
1189: PPUSH
1190: LD_EXP 25
1194: PPUSH
1195: CALL_OW 52
// end ; end ; uc_side = 4 ;
1199: LD_ADDR_OWVAR 20
1203: PUSH
1204: LD_INT 4
1206: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1207: LD_ADDR_EXP 17
1211: PUSH
1212: LD_STRING Powell
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL 6633 0 2
1222: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 42 , 62 , 5 , false ) ;
1223: LD_EXP 17
1227: PPUSH
1228: LD_INT 42
1230: PPUSH
1231: LD_INT 62
1233: PPUSH
1234: LD_INT 5
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 50
// ComTurnXY ( Powell , 43 , 63 ) ;
1244: LD_EXP 17
1248: PPUSH
1249: LD_INT 43
1251: PPUSH
1252: LD_INT 63
1254: PPUSH
1255: CALL_OW 118
// end ;
1259: LD_VAR 0 1
1263: RET
// export function PrepareHeroesFromEpsilon ; begin
1264: LD_INT 0
1266: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1267: LD_ADDR_EXP 4
1271: PUSH
1272: LD_STRING Lisa
1274: PPUSH
1275: CALL 6690 0 1
1279: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1280: LD_ADDR_EXP 5
1284: PUSH
1285: LD_STRING Donaldson
1287: PPUSH
1288: CALL 6690 0 1
1292: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1293: LD_ADDR_EXP 6
1297: PUSH
1298: LD_STRING Bobby
1300: PPUSH
1301: CALL 6690 0 1
1305: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1306: LD_ADDR_EXP 7
1310: PUSH
1311: LD_STRING Cyrus
1313: PPUSH
1314: CALL 6690 0 1
1318: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1319: LD_ADDR_EXP 8
1323: PUSH
1324: LD_STRING Denis
1326: PPUSH
1327: CALL 6690 0 1
1331: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1332: LD_ADDR_EXP 9
1336: PUSH
1337: LD_STRING Brown
1339: PPUSH
1340: CALL 6690 0 1
1344: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1345: LD_ADDR_EXP 10
1349: PUSH
1350: LD_STRING Gladstone
1352: PPUSH
1353: CALL 6690 0 1
1357: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1358: LD_ADDR_EXP 11
1362: PUSH
1363: LD_STRING Houten
1365: PPUSH
1366: CALL 6690 0 1
1370: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1371: LD_ADDR_EXP 12
1375: PUSH
1376: LD_STRING Cornel
1378: PPUSH
1379: CALL 6690 0 1
1383: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1384: LD_ADDR_EXP 13
1388: PUSH
1389: LD_STRING Gary
1391: PPUSH
1392: CALL 6690 0 1
1396: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1397: LD_ADDR_EXP 14
1401: PUSH
1402: LD_STRING Frank
1404: PPUSH
1405: CALL 6690 0 1
1409: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1410: LD_ADDR_EXP 15
1414: PUSH
1415: LD_STRING Kikuchi
1417: PPUSH
1418: CALL 6690 0 1
1422: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1423: LD_EXP 4
1427: PPUSH
1428: LD_INT 6
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1438: LD_EXP 5
1442: PPUSH
1443: LD_INT 6
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_INT 6
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1468: LD_EXP 7
1472: PPUSH
1473: LD_INT 6
1475: PPUSH
1476: LD_INT 0
1478: PPUSH
1479: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1483: LD_EXP 8
1487: PPUSH
1488: LD_INT 6
1490: PPUSH
1491: LD_INT 0
1493: PPUSH
1494: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1498: LD_EXP 9
1502: PPUSH
1503: LD_INT 6
1505: PPUSH
1506: LD_INT 0
1508: PPUSH
1509: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1513: LD_EXP 10
1517: PPUSH
1518: LD_INT 6
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1528: LD_EXP 11
1532: PPUSH
1533: LD_INT 6
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1543: LD_EXP 12
1547: PPUSH
1548: LD_INT 6
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1558: LD_EXP 13
1562: PPUSH
1563: LD_INT 6
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1573: LD_EXP 14
1577: PPUSH
1578: LD_INT 6
1580: PPUSH
1581: LD_INT 0
1583: PPUSH
1584: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1588: LD_EXP 15
1592: PPUSH
1593: LD_INT 6
1595: PPUSH
1596: LD_INT 0
1598: PPUSH
1599: CALL_OW 49
// end ;
1603: LD_VAR 0 1
1607: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1608: LD_INT 0
1610: PPUSH
1611: PPUSH
1612: PPUSH
1613: PPUSH
1614: PPUSH
// uc_side = 4 ;
1615: LD_ADDR_OWVAR 20
1619: PUSH
1620: LD_INT 4
1622: ST_TO_ADDR
// uc_nation = 1 ;
1623: LD_ADDR_OWVAR 21
1627: PUSH
1628: LD_INT 1
1630: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1631: LD_ADDR_EXP 18
1635: PUSH
1636: LD_STRING 13s_others
1638: PPUSH
1639: CALL_OW 31
1643: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: LD_INT 22
1651: PUSH
1652: LD_INT 4
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 21
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PPUSH
1673: CALL_OW 69
1677: PUSH
1678: LD_EXP 17
1682: PUSH
1683: EMPTY
1684: LIST
1685: DIFF
1686: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1687: LD_ADDR_VAR 0 5
1691: PUSH
1692: LD_VAR 0 4
1696: PPUSH
1697: CALL 6820 0 1
1701: ST_TO_ADDR
// if others13 >= 8 then
1702: LD_EXP 18
1706: PUSH
1707: LD_INT 8
1709: GREATEREQUAL
1710: IFFALSE 1771
// begin for i = 1 to 8 do
1712: LD_ADDR_VAR 0 2
1716: PUSH
1717: DOUBLE
1718: LD_INT 1
1720: DEC
1721: ST_TO_ADDR
1722: LD_INT 8
1724: PUSH
1725: FOR_TO
1726: IFFALSE 1767
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1728: LD_EXP 18
1732: PUSH
1733: LD_INT 1
1735: ARRAY
1736: PPUSH
1737: LD_INT 6
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1747: LD_ADDR_EXP 18
1751: PUSH
1752: LD_EXP 18
1756: PPUSH
1757: LD_INT 1
1759: PPUSH
1760: CALL_OW 3
1764: ST_TO_ADDR
// end ;
1765: GO 1725
1767: POP
1768: POP
// end else
1769: GO 1830
// begin for i = 1 to others13 do
1771: LD_ADDR_VAR 0 2
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_EXP 18
1785: PUSH
1786: FOR_TO
1787: IFFALSE 1828
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1789: LD_EXP 18
1793: PUSH
1794: LD_INT 1
1796: ARRAY
1797: PPUSH
1798: LD_INT 6
1800: PPUSH
1801: LD_INT 0
1803: PPUSH
1804: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1808: LD_ADDR_EXP 18
1812: PUSH
1813: LD_EXP 18
1817: PPUSH
1818: LD_INT 1
1820: PPUSH
1821: CALL_OW 3
1825: ST_TO_ADDR
// end ;
1826: GO 1786
1828: POP
1829: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1830: LD_ADDR_VAR 0 4
1834: PUSH
1835: LD_INT 22
1837: PUSH
1838: LD_INT 4
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 21
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PPUSH
1859: CALL_OW 69
1863: PUSH
1864: LD_EXP 17
1868: PUSH
1869: EMPTY
1870: LIST
1871: DIFF
1872: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1873: LD_ADDR_VAR 0 5
1877: PUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL 6820 0 1
1887: ST_TO_ADDR
// if others13 >= 6 then
1888: LD_EXP 18
1892: PUSH
1893: LD_INT 6
1895: GREATEREQUAL
1896: IFFALSE 1957
// begin for i = 1 to 6 do
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: DOUBLE
1904: LD_INT 1
1906: DEC
1907: ST_TO_ADDR
1908: LD_INT 6
1910: PUSH
1911: FOR_TO
1912: IFFALSE 1953
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1914: LD_EXP 18
1918: PUSH
1919: LD_INT 1
1921: ARRAY
1922: PPUSH
1923: LD_INT 6
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1933: LD_ADDR_EXP 18
1937: PUSH
1938: LD_EXP 18
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: CALL_OW 3
1950: ST_TO_ADDR
// end ;
1951: GO 1911
1953: POP
1954: POP
// end else
1955: GO 2016
// begin for i = 1 to others13 do
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: DOUBLE
1963: LD_INT 1
1965: DEC
1966: ST_TO_ADDR
1967: LD_EXP 18
1971: PUSH
1972: FOR_TO
1973: IFFALSE 2014
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1975: LD_EXP 18
1979: PUSH
1980: LD_INT 1
1982: ARRAY
1983: PPUSH
1984: LD_INT 6
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1994: LD_ADDR_EXP 18
1998: PUSH
1999: LD_EXP 18
2003: PPUSH
2004: LD_INT 1
2006: PPUSH
2007: CALL_OW 3
2011: ST_TO_ADDR
// end ;
2012: GO 1972
2014: POP
2015: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
2016: LD_ADDR_VAR 0 4
2020: PUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 4
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 21
2033: PUSH
2034: LD_INT 1
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PPUSH
2045: CALL_OW 69
2049: PUSH
2050: LD_EXP 17
2054: PUSH
2055: EMPTY
2056: LIST
2057: DIFF
2058: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
2059: LD_ADDR_VAR 0 5
2063: PUSH
2064: LD_VAR 0 4
2068: PPUSH
2069: CALL 6820 0 1
2073: ST_TO_ADDR
// if heroLenght < 19 then
2074: LD_VAR 0 5
2078: PUSH
2079: LD_INT 19
2081: LESS
2082: IFFALSE 2180
// for i = 1 to 19 - heroLenght do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 19
2096: PUSH
2097: LD_VAR 0 5
2101: MINUS
2102: PUSH
2103: FOR_TO
2104: IFFALSE 2178
// begin hc_gallery =  ;
2106: LD_ADDR_OWVAR 33
2110: PUSH
2111: LD_STRING 
2113: ST_TO_ADDR
// hc_name =  ;
2114: LD_ADDR_OWVAR 26
2118: PUSH
2119: LD_STRING 
2121: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
2122: LD_INT 0
2124: PPUSH
2125: LD_INT 1
2127: PPUSH
2128: LD_INT 4
2130: PPUSH
2131: CALL_OW 12
2135: PPUSH
2136: LD_INT 6
2138: PPUSH
2139: LD_INT 8
2141: PPUSH
2142: CALL_OW 12
2146: PPUSH
2147: CALL_OW 380
// un = CreateHuman ;
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: CALL_OW 44
2160: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
2161: LD_VAR 0 3
2165: PPUSH
2166: LD_INT 6
2168: PPUSH
2169: LD_INT 0
2171: PPUSH
2172: CALL_OW 49
// end ;
2176: GO 2103
2178: POP
2179: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
2180: LD_ADDR_VAR 0 4
2184: PUSH
2185: LD_INT 22
2187: PUSH
2188: LD_INT 4
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 21
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PPUSH
2209: CALL_OW 69
2213: PUSH
2214: LD_EXP 17
2218: PUSH
2219: LD_EXP 1
2223: PUSH
2224: LD_EXP 2
2228: PUSH
2229: LD_EXP 3
2233: PUSH
2234: LD_EXP 4
2238: PUSH
2239: LD_EXP 5
2243: PUSH
2244: LD_EXP 6
2248: PUSH
2249: LD_EXP 7
2253: PUSH
2254: LD_EXP 8
2258: PUSH
2259: LD_EXP 9
2263: PUSH
2264: LD_EXP 10
2268: PUSH
2269: LD_EXP 11
2273: PUSH
2274: LD_EXP 12
2278: PUSH
2279: LD_EXP 13
2283: PUSH
2284: LD_EXP 14
2288: PUSH
2289: LD_EXP 15
2293: PUSH
2294: LD_EXP 16
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: DIFF
2318: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2319: LD_ADDR_EXP 64
2323: PUSH
2324: LD_VAR 0 4
2328: PPUSH
2329: LD_INT 1
2331: PPUSH
2332: CALL 7190 0 2
2336: ST_TO_ADDR
// for i = 1 to 8 do
2337: LD_ADDR_VAR 0 2
2341: PUSH
2342: DOUBLE
2343: LD_INT 1
2345: DEC
2346: ST_TO_ADDR
2347: LD_INT 8
2349: PUSH
2350: FOR_TO
2351: IFFALSE 2381
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2353: LD_ADDR_EXP 65
2357: PUSH
2358: LD_EXP 65
2362: PUSH
2363: LD_EXP 64
2367: PUSH
2368: LD_VAR 0 2
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: ADD
2378: ST_TO_ADDR
2379: GO 2350
2381: POP
2382: POP
// SetClass ( amUnitsAttack , 1 ) ;
2383: LD_EXP 65
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 336
// end ;
2395: LD_VAR 0 1
2399: RET
// export function PrepareSupportFromKappa ; var i , veh ; begin
2400: LD_INT 0
2402: PPUSH
2403: PPUSH
2404: PPUSH
// uc_side = 1 ;
2405: LD_ADDR_OWVAR 20
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// uc_nation = 1 ;
2413: LD_ADDR_OWVAR 21
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// for i := 1 to 5 do
2421: LD_ADDR_VAR 0 2
2425: PUSH
2426: DOUBLE
2427: LD_INT 1
2429: DEC
2430: ST_TO_ADDR
2431: LD_INT 5
2433: PUSH
2434: FOR_TO
2435: IFFALSE 2519
// begin vc_engine = 3 ;
2437: LD_ADDR_OWVAR 39
2441: PUSH
2442: LD_INT 3
2444: ST_TO_ADDR
// vc_control = 3 ;
2445: LD_ADDR_OWVAR 38
2449: PUSH
2450: LD_INT 3
2452: ST_TO_ADDR
// vc_chassis = 3 ;
2453: LD_ADDR_OWVAR 37
2457: PUSH
2458: LD_INT 3
2460: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2461: LD_ADDR_OWVAR 40
2465: PUSH
2466: LD_INT 5
2468: PUSH
2469: LD_INT 9
2471: PUSH
2472: LD_INT 7
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 1
2482: PPUSH
2483: LD_INT 3
2485: PPUSH
2486: CALL_OW 12
2490: ARRAY
2491: ST_TO_ADDR
// veh = CreateVehicle ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 45
2501: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 14
2509: PPUSH
2510: LD_INT 0
2512: PPUSH
2513: CALL_OW 49
// end ;
2517: GO 2434
2519: POP
2520: POP
// vc_engine = 3 ;
2521: LD_ADDR_OWVAR 39
2525: PUSH
2526: LD_INT 3
2528: ST_TO_ADDR
// vc_control = 1 ;
2529: LD_ADDR_OWVAR 38
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// vc_chassis = 3 ;
2537: LD_ADDR_OWVAR 37
2541: PUSH
2542: LD_INT 3
2544: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2545: LD_ADDR_OWVAR 40
2549: PUSH
2550: LD_INT 5
2552: PUSH
2553: LD_INT 9
2555: PUSH
2556: LD_INT 7
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 3
2569: PPUSH
2570: CALL_OW 12
2574: ARRAY
2575: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
2576: LD_ADDR_EXP 25
2580: PUSH
2581: CALL_OW 45
2585: ST_TO_ADDR
// PlaceUnitArea ( NewJMMGirlVeh , KappaSpawn , false ) ;
2586: LD_EXP 25
2590: PPUSH
2591: LD_INT 14
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: CALL_OW 49
// if JMMGirl = 1 then
2601: LD_EXP 79
2605: PUSH
2606: LD_INT 1
2608: EQUAL
2609: IFFALSE 2662
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
2611: LD_ADDR_EXP 2
2615: PUSH
2616: LD_STRING 14_Joan
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: CALL 6633 0 2
2626: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
2627: LD_EXP 2
2631: PPUSH
2632: LD_EXP 25
2636: PPUSH
2637: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2641: LD_EXP 25
2645: PPUSH
2646: CALL_OW 87
// Say ( Joan , D10BW-Joan-1 ) ;
2650: LD_EXP 2
2654: PPUSH
2655: LD_STRING D10BW-Joan-1
2657: PPUSH
2658: CALL_OW 88
// end ; if JMMGirl = 2 then
2662: LD_EXP 79
2666: PUSH
2667: LD_INT 2
2669: EQUAL
2670: IFFALSE 2723
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
2672: LD_ADDR_EXP 4
2676: PUSH
2677: LD_STRING 14_Lisa
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL 6633 0 2
2687: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
2688: LD_EXP 4
2692: PPUSH
2693: LD_EXP 25
2697: PPUSH
2698: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2702: LD_EXP 25
2706: PPUSH
2707: CALL_OW 87
// Say ( Lisa , D10BW-Lisa-1 ) ;
2711: LD_EXP 4
2715: PPUSH
2716: LD_STRING D10BW-Lisa-1
2718: PPUSH
2719: CALL_OW 88
// end ; if JMMGirl = 3 then
2723: LD_EXP 79
2727: PUSH
2728: LD_INT 3
2730: EQUAL
2731: IFFALSE 2784
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
2733: LD_ADDR_EXP 16
2737: PUSH
2738: LD_STRING 14_Connie
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL 6633 0 2
2748: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
2749: LD_EXP 16
2753: PPUSH
2754: LD_EXP 25
2758: PPUSH
2759: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2763: LD_EXP 25
2767: PPUSH
2768: CALL_OW 87
// Say ( Lisa , D10BW-Con-1 ) ;
2772: LD_EXP 4
2776: PPUSH
2777: LD_STRING D10BW-Con-1
2779: PPUSH
2780: CALL_OW 88
// end ; end ;
2784: LD_VAR 0 1
2788: RET
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , avalaibleVehs , vehicles , resources , cargoList ; begin
2789: LD_INT 0
2791: PPUSH
2792: PPUSH
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
2798: PPUSH
2799: PPUSH
// uc_side = 1 ;
2800: LD_ADDR_OWVAR 20
2804: PUSH
2805: LD_INT 1
2807: ST_TO_ADDR
// uc_nation = 1 ;
2808: LD_ADDR_OWVAR 21
2812: PUSH
2813: LD_INT 1
2815: ST_TO_ADDR
// omegaVeh = [ ] ;
2816: LD_ADDR_VAR 0 3
2820: PUSH
2821: EMPTY
2822: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
2823: LD_STRING 13s_Lisa
2825: PPUSH
2826: CALL_OW 28
2830: PUSH
2831: LD_INT 0
2833: EQUAL
2834: IFFALSE 2849
// Lisa = PrepareUnitOmega ( Lisa ) ;
2836: LD_ADDR_EXP 4
2840: PUSH
2841: LD_STRING Lisa
2843: PPUSH
2844: CALL 6747 0 1
2848: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
2849: LD_STRING 13s_Donaldson
2851: PPUSH
2852: CALL_OW 28
2856: PUSH
2857: LD_INT 0
2859: EQUAL
2860: IFFALSE 2875
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
2862: LD_ADDR_EXP 5
2866: PUSH
2867: LD_STRING Donaldson
2869: PPUSH
2870: CALL 6747 0 1
2874: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
2875: LD_STRING 13s_Bobby
2877: PPUSH
2878: CALL_OW 28
2882: PUSH
2883: LD_INT 0
2885: EQUAL
2886: IFFALSE 2901
// Bobby = PrepareUnitOmega ( Bobby ) ;
2888: LD_ADDR_EXP 6
2892: PUSH
2893: LD_STRING Bobby
2895: PPUSH
2896: CALL 6747 0 1
2900: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
2901: LD_STRING 13s_Cyrus
2903: PPUSH
2904: CALL_OW 28
2908: PUSH
2909: LD_INT 0
2911: EQUAL
2912: IFFALSE 2927
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
2914: LD_ADDR_EXP 7
2918: PUSH
2919: LD_STRING Cyrus
2921: PPUSH
2922: CALL 6747 0 1
2926: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
2927: LD_STRING 13s_Denis
2929: PPUSH
2930: CALL_OW 28
2934: PUSH
2935: LD_INT 0
2937: EQUAL
2938: IFFALSE 2953
// Denis = PrepareUnitOmega ( Denis ) ;
2940: LD_ADDR_EXP 8
2944: PUSH
2945: LD_STRING Denis
2947: PPUSH
2948: CALL 6747 0 1
2952: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
2953: LD_STRING 13s_Brown
2955: PPUSH
2956: CALL_OW 28
2960: PUSH
2961: LD_INT 0
2963: EQUAL
2964: IFFALSE 2979
// Brown = PrepareUnitOmega ( Brown ) ;
2966: LD_ADDR_EXP 9
2970: PUSH
2971: LD_STRING Brown
2973: PPUSH
2974: CALL 6747 0 1
2978: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
2979: LD_STRING 13s_Gladstone
2981: PPUSH
2982: CALL_OW 28
2986: PUSH
2987: LD_INT 0
2989: EQUAL
2990: IFFALSE 3005
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
2992: LD_ADDR_EXP 10
2996: PUSH
2997: LD_STRING Gladstone
2999: PPUSH
3000: CALL 6747 0 1
3004: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
3005: LD_STRING 13s_Houten
3007: PPUSH
3008: CALL_OW 28
3012: PUSH
3013: LD_INT 0
3015: EQUAL
3016: IFFALSE 3031
// Houten = PrepareUnitOmega ( Houten ) ;
3018: LD_ADDR_EXP 11
3022: PUSH
3023: LD_STRING Houten
3025: PPUSH
3026: CALL 6747 0 1
3030: ST_TO_ADDR
// if TestCharacters ( 13s_Cornell ) = false then
3031: LD_STRING 13s_Cornell
3033: PPUSH
3034: CALL_OW 28
3038: PUSH
3039: LD_INT 0
3041: EQUAL
3042: IFFALSE 3057
// Cornel = PrepareUnitOmega ( Cornell ) ;
3044: LD_ADDR_EXP 12
3048: PUSH
3049: LD_STRING Cornell
3051: PPUSH
3052: CALL 6747 0 1
3056: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
3057: LD_STRING 13s_Gary
3059: PPUSH
3060: CALL_OW 28
3064: PUSH
3065: LD_INT 0
3067: EQUAL
3068: IFFALSE 3083
// Gary = PrepareUnitOmega ( Gary ) ;
3070: LD_ADDR_EXP 13
3074: PUSH
3075: LD_STRING Gary
3077: PPUSH
3078: CALL 6747 0 1
3082: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
3083: LD_STRING 13s_Frank
3085: PPUSH
3086: CALL_OW 28
3090: PUSH
3091: LD_INT 0
3093: EQUAL
3094: IFFALSE 3109
// Frank = PrepareUnitOmega ( Frank ) ;
3096: LD_ADDR_EXP 14
3100: PUSH
3101: LD_STRING Frank
3103: PPUSH
3104: CALL 6747 0 1
3108: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3109: LD_STRING 13s_Kikuchi
3111: PPUSH
3112: CALL_OW 28
3116: PUSH
3117: LD_INT 0
3119: EQUAL
3120: IFFALSE 3135
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3122: LD_ADDR_EXP 15
3126: PUSH
3127: LD_STRING Kikuchi
3129: PPUSH
3130: CALL 6747 0 1
3134: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3135: LD_STRING 13s_Kikuchi
3137: PPUSH
3138: CALL_OW 28
3142: PUSH
3143: LD_INT 0
3145: EQUAL
3146: IFFALSE 3161
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3148: LD_ADDR_EXP 15
3152: PUSH
3153: LD_STRING Kikuchi
3155: PPUSH
3156: CALL 6747 0 1
3160: ST_TO_ADDR
// Gordon = PrepareUnitOmega ( Gordon ) ;
3161: LD_ADDR_EXP 22
3165: PUSH
3166: LD_STRING Gordon
3168: PPUSH
3169: CALL 6747 0 1
3173: ST_TO_ADDR
// Peter = PrepareUnitOmega ( Peter ) ;
3174: LD_ADDR_EXP 23
3178: PUSH
3179: LD_STRING Peter
3181: PPUSH
3182: CALL 6747 0 1
3186: ST_TO_ADDR
// if StevensStatus = 1 then
3187: LD_EXP 76
3191: PUSH
3192: LD_INT 1
3194: EQUAL
3195: IFFALSE 3212
// Stevens = PrepareUnitOmega ( Stevens ) else
3197: LD_ADDR_EXP 3
3201: PUSH
3202: LD_STRING Stevens
3204: PPUSH
3205: CALL 6747 0 1
3209: ST_TO_ADDR
3210: GO 3225
// Baker = PrepareUnitOmega ( Baker ) ;
3212: LD_ADDR_EXP 21
3216: PUSH
3217: LD_STRING Baker
3219: PPUSH
3220: CALL 6747 0 1
3224: ST_TO_ADDR
// others13Omega = CreateCharacterSet ( 15_other_survivors ) ;
3225: LD_ADDR_EXP 19
3229: PUSH
3230: LD_STRING 15_other_survivors
3232: PPUSH
3233: CALL_OW 31
3237: ST_TO_ADDR
// vehicles = LoadVariable ( 15_Vehicles_1 , [ ] ) ;
3238: LD_ADDR_VAR 0 7
3242: PUSH
3243: LD_STRING 15_Vehicles_1
3245: PPUSH
3246: EMPTY
3247: PPUSH
3248: CALL_OW 30
3252: ST_TO_ADDR
// resources = LoadVariable ( 15_ResourcesInCargo_1 , [ ] ) ;
3253: LD_ADDR_VAR 0 8
3257: PUSH
3258: LD_STRING 15_ResourcesInCargo_1
3260: PPUSH
3261: EMPTY
3262: PPUSH
3263: CALL_OW 30
3267: ST_TO_ADDR
// for i := 1 to vehicles do
3268: LD_ADDR_VAR 0 2
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_VAR 0 7
3282: PUSH
3283: FOR_TO
3284: IFFALSE 3509
// begin uc_nation = vehicles [ i ] [ 1 ] ;
3286: LD_ADDR_OWVAR 21
3290: PUSH
3291: LD_VAR 0 7
3295: PUSH
3296: LD_VAR 0 2
3300: ARRAY
3301: PUSH
3302: LD_INT 1
3304: ARRAY
3305: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
3306: LD_ADDR_OWVAR 37
3310: PUSH
3311: LD_VAR 0 7
3315: PUSH
3316: LD_VAR 0 2
3320: ARRAY
3321: PUSH
3322: LD_INT 2
3324: ARRAY
3325: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
3326: LD_ADDR_OWVAR 39
3330: PUSH
3331: LD_VAR 0 7
3335: PUSH
3336: LD_VAR 0 2
3340: ARRAY
3341: PUSH
3342: LD_INT 3
3344: ARRAY
3345: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
3346: LD_ADDR_OWVAR 38
3350: PUSH
3351: LD_VAR 0 7
3355: PUSH
3356: LD_VAR 0 2
3360: ARRAY
3361: PUSH
3362: LD_INT 4
3364: ARRAY
3365: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
3366: LD_ADDR_OWVAR 40
3370: PUSH
3371: LD_VAR 0 7
3375: PUSH
3376: LD_VAR 0 2
3380: ARRAY
3381: PUSH
3382: LD_INT 5
3384: ARRAY
3385: ST_TO_ADDR
// if vc_weapon = 8 then
3386: LD_OWVAR 40
3390: PUSH
3391: LD_INT 8
3393: EQUAL
3394: IFFALSE 3406
// vc_weapon = 9 else
3396: LD_ADDR_OWVAR 40
3400: PUSH
3401: LD_INT 9
3403: ST_TO_ADDR
3404: GO 3426
// vc_weapon = vehicles [ i ] [ 5 ] ;
3406: LD_ADDR_OWVAR 40
3410: PUSH
3411: LD_VAR 0 7
3415: PUSH
3416: LD_VAR 0 2
3420: ARRAY
3421: PUSH
3422: LD_INT 5
3424: ARRAY
3425: ST_TO_ADDR
// vc_fuel_battery = 40 ;
3426: LD_ADDR_OWVAR 41
3430: PUSH
3431: LD_INT 40
3433: ST_TO_ADDR
// veh = CreateVehicle ;
3434: LD_ADDR_VAR 0 5
3438: PUSH
3439: CALL_OW 45
3443: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
3444: LD_VAR 0 5
3448: PPUSH
3449: LD_INT 5
3451: PPUSH
3452: CALL_OW 233
// SetLives ( veh , rand ( 300 , 800 ) ) ;
3456: LD_VAR 0 5
3460: PPUSH
3461: LD_INT 300
3463: PPUSH
3464: LD_INT 800
3466: PPUSH
3467: CALL_OW 12
3471: PPUSH
3472: CALL_OW 234
// omegaVeh = omegaVeh ^ veh ;
3476: LD_ADDR_VAR 0 3
3480: PUSH
3481: LD_VAR 0 3
3485: PUSH
3486: LD_VAR 0 5
3490: ADD
3491: ST_TO_ADDR
// PlaceUnitArea ( veh , OmegaSpawn , false ) ;
3492: LD_VAR 0 5
3496: PPUSH
3497: LD_INT 16
3499: PPUSH
3500: LD_INT 0
3502: PPUSH
3503: CALL_OW 49
// end ;
3507: GO 3283
3509: POP
3510: POP
// cargoList = FilterUnitsInArea ( OmegaSpawn , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] , [ f_control , 1 ] , [ f_engine , 3 ] ] ) ;
3511: LD_ADDR_VAR 0 9
3515: PUSH
3516: LD_INT 16
3518: PPUSH
3519: LD_INT 22
3521: PUSH
3522: LD_INT 1
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PUSH
3529: LD_INT 21
3531: PUSH
3532: LD_INT 2
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: PUSH
3539: LD_INT 34
3541: PUSH
3542: LD_INT 12
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 33
3551: PUSH
3552: LD_INT 1
3554: PUSH
3555: EMPTY
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 32
3561: PUSH
3562: LD_INT 3
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: PPUSH
3576: CALL_OW 70
3580: ST_TO_ADDR
// if cargoList > 0 then
3581: LD_VAR 0 9
3585: PUSH
3586: LD_INT 0
3588: GREATER
3589: IFFALSE 3722
// for i = 1 to cargoList do
3591: LD_ADDR_VAR 0 2
3595: PUSH
3596: DOUBLE
3597: LD_INT 1
3599: DEC
3600: ST_TO_ADDR
3601: LD_VAR 0 9
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3720
// begin if resources > 0 then
3609: LD_VAR 0 8
3613: PUSH
3614: LD_INT 0
3616: GREATER
3617: IFFALSE 3718
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
3619: LD_VAR 0 9
3623: PUSH
3624: LD_VAR 0 2
3628: ARRAY
3629: PPUSH
3630: LD_INT 1
3632: PPUSH
3633: LD_VAR 0 8
3637: PUSH
3638: LD_VAR 0 2
3642: ARRAY
3643: PUSH
3644: LD_INT 1
3646: ARRAY
3647: PPUSH
3648: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
3652: LD_VAR 0 9
3656: PUSH
3657: LD_VAR 0 2
3661: ARRAY
3662: PPUSH
3663: LD_INT 2
3665: PPUSH
3666: LD_VAR 0 8
3670: PUSH
3671: LD_VAR 0 2
3675: ARRAY
3676: PUSH
3677: LD_INT 2
3679: ARRAY
3680: PPUSH
3681: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
3685: LD_VAR 0 9
3689: PUSH
3690: LD_VAR 0 2
3694: ARRAY
3695: PPUSH
3696: LD_INT 3
3698: PPUSH
3699: LD_VAR 0 8
3703: PUSH
3704: LD_VAR 0 2
3708: ARRAY
3709: PUSH
3710: LD_INT 3
3712: ARRAY
3713: PPUSH
3714: CALL_OW 291
// end ; end ;
3718: GO 3606
3720: POP
3721: POP
// for i := 1 to heroesFromOmega do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_EXP 20
3736: PUSH
3737: FOR_TO
3738: IFFALSE 3768
// begin PlaceHumanInUnit ( heroesFromOmega [ i ] , omegaVeh [ i ] ) ;
3740: LD_EXP 20
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PPUSH
3751: LD_VAR 0 3
3755: PUSH
3756: LD_VAR 0 2
3760: ARRAY
3761: PPUSH
3762: CALL_OW 52
// end ;
3766: GO 3737
3768: POP
3769: POP
// avalaibleVehs = UnitFilter ( omegaVeh , [ f_empty ] ) ;
3770: LD_ADDR_VAR 0 6
3774: PUSH
3775: LD_VAR 0 3
3779: PPUSH
3780: LD_INT 58
3782: PUSH
3783: EMPTY
3784: LIST
3785: PPUSH
3786: CALL_OW 72
3790: ST_TO_ADDR
// for i := 1 to others13Omega do
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: DOUBLE
3797: LD_INT 1
3799: DEC
3800: ST_TO_ADDR
3801: LD_EXP 19
3805: PUSH
3806: FOR_TO
3807: IFFALSE 3837
// begin PlaceHumanInUnit ( others13Omega [ i ] , avalaibleVehs [ i ] ) ;
3809: LD_EXP 19
3813: PUSH
3814: LD_VAR 0 2
3818: ARRAY
3819: PPUSH
3820: LD_VAR 0 6
3824: PUSH
3825: LD_VAR 0 2
3829: ARRAY
3830: PPUSH
3831: CALL_OW 52
// end ;
3835: GO 3806
3837: POP
3838: POP
// end ; end_of_file
3839: LD_VAR 0 1
3843: RET
// export function PrepareLegion ; var i ; begin
3844: LD_INT 0
3846: PPUSH
3847: PPUSH
// uc_side = 8 ;
3848: LD_ADDR_OWVAR 20
3852: PUSH
3853: LD_INT 8
3855: ST_TO_ADDR
// uc_nation = 2 ;
3856: LD_ADDR_OWVAR 21
3860: PUSH
3861: LD_INT 2
3863: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3864: LD_ADDR_EXP 30
3868: PUSH
3869: LD_STRING Kurt
3871: PPUSH
3872: LD_INT 0
3874: PPUSH
3875: CALL 6633 0 2
3879: ST_TO_ADDR
// Kozlov = PrepareUnit ( Kozlov , false ) ;
3880: LD_ADDR_EXP 35
3884: PUSH
3885: LD_STRING Kozlov
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL 6633 0 2
3895: ST_TO_ADDR
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
3896: LD_INT 8
3898: PPUSH
3899: LD_INT 2
3901: PPUSH
3902: LD_INT 122
3904: PPUSH
3905: LD_INT 10
3907: PPUSH
3908: LD_INT 2
3910: PPUSH
3911: LD_INT 4
3913: PPUSH
3914: CALL 7751 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
3918: LD_INT 8
3920: PPUSH
3921: LD_INT 2
3923: PPUSH
3924: LD_INT 99
3926: PPUSH
3927: LD_INT 10
3929: PPUSH
3930: LD_INT 2
3932: PPUSH
3933: LD_INT 2
3935: PPUSH
3936: CALL 7751 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
3940: LD_INT 8
3942: PPUSH
3943: LD_INT 2
3945: PPUSH
3946: LD_INT 104
3948: PPUSH
3949: LD_INT 10
3951: PPUSH
3952: LD_INT 1
3954: PPUSH
3955: LD_INT 2
3957: PPUSH
3958: CALL 7751 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
3962: LD_INT 8
3964: PPUSH
3965: LD_INT 2
3967: PPUSH
3968: LD_INT 104
3970: PPUSH
3971: LD_INT 10
3973: PPUSH
3974: LD_INT 8
3976: PPUSH
3977: LD_INT 1
3979: PPUSH
3980: CALL 7751 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
3984: LD_INT 8
3986: PPUSH
3987: LD_INT 2
3989: PPUSH
3990: LD_INT 118
3992: PPUSH
3993: LD_INT 10
3995: PPUSH
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 1
4001: PPUSH
4002: CALL 7751 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
4006: LD_INT 8
4008: PPUSH
4009: LD_INT 2
4011: PPUSH
4012: LD_INT 117
4014: PPUSH
4015: LD_INT 10
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 4
4023: PPUSH
4024: CALL 7751 0 6
// RespawnInside ( 8 , 2 , ArLab1 , 10 , 4 , 2 ) ;
4028: LD_INT 8
4030: PPUSH
4031: LD_INT 2
4033: PPUSH
4034: LD_INT 252
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: LD_INT 4
4042: PPUSH
4043: LD_INT 2
4045: PPUSH
4046: CALL 7751 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_INT 22
4057: PUSH
4058: LD_INT 8
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: LD_INT 21
4067: PUSH
4068: LD_INT 3
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: LD_INT 30
4077: PUSH
4078: LD_INT 32
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: PUSH
4085: LD_INT 58
4087: PUSH
4088: EMPTY
4089: LIST
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: PPUSH
4097: CALL_OW 69
4101: PUSH
4102: FOR_IN
4103: IFFALSE 4131
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
4105: LD_INT 8
4107: PPUSH
4108: LD_INT 2
4110: PPUSH
4111: LD_VAR 0 2
4115: PPUSH
4116: LD_INT 10
4118: PPUSH
4119: LD_INT 1
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: CALL 7751 0 6
4129: GO 4102
4131: POP
4132: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
4133: LD_INT 8
4135: PPUSH
4136: LD_INT 2
4138: PPUSH
4139: LD_INT 140
4141: PPUSH
4142: LD_INT 10
4144: PPUSH
4145: LD_INT 3
4147: PPUSH
4148: LD_INT 1
4150: PPUSH
4151: CALL 7751 0 6
// arControler = UnitsInside ( ArControl ) ;
4155: LD_ADDR_EXP 55
4159: PUSH
4160: LD_INT 140
4162: PPUSH
4163: CALL_OW 313
4167: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
4168: LD_INT 139
4170: PPUSH
4171: LD_EXP 55
4175: PUSH
4176: LD_INT 1
4178: ARRAY
4179: PPUSH
4180: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
4184: LD_INT 138
4186: PPUSH
4187: LD_EXP 55
4191: PUSH
4192: LD_INT 1
4194: ARRAY
4195: PPUSH
4196: CALL_OW 195
// hc_name = Ali Hadarach ;
4200: LD_ADDR_OWVAR 26
4204: PUSH
4205: LD_STRING Ali Hadarach
4207: ST_TO_ADDR
// hc_gallery =  ;
4208: LD_ADDR_OWVAR 33
4212: PUSH
4213: LD_STRING 
4215: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
4216: LD_INT 1
4218: PPUSH
4219: LD_INT 8
4221: PPUSH
4222: CALL_OW 383
// LegionFriend = CreateHuman ;
4226: LD_ADDR_EXP 52
4230: PUSH
4231: CALL_OW 44
4235: ST_TO_ADDR
// end ; end_of_file
4236: LD_VAR 0 1
4240: RET
// export function PrepareRussians ; var i ; begin
4241: LD_INT 0
4243: PPUSH
4244: PPUSH
// uc_side = 3 ;
4245: LD_ADDR_OWVAR 20
4249: PUSH
4250: LD_INT 3
4252: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
4253: LD_ADDR_EXP 26
4257: PUSH
4258: LD_STRING Platonov
4260: PPUSH
4261: LD_INT 0
4263: PPUSH
4264: CALL 6633 0 2
4268: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
4269: LD_EXP 26
4273: PPUSH
4274: LD_INT 23
4276: PPUSH
4277: CALL_OW 52
// Yakotich = PrepareUnit ( Yakotich , false ) ;
4281: LD_ADDR_EXP 27
4285: PUSH
4286: LD_STRING Yakotich
4288: PPUSH
4289: LD_INT 0
4291: PPUSH
4292: CALL 6633 0 2
4296: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , RuDep1 ) ;
4297: LD_EXP 27
4301: PPUSH
4302: LD_INT 26
4304: PPUSH
4305: CALL_OW 52
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
4309: LD_ADDR_EXP 36
4313: PUSH
4314: LD_STRING Kovalyuk
4316: PPUSH
4317: LD_INT 0
4319: PPUSH
4320: CALL 6633 0 2
4324: ST_TO_ADDR
// SetClass ( Kovalyuk , 3 ) ;
4325: LD_EXP 36
4329: PPUSH
4330: LD_INT 3
4332: PPUSH
4333: CALL_OW 336
// ruBehMehs = ruBehMehs ^ Kovalyuk ;
4337: LD_ADDR_EXP 57
4341: PUSH
4342: LD_EXP 57
4346: PUSH
4347: LD_EXP 36
4351: ADD
4352: ST_TO_ADDR
// Oblukov = PrepareUnit ( Oblukov , false ) ;
4353: LD_ADDR_EXP 37
4357: PUSH
4358: LD_STRING Oblukov
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL 6633 0 2
4368: ST_TO_ADDR
// Bystrov = PrepareUnit ( Bystrov , false ) ;
4369: LD_ADDR_EXP 38
4373: PUSH
4374: LD_STRING Bystrov
4376: PPUSH
4377: LD_INT 0
4379: PPUSH
4380: CALL 6633 0 2
4384: ST_TO_ADDR
// Fadeev = PrepareUnit ( Fadeev , false ) ;
4385: LD_ADDR_EXP 39
4389: PUSH
4390: LD_STRING Fadeev
4392: PPUSH
4393: LD_INT 0
4395: PPUSH
4396: CALL 6633 0 2
4400: ST_TO_ADDR
// Gleb = PrepareUnit ( Gleb , false ) ;
4401: LD_ADDR_EXP 40
4405: PUSH
4406: LD_STRING Gleb
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL 6633 0 2
4416: ST_TO_ADDR
// Petrosyan = PrepareUnit ( Petrosyan , false ) ;
4417: LD_ADDR_EXP 41
4421: PUSH
4422: LD_STRING Petrosyan
4424: PPUSH
4425: LD_INT 0
4427: PPUSH
4428: CALL 6633 0 2
4432: ST_TO_ADDR
// Petrovova = PrepareUnit ( Petrovova , false ) ;
4433: LD_ADDR_EXP 42
4437: PUSH
4438: LD_STRING Petrovova
4440: PPUSH
4441: LD_INT 0
4443: PPUSH
4444: CALL 6633 0 2
4448: ST_TO_ADDR
// Kuzmov = PrepareUnit ( Kuzmov , false ) ;
4449: LD_ADDR_EXP 43
4453: PUSH
4454: LD_STRING Kuzmov
4456: PPUSH
4457: LD_INT 0
4459: PPUSH
4460: CALL 6633 0 2
4464: ST_TO_ADDR
// Mikhail = PrepareUnit ( Mikhail , false ) ;
4465: LD_ADDR_EXP 44
4469: PUSH
4470: LD_STRING Mikhail
4472: PPUSH
4473: LD_INT 0
4475: PPUSH
4476: CALL 6633 0 2
4480: ST_TO_ADDR
// Furmanov = PrepareUnit ( Furmanov , false ) ;
4481: LD_ADDR_EXP 45
4485: PUSH
4486: LD_STRING Furmanov
4488: PPUSH
4489: LD_INT 0
4491: PPUSH
4492: CALL 6633 0 2
4496: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
4497: LD_ADDR_EXP 46
4501: PUSH
4502: LD_STRING Belkov
4504: PPUSH
4505: LD_INT 0
4507: PPUSH
4508: CALL 6633 0 2
4512: ST_TO_ADDR
// PlaceHumanInUnit ( Oblukov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4513: LD_EXP 37
4517: PPUSH
4518: LD_INT 22
4520: PUSH
4521: LD_INT 3
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 21
4530: PUSH
4531: LD_INT 3
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: LD_INT 30
4540: PUSH
4541: LD_INT 32
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 58
4550: PUSH
4551: EMPTY
4552: LIST
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: PPUSH
4560: CALL_OW 69
4564: PUSH
4565: LD_INT 1
4567: ARRAY
4568: PPUSH
4569: CALL_OW 52
// PlaceHumanInUnit ( Fadeev , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4573: LD_EXP 39
4577: PPUSH
4578: LD_INT 22
4580: PUSH
4581: LD_INT 3
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 3
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: LD_INT 30
4600: PUSH
4601: LD_INT 32
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 58
4610: PUSH
4611: EMPTY
4612: LIST
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: PPUSH
4620: CALL_OW 69
4624: PUSH
4625: LD_INT 1
4627: ARRAY
4628: PPUSH
4629: CALL_OW 52
// PlaceHumanInUnit ( Gleb , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4633: LD_EXP 40
4637: PPUSH
4638: LD_INT 22
4640: PUSH
4641: LD_INT 3
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: PUSH
4648: LD_INT 21
4650: PUSH
4651: LD_INT 3
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PUSH
4658: LD_INT 30
4660: PUSH
4661: LD_INT 32
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: LD_INT 58
4670: PUSH
4671: EMPTY
4672: LIST
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: PPUSH
4680: CALL_OW 69
4684: PUSH
4685: LD_INT 1
4687: ARRAY
4688: PPUSH
4689: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4693: LD_EXP 42
4697: PPUSH
4698: LD_INT 22
4700: PUSH
4701: LD_INT 3
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 21
4710: PUSH
4711: LD_INT 3
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: LD_INT 30
4720: PUSH
4721: LD_INT 32
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: LD_INT 58
4730: PUSH
4731: EMPTY
4732: LIST
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: PPUSH
4740: CALL_OW 69
4744: PUSH
4745: LD_INT 1
4747: ARRAY
4748: PPUSH
4749: CALL_OW 52
// PlaceHumanInUnit ( Kuzmov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4753: LD_EXP 43
4757: PPUSH
4758: LD_INT 22
4760: PUSH
4761: LD_INT 3
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PUSH
4768: LD_INT 21
4770: PUSH
4771: LD_INT 3
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PUSH
4778: LD_INT 30
4780: PUSH
4781: LD_INT 32
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: PUSH
4788: LD_INT 58
4790: PUSH
4791: EMPTY
4792: LIST
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: PPUSH
4800: CALL_OW 69
4804: PUSH
4805: LD_INT 1
4807: ARRAY
4808: PPUSH
4809: CALL_OW 52
// PlaceHumanInUnit ( Furmanov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4813: LD_EXP 45
4817: PPUSH
4818: LD_INT 22
4820: PUSH
4821: LD_INT 3
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 21
4830: PUSH
4831: LD_INT 3
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 30
4840: PUSH
4841: LD_INT 32
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 58
4850: PUSH
4851: EMPTY
4852: LIST
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: PPUSH
4860: CALL_OW 69
4864: PUSH
4865: LD_INT 1
4867: ARRAY
4868: PPUSH
4869: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4873: LD_EXP 46
4877: PPUSH
4878: LD_INT 22
4880: PUSH
4881: LD_INT 3
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 21
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 30
4900: PUSH
4901: LD_INT 32
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 58
4910: PUSH
4911: EMPTY
4912: LIST
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: PPUSH
4920: CALL_OW 69
4924: PUSH
4925: LD_INT 1
4927: ARRAY
4928: PPUSH
4929: CALL_OW 52
// PlaceHumanInUnit ( Bystrov , RusLab1 ) ;
4933: LD_EXP 38
4937: PPUSH
4938: LD_INT 2
4940: PPUSH
4941: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , RusLab2 ) ;
4945: LD_EXP 41
4949: PPUSH
4950: LD_INT 1
4952: PPUSH
4953: CALL_OW 52
// PlaceHumanInUnit ( Mikhail , RuDep1 ) ;
4957: LD_EXP 44
4961: PPUSH
4962: LD_INT 26
4964: PPUSH
4965: CALL_OW 52
// SetClass ( Mikhail , 2 ) ;
4969: LD_EXP 44
4973: PPUSH
4974: LD_INT 2
4976: PPUSH
4977: CALL_OW 336
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
4981: LD_INT 3
4983: PPUSH
4984: LD_INT 3
4986: PPUSH
4987: LD_INT 26
4989: PPUSH
4990: LD_INT 10
4992: PPUSH
4993: LD_INT 2
4995: PPUSH
4996: LD_INT 5
4998: PPUSH
4999: CALL 7751 0 6
// RespawnInside ( 3 , 3 , RuDep2 , 10 , 2 , 4 ) ;
5003: LD_INT 3
5005: PPUSH
5006: LD_INT 3
5008: PPUSH
5009: LD_INT 23
5011: PPUSH
5012: LD_INT 10
5014: PPUSH
5015: LD_INT 2
5017: PPUSH
5018: LD_INT 4
5020: PPUSH
5021: CALL 7751 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
5025: LD_INT 3
5027: PPUSH
5028: LD_INT 3
5030: PPUSH
5031: LD_INT 27
5033: PPUSH
5034: LD_INT 10
5036: PPUSH
5037: LD_INT 9
5039: PPUSH
5040: LD_INT 6
5042: PPUSH
5043: CALL 7751 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
5047: LD_INT 3
5049: PPUSH
5050: LD_INT 3
5052: PPUSH
5053: LD_INT 27
5055: PPUSH
5056: LD_INT 10
5058: PPUSH
5059: LD_INT 3
5061: PPUSH
5062: LD_INT 3
5064: PPUSH
5065: CALL 7751 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
5069: LD_INT 3
5071: PPUSH
5072: LD_INT 3
5074: PPUSH
5075: LD_INT 4
5077: PPUSH
5078: LD_INT 10
5080: PPUSH
5081: LD_INT 3
5083: PPUSH
5084: LD_INT 6
5086: PPUSH
5087: CALL 7751 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
5091: LD_INT 3
5093: PPUSH
5094: LD_INT 3
5096: PPUSH
5097: LD_INT 10
5099: PPUSH
5100: LD_INT 10
5102: PPUSH
5103: LD_INT 3
5105: PPUSH
5106: LD_INT 6
5108: PPUSH
5109: CALL 7751 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
5113: LD_INT 3
5115: PPUSH
5116: LD_INT 3
5118: PPUSH
5119: LD_INT 2
5121: PPUSH
5122: LD_INT 10
5124: PPUSH
5125: LD_INT 4
5127: PPUSH
5128: LD_INT 3
5130: PPUSH
5131: CALL 7751 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
5135: LD_INT 3
5137: PPUSH
5138: LD_INT 3
5140: PPUSH
5141: LD_INT 1
5143: PPUSH
5144: LD_INT 10
5146: PPUSH
5147: LD_INT 4
5149: PPUSH
5150: LD_INT 3
5152: PPUSH
5153: CALL 7751 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
5157: LD_ADDR_VAR 0 2
5161: PUSH
5162: LD_INT 22
5164: PUSH
5165: LD_INT 3
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: PUSH
5172: LD_INT 21
5174: PUSH
5175: LD_INT 3
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 30
5184: PUSH
5185: LD_INT 32
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: LD_INT 58
5194: PUSH
5195: EMPTY
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: PPUSH
5204: CALL_OW 69
5208: PUSH
5209: FOR_IN
5210: IFFALSE 5238
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
5212: LD_INT 3
5214: PPUSH
5215: LD_INT 3
5217: PPUSH
5218: LD_VAR 0 2
5222: PPUSH
5223: LD_INT 10
5225: PPUSH
5226: LD_INT 1
5228: PPUSH
5229: LD_INT 1
5231: PPUSH
5232: CALL 7751 0 6
5236: GO 5209
5238: POP
5239: POP
// end ;
5240: LD_VAR 0 1
5244: RET
// export function PrepareAttackFromKappa ; var i , veh , vehList ; begin
5245: LD_INT 0
5247: PPUSH
5248: PPUSH
5249: PPUSH
5250: PPUSH
// uc_side = 6 ;
5251: LD_ADDR_OWVAR 20
5255: PUSH
5256: LD_INT 6
5258: ST_TO_ADDR
// uc_nation = 1 ;
5259: LD_ADDR_OWVAR 21
5263: PUSH
5264: LD_INT 1
5266: ST_TO_ADDR
// vc_engine = 3 ;
5267: LD_ADDR_OWVAR 39
5271: PUSH
5272: LD_INT 3
5274: ST_TO_ADDR
// vc_control = 1 ;
5275: LD_ADDR_OWVAR 38
5279: PUSH
5280: LD_INT 1
5282: ST_TO_ADDR
// vc_chassis = 5 ;
5283: LD_ADDR_OWVAR 37
5287: PUSH
5288: LD_INT 5
5290: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5291: LD_ADDR_OWVAR 40
5295: PUSH
5296: LD_INT 5
5298: PUSH
5299: LD_INT 9
5301: PUSH
5302: LD_INT 7
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: LIST
5309: PUSH
5310: LD_INT 1
5312: PPUSH
5313: LD_INT 3
5315: PPUSH
5316: CALL_OW 12
5320: ARRAY
5321: ST_TO_ADDR
// sewiVeh = CreateVehicle ;
5322: LD_ADDR_EXP 34
5326: PUSH
5327: CALL_OW 45
5331: ST_TO_ADDR
// PlaceUnitArea ( sewiVeh , KappaSpawn , false ) ;
5332: LD_EXP 34
5336: PPUSH
5337: LD_INT 14
5339: PPUSH
5340: LD_INT 0
5342: PPUSH
5343: CALL_OW 49
// Vsevolod = PrepareUnit ( Vsevolod , false ) ;
5347: LD_ADDR_EXP 33
5351: PUSH
5352: LD_STRING Vsevolod
5354: PPUSH
5355: LD_INT 0
5357: PPUSH
5358: CALL 6633 0 2
5362: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , sewiVeh ) ;
5363: LD_EXP 33
5367: PPUSH
5368: LD_EXP 34
5372: PPUSH
5373: CALL_OW 52
// for i := 1 to 5 do
5377: LD_ADDR_VAR 0 2
5381: PUSH
5382: DOUBLE
5383: LD_INT 1
5385: DEC
5386: ST_TO_ADDR
5387: LD_INT 5
5389: PUSH
5390: FOR_TO
5391: IFFALSE 5475
// begin vc_engine = 3 ;
5393: LD_ADDR_OWVAR 39
5397: PUSH
5398: LD_INT 3
5400: ST_TO_ADDR
// vc_control = 3 ;
5401: LD_ADDR_OWVAR 38
5405: PUSH
5406: LD_INT 3
5408: ST_TO_ADDR
// vc_chassis = 3 ;
5409: LD_ADDR_OWVAR 37
5413: PUSH
5414: LD_INT 3
5416: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5417: LD_ADDR_OWVAR 40
5421: PUSH
5422: LD_INT 5
5424: PUSH
5425: LD_INT 9
5427: PUSH
5428: LD_INT 7
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 1
5438: PPUSH
5439: LD_INT 3
5441: PPUSH
5442: CALL_OW 12
5446: ARRAY
5447: ST_TO_ADDR
// veh = CreateVehicle ;
5448: LD_ADDR_VAR 0 3
5452: PUSH
5453: CALL_OW 45
5457: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5458: LD_VAR 0 3
5462: PPUSH
5463: LD_INT 14
5465: PPUSH
5466: LD_INT 0
5468: PPUSH
5469: CALL_OW 49
// end ;
5473: GO 5390
5475: POP
5476: POP
// uc_nation = 3 ;
5477: LD_ADDR_OWVAR 21
5481: PUSH
5482: LD_INT 3
5484: ST_TO_ADDR
// for i := 1 to 7 do
5485: LD_ADDR_VAR 0 2
5489: PUSH
5490: DOUBLE
5491: LD_INT 1
5493: DEC
5494: ST_TO_ADDR
5495: LD_INT 7
5497: PUSH
5498: FOR_TO
5499: IFFALSE 5591
// begin vc_engine = 3 ;
5501: LD_ADDR_OWVAR 39
5505: PUSH
5506: LD_INT 3
5508: ST_TO_ADDR
// vc_control = 3 ;
5509: LD_ADDR_OWVAR 38
5513: PUSH
5514: LD_INT 3
5516: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
5517: LD_ADDR_OWVAR 37
5521: PUSH
5522: LD_INT 24
5524: ST_TO_ADDR
// vc_weapon = [ 44 , 47 , 45 , 46 , 49 ] [ Rand ( 1 , 4 ) ] ;
5525: LD_ADDR_OWVAR 40
5529: PUSH
5530: LD_INT 44
5532: PUSH
5533: LD_INT 47
5535: PUSH
5536: LD_INT 45
5538: PUSH
5539: LD_INT 46
5541: PUSH
5542: LD_INT 49
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: PUSH
5552: LD_INT 1
5554: PPUSH
5555: LD_INT 4
5557: PPUSH
5558: CALL_OW 12
5562: ARRAY
5563: ST_TO_ADDR
// veh = CreateVehicle ;
5564: LD_ADDR_VAR 0 3
5568: PUSH
5569: CALL_OW 45
5573: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5574: LD_VAR 0 3
5578: PPUSH
5579: LD_INT 14
5581: PPUSH
5582: LD_INT 0
5584: PPUSH
5585: CALL_OW 49
// end ;
5589: GO 5498
5591: POP
5592: POP
// repeat wait ( 0 0$1 ) ;
5593: LD_INT 35
5595: PPUSH
5596: CALL_OW 67
// vehList = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
5600: LD_ADDR_VAR 0 4
5604: PUSH
5605: LD_INT 22
5607: PUSH
5608: LD_INT 6
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: LD_INT 21
5617: PUSH
5618: LD_INT 2
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PUSH
5625: LD_INT 50
5627: PUSH
5628: EMPTY
5629: LIST
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: LIST
5635: PPUSH
5636: CALL_OW 69
5640: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
5641: LD_EXP 1
5645: PPUSH
5646: CALL_OW 310
5650: NOT
5651: IFFALSE 5684
// ComAgressiveMove ( vehList , GetX ( JMM ) , GetY ( JMM ) ) else
5653: LD_VAR 0 4
5657: PPUSH
5658: LD_EXP 1
5662: PPUSH
5663: CALL_OW 250
5667: PPUSH
5668: LD_EXP 1
5672: PPUSH
5673: CALL_OW 251
5677: PPUSH
5678: CALL_OW 114
5682: GO 5723
// ComAgressiveMove ( vehList , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) ;
5684: LD_VAR 0 4
5688: PPUSH
5689: LD_EXP 1
5693: PPUSH
5694: CALL_OW 310
5698: PPUSH
5699: CALL_OW 250
5703: PPUSH
5704: LD_EXP 1
5708: PPUSH
5709: CALL_OW 310
5713: PPUSH
5714: CALL_OW 251
5718: PPUSH
5719: CALL_OW 114
// until vehList = 0 ;
5723: LD_VAR 0 4
5727: PUSH
5728: LD_INT 0
5730: EQUAL
5731: IFFALSE 5593
// end ;
5733: LD_VAR 0 1
5737: RET
// export function PreapreMehBehs ; var i , un ; begin
5738: LD_INT 0
5740: PPUSH
5741: PPUSH
5742: PPUSH
// uc_side = 6 ;
5743: LD_ADDR_OWVAR 20
5747: PUSH
5748: LD_INT 6
5750: ST_TO_ADDR
// uc_nation = 3 ;
5751: LD_ADDR_OWVAR 21
5755: PUSH
5756: LD_INT 3
5758: ST_TO_ADDR
// for i := 1 to 3 do
5759: LD_ADDR_VAR 0 2
5763: PUSH
5764: DOUBLE
5765: LD_INT 1
5767: DEC
5768: ST_TO_ADDR
5769: LD_INT 3
5771: PUSH
5772: FOR_TO
5773: IFFALSE 5844
// begin hc_name =  ;
5775: LD_ADDR_OWVAR 26
5779: PUSH
5780: LD_STRING 
5782: ST_TO_ADDR
// hc_gallery =  ;
5783: LD_ADDR_OWVAR 33
5787: PUSH
5788: LD_STRING 
5790: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
5791: LD_INT 0
5793: PPUSH
5794: LD_INT 10
5796: PPUSH
5797: CALL_OW 383
// un = CreateHuman ;
5801: LD_ADDR_VAR 0 3
5805: PUSH
5806: CALL_OW 44
5810: ST_TO_ADDR
// ruBehMehs = ruBehMehs ^ un ;
5811: LD_ADDR_EXP 57
5815: PUSH
5816: LD_EXP 57
5820: PUSH
5821: LD_VAR 0 3
5825: ADD
5826: ST_TO_ADDR
// PlaceUnitArea ( un , RuMehBehSpawn , false ) ;
5827: LD_VAR 0 3
5831: PPUSH
5832: LD_INT 17
5834: PPUSH
5835: LD_INT 0
5837: PPUSH
5838: CALL_OW 49
// end ;
5842: GO 5772
5844: POP
5845: POP
// PlaceUnitArea ( Kovalyuk , RuMehBehSpawn , false ) ;
5846: LD_EXP 36
5850: PPUSH
5851: LD_INT 17
5853: PPUSH
5854: LD_INT 0
5856: PPUSH
5857: CALL_OW 49
// SetSide ( Kovalyuk , 6 ) ;
5861: LD_EXP 36
5865: PPUSH
5866: LD_INT 6
5868: PPUSH
5869: CALL_OW 235
// SetSide ( RuBehDep , 6 ) ;
5873: LD_INT 145
5875: PPUSH
5876: LD_INT 6
5878: PPUSH
5879: CALL_OW 235
// ComBuildBehemoth ( ruBehMehs [ 1 ] , b_behemoth , 193 , 118 , 0 ) ;
5883: LD_EXP 57
5887: PUSH
5888: LD_INT 1
5890: ARRAY
5891: PPUSH
5892: LD_INT 37
5894: PPUSH
5895: LD_INT 193
5897: PPUSH
5898: LD_INT 118
5900: PPUSH
5901: LD_INT 0
5903: PPUSH
5904: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 2 ] , b_behemoth , 204 , 119 , 0 ) ;
5908: LD_EXP 57
5912: PUSH
5913: LD_INT 2
5915: ARRAY
5916: PPUSH
5917: LD_INT 37
5919: PPUSH
5920: LD_INT 204
5922: PPUSH
5923: LD_INT 119
5925: PPUSH
5926: LD_INT 0
5928: PPUSH
5929: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 3 ] , b_behemoth , 195 , 126 , 0 ) ;
5933: LD_EXP 57
5937: PUSH
5938: LD_INT 3
5940: ARRAY
5941: PPUSH
5942: LD_INT 37
5944: PPUSH
5945: LD_INT 195
5947: PPUSH
5948: LD_INT 126
5950: PPUSH
5951: LD_INT 0
5953: PPUSH
5954: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 4 ] , b_behemoth , 207 , 126 , 0 ) ;
5958: LD_EXP 57
5962: PUSH
5963: LD_INT 4
5965: ARRAY
5966: PPUSH
5967: LD_INT 37
5969: PPUSH
5970: LD_INT 207
5972: PPUSH
5973: LD_INT 126
5975: PPUSH
5976: LD_INT 0
5978: PPUSH
5979: CALL_OW 170
// end ; end_of_file
5983: LD_VAR 0 1
5987: RET
// export function PrepareAlliance ; var i ; begin
5988: LD_INT 0
5990: PPUSH
5991: PPUSH
// uc_side = 7 ;
5992: LD_ADDR_OWVAR 20
5996: PUSH
5997: LD_INT 7
5999: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
6000: LD_ADDR_EXP 28
6004: PUSH
6005: LD_STRING Roth
6007: PPUSH
6008: LD_INT 0
6010: PPUSH
6011: CALL 6633 0 2
6015: ST_TO_ADDR
// PlaceUnitArea ( Roth , RothSpawn , false ) ;
6016: LD_EXP 28
6020: PPUSH
6021: LD_INT 31
6023: PPUSH
6024: LD_INT 0
6026: PPUSH
6027: CALL_OW 49
// ComTurnXY ( Roth , 248 , 187 ) ;
6031: LD_EXP 28
6035: PPUSH
6036: LD_INT 248
6038: PPUSH
6039: LD_INT 187
6041: PPUSH
6042: CALL_OW 118
// if TestCharacters ( 10c_Simms ) = true then
6046: LD_STRING 10c_Simms
6048: PPUSH
6049: CALL_OW 28
6053: PUSH
6054: LD_INT 1
6056: EQUAL
6057: IFFALSE 6107
// begin Simms = PrepareUnit ( 10c_Simms , true ) ;
6059: LD_ADDR_EXP 47
6063: PUSH
6064: LD_STRING 10c_Simms
6066: PPUSH
6067: LD_INT 1
6069: PPUSH
6070: CALL 6633 0 2
6074: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6075: LD_EXP 47
6079: PPUSH
6080: LD_INT 32
6082: PPUSH
6083: LD_INT 0
6085: PPUSH
6086: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6090: LD_EXP 47
6094: PPUSH
6095: LD_INT 248
6097: PPUSH
6098: LD_INT 187
6100: PPUSH
6101: CALL_OW 118
// end else
6105: GO 6181
// begin uc_nation = 1 ;
6107: LD_ADDR_OWVAR 21
6111: PUSH
6112: LD_INT 1
6114: ST_TO_ADDR
// hc_name =  ;
6115: LD_ADDR_OWVAR 26
6119: PUSH
6120: LD_STRING 
6122: ST_TO_ADDR
// hc_gallery =  ;
6123: LD_ADDR_OWVAR 33
6127: PUSH
6128: LD_STRING 
6130: ST_TO_ADDR
// PrepareScientist ( sex_female , 10 ) ;
6131: LD_INT 2
6133: PPUSH
6134: LD_INT 10
6136: PPUSH
6137: CALL_OW 384
// Simms = CreateHuman ;
6141: LD_ADDR_EXP 47
6145: PUSH
6146: CALL_OW 44
6150: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6151: LD_EXP 47
6155: PPUSH
6156: LD_INT 32
6158: PPUSH
6159: LD_INT 0
6161: PPUSH
6162: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6166: LD_EXP 47
6170: PPUSH
6171: LD_INT 248
6173: PPUSH
6174: LD_INT 187
6176: PPUSH
6177: CALL_OW 118
// end ; Scholtze = PrepareUnit ( Scholtze , false ) ;
6181: LD_ADDR_EXP 48
6185: PUSH
6186: LD_STRING Scholtze
6188: PPUSH
6189: LD_INT 0
6191: PPUSH
6192: CALL 6633 0 2
6196: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , false ) ;
6197: LD_ADDR_EXP 49
6201: PUSH
6202: LD_STRING Kirilenkova
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL 6633 0 2
6212: ST_TO_ADDR
// Kapitsova = PrepareUnit ( Kapitsova , false ) ;
6213: LD_ADDR_EXP 50
6217: PUSH
6218: LD_STRING Kapitsova
6220: PPUSH
6221: LD_INT 0
6223: PPUSH
6224: CALL 6633 0 2
6228: ST_TO_ADDR
// Karamazov = PrepareUnit ( Karamazov , false ) ;
6229: LD_ADDR_EXP 51
6233: PUSH
6234: LD_STRING Karamazov
6236: PPUSH
6237: LD_INT 0
6239: PPUSH
6240: CALL 6633 0 2
6244: ST_TO_ADDR
// PlaceHumanInUnit ( Scholtze , AllLabR1 ) ;
6245: LD_EXP 48
6249: PPUSH
6250: LD_INT 39
6252: PPUSH
6253: CALL_OW 52
// PlaceHumanInUnit ( Kirilenkova , AllLabR2 ) ;
6257: LD_EXP 49
6261: PPUSH
6262: LD_INT 133
6264: PPUSH
6265: CALL_OW 52
// PlaceHumanInUnit ( Kapitsova , AllLabR2 ) ;
6269: LD_EXP 50
6273: PPUSH
6274: LD_INT 133
6276: PPUSH
6277: CALL_OW 52
// PlaceHumanInUnit ( Karamazov , AllDep ) ;
6281: LD_EXP 51
6285: PPUSH
6286: LD_INT 45
6288: PPUSH
6289: CALL_OW 52
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 2 ) ;
6293: LD_INT 7
6295: PPUSH
6296: LD_INT 1
6298: PPUSH
6299: LD_INT 45
6301: PPUSH
6302: LD_INT 10
6304: PPUSH
6305: LD_INT 2
6307: PPUSH
6308: LD_INT 2
6310: PPUSH
6311: CALL 7751 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
6315: LD_INT 7
6317: PPUSH
6318: LD_INT 3
6320: PPUSH
6321: LD_INT 45
6323: PPUSH
6324: LD_INT 10
6326: PPUSH
6327: LD_INT 2
6329: PPUSH
6330: LD_INT 2
6332: PPUSH
6333: CALL 7751 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
6337: LD_INT 7
6339: PPUSH
6340: LD_INT 1
6342: PPUSH
6343: LD_INT 194
6345: PPUSH
6346: LD_INT 10
6348: PPUSH
6349: LD_INT 5
6351: PPUSH
6352: LD_INT 4
6354: PPUSH
6355: CALL 7751 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
6359: LD_INT 7
6361: PPUSH
6362: LD_INT 3
6364: PPUSH
6365: LD_INT 194
6367: PPUSH
6368: LD_INT 10
6370: PPUSH
6371: LD_INT 8
6373: PPUSH
6374: LD_INT 6
6376: PPUSH
6377: CALL 7751 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
6381: LD_INT 7
6383: PPUSH
6384: LD_INT 1
6386: PPUSH
6387: LD_INT 156
6389: PPUSH
6390: LD_INT 10
6392: PPUSH
6393: LD_INT 3
6395: PPUSH
6396: LD_INT 6
6398: PPUSH
6399: CALL 7751 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
6403: LD_INT 7
6405: PPUSH
6406: LD_INT 3
6408: PPUSH
6409: LD_INT 162
6411: PPUSH
6412: LD_INT 10
6414: PPUSH
6415: LD_INT 3
6417: PPUSH
6418: LD_INT 6
6420: PPUSH
6421: CALL 7751 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 3 ) ;
6425: LD_INT 7
6427: PPUSH
6428: LD_INT 3
6430: PPUSH
6431: LD_INT 39
6433: PPUSH
6434: LD_INT 10
6436: PPUSH
6437: LD_INT 4
6439: PPUSH
6440: LD_INT 3
6442: PPUSH
6443: CALL 7751 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 2 ) ;
6447: LD_INT 7
6449: PPUSH
6450: LD_INT 3
6452: PPUSH
6453: LD_INT 133
6455: PPUSH
6456: LD_INT 10
6458: PPUSH
6459: LD_INT 4
6461: PPUSH
6462: LD_INT 2
6464: PPUSH
6465: CALL 7751 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
6469: LD_INT 7
6471: PPUSH
6472: LD_INT 1
6474: PPUSH
6475: LD_INT 46
6477: PPUSH
6478: LD_INT 10
6480: PPUSH
6481: LD_INT 4
6483: PPUSH
6484: LD_INT 2
6486: PPUSH
6487: CALL 7751 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
6491: LD_ADDR_VAR 0 2
6495: PUSH
6496: LD_INT 22
6498: PUSH
6499: LD_INT 7
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: PUSH
6506: LD_INT 21
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: PUSH
6516: LD_INT 30
6518: PUSH
6519: LD_INT 32
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: LD_INT 58
6528: PUSH
6529: EMPTY
6530: LIST
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: PPUSH
6538: CALL_OW 69
6542: PUSH
6543: FOR_IN
6544: IFFALSE 6591
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
6546: LD_INT 7
6548: PPUSH
6549: LD_INT 1
6551: PUSH
6552: LD_INT 3
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 1
6561: PPUSH
6562: LD_INT 2
6564: PPUSH
6565: CALL_OW 12
6569: ARRAY
6570: PPUSH
6571: LD_VAR 0 2
6575: PPUSH
6576: LD_INT 10
6578: PPUSH
6579: LD_INT 1
6581: PPUSH
6582: LD_INT 1
6584: PPUSH
6585: CALL 7751 0 6
6589: GO 6543
6591: POP
6592: POP
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 3 ) ;
6593: LD_INT 7
6595: PPUSH
6596: LD_INT 1
6598: PPUSH
6599: LD_INT 226
6601: PPUSH
6602: LD_INT 10
6604: PPUSH
6605: LD_INT 3
6607: PPUSH
6608: LD_INT 3
6610: PPUSH
6611: CALL 7751 0 6
// allianceControler = UnitsInside ( AllControl ) ;
6615: LD_ADDR_EXP 62
6619: PUSH
6620: LD_INT 226
6622: PPUSH
6623: CALL_OW 313
6627: ST_TO_ADDR
// end ; end_of_file
6628: LD_VAR 0 1
6632: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6633: LD_INT 0
6635: PPUSH
6636: PPUSH
// if exist_mode then
6637: LD_VAR 0 2
6641: IFFALSE 6660
// unit := CreateCharacter ( ident ) else
6643: LD_ADDR_VAR 0 4
6647: PUSH
6648: LD_VAR 0 1
6652: PPUSH
6653: CALL_OW 34
6657: ST_TO_ADDR
6658: GO 6675
// unit := NewCharacter ( ident ) ;
6660: LD_ADDR_VAR 0 4
6664: PUSH
6665: LD_VAR 0 1
6669: PPUSH
6670: CALL_OW 25
6674: ST_TO_ADDR
// result := unit ;
6675: LD_ADDR_VAR 0 3
6679: PUSH
6680: LD_VAR 0 4
6684: ST_TO_ADDR
// end ;
6685: LD_VAR 0 3
6689: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
6690: LD_INT 0
6692: PPUSH
6693: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
6694: LD_STRING 13s_
6696: PUSH
6697: LD_VAR 0 1
6701: STR
6702: PPUSH
6703: CALL_OW 28
6707: PUSH
6708: LD_INT 1
6710: EQUAL
6711: IFFALSE 6732
// unit = CreateCharacter ( 13s_ & ident ) ;
6713: LD_ADDR_VAR 0 3
6717: PUSH
6718: LD_STRING 13s_
6720: PUSH
6721: LD_VAR 0 1
6725: STR
6726: PPUSH
6727: CALL_OW 34
6731: ST_TO_ADDR
// result := unit ;
6732: LD_ADDR_VAR 0 2
6736: PUSH
6737: LD_VAR 0 3
6741: ST_TO_ADDR
// end ;
6742: LD_VAR 0 2
6746: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
6747: LD_INT 0
6749: PPUSH
6750: PPUSH
// if TestCharacters ( 15_ & ident ) = true then
6751: LD_STRING 15_
6753: PUSH
6754: LD_VAR 0 1
6758: STR
6759: PPUSH
6760: CALL_OW 28
6764: PUSH
6765: LD_INT 1
6767: EQUAL
6768: IFFALSE 6805
// begin unit = CreateCharacter ( 15_ & ident ) ;
6770: LD_ADDR_VAR 0 3
6774: PUSH
6775: LD_STRING 15_
6777: PUSH
6778: LD_VAR 0 1
6782: STR
6783: PPUSH
6784: CALL_OW 34
6788: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ unit ;
6789: LD_ADDR_EXP 20
6793: PUSH
6794: LD_EXP 20
6798: PUSH
6799: LD_VAR 0 3
6803: ADD
6804: ST_TO_ADDR
// end ; result := unit ;
6805: LD_ADDR_VAR 0 2
6809: PUSH
6810: LD_VAR 0 3
6814: ST_TO_ADDR
// end ;
6815: LD_VAR 0 2
6819: RET
// export function TabLenght ( tab ) ; var i ; begin
6820: LD_INT 0
6822: PPUSH
6823: PPUSH
// for i = 1 to tab do
6824: LD_ADDR_VAR 0 3
6828: PUSH
6829: DOUBLE
6830: LD_INT 1
6832: DEC
6833: ST_TO_ADDR
6834: LD_VAR 0 1
6838: PUSH
6839: FOR_TO
6840: IFFALSE 6854
// result = i ;
6842: LD_ADDR_VAR 0 2
6846: PUSH
6847: LD_VAR 0 3
6851: ST_TO_ADDR
6852: GO 6839
6854: POP
6855: POP
// end ;
6856: LD_VAR 0 2
6860: RET
// export function Video ( mode ) ; begin
6861: LD_INT 0
6863: PPUSH
// if mode = true then
6864: LD_VAR 0 1
6868: PUSH
6869: LD_INT 1
6871: EQUAL
6872: IFFALSE 6892
// begin ingame_video = true ;
6874: LD_ADDR_OWVAR 52
6878: PUSH
6879: LD_INT 1
6881: ST_TO_ADDR
// interface_hidden = true ;
6882: LD_ADDR_OWVAR 54
6886: PUSH
6887: LD_INT 1
6889: ST_TO_ADDR
// end else
6890: GO 6908
// begin ingame_video = false ;
6892: LD_ADDR_OWVAR 52
6896: PUSH
6897: LD_INT 0
6899: ST_TO_ADDR
// interface_hidden = false ;
6900: LD_ADDR_OWVAR 54
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// end ; end ;
6908: LD_VAR 0 2
6912: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6913: LD_INT 0
6915: PPUSH
6916: PPUSH
6917: PPUSH
// characters := characters diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6918: LD_ADDR_VAR 0 1
6922: PUSH
6923: LD_VAR 0 1
6927: PUSH
6928: LD_EXP 1
6932: PUSH
6933: LD_EXP 3
6937: PUSH
6938: LD_EXP 21
6942: PUSH
6943: LD_EXP 22
6947: PUSH
6948: LD_EXP 23
6952: PUSH
6953: LD_EXP 4
6957: PUSH
6958: LD_EXP 5
6962: PUSH
6963: LD_EXP 6
6967: PUSH
6968: LD_EXP 7
6972: PUSH
6973: LD_EXP 8
6977: PUSH
6978: LD_EXP 9
6982: PUSH
6983: LD_EXP 10
6987: PUSH
6988: LD_EXP 11
6992: PUSH
6993: LD_EXP 12
6997: PUSH
6998: LD_EXP 13
7002: PUSH
7003: LD_EXP 14
7007: PUSH
7008: LD_EXP 15
7012: PUSH
7013: LD_EXP 17
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: DIFF
7038: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
7039: LD_ADDR_VAR 0 6
7043: PUSH
7044: LD_INT 1
7046: PPUSH
7047: LD_VAR 0 1
7051: PPUSH
7052: CALL_OW 12
7056: ST_TO_ADDR
// for i = 1 to characters do
7057: LD_ADDR_VAR 0 5
7061: PUSH
7062: DOUBLE
7063: LD_INT 1
7065: DEC
7066: ST_TO_ADDR
7067: LD_VAR 0 1
7071: PUSH
7072: FOR_TO
7073: IFFALSE 7183
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7075: LD_VAR 0 5
7079: PUSH
7080: LD_VAR 0 6
7084: EQUAL
7085: PUSH
7086: LD_VAR 0 1
7090: PUSH
7091: LD_VAR 0 5
7095: ARRAY
7096: PPUSH
7097: CALL_OW 258
7101: PUSH
7102: LD_INT 1
7104: EQUAL
7105: AND
7106: IFFALSE 7128
// Say ( characters [ i ] , dialogMID ) ;
7108: LD_VAR 0 1
7112: PUSH
7113: LD_VAR 0 5
7117: ARRAY
7118: PPUSH
7119: LD_VAR 0 2
7123: PPUSH
7124: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7128: LD_VAR 0 5
7132: PUSH
7133: LD_VAR 0 6
7137: EQUAL
7138: PUSH
7139: LD_VAR 0 1
7143: PUSH
7144: LD_VAR 0 5
7148: ARRAY
7149: PPUSH
7150: CALL_OW 258
7154: PUSH
7155: LD_INT 2
7157: EQUAL
7158: AND
7159: IFFALSE 7181
// Say ( characters [ i ] , dialogFID ) ;
7161: LD_VAR 0 1
7165: PUSH
7166: LD_VAR 0 5
7170: ARRAY
7171: PPUSH
7172: LD_VAR 0 3
7176: PPUSH
7177: CALL_OW 88
// end ;
7181: GO 7072
7183: POP
7184: POP
// end ;
7185: LD_VAR 0 4
7189: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
// if not list then
7196: LD_VAR 0 1
7200: NOT
7201: IFFALSE 7205
// exit ;
7203: GO 7552
// result := [ ] ;
7205: LD_ADDR_VAR 0 3
7209: PUSH
7210: EMPTY
7211: ST_TO_ADDR
// for i in list do
7212: LD_ADDR_VAR 0 4
7216: PUSH
7217: LD_VAR 0 1
7221: PUSH
7222: FOR_IN
7223: IFFALSE 7464
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
7225: LD_ADDR_VAR 0 6
7229: PUSH
7230: LD_VAR 0 4
7234: PPUSH
7235: LD_INT 1
7237: PPUSH
7238: CALL_OW 259
7242: PUSH
7243: LD_VAR 0 4
7247: PPUSH
7248: LD_INT 2
7250: PPUSH
7251: CALL_OW 259
7255: PLUS
7256: PUSH
7257: LD_VAR 0 4
7261: PPUSH
7262: LD_INT 3
7264: PPUSH
7265: CALL_OW 259
7269: PLUS
7270: PUSH
7271: LD_VAR 0 4
7275: PPUSH
7276: LD_INT 4
7278: PPUSH
7279: CALL_OW 259
7283: PLUS
7284: PUSH
7285: LD_INT 4
7287: DIV
7288: ST_TO_ADDR
// if not result then
7289: LD_VAR 0 3
7293: NOT
7294: IFFALSE 7320
// result := [ [ i , tmp ] ] else
7296: LD_ADDR_VAR 0 3
7300: PUSH
7301: LD_VAR 0 4
7305: PUSH
7306: LD_VAR 0 6
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PUSH
7315: EMPTY
7316: LIST
7317: ST_TO_ADDR
7318: GO 7462
// begin if result [ result ] [ 2 ] <= tmp then
7320: LD_VAR 0 3
7324: PUSH
7325: LD_VAR 0 3
7329: ARRAY
7330: PUSH
7331: LD_INT 2
7333: ARRAY
7334: PUSH
7335: LD_VAR 0 6
7339: LESSEQUAL
7340: IFFALSE 7382
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7342: LD_ADDR_VAR 0 3
7346: PUSH
7347: LD_VAR 0 3
7351: PPUSH
7352: LD_VAR 0 3
7356: PUSH
7357: LD_INT 1
7359: PLUS
7360: PPUSH
7361: LD_VAR 0 4
7365: PUSH
7366: LD_VAR 0 6
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 2
7379: ST_TO_ADDR
7380: GO 7462
// for j = 1 to result do
7382: LD_ADDR_VAR 0 5
7386: PUSH
7387: DOUBLE
7388: LD_INT 1
7390: DEC
7391: ST_TO_ADDR
7392: LD_VAR 0 3
7396: PUSH
7397: FOR_TO
7398: IFFALSE 7460
// begin if tmp < result [ j ] [ 2 ] then
7400: LD_VAR 0 6
7404: PUSH
7405: LD_VAR 0 3
7409: PUSH
7410: LD_VAR 0 5
7414: ARRAY
7415: PUSH
7416: LD_INT 2
7418: ARRAY
7419: LESS
7420: IFFALSE 7458
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7422: LD_ADDR_VAR 0 3
7426: PUSH
7427: LD_VAR 0 3
7431: PPUSH
7432: LD_VAR 0 5
7436: PPUSH
7437: LD_VAR 0 4
7441: PUSH
7442: LD_VAR 0 6
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PPUSH
7451: CALL_OW 2
7455: ST_TO_ADDR
// break ;
7456: GO 7460
// end ; end ;
7458: GO 7397
7460: POP
7461: POP
// end ; end ;
7462: GO 7222
7464: POP
7465: POP
// if result and not asc then
7466: LD_VAR 0 3
7470: PUSH
7471: LD_VAR 0 2
7475: NOT
7476: AND
7477: IFFALSE 7552
// begin tmp := result ;
7479: LD_ADDR_VAR 0 6
7483: PUSH
7484: LD_VAR 0 3
7488: ST_TO_ADDR
// for i = tmp downto 1 do
7489: LD_ADDR_VAR 0 4
7493: PUSH
7494: DOUBLE
7495: LD_VAR 0 6
7499: INC
7500: ST_TO_ADDR
7501: LD_INT 1
7503: PUSH
7504: FOR_DOWNTO
7505: IFFALSE 7550
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7507: LD_ADDR_VAR 0 3
7511: PUSH
7512: LD_VAR 0 3
7516: PPUSH
7517: LD_VAR 0 6
7521: PUSH
7522: LD_VAR 0 4
7526: MINUS
7527: PUSH
7528: LD_INT 1
7530: PLUS
7531: PPUSH
7532: LD_VAR 0 6
7536: PUSH
7537: LD_VAR 0 4
7541: ARRAY
7542: PPUSH
7543: CALL_OW 1
7547: ST_TO_ADDR
7548: GO 7504
7550: POP
7551: POP
// end ; end ;
7552: LD_VAR 0 3
7556: RET
// export function PrepareDifficulty ; begin
7557: LD_INT 0
7559: PPUSH
// if difficulty = 1 then
7560: LD_OWVAR 67
7564: PUSH
7565: LD_INT 1
7567: EQUAL
7568: IFFALSE 7596
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7570: LD_INT 51
7572: PPUSH
7573: LD_INT 6
7575: PPUSH
7576: LD_INT 2
7578: PPUSH
7579: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7583: LD_INT 57
7585: PPUSH
7586: LD_INT 6
7588: PPUSH
7589: LD_INT 2
7591: PPUSH
7592: CALL_OW 322
// end ; if difficulty = 2 then
7596: LD_OWVAR 67
7600: PUSH
7601: LD_INT 2
7603: EQUAL
7604: IFFALSE 7658
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7606: LD_INT 51
7608: PPUSH
7609: LD_INT 6
7611: PPUSH
7612: LD_INT 2
7614: PPUSH
7615: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7619: LD_INT 57
7621: PPUSH
7622: LD_INT 6
7624: PPUSH
7625: LD_INT 2
7627: PPUSH
7628: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7632: LD_INT 52
7634: PPUSH
7635: LD_INT 6
7637: PPUSH
7638: LD_INT 2
7640: PPUSH
7641: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7645: LD_INT 58
7647: PPUSH
7648: LD_INT 6
7650: PPUSH
7651: LD_INT 2
7653: PPUSH
7654: CALL_OW 322
// end ; if difficulty = 3 then
7658: LD_OWVAR 67
7662: PUSH
7663: LD_INT 3
7665: EQUAL
7666: IFFALSE 7746
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7668: LD_INT 51
7670: PPUSH
7671: LD_INT 6
7673: PPUSH
7674: LD_INT 2
7676: PPUSH
7677: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7681: LD_INT 57
7683: PPUSH
7684: LD_INT 6
7686: PPUSH
7687: LD_INT 2
7689: PPUSH
7690: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7694: LD_INT 52
7696: PPUSH
7697: LD_INT 6
7699: PPUSH
7700: LD_INT 2
7702: PPUSH
7703: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7707: LD_INT 58
7709: PPUSH
7710: LD_INT 6
7712: PPUSH
7713: LD_INT 2
7715: PPUSH
7716: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
7720: LD_INT 53
7722: PPUSH
7723: LD_INT 6
7725: PPUSH
7726: LD_INT 2
7728: PPUSH
7729: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
7733: LD_INT 59
7735: PPUSH
7736: LD_INT 6
7738: PPUSH
7739: LD_INT 2
7741: PPUSH
7742: CALL_OW 322
// end ; end ;
7746: LD_VAR 0 1
7750: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
7751: LD_INT 0
7753: PPUSH
7754: PPUSH
7755: PPUSH
7756: PPUSH
7757: PPUSH
// for i = 1 to count do
7758: LD_ADDR_VAR 0 8
7762: PUSH
7763: DOUBLE
7764: LD_INT 1
7766: DEC
7767: ST_TO_ADDR
7768: LD_VAR 0 6
7772: PUSH
7773: FOR_TO
7774: IFFALSE 7855
// begin uc_side = side ;
7776: LD_ADDR_OWVAR 20
7780: PUSH
7781: LD_VAR 0 1
7785: ST_TO_ADDR
// uc_nation = nation ;
7786: LD_ADDR_OWVAR 21
7790: PUSH
7791: LD_VAR 0 2
7795: ST_TO_ADDR
// hc_gallery =  ;
7796: LD_ADDR_OWVAR 33
7800: PUSH
7801: LD_STRING 
7803: ST_TO_ADDR
// hc_name =  ;
7804: LD_ADDR_OWVAR 26
7808: PUSH
7809: LD_STRING 
7811: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7812: LD_INT 0
7814: PPUSH
7815: LD_VAR 0 5
7819: PPUSH
7820: LD_VAR 0 4
7824: PPUSH
7825: CALL_OW 380
// un = CreateHuman ;
7829: LD_ADDR_VAR 0 10
7833: PUSH
7834: CALL_OW 44
7838: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7839: LD_VAR 0 10
7843: PPUSH
7844: LD_VAR 0 3
7848: PPUSH
7849: CALL_OW 52
// end ;
7853: GO 7773
7855: POP
7856: POP
// end ;
7857: LD_VAR 0 7
7861: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7862: LD_INT 0
7864: PPUSH
7865: PPUSH
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
7870: PPUSH
7871: PPUSH
7872: PPUSH
7873: PPUSH
7874: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7875: LD_INT 2100
7877: PUSH
7878: LD_INT 3150
7880: PUSH
7881: LD_INT 4200
7883: PUSH
7884: LD_INT 5250
7886: PUSH
7887: LD_INT 6300
7889: PUSH
7890: LD_INT 7350
7892: PUSH
7893: LD_INT 8400
7895: PUSH
7896: LD_INT 9450
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 1
7911: PPUSH
7912: LD_INT 8
7914: PPUSH
7915: CALL_OW 12
7919: ARRAY
7920: PPUSH
7921: CALL_OW 67
// amChassisTab = [ ] ;
7925: LD_ADDR_VAR 0 19
7929: PUSH
7930: EMPTY
7931: ST_TO_ADDR
// arChassisTab = [ ] ;
7932: LD_ADDR_VAR 0 18
7936: PUSH
7937: EMPTY
7938: ST_TO_ADDR
// ruChassisTab = [ ] ;
7939: LD_ADDR_VAR 0 17
7943: PUSH
7944: EMPTY
7945: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7946: LD_INT 35
7948: PPUSH
7949: CALL_OW 67
// if nation = 1 then
7953: LD_VAR 0 5
7957: PUSH
7958: LD_INT 1
7960: EQUAL
7961: IFFALSE 8452
// begin uc_side = side ;
7963: LD_ADDR_OWVAR 20
7967: PUSH
7968: LD_VAR 0 2
7972: ST_TO_ADDR
// uc_nation = nation ;
7973: LD_ADDR_OWVAR 21
7977: PUSH
7978: LD_VAR 0 5
7982: ST_TO_ADDR
// vc_engine = vehengine ;
7983: LD_ADDR_OWVAR 39
7987: PUSH
7988: LD_VAR 0 6
7992: ST_TO_ADDR
// vc_control = vehcontrol ;
7993: LD_ADDR_OWVAR 38
7997: PUSH
7998: LD_VAR 0 7
8002: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8003: LD_ADDR_OWVAR 40
8007: PUSH
8008: LD_VAR 0 10
8012: PUSH
8013: LD_INT 1
8015: PPUSH
8016: LD_VAR 0 10
8020: PPUSH
8021: CALL_OW 12
8025: ARRAY
8026: ST_TO_ADDR
// for j = 1 to AMWeapon do
8027: LD_ADDR_VAR 0 14
8031: PUSH
8032: DOUBLE
8033: LD_INT 1
8035: DEC
8036: ST_TO_ADDR
8037: LD_VAR 0 10
8041: PUSH
8042: FOR_TO
8043: IFFALSE 8344
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8045: LD_VAR 0 10
8049: PUSH
8050: LD_VAR 0 14
8054: ARRAY
8055: PUSH
8056: LD_INT 2
8058: EQUAL
8059: PUSH
8060: LD_VAR 0 10
8064: PUSH
8065: LD_VAR 0 14
8069: ARRAY
8070: PUSH
8071: LD_INT 3
8073: EQUAL
8074: OR
8075: IFFALSE 8128
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8077: LD_ADDR_VAR 0 19
8081: PUSH
8082: LD_INT 1
8084: PUSH
8085: LD_INT 2
8087: PUSH
8088: LD_INT 3
8090: PUSH
8091: LD_INT 4
8093: PUSH
8094: LD_INT 5
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8104: LD_ADDR_OWVAR 37
8108: PUSH
8109: LD_VAR 0 19
8113: PUSH
8114: LD_INT 1
8116: PPUSH
8117: LD_VAR 0 19
8121: PPUSH
8122: CALL_OW 12
8126: ARRAY
8127: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8128: LD_VAR 0 10
8132: PUSH
8133: LD_VAR 0 14
8137: ARRAY
8138: PUSH
8139: LD_INT 4
8141: EQUAL
8142: PUSH
8143: LD_VAR 0 10
8147: PUSH
8148: LD_VAR 0 14
8152: ARRAY
8153: PUSH
8154: LD_INT 5
8156: EQUAL
8157: OR
8158: PUSH
8159: LD_VAR 0 10
8163: PUSH
8164: LD_VAR 0 14
8168: ARRAY
8169: PUSH
8170: LD_INT 9
8172: EQUAL
8173: OR
8174: PUSH
8175: LD_VAR 0 10
8179: PUSH
8180: LD_VAR 0 14
8184: ARRAY
8185: PUSH
8186: LD_INT 11
8188: EQUAL
8189: OR
8190: PUSH
8191: LD_VAR 0 10
8195: PUSH
8196: LD_VAR 0 14
8200: ARRAY
8201: PUSH
8202: LD_INT 7
8204: EQUAL
8205: OR
8206: IFFALSE 8255
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8208: LD_ADDR_VAR 0 19
8212: PUSH
8213: LD_INT 2
8215: PUSH
8216: LD_INT 3
8218: PUSH
8219: LD_INT 4
8221: PUSH
8222: LD_INT 5
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8231: LD_ADDR_OWVAR 37
8235: PUSH
8236: LD_VAR 0 19
8240: PUSH
8241: LD_INT 1
8243: PPUSH
8244: LD_VAR 0 19
8248: PPUSH
8249: CALL_OW 12
8253: ARRAY
8254: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8255: LD_VAR 0 10
8259: PUSH
8260: LD_VAR 0 14
8264: ARRAY
8265: PUSH
8266: LD_INT 8
8268: EQUAL
8269: PUSH
8270: LD_VAR 0 10
8274: PUSH
8275: LD_VAR 0 14
8279: ARRAY
8280: PUSH
8281: LD_INT 6
8283: EQUAL
8284: OR
8285: PUSH
8286: LD_VAR 0 10
8290: PUSH
8291: LD_VAR 0 14
8295: ARRAY
8296: PUSH
8297: LD_INT 10
8299: EQUAL
8300: OR
8301: IFFALSE 8342
// begin amChassisTab = [ 4 , 5 ] ;
8303: LD_ADDR_VAR 0 19
8307: PUSH
8308: LD_INT 4
8310: PUSH
8311: LD_INT 5
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8318: LD_ADDR_OWVAR 37
8322: PUSH
8323: LD_VAR 0 19
8327: PUSH
8328: LD_INT 1
8330: PPUSH
8331: LD_VAR 0 19
8335: PPUSH
8336: CALL_OW 12
8340: ARRAY
8341: ST_TO_ADDR
// end ; end ;
8342: GO 8042
8344: POP
8345: POP
// veh = CreateVehicle ;
8346: LD_ADDR_VAR 0 16
8350: PUSH
8351: CALL_OW 45
8355: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8356: LD_VAR 0 16
8360: PPUSH
8361: LD_VAR 0 1
8365: PPUSH
8366: LD_INT 0
8368: PPUSH
8369: CALL_OW 49
// if vc_control = 1 then
8373: LD_OWVAR 38
8377: PUSH
8378: LD_INT 1
8380: EQUAL
8381: IFFALSE 8438
// begin hc_gallery =  ;
8383: LD_ADDR_OWVAR 33
8387: PUSH
8388: LD_STRING 
8390: ST_TO_ADDR
// hc_name =  ;
8391: LD_ADDR_OWVAR 26
8395: PUSH
8396: LD_STRING 
8398: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8399: LD_INT 0
8401: PPUSH
8402: LD_INT 3
8404: PPUSH
8405: LD_VAR 0 4
8409: PPUSH
8410: CALL_OW 380
// un = CreateHuman ;
8414: LD_ADDR_VAR 0 15
8418: PUSH
8419: CALL_OW 44
8423: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8424: LD_VAR 0 15
8428: PPUSH
8429: LD_VAR 0 16
8433: PPUSH
8434: CALL_OW 52
// end ; i = i + 1 ;
8438: LD_ADDR_VAR 0 13
8442: PUSH
8443: LD_VAR 0 13
8447: PUSH
8448: LD_INT 1
8450: PLUS
8451: ST_TO_ADDR
// end ; if nation = 2 then
8452: LD_VAR 0 5
8456: PUSH
8457: LD_INT 2
8459: EQUAL
8460: IFFALSE 8884
// begin uc_side = side ;
8462: LD_ADDR_OWVAR 20
8466: PUSH
8467: LD_VAR 0 2
8471: ST_TO_ADDR
// uc_nation = nation ;
8472: LD_ADDR_OWVAR 21
8476: PUSH
8477: LD_VAR 0 5
8481: ST_TO_ADDR
// vc_engine = vehengine ;
8482: LD_ADDR_OWVAR 39
8486: PUSH
8487: LD_VAR 0 6
8491: ST_TO_ADDR
// vc_control = vehcontrol ;
8492: LD_ADDR_OWVAR 38
8496: PUSH
8497: LD_VAR 0 7
8501: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8502: LD_ADDR_OWVAR 40
8506: PUSH
8507: LD_VAR 0 9
8511: PUSH
8512: LD_INT 1
8514: PPUSH
8515: LD_VAR 0 9
8519: PPUSH
8520: CALL_OW 12
8524: ARRAY
8525: ST_TO_ADDR
// for j = 1 to ARWeapons do
8526: LD_ADDR_VAR 0 14
8530: PUSH
8531: DOUBLE
8532: LD_INT 1
8534: DEC
8535: ST_TO_ADDR
8536: LD_VAR 0 9
8540: PUSH
8541: FOR_TO
8542: IFFALSE 8776
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8544: LD_VAR 0 9
8548: PUSH
8549: LD_VAR 0 14
8553: ARRAY
8554: PUSH
8555: LD_INT 24
8557: EQUAL
8558: PUSH
8559: LD_VAR 0 9
8563: PUSH
8564: LD_VAR 0 14
8568: ARRAY
8569: PUSH
8570: LD_INT 22
8572: EQUAL
8573: OR
8574: PUSH
8575: LD_VAR 0 9
8579: PUSH
8580: LD_VAR 0 14
8584: ARRAY
8585: PUSH
8586: LD_INT 23
8588: EQUAL
8589: OR
8590: PUSH
8591: LD_VAR 0 9
8595: PUSH
8596: LD_VAR 0 14
8600: ARRAY
8601: PUSH
8602: LD_INT 30
8604: EQUAL
8605: OR
8606: IFFALSE 8655
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8608: LD_ADDR_VAR 0 18
8612: PUSH
8613: LD_INT 11
8615: PUSH
8616: LD_INT 12
8618: PUSH
8619: LD_INT 13
8621: PUSH
8622: LD_INT 14
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8631: LD_ADDR_OWVAR 37
8635: PUSH
8636: LD_VAR 0 18
8640: PUSH
8641: LD_INT 1
8643: PPUSH
8644: LD_VAR 0 18
8648: PPUSH
8649: CALL_OW 12
8653: ARRAY
8654: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8655: LD_VAR 0 9
8659: PUSH
8660: LD_VAR 0 14
8664: ARRAY
8665: PUSH
8666: LD_INT 29
8668: EQUAL
8669: PUSH
8670: LD_VAR 0 9
8674: PUSH
8675: LD_VAR 0 14
8679: ARRAY
8680: PUSH
8681: LD_INT 28
8683: EQUAL
8684: OR
8685: PUSH
8686: LD_VAR 0 9
8690: PUSH
8691: LD_VAR 0 14
8695: ARRAY
8696: PUSH
8697: LD_INT 27
8699: EQUAL
8700: OR
8701: PUSH
8702: LD_VAR 0 9
8706: PUSH
8707: LD_VAR 0 14
8711: ARRAY
8712: PUSH
8713: LD_INT 26
8715: EQUAL
8716: OR
8717: PUSH
8718: LD_VAR 0 9
8722: PUSH
8723: LD_VAR 0 14
8727: ARRAY
8728: PUSH
8729: LD_INT 25
8731: EQUAL
8732: OR
8733: IFFALSE 8774
// begin arChassisTab = [ 13 , 14 ] ;
8735: LD_ADDR_VAR 0 18
8739: PUSH
8740: LD_INT 13
8742: PUSH
8743: LD_INT 14
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8750: LD_ADDR_OWVAR 37
8754: PUSH
8755: LD_VAR 0 18
8759: PUSH
8760: LD_INT 1
8762: PPUSH
8763: LD_VAR 0 18
8767: PPUSH
8768: CALL_OW 12
8772: ARRAY
8773: ST_TO_ADDR
// end ; end ;
8774: GO 8541
8776: POP
8777: POP
// veh = CreateVehicle ;
8778: LD_ADDR_VAR 0 16
8782: PUSH
8783: CALL_OW 45
8787: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8788: LD_VAR 0 16
8792: PPUSH
8793: LD_VAR 0 1
8797: PPUSH
8798: LD_INT 0
8800: PPUSH
8801: CALL_OW 49
// if vc_control = 1 then
8805: LD_OWVAR 38
8809: PUSH
8810: LD_INT 1
8812: EQUAL
8813: IFFALSE 8870
// begin hc_gallery =  ;
8815: LD_ADDR_OWVAR 33
8819: PUSH
8820: LD_STRING 
8822: ST_TO_ADDR
// hc_name =  ;
8823: LD_ADDR_OWVAR 26
8827: PUSH
8828: LD_STRING 
8830: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8831: LD_INT 0
8833: PPUSH
8834: LD_INT 3
8836: PPUSH
8837: LD_VAR 0 4
8841: PPUSH
8842: CALL_OW 380
// un = CreateHuman ;
8846: LD_ADDR_VAR 0 15
8850: PUSH
8851: CALL_OW 44
8855: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8856: LD_VAR 0 15
8860: PPUSH
8861: LD_VAR 0 16
8865: PPUSH
8866: CALL_OW 52
// end ; i = i + 1 ;
8870: LD_ADDR_VAR 0 13
8874: PUSH
8875: LD_VAR 0 13
8879: PUSH
8880: LD_INT 1
8882: PLUS
8883: ST_TO_ADDR
// end ; if nation = 3 then
8884: LD_VAR 0 5
8888: PUSH
8889: LD_INT 3
8891: EQUAL
8892: IFFALSE 9268
// begin uc_side = side ;
8894: LD_ADDR_OWVAR 20
8898: PUSH
8899: LD_VAR 0 2
8903: ST_TO_ADDR
// uc_nation = nation ;
8904: LD_ADDR_OWVAR 21
8908: PUSH
8909: LD_VAR 0 5
8913: ST_TO_ADDR
// vc_engine = vehengine ;
8914: LD_ADDR_OWVAR 39
8918: PUSH
8919: LD_VAR 0 6
8923: ST_TO_ADDR
// vc_control = vehcontrol ;
8924: LD_ADDR_OWVAR 38
8928: PUSH
8929: LD_VAR 0 7
8933: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8934: LD_ADDR_OWVAR 40
8938: PUSH
8939: LD_VAR 0 8
8943: PUSH
8944: LD_INT 1
8946: PPUSH
8947: LD_VAR 0 8
8951: PPUSH
8952: CALL_OW 12
8956: ARRAY
8957: ST_TO_ADDR
// for j = 1 to RuWeapons do
8958: LD_ADDR_VAR 0 14
8962: PUSH
8963: DOUBLE
8964: LD_INT 1
8966: DEC
8967: ST_TO_ADDR
8968: LD_VAR 0 8
8972: PUSH
8973: FOR_TO
8974: IFFALSE 9160
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8976: LD_VAR 0 8
8980: PUSH
8981: LD_VAR 0 14
8985: ARRAY
8986: PUSH
8987: LD_INT 42
8989: EQUAL
8990: PUSH
8991: LD_VAR 0 8
8995: PUSH
8996: LD_VAR 0 14
9000: ARRAY
9001: PUSH
9002: LD_INT 43
9004: EQUAL
9005: OR
9006: PUSH
9007: LD_VAR 0 8
9011: PUSH
9012: LD_VAR 0 14
9016: ARRAY
9017: PUSH
9018: LD_INT 44
9020: EQUAL
9021: OR
9022: PUSH
9023: LD_VAR 0 8
9027: PUSH
9028: LD_VAR 0 14
9032: ARRAY
9033: PUSH
9034: LD_INT 45
9036: EQUAL
9037: OR
9038: PUSH
9039: LD_VAR 0 8
9043: PUSH
9044: LD_VAR 0 14
9048: ARRAY
9049: PUSH
9050: LD_INT 49
9052: EQUAL
9053: OR
9054: IFFALSE 9091
// begin ruChassisTab = [ 24 ] ;
9056: LD_ADDR_VAR 0 17
9060: PUSH
9061: LD_INT 24
9063: PUSH
9064: EMPTY
9065: LIST
9066: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9067: LD_ADDR_OWVAR 37
9071: PUSH
9072: LD_VAR 0 17
9076: PUSH
9077: LD_INT 1
9079: PPUSH
9080: LD_VAR 0 17
9084: PPUSH
9085: CALL_OW 12
9089: ARRAY
9090: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9091: LD_VAR 0 8
9095: PUSH
9096: LD_VAR 0 14
9100: ARRAY
9101: PUSH
9102: LD_INT 46
9104: EQUAL
9105: PUSH
9106: LD_VAR 0 8
9110: PUSH
9111: LD_VAR 0 14
9115: ARRAY
9116: PUSH
9117: LD_INT 47
9119: EQUAL
9120: OR
9121: IFFALSE 9158
// begin ruChassisTab = [ 24 ] ;
9123: LD_ADDR_VAR 0 17
9127: PUSH
9128: LD_INT 24
9130: PUSH
9131: EMPTY
9132: LIST
9133: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9134: LD_ADDR_OWVAR 37
9138: PUSH
9139: LD_VAR 0 17
9143: PUSH
9144: LD_INT 1
9146: PPUSH
9147: LD_VAR 0 17
9151: PPUSH
9152: CALL_OW 12
9156: ARRAY
9157: ST_TO_ADDR
// end ; end ;
9158: GO 8973
9160: POP
9161: POP
// veh = CreateVehicle ;
9162: LD_ADDR_VAR 0 16
9166: PUSH
9167: CALL_OW 45
9171: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9172: LD_VAR 0 16
9176: PPUSH
9177: LD_VAR 0 1
9181: PPUSH
9182: LD_INT 0
9184: PPUSH
9185: CALL_OW 49
// if vc_control = 1 then
9189: LD_OWVAR 38
9193: PUSH
9194: LD_INT 1
9196: EQUAL
9197: IFFALSE 9254
// begin hc_gallery =  ;
9199: LD_ADDR_OWVAR 33
9203: PUSH
9204: LD_STRING 
9206: ST_TO_ADDR
// hc_name =  ;
9207: LD_ADDR_OWVAR 26
9211: PUSH
9212: LD_STRING 
9214: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9215: LD_INT 0
9217: PPUSH
9218: LD_INT 3
9220: PPUSH
9221: LD_VAR 0 4
9225: PPUSH
9226: CALL_OW 380
// un = CreateHuman ;
9230: LD_ADDR_VAR 0 15
9234: PUSH
9235: CALL_OW 44
9239: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9240: LD_VAR 0 15
9244: PPUSH
9245: LD_VAR 0 16
9249: PPUSH
9250: CALL_OW 52
// end ; i = i + 1 ;
9254: LD_ADDR_VAR 0 13
9258: PUSH
9259: LD_VAR 0 13
9263: PUSH
9264: LD_INT 1
9266: PLUS
9267: ST_TO_ADDR
// end ; until i = vehCount ;
9268: LD_VAR 0 13
9272: PUSH
9273: LD_VAR 0 3
9277: EQUAL
9278: IFFALSE 7946
// repeat wait ( 0 0$1 ) ;
9280: LD_INT 35
9282: PPUSH
9283: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
9287: LD_ADDR_VAR 0 20
9291: PUSH
9292: LD_INT 22
9294: PUSH
9295: LD_VAR 0 2
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 21
9306: PUSH
9307: LD_INT 2
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 24
9316: PUSH
9317: LD_INT 250
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: PPUSH
9329: CALL_OW 69
9333: ST_TO_ADDR
// if vehicleOK_list > 0 then
9334: LD_VAR 0 20
9338: PUSH
9339: LD_INT 0
9341: GREATER
9342: IFFALSE 9533
// begin for i in vehicleOK_list do
9344: LD_ADDR_VAR 0 13
9348: PUSH
9349: LD_VAR 0 20
9353: PUSH
9354: FOR_IN
9355: IFFALSE 9531
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9357: LD_ADDR_VAR 0 21
9361: PUSH
9362: LD_INT 22
9364: PUSH
9365: LD_VAR 0 11
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PPUSH
9374: CALL_OW 69
9378: PPUSH
9379: LD_VAR 0 13
9383: PPUSH
9384: CALL_OW 74
9388: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9389: LD_ADDR_VAR 0 22
9393: PUSH
9394: LD_INT 22
9396: PUSH
9397: LD_VAR 0 11
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 2
9408: PUSH
9409: LD_INT 59
9411: PUSH
9412: EMPTY
9413: LIST
9414: PUSH
9415: LD_INT 21
9417: PUSH
9418: LD_INT 1
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 21
9427: PUSH
9428: LD_INT 2
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: PPUSH
9448: CALL_OW 69
9452: PPUSH
9453: LD_VAR 0 13
9457: PPUSH
9458: CALL_OW 74
9462: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9463: LD_VAR 0 13
9467: PPUSH
9468: LD_VAR 0 21
9472: PPUSH
9473: CALL_OW 296
9477: PUSH
9478: LD_INT 8
9480: PLUS
9481: PUSH
9482: LD_VAR 0 13
9486: PPUSH
9487: LD_VAR 0 22
9491: PPUSH
9492: CALL_OW 296
9496: LESS
9497: IFFALSE 9515
// begin ComAttackUnit ( i , target1 ) ;
9499: LD_VAR 0 13
9503: PPUSH
9504: LD_VAR 0 21
9508: PPUSH
9509: CALL_OW 115
// end else
9513: GO 9529
// begin ComAttackUnit ( i , target2 ) ;
9515: LD_VAR 0 13
9519: PPUSH
9520: LD_VAR 0 22
9524: PPUSH
9525: CALL_OW 115
// end ; end ;
9529: GO 9354
9531: POP
9532: POP
// end ; until vehicleOK_list = [ ] ;
9533: LD_VAR 0 20
9537: PUSH
9538: EMPTY
9539: EQUAL
9540: IFFALSE 9280
// end ;
9542: LD_VAR 0 12
9546: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
9547: LD_INT 0
9549: PPUSH
9550: PPUSH
9551: PPUSH
9552: PPUSH
// for i = 1 to 72 do
9553: LD_ADDR_VAR 0 5
9557: PUSH
9558: DOUBLE
9559: LD_INT 1
9561: DEC
9562: ST_TO_ADDR
9563: LD_INT 72
9565: PUSH
9566: FOR_TO
9567: IFFALSE 9625
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
9569: LD_VAR 0 5
9573: PPUSH
9574: LD_VAR 0 1
9578: PPUSH
9579: CALL_OW 321
9583: PUSH
9584: LD_INT 1
9586: EQUAL
9587: PUSH
9588: LD_VAR 0 5
9592: PPUSH
9593: LD_VAR 0 3
9597: PPUSH
9598: CALL_OW 482
9602: PUSH
9603: LD_INT 1
9605: EQUAL
9606: AND
9607: IFFALSE 9623
// AddComResearch ( lab , i ) ;
9609: LD_VAR 0 2
9613: PPUSH
9614: LD_VAR 0 5
9618: PPUSH
9619: CALL_OW 184
9623: GO 9566
9625: POP
9626: POP
// end ;
9627: LD_VAR 0 4
9631: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9632: LD_INT 0
9634: PPUSH
9635: PPUSH
9636: PPUSH
9637: PPUSH
9638: PPUSH
9639: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Kozlov ] ;
9640: LD_ADDR_VAR 0 8
9644: PUSH
9645: LD_VAR 0 2
9649: PPUSH
9650: CALL_OW 313
9654: PUSH
9655: LD_EXP 35
9659: PUSH
9660: EMPTY
9661: LIST
9662: DIFF
9663: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) diff [ Kozlov ] ;
9664: LD_ADDR_VAR 0 9
9668: PUSH
9669: LD_VAR 0 3
9673: PPUSH
9674: LD_INT 22
9676: PUSH
9677: LD_VAR 0 1
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PUSH
9686: LD_INT 25
9688: PUSH
9689: LD_INT 2
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 24
9698: PUSH
9699: LD_INT 750
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 3
9708: PUSH
9709: LD_INT 54
9711: PUSH
9712: EMPTY
9713: LIST
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: PPUSH
9725: CALL_OW 70
9729: PUSH
9730: LD_EXP 35
9734: PUSH
9735: EMPTY
9736: LIST
9737: DIFF
9738: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9739: LD_ADDR_VAR 0 6
9743: PUSH
9744: LD_VAR 0 3
9748: PPUSH
9749: LD_INT 22
9751: PUSH
9752: LD_VAR 0 1
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PUSH
9761: LD_INT 21
9763: PUSH
9764: LD_INT 3
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: LD_INT 3
9773: PUSH
9774: LD_INT 24
9776: PUSH
9777: LD_INT 1000
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: PUSH
9793: EMPTY
9794: LIST
9795: PPUSH
9796: CALL_OW 70
9800: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
9801: LD_VAR 0 6
9805: NOT
9806: PUSH
9807: LD_INT 22
9809: PUSH
9810: LD_VAR 0 1
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PUSH
9819: LD_INT 25
9821: PUSH
9822: LD_INT 2
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: LD_INT 24
9831: PUSH
9832: LD_INT 250
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: LIST
9843: PPUSH
9844: CALL_OW 69
9848: NOT
9849: AND
9850: IFFALSE 9854
// exit ;
9852: GO 10036
// if buildings_list > 0 and engineerOkInside then
9854: LD_VAR 0 6
9858: PUSH
9859: LD_INT 0
9861: GREATER
9862: PUSH
9863: LD_VAR 0 8
9867: AND
9868: IFFALSE 9879
// ComExitBuilding ( engineerOkInside ) ;
9870: LD_VAR 0 8
9874: PPUSH
9875: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
9879: LD_VAR 0 6
9883: PUSH
9884: LD_INT 0
9886: GREATER
9887: PUSH
9888: LD_VAR 0 9
9892: PUSH
9893: LD_INT 0
9895: GREATER
9896: AND
9897: IFFALSE 9917
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
9899: LD_VAR 0 9
9903: PPUSH
9904: LD_VAR 0 6
9908: PUSH
9909: LD_INT 1
9911: ARRAY
9912: PPUSH
9913: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
9917: LD_VAR 0 6
9921: PUSH
9922: LD_INT 0
9924: EQUAL
9925: PUSH
9926: LD_VAR 0 4
9930: PUSH
9931: LD_INT 0
9933: EQUAL
9934: AND
9935: PUSH
9936: LD_VAR 0 9
9940: PUSH
9941: LD_INT 0
9943: GREATER
9944: AND
9945: IFFALSE 9961
// ComEnterUnit ( engineerOkOutside , building ) ;
9947: LD_VAR 0 9
9951: PPUSH
9952: LD_VAR 0 2
9956: PPUSH
9957: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9961: LD_VAR 0 9
9965: PUSH
9966: LD_INT 0
9968: GREATER
9969: PUSH
9970: LD_VAR 0 6
9974: PUSH
9975: LD_INT 0
9977: EQUAL
9978: AND
9979: PUSH
9980: LD_VAR 0 4
9984: PUSH
9985: LD_INT 0
9987: GREATER
9988: AND
9989: IFFALSE 10036
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9991: LD_VAR 0 9
9995: PPUSH
9996: LD_VAR 0 4
10000: PUSH
10001: LD_INT 1
10003: ARRAY
10004: PPUSH
10005: LD_VAR 0 4
10009: PUSH
10010: LD_INT 2
10012: ARRAY
10013: PPUSH
10014: LD_VAR 0 4
10018: PUSH
10019: LD_INT 3
10021: ARRAY
10022: PPUSH
10023: LD_VAR 0 4
10027: PUSH
10028: LD_INT 4
10030: ARRAY
10031: PPUSH
10032: CALL_OW 145
// end ;
10036: LD_VAR 0 5
10040: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10041: LD_INT 0
10043: PPUSH
10044: PPUSH
10045: PPUSH
10046: PPUSH
10047: PPUSH
10048: PPUSH
10049: PPUSH
10050: PPUSH
10051: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) diff [ Kozlov ] ;
10052: LD_ADDR_VAR 0 6
10056: PUSH
10057: LD_INT 22
10059: PUSH
10060: LD_VAR 0 1
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: LD_INT 25
10071: PUSH
10072: LD_INT 4
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: LD_INT 23
10081: PUSH
10082: LD_INT 2
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: LD_INT 24
10091: PUSH
10092: LD_INT 251
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: PPUSH
10105: CALL_OW 69
10109: PUSH
10110: LD_EXP 35
10114: PUSH
10115: EMPTY
10116: LIST
10117: DIFF
10118: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ Kozlov ] ;
10119: LD_ADDR_VAR 0 7
10123: PUSH
10124: LD_VAR 0 3
10128: PPUSH
10129: LD_INT 22
10131: PUSH
10132: LD_VAR 0 1
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 23
10143: PUSH
10144: LD_INT 2
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 25
10153: PUSH
10154: LD_INT 4
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 50
10163: PUSH
10164: EMPTY
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: PPUSH
10173: CALL_OW 70
10177: PUSH
10178: LD_EXP 35
10182: PUSH
10183: EMPTY
10184: LIST
10185: DIFF
10186: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10187: LD_ADDR_VAR 0 10
10191: PUSH
10192: LD_VAR 0 3
10196: PPUSH
10197: LD_INT 22
10199: PUSH
10200: LD_VAR 0 1
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 21
10211: PUSH
10212: LD_INT 1
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 3
10221: PUSH
10222: LD_INT 25
10224: PUSH
10225: LD_INT 3
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 3
10238: PUSH
10239: LD_INT 24
10241: PUSH
10242: LD_INT 750
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: PPUSH
10259: CALL_OW 70
10263: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10264: LD_ADDR_VAR 0 11
10268: PUSH
10269: LD_VAR 0 2
10273: PPUSH
10274: LD_INT 22
10276: PUSH
10277: LD_VAR 0 1
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: LD_INT 21
10288: PUSH
10289: LD_INT 1
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PUSH
10296: LD_INT 3
10298: PUSH
10299: LD_INT 25
10301: PUSH
10302: LD_INT 3
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 3
10315: PUSH
10316: LD_INT 24
10318: PUSH
10319: LD_INT 1000
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: PPUSH
10336: CALL_OW 70
10340: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10341: LD_VAR 0 10
10345: NOT
10346: PUSH
10347: LD_VAR 0 11
10351: NOT
10352: AND
10353: PUSH
10354: LD_VAR 0 6
10358: NOT
10359: AND
10360: IFFALSE 10364
// exit ;
10362: GO 10598
// if damageUnits > 0 and sci_list > 0 then
10364: LD_VAR 0 10
10368: PUSH
10369: LD_INT 0
10371: GREATER
10372: PUSH
10373: LD_VAR 0 6
10377: PUSH
10378: LD_INT 0
10380: GREATER
10381: AND
10382: IFFALSE 10398
// ComMoveToArea ( damageUnits , healArea ) ;
10384: LD_VAR 0 10
10388: PPUSH
10389: LD_VAR 0 2
10393: PPUSH
10394: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
10398: LD_VAR 0 11
10402: PUSH
10403: LD_INT 0
10405: GREATER
10406: PUSH
10407: LD_VAR 0 6
10411: PUSH
10412: LD_INT 0
10414: GREATER
10415: AND
10416: IFFALSE 10427
// ComExitBuilding ( sci_list ) ;
10418: LD_VAR 0 6
10422: PPUSH
10423: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
10427: LD_VAR 0 11
10431: PUSH
10432: LD_INT 0
10434: GREATER
10435: PUSH
10436: LD_VAR 0 7
10440: PUSH
10441: LD_INT 0
10443: GREATER
10444: AND
10445: IFFALSE 10465
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10447: LD_VAR 0 7
10451: PPUSH
10452: LD_VAR 0 11
10456: PUSH
10457: LD_INT 1
10459: ARRAY
10460: PPUSH
10461: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10465: LD_VAR 0 10
10469: PUSH
10470: LD_INT 0
10472: EQUAL
10473: PUSH
10474: LD_VAR 0 11
10478: PUSH
10479: LD_INT 0
10481: EQUAL
10482: AND
10483: PUSH
10484: LD_VAR 0 7
10488: PUSH
10489: LD_INT 0
10491: GREATER
10492: AND
10493: IFFALSE 10598
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10495: LD_ADDR_VAR 0 12
10499: PUSH
10500: LD_INT 22
10502: PUSH
10503: LD_VAR 0 1
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: LD_INT 21
10514: PUSH
10515: LD_INT 3
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 30
10524: PUSH
10525: LD_INT 8
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: PPUSH
10537: CALL_OW 69
10541: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10542: LD_ADDR_VAR 0 13
10546: PUSH
10547: LD_INT 1
10549: PPUSH
10550: LD_VAR 0 12
10554: PPUSH
10555: CALL_OW 12
10559: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10560: LD_VAR 0 7
10564: PPUSH
10565: LD_INT 3
10567: PUSH
10568: LD_INT 60
10570: PUSH
10571: EMPTY
10572: LIST
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PPUSH
10578: CALL_OW 72
10582: PPUSH
10583: LD_VAR 0 12
10587: PUSH
10588: LD_VAR 0 13
10592: ARRAY
10593: PPUSH
10594: CALL_OW 120
// end ; end ;
10598: LD_VAR 0 5
10602: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
10603: LD_INT 0
10605: PPUSH
10606: PPUSH
10607: PPUSH
10608: PPUSH
// tmpTab = [ ] ;
10609: LD_ADDR_VAR 0 6
10613: PUSH
10614: EMPTY
10615: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
10616: LD_INT 22
10618: PUSH
10619: LD_VAR 0 1
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 30
10630: PUSH
10631: LD_INT 32
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PPUSH
10642: CALL_OW 69
10646: PUSH
10647: LD_INT 0
10649: GREATER
10650: IFFALSE 10733
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10652: LD_ADDR_VAR 0 4
10656: PUSH
10657: LD_INT 22
10659: PUSH
10660: LD_VAR 0 1
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: LD_INT 30
10671: PUSH
10672: LD_INT 32
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PPUSH
10683: CALL_OW 69
10687: PUSH
10688: FOR_IN
10689: IFFALSE 10731
// begin for j in UnitsInside ( i ) do
10691: LD_ADDR_VAR 0 5
10695: PUSH
10696: LD_VAR 0 4
10700: PPUSH
10701: CALL_OW 313
10705: PUSH
10706: FOR_IN
10707: IFFALSE 10727
// tmpTab = tmpTab ^ j ;
10709: LD_ADDR_VAR 0 6
10713: PUSH
10714: LD_VAR 0 6
10718: PUSH
10719: LD_VAR 0 5
10723: ADD
10724: ST_TO_ADDR
10725: GO 10706
10727: POP
10728: POP
// end ;
10729: GO 10688
10731: POP
10732: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
10733: LD_VAR 0 6
10737: PPUSH
10738: LD_VAR 0 2
10742: PPUSH
10743: CALL_OW 250
10747: PPUSH
10748: LD_VAR 0 2
10752: PPUSH
10753: CALL_OW 251
10757: PPUSH
10758: CALL_OW 114
// end ;
10762: LD_VAR 0 3
10766: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
10767: LD_INT 0
10769: PPUSH
10770: PPUSH
10771: PPUSH
10772: PPUSH
10773: PPUSH
10774: PPUSH
10775: PPUSH
10776: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Platonov , Yakotich ] ;
10777: LD_ADDR_VAR 0 6
10781: PUSH
10782: LD_VAR 0 2
10786: PPUSH
10787: LD_INT 22
10789: PUSH
10790: LD_VAR 0 1
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 56
10801: PUSH
10802: EMPTY
10803: LIST
10804: PUSH
10805: LD_INT 24
10807: PUSH
10808: LD_INT 700
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: PUSH
10815: LD_INT 3
10817: PUSH
10818: LD_INT 60
10820: PUSH
10821: EMPTY
10822: LIST
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PUSH
10828: LD_INT 2
10830: PUSH
10831: LD_INT 25
10833: PUSH
10834: LD_INT 1
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 25
10843: PUSH
10844: LD_INT 5
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PUSH
10851: LD_INT 25
10853: PUSH
10854: LD_INT 8
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: PUSH
10861: LD_INT 25
10863: PUSH
10864: LD_INT 9
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: PPUSH
10885: CALL_OW 70
10889: PUSH
10890: LD_EXP 26
10894: PUSH
10895: LD_EXP 27
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: DIFF
10904: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
10905: LD_ADDR_VAR 0 7
10909: PUSH
10910: LD_VAR 0 2
10914: PPUSH
10915: LD_INT 22
10917: PUSH
10918: LD_VAR 0 1
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: LD_INT 30
10929: PUSH
10930: LD_INT 32
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: LD_INT 58
10939: PUSH
10940: EMPTY
10941: LIST
10942: PUSH
10943: LD_INT 24
10945: PUSH
10946: LD_INT 251
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: PPUSH
10959: CALL_OW 70
10963: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
10964: LD_ADDR_VAR 0 9
10968: PUSH
10969: LD_VAR 0 2
10973: PPUSH
10974: LD_INT 22
10976: PUSH
10977: LD_VAR 0 1
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PUSH
10986: LD_INT 2
10988: PUSH
10989: LD_INT 30
10991: PUSH
10992: LD_INT 4
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 30
11001: PUSH
11002: LD_INT 5
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: PUSH
11014: LD_INT 24
11016: PUSH
11017: LD_INT 251
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: LIST
11028: PPUSH
11029: CALL_OW 70
11033: ST_TO_ADDR
// if barrackList > 0 then
11034: LD_VAR 0 9
11038: PUSH
11039: LD_INT 0
11041: GREATER
11042: IFFALSE 11190
// begin if turretList = 0 then
11044: LD_VAR 0 7
11048: PUSH
11049: LD_INT 0
11051: EQUAL
11052: IFFALSE 11094
// begin if soldiers_list > 0 then
11054: LD_VAR 0 6
11058: PUSH
11059: LD_INT 0
11061: GREATER
11062: IFFALSE 11092
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
11064: LD_VAR 0 6
11068: PPUSH
11069: LD_VAR 0 9
11073: PUSH
11074: LD_INT 1
11076: PPUSH
11077: LD_VAR 0 9
11081: PPUSH
11082: CALL_OW 12
11086: ARRAY
11087: PPUSH
11088: CALL_OW 120
// end else
11092: GO 11190
// begin for i in barrackList do
11094: LD_ADDR_VAR 0 4
11098: PUSH
11099: LD_VAR 0 9
11103: PUSH
11104: FOR_IN
11105: IFFALSE 11188
// begin insideUnits = UnitsInside ( i ) ;
11107: LD_ADDR_VAR 0 10
11111: PUSH
11112: LD_VAR 0 4
11116: PPUSH
11117: CALL_OW 313
11121: ST_TO_ADDR
// if insideUnits > 0 then
11122: LD_VAR 0 10
11126: PUSH
11127: LD_INT 0
11129: GREATER
11130: IFFALSE 11154
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
11132: LD_VAR 0 10
11136: PUSH
11137: LD_INT 1
11139: ARRAY
11140: PPUSH
11141: LD_VAR 0 7
11145: PUSH
11146: LD_INT 1
11148: ARRAY
11149: PPUSH
11150: CALL_OW 120
// if soldiers_list > 0 then
11154: LD_VAR 0 6
11158: PUSH
11159: LD_INT 0
11161: GREATER
11162: IFFALSE 11186
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
11164: LD_VAR 0 6
11168: PUSH
11169: LD_INT 1
11171: ARRAY
11172: PPUSH
11173: LD_VAR 0 7
11177: PUSH
11178: LD_INT 1
11180: ARRAY
11181: PPUSH
11182: CALL_OW 120
// end ;
11186: GO 11104
11188: POP
11189: POP
// end ; end ; end ;
11190: LD_VAR 0 3
11194: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11195: LD_INT 0
11197: PPUSH
11198: PPUSH
11199: PPUSH
11200: PPUSH
11201: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11202: LD_ADDR_VAR 0 6
11206: PUSH
11207: LD_INT 22
11209: PUSH
11210: LD_VAR 0 1
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 2
11221: PUSH
11222: LD_INT 30
11224: PUSH
11225: LD_INT 31
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: LD_INT 30
11234: PUSH
11235: LD_INT 32
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PUSH
11242: LD_INT 30
11244: PUSH
11245: LD_INT 33
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: LD_INT 30
11254: PUSH
11255: LD_INT 4
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 30
11264: PUSH
11265: LD_INT 5
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PPUSH
11284: CALL_OW 69
11288: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11289: LD_ADDR_VAR 0 7
11293: PUSH
11294: LD_INT 22
11296: PUSH
11297: LD_VAR 0 2
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 21
11308: PUSH
11309: LD_INT 3
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PUSH
11316: LD_INT 58
11318: PUSH
11319: EMPTY
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: LIST
11326: PPUSH
11327: CALL_OW 69
11331: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11332: LD_VAR 0 6
11336: PUSH
11337: LD_INT 0
11339: GREATER
11340: PUSH
11341: LD_VAR 0 7
11345: PUSH
11346: LD_INT 0
11348: GREATER
11349: AND
11350: IFFALSE 11420
// begin for i in turretsList do
11352: LD_ADDR_VAR 0 4
11356: PUSH
11357: LD_VAR 0 6
11361: PUSH
11362: FOR_IN
11363: IFFALSE 11418
// begin for j in enemyBuildings do
11365: LD_ADDR_VAR 0 5
11369: PUSH
11370: LD_VAR 0 7
11374: PUSH
11375: FOR_IN
11376: IFFALSE 11414
// begin if GetDistUnits ( i , j ) < 20 then
11378: LD_VAR 0 4
11382: PPUSH
11383: LD_VAR 0 5
11387: PPUSH
11388: CALL_OW 296
11392: PUSH
11393: LD_INT 20
11395: LESS
11396: IFFALSE 11412
// begin ComAttackUnit ( i , j ) ;
11398: LD_VAR 0 4
11402: PPUSH
11403: LD_VAR 0 5
11407: PPUSH
11408: CALL_OW 115
// end ; end ;
11412: GO 11375
11414: POP
11415: POP
// end ;
11416: GO 11362
11418: POP
11419: POP
// end ; end ;
11420: LD_VAR 0 3
11424: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
11425: LD_INT 0
11427: PPUSH
11428: PPUSH
// for i = 1 to vehCount do
11429: LD_ADDR_VAR 0 9
11433: PUSH
11434: DOUBLE
11435: LD_INT 1
11437: DEC
11438: ST_TO_ADDR
11439: LD_VAR 0 3
11443: PUSH
11444: FOR_TO
11445: IFFALSE 11492
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
11447: LD_VAR 0 2
11451: PPUSH
11452: LD_VAR 0 7
11456: PPUSH
11457: LD_VAR 0 5
11461: PPUSH
11462: LD_VAR 0 6
11466: PPUSH
11467: LD_VAR 0 4
11471: PUSH
11472: LD_INT 1
11474: PPUSH
11475: LD_VAR 0 4
11479: PPUSH
11480: CALL_OW 12
11484: ARRAY
11485: PPUSH
11486: CALL_OW 185
11490: GO 11444
11492: POP
11493: POP
// end ;
11494: LD_VAR 0 8
11498: RET
// export function AttackVehicles ( enemySide , oponent ) ; var i , j , vehiclesOK , target1 , target2 ; begin
11499: LD_INT 0
11501: PPUSH
11502: PPUSH
11503: PPUSH
11504: PPUSH
11505: PPUSH
11506: PPUSH
// if oponent = 1 then
11507: LD_VAR 0 2
11511: PUSH
11512: LD_INT 1
11514: EQUAL
11515: IFFALSE 11704
// begin repeat wait ( 0 0$1 ) ;
11517: LD_INT 35
11519: PPUSH
11520: CALL_OW 67
// for j in legionVehicles do
11524: LD_ADDR_VAR 0 5
11528: PUSH
11529: LD_EXP 54
11533: PUSH
11534: FOR_IN
11535: IFFALSE 11693
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11537: LD_ADDR_VAR 0 7
11541: PUSH
11542: LD_INT 22
11544: PUSH
11545: LD_VAR 0 1
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PPUSH
11554: CALL_OW 69
11558: PPUSH
11559: LD_VAR 0 5
11563: PPUSH
11564: CALL_OW 74
11568: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11569: LD_ADDR_VAR 0 8
11573: PUSH
11574: LD_INT 22
11576: PUSH
11577: LD_VAR 0 1
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 30
11588: PUSH
11589: LD_INT 32
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: LD_INT 59
11598: PUSH
11599: EMPTY
11600: LIST
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: EMPTY
11608: LIST
11609: PPUSH
11610: CALL_OW 69
11614: PPUSH
11615: LD_VAR 0 5
11619: PPUSH
11620: CALL_OW 74
11624: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11625: LD_VAR 0 5
11629: PPUSH
11630: LD_VAR 0 7
11634: PPUSH
11635: CALL_OW 296
11639: PUSH
11640: LD_INT 8
11642: PLUS
11643: PUSH
11644: LD_VAR 0 5
11648: PPUSH
11649: LD_VAR 0 8
11653: PPUSH
11654: CALL_OW 296
11658: LESS
11659: IFFALSE 11677
// ComAttackUnit ( j , target1 ) else
11661: LD_VAR 0 5
11665: PPUSH
11666: LD_VAR 0 7
11670: PPUSH
11671: CALL_OW 115
11675: GO 11691
// ComAttackUnit ( j , target2 ) ;
11677: LD_VAR 0 5
11681: PPUSH
11682: LD_VAR 0 8
11686: PPUSH
11687: CALL_OW 115
// end ;
11691: GO 11534
11693: POP
11694: POP
// until legionVehicles = [ ] ;
11695: LD_EXP 54
11699: PUSH
11700: EMPTY
11701: EQUAL
11702: IFFALSE 11517
// end ; if oponent = 2 then
11704: LD_VAR 0 2
11708: PUSH
11709: LD_INT 2
11711: EQUAL
11712: IFFALSE 11901
// begin repeat wait ( 0 0$1 ) ;
11714: LD_INT 35
11716: PPUSH
11717: CALL_OW 67
// for j in russianVehicles do
11721: LD_ADDR_VAR 0 5
11725: PUSH
11726: LD_EXP 60
11730: PUSH
11731: FOR_IN
11732: IFFALSE 11890
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11734: LD_ADDR_VAR 0 7
11738: PUSH
11739: LD_INT 22
11741: PUSH
11742: LD_VAR 0 1
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PPUSH
11751: CALL_OW 69
11755: PPUSH
11756: LD_VAR 0 5
11760: PPUSH
11761: CALL_OW 74
11765: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11766: LD_ADDR_VAR 0 8
11770: PUSH
11771: LD_INT 22
11773: PUSH
11774: LD_VAR 0 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 30
11785: PUSH
11786: LD_INT 32
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: LD_INT 59
11795: PUSH
11796: EMPTY
11797: LIST
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: PUSH
11804: EMPTY
11805: LIST
11806: PPUSH
11807: CALL_OW 69
11811: PPUSH
11812: LD_VAR 0 5
11816: PPUSH
11817: CALL_OW 74
11821: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11822: LD_VAR 0 5
11826: PPUSH
11827: LD_VAR 0 7
11831: PPUSH
11832: CALL_OW 296
11836: PUSH
11837: LD_INT 8
11839: PLUS
11840: PUSH
11841: LD_VAR 0 5
11845: PPUSH
11846: LD_VAR 0 8
11850: PPUSH
11851: CALL_OW 296
11855: LESS
11856: IFFALSE 11874
// ComAttackUnit ( j , target1 ) else
11858: LD_VAR 0 5
11862: PPUSH
11863: LD_VAR 0 7
11867: PPUSH
11868: CALL_OW 115
11872: GO 11888
// ComAttackUnit ( j , target2 ) ;
11874: LD_VAR 0 5
11878: PPUSH
11879: LD_VAR 0 8
11883: PPUSH
11884: CALL_OW 115
// end ;
11888: GO 11731
11890: POP
11891: POP
// until russianVehicles = [ ] ;
11892: LD_EXP 60
11896: PUSH
11897: EMPTY
11898: EQUAL
11899: IFFALSE 11714
// end ; if oponent = 3 then
11901: LD_VAR 0 2
11905: PUSH
11906: LD_INT 3
11908: EQUAL
11909: IFFALSE 12098
// begin repeat wait ( 0 0$1 ) ;
11911: LD_INT 35
11913: PPUSH
11914: CALL_OW 67
// for j in allianceVehicles do
11918: LD_ADDR_VAR 0 5
11922: PUSH
11923: LD_EXP 61
11927: PUSH
11928: FOR_IN
11929: IFFALSE 12087
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11931: LD_ADDR_VAR 0 7
11935: PUSH
11936: LD_INT 22
11938: PUSH
11939: LD_VAR 0 1
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PPUSH
11948: CALL_OW 69
11952: PPUSH
11953: LD_VAR 0 5
11957: PPUSH
11958: CALL_OW 74
11962: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11963: LD_ADDR_VAR 0 8
11967: PUSH
11968: LD_INT 22
11970: PUSH
11971: LD_VAR 0 1
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 30
11982: PUSH
11983: LD_INT 32
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 59
11992: PUSH
11993: EMPTY
11994: LIST
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: LIST
12000: PUSH
12001: EMPTY
12002: LIST
12003: PPUSH
12004: CALL_OW 69
12008: PPUSH
12009: LD_VAR 0 5
12013: PPUSH
12014: CALL_OW 74
12018: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12019: LD_VAR 0 5
12023: PPUSH
12024: LD_VAR 0 7
12028: PPUSH
12029: CALL_OW 296
12033: PUSH
12034: LD_INT 8
12036: PLUS
12037: PUSH
12038: LD_VAR 0 5
12042: PPUSH
12043: LD_VAR 0 8
12047: PPUSH
12048: CALL_OW 296
12052: LESS
12053: IFFALSE 12071
// ComAttackUnit ( j , target1 ) else
12055: LD_VAR 0 5
12059: PPUSH
12060: LD_VAR 0 7
12064: PPUSH
12065: CALL_OW 115
12069: GO 12085
// ComAttackUnit ( j , target2 ) ;
12071: LD_VAR 0 5
12075: PPUSH
12076: LD_VAR 0 8
12080: PPUSH
12081: CALL_OW 115
// end ;
12085: GO 11928
12087: POP
12088: POP
// until allianceVehicles = [ ] ;
12089: LD_EXP 61
12093: PUSH
12094: EMPTY
12095: EQUAL
12096: IFFALSE 11911
// end ; end ;
12098: LD_VAR 0 3
12102: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
12103: LD_INT 0
12105: PPUSH
12106: PPUSH
12107: PPUSH
12108: PPUSH
12109: PPUSH
12110: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12111: LD_ADDR_VAR 0 6
12115: PUSH
12116: LD_INT 22
12118: PUSH
12119: LD_VAR 0 1
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 25
12130: PUSH
12131: LD_INT 9
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PPUSH
12142: CALL_OW 69
12146: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12147: LD_ADDR_VAR 0 7
12151: PUSH
12152: LD_INT 81
12154: PUSH
12155: LD_VAR 0 1
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PUSH
12164: LD_INT 3
12166: PUSH
12167: LD_INT 21
12169: PUSH
12170: LD_INT 3
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PPUSH
12185: CALL_OW 69
12189: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12190: LD_ADDR_VAR 0 4
12194: PUSH
12195: LD_INT 1
12197: PPUSH
12198: LD_INT 3
12200: PPUSH
12201: CALL_OW 12
12205: ST_TO_ADDR
// for i = 1 to list do
12206: LD_ADDR_VAR 0 5
12210: PUSH
12211: DOUBLE
12212: LD_INT 1
12214: DEC
12215: ST_TO_ADDR
12216: LD_VAR 0 6
12220: PUSH
12221: FOR_TO
12222: IFFALSE 12424
// for ta in filter do
12224: LD_ADDR_VAR 0 3
12228: PUSH
12229: LD_VAR 0 7
12233: PUSH
12234: FOR_IN
12235: IFFALSE 12420
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
12237: LD_VAR 0 6
12241: PUSH
12242: LD_VAR 0 5
12246: ARRAY
12247: PPUSH
12248: LD_VAR 0 3
12252: PPUSH
12253: CALL_OW 296
12257: PUSH
12258: LD_INT 15
12260: LESSEQUAL
12261: IFFALSE 12418
// begin case c of 1 :
12263: LD_VAR 0 4
12267: PUSH
12268: LD_INT 1
12270: DOUBLE
12271: EQUAL
12272: IFTRUE 12276
12274: GO 12314
12276: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
12277: LD_VAR 0 6
12281: PUSH
12282: LD_VAR 0 5
12286: ARRAY
12287: PPUSH
12288: LD_VAR 0 3
12292: PPUSH
12293: CALL_OW 250
12297: PPUSH
12298: LD_VAR 0 3
12302: PPUSH
12303: CALL_OW 251
12307: PPUSH
12308: CALL_OW 154
12312: GO 12418
12314: LD_INT 2
12316: DOUBLE
12317: EQUAL
12318: IFTRUE 12322
12320: GO 12386
12322: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
12323: LD_VAR 0 6
12327: PUSH
12328: LD_VAR 0 5
12332: ARRAY
12333: PPUSH
12334: LD_VAR 0 3
12338: PPUSH
12339: CALL_OW 250
12343: PUSH
12344: LD_INT 1
12346: NEG
12347: PPUSH
12348: LD_INT 1
12350: PPUSH
12351: CALL_OW 12
12355: PLUS
12356: PPUSH
12357: LD_VAR 0 3
12361: PPUSH
12362: CALL_OW 251
12366: PUSH
12367: LD_INT 1
12369: NEG
12370: PPUSH
12371: LD_INT 1
12373: PPUSH
12374: CALL_OW 12
12378: PLUS
12379: PPUSH
12380: CALL_OW 153
12384: GO 12418
12386: LD_INT 3
12388: DOUBLE
12389: EQUAL
12390: IFTRUE 12394
12392: GO 12417
12394: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
12395: LD_VAR 0 6
12399: PUSH
12400: LD_VAR 0 5
12404: ARRAY
12405: PPUSH
12406: LD_VAR 0 3
12410: PPUSH
12411: CALL_OW 115
12415: GO 12418
12417: POP
// end ; end ;
12418: GO 12234
12420: POP
12421: POP
12422: GO 12221
12424: POP
12425: POP
// end ;
12426: LD_VAR 0 2
12430: RET
// export function TimeLapsersAI ( side , enemy ) ; var j , nearUnit , vehs ; begin
12431: LD_INT 0
12433: PPUSH
12434: PPUSH
12435: PPUSH
12436: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 then
12437: LD_INT 22
12439: PUSH
12440: LD_VAR 0 1
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 21
12451: PUSH
12452: LD_INT 2
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: LD_INT 34
12461: PUSH
12462: LD_INT 49
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: LIST
12473: PPUSH
12474: CALL_OW 69
12478: PUSH
12479: LD_INT 0
12481: EQUAL
12482: IFFALSE 12486
// exit ;
12484: GO 12741
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
12486: LD_INT 22
12488: PUSH
12489: LD_VAR 0 1
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 21
12500: PUSH
12501: LD_INT 2
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PUSH
12508: LD_INT 34
12510: PUSH
12511: LD_INT 49
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: LIST
12522: PPUSH
12523: CALL_OW 69
12527: PUSH
12528: LD_INT 0
12530: GREATER
12531: IFFALSE 12741
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
12533: LD_ADDR_VAR 0 6
12537: PUSH
12538: LD_INT 22
12540: PUSH
12541: LD_VAR 0 1
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PUSH
12550: LD_INT 21
12552: PUSH
12553: LD_INT 2
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 34
12562: PUSH
12563: LD_INT 49
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: LIST
12574: PPUSH
12575: CALL_OW 69
12579: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12580: LD_INT 105
12582: PPUSH
12583: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
12587: LD_ADDR_VAR 0 4
12591: PUSH
12592: LD_VAR 0 6
12596: PPUSH
12597: LD_INT 3
12599: PUSH
12600: LD_INT 60
12602: PUSH
12603: EMPTY
12604: LIST
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PPUSH
12610: CALL_OW 72
12614: PUSH
12615: FOR_IN
12616: IFFALSE 12729
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , enemy ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
12618: LD_ADDR_VAR 0 5
12622: PUSH
12623: LD_INT 81
12625: PUSH
12626: LD_VAR 0 1
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PUSH
12635: LD_INT 101
12637: PUSH
12638: LD_VAR 0 2
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: LD_INT 2
12649: PUSH
12650: LD_INT 21
12652: PUSH
12653: LD_INT 1
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 3
12662: PUSH
12663: LD_INT 58
12665: PUSH
12666: EMPTY
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: LIST
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: LIST
12682: PPUSH
12683: CALL_OW 69
12687: PPUSH
12688: LD_VAR 0 4
12692: PPUSH
12693: CALL_OW 74
12697: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
12698: LD_VAR 0 4
12702: PPUSH
12703: LD_VAR 0 5
12707: PPUSH
12708: CALL_OW 250
12712: PPUSH
12713: LD_VAR 0 5
12717: PPUSH
12718: CALL_OW 251
12722: PPUSH
12723: CALL_OW 111
// end ;
12727: GO 12615
12729: POP
12730: POP
// until vehs = 0 ;
12731: LD_VAR 0 6
12735: PUSH
12736: LD_INT 0
12738: EQUAL
12739: IFFALSE 12533
// end ; end_of_file
12741: LD_VAR 0 3
12745: RET
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
12746: LD_VAR 0 1
12750: PUSH
12751: LD_INT 1
12753: EQUAL
12754: PUSH
12755: LD_VAR 0 2
12759: PUSH
12760: LD_INT 4
12762: EQUAL
12763: AND
12764: IFFALSE 12773
// YouLost ( text ) ;
12766: LD_STRING text
12768: PPUSH
12769: CALL_OW 104
// end ;
12773: PPOPN 2
12775: END
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
12776: LD_VAR 0 1
12780: PUSH
12781: LD_INT 235
12783: EQUAL
12784: PUSH
12785: LD_VAR 0 2
12789: PPUSH
12790: CALL_OW 255
12794: PUSH
12795: LD_INT 4
12797: EQUAL
12798: AND
12799: IFFALSE 12875
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
12801: LD_INT 235
12803: PPUSH
12804: LD_INT 84
12806: PPUSH
12807: LD_INT 1
12809: PPUSH
12810: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
12814: LD_INT 235
12816: PPUSH
12817: LD_INT 68
12819: PPUSH
12820: LD_INT 100
12822: PPUSH
12823: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
12827: LD_INT 235
12829: PPUSH
12830: CALL_OW 219
// AddComMoveXY ( PowellCargo , 48 , 69 ) ;
12834: LD_INT 235
12836: PPUSH
12837: LD_INT 48
12839: PPUSH
12840: LD_INT 69
12842: PPUSH
12843: CALL_OW 171
// AddComMoveXY ( PowellCargo , 39 , 61 ) ;
12847: LD_INT 235
12849: PPUSH
12850: LD_INT 39
12852: PPUSH
12853: LD_INT 61
12855: PPUSH
12856: CALL_OW 171
// wait ( 0 0$10 ) ;
12860: LD_INT 350
12862: PPUSH
12863: CALL_OW 67
// powellUnloadCargo = 1 ;
12867: LD_ADDR_EXP 69
12871: PUSH
12872: LD_INT 1
12874: ST_TO_ADDR
// end ; end ;
12875: PPOPN 2
12877: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
12878: LD_INT 0
12880: PPUSH
12881: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
12882: LD_ADDR_VAR 0 3
12886: PUSH
12887: LD_INT 22
12889: PUSH
12890: LD_INT 4
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: PUSH
12897: LD_INT 21
12899: PUSH
12900: LD_INT 1
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PUSH
12907: LD_INT 56
12909: PUSH
12910: EMPTY
12911: LIST
12912: PUSH
12913: LD_INT 3
12915: PUSH
12916: LD_INT 60
12918: PUSH
12919: EMPTY
12920: LIST
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: PPUSH
12932: CALL_OW 69
12936: PUSH
12937: LD_EXP 17
12941: PUSH
12942: EMPTY
12943: LIST
12944: DIFF
12945: ST_TO_ADDR
// if GetSide ( building ) = 4 then
12946: LD_VAR 0 1
12950: PPUSH
12951: CALL_OW 255
12955: PUSH
12956: LD_INT 4
12958: EQUAL
12959: IFFALSE 13090
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
12961: LD_INT 22
12963: PUSH
12964: LD_INT 4
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PUSH
12971: LD_INT 30
12973: PUSH
12974: LD_INT 8
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PPUSH
12985: CALL_OW 69
12989: PUSH
12990: LD_INT 1
12992: EQUAL
12993: IFFALSE 13090
// begin for i = 1 to 3 do
12995: LD_ADDR_VAR 0 2
12999: PUSH
13000: DOUBLE
13001: LD_INT 1
13003: DEC
13004: ST_TO_ADDR
13005: LD_INT 3
13007: PUSH
13008: FOR_TO
13009: IFFALSE 13073
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
13011: LD_VAR 0 3
13015: PUSH
13016: LD_VAR 0 2
13020: ARRAY
13021: PPUSH
13022: LD_INT 3
13024: PUSH
13025: LD_INT 25
13027: PUSH
13028: LD_INT 2
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PPUSH
13039: CALL_OW 72
13043: PPUSH
13044: LD_VAR 0 1
13048: PPUSH
13049: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
13053: LD_VAR 0 3
13057: PUSH
13058: LD_VAR 0 2
13062: ARRAY
13063: PPUSH
13064: LD_INT 4
13066: PPUSH
13067: CALL_OW 183
// end ;
13071: GO 13008
13073: POP
13074: POP
// ResAllTechs ( 4 , building , 1 ) ;
13075: LD_INT 4
13077: PPUSH
13078: LD_VAR 0 1
13082: PPUSH
13083: LD_INT 1
13085: PPUSH
13086: CALL 9547 0 3
// end ; if GetSide ( building ) = 8 then
13090: LD_VAR 0 1
13094: PPUSH
13095: CALL_OW 255
13099: PUSH
13100: LD_INT 8
13102: EQUAL
13103: IFFALSE 13288
// begin if GetNation ( building ) = 3 then
13105: LD_VAR 0 1
13109: PPUSH
13110: CALL_OW 248
13114: PUSH
13115: LD_INT 3
13117: EQUAL
13118: IFFALSE 13288
// begin AddComMoveXY ( Kozlov , 73 , 16 ) ;
13120: LD_EXP 35
13124: PPUSH
13125: LD_INT 73
13127: PPUSH
13128: LD_INT 16
13130: PPUSH
13131: CALL_OW 171
// AddComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
13135: LD_EXP 35
13139: PPUSH
13140: LD_INT 21
13142: PPUSH
13143: LD_INT 74
13145: PPUSH
13146: LD_INT 12
13148: PPUSH
13149: LD_INT 1
13151: PPUSH
13152: CALL_OW 205
// wait ( 0 0$2 ) ;
13156: LD_INT 70
13158: PPUSH
13159: CALL_OW 67
// AddComEnterUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] ) ;
13163: LD_EXP 35
13167: PPUSH
13168: LD_INT 22
13170: PUSH
13171: LD_INT 8
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 30
13180: PUSH
13181: LD_INT 3
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 23
13190: PUSH
13191: LD_INT 3
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: PPUSH
13203: CALL_OW 69
13207: PUSH
13208: LD_INT 1
13210: ARRAY
13211: PPUSH
13212: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
13216: LD_EXP 35
13220: PPUSH
13221: LD_INT 3
13223: PPUSH
13224: CALL_OW 183
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] , ru_heavy_tracked , 3 , 3 , ru_siberium_rocket ) ;
13228: LD_INT 22
13230: PUSH
13231: LD_INT 8
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 30
13240: PUSH
13241: LD_INT 3
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: LD_INT 23
13250: PUSH
13251: LD_INT 3
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: LIST
13262: PPUSH
13263: CALL_OW 69
13267: PUSH
13268: LD_INT 1
13270: ARRAY
13271: PPUSH
13272: LD_INT 24
13274: PPUSH
13275: LD_INT 3
13277: PPUSH
13278: LD_INT 3
13280: PPUSH
13281: LD_INT 48
13283: PPUSH
13284: CALL_OW 185
// end ; end ; end ;
13288: PPOPN 3
13290: END
// on BuildingComplete ( building ) do var powellPeople ;
13291: LD_INT 0
13293: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
13294: LD_VAR 0 1
13298: PPUSH
13299: CALL_OW 255
13303: PUSH
13304: LD_INT 4
13306: EQUAL
13307: PUSH
13308: LD_VAR 0 1
13312: PPUSH
13313: CALL_OW 266
13317: PUSH
13318: LD_INT 17
13320: EQUAL
13321: AND
13322: IFFALSE 13604
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13324: LD_ADDR_VAR 0 2
13328: PUSH
13329: LD_INT 22
13331: PUSH
13332: LD_INT 4
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: LD_INT 21
13341: PUSH
13342: LD_INT 1
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: PUSH
13349: LD_INT 56
13351: PUSH
13352: EMPTY
13353: LIST
13354: PUSH
13355: LD_INT 3
13357: PUSH
13358: LD_INT 60
13360: PUSH
13361: EMPTY
13362: LIST
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: PPUSH
13374: CALL_OW 69
13378: PUSH
13379: LD_EXP 17
13383: PUSH
13384: EMPTY
13385: LIST
13386: DIFF
13387: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
13388: LD_INT 22
13390: PUSH
13391: LD_INT 4
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: LD_INT 21
13400: PUSH
13401: LD_INT 3
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: LD_INT 30
13410: PUSH
13411: LD_INT 32
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: LIST
13422: PPUSH
13423: CALL_OW 69
13427: PUSH
13428: LD_INT 1
13430: ARRAY
13431: PPUSH
13432: LD_INT 6
13434: PPUSH
13435: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
13439: LD_INT 22
13441: PUSH
13442: LD_INT 4
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 21
13451: PUSH
13452: LD_INT 3
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: LD_INT 30
13461: PUSH
13462: LD_INT 32
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: PPUSH
13474: CALL_OW 69
13478: PUSH
13479: LD_INT 2
13481: ARRAY
13482: PPUSH
13483: LD_INT 5
13485: PPUSH
13486: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
13490: LD_VAR 0 2
13494: PUSH
13495: LD_INT 1
13497: ARRAY
13498: PPUSH
13499: LD_INT 22
13501: PUSH
13502: LD_INT 4
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: PUSH
13509: LD_INT 21
13511: PUSH
13512: LD_INT 3
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 30
13521: PUSH
13522: LD_INT 32
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: LIST
13533: PPUSH
13534: CALL_OW 69
13538: PUSH
13539: LD_INT 1
13541: ARRAY
13542: PPUSH
13543: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
13547: LD_VAR 0 2
13551: PUSH
13552: LD_INT 2
13554: ARRAY
13555: PPUSH
13556: LD_INT 22
13558: PUSH
13559: LD_INT 4
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PUSH
13566: LD_INT 21
13568: PUSH
13569: LD_INT 3
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: LD_INT 30
13578: PUSH
13579: LD_INT 32
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: LIST
13590: PPUSH
13591: CALL_OW 69
13595: PUSH
13596: LD_INT 2
13598: ARRAY
13599: PPUSH
13600: CALL_OW 120
// end ; if GetSide ( building ) = 8 then
13604: LD_VAR 0 1
13608: PPUSH
13609: CALL_OW 255
13613: PUSH
13614: LD_INT 8
13616: EQUAL
13617: IFFALSE 13643
// begin if GetBType ( building ) = b_workshop then
13619: LD_VAR 0 1
13623: PPUSH
13624: CALL_OW 266
13628: PUSH
13629: LD_INT 2
13631: EQUAL
13632: IFFALSE 13643
// ComUpgrade ( building ) ;
13634: LD_VAR 0 1
13638: PPUSH
13639: CALL_OW 146
// end ; if GetSide ( building ) = 3 then
13643: LD_VAR 0 1
13647: PPUSH
13648: CALL_OW 255
13652: PUSH
13653: LD_INT 3
13655: EQUAL
13656: IFFALSE 13730
// begin russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13658: LD_ADDR_EXP 93
13662: PUSH
13663: LD_EXP 93
13667: PPUSH
13668: LD_INT 1
13670: PPUSH
13671: CALL_OW 3
13675: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13676: LD_ADDR_EXP 93
13680: PUSH
13681: LD_EXP 93
13685: PPUSH
13686: LD_INT 1
13688: PPUSH
13689: CALL_OW 3
13693: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13694: LD_ADDR_EXP 93
13698: PUSH
13699: LD_EXP 93
13703: PPUSH
13704: LD_INT 1
13706: PPUSH
13707: CALL_OW 3
13711: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13712: LD_ADDR_EXP 93
13716: PUSH
13717: LD_EXP 93
13721: PPUSH
13722: LD_INT 1
13724: PPUSH
13725: CALL_OW 3
13729: ST_TO_ADDR
// end ; if GetSide ( building ) = 8 then
13730: LD_VAR 0 1
13734: PPUSH
13735: CALL_OW 255
13739: PUSH
13740: LD_INT 8
13742: EQUAL
13743: IFFALSE 13817
// begin legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13745: LD_ADDR_EXP 92
13749: PUSH
13750: LD_EXP 92
13754: PPUSH
13755: LD_INT 1
13757: PPUSH
13758: CALL_OW 3
13762: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13763: LD_ADDR_EXP 92
13767: PUSH
13768: LD_EXP 92
13772: PPUSH
13773: LD_INT 1
13775: PPUSH
13776: CALL_OW 3
13780: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13781: LD_ADDR_EXP 92
13785: PUSH
13786: LD_EXP 92
13790: PPUSH
13791: LD_INT 1
13793: PPUSH
13794: CALL_OW 3
13798: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13799: LD_ADDR_EXP 92
13803: PUSH
13804: LD_EXP 92
13808: PPUSH
13809: LD_INT 1
13811: PPUSH
13812: CALL_OW 3
13816: ST_TO_ADDR
// end ; if GetSide ( building ) = 7 then
13817: LD_VAR 0 1
13821: PPUSH
13822: CALL_OW 255
13826: PUSH
13827: LD_INT 7
13829: EQUAL
13830: IFFALSE 13904
// begin allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
13832: LD_ADDR_EXP 94
13836: PUSH
13837: LD_EXP 94
13841: PPUSH
13842: LD_INT 1
13844: PPUSH
13845: CALL_OW 3
13849: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
13850: LD_ADDR_EXP 94
13854: PUSH
13855: LD_EXP 94
13859: PPUSH
13860: LD_INT 1
13862: PPUSH
13863: CALL_OW 3
13867: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
13868: LD_ADDR_EXP 94
13872: PUSH
13873: LD_EXP 94
13877: PPUSH
13878: LD_INT 1
13880: PPUSH
13881: CALL_OW 3
13885: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
13886: LD_ADDR_EXP 94
13890: PUSH
13891: LD_EXP 94
13895: PPUSH
13896: LD_INT 1
13898: PPUSH
13899: CALL_OW 3
13903: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
13904: LD_VAR 0 1
13908: PPUSH
13909: CALL_OW 255
13913: PUSH
13914: LD_INT 3
13916: EQUAL
13917: IFFALSE 13984
// begin if GetBType ( building ) = b_bunker or GetBType ( building ) = b_turret then
13919: LD_VAR 0 1
13923: PPUSH
13924: CALL_OW 266
13928: PUSH
13929: LD_INT 32
13931: EQUAL
13932: PUSH
13933: LD_VAR 0 1
13937: PPUSH
13938: CALL_OW 266
13942: PUSH
13943: LD_INT 33
13945: EQUAL
13946: OR
13947: IFFALSE 13984
// AddComPlaceWeapon ( building , [ 46 , 47 , 45 ] [ Rand ( 1 , 3 ) ] ) ;
13949: LD_VAR 0 1
13953: PPUSH
13954: LD_INT 46
13956: PUSH
13957: LD_INT 47
13959: PUSH
13960: LD_INT 45
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 1
13970: PPUSH
13971: LD_INT 3
13973: PPUSH
13974: CALL_OW 12
13978: ARRAY
13979: PPUSH
13980: CALL_OW 208
// end ; if GetSide ( building ) = 8 and GetBType ( building ) = b_bunker then
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 255
13993: PUSH
13994: LD_INT 8
13996: EQUAL
13997: PUSH
13998: LD_VAR 0 1
14002: PPUSH
14003: CALL_OW 266
14007: PUSH
14008: LD_INT 32
14010: EQUAL
14011: AND
14012: IFFALSE 14045
// begin AddComPlaceWeapon ( building , [ 28 , 27 ] [ Rand ( 1 , 2 ) ] ) ;
14014: LD_VAR 0 1
14018: PPUSH
14019: LD_INT 28
14021: PUSH
14022: LD_INT 27
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 1
14031: PPUSH
14032: LD_INT 2
14034: PPUSH
14035: CALL_OW 12
14039: ARRAY
14040: PPUSH
14041: CALL_OW 208
// end ; end ;
14045: PPOPN 2
14047: END
// on EnterBuilding ( building , human ) do begin end ;
14048: PPOPN 2
14050: END
// on BehemothConstructed ( vehicle ) do begin if GetSide ( vehicle ) = 6 then
14051: LD_VAR 0 1
14055: PPUSH
14056: CALL_OW 255
14060: PUSH
14061: LD_INT 6
14063: EQUAL
14064: IFFALSE 14082
// ruBehs = ruBehs ^ vehicle ;
14066: LD_ADDR_EXP 58
14070: PUSH
14071: LD_EXP 58
14075: PUSH
14076: LD_VAR 0 1
14080: ADD
14081: ST_TO_ADDR
// end ;
14082: PPOPN 1
14084: END
// on VehicleConstructed ( vehicle , building ) do var legionBomb ;
14085: LD_INT 0
14087: PPUSH
// begin if vehicle = powellVeh then
14088: LD_VAR 0 1
14092: PUSH
14093: LD_EXP 72
14097: EQUAL
14098: IFFALSE 14114
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
14100: LD_VAR 0 1
14104: PPUSH
14105: CALL_OW 313
14109: PPUSH
14110: CALL_OW 121
// if GetSide ( vehicle ) = 4 then
14114: LD_VAR 0 1
14118: PPUSH
14119: CALL_OW 255
14123: PUSH
14124: LD_INT 4
14126: EQUAL
14127: IFFALSE 14144
// AddComMoveXY ( vehicle , 58 , 63 ) ;
14129: LD_VAR 0 1
14133: PPUSH
14134: LD_INT 58
14136: PPUSH
14137: LD_INT 63
14139: PPUSH
14140: CALL_OW 171
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
14144: LD_VAR 0 1
14148: PPUSH
14149: CALL_OW 255
14153: PUSH
14154: LD_INT 4
14156: EQUAL
14157: PUSH
14158: LD_EXP 68
14162: PUSH
14163: LD_INT 2
14165: EQUAL
14166: AND
14167: PUSH
14168: LD_VAR 0 1
14172: PPUSH
14173: CALL_OW 264
14177: PUSH
14178: LD_INT 6
14180: EQUAL
14181: AND
14182: IFFALSE 14236
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
14184: LD_EXP 65
14188: PUSH
14189: LD_INT 5
14191: ARRAY
14192: PPUSH
14193: CALL_OW 122
// wait ( 0 0$1 ) ;
14197: LD_INT 35
14199: PPUSH
14200: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
14204: LD_EXP 65
14208: PUSH
14209: LD_INT 5
14211: ARRAY
14212: PPUSH
14213: LD_INT 85
14215: PPUSH
14216: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
14220: LD_EXP 65
14224: PUSH
14225: LD_INT 5
14227: ARRAY
14228: PPUSH
14229: LD_INT 3
14231: PPUSH
14232: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
14236: LD_VAR 0 1
14240: PPUSH
14241: CALL_OW 255
14245: PUSH
14246: LD_INT 4
14248: EQUAL
14249: PUSH
14250: LD_EXP 68
14254: PUSH
14255: LD_INT 2
14257: EQUAL
14258: AND
14259: PUSH
14260: LD_VAR 0 1
14264: PPUSH
14265: CALL_OW 264
14269: PUSH
14270: LD_INT 3
14272: EQUAL
14273: AND
14274: IFFALSE 14301
// begin powellVeh = vehicle ;
14276: LD_ADDR_EXP 72
14280: PUSH
14281: LD_VAR 0 1
14285: ST_TO_ADDR
// ComMoveXY ( vehicle , 49 , 74 ) ;
14286: LD_VAR 0 1
14290: PPUSH
14291: LD_INT 49
14293: PPUSH
14294: LD_INT 74
14296: PPUSH
14297: CALL_OW 111
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 2 and GetType ( vehicle ) = unit_vehicle then
14301: LD_VAR 0 1
14305: PPUSH
14306: CALL_OW 255
14310: PUSH
14311: LD_INT 8
14313: EQUAL
14314: PUSH
14315: LD_VAR 0 1
14319: PPUSH
14320: CALL_OW 248
14324: PUSH
14325: LD_INT 2
14327: EQUAL
14328: AND
14329: PUSH
14330: LD_VAR 0 1
14334: PPUSH
14335: CALL_OW 247
14339: PUSH
14340: LD_INT 2
14342: EQUAL
14343: AND
14344: IFFALSE 14380
// begin legionVehicles = legionVehicles ^ vehicle ;
14346: LD_ADDR_EXP 54
14350: PUSH
14351: LD_EXP 54
14355: PUSH
14356: LD_VAR 0 1
14360: ADD
14361: ST_TO_ADDR
// ComLinkTo ( vehicle , arControler [ 1 ] ) ;
14362: LD_VAR 0 1
14366: PPUSH
14367: LD_EXP 55
14371: PUSH
14372: LD_INT 1
14374: ARRAY
14375: PPUSH
14376: CALL_OW 135
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 3 then
14380: LD_VAR 0 1
14384: PPUSH
14385: CALL_OW 255
14389: PUSH
14390: LD_INT 8
14392: EQUAL
14393: PUSH
14394: LD_VAR 0 1
14398: PPUSH
14399: CALL_OW 248
14403: PUSH
14404: LD_INT 3
14406: EQUAL
14407: AND
14408: IFFALSE 14699
// begin ChangeMissionObjectives ( MlegionDel ) ;
14410: LD_STRING MlegionDel
14412: PPUSH
14413: CALL_OW 337
// legionBomb = rand ( 1 , 2 ) ;
14417: LD_ADDR_VAR 0 3
14421: PUSH
14422: LD_INT 1
14424: PPUSH
14425: LD_INT 2
14427: PPUSH
14428: CALL_OW 12
14432: ST_TO_ADDR
// legionRocket = vehicle ;
14433: LD_ADDR_EXP 98
14437: PUSH
14438: LD_VAR 0 1
14442: ST_TO_ADDR
// DialogueOn ;
14443: CALL_OW 6
// if legionBomb = 1 then
14447: LD_VAR 0 3
14451: PUSH
14452: LD_INT 1
14454: EQUAL
14455: IFFALSE 14579
// begin if Kurt then
14457: LD_EXP 30
14461: IFFALSE 14477
// Say ( Kurt , D12-Kurt-1 ) else
14463: LD_EXP 30
14467: PPUSH
14468: LD_STRING D12-Kurt-1
14470: PPUSH
14471: CALL_OW 88
14475: GO 14539
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12-Kurt-1 ) ;
14477: LD_INT 22
14479: PUSH
14480: LD_INT 8
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 21
14489: PUSH
14490: LD_INT 1
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 25
14499: PUSH
14500: LD_INT 1
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: LD_INT 26
14509: PUSH
14510: LD_INT 1
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 69
14527: PUSH
14528: LD_INT 2
14530: ARRAY
14531: PPUSH
14532: LD_STRING D12-Kurt-1
14534: PPUSH
14535: CALL_OW 88
// DialogueOff ;
14539: CALL_OW 7
// wait ( 0 0$3 ) ;
14543: LD_INT 105
14545: PPUSH
14546: CALL_OW 67
// AddComAttackPlace ( legionRocket , GetX ( JMM ) , GetY ( JMM ) ) ;
14550: LD_EXP 98
14554: PPUSH
14555: LD_EXP 1
14559: PPUSH
14560: CALL_OW 250
14564: PPUSH
14565: LD_EXP 1
14569: PPUSH
14570: CALL_OW 251
14574: PPUSH
14575: CALL_OW 176
// end ; if legionBomb = 2 then
14579: LD_VAR 0 3
14583: PUSH
14584: LD_INT 2
14586: EQUAL
14587: IFFALSE 14699
// begin if Kurt then
14589: LD_EXP 30
14593: IFFALSE 14609
// Say ( Kurt , D12a-Kurt-1 ) else
14595: LD_EXP 30
14599: PPUSH
14600: LD_STRING D12a-Kurt-1
14602: PPUSH
14603: CALL_OW 88
14607: GO 14671
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12a-Kurt-11 ) ;
14609: LD_INT 22
14611: PUSH
14612: LD_INT 8
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PUSH
14619: LD_INT 21
14621: PUSH
14622: LD_INT 1
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: LD_INT 25
14631: PUSH
14632: LD_INT 1
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: LD_INT 26
14641: PUSH
14642: LD_INT 1
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: PPUSH
14655: CALL_OW 69
14659: PUSH
14660: LD_INT 2
14662: ARRAY
14663: PPUSH
14664: LD_STRING D12a-Kurt-11
14666: PPUSH
14667: CALL_OW 88
// SayRadio ( Roth , D12a-Roth-1 ) ;
14671: LD_EXP 28
14675: PPUSH
14676: LD_STRING D12a-Roth-1
14678: PPUSH
14679: CALL_OW 94
// DialogueOff ;
14683: CALL_OW 7
// ComAttackUnit ( legionRocket , RuDep2 ) ;
14687: LD_EXP 98
14691: PPUSH
14692: LD_INT 23
14694: PPUSH
14695: CALL_OW 115
// end ; end ; if GetSide ( vehicle ) = 3 and GetNation ( vehicle ) = 3 and GetType ( vehicle ) = unit_vehicle then
14699: LD_VAR 0 1
14703: PPUSH
14704: CALL_OW 255
14708: PUSH
14709: LD_INT 3
14711: EQUAL
14712: PUSH
14713: LD_VAR 0 1
14717: PPUSH
14718: CALL_OW 248
14722: PUSH
14723: LD_INT 3
14725: EQUAL
14726: AND
14727: PUSH
14728: LD_VAR 0 1
14732: PPUSH
14733: CALL_OW 247
14737: PUSH
14738: LD_INT 2
14740: EQUAL
14741: AND
14742: IFFALSE 14760
// RussianVehicles = RussianVehicles ^ vehicle ;
14744: LD_ADDR_EXP 60
14748: PUSH
14749: LD_EXP 60
14753: PUSH
14754: LD_VAR 0 1
14758: ADD
14759: ST_TO_ADDR
// if GetSide ( vehicle ) = 7 and GetType ( vehicle ) = unit_vehicle then
14760: LD_VAR 0 1
14764: PPUSH
14765: CALL_OW 255
14769: PUSH
14770: LD_INT 7
14772: EQUAL
14773: PUSH
14774: LD_VAR 0 1
14778: PPUSH
14779: CALL_OW 247
14783: PUSH
14784: LD_INT 2
14786: EQUAL
14787: AND
14788: IFFALSE 14847
// begin AllianceVehicles = AllianceVehicles ^ vehicle ;
14790: LD_ADDR_EXP 61
14794: PUSH
14795: LD_EXP 61
14799: PUSH
14800: LD_VAR 0 1
14804: ADD
14805: ST_TO_ADDR
// if GetControl ( vehicle ) = 2 then
14806: LD_VAR 0 1
14810: PPUSH
14811: CALL_OW 263
14815: PUSH
14816: LD_INT 2
14818: EQUAL
14819: IFFALSE 14847
// ComLinkTo ( vehicle , allianceControler [ rand ( 1 , 3 ) ] ) ;
14821: LD_VAR 0 1
14825: PPUSH
14826: LD_EXP 62
14830: PUSH
14831: LD_INT 1
14833: PPUSH
14834: LD_INT 3
14836: PPUSH
14837: CALL_OW 12
14841: ARRAY
14842: PPUSH
14843: CALL_OW 135
// end ; end ;
14847: PPOPN 3
14849: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
14850: LD_VAR 0 1
14854: PPUSH
14855: CALL_OW 255
14859: PUSH
14860: LD_INT 4
14862: EQUAL
14863: PUSH
14864: LD_EXP 68
14868: PUSH
14869: LD_INT 1
14871: EQUAL
14872: AND
14873: IFFALSE 14976
// begin ComEnterUnit ( human , AmFact ) ;
14875: LD_VAR 0 2
14879: PPUSH
14880: LD_INT 85
14882: PPUSH
14883: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
14887: LD_VAR 0 2
14891: PPUSH
14892: CALL_OW 258
14896: PUSH
14897: LD_INT 1
14899: EQUAL
14900: PUSH
14901: LD_EXP 101
14905: PUSH
14906: LD_INT 0
14908: EQUAL
14909: AND
14910: IFFALSE 14976
// begin blockEvent1 = 1 ;
14912: LD_ADDR_EXP 101
14916: PUSH
14917: LD_INT 1
14919: ST_TO_ADDR
// startAttacks = 1 ;
14920: LD_ADDR_EXP 71
14924: PUSH
14925: LD_INT 1
14927: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
14928: LD_VAR 0 2
14932: PPUSH
14933: LD_STRING D4a-Sol1-1
14935: PPUSH
14936: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
14940: LD_EXP 17
14944: PPUSH
14945: LD_STRING D4a-Pow-1
14947: PPUSH
14948: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
14952: LD_VAR 0 2
14956: PPUSH
14957: LD_STRING D4a-Sol1-2
14959: PPUSH
14960: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
14964: LD_EXP 17
14968: PPUSH
14969: LD_STRING D4a-Pow-2
14971: PPUSH
14972: CALL_OW 88
// end ; end ; end ;
14976: PPOPN 2
14978: END
// on UnitDestroyed ( unit ) do var i ;
14979: LD_INT 0
14981: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14982: LD_VAR 0 1
14986: PPUSH
14987: CALL_OW 255
14991: PUSH
14992: LD_INT 1
14994: EQUAL
14995: PUSH
14996: LD_VAR 0 1
15000: PPUSH
15001: CALL_OW 247
15005: PUSH
15006: LD_INT 1
15008: EQUAL
15009: AND
15010: IFFALSE 15026
// unitLost = unitLost + 1 ;
15012: LD_ADDR_EXP 97
15016: PUSH
15017: LD_EXP 97
15021: PUSH
15022: LD_INT 1
15024: PLUS
15025: ST_TO_ADDR
// if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
15026: LD_VAR 0 1
15030: PPUSH
15031: CALL_OW 255
15035: PUSH
15036: LD_INT 4
15038: EQUAL
15039: PUSH
15040: LD_VAR 0 1
15044: PPUSH
15045: CALL_OW 247
15049: PUSH
15050: LD_INT 1
15052: EQUAL
15053: AND
15054: IFFALSE 15104
// begin for i in amUnitsAttack do
15056: LD_ADDR_VAR 0 2
15060: PUSH
15061: LD_EXP 65
15065: PUSH
15066: FOR_IN
15067: IFFALSE 15102
// if i = unit then
15069: LD_VAR 0 2
15073: PUSH
15074: LD_VAR 0 1
15078: EQUAL
15079: IFFALSE 15100
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
15081: LD_ADDR_EXP 65
15085: PUSH
15086: LD_EXP 65
15090: PUSH
15091: LD_VAR 0 1
15095: PUSH
15096: EMPTY
15097: LIST
15098: DIFF
15099: ST_TO_ADDR
15100: GO 15066
15102: POP
15103: POP
// end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
15104: LD_VAR 0 1
15108: PPUSH
15109: CALL_OW 255
15113: PUSH
15114: LD_INT 8
15116: EQUAL
15117: PUSH
15118: LD_VAR 0 1
15122: PPUSH
15123: CALL_OW 247
15127: PUSH
15128: LD_INT 2
15130: EQUAL
15131: AND
15132: PUSH
15133: LD_VAR 0 1
15137: PPUSH
15138: CALL_OW 248
15142: PUSH
15143: LD_INT 2
15145: EQUAL
15146: AND
15147: IFFALSE 15197
// begin for i in legionVehicles do
15149: LD_ADDR_VAR 0 2
15153: PUSH
15154: LD_EXP 54
15158: PUSH
15159: FOR_IN
15160: IFFALSE 15195
// if i = unit then
15162: LD_VAR 0 2
15166: PUSH
15167: LD_VAR 0 1
15171: EQUAL
15172: IFFALSE 15193
// legionVehicles = legionVehicles diff [ unit ] ;
15174: LD_ADDR_EXP 54
15178: PUSH
15179: LD_EXP 54
15183: PUSH
15184: LD_VAR 0 1
15188: PUSH
15189: EMPTY
15190: LIST
15191: DIFF
15192: ST_TO_ADDR
15193: GO 15159
15195: POP
15196: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
15197: LD_VAR 0 1
15201: PPUSH
15202: CALL_OW 255
15206: PUSH
15207: LD_INT 3
15209: EQUAL
15210: PUSH
15211: LD_VAR 0 1
15215: PPUSH
15216: CALL_OW 247
15220: PUSH
15221: LD_INT 2
15223: EQUAL
15224: AND
15225: IFFALSE 15275
// begin for i in RussianVehicles do
15227: LD_ADDR_VAR 0 2
15231: PUSH
15232: LD_EXP 60
15236: PUSH
15237: FOR_IN
15238: IFFALSE 15273
// if i = unit then
15240: LD_VAR 0 2
15244: PUSH
15245: LD_VAR 0 1
15249: EQUAL
15250: IFFALSE 15271
// RussianVehicles = RussianVehicles diff [ unit ] ;
15252: LD_ADDR_EXP 60
15256: PUSH
15257: LD_EXP 60
15261: PUSH
15262: LD_VAR 0 1
15266: PUSH
15267: EMPTY
15268: LIST
15269: DIFF
15270: ST_TO_ADDR
15271: GO 15237
15273: POP
15274: POP
// end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_vehicle then
15275: LD_VAR 0 1
15279: PPUSH
15280: CALL_OW 255
15284: PUSH
15285: LD_INT 7
15287: EQUAL
15288: PUSH
15289: LD_VAR 0 1
15293: PPUSH
15294: CALL_OW 247
15298: PUSH
15299: LD_INT 2
15301: EQUAL
15302: AND
15303: IFFALSE 15353
// begin for i in AllianceVehicles do
15305: LD_ADDR_VAR 0 2
15309: PUSH
15310: LD_EXP 61
15314: PUSH
15315: FOR_IN
15316: IFFALSE 15351
// if i = unit then
15318: LD_VAR 0 2
15322: PUSH
15323: LD_VAR 0 1
15327: EQUAL
15328: IFFALSE 15349
// AllianceVehicles = AllianceVehicles diff [ unit ] ;
15330: LD_ADDR_EXP 61
15334: PUSH
15335: LD_EXP 61
15339: PUSH
15340: LD_VAR 0 1
15344: PUSH
15345: EMPTY
15346: LIST
15347: DIFF
15348: ST_TO_ADDR
15349: GO 15315
15351: POP
15352: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
15353: LD_VAR 0 1
15357: PPUSH
15358: CALL_OW 255
15362: PUSH
15363: LD_INT 3
15365: EQUAL
15366: PUSH
15367: LD_VAR 0 1
15371: PPUSH
15372: CALL_OW 247
15376: PUSH
15377: LD_INT 3
15379: EQUAL
15380: AND
15381: IFFALSE 16073
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15383: LD_VAR 0 1
15387: PPUSH
15388: CALL_OW 266
15392: PUSH
15393: LD_INT 31
15395: EQUAL
15396: PUSH
15397: LD_VAR 0 1
15401: PPUSH
15402: CALL_OW 266
15406: PUSH
15407: LD_INT 32
15409: EQUAL
15410: OR
15411: PUSH
15412: LD_VAR 0 1
15416: PPUSH
15417: CALL_OW 266
15421: PUSH
15422: LD_INT 36
15424: EQUAL
15425: OR
15426: PUSH
15427: LD_VAR 0 1
15431: PPUSH
15432: CALL_OW 266
15436: PUSH
15437: LD_INT 0
15439: EQUAL
15440: OR
15441: PUSH
15442: LD_VAR 0 1
15446: PPUSH
15447: CALL_OW 266
15451: PUSH
15452: LD_INT 24
15454: EQUAL
15455: OR
15456: PUSH
15457: LD_VAR 0 1
15461: PPUSH
15462: CALL_OW 266
15466: PUSH
15467: LD_INT 17
15469: EQUAL
15470: OR
15471: PUSH
15472: LD_VAR 0 1
15476: PPUSH
15477: CALL_OW 266
15481: PUSH
15482: LD_INT 25
15484: EQUAL
15485: OR
15486: PUSH
15487: LD_VAR 0 1
15491: PPUSH
15492: CALL_OW 266
15496: PUSH
15497: LD_INT 19
15499: EQUAL
15500: OR
15501: PUSH
15502: LD_VAR 0 1
15506: PPUSH
15507: CALL_OW 266
15511: PUSH
15512: LD_INT 20
15514: EQUAL
15515: OR
15516: PUSH
15517: LD_VAR 0 1
15521: PPUSH
15522: CALL_OW 266
15526: PUSH
15527: LD_INT 18
15529: EQUAL
15530: OR
15531: PUSH
15532: LD_VAR 0 1
15536: PPUSH
15537: CALL_OW 266
15541: PUSH
15542: LD_INT 21
15544: EQUAL
15545: OR
15546: PUSH
15547: LD_VAR 0 1
15551: PPUSH
15552: CALL_OW 266
15556: PUSH
15557: LD_INT 23
15559: EQUAL
15560: OR
15561: PUSH
15562: LD_VAR 0 1
15566: PPUSH
15567: CALL_OW 266
15571: PUSH
15572: LD_INT 16
15574: EQUAL
15575: OR
15576: PUSH
15577: LD_VAR 0 1
15581: PPUSH
15582: CALL_OW 266
15586: PUSH
15587: LD_INT 6
15589: EQUAL
15590: OR
15591: PUSH
15592: LD_VAR 0 1
15596: PPUSH
15597: CALL_OW 266
15601: PUSH
15602: LD_INT 29
15604: EQUAL
15605: OR
15606: PUSH
15607: LD_VAR 0 1
15611: PPUSH
15612: CALL_OW 266
15616: PUSH
15617: LD_INT 26
15619: EQUAL
15620: OR
15621: PUSH
15622: LD_VAR 0 1
15626: PPUSH
15627: CALL_OW 266
15631: PUSH
15632: LD_INT 30
15634: EQUAL
15635: OR
15636: PUSH
15637: LD_VAR 0 1
15641: PPUSH
15642: CALL_OW 266
15646: PUSH
15647: LD_INT 28
15649: EQUAL
15650: OR
15651: PUSH
15652: LD_VAR 0 1
15656: PPUSH
15657: CALL_OW 266
15661: PUSH
15662: LD_INT 27
15664: EQUAL
15665: OR
15666: PUSH
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL_OW 266
15676: PUSH
15677: LD_INT 33
15679: EQUAL
15680: OR
15681: PUSH
15682: LD_VAR 0 1
15686: PPUSH
15687: CALL_OW 266
15691: PUSH
15692: LD_INT 2
15694: EQUAL
15695: OR
15696: PUSH
15697: LD_VAR 0 1
15701: PPUSH
15702: CALL_OW 266
15706: PUSH
15707: LD_INT 4
15709: EQUAL
15710: OR
15711: IFFALSE 15797
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ GetBType ( unit ) ;
15713: LD_ADDR_EXP 93
15717: PUSH
15718: LD_EXP 93
15722: PUSH
15723: LD_VAR 0 1
15727: PPUSH
15728: CALL_OW 266
15732: ADD
15733: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
15734: LD_ADDR_EXP 93
15738: PUSH
15739: LD_EXP 93
15743: PUSH
15744: LD_VAR 0 1
15748: PPUSH
15749: CALL_OW 250
15753: ADD
15754: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
15755: LD_ADDR_EXP 93
15759: PUSH
15760: LD_EXP 93
15764: PUSH
15765: LD_VAR 0 1
15769: PPUSH
15770: CALL_OW 251
15774: ADD
15775: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
15776: LD_ADDR_EXP 93
15780: PUSH
15781: LD_EXP 93
15785: PUSH
15786: LD_VAR 0 1
15790: PPUSH
15791: CALL_OW 254
15795: ADD
15796: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
15797: LD_VAR 0 1
15801: PPUSH
15802: CALL_OW 266
15806: PUSH
15807: LD_INT 1
15809: EQUAL
15810: IFFALSE 15889
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 0 ;
15812: LD_ADDR_EXP 93
15816: PUSH
15817: LD_EXP 93
15821: PUSH
15822: LD_INT 0
15824: ADD
15825: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
15826: LD_ADDR_EXP 93
15830: PUSH
15831: LD_EXP 93
15835: PUSH
15836: LD_VAR 0 1
15840: PPUSH
15841: CALL_OW 250
15845: ADD
15846: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
15847: LD_ADDR_EXP 93
15851: PUSH
15852: LD_EXP 93
15856: PUSH
15857: LD_VAR 0 1
15861: PPUSH
15862: CALL_OW 251
15866: ADD
15867: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
15868: LD_ADDR_EXP 93
15872: PUSH
15873: LD_EXP 93
15877: PUSH
15878: LD_VAR 0 1
15882: PPUSH
15883: CALL_OW 254
15887: ADD
15888: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
15889: LD_VAR 0 1
15893: PPUSH
15894: CALL_OW 266
15898: PUSH
15899: LD_INT 3
15901: EQUAL
15902: IFFALSE 15981
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 2 ;
15904: LD_ADDR_EXP 93
15908: PUSH
15909: LD_EXP 93
15913: PUSH
15914: LD_INT 2
15916: ADD
15917: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
15918: LD_ADDR_EXP 93
15922: PUSH
15923: LD_EXP 93
15927: PUSH
15928: LD_VAR 0 1
15932: PPUSH
15933: CALL_OW 250
15937: ADD
15938: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
15939: LD_ADDR_EXP 93
15943: PUSH
15944: LD_EXP 93
15948: PUSH
15949: LD_VAR 0 1
15953: PPUSH
15954: CALL_OW 251
15958: ADD
15959: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
15960: LD_ADDR_EXP 93
15964: PUSH
15965: LD_EXP 93
15969: PUSH
15970: LD_VAR 0 1
15974: PPUSH
15975: CALL_OW 254
15979: ADD
15980: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
15981: LD_VAR 0 1
15985: PPUSH
15986: CALL_OW 266
15990: PUSH
15991: LD_INT 5
15993: EQUAL
15994: IFFALSE 16073
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 4 ;
15996: LD_ADDR_EXP 93
16000: PUSH
16001: LD_EXP 93
16005: PUSH
16006: LD_INT 4
16008: ADD
16009: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16010: LD_ADDR_EXP 93
16014: PUSH
16015: LD_EXP 93
16019: PUSH
16020: LD_VAR 0 1
16024: PPUSH
16025: CALL_OW 250
16029: ADD
16030: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16031: LD_ADDR_EXP 93
16035: PUSH
16036: LD_EXP 93
16040: PUSH
16041: LD_VAR 0 1
16045: PPUSH
16046: CALL_OW 251
16050: ADD
16051: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16052: LD_ADDR_EXP 93
16056: PUSH
16057: LD_EXP 93
16061: PUSH
16062: LD_VAR 0 1
16066: PPUSH
16067: CALL_OW 254
16071: ADD
16072: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_building and GetNation ( unit ) = 2 then
16073: LD_VAR 0 1
16077: PPUSH
16078: CALL_OW 255
16082: PUSH
16083: LD_INT 8
16085: EQUAL
16086: PUSH
16087: LD_VAR 0 1
16091: PPUSH
16092: CALL_OW 247
16096: PUSH
16097: LD_INT 3
16099: EQUAL
16100: AND
16101: PUSH
16102: LD_VAR 0 1
16106: PPUSH
16107: CALL_OW 248
16111: PUSH
16112: LD_INT 2
16114: EQUAL
16115: AND
16116: IFFALSE 16808
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16118: LD_VAR 0 1
16122: PPUSH
16123: CALL_OW 266
16127: PUSH
16128: LD_INT 31
16130: EQUAL
16131: PUSH
16132: LD_VAR 0 1
16136: PPUSH
16137: CALL_OW 266
16141: PUSH
16142: LD_INT 32
16144: EQUAL
16145: OR
16146: PUSH
16147: LD_VAR 0 1
16151: PPUSH
16152: CALL_OW 266
16156: PUSH
16157: LD_INT 36
16159: EQUAL
16160: OR
16161: PUSH
16162: LD_VAR 0 1
16166: PPUSH
16167: CALL_OW 266
16171: PUSH
16172: LD_INT 0
16174: EQUAL
16175: OR
16176: PUSH
16177: LD_VAR 0 1
16181: PPUSH
16182: CALL_OW 266
16186: PUSH
16187: LD_INT 24
16189: EQUAL
16190: OR
16191: PUSH
16192: LD_VAR 0 1
16196: PPUSH
16197: CALL_OW 266
16201: PUSH
16202: LD_INT 17
16204: EQUAL
16205: OR
16206: PUSH
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 266
16216: PUSH
16217: LD_INT 25
16219: EQUAL
16220: OR
16221: PUSH
16222: LD_VAR 0 1
16226: PPUSH
16227: CALL_OW 266
16231: PUSH
16232: LD_INT 19
16234: EQUAL
16235: OR
16236: PUSH
16237: LD_VAR 0 1
16241: PPUSH
16242: CALL_OW 266
16246: PUSH
16247: LD_INT 20
16249: EQUAL
16250: OR
16251: PUSH
16252: LD_VAR 0 1
16256: PPUSH
16257: CALL_OW 266
16261: PUSH
16262: LD_INT 18
16264: EQUAL
16265: OR
16266: PUSH
16267: LD_VAR 0 1
16271: PPUSH
16272: CALL_OW 266
16276: PUSH
16277: LD_INT 21
16279: EQUAL
16280: OR
16281: PUSH
16282: LD_VAR 0 1
16286: PPUSH
16287: CALL_OW 266
16291: PUSH
16292: LD_INT 23
16294: EQUAL
16295: OR
16296: PUSH
16297: LD_VAR 0 1
16301: PPUSH
16302: CALL_OW 266
16306: PUSH
16307: LD_INT 16
16309: EQUAL
16310: OR
16311: PUSH
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL_OW 266
16321: PUSH
16322: LD_INT 6
16324: EQUAL
16325: OR
16326: PUSH
16327: LD_VAR 0 1
16331: PPUSH
16332: CALL_OW 266
16336: PUSH
16337: LD_INT 29
16339: EQUAL
16340: OR
16341: PUSH
16342: LD_VAR 0 1
16346: PPUSH
16347: CALL_OW 266
16351: PUSH
16352: LD_INT 26
16354: EQUAL
16355: OR
16356: PUSH
16357: LD_VAR 0 1
16361: PPUSH
16362: CALL_OW 266
16366: PUSH
16367: LD_INT 30
16369: EQUAL
16370: OR
16371: PUSH
16372: LD_VAR 0 1
16376: PPUSH
16377: CALL_OW 266
16381: PUSH
16382: LD_INT 28
16384: EQUAL
16385: OR
16386: PUSH
16387: LD_VAR 0 1
16391: PPUSH
16392: CALL_OW 266
16396: PUSH
16397: LD_INT 27
16399: EQUAL
16400: OR
16401: PUSH
16402: LD_VAR 0 1
16406: PPUSH
16407: CALL_OW 266
16411: PUSH
16412: LD_INT 33
16414: EQUAL
16415: OR
16416: PUSH
16417: LD_VAR 0 1
16421: PPUSH
16422: CALL_OW 266
16426: PUSH
16427: LD_INT 2
16429: EQUAL
16430: OR
16431: PUSH
16432: LD_VAR 0 1
16436: PPUSH
16437: CALL_OW 266
16441: PUSH
16442: LD_INT 4
16444: EQUAL
16445: OR
16446: IFFALSE 16532
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ GetBType ( unit ) ;
16448: LD_ADDR_EXP 92
16452: PUSH
16453: LD_EXP 92
16457: PUSH
16458: LD_VAR 0 1
16462: PPUSH
16463: CALL_OW 266
16467: ADD
16468: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16469: LD_ADDR_EXP 92
16473: PUSH
16474: LD_EXP 92
16478: PUSH
16479: LD_VAR 0 1
16483: PPUSH
16484: CALL_OW 250
16488: ADD
16489: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16490: LD_ADDR_EXP 92
16494: PUSH
16495: LD_EXP 92
16499: PUSH
16500: LD_VAR 0 1
16504: PPUSH
16505: CALL_OW 251
16509: ADD
16510: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16511: LD_ADDR_EXP 92
16515: PUSH
16516: LD_EXP 92
16520: PUSH
16521: LD_VAR 0 1
16525: PPUSH
16526: CALL_OW 254
16530: ADD
16531: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16532: LD_VAR 0 1
16536: PPUSH
16537: CALL_OW 266
16541: PUSH
16542: LD_INT 1
16544: EQUAL
16545: IFFALSE 16624
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 0 ;
16547: LD_ADDR_EXP 92
16551: PUSH
16552: LD_EXP 92
16556: PUSH
16557: LD_INT 0
16559: ADD
16560: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16561: LD_ADDR_EXP 92
16565: PUSH
16566: LD_EXP 92
16570: PUSH
16571: LD_VAR 0 1
16575: PPUSH
16576: CALL_OW 250
16580: ADD
16581: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16582: LD_ADDR_EXP 92
16586: PUSH
16587: LD_EXP 92
16591: PUSH
16592: LD_VAR 0 1
16596: PPUSH
16597: CALL_OW 251
16601: ADD
16602: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16603: LD_ADDR_EXP 92
16607: PUSH
16608: LD_EXP 92
16612: PUSH
16613: LD_VAR 0 1
16617: PPUSH
16618: CALL_OW 254
16622: ADD
16623: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16624: LD_VAR 0 1
16628: PPUSH
16629: CALL_OW 266
16633: PUSH
16634: LD_INT 3
16636: EQUAL
16637: IFFALSE 16716
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 2 ;
16639: LD_ADDR_EXP 92
16643: PUSH
16644: LD_EXP 92
16648: PUSH
16649: LD_INT 2
16651: ADD
16652: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16653: LD_ADDR_EXP 92
16657: PUSH
16658: LD_EXP 92
16662: PUSH
16663: LD_VAR 0 1
16667: PPUSH
16668: CALL_OW 250
16672: ADD
16673: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16674: LD_ADDR_EXP 92
16678: PUSH
16679: LD_EXP 92
16683: PUSH
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 251
16693: ADD
16694: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16695: LD_ADDR_EXP 92
16699: PUSH
16700: LD_EXP 92
16704: PUSH
16705: LD_VAR 0 1
16709: PPUSH
16710: CALL_OW 254
16714: ADD
16715: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16716: LD_VAR 0 1
16720: PPUSH
16721: CALL_OW 266
16725: PUSH
16726: LD_INT 5
16728: EQUAL
16729: IFFALSE 16808
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 4 ;
16731: LD_ADDR_EXP 92
16735: PUSH
16736: LD_EXP 92
16740: PUSH
16741: LD_INT 4
16743: ADD
16744: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16745: LD_ADDR_EXP 92
16749: PUSH
16750: LD_EXP 92
16754: PUSH
16755: LD_VAR 0 1
16759: PPUSH
16760: CALL_OW 250
16764: ADD
16765: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16766: LD_ADDR_EXP 92
16770: PUSH
16771: LD_EXP 92
16775: PUSH
16776: LD_VAR 0 1
16780: PPUSH
16781: CALL_OW 251
16785: ADD
16786: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16787: LD_ADDR_EXP 92
16791: PUSH
16792: LD_EXP 92
16796: PUSH
16797: LD_VAR 0 1
16801: PPUSH
16802: CALL_OW 254
16806: ADD
16807: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_building then
16808: LD_VAR 0 1
16812: PPUSH
16813: CALL_OW 255
16817: PUSH
16818: LD_INT 7
16820: EQUAL
16821: PUSH
16822: LD_VAR 0 1
16826: PPUSH
16827: CALL_OW 247
16831: PUSH
16832: LD_INT 3
16834: EQUAL
16835: AND
16836: IFFALSE 17528
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16838: LD_VAR 0 1
16842: PPUSH
16843: CALL_OW 266
16847: PUSH
16848: LD_INT 31
16850: EQUAL
16851: PUSH
16852: LD_VAR 0 1
16856: PPUSH
16857: CALL_OW 266
16861: PUSH
16862: LD_INT 32
16864: EQUAL
16865: OR
16866: PUSH
16867: LD_VAR 0 1
16871: PPUSH
16872: CALL_OW 266
16876: PUSH
16877: LD_INT 36
16879: EQUAL
16880: OR
16881: PUSH
16882: LD_VAR 0 1
16886: PPUSH
16887: CALL_OW 266
16891: PUSH
16892: LD_INT 0
16894: EQUAL
16895: OR
16896: PUSH
16897: LD_VAR 0 1
16901: PPUSH
16902: CALL_OW 266
16906: PUSH
16907: LD_INT 24
16909: EQUAL
16910: OR
16911: PUSH
16912: LD_VAR 0 1
16916: PPUSH
16917: CALL_OW 266
16921: PUSH
16922: LD_INT 17
16924: EQUAL
16925: OR
16926: PUSH
16927: LD_VAR 0 1
16931: PPUSH
16932: CALL_OW 266
16936: PUSH
16937: LD_INT 25
16939: EQUAL
16940: OR
16941: PUSH
16942: LD_VAR 0 1
16946: PPUSH
16947: CALL_OW 266
16951: PUSH
16952: LD_INT 19
16954: EQUAL
16955: OR
16956: PUSH
16957: LD_VAR 0 1
16961: PPUSH
16962: CALL_OW 266
16966: PUSH
16967: LD_INT 20
16969: EQUAL
16970: OR
16971: PUSH
16972: LD_VAR 0 1
16976: PPUSH
16977: CALL_OW 266
16981: PUSH
16982: LD_INT 18
16984: EQUAL
16985: OR
16986: PUSH
16987: LD_VAR 0 1
16991: PPUSH
16992: CALL_OW 266
16996: PUSH
16997: LD_INT 21
16999: EQUAL
17000: OR
17001: PUSH
17002: LD_VAR 0 1
17006: PPUSH
17007: CALL_OW 266
17011: PUSH
17012: LD_INT 23
17014: EQUAL
17015: OR
17016: PUSH
17017: LD_VAR 0 1
17021: PPUSH
17022: CALL_OW 266
17026: PUSH
17027: LD_INT 16
17029: EQUAL
17030: OR
17031: PUSH
17032: LD_VAR 0 1
17036: PPUSH
17037: CALL_OW 266
17041: PUSH
17042: LD_INT 6
17044: EQUAL
17045: OR
17046: PUSH
17047: LD_VAR 0 1
17051: PPUSH
17052: CALL_OW 266
17056: PUSH
17057: LD_INT 29
17059: EQUAL
17060: OR
17061: PUSH
17062: LD_VAR 0 1
17066: PPUSH
17067: CALL_OW 266
17071: PUSH
17072: LD_INT 26
17074: EQUAL
17075: OR
17076: PUSH
17077: LD_VAR 0 1
17081: PPUSH
17082: CALL_OW 266
17086: PUSH
17087: LD_INT 30
17089: EQUAL
17090: OR
17091: PUSH
17092: LD_VAR 0 1
17096: PPUSH
17097: CALL_OW 266
17101: PUSH
17102: LD_INT 28
17104: EQUAL
17105: OR
17106: PUSH
17107: LD_VAR 0 1
17111: PPUSH
17112: CALL_OW 266
17116: PUSH
17117: LD_INT 27
17119: EQUAL
17120: OR
17121: PUSH
17122: LD_VAR 0 1
17126: PPUSH
17127: CALL_OW 266
17131: PUSH
17132: LD_INT 33
17134: EQUAL
17135: OR
17136: PUSH
17137: LD_VAR 0 1
17141: PPUSH
17142: CALL_OW 266
17146: PUSH
17147: LD_INT 2
17149: EQUAL
17150: OR
17151: PUSH
17152: LD_VAR 0 1
17156: PPUSH
17157: CALL_OW 266
17161: PUSH
17162: LD_INT 4
17164: EQUAL
17165: OR
17166: IFFALSE 17252
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetBType ( unit ) ;
17168: LD_ADDR_EXP 94
17172: PUSH
17173: LD_EXP 94
17177: PUSH
17178: LD_VAR 0 1
17182: PPUSH
17183: CALL_OW 266
17187: ADD
17188: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17189: LD_ADDR_EXP 94
17193: PUSH
17194: LD_EXP 94
17198: PUSH
17199: LD_VAR 0 1
17203: PPUSH
17204: CALL_OW 250
17208: ADD
17209: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17210: LD_ADDR_EXP 94
17214: PUSH
17215: LD_EXP 94
17219: PUSH
17220: LD_VAR 0 1
17224: PPUSH
17225: CALL_OW 251
17229: ADD
17230: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17231: LD_ADDR_EXP 94
17235: PUSH
17236: LD_EXP 94
17240: PUSH
17241: LD_VAR 0 1
17245: PPUSH
17246: CALL_OW 254
17250: ADD
17251: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17252: LD_VAR 0 1
17256: PPUSH
17257: CALL_OW 266
17261: PUSH
17262: LD_INT 1
17264: EQUAL
17265: IFFALSE 17344
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 0 ;
17267: LD_ADDR_EXP 94
17271: PUSH
17272: LD_EXP 94
17276: PUSH
17277: LD_INT 0
17279: ADD
17280: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17281: LD_ADDR_EXP 94
17285: PUSH
17286: LD_EXP 94
17290: PUSH
17291: LD_VAR 0 1
17295: PPUSH
17296: CALL_OW 250
17300: ADD
17301: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17302: LD_ADDR_EXP 94
17306: PUSH
17307: LD_EXP 94
17311: PUSH
17312: LD_VAR 0 1
17316: PPUSH
17317: CALL_OW 251
17321: ADD
17322: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17323: LD_ADDR_EXP 94
17327: PUSH
17328: LD_EXP 94
17332: PUSH
17333: LD_VAR 0 1
17337: PPUSH
17338: CALL_OW 254
17342: ADD
17343: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17344: LD_VAR 0 1
17348: PPUSH
17349: CALL_OW 266
17353: PUSH
17354: LD_INT 3
17356: EQUAL
17357: IFFALSE 17436
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 2 ;
17359: LD_ADDR_EXP 94
17363: PUSH
17364: LD_EXP 94
17368: PUSH
17369: LD_INT 2
17371: ADD
17372: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17373: LD_ADDR_EXP 94
17377: PUSH
17378: LD_EXP 94
17382: PUSH
17383: LD_VAR 0 1
17387: PPUSH
17388: CALL_OW 250
17392: ADD
17393: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17394: LD_ADDR_EXP 94
17398: PUSH
17399: LD_EXP 94
17403: PUSH
17404: LD_VAR 0 1
17408: PPUSH
17409: CALL_OW 251
17413: ADD
17414: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17415: LD_ADDR_EXP 94
17419: PUSH
17420: LD_EXP 94
17424: PUSH
17425: LD_VAR 0 1
17429: PPUSH
17430: CALL_OW 254
17434: ADD
17435: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17436: LD_VAR 0 1
17440: PPUSH
17441: CALL_OW 266
17445: PUSH
17446: LD_INT 5
17448: EQUAL
17449: IFFALSE 17528
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 4 ;
17451: LD_ADDR_EXP 94
17455: PUSH
17456: LD_EXP 94
17460: PUSH
17461: LD_INT 4
17463: ADD
17464: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17465: LD_ADDR_EXP 94
17469: PUSH
17470: LD_EXP 94
17474: PUSH
17475: LD_VAR 0 1
17479: PPUSH
17480: CALL_OW 250
17484: ADD
17485: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17486: LD_ADDR_EXP 94
17490: PUSH
17491: LD_EXP 94
17495: PUSH
17496: LD_VAR 0 1
17500: PPUSH
17501: CALL_OW 251
17505: ADD
17506: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17507: LD_ADDR_EXP 94
17511: PUSH
17512: LD_EXP 94
17516: PUSH
17517: LD_VAR 0 1
17521: PPUSH
17522: CALL_OW 254
17526: ADD
17527: ST_TO_ADDR
// end ; end ; end ;
17528: PPOPN 2
17530: END
// on UnitKamikazed ( unit ) do var i ;
17531: LD_INT 0
17533: PPUSH
// begin if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
17534: LD_VAR 0 1
17538: PPUSH
17539: CALL_OW 255
17543: PUSH
17544: LD_INT 8
17546: EQUAL
17547: PUSH
17548: LD_VAR 0 1
17552: PPUSH
17553: CALL_OW 247
17557: PUSH
17558: LD_INT 2
17560: EQUAL
17561: AND
17562: PUSH
17563: LD_VAR 0 1
17567: PPUSH
17568: CALL_OW 248
17572: PUSH
17573: LD_INT 2
17575: EQUAL
17576: AND
17577: IFFALSE 17627
// begin for i in legionVehicles do
17579: LD_ADDR_VAR 0 2
17583: PUSH
17584: LD_EXP 54
17588: PUSH
17589: FOR_IN
17590: IFFALSE 17625
// if i = unit then
17592: LD_VAR 0 2
17596: PUSH
17597: LD_VAR 0 1
17601: EQUAL
17602: IFFALSE 17623
// legionVehicles = legionVehicles diff [ unit ] ;
17604: LD_ADDR_EXP 54
17608: PUSH
17609: LD_EXP 54
17613: PUSH
17614: LD_VAR 0 1
17618: PUSH
17619: EMPTY
17620: LIST
17621: DIFF
17622: ST_TO_ADDR
17623: GO 17589
17625: POP
17626: POP
// end ; end ;
17627: PPOPN 2
17629: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , SiberiteMainDeposit ) then
17630: LD_VAR 0 2
17634: PPUSH
17635: LD_VAR 0 3
17639: PPUSH
17640: LD_INT 29
17642: PPUSH
17643: CALL_OW 309
17647: IFFALSE 17707
// begin if GetSide ( unit ) = 1 then
17649: LD_VAR 0 1
17653: PPUSH
17654: CALL_OW 255
17658: PUSH
17659: LD_INT 1
17661: EQUAL
17662: IFFALSE 17678
// begin wait ( 0 0$6 ) ;
17664: LD_INT 210
17666: PPUSH
17667: CALL_OW 67
// YouLost ( Motherlode2 ) ;
17671: LD_STRING Motherlode2
17673: PPUSH
17674: CALL_OW 104
// end ; if GetSide ( unit ) = 8 then
17678: LD_VAR 0 1
17682: PPUSH
17683: CALL_OW 255
17687: PUSH
17688: LD_INT 8
17690: EQUAL
17691: IFFALSE 17707
// begin wait ( 0 0$6 ) ;
17693: LD_INT 210
17695: PPUSH
17696: CALL_OW 67
// YouLost ( Motherlode1 ) ;
17700: LD_STRING Motherlode1
17702: PPUSH
17703: CALL_OW 104
// end ; end ; end ;
17707: PPOPN 3
17709: END
// on SibDepositContaminated ( unit , x , y ) do begin if GetSide ( unit ) = 2 then
17710: LD_VAR 0 1
17714: PPUSH
17715: CALL_OW 255
17719: PUSH
17720: LD_INT 2
17722: EQUAL
17723: IFFALSE 17732
// YouLost ( Motherlode3 ) ;
17725: LD_STRING Motherlode3
17727: PPUSH
17728: CALL_OW 104
// end ; end_of_file
17732: PPOPN 3
17734: END
// every 3 3$0 do
17735: GO 17737
17737: DISABLE
// begin enable ;
17738: ENABLE
// LegionTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17739: LD_ADDR_EXP 86
17743: PUSH
17744: LD_INT 1
17746: PUSH
17747: LD_INT 3
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 1
17756: PPUSH
17757: LD_INT 2
17759: PPUSH
17760: CALL_OW 12
17764: ARRAY
17765: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
17766: LD_INT 22
17768: PUSH
17769: LD_INT 8
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 21
17778: PUSH
17779: LD_INT 1
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PPUSH
17790: CALL_OW 69
17794: PUSH
17795: LD_INT 1
17797: GREATER
17798: IFFALSE 17829
// RussianTarget = [ 1 , 8 ] [ Rand ( 1 , 2 ) ] else
17800: LD_ADDR_EXP 88
17804: PUSH
17805: LD_INT 1
17807: PUSH
17808: LD_INT 8
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 1
17817: PPUSH
17818: LD_INT 2
17820: PPUSH
17821: CALL_OW 12
17825: ARRAY
17826: ST_TO_ADDR
17827: GO 17837
// RussianTarget = 1 ;
17829: LD_ADDR_EXP 88
17833: PUSH
17834: LD_INT 1
17836: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
17837: LD_INT 22
17839: PUSH
17840: LD_INT 8
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 21
17849: PUSH
17850: LD_INT 1
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PPUSH
17861: CALL_OW 69
17865: PUSH
17866: LD_INT 1
17868: GREATER
17869: IFFALSE 17904
// AllianceTarget = [ 1 , 3 , 8 ] [ Rand ( 1 , 3 ) ] else
17871: LD_ADDR_EXP 87
17875: PUSH
17876: LD_INT 1
17878: PUSH
17879: LD_INT 3
17881: PUSH
17882: LD_INT 8
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 1
17892: PPUSH
17893: LD_INT 3
17895: PPUSH
17896: CALL_OW 12
17900: ARRAY
17901: ST_TO_ADDR
17902: GO 17931
// AllianceTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17904: LD_ADDR_EXP 87
17908: PUSH
17909: LD_INT 1
17911: PUSH
17912: LD_INT 3
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 1
17921: PPUSH
17922: LD_INT 2
17924: PPUSH
17925: CALL_OW 12
17929: ARRAY
17930: ST_TO_ADDR
// end ;
17931: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople ;
17932: LD_EXP 67
17936: PUSH
17937: LD_INT 1
17939: EQUAL
17940: IFFALSE 18517
17942: GO 17944
17944: DISABLE
17945: LD_INT 0
17947: PPUSH
17948: PPUSH
// begin for i = 1 to 4 do
17949: LD_ADDR_VAR 0 1
17953: PUSH
17954: DOUBLE
17955: LD_INT 1
17957: DEC
17958: ST_TO_ADDR
17959: LD_INT 4
17961: PUSH
17962: FOR_TO
17963: IFFALSE 18003
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
17965: LD_EXP 65
17969: PUSH
17970: LD_VAR 0 1
17974: ARRAY
17975: PPUSH
17976: LD_INT 85
17978: PPUSH
17979: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
17983: LD_EXP 65
17987: PUSH
17988: LD_VAR 0 1
17992: ARRAY
17993: PPUSH
17994: LD_INT 3
17996: PPUSH
17997: CALL_OW 183
// end ;
18001: GO 17962
18003: POP
18004: POP
// wait ( 0 0$1 ) ;
18005: LD_INT 35
18007: PPUSH
18008: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
18012: LD_ADDR_VAR 0 2
18016: PUSH
18017: LD_INT 22
18019: PUSH
18020: LD_INT 4
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 21
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 56
18039: PUSH
18040: EMPTY
18041: LIST
18042: PUSH
18043: LD_INT 3
18045: PUSH
18046: LD_INT 60
18048: PUSH
18049: EMPTY
18050: LIST
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: PPUSH
18062: CALL_OW 69
18066: PUSH
18067: LD_EXP 17
18071: PUSH
18072: EMPTY
18073: LIST
18074: DIFF
18075: ST_TO_ADDR
// ComEnterUnit ( powellPeople [ 1 ] , PowellCargo ) ;
18076: LD_VAR 0 2
18080: PUSH
18081: LD_INT 1
18083: ARRAY
18084: PPUSH
18085: LD_INT 235
18087: PPUSH
18088: CALL_OW 120
// SetClass ( powellPeople [ 2 ] , 2 ) ;
18092: LD_VAR 0 2
18096: PUSH
18097: LD_INT 2
18099: ARRAY
18100: PPUSH
18101: LD_INT 2
18103: PPUSH
18104: CALL_OW 336
// SetClass ( powellPeople [ 3 ] , 2 ) ;
18108: LD_VAR 0 2
18112: PUSH
18113: LD_INT 3
18115: ARRAY
18116: PPUSH
18117: LD_INT 2
18119: PPUSH
18120: CALL_OW 336
// SetResourceVisibility ( 30 , 49 , 4 ) ;
18124: LD_INT 30
18126: PPUSH
18127: LD_INT 49
18129: PPUSH
18130: LD_INT 4
18132: PPUSH
18133: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
18137: LD_INT 91
18139: PPUSH
18140: LD_INT 10
18142: PPUSH
18143: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
18147: LD_INT 91
18149: PPUSH
18150: LD_INT 11
18152: PPUSH
18153: CALL_OW 207
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_mine , 30 , 49 , 1 ) ;
18157: LD_INT 22
18159: PUSH
18160: LD_INT 4
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 25
18169: PUSH
18170: LD_INT 2
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PPUSH
18181: CALL_OW 69
18185: PPUSH
18186: LD_INT 30
18188: PPUSH
18189: LD_INT 30
18191: PPUSH
18192: LD_INT 49
18194: PPUSH
18195: LD_INT 1
18197: PPUSH
18198: CALL_OW 145
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 55 , 56 , 4 ) ;
18202: LD_INT 22
18204: PUSH
18205: LD_INT 4
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 25
18214: PUSH
18215: LD_INT 2
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PPUSH
18226: CALL_OW 69
18230: PPUSH
18231: LD_INT 32
18233: PPUSH
18234: LD_INT 55
18236: PPUSH
18237: LD_INT 56
18239: PPUSH
18240: LD_INT 4
18242: PPUSH
18243: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 63 , 71 , 4 ) ;
18247: LD_INT 22
18249: PUSH
18250: LD_INT 4
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 25
18259: PUSH
18260: LD_INT 2
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PPUSH
18271: CALL_OW 69
18275: PPUSH
18276: LD_INT 32
18278: PPUSH
18279: LD_INT 63
18281: PPUSH
18282: LD_INT 71
18284: PPUSH
18285: LD_INT 4
18287: PPUSH
18288: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_power , 40 , 72 , 4 ) ;
18292: LD_INT 22
18294: PUSH
18295: LD_INT 4
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 25
18304: PUSH
18305: LD_INT 2
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PPUSH
18316: CALL_OW 69
18320: PPUSH
18321: LD_INT 28
18323: PPUSH
18324: LD_INT 40
18326: PPUSH
18327: LD_INT 72
18329: PPUSH
18330: LD_INT 4
18332: PPUSH
18333: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_solar_power , 45 , 73 , 4 ) ;
18337: LD_INT 22
18339: PUSH
18340: LD_INT 4
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 25
18349: PUSH
18350: LD_INT 2
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PPUSH
18361: CALL_OW 69
18365: PPUSH
18366: LD_INT 27
18368: PPUSH
18369: LD_INT 45
18371: PPUSH
18372: LD_INT 73
18374: PPUSH
18375: LD_INT 4
18377: PPUSH
18378: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_rocket , 37 , 50 , 2 ) ;
18382: LD_INT 22
18384: PUSH
18385: LD_INT 4
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 25
18394: PUSH
18395: LD_INT 2
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PPUSH
18406: CALL_OW 69
18410: PPUSH
18411: LD_INT 18
18413: PPUSH
18414: LD_INT 37
18416: PPUSH
18417: LD_INT 50
18419: PPUSH
18420: LD_INT 2
18422: PPUSH
18423: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_gun , 41 , 51 , 3 ) ;
18427: LD_INT 22
18429: PUSH
18430: LD_INT 4
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 25
18439: PUSH
18440: LD_INT 2
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PPUSH
18451: CALL_OW 69
18455: PPUSH
18456: LD_INT 17
18458: PPUSH
18459: LD_INT 41
18461: PPUSH
18462: LD_INT 51
18464: PPUSH
18465: LD_INT 3
18467: PPUSH
18468: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_siberium , 38 , 54 , 1 ) ;
18472: LD_INT 22
18474: PUSH
18475: LD_INT 4
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 25
18484: PUSH
18485: LD_INT 2
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PPUSH
18496: CALL_OW 69
18500: PPUSH
18501: LD_INT 21
18503: PPUSH
18504: LD_INT 38
18506: PPUSH
18507: LD_INT 54
18509: PPUSH
18510: LD_INT 1
18512: PPUSH
18513: CALL_OW 205
// end ;
18517: PPOPN 2
18519: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 do
18520: LD_INT 22
18522: PUSH
18523: LD_INT 4
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 30
18532: PUSH
18533: LD_INT 8
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PPUSH
18544: CALL_OW 69
18548: PUSH
18549: LD_INT 1
18551: EQUAL
18552: IFFALSE 18702
18554: GO 18556
18556: DISABLE
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
18557: LD_INT 85
18559: PPUSH
18560: LD_INT 3
18562: PPUSH
18563: LD_INT 3
18565: PPUSH
18566: LD_INT 1
18568: PPUSH
18569: LD_INT 3
18571: PUSH
18572: LD_INT 5
18574: PUSH
18575: LD_INT 7
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 1
18585: PPUSH
18586: LD_INT 3
18588: PPUSH
18589: CALL_OW 12
18593: ARRAY
18594: PPUSH
18595: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
18599: LD_INT 85
18601: PPUSH
18602: LD_INT 3
18604: PPUSH
18605: LD_INT 3
18607: PPUSH
18608: LD_INT 1
18610: PPUSH
18611: LD_INT 3
18613: PUSH
18614: LD_INT 5
18616: PUSH
18617: LD_INT 7
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 1
18627: PPUSH
18628: LD_INT 3
18630: PPUSH
18631: CALL_OW 12
18635: ARRAY
18636: PPUSH
18637: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
18641: LD_INT 85
18643: PPUSH
18644: LD_INT 3
18646: PPUSH
18647: LD_INT 3
18649: PPUSH
18650: LD_INT 1
18652: PPUSH
18653: LD_INT 3
18655: PUSH
18656: LD_INT 5
18658: PUSH
18659: LD_INT 7
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 1
18669: PPUSH
18670: LD_INT 3
18672: PPUSH
18673: CALL_OW 12
18677: ARRAY
18678: PPUSH
18679: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
18683: LD_INT 85
18685: PPUSH
18686: LD_INT 5
18688: PPUSH
18689: LD_INT 3
18691: PPUSH
18692: LD_INT 1
18694: PPUSH
18695: LD_INT 6
18697: PPUSH
18698: CALL_OW 185
// end ;
18702: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) and powellUnloadCargo = 1 do
18703: LD_INT 235
18705: PPUSH
18706: LD_INT 10
18708: PPUSH
18709: CALL_OW 308
18713: PUSH
18714: LD_EXP 69
18718: PUSH
18719: LD_INT 1
18721: EQUAL
18722: AND
18723: IFFALSE 18747
18725: GO 18727
18727: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
18728: LD_INT 235
18730: PPUSH
18731: CALL_OW 313
18735: PPUSH
18736: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
18740: LD_INT 84
18742: PPUSH
18743: CALL_OW 146
// end ;
18747: END
// every 0 0$1 trigger legionAI = 1 do
18748: LD_EXP 83
18752: PUSH
18753: LD_INT 1
18755: EQUAL
18756: IFFALSE 18819
18758: GO 18760
18760: DISABLE
// begin enable ;
18761: ENABLE
// RepairAndRebuildBase ( 8 , ArDep2 , LegionBaseArea , legionDestroyedBuilds ) ;
18762: LD_INT 8
18764: PPUSH
18765: LD_INT 99
18767: PPUSH
18768: LD_INT 11
18770: PPUSH
18771: LD_EXP 92
18775: PPUSH
18776: CALL 9632 0 4
// HealUnitInBase ( 8 , LegionHealArea , LegionBaseArea , [ ArLab1 ] ) ;
18780: LD_INT 8
18782: PPUSH
18783: LD_INT 20
18785: PPUSH
18786: LD_INT 11
18788: PPUSH
18789: LD_INT 252
18791: PUSH
18792: EMPTY
18793: LIST
18794: PPUSH
18795: CALL 10041 0 4
// AttackNearBuildings ( 8 , 1 ) ;
18799: LD_INT 8
18801: PPUSH
18802: LD_INT 1
18804: PPUSH
18805: CALL 11195 0 2
// EnterBunkerOrBarrack ( 8 , LegionBaseArea ) ;
18809: LD_INT 8
18811: PPUSH
18812: LD_INT 11
18814: PPUSH
18815: CALL 10767 0 2
// end ;
18819: END
// every 3 3$0 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ ] and IsOk ( ArFact ) and GetSide ( ArFact ) = 8 do
18820: LD_EXP 83
18824: PUSH
18825: LD_INT 1
18827: EQUAL
18828: PUSH
18829: LD_EXP 100
18833: PUSH
18834: LD_INT 1
18836: GREATEREQUAL
18837: AND
18838: PUSH
18839: LD_EXP 54
18843: PUSH
18844: EMPTY
18845: EQUAL
18846: AND
18847: PUSH
18848: LD_INT 117
18850: PPUSH
18851: CALL_OW 302
18855: AND
18856: PUSH
18857: LD_INT 117
18859: PPUSH
18860: CALL_OW 255
18864: PUSH
18865: LD_INT 8
18867: EQUAL
18868: AND
18869: IFFALSE 18932
18871: GO 18873
18873: DISABLE
// begin enable ;
18874: ENABLE
// BuildingVehicle ( 8 , ArFact , [ 5 , 6 , 7 ] [ Difficulty ] , [ 27 , 28 , 25 , 29 ] , 3 , 2 , 14 ) ;
18875: LD_INT 8
18877: PPUSH
18878: LD_INT 117
18880: PPUSH
18881: LD_INT 5
18883: PUSH
18884: LD_INT 6
18886: PUSH
18887: LD_INT 7
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: LIST
18894: PUSH
18895: LD_OWVAR 67
18899: ARRAY
18900: PPUSH
18901: LD_INT 27
18903: PUSH
18904: LD_INT 28
18906: PUSH
18907: LD_INT 25
18909: PUSH
18910: LD_INT 29
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: PPUSH
18919: LD_INT 3
18921: PPUSH
18922: LD_INT 2
18924: PPUSH
18925: LD_INT 14
18927: PPUSH
18928: CALL 11425 0 7
// end ;
18932: END
// every 0 0$1 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ 5 , 6 , 7 ] [ Difficulty ] do
18933: LD_EXP 83
18937: PUSH
18938: LD_INT 1
18940: EQUAL
18941: PUSH
18942: LD_EXP 100
18946: PUSH
18947: LD_INT 1
18949: GREATEREQUAL
18950: AND
18951: PUSH
18952: LD_EXP 54
18956: PUSH
18957: LD_INT 5
18959: PUSH
18960: LD_INT 6
18962: PUSH
18963: LD_INT 7
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: LIST
18970: PUSH
18971: LD_OWVAR 67
18975: ARRAY
18976: EQUAL
18977: AND
18978: IFFALSE 18996
18980: GO 18982
18982: DISABLE
// begin enable ;
18983: ENABLE
// AttackVehicles ( LegionTarget , 1 ) ;
18984: LD_EXP 86
18988: PPUSH
18989: LD_INT 1
18991: PPUSH
18992: CALL 11499 0 2
// end ;
18996: END
// every 0 0$1 do
18997: GO 18999
18999: DISABLE
// begin enable ;
19000: ENABLE
// TimeLapsersAI ( 6 , 1 ) ;
19001: LD_INT 6
19003: PPUSH
19004: LD_INT 1
19006: PPUSH
19007: CALL 12431 0 2
// end ;
19011: END
// every 0 0$1 trigger RussianAI = 1 do
19012: LD_EXP 85
19016: PUSH
19017: LD_INT 1
19019: EQUAL
19020: IFFALSE 19099
19022: GO 19024
19024: DISABLE
// begin enable ;
19025: ENABLE
// RepairAndRebuildBase ( 3 , RuDep1 , RussianBaseArea , russianDestroyedBuilds ) ;
19026: LD_INT 3
19028: PPUSH
19029: LD_INT 26
19031: PPUSH
19032: LD_INT 21
19034: PPUSH
19035: LD_EXP 93
19039: PPUSH
19040: CALL 9632 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBaseArea , [ RusLab1 , RusLab2 ] ) ;
19044: LD_INT 3
19046: PPUSH
19047: LD_INT 22
19049: PPUSH
19050: LD_INT 21
19052: PPUSH
19053: LD_INT 2
19055: PUSH
19056: LD_INT 1
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PPUSH
19063: CALL 10041 0 4
// AttackNearBuildings ( 3 , 1 ) ;
19067: LD_INT 3
19069: PPUSH
19070: LD_INT 1
19072: PPUSH
19073: CALL 11195 0 2
// TimeLapsersAI ( 3 , RussianTarget ) ;
19077: LD_INT 3
19079: PPUSH
19080: LD_EXP 88
19084: PPUSH
19085: CALL 12431 0 2
// EnterBunkerOrBarrack ( 3 , RussianBaseArea ) ;
19089: LD_INT 3
19091: PPUSH
19092: LD_INT 21
19094: PPUSH
19095: CALL 10767 0 2
// end ;
19099: END
// every 3 3$0 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ ] and IsOk ( RusFact2 ) and GetSide ( RusFact2 ) = 3 and IsOk ( RusFact1 ) and GetSide ( RusFact1 ) = 3 do
19100: LD_EXP 85
19104: PUSH
19105: LD_INT 1
19107: EQUAL
19108: PUSH
19109: LD_EXP 100
19113: PUSH
19114: LD_INT 3
19116: GREATEREQUAL
19117: AND
19118: PUSH
19119: LD_EXP 60
19123: PUSH
19124: EMPTY
19125: EQUAL
19126: AND
19127: PUSH
19128: LD_INT 10
19130: PPUSH
19131: CALL_OW 302
19135: AND
19136: PUSH
19137: LD_INT 10
19139: PPUSH
19140: CALL_OW 255
19144: PUSH
19145: LD_INT 3
19147: EQUAL
19148: AND
19149: PUSH
19150: LD_INT 4
19152: PPUSH
19153: CALL_OW 302
19157: AND
19158: PUSH
19159: LD_INT 4
19161: PPUSH
19162: CALL_OW 255
19166: PUSH
19167: LD_INT 3
19169: EQUAL
19170: AND
19171: IFFALSE 19291
19173: GO 19175
19175: DISABLE
// begin enable ;
19176: ENABLE
// BuildingVehicle ( 3 , RusFact1 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19177: LD_INT 3
19179: PPUSH
19180: LD_INT 4
19182: PPUSH
19183: LD_INT 4
19185: PUSH
19186: LD_INT 5
19188: PUSH
19189: LD_INT 6
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: LIST
19196: PUSH
19197: LD_OWVAR 67
19201: ARRAY
19202: PPUSH
19203: LD_INT 45
19205: PUSH
19206: LD_INT 46
19208: PUSH
19209: LD_INT 47
19211: PUSH
19212: LD_INT 49
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: PPUSH
19221: LD_INT 3
19223: PPUSH
19224: LD_INT 3
19226: PPUSH
19227: LD_INT 24
19229: PPUSH
19230: CALL 11425 0 7
// BuildingVehicle ( 3 , RusFact2 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19234: LD_INT 3
19236: PPUSH
19237: LD_INT 10
19239: PPUSH
19240: LD_INT 4
19242: PUSH
19243: LD_INT 5
19245: PUSH
19246: LD_INT 6
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: LIST
19253: PUSH
19254: LD_OWVAR 67
19258: ARRAY
19259: PPUSH
19260: LD_INT 45
19262: PUSH
19263: LD_INT 46
19265: PUSH
19266: LD_INT 47
19268: PUSH
19269: LD_INT 49
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: PPUSH
19278: LD_INT 3
19280: PPUSH
19281: LD_INT 3
19283: PPUSH
19284: LD_INT 24
19286: PPUSH
19287: CALL 11425 0 7
// end ;
19291: END
// every 0 0$1 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ 8 , 10 , 12 ] [ Difficulty ] do
19292: LD_EXP 85
19296: PUSH
19297: LD_INT 1
19299: EQUAL
19300: PUSH
19301: LD_EXP 100
19305: PUSH
19306: LD_INT 3
19308: GREATEREQUAL
19309: AND
19310: PUSH
19311: LD_EXP 60
19315: PUSH
19316: LD_INT 8
19318: PUSH
19319: LD_INT 10
19321: PUSH
19322: LD_INT 12
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: LIST
19329: PUSH
19330: LD_OWVAR 67
19334: ARRAY
19335: EQUAL
19336: AND
19337: IFFALSE 19449
19339: GO 19341
19341: DISABLE
// begin enable ;
19342: ENABLE
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 48 ] ] , [ f_not , [ f_hastask ] ] ] ) , [ rutp1 , rutp2 ] [ Rand ( 1 , 2 ) ] ) ;
19343: LD_INT 22
19345: PUSH
19346: LD_INT 3
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 21
19355: PUSH
19356: LD_INT 2
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 3
19365: PUSH
19366: LD_INT 34
19368: PUSH
19369: LD_INT 48
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 3
19382: PUSH
19383: LD_INT 60
19385: PUSH
19386: EMPTY
19387: LIST
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: PPUSH
19399: CALL_OW 69
19403: PPUSH
19404: LD_INT 24
19406: PUSH
19407: LD_INT 25
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 1
19416: PPUSH
19417: LD_INT 2
19419: PPUSH
19420: CALL_OW 12
19424: ARRAY
19425: PPUSH
19426: CALL_OW 120
// wait ( 0 0$20 ) ;
19430: LD_INT 700
19432: PPUSH
19433: CALL_OW 67
// AttackVehicles ( RussianTarget , 2 ) ;
19437: LD_EXP 88
19441: PPUSH
19442: LD_INT 2
19444: PPUSH
19445: CALL 11499 0 2
// end ;
19449: END
// every 0 0$1 trigger AllianceAI = 1 do
19450: LD_EXP 84
19454: PUSH
19455: LD_INT 1
19457: EQUAL
19458: IFFALSE 19541
19460: GO 19462
19462: DISABLE
// begin enable ;
19463: ENABLE
// RepairAndRebuildBase ( 7 , AllDep , AllianceBaseArea , allianceDestroyedBuilds ) ;
19464: LD_INT 7
19466: PPUSH
19467: LD_INT 45
19469: PPUSH
19470: LD_INT 23
19472: PPUSH
19473: LD_EXP 94
19477: PPUSH
19478: CALL 9632 0 4
// HealUnitInBase ( 7 , AllianceHealArea , AllianceBaseArea , [ AllLabA , AllLabR1 , AllLabR2 ] ) ;
19482: LD_INT 7
19484: PPUSH
19485: LD_INT 24
19487: PPUSH
19488: LD_INT 23
19490: PPUSH
19491: LD_INT 46
19493: PUSH
19494: LD_INT 39
19496: PUSH
19497: LD_INT 133
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: LIST
19504: PPUSH
19505: CALL 10041 0 4
// AttackNearBuildings ( 7 , 1 ) ;
19509: LD_INT 7
19511: PPUSH
19512: LD_INT 1
19514: PPUSH
19515: CALL 11195 0 2
// TimeLapsersAI ( 7 , AllianceTarget ) ;
19519: LD_INT 7
19521: PPUSH
19522: LD_EXP 87
19526: PPUSH
19527: CALL 12431 0 2
// EnterBunkerOrBarrack ( 7 , AllianceBaseArea ) ;
19531: LD_INT 7
19533: PPUSH
19534: LD_INT 23
19536: PPUSH
19537: CALL 10767 0 2
// end ;
19541: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ ] and IsOk ( Allfab1 ) and GetSide ( Allfab1 ) = 7 and IsOk ( Allfab2 ) and GetSide ( Allfab2 ) = 7 do
19542: LD_EXP 84
19546: PUSH
19547: LD_INT 1
19549: EQUAL
19550: PUSH
19551: LD_EXP 100
19555: PUSH
19556: LD_INT 4
19558: GREATEREQUAL
19559: AND
19560: PUSH
19561: LD_EXP 61
19565: PUSH
19566: EMPTY
19567: EQUAL
19568: AND
19569: PUSH
19570: LD_INT 156
19572: PPUSH
19573: CALL_OW 302
19577: AND
19578: PUSH
19579: LD_INT 156
19581: PPUSH
19582: CALL_OW 255
19586: PUSH
19587: LD_INT 7
19589: EQUAL
19590: AND
19591: PUSH
19592: LD_INT 162
19594: PPUSH
19595: CALL_OW 302
19599: AND
19600: PUSH
19601: LD_INT 162
19603: PPUSH
19604: CALL_OW 255
19608: PUSH
19609: LD_INT 7
19611: EQUAL
19612: AND
19613: IFFALSE 19729
19615: GO 19617
19617: DISABLE
// begin enable ;
19618: ENABLE
// BuildingVehicle ( 3 , Allfab1 , [ 3 , 3 , 4 ] [ Difficulty ] , [ 9 , 10 , 7 ] , 3 , 2 , 5 ) ;
19619: LD_INT 3
19621: PPUSH
19622: LD_INT 156
19624: PPUSH
19625: LD_INT 3
19627: PUSH
19628: LD_INT 3
19630: PUSH
19631: LD_INT 4
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: PUSH
19639: LD_OWVAR 67
19643: ARRAY
19644: PPUSH
19645: LD_INT 9
19647: PUSH
19648: LD_INT 10
19650: PUSH
19651: LD_INT 7
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: PPUSH
19659: LD_INT 3
19661: PPUSH
19662: LD_INT 2
19664: PPUSH
19665: LD_INT 5
19667: PPUSH
19668: CALL 11425 0 7
// BuildingVehicle ( 3 , Allfab2 , [ 2 , 2 , 3 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19672: LD_INT 3
19674: PPUSH
19675: LD_INT 162
19677: PPUSH
19678: LD_INT 2
19680: PUSH
19681: LD_INT 2
19683: PUSH
19684: LD_INT 3
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: LIST
19691: PUSH
19692: LD_OWVAR 67
19696: ARRAY
19697: PPUSH
19698: LD_INT 45
19700: PUSH
19701: LD_INT 46
19703: PUSH
19704: LD_INT 47
19706: PUSH
19707: LD_INT 49
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: PPUSH
19716: LD_INT 3
19718: PPUSH
19719: LD_INT 3
19721: PPUSH
19722: LD_INT 24
19724: PPUSH
19725: CALL 11425 0 7
// end ;
19729: END
// every 0 0$1 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ 5 , 5 , 7 ] [ Difficulty ] do var i ;
19730: LD_EXP 84
19734: PUSH
19735: LD_INT 1
19737: EQUAL
19738: PUSH
19739: LD_EXP 100
19743: PUSH
19744: LD_INT 4
19746: GREATEREQUAL
19747: AND
19748: PUSH
19749: LD_EXP 61
19753: PUSH
19754: LD_INT 5
19756: PUSH
19757: LD_INT 5
19759: PUSH
19760: LD_INT 7
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: LIST
19767: PUSH
19768: LD_OWVAR 67
19772: ARRAY
19773: EQUAL
19774: AND
19775: IFFALSE 19834
19777: GO 19779
19779: DISABLE
19780: LD_INT 0
19782: PPUSH
// begin for i in AllianceVehicles do
19783: LD_ADDR_VAR 0 1
19787: PUSH
19788: LD_EXP 61
19792: PUSH
19793: FOR_IN
19794: IFFALSE 19819
// TeleportUnit ( i , 117 , 112 , 10 , true ) ;
19796: LD_VAR 0 1
19800: PPUSH
19801: LD_INT 117
19803: PPUSH
19804: LD_INT 112
19806: PPUSH
19807: LD_INT 10
19809: PPUSH
19810: LD_INT 1
19812: PPUSH
19813: CALL_OW 483
19817: GO 19793
19819: POP
19820: POP
// AttackVehicles ( AllianceTarget , 3 ) ;
19821: LD_EXP 87
19825: PPUSH
19826: LD_INT 3
19828: PPUSH
19829: CALL 11499 0 2
// enable ;
19833: ENABLE
// end ;
19834: PPOPN 1
19836: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 do var tmp ;
19837: LD_EXP 84
19841: PUSH
19842: LD_INT 1
19844: EQUAL
19845: PUSH
19846: LD_EXP 100
19850: PUSH
19851: LD_INT 4
19853: GREATEREQUAL
19854: AND
19855: IFFALSE 20036
19857: GO 19859
19859: DISABLE
19860: LD_INT 0
19862: PPUSH
// begin enable ;
19863: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_btype , 21 ] ] ] ) ;
19864: LD_ADDR_VAR 0 1
19868: PUSH
19869: LD_INT 22
19871: PUSH
19872: LD_INT 1
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 21
19881: PUSH
19882: LD_INT 3
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 2
19891: PUSH
19892: LD_INT 30
19894: PUSH
19895: LD_INT 30
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 30
19904: PUSH
19905: LD_INT 28
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 30
19914: PUSH
19915: LD_INT 21
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: LIST
19932: PPUSH
19933: CALL_OW 69
19937: ST_TO_ADDR
// tmp = tmp ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] ] ) ;
19938: LD_ADDR_VAR 0 1
19942: PUSH
19943: LD_VAR 0 1
19947: PUSH
19948: LD_INT 22
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 21
19960: PUSH
19961: LD_INT 2
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 32
19970: PUSH
19971: LD_INT 3
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: LIST
19982: PPUSH
19983: CALL_OW 69
19987: ADD
19988: ST_TO_ADDR
// if tmp = [ ] then
19989: LD_VAR 0 1
19993: PUSH
19994: EMPTY
19995: EQUAL
19996: IFFALSE 20000
// exit ;
19998: GO 20036
// if tmp > 0 then
20000: LD_VAR 0 1
20004: PUSH
20005: LD_INT 0
20007: GREATER
20008: IFFALSE 20036
// SetLives ( tmp [ Rand ( 1 , tmp ) ] , 0 ) ;
20010: LD_VAR 0 1
20014: PUSH
20015: LD_INT 1
20017: PPUSH
20018: LD_VAR 0 1
20022: PPUSH
20023: CALL_OW 12
20027: ARRAY
20028: PPUSH
20029: LD_INT 0
20031: PPUSH
20032: CALL_OW 234
// end ;
20036: PPOPN 1
20038: END
// every 0 0$1 trigger LegionAI = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
20039: LD_EXP 83
20043: PUSH
20044: LD_INT 1
20046: EQUAL
20047: PUSH
20048: LD_INT 22
20050: PUSH
20051: LD_INT 8
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 21
20060: PUSH
20061: LD_INT 2
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 3
20070: PUSH
20071: LD_INT 61
20073: PUSH
20074: EMPTY
20075: LIST
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: LIST
20085: PPUSH
20086: CALL_OW 69
20090: PUSH
20091: LD_INT 0
20093: GREATER
20094: AND
20095: IFFALSE 20177
20097: GO 20099
20099: DISABLE
20100: LD_INT 0
20102: PPUSH
// begin enable ;
20103: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
20104: LD_ADDR_VAR 0 1
20108: PUSH
20109: LD_INT 22
20111: PUSH
20112: LD_INT 8
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 21
20121: PUSH
20122: LD_INT 2
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 3
20131: PUSH
20132: LD_INT 61
20134: PUSH
20135: EMPTY
20136: LIST
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: PPUSH
20147: CALL_OW 69
20151: PUSH
20152: FOR_IN
20153: IFFALSE 20175
// ComLinkTo ( i , arControler [ 1 ] ) ;
20155: LD_VAR 0 1
20159: PPUSH
20160: LD_EXP 55
20164: PUSH
20165: LD_INT 1
20167: ARRAY
20168: PPUSH
20169: CALL_OW 135
20173: GO 20152
20175: POP
20176: POP
// end ;
20177: PPOPN 1
20179: END
// every 0 0$1 trigger AllianceAI = 1 and FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
20180: LD_EXP 84
20184: PUSH
20185: LD_INT 1
20187: EQUAL
20188: PUSH
20189: LD_INT 22
20191: PUSH
20192: LD_INT 7
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 21
20201: PUSH
20202: LD_INT 2
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 3
20211: PUSH
20212: LD_INT 61
20214: PUSH
20215: EMPTY
20216: LIST
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: LIST
20226: PPUSH
20227: CALL_OW 69
20231: PUSH
20232: LD_INT 0
20234: GREATER
20235: AND
20236: IFFALSE 20326
20238: GO 20240
20240: DISABLE
20241: LD_INT 0
20243: PPUSH
// begin enable ;
20244: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
20245: LD_ADDR_VAR 0 1
20249: PUSH
20250: LD_INT 22
20252: PUSH
20253: LD_INT 7
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 21
20262: PUSH
20263: LD_INT 2
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 3
20272: PUSH
20273: LD_INT 61
20275: PUSH
20276: EMPTY
20277: LIST
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: LIST
20287: PPUSH
20288: CALL_OW 69
20292: PUSH
20293: FOR_IN
20294: IFFALSE 20324
// ComLinkTo ( i , allianceControler [ rand ( 1 , 3 ) ] ) ;
20296: LD_VAR 0 1
20300: PPUSH
20301: LD_EXP 62
20305: PUSH
20306: LD_INT 1
20308: PPUSH
20309: LD_INT 3
20311: PPUSH
20312: CALL_OW 12
20316: ARRAY
20317: PPUSH
20318: CALL_OW 135
20322: GO 20293
20324: POP
20325: POP
// end ; end_of_file
20326: PPOPN 1
20328: END
// every 0 0$1 trigger timerStatus = 1 do
20329: LD_EXP 95
20333: PUSH
20334: LD_INT 1
20336: EQUAL
20337: IFFALSE 20374
20339: GO 20341
20341: DISABLE
// begin enable ;
20342: ENABLE
// display_strings = [ #Am15-1 , timeAction ] ;
20343: LD_ADDR_OWVAR 47
20347: PUSH
20348: LD_STRING #Am15-1
20350: PUSH
20351: LD_EXP 96
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: ST_TO_ADDR
// timeAction = timeAction + 0 0$01 ;
20360: LD_ADDR_EXP 96
20364: PUSH
20365: LD_EXP 96
20369: PUSH
20370: LD_INT 35
20372: PLUS
20373: ST_TO_ADDR
// end ; end_of_file
20374: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 and russianEscape = 0 do
20375: LD_EXP 71
20379: PUSH
20380: LD_INT 1
20382: EQUAL
20383: PUSH
20384: LD_EXP 100
20388: PUSH
20389: LD_INT 0
20391: EQUAL
20392: AND
20393: PUSH
20394: LD_EXP 89
20398: PUSH
20399: LD_INT 0
20401: EQUAL
20402: AND
20403: IFFALSE 20463
20405: GO 20407
20407: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
20408: LD_INT 2
20410: PPUSH
20411: LD_INT 6
20413: PPUSH
20414: LD_INT 2
20416: PPUSH
20417: LD_INT 4
20419: PPUSH
20420: CALL_OW 12
20424: PPUSH
20425: LD_INT 10
20427: PPUSH
20428: LD_INT 3
20430: PPUSH
20431: LD_INT 3
20433: PPUSH
20434: LD_INT 3
20436: PPUSH
20437: LD_INT 42
20439: PUSH
20440: LD_INT 43
20442: PUSH
20443: LD_INT 44
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: PPUSH
20451: EMPTY
20452: PPUSH
20453: EMPTY
20454: PPUSH
20455: LD_INT 1
20457: PPUSH
20458: CALL 7862 0 11
// enable ;
20462: ENABLE
// end ;
20463: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 1 and russianEscape = 0 do
20464: LD_EXP 71
20468: PUSH
20469: LD_INT 1
20471: EQUAL
20472: PUSH
20473: LD_EXP 100
20477: PUSH
20478: LD_INT 1
20480: EQUAL
20481: AND
20482: PUSH
20483: LD_EXP 89
20487: PUSH
20488: LD_INT 0
20490: EQUAL
20491: AND
20492: IFFALSE 20552
20494: GO 20496
20496: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 6 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
20497: LD_INT 2
20499: PPUSH
20500: LD_INT 6
20502: PPUSH
20503: LD_INT 4
20505: PPUSH
20506: LD_INT 6
20508: PPUSH
20509: CALL_OW 12
20513: PPUSH
20514: LD_INT 10
20516: PPUSH
20517: LD_INT 3
20519: PPUSH
20520: LD_INT 3
20522: PPUSH
20523: LD_INT 3
20525: PPUSH
20526: LD_INT 44
20528: PUSH
20529: LD_INT 45
20531: PUSH
20532: LD_INT 46
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: LIST
20539: PPUSH
20540: EMPTY
20541: PPUSH
20542: EMPTY
20543: PPUSH
20544: LD_INT 1
20546: PPUSH
20547: CALL 7862 0 11
// enable ;
20551: ENABLE
// end ;
20552: END
// every 3 3$30 trigger startAttacks = 1 and missionStage = 3 and russianEscape = 0 do
20553: LD_EXP 71
20557: PUSH
20558: LD_INT 1
20560: EQUAL
20561: PUSH
20562: LD_EXP 100
20566: PUSH
20567: LD_INT 3
20569: EQUAL
20570: AND
20571: PUSH
20572: LD_EXP 89
20576: PUSH
20577: LD_INT 0
20579: EQUAL
20580: AND
20581: IFFALSE 20645
20583: GO 20585
20585: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 , 47 ] , [ ] , [ ] , 1 ) ;
20586: LD_INT 2
20588: PPUSH
20589: LD_INT 6
20591: PPUSH
20592: LD_INT 4
20594: PPUSH
20595: LD_INT 8
20597: PPUSH
20598: CALL_OW 12
20602: PPUSH
20603: LD_INT 10
20605: PPUSH
20606: LD_INT 3
20608: PPUSH
20609: LD_INT 3
20611: PPUSH
20612: LD_INT 3
20614: PPUSH
20615: LD_INT 44
20617: PUSH
20618: LD_INT 45
20620: PUSH
20621: LD_INT 46
20623: PUSH
20624: LD_INT 47
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: PPUSH
20633: EMPTY
20634: PPUSH
20635: EMPTY
20636: PPUSH
20637: LD_INT 1
20639: PPUSH
20640: CALL 7862 0 11
// enable ;
20644: ENABLE
// end ;
20645: END
// every 5 5$30 trigger startAttacks = 1 and missionStage >= 4 and russianEscape = 0 do
20646: LD_EXP 71
20650: PUSH
20651: LD_INT 1
20653: EQUAL
20654: PUSH
20655: LD_EXP 100
20659: PUSH
20660: LD_INT 4
20662: GREATEREQUAL
20663: AND
20664: PUSH
20665: LD_EXP 89
20669: PUSH
20670: LD_INT 0
20672: EQUAL
20673: AND
20674: IFFALSE 20734
20676: GO 20678
20678: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
20679: LD_INT 2
20681: PPUSH
20682: LD_INT 6
20684: PPUSH
20685: LD_INT 4
20687: PPUSH
20688: LD_INT 8
20690: PPUSH
20691: CALL_OW 12
20695: PPUSH
20696: LD_INT 10
20698: PPUSH
20699: LD_INT 3
20701: PPUSH
20702: LD_INT 3
20704: PPUSH
20705: LD_INT 3
20707: PPUSH
20708: LD_INT 46
20710: PUSH
20711: LD_INT 47
20713: PUSH
20714: LD_INT 49
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: LIST
20721: PPUSH
20722: EMPTY
20723: PPUSH
20724: EMPTY
20725: PPUSH
20726: LD_INT 1
20728: PPUSH
20729: CALL 7862 0 11
// enable ;
20733: ENABLE
// end ; end_of_file
20734: END
// every 1 do var i , dec1 , options , people ;
20735: GO 20737
20737: DISABLE
20738: LD_INT 0
20740: PPUSH
20741: PPUSH
20742: PPUSH
20743: PPUSH
// begin TeleportExit ( rutp1 , 92 , 172 ) ;
20744: LD_INT 24
20746: PPUSH
20747: LD_INT 92
20749: PPUSH
20750: LD_INT 172
20752: PPUSH
20753: CALL_OW 243
// TeleportExit ( rutp2 , 103 , 74 ) ;
20757: LD_INT 25
20759: PPUSH
20760: LD_INT 103
20762: PPUSH
20763: LD_INT 74
20765: PPUSH
20766: CALL_OW 243
// SetClass ( Simms , 4 ) ;
20770: LD_EXP 47
20774: PPUSH
20775: LD_INT 4
20777: PPUSH
20778: CALL_OW 336
// InGameOn ;
20782: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
20786: LD_EXP 24
20790: PUSH
20791: LD_EXP 25
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PPUSH
20800: LD_INT 60
20802: PPUSH
20803: LD_INT 75
20805: PPUSH
20806: CALL_OW 111
// if KappaStatus = 0 then
20810: LD_EXP 80
20814: PUSH
20815: LD_INT 0
20817: EQUAL
20818: IFFALSE 21107
// begin CenterNowOnUnits ( NewJMMVeh ) ;
20820: LD_EXP 24
20824: PPUSH
20825: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
20829: LD_EXP 1
20833: PPUSH
20834: LD_STRING D1T-JMM-1
20836: PPUSH
20837: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20841: LD_EXP 24
20845: PPUSH
20846: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
20850: LD_EXP 17
20854: PPUSH
20855: LD_STRING D1T-Pow-1
20857: PPUSH
20858: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20862: LD_EXP 24
20866: PPUSH
20867: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
20871: LD_EXP 1
20875: PPUSH
20876: LD_STRING D1T-JMM-2
20878: PPUSH
20879: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20883: LD_EXP 24
20887: PPUSH
20888: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
20892: LD_EXP 17
20896: PPUSH
20897: LD_STRING D1T-Pow-2
20899: PPUSH
20900: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20904: LD_EXP 24
20908: PPUSH
20909: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
20913: LD_EXP 1
20917: PPUSH
20918: LD_STRING D1T-JMM-3
20920: PPUSH
20921: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20925: LD_EXP 24
20929: PPUSH
20930: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
20934: LD_EXP 17
20938: PPUSH
20939: LD_STRING D1T-Pow-3
20941: PPUSH
20942: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20946: LD_EXP 24
20950: PPUSH
20951: CALL_OW 87
// if not JMMGirlVeh = [ ] then
20955: LD_EXP 78
20959: PUSH
20960: EMPTY
20961: EQUAL
20962: NOT
20963: IFFALSE 21063
// begin if JMMGirl = 1 then
20965: LD_EXP 79
20969: PUSH
20970: LD_INT 1
20972: EQUAL
20973: IFFALSE 20987
// Say ( Joan , D1T-Joan-3 ) ;
20975: LD_EXP 2
20979: PPUSH
20980: LD_STRING D1T-Joan-3
20982: PPUSH
20983: CALL_OW 88
// if JMMGirl = 2 then
20987: LD_EXP 79
20991: PUSH
20992: LD_INT 2
20994: EQUAL
20995: IFFALSE 21009
// Say ( Lisa , D1T-Lisa-3 ) ;
20997: LD_EXP 4
21001: PPUSH
21002: LD_STRING D1T-Lisa-3
21004: PPUSH
21005: CALL_OW 88
// if JMMGirl = 3 then
21009: LD_EXP 79
21013: PUSH
21014: LD_INT 3
21016: EQUAL
21017: IFFALSE 21031
// Say ( Connie , D1T-Con-3 ) ;
21019: LD_EXP 16
21023: PPUSH
21024: LD_STRING D1T-Con-3
21026: PPUSH
21027: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21031: LD_EXP 24
21035: PPUSH
21036: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
21040: LD_EXP 17
21044: PPUSH
21045: LD_STRING D1T-Pow-4
21047: PPUSH
21048: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21052: LD_EXP 24
21056: PPUSH
21057: CALL_OW 87
// end else
21061: GO 21105
// begin Say ( JMM , D1T-JMM-4 ) ;
21063: LD_EXP 1
21067: PPUSH
21068: LD_STRING D1T-JMM-4
21070: PPUSH
21071: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21075: LD_EXP 24
21079: PPUSH
21080: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
21084: LD_EXP 17
21088: PPUSH
21089: LD_STRING D1T-Pow-5
21091: PPUSH
21092: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21096: LD_EXP 24
21100: PPUSH
21101: CALL_OW 87
// end ; end else
21105: GO 21191
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21107: LD_EXP 24
21111: PPUSH
21112: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21116: LD_EXP 1
21120: PPUSH
21121: LD_STRING D1T-JMM-1
21123: PPUSH
21124: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21128: LD_EXP 24
21132: PPUSH
21133: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21137: LD_EXP 17
21141: PPUSH
21142: LD_STRING D1T-Pow-1
21144: PPUSH
21145: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21149: LD_EXP 24
21153: PPUSH
21154: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21158: LD_EXP 1
21162: PPUSH
21163: LD_STRING D1T-JMM-2
21165: PPUSH
21166: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21170: LD_EXP 24
21174: PPUSH
21175: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21179: LD_EXP 17
21183: PPUSH
21184: LD_STRING D1T-Pow-2
21186: PPUSH
21187: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
21191: LD_INT 35
21193: PPUSH
21194: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
21198: LD_EXP 24
21202: PUSH
21203: LD_EXP 25
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PPUSH
21212: LD_INT 60
21214: PPUSH
21215: LD_INT 75
21217: PPUSH
21218: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
21222: LD_EXP 24
21226: PPUSH
21227: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 20 or not HasTask ( NewJMMVeh ) ;
21231: LD_EXP 24
21235: PPUSH
21236: LD_EXP 17
21240: PPUSH
21241: CALL_OW 296
21245: PUSH
21246: LD_INT 20
21248: LESS
21249: PUSH
21250: LD_EXP 24
21254: PPUSH
21255: CALL_OW 314
21259: NOT
21260: OR
21261: IFFALSE 21191
// ComExitVehicle ( JMM ) ;
21263: LD_EXP 1
21267: PPUSH
21268: CALL_OW 121
// repeat wait ( 0 0$1 ) ;
21272: LD_INT 35
21274: PPUSH
21275: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
21279: LD_EXP 1
21283: PPUSH
21284: LD_EXP 17
21288: PPUSH
21289: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
21293: LD_EXP 1
21297: PPUSH
21298: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
21302: LD_EXP 1
21306: PPUSH
21307: LD_EXP 17
21311: PPUSH
21312: CALL_OW 296
21316: PUSH
21317: LD_INT 6
21319: LESS
21320: IFFALSE 21272
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
21322: LD_EXP 1
21326: PUSH
21327: LD_EXP 17
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PPUSH
21336: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
21340: LD_EXP 1
21344: PPUSH
21345: LD_EXP 17
21349: PPUSH
21350: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
21354: LD_EXP 17
21358: PPUSH
21359: LD_EXP 1
21363: PPUSH
21364: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
21368: LD_EXP 1
21372: PPUSH
21373: LD_STRING D1-JMM-1
21375: PPUSH
21376: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
21380: LD_EXP 17
21384: PPUSH
21385: LD_STRING D1-Pow-1
21387: PPUSH
21388: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
21392: LD_INT 1
21394: PPUSH
21395: LD_INT 3
21397: PPUSH
21398: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
21402: LD_INT 1
21404: PPUSH
21405: LD_INT 4
21407: PPUSH
21408: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
21412: LD_INT 1
21414: PPUSH
21415: LD_INT 5
21417: PPUSH
21418: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
21422: LD_INT 171
21424: PPUSH
21425: LD_INT 81
21427: PPUSH
21428: CALL_OW 84
// wait ( 0 0$4 ) ;
21432: LD_INT 140
21434: PPUSH
21435: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
21439: LD_INT 162
21441: PPUSH
21442: LD_INT 36
21444: PPUSH
21445: CALL_OW 84
// wait ( 0 0$4 ) ;
21449: LD_INT 140
21451: PPUSH
21452: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
21456: LD_INT 75
21458: PPUSH
21459: LD_INT 16
21461: PPUSH
21462: CALL_OW 84
// wait ( 0 0$4 ) ;
21466: LD_INT 140
21468: PPUSH
21469: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
21473: LD_EXP 17
21477: PUSH
21478: LD_EXP 1
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PPUSH
21487: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
21491: LD_EXP 1
21495: PPUSH
21496: LD_STRING D1-JMM-2
21498: PPUSH
21499: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
21503: LD_EXP 17
21507: PPUSH
21508: LD_STRING D1-Pow-2
21510: PPUSH
21511: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
21515: LD_EXP 1
21519: PPUSH
21520: LD_STRING D1-JMM-3
21522: PPUSH
21523: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
21527: LD_EXP 17
21531: PPUSH
21532: LD_STRING D1-Pow-3
21534: PPUSH
21535: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
21539: LD_EXP 1
21543: PPUSH
21544: LD_STRING D1-JMM-4
21546: PPUSH
21547: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
21551: LD_EXP 17
21555: PPUSH
21556: LD_STRING D1-Pow-4
21558: PPUSH
21559: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
21563: LD_EXP 1
21567: PPUSH
21568: LD_STRING D1-JMM-5
21570: PPUSH
21571: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
21575: LD_EXP 17
21579: PPUSH
21580: LD_STRING D1-Pow-5
21582: PPUSH
21583: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
21587: LD_ADDR_VAR 0 3
21591: PUSH
21592: LD_INT 1
21594: PUSH
21595: LD_INT 2
21597: PUSH
21598: LD_INT 3
21600: PUSH
21601: LD_INT 4
21603: PUSH
21604: LD_INT 5
21606: PUSH
21607: LD_INT 6
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
21618: LD_ADDR_VAR 0 2
21622: PUSH
21623: LD_STRING Q1
21625: PPUSH
21626: LD_VAR 0 3
21630: PPUSH
21631: CALL_OW 98
21635: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
21636: LD_ADDR_VAR 0 2
21640: PUSH
21641: LD_STRING Q1
21643: PPUSH
21644: LD_VAR 0 3
21648: PPUSH
21649: CALL_OW 98
21653: ST_TO_ADDR
// options = options diff dec1 ;
21654: LD_ADDR_VAR 0 3
21658: PUSH
21659: LD_VAR 0 3
21663: PUSH
21664: LD_VAR 0 2
21668: DIFF
21669: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
21670: LD_VAR 0 2
21674: PPUSH
21675: LD_VAR 0 3
21679: PPUSH
21680: CALL 23214 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
21684: LD_VAR 0 2
21688: PUSH
21689: LD_INT 5
21691: PUSH
21692: LD_INT 6
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: IN
21699: PUSH
21700: LD_VAR 0 3
21704: PUSH
21705: LD_INT 2
21707: EQUAL
21708: OR
21709: IFFALSE 21636
// if not ( dec1 in [ 5 , 6 ] ) then
21711: LD_VAR 0 2
21715: PUSH
21716: LD_INT 5
21718: PUSH
21719: LD_INT 6
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: IN
21726: NOT
21727: IFFALSE 21770
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
21729: LD_ADDR_VAR 0 2
21733: PUSH
21734: LD_STRING Q1a
21736: PPUSH
21737: LD_INT 1
21739: PUSH
21740: LD_INT 2
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PPUSH
21747: CALL_OW 98
21751: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
21752: LD_VAR 0 2
21756: PUSH
21757: LD_INT 4
21759: PLUS
21760: PPUSH
21761: LD_VAR 0 3
21765: PPUSH
21766: CALL 23214 0 2
// end ; if not JMMGirlVeh = [ ] then
21770: LD_EXP 78
21774: PUSH
21775: EMPTY
21776: EQUAL
21777: NOT
21778: IFFALSE 21940
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
21780: LD_EXP 25
21784: PPUSH
21785: CALL_OW 313
21789: PPUSH
21790: CALL_OW 121
// wait ( 0 0$1 ) ;
21794: LD_INT 35
21796: PPUSH
21797: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21801: LD_INT 35
21803: PPUSH
21804: CALL_OW 67
// if JMMGirl = 1 then
21808: LD_EXP 79
21812: PUSH
21813: LD_INT 1
21815: EQUAL
21816: IFFALSE 21832
// ComMoveUnit ( JMM , Joan ) ;
21818: LD_EXP 1
21822: PPUSH
21823: LD_EXP 2
21827: PPUSH
21828: CALL_OW 112
// if JMMGirl = 2 then
21832: LD_EXP 79
21836: PUSH
21837: LD_INT 2
21839: EQUAL
21840: IFFALSE 21856
// ComMoveUnit ( JMM , Lisa ) ;
21842: LD_EXP 1
21846: PPUSH
21847: LD_EXP 4
21851: PPUSH
21852: CALL_OW 112
// if JMMGirl = 3 then
21856: LD_EXP 79
21860: PUSH
21861: LD_INT 3
21863: EQUAL
21864: IFFALSE 21880
// ComMoveUnit ( JMM , Connie ) ;
21866: LD_EXP 1
21870: PPUSH
21871: LD_EXP 16
21875: PPUSH
21876: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
21880: LD_EXP 1
21884: PPUSH
21885: LD_EXP 2
21889: PPUSH
21890: CALL_OW 296
21894: PUSH
21895: LD_INT 6
21897: LESS
21898: PUSH
21899: LD_EXP 1
21903: PPUSH
21904: LD_EXP 4
21908: PPUSH
21909: CALL_OW 296
21913: PUSH
21914: LD_INT 6
21916: LESS
21917: OR
21918: PUSH
21919: LD_EXP 1
21923: PPUSH
21924: LD_EXP 16
21928: PPUSH
21929: CALL_OW 296
21933: PUSH
21934: LD_INT 6
21936: LESS
21937: OR
21938: IFFALSE 21801
// end ; CenterNowOnUnits ( JMM ) ;
21940: LD_EXP 1
21944: PPUSH
21945: CALL_OW 87
// case JMMGirl of 1 :
21949: LD_EXP 79
21953: PUSH
21954: LD_INT 1
21956: DOUBLE
21957: EQUAL
21958: IFTRUE 21962
21960: GO 22017
21962: POP
// begin ComTurnUnit ( JMM , Joan ) ;
21963: LD_EXP 1
21967: PPUSH
21968: LD_EXP 2
21972: PPUSH
21973: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
21977: LD_EXP 2
21981: PPUSH
21982: LD_EXP 1
21986: PPUSH
21987: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
21991: LD_EXP 2
21995: PPUSH
21996: LD_STRING D3W-Joan-1
21998: PPUSH
21999: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22003: LD_EXP 1
22007: PPUSH
22008: LD_STRING D3W-JMM-1
22010: PPUSH
22011: CALL_OW 88
// end ; 2 :
22015: GO 22144
22017: LD_INT 2
22019: DOUBLE
22020: EQUAL
22021: IFTRUE 22025
22023: GO 22080
22025: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
22026: LD_EXP 1
22030: PPUSH
22031: LD_EXP 4
22035: PPUSH
22036: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
22040: LD_EXP 4
22044: PPUSH
22045: LD_EXP 1
22049: PPUSH
22050: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
22054: LD_EXP 4
22058: PPUSH
22059: LD_STRING D3W-Lisa-1
22061: PPUSH
22062: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22066: LD_EXP 1
22070: PPUSH
22071: LD_STRING D3W-JMM-1
22073: PPUSH
22074: CALL_OW 88
// end ; 3 :
22078: GO 22144
22080: LD_INT 3
22082: DOUBLE
22083: EQUAL
22084: IFTRUE 22088
22086: GO 22143
22088: POP
// begin ComTurnUnit ( JMM , Connie ) ;
22089: LD_EXP 1
22093: PPUSH
22094: LD_EXP 16
22098: PPUSH
22099: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
22103: LD_EXP 16
22107: PPUSH
22108: LD_EXP 1
22112: PPUSH
22113: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
22117: LD_EXP 16
22121: PPUSH
22122: LD_STRING D3W-Con-1
22124: PPUSH
22125: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22129: LD_EXP 1
22133: PPUSH
22134: LD_STRING D3W-JMM-1
22136: PPUSH
22137: CALL_OW 88
// end ; end ;
22141: GO 22144
22143: POP
// people = 0 ;
22144: LD_ADDR_VAR 0 4
22148: PUSH
22149: LD_INT 0
22151: ST_TO_ADDR
// if Lisa and people < 5 then
22152: LD_EXP 4
22156: PUSH
22157: LD_VAR 0 4
22161: PUSH
22162: LD_INT 5
22164: LESS
22165: AND
22166: IFFALSE 22198
// begin people = people + 1 ;
22168: LD_ADDR_VAR 0 4
22172: PUSH
22173: LD_VAR 0 4
22177: PUSH
22178: LD_INT 1
22180: PLUS
22181: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
22182: LD_ADDR_EXP 66
22186: PUSH
22187: LD_EXP 66
22191: PUSH
22192: LD_EXP 4
22196: ADD
22197: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
22198: LD_EXP 5
22202: PUSH
22203: LD_VAR 0 4
22207: PUSH
22208: LD_INT 5
22210: LESS
22211: AND
22212: IFFALSE 22244
// begin people = people + 1 ;
22214: LD_ADDR_VAR 0 4
22218: PUSH
22219: LD_VAR 0 4
22223: PUSH
22224: LD_INT 1
22226: PLUS
22227: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
22228: LD_ADDR_EXP 66
22232: PUSH
22233: LD_EXP 66
22237: PUSH
22238: LD_EXP 5
22242: ADD
22243: ST_TO_ADDR
// end ; if Bobby and people < 5 then
22244: LD_EXP 6
22248: PUSH
22249: LD_VAR 0 4
22253: PUSH
22254: LD_INT 5
22256: LESS
22257: AND
22258: IFFALSE 22290
// begin people = people + 1 ;
22260: LD_ADDR_VAR 0 4
22264: PUSH
22265: LD_VAR 0 4
22269: PUSH
22270: LD_INT 1
22272: PLUS
22273: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
22274: LD_ADDR_EXP 66
22278: PUSH
22279: LD_EXP 66
22283: PUSH
22284: LD_EXP 6
22288: ADD
22289: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
22290: LD_EXP 7
22294: PUSH
22295: LD_VAR 0 4
22299: PUSH
22300: LD_INT 5
22302: LESS
22303: AND
22304: IFFALSE 22336
// begin people = people + 1 ;
22306: LD_ADDR_VAR 0 4
22310: PUSH
22311: LD_VAR 0 4
22315: PUSH
22316: LD_INT 1
22318: PLUS
22319: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
22320: LD_ADDR_EXP 66
22324: PUSH
22325: LD_EXP 66
22329: PUSH
22330: LD_EXP 7
22334: ADD
22335: ST_TO_ADDR
// end ; if Denis and people < 5 then
22336: LD_EXP 8
22340: PUSH
22341: LD_VAR 0 4
22345: PUSH
22346: LD_INT 5
22348: LESS
22349: AND
22350: IFFALSE 22382
// begin people = people + 1 ;
22352: LD_ADDR_VAR 0 4
22356: PUSH
22357: LD_VAR 0 4
22361: PUSH
22362: LD_INT 1
22364: PLUS
22365: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
22366: LD_ADDR_EXP 66
22370: PUSH
22371: LD_EXP 66
22375: PUSH
22376: LD_EXP 8
22380: ADD
22381: ST_TO_ADDR
// end ; if Brown and people < 5 then
22382: LD_EXP 9
22386: PUSH
22387: LD_VAR 0 4
22391: PUSH
22392: LD_INT 5
22394: LESS
22395: AND
22396: IFFALSE 22428
// begin people = people + 1 ;
22398: LD_ADDR_VAR 0 4
22402: PUSH
22403: LD_VAR 0 4
22407: PUSH
22408: LD_INT 1
22410: PLUS
22411: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
22412: LD_ADDR_EXP 66
22416: PUSH
22417: LD_EXP 66
22421: PUSH
22422: LD_EXP 9
22426: ADD
22427: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
22428: LD_EXP 10
22432: PUSH
22433: LD_VAR 0 4
22437: PUSH
22438: LD_INT 5
22440: LESS
22441: AND
22442: IFFALSE 22474
// begin people = people + 1 ;
22444: LD_ADDR_VAR 0 4
22448: PUSH
22449: LD_VAR 0 4
22453: PUSH
22454: LD_INT 1
22456: PLUS
22457: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
22458: LD_ADDR_EXP 66
22462: PUSH
22463: LD_EXP 66
22467: PUSH
22468: LD_EXP 10
22472: ADD
22473: ST_TO_ADDR
// end ; if Houten and people < 5 then
22474: LD_EXP 11
22478: PUSH
22479: LD_VAR 0 4
22483: PUSH
22484: LD_INT 5
22486: LESS
22487: AND
22488: IFFALSE 22520
// begin people = people + 1 ;
22490: LD_ADDR_VAR 0 4
22494: PUSH
22495: LD_VAR 0 4
22499: PUSH
22500: LD_INT 1
22502: PLUS
22503: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
22504: LD_ADDR_EXP 66
22508: PUSH
22509: LD_EXP 66
22513: PUSH
22514: LD_EXP 11
22518: ADD
22519: ST_TO_ADDR
// end ; if Cornel and people < 5 then
22520: LD_EXP 12
22524: PUSH
22525: LD_VAR 0 4
22529: PUSH
22530: LD_INT 5
22532: LESS
22533: AND
22534: IFFALSE 22566
// begin people = people + 1 ;
22536: LD_ADDR_VAR 0 4
22540: PUSH
22541: LD_VAR 0 4
22545: PUSH
22546: LD_INT 1
22548: PLUS
22549: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
22550: LD_ADDR_EXP 66
22554: PUSH
22555: LD_EXP 66
22559: PUSH
22560: LD_EXP 12
22564: ADD
22565: ST_TO_ADDR
// end ; if Gary and people < 5 then
22566: LD_EXP 13
22570: PUSH
22571: LD_VAR 0 4
22575: PUSH
22576: LD_INT 5
22578: LESS
22579: AND
22580: IFFALSE 22612
// begin people = people + 1 ;
22582: LD_ADDR_VAR 0 4
22586: PUSH
22587: LD_VAR 0 4
22591: PUSH
22592: LD_INT 1
22594: PLUS
22595: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
22596: LD_ADDR_EXP 66
22600: PUSH
22601: LD_EXP 66
22605: PUSH
22606: LD_EXP 13
22610: ADD
22611: ST_TO_ADDR
// end ; if Frank and people < 5 then
22612: LD_EXP 14
22616: PUSH
22617: LD_VAR 0 4
22621: PUSH
22622: LD_INT 5
22624: LESS
22625: AND
22626: IFFALSE 22658
// begin people = people + 1 ;
22628: LD_ADDR_VAR 0 4
22632: PUSH
22633: LD_VAR 0 4
22637: PUSH
22638: LD_INT 1
22640: PLUS
22641: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
22642: LD_ADDR_EXP 66
22646: PUSH
22647: LD_EXP 66
22651: PUSH
22652: LD_EXP 14
22656: ADD
22657: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
22658: LD_EXP 15
22662: PUSH
22663: LD_VAR 0 4
22667: PUSH
22668: LD_INT 5
22670: LESS
22671: AND
22672: IFFALSE 22704
// begin people = people + 1 ;
22674: LD_ADDR_VAR 0 4
22678: PUSH
22679: LD_VAR 0 4
22683: PUSH
22684: LD_INT 1
22686: PLUS
22687: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
22688: LD_ADDR_EXP 66
22692: PUSH
22693: LD_EXP 66
22697: PUSH
22698: LD_EXP 15
22702: ADD
22703: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
22704: LD_EXP 66
22708: PPUSH
22709: LD_INT 25
22711: PUSH
22712: LD_INT 2
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PPUSH
22719: CALL_OW 72
22723: PUSH
22724: LD_INT 0
22726: EQUAL
22727: IFFALSE 22745
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
22729: LD_EXP 66
22733: PUSH
22734: LD_INT 1
22736: ARRAY
22737: PPUSH
22738: LD_INT 2
22740: PPUSH
22741: CALL_OW 336
// for i = 1 to 5 do
22745: LD_ADDR_VAR 0 1
22749: PUSH
22750: DOUBLE
22751: LD_INT 1
22753: DEC
22754: ST_TO_ADDR
22755: LD_INT 5
22757: PUSH
22758: FOR_TO
22759: IFFALSE 22810
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
22761: LD_EXP 66
22765: PUSH
22766: LD_VAR 0 1
22770: ARRAY
22771: PPUSH
22772: LD_INT 62
22774: PUSH
22775: LD_VAR 0 1
22779: PLUS
22780: PPUSH
22781: LD_INT 95
22783: PPUSH
22784: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
22788: LD_EXP 66
22792: PUSH
22793: LD_VAR 0 1
22797: ARRAY
22798: PPUSH
22799: LD_EXP 1
22803: PPUSH
22804: CALL_OW 179
// end ;
22808: GO 22758
22810: POP
22811: POP
// repeat wait ( 0 0$1 ) ;
22812: LD_INT 35
22814: PPUSH
22815: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
22819: LD_EXP 1
22823: PPUSH
22824: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
22828: LD_EXP 1
22832: PPUSH
22833: LD_INT 66
22835: PPUSH
22836: LD_INT 98
22838: PPUSH
22839: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
22843: LD_EXP 2
22847: PUSH
22848: LD_EXP 4
22852: PUSH
22853: LD_EXP 16
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: PPUSH
22863: LD_INT 67
22865: PPUSH
22866: LD_INT 98
22868: PPUSH
22869: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
22873: LD_EXP 1
22877: PUSH
22878: LD_EXP 2
22882: PUSH
22883: LD_EXP 4
22887: PUSH
22888: LD_EXP 16
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: PPUSH
22899: LD_INT 63
22901: PPUSH
22902: LD_INT 95
22904: PPUSH
22905: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
22909: LD_EXP 1
22913: PPUSH
22914: LD_INT 9
22916: PPUSH
22917: CALL_OW 308
22921: PUSH
22922: LD_INT 9
22924: PPUSH
22925: LD_INT 22
22927: PUSH
22928: LD_INT 4
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 21
22937: PUSH
22938: LD_INT 1
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PPUSH
22949: CALL_OW 70
22953: PUSH
22954: LD_INT 5
22956: EQUAL
22957: AND
22958: IFFALSE 22812
// wait ( 0 0$2 ) ;
22960: LD_INT 70
22962: PPUSH
22963: CALL_OW 67
// if IsInArea ( Lisa , PowellHillArea ) then
22967: LD_EXP 4
22971: PPUSH
22972: LD_INT 9
22974: PPUSH
22975: CALL_OW 308
22979: IFFALSE 22993
// Say ( Lisa , D3nW-Lisa-1 ) ;
22981: LD_EXP 4
22985: PPUSH
22986: LD_STRING D3nW-Lisa-1
22988: PPUSH
22989: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
22993: LD_EXP 7
22997: PPUSH
22998: LD_INT 9
23000: PPUSH
23001: CALL_OW 308
23005: IFFALSE 23019
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
23007: LD_EXP 7
23011: PPUSH
23012: LD_STRING D3nW-Cyrus-1
23014: PPUSH
23015: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
23019: LD_EXP 6
23023: PPUSH
23024: LD_INT 9
23026: PPUSH
23027: CALL_OW 308
23031: IFFALSE 23045
// Say ( Bobby , D3nW-Bobby-1 ) ;
23033: LD_EXP 6
23037: PPUSH
23038: LD_STRING D3nW-Bobby-1
23040: PPUSH
23041: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
23045: LD_EXP 13
23049: PPUSH
23050: LD_INT 9
23052: PPUSH
23053: CALL_OW 308
23057: IFFALSE 23071
// Say ( Gary , D3nW-Gary-1 ) ;
23059: LD_EXP 13
23063: PPUSH
23064: LD_STRING D3nW-Gary-1
23066: PPUSH
23067: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
23071: LD_EXP 5
23075: PPUSH
23076: LD_INT 9
23078: PPUSH
23079: CALL_OW 308
23083: IFFALSE 23097
// Say ( Donaldson , D3nW-Don-1 ) ;
23085: LD_EXP 5
23089: PPUSH
23090: LD_STRING D3nW-Don-1
23092: PPUSH
23093: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
23097: LD_EXP 12
23101: PPUSH
23102: LD_INT 9
23104: PPUSH
23105: CALL_OW 308
23109: IFFALSE 23123
// Say ( Cornel , D3nW-Corn-1 ) ;
23111: LD_EXP 12
23115: PPUSH
23116: LD_STRING D3nW-Corn-1
23118: PPUSH
23119: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
23123: LD_EXP 14
23127: PPUSH
23128: LD_INT 9
23130: PPUSH
23131: CALL_OW 308
23135: IFFALSE 23149
// Say ( Frank , D3nW-Frank-1 ) ;
23137: LD_EXP 14
23141: PPUSH
23142: LD_STRING D3nW-Frank-1
23144: PPUSH
23145: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
23149: LD_EXP 1
23153: PPUSH
23154: LD_STRING D3nW-JMM-1
23156: PPUSH
23157: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
23161: LD_EXP 1
23165: PPUSH
23166: LD_STRING D3nW-JMM-1a
23168: PPUSH
23169: CALL_OW 88
// InGameOff ;
23173: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
23177: LD_STRING M1
23179: PPUSH
23180: CALL_OW 337
// SaveForQuickRestart ;
23184: CALL_OW 22
// startAttacks = 1 ;
23188: LD_ADDR_EXP 71
23192: PUSH
23193: LD_INT 1
23195: ST_TO_ADDR
// wait ( 0 0$5 ) ;
23196: LD_INT 175
23198: PPUSH
23199: CALL_OW 67
// powellBuildBase = 1 ;
23203: LD_ADDR_EXP 67
23207: PUSH
23208: LD_INT 1
23210: ST_TO_ADDR
// end ;
23211: PPOPN 4
23213: END
// function ResolveQuery ( question , list_of_q ) ; begin
23214: LD_INT 0
23216: PPUSH
// case question of 1 :
23217: LD_VAR 0 1
23221: PUSH
23222: LD_INT 1
23224: DOUBLE
23225: EQUAL
23226: IFTRUE 23230
23228: GO 23281
23230: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
23231: LD_EXP 1
23235: PPUSH
23236: LD_STRING D2Mot-JMM-1
23238: PPUSH
23239: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
23243: LD_EXP 17
23247: PPUSH
23248: LD_STRING D2Mot-Pow-1
23250: PPUSH
23251: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
23255: LD_EXP 1
23259: PPUSH
23260: LD_STRING D2Mot-JMM-2
23262: PPUSH
23263: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
23267: LD_EXP 17
23271: PPUSH
23272: LD_STRING D2Mot-Pow-2
23274: PPUSH
23275: CALL_OW 88
// end ; 2 :
23279: GO 23624
23281: LD_INT 2
23283: DOUBLE
23284: EQUAL
23285: IFTRUE 23289
23287: GO 23365
23289: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
23290: LD_EXP 1
23294: PPUSH
23295: LD_STRING D2Rus-JMM-1
23297: PPUSH
23298: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
23302: LD_EXP 17
23306: PPUSH
23307: LD_STRING D2Rus-Pow-1
23309: PPUSH
23310: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
23314: LD_EXP 1
23318: PPUSH
23319: LD_STRING D2Rus-JMM-2
23321: PPUSH
23322: CALL_OW 88
// if not ( 3 in list_of_q ) then
23326: LD_INT 3
23328: PUSH
23329: LD_VAR 0 2
23333: IN
23334: NOT
23335: IFFALSE 23351
// Say ( Powell , D2Rus-Pow-2 ) else
23337: LD_EXP 17
23341: PPUSH
23342: LD_STRING D2Rus-Pow-2
23344: PPUSH
23345: CALL_OW 88
23349: GO 23363
// Say ( Powell , D2Rus-Pow-2a ) ;
23351: LD_EXP 17
23355: PPUSH
23356: LD_STRING D2Rus-Pow-2a
23358: PPUSH
23359: CALL_OW 88
// end ; 3 :
23363: GO 23624
23365: LD_INT 3
23367: DOUBLE
23368: EQUAL
23369: IFTRUE 23373
23371: GO 23458
23373: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
23374: LD_EXP 1
23378: PPUSH
23379: LD_STRING D2Leg-JMM-1
23381: PPUSH
23382: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
23386: LD_EXP 17
23390: PPUSH
23391: LD_STRING D2Leg-Pow-1
23393: PPUSH
23394: CALL_OW 88
// if ( 2 in list_of_q ) then
23398: LD_INT 2
23400: PUSH
23401: LD_VAR 0 2
23405: IN
23406: IFFALSE 23432
// begin Say ( JMM , D2Leg-JMM-2 ) ;
23408: LD_EXP 1
23412: PPUSH
23413: LD_STRING D2Leg-JMM-2
23415: PPUSH
23416: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
23420: LD_EXP 17
23424: PPUSH
23425: LD_STRING D2Leg-Pow-2
23427: PPUSH
23428: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
23432: LD_EXP 1
23436: PPUSH
23437: LD_STRING D2Leg-JMM-3
23439: PPUSH
23440: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
23444: LD_EXP 17
23448: PPUSH
23449: LD_STRING D2Leg-Pow-3
23451: PPUSH
23452: CALL_OW 88
// end ; 4 :
23456: GO 23624
23458: LD_INT 4
23460: DOUBLE
23461: EQUAL
23462: IFTRUE 23466
23464: GO 23541
23466: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
23467: LD_EXP 1
23471: PPUSH
23472: LD_STRING D2Ar-JMM-1
23474: PPUSH
23475: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
23479: LD_EXP 17
23483: PPUSH
23484: LD_STRING D2Ar-Pow-1
23486: PPUSH
23487: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
23491: LD_EXP 1
23495: PPUSH
23496: LD_STRING D2Ar-JMM-2
23498: PPUSH
23499: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
23503: LD_EXP 17
23507: PPUSH
23508: LD_STRING D2Ar-Pow-2
23510: PPUSH
23511: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
23515: LD_EXP 1
23519: PPUSH
23520: LD_STRING D2Ar-JMM-3
23522: PPUSH
23523: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
23527: LD_EXP 17
23531: PPUSH
23532: LD_STRING D2Ar-Pow-3
23534: PPUSH
23535: CALL_OW 88
// end ; 5 :
23539: GO 23624
23541: LD_INT 5
23543: DOUBLE
23544: EQUAL
23545: IFTRUE 23549
23547: GO 23564
23549: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
23550: LD_EXP 1
23554: PPUSH
23555: LD_STRING D2Conf-JMM-1
23557: PPUSH
23558: CALL_OW 88
// end ; 6 :
23562: GO 23624
23564: LD_INT 6
23566: DOUBLE
23567: EQUAL
23568: IFTRUE 23572
23570: GO 23623
23572: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
23573: LD_EXP 1
23577: PPUSH
23578: LD_STRING D2Com-JMM-1
23580: PPUSH
23581: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
23585: LD_EXP 17
23589: PPUSH
23590: LD_STRING D2Com-Pow-1
23592: PPUSH
23593: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
23597: LD_EXP 1
23601: PPUSH
23602: LD_STRING D2Com-JMM-2
23604: PPUSH
23605: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
23609: LD_EXP 17
23613: PPUSH
23614: LD_STRING D2Com-Pow-2
23616: PPUSH
23617: CALL_OW 88
// end ; end ;
23621: GO 23624
23623: POP
// end ;
23624: LD_VAR 0 3
23628: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
23629: LD_INT 9
23631: PPUSH
23632: LD_INT 22
23634: PUSH
23635: LD_INT 4
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 21
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PPUSH
23656: CALL_OW 70
23660: IFFALSE 23705
23662: GO 23664
23664: DISABLE
// begin enable ;
23665: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
23666: LD_INT 9
23668: PPUSH
23669: LD_INT 22
23671: PUSH
23672: LD_INT 4
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 21
23681: PUSH
23682: LD_INT 1
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PPUSH
23693: CALL_OW 70
23697: PPUSH
23698: LD_INT 1
23700: PPUSH
23701: CALL_OW 235
// end ;
23705: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
23706: LD_INT 22
23708: PUSH
23709: LD_INT 4
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 21
23718: PUSH
23719: LD_INT 2
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 3
23728: PUSH
23729: LD_INT 58
23731: PUSH
23732: EMPTY
23733: LIST
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: LIST
23743: PPUSH
23744: CALL_OW 69
23748: PUSH
23749: LD_INT 4
23751: EQUAL
23752: PUSH
23753: LD_EXP 71
23757: PUSH
23758: LD_INT 1
23760: EQUAL
23761: AND
23762: IFFALSE 23775
23764: GO 23766
23766: DISABLE
// startAttacks = 0 ;
23767: LD_ADDR_EXP 71
23771: PUSH
23772: LD_INT 0
23774: ST_TO_ADDR
23775: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
23776: LD_INT 22
23778: PUSH
23779: LD_INT 4
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 21
23788: PUSH
23789: LD_INT 2
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 3
23798: PUSH
23799: LD_INT 58
23801: PUSH
23802: EMPTY
23803: LIST
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: LIST
23813: PPUSH
23814: CALL_OW 69
23818: PUSH
23819: LD_INT 4
23821: EQUAL
23822: PUSH
23823: LD_INT 22
23825: PUSH
23826: LD_INT 6
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 21
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 24
23845: PUSH
23846: LD_INT 250
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: LIST
23857: PPUSH
23858: CALL_OW 69
23862: PUSH
23863: LD_INT 0
23865: EQUAL
23866: AND
23867: PUSH
23868: LD_EXP 71
23872: PUSH
23873: LD_INT 0
23875: EQUAL
23876: AND
23877: PUSH
23878: LD_EXP 68
23882: PUSH
23883: LD_INT 0
23885: EQUAL
23886: AND
23887: IFFALSE 24075
23889: GO 23891
23891: DISABLE
23892: LD_INT 0
23894: PPUSH
// begin powellAttacks = 1 ;
23895: LD_ADDR_EXP 68
23899: PUSH
23900: LD_INT 1
23902: ST_TO_ADDR
// InGameOn ;
23903: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
23907: LD_EXP 17
23911: PPUSH
23912: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
23916: LD_EXP 17
23920: PPUSH
23921: LD_INT 47
23923: PPUSH
23924: LD_INT 60
23926: PPUSH
23927: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
23931: LD_EXP 17
23935: PPUSH
23936: LD_STRING D4-Pow-1
23938: PPUSH
23939: CALL_OW 88
// for i = 1 to amUnitsAttack do
23943: LD_ADDR_VAR 0 1
23947: PUSH
23948: DOUBLE
23949: LD_INT 1
23951: DEC
23952: ST_TO_ADDR
23953: LD_EXP 65
23957: PUSH
23958: FOR_TO
23959: IFFALSE 24004
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
23961: LD_EXP 65
23965: PUSH
23966: LD_VAR 0 1
23970: ARRAY
23971: PPUSH
23972: CALL_OW 258
23976: PUSH
23977: LD_INT 1
23979: EQUAL
23980: IFFALSE 24002
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
23982: LD_EXP 65
23986: PUSH
23987: LD_VAR 0 1
23991: ARRAY
23992: PPUSH
23993: LD_STRING D4-Sol1-1
23995: PPUSH
23996: CALL_OW 88
// break ;
24000: GO 24004
// end ;
24002: GO 23958
24004: POP
24005: POP
// Say ( Powell , D4-Pow-2 ) ;
24006: LD_EXP 17
24010: PPUSH
24011: LD_STRING D4-Pow-2
24013: PPUSH
24014: CALL_OW 88
// InGameOff ;
24018: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
24022: LD_INT 22
24024: PUSH
24025: LD_INT 4
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 21
24034: PUSH
24035: LD_INT 2
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 3
24044: PUSH
24045: LD_INT 58
24047: PUSH
24048: EMPTY
24049: LIST
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: LIST
24059: PPUSH
24060: CALL_OW 69
24064: PPUSH
24065: LD_INT 59
24067: PPUSH
24068: LD_INT 21
24070: PPUSH
24071: CALL_OW 114
// end ;
24075: PPOPN 1
24077: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
24078: LD_INT 7
24080: PPUSH
24081: LD_INT 22
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 21
24093: PUSH
24094: LD_INT 1
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PPUSH
24105: CALL_OW 70
24109: PUSH
24110: LD_INT 0
24112: GREATER
24113: PUSH
24114: LD_EXP 17
24118: PPUSH
24119: CALL_OW 302
24123: AND
24124: PUSH
24125: LD_EXP 70
24129: PUSH
24130: LD_INT 0
24132: EQUAL
24133: AND
24134: IFFALSE 24258
24136: GO 24138
24138: DISABLE
// begin InGameOn ;
24139: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24143: LD_INT 22
24145: PUSH
24146: LD_INT 1
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 21
24155: PUSH
24156: LD_INT 1
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PPUSH
24167: CALL_OW 69
24171: PPUSH
24172: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24176: LD_INT 7
24178: PPUSH
24179: LD_INT 22
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 21
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PPUSH
24203: CALL_OW 70
24207: PPUSH
24208: LD_INT 70
24210: PPUSH
24211: LD_INT 104
24213: PPUSH
24214: CALL_OW 111
// if powellWarm = 0 then
24218: LD_EXP 70
24222: PUSH
24223: LD_INT 0
24225: EQUAL
24226: IFFALSE 24254
// begin Say ( Powell , DBack1-Pow-1 ) ;
24228: LD_EXP 17
24232: PPUSH
24233: LD_STRING DBack1-Pow-1
24235: PPUSH
24236: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24240: LD_ADDR_EXP 70
24244: PUSH
24245: LD_EXP 70
24249: PUSH
24250: LD_INT 1
24252: PLUS
24253: ST_TO_ADDR
// end ; InGameOff ;
24254: CALL_OW 9
// end ;
24258: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
24259: LD_INT 7
24261: PPUSH
24262: LD_INT 22
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 21
24274: PUSH
24275: LD_INT 1
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PPUSH
24286: CALL_OW 70
24290: PUSH
24291: LD_INT 0
24293: GREATER
24294: PUSH
24295: LD_EXP 17
24299: PPUSH
24300: CALL_OW 302
24304: AND
24305: PUSH
24306: LD_EXP 70
24310: PUSH
24311: LD_INT 1
24313: EQUAL
24314: AND
24315: IFFALSE 24439
24317: GO 24319
24319: DISABLE
// begin InGameOn ;
24320: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24324: LD_INT 22
24326: PUSH
24327: LD_INT 1
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 21
24336: PUSH
24337: LD_INT 1
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PPUSH
24348: CALL_OW 69
24352: PPUSH
24353: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24357: LD_INT 7
24359: PPUSH
24360: LD_INT 22
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 21
24372: PUSH
24373: LD_INT 1
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PPUSH
24384: CALL_OW 70
24388: PPUSH
24389: LD_INT 70
24391: PPUSH
24392: LD_INT 104
24394: PPUSH
24395: CALL_OW 111
// if powellWarm = 1 then
24399: LD_EXP 70
24403: PUSH
24404: LD_INT 1
24406: EQUAL
24407: IFFALSE 24435
// begin Say ( Powell , DBack2-Pow-1 ) ;
24409: LD_EXP 17
24413: PPUSH
24414: LD_STRING DBack2-Pow-1
24416: PPUSH
24417: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24421: LD_ADDR_EXP 70
24425: PUSH
24426: LD_EXP 70
24430: PUSH
24431: LD_INT 1
24433: PLUS
24434: ST_TO_ADDR
// end ; InGameOff ;
24435: CALL_OW 9
// end ;
24439: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
24440: LD_INT 7
24442: PPUSH
24443: LD_INT 22
24445: PUSH
24446: LD_INT 1
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 21
24455: PUSH
24456: LD_INT 1
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PPUSH
24467: CALL_OW 70
24471: PUSH
24472: LD_INT 0
24474: GREATER
24475: PUSH
24476: LD_EXP 17
24480: PPUSH
24481: CALL_OW 302
24485: AND
24486: PUSH
24487: LD_EXP 70
24491: PUSH
24492: LD_INT 2
24494: EQUAL
24495: AND
24496: IFFALSE 24613
24498: GO 24500
24500: DISABLE
// begin InGameOn ;
24501: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24505: LD_INT 22
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 21
24517: PUSH
24518: LD_INT 1
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PPUSH
24529: CALL_OW 69
24533: PPUSH
24534: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24538: LD_INT 7
24540: PPUSH
24541: LD_INT 22
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 21
24553: PUSH
24554: LD_INT 1
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PPUSH
24565: CALL_OW 70
24569: PPUSH
24570: LD_INT 70
24572: PPUSH
24573: LD_INT 104
24575: PPUSH
24576: CALL_OW 111
// if powellWarm = 2 then
24580: LD_EXP 70
24584: PUSH
24585: LD_INT 2
24587: EQUAL
24588: IFFALSE 24609
// begin Say ( Powell , DBack3-Pow-1 ) ;
24590: LD_EXP 17
24594: PPUSH
24595: LD_STRING DBack3-Pow-1
24597: PPUSH
24598: CALL_OW 88
// YouLost ( Dismissed ) ;
24602: LD_STRING Dismissed
24604: PPUSH
24605: CALL_OW 104
// end ; InGameOff ;
24609: CALL_OW 9
// end ;
24613: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
24614: LD_INT 8
24616: PPUSH
24617: LD_INT 22
24619: PUSH
24620: LD_INT 1
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 21
24629: PUSH
24630: LD_INT 1
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PPUSH
24641: CALL_OW 70
24645: PUSH
24646: LD_INT 0
24648: GREATER
24649: PUSH
24650: LD_EXP 17
24654: PPUSH
24655: CALL_OW 302
24659: AND
24660: PUSH
24661: LD_EXP 70
24665: PUSH
24666: LD_INT 0
24668: EQUAL
24669: AND
24670: IFFALSE 24794
24672: GO 24674
24674: DISABLE
// begin InGameOn ;
24675: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24679: LD_INT 22
24681: PUSH
24682: LD_INT 1
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 21
24691: PUSH
24692: LD_INT 1
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PPUSH
24703: CALL_OW 69
24707: PPUSH
24708: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
24712: LD_INT 8
24714: PPUSH
24715: LD_INT 22
24717: PUSH
24718: LD_INT 1
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 21
24727: PUSH
24728: LD_INT 1
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PPUSH
24739: CALL_OW 70
24743: PPUSH
24744: LD_INT 71
24746: PPUSH
24747: LD_INT 63
24749: PPUSH
24750: CALL_OW 111
// if powellWarm = 0 then
24754: LD_EXP 70
24758: PUSH
24759: LD_INT 0
24761: EQUAL
24762: IFFALSE 24790
// begin Say ( Powell , DBack1-Pow-1 ) ;
24764: LD_EXP 17
24768: PPUSH
24769: LD_STRING DBack1-Pow-1
24771: PPUSH
24772: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24776: LD_ADDR_EXP 70
24780: PUSH
24781: LD_EXP 70
24785: PUSH
24786: LD_INT 1
24788: PLUS
24789: ST_TO_ADDR
// end ; InGameOff ;
24790: CALL_OW 9
// end ;
24794: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
24795: LD_INT 8
24797: PPUSH
24798: LD_INT 22
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 21
24810: PUSH
24811: LD_INT 1
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PPUSH
24822: CALL_OW 70
24826: PUSH
24827: LD_INT 0
24829: GREATER
24830: PUSH
24831: LD_EXP 17
24835: PPUSH
24836: CALL_OW 302
24840: AND
24841: PUSH
24842: LD_EXP 70
24846: PUSH
24847: LD_INT 1
24849: EQUAL
24850: AND
24851: IFFALSE 24975
24853: GO 24855
24855: DISABLE
// begin InGameOn ;
24856: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24860: LD_INT 22
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 21
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PPUSH
24884: CALL_OW 69
24888: PPUSH
24889: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
24893: LD_INT 8
24895: PPUSH
24896: LD_INT 22
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 21
24908: PUSH
24909: LD_INT 1
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PPUSH
24920: CALL_OW 70
24924: PPUSH
24925: LD_INT 71
24927: PPUSH
24928: LD_INT 63
24930: PPUSH
24931: CALL_OW 111
// if powellWarm = 1 then
24935: LD_EXP 70
24939: PUSH
24940: LD_INT 1
24942: EQUAL
24943: IFFALSE 24971
// begin Say ( Powell , DBack2-Pow-1 ) ;
24945: LD_EXP 17
24949: PPUSH
24950: LD_STRING DBack2-Pow-1
24952: PPUSH
24953: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24957: LD_ADDR_EXP 70
24961: PUSH
24962: LD_EXP 70
24966: PUSH
24967: LD_INT 1
24969: PLUS
24970: ST_TO_ADDR
// end ; InGameOff ;
24971: CALL_OW 9
// end ;
24975: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
24976: LD_INT 8
24978: PPUSH
24979: LD_INT 22
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 21
24991: PUSH
24992: LD_INT 1
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PPUSH
25003: CALL_OW 70
25007: PUSH
25008: LD_INT 0
25010: GREATER
25011: PUSH
25012: LD_EXP 17
25016: PPUSH
25017: CALL_OW 302
25021: AND
25022: PUSH
25023: LD_EXP 70
25027: PUSH
25028: LD_INT 2
25030: EQUAL
25031: AND
25032: IFFALSE 25149
25034: GO 25036
25036: DISABLE
// begin InGameOn ;
25037: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25041: LD_INT 22
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 21
25053: PUSH
25054: LD_INT 1
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PPUSH
25065: CALL_OW 69
25069: PPUSH
25070: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25074: LD_INT 8
25076: PPUSH
25077: LD_INT 22
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 21
25089: PUSH
25090: LD_INT 1
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PPUSH
25101: CALL_OW 70
25105: PPUSH
25106: LD_INT 71
25108: PPUSH
25109: LD_INT 63
25111: PPUSH
25112: CALL_OW 111
// if powellWarm = 2 then
25116: LD_EXP 70
25120: PUSH
25121: LD_INT 2
25123: EQUAL
25124: IFFALSE 25145
// begin Say ( Powell , DBack3-Pow-1 ) ;
25126: LD_EXP 17
25130: PPUSH
25131: LD_STRING DBack3-Pow-1
25133: PPUSH
25134: CALL_OW 88
// YouLost ( Dismissed ) ;
25138: LD_STRING Dismissed
25140: PPUSH
25141: CALL_OW 104
// end ; InGameOff ;
25145: CALL_OW 9
// end ;
25149: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
25150: LD_EXP 68
25154: PUSH
25155: LD_INT 1
25157: EQUAL
25158: IFFALSE 25207
25160: GO 25162
25162: DISABLE
25163: LD_INT 0
25165: PPUSH
// begin enable ;
25166: ENABLE
// for i = 1 to amUnitsAttack do
25167: LD_ADDR_VAR 0 1
25171: PUSH
25172: DOUBLE
25173: LD_INT 1
25175: DEC
25176: ST_TO_ADDR
25177: LD_EXP 65
25181: PUSH
25182: FOR_TO
25183: IFFALSE 25205
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
25185: LD_INT 8
25187: PPUSH
25188: LD_EXP 65
25192: PUSH
25193: LD_VAR 0 1
25197: ARRAY
25198: PPUSH
25199: CALL_OW 471
25203: GO 25182
25205: POP
25206: POP
// end ;
25207: PPOPN 1
25209: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
25210: LD_INT 22
25212: PUSH
25213: LD_INT 4
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 21
25222: PUSH
25223: LD_INT 2
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 3
25232: PUSH
25233: LD_INT 58
25235: PUSH
25236: EMPTY
25237: LIST
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: LIST
25247: PPUSH
25248: CALL_OW 69
25252: PUSH
25253: LD_INT 0
25255: EQUAL
25256: PUSH
25257: LD_EXP 68
25261: PUSH
25262: LD_INT 1
25264: EQUAL
25265: AND
25266: IFFALSE 25437
25268: GO 25270
25270: DISABLE
// begin powellAttacks = 2 ;
25271: LD_ADDR_EXP 68
25275: PUSH
25276: LD_INT 2
25278: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25279: LD_INT 85
25281: PPUSH
25282: LD_INT 3
25284: PPUSH
25285: LD_INT 3
25287: PPUSH
25288: LD_INT 1
25290: PPUSH
25291: LD_INT 5
25293: PUSH
25294: LD_INT 7
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 1
25303: PPUSH
25304: LD_INT 2
25306: PPUSH
25307: CALL_OW 12
25311: ARRAY
25312: PPUSH
25313: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25317: LD_INT 85
25319: PPUSH
25320: LD_INT 3
25322: PPUSH
25323: LD_INT 3
25325: PPUSH
25326: LD_INT 1
25328: PPUSH
25329: LD_INT 5
25331: PUSH
25332: LD_INT 7
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 1
25341: PPUSH
25342: LD_INT 2
25344: PPUSH
25345: CALL_OW 12
25349: ARRAY
25350: PPUSH
25351: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25355: LD_INT 85
25357: PPUSH
25358: LD_INT 3
25360: PPUSH
25361: LD_INT 3
25363: PPUSH
25364: LD_INT 1
25366: PPUSH
25367: LD_INT 5
25369: PUSH
25370: LD_INT 7
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 1
25379: PPUSH
25380: LD_INT 2
25382: PPUSH
25383: CALL_OW 12
25387: ARRAY
25388: PPUSH
25389: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
25393: LD_INT 85
25395: PPUSH
25396: LD_INT 5
25398: PPUSH
25399: LD_INT 3
25401: PPUSH
25402: LD_INT 1
25404: PPUSH
25405: LD_INT 6
25407: PPUSH
25408: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
25412: LD_ADDR_EXP 72
25416: PUSH
25417: LD_INT 85
25419: PPUSH
25420: LD_INT 3
25422: PPUSH
25423: LD_INT 3
25425: PPUSH
25426: LD_INT 1
25428: PPUSH
25429: LD_INT 3
25431: PPUSH
25432: CALL_OW 185
25436: ST_TO_ADDR
// end ;
25437: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
25438: LD_INT 22
25440: PUSH
25441: LD_INT 4
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 21
25450: PUSH
25451: LD_INT 2
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 3
25460: PUSH
25461: LD_INT 58
25463: PUSH
25464: EMPTY
25465: LIST
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: LIST
25475: PPUSH
25476: CALL_OW 69
25480: PUSH
25481: LD_INT 5
25483: GREATEREQUAL
25484: PUSH
25485: LD_EXP 71
25489: PUSH
25490: LD_INT 1
25492: EQUAL
25493: AND
25494: IFFALSE 25507
25496: GO 25498
25498: DISABLE
// startAttacks = 0 ;
25499: LD_ADDR_EXP 71
25503: PUSH
25504: LD_INT 0
25506: ST_TO_ADDR
25507: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
25508: LD_INT 22
25510: PUSH
25511: LD_INT 4
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 21
25520: PUSH
25521: LD_INT 2
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 3
25530: PUSH
25531: LD_INT 58
25533: PUSH
25534: EMPTY
25535: LIST
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: LIST
25545: PPUSH
25546: CALL_OW 69
25550: PUSH
25551: LD_INT 5
25553: GREATEREQUAL
25554: PUSH
25555: LD_INT 22
25557: PUSH
25558: LD_INT 6
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 21
25567: PUSH
25568: LD_INT 2
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 24
25577: PUSH
25578: LD_INT 250
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: LIST
25589: PPUSH
25590: CALL_OW 69
25594: PUSH
25595: LD_INT 0
25597: EQUAL
25598: AND
25599: PUSH
25600: LD_EXP 71
25604: PUSH
25605: LD_INT 0
25607: EQUAL
25608: AND
25609: PUSH
25610: LD_EXP 68
25614: PUSH
25615: LD_INT 2
25617: EQUAL
25618: AND
25619: IFFALSE 26528
25621: GO 25623
25623: DISABLE
25624: LD_INT 0
25626: PPUSH
25627: PPUSH
25628: PPUSH
25629: PPUSH
// begin powellAttacks = 3 ;
25630: LD_ADDR_EXP 68
25634: PUSH
25635: LD_INT 3
25637: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
25638: LD_ADDR_VAR 0 1
25642: PUSH
25643: DOUBLE
25644: LD_INT 1
25646: DEC
25647: ST_TO_ADDR
25648: LD_EXP 65
25652: PUSH
25653: FOR_TO
25654: IFFALSE 25676
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
25656: LD_INT 8
25658: PPUSH
25659: LD_EXP 65
25663: PUSH
25664: LD_VAR 0 1
25668: ARRAY
25669: PPUSH
25670: CALL_OW 472
25674: GO 25653
25676: POP
25677: POP
// wait ( 0 0$5 ) ;
25678: LD_INT 175
25680: PPUSH
25681: CALL_OW 67
// Video ( true ) ;
25685: LD_INT 1
25687: PPUSH
25688: CALL 6861 0 1
// CenterNowOnUnits ( Powell ) ;
25692: LD_EXP 17
25696: PPUSH
25697: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
25701: LD_EXP 17
25705: PPUSH
25706: LD_INT 45
25708: PPUSH
25709: LD_INT 64
25711: PPUSH
25712: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
25716: LD_EXP 17
25720: PPUSH
25721: LD_INT 46
25723: PPUSH
25724: LD_INT 66
25726: PPUSH
25727: CALL_OW 178
// for i = 5 to 8 do
25731: LD_ADDR_VAR 0 1
25735: PUSH
25736: DOUBLE
25737: LD_INT 5
25739: DEC
25740: ST_TO_ADDR
25741: LD_INT 8
25743: PUSH
25744: FOR_TO
25745: IFFALSE 25891
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
25747: LD_EXP 65
25751: PUSH
25752: LD_VAR 0 1
25756: ARRAY
25757: PPUSH
25758: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
25762: LD_EXP 65
25766: PUSH
25767: LD_VAR 0 1
25771: ARRAY
25772: PPUSH
25773: CALL_OW 121
// wait ( 0 0$1 ) ;
25777: LD_INT 35
25779: PPUSH
25780: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
25784: LD_EXP 65
25788: PUSH
25789: LD_VAR 0 1
25793: ARRAY
25794: PPUSH
25795: LD_INT 92
25797: PPUSH
25798: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
25802: LD_EXP 65
25806: PUSH
25807: LD_VAR 0 1
25811: ARRAY
25812: PPUSH
25813: LD_INT 1
25815: PPUSH
25816: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
25820: LD_EXP 65
25824: PUSH
25825: LD_VAR 0 1
25829: ARRAY
25830: PPUSH
25831: CALL_OW 182
// wait ( 0 0$1 ) ;
25835: LD_INT 35
25837: PPUSH
25838: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 43 + i , 66 ) ;
25842: LD_EXP 65
25846: PUSH
25847: LD_VAR 0 1
25851: ARRAY
25852: PPUSH
25853: LD_INT 43
25855: PUSH
25856: LD_VAR 0 1
25860: PLUS
25861: PPUSH
25862: LD_INT 66
25864: PPUSH
25865: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
25869: LD_EXP 65
25873: PUSH
25874: LD_VAR 0 1
25878: ARRAY
25879: PPUSH
25880: LD_EXP 17
25884: PPUSH
25885: CALL_OW 179
// end ;
25889: GO 25744
25891: POP
25892: POP
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
25893: LD_ADDR_VAR 0 3
25897: PUSH
25898: LD_INT 22
25900: PUSH
25901: LD_INT 4
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 21
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 56
25920: PUSH
25921: EMPTY
25922: LIST
25923: PUSH
25924: LD_INT 3
25926: PUSH
25927: LD_INT 60
25929: PUSH
25930: EMPTY
25931: LIST
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: PPUSH
25943: CALL_OW 69
25947: PUSH
25948: LD_EXP 17
25952: PUSH
25953: EMPTY
25954: LIST
25955: DIFF
25956: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
25957: LD_VAR 0 3
25961: PPUSH
25962: LD_INT 92
25964: PPUSH
25965: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
25969: LD_VAR 0 3
25973: PPUSH
25974: LD_INT 1
25976: PPUSH
25977: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
25981: LD_EXP 17
25985: PPUSH
25986: LD_STRING D5-Pow-1
25988: PPUSH
25989: CALL_OW 88
// for i = 1 to amUnitsAttack do
25993: LD_ADDR_VAR 0 1
25997: PUSH
25998: DOUBLE
25999: LD_INT 1
26001: DEC
26002: ST_TO_ADDR
26003: LD_EXP 65
26007: PUSH
26008: FOR_TO
26009: IFFALSE 26054
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
26011: LD_EXP 65
26015: PUSH
26016: LD_VAR 0 1
26020: ARRAY
26021: PPUSH
26022: CALL_OW 258
26026: PUSH
26027: LD_INT 1
26029: EQUAL
26030: IFFALSE 26052
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
26032: LD_EXP 65
26036: PUSH
26037: LD_VAR 0 1
26041: ARRAY
26042: PPUSH
26043: LD_STRING D5-Sol2-1
26045: PPUSH
26046: CALL_OW 88
// break ;
26050: GO 26054
// end ;
26052: GO 26008
26054: POP
26055: POP
// Say ( Powell , D5-Pow-2 ) ;
26056: LD_EXP 17
26060: PPUSH
26061: LD_STRING D5-Pow-2
26063: PPUSH
26064: CALL_OW 88
// for i = 1 to amUnitsAttack do
26068: LD_ADDR_VAR 0 1
26072: PUSH
26073: DOUBLE
26074: LD_INT 1
26076: DEC
26077: ST_TO_ADDR
26078: LD_EXP 65
26082: PUSH
26083: FOR_TO
26084: IFFALSE 26129
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
26086: LD_EXP 65
26090: PUSH
26091: LD_VAR 0 1
26095: ARRAY
26096: PPUSH
26097: CALL_OW 258
26101: PUSH
26102: LD_INT 1
26104: EQUAL
26105: IFFALSE 26127
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
26107: LD_EXP 65
26111: PUSH
26112: LD_VAR 0 1
26116: ARRAY
26117: PPUSH
26118: LD_STRING D5-Sol2-2
26120: PPUSH
26121: CALL_OW 88
// break ;
26125: GO 26129
// end ;
26127: GO 26083
26129: POP
26130: POP
// Say ( Powell , D5-Pow-3 ) ;
26131: LD_EXP 17
26135: PPUSH
26136: LD_STRING D5-Pow-3
26138: PPUSH
26139: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
26143: LD_INT 22
26145: PUSH
26146: LD_INT 4
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 21
26155: PUSH
26156: LD_INT 2
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 3
26165: PUSH
26166: LD_INT 58
26168: PUSH
26169: EMPTY
26170: LIST
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: LIST
26180: PPUSH
26181: CALL_OW 69
26185: PPUSH
26186: LD_INT 59
26188: PPUSH
26189: LD_INT 21
26191: PPUSH
26192: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
26196: LD_EXP 65
26200: PPUSH
26201: LD_INT 59
26203: PPUSH
26204: LD_INT 21
26206: PPUSH
26207: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
26211: LD_INT 61
26213: PPUSH
26214: LD_INT 35
26216: PPUSH
26217: CALL_OW 84
// wait ( 0 0$15 ) ;
26221: LD_INT 525
26223: PPUSH
26224: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
26228: LD_EXP 17
26232: PPUSH
26233: LD_STRING D5a-Pow-1
26235: PPUSH
26236: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
26240: LD_EXP 17
26244: PPUSH
26245: LD_STRING D5a-Pow-1a
26247: PPUSH
26248: CALL_OW 88
// wait ( 0 0$2 ) ;
26252: LD_INT 70
26254: PPUSH
26255: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
26259: LD_EXP 17
26263: PPUSH
26264: LD_STRING D5a-Pow-1b
26266: PPUSH
26267: CALL_OW 88
// wait ( 0 0$3 ) ;
26271: LD_INT 105
26273: PPUSH
26274: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
26278: LD_EXP 17
26282: PPUSH
26283: LD_STRING D5a-Pow-1c
26285: PPUSH
26286: CALL_OW 88
// wait ( 0 0$1 ) ;
26290: LD_INT 35
26292: PPUSH
26293: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
26297: LD_EXP 17
26301: PPUSH
26302: LD_STRING D5a-Pow-1d
26304: PPUSH
26305: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
26309: LD_INT 35
26311: PPUSH
26312: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
26316: LD_INT 22
26318: PUSH
26319: LD_INT 4
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 21
26328: PUSH
26329: LD_INT 2
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 3
26338: PUSH
26339: LD_INT 58
26341: PUSH
26342: EMPTY
26343: LIST
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: LIST
26353: PPUSH
26354: CALL_OW 69
26358: PPUSH
26359: LD_INT 59
26361: PPUSH
26362: LD_INT 21
26364: PPUSH
26365: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
26369: LD_EXP 65
26373: PPUSH
26374: LD_INT 59
26376: PPUSH
26377: LD_INT 21
26379: PPUSH
26380: CALL_OW 114
// until amUnitsAttack = [ ] ;
26384: LD_EXP 65
26388: PUSH
26389: EMPTY
26390: EQUAL
26391: IFFALSE 26309
// CenterNowOnUnits ( Powell ) ;
26393: LD_EXP 17
26397: PPUSH
26398: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
26402: LD_ADDR_VAR 0 3
26406: PUSH
26407: LD_INT 22
26409: PUSH
26410: LD_INT 4
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 21
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PPUSH
26431: CALL_OW 69
26435: PUSH
26436: LD_EXP 17
26440: PUSH
26441: EMPTY
26442: LIST
26443: DIFF
26444: ST_TO_ADDR
// for i in powellPeople do
26445: LD_ADDR_VAR 0 1
26449: PUSH
26450: LD_VAR 0 3
26454: PUSH
26455: FOR_IN
26456: IFFALSE 26485
// if GetSex ( i ) = sex_male then
26458: LD_VAR 0 1
26462: PPUSH
26463: CALL_OW 258
26467: PUSH
26468: LD_INT 1
26470: EQUAL
26471: IFFALSE 26483
// sold = i ;
26473: LD_ADDR_VAR 0 2
26477: PUSH
26478: LD_VAR 0 1
26482: ST_TO_ADDR
26483: GO 26455
26485: POP
26486: POP
// Say ( sold , D6-Sol3-1 ) ;
26487: LD_VAR 0 2
26491: PPUSH
26492: LD_STRING D6-Sol3-1
26494: PPUSH
26495: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
26499: LD_EXP 17
26503: PPUSH
26504: LD_STRING D6-Pow-1
26506: PPUSH
26507: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
26511: LD_INT 139
26513: PUSH
26514: LD_INT 138
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PPUSH
26521: LD_INT 12
26523: PPUSH
26524: CALL_OW 113
// end ;
26528: PPOPN 4
26530: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
26531: LD_EXP 68
26535: PUSH
26536: LD_INT 3
26538: EQUAL
26539: PUSH
26540: LD_INT 12
26542: PPUSH
26543: LD_INT 22
26545: PUSH
26546: LD_INT 8
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 21
26555: PUSH
26556: LD_INT 2
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PPUSH
26567: CALL_OW 70
26571: PUSH
26572: LD_INT 2
26574: EQUAL
26575: AND
26576: IFFALSE 26737
26578: GO 26580
26580: DISABLE
26581: LD_INT 0
26583: PPUSH
26584: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
26585: LD_INT 8
26587: PPUSH
26588: LD_INT 1
26590: PPUSH
26591: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
26595: LD_INT 4
26597: PPUSH
26598: LD_INT 8
26600: PPUSH
26601: LD_INT 1
26603: PPUSH
26604: LD_INT 1
26606: PPUSH
26607: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
26611: LD_ADDR_VAR 0 1
26615: PUSH
26616: LD_INT 92
26618: PPUSH
26619: CALL_OW 313
26623: PUSH
26624: FOR_IN
26625: IFFALSE 26656
// if GetSex ( i ) = sex_male then
26627: LD_VAR 0 1
26631: PPUSH
26632: CALL_OW 258
26636: PUSH
26637: LD_INT 1
26639: EQUAL
26640: IFFALSE 26654
// begin tmp = i ;
26642: LD_ADDR_VAR 0 2
26646: PUSH
26647: LD_VAR 0 1
26651: ST_TO_ADDR
// break ;
26652: GO 26656
// end ;
26654: GO 26624
26656: POP
26657: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
26658: LD_INT 92
26660: PPUSH
26661: CALL_OW 313
26665: PPUSH
26666: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
26670: LD_VAR 0 2
26674: PPUSH
26675: LD_STRING D6-Sol3-2
26677: PPUSH
26678: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
26682: LD_INT 139
26684: PUSH
26685: LD_INT 138
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PPUSH
26692: LD_INT 85
26694: PPUSH
26695: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
26699: LD_INT 4
26701: PPUSH
26702: LD_INT 8
26704: PPUSH
26705: LD_INT 2
26707: PPUSH
26708: LD_INT 1
26710: PPUSH
26711: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
26715: LD_INT 8
26717: PPUSH
26718: LD_INT 8
26720: PPUSH
26721: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
26725: LD_EXP 17
26729: PPUSH
26730: LD_STRING D6-Pow-2
26732: PPUSH
26733: CALL_OW 88
// end ;
26737: PPOPN 2
26739: END
// every 0 0$1 trigger IsDead ( AmFact ) do var i , tmp ;
26740: LD_INT 85
26742: PPUSH
26743: CALL_OW 301
26747: IFFALSE 27039
26749: GO 26751
26751: DISABLE
26752: LD_INT 0
26754: PPUSH
26755: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
26756: LD_ADDR_VAR 0 1
26760: PUSH
26761: LD_INT 22
26763: PUSH
26764: LD_INT 4
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 21
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 56
26783: PUSH
26784: EMPTY
26785: LIST
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: LIST
26791: PPUSH
26792: CALL_OW 69
26796: PUSH
26797: LD_EXP 17
26801: PUSH
26802: EMPTY
26803: LIST
26804: DIFF
26805: PUSH
26806: FOR_IN
26807: IFFALSE 26838
// if GetSex ( i ) = sex_male then
26809: LD_VAR 0 1
26813: PPUSH
26814: CALL_OW 258
26818: PUSH
26819: LD_INT 1
26821: EQUAL
26822: IFFALSE 26836
// begin tmp = i ;
26824: LD_ADDR_VAR 0 2
26828: PUSH
26829: LD_VAR 0 1
26833: ST_TO_ADDR
// break ;
26834: GO 26838
// end ;
26836: GO 26806
26838: POP
26839: POP
// Say ( Powell , D6a-Pow-1 ) ;
26840: LD_EXP 17
26844: PPUSH
26845: LD_STRING D6a-Pow-1
26847: PPUSH
26848: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
26852: LD_VAR 0 2
26856: PPUSH
26857: LD_STRING D6a-Sol3-1
26859: PPUSH
26860: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
26864: LD_EXP 17
26868: PPUSH
26869: LD_VAR 0 2
26873: PPUSH
26874: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
26878: LD_EXP 17
26882: PPUSH
26883: LD_STRING D6a-Pow-2
26885: PPUSH
26886: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
26890: LD_VAR 0 2
26894: PPUSH
26895: LD_STRING D6a-Sol3-2
26897: PPUSH
26898: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
26902: LD_EXP 17
26906: PPUSH
26907: LD_STRING D6a-Pow-3
26909: PPUSH
26910: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
26914: LD_EXP 17
26918: PPUSH
26919: LD_EXP 72
26923: PPUSH
26924: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
26928: LD_INT 35
26930: PPUSH
26931: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
26935: LD_EXP 17
26939: PPUSH
26940: LD_EXP 72
26944: PPUSH
26945: CALL_OW 120
// until IsInUnit ( Powell ) ;
26949: LD_EXP 17
26953: PPUSH
26954: CALL_OW 310
26958: IFFALSE 26928
// wait ( 0 0$1 ) ;
26960: LD_INT 35
26962: PPUSH
26963: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
26967: LD_EXP 72
26971: PPUSH
26972: LD_INT 77
26974: PPUSH
26975: LD_INT 64
26977: PPUSH
26978: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
26982: LD_EXP 72
26986: PPUSH
26987: LD_INT 91
26989: PPUSH
26990: LD_INT 61
26992: PPUSH
26993: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
26997: LD_EXP 72
27001: PPUSH
27002: LD_INT 74
27004: PPUSH
27005: LD_INT 25
27007: PPUSH
27008: CALL_OW 171
// centerPowell = 1 ;
27012: LD_ADDR_EXP 73
27016: PUSH
27017: LD_INT 1
27019: ST_TO_ADDR
// wait ( 0 0$15 ) ;
27020: LD_INT 525
27022: PPUSH
27023: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
27027: LD_EXP 17
27031: PPUSH
27032: LD_STRING D6b-Pow-1
27034: PPUSH
27035: CALL_OW 88
// end ;
27039: PPOPN 2
27041: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
27042: LD_EXP 72
27046: PPUSH
27047: LD_INT 13
27049: PPUSH
27050: CALL_OW 308
27054: PUSH
27055: LD_EXP 68
27059: PUSH
27060: LD_INT 3
27062: EQUAL
27063: AND
27064: IFFALSE 27206
27066: GO 27068
27068: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
27069: LD_EXP 72
27073: PPUSH
27074: LD_INT 250
27076: PPUSH
27077: CALL_OW 234
// DialogueOn ;
27081: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
27085: LD_EXP 17
27089: PPUSH
27090: LD_STRING D6b-Pow-1a
27092: PPUSH
27093: CALL_OW 88
// DialogueOff ;
27097: CALL_OW 7
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
27101: LD_EXP 17
27105: PPUSH
27106: LD_INT 22
27108: PUSH
27109: LD_INT 8
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 34
27118: PUSH
27119: LD_INT 29
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 50
27128: PUSH
27129: EMPTY
27130: LIST
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: LIST
27136: PPUSH
27137: CALL_OW 69
27141: PUSH
27142: LD_INT 1
27144: ARRAY
27145: PPUSH
27146: CALL_OW 120
// wait ( 0 0$1 ) ;
27150: LD_INT 35
27152: PPUSH
27153: CALL_OW 67
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
27157: LD_EXP 17
27161: PPUSH
27162: LD_INT 22
27164: PUSH
27165: LD_INT 8
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 34
27174: PUSH
27175: LD_INT 29
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 50
27184: PUSH
27185: EMPTY
27186: LIST
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: LIST
27192: PPUSH
27193: CALL_OW 69
27197: PUSH
27198: LD_INT 1
27200: ARRAY
27201: PPUSH
27202: CALL_OW 120
// end ;
27206: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
27207: LD_INT 22
27209: PUSH
27210: LD_INT 4
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 34
27219: PUSH
27220: LD_INT 29
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PPUSH
27231: CALL_OW 69
27235: IFFALSE 27667
27237: GO 27239
27239: DISABLE
// begin powBomb = FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) [ 1 ] ;
27240: LD_ADDR_EXP 74
27244: PUSH
27245: LD_INT 22
27247: PUSH
27248: LD_INT 4
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 34
27257: PUSH
27258: LD_INT 29
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PPUSH
27269: CALL_OW 69
27273: PUSH
27274: LD_INT 1
27276: ARRAY
27277: ST_TO_ADDR
// SetAttitude ( 8 , 4 , att_friend , true ) ;
27278: LD_INT 8
27280: PPUSH
27281: LD_INT 4
27283: PPUSH
27284: LD_INT 1
27286: PPUSH
27287: LD_INT 1
27289: PPUSH
27290: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
27294: LD_EXP 74
27298: PPUSH
27299: LD_INT 80
27301: PPUSH
27302: LD_INT 19
27304: PPUSH
27305: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
27309: LD_EXP 74
27313: PPUSH
27314: LD_INT 74
27316: PPUSH
27317: LD_INT 15
27319: PPUSH
27320: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
27324: LD_EXP 74
27328: PPUSH
27329: LD_INT 72
27331: PPUSH
27332: LD_INT 19
27334: PPUSH
27335: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
27339: LD_EXP 74
27343: PPUSH
27344: LD_INT 78
27346: PPUSH
27347: LD_INT 24
27349: PPUSH
27350: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
27354: LD_EXP 74
27358: PPUSH
27359: LD_INT 77
27361: PPUSH
27362: LD_INT 20
27364: PPUSH
27365: CALL_OW 171
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
27369: LD_EXP 74
27373: PPUSH
27374: LD_INT 74
27376: PPUSH
27377: LD_INT 15
27379: PPUSH
27380: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
27384: LD_EXP 74
27388: PPUSH
27389: LD_INT 72
27391: PPUSH
27392: LD_INT 19
27394: PPUSH
27395: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
27399: LD_EXP 74
27403: PPUSH
27404: LD_INT 78
27406: PPUSH
27407: LD_INT 24
27409: PPUSH
27410: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
27414: LD_EXP 74
27418: PPUSH
27419: LD_INT 77
27421: PPUSH
27422: LD_INT 20
27424: PPUSH
27425: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
27429: LD_EXP 74
27433: PPUSH
27434: LD_INT 78
27436: PPUSH
27437: LD_INT 15
27439: PPUSH
27440: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
27444: LD_EXP 17
27448: PPUSH
27449: LD_STRING D6b-Pow-1b
27451: PPUSH
27452: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
27456: LD_INT 22
27458: PUSH
27459: LD_INT 8
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 21
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 25
27478: PUSH
27479: LD_INT 1
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 26
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: PPUSH
27502: CALL_OW 69
27506: PUSH
27507: LD_INT 1
27509: ARRAY
27510: PPUSH
27511: LD_STRING D6b-ArSol1-1
27513: PPUSH
27514: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D6b-ArSol2-1 ) ;
27518: LD_INT 22
27520: PUSH
27521: LD_INT 8
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 21
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 25
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 26
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: PPUSH
27564: CALL_OW 69
27568: PUSH
27569: LD_INT 2
27571: ARRAY
27572: PPUSH
27573: LD_STRING D6b-ArSol2-1
27575: PPUSH
27576: CALL_OW 88
// Say ( Powell , D6b-Pow-2 ) ;
27580: LD_EXP 17
27584: PPUSH
27585: LD_STRING D6b-Pow-2
27587: PPUSH
27588: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
27592: LD_INT 35
27594: PPUSH
27595: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 2 ;
27599: LD_EXP 74
27603: PPUSH
27604: LD_INT 78
27606: PPUSH
27607: LD_INT 15
27609: PPUSH
27610: CALL_OW 297
27614: PUSH
27615: LD_INT 2
27617: LESS
27618: IFFALSE 27592
// wait ( 0 0$1 ) ;
27620: LD_INT 35
27622: PPUSH
27623: CALL_OW 67
// DialogueOn ;
27627: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
27631: LD_EXP 17
27635: PPUSH
27636: LD_STRING D6b-Pow-2a
27638: PPUSH
27639: CALL_OW 88
// DialogueOff ;
27643: CALL_OW 7
// centerPowell = 0 ;
27647: LD_ADDR_EXP 73
27651: PUSH
27652: LD_INT 0
27654: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
27655: LD_EXP 74
27659: PPUSH
27660: LD_INT 105
27662: PPUSH
27663: CALL_OW 115
// end ;
27667: END
// every 0 0$3 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
27668: LD_INT 105
27670: PPUSH
27671: CALL_OW 301
27675: PUSH
27676: LD_EXP 68
27680: PUSH
27681: LD_INT 3
27683: EQUAL
27684: AND
27685: IFFALSE 28519
27687: GO 27689
27689: DISABLE
27690: LD_INT 0
27692: PPUSH
27693: PPUSH
27694: PPUSH
27695: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
27696: LD_ADDR_VAR 0 2
27700: PUSH
27701: LD_INT 22
27703: PUSH
27704: LD_INT 4
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 21
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 26
27723: PUSH
27724: LD_INT 1
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: LIST
27735: PPUSH
27736: CALL_OW 69
27740: PUSH
27741: LD_EXP 1
27745: PUSH
27746: LD_EXP 3
27750: PUSH
27751: LD_EXP 21
27755: PUSH
27756: LD_EXP 22
27760: PUSH
27761: LD_EXP 23
27765: PUSH
27766: LD_EXP 4
27770: PUSH
27771: LD_EXP 5
27775: PUSH
27776: LD_EXP 6
27780: PUSH
27781: LD_EXP 7
27785: PUSH
27786: LD_EXP 8
27790: PUSH
27791: LD_EXP 9
27795: PUSH
27796: LD_EXP 10
27800: PUSH
27801: LD_EXP 11
27805: PUSH
27806: LD_EXP 12
27810: PUSH
27811: LD_EXP 13
27815: PUSH
27816: LD_EXP 14
27820: PUSH
27821: LD_EXP 15
27825: PUSH
27826: LD_EXP 17
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: DIFF
27851: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
27852: LD_INT 49
27854: PPUSH
27855: LD_INT 66
27857: PPUSH
27858: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
27862: LD_VAR 0 2
27866: PUSH
27867: LD_INT 1
27869: ARRAY
27870: PPUSH
27871: LD_STRING D6c-Sol3-1
27873: PPUSH
27874: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
27878: LD_EXP 1
27882: PPUSH
27883: LD_STRING D6c-JMM-1
27885: PPUSH
27886: CALL_OW 88
// if IsOk ( Cyrus ) then
27890: LD_EXP 7
27894: PPUSH
27895: CALL_OW 302
27899: IFFALSE 27913
// Say ( Cyrus , D6c-Cyrus-1 ) ;
27901: LD_EXP 7
27905: PPUSH
27906: LD_STRING D6c-Cyrus-1
27908: PPUSH
27909: CALL_OW 88
// if IsOk ( Bobby ) then
27913: LD_EXP 6
27917: PPUSH
27918: CALL_OW 302
27922: IFFALSE 27936
// Say ( Bobby , D6c-Bobby-1 ) ;
27924: LD_EXP 6
27928: PPUSH
27929: LD_STRING D6c-Bobby-1
27931: PPUSH
27932: CALL_OW 88
// if IsOk ( Cornel ) then
27936: LD_EXP 12
27940: PPUSH
27941: CALL_OW 302
27945: IFFALSE 27959
// Say ( Cornel , D6c-Corn-1 ) ;
27947: LD_EXP 12
27951: PPUSH
27952: LD_STRING D6c-Corn-1
27954: PPUSH
27955: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
27959: LD_VAR 0 2
27963: PUSH
27964: LD_INT 2
27966: ARRAY
27967: PPUSH
27968: LD_STRING D6c-Sol1-1
27970: PPUSH
27971: CALL_OW 88
// if IsOk ( Lisa ) then
27975: LD_EXP 4
27979: PPUSH
27980: CALL_OW 302
27984: IFFALSE 27998
// Say ( Lisa , D6c-Lisa-1 ) ;
27986: LD_EXP 4
27990: PPUSH
27991: LD_STRING D6c-Lisa-1
27993: PPUSH
27994: CALL_OW 88
// if IsOk ( Gary ) then
27998: LD_EXP 13
28002: PPUSH
28003: CALL_OW 302
28007: IFFALSE 28021
// Say ( Gary , D6c-Gary-1 ) ;
28009: LD_EXP 13
28013: PPUSH
28014: LD_STRING D6c-Gary-1
28016: PPUSH
28017: CALL_OW 88
// if IsOK ( Donaldson ) then
28021: LD_EXP 5
28025: PPUSH
28026: CALL_OW 302
28030: IFFALSE 28044
// Say ( Donaldson , D6c-Don-1 ) ;
28032: LD_EXP 5
28036: PPUSH
28037: LD_STRING D6c-Don-1
28039: PPUSH
28040: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
28044: LD_VAR 0 2
28048: PUSH
28049: LD_INT 3
28051: ARRAY
28052: PPUSH
28053: LD_STRING D6c-Sol2-1
28055: PPUSH
28056: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
28060: LD_INT 22
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 21
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PPUSH
28084: CALL_OW 69
28088: PPUSH
28089: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
28093: LD_INT 22
28095: PUSH
28096: LD_INT 4
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 21
28105: PUSH
28106: LD_INT 1
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PPUSH
28117: CALL_OW 69
28121: PPUSH
28122: CALL_OW 122
// wait ( 0 0$1 ) ;
28126: LD_INT 35
28128: PPUSH
28129: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
28133: LD_ADDR_VAR 0 3
28137: PUSH
28138: LD_INT 22
28140: PUSH
28141: LD_INT 1
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 21
28150: PUSH
28151: LD_INT 1
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PPUSH
28162: CALL_OW 69
28166: PUSH
28167: LD_EXP 1
28171: PUSH
28172: EMPTY
28173: LIST
28174: DIFF
28175: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
28176: LD_ADDR_VAR 0 4
28180: PUSH
28181: LD_INT 22
28183: PUSH
28184: LD_INT 4
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 21
28193: PUSH
28194: LD_INT 1
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PPUSH
28205: CALL_OW 69
28209: ST_TO_ADDR
// for i := 1 to tmp2 do
28210: LD_ADDR_VAR 0 1
28214: PUSH
28215: DOUBLE
28216: LD_INT 1
28218: DEC
28219: ST_TO_ADDR
28220: LD_VAR 0 4
28224: PUSH
28225: FOR_TO
28226: IFFALSE 28277
// begin ComMoveXY ( tmp2 [ i ] , 43 + i , 64 ) ;
28228: LD_VAR 0 4
28232: PUSH
28233: LD_VAR 0 1
28237: ARRAY
28238: PPUSH
28239: LD_INT 43
28241: PUSH
28242: LD_VAR 0 1
28246: PLUS
28247: PPUSH
28248: LD_INT 64
28250: PPUSH
28251: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
28255: LD_VAR 0 4
28259: PUSH
28260: LD_VAR 0 1
28264: ARRAY
28265: PPUSH
28266: LD_EXP 1
28270: PPUSH
28271: CALL_OW 179
// end ;
28275: GO 28225
28277: POP
28278: POP
// for i := 1 to tmp1 do
28279: LD_ADDR_VAR 0 1
28283: PUSH
28284: DOUBLE
28285: LD_INT 1
28287: DEC
28288: ST_TO_ADDR
28289: LD_VAR 0 3
28293: PUSH
28294: FOR_TO
28295: IFFALSE 28346
// begin ComMoveXY ( tmp1 [ i ] , 43 + i , 65 ) ;
28297: LD_VAR 0 3
28301: PUSH
28302: LD_VAR 0 1
28306: ARRAY
28307: PPUSH
28308: LD_INT 43
28310: PUSH
28311: LD_VAR 0 1
28315: PLUS
28316: PPUSH
28317: LD_INT 65
28319: PPUSH
28320: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
28324: LD_VAR 0 3
28328: PUSH
28329: LD_VAR 0 1
28333: ARRAY
28334: PPUSH
28335: LD_EXP 1
28339: PPUSH
28340: CALL_OW 179
// end ;
28344: GO 28294
28346: POP
28347: POP
// repeat wait ( 0 0$1 ) ;
28348: LD_INT 35
28350: PPUSH
28351: CALL_OW 67
// ComMoveXY ( JMM , 48 , 68 ) ;
28355: LD_EXP 1
28359: PPUSH
28360: LD_INT 48
28362: PPUSH
28363: LD_INT 68
28365: PPUSH
28366: CALL_OW 111
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
28370: LD_EXP 1
28374: PPUSH
28375: LD_INT 48
28377: PPUSH
28378: LD_INT 68
28380: PPUSH
28381: CALL_OW 297
28385: PUSH
28386: LD_INT 2
28388: LESS
28389: IFFALSE 28348
// AddComTurnXY ( JMM , 47 , 65 ) ;
28391: LD_EXP 1
28395: PPUSH
28396: LD_INT 47
28398: PPUSH
28399: LD_INT 65
28401: PPUSH
28402: CALL_OW 178
// wait ( 0 0$2 ) ;
28406: LD_INT 70
28408: PPUSH
28409: CALL_OW 67
// Say ( tmp [ 1 ] , D6c-Sol3-2 ) ;
28413: LD_VAR 0 2
28417: PUSH
28418: LD_INT 1
28420: ARRAY
28421: PPUSH
28422: LD_STRING D6c-Sol3-2
28424: PPUSH
28425: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
28429: LD_EXP 1
28433: PPUSH
28434: LD_STRING D6c-JMM-2
28436: PPUSH
28437: CALL_OW 88
// Video ( false ) ;
28441: LD_INT 0
28443: PPUSH
28444: CALL 6861 0 1
// centerPowell = 0 ;
28448: LD_ADDR_EXP 73
28452: PUSH
28453: LD_INT 0
28455: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
28456: LD_INT 22
28458: PUSH
28459: LD_INT 4
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PPUSH
28466: CALL_OW 69
28470: PPUSH
28471: LD_INT 1
28473: PPUSH
28474: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
28478: LD_STRING M2
28480: PPUSH
28481: CALL_OW 337
// ChangeSideFog ( 4 , 4 ) ;
28485: LD_INT 4
28487: PPUSH
28488: LD_INT 4
28490: PPUSH
28491: CALL_OW 343
// timerStatus = 1 ;
28495: LD_ADDR_EXP 95
28499: PUSH
28500: LD_INT 1
28502: ST_TO_ADDR
// missionStage = 1 ;
28503: LD_ADDR_EXP 100
28507: PUSH
28508: LD_INT 1
28510: ST_TO_ADDR
// startAttacks = 1 ;
28511: LD_ADDR_EXP 71
28515: PUSH
28516: LD_INT 1
28518: ST_TO_ADDR
// end ;
28519: PPOPN 4
28521: END
// every 0 0$1 trigger centerPowell = 1 do
28522: LD_EXP 73
28526: PUSH
28527: LD_INT 1
28529: EQUAL
28530: IFFALSE 28813
28532: GO 28534
28534: DISABLE
// begin enable ;
28535: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
28536: LD_EXP 17
28540: PUSH
28541: LD_EXP 74
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PPUSH
28550: LD_INT 1000
28552: PPUSH
28553: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
28557: LD_INT 22
28559: PUSH
28560: LD_INT 4
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 34
28569: PUSH
28570: LD_INT 29
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 33
28579: PUSH
28580: LD_INT 1
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: LIST
28591: PPUSH
28592: CALL_OW 69
28596: PUSH
28597: LD_INT 0
28599: GREATER
28600: IFFALSE 28653
// SetLives ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
28602: LD_INT 22
28604: PUSH
28605: LD_INT 4
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 34
28614: PUSH
28615: LD_INT 29
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 33
28624: PUSH
28625: LD_INT 1
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: LIST
28636: PPUSH
28637: CALL_OW 69
28641: PUSH
28642: LD_INT 1
28644: ARRAY
28645: PPUSH
28646: LD_INT 1000
28648: PPUSH
28649: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
28653: LD_INT 22
28655: PUSH
28656: LD_INT 8
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 34
28665: PUSH
28666: LD_INT 29
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 33
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: PPUSH
28688: CALL_OW 69
28692: PUSH
28693: LD_INT 0
28695: GREATER
28696: IFFALSE 28749
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
28698: LD_INT 22
28700: PUSH
28701: LD_INT 8
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 34
28710: PUSH
28711: LD_INT 29
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 33
28720: PUSH
28721: LD_INT 1
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: LIST
28732: PPUSH
28733: CALL_OW 69
28737: PUSH
28738: LD_INT 1
28740: ARRAY
28741: PPUSH
28742: LD_INT 1000
28744: PPUSH
28745: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
28749: LD_EXP 72
28753: PPUSH
28754: LD_INT 13
28756: PPUSH
28757: CALL_OW 308
28761: NOT
28762: IFFALSE 28776
// SetLives ( powellVeh , 1000 ) ;
28764: LD_EXP 72
28768: PPUSH
28769: LD_INT 1000
28771: PPUSH
28772: CALL_OW 234
// if not IsInUnit ( Powell ) then
28776: LD_EXP 17
28780: PPUSH
28781: CALL_OW 310
28785: NOT
28786: IFFALSE 28799
// CenterNowOnUnits ( Powell ) else
28788: LD_EXP 17
28792: PPUSH
28793: CALL_OW 87
28797: GO 28813
// CenterNowOnUnits ( IsInUnit ( Powell ) ) ;
28799: LD_EXP 17
28803: PPUSH
28804: CALL_OW 310
28808: PPUSH
28809: CALL_OW 87
// end ;
28813: END
// every 0 0$1 trigger timeAction >= 0 0$16 do
28814: LD_EXP 96
28818: PUSH
28819: LD_INT 560
28821: GREATEREQUAL
28822: IFFALSE 29034
28824: GO 28826
28826: DISABLE
// begin DialogueOn ;
28827: CALL_OW 6
// SayRadio ( LegionFriend , D7-Friend-1 ) ;
28831: LD_EXP 52
28835: PPUSH
28836: LD_STRING D7-Friend-1
28838: PPUSH
28839: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
28843: LD_EXP 1
28847: PPUSH
28848: LD_STRING D7-JMM-1
28850: PPUSH
28851: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-2 ) ;
28855: LD_EXP 52
28859: PPUSH
28860: LD_STRING D7-Friend-2
28862: PPUSH
28863: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
28867: LD_EXP 1
28871: PPUSH
28872: LD_STRING D7-JMM-2
28874: PPUSH
28875: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-3 ) ;
28879: LD_EXP 52
28883: PPUSH
28884: LD_STRING D7-Friend-3
28886: PPUSH
28887: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
28891: LD_EXP 1
28895: PPUSH
28896: LD_STRING D7-JMM-3
28898: PPUSH
28899: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-4 ) ;
28903: LD_EXP 52
28907: PPUSH
28908: LD_STRING D7-Friend-4
28910: PPUSH
28911: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
28915: LD_EXP 1
28919: PPUSH
28920: LD_STRING D7-JMM-4
28922: PPUSH
28923: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-5 ) ;
28927: LD_EXP 52
28931: PPUSH
28932: LD_STRING D7-Friend-5
28934: PPUSH
28935: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
28939: LD_EXP 1
28943: PPUSH
28944: LD_STRING D7-JMM-5
28946: PPUSH
28947: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-6 ) ;
28951: LD_EXP 52
28955: PPUSH
28956: LD_STRING D7-Friend-6
28958: PPUSH
28959: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
28963: LD_EXP 1
28967: PPUSH
28968: LD_STRING D7-JMM-6
28970: PPUSH
28971: CALL_OW 88
// DialogueOff ;
28975: CALL_OW 7
// PlaceUnitArea ( Kozlov , KozlovSpawn , false ) ;
28979: LD_EXP 35
28983: PPUSH
28984: LD_INT 15
28986: PPUSH
28987: LD_INT 0
28989: PPUSH
28990: CALL_OW 49
// SetClass ( Kozlov , 2 ) ;
28994: LD_EXP 35
28998: PPUSH
28999: LD_INT 2
29001: PPUSH
29002: CALL_OW 336
// ComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
29006: LD_EXP 35
29010: PPUSH
29011: LD_INT 2
29013: PPUSH
29014: LD_INT 78
29016: PPUSH
29017: LD_INT 12
29019: PPUSH
29020: LD_INT 3
29022: PPUSH
29023: CALL_OW 145
// ChangeMissionObjectives ( Mlegion ) ;
29027: LD_STRING Mlegion
29029: PPUSH
29030: CALL_OW 337
// end ;
29034: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 6 , 5 , 4 ] [ Difficulty ] do
29035: LD_INT 22
29037: PUSH
29038: LD_INT 8
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 21
29047: PUSH
29048: LD_INT 1
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 23
29057: PUSH
29058: LD_INT 2
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: LIST
29069: PPUSH
29070: CALL_OW 69
29074: PUSH
29075: LD_INT 6
29077: PUSH
29078: LD_INT 5
29080: PUSH
29081: LD_INT 4
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: LIST
29088: PUSH
29089: LD_OWVAR 67
29093: ARRAY
29094: LESSEQUAL
29095: IFFALSE 29409
29097: GO 29099
29099: DISABLE
// begin PlaceUnitArea ( Kurt , KurtSpawn , false ) ;
29100: LD_EXP 30
29104: PPUSH
29105: LD_INT 19
29107: PPUSH
29108: LD_INT 0
29110: PPUSH
29111: CALL_OW 49
// KillUnit ( Kozlov ) ;
29115: LD_EXP 35
29119: PPUSH
29120: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
29124: LD_INT 22
29126: PUSH
29127: LD_INT 8
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 21
29136: PUSH
29137: LD_INT 3
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 23
29146: PUSH
29147: LD_INT 3
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 30
29156: PUSH
29157: LD_INT 3
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: PPUSH
29170: CALL_OW 69
29174: PUSH
29175: LD_INT 1
29177: ARRAY
29178: PPUSH
29179: CALL_OW 66
// DialogueOn ;
29183: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
29187: LD_EXP 1
29191: PPUSH
29192: LD_STRING D13-JMM-1
29194: PPUSH
29195: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
29199: LD_EXP 30
29203: PPUSH
29204: LD_STRING D13-Kurt-1
29206: PPUSH
29207: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
29211: LD_EXP 1
29215: PPUSH
29216: LD_STRING D13-JMM-2
29218: PPUSH
29219: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
29223: LD_EXP 30
29227: PPUSH
29228: LD_STRING D13-Kurt-2a
29230: PPUSH
29231: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
29235: LD_EXP 1
29239: PPUSH
29240: LD_STRING D13-JMM-3
29242: PPUSH
29243: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
29247: LD_EXP 30
29251: PPUSH
29252: LD_STRING D13-Kurt-3
29254: PPUSH
29255: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
29259: LD_EXP 1
29263: PPUSH
29264: LD_STRING D13-JMM-4
29266: PPUSH
29267: CALL_OW 88
// DialogueOff ;
29271: CALL_OW 7
// SetSide ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] ] ) , 1 ) ;
29275: LD_INT 22
29277: PUSH
29278: LD_INT 8
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 50
29287: PUSH
29288: EMPTY
29289: LIST
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PPUSH
29295: CALL_OW 69
29299: PPUSH
29300: LD_INT 1
29302: PPUSH
29303: CALL_OW 235
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_lives , 250 ] ] ] ) , 0 ) ;
29307: LD_INT 22
29309: PUSH
29310: LD_INT 8
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 3
29319: PUSH
29320: LD_INT 24
29322: PUSH
29323: LD_INT 250
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PPUSH
29338: CALL_OW 69
29342: PPUSH
29343: LD_INT 0
29345: PPUSH
29346: CALL_OW 234
// ChangeMissionObjectives ( MlegionOut ) ;
29350: LD_STRING MlegionOut
29352: PPUSH
29353: CALL_OW 337
// SetAttitude ( 8 , 1 , att_friend , true ) ;
29357: LD_INT 8
29359: PPUSH
29360: LD_INT 1
29362: PPUSH
29363: LD_INT 1
29365: PPUSH
29366: LD_INT 1
29368: PPUSH
29369: CALL_OW 80
// PlaceUnitArea ( LegionFriend , LegFriendSpawn , false ) ;
29373: LD_EXP 52
29377: PPUSH
29378: LD_INT 30
29380: PPUSH
29381: LD_INT 0
29383: PPUSH
29384: CALL_OW 49
// wait ( 0 0$1 ) ;
29388: LD_INT 35
29390: PPUSH
29391: CALL_OW 67
// ComMoveUnit ( LegionFriend , JMM ) ;
29395: LD_EXP 52
29399: PPUSH
29400: LD_EXP 1
29404: PPUSH
29405: CALL_OW 112
// end ;
29409: END
// every 0 0$1 trigger See ( 1 , LegionFriend ) do var dec ;
29410: LD_INT 1
29412: PPUSH
29413: LD_EXP 52
29417: PPUSH
29418: CALL_OW 292
29422: IFFALSE 29698
29424: GO 29426
29426: DISABLE
29427: LD_INT 0
29429: PPUSH
// begin CenterNowOnUnits ( LegionFriend ) ;
29430: LD_EXP 52
29434: PPUSH
29435: CALL_OW 87
// DialogueOn ;
29439: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
29443: LD_EXP 1
29447: PPUSH
29448: LD_STRING D14-JMM-1
29450: PPUSH
29451: CALL_OW 88
// Say ( LegionFriend , D14-Friend-1 ) ;
29455: LD_EXP 52
29459: PPUSH
29460: LD_STRING D14-Friend-1
29462: PPUSH
29463: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
29467: LD_EXP 1
29471: PPUSH
29472: LD_STRING D14-JMM-2
29474: PPUSH
29475: CALL_OW 88
// Say ( LegionFriend , D14-Friend-2 ) ;
29479: LD_EXP 52
29483: PPUSH
29484: LD_STRING D14-Friend-2
29486: PPUSH
29487: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
29491: LD_EXP 1
29495: PPUSH
29496: LD_STRING D14-JMM-3
29498: PPUSH
29499: CALL_OW 88
// Say ( LegionFriend , D14-Friend-3 ) ;
29503: LD_EXP 52
29507: PPUSH
29508: LD_STRING D14-Friend-3
29510: PPUSH
29511: CALL_OW 88
// DialogueOff ;
29515: CALL_OW 7
// dec = Query ( Q14 ) ;
29519: LD_ADDR_VAR 0 1
29523: PUSH
29524: LD_STRING Q14
29526: PPUSH
29527: CALL_OW 97
29531: ST_TO_ADDR
// if dec = 1 then
29532: LD_VAR 0 1
29536: PUSH
29537: LD_INT 1
29539: EQUAL
29540: IFFALSE 29574
// begin DialogueOn ;
29542: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
29546: LD_EXP 1
29550: PPUSH
29551: LD_STRING D14a-JMM-1
29553: PPUSH
29554: CALL_OW 88
// DialogueOff ;
29558: CALL_OW 7
// SetSide ( LegionFriend , 1 ) ;
29562: LD_EXP 52
29566: PPUSH
29567: LD_INT 1
29569: PPUSH
29570: CALL_OW 235
// end ; if dec = 2 then
29574: LD_VAR 0 1
29578: PUSH
29579: LD_INT 2
29581: EQUAL
29582: IFFALSE 29616
// begin DialogueOn ;
29584: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
29588: LD_EXP 1
29592: PPUSH
29593: LD_STRING D14b-JMM-1
29595: PPUSH
29596: CALL_OW 88
// DialogueOff ;
29600: CALL_OW 7
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
29604: LD_EXP 52
29608: PPUSH
29609: LD_INT 18
29611: PPUSH
29612: CALL_OW 113
// end ; if dec = 3 then
29616: LD_VAR 0 1
29620: PUSH
29621: LD_INT 3
29623: EQUAL
29624: IFFALSE 29698
// begin DialogueOn ;
29626: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
29630: LD_EXP 1
29634: PPUSH
29635: LD_STRING D14c-JMM-1
29637: PPUSH
29638: CALL_OW 88
// Say ( LegionFriend , D14c-Friend-1 ) ;
29642: LD_EXP 52
29646: PPUSH
29647: LD_STRING D14c-Friend-1
29649: PPUSH
29650: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
29654: LD_EXP 1
29658: PPUSH
29659: LD_STRING D14c-JMM-2
29661: PPUSH
29662: CALL_OW 88
// DialogueOff ;
29666: CALL_OW 7
// SetAttitude ( 8 , 1 , att_enemy , true ) ;
29670: LD_INT 8
29672: PPUSH
29673: LD_INT 1
29675: PPUSH
29676: LD_INT 2
29678: PPUSH
29679: LD_INT 1
29681: PPUSH
29682: CALL_OW 80
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
29686: LD_EXP 52
29690: PPUSH
29691: LD_INT 18
29693: PPUSH
29694: CALL_OW 113
// end ; end ;
29698: PPOPN 1
29700: END
// every 0 0$1 trigger IsInArea ( LegionFriend , FriendEscapeArea ) and GetSide ( LegionFriend ) = 8 do
29701: LD_EXP 52
29705: PPUSH
29706: LD_INT 18
29708: PPUSH
29709: CALL_OW 308
29713: PUSH
29714: LD_EXP 52
29718: PPUSH
29719: CALL_OW 255
29723: PUSH
29724: LD_INT 8
29726: EQUAL
29727: AND
29728: IFFALSE 29742
29730: GO 29732
29732: DISABLE
// RemoveUnit ( LegionFriend ) ;
29733: LD_EXP 52
29737: PPUSH
29738: CALL_OW 64
29742: END
// every 0 0$1 trigger timeAction >= 15 15$02 do
29743: LD_EXP 96
29747: PUSH
29748: LD_INT 31570
29750: GREATEREQUAL
29751: IFFALSE 29827
29753: GO 29755
29755: DISABLE
// begin if KappaStatus = 1 and JMMGirlVeh = [ ] then
29756: LD_EXP 80
29760: PUSH
29761: LD_INT 1
29763: EQUAL
29764: PUSH
29765: LD_EXP 78
29769: PUSH
29770: EMPTY
29771: EQUAL
29772: AND
29773: IFFALSE 29779
// PrepareSupportFromKappa ;
29775: CALL 2400 0 0
// if KappaStatus = 0 and JMMGirlStatus = 1 then
29779: LD_EXP 80
29783: PUSH
29784: LD_INT 0
29786: EQUAL
29787: PUSH
29788: LD_EXP 81
29792: PUSH
29793: LD_INT 1
29795: EQUAL
29796: AND
29797: IFFALSE 29803
// PrepareAttackFromKappa ;
29799: CALL 5245 0 0
// if KappaStatus = 0 and JMMGirlStatus = 0 then
29803: LD_EXP 80
29807: PUSH
29808: LD_INT 0
29810: EQUAL
29811: PUSH
29812: LD_EXP 81
29816: PUSH
29817: LD_INT 0
29819: EQUAL
29820: AND
29821: IFFALSE 29827
// PrepareAttackFromKappa ;
29823: CALL 5245 0 0
// end ;
29827: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
29828: LD_INT 1
29830: PPUSH
29831: LD_EXP 34
29835: PPUSH
29836: CALL_OW 292
29840: IFFALSE 30108
29842: GO 29844
29844: DISABLE
// begin missionStage = 2 ;
29845: LD_ADDR_EXP 100
29849: PUSH
29850: LD_INT 2
29852: ST_TO_ADDR
// CenterNowOnUnits ( sewiVeh ) ;
29853: LD_EXP 34
29857: PPUSH
29858: CALL_OW 87
// DialogueOn ;
29862: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
29866: LD_EXP 1
29870: PPUSH
29871: LD_STRING D10nB-JMM-1
29873: PPUSH
29874: CALL_OW 88
// if BurlakStatus = 1 then
29878: LD_EXP 75
29882: PUSH
29883: LD_INT 1
29885: EQUAL
29886: IFFALSE 29900
// Say ( Vsevolod , D10nB-Vse-1a ) ;
29888: LD_EXP 33
29892: PPUSH
29893: LD_STRING D10nB-Vse-1a
29895: PPUSH
29896: CALL_OW 88
// if BurlakStatus = 0 then
29900: LD_EXP 75
29904: PUSH
29905: LD_INT 0
29907: EQUAL
29908: IFFALSE 29922
// Say ( Vsevolod , D10nB-Vse-1 ) ;
29910: LD_EXP 33
29914: PPUSH
29915: LD_STRING D10nB-Vse-1
29917: PPUSH
29918: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
29922: LD_EXP 1
29926: PPUSH
29927: LD_STRING D10nB-JMM-2
29929: PPUSH
29930: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 1 then
29934: LD_EXP 80
29938: PUSH
29939: LD_EXP 81
29943: PUSH
29944: LD_INT 1
29946: EQUAL
29947: AND
29948: IFFALSE 29962
// Say ( Vsevolod , D10nB-Vse-5 ) ;
29950: LD_EXP 33
29954: PPUSH
29955: LD_STRING D10nB-Vse-5
29957: PPUSH
29958: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 0 then
29962: LD_EXP 80
29966: PUSH
29967: LD_EXP 81
29971: PUSH
29972: LD_INT 0
29974: EQUAL
29975: AND
29976: IFFALSE 30104
// begin if JMMGirl = 1 then
29978: LD_EXP 79
29982: PUSH
29983: LD_INT 1
29985: EQUAL
29986: IFFALSE 30036
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
29988: LD_EXP 33
29992: PPUSH
29993: LD_STRING D10nB-Vse-2
29995: PPUSH
29996: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
30000: LD_EXP 1
30004: PPUSH
30005: LD_STRING D10nB-JMM-3
30007: PPUSH
30008: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
30012: LD_EXP 33
30016: PPUSH
30017: LD_STRING D10nB-Vse-3
30019: PPUSH
30020: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
30024: LD_EXP 1
30028: PPUSH
30029: LD_STRING D10nB-JMM-4
30031: PPUSH
30032: CALL_OW 88
// end ; if JMMGirl = 2 then
30036: LD_EXP 79
30040: PUSH
30041: LD_INT 2
30043: EQUAL
30044: IFFALSE 30070
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
30046: LD_EXP 33
30050: PPUSH
30051: LD_STRING D10nB-Vse-4
30053: PPUSH
30054: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
30058: LD_EXP 1
30062: PPUSH
30063: LD_STRING D10nB-JMM-5
30065: PPUSH
30066: CALL_OW 88
// end ; if JMMGirl = 3 then
30070: LD_EXP 79
30074: PUSH
30075: LD_INT 3
30077: EQUAL
30078: IFFALSE 30104
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
30080: LD_EXP 33
30084: PPUSH
30085: LD_STRING D10nB-Vse-5
30087: PPUSH
30088: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
30092: LD_EXP 1
30096: PPUSH
30097: LD_STRING D10nB-JMM-6
30099: PPUSH
30100: CALL_OW 88
// end ; end ; DialogueOff ;
30104: CALL_OW 7
// end ;
30108: END
// every 0 0$1 trigger timeAction >= 30 30$02 do
30109: LD_EXP 96
30113: PUSH
30114: LD_INT 63070
30116: GREATEREQUAL
30117: IFFALSE 30395
30119: GO 30121
30121: DISABLE
// begin PrepareOmegaTeam ;
30122: CALL 2789 0 0
// missionStage = 3 ;
30126: LD_ADDR_EXP 100
30130: PUSH
30131: LD_INT 3
30133: ST_TO_ADDR
// DialogueOn ;
30134: CALL_OW 6
// if StevensStatus = 1 then
30138: LD_EXP 76
30142: PUSH
30143: LD_INT 1
30145: EQUAL
30146: IFFALSE 30258
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
30148: LD_EXP 3
30152: PPUSH
30153: CALL_OW 310
30157: PPUSH
30158: CALL_OW 87
// Say ( Stevens , D8-Huck-1 ) ;
30162: LD_EXP 3
30166: PPUSH
30167: LD_STRING D8-Huck-1
30169: PPUSH
30170: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
30174: LD_EXP 1
30178: PPUSH
30179: LD_STRING D8-JMM-1
30181: PPUSH
30182: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
30186: LD_EXP 3
30190: PPUSH
30191: LD_STRING D8-Huck-2
30193: PPUSH
30194: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
30198: LD_EXP 1
30202: PPUSH
30203: LD_STRING D8-JMM-2
30205: PPUSH
30206: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
30210: LD_EXP 3
30214: PPUSH
30215: LD_STRING D8-Huck-3
30217: PPUSH
30218: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
30222: LD_EXP 1
30226: PPUSH
30227: LD_STRING D8-JMM-3
30229: PPUSH
30230: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
30234: LD_EXP 3
30238: PPUSH
30239: LD_STRING D8-Huck-4
30241: PPUSH
30242: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
30246: LD_EXP 1
30250: PPUSH
30251: LD_STRING D8-JMM-4
30253: PPUSH
30254: CALL_OW 88
// end ; if StevensStatus = 0 then
30258: LD_EXP 76
30262: PUSH
30263: LD_INT 0
30265: EQUAL
30266: IFFALSE 30378
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
30268: LD_EXP 21
30272: PPUSH
30273: CALL_OW 310
30277: PPUSH
30278: CALL_OW 87
// Say ( Baker , D8-Huck-1 ) ;
30282: LD_EXP 21
30286: PPUSH
30287: LD_STRING D8-Huck-1
30289: PPUSH
30290: CALL_OW 88
// Say ( JMM , D8-JMM-1a ) ;
30294: LD_EXP 1
30298: PPUSH
30299: LD_STRING D8-JMM-1a
30301: PPUSH
30302: CALL_OW 88
// Say ( Baker , D8-Huck-2 ) ;
30306: LD_EXP 21
30310: PPUSH
30311: LD_STRING D8-Huck-2
30313: PPUSH
30314: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
30318: LD_EXP 1
30322: PPUSH
30323: LD_STRING D8-JMM-2
30325: PPUSH
30326: CALL_OW 88
// Say ( Baker , D8-Huck-3 ) ;
30330: LD_EXP 21
30334: PPUSH
30335: LD_STRING D8-Huck-3
30337: PPUSH
30338: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
30342: LD_EXP 1
30346: PPUSH
30347: LD_STRING D8-JMM-3
30349: PPUSH
30350: CALL_OW 88
// Say ( Baker , D8-Huck-4 ) ;
30354: LD_EXP 21
30358: PPUSH
30359: LD_STRING D8-Huck-4
30361: PPUSH
30362: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
30366: LD_EXP 1
30370: PPUSH
30371: LD_STRING D8-JMM-4
30373: PPUSH
30374: CALL_OW 88
// end ; DialogueOff ;
30378: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
30382: LD_INT 25
30384: PPUSH
30385: LD_INT 1
30387: PPUSH
30388: LD_INT 1
30390: PPUSH
30391: CALL_OW 322
// end ;
30395: END
// every 0 0$1 trigger timeAction >= 35 35$02 do var dec ;
30396: LD_EXP 96
30400: PUSH
30401: LD_INT 73570
30403: GREATEREQUAL
30404: IFFALSE 30754
30406: GO 30408
30408: DISABLE
30409: LD_INT 0
30411: PPUSH
// begin missionStage = 4 ;
30412: LD_ADDR_EXP 100
30416: PUSH
30417: LD_INT 4
30419: ST_TO_ADDR
// DialogueOn ;
30420: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
30424: LD_EXP 28
30428: PPUSH
30429: LD_STRING D9-Roth-1
30431: PPUSH
30432: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
30436: LD_EXP 1
30440: PPUSH
30441: LD_STRING D9-JMM-1
30443: PPUSH
30444: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
30448: LD_EXP 28
30452: PPUSH
30453: LD_STRING D9-Roth-2
30455: PPUSH
30456: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
30460: LD_EXP 28
30464: PPUSH
30465: LD_STRING D9-Roth-2a
30467: PPUSH
30468: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
30472: LD_EXP 26
30476: PPUSH
30477: LD_STRING D9-Pla-2
30479: PPUSH
30480: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
30484: LD_EXP 28
30488: PPUSH
30489: LD_STRING D9-Roth-3
30491: PPUSH
30492: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
30496: LD_EXP 26
30500: PPUSH
30501: LD_STRING D9-Pla-3
30503: PPUSH
30504: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
30508: LD_EXP 28
30512: PPUSH
30513: LD_STRING D9-Roth-4
30515: PPUSH
30516: CALL_OW 94
// dec = Query ( Q9 ) ;
30520: LD_ADDR_VAR 0 1
30524: PUSH
30525: LD_STRING Q9
30527: PPUSH
30528: CALL_OW 97
30532: ST_TO_ADDR
// if dec = 1 then
30533: LD_VAR 0 1
30537: PUSH
30538: LD_INT 1
30540: EQUAL
30541: IFFALSE 30555
// SayRadio ( Roth , D9a-Roth-1 ) ;
30543: LD_EXP 28
30547: PPUSH
30548: LD_STRING D9a-Roth-1
30550: PPUSH
30551: CALL_OW 94
// if dec = 2 then
30555: LD_VAR 0 1
30559: PUSH
30560: LD_INT 2
30562: EQUAL
30563: IFFALSE 30589
// begin Say ( JMM , D9b-JMM-1 ) ;
30565: LD_EXP 1
30569: PPUSH
30570: LD_STRING D9b-JMM-1
30572: PPUSH
30573: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
30577: LD_EXP 28
30581: PPUSH
30582: LD_STRING D9b-Roth-1
30584: PPUSH
30585: CALL_OW 94
// end ; if dec = 3 then
30589: LD_VAR 0 1
30593: PUSH
30594: LD_INT 3
30596: EQUAL
30597: IFFALSE 30659
// begin Say ( JMM , D9c-JMM-1 ) ;
30599: LD_EXP 1
30603: PPUSH
30604: LD_STRING D9c-JMM-1
30606: PPUSH
30607: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
30611: LD_EXP 28
30615: PPUSH
30616: LD_STRING D9c-Roth-1
30618: PPUSH
30619: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
30623: LD_EXP 1
30627: PPUSH
30628: LD_STRING D9c-JMM-2
30630: PPUSH
30631: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
30635: LD_EXP 28
30639: PPUSH
30640: LD_STRING D9c-Roth-2
30642: PPUSH
30643: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
30647: LD_EXP 1
30651: PPUSH
30652: LD_STRING D9c-JMM-3
30654: PPUSH
30655: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
30659: LD_EXP 28
30663: PPUSH
30664: LD_STRING D9c-Roth-3
30666: PPUSH
30667: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
30671: LD_EXP 28
30675: PPUSH
30676: LD_STRING D9cont-Roth-1
30678: PPUSH
30679: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
30683: LD_EXP 1
30687: PPUSH
30688: LD_STRING D9cont-JMM-1
30690: PPUSH
30691: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
30695: LD_EXP 28
30699: PPUSH
30700: LD_STRING D9cont-Roth-2
30702: PPUSH
30703: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
30707: LD_EXP 1
30711: PPUSH
30712: LD_STRING D9cont-JMM-2
30714: PPUSH
30715: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
30719: LD_EXP 28
30723: PPUSH
30724: LD_STRING D9cont-Roth-3
30726: PPUSH
30727: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
30731: LD_EXP 1
30735: PPUSH
30736: LD_STRING D9cont-JMM-3
30738: PPUSH
30739: CALL_OW 88
// DialogueOff ;
30743: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
30747: LD_STRING M3
30749: PPUSH
30750: CALL_OW 337
// end ;
30754: PPOPN 1
30756: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= [ 20 , 18 , 15 ] [ Difficulty ] do var i , tmp ;
30757: LD_INT 22
30759: PUSH
30760: LD_INT 7
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 21
30769: PUSH
30770: LD_INT 1
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PPUSH
30781: CALL_OW 69
30785: PUSH
30786: LD_INT 20
30788: PUSH
30789: LD_INT 18
30791: PUSH
30792: LD_INT 15
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: PUSH
30800: LD_OWVAR 67
30804: ARRAY
30805: LESSEQUAL
30806: IFFALSE 31292
30808: GO 30810
30810: DISABLE
30811: LD_INT 0
30813: PPUSH
30814: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_lives , 900 ] ] ) do
30815: LD_ADDR_VAR 0 1
30819: PUSH
30820: LD_INT 22
30822: PUSH
30823: LD_INT 7
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 21
30832: PUSH
30833: LD_INT 1
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 23
30842: PUSH
30843: LD_INT 3
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 24
30852: PUSH
30853: LD_INT 900
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: PPUSH
30866: CALL_OW 69
30870: PUSH
30871: FOR_IN
30872: IFFALSE 30903
// if GetSex ( i ) = sex_male then
30874: LD_VAR 0 1
30878: PPUSH
30879: CALL_OW 258
30883: PUSH
30884: LD_INT 1
30886: EQUAL
30887: IFFALSE 30901
// begin tmp = i ;
30889: LD_ADDR_VAR 0 2
30893: PUSH
30894: LD_VAR 0 1
30898: ST_TO_ADDR
// break ;
30899: GO 30903
// end ;
30901: GO 30871
30903: POP
30904: POP
// if tmp = 0 then
30905: LD_VAR 0 2
30909: PUSH
30910: LD_INT 0
30912: EQUAL
30913: IFFALSE 30967
// begin uc_side = 7 ;
30915: LD_ADDR_OWVAR 20
30919: PUSH
30920: LD_INT 7
30922: ST_TO_ADDR
// uc_nation = 3 ;
30923: LD_ADDR_OWVAR 21
30927: PUSH
30928: LD_INT 3
30930: ST_TO_ADDR
// hc_name =  ;
30931: LD_ADDR_OWVAR 26
30935: PUSH
30936: LD_STRING 
30938: ST_TO_ADDR
// hc_gallery =  ;
30939: LD_ADDR_OWVAR 33
30943: PUSH
30944: LD_STRING 
30946: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
30947: LD_INT 1
30949: PPUSH
30950: LD_INT 10
30952: PPUSH
30953: CALL_OW 381
// tmp = CreateHuman ;
30957: LD_ADDR_VAR 0 2
30961: PUSH
30962: CALL_OW 44
30966: ST_TO_ADDR
// end ; AllianceAI = 0 ;
30967: LD_ADDR_EXP 84
30971: PUSH
30972: LD_INT 0
30974: ST_TO_ADDR
// AllianceEscape = 1 ;
30975: LD_ADDR_EXP 90
30979: PUSH
30980: LD_INT 1
30982: ST_TO_ADDR
// SetAttitude ( 7 , 1 , att_friend , true ) ;
30983: LD_INT 7
30985: PPUSH
30986: LD_INT 1
30988: PPUSH
30989: LD_INT 1
30991: PPUSH
30992: LD_INT 1
30994: PPUSH
30995: CALL_OW 80
// DialogueOn ;
30999: CALL_OW 6
// if IsOK ( Roth ) then
31003: LD_EXP 28
31007: PPUSH
31008: CALL_OW 302
31012: IFFALSE 31026
// Say ( JMM , DAb-JMM-1 ) ;
31014: LD_EXP 1
31018: PPUSH
31019: LD_STRING DAb-JMM-1
31021: PPUSH
31022: CALL_OW 88
// if IsOK ( Roth ) then
31026: LD_EXP 28
31030: PPUSH
31031: CALL_OW 302
31035: IFFALSE 31051
// Say ( Roth , D16_SurrenderAlliance-Roth-1 ) else
31037: LD_EXP 28
31041: PPUSH
31042: LD_STRING D16_SurrenderAlliance-Roth-1
31044: PPUSH
31045: CALL_OW 88
31049: GO 31063
// Say ( tmp , D16_SurrenderAlliance-Sci1-1 ) ;
31051: LD_VAR 0 2
31055: PPUSH
31056: LD_STRING D16_SurrenderAlliance-Sci1-1
31058: PPUSH
31059: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) = 1 then
31063: LD_INT 23
31065: PPUSH
31066: LD_INT 22
31068: PUSH
31069: LD_INT 4
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PPUSH
31076: CALL_OW 70
31080: PUSH
31081: LD_INT 1
31083: EQUAL
31084: IFFALSE 31098
// Say ( JMM , DAb-JMM-1a ) ;
31086: LD_EXP 1
31090: PPUSH
31091: LD_STRING DAb-JMM-1a
31093: PPUSH
31094: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 1 then
31098: LD_INT 23
31100: PPUSH
31101: LD_INT 22
31103: PUSH
31104: LD_INT 4
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PPUSH
31111: CALL_OW 70
31115: PUSH
31116: LD_INT 1
31118: GREATER
31119: IFFALSE 31133
// Say ( JMM , DAb-JMM-1b ) ;
31121: LD_EXP 1
31125: PPUSH
31126: LD_STRING DAb-JMM-1b
31128: PPUSH
31129: CALL_OW 88
// DialogueOff ;
31133: CALL_OW 7
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 0 then
31137: LD_INT 23
31139: PPUSH
31140: LD_INT 22
31142: PUSH
31143: LD_INT 4
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PPUSH
31150: CALL_OW 70
31154: PUSH
31155: LD_INT 0
31157: GREATER
31158: IFFALSE 31185
// SetSide ( FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) , 1 ) ;
31160: LD_INT 23
31162: PPUSH
31163: LD_INT 22
31165: PUSH
31166: LD_INT 4
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PPUSH
31173: CALL_OW 70
31177: PPUSH
31178: LD_INT 1
31180: PPUSH
31181: CALL_OW 235
// if IsDying ( Roth ) then
31185: LD_EXP 28
31189: PPUSH
31190: CALL_OW 303
31194: IFFALSE 31216
// begin RothStatus = 0 ;
31196: LD_ADDR_EXP 91
31200: PUSH
31201: LD_INT 0
31203: ST_TO_ADDR
// SetLives ( Roth , 0 ) ;
31204: LD_EXP 28
31208: PPUSH
31209: LD_INT 0
31211: PPUSH
31212: CALL_OW 234
// end ; ComExitBuilding ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ) ;
31216: LD_INT 22
31218: PUSH
31219: LD_INT 7
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 21
31228: PUSH
31229: LD_INT 1
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PPUSH
31240: CALL_OW 69
31244: PPUSH
31245: CALL_OW 122
// wait ( 0 0$1 ) ;
31249: LD_INT 35
31251: PPUSH
31252: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) , AllianceEscapeArea ) ;
31256: LD_INT 22
31258: PUSH
31259: LD_INT 7
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 21
31268: PUSH
31269: LD_INT 1
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PPUSH
31280: CALL_OW 69
31284: PPUSH
31285: LD_INT 28
31287: PPUSH
31288: CALL_OW 113
// end ;
31292: PPOPN 2
31294: END
// every 0 0$1 trigger AllianceEscape = 1 and FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do var i ;
31295: LD_EXP 90
31299: PUSH
31300: LD_INT 1
31302: EQUAL
31303: PUSH
31304: LD_INT 28
31306: PPUSH
31307: LD_INT 22
31309: PUSH
31310: LD_INT 7
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 21
31319: PUSH
31320: LD_INT 1
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PPUSH
31331: CALL_OW 70
31335: AND
31336: IFFALSE 31398
31338: GO 31340
31340: DISABLE
31341: LD_INT 0
31343: PPUSH
// begin enable ;
31344: ENABLE
// for i in FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
31345: LD_ADDR_VAR 0 1
31349: PUSH
31350: LD_INT 28
31352: PPUSH
31353: LD_INT 22
31355: PUSH
31356: LD_INT 7
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 21
31365: PUSH
31366: LD_INT 1
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PPUSH
31377: CALL_OW 70
31381: PUSH
31382: FOR_IN
31383: IFFALSE 31396
// RemoveUnit ( i ) ;
31385: LD_VAR 0 1
31389: PPUSH
31390: CALL_OW 64
31394: GO 31382
31396: POP
31397: POP
// end ;
31398: PPOPN 1
31400: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_control , 1 ] ] ] ) > 0 and IsOK ( Roth ) and AllianceAI = 1 do var tpUnit , heroes , rnd ;
31401: LD_INT 33
31403: PPUSH
31404: LD_INT 22
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: LD_INT 21
31419: PUSH
31420: LD_INT 1
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 33
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: LIST
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PPUSH
31446: CALL_OW 70
31450: PUSH
31451: LD_INT 0
31453: GREATER
31454: PUSH
31455: LD_EXP 28
31459: PPUSH
31460: CALL_OW 302
31464: AND
31465: PUSH
31466: LD_EXP 84
31470: PUSH
31471: LD_INT 1
31473: EQUAL
31474: AND
31475: IFFALSE 33845
31477: GO 31479
31479: DISABLE
31480: LD_INT 0
31482: PPUSH
31483: PPUSH
31484: PPUSH
// begin tpUnit = FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_control , 1 ] ] ] ) [ 1 ] ;
31485: LD_ADDR_VAR 0 1
31489: PUSH
31490: LD_INT 33
31492: PPUSH
31493: LD_INT 22
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 2
31505: PUSH
31506: LD_INT 21
31508: PUSH
31509: LD_INT 1
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 33
31518: PUSH
31519: LD_INT 1
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: LIST
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PPUSH
31535: CALL_OW 70
31539: PUSH
31540: LD_INT 1
31542: ARRAY
31543: ST_TO_ADDR
// heroes = [ JMM , Joan , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
31544: LD_ADDR_VAR 0 2
31548: PUSH
31549: LD_EXP 1
31553: PUSH
31554: LD_EXP 2
31558: PUSH
31559: LD_EXP 3
31563: PUSH
31564: LD_EXP 21
31568: PUSH
31569: LD_EXP 4
31573: PUSH
31574: LD_EXP 5
31578: PUSH
31579: LD_EXP 6
31583: PUSH
31584: LD_EXP 7
31588: PUSH
31589: LD_EXP 8
31593: PUSH
31594: LD_EXP 9
31598: PUSH
31599: LD_EXP 10
31603: PUSH
31604: LD_EXP 11
31608: PUSH
31609: LD_EXP 12
31613: PUSH
31614: LD_EXP 13
31618: PUSH
31619: LD_EXP 14
31623: PUSH
31624: LD_EXP 15
31628: PUSH
31629: LD_EXP 16
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: ST_TO_ADDR
// InGameOn ;
31653: CALL_OW 8
// SetAttitude ( 1 , 7 , att_friend , true ) ;
31657: LD_INT 1
31659: PPUSH
31660: LD_INT 7
31662: PPUSH
31663: LD_INT 1
31665: PPUSH
31666: LD_INT 1
31668: PPUSH
31669: CALL_OW 80
// CenterNowOnUnits ( tpUnit ) ;
31673: LD_VAR 0 1
31677: PPUSH
31678: CALL_OW 87
// if GetType ( tpUnit ) = unit_vehicle then
31682: LD_VAR 0 1
31686: PPUSH
31687: CALL_OW 247
31691: PUSH
31692: LD_INT 2
31694: EQUAL
31695: IFFALSE 31716
// tpUnit = UnitsInside ( tpUnit ) [ 1 ] ;
31697: LD_ADDR_VAR 0 1
31701: PUSH
31702: LD_VAR 0 1
31706: PPUSH
31707: CALL_OW 313
31711: PUSH
31712: LD_INT 1
31714: ARRAY
31715: ST_TO_ADDR
// ComExitVehicle ( tpUnit ) ;
31716: LD_VAR 0 1
31720: PPUSH
31721: CALL_OW 121
// wait ( 0 0$1 ) ;
31725: LD_INT 35
31727: PPUSH
31728: CALL_OW 67
// TeleportUnit ( tpUnit , 248 , 186 , 4 , true ) ;
31732: LD_VAR 0 1
31736: PPUSH
31737: LD_INT 248
31739: PPUSH
31740: LD_INT 186
31742: PPUSH
31743: LD_INT 4
31745: PPUSH
31746: LD_INT 1
31748: PPUSH
31749: CALL_OW 483
// wait ( 0 0$2 ) ;
31753: LD_INT 70
31755: PPUSH
31756: CALL_OW 67
// CenterNowOnUnits ( tpUnit ) ;
31760: LD_VAR 0 1
31764: PPUSH
31765: CALL_OW 87
// ComTurnUnit ( tpUnit , Roth ) ;
31769: LD_VAR 0 1
31773: PPUSH
31774: LD_EXP 28
31778: PPUSH
31779: CALL_OW 119
// ComTurnUnit ( [ Roth , Simms ] , tpUnit ) ;
31783: LD_EXP 28
31787: PUSH
31788: LD_EXP 47
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PPUSH
31797: LD_VAR 0 1
31801: PPUSH
31802: CALL_OW 119
// if tpUnit = JMM then
31806: LD_VAR 0 1
31810: PUSH
31811: LD_EXP 1
31815: EQUAL
31816: IFFALSE 31830
// Say ( JMM , DA1-JMM-1 ) ;
31818: LD_EXP 1
31822: PPUSH
31823: LD_STRING DA1-JMM-1
31825: PPUSH
31826: CALL_OW 88
// if tpUnit = Joan then
31830: LD_VAR 0 1
31834: PUSH
31835: LD_EXP 2
31839: EQUAL
31840: IFFALSE 31854
// Say ( Joan , DA1-Joan-1 ) ;
31842: LD_EXP 2
31846: PPUSH
31847: LD_STRING DA1-Joan-1
31849: PPUSH
31850: CALL_OW 88
// if tpUnit = Lisa then
31854: LD_VAR 0 1
31858: PUSH
31859: LD_EXP 4
31863: EQUAL
31864: IFFALSE 31878
// Say ( Lisa , DA1-Lisa-1 ) ;
31866: LD_EXP 4
31870: PPUSH
31871: LD_STRING DA1-Lisa-1
31873: PPUSH
31874: CALL_OW 88
// if tpUnit = Donaldson then
31878: LD_VAR 0 1
31882: PUSH
31883: LD_EXP 5
31887: EQUAL
31888: IFFALSE 31902
// Say ( Donaldson , DA1-Don-1 ) ;
31890: LD_EXP 5
31894: PPUSH
31895: LD_STRING DA1-Don-1
31897: PPUSH
31898: CALL_OW 88
// if tpUnit = Cornel then
31902: LD_VAR 0 1
31906: PUSH
31907: LD_EXP 12
31911: EQUAL
31912: IFFALSE 31926
// Say ( Cornel , DA1-Corn-1 ) ;
31914: LD_EXP 12
31918: PPUSH
31919: LD_STRING DA1-Corn-1
31921: PPUSH
31922: CALL_OW 88
// if tpUnit = Denis then
31926: LD_VAR 0 1
31930: PUSH
31931: LD_EXP 8
31935: EQUAL
31936: IFFALSE 31950
// Say ( Denis , DA1-Den-1 ) ;
31938: LD_EXP 8
31942: PPUSH
31943: LD_STRING DA1-Den-1
31945: PPUSH
31946: CALL_OW 88
// if tpUnit = Bobby then
31950: LD_VAR 0 1
31954: PUSH
31955: LD_EXP 6
31959: EQUAL
31960: IFFALSE 31974
// Say ( Bobby , DA1-Bobby-1 ) ;
31962: LD_EXP 6
31966: PPUSH
31967: LD_STRING DA1-Bobby-1
31969: PPUSH
31970: CALL_OW 88
// if tpUnit = Gladstone then
31974: LD_VAR 0 1
31978: PUSH
31979: LD_EXP 10
31983: EQUAL
31984: IFFALSE 31998
// Say ( Gladstone , DA1-Glad-1 ) ;
31986: LD_EXP 10
31990: PPUSH
31991: LD_STRING DA1-Glad-1
31993: PPUSH
31994: CALL_OW 88
// if tpUnit = Cyrus then
31998: LD_VAR 0 1
32002: PUSH
32003: LD_EXP 7
32007: EQUAL
32008: IFFALSE 32022
// Say ( Cyrus , DA1-Cyrus-1 ) ;
32010: LD_EXP 7
32014: PPUSH
32015: LD_STRING DA1-Cyrus-1
32017: PPUSH
32018: CALL_OW 88
// if tpUnit = Stevens then
32022: LD_VAR 0 1
32026: PUSH
32027: LD_EXP 3
32031: EQUAL
32032: IFFALSE 32046
// Say ( Stevens , DA1-Huck-1 ) ;
32034: LD_EXP 3
32038: PPUSH
32039: LD_STRING DA1-Huck-1
32041: PPUSH
32042: CALL_OW 88
// if tpUnit = Baker then
32046: LD_VAR 0 1
32050: PUSH
32051: LD_EXP 21
32055: EQUAL
32056: IFFALSE 32070
// Say ( Baker , DA1-Huck-1 ) ;
32058: LD_EXP 21
32062: PPUSH
32063: LD_STRING DA1-Huck-1
32065: PPUSH
32066: CALL_OW 88
// if tpUnit = Brown then
32070: LD_VAR 0 1
32074: PUSH
32075: LD_EXP 9
32079: EQUAL
32080: IFFALSE 32094
// Say ( Brown , DA1-Brown-1 ) ;
32082: LD_EXP 9
32086: PPUSH
32087: LD_STRING DA1-Brown-1
32089: PPUSH
32090: CALL_OW 88
// if tpUnit = Gary then
32094: LD_VAR 0 1
32098: PUSH
32099: LD_EXP 13
32103: EQUAL
32104: IFFALSE 32118
// Say ( Gary , DA1-Gary-1 ) ;
32106: LD_EXP 13
32110: PPUSH
32111: LD_STRING DA1-Gary-1
32113: PPUSH
32114: CALL_OW 88
// if tpUnit = Connie then
32118: LD_VAR 0 1
32122: PUSH
32123: LD_EXP 16
32127: EQUAL
32128: IFFALSE 32142
// Say ( Connie , DA1-Con-1 ) ;
32130: LD_EXP 16
32134: PPUSH
32135: LD_STRING DA1-Con-1
32137: PPUSH
32138: CALL_OW 88
// if tpUnit = Kurt then
32142: LD_VAR 0 1
32146: PUSH
32147: LD_EXP 30
32151: EQUAL
32152: IFFALSE 32166
// Say ( Kurt , DA1-Kurt-1 ) ;
32154: LD_EXP 30
32158: PPUSH
32159: LD_STRING DA1-Kurt-1
32161: PPUSH
32162: CALL_OW 88
// if tpUnit = Kikuchi then
32166: LD_VAR 0 1
32170: PUSH
32171: LD_EXP 15
32175: EQUAL
32176: IFFALSE 32190
// Say ( Kikuchi , DA1-Yam-1 ) ;
32178: LD_EXP 15
32182: PPUSH
32183: LD_STRING DA1-Yam-1
32185: PPUSH
32186: CALL_OW 88
// if tpUnit = Frank then
32190: LD_VAR 0 1
32194: PUSH
32195: LD_EXP 14
32199: EQUAL
32200: IFFALSE 32214
// Say ( Frank , DA1-Frank-1 ) ;
32202: LD_EXP 14
32206: PPUSH
32207: LD_STRING DA1-Frank-1
32209: PPUSH
32210: CALL_OW 88
// if not tpUnit in heroes then
32214: LD_VAR 0 1
32218: PUSH
32219: LD_VAR 0 2
32223: IN
32224: NOT
32225: IFFALSE 32281
// begin if GetSex ( tpUnit ) = 1 then
32227: LD_VAR 0 1
32231: PPUSH
32232: CALL_OW 258
32236: PUSH
32237: LD_INT 1
32239: EQUAL
32240: IFFALSE 32254
// Say ( tpUnit , DA1-Sol1-1 ) ;
32242: LD_VAR 0 1
32246: PPUSH
32247: LD_STRING DA1-Sol1-1
32249: PPUSH
32250: CALL_OW 88
// if GetSex ( tpUnit ) = 2 then
32254: LD_VAR 0 1
32258: PPUSH
32259: CALL_OW 258
32263: PUSH
32264: LD_INT 2
32266: EQUAL
32267: IFFALSE 32281
// Say ( tpUnit , DA1-FSol1-1 ) ;
32269: LD_VAR 0 1
32273: PPUSH
32274: LD_STRING DA1-FSol1-1
32276: PPUSH
32277: CALL_OW 88
// end ; Say ( Roth , DA-Roth-1 ) ;
32281: LD_EXP 28
32285: PPUSH
32286: LD_STRING DA-Roth-1
32288: PPUSH
32289: CALL_OW 88
// Say ( Simms , DA-Sim-1 ) ;
32293: LD_EXP 47
32297: PPUSH
32298: LD_STRING DA-Sim-1
32300: PPUSH
32301: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
32305: LD_EXP 28
32309: PPUSH
32310: LD_STRING DA-Roth-2
32312: PPUSH
32313: CALL_OW 88
// if tpUnit = JMM then
32317: LD_VAR 0 1
32321: PUSH
32322: LD_EXP 1
32326: EQUAL
32327: IFFALSE 32360
// begin Say ( JMM , DA1-JMM-1a ) ;
32329: LD_EXP 1
32333: PPUSH
32334: LD_STRING DA1-JMM-1a
32336: PPUSH
32337: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
32341: LD_EXP 28
32345: PPUSH
32346: LD_STRING DA-Roth-3a
32348: PPUSH
32349: CALL_OW 88
// YouLost ( JMMCaptured ) ;
32353: LD_STRING JMMCaptured
32355: PPUSH
32356: CALL_OW 104
// end ; if tpUnit = Joan then
32360: LD_VAR 0 1
32364: PUSH
32365: LD_EXP 2
32369: EQUAL
32370: IFFALSE 32432
// begin Say ( Joan , DA1-Joan-1a ) ;
32372: LD_EXP 2
32376: PPUSH
32377: LD_STRING DA1-Joan-1a
32379: PPUSH
32380: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
32384: LD_EXP 28
32388: PPUSH
32389: LD_STRING DA-Roth-3a
32391: PPUSH
32392: CALL_OW 88
// SetSide ( Joan , 4 ) ;
32396: LD_EXP 2
32400: PPUSH
32401: LD_INT 4
32403: PPUSH
32404: CALL_OW 235
// ComMoveXY ( Joan , 257 , 198 ) ;
32408: LD_EXP 2
32412: PPUSH
32413: LD_INT 257
32415: PPUSH
32416: LD_INT 198
32418: PPUSH
32419: CALL_OW 111
// AddComHold ( Joan ) ;
32423: LD_EXP 2
32427: PPUSH
32428: CALL_OW 200
// end ; if tpUnit = Donaldson then
32432: LD_VAR 0 1
32436: PUSH
32437: LD_EXP 5
32441: EQUAL
32442: IFFALSE 32495
// begin Say ( Donaldson , DA1-Don-1a ) ;
32444: LD_EXP 5
32448: PPUSH
32449: LD_STRING DA1-Don-1a
32451: PPUSH
32452: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
32456: LD_EXP 28
32460: PPUSH
32461: LD_STRING DA-Roth-3
32463: PPUSH
32464: CALL_OW 88
// SetSide ( Donaldson , 7 ) ;
32468: LD_EXP 5
32472: PPUSH
32473: LD_INT 7
32475: PPUSH
32476: CALL_OW 235
// ComMoveXY ( Donaldson , 240 , 188 ) ;
32480: LD_EXP 5
32484: PPUSH
32485: LD_INT 240
32487: PPUSH
32488: LD_INT 188
32490: PPUSH
32491: CALL_OW 111
// end ; if tpUnit = Cornel then
32495: LD_VAR 0 1
32499: PUSH
32500: LD_EXP 12
32504: EQUAL
32505: IFFALSE 32567
// begin Say ( Cornel , DA1-Corn-1a ) ;
32507: LD_EXP 12
32511: PPUSH
32512: LD_STRING DA1-Corn-1a
32514: PPUSH
32515: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
32519: LD_EXP 28
32523: PPUSH
32524: LD_STRING DA-Roth-3a
32526: PPUSH
32527: CALL_OW 88
// SetSide ( Cornel , 4 ) ;
32531: LD_EXP 12
32535: PPUSH
32536: LD_INT 4
32538: PPUSH
32539: CALL_OW 235
// ComMoveXY ( Cornel , 257 , 198 ) ;
32543: LD_EXP 12
32547: PPUSH
32548: LD_INT 257
32550: PPUSH
32551: LD_INT 198
32553: PPUSH
32554: CALL_OW 111
// AddComHold ( Cornel ) ;
32558: LD_EXP 12
32562: PPUSH
32563: CALL_OW 200
// end ; if tpUnit = Denis then
32567: LD_VAR 0 1
32571: PUSH
32572: LD_EXP 8
32576: EQUAL
32577: IFFALSE 32630
// begin Say ( Denis , DA1-Den-1a ) ;
32579: LD_EXP 8
32583: PPUSH
32584: LD_STRING DA1-Den-1a
32586: PPUSH
32587: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
32591: LD_EXP 28
32595: PPUSH
32596: LD_STRING DA-Roth-3
32598: PPUSH
32599: CALL_OW 88
// SetSide ( Denis , 7 ) ;
32603: LD_EXP 8
32607: PPUSH
32608: LD_INT 7
32610: PPUSH
32611: CALL_OW 235
// ComMoveXY ( Denis , 240 , 188 ) ;
32615: LD_EXP 8
32619: PPUSH
32620: LD_INT 240
32622: PPUSH
32623: LD_INT 188
32625: PPUSH
32626: CALL_OW 111
// end ; if tpUnit = Bobby then
32630: LD_VAR 0 1
32634: PUSH
32635: LD_EXP 6
32639: EQUAL
32640: IFFALSE 32693
// begin Say ( Joan , DA1-Bobby-1a ) ;
32642: LD_EXP 2
32646: PPUSH
32647: LD_STRING DA1-Bobby-1a
32649: PPUSH
32650: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
32654: LD_EXP 28
32658: PPUSH
32659: LD_STRING DA-Roth-3
32661: PPUSH
32662: CALL_OW 88
// SetSide ( Bobby , 7 ) ;
32666: LD_EXP 6
32670: PPUSH
32671: LD_INT 7
32673: PPUSH
32674: CALL_OW 235
// ComMoveXY ( Bobby , 240 , 188 ) ;
32678: LD_EXP 6
32682: PPUSH
32683: LD_INT 240
32685: PPUSH
32686: LD_INT 188
32688: PPUSH
32689: CALL_OW 111
// end ; if tpUnit = Gladstone then
32693: LD_VAR 0 1
32697: PUSH
32698: LD_EXP 10
32702: EQUAL
32703: IFFALSE 32765
// begin Say ( Gladstone , DA1-Glad-1a ) ;
32705: LD_EXP 10
32709: PPUSH
32710: LD_STRING DA1-Glad-1a
32712: PPUSH
32713: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
32717: LD_EXP 28
32721: PPUSH
32722: LD_STRING DA-Roth-3a
32724: PPUSH
32725: CALL_OW 88
// SetSide ( Gladstone , 4 ) ;
32729: LD_EXP 10
32733: PPUSH
32734: LD_INT 4
32736: PPUSH
32737: CALL_OW 235
// ComMoveXY ( Gladstone , 257 , 198 ) ;
32741: LD_EXP 10
32745: PPUSH
32746: LD_INT 257
32748: PPUSH
32749: LD_INT 198
32751: PPUSH
32752: CALL_OW 111
// AddComHold ( Gladstone ) ;
32756: LD_EXP 10
32760: PPUSH
32761: CALL_OW 200
// end ; if tpUnit = Cyrus then
32765: LD_VAR 0 1
32769: PUSH
32770: LD_EXP 7
32774: EQUAL
32775: IFFALSE 32837
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
32777: LD_EXP 7
32781: PPUSH
32782: LD_STRING DA1-Cyrus-1a
32784: PPUSH
32785: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
32789: LD_EXP 28
32793: PPUSH
32794: LD_STRING DA-Roth-3a
32796: PPUSH
32797: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
32801: LD_EXP 7
32805: PPUSH
32806: LD_INT 4
32808: PPUSH
32809: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
32813: LD_EXP 7
32817: PPUSH
32818: LD_INT 257
32820: PPUSH
32821: LD_INT 198
32823: PPUSH
32824: CALL_OW 111
// AddComHold ( Cyrus ) ;
32828: LD_EXP 7
32832: PPUSH
32833: CALL_OW 200
// end ; if tpUnit = Stevens then
32837: LD_VAR 0 1
32841: PUSH
32842: LD_EXP 3
32846: EQUAL
32847: IFFALSE 32900
// begin Say ( Stevens , DA1-Huck-1a ) ;
32849: LD_EXP 3
32853: PPUSH
32854: LD_STRING DA1-Huck-1a
32856: PPUSH
32857: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
32861: LD_EXP 28
32865: PPUSH
32866: LD_STRING DA-Roth-3
32868: PPUSH
32869: CALL_OW 88
// SetSide ( Stevens , 7 ) ;
32873: LD_EXP 3
32877: PPUSH
32878: LD_INT 7
32880: PPUSH
32881: CALL_OW 235
// ComMoveXY ( Stevens , 240 , 188 ) ;
32885: LD_EXP 3
32889: PPUSH
32890: LD_INT 240
32892: PPUSH
32893: LD_INT 188
32895: PPUSH
32896: CALL_OW 111
// end ; if tpUnit = Baker then
32900: LD_VAR 0 1
32904: PUSH
32905: LD_EXP 21
32909: EQUAL
32910: IFFALSE 32963
// begin Say ( Baker , DA1-Huck-1a ) ;
32912: LD_EXP 21
32916: PPUSH
32917: LD_STRING DA1-Huck-1a
32919: PPUSH
32920: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
32924: LD_EXP 28
32928: PPUSH
32929: LD_STRING DA-Roth-3
32931: PPUSH
32932: CALL_OW 88
// SetSide ( Baker , 7 ) ;
32936: LD_EXP 21
32940: PPUSH
32941: LD_INT 7
32943: PPUSH
32944: CALL_OW 235
// ComMoveXY ( Baker , 240 , 188 ) ;
32948: LD_EXP 21
32952: PPUSH
32953: LD_INT 240
32955: PPUSH
32956: LD_INT 188
32958: PPUSH
32959: CALL_OW 111
// end ; if tpUnit = Brown then
32963: LD_VAR 0 1
32967: PUSH
32968: LD_EXP 9
32972: EQUAL
32973: IFFALSE 33026
// begin Say ( Cyrus , DA1-Brown-1a ) ;
32975: LD_EXP 7
32979: PPUSH
32980: LD_STRING DA1-Brown-1a
32982: PPUSH
32983: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
32987: LD_EXP 28
32991: PPUSH
32992: LD_STRING DA-Roth-3
32994: PPUSH
32995: CALL_OW 88
// SetSide ( Brown , 7 ) ;
32999: LD_EXP 9
33003: PPUSH
33004: LD_INT 7
33006: PPUSH
33007: CALL_OW 235
// ComMoveXY ( Brown , 240 , 188 ) ;
33011: LD_EXP 9
33015: PPUSH
33016: LD_INT 240
33018: PPUSH
33019: LD_INT 188
33021: PPUSH
33022: CALL_OW 111
// end ; if tpUnit = Gary then
33026: LD_VAR 0 1
33030: PUSH
33031: LD_EXP 13
33035: EQUAL
33036: IFFALSE 33098
// begin Say ( Gary , DA1-Gary-1a ) ;
33038: LD_EXP 13
33042: PPUSH
33043: LD_STRING DA1-Gary-1a
33045: PPUSH
33046: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33050: LD_EXP 28
33054: PPUSH
33055: LD_STRING DA-Roth-3a
33057: PPUSH
33058: CALL_OW 88
// SetSide ( Gary , 4 ) ;
33062: LD_EXP 13
33066: PPUSH
33067: LD_INT 4
33069: PPUSH
33070: CALL_OW 235
// ComMoveXY ( Gary , 257 , 198 ) ;
33074: LD_EXP 13
33078: PPUSH
33079: LD_INT 257
33081: PPUSH
33082: LD_INT 198
33084: PPUSH
33085: CALL_OW 111
// AddComHold ( Gary ) ;
33089: LD_EXP 13
33093: PPUSH
33094: CALL_OW 200
// end ; if tpUnit = Cyrus then
33098: LD_VAR 0 1
33102: PUSH
33103: LD_EXP 7
33107: EQUAL
33108: IFFALSE 33170
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
33110: LD_EXP 7
33114: PPUSH
33115: LD_STRING DA1-Cyrus-1a
33117: PPUSH
33118: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33122: LD_EXP 28
33126: PPUSH
33127: LD_STRING DA-Roth-3a
33129: PPUSH
33130: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
33134: LD_EXP 7
33138: PPUSH
33139: LD_INT 4
33141: PPUSH
33142: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
33146: LD_EXP 7
33150: PPUSH
33151: LD_INT 257
33153: PPUSH
33154: LD_INT 198
33156: PPUSH
33157: CALL_OW 111
// AddComHold ( Cyrus ) ;
33161: LD_EXP 7
33165: PPUSH
33166: CALL_OW 200
// end ; if tpUnit = Connie then
33170: LD_VAR 0 1
33174: PUSH
33175: LD_EXP 16
33179: EQUAL
33180: IFFALSE 33242
// begin Say ( Connie , DA1-Con-1a ) ;
33182: LD_EXP 16
33186: PPUSH
33187: LD_STRING DA1-Con-1a
33189: PPUSH
33190: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33194: LD_EXP 28
33198: PPUSH
33199: LD_STRING DA-Roth-3a
33201: PPUSH
33202: CALL_OW 88
// SetSide ( Connie , 4 ) ;
33206: LD_EXP 16
33210: PPUSH
33211: LD_INT 4
33213: PPUSH
33214: CALL_OW 235
// ComMoveXY ( Connie , 257 , 198 ) ;
33218: LD_EXP 16
33222: PPUSH
33223: LD_INT 257
33225: PPUSH
33226: LD_INT 198
33228: PPUSH
33229: CALL_OW 111
// AddComHold ( Connie ) ;
33233: LD_EXP 16
33237: PPUSH
33238: CALL_OW 200
// end ; if tpUnit = Kurt then
33242: LD_VAR 0 1
33246: PUSH
33247: LD_EXP 30
33251: EQUAL
33252: IFFALSE 33314
// begin Say ( Kurt , DA1-Kurt-1a ) ;
33254: LD_EXP 30
33258: PPUSH
33259: LD_STRING DA1-Kurt-1a
33261: PPUSH
33262: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33266: LD_EXP 28
33270: PPUSH
33271: LD_STRING DA-Roth-3a
33273: PPUSH
33274: CALL_OW 88
// SetSide ( Kurt , 4 ) ;
33278: LD_EXP 30
33282: PPUSH
33283: LD_INT 4
33285: PPUSH
33286: CALL_OW 235
// ComMoveXY ( Kurt , 257 , 198 ) ;
33290: LD_EXP 30
33294: PPUSH
33295: LD_INT 257
33297: PPUSH
33298: LD_INT 198
33300: PPUSH
33301: CALL_OW 111
// AddComHold ( Kurt ) ;
33305: LD_EXP 30
33309: PPUSH
33310: CALL_OW 200
// end ; if tpUnit = Kikuchi then
33314: LD_VAR 0 1
33318: PUSH
33319: LD_EXP 15
33323: EQUAL
33324: IFFALSE 33377
// begin Say ( Kikuchi , DA1-Yam-1a ) ;
33326: LD_EXP 15
33330: PPUSH
33331: LD_STRING DA1-Yam-1a
33333: PPUSH
33334: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33338: LD_EXP 28
33342: PPUSH
33343: LD_STRING DA-Roth-3
33345: PPUSH
33346: CALL_OW 88
// SetSide ( Kikuchi , 7 ) ;
33350: LD_EXP 15
33354: PPUSH
33355: LD_INT 7
33357: PPUSH
33358: CALL_OW 235
// ComMoveXY ( Kikuchi , 240 , 188 ) ;
33362: LD_EXP 15
33366: PPUSH
33367: LD_INT 240
33369: PPUSH
33370: LD_INT 188
33372: PPUSH
33373: CALL_OW 111
// end ; if tpUnit = Frank then
33377: LD_VAR 0 1
33381: PUSH
33382: LD_EXP 14
33386: EQUAL
33387: IFFALSE 33449
// begin Say ( Frank , DA1-Frank-1a ) ;
33389: LD_EXP 14
33393: PPUSH
33394: LD_STRING DA1-Frank-1a
33396: PPUSH
33397: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33401: LD_EXP 28
33405: PPUSH
33406: LD_STRING DA-Roth-3a
33408: PPUSH
33409: CALL_OW 88
// SetSide ( Frank , 4 ) ;
33413: LD_EXP 14
33417: PPUSH
33418: LD_INT 4
33420: PPUSH
33421: CALL_OW 235
// ComMoveXY ( Frank , 257 , 198 ) ;
33425: LD_EXP 14
33429: PPUSH
33430: LD_INT 257
33432: PPUSH
33433: LD_INT 198
33435: PPUSH
33436: CALL_OW 111
// AddComHold ( Frank ) ;
33440: LD_EXP 14
33444: PPUSH
33445: CALL_OW 200
// end ; if allianceFirstContact = 0 then
33449: LD_EXP 63
33453: PUSH
33454: LD_INT 0
33456: EQUAL
33457: IFFALSE 33503
// begin Say ( JMM , DAa-JMM-1 ) ;
33459: LD_EXP 1
33463: PPUSH
33464: LD_STRING DAa-JMM-1
33466: PPUSH
33467: CALL_OW 88
// Say ( JMM , DAa-JMM-1a ) ;
33471: LD_EXP 1
33475: PPUSH
33476: LD_STRING DAa-JMM-1a
33478: PPUSH
33479: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
33483: LD_EXP 1
33487: PPUSH
33488: LD_STRING DAa-JMM-1b
33490: PPUSH
33491: CALL_OW 88
// allianceFirstContact = 1 ;
33495: LD_ADDR_EXP 63
33499: PUSH
33500: LD_INT 1
33502: ST_TO_ADDR
// end ; if not tpUnit in heroes then
33503: LD_VAR 0 1
33507: PUSH
33508: LD_VAR 0 2
33512: IN
33513: NOT
33514: IFFALSE 33824
// begin rnd = Rand ( 1 , 2 ) ;
33516: LD_ADDR_VAR 0 3
33520: PUSH
33521: LD_INT 1
33523: PPUSH
33524: LD_INT 2
33526: PPUSH
33527: CALL_OW 12
33531: ST_TO_ADDR
// if GetSex ( tpUnit ) = 1 then
33532: LD_VAR 0 1
33536: PPUSH
33537: CALL_OW 258
33541: PUSH
33542: LD_INT 1
33544: EQUAL
33545: IFFALSE 33678
// begin if rnd = 1 then
33547: LD_VAR 0 3
33551: PUSH
33552: LD_INT 1
33554: EQUAL
33555: IFFALSE 33617
// begin Say ( tpUnit , DA1-Sol1-1a ) ;
33557: LD_VAR 0 1
33561: PPUSH
33562: LD_STRING DA1-Sol1-1a
33564: PPUSH
33565: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33569: LD_EXP 28
33573: PPUSH
33574: LD_STRING DA-Roth-3a
33576: PPUSH
33577: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
33581: LD_VAR 0 1
33585: PPUSH
33586: LD_INT 4
33588: PPUSH
33589: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
33593: LD_VAR 0 1
33597: PPUSH
33598: LD_INT 257
33600: PPUSH
33601: LD_INT 198
33603: PPUSH
33604: CALL_OW 111
// AddComHold ( tpUnit ) ;
33608: LD_VAR 0 1
33612: PPUSH
33613: CALL_OW 200
// end ; if rnd = 2 then
33617: LD_VAR 0 3
33621: PUSH
33622: LD_INT 2
33624: EQUAL
33625: IFFALSE 33678
// begin Say ( tpUnit , DA1-Sol1-1b ) ;
33627: LD_VAR 0 1
33631: PPUSH
33632: LD_STRING DA1-Sol1-1b
33634: PPUSH
33635: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33639: LD_EXP 28
33643: PPUSH
33644: LD_STRING DA-Roth-3
33646: PPUSH
33647: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
33651: LD_VAR 0 1
33655: PPUSH
33656: LD_INT 7
33658: PPUSH
33659: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
33663: LD_VAR 0 1
33667: PPUSH
33668: LD_INT 240
33670: PPUSH
33671: LD_INT 188
33673: PPUSH
33674: CALL_OW 111
// end ; end ; if GetSex ( tpUnit ) = 2 then
33678: LD_VAR 0 1
33682: PPUSH
33683: CALL_OW 258
33687: PUSH
33688: LD_INT 2
33690: EQUAL
33691: IFFALSE 33824
// begin if rnd = 1 then
33693: LD_VAR 0 3
33697: PUSH
33698: LD_INT 1
33700: EQUAL
33701: IFFALSE 33763
// begin Say ( tpUnit , DA1-FSol1-1a ) ;
33703: LD_VAR 0 1
33707: PPUSH
33708: LD_STRING DA1-FSol1-1a
33710: PPUSH
33711: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33715: LD_EXP 28
33719: PPUSH
33720: LD_STRING DA-Roth-3a
33722: PPUSH
33723: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
33727: LD_VAR 0 1
33731: PPUSH
33732: LD_INT 4
33734: PPUSH
33735: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
33739: LD_VAR 0 1
33743: PPUSH
33744: LD_INT 257
33746: PPUSH
33747: LD_INT 198
33749: PPUSH
33750: CALL_OW 111
// AddComHold ( tpUnit ) ;
33754: LD_VAR 0 1
33758: PPUSH
33759: CALL_OW 200
// end ; if rnd = 2 then
33763: LD_VAR 0 3
33767: PUSH
33768: LD_INT 2
33770: EQUAL
33771: IFFALSE 33824
// begin Say ( tpUnit , DA1-FSol1-1b ) ;
33773: LD_VAR 0 1
33777: PPUSH
33778: LD_STRING DA1-FSol1-1b
33780: PPUSH
33781: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33785: LD_EXP 28
33789: PPUSH
33790: LD_STRING DA-Roth-3
33792: PPUSH
33793: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
33797: LD_VAR 0 1
33801: PPUSH
33802: LD_INT 7
33804: PPUSH
33805: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
33809: LD_VAR 0 1
33813: PPUSH
33814: LD_INT 240
33816: PPUSH
33817: LD_INT 188
33819: PPUSH
33820: CALL_OW 111
// end ; end ; end ; SetAttitude ( 1 , 7 , att_enemy , true ) ;
33824: LD_INT 1
33826: PPUSH
33827: LD_INT 7
33829: PPUSH
33830: LD_INT 2
33832: PPUSH
33833: LD_INT 1
33835: PPUSH
33836: CALL_OW 80
// InGameOff ;
33840: CALL_OW 9
// enable ;
33844: ENABLE
// end ;
33845: PPOPN 3
33847: END
// every 0 0$1 trigger timeAction >= 45 45$02 do
33848: LD_EXP 96
33852: PUSH
33853: LD_INT 94570
33855: GREATEREQUAL
33856: IFFALSE 34175
33858: GO 33860
33860: DISABLE
// begin DialogueOn ;
33861: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-1 , D5-FSol1-1 ) ;
33865: LD_INT 22
33867: PUSH
33868: LD_INT 1
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 23
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 26
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 2
33897: PUSH
33898: LD_INT 25
33900: PUSH
33901: LD_INT 1
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 25
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 25
33920: PUSH
33921: LD_INT 3
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 25
33930: PUSH
33931: LD_INT 4
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 25
33940: PUSH
33941: LD_INT 5
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 25
33950: PUSH
33951: LD_INT 8
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: PPUSH
33973: CALL_OW 69
33977: PPUSH
33978: LD_STRING D11-Sol1-1
33980: PPUSH
33981: LD_STRING D5-FSol1-1
33983: PPUSH
33984: CALL 6913 0 3
// SayRadio ( Platonov , D11-Pla-1 ) ;
33988: LD_EXP 26
33992: PPUSH
33993: LD_STRING D11-Pla-1
33995: PPUSH
33996: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
34000: LD_EXP 36
34004: PPUSH
34005: LD_STRING D11-Kov-1
34007: PPUSH
34008: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
34012: LD_EXP 26
34016: PPUSH
34017: LD_STRING D11-Pla-2
34019: PPUSH
34020: CALL_OW 94
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-2 , D5-FSol1-1 ) ;
34024: LD_INT 22
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 23
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 26
34046: PUSH
34047: LD_INT 1
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 2
34056: PUSH
34057: LD_INT 25
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 25
34069: PUSH
34070: LD_INT 2
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 25
34079: PUSH
34080: LD_INT 3
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 25
34089: PUSH
34090: LD_INT 4
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 25
34099: PUSH
34100: LD_INT 5
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 25
34109: PUSH
34110: LD_INT 8
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: PPUSH
34132: CALL_OW 69
34136: PPUSH
34137: LD_STRING D11-Sol1-2
34139: PPUSH
34140: LD_STRING D5-FSol1-1
34142: PPUSH
34143: CALL 6913 0 3
// Say ( JMM , D11-JMM-2 ) ;
34147: LD_EXP 1
34151: PPUSH
34152: LD_STRING D11-JMM-2
34154: PPUSH
34155: CALL_OW 88
// DialogueOff ;
34159: CALL_OW 7
// PreapreMehBehs ;
34163: CALL 5738 0 0
// missionStage = 5 ;
34167: LD_ADDR_EXP 100
34171: PUSH
34172: LD_INT 5
34174: ST_TO_ADDR
// end ;
34175: END
// every 0 0$1 trigger timeAction >= 50 50$02 do var dec , time ;
34176: LD_EXP 96
34180: PUSH
34181: LD_INT 105070
34183: GREATEREQUAL
34184: IFFALSE 34578
34186: GO 34188
34188: DISABLE
34189: LD_INT 0
34191: PPUSH
34192: PPUSH
// begin time = 0 0$00 ;
34193: LD_ADDR_VAR 0 2
34197: PUSH
34198: LD_INT 0
34200: ST_TO_ADDR
// DialogueOn ;
34201: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
34205: LD_EXP 26
34209: PPUSH
34210: LD_STRING D15-Pla-1
34212: PPUSH
34213: CALL_OW 94
// dec = Query ( Q15a ) ;
34217: LD_ADDR_VAR 0 1
34221: PUSH
34222: LD_STRING Q15a
34224: PPUSH
34225: CALL_OW 97
34229: ST_TO_ADDR
// if dec = 1 then
34230: LD_VAR 0 1
34234: PUSH
34235: LD_INT 1
34237: EQUAL
34238: IFFALSE 34259
// begin Say ( JMM , D15a-JMM-1 ) ;
34240: LD_EXP 1
34244: PPUSH
34245: LD_STRING D15a-JMM-1
34247: PPUSH
34248: CALL_OW 88
// YouLost ( Surrender ) ;
34252: LD_STRING Surrender
34254: PPUSH
34255: CALL_OW 104
// end ; if dec = 2 then
34259: LD_VAR 0 1
34263: PUSH
34264: LD_INT 2
34266: EQUAL
34267: IFFALSE 34297
// begin Say ( JMM , D15b-JMM-1 ) ;
34269: LD_EXP 1
34273: PPUSH
34274: LD_STRING D15b-JMM-1
34276: PPUSH
34277: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
34281: LD_EXP 26
34285: PPUSH
34286: LD_STRING D15b-Pla-1
34288: PPUSH
34289: CALL_OW 94
// DialogueOff ;
34293: CALL_OW 7
// end ; if dec = 3 then
34297: LD_VAR 0 1
34301: PUSH
34302: LD_INT 3
34304: EQUAL
34305: IFFALSE 34381
// begin Say ( JMM , D15c-JMM-1 ) ;
34307: LD_EXP 1
34311: PPUSH
34312: LD_STRING D15c-JMM-1
34314: PPUSH
34315: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
34319: LD_EXP 26
34323: PPUSH
34324: LD_STRING D15c-Pla-1
34326: PPUSH
34327: CALL_OW 94
// DialogueOff ;
34331: CALL_OW 7
// wait ( 0 0$15 ) ;
34335: LD_INT 525
34337: PPUSH
34338: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
34342: LD_EXP 26
34346: PPUSH
34347: LD_STRING D18-Pla-1
34349: PPUSH
34350: CALL_OW 88
// ComAttackPlace ( rurocket , GetX ( JMM ) , GetY ( JMM ) ) ;
34354: LD_INT 273
34356: PPUSH
34357: LD_EXP 1
34361: PPUSH
34362: CALL_OW 250
34366: PPUSH
34367: LD_EXP 1
34371: PPUSH
34372: CALL_OW 251
34376: PPUSH
34377: CALL_OW 116
// end ; if dec = 4 then
34381: LD_VAR 0 1
34385: PUSH
34386: LD_INT 4
34388: EQUAL
34389: IFFALSE 34427
// begin Say ( JMM , D15d-JMM-1 ) ;
34391: LD_EXP 1
34395: PPUSH
34396: LD_STRING D15d-JMM-1
34398: PPUSH
34399: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
34403: LD_EXP 26
34407: PPUSH
34408: LD_STRING D15d-Pla-1
34410: PPUSH
34411: CALL_OW 94
// DialogueOff ;
34415: CALL_OW 7
// missionStage = 6 ;
34419: LD_ADDR_EXP 100
34423: PUSH
34424: LD_INT 6
34426: ST_TO_ADDR
// end ; if dec = 2 then
34427: LD_VAR 0 1
34431: PUSH
34432: LD_INT 2
34434: EQUAL
34435: IFFALSE 34508
// begin repeat wait ( 0 0$01 ) ;
34437: LD_INT 35
34439: PPUSH
34440: CALL_OW 67
// time = time + 0 0$01 ;
34444: LD_ADDR_VAR 0 2
34448: PUSH
34449: LD_VAR 0 2
34453: PUSH
34454: LD_INT 35
34456: PLUS
34457: ST_TO_ADDR
// until time >= 3 3$00 ;
34458: LD_VAR 0 2
34462: PUSH
34463: LD_INT 6300
34465: GREATEREQUAL
34466: IFFALSE 34437
// DialogueOn ;
34468: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
34472: LD_EXP 1
34476: PPUSH
34477: LD_STRING D15d-JMM-1a
34479: PPUSH
34480: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
34484: LD_EXP 26
34488: PPUSH
34489: LD_STRING D15d-Pla-1
34491: PPUSH
34492: CALL_OW 94
// DialogueOff ;
34496: CALL_OW 7
// missionStage = 6 ;
34500: LD_ADDR_EXP 100
34504: PUSH
34505: LD_INT 6
34507: ST_TO_ADDR
// end ; if IsOk ( LegionFriend ) and GetSide ( LegionFriend ) = 1 then
34508: LD_EXP 52
34512: PPUSH
34513: CALL_OW 302
34517: PUSH
34518: LD_EXP 52
34522: PPUSH
34523: CALL_OW 255
34527: PUSH
34528: LD_INT 1
34530: EQUAL
34531: AND
34532: IFFALSE 34578
// begin DialogueOn ;
34534: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
34538: LD_EXP 1
34542: PPUSH
34543: LD_STRING D16-JMM-1
34545: PPUSH
34546: CALL_OW 88
// Say ( LegionFriend , D16-Friend-1 ) ;
34550: LD_EXP 52
34554: PPUSH
34555: LD_STRING D16-Friend-1
34557: PPUSH
34558: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
34562: LD_EXP 1
34566: PPUSH
34567: LD_STRING D16-JMM-2
34569: PPUSH
34570: CALL_OW 88
// DialogueOff ;
34574: CALL_OW 7
// end ; end ;
34578: PPOPN 2
34580: END
// every 1 1$0 trigger missionStage = 6 and IsOK ( LegionFriend ) and GetSide ( LegionFriend ) = 1 do var rocketTarget ;
34581: LD_EXP 100
34585: PUSH
34586: LD_INT 6
34588: EQUAL
34589: PUSH
34590: LD_EXP 52
34594: PPUSH
34595: CALL_OW 302
34599: AND
34600: PUSH
34601: LD_EXP 52
34605: PPUSH
34606: CALL_OW 255
34610: PUSH
34611: LD_INT 1
34613: EQUAL
34614: AND
34615: IFFALSE 35252
34617: GO 34619
34619: DISABLE
34620: LD_INT 0
34622: PPUSH
// begin DialogueOn ;
34623: CALL_OW 6
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
34627: LD_INT 22
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 2
34639: PUSH
34640: LD_INT 34
34642: PUSH
34643: LD_INT 8
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 35
34652: PUSH
34653: LD_INT 8
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: LIST
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PPUSH
34669: CALL_OW 69
34673: PUSH
34674: LD_INT 0
34676: GREATER
34677: IFFALSE 34701
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
34679: LD_EXP 26
34683: PPUSH
34684: LD_STRING D16c-Pla-1
34686: PPUSH
34687: CALL_OW 94
// playerHaveRocket = 1 ;
34691: LD_ADDR_EXP 99
34695: PUSH
34696: LD_INT 1
34698: ST_TO_ADDR
// end else
34699: GO 35160
// begin SayRadio ( Platonov , D16a-Pla-1 ) ;
34701: LD_EXP 26
34705: PPUSH
34706: LD_STRING D16a-Pla-1
34708: PPUSH
34709: CALL_OW 94
// if IsOK ( Stevens ) then
34713: LD_EXP 3
34717: PPUSH
34718: CALL_OW 302
34722: IFFALSE 34738
// begin Say ( Stevens , D16a-Huck-1 ) ;
34724: LD_EXP 3
34728: PPUSH
34729: LD_STRING D16a-Huck-1
34731: PPUSH
34732: CALL_OW 88
// end else
34736: GO 34886
// begin if IsOk ( Baker ) then
34738: LD_EXP 21
34742: PPUSH
34743: CALL_OW 302
34747: IFFALSE 34763
// begin Say ( Baker , D16a-Huck-1 ) ;
34749: LD_EXP 21
34753: PPUSH
34754: LD_STRING D16a-Huck-1
34756: PPUSH
34757: CALL_OW 88
// end else
34761: GO 34886
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D16a-Sol1-1 , D5-FSol1-1 ) ;
34763: LD_INT 22
34765: PUSH
34766: LD_INT 1
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 23
34775: PUSH
34776: LD_INT 1
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 26
34785: PUSH
34786: LD_INT 1
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 2
34795: PUSH
34796: LD_INT 25
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 25
34808: PUSH
34809: LD_INT 2
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 25
34818: PUSH
34819: LD_INT 3
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 25
34828: PUSH
34829: LD_INT 4
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 25
34838: PUSH
34839: LD_INT 5
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 25
34848: PUSH
34849: LD_INT 8
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: PPUSH
34871: CALL_OW 69
34875: PPUSH
34876: LD_STRING D16a-Sol1-1
34878: PPUSH
34879: LD_STRING D5-FSol1-1
34881: PPUSH
34882: CALL 6913 0 3
// end ; end ; wait ( 0 0$30 ) ;
34886: LD_INT 1050
34888: PPUSH
34889: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
34893: LD_EXP 26
34897: PPUSH
34898: LD_STRING D18-Pla-1
34900: PPUSH
34901: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
34905: LD_ADDR_VAR 0 1
34909: PUSH
34910: LD_INT 22
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 21
34922: PUSH
34923: LD_INT 3
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 23
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: LD_INT 30
34945: PUSH
34946: LD_INT 0
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 30
34955: PUSH
34956: LD_INT 1
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: LIST
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: PPUSH
34974: CALL_OW 69
34978: ST_TO_ADDR
// if rocketTarget = 0 then
34979: LD_VAR 0 1
34983: PUSH
34984: LD_INT 0
34986: EQUAL
34987: IFFALSE 35063
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
34989: LD_ADDR_VAR 0 1
34993: PUSH
34994: LD_INT 22
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 21
35006: PUSH
35007: LD_INT 3
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 23
35016: PUSH
35017: LD_INT 2
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 2
35026: PUSH
35027: LD_INT 30
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 30
35039: PUSH
35040: LD_INT 1
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: LIST
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: PPUSH
35058: CALL_OW 69
35062: ST_TO_ADDR
// if rocketTarget = 0 then
35063: LD_VAR 0 1
35067: PUSH
35068: LD_INT 0
35070: EQUAL
35071: IFFALSE 35125
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
35073: LD_ADDR_VAR 0 1
35077: PUSH
35078: LD_INT 22
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 21
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 23
35100: PUSH
35101: LD_INT 1
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 50
35110: PUSH
35111: EMPTY
35112: LIST
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: PPUSH
35120: CALL_OW 69
35124: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
35125: LD_INT 273
35127: PPUSH
35128: LD_VAR 0 1
35132: PUSH
35133: LD_INT 1
35135: ARRAY
35136: PPUSH
35137: CALL_OW 250
35141: PPUSH
35142: LD_VAR 0 1
35146: PUSH
35147: LD_INT 1
35149: ARRAY
35150: PPUSH
35151: CALL_OW 251
35155: PPUSH
35156: CALL_OW 116
// end ; Say ( JMM , D16a-JMM-1a ) ;
35160: LD_EXP 1
35164: PPUSH
35165: LD_STRING D16a-JMM-1a
35167: PPUSH
35168: CALL_OW 88
// DialogueOff ;
35172: CALL_OW 7
// SetSide ( LegionFriend , 3 ) ;
35176: LD_EXP 52
35180: PPUSH
35181: LD_INT 3
35183: PPUSH
35184: CALL_OW 235
// ComExitBuilding ( LegionFriend ) ;
35188: LD_EXP 52
35192: PPUSH
35193: CALL_OW 122
// ComExitVehicle ( LegionFriend ) ;
35197: LD_EXP 52
35201: PPUSH
35202: CALL_OW 121
// wait ( 0 0$1 ) ;
35206: LD_INT 35
35208: PPUSH
35209: CALL_OW 67
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
35213: LD_EXP 52
35217: PPUSH
35218: LD_INT 18
35220: PPUSH
35221: CALL_OW 113
// wait ( 0 0$3 ) ;
35225: LD_INT 105
35227: PPUSH
35228: CALL_OW 67
// DialogueOn ;
35232: CALL_OW 6
// Say ( JMM , D16a-JMM-1 ) ;
35236: LD_EXP 1
35240: PPUSH
35241: LD_STRING D16a-JMM-1
35243: PPUSH
35244: CALL_OW 88
// DialogueOff ;
35248: CALL_OW 7
// end ;
35252: PPOPN 1
35254: END
// every 0 0$1 trigger GetSide ( LegionFriend ) = 3 do var i ;
35255: LD_EXP 52
35259: PPUSH
35260: CALL_OW 255
35264: PUSH
35265: LD_INT 3
35267: EQUAL
35268: IFFALSE 35375
35270: GO 35272
35272: DISABLE
35273: LD_INT 0
35275: PPUSH
// begin enable ;
35276: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_outside ] ] ) do
35277: LD_ADDR_VAR 0 1
35281: PUSH
35282: LD_INT 22
35284: PUSH
35285: LD_INT 1
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 21
35294: PUSH
35295: LD_INT 1
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 56
35304: PUSH
35305: EMPTY
35306: LIST
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: PPUSH
35313: CALL_OW 69
35317: PUSH
35318: FOR_IN
35319: IFFALSE 35373
// begin if GetDistUnits ( i , LegionFriend ) < 8 then
35321: LD_VAR 0 1
35325: PPUSH
35326: LD_EXP 52
35330: PPUSH
35331: CALL_OW 296
35335: PUSH
35336: LD_INT 8
35338: LESS
35339: IFFALSE 35371
// begin disable ;
35341: DISABLE
// DialogueOn ;
35342: CALL_OW 6
// CenterNowOnUnits ( LegionFriend ) ;
35346: LD_EXP 52
35350: PPUSH
35351: CALL_OW 87
// Say ( LegionFriend , D16a-Friend-1 ) ;
35355: LD_EXP 52
35359: PPUSH
35360: LD_STRING D16a-Friend-1
35362: PPUSH
35363: CALL_OW 88
// DialogueOff ;
35367: CALL_OW 7
// end ; end ;
35371: GO 35318
35373: POP
35374: POP
// end ;
35375: PPOPN 1
35377: END
// every 5 5$0 trigger missionStage = 6 and not GetSide ( LegionFriend ) = 1 do var rocketTarget ;
35378: LD_EXP 100
35382: PUSH
35383: LD_INT 6
35385: EQUAL
35386: PUSH
35387: LD_EXP 52
35391: PPUSH
35392: CALL_OW 255
35396: PUSH
35397: LD_INT 1
35399: EQUAL
35400: NOT
35401: AND
35402: IFFALSE 35782
35404: GO 35406
35406: DISABLE
35407: LD_INT 0
35409: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
35410: LD_INT 22
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 2
35422: PUSH
35423: LD_INT 34
35425: PUSH
35426: LD_INT 8
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 35
35435: PUSH
35436: LD_INT 8
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: LIST
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PPUSH
35452: CALL_OW 69
35456: PUSH
35457: LD_INT 0
35459: GREATER
35460: IFFALSE 35484
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
35462: LD_EXP 26
35466: PPUSH
35467: LD_STRING D16c-Pla-1
35469: PPUSH
35470: CALL_OW 94
// playerHaveRocket = 1 ;
35474: LD_ADDR_EXP 99
35478: PUSH
35479: LD_INT 1
35481: ST_TO_ADDR
// end else
35482: GO 35782
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
35484: LD_EXP 26
35488: PPUSH
35489: LD_STRING D16b-Pla-1
35491: PPUSH
35492: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
35496: LD_EXP 1
35500: PPUSH
35501: LD_STRING D16b-JMM-1
35503: PPUSH
35504: CALL_OW 88
// wait ( 0 0$15 ) ;
35508: LD_INT 525
35510: PPUSH
35511: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35515: LD_EXP 26
35519: PPUSH
35520: LD_STRING D18-Pla-1
35522: PPUSH
35523: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35527: LD_ADDR_VAR 0 1
35531: PUSH
35532: LD_INT 22
35534: PUSH
35535: LD_INT 1
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 21
35544: PUSH
35545: LD_INT 3
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 23
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 2
35564: PUSH
35565: LD_INT 30
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 30
35577: PUSH
35578: LD_INT 1
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: LIST
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: PPUSH
35596: CALL_OW 69
35600: ST_TO_ADDR
// if rocketTarget = 0 then
35601: LD_VAR 0 1
35605: PUSH
35606: LD_INT 0
35608: EQUAL
35609: IFFALSE 35685
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35611: LD_ADDR_VAR 0 1
35615: PUSH
35616: LD_INT 22
35618: PUSH
35619: LD_INT 1
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 21
35628: PUSH
35629: LD_INT 3
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 23
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 2
35648: PUSH
35649: LD_INT 30
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 30
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: PPUSH
35680: CALL_OW 69
35684: ST_TO_ADDR
// if rocketTarget = 0 then
35685: LD_VAR 0 1
35689: PUSH
35690: LD_INT 0
35692: EQUAL
35693: IFFALSE 35747
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
35695: LD_ADDR_VAR 0 1
35699: PUSH
35700: LD_INT 22
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 21
35712: PUSH
35713: LD_INT 1
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 23
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 50
35732: PUSH
35733: EMPTY
35734: LIST
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: PPUSH
35742: CALL_OW 69
35746: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
35747: LD_INT 273
35749: PPUSH
35750: LD_VAR 0 1
35754: PUSH
35755: LD_INT 1
35757: ARRAY
35758: PPUSH
35759: CALL_OW 250
35763: PPUSH
35764: LD_VAR 0 1
35768: PUSH
35769: LD_INT 1
35771: ARRAY
35772: PPUSH
35773: CALL_OW 251
35777: PPUSH
35778: CALL_OW 116
// end ; end ;
35782: PPOPN 1
35784: END
// every 0 0$1 trigger timeAction >= 80 80$02 and missionStage >= 6 and AllianceAI = 1 do
35785: LD_EXP 96
35789: PUSH
35790: LD_INT 168070
35792: GREATEREQUAL
35793: PUSH
35794: LD_EXP 100
35798: PUSH
35799: LD_INT 6
35801: GREATEREQUAL
35802: AND
35803: PUSH
35804: LD_EXP 84
35808: PUSH
35809: LD_INT 1
35811: EQUAL
35812: AND
35813: IFFALSE 35843
35815: GO 35817
35817: DISABLE
// begin Say ( Platonov , D18-Pla-1 ) ;
35818: LD_EXP 26
35822: PPUSH
35823: LD_STRING D18-Pla-1
35825: PPUSH
35826: CALL_OW 88
// ComAttackPlace ( rurocket , 244 , 187 ) ;
35830: LD_INT 273
35832: PPUSH
35833: LD_INT 244
35835: PPUSH
35836: LD_INT 187
35838: PPUSH
35839: CALL_OW 116
// end ;
35843: END
// every 0 0$3 trigger missionStage >= 5 do var i ;
35844: LD_EXP 100
35848: PUSH
35849: LD_INT 5
35851: GREATEREQUAL
35852: IFFALSE 36045
35854: GO 35856
35856: DISABLE
35857: LD_INT 0
35859: PPUSH
// begin enable ;
35860: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_behemoth ] , [ f_constructed ] ] ) do
35861: LD_ADDR_VAR 0 1
35865: PUSH
35866: LD_INT 22
35868: PUSH
35869: LD_INT 6
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 30
35878: PUSH
35879: LD_INT 37
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 57
35888: PUSH
35889: EMPTY
35890: LIST
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: PPUSH
35897: CALL_OW 69
35901: PUSH
35902: FOR_IN
35903: IFFALSE 35957
// begin if See ( 1 , i ) then
35905: LD_INT 1
35907: PPUSH
35908: LD_VAR 0 1
35912: PPUSH
35913: CALL_OW 292
35917: IFFALSE 35955
// begin disable ;
35919: DISABLE
// DialogueOn ;
35920: CALL_OW 6
// Say ( JMM , D17a-JMM-1 ) ;
35924: LD_EXP 1
35928: PPUSH
35929: LD_STRING D17a-JMM-1
35931: PPUSH
35932: CALL_OW 88
// DialogueOff ;
35936: CALL_OW 7
// behemothStatus = 1 ;
35940: LD_ADDR_EXP 59
35944: PUSH
35945: LD_INT 1
35947: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
35948: LD_STRING M4a
35950: PPUSH
35951: CALL_OW 337
// end ; end ;
35955: GO 35902
35957: POP
35958: POP
// for i in ruBehs do
35959: LD_ADDR_VAR 0 1
35963: PUSH
35964: LD_EXP 58
35968: PUSH
35969: FOR_IN
35970: IFFALSE 36043
// begin if See ( 1 , i ) then
35972: LD_INT 1
35974: PPUSH
35975: LD_VAR 0 1
35979: PPUSH
35980: CALL_OW 292
35984: IFFALSE 36041
// begin disable ;
35986: DISABLE
// DialogueOn ;
35987: CALL_OW 6
// Say ( JMM , D17b-JMM-1 ) ;
35991: LD_EXP 1
35995: PPUSH
35996: LD_STRING D17b-JMM-1
35998: PPUSH
35999: CALL_OW 88
// DialogueOff ;
36003: CALL_OW 7
// behemothStatus = 0 ;
36007: LD_ADDR_EXP 59
36011: PUSH
36012: LD_INT 0
36014: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
36015: LD_STRING M4b
36017: PPUSH
36018: CALL_OW 337
// wait ( 0 0$2 ) ;
36022: LD_INT 70
36024: PPUSH
36025: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36029: LD_EXP 26
36033: PPUSH
36034: LD_STRING D18-Pla-1
36036: PPUSH
36037: CALL_OW 88
// end ; end ;
36041: GO 35969
36043: POP
36044: POP
// end ;
36045: PPOPN 1
36047: END
// every 1 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 ] [ Difficulty ] do var i , tmp , arabianArmy ;
36048: LD_EXP 26
36052: PPUSH
36053: CALL_OW 301
36057: PUSH
36058: LD_EXP 27
36062: PPUSH
36063: CALL_OW 301
36067: AND
36068: PUSH
36069: LD_INT 22
36071: PUSH
36072: LD_INT 3
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 21
36081: PUSH
36082: LD_INT 1
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 50
36091: PUSH
36092: EMPTY
36093: LIST
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: LIST
36099: PPUSH
36100: CALL_OW 69
36104: PUSH
36105: LD_INT 7
36107: PUSH
36108: LD_INT 8
36110: PUSH
36111: LD_INT 9
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: LIST
36118: PUSH
36119: LD_OWVAR 67
36123: ARRAY
36124: LESS
36125: AND
36126: IFFALSE 36802
36128: GO 36130
36130: DISABLE
36131: LD_INT 0
36133: PPUSH
36134: PPUSH
36135: PPUSH
// begin russianAI = 0 ;
36136: LD_ADDR_EXP 85
36140: PUSH
36141: LD_INT 0
36143: ST_TO_ADDR
// russianEscape = 1 ;
36144: LD_ADDR_EXP 89
36148: PUSH
36149: LD_INT 1
36151: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , true ) ;
36152: LD_INT 1
36154: PPUSH
36155: LD_INT 3
36157: PPUSH
36158: LD_INT 1
36160: PPUSH
36161: LD_INT 1
36163: PPUSH
36164: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 900 ] ] ) do
36168: LD_ADDR_VAR 0 1
36172: PUSH
36173: LD_INT 22
36175: PUSH
36176: LD_INT 3
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 21
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 24
36195: PUSH
36196: LD_INT 900
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: LIST
36207: PPUSH
36208: CALL_OW 69
36212: PUSH
36213: FOR_IN
36214: IFFALSE 36245
// if GetSex ( i ) = sex_male then
36216: LD_VAR 0 1
36220: PPUSH
36221: CALL_OW 258
36225: PUSH
36226: LD_INT 1
36228: EQUAL
36229: IFFALSE 36243
// begin tmp = i ;
36231: LD_ADDR_VAR 0 2
36235: PUSH
36236: LD_VAR 0 1
36240: ST_TO_ADDR
// break ;
36241: GO 36245
// end ;
36243: GO 36213
36245: POP
36246: POP
// if tmp = 0 then
36247: LD_VAR 0 2
36251: PUSH
36252: LD_INT 0
36254: EQUAL
36255: IFFALSE 36309
// begin uc_side = 3 ;
36257: LD_ADDR_OWVAR 20
36261: PUSH
36262: LD_INT 3
36264: ST_TO_ADDR
// uc_nation = 3 ;
36265: LD_ADDR_OWVAR 21
36269: PUSH
36270: LD_INT 3
36272: ST_TO_ADDR
// hc_name =  ;
36273: LD_ADDR_OWVAR 26
36277: PUSH
36278: LD_STRING 
36280: ST_TO_ADDR
// hc_gallery =  ;
36281: LD_ADDR_OWVAR 33
36285: PUSH
36286: LD_STRING 
36288: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
36289: LD_INT 1
36291: PPUSH
36292: LD_INT 10
36294: PPUSH
36295: CALL_OW 381
// tmp = CreateHuman ;
36299: LD_ADDR_VAR 0 2
36303: PUSH
36304: CALL_OW 44
36308: ST_TO_ADDR
// end ; DialogueOn ;
36309: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
36313: LD_VAR 0 2
36317: PPUSH
36318: LD_STRING DSurrenderRussians-RSol1-1a
36320: PPUSH
36321: CALL_OW 88
// DialogueOff ;
36325: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
36329: LD_INT 22
36331: PUSH
36332: LD_INT 3
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 21
36341: PUSH
36342: LD_INT 1
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PPUSH
36353: CALL_OW 69
36357: PPUSH
36358: CALL_OW 122
// wait ( 0 0$1 ) ;
36362: LD_INT 35
36364: PPUSH
36365: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , RussianEscapeArea ) ;
36369: LD_INT 22
36371: PUSH
36372: LD_INT 3
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 21
36381: PUSH
36382: LD_INT 1
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PPUSH
36393: CALL_OW 69
36397: PPUSH
36398: LD_INT 25
36400: PPUSH
36401: CALL_OW 113
// wait ( 0 0$10 ) ;
36405: LD_INT 350
36407: PPUSH
36408: CALL_OW 67
// PrepareOmarArmy ;
36412: CALL 37422 0 0
// missionStage = 7 ;
36416: LD_ADDR_EXP 100
36420: PUSH
36421: LD_INT 7
36423: ST_TO_ADDR
// PlaceSeeing ( 157 , 8 , 1 , - 8 ) ;
36424: LD_INT 157
36426: PPUSH
36427: LD_INT 8
36429: PPUSH
36430: LD_INT 1
36432: PPUSH
36433: LD_INT 8
36435: NEG
36436: PPUSH
36437: CALL_OW 330
// CenterOnXY ( 157 , 8 ) ;
36441: LD_INT 157
36443: PPUSH
36444: LD_INT 8
36446: PPUSH
36447: CALL_OW 84
// DialogueOn ;
36451: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
36455: LD_EXP 32
36459: PPUSH
36460: CALL_OW 87
// Say ( JMM , D19-JMM-1 ) ;
36464: LD_EXP 1
36468: PPUSH
36469: LD_STRING D19-JMM-1
36471: PPUSH
36472: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D19-Sol1-1 , D5-FSol1-1 ) ;
36476: LD_INT 22
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 26
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 2
36498: PUSH
36499: LD_INT 25
36501: PUSH
36502: LD_INT 1
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 25
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 25
36521: PUSH
36522: LD_INT 3
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 25
36531: PUSH
36532: LD_INT 4
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 25
36541: PUSH
36542: LD_INT 5
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 25
36551: PUSH
36552: LD_INT 8
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: LIST
36572: PPUSH
36573: CALL_OW 69
36577: PPUSH
36578: LD_STRING D19-Sol1-1
36580: PPUSH
36581: LD_STRING D5-FSol1-1
36583: PPUSH
36584: CALL 6913 0 3
// Say ( JMM , D19-JMM-2 ) ;
36588: LD_EXP 1
36592: PPUSH
36593: LD_STRING D19-JMM-2
36595: PPUSH
36596: CALL_OW 88
// DialogueOff ;
36600: CALL_OW 7
// LaunchMines ;
36604: CALL 36911 0 0
// wait ( 0 0$3 ) ;
36608: LD_INT 105
36610: PPUSH
36611: CALL_OW 67
// arabianArmy = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
36615: LD_ADDR_VAR 0 3
36619: PUSH
36620: LD_INT 22
36622: PUSH
36623: LD_INT 2
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 21
36632: PUSH
36633: LD_INT 1
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PPUSH
36644: CALL_OW 69
36648: PUSH
36649: LD_INT 22
36651: PUSH
36652: LD_INT 2
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 21
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 25
36671: PUSH
36672: LD_INT 4
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: PPUSH
36684: CALL_OW 69
36688: DIFF
36689: ST_TO_ADDR
// arabianArmy = arabianArmy ^ FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
36690: LD_ADDR_VAR 0 3
36694: PUSH
36695: LD_VAR 0 3
36699: PUSH
36700: LD_INT 22
36702: PUSH
36703: LD_INT 2
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 21
36712: PUSH
36713: LD_INT 2
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PPUSH
36724: CALL_OW 69
36728: ADD
36729: ST_TO_ADDR
// ComAgressiveMove ( arabianArmy , 178 , 66 ) ;
36730: LD_VAR 0 3
36734: PPUSH
36735: LD_INT 178
36737: PPUSH
36738: LD_INT 66
36740: PPUSH
36741: CALL_OW 114
// wait ( 0 0$10 ) ;
36745: LD_INT 350
36747: PPUSH
36748: CALL_OW 67
// ComContaminate ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) , 177 , 69 ) ;
36752: LD_INT 22
36754: PUSH
36755: LD_INT 2
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 21
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 25
36774: PUSH
36775: LD_INT 4
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: LIST
36786: PPUSH
36787: CALL_OW 69
36791: PPUSH
36792: LD_INT 177
36794: PPUSH
36795: LD_INT 69
36797: PPUSH
36798: CALL_OW 158
// end ;
36802: PPOPN 3
36804: END
// every 0 0$1 trigger russianEscape = 1 and FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i ;
36805: LD_EXP 89
36809: PUSH
36810: LD_INT 1
36812: EQUAL
36813: PUSH
36814: LD_INT 25
36816: PPUSH
36817: LD_INT 22
36819: PUSH
36820: LD_INT 3
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 21
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PPUSH
36841: CALL_OW 70
36845: AND
36846: IFFALSE 36908
36848: GO 36850
36850: DISABLE
36851: LD_INT 0
36853: PPUSH
// begin enable ;
36854: ENABLE
// for i in FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
36855: LD_ADDR_VAR 0 1
36859: PUSH
36860: LD_INT 25
36862: PPUSH
36863: LD_INT 22
36865: PUSH
36866: LD_INT 3
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 21
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PPUSH
36887: CALL_OW 70
36891: PUSH
36892: FOR_IN
36893: IFFALSE 36906
// RemoveUnit ( i ) ;
36895: LD_VAR 0 1
36899: PPUSH
36900: CALL_OW 64
36904: GO 36892
36906: POP
36907: POP
// end ;
36908: PPOPN 1
36910: END
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
36911: LD_INT 0
36913: PPUSH
36914: PPUSH
36915: PPUSH
36916: PPUSH
36917: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
36918: LD_ADDR_VAR 0 2
36922: PUSH
36923: LD_INT 168
36925: PUSH
36926: LD_INT 18
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 169
36935: PUSH
36936: LD_INT 20
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 167
36945: PUSH
36946: LD_INT 20
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 164
36955: PUSH
36956: LD_INT 18
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 164
36965: PUSH
36966: LD_INT 19
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 163
36975: PUSH
36976: LD_INT 19
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 164
36985: PUSH
36986: LD_INT 21
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 165
36995: PUSH
36996: LD_INT 21
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 163
37005: PUSH
37006: LD_INT 20
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 164
37015: PUSH
37016: LD_INT 22
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 162
37025: PUSH
37026: LD_INT 20
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
37046: LD_ADDR_VAR 0 3
37050: PUSH
37051: LD_INT 169
37053: PUSH
37054: LD_INT 34
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 169
37063: PUSH
37064: LD_INT 35
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 167
37073: PUSH
37074: LD_INT 32
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 170
37083: PUSH
37084: LD_INT 31
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 173
37093: PUSH
37094: LD_INT 35
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 174
37103: PUSH
37104: LD_INT 39
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: ST_TO_ADDR
// for i = 1 to mines_pos do
37119: LD_ADDR_VAR 0 4
37123: PUSH
37124: DOUBLE
37125: LD_INT 1
37127: DEC
37128: ST_TO_ADDR
37129: LD_VAR 0 2
37133: PUSH
37134: FOR_TO
37135: IFFALSE 37347
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
37137: LD_VAR 0 2
37141: PUSH
37142: LD_VAR 0 4
37146: ARRAY
37147: PUSH
37148: LD_INT 1
37150: ARRAY
37151: PPUSH
37152: LD_VAR 0 2
37156: PUSH
37157: LD_VAR 0 4
37161: ARRAY
37162: PUSH
37163: LD_INT 2
37165: ARRAY
37166: PPUSH
37167: LD_INT 1
37169: PPUSH
37170: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
37174: LD_INT 1
37176: PPUSH
37177: LD_INT 3
37179: PPUSH
37180: CALL_OW 12
37184: PPUSH
37185: CALL_OW 67
// if i < mines_pos then
37189: LD_VAR 0 4
37193: PUSH
37194: LD_VAR 0 2
37198: LESS
37199: IFFALSE 37237
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
37201: LD_VAR 0 2
37205: PUSH
37206: LD_VAR 0 4
37210: ARRAY
37211: PUSH
37212: LD_INT 1
37214: ARRAY
37215: PPUSH
37216: LD_VAR 0 2
37220: PUSH
37221: LD_VAR 0 4
37225: ARRAY
37226: PUSH
37227: LD_INT 2
37229: ARRAY
37230: PPUSH
37231: CALL_OW 348
37235: GO 37345
// begin for j = 1 to mines_pos1 do
37237: LD_ADDR_VAR 0 5
37241: PUSH
37242: DOUBLE
37243: LD_INT 1
37245: DEC
37246: ST_TO_ADDR
37247: LD_VAR 0 3
37251: PUSH
37252: FOR_TO
37253: IFFALSE 37309
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
37255: LD_VAR 0 3
37259: PUSH
37260: LD_VAR 0 5
37264: ARRAY
37265: PUSH
37266: LD_INT 1
37268: ARRAY
37269: PPUSH
37270: LD_VAR 0 3
37274: PUSH
37275: LD_VAR 0 5
37279: ARRAY
37280: PUSH
37281: LD_INT 2
37283: ARRAY
37284: PPUSH
37285: LD_INT 1
37287: PPUSH
37288: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
37292: LD_INT 1
37294: PPUSH
37295: LD_INT 3
37297: PPUSH
37298: CALL_OW 12
37302: PPUSH
37303: CALL_OW 67
// end ;
37307: GO 37252
37309: POP
37310: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
37311: LD_VAR 0 2
37315: PUSH
37316: LD_VAR 0 4
37320: ARRAY
37321: PUSH
37322: LD_INT 1
37324: ARRAY
37325: PPUSH
37326: LD_VAR 0 2
37330: PUSH
37331: LD_VAR 0 4
37335: ARRAY
37336: PUSH
37337: LD_INT 2
37339: ARRAY
37340: PPUSH
37341: CALL_OW 347
// end ; end ;
37345: GO 37134
37347: POP
37348: POP
// end ;
37349: LD_VAR 0 1
37353: RET
// every 0 0$1 trigger missionStage = 7 and IsDead ( Omar ) and IsOk ( Heike ) do
37354: LD_EXP 100
37358: PUSH
37359: LD_INT 7
37361: EQUAL
37362: PUSH
37363: LD_EXP 31
37367: PPUSH
37368: CALL_OW 301
37372: AND
37373: PUSH
37374: LD_EXP 32
37378: PPUSH
37379: CALL_OW 302
37383: AND
37384: IFFALSE 37421
37386: GO 37388
37388: DISABLE
// begin DialogueOn ;
37389: CALL_OW 6
// Say ( JMM , D19a-JMM-1 ) ;
37393: LD_EXP 1
37397: PPUSH
37398: LD_STRING D19a-JMM-1
37400: PPUSH
37401: CALL_OW 88
// Say ( Heike , D19a-Hke-1 ) ;
37405: LD_EXP 32
37409: PPUSH
37410: LD_STRING D19a-Hke-1
37412: PPUSH
37413: CALL_OW 88
// DialogueOff ;
37417: CALL_OW 7
// end ; end_of_file
37421: END
// export function PrepareOmarArmy ; var i , un , veh , omarMastodont ; begin
37422: LD_INT 0
37424: PPUSH
37425: PPUSH
37426: PPUSH
37427: PPUSH
37428: PPUSH
// uc_side = 2 ;
37429: LD_ADDR_OWVAR 20
37433: PUSH
37434: LD_INT 2
37436: ST_TO_ADDR
// uc_nation = 2 ;
37437: LD_ADDR_OWVAR 21
37441: PUSH
37442: LD_INT 2
37444: ST_TO_ADDR
// Omar = PrepareUnit ( Omar , false ) ;
37445: LD_ADDR_EXP 31
37449: PUSH
37450: LD_STRING Omar
37452: PPUSH
37453: LD_INT 0
37455: PPUSH
37456: CALL 6633 0 2
37460: ST_TO_ADDR
// Heike = PrepareUnit ( Heike , false ) ;
37461: LD_ADDR_EXP 32
37465: PUSH
37466: LD_STRING Heike
37468: PPUSH
37469: LD_INT 0
37471: PPUSH
37472: CALL 6633 0 2
37476: ST_TO_ADDR
// PlaceUnitArea ( Heike , ArabianSpawn , false ) ;
37477: LD_EXP 32
37481: PPUSH
37482: LD_INT 26
37484: PPUSH
37485: LD_INT 0
37487: PPUSH
37488: CALL_OW 49
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
37492: LD_ADDR_VAR 0 2
37496: PUSH
37497: DOUBLE
37498: LD_INT 1
37500: DEC
37501: ST_TO_ADDR
37502: LD_INT 5
37504: PUSH
37505: LD_INT 6
37507: PUSH
37508: LD_INT 7
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: PUSH
37516: LD_OWVAR 67
37520: ARRAY
37521: PUSH
37522: FOR_TO
37523: IFFALSE 37578
// begin hc_name =  ;
37525: LD_ADDR_OWVAR 26
37529: PUSH
37530: LD_STRING 
37532: ST_TO_ADDR
// hc_gallery =  ;
37533: LD_ADDR_OWVAR 33
37537: PUSH
37538: LD_STRING 
37540: ST_TO_ADDR
// PrepareSoldier ( false , 8 ) ;
37541: LD_INT 0
37543: PPUSH
37544: LD_INT 8
37546: PPUSH
37547: CALL_OW 381
// un = CreateHuman ;
37551: LD_ADDR_VAR 0 3
37555: PUSH
37556: CALL_OW 44
37560: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
37561: LD_VAR 0 3
37565: PPUSH
37566: LD_INT 26
37568: PPUSH
37569: LD_INT 0
37571: PPUSH
37572: CALL_OW 49
// end ;
37576: GO 37522
37578: POP
37579: POP
// for i := 1 to 4 do
37580: LD_ADDR_VAR 0 2
37584: PUSH
37585: DOUBLE
37586: LD_INT 1
37588: DEC
37589: ST_TO_ADDR
37590: LD_INT 4
37592: PUSH
37593: FOR_TO
37594: IFFALSE 37649
// begin hc_name =  ;
37596: LD_ADDR_OWVAR 26
37600: PUSH
37601: LD_STRING 
37603: ST_TO_ADDR
// hc_gallery =  ;
37604: LD_ADDR_OWVAR 33
37608: PUSH
37609: LD_STRING 
37611: ST_TO_ADDR
// PrepareScientist ( false , 8 ) ;
37612: LD_INT 0
37614: PPUSH
37615: LD_INT 8
37617: PPUSH
37618: CALL_OW 384
// un = CreateHuman ;
37622: LD_ADDR_VAR 0 3
37626: PUSH
37627: CALL_OW 44
37631: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
37632: LD_VAR 0 3
37636: PPUSH
37637: LD_INT 26
37639: PPUSH
37640: LD_INT 0
37642: PPUSH
37643: CALL_OW 49
// end ;
37647: GO 37593
37649: POP
37650: POP
// for i := 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
37651: LD_ADDR_VAR 0 2
37655: PUSH
37656: DOUBLE
37657: LD_INT 1
37659: DEC
37660: ST_TO_ADDR
37661: LD_INT 8
37663: PUSH
37664: LD_INT 9
37666: PUSH
37667: LD_INT 10
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: LIST
37674: PUSH
37675: LD_OWVAR 67
37679: ARRAY
37680: PUSH
37681: FOR_TO
37682: IFFALSE 37770
// begin vc_engine = 3 ;
37684: LD_ADDR_OWVAR 39
37688: PUSH
37689: LD_INT 3
37691: ST_TO_ADDR
// vc_control = 5 ;
37692: LD_ADDR_OWVAR 38
37696: PUSH
37697: LD_INT 5
37699: ST_TO_ADDR
// vc_chassis = 14 ;
37700: LD_ADDR_OWVAR 37
37704: PUSH
37705: LD_INT 14
37707: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 , 25 ] [ Rand ( 1 , 3 ) ] ;
37708: LD_ADDR_OWVAR 40
37712: PUSH
37713: LD_INT 27
37715: PUSH
37716: LD_INT 26
37718: PUSH
37719: LD_INT 28
37721: PUSH
37722: LD_INT 25
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 1
37733: PPUSH
37734: LD_INT 3
37736: PPUSH
37737: CALL_OW 12
37741: ARRAY
37742: ST_TO_ADDR
// veh = CreateVehicle ;
37743: LD_ADDR_VAR 0 4
37747: PUSH
37748: CALL_OW 45
37752: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawn , false ) ;
37753: LD_VAR 0 4
37757: PPUSH
37758: LD_INT 26
37760: PPUSH
37761: LD_INT 0
37763: PPUSH
37764: CALL_OW 49
// end ;
37768: GO 37681
37770: POP
37771: POP
// vc_chassis := 31 ;
37772: LD_ADDR_OWVAR 37
37776: PUSH
37777: LD_INT 31
37779: ST_TO_ADDR
// vc_control := control_rider ;
37780: LD_ADDR_OWVAR 38
37784: PUSH
37785: LD_INT 4
37787: ST_TO_ADDR
// omarMastodont := CreateVehicle ;
37788: LD_ADDR_VAR 0 5
37792: PUSH
37793: CALL_OW 45
37797: ST_TO_ADDR
// PlaceUnitArea ( omarMastodont , ArabianSpawn , false ) ;
37798: LD_VAR 0 5
37802: PPUSH
37803: LD_INT 26
37805: PPUSH
37806: LD_INT 0
37808: PPUSH
37809: CALL_OW 49
// PlaceHumanInUnit ( Omar , omarMastodont ) ;
37813: LD_EXP 31
37817: PPUSH
37818: LD_VAR 0 5
37822: PPUSH
37823: CALL_OW 52
// end ; end_of_file
37827: LD_VAR 0 1
37831: RET
// every 1 1$30 trigger missionStage > 0 do
37832: LD_EXP 100
37836: PUSH
37837: LD_INT 0
37839: GREATER
37840: IFFALSE 37867
37842: GO 37844
37844: DISABLE
// begin enable ;
37845: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
37846: LD_INT 3
37848: PPUSH
37849: LD_INT 5
37851: PPUSH
37852: CALL_OW 12
37856: PPUSH
37857: LD_INT 27
37859: PPUSH
37860: LD_INT 1
37862: PPUSH
37863: CALL_OW 55
// end ; end_of_file
37867: END
// every 0 0$1 trigger missionStage = 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
37868: LD_EXP 100
37872: PUSH
37873: LD_INT 7
37875: EQUAL
37876: PUSH
37877: LD_INT 22
37879: PUSH
37880: LD_INT 2
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 21
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PPUSH
37901: CALL_OW 69
37905: PUSH
37906: LD_INT 0
37908: EQUAL
37909: AND
37910: PUSH
37911: LD_INT 22
37913: PUSH
37914: LD_INT 2
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 21
37923: PUSH
37924: LD_INT 2
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 50
37933: PUSH
37934: EMPTY
37935: LIST
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: LIST
37941: PPUSH
37942: CALL_OW 69
37946: PUSH
37947: LD_INT 0
37949: EQUAL
37950: AND
37951: IFFALSE 38440
37953: GO 37955
37955: DISABLE
// begin DialogueOn ;
37956: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
37960: LD_EXP 1
37964: PPUSH
37965: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
37969: LD_EXP 1
37973: PPUSH
37974: LD_STRING D20-JMM-1
37976: PPUSH
37977: CALL_OW 88
// if IsOK ( Joan ) then
37981: LD_EXP 2
37985: PPUSH
37986: CALL_OW 302
37990: IFFALSE 38004
// Say ( Joan , D20-Joan-1 ) ;
37992: LD_EXP 2
37996: PPUSH
37997: LD_STRING D20-Joan-1
37999: PPUSH
38000: CALL_OW 88
// if IsOk ( Lisa ) then
38004: LD_EXP 4
38008: PPUSH
38009: CALL_OW 302
38013: IFFALSE 38027
// Say ( Lisa , D20-Lisa-1 ) ;
38015: LD_EXP 4
38019: PPUSH
38020: LD_STRING D20-Lisa-1
38022: PPUSH
38023: CALL_OW 88
// if IsOk ( Donaldson ) then
38027: LD_EXP 5
38031: PPUSH
38032: CALL_OW 302
38036: IFFALSE 38050
// Say ( Donaldson , D20-Don-1 ) ;
38038: LD_EXP 5
38042: PPUSH
38043: LD_STRING D20-Don-1
38045: PPUSH
38046: CALL_OW 88
// if IsOK ( Cornel ) then
38050: LD_EXP 12
38054: PPUSH
38055: CALL_OW 302
38059: IFFALSE 38073
// Say ( Cornel , D20-Corn-1 ) ;
38061: LD_EXP 12
38065: PPUSH
38066: LD_STRING D20-Corn-1
38068: PPUSH
38069: CALL_OW 88
// if IsOk ( Denis ) then
38073: LD_EXP 8
38077: PPUSH
38078: CALL_OW 302
38082: IFFALSE 38096
// Say ( Denis , D20-Den-1 ) ;
38084: LD_EXP 8
38088: PPUSH
38089: LD_STRING D20-Den-1
38091: PPUSH
38092: CALL_OW 88
// if IsOk ( Bobby ) then
38096: LD_EXP 6
38100: PPUSH
38101: CALL_OW 302
38105: IFFALSE 38119
// Say ( Bobby , D20-Bobby-1 ) ;
38107: LD_EXP 6
38111: PPUSH
38112: LD_STRING D20-Bobby-1
38114: PPUSH
38115: CALL_OW 88
// if IsOk ( Gladstone ) then
38119: LD_EXP 10
38123: PPUSH
38124: CALL_OW 302
38128: IFFALSE 38142
// Say ( Gladstone , D20-Glad-1 ) ;
38130: LD_EXP 10
38134: PPUSH
38135: LD_STRING D20-Glad-1
38137: PPUSH
38138: CALL_OW 88
// if IsOk ( Cyrus ) then
38142: LD_EXP 7
38146: PPUSH
38147: CALL_OW 302
38151: IFFALSE 38165
// Say ( Cyrus , D20-Cyrus-1 ) ;
38153: LD_EXP 7
38157: PPUSH
38158: LD_STRING D20-Cyrus-1
38160: PPUSH
38161: CALL_OW 88
// if IsOk ( Stevens ) then
38165: LD_EXP 3
38169: PPUSH
38170: CALL_OW 302
38174: IFFALSE 38188
// Say ( Stevens , D20-Huck-1 ) ;
38176: LD_EXP 3
38180: PPUSH
38181: LD_STRING D20-Huck-1
38183: PPUSH
38184: CALL_OW 88
// if IsOk ( Brown ) then
38188: LD_EXP 9
38192: PPUSH
38193: CALL_OW 302
38197: IFFALSE 38211
// Say ( Brown , D20-Brown-1 ) ;
38199: LD_EXP 9
38203: PPUSH
38204: LD_STRING D20-Brown-1
38206: PPUSH
38207: CALL_OW 88
// if IsOk ( Gary ) then
38211: LD_EXP 13
38215: PPUSH
38216: CALL_OW 302
38220: IFFALSE 38234
// Say ( Gary , D20-Gary-1 ) ;
38222: LD_EXP 13
38226: PPUSH
38227: LD_STRING D20-Gary-1
38229: PPUSH
38230: CALL_OW 88
// if IsOk ( Connie ) then
38234: LD_EXP 16
38238: PPUSH
38239: CALL_OW 302
38243: IFFALSE 38257
// Say ( Connie , D20-Con-1 ) ;
38245: LD_EXP 16
38249: PPUSH
38250: LD_STRING D20-Con-1
38252: PPUSH
38253: CALL_OW 88
// if IsOk ( Kurt ) then
38257: LD_EXP 30
38261: PPUSH
38262: CALL_OW 302
38266: IFFALSE 38280
// Say ( Kurt , D20-Kurt-1 ) ;
38268: LD_EXP 30
38272: PPUSH
38273: LD_STRING D20-Kurt-1
38275: PPUSH
38276: CALL_OW 88
// if IsOk ( Kikuchi ) then
38280: LD_EXP 15
38284: PPUSH
38285: CALL_OW 302
38289: IFFALSE 38303
// Say ( Kikuchi , D20-Yam-1 ) ;
38291: LD_EXP 15
38295: PPUSH
38296: LD_STRING D20-Yam-1
38298: PPUSH
38299: CALL_OW 88
// if IsOk ( Frank ) then
38303: LD_EXP 14
38307: PPUSH
38308: CALL_OW 302
38312: IFFALSE 38326
// Say ( Frank , D20-Frank-1 ) ;
38314: LD_EXP 14
38318: PPUSH
38319: LD_STRING D20-Frank-1
38321: PPUSH
38322: CALL_OW 88
// DialogueOff ;
38326: CALL_OW 7
// if AllianceEscape = 1 then
38330: LD_EXP 90
38334: PUSH
38335: LD_INT 1
38337: EQUAL
38338: IFFALSE 38352
// AddMedal ( Roth , 1 ) else
38340: LD_STRING Roth
38342: PPUSH
38343: LD_INT 1
38345: PPUSH
38346: CALL_OW 101
38350: GO 38363
// AddMedal ( Roth , - 1 ) ;
38352: LD_STRING Roth
38354: PPUSH
38355: LD_INT 1
38357: NEG
38358: PPUSH
38359: CALL_OW 101
// if behemothStatus = 1 then
38363: LD_EXP 59
38367: PUSH
38368: LD_INT 1
38370: EQUAL
38371: IFFALSE 38385
// AddMedal ( Project , 1 ) else
38373: LD_STRING Project
38375: PPUSH
38376: LD_INT 1
38378: PPUSH
38379: CALL_OW 101
38383: GO 38396
// AddMedal ( Project , - 1 ) ;
38385: LD_STRING Project
38387: PPUSH
38388: LD_INT 1
38390: NEG
38391: PPUSH
38392: CALL_OW 101
// if unitLost = 0 then
38396: LD_EXP 97
38400: PUSH
38401: LD_INT 0
38403: EQUAL
38404: IFFALSE 38418
// AddMedal ( NoLosses , 1 ) else
38406: LD_STRING NoLosses
38408: PPUSH
38409: LD_INT 1
38411: PPUSH
38412: CALL_OW 101
38416: GO 38429
// AddMedal ( NoLosses , - 1 ) ;
38418: LD_STRING NoLosses
38420: PPUSH
38421: LD_INT 1
38423: NEG
38424: PPUSH
38425: CALL_OW 101
// GiveMedals ( MAIN ) ;
38429: LD_STRING MAIN
38431: PPUSH
38432: CALL_OW 102
// YouWin ;
38436: CALL_OW 103
// end ; end_of_file
38440: END
// every 0 0$1 trigger IsDead ( JMM ) do
38441: LD_EXP 1
38445: PPUSH
38446: CALL_OW 301
38450: IFFALSE 38462
38452: GO 38454
38454: DISABLE
// YouLost ( JMM ) ;
38455: LD_STRING JMM
38457: PPUSH
38458: CALL_OW 104
38462: END
