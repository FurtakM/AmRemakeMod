// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 , others13Omega ; export heroesFromOmega , Baker ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Yakotich , Roth , Burlak , Kurt , Omar , Heike ; export Vsevolod , sewiVeh ; export Kozlov ; export Kovalyuk ; export LegionFriend , LegionFriendStatus ; export legionVehicles ; export arControler ; export ruVehicles ; export ruBehMehs , ruBehs ; export behemothStatus ; export russianVehicles ; export allianceVehicles ; export allianceControler ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export startAttacks ; export powellVeh , centerPowell , powBomb ; export BurlakStatus , StevensStatus ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus , JMMGirlStatus ; export KhatamStatus ; export LegionAI , AllianceAI , RussianAI ; export LegionTarget , AllianceTarget , RussianTarget ; export russianEscape , allianceEscape ; export timerStatus , timeAction ; export missionStage ; export blockEvent1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 57
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 58
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 59
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 61
  58: PUSH
  59: LD_STRING 14_JMMGirlStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 60
  74: PUSH
  75: LD_STRING 14_KappaStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  86: LD_ADDR_EXP 62
  90: PUSH
  91: LD_STRING 10_KhatamStatus_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 102: LD_ADDR_EXP 55
 106: PUSH
 107: LD_STRING 13_BurlakStatus_1
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 118: LD_ADDR_EXP 56
 122: PUSH
 123: LD_STRING 13_StevensStatus_1
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: CALL_OW 30
 133: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
 134: LD_ADDR_EXP 46
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// amUnitsAttack = [ ] ;
 141: LD_ADDR_EXP 47
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 148: LD_ADDR_EXP 48
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// startAttacks = 0 ;
 155: LD_ADDR_EXP 51
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// powellBuildBase = 0 ;
 163: LD_ADDR_EXP 49
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// powellAttacks = 0 ;
 171: LD_ADDR_EXP 50
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// centerPowell = 0 ;
 179: LD_ADDR_EXP 53
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// LegionFriendStatus = 0 ;
 187: LD_ADDR_EXP 36
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// legionVehicles = [ ] ;
 195: LD_ADDR_EXP 37
 199: PUSH
 200: EMPTY
 201: ST_TO_ADDR
// russianVehicles = [ ] ;
 202: LD_ADDR_EXP 43
 206: PUSH
 207: EMPTY
 208: ST_TO_ADDR
// allianceVehicles = [ ] ;
 209: LD_ADDR_EXP 44
 213: PUSH
 214: EMPTY
 215: ST_TO_ADDR
// ruVehicles = [ ] ;
 216: LD_ADDR_EXP 39
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// ruBehMehs = [ ] ;
 223: LD_ADDR_EXP 40
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// ruBehs = [ ] ;
 230: LD_ADDR_EXP 41
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// missionStage = 0 ;
 237: LD_ADDR_EXP 73
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// behemothStatus = 0 ;
 245: LD_ADDR_EXP 42
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// LegionAI = 1 ;
 253: LD_ADDR_EXP 63
 257: PUSH
 258: LD_INT 1
 260: ST_TO_ADDR
// AllianceAI = 1 ;
 261: LD_ADDR_EXP 64
 265: PUSH
 266: LD_INT 1
 268: ST_TO_ADDR
// RussianAI = 1 ;
 269: LD_ADDR_EXP 65
 273: PUSH
 274: LD_INT 1
 276: ST_TO_ADDR
// timerStatus = 0 ;
 277: LD_ADDR_EXP 71
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// timeAction = 0 0$00 ;
 285: LD_ADDR_EXP 72
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// blockEvent1 = 0 ;
 293: LD_ADDR_EXP 74
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// debugMode = 1 ;
 301: LD_ADDR_EXP 75
 305: PUSH
 306: LD_INT 1
 308: ST_TO_ADDR
// PrepareHeroes ;
 309: CALL 665 0 0
// PrepareHeroesFromEpsilon ;
 313: CALL 1187 0 0
// PrepareRandoms ;
 317: CALL 1531 0 0
// PrepareLegion ;
 321: CALL 3453 0 0
// PrepareRussians ;
 325: CALL 3850 0 0
// PrepareAlliance ;
 329: CALL 4969 0 0
// PrepareDifficulty ;
 333: CALL 6354 0 0
// SetBName ( RuDep2 , zhukov ) ;
 337: LD_INT 23
 339: PPUSH
 340: LD_STRING zhukov
 342: PPUSH
 343: CALL_OW 500
// end ;
 347: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 348: LD_EXP 75
 352: PUSH
 353: LD_INT 1
 355: EQUAL
 356: IFFALSE 662
 358: GO 360
 360: DISABLE
 361: LD_INT 0
 363: PPUSH
// begin enable ;
 364: ENABLE
// fogoff ( true ) ;
 365: LD_INT 1
 367: PPUSH
 368: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 372: LD_ADDR_VAR 0 1
 376: PUSH
 377: LD_INT 22
 379: PUSH
 380: LD_INT 1
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 21
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PPUSH
 401: CALL_OW 69
 405: PUSH
 406: FOR_IN
 407: IFFALSE 423
// SetLives ( i , 1000 ) ;
 409: LD_VAR 0 1
 413: PPUSH
 414: LD_INT 1000
 416: PPUSH
 417: CALL_OW 234
 421: GO 406
 423: POP
 424: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 425: LD_ADDR_VAR 0 1
 429: PUSH
 430: LD_INT 22
 432: PUSH
 433: LD_INT 1
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: PUSH
 440: LD_INT 2
 442: PUSH
 443: LD_INT 30
 445: PUSH
 446: LD_INT 0
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 30
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: PPUSH
 472: CALL_OW 69
 476: PUSH
 477: FOR_IN
 478: IFFALSE 502
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 480: LD_VAR 0 1
 484: PPUSH
 485: CALL_OW 274
 489: PPUSH
 490: LD_INT 1
 492: PPUSH
 493: LD_INT 9999
 495: PPUSH
 496: CALL_OW 277
 500: GO 477
 502: POP
 503: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 504: LD_ADDR_VAR 0 1
 508: PUSH
 509: LD_INT 22
 511: PUSH
 512: LD_INT 1
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 2
 521: PUSH
 522: LD_INT 30
 524: PUSH
 525: LD_INT 0
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 30
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: LIST
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: PPUSH
 551: CALL_OW 69
 555: PUSH
 556: FOR_IN
 557: IFFALSE 581
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 274
 568: PPUSH
 569: LD_INT 2
 571: PPUSH
 572: LD_INT 9999
 574: PPUSH
 575: CALL_OW 277
 579: GO 556
 581: POP
 582: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 583: LD_ADDR_VAR 0 1
 587: PUSH
 588: LD_INT 22
 590: PUSH
 591: LD_INT 1
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PUSH
 598: LD_INT 2
 600: PUSH
 601: LD_INT 30
 603: PUSH
 604: LD_INT 0
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PUSH
 611: LD_INT 30
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: EMPTY
 622: LIST
 623: LIST
 624: LIST
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PPUSH
 630: CALL_OW 69
 634: PUSH
 635: FOR_IN
 636: IFFALSE 660
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 638: LD_VAR 0 1
 642: PPUSH
 643: CALL_OW 274
 647: PPUSH
 648: LD_INT 3
 650: PPUSH
 651: LD_INT 9999
 653: PPUSH
 654: CALL_OW 277
 658: GO 635
 660: POP
 661: POP
// end ; end_of_file
 662: PPOPN 1
 664: END
// export function PrepareHeroes ; begin
 665: LD_INT 0
 667: PPUSH
// uc_side = 1 ;
 668: LD_ADDR_OWVAR 20
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// uc_nation = 1 ;
 676: LD_ADDR_OWVAR 21
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// if JMMVeh = [ ] then
 684: LD_EXP 57
 688: PUSH
 689: EMPTY
 690: EQUAL
 691: IFFALSE 737
// begin vc_engine = 3 ;
 693: LD_ADDR_OWVAR 39
 697: PUSH
 698: LD_INT 3
 700: ST_TO_ADDR
// vc_control = 1 ;
 701: LD_ADDR_OWVAR 38
 705: PUSH
 706: LD_INT 1
 708: ST_TO_ADDR
// vc_chassis = 5 ;
 709: LD_ADDR_OWVAR 37
 713: PUSH
 714: LD_INT 5
 716: ST_TO_ADDR
// vc_weapon = 9 ;
 717: LD_ADDR_OWVAR 40
 721: PUSH
 722: LD_INT 9
 724: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 725: LD_ADDR_EXP 22
 729: PUSH
 730: CALL_OW 45
 734: ST_TO_ADDR
// end else
 735: GO 819
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 737: LD_ADDR_OWVAR 37
 741: PUSH
 742: LD_EXP 57
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PUSH
 751: LD_INT 1
 753: ARRAY
 754: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 755: LD_ADDR_OWVAR 39
 759: PUSH
 760: LD_EXP 57
 764: PUSH
 765: LD_INT 2
 767: ARRAY
 768: PUSH
 769: LD_INT 1
 771: ARRAY
 772: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 773: LD_ADDR_OWVAR 38
 777: PUSH
 778: LD_EXP 57
 782: PUSH
 783: LD_INT 3
 785: ARRAY
 786: PUSH
 787: LD_INT 1
 789: ARRAY
 790: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 791: LD_ADDR_OWVAR 40
 795: PUSH
 796: LD_EXP 57
 800: PUSH
 801: LD_INT 4
 803: ARRAY
 804: PUSH
 805: LD_INT 1
 807: ARRAY
 808: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 809: LD_ADDR_EXP 22
 813: PUSH
 814: CALL_OW 45
 818: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 819: LD_EXP 58
 823: PUSH
 824: EMPTY
 825: EQUAL
 826: NOT
 827: IFFALSE 911
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 829: LD_ADDR_OWVAR 37
 833: PUSH
 834: LD_EXP 58
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: PUSH
 843: LD_INT 1
 845: ARRAY
 846: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 847: LD_ADDR_OWVAR 39
 851: PUSH
 852: LD_EXP 58
 856: PUSH
 857: LD_INT 2
 859: ARRAY
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 865: LD_ADDR_OWVAR 38
 869: PUSH
 870: LD_EXP 58
 874: PUSH
 875: LD_INT 3
 877: ARRAY
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 883: LD_ADDR_OWVAR 40
 887: PUSH
 888: LD_EXP 58
 892: PUSH
 893: LD_INT 4
 895: ARRAY
 896: PUSH
 897: LD_INT 1
 899: ARRAY
 900: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 901: LD_ADDR_EXP 23
 905: PUSH
 906: CALL_OW 45
 910: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 911: LD_EXP 22
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 923: LD_EXP 23
 927: PPUSH
 928: LD_INT 0
 930: PPUSH
 931: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 935: LD_EXP 22
 939: PPUSH
 940: LD_INT 99
 942: PPUSH
 943: LD_INT 154
 945: PPUSH
 946: LD_INT 0
 948: PPUSH
 949: CALL_OW 48
// if JMMGirlVeh then
 953: LD_EXP 58
 957: IFFALSE 977
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
 959: LD_EXP 23
 963: PPUSH
 964: LD_INT 98
 966: PPUSH
 967: LD_INT 159
 969: PPUSH
 970: LD_INT 0
 972: PPUSH
 973: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
 977: LD_ADDR_EXP 1
 981: PUSH
 982: LD_STRING 14_JMM
 984: PPUSH
 985: LD_INT 1
 987: PPUSH
 988: CALL 5442 0 2
 992: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
 993: LD_EXP 1
 997: PPUSH
 998: LD_EXP 22
1002: PPUSH
1003: CALL_OW 52
// if not JMMGirlVeh = [ ] then
1007: LD_EXP 58
1011: PUSH
1012: EMPTY
1013: EQUAL
1014: NOT
1015: IFFALSE 1137
// begin if JMMGirl = 1 then
1017: LD_EXP 59
1021: PUSH
1022: LD_INT 1
1024: EQUAL
1025: IFFALSE 1057
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
1027: LD_ADDR_EXP 2
1031: PUSH
1032: LD_STRING 14_Joan
1034: PPUSH
1035: LD_INT 1
1037: PPUSH
1038: CALL 5442 0 2
1042: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
1043: LD_EXP 2
1047: PPUSH
1048: LD_EXP 23
1052: PPUSH
1053: CALL_OW 52
// end ; if JMMGirl = 2 then
1057: LD_EXP 59
1061: PUSH
1062: LD_INT 2
1064: EQUAL
1065: IFFALSE 1097
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
1067: LD_ADDR_EXP 4
1071: PUSH
1072: LD_STRING 14_Lisa
1074: PPUSH
1075: LD_INT 1
1077: PPUSH
1078: CALL 5442 0 2
1082: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
1083: LD_EXP 4
1087: PPUSH
1088: LD_EXP 23
1092: PPUSH
1093: CALL_OW 52
// end ; if JMMGirl = 3 then
1097: LD_EXP 59
1101: PUSH
1102: LD_INT 3
1104: EQUAL
1105: IFFALSE 1137
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
1107: LD_ADDR_EXP 16
1111: PUSH
1112: LD_STRING 14_Connie
1114: PPUSH
1115: LD_INT 1
1117: PPUSH
1118: CALL 5442 0 2
1122: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1123: LD_EXP 16
1127: PPUSH
1128: LD_EXP 23
1132: PPUSH
1133: CALL_OW 52
// end ; end ; uc_side = 4 ;
1137: LD_ADDR_OWVAR 20
1141: PUSH
1142: LD_INT 4
1144: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1145: LD_ADDR_EXP 17
1149: PUSH
1150: LD_STRING Powell
1152: PPUSH
1153: LD_INT 0
1155: PPUSH
1156: CALL 5442 0 2
1160: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 47 , 63 , 5 , false ) ;
1161: LD_EXP 17
1165: PPUSH
1166: LD_INT 47
1168: PPUSH
1169: LD_INT 63
1171: PPUSH
1172: LD_INT 5
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 50
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareHeroesFromEpsilon ; begin
1187: LD_INT 0
1189: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1190: LD_ADDR_EXP 4
1194: PUSH
1195: LD_STRING Lisa
1197: PPUSH
1198: CALL 5499 0 1
1202: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1203: LD_ADDR_EXP 5
1207: PUSH
1208: LD_STRING Donaldson
1210: PPUSH
1211: CALL 5499 0 1
1215: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1216: LD_ADDR_EXP 6
1220: PUSH
1221: LD_STRING Bobby
1223: PPUSH
1224: CALL 5499 0 1
1228: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1229: LD_ADDR_EXP 7
1233: PUSH
1234: LD_STRING Cyrus
1236: PPUSH
1237: CALL 5499 0 1
1241: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1242: LD_ADDR_EXP 8
1246: PUSH
1247: LD_STRING Denis
1249: PPUSH
1250: CALL 5499 0 1
1254: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1255: LD_ADDR_EXP 9
1259: PUSH
1260: LD_STRING Brown
1262: PPUSH
1263: CALL 5499 0 1
1267: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1268: LD_ADDR_EXP 10
1272: PUSH
1273: LD_STRING Gladstone
1275: PPUSH
1276: CALL 5499 0 1
1280: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1281: LD_ADDR_EXP 11
1285: PUSH
1286: LD_STRING Houten
1288: PPUSH
1289: CALL 5499 0 1
1293: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1294: LD_ADDR_EXP 12
1298: PUSH
1299: LD_STRING Cornel
1301: PPUSH
1302: CALL 5499 0 1
1306: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1307: LD_ADDR_EXP 13
1311: PUSH
1312: LD_STRING Gary
1314: PPUSH
1315: CALL 5499 0 1
1319: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1320: LD_ADDR_EXP 14
1324: PUSH
1325: LD_STRING Frank
1327: PPUSH
1328: CALL 5499 0 1
1332: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1333: LD_ADDR_EXP 15
1337: PUSH
1338: LD_STRING Kikuchi
1340: PPUSH
1341: CALL 5499 0 1
1345: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1346: LD_EXP 4
1350: PPUSH
1351: LD_INT 6
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1361: LD_EXP 5
1365: PPUSH
1366: LD_INT 6
1368: PPUSH
1369: LD_INT 0
1371: PPUSH
1372: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1376: LD_EXP 6
1380: PPUSH
1381: LD_INT 6
1383: PPUSH
1384: LD_INT 0
1386: PPUSH
1387: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1391: LD_EXP 7
1395: PPUSH
1396: LD_INT 6
1398: PPUSH
1399: LD_INT 0
1401: PPUSH
1402: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1406: LD_EXP 8
1410: PPUSH
1411: LD_INT 6
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1421: LD_EXP 9
1425: PPUSH
1426: LD_INT 6
1428: PPUSH
1429: LD_INT 0
1431: PPUSH
1432: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1436: LD_EXP 10
1440: PPUSH
1441: LD_INT 6
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1451: LD_EXP 11
1455: PPUSH
1456: LD_INT 6
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1466: LD_EXP 12
1470: PPUSH
1471: LD_INT 6
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1481: LD_EXP 13
1485: PPUSH
1486: LD_INT 6
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1496: LD_EXP 14
1500: PPUSH
1501: LD_INT 6
1503: PPUSH
1504: LD_INT 0
1506: PPUSH
1507: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1511: LD_EXP 15
1515: PPUSH
1516: LD_INT 6
1518: PPUSH
1519: LD_INT 0
1521: PPUSH
1522: CALL_OW 49
// end ;
1526: LD_VAR 0 1
1530: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1531: LD_INT 0
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
1537: PPUSH
// uc_side = 4 ;
1538: LD_ADDR_OWVAR 20
1542: PUSH
1543: LD_INT 4
1545: ST_TO_ADDR
// uc_nation = 1 ;
1546: LD_ADDR_OWVAR 21
1550: PUSH
1551: LD_INT 1
1553: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1554: LD_ADDR_EXP 18
1558: PUSH
1559: LD_STRING 13s_others
1561: PPUSH
1562: CALL_OW 31
1566: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1567: LD_ADDR_VAR 0 4
1571: PUSH
1572: LD_INT 22
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 21
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: PPUSH
1596: CALL_OW 69
1600: PUSH
1601: LD_EXP 17
1605: PUSH
1606: EMPTY
1607: LIST
1608: DIFF
1609: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1610: LD_ADDR_VAR 0 5
1614: PUSH
1615: LD_VAR 0 4
1619: PPUSH
1620: CALL 5629 0 1
1624: ST_TO_ADDR
// if others13 >= 8 then
1625: LD_EXP 18
1629: PUSH
1630: LD_INT 8
1632: GREATEREQUAL
1633: IFFALSE 1694
// begin for i = 1 to 8 do
1635: LD_ADDR_VAR 0 2
1639: PUSH
1640: DOUBLE
1641: LD_INT 1
1643: DEC
1644: ST_TO_ADDR
1645: LD_INT 8
1647: PUSH
1648: FOR_TO
1649: IFFALSE 1690
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1651: LD_EXP 18
1655: PUSH
1656: LD_INT 1
1658: ARRAY
1659: PPUSH
1660: LD_INT 6
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1670: LD_ADDR_EXP 18
1674: PUSH
1675: LD_EXP 18
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: CALL_OW 3
1687: ST_TO_ADDR
// end ;
1688: GO 1648
1690: POP
1691: POP
// end else
1692: GO 1753
// begin for i = 1 to others13 do
1694: LD_ADDR_VAR 0 2
1698: PUSH
1699: DOUBLE
1700: LD_INT 1
1702: DEC
1703: ST_TO_ADDR
1704: LD_EXP 18
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1751
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1712: LD_EXP 18
1716: PUSH
1717: LD_INT 1
1719: ARRAY
1720: PPUSH
1721: LD_INT 6
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1731: LD_ADDR_EXP 18
1735: PUSH
1736: LD_EXP 18
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: CALL_OW 3
1748: ST_TO_ADDR
// end ;
1749: GO 1709
1751: POP
1752: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1753: LD_ADDR_VAR 0 4
1757: PUSH
1758: LD_INT 22
1760: PUSH
1761: LD_INT 4
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 21
1770: PUSH
1771: LD_INT 1
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 69
1786: PUSH
1787: LD_EXP 17
1791: PUSH
1792: EMPTY
1793: LIST
1794: DIFF
1795: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1796: LD_ADDR_VAR 0 5
1800: PUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 5629 0 1
1810: ST_TO_ADDR
// if others13 >= 6 then
1811: LD_EXP 18
1815: PUSH
1816: LD_INT 6
1818: GREATEREQUAL
1819: IFFALSE 1880
// begin for i = 1 to 6 do
1821: LD_ADDR_VAR 0 2
1825: PUSH
1826: DOUBLE
1827: LD_INT 1
1829: DEC
1830: ST_TO_ADDR
1831: LD_INT 6
1833: PUSH
1834: FOR_TO
1835: IFFALSE 1876
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1837: LD_EXP 18
1841: PUSH
1842: LD_INT 1
1844: ARRAY
1845: PPUSH
1846: LD_INT 6
1848: PPUSH
1849: LD_INT 0
1851: PPUSH
1852: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1856: LD_ADDR_EXP 18
1860: PUSH
1861: LD_EXP 18
1865: PPUSH
1866: LD_INT 1
1868: PPUSH
1869: CALL_OW 3
1873: ST_TO_ADDR
// end ;
1874: GO 1834
1876: POP
1877: POP
// end else
1878: GO 1939
// begin for i = 1 to others13 do
1880: LD_ADDR_VAR 0 2
1884: PUSH
1885: DOUBLE
1886: LD_INT 1
1888: DEC
1889: ST_TO_ADDR
1890: LD_EXP 18
1894: PUSH
1895: FOR_TO
1896: IFFALSE 1937
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1898: LD_EXP 18
1902: PUSH
1903: LD_INT 1
1905: ARRAY
1906: PPUSH
1907: LD_INT 6
1909: PPUSH
1910: LD_INT 0
1912: PPUSH
1913: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1917: LD_ADDR_EXP 18
1921: PUSH
1922: LD_EXP 18
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: CALL_OW 3
1934: ST_TO_ADDR
// end ;
1935: GO 1895
1937: POP
1938: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1939: LD_ADDR_VAR 0 4
1943: PUSH
1944: LD_INT 22
1946: PUSH
1947: LD_INT 4
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 21
1956: PUSH
1957: LD_INT 1
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PPUSH
1968: CALL_OW 69
1972: PUSH
1973: LD_EXP 17
1977: PUSH
1978: EMPTY
1979: LIST
1980: DIFF
1981: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1982: LD_ADDR_VAR 0 5
1986: PUSH
1987: LD_VAR 0 4
1991: PPUSH
1992: CALL 5629 0 1
1996: ST_TO_ADDR
// if heroLenght < 19 then
1997: LD_VAR 0 5
2001: PUSH
2002: LD_INT 19
2004: LESS
2005: IFFALSE 2103
// for i = 1 to 19 - heroLenght do
2007: LD_ADDR_VAR 0 2
2011: PUSH
2012: DOUBLE
2013: LD_INT 1
2015: DEC
2016: ST_TO_ADDR
2017: LD_INT 19
2019: PUSH
2020: LD_VAR 0 5
2024: MINUS
2025: PUSH
2026: FOR_TO
2027: IFFALSE 2101
// begin hc_gallery =  ;
2029: LD_ADDR_OWVAR 33
2033: PUSH
2034: LD_STRING 
2036: ST_TO_ADDR
// hc_name =  ;
2037: LD_ADDR_OWVAR 26
2041: PUSH
2042: LD_STRING 
2044: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
2045: LD_INT 0
2047: PPUSH
2048: LD_INT 1
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: CALL_OW 12
2058: PPUSH
2059: LD_INT 6
2061: PPUSH
2062: LD_INT 8
2064: PPUSH
2065: CALL_OW 12
2069: PPUSH
2070: CALL_OW 380
// un = CreateHuman ;
2074: LD_ADDR_VAR 0 3
2078: PUSH
2079: CALL_OW 44
2083: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
2084: LD_VAR 0 3
2088: PPUSH
2089: LD_INT 6
2091: PPUSH
2092: LD_INT 0
2094: PPUSH
2095: CALL_OW 49
// end ;
2099: GO 2026
2101: POP
2102: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
2103: LD_ADDR_VAR 0 4
2107: PUSH
2108: LD_INT 22
2110: PUSH
2111: LD_INT 4
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: PUSH
2118: LD_INT 21
2120: PUSH
2121: LD_INT 1
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PPUSH
2132: CALL_OW 69
2136: PUSH
2137: LD_EXP 17
2141: PUSH
2142: LD_EXP 1
2146: PUSH
2147: LD_EXP 2
2151: PUSH
2152: LD_EXP 3
2156: PUSH
2157: LD_EXP 4
2161: PUSH
2162: LD_EXP 5
2166: PUSH
2167: LD_EXP 6
2171: PUSH
2172: LD_EXP 7
2176: PUSH
2177: LD_EXP 8
2181: PUSH
2182: LD_EXP 9
2186: PUSH
2187: LD_EXP 10
2191: PUSH
2192: LD_EXP 11
2196: PUSH
2197: LD_EXP 12
2201: PUSH
2202: LD_EXP 13
2206: PUSH
2207: LD_EXP 14
2211: PUSH
2212: LD_EXP 15
2216: PUSH
2217: LD_EXP 16
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: DIFF
2241: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2242: LD_ADDR_EXP 46
2246: PUSH
2247: LD_VAR 0 4
2251: PPUSH
2252: LD_INT 1
2254: PPUSH
2255: CALL 5987 0 2
2259: ST_TO_ADDR
// for i = 1 to 8 do
2260: LD_ADDR_VAR 0 2
2264: PUSH
2265: DOUBLE
2266: LD_INT 1
2268: DEC
2269: ST_TO_ADDR
2270: LD_INT 8
2272: PUSH
2273: FOR_TO
2274: IFFALSE 2304
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2276: LD_ADDR_EXP 47
2280: PUSH
2281: LD_EXP 47
2285: PUSH
2286: LD_EXP 46
2290: PUSH
2291: LD_VAR 0 2
2295: ARRAY
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: ADD
2301: ST_TO_ADDR
2302: GO 2273
2304: POP
2305: POP
// SetClass ( amUnitsAttack , 1 ) ;
2306: LD_EXP 47
2310: PPUSH
2311: LD_INT 1
2313: PPUSH
2314: CALL_OW 336
// end ;
2318: LD_VAR 0 1
2322: RET
// export function PrepareSupportFromKappa ; var i , veh ; begin
2323: LD_INT 0
2325: PPUSH
2326: PPUSH
2327: PPUSH
// uc_side = 1 ;
2328: LD_ADDR_OWVAR 20
2332: PUSH
2333: LD_INT 1
2335: ST_TO_ADDR
// uc_nation = 1 ;
2336: LD_ADDR_OWVAR 21
2340: PUSH
2341: LD_INT 1
2343: ST_TO_ADDR
// for i := 1 to 5 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 5
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2442
// begin vc_engine = 3 ;
2360: LD_ADDR_OWVAR 39
2364: PUSH
2365: LD_INT 3
2367: ST_TO_ADDR
// vc_control = 3 ;
2368: LD_ADDR_OWVAR 38
2372: PUSH
2373: LD_INT 3
2375: ST_TO_ADDR
// vc_chassis = 3 ;
2376: LD_ADDR_OWVAR 37
2380: PUSH
2381: LD_INT 3
2383: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2384: LD_ADDR_OWVAR 40
2388: PUSH
2389: LD_INT 5
2391: PUSH
2392: LD_INT 9
2394: PUSH
2395: LD_INT 7
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: LIST
2402: PUSH
2403: LD_INT 1
2405: PPUSH
2406: LD_INT 3
2408: PPUSH
2409: CALL_OW 12
2413: ARRAY
2414: ST_TO_ADDR
// veh = CreateVehicle ;
2415: LD_ADDR_VAR 0 3
2419: PUSH
2420: CALL_OW 45
2424: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
2425: LD_VAR 0 3
2429: PPUSH
2430: LD_INT 14
2432: PPUSH
2433: LD_INT 0
2435: PPUSH
2436: CALL_OW 49
// end ;
2440: GO 2357
2442: POP
2443: POP
// vc_engine = 3 ;
2444: LD_ADDR_OWVAR 39
2448: PUSH
2449: LD_INT 3
2451: ST_TO_ADDR
// vc_control = 1 ;
2452: LD_ADDR_OWVAR 38
2456: PUSH
2457: LD_INT 1
2459: ST_TO_ADDR
// vc_chassis = 3 ;
2460: LD_ADDR_OWVAR 37
2464: PUSH
2465: LD_INT 3
2467: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2468: LD_ADDR_OWVAR 40
2472: PUSH
2473: LD_INT 5
2475: PUSH
2476: LD_INT 9
2478: PUSH
2479: LD_INT 7
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: PUSH
2487: LD_INT 1
2489: PPUSH
2490: LD_INT 3
2492: PPUSH
2493: CALL_OW 12
2497: ARRAY
2498: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
2499: LD_ADDR_EXP 23
2503: PUSH
2504: CALL_OW 45
2508: ST_TO_ADDR
// PlaceUnitArea ( NewJMMGirlVeh , KappaSpawn , false ) ;
2509: LD_EXP 23
2513: PPUSH
2514: LD_INT 14
2516: PPUSH
2517: LD_INT 0
2519: PPUSH
2520: CALL_OW 49
// if JMMGirl = 1 then
2524: LD_EXP 59
2528: PUSH
2529: LD_INT 1
2531: EQUAL
2532: IFFALSE 2585
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
2534: LD_ADDR_EXP 2
2538: PUSH
2539: LD_STRING 14_Joan
2541: PPUSH
2542: LD_INT 1
2544: PPUSH
2545: CALL 5442 0 2
2549: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
2550: LD_EXP 2
2554: PPUSH
2555: LD_EXP 23
2559: PPUSH
2560: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2564: LD_EXP 23
2568: PPUSH
2569: CALL_OW 87
// Say ( Joan , D10BW-Joan-1 ) ;
2573: LD_EXP 2
2577: PPUSH
2578: LD_STRING D10BW-Joan-1
2580: PPUSH
2581: CALL_OW 88
// end ; if JMMGirl = 2 then
2585: LD_EXP 59
2589: PUSH
2590: LD_INT 2
2592: EQUAL
2593: IFFALSE 2646
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
2595: LD_ADDR_EXP 4
2599: PUSH
2600: LD_STRING 14_Lisa
2602: PPUSH
2603: LD_INT 1
2605: PPUSH
2606: CALL 5442 0 2
2610: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
2611: LD_EXP 4
2615: PPUSH
2616: LD_EXP 23
2620: PPUSH
2621: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2625: LD_EXP 23
2629: PPUSH
2630: CALL_OW 87
// Say ( Lisa , D10BW-Lisa-1 ) ;
2634: LD_EXP 4
2638: PPUSH
2639: LD_STRING D10BW-Lisa-1
2641: PPUSH
2642: CALL_OW 88
// end ; if JMMGirl = 3 then
2646: LD_EXP 59
2650: PUSH
2651: LD_INT 3
2653: EQUAL
2654: IFFALSE 2707
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
2656: LD_ADDR_EXP 16
2660: PUSH
2661: LD_STRING 14_Connie
2663: PPUSH
2664: LD_INT 1
2666: PPUSH
2667: CALL 5442 0 2
2671: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
2672: LD_EXP 16
2676: PPUSH
2677: LD_EXP 23
2681: PPUSH
2682: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2686: LD_EXP 23
2690: PPUSH
2691: CALL_OW 87
// Say ( Lisa , D10BW-Con-1 ) ;
2695: LD_EXP 4
2699: PPUSH
2700: LD_STRING D10BW-Con-1
2702: PPUSH
2703: CALL_OW 88
// end ; end ;
2707: LD_VAR 0 1
2711: RET
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , avalaibleVehs ; begin
2712: LD_INT 0
2714: PPUSH
2715: PPUSH
2716: PPUSH
2717: PPUSH
2718: PPUSH
2719: PPUSH
// uc_side = 1 ;
2720: LD_ADDR_OWVAR 20
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// uc_nation = 1 ;
2728: LD_ADDR_OWVAR 21
2732: PUSH
2733: LD_INT 1
2735: ST_TO_ADDR
// omegaVeh = [ ] ;
2736: LD_ADDR_VAR 0 3
2740: PUSH
2741: EMPTY
2742: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
2743: LD_STRING 13s_Lisa
2745: PPUSH
2746: CALL_OW 28
2750: PUSH
2751: LD_INT 0
2753: EQUAL
2754: IFFALSE 2769
// Lisa = PrepareUnitOmega ( Lisa ) ;
2756: LD_ADDR_EXP 4
2760: PUSH
2761: LD_STRING Lisa
2763: PPUSH
2764: CALL 5556 0 1
2768: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
2769: LD_STRING 13s_Donaldson
2771: PPUSH
2772: CALL_OW 28
2776: PUSH
2777: LD_INT 0
2779: EQUAL
2780: IFFALSE 2795
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
2782: LD_ADDR_EXP 5
2786: PUSH
2787: LD_STRING Donaldson
2789: PPUSH
2790: CALL 5556 0 1
2794: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
2795: LD_STRING 13s_Bobby
2797: PPUSH
2798: CALL_OW 28
2802: PUSH
2803: LD_INT 0
2805: EQUAL
2806: IFFALSE 2821
// Bobby = PrepareUnitOmega ( Bobby ) ;
2808: LD_ADDR_EXP 6
2812: PUSH
2813: LD_STRING Bobby
2815: PPUSH
2816: CALL 5556 0 1
2820: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
2821: LD_STRING 13s_Cyrus
2823: PPUSH
2824: CALL_OW 28
2828: PUSH
2829: LD_INT 0
2831: EQUAL
2832: IFFALSE 2847
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
2834: LD_ADDR_EXP 7
2838: PUSH
2839: LD_STRING Cyrus
2841: PPUSH
2842: CALL 5556 0 1
2846: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
2847: LD_STRING 13s_Denis
2849: PPUSH
2850: CALL_OW 28
2854: PUSH
2855: LD_INT 0
2857: EQUAL
2858: IFFALSE 2873
// Denis = PrepareUnitOmega ( Denis ) ;
2860: LD_ADDR_EXP 8
2864: PUSH
2865: LD_STRING Denis
2867: PPUSH
2868: CALL 5556 0 1
2872: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
2873: LD_STRING 13s_Brown
2875: PPUSH
2876: CALL_OW 28
2880: PUSH
2881: LD_INT 0
2883: EQUAL
2884: IFFALSE 2899
// Brown = PrepareUnitOmega ( Brown ) ;
2886: LD_ADDR_EXP 9
2890: PUSH
2891: LD_STRING Brown
2893: PPUSH
2894: CALL 5556 0 1
2898: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
2899: LD_STRING 13s_Gladstone
2901: PPUSH
2902: CALL_OW 28
2906: PUSH
2907: LD_INT 0
2909: EQUAL
2910: IFFALSE 2925
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
2912: LD_ADDR_EXP 10
2916: PUSH
2917: LD_STRING Gladstone
2919: PPUSH
2920: CALL 5556 0 1
2924: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
2925: LD_STRING 13s_Houten
2927: PPUSH
2928: CALL_OW 28
2932: PUSH
2933: LD_INT 0
2935: EQUAL
2936: IFFALSE 2951
// Houten = PrepareUnitOmega ( Houten ) ;
2938: LD_ADDR_EXP 11
2942: PUSH
2943: LD_STRING Houten
2945: PPUSH
2946: CALL 5556 0 1
2950: ST_TO_ADDR
// if TestCharacters ( 13s_Cornel ) = false then
2951: LD_STRING 13s_Cornel
2953: PPUSH
2954: CALL_OW 28
2958: PUSH
2959: LD_INT 0
2961: EQUAL
2962: IFFALSE 2977
// Cornel = PrepareUnitOmega ( Cornel ) ;
2964: LD_ADDR_EXP 12
2968: PUSH
2969: LD_STRING Cornel
2971: PPUSH
2972: CALL 5556 0 1
2976: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
2977: LD_STRING 13s_Gary
2979: PPUSH
2980: CALL_OW 28
2984: PUSH
2985: LD_INT 0
2987: EQUAL
2988: IFFALSE 3003
// Gary = PrepareUnitOmega ( Gary ) ;
2990: LD_ADDR_EXP 13
2994: PUSH
2995: LD_STRING Gary
2997: PPUSH
2998: CALL 5556 0 1
3002: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
3003: LD_STRING 13s_Frank
3005: PPUSH
3006: CALL_OW 28
3010: PUSH
3011: LD_INT 0
3013: EQUAL
3014: IFFALSE 3029
// Frank = PrepareUnitOmega ( Frank ) ;
3016: LD_ADDR_EXP 14
3020: PUSH
3021: LD_STRING Frank
3023: PPUSH
3024: CALL 5556 0 1
3028: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3029: LD_STRING 13s_Kikuchi
3031: PPUSH
3032: CALL_OW 28
3036: PUSH
3037: LD_INT 0
3039: EQUAL
3040: IFFALSE 3055
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3042: LD_ADDR_EXP 15
3046: PUSH
3047: LD_STRING Kikuchi
3049: PPUSH
3050: CALL 5556 0 1
3054: ST_TO_ADDR
// if StevensStatus = 1 then
3055: LD_EXP 56
3059: PUSH
3060: LD_INT 1
3062: EQUAL
3063: IFFALSE 3080
// Stevens = PrepareUnitOmega ( Stevens ) else
3065: LD_ADDR_EXP 3
3069: PUSH
3070: LD_STRING Stevens
3072: PPUSH
3073: CALL 5556 0 1
3077: ST_TO_ADDR
3078: GO 3132
// begin hc_name = Baker Smith ;
3080: LD_ADDR_OWVAR 26
3084: PUSH
3085: LD_STRING Baker Smith
3087: ST_TO_ADDR
// hc_gallery =  ;
3088: LD_ADDR_OWVAR 33
3092: PUSH
3093: LD_STRING 
3095: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
3096: LD_INT 1
3098: PPUSH
3099: LD_INT 10
3101: PPUSH
3102: CALL_OW 384
// Baker = CreateHuman ;
3106: LD_ADDR_EXP 21
3110: PUSH
3111: CALL_OW 44
3115: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ Baker ;
3116: LD_ADDR_EXP 20
3120: PUSH
3121: LD_EXP 20
3125: PUSH
3126: LD_EXP 21
3130: ADD
3131: ST_TO_ADDR
// end ; others13Omega = CreateCharacterSet ( 13_other_survivors ) ;
3132: LD_ADDR_EXP 19
3136: PUSH
3137: LD_STRING 13_other_survivors
3139: PPUSH
3140: CALL_OW 31
3144: ST_TO_ADDR
// sum = TabLenght ( others13Omega ) ;
3145: LD_ADDR_VAR 0 4
3149: PUSH
3150: LD_EXP 19
3154: PPUSH
3155: CALL 5629 0 1
3159: ST_TO_ADDR
// sum = sum + TabLenght ( heroesFromOmega ) ;
3160: LD_ADDR_VAR 0 4
3164: PUSH
3165: LD_VAR 0 4
3169: PUSH
3170: LD_EXP 20
3174: PPUSH
3175: CALL 5629 0 1
3179: PLUS
3180: ST_TO_ADDR
// for i := 1 to sum do
3181: LD_ADDR_VAR 0 2
3185: PUSH
3186: DOUBLE
3187: LD_INT 1
3189: DEC
3190: ST_TO_ADDR
3191: LD_VAR 0 4
3195: PUSH
3196: FOR_TO
3197: IFFALSE 3329
// begin vc_engine = 3 ;
3199: LD_ADDR_OWVAR 39
3203: PUSH
3204: LD_INT 3
3206: ST_TO_ADDR
// vc_control = 1 ;
3207: LD_ADDR_OWVAR 38
3211: PUSH
3212: LD_INT 1
3214: ST_TO_ADDR
// vc_chassis = 3 ;
3215: LD_ADDR_OWVAR 37
3219: PUSH
3220: LD_INT 3
3222: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
3223: LD_ADDR_OWVAR 40
3227: PUSH
3228: LD_INT 5
3230: PUSH
3231: LD_INT 9
3233: PUSH
3234: LD_INT 7
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 1
3244: PPUSH
3245: LD_INT 3
3247: PPUSH
3248: CALL_OW 12
3252: ARRAY
3253: ST_TO_ADDR
// veh = CreateVehicle ;
3254: LD_ADDR_VAR 0 5
3258: PUSH
3259: CALL_OW 45
3263: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
3264: LD_VAR 0 5
3268: PPUSH
3269: LD_INT 5
3271: PPUSH
3272: CALL_OW 233
// SetLives ( veh , rand ( 300 , 800 ) ) ;
3276: LD_VAR 0 5
3280: PPUSH
3281: LD_INT 300
3283: PPUSH
3284: LD_INT 800
3286: PPUSH
3287: CALL_OW 12
3291: PPUSH
3292: CALL_OW 234
// omegaVeh = omegaVeh ^ veh ;
3296: LD_ADDR_VAR 0 3
3300: PUSH
3301: LD_VAR 0 3
3305: PUSH
3306: LD_VAR 0 5
3310: ADD
3311: ST_TO_ADDR
// PlaceUnitArea ( veh , OmegaSpawn , false ) ;
3312: LD_VAR 0 5
3316: PPUSH
3317: LD_INT 16
3319: PPUSH
3320: LD_INT 0
3322: PPUSH
3323: CALL_OW 49
// end ;
3327: GO 3196
3329: POP
3330: POP
// for i := 1 to heroesFromOmega do
3331: LD_ADDR_VAR 0 2
3335: PUSH
3336: DOUBLE
3337: LD_INT 1
3339: DEC
3340: ST_TO_ADDR
3341: LD_EXP 20
3345: PUSH
3346: FOR_TO
3347: IFFALSE 3377
// begin PlaceHumanInUnit ( heroesFromOmega [ i ] , omegaVeh [ i ] ) ;
3349: LD_EXP 20
3353: PUSH
3354: LD_VAR 0 2
3358: ARRAY
3359: PPUSH
3360: LD_VAR 0 3
3364: PUSH
3365: LD_VAR 0 2
3369: ARRAY
3370: PPUSH
3371: CALL_OW 52
// end ;
3375: GO 3346
3377: POP
3378: POP
// avalaibleVehs = UnitFilter ( omegaVeh , [ f_empty ] ) ;
3379: LD_ADDR_VAR 0 6
3383: PUSH
3384: LD_VAR 0 3
3388: PPUSH
3389: LD_INT 58
3391: PUSH
3392: EMPTY
3393: LIST
3394: PPUSH
3395: CALL_OW 72
3399: ST_TO_ADDR
// for i := 1 to others13Omega do
3400: LD_ADDR_VAR 0 2
3404: PUSH
3405: DOUBLE
3406: LD_INT 1
3408: DEC
3409: ST_TO_ADDR
3410: LD_EXP 19
3414: PUSH
3415: FOR_TO
3416: IFFALSE 3446
// begin PlaceHumanInUnit ( others13Omega [ i ] , avalaibleVehs [ i ] ) ;
3418: LD_EXP 19
3422: PUSH
3423: LD_VAR 0 2
3427: ARRAY
3428: PPUSH
3429: LD_VAR 0 6
3433: PUSH
3434: LD_VAR 0 2
3438: ARRAY
3439: PPUSH
3440: CALL_OW 52
// end ;
3444: GO 3415
3446: POP
3447: POP
// end ; end_of_file
3448: LD_VAR 0 1
3452: RET
// export function PrepareLegion ; var i ; begin
3453: LD_INT 0
3455: PPUSH
3456: PPUSH
// uc_side = 8 ;
3457: LD_ADDR_OWVAR 20
3461: PUSH
3462: LD_INT 8
3464: ST_TO_ADDR
// uc_nation = 2 ;
3465: LD_ADDR_OWVAR 21
3469: PUSH
3470: LD_INT 2
3472: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3473: LD_ADDR_EXP 28
3477: PUSH
3478: LD_STRING Kurt
3480: PPUSH
3481: LD_INT 0
3483: PPUSH
3484: CALL 5442 0 2
3488: ST_TO_ADDR
// Kozlov = PrepareUnit ( Kozlov , false ) ;
3489: LD_ADDR_EXP 33
3493: PUSH
3494: LD_STRING Kozlov
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL 5442 0 2
3504: ST_TO_ADDR
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
3505: LD_INT 8
3507: PPUSH
3508: LD_INT 2
3510: PPUSH
3511: LD_INT 122
3513: PPUSH
3514: LD_INT 10
3516: PPUSH
3517: LD_INT 2
3519: PPUSH
3520: LD_INT 4
3522: PPUSH
3523: CALL 6548 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
3527: LD_INT 8
3529: PPUSH
3530: LD_INT 2
3532: PPUSH
3533: LD_INT 99
3535: PPUSH
3536: LD_INT 10
3538: PPUSH
3539: LD_INT 2
3541: PPUSH
3542: LD_INT 2
3544: PPUSH
3545: CALL 6548 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
3549: LD_INT 8
3551: PPUSH
3552: LD_INT 2
3554: PPUSH
3555: LD_INT 104
3557: PPUSH
3558: LD_INT 10
3560: PPUSH
3561: LD_INT 1
3563: PPUSH
3564: LD_INT 2
3566: PPUSH
3567: CALL 6548 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
3571: LD_INT 8
3573: PPUSH
3574: LD_INT 2
3576: PPUSH
3577: LD_INT 104
3579: PPUSH
3580: LD_INT 10
3582: PPUSH
3583: LD_INT 8
3585: PPUSH
3586: LD_INT 1
3588: PPUSH
3589: CALL 6548 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
3593: LD_INT 8
3595: PPUSH
3596: LD_INT 2
3598: PPUSH
3599: LD_INT 118
3601: PPUSH
3602: LD_INT 10
3604: PPUSH
3605: LD_INT 1
3607: PPUSH
3608: LD_INT 1
3610: PPUSH
3611: CALL 6548 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
3615: LD_INT 8
3617: PPUSH
3618: LD_INT 2
3620: PPUSH
3621: LD_INT 117
3623: PPUSH
3624: LD_INT 10
3626: PPUSH
3627: LD_INT 3
3629: PPUSH
3630: LD_INT 4
3632: PPUSH
3633: CALL 6548 0 6
// RespawnInside ( 8 , 2 , ArLab1 , 10 , 4 , 2 ) ;
3637: LD_INT 8
3639: PPUSH
3640: LD_INT 2
3642: PPUSH
3643: LD_INT 252
3645: PPUSH
3646: LD_INT 10
3648: PPUSH
3649: LD_INT 4
3651: PPUSH
3652: LD_INT 2
3654: PPUSH
3655: CALL 6548 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
3659: LD_ADDR_VAR 0 2
3663: PUSH
3664: LD_INT 22
3666: PUSH
3667: LD_INT 8
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 21
3676: PUSH
3677: LD_INT 3
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: PUSH
3684: LD_INT 30
3686: PUSH
3687: LD_INT 32
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PUSH
3694: LD_INT 58
3696: PUSH
3697: EMPTY
3698: LIST
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: PPUSH
3706: CALL_OW 69
3710: PUSH
3711: FOR_IN
3712: IFFALSE 3740
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
3714: LD_INT 8
3716: PPUSH
3717: LD_INT 2
3719: PPUSH
3720: LD_VAR 0 2
3724: PPUSH
3725: LD_INT 10
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 1
3733: PPUSH
3734: CALL 6548 0 6
3738: GO 3711
3740: POP
3741: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
3742: LD_INT 8
3744: PPUSH
3745: LD_INT 2
3747: PPUSH
3748: LD_INT 140
3750: PPUSH
3751: LD_INT 10
3753: PPUSH
3754: LD_INT 3
3756: PPUSH
3757: LD_INT 1
3759: PPUSH
3760: CALL 6548 0 6
// arControler = UnitsInside ( ArControl ) ;
3764: LD_ADDR_EXP 38
3768: PUSH
3769: LD_INT 140
3771: PPUSH
3772: CALL_OW 313
3776: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
3777: LD_INT 139
3779: PPUSH
3780: LD_EXP 38
3784: PUSH
3785: LD_INT 1
3787: ARRAY
3788: PPUSH
3789: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
3793: LD_INT 138
3795: PPUSH
3796: LD_EXP 38
3800: PUSH
3801: LD_INT 1
3803: ARRAY
3804: PPUSH
3805: CALL_OW 195
// hc_name = Ali Hadarach ;
3809: LD_ADDR_OWVAR 26
3813: PUSH
3814: LD_STRING Ali Hadarach
3816: ST_TO_ADDR
// hc_gallery =  ;
3817: LD_ADDR_OWVAR 33
3821: PUSH
3822: LD_STRING 
3824: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
3825: LD_INT 1
3827: PPUSH
3828: LD_INT 8
3830: PPUSH
3831: CALL_OW 383
// LegionFriend = CreateHuman ;
3835: LD_ADDR_EXP 35
3839: PUSH
3840: CALL_OW 44
3844: ST_TO_ADDR
// end ; end_of_file
3845: LD_VAR 0 1
3849: RET
// export function PrepareRussians ; var i ; begin
3850: LD_INT 0
3852: PPUSH
3853: PPUSH
// uc_side = 3 ;
3854: LD_ADDR_OWVAR 20
3858: PUSH
3859: LD_INT 3
3861: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
3862: LD_ADDR_EXP 24
3866: PUSH
3867: LD_STRING Platonov
3869: PPUSH
3870: LD_INT 0
3872: PPUSH
3873: CALL 5442 0 2
3877: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
3878: LD_EXP 24
3882: PPUSH
3883: LD_INT 23
3885: PPUSH
3886: CALL_OW 52
// Yakotich = PrepareUnit ( Yakotich , false ) ;
3890: LD_ADDR_EXP 25
3894: PUSH
3895: LD_STRING Yakotich
3897: PPUSH
3898: LD_INT 0
3900: PPUSH
3901: CALL 5442 0 2
3905: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , RuDep1 ) ;
3906: LD_EXP 25
3910: PPUSH
3911: LD_INT 26
3913: PPUSH
3914: CALL_OW 52
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
3918: LD_ADDR_EXP 34
3922: PUSH
3923: LD_STRING Kovalyuk
3925: PPUSH
3926: LD_INT 0
3928: PPUSH
3929: CALL 5442 0 2
3933: ST_TO_ADDR
// SetClass ( Kovalyuk , 3 ) ;
3934: LD_EXP 34
3938: PPUSH
3939: LD_INT 3
3941: PPUSH
3942: CALL_OW 336
// ruBehMehs = ruBehMehs ^ Kovalyuk ;
3946: LD_ADDR_EXP 40
3950: PUSH
3951: LD_EXP 40
3955: PUSH
3956: LD_EXP 34
3960: ADD
3961: ST_TO_ADDR
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
3962: LD_INT 3
3964: PPUSH
3965: LD_INT 3
3967: PPUSH
3968: LD_INT 26
3970: PPUSH
3971: LD_INT 10
3973: PPUSH
3974: LD_INT 2
3976: PPUSH
3977: LD_INT 5
3979: PPUSH
3980: CALL 6548 0 6
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 6 ) ;
3984: LD_INT 3
3986: PPUSH
3987: LD_INT 3
3989: PPUSH
3990: LD_INT 26
3992: PPUSH
3993: LD_INT 10
3995: PPUSH
3996: LD_INT 2
3998: PPUSH
3999: LD_INT 6
4001: PPUSH
4002: CALL 6548 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
4006: LD_INT 3
4008: PPUSH
4009: LD_INT 3
4011: PPUSH
4012: LD_INT 27
4014: PPUSH
4015: LD_INT 10
4017: PPUSH
4018: LD_INT 9
4020: PPUSH
4021: LD_INT 6
4023: PPUSH
4024: CALL 6548 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
4028: LD_INT 3
4030: PPUSH
4031: LD_INT 3
4033: PPUSH
4034: LD_INT 27
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: LD_INT 3
4042: PPUSH
4043: LD_INT 3
4045: PPUSH
4046: CALL 6548 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
4050: LD_INT 3
4052: PPUSH
4053: LD_INT 3
4055: PPUSH
4056: LD_INT 4
4058: PPUSH
4059: LD_INT 10
4061: PPUSH
4062: LD_INT 3
4064: PPUSH
4065: LD_INT 6
4067: PPUSH
4068: CALL 6548 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
4072: LD_INT 3
4074: PPUSH
4075: LD_INT 3
4077: PPUSH
4078: LD_INT 10
4080: PPUSH
4081: LD_INT 10
4083: PPUSH
4084: LD_INT 3
4086: PPUSH
4087: LD_INT 6
4089: PPUSH
4090: CALL 6548 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
4094: LD_INT 3
4096: PPUSH
4097: LD_INT 3
4099: PPUSH
4100: LD_INT 2
4102: PPUSH
4103: LD_INT 10
4105: PPUSH
4106: LD_INT 4
4108: PPUSH
4109: LD_INT 3
4111: PPUSH
4112: CALL 6548 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
4116: LD_INT 3
4118: PPUSH
4119: LD_INT 3
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_INT 10
4127: PPUSH
4128: LD_INT 4
4130: PPUSH
4131: LD_INT 3
4133: PPUSH
4134: CALL 6548 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
4138: LD_ADDR_VAR 0 2
4142: PUSH
4143: LD_INT 22
4145: PUSH
4146: LD_INT 3
4148: PUSH
4149: EMPTY
4150: LIST
4151: LIST
4152: PUSH
4153: LD_INT 21
4155: PUSH
4156: LD_INT 3
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 30
4165: PUSH
4166: LD_INT 32
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 58
4175: PUSH
4176: EMPTY
4177: LIST
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: PPUSH
4185: CALL_OW 69
4189: PUSH
4190: FOR_IN
4191: IFFALSE 4219
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
4193: LD_INT 3
4195: PPUSH
4196: LD_INT 3
4198: PPUSH
4199: LD_VAR 0 2
4203: PPUSH
4204: LD_INT 10
4206: PPUSH
4207: LD_INT 1
4209: PPUSH
4210: LD_INT 1
4212: PPUSH
4213: CALL 6548 0 6
4217: GO 4190
4219: POP
4220: POP
// end ;
4221: LD_VAR 0 1
4225: RET
// export function PrepareAttackFromKappa ; var i , veh , vehList ; begin
4226: LD_INT 0
4228: PPUSH
4229: PPUSH
4230: PPUSH
4231: PPUSH
// uc_side = 6 ;
4232: LD_ADDR_OWVAR 20
4236: PUSH
4237: LD_INT 6
4239: ST_TO_ADDR
// uc_nation = 1 ;
4240: LD_ADDR_OWVAR 21
4244: PUSH
4245: LD_INT 1
4247: ST_TO_ADDR
// vc_engine = 3 ;
4248: LD_ADDR_OWVAR 39
4252: PUSH
4253: LD_INT 3
4255: ST_TO_ADDR
// vc_control = 1 ;
4256: LD_ADDR_OWVAR 38
4260: PUSH
4261: LD_INT 1
4263: ST_TO_ADDR
// vc_chassis = 5 ;
4264: LD_ADDR_OWVAR 37
4268: PUSH
4269: LD_INT 5
4271: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
4272: LD_ADDR_OWVAR 40
4276: PUSH
4277: LD_INT 5
4279: PUSH
4280: LD_INT 9
4282: PUSH
4283: LD_INT 7
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: LIST
4290: PUSH
4291: LD_INT 1
4293: PPUSH
4294: LD_INT 3
4296: PPUSH
4297: CALL_OW 12
4301: ARRAY
4302: ST_TO_ADDR
// sewiVeh = CreateVehicle ;
4303: LD_ADDR_EXP 32
4307: PUSH
4308: CALL_OW 45
4312: ST_TO_ADDR
// PlaceUnitArea ( sewiVeh , KappaSpawn , false ) ;
4313: LD_EXP 32
4317: PPUSH
4318: LD_INT 14
4320: PPUSH
4321: LD_INT 0
4323: PPUSH
4324: CALL_OW 49
// Vsevolod = PrepareUnit ( Vsevolod , false ) ;
4328: LD_ADDR_EXP 31
4332: PUSH
4333: LD_STRING Vsevolod
4335: PPUSH
4336: LD_INT 0
4338: PPUSH
4339: CALL 5442 0 2
4343: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , sewiVeh ) ;
4344: LD_EXP 31
4348: PPUSH
4349: LD_EXP 32
4353: PPUSH
4354: CALL_OW 52
// for i := 1 to 5 do
4358: LD_ADDR_VAR 0 2
4362: PUSH
4363: DOUBLE
4364: LD_INT 1
4366: DEC
4367: ST_TO_ADDR
4368: LD_INT 5
4370: PUSH
4371: FOR_TO
4372: IFFALSE 4456
// begin vc_engine = 3 ;
4374: LD_ADDR_OWVAR 39
4378: PUSH
4379: LD_INT 3
4381: ST_TO_ADDR
// vc_control = 3 ;
4382: LD_ADDR_OWVAR 38
4386: PUSH
4387: LD_INT 3
4389: ST_TO_ADDR
// vc_chassis = 3 ;
4390: LD_ADDR_OWVAR 37
4394: PUSH
4395: LD_INT 3
4397: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
4398: LD_ADDR_OWVAR 40
4402: PUSH
4403: LD_INT 5
4405: PUSH
4406: LD_INT 9
4408: PUSH
4409: LD_INT 7
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 1
4419: PPUSH
4420: LD_INT 3
4422: PPUSH
4423: CALL_OW 12
4427: ARRAY
4428: ST_TO_ADDR
// veh = CreateVehicle ;
4429: LD_ADDR_VAR 0 3
4433: PUSH
4434: CALL_OW 45
4438: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
4439: LD_VAR 0 3
4443: PPUSH
4444: LD_INT 14
4446: PPUSH
4447: LD_INT 0
4449: PPUSH
4450: CALL_OW 49
// end ;
4454: GO 4371
4456: POP
4457: POP
// uc_nation = 3 ;
4458: LD_ADDR_OWVAR 21
4462: PUSH
4463: LD_INT 3
4465: ST_TO_ADDR
// for i := 1 to 7 do
4466: LD_ADDR_VAR 0 2
4470: PUSH
4471: DOUBLE
4472: LD_INT 1
4474: DEC
4475: ST_TO_ADDR
4476: LD_INT 7
4478: PUSH
4479: FOR_TO
4480: IFFALSE 4572
// begin vc_engine = 3 ;
4482: LD_ADDR_OWVAR 39
4486: PUSH
4487: LD_INT 3
4489: ST_TO_ADDR
// vc_control = 3 ;
4490: LD_ADDR_OWVAR 38
4494: PUSH
4495: LD_INT 3
4497: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
4498: LD_ADDR_OWVAR 37
4502: PUSH
4503: LD_INT 24
4505: ST_TO_ADDR
// vc_weapon = [ 44 , 47 , 45 , 46 , 49 ] [ Rand ( 1 , 4 ) ] ;
4506: LD_ADDR_OWVAR 40
4510: PUSH
4511: LD_INT 44
4513: PUSH
4514: LD_INT 47
4516: PUSH
4517: LD_INT 45
4519: PUSH
4520: LD_INT 46
4522: PUSH
4523: LD_INT 49
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: PUSH
4533: LD_INT 1
4535: PPUSH
4536: LD_INT 4
4538: PPUSH
4539: CALL_OW 12
4543: ARRAY
4544: ST_TO_ADDR
// veh = CreateVehicle ;
4545: LD_ADDR_VAR 0 3
4549: PUSH
4550: CALL_OW 45
4554: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
4555: LD_VAR 0 3
4559: PPUSH
4560: LD_INT 14
4562: PPUSH
4563: LD_INT 0
4565: PPUSH
4566: CALL_OW 49
// end ;
4570: GO 4479
4572: POP
4573: POP
// repeat wait ( 0 0$1 ) ;
4574: LD_INT 35
4576: PPUSH
4577: CALL_OW 67
// vehList = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
4581: LD_ADDR_VAR 0 4
4585: PUSH
4586: LD_INT 22
4588: PUSH
4589: LD_INT 6
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: LD_INT 21
4598: PUSH
4599: LD_INT 2
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: LD_INT 50
4608: PUSH
4609: EMPTY
4610: LIST
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL_OW 69
4621: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
4622: LD_EXP 1
4626: PPUSH
4627: CALL_OW 310
4631: NOT
4632: IFFALSE 4665
// ComAgressiveMove ( vehList , GetX ( JMM ) , GetY ( JMM ) ) else
4634: LD_VAR 0 4
4638: PPUSH
4639: LD_EXP 1
4643: PPUSH
4644: CALL_OW 250
4648: PPUSH
4649: LD_EXP 1
4653: PPUSH
4654: CALL_OW 251
4658: PPUSH
4659: CALL_OW 114
4663: GO 4704
// ComAgressiveMove ( vehList , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) ;
4665: LD_VAR 0 4
4669: PPUSH
4670: LD_EXP 1
4674: PPUSH
4675: CALL_OW 310
4679: PPUSH
4680: CALL_OW 250
4684: PPUSH
4685: LD_EXP 1
4689: PPUSH
4690: CALL_OW 310
4694: PPUSH
4695: CALL_OW 251
4699: PPUSH
4700: CALL_OW 114
// until vehList = 0 ;
4704: LD_VAR 0 4
4708: PUSH
4709: LD_INT 0
4711: EQUAL
4712: IFFALSE 4574
// end ;
4714: LD_VAR 0 1
4718: RET
// export function PreapreMehBehs ; var i , un ; begin
4719: LD_INT 0
4721: PPUSH
4722: PPUSH
4723: PPUSH
// uc_side = 6 ;
4724: LD_ADDR_OWVAR 20
4728: PUSH
4729: LD_INT 6
4731: ST_TO_ADDR
// uc_nation = 3 ;
4732: LD_ADDR_OWVAR 21
4736: PUSH
4737: LD_INT 3
4739: ST_TO_ADDR
// for i := 1 to 3 do
4740: LD_ADDR_VAR 0 2
4744: PUSH
4745: DOUBLE
4746: LD_INT 1
4748: DEC
4749: ST_TO_ADDR
4750: LD_INT 3
4752: PUSH
4753: FOR_TO
4754: IFFALSE 4825
// begin hc_name =  ;
4756: LD_ADDR_OWVAR 26
4760: PUSH
4761: LD_STRING 
4763: ST_TO_ADDR
// hc_gallery =  ;
4764: LD_ADDR_OWVAR 33
4768: PUSH
4769: LD_STRING 
4771: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
4772: LD_INT 0
4774: PPUSH
4775: LD_INT 10
4777: PPUSH
4778: CALL_OW 383
// un = CreateHuman ;
4782: LD_ADDR_VAR 0 3
4786: PUSH
4787: CALL_OW 44
4791: ST_TO_ADDR
// ruBehMehs = ruBehMehs ^ un ;
4792: LD_ADDR_EXP 40
4796: PUSH
4797: LD_EXP 40
4801: PUSH
4802: LD_VAR 0 3
4806: ADD
4807: ST_TO_ADDR
// PlaceUnitArea ( un , RuMehBehSpawn , false ) ;
4808: LD_VAR 0 3
4812: PPUSH
4813: LD_INT 17
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// end ;
4823: GO 4753
4825: POP
4826: POP
// PlaceUnitArea ( Kovalyuk , RuMehBehSpawn , false ) ;
4827: LD_EXP 34
4831: PPUSH
4832: LD_INT 17
4834: PPUSH
4835: LD_INT 0
4837: PPUSH
4838: CALL_OW 49
// SetSide ( Kovalyuk , 6 ) ;
4842: LD_EXP 34
4846: PPUSH
4847: LD_INT 6
4849: PPUSH
4850: CALL_OW 235
// SetSide ( RuBehDep , 6 ) ;
4854: LD_INT 145
4856: PPUSH
4857: LD_INT 6
4859: PPUSH
4860: CALL_OW 235
// ComBuildBehemoth ( ruBehMehs [ 1 ] , b_behemoth , 193 , 118 , 0 ) ;
4864: LD_EXP 40
4868: PUSH
4869: LD_INT 1
4871: ARRAY
4872: PPUSH
4873: LD_INT 37
4875: PPUSH
4876: LD_INT 193
4878: PPUSH
4879: LD_INT 118
4881: PPUSH
4882: LD_INT 0
4884: PPUSH
4885: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 2 ] , b_behemoth , 204 , 119 , 0 ) ;
4889: LD_EXP 40
4893: PUSH
4894: LD_INT 2
4896: ARRAY
4897: PPUSH
4898: LD_INT 37
4900: PPUSH
4901: LD_INT 204
4903: PPUSH
4904: LD_INT 119
4906: PPUSH
4907: LD_INT 0
4909: PPUSH
4910: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 3 ] , b_behemoth , 195 , 126 , 0 ) ;
4914: LD_EXP 40
4918: PUSH
4919: LD_INT 3
4921: ARRAY
4922: PPUSH
4923: LD_INT 37
4925: PPUSH
4926: LD_INT 195
4928: PPUSH
4929: LD_INT 126
4931: PPUSH
4932: LD_INT 0
4934: PPUSH
4935: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 4 ] , b_behemoth , 207 , 126 , 0 ) ;
4939: LD_EXP 40
4943: PUSH
4944: LD_INT 4
4946: ARRAY
4947: PPUSH
4948: LD_INT 37
4950: PPUSH
4951: LD_INT 207
4953: PPUSH
4954: LD_INT 126
4956: PPUSH
4957: LD_INT 0
4959: PPUSH
4960: CALL_OW 170
// end ; end_of_file
4964: LD_VAR 0 1
4968: RET
// export function PrepareAlliance ; var i ; begin
4969: LD_INT 0
4971: PPUSH
4972: PPUSH
// uc_side = 7 ;
4973: LD_ADDR_OWVAR 20
4977: PUSH
4978: LD_INT 7
4980: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
4981: LD_ADDR_EXP 26
4985: PUSH
4986: LD_STRING Roth
4988: PPUSH
4989: LD_INT 0
4991: PPUSH
4992: CALL 5442 0 2
4996: ST_TO_ADDR
// PlaceUnitXY ( Roth , 249 , 187 , false ) ;
4997: LD_EXP 26
5001: PPUSH
5002: LD_INT 249
5004: PPUSH
5005: LD_INT 187
5007: PPUSH
5008: LD_INT 0
5010: PPUSH
5011: CALL_OW 48
// ComTurnXY ( Roth , 248 , 187 ) ;
5015: LD_EXP 26
5019: PPUSH
5020: LD_INT 248
5022: PPUSH
5023: LD_INT 187
5025: PPUSH
5026: CALL_OW 118
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 3 ) ;
5030: LD_INT 7
5032: PPUSH
5033: LD_INT 1
5035: PPUSH
5036: LD_INT 45
5038: PPUSH
5039: LD_INT 10
5041: PPUSH
5042: LD_INT 2
5044: PPUSH
5045: LD_INT 3
5047: PPUSH
5048: CALL 6548 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
5052: LD_INT 7
5054: PPUSH
5055: LD_INT 3
5057: PPUSH
5058: LD_INT 45
5060: PPUSH
5061: LD_INT 10
5063: PPUSH
5064: LD_INT 2
5066: PPUSH
5067: LD_INT 2
5069: PPUSH
5070: CALL 6548 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
5074: LD_INT 7
5076: PPUSH
5077: LD_INT 1
5079: PPUSH
5080: LD_INT 194
5082: PPUSH
5083: LD_INT 10
5085: PPUSH
5086: LD_INT 5
5088: PPUSH
5089: LD_INT 4
5091: PPUSH
5092: CALL 6548 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
5096: LD_INT 7
5098: PPUSH
5099: LD_INT 3
5101: PPUSH
5102: LD_INT 194
5104: PPUSH
5105: LD_INT 10
5107: PPUSH
5108: LD_INT 8
5110: PPUSH
5111: LD_INT 6
5113: PPUSH
5114: CALL 6548 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
5118: LD_INT 7
5120: PPUSH
5121: LD_INT 1
5123: PPUSH
5124: LD_INT 156
5126: PPUSH
5127: LD_INT 10
5129: PPUSH
5130: LD_INT 3
5132: PPUSH
5133: LD_INT 6
5135: PPUSH
5136: CALL 6548 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
5140: LD_INT 7
5142: PPUSH
5143: LD_INT 3
5145: PPUSH
5146: LD_INT 162
5148: PPUSH
5149: LD_INT 10
5151: PPUSH
5152: LD_INT 3
5154: PPUSH
5155: LD_INT 6
5157: PPUSH
5158: CALL 6548 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 4 ) ;
5162: LD_INT 7
5164: PPUSH
5165: LD_INT 3
5167: PPUSH
5168: LD_INT 39
5170: PPUSH
5171: LD_INT 10
5173: PPUSH
5174: LD_INT 4
5176: PPUSH
5177: LD_INT 4
5179: PPUSH
5180: CALL 6548 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 4 ) ;
5184: LD_INT 7
5186: PPUSH
5187: LD_INT 3
5189: PPUSH
5190: LD_INT 133
5192: PPUSH
5193: LD_INT 10
5195: PPUSH
5196: LD_INT 4
5198: PPUSH
5199: LD_INT 4
5201: PPUSH
5202: CALL 6548 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
5206: LD_INT 7
5208: PPUSH
5209: LD_INT 1
5211: PPUSH
5212: LD_INT 46
5214: PPUSH
5215: LD_INT 10
5217: PPUSH
5218: LD_INT 4
5220: PPUSH
5221: LD_INT 2
5223: PPUSH
5224: CALL 6548 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
5228: LD_ADDR_VAR 0 2
5232: PUSH
5233: LD_INT 22
5235: PUSH
5236: LD_INT 7
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PUSH
5243: LD_INT 21
5245: PUSH
5246: LD_INT 3
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: PUSH
5253: LD_INT 30
5255: PUSH
5256: LD_INT 32
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: PUSH
5263: LD_INT 58
5265: PUSH
5266: EMPTY
5267: LIST
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: PPUSH
5275: CALL_OW 69
5279: PUSH
5280: FOR_IN
5281: IFFALSE 5328
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
5283: LD_INT 7
5285: PPUSH
5286: LD_INT 1
5288: PUSH
5289: LD_INT 3
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: LD_INT 1
5298: PPUSH
5299: LD_INT 2
5301: PPUSH
5302: CALL_OW 12
5306: ARRAY
5307: PPUSH
5308: LD_VAR 0 2
5312: PPUSH
5313: LD_INT 10
5315: PPUSH
5316: LD_INT 1
5318: PPUSH
5319: LD_INT 1
5321: PPUSH
5322: CALL 6548 0 6
5326: GO 5280
5328: POP
5329: POP
// if BurlakStatus = 1 then
5330: LD_EXP 55
5334: PUSH
5335: LD_INT 1
5337: EQUAL
5338: IFFALSE 5364
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 3 ) else
5340: LD_INT 7
5342: PPUSH
5343: LD_INT 1
5345: PPUSH
5346: LD_INT 226
5348: PPUSH
5349: LD_INT 10
5351: PPUSH
5352: LD_INT 3
5354: PPUSH
5355: LD_INT 3
5357: PPUSH
5358: CALL 6548 0 6
5362: GO 5386
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 2 ) ;
5364: LD_INT 7
5366: PPUSH
5367: LD_INT 1
5369: PPUSH
5370: LD_INT 226
5372: PPUSH
5373: LD_INT 10
5375: PPUSH
5376: LD_INT 3
5378: PPUSH
5379: LD_INT 2
5381: PPUSH
5382: CALL 6548 0 6
// if BurlakStatus = 0 then
5386: LD_EXP 55
5390: PUSH
5391: LD_INT 0
5393: EQUAL
5394: IFFALSE 5424
// begin Burlak = PrepareUnit ( Burlak , false ) ;
5396: LD_ADDR_EXP 27
5400: PUSH
5401: LD_STRING Burlak
5403: PPUSH
5404: LD_INT 0
5406: PPUSH
5407: CALL 5442 0 2
5411: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , AllControl ) ;
5412: LD_EXP 27
5416: PPUSH
5417: LD_INT 226
5419: PPUSH
5420: CALL_OW 52
// end ; allianceControler = UnitsInside ( AllControl ) ;
5424: LD_ADDR_EXP 45
5428: PUSH
5429: LD_INT 226
5431: PPUSH
5432: CALL_OW 313
5436: ST_TO_ADDR
// end ; end_of_file
5437: LD_VAR 0 1
5441: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5442: LD_INT 0
5444: PPUSH
5445: PPUSH
// if exist_mode then
5446: LD_VAR 0 2
5450: IFFALSE 5469
// unit := CreateCharacter ( ident ) else
5452: LD_ADDR_VAR 0 4
5456: PUSH
5457: LD_VAR 0 1
5461: PPUSH
5462: CALL_OW 34
5466: ST_TO_ADDR
5467: GO 5484
// unit := NewCharacter ( ident ) ;
5469: LD_ADDR_VAR 0 4
5473: PUSH
5474: LD_VAR 0 1
5478: PPUSH
5479: CALL_OW 25
5483: ST_TO_ADDR
// result := unit ;
5484: LD_ADDR_VAR 0 3
5488: PUSH
5489: LD_VAR 0 4
5493: ST_TO_ADDR
// end ;
5494: LD_VAR 0 3
5498: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
5499: LD_INT 0
5501: PPUSH
5502: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
5503: LD_STRING 13s_
5505: PUSH
5506: LD_VAR 0 1
5510: STR
5511: PPUSH
5512: CALL_OW 28
5516: PUSH
5517: LD_INT 1
5519: EQUAL
5520: IFFALSE 5541
// unit = CreateCharacter ( 13s_ & ident ) ;
5522: LD_ADDR_VAR 0 3
5526: PUSH
5527: LD_STRING 13s_
5529: PUSH
5530: LD_VAR 0 1
5534: STR
5535: PPUSH
5536: CALL_OW 34
5540: ST_TO_ADDR
// result := unit ;
5541: LD_ADDR_VAR 0 2
5545: PUSH
5546: LD_VAR 0 3
5550: ST_TO_ADDR
// end ;
5551: LD_VAR 0 2
5555: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
5556: LD_INT 0
5558: PPUSH
5559: PPUSH
// if TestCharacters ( 13f_ & ident ) = true then
5560: LD_STRING 13f_
5562: PUSH
5563: LD_VAR 0 1
5567: STR
5568: PPUSH
5569: CALL_OW 28
5573: PUSH
5574: LD_INT 1
5576: EQUAL
5577: IFFALSE 5614
// begin unit = CreateCharacter ( 13f_ & ident ) ;
5579: LD_ADDR_VAR 0 3
5583: PUSH
5584: LD_STRING 13f_
5586: PUSH
5587: LD_VAR 0 1
5591: STR
5592: PPUSH
5593: CALL_OW 34
5597: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ unit ;
5598: LD_ADDR_EXP 20
5602: PUSH
5603: LD_EXP 20
5607: PUSH
5608: LD_VAR 0 3
5612: ADD
5613: ST_TO_ADDR
// end ; result := unit ;
5614: LD_ADDR_VAR 0 2
5618: PUSH
5619: LD_VAR 0 3
5623: ST_TO_ADDR
// end ;
5624: LD_VAR 0 2
5628: RET
// export function TabLenght ( tab ) ; var i ; begin
5629: LD_INT 0
5631: PPUSH
5632: PPUSH
// for i = 1 to tab do
5633: LD_ADDR_VAR 0 3
5637: PUSH
5638: DOUBLE
5639: LD_INT 1
5641: DEC
5642: ST_TO_ADDR
5643: LD_VAR 0 1
5647: PUSH
5648: FOR_TO
5649: IFFALSE 5663
// result = i ;
5651: LD_ADDR_VAR 0 2
5655: PUSH
5656: LD_VAR 0 3
5660: ST_TO_ADDR
5661: GO 5648
5663: POP
5664: POP
// end ;
5665: LD_VAR 0 2
5669: RET
// export function Video ( mode ) ; begin
5670: LD_INT 0
5672: PPUSH
// if mode = true then
5673: LD_VAR 0 1
5677: PUSH
5678: LD_INT 1
5680: EQUAL
5681: IFFALSE 5701
// begin ingame_video = true ;
5683: LD_ADDR_OWVAR 52
5687: PUSH
5688: LD_INT 1
5690: ST_TO_ADDR
// interface_hidden = true ;
5691: LD_ADDR_OWVAR 54
5695: PUSH
5696: LD_INT 1
5698: ST_TO_ADDR
// end else
5699: GO 5717
// begin ingame_video = false ;
5701: LD_ADDR_OWVAR 52
5705: PUSH
5706: LD_INT 0
5708: ST_TO_ADDR
// interface_hidden = false ;
5709: LD_ADDR_OWVAR 54
5713: PUSH
5714: LD_INT 0
5716: ST_TO_ADDR
// end ; end ;
5717: LD_VAR 0 2
5721: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5722: LD_INT 0
5724: PPUSH
5725: PPUSH
5726: PPUSH
// characters := characters diff [ JMM , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
5727: LD_ADDR_VAR 0 1
5731: PUSH
5732: LD_VAR 0 1
5736: PUSH
5737: LD_EXP 1
5741: PUSH
5742: LD_EXP 3
5746: PUSH
5747: LD_EXP 21
5751: PUSH
5752: LD_EXP 4
5756: PUSH
5757: LD_EXP 5
5761: PUSH
5762: LD_EXP 6
5766: PUSH
5767: LD_EXP 7
5771: PUSH
5772: LD_EXP 8
5776: PUSH
5777: LD_EXP 9
5781: PUSH
5782: LD_EXP 10
5786: PUSH
5787: LD_EXP 11
5791: PUSH
5792: LD_EXP 12
5796: PUSH
5797: LD_EXP 13
5801: PUSH
5802: LD_EXP 14
5806: PUSH
5807: LD_EXP 15
5811: PUSH
5812: LD_EXP 17
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: DIFF
5835: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
5836: LD_ADDR_VAR 0 6
5840: PUSH
5841: LD_INT 1
5843: PPUSH
5844: LD_VAR 0 1
5848: PPUSH
5849: CALL_OW 12
5853: ST_TO_ADDR
// for i = 1 to characters do
5854: LD_ADDR_VAR 0 5
5858: PUSH
5859: DOUBLE
5860: LD_INT 1
5862: DEC
5863: ST_TO_ADDR
5864: LD_VAR 0 1
5868: PUSH
5869: FOR_TO
5870: IFFALSE 5980
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5872: LD_VAR 0 5
5876: PUSH
5877: LD_VAR 0 6
5881: EQUAL
5882: PUSH
5883: LD_VAR 0 1
5887: PUSH
5888: LD_VAR 0 5
5892: ARRAY
5893: PPUSH
5894: CALL_OW 258
5898: PUSH
5899: LD_INT 1
5901: EQUAL
5902: AND
5903: IFFALSE 5925
// Say ( characters [ i ] , dialogMID ) ;
5905: LD_VAR 0 1
5909: PUSH
5910: LD_VAR 0 5
5914: ARRAY
5915: PPUSH
5916: LD_VAR 0 2
5920: PPUSH
5921: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5925: LD_VAR 0 5
5929: PUSH
5930: LD_VAR 0 6
5934: EQUAL
5935: PUSH
5936: LD_VAR 0 1
5940: PUSH
5941: LD_VAR 0 5
5945: ARRAY
5946: PPUSH
5947: CALL_OW 258
5951: PUSH
5952: LD_INT 2
5954: EQUAL
5955: AND
5956: IFFALSE 5978
// Say ( characters [ i ] , dialogFID ) ;
5958: LD_VAR 0 1
5962: PUSH
5963: LD_VAR 0 5
5967: ARRAY
5968: PPUSH
5969: LD_VAR 0 3
5973: PPUSH
5974: CALL_OW 88
// end ;
5978: GO 5869
5980: POP
5981: POP
// end ;
5982: LD_VAR 0 4
5986: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
5987: LD_INT 0
5989: PPUSH
5990: PPUSH
5991: PPUSH
5992: PPUSH
// if not list then
5993: LD_VAR 0 1
5997: NOT
5998: IFFALSE 6002
// exit ;
6000: GO 6349
// result := [ ] ;
6002: LD_ADDR_VAR 0 3
6006: PUSH
6007: EMPTY
6008: ST_TO_ADDR
// for i in list do
6009: LD_ADDR_VAR 0 4
6013: PUSH
6014: LD_VAR 0 1
6018: PUSH
6019: FOR_IN
6020: IFFALSE 6261
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
6022: LD_ADDR_VAR 0 6
6026: PUSH
6027: LD_VAR 0 4
6031: PPUSH
6032: LD_INT 1
6034: PPUSH
6035: CALL_OW 259
6039: PUSH
6040: LD_VAR 0 4
6044: PPUSH
6045: LD_INT 2
6047: PPUSH
6048: CALL_OW 259
6052: PLUS
6053: PUSH
6054: LD_VAR 0 4
6058: PPUSH
6059: LD_INT 3
6061: PPUSH
6062: CALL_OW 259
6066: PLUS
6067: PUSH
6068: LD_VAR 0 4
6072: PPUSH
6073: LD_INT 4
6075: PPUSH
6076: CALL_OW 259
6080: PLUS
6081: PUSH
6082: LD_INT 4
6084: DIV
6085: ST_TO_ADDR
// if not result then
6086: LD_VAR 0 3
6090: NOT
6091: IFFALSE 6117
// result := [ [ i , tmp ] ] else
6093: LD_ADDR_VAR 0 3
6097: PUSH
6098: LD_VAR 0 4
6102: PUSH
6103: LD_VAR 0 6
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: ST_TO_ADDR
6115: GO 6259
// begin if result [ result ] [ 2 ] < tmp then
6117: LD_VAR 0 3
6121: PUSH
6122: LD_VAR 0 3
6126: ARRAY
6127: PUSH
6128: LD_INT 2
6130: ARRAY
6131: PUSH
6132: LD_VAR 0 6
6136: LESS
6137: IFFALSE 6179
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6139: LD_ADDR_VAR 0 3
6143: PUSH
6144: LD_VAR 0 3
6148: PPUSH
6149: LD_VAR 0 3
6153: PUSH
6154: LD_INT 1
6156: PLUS
6157: PPUSH
6158: LD_VAR 0 4
6162: PUSH
6163: LD_VAR 0 6
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PPUSH
6172: CALL_OW 2
6176: ST_TO_ADDR
6177: GO 6259
// for j = 1 to result do
6179: LD_ADDR_VAR 0 5
6183: PUSH
6184: DOUBLE
6185: LD_INT 1
6187: DEC
6188: ST_TO_ADDR
6189: LD_VAR 0 3
6193: PUSH
6194: FOR_TO
6195: IFFALSE 6257
// begin if tmp < result [ j ] [ 2 ] then
6197: LD_VAR 0 6
6201: PUSH
6202: LD_VAR 0 3
6206: PUSH
6207: LD_VAR 0 5
6211: ARRAY
6212: PUSH
6213: LD_INT 2
6215: ARRAY
6216: LESS
6217: IFFALSE 6255
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6219: LD_ADDR_VAR 0 3
6223: PUSH
6224: LD_VAR 0 3
6228: PPUSH
6229: LD_VAR 0 5
6233: PPUSH
6234: LD_VAR 0 4
6238: PUSH
6239: LD_VAR 0 6
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL_OW 2
6252: ST_TO_ADDR
// break ;
6253: GO 6257
// end ; end ;
6255: GO 6194
6257: POP
6258: POP
// end ; end ;
6259: GO 6019
6261: POP
6262: POP
// if result and not asc then
6263: LD_VAR 0 3
6267: PUSH
6268: LD_VAR 0 2
6272: NOT
6273: AND
6274: IFFALSE 6349
// begin tmp := result ;
6276: LD_ADDR_VAR 0 6
6280: PUSH
6281: LD_VAR 0 3
6285: ST_TO_ADDR
// for i = tmp downto 1 do
6286: LD_ADDR_VAR 0 4
6290: PUSH
6291: DOUBLE
6292: LD_VAR 0 6
6296: INC
6297: ST_TO_ADDR
6298: LD_INT 1
6300: PUSH
6301: FOR_DOWNTO
6302: IFFALSE 6347
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6304: LD_ADDR_VAR 0 3
6308: PUSH
6309: LD_VAR 0 3
6313: PPUSH
6314: LD_VAR 0 6
6318: PUSH
6319: LD_VAR 0 4
6323: MINUS
6324: PUSH
6325: LD_INT 1
6327: PLUS
6328: PPUSH
6329: LD_VAR 0 6
6333: PUSH
6334: LD_VAR 0 4
6338: ARRAY
6339: PPUSH
6340: CALL_OW 1
6344: ST_TO_ADDR
6345: GO 6301
6347: POP
6348: POP
// end ; end ;
6349: LD_VAR 0 3
6353: RET
// export function PrepareDifficulty ; begin
6354: LD_INT 0
6356: PPUSH
// if difficulty = 1 then
6357: LD_OWVAR 67
6361: PUSH
6362: LD_INT 1
6364: EQUAL
6365: IFFALSE 6393
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
6367: LD_INT 51
6369: PPUSH
6370: LD_INT 6
6372: PPUSH
6373: LD_INT 2
6375: PPUSH
6376: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
6380: LD_INT 57
6382: PPUSH
6383: LD_INT 6
6385: PPUSH
6386: LD_INT 2
6388: PPUSH
6389: CALL_OW 322
// end ; if difficulty = 2 then
6393: LD_OWVAR 67
6397: PUSH
6398: LD_INT 2
6400: EQUAL
6401: IFFALSE 6455
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
6403: LD_INT 51
6405: PPUSH
6406: LD_INT 6
6408: PPUSH
6409: LD_INT 2
6411: PPUSH
6412: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
6416: LD_INT 57
6418: PPUSH
6419: LD_INT 6
6421: PPUSH
6422: LD_INT 2
6424: PPUSH
6425: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
6429: LD_INT 52
6431: PPUSH
6432: LD_INT 6
6434: PPUSH
6435: LD_INT 2
6437: PPUSH
6438: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
6442: LD_INT 58
6444: PPUSH
6445: LD_INT 6
6447: PPUSH
6448: LD_INT 2
6450: PPUSH
6451: CALL_OW 322
// end ; if difficulty = 3 then
6455: LD_OWVAR 67
6459: PUSH
6460: LD_INT 3
6462: EQUAL
6463: IFFALSE 6543
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
6465: LD_INT 51
6467: PPUSH
6468: LD_INT 6
6470: PPUSH
6471: LD_INT 2
6473: PPUSH
6474: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
6478: LD_INT 57
6480: PPUSH
6481: LD_INT 6
6483: PPUSH
6484: LD_INT 2
6486: PPUSH
6487: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
6491: LD_INT 52
6493: PPUSH
6494: LD_INT 6
6496: PPUSH
6497: LD_INT 2
6499: PPUSH
6500: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
6504: LD_INT 58
6506: PPUSH
6507: LD_INT 6
6509: PPUSH
6510: LD_INT 2
6512: PPUSH
6513: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
6517: LD_INT 53
6519: PPUSH
6520: LD_INT 6
6522: PPUSH
6523: LD_INT 2
6525: PPUSH
6526: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
6530: LD_INT 59
6532: PPUSH
6533: LD_INT 6
6535: PPUSH
6536: LD_INT 2
6538: PPUSH
6539: CALL_OW 322
// end ; end ;
6543: LD_VAR 0 1
6547: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
6548: LD_INT 0
6550: PPUSH
6551: PPUSH
6552: PPUSH
6553: PPUSH
6554: PPUSH
// for i = 1 to count do
6555: LD_ADDR_VAR 0 8
6559: PUSH
6560: DOUBLE
6561: LD_INT 1
6563: DEC
6564: ST_TO_ADDR
6565: LD_VAR 0 6
6569: PUSH
6570: FOR_TO
6571: IFFALSE 6652
// begin uc_side = side ;
6573: LD_ADDR_OWVAR 20
6577: PUSH
6578: LD_VAR 0 1
6582: ST_TO_ADDR
// uc_nation = nation ;
6583: LD_ADDR_OWVAR 21
6587: PUSH
6588: LD_VAR 0 2
6592: ST_TO_ADDR
// hc_gallery =  ;
6593: LD_ADDR_OWVAR 33
6597: PUSH
6598: LD_STRING 
6600: ST_TO_ADDR
// hc_name =  ;
6601: LD_ADDR_OWVAR 26
6605: PUSH
6606: LD_STRING 
6608: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6609: LD_INT 0
6611: PPUSH
6612: LD_VAR 0 5
6616: PPUSH
6617: LD_VAR 0 4
6621: PPUSH
6622: CALL_OW 380
// un = CreateHuman ;
6626: LD_ADDR_VAR 0 10
6630: PUSH
6631: CALL_OW 44
6635: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6636: LD_VAR 0 10
6640: PPUSH
6641: LD_VAR 0 3
6645: PPUSH
6646: CALL_OW 52
// end ;
6650: GO 6570
6652: POP
6653: POP
// end ;
6654: LD_VAR 0 7
6658: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
6659: LD_INT 0
6661: PPUSH
6662: PPUSH
6663: PPUSH
6664: PPUSH
6665: PPUSH
6666: PPUSH
6667: PPUSH
6668: PPUSH
6669: PPUSH
6670: PPUSH
6671: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
6672: LD_INT 2100
6674: PUSH
6675: LD_INT 3150
6677: PUSH
6678: LD_INT 4200
6680: PUSH
6681: LD_INT 5250
6683: PUSH
6684: LD_INT 6300
6686: PUSH
6687: LD_INT 7350
6689: PUSH
6690: LD_INT 8400
6692: PUSH
6693: LD_INT 9450
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 1
6708: PPUSH
6709: LD_INT 8
6711: PPUSH
6712: CALL_OW 12
6716: ARRAY
6717: PPUSH
6718: CALL_OW 67
// amChassisTab = [ ] ;
6722: LD_ADDR_VAR 0 19
6726: PUSH
6727: EMPTY
6728: ST_TO_ADDR
// arChassisTab = [ ] ;
6729: LD_ADDR_VAR 0 18
6733: PUSH
6734: EMPTY
6735: ST_TO_ADDR
// ruChassisTab = [ ] ;
6736: LD_ADDR_VAR 0 17
6740: PUSH
6741: EMPTY
6742: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6743: LD_INT 35
6745: PPUSH
6746: CALL_OW 67
// if nation = 1 then
6750: LD_VAR 0 5
6754: PUSH
6755: LD_INT 1
6757: EQUAL
6758: IFFALSE 7249
// begin uc_side = side ;
6760: LD_ADDR_OWVAR 20
6764: PUSH
6765: LD_VAR 0 2
6769: ST_TO_ADDR
// uc_nation = nation ;
6770: LD_ADDR_OWVAR 21
6774: PUSH
6775: LD_VAR 0 5
6779: ST_TO_ADDR
// vc_engine = vehengine ;
6780: LD_ADDR_OWVAR 39
6784: PUSH
6785: LD_VAR 0 6
6789: ST_TO_ADDR
// vc_control = vehcontrol ;
6790: LD_ADDR_OWVAR 38
6794: PUSH
6795: LD_VAR 0 7
6799: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
6800: LD_ADDR_OWVAR 40
6804: PUSH
6805: LD_VAR 0 10
6809: PUSH
6810: LD_INT 1
6812: PPUSH
6813: LD_VAR 0 10
6817: PPUSH
6818: CALL_OW 12
6822: ARRAY
6823: ST_TO_ADDR
// for j = 1 to AMWeapon do
6824: LD_ADDR_VAR 0 14
6828: PUSH
6829: DOUBLE
6830: LD_INT 1
6832: DEC
6833: ST_TO_ADDR
6834: LD_VAR 0 10
6838: PUSH
6839: FOR_TO
6840: IFFALSE 7141
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
6842: LD_VAR 0 10
6846: PUSH
6847: LD_VAR 0 14
6851: ARRAY
6852: PUSH
6853: LD_INT 2
6855: EQUAL
6856: PUSH
6857: LD_VAR 0 10
6861: PUSH
6862: LD_VAR 0 14
6866: ARRAY
6867: PUSH
6868: LD_INT 3
6870: EQUAL
6871: OR
6872: IFFALSE 6925
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
6874: LD_ADDR_VAR 0 19
6878: PUSH
6879: LD_INT 1
6881: PUSH
6882: LD_INT 2
6884: PUSH
6885: LD_INT 3
6887: PUSH
6888: LD_INT 4
6890: PUSH
6891: LD_INT 5
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
6901: LD_ADDR_OWVAR 37
6905: PUSH
6906: LD_VAR 0 19
6910: PUSH
6911: LD_INT 1
6913: PPUSH
6914: LD_VAR 0 19
6918: PPUSH
6919: CALL_OW 12
6923: ARRAY
6924: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
6925: LD_VAR 0 10
6929: PUSH
6930: LD_VAR 0 14
6934: ARRAY
6935: PUSH
6936: LD_INT 4
6938: EQUAL
6939: PUSH
6940: LD_VAR 0 10
6944: PUSH
6945: LD_VAR 0 14
6949: ARRAY
6950: PUSH
6951: LD_INT 5
6953: EQUAL
6954: OR
6955: PUSH
6956: LD_VAR 0 10
6960: PUSH
6961: LD_VAR 0 14
6965: ARRAY
6966: PUSH
6967: LD_INT 9
6969: EQUAL
6970: OR
6971: PUSH
6972: LD_VAR 0 10
6976: PUSH
6977: LD_VAR 0 14
6981: ARRAY
6982: PUSH
6983: LD_INT 11
6985: EQUAL
6986: OR
6987: PUSH
6988: LD_VAR 0 10
6992: PUSH
6993: LD_VAR 0 14
6997: ARRAY
6998: PUSH
6999: LD_INT 7
7001: EQUAL
7002: OR
7003: IFFALSE 7052
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
7005: LD_ADDR_VAR 0 19
7009: PUSH
7010: LD_INT 2
7012: PUSH
7013: LD_INT 3
7015: PUSH
7016: LD_INT 4
7018: PUSH
7019: LD_INT 5
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7028: LD_ADDR_OWVAR 37
7032: PUSH
7033: LD_VAR 0 19
7037: PUSH
7038: LD_INT 1
7040: PPUSH
7041: LD_VAR 0 19
7045: PPUSH
7046: CALL_OW 12
7050: ARRAY
7051: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
7052: LD_VAR 0 10
7056: PUSH
7057: LD_VAR 0 14
7061: ARRAY
7062: PUSH
7063: LD_INT 8
7065: EQUAL
7066: PUSH
7067: LD_VAR 0 10
7071: PUSH
7072: LD_VAR 0 14
7076: ARRAY
7077: PUSH
7078: LD_INT 6
7080: EQUAL
7081: OR
7082: PUSH
7083: LD_VAR 0 10
7087: PUSH
7088: LD_VAR 0 14
7092: ARRAY
7093: PUSH
7094: LD_INT 10
7096: EQUAL
7097: OR
7098: IFFALSE 7139
// begin amChassisTab = [ 4 , 5 ] ;
7100: LD_ADDR_VAR 0 19
7104: PUSH
7105: LD_INT 4
7107: PUSH
7108: LD_INT 5
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7115: LD_ADDR_OWVAR 37
7119: PUSH
7120: LD_VAR 0 19
7124: PUSH
7125: LD_INT 1
7127: PPUSH
7128: LD_VAR 0 19
7132: PPUSH
7133: CALL_OW 12
7137: ARRAY
7138: ST_TO_ADDR
// end ; end ;
7139: GO 6839
7141: POP
7142: POP
// veh = CreateVehicle ;
7143: LD_ADDR_VAR 0 16
7147: PUSH
7148: CALL_OW 45
7152: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
7153: LD_VAR 0 16
7157: PPUSH
7158: LD_VAR 0 1
7162: PPUSH
7163: LD_INT 0
7165: PPUSH
7166: CALL_OW 49
// if vc_control = 1 then
7170: LD_OWVAR 38
7174: PUSH
7175: LD_INT 1
7177: EQUAL
7178: IFFALSE 7235
// begin hc_gallery =  ;
7180: LD_ADDR_OWVAR 33
7184: PUSH
7185: LD_STRING 
7187: ST_TO_ADDR
// hc_name =  ;
7188: LD_ADDR_OWVAR 26
7192: PUSH
7193: LD_STRING 
7195: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
7196: LD_INT 0
7198: PPUSH
7199: LD_INT 3
7201: PPUSH
7202: LD_VAR 0 4
7206: PPUSH
7207: CALL_OW 380
// un = CreateHuman ;
7211: LD_ADDR_VAR 0 15
7215: PUSH
7216: CALL_OW 44
7220: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7221: LD_VAR 0 15
7225: PPUSH
7226: LD_VAR 0 16
7230: PPUSH
7231: CALL_OW 52
// end ; i = i + 1 ;
7235: LD_ADDR_VAR 0 13
7239: PUSH
7240: LD_VAR 0 13
7244: PUSH
7245: LD_INT 1
7247: PLUS
7248: ST_TO_ADDR
// end ; if nation = 2 then
7249: LD_VAR 0 5
7253: PUSH
7254: LD_INT 2
7256: EQUAL
7257: IFFALSE 7681
// begin uc_side = side ;
7259: LD_ADDR_OWVAR 20
7263: PUSH
7264: LD_VAR 0 2
7268: ST_TO_ADDR
// uc_nation = nation ;
7269: LD_ADDR_OWVAR 21
7273: PUSH
7274: LD_VAR 0 5
7278: ST_TO_ADDR
// vc_engine = vehengine ;
7279: LD_ADDR_OWVAR 39
7283: PUSH
7284: LD_VAR 0 6
7288: ST_TO_ADDR
// vc_control = vehcontrol ;
7289: LD_ADDR_OWVAR 38
7293: PUSH
7294: LD_VAR 0 7
7298: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
7299: LD_ADDR_OWVAR 40
7303: PUSH
7304: LD_VAR 0 9
7308: PUSH
7309: LD_INT 1
7311: PPUSH
7312: LD_VAR 0 9
7316: PPUSH
7317: CALL_OW 12
7321: ARRAY
7322: ST_TO_ADDR
// for j = 1 to ARWeapons do
7323: LD_ADDR_VAR 0 14
7327: PUSH
7328: DOUBLE
7329: LD_INT 1
7331: DEC
7332: ST_TO_ADDR
7333: LD_VAR 0 9
7337: PUSH
7338: FOR_TO
7339: IFFALSE 7573
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
7341: LD_VAR 0 9
7345: PUSH
7346: LD_VAR 0 14
7350: ARRAY
7351: PUSH
7352: LD_INT 24
7354: EQUAL
7355: PUSH
7356: LD_VAR 0 9
7360: PUSH
7361: LD_VAR 0 14
7365: ARRAY
7366: PUSH
7367: LD_INT 22
7369: EQUAL
7370: OR
7371: PUSH
7372: LD_VAR 0 9
7376: PUSH
7377: LD_VAR 0 14
7381: ARRAY
7382: PUSH
7383: LD_INT 23
7385: EQUAL
7386: OR
7387: PUSH
7388: LD_VAR 0 9
7392: PUSH
7393: LD_VAR 0 14
7397: ARRAY
7398: PUSH
7399: LD_INT 30
7401: EQUAL
7402: OR
7403: IFFALSE 7452
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
7405: LD_ADDR_VAR 0 18
7409: PUSH
7410: LD_INT 11
7412: PUSH
7413: LD_INT 12
7415: PUSH
7416: LD_INT 13
7418: PUSH
7419: LD_INT 14
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
7428: LD_ADDR_OWVAR 37
7432: PUSH
7433: LD_VAR 0 18
7437: PUSH
7438: LD_INT 1
7440: PPUSH
7441: LD_VAR 0 18
7445: PPUSH
7446: CALL_OW 12
7450: ARRAY
7451: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
7452: LD_VAR 0 9
7456: PUSH
7457: LD_VAR 0 14
7461: ARRAY
7462: PUSH
7463: LD_INT 29
7465: EQUAL
7466: PUSH
7467: LD_VAR 0 9
7471: PUSH
7472: LD_VAR 0 14
7476: ARRAY
7477: PUSH
7478: LD_INT 28
7480: EQUAL
7481: OR
7482: PUSH
7483: LD_VAR 0 9
7487: PUSH
7488: LD_VAR 0 14
7492: ARRAY
7493: PUSH
7494: LD_INT 27
7496: EQUAL
7497: OR
7498: PUSH
7499: LD_VAR 0 9
7503: PUSH
7504: LD_VAR 0 14
7508: ARRAY
7509: PUSH
7510: LD_INT 26
7512: EQUAL
7513: OR
7514: PUSH
7515: LD_VAR 0 9
7519: PUSH
7520: LD_VAR 0 14
7524: ARRAY
7525: PUSH
7526: LD_INT 25
7528: EQUAL
7529: OR
7530: IFFALSE 7571
// begin arChassisTab = [ 13 , 14 ] ;
7532: LD_ADDR_VAR 0 18
7536: PUSH
7537: LD_INT 13
7539: PUSH
7540: LD_INT 14
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
7547: LD_ADDR_OWVAR 37
7551: PUSH
7552: LD_VAR 0 18
7556: PUSH
7557: LD_INT 1
7559: PPUSH
7560: LD_VAR 0 18
7564: PPUSH
7565: CALL_OW 12
7569: ARRAY
7570: ST_TO_ADDR
// end ; end ;
7571: GO 7338
7573: POP
7574: POP
// veh = CreateVehicle ;
7575: LD_ADDR_VAR 0 16
7579: PUSH
7580: CALL_OW 45
7584: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
7585: LD_VAR 0 16
7589: PPUSH
7590: LD_VAR 0 1
7594: PPUSH
7595: LD_INT 0
7597: PPUSH
7598: CALL_OW 49
// if vc_control = 1 then
7602: LD_OWVAR 38
7606: PUSH
7607: LD_INT 1
7609: EQUAL
7610: IFFALSE 7667
// begin hc_gallery =  ;
7612: LD_ADDR_OWVAR 33
7616: PUSH
7617: LD_STRING 
7619: ST_TO_ADDR
// hc_name =  ;
7620: LD_ADDR_OWVAR 26
7624: PUSH
7625: LD_STRING 
7627: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
7628: LD_INT 0
7630: PPUSH
7631: LD_INT 3
7633: PPUSH
7634: LD_VAR 0 4
7638: PPUSH
7639: CALL_OW 380
// un = CreateHuman ;
7643: LD_ADDR_VAR 0 15
7647: PUSH
7648: CALL_OW 44
7652: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7653: LD_VAR 0 15
7657: PPUSH
7658: LD_VAR 0 16
7662: PPUSH
7663: CALL_OW 52
// end ; i = i + 1 ;
7667: LD_ADDR_VAR 0 13
7671: PUSH
7672: LD_VAR 0 13
7676: PUSH
7677: LD_INT 1
7679: PLUS
7680: ST_TO_ADDR
// end ; if nation = 3 then
7681: LD_VAR 0 5
7685: PUSH
7686: LD_INT 3
7688: EQUAL
7689: IFFALSE 8065
// begin uc_side = side ;
7691: LD_ADDR_OWVAR 20
7695: PUSH
7696: LD_VAR 0 2
7700: ST_TO_ADDR
// uc_nation = nation ;
7701: LD_ADDR_OWVAR 21
7705: PUSH
7706: LD_VAR 0 5
7710: ST_TO_ADDR
// vc_engine = vehengine ;
7711: LD_ADDR_OWVAR 39
7715: PUSH
7716: LD_VAR 0 6
7720: ST_TO_ADDR
// vc_control = vehcontrol ;
7721: LD_ADDR_OWVAR 38
7725: PUSH
7726: LD_VAR 0 7
7730: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
7731: LD_ADDR_OWVAR 40
7735: PUSH
7736: LD_VAR 0 8
7740: PUSH
7741: LD_INT 1
7743: PPUSH
7744: LD_VAR 0 8
7748: PPUSH
7749: CALL_OW 12
7753: ARRAY
7754: ST_TO_ADDR
// for j = 1 to RuWeapons do
7755: LD_ADDR_VAR 0 14
7759: PUSH
7760: DOUBLE
7761: LD_INT 1
7763: DEC
7764: ST_TO_ADDR
7765: LD_VAR 0 8
7769: PUSH
7770: FOR_TO
7771: IFFALSE 7957
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
7773: LD_VAR 0 8
7777: PUSH
7778: LD_VAR 0 14
7782: ARRAY
7783: PUSH
7784: LD_INT 42
7786: EQUAL
7787: PUSH
7788: LD_VAR 0 8
7792: PUSH
7793: LD_VAR 0 14
7797: ARRAY
7798: PUSH
7799: LD_INT 43
7801: EQUAL
7802: OR
7803: PUSH
7804: LD_VAR 0 8
7808: PUSH
7809: LD_VAR 0 14
7813: ARRAY
7814: PUSH
7815: LD_INT 44
7817: EQUAL
7818: OR
7819: PUSH
7820: LD_VAR 0 8
7824: PUSH
7825: LD_VAR 0 14
7829: ARRAY
7830: PUSH
7831: LD_INT 45
7833: EQUAL
7834: OR
7835: PUSH
7836: LD_VAR 0 8
7840: PUSH
7841: LD_VAR 0 14
7845: ARRAY
7846: PUSH
7847: LD_INT 49
7849: EQUAL
7850: OR
7851: IFFALSE 7888
// begin ruChassisTab = [ 24 ] ;
7853: LD_ADDR_VAR 0 17
7857: PUSH
7858: LD_INT 24
7860: PUSH
7861: EMPTY
7862: LIST
7863: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
7864: LD_ADDR_OWVAR 37
7868: PUSH
7869: LD_VAR 0 17
7873: PUSH
7874: LD_INT 1
7876: PPUSH
7877: LD_VAR 0 17
7881: PPUSH
7882: CALL_OW 12
7886: ARRAY
7887: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
7888: LD_VAR 0 8
7892: PUSH
7893: LD_VAR 0 14
7897: ARRAY
7898: PUSH
7899: LD_INT 46
7901: EQUAL
7902: PUSH
7903: LD_VAR 0 8
7907: PUSH
7908: LD_VAR 0 14
7912: ARRAY
7913: PUSH
7914: LD_INT 47
7916: EQUAL
7917: OR
7918: IFFALSE 7955
// begin ruChassisTab = [ 24 ] ;
7920: LD_ADDR_VAR 0 17
7924: PUSH
7925: LD_INT 24
7927: PUSH
7928: EMPTY
7929: LIST
7930: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
7931: LD_ADDR_OWVAR 37
7935: PUSH
7936: LD_VAR 0 17
7940: PUSH
7941: LD_INT 1
7943: PPUSH
7944: LD_VAR 0 17
7948: PPUSH
7949: CALL_OW 12
7953: ARRAY
7954: ST_TO_ADDR
// end ; end ;
7955: GO 7770
7957: POP
7958: POP
// veh = CreateVehicle ;
7959: LD_ADDR_VAR 0 16
7963: PUSH
7964: CALL_OW 45
7968: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
7969: LD_VAR 0 16
7973: PPUSH
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_INT 0
7981: PPUSH
7982: CALL_OW 49
// if vc_control = 1 then
7986: LD_OWVAR 38
7990: PUSH
7991: LD_INT 1
7993: EQUAL
7994: IFFALSE 8051
// begin hc_gallery =  ;
7996: LD_ADDR_OWVAR 33
8000: PUSH
8001: LD_STRING 
8003: ST_TO_ADDR
// hc_name =  ;
8004: LD_ADDR_OWVAR 26
8008: PUSH
8009: LD_STRING 
8011: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8012: LD_INT 0
8014: PPUSH
8015: LD_INT 3
8017: PPUSH
8018: LD_VAR 0 4
8022: PPUSH
8023: CALL_OW 380
// un = CreateHuman ;
8027: LD_ADDR_VAR 0 15
8031: PUSH
8032: CALL_OW 44
8036: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8037: LD_VAR 0 15
8041: PPUSH
8042: LD_VAR 0 16
8046: PPUSH
8047: CALL_OW 52
// end ; i = i + 1 ;
8051: LD_ADDR_VAR 0 13
8055: PUSH
8056: LD_VAR 0 13
8060: PUSH
8061: LD_INT 1
8063: PLUS
8064: ST_TO_ADDR
// end ; until i = vehCount ;
8065: LD_VAR 0 13
8069: PUSH
8070: LD_VAR 0 3
8074: EQUAL
8075: IFFALSE 6743
// repeat wait ( 0 0$1 ) ;
8077: LD_INT 35
8079: PPUSH
8080: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
8084: LD_ADDR_VAR 0 20
8088: PUSH
8089: LD_INT 22
8091: PUSH
8092: LD_VAR 0 2
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 21
8103: PUSH
8104: LD_INT 2
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 24
8113: PUSH
8114: LD_INT 250
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: LIST
8125: PPUSH
8126: CALL_OW 69
8130: ST_TO_ADDR
// if vehicleOK_list > 0 then
8131: LD_VAR 0 20
8135: PUSH
8136: LD_INT 0
8138: GREATER
8139: IFFALSE 8330
// begin for i in vehicleOK_list do
8141: LD_ADDR_VAR 0 13
8145: PUSH
8146: LD_VAR 0 20
8150: PUSH
8151: FOR_IN
8152: IFFALSE 8328
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8154: LD_ADDR_VAR 0 21
8158: PUSH
8159: LD_INT 22
8161: PUSH
8162: LD_VAR 0 11
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PPUSH
8171: CALL_OW 69
8175: PPUSH
8176: LD_VAR 0 13
8180: PPUSH
8181: CALL_OW 74
8185: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8186: LD_ADDR_VAR 0 22
8190: PUSH
8191: LD_INT 22
8193: PUSH
8194: LD_VAR 0 11
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: PUSH
8203: LD_INT 2
8205: PUSH
8206: LD_INT 59
8208: PUSH
8209: EMPTY
8210: LIST
8211: PUSH
8212: LD_INT 21
8214: PUSH
8215: LD_INT 1
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 21
8224: PUSH
8225: LD_INT 2
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: EMPTY
8243: LIST
8244: PPUSH
8245: CALL_OW 69
8249: PPUSH
8250: LD_VAR 0 13
8254: PPUSH
8255: CALL_OW 74
8259: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8260: LD_VAR 0 13
8264: PPUSH
8265: LD_VAR 0 21
8269: PPUSH
8270: CALL_OW 296
8274: PUSH
8275: LD_INT 8
8277: PLUS
8278: PUSH
8279: LD_VAR 0 13
8283: PPUSH
8284: LD_VAR 0 22
8288: PPUSH
8289: CALL_OW 296
8293: LESS
8294: IFFALSE 8312
// begin ComAttackUnit ( i , target1 ) ;
8296: LD_VAR 0 13
8300: PPUSH
8301: LD_VAR 0 21
8305: PPUSH
8306: CALL_OW 115
// end else
8310: GO 8326
// begin ComAttackUnit ( i , target2 ) ;
8312: LD_VAR 0 13
8316: PPUSH
8317: LD_VAR 0 22
8321: PPUSH
8322: CALL_OW 115
// end ; end ;
8326: GO 8151
8328: POP
8329: POP
// end ; until vehicleOK_list = [ ] ;
8330: LD_VAR 0 20
8334: PUSH
8335: EMPTY
8336: EQUAL
8337: IFFALSE 8077
// end ;
8339: LD_VAR 0 12
8343: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
8344: LD_INT 0
8346: PPUSH
8347: PPUSH
8348: PPUSH
8349: PPUSH
// for i = 1 to 72 do
8350: LD_ADDR_VAR 0 5
8354: PUSH
8355: DOUBLE
8356: LD_INT 1
8358: DEC
8359: ST_TO_ADDR
8360: LD_INT 72
8362: PUSH
8363: FOR_TO
8364: IFFALSE 8422
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
8366: LD_VAR 0 5
8370: PPUSH
8371: LD_VAR 0 1
8375: PPUSH
8376: CALL_OW 321
8380: PUSH
8381: LD_INT 1
8383: EQUAL
8384: PUSH
8385: LD_VAR 0 5
8389: PPUSH
8390: LD_VAR 0 3
8394: PPUSH
8395: CALL_OW 482
8399: PUSH
8400: LD_INT 1
8402: EQUAL
8403: AND
8404: IFFALSE 8420
// AddComResearch ( lab , i ) ;
8406: LD_VAR 0 2
8410: PPUSH
8411: LD_VAR 0 5
8415: PPUSH
8416: CALL_OW 184
8420: GO 8363
8422: POP
8423: POP
// end ;
8424: LD_VAR 0 4
8428: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8429: LD_INT 0
8431: PPUSH
8432: PPUSH
8433: PPUSH
8434: PPUSH
8435: PPUSH
8436: PPUSH
// engineerOkInside = UnitFilter ( UnitsInside ( building ) , [ f_class , 2 ] ) ;
8437: LD_ADDR_VAR 0 7
8441: PUSH
8442: LD_VAR 0 2
8446: PPUSH
8447: CALL_OW 313
8451: PPUSH
8452: LD_INT 25
8454: PUSH
8455: LD_INT 2
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PPUSH
8462: CALL_OW 72
8466: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) diff [ Kozlov ] ;
8467: LD_ADDR_VAR 0 8
8471: PUSH
8472: LD_VAR 0 3
8476: PPUSH
8477: LD_INT 22
8479: PUSH
8480: LD_VAR 0 1
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: LD_INT 25
8491: PUSH
8492: LD_INT 2
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PUSH
8499: LD_INT 24
8501: PUSH
8502: LD_INT 750
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: PUSH
8509: LD_INT 3
8511: PUSH
8512: LD_INT 54
8514: PUSH
8515: EMPTY
8516: LIST
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: PPUSH
8528: CALL_OW 70
8532: PUSH
8533: LD_EXP 33
8537: PUSH
8538: EMPTY
8539: LIST
8540: DIFF
8541: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8542: LD_ADDR_VAR 0 5
8546: PUSH
8547: LD_VAR 0 3
8551: PPUSH
8552: LD_INT 22
8554: PUSH
8555: LD_VAR 0 1
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PUSH
8564: LD_INT 21
8566: PUSH
8567: LD_INT 3
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: PUSH
8574: LD_INT 3
8576: PUSH
8577: LD_INT 24
8579: PUSH
8580: LD_INT 1000
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: LIST
8595: PUSH
8596: EMPTY
8597: LIST
8598: PPUSH
8599: CALL_OW 70
8603: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8604: LD_VAR 0 5
8608: NOT
8609: PUSH
8610: LD_INT 22
8612: PUSH
8613: LD_VAR 0 1
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PUSH
8622: LD_INT 25
8624: PUSH
8625: LD_INT 2
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: LD_INT 24
8634: PUSH
8635: LD_INT 250
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: LIST
8646: PPUSH
8647: CALL_OW 69
8651: NOT
8652: AND
8653: IFFALSE 8657
// exit ;
8655: GO 8769
// if buildings_list > 0 and engineerOkInside then
8657: LD_VAR 0 5
8661: PUSH
8662: LD_INT 0
8664: GREATER
8665: PUSH
8666: LD_VAR 0 7
8670: AND
8671: IFFALSE 8697
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
8673: LD_VAR 0 7
8677: PPUSH
8678: LD_INT 25
8680: PUSH
8681: LD_INT 2
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PPUSH
8688: CALL_OW 72
8692: PPUSH
8693: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8697: LD_VAR 0 5
8701: PUSH
8702: LD_INT 0
8704: GREATER
8705: PUSH
8706: LD_VAR 0 8
8710: PUSH
8711: LD_INT 0
8713: GREATER
8714: AND
8715: IFFALSE 8735
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8717: LD_VAR 0 8
8721: PPUSH
8722: LD_VAR 0 5
8726: PUSH
8727: LD_INT 1
8729: ARRAY
8730: PPUSH
8731: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
8735: LD_VAR 0 5
8739: PUSH
8740: LD_INT 0
8742: EQUAL
8743: PUSH
8744: LD_VAR 0 8
8748: PUSH
8749: LD_INT 0
8751: GREATER
8752: AND
8753: IFFALSE 8769
// ComEnterUnit ( engineerOkOutside , building ) ;
8755: LD_VAR 0 8
8759: PPUSH
8760: LD_VAR 0 2
8764: PPUSH
8765: CALL_OW 120
// end ;
8769: LD_VAR 0 4
8773: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8774: LD_INT 0
8776: PPUSH
8777: PPUSH
8778: PPUSH
8779: PPUSH
8780: PPUSH
8781: PPUSH
8782: PPUSH
8783: PPUSH
8784: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) diff [ Kozlov ] ;
8785: LD_ADDR_VAR 0 6
8789: PUSH
8790: LD_INT 22
8792: PUSH
8793: LD_VAR 0 1
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: LD_INT 25
8804: PUSH
8805: LD_INT 4
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 23
8814: PUSH
8815: LD_INT 2
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: LD_INT 24
8824: PUSH
8825: LD_INT 251
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: PPUSH
8838: CALL_OW 69
8842: PUSH
8843: LD_EXP 33
8847: PUSH
8848: EMPTY
8849: LIST
8850: DIFF
8851: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ Kozlov ] ;
8852: LD_ADDR_VAR 0 7
8856: PUSH
8857: LD_VAR 0 3
8861: PPUSH
8862: LD_INT 22
8864: PUSH
8865: LD_VAR 0 1
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PUSH
8874: LD_INT 23
8876: PUSH
8877: LD_INT 2
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: PUSH
8884: LD_INT 25
8886: PUSH
8887: LD_INT 4
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: LD_INT 50
8896: PUSH
8897: EMPTY
8898: LIST
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: PPUSH
8906: CALL_OW 70
8910: PUSH
8911: LD_EXP 33
8915: PUSH
8916: EMPTY
8917: LIST
8918: DIFF
8919: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8920: LD_ADDR_VAR 0 10
8924: PUSH
8925: LD_VAR 0 3
8929: PPUSH
8930: LD_INT 22
8932: PUSH
8933: LD_VAR 0 1
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PUSH
8942: LD_INT 21
8944: PUSH
8945: LD_INT 1
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: PUSH
8952: LD_INT 3
8954: PUSH
8955: LD_INT 25
8957: PUSH
8958: LD_INT 3
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_INT 3
8971: PUSH
8972: LD_INT 24
8974: PUSH
8975: LD_INT 750
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: PPUSH
8992: CALL_OW 70
8996: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8997: LD_ADDR_VAR 0 11
9001: PUSH
9002: LD_VAR 0 2
9006: PPUSH
9007: LD_INT 22
9009: PUSH
9010: LD_VAR 0 1
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: LD_INT 21
9021: PUSH
9022: LD_INT 1
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 3
9031: PUSH
9032: LD_INT 25
9034: PUSH
9035: LD_INT 3
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: LD_INT 3
9048: PUSH
9049: LD_INT 24
9051: PUSH
9052: LD_INT 1000
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: PPUSH
9069: CALL_OW 70
9073: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
9074: LD_VAR 0 10
9078: NOT
9079: PUSH
9080: LD_VAR 0 11
9084: NOT
9085: AND
9086: PUSH
9087: LD_VAR 0 6
9091: NOT
9092: AND
9093: IFFALSE 9097
// exit ;
9095: GO 9331
// if damageUnits > 0 and sci_list > 0 then
9097: LD_VAR 0 10
9101: PUSH
9102: LD_INT 0
9104: GREATER
9105: PUSH
9106: LD_VAR 0 6
9110: PUSH
9111: LD_INT 0
9113: GREATER
9114: AND
9115: IFFALSE 9131
// ComMoveToArea ( damageUnits , healArea ) ;
9117: LD_VAR 0 10
9121: PPUSH
9122: LD_VAR 0 2
9126: PPUSH
9127: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
9131: LD_VAR 0 11
9135: PUSH
9136: LD_INT 0
9138: GREATER
9139: PUSH
9140: LD_VAR 0 6
9144: PUSH
9145: LD_INT 0
9147: GREATER
9148: AND
9149: IFFALSE 9160
// ComExitBuilding ( sci_list ) ;
9151: LD_VAR 0 6
9155: PPUSH
9156: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
9160: LD_VAR 0 11
9164: PUSH
9165: LD_INT 0
9167: GREATER
9168: PUSH
9169: LD_VAR 0 7
9173: PUSH
9174: LD_INT 0
9176: GREATER
9177: AND
9178: IFFALSE 9198
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9180: LD_VAR 0 7
9184: PPUSH
9185: LD_VAR 0 11
9189: PUSH
9190: LD_INT 1
9192: ARRAY
9193: PPUSH
9194: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
9198: LD_VAR 0 10
9202: PUSH
9203: LD_INT 0
9205: EQUAL
9206: PUSH
9207: LD_VAR 0 11
9211: PUSH
9212: LD_INT 0
9214: EQUAL
9215: AND
9216: PUSH
9217: LD_VAR 0 7
9221: PUSH
9222: LD_INT 0
9224: GREATER
9225: AND
9226: IFFALSE 9331
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9228: LD_ADDR_VAR 0 12
9232: PUSH
9233: LD_INT 22
9235: PUSH
9236: LD_VAR 0 1
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: LD_INT 21
9247: PUSH
9248: LD_INT 3
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_INT 30
9257: PUSH
9258: LD_INT 8
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: LIST
9269: PPUSH
9270: CALL_OW 69
9274: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
9275: LD_ADDR_VAR 0 13
9279: PUSH
9280: LD_INT 1
9282: PPUSH
9283: LD_VAR 0 12
9287: PPUSH
9288: CALL_OW 12
9292: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9293: LD_VAR 0 7
9297: PPUSH
9298: LD_INT 3
9300: PUSH
9301: LD_INT 60
9303: PUSH
9304: EMPTY
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PPUSH
9311: CALL_OW 72
9315: PPUSH
9316: LD_VAR 0 12
9320: PUSH
9321: LD_VAR 0 13
9325: ARRAY
9326: PPUSH
9327: CALL_OW 120
// end ; end ;
9331: LD_VAR 0 5
9335: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
9336: LD_INT 0
9338: PPUSH
9339: PPUSH
9340: PPUSH
9341: PPUSH
// tmpTab = [ ] ;
9342: LD_ADDR_VAR 0 6
9346: PUSH
9347: EMPTY
9348: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9349: LD_INT 22
9351: PUSH
9352: LD_VAR 0 1
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: PUSH
9361: LD_INT 30
9363: PUSH
9364: LD_INT 32
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PPUSH
9375: CALL_OW 69
9379: PUSH
9380: LD_INT 0
9382: GREATER
9383: IFFALSE 9466
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9385: LD_ADDR_VAR 0 4
9389: PUSH
9390: LD_INT 22
9392: PUSH
9393: LD_VAR 0 1
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 30
9404: PUSH
9405: LD_INT 32
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PPUSH
9416: CALL_OW 69
9420: PUSH
9421: FOR_IN
9422: IFFALSE 9464
// begin for j in UnitsInside ( i ) do
9424: LD_ADDR_VAR 0 5
9428: PUSH
9429: LD_VAR 0 4
9433: PPUSH
9434: CALL_OW 313
9438: PUSH
9439: FOR_IN
9440: IFFALSE 9460
// tmpTab = tmpTab ^ j ;
9442: LD_ADDR_VAR 0 6
9446: PUSH
9447: LD_VAR 0 6
9451: PUSH
9452: LD_VAR 0 5
9456: ADD
9457: ST_TO_ADDR
9458: GO 9439
9460: POP
9461: POP
// end ;
9462: GO 9421
9464: POP
9465: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9466: LD_VAR 0 6
9470: PPUSH
9471: LD_VAR 0 2
9475: PPUSH
9476: CALL_OW 250
9480: PPUSH
9481: LD_VAR 0 2
9485: PPUSH
9486: CALL_OW 251
9490: PPUSH
9491: CALL_OW 114
// end ;
9495: LD_VAR 0 3
9499: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9500: LD_INT 0
9502: PPUSH
9503: PPUSH
9504: PPUSH
9505: PPUSH
9506: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9507: LD_ADDR_VAR 0 6
9511: PUSH
9512: LD_INT 22
9514: PUSH
9515: LD_VAR 0 1
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: PUSH
9524: LD_INT 2
9526: PUSH
9527: LD_INT 30
9529: PUSH
9530: LD_INT 31
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 30
9539: PUSH
9540: LD_INT 32
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 30
9549: PUSH
9550: LD_INT 33
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 30
9559: PUSH
9560: LD_INT 4
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 30
9569: PUSH
9570: LD_INT 5
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 69
9593: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9594: LD_ADDR_VAR 0 7
9598: PUSH
9599: LD_INT 22
9601: PUSH
9602: LD_VAR 0 2
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 21
9613: PUSH
9614: LD_INT 3
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: LD_INT 58
9623: PUSH
9624: EMPTY
9625: LIST
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: LIST
9631: PPUSH
9632: CALL_OW 69
9636: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9637: LD_VAR 0 6
9641: PUSH
9642: LD_INT 0
9644: GREATER
9645: PUSH
9646: LD_VAR 0 7
9650: PUSH
9651: LD_INT 0
9653: GREATER
9654: AND
9655: IFFALSE 9725
// begin for i in turretsList do
9657: LD_ADDR_VAR 0 4
9661: PUSH
9662: LD_VAR 0 6
9666: PUSH
9667: FOR_IN
9668: IFFALSE 9723
// begin for j in enemyBuildings do
9670: LD_ADDR_VAR 0 5
9674: PUSH
9675: LD_VAR 0 7
9679: PUSH
9680: FOR_IN
9681: IFFALSE 9719
// begin if GetDistUnits ( i , j ) < 20 then
9683: LD_VAR 0 4
9687: PPUSH
9688: LD_VAR 0 5
9692: PPUSH
9693: CALL_OW 296
9697: PUSH
9698: LD_INT 20
9700: LESS
9701: IFFALSE 9717
// begin ComAttackUnit ( i , j ) ;
9703: LD_VAR 0 4
9707: PPUSH
9708: LD_VAR 0 5
9712: PPUSH
9713: CALL_OW 115
// end ; end ;
9717: GO 9680
9719: POP
9720: POP
// end ;
9721: GO 9667
9723: POP
9724: POP
// end ; end ;
9725: LD_VAR 0 3
9729: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
9730: LD_INT 0
9732: PPUSH
9733: PPUSH
// for i = 1 to vehCount do
9734: LD_ADDR_VAR 0 9
9738: PUSH
9739: DOUBLE
9740: LD_INT 1
9742: DEC
9743: ST_TO_ADDR
9744: LD_VAR 0 3
9748: PUSH
9749: FOR_TO
9750: IFFALSE 9797
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
9752: LD_VAR 0 2
9756: PPUSH
9757: LD_VAR 0 7
9761: PPUSH
9762: LD_VAR 0 5
9766: PPUSH
9767: LD_VAR 0 6
9771: PPUSH
9772: LD_VAR 0 4
9776: PUSH
9777: LD_INT 1
9779: PPUSH
9780: LD_VAR 0 4
9784: PPUSH
9785: CALL_OW 12
9789: ARRAY
9790: PPUSH
9791: CALL_OW 185
9795: GO 9749
9797: POP
9798: POP
// end ;
9799: LD_VAR 0 8
9803: RET
// export function AttackVehicles ( enemySide , vehTab ) ; var i , j , vehiclesOK , target1 , target2 ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
9808: PPUSH
9809: PPUSH
9810: PPUSH
9811: PPUSH
// repeat wait ( 0 0$1 ) ;
9812: LD_INT 35
9814: PPUSH
9815: CALL_OW 67
// for j in vehTab do
9819: LD_ADDR_VAR 0 5
9823: PUSH
9824: LD_VAR 0 2
9828: PUSH
9829: FOR_IN
9830: IFFALSE 9988
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
9832: LD_ADDR_VAR 0 7
9836: PUSH
9837: LD_INT 22
9839: PUSH
9840: LD_VAR 0 1
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: PPUSH
9849: CALL_OW 69
9853: PPUSH
9854: LD_VAR 0 5
9858: PPUSH
9859: CALL_OW 74
9863: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
9864: LD_ADDR_VAR 0 8
9868: PUSH
9869: LD_INT 22
9871: PUSH
9872: LD_VAR 0 1
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PUSH
9881: LD_INT 30
9883: PUSH
9884: LD_INT 32
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: PUSH
9891: LD_INT 59
9893: PUSH
9894: EMPTY
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: PPUSH
9905: CALL_OW 69
9909: PPUSH
9910: LD_VAR 0 5
9914: PPUSH
9915: CALL_OW 74
9919: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9920: LD_VAR 0 5
9924: PPUSH
9925: LD_VAR 0 7
9929: PPUSH
9930: CALL_OW 296
9934: PUSH
9935: LD_INT 8
9937: PLUS
9938: PUSH
9939: LD_VAR 0 5
9943: PPUSH
9944: LD_VAR 0 8
9948: PPUSH
9949: CALL_OW 296
9953: LESS
9954: IFFALSE 9972
// ComAttackUnit ( j , target1 ) else
9956: LD_VAR 0 5
9960: PPUSH
9961: LD_VAR 0 7
9965: PPUSH
9966: CALL_OW 115
9970: GO 9986
// ComAttackUnit ( j , target2 ) ;
9972: LD_VAR 0 5
9976: PPUSH
9977: LD_VAR 0 8
9981: PPUSH
9982: CALL_OW 115
// end ;
9986: GO 9829
9988: POP
9989: POP
// until vehTab = 0 ;
9990: LD_VAR 0 2
9994: PUSH
9995: LD_INT 0
9997: EQUAL
9998: IFFALSE 9812
// end ;
10000: LD_VAR 0 3
10004: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
10005: LD_INT 0
10007: PPUSH
10008: PPUSH
10009: PPUSH
10010: PPUSH
10011: PPUSH
10012: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
10013: LD_ADDR_VAR 0 6
10017: PUSH
10018: LD_INT 22
10020: PUSH
10021: LD_VAR 0 1
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 25
10032: PUSH
10033: LD_INT 9
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PPUSH
10044: CALL_OW 69
10048: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10049: LD_ADDR_VAR 0 7
10053: PUSH
10054: LD_INT 81
10056: PUSH
10057: LD_VAR 0 1
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 3
10068: PUSH
10069: LD_INT 21
10071: PUSH
10072: LD_INT 3
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PPUSH
10087: CALL_OW 69
10091: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
10092: LD_ADDR_VAR 0 4
10096: PUSH
10097: LD_INT 1
10099: PPUSH
10100: LD_INT 3
10102: PPUSH
10103: CALL_OW 12
10107: ST_TO_ADDR
// for i = 1 to list do
10108: LD_ADDR_VAR 0 5
10112: PUSH
10113: DOUBLE
10114: LD_INT 1
10116: DEC
10117: ST_TO_ADDR
10118: LD_VAR 0 6
10122: PUSH
10123: FOR_TO
10124: IFFALSE 10326
// for ta in filter do
10126: LD_ADDR_VAR 0 3
10130: PUSH
10131: LD_VAR 0 7
10135: PUSH
10136: FOR_IN
10137: IFFALSE 10322
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
10139: LD_VAR 0 6
10143: PUSH
10144: LD_VAR 0 5
10148: ARRAY
10149: PPUSH
10150: LD_VAR 0 3
10154: PPUSH
10155: CALL_OW 296
10159: PUSH
10160: LD_INT 15
10162: LESSEQUAL
10163: IFFALSE 10320
// begin case c of 1 :
10165: LD_VAR 0 4
10169: PUSH
10170: LD_INT 1
10172: DOUBLE
10173: EQUAL
10174: IFTRUE 10178
10176: GO 10216
10178: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
10179: LD_VAR 0 6
10183: PUSH
10184: LD_VAR 0 5
10188: ARRAY
10189: PPUSH
10190: LD_VAR 0 3
10194: PPUSH
10195: CALL_OW 250
10199: PPUSH
10200: LD_VAR 0 3
10204: PPUSH
10205: CALL_OW 251
10209: PPUSH
10210: CALL_OW 154
10214: GO 10320
10216: LD_INT 2
10218: DOUBLE
10219: EQUAL
10220: IFTRUE 10224
10222: GO 10288
10224: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
10225: LD_VAR 0 6
10229: PUSH
10230: LD_VAR 0 5
10234: ARRAY
10235: PPUSH
10236: LD_VAR 0 3
10240: PPUSH
10241: CALL_OW 250
10245: PUSH
10246: LD_INT 1
10248: NEG
10249: PPUSH
10250: LD_INT 1
10252: PPUSH
10253: CALL_OW 12
10257: PLUS
10258: PPUSH
10259: LD_VAR 0 3
10263: PPUSH
10264: CALL_OW 251
10268: PUSH
10269: LD_INT 1
10271: NEG
10272: PPUSH
10273: LD_INT 1
10275: PPUSH
10276: CALL_OW 12
10280: PLUS
10281: PPUSH
10282: CALL_OW 153
10286: GO 10320
10288: LD_INT 3
10290: DOUBLE
10291: EQUAL
10292: IFTRUE 10296
10294: GO 10319
10296: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
10297: LD_VAR 0 6
10301: PUSH
10302: LD_VAR 0 5
10306: ARRAY
10307: PPUSH
10308: LD_VAR 0 3
10312: PPUSH
10313: CALL_OW 115
10317: GO 10320
10319: POP
// end ; end ;
10320: GO 10136
10322: POP
10323: POP
10324: GO 10123
10326: POP
10327: POP
// end ; end_of_file
10328: LD_VAR 0 2
10332: RET
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
10333: LD_VAR 0 1
10337: PUSH
10338: LD_INT 235
10340: EQUAL
10341: PUSH
10342: LD_VAR 0 2
10346: PPUSH
10347: CALL_OW 255
10351: PUSH
10352: LD_INT 4
10354: EQUAL
10355: AND
10356: IFFALSE 10404
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
10358: LD_INT 235
10360: PPUSH
10361: LD_INT 84
10363: PPUSH
10364: LD_INT 1
10366: PPUSH
10367: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
10371: LD_INT 235
10373: PPUSH
10374: LD_INT 68
10376: PPUSH
10377: LD_INT 100
10379: PPUSH
10380: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
10384: LD_INT 235
10386: PPUSH
10387: CALL_OW 219
// AddComMoveXY ( PowellCargo , 41 , 61 ) ;
10391: LD_INT 235
10393: PPUSH
10394: LD_INT 41
10396: PPUSH
10397: LD_INT 61
10399: PPUSH
10400: CALL_OW 171
// end ; end ;
10404: PPOPN 2
10406: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
10407: LD_INT 0
10409: PPUSH
10410: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
10411: LD_ADDR_VAR 0 3
10415: PUSH
10416: LD_INT 22
10418: PUSH
10419: LD_INT 4
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PUSH
10426: LD_INT 21
10428: PUSH
10429: LD_INT 1
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: LD_INT 56
10438: PUSH
10439: EMPTY
10440: LIST
10441: PUSH
10442: LD_INT 3
10444: PUSH
10445: LD_INT 60
10447: PUSH
10448: EMPTY
10449: LIST
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: PPUSH
10461: CALL_OW 69
10465: PUSH
10466: LD_EXP 17
10470: PUSH
10471: EMPTY
10472: LIST
10473: DIFF
10474: ST_TO_ADDR
// if GetSide ( building ) = 4 then
10475: LD_VAR 0 1
10479: PPUSH
10480: CALL_OW 255
10484: PUSH
10485: LD_INT 4
10487: EQUAL
10488: IFFALSE 10619
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
10490: LD_INT 22
10492: PUSH
10493: LD_INT 4
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: PUSH
10500: LD_INT 30
10502: PUSH
10503: LD_INT 8
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PPUSH
10514: CALL_OW 69
10518: PUSH
10519: LD_INT 1
10521: EQUAL
10522: IFFALSE 10619
// begin for i = 1 to 3 do
10524: LD_ADDR_VAR 0 2
10528: PUSH
10529: DOUBLE
10530: LD_INT 1
10532: DEC
10533: ST_TO_ADDR
10534: LD_INT 3
10536: PUSH
10537: FOR_TO
10538: IFFALSE 10602
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
10540: LD_VAR 0 3
10544: PUSH
10545: LD_VAR 0 2
10549: ARRAY
10550: PPUSH
10551: LD_INT 3
10553: PUSH
10554: LD_INT 25
10556: PUSH
10557: LD_INT 2
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PPUSH
10568: CALL_OW 72
10572: PPUSH
10573: LD_VAR 0 1
10577: PPUSH
10578: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
10582: LD_VAR 0 3
10586: PUSH
10587: LD_VAR 0 2
10591: ARRAY
10592: PPUSH
10593: LD_INT 4
10595: PPUSH
10596: CALL_OW 183
// end ;
10600: GO 10537
10602: POP
10603: POP
// ResAllTechs ( 4 , building , 1 ) ;
10604: LD_INT 4
10606: PPUSH
10607: LD_VAR 0 1
10611: PPUSH
10612: LD_INT 1
10614: PPUSH
10615: CALL 8344 0 3
// end ; if GetSide ( building ) = 8 then
10619: LD_VAR 0 1
10623: PPUSH
10624: CALL_OW 255
10628: PUSH
10629: LD_INT 8
10631: EQUAL
10632: IFFALSE 10828
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) = 1 and GetNation ( building ) = 3 then
10634: LD_INT 22
10636: PUSH
10637: LD_INT 8
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 30
10646: PUSH
10647: LD_INT 3
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 23
10656: PUSH
10657: LD_INT 3
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: PPUSH
10669: CALL_OW 69
10673: PUSH
10674: LD_INT 1
10676: EQUAL
10677: PUSH
10678: LD_VAR 0 1
10682: PPUSH
10683: CALL_OW 248
10687: PUSH
10688: LD_INT 3
10690: EQUAL
10691: AND
10692: IFFALSE 10828
// begin ComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 3 ) ;
10694: LD_EXP 33
10698: PPUSH
10699: LD_INT 21
10701: PPUSH
10702: LD_INT 74
10704: PPUSH
10705: LD_INT 12
10707: PPUSH
10708: LD_INT 3
10710: PPUSH
10711: CALL_OW 145
// AddComEnterUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] ) ;
10715: LD_EXP 33
10719: PPUSH
10720: LD_INT 22
10722: PUSH
10723: LD_INT 4
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: LD_INT 30
10732: PUSH
10733: LD_INT 3
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: LD_INT 23
10742: PUSH
10743: LD_INT 3
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: LIST
10754: PPUSH
10755: CALL_OW 69
10759: PUSH
10760: LD_INT 1
10762: ARRAY
10763: PPUSH
10764: CALL_OW 180
// ComConstruct ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] , ru_heavy_tracked , 3 , 3 , ru_siberium_rocket ) ;
10768: LD_INT 22
10770: PUSH
10771: LD_INT 4
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 30
10780: PUSH
10781: LD_INT 3
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 23
10790: PUSH
10791: LD_INT 3
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: LIST
10802: PPUSH
10803: CALL_OW 69
10807: PUSH
10808: LD_INT 1
10810: ARRAY
10811: PPUSH
10812: LD_INT 24
10814: PPUSH
10815: LD_INT 3
10817: PPUSH
10818: LD_INT 3
10820: PPUSH
10821: LD_INT 48
10823: PPUSH
10824: CALL_OW 125
// end ; end ; end ;
10828: PPOPN 3
10830: END
// on BuildingComplete ( building ) do var powellPeople ;
10831: LD_INT 0
10833: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
10834: LD_VAR 0 1
10838: PPUSH
10839: CALL_OW 255
10843: PUSH
10844: LD_INT 4
10846: EQUAL
10847: PUSH
10848: LD_VAR 0 1
10852: PPUSH
10853: CALL_OW 266
10857: PUSH
10858: LD_INT 17
10860: EQUAL
10861: AND
10862: IFFALSE 11144
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
10864: LD_ADDR_VAR 0 2
10868: PUSH
10869: LD_INT 22
10871: PUSH
10872: LD_INT 4
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: LD_INT 21
10881: PUSH
10882: LD_INT 1
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 56
10891: PUSH
10892: EMPTY
10893: LIST
10894: PUSH
10895: LD_INT 3
10897: PUSH
10898: LD_INT 60
10900: PUSH
10901: EMPTY
10902: LIST
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: PPUSH
10914: CALL_OW 69
10918: PUSH
10919: LD_EXP 17
10923: PUSH
10924: EMPTY
10925: LIST
10926: DIFF
10927: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
10928: LD_INT 22
10930: PUSH
10931: LD_INT 4
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 21
10940: PUSH
10941: LD_INT 3
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: LD_INT 30
10950: PUSH
10951: LD_INT 32
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: LIST
10962: PPUSH
10963: CALL_OW 69
10967: PUSH
10968: LD_INT 1
10970: ARRAY
10971: PPUSH
10972: LD_INT 6
10974: PPUSH
10975: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
10979: LD_INT 22
10981: PUSH
10982: LD_INT 4
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 21
10991: PUSH
10992: LD_INT 3
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 30
11001: PUSH
11002: LD_INT 32
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: PPUSH
11014: CALL_OW 69
11018: PUSH
11019: LD_INT 2
11021: ARRAY
11022: PPUSH
11023: LD_INT 5
11025: PPUSH
11026: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
11030: LD_VAR 0 2
11034: PUSH
11035: LD_INT 1
11037: ARRAY
11038: PPUSH
11039: LD_INT 22
11041: PUSH
11042: LD_INT 4
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: LD_INT 21
11051: PUSH
11052: LD_INT 3
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PUSH
11059: LD_INT 30
11061: PUSH
11062: LD_INT 32
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: LIST
11073: PPUSH
11074: CALL_OW 69
11078: PUSH
11079: LD_INT 1
11081: ARRAY
11082: PPUSH
11083: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
11087: LD_VAR 0 2
11091: PUSH
11092: LD_INT 2
11094: ARRAY
11095: PPUSH
11096: LD_INT 22
11098: PUSH
11099: LD_INT 4
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 21
11108: PUSH
11109: LD_INT 3
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 30
11118: PUSH
11119: LD_INT 32
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: LIST
11130: PPUSH
11131: CALL_OW 69
11135: PUSH
11136: LD_INT 2
11138: ARRAY
11139: PPUSH
11140: CALL_OW 120
// end ; if GetSide ( building ) = 8 then
11144: LD_VAR 0 1
11148: PPUSH
11149: CALL_OW 255
11153: PUSH
11154: LD_INT 8
11156: EQUAL
11157: IFFALSE 11183
// begin if GetBType ( building ) = b_workshop then
11159: LD_VAR 0 1
11163: PPUSH
11164: CALL_OW 266
11168: PUSH
11169: LD_INT 2
11171: EQUAL
11172: IFFALSE 11183
// ComUpgrade ( building ) ;
11174: LD_VAR 0 1
11178: PPUSH
11179: CALL_OW 146
// end ; end ;
11183: PPOPN 2
11185: END
// on EnterBuilding ( building , human ) do begin end ;
11186: PPOPN 2
11188: END
// on BehemothConstructed ( vehicle ) do begin if GetSide ( vehicle ) = 6 then
11189: LD_VAR 0 1
11193: PPUSH
11194: CALL_OW 255
11198: PUSH
11199: LD_INT 6
11201: EQUAL
11202: IFFALSE 11220
// ruBehs = ruBehs ^ vehicle ;
11204: LD_ADDR_EXP 41
11208: PUSH
11209: LD_EXP 41
11213: PUSH
11214: LD_VAR 0 1
11218: ADD
11219: ST_TO_ADDR
// end ;
11220: PPOPN 1
11222: END
// on VehicleConstructed ( vehicle , building ) do begin if vehicle = powellVeh then
11223: LD_VAR 0 1
11227: PUSH
11228: LD_EXP 52
11232: EQUAL
11233: IFFALSE 11249
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
11235: LD_VAR 0 1
11239: PPUSH
11240: CALL_OW 313
11244: PPUSH
11245: CALL_OW 121
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
11249: LD_VAR 0 1
11253: PPUSH
11254: CALL_OW 255
11258: PUSH
11259: LD_INT 4
11261: EQUAL
11262: PUSH
11263: LD_EXP 50
11267: PUSH
11268: LD_INT 2
11270: EQUAL
11271: AND
11272: PUSH
11273: LD_VAR 0 1
11277: PPUSH
11278: CALL_OW 264
11282: PUSH
11283: LD_INT 6
11285: EQUAL
11286: AND
11287: IFFALSE 11341
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
11289: LD_EXP 47
11293: PUSH
11294: LD_INT 5
11296: ARRAY
11297: PPUSH
11298: CALL_OW 122
// wait ( 0 0$1 ) ;
11302: LD_INT 35
11304: PPUSH
11305: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
11309: LD_EXP 47
11313: PUSH
11314: LD_INT 5
11316: ARRAY
11317: PPUSH
11318: LD_INT 85
11320: PPUSH
11321: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
11325: LD_EXP 47
11329: PUSH
11330: LD_INT 5
11332: ARRAY
11333: PPUSH
11334: LD_INT 3
11336: PPUSH
11337: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
11341: LD_VAR 0 1
11345: PPUSH
11346: CALL_OW 255
11350: PUSH
11351: LD_INT 4
11353: EQUAL
11354: PUSH
11355: LD_EXP 50
11359: PUSH
11360: LD_INT 2
11362: EQUAL
11363: AND
11364: PUSH
11365: LD_VAR 0 1
11369: PPUSH
11370: CALL_OW 264
11374: PUSH
11375: LD_INT 3
11377: EQUAL
11378: AND
11379: IFFALSE 11406
// begin powellVeh = vehicle ;
11381: LD_ADDR_EXP 52
11385: PUSH
11386: LD_VAR 0 1
11390: ST_TO_ADDR
// ComMoveXY ( vehicle , 49 , 74 ) ;
11391: LD_VAR 0 1
11395: PPUSH
11396: LD_INT 49
11398: PPUSH
11399: LD_INT 74
11401: PPUSH
11402: CALL_OW 111
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 2 and GetType ( vehicle ) = unit_vehicle then
11406: LD_VAR 0 1
11410: PPUSH
11411: CALL_OW 255
11415: PUSH
11416: LD_INT 8
11418: EQUAL
11419: PUSH
11420: LD_VAR 0 1
11424: PPUSH
11425: CALL_OW 248
11429: PUSH
11430: LD_INT 2
11432: EQUAL
11433: AND
11434: PUSH
11435: LD_VAR 0 1
11439: PPUSH
11440: CALL_OW 247
11444: PUSH
11445: LD_INT 2
11447: EQUAL
11448: AND
11449: IFFALSE 11485
// begin legionVehicles = legionVehicles ^ vehicle ;
11451: LD_ADDR_EXP 37
11455: PUSH
11456: LD_EXP 37
11460: PUSH
11461: LD_VAR 0 1
11465: ADD
11466: ST_TO_ADDR
// ComLinkTo ( vehicle , arControler [ 1 ] ) ;
11467: LD_VAR 0 1
11471: PPUSH
11472: LD_EXP 38
11476: PUSH
11477: LD_INT 1
11479: ARRAY
11480: PPUSH
11481: CALL_OW 135
// end ; if GetSide ( vehicle ) = 3 and GetNation ( vehicle ) = 3 and GetType ( vehicle ) = unit_vehicle then
11485: LD_VAR 0 1
11489: PPUSH
11490: CALL_OW 255
11494: PUSH
11495: LD_INT 3
11497: EQUAL
11498: PUSH
11499: LD_VAR 0 1
11503: PPUSH
11504: CALL_OW 248
11508: PUSH
11509: LD_INT 3
11511: EQUAL
11512: AND
11513: PUSH
11514: LD_VAR 0 1
11518: PPUSH
11519: CALL_OW 247
11523: PUSH
11524: LD_INT 2
11526: EQUAL
11527: AND
11528: IFFALSE 11546
// RussianVehicles = RussianVehicles ^ vehicle ;
11530: LD_ADDR_EXP 43
11534: PUSH
11535: LD_EXP 43
11539: PUSH
11540: LD_VAR 0 1
11544: ADD
11545: ST_TO_ADDR
// if GetSide ( vehicle ) = 7 and GetType ( vehicle ) = unit_vehicle then
11546: LD_VAR 0 1
11550: PPUSH
11551: CALL_OW 255
11555: PUSH
11556: LD_INT 7
11558: EQUAL
11559: PUSH
11560: LD_VAR 0 1
11564: PPUSH
11565: CALL_OW 247
11569: PUSH
11570: LD_INT 2
11572: EQUAL
11573: AND
11574: IFFALSE 11633
// begin AllianceVehicles = AllianceVehicles ^ vehicle ;
11576: LD_ADDR_EXP 44
11580: PUSH
11581: LD_EXP 44
11585: PUSH
11586: LD_VAR 0 1
11590: ADD
11591: ST_TO_ADDR
// if GetControl ( vehicle ) = 2 then
11592: LD_VAR 0 1
11596: PPUSH
11597: CALL_OW 263
11601: PUSH
11602: LD_INT 2
11604: EQUAL
11605: IFFALSE 11633
// ComLinkTo ( vehicle , allianceControler [ rand ( 1 , 3 ) ] ) ;
11607: LD_VAR 0 1
11611: PPUSH
11612: LD_EXP 45
11616: PUSH
11617: LD_INT 1
11619: PPUSH
11620: LD_INT 3
11622: PPUSH
11623: CALL_OW 12
11627: ARRAY
11628: PPUSH
11629: CALL_OW 135
// end ; end ;
11633: PPOPN 2
11635: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
11636: LD_VAR 0 1
11640: PPUSH
11641: CALL_OW 255
11645: PUSH
11646: LD_INT 4
11648: EQUAL
11649: PUSH
11650: LD_EXP 50
11654: PUSH
11655: LD_INT 1
11657: EQUAL
11658: AND
11659: IFFALSE 11762
// begin ComEnterUnit ( human , AmFact ) ;
11661: LD_VAR 0 2
11665: PPUSH
11666: LD_INT 85
11668: PPUSH
11669: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
11673: LD_VAR 0 2
11677: PPUSH
11678: CALL_OW 258
11682: PUSH
11683: LD_INT 1
11685: EQUAL
11686: PUSH
11687: LD_EXP 74
11691: PUSH
11692: LD_INT 0
11694: EQUAL
11695: AND
11696: IFFALSE 11762
// begin blockEvent1 = 1 ;
11698: LD_ADDR_EXP 74
11702: PUSH
11703: LD_INT 1
11705: ST_TO_ADDR
// startAttacks = 1 ;
11706: LD_ADDR_EXP 51
11710: PUSH
11711: LD_INT 1
11713: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
11714: LD_VAR 0 2
11718: PPUSH
11719: LD_STRING D4a-Sol1-1
11721: PPUSH
11722: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
11726: LD_EXP 17
11730: PPUSH
11731: LD_STRING D4a-Pow-1
11733: PPUSH
11734: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
11738: LD_VAR 0 2
11742: PPUSH
11743: LD_STRING D4a-Sol1-2
11745: PPUSH
11746: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
11750: LD_EXP 17
11754: PPUSH
11755: LD_STRING D4a-Pow-2
11757: PPUSH
11758: CALL_OW 88
// end ; end ; end ;
11762: PPOPN 2
11764: END
// on UnitDestroyed ( unit ) do var i ;
11765: LD_INT 0
11767: PPUSH
// begin if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
11768: LD_VAR 0 1
11772: PPUSH
11773: CALL_OW 255
11777: PUSH
11778: LD_INT 4
11780: EQUAL
11781: PUSH
11782: LD_VAR 0 1
11786: PPUSH
11787: CALL_OW 247
11791: PUSH
11792: LD_INT 1
11794: EQUAL
11795: AND
11796: IFFALSE 11846
// begin for i in amUnitsAttack do
11798: LD_ADDR_VAR 0 2
11802: PUSH
11803: LD_EXP 47
11807: PUSH
11808: FOR_IN
11809: IFFALSE 11844
// if i = unit then
11811: LD_VAR 0 2
11815: PUSH
11816: LD_VAR 0 1
11820: EQUAL
11821: IFFALSE 11842
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
11823: LD_ADDR_EXP 47
11827: PUSH
11828: LD_EXP 47
11832: PUSH
11833: LD_VAR 0 1
11837: PUSH
11838: EMPTY
11839: LIST
11840: DIFF
11841: ST_TO_ADDR
11842: GO 11808
11844: POP
11845: POP
// end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
11846: LD_VAR 0 1
11850: PPUSH
11851: CALL_OW 255
11855: PUSH
11856: LD_INT 8
11858: EQUAL
11859: PUSH
11860: LD_VAR 0 1
11864: PPUSH
11865: CALL_OW 247
11869: PUSH
11870: LD_INT 2
11872: EQUAL
11873: AND
11874: PUSH
11875: LD_VAR 0 1
11879: PPUSH
11880: CALL_OW 248
11884: PUSH
11885: LD_INT 2
11887: EQUAL
11888: AND
11889: IFFALSE 11939
// begin for i in legionVehicles do
11891: LD_ADDR_VAR 0 2
11895: PUSH
11896: LD_EXP 37
11900: PUSH
11901: FOR_IN
11902: IFFALSE 11937
// if i = unit then
11904: LD_VAR 0 2
11908: PUSH
11909: LD_VAR 0 1
11913: EQUAL
11914: IFFALSE 11935
// legionVehicles = legionVehicles diff [ unit ] ;
11916: LD_ADDR_EXP 37
11920: PUSH
11921: LD_EXP 37
11925: PUSH
11926: LD_VAR 0 1
11930: PUSH
11931: EMPTY
11932: LIST
11933: DIFF
11934: ST_TO_ADDR
11935: GO 11901
11937: POP
11938: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
11939: LD_VAR 0 1
11943: PPUSH
11944: CALL_OW 255
11948: PUSH
11949: LD_INT 3
11951: EQUAL
11952: PUSH
11953: LD_VAR 0 1
11957: PPUSH
11958: CALL_OW 247
11962: PUSH
11963: LD_INT 2
11965: EQUAL
11966: AND
11967: IFFALSE 12017
// begin for i in RussianVehicles do
11969: LD_ADDR_VAR 0 2
11973: PUSH
11974: LD_EXP 43
11978: PUSH
11979: FOR_IN
11980: IFFALSE 12015
// if i = unit then
11982: LD_VAR 0 2
11986: PUSH
11987: LD_VAR 0 1
11991: EQUAL
11992: IFFALSE 12013
// RussianVehicles = RussianVehicles diff [ unit ] ;
11994: LD_ADDR_EXP 43
11998: PUSH
11999: LD_EXP 43
12003: PUSH
12004: LD_VAR 0 1
12008: PUSH
12009: EMPTY
12010: LIST
12011: DIFF
12012: ST_TO_ADDR
12013: GO 11979
12015: POP
12016: POP
// end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_vehicle then
12017: LD_VAR 0 1
12021: PPUSH
12022: CALL_OW 255
12026: PUSH
12027: LD_INT 7
12029: EQUAL
12030: PUSH
12031: LD_VAR 0 1
12035: PPUSH
12036: CALL_OW 247
12040: PUSH
12041: LD_INT 2
12043: EQUAL
12044: AND
12045: IFFALSE 12095
// begin for i in AllianceVehicles do
12047: LD_ADDR_VAR 0 2
12051: PUSH
12052: LD_EXP 44
12056: PUSH
12057: FOR_IN
12058: IFFALSE 12093
// if i = unit then
12060: LD_VAR 0 2
12064: PUSH
12065: LD_VAR 0 1
12069: EQUAL
12070: IFFALSE 12091
// AllianceVehicles = AllianceVehicles diff [ unit ] ;
12072: LD_ADDR_EXP 44
12076: PUSH
12077: LD_EXP 44
12081: PUSH
12082: LD_VAR 0 1
12086: PUSH
12087: EMPTY
12088: LIST
12089: DIFF
12090: ST_TO_ADDR
12091: GO 12057
12093: POP
12094: POP
// end ; end ; end_of_file
12095: PPOPN 2
12097: END
// every 3 3$0 do
12098: GO 12100
12100: DISABLE
// begin enable ;
12101: ENABLE
// LegionTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
12102: LD_ADDR_EXP 66
12106: PUSH
12107: LD_INT 1
12109: PUSH
12110: LD_INT 3
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 1
12119: PPUSH
12120: LD_INT 2
12122: PPUSH
12123: CALL_OW 12
12127: ARRAY
12128: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
12129: LD_INT 22
12131: PUSH
12132: LD_INT 8
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: LD_INT 21
12141: PUSH
12142: LD_INT 1
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 69
12157: PUSH
12158: LD_INT 1
12160: GREATER
12161: IFFALSE 12192
// RussianTarget = [ 1 , 8 ] [ Rand ( 1 , 2 ) ] else
12163: LD_ADDR_EXP 68
12167: PUSH
12168: LD_INT 1
12170: PUSH
12171: LD_INT 8
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 1
12180: PPUSH
12181: LD_INT 2
12183: PPUSH
12184: CALL_OW 12
12188: ARRAY
12189: ST_TO_ADDR
12190: GO 12200
// RussianTarget = 1 ;
12192: LD_ADDR_EXP 68
12196: PUSH
12197: LD_INT 1
12199: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
12200: LD_INT 22
12202: PUSH
12203: LD_INT 8
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 21
12212: PUSH
12213: LD_INT 1
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PPUSH
12224: CALL_OW 69
12228: PUSH
12229: LD_INT 1
12231: GREATER
12232: IFFALSE 12267
// AllianceTarget = [ 1 , 3 , 8 ] [ Rand ( 1 , 3 ) ] else
12234: LD_ADDR_EXP 67
12238: PUSH
12239: LD_INT 1
12241: PUSH
12242: LD_INT 3
12244: PUSH
12245: LD_INT 8
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: LIST
12252: PUSH
12253: LD_INT 1
12255: PPUSH
12256: LD_INT 3
12258: PPUSH
12259: CALL_OW 12
12263: ARRAY
12264: ST_TO_ADDR
12265: GO 12294
// RussianTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
12267: LD_ADDR_EXP 68
12271: PUSH
12272: LD_INT 1
12274: PUSH
12275: LD_INT 3
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 1
12284: PPUSH
12285: LD_INT 2
12287: PPUSH
12288: CALL_OW 12
12292: ARRAY
12293: ST_TO_ADDR
// end ;
12294: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople ;
12295: LD_EXP 49
12299: PUSH
12300: LD_INT 1
12302: EQUAL
12303: IFFALSE 12880
12305: GO 12307
12307: DISABLE
12308: LD_INT 0
12310: PPUSH
12311: PPUSH
// begin for i = 1 to 4 do
12312: LD_ADDR_VAR 0 1
12316: PUSH
12317: DOUBLE
12318: LD_INT 1
12320: DEC
12321: ST_TO_ADDR
12322: LD_INT 4
12324: PUSH
12325: FOR_TO
12326: IFFALSE 12366
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
12328: LD_EXP 47
12332: PUSH
12333: LD_VAR 0 1
12337: ARRAY
12338: PPUSH
12339: LD_INT 85
12341: PPUSH
12342: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
12346: LD_EXP 47
12350: PUSH
12351: LD_VAR 0 1
12355: ARRAY
12356: PPUSH
12357: LD_INT 3
12359: PPUSH
12360: CALL_OW 183
// end ;
12364: GO 12325
12366: POP
12367: POP
// wait ( 0 0$1 ) ;
12368: LD_INT 35
12370: PPUSH
12371: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
12375: LD_ADDR_VAR 0 2
12379: PUSH
12380: LD_INT 22
12382: PUSH
12383: LD_INT 4
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: LD_INT 21
12392: PUSH
12393: LD_INT 1
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: LD_INT 56
12402: PUSH
12403: EMPTY
12404: LIST
12405: PUSH
12406: LD_INT 3
12408: PUSH
12409: LD_INT 60
12411: PUSH
12412: EMPTY
12413: LIST
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: PPUSH
12425: CALL_OW 69
12429: PUSH
12430: LD_EXP 17
12434: PUSH
12435: EMPTY
12436: LIST
12437: DIFF
12438: ST_TO_ADDR
// ComEnterUnit ( powellPeople [ 1 ] , PowellCargo ) ;
12439: LD_VAR 0 2
12443: PUSH
12444: LD_INT 1
12446: ARRAY
12447: PPUSH
12448: LD_INT 235
12450: PPUSH
12451: CALL_OW 120
// SetClass ( powellPeople [ 2 ] , 2 ) ;
12455: LD_VAR 0 2
12459: PUSH
12460: LD_INT 2
12462: ARRAY
12463: PPUSH
12464: LD_INT 2
12466: PPUSH
12467: CALL_OW 336
// SetClass ( powellPeople [ 3 ] , 2 ) ;
12471: LD_VAR 0 2
12475: PUSH
12476: LD_INT 3
12478: ARRAY
12479: PPUSH
12480: LD_INT 2
12482: PPUSH
12483: CALL_OW 336
// SetResourceVisibility ( 30 , 49 , 4 ) ;
12487: LD_INT 30
12489: PPUSH
12490: LD_INT 49
12492: PPUSH
12493: LD_INT 4
12495: PPUSH
12496: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
12500: LD_INT 91
12502: PPUSH
12503: LD_INT 10
12505: PPUSH
12506: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
12510: LD_INT 91
12512: PPUSH
12513: LD_INT 11
12515: PPUSH
12516: CALL_OW 207
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_mine , 30 , 49 , 1 ) ;
12520: LD_INT 22
12522: PUSH
12523: LD_INT 4
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 25
12532: PUSH
12533: LD_INT 2
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PPUSH
12544: CALL_OW 69
12548: PPUSH
12549: LD_INT 30
12551: PPUSH
12552: LD_INT 30
12554: PPUSH
12555: LD_INT 49
12557: PPUSH
12558: LD_INT 1
12560: PPUSH
12561: CALL_OW 145
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 55 , 56 , 4 ) ;
12565: LD_INT 22
12567: PUSH
12568: LD_INT 4
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 25
12577: PUSH
12578: LD_INT 2
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PPUSH
12589: CALL_OW 69
12593: PPUSH
12594: LD_INT 32
12596: PPUSH
12597: LD_INT 55
12599: PPUSH
12600: LD_INT 56
12602: PPUSH
12603: LD_INT 4
12605: PPUSH
12606: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 63 , 71 , 4 ) ;
12610: LD_INT 22
12612: PUSH
12613: LD_INT 4
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 25
12622: PUSH
12623: LD_INT 2
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PPUSH
12634: CALL_OW 69
12638: PPUSH
12639: LD_INT 32
12641: PPUSH
12642: LD_INT 63
12644: PPUSH
12645: LD_INT 71
12647: PPUSH
12648: LD_INT 4
12650: PPUSH
12651: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_power , 40 , 72 , 4 ) ;
12655: LD_INT 22
12657: PUSH
12658: LD_INT 4
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: LD_INT 25
12667: PUSH
12668: LD_INT 2
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PPUSH
12679: CALL_OW 69
12683: PPUSH
12684: LD_INT 28
12686: PPUSH
12687: LD_INT 40
12689: PPUSH
12690: LD_INT 72
12692: PPUSH
12693: LD_INT 4
12695: PPUSH
12696: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_solar_power , 45 , 73 , 4 ) ;
12700: LD_INT 22
12702: PUSH
12703: LD_INT 4
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 25
12712: PUSH
12713: LD_INT 2
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PPUSH
12724: CALL_OW 69
12728: PPUSH
12729: LD_INT 27
12731: PPUSH
12732: LD_INT 45
12734: PPUSH
12735: LD_INT 73
12737: PPUSH
12738: LD_INT 4
12740: PPUSH
12741: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_rocket , 37 , 50 , 2 ) ;
12745: LD_INT 22
12747: PUSH
12748: LD_INT 4
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 25
12757: PUSH
12758: LD_INT 2
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PPUSH
12769: CALL_OW 69
12773: PPUSH
12774: LD_INT 18
12776: PPUSH
12777: LD_INT 37
12779: PPUSH
12780: LD_INT 50
12782: PPUSH
12783: LD_INT 2
12785: PPUSH
12786: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_gun , 41 , 51 , 3 ) ;
12790: LD_INT 22
12792: PUSH
12793: LD_INT 4
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: LD_INT 25
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PPUSH
12814: CALL_OW 69
12818: PPUSH
12819: LD_INT 17
12821: PPUSH
12822: LD_INT 41
12824: PPUSH
12825: LD_INT 51
12827: PPUSH
12828: LD_INT 3
12830: PPUSH
12831: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_siberium , 38 , 54 , 1 ) ;
12835: LD_INT 22
12837: PUSH
12838: LD_INT 4
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 25
12847: PUSH
12848: LD_INT 2
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PPUSH
12859: CALL_OW 69
12863: PPUSH
12864: LD_INT 21
12866: PPUSH
12867: LD_INT 38
12869: PPUSH
12870: LD_INT 54
12872: PPUSH
12873: LD_INT 1
12875: PPUSH
12876: CALL_OW 205
// end ;
12880: PPOPN 2
12882: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 do
12883: LD_INT 22
12885: PUSH
12886: LD_INT 4
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PUSH
12893: LD_INT 30
12895: PUSH
12896: LD_INT 8
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: PUSH
12912: LD_INT 1
12914: EQUAL
12915: IFFALSE 13065
12917: GO 12919
12919: DISABLE
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
12920: LD_INT 85
12922: PPUSH
12923: LD_INT 3
12925: PPUSH
12926: LD_INT 3
12928: PPUSH
12929: LD_INT 1
12931: PPUSH
12932: LD_INT 3
12934: PUSH
12935: LD_INT 5
12937: PUSH
12938: LD_INT 7
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 1
12948: PPUSH
12949: LD_INT 3
12951: PPUSH
12952: CALL_OW 12
12956: ARRAY
12957: PPUSH
12958: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
12962: LD_INT 85
12964: PPUSH
12965: LD_INT 3
12967: PPUSH
12968: LD_INT 3
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: LD_INT 3
12976: PUSH
12977: LD_INT 5
12979: PUSH
12980: LD_INT 7
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 1
12990: PPUSH
12991: LD_INT 3
12993: PPUSH
12994: CALL_OW 12
12998: ARRAY
12999: PPUSH
13000: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
13004: LD_INT 85
13006: PPUSH
13007: LD_INT 3
13009: PPUSH
13010: LD_INT 3
13012: PPUSH
13013: LD_INT 1
13015: PPUSH
13016: LD_INT 3
13018: PUSH
13019: LD_INT 5
13021: PUSH
13022: LD_INT 7
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 1
13032: PPUSH
13033: LD_INT 3
13035: PPUSH
13036: CALL_OW 12
13040: ARRAY
13041: PPUSH
13042: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
13046: LD_INT 85
13048: PPUSH
13049: LD_INT 5
13051: PPUSH
13052: LD_INT 3
13054: PPUSH
13055: LD_INT 1
13057: PPUSH
13058: LD_INT 6
13060: PPUSH
13061: CALL_OW 185
// end ;
13065: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) do
13066: LD_INT 235
13068: PPUSH
13069: LD_INT 10
13071: PPUSH
13072: CALL_OW 308
13076: IFFALSE 13100
13078: GO 13080
13080: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
13081: LD_INT 235
13083: PPUSH
13084: CALL_OW 313
13088: PPUSH
13089: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
13093: LD_INT 84
13095: PPUSH
13096: CALL_OW 146
// end ;
13100: END
// every 0 0$1 trigger legionAI = 1 do
13101: LD_EXP 63
13105: PUSH
13106: LD_INT 1
13108: EQUAL
13109: IFFALSE 13157
13111: GO 13113
13113: DISABLE
// begin enable ;
13114: ENABLE
// RepairBuilding ( 8 , ArDep2 , LegionBaseArea ) ;
13115: LD_INT 8
13117: PPUSH
13118: LD_INT 99
13120: PPUSH
13121: LD_INT 11
13123: PPUSH
13124: CALL 8429 0 3
// HealUnitInBase ( 8 , LegionHealArea , LegionBaseArea , [ ArLab1 ] ) ;
13128: LD_INT 8
13130: PPUSH
13131: LD_INT 20
13133: PPUSH
13134: LD_INT 11
13136: PPUSH
13137: LD_INT 252
13139: PUSH
13140: EMPTY
13141: LIST
13142: PPUSH
13143: CALL 8774 0 4
// AttackNearBuildings ( 8 , 1 ) ;
13147: LD_INT 8
13149: PPUSH
13150: LD_INT 1
13152: PPUSH
13153: CALL 9500 0 2
// end ;
13157: END
// every 3 3$0 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ ] and IsOk ( ArFact ) and GetSide ( ArFact ) = 8 do
13158: LD_EXP 63
13162: PUSH
13163: LD_INT 1
13165: EQUAL
13166: PUSH
13167: LD_EXP 73
13171: PUSH
13172: LD_INT 1
13174: GREATEREQUAL
13175: AND
13176: PUSH
13177: LD_EXP 37
13181: PUSH
13182: EMPTY
13183: EQUAL
13184: AND
13185: PUSH
13186: LD_INT 117
13188: PPUSH
13189: CALL_OW 302
13193: AND
13194: PUSH
13195: LD_INT 117
13197: PPUSH
13198: CALL_OW 255
13202: PUSH
13203: LD_INT 8
13205: EQUAL
13206: AND
13207: IFFALSE 13270
13209: GO 13211
13211: DISABLE
// begin enable ;
13212: ENABLE
// BuildingVehicle ( 8 , ArFact , [ 5 , 6 , 7 ] [ Difficulty ] , [ 27 , 28 , 25 , 29 ] , 3 , 2 , 14 ) ;
13213: LD_INT 8
13215: PPUSH
13216: LD_INT 117
13218: PPUSH
13219: LD_INT 5
13221: PUSH
13222: LD_INT 6
13224: PUSH
13225: LD_INT 7
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: PUSH
13233: LD_OWVAR 67
13237: ARRAY
13238: PPUSH
13239: LD_INT 27
13241: PUSH
13242: LD_INT 28
13244: PUSH
13245: LD_INT 25
13247: PUSH
13248: LD_INT 29
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: PPUSH
13257: LD_INT 3
13259: PPUSH
13260: LD_INT 2
13262: PPUSH
13263: LD_INT 14
13265: PPUSH
13266: CALL 9730 0 7
// end ;
13270: END
// every 0 0$1 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ 5 , 6 , 7 ] [ Difficulty ] do
13271: LD_EXP 63
13275: PUSH
13276: LD_INT 1
13278: EQUAL
13279: PUSH
13280: LD_EXP 73
13284: PUSH
13285: LD_INT 1
13287: GREATEREQUAL
13288: AND
13289: PUSH
13290: LD_EXP 37
13294: PUSH
13295: LD_INT 5
13297: PUSH
13298: LD_INT 6
13300: PUSH
13301: LD_INT 7
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: LIST
13308: PUSH
13309: LD_OWVAR 67
13313: ARRAY
13314: EQUAL
13315: AND
13316: IFFALSE 13336
13318: GO 13320
13320: DISABLE
// begin enable ;
13321: ENABLE
// AttackVehicles ( LegionTarget , LegionVehicles ) ;
13322: LD_EXP 66
13326: PPUSH
13327: LD_EXP 37
13331: PPUSH
13332: CALL 9804 0 2
// end ;
13336: END
// every 0 0$1 trigger RussianAI = 1 do
13337: LD_EXP 65
13341: PUSH
13342: LD_INT 1
13344: EQUAL
13345: IFFALSE 13397
13347: GO 13349
13349: DISABLE
// begin enable ;
13350: ENABLE
// RepairBuilding ( 3 , RuDep1 , RussianBaseArea ) ;
13351: LD_INT 3
13353: PPUSH
13354: LD_INT 26
13356: PPUSH
13357: LD_INT 21
13359: PPUSH
13360: CALL 8429 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBaseArea , [ RusLab1 , RusLab2 ] ) ;
13364: LD_INT 3
13366: PPUSH
13367: LD_INT 22
13369: PPUSH
13370: LD_INT 21
13372: PPUSH
13373: LD_INT 2
13375: PUSH
13376: LD_INT 1
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PPUSH
13383: CALL 8774 0 4
// AttackNearBuildings ( 3 , 1 ) ;
13387: LD_INT 3
13389: PPUSH
13390: LD_INT 1
13392: PPUSH
13393: CALL 9500 0 2
// end ;
13397: END
// every 3 3$0 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ ] and IsOk ( RusFact2 ) and GetSide ( RusFact2 ) = 3 and IsOk ( RusFact1 ) and GetSide ( RusFact1 ) = 3 do
13398: LD_EXP 65
13402: PUSH
13403: LD_INT 1
13405: EQUAL
13406: PUSH
13407: LD_EXP 73
13411: PUSH
13412: LD_INT 3
13414: GREATEREQUAL
13415: AND
13416: PUSH
13417: LD_EXP 43
13421: PUSH
13422: EMPTY
13423: EQUAL
13424: AND
13425: PUSH
13426: LD_INT 10
13428: PPUSH
13429: CALL_OW 302
13433: AND
13434: PUSH
13435: LD_INT 10
13437: PPUSH
13438: CALL_OW 255
13442: PUSH
13443: LD_INT 3
13445: EQUAL
13446: AND
13447: PUSH
13448: LD_INT 4
13450: PPUSH
13451: CALL_OW 302
13455: AND
13456: PUSH
13457: LD_INT 4
13459: PPUSH
13460: CALL_OW 255
13464: PUSH
13465: LD_INT 3
13467: EQUAL
13468: AND
13469: IFFALSE 13589
13471: GO 13473
13473: DISABLE
// begin enable ;
13474: ENABLE
// BuildingVehicle ( 3 , RusFact1 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
13475: LD_INT 3
13477: PPUSH
13478: LD_INT 4
13480: PPUSH
13481: LD_INT 3
13483: PUSH
13484: LD_INT 4
13486: PUSH
13487: LD_INT 5
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: LIST
13494: PUSH
13495: LD_OWVAR 67
13499: ARRAY
13500: PPUSH
13501: LD_INT 45
13503: PUSH
13504: LD_INT 46
13506: PUSH
13507: LD_INT 47
13509: PUSH
13510: LD_INT 49
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: PPUSH
13519: LD_INT 3
13521: PPUSH
13522: LD_INT 3
13524: PPUSH
13525: LD_INT 24
13527: PPUSH
13528: CALL 9730 0 7
// BuildingVehicle ( 3 , RusFact2 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
13532: LD_INT 3
13534: PPUSH
13535: LD_INT 10
13537: PPUSH
13538: LD_INT 3
13540: PUSH
13541: LD_INT 4
13543: PUSH
13544: LD_INT 5
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: LIST
13551: PUSH
13552: LD_OWVAR 67
13556: ARRAY
13557: PPUSH
13558: LD_INT 45
13560: PUSH
13561: LD_INT 46
13563: PUSH
13564: LD_INT 47
13566: PUSH
13567: LD_INT 49
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: PPUSH
13576: LD_INT 3
13578: PPUSH
13579: LD_INT 3
13581: PPUSH
13582: LD_INT 24
13584: PPUSH
13585: CALL 9730 0 7
// end ;
13589: END
// every 0 0$1 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ 6 , 8 , 10 ] [ Difficulty ] do
13590: LD_EXP 65
13594: PUSH
13595: LD_INT 1
13597: EQUAL
13598: PUSH
13599: LD_EXP 73
13603: PUSH
13604: LD_INT 3
13606: GREATEREQUAL
13607: AND
13608: PUSH
13609: LD_EXP 43
13613: PUSH
13614: LD_INT 6
13616: PUSH
13617: LD_INT 8
13619: PUSH
13620: LD_INT 10
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: PUSH
13628: LD_OWVAR 67
13632: ARRAY
13633: EQUAL
13634: AND
13635: IFFALSE 13775
13637: GO 13639
13639: DISABLE
// begin enable ;
13640: ENABLE
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_hastask ] ] ] ) , [ rutp1 , rutp2 ] [ Rand ( 1 , 2 ) ] ) ;
13641: LD_INT 22
13643: PUSH
13644: LD_INT 3
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: PUSH
13651: LD_INT 21
13653: PUSH
13654: LD_INT 2
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 3
13663: PUSH
13664: LD_INT 60
13666: PUSH
13667: EMPTY
13668: LIST
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: PPUSH
13679: CALL_OW 69
13683: PPUSH
13684: LD_INT 24
13686: PUSH
13687: LD_INT 25
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: LD_INT 1
13696: PPUSH
13697: LD_INT 2
13699: PPUSH
13700: CALL_OW 12
13704: ARRAY
13705: PPUSH
13706: CALL_OW 120
// wait ( 1 1$0 ) ;
13710: LD_INT 2100
13712: PPUSH
13713: CALL_OW 67
// AttackVehicles ( RussianTarget , UnitFilter ( RussianVehicles , [ f_or , [ f_weapon , 45 ] , [ f_weapon , 46 ] , [ f_weapon , 47 ] ] ) ) ;
13717: LD_EXP 68
13721: PPUSH
13722: LD_EXP 43
13726: PPUSH
13727: LD_INT 2
13729: PUSH
13730: LD_INT 34
13732: PUSH
13733: LD_INT 45
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: LD_INT 34
13742: PUSH
13743: LD_INT 46
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 34
13752: PUSH
13753: LD_INT 47
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: PPUSH
13766: CALL_OW 72
13770: PPUSH
13771: CALL 9804 0 2
// end ;
13775: END
// every 0 0$1 trigger AllianceAI = 1 do
13776: LD_EXP 64
13780: PUSH
13781: LD_INT 1
13783: EQUAL
13784: IFFALSE 13840
13786: GO 13788
13788: DISABLE
// begin enable ;
13789: ENABLE
// RepairBuilding ( 8 , AllDep , AllianceBaseArea ) ;
13790: LD_INT 8
13792: PPUSH
13793: LD_INT 45
13795: PPUSH
13796: LD_INT 23
13798: PPUSH
13799: CALL 8429 0 3
// HealUnitInBase ( 8 , AllianceHealArea , AllianceBaseArea , [ AllLabA , AllLabR1 , AllLabR2 ] ) ;
13803: LD_INT 8
13805: PPUSH
13806: LD_INT 24
13808: PPUSH
13809: LD_INT 23
13811: PPUSH
13812: LD_INT 46
13814: PUSH
13815: LD_INT 39
13817: PUSH
13818: LD_INT 133
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: LIST
13825: PPUSH
13826: CALL 8774 0 4
// AttackNearBuildings ( 8 , 1 ) ;
13830: LD_INT 8
13832: PPUSH
13833: LD_INT 1
13835: PPUSH
13836: CALL 9500 0 2
// end ;
13840: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ ] and IsOk ( Allfab1 ) and GetSide ( Allfab1 ) = 7 and IsOk ( Allfab2 ) and GetSide ( Allfab2 ) = 7 do
13841: LD_EXP 64
13845: PUSH
13846: LD_INT 1
13848: EQUAL
13849: PUSH
13850: LD_EXP 73
13854: PUSH
13855: LD_INT 4
13857: GREATEREQUAL
13858: AND
13859: PUSH
13860: LD_EXP 44
13864: PUSH
13865: EMPTY
13866: EQUAL
13867: AND
13868: PUSH
13869: LD_INT 156
13871: PPUSH
13872: CALL_OW 302
13876: AND
13877: PUSH
13878: LD_INT 156
13880: PPUSH
13881: CALL_OW 255
13885: PUSH
13886: LD_INT 7
13888: EQUAL
13889: AND
13890: PUSH
13891: LD_INT 162
13893: PPUSH
13894: CALL_OW 302
13898: AND
13899: PUSH
13900: LD_INT 162
13902: PPUSH
13903: CALL_OW 255
13907: PUSH
13908: LD_INT 7
13910: EQUAL
13911: AND
13912: IFFALSE 14028
13914: GO 13916
13916: DISABLE
// begin enable ;
13917: ENABLE
// BuildingVehicle ( 3 , Allfab1 , [ 3 , 3 , 4 ] [ Difficulty ] , [ 9 , 10 , 7 ] , 3 , 2 , 5 ) ;
13918: LD_INT 3
13920: PPUSH
13921: LD_INT 156
13923: PPUSH
13924: LD_INT 3
13926: PUSH
13927: LD_INT 3
13929: PUSH
13930: LD_INT 4
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: PUSH
13938: LD_OWVAR 67
13942: ARRAY
13943: PPUSH
13944: LD_INT 9
13946: PUSH
13947: LD_INT 10
13949: PUSH
13950: LD_INT 7
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: LIST
13957: PPUSH
13958: LD_INT 3
13960: PPUSH
13961: LD_INT 2
13963: PPUSH
13964: LD_INT 5
13966: PPUSH
13967: CALL 9730 0 7
// BuildingVehicle ( 3 , Allfab2 , [ 2 , 2 , 3 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
13971: LD_INT 3
13973: PPUSH
13974: LD_INT 162
13976: PPUSH
13977: LD_INT 2
13979: PUSH
13980: LD_INT 2
13982: PUSH
13983: LD_INT 3
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: PUSH
13991: LD_OWVAR 67
13995: ARRAY
13996: PPUSH
13997: LD_INT 45
13999: PUSH
14000: LD_INT 46
14002: PUSH
14003: LD_INT 47
14005: PUSH
14006: LD_INT 49
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: PPUSH
14015: LD_INT 3
14017: PPUSH
14018: LD_INT 3
14020: PPUSH
14021: LD_INT 24
14023: PPUSH
14024: CALL 9730 0 7
// end ;
14028: END
// every 0 0$1 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ 5 , 5 , 7 ] [ Difficulty ] do var i ;
14029: LD_EXP 64
14033: PUSH
14034: LD_INT 1
14036: EQUAL
14037: PUSH
14038: LD_EXP 73
14042: PUSH
14043: LD_INT 4
14045: GREATEREQUAL
14046: AND
14047: PUSH
14048: LD_EXP 44
14052: PUSH
14053: LD_INT 5
14055: PUSH
14056: LD_INT 5
14058: PUSH
14059: LD_INT 7
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: LIST
14066: PUSH
14067: LD_OWVAR 67
14071: ARRAY
14072: EQUAL
14073: AND
14074: IFFALSE 14135
14076: GO 14078
14078: DISABLE
14079: LD_INT 0
14081: PPUSH
// begin for i in AllianceVehicles do
14082: LD_ADDR_VAR 0 1
14086: PUSH
14087: LD_EXP 44
14091: PUSH
14092: FOR_IN
14093: IFFALSE 14118
// TeleportUnit ( i , 117 , 112 , 10 , true ) ;
14095: LD_VAR 0 1
14099: PPUSH
14100: LD_INT 117
14102: PPUSH
14103: LD_INT 112
14105: PPUSH
14106: LD_INT 10
14108: PPUSH
14109: LD_INT 1
14111: PPUSH
14112: CALL_OW 483
14116: GO 14092
14118: POP
14119: POP
// AttackVehicles ( AllianceTarget , AllianceVehicles ) ;
14120: LD_EXP 67
14124: PPUSH
14125: LD_EXP 44
14129: PPUSH
14130: CALL 9804 0 2
// enable ;
14134: ENABLE
// end ; end_of_file
14135: PPOPN 1
14137: END
// every 0 0$1 trigger timerStatus = 1 do
14138: LD_EXP 71
14142: PUSH
14143: LD_INT 1
14145: EQUAL
14146: IFFALSE 14183
14148: GO 14150
14150: DISABLE
// begin enable ;
14151: ENABLE
// display_strings = [ #Am15-1 , timeAction ] ;
14152: LD_ADDR_OWVAR 47
14156: PUSH
14157: LD_STRING #Am15-1
14159: PUSH
14160: LD_EXP 72
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: ST_TO_ADDR
// timeAction = timeAction + 0 0$01 ;
14169: LD_ADDR_EXP 72
14173: PUSH
14174: LD_EXP 72
14178: PUSH
14179: LD_INT 35
14181: PLUS
14182: ST_TO_ADDR
// end ; end_of_file
14183: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 do
14184: LD_EXP 51
14188: PUSH
14189: LD_INT 1
14191: EQUAL
14192: PUSH
14193: LD_EXP 73
14197: PUSH
14198: LD_INT 0
14200: EQUAL
14201: AND
14202: IFFALSE 14262
14204: GO 14206
14206: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
14207: LD_INT 2
14209: PPUSH
14210: LD_INT 6
14212: PPUSH
14213: LD_INT 2
14215: PPUSH
14216: LD_INT 4
14218: PPUSH
14219: CALL_OW 12
14223: PPUSH
14224: LD_INT 10
14226: PPUSH
14227: LD_INT 3
14229: PPUSH
14230: LD_INT 3
14232: PPUSH
14233: LD_INT 3
14235: PPUSH
14236: LD_INT 42
14238: PUSH
14239: LD_INT 43
14241: PUSH
14242: LD_INT 44
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: LIST
14249: PPUSH
14250: EMPTY
14251: PPUSH
14252: EMPTY
14253: PPUSH
14254: LD_INT 1
14256: PPUSH
14257: CALL 6659 0 11
// enable ;
14261: ENABLE
// end ;
14262: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 1 do
14263: LD_EXP 51
14267: PUSH
14268: LD_INT 1
14270: EQUAL
14271: PUSH
14272: LD_EXP 73
14276: PUSH
14277: LD_INT 1
14279: EQUAL
14280: AND
14281: IFFALSE 14341
14283: GO 14285
14285: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 6 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
14286: LD_INT 2
14288: PPUSH
14289: LD_INT 6
14291: PPUSH
14292: LD_INT 4
14294: PPUSH
14295: LD_INT 6
14297: PPUSH
14298: CALL_OW 12
14302: PPUSH
14303: LD_INT 10
14305: PPUSH
14306: LD_INT 3
14308: PPUSH
14309: LD_INT 3
14311: PPUSH
14312: LD_INT 3
14314: PPUSH
14315: LD_INT 44
14317: PUSH
14318: LD_INT 45
14320: PUSH
14321: LD_INT 46
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: LIST
14328: PPUSH
14329: EMPTY
14330: PPUSH
14331: EMPTY
14332: PPUSH
14333: LD_INT 1
14335: PPUSH
14336: CALL 6659 0 11
// enable ;
14340: ENABLE
// end ;
14341: END
// every 3 3$30 trigger startAttacks = 1 and missionStage = 3 do
14342: LD_EXP 51
14346: PUSH
14347: LD_INT 1
14349: EQUAL
14350: PUSH
14351: LD_EXP 73
14355: PUSH
14356: LD_INT 3
14358: EQUAL
14359: AND
14360: IFFALSE 14424
14362: GO 14364
14364: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 , 47 ] , [ ] , [ ] , 1 ) ;
14365: LD_INT 2
14367: PPUSH
14368: LD_INT 6
14370: PPUSH
14371: LD_INT 4
14373: PPUSH
14374: LD_INT 8
14376: PPUSH
14377: CALL_OW 12
14381: PPUSH
14382: LD_INT 10
14384: PPUSH
14385: LD_INT 3
14387: PPUSH
14388: LD_INT 3
14390: PPUSH
14391: LD_INT 3
14393: PPUSH
14394: LD_INT 44
14396: PUSH
14397: LD_INT 45
14399: PUSH
14400: LD_INT 46
14402: PUSH
14403: LD_INT 47
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: PPUSH
14412: EMPTY
14413: PPUSH
14414: EMPTY
14415: PPUSH
14416: LD_INT 1
14418: PPUSH
14419: CALL 6659 0 11
// enable ;
14423: ENABLE
// end ;
14424: END
// every 5 5$30 trigger startAttacks = 1 and missionStage >= 4 do
14425: LD_EXP 51
14429: PUSH
14430: LD_INT 1
14432: EQUAL
14433: PUSH
14434: LD_EXP 73
14438: PUSH
14439: LD_INT 4
14441: GREATEREQUAL
14442: AND
14443: IFFALSE 14503
14445: GO 14447
14447: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
14448: LD_INT 2
14450: PPUSH
14451: LD_INT 6
14453: PPUSH
14454: LD_INT 4
14456: PPUSH
14457: LD_INT 8
14459: PPUSH
14460: CALL_OW 12
14464: PPUSH
14465: LD_INT 10
14467: PPUSH
14468: LD_INT 3
14470: PPUSH
14471: LD_INT 3
14473: PPUSH
14474: LD_INT 3
14476: PPUSH
14477: LD_INT 46
14479: PUSH
14480: LD_INT 47
14482: PUSH
14483: LD_INT 49
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: LIST
14490: PPUSH
14491: EMPTY
14492: PPUSH
14493: EMPTY
14494: PPUSH
14495: LD_INT 1
14497: PPUSH
14498: CALL 6659 0 11
// enable ;
14502: ENABLE
// end ; end_of_file
14503: END
// every 1 do var i , dec1 , options , people ;
14504: GO 14506
14506: DISABLE
14507: LD_INT 0
14509: PPUSH
14510: PPUSH
14511: PPUSH
14512: PPUSH
// begin TeleportExit ( rutp1 , 92 , 172 ) ;
14513: LD_INT 24
14515: PPUSH
14516: LD_INT 92
14518: PPUSH
14519: LD_INT 172
14521: PPUSH
14522: CALL_OW 243
// TeleportExit ( rutp2 , 103 , 74 ) ;
14526: LD_INT 25
14528: PPUSH
14529: LD_INT 103
14531: PPUSH
14532: LD_INT 74
14534: PPUSH
14535: CALL_OW 243
// InGameOn ;
14539: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
14543: LD_EXP 22
14547: PUSH
14548: LD_EXP 23
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PPUSH
14557: LD_INT 60
14559: PPUSH
14560: LD_INT 75
14562: PPUSH
14563: CALL_OW 111
// if KappaStatus = 0 then
14567: LD_EXP 60
14571: PUSH
14572: LD_INT 0
14574: EQUAL
14575: IFFALSE 14621
// begin CenterNowOnUnits ( NewJMMVeh ) ;
14577: LD_EXP 22
14581: PPUSH
14582: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
14586: LD_EXP 1
14590: PPUSH
14591: LD_STRING D1T-JMM-1
14593: PPUSH
14594: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14598: LD_EXP 22
14602: PPUSH
14603: CALL_OW 87
// Say ( Powell , D1nT-JMM-1 ) ;
14607: LD_EXP 17
14611: PPUSH
14612: LD_STRING D1nT-JMM-1
14614: PPUSH
14615: CALL_OW 88
// end else
14619: GO 14906
// begin CenterNowOnUnits ( NewJMMVeh ) ;
14621: LD_EXP 22
14625: PPUSH
14626: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
14630: LD_EXP 1
14634: PPUSH
14635: LD_STRING D1T-JMM-1
14637: PPUSH
14638: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14642: LD_EXP 22
14646: PPUSH
14647: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
14651: LD_EXP 17
14655: PPUSH
14656: LD_STRING D1T-Pow-1
14658: PPUSH
14659: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14663: LD_EXP 22
14667: PPUSH
14668: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
14672: LD_EXP 1
14676: PPUSH
14677: LD_STRING D1T-JMM-2
14679: PPUSH
14680: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14684: LD_EXP 22
14688: PPUSH
14689: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
14693: LD_EXP 17
14697: PPUSH
14698: LD_STRING D1T-Pow-2
14700: PPUSH
14701: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14705: LD_EXP 22
14709: PPUSH
14710: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
14714: LD_EXP 1
14718: PPUSH
14719: LD_STRING D1T-JMM-3
14721: PPUSH
14722: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14726: LD_EXP 22
14730: PPUSH
14731: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
14735: LD_EXP 17
14739: PPUSH
14740: LD_STRING D1T-Pow-3
14742: PPUSH
14743: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14747: LD_EXP 22
14751: PPUSH
14752: CALL_OW 87
// if not JMMGirlVeh = [ ] then
14756: LD_EXP 58
14760: PUSH
14761: EMPTY
14762: EQUAL
14763: NOT
14764: IFFALSE 14864
// begin if JMMGirl = 1 then
14766: LD_EXP 59
14770: PUSH
14771: LD_INT 1
14773: EQUAL
14774: IFFALSE 14788
// Say ( Joan , D1T-Joan-3 ) ;
14776: LD_EXP 2
14780: PPUSH
14781: LD_STRING D1T-Joan-3
14783: PPUSH
14784: CALL_OW 88
// if JMMGirl = 2 then
14788: LD_EXP 59
14792: PUSH
14793: LD_INT 2
14795: EQUAL
14796: IFFALSE 14810
// Say ( Lisa , D1T-Lisa-3 ) ;
14798: LD_EXP 4
14802: PPUSH
14803: LD_STRING D1T-Lisa-3
14805: PPUSH
14806: CALL_OW 88
// if JMMGirl = 3 then
14810: LD_EXP 59
14814: PUSH
14815: LD_INT 3
14817: EQUAL
14818: IFFALSE 14832
// Say ( Connie , D1T-Con-3 ) ;
14820: LD_EXP 16
14824: PPUSH
14825: LD_STRING D1T-Con-3
14827: PPUSH
14828: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14832: LD_EXP 22
14836: PPUSH
14837: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
14841: LD_EXP 17
14845: PPUSH
14846: LD_STRING D1T-Pow-4
14848: PPUSH
14849: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14853: LD_EXP 22
14857: PPUSH
14858: CALL_OW 87
// end else
14862: GO 14906
// begin Say ( JMM , D1T-JMM-4 ) ;
14864: LD_EXP 1
14868: PPUSH
14869: LD_STRING D1T-JMM-4
14871: PPUSH
14872: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14876: LD_EXP 22
14880: PPUSH
14881: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
14885: LD_EXP 17
14889: PPUSH
14890: LD_STRING D1T-Pow-5
14892: PPUSH
14893: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14897: LD_EXP 22
14901: PPUSH
14902: CALL_OW 87
// end ; end ; repeat wait ( 0 0$1 ) ;
14906: LD_INT 35
14908: PPUSH
14909: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
14913: LD_EXP 22
14917: PUSH
14918: LD_EXP 23
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PPUSH
14927: LD_INT 60
14929: PPUSH
14930: LD_INT 75
14932: PPUSH
14933: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
14937: LD_EXP 22
14941: PPUSH
14942: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 25 ;
14946: LD_EXP 22
14950: PPUSH
14951: LD_EXP 17
14955: PPUSH
14956: CALL_OW 296
14960: PUSH
14961: LD_INT 25
14963: LESS
14964: IFFALSE 14906
// ComExitVehicle ( JMM ) ;
14966: LD_EXP 1
14970: PPUSH
14971: CALL_OW 121
// repeat wait ( 0 0$1 ) ;
14975: LD_INT 35
14977: PPUSH
14978: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
14982: LD_EXP 1
14986: PPUSH
14987: LD_EXP 17
14991: PPUSH
14992: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
14996: LD_EXP 1
15000: PPUSH
15001: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
15005: LD_EXP 1
15009: PPUSH
15010: LD_EXP 17
15014: PPUSH
15015: CALL_OW 296
15019: PUSH
15020: LD_INT 6
15022: LESS
15023: IFFALSE 14975
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
15025: LD_EXP 1
15029: PUSH
15030: LD_EXP 17
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PPUSH
15039: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
15043: LD_EXP 1
15047: PPUSH
15048: LD_EXP 17
15052: PPUSH
15053: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
15057: LD_EXP 17
15061: PPUSH
15062: LD_EXP 1
15066: PPUSH
15067: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
15071: LD_EXP 1
15075: PPUSH
15076: LD_STRING D1-JMM-1
15078: PPUSH
15079: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
15083: LD_EXP 17
15087: PPUSH
15088: LD_STRING D1-Pow-1
15090: PPUSH
15091: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
15095: LD_INT 1
15097: PPUSH
15098: LD_INT 3
15100: PPUSH
15101: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
15105: LD_INT 1
15107: PPUSH
15108: LD_INT 4
15110: PPUSH
15111: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
15115: LD_INT 1
15117: PPUSH
15118: LD_INT 5
15120: PPUSH
15121: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
15125: LD_INT 171
15127: PPUSH
15128: LD_INT 81
15130: PPUSH
15131: CALL_OW 84
// wait ( 0 0$4 ) ;
15135: LD_INT 140
15137: PPUSH
15138: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
15142: LD_INT 162
15144: PPUSH
15145: LD_INT 36
15147: PPUSH
15148: CALL_OW 84
// wait ( 0 0$4 ) ;
15152: LD_INT 140
15154: PPUSH
15155: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
15159: LD_INT 75
15161: PPUSH
15162: LD_INT 16
15164: PPUSH
15165: CALL_OW 84
// wait ( 0 0$4 ) ;
15169: LD_INT 140
15171: PPUSH
15172: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
15176: LD_EXP 17
15180: PUSH
15181: LD_EXP 1
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PPUSH
15190: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
15194: LD_EXP 1
15198: PPUSH
15199: LD_STRING D1-JMM-2
15201: PPUSH
15202: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
15206: LD_EXP 17
15210: PPUSH
15211: LD_STRING D1-Pow-2
15213: PPUSH
15214: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
15218: LD_EXP 1
15222: PPUSH
15223: LD_STRING D1-JMM-3
15225: PPUSH
15226: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
15230: LD_EXP 17
15234: PPUSH
15235: LD_STRING D1-Pow-3
15237: PPUSH
15238: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
15242: LD_EXP 1
15246: PPUSH
15247: LD_STRING D1-JMM-4
15249: PPUSH
15250: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
15254: LD_EXP 17
15258: PPUSH
15259: LD_STRING D1-Pow-4
15261: PPUSH
15262: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
15266: LD_EXP 1
15270: PPUSH
15271: LD_STRING D1-JMM-5
15273: PPUSH
15274: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
15278: LD_EXP 17
15282: PPUSH
15283: LD_STRING D1-Pow-5
15285: PPUSH
15286: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
15290: LD_ADDR_VAR 0 3
15294: PUSH
15295: LD_INT 1
15297: PUSH
15298: LD_INT 2
15300: PUSH
15301: LD_INT 3
15303: PUSH
15304: LD_INT 4
15306: PUSH
15307: LD_INT 5
15309: PUSH
15310: LD_INT 6
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
15321: LD_ADDR_VAR 0 2
15325: PUSH
15326: LD_STRING Q1
15328: PPUSH
15329: LD_VAR 0 3
15333: PPUSH
15334: CALL_OW 98
15338: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
15339: LD_ADDR_VAR 0 2
15343: PUSH
15344: LD_STRING Q1
15346: PPUSH
15347: LD_VAR 0 3
15351: PPUSH
15352: CALL_OW 98
15356: ST_TO_ADDR
// options = options diff dec1 ;
15357: LD_ADDR_VAR 0 3
15361: PUSH
15362: LD_VAR 0 3
15366: PUSH
15367: LD_VAR 0 2
15371: DIFF
15372: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
15373: LD_VAR 0 2
15377: PPUSH
15378: LD_VAR 0 3
15382: PPUSH
15383: CALL 16893 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
15387: LD_VAR 0 2
15391: PUSH
15392: LD_INT 5
15394: PUSH
15395: LD_INT 6
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: IN
15402: PUSH
15403: LD_VAR 0 3
15407: PUSH
15408: LD_INT 2
15410: EQUAL
15411: OR
15412: IFFALSE 15339
// if not ( dec1 in [ 5 , 6 ] ) then
15414: LD_VAR 0 2
15418: PUSH
15419: LD_INT 5
15421: PUSH
15422: LD_INT 6
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: IN
15429: NOT
15430: IFFALSE 15473
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
15432: LD_ADDR_VAR 0 2
15436: PUSH
15437: LD_STRING Q1a
15439: PPUSH
15440: LD_INT 1
15442: PUSH
15443: LD_INT 2
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PPUSH
15450: CALL_OW 98
15454: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
15455: LD_VAR 0 2
15459: PUSH
15460: LD_INT 4
15462: PLUS
15463: PPUSH
15464: LD_VAR 0 3
15468: PPUSH
15469: CALL 16893 0 2
// end ; if not JMMGirlVeh = [ ] then
15473: LD_EXP 58
15477: PUSH
15478: EMPTY
15479: EQUAL
15480: NOT
15481: IFFALSE 15643
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
15483: LD_EXP 23
15487: PPUSH
15488: CALL_OW 313
15492: PPUSH
15493: CALL_OW 121
// wait ( 0 0$1 ) ;
15497: LD_INT 35
15499: PPUSH
15500: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15504: LD_INT 35
15506: PPUSH
15507: CALL_OW 67
// if JMMGirl = 1 then
15511: LD_EXP 59
15515: PUSH
15516: LD_INT 1
15518: EQUAL
15519: IFFALSE 15535
// ComMoveUnit ( JMM , Joan ) ;
15521: LD_EXP 1
15525: PPUSH
15526: LD_EXP 2
15530: PPUSH
15531: CALL_OW 112
// if JMMGirl = 2 then
15535: LD_EXP 59
15539: PUSH
15540: LD_INT 2
15542: EQUAL
15543: IFFALSE 15559
// ComMoveUnit ( JMM , Lisa ) ;
15545: LD_EXP 1
15549: PPUSH
15550: LD_EXP 4
15554: PPUSH
15555: CALL_OW 112
// if JMMGirl = 3 then
15559: LD_EXP 59
15563: PUSH
15564: LD_INT 3
15566: EQUAL
15567: IFFALSE 15583
// ComMoveUnit ( JMM , Connie ) ;
15569: LD_EXP 1
15573: PPUSH
15574: LD_EXP 16
15578: PPUSH
15579: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
15583: LD_EXP 1
15587: PPUSH
15588: LD_EXP 2
15592: PPUSH
15593: CALL_OW 296
15597: PUSH
15598: LD_INT 6
15600: LESS
15601: PUSH
15602: LD_EXP 1
15606: PPUSH
15607: LD_EXP 4
15611: PPUSH
15612: CALL_OW 296
15616: PUSH
15617: LD_INT 6
15619: LESS
15620: OR
15621: PUSH
15622: LD_EXP 1
15626: PPUSH
15627: LD_EXP 16
15631: PPUSH
15632: CALL_OW 296
15636: PUSH
15637: LD_INT 6
15639: LESS
15640: OR
15641: IFFALSE 15504
// end ; CenterNowOnUnits ( JMM ) ;
15643: LD_EXP 1
15647: PPUSH
15648: CALL_OW 87
// case JMMGirl of 1 :
15652: LD_EXP 59
15656: PUSH
15657: LD_INT 1
15659: DOUBLE
15660: EQUAL
15661: IFTRUE 15665
15663: GO 15708
15665: POP
// begin ComTurnUnit ( JMM , Joan ) ;
15666: LD_EXP 1
15670: PPUSH
15671: LD_EXP 2
15675: PPUSH
15676: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
15680: LD_EXP 2
15684: PPUSH
15685: LD_EXP 1
15689: PPUSH
15690: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
15694: LD_EXP 2
15698: PPUSH
15699: LD_STRING D3W-Joan-1
15701: PPUSH
15702: CALL_OW 88
// end ; 2 :
15706: GO 15811
15708: LD_INT 2
15710: DOUBLE
15711: EQUAL
15712: IFTRUE 15716
15714: GO 15759
15716: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
15717: LD_EXP 1
15721: PPUSH
15722: LD_EXP 4
15726: PPUSH
15727: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
15731: LD_EXP 4
15735: PPUSH
15736: LD_EXP 1
15740: PPUSH
15741: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
15745: LD_EXP 4
15749: PPUSH
15750: LD_STRING D3W-Lisa-1
15752: PPUSH
15753: CALL_OW 88
// end ; 3 :
15757: GO 15811
15759: LD_INT 3
15761: DOUBLE
15762: EQUAL
15763: IFTRUE 15767
15765: GO 15810
15767: POP
// begin ComTurnUnit ( JMM , Connie ) ;
15768: LD_EXP 1
15772: PPUSH
15773: LD_EXP 16
15777: PPUSH
15778: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
15782: LD_EXP 16
15786: PPUSH
15787: LD_EXP 1
15791: PPUSH
15792: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
15796: LD_EXP 16
15800: PPUSH
15801: LD_STRING D3W-Con-1
15803: PPUSH
15804: CALL_OW 88
// end ; end ;
15808: GO 15811
15810: POP
// Say ( JMM , D3W-JMM-1 ) ;
15811: LD_EXP 1
15815: PPUSH
15816: LD_STRING D3W-JMM-1
15818: PPUSH
15819: CALL_OW 88
// people = 0 ;
15823: LD_ADDR_VAR 0 4
15827: PUSH
15828: LD_INT 0
15830: ST_TO_ADDR
// if Lisa and people < 5 then
15831: LD_EXP 4
15835: PUSH
15836: LD_VAR 0 4
15840: PUSH
15841: LD_INT 5
15843: LESS
15844: AND
15845: IFFALSE 15877
// begin people = people + 1 ;
15847: LD_ADDR_VAR 0 4
15851: PUSH
15852: LD_VAR 0 4
15856: PUSH
15857: LD_INT 1
15859: PLUS
15860: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
15861: LD_ADDR_EXP 48
15865: PUSH
15866: LD_EXP 48
15870: PUSH
15871: LD_EXP 4
15875: ADD
15876: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
15877: LD_EXP 5
15881: PUSH
15882: LD_VAR 0 4
15886: PUSH
15887: LD_INT 5
15889: LESS
15890: AND
15891: IFFALSE 15923
// begin people = people + 1 ;
15893: LD_ADDR_VAR 0 4
15897: PUSH
15898: LD_VAR 0 4
15902: PUSH
15903: LD_INT 1
15905: PLUS
15906: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
15907: LD_ADDR_EXP 48
15911: PUSH
15912: LD_EXP 48
15916: PUSH
15917: LD_EXP 5
15921: ADD
15922: ST_TO_ADDR
// end ; if Bobby and people < 5 then
15923: LD_EXP 6
15927: PUSH
15928: LD_VAR 0 4
15932: PUSH
15933: LD_INT 5
15935: LESS
15936: AND
15937: IFFALSE 15969
// begin people = people + 1 ;
15939: LD_ADDR_VAR 0 4
15943: PUSH
15944: LD_VAR 0 4
15948: PUSH
15949: LD_INT 1
15951: PLUS
15952: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
15953: LD_ADDR_EXP 48
15957: PUSH
15958: LD_EXP 48
15962: PUSH
15963: LD_EXP 6
15967: ADD
15968: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
15969: LD_EXP 7
15973: PUSH
15974: LD_VAR 0 4
15978: PUSH
15979: LD_INT 5
15981: LESS
15982: AND
15983: IFFALSE 16015
// begin people = people + 1 ;
15985: LD_ADDR_VAR 0 4
15989: PUSH
15990: LD_VAR 0 4
15994: PUSH
15995: LD_INT 1
15997: PLUS
15998: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
15999: LD_ADDR_EXP 48
16003: PUSH
16004: LD_EXP 48
16008: PUSH
16009: LD_EXP 7
16013: ADD
16014: ST_TO_ADDR
// end ; if Denis and people < 5 then
16015: LD_EXP 8
16019: PUSH
16020: LD_VAR 0 4
16024: PUSH
16025: LD_INT 5
16027: LESS
16028: AND
16029: IFFALSE 16061
// begin people = people + 1 ;
16031: LD_ADDR_VAR 0 4
16035: PUSH
16036: LD_VAR 0 4
16040: PUSH
16041: LD_INT 1
16043: PLUS
16044: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
16045: LD_ADDR_EXP 48
16049: PUSH
16050: LD_EXP 48
16054: PUSH
16055: LD_EXP 8
16059: ADD
16060: ST_TO_ADDR
// end ; if Brown and people < 5 then
16061: LD_EXP 9
16065: PUSH
16066: LD_VAR 0 4
16070: PUSH
16071: LD_INT 5
16073: LESS
16074: AND
16075: IFFALSE 16107
// begin people = people + 1 ;
16077: LD_ADDR_VAR 0 4
16081: PUSH
16082: LD_VAR 0 4
16086: PUSH
16087: LD_INT 1
16089: PLUS
16090: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
16091: LD_ADDR_EXP 48
16095: PUSH
16096: LD_EXP 48
16100: PUSH
16101: LD_EXP 9
16105: ADD
16106: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
16107: LD_EXP 10
16111: PUSH
16112: LD_VAR 0 4
16116: PUSH
16117: LD_INT 5
16119: LESS
16120: AND
16121: IFFALSE 16153
// begin people = people + 1 ;
16123: LD_ADDR_VAR 0 4
16127: PUSH
16128: LD_VAR 0 4
16132: PUSH
16133: LD_INT 1
16135: PLUS
16136: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
16137: LD_ADDR_EXP 48
16141: PUSH
16142: LD_EXP 48
16146: PUSH
16147: LD_EXP 10
16151: ADD
16152: ST_TO_ADDR
// end ; if Houten and people < 5 then
16153: LD_EXP 11
16157: PUSH
16158: LD_VAR 0 4
16162: PUSH
16163: LD_INT 5
16165: LESS
16166: AND
16167: IFFALSE 16199
// begin people = people + 1 ;
16169: LD_ADDR_VAR 0 4
16173: PUSH
16174: LD_VAR 0 4
16178: PUSH
16179: LD_INT 1
16181: PLUS
16182: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
16183: LD_ADDR_EXP 48
16187: PUSH
16188: LD_EXP 48
16192: PUSH
16193: LD_EXP 11
16197: ADD
16198: ST_TO_ADDR
// end ; if Cornel and people < 5 then
16199: LD_EXP 12
16203: PUSH
16204: LD_VAR 0 4
16208: PUSH
16209: LD_INT 5
16211: LESS
16212: AND
16213: IFFALSE 16245
// begin people = people + 1 ;
16215: LD_ADDR_VAR 0 4
16219: PUSH
16220: LD_VAR 0 4
16224: PUSH
16225: LD_INT 1
16227: PLUS
16228: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
16229: LD_ADDR_EXP 48
16233: PUSH
16234: LD_EXP 48
16238: PUSH
16239: LD_EXP 12
16243: ADD
16244: ST_TO_ADDR
// end ; if Gary and people < 5 then
16245: LD_EXP 13
16249: PUSH
16250: LD_VAR 0 4
16254: PUSH
16255: LD_INT 5
16257: LESS
16258: AND
16259: IFFALSE 16291
// begin people = people + 1 ;
16261: LD_ADDR_VAR 0 4
16265: PUSH
16266: LD_VAR 0 4
16270: PUSH
16271: LD_INT 1
16273: PLUS
16274: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
16275: LD_ADDR_EXP 48
16279: PUSH
16280: LD_EXP 48
16284: PUSH
16285: LD_EXP 13
16289: ADD
16290: ST_TO_ADDR
// end ; if Frank and people < 5 then
16291: LD_EXP 14
16295: PUSH
16296: LD_VAR 0 4
16300: PUSH
16301: LD_INT 5
16303: LESS
16304: AND
16305: IFFALSE 16337
// begin people = people + 1 ;
16307: LD_ADDR_VAR 0 4
16311: PUSH
16312: LD_VAR 0 4
16316: PUSH
16317: LD_INT 1
16319: PLUS
16320: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
16321: LD_ADDR_EXP 48
16325: PUSH
16326: LD_EXP 48
16330: PUSH
16331: LD_EXP 14
16335: ADD
16336: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
16337: LD_EXP 15
16341: PUSH
16342: LD_VAR 0 4
16346: PUSH
16347: LD_INT 5
16349: LESS
16350: AND
16351: IFFALSE 16383
// begin people = people + 1 ;
16353: LD_ADDR_VAR 0 4
16357: PUSH
16358: LD_VAR 0 4
16362: PUSH
16363: LD_INT 1
16365: PLUS
16366: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
16367: LD_ADDR_EXP 48
16371: PUSH
16372: LD_EXP 48
16376: PUSH
16377: LD_EXP 15
16381: ADD
16382: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
16383: LD_EXP 48
16387: PPUSH
16388: LD_INT 25
16390: PUSH
16391: LD_INT 2
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PPUSH
16398: CALL_OW 72
16402: PUSH
16403: LD_INT 0
16405: EQUAL
16406: IFFALSE 16424
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
16408: LD_EXP 48
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: LD_INT 2
16419: PPUSH
16420: CALL_OW 336
// for i = 1 to 5 do
16424: LD_ADDR_VAR 0 1
16428: PUSH
16429: DOUBLE
16430: LD_INT 1
16432: DEC
16433: ST_TO_ADDR
16434: LD_INT 5
16436: PUSH
16437: FOR_TO
16438: IFFALSE 16489
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
16440: LD_EXP 48
16444: PUSH
16445: LD_VAR 0 1
16449: ARRAY
16450: PPUSH
16451: LD_INT 62
16453: PUSH
16454: LD_VAR 0 1
16458: PLUS
16459: PPUSH
16460: LD_INT 95
16462: PPUSH
16463: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
16467: LD_EXP 48
16471: PUSH
16472: LD_VAR 0 1
16476: ARRAY
16477: PPUSH
16478: LD_EXP 1
16482: PPUSH
16483: CALL_OW 179
// end ;
16487: GO 16437
16489: POP
16490: POP
// repeat wait ( 0 0$1 ) ;
16491: LD_INT 35
16493: PPUSH
16494: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
16498: LD_EXP 1
16502: PPUSH
16503: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
16507: LD_EXP 1
16511: PPUSH
16512: LD_INT 66
16514: PPUSH
16515: LD_INT 98
16517: PPUSH
16518: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
16522: LD_EXP 2
16526: PUSH
16527: LD_EXP 4
16531: PUSH
16532: LD_EXP 16
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: LIST
16541: PPUSH
16542: LD_INT 67
16544: PPUSH
16545: LD_INT 98
16547: PPUSH
16548: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
16552: LD_EXP 1
16556: PUSH
16557: LD_EXP 2
16561: PUSH
16562: LD_EXP 4
16566: PUSH
16567: LD_EXP 16
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: PPUSH
16578: LD_INT 63
16580: PPUSH
16581: LD_INT 95
16583: PPUSH
16584: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
16588: LD_EXP 1
16592: PPUSH
16593: LD_INT 9
16595: PPUSH
16596: CALL_OW 308
16600: PUSH
16601: LD_INT 9
16603: PPUSH
16604: LD_INT 22
16606: PUSH
16607: LD_INT 4
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 21
16616: PUSH
16617: LD_INT 1
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PPUSH
16628: CALL_OW 70
16632: PUSH
16633: LD_INT 5
16635: EQUAL
16636: AND
16637: IFFALSE 16491
// wait ( 0 0$2 ) ;
16639: LD_INT 70
16641: PPUSH
16642: CALL_OW 67
// if IsInArea ( Lisa , PowellHillArea ) then
16646: LD_EXP 4
16650: PPUSH
16651: LD_INT 9
16653: PPUSH
16654: CALL_OW 308
16658: IFFALSE 16672
// Say ( Lisa , D3nW-Lisa-1 ) ;
16660: LD_EXP 4
16664: PPUSH
16665: LD_STRING D3nW-Lisa-1
16667: PPUSH
16668: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
16672: LD_EXP 7
16676: PPUSH
16677: LD_INT 9
16679: PPUSH
16680: CALL_OW 308
16684: IFFALSE 16698
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
16686: LD_EXP 7
16690: PPUSH
16691: LD_STRING D3nW-Cyrus-1
16693: PPUSH
16694: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
16698: LD_EXP 6
16702: PPUSH
16703: LD_INT 9
16705: PPUSH
16706: CALL_OW 308
16710: IFFALSE 16724
// Say ( Bobby , D3nW-Bobby-1 ) ;
16712: LD_EXP 6
16716: PPUSH
16717: LD_STRING D3nW-Bobby-1
16719: PPUSH
16720: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
16724: LD_EXP 13
16728: PPUSH
16729: LD_INT 9
16731: PPUSH
16732: CALL_OW 308
16736: IFFALSE 16750
// Say ( Gary , D3nW-Gary-1 ) ;
16738: LD_EXP 13
16742: PPUSH
16743: LD_STRING D3nW-Gary-1
16745: PPUSH
16746: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
16750: LD_EXP 5
16754: PPUSH
16755: LD_INT 9
16757: PPUSH
16758: CALL_OW 308
16762: IFFALSE 16776
// Say ( Donaldson , D3nW-Don-1 ) ;
16764: LD_EXP 5
16768: PPUSH
16769: LD_STRING D3nW-Don-1
16771: PPUSH
16772: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
16776: LD_EXP 12
16780: PPUSH
16781: LD_INT 9
16783: PPUSH
16784: CALL_OW 308
16788: IFFALSE 16802
// Say ( Cornel , D3nW-Corn-1 ) ;
16790: LD_EXP 12
16794: PPUSH
16795: LD_STRING D3nW-Corn-1
16797: PPUSH
16798: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
16802: LD_EXP 14
16806: PPUSH
16807: LD_INT 9
16809: PPUSH
16810: CALL_OW 308
16814: IFFALSE 16828
// Say ( Frank , D3nW-Frank-1 ) ;
16816: LD_EXP 14
16820: PPUSH
16821: LD_STRING D3nW-Frank-1
16823: PPUSH
16824: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
16828: LD_EXP 1
16832: PPUSH
16833: LD_STRING D3nW-JMM-1
16835: PPUSH
16836: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
16840: LD_EXP 1
16844: PPUSH
16845: LD_STRING D3nW-JMM-1a
16847: PPUSH
16848: CALL_OW 88
// InGameOff ;
16852: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
16856: LD_STRING M1
16858: PPUSH
16859: CALL_OW 337
// SaveForQuickRestart ;
16863: CALL_OW 22
// startAttacks = 1 ;
16867: LD_ADDR_EXP 51
16871: PUSH
16872: LD_INT 1
16874: ST_TO_ADDR
// wait ( 0 0$5 ) ;
16875: LD_INT 175
16877: PPUSH
16878: CALL_OW 67
// powellBuildBase = 1 ;
16882: LD_ADDR_EXP 49
16886: PUSH
16887: LD_INT 1
16889: ST_TO_ADDR
// end ;
16890: PPOPN 4
16892: END
// function ResolveQuery ( question , list_of_q ) ; begin
16893: LD_INT 0
16895: PPUSH
// case question of 1 :
16896: LD_VAR 0 1
16900: PUSH
16901: LD_INT 1
16903: DOUBLE
16904: EQUAL
16905: IFTRUE 16909
16907: GO 16960
16909: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
16910: LD_EXP 1
16914: PPUSH
16915: LD_STRING D2Mot-JMM-1
16917: PPUSH
16918: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
16922: LD_EXP 17
16926: PPUSH
16927: LD_STRING D2Mot-Pow-1
16929: PPUSH
16930: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
16934: LD_EXP 1
16938: PPUSH
16939: LD_STRING D2Mot-JMM-2
16941: PPUSH
16942: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
16946: LD_EXP 17
16950: PPUSH
16951: LD_STRING D2Mot-Pow-2
16953: PPUSH
16954: CALL_OW 88
// end ; 2 :
16958: GO 17303
16960: LD_INT 2
16962: DOUBLE
16963: EQUAL
16964: IFTRUE 16968
16966: GO 17044
16968: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
16969: LD_EXP 1
16973: PPUSH
16974: LD_STRING D2Rus-JMM-1
16976: PPUSH
16977: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
16981: LD_EXP 17
16985: PPUSH
16986: LD_STRING D2Rus-Pow-1
16988: PPUSH
16989: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
16993: LD_EXP 1
16997: PPUSH
16998: LD_STRING D2Rus-JMM-2
17000: PPUSH
17001: CALL_OW 88
// if not ( 3 in list_of_q ) then
17005: LD_INT 3
17007: PUSH
17008: LD_VAR 0 2
17012: IN
17013: NOT
17014: IFFALSE 17030
// Say ( Powell , D2Rus-Pow-2 ) else
17016: LD_EXP 17
17020: PPUSH
17021: LD_STRING D2Rus-Pow-2
17023: PPUSH
17024: CALL_OW 88
17028: GO 17042
// Say ( Powell , D2Rus-Pow-2a ) ;
17030: LD_EXP 17
17034: PPUSH
17035: LD_STRING D2Rus-Pow-2a
17037: PPUSH
17038: CALL_OW 88
// end ; 3 :
17042: GO 17303
17044: LD_INT 3
17046: DOUBLE
17047: EQUAL
17048: IFTRUE 17052
17050: GO 17137
17052: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
17053: LD_EXP 1
17057: PPUSH
17058: LD_STRING D2Leg-JMM-1
17060: PPUSH
17061: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
17065: LD_EXP 17
17069: PPUSH
17070: LD_STRING D2Leg-Pow-1
17072: PPUSH
17073: CALL_OW 88
// if ( 2 in list_of_q ) then
17077: LD_INT 2
17079: PUSH
17080: LD_VAR 0 2
17084: IN
17085: IFFALSE 17111
// begin Say ( JMM , D2Leg-JMM-2 ) ;
17087: LD_EXP 1
17091: PPUSH
17092: LD_STRING D2Leg-JMM-2
17094: PPUSH
17095: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
17099: LD_EXP 17
17103: PPUSH
17104: LD_STRING D2Leg-Pow-2
17106: PPUSH
17107: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
17111: LD_EXP 1
17115: PPUSH
17116: LD_STRING D2Leg-JMM-3
17118: PPUSH
17119: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
17123: LD_EXP 17
17127: PPUSH
17128: LD_STRING D2Leg-Pow-3
17130: PPUSH
17131: CALL_OW 88
// end ; 4 :
17135: GO 17303
17137: LD_INT 4
17139: DOUBLE
17140: EQUAL
17141: IFTRUE 17145
17143: GO 17220
17145: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
17146: LD_EXP 1
17150: PPUSH
17151: LD_STRING D2Ar-JMM-1
17153: PPUSH
17154: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
17158: LD_EXP 17
17162: PPUSH
17163: LD_STRING D2Ar-Pow-1
17165: PPUSH
17166: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
17170: LD_EXP 1
17174: PPUSH
17175: LD_STRING D2Ar-JMM-2
17177: PPUSH
17178: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
17182: LD_EXP 17
17186: PPUSH
17187: LD_STRING D2Ar-Pow-2
17189: PPUSH
17190: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
17194: LD_EXP 1
17198: PPUSH
17199: LD_STRING D2Ar-JMM-3
17201: PPUSH
17202: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
17206: LD_EXP 17
17210: PPUSH
17211: LD_STRING D2Ar-Pow-3
17213: PPUSH
17214: CALL_OW 88
// end ; 5 :
17218: GO 17303
17220: LD_INT 5
17222: DOUBLE
17223: EQUAL
17224: IFTRUE 17228
17226: GO 17243
17228: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
17229: LD_EXP 1
17233: PPUSH
17234: LD_STRING D2Conf-JMM-1
17236: PPUSH
17237: CALL_OW 88
// end ; 6 :
17241: GO 17303
17243: LD_INT 6
17245: DOUBLE
17246: EQUAL
17247: IFTRUE 17251
17249: GO 17302
17251: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
17252: LD_EXP 1
17256: PPUSH
17257: LD_STRING D2Com-JMM-1
17259: PPUSH
17260: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
17264: LD_EXP 17
17268: PPUSH
17269: LD_STRING D2Com-Pow-1
17271: PPUSH
17272: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
17276: LD_EXP 1
17280: PPUSH
17281: LD_STRING D2Com-JMM-2
17283: PPUSH
17284: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
17288: LD_EXP 17
17292: PPUSH
17293: LD_STRING D2Com-Pow-2
17295: PPUSH
17296: CALL_OW 88
// end ; end ;
17300: GO 17303
17302: POP
// end ;
17303: LD_VAR 0 3
17307: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
17308: LD_INT 9
17310: PPUSH
17311: LD_INT 22
17313: PUSH
17314: LD_INT 4
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 21
17323: PUSH
17324: LD_INT 1
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PPUSH
17335: CALL_OW 70
17339: IFFALSE 17384
17341: GO 17343
17343: DISABLE
// begin enable ;
17344: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
17345: LD_INT 9
17347: PPUSH
17348: LD_INT 22
17350: PUSH
17351: LD_INT 4
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 21
17360: PUSH
17361: LD_INT 1
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PPUSH
17372: CALL_OW 70
17376: PPUSH
17377: LD_INT 1
17379: PPUSH
17380: CALL_OW 235
// end ;
17384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
17385: LD_INT 22
17387: PUSH
17388: LD_INT 4
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 21
17397: PUSH
17398: LD_INT 2
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 3
17407: PUSH
17408: LD_INT 58
17410: PUSH
17411: EMPTY
17412: LIST
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: LIST
17422: PPUSH
17423: CALL_OW 69
17427: PUSH
17428: LD_INT 4
17430: EQUAL
17431: PUSH
17432: LD_EXP 51
17436: PUSH
17437: LD_INT 1
17439: EQUAL
17440: AND
17441: IFFALSE 17454
17443: GO 17445
17445: DISABLE
// startAttacks = 0 ;
17446: LD_ADDR_EXP 51
17450: PUSH
17451: LD_INT 0
17453: ST_TO_ADDR
17454: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
17455: LD_INT 22
17457: PUSH
17458: LD_INT 4
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 21
17467: PUSH
17468: LD_INT 2
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 3
17477: PUSH
17478: LD_INT 58
17480: PUSH
17481: EMPTY
17482: LIST
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: PPUSH
17493: CALL_OW 69
17497: PUSH
17498: LD_INT 4
17500: EQUAL
17501: PUSH
17502: LD_INT 22
17504: PUSH
17505: LD_INT 6
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 21
17514: PUSH
17515: LD_INT 2
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 24
17524: PUSH
17525: LD_INT 250
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: LIST
17536: PPUSH
17537: CALL_OW 69
17541: PUSH
17542: LD_INT 0
17544: EQUAL
17545: AND
17546: PUSH
17547: LD_EXP 51
17551: PUSH
17552: LD_INT 0
17554: EQUAL
17555: AND
17556: PUSH
17557: LD_EXP 50
17561: PUSH
17562: LD_INT 0
17564: EQUAL
17565: AND
17566: IFFALSE 17754
17568: GO 17570
17570: DISABLE
17571: LD_INT 0
17573: PPUSH
// begin powellAttacks = 1 ;
17574: LD_ADDR_EXP 50
17578: PUSH
17579: LD_INT 1
17581: ST_TO_ADDR
// InGameOn ;
17582: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
17586: LD_EXP 17
17590: PPUSH
17591: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
17595: LD_EXP 17
17599: PPUSH
17600: LD_INT 47
17602: PPUSH
17603: LD_INT 60
17605: PPUSH
17606: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
17610: LD_EXP 17
17614: PPUSH
17615: LD_STRING D4-Pow-1
17617: PPUSH
17618: CALL_OW 88
// for i = 1 to amUnitsAttack do
17622: LD_ADDR_VAR 0 1
17626: PUSH
17627: DOUBLE
17628: LD_INT 1
17630: DEC
17631: ST_TO_ADDR
17632: LD_EXP 47
17636: PUSH
17637: FOR_TO
17638: IFFALSE 17683
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
17640: LD_EXP 47
17644: PUSH
17645: LD_VAR 0 1
17649: ARRAY
17650: PPUSH
17651: CALL_OW 258
17655: PUSH
17656: LD_INT 1
17658: EQUAL
17659: IFFALSE 17681
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
17661: LD_EXP 47
17665: PUSH
17666: LD_VAR 0 1
17670: ARRAY
17671: PPUSH
17672: LD_STRING D4-Sol1-1
17674: PPUSH
17675: CALL_OW 88
// break ;
17679: GO 17683
// end ;
17681: GO 17637
17683: POP
17684: POP
// Say ( Powell , D4-Pow-2 ) ;
17685: LD_EXP 17
17689: PPUSH
17690: LD_STRING D4-Pow-2
17692: PPUSH
17693: CALL_OW 88
// InGameOff ;
17697: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
17701: LD_INT 22
17703: PUSH
17704: LD_INT 4
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 21
17713: PUSH
17714: LD_INT 2
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 3
17723: PUSH
17724: LD_INT 58
17726: PUSH
17727: EMPTY
17728: LIST
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: LIST
17738: PPUSH
17739: CALL_OW 69
17743: PPUSH
17744: LD_INT 59
17746: PPUSH
17747: LD_INT 21
17749: PPUSH
17750: CALL_OW 114
// end ;
17754: PPOPN 1
17756: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
17757: LD_EXP 50
17761: PUSH
17762: LD_INT 1
17764: EQUAL
17765: IFFALSE 17814
17767: GO 17769
17769: DISABLE
17770: LD_INT 0
17772: PPUSH
// begin enable ;
17773: ENABLE
// for i = 1 to amUnitsAttack do
17774: LD_ADDR_VAR 0 1
17778: PUSH
17779: DOUBLE
17780: LD_INT 1
17782: DEC
17783: ST_TO_ADDR
17784: LD_EXP 47
17788: PUSH
17789: FOR_TO
17790: IFFALSE 17812
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
17792: LD_INT 8
17794: PPUSH
17795: LD_EXP 47
17799: PUSH
17800: LD_VAR 0 1
17804: ARRAY
17805: PPUSH
17806: CALL_OW 471
17810: GO 17789
17812: POP
17813: POP
// end ;
17814: PPOPN 1
17816: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
17817: LD_INT 22
17819: PUSH
17820: LD_INT 4
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 21
17829: PUSH
17830: LD_INT 2
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 3
17839: PUSH
17840: LD_INT 58
17842: PUSH
17843: EMPTY
17844: LIST
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: LIST
17854: PPUSH
17855: CALL_OW 69
17859: PUSH
17860: LD_INT 0
17862: EQUAL
17863: PUSH
17864: LD_EXP 50
17868: PUSH
17869: LD_INT 1
17871: EQUAL
17872: AND
17873: IFFALSE 18044
17875: GO 17877
17877: DISABLE
// begin powellAttacks = 2 ;
17878: LD_ADDR_EXP 50
17882: PUSH
17883: LD_INT 2
17885: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
17886: LD_INT 85
17888: PPUSH
17889: LD_INT 3
17891: PPUSH
17892: LD_INT 3
17894: PPUSH
17895: LD_INT 1
17897: PPUSH
17898: LD_INT 5
17900: PUSH
17901: LD_INT 7
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 1
17910: PPUSH
17911: LD_INT 2
17913: PPUSH
17914: CALL_OW 12
17918: ARRAY
17919: PPUSH
17920: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
17924: LD_INT 85
17926: PPUSH
17927: LD_INT 3
17929: PPUSH
17930: LD_INT 3
17932: PPUSH
17933: LD_INT 1
17935: PPUSH
17936: LD_INT 5
17938: PUSH
17939: LD_INT 7
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 1
17948: PPUSH
17949: LD_INT 2
17951: PPUSH
17952: CALL_OW 12
17956: ARRAY
17957: PPUSH
17958: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
17962: LD_INT 85
17964: PPUSH
17965: LD_INT 3
17967: PPUSH
17968: LD_INT 3
17970: PPUSH
17971: LD_INT 1
17973: PPUSH
17974: LD_INT 5
17976: PUSH
17977: LD_INT 7
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 1
17986: PPUSH
17987: LD_INT 2
17989: PPUSH
17990: CALL_OW 12
17994: ARRAY
17995: PPUSH
17996: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
18000: LD_INT 85
18002: PPUSH
18003: LD_INT 5
18005: PPUSH
18006: LD_INT 3
18008: PPUSH
18009: LD_INT 1
18011: PPUSH
18012: LD_INT 6
18014: PPUSH
18015: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
18019: LD_ADDR_EXP 52
18023: PUSH
18024: LD_INT 85
18026: PPUSH
18027: LD_INT 3
18029: PPUSH
18030: LD_INT 3
18032: PPUSH
18033: LD_INT 1
18035: PPUSH
18036: LD_INT 3
18038: PPUSH
18039: CALL_OW 185
18043: ST_TO_ADDR
// end ;
18044: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
18045: LD_INT 22
18047: PUSH
18048: LD_INT 4
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 21
18057: PUSH
18058: LD_INT 2
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 3
18067: PUSH
18068: LD_INT 58
18070: PUSH
18071: EMPTY
18072: LIST
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: LIST
18082: PPUSH
18083: CALL_OW 69
18087: PUSH
18088: LD_INT 5
18090: GREATEREQUAL
18091: PUSH
18092: LD_EXP 51
18096: PUSH
18097: LD_INT 1
18099: EQUAL
18100: AND
18101: IFFALSE 18114
18103: GO 18105
18105: DISABLE
// startAttacks = 0 ;
18106: LD_ADDR_EXP 51
18110: PUSH
18111: LD_INT 0
18113: ST_TO_ADDR
18114: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
18115: LD_INT 22
18117: PUSH
18118: LD_INT 4
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 21
18127: PUSH
18128: LD_INT 2
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 3
18137: PUSH
18138: LD_INT 58
18140: PUSH
18141: EMPTY
18142: LIST
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: PPUSH
18153: CALL_OW 69
18157: PUSH
18158: LD_INT 5
18160: GREATEREQUAL
18161: PUSH
18162: LD_INT 22
18164: PUSH
18165: LD_INT 6
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 21
18174: PUSH
18175: LD_INT 2
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 24
18184: PUSH
18185: LD_INT 250
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: LIST
18196: PPUSH
18197: CALL_OW 69
18201: PUSH
18202: LD_INT 0
18204: EQUAL
18205: AND
18206: PUSH
18207: LD_EXP 51
18211: PUSH
18212: LD_INT 0
18214: EQUAL
18215: AND
18216: PUSH
18217: LD_EXP 50
18221: PUSH
18222: LD_INT 2
18224: EQUAL
18225: AND
18226: IFFALSE 19135
18228: GO 18230
18230: DISABLE
18231: LD_INT 0
18233: PPUSH
18234: PPUSH
18235: PPUSH
18236: PPUSH
// begin powellAttacks = 3 ;
18237: LD_ADDR_EXP 50
18241: PUSH
18242: LD_INT 3
18244: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
18245: LD_ADDR_VAR 0 1
18249: PUSH
18250: DOUBLE
18251: LD_INT 1
18253: DEC
18254: ST_TO_ADDR
18255: LD_EXP 47
18259: PUSH
18260: FOR_TO
18261: IFFALSE 18283
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
18263: LD_INT 8
18265: PPUSH
18266: LD_EXP 47
18270: PUSH
18271: LD_VAR 0 1
18275: ARRAY
18276: PPUSH
18277: CALL_OW 472
18281: GO 18260
18283: POP
18284: POP
// wait ( 0 0$5 ) ;
18285: LD_INT 175
18287: PPUSH
18288: CALL_OW 67
// Video ( true ) ;
18292: LD_INT 1
18294: PPUSH
18295: CALL 5670 0 1
// CenterNowOnUnits ( Powell ) ;
18299: LD_EXP 17
18303: PPUSH
18304: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
18308: LD_EXP 17
18312: PPUSH
18313: LD_INT 45
18315: PPUSH
18316: LD_INT 64
18318: PPUSH
18319: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
18323: LD_EXP 17
18327: PPUSH
18328: LD_INT 46
18330: PPUSH
18331: LD_INT 66
18333: PPUSH
18334: CALL_OW 178
// for i = 5 to 8 do
18338: LD_ADDR_VAR 0 1
18342: PUSH
18343: DOUBLE
18344: LD_INT 5
18346: DEC
18347: ST_TO_ADDR
18348: LD_INT 8
18350: PUSH
18351: FOR_TO
18352: IFFALSE 18498
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
18354: LD_EXP 47
18358: PUSH
18359: LD_VAR 0 1
18363: ARRAY
18364: PPUSH
18365: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
18369: LD_EXP 47
18373: PUSH
18374: LD_VAR 0 1
18378: ARRAY
18379: PPUSH
18380: CALL_OW 121
// wait ( 0 0$1 ) ;
18384: LD_INT 35
18386: PPUSH
18387: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
18391: LD_EXP 47
18395: PUSH
18396: LD_VAR 0 1
18400: ARRAY
18401: PPUSH
18402: LD_INT 92
18404: PPUSH
18405: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
18409: LD_EXP 47
18413: PUSH
18414: LD_VAR 0 1
18418: ARRAY
18419: PPUSH
18420: LD_INT 1
18422: PPUSH
18423: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
18427: LD_EXP 47
18431: PUSH
18432: LD_VAR 0 1
18436: ARRAY
18437: PPUSH
18438: CALL_OW 182
// wait ( 0 0$1 ) ;
18442: LD_INT 35
18444: PPUSH
18445: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 45 + i , 67 ) ;
18449: LD_EXP 47
18453: PUSH
18454: LD_VAR 0 1
18458: ARRAY
18459: PPUSH
18460: LD_INT 45
18462: PUSH
18463: LD_VAR 0 1
18467: PLUS
18468: PPUSH
18469: LD_INT 67
18471: PPUSH
18472: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
18476: LD_EXP 47
18480: PUSH
18481: LD_VAR 0 1
18485: ARRAY
18486: PPUSH
18487: LD_EXP 17
18491: PPUSH
18492: CALL_OW 179
// end ;
18496: GO 18351
18498: POP
18499: POP
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
18500: LD_ADDR_VAR 0 3
18504: PUSH
18505: LD_INT 22
18507: PUSH
18508: LD_INT 4
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 21
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 56
18527: PUSH
18528: EMPTY
18529: LIST
18530: PUSH
18531: LD_INT 3
18533: PUSH
18534: LD_INT 60
18536: PUSH
18537: EMPTY
18538: LIST
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: PPUSH
18550: CALL_OW 69
18554: PUSH
18555: LD_EXP 17
18559: PUSH
18560: EMPTY
18561: LIST
18562: DIFF
18563: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
18564: LD_VAR 0 3
18568: PPUSH
18569: LD_INT 92
18571: PPUSH
18572: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
18576: LD_VAR 0 3
18580: PPUSH
18581: LD_INT 1
18583: PPUSH
18584: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
18588: LD_EXP 17
18592: PPUSH
18593: LD_STRING D5-Pow-1
18595: PPUSH
18596: CALL_OW 88
// for i = 1 to amUnitsAttack do
18600: LD_ADDR_VAR 0 1
18604: PUSH
18605: DOUBLE
18606: LD_INT 1
18608: DEC
18609: ST_TO_ADDR
18610: LD_EXP 47
18614: PUSH
18615: FOR_TO
18616: IFFALSE 18661
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
18618: LD_EXP 47
18622: PUSH
18623: LD_VAR 0 1
18627: ARRAY
18628: PPUSH
18629: CALL_OW 258
18633: PUSH
18634: LD_INT 1
18636: EQUAL
18637: IFFALSE 18659
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
18639: LD_EXP 47
18643: PUSH
18644: LD_VAR 0 1
18648: ARRAY
18649: PPUSH
18650: LD_STRING D5-Sol2-1
18652: PPUSH
18653: CALL_OW 88
// break ;
18657: GO 18661
// end ;
18659: GO 18615
18661: POP
18662: POP
// Say ( Powell , D5-Pow-2 ) ;
18663: LD_EXP 17
18667: PPUSH
18668: LD_STRING D5-Pow-2
18670: PPUSH
18671: CALL_OW 88
// for i = 1 to amUnitsAttack do
18675: LD_ADDR_VAR 0 1
18679: PUSH
18680: DOUBLE
18681: LD_INT 1
18683: DEC
18684: ST_TO_ADDR
18685: LD_EXP 47
18689: PUSH
18690: FOR_TO
18691: IFFALSE 18736
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
18693: LD_EXP 47
18697: PUSH
18698: LD_VAR 0 1
18702: ARRAY
18703: PPUSH
18704: CALL_OW 258
18708: PUSH
18709: LD_INT 1
18711: EQUAL
18712: IFFALSE 18734
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
18714: LD_EXP 47
18718: PUSH
18719: LD_VAR 0 1
18723: ARRAY
18724: PPUSH
18725: LD_STRING D5-Sol2-2
18727: PPUSH
18728: CALL_OW 88
// break ;
18732: GO 18736
// end ;
18734: GO 18690
18736: POP
18737: POP
// Say ( Powell , D5-Pow-3 ) ;
18738: LD_EXP 17
18742: PPUSH
18743: LD_STRING D5-Pow-3
18745: PPUSH
18746: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
18750: LD_INT 22
18752: PUSH
18753: LD_INT 4
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 21
18762: PUSH
18763: LD_INT 2
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 3
18772: PUSH
18773: LD_INT 58
18775: PUSH
18776: EMPTY
18777: LIST
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: LIST
18787: PPUSH
18788: CALL_OW 69
18792: PPUSH
18793: LD_INT 59
18795: PPUSH
18796: LD_INT 21
18798: PPUSH
18799: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
18803: LD_EXP 47
18807: PPUSH
18808: LD_INT 59
18810: PPUSH
18811: LD_INT 21
18813: PPUSH
18814: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
18818: LD_INT 61
18820: PPUSH
18821: LD_INT 35
18823: PPUSH
18824: CALL_OW 84
// wait ( 0 0$15 ) ;
18828: LD_INT 525
18830: PPUSH
18831: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
18835: LD_EXP 17
18839: PPUSH
18840: LD_STRING D5a-Pow-1
18842: PPUSH
18843: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
18847: LD_EXP 17
18851: PPUSH
18852: LD_STRING D5a-Pow-1a
18854: PPUSH
18855: CALL_OW 88
// wait ( 0 0$2 ) ;
18859: LD_INT 70
18861: PPUSH
18862: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
18866: LD_EXP 17
18870: PPUSH
18871: LD_STRING D5a-Pow-1b
18873: PPUSH
18874: CALL_OW 88
// wait ( 0 0$3 ) ;
18878: LD_INT 105
18880: PPUSH
18881: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
18885: LD_EXP 17
18889: PPUSH
18890: LD_STRING D5a-Pow-1c
18892: PPUSH
18893: CALL_OW 88
// wait ( 0 0$1 ) ;
18897: LD_INT 35
18899: PPUSH
18900: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
18904: LD_EXP 17
18908: PPUSH
18909: LD_STRING D5a-Pow-1d
18911: PPUSH
18912: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
18916: LD_INT 35
18918: PPUSH
18919: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
18923: LD_INT 22
18925: PUSH
18926: LD_INT 4
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 21
18935: PUSH
18936: LD_INT 2
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 3
18945: PUSH
18946: LD_INT 58
18948: PUSH
18949: EMPTY
18950: LIST
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: LIST
18960: PPUSH
18961: CALL_OW 69
18965: PPUSH
18966: LD_INT 59
18968: PPUSH
18969: LD_INT 21
18971: PPUSH
18972: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
18976: LD_EXP 47
18980: PPUSH
18981: LD_INT 59
18983: PPUSH
18984: LD_INT 21
18986: PPUSH
18987: CALL_OW 114
// until amUnitsAttack = [ ] ;
18991: LD_EXP 47
18995: PUSH
18996: EMPTY
18997: EQUAL
18998: IFFALSE 18916
// CenterNowOnUnits ( Powell ) ;
19000: LD_EXP 17
19004: PPUSH
19005: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
19009: LD_ADDR_VAR 0 3
19013: PUSH
19014: LD_INT 22
19016: PUSH
19017: LD_INT 4
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 21
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: PUSH
19043: LD_EXP 17
19047: PUSH
19048: EMPTY
19049: LIST
19050: DIFF
19051: ST_TO_ADDR
// for i in powellPeople do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_VAR 0 3
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19092
// if GetSex ( i ) = sex_male then
19065: LD_VAR 0 1
19069: PPUSH
19070: CALL_OW 258
19074: PUSH
19075: LD_INT 1
19077: EQUAL
19078: IFFALSE 19090
// sold = i ;
19080: LD_ADDR_VAR 0 2
19084: PUSH
19085: LD_VAR 0 1
19089: ST_TO_ADDR
19090: GO 19062
19092: POP
19093: POP
// Say ( sold , D6-Sol3-1 ) ;
19094: LD_VAR 0 2
19098: PPUSH
19099: LD_STRING D6-Sol3-1
19101: PPUSH
19102: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
19106: LD_EXP 17
19110: PPUSH
19111: LD_STRING D6-Pow-1
19113: PPUSH
19114: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
19118: LD_INT 139
19120: PUSH
19121: LD_INT 138
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PPUSH
19128: LD_INT 12
19130: PPUSH
19131: CALL_OW 113
// end ;
19135: PPOPN 4
19137: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
19138: LD_EXP 50
19142: PUSH
19143: LD_INT 3
19145: EQUAL
19146: PUSH
19147: LD_INT 12
19149: PPUSH
19150: LD_INT 22
19152: PUSH
19153: LD_INT 8
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 21
19162: PUSH
19163: LD_INT 2
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PPUSH
19174: CALL_OW 70
19178: PUSH
19179: LD_INT 2
19181: EQUAL
19182: AND
19183: IFFALSE 19344
19185: GO 19187
19187: DISABLE
19188: LD_INT 0
19190: PPUSH
19191: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
19192: LD_INT 8
19194: PPUSH
19195: LD_INT 1
19197: PPUSH
19198: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
19202: LD_INT 4
19204: PPUSH
19205: LD_INT 8
19207: PPUSH
19208: LD_INT 1
19210: PPUSH
19211: LD_INT 1
19213: PPUSH
19214: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
19218: LD_ADDR_VAR 0 1
19222: PUSH
19223: LD_INT 92
19225: PPUSH
19226: CALL_OW 313
19230: PUSH
19231: FOR_IN
19232: IFFALSE 19263
// if GetSex ( i ) = sex_male then
19234: LD_VAR 0 1
19238: PPUSH
19239: CALL_OW 258
19243: PUSH
19244: LD_INT 1
19246: EQUAL
19247: IFFALSE 19261
// begin tmp = i ;
19249: LD_ADDR_VAR 0 2
19253: PUSH
19254: LD_VAR 0 1
19258: ST_TO_ADDR
// break ;
19259: GO 19263
// end ;
19261: GO 19231
19263: POP
19264: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
19265: LD_INT 92
19267: PPUSH
19268: CALL_OW 313
19272: PPUSH
19273: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
19277: LD_VAR 0 2
19281: PPUSH
19282: LD_STRING D6-Sol3-2
19284: PPUSH
19285: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
19289: LD_INT 139
19291: PUSH
19292: LD_INT 138
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PPUSH
19299: LD_INT 85
19301: PPUSH
19302: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
19306: LD_INT 4
19308: PPUSH
19309: LD_INT 8
19311: PPUSH
19312: LD_INT 2
19314: PPUSH
19315: LD_INT 1
19317: PPUSH
19318: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
19322: LD_INT 8
19324: PPUSH
19325: LD_INT 8
19327: PPUSH
19328: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
19332: LD_EXP 17
19336: PPUSH
19337: LD_STRING D6-Pow-2
19339: PPUSH
19340: CALL_OW 88
// end ;
19344: PPOPN 2
19346: END
// every 0 0$1 trigger IsDead ( AmFact ) do var i , tmp ;
19347: LD_INT 85
19349: PPUSH
19350: CALL_OW 301
19354: IFFALSE 19646
19356: GO 19358
19358: DISABLE
19359: LD_INT 0
19361: PPUSH
19362: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
19363: LD_ADDR_VAR 0 1
19367: PUSH
19368: LD_INT 22
19370: PUSH
19371: LD_INT 4
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 21
19380: PUSH
19381: LD_INT 1
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 56
19390: PUSH
19391: EMPTY
19392: LIST
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: LIST
19398: PPUSH
19399: CALL_OW 69
19403: PUSH
19404: LD_EXP 17
19408: PUSH
19409: EMPTY
19410: LIST
19411: DIFF
19412: PUSH
19413: FOR_IN
19414: IFFALSE 19445
// if GetSex ( i ) = sex_male then
19416: LD_VAR 0 1
19420: PPUSH
19421: CALL_OW 258
19425: PUSH
19426: LD_INT 1
19428: EQUAL
19429: IFFALSE 19443
// begin tmp = i ;
19431: LD_ADDR_VAR 0 2
19435: PUSH
19436: LD_VAR 0 1
19440: ST_TO_ADDR
// break ;
19441: GO 19445
// end ;
19443: GO 19413
19445: POP
19446: POP
// Say ( Powell , D6a-Pow-1 ) ;
19447: LD_EXP 17
19451: PPUSH
19452: LD_STRING D6a-Pow-1
19454: PPUSH
19455: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
19459: LD_VAR 0 2
19463: PPUSH
19464: LD_STRING D6a-Sol3-1
19466: PPUSH
19467: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
19471: LD_EXP 17
19475: PPUSH
19476: LD_VAR 0 2
19480: PPUSH
19481: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
19485: LD_EXP 17
19489: PPUSH
19490: LD_STRING D6a-Pow-2
19492: PPUSH
19493: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
19497: LD_VAR 0 2
19501: PPUSH
19502: LD_STRING D6a-Sol3-2
19504: PPUSH
19505: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
19509: LD_EXP 17
19513: PPUSH
19514: LD_STRING D6a-Pow-3
19516: PPUSH
19517: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
19521: LD_EXP 17
19525: PPUSH
19526: LD_EXP 52
19530: PPUSH
19531: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19535: LD_INT 35
19537: PPUSH
19538: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
19542: LD_EXP 17
19546: PPUSH
19547: LD_EXP 52
19551: PPUSH
19552: CALL_OW 120
// until IsInUnit ( Powell ) ;
19556: LD_EXP 17
19560: PPUSH
19561: CALL_OW 310
19565: IFFALSE 19535
// wait ( 0 0$1 ) ;
19567: LD_INT 35
19569: PPUSH
19570: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
19574: LD_EXP 52
19578: PPUSH
19579: LD_INT 77
19581: PPUSH
19582: LD_INT 64
19584: PPUSH
19585: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
19589: LD_EXP 52
19593: PPUSH
19594: LD_INT 91
19596: PPUSH
19597: LD_INT 61
19599: PPUSH
19600: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
19604: LD_EXP 52
19608: PPUSH
19609: LD_INT 74
19611: PPUSH
19612: LD_INT 25
19614: PPUSH
19615: CALL_OW 171
// centerPowell = 1 ;
19619: LD_ADDR_EXP 53
19623: PUSH
19624: LD_INT 1
19626: ST_TO_ADDR
// wait ( 0 0$15 ) ;
19627: LD_INT 525
19629: PPUSH
19630: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
19634: LD_EXP 17
19638: PPUSH
19639: LD_STRING D6b-Pow-1
19641: PPUSH
19642: CALL_OW 88
// end ;
19646: PPOPN 2
19648: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
19649: LD_EXP 52
19653: PPUSH
19654: LD_INT 13
19656: PPUSH
19657: CALL_OW 308
19661: PUSH
19662: LD_EXP 50
19666: PUSH
19667: LD_INT 3
19669: EQUAL
19670: AND
19671: IFFALSE 19813
19673: GO 19675
19675: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
19676: LD_EXP 52
19680: PPUSH
19681: LD_INT 250
19683: PPUSH
19684: CALL_OW 234
// DialogueOn ;
19688: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
19692: LD_EXP 17
19696: PPUSH
19697: LD_STRING D6b-Pow-1a
19699: PPUSH
19700: CALL_OW 88
// DialogueOff ;
19704: CALL_OW 7
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
19708: LD_EXP 17
19712: PPUSH
19713: LD_INT 22
19715: PUSH
19716: LD_INT 8
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 34
19725: PUSH
19726: LD_INT 29
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 50
19735: PUSH
19736: EMPTY
19737: LIST
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: LIST
19743: PPUSH
19744: CALL_OW 69
19748: PUSH
19749: LD_INT 1
19751: ARRAY
19752: PPUSH
19753: CALL_OW 120
// wait ( 0 0$1 ) ;
19757: LD_INT 35
19759: PPUSH
19760: CALL_OW 67
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
19764: LD_EXP 17
19768: PPUSH
19769: LD_INT 22
19771: PUSH
19772: LD_INT 8
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 34
19781: PUSH
19782: LD_INT 29
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 50
19791: PUSH
19792: EMPTY
19793: LIST
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: PPUSH
19800: CALL_OW 69
19804: PUSH
19805: LD_INT 1
19807: ARRAY
19808: PPUSH
19809: CALL_OW 120
// end ;
19813: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
19814: LD_INT 22
19816: PUSH
19817: LD_INT 4
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 34
19826: PUSH
19827: LD_INT 29
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PPUSH
19838: CALL_OW 69
19842: IFFALSE 20221
19844: GO 19846
19846: DISABLE
// begin powBomb = FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) [ 1 ] ;
19847: LD_ADDR_EXP 54
19851: PUSH
19852: LD_INT 22
19854: PUSH
19855: LD_INT 4
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 34
19864: PUSH
19865: LD_INT 29
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PPUSH
19876: CALL_OW 69
19880: PUSH
19881: LD_INT 1
19883: ARRAY
19884: ST_TO_ADDR
// SetAttitude ( 8 , 4 , att_friend , true ) ;
19885: LD_INT 8
19887: PPUSH
19888: LD_INT 4
19890: PPUSH
19891: LD_INT 1
19893: PPUSH
19894: LD_INT 1
19896: PPUSH
19897: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
19901: LD_EXP 54
19905: PPUSH
19906: LD_INT 80
19908: PPUSH
19909: LD_INT 19
19911: PPUSH
19912: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
19916: LD_EXP 54
19920: PPUSH
19921: LD_INT 74
19923: PPUSH
19924: LD_INT 15
19926: PPUSH
19927: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
19931: LD_EXP 54
19935: PPUSH
19936: LD_INT 72
19938: PPUSH
19939: LD_INT 19
19941: PPUSH
19942: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
19946: LD_EXP 54
19950: PPUSH
19951: LD_INT 78
19953: PPUSH
19954: LD_INT 24
19956: PPUSH
19957: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
19961: LD_EXP 54
19965: PPUSH
19966: LD_INT 77
19968: PPUSH
19969: LD_INT 20
19971: PPUSH
19972: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
19976: LD_EXP 54
19980: PPUSH
19981: LD_INT 78
19983: PPUSH
19984: LD_INT 15
19986: PPUSH
19987: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
19991: LD_EXP 17
19995: PPUSH
19996: LD_STRING D6b-Pow-1b
19998: PPUSH
19999: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
20003: LD_INT 22
20005: PUSH
20006: LD_INT 8
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 21
20015: PUSH
20016: LD_INT 1
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 25
20025: PUSH
20026: LD_INT 1
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 26
20035: PUSH
20036: LD_INT 1
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: PPUSH
20049: CALL_OW 69
20053: PUSH
20054: LD_INT 1
20056: ARRAY
20057: PPUSH
20058: LD_STRING D6b-ArSol1-1
20060: PPUSH
20061: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol2-1 ) ;
20065: LD_INT 22
20067: PUSH
20068: LD_INT 8
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 21
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 25
20087: PUSH
20088: LD_INT 1
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 26
20097: PUSH
20098: LD_INT 1
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: PPUSH
20111: CALL_OW 69
20115: PUSH
20116: LD_INT 1
20118: ARRAY
20119: PPUSH
20120: LD_STRING D6b-ArSol2-1
20122: PPUSH
20123: CALL_OW 88
// wait ( 0 0$3 ) ;
20127: LD_INT 105
20129: PPUSH
20130: CALL_OW 67
// Say ( Powell , D6b-Pow-2 ) ;
20134: LD_EXP 17
20138: PPUSH
20139: LD_STRING D6b-Pow-2
20141: PPUSH
20142: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
20146: LD_INT 35
20148: PPUSH
20149: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 2 ;
20153: LD_EXP 54
20157: PPUSH
20158: LD_INT 78
20160: PPUSH
20161: LD_INT 15
20163: PPUSH
20164: CALL_OW 297
20168: PUSH
20169: LD_INT 2
20171: LESS
20172: IFFALSE 20146
// wait ( 0 0$1 ) ;
20174: LD_INT 35
20176: PPUSH
20177: CALL_OW 67
// DialogueOn ;
20181: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
20185: LD_EXP 17
20189: PPUSH
20190: LD_STRING D6b-Pow-2a
20192: PPUSH
20193: CALL_OW 88
// DialogueOff ;
20197: CALL_OW 7
// centerPowell = 0 ;
20201: LD_ADDR_EXP 53
20205: PUSH
20206: LD_INT 0
20208: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
20209: LD_EXP 54
20213: PPUSH
20214: LD_INT 105
20216: PPUSH
20217: CALL_OW 115
// end ;
20221: END
// every 0 0$3 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
20222: LD_INT 105
20224: PPUSH
20225: CALL_OW 301
20229: PUSH
20230: LD_EXP 50
20234: PUSH
20235: LD_INT 3
20237: EQUAL
20238: AND
20239: IFFALSE 20959
20241: GO 20243
20243: DISABLE
20244: LD_INT 0
20246: PPUSH
20247: PPUSH
20248: PPUSH
20249: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_sex , 1 ] ] ) ;
20250: LD_ADDR_VAR 0 2
20254: PUSH
20255: LD_INT 22
20257: PUSH
20258: LD_INT 4
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 21
20267: PUSH
20268: LD_INT 1
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 56
20277: PUSH
20278: EMPTY
20279: LIST
20280: PUSH
20281: LD_INT 26
20283: PUSH
20284: LD_INT 1
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: PPUSH
20297: CALL_OW 69
20301: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
20302: LD_INT 49
20304: PPUSH
20305: LD_INT 66
20307: PPUSH
20308: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
20312: LD_VAR 0 2
20316: PUSH
20317: LD_INT 1
20319: ARRAY
20320: PPUSH
20321: LD_STRING D6c-Sol3-1
20323: PPUSH
20324: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
20328: LD_EXP 1
20332: PPUSH
20333: LD_STRING D6c-JMM-1
20335: PPUSH
20336: CALL_OW 88
// if IsOk ( Cyrus ) then
20340: LD_EXP 7
20344: PPUSH
20345: CALL_OW 302
20349: IFFALSE 20363
// Say ( Cyrus , D6c-Cyrus-1 ) ;
20351: LD_EXP 7
20355: PPUSH
20356: LD_STRING D6c-Cyrus-1
20358: PPUSH
20359: CALL_OW 88
// if IsOk ( Bobby ) then
20363: LD_EXP 6
20367: PPUSH
20368: CALL_OW 302
20372: IFFALSE 20386
// Say ( Bobby , D6c-Bobby-1 ) ;
20374: LD_EXP 6
20378: PPUSH
20379: LD_STRING D6c-Bobby-1
20381: PPUSH
20382: CALL_OW 88
// if IsOk ( Cornel ) then
20386: LD_EXP 12
20390: PPUSH
20391: CALL_OW 302
20395: IFFALSE 20409
// Say ( Cornel , D6c-Corn-1 ) ;
20397: LD_EXP 12
20401: PPUSH
20402: LD_STRING D6c-Corn-1
20404: PPUSH
20405: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
20409: LD_VAR 0 2
20413: PUSH
20414: LD_INT 2
20416: ARRAY
20417: PPUSH
20418: LD_STRING D6c-Sol1-1
20420: PPUSH
20421: CALL_OW 88
// if IsOk ( Lisa ) then
20425: LD_EXP 4
20429: PPUSH
20430: CALL_OW 302
20434: IFFALSE 20448
// Say ( Lisa , D6c-Lisa-1 ) ;
20436: LD_EXP 4
20440: PPUSH
20441: LD_STRING D6c-Lisa-1
20443: PPUSH
20444: CALL_OW 88
// if IsOk ( Gary ) then
20448: LD_EXP 13
20452: PPUSH
20453: CALL_OW 302
20457: IFFALSE 20471
// Say ( Gary , D6c-Gary-1 ) ;
20459: LD_EXP 13
20463: PPUSH
20464: LD_STRING D6c-Gary-1
20466: PPUSH
20467: CALL_OW 88
// if IsOK ( Donaldson ) then
20471: LD_EXP 5
20475: PPUSH
20476: CALL_OW 302
20480: IFFALSE 20494
// Say ( Donaldson , D6c-Don-1 ) ;
20482: LD_EXP 5
20486: PPUSH
20487: LD_STRING D6c-Don-1
20489: PPUSH
20490: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
20494: LD_VAR 0 2
20498: PUSH
20499: LD_INT 3
20501: ARRAY
20502: PPUSH
20503: LD_STRING D6c-Sol2-1
20505: PPUSH
20506: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
20510: LD_INT 22
20512: PUSH
20513: LD_INT 1
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 21
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PPUSH
20534: CALL_OW 69
20538: PPUSH
20539: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
20543: LD_INT 22
20545: PUSH
20546: LD_INT 4
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 21
20555: PUSH
20556: LD_INT 1
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PPUSH
20567: CALL_OW 69
20571: PPUSH
20572: CALL_OW 122
// wait ( 0 0$1 ) ;
20576: LD_INT 35
20578: PPUSH
20579: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
20583: LD_ADDR_VAR 0 3
20587: PUSH
20588: LD_INT 22
20590: PUSH
20591: LD_INT 1
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 21
20600: PUSH
20601: LD_INT 1
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PPUSH
20612: CALL_OW 69
20616: PUSH
20617: LD_EXP 1
20621: PUSH
20622: EMPTY
20623: LIST
20624: DIFF
20625: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
20626: LD_ADDR_VAR 0 4
20630: PUSH
20631: LD_INT 22
20633: PUSH
20634: LD_INT 4
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 21
20643: PUSH
20644: LD_INT 1
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PPUSH
20655: CALL_OW 69
20659: ST_TO_ADDR
// for i := 1 to tmp2 do
20660: LD_ADDR_VAR 0 1
20664: PUSH
20665: DOUBLE
20666: LD_INT 1
20668: DEC
20669: ST_TO_ADDR
20670: LD_VAR 0 4
20674: PUSH
20675: FOR_TO
20676: IFFALSE 20727
// begin ComMoveXY ( tmp2 [ i ] , 43 + i , 65 ) ;
20678: LD_VAR 0 4
20682: PUSH
20683: LD_VAR 0 1
20687: ARRAY
20688: PPUSH
20689: LD_INT 43
20691: PUSH
20692: LD_VAR 0 1
20696: PLUS
20697: PPUSH
20698: LD_INT 65
20700: PPUSH
20701: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
20705: LD_VAR 0 4
20709: PUSH
20710: LD_VAR 0 1
20714: ARRAY
20715: PPUSH
20716: LD_EXP 1
20720: PPUSH
20721: CALL_OW 179
// end ;
20725: GO 20675
20727: POP
20728: POP
// for i := 1 to tmp1 do
20729: LD_ADDR_VAR 0 1
20733: PUSH
20734: DOUBLE
20735: LD_INT 1
20737: DEC
20738: ST_TO_ADDR
20739: LD_VAR 0 3
20743: PUSH
20744: FOR_TO
20745: IFFALSE 20796
// begin ComMoveXY ( tmp1 [ i ] , 43 + i , 64 ) ;
20747: LD_VAR 0 3
20751: PUSH
20752: LD_VAR 0 1
20756: ARRAY
20757: PPUSH
20758: LD_INT 43
20760: PUSH
20761: LD_VAR 0 1
20765: PLUS
20766: PPUSH
20767: LD_INT 64
20769: PPUSH
20770: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
20774: LD_VAR 0 3
20778: PUSH
20779: LD_VAR 0 1
20783: ARRAY
20784: PPUSH
20785: LD_EXP 1
20789: PPUSH
20790: CALL_OW 179
// end ;
20794: GO 20744
20796: POP
20797: POP
// ComMoveXY ( JMM , 48 , 68 ) ;
20798: LD_EXP 1
20802: PPUSH
20803: LD_INT 48
20805: PPUSH
20806: LD_INT 68
20808: PPUSH
20809: CALL_OW 111
// AddComTurnXY ( JMM , 47 , 65 ) ;
20813: LD_EXP 1
20817: PPUSH
20818: LD_INT 47
20820: PPUSH
20821: LD_INT 65
20823: PPUSH
20824: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
20828: LD_INT 35
20830: PPUSH
20831: CALL_OW 67
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
20835: LD_EXP 1
20839: PPUSH
20840: LD_INT 48
20842: PPUSH
20843: LD_INT 68
20845: PPUSH
20846: CALL_OW 297
20850: PUSH
20851: LD_INT 2
20853: LESS
20854: IFFALSE 20828
// wait ( 0 0$2 ) ;
20856: LD_INT 70
20858: PPUSH
20859: CALL_OW 67
// Say ( tmp [ 2 ] , D6c-Sol3-2 ) ;
20863: LD_VAR 0 2
20867: PUSH
20868: LD_INT 2
20870: ARRAY
20871: PPUSH
20872: LD_STRING D6c-Sol3-2
20874: PPUSH
20875: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
20879: LD_EXP 1
20883: PPUSH
20884: LD_STRING D6c-JMM-2
20886: PPUSH
20887: CALL_OW 88
// Video ( false ) ;
20891: LD_INT 0
20893: PPUSH
20894: CALL 5670 0 1
// centerPowell = 0 ;
20898: LD_ADDR_EXP 53
20902: PUSH
20903: LD_INT 0
20905: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
20906: LD_INT 22
20908: PUSH
20909: LD_INT 4
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PPUSH
20916: CALL_OW 69
20920: PPUSH
20921: LD_INT 1
20923: PPUSH
20924: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
20928: LD_STRING M2
20930: PPUSH
20931: CALL_OW 337
// timerStatus = 1 ;
20935: LD_ADDR_EXP 71
20939: PUSH
20940: LD_INT 1
20942: ST_TO_ADDR
// missionStage = 1 ;
20943: LD_ADDR_EXP 73
20947: PUSH
20948: LD_INT 1
20950: ST_TO_ADDR
// startAttacks = 1 ;
20951: LD_ADDR_EXP 51
20955: PUSH
20956: LD_INT 1
20958: ST_TO_ADDR
// end ;
20959: PPOPN 4
20961: END
// every 0 0$1 trigger centerPowell = 1 do
20962: LD_EXP 53
20966: PUSH
20967: LD_INT 1
20969: EQUAL
20970: IFFALSE 21061
20972: GO 20974
20974: DISABLE
// begin enable ;
20975: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
20976: LD_EXP 17
20980: PUSH
20981: LD_EXP 54
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PPUSH
20990: LD_INT 1000
20992: PPUSH
20993: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
20997: LD_EXP 52
21001: PPUSH
21002: LD_INT 13
21004: PPUSH
21005: CALL_OW 308
21009: NOT
21010: IFFALSE 21024
// SetLives ( powellVeh , 1000 ) ;
21012: LD_EXP 52
21016: PPUSH
21017: LD_INT 1000
21019: PPUSH
21020: CALL_OW 234
// if not IsInUnit ( Powell ) then
21024: LD_EXP 17
21028: PPUSH
21029: CALL_OW 310
21033: NOT
21034: IFFALSE 21047
// CenterNowOnUnits ( Powell ) else
21036: LD_EXP 17
21040: PPUSH
21041: CALL_OW 87
21045: GO 21061
// CenterNowOnUnits ( IsInUnit ( Powell ) ) ;
21047: LD_EXP 17
21051: PPUSH
21052: CALL_OW 310
21056: PPUSH
21057: CALL_OW 87
// end ;
21061: END
// every 0 0$1 trigger timeAction >= 0 0$16 do
21062: LD_EXP 72
21066: PUSH
21067: LD_INT 560
21069: GREATEREQUAL
21070: IFFALSE 21275
21072: GO 21074
21074: DISABLE
// begin DialogueOn ;
21075: CALL_OW 6
// SayRadio ( LegionFriend , D7-Friend-1 ) ;
21079: LD_EXP 35
21083: PPUSH
21084: LD_STRING D7-Friend-1
21086: PPUSH
21087: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
21091: LD_EXP 1
21095: PPUSH
21096: LD_STRING D7-JMM-1
21098: PPUSH
21099: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-2 ) ;
21103: LD_EXP 35
21107: PPUSH
21108: LD_STRING D7-Friend-2
21110: PPUSH
21111: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
21115: LD_EXP 1
21119: PPUSH
21120: LD_STRING D7-JMM-2
21122: PPUSH
21123: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-3 ) ;
21127: LD_EXP 35
21131: PPUSH
21132: LD_STRING D7-Friend-3
21134: PPUSH
21135: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
21139: LD_EXP 1
21143: PPUSH
21144: LD_STRING D7-JMM-3
21146: PPUSH
21147: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-4 ) ;
21151: LD_EXP 35
21155: PPUSH
21156: LD_STRING D7-Friend-4
21158: PPUSH
21159: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
21163: LD_EXP 1
21167: PPUSH
21168: LD_STRING D7-JMM-4
21170: PPUSH
21171: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-5 ) ;
21175: LD_EXP 35
21179: PPUSH
21180: LD_STRING D7-Friend-5
21182: PPUSH
21183: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
21187: LD_EXP 1
21191: PPUSH
21192: LD_STRING D7-JMM-5
21194: PPUSH
21195: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-6 ) ;
21199: LD_EXP 35
21203: PPUSH
21204: LD_STRING D7-Friend-6
21206: PPUSH
21207: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
21211: LD_EXP 1
21215: PPUSH
21216: LD_STRING D7-JMM-6
21218: PPUSH
21219: CALL_OW 88
// DialogueOff ;
21223: CALL_OW 7
// PlaceUnitArea ( Kozlov , KozlovSpawn , false ) ;
21227: LD_EXP 33
21231: PPUSH
21232: LD_INT 15
21234: PPUSH
21235: LD_INT 0
21237: PPUSH
21238: CALL_OW 49
// SetClass ( Kozlov , 2 ) ;
21242: LD_EXP 33
21246: PPUSH
21247: LD_INT 2
21249: PPUSH
21250: CALL_OW 336
// ComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
21254: LD_EXP 33
21258: PPUSH
21259: LD_INT 2
21261: PPUSH
21262: LD_INT 78
21264: PPUSH
21265: LD_INT 12
21267: PPUSH
21268: LD_INT 3
21270: PPUSH
21271: CALL_OW 145
// end ;
21275: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 6 , 5 , 4 ] [ Difficulty ] do
21276: LD_INT 22
21278: PUSH
21279: LD_INT 8
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 21
21288: PUSH
21289: LD_INT 1
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 23
21298: PUSH
21299: LD_INT 2
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: LIST
21310: PPUSH
21311: CALL_OW 69
21315: PUSH
21316: LD_INT 6
21318: PUSH
21319: LD_INT 5
21321: PUSH
21322: LD_INT 4
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: LIST
21329: PUSH
21330: LD_OWVAR 67
21334: ARRAY
21335: LESSEQUAL
21336: IFFALSE 21538
21338: GO 21340
21340: DISABLE
// begin PlaceUnitArea ( Kurt , KurtSpawn , false ) ;
21341: LD_EXP 28
21345: PPUSH
21346: LD_INT 19
21348: PPUSH
21349: LD_INT 0
21351: PPUSH
21352: CALL_OW 49
// KillUnit ( Kozlov ) ;
21356: LD_EXP 33
21360: PPUSH
21361: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
21365: LD_INT 22
21367: PUSH
21368: LD_INT 8
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 21
21377: PUSH
21378: LD_INT 3
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 23
21387: PUSH
21388: LD_INT 3
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 30
21397: PUSH
21398: LD_INT 3
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: PPUSH
21411: CALL_OW 69
21415: PUSH
21416: LD_INT 1
21418: ARRAY
21419: PPUSH
21420: CALL_OW 66
// DialogueOn ;
21424: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
21428: LD_EXP 1
21432: PPUSH
21433: LD_STRING D13-JMM-1
21435: PPUSH
21436: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
21440: LD_EXP 28
21444: PPUSH
21445: LD_STRING D13-Kurt-1
21447: PPUSH
21448: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
21452: LD_EXP 1
21456: PPUSH
21457: LD_STRING D13-JMM-2
21459: PPUSH
21460: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
21464: LD_EXP 28
21468: PPUSH
21469: LD_STRING D13-Kurt-2a
21471: PPUSH
21472: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
21476: LD_EXP 1
21480: PPUSH
21481: LD_STRING D13-JMM-3
21483: PPUSH
21484: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
21488: LD_EXP 28
21492: PPUSH
21493: LD_STRING D13-Kurt-3
21495: PPUSH
21496: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
21500: LD_EXP 1
21504: PPUSH
21505: LD_STRING D13-JMM-4
21507: PPUSH
21508: CALL_OW 88
// DialogueOff ;
21512: CALL_OW 7
// SetSide ( FilterAllUnits ( [ f_side , 8 ] ) , 1 ) ;
21516: LD_INT 22
21518: PUSH
21519: LD_INT 8
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PPUSH
21526: CALL_OW 69
21530: PPUSH
21531: LD_INT 1
21533: PPUSH
21534: CALL_OW 235
// end ;
21538: END
// every 0 0$1 trigger timeAction >= 15 15$02 do
21539: LD_EXP 72
21543: PUSH
21544: LD_INT 31570
21546: GREATEREQUAL
21547: IFFALSE 21623
21549: GO 21551
21551: DISABLE
// begin if KappaStatus = 1 and JMMGirlVeh = [ ] then
21552: LD_EXP 60
21556: PUSH
21557: LD_INT 1
21559: EQUAL
21560: PUSH
21561: LD_EXP 58
21565: PUSH
21566: EMPTY
21567: EQUAL
21568: AND
21569: IFFALSE 21575
// PrepareSupportFromKappa ;
21571: CALL 2323 0 0
// if KappaStatus = 0 and JMMGirlStatus = 1 then
21575: LD_EXP 60
21579: PUSH
21580: LD_INT 0
21582: EQUAL
21583: PUSH
21584: LD_EXP 61
21588: PUSH
21589: LD_INT 1
21591: EQUAL
21592: AND
21593: IFFALSE 21599
// PrepareAttackFromKappa ;
21595: CALL 4226 0 0
// if KappaStatus = 0 and JMMGirlStatus = 0 then
21599: LD_EXP 60
21603: PUSH
21604: LD_INT 0
21606: EQUAL
21607: PUSH
21608: LD_EXP 61
21612: PUSH
21613: LD_INT 0
21615: EQUAL
21616: AND
21617: IFFALSE 21623
// PrepareAttackFromKappa ;
21619: CALL 4226 0 0
// end ;
21623: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
21624: LD_INT 1
21626: PPUSH
21627: LD_EXP 32
21631: PPUSH
21632: CALL_OW 292
21636: IFFALSE 21904
21638: GO 21640
21640: DISABLE
// begin missionStage = 2 ;
21641: LD_ADDR_EXP 73
21645: PUSH
21646: LD_INT 2
21648: ST_TO_ADDR
// CenterNowOnUnits ( sewiVeh ) ;
21649: LD_EXP 32
21653: PPUSH
21654: CALL_OW 87
// DialogueOn ;
21658: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
21662: LD_EXP 1
21666: PPUSH
21667: LD_STRING D10nB-JMM-1
21669: PPUSH
21670: CALL_OW 88
// if BurlakStatus = 1 then
21674: LD_EXP 55
21678: PUSH
21679: LD_INT 1
21681: EQUAL
21682: IFFALSE 21696
// Say ( Vsevolod , D10nB-Vse-1a ) ;
21684: LD_EXP 31
21688: PPUSH
21689: LD_STRING D10nB-Vse-1a
21691: PPUSH
21692: CALL_OW 88
// if BurlakStatus = 0 then
21696: LD_EXP 55
21700: PUSH
21701: LD_INT 0
21703: EQUAL
21704: IFFALSE 21718
// Say ( Vsevolod , D10nB-Vse-1 ) ;
21706: LD_EXP 31
21710: PPUSH
21711: LD_STRING D10nB-Vse-1
21713: PPUSH
21714: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
21718: LD_EXP 1
21722: PPUSH
21723: LD_STRING D10nB-JMM-2
21725: PPUSH
21726: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 1 then
21730: LD_EXP 60
21734: PUSH
21735: LD_EXP 61
21739: PUSH
21740: LD_INT 1
21742: EQUAL
21743: AND
21744: IFFALSE 21758
// Say ( Vsevolod , D10nB-Vse-5 ) ;
21746: LD_EXP 31
21750: PPUSH
21751: LD_STRING D10nB-Vse-5
21753: PPUSH
21754: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 0 then
21758: LD_EXP 60
21762: PUSH
21763: LD_EXP 61
21767: PUSH
21768: LD_INT 0
21770: EQUAL
21771: AND
21772: IFFALSE 21900
// begin if JMMGirl = 1 then
21774: LD_EXP 59
21778: PUSH
21779: LD_INT 1
21781: EQUAL
21782: IFFALSE 21832
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
21784: LD_EXP 31
21788: PPUSH
21789: LD_STRING D10nB-Vse-2
21791: PPUSH
21792: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
21796: LD_EXP 1
21800: PPUSH
21801: LD_STRING D10nB-JMM-3
21803: PPUSH
21804: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
21808: LD_EXP 31
21812: PPUSH
21813: LD_STRING D10nB-Vse-3
21815: PPUSH
21816: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
21820: LD_EXP 1
21824: PPUSH
21825: LD_STRING D10nB-JMM-4
21827: PPUSH
21828: CALL_OW 88
// end ; if JMMGirl = 2 then
21832: LD_EXP 59
21836: PUSH
21837: LD_INT 2
21839: EQUAL
21840: IFFALSE 21866
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
21842: LD_EXP 31
21846: PPUSH
21847: LD_STRING D10nB-Vse-4
21849: PPUSH
21850: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
21854: LD_EXP 1
21858: PPUSH
21859: LD_STRING D10nB-JMM-5
21861: PPUSH
21862: CALL_OW 88
// end ; if JMMGirl = 3 then
21866: LD_EXP 59
21870: PUSH
21871: LD_INT 3
21873: EQUAL
21874: IFFALSE 21900
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
21876: LD_EXP 31
21880: PPUSH
21881: LD_STRING D10nB-Vse-5
21883: PPUSH
21884: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
21888: LD_EXP 1
21892: PPUSH
21893: LD_STRING D10nB-JMM-6
21895: PPUSH
21896: CALL_OW 88
// end ; end ; DialogueOff ;
21900: CALL_OW 7
// end ;
21904: END
// every 0 0$1 trigger timeAction >= 30 30$02 do
21905: LD_EXP 72
21909: PUSH
21910: LD_INT 63070
21912: GREATEREQUAL
21913: IFFALSE 22191
21915: GO 21917
21917: DISABLE
// begin PrepareOmegaTeam ;
21918: CALL 2712 0 0
// missionStage = 3 ;
21922: LD_ADDR_EXP 73
21926: PUSH
21927: LD_INT 3
21929: ST_TO_ADDR
// DialogueOn ;
21930: CALL_OW 6
// if StevensStatus = 1 then
21934: LD_EXP 56
21938: PUSH
21939: LD_INT 1
21941: EQUAL
21942: IFFALSE 22054
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
21944: LD_EXP 3
21948: PPUSH
21949: CALL_OW 310
21953: PPUSH
21954: CALL_OW 87
// Say ( Stevens , D8-Huck-1 ) ;
21958: LD_EXP 3
21962: PPUSH
21963: LD_STRING D8-Huck-1
21965: PPUSH
21966: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
21970: LD_EXP 1
21974: PPUSH
21975: LD_STRING D8-JMM-1
21977: PPUSH
21978: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
21982: LD_EXP 3
21986: PPUSH
21987: LD_STRING D8-Huck-2
21989: PPUSH
21990: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
21994: LD_EXP 1
21998: PPUSH
21999: LD_STRING D8-JMM-2
22001: PPUSH
22002: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
22006: LD_EXP 3
22010: PPUSH
22011: LD_STRING D8-Huck-3
22013: PPUSH
22014: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
22018: LD_EXP 1
22022: PPUSH
22023: LD_STRING D8-JMM-3
22025: PPUSH
22026: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
22030: LD_EXP 3
22034: PPUSH
22035: LD_STRING D8-Huck-4
22037: PPUSH
22038: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
22042: LD_EXP 1
22046: PPUSH
22047: LD_STRING D8-JMM-4
22049: PPUSH
22050: CALL_OW 88
// end ; if StevensStatus = 0 then
22054: LD_EXP 56
22058: PUSH
22059: LD_INT 0
22061: EQUAL
22062: IFFALSE 22174
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
22064: LD_EXP 21
22068: PPUSH
22069: CALL_OW 310
22073: PPUSH
22074: CALL_OW 87
// Say ( Baker , D8-Huck-1 ) ;
22078: LD_EXP 21
22082: PPUSH
22083: LD_STRING D8-Huck-1
22085: PPUSH
22086: CALL_OW 88
// Say ( JMM , D8-JMM-1a ) ;
22090: LD_EXP 1
22094: PPUSH
22095: LD_STRING D8-JMM-1a
22097: PPUSH
22098: CALL_OW 88
// Say ( Baker , D8-Huck-2 ) ;
22102: LD_EXP 21
22106: PPUSH
22107: LD_STRING D8-Huck-2
22109: PPUSH
22110: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
22114: LD_EXP 1
22118: PPUSH
22119: LD_STRING D8-JMM-2
22121: PPUSH
22122: CALL_OW 88
// Say ( Baker , D8-Huck-3 ) ;
22126: LD_EXP 21
22130: PPUSH
22131: LD_STRING D8-Huck-3
22133: PPUSH
22134: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
22138: LD_EXP 1
22142: PPUSH
22143: LD_STRING D8-JMM-3
22145: PPUSH
22146: CALL_OW 88
// Say ( Baker , D8-Huck-4 ) ;
22150: LD_EXP 21
22154: PPUSH
22155: LD_STRING D8-Huck-4
22157: PPUSH
22158: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
22162: LD_EXP 1
22166: PPUSH
22167: LD_STRING D8-JMM-4
22169: PPUSH
22170: CALL_OW 88
// end ; DialogueOff ;
22174: CALL_OW 7
// SetTech ( 1 , tech_SibFiss , state_enabled ) ;
22178: LD_INT 1
22180: PPUSH
22181: LD_INT 25
22183: PPUSH
22184: LD_INT 1
22186: PPUSH
22187: CALL_OW 322
// end ;
22191: END
// every 0 0$1 trigger timeAction >= 35 35$02 do var dec ;
22192: LD_EXP 72
22196: PUSH
22197: LD_INT 73570
22199: GREATEREQUAL
22200: IFFALSE 22550
22202: GO 22204
22204: DISABLE
22205: LD_INT 0
22207: PPUSH
// begin missionStage = 4 ;
22208: LD_ADDR_EXP 73
22212: PUSH
22213: LD_INT 4
22215: ST_TO_ADDR
// DialogueOn ;
22216: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
22220: LD_EXP 26
22224: PPUSH
22225: LD_STRING D9-Roth-1
22227: PPUSH
22228: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
22232: LD_EXP 1
22236: PPUSH
22237: LD_STRING D9-JMM-1
22239: PPUSH
22240: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
22244: LD_EXP 26
22248: PPUSH
22249: LD_STRING D9-Roth-2
22251: PPUSH
22252: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
22256: LD_EXP 26
22260: PPUSH
22261: LD_STRING D9-Roth-2a
22263: PPUSH
22264: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
22268: LD_EXP 24
22272: PPUSH
22273: LD_STRING D9-Pla-2
22275: PPUSH
22276: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
22280: LD_EXP 26
22284: PPUSH
22285: LD_STRING D9-Roth-3
22287: PPUSH
22288: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
22292: LD_EXP 24
22296: PPUSH
22297: LD_STRING D9-Pla-3
22299: PPUSH
22300: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
22304: LD_EXP 26
22308: PPUSH
22309: LD_STRING D9-Roth-4
22311: PPUSH
22312: CALL_OW 94
// dec = Query ( Q9 ) ;
22316: LD_ADDR_VAR 0 1
22320: PUSH
22321: LD_STRING Q9
22323: PPUSH
22324: CALL_OW 97
22328: ST_TO_ADDR
// if dec = 1 then
22329: LD_VAR 0 1
22333: PUSH
22334: LD_INT 1
22336: EQUAL
22337: IFFALSE 22351
// SayRadio ( Roth , D9a-Roth-1 ) ;
22339: LD_EXP 26
22343: PPUSH
22344: LD_STRING D9a-Roth-1
22346: PPUSH
22347: CALL_OW 94
// if dec = 2 then
22351: LD_VAR 0 1
22355: PUSH
22356: LD_INT 2
22358: EQUAL
22359: IFFALSE 22385
// begin Say ( JMM , D9b-JMM-1 ) ;
22361: LD_EXP 1
22365: PPUSH
22366: LD_STRING D9b-JMM-1
22368: PPUSH
22369: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
22373: LD_EXP 26
22377: PPUSH
22378: LD_STRING D9b-Roth-1
22380: PPUSH
22381: CALL_OW 94
// end ; if dec = 3 then
22385: LD_VAR 0 1
22389: PUSH
22390: LD_INT 3
22392: EQUAL
22393: IFFALSE 22455
// begin Say ( JMM , D9c-JMM-1 ) ;
22395: LD_EXP 1
22399: PPUSH
22400: LD_STRING D9c-JMM-1
22402: PPUSH
22403: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
22407: LD_EXP 26
22411: PPUSH
22412: LD_STRING D9c-Roth-1
22414: PPUSH
22415: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
22419: LD_EXP 1
22423: PPUSH
22424: LD_STRING D9c-JMM-2
22426: PPUSH
22427: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
22431: LD_EXP 26
22435: PPUSH
22436: LD_STRING D9c-Roth-2
22438: PPUSH
22439: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
22443: LD_EXP 1
22447: PPUSH
22448: LD_STRING D9c-JMM-3
22450: PPUSH
22451: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
22455: LD_EXP 26
22459: PPUSH
22460: LD_STRING D9c-Roth-3
22462: PPUSH
22463: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
22467: LD_EXP 26
22471: PPUSH
22472: LD_STRING D9cont-Roth-1
22474: PPUSH
22475: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
22479: LD_EXP 1
22483: PPUSH
22484: LD_STRING D9cont-JMM-1
22486: PPUSH
22487: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
22491: LD_EXP 26
22495: PPUSH
22496: LD_STRING D9cont-Roth-2
22498: PPUSH
22499: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
22503: LD_EXP 1
22507: PPUSH
22508: LD_STRING D9cont-JMM-2
22510: PPUSH
22511: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
22515: LD_EXP 26
22519: PPUSH
22520: LD_STRING D9cont-Roth-3
22522: PPUSH
22523: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
22527: LD_EXP 1
22531: PPUSH
22532: LD_STRING D9cont-JMM-3
22534: PPUSH
22535: CALL_OW 88
// DialogueOff ;
22539: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
22543: LD_STRING M3
22545: PPUSH
22546: CALL_OW 337
// end ;
22550: PPOPN 1
22552: END
// every 0 0$1 trigger timeAction >= 45 45$02 do
22553: LD_EXP 72
22557: PUSH
22558: LD_INT 94570
22560: GREATEREQUAL
22561: IFFALSE 22880
22563: GO 22565
22565: DISABLE
// begin DialogueOn ;
22566: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-1 , D5-FSol1-1 ) ;
22570: LD_INT 22
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 23
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 26
22592: PUSH
22593: LD_INT 1
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 2
22602: PUSH
22603: LD_INT 25
22605: PUSH
22606: LD_INT 1
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 25
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 25
22625: PUSH
22626: LD_INT 3
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 25
22635: PUSH
22636: LD_INT 4
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 25
22645: PUSH
22646: LD_INT 5
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 25
22655: PUSH
22656: LD_INT 8
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: PPUSH
22678: CALL_OW 69
22682: PPUSH
22683: LD_STRING D11-Sol1-1
22685: PPUSH
22686: LD_STRING D5-FSol1-1
22688: PPUSH
22689: CALL 5722 0 3
// SayRadio ( Platonov , D11-Pla-1 ) ;
22693: LD_EXP 24
22697: PPUSH
22698: LD_STRING D11-Pla-1
22700: PPUSH
22701: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
22705: LD_EXP 34
22709: PPUSH
22710: LD_STRING D11-Kov-1
22712: PPUSH
22713: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
22717: LD_EXP 24
22721: PPUSH
22722: LD_STRING D11-Pla-2
22724: PPUSH
22725: CALL_OW 94
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-2 , D5-FSol1-1 ) ;
22729: LD_INT 22
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 23
22741: PUSH
22742: LD_INT 1
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 26
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 2
22761: PUSH
22762: LD_INT 25
22764: PUSH
22765: LD_INT 1
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 25
22774: PUSH
22775: LD_INT 2
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 25
22784: PUSH
22785: LD_INT 3
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 25
22794: PUSH
22795: LD_INT 4
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 25
22804: PUSH
22805: LD_INT 5
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 25
22814: PUSH
22815: LD_INT 8
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: PPUSH
22837: CALL_OW 69
22841: PPUSH
22842: LD_STRING D11-Sol1-2
22844: PPUSH
22845: LD_STRING D5-FSol1-1
22847: PPUSH
22848: CALL 5722 0 3
// Say ( JMM , D11-JMM-2 ) ;
22852: LD_EXP 1
22856: PPUSH
22857: LD_STRING D11-JMM-2
22859: PPUSH
22860: CALL_OW 88
// DialogueOff ;
22864: CALL_OW 7
// PreapreMehBehs ;
22868: CALL 4719 0 0
// missionStage = 5 ;
22872: LD_ADDR_EXP 73
22876: PUSH
22877: LD_INT 5
22879: ST_TO_ADDR
// end ;
22880: END
// every 0 0$1 trigger timeAction >= 50 50$02 do var dec , time ;
22881: LD_EXP 72
22885: PUSH
22886: LD_INT 105070
22888: GREATEREQUAL
22889: IFFALSE 23280
22891: GO 22893
22893: DISABLE
22894: LD_INT 0
22896: PPUSH
22897: PPUSH
// begin time = 0 0$00 ;
22898: LD_ADDR_VAR 0 2
22902: PUSH
22903: LD_INT 0
22905: ST_TO_ADDR
// DialogueOn ;
22906: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
22910: LD_EXP 24
22914: PPUSH
22915: LD_STRING D15-Pla-1
22917: PPUSH
22918: CALL_OW 94
// dec = Query ( Q15a ) ;
22922: LD_ADDR_VAR 0 1
22926: PUSH
22927: LD_STRING Q15a
22929: PPUSH
22930: CALL_OW 97
22934: ST_TO_ADDR
// if dec = 1 then
22935: LD_VAR 0 1
22939: PUSH
22940: LD_INT 1
22942: EQUAL
22943: IFFALSE 22964
// begin Say ( JMM , D15a-JMM-1 ) ;
22945: LD_EXP 1
22949: PPUSH
22950: LD_STRING D15a-JMM-1
22952: PPUSH
22953: CALL_OW 88
// YouLost ( Surrender ) ;
22957: LD_STRING Surrender
22959: PPUSH
22960: CALL_OW 104
// end ; if dec = 2 then
22964: LD_VAR 0 1
22968: PUSH
22969: LD_INT 2
22971: EQUAL
22972: IFFALSE 23002
// begin Say ( JMM , D15b-JMM-1 ) ;
22974: LD_EXP 1
22978: PPUSH
22979: LD_STRING D15b-JMM-1
22981: PPUSH
22982: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
22986: LD_EXP 24
22990: PPUSH
22991: LD_STRING D15b-Pla-1
22993: PPUSH
22994: CALL_OW 94
// DialogueOff ;
22998: CALL_OW 7
// end ; if dec = 3 then
23002: LD_VAR 0 1
23006: PUSH
23007: LD_INT 3
23009: EQUAL
23010: IFFALSE 23083
// begin Say ( JMM , D15c-JMM-1 ) ;
23012: LD_EXP 1
23016: PPUSH
23017: LD_STRING D15c-JMM-1
23019: PPUSH
23020: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
23024: LD_EXP 24
23028: PPUSH
23029: LD_STRING D15c-Pla-1
23031: PPUSH
23032: CALL_OW 94
// DialogueOff ;
23036: CALL_OW 7
// wait ( 0 0$15 ) ;
23040: LD_INT 525
23042: PPUSH
23043: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
23047: LD_EXP 24
23051: PPUSH
23052: LD_STRING D18-Pla-1
23054: PPUSH
23055: CALL_OW 88
// SiberiteExplosion ( GetX ( JMM ) , GetY ( JMM ) ) ;
23059: LD_EXP 1
23063: PPUSH
23064: CALL_OW 250
23068: PPUSH
23069: LD_EXP 1
23073: PPUSH
23074: CALL_OW 251
23078: PPUSH
23079: CALL_OW 358
// end ; if dec = 4 then
23083: LD_VAR 0 1
23087: PUSH
23088: LD_INT 4
23090: EQUAL
23091: IFFALSE 23129
// begin Say ( JMM , D15d-JMM-1 ) ;
23093: LD_EXP 1
23097: PPUSH
23098: LD_STRING D15d-JMM-1
23100: PPUSH
23101: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
23105: LD_EXP 24
23109: PPUSH
23110: LD_STRING D15d-Pla-1
23112: PPUSH
23113: CALL_OW 94
// DialogueOff ;
23117: CALL_OW 7
// missionStage = 6 ;
23121: LD_ADDR_EXP 73
23125: PUSH
23126: LD_INT 6
23128: ST_TO_ADDR
// end ; if dec = 2 then
23129: LD_VAR 0 1
23133: PUSH
23134: LD_INT 2
23136: EQUAL
23137: IFFALSE 23210
// begin repeat wait ( 0 0$01 ) ;
23139: LD_INT 35
23141: PPUSH
23142: CALL_OW 67
// time = time + 0 0$01 ;
23146: LD_ADDR_VAR 0 2
23150: PUSH
23151: LD_VAR 0 2
23155: PUSH
23156: LD_INT 35
23158: PLUS
23159: ST_TO_ADDR
// until time >= 3 3$00 ;
23160: LD_VAR 0 2
23164: PUSH
23165: LD_INT 6300
23167: GREATEREQUAL
23168: IFFALSE 23139
// DialogueOn ;
23170: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
23174: LD_EXP 1
23178: PPUSH
23179: LD_STRING D15d-JMM-1a
23181: PPUSH
23182: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
23186: LD_EXP 24
23190: PPUSH
23191: LD_STRING D15d-Pla-1
23193: PPUSH
23194: CALL_OW 94
// DialogueOff ;
23198: CALL_OW 7
// missionStage = 6 ;
23202: LD_ADDR_EXP 73
23206: PUSH
23207: LD_INT 6
23209: ST_TO_ADDR
// end ; if IsOk ( LegionFriend ) and GetSide ( LegionFriend ) = 1 then
23210: LD_EXP 35
23214: PPUSH
23215: CALL_OW 302
23219: PUSH
23220: LD_EXP 35
23224: PPUSH
23225: CALL_OW 255
23229: PUSH
23230: LD_INT 1
23232: EQUAL
23233: AND
23234: IFFALSE 23280
// begin DialogueOn ;
23236: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
23240: LD_EXP 1
23244: PPUSH
23245: LD_STRING D16-JMM-1
23247: PPUSH
23248: CALL_OW 88
// Say ( LegionFriend , D16-Friend-1 ) ;
23252: LD_EXP 35
23256: PPUSH
23257: LD_STRING D16-Friend-1
23259: PPUSH
23260: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
23264: LD_EXP 1
23268: PPUSH
23269: LD_STRING D16-JMM-2
23271: PPUSH
23272: CALL_OW 88
// DialogueOff ;
23276: CALL_OW 7
// end ; end ;
23280: PPOPN 2
23282: END
// every 1 1$0 trigger missionStage = 6 and IsOK ( LegionFriend ) and GetSide ( LegionFriend ) = 1 do
23283: LD_EXP 73
23287: PUSH
23288: LD_INT 6
23290: EQUAL
23291: PUSH
23292: LD_EXP 35
23296: PPUSH
23297: CALL_OW 302
23301: AND
23302: PUSH
23303: LD_EXP 35
23307: PPUSH
23308: CALL_OW 255
23312: PUSH
23313: LD_INT 1
23315: EQUAL
23316: AND
23317: IFFALSE 23712
23319: GO 23321
23321: DISABLE
// begin DialogueOn ;
23322: CALL_OW 6
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
23326: LD_INT 22
23328: PUSH
23329: LD_INT 1
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 2
23338: PUSH
23339: LD_INT 34
23341: PUSH
23342: LD_INT 8
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 35
23351: PUSH
23352: LD_INT 8
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: LIST
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PPUSH
23368: CALL_OW 69
23372: PUSH
23373: LD_INT 0
23375: GREATER
23376: IFFALSE 23392
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
23378: LD_EXP 24
23382: PPUSH
23383: LD_STRING D16c-Pla-1
23385: PPUSH
23386: CALL_OW 94
// end else
23390: GO 23577
// begin SayRadio ( Platonov , D16a-Pla-1 ) ;
23392: LD_EXP 24
23396: PPUSH
23397: LD_STRING D16a-Pla-1
23399: PPUSH
23400: CALL_OW 94
// if IsOK ( Stevens ) then
23404: LD_EXP 3
23408: PPUSH
23409: CALL_OW 302
23413: IFFALSE 23429
// begin Say ( Stevens , D16a-Huck-1 ) ;
23415: LD_EXP 3
23419: PPUSH
23420: LD_STRING D16a-Huck-1
23422: PPUSH
23423: CALL_OW 88
// end else
23427: GO 23577
// begin if IsOk ( Baker ) then
23429: LD_EXP 21
23433: PPUSH
23434: CALL_OW 302
23438: IFFALSE 23454
// begin Say ( Baker , D16a-Huck-1 ) ;
23440: LD_EXP 21
23444: PPUSH
23445: LD_STRING D16a-Huck-1
23447: PPUSH
23448: CALL_OW 88
// end else
23452: GO 23577
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D16a-Sol1-1 , D5-FSol1-1 ) ;
23454: LD_INT 22
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 23
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 26
23476: PUSH
23477: LD_INT 1
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 2
23486: PUSH
23487: LD_INT 25
23489: PUSH
23490: LD_INT 1
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 25
23499: PUSH
23500: LD_INT 2
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 25
23509: PUSH
23510: LD_INT 3
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 25
23519: PUSH
23520: LD_INT 4
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 25
23529: PUSH
23530: LD_INT 5
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 25
23539: PUSH
23540: LD_INT 8
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: PPUSH
23562: CALL_OW 69
23566: PPUSH
23567: LD_STRING D16a-Sol1-1
23569: PPUSH
23570: LD_STRING D5-FSol1-1
23572: PPUSH
23573: CALL 5722 0 3
// end ; end ; end ; Say ( JMM , D16a-JMM-1a ) ;
23577: LD_EXP 1
23581: PPUSH
23582: LD_STRING D16a-JMM-1a
23584: PPUSH
23585: CALL_OW 88
// DialogueOff ;
23589: CALL_OW 7
// SetSide ( LegionFriend , 3 ) ;
23593: LD_EXP 35
23597: PPUSH
23598: LD_INT 3
23600: PPUSH
23601: CALL_OW 235
// ComExitBuilding ( LegionFriend ) ;
23605: LD_EXP 35
23609: PPUSH
23610: CALL_OW 122
// ComExitVehicle ( LegionFriend ) ;
23614: LD_EXP 35
23618: PPUSH
23619: CALL_OW 121
// wait ( 0 0$1 ) ;
23623: LD_INT 35
23625: PPUSH
23626: CALL_OW 67
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
23630: LD_EXP 35
23634: PPUSH
23635: LD_INT 18
23637: PPUSH
23638: CALL_OW 113
// wait ( 0 0$3 ) ;
23642: LD_INT 105
23644: PPUSH
23645: CALL_OW 67
// DialogueOn ;
23649: CALL_OW 6
// Say ( JMM , D16a-JMM-1 ) ;
23653: LD_EXP 1
23657: PPUSH
23658: LD_STRING D16a-JMM-1
23660: PPUSH
23661: CALL_OW 88
// DialogueOff ;
23665: CALL_OW 7
// wait ( 0 0$30 ) ;
23669: LD_INT 1050
23671: PPUSH
23672: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
23676: LD_EXP 24
23680: PPUSH
23681: LD_STRING D18-Pla-1
23683: PPUSH
23684: CALL_OW 88
// SiberiteExplosion ( GetX ( JMM ) , GetY ( JMM ) ) ;
23688: LD_EXP 1
23692: PPUSH
23693: CALL_OW 250
23697: PPUSH
23698: LD_EXP 1
23702: PPUSH
23703: CALL_OW 251
23707: PPUSH
23708: CALL_OW 358
// end ;
23712: END
// every 0 0$1 trigger GetSide ( LegionFriend ) = 3 do var i ;
23713: LD_EXP 35
23717: PPUSH
23718: CALL_OW 255
23722: PUSH
23723: LD_INT 3
23725: EQUAL
23726: IFFALSE 23833
23728: GO 23730
23730: DISABLE
23731: LD_INT 0
23733: PPUSH
// begin enable ;
23734: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_outside ] ] ) do
23735: LD_ADDR_VAR 0 1
23739: PUSH
23740: LD_INT 22
23742: PUSH
23743: LD_INT 1
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 21
23752: PUSH
23753: LD_INT 1
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 56
23762: PUSH
23763: EMPTY
23764: LIST
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: LIST
23770: PPUSH
23771: CALL_OW 69
23775: PUSH
23776: FOR_IN
23777: IFFALSE 23831
// begin if GetDistUnits ( i , LegionFriend ) < 8 then
23779: LD_VAR 0 1
23783: PPUSH
23784: LD_EXP 35
23788: PPUSH
23789: CALL_OW 296
23793: PUSH
23794: LD_INT 8
23796: LESS
23797: IFFALSE 23829
// begin disable ;
23799: DISABLE
// DialogueOn ;
23800: CALL_OW 6
// CenterNowOnUnits ( LegionFriend ) ;
23804: LD_EXP 35
23808: PPUSH
23809: CALL_OW 87
// Say ( LegionFriend , D16a-Friend-1 ) ;
23813: LD_EXP 35
23817: PPUSH
23818: LD_STRING D16a-Friend-1
23820: PPUSH
23821: CALL_OW 88
// DialogueOff ;
23825: CALL_OW 7
// end ; end ;
23829: GO 23776
23831: POP
23832: POP
// end ;
23833: PPOPN 1
23835: END
// every 5 5$0 trigger missionStage = 6 and not GetSide ( LegionFriend ) do
23836: LD_EXP 73
23840: PUSH
23841: LD_INT 6
23843: EQUAL
23844: PUSH
23845: LD_EXP 35
23849: PPUSH
23850: CALL_OW 255
23854: NOT
23855: AND
23856: IFFALSE 23994
23858: GO 23860
23860: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
23861: LD_INT 22
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 2
23873: PUSH
23874: LD_INT 34
23876: PUSH
23877: LD_INT 8
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 35
23886: PUSH
23887: LD_INT 8
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PPUSH
23903: CALL_OW 69
23907: PUSH
23908: LD_INT 0
23910: GREATER
23911: IFFALSE 23927
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
23913: LD_EXP 24
23917: PPUSH
23918: LD_STRING D16c-Pla-1
23920: PPUSH
23921: CALL_OW 94
// end else
23925: GO 23994
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
23927: LD_EXP 24
23931: PPUSH
23932: LD_STRING D16b-Pla-1
23934: PPUSH
23935: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
23939: LD_EXP 1
23943: PPUSH
23944: LD_STRING D16b-JMM-1
23946: PPUSH
23947: CALL_OW 88
// wait ( 0 0$15 ) ;
23951: LD_INT 525
23953: PPUSH
23954: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
23958: LD_EXP 24
23962: PPUSH
23963: LD_STRING D18-Pla-1
23965: PPUSH
23966: CALL_OW 88
// SiberiteExplosion ( GetX ( JMM ) , GetY ( JMM ) ) ;
23970: LD_EXP 1
23974: PPUSH
23975: CALL_OW 250
23979: PPUSH
23980: LD_EXP 1
23984: PPUSH
23985: CALL_OW 251
23989: PPUSH
23990: CALL_OW 358
// end ; end ;
23994: END
// every 0 0$1 trigger missionStage >= 5 do var i ;
23995: LD_EXP 73
23999: PUSH
24000: LD_INT 5
24002: GREATEREQUAL
24003: IFFALSE 24196
24005: GO 24007
24007: DISABLE
24008: LD_INT 0
24010: PPUSH
// begin enable ;
24011: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_behemoth ] , [ f_constructed ] ] ) do
24012: LD_ADDR_VAR 0 1
24016: PUSH
24017: LD_INT 22
24019: PUSH
24020: LD_INT 6
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 30
24029: PUSH
24030: LD_INT 37
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 57
24039: PUSH
24040: EMPTY
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: PPUSH
24048: CALL_OW 69
24052: PUSH
24053: FOR_IN
24054: IFFALSE 24127
// begin if See ( 1 , i ) then
24056: LD_INT 1
24058: PPUSH
24059: LD_VAR 0 1
24063: PPUSH
24064: CALL_OW 292
24068: IFFALSE 24125
// begin disable ;
24070: DISABLE
// DialogueOn ;
24071: CALL_OW 6
// Say ( JMM , D17a-JMM-1 ) ;
24075: LD_EXP 1
24079: PPUSH
24080: LD_STRING D17a-JMM-1
24082: PPUSH
24083: CALL_OW 88
// DialogueOff ;
24087: CALL_OW 7
// behemothStatus = 0 ;
24091: LD_ADDR_EXP 42
24095: PUSH
24096: LD_INT 0
24098: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
24099: LD_STRING M4a
24101: PPUSH
24102: CALL_OW 337
// wait ( 0 0$2 ) ;
24106: LD_INT 70
24108: PPUSH
24109: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
24113: LD_EXP 24
24117: PPUSH
24118: LD_STRING D18-Pla-1
24120: PPUSH
24121: CALL_OW 88
// end ; end ;
24125: GO 24053
24127: POP
24128: POP
// for i in ruBehs do
24129: LD_ADDR_VAR 0 1
24133: PUSH
24134: LD_EXP 41
24138: PUSH
24139: FOR_IN
24140: IFFALSE 24194
// begin if See ( 1 , i ) then
24142: LD_INT 1
24144: PPUSH
24145: LD_VAR 0 1
24149: PPUSH
24150: CALL_OW 292
24154: IFFALSE 24192
// begin disable ;
24156: DISABLE
// DialogueOn ;
24157: CALL_OW 6
// Say ( JMM , D17b-JMM-1 ) ;
24161: LD_EXP 1
24165: PPUSH
24166: LD_STRING D17b-JMM-1
24168: PPUSH
24169: CALL_OW 88
// DialogueOff ;
24173: CALL_OW 7
// behemothStatus = 1 ;
24177: LD_ADDR_EXP 42
24181: PUSH
24182: LD_INT 1
24184: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
24185: LD_STRING M4b
24187: PPUSH
24188: CALL_OW 337
// end ; end ;
24192: GO 24139
24194: POP
24195: POP
// end ;
24196: PPOPN 1
24198: END
// every 0 0$1 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) do var i , tmp , arabianArmy ;
24199: LD_EXP 24
24203: PPUSH
24204: CALL_OW 301
24208: PUSH
24209: LD_EXP 25
24213: PPUSH
24214: CALL_OW 301
24218: AND
24219: IFFALSE 24748
24221: GO 24223
24223: DISABLE
24224: LD_INT 0
24226: PPUSH
24227: PPUSH
24228: PPUSH
// begin russianAI = 0 ;
24229: LD_ADDR_EXP 65
24233: PUSH
24234: LD_INT 0
24236: ST_TO_ADDR
// russianEscape = 1 ;
24237: LD_ADDR_EXP 69
24241: PUSH
24242: LD_INT 1
24244: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , true ) ;
24245: LD_INT 1
24247: PPUSH
24248: LD_INT 3
24250: PPUSH
24251: LD_INT 1
24253: PPUSH
24254: LD_INT 1
24256: PPUSH
24257: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
24261: LD_ADDR_VAR 0 1
24265: PUSH
24266: LD_INT 22
24268: PUSH
24269: LD_INT 3
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 21
24278: PUSH
24279: LD_INT 1
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PPUSH
24290: CALL_OW 69
24294: PUSH
24295: FOR_IN
24296: IFFALSE 24327
// if GetSex ( i ) = sex_male then
24298: LD_VAR 0 1
24302: PPUSH
24303: CALL_OW 258
24307: PUSH
24308: LD_INT 1
24310: EQUAL
24311: IFFALSE 24325
// begin tmp = i ;
24313: LD_ADDR_VAR 0 2
24317: PUSH
24318: LD_VAR 0 1
24322: ST_TO_ADDR
// break ;
24323: GO 24327
// end ;
24325: GO 24295
24327: POP
24328: POP
// DialogueOn ;
24329: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
24333: LD_VAR 0 2
24337: PPUSH
24338: LD_STRING DSurrenderRussians-RSol1-1a
24340: PPUSH
24341: CALL_OW 88
// DialogueOff ;
24345: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
24349: LD_INT 22
24351: PUSH
24352: LD_INT 3
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 21
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PPUSH
24373: CALL_OW 69
24377: PPUSH
24378: CALL_OW 122
// wait ( 0 0$1 ) ;
24382: LD_INT 35
24384: PPUSH
24385: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , RussianEscapeArea ) ;
24389: LD_INT 22
24391: PUSH
24392: LD_INT 3
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 21
24401: PUSH
24402: LD_INT 1
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PPUSH
24413: CALL_OW 69
24417: PPUSH
24418: LD_INT 25
24420: PPUSH
24421: CALL_OW 113
// wait ( 0 0$10 ) ;
24425: LD_INT 350
24427: PPUSH
24428: CALL_OW 67
// PrepareOmarArmy ;
24432: CALL 25736 0 0
// missionStage = 7 ;
24436: LD_ADDR_EXP 73
24440: PUSH
24441: LD_INT 7
24443: ST_TO_ADDR
// DialogueOn ;
24444: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
24448: LD_EXP 30
24452: PPUSH
24453: CALL_OW 87
// Say ( JMM , D19-JMM-1 ) ;
24457: LD_EXP 1
24461: PPUSH
24462: LD_STRING D19-JMM-1
24464: PPUSH
24465: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D19-Sol1-1 , D5-FSol1-1 ) ;
24469: LD_INT 22
24471: PUSH
24472: LD_INT 1
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 26
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 2
24491: PUSH
24492: LD_INT 25
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 25
24504: PUSH
24505: LD_INT 2
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 25
24514: PUSH
24515: LD_INT 3
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 25
24524: PUSH
24525: LD_INT 4
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 25
24534: PUSH
24535: LD_INT 5
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 25
24544: PUSH
24545: LD_INT 8
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: LIST
24565: PPUSH
24566: CALL_OW 69
24570: PPUSH
24571: LD_STRING D19-Sol1-1
24573: PPUSH
24574: LD_STRING D5-FSol1-1
24576: PPUSH
24577: CALL 5722 0 3
// Say ( JMM , D19-JMM-2 ) ;
24581: LD_EXP 1
24585: PPUSH
24586: LD_STRING D19-JMM-2
24588: PPUSH
24589: CALL_OW 88
// DialogueOff ;
24593: CALL_OW 7
// LaunchMines ;
24597: CALL 24751 0 0
// wait ( 0 0$3 ) ;
24601: LD_INT 105
24603: PPUSH
24604: CALL_OW 67
// arabianArmy = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
24608: LD_ADDR_VAR 0 3
24612: PUSH
24613: LD_INT 22
24615: PUSH
24616: LD_INT 2
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 21
24625: PUSH
24626: LD_INT 1
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PPUSH
24637: CALL_OW 69
24641: PUSH
24642: LD_INT 22
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 21
24654: PUSH
24655: LD_INT 1
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 25
24664: PUSH
24665: LD_INT 4
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: LIST
24676: PPUSH
24677: CALL_OW 69
24681: DIFF
24682: ST_TO_ADDR
// ComAgressiveMove ( arabianArmy , 178 , 66 ) ;
24683: LD_VAR 0 3
24687: PPUSH
24688: LD_INT 178
24690: PPUSH
24691: LD_INT 66
24693: PPUSH
24694: CALL_OW 114
// ComContaminate ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) , 177 , 69 ) ;
24698: LD_INT 22
24700: PUSH
24701: LD_INT 2
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 21
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 25
24720: PUSH
24721: LD_INT 4
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: LIST
24732: PPUSH
24733: CALL_OW 69
24737: PPUSH
24738: LD_INT 177
24740: PPUSH
24741: LD_INT 69
24743: PPUSH
24744: CALL_OW 158
// end ;
24748: PPOPN 3
24750: END
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
24751: LD_INT 0
24753: PPUSH
24754: PPUSH
24755: PPUSH
24756: PPUSH
24757: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
24758: LD_ADDR_VAR 0 2
24762: PUSH
24763: LD_INT 168
24765: PUSH
24766: LD_INT 18
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 169
24775: PUSH
24776: LD_INT 20
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 167
24785: PUSH
24786: LD_INT 20
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 164
24795: PUSH
24796: LD_INT 18
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 164
24805: PUSH
24806: LD_INT 19
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 163
24815: PUSH
24816: LD_INT 19
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 164
24825: PUSH
24826: LD_INT 21
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 165
24835: PUSH
24836: LD_INT 21
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 163
24845: PUSH
24846: LD_INT 20
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 164
24855: PUSH
24856: LD_INT 22
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 162
24865: PUSH
24866: LD_INT 20
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
24886: LD_ADDR_VAR 0 3
24890: PUSH
24891: LD_INT 169
24893: PUSH
24894: LD_INT 34
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 169
24903: PUSH
24904: LD_INT 35
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 167
24913: PUSH
24914: LD_INT 32
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 170
24923: PUSH
24924: LD_INT 31
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 173
24933: PUSH
24934: LD_INT 35
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 174
24943: PUSH
24944: LD_INT 39
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: ST_TO_ADDR
// for i = 1 to mines_pos do
24959: LD_ADDR_VAR 0 4
24963: PUSH
24964: DOUBLE
24965: LD_INT 1
24967: DEC
24968: ST_TO_ADDR
24969: LD_VAR 0 2
24973: PUSH
24974: FOR_TO
24975: IFFALSE 25187
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
24977: LD_VAR 0 2
24981: PUSH
24982: LD_VAR 0 4
24986: ARRAY
24987: PUSH
24988: LD_INT 1
24990: ARRAY
24991: PPUSH
24992: LD_VAR 0 2
24996: PUSH
24997: LD_VAR 0 4
25001: ARRAY
25002: PUSH
25003: LD_INT 2
25005: ARRAY
25006: PPUSH
25007: LD_INT 1
25009: PPUSH
25010: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
25014: LD_INT 1
25016: PPUSH
25017: LD_INT 3
25019: PPUSH
25020: CALL_OW 12
25024: PPUSH
25025: CALL_OW 67
// if i < mines_pos then
25029: LD_VAR 0 4
25033: PUSH
25034: LD_VAR 0 2
25038: LESS
25039: IFFALSE 25077
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
25041: LD_VAR 0 2
25045: PUSH
25046: LD_VAR 0 4
25050: ARRAY
25051: PUSH
25052: LD_INT 1
25054: ARRAY
25055: PPUSH
25056: LD_VAR 0 2
25060: PUSH
25061: LD_VAR 0 4
25065: ARRAY
25066: PUSH
25067: LD_INT 2
25069: ARRAY
25070: PPUSH
25071: CALL_OW 348
25075: GO 25185
// begin for j = 1 to mines_pos1 do
25077: LD_ADDR_VAR 0 5
25081: PUSH
25082: DOUBLE
25083: LD_INT 1
25085: DEC
25086: ST_TO_ADDR
25087: LD_VAR 0 3
25091: PUSH
25092: FOR_TO
25093: IFFALSE 25149
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
25095: LD_VAR 0 3
25099: PUSH
25100: LD_VAR 0 5
25104: ARRAY
25105: PUSH
25106: LD_INT 1
25108: ARRAY
25109: PPUSH
25110: LD_VAR 0 3
25114: PUSH
25115: LD_VAR 0 5
25119: ARRAY
25120: PUSH
25121: LD_INT 2
25123: ARRAY
25124: PPUSH
25125: LD_INT 1
25127: PPUSH
25128: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
25132: LD_INT 1
25134: PPUSH
25135: LD_INT 3
25137: PPUSH
25138: CALL_OW 12
25142: PPUSH
25143: CALL_OW 67
// end ;
25147: GO 25092
25149: POP
25150: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
25151: LD_VAR 0 2
25155: PUSH
25156: LD_VAR 0 4
25160: ARRAY
25161: PUSH
25162: LD_INT 1
25164: ARRAY
25165: PPUSH
25166: LD_VAR 0 2
25170: PUSH
25171: LD_VAR 0 4
25175: ARRAY
25176: PUSH
25177: LD_INT 2
25179: ARRAY
25180: PPUSH
25181: CALL_OW 347
// end ; end ;
25185: GO 24974
25187: POP
25188: POP
// end ;
25189: LD_VAR 0 1
25193: RET
// every 0 0$1 trigger missionStage = 7 and IsDead ( Omar ) and IsOk ( Heike ) do
25194: LD_EXP 73
25198: PUSH
25199: LD_INT 7
25201: EQUAL
25202: PUSH
25203: LD_EXP 29
25207: PPUSH
25208: CALL_OW 301
25212: AND
25213: PUSH
25214: LD_EXP 30
25218: PPUSH
25219: CALL_OW 302
25223: AND
25224: IFFALSE 25261
25226: GO 25228
25228: DISABLE
// begin DialogueOn ;
25229: CALL_OW 6
// Say ( JMM , D19a-JMM-1 ) ;
25233: LD_EXP 1
25237: PPUSH
25238: LD_STRING D19a-JMM-1
25240: PPUSH
25241: CALL_OW 88
// Say ( Heike , D19a-Hke-1 ) ;
25245: LD_EXP 30
25249: PPUSH
25250: LD_STRING D19a-Hke-1
25252: PPUSH
25253: CALL_OW 88
// DialogueOff ;
25257: CALL_OW 7
// end ;
25261: END
// every 0 0$1 trigger missionStage = 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
25262: LD_EXP 73
25266: PUSH
25267: LD_INT 7
25269: EQUAL
25270: PUSH
25271: LD_INT 22
25273: PUSH
25274: LD_INT 2
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 21
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PPUSH
25295: CALL_OW 69
25299: PUSH
25300: LD_INT 0
25302: EQUAL
25303: AND
25304: PUSH
25305: LD_INT 22
25307: PUSH
25308: LD_INT 2
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 21
25317: PUSH
25318: LD_INT 2
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 50
25327: PUSH
25328: EMPTY
25329: LIST
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: LIST
25335: PPUSH
25336: CALL_OW 69
25340: PUSH
25341: LD_INT 0
25343: EQUAL
25344: AND
25345: IFFALSE 25735
25347: GO 25349
25349: DISABLE
// begin DialogueOn ;
25350: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
25354: LD_EXP 1
25358: PPUSH
25359: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
25363: LD_EXP 1
25367: PPUSH
25368: LD_STRING D20-JMM-1
25370: PPUSH
25371: CALL_OW 88
// if IsOK ( Joan ) then
25375: LD_EXP 2
25379: PPUSH
25380: CALL_OW 302
25384: IFFALSE 25398
// Say ( Joan , D20-Joan-1 ) ;
25386: LD_EXP 2
25390: PPUSH
25391: LD_STRING D20-Joan-1
25393: PPUSH
25394: CALL_OW 88
// if IsOk ( Lisa ) then
25398: LD_EXP 4
25402: PPUSH
25403: CALL_OW 302
25407: IFFALSE 25421
// Say ( Lisa , D20-Lisa-1 ) ;
25409: LD_EXP 4
25413: PPUSH
25414: LD_STRING D20-Lisa-1
25416: PPUSH
25417: CALL_OW 88
// if IsOk ( Donaldson ) then
25421: LD_EXP 5
25425: PPUSH
25426: CALL_OW 302
25430: IFFALSE 25444
// Say ( Donaldson , D20-Don-1 ) ;
25432: LD_EXP 5
25436: PPUSH
25437: LD_STRING D20-Don-1
25439: PPUSH
25440: CALL_OW 88
// if IsOK ( Cornel ) then
25444: LD_EXP 12
25448: PPUSH
25449: CALL_OW 302
25453: IFFALSE 25467
// Say ( Cornel , D20-Corn-1 ) ;
25455: LD_EXP 12
25459: PPUSH
25460: LD_STRING D20-Corn-1
25462: PPUSH
25463: CALL_OW 88
// if IsOk ( Denis ) then
25467: LD_EXP 8
25471: PPUSH
25472: CALL_OW 302
25476: IFFALSE 25490
// Say ( Denis , D20-Den-1 ) ;
25478: LD_EXP 8
25482: PPUSH
25483: LD_STRING D20-Den-1
25485: PPUSH
25486: CALL_OW 88
// if IsOk ( Bobby ) then
25490: LD_EXP 6
25494: PPUSH
25495: CALL_OW 302
25499: IFFALSE 25513
// Say ( Bobby , D20-Bobby-1 ) ;
25501: LD_EXP 6
25505: PPUSH
25506: LD_STRING D20-Bobby-1
25508: PPUSH
25509: CALL_OW 88
// if IsOk ( Gladstone ) then
25513: LD_EXP 10
25517: PPUSH
25518: CALL_OW 302
25522: IFFALSE 25536
// Say ( Gladstone , D20-Glad-1 ) ;
25524: LD_EXP 10
25528: PPUSH
25529: LD_STRING D20-Glad-1
25531: PPUSH
25532: CALL_OW 88
// if IsOk ( Cyrus ) then
25536: LD_EXP 7
25540: PPUSH
25541: CALL_OW 302
25545: IFFALSE 25559
// Say ( Cyrus , D20-Cyrus-1 ) ;
25547: LD_EXP 7
25551: PPUSH
25552: LD_STRING D20-Cyrus-1
25554: PPUSH
25555: CALL_OW 88
// if IsOk ( Stevens ) then
25559: LD_EXP 3
25563: PPUSH
25564: CALL_OW 302
25568: IFFALSE 25582
// Say ( Stevens , D20-Huck-1 ) ;
25570: LD_EXP 3
25574: PPUSH
25575: LD_STRING D20-Huck-1
25577: PPUSH
25578: CALL_OW 88
// if IsOk ( Brown ) then
25582: LD_EXP 9
25586: PPUSH
25587: CALL_OW 302
25591: IFFALSE 25605
// Say ( Brown , D20-Brown-1 ) ;
25593: LD_EXP 9
25597: PPUSH
25598: LD_STRING D20-Brown-1
25600: PPUSH
25601: CALL_OW 88
// if IsOk ( Gary ) then
25605: LD_EXP 13
25609: PPUSH
25610: CALL_OW 302
25614: IFFALSE 25628
// Say ( Gary , D20-Gary-1 ) ;
25616: LD_EXP 13
25620: PPUSH
25621: LD_STRING D20-Gary-1
25623: PPUSH
25624: CALL_OW 88
// if IsOk ( Connie ) then
25628: LD_EXP 16
25632: PPUSH
25633: CALL_OW 302
25637: IFFALSE 25651
// Say ( Connie , D20-Con-1 ) ;
25639: LD_EXP 16
25643: PPUSH
25644: LD_STRING D20-Con-1
25646: PPUSH
25647: CALL_OW 88
// if IsOk ( Kurt ) then
25651: LD_EXP 28
25655: PPUSH
25656: CALL_OW 302
25660: IFFALSE 25674
// Say ( Kurt , D20-Kurt-1 ) ;
25662: LD_EXP 28
25666: PPUSH
25667: LD_STRING D20-Kurt-1
25669: PPUSH
25670: CALL_OW 88
// if IsOk ( Kikuchi ) then
25674: LD_EXP 15
25678: PPUSH
25679: CALL_OW 302
25683: IFFALSE 25697
// Say ( Kikuchi , D20-Yam-1 ) ;
25685: LD_EXP 15
25689: PPUSH
25690: LD_STRING D20-Yam-1
25692: PPUSH
25693: CALL_OW 88
// if IsOk ( Frank ) then
25697: LD_EXP 14
25701: PPUSH
25702: CALL_OW 302
25706: IFFALSE 25720
// Say ( Frank , D20-Frank-1 ) ;
25708: LD_EXP 14
25712: PPUSH
25713: LD_STRING D20-Frank-1
25715: PPUSH
25716: CALL_OW 88
// DialogueOff ;
25720: CALL_OW 7
// GiveMedals ( MAIN ) ;
25724: LD_STRING MAIN
25726: PPUSH
25727: CALL_OW 102
// YouWin ;
25731: CALL_OW 103
// end ; end_of_file
25735: END
// export function PrepareOmarArmy ; var i , un , veh , omarMastodont ; begin
25736: LD_INT 0
25738: PPUSH
25739: PPUSH
25740: PPUSH
25741: PPUSH
25742: PPUSH
// uc_side = 2 ;
25743: LD_ADDR_OWVAR 20
25747: PUSH
25748: LD_INT 2
25750: ST_TO_ADDR
// uc_nation = 2 ;
25751: LD_ADDR_OWVAR 21
25755: PUSH
25756: LD_INT 2
25758: ST_TO_ADDR
// Omar = PrepareUnit ( Omar , false ) ;
25759: LD_ADDR_EXP 29
25763: PUSH
25764: LD_STRING Omar
25766: PPUSH
25767: LD_INT 0
25769: PPUSH
25770: CALL 5442 0 2
25774: ST_TO_ADDR
// Heike = PrepareUnit ( Heike , false ) ;
25775: LD_ADDR_EXP 30
25779: PUSH
25780: LD_STRING Heike
25782: PPUSH
25783: LD_INT 0
25785: PPUSH
25786: CALL 5442 0 2
25790: ST_TO_ADDR
// PlaceUnitArea ( Heike , ArabianSpawn , false ) ;
25791: LD_EXP 30
25795: PPUSH
25796: LD_INT 26
25798: PPUSH
25799: LD_INT 0
25801: PPUSH
25802: CALL_OW 49
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
25806: LD_ADDR_VAR 0 2
25810: PUSH
25811: DOUBLE
25812: LD_INT 1
25814: DEC
25815: ST_TO_ADDR
25816: LD_INT 5
25818: PUSH
25819: LD_INT 6
25821: PUSH
25822: LD_INT 7
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: LIST
25829: PUSH
25830: LD_OWVAR 67
25834: ARRAY
25835: PUSH
25836: FOR_TO
25837: IFFALSE 25892
// begin hc_name =  ;
25839: LD_ADDR_OWVAR 26
25843: PUSH
25844: LD_STRING 
25846: ST_TO_ADDR
// hc_gallery =  ;
25847: LD_ADDR_OWVAR 33
25851: PUSH
25852: LD_STRING 
25854: ST_TO_ADDR
// PrepareSoldier ( false , 8 ) ;
25855: LD_INT 0
25857: PPUSH
25858: LD_INT 8
25860: PPUSH
25861: CALL_OW 381
// un = CreateHuman ;
25865: LD_ADDR_VAR 0 3
25869: PUSH
25870: CALL_OW 44
25874: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
25875: LD_VAR 0 3
25879: PPUSH
25880: LD_INT 26
25882: PPUSH
25883: LD_INT 0
25885: PPUSH
25886: CALL_OW 49
// end ;
25890: GO 25836
25892: POP
25893: POP
// for i := 1 to 4 do
25894: LD_ADDR_VAR 0 2
25898: PUSH
25899: DOUBLE
25900: LD_INT 1
25902: DEC
25903: ST_TO_ADDR
25904: LD_INT 4
25906: PUSH
25907: FOR_TO
25908: IFFALSE 25963
// begin hc_name =  ;
25910: LD_ADDR_OWVAR 26
25914: PUSH
25915: LD_STRING 
25917: ST_TO_ADDR
// hc_gallery =  ;
25918: LD_ADDR_OWVAR 33
25922: PUSH
25923: LD_STRING 
25925: ST_TO_ADDR
// PrepareScientist ( false , 8 ) ;
25926: LD_INT 0
25928: PPUSH
25929: LD_INT 8
25931: PPUSH
25932: CALL_OW 384
// un = CreateHuman ;
25936: LD_ADDR_VAR 0 3
25940: PUSH
25941: CALL_OW 44
25945: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
25946: LD_VAR 0 3
25950: PPUSH
25951: LD_INT 26
25953: PPUSH
25954: LD_INT 0
25956: PPUSH
25957: CALL_OW 49
// end ;
25961: GO 25907
25963: POP
25964: POP
// for i := 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
25965: LD_ADDR_VAR 0 2
25969: PUSH
25970: DOUBLE
25971: LD_INT 1
25973: DEC
25974: ST_TO_ADDR
25975: LD_INT 8
25977: PUSH
25978: LD_INT 9
25980: PUSH
25981: LD_INT 10
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: LIST
25988: PUSH
25989: LD_OWVAR 67
25993: ARRAY
25994: PUSH
25995: FOR_TO
25996: IFFALSE 26084
// begin vc_engine = 3 ;
25998: LD_ADDR_OWVAR 39
26002: PUSH
26003: LD_INT 3
26005: ST_TO_ADDR
// vc_control = 5 ;
26006: LD_ADDR_OWVAR 38
26010: PUSH
26011: LD_INT 5
26013: ST_TO_ADDR
// vc_chassis = 14 ;
26014: LD_ADDR_OWVAR 37
26018: PUSH
26019: LD_INT 14
26021: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 , 25 ] [ Rand ( 1 , 3 ) ] ;
26022: LD_ADDR_OWVAR 40
26026: PUSH
26027: LD_INT 27
26029: PUSH
26030: LD_INT 26
26032: PUSH
26033: LD_INT 28
26035: PUSH
26036: LD_INT 25
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 1
26047: PPUSH
26048: LD_INT 3
26050: PPUSH
26051: CALL_OW 12
26055: ARRAY
26056: ST_TO_ADDR
// veh = CreateVehicle ;
26057: LD_ADDR_VAR 0 4
26061: PUSH
26062: CALL_OW 45
26066: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawn , false ) ;
26067: LD_VAR 0 4
26071: PPUSH
26072: LD_INT 26
26074: PPUSH
26075: LD_INT 0
26077: PPUSH
26078: CALL_OW 49
// end ;
26082: GO 25995
26084: POP
26085: POP
// vc_chassis := 31 ;
26086: LD_ADDR_OWVAR 37
26090: PUSH
26091: LD_INT 31
26093: ST_TO_ADDR
// vc_control := control_rider ;
26094: LD_ADDR_OWVAR 38
26098: PUSH
26099: LD_INT 4
26101: ST_TO_ADDR
// omarMastodont := CreateVehicle ;
26102: LD_ADDR_VAR 0 5
26106: PUSH
26107: CALL_OW 45
26111: ST_TO_ADDR
// PlaceUnitArea ( omarMastodont , ArabianSpawn , false ) ;
26112: LD_VAR 0 5
26116: PPUSH
26117: LD_INT 26
26119: PPUSH
26120: LD_INT 0
26122: PPUSH
26123: CALL_OW 49
// PlaceHumanInUnit ( Omar , omarMastodont ) ;
26127: LD_EXP 29
26131: PPUSH
26132: LD_VAR 0 5
26136: PPUSH
26137: CALL_OW 52
// end ;
26141: LD_VAR 0 1
26145: RET
